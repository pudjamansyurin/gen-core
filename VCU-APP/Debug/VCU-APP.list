
VCU-APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002321c  080201e0  080201e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013110  08043400  08043400  00033400  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08056510  08056510  00050498  2**0
                  CONTENTS
  4 .ARM          00000008  08056510  08056510  00046510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08056518  08056518  00050498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08056518  08056518  00046518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0805651c  0805651c  0004651c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000498  20000000  08056520  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008c50  20000498  080569b8  00050498  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200090e8  080569b8  000590e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00050498  2**0
                  CONTENTS, READONLY
 12 .debug_info   000512ea  00000000  00000000  000504c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00009984  00000000  00000000  000a17b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002f80  00000000  00000000  000ab138  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0003332f  00000000  00000000  000ae0b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00039fe3  00000000  00000000  000e13e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000f4d68  00000000  00000000  0011b3ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00210132  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00002b88  00000000  00000000  002101b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  0000d090  00000000  00000000  00212d38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080201e0 <__do_global_dtors_aux>:
 80201e0:	b510      	push	{r4, lr}
 80201e2:	4c05      	ldr	r4, [pc, #20]	; (80201f8 <__do_global_dtors_aux+0x18>)
 80201e4:	7823      	ldrb	r3, [r4, #0]
 80201e6:	b933      	cbnz	r3, 80201f6 <__do_global_dtors_aux+0x16>
 80201e8:	4b04      	ldr	r3, [pc, #16]	; (80201fc <__do_global_dtors_aux+0x1c>)
 80201ea:	b113      	cbz	r3, 80201f2 <__do_global_dtors_aux+0x12>
 80201ec:	4804      	ldr	r0, [pc, #16]	; (8020200 <__do_global_dtors_aux+0x20>)
 80201ee:	f3af 8000 	nop.w
 80201f2:	2301      	movs	r3, #1
 80201f4:	7023      	strb	r3, [r4, #0]
 80201f6:	bd10      	pop	{r4, pc}
 80201f8:	20000498 	.word	0x20000498
 80201fc:	00000000 	.word	0x00000000
 8020200:	080433e4 	.word	0x080433e4

08020204 <frame_dummy>:
 8020204:	b508      	push	{r3, lr}
 8020206:	4b03      	ldr	r3, [pc, #12]	; (8020214 <frame_dummy+0x10>)
 8020208:	b11b      	cbz	r3, 8020212 <frame_dummy+0xe>
 802020a:	4903      	ldr	r1, [pc, #12]	; (8020218 <frame_dummy+0x14>)
 802020c:	4803      	ldr	r0, [pc, #12]	; (802021c <frame_dummy+0x18>)
 802020e:	f3af 8000 	nop.w
 8020212:	bd08      	pop	{r3, pc}
 8020214:	00000000 	.word	0x00000000
 8020218:	2000049c 	.word	0x2000049c
 802021c:	080433e4 	.word	0x080433e4

08020220 <strcmp>:
 8020220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020228:	2a01      	cmp	r2, #1
 802022a:	bf28      	it	cs
 802022c:	429a      	cmpcs	r2, r3
 802022e:	d0f7      	beq.n	8020220 <strcmp>
 8020230:	1ad0      	subs	r0, r2, r3
 8020232:	4770      	bx	lr

08020234 <strlen>:
 8020234:	4603      	mov	r3, r0
 8020236:	f813 2b01 	ldrb.w	r2, [r3], #1
 802023a:	2a00      	cmp	r2, #0
 802023c:	d1fb      	bne.n	8020236 <strlen+0x2>
 802023e:	1a18      	subs	r0, r3, r0
 8020240:	3801      	subs	r0, #1
 8020242:	4770      	bx	lr
	...

08020250 <memchr>:
 8020250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8020254:	2a10      	cmp	r2, #16
 8020256:	db2b      	blt.n	80202b0 <memchr+0x60>
 8020258:	f010 0f07 	tst.w	r0, #7
 802025c:	d008      	beq.n	8020270 <memchr+0x20>
 802025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020262:	3a01      	subs	r2, #1
 8020264:	428b      	cmp	r3, r1
 8020266:	d02d      	beq.n	80202c4 <memchr+0x74>
 8020268:	f010 0f07 	tst.w	r0, #7
 802026c:	b342      	cbz	r2, 80202c0 <memchr+0x70>
 802026e:	d1f6      	bne.n	802025e <memchr+0xe>
 8020270:	b4f0      	push	{r4, r5, r6, r7}
 8020272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802027a:	f022 0407 	bic.w	r4, r2, #7
 802027e:	f07f 0700 	mvns.w	r7, #0
 8020282:	2300      	movs	r3, #0
 8020284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020288:	3c08      	subs	r4, #8
 802028a:	ea85 0501 	eor.w	r5, r5, r1
 802028e:	ea86 0601 	eor.w	r6, r6, r1
 8020292:	fa85 f547 	uadd8	r5, r5, r7
 8020296:	faa3 f587 	sel	r5, r3, r7
 802029a:	fa86 f647 	uadd8	r6, r6, r7
 802029e:	faa5 f687 	sel	r6, r5, r7
 80202a2:	b98e      	cbnz	r6, 80202c8 <memchr+0x78>
 80202a4:	d1ee      	bne.n	8020284 <memchr+0x34>
 80202a6:	bcf0      	pop	{r4, r5, r6, r7}
 80202a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80202ac:	f002 0207 	and.w	r2, r2, #7
 80202b0:	b132      	cbz	r2, 80202c0 <memchr+0x70>
 80202b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80202b6:	3a01      	subs	r2, #1
 80202b8:	ea83 0301 	eor.w	r3, r3, r1
 80202bc:	b113      	cbz	r3, 80202c4 <memchr+0x74>
 80202be:	d1f8      	bne.n	80202b2 <memchr+0x62>
 80202c0:	2000      	movs	r0, #0
 80202c2:	4770      	bx	lr
 80202c4:	3801      	subs	r0, #1
 80202c6:	4770      	bx	lr
 80202c8:	2d00      	cmp	r5, #0
 80202ca:	bf06      	itte	eq
 80202cc:	4635      	moveq	r5, r6
 80202ce:	3803      	subeq	r0, #3
 80202d0:	3807      	subne	r0, #7
 80202d2:	f015 0f01 	tst.w	r5, #1
 80202d6:	d107      	bne.n	80202e8 <memchr+0x98>
 80202d8:	3001      	adds	r0, #1
 80202da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80202de:	bf02      	ittt	eq
 80202e0:	3001      	addeq	r0, #1
 80202e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80202e6:	3001      	addeq	r0, #1
 80202e8:	bcf0      	pop	{r4, r5, r6, r7}
 80202ea:	3801      	subs	r0, #1
 80202ec:	4770      	bx	lr
 80202ee:	bf00      	nop

080202f0 <__aeabi_drsub>:
 80202f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80202f4:	e002      	b.n	80202fc <__adddf3>
 80202f6:	bf00      	nop

080202f8 <__aeabi_dsub>:
 80202f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080202fc <__adddf3>:
 80202fc:	b530      	push	{r4, r5, lr}
 80202fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8020302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8020306:	ea94 0f05 	teq	r4, r5
 802030a:	bf08      	it	eq
 802030c:	ea90 0f02 	teqeq	r0, r2
 8020310:	bf1f      	itttt	ne
 8020312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8020316:	ea55 0c02 	orrsne.w	ip, r5, r2
 802031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 802031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020322:	f000 80e2 	beq.w	80204ea <__adddf3+0x1ee>
 8020326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 802032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 802032e:	bfb8      	it	lt
 8020330:	426d      	neglt	r5, r5
 8020332:	dd0c      	ble.n	802034e <__adddf3+0x52>
 8020334:	442c      	add	r4, r5
 8020336:	ea80 0202 	eor.w	r2, r0, r2
 802033a:	ea81 0303 	eor.w	r3, r1, r3
 802033e:	ea82 0000 	eor.w	r0, r2, r0
 8020342:	ea83 0101 	eor.w	r1, r3, r1
 8020346:	ea80 0202 	eor.w	r2, r0, r2
 802034a:	ea81 0303 	eor.w	r3, r1, r3
 802034e:	2d36      	cmp	r5, #54	; 0x36
 8020350:	bf88      	it	hi
 8020352:	bd30      	pophi	{r4, r5, pc}
 8020354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8020358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 802035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8020360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8020364:	d002      	beq.n	802036c <__adddf3+0x70>
 8020366:	4240      	negs	r0, r0
 8020368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 802036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8020370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8020378:	d002      	beq.n	8020380 <__adddf3+0x84>
 802037a:	4252      	negs	r2, r2
 802037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8020380:	ea94 0f05 	teq	r4, r5
 8020384:	f000 80a7 	beq.w	80204d6 <__adddf3+0x1da>
 8020388:	f1a4 0401 	sub.w	r4, r4, #1
 802038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8020390:	db0d      	blt.n	80203ae <__adddf3+0xb2>
 8020392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8020396:	fa22 f205 	lsr.w	r2, r2, r5
 802039a:	1880      	adds	r0, r0, r2
 802039c:	f141 0100 	adc.w	r1, r1, #0
 80203a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80203a4:	1880      	adds	r0, r0, r2
 80203a6:	fa43 f305 	asr.w	r3, r3, r5
 80203aa:	4159      	adcs	r1, r3
 80203ac:	e00e      	b.n	80203cc <__adddf3+0xd0>
 80203ae:	f1a5 0520 	sub.w	r5, r5, #32
 80203b2:	f10e 0e20 	add.w	lr, lr, #32
 80203b6:	2a01      	cmp	r2, #1
 80203b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80203bc:	bf28      	it	cs
 80203be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80203c2:	fa43 f305 	asr.w	r3, r3, r5
 80203c6:	18c0      	adds	r0, r0, r3
 80203c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80203cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80203d0:	d507      	bpl.n	80203e2 <__adddf3+0xe6>
 80203d2:	f04f 0e00 	mov.w	lr, #0
 80203d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80203da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80203de:	eb6e 0101 	sbc.w	r1, lr, r1
 80203e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80203e6:	d31b      	bcc.n	8020420 <__adddf3+0x124>
 80203e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80203ec:	d30c      	bcc.n	8020408 <__adddf3+0x10c>
 80203ee:	0849      	lsrs	r1, r1, #1
 80203f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80203f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80203f8:	f104 0401 	add.w	r4, r4, #1
 80203fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8020400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8020404:	f080 809a 	bcs.w	802053c <__adddf3+0x240>
 8020408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 802040c:	bf08      	it	eq
 802040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020412:	f150 0000 	adcs.w	r0, r0, #0
 8020416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802041a:	ea41 0105 	orr.w	r1, r1, r5
 802041e:	bd30      	pop	{r4, r5, pc}
 8020420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8020424:	4140      	adcs	r0, r0
 8020426:	eb41 0101 	adc.w	r1, r1, r1
 802042a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 802042e:	f1a4 0401 	sub.w	r4, r4, #1
 8020432:	d1e9      	bne.n	8020408 <__adddf3+0x10c>
 8020434:	f091 0f00 	teq	r1, #0
 8020438:	bf04      	itt	eq
 802043a:	4601      	moveq	r1, r0
 802043c:	2000      	moveq	r0, #0
 802043e:	fab1 f381 	clz	r3, r1
 8020442:	bf08      	it	eq
 8020444:	3320      	addeq	r3, #32
 8020446:	f1a3 030b 	sub.w	r3, r3, #11
 802044a:	f1b3 0220 	subs.w	r2, r3, #32
 802044e:	da0c      	bge.n	802046a <__adddf3+0x16e>
 8020450:	320c      	adds	r2, #12
 8020452:	dd08      	ble.n	8020466 <__adddf3+0x16a>
 8020454:	f102 0c14 	add.w	ip, r2, #20
 8020458:	f1c2 020c 	rsb	r2, r2, #12
 802045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8020460:	fa21 f102 	lsr.w	r1, r1, r2
 8020464:	e00c      	b.n	8020480 <__adddf3+0x184>
 8020466:	f102 0214 	add.w	r2, r2, #20
 802046a:	bfd8      	it	le
 802046c:	f1c2 0c20 	rsble	ip, r2, #32
 8020470:	fa01 f102 	lsl.w	r1, r1, r2
 8020474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8020478:	bfdc      	itt	le
 802047a:	ea41 010c 	orrle.w	r1, r1, ip
 802047e:	4090      	lslle	r0, r2
 8020480:	1ae4      	subs	r4, r4, r3
 8020482:	bfa2      	ittt	ge
 8020484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8020488:	4329      	orrge	r1, r5
 802048a:	bd30      	popge	{r4, r5, pc}
 802048c:	ea6f 0404 	mvn.w	r4, r4
 8020490:	3c1f      	subs	r4, #31
 8020492:	da1c      	bge.n	80204ce <__adddf3+0x1d2>
 8020494:	340c      	adds	r4, #12
 8020496:	dc0e      	bgt.n	80204b6 <__adddf3+0x1ba>
 8020498:	f104 0414 	add.w	r4, r4, #20
 802049c:	f1c4 0220 	rsb	r2, r4, #32
 80204a0:	fa20 f004 	lsr.w	r0, r0, r4
 80204a4:	fa01 f302 	lsl.w	r3, r1, r2
 80204a8:	ea40 0003 	orr.w	r0, r0, r3
 80204ac:	fa21 f304 	lsr.w	r3, r1, r4
 80204b0:	ea45 0103 	orr.w	r1, r5, r3
 80204b4:	bd30      	pop	{r4, r5, pc}
 80204b6:	f1c4 040c 	rsb	r4, r4, #12
 80204ba:	f1c4 0220 	rsb	r2, r4, #32
 80204be:	fa20 f002 	lsr.w	r0, r0, r2
 80204c2:	fa01 f304 	lsl.w	r3, r1, r4
 80204c6:	ea40 0003 	orr.w	r0, r0, r3
 80204ca:	4629      	mov	r1, r5
 80204cc:	bd30      	pop	{r4, r5, pc}
 80204ce:	fa21 f004 	lsr.w	r0, r1, r4
 80204d2:	4629      	mov	r1, r5
 80204d4:	bd30      	pop	{r4, r5, pc}
 80204d6:	f094 0f00 	teq	r4, #0
 80204da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80204de:	bf06      	itte	eq
 80204e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80204e4:	3401      	addeq	r4, #1
 80204e6:	3d01      	subne	r5, #1
 80204e8:	e74e      	b.n	8020388 <__adddf3+0x8c>
 80204ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80204ee:	bf18      	it	ne
 80204f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80204f4:	d029      	beq.n	802054a <__adddf3+0x24e>
 80204f6:	ea94 0f05 	teq	r4, r5
 80204fa:	bf08      	it	eq
 80204fc:	ea90 0f02 	teqeq	r0, r2
 8020500:	d005      	beq.n	802050e <__adddf3+0x212>
 8020502:	ea54 0c00 	orrs.w	ip, r4, r0
 8020506:	bf04      	itt	eq
 8020508:	4619      	moveq	r1, r3
 802050a:	4610      	moveq	r0, r2
 802050c:	bd30      	pop	{r4, r5, pc}
 802050e:	ea91 0f03 	teq	r1, r3
 8020512:	bf1e      	ittt	ne
 8020514:	2100      	movne	r1, #0
 8020516:	2000      	movne	r0, #0
 8020518:	bd30      	popne	{r4, r5, pc}
 802051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 802051e:	d105      	bne.n	802052c <__adddf3+0x230>
 8020520:	0040      	lsls	r0, r0, #1
 8020522:	4149      	adcs	r1, r1
 8020524:	bf28      	it	cs
 8020526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 802052a:	bd30      	pop	{r4, r5, pc}
 802052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8020530:	bf3c      	itt	cc
 8020532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8020536:	bd30      	popcc	{r4, r5, pc}
 8020538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 802053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8020540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8020544:	f04f 0000 	mov.w	r0, #0
 8020548:	bd30      	pop	{r4, r5, pc}
 802054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802054e:	bf1a      	itte	ne
 8020550:	4619      	movne	r1, r3
 8020552:	4610      	movne	r0, r2
 8020554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8020558:	bf1c      	itt	ne
 802055a:	460b      	movne	r3, r1
 802055c:	4602      	movne	r2, r0
 802055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8020562:	bf06      	itte	eq
 8020564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8020568:	ea91 0f03 	teqeq	r1, r3
 802056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8020570:	bd30      	pop	{r4, r5, pc}
 8020572:	bf00      	nop

08020574 <__aeabi_ui2d>:
 8020574:	f090 0f00 	teq	r0, #0
 8020578:	bf04      	itt	eq
 802057a:	2100      	moveq	r1, #0
 802057c:	4770      	bxeq	lr
 802057e:	b530      	push	{r4, r5, lr}
 8020580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8020588:	f04f 0500 	mov.w	r5, #0
 802058c:	f04f 0100 	mov.w	r1, #0
 8020590:	e750      	b.n	8020434 <__adddf3+0x138>
 8020592:	bf00      	nop

08020594 <__aeabi_i2d>:
 8020594:	f090 0f00 	teq	r0, #0
 8020598:	bf04      	itt	eq
 802059a:	2100      	moveq	r1, #0
 802059c:	4770      	bxeq	lr
 802059e:	b530      	push	{r4, r5, lr}
 80205a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80205a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80205a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80205ac:	bf48      	it	mi
 80205ae:	4240      	negmi	r0, r0
 80205b0:	f04f 0100 	mov.w	r1, #0
 80205b4:	e73e      	b.n	8020434 <__adddf3+0x138>
 80205b6:	bf00      	nop

080205b8 <__aeabi_f2d>:
 80205b8:	0042      	lsls	r2, r0, #1
 80205ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80205be:	ea4f 0131 	mov.w	r1, r1, rrx
 80205c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80205c6:	bf1f      	itttt	ne
 80205c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80205cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80205d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80205d4:	4770      	bxne	lr
 80205d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80205da:	bf08      	it	eq
 80205dc:	4770      	bxeq	lr
 80205de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80205e2:	bf04      	itt	eq
 80205e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80205e8:	4770      	bxeq	lr
 80205ea:	b530      	push	{r4, r5, lr}
 80205ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80205f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80205f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80205f8:	e71c      	b.n	8020434 <__adddf3+0x138>
 80205fa:	bf00      	nop

080205fc <__aeabi_ul2d>:
 80205fc:	ea50 0201 	orrs.w	r2, r0, r1
 8020600:	bf08      	it	eq
 8020602:	4770      	bxeq	lr
 8020604:	b530      	push	{r4, r5, lr}
 8020606:	f04f 0500 	mov.w	r5, #0
 802060a:	e00a      	b.n	8020622 <__aeabi_l2d+0x16>

0802060c <__aeabi_l2d>:
 802060c:	ea50 0201 	orrs.w	r2, r0, r1
 8020610:	bf08      	it	eq
 8020612:	4770      	bxeq	lr
 8020614:	b530      	push	{r4, r5, lr}
 8020616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 802061a:	d502      	bpl.n	8020622 <__aeabi_l2d+0x16>
 802061c:	4240      	negs	r0, r0
 802061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8020622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 802062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 802062e:	f43f aed8 	beq.w	80203e2 <__adddf3+0xe6>
 8020632:	f04f 0203 	mov.w	r2, #3
 8020636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 802063a:	bf18      	it	ne
 802063c:	3203      	addne	r2, #3
 802063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8020642:	bf18      	it	ne
 8020644:	3203      	addne	r2, #3
 8020646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 802064a:	f1c2 0320 	rsb	r3, r2, #32
 802064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8020652:	fa20 f002 	lsr.w	r0, r0, r2
 8020656:	fa01 fe03 	lsl.w	lr, r1, r3
 802065a:	ea40 000e 	orr.w	r0, r0, lr
 802065e:	fa21 f102 	lsr.w	r1, r1, r2
 8020662:	4414      	add	r4, r2
 8020664:	e6bd      	b.n	80203e2 <__adddf3+0xe6>
 8020666:	bf00      	nop

08020668 <__aeabi_dmul>:
 8020668:	b570      	push	{r4, r5, r6, lr}
 802066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 802066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8020672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8020676:	bf1d      	ittte	ne
 8020678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 802067c:	ea94 0f0c 	teqne	r4, ip
 8020680:	ea95 0f0c 	teqne	r5, ip
 8020684:	f000 f8de 	bleq	8020844 <__aeabi_dmul+0x1dc>
 8020688:	442c      	add	r4, r5
 802068a:	ea81 0603 	eor.w	r6, r1, r3
 802068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8020692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8020696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 802069a:	bf18      	it	ne
 802069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80206a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80206a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80206a8:	d038      	beq.n	802071c <__aeabi_dmul+0xb4>
 80206aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80206ae:	f04f 0500 	mov.w	r5, #0
 80206b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80206b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80206ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80206be:	f04f 0600 	mov.w	r6, #0
 80206c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80206c6:	f09c 0f00 	teq	ip, #0
 80206ca:	bf18      	it	ne
 80206cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80206d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80206d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80206d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80206dc:	d204      	bcs.n	80206e8 <__aeabi_dmul+0x80>
 80206de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80206e2:	416d      	adcs	r5, r5
 80206e4:	eb46 0606 	adc.w	r6, r6, r6
 80206e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80206ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80206f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80206f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80206f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80206fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8020700:	bf88      	it	hi
 8020702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020706:	d81e      	bhi.n	8020746 <__aeabi_dmul+0xde>
 8020708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 802070c:	bf08      	it	eq
 802070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8020712:	f150 0000 	adcs.w	r0, r0, #0
 8020716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802071a:	bd70      	pop	{r4, r5, r6, pc}
 802071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8020720:	ea46 0101 	orr.w	r1, r6, r1
 8020724:	ea40 0002 	orr.w	r0, r0, r2
 8020728:	ea81 0103 	eor.w	r1, r1, r3
 802072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8020730:	bfc2      	ittt	gt
 8020732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 802073a:	bd70      	popgt	{r4, r5, r6, pc}
 802073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020740:	f04f 0e00 	mov.w	lr, #0
 8020744:	3c01      	subs	r4, #1
 8020746:	f300 80ab 	bgt.w	80208a0 <__aeabi_dmul+0x238>
 802074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 802074e:	bfde      	ittt	le
 8020750:	2000      	movle	r0, #0
 8020752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8020756:	bd70      	pople	{r4, r5, r6, pc}
 8020758:	f1c4 0400 	rsb	r4, r4, #0
 802075c:	3c20      	subs	r4, #32
 802075e:	da35      	bge.n	80207cc <__aeabi_dmul+0x164>
 8020760:	340c      	adds	r4, #12
 8020762:	dc1b      	bgt.n	802079c <__aeabi_dmul+0x134>
 8020764:	f104 0414 	add.w	r4, r4, #20
 8020768:	f1c4 0520 	rsb	r5, r4, #32
 802076c:	fa00 f305 	lsl.w	r3, r0, r5
 8020770:	fa20 f004 	lsr.w	r0, r0, r4
 8020774:	fa01 f205 	lsl.w	r2, r1, r5
 8020778:	ea40 0002 	orr.w	r0, r0, r2
 802077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8020780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8020784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8020788:	fa21 f604 	lsr.w	r6, r1, r4
 802078c:	eb42 0106 	adc.w	r1, r2, r6
 8020790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020794:	bf08      	it	eq
 8020796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802079a:	bd70      	pop	{r4, r5, r6, pc}
 802079c:	f1c4 040c 	rsb	r4, r4, #12
 80207a0:	f1c4 0520 	rsb	r5, r4, #32
 80207a4:	fa00 f304 	lsl.w	r3, r0, r4
 80207a8:	fa20 f005 	lsr.w	r0, r0, r5
 80207ac:	fa01 f204 	lsl.w	r2, r1, r4
 80207b0:	ea40 0002 	orr.w	r0, r0, r2
 80207b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80207b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80207bc:	f141 0100 	adc.w	r1, r1, #0
 80207c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80207c4:	bf08      	it	eq
 80207c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80207ca:	bd70      	pop	{r4, r5, r6, pc}
 80207cc:	f1c4 0520 	rsb	r5, r4, #32
 80207d0:	fa00 f205 	lsl.w	r2, r0, r5
 80207d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80207d8:	fa20 f304 	lsr.w	r3, r0, r4
 80207dc:	fa01 f205 	lsl.w	r2, r1, r5
 80207e0:	ea43 0302 	orr.w	r3, r3, r2
 80207e4:	fa21 f004 	lsr.w	r0, r1, r4
 80207e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80207ec:	fa21 f204 	lsr.w	r2, r1, r4
 80207f0:	ea20 0002 	bic.w	r0, r0, r2
 80207f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80207f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80207fc:	bf08      	it	eq
 80207fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8020802:	bd70      	pop	{r4, r5, r6, pc}
 8020804:	f094 0f00 	teq	r4, #0
 8020808:	d10f      	bne.n	802082a <__aeabi_dmul+0x1c2>
 802080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 802080e:	0040      	lsls	r0, r0, #1
 8020810:	eb41 0101 	adc.w	r1, r1, r1
 8020814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020818:	bf08      	it	eq
 802081a:	3c01      	subeq	r4, #1
 802081c:	d0f7      	beq.n	802080e <__aeabi_dmul+0x1a6>
 802081e:	ea41 0106 	orr.w	r1, r1, r6
 8020822:	f095 0f00 	teq	r5, #0
 8020826:	bf18      	it	ne
 8020828:	4770      	bxne	lr
 802082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 802082e:	0052      	lsls	r2, r2, #1
 8020830:	eb43 0303 	adc.w	r3, r3, r3
 8020834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8020838:	bf08      	it	eq
 802083a:	3d01      	subeq	r5, #1
 802083c:	d0f7      	beq.n	802082e <__aeabi_dmul+0x1c6>
 802083e:	ea43 0306 	orr.w	r3, r3, r6
 8020842:	4770      	bx	lr
 8020844:	ea94 0f0c 	teq	r4, ip
 8020848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 802084c:	bf18      	it	ne
 802084e:	ea95 0f0c 	teqne	r5, ip
 8020852:	d00c      	beq.n	802086e <__aeabi_dmul+0x206>
 8020854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020858:	bf18      	it	ne
 802085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 802085e:	d1d1      	bne.n	8020804 <__aeabi_dmul+0x19c>
 8020860:	ea81 0103 	eor.w	r1, r1, r3
 8020864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020868:	f04f 0000 	mov.w	r0, #0
 802086c:	bd70      	pop	{r4, r5, r6, pc}
 802086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020872:	bf06      	itte	eq
 8020874:	4610      	moveq	r0, r2
 8020876:	4619      	moveq	r1, r3
 8020878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 802087c:	d019      	beq.n	80208b2 <__aeabi_dmul+0x24a>
 802087e:	ea94 0f0c 	teq	r4, ip
 8020882:	d102      	bne.n	802088a <__aeabi_dmul+0x222>
 8020884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8020888:	d113      	bne.n	80208b2 <__aeabi_dmul+0x24a>
 802088a:	ea95 0f0c 	teq	r5, ip
 802088e:	d105      	bne.n	802089c <__aeabi_dmul+0x234>
 8020890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8020894:	bf1c      	itt	ne
 8020896:	4610      	movne	r0, r2
 8020898:	4619      	movne	r1, r3
 802089a:	d10a      	bne.n	80208b2 <__aeabi_dmul+0x24a>
 802089c:	ea81 0103 	eor.w	r1, r1, r3
 80208a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80208a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80208a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80208ac:	f04f 0000 	mov.w	r0, #0
 80208b0:	bd70      	pop	{r4, r5, r6, pc}
 80208b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80208b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80208ba:	bd70      	pop	{r4, r5, r6, pc}

080208bc <__aeabi_ddiv>:
 80208bc:	b570      	push	{r4, r5, r6, lr}
 80208be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80208c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80208c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80208ca:	bf1d      	ittte	ne
 80208cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80208d0:	ea94 0f0c 	teqne	r4, ip
 80208d4:	ea95 0f0c 	teqne	r5, ip
 80208d8:	f000 f8a7 	bleq	8020a2a <__aeabi_ddiv+0x16e>
 80208dc:	eba4 0405 	sub.w	r4, r4, r5
 80208e0:	ea81 0e03 	eor.w	lr, r1, r3
 80208e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80208e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80208ec:	f000 8088 	beq.w	8020a00 <__aeabi_ddiv+0x144>
 80208f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80208f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80208f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80208fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8020900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8020904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8020908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 802090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8020910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8020914:	429d      	cmp	r5, r3
 8020916:	bf08      	it	eq
 8020918:	4296      	cmpeq	r6, r2
 802091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 802091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8020922:	d202      	bcs.n	802092a <__aeabi_ddiv+0x6e>
 8020924:	085b      	lsrs	r3, r3, #1
 8020926:	ea4f 0232 	mov.w	r2, r2, rrx
 802092a:	1ab6      	subs	r6, r6, r2
 802092c:	eb65 0503 	sbc.w	r5, r5, r3
 8020930:	085b      	lsrs	r3, r3, #1
 8020932:	ea4f 0232 	mov.w	r2, r2, rrx
 8020936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 802093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 802093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8020942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020946:	bf22      	ittt	cs
 8020948:	1ab6      	subcs	r6, r6, r2
 802094a:	4675      	movcs	r5, lr
 802094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8020950:	085b      	lsrs	r3, r3, #1
 8020952:	ea4f 0232 	mov.w	r2, r2, rrx
 8020956:	ebb6 0e02 	subs.w	lr, r6, r2
 802095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 802095e:	bf22      	ittt	cs
 8020960:	1ab6      	subcs	r6, r6, r2
 8020962:	4675      	movcs	r5, lr
 8020964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8020968:	085b      	lsrs	r3, r3, #1
 802096a:	ea4f 0232 	mov.w	r2, r2, rrx
 802096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8020972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020976:	bf22      	ittt	cs
 8020978:	1ab6      	subcs	r6, r6, r2
 802097a:	4675      	movcs	r5, lr
 802097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8020980:	085b      	lsrs	r3, r3, #1
 8020982:	ea4f 0232 	mov.w	r2, r2, rrx
 8020986:	ebb6 0e02 	subs.w	lr, r6, r2
 802098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 802098e:	bf22      	ittt	cs
 8020990:	1ab6      	subcs	r6, r6, r2
 8020992:	4675      	movcs	r5, lr
 8020994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8020998:	ea55 0e06 	orrs.w	lr, r5, r6
 802099c:	d018      	beq.n	80209d0 <__aeabi_ddiv+0x114>
 802099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80209a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80209a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80209aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80209ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80209b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80209b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80209ba:	d1c0      	bne.n	802093e <__aeabi_ddiv+0x82>
 80209bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80209c0:	d10b      	bne.n	80209da <__aeabi_ddiv+0x11e>
 80209c2:	ea41 0100 	orr.w	r1, r1, r0
 80209c6:	f04f 0000 	mov.w	r0, #0
 80209ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80209ce:	e7b6      	b.n	802093e <__aeabi_ddiv+0x82>
 80209d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80209d4:	bf04      	itt	eq
 80209d6:	4301      	orreq	r1, r0
 80209d8:	2000      	moveq	r0, #0
 80209da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80209de:	bf88      	it	hi
 80209e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80209e4:	f63f aeaf 	bhi.w	8020746 <__aeabi_dmul+0xde>
 80209e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80209ec:	bf04      	itt	eq
 80209ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80209f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80209f6:	f150 0000 	adcs.w	r0, r0, #0
 80209fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80209fe:	bd70      	pop	{r4, r5, r6, pc}
 8020a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8020a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8020a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8020a0c:	bfc2      	ittt	gt
 8020a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8020a16:	bd70      	popgt	{r4, r5, r6, pc}
 8020a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020a1c:	f04f 0e00 	mov.w	lr, #0
 8020a20:	3c01      	subs	r4, #1
 8020a22:	e690      	b.n	8020746 <__aeabi_dmul+0xde>
 8020a24:	ea45 0e06 	orr.w	lr, r5, r6
 8020a28:	e68d      	b.n	8020746 <__aeabi_dmul+0xde>
 8020a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8020a2e:	ea94 0f0c 	teq	r4, ip
 8020a32:	bf08      	it	eq
 8020a34:	ea95 0f0c 	teqeq	r5, ip
 8020a38:	f43f af3b 	beq.w	80208b2 <__aeabi_dmul+0x24a>
 8020a3c:	ea94 0f0c 	teq	r4, ip
 8020a40:	d10a      	bne.n	8020a58 <__aeabi_ddiv+0x19c>
 8020a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8020a46:	f47f af34 	bne.w	80208b2 <__aeabi_dmul+0x24a>
 8020a4a:	ea95 0f0c 	teq	r5, ip
 8020a4e:	f47f af25 	bne.w	802089c <__aeabi_dmul+0x234>
 8020a52:	4610      	mov	r0, r2
 8020a54:	4619      	mov	r1, r3
 8020a56:	e72c      	b.n	80208b2 <__aeabi_dmul+0x24a>
 8020a58:	ea95 0f0c 	teq	r5, ip
 8020a5c:	d106      	bne.n	8020a6c <__aeabi_ddiv+0x1b0>
 8020a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8020a62:	f43f aefd 	beq.w	8020860 <__aeabi_dmul+0x1f8>
 8020a66:	4610      	mov	r0, r2
 8020a68:	4619      	mov	r1, r3
 8020a6a:	e722      	b.n	80208b2 <__aeabi_dmul+0x24a>
 8020a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020a70:	bf18      	it	ne
 8020a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8020a76:	f47f aec5 	bne.w	8020804 <__aeabi_dmul+0x19c>
 8020a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8020a7e:	f47f af0d 	bne.w	802089c <__aeabi_dmul+0x234>
 8020a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8020a86:	f47f aeeb 	bne.w	8020860 <__aeabi_dmul+0x1f8>
 8020a8a:	e712      	b.n	80208b2 <__aeabi_dmul+0x24a>

08020a8c <__gedf2>:
 8020a8c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8020a90:	e006      	b.n	8020aa0 <__cmpdf2+0x4>
 8020a92:	bf00      	nop

08020a94 <__ledf2>:
 8020a94:	f04f 0c01 	mov.w	ip, #1
 8020a98:	e002      	b.n	8020aa0 <__cmpdf2+0x4>
 8020a9a:	bf00      	nop

08020a9c <__cmpdf2>:
 8020a9c:	f04f 0c01 	mov.w	ip, #1
 8020aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8020aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020ab0:	bf18      	it	ne
 8020ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8020ab6:	d01b      	beq.n	8020af0 <__cmpdf2+0x54>
 8020ab8:	b001      	add	sp, #4
 8020aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8020abe:	bf0c      	ite	eq
 8020ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8020ac4:	ea91 0f03 	teqne	r1, r3
 8020ac8:	bf02      	ittt	eq
 8020aca:	ea90 0f02 	teqeq	r0, r2
 8020ace:	2000      	moveq	r0, #0
 8020ad0:	4770      	bxeq	lr
 8020ad2:	f110 0f00 	cmn.w	r0, #0
 8020ad6:	ea91 0f03 	teq	r1, r3
 8020ada:	bf58      	it	pl
 8020adc:	4299      	cmppl	r1, r3
 8020ade:	bf08      	it	eq
 8020ae0:	4290      	cmpeq	r0, r2
 8020ae2:	bf2c      	ite	cs
 8020ae4:	17d8      	asrcs	r0, r3, #31
 8020ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8020aea:	f040 0001 	orr.w	r0, r0, #1
 8020aee:	4770      	bx	lr
 8020af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020af8:	d102      	bne.n	8020b00 <__cmpdf2+0x64>
 8020afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8020afe:	d107      	bne.n	8020b10 <__cmpdf2+0x74>
 8020b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020b08:	d1d6      	bne.n	8020ab8 <__cmpdf2+0x1c>
 8020b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8020b0e:	d0d3      	beq.n	8020ab8 <__cmpdf2+0x1c>
 8020b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8020b14:	4770      	bx	lr
 8020b16:	bf00      	nop

08020b18 <__aeabi_cdrcmple>:
 8020b18:	4684      	mov	ip, r0
 8020b1a:	4610      	mov	r0, r2
 8020b1c:	4662      	mov	r2, ip
 8020b1e:	468c      	mov	ip, r1
 8020b20:	4619      	mov	r1, r3
 8020b22:	4663      	mov	r3, ip
 8020b24:	e000      	b.n	8020b28 <__aeabi_cdcmpeq>
 8020b26:	bf00      	nop

08020b28 <__aeabi_cdcmpeq>:
 8020b28:	b501      	push	{r0, lr}
 8020b2a:	f7ff ffb7 	bl	8020a9c <__cmpdf2>
 8020b2e:	2800      	cmp	r0, #0
 8020b30:	bf48      	it	mi
 8020b32:	f110 0f00 	cmnmi.w	r0, #0
 8020b36:	bd01      	pop	{r0, pc}

08020b38 <__aeabi_dcmpeq>:
 8020b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b3c:	f7ff fff4 	bl	8020b28 <__aeabi_cdcmpeq>
 8020b40:	bf0c      	ite	eq
 8020b42:	2001      	moveq	r0, #1
 8020b44:	2000      	movne	r0, #0
 8020b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b4a:	bf00      	nop

08020b4c <__aeabi_dcmplt>:
 8020b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b50:	f7ff ffea 	bl	8020b28 <__aeabi_cdcmpeq>
 8020b54:	bf34      	ite	cc
 8020b56:	2001      	movcc	r0, #1
 8020b58:	2000      	movcs	r0, #0
 8020b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b5e:	bf00      	nop

08020b60 <__aeabi_dcmple>:
 8020b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b64:	f7ff ffe0 	bl	8020b28 <__aeabi_cdcmpeq>
 8020b68:	bf94      	ite	ls
 8020b6a:	2001      	movls	r0, #1
 8020b6c:	2000      	movhi	r0, #0
 8020b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b72:	bf00      	nop

08020b74 <__aeabi_dcmpge>:
 8020b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b78:	f7ff ffce 	bl	8020b18 <__aeabi_cdrcmple>
 8020b7c:	bf94      	ite	ls
 8020b7e:	2001      	movls	r0, #1
 8020b80:	2000      	movhi	r0, #0
 8020b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b86:	bf00      	nop

08020b88 <__aeabi_dcmpgt>:
 8020b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b8c:	f7ff ffc4 	bl	8020b18 <__aeabi_cdrcmple>
 8020b90:	bf34      	ite	cc
 8020b92:	2001      	movcc	r0, #1
 8020b94:	2000      	movcs	r0, #0
 8020b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b9a:	bf00      	nop

08020b9c <__aeabi_dcmpun>:
 8020b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020ba4:	d102      	bne.n	8020bac <__aeabi_dcmpun+0x10>
 8020ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8020baa:	d10a      	bne.n	8020bc2 <__aeabi_dcmpun+0x26>
 8020bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020bb4:	d102      	bne.n	8020bbc <__aeabi_dcmpun+0x20>
 8020bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8020bba:	d102      	bne.n	8020bc2 <__aeabi_dcmpun+0x26>
 8020bbc:	f04f 0000 	mov.w	r0, #0
 8020bc0:	4770      	bx	lr
 8020bc2:	f04f 0001 	mov.w	r0, #1
 8020bc6:	4770      	bx	lr

08020bc8 <__aeabi_d2iz>:
 8020bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8020bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8020bd0:	d215      	bcs.n	8020bfe <__aeabi_d2iz+0x36>
 8020bd2:	d511      	bpl.n	8020bf8 <__aeabi_d2iz+0x30>
 8020bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8020bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8020bdc:	d912      	bls.n	8020c04 <__aeabi_d2iz+0x3c>
 8020bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8020be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8020bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8020bee:	fa23 f002 	lsr.w	r0, r3, r2
 8020bf2:	bf18      	it	ne
 8020bf4:	4240      	negne	r0, r0
 8020bf6:	4770      	bx	lr
 8020bf8:	f04f 0000 	mov.w	r0, #0
 8020bfc:	4770      	bx	lr
 8020bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8020c02:	d105      	bne.n	8020c10 <__aeabi_d2iz+0x48>
 8020c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8020c08:	bf08      	it	eq
 8020c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8020c0e:	4770      	bx	lr
 8020c10:	f04f 0000 	mov.w	r0, #0
 8020c14:	4770      	bx	lr
 8020c16:	bf00      	nop

08020c18 <__aeabi_d2uiz>:
 8020c18:	004a      	lsls	r2, r1, #1
 8020c1a:	d211      	bcs.n	8020c40 <__aeabi_d2uiz+0x28>
 8020c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8020c20:	d211      	bcs.n	8020c46 <__aeabi_d2uiz+0x2e>
 8020c22:	d50d      	bpl.n	8020c40 <__aeabi_d2uiz+0x28>
 8020c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8020c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8020c2c:	d40e      	bmi.n	8020c4c <__aeabi_d2uiz+0x34>
 8020c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8020c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8020c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8020c3e:	4770      	bx	lr
 8020c40:	f04f 0000 	mov.w	r0, #0
 8020c44:	4770      	bx	lr
 8020c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8020c4a:	d102      	bne.n	8020c52 <__aeabi_d2uiz+0x3a>
 8020c4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020c50:	4770      	bx	lr
 8020c52:	f04f 0000 	mov.w	r0, #0
 8020c56:	4770      	bx	lr

08020c58 <__aeabi_d2f>:
 8020c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8020c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8020c60:	bf24      	itt	cs
 8020c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8020c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8020c6a:	d90d      	bls.n	8020c88 <__aeabi_d2f+0x30>
 8020c6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8020c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8020c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8020c78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8020c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8020c80:	bf08      	it	eq
 8020c82:	f020 0001 	biceq.w	r0, r0, #1
 8020c86:	4770      	bx	lr
 8020c88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8020c8c:	d121      	bne.n	8020cd2 <__aeabi_d2f+0x7a>
 8020c8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8020c92:	bfbc      	itt	lt
 8020c94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8020c98:	4770      	bxlt	lr
 8020c9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8020ca2:	f1c2 0218 	rsb	r2, r2, #24
 8020ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8020caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8020cae:	fa20 f002 	lsr.w	r0, r0, r2
 8020cb2:	bf18      	it	ne
 8020cb4:	f040 0001 	orrne.w	r0, r0, #1
 8020cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8020cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8020cc4:	ea40 000c 	orr.w	r0, r0, ip
 8020cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8020ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8020cd0:	e7cc      	b.n	8020c6c <__aeabi_d2f+0x14>
 8020cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8020cd6:	d107      	bne.n	8020ce8 <__aeabi_d2f+0x90>
 8020cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8020cdc:	bf1e      	ittt	ne
 8020cde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8020ce2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8020ce6:	4770      	bxne	lr
 8020ce8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8020cec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8020cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8020cf4:	4770      	bx	lr
 8020cf6:	bf00      	nop

08020cf8 <__aeabi_uldivmod>:
 8020cf8:	b953      	cbnz	r3, 8020d10 <__aeabi_uldivmod+0x18>
 8020cfa:	b94a      	cbnz	r2, 8020d10 <__aeabi_uldivmod+0x18>
 8020cfc:	2900      	cmp	r1, #0
 8020cfe:	bf08      	it	eq
 8020d00:	2800      	cmpeq	r0, #0
 8020d02:	bf1c      	itt	ne
 8020d04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8020d08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8020d0c:	f000 b994 	b.w	8021038 <__aeabi_idiv0>
 8020d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8020d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8020d18:	f000 f828 	bl	8020d6c <__udivmoddi4>
 8020d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8020d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020d24:	b004      	add	sp, #16
 8020d26:	4770      	bx	lr

08020d28 <__aeabi_d2ulz>:
 8020d28:	b5d0      	push	{r4, r6, r7, lr}
 8020d2a:	2200      	movs	r2, #0
 8020d2c:	4b0d      	ldr	r3, [pc, #52]	; (8020d64 <__aeabi_d2ulz+0x3c>)
 8020d2e:	4606      	mov	r6, r0
 8020d30:	460f      	mov	r7, r1
 8020d32:	f7ff fc99 	bl	8020668 <__aeabi_dmul>
 8020d36:	f7ff ff6f 	bl	8020c18 <__aeabi_d2uiz>
 8020d3a:	4604      	mov	r4, r0
 8020d3c:	f7ff fc1a 	bl	8020574 <__aeabi_ui2d>
 8020d40:	2200      	movs	r2, #0
 8020d42:	4b09      	ldr	r3, [pc, #36]	; (8020d68 <__aeabi_d2ulz+0x40>)
 8020d44:	f7ff fc90 	bl	8020668 <__aeabi_dmul>
 8020d48:	4602      	mov	r2, r0
 8020d4a:	460b      	mov	r3, r1
 8020d4c:	4630      	mov	r0, r6
 8020d4e:	4639      	mov	r1, r7
 8020d50:	f7ff fad2 	bl	80202f8 <__aeabi_dsub>
 8020d54:	f7ff ff60 	bl	8020c18 <__aeabi_d2uiz>
 8020d58:	2200      	movs	r2, #0
 8020d5a:	4623      	mov	r3, r4
 8020d5c:	4310      	orrs	r0, r2
 8020d5e:	4619      	mov	r1, r3
 8020d60:	bdd0      	pop	{r4, r6, r7, pc}
 8020d62:	bf00      	nop
 8020d64:	3df00000 	.word	0x3df00000
 8020d68:	41f00000 	.word	0x41f00000

08020d6c <__udivmoddi4>:
 8020d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020d70:	9e08      	ldr	r6, [sp, #32]
 8020d72:	4604      	mov	r4, r0
 8020d74:	4688      	mov	r8, r1
 8020d76:	2b00      	cmp	r3, #0
 8020d78:	d14b      	bne.n	8020e12 <__udivmoddi4+0xa6>
 8020d7a:	428a      	cmp	r2, r1
 8020d7c:	4615      	mov	r5, r2
 8020d7e:	d967      	bls.n	8020e50 <__udivmoddi4+0xe4>
 8020d80:	fab2 f282 	clz	r2, r2
 8020d84:	b14a      	cbz	r2, 8020d9a <__udivmoddi4+0x2e>
 8020d86:	f1c2 0720 	rsb	r7, r2, #32
 8020d8a:	fa01 f302 	lsl.w	r3, r1, r2
 8020d8e:	fa20 f707 	lsr.w	r7, r0, r7
 8020d92:	4095      	lsls	r5, r2
 8020d94:	ea47 0803 	orr.w	r8, r7, r3
 8020d98:	4094      	lsls	r4, r2
 8020d9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020d9e:	0c23      	lsrs	r3, r4, #16
 8020da0:	fbb8 f7fe 	udiv	r7, r8, lr
 8020da4:	fa1f fc85 	uxth.w	ip, r5
 8020da8:	fb0e 8817 	mls	r8, lr, r7, r8
 8020dac:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8020db0:	fb07 f10c 	mul.w	r1, r7, ip
 8020db4:	4299      	cmp	r1, r3
 8020db6:	d909      	bls.n	8020dcc <__udivmoddi4+0x60>
 8020db8:	18eb      	adds	r3, r5, r3
 8020dba:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8020dbe:	f080 811b 	bcs.w	8020ff8 <__udivmoddi4+0x28c>
 8020dc2:	4299      	cmp	r1, r3
 8020dc4:	f240 8118 	bls.w	8020ff8 <__udivmoddi4+0x28c>
 8020dc8:	3f02      	subs	r7, #2
 8020dca:	442b      	add	r3, r5
 8020dcc:	1a5b      	subs	r3, r3, r1
 8020dce:	b2a4      	uxth	r4, r4
 8020dd0:	fbb3 f0fe 	udiv	r0, r3, lr
 8020dd4:	fb0e 3310 	mls	r3, lr, r0, r3
 8020dd8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020ddc:	fb00 fc0c 	mul.w	ip, r0, ip
 8020de0:	45a4      	cmp	ip, r4
 8020de2:	d909      	bls.n	8020df8 <__udivmoddi4+0x8c>
 8020de4:	192c      	adds	r4, r5, r4
 8020de6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8020dea:	f080 8107 	bcs.w	8020ffc <__udivmoddi4+0x290>
 8020dee:	45a4      	cmp	ip, r4
 8020df0:	f240 8104 	bls.w	8020ffc <__udivmoddi4+0x290>
 8020df4:	3802      	subs	r0, #2
 8020df6:	442c      	add	r4, r5
 8020df8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8020dfc:	eba4 040c 	sub.w	r4, r4, ip
 8020e00:	2700      	movs	r7, #0
 8020e02:	b11e      	cbz	r6, 8020e0c <__udivmoddi4+0xa0>
 8020e04:	40d4      	lsrs	r4, r2
 8020e06:	2300      	movs	r3, #0
 8020e08:	e9c6 4300 	strd	r4, r3, [r6]
 8020e0c:	4639      	mov	r1, r7
 8020e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020e12:	428b      	cmp	r3, r1
 8020e14:	d909      	bls.n	8020e2a <__udivmoddi4+0xbe>
 8020e16:	2e00      	cmp	r6, #0
 8020e18:	f000 80eb 	beq.w	8020ff2 <__udivmoddi4+0x286>
 8020e1c:	2700      	movs	r7, #0
 8020e1e:	e9c6 0100 	strd	r0, r1, [r6]
 8020e22:	4638      	mov	r0, r7
 8020e24:	4639      	mov	r1, r7
 8020e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020e2a:	fab3 f783 	clz	r7, r3
 8020e2e:	2f00      	cmp	r7, #0
 8020e30:	d147      	bne.n	8020ec2 <__udivmoddi4+0x156>
 8020e32:	428b      	cmp	r3, r1
 8020e34:	d302      	bcc.n	8020e3c <__udivmoddi4+0xd0>
 8020e36:	4282      	cmp	r2, r0
 8020e38:	f200 80fa 	bhi.w	8021030 <__udivmoddi4+0x2c4>
 8020e3c:	1a84      	subs	r4, r0, r2
 8020e3e:	eb61 0303 	sbc.w	r3, r1, r3
 8020e42:	2001      	movs	r0, #1
 8020e44:	4698      	mov	r8, r3
 8020e46:	2e00      	cmp	r6, #0
 8020e48:	d0e0      	beq.n	8020e0c <__udivmoddi4+0xa0>
 8020e4a:	e9c6 4800 	strd	r4, r8, [r6]
 8020e4e:	e7dd      	b.n	8020e0c <__udivmoddi4+0xa0>
 8020e50:	b902      	cbnz	r2, 8020e54 <__udivmoddi4+0xe8>
 8020e52:	deff      	udf	#255	; 0xff
 8020e54:	fab2 f282 	clz	r2, r2
 8020e58:	2a00      	cmp	r2, #0
 8020e5a:	f040 808f 	bne.w	8020f7c <__udivmoddi4+0x210>
 8020e5e:	1b49      	subs	r1, r1, r5
 8020e60:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020e64:	fa1f f885 	uxth.w	r8, r5
 8020e68:	2701      	movs	r7, #1
 8020e6a:	fbb1 fcfe 	udiv	ip, r1, lr
 8020e6e:	0c23      	lsrs	r3, r4, #16
 8020e70:	fb0e 111c 	mls	r1, lr, ip, r1
 8020e74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020e78:	fb08 f10c 	mul.w	r1, r8, ip
 8020e7c:	4299      	cmp	r1, r3
 8020e7e:	d907      	bls.n	8020e90 <__udivmoddi4+0x124>
 8020e80:	18eb      	adds	r3, r5, r3
 8020e82:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8020e86:	d202      	bcs.n	8020e8e <__udivmoddi4+0x122>
 8020e88:	4299      	cmp	r1, r3
 8020e8a:	f200 80cd 	bhi.w	8021028 <__udivmoddi4+0x2bc>
 8020e8e:	4684      	mov	ip, r0
 8020e90:	1a59      	subs	r1, r3, r1
 8020e92:	b2a3      	uxth	r3, r4
 8020e94:	fbb1 f0fe 	udiv	r0, r1, lr
 8020e98:	fb0e 1410 	mls	r4, lr, r0, r1
 8020e9c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8020ea0:	fb08 f800 	mul.w	r8, r8, r0
 8020ea4:	45a0      	cmp	r8, r4
 8020ea6:	d907      	bls.n	8020eb8 <__udivmoddi4+0x14c>
 8020ea8:	192c      	adds	r4, r5, r4
 8020eaa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8020eae:	d202      	bcs.n	8020eb6 <__udivmoddi4+0x14a>
 8020eb0:	45a0      	cmp	r8, r4
 8020eb2:	f200 80b6 	bhi.w	8021022 <__udivmoddi4+0x2b6>
 8020eb6:	4618      	mov	r0, r3
 8020eb8:	eba4 0408 	sub.w	r4, r4, r8
 8020ebc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8020ec0:	e79f      	b.n	8020e02 <__udivmoddi4+0x96>
 8020ec2:	f1c7 0c20 	rsb	ip, r7, #32
 8020ec6:	40bb      	lsls	r3, r7
 8020ec8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8020ecc:	ea4e 0e03 	orr.w	lr, lr, r3
 8020ed0:	fa01 f407 	lsl.w	r4, r1, r7
 8020ed4:	fa20 f50c 	lsr.w	r5, r0, ip
 8020ed8:	fa21 f30c 	lsr.w	r3, r1, ip
 8020edc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8020ee0:	4325      	orrs	r5, r4
 8020ee2:	fbb3 f9f8 	udiv	r9, r3, r8
 8020ee6:	0c2c      	lsrs	r4, r5, #16
 8020ee8:	fb08 3319 	mls	r3, r8, r9, r3
 8020eec:	fa1f fa8e 	uxth.w	sl, lr
 8020ef0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8020ef4:	fb09 f40a 	mul.w	r4, r9, sl
 8020ef8:	429c      	cmp	r4, r3
 8020efa:	fa02 f207 	lsl.w	r2, r2, r7
 8020efe:	fa00 f107 	lsl.w	r1, r0, r7
 8020f02:	d90b      	bls.n	8020f1c <__udivmoddi4+0x1b0>
 8020f04:	eb1e 0303 	adds.w	r3, lr, r3
 8020f08:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8020f0c:	f080 8087 	bcs.w	802101e <__udivmoddi4+0x2b2>
 8020f10:	429c      	cmp	r4, r3
 8020f12:	f240 8084 	bls.w	802101e <__udivmoddi4+0x2b2>
 8020f16:	f1a9 0902 	sub.w	r9, r9, #2
 8020f1a:	4473      	add	r3, lr
 8020f1c:	1b1b      	subs	r3, r3, r4
 8020f1e:	b2ad      	uxth	r5, r5
 8020f20:	fbb3 f0f8 	udiv	r0, r3, r8
 8020f24:	fb08 3310 	mls	r3, r8, r0, r3
 8020f28:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8020f2c:	fb00 fa0a 	mul.w	sl, r0, sl
 8020f30:	45a2      	cmp	sl, r4
 8020f32:	d908      	bls.n	8020f46 <__udivmoddi4+0x1da>
 8020f34:	eb1e 0404 	adds.w	r4, lr, r4
 8020f38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8020f3c:	d26b      	bcs.n	8021016 <__udivmoddi4+0x2aa>
 8020f3e:	45a2      	cmp	sl, r4
 8020f40:	d969      	bls.n	8021016 <__udivmoddi4+0x2aa>
 8020f42:	3802      	subs	r0, #2
 8020f44:	4474      	add	r4, lr
 8020f46:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8020f4a:	fba0 8902 	umull	r8, r9, r0, r2
 8020f4e:	eba4 040a 	sub.w	r4, r4, sl
 8020f52:	454c      	cmp	r4, r9
 8020f54:	46c2      	mov	sl, r8
 8020f56:	464b      	mov	r3, r9
 8020f58:	d354      	bcc.n	8021004 <__udivmoddi4+0x298>
 8020f5a:	d051      	beq.n	8021000 <__udivmoddi4+0x294>
 8020f5c:	2e00      	cmp	r6, #0
 8020f5e:	d069      	beq.n	8021034 <__udivmoddi4+0x2c8>
 8020f60:	ebb1 050a 	subs.w	r5, r1, sl
 8020f64:	eb64 0403 	sbc.w	r4, r4, r3
 8020f68:	fa04 fc0c 	lsl.w	ip, r4, ip
 8020f6c:	40fd      	lsrs	r5, r7
 8020f6e:	40fc      	lsrs	r4, r7
 8020f70:	ea4c 0505 	orr.w	r5, ip, r5
 8020f74:	e9c6 5400 	strd	r5, r4, [r6]
 8020f78:	2700      	movs	r7, #0
 8020f7a:	e747      	b.n	8020e0c <__udivmoddi4+0xa0>
 8020f7c:	f1c2 0320 	rsb	r3, r2, #32
 8020f80:	fa20 f703 	lsr.w	r7, r0, r3
 8020f84:	4095      	lsls	r5, r2
 8020f86:	fa01 f002 	lsl.w	r0, r1, r2
 8020f8a:	fa21 f303 	lsr.w	r3, r1, r3
 8020f8e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020f92:	4338      	orrs	r0, r7
 8020f94:	0c01      	lsrs	r1, r0, #16
 8020f96:	fbb3 f7fe 	udiv	r7, r3, lr
 8020f9a:	fa1f f885 	uxth.w	r8, r5
 8020f9e:	fb0e 3317 	mls	r3, lr, r7, r3
 8020fa2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020fa6:	fb07 f308 	mul.w	r3, r7, r8
 8020faa:	428b      	cmp	r3, r1
 8020fac:	fa04 f402 	lsl.w	r4, r4, r2
 8020fb0:	d907      	bls.n	8020fc2 <__udivmoddi4+0x256>
 8020fb2:	1869      	adds	r1, r5, r1
 8020fb4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8020fb8:	d22f      	bcs.n	802101a <__udivmoddi4+0x2ae>
 8020fba:	428b      	cmp	r3, r1
 8020fbc:	d92d      	bls.n	802101a <__udivmoddi4+0x2ae>
 8020fbe:	3f02      	subs	r7, #2
 8020fc0:	4429      	add	r1, r5
 8020fc2:	1acb      	subs	r3, r1, r3
 8020fc4:	b281      	uxth	r1, r0
 8020fc6:	fbb3 f0fe 	udiv	r0, r3, lr
 8020fca:	fb0e 3310 	mls	r3, lr, r0, r3
 8020fce:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020fd2:	fb00 f308 	mul.w	r3, r0, r8
 8020fd6:	428b      	cmp	r3, r1
 8020fd8:	d907      	bls.n	8020fea <__udivmoddi4+0x27e>
 8020fda:	1869      	adds	r1, r5, r1
 8020fdc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8020fe0:	d217      	bcs.n	8021012 <__udivmoddi4+0x2a6>
 8020fe2:	428b      	cmp	r3, r1
 8020fe4:	d915      	bls.n	8021012 <__udivmoddi4+0x2a6>
 8020fe6:	3802      	subs	r0, #2
 8020fe8:	4429      	add	r1, r5
 8020fea:	1ac9      	subs	r1, r1, r3
 8020fec:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8020ff0:	e73b      	b.n	8020e6a <__udivmoddi4+0xfe>
 8020ff2:	4637      	mov	r7, r6
 8020ff4:	4630      	mov	r0, r6
 8020ff6:	e709      	b.n	8020e0c <__udivmoddi4+0xa0>
 8020ff8:	4607      	mov	r7, r0
 8020ffa:	e6e7      	b.n	8020dcc <__udivmoddi4+0x60>
 8020ffc:	4618      	mov	r0, r3
 8020ffe:	e6fb      	b.n	8020df8 <__udivmoddi4+0x8c>
 8021000:	4541      	cmp	r1, r8
 8021002:	d2ab      	bcs.n	8020f5c <__udivmoddi4+0x1f0>
 8021004:	ebb8 0a02 	subs.w	sl, r8, r2
 8021008:	eb69 020e 	sbc.w	r2, r9, lr
 802100c:	3801      	subs	r0, #1
 802100e:	4613      	mov	r3, r2
 8021010:	e7a4      	b.n	8020f5c <__udivmoddi4+0x1f0>
 8021012:	4660      	mov	r0, ip
 8021014:	e7e9      	b.n	8020fea <__udivmoddi4+0x27e>
 8021016:	4618      	mov	r0, r3
 8021018:	e795      	b.n	8020f46 <__udivmoddi4+0x1da>
 802101a:	4667      	mov	r7, ip
 802101c:	e7d1      	b.n	8020fc2 <__udivmoddi4+0x256>
 802101e:	4681      	mov	r9, r0
 8021020:	e77c      	b.n	8020f1c <__udivmoddi4+0x1b0>
 8021022:	3802      	subs	r0, #2
 8021024:	442c      	add	r4, r5
 8021026:	e747      	b.n	8020eb8 <__udivmoddi4+0x14c>
 8021028:	f1ac 0c02 	sub.w	ip, ip, #2
 802102c:	442b      	add	r3, r5
 802102e:	e72f      	b.n	8020e90 <__udivmoddi4+0x124>
 8021030:	4638      	mov	r0, r7
 8021032:	e708      	b.n	8020e46 <__udivmoddi4+0xda>
 8021034:	4637      	mov	r7, r6
 8021036:	e6e9      	b.n	8020e0c <__udivmoddi4+0xa0>

08021038 <__aeabi_idiv0>:
 8021038:	4770      	bx	lr
 802103a:	bf00      	nop

0802103c <BAT_DMA_Init>:

/* Public functions declaration ------------------------------------------------*/
static uint16_t MovingAverage(uint16_t *pBuffer, uint16_t len, uint16_t value);

/* Public functions implementation ---------------------------------------------*/
void BAT_DMA_Init(void) {
 802103c:	b580      	push	{r7, lr}
 802103e:	af00      	add	r7, sp, #0
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*) DMA_BUFFER, DMA_SZ);
 8021040:	2232      	movs	r2, #50	; 0x32
 8021042:	4903      	ldr	r1, [pc, #12]	; (8021050 <BAT_DMA_Init+0x14>)
 8021044:	4803      	ldr	r0, [pc, #12]	; (8021054 <BAT_DMA_Init+0x18>)
 8021046:	f00b fa03 	bl	802c450 <HAL_ADC_Start_DMA>
}
 802104a:	bf00      	nop
 802104c:	bd80      	pop	{r7, pc}
 802104e:	bf00      	nop
 8021050:	200004b8 	.word	0x200004b8
 8021054:	20008700 	.word	0x20008700

08021058 <HAL_ADC_ConvHalfCpltCallback>:
    LOG_Str("Battery:Voltage = ");
    LOG_Int(BACKUP_VOLTAGE);
    LOG_StrLn(" mV");
}

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8021058:	b580      	push	{r7, lr}
 802105a:	b084      	sub	sp, #16
 802105c:	af00      	add	r7, sp, #0
 802105e:	6078      	str	r0, [r7, #4]
    uint16_t i;
    uint32_t temp = 0;
 8021060:	2300      	movs	r3, #0
 8021062:	60bb      	str	r3, [r7, #8]

    // sum all buffer sample
    for (i = 0; i < (DMA_SZ / 2); i++) {
 8021064:	2300      	movs	r3, #0
 8021066:	81fb      	strh	r3, [r7, #14]
 8021068:	e00a      	b.n	8021080 <HAL_ADC_ConvHalfCpltCallback+0x28>
        temp += DMA_BUFFER[i];
 802106a:	89fb      	ldrh	r3, [r7, #14]
 802106c:	4a0f      	ldr	r2, [pc, #60]	; (80210ac <HAL_ADC_ConvHalfCpltCallback+0x54>)
 802106e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8021072:	461a      	mov	r2, r3
 8021074:	68bb      	ldr	r3, [r7, #8]
 8021076:	4413      	add	r3, r2
 8021078:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < (DMA_SZ / 2); i++) {
 802107a:	89fb      	ldrh	r3, [r7, #14]
 802107c:	3301      	adds	r3, #1
 802107e:	81fb      	strh	r3, [r7, #14]
 8021080:	89fb      	ldrh	r3, [r7, #14]
 8021082:	2b18      	cmp	r3, #24
 8021084:	d9f1      	bls.n	802106a <HAL_ADC_ConvHalfCpltCallback+0x12>
    }
    // calculate the average
    temp = temp / (DMA_SZ / 2);
 8021086:	68bb      	ldr	r3, [r7, #8]
 8021088:	4a09      	ldr	r2, [pc, #36]	; (80210b0 <HAL_ADC_ConvHalfCpltCallback+0x58>)
 802108a:	fba2 2303 	umull	r2, r3, r2, r3
 802108e:	08db      	lsrs	r3, r3, #3
 8021090:	60bb      	str	r3, [r7, #8]

    // calculate the moving average
    MovingAverage(AVERAGE_BUFFER, AVERAGE_SZ, temp);
 8021092:	68bb      	ldr	r3, [r7, #8]
 8021094:	b29b      	uxth	r3, r3
 8021096:	461a      	mov	r2, r3
 8021098:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 802109c:	4805      	ldr	r0, [pc, #20]	; (80210b4 <HAL_ADC_ConvHalfCpltCallback+0x5c>)
 802109e:	f000 f857 	bl	8021150 <MovingAverage>
}
 80210a2:	bf00      	nop
 80210a4:	3710      	adds	r7, #16
 80210a6:	46bd      	mov	sp, r7
 80210a8:	bd80      	pop	{r7, pc}
 80210aa:	bf00      	nop
 80210ac:	200004b8 	.word	0x200004b8
 80210b0:	51eb851f 	.word	0x51eb851f
 80210b4:	2000051c 	.word	0x2000051c

080210b8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80210b8:	b580      	push	{r7, lr}
 80210ba:	b084      	sub	sp, #16
 80210bc:	af00      	add	r7, sp, #0
 80210be:	6078      	str	r0, [r7, #4]
    uint16_t i;
    uint32_t temp = 0;
 80210c0:	2300      	movs	r3, #0
 80210c2:	60bb      	str	r3, [r7, #8]

    // sum all buffer sample
    for (i = ((DMA_SZ / 2) - 1); i < DMA_SZ; i++) {
 80210c4:	2318      	movs	r3, #24
 80210c6:	81fb      	strh	r3, [r7, #14]
 80210c8:	e00a      	b.n	80210e0 <HAL_ADC_ConvCpltCallback+0x28>
        temp += DMA_BUFFER[i];
 80210ca:	89fb      	ldrh	r3, [r7, #14]
 80210cc:	4a1a      	ldr	r2, [pc, #104]	; (8021138 <HAL_ADC_ConvCpltCallback+0x80>)
 80210ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80210d2:	461a      	mov	r2, r3
 80210d4:	68bb      	ldr	r3, [r7, #8]
 80210d6:	4413      	add	r3, r2
 80210d8:	60bb      	str	r3, [r7, #8]
    for (i = ((DMA_SZ / 2) - 1); i < DMA_SZ; i++) {
 80210da:	89fb      	ldrh	r3, [r7, #14]
 80210dc:	3301      	adds	r3, #1
 80210de:	81fb      	strh	r3, [r7, #14]
 80210e0:	89fb      	ldrh	r3, [r7, #14]
 80210e2:	2b31      	cmp	r3, #49	; 0x31
 80210e4:	d9f1      	bls.n	80210ca <HAL_ADC_ConvCpltCallback+0x12>
    }
    // calculate the average
    temp = temp / (DMA_SZ / 2);
 80210e6:	68bb      	ldr	r3, [r7, #8]
 80210e8:	4a14      	ldr	r2, [pc, #80]	; (802113c <HAL_ADC_ConvCpltCallback+0x84>)
 80210ea:	fba2 2303 	umull	r2, r3, r2, r3
 80210ee:	08db      	lsrs	r3, r3, #3
 80210f0:	60bb      	str	r3, [r7, #8]

    // calculate the moving average
    temp = MovingAverage(AVERAGE_BUFFER, AVERAGE_SZ, temp);
 80210f2:	68bb      	ldr	r3, [r7, #8]
 80210f4:	b29b      	uxth	r3, r3
 80210f6:	461a      	mov	r2, r3
 80210f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80210fc:	4810      	ldr	r0, [pc, #64]	; (8021140 <HAL_ADC_ConvCpltCallback+0x88>)
 80210fe:	f000 f827 	bl	8021150 <MovingAverage>
 8021102:	4603      	mov	r3, r0
 8021104:	60bb      	str	r3, [r7, #8]
    // change to battery value
    BACKUP_VOLTAGE = (temp * BAT_MAX_VOLTAGE) / ADC_MAX_VALUE;
 8021106:	68bb      	ldr	r3, [r7, #8]
 8021108:	ee07 3a90 	vmov	s15, r3
 802110c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021110:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8021144 <HAL_ADC_ConvCpltCallback+0x8c>
 8021114:	ee27 7a87 	vmul.f32	s14, s15, s14
 8021118:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8021148 <HAL_ADC_ConvCpltCallback+0x90>
 802111c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8021120:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021124:	ee17 3a90 	vmov	r3, s15
 8021128:	b29a      	uxth	r2, r3
 802112a:	4b08      	ldr	r3, [pc, #32]	; (802114c <HAL_ADC_ConvCpltCallback+0x94>)
 802112c:	801a      	strh	r2, [r3, #0]
}
 802112e:	bf00      	nop
 8021130:	3710      	adds	r7, #16
 8021132:	46bd      	mov	sp, r7
 8021134:	bd80      	pop	{r7, pc}
 8021136:	bf00      	nop
 8021138:	200004b8 	.word	0x200004b8
 802113c:	51eb851f 	.word	0x51eb851f
 8021140:	2000051c 	.word	0x2000051c
 8021144:	45834000 	.word	0x45834000
 8021148:	457ff000 	.word	0x457ff000
 802114c:	200004b4 	.word	0x200004b4

08021150 <MovingAverage>:

/* Private functions implementation ---------------------------------------------*/
static uint16_t MovingAverage(uint16_t *pBuffer, uint16_t len, uint16_t value) {
 8021150:	b480      	push	{r7}
 8021152:	b083      	sub	sp, #12
 8021154:	af00      	add	r7, sp, #0
 8021156:	6078      	str	r0, [r7, #4]
 8021158:	460b      	mov	r3, r1
 802115a:	807b      	strh	r3, [r7, #2]
 802115c:	4613      	mov	r3, r2
 802115e:	803b      	strh	r3, [r7, #0]
    static uint32_t sum = 0, pos = 0;
    static uint16_t length = 0;

    //Subtract the oldest number from the prev sum, add the new number
    sum = sum - pBuffer[pos] + value;
 8021160:	4b1c      	ldr	r3, [pc, #112]	; (80211d4 <MovingAverage+0x84>)
 8021162:	681b      	ldr	r3, [r3, #0]
 8021164:	4a1c      	ldr	r2, [pc, #112]	; (80211d8 <MovingAverage+0x88>)
 8021166:	6812      	ldr	r2, [r2, #0]
 8021168:	0052      	lsls	r2, r2, #1
 802116a:	6879      	ldr	r1, [r7, #4]
 802116c:	440a      	add	r2, r1
 802116e:	8812      	ldrh	r2, [r2, #0]
 8021170:	1a9a      	subs	r2, r3, r2
 8021172:	883b      	ldrh	r3, [r7, #0]
 8021174:	4413      	add	r3, r2
 8021176:	4a17      	ldr	r2, [pc, #92]	; (80211d4 <MovingAverage+0x84>)
 8021178:	6013      	str	r3, [r2, #0]
    //Assign the nextNum to the position in the array
    pBuffer[pos] = value;
 802117a:	4b17      	ldr	r3, [pc, #92]	; (80211d8 <MovingAverage+0x88>)
 802117c:	681b      	ldr	r3, [r3, #0]
 802117e:	005b      	lsls	r3, r3, #1
 8021180:	687a      	ldr	r2, [r7, #4]
 8021182:	4413      	add	r3, r2
 8021184:	883a      	ldrh	r2, [r7, #0]
 8021186:	801a      	strh	r2, [r3, #0]
    //Increment position
    pos++;
 8021188:	4b13      	ldr	r3, [pc, #76]	; (80211d8 <MovingAverage+0x88>)
 802118a:	681b      	ldr	r3, [r3, #0]
 802118c:	3301      	adds	r3, #1
 802118e:	4a12      	ldr	r2, [pc, #72]	; (80211d8 <MovingAverage+0x88>)
 8021190:	6013      	str	r3, [r2, #0]
    if (pos >= len) {
 8021192:	887a      	ldrh	r2, [r7, #2]
 8021194:	4b10      	ldr	r3, [pc, #64]	; (80211d8 <MovingAverage+0x88>)
 8021196:	681b      	ldr	r3, [r3, #0]
 8021198:	429a      	cmp	r2, r3
 802119a:	d802      	bhi.n	80211a2 <MovingAverage+0x52>
        pos = 0;
 802119c:	4b0e      	ldr	r3, [pc, #56]	; (80211d8 <MovingAverage+0x88>)
 802119e:	2200      	movs	r2, #0
 80211a0:	601a      	str	r2, [r3, #0]
    }
    // calculate filled array
    if (length < len) {
 80211a2:	4b0e      	ldr	r3, [pc, #56]	; (80211dc <MovingAverage+0x8c>)
 80211a4:	881b      	ldrh	r3, [r3, #0]
 80211a6:	887a      	ldrh	r2, [r7, #2]
 80211a8:	429a      	cmp	r2, r3
 80211aa:	d905      	bls.n	80211b8 <MovingAverage+0x68>
        length++;
 80211ac:	4b0b      	ldr	r3, [pc, #44]	; (80211dc <MovingAverage+0x8c>)
 80211ae:	881b      	ldrh	r3, [r3, #0]
 80211b0:	3301      	adds	r3, #1
 80211b2:	b29a      	uxth	r2, r3
 80211b4:	4b09      	ldr	r3, [pc, #36]	; (80211dc <MovingAverage+0x8c>)
 80211b6:	801a      	strh	r2, [r3, #0]
    }
    //return the average
    return sum / length;
 80211b8:	4b06      	ldr	r3, [pc, #24]	; (80211d4 <MovingAverage+0x84>)
 80211ba:	681b      	ldr	r3, [r3, #0]
 80211bc:	4a07      	ldr	r2, [pc, #28]	; (80211dc <MovingAverage+0x8c>)
 80211be:	8812      	ldrh	r2, [r2, #0]
 80211c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80211c4:	b29b      	uxth	r3, r3
}
 80211c6:	4618      	mov	r0, r3
 80211c8:	370c      	adds	r7, #12
 80211ca:	46bd      	mov	sp, r7
 80211cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211d0:	4770      	bx	lr
 80211d2:	bf00      	nop
 80211d4:	20000cec 	.word	0x20000cec
 80211d8:	20000cf0 	.word	0x20000cf0
 80211dc:	20000cf4 	.word	0x20000cf4

080211e0 <FINGER_USART_IrqHandler>:
/* Private functions implementation -------------------------------------------*/
static void FINGER_Check_Buffer(void);
static void FINGER_Fill_Buffer(const void *data, size_t len);

/* Public functions implementation ---------------------------------------------*/
void FINGER_USART_IrqHandler(void) {
 80211e0:	b580      	push	{r7, lr}
 80211e2:	b082      	sub	sp, #8
 80211e4:	af00      	add	r7, sp, #0
    /* if Idle flag is set */
    if (__HAL_UART_GET_FLAG(&huart4, UART_FLAG_IDLE)) {
 80211e6:	4b0c      	ldr	r3, [pc, #48]	; (8021218 <FINGER_USART_IrqHandler+0x38>)
 80211e8:	681b      	ldr	r3, [r3, #0]
 80211ea:	681b      	ldr	r3, [r3, #0]
 80211ec:	f003 0310 	and.w	r3, r3, #16
 80211f0:	2b10      	cmp	r3, #16
 80211f2:	d10c      	bne.n	802120e <FINGER_USART_IrqHandler+0x2e>
        /* Clear idle flag */
        __HAL_UART_CLEAR_IDLEFLAG(&huart4);
 80211f4:	2300      	movs	r3, #0
 80211f6:	607b      	str	r3, [r7, #4]
 80211f8:	4b07      	ldr	r3, [pc, #28]	; (8021218 <FINGER_USART_IrqHandler+0x38>)
 80211fa:	681b      	ldr	r3, [r3, #0]
 80211fc:	681b      	ldr	r3, [r3, #0]
 80211fe:	607b      	str	r3, [r7, #4]
 8021200:	4b05      	ldr	r3, [pc, #20]	; (8021218 <FINGER_USART_IrqHandler+0x38>)
 8021202:	681b      	ldr	r3, [r3, #0]
 8021204:	685b      	ldr	r3, [r3, #4]
 8021206:	607b      	str	r3, [r7, #4]
 8021208:	687b      	ldr	r3, [r7, #4]

        FINGER_Check_Buffer();
 802120a:	f001 f923 	bl	8022454 <FINGER_Check_Buffer>
    }
}
 802120e:	bf00      	nop
 8021210:	3708      	adds	r7, #8
 8021212:	46bd      	mov	sp, r7
 8021214:	bd80      	pop	{r7, pc}
 8021216:	bf00      	nop
 8021218:	20008898 	.word	0x20008898

0802121c <FINGER_DMA_IrqHandler>:

void FINGER_DMA_IrqHandler(void) {
 802121c:	b580      	push	{r7, lr}
 802121e:	af00      	add	r7, sp, #0
    // if the source is HT
    if (__HAL_DMA_GET_IT_SOURCE(&hdma_uart4_rx, DMA_IT_HT)) {
 8021220:	4b9a      	ldr	r3, [pc, #616]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 8021222:	681b      	ldr	r3, [r3, #0]
 8021224:	681b      	ldr	r3, [r3, #0]
 8021226:	f003 0308 	and.w	r3, r3, #8
 802122a:	2b00      	cmp	r3, #0
 802122c:	f000 81bc 	beq.w	80215a8 <FINGER_DMA_IrqHandler+0x38c>
        /* Clear HT flag */
        __HAL_DMA_CLEAR_FLAG(&hdma_uart4_rx, __HAL_DMA_GET_HT_FLAG_INDEX(&hdma_uart4_rx));
 8021230:	4b96      	ldr	r3, [pc, #600]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 8021232:	681b      	ldr	r3, [r3, #0]
 8021234:	461a      	mov	r2, r3
 8021236:	4b96      	ldr	r3, [pc, #600]	; (8021490 <FINGER_DMA_IrqHandler+0x274>)
 8021238:	429a      	cmp	r2, r3
 802123a:	d960      	bls.n	80212fe <FINGER_DMA_IrqHandler+0xe2>
 802123c:	4b93      	ldr	r3, [pc, #588]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 802123e:	681b      	ldr	r3, [r3, #0]
 8021240:	4a94      	ldr	r2, [pc, #592]	; (8021494 <FINGER_DMA_IrqHandler+0x278>)
 8021242:	4293      	cmp	r3, r2
 8021244:	d057      	beq.n	80212f6 <FINGER_DMA_IrqHandler+0xda>
 8021246:	4b91      	ldr	r3, [pc, #580]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 8021248:	681b      	ldr	r3, [r3, #0]
 802124a:	4a93      	ldr	r2, [pc, #588]	; (8021498 <FINGER_DMA_IrqHandler+0x27c>)
 802124c:	4293      	cmp	r3, r2
 802124e:	d050      	beq.n	80212f2 <FINGER_DMA_IrqHandler+0xd6>
 8021250:	4b8e      	ldr	r3, [pc, #568]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 8021252:	681b      	ldr	r3, [r3, #0]
 8021254:	4a91      	ldr	r2, [pc, #580]	; (802149c <FINGER_DMA_IrqHandler+0x280>)
 8021256:	4293      	cmp	r3, r2
 8021258:	d049      	beq.n	80212ee <FINGER_DMA_IrqHandler+0xd2>
 802125a:	4b8c      	ldr	r3, [pc, #560]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 802125c:	681b      	ldr	r3, [r3, #0]
 802125e:	4a90      	ldr	r2, [pc, #576]	; (80214a0 <FINGER_DMA_IrqHandler+0x284>)
 8021260:	4293      	cmp	r3, r2
 8021262:	d042      	beq.n	80212ea <FINGER_DMA_IrqHandler+0xce>
 8021264:	4b89      	ldr	r3, [pc, #548]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 8021266:	681b      	ldr	r3, [r3, #0]
 8021268:	4a8e      	ldr	r2, [pc, #568]	; (80214a4 <FINGER_DMA_IrqHandler+0x288>)
 802126a:	4293      	cmp	r3, r2
 802126c:	d03a      	beq.n	80212e4 <FINGER_DMA_IrqHandler+0xc8>
 802126e:	4b87      	ldr	r3, [pc, #540]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 8021270:	681b      	ldr	r3, [r3, #0]
 8021272:	4a8d      	ldr	r2, [pc, #564]	; (80214a8 <FINGER_DMA_IrqHandler+0x28c>)
 8021274:	4293      	cmp	r3, r2
 8021276:	d032      	beq.n	80212de <FINGER_DMA_IrqHandler+0xc2>
 8021278:	4b84      	ldr	r3, [pc, #528]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 802127a:	681b      	ldr	r3, [r3, #0]
 802127c:	4a8b      	ldr	r2, [pc, #556]	; (80214ac <FINGER_DMA_IrqHandler+0x290>)
 802127e:	4293      	cmp	r3, r2
 8021280:	d02a      	beq.n	80212d8 <FINGER_DMA_IrqHandler+0xbc>
 8021282:	4b82      	ldr	r3, [pc, #520]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 8021284:	681b      	ldr	r3, [r3, #0]
 8021286:	4a8a      	ldr	r2, [pc, #552]	; (80214b0 <FINGER_DMA_IrqHandler+0x294>)
 8021288:	4293      	cmp	r3, r2
 802128a:	d022      	beq.n	80212d2 <FINGER_DMA_IrqHandler+0xb6>
 802128c:	4b7f      	ldr	r3, [pc, #508]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 802128e:	681b      	ldr	r3, [r3, #0]
 8021290:	4a88      	ldr	r2, [pc, #544]	; (80214b4 <FINGER_DMA_IrqHandler+0x298>)
 8021292:	4293      	cmp	r3, r2
 8021294:	d01a      	beq.n	80212cc <FINGER_DMA_IrqHandler+0xb0>
 8021296:	4b7d      	ldr	r3, [pc, #500]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 8021298:	681b      	ldr	r3, [r3, #0]
 802129a:	4a87      	ldr	r2, [pc, #540]	; (80214b8 <FINGER_DMA_IrqHandler+0x29c>)
 802129c:	4293      	cmp	r3, r2
 802129e:	d012      	beq.n	80212c6 <FINGER_DMA_IrqHandler+0xaa>
 80212a0:	4b7a      	ldr	r3, [pc, #488]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 80212a2:	681b      	ldr	r3, [r3, #0]
 80212a4:	4a85      	ldr	r2, [pc, #532]	; (80214bc <FINGER_DMA_IrqHandler+0x2a0>)
 80212a6:	4293      	cmp	r3, r2
 80212a8:	d00a      	beq.n	80212c0 <FINGER_DMA_IrqHandler+0xa4>
 80212aa:	4b78      	ldr	r3, [pc, #480]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 80212ac:	681b      	ldr	r3, [r3, #0]
 80212ae:	4a84      	ldr	r2, [pc, #528]	; (80214c0 <FINGER_DMA_IrqHandler+0x2a4>)
 80212b0:	4293      	cmp	r3, r2
 80212b2:	d102      	bne.n	80212ba <FINGER_DMA_IrqHandler+0x9e>
 80212b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80212b8:	e01e      	b.n	80212f8 <FINGER_DMA_IrqHandler+0xdc>
 80212ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80212be:	e01b      	b.n	80212f8 <FINGER_DMA_IrqHandler+0xdc>
 80212c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80212c4:	e018      	b.n	80212f8 <FINGER_DMA_IrqHandler+0xdc>
 80212c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80212ca:	e015      	b.n	80212f8 <FINGER_DMA_IrqHandler+0xdc>
 80212cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80212d0:	e012      	b.n	80212f8 <FINGER_DMA_IrqHandler+0xdc>
 80212d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80212d6:	e00f      	b.n	80212f8 <FINGER_DMA_IrqHandler+0xdc>
 80212d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80212dc:	e00c      	b.n	80212f8 <FINGER_DMA_IrqHandler+0xdc>
 80212de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80212e2:	e009      	b.n	80212f8 <FINGER_DMA_IrqHandler+0xdc>
 80212e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80212e8:	e006      	b.n	80212f8 <FINGER_DMA_IrqHandler+0xdc>
 80212ea:	2310      	movs	r3, #16
 80212ec:	e004      	b.n	80212f8 <FINGER_DMA_IrqHandler+0xdc>
 80212ee:	2310      	movs	r3, #16
 80212f0:	e002      	b.n	80212f8 <FINGER_DMA_IrqHandler+0xdc>
 80212f2:	2310      	movs	r3, #16
 80212f4:	e000      	b.n	80212f8 <FINGER_DMA_IrqHandler+0xdc>
 80212f6:	2310      	movs	r3, #16
 80212f8:	4a72      	ldr	r2, [pc, #456]	; (80214c4 <FINGER_DMA_IrqHandler+0x2a8>)
 80212fa:	60d3      	str	r3, [r2, #12]
 80212fc:	e150      	b.n	80215a0 <FINGER_DMA_IrqHandler+0x384>
 80212fe:	4b63      	ldr	r3, [pc, #396]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 8021300:	681b      	ldr	r3, [r3, #0]
 8021302:	461a      	mov	r2, r3
 8021304:	4b70      	ldr	r3, [pc, #448]	; (80214c8 <FINGER_DMA_IrqHandler+0x2ac>)
 8021306:	429a      	cmp	r2, r3
 8021308:	d960      	bls.n	80213cc <FINGER_DMA_IrqHandler+0x1b0>
 802130a:	4b60      	ldr	r3, [pc, #384]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 802130c:	681b      	ldr	r3, [r3, #0]
 802130e:	4a61      	ldr	r2, [pc, #388]	; (8021494 <FINGER_DMA_IrqHandler+0x278>)
 8021310:	4293      	cmp	r3, r2
 8021312:	d057      	beq.n	80213c4 <FINGER_DMA_IrqHandler+0x1a8>
 8021314:	4b5d      	ldr	r3, [pc, #372]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 8021316:	681b      	ldr	r3, [r3, #0]
 8021318:	4a5f      	ldr	r2, [pc, #380]	; (8021498 <FINGER_DMA_IrqHandler+0x27c>)
 802131a:	4293      	cmp	r3, r2
 802131c:	d050      	beq.n	80213c0 <FINGER_DMA_IrqHandler+0x1a4>
 802131e:	4b5b      	ldr	r3, [pc, #364]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 8021320:	681b      	ldr	r3, [r3, #0]
 8021322:	4a5e      	ldr	r2, [pc, #376]	; (802149c <FINGER_DMA_IrqHandler+0x280>)
 8021324:	4293      	cmp	r3, r2
 8021326:	d049      	beq.n	80213bc <FINGER_DMA_IrqHandler+0x1a0>
 8021328:	4b58      	ldr	r3, [pc, #352]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 802132a:	681b      	ldr	r3, [r3, #0]
 802132c:	4a5c      	ldr	r2, [pc, #368]	; (80214a0 <FINGER_DMA_IrqHandler+0x284>)
 802132e:	4293      	cmp	r3, r2
 8021330:	d042      	beq.n	80213b8 <FINGER_DMA_IrqHandler+0x19c>
 8021332:	4b56      	ldr	r3, [pc, #344]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 8021334:	681b      	ldr	r3, [r3, #0]
 8021336:	4a5b      	ldr	r2, [pc, #364]	; (80214a4 <FINGER_DMA_IrqHandler+0x288>)
 8021338:	4293      	cmp	r3, r2
 802133a:	d03a      	beq.n	80213b2 <FINGER_DMA_IrqHandler+0x196>
 802133c:	4b53      	ldr	r3, [pc, #332]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 802133e:	681b      	ldr	r3, [r3, #0]
 8021340:	4a59      	ldr	r2, [pc, #356]	; (80214a8 <FINGER_DMA_IrqHandler+0x28c>)
 8021342:	4293      	cmp	r3, r2
 8021344:	d032      	beq.n	80213ac <FINGER_DMA_IrqHandler+0x190>
 8021346:	4b51      	ldr	r3, [pc, #324]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 8021348:	681b      	ldr	r3, [r3, #0]
 802134a:	4a58      	ldr	r2, [pc, #352]	; (80214ac <FINGER_DMA_IrqHandler+0x290>)
 802134c:	4293      	cmp	r3, r2
 802134e:	d02a      	beq.n	80213a6 <FINGER_DMA_IrqHandler+0x18a>
 8021350:	4b4e      	ldr	r3, [pc, #312]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 8021352:	681b      	ldr	r3, [r3, #0]
 8021354:	4a56      	ldr	r2, [pc, #344]	; (80214b0 <FINGER_DMA_IrqHandler+0x294>)
 8021356:	4293      	cmp	r3, r2
 8021358:	d022      	beq.n	80213a0 <FINGER_DMA_IrqHandler+0x184>
 802135a:	4b4c      	ldr	r3, [pc, #304]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 802135c:	681b      	ldr	r3, [r3, #0]
 802135e:	4a55      	ldr	r2, [pc, #340]	; (80214b4 <FINGER_DMA_IrqHandler+0x298>)
 8021360:	4293      	cmp	r3, r2
 8021362:	d01a      	beq.n	802139a <FINGER_DMA_IrqHandler+0x17e>
 8021364:	4b49      	ldr	r3, [pc, #292]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 8021366:	681b      	ldr	r3, [r3, #0]
 8021368:	4a53      	ldr	r2, [pc, #332]	; (80214b8 <FINGER_DMA_IrqHandler+0x29c>)
 802136a:	4293      	cmp	r3, r2
 802136c:	d012      	beq.n	8021394 <FINGER_DMA_IrqHandler+0x178>
 802136e:	4b47      	ldr	r3, [pc, #284]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 8021370:	681b      	ldr	r3, [r3, #0]
 8021372:	4a52      	ldr	r2, [pc, #328]	; (80214bc <FINGER_DMA_IrqHandler+0x2a0>)
 8021374:	4293      	cmp	r3, r2
 8021376:	d00a      	beq.n	802138e <FINGER_DMA_IrqHandler+0x172>
 8021378:	4b44      	ldr	r3, [pc, #272]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 802137a:	681b      	ldr	r3, [r3, #0]
 802137c:	4a50      	ldr	r2, [pc, #320]	; (80214c0 <FINGER_DMA_IrqHandler+0x2a4>)
 802137e:	4293      	cmp	r3, r2
 8021380:	d102      	bne.n	8021388 <FINGER_DMA_IrqHandler+0x16c>
 8021382:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8021386:	e01e      	b.n	80213c6 <FINGER_DMA_IrqHandler+0x1aa>
 8021388:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 802138c:	e01b      	b.n	80213c6 <FINGER_DMA_IrqHandler+0x1aa>
 802138e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8021392:	e018      	b.n	80213c6 <FINGER_DMA_IrqHandler+0x1aa>
 8021394:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8021398:	e015      	b.n	80213c6 <FINGER_DMA_IrqHandler+0x1aa>
 802139a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 802139e:	e012      	b.n	80213c6 <FINGER_DMA_IrqHandler+0x1aa>
 80213a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80213a4:	e00f      	b.n	80213c6 <FINGER_DMA_IrqHandler+0x1aa>
 80213a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80213aa:	e00c      	b.n	80213c6 <FINGER_DMA_IrqHandler+0x1aa>
 80213ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80213b0:	e009      	b.n	80213c6 <FINGER_DMA_IrqHandler+0x1aa>
 80213b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80213b6:	e006      	b.n	80213c6 <FINGER_DMA_IrqHandler+0x1aa>
 80213b8:	2310      	movs	r3, #16
 80213ba:	e004      	b.n	80213c6 <FINGER_DMA_IrqHandler+0x1aa>
 80213bc:	2310      	movs	r3, #16
 80213be:	e002      	b.n	80213c6 <FINGER_DMA_IrqHandler+0x1aa>
 80213c0:	2310      	movs	r3, #16
 80213c2:	e000      	b.n	80213c6 <FINGER_DMA_IrqHandler+0x1aa>
 80213c4:	2310      	movs	r3, #16
 80213c6:	4a3f      	ldr	r2, [pc, #252]	; (80214c4 <FINGER_DMA_IrqHandler+0x2a8>)
 80213c8:	6093      	str	r3, [r2, #8]
 80213ca:	e0e9      	b.n	80215a0 <FINGER_DMA_IrqHandler+0x384>
 80213cc:	4b2f      	ldr	r3, [pc, #188]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 80213ce:	681b      	ldr	r3, [r3, #0]
 80213d0:	461a      	mov	r2, r3
 80213d2:	4b3e      	ldr	r3, [pc, #248]	; (80214cc <FINGER_DMA_IrqHandler+0x2b0>)
 80213d4:	429a      	cmp	r2, r3
 80213d6:	f240 8083 	bls.w	80214e0 <FINGER_DMA_IrqHandler+0x2c4>
 80213da:	4b2c      	ldr	r3, [pc, #176]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 80213dc:	681b      	ldr	r3, [r3, #0]
 80213de:	4a2d      	ldr	r2, [pc, #180]	; (8021494 <FINGER_DMA_IrqHandler+0x278>)
 80213e0:	4293      	cmp	r3, r2
 80213e2:	d079      	beq.n	80214d8 <FINGER_DMA_IrqHandler+0x2bc>
 80213e4:	4b29      	ldr	r3, [pc, #164]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 80213e6:	681b      	ldr	r3, [r3, #0]
 80213e8:	4a2b      	ldr	r2, [pc, #172]	; (8021498 <FINGER_DMA_IrqHandler+0x27c>)
 80213ea:	4293      	cmp	r3, r2
 80213ec:	d072      	beq.n	80214d4 <FINGER_DMA_IrqHandler+0x2b8>
 80213ee:	4b27      	ldr	r3, [pc, #156]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 80213f0:	681b      	ldr	r3, [r3, #0]
 80213f2:	4a2a      	ldr	r2, [pc, #168]	; (802149c <FINGER_DMA_IrqHandler+0x280>)
 80213f4:	4293      	cmp	r3, r2
 80213f6:	d06b      	beq.n	80214d0 <FINGER_DMA_IrqHandler+0x2b4>
 80213f8:	4b24      	ldr	r3, [pc, #144]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 80213fa:	681b      	ldr	r3, [r3, #0]
 80213fc:	4a28      	ldr	r2, [pc, #160]	; (80214a0 <FINGER_DMA_IrqHandler+0x284>)
 80213fe:	4293      	cmp	r3, r2
 8021400:	d042      	beq.n	8021488 <FINGER_DMA_IrqHandler+0x26c>
 8021402:	4b22      	ldr	r3, [pc, #136]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 8021404:	681b      	ldr	r3, [r3, #0]
 8021406:	4a27      	ldr	r2, [pc, #156]	; (80214a4 <FINGER_DMA_IrqHandler+0x288>)
 8021408:	4293      	cmp	r3, r2
 802140a:	d03a      	beq.n	8021482 <FINGER_DMA_IrqHandler+0x266>
 802140c:	4b1f      	ldr	r3, [pc, #124]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 802140e:	681b      	ldr	r3, [r3, #0]
 8021410:	4a25      	ldr	r2, [pc, #148]	; (80214a8 <FINGER_DMA_IrqHandler+0x28c>)
 8021412:	4293      	cmp	r3, r2
 8021414:	d032      	beq.n	802147c <FINGER_DMA_IrqHandler+0x260>
 8021416:	4b1d      	ldr	r3, [pc, #116]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 8021418:	681b      	ldr	r3, [r3, #0]
 802141a:	4a24      	ldr	r2, [pc, #144]	; (80214ac <FINGER_DMA_IrqHandler+0x290>)
 802141c:	4293      	cmp	r3, r2
 802141e:	d02a      	beq.n	8021476 <FINGER_DMA_IrqHandler+0x25a>
 8021420:	4b1a      	ldr	r3, [pc, #104]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 8021422:	681b      	ldr	r3, [r3, #0]
 8021424:	4a22      	ldr	r2, [pc, #136]	; (80214b0 <FINGER_DMA_IrqHandler+0x294>)
 8021426:	4293      	cmp	r3, r2
 8021428:	d022      	beq.n	8021470 <FINGER_DMA_IrqHandler+0x254>
 802142a:	4b18      	ldr	r3, [pc, #96]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 802142c:	681b      	ldr	r3, [r3, #0]
 802142e:	4a21      	ldr	r2, [pc, #132]	; (80214b4 <FINGER_DMA_IrqHandler+0x298>)
 8021430:	4293      	cmp	r3, r2
 8021432:	d01a      	beq.n	802146a <FINGER_DMA_IrqHandler+0x24e>
 8021434:	4b15      	ldr	r3, [pc, #84]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 8021436:	681b      	ldr	r3, [r3, #0]
 8021438:	4a1f      	ldr	r2, [pc, #124]	; (80214b8 <FINGER_DMA_IrqHandler+0x29c>)
 802143a:	4293      	cmp	r3, r2
 802143c:	d012      	beq.n	8021464 <FINGER_DMA_IrqHandler+0x248>
 802143e:	4b13      	ldr	r3, [pc, #76]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 8021440:	681b      	ldr	r3, [r3, #0]
 8021442:	4a1e      	ldr	r2, [pc, #120]	; (80214bc <FINGER_DMA_IrqHandler+0x2a0>)
 8021444:	4293      	cmp	r3, r2
 8021446:	d00a      	beq.n	802145e <FINGER_DMA_IrqHandler+0x242>
 8021448:	4b10      	ldr	r3, [pc, #64]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 802144a:	681b      	ldr	r3, [r3, #0]
 802144c:	4a1c      	ldr	r2, [pc, #112]	; (80214c0 <FINGER_DMA_IrqHandler+0x2a4>)
 802144e:	4293      	cmp	r3, r2
 8021450:	d102      	bne.n	8021458 <FINGER_DMA_IrqHandler+0x23c>
 8021452:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8021456:	e040      	b.n	80214da <FINGER_DMA_IrqHandler+0x2be>
 8021458:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 802145c:	e03d      	b.n	80214da <FINGER_DMA_IrqHandler+0x2be>
 802145e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8021462:	e03a      	b.n	80214da <FINGER_DMA_IrqHandler+0x2be>
 8021464:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8021468:	e037      	b.n	80214da <FINGER_DMA_IrqHandler+0x2be>
 802146a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 802146e:	e034      	b.n	80214da <FINGER_DMA_IrqHandler+0x2be>
 8021470:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021474:	e031      	b.n	80214da <FINGER_DMA_IrqHandler+0x2be>
 8021476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802147a:	e02e      	b.n	80214da <FINGER_DMA_IrqHandler+0x2be>
 802147c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021480:	e02b      	b.n	80214da <FINGER_DMA_IrqHandler+0x2be>
 8021482:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021486:	e028      	b.n	80214da <FINGER_DMA_IrqHandler+0x2be>
 8021488:	2310      	movs	r3, #16
 802148a:	e026      	b.n	80214da <FINGER_DMA_IrqHandler+0x2be>
 802148c:	20008464 	.word	0x20008464
 8021490:	40026458 	.word	0x40026458
 8021494:	40026010 	.word	0x40026010
 8021498:	40026410 	.word	0x40026410
 802149c:	40026070 	.word	0x40026070
 80214a0:	40026470 	.word	0x40026470
 80214a4:	40026028 	.word	0x40026028
 80214a8:	40026428 	.word	0x40026428
 80214ac:	40026088 	.word	0x40026088
 80214b0:	40026488 	.word	0x40026488
 80214b4:	40026040 	.word	0x40026040
 80214b8:	40026440 	.word	0x40026440
 80214bc:	400260a0 	.word	0x400260a0
 80214c0:	400264a0 	.word	0x400264a0
 80214c4:	40026400 	.word	0x40026400
 80214c8:	400260b8 	.word	0x400260b8
 80214cc:	40026058 	.word	0x40026058
 80214d0:	2310      	movs	r3, #16
 80214d2:	e002      	b.n	80214da <FINGER_DMA_IrqHandler+0x2be>
 80214d4:	2310      	movs	r3, #16
 80214d6:	e000      	b.n	80214da <FINGER_DMA_IrqHandler+0x2be>
 80214d8:	2310      	movs	r3, #16
 80214da:	4a9b      	ldr	r2, [pc, #620]	; (8021748 <FINGER_DMA_IrqHandler+0x52c>)
 80214dc:	60d3      	str	r3, [r2, #12]
 80214de:	e05f      	b.n	80215a0 <FINGER_DMA_IrqHandler+0x384>
 80214e0:	4b9a      	ldr	r3, [pc, #616]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 80214e2:	681b      	ldr	r3, [r3, #0]
 80214e4:	4a9a      	ldr	r2, [pc, #616]	; (8021750 <FINGER_DMA_IrqHandler+0x534>)
 80214e6:	4293      	cmp	r3, r2
 80214e8:	d057      	beq.n	802159a <FINGER_DMA_IrqHandler+0x37e>
 80214ea:	4b98      	ldr	r3, [pc, #608]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 80214ec:	681b      	ldr	r3, [r3, #0]
 80214ee:	4a99      	ldr	r2, [pc, #612]	; (8021754 <FINGER_DMA_IrqHandler+0x538>)
 80214f0:	4293      	cmp	r3, r2
 80214f2:	d050      	beq.n	8021596 <FINGER_DMA_IrqHandler+0x37a>
 80214f4:	4b95      	ldr	r3, [pc, #596]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 80214f6:	681b      	ldr	r3, [r3, #0]
 80214f8:	4a97      	ldr	r2, [pc, #604]	; (8021758 <FINGER_DMA_IrqHandler+0x53c>)
 80214fa:	4293      	cmp	r3, r2
 80214fc:	d049      	beq.n	8021592 <FINGER_DMA_IrqHandler+0x376>
 80214fe:	4b93      	ldr	r3, [pc, #588]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 8021500:	681b      	ldr	r3, [r3, #0]
 8021502:	4a96      	ldr	r2, [pc, #600]	; (802175c <FINGER_DMA_IrqHandler+0x540>)
 8021504:	4293      	cmp	r3, r2
 8021506:	d042      	beq.n	802158e <FINGER_DMA_IrqHandler+0x372>
 8021508:	4b90      	ldr	r3, [pc, #576]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 802150a:	681b      	ldr	r3, [r3, #0]
 802150c:	4a94      	ldr	r2, [pc, #592]	; (8021760 <FINGER_DMA_IrqHandler+0x544>)
 802150e:	4293      	cmp	r3, r2
 8021510:	d03a      	beq.n	8021588 <FINGER_DMA_IrqHandler+0x36c>
 8021512:	4b8e      	ldr	r3, [pc, #568]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 8021514:	681b      	ldr	r3, [r3, #0]
 8021516:	4a93      	ldr	r2, [pc, #588]	; (8021764 <FINGER_DMA_IrqHandler+0x548>)
 8021518:	4293      	cmp	r3, r2
 802151a:	d032      	beq.n	8021582 <FINGER_DMA_IrqHandler+0x366>
 802151c:	4b8b      	ldr	r3, [pc, #556]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 802151e:	681b      	ldr	r3, [r3, #0]
 8021520:	4a91      	ldr	r2, [pc, #580]	; (8021768 <FINGER_DMA_IrqHandler+0x54c>)
 8021522:	4293      	cmp	r3, r2
 8021524:	d02a      	beq.n	802157c <FINGER_DMA_IrqHandler+0x360>
 8021526:	4b89      	ldr	r3, [pc, #548]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 8021528:	681b      	ldr	r3, [r3, #0]
 802152a:	4a90      	ldr	r2, [pc, #576]	; (802176c <FINGER_DMA_IrqHandler+0x550>)
 802152c:	4293      	cmp	r3, r2
 802152e:	d022      	beq.n	8021576 <FINGER_DMA_IrqHandler+0x35a>
 8021530:	4b86      	ldr	r3, [pc, #536]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 8021532:	681b      	ldr	r3, [r3, #0]
 8021534:	4a8e      	ldr	r2, [pc, #568]	; (8021770 <FINGER_DMA_IrqHandler+0x554>)
 8021536:	4293      	cmp	r3, r2
 8021538:	d01a      	beq.n	8021570 <FINGER_DMA_IrqHandler+0x354>
 802153a:	4b84      	ldr	r3, [pc, #528]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 802153c:	681b      	ldr	r3, [r3, #0]
 802153e:	4a8d      	ldr	r2, [pc, #564]	; (8021774 <FINGER_DMA_IrqHandler+0x558>)
 8021540:	4293      	cmp	r3, r2
 8021542:	d012      	beq.n	802156a <FINGER_DMA_IrqHandler+0x34e>
 8021544:	4b81      	ldr	r3, [pc, #516]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 8021546:	681b      	ldr	r3, [r3, #0]
 8021548:	4a8b      	ldr	r2, [pc, #556]	; (8021778 <FINGER_DMA_IrqHandler+0x55c>)
 802154a:	4293      	cmp	r3, r2
 802154c:	d00a      	beq.n	8021564 <FINGER_DMA_IrqHandler+0x348>
 802154e:	4b7f      	ldr	r3, [pc, #508]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 8021550:	681b      	ldr	r3, [r3, #0]
 8021552:	4a8a      	ldr	r2, [pc, #552]	; (802177c <FINGER_DMA_IrqHandler+0x560>)
 8021554:	4293      	cmp	r3, r2
 8021556:	d102      	bne.n	802155e <FINGER_DMA_IrqHandler+0x342>
 8021558:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 802155c:	e01e      	b.n	802159c <FINGER_DMA_IrqHandler+0x380>
 802155e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8021562:	e01b      	b.n	802159c <FINGER_DMA_IrqHandler+0x380>
 8021564:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8021568:	e018      	b.n	802159c <FINGER_DMA_IrqHandler+0x380>
 802156a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 802156e:	e015      	b.n	802159c <FINGER_DMA_IrqHandler+0x380>
 8021570:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8021574:	e012      	b.n	802159c <FINGER_DMA_IrqHandler+0x380>
 8021576:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802157a:	e00f      	b.n	802159c <FINGER_DMA_IrqHandler+0x380>
 802157c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021580:	e00c      	b.n	802159c <FINGER_DMA_IrqHandler+0x380>
 8021582:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021586:	e009      	b.n	802159c <FINGER_DMA_IrqHandler+0x380>
 8021588:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802158c:	e006      	b.n	802159c <FINGER_DMA_IrqHandler+0x380>
 802158e:	2310      	movs	r3, #16
 8021590:	e004      	b.n	802159c <FINGER_DMA_IrqHandler+0x380>
 8021592:	2310      	movs	r3, #16
 8021594:	e002      	b.n	802159c <FINGER_DMA_IrqHandler+0x380>
 8021596:	2310      	movs	r3, #16
 8021598:	e000      	b.n	802159c <FINGER_DMA_IrqHandler+0x380>
 802159a:	2310      	movs	r3, #16
 802159c:	4a6a      	ldr	r2, [pc, #424]	; (8021748 <FINGER_DMA_IrqHandler+0x52c>)
 802159e:	6093      	str	r3, [r2, #8]

        FINGER_Check_Buffer();
 80215a0:	f000 ff58 	bl	8022454 <FINGER_Check_Buffer>
        __HAL_DMA_CLEAR_FLAG(&hdma_uart4_rx, __HAL_DMA_GET_DME_FLAG_INDEX(&hdma_uart4_rx));

        /* Start DMA transfer */
        HAL_UART_Receive_DMA(&huart4, (uint8_t*) FINGER_DMA_RX, FINGER_DMA_RX_SZ);
    }
}
 80215a4:	f000 bf0a 	b.w	80223bc <FINGER_DMA_IrqHandler+0x11a0>
    else if (__HAL_DMA_GET_IT_SOURCE(&hdma_uart4_rx, DMA_IT_TC)) {
 80215a8:	4b68      	ldr	r3, [pc, #416]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 80215aa:	681b      	ldr	r3, [r3, #0]
 80215ac:	681b      	ldr	r3, [r3, #0]
 80215ae:	f003 0310 	and.w	r3, r3, #16
 80215b2:	2b00      	cmp	r3, #0
 80215b4:	f000 81bd 	beq.w	8021932 <FINGER_DMA_IrqHandler+0x716>
        __HAL_DMA_CLEAR_FLAG(&hdma_uart4_rx, __HAL_DMA_GET_TC_FLAG_INDEX(&hdma_uart4_rx));
 80215b8:	4b64      	ldr	r3, [pc, #400]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 80215ba:	681b      	ldr	r3, [r3, #0]
 80215bc:	461a      	mov	r2, r3
 80215be:	4b70      	ldr	r3, [pc, #448]	; (8021780 <FINGER_DMA_IrqHandler+0x564>)
 80215c0:	429a      	cmp	r2, r3
 80215c2:	d960      	bls.n	8021686 <FINGER_DMA_IrqHandler+0x46a>
 80215c4:	4b61      	ldr	r3, [pc, #388]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 80215c6:	681b      	ldr	r3, [r3, #0]
 80215c8:	4a61      	ldr	r2, [pc, #388]	; (8021750 <FINGER_DMA_IrqHandler+0x534>)
 80215ca:	4293      	cmp	r3, r2
 80215cc:	d057      	beq.n	802167e <FINGER_DMA_IrqHandler+0x462>
 80215ce:	4b5f      	ldr	r3, [pc, #380]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 80215d0:	681b      	ldr	r3, [r3, #0]
 80215d2:	4a60      	ldr	r2, [pc, #384]	; (8021754 <FINGER_DMA_IrqHandler+0x538>)
 80215d4:	4293      	cmp	r3, r2
 80215d6:	d050      	beq.n	802167a <FINGER_DMA_IrqHandler+0x45e>
 80215d8:	4b5c      	ldr	r3, [pc, #368]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 80215da:	681b      	ldr	r3, [r3, #0]
 80215dc:	4a5e      	ldr	r2, [pc, #376]	; (8021758 <FINGER_DMA_IrqHandler+0x53c>)
 80215de:	4293      	cmp	r3, r2
 80215e0:	d049      	beq.n	8021676 <FINGER_DMA_IrqHandler+0x45a>
 80215e2:	4b5a      	ldr	r3, [pc, #360]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 80215e4:	681b      	ldr	r3, [r3, #0]
 80215e6:	4a5d      	ldr	r2, [pc, #372]	; (802175c <FINGER_DMA_IrqHandler+0x540>)
 80215e8:	4293      	cmp	r3, r2
 80215ea:	d042      	beq.n	8021672 <FINGER_DMA_IrqHandler+0x456>
 80215ec:	4b57      	ldr	r3, [pc, #348]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 80215ee:	681b      	ldr	r3, [r3, #0]
 80215f0:	4a5b      	ldr	r2, [pc, #364]	; (8021760 <FINGER_DMA_IrqHandler+0x544>)
 80215f2:	4293      	cmp	r3, r2
 80215f4:	d03a      	beq.n	802166c <FINGER_DMA_IrqHandler+0x450>
 80215f6:	4b55      	ldr	r3, [pc, #340]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 80215f8:	681b      	ldr	r3, [r3, #0]
 80215fa:	4a5a      	ldr	r2, [pc, #360]	; (8021764 <FINGER_DMA_IrqHandler+0x548>)
 80215fc:	4293      	cmp	r3, r2
 80215fe:	d032      	beq.n	8021666 <FINGER_DMA_IrqHandler+0x44a>
 8021600:	4b52      	ldr	r3, [pc, #328]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 8021602:	681b      	ldr	r3, [r3, #0]
 8021604:	4a58      	ldr	r2, [pc, #352]	; (8021768 <FINGER_DMA_IrqHandler+0x54c>)
 8021606:	4293      	cmp	r3, r2
 8021608:	d02a      	beq.n	8021660 <FINGER_DMA_IrqHandler+0x444>
 802160a:	4b50      	ldr	r3, [pc, #320]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 802160c:	681b      	ldr	r3, [r3, #0]
 802160e:	4a57      	ldr	r2, [pc, #348]	; (802176c <FINGER_DMA_IrqHandler+0x550>)
 8021610:	4293      	cmp	r3, r2
 8021612:	d022      	beq.n	802165a <FINGER_DMA_IrqHandler+0x43e>
 8021614:	4b4d      	ldr	r3, [pc, #308]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 8021616:	681b      	ldr	r3, [r3, #0]
 8021618:	4a55      	ldr	r2, [pc, #340]	; (8021770 <FINGER_DMA_IrqHandler+0x554>)
 802161a:	4293      	cmp	r3, r2
 802161c:	d01a      	beq.n	8021654 <FINGER_DMA_IrqHandler+0x438>
 802161e:	4b4b      	ldr	r3, [pc, #300]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 8021620:	681b      	ldr	r3, [r3, #0]
 8021622:	4a54      	ldr	r2, [pc, #336]	; (8021774 <FINGER_DMA_IrqHandler+0x558>)
 8021624:	4293      	cmp	r3, r2
 8021626:	d012      	beq.n	802164e <FINGER_DMA_IrqHandler+0x432>
 8021628:	4b48      	ldr	r3, [pc, #288]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 802162a:	681b      	ldr	r3, [r3, #0]
 802162c:	4a52      	ldr	r2, [pc, #328]	; (8021778 <FINGER_DMA_IrqHandler+0x55c>)
 802162e:	4293      	cmp	r3, r2
 8021630:	d00a      	beq.n	8021648 <FINGER_DMA_IrqHandler+0x42c>
 8021632:	4b46      	ldr	r3, [pc, #280]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 8021634:	681b      	ldr	r3, [r3, #0]
 8021636:	4a51      	ldr	r2, [pc, #324]	; (802177c <FINGER_DMA_IrqHandler+0x560>)
 8021638:	4293      	cmp	r3, r2
 802163a:	d102      	bne.n	8021642 <FINGER_DMA_IrqHandler+0x426>
 802163c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8021640:	e01e      	b.n	8021680 <FINGER_DMA_IrqHandler+0x464>
 8021642:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8021646:	e01b      	b.n	8021680 <FINGER_DMA_IrqHandler+0x464>
 8021648:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 802164c:	e018      	b.n	8021680 <FINGER_DMA_IrqHandler+0x464>
 802164e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8021652:	e015      	b.n	8021680 <FINGER_DMA_IrqHandler+0x464>
 8021654:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8021658:	e012      	b.n	8021680 <FINGER_DMA_IrqHandler+0x464>
 802165a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 802165e:	e00f      	b.n	8021680 <FINGER_DMA_IrqHandler+0x464>
 8021660:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8021664:	e00c      	b.n	8021680 <FINGER_DMA_IrqHandler+0x464>
 8021666:	f44f 6300 	mov.w	r3, #2048	; 0x800
 802166a:	e009      	b.n	8021680 <FINGER_DMA_IrqHandler+0x464>
 802166c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8021670:	e006      	b.n	8021680 <FINGER_DMA_IrqHandler+0x464>
 8021672:	2320      	movs	r3, #32
 8021674:	e004      	b.n	8021680 <FINGER_DMA_IrqHandler+0x464>
 8021676:	2320      	movs	r3, #32
 8021678:	e002      	b.n	8021680 <FINGER_DMA_IrqHandler+0x464>
 802167a:	2320      	movs	r3, #32
 802167c:	e000      	b.n	8021680 <FINGER_DMA_IrqHandler+0x464>
 802167e:	2320      	movs	r3, #32
 8021680:	4a40      	ldr	r2, [pc, #256]	; (8021784 <FINGER_DMA_IrqHandler+0x568>)
 8021682:	60d3      	str	r3, [r2, #12]
 8021684:	e151      	b.n	802192a <FINGER_DMA_IrqHandler+0x70e>
 8021686:	4b31      	ldr	r3, [pc, #196]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 8021688:	681b      	ldr	r3, [r3, #0]
 802168a:	461a      	mov	r2, r3
 802168c:	4b3e      	ldr	r3, [pc, #248]	; (8021788 <FINGER_DMA_IrqHandler+0x56c>)
 802168e:	429a      	cmp	r2, r3
 8021690:	f240 8084 	bls.w	802179c <FINGER_DMA_IrqHandler+0x580>
 8021694:	4b2d      	ldr	r3, [pc, #180]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 8021696:	681b      	ldr	r3, [r3, #0]
 8021698:	4a2d      	ldr	r2, [pc, #180]	; (8021750 <FINGER_DMA_IrqHandler+0x534>)
 802169a:	4293      	cmp	r3, r2
 802169c:	d07a      	beq.n	8021794 <FINGER_DMA_IrqHandler+0x578>
 802169e:	4b2b      	ldr	r3, [pc, #172]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 80216a0:	681b      	ldr	r3, [r3, #0]
 80216a2:	4a2c      	ldr	r2, [pc, #176]	; (8021754 <FINGER_DMA_IrqHandler+0x538>)
 80216a4:	4293      	cmp	r3, r2
 80216a6:	d073      	beq.n	8021790 <FINGER_DMA_IrqHandler+0x574>
 80216a8:	4b28      	ldr	r3, [pc, #160]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 80216aa:	681b      	ldr	r3, [r3, #0]
 80216ac:	4a2a      	ldr	r2, [pc, #168]	; (8021758 <FINGER_DMA_IrqHandler+0x53c>)
 80216ae:	4293      	cmp	r3, r2
 80216b0:	d06c      	beq.n	802178c <FINGER_DMA_IrqHandler+0x570>
 80216b2:	4b26      	ldr	r3, [pc, #152]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 80216b4:	681b      	ldr	r3, [r3, #0]
 80216b6:	4a29      	ldr	r2, [pc, #164]	; (802175c <FINGER_DMA_IrqHandler+0x540>)
 80216b8:	4293      	cmp	r3, r2
 80216ba:	d042      	beq.n	8021742 <FINGER_DMA_IrqHandler+0x526>
 80216bc:	4b23      	ldr	r3, [pc, #140]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 80216be:	681b      	ldr	r3, [r3, #0]
 80216c0:	4a27      	ldr	r2, [pc, #156]	; (8021760 <FINGER_DMA_IrqHandler+0x544>)
 80216c2:	4293      	cmp	r3, r2
 80216c4:	d03a      	beq.n	802173c <FINGER_DMA_IrqHandler+0x520>
 80216c6:	4b21      	ldr	r3, [pc, #132]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 80216c8:	681b      	ldr	r3, [r3, #0]
 80216ca:	4a26      	ldr	r2, [pc, #152]	; (8021764 <FINGER_DMA_IrqHandler+0x548>)
 80216cc:	4293      	cmp	r3, r2
 80216ce:	d032      	beq.n	8021736 <FINGER_DMA_IrqHandler+0x51a>
 80216d0:	4b1e      	ldr	r3, [pc, #120]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 80216d2:	681b      	ldr	r3, [r3, #0]
 80216d4:	4a24      	ldr	r2, [pc, #144]	; (8021768 <FINGER_DMA_IrqHandler+0x54c>)
 80216d6:	4293      	cmp	r3, r2
 80216d8:	d02a      	beq.n	8021730 <FINGER_DMA_IrqHandler+0x514>
 80216da:	4b1c      	ldr	r3, [pc, #112]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 80216dc:	681b      	ldr	r3, [r3, #0]
 80216de:	4a23      	ldr	r2, [pc, #140]	; (802176c <FINGER_DMA_IrqHandler+0x550>)
 80216e0:	4293      	cmp	r3, r2
 80216e2:	d022      	beq.n	802172a <FINGER_DMA_IrqHandler+0x50e>
 80216e4:	4b19      	ldr	r3, [pc, #100]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 80216e6:	681b      	ldr	r3, [r3, #0]
 80216e8:	4a21      	ldr	r2, [pc, #132]	; (8021770 <FINGER_DMA_IrqHandler+0x554>)
 80216ea:	4293      	cmp	r3, r2
 80216ec:	d01a      	beq.n	8021724 <FINGER_DMA_IrqHandler+0x508>
 80216ee:	4b17      	ldr	r3, [pc, #92]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 80216f0:	681b      	ldr	r3, [r3, #0]
 80216f2:	4a20      	ldr	r2, [pc, #128]	; (8021774 <FINGER_DMA_IrqHandler+0x558>)
 80216f4:	4293      	cmp	r3, r2
 80216f6:	d012      	beq.n	802171e <FINGER_DMA_IrqHandler+0x502>
 80216f8:	4b14      	ldr	r3, [pc, #80]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 80216fa:	681b      	ldr	r3, [r3, #0]
 80216fc:	4a1e      	ldr	r2, [pc, #120]	; (8021778 <FINGER_DMA_IrqHandler+0x55c>)
 80216fe:	4293      	cmp	r3, r2
 8021700:	d00a      	beq.n	8021718 <FINGER_DMA_IrqHandler+0x4fc>
 8021702:	4b12      	ldr	r3, [pc, #72]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 8021704:	681b      	ldr	r3, [r3, #0]
 8021706:	4a1d      	ldr	r2, [pc, #116]	; (802177c <FINGER_DMA_IrqHandler+0x560>)
 8021708:	4293      	cmp	r3, r2
 802170a:	d102      	bne.n	8021712 <FINGER_DMA_IrqHandler+0x4f6>
 802170c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8021710:	e041      	b.n	8021796 <FINGER_DMA_IrqHandler+0x57a>
 8021712:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8021716:	e03e      	b.n	8021796 <FINGER_DMA_IrqHandler+0x57a>
 8021718:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 802171c:	e03b      	b.n	8021796 <FINGER_DMA_IrqHandler+0x57a>
 802171e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8021722:	e038      	b.n	8021796 <FINGER_DMA_IrqHandler+0x57a>
 8021724:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8021728:	e035      	b.n	8021796 <FINGER_DMA_IrqHandler+0x57a>
 802172a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 802172e:	e032      	b.n	8021796 <FINGER_DMA_IrqHandler+0x57a>
 8021730:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8021734:	e02f      	b.n	8021796 <FINGER_DMA_IrqHandler+0x57a>
 8021736:	f44f 6300 	mov.w	r3, #2048	; 0x800
 802173a:	e02c      	b.n	8021796 <FINGER_DMA_IrqHandler+0x57a>
 802173c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8021740:	e029      	b.n	8021796 <FINGER_DMA_IrqHandler+0x57a>
 8021742:	2320      	movs	r3, #32
 8021744:	e027      	b.n	8021796 <FINGER_DMA_IrqHandler+0x57a>
 8021746:	bf00      	nop
 8021748:	40026000 	.word	0x40026000
 802174c:	20008464 	.word	0x20008464
 8021750:	40026010 	.word	0x40026010
 8021754:	40026410 	.word	0x40026410
 8021758:	40026070 	.word	0x40026070
 802175c:	40026470 	.word	0x40026470
 8021760:	40026028 	.word	0x40026028
 8021764:	40026428 	.word	0x40026428
 8021768:	40026088 	.word	0x40026088
 802176c:	40026488 	.word	0x40026488
 8021770:	40026040 	.word	0x40026040
 8021774:	40026440 	.word	0x40026440
 8021778:	400260a0 	.word	0x400260a0
 802177c:	400264a0 	.word	0x400264a0
 8021780:	40026458 	.word	0x40026458
 8021784:	40026400 	.word	0x40026400
 8021788:	400260b8 	.word	0x400260b8
 802178c:	2320      	movs	r3, #32
 802178e:	e002      	b.n	8021796 <FINGER_DMA_IrqHandler+0x57a>
 8021790:	2320      	movs	r3, #32
 8021792:	e000      	b.n	8021796 <FINGER_DMA_IrqHandler+0x57a>
 8021794:	2320      	movs	r3, #32
 8021796:	4a9b      	ldr	r2, [pc, #620]	; (8021a04 <FINGER_DMA_IrqHandler+0x7e8>)
 8021798:	6093      	str	r3, [r2, #8]
 802179a:	e0c6      	b.n	802192a <FINGER_DMA_IrqHandler+0x70e>
 802179c:	4b9a      	ldr	r3, [pc, #616]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 802179e:	681b      	ldr	r3, [r3, #0]
 80217a0:	461a      	mov	r2, r3
 80217a2:	4b9a      	ldr	r3, [pc, #616]	; (8021a0c <FINGER_DMA_IrqHandler+0x7f0>)
 80217a4:	429a      	cmp	r2, r3
 80217a6:	d960      	bls.n	802186a <FINGER_DMA_IrqHandler+0x64e>
 80217a8:	4b97      	ldr	r3, [pc, #604]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 80217aa:	681b      	ldr	r3, [r3, #0]
 80217ac:	4a98      	ldr	r2, [pc, #608]	; (8021a10 <FINGER_DMA_IrqHandler+0x7f4>)
 80217ae:	4293      	cmp	r3, r2
 80217b0:	d057      	beq.n	8021862 <FINGER_DMA_IrqHandler+0x646>
 80217b2:	4b95      	ldr	r3, [pc, #596]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 80217b4:	681b      	ldr	r3, [r3, #0]
 80217b6:	4a97      	ldr	r2, [pc, #604]	; (8021a14 <FINGER_DMA_IrqHandler+0x7f8>)
 80217b8:	4293      	cmp	r3, r2
 80217ba:	d050      	beq.n	802185e <FINGER_DMA_IrqHandler+0x642>
 80217bc:	4b92      	ldr	r3, [pc, #584]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 80217be:	681b      	ldr	r3, [r3, #0]
 80217c0:	4a95      	ldr	r2, [pc, #596]	; (8021a18 <FINGER_DMA_IrqHandler+0x7fc>)
 80217c2:	4293      	cmp	r3, r2
 80217c4:	d049      	beq.n	802185a <FINGER_DMA_IrqHandler+0x63e>
 80217c6:	4b90      	ldr	r3, [pc, #576]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 80217c8:	681b      	ldr	r3, [r3, #0]
 80217ca:	4a94      	ldr	r2, [pc, #592]	; (8021a1c <FINGER_DMA_IrqHandler+0x800>)
 80217cc:	4293      	cmp	r3, r2
 80217ce:	d042      	beq.n	8021856 <FINGER_DMA_IrqHandler+0x63a>
 80217d0:	4b8d      	ldr	r3, [pc, #564]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 80217d2:	681b      	ldr	r3, [r3, #0]
 80217d4:	4a92      	ldr	r2, [pc, #584]	; (8021a20 <FINGER_DMA_IrqHandler+0x804>)
 80217d6:	4293      	cmp	r3, r2
 80217d8:	d03a      	beq.n	8021850 <FINGER_DMA_IrqHandler+0x634>
 80217da:	4b8b      	ldr	r3, [pc, #556]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 80217dc:	681b      	ldr	r3, [r3, #0]
 80217de:	4a91      	ldr	r2, [pc, #580]	; (8021a24 <FINGER_DMA_IrqHandler+0x808>)
 80217e0:	4293      	cmp	r3, r2
 80217e2:	d032      	beq.n	802184a <FINGER_DMA_IrqHandler+0x62e>
 80217e4:	4b88      	ldr	r3, [pc, #544]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 80217e6:	681b      	ldr	r3, [r3, #0]
 80217e8:	4a8f      	ldr	r2, [pc, #572]	; (8021a28 <FINGER_DMA_IrqHandler+0x80c>)
 80217ea:	4293      	cmp	r3, r2
 80217ec:	d02a      	beq.n	8021844 <FINGER_DMA_IrqHandler+0x628>
 80217ee:	4b86      	ldr	r3, [pc, #536]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 80217f0:	681b      	ldr	r3, [r3, #0]
 80217f2:	4a8e      	ldr	r2, [pc, #568]	; (8021a2c <FINGER_DMA_IrqHandler+0x810>)
 80217f4:	4293      	cmp	r3, r2
 80217f6:	d022      	beq.n	802183e <FINGER_DMA_IrqHandler+0x622>
 80217f8:	4b83      	ldr	r3, [pc, #524]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 80217fa:	681b      	ldr	r3, [r3, #0]
 80217fc:	4a8c      	ldr	r2, [pc, #560]	; (8021a30 <FINGER_DMA_IrqHandler+0x814>)
 80217fe:	4293      	cmp	r3, r2
 8021800:	d01a      	beq.n	8021838 <FINGER_DMA_IrqHandler+0x61c>
 8021802:	4b81      	ldr	r3, [pc, #516]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 8021804:	681b      	ldr	r3, [r3, #0]
 8021806:	4a8b      	ldr	r2, [pc, #556]	; (8021a34 <FINGER_DMA_IrqHandler+0x818>)
 8021808:	4293      	cmp	r3, r2
 802180a:	d012      	beq.n	8021832 <FINGER_DMA_IrqHandler+0x616>
 802180c:	4b7e      	ldr	r3, [pc, #504]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 802180e:	681b      	ldr	r3, [r3, #0]
 8021810:	4a89      	ldr	r2, [pc, #548]	; (8021a38 <FINGER_DMA_IrqHandler+0x81c>)
 8021812:	4293      	cmp	r3, r2
 8021814:	d00a      	beq.n	802182c <FINGER_DMA_IrqHandler+0x610>
 8021816:	4b7c      	ldr	r3, [pc, #496]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 8021818:	681b      	ldr	r3, [r3, #0]
 802181a:	4a88      	ldr	r2, [pc, #544]	; (8021a3c <FINGER_DMA_IrqHandler+0x820>)
 802181c:	4293      	cmp	r3, r2
 802181e:	d102      	bne.n	8021826 <FINGER_DMA_IrqHandler+0x60a>
 8021820:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8021824:	e01e      	b.n	8021864 <FINGER_DMA_IrqHandler+0x648>
 8021826:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 802182a:	e01b      	b.n	8021864 <FINGER_DMA_IrqHandler+0x648>
 802182c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8021830:	e018      	b.n	8021864 <FINGER_DMA_IrqHandler+0x648>
 8021832:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8021836:	e015      	b.n	8021864 <FINGER_DMA_IrqHandler+0x648>
 8021838:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 802183c:	e012      	b.n	8021864 <FINGER_DMA_IrqHandler+0x648>
 802183e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8021842:	e00f      	b.n	8021864 <FINGER_DMA_IrqHandler+0x648>
 8021844:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8021848:	e00c      	b.n	8021864 <FINGER_DMA_IrqHandler+0x648>
 802184a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 802184e:	e009      	b.n	8021864 <FINGER_DMA_IrqHandler+0x648>
 8021850:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8021854:	e006      	b.n	8021864 <FINGER_DMA_IrqHandler+0x648>
 8021856:	2320      	movs	r3, #32
 8021858:	e004      	b.n	8021864 <FINGER_DMA_IrqHandler+0x648>
 802185a:	2320      	movs	r3, #32
 802185c:	e002      	b.n	8021864 <FINGER_DMA_IrqHandler+0x648>
 802185e:	2320      	movs	r3, #32
 8021860:	e000      	b.n	8021864 <FINGER_DMA_IrqHandler+0x648>
 8021862:	2320      	movs	r3, #32
 8021864:	4a76      	ldr	r2, [pc, #472]	; (8021a40 <FINGER_DMA_IrqHandler+0x824>)
 8021866:	60d3      	str	r3, [r2, #12]
 8021868:	e05f      	b.n	802192a <FINGER_DMA_IrqHandler+0x70e>
 802186a:	4b67      	ldr	r3, [pc, #412]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 802186c:	681b      	ldr	r3, [r3, #0]
 802186e:	4a68      	ldr	r2, [pc, #416]	; (8021a10 <FINGER_DMA_IrqHandler+0x7f4>)
 8021870:	4293      	cmp	r3, r2
 8021872:	d057      	beq.n	8021924 <FINGER_DMA_IrqHandler+0x708>
 8021874:	4b64      	ldr	r3, [pc, #400]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 8021876:	681b      	ldr	r3, [r3, #0]
 8021878:	4a66      	ldr	r2, [pc, #408]	; (8021a14 <FINGER_DMA_IrqHandler+0x7f8>)
 802187a:	4293      	cmp	r3, r2
 802187c:	d050      	beq.n	8021920 <FINGER_DMA_IrqHandler+0x704>
 802187e:	4b62      	ldr	r3, [pc, #392]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 8021880:	681b      	ldr	r3, [r3, #0]
 8021882:	4a65      	ldr	r2, [pc, #404]	; (8021a18 <FINGER_DMA_IrqHandler+0x7fc>)
 8021884:	4293      	cmp	r3, r2
 8021886:	d049      	beq.n	802191c <FINGER_DMA_IrqHandler+0x700>
 8021888:	4b5f      	ldr	r3, [pc, #380]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 802188a:	681b      	ldr	r3, [r3, #0]
 802188c:	4a63      	ldr	r2, [pc, #396]	; (8021a1c <FINGER_DMA_IrqHandler+0x800>)
 802188e:	4293      	cmp	r3, r2
 8021890:	d042      	beq.n	8021918 <FINGER_DMA_IrqHandler+0x6fc>
 8021892:	4b5d      	ldr	r3, [pc, #372]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 8021894:	681b      	ldr	r3, [r3, #0]
 8021896:	4a62      	ldr	r2, [pc, #392]	; (8021a20 <FINGER_DMA_IrqHandler+0x804>)
 8021898:	4293      	cmp	r3, r2
 802189a:	d03a      	beq.n	8021912 <FINGER_DMA_IrqHandler+0x6f6>
 802189c:	4b5a      	ldr	r3, [pc, #360]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 802189e:	681b      	ldr	r3, [r3, #0]
 80218a0:	4a60      	ldr	r2, [pc, #384]	; (8021a24 <FINGER_DMA_IrqHandler+0x808>)
 80218a2:	4293      	cmp	r3, r2
 80218a4:	d032      	beq.n	802190c <FINGER_DMA_IrqHandler+0x6f0>
 80218a6:	4b58      	ldr	r3, [pc, #352]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 80218a8:	681b      	ldr	r3, [r3, #0]
 80218aa:	4a5f      	ldr	r2, [pc, #380]	; (8021a28 <FINGER_DMA_IrqHandler+0x80c>)
 80218ac:	4293      	cmp	r3, r2
 80218ae:	d02a      	beq.n	8021906 <FINGER_DMA_IrqHandler+0x6ea>
 80218b0:	4b55      	ldr	r3, [pc, #340]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 80218b2:	681b      	ldr	r3, [r3, #0]
 80218b4:	4a5d      	ldr	r2, [pc, #372]	; (8021a2c <FINGER_DMA_IrqHandler+0x810>)
 80218b6:	4293      	cmp	r3, r2
 80218b8:	d022      	beq.n	8021900 <FINGER_DMA_IrqHandler+0x6e4>
 80218ba:	4b53      	ldr	r3, [pc, #332]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 80218bc:	681b      	ldr	r3, [r3, #0]
 80218be:	4a5c      	ldr	r2, [pc, #368]	; (8021a30 <FINGER_DMA_IrqHandler+0x814>)
 80218c0:	4293      	cmp	r3, r2
 80218c2:	d01a      	beq.n	80218fa <FINGER_DMA_IrqHandler+0x6de>
 80218c4:	4b50      	ldr	r3, [pc, #320]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 80218c6:	681b      	ldr	r3, [r3, #0]
 80218c8:	4a5a      	ldr	r2, [pc, #360]	; (8021a34 <FINGER_DMA_IrqHandler+0x818>)
 80218ca:	4293      	cmp	r3, r2
 80218cc:	d012      	beq.n	80218f4 <FINGER_DMA_IrqHandler+0x6d8>
 80218ce:	4b4e      	ldr	r3, [pc, #312]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 80218d0:	681b      	ldr	r3, [r3, #0]
 80218d2:	4a59      	ldr	r2, [pc, #356]	; (8021a38 <FINGER_DMA_IrqHandler+0x81c>)
 80218d4:	4293      	cmp	r3, r2
 80218d6:	d00a      	beq.n	80218ee <FINGER_DMA_IrqHandler+0x6d2>
 80218d8:	4b4b      	ldr	r3, [pc, #300]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 80218da:	681b      	ldr	r3, [r3, #0]
 80218dc:	4a57      	ldr	r2, [pc, #348]	; (8021a3c <FINGER_DMA_IrqHandler+0x820>)
 80218de:	4293      	cmp	r3, r2
 80218e0:	d102      	bne.n	80218e8 <FINGER_DMA_IrqHandler+0x6cc>
 80218e2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80218e6:	e01e      	b.n	8021926 <FINGER_DMA_IrqHandler+0x70a>
 80218e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80218ec:	e01b      	b.n	8021926 <FINGER_DMA_IrqHandler+0x70a>
 80218ee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80218f2:	e018      	b.n	8021926 <FINGER_DMA_IrqHandler+0x70a>
 80218f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80218f8:	e015      	b.n	8021926 <FINGER_DMA_IrqHandler+0x70a>
 80218fa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80218fe:	e012      	b.n	8021926 <FINGER_DMA_IrqHandler+0x70a>
 8021900:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8021904:	e00f      	b.n	8021926 <FINGER_DMA_IrqHandler+0x70a>
 8021906:	f44f 6300 	mov.w	r3, #2048	; 0x800
 802190a:	e00c      	b.n	8021926 <FINGER_DMA_IrqHandler+0x70a>
 802190c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8021910:	e009      	b.n	8021926 <FINGER_DMA_IrqHandler+0x70a>
 8021912:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8021916:	e006      	b.n	8021926 <FINGER_DMA_IrqHandler+0x70a>
 8021918:	2320      	movs	r3, #32
 802191a:	e004      	b.n	8021926 <FINGER_DMA_IrqHandler+0x70a>
 802191c:	2320      	movs	r3, #32
 802191e:	e002      	b.n	8021926 <FINGER_DMA_IrqHandler+0x70a>
 8021920:	2320      	movs	r3, #32
 8021922:	e000      	b.n	8021926 <FINGER_DMA_IrqHandler+0x70a>
 8021924:	2320      	movs	r3, #32
 8021926:	4a46      	ldr	r2, [pc, #280]	; (8021a40 <FINGER_DMA_IrqHandler+0x824>)
 8021928:	6093      	str	r3, [r2, #8]
        FINGER_Check_Buffer();
 802192a:	f000 fd93 	bl	8022454 <FINGER_Check_Buffer>
}
 802192e:	f000 bd45 	b.w	80223bc <FINGER_DMA_IrqHandler+0x11a0>
        __HAL_DMA_CLEAR_FLAG(&hdma_uart4_rx, __HAL_DMA_GET_TE_FLAG_INDEX(&hdma_uart4_rx));
 8021932:	4b35      	ldr	r3, [pc, #212]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 8021934:	681b      	ldr	r3, [r3, #0]
 8021936:	461a      	mov	r2, r3
 8021938:	4b42      	ldr	r3, [pc, #264]	; (8021a44 <FINGER_DMA_IrqHandler+0x828>)
 802193a:	429a      	cmp	r2, r3
 802193c:	f240 8084 	bls.w	8021a48 <FINGER_DMA_IrqHandler+0x82c>
 8021940:	4b31      	ldr	r3, [pc, #196]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 8021942:	681b      	ldr	r3, [r3, #0]
 8021944:	4a32      	ldr	r2, [pc, #200]	; (8021a10 <FINGER_DMA_IrqHandler+0x7f4>)
 8021946:	4293      	cmp	r3, r2
 8021948:	d057      	beq.n	80219fa <FINGER_DMA_IrqHandler+0x7de>
 802194a:	4b2f      	ldr	r3, [pc, #188]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 802194c:	681b      	ldr	r3, [r3, #0]
 802194e:	4a31      	ldr	r2, [pc, #196]	; (8021a14 <FINGER_DMA_IrqHandler+0x7f8>)
 8021950:	4293      	cmp	r3, r2
 8021952:	d050      	beq.n	80219f6 <FINGER_DMA_IrqHandler+0x7da>
 8021954:	4b2c      	ldr	r3, [pc, #176]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 8021956:	681b      	ldr	r3, [r3, #0]
 8021958:	4a2f      	ldr	r2, [pc, #188]	; (8021a18 <FINGER_DMA_IrqHandler+0x7fc>)
 802195a:	4293      	cmp	r3, r2
 802195c:	d049      	beq.n	80219f2 <FINGER_DMA_IrqHandler+0x7d6>
 802195e:	4b2a      	ldr	r3, [pc, #168]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 8021960:	681b      	ldr	r3, [r3, #0]
 8021962:	4a2e      	ldr	r2, [pc, #184]	; (8021a1c <FINGER_DMA_IrqHandler+0x800>)
 8021964:	4293      	cmp	r3, r2
 8021966:	d042      	beq.n	80219ee <FINGER_DMA_IrqHandler+0x7d2>
 8021968:	4b27      	ldr	r3, [pc, #156]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 802196a:	681b      	ldr	r3, [r3, #0]
 802196c:	4a2c      	ldr	r2, [pc, #176]	; (8021a20 <FINGER_DMA_IrqHandler+0x804>)
 802196e:	4293      	cmp	r3, r2
 8021970:	d03a      	beq.n	80219e8 <FINGER_DMA_IrqHandler+0x7cc>
 8021972:	4b25      	ldr	r3, [pc, #148]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 8021974:	681b      	ldr	r3, [r3, #0]
 8021976:	4a2b      	ldr	r2, [pc, #172]	; (8021a24 <FINGER_DMA_IrqHandler+0x808>)
 8021978:	4293      	cmp	r3, r2
 802197a:	d032      	beq.n	80219e2 <FINGER_DMA_IrqHandler+0x7c6>
 802197c:	4b22      	ldr	r3, [pc, #136]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 802197e:	681b      	ldr	r3, [r3, #0]
 8021980:	4a29      	ldr	r2, [pc, #164]	; (8021a28 <FINGER_DMA_IrqHandler+0x80c>)
 8021982:	4293      	cmp	r3, r2
 8021984:	d02a      	beq.n	80219dc <FINGER_DMA_IrqHandler+0x7c0>
 8021986:	4b20      	ldr	r3, [pc, #128]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 8021988:	681b      	ldr	r3, [r3, #0]
 802198a:	4a28      	ldr	r2, [pc, #160]	; (8021a2c <FINGER_DMA_IrqHandler+0x810>)
 802198c:	4293      	cmp	r3, r2
 802198e:	d022      	beq.n	80219d6 <FINGER_DMA_IrqHandler+0x7ba>
 8021990:	4b1d      	ldr	r3, [pc, #116]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 8021992:	681b      	ldr	r3, [r3, #0]
 8021994:	4a26      	ldr	r2, [pc, #152]	; (8021a30 <FINGER_DMA_IrqHandler+0x814>)
 8021996:	4293      	cmp	r3, r2
 8021998:	d01a      	beq.n	80219d0 <FINGER_DMA_IrqHandler+0x7b4>
 802199a:	4b1b      	ldr	r3, [pc, #108]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 802199c:	681b      	ldr	r3, [r3, #0]
 802199e:	4a25      	ldr	r2, [pc, #148]	; (8021a34 <FINGER_DMA_IrqHandler+0x818>)
 80219a0:	4293      	cmp	r3, r2
 80219a2:	d012      	beq.n	80219ca <FINGER_DMA_IrqHandler+0x7ae>
 80219a4:	4b18      	ldr	r3, [pc, #96]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 80219a6:	681b      	ldr	r3, [r3, #0]
 80219a8:	4a23      	ldr	r2, [pc, #140]	; (8021a38 <FINGER_DMA_IrqHandler+0x81c>)
 80219aa:	4293      	cmp	r3, r2
 80219ac:	d00a      	beq.n	80219c4 <FINGER_DMA_IrqHandler+0x7a8>
 80219ae:	4b16      	ldr	r3, [pc, #88]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 80219b0:	681b      	ldr	r3, [r3, #0]
 80219b2:	4a22      	ldr	r2, [pc, #136]	; (8021a3c <FINGER_DMA_IrqHandler+0x820>)
 80219b4:	4293      	cmp	r3, r2
 80219b6:	d102      	bne.n	80219be <FINGER_DMA_IrqHandler+0x7a2>
 80219b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80219bc:	e01e      	b.n	80219fc <FINGER_DMA_IrqHandler+0x7e0>
 80219be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80219c2:	e01b      	b.n	80219fc <FINGER_DMA_IrqHandler+0x7e0>
 80219c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80219c8:	e018      	b.n	80219fc <FINGER_DMA_IrqHandler+0x7e0>
 80219ca:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80219ce:	e015      	b.n	80219fc <FINGER_DMA_IrqHandler+0x7e0>
 80219d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80219d4:	e012      	b.n	80219fc <FINGER_DMA_IrqHandler+0x7e0>
 80219d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80219da:	e00f      	b.n	80219fc <FINGER_DMA_IrqHandler+0x7e0>
 80219dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80219e0:	e00c      	b.n	80219fc <FINGER_DMA_IrqHandler+0x7e0>
 80219e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80219e6:	e009      	b.n	80219fc <FINGER_DMA_IrqHandler+0x7e0>
 80219e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80219ec:	e006      	b.n	80219fc <FINGER_DMA_IrqHandler+0x7e0>
 80219ee:	2308      	movs	r3, #8
 80219f0:	e004      	b.n	80219fc <FINGER_DMA_IrqHandler+0x7e0>
 80219f2:	2308      	movs	r3, #8
 80219f4:	e002      	b.n	80219fc <FINGER_DMA_IrqHandler+0x7e0>
 80219f6:	2308      	movs	r3, #8
 80219f8:	e000      	b.n	80219fc <FINGER_DMA_IrqHandler+0x7e0>
 80219fa:	2308      	movs	r3, #8
 80219fc:	4a01      	ldr	r2, [pc, #4]	; (8021a04 <FINGER_DMA_IrqHandler+0x7e8>)
 80219fe:	60d3      	str	r3, [r2, #12]
 8021a00:	e173      	b.n	8021cea <FINGER_DMA_IrqHandler+0xace>
 8021a02:	bf00      	nop
 8021a04:	40026400 	.word	0x40026400
 8021a08:	20008464 	.word	0x20008464
 8021a0c:	40026058 	.word	0x40026058
 8021a10:	40026010 	.word	0x40026010
 8021a14:	40026410 	.word	0x40026410
 8021a18:	40026070 	.word	0x40026070
 8021a1c:	40026470 	.word	0x40026470
 8021a20:	40026028 	.word	0x40026028
 8021a24:	40026428 	.word	0x40026428
 8021a28:	40026088 	.word	0x40026088
 8021a2c:	40026488 	.word	0x40026488
 8021a30:	40026040 	.word	0x40026040
 8021a34:	40026440 	.word	0x40026440
 8021a38:	400260a0 	.word	0x400260a0
 8021a3c:	400264a0 	.word	0x400264a0
 8021a40:	40026000 	.word	0x40026000
 8021a44:	40026458 	.word	0x40026458
 8021a48:	4b95      	ldr	r3, [pc, #596]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021a4a:	681b      	ldr	r3, [r3, #0]
 8021a4c:	461a      	mov	r2, r3
 8021a4e:	4b95      	ldr	r3, [pc, #596]	; (8021ca4 <FINGER_DMA_IrqHandler+0xa88>)
 8021a50:	429a      	cmp	r2, r3
 8021a52:	d960      	bls.n	8021b16 <FINGER_DMA_IrqHandler+0x8fa>
 8021a54:	4b92      	ldr	r3, [pc, #584]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021a56:	681b      	ldr	r3, [r3, #0]
 8021a58:	4a93      	ldr	r2, [pc, #588]	; (8021ca8 <FINGER_DMA_IrqHandler+0xa8c>)
 8021a5a:	4293      	cmp	r3, r2
 8021a5c:	d057      	beq.n	8021b0e <FINGER_DMA_IrqHandler+0x8f2>
 8021a5e:	4b90      	ldr	r3, [pc, #576]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021a60:	681b      	ldr	r3, [r3, #0]
 8021a62:	4a92      	ldr	r2, [pc, #584]	; (8021cac <FINGER_DMA_IrqHandler+0xa90>)
 8021a64:	4293      	cmp	r3, r2
 8021a66:	d050      	beq.n	8021b0a <FINGER_DMA_IrqHandler+0x8ee>
 8021a68:	4b8d      	ldr	r3, [pc, #564]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021a6a:	681b      	ldr	r3, [r3, #0]
 8021a6c:	4a90      	ldr	r2, [pc, #576]	; (8021cb0 <FINGER_DMA_IrqHandler+0xa94>)
 8021a6e:	4293      	cmp	r3, r2
 8021a70:	d049      	beq.n	8021b06 <FINGER_DMA_IrqHandler+0x8ea>
 8021a72:	4b8b      	ldr	r3, [pc, #556]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021a74:	681b      	ldr	r3, [r3, #0]
 8021a76:	4a8f      	ldr	r2, [pc, #572]	; (8021cb4 <FINGER_DMA_IrqHandler+0xa98>)
 8021a78:	4293      	cmp	r3, r2
 8021a7a:	d042      	beq.n	8021b02 <FINGER_DMA_IrqHandler+0x8e6>
 8021a7c:	4b88      	ldr	r3, [pc, #544]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021a7e:	681b      	ldr	r3, [r3, #0]
 8021a80:	4a8d      	ldr	r2, [pc, #564]	; (8021cb8 <FINGER_DMA_IrqHandler+0xa9c>)
 8021a82:	4293      	cmp	r3, r2
 8021a84:	d03a      	beq.n	8021afc <FINGER_DMA_IrqHandler+0x8e0>
 8021a86:	4b86      	ldr	r3, [pc, #536]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021a88:	681b      	ldr	r3, [r3, #0]
 8021a8a:	4a8c      	ldr	r2, [pc, #560]	; (8021cbc <FINGER_DMA_IrqHandler+0xaa0>)
 8021a8c:	4293      	cmp	r3, r2
 8021a8e:	d032      	beq.n	8021af6 <FINGER_DMA_IrqHandler+0x8da>
 8021a90:	4b83      	ldr	r3, [pc, #524]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021a92:	681b      	ldr	r3, [r3, #0]
 8021a94:	4a8a      	ldr	r2, [pc, #552]	; (8021cc0 <FINGER_DMA_IrqHandler+0xaa4>)
 8021a96:	4293      	cmp	r3, r2
 8021a98:	d02a      	beq.n	8021af0 <FINGER_DMA_IrqHandler+0x8d4>
 8021a9a:	4b81      	ldr	r3, [pc, #516]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021a9c:	681b      	ldr	r3, [r3, #0]
 8021a9e:	4a89      	ldr	r2, [pc, #548]	; (8021cc4 <FINGER_DMA_IrqHandler+0xaa8>)
 8021aa0:	4293      	cmp	r3, r2
 8021aa2:	d022      	beq.n	8021aea <FINGER_DMA_IrqHandler+0x8ce>
 8021aa4:	4b7e      	ldr	r3, [pc, #504]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021aa6:	681b      	ldr	r3, [r3, #0]
 8021aa8:	4a87      	ldr	r2, [pc, #540]	; (8021cc8 <FINGER_DMA_IrqHandler+0xaac>)
 8021aaa:	4293      	cmp	r3, r2
 8021aac:	d01a      	beq.n	8021ae4 <FINGER_DMA_IrqHandler+0x8c8>
 8021aae:	4b7c      	ldr	r3, [pc, #496]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021ab0:	681b      	ldr	r3, [r3, #0]
 8021ab2:	4a86      	ldr	r2, [pc, #536]	; (8021ccc <FINGER_DMA_IrqHandler+0xab0>)
 8021ab4:	4293      	cmp	r3, r2
 8021ab6:	d012      	beq.n	8021ade <FINGER_DMA_IrqHandler+0x8c2>
 8021ab8:	4b79      	ldr	r3, [pc, #484]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021aba:	681b      	ldr	r3, [r3, #0]
 8021abc:	4a84      	ldr	r2, [pc, #528]	; (8021cd0 <FINGER_DMA_IrqHandler+0xab4>)
 8021abe:	4293      	cmp	r3, r2
 8021ac0:	d00a      	beq.n	8021ad8 <FINGER_DMA_IrqHandler+0x8bc>
 8021ac2:	4b77      	ldr	r3, [pc, #476]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021ac4:	681b      	ldr	r3, [r3, #0]
 8021ac6:	4a83      	ldr	r2, [pc, #524]	; (8021cd4 <FINGER_DMA_IrqHandler+0xab8>)
 8021ac8:	4293      	cmp	r3, r2
 8021aca:	d102      	bne.n	8021ad2 <FINGER_DMA_IrqHandler+0x8b6>
 8021acc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8021ad0:	e01e      	b.n	8021b10 <FINGER_DMA_IrqHandler+0x8f4>
 8021ad2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8021ad6:	e01b      	b.n	8021b10 <FINGER_DMA_IrqHandler+0x8f4>
 8021ad8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8021adc:	e018      	b.n	8021b10 <FINGER_DMA_IrqHandler+0x8f4>
 8021ade:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8021ae2:	e015      	b.n	8021b10 <FINGER_DMA_IrqHandler+0x8f4>
 8021ae4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8021ae8:	e012      	b.n	8021b10 <FINGER_DMA_IrqHandler+0x8f4>
 8021aea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8021aee:	e00f      	b.n	8021b10 <FINGER_DMA_IrqHandler+0x8f4>
 8021af0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8021af4:	e00c      	b.n	8021b10 <FINGER_DMA_IrqHandler+0x8f4>
 8021af6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8021afa:	e009      	b.n	8021b10 <FINGER_DMA_IrqHandler+0x8f4>
 8021afc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8021b00:	e006      	b.n	8021b10 <FINGER_DMA_IrqHandler+0x8f4>
 8021b02:	2308      	movs	r3, #8
 8021b04:	e004      	b.n	8021b10 <FINGER_DMA_IrqHandler+0x8f4>
 8021b06:	2308      	movs	r3, #8
 8021b08:	e002      	b.n	8021b10 <FINGER_DMA_IrqHandler+0x8f4>
 8021b0a:	2308      	movs	r3, #8
 8021b0c:	e000      	b.n	8021b10 <FINGER_DMA_IrqHandler+0x8f4>
 8021b0e:	2308      	movs	r3, #8
 8021b10:	4a71      	ldr	r2, [pc, #452]	; (8021cd8 <FINGER_DMA_IrqHandler+0xabc>)
 8021b12:	6093      	str	r3, [r2, #8]
 8021b14:	e0e9      	b.n	8021cea <FINGER_DMA_IrqHandler+0xace>
 8021b16:	4b62      	ldr	r3, [pc, #392]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021b18:	681b      	ldr	r3, [r3, #0]
 8021b1a:	461a      	mov	r2, r3
 8021b1c:	4b6f      	ldr	r3, [pc, #444]	; (8021cdc <FINGER_DMA_IrqHandler+0xac0>)
 8021b1e:	429a      	cmp	r2, r3
 8021b20:	d960      	bls.n	8021be4 <FINGER_DMA_IrqHandler+0x9c8>
 8021b22:	4b5f      	ldr	r3, [pc, #380]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021b24:	681b      	ldr	r3, [r3, #0]
 8021b26:	4a60      	ldr	r2, [pc, #384]	; (8021ca8 <FINGER_DMA_IrqHandler+0xa8c>)
 8021b28:	4293      	cmp	r3, r2
 8021b2a:	d057      	beq.n	8021bdc <FINGER_DMA_IrqHandler+0x9c0>
 8021b2c:	4b5c      	ldr	r3, [pc, #368]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021b2e:	681b      	ldr	r3, [r3, #0]
 8021b30:	4a5e      	ldr	r2, [pc, #376]	; (8021cac <FINGER_DMA_IrqHandler+0xa90>)
 8021b32:	4293      	cmp	r3, r2
 8021b34:	d050      	beq.n	8021bd8 <FINGER_DMA_IrqHandler+0x9bc>
 8021b36:	4b5a      	ldr	r3, [pc, #360]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021b38:	681b      	ldr	r3, [r3, #0]
 8021b3a:	4a5d      	ldr	r2, [pc, #372]	; (8021cb0 <FINGER_DMA_IrqHandler+0xa94>)
 8021b3c:	4293      	cmp	r3, r2
 8021b3e:	d049      	beq.n	8021bd4 <FINGER_DMA_IrqHandler+0x9b8>
 8021b40:	4b57      	ldr	r3, [pc, #348]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021b42:	681b      	ldr	r3, [r3, #0]
 8021b44:	4a5b      	ldr	r2, [pc, #364]	; (8021cb4 <FINGER_DMA_IrqHandler+0xa98>)
 8021b46:	4293      	cmp	r3, r2
 8021b48:	d042      	beq.n	8021bd0 <FINGER_DMA_IrqHandler+0x9b4>
 8021b4a:	4b55      	ldr	r3, [pc, #340]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021b4c:	681b      	ldr	r3, [r3, #0]
 8021b4e:	4a5a      	ldr	r2, [pc, #360]	; (8021cb8 <FINGER_DMA_IrqHandler+0xa9c>)
 8021b50:	4293      	cmp	r3, r2
 8021b52:	d03a      	beq.n	8021bca <FINGER_DMA_IrqHandler+0x9ae>
 8021b54:	4b52      	ldr	r3, [pc, #328]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021b56:	681b      	ldr	r3, [r3, #0]
 8021b58:	4a58      	ldr	r2, [pc, #352]	; (8021cbc <FINGER_DMA_IrqHandler+0xaa0>)
 8021b5a:	4293      	cmp	r3, r2
 8021b5c:	d032      	beq.n	8021bc4 <FINGER_DMA_IrqHandler+0x9a8>
 8021b5e:	4b50      	ldr	r3, [pc, #320]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021b60:	681b      	ldr	r3, [r3, #0]
 8021b62:	4a57      	ldr	r2, [pc, #348]	; (8021cc0 <FINGER_DMA_IrqHandler+0xaa4>)
 8021b64:	4293      	cmp	r3, r2
 8021b66:	d02a      	beq.n	8021bbe <FINGER_DMA_IrqHandler+0x9a2>
 8021b68:	4b4d      	ldr	r3, [pc, #308]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021b6a:	681b      	ldr	r3, [r3, #0]
 8021b6c:	4a55      	ldr	r2, [pc, #340]	; (8021cc4 <FINGER_DMA_IrqHandler+0xaa8>)
 8021b6e:	4293      	cmp	r3, r2
 8021b70:	d022      	beq.n	8021bb8 <FINGER_DMA_IrqHandler+0x99c>
 8021b72:	4b4b      	ldr	r3, [pc, #300]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021b74:	681b      	ldr	r3, [r3, #0]
 8021b76:	4a54      	ldr	r2, [pc, #336]	; (8021cc8 <FINGER_DMA_IrqHandler+0xaac>)
 8021b78:	4293      	cmp	r3, r2
 8021b7a:	d01a      	beq.n	8021bb2 <FINGER_DMA_IrqHandler+0x996>
 8021b7c:	4b48      	ldr	r3, [pc, #288]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021b7e:	681b      	ldr	r3, [r3, #0]
 8021b80:	4a52      	ldr	r2, [pc, #328]	; (8021ccc <FINGER_DMA_IrqHandler+0xab0>)
 8021b82:	4293      	cmp	r3, r2
 8021b84:	d012      	beq.n	8021bac <FINGER_DMA_IrqHandler+0x990>
 8021b86:	4b46      	ldr	r3, [pc, #280]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021b88:	681b      	ldr	r3, [r3, #0]
 8021b8a:	4a51      	ldr	r2, [pc, #324]	; (8021cd0 <FINGER_DMA_IrqHandler+0xab4>)
 8021b8c:	4293      	cmp	r3, r2
 8021b8e:	d00a      	beq.n	8021ba6 <FINGER_DMA_IrqHandler+0x98a>
 8021b90:	4b43      	ldr	r3, [pc, #268]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021b92:	681b      	ldr	r3, [r3, #0]
 8021b94:	4a4f      	ldr	r2, [pc, #316]	; (8021cd4 <FINGER_DMA_IrqHandler+0xab8>)
 8021b96:	4293      	cmp	r3, r2
 8021b98:	d102      	bne.n	8021ba0 <FINGER_DMA_IrqHandler+0x984>
 8021b9a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8021b9e:	e01e      	b.n	8021bde <FINGER_DMA_IrqHandler+0x9c2>
 8021ba0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8021ba4:	e01b      	b.n	8021bde <FINGER_DMA_IrqHandler+0x9c2>
 8021ba6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8021baa:	e018      	b.n	8021bde <FINGER_DMA_IrqHandler+0x9c2>
 8021bac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8021bb0:	e015      	b.n	8021bde <FINGER_DMA_IrqHandler+0x9c2>
 8021bb2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8021bb6:	e012      	b.n	8021bde <FINGER_DMA_IrqHandler+0x9c2>
 8021bb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8021bbc:	e00f      	b.n	8021bde <FINGER_DMA_IrqHandler+0x9c2>
 8021bbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8021bc2:	e00c      	b.n	8021bde <FINGER_DMA_IrqHandler+0x9c2>
 8021bc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8021bc8:	e009      	b.n	8021bde <FINGER_DMA_IrqHandler+0x9c2>
 8021bca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8021bce:	e006      	b.n	8021bde <FINGER_DMA_IrqHandler+0x9c2>
 8021bd0:	2308      	movs	r3, #8
 8021bd2:	e004      	b.n	8021bde <FINGER_DMA_IrqHandler+0x9c2>
 8021bd4:	2308      	movs	r3, #8
 8021bd6:	e002      	b.n	8021bde <FINGER_DMA_IrqHandler+0x9c2>
 8021bd8:	2308      	movs	r3, #8
 8021bda:	e000      	b.n	8021bde <FINGER_DMA_IrqHandler+0x9c2>
 8021bdc:	2308      	movs	r3, #8
 8021bde:	4a40      	ldr	r2, [pc, #256]	; (8021ce0 <FINGER_DMA_IrqHandler+0xac4>)
 8021be0:	60d3      	str	r3, [r2, #12]
 8021be2:	e082      	b.n	8021cea <FINGER_DMA_IrqHandler+0xace>
 8021be4:	4b2e      	ldr	r3, [pc, #184]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021be6:	681b      	ldr	r3, [r3, #0]
 8021be8:	4a2f      	ldr	r2, [pc, #188]	; (8021ca8 <FINGER_DMA_IrqHandler+0xa8c>)
 8021bea:	4293      	cmp	r3, r2
 8021bec:	d07a      	beq.n	8021ce4 <FINGER_DMA_IrqHandler+0xac8>
 8021bee:	4b2c      	ldr	r3, [pc, #176]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021bf0:	681b      	ldr	r3, [r3, #0]
 8021bf2:	4a2e      	ldr	r2, [pc, #184]	; (8021cac <FINGER_DMA_IrqHandler+0xa90>)
 8021bf4:	4293      	cmp	r3, r2
 8021bf6:	d050      	beq.n	8021c9a <FINGER_DMA_IrqHandler+0xa7e>
 8021bf8:	4b29      	ldr	r3, [pc, #164]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021bfa:	681b      	ldr	r3, [r3, #0]
 8021bfc:	4a2c      	ldr	r2, [pc, #176]	; (8021cb0 <FINGER_DMA_IrqHandler+0xa94>)
 8021bfe:	4293      	cmp	r3, r2
 8021c00:	d049      	beq.n	8021c96 <FINGER_DMA_IrqHandler+0xa7a>
 8021c02:	4b27      	ldr	r3, [pc, #156]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021c04:	681b      	ldr	r3, [r3, #0]
 8021c06:	4a2b      	ldr	r2, [pc, #172]	; (8021cb4 <FINGER_DMA_IrqHandler+0xa98>)
 8021c08:	4293      	cmp	r3, r2
 8021c0a:	d042      	beq.n	8021c92 <FINGER_DMA_IrqHandler+0xa76>
 8021c0c:	4b24      	ldr	r3, [pc, #144]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021c0e:	681b      	ldr	r3, [r3, #0]
 8021c10:	4a29      	ldr	r2, [pc, #164]	; (8021cb8 <FINGER_DMA_IrqHandler+0xa9c>)
 8021c12:	4293      	cmp	r3, r2
 8021c14:	d03a      	beq.n	8021c8c <FINGER_DMA_IrqHandler+0xa70>
 8021c16:	4b22      	ldr	r3, [pc, #136]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021c18:	681b      	ldr	r3, [r3, #0]
 8021c1a:	4a28      	ldr	r2, [pc, #160]	; (8021cbc <FINGER_DMA_IrqHandler+0xaa0>)
 8021c1c:	4293      	cmp	r3, r2
 8021c1e:	d032      	beq.n	8021c86 <FINGER_DMA_IrqHandler+0xa6a>
 8021c20:	4b1f      	ldr	r3, [pc, #124]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021c22:	681b      	ldr	r3, [r3, #0]
 8021c24:	4a26      	ldr	r2, [pc, #152]	; (8021cc0 <FINGER_DMA_IrqHandler+0xaa4>)
 8021c26:	4293      	cmp	r3, r2
 8021c28:	d02a      	beq.n	8021c80 <FINGER_DMA_IrqHandler+0xa64>
 8021c2a:	4b1d      	ldr	r3, [pc, #116]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021c2c:	681b      	ldr	r3, [r3, #0]
 8021c2e:	4a25      	ldr	r2, [pc, #148]	; (8021cc4 <FINGER_DMA_IrqHandler+0xaa8>)
 8021c30:	4293      	cmp	r3, r2
 8021c32:	d022      	beq.n	8021c7a <FINGER_DMA_IrqHandler+0xa5e>
 8021c34:	4b1a      	ldr	r3, [pc, #104]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021c36:	681b      	ldr	r3, [r3, #0]
 8021c38:	4a23      	ldr	r2, [pc, #140]	; (8021cc8 <FINGER_DMA_IrqHandler+0xaac>)
 8021c3a:	4293      	cmp	r3, r2
 8021c3c:	d01a      	beq.n	8021c74 <FINGER_DMA_IrqHandler+0xa58>
 8021c3e:	4b18      	ldr	r3, [pc, #96]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021c40:	681b      	ldr	r3, [r3, #0]
 8021c42:	4a22      	ldr	r2, [pc, #136]	; (8021ccc <FINGER_DMA_IrqHandler+0xab0>)
 8021c44:	4293      	cmp	r3, r2
 8021c46:	d012      	beq.n	8021c6e <FINGER_DMA_IrqHandler+0xa52>
 8021c48:	4b15      	ldr	r3, [pc, #84]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021c4a:	681b      	ldr	r3, [r3, #0]
 8021c4c:	4a20      	ldr	r2, [pc, #128]	; (8021cd0 <FINGER_DMA_IrqHandler+0xab4>)
 8021c4e:	4293      	cmp	r3, r2
 8021c50:	d00a      	beq.n	8021c68 <FINGER_DMA_IrqHandler+0xa4c>
 8021c52:	4b13      	ldr	r3, [pc, #76]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021c54:	681b      	ldr	r3, [r3, #0]
 8021c56:	4a1f      	ldr	r2, [pc, #124]	; (8021cd4 <FINGER_DMA_IrqHandler+0xab8>)
 8021c58:	4293      	cmp	r3, r2
 8021c5a:	d102      	bne.n	8021c62 <FINGER_DMA_IrqHandler+0xa46>
 8021c5c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8021c60:	e041      	b.n	8021ce6 <FINGER_DMA_IrqHandler+0xaca>
 8021c62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8021c66:	e03e      	b.n	8021ce6 <FINGER_DMA_IrqHandler+0xaca>
 8021c68:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8021c6c:	e03b      	b.n	8021ce6 <FINGER_DMA_IrqHandler+0xaca>
 8021c6e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8021c72:	e038      	b.n	8021ce6 <FINGER_DMA_IrqHandler+0xaca>
 8021c74:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8021c78:	e035      	b.n	8021ce6 <FINGER_DMA_IrqHandler+0xaca>
 8021c7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8021c7e:	e032      	b.n	8021ce6 <FINGER_DMA_IrqHandler+0xaca>
 8021c80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8021c84:	e02f      	b.n	8021ce6 <FINGER_DMA_IrqHandler+0xaca>
 8021c86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8021c8a:	e02c      	b.n	8021ce6 <FINGER_DMA_IrqHandler+0xaca>
 8021c8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8021c90:	e029      	b.n	8021ce6 <FINGER_DMA_IrqHandler+0xaca>
 8021c92:	2308      	movs	r3, #8
 8021c94:	e027      	b.n	8021ce6 <FINGER_DMA_IrqHandler+0xaca>
 8021c96:	2308      	movs	r3, #8
 8021c98:	e025      	b.n	8021ce6 <FINGER_DMA_IrqHandler+0xaca>
 8021c9a:	2308      	movs	r3, #8
 8021c9c:	e023      	b.n	8021ce6 <FINGER_DMA_IrqHandler+0xaca>
 8021c9e:	bf00      	nop
 8021ca0:	20008464 	.word	0x20008464
 8021ca4:	400260b8 	.word	0x400260b8
 8021ca8:	40026010 	.word	0x40026010
 8021cac:	40026410 	.word	0x40026410
 8021cb0:	40026070 	.word	0x40026070
 8021cb4:	40026470 	.word	0x40026470
 8021cb8:	40026028 	.word	0x40026028
 8021cbc:	40026428 	.word	0x40026428
 8021cc0:	40026088 	.word	0x40026088
 8021cc4:	40026488 	.word	0x40026488
 8021cc8:	40026040 	.word	0x40026040
 8021ccc:	40026440 	.word	0x40026440
 8021cd0:	400260a0 	.word	0x400260a0
 8021cd4:	400264a0 	.word	0x400264a0
 8021cd8:	40026400 	.word	0x40026400
 8021cdc:	40026058 	.word	0x40026058
 8021ce0:	40026000 	.word	0x40026000
 8021ce4:	2308      	movs	r3, #8
 8021ce6:	4a96      	ldr	r2, [pc, #600]	; (8021f40 <FINGER_DMA_IrqHandler+0xd24>)
 8021ce8:	6093      	str	r3, [r2, #8]
        __HAL_DMA_CLEAR_FLAG(&hdma_uart4_rx, __HAL_DMA_GET_FE_FLAG_INDEX(&hdma_uart4_rx));
 8021cea:	4b96      	ldr	r3, [pc, #600]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021cec:	681b      	ldr	r3, [r3, #0]
 8021cee:	461a      	mov	r2, r3
 8021cf0:	4b95      	ldr	r3, [pc, #596]	; (8021f48 <FINGER_DMA_IrqHandler+0xd2c>)
 8021cf2:	429a      	cmp	r2, r3
 8021cf4:	d95c      	bls.n	8021db0 <FINGER_DMA_IrqHandler+0xb94>
 8021cf6:	4b93      	ldr	r3, [pc, #588]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021cf8:	681b      	ldr	r3, [r3, #0]
 8021cfa:	4a94      	ldr	r2, [pc, #592]	; (8021f4c <FINGER_DMA_IrqHandler+0xd30>)
 8021cfc:	4293      	cmp	r3, r2
 8021cfe:	d053      	beq.n	8021da8 <FINGER_DMA_IrqHandler+0xb8c>
 8021d00:	4b90      	ldr	r3, [pc, #576]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021d02:	681b      	ldr	r3, [r3, #0]
 8021d04:	4a92      	ldr	r2, [pc, #584]	; (8021f50 <FINGER_DMA_IrqHandler+0xd34>)
 8021d06:	4293      	cmp	r3, r2
 8021d08:	d04c      	beq.n	8021da4 <FINGER_DMA_IrqHandler+0xb88>
 8021d0a:	4b8e      	ldr	r3, [pc, #568]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021d0c:	681b      	ldr	r3, [r3, #0]
 8021d0e:	4a91      	ldr	r2, [pc, #580]	; (8021f54 <FINGER_DMA_IrqHandler+0xd38>)
 8021d10:	4293      	cmp	r3, r2
 8021d12:	d045      	beq.n	8021da0 <FINGER_DMA_IrqHandler+0xb84>
 8021d14:	4b8b      	ldr	r3, [pc, #556]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021d16:	681b      	ldr	r3, [r3, #0]
 8021d18:	4a8f      	ldr	r2, [pc, #572]	; (8021f58 <FINGER_DMA_IrqHandler+0xd3c>)
 8021d1a:	4293      	cmp	r3, r2
 8021d1c:	d03e      	beq.n	8021d9c <FINGER_DMA_IrqHandler+0xb80>
 8021d1e:	4b89      	ldr	r3, [pc, #548]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021d20:	681b      	ldr	r3, [r3, #0]
 8021d22:	4a8e      	ldr	r2, [pc, #568]	; (8021f5c <FINGER_DMA_IrqHandler+0xd40>)
 8021d24:	4293      	cmp	r3, r2
 8021d26:	d037      	beq.n	8021d98 <FINGER_DMA_IrqHandler+0xb7c>
 8021d28:	4b86      	ldr	r3, [pc, #536]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021d2a:	681b      	ldr	r3, [r3, #0]
 8021d2c:	4a8c      	ldr	r2, [pc, #560]	; (8021f60 <FINGER_DMA_IrqHandler+0xd44>)
 8021d2e:	4293      	cmp	r3, r2
 8021d30:	d030      	beq.n	8021d94 <FINGER_DMA_IrqHandler+0xb78>
 8021d32:	4b84      	ldr	r3, [pc, #528]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021d34:	681b      	ldr	r3, [r3, #0]
 8021d36:	4a8b      	ldr	r2, [pc, #556]	; (8021f64 <FINGER_DMA_IrqHandler+0xd48>)
 8021d38:	4293      	cmp	r3, r2
 8021d3a:	d029      	beq.n	8021d90 <FINGER_DMA_IrqHandler+0xb74>
 8021d3c:	4b81      	ldr	r3, [pc, #516]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021d3e:	681b      	ldr	r3, [r3, #0]
 8021d40:	4a89      	ldr	r2, [pc, #548]	; (8021f68 <FINGER_DMA_IrqHandler+0xd4c>)
 8021d42:	4293      	cmp	r3, r2
 8021d44:	d022      	beq.n	8021d8c <FINGER_DMA_IrqHandler+0xb70>
 8021d46:	4b7f      	ldr	r3, [pc, #508]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021d48:	681b      	ldr	r3, [r3, #0]
 8021d4a:	4a88      	ldr	r2, [pc, #544]	; (8021f6c <FINGER_DMA_IrqHandler+0xd50>)
 8021d4c:	4293      	cmp	r3, r2
 8021d4e:	d01a      	beq.n	8021d86 <FINGER_DMA_IrqHandler+0xb6a>
 8021d50:	4b7c      	ldr	r3, [pc, #496]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021d52:	681b      	ldr	r3, [r3, #0]
 8021d54:	4a86      	ldr	r2, [pc, #536]	; (8021f70 <FINGER_DMA_IrqHandler+0xd54>)
 8021d56:	4293      	cmp	r3, r2
 8021d58:	d012      	beq.n	8021d80 <FINGER_DMA_IrqHandler+0xb64>
 8021d5a:	4b7a      	ldr	r3, [pc, #488]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021d5c:	681b      	ldr	r3, [r3, #0]
 8021d5e:	4a85      	ldr	r2, [pc, #532]	; (8021f74 <FINGER_DMA_IrqHandler+0xd58>)
 8021d60:	4293      	cmp	r3, r2
 8021d62:	d00a      	beq.n	8021d7a <FINGER_DMA_IrqHandler+0xb5e>
 8021d64:	4b77      	ldr	r3, [pc, #476]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021d66:	681b      	ldr	r3, [r3, #0]
 8021d68:	4a83      	ldr	r2, [pc, #524]	; (8021f78 <FINGER_DMA_IrqHandler+0xd5c>)
 8021d6a:	4293      	cmp	r3, r2
 8021d6c:	d102      	bne.n	8021d74 <FINGER_DMA_IrqHandler+0xb58>
 8021d6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8021d72:	e01a      	b.n	8021daa <FINGER_DMA_IrqHandler+0xb8e>
 8021d74:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8021d78:	e017      	b.n	8021daa <FINGER_DMA_IrqHandler+0xb8e>
 8021d7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8021d7e:	e014      	b.n	8021daa <FINGER_DMA_IrqHandler+0xb8e>
 8021d80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8021d84:	e011      	b.n	8021daa <FINGER_DMA_IrqHandler+0xb8e>
 8021d86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8021d8a:	e00e      	b.n	8021daa <FINGER_DMA_IrqHandler+0xb8e>
 8021d8c:	2340      	movs	r3, #64	; 0x40
 8021d8e:	e00c      	b.n	8021daa <FINGER_DMA_IrqHandler+0xb8e>
 8021d90:	2340      	movs	r3, #64	; 0x40
 8021d92:	e00a      	b.n	8021daa <FINGER_DMA_IrqHandler+0xb8e>
 8021d94:	2340      	movs	r3, #64	; 0x40
 8021d96:	e008      	b.n	8021daa <FINGER_DMA_IrqHandler+0xb8e>
 8021d98:	2340      	movs	r3, #64	; 0x40
 8021d9a:	e006      	b.n	8021daa <FINGER_DMA_IrqHandler+0xb8e>
 8021d9c:	2301      	movs	r3, #1
 8021d9e:	e004      	b.n	8021daa <FINGER_DMA_IrqHandler+0xb8e>
 8021da0:	2301      	movs	r3, #1
 8021da2:	e002      	b.n	8021daa <FINGER_DMA_IrqHandler+0xb8e>
 8021da4:	2301      	movs	r3, #1
 8021da6:	e000      	b.n	8021daa <FINGER_DMA_IrqHandler+0xb8e>
 8021da8:	2301      	movs	r3, #1
 8021daa:	4a74      	ldr	r2, [pc, #464]	; (8021f7c <FINGER_DMA_IrqHandler+0xd60>)
 8021dac:	60d3      	str	r3, [r2, #12]
 8021dae:	e147      	b.n	8022040 <FINGER_DMA_IrqHandler+0xe24>
 8021db0:	4b64      	ldr	r3, [pc, #400]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021db2:	681b      	ldr	r3, [r3, #0]
 8021db4:	461a      	mov	r2, r3
 8021db6:	4b72      	ldr	r3, [pc, #456]	; (8021f80 <FINGER_DMA_IrqHandler+0xd64>)
 8021db8:	429a      	cmp	r2, r3
 8021dba:	d95c      	bls.n	8021e76 <FINGER_DMA_IrqHandler+0xc5a>
 8021dbc:	4b61      	ldr	r3, [pc, #388]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021dbe:	681b      	ldr	r3, [r3, #0]
 8021dc0:	4a62      	ldr	r2, [pc, #392]	; (8021f4c <FINGER_DMA_IrqHandler+0xd30>)
 8021dc2:	4293      	cmp	r3, r2
 8021dc4:	d053      	beq.n	8021e6e <FINGER_DMA_IrqHandler+0xc52>
 8021dc6:	4b5f      	ldr	r3, [pc, #380]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021dc8:	681b      	ldr	r3, [r3, #0]
 8021dca:	4a61      	ldr	r2, [pc, #388]	; (8021f50 <FINGER_DMA_IrqHandler+0xd34>)
 8021dcc:	4293      	cmp	r3, r2
 8021dce:	d04c      	beq.n	8021e6a <FINGER_DMA_IrqHandler+0xc4e>
 8021dd0:	4b5c      	ldr	r3, [pc, #368]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021dd2:	681b      	ldr	r3, [r3, #0]
 8021dd4:	4a5f      	ldr	r2, [pc, #380]	; (8021f54 <FINGER_DMA_IrqHandler+0xd38>)
 8021dd6:	4293      	cmp	r3, r2
 8021dd8:	d045      	beq.n	8021e66 <FINGER_DMA_IrqHandler+0xc4a>
 8021dda:	4b5a      	ldr	r3, [pc, #360]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021ddc:	681b      	ldr	r3, [r3, #0]
 8021dde:	4a5e      	ldr	r2, [pc, #376]	; (8021f58 <FINGER_DMA_IrqHandler+0xd3c>)
 8021de0:	4293      	cmp	r3, r2
 8021de2:	d03e      	beq.n	8021e62 <FINGER_DMA_IrqHandler+0xc46>
 8021de4:	4b57      	ldr	r3, [pc, #348]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021de6:	681b      	ldr	r3, [r3, #0]
 8021de8:	4a5c      	ldr	r2, [pc, #368]	; (8021f5c <FINGER_DMA_IrqHandler+0xd40>)
 8021dea:	4293      	cmp	r3, r2
 8021dec:	d037      	beq.n	8021e5e <FINGER_DMA_IrqHandler+0xc42>
 8021dee:	4b55      	ldr	r3, [pc, #340]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021df0:	681b      	ldr	r3, [r3, #0]
 8021df2:	4a5b      	ldr	r2, [pc, #364]	; (8021f60 <FINGER_DMA_IrqHandler+0xd44>)
 8021df4:	4293      	cmp	r3, r2
 8021df6:	d030      	beq.n	8021e5a <FINGER_DMA_IrqHandler+0xc3e>
 8021df8:	4b52      	ldr	r3, [pc, #328]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021dfa:	681b      	ldr	r3, [r3, #0]
 8021dfc:	4a59      	ldr	r2, [pc, #356]	; (8021f64 <FINGER_DMA_IrqHandler+0xd48>)
 8021dfe:	4293      	cmp	r3, r2
 8021e00:	d029      	beq.n	8021e56 <FINGER_DMA_IrqHandler+0xc3a>
 8021e02:	4b50      	ldr	r3, [pc, #320]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021e04:	681b      	ldr	r3, [r3, #0]
 8021e06:	4a58      	ldr	r2, [pc, #352]	; (8021f68 <FINGER_DMA_IrqHandler+0xd4c>)
 8021e08:	4293      	cmp	r3, r2
 8021e0a:	d022      	beq.n	8021e52 <FINGER_DMA_IrqHandler+0xc36>
 8021e0c:	4b4d      	ldr	r3, [pc, #308]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021e0e:	681b      	ldr	r3, [r3, #0]
 8021e10:	4a56      	ldr	r2, [pc, #344]	; (8021f6c <FINGER_DMA_IrqHandler+0xd50>)
 8021e12:	4293      	cmp	r3, r2
 8021e14:	d01a      	beq.n	8021e4c <FINGER_DMA_IrqHandler+0xc30>
 8021e16:	4b4b      	ldr	r3, [pc, #300]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021e18:	681b      	ldr	r3, [r3, #0]
 8021e1a:	4a55      	ldr	r2, [pc, #340]	; (8021f70 <FINGER_DMA_IrqHandler+0xd54>)
 8021e1c:	4293      	cmp	r3, r2
 8021e1e:	d012      	beq.n	8021e46 <FINGER_DMA_IrqHandler+0xc2a>
 8021e20:	4b48      	ldr	r3, [pc, #288]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021e22:	681b      	ldr	r3, [r3, #0]
 8021e24:	4a53      	ldr	r2, [pc, #332]	; (8021f74 <FINGER_DMA_IrqHandler+0xd58>)
 8021e26:	4293      	cmp	r3, r2
 8021e28:	d00a      	beq.n	8021e40 <FINGER_DMA_IrqHandler+0xc24>
 8021e2a:	4b46      	ldr	r3, [pc, #280]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021e2c:	681b      	ldr	r3, [r3, #0]
 8021e2e:	4a52      	ldr	r2, [pc, #328]	; (8021f78 <FINGER_DMA_IrqHandler+0xd5c>)
 8021e30:	4293      	cmp	r3, r2
 8021e32:	d102      	bne.n	8021e3a <FINGER_DMA_IrqHandler+0xc1e>
 8021e34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8021e38:	e01a      	b.n	8021e70 <FINGER_DMA_IrqHandler+0xc54>
 8021e3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8021e3e:	e017      	b.n	8021e70 <FINGER_DMA_IrqHandler+0xc54>
 8021e40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8021e44:	e014      	b.n	8021e70 <FINGER_DMA_IrqHandler+0xc54>
 8021e46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8021e4a:	e011      	b.n	8021e70 <FINGER_DMA_IrqHandler+0xc54>
 8021e4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8021e50:	e00e      	b.n	8021e70 <FINGER_DMA_IrqHandler+0xc54>
 8021e52:	2340      	movs	r3, #64	; 0x40
 8021e54:	e00c      	b.n	8021e70 <FINGER_DMA_IrqHandler+0xc54>
 8021e56:	2340      	movs	r3, #64	; 0x40
 8021e58:	e00a      	b.n	8021e70 <FINGER_DMA_IrqHandler+0xc54>
 8021e5a:	2340      	movs	r3, #64	; 0x40
 8021e5c:	e008      	b.n	8021e70 <FINGER_DMA_IrqHandler+0xc54>
 8021e5e:	2340      	movs	r3, #64	; 0x40
 8021e60:	e006      	b.n	8021e70 <FINGER_DMA_IrqHandler+0xc54>
 8021e62:	2301      	movs	r3, #1
 8021e64:	e004      	b.n	8021e70 <FINGER_DMA_IrqHandler+0xc54>
 8021e66:	2301      	movs	r3, #1
 8021e68:	e002      	b.n	8021e70 <FINGER_DMA_IrqHandler+0xc54>
 8021e6a:	2301      	movs	r3, #1
 8021e6c:	e000      	b.n	8021e70 <FINGER_DMA_IrqHandler+0xc54>
 8021e6e:	2301      	movs	r3, #1
 8021e70:	4a42      	ldr	r2, [pc, #264]	; (8021f7c <FINGER_DMA_IrqHandler+0xd60>)
 8021e72:	6093      	str	r3, [r2, #8]
 8021e74:	e0e4      	b.n	8022040 <FINGER_DMA_IrqHandler+0xe24>
 8021e76:	4b33      	ldr	r3, [pc, #204]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021e78:	681b      	ldr	r3, [r3, #0]
 8021e7a:	461a      	mov	r2, r3
 8021e7c:	4b41      	ldr	r3, [pc, #260]	; (8021f84 <FINGER_DMA_IrqHandler+0xd68>)
 8021e7e:	429a      	cmp	r2, r3
 8021e80:	f240 8082 	bls.w	8021f88 <FINGER_DMA_IrqHandler+0xd6c>
 8021e84:	4b2f      	ldr	r3, [pc, #188]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021e86:	681b      	ldr	r3, [r3, #0]
 8021e88:	4a30      	ldr	r2, [pc, #192]	; (8021f4c <FINGER_DMA_IrqHandler+0xd30>)
 8021e8a:	4293      	cmp	r3, r2
 8021e8c:	d053      	beq.n	8021f36 <FINGER_DMA_IrqHandler+0xd1a>
 8021e8e:	4b2d      	ldr	r3, [pc, #180]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021e90:	681b      	ldr	r3, [r3, #0]
 8021e92:	4a2f      	ldr	r2, [pc, #188]	; (8021f50 <FINGER_DMA_IrqHandler+0xd34>)
 8021e94:	4293      	cmp	r3, r2
 8021e96:	d04c      	beq.n	8021f32 <FINGER_DMA_IrqHandler+0xd16>
 8021e98:	4b2a      	ldr	r3, [pc, #168]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021e9a:	681b      	ldr	r3, [r3, #0]
 8021e9c:	4a2d      	ldr	r2, [pc, #180]	; (8021f54 <FINGER_DMA_IrqHandler+0xd38>)
 8021e9e:	4293      	cmp	r3, r2
 8021ea0:	d045      	beq.n	8021f2e <FINGER_DMA_IrqHandler+0xd12>
 8021ea2:	4b28      	ldr	r3, [pc, #160]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021ea4:	681b      	ldr	r3, [r3, #0]
 8021ea6:	4a2c      	ldr	r2, [pc, #176]	; (8021f58 <FINGER_DMA_IrqHandler+0xd3c>)
 8021ea8:	4293      	cmp	r3, r2
 8021eaa:	d03e      	beq.n	8021f2a <FINGER_DMA_IrqHandler+0xd0e>
 8021eac:	4b25      	ldr	r3, [pc, #148]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021eae:	681b      	ldr	r3, [r3, #0]
 8021eb0:	4a2a      	ldr	r2, [pc, #168]	; (8021f5c <FINGER_DMA_IrqHandler+0xd40>)
 8021eb2:	4293      	cmp	r3, r2
 8021eb4:	d037      	beq.n	8021f26 <FINGER_DMA_IrqHandler+0xd0a>
 8021eb6:	4b23      	ldr	r3, [pc, #140]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021eb8:	681b      	ldr	r3, [r3, #0]
 8021eba:	4a29      	ldr	r2, [pc, #164]	; (8021f60 <FINGER_DMA_IrqHandler+0xd44>)
 8021ebc:	4293      	cmp	r3, r2
 8021ebe:	d030      	beq.n	8021f22 <FINGER_DMA_IrqHandler+0xd06>
 8021ec0:	4b20      	ldr	r3, [pc, #128]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021ec2:	681b      	ldr	r3, [r3, #0]
 8021ec4:	4a27      	ldr	r2, [pc, #156]	; (8021f64 <FINGER_DMA_IrqHandler+0xd48>)
 8021ec6:	4293      	cmp	r3, r2
 8021ec8:	d029      	beq.n	8021f1e <FINGER_DMA_IrqHandler+0xd02>
 8021eca:	4b1e      	ldr	r3, [pc, #120]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021ecc:	681b      	ldr	r3, [r3, #0]
 8021ece:	4a26      	ldr	r2, [pc, #152]	; (8021f68 <FINGER_DMA_IrqHandler+0xd4c>)
 8021ed0:	4293      	cmp	r3, r2
 8021ed2:	d022      	beq.n	8021f1a <FINGER_DMA_IrqHandler+0xcfe>
 8021ed4:	4b1b      	ldr	r3, [pc, #108]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021ed6:	681b      	ldr	r3, [r3, #0]
 8021ed8:	4a24      	ldr	r2, [pc, #144]	; (8021f6c <FINGER_DMA_IrqHandler+0xd50>)
 8021eda:	4293      	cmp	r3, r2
 8021edc:	d01a      	beq.n	8021f14 <FINGER_DMA_IrqHandler+0xcf8>
 8021ede:	4b19      	ldr	r3, [pc, #100]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021ee0:	681b      	ldr	r3, [r3, #0]
 8021ee2:	4a23      	ldr	r2, [pc, #140]	; (8021f70 <FINGER_DMA_IrqHandler+0xd54>)
 8021ee4:	4293      	cmp	r3, r2
 8021ee6:	d012      	beq.n	8021f0e <FINGER_DMA_IrqHandler+0xcf2>
 8021ee8:	4b16      	ldr	r3, [pc, #88]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021eea:	681b      	ldr	r3, [r3, #0]
 8021eec:	4a21      	ldr	r2, [pc, #132]	; (8021f74 <FINGER_DMA_IrqHandler+0xd58>)
 8021eee:	4293      	cmp	r3, r2
 8021ef0:	d00a      	beq.n	8021f08 <FINGER_DMA_IrqHandler+0xcec>
 8021ef2:	4b14      	ldr	r3, [pc, #80]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021ef4:	681b      	ldr	r3, [r3, #0]
 8021ef6:	4a20      	ldr	r2, [pc, #128]	; (8021f78 <FINGER_DMA_IrqHandler+0xd5c>)
 8021ef8:	4293      	cmp	r3, r2
 8021efa:	d102      	bne.n	8021f02 <FINGER_DMA_IrqHandler+0xce6>
 8021efc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8021f00:	e01a      	b.n	8021f38 <FINGER_DMA_IrqHandler+0xd1c>
 8021f02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8021f06:	e017      	b.n	8021f38 <FINGER_DMA_IrqHandler+0xd1c>
 8021f08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8021f0c:	e014      	b.n	8021f38 <FINGER_DMA_IrqHandler+0xd1c>
 8021f0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8021f12:	e011      	b.n	8021f38 <FINGER_DMA_IrqHandler+0xd1c>
 8021f14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8021f18:	e00e      	b.n	8021f38 <FINGER_DMA_IrqHandler+0xd1c>
 8021f1a:	2340      	movs	r3, #64	; 0x40
 8021f1c:	e00c      	b.n	8021f38 <FINGER_DMA_IrqHandler+0xd1c>
 8021f1e:	2340      	movs	r3, #64	; 0x40
 8021f20:	e00a      	b.n	8021f38 <FINGER_DMA_IrqHandler+0xd1c>
 8021f22:	2340      	movs	r3, #64	; 0x40
 8021f24:	e008      	b.n	8021f38 <FINGER_DMA_IrqHandler+0xd1c>
 8021f26:	2340      	movs	r3, #64	; 0x40
 8021f28:	e006      	b.n	8021f38 <FINGER_DMA_IrqHandler+0xd1c>
 8021f2a:	2301      	movs	r3, #1
 8021f2c:	e004      	b.n	8021f38 <FINGER_DMA_IrqHandler+0xd1c>
 8021f2e:	2301      	movs	r3, #1
 8021f30:	e002      	b.n	8021f38 <FINGER_DMA_IrqHandler+0xd1c>
 8021f32:	2301      	movs	r3, #1
 8021f34:	e000      	b.n	8021f38 <FINGER_DMA_IrqHandler+0xd1c>
 8021f36:	2301      	movs	r3, #1
 8021f38:	4a01      	ldr	r2, [pc, #4]	; (8021f40 <FINGER_DMA_IrqHandler+0xd24>)
 8021f3a:	60d3      	str	r3, [r2, #12]
 8021f3c:	e080      	b.n	8022040 <FINGER_DMA_IrqHandler+0xe24>
 8021f3e:	bf00      	nop
 8021f40:	40026000 	.word	0x40026000
 8021f44:	20008464 	.word	0x20008464
 8021f48:	40026458 	.word	0x40026458
 8021f4c:	40026010 	.word	0x40026010
 8021f50:	40026410 	.word	0x40026410
 8021f54:	40026070 	.word	0x40026070
 8021f58:	40026470 	.word	0x40026470
 8021f5c:	40026028 	.word	0x40026028
 8021f60:	40026428 	.word	0x40026428
 8021f64:	40026088 	.word	0x40026088
 8021f68:	40026488 	.word	0x40026488
 8021f6c:	40026040 	.word	0x40026040
 8021f70:	40026440 	.word	0x40026440
 8021f74:	400260a0 	.word	0x400260a0
 8021f78:	400264a0 	.word	0x400264a0
 8021f7c:	40026400 	.word	0x40026400
 8021f80:	400260b8 	.word	0x400260b8
 8021f84:	40026058 	.word	0x40026058
 8021f88:	4b95      	ldr	r3, [pc, #596]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8021f8a:	681b      	ldr	r3, [r3, #0]
 8021f8c:	4a95      	ldr	r2, [pc, #596]	; (80221e4 <FINGER_DMA_IrqHandler+0xfc8>)
 8021f8e:	4293      	cmp	r3, r2
 8021f90:	d053      	beq.n	802203a <FINGER_DMA_IrqHandler+0xe1e>
 8021f92:	4b93      	ldr	r3, [pc, #588]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8021f94:	681b      	ldr	r3, [r3, #0]
 8021f96:	4a94      	ldr	r2, [pc, #592]	; (80221e8 <FINGER_DMA_IrqHandler+0xfcc>)
 8021f98:	4293      	cmp	r3, r2
 8021f9a:	d04c      	beq.n	8022036 <FINGER_DMA_IrqHandler+0xe1a>
 8021f9c:	4b90      	ldr	r3, [pc, #576]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8021f9e:	681b      	ldr	r3, [r3, #0]
 8021fa0:	4a92      	ldr	r2, [pc, #584]	; (80221ec <FINGER_DMA_IrqHandler+0xfd0>)
 8021fa2:	4293      	cmp	r3, r2
 8021fa4:	d045      	beq.n	8022032 <FINGER_DMA_IrqHandler+0xe16>
 8021fa6:	4b8e      	ldr	r3, [pc, #568]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8021fa8:	681b      	ldr	r3, [r3, #0]
 8021faa:	4a91      	ldr	r2, [pc, #580]	; (80221f0 <FINGER_DMA_IrqHandler+0xfd4>)
 8021fac:	4293      	cmp	r3, r2
 8021fae:	d03e      	beq.n	802202e <FINGER_DMA_IrqHandler+0xe12>
 8021fb0:	4b8b      	ldr	r3, [pc, #556]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8021fb2:	681b      	ldr	r3, [r3, #0]
 8021fb4:	4a8f      	ldr	r2, [pc, #572]	; (80221f4 <FINGER_DMA_IrqHandler+0xfd8>)
 8021fb6:	4293      	cmp	r3, r2
 8021fb8:	d037      	beq.n	802202a <FINGER_DMA_IrqHandler+0xe0e>
 8021fba:	4b89      	ldr	r3, [pc, #548]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8021fbc:	681b      	ldr	r3, [r3, #0]
 8021fbe:	4a8e      	ldr	r2, [pc, #568]	; (80221f8 <FINGER_DMA_IrqHandler+0xfdc>)
 8021fc0:	4293      	cmp	r3, r2
 8021fc2:	d030      	beq.n	8022026 <FINGER_DMA_IrqHandler+0xe0a>
 8021fc4:	4b86      	ldr	r3, [pc, #536]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8021fc6:	681b      	ldr	r3, [r3, #0]
 8021fc8:	4a8c      	ldr	r2, [pc, #560]	; (80221fc <FINGER_DMA_IrqHandler+0xfe0>)
 8021fca:	4293      	cmp	r3, r2
 8021fcc:	d029      	beq.n	8022022 <FINGER_DMA_IrqHandler+0xe06>
 8021fce:	4b84      	ldr	r3, [pc, #528]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8021fd0:	681b      	ldr	r3, [r3, #0]
 8021fd2:	4a8b      	ldr	r2, [pc, #556]	; (8022200 <FINGER_DMA_IrqHandler+0xfe4>)
 8021fd4:	4293      	cmp	r3, r2
 8021fd6:	d022      	beq.n	802201e <FINGER_DMA_IrqHandler+0xe02>
 8021fd8:	4b81      	ldr	r3, [pc, #516]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8021fda:	681b      	ldr	r3, [r3, #0]
 8021fdc:	4a89      	ldr	r2, [pc, #548]	; (8022204 <FINGER_DMA_IrqHandler+0xfe8>)
 8021fde:	4293      	cmp	r3, r2
 8021fe0:	d01a      	beq.n	8022018 <FINGER_DMA_IrqHandler+0xdfc>
 8021fe2:	4b7f      	ldr	r3, [pc, #508]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8021fe4:	681b      	ldr	r3, [r3, #0]
 8021fe6:	4a88      	ldr	r2, [pc, #544]	; (8022208 <FINGER_DMA_IrqHandler+0xfec>)
 8021fe8:	4293      	cmp	r3, r2
 8021fea:	d012      	beq.n	8022012 <FINGER_DMA_IrqHandler+0xdf6>
 8021fec:	4b7c      	ldr	r3, [pc, #496]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8021fee:	681b      	ldr	r3, [r3, #0]
 8021ff0:	4a86      	ldr	r2, [pc, #536]	; (802220c <FINGER_DMA_IrqHandler+0xff0>)
 8021ff2:	4293      	cmp	r3, r2
 8021ff4:	d00a      	beq.n	802200c <FINGER_DMA_IrqHandler+0xdf0>
 8021ff6:	4b7a      	ldr	r3, [pc, #488]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8021ff8:	681b      	ldr	r3, [r3, #0]
 8021ffa:	4a85      	ldr	r2, [pc, #532]	; (8022210 <FINGER_DMA_IrqHandler+0xff4>)
 8021ffc:	4293      	cmp	r3, r2
 8021ffe:	d102      	bne.n	8022006 <FINGER_DMA_IrqHandler+0xdea>
 8022000:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8022004:	e01a      	b.n	802203c <FINGER_DMA_IrqHandler+0xe20>
 8022006:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 802200a:	e017      	b.n	802203c <FINGER_DMA_IrqHandler+0xe20>
 802200c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8022010:	e014      	b.n	802203c <FINGER_DMA_IrqHandler+0xe20>
 8022012:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8022016:	e011      	b.n	802203c <FINGER_DMA_IrqHandler+0xe20>
 8022018:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 802201c:	e00e      	b.n	802203c <FINGER_DMA_IrqHandler+0xe20>
 802201e:	2340      	movs	r3, #64	; 0x40
 8022020:	e00c      	b.n	802203c <FINGER_DMA_IrqHandler+0xe20>
 8022022:	2340      	movs	r3, #64	; 0x40
 8022024:	e00a      	b.n	802203c <FINGER_DMA_IrqHandler+0xe20>
 8022026:	2340      	movs	r3, #64	; 0x40
 8022028:	e008      	b.n	802203c <FINGER_DMA_IrqHandler+0xe20>
 802202a:	2340      	movs	r3, #64	; 0x40
 802202c:	e006      	b.n	802203c <FINGER_DMA_IrqHandler+0xe20>
 802202e:	2301      	movs	r3, #1
 8022030:	e004      	b.n	802203c <FINGER_DMA_IrqHandler+0xe20>
 8022032:	2301      	movs	r3, #1
 8022034:	e002      	b.n	802203c <FINGER_DMA_IrqHandler+0xe20>
 8022036:	2301      	movs	r3, #1
 8022038:	e000      	b.n	802203c <FINGER_DMA_IrqHandler+0xe20>
 802203a:	2301      	movs	r3, #1
 802203c:	4a75      	ldr	r2, [pc, #468]	; (8022214 <FINGER_DMA_IrqHandler+0xff8>)
 802203e:	6093      	str	r3, [r2, #8]
        __HAL_DMA_CLEAR_FLAG(&hdma_uart4_rx, __HAL_DMA_GET_DME_FLAG_INDEX(&hdma_uart4_rx));
 8022040:	4b67      	ldr	r3, [pc, #412]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8022042:	681b      	ldr	r3, [r3, #0]
 8022044:	461a      	mov	r2, r3
 8022046:	4b74      	ldr	r3, [pc, #464]	; (8022218 <FINGER_DMA_IrqHandler+0xffc>)
 8022048:	429a      	cmp	r2, r3
 802204a:	d960      	bls.n	802210e <FINGER_DMA_IrqHandler+0xef2>
 802204c:	4b64      	ldr	r3, [pc, #400]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 802204e:	681b      	ldr	r3, [r3, #0]
 8022050:	4a64      	ldr	r2, [pc, #400]	; (80221e4 <FINGER_DMA_IrqHandler+0xfc8>)
 8022052:	4293      	cmp	r3, r2
 8022054:	d057      	beq.n	8022106 <FINGER_DMA_IrqHandler+0xeea>
 8022056:	4b62      	ldr	r3, [pc, #392]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8022058:	681b      	ldr	r3, [r3, #0]
 802205a:	4a63      	ldr	r2, [pc, #396]	; (80221e8 <FINGER_DMA_IrqHandler+0xfcc>)
 802205c:	4293      	cmp	r3, r2
 802205e:	d050      	beq.n	8022102 <FINGER_DMA_IrqHandler+0xee6>
 8022060:	4b5f      	ldr	r3, [pc, #380]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8022062:	681b      	ldr	r3, [r3, #0]
 8022064:	4a61      	ldr	r2, [pc, #388]	; (80221ec <FINGER_DMA_IrqHandler+0xfd0>)
 8022066:	4293      	cmp	r3, r2
 8022068:	d049      	beq.n	80220fe <FINGER_DMA_IrqHandler+0xee2>
 802206a:	4b5d      	ldr	r3, [pc, #372]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 802206c:	681b      	ldr	r3, [r3, #0]
 802206e:	4a60      	ldr	r2, [pc, #384]	; (80221f0 <FINGER_DMA_IrqHandler+0xfd4>)
 8022070:	4293      	cmp	r3, r2
 8022072:	d042      	beq.n	80220fa <FINGER_DMA_IrqHandler+0xede>
 8022074:	4b5a      	ldr	r3, [pc, #360]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8022076:	681b      	ldr	r3, [r3, #0]
 8022078:	4a5e      	ldr	r2, [pc, #376]	; (80221f4 <FINGER_DMA_IrqHandler+0xfd8>)
 802207a:	4293      	cmp	r3, r2
 802207c:	d03a      	beq.n	80220f4 <FINGER_DMA_IrqHandler+0xed8>
 802207e:	4b58      	ldr	r3, [pc, #352]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8022080:	681b      	ldr	r3, [r3, #0]
 8022082:	4a5d      	ldr	r2, [pc, #372]	; (80221f8 <FINGER_DMA_IrqHandler+0xfdc>)
 8022084:	4293      	cmp	r3, r2
 8022086:	d032      	beq.n	80220ee <FINGER_DMA_IrqHandler+0xed2>
 8022088:	4b55      	ldr	r3, [pc, #340]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 802208a:	681b      	ldr	r3, [r3, #0]
 802208c:	4a5b      	ldr	r2, [pc, #364]	; (80221fc <FINGER_DMA_IrqHandler+0xfe0>)
 802208e:	4293      	cmp	r3, r2
 8022090:	d02a      	beq.n	80220e8 <FINGER_DMA_IrqHandler+0xecc>
 8022092:	4b53      	ldr	r3, [pc, #332]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8022094:	681b      	ldr	r3, [r3, #0]
 8022096:	4a5a      	ldr	r2, [pc, #360]	; (8022200 <FINGER_DMA_IrqHandler+0xfe4>)
 8022098:	4293      	cmp	r3, r2
 802209a:	d022      	beq.n	80220e2 <FINGER_DMA_IrqHandler+0xec6>
 802209c:	4b50      	ldr	r3, [pc, #320]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 802209e:	681b      	ldr	r3, [r3, #0]
 80220a0:	4a58      	ldr	r2, [pc, #352]	; (8022204 <FINGER_DMA_IrqHandler+0xfe8>)
 80220a2:	4293      	cmp	r3, r2
 80220a4:	d01a      	beq.n	80220dc <FINGER_DMA_IrqHandler+0xec0>
 80220a6:	4b4e      	ldr	r3, [pc, #312]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 80220a8:	681b      	ldr	r3, [r3, #0]
 80220aa:	4a57      	ldr	r2, [pc, #348]	; (8022208 <FINGER_DMA_IrqHandler+0xfec>)
 80220ac:	4293      	cmp	r3, r2
 80220ae:	d012      	beq.n	80220d6 <FINGER_DMA_IrqHandler+0xeba>
 80220b0:	4b4b      	ldr	r3, [pc, #300]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 80220b2:	681b      	ldr	r3, [r3, #0]
 80220b4:	4a55      	ldr	r2, [pc, #340]	; (802220c <FINGER_DMA_IrqHandler+0xff0>)
 80220b6:	4293      	cmp	r3, r2
 80220b8:	d00a      	beq.n	80220d0 <FINGER_DMA_IrqHandler+0xeb4>
 80220ba:	4b49      	ldr	r3, [pc, #292]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 80220bc:	681b      	ldr	r3, [r3, #0]
 80220be:	4a54      	ldr	r2, [pc, #336]	; (8022210 <FINGER_DMA_IrqHandler+0xff4>)
 80220c0:	4293      	cmp	r3, r2
 80220c2:	d102      	bne.n	80220ca <FINGER_DMA_IrqHandler+0xeae>
 80220c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80220c8:	e01e      	b.n	8022108 <FINGER_DMA_IrqHandler+0xeec>
 80220ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80220ce:	e01b      	b.n	8022108 <FINGER_DMA_IrqHandler+0xeec>
 80220d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80220d4:	e018      	b.n	8022108 <FINGER_DMA_IrqHandler+0xeec>
 80220d6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80220da:	e015      	b.n	8022108 <FINGER_DMA_IrqHandler+0xeec>
 80220dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80220e0:	e012      	b.n	8022108 <FINGER_DMA_IrqHandler+0xeec>
 80220e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80220e6:	e00f      	b.n	8022108 <FINGER_DMA_IrqHandler+0xeec>
 80220e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80220ec:	e00c      	b.n	8022108 <FINGER_DMA_IrqHandler+0xeec>
 80220ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80220f2:	e009      	b.n	8022108 <FINGER_DMA_IrqHandler+0xeec>
 80220f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80220f8:	e006      	b.n	8022108 <FINGER_DMA_IrqHandler+0xeec>
 80220fa:	2304      	movs	r3, #4
 80220fc:	e004      	b.n	8022108 <FINGER_DMA_IrqHandler+0xeec>
 80220fe:	2304      	movs	r3, #4
 8022100:	e002      	b.n	8022108 <FINGER_DMA_IrqHandler+0xeec>
 8022102:	2304      	movs	r3, #4
 8022104:	e000      	b.n	8022108 <FINGER_DMA_IrqHandler+0xeec>
 8022106:	2304      	movs	r3, #4
 8022108:	4a44      	ldr	r2, [pc, #272]	; (802221c <FINGER_DMA_IrqHandler+0x1000>)
 802210a:	60d3      	str	r3, [r2, #12]
 802210c:	e151      	b.n	80223b2 <FINGER_DMA_IrqHandler+0x1196>
 802210e:	4b34      	ldr	r3, [pc, #208]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8022110:	681b      	ldr	r3, [r3, #0]
 8022112:	461a      	mov	r2, r3
 8022114:	4b42      	ldr	r3, [pc, #264]	; (8022220 <FINGER_DMA_IrqHandler+0x1004>)
 8022116:	429a      	cmp	r2, r3
 8022118:	f240 8084 	bls.w	8022224 <FINGER_DMA_IrqHandler+0x1008>
 802211c:	4b30      	ldr	r3, [pc, #192]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 802211e:	681b      	ldr	r3, [r3, #0]
 8022120:	4a30      	ldr	r2, [pc, #192]	; (80221e4 <FINGER_DMA_IrqHandler+0xfc8>)
 8022122:	4293      	cmp	r3, r2
 8022124:	d057      	beq.n	80221d6 <FINGER_DMA_IrqHandler+0xfba>
 8022126:	4b2e      	ldr	r3, [pc, #184]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8022128:	681b      	ldr	r3, [r3, #0]
 802212a:	4a2f      	ldr	r2, [pc, #188]	; (80221e8 <FINGER_DMA_IrqHandler+0xfcc>)
 802212c:	4293      	cmp	r3, r2
 802212e:	d050      	beq.n	80221d2 <FINGER_DMA_IrqHandler+0xfb6>
 8022130:	4b2b      	ldr	r3, [pc, #172]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8022132:	681b      	ldr	r3, [r3, #0]
 8022134:	4a2d      	ldr	r2, [pc, #180]	; (80221ec <FINGER_DMA_IrqHandler+0xfd0>)
 8022136:	4293      	cmp	r3, r2
 8022138:	d049      	beq.n	80221ce <FINGER_DMA_IrqHandler+0xfb2>
 802213a:	4b29      	ldr	r3, [pc, #164]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 802213c:	681b      	ldr	r3, [r3, #0]
 802213e:	4a2c      	ldr	r2, [pc, #176]	; (80221f0 <FINGER_DMA_IrqHandler+0xfd4>)
 8022140:	4293      	cmp	r3, r2
 8022142:	d042      	beq.n	80221ca <FINGER_DMA_IrqHandler+0xfae>
 8022144:	4b26      	ldr	r3, [pc, #152]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8022146:	681b      	ldr	r3, [r3, #0]
 8022148:	4a2a      	ldr	r2, [pc, #168]	; (80221f4 <FINGER_DMA_IrqHandler+0xfd8>)
 802214a:	4293      	cmp	r3, r2
 802214c:	d03a      	beq.n	80221c4 <FINGER_DMA_IrqHandler+0xfa8>
 802214e:	4b24      	ldr	r3, [pc, #144]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8022150:	681b      	ldr	r3, [r3, #0]
 8022152:	4a29      	ldr	r2, [pc, #164]	; (80221f8 <FINGER_DMA_IrqHandler+0xfdc>)
 8022154:	4293      	cmp	r3, r2
 8022156:	d032      	beq.n	80221be <FINGER_DMA_IrqHandler+0xfa2>
 8022158:	4b21      	ldr	r3, [pc, #132]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 802215a:	681b      	ldr	r3, [r3, #0]
 802215c:	4a27      	ldr	r2, [pc, #156]	; (80221fc <FINGER_DMA_IrqHandler+0xfe0>)
 802215e:	4293      	cmp	r3, r2
 8022160:	d02a      	beq.n	80221b8 <FINGER_DMA_IrqHandler+0xf9c>
 8022162:	4b1f      	ldr	r3, [pc, #124]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8022164:	681b      	ldr	r3, [r3, #0]
 8022166:	4a26      	ldr	r2, [pc, #152]	; (8022200 <FINGER_DMA_IrqHandler+0xfe4>)
 8022168:	4293      	cmp	r3, r2
 802216a:	d022      	beq.n	80221b2 <FINGER_DMA_IrqHandler+0xf96>
 802216c:	4b1c      	ldr	r3, [pc, #112]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 802216e:	681b      	ldr	r3, [r3, #0]
 8022170:	4a24      	ldr	r2, [pc, #144]	; (8022204 <FINGER_DMA_IrqHandler+0xfe8>)
 8022172:	4293      	cmp	r3, r2
 8022174:	d01a      	beq.n	80221ac <FINGER_DMA_IrqHandler+0xf90>
 8022176:	4b1a      	ldr	r3, [pc, #104]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8022178:	681b      	ldr	r3, [r3, #0]
 802217a:	4a23      	ldr	r2, [pc, #140]	; (8022208 <FINGER_DMA_IrqHandler+0xfec>)
 802217c:	4293      	cmp	r3, r2
 802217e:	d012      	beq.n	80221a6 <FINGER_DMA_IrqHandler+0xf8a>
 8022180:	4b17      	ldr	r3, [pc, #92]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8022182:	681b      	ldr	r3, [r3, #0]
 8022184:	4a21      	ldr	r2, [pc, #132]	; (802220c <FINGER_DMA_IrqHandler+0xff0>)
 8022186:	4293      	cmp	r3, r2
 8022188:	d00a      	beq.n	80221a0 <FINGER_DMA_IrqHandler+0xf84>
 802218a:	4b15      	ldr	r3, [pc, #84]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 802218c:	681b      	ldr	r3, [r3, #0]
 802218e:	4a20      	ldr	r2, [pc, #128]	; (8022210 <FINGER_DMA_IrqHandler+0xff4>)
 8022190:	4293      	cmp	r3, r2
 8022192:	d102      	bne.n	802219a <FINGER_DMA_IrqHandler+0xf7e>
 8022194:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8022198:	e01e      	b.n	80221d8 <FINGER_DMA_IrqHandler+0xfbc>
 802219a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 802219e:	e01b      	b.n	80221d8 <FINGER_DMA_IrqHandler+0xfbc>
 80221a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80221a4:	e018      	b.n	80221d8 <FINGER_DMA_IrqHandler+0xfbc>
 80221a6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80221aa:	e015      	b.n	80221d8 <FINGER_DMA_IrqHandler+0xfbc>
 80221ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80221b0:	e012      	b.n	80221d8 <FINGER_DMA_IrqHandler+0xfbc>
 80221b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80221b6:	e00f      	b.n	80221d8 <FINGER_DMA_IrqHandler+0xfbc>
 80221b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80221bc:	e00c      	b.n	80221d8 <FINGER_DMA_IrqHandler+0xfbc>
 80221be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80221c2:	e009      	b.n	80221d8 <FINGER_DMA_IrqHandler+0xfbc>
 80221c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80221c8:	e006      	b.n	80221d8 <FINGER_DMA_IrqHandler+0xfbc>
 80221ca:	2304      	movs	r3, #4
 80221cc:	e004      	b.n	80221d8 <FINGER_DMA_IrqHandler+0xfbc>
 80221ce:	2304      	movs	r3, #4
 80221d0:	e002      	b.n	80221d8 <FINGER_DMA_IrqHandler+0xfbc>
 80221d2:	2304      	movs	r3, #4
 80221d4:	e000      	b.n	80221d8 <FINGER_DMA_IrqHandler+0xfbc>
 80221d6:	2304      	movs	r3, #4
 80221d8:	4a10      	ldr	r2, [pc, #64]	; (802221c <FINGER_DMA_IrqHandler+0x1000>)
 80221da:	6093      	str	r3, [r2, #8]
 80221dc:	e0e9      	b.n	80223b2 <FINGER_DMA_IrqHandler+0x1196>
 80221de:	bf00      	nop
 80221e0:	20008464 	.word	0x20008464
 80221e4:	40026010 	.word	0x40026010
 80221e8:	40026410 	.word	0x40026410
 80221ec:	40026070 	.word	0x40026070
 80221f0:	40026470 	.word	0x40026470
 80221f4:	40026028 	.word	0x40026028
 80221f8:	40026428 	.word	0x40026428
 80221fc:	40026088 	.word	0x40026088
 8022200:	40026488 	.word	0x40026488
 8022204:	40026040 	.word	0x40026040
 8022208:	40026440 	.word	0x40026440
 802220c:	400260a0 	.word	0x400260a0
 8022210:	400264a0 	.word	0x400264a0
 8022214:	40026000 	.word	0x40026000
 8022218:	40026458 	.word	0x40026458
 802221c:	40026400 	.word	0x40026400
 8022220:	400260b8 	.word	0x400260b8
 8022224:	4b66      	ldr	r3, [pc, #408]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 8022226:	681b      	ldr	r3, [r3, #0]
 8022228:	461a      	mov	r2, r3
 802222a:	4b66      	ldr	r3, [pc, #408]	; (80223c4 <FINGER_DMA_IrqHandler+0x11a8>)
 802222c:	429a      	cmp	r2, r3
 802222e:	d960      	bls.n	80222f2 <FINGER_DMA_IrqHandler+0x10d6>
 8022230:	4b63      	ldr	r3, [pc, #396]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 8022232:	681b      	ldr	r3, [r3, #0]
 8022234:	4a64      	ldr	r2, [pc, #400]	; (80223c8 <FINGER_DMA_IrqHandler+0x11ac>)
 8022236:	4293      	cmp	r3, r2
 8022238:	d057      	beq.n	80222ea <FINGER_DMA_IrqHandler+0x10ce>
 802223a:	4b61      	ldr	r3, [pc, #388]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 802223c:	681b      	ldr	r3, [r3, #0]
 802223e:	4a63      	ldr	r2, [pc, #396]	; (80223cc <FINGER_DMA_IrqHandler+0x11b0>)
 8022240:	4293      	cmp	r3, r2
 8022242:	d050      	beq.n	80222e6 <FINGER_DMA_IrqHandler+0x10ca>
 8022244:	4b5e      	ldr	r3, [pc, #376]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 8022246:	681b      	ldr	r3, [r3, #0]
 8022248:	4a61      	ldr	r2, [pc, #388]	; (80223d0 <FINGER_DMA_IrqHandler+0x11b4>)
 802224a:	4293      	cmp	r3, r2
 802224c:	d049      	beq.n	80222e2 <FINGER_DMA_IrqHandler+0x10c6>
 802224e:	4b5c      	ldr	r3, [pc, #368]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 8022250:	681b      	ldr	r3, [r3, #0]
 8022252:	4a60      	ldr	r2, [pc, #384]	; (80223d4 <FINGER_DMA_IrqHandler+0x11b8>)
 8022254:	4293      	cmp	r3, r2
 8022256:	d042      	beq.n	80222de <FINGER_DMA_IrqHandler+0x10c2>
 8022258:	4b59      	ldr	r3, [pc, #356]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 802225a:	681b      	ldr	r3, [r3, #0]
 802225c:	4a5e      	ldr	r2, [pc, #376]	; (80223d8 <FINGER_DMA_IrqHandler+0x11bc>)
 802225e:	4293      	cmp	r3, r2
 8022260:	d03a      	beq.n	80222d8 <FINGER_DMA_IrqHandler+0x10bc>
 8022262:	4b57      	ldr	r3, [pc, #348]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 8022264:	681b      	ldr	r3, [r3, #0]
 8022266:	4a5d      	ldr	r2, [pc, #372]	; (80223dc <FINGER_DMA_IrqHandler+0x11c0>)
 8022268:	4293      	cmp	r3, r2
 802226a:	d032      	beq.n	80222d2 <FINGER_DMA_IrqHandler+0x10b6>
 802226c:	4b54      	ldr	r3, [pc, #336]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 802226e:	681b      	ldr	r3, [r3, #0]
 8022270:	4a5b      	ldr	r2, [pc, #364]	; (80223e0 <FINGER_DMA_IrqHandler+0x11c4>)
 8022272:	4293      	cmp	r3, r2
 8022274:	d02a      	beq.n	80222cc <FINGER_DMA_IrqHandler+0x10b0>
 8022276:	4b52      	ldr	r3, [pc, #328]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 8022278:	681b      	ldr	r3, [r3, #0]
 802227a:	4a5a      	ldr	r2, [pc, #360]	; (80223e4 <FINGER_DMA_IrqHandler+0x11c8>)
 802227c:	4293      	cmp	r3, r2
 802227e:	d022      	beq.n	80222c6 <FINGER_DMA_IrqHandler+0x10aa>
 8022280:	4b4f      	ldr	r3, [pc, #316]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 8022282:	681b      	ldr	r3, [r3, #0]
 8022284:	4a58      	ldr	r2, [pc, #352]	; (80223e8 <FINGER_DMA_IrqHandler+0x11cc>)
 8022286:	4293      	cmp	r3, r2
 8022288:	d01a      	beq.n	80222c0 <FINGER_DMA_IrqHandler+0x10a4>
 802228a:	4b4d      	ldr	r3, [pc, #308]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 802228c:	681b      	ldr	r3, [r3, #0]
 802228e:	4a57      	ldr	r2, [pc, #348]	; (80223ec <FINGER_DMA_IrqHandler+0x11d0>)
 8022290:	4293      	cmp	r3, r2
 8022292:	d012      	beq.n	80222ba <FINGER_DMA_IrqHandler+0x109e>
 8022294:	4b4a      	ldr	r3, [pc, #296]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 8022296:	681b      	ldr	r3, [r3, #0]
 8022298:	4a55      	ldr	r2, [pc, #340]	; (80223f0 <FINGER_DMA_IrqHandler+0x11d4>)
 802229a:	4293      	cmp	r3, r2
 802229c:	d00a      	beq.n	80222b4 <FINGER_DMA_IrqHandler+0x1098>
 802229e:	4b48      	ldr	r3, [pc, #288]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 80222a0:	681b      	ldr	r3, [r3, #0]
 80222a2:	4a54      	ldr	r2, [pc, #336]	; (80223f4 <FINGER_DMA_IrqHandler+0x11d8>)
 80222a4:	4293      	cmp	r3, r2
 80222a6:	d102      	bne.n	80222ae <FINGER_DMA_IrqHandler+0x1092>
 80222a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80222ac:	e01e      	b.n	80222ec <FINGER_DMA_IrqHandler+0x10d0>
 80222ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80222b2:	e01b      	b.n	80222ec <FINGER_DMA_IrqHandler+0x10d0>
 80222b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80222b8:	e018      	b.n	80222ec <FINGER_DMA_IrqHandler+0x10d0>
 80222ba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80222be:	e015      	b.n	80222ec <FINGER_DMA_IrqHandler+0x10d0>
 80222c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80222c4:	e012      	b.n	80222ec <FINGER_DMA_IrqHandler+0x10d0>
 80222c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80222ca:	e00f      	b.n	80222ec <FINGER_DMA_IrqHandler+0x10d0>
 80222cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80222d0:	e00c      	b.n	80222ec <FINGER_DMA_IrqHandler+0x10d0>
 80222d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80222d6:	e009      	b.n	80222ec <FINGER_DMA_IrqHandler+0x10d0>
 80222d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80222dc:	e006      	b.n	80222ec <FINGER_DMA_IrqHandler+0x10d0>
 80222de:	2304      	movs	r3, #4
 80222e0:	e004      	b.n	80222ec <FINGER_DMA_IrqHandler+0x10d0>
 80222e2:	2304      	movs	r3, #4
 80222e4:	e002      	b.n	80222ec <FINGER_DMA_IrqHandler+0x10d0>
 80222e6:	2304      	movs	r3, #4
 80222e8:	e000      	b.n	80222ec <FINGER_DMA_IrqHandler+0x10d0>
 80222ea:	2304      	movs	r3, #4
 80222ec:	4a42      	ldr	r2, [pc, #264]	; (80223f8 <FINGER_DMA_IrqHandler+0x11dc>)
 80222ee:	60d3      	str	r3, [r2, #12]
 80222f0:	e05f      	b.n	80223b2 <FINGER_DMA_IrqHandler+0x1196>
 80222f2:	4b33      	ldr	r3, [pc, #204]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 80222f4:	681b      	ldr	r3, [r3, #0]
 80222f6:	4a34      	ldr	r2, [pc, #208]	; (80223c8 <FINGER_DMA_IrqHandler+0x11ac>)
 80222f8:	4293      	cmp	r3, r2
 80222fa:	d057      	beq.n	80223ac <FINGER_DMA_IrqHandler+0x1190>
 80222fc:	4b30      	ldr	r3, [pc, #192]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 80222fe:	681b      	ldr	r3, [r3, #0]
 8022300:	4a32      	ldr	r2, [pc, #200]	; (80223cc <FINGER_DMA_IrqHandler+0x11b0>)
 8022302:	4293      	cmp	r3, r2
 8022304:	d050      	beq.n	80223a8 <FINGER_DMA_IrqHandler+0x118c>
 8022306:	4b2e      	ldr	r3, [pc, #184]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 8022308:	681b      	ldr	r3, [r3, #0]
 802230a:	4a31      	ldr	r2, [pc, #196]	; (80223d0 <FINGER_DMA_IrqHandler+0x11b4>)
 802230c:	4293      	cmp	r3, r2
 802230e:	d049      	beq.n	80223a4 <FINGER_DMA_IrqHandler+0x1188>
 8022310:	4b2b      	ldr	r3, [pc, #172]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 8022312:	681b      	ldr	r3, [r3, #0]
 8022314:	4a2f      	ldr	r2, [pc, #188]	; (80223d4 <FINGER_DMA_IrqHandler+0x11b8>)
 8022316:	4293      	cmp	r3, r2
 8022318:	d042      	beq.n	80223a0 <FINGER_DMA_IrqHandler+0x1184>
 802231a:	4b29      	ldr	r3, [pc, #164]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 802231c:	681b      	ldr	r3, [r3, #0]
 802231e:	4a2e      	ldr	r2, [pc, #184]	; (80223d8 <FINGER_DMA_IrqHandler+0x11bc>)
 8022320:	4293      	cmp	r3, r2
 8022322:	d03a      	beq.n	802239a <FINGER_DMA_IrqHandler+0x117e>
 8022324:	4b26      	ldr	r3, [pc, #152]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 8022326:	681b      	ldr	r3, [r3, #0]
 8022328:	4a2c      	ldr	r2, [pc, #176]	; (80223dc <FINGER_DMA_IrqHandler+0x11c0>)
 802232a:	4293      	cmp	r3, r2
 802232c:	d032      	beq.n	8022394 <FINGER_DMA_IrqHandler+0x1178>
 802232e:	4b24      	ldr	r3, [pc, #144]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 8022330:	681b      	ldr	r3, [r3, #0]
 8022332:	4a2b      	ldr	r2, [pc, #172]	; (80223e0 <FINGER_DMA_IrqHandler+0x11c4>)
 8022334:	4293      	cmp	r3, r2
 8022336:	d02a      	beq.n	802238e <FINGER_DMA_IrqHandler+0x1172>
 8022338:	4b21      	ldr	r3, [pc, #132]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 802233a:	681b      	ldr	r3, [r3, #0]
 802233c:	4a29      	ldr	r2, [pc, #164]	; (80223e4 <FINGER_DMA_IrqHandler+0x11c8>)
 802233e:	4293      	cmp	r3, r2
 8022340:	d022      	beq.n	8022388 <FINGER_DMA_IrqHandler+0x116c>
 8022342:	4b1f      	ldr	r3, [pc, #124]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 8022344:	681b      	ldr	r3, [r3, #0]
 8022346:	4a28      	ldr	r2, [pc, #160]	; (80223e8 <FINGER_DMA_IrqHandler+0x11cc>)
 8022348:	4293      	cmp	r3, r2
 802234a:	d01a      	beq.n	8022382 <FINGER_DMA_IrqHandler+0x1166>
 802234c:	4b1c      	ldr	r3, [pc, #112]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 802234e:	681b      	ldr	r3, [r3, #0]
 8022350:	4a26      	ldr	r2, [pc, #152]	; (80223ec <FINGER_DMA_IrqHandler+0x11d0>)
 8022352:	4293      	cmp	r3, r2
 8022354:	d012      	beq.n	802237c <FINGER_DMA_IrqHandler+0x1160>
 8022356:	4b1a      	ldr	r3, [pc, #104]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 8022358:	681b      	ldr	r3, [r3, #0]
 802235a:	4a25      	ldr	r2, [pc, #148]	; (80223f0 <FINGER_DMA_IrqHandler+0x11d4>)
 802235c:	4293      	cmp	r3, r2
 802235e:	d00a      	beq.n	8022376 <FINGER_DMA_IrqHandler+0x115a>
 8022360:	4b17      	ldr	r3, [pc, #92]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 8022362:	681b      	ldr	r3, [r3, #0]
 8022364:	4a23      	ldr	r2, [pc, #140]	; (80223f4 <FINGER_DMA_IrqHandler+0x11d8>)
 8022366:	4293      	cmp	r3, r2
 8022368:	d102      	bne.n	8022370 <FINGER_DMA_IrqHandler+0x1154>
 802236a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 802236e:	e01e      	b.n	80223ae <FINGER_DMA_IrqHandler+0x1192>
 8022370:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8022374:	e01b      	b.n	80223ae <FINGER_DMA_IrqHandler+0x1192>
 8022376:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 802237a:	e018      	b.n	80223ae <FINGER_DMA_IrqHandler+0x1192>
 802237c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8022380:	e015      	b.n	80223ae <FINGER_DMA_IrqHandler+0x1192>
 8022382:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8022386:	e012      	b.n	80223ae <FINGER_DMA_IrqHandler+0x1192>
 8022388:	f44f 7380 	mov.w	r3, #256	; 0x100
 802238c:	e00f      	b.n	80223ae <FINGER_DMA_IrqHandler+0x1192>
 802238e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8022392:	e00c      	b.n	80223ae <FINGER_DMA_IrqHandler+0x1192>
 8022394:	f44f 7380 	mov.w	r3, #256	; 0x100
 8022398:	e009      	b.n	80223ae <FINGER_DMA_IrqHandler+0x1192>
 802239a:	f44f 7380 	mov.w	r3, #256	; 0x100
 802239e:	e006      	b.n	80223ae <FINGER_DMA_IrqHandler+0x1192>
 80223a0:	2304      	movs	r3, #4
 80223a2:	e004      	b.n	80223ae <FINGER_DMA_IrqHandler+0x1192>
 80223a4:	2304      	movs	r3, #4
 80223a6:	e002      	b.n	80223ae <FINGER_DMA_IrqHandler+0x1192>
 80223a8:	2304      	movs	r3, #4
 80223aa:	e000      	b.n	80223ae <FINGER_DMA_IrqHandler+0x1192>
 80223ac:	2304      	movs	r3, #4
 80223ae:	4a12      	ldr	r2, [pc, #72]	; (80223f8 <FINGER_DMA_IrqHandler+0x11dc>)
 80223b0:	6093      	str	r3, [r2, #8]
        HAL_UART_Receive_DMA(&huart4, (uint8_t*) FINGER_DMA_RX, FINGER_DMA_RX_SZ);
 80223b2:	2280      	movs	r2, #128	; 0x80
 80223b4:	4911      	ldr	r1, [pc, #68]	; (80223fc <FINGER_DMA_IrqHandler+0x11e0>)
 80223b6:	4812      	ldr	r0, [pc, #72]	; (8022400 <FINGER_DMA_IrqHandler+0x11e4>)
 80223b8:	f014 f92a 	bl	8036610 <HAL_UART_Receive_DMA>
}
 80223bc:	bf00      	nop
 80223be:	bd80      	pop	{r7, pc}
 80223c0:	20008464 	.word	0x20008464
 80223c4:	40026058 	.word	0x40026058
 80223c8:	40026010 	.word	0x40026010
 80223cc:	40026410 	.word	0x40026410
 80223d0:	40026070 	.word	0x40026070
 80223d4:	40026470 	.word	0x40026470
 80223d8:	40026028 	.word	0x40026028
 80223dc:	40026428 	.word	0x40026428
 80223e0:	40026088 	.word	0x40026088
 80223e4:	40026488 	.word	0x40026488
 80223e8:	40026040 	.word	0x40026040
 80223ec:	40026440 	.word	0x40026440
 80223f0:	400260a0 	.word	0x400260a0
 80223f4:	400264a0 	.word	0x400264a0
 80223f8:	40026000 	.word	0x40026000
 80223fc:	20000cf8 	.word	0x20000cf8
 8022400:	20008898 	.word	0x20008898

08022404 <FINGER_DMA_Init>:

void FINGER_DMA_Init(void) {
 8022404:	b580      	push	{r7, lr}
 8022406:	af00      	add	r7, sp, #0
    __HAL_UART_ENABLE_IT(&huart4, UART_IT_IDLE);        // enable idle line interrupt
 8022408:	4b0f      	ldr	r3, [pc, #60]	; (8022448 <FINGER_DMA_Init+0x44>)
 802240a:	681b      	ldr	r3, [r3, #0]
 802240c:	68da      	ldr	r2, [r3, #12]
 802240e:	4b0e      	ldr	r3, [pc, #56]	; (8022448 <FINGER_DMA_Init+0x44>)
 8022410:	681b      	ldr	r3, [r3, #0]
 8022412:	f042 0210 	orr.w	r2, r2, #16
 8022416:	60da      	str	r2, [r3, #12]
    __HAL_DMA_ENABLE_IT(&hdma_uart4_rx, DMA_IT_TC);    // enable DMA Tx cplt interrupt
 8022418:	4b0c      	ldr	r3, [pc, #48]	; (802244c <FINGER_DMA_Init+0x48>)
 802241a:	681b      	ldr	r3, [r3, #0]
 802241c:	681a      	ldr	r2, [r3, #0]
 802241e:	4b0b      	ldr	r3, [pc, #44]	; (802244c <FINGER_DMA_Init+0x48>)
 8022420:	681b      	ldr	r3, [r3, #0]
 8022422:	f042 0210 	orr.w	r2, r2, #16
 8022426:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE_IT(&hdma_uart4_rx, DMA_IT_HT);    // enable half complete interrupt
 8022428:	4b08      	ldr	r3, [pc, #32]	; (802244c <FINGER_DMA_Init+0x48>)
 802242a:	681b      	ldr	r3, [r3, #0]
 802242c:	681a      	ldr	r2, [r3, #0]
 802242e:	4b07      	ldr	r3, [pc, #28]	; (802244c <FINGER_DMA_Init+0x48>)
 8022430:	681b      	ldr	r3, [r3, #0]
 8022432:	f042 0208 	orr.w	r2, r2, #8
 8022436:	601a      	str	r2, [r3, #0]

    /* Start DMA transfer */
    HAL_UART_Receive_DMA(&huart4, (uint8_t*) FINGER_DMA_RX, FINGER_DMA_RX_SZ);
 8022438:	2280      	movs	r2, #128	; 0x80
 802243a:	4905      	ldr	r1, [pc, #20]	; (8022450 <FINGER_DMA_Init+0x4c>)
 802243c:	4802      	ldr	r0, [pc, #8]	; (8022448 <FINGER_DMA_Init+0x44>)
 802243e:	f014 f8e7 	bl	8036610 <HAL_UART_Receive_DMA>
}
 8022442:	bf00      	nop
 8022444:	bd80      	pop	{r7, pc}
 8022446:	bf00      	nop
 8022448:	20008898 	.word	0x20008898
 802244c:	20008464 	.word	0x20008464
 8022450:	20000cf8 	.word	0x20000cf8

08022454 <FINGER_Check_Buffer>:

static void FINGER_Check_Buffer(void) {
 8022454:	b580      	push	{r7, lr}
 8022456:	b082      	sub	sp, #8
 8022458:	af00      	add	r7, sp, #0
    static size_t old_pos;
    size_t pos;

    /* Calculate current position in buffer */
    pos = FINGER_DMA_RX_SZ - __HAL_DMA_GET_COUNTER(&hdma_uart4_rx);
 802245a:	4b1e      	ldr	r3, [pc, #120]	; (80224d4 <FINGER_Check_Buffer+0x80>)
 802245c:	681b      	ldr	r3, [r3, #0]
 802245e:	685b      	ldr	r3, [r3, #4]
 8022460:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8022464:	607b      	str	r3, [r7, #4]
    if (pos != old_pos) { /* Check change in received data */
 8022466:	4b1c      	ldr	r3, [pc, #112]	; (80224d8 <FINGER_Check_Buffer+0x84>)
 8022468:	681b      	ldr	r3, [r3, #0]
 802246a:	687a      	ldr	r2, [r7, #4]
 802246c:	429a      	cmp	r2, r3
 802246e:	d023      	beq.n	80224b8 <FINGER_Check_Buffer+0x64>
        if (pos > old_pos) { /* Current position is over previous one */
 8022470:	4b19      	ldr	r3, [pc, #100]	; (80224d8 <FINGER_Check_Buffer+0x84>)
 8022472:	681b      	ldr	r3, [r3, #0]
 8022474:	687a      	ldr	r2, [r7, #4]
 8022476:	429a      	cmp	r2, r3
 8022478:	d90b      	bls.n	8022492 <FINGER_Check_Buffer+0x3e>
            /* We are in "linear" mode */
            /* Process data directly by subtracting "pointers" */
            FINGER_Fill_Buffer(&FINGER_DMA_RX[old_pos], pos - old_pos);
 802247a:	4b17      	ldr	r3, [pc, #92]	; (80224d8 <FINGER_Check_Buffer+0x84>)
 802247c:	681b      	ldr	r3, [r3, #0]
 802247e:	4a17      	ldr	r2, [pc, #92]	; (80224dc <FINGER_Check_Buffer+0x88>)
 8022480:	1898      	adds	r0, r3, r2
 8022482:	4b15      	ldr	r3, [pc, #84]	; (80224d8 <FINGER_Check_Buffer+0x84>)
 8022484:	681b      	ldr	r3, [r3, #0]
 8022486:	687a      	ldr	r2, [r7, #4]
 8022488:	1ad3      	subs	r3, r2, r3
 802248a:	4619      	mov	r1, r3
 802248c:	f000 f828 	bl	80224e0 <FINGER_Fill_Buffer>
 8022490:	e012      	b.n	80224b8 <FINGER_Check_Buffer+0x64>
        } else {
            /* We are in "overflow" mode */
            /* First process data to the end of buffer */
            FINGER_Fill_Buffer(&FINGER_DMA_RX[old_pos], FINGER_DMA_RX_SZ - old_pos);
 8022492:	4b11      	ldr	r3, [pc, #68]	; (80224d8 <FINGER_Check_Buffer+0x84>)
 8022494:	681b      	ldr	r3, [r3, #0]
 8022496:	4a11      	ldr	r2, [pc, #68]	; (80224dc <FINGER_Check_Buffer+0x88>)
 8022498:	441a      	add	r2, r3
 802249a:	4b0f      	ldr	r3, [pc, #60]	; (80224d8 <FINGER_Check_Buffer+0x84>)
 802249c:	681b      	ldr	r3, [r3, #0]
 802249e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80224a2:	4619      	mov	r1, r3
 80224a4:	4610      	mov	r0, r2
 80224a6:	f000 f81b 	bl	80224e0 <FINGER_Fill_Buffer>
            /* Check and continue with beginning of buffer */
            if (pos > 0) {
 80224aa:	687b      	ldr	r3, [r7, #4]
 80224ac:	2b00      	cmp	r3, #0
 80224ae:	d003      	beq.n	80224b8 <FINGER_Check_Buffer+0x64>
                FINGER_Fill_Buffer(&FINGER_DMA_RX[0], pos);
 80224b0:	6879      	ldr	r1, [r7, #4]
 80224b2:	480a      	ldr	r0, [pc, #40]	; (80224dc <FINGER_Check_Buffer+0x88>)
 80224b4:	f000 f814 	bl	80224e0 <FINGER_Fill_Buffer>
            }
        }
    }
    old_pos = pos; /* Save current position as old */
 80224b8:	4a07      	ldr	r2, [pc, #28]	; (80224d8 <FINGER_Check_Buffer+0x84>)
 80224ba:	687b      	ldr	r3, [r7, #4]
 80224bc:	6013      	str	r3, [r2, #0]

    /* Check and manually update if we reached end of buffer */
    if (old_pos == FINGER_DMA_RX_SZ) {
 80224be:	4b06      	ldr	r3, [pc, #24]	; (80224d8 <FINGER_Check_Buffer+0x84>)
 80224c0:	681b      	ldr	r3, [r3, #0]
 80224c2:	2b80      	cmp	r3, #128	; 0x80
 80224c4:	d102      	bne.n	80224cc <FINGER_Check_Buffer+0x78>
        old_pos = 0;
 80224c6:	4b04      	ldr	r3, [pc, #16]	; (80224d8 <FINGER_Check_Buffer+0x84>)
 80224c8:	2200      	movs	r2, #0
 80224ca:	601a      	str	r2, [r3, #0]
    }
}
 80224cc:	bf00      	nop
 80224ce:	3708      	adds	r7, #8
 80224d0:	46bd      	mov	sp, r7
 80224d2:	bd80      	pop	{r7, pc}
 80224d4:	20008464 	.word	0x20008464
 80224d8:	20000d7c 	.word	0x20000d7c
 80224dc:	20000cf8 	.word	0x20000cf8

080224e0 <FINGER_Fill_Buffer>:

static void FINGER_Fill_Buffer(const void *data, size_t len) {
 80224e0:	b580      	push	{r7, lr}
 80224e2:	b082      	sub	sp, #8
 80224e4:	af00      	add	r7, sp, #0
 80224e6:	6078      	str	r0, [r7, #4]
 80224e8:	6039      	str	r1, [r7, #0]
    /* Write data to buffer */
    memcpy(&FINGER_UART_RX[finger_write], data, len);
 80224ea:	4b09      	ldr	r3, [pc, #36]	; (8022510 <FINGER_Fill_Buffer+0x30>)
 80224ec:	681b      	ldr	r3, [r3, #0]
 80224ee:	4a09      	ldr	r2, [pc, #36]	; (8022514 <FINGER_Fill_Buffer+0x34>)
 80224f0:	4413      	add	r3, r2
 80224f2:	683a      	ldr	r2, [r7, #0]
 80224f4:	6879      	ldr	r1, [r7, #4]
 80224f6:	4618      	mov	r0, r3
 80224f8:	f01d f9ff 	bl	803f8fa <memcpy>
    finger_write += len;
 80224fc:	4b04      	ldr	r3, [pc, #16]	; (8022510 <FINGER_Fill_Buffer+0x30>)
 80224fe:	681a      	ldr	r2, [r3, #0]
 8022500:	683b      	ldr	r3, [r7, #0]
 8022502:	4413      	add	r3, r2
 8022504:	4a02      	ldr	r2, [pc, #8]	; (8022510 <FINGER_Fill_Buffer+0x30>)
 8022506:	6013      	str	r3, [r2, #0]
}
 8022508:	bf00      	nop
 802250a:	3708      	adds	r7, #8
 802250c:	46bd      	mov	sp, r7
 802250e:	bd80      	pop	{r7, pc}
 8022510:	20000d78 	.word	0x20000d78
 8022514:	20008064 	.word	0x20008064

08022518 <FINGER_Reset_Buffer>:

void FINGER_Reset_Buffer(void) {
 8022518:	b580      	push	{r7, lr}
 802251a:	af00      	add	r7, sp, #0
    // clear rx buffer
    memset(FINGER_UART_RX, 0x00, finger_write);
 802251c:	4b05      	ldr	r3, [pc, #20]	; (8022534 <FINGER_Reset_Buffer+0x1c>)
 802251e:	681b      	ldr	r3, [r3, #0]
 8022520:	461a      	mov	r2, r3
 8022522:	2100      	movs	r1, #0
 8022524:	4804      	ldr	r0, [pc, #16]	; (8022538 <FINGER_Reset_Buffer+0x20>)
 8022526:	f01d f9f3 	bl	803f910 <memset>
    finger_write = 0;
 802252a:	4b02      	ldr	r3, [pc, #8]	; (8022534 <FINGER_Reset_Buffer+0x1c>)
 802252c:	2200      	movs	r2, #0
 802252e:	601a      	str	r2, [r3, #0]
}
 8022530:	bf00      	nop
 8022532:	bd80      	pop	{r7, pc}
 8022534:	20000d78 	.word	0x20000d78
 8022538:	20008064 	.word	0x20008064

0802253c <FINGER_Transmit8>:

uint8_t FINGER_Transmit8(uint8_t *pData) {
 802253c:	b580      	push	{r7, lr}
 802253e:	b082      	sub	sp, #8
 8022540:	af00      	add	r7, sp, #0
 8022542:	6078      	str	r0, [r7, #4]
    return (HAL_UART_Transmit(&huart4, pData, 1, HAL_MAX_DELAY) == HAL_OK);
 8022544:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022548:	2201      	movs	r2, #1
 802254a:	6879      	ldr	r1, [r7, #4]
 802254c:	4806      	ldr	r0, [pc, #24]	; (8022568 <FINGER_Transmit8+0x2c>)
 802254e:	f013 ffc6 	bl	80364de <HAL_UART_Transmit>
 8022552:	4603      	mov	r3, r0
 8022554:	2b00      	cmp	r3, #0
 8022556:	bf0c      	ite	eq
 8022558:	2301      	moveq	r3, #1
 802255a:	2300      	movne	r3, #0
 802255c:	b2db      	uxtb	r3, r3
}
 802255e:	4618      	mov	r0, r3
 8022560:	3708      	adds	r7, #8
 8022562:	46bd      	mov	sp, r7
 8022564:	bd80      	pop	{r7, pc}
 8022566:	bf00      	nop
 8022568:	20008898 	.word	0x20008898

0802256c <UBLOX_USART_IrqHandler>:
static void UBLOX_Check_Buffer(uint8_t idle);
static void UBLOX_Fill_Buffer(const void *data, size_t len);
static void UBLOX_Reset_Buffer(void);

/* Public functions implementation ---------------------------------------------*/
void UBLOX_USART_IrqHandler(void) {
 802256c:	b580      	push	{r7, lr}
 802256e:	b082      	sub	sp, #8
 8022570:	af00      	add	r7, sp, #0
    /* if Idle flag is set */
    if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE)) {
 8022572:	4b0c      	ldr	r3, [pc, #48]	; (80225a4 <UBLOX_USART_IrqHandler+0x38>)
 8022574:	681b      	ldr	r3, [r3, #0]
 8022576:	681b      	ldr	r3, [r3, #0]
 8022578:	f003 0310 	and.w	r3, r3, #16
 802257c:	2b10      	cmp	r3, #16
 802257e:	d10d      	bne.n	802259c <UBLOX_USART_IrqHandler+0x30>
        /* Clear idle flag */
        __HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8022580:	2300      	movs	r3, #0
 8022582:	607b      	str	r3, [r7, #4]
 8022584:	4b07      	ldr	r3, [pc, #28]	; (80225a4 <UBLOX_USART_IrqHandler+0x38>)
 8022586:	681b      	ldr	r3, [r3, #0]
 8022588:	681b      	ldr	r3, [r3, #0]
 802258a:	607b      	str	r3, [r7, #4]
 802258c:	4b05      	ldr	r3, [pc, #20]	; (80225a4 <UBLOX_USART_IrqHandler+0x38>)
 802258e:	681b      	ldr	r3, [r3, #0]
 8022590:	685b      	ldr	r3, [r3, #4]
 8022592:	607b      	str	r3, [r7, #4]
 8022594:	687b      	ldr	r3, [r7, #4]

        UBLOX_Check_Buffer(1);
 8022596:	2001      	movs	r0, #1
 8022598:	f001 f922 	bl	80237e0 <UBLOX_Check_Buffer>
    }
}
 802259c:	bf00      	nop
 802259e:	3708      	adds	r7, #8
 80225a0:	46bd      	mov	sp, r7
 80225a2:	bd80      	pop	{r7, pc}
 80225a4:	20008938 	.word	0x20008938

080225a8 <UBLOX_DMA_IrqHandler>:

void UBLOX_DMA_IrqHandler(void) {
 80225a8:	b580      	push	{r7, lr}
 80225aa:	af00      	add	r7, sp, #0
    // if the source is HT
    if (__HAL_DMA_GET_IT_SOURCE(&hdma_usart2_rx, DMA_IT_HT)) {
 80225ac:	4b9a      	ldr	r3, [pc, #616]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80225ae:	681b      	ldr	r3, [r3, #0]
 80225b0:	681b      	ldr	r3, [r3, #0]
 80225b2:	f003 0308 	and.w	r3, r3, #8
 80225b6:	2b00      	cmp	r3, #0
 80225b8:	f000 81bd 	beq.w	8022936 <UBLOX_DMA_IrqHandler+0x38e>
        /* Clear HT flag */
        __HAL_DMA_CLEAR_FLAG(&hdma_usart2_rx, __HAL_DMA_GET_HT_FLAG_INDEX(&hdma_usart2_rx));
 80225bc:	4b96      	ldr	r3, [pc, #600]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80225be:	681b      	ldr	r3, [r3, #0]
 80225c0:	461a      	mov	r2, r3
 80225c2:	4b96      	ldr	r3, [pc, #600]	; (802281c <UBLOX_DMA_IrqHandler+0x274>)
 80225c4:	429a      	cmp	r2, r3
 80225c6:	d960      	bls.n	802268a <UBLOX_DMA_IrqHandler+0xe2>
 80225c8:	4b93      	ldr	r3, [pc, #588]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80225ca:	681b      	ldr	r3, [r3, #0]
 80225cc:	4a94      	ldr	r2, [pc, #592]	; (8022820 <UBLOX_DMA_IrqHandler+0x278>)
 80225ce:	4293      	cmp	r3, r2
 80225d0:	d057      	beq.n	8022682 <UBLOX_DMA_IrqHandler+0xda>
 80225d2:	4b91      	ldr	r3, [pc, #580]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80225d4:	681b      	ldr	r3, [r3, #0]
 80225d6:	4a93      	ldr	r2, [pc, #588]	; (8022824 <UBLOX_DMA_IrqHandler+0x27c>)
 80225d8:	4293      	cmp	r3, r2
 80225da:	d050      	beq.n	802267e <UBLOX_DMA_IrqHandler+0xd6>
 80225dc:	4b8e      	ldr	r3, [pc, #568]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80225de:	681b      	ldr	r3, [r3, #0]
 80225e0:	4a91      	ldr	r2, [pc, #580]	; (8022828 <UBLOX_DMA_IrqHandler+0x280>)
 80225e2:	4293      	cmp	r3, r2
 80225e4:	d049      	beq.n	802267a <UBLOX_DMA_IrqHandler+0xd2>
 80225e6:	4b8c      	ldr	r3, [pc, #560]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80225e8:	681b      	ldr	r3, [r3, #0]
 80225ea:	4a90      	ldr	r2, [pc, #576]	; (802282c <UBLOX_DMA_IrqHandler+0x284>)
 80225ec:	4293      	cmp	r3, r2
 80225ee:	d042      	beq.n	8022676 <UBLOX_DMA_IrqHandler+0xce>
 80225f0:	4b89      	ldr	r3, [pc, #548]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80225f2:	681b      	ldr	r3, [r3, #0]
 80225f4:	4a8e      	ldr	r2, [pc, #568]	; (8022830 <UBLOX_DMA_IrqHandler+0x288>)
 80225f6:	4293      	cmp	r3, r2
 80225f8:	d03a      	beq.n	8022670 <UBLOX_DMA_IrqHandler+0xc8>
 80225fa:	4b87      	ldr	r3, [pc, #540]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80225fc:	681b      	ldr	r3, [r3, #0]
 80225fe:	4a8d      	ldr	r2, [pc, #564]	; (8022834 <UBLOX_DMA_IrqHandler+0x28c>)
 8022600:	4293      	cmp	r3, r2
 8022602:	d032      	beq.n	802266a <UBLOX_DMA_IrqHandler+0xc2>
 8022604:	4b84      	ldr	r3, [pc, #528]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 8022606:	681b      	ldr	r3, [r3, #0]
 8022608:	4a8b      	ldr	r2, [pc, #556]	; (8022838 <UBLOX_DMA_IrqHandler+0x290>)
 802260a:	4293      	cmp	r3, r2
 802260c:	d02a      	beq.n	8022664 <UBLOX_DMA_IrqHandler+0xbc>
 802260e:	4b82      	ldr	r3, [pc, #520]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 8022610:	681b      	ldr	r3, [r3, #0]
 8022612:	4a8a      	ldr	r2, [pc, #552]	; (802283c <UBLOX_DMA_IrqHandler+0x294>)
 8022614:	4293      	cmp	r3, r2
 8022616:	d022      	beq.n	802265e <UBLOX_DMA_IrqHandler+0xb6>
 8022618:	4b7f      	ldr	r3, [pc, #508]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 802261a:	681b      	ldr	r3, [r3, #0]
 802261c:	4a88      	ldr	r2, [pc, #544]	; (8022840 <UBLOX_DMA_IrqHandler+0x298>)
 802261e:	4293      	cmp	r3, r2
 8022620:	d01a      	beq.n	8022658 <UBLOX_DMA_IrqHandler+0xb0>
 8022622:	4b7d      	ldr	r3, [pc, #500]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 8022624:	681b      	ldr	r3, [r3, #0]
 8022626:	4a87      	ldr	r2, [pc, #540]	; (8022844 <UBLOX_DMA_IrqHandler+0x29c>)
 8022628:	4293      	cmp	r3, r2
 802262a:	d012      	beq.n	8022652 <UBLOX_DMA_IrqHandler+0xaa>
 802262c:	4b7a      	ldr	r3, [pc, #488]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 802262e:	681b      	ldr	r3, [r3, #0]
 8022630:	4a85      	ldr	r2, [pc, #532]	; (8022848 <UBLOX_DMA_IrqHandler+0x2a0>)
 8022632:	4293      	cmp	r3, r2
 8022634:	d00a      	beq.n	802264c <UBLOX_DMA_IrqHandler+0xa4>
 8022636:	4b78      	ldr	r3, [pc, #480]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 8022638:	681b      	ldr	r3, [r3, #0]
 802263a:	4a84      	ldr	r2, [pc, #528]	; (802284c <UBLOX_DMA_IrqHandler+0x2a4>)
 802263c:	4293      	cmp	r3, r2
 802263e:	d102      	bne.n	8022646 <UBLOX_DMA_IrqHandler+0x9e>
 8022640:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8022644:	e01e      	b.n	8022684 <UBLOX_DMA_IrqHandler+0xdc>
 8022646:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 802264a:	e01b      	b.n	8022684 <UBLOX_DMA_IrqHandler+0xdc>
 802264c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8022650:	e018      	b.n	8022684 <UBLOX_DMA_IrqHandler+0xdc>
 8022652:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8022656:	e015      	b.n	8022684 <UBLOX_DMA_IrqHandler+0xdc>
 8022658:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 802265c:	e012      	b.n	8022684 <UBLOX_DMA_IrqHandler+0xdc>
 802265e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022662:	e00f      	b.n	8022684 <UBLOX_DMA_IrqHandler+0xdc>
 8022664:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022668:	e00c      	b.n	8022684 <UBLOX_DMA_IrqHandler+0xdc>
 802266a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802266e:	e009      	b.n	8022684 <UBLOX_DMA_IrqHandler+0xdc>
 8022670:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022674:	e006      	b.n	8022684 <UBLOX_DMA_IrqHandler+0xdc>
 8022676:	2310      	movs	r3, #16
 8022678:	e004      	b.n	8022684 <UBLOX_DMA_IrqHandler+0xdc>
 802267a:	2310      	movs	r3, #16
 802267c:	e002      	b.n	8022684 <UBLOX_DMA_IrqHandler+0xdc>
 802267e:	2310      	movs	r3, #16
 8022680:	e000      	b.n	8022684 <UBLOX_DMA_IrqHandler+0xdc>
 8022682:	2310      	movs	r3, #16
 8022684:	4a72      	ldr	r2, [pc, #456]	; (8022850 <UBLOX_DMA_IrqHandler+0x2a8>)
 8022686:	60d3      	str	r3, [r2, #12]
 8022688:	e150      	b.n	802292c <UBLOX_DMA_IrqHandler+0x384>
 802268a:	4b63      	ldr	r3, [pc, #396]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 802268c:	681b      	ldr	r3, [r3, #0]
 802268e:	461a      	mov	r2, r3
 8022690:	4b70      	ldr	r3, [pc, #448]	; (8022854 <UBLOX_DMA_IrqHandler+0x2ac>)
 8022692:	429a      	cmp	r2, r3
 8022694:	d960      	bls.n	8022758 <UBLOX_DMA_IrqHandler+0x1b0>
 8022696:	4b60      	ldr	r3, [pc, #384]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 8022698:	681b      	ldr	r3, [r3, #0]
 802269a:	4a61      	ldr	r2, [pc, #388]	; (8022820 <UBLOX_DMA_IrqHandler+0x278>)
 802269c:	4293      	cmp	r3, r2
 802269e:	d057      	beq.n	8022750 <UBLOX_DMA_IrqHandler+0x1a8>
 80226a0:	4b5d      	ldr	r3, [pc, #372]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80226a2:	681b      	ldr	r3, [r3, #0]
 80226a4:	4a5f      	ldr	r2, [pc, #380]	; (8022824 <UBLOX_DMA_IrqHandler+0x27c>)
 80226a6:	4293      	cmp	r3, r2
 80226a8:	d050      	beq.n	802274c <UBLOX_DMA_IrqHandler+0x1a4>
 80226aa:	4b5b      	ldr	r3, [pc, #364]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80226ac:	681b      	ldr	r3, [r3, #0]
 80226ae:	4a5e      	ldr	r2, [pc, #376]	; (8022828 <UBLOX_DMA_IrqHandler+0x280>)
 80226b0:	4293      	cmp	r3, r2
 80226b2:	d049      	beq.n	8022748 <UBLOX_DMA_IrqHandler+0x1a0>
 80226b4:	4b58      	ldr	r3, [pc, #352]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80226b6:	681b      	ldr	r3, [r3, #0]
 80226b8:	4a5c      	ldr	r2, [pc, #368]	; (802282c <UBLOX_DMA_IrqHandler+0x284>)
 80226ba:	4293      	cmp	r3, r2
 80226bc:	d042      	beq.n	8022744 <UBLOX_DMA_IrqHandler+0x19c>
 80226be:	4b56      	ldr	r3, [pc, #344]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80226c0:	681b      	ldr	r3, [r3, #0]
 80226c2:	4a5b      	ldr	r2, [pc, #364]	; (8022830 <UBLOX_DMA_IrqHandler+0x288>)
 80226c4:	4293      	cmp	r3, r2
 80226c6:	d03a      	beq.n	802273e <UBLOX_DMA_IrqHandler+0x196>
 80226c8:	4b53      	ldr	r3, [pc, #332]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80226ca:	681b      	ldr	r3, [r3, #0]
 80226cc:	4a59      	ldr	r2, [pc, #356]	; (8022834 <UBLOX_DMA_IrqHandler+0x28c>)
 80226ce:	4293      	cmp	r3, r2
 80226d0:	d032      	beq.n	8022738 <UBLOX_DMA_IrqHandler+0x190>
 80226d2:	4b51      	ldr	r3, [pc, #324]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80226d4:	681b      	ldr	r3, [r3, #0]
 80226d6:	4a58      	ldr	r2, [pc, #352]	; (8022838 <UBLOX_DMA_IrqHandler+0x290>)
 80226d8:	4293      	cmp	r3, r2
 80226da:	d02a      	beq.n	8022732 <UBLOX_DMA_IrqHandler+0x18a>
 80226dc:	4b4e      	ldr	r3, [pc, #312]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80226de:	681b      	ldr	r3, [r3, #0]
 80226e0:	4a56      	ldr	r2, [pc, #344]	; (802283c <UBLOX_DMA_IrqHandler+0x294>)
 80226e2:	4293      	cmp	r3, r2
 80226e4:	d022      	beq.n	802272c <UBLOX_DMA_IrqHandler+0x184>
 80226e6:	4b4c      	ldr	r3, [pc, #304]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80226e8:	681b      	ldr	r3, [r3, #0]
 80226ea:	4a55      	ldr	r2, [pc, #340]	; (8022840 <UBLOX_DMA_IrqHandler+0x298>)
 80226ec:	4293      	cmp	r3, r2
 80226ee:	d01a      	beq.n	8022726 <UBLOX_DMA_IrqHandler+0x17e>
 80226f0:	4b49      	ldr	r3, [pc, #292]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80226f2:	681b      	ldr	r3, [r3, #0]
 80226f4:	4a53      	ldr	r2, [pc, #332]	; (8022844 <UBLOX_DMA_IrqHandler+0x29c>)
 80226f6:	4293      	cmp	r3, r2
 80226f8:	d012      	beq.n	8022720 <UBLOX_DMA_IrqHandler+0x178>
 80226fa:	4b47      	ldr	r3, [pc, #284]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80226fc:	681b      	ldr	r3, [r3, #0]
 80226fe:	4a52      	ldr	r2, [pc, #328]	; (8022848 <UBLOX_DMA_IrqHandler+0x2a0>)
 8022700:	4293      	cmp	r3, r2
 8022702:	d00a      	beq.n	802271a <UBLOX_DMA_IrqHandler+0x172>
 8022704:	4b44      	ldr	r3, [pc, #272]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 8022706:	681b      	ldr	r3, [r3, #0]
 8022708:	4a50      	ldr	r2, [pc, #320]	; (802284c <UBLOX_DMA_IrqHandler+0x2a4>)
 802270a:	4293      	cmp	r3, r2
 802270c:	d102      	bne.n	8022714 <UBLOX_DMA_IrqHandler+0x16c>
 802270e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8022712:	e01e      	b.n	8022752 <UBLOX_DMA_IrqHandler+0x1aa>
 8022714:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8022718:	e01b      	b.n	8022752 <UBLOX_DMA_IrqHandler+0x1aa>
 802271a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 802271e:	e018      	b.n	8022752 <UBLOX_DMA_IrqHandler+0x1aa>
 8022720:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8022724:	e015      	b.n	8022752 <UBLOX_DMA_IrqHandler+0x1aa>
 8022726:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 802272a:	e012      	b.n	8022752 <UBLOX_DMA_IrqHandler+0x1aa>
 802272c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022730:	e00f      	b.n	8022752 <UBLOX_DMA_IrqHandler+0x1aa>
 8022732:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022736:	e00c      	b.n	8022752 <UBLOX_DMA_IrqHandler+0x1aa>
 8022738:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802273c:	e009      	b.n	8022752 <UBLOX_DMA_IrqHandler+0x1aa>
 802273e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022742:	e006      	b.n	8022752 <UBLOX_DMA_IrqHandler+0x1aa>
 8022744:	2310      	movs	r3, #16
 8022746:	e004      	b.n	8022752 <UBLOX_DMA_IrqHandler+0x1aa>
 8022748:	2310      	movs	r3, #16
 802274a:	e002      	b.n	8022752 <UBLOX_DMA_IrqHandler+0x1aa>
 802274c:	2310      	movs	r3, #16
 802274e:	e000      	b.n	8022752 <UBLOX_DMA_IrqHandler+0x1aa>
 8022750:	2310      	movs	r3, #16
 8022752:	4a3f      	ldr	r2, [pc, #252]	; (8022850 <UBLOX_DMA_IrqHandler+0x2a8>)
 8022754:	6093      	str	r3, [r2, #8]
 8022756:	e0e9      	b.n	802292c <UBLOX_DMA_IrqHandler+0x384>
 8022758:	4b2f      	ldr	r3, [pc, #188]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 802275a:	681b      	ldr	r3, [r3, #0]
 802275c:	461a      	mov	r2, r3
 802275e:	4b3e      	ldr	r3, [pc, #248]	; (8022858 <UBLOX_DMA_IrqHandler+0x2b0>)
 8022760:	429a      	cmp	r2, r3
 8022762:	f240 8083 	bls.w	802286c <UBLOX_DMA_IrqHandler+0x2c4>
 8022766:	4b2c      	ldr	r3, [pc, #176]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 8022768:	681b      	ldr	r3, [r3, #0]
 802276a:	4a2d      	ldr	r2, [pc, #180]	; (8022820 <UBLOX_DMA_IrqHandler+0x278>)
 802276c:	4293      	cmp	r3, r2
 802276e:	d079      	beq.n	8022864 <UBLOX_DMA_IrqHandler+0x2bc>
 8022770:	4b29      	ldr	r3, [pc, #164]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 8022772:	681b      	ldr	r3, [r3, #0]
 8022774:	4a2b      	ldr	r2, [pc, #172]	; (8022824 <UBLOX_DMA_IrqHandler+0x27c>)
 8022776:	4293      	cmp	r3, r2
 8022778:	d072      	beq.n	8022860 <UBLOX_DMA_IrqHandler+0x2b8>
 802277a:	4b27      	ldr	r3, [pc, #156]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 802277c:	681b      	ldr	r3, [r3, #0]
 802277e:	4a2a      	ldr	r2, [pc, #168]	; (8022828 <UBLOX_DMA_IrqHandler+0x280>)
 8022780:	4293      	cmp	r3, r2
 8022782:	d06b      	beq.n	802285c <UBLOX_DMA_IrqHandler+0x2b4>
 8022784:	4b24      	ldr	r3, [pc, #144]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 8022786:	681b      	ldr	r3, [r3, #0]
 8022788:	4a28      	ldr	r2, [pc, #160]	; (802282c <UBLOX_DMA_IrqHandler+0x284>)
 802278a:	4293      	cmp	r3, r2
 802278c:	d042      	beq.n	8022814 <UBLOX_DMA_IrqHandler+0x26c>
 802278e:	4b22      	ldr	r3, [pc, #136]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 8022790:	681b      	ldr	r3, [r3, #0]
 8022792:	4a27      	ldr	r2, [pc, #156]	; (8022830 <UBLOX_DMA_IrqHandler+0x288>)
 8022794:	4293      	cmp	r3, r2
 8022796:	d03a      	beq.n	802280e <UBLOX_DMA_IrqHandler+0x266>
 8022798:	4b1f      	ldr	r3, [pc, #124]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 802279a:	681b      	ldr	r3, [r3, #0]
 802279c:	4a25      	ldr	r2, [pc, #148]	; (8022834 <UBLOX_DMA_IrqHandler+0x28c>)
 802279e:	4293      	cmp	r3, r2
 80227a0:	d032      	beq.n	8022808 <UBLOX_DMA_IrqHandler+0x260>
 80227a2:	4b1d      	ldr	r3, [pc, #116]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80227a4:	681b      	ldr	r3, [r3, #0]
 80227a6:	4a24      	ldr	r2, [pc, #144]	; (8022838 <UBLOX_DMA_IrqHandler+0x290>)
 80227a8:	4293      	cmp	r3, r2
 80227aa:	d02a      	beq.n	8022802 <UBLOX_DMA_IrqHandler+0x25a>
 80227ac:	4b1a      	ldr	r3, [pc, #104]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80227ae:	681b      	ldr	r3, [r3, #0]
 80227b0:	4a22      	ldr	r2, [pc, #136]	; (802283c <UBLOX_DMA_IrqHandler+0x294>)
 80227b2:	4293      	cmp	r3, r2
 80227b4:	d022      	beq.n	80227fc <UBLOX_DMA_IrqHandler+0x254>
 80227b6:	4b18      	ldr	r3, [pc, #96]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80227b8:	681b      	ldr	r3, [r3, #0]
 80227ba:	4a21      	ldr	r2, [pc, #132]	; (8022840 <UBLOX_DMA_IrqHandler+0x298>)
 80227bc:	4293      	cmp	r3, r2
 80227be:	d01a      	beq.n	80227f6 <UBLOX_DMA_IrqHandler+0x24e>
 80227c0:	4b15      	ldr	r3, [pc, #84]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80227c2:	681b      	ldr	r3, [r3, #0]
 80227c4:	4a1f      	ldr	r2, [pc, #124]	; (8022844 <UBLOX_DMA_IrqHandler+0x29c>)
 80227c6:	4293      	cmp	r3, r2
 80227c8:	d012      	beq.n	80227f0 <UBLOX_DMA_IrqHandler+0x248>
 80227ca:	4b13      	ldr	r3, [pc, #76]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80227cc:	681b      	ldr	r3, [r3, #0]
 80227ce:	4a1e      	ldr	r2, [pc, #120]	; (8022848 <UBLOX_DMA_IrqHandler+0x2a0>)
 80227d0:	4293      	cmp	r3, r2
 80227d2:	d00a      	beq.n	80227ea <UBLOX_DMA_IrqHandler+0x242>
 80227d4:	4b10      	ldr	r3, [pc, #64]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80227d6:	681b      	ldr	r3, [r3, #0]
 80227d8:	4a1c      	ldr	r2, [pc, #112]	; (802284c <UBLOX_DMA_IrqHandler+0x2a4>)
 80227da:	4293      	cmp	r3, r2
 80227dc:	d102      	bne.n	80227e4 <UBLOX_DMA_IrqHandler+0x23c>
 80227de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80227e2:	e040      	b.n	8022866 <UBLOX_DMA_IrqHandler+0x2be>
 80227e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80227e8:	e03d      	b.n	8022866 <UBLOX_DMA_IrqHandler+0x2be>
 80227ea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80227ee:	e03a      	b.n	8022866 <UBLOX_DMA_IrqHandler+0x2be>
 80227f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80227f4:	e037      	b.n	8022866 <UBLOX_DMA_IrqHandler+0x2be>
 80227f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80227fa:	e034      	b.n	8022866 <UBLOX_DMA_IrqHandler+0x2be>
 80227fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022800:	e031      	b.n	8022866 <UBLOX_DMA_IrqHandler+0x2be>
 8022802:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022806:	e02e      	b.n	8022866 <UBLOX_DMA_IrqHandler+0x2be>
 8022808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802280c:	e02b      	b.n	8022866 <UBLOX_DMA_IrqHandler+0x2be>
 802280e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022812:	e028      	b.n	8022866 <UBLOX_DMA_IrqHandler+0x2be>
 8022814:	2310      	movs	r3, #16
 8022816:	e026      	b.n	8022866 <UBLOX_DMA_IrqHandler+0x2be>
 8022818:	200084c4 	.word	0x200084c4
 802281c:	40026458 	.word	0x40026458
 8022820:	40026010 	.word	0x40026010
 8022824:	40026410 	.word	0x40026410
 8022828:	40026070 	.word	0x40026070
 802282c:	40026470 	.word	0x40026470
 8022830:	40026028 	.word	0x40026028
 8022834:	40026428 	.word	0x40026428
 8022838:	40026088 	.word	0x40026088
 802283c:	40026488 	.word	0x40026488
 8022840:	40026040 	.word	0x40026040
 8022844:	40026440 	.word	0x40026440
 8022848:	400260a0 	.word	0x400260a0
 802284c:	400264a0 	.word	0x400264a0
 8022850:	40026400 	.word	0x40026400
 8022854:	400260b8 	.word	0x400260b8
 8022858:	40026058 	.word	0x40026058
 802285c:	2310      	movs	r3, #16
 802285e:	e002      	b.n	8022866 <UBLOX_DMA_IrqHandler+0x2be>
 8022860:	2310      	movs	r3, #16
 8022862:	e000      	b.n	8022866 <UBLOX_DMA_IrqHandler+0x2be>
 8022864:	2310      	movs	r3, #16
 8022866:	4a9b      	ldr	r2, [pc, #620]	; (8022ad4 <UBLOX_DMA_IrqHandler+0x52c>)
 8022868:	60d3      	str	r3, [r2, #12]
 802286a:	e05f      	b.n	802292c <UBLOX_DMA_IrqHandler+0x384>
 802286c:	4b9a      	ldr	r3, [pc, #616]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 802286e:	681b      	ldr	r3, [r3, #0]
 8022870:	4a9a      	ldr	r2, [pc, #616]	; (8022adc <UBLOX_DMA_IrqHandler+0x534>)
 8022872:	4293      	cmp	r3, r2
 8022874:	d057      	beq.n	8022926 <UBLOX_DMA_IrqHandler+0x37e>
 8022876:	4b98      	ldr	r3, [pc, #608]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022878:	681b      	ldr	r3, [r3, #0]
 802287a:	4a99      	ldr	r2, [pc, #612]	; (8022ae0 <UBLOX_DMA_IrqHandler+0x538>)
 802287c:	4293      	cmp	r3, r2
 802287e:	d050      	beq.n	8022922 <UBLOX_DMA_IrqHandler+0x37a>
 8022880:	4b95      	ldr	r3, [pc, #596]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022882:	681b      	ldr	r3, [r3, #0]
 8022884:	4a97      	ldr	r2, [pc, #604]	; (8022ae4 <UBLOX_DMA_IrqHandler+0x53c>)
 8022886:	4293      	cmp	r3, r2
 8022888:	d049      	beq.n	802291e <UBLOX_DMA_IrqHandler+0x376>
 802288a:	4b93      	ldr	r3, [pc, #588]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 802288c:	681b      	ldr	r3, [r3, #0]
 802288e:	4a96      	ldr	r2, [pc, #600]	; (8022ae8 <UBLOX_DMA_IrqHandler+0x540>)
 8022890:	4293      	cmp	r3, r2
 8022892:	d042      	beq.n	802291a <UBLOX_DMA_IrqHandler+0x372>
 8022894:	4b90      	ldr	r3, [pc, #576]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022896:	681b      	ldr	r3, [r3, #0]
 8022898:	4a94      	ldr	r2, [pc, #592]	; (8022aec <UBLOX_DMA_IrqHandler+0x544>)
 802289a:	4293      	cmp	r3, r2
 802289c:	d03a      	beq.n	8022914 <UBLOX_DMA_IrqHandler+0x36c>
 802289e:	4b8e      	ldr	r3, [pc, #568]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 80228a0:	681b      	ldr	r3, [r3, #0]
 80228a2:	4a93      	ldr	r2, [pc, #588]	; (8022af0 <UBLOX_DMA_IrqHandler+0x548>)
 80228a4:	4293      	cmp	r3, r2
 80228a6:	d032      	beq.n	802290e <UBLOX_DMA_IrqHandler+0x366>
 80228a8:	4b8b      	ldr	r3, [pc, #556]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 80228aa:	681b      	ldr	r3, [r3, #0]
 80228ac:	4a91      	ldr	r2, [pc, #580]	; (8022af4 <UBLOX_DMA_IrqHandler+0x54c>)
 80228ae:	4293      	cmp	r3, r2
 80228b0:	d02a      	beq.n	8022908 <UBLOX_DMA_IrqHandler+0x360>
 80228b2:	4b89      	ldr	r3, [pc, #548]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 80228b4:	681b      	ldr	r3, [r3, #0]
 80228b6:	4a90      	ldr	r2, [pc, #576]	; (8022af8 <UBLOX_DMA_IrqHandler+0x550>)
 80228b8:	4293      	cmp	r3, r2
 80228ba:	d022      	beq.n	8022902 <UBLOX_DMA_IrqHandler+0x35a>
 80228bc:	4b86      	ldr	r3, [pc, #536]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 80228be:	681b      	ldr	r3, [r3, #0]
 80228c0:	4a8e      	ldr	r2, [pc, #568]	; (8022afc <UBLOX_DMA_IrqHandler+0x554>)
 80228c2:	4293      	cmp	r3, r2
 80228c4:	d01a      	beq.n	80228fc <UBLOX_DMA_IrqHandler+0x354>
 80228c6:	4b84      	ldr	r3, [pc, #528]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 80228c8:	681b      	ldr	r3, [r3, #0]
 80228ca:	4a8d      	ldr	r2, [pc, #564]	; (8022b00 <UBLOX_DMA_IrqHandler+0x558>)
 80228cc:	4293      	cmp	r3, r2
 80228ce:	d012      	beq.n	80228f6 <UBLOX_DMA_IrqHandler+0x34e>
 80228d0:	4b81      	ldr	r3, [pc, #516]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 80228d2:	681b      	ldr	r3, [r3, #0]
 80228d4:	4a8b      	ldr	r2, [pc, #556]	; (8022b04 <UBLOX_DMA_IrqHandler+0x55c>)
 80228d6:	4293      	cmp	r3, r2
 80228d8:	d00a      	beq.n	80228f0 <UBLOX_DMA_IrqHandler+0x348>
 80228da:	4b7f      	ldr	r3, [pc, #508]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 80228dc:	681b      	ldr	r3, [r3, #0]
 80228de:	4a8a      	ldr	r2, [pc, #552]	; (8022b08 <UBLOX_DMA_IrqHandler+0x560>)
 80228e0:	4293      	cmp	r3, r2
 80228e2:	d102      	bne.n	80228ea <UBLOX_DMA_IrqHandler+0x342>
 80228e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80228e8:	e01e      	b.n	8022928 <UBLOX_DMA_IrqHandler+0x380>
 80228ea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80228ee:	e01b      	b.n	8022928 <UBLOX_DMA_IrqHandler+0x380>
 80228f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80228f4:	e018      	b.n	8022928 <UBLOX_DMA_IrqHandler+0x380>
 80228f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80228fa:	e015      	b.n	8022928 <UBLOX_DMA_IrqHandler+0x380>
 80228fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8022900:	e012      	b.n	8022928 <UBLOX_DMA_IrqHandler+0x380>
 8022902:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022906:	e00f      	b.n	8022928 <UBLOX_DMA_IrqHandler+0x380>
 8022908:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802290c:	e00c      	b.n	8022928 <UBLOX_DMA_IrqHandler+0x380>
 802290e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022912:	e009      	b.n	8022928 <UBLOX_DMA_IrqHandler+0x380>
 8022914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022918:	e006      	b.n	8022928 <UBLOX_DMA_IrqHandler+0x380>
 802291a:	2310      	movs	r3, #16
 802291c:	e004      	b.n	8022928 <UBLOX_DMA_IrqHandler+0x380>
 802291e:	2310      	movs	r3, #16
 8022920:	e002      	b.n	8022928 <UBLOX_DMA_IrqHandler+0x380>
 8022922:	2310      	movs	r3, #16
 8022924:	e000      	b.n	8022928 <UBLOX_DMA_IrqHandler+0x380>
 8022926:	2310      	movs	r3, #16
 8022928:	4a6a      	ldr	r2, [pc, #424]	; (8022ad4 <UBLOX_DMA_IrqHandler+0x52c>)
 802292a:	6093      	str	r3, [r2, #8]

        UBLOX_Check_Buffer(0);
 802292c:	2000      	movs	r0, #0
 802292e:	f000 ff57 	bl	80237e0 <UBLOX_Check_Buffer>
        __HAL_DMA_CLEAR_FLAG(&hdma_usart2_rx, __HAL_DMA_GET_DME_FLAG_INDEX(&hdma_usart2_rx));

        /* Start DMA transfer */
        HAL_UART_Receive_DMA(&huart2, (uint8_t*) UBLOX_DMA_RX, UBLOX_DMA_RX_SZ);
    }
}
 8022932:	f000 bf09 	b.w	8023748 <UBLOX_DMA_IrqHandler+0x11a0>
    else if (__HAL_DMA_GET_IT_SOURCE(&hdma_usart2_rx, DMA_IT_TC)) {
 8022936:	4b68      	ldr	r3, [pc, #416]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022938:	681b      	ldr	r3, [r3, #0]
 802293a:	681b      	ldr	r3, [r3, #0]
 802293c:	f003 0310 	and.w	r3, r3, #16
 8022940:	2b00      	cmp	r3, #0
 8022942:	f000 81bd 	beq.w	8022cc0 <UBLOX_DMA_IrqHandler+0x718>
        __HAL_DMA_CLEAR_FLAG(&hdma_usart2_rx, __HAL_DMA_GET_TC_FLAG_INDEX(&hdma_usart2_rx));
 8022946:	4b64      	ldr	r3, [pc, #400]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022948:	681b      	ldr	r3, [r3, #0]
 802294a:	461a      	mov	r2, r3
 802294c:	4b6f      	ldr	r3, [pc, #444]	; (8022b0c <UBLOX_DMA_IrqHandler+0x564>)
 802294e:	429a      	cmp	r2, r3
 8022950:	d960      	bls.n	8022a14 <UBLOX_DMA_IrqHandler+0x46c>
 8022952:	4b61      	ldr	r3, [pc, #388]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022954:	681b      	ldr	r3, [r3, #0]
 8022956:	4a61      	ldr	r2, [pc, #388]	; (8022adc <UBLOX_DMA_IrqHandler+0x534>)
 8022958:	4293      	cmp	r3, r2
 802295a:	d057      	beq.n	8022a0c <UBLOX_DMA_IrqHandler+0x464>
 802295c:	4b5e      	ldr	r3, [pc, #376]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 802295e:	681b      	ldr	r3, [r3, #0]
 8022960:	4a5f      	ldr	r2, [pc, #380]	; (8022ae0 <UBLOX_DMA_IrqHandler+0x538>)
 8022962:	4293      	cmp	r3, r2
 8022964:	d050      	beq.n	8022a08 <UBLOX_DMA_IrqHandler+0x460>
 8022966:	4b5c      	ldr	r3, [pc, #368]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022968:	681b      	ldr	r3, [r3, #0]
 802296a:	4a5e      	ldr	r2, [pc, #376]	; (8022ae4 <UBLOX_DMA_IrqHandler+0x53c>)
 802296c:	4293      	cmp	r3, r2
 802296e:	d049      	beq.n	8022a04 <UBLOX_DMA_IrqHandler+0x45c>
 8022970:	4b59      	ldr	r3, [pc, #356]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022972:	681b      	ldr	r3, [r3, #0]
 8022974:	4a5c      	ldr	r2, [pc, #368]	; (8022ae8 <UBLOX_DMA_IrqHandler+0x540>)
 8022976:	4293      	cmp	r3, r2
 8022978:	d042      	beq.n	8022a00 <UBLOX_DMA_IrqHandler+0x458>
 802297a:	4b57      	ldr	r3, [pc, #348]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 802297c:	681b      	ldr	r3, [r3, #0]
 802297e:	4a5b      	ldr	r2, [pc, #364]	; (8022aec <UBLOX_DMA_IrqHandler+0x544>)
 8022980:	4293      	cmp	r3, r2
 8022982:	d03a      	beq.n	80229fa <UBLOX_DMA_IrqHandler+0x452>
 8022984:	4b54      	ldr	r3, [pc, #336]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022986:	681b      	ldr	r3, [r3, #0]
 8022988:	4a59      	ldr	r2, [pc, #356]	; (8022af0 <UBLOX_DMA_IrqHandler+0x548>)
 802298a:	4293      	cmp	r3, r2
 802298c:	d032      	beq.n	80229f4 <UBLOX_DMA_IrqHandler+0x44c>
 802298e:	4b52      	ldr	r3, [pc, #328]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022990:	681b      	ldr	r3, [r3, #0]
 8022992:	4a58      	ldr	r2, [pc, #352]	; (8022af4 <UBLOX_DMA_IrqHandler+0x54c>)
 8022994:	4293      	cmp	r3, r2
 8022996:	d02a      	beq.n	80229ee <UBLOX_DMA_IrqHandler+0x446>
 8022998:	4b4f      	ldr	r3, [pc, #316]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 802299a:	681b      	ldr	r3, [r3, #0]
 802299c:	4a56      	ldr	r2, [pc, #344]	; (8022af8 <UBLOX_DMA_IrqHandler+0x550>)
 802299e:	4293      	cmp	r3, r2
 80229a0:	d022      	beq.n	80229e8 <UBLOX_DMA_IrqHandler+0x440>
 80229a2:	4b4d      	ldr	r3, [pc, #308]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 80229a4:	681b      	ldr	r3, [r3, #0]
 80229a6:	4a55      	ldr	r2, [pc, #340]	; (8022afc <UBLOX_DMA_IrqHandler+0x554>)
 80229a8:	4293      	cmp	r3, r2
 80229aa:	d01a      	beq.n	80229e2 <UBLOX_DMA_IrqHandler+0x43a>
 80229ac:	4b4a      	ldr	r3, [pc, #296]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 80229ae:	681b      	ldr	r3, [r3, #0]
 80229b0:	4a53      	ldr	r2, [pc, #332]	; (8022b00 <UBLOX_DMA_IrqHandler+0x558>)
 80229b2:	4293      	cmp	r3, r2
 80229b4:	d012      	beq.n	80229dc <UBLOX_DMA_IrqHandler+0x434>
 80229b6:	4b48      	ldr	r3, [pc, #288]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 80229b8:	681b      	ldr	r3, [r3, #0]
 80229ba:	4a52      	ldr	r2, [pc, #328]	; (8022b04 <UBLOX_DMA_IrqHandler+0x55c>)
 80229bc:	4293      	cmp	r3, r2
 80229be:	d00a      	beq.n	80229d6 <UBLOX_DMA_IrqHandler+0x42e>
 80229c0:	4b45      	ldr	r3, [pc, #276]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 80229c2:	681b      	ldr	r3, [r3, #0]
 80229c4:	4a50      	ldr	r2, [pc, #320]	; (8022b08 <UBLOX_DMA_IrqHandler+0x560>)
 80229c6:	4293      	cmp	r3, r2
 80229c8:	d102      	bne.n	80229d0 <UBLOX_DMA_IrqHandler+0x428>
 80229ca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80229ce:	e01e      	b.n	8022a0e <UBLOX_DMA_IrqHandler+0x466>
 80229d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80229d4:	e01b      	b.n	8022a0e <UBLOX_DMA_IrqHandler+0x466>
 80229d6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80229da:	e018      	b.n	8022a0e <UBLOX_DMA_IrqHandler+0x466>
 80229dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80229e0:	e015      	b.n	8022a0e <UBLOX_DMA_IrqHandler+0x466>
 80229e2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80229e6:	e012      	b.n	8022a0e <UBLOX_DMA_IrqHandler+0x466>
 80229e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80229ec:	e00f      	b.n	8022a0e <UBLOX_DMA_IrqHandler+0x466>
 80229ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80229f2:	e00c      	b.n	8022a0e <UBLOX_DMA_IrqHandler+0x466>
 80229f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80229f8:	e009      	b.n	8022a0e <UBLOX_DMA_IrqHandler+0x466>
 80229fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80229fe:	e006      	b.n	8022a0e <UBLOX_DMA_IrqHandler+0x466>
 8022a00:	2320      	movs	r3, #32
 8022a02:	e004      	b.n	8022a0e <UBLOX_DMA_IrqHandler+0x466>
 8022a04:	2320      	movs	r3, #32
 8022a06:	e002      	b.n	8022a0e <UBLOX_DMA_IrqHandler+0x466>
 8022a08:	2320      	movs	r3, #32
 8022a0a:	e000      	b.n	8022a0e <UBLOX_DMA_IrqHandler+0x466>
 8022a0c:	2320      	movs	r3, #32
 8022a0e:	4a40      	ldr	r2, [pc, #256]	; (8022b10 <UBLOX_DMA_IrqHandler+0x568>)
 8022a10:	60d3      	str	r3, [r2, #12]
 8022a12:	e150      	b.n	8022cb6 <UBLOX_DMA_IrqHandler+0x70e>
 8022a14:	4b30      	ldr	r3, [pc, #192]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022a16:	681b      	ldr	r3, [r3, #0]
 8022a18:	461a      	mov	r2, r3
 8022a1a:	4b3e      	ldr	r3, [pc, #248]	; (8022b14 <UBLOX_DMA_IrqHandler+0x56c>)
 8022a1c:	429a      	cmp	r2, r3
 8022a1e:	f240 8083 	bls.w	8022b28 <UBLOX_DMA_IrqHandler+0x580>
 8022a22:	4b2d      	ldr	r3, [pc, #180]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022a24:	681b      	ldr	r3, [r3, #0]
 8022a26:	4a2d      	ldr	r2, [pc, #180]	; (8022adc <UBLOX_DMA_IrqHandler+0x534>)
 8022a28:	4293      	cmp	r3, r2
 8022a2a:	d079      	beq.n	8022b20 <UBLOX_DMA_IrqHandler+0x578>
 8022a2c:	4b2a      	ldr	r3, [pc, #168]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022a2e:	681b      	ldr	r3, [r3, #0]
 8022a30:	4a2b      	ldr	r2, [pc, #172]	; (8022ae0 <UBLOX_DMA_IrqHandler+0x538>)
 8022a32:	4293      	cmp	r3, r2
 8022a34:	d072      	beq.n	8022b1c <UBLOX_DMA_IrqHandler+0x574>
 8022a36:	4b28      	ldr	r3, [pc, #160]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022a38:	681b      	ldr	r3, [r3, #0]
 8022a3a:	4a2a      	ldr	r2, [pc, #168]	; (8022ae4 <UBLOX_DMA_IrqHandler+0x53c>)
 8022a3c:	4293      	cmp	r3, r2
 8022a3e:	d06b      	beq.n	8022b18 <UBLOX_DMA_IrqHandler+0x570>
 8022a40:	4b25      	ldr	r3, [pc, #148]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022a42:	681b      	ldr	r3, [r3, #0]
 8022a44:	4a28      	ldr	r2, [pc, #160]	; (8022ae8 <UBLOX_DMA_IrqHandler+0x540>)
 8022a46:	4293      	cmp	r3, r2
 8022a48:	d042      	beq.n	8022ad0 <UBLOX_DMA_IrqHandler+0x528>
 8022a4a:	4b23      	ldr	r3, [pc, #140]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022a4c:	681b      	ldr	r3, [r3, #0]
 8022a4e:	4a27      	ldr	r2, [pc, #156]	; (8022aec <UBLOX_DMA_IrqHandler+0x544>)
 8022a50:	4293      	cmp	r3, r2
 8022a52:	d03a      	beq.n	8022aca <UBLOX_DMA_IrqHandler+0x522>
 8022a54:	4b20      	ldr	r3, [pc, #128]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022a56:	681b      	ldr	r3, [r3, #0]
 8022a58:	4a25      	ldr	r2, [pc, #148]	; (8022af0 <UBLOX_DMA_IrqHandler+0x548>)
 8022a5a:	4293      	cmp	r3, r2
 8022a5c:	d032      	beq.n	8022ac4 <UBLOX_DMA_IrqHandler+0x51c>
 8022a5e:	4b1e      	ldr	r3, [pc, #120]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022a60:	681b      	ldr	r3, [r3, #0]
 8022a62:	4a24      	ldr	r2, [pc, #144]	; (8022af4 <UBLOX_DMA_IrqHandler+0x54c>)
 8022a64:	4293      	cmp	r3, r2
 8022a66:	d02a      	beq.n	8022abe <UBLOX_DMA_IrqHandler+0x516>
 8022a68:	4b1b      	ldr	r3, [pc, #108]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022a6a:	681b      	ldr	r3, [r3, #0]
 8022a6c:	4a22      	ldr	r2, [pc, #136]	; (8022af8 <UBLOX_DMA_IrqHandler+0x550>)
 8022a6e:	4293      	cmp	r3, r2
 8022a70:	d022      	beq.n	8022ab8 <UBLOX_DMA_IrqHandler+0x510>
 8022a72:	4b19      	ldr	r3, [pc, #100]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022a74:	681b      	ldr	r3, [r3, #0]
 8022a76:	4a21      	ldr	r2, [pc, #132]	; (8022afc <UBLOX_DMA_IrqHandler+0x554>)
 8022a78:	4293      	cmp	r3, r2
 8022a7a:	d01a      	beq.n	8022ab2 <UBLOX_DMA_IrqHandler+0x50a>
 8022a7c:	4b16      	ldr	r3, [pc, #88]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022a7e:	681b      	ldr	r3, [r3, #0]
 8022a80:	4a1f      	ldr	r2, [pc, #124]	; (8022b00 <UBLOX_DMA_IrqHandler+0x558>)
 8022a82:	4293      	cmp	r3, r2
 8022a84:	d012      	beq.n	8022aac <UBLOX_DMA_IrqHandler+0x504>
 8022a86:	4b14      	ldr	r3, [pc, #80]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022a88:	681b      	ldr	r3, [r3, #0]
 8022a8a:	4a1e      	ldr	r2, [pc, #120]	; (8022b04 <UBLOX_DMA_IrqHandler+0x55c>)
 8022a8c:	4293      	cmp	r3, r2
 8022a8e:	d00a      	beq.n	8022aa6 <UBLOX_DMA_IrqHandler+0x4fe>
 8022a90:	4b11      	ldr	r3, [pc, #68]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022a92:	681b      	ldr	r3, [r3, #0]
 8022a94:	4a1c      	ldr	r2, [pc, #112]	; (8022b08 <UBLOX_DMA_IrqHandler+0x560>)
 8022a96:	4293      	cmp	r3, r2
 8022a98:	d102      	bne.n	8022aa0 <UBLOX_DMA_IrqHandler+0x4f8>
 8022a9a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8022a9e:	e040      	b.n	8022b22 <UBLOX_DMA_IrqHandler+0x57a>
 8022aa0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8022aa4:	e03d      	b.n	8022b22 <UBLOX_DMA_IrqHandler+0x57a>
 8022aa6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8022aaa:	e03a      	b.n	8022b22 <UBLOX_DMA_IrqHandler+0x57a>
 8022aac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8022ab0:	e037      	b.n	8022b22 <UBLOX_DMA_IrqHandler+0x57a>
 8022ab2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8022ab6:	e034      	b.n	8022b22 <UBLOX_DMA_IrqHandler+0x57a>
 8022ab8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8022abc:	e031      	b.n	8022b22 <UBLOX_DMA_IrqHandler+0x57a>
 8022abe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8022ac2:	e02e      	b.n	8022b22 <UBLOX_DMA_IrqHandler+0x57a>
 8022ac4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8022ac8:	e02b      	b.n	8022b22 <UBLOX_DMA_IrqHandler+0x57a>
 8022aca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8022ace:	e028      	b.n	8022b22 <UBLOX_DMA_IrqHandler+0x57a>
 8022ad0:	2320      	movs	r3, #32
 8022ad2:	e026      	b.n	8022b22 <UBLOX_DMA_IrqHandler+0x57a>
 8022ad4:	40026000 	.word	0x40026000
 8022ad8:	200084c4 	.word	0x200084c4
 8022adc:	40026010 	.word	0x40026010
 8022ae0:	40026410 	.word	0x40026410
 8022ae4:	40026070 	.word	0x40026070
 8022ae8:	40026470 	.word	0x40026470
 8022aec:	40026028 	.word	0x40026028
 8022af0:	40026428 	.word	0x40026428
 8022af4:	40026088 	.word	0x40026088
 8022af8:	40026488 	.word	0x40026488
 8022afc:	40026040 	.word	0x40026040
 8022b00:	40026440 	.word	0x40026440
 8022b04:	400260a0 	.word	0x400260a0
 8022b08:	400264a0 	.word	0x400264a0
 8022b0c:	40026458 	.word	0x40026458
 8022b10:	40026400 	.word	0x40026400
 8022b14:	400260b8 	.word	0x400260b8
 8022b18:	2320      	movs	r3, #32
 8022b1a:	e002      	b.n	8022b22 <UBLOX_DMA_IrqHandler+0x57a>
 8022b1c:	2320      	movs	r3, #32
 8022b1e:	e000      	b.n	8022b22 <UBLOX_DMA_IrqHandler+0x57a>
 8022b20:	2320      	movs	r3, #32
 8022b22:	4a99      	ldr	r2, [pc, #612]	; (8022d88 <UBLOX_DMA_IrqHandler+0x7e0>)
 8022b24:	6093      	str	r3, [r2, #8]
 8022b26:	e0c6      	b.n	8022cb6 <UBLOX_DMA_IrqHandler+0x70e>
 8022b28:	4b98      	ldr	r3, [pc, #608]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022b2a:	681b      	ldr	r3, [r3, #0]
 8022b2c:	461a      	mov	r2, r3
 8022b2e:	4b98      	ldr	r3, [pc, #608]	; (8022d90 <UBLOX_DMA_IrqHandler+0x7e8>)
 8022b30:	429a      	cmp	r2, r3
 8022b32:	d960      	bls.n	8022bf6 <UBLOX_DMA_IrqHandler+0x64e>
 8022b34:	4b95      	ldr	r3, [pc, #596]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022b36:	681b      	ldr	r3, [r3, #0]
 8022b38:	4a96      	ldr	r2, [pc, #600]	; (8022d94 <UBLOX_DMA_IrqHandler+0x7ec>)
 8022b3a:	4293      	cmp	r3, r2
 8022b3c:	d057      	beq.n	8022bee <UBLOX_DMA_IrqHandler+0x646>
 8022b3e:	4b93      	ldr	r3, [pc, #588]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022b40:	681b      	ldr	r3, [r3, #0]
 8022b42:	4a95      	ldr	r2, [pc, #596]	; (8022d98 <UBLOX_DMA_IrqHandler+0x7f0>)
 8022b44:	4293      	cmp	r3, r2
 8022b46:	d050      	beq.n	8022bea <UBLOX_DMA_IrqHandler+0x642>
 8022b48:	4b90      	ldr	r3, [pc, #576]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022b4a:	681b      	ldr	r3, [r3, #0]
 8022b4c:	4a93      	ldr	r2, [pc, #588]	; (8022d9c <UBLOX_DMA_IrqHandler+0x7f4>)
 8022b4e:	4293      	cmp	r3, r2
 8022b50:	d049      	beq.n	8022be6 <UBLOX_DMA_IrqHandler+0x63e>
 8022b52:	4b8e      	ldr	r3, [pc, #568]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022b54:	681b      	ldr	r3, [r3, #0]
 8022b56:	4a92      	ldr	r2, [pc, #584]	; (8022da0 <UBLOX_DMA_IrqHandler+0x7f8>)
 8022b58:	4293      	cmp	r3, r2
 8022b5a:	d042      	beq.n	8022be2 <UBLOX_DMA_IrqHandler+0x63a>
 8022b5c:	4b8b      	ldr	r3, [pc, #556]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022b5e:	681b      	ldr	r3, [r3, #0]
 8022b60:	4a90      	ldr	r2, [pc, #576]	; (8022da4 <UBLOX_DMA_IrqHandler+0x7fc>)
 8022b62:	4293      	cmp	r3, r2
 8022b64:	d03a      	beq.n	8022bdc <UBLOX_DMA_IrqHandler+0x634>
 8022b66:	4b89      	ldr	r3, [pc, #548]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022b68:	681b      	ldr	r3, [r3, #0]
 8022b6a:	4a8f      	ldr	r2, [pc, #572]	; (8022da8 <UBLOX_DMA_IrqHandler+0x800>)
 8022b6c:	4293      	cmp	r3, r2
 8022b6e:	d032      	beq.n	8022bd6 <UBLOX_DMA_IrqHandler+0x62e>
 8022b70:	4b86      	ldr	r3, [pc, #536]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022b72:	681b      	ldr	r3, [r3, #0]
 8022b74:	4a8d      	ldr	r2, [pc, #564]	; (8022dac <UBLOX_DMA_IrqHandler+0x804>)
 8022b76:	4293      	cmp	r3, r2
 8022b78:	d02a      	beq.n	8022bd0 <UBLOX_DMA_IrqHandler+0x628>
 8022b7a:	4b84      	ldr	r3, [pc, #528]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022b7c:	681b      	ldr	r3, [r3, #0]
 8022b7e:	4a8c      	ldr	r2, [pc, #560]	; (8022db0 <UBLOX_DMA_IrqHandler+0x808>)
 8022b80:	4293      	cmp	r3, r2
 8022b82:	d022      	beq.n	8022bca <UBLOX_DMA_IrqHandler+0x622>
 8022b84:	4b81      	ldr	r3, [pc, #516]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022b86:	681b      	ldr	r3, [r3, #0]
 8022b88:	4a8a      	ldr	r2, [pc, #552]	; (8022db4 <UBLOX_DMA_IrqHandler+0x80c>)
 8022b8a:	4293      	cmp	r3, r2
 8022b8c:	d01a      	beq.n	8022bc4 <UBLOX_DMA_IrqHandler+0x61c>
 8022b8e:	4b7f      	ldr	r3, [pc, #508]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022b90:	681b      	ldr	r3, [r3, #0]
 8022b92:	4a89      	ldr	r2, [pc, #548]	; (8022db8 <UBLOX_DMA_IrqHandler+0x810>)
 8022b94:	4293      	cmp	r3, r2
 8022b96:	d012      	beq.n	8022bbe <UBLOX_DMA_IrqHandler+0x616>
 8022b98:	4b7c      	ldr	r3, [pc, #496]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022b9a:	681b      	ldr	r3, [r3, #0]
 8022b9c:	4a87      	ldr	r2, [pc, #540]	; (8022dbc <UBLOX_DMA_IrqHandler+0x814>)
 8022b9e:	4293      	cmp	r3, r2
 8022ba0:	d00a      	beq.n	8022bb8 <UBLOX_DMA_IrqHandler+0x610>
 8022ba2:	4b7a      	ldr	r3, [pc, #488]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022ba4:	681b      	ldr	r3, [r3, #0]
 8022ba6:	4a86      	ldr	r2, [pc, #536]	; (8022dc0 <UBLOX_DMA_IrqHandler+0x818>)
 8022ba8:	4293      	cmp	r3, r2
 8022baa:	d102      	bne.n	8022bb2 <UBLOX_DMA_IrqHandler+0x60a>
 8022bac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8022bb0:	e01e      	b.n	8022bf0 <UBLOX_DMA_IrqHandler+0x648>
 8022bb2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8022bb6:	e01b      	b.n	8022bf0 <UBLOX_DMA_IrqHandler+0x648>
 8022bb8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8022bbc:	e018      	b.n	8022bf0 <UBLOX_DMA_IrqHandler+0x648>
 8022bbe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8022bc2:	e015      	b.n	8022bf0 <UBLOX_DMA_IrqHandler+0x648>
 8022bc4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8022bc8:	e012      	b.n	8022bf0 <UBLOX_DMA_IrqHandler+0x648>
 8022bca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8022bce:	e00f      	b.n	8022bf0 <UBLOX_DMA_IrqHandler+0x648>
 8022bd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8022bd4:	e00c      	b.n	8022bf0 <UBLOX_DMA_IrqHandler+0x648>
 8022bd6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8022bda:	e009      	b.n	8022bf0 <UBLOX_DMA_IrqHandler+0x648>
 8022bdc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8022be0:	e006      	b.n	8022bf0 <UBLOX_DMA_IrqHandler+0x648>
 8022be2:	2320      	movs	r3, #32
 8022be4:	e004      	b.n	8022bf0 <UBLOX_DMA_IrqHandler+0x648>
 8022be6:	2320      	movs	r3, #32
 8022be8:	e002      	b.n	8022bf0 <UBLOX_DMA_IrqHandler+0x648>
 8022bea:	2320      	movs	r3, #32
 8022bec:	e000      	b.n	8022bf0 <UBLOX_DMA_IrqHandler+0x648>
 8022bee:	2320      	movs	r3, #32
 8022bf0:	4a74      	ldr	r2, [pc, #464]	; (8022dc4 <UBLOX_DMA_IrqHandler+0x81c>)
 8022bf2:	60d3      	str	r3, [r2, #12]
 8022bf4:	e05f      	b.n	8022cb6 <UBLOX_DMA_IrqHandler+0x70e>
 8022bf6:	4b65      	ldr	r3, [pc, #404]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022bf8:	681b      	ldr	r3, [r3, #0]
 8022bfa:	4a66      	ldr	r2, [pc, #408]	; (8022d94 <UBLOX_DMA_IrqHandler+0x7ec>)
 8022bfc:	4293      	cmp	r3, r2
 8022bfe:	d057      	beq.n	8022cb0 <UBLOX_DMA_IrqHandler+0x708>
 8022c00:	4b62      	ldr	r3, [pc, #392]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022c02:	681b      	ldr	r3, [r3, #0]
 8022c04:	4a64      	ldr	r2, [pc, #400]	; (8022d98 <UBLOX_DMA_IrqHandler+0x7f0>)
 8022c06:	4293      	cmp	r3, r2
 8022c08:	d050      	beq.n	8022cac <UBLOX_DMA_IrqHandler+0x704>
 8022c0a:	4b60      	ldr	r3, [pc, #384]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022c0c:	681b      	ldr	r3, [r3, #0]
 8022c0e:	4a63      	ldr	r2, [pc, #396]	; (8022d9c <UBLOX_DMA_IrqHandler+0x7f4>)
 8022c10:	4293      	cmp	r3, r2
 8022c12:	d049      	beq.n	8022ca8 <UBLOX_DMA_IrqHandler+0x700>
 8022c14:	4b5d      	ldr	r3, [pc, #372]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022c16:	681b      	ldr	r3, [r3, #0]
 8022c18:	4a61      	ldr	r2, [pc, #388]	; (8022da0 <UBLOX_DMA_IrqHandler+0x7f8>)
 8022c1a:	4293      	cmp	r3, r2
 8022c1c:	d042      	beq.n	8022ca4 <UBLOX_DMA_IrqHandler+0x6fc>
 8022c1e:	4b5b      	ldr	r3, [pc, #364]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022c20:	681b      	ldr	r3, [r3, #0]
 8022c22:	4a60      	ldr	r2, [pc, #384]	; (8022da4 <UBLOX_DMA_IrqHandler+0x7fc>)
 8022c24:	4293      	cmp	r3, r2
 8022c26:	d03a      	beq.n	8022c9e <UBLOX_DMA_IrqHandler+0x6f6>
 8022c28:	4b58      	ldr	r3, [pc, #352]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022c2a:	681b      	ldr	r3, [r3, #0]
 8022c2c:	4a5e      	ldr	r2, [pc, #376]	; (8022da8 <UBLOX_DMA_IrqHandler+0x800>)
 8022c2e:	4293      	cmp	r3, r2
 8022c30:	d032      	beq.n	8022c98 <UBLOX_DMA_IrqHandler+0x6f0>
 8022c32:	4b56      	ldr	r3, [pc, #344]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022c34:	681b      	ldr	r3, [r3, #0]
 8022c36:	4a5d      	ldr	r2, [pc, #372]	; (8022dac <UBLOX_DMA_IrqHandler+0x804>)
 8022c38:	4293      	cmp	r3, r2
 8022c3a:	d02a      	beq.n	8022c92 <UBLOX_DMA_IrqHandler+0x6ea>
 8022c3c:	4b53      	ldr	r3, [pc, #332]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022c3e:	681b      	ldr	r3, [r3, #0]
 8022c40:	4a5b      	ldr	r2, [pc, #364]	; (8022db0 <UBLOX_DMA_IrqHandler+0x808>)
 8022c42:	4293      	cmp	r3, r2
 8022c44:	d022      	beq.n	8022c8c <UBLOX_DMA_IrqHandler+0x6e4>
 8022c46:	4b51      	ldr	r3, [pc, #324]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022c48:	681b      	ldr	r3, [r3, #0]
 8022c4a:	4a5a      	ldr	r2, [pc, #360]	; (8022db4 <UBLOX_DMA_IrqHandler+0x80c>)
 8022c4c:	4293      	cmp	r3, r2
 8022c4e:	d01a      	beq.n	8022c86 <UBLOX_DMA_IrqHandler+0x6de>
 8022c50:	4b4e      	ldr	r3, [pc, #312]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022c52:	681b      	ldr	r3, [r3, #0]
 8022c54:	4a58      	ldr	r2, [pc, #352]	; (8022db8 <UBLOX_DMA_IrqHandler+0x810>)
 8022c56:	4293      	cmp	r3, r2
 8022c58:	d012      	beq.n	8022c80 <UBLOX_DMA_IrqHandler+0x6d8>
 8022c5a:	4b4c      	ldr	r3, [pc, #304]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022c5c:	681b      	ldr	r3, [r3, #0]
 8022c5e:	4a57      	ldr	r2, [pc, #348]	; (8022dbc <UBLOX_DMA_IrqHandler+0x814>)
 8022c60:	4293      	cmp	r3, r2
 8022c62:	d00a      	beq.n	8022c7a <UBLOX_DMA_IrqHandler+0x6d2>
 8022c64:	4b49      	ldr	r3, [pc, #292]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022c66:	681b      	ldr	r3, [r3, #0]
 8022c68:	4a55      	ldr	r2, [pc, #340]	; (8022dc0 <UBLOX_DMA_IrqHandler+0x818>)
 8022c6a:	4293      	cmp	r3, r2
 8022c6c:	d102      	bne.n	8022c74 <UBLOX_DMA_IrqHandler+0x6cc>
 8022c6e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8022c72:	e01e      	b.n	8022cb2 <UBLOX_DMA_IrqHandler+0x70a>
 8022c74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8022c78:	e01b      	b.n	8022cb2 <UBLOX_DMA_IrqHandler+0x70a>
 8022c7a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8022c7e:	e018      	b.n	8022cb2 <UBLOX_DMA_IrqHandler+0x70a>
 8022c80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8022c84:	e015      	b.n	8022cb2 <UBLOX_DMA_IrqHandler+0x70a>
 8022c86:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8022c8a:	e012      	b.n	8022cb2 <UBLOX_DMA_IrqHandler+0x70a>
 8022c8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8022c90:	e00f      	b.n	8022cb2 <UBLOX_DMA_IrqHandler+0x70a>
 8022c92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8022c96:	e00c      	b.n	8022cb2 <UBLOX_DMA_IrqHandler+0x70a>
 8022c98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8022c9c:	e009      	b.n	8022cb2 <UBLOX_DMA_IrqHandler+0x70a>
 8022c9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8022ca2:	e006      	b.n	8022cb2 <UBLOX_DMA_IrqHandler+0x70a>
 8022ca4:	2320      	movs	r3, #32
 8022ca6:	e004      	b.n	8022cb2 <UBLOX_DMA_IrqHandler+0x70a>
 8022ca8:	2320      	movs	r3, #32
 8022caa:	e002      	b.n	8022cb2 <UBLOX_DMA_IrqHandler+0x70a>
 8022cac:	2320      	movs	r3, #32
 8022cae:	e000      	b.n	8022cb2 <UBLOX_DMA_IrqHandler+0x70a>
 8022cb0:	2320      	movs	r3, #32
 8022cb2:	4a44      	ldr	r2, [pc, #272]	; (8022dc4 <UBLOX_DMA_IrqHandler+0x81c>)
 8022cb4:	6093      	str	r3, [r2, #8]
        UBLOX_Check_Buffer(0);
 8022cb6:	2000      	movs	r0, #0
 8022cb8:	f000 fd92 	bl	80237e0 <UBLOX_Check_Buffer>
}
 8022cbc:	f000 bd44 	b.w	8023748 <UBLOX_DMA_IrqHandler+0x11a0>
        __HAL_DMA_CLEAR_FLAG(&hdma_usart2_rx, __HAL_DMA_GET_TE_FLAG_INDEX(&hdma_usart2_rx));
 8022cc0:	4b32      	ldr	r3, [pc, #200]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022cc2:	681b      	ldr	r3, [r3, #0]
 8022cc4:	461a      	mov	r2, r3
 8022cc6:	4b40      	ldr	r3, [pc, #256]	; (8022dc8 <UBLOX_DMA_IrqHandler+0x820>)
 8022cc8:	429a      	cmp	r2, r3
 8022cca:	f240 8083 	bls.w	8022dd4 <UBLOX_DMA_IrqHandler+0x82c>
 8022cce:	4b2f      	ldr	r3, [pc, #188]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022cd0:	681b      	ldr	r3, [r3, #0]
 8022cd2:	4a30      	ldr	r2, [pc, #192]	; (8022d94 <UBLOX_DMA_IrqHandler+0x7ec>)
 8022cd4:	4293      	cmp	r3, r2
 8022cd6:	d079      	beq.n	8022dcc <UBLOX_DMA_IrqHandler+0x824>
 8022cd8:	4b2c      	ldr	r3, [pc, #176]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022cda:	681b      	ldr	r3, [r3, #0]
 8022cdc:	4a2e      	ldr	r2, [pc, #184]	; (8022d98 <UBLOX_DMA_IrqHandler+0x7f0>)
 8022cde:	4293      	cmp	r3, r2
 8022ce0:	d050      	beq.n	8022d84 <UBLOX_DMA_IrqHandler+0x7dc>
 8022ce2:	4b2a      	ldr	r3, [pc, #168]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022ce4:	681b      	ldr	r3, [r3, #0]
 8022ce6:	4a2d      	ldr	r2, [pc, #180]	; (8022d9c <UBLOX_DMA_IrqHandler+0x7f4>)
 8022ce8:	4293      	cmp	r3, r2
 8022cea:	d049      	beq.n	8022d80 <UBLOX_DMA_IrqHandler+0x7d8>
 8022cec:	4b27      	ldr	r3, [pc, #156]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022cee:	681b      	ldr	r3, [r3, #0]
 8022cf0:	4a2b      	ldr	r2, [pc, #172]	; (8022da0 <UBLOX_DMA_IrqHandler+0x7f8>)
 8022cf2:	4293      	cmp	r3, r2
 8022cf4:	d042      	beq.n	8022d7c <UBLOX_DMA_IrqHandler+0x7d4>
 8022cf6:	4b25      	ldr	r3, [pc, #148]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022cf8:	681b      	ldr	r3, [r3, #0]
 8022cfa:	4a2a      	ldr	r2, [pc, #168]	; (8022da4 <UBLOX_DMA_IrqHandler+0x7fc>)
 8022cfc:	4293      	cmp	r3, r2
 8022cfe:	d03a      	beq.n	8022d76 <UBLOX_DMA_IrqHandler+0x7ce>
 8022d00:	4b22      	ldr	r3, [pc, #136]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022d02:	681b      	ldr	r3, [r3, #0]
 8022d04:	4a28      	ldr	r2, [pc, #160]	; (8022da8 <UBLOX_DMA_IrqHandler+0x800>)
 8022d06:	4293      	cmp	r3, r2
 8022d08:	d032      	beq.n	8022d70 <UBLOX_DMA_IrqHandler+0x7c8>
 8022d0a:	4b20      	ldr	r3, [pc, #128]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022d0c:	681b      	ldr	r3, [r3, #0]
 8022d0e:	4a27      	ldr	r2, [pc, #156]	; (8022dac <UBLOX_DMA_IrqHandler+0x804>)
 8022d10:	4293      	cmp	r3, r2
 8022d12:	d02a      	beq.n	8022d6a <UBLOX_DMA_IrqHandler+0x7c2>
 8022d14:	4b1d      	ldr	r3, [pc, #116]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022d16:	681b      	ldr	r3, [r3, #0]
 8022d18:	4a25      	ldr	r2, [pc, #148]	; (8022db0 <UBLOX_DMA_IrqHandler+0x808>)
 8022d1a:	4293      	cmp	r3, r2
 8022d1c:	d022      	beq.n	8022d64 <UBLOX_DMA_IrqHandler+0x7bc>
 8022d1e:	4b1b      	ldr	r3, [pc, #108]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022d20:	681b      	ldr	r3, [r3, #0]
 8022d22:	4a24      	ldr	r2, [pc, #144]	; (8022db4 <UBLOX_DMA_IrqHandler+0x80c>)
 8022d24:	4293      	cmp	r3, r2
 8022d26:	d01a      	beq.n	8022d5e <UBLOX_DMA_IrqHandler+0x7b6>
 8022d28:	4b18      	ldr	r3, [pc, #96]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022d2a:	681b      	ldr	r3, [r3, #0]
 8022d2c:	4a22      	ldr	r2, [pc, #136]	; (8022db8 <UBLOX_DMA_IrqHandler+0x810>)
 8022d2e:	4293      	cmp	r3, r2
 8022d30:	d012      	beq.n	8022d58 <UBLOX_DMA_IrqHandler+0x7b0>
 8022d32:	4b16      	ldr	r3, [pc, #88]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022d34:	681b      	ldr	r3, [r3, #0]
 8022d36:	4a21      	ldr	r2, [pc, #132]	; (8022dbc <UBLOX_DMA_IrqHandler+0x814>)
 8022d38:	4293      	cmp	r3, r2
 8022d3a:	d00a      	beq.n	8022d52 <UBLOX_DMA_IrqHandler+0x7aa>
 8022d3c:	4b13      	ldr	r3, [pc, #76]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022d3e:	681b      	ldr	r3, [r3, #0]
 8022d40:	4a1f      	ldr	r2, [pc, #124]	; (8022dc0 <UBLOX_DMA_IrqHandler+0x818>)
 8022d42:	4293      	cmp	r3, r2
 8022d44:	d102      	bne.n	8022d4c <UBLOX_DMA_IrqHandler+0x7a4>
 8022d46:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8022d4a:	e040      	b.n	8022dce <UBLOX_DMA_IrqHandler+0x826>
 8022d4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8022d50:	e03d      	b.n	8022dce <UBLOX_DMA_IrqHandler+0x826>
 8022d52:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8022d56:	e03a      	b.n	8022dce <UBLOX_DMA_IrqHandler+0x826>
 8022d58:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8022d5c:	e037      	b.n	8022dce <UBLOX_DMA_IrqHandler+0x826>
 8022d5e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8022d62:	e034      	b.n	8022dce <UBLOX_DMA_IrqHandler+0x826>
 8022d64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8022d68:	e031      	b.n	8022dce <UBLOX_DMA_IrqHandler+0x826>
 8022d6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8022d6e:	e02e      	b.n	8022dce <UBLOX_DMA_IrqHandler+0x826>
 8022d70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8022d74:	e02b      	b.n	8022dce <UBLOX_DMA_IrqHandler+0x826>
 8022d76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8022d7a:	e028      	b.n	8022dce <UBLOX_DMA_IrqHandler+0x826>
 8022d7c:	2308      	movs	r3, #8
 8022d7e:	e026      	b.n	8022dce <UBLOX_DMA_IrqHandler+0x826>
 8022d80:	2308      	movs	r3, #8
 8022d82:	e024      	b.n	8022dce <UBLOX_DMA_IrqHandler+0x826>
 8022d84:	2308      	movs	r3, #8
 8022d86:	e022      	b.n	8022dce <UBLOX_DMA_IrqHandler+0x826>
 8022d88:	40026400 	.word	0x40026400
 8022d8c:	200084c4 	.word	0x200084c4
 8022d90:	40026058 	.word	0x40026058
 8022d94:	40026010 	.word	0x40026010
 8022d98:	40026410 	.word	0x40026410
 8022d9c:	40026070 	.word	0x40026070
 8022da0:	40026470 	.word	0x40026470
 8022da4:	40026028 	.word	0x40026028
 8022da8:	40026428 	.word	0x40026428
 8022dac:	40026088 	.word	0x40026088
 8022db0:	40026488 	.word	0x40026488
 8022db4:	40026040 	.word	0x40026040
 8022db8:	40026440 	.word	0x40026440
 8022dbc:	400260a0 	.word	0x400260a0
 8022dc0:	400264a0 	.word	0x400264a0
 8022dc4:	40026000 	.word	0x40026000
 8022dc8:	40026458 	.word	0x40026458
 8022dcc:	2308      	movs	r3, #8
 8022dce:	4a97      	ldr	r2, [pc, #604]	; (802302c <UBLOX_DMA_IrqHandler+0xa84>)
 8022dd0:	60d3      	str	r3, [r2, #12]
 8022dd2:	e150      	b.n	8023076 <UBLOX_DMA_IrqHandler+0xace>
 8022dd4:	4b96      	ldr	r3, [pc, #600]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022dd6:	681b      	ldr	r3, [r3, #0]
 8022dd8:	461a      	mov	r2, r3
 8022dda:	4b96      	ldr	r3, [pc, #600]	; (8023034 <UBLOX_DMA_IrqHandler+0xa8c>)
 8022ddc:	429a      	cmp	r2, r3
 8022dde:	d960      	bls.n	8022ea2 <UBLOX_DMA_IrqHandler+0x8fa>
 8022de0:	4b93      	ldr	r3, [pc, #588]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022de2:	681b      	ldr	r3, [r3, #0]
 8022de4:	4a94      	ldr	r2, [pc, #592]	; (8023038 <UBLOX_DMA_IrqHandler+0xa90>)
 8022de6:	4293      	cmp	r3, r2
 8022de8:	d057      	beq.n	8022e9a <UBLOX_DMA_IrqHandler+0x8f2>
 8022dea:	4b91      	ldr	r3, [pc, #580]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022dec:	681b      	ldr	r3, [r3, #0]
 8022dee:	4a93      	ldr	r2, [pc, #588]	; (802303c <UBLOX_DMA_IrqHandler+0xa94>)
 8022df0:	4293      	cmp	r3, r2
 8022df2:	d050      	beq.n	8022e96 <UBLOX_DMA_IrqHandler+0x8ee>
 8022df4:	4b8e      	ldr	r3, [pc, #568]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022df6:	681b      	ldr	r3, [r3, #0]
 8022df8:	4a91      	ldr	r2, [pc, #580]	; (8023040 <UBLOX_DMA_IrqHandler+0xa98>)
 8022dfa:	4293      	cmp	r3, r2
 8022dfc:	d049      	beq.n	8022e92 <UBLOX_DMA_IrqHandler+0x8ea>
 8022dfe:	4b8c      	ldr	r3, [pc, #560]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022e00:	681b      	ldr	r3, [r3, #0]
 8022e02:	4a90      	ldr	r2, [pc, #576]	; (8023044 <UBLOX_DMA_IrqHandler+0xa9c>)
 8022e04:	4293      	cmp	r3, r2
 8022e06:	d042      	beq.n	8022e8e <UBLOX_DMA_IrqHandler+0x8e6>
 8022e08:	4b89      	ldr	r3, [pc, #548]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022e0a:	681b      	ldr	r3, [r3, #0]
 8022e0c:	4a8e      	ldr	r2, [pc, #568]	; (8023048 <UBLOX_DMA_IrqHandler+0xaa0>)
 8022e0e:	4293      	cmp	r3, r2
 8022e10:	d03a      	beq.n	8022e88 <UBLOX_DMA_IrqHandler+0x8e0>
 8022e12:	4b87      	ldr	r3, [pc, #540]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022e14:	681b      	ldr	r3, [r3, #0]
 8022e16:	4a8d      	ldr	r2, [pc, #564]	; (802304c <UBLOX_DMA_IrqHandler+0xaa4>)
 8022e18:	4293      	cmp	r3, r2
 8022e1a:	d032      	beq.n	8022e82 <UBLOX_DMA_IrqHandler+0x8da>
 8022e1c:	4b84      	ldr	r3, [pc, #528]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022e1e:	681b      	ldr	r3, [r3, #0]
 8022e20:	4a8b      	ldr	r2, [pc, #556]	; (8023050 <UBLOX_DMA_IrqHandler+0xaa8>)
 8022e22:	4293      	cmp	r3, r2
 8022e24:	d02a      	beq.n	8022e7c <UBLOX_DMA_IrqHandler+0x8d4>
 8022e26:	4b82      	ldr	r3, [pc, #520]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022e28:	681b      	ldr	r3, [r3, #0]
 8022e2a:	4a8a      	ldr	r2, [pc, #552]	; (8023054 <UBLOX_DMA_IrqHandler+0xaac>)
 8022e2c:	4293      	cmp	r3, r2
 8022e2e:	d022      	beq.n	8022e76 <UBLOX_DMA_IrqHandler+0x8ce>
 8022e30:	4b7f      	ldr	r3, [pc, #508]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022e32:	681b      	ldr	r3, [r3, #0]
 8022e34:	4a88      	ldr	r2, [pc, #544]	; (8023058 <UBLOX_DMA_IrqHandler+0xab0>)
 8022e36:	4293      	cmp	r3, r2
 8022e38:	d01a      	beq.n	8022e70 <UBLOX_DMA_IrqHandler+0x8c8>
 8022e3a:	4b7d      	ldr	r3, [pc, #500]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022e3c:	681b      	ldr	r3, [r3, #0]
 8022e3e:	4a87      	ldr	r2, [pc, #540]	; (802305c <UBLOX_DMA_IrqHandler+0xab4>)
 8022e40:	4293      	cmp	r3, r2
 8022e42:	d012      	beq.n	8022e6a <UBLOX_DMA_IrqHandler+0x8c2>
 8022e44:	4b7a      	ldr	r3, [pc, #488]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022e46:	681b      	ldr	r3, [r3, #0]
 8022e48:	4a85      	ldr	r2, [pc, #532]	; (8023060 <UBLOX_DMA_IrqHandler+0xab8>)
 8022e4a:	4293      	cmp	r3, r2
 8022e4c:	d00a      	beq.n	8022e64 <UBLOX_DMA_IrqHandler+0x8bc>
 8022e4e:	4b78      	ldr	r3, [pc, #480]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022e50:	681b      	ldr	r3, [r3, #0]
 8022e52:	4a84      	ldr	r2, [pc, #528]	; (8023064 <UBLOX_DMA_IrqHandler+0xabc>)
 8022e54:	4293      	cmp	r3, r2
 8022e56:	d102      	bne.n	8022e5e <UBLOX_DMA_IrqHandler+0x8b6>
 8022e58:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8022e5c:	e01e      	b.n	8022e9c <UBLOX_DMA_IrqHandler+0x8f4>
 8022e5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8022e62:	e01b      	b.n	8022e9c <UBLOX_DMA_IrqHandler+0x8f4>
 8022e64:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8022e68:	e018      	b.n	8022e9c <UBLOX_DMA_IrqHandler+0x8f4>
 8022e6a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8022e6e:	e015      	b.n	8022e9c <UBLOX_DMA_IrqHandler+0x8f4>
 8022e70:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8022e74:	e012      	b.n	8022e9c <UBLOX_DMA_IrqHandler+0x8f4>
 8022e76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8022e7a:	e00f      	b.n	8022e9c <UBLOX_DMA_IrqHandler+0x8f4>
 8022e7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8022e80:	e00c      	b.n	8022e9c <UBLOX_DMA_IrqHandler+0x8f4>
 8022e82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8022e86:	e009      	b.n	8022e9c <UBLOX_DMA_IrqHandler+0x8f4>
 8022e88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8022e8c:	e006      	b.n	8022e9c <UBLOX_DMA_IrqHandler+0x8f4>
 8022e8e:	2308      	movs	r3, #8
 8022e90:	e004      	b.n	8022e9c <UBLOX_DMA_IrqHandler+0x8f4>
 8022e92:	2308      	movs	r3, #8
 8022e94:	e002      	b.n	8022e9c <UBLOX_DMA_IrqHandler+0x8f4>
 8022e96:	2308      	movs	r3, #8
 8022e98:	e000      	b.n	8022e9c <UBLOX_DMA_IrqHandler+0x8f4>
 8022e9a:	2308      	movs	r3, #8
 8022e9c:	4a63      	ldr	r2, [pc, #396]	; (802302c <UBLOX_DMA_IrqHandler+0xa84>)
 8022e9e:	6093      	str	r3, [r2, #8]
 8022ea0:	e0e9      	b.n	8023076 <UBLOX_DMA_IrqHandler+0xace>
 8022ea2:	4b63      	ldr	r3, [pc, #396]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022ea4:	681b      	ldr	r3, [r3, #0]
 8022ea6:	461a      	mov	r2, r3
 8022ea8:	4b6f      	ldr	r3, [pc, #444]	; (8023068 <UBLOX_DMA_IrqHandler+0xac0>)
 8022eaa:	429a      	cmp	r2, r3
 8022eac:	d960      	bls.n	8022f70 <UBLOX_DMA_IrqHandler+0x9c8>
 8022eae:	4b60      	ldr	r3, [pc, #384]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022eb0:	681b      	ldr	r3, [r3, #0]
 8022eb2:	4a61      	ldr	r2, [pc, #388]	; (8023038 <UBLOX_DMA_IrqHandler+0xa90>)
 8022eb4:	4293      	cmp	r3, r2
 8022eb6:	d057      	beq.n	8022f68 <UBLOX_DMA_IrqHandler+0x9c0>
 8022eb8:	4b5d      	ldr	r3, [pc, #372]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022eba:	681b      	ldr	r3, [r3, #0]
 8022ebc:	4a5f      	ldr	r2, [pc, #380]	; (802303c <UBLOX_DMA_IrqHandler+0xa94>)
 8022ebe:	4293      	cmp	r3, r2
 8022ec0:	d050      	beq.n	8022f64 <UBLOX_DMA_IrqHandler+0x9bc>
 8022ec2:	4b5b      	ldr	r3, [pc, #364]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022ec4:	681b      	ldr	r3, [r3, #0]
 8022ec6:	4a5e      	ldr	r2, [pc, #376]	; (8023040 <UBLOX_DMA_IrqHandler+0xa98>)
 8022ec8:	4293      	cmp	r3, r2
 8022eca:	d049      	beq.n	8022f60 <UBLOX_DMA_IrqHandler+0x9b8>
 8022ecc:	4b58      	ldr	r3, [pc, #352]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022ece:	681b      	ldr	r3, [r3, #0]
 8022ed0:	4a5c      	ldr	r2, [pc, #368]	; (8023044 <UBLOX_DMA_IrqHandler+0xa9c>)
 8022ed2:	4293      	cmp	r3, r2
 8022ed4:	d042      	beq.n	8022f5c <UBLOX_DMA_IrqHandler+0x9b4>
 8022ed6:	4b56      	ldr	r3, [pc, #344]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022ed8:	681b      	ldr	r3, [r3, #0]
 8022eda:	4a5b      	ldr	r2, [pc, #364]	; (8023048 <UBLOX_DMA_IrqHandler+0xaa0>)
 8022edc:	4293      	cmp	r3, r2
 8022ede:	d03a      	beq.n	8022f56 <UBLOX_DMA_IrqHandler+0x9ae>
 8022ee0:	4b53      	ldr	r3, [pc, #332]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022ee2:	681b      	ldr	r3, [r3, #0]
 8022ee4:	4a59      	ldr	r2, [pc, #356]	; (802304c <UBLOX_DMA_IrqHandler+0xaa4>)
 8022ee6:	4293      	cmp	r3, r2
 8022ee8:	d032      	beq.n	8022f50 <UBLOX_DMA_IrqHandler+0x9a8>
 8022eea:	4b51      	ldr	r3, [pc, #324]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022eec:	681b      	ldr	r3, [r3, #0]
 8022eee:	4a58      	ldr	r2, [pc, #352]	; (8023050 <UBLOX_DMA_IrqHandler+0xaa8>)
 8022ef0:	4293      	cmp	r3, r2
 8022ef2:	d02a      	beq.n	8022f4a <UBLOX_DMA_IrqHandler+0x9a2>
 8022ef4:	4b4e      	ldr	r3, [pc, #312]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022ef6:	681b      	ldr	r3, [r3, #0]
 8022ef8:	4a56      	ldr	r2, [pc, #344]	; (8023054 <UBLOX_DMA_IrqHandler+0xaac>)
 8022efa:	4293      	cmp	r3, r2
 8022efc:	d022      	beq.n	8022f44 <UBLOX_DMA_IrqHandler+0x99c>
 8022efe:	4b4c      	ldr	r3, [pc, #304]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022f00:	681b      	ldr	r3, [r3, #0]
 8022f02:	4a55      	ldr	r2, [pc, #340]	; (8023058 <UBLOX_DMA_IrqHandler+0xab0>)
 8022f04:	4293      	cmp	r3, r2
 8022f06:	d01a      	beq.n	8022f3e <UBLOX_DMA_IrqHandler+0x996>
 8022f08:	4b49      	ldr	r3, [pc, #292]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022f0a:	681b      	ldr	r3, [r3, #0]
 8022f0c:	4a53      	ldr	r2, [pc, #332]	; (802305c <UBLOX_DMA_IrqHandler+0xab4>)
 8022f0e:	4293      	cmp	r3, r2
 8022f10:	d012      	beq.n	8022f38 <UBLOX_DMA_IrqHandler+0x990>
 8022f12:	4b47      	ldr	r3, [pc, #284]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022f14:	681b      	ldr	r3, [r3, #0]
 8022f16:	4a52      	ldr	r2, [pc, #328]	; (8023060 <UBLOX_DMA_IrqHandler+0xab8>)
 8022f18:	4293      	cmp	r3, r2
 8022f1a:	d00a      	beq.n	8022f32 <UBLOX_DMA_IrqHandler+0x98a>
 8022f1c:	4b44      	ldr	r3, [pc, #272]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022f1e:	681b      	ldr	r3, [r3, #0]
 8022f20:	4a50      	ldr	r2, [pc, #320]	; (8023064 <UBLOX_DMA_IrqHandler+0xabc>)
 8022f22:	4293      	cmp	r3, r2
 8022f24:	d102      	bne.n	8022f2c <UBLOX_DMA_IrqHandler+0x984>
 8022f26:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8022f2a:	e01e      	b.n	8022f6a <UBLOX_DMA_IrqHandler+0x9c2>
 8022f2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8022f30:	e01b      	b.n	8022f6a <UBLOX_DMA_IrqHandler+0x9c2>
 8022f32:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8022f36:	e018      	b.n	8022f6a <UBLOX_DMA_IrqHandler+0x9c2>
 8022f38:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8022f3c:	e015      	b.n	8022f6a <UBLOX_DMA_IrqHandler+0x9c2>
 8022f3e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8022f42:	e012      	b.n	8022f6a <UBLOX_DMA_IrqHandler+0x9c2>
 8022f44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8022f48:	e00f      	b.n	8022f6a <UBLOX_DMA_IrqHandler+0x9c2>
 8022f4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8022f4e:	e00c      	b.n	8022f6a <UBLOX_DMA_IrqHandler+0x9c2>
 8022f50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8022f54:	e009      	b.n	8022f6a <UBLOX_DMA_IrqHandler+0x9c2>
 8022f56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8022f5a:	e006      	b.n	8022f6a <UBLOX_DMA_IrqHandler+0x9c2>
 8022f5c:	2308      	movs	r3, #8
 8022f5e:	e004      	b.n	8022f6a <UBLOX_DMA_IrqHandler+0x9c2>
 8022f60:	2308      	movs	r3, #8
 8022f62:	e002      	b.n	8022f6a <UBLOX_DMA_IrqHandler+0x9c2>
 8022f64:	2308      	movs	r3, #8
 8022f66:	e000      	b.n	8022f6a <UBLOX_DMA_IrqHandler+0x9c2>
 8022f68:	2308      	movs	r3, #8
 8022f6a:	4a40      	ldr	r2, [pc, #256]	; (802306c <UBLOX_DMA_IrqHandler+0xac4>)
 8022f6c:	60d3      	str	r3, [r2, #12]
 8022f6e:	e082      	b.n	8023076 <UBLOX_DMA_IrqHandler+0xace>
 8022f70:	4b2f      	ldr	r3, [pc, #188]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022f72:	681b      	ldr	r3, [r3, #0]
 8022f74:	4a30      	ldr	r2, [pc, #192]	; (8023038 <UBLOX_DMA_IrqHandler+0xa90>)
 8022f76:	4293      	cmp	r3, r2
 8022f78:	d07a      	beq.n	8023070 <UBLOX_DMA_IrqHandler+0xac8>
 8022f7a:	4b2d      	ldr	r3, [pc, #180]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022f7c:	681b      	ldr	r3, [r3, #0]
 8022f7e:	4a2f      	ldr	r2, [pc, #188]	; (802303c <UBLOX_DMA_IrqHandler+0xa94>)
 8022f80:	4293      	cmp	r3, r2
 8022f82:	d050      	beq.n	8023026 <UBLOX_DMA_IrqHandler+0xa7e>
 8022f84:	4b2a      	ldr	r3, [pc, #168]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022f86:	681b      	ldr	r3, [r3, #0]
 8022f88:	4a2d      	ldr	r2, [pc, #180]	; (8023040 <UBLOX_DMA_IrqHandler+0xa98>)
 8022f8a:	4293      	cmp	r3, r2
 8022f8c:	d049      	beq.n	8023022 <UBLOX_DMA_IrqHandler+0xa7a>
 8022f8e:	4b28      	ldr	r3, [pc, #160]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022f90:	681b      	ldr	r3, [r3, #0]
 8022f92:	4a2c      	ldr	r2, [pc, #176]	; (8023044 <UBLOX_DMA_IrqHandler+0xa9c>)
 8022f94:	4293      	cmp	r3, r2
 8022f96:	d042      	beq.n	802301e <UBLOX_DMA_IrqHandler+0xa76>
 8022f98:	4b25      	ldr	r3, [pc, #148]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022f9a:	681b      	ldr	r3, [r3, #0]
 8022f9c:	4a2a      	ldr	r2, [pc, #168]	; (8023048 <UBLOX_DMA_IrqHandler+0xaa0>)
 8022f9e:	4293      	cmp	r3, r2
 8022fa0:	d03a      	beq.n	8023018 <UBLOX_DMA_IrqHandler+0xa70>
 8022fa2:	4b23      	ldr	r3, [pc, #140]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022fa4:	681b      	ldr	r3, [r3, #0]
 8022fa6:	4a29      	ldr	r2, [pc, #164]	; (802304c <UBLOX_DMA_IrqHandler+0xaa4>)
 8022fa8:	4293      	cmp	r3, r2
 8022faa:	d032      	beq.n	8023012 <UBLOX_DMA_IrqHandler+0xa6a>
 8022fac:	4b20      	ldr	r3, [pc, #128]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022fae:	681b      	ldr	r3, [r3, #0]
 8022fb0:	4a27      	ldr	r2, [pc, #156]	; (8023050 <UBLOX_DMA_IrqHandler+0xaa8>)
 8022fb2:	4293      	cmp	r3, r2
 8022fb4:	d02a      	beq.n	802300c <UBLOX_DMA_IrqHandler+0xa64>
 8022fb6:	4b1e      	ldr	r3, [pc, #120]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022fb8:	681b      	ldr	r3, [r3, #0]
 8022fba:	4a26      	ldr	r2, [pc, #152]	; (8023054 <UBLOX_DMA_IrqHandler+0xaac>)
 8022fbc:	4293      	cmp	r3, r2
 8022fbe:	d022      	beq.n	8023006 <UBLOX_DMA_IrqHandler+0xa5e>
 8022fc0:	4b1b      	ldr	r3, [pc, #108]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022fc2:	681b      	ldr	r3, [r3, #0]
 8022fc4:	4a24      	ldr	r2, [pc, #144]	; (8023058 <UBLOX_DMA_IrqHandler+0xab0>)
 8022fc6:	4293      	cmp	r3, r2
 8022fc8:	d01a      	beq.n	8023000 <UBLOX_DMA_IrqHandler+0xa58>
 8022fca:	4b19      	ldr	r3, [pc, #100]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022fcc:	681b      	ldr	r3, [r3, #0]
 8022fce:	4a23      	ldr	r2, [pc, #140]	; (802305c <UBLOX_DMA_IrqHandler+0xab4>)
 8022fd0:	4293      	cmp	r3, r2
 8022fd2:	d012      	beq.n	8022ffa <UBLOX_DMA_IrqHandler+0xa52>
 8022fd4:	4b16      	ldr	r3, [pc, #88]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022fd6:	681b      	ldr	r3, [r3, #0]
 8022fd8:	4a21      	ldr	r2, [pc, #132]	; (8023060 <UBLOX_DMA_IrqHandler+0xab8>)
 8022fda:	4293      	cmp	r3, r2
 8022fdc:	d00a      	beq.n	8022ff4 <UBLOX_DMA_IrqHandler+0xa4c>
 8022fde:	4b14      	ldr	r3, [pc, #80]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022fe0:	681b      	ldr	r3, [r3, #0]
 8022fe2:	4a20      	ldr	r2, [pc, #128]	; (8023064 <UBLOX_DMA_IrqHandler+0xabc>)
 8022fe4:	4293      	cmp	r3, r2
 8022fe6:	d102      	bne.n	8022fee <UBLOX_DMA_IrqHandler+0xa46>
 8022fe8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8022fec:	e041      	b.n	8023072 <UBLOX_DMA_IrqHandler+0xaca>
 8022fee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8022ff2:	e03e      	b.n	8023072 <UBLOX_DMA_IrqHandler+0xaca>
 8022ff4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8022ff8:	e03b      	b.n	8023072 <UBLOX_DMA_IrqHandler+0xaca>
 8022ffa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8022ffe:	e038      	b.n	8023072 <UBLOX_DMA_IrqHandler+0xaca>
 8023000:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8023004:	e035      	b.n	8023072 <UBLOX_DMA_IrqHandler+0xaca>
 8023006:	f44f 7300 	mov.w	r3, #512	; 0x200
 802300a:	e032      	b.n	8023072 <UBLOX_DMA_IrqHandler+0xaca>
 802300c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8023010:	e02f      	b.n	8023072 <UBLOX_DMA_IrqHandler+0xaca>
 8023012:	f44f 7300 	mov.w	r3, #512	; 0x200
 8023016:	e02c      	b.n	8023072 <UBLOX_DMA_IrqHandler+0xaca>
 8023018:	f44f 7300 	mov.w	r3, #512	; 0x200
 802301c:	e029      	b.n	8023072 <UBLOX_DMA_IrqHandler+0xaca>
 802301e:	2308      	movs	r3, #8
 8023020:	e027      	b.n	8023072 <UBLOX_DMA_IrqHandler+0xaca>
 8023022:	2308      	movs	r3, #8
 8023024:	e025      	b.n	8023072 <UBLOX_DMA_IrqHandler+0xaca>
 8023026:	2308      	movs	r3, #8
 8023028:	e023      	b.n	8023072 <UBLOX_DMA_IrqHandler+0xaca>
 802302a:	bf00      	nop
 802302c:	40026400 	.word	0x40026400
 8023030:	200084c4 	.word	0x200084c4
 8023034:	400260b8 	.word	0x400260b8
 8023038:	40026010 	.word	0x40026010
 802303c:	40026410 	.word	0x40026410
 8023040:	40026070 	.word	0x40026070
 8023044:	40026470 	.word	0x40026470
 8023048:	40026028 	.word	0x40026028
 802304c:	40026428 	.word	0x40026428
 8023050:	40026088 	.word	0x40026088
 8023054:	40026488 	.word	0x40026488
 8023058:	40026040 	.word	0x40026040
 802305c:	40026440 	.word	0x40026440
 8023060:	400260a0 	.word	0x400260a0
 8023064:	400264a0 	.word	0x400264a0
 8023068:	40026058 	.word	0x40026058
 802306c:	40026000 	.word	0x40026000
 8023070:	2308      	movs	r3, #8
 8023072:	4a96      	ldr	r2, [pc, #600]	; (80232cc <UBLOX_DMA_IrqHandler+0xd24>)
 8023074:	6093      	str	r3, [r2, #8]
        __HAL_DMA_CLEAR_FLAG(&hdma_usart2_rx, __HAL_DMA_GET_FE_FLAG_INDEX(&hdma_usart2_rx));
 8023076:	4b96      	ldr	r3, [pc, #600]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 8023078:	681b      	ldr	r3, [r3, #0]
 802307a:	461a      	mov	r2, r3
 802307c:	4b95      	ldr	r3, [pc, #596]	; (80232d4 <UBLOX_DMA_IrqHandler+0xd2c>)
 802307e:	429a      	cmp	r2, r3
 8023080:	d95c      	bls.n	802313c <UBLOX_DMA_IrqHandler+0xb94>
 8023082:	4b93      	ldr	r3, [pc, #588]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 8023084:	681b      	ldr	r3, [r3, #0]
 8023086:	4a94      	ldr	r2, [pc, #592]	; (80232d8 <UBLOX_DMA_IrqHandler+0xd30>)
 8023088:	4293      	cmp	r3, r2
 802308a:	d053      	beq.n	8023134 <UBLOX_DMA_IrqHandler+0xb8c>
 802308c:	4b90      	ldr	r3, [pc, #576]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 802308e:	681b      	ldr	r3, [r3, #0]
 8023090:	4a92      	ldr	r2, [pc, #584]	; (80232dc <UBLOX_DMA_IrqHandler+0xd34>)
 8023092:	4293      	cmp	r3, r2
 8023094:	d04c      	beq.n	8023130 <UBLOX_DMA_IrqHandler+0xb88>
 8023096:	4b8e      	ldr	r3, [pc, #568]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 8023098:	681b      	ldr	r3, [r3, #0]
 802309a:	4a91      	ldr	r2, [pc, #580]	; (80232e0 <UBLOX_DMA_IrqHandler+0xd38>)
 802309c:	4293      	cmp	r3, r2
 802309e:	d045      	beq.n	802312c <UBLOX_DMA_IrqHandler+0xb84>
 80230a0:	4b8b      	ldr	r3, [pc, #556]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 80230a2:	681b      	ldr	r3, [r3, #0]
 80230a4:	4a8f      	ldr	r2, [pc, #572]	; (80232e4 <UBLOX_DMA_IrqHandler+0xd3c>)
 80230a6:	4293      	cmp	r3, r2
 80230a8:	d03e      	beq.n	8023128 <UBLOX_DMA_IrqHandler+0xb80>
 80230aa:	4b89      	ldr	r3, [pc, #548]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 80230ac:	681b      	ldr	r3, [r3, #0]
 80230ae:	4a8e      	ldr	r2, [pc, #568]	; (80232e8 <UBLOX_DMA_IrqHandler+0xd40>)
 80230b0:	4293      	cmp	r3, r2
 80230b2:	d037      	beq.n	8023124 <UBLOX_DMA_IrqHandler+0xb7c>
 80230b4:	4b86      	ldr	r3, [pc, #536]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 80230b6:	681b      	ldr	r3, [r3, #0]
 80230b8:	4a8c      	ldr	r2, [pc, #560]	; (80232ec <UBLOX_DMA_IrqHandler+0xd44>)
 80230ba:	4293      	cmp	r3, r2
 80230bc:	d030      	beq.n	8023120 <UBLOX_DMA_IrqHandler+0xb78>
 80230be:	4b84      	ldr	r3, [pc, #528]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 80230c0:	681b      	ldr	r3, [r3, #0]
 80230c2:	4a8b      	ldr	r2, [pc, #556]	; (80232f0 <UBLOX_DMA_IrqHandler+0xd48>)
 80230c4:	4293      	cmp	r3, r2
 80230c6:	d029      	beq.n	802311c <UBLOX_DMA_IrqHandler+0xb74>
 80230c8:	4b81      	ldr	r3, [pc, #516]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 80230ca:	681b      	ldr	r3, [r3, #0]
 80230cc:	4a89      	ldr	r2, [pc, #548]	; (80232f4 <UBLOX_DMA_IrqHandler+0xd4c>)
 80230ce:	4293      	cmp	r3, r2
 80230d0:	d022      	beq.n	8023118 <UBLOX_DMA_IrqHandler+0xb70>
 80230d2:	4b7f      	ldr	r3, [pc, #508]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 80230d4:	681b      	ldr	r3, [r3, #0]
 80230d6:	4a88      	ldr	r2, [pc, #544]	; (80232f8 <UBLOX_DMA_IrqHandler+0xd50>)
 80230d8:	4293      	cmp	r3, r2
 80230da:	d01a      	beq.n	8023112 <UBLOX_DMA_IrqHandler+0xb6a>
 80230dc:	4b7c      	ldr	r3, [pc, #496]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 80230de:	681b      	ldr	r3, [r3, #0]
 80230e0:	4a86      	ldr	r2, [pc, #536]	; (80232fc <UBLOX_DMA_IrqHandler+0xd54>)
 80230e2:	4293      	cmp	r3, r2
 80230e4:	d012      	beq.n	802310c <UBLOX_DMA_IrqHandler+0xb64>
 80230e6:	4b7a      	ldr	r3, [pc, #488]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 80230e8:	681b      	ldr	r3, [r3, #0]
 80230ea:	4a85      	ldr	r2, [pc, #532]	; (8023300 <UBLOX_DMA_IrqHandler+0xd58>)
 80230ec:	4293      	cmp	r3, r2
 80230ee:	d00a      	beq.n	8023106 <UBLOX_DMA_IrqHandler+0xb5e>
 80230f0:	4b77      	ldr	r3, [pc, #476]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 80230f2:	681b      	ldr	r3, [r3, #0]
 80230f4:	4a83      	ldr	r2, [pc, #524]	; (8023304 <UBLOX_DMA_IrqHandler+0xd5c>)
 80230f6:	4293      	cmp	r3, r2
 80230f8:	d102      	bne.n	8023100 <UBLOX_DMA_IrqHandler+0xb58>
 80230fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80230fe:	e01a      	b.n	8023136 <UBLOX_DMA_IrqHandler+0xb8e>
 8023100:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8023104:	e017      	b.n	8023136 <UBLOX_DMA_IrqHandler+0xb8e>
 8023106:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 802310a:	e014      	b.n	8023136 <UBLOX_DMA_IrqHandler+0xb8e>
 802310c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8023110:	e011      	b.n	8023136 <UBLOX_DMA_IrqHandler+0xb8e>
 8023112:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8023116:	e00e      	b.n	8023136 <UBLOX_DMA_IrqHandler+0xb8e>
 8023118:	2340      	movs	r3, #64	; 0x40
 802311a:	e00c      	b.n	8023136 <UBLOX_DMA_IrqHandler+0xb8e>
 802311c:	2340      	movs	r3, #64	; 0x40
 802311e:	e00a      	b.n	8023136 <UBLOX_DMA_IrqHandler+0xb8e>
 8023120:	2340      	movs	r3, #64	; 0x40
 8023122:	e008      	b.n	8023136 <UBLOX_DMA_IrqHandler+0xb8e>
 8023124:	2340      	movs	r3, #64	; 0x40
 8023126:	e006      	b.n	8023136 <UBLOX_DMA_IrqHandler+0xb8e>
 8023128:	2301      	movs	r3, #1
 802312a:	e004      	b.n	8023136 <UBLOX_DMA_IrqHandler+0xb8e>
 802312c:	2301      	movs	r3, #1
 802312e:	e002      	b.n	8023136 <UBLOX_DMA_IrqHandler+0xb8e>
 8023130:	2301      	movs	r3, #1
 8023132:	e000      	b.n	8023136 <UBLOX_DMA_IrqHandler+0xb8e>
 8023134:	2301      	movs	r3, #1
 8023136:	4a74      	ldr	r2, [pc, #464]	; (8023308 <UBLOX_DMA_IrqHandler+0xd60>)
 8023138:	60d3      	str	r3, [r2, #12]
 802313a:	e147      	b.n	80233cc <UBLOX_DMA_IrqHandler+0xe24>
 802313c:	4b64      	ldr	r3, [pc, #400]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 802313e:	681b      	ldr	r3, [r3, #0]
 8023140:	461a      	mov	r2, r3
 8023142:	4b72      	ldr	r3, [pc, #456]	; (802330c <UBLOX_DMA_IrqHandler+0xd64>)
 8023144:	429a      	cmp	r2, r3
 8023146:	d95c      	bls.n	8023202 <UBLOX_DMA_IrqHandler+0xc5a>
 8023148:	4b61      	ldr	r3, [pc, #388]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 802314a:	681b      	ldr	r3, [r3, #0]
 802314c:	4a62      	ldr	r2, [pc, #392]	; (80232d8 <UBLOX_DMA_IrqHandler+0xd30>)
 802314e:	4293      	cmp	r3, r2
 8023150:	d053      	beq.n	80231fa <UBLOX_DMA_IrqHandler+0xc52>
 8023152:	4b5f      	ldr	r3, [pc, #380]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 8023154:	681b      	ldr	r3, [r3, #0]
 8023156:	4a61      	ldr	r2, [pc, #388]	; (80232dc <UBLOX_DMA_IrqHandler+0xd34>)
 8023158:	4293      	cmp	r3, r2
 802315a:	d04c      	beq.n	80231f6 <UBLOX_DMA_IrqHandler+0xc4e>
 802315c:	4b5c      	ldr	r3, [pc, #368]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 802315e:	681b      	ldr	r3, [r3, #0]
 8023160:	4a5f      	ldr	r2, [pc, #380]	; (80232e0 <UBLOX_DMA_IrqHandler+0xd38>)
 8023162:	4293      	cmp	r3, r2
 8023164:	d045      	beq.n	80231f2 <UBLOX_DMA_IrqHandler+0xc4a>
 8023166:	4b5a      	ldr	r3, [pc, #360]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 8023168:	681b      	ldr	r3, [r3, #0]
 802316a:	4a5e      	ldr	r2, [pc, #376]	; (80232e4 <UBLOX_DMA_IrqHandler+0xd3c>)
 802316c:	4293      	cmp	r3, r2
 802316e:	d03e      	beq.n	80231ee <UBLOX_DMA_IrqHandler+0xc46>
 8023170:	4b57      	ldr	r3, [pc, #348]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 8023172:	681b      	ldr	r3, [r3, #0]
 8023174:	4a5c      	ldr	r2, [pc, #368]	; (80232e8 <UBLOX_DMA_IrqHandler+0xd40>)
 8023176:	4293      	cmp	r3, r2
 8023178:	d037      	beq.n	80231ea <UBLOX_DMA_IrqHandler+0xc42>
 802317a:	4b55      	ldr	r3, [pc, #340]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 802317c:	681b      	ldr	r3, [r3, #0]
 802317e:	4a5b      	ldr	r2, [pc, #364]	; (80232ec <UBLOX_DMA_IrqHandler+0xd44>)
 8023180:	4293      	cmp	r3, r2
 8023182:	d030      	beq.n	80231e6 <UBLOX_DMA_IrqHandler+0xc3e>
 8023184:	4b52      	ldr	r3, [pc, #328]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 8023186:	681b      	ldr	r3, [r3, #0]
 8023188:	4a59      	ldr	r2, [pc, #356]	; (80232f0 <UBLOX_DMA_IrqHandler+0xd48>)
 802318a:	4293      	cmp	r3, r2
 802318c:	d029      	beq.n	80231e2 <UBLOX_DMA_IrqHandler+0xc3a>
 802318e:	4b50      	ldr	r3, [pc, #320]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 8023190:	681b      	ldr	r3, [r3, #0]
 8023192:	4a58      	ldr	r2, [pc, #352]	; (80232f4 <UBLOX_DMA_IrqHandler+0xd4c>)
 8023194:	4293      	cmp	r3, r2
 8023196:	d022      	beq.n	80231de <UBLOX_DMA_IrqHandler+0xc36>
 8023198:	4b4d      	ldr	r3, [pc, #308]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 802319a:	681b      	ldr	r3, [r3, #0]
 802319c:	4a56      	ldr	r2, [pc, #344]	; (80232f8 <UBLOX_DMA_IrqHandler+0xd50>)
 802319e:	4293      	cmp	r3, r2
 80231a0:	d01a      	beq.n	80231d8 <UBLOX_DMA_IrqHandler+0xc30>
 80231a2:	4b4b      	ldr	r3, [pc, #300]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 80231a4:	681b      	ldr	r3, [r3, #0]
 80231a6:	4a55      	ldr	r2, [pc, #340]	; (80232fc <UBLOX_DMA_IrqHandler+0xd54>)
 80231a8:	4293      	cmp	r3, r2
 80231aa:	d012      	beq.n	80231d2 <UBLOX_DMA_IrqHandler+0xc2a>
 80231ac:	4b48      	ldr	r3, [pc, #288]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 80231ae:	681b      	ldr	r3, [r3, #0]
 80231b0:	4a53      	ldr	r2, [pc, #332]	; (8023300 <UBLOX_DMA_IrqHandler+0xd58>)
 80231b2:	4293      	cmp	r3, r2
 80231b4:	d00a      	beq.n	80231cc <UBLOX_DMA_IrqHandler+0xc24>
 80231b6:	4b46      	ldr	r3, [pc, #280]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 80231b8:	681b      	ldr	r3, [r3, #0]
 80231ba:	4a52      	ldr	r2, [pc, #328]	; (8023304 <UBLOX_DMA_IrqHandler+0xd5c>)
 80231bc:	4293      	cmp	r3, r2
 80231be:	d102      	bne.n	80231c6 <UBLOX_DMA_IrqHandler+0xc1e>
 80231c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80231c4:	e01a      	b.n	80231fc <UBLOX_DMA_IrqHandler+0xc54>
 80231c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80231ca:	e017      	b.n	80231fc <UBLOX_DMA_IrqHandler+0xc54>
 80231cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80231d0:	e014      	b.n	80231fc <UBLOX_DMA_IrqHandler+0xc54>
 80231d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80231d6:	e011      	b.n	80231fc <UBLOX_DMA_IrqHandler+0xc54>
 80231d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80231dc:	e00e      	b.n	80231fc <UBLOX_DMA_IrqHandler+0xc54>
 80231de:	2340      	movs	r3, #64	; 0x40
 80231e0:	e00c      	b.n	80231fc <UBLOX_DMA_IrqHandler+0xc54>
 80231e2:	2340      	movs	r3, #64	; 0x40
 80231e4:	e00a      	b.n	80231fc <UBLOX_DMA_IrqHandler+0xc54>
 80231e6:	2340      	movs	r3, #64	; 0x40
 80231e8:	e008      	b.n	80231fc <UBLOX_DMA_IrqHandler+0xc54>
 80231ea:	2340      	movs	r3, #64	; 0x40
 80231ec:	e006      	b.n	80231fc <UBLOX_DMA_IrqHandler+0xc54>
 80231ee:	2301      	movs	r3, #1
 80231f0:	e004      	b.n	80231fc <UBLOX_DMA_IrqHandler+0xc54>
 80231f2:	2301      	movs	r3, #1
 80231f4:	e002      	b.n	80231fc <UBLOX_DMA_IrqHandler+0xc54>
 80231f6:	2301      	movs	r3, #1
 80231f8:	e000      	b.n	80231fc <UBLOX_DMA_IrqHandler+0xc54>
 80231fa:	2301      	movs	r3, #1
 80231fc:	4a42      	ldr	r2, [pc, #264]	; (8023308 <UBLOX_DMA_IrqHandler+0xd60>)
 80231fe:	6093      	str	r3, [r2, #8]
 8023200:	e0e4      	b.n	80233cc <UBLOX_DMA_IrqHandler+0xe24>
 8023202:	4b33      	ldr	r3, [pc, #204]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 8023204:	681b      	ldr	r3, [r3, #0]
 8023206:	461a      	mov	r2, r3
 8023208:	4b41      	ldr	r3, [pc, #260]	; (8023310 <UBLOX_DMA_IrqHandler+0xd68>)
 802320a:	429a      	cmp	r2, r3
 802320c:	f240 8082 	bls.w	8023314 <UBLOX_DMA_IrqHandler+0xd6c>
 8023210:	4b2f      	ldr	r3, [pc, #188]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 8023212:	681b      	ldr	r3, [r3, #0]
 8023214:	4a30      	ldr	r2, [pc, #192]	; (80232d8 <UBLOX_DMA_IrqHandler+0xd30>)
 8023216:	4293      	cmp	r3, r2
 8023218:	d053      	beq.n	80232c2 <UBLOX_DMA_IrqHandler+0xd1a>
 802321a:	4b2d      	ldr	r3, [pc, #180]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 802321c:	681b      	ldr	r3, [r3, #0]
 802321e:	4a2f      	ldr	r2, [pc, #188]	; (80232dc <UBLOX_DMA_IrqHandler+0xd34>)
 8023220:	4293      	cmp	r3, r2
 8023222:	d04c      	beq.n	80232be <UBLOX_DMA_IrqHandler+0xd16>
 8023224:	4b2a      	ldr	r3, [pc, #168]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 8023226:	681b      	ldr	r3, [r3, #0]
 8023228:	4a2d      	ldr	r2, [pc, #180]	; (80232e0 <UBLOX_DMA_IrqHandler+0xd38>)
 802322a:	4293      	cmp	r3, r2
 802322c:	d045      	beq.n	80232ba <UBLOX_DMA_IrqHandler+0xd12>
 802322e:	4b28      	ldr	r3, [pc, #160]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 8023230:	681b      	ldr	r3, [r3, #0]
 8023232:	4a2c      	ldr	r2, [pc, #176]	; (80232e4 <UBLOX_DMA_IrqHandler+0xd3c>)
 8023234:	4293      	cmp	r3, r2
 8023236:	d03e      	beq.n	80232b6 <UBLOX_DMA_IrqHandler+0xd0e>
 8023238:	4b25      	ldr	r3, [pc, #148]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 802323a:	681b      	ldr	r3, [r3, #0]
 802323c:	4a2a      	ldr	r2, [pc, #168]	; (80232e8 <UBLOX_DMA_IrqHandler+0xd40>)
 802323e:	4293      	cmp	r3, r2
 8023240:	d037      	beq.n	80232b2 <UBLOX_DMA_IrqHandler+0xd0a>
 8023242:	4b23      	ldr	r3, [pc, #140]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 8023244:	681b      	ldr	r3, [r3, #0]
 8023246:	4a29      	ldr	r2, [pc, #164]	; (80232ec <UBLOX_DMA_IrqHandler+0xd44>)
 8023248:	4293      	cmp	r3, r2
 802324a:	d030      	beq.n	80232ae <UBLOX_DMA_IrqHandler+0xd06>
 802324c:	4b20      	ldr	r3, [pc, #128]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 802324e:	681b      	ldr	r3, [r3, #0]
 8023250:	4a27      	ldr	r2, [pc, #156]	; (80232f0 <UBLOX_DMA_IrqHandler+0xd48>)
 8023252:	4293      	cmp	r3, r2
 8023254:	d029      	beq.n	80232aa <UBLOX_DMA_IrqHandler+0xd02>
 8023256:	4b1e      	ldr	r3, [pc, #120]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 8023258:	681b      	ldr	r3, [r3, #0]
 802325a:	4a26      	ldr	r2, [pc, #152]	; (80232f4 <UBLOX_DMA_IrqHandler+0xd4c>)
 802325c:	4293      	cmp	r3, r2
 802325e:	d022      	beq.n	80232a6 <UBLOX_DMA_IrqHandler+0xcfe>
 8023260:	4b1b      	ldr	r3, [pc, #108]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 8023262:	681b      	ldr	r3, [r3, #0]
 8023264:	4a24      	ldr	r2, [pc, #144]	; (80232f8 <UBLOX_DMA_IrqHandler+0xd50>)
 8023266:	4293      	cmp	r3, r2
 8023268:	d01a      	beq.n	80232a0 <UBLOX_DMA_IrqHandler+0xcf8>
 802326a:	4b19      	ldr	r3, [pc, #100]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 802326c:	681b      	ldr	r3, [r3, #0]
 802326e:	4a23      	ldr	r2, [pc, #140]	; (80232fc <UBLOX_DMA_IrqHandler+0xd54>)
 8023270:	4293      	cmp	r3, r2
 8023272:	d012      	beq.n	802329a <UBLOX_DMA_IrqHandler+0xcf2>
 8023274:	4b16      	ldr	r3, [pc, #88]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 8023276:	681b      	ldr	r3, [r3, #0]
 8023278:	4a21      	ldr	r2, [pc, #132]	; (8023300 <UBLOX_DMA_IrqHandler+0xd58>)
 802327a:	4293      	cmp	r3, r2
 802327c:	d00a      	beq.n	8023294 <UBLOX_DMA_IrqHandler+0xcec>
 802327e:	4b14      	ldr	r3, [pc, #80]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 8023280:	681b      	ldr	r3, [r3, #0]
 8023282:	4a20      	ldr	r2, [pc, #128]	; (8023304 <UBLOX_DMA_IrqHandler+0xd5c>)
 8023284:	4293      	cmp	r3, r2
 8023286:	d102      	bne.n	802328e <UBLOX_DMA_IrqHandler+0xce6>
 8023288:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 802328c:	e01a      	b.n	80232c4 <UBLOX_DMA_IrqHandler+0xd1c>
 802328e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8023292:	e017      	b.n	80232c4 <UBLOX_DMA_IrqHandler+0xd1c>
 8023294:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8023298:	e014      	b.n	80232c4 <UBLOX_DMA_IrqHandler+0xd1c>
 802329a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 802329e:	e011      	b.n	80232c4 <UBLOX_DMA_IrqHandler+0xd1c>
 80232a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80232a4:	e00e      	b.n	80232c4 <UBLOX_DMA_IrqHandler+0xd1c>
 80232a6:	2340      	movs	r3, #64	; 0x40
 80232a8:	e00c      	b.n	80232c4 <UBLOX_DMA_IrqHandler+0xd1c>
 80232aa:	2340      	movs	r3, #64	; 0x40
 80232ac:	e00a      	b.n	80232c4 <UBLOX_DMA_IrqHandler+0xd1c>
 80232ae:	2340      	movs	r3, #64	; 0x40
 80232b0:	e008      	b.n	80232c4 <UBLOX_DMA_IrqHandler+0xd1c>
 80232b2:	2340      	movs	r3, #64	; 0x40
 80232b4:	e006      	b.n	80232c4 <UBLOX_DMA_IrqHandler+0xd1c>
 80232b6:	2301      	movs	r3, #1
 80232b8:	e004      	b.n	80232c4 <UBLOX_DMA_IrqHandler+0xd1c>
 80232ba:	2301      	movs	r3, #1
 80232bc:	e002      	b.n	80232c4 <UBLOX_DMA_IrqHandler+0xd1c>
 80232be:	2301      	movs	r3, #1
 80232c0:	e000      	b.n	80232c4 <UBLOX_DMA_IrqHandler+0xd1c>
 80232c2:	2301      	movs	r3, #1
 80232c4:	4a01      	ldr	r2, [pc, #4]	; (80232cc <UBLOX_DMA_IrqHandler+0xd24>)
 80232c6:	60d3      	str	r3, [r2, #12]
 80232c8:	e080      	b.n	80233cc <UBLOX_DMA_IrqHandler+0xe24>
 80232ca:	bf00      	nop
 80232cc:	40026000 	.word	0x40026000
 80232d0:	200084c4 	.word	0x200084c4
 80232d4:	40026458 	.word	0x40026458
 80232d8:	40026010 	.word	0x40026010
 80232dc:	40026410 	.word	0x40026410
 80232e0:	40026070 	.word	0x40026070
 80232e4:	40026470 	.word	0x40026470
 80232e8:	40026028 	.word	0x40026028
 80232ec:	40026428 	.word	0x40026428
 80232f0:	40026088 	.word	0x40026088
 80232f4:	40026488 	.word	0x40026488
 80232f8:	40026040 	.word	0x40026040
 80232fc:	40026440 	.word	0x40026440
 8023300:	400260a0 	.word	0x400260a0
 8023304:	400264a0 	.word	0x400264a0
 8023308:	40026400 	.word	0x40026400
 802330c:	400260b8 	.word	0x400260b8
 8023310:	40026058 	.word	0x40026058
 8023314:	4b95      	ldr	r3, [pc, #596]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 8023316:	681b      	ldr	r3, [r3, #0]
 8023318:	4a95      	ldr	r2, [pc, #596]	; (8023570 <UBLOX_DMA_IrqHandler+0xfc8>)
 802331a:	4293      	cmp	r3, r2
 802331c:	d053      	beq.n	80233c6 <UBLOX_DMA_IrqHandler+0xe1e>
 802331e:	4b93      	ldr	r3, [pc, #588]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 8023320:	681b      	ldr	r3, [r3, #0]
 8023322:	4a94      	ldr	r2, [pc, #592]	; (8023574 <UBLOX_DMA_IrqHandler+0xfcc>)
 8023324:	4293      	cmp	r3, r2
 8023326:	d04c      	beq.n	80233c2 <UBLOX_DMA_IrqHandler+0xe1a>
 8023328:	4b90      	ldr	r3, [pc, #576]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 802332a:	681b      	ldr	r3, [r3, #0]
 802332c:	4a92      	ldr	r2, [pc, #584]	; (8023578 <UBLOX_DMA_IrqHandler+0xfd0>)
 802332e:	4293      	cmp	r3, r2
 8023330:	d045      	beq.n	80233be <UBLOX_DMA_IrqHandler+0xe16>
 8023332:	4b8e      	ldr	r3, [pc, #568]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 8023334:	681b      	ldr	r3, [r3, #0]
 8023336:	4a91      	ldr	r2, [pc, #580]	; (802357c <UBLOX_DMA_IrqHandler+0xfd4>)
 8023338:	4293      	cmp	r3, r2
 802333a:	d03e      	beq.n	80233ba <UBLOX_DMA_IrqHandler+0xe12>
 802333c:	4b8b      	ldr	r3, [pc, #556]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 802333e:	681b      	ldr	r3, [r3, #0]
 8023340:	4a8f      	ldr	r2, [pc, #572]	; (8023580 <UBLOX_DMA_IrqHandler+0xfd8>)
 8023342:	4293      	cmp	r3, r2
 8023344:	d037      	beq.n	80233b6 <UBLOX_DMA_IrqHandler+0xe0e>
 8023346:	4b89      	ldr	r3, [pc, #548]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 8023348:	681b      	ldr	r3, [r3, #0]
 802334a:	4a8e      	ldr	r2, [pc, #568]	; (8023584 <UBLOX_DMA_IrqHandler+0xfdc>)
 802334c:	4293      	cmp	r3, r2
 802334e:	d030      	beq.n	80233b2 <UBLOX_DMA_IrqHandler+0xe0a>
 8023350:	4b86      	ldr	r3, [pc, #536]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 8023352:	681b      	ldr	r3, [r3, #0]
 8023354:	4a8c      	ldr	r2, [pc, #560]	; (8023588 <UBLOX_DMA_IrqHandler+0xfe0>)
 8023356:	4293      	cmp	r3, r2
 8023358:	d029      	beq.n	80233ae <UBLOX_DMA_IrqHandler+0xe06>
 802335a:	4b84      	ldr	r3, [pc, #528]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 802335c:	681b      	ldr	r3, [r3, #0]
 802335e:	4a8b      	ldr	r2, [pc, #556]	; (802358c <UBLOX_DMA_IrqHandler+0xfe4>)
 8023360:	4293      	cmp	r3, r2
 8023362:	d022      	beq.n	80233aa <UBLOX_DMA_IrqHandler+0xe02>
 8023364:	4b81      	ldr	r3, [pc, #516]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 8023366:	681b      	ldr	r3, [r3, #0]
 8023368:	4a89      	ldr	r2, [pc, #548]	; (8023590 <UBLOX_DMA_IrqHandler+0xfe8>)
 802336a:	4293      	cmp	r3, r2
 802336c:	d01a      	beq.n	80233a4 <UBLOX_DMA_IrqHandler+0xdfc>
 802336e:	4b7f      	ldr	r3, [pc, #508]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 8023370:	681b      	ldr	r3, [r3, #0]
 8023372:	4a88      	ldr	r2, [pc, #544]	; (8023594 <UBLOX_DMA_IrqHandler+0xfec>)
 8023374:	4293      	cmp	r3, r2
 8023376:	d012      	beq.n	802339e <UBLOX_DMA_IrqHandler+0xdf6>
 8023378:	4b7c      	ldr	r3, [pc, #496]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 802337a:	681b      	ldr	r3, [r3, #0]
 802337c:	4a86      	ldr	r2, [pc, #536]	; (8023598 <UBLOX_DMA_IrqHandler+0xff0>)
 802337e:	4293      	cmp	r3, r2
 8023380:	d00a      	beq.n	8023398 <UBLOX_DMA_IrqHandler+0xdf0>
 8023382:	4b7a      	ldr	r3, [pc, #488]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 8023384:	681b      	ldr	r3, [r3, #0]
 8023386:	4a85      	ldr	r2, [pc, #532]	; (802359c <UBLOX_DMA_IrqHandler+0xff4>)
 8023388:	4293      	cmp	r3, r2
 802338a:	d102      	bne.n	8023392 <UBLOX_DMA_IrqHandler+0xdea>
 802338c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8023390:	e01a      	b.n	80233c8 <UBLOX_DMA_IrqHandler+0xe20>
 8023392:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8023396:	e017      	b.n	80233c8 <UBLOX_DMA_IrqHandler+0xe20>
 8023398:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 802339c:	e014      	b.n	80233c8 <UBLOX_DMA_IrqHandler+0xe20>
 802339e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80233a2:	e011      	b.n	80233c8 <UBLOX_DMA_IrqHandler+0xe20>
 80233a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80233a8:	e00e      	b.n	80233c8 <UBLOX_DMA_IrqHandler+0xe20>
 80233aa:	2340      	movs	r3, #64	; 0x40
 80233ac:	e00c      	b.n	80233c8 <UBLOX_DMA_IrqHandler+0xe20>
 80233ae:	2340      	movs	r3, #64	; 0x40
 80233b0:	e00a      	b.n	80233c8 <UBLOX_DMA_IrqHandler+0xe20>
 80233b2:	2340      	movs	r3, #64	; 0x40
 80233b4:	e008      	b.n	80233c8 <UBLOX_DMA_IrqHandler+0xe20>
 80233b6:	2340      	movs	r3, #64	; 0x40
 80233b8:	e006      	b.n	80233c8 <UBLOX_DMA_IrqHandler+0xe20>
 80233ba:	2301      	movs	r3, #1
 80233bc:	e004      	b.n	80233c8 <UBLOX_DMA_IrqHandler+0xe20>
 80233be:	2301      	movs	r3, #1
 80233c0:	e002      	b.n	80233c8 <UBLOX_DMA_IrqHandler+0xe20>
 80233c2:	2301      	movs	r3, #1
 80233c4:	e000      	b.n	80233c8 <UBLOX_DMA_IrqHandler+0xe20>
 80233c6:	2301      	movs	r3, #1
 80233c8:	4a75      	ldr	r2, [pc, #468]	; (80235a0 <UBLOX_DMA_IrqHandler+0xff8>)
 80233ca:	6093      	str	r3, [r2, #8]
        __HAL_DMA_CLEAR_FLAG(&hdma_usart2_rx, __HAL_DMA_GET_DME_FLAG_INDEX(&hdma_usart2_rx));
 80233cc:	4b67      	ldr	r3, [pc, #412]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 80233ce:	681b      	ldr	r3, [r3, #0]
 80233d0:	461a      	mov	r2, r3
 80233d2:	4b74      	ldr	r3, [pc, #464]	; (80235a4 <UBLOX_DMA_IrqHandler+0xffc>)
 80233d4:	429a      	cmp	r2, r3
 80233d6:	d960      	bls.n	802349a <UBLOX_DMA_IrqHandler+0xef2>
 80233d8:	4b64      	ldr	r3, [pc, #400]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 80233da:	681b      	ldr	r3, [r3, #0]
 80233dc:	4a64      	ldr	r2, [pc, #400]	; (8023570 <UBLOX_DMA_IrqHandler+0xfc8>)
 80233de:	4293      	cmp	r3, r2
 80233e0:	d057      	beq.n	8023492 <UBLOX_DMA_IrqHandler+0xeea>
 80233e2:	4b62      	ldr	r3, [pc, #392]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 80233e4:	681b      	ldr	r3, [r3, #0]
 80233e6:	4a63      	ldr	r2, [pc, #396]	; (8023574 <UBLOX_DMA_IrqHandler+0xfcc>)
 80233e8:	4293      	cmp	r3, r2
 80233ea:	d050      	beq.n	802348e <UBLOX_DMA_IrqHandler+0xee6>
 80233ec:	4b5f      	ldr	r3, [pc, #380]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 80233ee:	681b      	ldr	r3, [r3, #0]
 80233f0:	4a61      	ldr	r2, [pc, #388]	; (8023578 <UBLOX_DMA_IrqHandler+0xfd0>)
 80233f2:	4293      	cmp	r3, r2
 80233f4:	d049      	beq.n	802348a <UBLOX_DMA_IrqHandler+0xee2>
 80233f6:	4b5d      	ldr	r3, [pc, #372]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 80233f8:	681b      	ldr	r3, [r3, #0]
 80233fa:	4a60      	ldr	r2, [pc, #384]	; (802357c <UBLOX_DMA_IrqHandler+0xfd4>)
 80233fc:	4293      	cmp	r3, r2
 80233fe:	d042      	beq.n	8023486 <UBLOX_DMA_IrqHandler+0xede>
 8023400:	4b5a      	ldr	r3, [pc, #360]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 8023402:	681b      	ldr	r3, [r3, #0]
 8023404:	4a5e      	ldr	r2, [pc, #376]	; (8023580 <UBLOX_DMA_IrqHandler+0xfd8>)
 8023406:	4293      	cmp	r3, r2
 8023408:	d03a      	beq.n	8023480 <UBLOX_DMA_IrqHandler+0xed8>
 802340a:	4b58      	ldr	r3, [pc, #352]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 802340c:	681b      	ldr	r3, [r3, #0]
 802340e:	4a5d      	ldr	r2, [pc, #372]	; (8023584 <UBLOX_DMA_IrqHandler+0xfdc>)
 8023410:	4293      	cmp	r3, r2
 8023412:	d032      	beq.n	802347a <UBLOX_DMA_IrqHandler+0xed2>
 8023414:	4b55      	ldr	r3, [pc, #340]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 8023416:	681b      	ldr	r3, [r3, #0]
 8023418:	4a5b      	ldr	r2, [pc, #364]	; (8023588 <UBLOX_DMA_IrqHandler+0xfe0>)
 802341a:	4293      	cmp	r3, r2
 802341c:	d02a      	beq.n	8023474 <UBLOX_DMA_IrqHandler+0xecc>
 802341e:	4b53      	ldr	r3, [pc, #332]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 8023420:	681b      	ldr	r3, [r3, #0]
 8023422:	4a5a      	ldr	r2, [pc, #360]	; (802358c <UBLOX_DMA_IrqHandler+0xfe4>)
 8023424:	4293      	cmp	r3, r2
 8023426:	d022      	beq.n	802346e <UBLOX_DMA_IrqHandler+0xec6>
 8023428:	4b50      	ldr	r3, [pc, #320]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 802342a:	681b      	ldr	r3, [r3, #0]
 802342c:	4a58      	ldr	r2, [pc, #352]	; (8023590 <UBLOX_DMA_IrqHandler+0xfe8>)
 802342e:	4293      	cmp	r3, r2
 8023430:	d01a      	beq.n	8023468 <UBLOX_DMA_IrqHandler+0xec0>
 8023432:	4b4e      	ldr	r3, [pc, #312]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 8023434:	681b      	ldr	r3, [r3, #0]
 8023436:	4a57      	ldr	r2, [pc, #348]	; (8023594 <UBLOX_DMA_IrqHandler+0xfec>)
 8023438:	4293      	cmp	r3, r2
 802343a:	d012      	beq.n	8023462 <UBLOX_DMA_IrqHandler+0xeba>
 802343c:	4b4b      	ldr	r3, [pc, #300]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 802343e:	681b      	ldr	r3, [r3, #0]
 8023440:	4a55      	ldr	r2, [pc, #340]	; (8023598 <UBLOX_DMA_IrqHandler+0xff0>)
 8023442:	4293      	cmp	r3, r2
 8023444:	d00a      	beq.n	802345c <UBLOX_DMA_IrqHandler+0xeb4>
 8023446:	4b49      	ldr	r3, [pc, #292]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 8023448:	681b      	ldr	r3, [r3, #0]
 802344a:	4a54      	ldr	r2, [pc, #336]	; (802359c <UBLOX_DMA_IrqHandler+0xff4>)
 802344c:	4293      	cmp	r3, r2
 802344e:	d102      	bne.n	8023456 <UBLOX_DMA_IrqHandler+0xeae>
 8023450:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8023454:	e01e      	b.n	8023494 <UBLOX_DMA_IrqHandler+0xeec>
 8023456:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 802345a:	e01b      	b.n	8023494 <UBLOX_DMA_IrqHandler+0xeec>
 802345c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8023460:	e018      	b.n	8023494 <UBLOX_DMA_IrqHandler+0xeec>
 8023462:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8023466:	e015      	b.n	8023494 <UBLOX_DMA_IrqHandler+0xeec>
 8023468:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 802346c:	e012      	b.n	8023494 <UBLOX_DMA_IrqHandler+0xeec>
 802346e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8023472:	e00f      	b.n	8023494 <UBLOX_DMA_IrqHandler+0xeec>
 8023474:	f44f 7380 	mov.w	r3, #256	; 0x100
 8023478:	e00c      	b.n	8023494 <UBLOX_DMA_IrqHandler+0xeec>
 802347a:	f44f 7380 	mov.w	r3, #256	; 0x100
 802347e:	e009      	b.n	8023494 <UBLOX_DMA_IrqHandler+0xeec>
 8023480:	f44f 7380 	mov.w	r3, #256	; 0x100
 8023484:	e006      	b.n	8023494 <UBLOX_DMA_IrqHandler+0xeec>
 8023486:	2304      	movs	r3, #4
 8023488:	e004      	b.n	8023494 <UBLOX_DMA_IrqHandler+0xeec>
 802348a:	2304      	movs	r3, #4
 802348c:	e002      	b.n	8023494 <UBLOX_DMA_IrqHandler+0xeec>
 802348e:	2304      	movs	r3, #4
 8023490:	e000      	b.n	8023494 <UBLOX_DMA_IrqHandler+0xeec>
 8023492:	2304      	movs	r3, #4
 8023494:	4a44      	ldr	r2, [pc, #272]	; (80235a8 <UBLOX_DMA_IrqHandler+0x1000>)
 8023496:	60d3      	str	r3, [r2, #12]
 8023498:	e151      	b.n	802373e <UBLOX_DMA_IrqHandler+0x1196>
 802349a:	4b34      	ldr	r3, [pc, #208]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 802349c:	681b      	ldr	r3, [r3, #0]
 802349e:	461a      	mov	r2, r3
 80234a0:	4b42      	ldr	r3, [pc, #264]	; (80235ac <UBLOX_DMA_IrqHandler+0x1004>)
 80234a2:	429a      	cmp	r2, r3
 80234a4:	f240 8084 	bls.w	80235b0 <UBLOX_DMA_IrqHandler+0x1008>
 80234a8:	4b30      	ldr	r3, [pc, #192]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 80234aa:	681b      	ldr	r3, [r3, #0]
 80234ac:	4a30      	ldr	r2, [pc, #192]	; (8023570 <UBLOX_DMA_IrqHandler+0xfc8>)
 80234ae:	4293      	cmp	r3, r2
 80234b0:	d057      	beq.n	8023562 <UBLOX_DMA_IrqHandler+0xfba>
 80234b2:	4b2e      	ldr	r3, [pc, #184]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 80234b4:	681b      	ldr	r3, [r3, #0]
 80234b6:	4a2f      	ldr	r2, [pc, #188]	; (8023574 <UBLOX_DMA_IrqHandler+0xfcc>)
 80234b8:	4293      	cmp	r3, r2
 80234ba:	d050      	beq.n	802355e <UBLOX_DMA_IrqHandler+0xfb6>
 80234bc:	4b2b      	ldr	r3, [pc, #172]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 80234be:	681b      	ldr	r3, [r3, #0]
 80234c0:	4a2d      	ldr	r2, [pc, #180]	; (8023578 <UBLOX_DMA_IrqHandler+0xfd0>)
 80234c2:	4293      	cmp	r3, r2
 80234c4:	d049      	beq.n	802355a <UBLOX_DMA_IrqHandler+0xfb2>
 80234c6:	4b29      	ldr	r3, [pc, #164]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 80234c8:	681b      	ldr	r3, [r3, #0]
 80234ca:	4a2c      	ldr	r2, [pc, #176]	; (802357c <UBLOX_DMA_IrqHandler+0xfd4>)
 80234cc:	4293      	cmp	r3, r2
 80234ce:	d042      	beq.n	8023556 <UBLOX_DMA_IrqHandler+0xfae>
 80234d0:	4b26      	ldr	r3, [pc, #152]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 80234d2:	681b      	ldr	r3, [r3, #0]
 80234d4:	4a2a      	ldr	r2, [pc, #168]	; (8023580 <UBLOX_DMA_IrqHandler+0xfd8>)
 80234d6:	4293      	cmp	r3, r2
 80234d8:	d03a      	beq.n	8023550 <UBLOX_DMA_IrqHandler+0xfa8>
 80234da:	4b24      	ldr	r3, [pc, #144]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 80234dc:	681b      	ldr	r3, [r3, #0]
 80234de:	4a29      	ldr	r2, [pc, #164]	; (8023584 <UBLOX_DMA_IrqHandler+0xfdc>)
 80234e0:	4293      	cmp	r3, r2
 80234e2:	d032      	beq.n	802354a <UBLOX_DMA_IrqHandler+0xfa2>
 80234e4:	4b21      	ldr	r3, [pc, #132]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 80234e6:	681b      	ldr	r3, [r3, #0]
 80234e8:	4a27      	ldr	r2, [pc, #156]	; (8023588 <UBLOX_DMA_IrqHandler+0xfe0>)
 80234ea:	4293      	cmp	r3, r2
 80234ec:	d02a      	beq.n	8023544 <UBLOX_DMA_IrqHandler+0xf9c>
 80234ee:	4b1f      	ldr	r3, [pc, #124]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 80234f0:	681b      	ldr	r3, [r3, #0]
 80234f2:	4a26      	ldr	r2, [pc, #152]	; (802358c <UBLOX_DMA_IrqHandler+0xfe4>)
 80234f4:	4293      	cmp	r3, r2
 80234f6:	d022      	beq.n	802353e <UBLOX_DMA_IrqHandler+0xf96>
 80234f8:	4b1c      	ldr	r3, [pc, #112]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 80234fa:	681b      	ldr	r3, [r3, #0]
 80234fc:	4a24      	ldr	r2, [pc, #144]	; (8023590 <UBLOX_DMA_IrqHandler+0xfe8>)
 80234fe:	4293      	cmp	r3, r2
 8023500:	d01a      	beq.n	8023538 <UBLOX_DMA_IrqHandler+0xf90>
 8023502:	4b1a      	ldr	r3, [pc, #104]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 8023504:	681b      	ldr	r3, [r3, #0]
 8023506:	4a23      	ldr	r2, [pc, #140]	; (8023594 <UBLOX_DMA_IrqHandler+0xfec>)
 8023508:	4293      	cmp	r3, r2
 802350a:	d012      	beq.n	8023532 <UBLOX_DMA_IrqHandler+0xf8a>
 802350c:	4b17      	ldr	r3, [pc, #92]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 802350e:	681b      	ldr	r3, [r3, #0]
 8023510:	4a21      	ldr	r2, [pc, #132]	; (8023598 <UBLOX_DMA_IrqHandler+0xff0>)
 8023512:	4293      	cmp	r3, r2
 8023514:	d00a      	beq.n	802352c <UBLOX_DMA_IrqHandler+0xf84>
 8023516:	4b15      	ldr	r3, [pc, #84]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 8023518:	681b      	ldr	r3, [r3, #0]
 802351a:	4a20      	ldr	r2, [pc, #128]	; (802359c <UBLOX_DMA_IrqHandler+0xff4>)
 802351c:	4293      	cmp	r3, r2
 802351e:	d102      	bne.n	8023526 <UBLOX_DMA_IrqHandler+0xf7e>
 8023520:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8023524:	e01e      	b.n	8023564 <UBLOX_DMA_IrqHandler+0xfbc>
 8023526:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 802352a:	e01b      	b.n	8023564 <UBLOX_DMA_IrqHandler+0xfbc>
 802352c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8023530:	e018      	b.n	8023564 <UBLOX_DMA_IrqHandler+0xfbc>
 8023532:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8023536:	e015      	b.n	8023564 <UBLOX_DMA_IrqHandler+0xfbc>
 8023538:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 802353c:	e012      	b.n	8023564 <UBLOX_DMA_IrqHandler+0xfbc>
 802353e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8023542:	e00f      	b.n	8023564 <UBLOX_DMA_IrqHandler+0xfbc>
 8023544:	f44f 7380 	mov.w	r3, #256	; 0x100
 8023548:	e00c      	b.n	8023564 <UBLOX_DMA_IrqHandler+0xfbc>
 802354a:	f44f 7380 	mov.w	r3, #256	; 0x100
 802354e:	e009      	b.n	8023564 <UBLOX_DMA_IrqHandler+0xfbc>
 8023550:	f44f 7380 	mov.w	r3, #256	; 0x100
 8023554:	e006      	b.n	8023564 <UBLOX_DMA_IrqHandler+0xfbc>
 8023556:	2304      	movs	r3, #4
 8023558:	e004      	b.n	8023564 <UBLOX_DMA_IrqHandler+0xfbc>
 802355a:	2304      	movs	r3, #4
 802355c:	e002      	b.n	8023564 <UBLOX_DMA_IrqHandler+0xfbc>
 802355e:	2304      	movs	r3, #4
 8023560:	e000      	b.n	8023564 <UBLOX_DMA_IrqHandler+0xfbc>
 8023562:	2304      	movs	r3, #4
 8023564:	4a10      	ldr	r2, [pc, #64]	; (80235a8 <UBLOX_DMA_IrqHandler+0x1000>)
 8023566:	6093      	str	r3, [r2, #8]
 8023568:	e0e9      	b.n	802373e <UBLOX_DMA_IrqHandler+0x1196>
 802356a:	bf00      	nop
 802356c:	200084c4 	.word	0x200084c4
 8023570:	40026010 	.word	0x40026010
 8023574:	40026410 	.word	0x40026410
 8023578:	40026070 	.word	0x40026070
 802357c:	40026470 	.word	0x40026470
 8023580:	40026028 	.word	0x40026028
 8023584:	40026428 	.word	0x40026428
 8023588:	40026088 	.word	0x40026088
 802358c:	40026488 	.word	0x40026488
 8023590:	40026040 	.word	0x40026040
 8023594:	40026440 	.word	0x40026440
 8023598:	400260a0 	.word	0x400260a0
 802359c:	400264a0 	.word	0x400264a0
 80235a0:	40026000 	.word	0x40026000
 80235a4:	40026458 	.word	0x40026458
 80235a8:	40026400 	.word	0x40026400
 80235ac:	400260b8 	.word	0x400260b8
 80235b0:	4b66      	ldr	r3, [pc, #408]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 80235b2:	681b      	ldr	r3, [r3, #0]
 80235b4:	461a      	mov	r2, r3
 80235b6:	4b66      	ldr	r3, [pc, #408]	; (8023750 <UBLOX_DMA_IrqHandler+0x11a8>)
 80235b8:	429a      	cmp	r2, r3
 80235ba:	d960      	bls.n	802367e <UBLOX_DMA_IrqHandler+0x10d6>
 80235bc:	4b63      	ldr	r3, [pc, #396]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 80235be:	681b      	ldr	r3, [r3, #0]
 80235c0:	4a64      	ldr	r2, [pc, #400]	; (8023754 <UBLOX_DMA_IrqHandler+0x11ac>)
 80235c2:	4293      	cmp	r3, r2
 80235c4:	d057      	beq.n	8023676 <UBLOX_DMA_IrqHandler+0x10ce>
 80235c6:	4b61      	ldr	r3, [pc, #388]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 80235c8:	681b      	ldr	r3, [r3, #0]
 80235ca:	4a63      	ldr	r2, [pc, #396]	; (8023758 <UBLOX_DMA_IrqHandler+0x11b0>)
 80235cc:	4293      	cmp	r3, r2
 80235ce:	d050      	beq.n	8023672 <UBLOX_DMA_IrqHandler+0x10ca>
 80235d0:	4b5e      	ldr	r3, [pc, #376]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 80235d2:	681b      	ldr	r3, [r3, #0]
 80235d4:	4a61      	ldr	r2, [pc, #388]	; (802375c <UBLOX_DMA_IrqHandler+0x11b4>)
 80235d6:	4293      	cmp	r3, r2
 80235d8:	d049      	beq.n	802366e <UBLOX_DMA_IrqHandler+0x10c6>
 80235da:	4b5c      	ldr	r3, [pc, #368]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 80235dc:	681b      	ldr	r3, [r3, #0]
 80235de:	4a60      	ldr	r2, [pc, #384]	; (8023760 <UBLOX_DMA_IrqHandler+0x11b8>)
 80235e0:	4293      	cmp	r3, r2
 80235e2:	d042      	beq.n	802366a <UBLOX_DMA_IrqHandler+0x10c2>
 80235e4:	4b59      	ldr	r3, [pc, #356]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 80235e6:	681b      	ldr	r3, [r3, #0]
 80235e8:	4a5e      	ldr	r2, [pc, #376]	; (8023764 <UBLOX_DMA_IrqHandler+0x11bc>)
 80235ea:	4293      	cmp	r3, r2
 80235ec:	d03a      	beq.n	8023664 <UBLOX_DMA_IrqHandler+0x10bc>
 80235ee:	4b57      	ldr	r3, [pc, #348]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 80235f0:	681b      	ldr	r3, [r3, #0]
 80235f2:	4a5d      	ldr	r2, [pc, #372]	; (8023768 <UBLOX_DMA_IrqHandler+0x11c0>)
 80235f4:	4293      	cmp	r3, r2
 80235f6:	d032      	beq.n	802365e <UBLOX_DMA_IrqHandler+0x10b6>
 80235f8:	4b54      	ldr	r3, [pc, #336]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 80235fa:	681b      	ldr	r3, [r3, #0]
 80235fc:	4a5b      	ldr	r2, [pc, #364]	; (802376c <UBLOX_DMA_IrqHandler+0x11c4>)
 80235fe:	4293      	cmp	r3, r2
 8023600:	d02a      	beq.n	8023658 <UBLOX_DMA_IrqHandler+0x10b0>
 8023602:	4b52      	ldr	r3, [pc, #328]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 8023604:	681b      	ldr	r3, [r3, #0]
 8023606:	4a5a      	ldr	r2, [pc, #360]	; (8023770 <UBLOX_DMA_IrqHandler+0x11c8>)
 8023608:	4293      	cmp	r3, r2
 802360a:	d022      	beq.n	8023652 <UBLOX_DMA_IrqHandler+0x10aa>
 802360c:	4b4f      	ldr	r3, [pc, #316]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 802360e:	681b      	ldr	r3, [r3, #0]
 8023610:	4a58      	ldr	r2, [pc, #352]	; (8023774 <UBLOX_DMA_IrqHandler+0x11cc>)
 8023612:	4293      	cmp	r3, r2
 8023614:	d01a      	beq.n	802364c <UBLOX_DMA_IrqHandler+0x10a4>
 8023616:	4b4d      	ldr	r3, [pc, #308]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 8023618:	681b      	ldr	r3, [r3, #0]
 802361a:	4a57      	ldr	r2, [pc, #348]	; (8023778 <UBLOX_DMA_IrqHandler+0x11d0>)
 802361c:	4293      	cmp	r3, r2
 802361e:	d012      	beq.n	8023646 <UBLOX_DMA_IrqHandler+0x109e>
 8023620:	4b4a      	ldr	r3, [pc, #296]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 8023622:	681b      	ldr	r3, [r3, #0]
 8023624:	4a55      	ldr	r2, [pc, #340]	; (802377c <UBLOX_DMA_IrqHandler+0x11d4>)
 8023626:	4293      	cmp	r3, r2
 8023628:	d00a      	beq.n	8023640 <UBLOX_DMA_IrqHandler+0x1098>
 802362a:	4b48      	ldr	r3, [pc, #288]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 802362c:	681b      	ldr	r3, [r3, #0]
 802362e:	4a54      	ldr	r2, [pc, #336]	; (8023780 <UBLOX_DMA_IrqHandler+0x11d8>)
 8023630:	4293      	cmp	r3, r2
 8023632:	d102      	bne.n	802363a <UBLOX_DMA_IrqHandler+0x1092>
 8023634:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8023638:	e01e      	b.n	8023678 <UBLOX_DMA_IrqHandler+0x10d0>
 802363a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 802363e:	e01b      	b.n	8023678 <UBLOX_DMA_IrqHandler+0x10d0>
 8023640:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8023644:	e018      	b.n	8023678 <UBLOX_DMA_IrqHandler+0x10d0>
 8023646:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 802364a:	e015      	b.n	8023678 <UBLOX_DMA_IrqHandler+0x10d0>
 802364c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8023650:	e012      	b.n	8023678 <UBLOX_DMA_IrqHandler+0x10d0>
 8023652:	f44f 7380 	mov.w	r3, #256	; 0x100
 8023656:	e00f      	b.n	8023678 <UBLOX_DMA_IrqHandler+0x10d0>
 8023658:	f44f 7380 	mov.w	r3, #256	; 0x100
 802365c:	e00c      	b.n	8023678 <UBLOX_DMA_IrqHandler+0x10d0>
 802365e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8023662:	e009      	b.n	8023678 <UBLOX_DMA_IrqHandler+0x10d0>
 8023664:	f44f 7380 	mov.w	r3, #256	; 0x100
 8023668:	e006      	b.n	8023678 <UBLOX_DMA_IrqHandler+0x10d0>
 802366a:	2304      	movs	r3, #4
 802366c:	e004      	b.n	8023678 <UBLOX_DMA_IrqHandler+0x10d0>
 802366e:	2304      	movs	r3, #4
 8023670:	e002      	b.n	8023678 <UBLOX_DMA_IrqHandler+0x10d0>
 8023672:	2304      	movs	r3, #4
 8023674:	e000      	b.n	8023678 <UBLOX_DMA_IrqHandler+0x10d0>
 8023676:	2304      	movs	r3, #4
 8023678:	4a42      	ldr	r2, [pc, #264]	; (8023784 <UBLOX_DMA_IrqHandler+0x11dc>)
 802367a:	60d3      	str	r3, [r2, #12]
 802367c:	e05f      	b.n	802373e <UBLOX_DMA_IrqHandler+0x1196>
 802367e:	4b33      	ldr	r3, [pc, #204]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 8023680:	681b      	ldr	r3, [r3, #0]
 8023682:	4a34      	ldr	r2, [pc, #208]	; (8023754 <UBLOX_DMA_IrqHandler+0x11ac>)
 8023684:	4293      	cmp	r3, r2
 8023686:	d057      	beq.n	8023738 <UBLOX_DMA_IrqHandler+0x1190>
 8023688:	4b30      	ldr	r3, [pc, #192]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 802368a:	681b      	ldr	r3, [r3, #0]
 802368c:	4a32      	ldr	r2, [pc, #200]	; (8023758 <UBLOX_DMA_IrqHandler+0x11b0>)
 802368e:	4293      	cmp	r3, r2
 8023690:	d050      	beq.n	8023734 <UBLOX_DMA_IrqHandler+0x118c>
 8023692:	4b2e      	ldr	r3, [pc, #184]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 8023694:	681b      	ldr	r3, [r3, #0]
 8023696:	4a31      	ldr	r2, [pc, #196]	; (802375c <UBLOX_DMA_IrqHandler+0x11b4>)
 8023698:	4293      	cmp	r3, r2
 802369a:	d049      	beq.n	8023730 <UBLOX_DMA_IrqHandler+0x1188>
 802369c:	4b2b      	ldr	r3, [pc, #172]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 802369e:	681b      	ldr	r3, [r3, #0]
 80236a0:	4a2f      	ldr	r2, [pc, #188]	; (8023760 <UBLOX_DMA_IrqHandler+0x11b8>)
 80236a2:	4293      	cmp	r3, r2
 80236a4:	d042      	beq.n	802372c <UBLOX_DMA_IrqHandler+0x1184>
 80236a6:	4b29      	ldr	r3, [pc, #164]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 80236a8:	681b      	ldr	r3, [r3, #0]
 80236aa:	4a2e      	ldr	r2, [pc, #184]	; (8023764 <UBLOX_DMA_IrqHandler+0x11bc>)
 80236ac:	4293      	cmp	r3, r2
 80236ae:	d03a      	beq.n	8023726 <UBLOX_DMA_IrqHandler+0x117e>
 80236b0:	4b26      	ldr	r3, [pc, #152]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 80236b2:	681b      	ldr	r3, [r3, #0]
 80236b4:	4a2c      	ldr	r2, [pc, #176]	; (8023768 <UBLOX_DMA_IrqHandler+0x11c0>)
 80236b6:	4293      	cmp	r3, r2
 80236b8:	d032      	beq.n	8023720 <UBLOX_DMA_IrqHandler+0x1178>
 80236ba:	4b24      	ldr	r3, [pc, #144]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 80236bc:	681b      	ldr	r3, [r3, #0]
 80236be:	4a2b      	ldr	r2, [pc, #172]	; (802376c <UBLOX_DMA_IrqHandler+0x11c4>)
 80236c0:	4293      	cmp	r3, r2
 80236c2:	d02a      	beq.n	802371a <UBLOX_DMA_IrqHandler+0x1172>
 80236c4:	4b21      	ldr	r3, [pc, #132]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 80236c6:	681b      	ldr	r3, [r3, #0]
 80236c8:	4a29      	ldr	r2, [pc, #164]	; (8023770 <UBLOX_DMA_IrqHandler+0x11c8>)
 80236ca:	4293      	cmp	r3, r2
 80236cc:	d022      	beq.n	8023714 <UBLOX_DMA_IrqHandler+0x116c>
 80236ce:	4b1f      	ldr	r3, [pc, #124]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 80236d0:	681b      	ldr	r3, [r3, #0]
 80236d2:	4a28      	ldr	r2, [pc, #160]	; (8023774 <UBLOX_DMA_IrqHandler+0x11cc>)
 80236d4:	4293      	cmp	r3, r2
 80236d6:	d01a      	beq.n	802370e <UBLOX_DMA_IrqHandler+0x1166>
 80236d8:	4b1c      	ldr	r3, [pc, #112]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 80236da:	681b      	ldr	r3, [r3, #0]
 80236dc:	4a26      	ldr	r2, [pc, #152]	; (8023778 <UBLOX_DMA_IrqHandler+0x11d0>)
 80236de:	4293      	cmp	r3, r2
 80236e0:	d012      	beq.n	8023708 <UBLOX_DMA_IrqHandler+0x1160>
 80236e2:	4b1a      	ldr	r3, [pc, #104]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 80236e4:	681b      	ldr	r3, [r3, #0]
 80236e6:	4a25      	ldr	r2, [pc, #148]	; (802377c <UBLOX_DMA_IrqHandler+0x11d4>)
 80236e8:	4293      	cmp	r3, r2
 80236ea:	d00a      	beq.n	8023702 <UBLOX_DMA_IrqHandler+0x115a>
 80236ec:	4b17      	ldr	r3, [pc, #92]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 80236ee:	681b      	ldr	r3, [r3, #0]
 80236f0:	4a23      	ldr	r2, [pc, #140]	; (8023780 <UBLOX_DMA_IrqHandler+0x11d8>)
 80236f2:	4293      	cmp	r3, r2
 80236f4:	d102      	bne.n	80236fc <UBLOX_DMA_IrqHandler+0x1154>
 80236f6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80236fa:	e01e      	b.n	802373a <UBLOX_DMA_IrqHandler+0x1192>
 80236fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8023700:	e01b      	b.n	802373a <UBLOX_DMA_IrqHandler+0x1192>
 8023702:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8023706:	e018      	b.n	802373a <UBLOX_DMA_IrqHandler+0x1192>
 8023708:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 802370c:	e015      	b.n	802373a <UBLOX_DMA_IrqHandler+0x1192>
 802370e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8023712:	e012      	b.n	802373a <UBLOX_DMA_IrqHandler+0x1192>
 8023714:	f44f 7380 	mov.w	r3, #256	; 0x100
 8023718:	e00f      	b.n	802373a <UBLOX_DMA_IrqHandler+0x1192>
 802371a:	f44f 7380 	mov.w	r3, #256	; 0x100
 802371e:	e00c      	b.n	802373a <UBLOX_DMA_IrqHandler+0x1192>
 8023720:	f44f 7380 	mov.w	r3, #256	; 0x100
 8023724:	e009      	b.n	802373a <UBLOX_DMA_IrqHandler+0x1192>
 8023726:	f44f 7380 	mov.w	r3, #256	; 0x100
 802372a:	e006      	b.n	802373a <UBLOX_DMA_IrqHandler+0x1192>
 802372c:	2304      	movs	r3, #4
 802372e:	e004      	b.n	802373a <UBLOX_DMA_IrqHandler+0x1192>
 8023730:	2304      	movs	r3, #4
 8023732:	e002      	b.n	802373a <UBLOX_DMA_IrqHandler+0x1192>
 8023734:	2304      	movs	r3, #4
 8023736:	e000      	b.n	802373a <UBLOX_DMA_IrqHandler+0x1192>
 8023738:	2304      	movs	r3, #4
 802373a:	4a12      	ldr	r2, [pc, #72]	; (8023784 <UBLOX_DMA_IrqHandler+0x11dc>)
 802373c:	6093      	str	r3, [r2, #8]
        HAL_UART_Receive_DMA(&huart2, (uint8_t*) UBLOX_DMA_RX, UBLOX_DMA_RX_SZ);
 802373e:	2280      	movs	r2, #128	; 0x80
 8023740:	4911      	ldr	r1, [pc, #68]	; (8023788 <UBLOX_DMA_IrqHandler+0x11e0>)
 8023742:	4812      	ldr	r0, [pc, #72]	; (802378c <UBLOX_DMA_IrqHandler+0x11e4>)
 8023744:	f012 ff64 	bl	8036610 <HAL_UART_Receive_DMA>
}
 8023748:	bf00      	nop
 802374a:	bd80      	pop	{r7, pc}
 802374c:	200084c4 	.word	0x200084c4
 8023750:	40026058 	.word	0x40026058
 8023754:	40026010 	.word	0x40026010
 8023758:	40026410 	.word	0x40026410
 802375c:	40026070 	.word	0x40026070
 8023760:	40026470 	.word	0x40026470
 8023764:	40026028 	.word	0x40026028
 8023768:	40026428 	.word	0x40026428
 802376c:	40026088 	.word	0x40026088
 8023770:	40026488 	.word	0x40026488
 8023774:	40026040 	.word	0x40026040
 8023778:	40026440 	.word	0x40026440
 802377c:	400260a0 	.word	0x400260a0
 8023780:	400264a0 	.word	0x400264a0
 8023784:	40026000 	.word	0x40026000
 8023788:	20000d80 	.word	0x20000d80
 802378c:	20008938 	.word	0x20008938

08023790 <UBLOX_DMA_Init>:

void UBLOX_DMA_Init(void) {
 8023790:	b580      	push	{r7, lr}
 8023792:	af00      	add	r7, sp, #0
    __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);        // enable idle line interrupt
 8023794:	4b0f      	ldr	r3, [pc, #60]	; (80237d4 <UBLOX_DMA_Init+0x44>)
 8023796:	681b      	ldr	r3, [r3, #0]
 8023798:	68da      	ldr	r2, [r3, #12]
 802379a:	4b0e      	ldr	r3, [pc, #56]	; (80237d4 <UBLOX_DMA_Init+0x44>)
 802379c:	681b      	ldr	r3, [r3, #0]
 802379e:	f042 0210 	orr.w	r2, r2, #16
 80237a2:	60da      	str	r2, [r3, #12]
    __HAL_DMA_ENABLE_IT(&hdma_usart2_rx, DMA_IT_TC);    // enable DMA Tx cplt interrupt
 80237a4:	4b0c      	ldr	r3, [pc, #48]	; (80237d8 <UBLOX_DMA_Init+0x48>)
 80237a6:	681b      	ldr	r3, [r3, #0]
 80237a8:	681a      	ldr	r2, [r3, #0]
 80237aa:	4b0b      	ldr	r3, [pc, #44]	; (80237d8 <UBLOX_DMA_Init+0x48>)
 80237ac:	681b      	ldr	r3, [r3, #0]
 80237ae:	f042 0210 	orr.w	r2, r2, #16
 80237b2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE_IT(&hdma_usart2_rx, DMA_IT_HT);    // enable half complete interrupt
 80237b4:	4b08      	ldr	r3, [pc, #32]	; (80237d8 <UBLOX_DMA_Init+0x48>)
 80237b6:	681b      	ldr	r3, [r3, #0]
 80237b8:	681a      	ldr	r2, [r3, #0]
 80237ba:	4b07      	ldr	r3, [pc, #28]	; (80237d8 <UBLOX_DMA_Init+0x48>)
 80237bc:	681b      	ldr	r3, [r3, #0]
 80237be:	f042 0208 	orr.w	r2, r2, #8
 80237c2:	601a      	str	r2, [r3, #0]

    /* Start DMA transfer */
    HAL_UART_Receive_DMA(&huart2, (uint8_t*) UBLOX_DMA_RX, UBLOX_DMA_RX_SZ);
 80237c4:	2280      	movs	r2, #128	; 0x80
 80237c6:	4905      	ldr	r1, [pc, #20]	; (80237dc <UBLOX_DMA_Init+0x4c>)
 80237c8:	4802      	ldr	r0, [pc, #8]	; (80237d4 <UBLOX_DMA_Init+0x44>)
 80237ca:	f012 ff21 	bl	8036610 <HAL_UART_Receive_DMA>
}
 80237ce:	bf00      	nop
 80237d0:	bd80      	pop	{r7, pc}
 80237d2:	bf00      	nop
 80237d4:	20008938 	.word	0x20008938
 80237d8:	200084c4 	.word	0x200084c4
 80237dc:	20000d80 	.word	0x20000d80

080237e0 <UBLOX_Check_Buffer>:

static void UBLOX_Check_Buffer(uint8_t idle) {
 80237e0:	b580      	push	{r7, lr}
 80237e2:	b084      	sub	sp, #16
 80237e4:	af00      	add	r7, sp, #0
 80237e6:	4603      	mov	r3, r0
 80237e8:	71fb      	strb	r3, [r7, #7]
    static uint8_t clear = 1;
    static size_t old_pos;
    size_t pos;

    // Auto clear
    if (clear) {
 80237ea:	4b24      	ldr	r3, [pc, #144]	; (802387c <UBLOX_Check_Buffer+0x9c>)
 80237ec:	781b      	ldrb	r3, [r3, #0]
 80237ee:	2b00      	cmp	r3, #0
 80237f0:	d004      	beq.n	80237fc <UBLOX_Check_Buffer+0x1c>
        clear = 0;
 80237f2:	4b22      	ldr	r3, [pc, #136]	; (802387c <UBLOX_Check_Buffer+0x9c>)
 80237f4:	2200      	movs	r2, #0
 80237f6:	701a      	strb	r2, [r3, #0]
        UBLOX_Reset_Buffer();
 80237f8:	f000 f864 	bl	80238c4 <UBLOX_Reset_Buffer>
    }
    clear = idle;
 80237fc:	4a1f      	ldr	r2, [pc, #124]	; (802387c <UBLOX_Check_Buffer+0x9c>)
 80237fe:	79fb      	ldrb	r3, [r7, #7]
 8023800:	7013      	strb	r3, [r2, #0]

    /* Calculate current position in buffer */
    pos = UBLOX_DMA_RX_SZ - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 8023802:	4b1f      	ldr	r3, [pc, #124]	; (8023880 <UBLOX_Check_Buffer+0xa0>)
 8023804:	681b      	ldr	r3, [r3, #0]
 8023806:	685b      	ldr	r3, [r3, #4]
 8023808:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 802380c:	60fb      	str	r3, [r7, #12]
    if (pos != old_pos) { /* Check change in received data */
 802380e:	4b1d      	ldr	r3, [pc, #116]	; (8023884 <UBLOX_Check_Buffer+0xa4>)
 8023810:	681b      	ldr	r3, [r3, #0]
 8023812:	68fa      	ldr	r2, [r7, #12]
 8023814:	429a      	cmp	r2, r3
 8023816:	d023      	beq.n	8023860 <UBLOX_Check_Buffer+0x80>
        if (pos > old_pos) { /* Current position is over previous one */
 8023818:	4b1a      	ldr	r3, [pc, #104]	; (8023884 <UBLOX_Check_Buffer+0xa4>)
 802381a:	681b      	ldr	r3, [r3, #0]
 802381c:	68fa      	ldr	r2, [r7, #12]
 802381e:	429a      	cmp	r2, r3
 8023820:	d90b      	bls.n	802383a <UBLOX_Check_Buffer+0x5a>
            /* We are in "linear" mode */
            /* Process data directly by subtracting "pointers" */
            UBLOX_Fill_Buffer(&UBLOX_DMA_RX[old_pos], pos - old_pos);
 8023822:	4b18      	ldr	r3, [pc, #96]	; (8023884 <UBLOX_Check_Buffer+0xa4>)
 8023824:	681b      	ldr	r3, [r3, #0]
 8023826:	4a18      	ldr	r2, [pc, #96]	; (8023888 <UBLOX_Check_Buffer+0xa8>)
 8023828:	1898      	adds	r0, r3, r2
 802382a:	4b16      	ldr	r3, [pc, #88]	; (8023884 <UBLOX_Check_Buffer+0xa4>)
 802382c:	681b      	ldr	r3, [r3, #0]
 802382e:	68fa      	ldr	r2, [r7, #12]
 8023830:	1ad3      	subs	r3, r2, r3
 8023832:	4619      	mov	r1, r3
 8023834:	f000 f82a 	bl	802388c <UBLOX_Fill_Buffer>
 8023838:	e012      	b.n	8023860 <UBLOX_Check_Buffer+0x80>
        } else {
            /* We are in "overflow" mode */
            /* First process data to the end of buffer */
            UBLOX_Fill_Buffer(&UBLOX_DMA_RX[old_pos], UBLOX_DMA_RX_SZ - old_pos);
 802383a:	4b12      	ldr	r3, [pc, #72]	; (8023884 <UBLOX_Check_Buffer+0xa4>)
 802383c:	681b      	ldr	r3, [r3, #0]
 802383e:	4a12      	ldr	r2, [pc, #72]	; (8023888 <UBLOX_Check_Buffer+0xa8>)
 8023840:	441a      	add	r2, r3
 8023842:	4b10      	ldr	r3, [pc, #64]	; (8023884 <UBLOX_Check_Buffer+0xa4>)
 8023844:	681b      	ldr	r3, [r3, #0]
 8023846:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 802384a:	4619      	mov	r1, r3
 802384c:	4610      	mov	r0, r2
 802384e:	f000 f81d 	bl	802388c <UBLOX_Fill_Buffer>
            /* Check and continue with beginning of buffer */
            if (pos > 0) {
 8023852:	68fb      	ldr	r3, [r7, #12]
 8023854:	2b00      	cmp	r3, #0
 8023856:	d003      	beq.n	8023860 <UBLOX_Check_Buffer+0x80>
                UBLOX_Fill_Buffer(&UBLOX_DMA_RX[0], pos);
 8023858:	68f9      	ldr	r1, [r7, #12]
 802385a:	480b      	ldr	r0, [pc, #44]	; (8023888 <UBLOX_Check_Buffer+0xa8>)
 802385c:	f000 f816 	bl	802388c <UBLOX_Fill_Buffer>
            }
        }
    }
    old_pos = pos; /* Save current position as old */
 8023860:	4a08      	ldr	r2, [pc, #32]	; (8023884 <UBLOX_Check_Buffer+0xa4>)
 8023862:	68fb      	ldr	r3, [r7, #12]
 8023864:	6013      	str	r3, [r2, #0]

    /* Check and manually update if we reached end of buffer */
    if (old_pos == UBLOX_DMA_RX_SZ) {
 8023866:	4b07      	ldr	r3, [pc, #28]	; (8023884 <UBLOX_Check_Buffer+0xa4>)
 8023868:	681b      	ldr	r3, [r3, #0]
 802386a:	2b80      	cmp	r3, #128	; 0x80
 802386c:	d102      	bne.n	8023874 <UBLOX_Check_Buffer+0x94>
        old_pos = 0;
 802386e:	4b05      	ldr	r3, [pc, #20]	; (8023884 <UBLOX_Check_Buffer+0xa4>)
 8023870:	2200      	movs	r2, #0
 8023872:	601a      	str	r2, [r3, #0]
    }
}
 8023874:	bf00      	nop
 8023876:	3710      	adds	r7, #16
 8023878:	46bd      	mov	sp, r7
 802387a:	bd80      	pop	{r7, pc}
 802387c:	20000000 	.word	0x20000000
 8023880:	200084c4 	.word	0x200084c4
 8023884:	20000e04 	.word	0x20000e04
 8023888:	20000d80 	.word	0x20000d80

0802388c <UBLOX_Fill_Buffer>:

static void UBLOX_Fill_Buffer(const void *data, size_t len) {
 802388c:	b580      	push	{r7, lr}
 802388e:	b082      	sub	sp, #8
 8023890:	af00      	add	r7, sp, #0
 8023892:	6078      	str	r0, [r7, #4]
 8023894:	6039      	str	r1, [r7, #0]
    /* Write data to buffer */
    memcpy(&UBLOX_UART_RX[ublox_write], data, len);
 8023896:	4b09      	ldr	r3, [pc, #36]	; (80238bc <UBLOX_Fill_Buffer+0x30>)
 8023898:	681b      	ldr	r3, [r3, #0]
 802389a:	4a09      	ldr	r2, [pc, #36]	; (80238c0 <UBLOX_Fill_Buffer+0x34>)
 802389c:	4413      	add	r3, r2
 802389e:	683a      	ldr	r2, [r7, #0]
 80238a0:	6879      	ldr	r1, [r7, #4]
 80238a2:	4618      	mov	r0, r3
 80238a4:	f01c f829 	bl	803f8fa <memcpy>
    ublox_write += len;
 80238a8:	4b04      	ldr	r3, [pc, #16]	; (80238bc <UBLOX_Fill_Buffer+0x30>)
 80238aa:	681a      	ldr	r2, [r3, #0]
 80238ac:	683b      	ldr	r3, [r7, #0]
 80238ae:	4413      	add	r3, r2
 80238b0:	4a02      	ldr	r2, [pc, #8]	; (80238bc <UBLOX_Fill_Buffer+0x30>)
 80238b2:	6013      	str	r3, [r2, #0]
}
 80238b4:	bf00      	nop
 80238b6:	3708      	adds	r7, #8
 80238b8:	46bd      	mov	sp, r7
 80238ba:	bd80      	pop	{r7, pc}
 80238bc:	20000e00 	.word	0x20000e00
 80238c0:	20008164 	.word	0x20008164

080238c4 <UBLOX_Reset_Buffer>:

static void UBLOX_Reset_Buffer(void) {
 80238c4:	b580      	push	{r7, lr}
 80238c6:	af00      	add	r7, sp, #0
    // clear rx buffer
    memset(UBLOX_UART_RX, 0x00, ublox_write);
 80238c8:	4b05      	ldr	r3, [pc, #20]	; (80238e0 <UBLOX_Reset_Buffer+0x1c>)
 80238ca:	681b      	ldr	r3, [r3, #0]
 80238cc:	461a      	mov	r2, r3
 80238ce:	2100      	movs	r1, #0
 80238d0:	4804      	ldr	r0, [pc, #16]	; (80238e4 <UBLOX_Reset_Buffer+0x20>)
 80238d2:	f01c f81d 	bl	803f910 <memset>
    ublox_write = 0;
 80238d6:	4b02      	ldr	r3, [pc, #8]	; (80238e0 <UBLOX_Reset_Buffer+0x1c>)
 80238d8:	2200      	movs	r2, #0
 80238da:	601a      	str	r2, [r3, #0]
}
 80238dc:	bf00      	nop
 80238de:	bd80      	pop	{r7, pc}
 80238e0:	20000e00 	.word	0x20000e00
 80238e4:	20008164 	.word	0x20008164

080238e8 <AES_Init>:
/* Private functions declaration ---------------------------------------------*/
static void lock(void);
static void unlock(void);

/* Public functions implementation -------------------------------------------*/
void AES_Init(void) {
 80238e8:	b580      	push	{r7, lr}
 80238ea:	af00      	add	r7, sp, #0
    lock();
 80238ec:	f000 f85a 	bl	80239a4 <lock>
    HAL_CRYP_GetConfig(&hcryp, &config);
 80238f0:	4907      	ldr	r1, [pc, #28]	; (8023910 <AES_Init+0x28>)
 80238f2:	4808      	ldr	r0, [pc, #32]	; (8023914 <AES_Init+0x2c>)
 80238f4:	f00a f9d9 	bl	802dcaa <HAL_CRYP_GetConfig>
    config.pKey = AesKey;
 80238f8:	4b05      	ldr	r3, [pc, #20]	; (8023910 <AES_Init+0x28>)
 80238fa:	4a07      	ldr	r2, [pc, #28]	; (8023918 <AES_Init+0x30>)
 80238fc:	609a      	str	r2, [r3, #8]
    HAL_CRYP_SetConfig(&hcryp, &config);
 80238fe:	4904      	ldr	r1, [pc, #16]	; (8023910 <AES_Init+0x28>)
 8023900:	4804      	ldr	r0, [pc, #16]	; (8023914 <AES_Init+0x2c>)
 8023902:	f00a f950 	bl	802dba6 <HAL_CRYP_SetConfig>
    unlock();
 8023906:	f000 f85b 	bl	80239c0 <unlock>
}
 802390a:	bf00      	nop
 802390c:	bd80      	pop	{r7, pc}
 802390e:	bf00      	nop
 8023910:	20000e08 	.word	0x20000e08
 8023914:	200089ac 	.word	0x200089ac
 8023918:	20008364 	.word	0x20008364

0802391c <AES_Encrypt>:

uint8_t AES_Encrypt(uint8_t *pDst, uint8_t *pSrc, uint16_t Sz) {
 802391c:	b580      	push	{r7, lr}
 802391e:	b088      	sub	sp, #32
 8023920:	af02      	add	r7, sp, #8
 8023922:	60f8      	str	r0, [r7, #12]
 8023924:	60b9      	str	r1, [r7, #8]
 8023926:	4613      	mov	r3, r2
 8023928:	80fb      	strh	r3, [r7, #6]
    uint8_t ret;

    lock();
 802392a:	f000 f83b 	bl	80239a4 <lock>
    ret = (HAL_CRYP_Encrypt(&hcryp, (uint32_t*) pSrc, Sz, (uint32_t*) pDst, 1000) == HAL_OK);
 802392e:	88fa      	ldrh	r2, [r7, #6]
 8023930:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8023934:	9300      	str	r3, [sp, #0]
 8023936:	68fb      	ldr	r3, [r7, #12]
 8023938:	68b9      	ldr	r1, [r7, #8]
 802393a:	4808      	ldr	r0, [pc, #32]	; (802395c <AES_Encrypt+0x40>)
 802393c:	f00a fa16 	bl	802dd6c <HAL_CRYP_Encrypt>
 8023940:	4603      	mov	r3, r0
 8023942:	2b00      	cmp	r3, #0
 8023944:	bf0c      	ite	eq
 8023946:	2301      	moveq	r3, #1
 8023948:	2300      	movne	r3, #0
 802394a:	b2db      	uxtb	r3, r3
 802394c:	75fb      	strb	r3, [r7, #23]
    unlock();
 802394e:	f000 f837 	bl	80239c0 <unlock>

    return ret;
 8023952:	7dfb      	ldrb	r3, [r7, #23]
}
 8023954:	4618      	mov	r0, r3
 8023956:	3718      	adds	r7, #24
 8023958:	46bd      	mov	sp, r7
 802395a:	bd80      	pop	{r7, pc}
 802395c:	200089ac 	.word	0x200089ac

08023960 <AES_Decrypt>:

uint8_t AES_Decrypt(uint8_t *pDst, uint8_t *pSrc, uint16_t Sz) {
 8023960:	b580      	push	{r7, lr}
 8023962:	b088      	sub	sp, #32
 8023964:	af02      	add	r7, sp, #8
 8023966:	60f8      	str	r0, [r7, #12]
 8023968:	60b9      	str	r1, [r7, #8]
 802396a:	4613      	mov	r3, r2
 802396c:	80fb      	strh	r3, [r7, #6]
    uint8_t ret;

    lock();
 802396e:	f000 f819 	bl	80239a4 <lock>
    ret = (HAL_CRYP_Decrypt(&hcryp, (uint32_t*) pSrc, Sz, (uint32_t*) pDst, 1000) == HAL_OK);
 8023972:	88fa      	ldrh	r2, [r7, #6]
 8023974:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8023978:	9300      	str	r3, [sp, #0]
 802397a:	68fb      	ldr	r3, [r7, #12]
 802397c:	68b9      	ldr	r1, [r7, #8]
 802397e:	4808      	ldr	r0, [pc, #32]	; (80239a0 <AES_Decrypt+0x40>)
 8023980:	f00a fa88 	bl	802de94 <HAL_CRYP_Decrypt>
 8023984:	4603      	mov	r3, r0
 8023986:	2b00      	cmp	r3, #0
 8023988:	bf0c      	ite	eq
 802398a:	2301      	moveq	r3, #1
 802398c:	2300      	movne	r3, #0
 802398e:	b2db      	uxtb	r3, r3
 8023990:	75fb      	strb	r3, [r7, #23]
    unlock();
 8023992:	f000 f815 	bl	80239c0 <unlock>

    return ret;
 8023996:	7dfb      	ldrb	r3, [r7, #23]
}
 8023998:	4618      	mov	r0, r3
 802399a:	3718      	adds	r7, #24
 802399c:	46bd      	mov	sp, r7
 802399e:	bd80      	pop	{r7, pc}
 80239a0:	200089ac 	.word	0x200089ac

080239a4 <lock>:
        LOG_StrLn("AES:ItWorks!");
    }
}

/* Private functions implementation --------------------------------------------*/
static void lock(void) {
 80239a4:	b580      	push	{r7, lr}
 80239a6:	af00      	add	r7, sp, #0
    osMutexAcquire(AesMutexHandle, osWaitForever);
 80239a8:	4b04      	ldr	r3, [pc, #16]	; (80239bc <lock+0x18>)
 80239aa:	681b      	ldr	r3, [r3, #0]
 80239ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80239b0:	4618      	mov	r0, r3
 80239b2:	f014 fa4b 	bl	8037e4c <osMutexAcquire>
}
 80239b6:	bf00      	nop
 80239b8:	bd80      	pop	{r7, pc}
 80239ba:	bf00      	nop
 80239bc:	20008890 	.word	0x20008890

080239c0 <unlock>:

static void unlock(void) {
 80239c0:	b580      	push	{r7, lr}
 80239c2:	af00      	add	r7, sp, #0
    osMutexRelease(AesMutexHandle);
 80239c4:	4b03      	ldr	r3, [pc, #12]	; (80239d4 <unlock+0x14>)
 80239c6:	681b      	ldr	r3, [r3, #0]
 80239c8:	4618      	mov	r0, r3
 80239ca:	f014 fa9d 	bl	8037f08 <osMutexRelease>
}
 80239ce:	bf00      	nop
 80239d0:	bd80      	pop	{r7, pc}
 80239d2:	bf00      	nop
 80239d4:	20008890 	.word	0x20008890

080239d8 <CANBUS_Init>:
/* Private functions declaration ----------------------------------------------*/
static void lock(void);
static void unlock(void);

/* Public functions implementation ---------------------------------------------*/
void CANBUS_Init(void) {
 80239d8:	b580      	push	{r7, lr}
 80239da:	af00      	add	r7, sp, #0

    /* Configure the CAN Filter */
    if (!CANBUS_Filter()) {
 80239dc:	f000 f836 	bl	8023a4c <CANBUS_Filter>
 80239e0:	4603      	mov	r3, r0
 80239e2:	2b00      	cmp	r3, #0
 80239e4:	d101      	bne.n	80239ea <CANBUS_Init+0x12>
        /* Start Error */
        Error_Handler();
 80239e6:	f007 fd3f 	bl	802b468 <Error_Handler>
    }

    /* Start the CAN peripheral */
    if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80239ea:	4809      	ldr	r0, [pc, #36]	; (8023a10 <CANBUS_Init+0x38>)
 80239ec:	f009 faa6 	bl	802cf3c <HAL_CAN_Start>
 80239f0:	4603      	mov	r3, r0
 80239f2:	2b00      	cmp	r3, #0
 80239f4:	d001      	beq.n	80239fa <CANBUS_Init+0x22>
        /* Start Error */
        Error_Handler();
 80239f6:	f007 fd37 	bl	802b468 <Error_Handler>
    }

    /* Activate CAN RX notification */
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 80239fa:	2102      	movs	r1, #2
 80239fc:	4804      	ldr	r0, [pc, #16]	; (8023a10 <CANBUS_Init+0x38>)
 80239fe:	f009 fd03 	bl	802d408 <HAL_CAN_ActivateNotification>
 8023a02:	4603      	mov	r3, r0
 8023a04:	2b00      	cmp	r3, #0
 8023a06:	d001      	beq.n	8023a0c <CANBUS_Init+0x34>
        /* Notification Error */
        Error_Handler();
 8023a08:	f007 fd2e 	bl	802b468 <Error_Handler>
    }
}
 8023a0c:	bf00      	nop
 8023a0e:	bd80      	pop	{r7, pc}
 8023a10:	2000897c 	.word	0x2000897c

08023a14 <CANBUS_Header>:

void CANBUS_Header(CAN_TxHeaderTypeDef *TxHeader, uint32_t StdId, uint32_t DLC) {
 8023a14:	b480      	push	{r7}
 8023a16:	b085      	sub	sp, #20
 8023a18:	af00      	add	r7, sp, #0
 8023a1a:	60f8      	str	r0, [r7, #12]
 8023a1c:	60b9      	str	r1, [r7, #8]
 8023a1e:	607a      	str	r2, [r7, #4]
    /* Configure Global Transmission process */
    TxHeader->RTR = CAN_RTR_DATA;
 8023a20:	68fb      	ldr	r3, [r7, #12]
 8023a22:	2200      	movs	r2, #0
 8023a24:	60da      	str	r2, [r3, #12]
    TxHeader->IDE = CAN_ID_STD;
 8023a26:	68fb      	ldr	r3, [r7, #12]
 8023a28:	2200      	movs	r2, #0
 8023a2a:	609a      	str	r2, [r3, #8]
    TxHeader->TransmitGlobalTime = DISABLE;
 8023a2c:	68fb      	ldr	r3, [r7, #12]
 8023a2e:	2200      	movs	r2, #0
 8023a30:	751a      	strb	r2, [r3, #20]
    TxHeader->StdId = StdId;
 8023a32:	68fb      	ldr	r3, [r7, #12]
 8023a34:	68ba      	ldr	r2, [r7, #8]
 8023a36:	601a      	str	r2, [r3, #0]
    TxHeader->DLC = DLC;
 8023a38:	68fb      	ldr	r3, [r7, #12]
 8023a3a:	687a      	ldr	r2, [r7, #4]
 8023a3c:	611a      	str	r2, [r3, #16]
}
 8023a3e:	bf00      	nop
 8023a40:	3714      	adds	r7, #20
 8023a42:	46bd      	mov	sp, r7
 8023a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023a48:	4770      	bx	lr
	...

08023a4c <CANBUS_Filter>:

uint8_t CANBUS_Filter(void) {
 8023a4c:	b580      	push	{r7, lr}
 8023a4e:	b08a      	sub	sp, #40	; 0x28
 8023a50:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef sFilterConfig;

    /* Configure the CAN Filter */
    sFilterConfig.FilterBank = 0;
 8023a52:	2300      	movs	r3, #0
 8023a54:	617b      	str	r3, [r7, #20]
    // set filter to mask mode (not id_list mode)
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8023a56:	2300      	movs	r3, #0
 8023a58:	61bb      	str	r3, [r7, #24]
    // set 32-bit scale configuration
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8023a5a:	2301      	movs	r3, #1
 8023a5c:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterIdHigh = 0x0000;
 8023a5e:	2300      	movs	r3, #0
 8023a60:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIdLow = 0x0000;
 8023a62:	2300      	movs	r3, #0
 8023a64:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 8023a66:	2300      	movs	r3, #0
 8023a68:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 8023a6a:	2300      	movs	r3, #0
 8023a6c:	60fb      	str	r3, [r7, #12]
    // assign filter to FIFO 0
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8023a6e:	2300      	movs	r3, #0
 8023a70:	613b      	str	r3, [r7, #16]
    // activate filter
    sFilterConfig.FilterActivation = ENABLE;
 8023a72:	2301      	movs	r3, #1
 8023a74:	623b      	str	r3, [r7, #32]

    return (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) == HAL_OK);
 8023a76:	463b      	mov	r3, r7
 8023a78:	4619      	mov	r1, r3
 8023a7a:	4806      	ldr	r0, [pc, #24]	; (8023a94 <CANBUS_Filter+0x48>)
 8023a7c:	f009 f972 	bl	802cd64 <HAL_CAN_ConfigFilter>
 8023a80:	4603      	mov	r3, r0
 8023a82:	2b00      	cmp	r3, #0
 8023a84:	bf0c      	ite	eq
 8023a86:	2301      	moveq	r3, #1
 8023a88:	2300      	movne	r3, #0
 8023a8a:	b2db      	uxtb	r3, r3
}
 8023a8c:	4618      	mov	r0, r3
 8023a8e:	3728      	adds	r7, #40	; 0x28
 8023a90:	46bd      	mov	sp, r7
 8023a92:	bd80      	pop	{r7, pc}
 8023a94:	2000897c 	.word	0x2000897c

08023a98 <CANBUS_Write>:

/*----------------------------------------------------------------------------
 wite a message to CAN peripheral and transmit it
 *----------------------------------------------------------------------------*/
uint8_t CANBUS_Write(canbus_tx_t *tx) {
 8023a98:	b580      	push	{r7, lr}
 8023a9a:	b084      	sub	sp, #16
 8023a9c:	af00      	add	r7, sp, #0
 8023a9e:	6078      	str	r0, [r7, #4]
    lock();
 8023aa0:	f000 f870 	bl	8023b84 <lock>

    uint32_t TxMailbox;
    HAL_StatusTypeDef status;

    // check tx mailbox is ready
    while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1)) {
 8023aa4:	e002      	b.n	8023aac <CANBUS_Write+0x14>
        _DelayMS(1);
 8023aa6:	2001      	movs	r0, #1
 8023aa8:	f01b fe08 	bl	803f6bc <_DelayMS>
    while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1)) {
 8023aac:	480e      	ldr	r0, [pc, #56]	; (8023ae8 <CANBUS_Write+0x50>)
 8023aae:	f009 fb64 	bl	802d17a <HAL_CAN_GetTxMailboxesFreeLevel>
 8023ab2:	4603      	mov	r3, r0
 8023ab4:	2b00      	cmp	r3, #0
 8023ab6:	d0f6      	beq.n	8023aa6 <CANBUS_Write+0xe>
    };

    /* Start the Transmission process */
    status = HAL_CAN_AddTxMessage(&hcan1, &(tx->header), tx->data.u8, &TxMailbox);
 8023ab8:	6879      	ldr	r1, [r7, #4]
 8023aba:	687b      	ldr	r3, [r7, #4]
 8023abc:	f103 0218 	add.w	r2, r3, #24
 8023ac0:	f107 0308 	add.w	r3, r7, #8
 8023ac4:	4808      	ldr	r0, [pc, #32]	; (8023ae8 <CANBUS_Write+0x50>)
 8023ac6:	f009 fa7d 	bl	802cfc4 <HAL_CAN_AddTxMessage>
 8023aca:	4603      	mov	r3, r0
 8023acc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK) {
//		CANBUS_TxDebugger();
    }

    unlock();
 8023ace:	f000 f867 	bl	8023ba0 <unlock>
    return (status == HAL_OK);
 8023ad2:	7bfb      	ldrb	r3, [r7, #15]
 8023ad4:	2b00      	cmp	r3, #0
 8023ad6:	bf0c      	ite	eq
 8023ad8:	2301      	moveq	r3, #1
 8023ada:	2300      	movne	r3, #0
 8023adc:	b2db      	uxtb	r3, r3
}
 8023ade:	4618      	mov	r0, r3
 8023ae0:	3710      	adds	r7, #16
 8023ae2:	46bd      	mov	sp, r7
 8023ae4:	bd80      	pop	{r7, pc}
 8023ae6:	bf00      	nop
 8023ae8:	2000897c 	.word	0x2000897c

08023aec <CANBUS_Read>:
    LOG_Enter();
}
/*----------------------------------------------------------------------------
 read a message from CAN peripheral and release it
 *----------------------------------------------------------------------------*/
uint8_t CANBUS_Read(canbus_rx_t *rx) {
 8023aec:	b580      	push	{r7, lr}
 8023aee:	b084      	sub	sp, #16
 8023af0:	af00      	add	r7, sp, #0
 8023af2:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;

    /* Get RX message */
    status = HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &(rx->header), rx->data.u8);
 8023af4:	687a      	ldr	r2, [r7, #4]
 8023af6:	687b      	ldr	r3, [r7, #4]
 8023af8:	3320      	adds	r3, #32
 8023afa:	2100      	movs	r1, #0
 8023afc:	4807      	ldr	r0, [pc, #28]	; (8023b1c <CANBUS_Read+0x30>)
 8023afe:	f009 fb71 	bl	802d1e4 <HAL_CAN_GetRxMessage>
 8023b02:	4603      	mov	r3, r0
 8023b04:	73fb      	strb	r3, [r7, #15]

    return (status == HAL_OK);
 8023b06:	7bfb      	ldrb	r3, [r7, #15]
 8023b08:	2b00      	cmp	r3, #0
 8023b0a:	bf0c      	ite	eq
 8023b0c:	2301      	moveq	r3, #1
 8023b0e:	2300      	movne	r3, #0
 8023b10:	b2db      	uxtb	r3, r3
}
 8023b12:	4618      	mov	r0, r3
 8023b14:	3710      	adds	r7, #16
 8023b16:	46bd      	mov	sp, r7
 8023b18:	bd80      	pop	{r7, pc}
 8023b1a:	bf00      	nop
 8023b1c:	2000897c 	.word	0x2000897c

08023b20 <CANBUS_ReadID>:
        LOG_Str("RTR");
    }
    LOG_Enter();
}

uint32_t CANBUS_ReadID(void) {
 8023b20:	b480      	push	{r7}
 8023b22:	af00      	add	r7, sp, #0
    if (CB.rx.header.IDE == CAN_ID_STD) {
 8023b24:	4b07      	ldr	r3, [pc, #28]	; (8023b44 <CANBUS_ReadID+0x24>)
 8023b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023b28:	2b00      	cmp	r3, #0
 8023b2a:	d102      	bne.n	8023b32 <CANBUS_ReadID+0x12>
        return CB.rx.header.StdId;
 8023b2c:	4b05      	ldr	r3, [pc, #20]	; (8023b44 <CANBUS_ReadID+0x24>)
 8023b2e:	6a1b      	ldr	r3, [r3, #32]
 8023b30:	e002      	b.n	8023b38 <CANBUS_ReadID+0x18>
    }
    return _R(CB.rx.header.ExtId, 20);
 8023b32:	4b04      	ldr	r3, [pc, #16]	; (8023b44 <CANBUS_ReadID+0x24>)
 8023b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023b36:	0d1b      	lsrs	r3, r3, #20
}
 8023b38:	4618      	mov	r0, r3
 8023b3a:	46bd      	mov	sp, r7
 8023b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b40:	4770      	bx	lr
 8023b42:	bf00      	nop
 8023b44:	20008378 	.word	0x20008378

08023b48 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8023b48:	b580      	push	{r7, lr}
 8023b4a:	b082      	sub	sp, #8
 8023b4c:	af00      	add	r7, sp, #0
 8023b4e:	6078      	str	r0, [r7, #4]
    // read rx fifo
    if (CANBUS_Read(&(CB.rx))) {
 8023b50:	480a      	ldr	r0, [pc, #40]	; (8023b7c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8023b52:	f7ff ffcb 	bl	8023aec <CANBUS_Read>
 8023b56:	4603      	mov	r3, r0
 8023b58:	2b00      	cmp	r3, #0
 8023b5a:	d00a      	beq.n	8023b72 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
        // signal only when RTOS started
        if (osKernelGetState() == osKernelRunning) {
 8023b5c:	f013 fce2 	bl	8037524 <osKernelGetState>
 8023b60:	4603      	mov	r3, r0
 8023b62:	2b02      	cmp	r3, #2
 8023b64:	d105      	bne.n	8023b72 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
            osThreadFlagsSet(CanRxTaskHandle, EVT_CAN_RX_IT);
 8023b66:	4b06      	ldr	r3, [pc, #24]	; (8023b80 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8023b68:	681b      	ldr	r3, [r3, #0]
 8023b6a:	2101      	movs	r1, #1
 8023b6c:	4618      	mov	r0, r3
 8023b6e:	f013 fdff 	bl	8037770 <osThreadFlagsSet>
        }
    }
}
 8023b72:	bf00      	nop
 8023b74:	3708      	adds	r7, #8
 8023b76:	46bd      	mov	sp, r7
 8023b78:	bd80      	pop	{r7, pc}
 8023b7a:	bf00      	nop
 8023b7c:	20008398 	.word	0x20008398
 8023b80:	20008850 	.word	0x20008850

08023b84 <lock>:

/* Private functions implementation --------------------------------------------*/
static void lock(void) {
 8023b84:	b580      	push	{r7, lr}
 8023b86:	af00      	add	r7, sp, #0
    osMutexAcquire(CanTxMutexHandle, osWaitForever);
 8023b88:	4b04      	ldr	r3, [pc, #16]	; (8023b9c <lock+0x18>)
 8023b8a:	681b      	ldr	r3, [r3, #0]
 8023b8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8023b90:	4618      	mov	r0, r3
 8023b92:	f014 f95b 	bl	8037e4c <osMutexAcquire>
}
 8023b96:	bf00      	nop
 8023b98:	bd80      	pop	{r7, pc}
 8023b9a:	bf00      	nop
 8023b9c:	200085d4 	.word	0x200085d4

08023ba0 <unlock>:

static void unlock(void) {
 8023ba0:	b580      	push	{r7, lr}
 8023ba2:	af00      	add	r7, sp, #0
    osMutexRelease(CanTxMutexHandle);
 8023ba4:	4b03      	ldr	r3, [pc, #12]	; (8023bb4 <unlock+0x14>)
 8023ba6:	681b      	ldr	r3, [r3, #0]
 8023ba8:	4618      	mov	r0, r3
 8023baa:	f014 f9ad 	bl	8037f08 <osMutexRelease>
}
 8023bae:	bf00      	nop
 8023bb0:	bd80      	pop	{r7, pc}
 8023bb2:	bf00      	nop
 8023bb4:	200085d4 	.word	0x200085d4

08023bb8 <cs43l22_Init>:
 * @param OutputDevice: can be OUTPUT_DEVICE_SPEAKER, OUTPUT_DEVICE_HEADPHONE,
 *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
 * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq) {
 8023bb8:	b580      	push	{r7, lr}
 8023bba:	b086      	sub	sp, #24
 8023bbc:	af00      	add	r7, sp, #0
 8023bbe:	607b      	str	r3, [r7, #4]
 8023bc0:	4603      	mov	r3, r0
 8023bc2:	81fb      	strh	r3, [r7, #14]
 8023bc4:	460b      	mov	r3, r1
 8023bc6:	81bb      	strh	r3, [r7, #12]
 8023bc8:	4613      	mov	r3, r2
 8023bca:	72fb      	strb	r3, [r7, #11]
    uint32_t counter = 0;
 8023bcc:	2300      	movs	r3, #0
 8023bce:	617b      	str	r3, [r7, #20]
    theOutputDevice = OutputDevice;
 8023bd0:	4a6b      	ldr	r2, [pc, #428]	; (8023d80 <cs43l22_Init+0x1c8>)
 8023bd2:	89bb      	ldrh	r3, [r7, #12]
 8023bd4:	8013      	strh	r3, [r2, #0]

    /* Initialize the Control interface of the Audio Codec */
    AUDIO_IO_Init();
 8023bd6:	f000 fa53 	bl	8024080 <AUDIO_IO_Init>

    /* Keep Codec powered OFF */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 8023bda:	89fb      	ldrh	r3, [r7, #14]
 8023bdc:	b2db      	uxtb	r3, r3
 8023bde:	2201      	movs	r2, #1
 8023be0:	2102      	movs	r1, #2
 8023be2:	4618      	mov	r0, r3
 8023be4:	f000 faba 	bl	802415c <CODEC_IO_Write>
 8023be8:	4603      	mov	r3, r0
 8023bea:	461a      	mov	r2, r3
 8023bec:	697b      	ldr	r3, [r7, #20]
 8023bee:	4413      	add	r3, r2
 8023bf0:	617b      	str	r3, [r7, #20]

    /*Save Output device for mute ON/OFF procedure*/
    switch (OutputDevice) {
 8023bf2:	89bb      	ldrh	r3, [r7, #12]
 8023bf4:	3b01      	subs	r3, #1
 8023bf6:	2b03      	cmp	r3, #3
 8023bf8:	d81a      	bhi.n	8023c30 <cs43l22_Init+0x78>
 8023bfa:	a201      	add	r2, pc, #4	; (adr r2, 8023c00 <cs43l22_Init+0x48>)
 8023bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023c00:	08023c11 	.word	0x08023c11
 8023c04:	08023c19 	.word	0x08023c19
 8023c08:	08023c21 	.word	0x08023c21
 8023c0c:	08023c29 	.word	0x08023c29
        case OUTPUT_DEVICE_SPEAKER:
            OutputDev = 0xFA;
 8023c10:	4b5c      	ldr	r3, [pc, #368]	; (8023d84 <cs43l22_Init+0x1cc>)
 8023c12:	22fa      	movs	r2, #250	; 0xfa
 8023c14:	701a      	strb	r2, [r3, #0]
            break;
 8023c16:	e00f      	b.n	8023c38 <cs43l22_Init+0x80>

        case OUTPUT_DEVICE_HEADPHONE:
            OutputDev = 0xAF;
 8023c18:	4b5a      	ldr	r3, [pc, #360]	; (8023d84 <cs43l22_Init+0x1cc>)
 8023c1a:	22af      	movs	r2, #175	; 0xaf
 8023c1c:	701a      	strb	r2, [r3, #0]
            break;
 8023c1e:	e00b      	b.n	8023c38 <cs43l22_Init+0x80>

        case OUTPUT_DEVICE_BOTH:
            OutputDev = 0xAA;
 8023c20:	4b58      	ldr	r3, [pc, #352]	; (8023d84 <cs43l22_Init+0x1cc>)
 8023c22:	22aa      	movs	r2, #170	; 0xaa
 8023c24:	701a      	strb	r2, [r3, #0]
            break;
 8023c26:	e007      	b.n	8023c38 <cs43l22_Init+0x80>

        case OUTPUT_DEVICE_AUTO:
            OutputDev = 0x05;
 8023c28:	4b56      	ldr	r3, [pc, #344]	; (8023d84 <cs43l22_Init+0x1cc>)
 8023c2a:	2205      	movs	r2, #5
 8023c2c:	701a      	strb	r2, [r3, #0]
            break;
 8023c2e:	e003      	b.n	8023c38 <cs43l22_Init+0x80>

        default:
            OutputDev = 0x05;
 8023c30:	4b54      	ldr	r3, [pc, #336]	; (8023d84 <cs43l22_Init+0x1cc>)
 8023c32:	2205      	movs	r2, #5
 8023c34:	701a      	strb	r2, [r3, #0]
            break;
 8023c36:	bf00      	nop
    }

    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8023c38:	89fb      	ldrh	r3, [r7, #14]
 8023c3a:	b2d8      	uxtb	r0, r3
 8023c3c:	4b51      	ldr	r3, [pc, #324]	; (8023d84 <cs43l22_Init+0x1cc>)
 8023c3e:	781b      	ldrb	r3, [r3, #0]
 8023c40:	b2db      	uxtb	r3, r3
 8023c42:	461a      	mov	r2, r3
 8023c44:	2104      	movs	r1, #4
 8023c46:	f000 fa89 	bl	802415c <CODEC_IO_Write>
 8023c4a:	4603      	mov	r3, r0
 8023c4c:	461a      	mov	r2, r3
 8023c4e:	697b      	ldr	r3, [r7, #20]
 8023c50:	4413      	add	r3, r2
 8023c52:	617b      	str	r3, [r7, #20]

    /* Clock configuration: Auto detection */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x80);
 8023c54:	89fb      	ldrh	r3, [r7, #14]
 8023c56:	b2db      	uxtb	r3, r3
 8023c58:	2280      	movs	r2, #128	; 0x80
 8023c5a:	2105      	movs	r1, #5
 8023c5c:	4618      	mov	r0, r3
 8023c5e:	f000 fa7d 	bl	802415c <CODEC_IO_Write>
 8023c62:	4603      	mov	r3, r0
 8023c64:	461a      	mov	r2, r3
 8023c66:	697b      	ldr	r3, [r7, #20]
 8023c68:	4413      	add	r3, r2
 8023c6a:	617b      	str	r3, [r7, #20]

    /* Set the Slave Mode and the audio Standard */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8023c6c:	89fb      	ldrh	r3, [r7, #14]
 8023c6e:	b2db      	uxtb	r3, r3
 8023c70:	2204      	movs	r2, #4
 8023c72:	2106      	movs	r1, #6
 8023c74:	4618      	mov	r0, r3
 8023c76:	f000 fa71 	bl	802415c <CODEC_IO_Write>
 8023c7a:	4603      	mov	r3, r0
 8023c7c:	461a      	mov	r2, r3
 8023c7e:	697b      	ldr	r3, [r7, #20]
 8023c80:	4413      	add	r3, r2
 8023c82:	617b      	str	r3, [r7, #20]

    /* Set the Master volume to maximum */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, 0);
 8023c84:	89fb      	ldrh	r3, [r7, #14]
 8023c86:	b2db      	uxtb	r3, r3
 8023c88:	2200      	movs	r2, #0
 8023c8a:	2120      	movs	r1, #32
 8023c8c:	4618      	mov	r0, r3
 8023c8e:	f000 fa65 	bl	802415c <CODEC_IO_Write>
 8023c92:	4603      	mov	r3, r0
 8023c94:	461a      	mov	r2, r3
 8023c96:	697b      	ldr	r3, [r7, #20]
 8023c98:	4413      	add	r3, r2
 8023c9a:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, 0);
 8023c9c:	89fb      	ldrh	r3, [r7, #14]
 8023c9e:	b2db      	uxtb	r3, r3
 8023ca0:	2200      	movs	r2, #0
 8023ca2:	2121      	movs	r1, #33	; 0x21
 8023ca4:	4618      	mov	r0, r3
 8023ca6:	f000 fa59 	bl	802415c <CODEC_IO_Write>
 8023caa:	4603      	mov	r3, r0
 8023cac:	461a      	mov	r2, r3
 8023cae:	697b      	ldr	r3, [r7, #20]
 8023cb0:	4413      	add	r3, r2
 8023cb2:	617b      	str	r3, [r7, #20]

    /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
    if (OutputDevice != OUTPUT_DEVICE_HEADPHONE) {
 8023cb4:	89bb      	ldrh	r3, [r7, #12]
 8023cb6:	2b02      	cmp	r3, #2
 8023cb8:	d00b      	beq.n	8023cd2 <cs43l22_Init+0x11a>
        /* Set the Speaker Mono mode */
        counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 8023cba:	89fb      	ldrh	r3, [r7, #14]
 8023cbc:	b2db      	uxtb	r3, r3
 8023cbe:	2206      	movs	r2, #6
 8023cc0:	210f      	movs	r1, #15
 8023cc2:	4618      	mov	r0, r3
 8023cc4:	f000 fa4a 	bl	802415c <CODEC_IO_Write>
 8023cc8:	4603      	mov	r3, r0
 8023cca:	461a      	mov	r2, r3
 8023ccc:	697b      	ldr	r3, [r7, #20]
 8023cce:	4413      	add	r3, r2
 8023cd0:	617b      	str	r3, [r7, #20]
    }

    /* Set the Speaker/Headphone attenuation level */
    counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8023cd2:	7afa      	ldrb	r2, [r7, #11]
 8023cd4:	89fb      	ldrh	r3, [r7, #14]
 8023cd6:	4611      	mov	r1, r2
 8023cd8:	4618      	mov	r0, r3
 8023cda:	f000 f8a7 	bl	8023e2c <cs43l22_SetVolume>
 8023cde:	4602      	mov	r2, r0
 8023ce0:	697b      	ldr	r3, [r7, #20]
 8023ce2:	4413      	add	r3, r2
 8023ce4:	617b      	str	r3, [r7, #20]
     off the I2S peripheral MCLK clock (which is the operating clock for Codec).
     If this delay is not inserted, then the codec will not shut down properly and
     it results in high noise after shut down. */

    /* Disable the analog soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 8023ce6:	89fb      	ldrh	r3, [r7, #14]
 8023ce8:	b2db      	uxtb	r3, r3
 8023cea:	2200      	movs	r2, #0
 8023cec:	210a      	movs	r1, #10
 8023cee:	4618      	mov	r0, r3
 8023cf0:	f000 fa34 	bl	802415c <CODEC_IO_Write>
 8023cf4:	4603      	mov	r3, r0
 8023cf6:	461a      	mov	r2, r3
 8023cf8:	697b      	ldr	r3, [r7, #20]
 8023cfa:	4413      	add	r3, r2
 8023cfc:	617b      	str	r3, [r7, #20]
    /* Disable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8023cfe:	89fb      	ldrh	r3, [r7, #14]
 8023d00:	b2db      	uxtb	r3, r3
 8023d02:	2204      	movs	r2, #4
 8023d04:	210e      	movs	r1, #14
 8023d06:	4618      	mov	r0, r3
 8023d08:	f000 fa28 	bl	802415c <CODEC_IO_Write>
 8023d0c:	4603      	mov	r3, r0
 8023d0e:	461a      	mov	r2, r3
 8023d10:	697b      	ldr	r3, [r7, #20]
 8023d12:	4413      	add	r3, r2
 8023d14:	617b      	str	r3, [r7, #20]
    /* Disable the limiter attack level */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 8023d16:	89fb      	ldrh	r3, [r7, #14]
 8023d18:	b2db      	uxtb	r3, r3
 8023d1a:	2200      	movs	r2, #0
 8023d1c:	2127      	movs	r1, #39	; 0x27
 8023d1e:	4618      	mov	r0, r3
 8023d20:	f000 fa1c 	bl	802415c <CODEC_IO_Write>
 8023d24:	4603      	mov	r3, r0
 8023d26:	461a      	mov	r2, r3
 8023d28:	697b      	ldr	r3, [r7, #20]
 8023d2a:	4413      	add	r3, r2
 8023d2c:	617b      	str	r3, [r7, #20]
    /* Adjust Bass and Treble levels */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 8023d2e:	89fb      	ldrh	r3, [r7, #14]
 8023d30:	b2db      	uxtb	r3, r3
 8023d32:	220f      	movs	r2, #15
 8023d34:	211f      	movs	r1, #31
 8023d36:	4618      	mov	r0, r3
 8023d38:	f000 fa10 	bl	802415c <CODEC_IO_Write>
 8023d3c:	4603      	mov	r3, r0
 8023d3e:	461a      	mov	r2, r3
 8023d40:	697b      	ldr	r3, [r7, #20]
 8023d42:	4413      	add	r3, r2
 8023d44:	617b      	str	r3, [r7, #20]
    /* Adjust PCM volume level */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 8023d46:	89fb      	ldrh	r3, [r7, #14]
 8023d48:	b2db      	uxtb	r3, r3
 8023d4a:	220a      	movs	r2, #10
 8023d4c:	211a      	movs	r1, #26
 8023d4e:	4618      	mov	r0, r3
 8023d50:	f000 fa04 	bl	802415c <CODEC_IO_Write>
 8023d54:	4603      	mov	r3, r0
 8023d56:	461a      	mov	r2, r3
 8023d58:	697b      	ldr	r3, [r7, #20]
 8023d5a:	4413      	add	r3, r2
 8023d5c:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 8023d5e:	89fb      	ldrh	r3, [r7, #14]
 8023d60:	b2db      	uxtb	r3, r3
 8023d62:	220a      	movs	r2, #10
 8023d64:	211b      	movs	r1, #27
 8023d66:	4618      	mov	r0, r3
 8023d68:	f000 f9f8 	bl	802415c <CODEC_IO_Write>
 8023d6c:	4603      	mov	r3, r0
 8023d6e:	461a      	mov	r2, r3
 8023d70:	697b      	ldr	r3, [r7, #20]
 8023d72:	4413      	add	r3, r2
 8023d74:	617b      	str	r3, [r7, #20]
    /* Return communication control value */
    return counter;
 8023d76:	697b      	ldr	r3, [r7, #20]
}
 8023d78:	4618      	mov	r0, r3
 8023d7a:	3718      	adds	r7, #24
 8023d7c:	46bd      	mov	sp, r7
 8023d7e:	bd80      	pop	{r7, pc}
 8023d80:	20000e32 	.word	0x20000e32
 8023d84:	20000e34 	.word	0x20000e34

08023d88 <cs43l22_ReadID>:
/**
 * @brief  Get the CS43L22 ID.
 * @param DeviceAddr: Device address on communication Bus.
 * @retval The CS43L22 ID
 */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr) {
 8023d88:	b580      	push	{r7, lr}
 8023d8a:	b084      	sub	sp, #16
 8023d8c:	af00      	add	r7, sp, #0
 8023d8e:	4603      	mov	r3, r0
 8023d90:	80fb      	strh	r3, [r7, #6]
    uint8_t Value;
    /* Initialize the Control interface of the Audio Codec */
    AUDIO_IO_Init();
 8023d92:	f000 f975 	bl	8024080 <AUDIO_IO_Init>

    Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 8023d96:	88fb      	ldrh	r3, [r7, #6]
 8023d98:	b2db      	uxtb	r3, r3
 8023d9a:	2101      	movs	r1, #1
 8023d9c:	4618      	mov	r0, r3
 8023d9e:	f000 f9b1 	bl	8024104 <AUDIO_IO_Read>
 8023da2:	4603      	mov	r3, r0
 8023da4:	73fb      	strb	r3, [r7, #15]
    Value = (Value & CS43L22_ID_MASK);
 8023da6:	7bfb      	ldrb	r3, [r7, #15]
 8023da8:	f023 0307 	bic.w	r3, r3, #7
 8023dac:	73fb      	strb	r3, [r7, #15]

    return ((uint32_t) Value);
 8023dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8023db0:	4618      	mov	r0, r3
 8023db2:	3710      	adds	r7, #16
 8023db4:	46bd      	mov	sp, r7
 8023db6:	bd80      	pop	{r7, pc}

08023db8 <cs43l22_Play>:
 * @brief Start the audio Codec play feature.
 * @note For this codec no Play options are required.
 * @param DeviceAddr: Device address on communication Bus.
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t *pBuffer, uint16_t Size) {
 8023db8:	b580      	push	{r7, lr}
 8023dba:	b084      	sub	sp, #16
 8023dbc:	af00      	add	r7, sp, #0
 8023dbe:	4603      	mov	r3, r0
 8023dc0:	6039      	str	r1, [r7, #0]
 8023dc2:	80fb      	strh	r3, [r7, #6]
 8023dc4:	4613      	mov	r3, r2
 8023dc6:	80bb      	strh	r3, [r7, #4]
    uint32_t counter = 0;
 8023dc8:	2300      	movs	r3, #0
 8023dca:	60fb      	str	r3, [r7, #12]

    if (Is_cs43l22_Stop == 1) {
 8023dcc:	4b16      	ldr	r3, [pc, #88]	; (8023e28 <cs43l22_Play+0x70>)
 8023dce:	781b      	ldrb	r3, [r3, #0]
 8023dd0:	2b01      	cmp	r3, #1
 8023dd2:	d123      	bne.n	8023e1c <cs43l22_Play+0x64>
        /* Enable the digital soft ramp */
        counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 8023dd4:	88fb      	ldrh	r3, [r7, #6]
 8023dd6:	b2db      	uxtb	r3, r3
 8023dd8:	2206      	movs	r2, #6
 8023dda:	210e      	movs	r1, #14
 8023ddc:	4618      	mov	r0, r3
 8023dde:	f000 f9bd 	bl	802415c <CODEC_IO_Write>
 8023de2:	4603      	mov	r3, r0
 8023de4:	461a      	mov	r2, r3
 8023de6:	68fb      	ldr	r3, [r7, #12]
 8023de8:	4413      	add	r3, r2
 8023dea:	60fb      	str	r3, [r7, #12]

        /* Enable Output device */
        counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8023dec:	88fb      	ldrh	r3, [r7, #6]
 8023dee:	2100      	movs	r1, #0
 8023df0:	4618      	mov	r0, r3
 8023df2:	f000 f865 	bl	8023ec0 <cs43l22_SetMute>
 8023df6:	4602      	mov	r2, r0
 8023df8:	68fb      	ldr	r3, [r7, #12]
 8023dfa:	4413      	add	r3, r2
 8023dfc:	60fb      	str	r3, [r7, #12]

        /* Power on the Codec */
        counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);
 8023dfe:	88fb      	ldrh	r3, [r7, #6]
 8023e00:	b2db      	uxtb	r3, r3
 8023e02:	229e      	movs	r2, #158	; 0x9e
 8023e04:	2102      	movs	r1, #2
 8023e06:	4618      	mov	r0, r3
 8023e08:	f000 f9a8 	bl	802415c <CODEC_IO_Write>
 8023e0c:	4603      	mov	r3, r0
 8023e0e:	461a      	mov	r2, r3
 8023e10:	68fb      	ldr	r3, [r7, #12]
 8023e12:	4413      	add	r3, r2
 8023e14:	60fb      	str	r3, [r7, #12]
        Is_cs43l22_Stop = 0;
 8023e16:	4b04      	ldr	r3, [pc, #16]	; (8023e28 <cs43l22_Play+0x70>)
 8023e18:	2200      	movs	r2, #0
 8023e1a:	701a      	strb	r2, [r3, #0]
    }

    /* Return communication control value */
    return counter;
 8023e1c:	68fb      	ldr	r3, [r7, #12]
}
 8023e1e:	4618      	mov	r0, r3
 8023e20:	3710      	adds	r7, #16
 8023e22:	46bd      	mov	sp, r7
 8023e24:	bd80      	pop	{r7, pc}
 8023e26:	bf00      	nop
 8023e28:	20000001 	.word	0x20000001

08023e2c <cs43l22_SetVolume>:
 * @param Volume: a byte value from 0 to 255 (refer to codec registers
 *                description for more details).
 *
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume) {
 8023e2c:	b5b0      	push	{r4, r5, r7, lr}
 8023e2e:	b084      	sub	sp, #16
 8023e30:	af00      	add	r7, sp, #0
 8023e32:	4603      	mov	r3, r0
 8023e34:	460a      	mov	r2, r1
 8023e36:	80fb      	strh	r3, [r7, #6]
 8023e38:	4613      	mov	r3, r2
 8023e3a:	717b      	strb	r3, [r7, #5]
    uint32_t counter = 0;
 8023e3c:	2300      	movs	r3, #0
 8023e3e:	60bb      	str	r3, [r7, #8]
    uint16_t regA, regB;
    theVolume = Volume;
 8023e40:	4a1d      	ldr	r2, [pc, #116]	; (8023eb8 <cs43l22_SetVolume+0x8c>)
 8023e42:	797b      	ldrb	r3, [r7, #5]
 8023e44:	7013      	strb	r3, [r2, #0]

    if (theOutputDevice != OUTPUT_DEVICE_HEADPHONE) {
 8023e46:	4b1d      	ldr	r3, [pc, #116]	; (8023ebc <cs43l22_SetVolume+0x90>)
 8023e48:	881b      	ldrh	r3, [r3, #0]
 8023e4a:	2b02      	cmp	r3, #2
 8023e4c:	d004      	beq.n	8023e58 <cs43l22_SetVolume+0x2c>
        regA = CS43L22_REG_SPEAKER_A_VOL;
 8023e4e:	2324      	movs	r3, #36	; 0x24
 8023e50:	81fb      	strh	r3, [r7, #14]
        regB = CS43L22_REG_SPEAKER_B_VOL;
 8023e52:	2325      	movs	r3, #37	; 0x25
 8023e54:	81bb      	strh	r3, [r7, #12]
 8023e56:	e003      	b.n	8023e60 <cs43l22_SetVolume+0x34>
    } else {
        regA = CS43L22_REG_HEADPHONE_A_VOL;
 8023e58:	2322      	movs	r3, #34	; 0x22
 8023e5a:	81fb      	strh	r3, [r7, #14]
        regB = CS43L22_REG_HEADPHONE_B_VOL;
 8023e5c:	2323      	movs	r3, #35	; 0x23
 8023e5e:	81bb      	strh	r3, [r7, #12]
    }

    counter += CODEC_IO_Write(DeviceAddr, regA, VOLUME_CONVERT(Volume));
 8023e60:	88fb      	ldrh	r3, [r7, #6]
 8023e62:	b2dc      	uxtb	r4, r3
 8023e64:	89fb      	ldrh	r3, [r7, #14]
 8023e66:	b2dd      	uxtb	r5, r3
 8023e68:	797b      	ldrb	r3, [r7, #5]
 8023e6a:	4618      	mov	r0, r3
 8023e6c:	f000 f990 	bl	8024190 <VOLUME_CONVERT>
 8023e70:	4603      	mov	r3, r0
 8023e72:	461a      	mov	r2, r3
 8023e74:	4629      	mov	r1, r5
 8023e76:	4620      	mov	r0, r4
 8023e78:	f000 f970 	bl	802415c <CODEC_IO_Write>
 8023e7c:	4603      	mov	r3, r0
 8023e7e:	461a      	mov	r2, r3
 8023e80:	68bb      	ldr	r3, [r7, #8]
 8023e82:	4413      	add	r3, r2
 8023e84:	60bb      	str	r3, [r7, #8]
    counter += CODEC_IO_Write(DeviceAddr, regB, VOLUME_CONVERT(Volume));
 8023e86:	88fb      	ldrh	r3, [r7, #6]
 8023e88:	b2dc      	uxtb	r4, r3
 8023e8a:	89bb      	ldrh	r3, [r7, #12]
 8023e8c:	b2dd      	uxtb	r5, r3
 8023e8e:	797b      	ldrb	r3, [r7, #5]
 8023e90:	4618      	mov	r0, r3
 8023e92:	f000 f97d 	bl	8024190 <VOLUME_CONVERT>
 8023e96:	4603      	mov	r3, r0
 8023e98:	461a      	mov	r2, r3
 8023e9a:	4629      	mov	r1, r5
 8023e9c:	4620      	mov	r0, r4
 8023e9e:	f000 f95d 	bl	802415c <CODEC_IO_Write>
 8023ea2:	4603      	mov	r3, r0
 8023ea4:	461a      	mov	r2, r3
 8023ea6:	68bb      	ldr	r3, [r7, #8]
 8023ea8:	4413      	add	r3, r2
 8023eaa:	60bb      	str	r3, [r7, #8]

    return counter;
 8023eac:	68bb      	ldr	r3, [r7, #8]
}
 8023eae:	4618      	mov	r0, r3
 8023eb0:	3710      	adds	r7, #16
 8023eb2:	46bd      	mov	sp, r7
 8023eb4:	bdb0      	pop	{r4, r5, r7, pc}
 8023eb6:	bf00      	nop
 8023eb8:	20000e30 	.word	0x20000e30
 8023ebc:	20000e32 	.word	0x20000e32

08023ec0 <cs43l22_SetMute>:
 * @param DeviceAddr: Device address on communication Bus.
 * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
 *             mute mode.
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd) {
 8023ec0:	b5b0      	push	{r4, r5, r7, lr}
 8023ec2:	b084      	sub	sp, #16
 8023ec4:	af00      	add	r7, sp, #0
 8023ec6:	4603      	mov	r3, r0
 8023ec8:	6039      	str	r1, [r7, #0]
 8023eca:	80fb      	strh	r3, [r7, #6]
    uint32_t counter = 0;
 8023ecc:	2300      	movs	r3, #0
 8023ece:	60fb      	str	r3, [r7, #12]
    uint16_t regA, regB;

    if (theOutputDevice != OUTPUT_DEVICE_HEADPHONE) {
 8023ed0:	4b38      	ldr	r3, [pc, #224]	; (8023fb4 <cs43l22_SetMute+0xf4>)
 8023ed2:	881b      	ldrh	r3, [r3, #0]
 8023ed4:	2b02      	cmp	r3, #2
 8023ed6:	d004      	beq.n	8023ee2 <cs43l22_SetMute+0x22>
        regA = CS43L22_REG_SPEAKER_A_VOL;
 8023ed8:	2324      	movs	r3, #36	; 0x24
 8023eda:	817b      	strh	r3, [r7, #10]
        regB = CS43L22_REG_SPEAKER_B_VOL;
 8023edc:	2325      	movs	r3, #37	; 0x25
 8023ede:	813b      	strh	r3, [r7, #8]
 8023ee0:	e003      	b.n	8023eea <cs43l22_SetMute+0x2a>
    } else {
        regA = CS43L22_REG_HEADPHONE_A_VOL;
 8023ee2:	2322      	movs	r3, #34	; 0x22
 8023ee4:	817b      	strh	r3, [r7, #10]
        regB = CS43L22_REG_HEADPHONE_B_VOL;
 8023ee6:	2323      	movs	r3, #35	; 0x23
 8023ee8:	813b      	strh	r3, [r7, #8]
    }

    /* Set the Mute mode */
    if (Cmd == AUDIO_MUTE_ON) {
 8023eea:	683b      	ldr	r3, [r7, #0]
 8023eec:	2b01      	cmp	r3, #1
 8023eee:	d126      	bne.n	8023f3e <cs43l22_SetMute+0x7e>
        counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 8023ef0:	88fb      	ldrh	r3, [r7, #6]
 8023ef2:	b2db      	uxtb	r3, r3
 8023ef4:	22ff      	movs	r2, #255	; 0xff
 8023ef6:	2104      	movs	r1, #4
 8023ef8:	4618      	mov	r0, r3
 8023efa:	f000 f92f 	bl	802415c <CODEC_IO_Write>
 8023efe:	4603      	mov	r3, r0
 8023f00:	461a      	mov	r2, r3
 8023f02:	68fb      	ldr	r3, [r7, #12]
 8023f04:	4413      	add	r3, r2
 8023f06:	60fb      	str	r3, [r7, #12]
        // mute
        counter += CODEC_IO_Write(DeviceAddr, regA, 0x01);
 8023f08:	88fb      	ldrh	r3, [r7, #6]
 8023f0a:	b2db      	uxtb	r3, r3
 8023f0c:	897a      	ldrh	r2, [r7, #10]
 8023f0e:	b2d1      	uxtb	r1, r2
 8023f10:	2201      	movs	r2, #1
 8023f12:	4618      	mov	r0, r3
 8023f14:	f000 f922 	bl	802415c <CODEC_IO_Write>
 8023f18:	4603      	mov	r3, r0
 8023f1a:	461a      	mov	r2, r3
 8023f1c:	68fb      	ldr	r3, [r7, #12]
 8023f1e:	4413      	add	r3, r2
 8023f20:	60fb      	str	r3, [r7, #12]
        counter += CODEC_IO_Write(DeviceAddr, regB, 0x01);
 8023f22:	88fb      	ldrh	r3, [r7, #6]
 8023f24:	b2db      	uxtb	r3, r3
 8023f26:	893a      	ldrh	r2, [r7, #8]
 8023f28:	b2d1      	uxtb	r1, r2
 8023f2a:	2201      	movs	r2, #1
 8023f2c:	4618      	mov	r0, r3
 8023f2e:	f000 f915 	bl	802415c <CODEC_IO_Write>
 8023f32:	4603      	mov	r3, r0
 8023f34:	461a      	mov	r2, r3
 8023f36:	68fb      	ldr	r3, [r7, #12]
 8023f38:	4413      	add	r3, r2
 8023f3a:	60fb      	str	r3, [r7, #12]
 8023f3c:	e035      	b.n	8023faa <cs43l22_SetMute+0xea>
    } else /* AUDIO_MUTE_OFF Disable the Mute */
    {
        // set to max
        counter += CODEC_IO_Write(DeviceAddr, regA, VOLUME_CONVERT(theVolume));
 8023f3e:	88fb      	ldrh	r3, [r7, #6]
 8023f40:	b2dc      	uxtb	r4, r3
 8023f42:	897b      	ldrh	r3, [r7, #10]
 8023f44:	b2dd      	uxtb	r5, r3
 8023f46:	4b1c      	ldr	r3, [pc, #112]	; (8023fb8 <cs43l22_SetMute+0xf8>)
 8023f48:	781b      	ldrb	r3, [r3, #0]
 8023f4a:	4618      	mov	r0, r3
 8023f4c:	f000 f920 	bl	8024190 <VOLUME_CONVERT>
 8023f50:	4603      	mov	r3, r0
 8023f52:	461a      	mov	r2, r3
 8023f54:	4629      	mov	r1, r5
 8023f56:	4620      	mov	r0, r4
 8023f58:	f000 f900 	bl	802415c <CODEC_IO_Write>
 8023f5c:	4603      	mov	r3, r0
 8023f5e:	461a      	mov	r2, r3
 8023f60:	68fb      	ldr	r3, [r7, #12]
 8023f62:	4413      	add	r3, r2
 8023f64:	60fb      	str	r3, [r7, #12]
        counter += CODEC_IO_Write(DeviceAddr, regB, VOLUME_CONVERT(theVolume));
 8023f66:	88fb      	ldrh	r3, [r7, #6]
 8023f68:	b2dc      	uxtb	r4, r3
 8023f6a:	893b      	ldrh	r3, [r7, #8]
 8023f6c:	b2dd      	uxtb	r5, r3
 8023f6e:	4b12      	ldr	r3, [pc, #72]	; (8023fb8 <cs43l22_SetMute+0xf8>)
 8023f70:	781b      	ldrb	r3, [r3, #0]
 8023f72:	4618      	mov	r0, r3
 8023f74:	f000 f90c 	bl	8024190 <VOLUME_CONVERT>
 8023f78:	4603      	mov	r3, r0
 8023f7a:	461a      	mov	r2, r3
 8023f7c:	4629      	mov	r1, r5
 8023f7e:	4620      	mov	r0, r4
 8023f80:	f000 f8ec 	bl	802415c <CODEC_IO_Write>
 8023f84:	4603      	mov	r3, r0
 8023f86:	461a      	mov	r2, r3
 8023f88:	68fb      	ldr	r3, [r7, #12]
 8023f8a:	4413      	add	r3, r2
 8023f8c:	60fb      	str	r3, [r7, #12]
        counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8023f8e:	88fb      	ldrh	r3, [r7, #6]
 8023f90:	b2d8      	uxtb	r0, r3
 8023f92:	4b0a      	ldr	r3, [pc, #40]	; (8023fbc <cs43l22_SetMute+0xfc>)
 8023f94:	781b      	ldrb	r3, [r3, #0]
 8023f96:	b2db      	uxtb	r3, r3
 8023f98:	461a      	mov	r2, r3
 8023f9a:	2104      	movs	r1, #4
 8023f9c:	f000 f8de 	bl	802415c <CODEC_IO_Write>
 8023fa0:	4603      	mov	r3, r0
 8023fa2:	461a      	mov	r2, r3
 8023fa4:	68fb      	ldr	r3, [r7, #12]
 8023fa6:	4413      	add	r3, r2
 8023fa8:	60fb      	str	r3, [r7, #12]
    }
    return counter;
 8023faa:	68fb      	ldr	r3, [r7, #12]
}
 8023fac:	4618      	mov	r0, r3
 8023fae:	3710      	adds	r7, #16
 8023fb0:	46bd      	mov	sp, r7
 8023fb2:	bdb0      	pop	{r4, r5, r7, pc}
 8023fb4:	20000e32 	.word	0x20000e32
 8023fb8:	20000e30 	.word	0x20000e30
 8023fbc:	20000e34 	.word	0x20000e34

08023fc0 <cs43l22_SetBeep>:
 */
uint32_t cs43l22_Reset(uint16_t DeviceAddr) {
    return 0;
}

uint32_t cs43l22_SetBeep(uint16_t DeviceAddr, uint8_t Frequency, uint8_t OnTime, uint8_t OffTime) {
 8023fc0:	b590      	push	{r4, r7, lr}
 8023fc2:	b085      	sub	sp, #20
 8023fc4:	af00      	add	r7, sp, #0
 8023fc6:	4604      	mov	r4, r0
 8023fc8:	4608      	mov	r0, r1
 8023fca:	4611      	mov	r1, r2
 8023fcc:	461a      	mov	r2, r3
 8023fce:	4623      	mov	r3, r4
 8023fd0:	80fb      	strh	r3, [r7, #6]
 8023fd2:	4603      	mov	r3, r0
 8023fd4:	717b      	strb	r3, [r7, #5]
 8023fd6:	460b      	mov	r3, r1
 8023fd8:	713b      	strb	r3, [r7, #4]
 8023fda:	4613      	mov	r3, r2
 8023fdc:	70fb      	strb	r3, [r7, #3]
    uint32_t counter = 0;
 8023fde:	2300      	movs	r3, #0
 8023fe0:	60fb      	str	r3, [r7, #12]

    /* Set frequency of beep and on time */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_BEEP_FREQ_ON_TIME, (Frequency << 4) | OnTime);
 8023fe2:	88fb      	ldrh	r3, [r7, #6]
 8023fe4:	b2d8      	uxtb	r0, r3
 8023fe6:	797b      	ldrb	r3, [r7, #5]
 8023fe8:	011b      	lsls	r3, r3, #4
 8023fea:	b25a      	sxtb	r2, r3
 8023fec:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8023ff0:	4313      	orrs	r3, r2
 8023ff2:	b25b      	sxtb	r3, r3
 8023ff4:	b2db      	uxtb	r3, r3
 8023ff6:	461a      	mov	r2, r3
 8023ff8:	211c      	movs	r1, #28
 8023ffa:	f000 f8af 	bl	802415c <CODEC_IO_Write>
 8023ffe:	4603      	mov	r3, r0
 8024000:	461a      	mov	r2, r3
 8024002:	68fb      	ldr	r3, [r7, #12]
 8024004:	4413      	add	r3, r2
 8024006:	60fb      	str	r3, [r7, #12]
    /* Set volume of beep (max), and off time */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_BEEP_VOL_OFF_TIME, (OffTime << 5) | BEEP_VOL_MAX);
 8024008:	88fb      	ldrh	r3, [r7, #6]
 802400a:	b2d8      	uxtb	r0, r3
 802400c:	78fb      	ldrb	r3, [r7, #3]
 802400e:	015b      	lsls	r3, r3, #5
 8024010:	b25b      	sxtb	r3, r3
 8024012:	f043 0306 	orr.w	r3, r3, #6
 8024016:	b25b      	sxtb	r3, r3
 8024018:	b2db      	uxtb	r3, r3
 802401a:	461a      	mov	r2, r3
 802401c:	211d      	movs	r1, #29
 802401e:	f000 f89d 	bl	802415c <CODEC_IO_Write>
 8024022:	4603      	mov	r3, r0
 8024024:	461a      	mov	r2, r3
 8024026:	68fb      	ldr	r3, [r7, #12]
 8024028:	4413      	add	r3, r2
 802402a:	60fb      	str	r3, [r7, #12]

    return counter;
 802402c:	68fb      	ldr	r3, [r7, #12]
}
 802402e:	4618      	mov	r0, r3
 8024030:	3714      	adds	r7, #20
 8024032:	46bd      	mov	sp, r7
 8024034:	bd90      	pop	{r4, r7, pc}

08024036 <cs43l22_Beep>:

uint32_t cs43l22_Beep(uint16_t DeviceAddr, uint8_t Mode, uint8_t Mix) {
 8024036:	b580      	push	{r7, lr}
 8024038:	b084      	sub	sp, #16
 802403a:	af00      	add	r7, sp, #0
 802403c:	4603      	mov	r3, r0
 802403e:	80fb      	strh	r3, [r7, #6]
 8024040:	460b      	mov	r3, r1
 8024042:	717b      	strb	r3, [r7, #5]
 8024044:	4613      	mov	r3, r2
 8024046:	713b      	strb	r3, [r7, #4]
    uint32_t counter = 0;
 8024048:	2300      	movs	r3, #0
 802404a:	60fb      	str	r3, [r7, #12]

    /* Set mode beep play and mix with serial sound*/
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_BEEP_TONE_CFG, (Mode << 6) | (Mix << 5));
 802404c:	88fb      	ldrh	r3, [r7, #6]
 802404e:	b2d8      	uxtb	r0, r3
 8024050:	797b      	ldrb	r3, [r7, #5]
 8024052:	019b      	lsls	r3, r3, #6
 8024054:	b25a      	sxtb	r2, r3
 8024056:	793b      	ldrb	r3, [r7, #4]
 8024058:	015b      	lsls	r3, r3, #5
 802405a:	b25b      	sxtb	r3, r3
 802405c:	4313      	orrs	r3, r2
 802405e:	b25b      	sxtb	r3, r3
 8024060:	b2db      	uxtb	r3, r3
 8024062:	461a      	mov	r2, r3
 8024064:	211e      	movs	r1, #30
 8024066:	f000 f879 	bl	802415c <CODEC_IO_Write>
 802406a:	4603      	mov	r3, r0
 802406c:	461a      	mov	r2, r3
 802406e:	68fb      	ldr	r3, [r7, #12]
 8024070:	4413      	add	r3, r2
 8024072:	60fb      	str	r3, [r7, #12]

    return counter;
 8024074:	68fb      	ldr	r3, [r7, #12]
}
 8024076:	4618      	mov	r0, r3
 8024078:	3710      	adds	r7, #16
 802407a:	46bd      	mov	sp, r7
 802407c:	bd80      	pop	{r7, pc}
	...

08024080 <AUDIO_IO_Init>:

/********************************* LINK AUDIO *********************************/
/**
 * @brief  Initializes Audio low level.
 */
void AUDIO_IO_Init(void) {
 8024080:	b580      	push	{r7, lr}
 8024082:	af00      	add	r7, sp, #0
    /* Power Down the codec */
    HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 8024084:	2200      	movs	r2, #0
 8024086:	2110      	movs	r1, #16
 8024088:	4808      	ldr	r0, [pc, #32]	; (80240ac <AUDIO_IO_Init+0x2c>)
 802408a:	f00c f861 	bl	8030150 <HAL_GPIO_WritePin>
    /* Wait for a delay to insure registers erasing */
    _DelayMS(500);
 802408e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8024092:	f01b fb13 	bl	803f6bc <_DelayMS>
    /* Power on the codec */
    HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_SET);
 8024096:	2201      	movs	r2, #1
 8024098:	2110      	movs	r1, #16
 802409a:	4804      	ldr	r0, [pc, #16]	; (80240ac <AUDIO_IO_Init+0x2c>)
 802409c:	f00c f858 	bl	8030150 <HAL_GPIO_WritePin>
    /* Wait for a delay to insure registers erasing */
    _DelayMS(500);
 80240a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80240a4:	f01b fb0a 	bl	803f6bc <_DelayMS>
}
 80240a8:	bf00      	nop
 80240aa:	bd80      	pop	{r7, pc}
 80240ac:	40020c00 	.word	0x40020c00

080240b0 <AUDIO_IO_Write>:
 * @brief  Writes a single data.
 * @param  Addr: I2C address
 * @param  Reg: Reg address
 * @param  Value: Data to be written
 */
void AUDIO_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value) {
 80240b0:	b580      	push	{r7, lr}
 80240b2:	b088      	sub	sp, #32
 80240b4:	af04      	add	r7, sp, #16
 80240b6:	4603      	mov	r3, r0
 80240b8:	71fb      	strb	r3, [r7, #7]
 80240ba:	460b      	mov	r3, r1
 80240bc:	71bb      	strb	r3, [r7, #6]
 80240be:	4613      	mov	r3, r2
 80240c0:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef status = HAL_OK;
 80240c2:	2300      	movs	r3, #0
 80240c4:	73fb      	strb	r3, [r7, #15]

    status = HAL_I2C_Mem_Write(&hi2c1, Addr, (uint16_t) Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2Cx_TIMEOUT_MAX);
 80240c6:	79fb      	ldrb	r3, [r7, #7]
 80240c8:	b299      	uxth	r1, r3
 80240ca:	79bb      	ldrb	r3, [r7, #6]
 80240cc:	b29a      	uxth	r2, r3
 80240ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80240d2:	9302      	str	r3, [sp, #8]
 80240d4:	2301      	movs	r3, #1
 80240d6:	9301      	str	r3, [sp, #4]
 80240d8:	1d7b      	adds	r3, r7, #5
 80240da:	9300      	str	r3, [sp, #0]
 80240dc:	2301      	movs	r3, #1
 80240de:	4808      	ldr	r0, [pc, #32]	; (8024100 <AUDIO_IO_Write+0x50>)
 80240e0:	f00c fab8 	bl	8030654 <HAL_I2C_Mem_Write>
 80240e4:	4603      	mov	r3, r0
 80240e6:	73fb      	strb	r3, [r7, #15]

    /* Check the communication status */
    if (status != HAL_OK) {
 80240e8:	7bfb      	ldrb	r3, [r7, #15]
 80240ea:	2b00      	cmp	r3, #0
 80240ec:	d003      	beq.n	80240f6 <AUDIO_IO_Write+0x46>
        /* Execute user timeout callback */
        I2Cx_Error(Addr);
 80240ee:	79fb      	ldrb	r3, [r7, #7]
 80240f0:	4618      	mov	r0, r3
 80240f2:	f000 f8b9 	bl	8024268 <I2Cx_Error>
    }
}
 80240f6:	bf00      	nop
 80240f8:	3710      	adds	r7, #16
 80240fa:	46bd      	mov	sp, r7
 80240fc:	bd80      	pop	{r7, pc}
 80240fe:	bf00      	nop
 8024100:	2000857c 	.word	0x2000857c

08024104 <AUDIO_IO_Read>:
 * @brief  Reads a single data.
 * @param  Addr: I2C address
 * @param  Reg: Reg address
 * @retval Data to be read
 */
uint8_t AUDIO_IO_Read(uint8_t Addr, uint8_t Reg) {
 8024104:	b580      	push	{r7, lr}
 8024106:	b088      	sub	sp, #32
 8024108:	af04      	add	r7, sp, #16
 802410a:	4603      	mov	r3, r0
 802410c:	460a      	mov	r2, r1
 802410e:	71fb      	strb	r3, [r7, #7]
 8024110:	4613      	mov	r3, r2
 8024112:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef status = HAL_OK;
 8024114:	2300      	movs	r3, #0
 8024116:	73fb      	strb	r3, [r7, #15]
    uint8_t value = 0;
 8024118:	2300      	movs	r3, #0
 802411a:	73bb      	strb	r3, [r7, #14]

    status = HAL_I2C_Mem_Read(&hi2c1, Addr, (uint16_t) Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2Cx_TIMEOUT_MAX);
 802411c:	79fb      	ldrb	r3, [r7, #7]
 802411e:	b299      	uxth	r1, r3
 8024120:	79bb      	ldrb	r3, [r7, #6]
 8024122:	b29a      	uxth	r2, r3
 8024124:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8024128:	9302      	str	r3, [sp, #8]
 802412a:	2301      	movs	r3, #1
 802412c:	9301      	str	r3, [sp, #4]
 802412e:	f107 030e 	add.w	r3, r7, #14
 8024132:	9300      	str	r3, [sp, #0]
 8024134:	2301      	movs	r3, #1
 8024136:	4808      	ldr	r0, [pc, #32]	; (8024158 <AUDIO_IO_Read+0x54>)
 8024138:	f00c fb86 	bl	8030848 <HAL_I2C_Mem_Read>
 802413c:	4603      	mov	r3, r0
 802413e:	73fb      	strb	r3, [r7, #15]

    /* Check the communication status */
    if (status != HAL_OK) {
 8024140:	7bfb      	ldrb	r3, [r7, #15]
 8024142:	2b00      	cmp	r3, #0
 8024144:	d003      	beq.n	802414e <AUDIO_IO_Read+0x4a>
        /* Execute user timeout callback */
        I2Cx_Error(Addr);
 8024146:	79fb      	ldrb	r3, [r7, #7]
 8024148:	4618      	mov	r0, r3
 802414a:	f000 f88d 	bl	8024268 <I2Cx_Error>
    }
    return value;
 802414e:	7bbb      	ldrb	r3, [r7, #14]
}
 8024150:	4618      	mov	r0, r3
 8024152:	3710      	adds	r7, #16
 8024154:	46bd      	mov	sp, r7
 8024156:	bd80      	pop	{r7, pc}
 8024158:	2000857c 	.word	0x2000857c

0802415c <CODEC_IO_Write>:
 * @param  Addr: I2C address
 * @param  Reg: Reg address
 * @param  Value: Data to be written
 * @retval None
 */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value) {
 802415c:	b580      	push	{r7, lr}
 802415e:	b084      	sub	sp, #16
 8024160:	af00      	add	r7, sp, #0
 8024162:	4603      	mov	r3, r0
 8024164:	71fb      	strb	r3, [r7, #7]
 8024166:	460b      	mov	r3, r1
 8024168:	71bb      	strb	r3, [r7, #6]
 802416a:	4613      	mov	r3, r2
 802416c:	717b      	strb	r3, [r7, #5]
    uint32_t result = 0;
 802416e:	2300      	movs	r3, #0
 8024170:	60fb      	str	r3, [r7, #12]

    AUDIO_IO_Write(Addr, Reg, Value);
 8024172:	797a      	ldrb	r2, [r7, #5]
 8024174:	79b9      	ldrb	r1, [r7, #6]
 8024176:	79fb      	ldrb	r3, [r7, #7]
 8024178:	4618      	mov	r0, r3
 802417a:	f7ff ff99 	bl	80240b0 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
	/* Verify that the data has been correctly written */
	result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */

    return result;
 802417e:	68fb      	ldr	r3, [r7, #12]
 8024180:	b2db      	uxtb	r3, r3
}
 8024182:	4618      	mov	r0, r3
 8024184:	3710      	adds	r7, #16
 8024186:	46bd      	mov	sp, r7
 8024188:	bd80      	pop	{r7, pc}
 802418a:	0000      	movs	r0, r0
 802418c:	0000      	movs	r0, r0
	...

08024190 <VOLUME_CONVERT>:

static uint8_t VOLUME_CONVERT(uint8_t Volume) {
 8024190:	b590      	push	{r4, r7, lr}
 8024192:	b089      	sub	sp, #36	; 0x24
 8024194:	af00      	add	r7, sp, #0
 8024196:	4603      	mov	r3, r0
 8024198:	71fb      	strb	r3, [r7, #7]
    uint64_t Vol, Multiplier = pow(10, 10);
 802419a:	a431      	add	r4, pc, #196	; (adr r4, 8024260 <VOLUME_CONVERT+0xd0>)
 802419c:	e9d4 3400 	ldrd	r3, r4, [r4]
 80241a0:	e9c7 3406 	strd	r3, r4, [r7, #24]
    uint8_t Log, Result;

    // change zero to 1
    Volume = Volume ? Volume : 1;
 80241a4:	79fb      	ldrb	r3, [r7, #7]
 80241a6:	2b00      	cmp	r3, #0
 80241a8:	d001      	beq.n	80241ae <VOLUME_CONVERT+0x1e>
 80241aa:	79fb      	ldrb	r3, [r7, #7]
 80241ac:	e000      	b.n	80241b0 <VOLUME_CONVERT+0x20>
 80241ae:	2301      	movs	r3, #1
 80241b0:	71fb      	strb	r3, [r7, #7]

    // expand resolution
    Vol = Volume > 100 ? Multiplier : (uint64_t) ((Volume * Multiplier) / 100);
 80241b2:	79fb      	ldrb	r3, [r7, #7]
 80241b4:	2b64      	cmp	r3, #100	; 0x64
 80241b6:	d817      	bhi.n	80241e8 <VOLUME_CONVERT+0x58>
 80241b8:	79fb      	ldrb	r3, [r7, #7]
 80241ba:	f04f 0400 	mov.w	r4, #0
 80241be:	69ba      	ldr	r2, [r7, #24]
 80241c0:	fb04 f102 	mul.w	r1, r4, r2
 80241c4:	69fa      	ldr	r2, [r7, #28]
 80241c6:	fb03 f202 	mul.w	r2, r3, r2
 80241ca:	440a      	add	r2, r1
 80241cc:	69b9      	ldr	r1, [r7, #24]
 80241ce:	fba1 0103 	umull	r0, r1, r1, r3
 80241d2:	1853      	adds	r3, r2, r1
 80241d4:	4619      	mov	r1, r3
 80241d6:	f04f 0264 	mov.w	r2, #100	; 0x64
 80241da:	f04f 0300 	mov.w	r3, #0
 80241de:	f7fc fd8b 	bl	8020cf8 <__aeabi_uldivmod>
 80241e2:	4603      	mov	r3, r0
 80241e4:	460c      	mov	r4, r1
 80241e6:	e001      	b.n	80241ec <VOLUME_CONVERT+0x5c>
 80241e8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80241ec:	e9c7 3404 	strd	r3, r4, [r7, #16]

    // convert linear to logarithmic (scale 100)
    Log = (uint8_t) (10 * log10(1 + Vol));
 80241f0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80241f4:	1c59      	adds	r1, r3, #1
 80241f6:	f144 0200 	adc.w	r2, r4, #0
 80241fa:	4608      	mov	r0, r1
 80241fc:	4611      	mov	r1, r2
 80241fe:	f7fc f9fd 	bl	80205fc <__aeabi_ul2d>
 8024202:	4603      	mov	r3, r0
 8024204:	460c      	mov	r4, r1
 8024206:	ec44 3b10 	vmov	d0, r3, r4
 802420a:	f01d fd79 	bl	8041d00 <log10>
 802420e:	ec51 0b10 	vmov	r0, r1, d0
 8024212:	f04f 0200 	mov.w	r2, #0
 8024216:	4b10      	ldr	r3, [pc, #64]	; (8024258 <VOLUME_CONVERT+0xc8>)
 8024218:	f7fc fa26 	bl	8020668 <__aeabi_dmul>
 802421c:	4603      	mov	r3, r0
 802421e:	460c      	mov	r4, r1
 8024220:	4618      	mov	r0, r3
 8024222:	4621      	mov	r1, r4
 8024224:	f7fc fcf8 	bl	8020c18 <__aeabi_d2uiz>
 8024228:	4603      	mov	r3, r0
 802422a:	73fb      	strb	r3, [r7, #15]

    // scale 100 to 255
    Result = Log > 100 ? 255 : (uint8_t) ((Log * 255) / 100);
 802422c:	7bfb      	ldrb	r3, [r7, #15]
 802422e:	2b64      	cmp	r3, #100	; 0x64
 8024230:	d80b      	bhi.n	802424a <VOLUME_CONVERT+0xba>
 8024232:	7bfa      	ldrb	r2, [r7, #15]
 8024234:	4613      	mov	r3, r2
 8024236:	021b      	lsls	r3, r3, #8
 8024238:	1a9b      	subs	r3, r3, r2
 802423a:	4a08      	ldr	r2, [pc, #32]	; (802425c <VOLUME_CONVERT+0xcc>)
 802423c:	fb82 1203 	smull	r1, r2, r2, r3
 8024240:	1152      	asrs	r2, r2, #5
 8024242:	17db      	asrs	r3, r3, #31
 8024244:	1ad3      	subs	r3, r2, r3
 8024246:	b2db      	uxtb	r3, r3
 8024248:	e000      	b.n	802424c <VOLUME_CONVERT+0xbc>
 802424a:	23ff      	movs	r3, #255	; 0xff
 802424c:	73bb      	strb	r3, [r7, #14]

    return Result;
 802424e:	7bbb      	ldrb	r3, [r7, #14]
}
 8024250:	4618      	mov	r0, r3
 8024252:	3724      	adds	r7, #36	; 0x24
 8024254:	46bd      	mov	sp, r7
 8024256:	bd90      	pop	{r4, r7, pc}
 8024258:	40240000 	.word	0x40240000
 802425c:	51eb851f 	.word	0x51eb851f
 8024260:	540be400 	.word	0x540be400
 8024264:	00000002 	.word	0x00000002

08024268 <I2Cx_Error>:

/**
 * @brief  Manages error callback by re-initializing I2C.
 * @param  Addr: I2C Address
 */
static void I2Cx_Error(uint8_t Addr) {
 8024268:	b580      	push	{r7, lr}
 802426a:	b082      	sub	sp, #8
 802426c:	af00      	add	r7, sp, #0
 802426e:	4603      	mov	r3, r0
 8024270:	71fb      	strb	r3, [r7, #7]
    /* De-initialize the I2C communication bus */
    HAL_I2C_MspDeInit(&hi2c1);
 8024272:	4805      	ldr	r0, [pc, #20]	; (8024288 <I2Cx_Error+0x20>)
 8024274:	f007 fb30 	bl	802b8d8 <HAL_I2C_MspDeInit>

    /* Re-Initialize the I2C communication bus */
    HAL_I2C_MspInit(&hi2c1);
 8024278:	4803      	ldr	r0, [pc, #12]	; (8024288 <I2Cx_Error+0x20>)
 802427a:	f007 fa37 	bl	802b6ec <HAL_I2C_MspInit>
}
 802427e:	bf00      	nop
 8024280:	3708      	adds	r7, #8
 8024282:	46bd      	mov	sp, r7
 8024284:	bd80      	pop	{r7, pc}
 8024286:	bf00      	nop
 8024288:	2000857c 	.word	0x2000857c

0802428c <FZ3387_SET_POWER>:
/* Public variables -----------------------------------------------------------*/
packet_t packet;
finger_t finger;

/* Public functions implementation ---------------------------------------------*/
void FZ3387_SET_POWER(uint8_t state) {
 802428c:	b580      	push	{r7, lr}
 802428e:	b082      	sub	sp, #8
 8024290:	af00      	add	r7, sp, #0
 8024292:	4603      	mov	r3, r0
 8024294:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(EXT_FINGER_MCU_PWR_GPIO_Port, EXT_FINGER_MCU_PWR_Pin, !state);
 8024296:	79fb      	ldrb	r3, [r7, #7]
 8024298:	2b00      	cmp	r3, #0
 802429a:	bf0c      	ite	eq
 802429c:	2301      	moveq	r3, #1
 802429e:	2300      	movne	r3, #0
 80242a0:	b2db      	uxtb	r3, r3
 80242a2:	461a      	mov	r2, r3
 80242a4:	2104      	movs	r1, #4
 80242a6:	4805      	ldr	r0, [pc, #20]	; (80242bc <FZ3387_SET_POWER+0x30>)
 80242a8:	f00b ff52 	bl	8030150 <HAL_GPIO_WritePin>
    _DelayMS(500);
 80242ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80242b0:	f01b fa04 	bl	803f6bc <_DelayMS>
}
 80242b4:	bf00      	nop
 80242b6:	3708      	adds	r7, #8
 80242b8:	46bd      	mov	sp, r7
 80242ba:	bd80      	pop	{r7, pc}
 80242bc:	40020800 	.word	0x40020800

080242c0 <FZ3387_SERIAL_WRITE>:

void FZ3387_SERIAL_WRITE(uint8_t c) {
 80242c0:	b580      	push	{r7, lr}
 80242c2:	b082      	sub	sp, #8
 80242c4:	af00      	add	r7, sp, #0
 80242c6:	4603      	mov	r3, r0
 80242c8:	71fb      	strb	r3, [r7, #7]
    FINGER_Transmit8(&c);
 80242ca:	1dfb      	adds	r3, r7, #7
 80242cc:	4618      	mov	r0, r3
 80242ce:	f7fe f935 	bl	802253c <FINGER_Transmit8>
}
 80242d2:	bf00      	nop
 80242d4:	3708      	adds	r7, #8
 80242d6:	46bd      	mov	sp, r7
 80242d8:	bd80      	pop	{r7, pc}

080242da <FZ3387_SERIAL_WRITE_U16>:

void FZ3387_SERIAL_WRITE_U16(uint16_t cc) {
 80242da:	b580      	push	{r7, lr}
 80242dc:	b082      	sub	sp, #8
 80242de:	af00      	add	r7, sp, #0
 80242e0:	4603      	mov	r3, r0
 80242e2:	80fb      	strh	r3, [r7, #6]
    FZ3387_SERIAL_WRITE((uint8_t) (cc >> 8));
 80242e4:	88fb      	ldrh	r3, [r7, #6]
 80242e6:	0a1b      	lsrs	r3, r3, #8
 80242e8:	b29b      	uxth	r3, r3
 80242ea:	b2db      	uxtb	r3, r3
 80242ec:	4618      	mov	r0, r3
 80242ee:	f7ff ffe7 	bl	80242c0 <FZ3387_SERIAL_WRITE>
    FZ3387_SERIAL_WRITE((uint8_t) (cc & 0xFF));
 80242f2:	88fb      	ldrh	r3, [r7, #6]
 80242f4:	b2db      	uxtb	r3, r3
 80242f6:	4618      	mov	r0, r3
 80242f8:	f7ff ffe2 	bl	80242c0 <FZ3387_SERIAL_WRITE>
}
 80242fc:	bf00      	nop
 80242fe:	3708      	adds	r7, #8
 8024300:	46bd      	mov	sp, r7
 8024302:	bd80      	pop	{r7, pc}

08024304 <FZ3387_writeStructuredPacket>:
 @brief   Helper function to process a packet and send it over UART to the sensor
 @param   packet A structure containing the bytes to transmit
 */
/**************************************************************************/

void FZ3387_writeStructuredPacket(void) {
 8024304:	b580      	push	{r7, lr}
 8024306:	b082      	sub	sp, #8
 8024308:	af00      	add	r7, sp, #0
    FINGER_Reset_Buffer();
 802430a:	f7fe f905 	bl	8022518 <FINGER_Reset_Buffer>

    FZ3387_SERIAL_WRITE_U16(packet.start_code);
 802430e:	4b2c      	ldr	r3, [pc, #176]	; (80243c0 <FZ3387_writeStructuredPacket+0xbc>)
 8024310:	881b      	ldrh	r3, [r3, #0]
 8024312:	4618      	mov	r0, r3
 8024314:	f7ff ffe1 	bl	80242da <FZ3387_SERIAL_WRITE_U16>
    FZ3387_SERIAL_WRITE(packet.address[0]);
 8024318:	4b29      	ldr	r3, [pc, #164]	; (80243c0 <FZ3387_writeStructuredPacket+0xbc>)
 802431a:	789b      	ldrb	r3, [r3, #2]
 802431c:	4618      	mov	r0, r3
 802431e:	f7ff ffcf 	bl	80242c0 <FZ3387_SERIAL_WRITE>
    FZ3387_SERIAL_WRITE(packet.address[1]);
 8024322:	4b27      	ldr	r3, [pc, #156]	; (80243c0 <FZ3387_writeStructuredPacket+0xbc>)
 8024324:	78db      	ldrb	r3, [r3, #3]
 8024326:	4618      	mov	r0, r3
 8024328:	f7ff ffca 	bl	80242c0 <FZ3387_SERIAL_WRITE>
    FZ3387_SERIAL_WRITE(packet.address[2]);
 802432c:	4b24      	ldr	r3, [pc, #144]	; (80243c0 <FZ3387_writeStructuredPacket+0xbc>)
 802432e:	791b      	ldrb	r3, [r3, #4]
 8024330:	4618      	mov	r0, r3
 8024332:	f7ff ffc5 	bl	80242c0 <FZ3387_SERIAL_WRITE>
    FZ3387_SERIAL_WRITE(packet.address[3]);
 8024336:	4b22      	ldr	r3, [pc, #136]	; (80243c0 <FZ3387_writeStructuredPacket+0xbc>)
 8024338:	795b      	ldrb	r3, [r3, #5]
 802433a:	4618      	mov	r0, r3
 802433c:	f7ff ffc0 	bl	80242c0 <FZ3387_SERIAL_WRITE>
    FZ3387_SERIAL_WRITE(packet.type);
 8024340:	4b1f      	ldr	r3, [pc, #124]	; (80243c0 <FZ3387_writeStructuredPacket+0xbc>)
 8024342:	799b      	ldrb	r3, [r3, #6]
 8024344:	4618      	mov	r0, r3
 8024346:	f7ff ffbb 	bl	80242c0 <FZ3387_SERIAL_WRITE>

    uint16_t wire_length = packet.length + 2;
 802434a:	4b1d      	ldr	r3, [pc, #116]	; (80243c0 <FZ3387_writeStructuredPacket+0xbc>)
 802434c:	891b      	ldrh	r3, [r3, #8]
 802434e:	3302      	adds	r3, #2
 8024350:	807b      	strh	r3, [r7, #2]
    FZ3387_SERIAL_WRITE_U16(wire_length);
 8024352:	887b      	ldrh	r3, [r7, #2]
 8024354:	4618      	mov	r0, r3
 8024356:	f7ff ffc0 	bl	80242da <FZ3387_SERIAL_WRITE_U16>

    uint16_t sum = ((wire_length) >> 8) + ((wire_length) & 0xFF) + packet.type;
 802435a:	887b      	ldrh	r3, [r7, #2]
 802435c:	0a1b      	lsrs	r3, r3, #8
 802435e:	b29a      	uxth	r2, r3
 8024360:	887b      	ldrh	r3, [r7, #2]
 8024362:	b2db      	uxtb	r3, r3
 8024364:	b29b      	uxth	r3, r3
 8024366:	4413      	add	r3, r2
 8024368:	b29a      	uxth	r2, r3
 802436a:	4b15      	ldr	r3, [pc, #84]	; (80243c0 <FZ3387_writeStructuredPacket+0xbc>)
 802436c:	799b      	ldrb	r3, [r3, #6]
 802436e:	b29b      	uxth	r3, r3
 8024370:	4413      	add	r3, r2
 8024372:	80fb      	strh	r3, [r7, #6]
    for (uint8_t i = 0; i < packet.length; i++) {
 8024374:	2300      	movs	r3, #0
 8024376:	717b      	strb	r3, [r7, #5]
 8024378:	e011      	b.n	802439e <FZ3387_writeStructuredPacket+0x9a>
        FZ3387_SERIAL_WRITE(packet.data[i]);
 802437a:	797b      	ldrb	r3, [r7, #5]
 802437c:	4a10      	ldr	r2, [pc, #64]	; (80243c0 <FZ3387_writeStructuredPacket+0xbc>)
 802437e:	4413      	add	r3, r2
 8024380:	7a9b      	ldrb	r3, [r3, #10]
 8024382:	4618      	mov	r0, r3
 8024384:	f7ff ff9c 	bl	80242c0 <FZ3387_SERIAL_WRITE>
        sum += packet.data[i];
 8024388:	797b      	ldrb	r3, [r7, #5]
 802438a:	4a0d      	ldr	r2, [pc, #52]	; (80243c0 <FZ3387_writeStructuredPacket+0xbc>)
 802438c:	4413      	add	r3, r2
 802438e:	7a9b      	ldrb	r3, [r3, #10]
 8024390:	b29a      	uxth	r2, r3
 8024392:	88fb      	ldrh	r3, [r7, #6]
 8024394:	4413      	add	r3, r2
 8024396:	80fb      	strh	r3, [r7, #6]
    for (uint8_t i = 0; i < packet.length; i++) {
 8024398:	797b      	ldrb	r3, [r7, #5]
 802439a:	3301      	adds	r3, #1
 802439c:	717b      	strb	r3, [r7, #5]
 802439e:	797b      	ldrb	r3, [r7, #5]
 80243a0:	b29a      	uxth	r2, r3
 80243a2:	4b07      	ldr	r3, [pc, #28]	; (80243c0 <FZ3387_writeStructuredPacket+0xbc>)
 80243a4:	891b      	ldrh	r3, [r3, #8]
 80243a6:	429a      	cmp	r2, r3
 80243a8:	d3e7      	bcc.n	802437a <FZ3387_writeStructuredPacket+0x76>
    }

    FZ3387_SERIAL_WRITE_U16(sum);
 80243aa:	88fb      	ldrh	r3, [r7, #6]
 80243ac:	4618      	mov	r0, r3
 80243ae:	f7ff ff94 	bl	80242da <FZ3387_SERIAL_WRITE_U16>

    _DelayMS(250);
 80243b2:	20fa      	movs	r0, #250	; 0xfa
 80243b4:	f01b f982 	bl	803f6bc <_DelayMS>
}
 80243b8:	bf00      	nop
 80243ba:	3708      	adds	r7, #8
 80243bc:	46bd      	mov	sp, r7
 80243be:	bd80      	pop	{r7, pc}
 80243c0:	200083c0 	.word	0x200083c0

080243c4 <FZ3387_getStructuredPacket>:
 @param   timeout how many milliseconds we're willing to wait
 @returns <code>FINGERPRINT_OK</code> on success
 @returns <code>FINGERPRINT_TIMEOUT</code> or <code>FINGERPRINT_BADPACKET</code> on failure
 */
/**************************************************************************/
uint8_t FZ3387_getStructuredPacket(void) {
 80243c4:	b480      	push	{r7}
 80243c6:	b083      	sub	sp, #12
 80243c8:	af00      	add	r7, sp, #0
    uint8_t byte;
    uint16_t idx = 0;
 80243ca:	2300      	movs	r3, #0
 80243cc:	80fb      	strh	r3, [r7, #6]

    while (1) {
        byte = FINGER_UART_RX[idx];
 80243ce:	88fb      	ldrh	r3, [r7, #6]
 80243d0:	4a36      	ldr	r2, [pc, #216]	; (80244ac <FZ3387_getStructuredPacket+0xe8>)
 80243d2:	5cd3      	ldrb	r3, [r2, r3]
 80243d4:	717b      	strb	r3, [r7, #5]

        switch (idx) {
 80243d6:	88fb      	ldrh	r3, [r7, #6]
 80243d8:	2b08      	cmp	r3, #8
 80243da:	d84c      	bhi.n	8024476 <FZ3387_getStructuredPacket+0xb2>
 80243dc:	a201      	add	r2, pc, #4	; (adr r2, 80243e4 <FZ3387_getStructuredPacket+0x20>)
 80243de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80243e2:	bf00      	nop
 80243e4:	08024409 	.word	0x08024409
 80243e8:	08024421 	.word	0x08024421
 80243ec:	08024441 	.word	0x08024441
 80243f0:	08024441 	.word	0x08024441
 80243f4:	08024441 	.word	0x08024441
 80243f8:	08024441 	.word	0x08024441
 80243fc:	0802444f 	.word	0x0802444f
 8024400:	08024457 	.word	0x08024457
 8024404:	08024465 	.word	0x08024465
            case 0:
                if (byte != (FINGERPRINT_STARTCODE >> 8)) {
 8024408:	797b      	ldrb	r3, [r7, #5]
 802440a:	2bef      	cmp	r3, #239	; 0xef
 802440c:	d001      	beq.n	8024412 <FZ3387_getStructuredPacket+0x4e>
                    // continue;
                    return FINGERPRINT_BADPACKET;
 802440e:	23fe      	movs	r3, #254	; 0xfe
 8024410:	e046      	b.n	80244a0 <FZ3387_getStructuredPacket+0xdc>
                }
                packet.start_code = (uint16_t) byte << 8;
 8024412:	797b      	ldrb	r3, [r7, #5]
 8024414:	b29b      	uxth	r3, r3
 8024416:	021b      	lsls	r3, r3, #8
 8024418:	b29a      	uxth	r2, r3
 802441a:	4b25      	ldr	r3, [pc, #148]	; (80244b0 <FZ3387_getStructuredPacket+0xec>)
 802441c:	801a      	strh	r2, [r3, #0]
                break;
 802441e:	e03b      	b.n	8024498 <FZ3387_getStructuredPacket+0xd4>
            case 1:
                packet.start_code |= byte;
 8024420:	4b23      	ldr	r3, [pc, #140]	; (80244b0 <FZ3387_getStructuredPacket+0xec>)
 8024422:	881a      	ldrh	r2, [r3, #0]
 8024424:	797b      	ldrb	r3, [r7, #5]
 8024426:	b29b      	uxth	r3, r3
 8024428:	4313      	orrs	r3, r2
 802442a:	b29a      	uxth	r2, r3
 802442c:	4b20      	ldr	r3, [pc, #128]	; (80244b0 <FZ3387_getStructuredPacket+0xec>)
 802442e:	801a      	strh	r2, [r3, #0]
                if (packet.start_code != FINGERPRINT_STARTCODE) {
 8024430:	4b1f      	ldr	r3, [pc, #124]	; (80244b0 <FZ3387_getStructuredPacket+0xec>)
 8024432:	881b      	ldrh	r3, [r3, #0]
 8024434:	f64e 7201 	movw	r2, #61185	; 0xef01
 8024438:	4293      	cmp	r3, r2
 802443a:	d02a      	beq.n	8024492 <FZ3387_getStructuredPacket+0xce>
                    return FINGERPRINT_BADPACKET;
 802443c:	23fe      	movs	r3, #254	; 0xfe
 802443e:	e02f      	b.n	80244a0 <FZ3387_getStructuredPacket+0xdc>
                break;
            case 2:
                case 3:
                case 4:
                case 5:
                packet.address[idx - 2] = byte;
 8024440:	88fb      	ldrh	r3, [r7, #6]
 8024442:	3b02      	subs	r3, #2
 8024444:	4a1a      	ldr	r2, [pc, #104]	; (80244b0 <FZ3387_getStructuredPacket+0xec>)
 8024446:	4413      	add	r3, r2
 8024448:	797a      	ldrb	r2, [r7, #5]
 802444a:	709a      	strb	r2, [r3, #2]
                break;
 802444c:	e024      	b.n	8024498 <FZ3387_getStructuredPacket+0xd4>
            case 6:
                packet.type = byte;
 802444e:	4a18      	ldr	r2, [pc, #96]	; (80244b0 <FZ3387_getStructuredPacket+0xec>)
 8024450:	797b      	ldrb	r3, [r7, #5]
 8024452:	7193      	strb	r3, [r2, #6]
                break;
 8024454:	e020      	b.n	8024498 <FZ3387_getStructuredPacket+0xd4>
            case 7:
                packet.length = (uint16_t) byte << 8;
 8024456:	797b      	ldrb	r3, [r7, #5]
 8024458:	b29b      	uxth	r3, r3
 802445a:	021b      	lsls	r3, r3, #8
 802445c:	b29a      	uxth	r2, r3
 802445e:	4b14      	ldr	r3, [pc, #80]	; (80244b0 <FZ3387_getStructuredPacket+0xec>)
 8024460:	811a      	strh	r2, [r3, #8]
                break;
 8024462:	e019      	b.n	8024498 <FZ3387_getStructuredPacket+0xd4>
            case 8:
                packet.length |= byte;
 8024464:	4b12      	ldr	r3, [pc, #72]	; (80244b0 <FZ3387_getStructuredPacket+0xec>)
 8024466:	891a      	ldrh	r2, [r3, #8]
 8024468:	797b      	ldrb	r3, [r7, #5]
 802446a:	b29b      	uxth	r3, r3
 802446c:	4313      	orrs	r3, r2
 802446e:	b29a      	uxth	r2, r3
 8024470:	4b0f      	ldr	r3, [pc, #60]	; (80244b0 <FZ3387_getStructuredPacket+0xec>)
 8024472:	811a      	strh	r2, [r3, #8]
                break;
 8024474:	e010      	b.n	8024498 <FZ3387_getStructuredPacket+0xd4>
            default:
                packet.data[idx - 9] = byte;
 8024476:	88fb      	ldrh	r3, [r7, #6]
 8024478:	3b09      	subs	r3, #9
 802447a:	4a0d      	ldr	r2, [pc, #52]	; (80244b0 <FZ3387_getStructuredPacket+0xec>)
 802447c:	4413      	add	r3, r2
 802447e:	797a      	ldrb	r2, [r7, #5]
 8024480:	729a      	strb	r2, [r3, #10]
                if ((idx - 8) == packet.length) {
 8024482:	88fb      	ldrh	r3, [r7, #6]
 8024484:	3b08      	subs	r3, #8
 8024486:	4a0a      	ldr	r2, [pc, #40]	; (80244b0 <FZ3387_getStructuredPacket+0xec>)
 8024488:	8912      	ldrh	r2, [r2, #8]
 802448a:	4293      	cmp	r3, r2
 802448c:	d103      	bne.n	8024496 <FZ3387_getStructuredPacket+0xd2>
                    return FINGERPRINT_OK;
 802448e:	2300      	movs	r3, #0
 8024490:	e006      	b.n	80244a0 <FZ3387_getStructuredPacket+0xdc>
                break;
 8024492:	bf00      	nop
 8024494:	e000      	b.n	8024498 <FZ3387_getStructuredPacket+0xd4>
                }
                break;
 8024496:	bf00      	nop
        }
        idx++;
 8024498:	88fb      	ldrh	r3, [r7, #6]
 802449a:	3301      	adds	r3, #1
 802449c:	80fb      	strh	r3, [r7, #6]
        byte = FINGER_UART_RX[idx];
 802449e:	e796      	b.n	80243ce <FZ3387_getStructuredPacket+0xa>
    }

    // Shouldn't get here so...
    return FINGERPRINT_BADPACKET;
}
 80244a0:	4618      	mov	r0, r3
 80244a2:	370c      	adds	r7, #12
 80244a4:	46bd      	mov	sp, r7
 80244a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80244aa:	4770      	bx	lr
 80244ac:	20008064 	.word	0x20008064
 80244b0:	200083c0 	.word	0x200083c0

080244b4 <FZ3387_SendCmdPacket>:
/**************************************************************************/
/*!
 @brief Send command packet
 */
/**************************************************************************/
uint8_t FZ3387_SendCmdPacket(uint8_t *data, uint8_t size) {
 80244b4:	b580      	push	{r7, lr}
 80244b6:	b082      	sub	sp, #8
 80244b8:	af00      	add	r7, sp, #0
 80244ba:	6078      	str	r0, [r7, #4]
 80244bc:	460b      	mov	r3, r1
 80244be:	70fb      	strb	r3, [r7, #3]
    FZ3387_setPacket(FINGERPRINT_COMMANDPACKET, size, data);
 80244c0:	78fb      	ldrb	r3, [r7, #3]
 80244c2:	b29b      	uxth	r3, r3
 80244c4:	687a      	ldr	r2, [r7, #4]
 80244c6:	4619      	mov	r1, r3
 80244c8:	2001      	movs	r0, #1
 80244ca:	f000 f817 	bl	80244fc <FZ3387_setPacket>
    FZ3387_writeStructuredPacket();
 80244ce:	f7ff ff19 	bl	8024304 <FZ3387_writeStructuredPacket>

    if (FZ3387_getStructuredPacket() != FINGERPRINT_OK) {
 80244d2:	f7ff ff77 	bl	80243c4 <FZ3387_getStructuredPacket>
 80244d6:	4603      	mov	r3, r0
 80244d8:	2b00      	cmp	r3, #0
 80244da:	d001      	beq.n	80244e0 <FZ3387_SendCmdPacket+0x2c>
        return FINGERPRINT_PACKETRECIEVEERR;
 80244dc:	2301      	movs	r3, #1
 80244de:	e007      	b.n	80244f0 <FZ3387_SendCmdPacket+0x3c>
    }
    if (packet.type != FINGERPRINT_ACKPACKET) {
 80244e0:	4b05      	ldr	r3, [pc, #20]	; (80244f8 <FZ3387_SendCmdPacket+0x44>)
 80244e2:	799b      	ldrb	r3, [r3, #6]
 80244e4:	2b07      	cmp	r3, #7
 80244e6:	d001      	beq.n	80244ec <FZ3387_SendCmdPacket+0x38>
        return FINGERPRINT_PACKETRECIEVEERR;
 80244e8:	2301      	movs	r3, #1
 80244ea:	e001      	b.n	80244f0 <FZ3387_SendCmdPacket+0x3c>
    }
    return packet.data[0];
 80244ec:	4b02      	ldr	r3, [pc, #8]	; (80244f8 <FZ3387_SendCmdPacket+0x44>)
 80244ee:	7a9b      	ldrb	r3, [r3, #10]
}
 80244f0:	4618      	mov	r0, r3
 80244f2:	3708      	adds	r7, #8
 80244f4:	46bd      	mov	sp, r7
 80244f6:	bd80      	pop	{r7, pc}
 80244f8:	200083c0 	.word	0x200083c0

080244fc <FZ3387_setPacket>:
/*!
 @brief Packet conversion
 */
/**************************************************************************/

void FZ3387_setPacket(uint8_t type, uint16_t length, uint8_t *data) {
 80244fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80244fe:	b083      	sub	sp, #12
 8024500:	af00      	add	r7, sp, #0
 8024502:	4603      	mov	r3, r0
 8024504:	603a      	str	r2, [r7, #0]
 8024506:	71fb      	strb	r3, [r7, #7]
 8024508:	460b      	mov	r3, r1
 802450a:	80bb      	strh	r3, [r7, #4]
    packet.start_code = FINGERPRINT_STARTCODE;
 802450c:	4b1c      	ldr	r3, [pc, #112]	; (8024580 <FZ3387_setPacket+0x84>)
 802450e:	f64e 7201 	movw	r2, #61185	; 0xef01
 8024512:	801a      	strh	r2, [r3, #0]
    packet.type = type;
 8024514:	4a1a      	ldr	r2, [pc, #104]	; (8024580 <FZ3387_setPacket+0x84>)
 8024516:	79fb      	ldrb	r3, [r7, #7]
 8024518:	7193      	strb	r3, [r2, #6]
    packet.length = length;
 802451a:	4a19      	ldr	r2, [pc, #100]	; (8024580 <FZ3387_setPacket+0x84>)
 802451c:	88bb      	ldrh	r3, [r7, #4]
 802451e:	8113      	strh	r3, [r2, #8]
    packet.address[0] = (uint8_t) (FINGERPRINT_ADDRESS >> 24);
 8024520:	4b17      	ldr	r3, [pc, #92]	; (8024580 <FZ3387_setPacket+0x84>)
 8024522:	22ff      	movs	r2, #255	; 0xff
 8024524:	709a      	strb	r2, [r3, #2]
    packet.address[1] = (uint8_t) (FINGERPRINT_ADDRESS >> 16);
 8024526:	4b16      	ldr	r3, [pc, #88]	; (8024580 <FZ3387_setPacket+0x84>)
 8024528:	22ff      	movs	r2, #255	; 0xff
 802452a:	70da      	strb	r2, [r3, #3]
    packet.address[2] = (uint8_t) (FINGERPRINT_ADDRESS >> 8);
 802452c:	4b14      	ldr	r3, [pc, #80]	; (8024580 <FZ3387_setPacket+0x84>)
 802452e:	22ff      	movs	r2, #255	; 0xff
 8024530:	711a      	strb	r2, [r3, #4]
    packet.address[3] = (uint8_t) (FINGERPRINT_ADDRESS & 0xFF);
 8024532:	4b13      	ldr	r3, [pc, #76]	; (8024580 <FZ3387_setPacket+0x84>)
 8024534:	22ff      	movs	r2, #255	; 0xff
 8024536:	715a      	strb	r2, [r3, #5]

    if (length < 64)
 8024538:	88bb      	ldrh	r3, [r7, #4]
 802453a:	2b3f      	cmp	r3, #63	; 0x3f
 802453c:	d806      	bhi.n	802454c <FZ3387_setPacket+0x50>
        memcpy(packet.data, data, length);
 802453e:	88bb      	ldrh	r3, [r7, #4]
 8024540:	461a      	mov	r2, r3
 8024542:	6839      	ldr	r1, [r7, #0]
 8024544:	480f      	ldr	r0, [pc, #60]	; (8024584 <FZ3387_setPacket+0x88>)
 8024546:	f01b f9d8 	bl	803f8fa <memcpy>
    else
        memcpy(packet.data, data, 64);
}
 802454a:	e015      	b.n	8024578 <FZ3387_setPacket+0x7c>
        memcpy(packet.data, data, 64);
 802454c:	4a0c      	ldr	r2, [pc, #48]	; (8024580 <FZ3387_setPacket+0x84>)
 802454e:	683b      	ldr	r3, [r7, #0]
 8024550:	f102 000a 	add.w	r0, r2, #10
 8024554:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8024558:	4602      	mov	r2, r0
 802455a:	4619      	mov	r1, r3
 802455c:	f8d1 c000 	ldr.w	ip, [r1]
 8024560:	684e      	ldr	r6, [r1, #4]
 8024562:	688d      	ldr	r5, [r1, #8]
 8024564:	68c9      	ldr	r1, [r1, #12]
 8024566:	f8c2 c000 	str.w	ip, [r2]
 802456a:	6056      	str	r6, [r2, #4]
 802456c:	6095      	str	r5, [r2, #8]
 802456e:	60d1      	str	r1, [r2, #12]
 8024570:	3310      	adds	r3, #16
 8024572:	3010      	adds	r0, #16
 8024574:	42a3      	cmp	r3, r4
 8024576:	d1ef      	bne.n	8024558 <FZ3387_setPacket+0x5c>
}
 8024578:	bf00      	nop
 802457a:	370c      	adds	r7, #12
 802457c:	46bd      	mov	sp, r7
 802457e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024580:	200083c0 	.word	0x200083c0
 8024584:	200083ca 	.word	0x200083ca

08024588 <FZ3387_verifyPassword>:
/*!
 @brief  Verifies the sensors' access password (default password is 0x0000000). A good way to also check if the sensors is active and responding
 @returns True if password is correct
 */
/**************************************************************************/
uint8_t FZ3387_verifyPassword(void) {
 8024588:	b580      	push	{r7, lr}
 802458a:	af00      	add	r7, sp, #0
    return FZ3387_checkPassword() == FINGERPRINT_OK;
 802458c:	f000 f808 	bl	80245a0 <FZ3387_checkPassword>
 8024590:	4603      	mov	r3, r0
 8024592:	2b00      	cmp	r3, #0
 8024594:	bf0c      	ite	eq
 8024596:	2301      	moveq	r3, #1
 8024598:	2300      	movne	r3, #0
 802459a:	b2db      	uxtb	r3, r3
}
 802459c:	4618      	mov	r0, r3
 802459e:	bd80      	pop	{r7, pc}

080245a0 <FZ3387_checkPassword>:

uint8_t FZ3387_checkPassword(void) {
 80245a0:	b580      	push	{r7, lr}
 80245a2:	b082      	sub	sp, #8
 80245a4:	af00      	add	r7, sp, #0
    uint8_t data[] = {
 80245a6:	2313      	movs	r3, #19
 80245a8:	703b      	strb	r3, [r7, #0]
 80245aa:	2300      	movs	r3, #0
 80245ac:	707b      	strb	r3, [r7, #1]
 80245ae:	2300      	movs	r3, #0
 80245b0:	70bb      	strb	r3, [r7, #2]
 80245b2:	2300      	movs	r3, #0
 80245b4:	70fb      	strb	r3, [r7, #3]
 80245b6:	2300      	movs	r3, #0
 80245b8:	713b      	strb	r3, [r7, #4]
            (uint8_t) (FINGERPRINT_PASSWORD >> 16),
            (uint8_t) (FINGERPRINT_PASSWORD >> 8),
            (uint8_t) (FINGERPRINT_PASSWORD & 0xFF)
    };

    FZ3387_SendCmdPacket(data, sizeof(data));
 80245ba:	463b      	mov	r3, r7
 80245bc:	2105      	movs	r1, #5
 80245be:	4618      	mov	r0, r3
 80245c0:	f7ff ff78 	bl	80244b4 <FZ3387_SendCmdPacket>
    if (packet.data[0] == FINGERPRINT_OK)
 80245c4:	4b05      	ldr	r3, [pc, #20]	; (80245dc <FZ3387_checkPassword+0x3c>)
 80245c6:	7a9b      	ldrb	r3, [r3, #10]
 80245c8:	2b00      	cmp	r3, #0
 80245ca:	d101      	bne.n	80245d0 <FZ3387_checkPassword+0x30>
        return FINGERPRINT_OK;
 80245cc:	2300      	movs	r3, #0
 80245ce:	e000      	b.n	80245d2 <FZ3387_checkPassword+0x32>
    else
        return FINGERPRINT_PACKETRECIEVEERR;
 80245d0:	2301      	movs	r3, #1
}
 80245d2:	4618      	mov	r0, r3
 80245d4:	3708      	adds	r7, #8
 80245d6:	46bd      	mov	sp, r7
 80245d8:	bd80      	pop	{r7, pc}
 80245da:	bf00      	nop
 80245dc:	200083c0 	.word	0x200083c0

080245e0 <FZ3387_getImage>:
 @returns <code>FINGERPRINT_NOFINGER</code> if no finger detected
 @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
 @returns <code>FINGERPRINT_IMAGEFAIL</code> on imaging error
 */
/**************************************************************************/
uint8_t FZ3387_getImage(void) {
 80245e0:	b580      	push	{r7, lr}
 80245e2:	b082      	sub	sp, #8
 80245e4:	af00      	add	r7, sp, #0
    uint8_t data[] = {
 80245e6:	2301      	movs	r3, #1
 80245e8:	713b      	strb	r3, [r7, #4]
    FINGERPRINT_GETIMAGE
    };
    return FZ3387_SendCmdPacket(data, sizeof(data));
 80245ea:	1d3b      	adds	r3, r7, #4
 80245ec:	2101      	movs	r1, #1
 80245ee:	4618      	mov	r0, r3
 80245f0:	f7ff ff60 	bl	80244b4 <FZ3387_SendCmdPacket>
 80245f4:	4603      	mov	r3, r0
}
 80245f6:	4618      	mov	r0, r3
 80245f8:	3708      	adds	r7, #8
 80245fa:	46bd      	mov	sp, r7
 80245fc:	bd80      	pop	{r7, pc}

080245fe <FZ3387_image2Tz>:
 @returns <code>FINGERPRINT_IMAGEMESS</code> if image is too messy
 @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
 @returns <code>FINGERPRINT_FEATUREFAIL</code> on failure to identify fingerprint features
 @returns <code>FINGERPRINT_INVALIDIMAGE</code> on failure to identify fingerprint features
 */
uint8_t FZ3387_image2Tz(uint8_t slot) {
 80245fe:	b580      	push	{r7, lr}
 8024600:	b084      	sub	sp, #16
 8024602:	af00      	add	r7, sp, #0
 8024604:	4603      	mov	r3, r0
 8024606:	71fb      	strb	r3, [r7, #7]
    uint8_t data[] = {
 8024608:	2302      	movs	r3, #2
 802460a:	733b      	strb	r3, [r7, #12]
 802460c:	79fb      	ldrb	r3, [r7, #7]
 802460e:	737b      	strb	r3, [r7, #13]
    FINGERPRINT_IMAGE2TZ,
            slot
    };
    return FZ3387_SendCmdPacket(data, sizeof(data));
 8024610:	f107 030c 	add.w	r3, r7, #12
 8024614:	2102      	movs	r1, #2
 8024616:	4618      	mov	r0, r3
 8024618:	f7ff ff4c 	bl	80244b4 <FZ3387_SendCmdPacket>
 802461c:	4603      	mov	r3, r0
}
 802461e:	4618      	mov	r0, r3
 8024620:	3710      	adds	r7, #16
 8024622:	46bd      	mov	sp, r7
 8024624:	bd80      	pop	{r7, pc}

08024626 <FZ3387_createModel>:
 @brief   Ask the sensor to take two print feature template and create a model
 @returns <code>FINGERPRINT_OK</code> on success
 @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
 @returns <code>FINGERPRINT_ENROLLMISMATCH</code> on mismatch of fingerprints
 */
uint8_t FZ3387_createModel(void) {
 8024626:	b580      	push	{r7, lr}
 8024628:	b082      	sub	sp, #8
 802462a:	af00      	add	r7, sp, #0
    uint8_t data[] = {
 802462c:	2305      	movs	r3, #5
 802462e:	713b      	strb	r3, [r7, #4]
    FINGERPRINT_REGMODEL
    };
    return FZ3387_SendCmdPacket(data, sizeof(data));
 8024630:	1d3b      	adds	r3, r7, #4
 8024632:	2101      	movs	r1, #1
 8024634:	4618      	mov	r0, r3
 8024636:	f7ff ff3d 	bl	80244b4 <FZ3387_SendCmdPacket>
 802463a:	4603      	mov	r3, r0
}
 802463c:	4618      	mov	r0, r3
 802463e:	3708      	adds	r7, #8
 8024640:	46bd      	mov	sp, r7
 8024642:	bd80      	pop	{r7, pc}

08024644 <FZ3387_storeModel>:
 @returns <code>FINGERPRINT_OK</code> on success
 @returns <code>FINGERPRINT_BADLOCATION</code> if the location is invalid
 @returns <code>FINGERPRINT_FLASHERR</code> if the model couldn't be written to flash memory
 @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
 */
uint8_t FZ3387_storeModel(uint16_t location) {
 8024644:	b580      	push	{r7, lr}
 8024646:	b084      	sub	sp, #16
 8024648:	af00      	add	r7, sp, #0
 802464a:	4603      	mov	r3, r0
 802464c:	80fb      	strh	r3, [r7, #6]
    uint8_t data[] = {
 802464e:	2306      	movs	r3, #6
 8024650:	733b      	strb	r3, [r7, #12]
 8024652:	2301      	movs	r3, #1
 8024654:	737b      	strb	r3, [r7, #13]
    FINGERPRINT_STORE,
            0x01,
            (uint8_t) (location >> 8),
 8024656:	88fb      	ldrh	r3, [r7, #6]
 8024658:	0a1b      	lsrs	r3, r3, #8
 802465a:	b29b      	uxth	r3, r3
 802465c:	b2db      	uxtb	r3, r3
    uint8_t data[] = {
 802465e:	73bb      	strb	r3, [r7, #14]
            (uint8_t) (location & 0xFF)
 8024660:	88fb      	ldrh	r3, [r7, #6]
 8024662:	b2db      	uxtb	r3, r3
    uint8_t data[] = {
 8024664:	73fb      	strb	r3, [r7, #15]
    };
    return FZ3387_SendCmdPacket(data, sizeof(data));
 8024666:	f107 030c 	add.w	r3, r7, #12
 802466a:	2104      	movs	r1, #4
 802466c:	4618      	mov	r0, r3
 802466e:	f7ff ff21 	bl	80244b4 <FZ3387_SendCmdPacket>
 8024672:	4603      	mov	r3, r0
}
 8024674:	4618      	mov	r0, r3
 8024676:	3710      	adds	r7, #16
 8024678:	46bd      	mov	sp, r7
 802467a:	bd80      	pop	{r7, pc}

0802467c <FZ3387_deleteModel>:
 @returns <code>FINGERPRINT_OK</code> on success
 @returns <code>FINGERPRINT_BADLOCATION</code> if the location is invalid
 @returns <code>FINGERPRINT_FLASHERR</code> if the model couldn't be written to flash memory
 @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
 */
uint8_t FZ3387_deleteModel(uint16_t location) {
 802467c:	b580      	push	{r7, lr}
 802467e:	b084      	sub	sp, #16
 8024680:	af00      	add	r7, sp, #0
 8024682:	4603      	mov	r3, r0
 8024684:	80fb      	strh	r3, [r7, #6]
    uint8_t data[] = {
 8024686:	230c      	movs	r3, #12
 8024688:	723b      	strb	r3, [r7, #8]
    FINGERPRINT_DELETE,
            (uint8_t) (location >> 8),
 802468a:	88fb      	ldrh	r3, [r7, #6]
 802468c:	0a1b      	lsrs	r3, r3, #8
 802468e:	b29b      	uxth	r3, r3
 8024690:	b2db      	uxtb	r3, r3
    uint8_t data[] = {
 8024692:	727b      	strb	r3, [r7, #9]
            (uint8_t) (location & 0xFF),
 8024694:	88fb      	ldrh	r3, [r7, #6]
 8024696:	b2db      	uxtb	r3, r3
    uint8_t data[] = {
 8024698:	72bb      	strb	r3, [r7, #10]
 802469a:	2300      	movs	r3, #0
 802469c:	72fb      	strb	r3, [r7, #11]
 802469e:	2301      	movs	r3, #1
 80246a0:	733b      	strb	r3, [r7, #12]
            0x00,
            0x01
    };
    return FZ3387_SendCmdPacket(data, sizeof(data));
 80246a2:	f107 0308 	add.w	r3, r7, #8
 80246a6:	2105      	movs	r1, #5
 80246a8:	4618      	mov	r0, r3
 80246aa:	f7ff ff03 	bl	80244b4 <FZ3387_SendCmdPacket>
 80246ae:	4603      	mov	r3, r0
}
 80246b0:	4618      	mov	r0, r3
 80246b2:	3710      	adds	r7, #16
 80246b4:	46bd      	mov	sp, r7
 80246b6:	bd80      	pop	{r7, pc}

080246b8 <FZ3387_emptyDatabase>:
 @returns <code>FINGERPRINT_OK</code> on success
 @returns <code>FINGERPRINT_BADLOCATION</code> if the location is invalid
 @returns <code>FINGERPRINT_FLASHERR</code> if the model couldn't be written to flash memory
 @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
 */
uint8_t FZ3387_emptyDatabase(void) {
 80246b8:	b580      	push	{r7, lr}
 80246ba:	b082      	sub	sp, #8
 80246bc:	af00      	add	r7, sp, #0
    uint8_t data[] = {
 80246be:	230d      	movs	r3, #13
 80246c0:	713b      	strb	r3, [r7, #4]
    FINGERPRINT_EMPTY
    };
    return FZ3387_SendCmdPacket(data, sizeof(data));
 80246c2:	1d3b      	adds	r3, r7, #4
 80246c4:	2101      	movs	r1, #1
 80246c6:	4618      	mov	r0, r3
 80246c8:	f7ff fef4 	bl	80244b4 <FZ3387_SendCmdPacket>
 80246cc:	4603      	mov	r3, r0
}
 80246ce:	4618      	mov	r0, r3
 80246d0:	3708      	adds	r7, #8
 80246d2:	46bd      	mov	sp, r7
 80246d4:	bd80      	pop	{r7, pc}
	...

080246d8 <FZ3387_fingerFastSearch>:
 @returns <code>FINGERPRINT_OK</code> on fingerprint match success
 @returns <code>FINGERPRINT_NOTFOUND</code> no match made
 @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
 */
/**************************************************************************/
uint8_t FZ3387_fingerFastSearch(void) {
 80246d8:	b580      	push	{r7, lr}
 80246da:	b082      	sub	sp, #8
 80246dc:	af00      	add	r7, sp, #0
    uint8_t data[] = {
 80246de:	4a21      	ldr	r2, [pc, #132]	; (8024764 <FZ3387_fingerFastSearch+0x8c>)
 80246e0:	463b      	mov	r3, r7
 80246e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80246e6:	6018      	str	r0, [r3, #0]
 80246e8:	3304      	adds	r3, #4
 80246ea:	8019      	strh	r1, [r3, #0]
            0x00,
            0x00,
            0xA3
    };
    // high speed search of slot #1 starting at page 0x0000 and page #0x00A3
    FZ3387_SendCmdPacket(data, sizeof(data));
 80246ec:	463b      	mov	r3, r7
 80246ee:	2106      	movs	r1, #6
 80246f0:	4618      	mov	r0, r3
 80246f2:	f7ff fedf 	bl	80244b4 <FZ3387_SendCmdPacket>
    finger.id = 0xFFFF;
 80246f6:	4b1c      	ldr	r3, [pc, #112]	; (8024768 <FZ3387_fingerFastSearch+0x90>)
 80246f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80246fc:	801a      	strh	r2, [r3, #0]
    finger.confidence = 0xFFFF;
 80246fe:	4b1a      	ldr	r3, [pc, #104]	; (8024768 <FZ3387_fingerFastSearch+0x90>)
 8024700:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8024704:	805a      	strh	r2, [r3, #2]

    finger.id = packet.data[1];
 8024706:	4b19      	ldr	r3, [pc, #100]	; (802476c <FZ3387_fingerFastSearch+0x94>)
 8024708:	7adb      	ldrb	r3, [r3, #11]
 802470a:	b29a      	uxth	r2, r3
 802470c:	4b16      	ldr	r3, [pc, #88]	; (8024768 <FZ3387_fingerFastSearch+0x90>)
 802470e:	801a      	strh	r2, [r3, #0]
    finger.id <<= 8;
 8024710:	4b15      	ldr	r3, [pc, #84]	; (8024768 <FZ3387_fingerFastSearch+0x90>)
 8024712:	881b      	ldrh	r3, [r3, #0]
 8024714:	021b      	lsls	r3, r3, #8
 8024716:	b29a      	uxth	r2, r3
 8024718:	4b13      	ldr	r3, [pc, #76]	; (8024768 <FZ3387_fingerFastSearch+0x90>)
 802471a:	801a      	strh	r2, [r3, #0]
    finger.id |= packet.data[2];
 802471c:	4b12      	ldr	r3, [pc, #72]	; (8024768 <FZ3387_fingerFastSearch+0x90>)
 802471e:	881a      	ldrh	r2, [r3, #0]
 8024720:	4b12      	ldr	r3, [pc, #72]	; (802476c <FZ3387_fingerFastSearch+0x94>)
 8024722:	7b1b      	ldrb	r3, [r3, #12]
 8024724:	b29b      	uxth	r3, r3
 8024726:	4313      	orrs	r3, r2
 8024728:	b29a      	uxth	r2, r3
 802472a:	4b0f      	ldr	r3, [pc, #60]	; (8024768 <FZ3387_fingerFastSearch+0x90>)
 802472c:	801a      	strh	r2, [r3, #0]

    finger.confidence = packet.data[3];
 802472e:	4b0f      	ldr	r3, [pc, #60]	; (802476c <FZ3387_fingerFastSearch+0x94>)
 8024730:	7b5b      	ldrb	r3, [r3, #13]
 8024732:	b29a      	uxth	r2, r3
 8024734:	4b0c      	ldr	r3, [pc, #48]	; (8024768 <FZ3387_fingerFastSearch+0x90>)
 8024736:	805a      	strh	r2, [r3, #2]
    finger.confidence <<= 8;
 8024738:	4b0b      	ldr	r3, [pc, #44]	; (8024768 <FZ3387_fingerFastSearch+0x90>)
 802473a:	885b      	ldrh	r3, [r3, #2]
 802473c:	021b      	lsls	r3, r3, #8
 802473e:	b29a      	uxth	r2, r3
 8024740:	4b09      	ldr	r3, [pc, #36]	; (8024768 <FZ3387_fingerFastSearch+0x90>)
 8024742:	805a      	strh	r2, [r3, #2]
    finger.confidence |= packet.data[4];
 8024744:	4b08      	ldr	r3, [pc, #32]	; (8024768 <FZ3387_fingerFastSearch+0x90>)
 8024746:	885a      	ldrh	r2, [r3, #2]
 8024748:	4b08      	ldr	r3, [pc, #32]	; (802476c <FZ3387_fingerFastSearch+0x94>)
 802474a:	7b9b      	ldrb	r3, [r3, #14]
 802474c:	b29b      	uxth	r3, r3
 802474e:	4313      	orrs	r3, r2
 8024750:	b29a      	uxth	r2, r3
 8024752:	4b05      	ldr	r3, [pc, #20]	; (8024768 <FZ3387_fingerFastSearch+0x90>)
 8024754:	805a      	strh	r2, [r3, #2]

    return packet.data[0];
 8024756:	4b05      	ldr	r3, [pc, #20]	; (802476c <FZ3387_fingerFastSearch+0x94>)
 8024758:	7a9b      	ldrb	r3, [r3, #10]
}
 802475a:	4618      	mov	r0, r3
 802475c:	3708      	adds	r7, #8
 802475e:	46bd      	mov	sp, r7
 8024760:	bd80      	pop	{r7, pc}
 8024762:	bf00      	nop
 8024764:	08043404 	.word	0x08043404
 8024768:	2000840c 	.word	0x2000840c
 802476c:	200083c0 	.word	0x200083c0

08024770 <FZ3387_getTemplateCount>:
 @brief   Ask the sensor for the number of templates stored in memory. The number is stored in <b>fingerTemplateCount</b> on success.
 @returns <code>FINGERPRINT_OK</code> on success
 @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
 */
/**************************************************************************/
uint8_t FZ3387_getTemplateCount(void) {
 8024770:	b580      	push	{r7, lr}
 8024772:	b082      	sub	sp, #8
 8024774:	af00      	add	r7, sp, #0
    uint8_t data[] = {
 8024776:	231d      	movs	r3, #29
 8024778:	713b      	strb	r3, [r7, #4]
    FINGERPRINT_TEMPLATECOUNT
    };
    FZ3387_SendCmdPacket(data, sizeof(data));
 802477a:	1d3b      	adds	r3, r7, #4
 802477c:	2101      	movs	r1, #1
 802477e:	4618      	mov	r0, r3
 8024780:	f7ff fe98 	bl	80244b4 <FZ3387_SendCmdPacket>

    finger.templateCount = packet.data[1];
 8024784:	4b0c      	ldr	r3, [pc, #48]	; (80247b8 <FZ3387_getTemplateCount+0x48>)
 8024786:	7adb      	ldrb	r3, [r3, #11]
 8024788:	b29a      	uxth	r2, r3
 802478a:	4b0c      	ldr	r3, [pc, #48]	; (80247bc <FZ3387_getTemplateCount+0x4c>)
 802478c:	809a      	strh	r2, [r3, #4]
    finger.templateCount <<= 8;
 802478e:	4b0b      	ldr	r3, [pc, #44]	; (80247bc <FZ3387_getTemplateCount+0x4c>)
 8024790:	889b      	ldrh	r3, [r3, #4]
 8024792:	021b      	lsls	r3, r3, #8
 8024794:	b29a      	uxth	r2, r3
 8024796:	4b09      	ldr	r3, [pc, #36]	; (80247bc <FZ3387_getTemplateCount+0x4c>)
 8024798:	809a      	strh	r2, [r3, #4]
    finger.templateCount |= packet.data[2];
 802479a:	4b08      	ldr	r3, [pc, #32]	; (80247bc <FZ3387_getTemplateCount+0x4c>)
 802479c:	889a      	ldrh	r2, [r3, #4]
 802479e:	4b06      	ldr	r3, [pc, #24]	; (80247b8 <FZ3387_getTemplateCount+0x48>)
 80247a0:	7b1b      	ldrb	r3, [r3, #12]
 80247a2:	b29b      	uxth	r3, r3
 80247a4:	4313      	orrs	r3, r2
 80247a6:	b29a      	uxth	r2, r3
 80247a8:	4b04      	ldr	r3, [pc, #16]	; (80247bc <FZ3387_getTemplateCount+0x4c>)
 80247aa:	809a      	strh	r2, [r3, #4]

    return packet.data[0];
 80247ac:	4b02      	ldr	r3, [pc, #8]	; (80247b8 <FZ3387_getTemplateCount+0x48>)
 80247ae:	7a9b      	ldrb	r3, [r3, #10]
}
 80247b0:	4618      	mov	r0, r3
 80247b2:	3708      	adds	r7, #8
 80247b4:	46bd      	mov	sp, r7
 80247b6:	bd80      	pop	{r7, pc}
 80247b8:	200083c0 	.word	0x200083c0
 80247bc:	2000840c 	.word	0x2000840c

080247c0 <MPU6050_Init>:
#define MPU6050_ACCE_SENS_8			((float) 4096)
#define MPU6050_ACCE_SENS_16		((float) 2048)

/* Public functions implementation ---------------------------------------------*/
MPU6050_Result MPU6050_Init(I2C_HandleTypeDef *I2Cx, MPU6050 *DataStruct, MPU6050_Device DeviceNumber,
		MPU6050_Accelerometer AccelerometerSensitivity, MPU6050_Gyroscope GyroscopeSensitivity) {
 80247c0:	b580      	push	{r7, lr}
 80247c2:	b08c      	sub	sp, #48	; 0x30
 80247c4:	af04      	add	r7, sp, #16
 80247c6:	60f8      	str	r0, [r7, #12]
 80247c8:	60b9      	str	r1, [r7, #8]
 80247ca:	4611      	mov	r1, r2
 80247cc:	461a      	mov	r2, r3
 80247ce:	460b      	mov	r3, r1
 80247d0:	71fb      	strb	r3, [r7, #7]
 80247d2:	4613      	mov	r3, r2
 80247d4:	71bb      	strb	r3, [r7, #6]
	I2C_HandleTypeDef *Handle = I2Cx;
 80247d6:	68fb      	ldr	r3, [r7, #12]
 80247d8:	61fb      	str	r3, [r7, #28]
	uint8_t d[2], temp;

	/* Format I2C address */
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t) DeviceNumber;
 80247da:	79fb      	ldrb	r3, [r7, #7]
 80247dc:	f063 032f 	orn	r3, r3, #47	; 0x2f
 80247e0:	b2da      	uxtb	r2, r3
 80247e2:	68bb      	ldr	r3, [r7, #8]
 80247e4:	701a      	strb	r2, [r3, #0]
	uint8_t address = DataStruct->Address;
 80247e6:	68bb      	ldr	r3, [r7, #8]
 80247e8:	781b      	ldrb	r3, [r3, #0]
 80247ea:	76fb      	strb	r3, [r7, #27]

	/* Check if device is connected */
	if (HAL_I2C_IsDeviceReady(Handle, address, 2, 5) != HAL_OK) {
 80247ec:	7efb      	ldrb	r3, [r7, #27]
 80247ee:	b299      	uxth	r1, r3
 80247f0:	2305      	movs	r3, #5
 80247f2:	2202      	movs	r2, #2
 80247f4:	69f8      	ldr	r0, [r7, #28]
 80247f6:	f00c fa4d 	bl	8030c94 <HAL_I2C_IsDeviceReady>
 80247fa:	4603      	mov	r3, r0
 80247fc:	2b00      	cmp	r3, #0
 80247fe:	d001      	beq.n	8024804 <MPU6050_Init+0x44>
		return MPU6050_Result_Error;
 8024800:	2301      	movs	r3, #1
 8024802:	e03f      	b.n	8024884 <MPU6050_Init+0xc4>
	}

	/* Check who am I */
	//------------------
	/* Send address */
	if (HAL_I2C_Mem_Read(Handle, address, MPU6050_WHO_AM_I, 1, &temp, 1, 1000) != HAL_OK) {
 8024804:	7efb      	ldrb	r3, [r7, #27]
 8024806:	b299      	uxth	r1, r3
 8024808:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802480c:	9302      	str	r3, [sp, #8]
 802480e:	2301      	movs	r3, #1
 8024810:	9301      	str	r3, [sp, #4]
 8024812:	f107 0317 	add.w	r3, r7, #23
 8024816:	9300      	str	r3, [sp, #0]
 8024818:	2301      	movs	r3, #1
 802481a:	2275      	movs	r2, #117	; 0x75
 802481c:	69f8      	ldr	r0, [r7, #28]
 802481e:	f00c f813 	bl	8030848 <HAL_I2C_Mem_Read>
 8024822:	4603      	mov	r3, r0
 8024824:	2b00      	cmp	r3, #0
 8024826:	d001      	beq.n	802482c <MPU6050_Init+0x6c>
		return MPU6050_Result_Error;
 8024828:	2301      	movs	r3, #1
 802482a:	e02b      	b.n	8024884 <MPU6050_Init+0xc4>
	}

	/* Checking */
	if (temp != MPU6050_I_AM) {
 802482c:	7dfb      	ldrb	r3, [r7, #23]
 802482e:	2b68      	cmp	r3, #104	; 0x68
 8024830:	d001      	beq.n	8024836 <MPU6050_Init+0x76>
		/* Return error */
		return MPU6050_Result_DeviceInvalid;
 8024832:	2303      	movs	r3, #3
 8024834:	e026      	b.n	8024884 <MPU6050_Init+0xc4>
	//------------------

	/* Wakeup MPU6050 */
	//------------------
	/* Format array to send */
	d[0] = MPU6050_PWR_MGMT_1;
 8024836:	236b      	movs	r3, #107	; 0x6b
 8024838:	763b      	strb	r3, [r7, #24]
	d[1] = 0x01;
 802483a:	2301      	movs	r3, #1
 802483c:	767b      	strb	r3, [r7, #25]

	/* Try to transmit via I2C */
	if (HAL_I2C_Master_Transmit(Handle, address, d, 2, 1000) != HAL_OK) {
 802483e:	7efb      	ldrb	r3, [r7, #27]
 8024840:	b299      	uxth	r1, r3
 8024842:	f107 0218 	add.w	r2, r7, #24
 8024846:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802484a:	9300      	str	r3, [sp, #0]
 802484c:	2302      	movs	r3, #2
 802484e:	69f8      	ldr	r0, [r7, #28]
 8024850:	f00b fe02 	bl	8030458 <HAL_I2C_Master_Transmit>
 8024854:	4603      	mov	r3, r0
 8024856:	2b00      	cmp	r3, #0
 8024858:	d001      	beq.n	802485e <MPU6050_Init+0x9e>
		return MPU6050_Result_Error;
 802485a:	2301      	movs	r3, #1
 802485c:	e012      	b.n	8024884 <MPU6050_Init+0xc4>
	}
	//------------------

	/* Set sample rate to 1kHz */
	MPU6050_SetDataRate(I2Cx, DataStruct, MPU6050_DataRate_8KHz);
 802485e:	2200      	movs	r2, #0
 8024860:	68b9      	ldr	r1, [r7, #8]
 8024862:	68f8      	ldr	r0, [r7, #12]
 8024864:	f000 f812 	bl	802488c <MPU6050_SetDataRate>

	/* Config accelerometer */
	MPU6050_SetAccelerometer(I2Cx, DataStruct, AccelerometerSensitivity);
 8024868:	79bb      	ldrb	r3, [r7, #6]
 802486a:	461a      	mov	r2, r3
 802486c:	68b9      	ldr	r1, [r7, #8]
 802486e:	68f8      	ldr	r0, [r7, #12]
 8024870:	f000 f830 	bl	80248d4 <MPU6050_SetAccelerometer>

	/* Config Gyroscope */
	MPU6050_SetGyroscope(I2Cx, DataStruct, GyroscopeSensitivity);
 8024874:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8024878:	461a      	mov	r2, r3
 802487a:	68b9      	ldr	r1, [r7, #8]
 802487c:	68f8      	ldr	r0, [r7, #12]
 802487e:	f000 f88f 	bl	80249a0 <MPU6050_SetGyroscope>

	/* Return OK */
	return MPU6050_Result_Ok;
 8024882:	2300      	movs	r3, #0
}
 8024884:	4618      	mov	r0, r3
 8024886:	3720      	adds	r7, #32
 8024888:	46bd      	mov	sp, r7
 802488a:	bd80      	pop	{r7, pc}

0802488c <MPU6050_SetDataRate>:

MPU6050_Result MPU6050_SetDataRate(I2C_HandleTypeDef *I2Cx, MPU6050 *DataStruct, uint8_t rate) {
 802488c:	b580      	push	{r7, lr}
 802488e:	b08a      	sub	sp, #40	; 0x28
 8024890:	af04      	add	r7, sp, #16
 8024892:	60f8      	str	r0, [r7, #12]
 8024894:	60b9      	str	r1, [r7, #8]
 8024896:	4613      	mov	r3, r2
 8024898:	71fb      	strb	r3, [r7, #7]
	I2C_HandleTypeDef *Handle = I2Cx;
 802489a:	68fb      	ldr	r3, [r7, #12]
 802489c:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 802489e:	68bb      	ldr	r3, [r7, #8]
 80248a0:	781b      	ldrb	r3, [r3, #0]
 80248a2:	74fb      	strb	r3, [r7, #19]
	/* Format array to send */
	//  d[0] = MPU6050_SMPLRT_DIV;
	//  d[1] = rate;
	/* Set data sample rate */
	while (HAL_I2C_Mem_Write(Handle, address, MPU6050_SMPLRT_DIV, 1, &rate, 1, 1000) != HAL_OK)
 80248a4:	bf00      	nop
 80248a6:	7cfb      	ldrb	r3, [r7, #19]
 80248a8:	b299      	uxth	r1, r3
 80248aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80248ae:	9302      	str	r3, [sp, #8]
 80248b0:	2301      	movs	r3, #1
 80248b2:	9301      	str	r3, [sp, #4]
 80248b4:	1dfb      	adds	r3, r7, #7
 80248b6:	9300      	str	r3, [sp, #0]
 80248b8:	2301      	movs	r3, #1
 80248ba:	2219      	movs	r2, #25
 80248bc:	6978      	ldr	r0, [r7, #20]
 80248be:	f00b fec9 	bl	8030654 <HAL_I2C_Mem_Write>
 80248c2:	4603      	mov	r3, r0
 80248c4:	2b00      	cmp	r3, #0
 80248c6:	d1ee      	bne.n	80248a6 <MPU6050_SetDataRate+0x1a>
	//  if (HAL_I2C_Master_Transmit(Handle, (uint16_t) address, (uint8_t*) d, 2, 1000) != HAL_OK) {
	//    return MPU6050_Result_Error;
	//  }

	/* Return OK */
	return MPU6050_Result_Ok;
 80248c8:	2300      	movs	r3, #0
}
 80248ca:	4618      	mov	r0, r3
 80248cc:	3718      	adds	r7, #24
 80248ce:	46bd      	mov	sp, r7
 80248d0:	bd80      	pop	{r7, pc}
	...

080248d4 <MPU6050_SetAccelerometer>:

MPU6050_Result MPU6050_SetAccelerometer(I2C_HandleTypeDef *I2Cx, MPU6050 *DataStruct,
		MPU6050_Accelerometer AccelerometerSensitivity) {
 80248d4:	b580      	push	{r7, lr}
 80248d6:	b08a      	sub	sp, #40	; 0x28
 80248d8:	af04      	add	r7, sp, #16
 80248da:	60f8      	str	r0, [r7, #12]
 80248dc:	60b9      	str	r1, [r7, #8]
 80248de:	4613      	mov	r3, r2
 80248e0:	71fb      	strb	r3, [r7, #7]
	I2C_HandleTypeDef *Handle = I2Cx;
 80248e2:	68fb      	ldr	r3, [r7, #12]
 80248e4:	617b      	str	r3, [r7, #20]
	uint8_t data, address = DataStruct->Address;
 80248e6:	68bb      	ldr	r3, [r7, #8]
 80248e8:	781b      	ldrb	r3, [r3, #0]
 80248ea:	74fb      	strb	r3, [r7, #19]

	/* Config accelerometer */
	while (HAL_I2C_Mem_Read(Handle, address, MPU6050_ACCEL_CONFIG, 1, &data, 1, 1000) != HAL_OK)
 80248ec:	bf00      	nop
 80248ee:	7cfb      	ldrb	r3, [r7, #19]
 80248f0:	b299      	uxth	r1, r3
 80248f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80248f6:	9302      	str	r3, [sp, #8]
 80248f8:	2301      	movs	r3, #1
 80248fa:	9301      	str	r3, [sp, #4]
 80248fc:	f107 0312 	add.w	r3, r7, #18
 8024900:	9300      	str	r3, [sp, #0]
 8024902:	2301      	movs	r3, #1
 8024904:	221c      	movs	r2, #28
 8024906:	6978      	ldr	r0, [r7, #20]
 8024908:	f00b ff9e 	bl	8030848 <HAL_I2C_Mem_Read>
 802490c:	4603      	mov	r3, r0
 802490e:	2b00      	cmp	r3, #0
 8024910:	d1ed      	bne.n	80248ee <MPU6050_SetAccelerometer+0x1a>
	//  while (HAL_I2C_Master_Receive(Handle, (uint16_t) address, &data, 1, 1000) != HAL_OK)
	//    ;
	//  /*{
	//   return MPU6050_Result_Error;
	//   }*/
	data = (data & 0xE7) | (uint8_t) AccelerometerSensitivity << 3;
 8024912:	7cbb      	ldrb	r3, [r7, #18]
 8024914:	b25b      	sxtb	r3, r3
 8024916:	f023 0318 	bic.w	r3, r3, #24
 802491a:	b25a      	sxtb	r2, r3
 802491c:	79fb      	ldrb	r3, [r7, #7]
 802491e:	00db      	lsls	r3, r3, #3
 8024920:	b25b      	sxtb	r3, r3
 8024922:	4313      	orrs	r3, r2
 8024924:	b25b      	sxtb	r3, r3
 8024926:	b2db      	uxtb	r3, r3
 8024928:	74bb      	strb	r3, [r7, #18]
	while (HAL_I2C_Mem_Write(Handle, address, MPU6050_ACCEL_CONFIG, 1, &data, 1, 1000) != HAL_OK)
 802492a:	bf00      	nop
 802492c:	7cfb      	ldrb	r3, [r7, #19]
 802492e:	b299      	uxth	r1, r3
 8024930:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8024934:	9302      	str	r3, [sp, #8]
 8024936:	2301      	movs	r3, #1
 8024938:	9301      	str	r3, [sp, #4]
 802493a:	f107 0312 	add.w	r3, r7, #18
 802493e:	9300      	str	r3, [sp, #0]
 8024940:	2301      	movs	r3, #1
 8024942:	221c      	movs	r2, #28
 8024944:	6978      	ldr	r0, [r7, #20]
 8024946:	f00b fe85 	bl	8030654 <HAL_I2C_Mem_Write>
 802494a:	4603      	mov	r3, r0
 802494c:	2b00      	cmp	r3, #0
 802494e:	d1ed      	bne.n	802492c <MPU6050_SetAccelerometer+0x58>
	//  /*{
	//   return MPU6050_Result_Error;
	//   }*/

	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (AccelerometerSensitivity) {
 8024950:	79fb      	ldrb	r3, [r7, #7]
 8024952:	2b03      	cmp	r3, #3
 8024954:	d81e      	bhi.n	8024994 <MPU6050_SetAccelerometer+0xc0>
 8024956:	a201      	add	r2, pc, #4	; (adr r2, 802495c <MPU6050_SetAccelerometer+0x88>)
 8024958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802495c:	0802496d 	.word	0x0802496d
 8024960:	08024977 	.word	0x08024977
 8024964:	08024981 	.word	0x08024981
 8024968:	0802498b 	.word	0x0802498b
		case MPU6050_Accelerometer_2G:
			DataStruct->Acce_Mult = (float) 1 / MPU6050_ACCE_SENS_2;
 802496c:	68bb      	ldr	r3, [r7, #8]
 802496e:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8024972:	609a      	str	r2, [r3, #8]
			break;
 8024974:	e00f      	b.n	8024996 <MPU6050_SetAccelerometer+0xc2>
		case MPU6050_Accelerometer_4G:
			DataStruct->Acce_Mult = (float) 1 / MPU6050_ACCE_SENS_4;
 8024976:	68bb      	ldr	r3, [r7, #8]
 8024978:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 802497c:	609a      	str	r2, [r3, #8]
			break;
 802497e:	e00a      	b.n	8024996 <MPU6050_SetAccelerometer+0xc2>
		case MPU6050_Accelerometer_8G:
			DataStruct->Acce_Mult = (float) 1 / MPU6050_ACCE_SENS_8;
 8024980:	68bb      	ldr	r3, [r7, #8]
 8024982:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8024986:	609a      	str	r2, [r3, #8]
			break;
 8024988:	e005      	b.n	8024996 <MPU6050_SetAccelerometer+0xc2>
		case MPU6050_Accelerometer_16G:
			DataStruct->Acce_Mult = (float) 1 / MPU6050_ACCE_SENS_16;
 802498a:	68bb      	ldr	r3, [r7, #8]
 802498c:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8024990:	609a      	str	r2, [r3, #8]
			break;
 8024992:	e000      	b.n	8024996 <MPU6050_SetAccelerometer+0xc2>
		default:
			break;
 8024994:	bf00      	nop
	}

	/* Return OK */
	return MPU6050_Result_Ok;
 8024996:	2300      	movs	r3, #0
}
 8024998:	4618      	mov	r0, r3
 802499a:	3718      	adds	r7, #24
 802499c:	46bd      	mov	sp, r7
 802499e:	bd80      	pop	{r7, pc}

080249a0 <MPU6050_SetGyroscope>:

MPU6050_Result MPU6050_SetGyroscope(I2C_HandleTypeDef *I2Cx, MPU6050 *DataStruct,
		MPU6050_Gyroscope GyroscopeSensitivity) {
 80249a0:	b580      	push	{r7, lr}
 80249a2:	b08a      	sub	sp, #40	; 0x28
 80249a4:	af04      	add	r7, sp, #16
 80249a6:	60f8      	str	r0, [r7, #12]
 80249a8:	60b9      	str	r1, [r7, #8]
 80249aa:	4613      	mov	r3, r2
 80249ac:	71fb      	strb	r3, [r7, #7]
	I2C_HandleTypeDef *Handle = I2Cx;
 80249ae:	68fb      	ldr	r3, [r7, #12]
 80249b0:	617b      	str	r3, [r7, #20]
	uint8_t data, address = DataStruct->Address;
 80249b2:	68bb      	ldr	r3, [r7, #8]
 80249b4:	781b      	ldrb	r3, [r3, #0]
 80249b6:	74fb      	strb	r3, [r7, #19]

	/* Config gyroscope */
	while (HAL_I2C_Mem_Read(Handle, address, MPU6050_GYRO_CONFIG, 1, &data, 1, 1000) != HAL_OK)
 80249b8:	bf00      	nop
 80249ba:	7cfb      	ldrb	r3, [r7, #19]
 80249bc:	b299      	uxth	r1, r3
 80249be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80249c2:	9302      	str	r3, [sp, #8]
 80249c4:	2301      	movs	r3, #1
 80249c6:	9301      	str	r3, [sp, #4]
 80249c8:	f107 0312 	add.w	r3, r7, #18
 80249cc:	9300      	str	r3, [sp, #0]
 80249ce:	2301      	movs	r3, #1
 80249d0:	221b      	movs	r2, #27
 80249d2:	6978      	ldr	r0, [r7, #20]
 80249d4:	f00b ff38 	bl	8030848 <HAL_I2C_Mem_Read>
 80249d8:	4603      	mov	r3, r0
 80249da:	2b00      	cmp	r3, #0
 80249dc:	d1ed      	bne.n	80249ba <MPU6050_SetGyroscope+0x1a>
	//  while (HAL_I2C_Master_Receive(Handle, (uint16_t) address, &data, 1, 1000) != HAL_OK)
	//    ;
	//  /*{
	//   return MPU6050_Result_Error;
	//   }*/
	data = (data & 0xE7) | (uint8_t) GyroscopeSensitivity << 3;
 80249de:	7cbb      	ldrb	r3, [r7, #18]
 80249e0:	b25b      	sxtb	r3, r3
 80249e2:	f023 0318 	bic.w	r3, r3, #24
 80249e6:	b25a      	sxtb	r2, r3
 80249e8:	79fb      	ldrb	r3, [r7, #7]
 80249ea:	00db      	lsls	r3, r3, #3
 80249ec:	b25b      	sxtb	r3, r3
 80249ee:	4313      	orrs	r3, r2
 80249f0:	b25b      	sxtb	r3, r3
 80249f2:	b2db      	uxtb	r3, r3
 80249f4:	74bb      	strb	r3, [r7, #18]
	while (HAL_I2C_Mem_Write(Handle, address, MPU6050_GYRO_CONFIG, 1, &data, 1, 1000) != HAL_OK)
 80249f6:	bf00      	nop
 80249f8:	7cfb      	ldrb	r3, [r7, #19]
 80249fa:	b299      	uxth	r1, r3
 80249fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8024a00:	9302      	str	r3, [sp, #8]
 8024a02:	2301      	movs	r3, #1
 8024a04:	9301      	str	r3, [sp, #4]
 8024a06:	f107 0312 	add.w	r3, r7, #18
 8024a0a:	9300      	str	r3, [sp, #0]
 8024a0c:	2301      	movs	r3, #1
 8024a0e:	221b      	movs	r2, #27
 8024a10:	6978      	ldr	r0, [r7, #20]
 8024a12:	f00b fe1f 	bl	8030654 <HAL_I2C_Mem_Write>
 8024a16:	4603      	mov	r3, r0
 8024a18:	2b00      	cmp	r3, #0
 8024a1a:	d1ed      	bne.n	80249f8 <MPU6050_SetGyroscope+0x58>
	//    ;
	//  /*{
	//   return MPU6050_Result_Error;
	//   }*/

	switch (GyroscopeSensitivity) {
 8024a1c:	79fb      	ldrb	r3, [r7, #7]
 8024a1e:	2b03      	cmp	r3, #3
 8024a20:	d81a      	bhi.n	8024a58 <MPU6050_SetGyroscope+0xb8>
 8024a22:	a201      	add	r2, pc, #4	; (adr r2, 8024a28 <MPU6050_SetGyroscope+0x88>)
 8024a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024a28:	08024a39 	.word	0x08024a39
 8024a2c:	08024a41 	.word	0x08024a41
 8024a30:	08024a49 	.word	0x08024a49
 8024a34:	08024a51 	.word	0x08024a51
		case MPU6050_Gyroscope_250s:
			DataStruct->Gyro_Mult = (float) 1 / MPU6050_GYRO_SENS_250;
 8024a38:	68bb      	ldr	r3, [r7, #8]
 8024a3a:	4a0a      	ldr	r2, [pc, #40]	; (8024a64 <MPU6050_SetGyroscope+0xc4>)
 8024a3c:	605a      	str	r2, [r3, #4]
			break;
 8024a3e:	e00c      	b.n	8024a5a <MPU6050_SetGyroscope+0xba>
		case MPU6050_Gyroscope_500s:
			DataStruct->Gyro_Mult = (float) 1 / MPU6050_GYRO_SENS_500;
 8024a40:	68bb      	ldr	r3, [r7, #8]
 8024a42:	4a09      	ldr	r2, [pc, #36]	; (8024a68 <MPU6050_SetGyroscope+0xc8>)
 8024a44:	605a      	str	r2, [r3, #4]
			break;
 8024a46:	e008      	b.n	8024a5a <MPU6050_SetGyroscope+0xba>
		case MPU6050_Gyroscope_1000s:
			DataStruct->Gyro_Mult = (float) 1 / MPU6050_GYRO_SENS_1000;
 8024a48:	68bb      	ldr	r3, [r7, #8]
 8024a4a:	4a08      	ldr	r2, [pc, #32]	; (8024a6c <MPU6050_SetGyroscope+0xcc>)
 8024a4c:	605a      	str	r2, [r3, #4]
			break;
 8024a4e:	e004      	b.n	8024a5a <MPU6050_SetGyroscope+0xba>
		case MPU6050_Gyroscope_2000s:
			DataStruct->Gyro_Mult = (float) 1 / MPU6050_GYRO_SENS_2000;
 8024a50:	68bb      	ldr	r3, [r7, #8]
 8024a52:	4a07      	ldr	r2, [pc, #28]	; (8024a70 <MPU6050_SetGyroscope+0xd0>)
 8024a54:	605a      	str	r2, [r3, #4]
			break;
 8024a56:	e000      	b.n	8024a5a <MPU6050_SetGyroscope+0xba>
		default:
			break;
 8024a58:	bf00      	nop
	}
	/* Return OK */
	return MPU6050_Result_Ok;
 8024a5a:	2300      	movs	r3, #0
}
 8024a5c:	4618      	mov	r0, r3
 8024a5e:	3718      	adds	r7, #24
 8024a60:	46bd      	mov	sp, r7
 8024a62:	bd80      	pop	{r7, pc}
 8024a64:	3bfa232d 	.word	0x3bfa232d
 8024a68:	3c7a232d 	.word	0x3c7a232d
 8024a6c:	3cf9c190 	.word	0x3cf9c190
 8024a70:	3d79c190 	.word	0x3d79c190

08024a74 <MPU6050_ReadAll>:
	DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);

	/* Return OK */
	return MPU6050_Result_Ok;
}
MPU6050_Result MPU6050_ReadAll(I2C_HandleTypeDef *I2Cx, MPU6050 *DataStruct) {
 8024a74:	b580      	push	{r7, lr}
 8024a76:	b08c      	sub	sp, #48	; 0x30
 8024a78:	af04      	add	r7, sp, #16
 8024a7a:	6078      	str	r0, [r7, #4]
 8024a7c:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef *Handle = I2Cx;
 8024a7e:	687b      	ldr	r3, [r7, #4]
 8024a80:	61fb      	str	r3, [r7, #28]
	uint8_t data[14], address = DataStruct->Address;
 8024a82:	683b      	ldr	r3, [r7, #0]
 8024a84:	781b      	ldrb	r3, [r3, #0]
 8024a86:	76fb      	strb	r3, [r7, #27]
	int16_t temp;

	/* Read full raw data, 14bytes */
	while (HAL_I2C_Mem_Read(Handle, address, MPU6050_ACCEL_XOUT_H, 1, data, 14, 1000) != HAL_OK)
 8024a88:	bf00      	nop
 8024a8a:	7efb      	ldrb	r3, [r7, #27]
 8024a8c:	b299      	uxth	r1, r3
 8024a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8024a92:	9302      	str	r3, [sp, #8]
 8024a94:	230e      	movs	r3, #14
 8024a96:	9301      	str	r3, [sp, #4]
 8024a98:	f107 0308 	add.w	r3, r7, #8
 8024a9c:	9300      	str	r3, [sp, #0]
 8024a9e:	2301      	movs	r3, #1
 8024aa0:	223b      	movs	r2, #59	; 0x3b
 8024aa2:	69f8      	ldr	r0, [r7, #28]
 8024aa4:	f00b fed0 	bl	8030848 <HAL_I2C_Mem_Read>
 8024aa8:	4603      	mov	r3, r0
 8024aaa:	2b00      	cmp	r3, #0
 8024aac:	d1ed      	bne.n	8024a8a <MPU6050_ReadAll+0x16>
	//
	//  while (HAL_I2C_Master_Receive(Handle, (uint16_t) address, data, 14, 1000) != HAL_OK)
	//    ;

	/* Format accelerometer data */
	DataStruct->Accelerometer_X = (int16_t) (data[0] << 8 | data[1]);
 8024aae:	7a3b      	ldrb	r3, [r7, #8]
 8024ab0:	021b      	lsls	r3, r3, #8
 8024ab2:	b21a      	sxth	r2, r3
 8024ab4:	7a7b      	ldrb	r3, [r7, #9]
 8024ab6:	b21b      	sxth	r3, r3
 8024ab8:	4313      	orrs	r3, r2
 8024aba:	b21a      	sxth	r2, r3
 8024abc:	683b      	ldr	r3, [r7, #0]
 8024abe:	819a      	strh	r2, [r3, #12]
	DataStruct->Accelerometer_Y = (int16_t) (data[2] << 8 | data[3]);
 8024ac0:	7abb      	ldrb	r3, [r7, #10]
 8024ac2:	021b      	lsls	r3, r3, #8
 8024ac4:	b21a      	sxth	r2, r3
 8024ac6:	7afb      	ldrb	r3, [r7, #11]
 8024ac8:	b21b      	sxth	r3, r3
 8024aca:	4313      	orrs	r3, r2
 8024acc:	b21a      	sxth	r2, r3
 8024ace:	683b      	ldr	r3, [r7, #0]
 8024ad0:	81da      	strh	r2, [r3, #14]
	DataStruct->Accelerometer_Z = (int16_t) (data[4] << 8 | data[5]);
 8024ad2:	7b3b      	ldrb	r3, [r7, #12]
 8024ad4:	021b      	lsls	r3, r3, #8
 8024ad6:	b21a      	sxth	r2, r3
 8024ad8:	7b7b      	ldrb	r3, [r7, #13]
 8024ada:	b21b      	sxth	r3, r3
 8024adc:	4313      	orrs	r3, r2
 8024ade:	b21a      	sxth	r2, r3
 8024ae0:	683b      	ldr	r3, [r7, #0]
 8024ae2:	821a      	strh	r2, [r3, #16]

	/* Format temperature */
	temp = (data[6] << 8 | data[7]);
 8024ae4:	7bbb      	ldrb	r3, [r7, #14]
 8024ae6:	021b      	lsls	r3, r3, #8
 8024ae8:	b21a      	sxth	r2, r3
 8024aea:	7bfb      	ldrb	r3, [r7, #15]
 8024aec:	b21b      	sxth	r3, r3
 8024aee:	4313      	orrs	r3, r2
 8024af0:	833b      	strh	r3, [r7, #24]
	DataStruct->Temperature = (float) ((float) ((int16_t) temp) / (float) 340.0 + (float) 36.53);
 8024af2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8024af6:	ee07 3a90 	vmov	s15, r3
 8024afa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8024afe:	eddf 6a15 	vldr	s13, [pc, #84]	; 8024b54 <MPU6050_ReadAll+0xe0>
 8024b02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8024b06:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8024b58 <MPU6050_ReadAll+0xe4>
 8024b0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8024b0e:	683b      	ldr	r3, [r7, #0]
 8024b10:	edc3 7a06 	vstr	s15, [r3, #24]

	/* Format gyroscope data */
	DataStruct->Gyroscope_X = (int16_t) (data[8] << 8 | data[9]);
 8024b14:	7c3b      	ldrb	r3, [r7, #16]
 8024b16:	021b      	lsls	r3, r3, #8
 8024b18:	b21a      	sxth	r2, r3
 8024b1a:	7c7b      	ldrb	r3, [r7, #17]
 8024b1c:	b21b      	sxth	r3, r3
 8024b1e:	4313      	orrs	r3, r2
 8024b20:	b21a      	sxth	r2, r3
 8024b22:	683b      	ldr	r3, [r7, #0]
 8024b24:	825a      	strh	r2, [r3, #18]
	DataStruct->Gyroscope_Y = (int16_t) (data[10] << 8 | data[11]);
 8024b26:	7cbb      	ldrb	r3, [r7, #18]
 8024b28:	021b      	lsls	r3, r3, #8
 8024b2a:	b21a      	sxth	r2, r3
 8024b2c:	7cfb      	ldrb	r3, [r7, #19]
 8024b2e:	b21b      	sxth	r3, r3
 8024b30:	4313      	orrs	r3, r2
 8024b32:	b21a      	sxth	r2, r3
 8024b34:	683b      	ldr	r3, [r7, #0]
 8024b36:	829a      	strh	r2, [r3, #20]
	DataStruct->Gyroscope_Z = (int16_t) (data[12] << 8 | data[13]);
 8024b38:	7d3b      	ldrb	r3, [r7, #20]
 8024b3a:	021b      	lsls	r3, r3, #8
 8024b3c:	b21a      	sxth	r2, r3
 8024b3e:	7d7b      	ldrb	r3, [r7, #21]
 8024b40:	b21b      	sxth	r3, r3
 8024b42:	4313      	orrs	r3, r2
 8024b44:	b21a      	sxth	r2, r3
 8024b46:	683b      	ldr	r3, [r7, #0]
 8024b48:	82da      	strh	r2, [r3, #22]

	/* Return OK */
	return MPU6050_Result_Ok;
 8024b4a:	2300      	movs	r3, #0
}
 8024b4c:	4618      	mov	r0, r3
 8024b4e:	3720      	adds	r7, #32
 8024b50:	46bd      	mov	sp, r7
 8024b52:	bd80      	pop	{r7, pc}
 8024b54:	43aa0000 	.word	0x43aa0000
 8024b58:	42121eb8 	.word	0x42121eb8

08024b5c <nmea_init>:
/**
 * @brief           Init NMEA handle
 * @param[in]       gh: NMEA handle structure
 * @return          `1` on success, `0` otherwise
 */
uint8_t nmea_init(nmea_t *nh) {
 8024b5c:	b580      	push	{r7, lr}
 8024b5e:	b082      	sub	sp, #8
 8024b60:	af00      	add	r7, sp, #0
 8024b62:	6078      	str	r0, [r7, #4]
    memset(nh, 0x00, sizeof(*nh)); /* Reset structure */
 8024b64:	2274      	movs	r2, #116	; 0x74
 8024b66:	2100      	movs	r1, #0
 8024b68:	6878      	ldr	r0, [r7, #4]
 8024b6a:	f01a fed1 	bl	803f910 <memset>
    return 1;
 8024b6e:	2301      	movs	r3, #1
}
 8024b70:	4618      	mov	r0, r3
 8024b72:	3708      	adds	r7, #8
 8024b74:	46bd      	mov	sp, r7
 8024b76:	bd80      	pop	{r7, pc}

08024b78 <nmea_process>:
 * @param[in]       gh: NMEA handle structure
 * @param[in]       data: Received data
 * @param[in]       len: Number of bytes to process
 * @return          `1` on success, `0` otherwise
 */
uint8_t nmea_process(nmea_t *nh, const void *data, size_t len) {
 8024b78:	b580      	push	{r7, lr}
 8024b7a:	b086      	sub	sp, #24
 8024b7c:	af00      	add	r7, sp, #0
 8024b7e:	60f8      	str	r0, [r7, #12]
 8024b80:	60b9      	str	r1, [r7, #8]
 8024b82:	607a      	str	r2, [r7, #4]
    const uint8_t *d = data;
 8024b84:	68bb      	ldr	r3, [r7, #8]
 8024b86:	617b      	str	r3, [r7, #20]

    while (len--) { /* Process all bytes */
 8024b88:	e0a4      	b.n	8024cd4 <nmea_process+0x15c>
        if (*d == '$') { /* Check for beginning of NMEA line */
 8024b8a:	697b      	ldr	r3, [r7, #20]
 8024b8c:	781b      	ldrb	r3, [r3, #0]
 8024b8e:	2b24      	cmp	r3, #36	; 0x24
 8024b90:	d125      	bne.n	8024bde <nmea_process+0x66>
            memset(&nh->p, 0x00, sizeof(nh->p));/* Reset private memory */
 8024b92:	68fb      	ldr	r3, [r7, #12]
 8024b94:	3344      	adds	r3, #68	; 0x44
 8024b96:	2230      	movs	r2, #48	; 0x30
 8024b98:	2100      	movs	r1, #0
 8024b9a:	4618      	mov	r0, r3
 8024b9c:	f01a feb8 	bl	803f910 <memset>
            TERM_ADD(nh, *d); /* Add character to term */
 8024ba0:	68fb      	ldr	r3, [r7, #12]
 8024ba2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8024ba6:	2b0b      	cmp	r3, #11
 8024ba8:	f200 8091 	bhi.w	8024cce <nmea_process+0x156>
 8024bac:	68fb      	ldr	r3, [r7, #12]
 8024bae:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8024bb2:	1c5a      	adds	r2, r3, #1
 8024bb4:	b2d1      	uxtb	r1, r2
 8024bb6:	68fa      	ldr	r2, [r7, #12]
 8024bb8:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
 8024bbc:	4619      	mov	r1, r3
 8024bbe:	697b      	ldr	r3, [r7, #20]
 8024bc0:	781a      	ldrb	r2, [r3, #0]
 8024bc2:	68fb      	ldr	r3, [r7, #12]
 8024bc4:	440b      	add	r3, r1
 8024bc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8024bca:	68fb      	ldr	r3, [r7, #12]
 8024bcc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8024bd0:	461a      	mov	r2, r3
 8024bd2:	68fb      	ldr	r3, [r7, #12]
 8024bd4:	4413      	add	r3, r2
 8024bd6:	2200      	movs	r2, #0
 8024bd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8024bdc:	e077      	b.n	8024cce <nmea_process+0x156>
        } else if (*d == ',') { /* Term separator character */
 8024bde:	697b      	ldr	r3, [r7, #20]
 8024be0:	781b      	ldrb	r3, [r3, #0]
 8024be2:	2b2c      	cmp	r3, #44	; 0x2c
 8024be4:	d11d      	bne.n	8024c22 <nmea_process+0xaa>
            parse_term(nh); /* Parse term we have currently in memory */
 8024be6:	68f8      	ldr	r0, [r7, #12]
 8024be8:	f000 f9e8 	bl	8024fbc <parse_term>
            CRC_ADD(nh, *d); /* Add character to CRC computation */
 8024bec:	68fb      	ldr	r3, [r7, #12]
 8024bee:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8024bf2:	697b      	ldr	r3, [r7, #20]
 8024bf4:	781b      	ldrb	r3, [r3, #0]
 8024bf6:	4053      	eors	r3, r2
 8024bf8:	b2da      	uxtb	r2, r3
 8024bfa:	68fb      	ldr	r3, [r7, #12]
 8024bfc:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
            TERM_NEXT(nh); /* Start with next term */
 8024c00:	68fb      	ldr	r3, [r7, #12]
 8024c02:	2200      	movs	r2, #0
 8024c04:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8024c08:	68fb      	ldr	r3, [r7, #12]
 8024c0a:	2200      	movs	r2, #0
 8024c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8024c10:	68fb      	ldr	r3, [r7, #12]
 8024c12:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8024c16:	3301      	adds	r3, #1
 8024c18:	b2da      	uxtb	r2, r3
 8024c1a:	68fb      	ldr	r3, [r7, #12]
 8024c1c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8024c20:	e055      	b.n	8024cce <nmea_process+0x156>
        } else if (*d == '*') { /* Start indicates end of data for CRC computation */
 8024c22:	697b      	ldr	r3, [r7, #20]
 8024c24:	781b      	ldrb	r3, [r3, #0]
 8024c26:	2b2a      	cmp	r3, #42	; 0x2a
 8024c28:	d117      	bne.n	8024c5a <nmea_process+0xe2>
            parse_term(nh); /* Parse term we have currently in memory */
 8024c2a:	68f8      	ldr	r0, [r7, #12]
 8024c2c:	f000 f9c6 	bl	8024fbc <parse_term>
            nh->p.star = 1; /* STAR detected */
 8024c30:	68fb      	ldr	r3, [r7, #12]
 8024c32:	2201      	movs	r2, #1
 8024c34:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            TERM_NEXT(nh); /* Start with next term */
 8024c38:	68fb      	ldr	r3, [r7, #12]
 8024c3a:	2200      	movs	r2, #0
 8024c3c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8024c40:	68fb      	ldr	r3, [r7, #12]
 8024c42:	2200      	movs	r2, #0
 8024c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8024c48:	68fb      	ldr	r3, [r7, #12]
 8024c4a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8024c4e:	3301      	adds	r3, #1
 8024c50:	b2da      	uxtb	r2, r3
 8024c52:	68fb      	ldr	r3, [r7, #12]
 8024c54:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8024c58:	e039      	b.n	8024cce <nmea_process+0x156>
        } else if (*d == '\r') {
 8024c5a:	697b      	ldr	r3, [r7, #20]
 8024c5c:	781b      	ldrb	r3, [r3, #0]
 8024c5e:	2b0d      	cmp	r3, #13
 8024c60:	d109      	bne.n	8024c76 <nmea_process+0xfe>
            if (check_crc(nh)) { /* Check for CRC result */
 8024c62:	68f8      	ldr	r0, [r7, #12]
 8024c64:	f000 fc40 	bl	80254e8 <check_crc>
 8024c68:	4603      	mov	r3, r0
 8024c6a:	2b00      	cmp	r3, #0
 8024c6c:	d02f      	beq.n	8024cce <nmea_process+0x156>
                /* CRC is OK, in theory we can copy data from statements to user data */
                copy_from_tmp_memory(nh); /* Copy memory from temporary to user memory */
 8024c6e:	68f8      	ldr	r0, [r7, #12]
 8024c70:	f000 fcc3 	bl	80255fa <copy_from_tmp_memory>
 8024c74:	e02b      	b.n	8024cce <nmea_process+0x156>
            }
        } else {
            if (!nh->p.star) { /* Add to CRC only if star not yet detected */
 8024c76:	68fb      	ldr	r3, [r7, #12]
 8024c78:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8024c7c:	2b00      	cmp	r3, #0
 8024c7e:	d109      	bne.n	8024c94 <nmea_process+0x11c>
                CRC_ADD(nh, *d); /* Add to CRC */
 8024c80:	68fb      	ldr	r3, [r7, #12]
 8024c82:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8024c86:	697b      	ldr	r3, [r7, #20]
 8024c88:	781b      	ldrb	r3, [r3, #0]
 8024c8a:	4053      	eors	r3, r2
 8024c8c:	b2da      	uxtb	r2, r3
 8024c8e:	68fb      	ldr	r3, [r7, #12]
 8024c90:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
            }
            TERM_ADD(nh, *d); /* Add character to term */
 8024c94:	68fb      	ldr	r3, [r7, #12]
 8024c96:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8024c9a:	2b0b      	cmp	r3, #11
 8024c9c:	d817      	bhi.n	8024cce <nmea_process+0x156>
 8024c9e:	68fb      	ldr	r3, [r7, #12]
 8024ca0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8024ca4:	1c5a      	adds	r2, r3, #1
 8024ca6:	b2d1      	uxtb	r1, r2
 8024ca8:	68fa      	ldr	r2, [r7, #12]
 8024caa:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
 8024cae:	4619      	mov	r1, r3
 8024cb0:	697b      	ldr	r3, [r7, #20]
 8024cb2:	781a      	ldrb	r2, [r3, #0]
 8024cb4:	68fb      	ldr	r3, [r7, #12]
 8024cb6:	440b      	add	r3, r1
 8024cb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8024cbc:	68fb      	ldr	r3, [r7, #12]
 8024cbe:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8024cc2:	461a      	mov	r2, r3
 8024cc4:	68fb      	ldr	r3, [r7, #12]
 8024cc6:	4413      	add	r3, r2
 8024cc8:	2200      	movs	r2, #0
 8024cca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        }
        d++; /* Process next character */
 8024cce:	697b      	ldr	r3, [r7, #20]
 8024cd0:	3301      	adds	r3, #1
 8024cd2:	617b      	str	r3, [r7, #20]
    while (len--) { /* Process all bytes */
 8024cd4:	687b      	ldr	r3, [r7, #4]
 8024cd6:	1e5a      	subs	r2, r3, #1
 8024cd8:	607a      	str	r2, [r7, #4]
 8024cda:	2b00      	cmp	r3, #0
 8024cdc:	f47f af55 	bne.w	8024b8a <nmea_process+0x12>
    }
    return 1;
 8024ce0:	2301      	movs	r3, #1
}
 8024ce2:	4618      	mov	r0, r3
 8024ce4:	3718      	adds	r7, #24
 8024ce6:	46bd      	mov	sp, r7
 8024ce8:	bd80      	pop	{r7, pc}
	...

08024cec <nmea_to_speed>:
 * @brief           Convert NMEA speed (in knots = nautical mile per hour) to different speed format
 * @param[in]       sik: Speed in knots, received from NMEA statement
 * @param[in]       ts: Target speed to convert to from knots
 * @return          Speed calculated from knots
 */
nmea_float_t nmea_to_speed(nmea_float_t sik, NMEA_SPEED ts) {
 8024cec:	b480      	push	{r7}
 8024cee:	b083      	sub	sp, #12
 8024cf0:	af00      	add	r7, sp, #0
 8024cf2:	ed87 0a01 	vstr	s0, [r7, #4]
 8024cf6:	4603      	mov	r3, r0
 8024cf8:	70fb      	strb	r3, [r7, #3]
    switch (ts) {
 8024cfa:	78fb      	ldrb	r3, [r7, #3]
 8024cfc:	2b0e      	cmp	r3, #14
 8024cfe:	f200 8086 	bhi.w	8024e0e <nmea_to_speed+0x122>
 8024d02:	a201      	add	r2, pc, #4	; (adr r2, 8024d08 <nmea_to_speed+0x1c>)
 8024d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024d08:	08024d45 	.word	0x08024d45
 8024d0c:	08024d53 	.word	0x08024d53
 8024d10:	08024d61 	.word	0x08024d61
 8024d14:	08024d6f 	.word	0x08024d6f
 8024d18:	08024d7d 	.word	0x08024d7d
 8024d1c:	08024d8b 	.word	0x08024d8b
 8024d20:	08024d99 	.word	0x08024d99
 8024d24:	08024da7 	.word	0x08024da7
 8024d28:	08024db5 	.word	0x08024db5
 8024d2c:	08024dc3 	.word	0x08024dc3
 8024d30:	08024dd1 	.word	0x08024dd1
 8024d34:	08024ddf 	.word	0x08024ddf
 8024d38:	08024ded 	.word	0x08024ded
 8024d3c:	08024dfb 	.word	0x08024dfb
 8024d40:	08024e09 	.word	0x08024e09
        case nmea_speed_kps:
            return FLT(sik * FLT(0.000514));
 8024d44:	edd7 7a01 	vldr	s15, [r7, #4]
 8024d48:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8024e20 <nmea_to_speed+0x134>
 8024d4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024d50:	e05f      	b.n	8024e12 <nmea_to_speed+0x126>
        case nmea_speed_kph:
            return FLT(sik * FLT(1.852));
 8024d52:	edd7 7a01 	vldr	s15, [r7, #4]
 8024d56:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8024e24 <nmea_to_speed+0x138>
 8024d5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024d5e:	e058      	b.n	8024e12 <nmea_to_speed+0x126>
        case nmea_speed_mps:
            return FLT(sik * FLT(0.5144));
 8024d60:	edd7 7a01 	vldr	s15, [r7, #4]
 8024d64:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8024e28 <nmea_to_speed+0x13c>
 8024d68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024d6c:	e051      	b.n	8024e12 <nmea_to_speed+0x126>
        case nmea_speed_mpm:
            return FLT(sik * FLT(30.87));
 8024d6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8024d72:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8024e2c <nmea_to_speed+0x140>
 8024d76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024d7a:	e04a      	b.n	8024e12 <nmea_to_speed+0x126>

        case nmea_speed_mips:
            return FLT(sik * FLT(0.0003197));
 8024d7c:	edd7 7a01 	vldr	s15, [r7, #4]
 8024d80:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8024e30 <nmea_to_speed+0x144>
 8024d84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024d88:	e043      	b.n	8024e12 <nmea_to_speed+0x126>
        case nmea_speed_mph:
            return FLT(sik * FLT(1.151));
 8024d8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8024d8e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8024e34 <nmea_to_speed+0x148>
 8024d92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024d96:	e03c      	b.n	8024e12 <nmea_to_speed+0x126>
        case nmea_speed_fps:
            return FLT(sik * FLT(1.688));
 8024d98:	edd7 7a01 	vldr	s15, [r7, #4]
 8024d9c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8024e38 <nmea_to_speed+0x14c>
 8024da0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024da4:	e035      	b.n	8024e12 <nmea_to_speed+0x126>
        case nmea_speed_fpm:
            return FLT(sik * FLT(101.3));
 8024da6:	edd7 7a01 	vldr	s15, [r7, #4]
 8024daa:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8024e3c <nmea_to_speed+0x150>
 8024dae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024db2:	e02e      	b.n	8024e12 <nmea_to_speed+0x126>

        case nmea_speed_mpk:
            return FLT(sik * FLT(32.4));
 8024db4:	edd7 7a01 	vldr	s15, [r7, #4]
 8024db8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8024e40 <nmea_to_speed+0x154>
 8024dbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024dc0:	e027      	b.n	8024e12 <nmea_to_speed+0x126>
        case nmea_speed_spk:
            return FLT(sik * FLT(1944.0));
 8024dc2:	edd7 7a01 	vldr	s15, [r7, #4]
 8024dc6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8024e44 <nmea_to_speed+0x158>
 8024dca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024dce:	e020      	b.n	8024e12 <nmea_to_speed+0x126>
        case nmea_speed_sp100m:
            return FLT(sik * FLT(194.4));
 8024dd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8024dd4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8024e48 <nmea_to_speed+0x15c>
 8024dd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024ddc:	e019      	b.n	8024e12 <nmea_to_speed+0x126>
        case nmea_speed_mipm:
            return FLT(sik * FLT(52.14));
 8024dde:	edd7 7a01 	vldr	s15, [r7, #4]
 8024de2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8024e4c <nmea_to_speed+0x160>
 8024de6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024dea:	e012      	b.n	8024e12 <nmea_to_speed+0x126>
        case nmea_speed_spm:
            return FLT(sik * FLT(3128.0));
 8024dec:	edd7 7a01 	vldr	s15, [r7, #4]
 8024df0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8024e50 <nmea_to_speed+0x164>
 8024df4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024df8:	e00b      	b.n	8024e12 <nmea_to_speed+0x126>
        case nmea_speed_sp100y:
            return FLT(sik * FLT(177.7));
 8024dfa:	edd7 7a01 	vldr	s15, [r7, #4]
 8024dfe:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8024e54 <nmea_to_speed+0x168>
 8024e02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024e06:	e004      	b.n	8024e12 <nmea_to_speed+0x126>

        case nmea_speed_smph:
            return FLT(sik * FLT(1.0));
 8024e08:	edd7 7a01 	vldr	s15, [r7, #4]
 8024e0c:	e001      	b.n	8024e12 <nmea_to_speed+0x126>
        default:
            return 0;
 8024e0e:	eddf 7a12 	vldr	s15, [pc, #72]	; 8024e58 <nmea_to_speed+0x16c>
    }
}
 8024e12:	eeb0 0a67 	vmov.f32	s0, s15
 8024e16:	370c      	adds	r7, #12
 8024e18:	46bd      	mov	sp, r7
 8024e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e1e:	4770      	bx	lr
 8024e20:	3a06bdf5 	.word	0x3a06bdf5
 8024e24:	3fed0e56 	.word	0x3fed0e56
 8024e28:	3f03afb8 	.word	0x3f03afb8
 8024e2c:	41f6f5c3 	.word	0x41f6f5c3
 8024e30:	39a79d68 	.word	0x39a79d68
 8024e34:	3f9353f8 	.word	0x3f9353f8
 8024e38:	3fd81062 	.word	0x3fd81062
 8024e3c:	42ca999a 	.word	0x42ca999a
 8024e40:	4201999a 	.word	0x4201999a
 8024e44:	44f30000 	.word	0x44f30000
 8024e48:	43426666 	.word	0x43426666
 8024e4c:	42508f5c 	.word	0x42508f5c
 8024e50:	45438000 	.word	0x45438000
 8024e54:	4331b333 	.word	0x4331b333
 8024e58:	00000000 	.word	0x00000000

08024e5c <parse_number>:
 * @brief           Parse number as integer
 * @param[in]       gh: NMEA handle
 * @param[in]       t: Text to parse. Set to `NULL` to parse current NMEA term
 * @return          Parsed integer
 */
static int32_t parse_number(nmea_t *nh, const char *t) {
 8024e5c:	b480      	push	{r7}
 8024e5e:	b085      	sub	sp, #20
 8024e60:	af00      	add	r7, sp, #0
 8024e62:	6078      	str	r0, [r7, #4]
 8024e64:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 8024e66:	2300      	movs	r3, #0
 8024e68:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 8024e6a:	683b      	ldr	r3, [r7, #0]
 8024e6c:	2b00      	cmp	r3, #0
 8024e6e:	d106      	bne.n	8024e7e <parse_number+0x22>
        t = nh->p.term_str;
 8024e70:	687b      	ldr	r3, [r7, #4]
 8024e72:	3345      	adds	r3, #69	; 0x45
 8024e74:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; t++) {
 8024e76:	e002      	b.n	8024e7e <parse_number+0x22>
 8024e78:	683b      	ldr	r3, [r7, #0]
 8024e7a:	3301      	adds	r3, #1
 8024e7c:	603b      	str	r3, [r7, #0]
 8024e7e:	683b      	ldr	r3, [r7, #0]
 8024e80:	2b00      	cmp	r3, #0
 8024e82:	d003      	beq.n	8024e8c <parse_number+0x30>
 8024e84:	683b      	ldr	r3, [r7, #0]
 8024e86:	781b      	ldrb	r3, [r3, #0]
 8024e88:	2b20      	cmp	r3, #32
 8024e8a:	d0f5      	beq.n	8024e78 <parse_number+0x1c>
    } /* Strip leading spaces */

    minus = (*t == '-' ? (t++, 1) : 0);
 8024e8c:	683b      	ldr	r3, [r7, #0]
 8024e8e:	781b      	ldrb	r3, [r3, #0]
 8024e90:	2b2d      	cmp	r3, #45	; 0x2d
 8024e92:	d104      	bne.n	8024e9e <parse_number+0x42>
 8024e94:	683b      	ldr	r3, [r7, #0]
 8024e96:	3301      	adds	r3, #1
 8024e98:	603b      	str	r3, [r7, #0]
 8024e9a:	2301      	movs	r3, #1
 8024e9c:	e000      	b.n	8024ea0 <parse_number+0x44>
 8024e9e:	2300      	movs	r3, #0
 8024ea0:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); t++) {
 8024ea2:	e00d      	b.n	8024ec0 <parse_number+0x64>
        res = 10 * res + CTN(*t);
 8024ea4:	68fa      	ldr	r2, [r7, #12]
 8024ea6:	4613      	mov	r3, r2
 8024ea8:	009b      	lsls	r3, r3, #2
 8024eaa:	4413      	add	r3, r2
 8024eac:	005b      	lsls	r3, r3, #1
 8024eae:	461a      	mov	r2, r3
 8024eb0:	683b      	ldr	r3, [r7, #0]
 8024eb2:	781b      	ldrb	r3, [r3, #0]
 8024eb4:	3b30      	subs	r3, #48	; 0x30
 8024eb6:	4413      	add	r3, r2
 8024eb8:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); t++) {
 8024eba:	683b      	ldr	r3, [r7, #0]
 8024ebc:	3301      	adds	r3, #1
 8024ebe:	603b      	str	r3, [r7, #0]
 8024ec0:	683b      	ldr	r3, [r7, #0]
 8024ec2:	2b00      	cmp	r3, #0
 8024ec4:	d007      	beq.n	8024ed6 <parse_number+0x7a>
 8024ec6:	683b      	ldr	r3, [r7, #0]
 8024ec8:	781b      	ldrb	r3, [r3, #0]
 8024eca:	2b2f      	cmp	r3, #47	; 0x2f
 8024ecc:	d903      	bls.n	8024ed6 <parse_number+0x7a>
 8024ece:	683b      	ldr	r3, [r7, #0]
 8024ed0:	781b      	ldrb	r3, [r3, #0]
 8024ed2:	2b39      	cmp	r3, #57	; 0x39
 8024ed4:	d9e6      	bls.n	8024ea4 <parse_number+0x48>
    }
    return minus ? -res : res;
 8024ed6:	7afb      	ldrb	r3, [r7, #11]
 8024ed8:	2b00      	cmp	r3, #0
 8024eda:	d002      	beq.n	8024ee2 <parse_number+0x86>
 8024edc:	68fb      	ldr	r3, [r7, #12]
 8024ede:	425b      	negs	r3, r3
 8024ee0:	e000      	b.n	8024ee4 <parse_number+0x88>
 8024ee2:	68fb      	ldr	r3, [r7, #12]
}
 8024ee4:	4618      	mov	r0, r3
 8024ee6:	3714      	adds	r7, #20
 8024ee8:	46bd      	mov	sp, r7
 8024eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024eee:	4770      	bx	lr

08024ef0 <parse_float_number>:
 * @brief           Parse number as double and convert it to \ref nmea_float_t
 * @param[in]       gh: NMEA handle
 * @param[in]       t: Text to parse. Set to `NULL` to parse current NMEA term
 * @return          Parsed double in \ref nmea_float_t format
 */
static nmea_float_t parse_float_number(nmea_t *nh, const char *t) {
 8024ef0:	b580      	push	{r7, lr}
 8024ef2:	b084      	sub	sp, #16
 8024ef4:	af00      	add	r7, sp, #0
 8024ef6:	6078      	str	r0, [r7, #4]
 8024ef8:	6039      	str	r1, [r7, #0]
    nmea_float_t res;

    if (t == NULL) {
 8024efa:	683b      	ldr	r3, [r7, #0]
 8024efc:	2b00      	cmp	r3, #0
 8024efe:	d106      	bne.n	8024f0e <parse_float_number+0x1e>
        t = nh->p.term_str;
 8024f00:	687b      	ldr	r3, [r7, #4]
 8024f02:	3345      	adds	r3, #69	; 0x45
 8024f04:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; t++) {
 8024f06:	e002      	b.n	8024f0e <parse_float_number+0x1e>
 8024f08:	683b      	ldr	r3, [r7, #0]
 8024f0a:	3301      	adds	r3, #1
 8024f0c:	603b      	str	r3, [r7, #0]
 8024f0e:	683b      	ldr	r3, [r7, #0]
 8024f10:	2b00      	cmp	r3, #0
 8024f12:	d003      	beq.n	8024f1c <parse_float_number+0x2c>
 8024f14:	683b      	ldr	r3, [r7, #0]
 8024f16:	781b      	ldrb	r3, [r3, #0]
 8024f18:	2b20      	cmp	r3, #32
 8024f1a:	d0f5      	beq.n	8024f08 <parse_float_number+0x18>
    } /* Strip leading spaces */

#if NMEA_CFG_DOUBLE
	res = strtod(t, NULL);                      /* Parse string to double */
#else /* NMEA_CFG_DOUBLE */
    res = strtof(t, NULL); /* Parse string to float */
 8024f1c:	2100      	movs	r1, #0
 8024f1e:	6838      	ldr	r0, [r7, #0]
 8024f20:	f01b fb5a 	bl	80405d8 <strtof>
 8024f24:	ed87 0a03 	vstr	s0, [r7, #12]
#endif /* !NMEA_CFG_DOUBLE */

    return FLT(res); /* Return casted value, based on float size */
 8024f28:	68fb      	ldr	r3, [r7, #12]
 8024f2a:	ee07 3a90 	vmov	s15, r3
}
 8024f2e:	eeb0 0a67 	vmov.f32	s0, s15
 8024f32:	3710      	adds	r7, #16
 8024f34:	46bd      	mov	sp, r7
 8024f36:	bd80      	pop	{r7, pc}

08024f38 <parse_lat_long>:
 *
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * @param[in]       gh: NMEA handle
 * @return          Latitude/Longitude value in degrees
 */
static nmea_float_t parse_lat_long(nmea_t *nh) {
 8024f38:	b580      	push	{r7, lr}
 8024f3a:	b086      	sub	sp, #24
 8024f3c:	af00      	add	r7, sp, #0
 8024f3e:	6078      	str	r0, [r7, #4]
    nmea_float_t ll, deg, min;

    ll = parse_float_number(nh, NULL); /* Parse value as double */
 8024f40:	2100      	movs	r1, #0
 8024f42:	6878      	ldr	r0, [r7, #4]
 8024f44:	f7ff ffd4 	bl	8024ef0 <parse_float_number>
 8024f48:	ed87 0a05 	vstr	s0, [r7, #20]
    deg = FLT((int )((int )ll / 100)); /* Get absolute degrees value, interested in integer part only */
 8024f4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8024f50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8024f54:	ee17 1a90 	vmov	r1, s15
 8024f58:	4b15      	ldr	r3, [pc, #84]	; (8024fb0 <parse_lat_long+0x78>)
 8024f5a:	fb83 2301 	smull	r2, r3, r3, r1
 8024f5e:	115a      	asrs	r2, r3, #5
 8024f60:	17cb      	asrs	r3, r1, #31
 8024f62:	1ad3      	subs	r3, r2, r3
 8024f64:	ee07 3a90 	vmov	s15, r3
 8024f68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8024f6c:	edc7 7a04 	vstr	s15, [r7, #16]
    min = ll - (deg * FLT(100)); /* Get remaining part from full number, minutes */
 8024f70:	edd7 7a04 	vldr	s15, [r7, #16]
 8024f74:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8024fb4 <parse_lat_long+0x7c>
 8024f78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024f7c:	ed97 7a05 	vldr	s14, [r7, #20]
 8024f80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8024f84:	edc7 7a03 	vstr	s15, [r7, #12]
    ll = deg + (min / FLT(60)); /* Calculate latitude/longitude */
 8024f88:	ed97 7a03 	vldr	s14, [r7, #12]
 8024f8c:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8024fb8 <parse_lat_long+0x80>
 8024f90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8024f94:	ed97 7a04 	vldr	s14, [r7, #16]
 8024f98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8024f9c:	edc7 7a05 	vstr	s15, [r7, #20]

    return ll;
 8024fa0:	697b      	ldr	r3, [r7, #20]
 8024fa2:	ee07 3a90 	vmov	s15, r3
}
 8024fa6:	eeb0 0a67 	vmov.f32	s0, s15
 8024faa:	3718      	adds	r7, #24
 8024fac:	46bd      	mov	sp, r7
 8024fae:	bd80      	pop	{r7, pc}
 8024fb0:	51eb851f 	.word	0x51eb851f
 8024fb4:	42c80000 	.word	0x42c80000
 8024fb8:	42700000 	.word	0x42700000

08024fbc <parse_term>:
/**
 * @brief           Parse received term
 * @param[in]       gh: NMEA handle
 * @return          `1` on success, `0` otherwise
 */
static uint8_t parse_term(nmea_t *nh) {
 8024fbc:	b580      	push	{r7, lr}
 8024fbe:	b082      	sub	sp, #8
 8024fc0:	af00      	add	r7, sp, #0
 8024fc2:	6078      	str	r0, [r7, #4]
    if (nh->p.term_num == 0) { /* Check string type */
 8024fc4:	687b      	ldr	r3, [r7, #4]
 8024fc6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8024fca:	2b00      	cmp	r3, #0
 8024fcc:	d169      	bne.n	80250a2 <parse_term+0xe6>
        if (0) {
#if NMEA_CFG_STATEMENT_GPGGA
        } else if (!strncmp(nh->p.term_str, "$GPGGA", 6) || !strncmp(nh->p.term_str, "$GNGGA", 6)) {
 8024fce:	687b      	ldr	r3, [r7, #4]
 8024fd0:	3345      	adds	r3, #69	; 0x45
 8024fd2:	2206      	movs	r2, #6
 8024fd4:	49c4      	ldr	r1, [pc, #784]	; (80252e8 <parse_term+0x32c>)
 8024fd6:	4618      	mov	r0, r3
 8024fd8:	f01a fcc2 	bl	803f960 <strncmp>
 8024fdc:	4603      	mov	r3, r0
 8024fde:	2b00      	cmp	r3, #0
 8024fe0:	d009      	beq.n	8024ff6 <parse_term+0x3a>
 8024fe2:	687b      	ldr	r3, [r7, #4]
 8024fe4:	3345      	adds	r3, #69	; 0x45
 8024fe6:	2206      	movs	r2, #6
 8024fe8:	49c0      	ldr	r1, [pc, #768]	; (80252ec <parse_term+0x330>)
 8024fea:	4618      	mov	r0, r3
 8024fec:	f01a fcb8 	bl	803f960 <strncmp>
 8024ff0:	4603      	mov	r3, r0
 8024ff2:	2b00      	cmp	r3, #0
 8024ff4:	d104      	bne.n	8025000 <parse_term+0x44>
            nh->p.stat = STAT_GGA;
 8024ff6:	687b      	ldr	r3, [r7, #4]
 8024ff8:	2201      	movs	r2, #1
 8024ffa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8024ffe:	e04e      	b.n	802509e <parse_term+0xe2>
#endif /* NMEA_CFG_STATEMENT_GPGGA */
#if NMEA_CFG_STATEMENT_GPGSA
        } else if (!strncmp(nh->p.term_str, "$GPGSA", 6) || !strncmp(nh->p.term_str, "$GNGSA", 6)) {
 8025000:	687b      	ldr	r3, [r7, #4]
 8025002:	3345      	adds	r3, #69	; 0x45
 8025004:	2206      	movs	r2, #6
 8025006:	49ba      	ldr	r1, [pc, #744]	; (80252f0 <parse_term+0x334>)
 8025008:	4618      	mov	r0, r3
 802500a:	f01a fca9 	bl	803f960 <strncmp>
 802500e:	4603      	mov	r3, r0
 8025010:	2b00      	cmp	r3, #0
 8025012:	d009      	beq.n	8025028 <parse_term+0x6c>
 8025014:	687b      	ldr	r3, [r7, #4]
 8025016:	3345      	adds	r3, #69	; 0x45
 8025018:	2206      	movs	r2, #6
 802501a:	49b6      	ldr	r1, [pc, #728]	; (80252f4 <parse_term+0x338>)
 802501c:	4618      	mov	r0, r3
 802501e:	f01a fc9f 	bl	803f960 <strncmp>
 8025022:	4603      	mov	r3, r0
 8025024:	2b00      	cmp	r3, #0
 8025026:	d104      	bne.n	8025032 <parse_term+0x76>
            nh->p.stat = STAT_GSA;
 8025028:	687b      	ldr	r3, [r7, #4]
 802502a:	2202      	movs	r2, #2
 802502c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8025030:	e035      	b.n	802509e <parse_term+0xe2>
#endif /* NMEA_CFG_STATEMENT_GPGSA */
#if NMEA_CFG_STATEMENT_GPGSV
        } else if (!strncmp(nh->p.term_str, "$GPGSV", 6) || !strncmp(nh->p.term_str, "$GNGSV", 6)) {
 8025032:	687b      	ldr	r3, [r7, #4]
 8025034:	3345      	adds	r3, #69	; 0x45
 8025036:	2206      	movs	r2, #6
 8025038:	49af      	ldr	r1, [pc, #700]	; (80252f8 <parse_term+0x33c>)
 802503a:	4618      	mov	r0, r3
 802503c:	f01a fc90 	bl	803f960 <strncmp>
 8025040:	4603      	mov	r3, r0
 8025042:	2b00      	cmp	r3, #0
 8025044:	d009      	beq.n	802505a <parse_term+0x9e>
 8025046:	687b      	ldr	r3, [r7, #4]
 8025048:	3345      	adds	r3, #69	; 0x45
 802504a:	2206      	movs	r2, #6
 802504c:	49ab      	ldr	r1, [pc, #684]	; (80252fc <parse_term+0x340>)
 802504e:	4618      	mov	r0, r3
 8025050:	f01a fc86 	bl	803f960 <strncmp>
 8025054:	4603      	mov	r3, r0
 8025056:	2b00      	cmp	r3, #0
 8025058:	d104      	bne.n	8025064 <parse_term+0xa8>
            nh->p.stat = STAT_GSV;
 802505a:	687b      	ldr	r3, [r7, #4]
 802505c:	2203      	movs	r2, #3
 802505e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8025062:	e01c      	b.n	802509e <parse_term+0xe2>
#endif /* NMEA_CFG_STATEMENT_GPGSV */
#if NMEA_CFG_STATEMENT_GPRMC
        } else if (!strncmp(nh->p.term_str, "$GPRMC", 6) || !strncmp(nh->p.term_str, "$GNRMC", 6)) {
 8025064:	687b      	ldr	r3, [r7, #4]
 8025066:	3345      	adds	r3, #69	; 0x45
 8025068:	2206      	movs	r2, #6
 802506a:	49a5      	ldr	r1, [pc, #660]	; (8025300 <parse_term+0x344>)
 802506c:	4618      	mov	r0, r3
 802506e:	f01a fc77 	bl	803f960 <strncmp>
 8025072:	4603      	mov	r3, r0
 8025074:	2b00      	cmp	r3, #0
 8025076:	d009      	beq.n	802508c <parse_term+0xd0>
 8025078:	687b      	ldr	r3, [r7, #4]
 802507a:	3345      	adds	r3, #69	; 0x45
 802507c:	2206      	movs	r2, #6
 802507e:	49a1      	ldr	r1, [pc, #644]	; (8025304 <parse_term+0x348>)
 8025080:	4618      	mov	r0, r3
 8025082:	f01a fc6d 	bl	803f960 <strncmp>
 8025086:	4603      	mov	r3, r0
 8025088:	2b00      	cmp	r3, #0
 802508a:	d104      	bne.n	8025096 <parse_term+0xda>
            nh->p.stat = STAT_RMC;
 802508c:	687b      	ldr	r3, [r7, #4]
 802508e:	2204      	movs	r2, #4
 8025090:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8025094:	e003      	b.n	802509e <parse_term+0xe2>
#endif /* NMEA_CFG_STATEMENT_GPRMC */
        } else {
            nh->p.stat = STAT_UNKNOWN; /* Invalid statement for library */
 8025096:	687b      	ldr	r3, [r7, #4]
 8025098:	2200      	movs	r2, #0
 802509a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        }
        return 1;
 802509e:	2301      	movs	r3, #1
 80250a0:	e21d      	b.n	80254de <parse_term+0x522>
    }

    /* Start parsing terms */
    if (nh->p.stat == STAT_UNKNOWN) {
 80250a2:	687b      	ldr	r3, [r7, #4]
 80250a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80250a8:	2b00      	cmp	r3, #0
 80250aa:	f000 8217 	beq.w	80254dc <parse_term+0x520>
#if NMEA_CFG_STATEMENT_GPGGA
    } else if (nh->p.stat == STAT_GGA) { /* Process GPGGA statement */
 80250ae:	687b      	ldr	r3, [r7, #4]
 80250b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80250b4:	2b01      	cmp	r3, #1
 80250b6:	f040 80c0 	bne.w	802523a <parse_term+0x27e>
        switch (nh->p.term_num) {
 80250ba:	687b      	ldr	r3, [r7, #4]
 80250bc:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80250c0:	3b01      	subs	r3, #1
 80250c2:	2b0a      	cmp	r3, #10
 80250c4:	f200 81fd 	bhi.w	80254c2 <parse_term+0x506>
 80250c8:	a201      	add	r2, pc, #4	; (adr r2, 80250d0 <parse_term+0x114>)
 80250ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80250ce:	bf00      	nop
 80250d0:	080250fd 	.word	0x080250fd
 80250d4:	08025177 	.word	0x08025177
 80250d8:	08025189 	.word	0x08025189
 80250dc:	080251b1 	.word	0x080251b1
 80250e0:	080251c3 	.word	0x080251c3
 80250e4:	080251eb 	.word	0x080251eb
 80250e8:	080251ff 	.word	0x080251ff
 80250ec:	080254c3 	.word	0x080254c3
 80250f0:	08025213 	.word	0x08025213
 80250f4:	080254c3 	.word	0x080254c3
 80250f8:	08025227 	.word	0x08025227
            case 1: /* Process UTC time */
                nh->p.data.gga.hours = 10 * CTN(nh->p.term_str[0]) + CTN(nh->p.term_str[1]);
 80250fc:	687b      	ldr	r3, [r7, #4]
 80250fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8025102:	3b30      	subs	r3, #48	; 0x30
 8025104:	b2db      	uxtb	r3, r3
 8025106:	461a      	mov	r2, r3
 8025108:	0092      	lsls	r2, r2, #2
 802510a:	4413      	add	r3, r2
 802510c:	005b      	lsls	r3, r3, #1
 802510e:	b2da      	uxtb	r2, r3
 8025110:	687b      	ldr	r3, [r7, #4]
 8025112:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8025116:	4413      	add	r3, r2
 8025118:	b2db      	uxtb	r3, r3
 802511a:	3b30      	subs	r3, #48	; 0x30
 802511c:	b2da      	uxtb	r2, r3
 802511e:	687b      	ldr	r3, [r7, #4]
 8025120:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                nh->p.data.gga.minutes = 10 * CTN(nh->p.term_str[2]) + CTN(nh->p.term_str[3]);
 8025124:	687b      	ldr	r3, [r7, #4]
 8025126:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 802512a:	3b30      	subs	r3, #48	; 0x30
 802512c:	b2db      	uxtb	r3, r3
 802512e:	461a      	mov	r2, r3
 8025130:	0092      	lsls	r2, r2, #2
 8025132:	4413      	add	r3, r2
 8025134:	005b      	lsls	r3, r3, #1
 8025136:	b2da      	uxtb	r2, r3
 8025138:	687b      	ldr	r3, [r7, #4]
 802513a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 802513e:	4413      	add	r3, r2
 8025140:	b2db      	uxtb	r3, r3
 8025142:	3b30      	subs	r3, #48	; 0x30
 8025144:	b2da      	uxtb	r2, r3
 8025146:	687b      	ldr	r3, [r7, #4]
 8025148:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
                nh->p.data.gga.seconds = 10 * CTN(nh->p.term_str[4]) + CTN(nh->p.term_str[5]);
 802514c:	687b      	ldr	r3, [r7, #4]
 802514e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8025152:	3b30      	subs	r3, #48	; 0x30
 8025154:	b2db      	uxtb	r3, r3
 8025156:	461a      	mov	r2, r3
 8025158:	0092      	lsls	r2, r2, #2
 802515a:	4413      	add	r3, r2
 802515c:	005b      	lsls	r3, r3, #1
 802515e:	b2da      	uxtb	r2, r3
 8025160:	687b      	ldr	r3, [r7, #4]
 8025162:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8025166:	4413      	add	r3, r2
 8025168:	b2db      	uxtb	r3, r3
 802516a:	3b30      	subs	r3, #48	; 0x30
 802516c:	b2da      	uxtb	r2, r3
 802516e:	687b      	ldr	r3, [r7, #4]
 8025170:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                break;
 8025174:	e1b2      	b.n	80254dc <parse_term+0x520>
            case 2: /* Latitude */
                nh->p.data.gga.latitude = parse_lat_long(nh); /* Parse latitude */
 8025176:	6878      	ldr	r0, [r7, #4]
 8025178:	f7ff fede 	bl	8024f38 <parse_lat_long>
 802517c:	eef0 7a40 	vmov.f32	s15, s0
 8025180:	687b      	ldr	r3, [r7, #4]
 8025182:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
                break;
 8025186:	e1a9      	b.n	80254dc <parse_term+0x520>
            case 3: /* Latitude north/south information */
                if (nh->p.term_str[0] == 'S' || nh->p.term_str[0] == 's') {
 8025188:	687b      	ldr	r3, [r7, #4]
 802518a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802518e:	2b53      	cmp	r3, #83	; 0x53
 8025190:	d005      	beq.n	802519e <parse_term+0x1e2>
 8025192:	687b      	ldr	r3, [r7, #4]
 8025194:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8025198:	2b73      	cmp	r3, #115	; 0x73
 802519a:	f040 8194 	bne.w	80254c6 <parse_term+0x50a>
                    nh->p.data.gga.latitude = -nh->p.data.gga.latitude;
 802519e:	687b      	ldr	r3, [r7, #4]
 80251a0:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80251a4:	eef1 7a67 	vneg.f32	s15, s15
 80251a8:	687b      	ldr	r3, [r7, #4]
 80251aa:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
                }
                break;
 80251ae:	e18a      	b.n	80254c6 <parse_term+0x50a>
            case 4: /* Longitude */
                nh->p.data.gga.longitude = parse_lat_long(nh); /* Parse longitude */
 80251b0:	6878      	ldr	r0, [r7, #4]
 80251b2:	f7ff fec1 	bl	8024f38 <parse_lat_long>
 80251b6:	eef0 7a40 	vmov.f32	s15, s0
 80251ba:	687b      	ldr	r3, [r7, #4]
 80251bc:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
                break;
 80251c0:	e18c      	b.n	80254dc <parse_term+0x520>
            case 5: /* Longitude east/west information */
                if (nh->p.term_str[0] == 'W' || nh->p.term_str[0] == 'w') {
 80251c2:	687b      	ldr	r3, [r7, #4]
 80251c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80251c8:	2b57      	cmp	r3, #87	; 0x57
 80251ca:	d005      	beq.n	80251d8 <parse_term+0x21c>
 80251cc:	687b      	ldr	r3, [r7, #4]
 80251ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80251d2:	2b77      	cmp	r3, #119	; 0x77
 80251d4:	f040 8179 	bne.w	80254ca <parse_term+0x50e>
                    nh->p.data.gga.longitude = -nh->p.data.gga.longitude;
 80251d8:	687b      	ldr	r3, [r7, #4]
 80251da:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80251de:	eef1 7a67 	vneg.f32	s15, s15
 80251e2:	687b      	ldr	r3, [r7, #4]
 80251e4:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
                }
                break;
 80251e8:	e16f      	b.n	80254ca <parse_term+0x50e>
            case 6: /* Fix status */
                nh->p.data.gga.fix = (uint8_t) parse_number(nh, NULL);
 80251ea:	2100      	movs	r1, #0
 80251ec:	6878      	ldr	r0, [r7, #4]
 80251ee:	f7ff fe35 	bl	8024e5c <parse_number>
 80251f2:	4603      	mov	r3, r0
 80251f4:	b2da      	uxtb	r2, r3
 80251f6:	687b      	ldr	r3, [r7, #4]
 80251f8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                break;
 80251fc:	e16e      	b.n	80254dc <parse_term+0x520>
            case 7: /* Satellites in use */
                nh->p.data.gga.sats_in_use = (uint8_t) parse_number(nh, NULL);
 80251fe:	2100      	movs	r1, #0
 8025200:	6878      	ldr	r0, [r7, #4]
 8025202:	f7ff fe2b 	bl	8024e5c <parse_number>
 8025206:	4603      	mov	r3, r0
 8025208:	b2da      	uxtb	r2, r3
 802520a:	687b      	ldr	r3, [r7, #4]
 802520c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                break;
 8025210:	e164      	b.n	80254dc <parse_term+0x520>
            case 9: /* Altitude */
                nh->p.data.gga.altitude = parse_float_number(nh, NULL);
 8025212:	2100      	movs	r1, #0
 8025214:	6878      	ldr	r0, [r7, #4]
 8025216:	f7ff fe6b 	bl	8024ef0 <parse_float_number>
 802521a:	eef0 7a40 	vmov.f32	s15, s0
 802521e:	687b      	ldr	r3, [r7, #4]
 8025220:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
                break;
 8025224:	e15a      	b.n	80254dc <parse_term+0x520>
            case 11: /* Altitude above ellipsoid */
                nh->p.data.gga.geo_sep = parse_float_number(nh, NULL);
 8025226:	2100      	movs	r1, #0
 8025228:	6878      	ldr	r0, [r7, #4]
 802522a:	f7ff fe61 	bl	8024ef0 <parse_float_number>
 802522e:	eef0 7a40 	vmov.f32	s15, s0
 8025232:	687b      	ldr	r3, [r7, #4]
 8025234:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
                break;
 8025238:	e150      	b.n	80254dc <parse_term+0x520>
            default:
                break;
        }
#endif /* NMEA_CFG_STATEMENT_GPGGA */
#if NMEA_CFG_STATEMENT_GPGSA
    } else if (nh->p.stat == STAT_GSA) { /* Process GPGSA statement */
 802523a:	687b      	ldr	r3, [r7, #4]
 802523c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8025240:	2b02      	cmp	r3, #2
 8025242:	d17e      	bne.n	8025342 <parse_term+0x386>
        switch (nh->p.term_num) {
 8025244:	687b      	ldr	r3, [r7, #4]
 8025246:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 802524a:	3b02      	subs	r3, #2
 802524c:	2b0f      	cmp	r3, #15
 802524e:	d85b      	bhi.n	8025308 <parse_term+0x34c>
 8025250:	a201      	add	r2, pc, #4	; (adr r2, 8025258 <parse_term+0x29c>)
 8025252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025256:	bf00      	nop
 8025258:	08025299 	.word	0x08025299
 802525c:	08025309 	.word	0x08025309
 8025260:	08025309 	.word	0x08025309
 8025264:	08025309 	.word	0x08025309
 8025268:	08025309 	.word	0x08025309
 802526c:	08025309 	.word	0x08025309
 8025270:	08025309 	.word	0x08025309
 8025274:	08025309 	.word	0x08025309
 8025278:	08025309 	.word	0x08025309
 802527c:	08025309 	.word	0x08025309
 8025280:	08025309 	.word	0x08025309
 8025284:	08025309 	.word	0x08025309
 8025288:	08025309 	.word	0x08025309
 802528c:	080252ad 	.word	0x080252ad
 8025290:	080252c1 	.word	0x080252c1
 8025294:	080252d5 	.word	0x080252d5
            case 2: /* Process fix mode */
                nh->p.data.gsa.fix_mode = (uint8_t) parse_number(nh, NULL);
 8025298:	2100      	movs	r1, #0
 802529a:	6878      	ldr	r0, [r7, #4]
 802529c:	f7ff fdde 	bl	8024e5c <parse_number>
 80252a0:	4603      	mov	r3, r0
 80252a2:	b2da      	uxtb	r2, r3
 80252a4:	687b      	ldr	r3, [r7, #4]
 80252a6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
                break;
 80252aa:	e117      	b.n	80254dc <parse_term+0x520>
            case 15: /* Process PDOP */
                nh->p.data.gsa.dop_p = parse_float_number(nh, NULL);
 80252ac:	2100      	movs	r1, #0
 80252ae:	6878      	ldr	r0, [r7, #4]
 80252b0:	f7ff fe1e 	bl	8024ef0 <parse_float_number>
 80252b4:	eef0 7a40 	vmov.f32	s15, s0
 80252b8:	687b      	ldr	r3, [r7, #4]
 80252ba:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
                break;
 80252be:	e10d      	b.n	80254dc <parse_term+0x520>
            case 16: /* Process HDOP */
                nh->p.data.gsa.dop_h = parse_float_number(nh, NULL);
 80252c0:	2100      	movs	r1, #0
 80252c2:	6878      	ldr	r0, [r7, #4]
 80252c4:	f7ff fe14 	bl	8024ef0 <parse_float_number>
 80252c8:	eef0 7a40 	vmov.f32	s15, s0
 80252cc:	687b      	ldr	r3, [r7, #4]
 80252ce:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
                break;
 80252d2:	e103      	b.n	80254dc <parse_term+0x520>
            case 17: /* Process VDOP */
                nh->p.data.gsa.dop_v = parse_float_number(nh, NULL);
 80252d4:	2100      	movs	r1, #0
 80252d6:	6878      	ldr	r0, [r7, #4]
 80252d8:	f7ff fe0a 	bl	8024ef0 <parse_float_number>
 80252dc:	eef0 7a40 	vmov.f32	s15, s0
 80252e0:	687b      	ldr	r3, [r7, #4]
 80252e2:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
                break;
 80252e6:	e0f9      	b.n	80254dc <parse_term+0x520>
 80252e8:	0804340c 	.word	0x0804340c
 80252ec:	08043414 	.word	0x08043414
 80252f0:	0804341c 	.word	0x0804341c
 80252f4:	08043424 	.word	0x08043424
 80252f8:	0804342c 	.word	0x0804342c
 80252fc:	08043434 	.word	0x08043434
 8025300:	0804343c 	.word	0x0804343c
 8025304:	08043444 	.word	0x08043444
            default:
                /* Parse satellite IDs */
                if (nh->p.term_num >= 3 && nh->p.term_num <= 14) {
 8025308:	687b      	ldr	r3, [r7, #4]
 802530a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 802530e:	2b02      	cmp	r3, #2
 8025310:	f240 80dd 	bls.w	80254ce <parse_term+0x512>
 8025314:	687b      	ldr	r3, [r7, #4]
 8025316:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 802531a:	2b0e      	cmp	r3, #14
 802531c:	f200 80d7 	bhi.w	80254ce <parse_term+0x512>
                    nh->p.data.gsa.satellites_ids[nh->p.term_num - 3] = (uint8_t) parse_number(nh, NULL);
 8025320:	2100      	movs	r1, #0
 8025322:	6878      	ldr	r0, [r7, #4]
 8025324:	f7ff fd9a 	bl	8024e5c <parse_number>
 8025328:	4602      	mov	r2, r0
 802532a:	687b      	ldr	r3, [r7, #4]
 802532c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8025330:	3b03      	subs	r3, #3
 8025332:	b2d1      	uxtb	r1, r2
 8025334:	687a      	ldr	r2, [r7, #4]
 8025336:	4413      	add	r3, r2
 8025338:	460a      	mov	r2, r1
 802533a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
                }
                break;
 802533e:	bf00      	nop
 8025340:	e0c5      	b.n	80254ce <parse_term+0x512>
        }
#endif /* NMEA_CFG_STATEMENT_GPGSA */
#if NMEA_CFG_STATEMENT_GPGSV
    } else if (nh->p.stat == STAT_GSV) { /* Process GPGSV statement */
 8025342:	687b      	ldr	r3, [r7, #4]
 8025344:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8025348:	2b03      	cmp	r3, #3
 802534a:	d11b      	bne.n	8025384 <parse_term+0x3c8>
        switch (nh->p.term_num) {
 802534c:	687b      	ldr	r3, [r7, #4]
 802534e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8025352:	2b02      	cmp	r3, #2
 8025354:	d002      	beq.n	802535c <parse_term+0x3a0>
 8025356:	2b03      	cmp	r3, #3
 8025358:	d00a      	beq.n	8025370 <parse_term+0x3b4>
					default: break;
					}
				}
			}
#endif /* NMEA_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 802535a:	e0bf      	b.n	80254dc <parse_term+0x520>
                nh->p.data.gsv.stat_num = (uint8_t) parse_number(nh, NULL);
 802535c:	2100      	movs	r1, #0
 802535e:	6878      	ldr	r0, [r7, #4]
 8025360:	f7ff fd7c 	bl	8024e5c <parse_number>
 8025364:	4603      	mov	r3, r0
 8025366:	b2da      	uxtb	r2, r3
 8025368:	687b      	ldr	r3, [r7, #4]
 802536a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
                break;
 802536e:	e0b5      	b.n	80254dc <parse_term+0x520>
                nh->p.data.gsv.sats_in_view = (uint8_t) parse_number(nh, NULL);
 8025370:	2100      	movs	r1, #0
 8025372:	6878      	ldr	r0, [r7, #4]
 8025374:	f7ff fd72 	bl	8024e5c <parse_number>
 8025378:	4603      	mov	r3, r0
 802537a:	b2da      	uxtb	r2, r3
 802537c:	687b      	ldr	r3, [r7, #4]
 802537e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
                break;
 8025382:	e0ab      	b.n	80254dc <parse_term+0x520>
        }
#endif /* NMEA_CFG_STATEMENT_GPGSV */
#if NMEA_CFG_STATEMENT_GPRMC
    } else if (nh->p.stat == STAT_RMC) { /* Process GPRMC statement */
 8025384:	687b      	ldr	r3, [r7, #4]
 8025386:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802538a:	2b04      	cmp	r3, #4
 802538c:	f040 80a1 	bne.w	80254d2 <parse_term+0x516>
        switch (nh->p.term_num) {
 8025390:	687b      	ldr	r3, [r7, #4]
 8025392:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8025396:	3b02      	subs	r3, #2
 8025398:	2b09      	cmp	r3, #9
 802539a:	f200 809c 	bhi.w	80254d6 <parse_term+0x51a>
 802539e:	a201      	add	r2, pc, #4	; (adr r2, 80253a4 <parse_term+0x3e8>)
 80253a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80253a4:	080253cd 	.word	0x080253cd
 80253a8:	080254d7 	.word	0x080254d7
 80253ac:	080254d7 	.word	0x080254d7
 80253b0:	080254d7 	.word	0x080254d7
 80253b4:	080254d7 	.word	0x080254d7
 80253b8:	080253e7 	.word	0x080253e7
 80253bc:	080253fb 	.word	0x080253fb
 80253c0:	0802540f 	.word	0x0802540f
 80253c4:	08025489 	.word	0x08025489
 80253c8:	0802549d 	.word	0x0802549d
            case 2: /* Process valid status */
                nh->p.data.rmc.is_valid = (nh->p.term_str[0] == 'A');
 80253cc:	687b      	ldr	r3, [r7, #4]
 80253ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80253d2:	2b41      	cmp	r3, #65	; 0x41
 80253d4:	bf0c      	ite	eq
 80253d6:	2301      	moveq	r3, #1
 80253d8:	2300      	movne	r3, #0
 80253da:	b2db      	uxtb	r3, r3
 80253dc:	461a      	mov	r2, r3
 80253de:	687b      	ldr	r3, [r7, #4]
 80253e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
                break;
 80253e4:	e07a      	b.n	80254dc <parse_term+0x520>
            case 7: /* Process ground speed in knots */
                nh->p.data.rmc.speed = parse_float_number(nh, NULL);
 80253e6:	2100      	movs	r1, #0
 80253e8:	6878      	ldr	r0, [r7, #4]
 80253ea:	f7ff fd81 	bl	8024ef0 <parse_float_number>
 80253ee:	eef0 7a40 	vmov.f32	s15, s0
 80253f2:	687b      	ldr	r3, [r7, #4]
 80253f4:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
                break;
 80253f8:	e070      	b.n	80254dc <parse_term+0x520>
            case 8: /* Process true ground coarse */
                nh->p.data.rmc.coarse = parse_float_number(nh, NULL);
 80253fa:	2100      	movs	r1, #0
 80253fc:	6878      	ldr	r0, [r7, #4]
 80253fe:	f7ff fd77 	bl	8024ef0 <parse_float_number>
 8025402:	eef0 7a40 	vmov.f32	s15, s0
 8025406:	687b      	ldr	r3, [r7, #4]
 8025408:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
                break;
 802540c:	e066      	b.n	80254dc <parse_term+0x520>
            case 9: /* Process date */
                nh->p.data.rmc.date = (uint8_t) (10 * CTN(nh->p.term_str[0]) + CTN(nh->p.term_str[1]));
 802540e:	687b      	ldr	r3, [r7, #4]
 8025410:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8025414:	3b30      	subs	r3, #48	; 0x30
 8025416:	b2db      	uxtb	r3, r3
 8025418:	461a      	mov	r2, r3
 802541a:	0092      	lsls	r2, r2, #2
 802541c:	4413      	add	r3, r2
 802541e:	005b      	lsls	r3, r3, #1
 8025420:	b2da      	uxtb	r2, r3
 8025422:	687b      	ldr	r3, [r7, #4]
 8025424:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8025428:	4413      	add	r3, r2
 802542a:	b2db      	uxtb	r3, r3
 802542c:	3b30      	subs	r3, #48	; 0x30
 802542e:	b2da      	uxtb	r2, r3
 8025430:	687b      	ldr	r3, [r7, #4]
 8025432:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
                nh->p.data.rmc.month = (uint8_t) (10 * CTN(nh->p.term_str[2]) + CTN(nh->p.term_str[3]));
 8025436:	687b      	ldr	r3, [r7, #4]
 8025438:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 802543c:	3b30      	subs	r3, #48	; 0x30
 802543e:	b2db      	uxtb	r3, r3
 8025440:	461a      	mov	r2, r3
 8025442:	0092      	lsls	r2, r2, #2
 8025444:	4413      	add	r3, r2
 8025446:	005b      	lsls	r3, r3, #1
 8025448:	b2da      	uxtb	r2, r3
 802544a:	687b      	ldr	r3, [r7, #4]
 802544c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8025450:	4413      	add	r3, r2
 8025452:	b2db      	uxtb	r3, r3
 8025454:	3b30      	subs	r3, #48	; 0x30
 8025456:	b2da      	uxtb	r2, r3
 8025458:	687b      	ldr	r3, [r7, #4]
 802545a:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
                nh->p.data.rmc.year = (uint8_t) (10 * CTN(nh->p.term_str[4]) + CTN(nh->p.term_str[5]));
 802545e:	687b      	ldr	r3, [r7, #4]
 8025460:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8025464:	3b30      	subs	r3, #48	; 0x30
 8025466:	b2db      	uxtb	r3, r3
 8025468:	461a      	mov	r2, r3
 802546a:	0092      	lsls	r2, r2, #2
 802546c:	4413      	add	r3, r2
 802546e:	005b      	lsls	r3, r3, #1
 8025470:	b2da      	uxtb	r2, r3
 8025472:	687b      	ldr	r3, [r7, #4]
 8025474:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8025478:	4413      	add	r3, r2
 802547a:	b2db      	uxtb	r3, r3
 802547c:	3b30      	subs	r3, #48	; 0x30
 802547e:	b2da      	uxtb	r2, r3
 8025480:	687b      	ldr	r3, [r7, #4]
 8025482:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
                break;
 8025486:	e029      	b.n	80254dc <parse_term+0x520>
            case 10: /* Process magnetic variation */
                nh->p.data.rmc.variation = parse_float_number(nh, NULL);
 8025488:	2100      	movs	r1, #0
 802548a:	6878      	ldr	r0, [r7, #4]
 802548c:	f7ff fd30 	bl	8024ef0 <parse_float_number>
 8025490:	eef0 7a40 	vmov.f32	s15, s0
 8025494:	687b      	ldr	r3, [r7, #4]
 8025496:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
                break;
 802549a:	e01f      	b.n	80254dc <parse_term+0x520>
            case 11: /* Process magnetic variation east/west */
                if (nh->p.term_str[0] == 'W' || nh->p.term_str[0] == 'w') {
 802549c:	687b      	ldr	r3, [r7, #4]
 802549e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80254a2:	2b57      	cmp	r3, #87	; 0x57
 80254a4:	d004      	beq.n	80254b0 <parse_term+0x4f4>
 80254a6:	687b      	ldr	r3, [r7, #4]
 80254a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80254ac:	2b77      	cmp	r3, #119	; 0x77
 80254ae:	d114      	bne.n	80254da <parse_term+0x51e>
                    nh->p.data.rmc.variation = -nh->p.data.rmc.variation;
 80254b0:	687b      	ldr	r3, [r7, #4]
 80254b2:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80254b6:	eef1 7a67 	vneg.f32	s15, s15
 80254ba:	687b      	ldr	r3, [r7, #4]
 80254bc:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
                }
                break;
 80254c0:	e00b      	b.n	80254da <parse_term+0x51e>
                break;
 80254c2:	bf00      	nop
 80254c4:	e00a      	b.n	80254dc <parse_term+0x520>
                break;
 80254c6:	bf00      	nop
 80254c8:	e008      	b.n	80254dc <parse_term+0x520>
                break;
 80254ca:	bf00      	nop
 80254cc:	e006      	b.n	80254dc <parse_term+0x520>
                break;
 80254ce:	bf00      	nop
 80254d0:	e004      	b.n	80254dc <parse_term+0x520>
            default:
                break;
        }
#endif /* NMEA_CFG_STATEMENT_GPRMC */
    }
 80254d2:	bf00      	nop
 80254d4:	e002      	b.n	80254dc <parse_term+0x520>
                break;
 80254d6:	bf00      	nop
 80254d8:	e000      	b.n	80254dc <parse_term+0x520>
                break;
 80254da:	bf00      	nop
    return 1;
 80254dc:	2301      	movs	r3, #1
}
 80254de:	4618      	mov	r0, r3
 80254e0:	3708      	adds	r7, #8
 80254e2:	46bd      	mov	sp, r7
 80254e4:	bd80      	pop	{r7, pc}
 80254e6:	bf00      	nop

080254e8 <check_crc>:
/**
 * @brief           Compare calculated CRC with received CRC
 * @param[in]       gh: NMEA handle
 * @return          `1` on success, `0` otherwise
 */
static uint8_t check_crc(nmea_t *nh) {
 80254e8:	b480      	push	{r7}
 80254ea:	b085      	sub	sp, #20
 80254ec:	af00      	add	r7, sp, #0
 80254ee:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t) ((CHTN(nh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(nh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 80254f0:	687b      	ldr	r3, [r7, #4]
 80254f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80254f6:	2b2f      	cmp	r3, #47	; 0x2f
 80254f8:	d90b      	bls.n	8025512 <check_crc+0x2a>
 80254fa:	687b      	ldr	r3, [r7, #4]
 80254fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8025500:	2b39      	cmp	r3, #57	; 0x39
 8025502:	d806      	bhi.n	8025512 <check_crc+0x2a>
 8025504:	687b      	ldr	r3, [r7, #4]
 8025506:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802550a:	011b      	lsls	r3, r3, #4
 802550c:	b2db      	uxtb	r3, r3
 802550e:	b25a      	sxtb	r2, r3
 8025510:	e026      	b.n	8025560 <check_crc+0x78>
 8025512:	687b      	ldr	r3, [r7, #4]
 8025514:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8025518:	2b60      	cmp	r3, #96	; 0x60
 802551a:	d90d      	bls.n	8025538 <check_crc+0x50>
 802551c:	687b      	ldr	r3, [r7, #4]
 802551e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8025522:	2b7a      	cmp	r3, #122	; 0x7a
 8025524:	d808      	bhi.n	8025538 <check_crc+0x50>
 8025526:	687b      	ldr	r3, [r7, #4]
 8025528:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802552c:	3b57      	subs	r3, #87	; 0x57
 802552e:	b2db      	uxtb	r3, r3
 8025530:	011b      	lsls	r3, r3, #4
 8025532:	b2db      	uxtb	r3, r3
 8025534:	b25a      	sxtb	r2, r3
 8025536:	e013      	b.n	8025560 <check_crc+0x78>
 8025538:	687b      	ldr	r3, [r7, #4]
 802553a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802553e:	2b40      	cmp	r3, #64	; 0x40
 8025540:	d90d      	bls.n	802555e <check_crc+0x76>
 8025542:	687b      	ldr	r3, [r7, #4]
 8025544:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8025548:	2b5a      	cmp	r3, #90	; 0x5a
 802554a:	d808      	bhi.n	802555e <check_crc+0x76>
 802554c:	687b      	ldr	r3, [r7, #4]
 802554e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8025552:	3b37      	subs	r3, #55	; 0x37
 8025554:	b2db      	uxtb	r3, r3
 8025556:	011b      	lsls	r3, r3, #4
 8025558:	b2db      	uxtb	r3, r3
 802555a:	b25a      	sxtb	r2, r3
 802555c:	e000      	b.n	8025560 <check_crc+0x78>
 802555e:	2200      	movs	r2, #0
 8025560:	687b      	ldr	r3, [r7, #4]
 8025562:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8025566:	2b2f      	cmp	r3, #47	; 0x2f
 8025568:	d90c      	bls.n	8025584 <check_crc+0x9c>
 802556a:	687b      	ldr	r3, [r7, #4]
 802556c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8025570:	2b39      	cmp	r3, #57	; 0x39
 8025572:	d807      	bhi.n	8025584 <check_crc+0x9c>
 8025574:	687b      	ldr	r3, [r7, #4]
 8025576:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 802557a:	b25b      	sxtb	r3, r3
 802557c:	f003 030f 	and.w	r3, r3, #15
 8025580:	b25b      	sxtb	r3, r3
 8025582:	e028      	b.n	80255d6 <check_crc+0xee>
 8025584:	687b      	ldr	r3, [r7, #4]
 8025586:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 802558a:	2b60      	cmp	r3, #96	; 0x60
 802558c:	d90e      	bls.n	80255ac <check_crc+0xc4>
 802558e:	687b      	ldr	r3, [r7, #4]
 8025590:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8025594:	2b7a      	cmp	r3, #122	; 0x7a
 8025596:	d809      	bhi.n	80255ac <check_crc+0xc4>
 8025598:	687b      	ldr	r3, [r7, #4]
 802559a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 802559e:	3b57      	subs	r3, #87	; 0x57
 80255a0:	b2db      	uxtb	r3, r3
 80255a2:	b25b      	sxtb	r3, r3
 80255a4:	f003 030f 	and.w	r3, r3, #15
 80255a8:	b25b      	sxtb	r3, r3
 80255aa:	e014      	b.n	80255d6 <check_crc+0xee>
 80255ac:	687b      	ldr	r3, [r7, #4]
 80255ae:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80255b2:	2b40      	cmp	r3, #64	; 0x40
 80255b4:	d90e      	bls.n	80255d4 <check_crc+0xec>
 80255b6:	687b      	ldr	r3, [r7, #4]
 80255b8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80255bc:	2b5a      	cmp	r3, #90	; 0x5a
 80255be:	d809      	bhi.n	80255d4 <check_crc+0xec>
 80255c0:	687b      	ldr	r3, [r7, #4]
 80255c2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80255c6:	3b37      	subs	r3, #55	; 0x37
 80255c8:	b2db      	uxtb	r3, r3
 80255ca:	b25b      	sxtb	r3, r3
 80255cc:	f003 030f 	and.w	r3, r3, #15
 80255d0:	b25b      	sxtb	r3, r3
 80255d2:	e000      	b.n	80255d6 <check_crc+0xee>
 80255d4:	2300      	movs	r3, #0
 80255d6:	4313      	orrs	r3, r2
 80255d8:	b25b      	sxtb	r3, r3
 80255da:	73fb      	strb	r3, [r7, #15]
    return nh->p.crc_calc == crc; /* They must match! */
 80255dc:	687b      	ldr	r3, [r7, #4]
 80255de:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80255e2:	7bfa      	ldrb	r2, [r7, #15]
 80255e4:	429a      	cmp	r2, r3
 80255e6:	bf0c      	ite	eq
 80255e8:	2301      	moveq	r3, #1
 80255ea:	2300      	movne	r3, #0
 80255ec:	b2db      	uxtb	r3, r3
}
 80255ee:	4618      	mov	r0, r3
 80255f0:	3714      	adds	r7, #20
 80255f2:	46bd      	mov	sp, r7
 80255f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80255f8:	4770      	bx	lr

080255fa <copy_from_tmp_memory>:
/**
 * @brief           Copy temporary memory to user memory
 * @param[in]       gh: NMEA handle
 * @return          `1` on success, `0` otherwise
 */
static uint8_t copy_from_tmp_memory(nmea_t *nh) {
 80255fa:	b580      	push	{r7, lr}
 80255fc:	b082      	sub	sp, #8
 80255fe:	af00      	add	r7, sp, #0
 8025600:	6078      	str	r0, [r7, #4]
    if (0) {
#if NMEA_CFG_STATEMENT_GPGGA
    } else if (nh->p.stat == STAT_GGA) {
 8025602:	687b      	ldr	r3, [r7, #4]
 8025604:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8025608:	2b01      	cmp	r3, #1
 802560a:	d129      	bne.n	8025660 <copy_from_tmp_memory+0x66>
        nh->latitude = nh->p.data.gga.latitude;
 802560c:	687b      	ldr	r3, [r7, #4]
 802560e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8025610:	687b      	ldr	r3, [r7, #4]
 8025612:	601a      	str	r2, [r3, #0]
        nh->longitude = nh->p.data.gga.longitude;
 8025614:	687b      	ldr	r3, [r7, #4]
 8025616:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8025618:	687b      	ldr	r3, [r7, #4]
 802561a:	605a      	str	r2, [r3, #4]
        nh->altitude = nh->p.data.gga.altitude;
 802561c:	687b      	ldr	r3, [r7, #4]
 802561e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8025620:	687b      	ldr	r3, [r7, #4]
 8025622:	609a      	str	r2, [r3, #8]
        nh->geo_sep = nh->p.data.gga.geo_sep;
 8025624:	687b      	ldr	r3, [r7, #4]
 8025626:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8025628:	687b      	ldr	r3, [r7, #4]
 802562a:	60da      	str	r2, [r3, #12]
        nh->sats_in_use = nh->p.data.gga.sats_in_use;
 802562c:	687b      	ldr	r3, [r7, #4]
 802562e:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8025632:	687b      	ldr	r3, [r7, #4]
 8025634:	741a      	strb	r2, [r3, #16]
        nh->fix = nh->p.data.gga.fix;
 8025636:	687b      	ldr	r3, [r7, #4]
 8025638:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 802563c:	687b      	ldr	r3, [r7, #4]
 802563e:	745a      	strb	r2, [r3, #17]
        nh->hours = nh->p.data.gga.hours;
 8025640:	687b      	ldr	r3, [r7, #4]
 8025642:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
 8025646:	687b      	ldr	r3, [r7, #4]
 8025648:	749a      	strb	r2, [r3, #18]
        nh->minutes = nh->p.data.gga.minutes;
 802564a:	687b      	ldr	r3, [r7, #4]
 802564c:	f893 206b 	ldrb.w	r2, [r3, #107]	; 0x6b
 8025650:	687b      	ldr	r3, [r7, #4]
 8025652:	74da      	strb	r2, [r3, #19]
        nh->seconds = nh->p.data.gga.seconds;
 8025654:	687b      	ldr	r3, [r7, #4]
 8025656:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
 802565a:	687b      	ldr	r3, [r7, #4]
 802565c:	751a      	strb	r2, [r3, #20]
 802565e:	e055      	b.n	802570c <copy_from_tmp_memory+0x112>
#endif /* NMEA_CFG_STATEMENT_GPGGA */
#if NMEA_CFG_STATEMENT_GPGSA
    } else if (nh->p.stat == STAT_GSA) {
 8025660:	687b      	ldr	r3, [r7, #4]
 8025662:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8025666:	2b02      	cmp	r3, #2
 8025668:	d11b      	bne.n	80256a2 <copy_from_tmp_memory+0xa8>
        nh->dop_h = nh->p.data.gsa.dop_h;
 802566a:	687b      	ldr	r3, [r7, #4]
 802566c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 802566e:	687b      	ldr	r3, [r7, #4]
 8025670:	619a      	str	r2, [r3, #24]
        nh->dop_p = nh->p.data.gsa.dop_p;
 8025672:	687b      	ldr	r3, [r7, #4]
 8025674:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8025676:	687b      	ldr	r3, [r7, #4]
 8025678:	621a      	str	r2, [r3, #32]
        nh->dop_v = nh->p.data.gsa.dop_v;
 802567a:	687b      	ldr	r3, [r7, #4]
 802567c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 802567e:	687b      	ldr	r3, [r7, #4]
 8025680:	61da      	str	r2, [r3, #28]
        nh->fix_mode = nh->p.data.gsa.fix_mode;
 8025682:	687b      	ldr	r3, [r7, #4]
 8025684:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 8025688:	687b      	ldr	r3, [r7, #4]
 802568a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        memcpy(nh->satellites_ids, nh->p.data.gsa.satellites_ids, sizeof(nh->satellites_ids));
 802568e:	687b      	ldr	r3, [r7, #4]
 8025690:	f103 0025 	add.w	r0, r3, #37	; 0x25
 8025694:	687b      	ldr	r3, [r7, #4]
 8025696:	3365      	adds	r3, #101	; 0x65
 8025698:	220c      	movs	r2, #12
 802569a:	4619      	mov	r1, r3
 802569c:	f01a f92d 	bl	803f8fa <memcpy>
 80256a0:	e034      	b.n	802570c <copy_from_tmp_memory+0x112>
#endif /* NMEA_CFG_STATEMENT_GPGSA */
#if NMEA_CFG_STATEMENT_GPGSV
    } else if (nh->p.stat == STAT_GSV) {
 80256a2:	687b      	ldr	r3, [r7, #4]
 80256a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80256a8:	2b03      	cmp	r3, #3
 80256aa:	d106      	bne.n	80256ba <copy_from_tmp_memory+0xc0>
        nh->sats_in_view = nh->p.data.gsv.sats_in_view;
 80256ac:	687b      	ldr	r3, [r7, #4]
 80256ae:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80256b2:	687b      	ldr	r3, [r7, #4]
 80256b4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80256b8:	e028      	b.n	802570c <copy_from_tmp_memory+0x112>
#endif /* NMEA_CFG_STATEMENT_GPGSV */
#if NMEA_CFG_STATEMENT_GPRMC
    } else if (nh->p.stat == STAT_RMC) {
 80256ba:	687b      	ldr	r3, [r7, #4]
 80256bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80256c0:	2b04      	cmp	r3, #4
 80256c2:	d123      	bne.n	802570c <copy_from_tmp_memory+0x112>
        nh->coarse = nh->p.data.rmc.coarse;
 80256c4:	687b      	ldr	r3, [r7, #4]
 80256c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80256c8:	687b      	ldr	r3, [r7, #4]
 80256ca:	639a      	str	r2, [r3, #56]	; 0x38
        nh->is_valid = nh->p.data.rmc.is_valid;
 80256cc:	687b      	ldr	r3, [r7, #4]
 80256ce:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80256d2:	687b      	ldr	r3, [r7, #4]
 80256d4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
        nh->speed = nh->p.data.rmc.speed;
 80256d8:	687b      	ldr	r3, [r7, #4]
 80256da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80256dc:	687b      	ldr	r3, [r7, #4]
 80256de:	635a      	str	r2, [r3, #52]	; 0x34
        nh->variation = nh->p.data.rmc.variation;
 80256e0:	687b      	ldr	r3, [r7, #4]
 80256e2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80256e4:	687b      	ldr	r3, [r7, #4]
 80256e6:	63da      	str	r2, [r3, #60]	; 0x3c
        nh->date = nh->p.data.rmc.date;
 80256e8:	687b      	ldr	r3, [r7, #4]
 80256ea:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
 80256ee:	687b      	ldr	r3, [r7, #4]
 80256f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        nh->month = nh->p.data.rmc.month;
 80256f4:	687b      	ldr	r3, [r7, #4]
 80256f6:	f893 205a 	ldrb.w	r2, [r3, #90]	; 0x5a
 80256fa:	687b      	ldr	r3, [r7, #4]
 80256fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        nh->year = nh->p.data.rmc.year;
 8025700:	687b      	ldr	r3, [r7, #4]
 8025702:	f893 205b 	ldrb.w	r2, [r3, #91]	; 0x5b
 8025706:	687b      	ldr	r3, [r7, #4]
 8025708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
#endif /* NMEA_CFG_STATEMENT_GPRMC */
    }
    return 1;
 802570c:	2301      	movs	r3, #1
}
 802570e:	4618      	mov	r0, r3
 8025710:	3708      	adds	r7, #8
 8025712:	46bd      	mov	sp, r7
 8025714:	bd80      	pop	{r7, pc}

08025716 <ce_set>:
/* Private functions prototype ------------------------------------------------*/
static void csn_set(nrf24l01 *dev);
static void csn_reset(nrf24l01 *dev);

/* Public functions implementation ---------------------------------------------*/
void ce_set(nrf24l01 *dev) {
 8025716:	b580      	push	{r7, lr}
 8025718:	b082      	sub	sp, #8
 802571a:	af00      	add	r7, sp, #0
 802571c:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(dev->config.ce_port, dev->config.ce_pin, GPIO_PIN_SET);
 802571e:	687b      	ldr	r3, [r7, #4]
 8025720:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8025722:	687b      	ldr	r3, [r7, #4]
 8025724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8025726:	2201      	movs	r2, #1
 8025728:	4619      	mov	r1, r3
 802572a:	f00a fd11 	bl	8030150 <HAL_GPIO_WritePin>
}
 802572e:	bf00      	nop
 8025730:	3708      	adds	r7, #8
 8025732:	46bd      	mov	sp, r7
 8025734:	bd80      	pop	{r7, pc}

08025736 <ce_reset>:

void ce_reset(nrf24l01 *dev) {
 8025736:	b580      	push	{r7, lr}
 8025738:	b082      	sub	sp, #8
 802573a:	af00      	add	r7, sp, #0
 802573c:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(dev->config.ce_port, dev->config.ce_pin, GPIO_PIN_RESET);
 802573e:	687b      	ldr	r3, [r7, #4]
 8025740:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8025742:	687b      	ldr	r3, [r7, #4]
 8025744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8025746:	2200      	movs	r2, #0
 8025748:	4619      	mov	r1, r3
 802574a:	f00a fd01 	bl	8030150 <HAL_GPIO_WritePin>
}
 802574e:	bf00      	nop
 8025750:	3708      	adds	r7, #8
 8025752:	46bd      	mov	sp, r7
 8025754:	bd80      	pop	{r7, pc}
	...

08025758 <nrf_init>:
    config->irq_pin = INT_KEYLESS_IRQ_Pin;

    return NRF_OK;
}

NRF_RESULT nrf_init(nrf24l01 *dev, nrf24l01_config *config) {
 8025758:	b5b0      	push	{r4, r5, r7, lr}
 802575a:	b084      	sub	sp, #16
 802575c:	af00      	add	r7, sp, #0
 802575e:	6078      	str	r0, [r7, #4]
 8025760:	6039      	str	r1, [r7, #0]
    dev->config = *config;
 8025762:	687a      	ldr	r2, [r7, #4]
 8025764:	683b      	ldr	r3, [r7, #0]
 8025766:	4614      	mov	r4, r2
 8025768:	461d      	mov	r5, r3
 802576a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802576c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802576e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025770:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025772:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025774:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025776:	682b      	ldr	r3, [r5, #0]
 8025778:	6023      	str	r3, [r4, #0]
    uint8_t config_reg = 0;
 802577a:	2300      	movs	r3, #0
 802577c:	73bb      	strb	r3, [r7, #14]

    // check hardware
    NRF_RESULT result = NRF_OK;
 802577e:	2300      	movs	r3, #0
 8025780:	73fb      	strb	r3, [r7, #15]
    do {
        LOG_StrLn("NRF:Init");
 8025782:	4850      	ldr	r0, [pc, #320]	; (80258c4 <nrf_init+0x16c>)
 8025784:	f018 fdf6 	bl	803e374 <LOG_StrLn>

        // turn on the mosfet
        HAL_GPIO_WritePin(INT_KEYLESS_PWR_GPIO_Port, INT_KEYLESS_PWR_Pin, 0);
 8025788:	2200      	movs	r2, #0
 802578a:	2120      	movs	r1, #32
 802578c:	484e      	ldr	r0, [pc, #312]	; (80258c8 <nrf_init+0x170>)
 802578e:	f00a fcdf 	bl	8030150 <HAL_GPIO_WritePin>
        _DelayMS(500);
 8025792:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8025796:	f019 ff91 	bl	803f6bc <_DelayMS>
        HAL_GPIO_WritePin(INT_KEYLESS_PWR_GPIO_Port, INT_KEYLESS_PWR_Pin, 1);
 802579a:	2201      	movs	r2, #1
 802579c:	2120      	movs	r1, #32
 802579e:	484a      	ldr	r0, [pc, #296]	; (80258c8 <nrf_init+0x170>)
 80257a0:	f00a fcd6 	bl	8030150 <HAL_GPIO_WritePin>
        _DelayMS(500);
 80257a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80257a8:	f019 ff88 	bl	803f6bc <_DelayMS>

        result = nrf_check(&nrf);
 80257ac:	4847      	ldr	r0, [pc, #284]	; (80258cc <nrf_init+0x174>)
 80257ae:	f000 f88f 	bl	80258d0 <nrf_check>
 80257b2:	4603      	mov	r3, r0
 80257b4:	73fb      	strb	r3, [r7, #15]

        if (result == NRF_ERROR) {
 80257b6:	7bfb      	ldrb	r3, [r7, #15]
 80257b8:	2b01      	cmp	r3, #1
 80257ba:	d103      	bne.n	80257c4 <nrf_init+0x6c>
            _DelayMS(1000);
 80257bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80257c0:	f019 ff7c 	bl	803f6bc <_DelayMS>
        }
    } while (result == NRF_ERROR);
 80257c4:	7bfb      	ldrb	r3, [r7, #15]
 80257c6:	2b01      	cmp	r3, #1
 80257c8:	d0db      	beq.n	8025782 <nrf_init+0x2a>

    // enter standby I mode
    ce_reset(dev);
 80257ca:	6878      	ldr	r0, [r7, #4]
 80257cc:	f7ff ffb3 	bl	8025736 <ce_reset>
    nrf_power_up(dev, 1);
 80257d0:	2101      	movs	r1, #1
 80257d2:	6878      	ldr	r0, [r7, #4]
 80257d4:	f000 fcf9 	bl	80261ca <nrf_power_up>

    // wait for powerup
    while ((config_reg & 2) == 0) {
 80257d8:	e006      	b.n	80257e8 <nrf_init+0x90>
        nrf_read_register(dev, NRF_CONFIG, &config_reg);
 80257da:	f107 030e 	add.w	r3, r7, #14
 80257de:	461a      	mov	r2, r3
 80257e0:	2100      	movs	r1, #0
 80257e2:	6878      	ldr	r0, [r7, #4]
 80257e4:	f000 f980 	bl	8025ae8 <nrf_read_register>
    while ((config_reg & 2) == 0) {
 80257e8:	7bbb      	ldrb	r3, [r7, #14]
 80257ea:	f003 0302 	and.w	r3, r3, #2
 80257ee:	2b00      	cmp	r3, #0
 80257f0:	d0f3      	beq.n	80257da <nrf_init+0x82>
    }

    // address width
    nrf_set_address_width(dev, dev->config.addr_width);
 80257f2:	687b      	ldr	r3, [r7, #4]
 80257f4:	78db      	ldrb	r3, [r3, #3]
 80257f6:	4619      	mov	r1, r3
 80257f8:	6878      	ldr	r0, [r7, #4]
 80257fa:	f000 fc05 	bl	8026008 <nrf_set_address_width>
    // openWritingPipe
    nrf_set_tx_address(dev, dev->config.tx_address);
 80257fe:	687b      	ldr	r3, [r7, #4]
 8025800:	68db      	ldr	r3, [r3, #12]
 8025802:	4619      	mov	r1, r3
 8025804:	6878      	ldr	r0, [r7, #4]
 8025806:	f000 fdfb 	bl	8026400 <nrf_set_tx_address>
    // openReadingPipe
    nrf_set_rx_payload_width_p0(dev, dev->config.payload_length);
 802580a:	687b      	ldr	r3, [r7, #4]
 802580c:	791b      	ldrb	r3, [r3, #4]
 802580e:	4619      	mov	r1, r3
 8025810:	6878      	ldr	r0, [r7, #4]
 8025812:	f000 fe11 	bl	8026438 <nrf_set_rx_payload_width_p0>
    nrf_set_rx_address_p0(dev, dev->config.rx_address);
 8025816:	687b      	ldr	r3, [r7, #4]
 8025818:	689b      	ldr	r3, [r3, #8]
 802581a:	4619      	mov	r1, r3
 802581c:	6878      	ldr	r0, [r7, #4]
 802581e:	f000 fdd3 	bl	80263c8 <nrf_set_rx_address_p0>
    // enable data pipe0
    nrf_set_rx_pipes(dev, 0x01);
 8025822:	2101      	movs	r1, #1
 8025824:	6878      	ldr	r0, [r7, #4]
 8025826:	f000 fc21 	bl	802606c <nrf_set_rx_pipes>

    // CRC
    nrf_enable_crc(dev, 1);
 802582a:	2101      	movs	r1, #1
 802582c:	6878      	ldr	r0, [r7, #4]
 802582e:	f000 fc63 	bl	80260f8 <nrf_enable_crc>
    nrf_set_crc_width(dev, dev->config.crc_width);
 8025832:	687b      	ldr	r3, [r7, #4]
 8025834:	789b      	ldrb	r3, [r3, #2]
 8025836:	4619      	mov	r1, r3
 8025838:	6878      	ldr	r0, [r7, #4]
 802583a:	f000 fc90 	bl	802615e <nrf_set_crc_width>
    // channel
    nrf_set_rf_channel(dev, dev->config.rf_channel);
 802583e:	687b      	ldr	r3, [r7, #4]
 8025840:	79db      	ldrb	r3, [r3, #7]
 8025842:	4619      	mov	r1, r3
 8025844:	6878      	ldr	r0, [r7, #4]
 8025846:	f000 fb3e 	bl	8025ec6 <nrf_set_rf_channel>
    // data rate
    nrf_set_data_rate(dev, dev->config.data_rate);
 802584a:	687b      	ldr	r3, [r7, #4]
 802584c:	781b      	ldrb	r3, [r3, #0]
 802584e:	4619      	mov	r1, r3
 8025850:	6878      	ldr	r0, [r7, #4]
 8025852:	f000 fa92 	bl	8025d7a <nrf_set_data_rate>
    // tx power
    nrf_set_tx_power(dev, dev->config.tx_power);
 8025856:	687b      	ldr	r3, [r7, #4]
 8025858:	785b      	ldrb	r3, [r3, #1]
 802585a:	4619      	mov	r1, r3
 802585c:	6878      	ldr	r0, [r7, #4]
 802585e:	f000 fad4 	bl	8025e0a <nrf_set_tx_power>

    // retransmission (auto-ack ON)
    nrf_set_retransmittion_count(dev, dev->config.retransmit_count);
 8025862:	687b      	ldr	r3, [r7, #4]
 8025864:	795b      	ldrb	r3, [r3, #5]
 8025866:	4619      	mov	r1, r3
 8025868:	6878      	ldr	r0, [r7, #4]
 802586a:	f000 fb5d 	bl	8025f28 <nrf_set_retransmittion_count>
    nrf_set_retransmittion_delay(dev, dev->config.retransmit_delay);
 802586e:	687b      	ldr	r3, [r7, #4]
 8025870:	799b      	ldrb	r3, [r3, #6]
 8025872:	4619      	mov	r1, r3
 8025874:	6878      	ldr	r0, [r7, #4]
 8025876:	f000 fb8d 	bl	8025f94 <nrf_set_retransmittion_delay>
    // auto ack (Enhanced ShockBurst) on pipe0
    nrf_enable_auto_ack(dev, 0x00);
 802587a:	2100      	movs	r1, #0
 802587c:	6878      	ldr	r0, [r7, #4]
 802587e:	f000 fc0b 	bl	8026098 <nrf_enable_auto_ack>
    //	nrf_disable_auto_ack(dev);

    // clear interrupt
    nrf_clear_interrupts(dev);
 8025882:	6878      	ldr	r0, [r7, #4]
 8025884:	f000 faf7 	bl	8025e76 <nrf_clear_interrupts>
    // set interrupt
    nrf_enable_rx_data_ready_irq(dev, 1);
 8025888:	2101      	movs	r1, #1
 802588a:	6878      	ldr	r0, [r7, #4]
 802588c:	f000 fd03 	bl	8026296 <nrf_enable_rx_data_ready_irq>
    nrf_enable_tx_data_sent_irq(dev, 1);
 8025890:	2101      	movs	r1, #1
 8025892:	6878      	ldr	r0, [r7, #4]
 8025894:	f000 fd32 	bl	80262fc <nrf_enable_tx_data_sent_irq>
    nrf_enable_max_retransmit_irq(dev, 1);
 8025898:	2101      	movs	r1, #1
 802589a:	6878      	ldr	r0, [r7, #4]
 802589c:	f000 fd61 	bl	8026362 <nrf_enable_max_retransmit_irq>

    // set as PRX
    nrf_rx_tx_control(dev, NRF_STATE_RX);
 80258a0:	2101      	movs	r1, #1
 80258a2:	6878      	ldr	r0, [r7, #4]
 80258a4:	f000 fcc4 	bl	8026230 <nrf_rx_tx_control>
    // clear FIFO
    nrf_flush_tx(dev);
 80258a8:	6878      	ldr	r0, [r7, #4]
 80258aa:	f000 fa2c 	bl	8025d06 <nrf_flush_tx>
    nrf_flush_rx(dev);
 80258ae:	6878      	ldr	r0, [r7, #4]
 80258b0:	f000 fa46 	bl	8025d40 <nrf_flush_rx>
    // exit standby mode, now become RX MODE
    ce_set(dev);
 80258b4:	6878      	ldr	r0, [r7, #4]
 80258b6:	f7ff ff2e 	bl	8025716 <ce_set>

    return NRF_OK;
 80258ba:	2300      	movs	r3, #0
}
 80258bc:	4618      	mov	r0, r3
 80258be:	3710      	adds	r7, #16
 80258c0:	46bd      	mov	sp, r7
 80258c2:	bdb0      	pop	{r4, r5, r7, pc}
 80258c4:	0804344c 	.word	0x0804344c
 80258c8:	40020400 	.word	0x40020400
 80258cc:	20008414 	.word	0x20008414

080258d0 <nrf_check>:

// Checks the presence of the nRF24L01
NRF_RESULT nrf_check(nrf24l01 *dev) {
 80258d0:	b580      	push	{r7, lr}
 80258d2:	b086      	sub	sp, #24
 80258d4:	af00      	add	r7, sp, #0
 80258d6:	6078      	str	r0, [r7, #4]
    char *nRF24_TEST_ADDR = "nRF24";
 80258d8:	4b16      	ldr	r3, [pc, #88]	; (8025934 <nrf_check+0x64>)
 80258da:	60fb      	str	r3, [r7, #12]
    uint8_t rxbuf[sizeof(nRF24_TEST_ADDR) - 1U];
    uint8_t *ptr = (uint8_t*) nRF24_TEST_ADDR;
 80258dc:	68fb      	ldr	r3, [r7, #12]
 80258de:	617b      	str	r3, [r7, #20]
    uint8_t idx;

    // Write the test address to the TX_ADDR register
    nrf_write_register_mb(dev, NRF_TX_ADDR, ptr, sizeof(nRF24_TEST_ADDR) - 1U);
 80258e0:	2303      	movs	r3, #3
 80258e2:	697a      	ldr	r2, [r7, #20]
 80258e4:	2110      	movs	r1, #16
 80258e6:	6878      	ldr	r0, [r7, #4]
 80258e8:	f000 f963 	bl	8025bb2 <nrf_write_register_mb>
    // Read it back to the buffer
    nrf_read_register_mb(dev, NRF_TX_ADDR, rxbuf, sizeof(nRF24_TEST_ADDR) - 1U);
 80258ec:	f107 0208 	add.w	r2, r7, #8
 80258f0:	2303      	movs	r3, #3
 80258f2:	2110      	movs	r1, #16
 80258f4:	6878      	ldr	r0, [r7, #4]
 80258f6:	f000 f913 	bl	8025b20 <nrf_read_register_mb>

    // Compare transmitted and received data...
    for (idx = 0U; idx < sizeof(nRF24_TEST_ADDR) - 1U; idx++) {
 80258fa:	2300      	movs	r3, #0
 80258fc:	74fb      	strb	r3, [r7, #19]
 80258fe:	e010      	b.n	8025922 <nrf_check+0x52>
        if (rxbuf[idx] != *ptr++) {
 8025900:	7cfb      	ldrb	r3, [r7, #19]
 8025902:	f107 0218 	add.w	r2, r7, #24
 8025906:	4413      	add	r3, r2
 8025908:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 802590c:	697b      	ldr	r3, [r7, #20]
 802590e:	1c59      	adds	r1, r3, #1
 8025910:	6179      	str	r1, [r7, #20]
 8025912:	781b      	ldrb	r3, [r3, #0]
 8025914:	429a      	cmp	r2, r3
 8025916:	d001      	beq.n	802591c <nrf_check+0x4c>
            // The transceiver is absent
            return NRF_ERROR;
 8025918:	2301      	movs	r3, #1
 802591a:	e006      	b.n	802592a <nrf_check+0x5a>
    for (idx = 0U; idx < sizeof(nRF24_TEST_ADDR) - 1U; idx++) {
 802591c:	7cfb      	ldrb	r3, [r7, #19]
 802591e:	3301      	adds	r3, #1
 8025920:	74fb      	strb	r3, [r7, #19]
 8025922:	7cfb      	ldrb	r3, [r7, #19]
 8025924:	2b02      	cmp	r3, #2
 8025926:	d9eb      	bls.n	8025900 <nrf_check+0x30>
        }
    }

    // The transceiver is present
    return NRF_OK;
 8025928:	2300      	movs	r3, #0
}
 802592a:	4618      	mov	r0, r3
 802592c:	3718      	adds	r7, #24
 802592e:	46bd      	mov	sp, r7
 8025930:	bd80      	pop	{r7, pc}
 8025932:	bf00      	nop
 8025934:	08043458 	.word	0x08043458

08025938 <nrf_send_command>:

NRF_RESULT nrf_send_command(nrf24l01 *dev, NRF_COMMAND cmd, const uint8_t *tx,
        uint8_t *rx, uint8_t len) {
 8025938:	b5b0      	push	{r4, r5, r7, lr}
 802593a:	b08c      	sub	sp, #48	; 0x30
 802593c:	af02      	add	r7, sp, #8
 802593e:	60f8      	str	r0, [r7, #12]
 8025940:	607a      	str	r2, [r7, #4]
 8025942:	603b      	str	r3, [r7, #0]
 8025944:	460b      	mov	r3, r1
 8025946:	72fb      	strb	r3, [r7, #11]
 8025948:	466b      	mov	r3, sp
 802594a:	461d      	mov	r5, r3
    uint8_t myTX[len + 1];
 802594c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8025950:	1c58      	adds	r0, r3, #1
 8025952:	1e43      	subs	r3, r0, #1
 8025954:	623b      	str	r3, [r7, #32]
 8025956:	4603      	mov	r3, r0
 8025958:	4619      	mov	r1, r3
 802595a:	f04f 0200 	mov.w	r2, #0
 802595e:	f04f 0300 	mov.w	r3, #0
 8025962:	f04f 0400 	mov.w	r4, #0
 8025966:	00d4      	lsls	r4, r2, #3
 8025968:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 802596c:	00cb      	lsls	r3, r1, #3
 802596e:	4603      	mov	r3, r0
 8025970:	4619      	mov	r1, r3
 8025972:	f04f 0200 	mov.w	r2, #0
 8025976:	f04f 0300 	mov.w	r3, #0
 802597a:	f04f 0400 	mov.w	r4, #0
 802597e:	00d4      	lsls	r4, r2, #3
 8025980:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8025984:	00cb      	lsls	r3, r1, #3
 8025986:	4603      	mov	r3, r0
 8025988:	3307      	adds	r3, #7
 802598a:	08db      	lsrs	r3, r3, #3
 802598c:	00db      	lsls	r3, r3, #3
 802598e:	ebad 0d03 	sub.w	sp, sp, r3
 8025992:	ab02      	add	r3, sp, #8
 8025994:	3300      	adds	r3, #0
 8025996:	61fb      	str	r3, [r7, #28]
    uint8_t myRX[len + 1];
 8025998:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 802599c:	1c58      	adds	r0, r3, #1
 802599e:	1e43      	subs	r3, r0, #1
 80259a0:	61bb      	str	r3, [r7, #24]
 80259a2:	4603      	mov	r3, r0
 80259a4:	4619      	mov	r1, r3
 80259a6:	f04f 0200 	mov.w	r2, #0
 80259aa:	f04f 0300 	mov.w	r3, #0
 80259ae:	f04f 0400 	mov.w	r4, #0
 80259b2:	00d4      	lsls	r4, r2, #3
 80259b4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80259b8:	00cb      	lsls	r3, r1, #3
 80259ba:	4603      	mov	r3, r0
 80259bc:	4619      	mov	r1, r3
 80259be:	f04f 0200 	mov.w	r2, #0
 80259c2:	f04f 0300 	mov.w	r3, #0
 80259c6:	f04f 0400 	mov.w	r4, #0
 80259ca:	00d4      	lsls	r4, r2, #3
 80259cc:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80259d0:	00cb      	lsls	r3, r1, #3
 80259d2:	4603      	mov	r3, r0
 80259d4:	3307      	adds	r3, #7
 80259d6:	08db      	lsrs	r3, r3, #3
 80259d8:	00db      	lsls	r3, r3, #3
 80259da:	ebad 0d03 	sub.w	sp, sp, r3
 80259de:	ab02      	add	r3, sp, #8
 80259e0:	3300      	adds	r3, #0
 80259e2:	617b      	str	r3, [r7, #20]
    myTX[0] = cmd;
 80259e4:	69fb      	ldr	r3, [r7, #28]
 80259e6:	7afa      	ldrb	r2, [r7, #11]
 80259e8:	701a      	strb	r2, [r3, #0]

    int i = 0;
 80259ea:	2300      	movs	r3, #0
 80259ec:	627b      	str	r3, [r7, #36]	; 0x24
    for (i = 0; i < len; i++) {
 80259ee:	2300      	movs	r3, #0
 80259f0:	627b      	str	r3, [r7, #36]	; 0x24
 80259f2:	e00f      	b.n	8025a14 <nrf_send_command+0xdc>
        myTX[1 + i] = tx[i];
 80259f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80259f6:	687a      	ldr	r2, [r7, #4]
 80259f8:	441a      	add	r2, r3
 80259fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80259fc:	3301      	adds	r3, #1
 80259fe:	7811      	ldrb	r1, [r2, #0]
 8025a00:	69fa      	ldr	r2, [r7, #28]
 8025a02:	54d1      	strb	r1, [r2, r3]
        myRX[i] = 0;
 8025a04:	697a      	ldr	r2, [r7, #20]
 8025a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025a08:	4413      	add	r3, r2
 8025a0a:	2200      	movs	r2, #0
 8025a0c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < len; i++) {
 8025a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025a10:	3301      	adds	r3, #1
 8025a12:	627b      	str	r3, [r7, #36]	; 0x24
 8025a14:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8025a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025a1a:	429a      	cmp	r2, r3
 8025a1c:	dbea      	blt.n	80259f4 <nrf_send_command+0xbc>
    }

    csn_reset(dev);
 8025a1e:	68f8      	ldr	r0, [r7, #12]
 8025a20:	f000 fe07 	bl	8026632 <csn_reset>

    /* Wait for SPIx Busy flag */
    while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_BSY))
 8025a24:	bf00      	nop
 8025a26:	4b1b      	ldr	r3, [pc, #108]	; (8025a94 <nrf_send_command+0x15c>)
 8025a28:	681b      	ldr	r3, [r3, #0]
 8025a2a:	689b      	ldr	r3, [r3, #8]
 8025a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8025a30:	2b80      	cmp	r3, #128	; 0x80
 8025a32:	d0f8      	beq.n	8025a26 <nrf_send_command+0xee>
        ;

    if (HAL_SPI_TransmitReceive(dev->config.spi, myTX, myRX, 1 + len,
 8025a34:	68fb      	ldr	r3, [r7, #12]
 8025a36:	6958      	ldr	r0, [r3, #20]
 8025a38:	69f9      	ldr	r1, [r7, #28]
 8025a3a:	697a      	ldr	r2, [r7, #20]
 8025a3c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8025a40:	b29b      	uxth	r3, r3
 8025a42:	3301      	adds	r3, #1
 8025a44:	b29c      	uxth	r4, r3
 8025a46:	68fb      	ldr	r3, [r7, #12]
 8025a48:	699b      	ldr	r3, [r3, #24]
 8025a4a:	9300      	str	r3, [sp, #0]
 8025a4c:	4623      	mov	r3, r4
 8025a4e:	f00f fdcc 	bl	80355ea <HAL_SPI_TransmitReceive>
 8025a52:	4603      	mov	r3, r0
 8025a54:	2b00      	cmp	r3, #0
 8025a56:	d001      	beq.n	8025a5c <nrf_send_command+0x124>
            dev->config.spi_timeout) != HAL_OK) {
        return NRF_ERROR;
 8025a58:	2301      	movs	r3, #1
 8025a5a:	e016      	b.n	8025a8a <nrf_send_command+0x152>
    }

    for (i = 0; i < len; i++) {
 8025a5c:	2300      	movs	r3, #0
 8025a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8025a60:	e00a      	b.n	8025a78 <nrf_send_command+0x140>
        rx[i] = myRX[1 + i];
 8025a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025a64:	1c5a      	adds	r2, r3, #1
 8025a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025a68:	6839      	ldr	r1, [r7, #0]
 8025a6a:	440b      	add	r3, r1
 8025a6c:	6979      	ldr	r1, [r7, #20]
 8025a6e:	5c8a      	ldrb	r2, [r1, r2]
 8025a70:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < len; i++) {
 8025a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025a74:	3301      	adds	r3, #1
 8025a76:	627b      	str	r3, [r7, #36]	; 0x24
 8025a78:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8025a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025a7e:	429a      	cmp	r2, r3
 8025a80:	dbef      	blt.n	8025a62 <nrf_send_command+0x12a>
    }

    csn_set(dev);
 8025a82:	68f8      	ldr	r0, [r7, #12]
 8025a84:	f000 fdc5 	bl	8026612 <csn_set>

    return NRF_OK;
 8025a88:	2300      	movs	r3, #0
 8025a8a:	46ad      	mov	sp, r5
}
 8025a8c:	4618      	mov	r0, r3
 8025a8e:	3728      	adds	r7, #40	; 0x28
 8025a90:	46bd      	mov	sp, r7
 8025a92:	bdb0      	pop	{r4, r5, r7, pc}
 8025a94:	200088d8 	.word	0x200088d8

08025a98 <nrf_send_command_single>:

uint8_t nrf_send_command_single(nrf24l01 *dev, uint8_t data) {
 8025a98:	b580      	push	{r7, lr}
 8025a9a:	b086      	sub	sp, #24
 8025a9c:	af02      	add	r7, sp, #8
 8025a9e:	6078      	str	r0, [r7, #4]
 8025aa0:	460b      	mov	r3, r1
 8025aa2:	70fb      	strb	r3, [r7, #3]
    uint8_t rx;
    /* Wait for SPIx Busy flag */
    while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_BSY) != RESET)
 8025aa4:	bf00      	nop
 8025aa6:	4b0f      	ldr	r3, [pc, #60]	; (8025ae4 <nrf_send_command_single+0x4c>)
 8025aa8:	681b      	ldr	r3, [r3, #0]
 8025aaa:	689b      	ldr	r3, [r3, #8]
 8025aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8025ab0:	2b80      	cmp	r3, #128	; 0x80
 8025ab2:	d0f8      	beq.n	8025aa6 <nrf_send_command_single+0xe>
        ;
    //	Tx buffer empty flag
    while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 8025ab4:	bf00      	nop
 8025ab6:	4b0b      	ldr	r3, [pc, #44]	; (8025ae4 <nrf_send_command_single+0x4c>)
 8025ab8:	681b      	ldr	r3, [r3, #0]
 8025aba:	689b      	ldr	r3, [r3, #8]
 8025abc:	f003 0302 	and.w	r3, r3, #2
 8025ac0:	2b02      	cmp	r3, #2
 8025ac2:	d1f8      	bne.n	8025ab6 <nrf_send_command_single+0x1e>
        ;

    HAL_SPI_TransmitReceive(dev->config.spi, &data, &rx, 1,
 8025ac4:	687b      	ldr	r3, [r7, #4]
 8025ac6:	6958      	ldr	r0, [r3, #20]
 8025ac8:	687b      	ldr	r3, [r7, #4]
 8025aca:	699b      	ldr	r3, [r3, #24]
 8025acc:	f107 020f 	add.w	r2, r7, #15
 8025ad0:	1cf9      	adds	r1, r7, #3
 8025ad2:	9300      	str	r3, [sp, #0]
 8025ad4:	2301      	movs	r3, #1
 8025ad6:	f00f fd88 	bl	80355ea <HAL_SPI_TransmitReceive>
            dev->config.spi_timeout);

    return rx;
 8025ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8025adc:	4618      	mov	r0, r3
 8025ade:	3710      	adds	r7, #16
 8025ae0:	46bd      	mov	sp, r7
 8025ae2:	bd80      	pop	{r7, pc}
 8025ae4:	200088d8 	.word	0x200088d8

08025ae8 <nrf_read_register>:

NRF_RESULT nrf_read_register(nrf24l01 *dev, uint8_t reg, uint8_t *data) {
 8025ae8:	b580      	push	{r7, lr}
 8025aea:	b088      	sub	sp, #32
 8025aec:	af02      	add	r7, sp, #8
 8025aee:	60f8      	str	r0, [r7, #12]
 8025af0:	460b      	mov	r3, r1
 8025af2:	607a      	str	r2, [r7, #4]
 8025af4:	72fb      	strb	r3, [r7, #11]
    uint8_t tx = 0;
 8025af6:	2300      	movs	r3, #0
 8025af8:	75fb      	strb	r3, [r7, #23]
    if (nrf_send_command(dev, NRF_CMD_R_REGISTER | reg, &tx, data, 1)
 8025afa:	f107 0217 	add.w	r2, r7, #23
 8025afe:	7af9      	ldrb	r1, [r7, #11]
 8025b00:	2301      	movs	r3, #1
 8025b02:	9300      	str	r3, [sp, #0]
 8025b04:	687b      	ldr	r3, [r7, #4]
 8025b06:	68f8      	ldr	r0, [r7, #12]
 8025b08:	f7ff ff16 	bl	8025938 <nrf_send_command>
 8025b0c:	4603      	mov	r3, r0
 8025b0e:	2b00      	cmp	r3, #0
 8025b10:	d001      	beq.n	8025b16 <nrf_read_register+0x2e>
            != NRF_OK) {
        return NRF_ERROR;
 8025b12:	2301      	movs	r3, #1
 8025b14:	e000      	b.n	8025b18 <nrf_read_register+0x30>
    }
    return NRF_OK;
 8025b16:	2300      	movs	r3, #0
}
 8025b18:	4618      	mov	r0, r3
 8025b1a:	3718      	adds	r7, #24
 8025b1c:	46bd      	mov	sp, r7
 8025b1e:	bd80      	pop	{r7, pc}

08025b20 <nrf_read_register_mb>:

NRF_RESULT nrf_read_register_mb(nrf24l01 *dev, uint8_t reg, uint8_t *data,
        uint8_t count) {
 8025b20:	b590      	push	{r4, r7, lr}
 8025b22:	b085      	sub	sp, #20
 8025b24:	af00      	add	r7, sp, #0
 8025b26:	60f8      	str	r0, [r7, #12]
 8025b28:	607a      	str	r2, [r7, #4]
 8025b2a:	461a      	mov	r2, r3
 8025b2c:	460b      	mov	r3, r1
 8025b2e:	72fb      	strb	r3, [r7, #11]
 8025b30:	4613      	mov	r3, r2
 8025b32:	72bb      	strb	r3, [r7, #10]
    csn_reset(dev);
 8025b34:	68f8      	ldr	r0, [r7, #12]
 8025b36:	f000 fd7c 	bl	8026632 <csn_reset>
    nrf_send_command_single(dev, NRF_CMD_R_REGISTER | reg);
 8025b3a:	7afb      	ldrb	r3, [r7, #11]
 8025b3c:	4619      	mov	r1, r3
 8025b3e:	68f8      	ldr	r0, [r7, #12]
 8025b40:	f7ff ffaa 	bl	8025a98 <nrf_send_command_single>
    while (count--) {
 8025b44:	e008      	b.n	8025b58 <nrf_read_register_mb+0x38>
        *data++ = nrf_send_command_single(dev, NRF_CMD_NOP);
 8025b46:	687c      	ldr	r4, [r7, #4]
 8025b48:	1c63      	adds	r3, r4, #1
 8025b4a:	607b      	str	r3, [r7, #4]
 8025b4c:	21ff      	movs	r1, #255	; 0xff
 8025b4e:	68f8      	ldr	r0, [r7, #12]
 8025b50:	f7ff ffa2 	bl	8025a98 <nrf_send_command_single>
 8025b54:	4603      	mov	r3, r0
 8025b56:	7023      	strb	r3, [r4, #0]
    while (count--) {
 8025b58:	7abb      	ldrb	r3, [r7, #10]
 8025b5a:	1e5a      	subs	r2, r3, #1
 8025b5c:	72ba      	strb	r2, [r7, #10]
 8025b5e:	2b00      	cmp	r3, #0
 8025b60:	d1f1      	bne.n	8025b46 <nrf_read_register_mb+0x26>
    }
    csn_set(dev);
 8025b62:	68f8      	ldr	r0, [r7, #12]
 8025b64:	f000 fd55 	bl	8026612 <csn_set>
    return NRF_OK;
 8025b68:	2300      	movs	r3, #0
}
 8025b6a:	4618      	mov	r0, r3
 8025b6c:	3714      	adds	r7, #20
 8025b6e:	46bd      	mov	sp, r7
 8025b70:	bd90      	pop	{r4, r7, pc}

08025b72 <nrf_write_register>:

NRF_RESULT nrf_write_register(nrf24l01 *dev, uint8_t reg, uint8_t *data) {
 8025b72:	b580      	push	{r7, lr}
 8025b74:	b088      	sub	sp, #32
 8025b76:	af02      	add	r7, sp, #8
 8025b78:	60f8      	str	r0, [r7, #12]
 8025b7a:	460b      	mov	r3, r1
 8025b7c:	607a      	str	r2, [r7, #4]
 8025b7e:	72fb      	strb	r3, [r7, #11]
    uint8_t rx = 0;
 8025b80:	2300      	movs	r3, #0
 8025b82:	75fb      	strb	r3, [r7, #23]
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | reg, data, &rx, 1)
 8025b84:	7afb      	ldrb	r3, [r7, #11]
 8025b86:	f043 0320 	orr.w	r3, r3, #32
 8025b8a:	b2d9      	uxtb	r1, r3
 8025b8c:	f107 0217 	add.w	r2, r7, #23
 8025b90:	2301      	movs	r3, #1
 8025b92:	9300      	str	r3, [sp, #0]
 8025b94:	4613      	mov	r3, r2
 8025b96:	687a      	ldr	r2, [r7, #4]
 8025b98:	68f8      	ldr	r0, [r7, #12]
 8025b9a:	f7ff fecd 	bl	8025938 <nrf_send_command>
 8025b9e:	4603      	mov	r3, r0
 8025ba0:	2b00      	cmp	r3, #0
 8025ba2:	d001      	beq.n	8025ba8 <nrf_write_register+0x36>
            != NRF_OK) {
        return NRF_ERROR;
 8025ba4:	2301      	movs	r3, #1
 8025ba6:	e000      	b.n	8025baa <nrf_write_register+0x38>
    }
    return NRF_OK;
 8025ba8:	2300      	movs	r3, #0
}
 8025baa:	4618      	mov	r0, r3
 8025bac:	3718      	adds	r7, #24
 8025bae:	46bd      	mov	sp, r7
 8025bb0:	bd80      	pop	{r7, pc}

08025bb2 <nrf_write_register_mb>:

NRF_RESULT nrf_write_register_mb(nrf24l01 *dev, uint8_t reg, uint8_t *data,
        uint8_t count) {
 8025bb2:	b580      	push	{r7, lr}
 8025bb4:	b084      	sub	sp, #16
 8025bb6:	af00      	add	r7, sp, #0
 8025bb8:	60f8      	str	r0, [r7, #12]
 8025bba:	607a      	str	r2, [r7, #4]
 8025bbc:	461a      	mov	r2, r3
 8025bbe:	460b      	mov	r3, r1
 8025bc0:	72fb      	strb	r3, [r7, #11]
 8025bc2:	4613      	mov	r3, r2
 8025bc4:	72bb      	strb	r3, [r7, #10]
    csn_reset(dev);
 8025bc6:	68f8      	ldr	r0, [r7, #12]
 8025bc8:	f000 fd33 	bl	8026632 <csn_reset>
    nrf_send_command_single(dev, NRF_CMD_W_REGISTER | reg);
 8025bcc:	7afb      	ldrb	r3, [r7, #11]
 8025bce:	f043 0320 	orr.w	r3, r3, #32
 8025bd2:	b2db      	uxtb	r3, r3
 8025bd4:	4619      	mov	r1, r3
 8025bd6:	68f8      	ldr	r0, [r7, #12]
 8025bd8:	f7ff ff5e 	bl	8025a98 <nrf_send_command_single>
    while (count--) {
 8025bdc:	e007      	b.n	8025bee <nrf_write_register_mb+0x3c>
        nrf_send_command_single(dev, *data++);
 8025bde:	687b      	ldr	r3, [r7, #4]
 8025be0:	1c5a      	adds	r2, r3, #1
 8025be2:	607a      	str	r2, [r7, #4]
 8025be4:	781b      	ldrb	r3, [r3, #0]
 8025be6:	4619      	mov	r1, r3
 8025be8:	68f8      	ldr	r0, [r7, #12]
 8025bea:	f7ff ff55 	bl	8025a98 <nrf_send_command_single>
    while (count--) {
 8025bee:	7abb      	ldrb	r3, [r7, #10]
 8025bf0:	1e5a      	subs	r2, r3, #1
 8025bf2:	72ba      	strb	r2, [r7, #10]
 8025bf4:	2b00      	cmp	r3, #0
 8025bf6:	d1f2      	bne.n	8025bde <nrf_write_register_mb+0x2c>
    }
    csn_set(dev);
 8025bf8:	68f8      	ldr	r0, [r7, #12]
 8025bfa:	f000 fd0a 	bl	8026612 <csn_set>
    return NRF_OK;
 8025bfe:	2300      	movs	r3, #0
}
 8025c00:	4618      	mov	r0, r3
 8025c02:	3710      	adds	r7, #16
 8025c04:	46bd      	mov	sp, r7
 8025c06:	bd80      	pop	{r7, pc}

08025c08 <nrf_read_rx_payload>:

NRF_RESULT nrf_read_rx_payload(nrf24l01 *dev, uint8_t *data) {
 8025c08:	b5b0      	push	{r4, r5, r7, lr}
 8025c0a:	b086      	sub	sp, #24
 8025c0c:	af02      	add	r7, sp, #8
 8025c0e:	6078      	str	r0, [r7, #4]
 8025c10:	6039      	str	r1, [r7, #0]
 8025c12:	466b      	mov	r3, sp
 8025c14:	461d      	mov	r5, r3
    uint8_t tx[dev->config.payload_length];
 8025c16:	687b      	ldr	r3, [r7, #4]
 8025c18:	7918      	ldrb	r0, [r3, #4]
 8025c1a:	4603      	mov	r3, r0
 8025c1c:	3b01      	subs	r3, #1
 8025c1e:	60fb      	str	r3, [r7, #12]
 8025c20:	b2c1      	uxtb	r1, r0
 8025c22:	f04f 0200 	mov.w	r2, #0
 8025c26:	f04f 0300 	mov.w	r3, #0
 8025c2a:	f04f 0400 	mov.w	r4, #0
 8025c2e:	00d4      	lsls	r4, r2, #3
 8025c30:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8025c34:	00cb      	lsls	r3, r1, #3
 8025c36:	b2c1      	uxtb	r1, r0
 8025c38:	f04f 0200 	mov.w	r2, #0
 8025c3c:	f04f 0300 	mov.w	r3, #0
 8025c40:	f04f 0400 	mov.w	r4, #0
 8025c44:	00d4      	lsls	r4, r2, #3
 8025c46:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8025c4a:	00cb      	lsls	r3, r1, #3
 8025c4c:	4603      	mov	r3, r0
 8025c4e:	3307      	adds	r3, #7
 8025c50:	08db      	lsrs	r3, r3, #3
 8025c52:	00db      	lsls	r3, r3, #3
 8025c54:	ebad 0d03 	sub.w	sp, sp, r3
 8025c58:	ab02      	add	r3, sp, #8
 8025c5a:	3300      	adds	r3, #0
 8025c5c:	60bb      	str	r3, [r7, #8]
    if (nrf_send_command(dev, NRF_CMD_R_RX_PAYLOAD, tx, data,
 8025c5e:	68ba      	ldr	r2, [r7, #8]
 8025c60:	687b      	ldr	r3, [r7, #4]
 8025c62:	791b      	ldrb	r3, [r3, #4]
 8025c64:	9300      	str	r3, [sp, #0]
 8025c66:	683b      	ldr	r3, [r7, #0]
 8025c68:	2161      	movs	r1, #97	; 0x61
 8025c6a:	6878      	ldr	r0, [r7, #4]
 8025c6c:	f7ff fe64 	bl	8025938 <nrf_send_command>
 8025c70:	4603      	mov	r3, r0
 8025c72:	2b00      	cmp	r3, #0
 8025c74:	d001      	beq.n	8025c7a <nrf_read_rx_payload+0x72>
            dev->config.payload_length) != NRF_OK) {
        return NRF_ERROR;
 8025c76:	2301      	movs	r3, #1
 8025c78:	e000      	b.n	8025c7c <nrf_read_rx_payload+0x74>
    }
    return NRF_OK;
 8025c7a:	2300      	movs	r3, #0
 8025c7c:	46ad      	mov	sp, r5
}
 8025c7e:	4618      	mov	r0, r3
 8025c80:	3710      	adds	r7, #16
 8025c82:	46bd      	mov	sp, r7
 8025c84:	bdb0      	pop	{r4, r5, r7, pc}

08025c86 <nrf_write_tx_payload>:

NRF_RESULT nrf_write_tx_payload(nrf24l01 *dev, const uint8_t *data) {
 8025c86:	b5b0      	push	{r4, r5, r7, lr}
 8025c88:	b086      	sub	sp, #24
 8025c8a:	af02      	add	r7, sp, #8
 8025c8c:	6078      	str	r0, [r7, #4]
 8025c8e:	6039      	str	r1, [r7, #0]
 8025c90:	466b      	mov	r3, sp
 8025c92:	461d      	mov	r5, r3
    uint8_t rx[dev->config.payload_length];
 8025c94:	687b      	ldr	r3, [r7, #4]
 8025c96:	7918      	ldrb	r0, [r3, #4]
 8025c98:	4603      	mov	r3, r0
 8025c9a:	3b01      	subs	r3, #1
 8025c9c:	60fb      	str	r3, [r7, #12]
 8025c9e:	b2c1      	uxtb	r1, r0
 8025ca0:	f04f 0200 	mov.w	r2, #0
 8025ca4:	f04f 0300 	mov.w	r3, #0
 8025ca8:	f04f 0400 	mov.w	r4, #0
 8025cac:	00d4      	lsls	r4, r2, #3
 8025cae:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8025cb2:	00cb      	lsls	r3, r1, #3
 8025cb4:	b2c1      	uxtb	r1, r0
 8025cb6:	f04f 0200 	mov.w	r2, #0
 8025cba:	f04f 0300 	mov.w	r3, #0
 8025cbe:	f04f 0400 	mov.w	r4, #0
 8025cc2:	00d4      	lsls	r4, r2, #3
 8025cc4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8025cc8:	00cb      	lsls	r3, r1, #3
 8025cca:	4603      	mov	r3, r0
 8025ccc:	3307      	adds	r3, #7
 8025cce:	08db      	lsrs	r3, r3, #3
 8025cd0:	00db      	lsls	r3, r3, #3
 8025cd2:	ebad 0d03 	sub.w	sp, sp, r3
 8025cd6:	ab02      	add	r3, sp, #8
 8025cd8:	3300      	adds	r3, #0
 8025cda:	60bb      	str	r3, [r7, #8]
    if (nrf_send_command(dev, NRF_CMD_W_TX_PAYLOAD, data, rx,
 8025cdc:	68ba      	ldr	r2, [r7, #8]
 8025cde:	687b      	ldr	r3, [r7, #4]
 8025ce0:	791b      	ldrb	r3, [r3, #4]
 8025ce2:	9300      	str	r3, [sp, #0]
 8025ce4:	4613      	mov	r3, r2
 8025ce6:	683a      	ldr	r2, [r7, #0]
 8025ce8:	21a0      	movs	r1, #160	; 0xa0
 8025cea:	6878      	ldr	r0, [r7, #4]
 8025cec:	f7ff fe24 	bl	8025938 <nrf_send_command>
 8025cf0:	4603      	mov	r3, r0
 8025cf2:	2b00      	cmp	r3, #0
 8025cf4:	d001      	beq.n	8025cfa <nrf_write_tx_payload+0x74>
            dev->config.payload_length) != NRF_OK) {
        return NRF_ERROR;
 8025cf6:	2301      	movs	r3, #1
 8025cf8:	e000      	b.n	8025cfc <nrf_write_tx_payload+0x76>
    }
    return NRF_OK;
 8025cfa:	2300      	movs	r3, #0
 8025cfc:	46ad      	mov	sp, r5
}
 8025cfe:	4618      	mov	r0, r3
 8025d00:	3710      	adds	r7, #16
 8025d02:	46bd      	mov	sp, r7
 8025d04:	bdb0      	pop	{r4, r5, r7, pc}

08025d06 <nrf_flush_tx>:
        return NRF_ERROR;
    }
    return NRF_OK;
}

NRF_RESULT nrf_flush_tx(nrf24l01 *dev) {
 8025d06:	b580      	push	{r7, lr}
 8025d08:	b086      	sub	sp, #24
 8025d0a:	af02      	add	r7, sp, #8
 8025d0c:	6078      	str	r0, [r7, #4]
    uint8_t rx = 0;
 8025d0e:	2300      	movs	r3, #0
 8025d10:	73fb      	strb	r3, [r7, #15]
    uint8_t tx = 0;
 8025d12:	2300      	movs	r3, #0
 8025d14:	73bb      	strb	r3, [r7, #14]
    if (nrf_send_command(dev, NRF_CMD_FLUSH_TX, &tx, &rx, 0) != NRF_OK) {
 8025d16:	f107 010f 	add.w	r1, r7, #15
 8025d1a:	f107 020e 	add.w	r2, r7, #14
 8025d1e:	2300      	movs	r3, #0
 8025d20:	9300      	str	r3, [sp, #0]
 8025d22:	460b      	mov	r3, r1
 8025d24:	21e1      	movs	r1, #225	; 0xe1
 8025d26:	6878      	ldr	r0, [r7, #4]
 8025d28:	f7ff fe06 	bl	8025938 <nrf_send_command>
 8025d2c:	4603      	mov	r3, r0
 8025d2e:	2b00      	cmp	r3, #0
 8025d30:	d001      	beq.n	8025d36 <nrf_flush_tx+0x30>
        return NRF_ERROR;
 8025d32:	2301      	movs	r3, #1
 8025d34:	e000      	b.n	8025d38 <nrf_flush_tx+0x32>
    }
    return NRF_OK;
 8025d36:	2300      	movs	r3, #0
}
 8025d38:	4618      	mov	r0, r3
 8025d3a:	3710      	adds	r7, #16
 8025d3c:	46bd      	mov	sp, r7
 8025d3e:	bd80      	pop	{r7, pc}

08025d40 <nrf_flush_rx>:

NRF_RESULT nrf_flush_rx(nrf24l01 *dev) {
 8025d40:	b580      	push	{r7, lr}
 8025d42:	b086      	sub	sp, #24
 8025d44:	af02      	add	r7, sp, #8
 8025d46:	6078      	str	r0, [r7, #4]
    uint8_t rx = 0;
 8025d48:	2300      	movs	r3, #0
 8025d4a:	73fb      	strb	r3, [r7, #15]
    uint8_t tx = 0;
 8025d4c:	2300      	movs	r3, #0
 8025d4e:	73bb      	strb	r3, [r7, #14]
    if (nrf_send_command(dev, NRF_CMD_FLUSH_RX, &tx, &rx, 0) != NRF_OK) {
 8025d50:	f107 010f 	add.w	r1, r7, #15
 8025d54:	f107 020e 	add.w	r2, r7, #14
 8025d58:	2300      	movs	r3, #0
 8025d5a:	9300      	str	r3, [sp, #0]
 8025d5c:	460b      	mov	r3, r1
 8025d5e:	21e2      	movs	r1, #226	; 0xe2
 8025d60:	6878      	ldr	r0, [r7, #4]
 8025d62:	f7ff fde9 	bl	8025938 <nrf_send_command>
 8025d66:	4603      	mov	r3, r0
 8025d68:	2b00      	cmp	r3, #0
 8025d6a:	d001      	beq.n	8025d70 <nrf_flush_rx+0x30>
        return NRF_ERROR;
 8025d6c:	2301      	movs	r3, #1
 8025d6e:	e000      	b.n	8025d72 <nrf_flush_rx+0x32>
    }
    return NRF_OK;
 8025d70:	2300      	movs	r3, #0
}
 8025d72:	4618      	mov	r0, r3
 8025d74:	3710      	adds	r7, #16
 8025d76:	46bd      	mov	sp, r7
 8025d78:	bd80      	pop	{r7, pc}

08025d7a <nrf_set_data_rate>:

NRF_RESULT nrf_set_data_rate(nrf24l01 *dev, NRF_DATA_RATE rate) {
 8025d7a:	b580      	push	{r7, lr}
 8025d7c:	b084      	sub	sp, #16
 8025d7e:	af00      	add	r7, sp, #0
 8025d80:	6078      	str	r0, [r7, #4]
 8025d82:	460b      	mov	r3, r1
 8025d84:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 8025d86:	2300      	movs	r3, #0
 8025d88:	73fb      	strb	r3, [r7, #15]
    if (nrf_read_register(dev, NRF_RF_SETUP, &reg) != NRF_OK) {
 8025d8a:	f107 030f 	add.w	r3, r7, #15
 8025d8e:	461a      	mov	r2, r3
 8025d90:	2106      	movs	r1, #6
 8025d92:	6878      	ldr	r0, [r7, #4]
 8025d94:	f7ff fea8 	bl	8025ae8 <nrf_read_register>
 8025d98:	4603      	mov	r3, r0
 8025d9a:	2b00      	cmp	r3, #0
 8025d9c:	d001      	beq.n	8025da2 <nrf_set_data_rate+0x28>
        return NRF_ERROR;
 8025d9e:	2301      	movs	r3, #1
 8025da0:	e02f      	b.n	8025e02 <nrf_set_data_rate+0x88>
    }
    if (rate & 1) { // low bit set
 8025da2:	78fb      	ldrb	r3, [r7, #3]
 8025da4:	f003 0301 	and.w	r3, r3, #1
 8025da8:	2b00      	cmp	r3, #0
 8025daa:	d005      	beq.n	8025db8 <nrf_set_data_rate+0x3e>
        reg |= 1 << 5;
 8025dac:	7bfb      	ldrb	r3, [r7, #15]
 8025dae:	f043 0320 	orr.w	r3, r3, #32
 8025db2:	b2db      	uxtb	r3, r3
 8025db4:	73fb      	strb	r3, [r7, #15]
 8025db6:	e004      	b.n	8025dc2 <nrf_set_data_rate+0x48>
    } else { // low bit clear
        reg &= ~(1 << 5);
 8025db8:	7bfb      	ldrb	r3, [r7, #15]
 8025dba:	f023 0320 	bic.w	r3, r3, #32
 8025dbe:	b2db      	uxtb	r3, r3
 8025dc0:	73fb      	strb	r3, [r7, #15]
    }

    if (rate & 2) { // high bit set
 8025dc2:	78fb      	ldrb	r3, [r7, #3]
 8025dc4:	f003 0302 	and.w	r3, r3, #2
 8025dc8:	2b00      	cmp	r3, #0
 8025dca:	d005      	beq.n	8025dd8 <nrf_set_data_rate+0x5e>
        reg |= 1 << 3;
 8025dcc:	7bfb      	ldrb	r3, [r7, #15]
 8025dce:	f043 0308 	orr.w	r3, r3, #8
 8025dd2:	b2db      	uxtb	r3, r3
 8025dd4:	73fb      	strb	r3, [r7, #15]
 8025dd6:	e004      	b.n	8025de2 <nrf_set_data_rate+0x68>
    } else { // high bit clear
        reg &= ~(1 << 3);
 8025dd8:	7bfb      	ldrb	r3, [r7, #15]
 8025dda:	f023 0308 	bic.w	r3, r3, #8
 8025dde:	b2db      	uxtb	r3, r3
 8025de0:	73fb      	strb	r3, [r7, #15]
    }
    if (nrf_write_register(dev, NRF_RF_SETUP, &reg) != NRF_OK) {
 8025de2:	f107 030f 	add.w	r3, r7, #15
 8025de6:	461a      	mov	r2, r3
 8025de8:	2106      	movs	r1, #6
 8025dea:	6878      	ldr	r0, [r7, #4]
 8025dec:	f7ff fec1 	bl	8025b72 <nrf_write_register>
 8025df0:	4603      	mov	r3, r0
 8025df2:	2b00      	cmp	r3, #0
 8025df4:	d001      	beq.n	8025dfa <nrf_set_data_rate+0x80>
        return NRF_ERROR;
 8025df6:	2301      	movs	r3, #1
 8025df8:	e003      	b.n	8025e02 <nrf_set_data_rate+0x88>
    }
    dev->config.data_rate = rate;
 8025dfa:	687b      	ldr	r3, [r7, #4]
 8025dfc:	78fa      	ldrb	r2, [r7, #3]
 8025dfe:	701a      	strb	r2, [r3, #0]
    return NRF_OK;
 8025e00:	2300      	movs	r3, #0
}
 8025e02:	4618      	mov	r0, r3
 8025e04:	3710      	adds	r7, #16
 8025e06:	46bd      	mov	sp, r7
 8025e08:	bd80      	pop	{r7, pc}

08025e0a <nrf_set_tx_power>:

NRF_RESULT nrf_set_tx_power(nrf24l01 *dev, NRF_TX_PWR pwr) {
 8025e0a:	b580      	push	{r7, lr}
 8025e0c:	b084      	sub	sp, #16
 8025e0e:	af00      	add	r7, sp, #0
 8025e10:	6078      	str	r0, [r7, #4]
 8025e12:	460b      	mov	r3, r1
 8025e14:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 8025e16:	2300      	movs	r3, #0
 8025e18:	73fb      	strb	r3, [r7, #15]
    if (nrf_read_register(dev, NRF_RF_SETUP, &reg) != NRF_OK) {
 8025e1a:	f107 030f 	add.w	r3, r7, #15
 8025e1e:	461a      	mov	r2, r3
 8025e20:	2106      	movs	r1, #6
 8025e22:	6878      	ldr	r0, [r7, #4]
 8025e24:	f7ff fe60 	bl	8025ae8 <nrf_read_register>
 8025e28:	4603      	mov	r3, r0
 8025e2a:	2b00      	cmp	r3, #0
 8025e2c:	d001      	beq.n	8025e32 <nrf_set_tx_power+0x28>
        return NRF_ERROR;
 8025e2e:	2301      	movs	r3, #1
 8025e30:	e01d      	b.n	8025e6e <nrf_set_tx_power+0x64>
    }
    reg &= 0xF9;     // clear bits 1,2
 8025e32:	7bfb      	ldrb	r3, [r7, #15]
 8025e34:	f023 0306 	bic.w	r3, r3, #6
 8025e38:	b2db      	uxtb	r3, r3
 8025e3a:	73fb      	strb	r3, [r7, #15]
    reg |= pwr << 1; // set bits 1,2
 8025e3c:	78fb      	ldrb	r3, [r7, #3]
 8025e3e:	005b      	lsls	r3, r3, #1
 8025e40:	b25a      	sxtb	r2, r3
 8025e42:	7bfb      	ldrb	r3, [r7, #15]
 8025e44:	b25b      	sxtb	r3, r3
 8025e46:	4313      	orrs	r3, r2
 8025e48:	b25b      	sxtb	r3, r3
 8025e4a:	b2db      	uxtb	r3, r3
 8025e4c:	73fb      	strb	r3, [r7, #15]
    if (nrf_write_register(dev, NRF_RF_SETUP, &reg) != NRF_OK) {
 8025e4e:	f107 030f 	add.w	r3, r7, #15
 8025e52:	461a      	mov	r2, r3
 8025e54:	2106      	movs	r1, #6
 8025e56:	6878      	ldr	r0, [r7, #4]
 8025e58:	f7ff fe8b 	bl	8025b72 <nrf_write_register>
 8025e5c:	4603      	mov	r3, r0
 8025e5e:	2b00      	cmp	r3, #0
 8025e60:	d001      	beq.n	8025e66 <nrf_set_tx_power+0x5c>
        return NRF_ERROR;
 8025e62:	2301      	movs	r3, #1
 8025e64:	e003      	b.n	8025e6e <nrf_set_tx_power+0x64>
    }
    dev->config.tx_power = pwr;
 8025e66:	687b      	ldr	r3, [r7, #4]
 8025e68:	78fa      	ldrb	r2, [r7, #3]
 8025e6a:	705a      	strb	r2, [r3, #1]
    return NRF_OK;
 8025e6c:	2300      	movs	r3, #0
}
 8025e6e:	4618      	mov	r0, r3
 8025e70:	3710      	adds	r7, #16
 8025e72:	46bd      	mov	sp, r7
 8025e74:	bd80      	pop	{r7, pc}

08025e76 <nrf_clear_interrupts>:
        return NRF_ERROR;
    }
    return NRF_OK;
}

NRF_RESULT nrf_clear_interrupts(nrf24l01 *dev) {
 8025e76:	b580      	push	{r7, lr}
 8025e78:	b084      	sub	sp, #16
 8025e7a:	af00      	add	r7, sp, #0
 8025e7c:	6078      	str	r0, [r7, #4]
    uint8_t reg = 0;
 8025e7e:	2300      	movs	r3, #0
 8025e80:	73fb      	strb	r3, [r7, #15]
    if (nrf_read_register(dev, NRF_STATUS, &reg) != NRF_OK) {
 8025e82:	f107 030f 	add.w	r3, r7, #15
 8025e86:	461a      	mov	r2, r3
 8025e88:	2107      	movs	r1, #7
 8025e8a:	6878      	ldr	r0, [r7, #4]
 8025e8c:	f7ff fe2c 	bl	8025ae8 <nrf_read_register>
 8025e90:	4603      	mov	r3, r0
 8025e92:	2b00      	cmp	r3, #0
 8025e94:	d001      	beq.n	8025e9a <nrf_clear_interrupts+0x24>
        return NRF_ERROR;
 8025e96:	2301      	movs	r3, #1
 8025e98:	e011      	b.n	8025ebe <nrf_clear_interrupts+0x48>
    }

    reg |= 7 << 4; // setting bits 4,5,6
 8025e9a:	7bfb      	ldrb	r3, [r7, #15]
 8025e9c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8025ea0:	b2db      	uxtb	r3, r3
 8025ea2:	73fb      	strb	r3, [r7, #15]

    if (nrf_write_register(dev, NRF_STATUS, &reg) != NRF_OK) {
 8025ea4:	f107 030f 	add.w	r3, r7, #15
 8025ea8:	461a      	mov	r2, r3
 8025eaa:	2107      	movs	r1, #7
 8025eac:	6878      	ldr	r0, [r7, #4]
 8025eae:	f7ff fe60 	bl	8025b72 <nrf_write_register>
 8025eb2:	4603      	mov	r3, r0
 8025eb4:	2b00      	cmp	r3, #0
 8025eb6:	d001      	beq.n	8025ebc <nrf_clear_interrupts+0x46>
        return NRF_ERROR;
 8025eb8:	2301      	movs	r3, #1
 8025eba:	e000      	b.n	8025ebe <nrf_clear_interrupts+0x48>
    }
    return NRF_OK;
 8025ebc:	2300      	movs	r3, #0
}
 8025ebe:	4618      	mov	r0, r3
 8025ec0:	3710      	adds	r7, #16
 8025ec2:	46bd      	mov	sp, r7
 8025ec4:	bd80      	pop	{r7, pc}

08025ec6 <nrf_set_rf_channel>:

NRF_RESULT nrf_set_rf_channel(nrf24l01 *dev, uint8_t ch) {
 8025ec6:	b580      	push	{r7, lr}
 8025ec8:	b084      	sub	sp, #16
 8025eca:	af00      	add	r7, sp, #0
 8025ecc:	6078      	str	r0, [r7, #4]
 8025ece:	460b      	mov	r3, r1
 8025ed0:	70fb      	strb	r3, [r7, #3]
    ch &= 0x7F;
 8025ed2:	78fb      	ldrb	r3, [r7, #3]
 8025ed4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8025ed8:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 8025eda:	2300      	movs	r3, #0
 8025edc:	73fb      	strb	r3, [r7, #15]
    if (nrf_read_register(dev, NRF_RF_CH, &reg) != NRF_OK) {
 8025ede:	f107 030f 	add.w	r3, r7, #15
 8025ee2:	461a      	mov	r2, r3
 8025ee4:	2105      	movs	r1, #5
 8025ee6:	6878      	ldr	r0, [r7, #4]
 8025ee8:	f7ff fdfe 	bl	8025ae8 <nrf_read_register>
 8025eec:	4603      	mov	r3, r0
 8025eee:	2b00      	cmp	r3, #0
 8025ef0:	d001      	beq.n	8025ef6 <nrf_set_rf_channel+0x30>
        return NRF_ERROR;
 8025ef2:	2301      	movs	r3, #1
 8025ef4:	e014      	b.n	8025f20 <nrf_set_rf_channel+0x5a>
    }

    reg |= ch; // setting channel
 8025ef6:	7bfa      	ldrb	r2, [r7, #15]
 8025ef8:	78fb      	ldrb	r3, [r7, #3]
 8025efa:	4313      	orrs	r3, r2
 8025efc:	b2db      	uxtb	r3, r3
 8025efe:	73fb      	strb	r3, [r7, #15]

    if (nrf_write_register(dev, NRF_RF_CH, &reg) != NRF_OK) {
 8025f00:	f107 030f 	add.w	r3, r7, #15
 8025f04:	461a      	mov	r2, r3
 8025f06:	2105      	movs	r1, #5
 8025f08:	6878      	ldr	r0, [r7, #4]
 8025f0a:	f7ff fe32 	bl	8025b72 <nrf_write_register>
 8025f0e:	4603      	mov	r3, r0
 8025f10:	2b00      	cmp	r3, #0
 8025f12:	d001      	beq.n	8025f18 <nrf_set_rf_channel+0x52>
        return NRF_ERROR;
 8025f14:	2301      	movs	r3, #1
 8025f16:	e003      	b.n	8025f20 <nrf_set_rf_channel+0x5a>
    }
    dev->config.rf_channel = ch;
 8025f18:	687b      	ldr	r3, [r7, #4]
 8025f1a:	78fa      	ldrb	r2, [r7, #3]
 8025f1c:	71da      	strb	r2, [r3, #7]
    return NRF_OK;
 8025f1e:	2300      	movs	r3, #0
}
 8025f20:	4618      	mov	r0, r3
 8025f22:	3710      	adds	r7, #16
 8025f24:	46bd      	mov	sp, r7
 8025f26:	bd80      	pop	{r7, pc}

08025f28 <nrf_set_retransmittion_count>:

NRF_RESULT nrf_set_retransmittion_count(nrf24l01 *dev, uint8_t count) {
 8025f28:	b580      	push	{r7, lr}
 8025f2a:	b084      	sub	sp, #16
 8025f2c:	af00      	add	r7, sp, #0
 8025f2e:	6078      	str	r0, [r7, #4]
 8025f30:	460b      	mov	r3, r1
 8025f32:	70fb      	strb	r3, [r7, #3]
    count &= 0x0F;
 8025f34:	78fb      	ldrb	r3, [r7, #3]
 8025f36:	f003 030f 	and.w	r3, r3, #15
 8025f3a:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 8025f3c:	2300      	movs	r3, #0
 8025f3e:	73fb      	strb	r3, [r7, #15]
    if (nrf_read_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8025f40:	f107 030f 	add.w	r3, r7, #15
 8025f44:	461a      	mov	r2, r3
 8025f46:	2104      	movs	r1, #4
 8025f48:	6878      	ldr	r0, [r7, #4]
 8025f4a:	f7ff fdcd 	bl	8025ae8 <nrf_read_register>
 8025f4e:	4603      	mov	r3, r0
 8025f50:	2b00      	cmp	r3, #0
 8025f52:	d001      	beq.n	8025f58 <nrf_set_retransmittion_count+0x30>
        return NRF_ERROR;
 8025f54:	2301      	movs	r3, #1
 8025f56:	e019      	b.n	8025f8c <nrf_set_retransmittion_count+0x64>
    }

    reg &= 0xF0;  // clearing bits 0,1,2,3
 8025f58:	7bfb      	ldrb	r3, [r7, #15]
 8025f5a:	f023 030f 	bic.w	r3, r3, #15
 8025f5e:	b2db      	uxtb	r3, r3
 8025f60:	73fb      	strb	r3, [r7, #15]
    reg |= count; // setting count
 8025f62:	7bfa      	ldrb	r2, [r7, #15]
 8025f64:	78fb      	ldrb	r3, [r7, #3]
 8025f66:	4313      	orrs	r3, r2
 8025f68:	b2db      	uxtb	r3, r3
 8025f6a:	73fb      	strb	r3, [r7, #15]

    if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8025f6c:	f107 030f 	add.w	r3, r7, #15
 8025f70:	461a      	mov	r2, r3
 8025f72:	2104      	movs	r1, #4
 8025f74:	6878      	ldr	r0, [r7, #4]
 8025f76:	f7ff fdfc 	bl	8025b72 <nrf_write_register>
 8025f7a:	4603      	mov	r3, r0
 8025f7c:	2b00      	cmp	r3, #0
 8025f7e:	d001      	beq.n	8025f84 <nrf_set_retransmittion_count+0x5c>
        return NRF_ERROR;
 8025f80:	2301      	movs	r3, #1
 8025f82:	e003      	b.n	8025f8c <nrf_set_retransmittion_count+0x64>
    }
    dev->config.retransmit_count = count;
 8025f84:	687b      	ldr	r3, [r7, #4]
 8025f86:	78fa      	ldrb	r2, [r7, #3]
 8025f88:	715a      	strb	r2, [r3, #5]
    return NRF_OK;
 8025f8a:	2300      	movs	r3, #0
}
 8025f8c:	4618      	mov	r0, r3
 8025f8e:	3710      	adds	r7, #16
 8025f90:	46bd      	mov	sp, r7
 8025f92:	bd80      	pop	{r7, pc}

08025f94 <nrf_set_retransmittion_delay>:

NRF_RESULT nrf_set_retransmittion_delay(nrf24l01 *dev, uint8_t delay) {
 8025f94:	b580      	push	{r7, lr}
 8025f96:	b084      	sub	sp, #16
 8025f98:	af00      	add	r7, sp, #0
 8025f9a:	6078      	str	r0, [r7, #4]
 8025f9c:	460b      	mov	r3, r1
 8025f9e:	70fb      	strb	r3, [r7, #3]
    delay &= 0x0F;
 8025fa0:	78fb      	ldrb	r3, [r7, #3]
 8025fa2:	f003 030f 	and.w	r3, r3, #15
 8025fa6:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 8025fa8:	2300      	movs	r3, #0
 8025faa:	73fb      	strb	r3, [r7, #15]
    if (nrf_read_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8025fac:	f107 030f 	add.w	r3, r7, #15
 8025fb0:	461a      	mov	r2, r3
 8025fb2:	2104      	movs	r1, #4
 8025fb4:	6878      	ldr	r0, [r7, #4]
 8025fb6:	f7ff fd97 	bl	8025ae8 <nrf_read_register>
 8025fba:	4603      	mov	r3, r0
 8025fbc:	2b00      	cmp	r3, #0
 8025fbe:	d001      	beq.n	8025fc4 <nrf_set_retransmittion_delay+0x30>
        return NRF_ERROR;
 8025fc0:	2301      	movs	r3, #1
 8025fc2:	e01d      	b.n	8026000 <nrf_set_retransmittion_delay+0x6c>
    }

    reg &= 0x0F;       // clearing bits 1,2,6,7
 8025fc4:	7bfb      	ldrb	r3, [r7, #15]
 8025fc6:	f003 030f 	and.w	r3, r3, #15
 8025fca:	b2db      	uxtb	r3, r3
 8025fcc:	73fb      	strb	r3, [r7, #15]
    reg |= delay << 4; // setting delay
 8025fce:	78fb      	ldrb	r3, [r7, #3]
 8025fd0:	011b      	lsls	r3, r3, #4
 8025fd2:	b25a      	sxtb	r2, r3
 8025fd4:	7bfb      	ldrb	r3, [r7, #15]
 8025fd6:	b25b      	sxtb	r3, r3
 8025fd8:	4313      	orrs	r3, r2
 8025fda:	b25b      	sxtb	r3, r3
 8025fdc:	b2db      	uxtb	r3, r3
 8025fde:	73fb      	strb	r3, [r7, #15]

    if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8025fe0:	f107 030f 	add.w	r3, r7, #15
 8025fe4:	461a      	mov	r2, r3
 8025fe6:	2104      	movs	r1, #4
 8025fe8:	6878      	ldr	r0, [r7, #4]
 8025fea:	f7ff fdc2 	bl	8025b72 <nrf_write_register>
 8025fee:	4603      	mov	r3, r0
 8025ff0:	2b00      	cmp	r3, #0
 8025ff2:	d001      	beq.n	8025ff8 <nrf_set_retransmittion_delay+0x64>
        return NRF_ERROR;
 8025ff4:	2301      	movs	r3, #1
 8025ff6:	e003      	b.n	8026000 <nrf_set_retransmittion_delay+0x6c>
    }
    dev->config.retransmit_delay = delay;
 8025ff8:	687b      	ldr	r3, [r7, #4]
 8025ffa:	78fa      	ldrb	r2, [r7, #3]
 8025ffc:	719a      	strb	r2, [r3, #6]
    return NRF_OK;
 8025ffe:	2300      	movs	r3, #0
}
 8026000:	4618      	mov	r0, r3
 8026002:	3710      	adds	r7, #16
 8026004:	46bd      	mov	sp, r7
 8026006:	bd80      	pop	{r7, pc}

08026008 <nrf_set_address_width>:

NRF_RESULT nrf_set_address_width(nrf24l01 *dev, NRF_ADDR_WIDTH width) {
 8026008:	b580      	push	{r7, lr}
 802600a:	b084      	sub	sp, #16
 802600c:	af00      	add	r7, sp, #0
 802600e:	6078      	str	r0, [r7, #4]
 8026010:	460b      	mov	r3, r1
 8026012:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 8026014:	2300      	movs	r3, #0
 8026016:	73fb      	strb	r3, [r7, #15]
    if (nrf_read_register(dev, NRF_SETUP_AW, &reg) != NRF_OK) {
 8026018:	f107 030f 	add.w	r3, r7, #15
 802601c:	461a      	mov	r2, r3
 802601e:	2103      	movs	r1, #3
 8026020:	6878      	ldr	r0, [r7, #4]
 8026022:	f7ff fd61 	bl	8025ae8 <nrf_read_register>
 8026026:	4603      	mov	r3, r0
 8026028:	2b00      	cmp	r3, #0
 802602a:	d001      	beq.n	8026030 <nrf_set_address_width+0x28>
        return NRF_ERROR;
 802602c:	2301      	movs	r3, #1
 802602e:	e019      	b.n	8026064 <nrf_set_address_width+0x5c>
    }

    reg &= 0x03;  // clearing bits 0,1
 8026030:	7bfb      	ldrb	r3, [r7, #15]
 8026032:	f003 0303 	and.w	r3, r3, #3
 8026036:	b2db      	uxtb	r3, r3
 8026038:	73fb      	strb	r3, [r7, #15]
    reg |= width; // setting delay
 802603a:	7bfa      	ldrb	r2, [r7, #15]
 802603c:	78fb      	ldrb	r3, [r7, #3]
 802603e:	4313      	orrs	r3, r2
 8026040:	b2db      	uxtb	r3, r3
 8026042:	73fb      	strb	r3, [r7, #15]

    if (nrf_write_register(dev, NRF_SETUP_AW, &reg) != NRF_OK) {
 8026044:	f107 030f 	add.w	r3, r7, #15
 8026048:	461a      	mov	r2, r3
 802604a:	2103      	movs	r1, #3
 802604c:	6878      	ldr	r0, [r7, #4]
 802604e:	f7ff fd90 	bl	8025b72 <nrf_write_register>
 8026052:	4603      	mov	r3, r0
 8026054:	2b00      	cmp	r3, #0
 8026056:	d001      	beq.n	802605c <nrf_set_address_width+0x54>
        return NRF_ERROR;
 8026058:	2301      	movs	r3, #1
 802605a:	e003      	b.n	8026064 <nrf_set_address_width+0x5c>
    }
    dev->config.addr_width = width;
 802605c:	687b      	ldr	r3, [r7, #4]
 802605e:	78fa      	ldrb	r2, [r7, #3]
 8026060:	70da      	strb	r2, [r3, #3]
    return NRF_OK;
 8026062:	2300      	movs	r3, #0
}
 8026064:	4618      	mov	r0, r3
 8026066:	3710      	adds	r7, #16
 8026068:	46bd      	mov	sp, r7
 802606a:	bd80      	pop	{r7, pc}

0802606c <nrf_set_rx_pipes>:

NRF_RESULT nrf_set_rx_pipes(nrf24l01 *dev, uint8_t pipes) {
 802606c:	b580      	push	{r7, lr}
 802606e:	b082      	sub	sp, #8
 8026070:	af00      	add	r7, sp, #0
 8026072:	6078      	str	r0, [r7, #4]
 8026074:	460b      	mov	r3, r1
 8026076:	70fb      	strb	r3, [r7, #3]
    if (nrf_write_register(dev, NRF_EN_RXADDR, &pipes) != NRF_OK) {
 8026078:	1cfb      	adds	r3, r7, #3
 802607a:	461a      	mov	r2, r3
 802607c:	2102      	movs	r1, #2
 802607e:	6878      	ldr	r0, [r7, #4]
 8026080:	f7ff fd77 	bl	8025b72 <nrf_write_register>
 8026084:	4603      	mov	r3, r0
 8026086:	2b00      	cmp	r3, #0
 8026088:	d001      	beq.n	802608e <nrf_set_rx_pipes+0x22>
        return NRF_ERROR;
 802608a:	2301      	movs	r3, #1
 802608c:	e000      	b.n	8026090 <nrf_set_rx_pipes+0x24>
    }
    return NRF_OK;
 802608e:	2300      	movs	r3, #0
}
 8026090:	4618      	mov	r0, r3
 8026092:	3708      	adds	r7, #8
 8026094:	46bd      	mov	sp, r7
 8026096:	bd80      	pop	{r7, pc}

08026098 <nrf_enable_auto_ack>:
        return NRF_ERROR;
    }
    return NRF_OK;
}

NRF_RESULT nrf_enable_auto_ack(nrf24l01 *dev, uint8_t pipe) {
 8026098:	b580      	push	{r7, lr}
 802609a:	b084      	sub	sp, #16
 802609c:	af00      	add	r7, sp, #0
 802609e:	6078      	str	r0, [r7, #4]
 80260a0:	460b      	mov	r3, r1
 80260a2:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 80260a4:	2300      	movs	r3, #0
 80260a6:	73fb      	strb	r3, [r7, #15]
    if (nrf_read_register(dev, NRF_EN_AA, &reg) != NRF_OK) {
 80260a8:	f107 030f 	add.w	r3, r7, #15
 80260ac:	461a      	mov	r2, r3
 80260ae:	2101      	movs	r1, #1
 80260b0:	6878      	ldr	r0, [r7, #4]
 80260b2:	f7ff fd19 	bl	8025ae8 <nrf_read_register>
 80260b6:	4603      	mov	r3, r0
 80260b8:	2b00      	cmp	r3, #0
 80260ba:	d001      	beq.n	80260c0 <nrf_enable_auto_ack+0x28>
        return NRF_ERROR;
 80260bc:	2301      	movs	r3, #1
 80260be:	e017      	b.n	80260f0 <nrf_enable_auto_ack+0x58>
    }

    reg |= 1 << pipe;
 80260c0:	78fb      	ldrb	r3, [r7, #3]
 80260c2:	2201      	movs	r2, #1
 80260c4:	fa02 f303 	lsl.w	r3, r2, r3
 80260c8:	b25a      	sxtb	r2, r3
 80260ca:	7bfb      	ldrb	r3, [r7, #15]
 80260cc:	b25b      	sxtb	r3, r3
 80260ce:	4313      	orrs	r3, r2
 80260d0:	b25b      	sxtb	r3, r3
 80260d2:	b2db      	uxtb	r3, r3
 80260d4:	73fb      	strb	r3, [r7, #15]

    if (nrf_write_register(dev, NRF_EN_AA, &reg) != NRF_OK) {
 80260d6:	f107 030f 	add.w	r3, r7, #15
 80260da:	461a      	mov	r2, r3
 80260dc:	2101      	movs	r1, #1
 80260de:	6878      	ldr	r0, [r7, #4]
 80260e0:	f7ff fd47 	bl	8025b72 <nrf_write_register>
 80260e4:	4603      	mov	r3, r0
 80260e6:	2b00      	cmp	r3, #0
 80260e8:	d001      	beq.n	80260ee <nrf_enable_auto_ack+0x56>
        return NRF_ERROR;
 80260ea:	2301      	movs	r3, #1
 80260ec:	e000      	b.n	80260f0 <nrf_enable_auto_ack+0x58>
    }
    return NRF_OK;
 80260ee:	2300      	movs	r3, #0
}
 80260f0:	4618      	mov	r0, r3
 80260f2:	3710      	adds	r7, #16
 80260f4:	46bd      	mov	sp, r7
 80260f6:	bd80      	pop	{r7, pc}

080260f8 <nrf_enable_crc>:

NRF_RESULT nrf_enable_crc(nrf24l01 *dev, uint8_t activate) {
 80260f8:	b580      	push	{r7, lr}
 80260fa:	b084      	sub	sp, #16
 80260fc:	af00      	add	r7, sp, #0
 80260fe:	6078      	str	r0, [r7, #4]
 8026100:	460b      	mov	r3, r1
 8026102:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 8026104:	2300      	movs	r3, #0
 8026106:	73fb      	strb	r3, [r7, #15]
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8026108:	f107 030f 	add.w	r3, r7, #15
 802610c:	461a      	mov	r2, r3
 802610e:	2100      	movs	r1, #0
 8026110:	6878      	ldr	r0, [r7, #4]
 8026112:	f7ff fce9 	bl	8025ae8 <nrf_read_register>
 8026116:	4603      	mov	r3, r0
 8026118:	2b00      	cmp	r3, #0
 802611a:	d001      	beq.n	8026120 <nrf_enable_crc+0x28>
        return NRF_ERROR;
 802611c:	2301      	movs	r3, #1
 802611e:	e01a      	b.n	8026156 <nrf_enable_crc+0x5e>
    }

    if (activate) {
 8026120:	78fb      	ldrb	r3, [r7, #3]
 8026122:	2b00      	cmp	r3, #0
 8026124:	d005      	beq.n	8026132 <nrf_enable_crc+0x3a>
        reg |= 1 << 3;
 8026126:	7bfb      	ldrb	r3, [r7, #15]
 8026128:	f043 0308 	orr.w	r3, r3, #8
 802612c:	b2db      	uxtb	r3, r3
 802612e:	73fb      	strb	r3, [r7, #15]
 8026130:	e004      	b.n	802613c <nrf_enable_crc+0x44>
    } else {
        reg &= ~(1 << 3);
 8026132:	7bfb      	ldrb	r3, [r7, #15]
 8026134:	f023 0308 	bic.w	r3, r3, #8
 8026138:	b2db      	uxtb	r3, r3
 802613a:	73fb      	strb	r3, [r7, #15]
    }

    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 802613c:	f107 030f 	add.w	r3, r7, #15
 8026140:	461a      	mov	r2, r3
 8026142:	2100      	movs	r1, #0
 8026144:	6878      	ldr	r0, [r7, #4]
 8026146:	f7ff fd14 	bl	8025b72 <nrf_write_register>
 802614a:	4603      	mov	r3, r0
 802614c:	2b00      	cmp	r3, #0
 802614e:	d001      	beq.n	8026154 <nrf_enable_crc+0x5c>
        return NRF_ERROR;
 8026150:	2301      	movs	r3, #1
 8026152:	e000      	b.n	8026156 <nrf_enable_crc+0x5e>
    }
    return NRF_OK;
 8026154:	2300      	movs	r3, #0
}
 8026156:	4618      	mov	r0, r3
 8026158:	3710      	adds	r7, #16
 802615a:	46bd      	mov	sp, r7
 802615c:	bd80      	pop	{r7, pc}

0802615e <nrf_set_crc_width>:

NRF_RESULT nrf_set_crc_width(nrf24l01 *dev, NRF_CRC_WIDTH width) {
 802615e:	b580      	push	{r7, lr}
 8026160:	b084      	sub	sp, #16
 8026162:	af00      	add	r7, sp, #0
 8026164:	6078      	str	r0, [r7, #4]
 8026166:	460b      	mov	r3, r1
 8026168:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 802616a:	2300      	movs	r3, #0
 802616c:	73fb      	strb	r3, [r7, #15]
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 802616e:	f107 030f 	add.w	r3, r7, #15
 8026172:	461a      	mov	r2, r3
 8026174:	2100      	movs	r1, #0
 8026176:	6878      	ldr	r0, [r7, #4]
 8026178:	f7ff fcb6 	bl	8025ae8 <nrf_read_register>
 802617c:	4603      	mov	r3, r0
 802617e:	2b00      	cmp	r3, #0
 8026180:	d001      	beq.n	8026186 <nrf_set_crc_width+0x28>
        return NRF_ERROR;
 8026182:	2301      	movs	r3, #1
 8026184:	e01d      	b.n	80261c2 <nrf_set_crc_width+0x64>
    }

    if (width == NRF_CRC_WIDTH_2B) {
 8026186:	78fb      	ldrb	r3, [r7, #3]
 8026188:	2b01      	cmp	r3, #1
 802618a:	d105      	bne.n	8026198 <nrf_set_crc_width+0x3a>
        reg |= 1 << 2;
 802618c:	7bfb      	ldrb	r3, [r7, #15]
 802618e:	f043 0304 	orr.w	r3, r3, #4
 8026192:	b2db      	uxtb	r3, r3
 8026194:	73fb      	strb	r3, [r7, #15]
 8026196:	e004      	b.n	80261a2 <nrf_set_crc_width+0x44>
    } else {
        reg &= ~(1 << 3);
 8026198:	7bfb      	ldrb	r3, [r7, #15]
 802619a:	f023 0308 	bic.w	r3, r3, #8
 802619e:	b2db      	uxtb	r3, r3
 80261a0:	73fb      	strb	r3, [r7, #15]
    }

    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 80261a2:	f107 030f 	add.w	r3, r7, #15
 80261a6:	461a      	mov	r2, r3
 80261a8:	2100      	movs	r1, #0
 80261aa:	6878      	ldr	r0, [r7, #4]
 80261ac:	f7ff fce1 	bl	8025b72 <nrf_write_register>
 80261b0:	4603      	mov	r3, r0
 80261b2:	2b00      	cmp	r3, #0
 80261b4:	d001      	beq.n	80261ba <nrf_set_crc_width+0x5c>
        return NRF_ERROR;
 80261b6:	2301      	movs	r3, #1
 80261b8:	e003      	b.n	80261c2 <nrf_set_crc_width+0x64>
    }
    dev->config.crc_width = width;
 80261ba:	687b      	ldr	r3, [r7, #4]
 80261bc:	78fa      	ldrb	r2, [r7, #3]
 80261be:	709a      	strb	r2, [r3, #2]
    return NRF_OK;
 80261c0:	2300      	movs	r3, #0
}
 80261c2:	4618      	mov	r0, r3
 80261c4:	3710      	adds	r7, #16
 80261c6:	46bd      	mov	sp, r7
 80261c8:	bd80      	pop	{r7, pc}

080261ca <nrf_power_up>:

NRF_RESULT nrf_power_up(nrf24l01 *dev, uint8_t power_up) {
 80261ca:	b580      	push	{r7, lr}
 80261cc:	b084      	sub	sp, #16
 80261ce:	af00      	add	r7, sp, #0
 80261d0:	6078      	str	r0, [r7, #4]
 80261d2:	460b      	mov	r3, r1
 80261d4:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 80261d6:	2300      	movs	r3, #0
 80261d8:	73fb      	strb	r3, [r7, #15]
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 80261da:	f107 030f 	add.w	r3, r7, #15
 80261de:	461a      	mov	r2, r3
 80261e0:	2100      	movs	r1, #0
 80261e2:	6878      	ldr	r0, [r7, #4]
 80261e4:	f7ff fc80 	bl	8025ae8 <nrf_read_register>
 80261e8:	4603      	mov	r3, r0
 80261ea:	2b00      	cmp	r3, #0
 80261ec:	d001      	beq.n	80261f2 <nrf_power_up+0x28>
        return NRF_ERROR;
 80261ee:	2301      	movs	r3, #1
 80261f0:	e01a      	b.n	8026228 <nrf_power_up+0x5e>
    }

    if (power_up) {
 80261f2:	78fb      	ldrb	r3, [r7, #3]
 80261f4:	2b00      	cmp	r3, #0
 80261f6:	d005      	beq.n	8026204 <nrf_power_up+0x3a>
        reg |= 1 << 1;
 80261f8:	7bfb      	ldrb	r3, [r7, #15]
 80261fa:	f043 0302 	orr.w	r3, r3, #2
 80261fe:	b2db      	uxtb	r3, r3
 8026200:	73fb      	strb	r3, [r7, #15]
 8026202:	e004      	b.n	802620e <nrf_power_up+0x44>
    } else {
        reg &= ~(1 << 1);
 8026204:	7bfb      	ldrb	r3, [r7, #15]
 8026206:	f023 0302 	bic.w	r3, r3, #2
 802620a:	b2db      	uxtb	r3, r3
 802620c:	73fb      	strb	r3, [r7, #15]
    }

    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 802620e:	f107 030f 	add.w	r3, r7, #15
 8026212:	461a      	mov	r2, r3
 8026214:	2100      	movs	r1, #0
 8026216:	6878      	ldr	r0, [r7, #4]
 8026218:	f7ff fcab 	bl	8025b72 <nrf_write_register>
 802621c:	4603      	mov	r3, r0
 802621e:	2b00      	cmp	r3, #0
 8026220:	d001      	beq.n	8026226 <nrf_power_up+0x5c>
        return NRF_ERROR;
 8026222:	2301      	movs	r3, #1
 8026224:	e000      	b.n	8026228 <nrf_power_up+0x5e>
    }
    return NRF_OK;
 8026226:	2300      	movs	r3, #0
}
 8026228:	4618      	mov	r0, r3
 802622a:	3710      	adds	r7, #16
 802622c:	46bd      	mov	sp, r7
 802622e:	bd80      	pop	{r7, pc}

08026230 <nrf_rx_tx_control>:

NRF_RESULT nrf_rx_tx_control(nrf24l01 *dev, NRF_TXRX_STATE rx) {
 8026230:	b580      	push	{r7, lr}
 8026232:	b084      	sub	sp, #16
 8026234:	af00      	add	r7, sp, #0
 8026236:	6078      	str	r0, [r7, #4]
 8026238:	460b      	mov	r3, r1
 802623a:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 802623c:	2300      	movs	r3, #0
 802623e:	73fb      	strb	r3, [r7, #15]
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8026240:	f107 030f 	add.w	r3, r7, #15
 8026244:	461a      	mov	r2, r3
 8026246:	2100      	movs	r1, #0
 8026248:	6878      	ldr	r0, [r7, #4]
 802624a:	f7ff fc4d 	bl	8025ae8 <nrf_read_register>
 802624e:	4603      	mov	r3, r0
 8026250:	2b00      	cmp	r3, #0
 8026252:	d001      	beq.n	8026258 <nrf_rx_tx_control+0x28>
        return NRF_ERROR;
 8026254:	2301      	movs	r3, #1
 8026256:	e01a      	b.n	802628e <nrf_rx_tx_control+0x5e>
    }

    if (rx) {
 8026258:	78fb      	ldrb	r3, [r7, #3]
 802625a:	2b00      	cmp	r3, #0
 802625c:	d005      	beq.n	802626a <nrf_rx_tx_control+0x3a>
        reg |= 1;
 802625e:	7bfb      	ldrb	r3, [r7, #15]
 8026260:	f043 0301 	orr.w	r3, r3, #1
 8026264:	b2db      	uxtb	r3, r3
 8026266:	73fb      	strb	r3, [r7, #15]
 8026268:	e004      	b.n	8026274 <nrf_rx_tx_control+0x44>
    } else {
        reg &= ~(1);
 802626a:	7bfb      	ldrb	r3, [r7, #15]
 802626c:	f023 0301 	bic.w	r3, r3, #1
 8026270:	b2db      	uxtb	r3, r3
 8026272:	73fb      	strb	r3, [r7, #15]
    }

    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8026274:	f107 030f 	add.w	r3, r7, #15
 8026278:	461a      	mov	r2, r3
 802627a:	2100      	movs	r1, #0
 802627c:	6878      	ldr	r0, [r7, #4]
 802627e:	f7ff fc78 	bl	8025b72 <nrf_write_register>
 8026282:	4603      	mov	r3, r0
 8026284:	2b00      	cmp	r3, #0
 8026286:	d001      	beq.n	802628c <nrf_rx_tx_control+0x5c>
        return NRF_ERROR;
 8026288:	2301      	movs	r3, #1
 802628a:	e000      	b.n	802628e <nrf_rx_tx_control+0x5e>
    }
    return NRF_OK;
 802628c:	2300      	movs	r3, #0
}
 802628e:	4618      	mov	r0, r3
 8026290:	3710      	adds	r7, #16
 8026292:	46bd      	mov	sp, r7
 8026294:	bd80      	pop	{r7, pc}

08026296 <nrf_enable_rx_data_ready_irq>:

NRF_RESULT nrf_enable_rx_data_ready_irq(nrf24l01 *dev, uint8_t activate) {
 8026296:	b580      	push	{r7, lr}
 8026298:	b084      	sub	sp, #16
 802629a:	af00      	add	r7, sp, #0
 802629c:	6078      	str	r0, [r7, #4]
 802629e:	460b      	mov	r3, r1
 80262a0:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 80262a2:	2300      	movs	r3, #0
 80262a4:	73fb      	strb	r3, [r7, #15]
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 80262a6:	f107 030f 	add.w	r3, r7, #15
 80262aa:	461a      	mov	r2, r3
 80262ac:	2100      	movs	r1, #0
 80262ae:	6878      	ldr	r0, [r7, #4]
 80262b0:	f7ff fc1a 	bl	8025ae8 <nrf_read_register>
 80262b4:	4603      	mov	r3, r0
 80262b6:	2b00      	cmp	r3, #0
 80262b8:	d001      	beq.n	80262be <nrf_enable_rx_data_ready_irq+0x28>
        return NRF_ERROR;
 80262ba:	2301      	movs	r3, #1
 80262bc:	e01a      	b.n	80262f4 <nrf_enable_rx_data_ready_irq+0x5e>
    }

    if (!activate) {
 80262be:	78fb      	ldrb	r3, [r7, #3]
 80262c0:	2b00      	cmp	r3, #0
 80262c2:	d105      	bne.n	80262d0 <nrf_enable_rx_data_ready_irq+0x3a>
        reg |= 1 << 6;
 80262c4:	7bfb      	ldrb	r3, [r7, #15]
 80262c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80262ca:	b2db      	uxtb	r3, r3
 80262cc:	73fb      	strb	r3, [r7, #15]
 80262ce:	e004      	b.n	80262da <nrf_enable_rx_data_ready_irq+0x44>
    } else {
        reg &= ~(1 << 6);
 80262d0:	7bfb      	ldrb	r3, [r7, #15]
 80262d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80262d6:	b2db      	uxtb	r3, r3
 80262d8:	73fb      	strb	r3, [r7, #15]
    }

    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 80262da:	f107 030f 	add.w	r3, r7, #15
 80262de:	461a      	mov	r2, r3
 80262e0:	2100      	movs	r1, #0
 80262e2:	6878      	ldr	r0, [r7, #4]
 80262e4:	f7ff fc45 	bl	8025b72 <nrf_write_register>
 80262e8:	4603      	mov	r3, r0
 80262ea:	2b00      	cmp	r3, #0
 80262ec:	d001      	beq.n	80262f2 <nrf_enable_rx_data_ready_irq+0x5c>
        return NRF_ERROR;
 80262ee:	2301      	movs	r3, #1
 80262f0:	e000      	b.n	80262f4 <nrf_enable_rx_data_ready_irq+0x5e>
    }
    return NRF_OK;
 80262f2:	2300      	movs	r3, #0
}
 80262f4:	4618      	mov	r0, r3
 80262f6:	3710      	adds	r7, #16
 80262f8:	46bd      	mov	sp, r7
 80262fa:	bd80      	pop	{r7, pc}

080262fc <nrf_enable_tx_data_sent_irq>:

NRF_RESULT nrf_enable_tx_data_sent_irq(nrf24l01 *dev, uint8_t activate) {
 80262fc:	b580      	push	{r7, lr}
 80262fe:	b084      	sub	sp, #16
 8026300:	af00      	add	r7, sp, #0
 8026302:	6078      	str	r0, [r7, #4]
 8026304:	460b      	mov	r3, r1
 8026306:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 8026308:	2300      	movs	r3, #0
 802630a:	73fb      	strb	r3, [r7, #15]
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 802630c:	f107 030f 	add.w	r3, r7, #15
 8026310:	461a      	mov	r2, r3
 8026312:	2100      	movs	r1, #0
 8026314:	6878      	ldr	r0, [r7, #4]
 8026316:	f7ff fbe7 	bl	8025ae8 <nrf_read_register>
 802631a:	4603      	mov	r3, r0
 802631c:	2b00      	cmp	r3, #0
 802631e:	d001      	beq.n	8026324 <nrf_enable_tx_data_sent_irq+0x28>
        return NRF_ERROR;
 8026320:	2301      	movs	r3, #1
 8026322:	e01a      	b.n	802635a <nrf_enable_tx_data_sent_irq+0x5e>
    }
    if (!activate) {
 8026324:	78fb      	ldrb	r3, [r7, #3]
 8026326:	2b00      	cmp	r3, #0
 8026328:	d105      	bne.n	8026336 <nrf_enable_tx_data_sent_irq+0x3a>
        reg |= 1 << 5;
 802632a:	7bfb      	ldrb	r3, [r7, #15]
 802632c:	f043 0320 	orr.w	r3, r3, #32
 8026330:	b2db      	uxtb	r3, r3
 8026332:	73fb      	strb	r3, [r7, #15]
 8026334:	e004      	b.n	8026340 <nrf_enable_tx_data_sent_irq+0x44>
    } else {
        reg &= ~(1 << 5);
 8026336:	7bfb      	ldrb	r3, [r7, #15]
 8026338:	f023 0320 	bic.w	r3, r3, #32
 802633c:	b2db      	uxtb	r3, r3
 802633e:	73fb      	strb	r3, [r7, #15]
    }
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8026340:	f107 030f 	add.w	r3, r7, #15
 8026344:	461a      	mov	r2, r3
 8026346:	2100      	movs	r1, #0
 8026348:	6878      	ldr	r0, [r7, #4]
 802634a:	f7ff fc12 	bl	8025b72 <nrf_write_register>
 802634e:	4603      	mov	r3, r0
 8026350:	2b00      	cmp	r3, #0
 8026352:	d001      	beq.n	8026358 <nrf_enable_tx_data_sent_irq+0x5c>
        return NRF_ERROR;
 8026354:	2301      	movs	r3, #1
 8026356:	e000      	b.n	802635a <nrf_enable_tx_data_sent_irq+0x5e>
    }
    return NRF_OK;
 8026358:	2300      	movs	r3, #0
}
 802635a:	4618      	mov	r0, r3
 802635c:	3710      	adds	r7, #16
 802635e:	46bd      	mov	sp, r7
 8026360:	bd80      	pop	{r7, pc}

08026362 <nrf_enable_max_retransmit_irq>:

NRF_RESULT nrf_enable_max_retransmit_irq(nrf24l01 *dev, uint8_t activate) {
 8026362:	b580      	push	{r7, lr}
 8026364:	b084      	sub	sp, #16
 8026366:	af00      	add	r7, sp, #0
 8026368:	6078      	str	r0, [r7, #4]
 802636a:	460b      	mov	r3, r1
 802636c:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 802636e:	2300      	movs	r3, #0
 8026370:	73fb      	strb	r3, [r7, #15]
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8026372:	f107 030f 	add.w	r3, r7, #15
 8026376:	461a      	mov	r2, r3
 8026378:	2100      	movs	r1, #0
 802637a:	6878      	ldr	r0, [r7, #4]
 802637c:	f7ff fbb4 	bl	8025ae8 <nrf_read_register>
 8026380:	4603      	mov	r3, r0
 8026382:	2b00      	cmp	r3, #0
 8026384:	d001      	beq.n	802638a <nrf_enable_max_retransmit_irq+0x28>
        return NRF_ERROR;
 8026386:	2301      	movs	r3, #1
 8026388:	e01a      	b.n	80263c0 <nrf_enable_max_retransmit_irq+0x5e>
    }
    if (!activate) {
 802638a:	78fb      	ldrb	r3, [r7, #3]
 802638c:	2b00      	cmp	r3, #0
 802638e:	d105      	bne.n	802639c <nrf_enable_max_retransmit_irq+0x3a>
        reg |= 1 << 4;
 8026390:	7bfb      	ldrb	r3, [r7, #15]
 8026392:	f043 0310 	orr.w	r3, r3, #16
 8026396:	b2db      	uxtb	r3, r3
 8026398:	73fb      	strb	r3, [r7, #15]
 802639a:	e004      	b.n	80263a6 <nrf_enable_max_retransmit_irq+0x44>
    } else {
        reg &= ~(1 << 4);
 802639c:	7bfb      	ldrb	r3, [r7, #15]
 802639e:	f023 0310 	bic.w	r3, r3, #16
 80263a2:	b2db      	uxtb	r3, r3
 80263a4:	73fb      	strb	r3, [r7, #15]
    }
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 80263a6:	f107 030f 	add.w	r3, r7, #15
 80263aa:	461a      	mov	r2, r3
 80263ac:	2100      	movs	r1, #0
 80263ae:	6878      	ldr	r0, [r7, #4]
 80263b0:	f7ff fbdf 	bl	8025b72 <nrf_write_register>
 80263b4:	4603      	mov	r3, r0
 80263b6:	2b00      	cmp	r3, #0
 80263b8:	d001      	beq.n	80263be <nrf_enable_max_retransmit_irq+0x5c>
        return NRF_ERROR;
 80263ba:	2301      	movs	r3, #1
 80263bc:	e000      	b.n	80263c0 <nrf_enable_max_retransmit_irq+0x5e>
    }
    return NRF_OK;
 80263be:	2300      	movs	r3, #0
}
 80263c0:	4618      	mov	r0, r3
 80263c2:	3710      	adds	r7, #16
 80263c4:	46bd      	mov	sp, r7
 80263c6:	bd80      	pop	{r7, pc}

080263c8 <nrf_set_rx_address_p0>:

NRF_RESULT nrf_set_rx_address_p0(nrf24l01 *dev, const uint8_t *address) {
 80263c8:	b580      	push	{r7, lr}
 80263ca:	b086      	sub	sp, #24
 80263cc:	af02      	add	r7, sp, #8
 80263ce:	6078      	str	r0, [r7, #4]
 80263d0:	6039      	str	r1, [r7, #0]
    uint8_t rx[5];
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_RX_ADDR_P0, address, rx,
 80263d2:	f107 0208 	add.w	r2, r7, #8
 80263d6:	2305      	movs	r3, #5
 80263d8:	9300      	str	r3, [sp, #0]
 80263da:	4613      	mov	r3, r2
 80263dc:	683a      	ldr	r2, [r7, #0]
 80263de:	212a      	movs	r1, #42	; 0x2a
 80263e0:	6878      	ldr	r0, [r7, #4]
 80263e2:	f7ff faa9 	bl	8025938 <nrf_send_command>
 80263e6:	4603      	mov	r3, r0
 80263e8:	2b00      	cmp	r3, #0
 80263ea:	d001      	beq.n	80263f0 <nrf_set_rx_address_p0+0x28>
            5) != NRF_OK) {
        return NRF_ERROR;
 80263ec:	2301      	movs	r3, #1
 80263ee:	e003      	b.n	80263f8 <nrf_set_rx_address_p0+0x30>
    }
    dev->config.rx_address = address;
 80263f0:	687b      	ldr	r3, [r7, #4]
 80263f2:	683a      	ldr	r2, [r7, #0]
 80263f4:	609a      	str	r2, [r3, #8]
    return NRF_OK;
 80263f6:	2300      	movs	r3, #0
}
 80263f8:	4618      	mov	r0, r3
 80263fa:	3710      	adds	r7, #16
 80263fc:	46bd      	mov	sp, r7
 80263fe:	bd80      	pop	{r7, pc}

08026400 <nrf_set_tx_address>:
    }
    dev->config.rx_address = address;
    return NRF_OK;
}

NRF_RESULT nrf_set_tx_address(nrf24l01 *dev, const uint8_t *address) {
 8026400:	b580      	push	{r7, lr}
 8026402:	b086      	sub	sp, #24
 8026404:	af02      	add	r7, sp, #8
 8026406:	6078      	str	r0, [r7, #4]
 8026408:	6039      	str	r1, [r7, #0]
    uint8_t rx[5];
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_TX_ADDR, address, rx, 5)
 802640a:	f107 0208 	add.w	r2, r7, #8
 802640e:	2305      	movs	r3, #5
 8026410:	9300      	str	r3, [sp, #0]
 8026412:	4613      	mov	r3, r2
 8026414:	683a      	ldr	r2, [r7, #0]
 8026416:	2130      	movs	r1, #48	; 0x30
 8026418:	6878      	ldr	r0, [r7, #4]
 802641a:	f7ff fa8d 	bl	8025938 <nrf_send_command>
 802641e:	4603      	mov	r3, r0
 8026420:	2b00      	cmp	r3, #0
 8026422:	d001      	beq.n	8026428 <nrf_set_tx_address+0x28>
            != NRF_OK) {
        return NRF_ERROR;
 8026424:	2301      	movs	r3, #1
 8026426:	e003      	b.n	8026430 <nrf_set_tx_address+0x30>
    }
    dev->config.tx_address = address;
 8026428:	687b      	ldr	r3, [r7, #4]
 802642a:	683a      	ldr	r2, [r7, #0]
 802642c:	60da      	str	r2, [r3, #12]
    return NRF_OK;
 802642e:	2300      	movs	r3, #0
}
 8026430:	4618      	mov	r0, r3
 8026432:	3710      	adds	r7, #16
 8026434:	46bd      	mov	sp, r7
 8026436:	bd80      	pop	{r7, pc}

08026438 <nrf_set_rx_payload_width_p0>:

NRF_RESULT nrf_set_rx_payload_width_p0(nrf24l01 *dev, uint8_t width) {
 8026438:	b580      	push	{r7, lr}
 802643a:	b082      	sub	sp, #8
 802643c:	af00      	add	r7, sp, #0
 802643e:	6078      	str	r0, [r7, #4]
 8026440:	460b      	mov	r3, r1
 8026442:	70fb      	strb	r3, [r7, #3]
    width &= 0x3F;
 8026444:	78fb      	ldrb	r3, [r7, #3]
 8026446:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802644a:	b2db      	uxtb	r3, r3
 802644c:	70fb      	strb	r3, [r7, #3]
    if (nrf_write_register(dev, NRF_RX_PW_P0, &width) != NRF_OK) {
 802644e:	1cfb      	adds	r3, r7, #3
 8026450:	461a      	mov	r2, r3
 8026452:	2111      	movs	r1, #17
 8026454:	6878      	ldr	r0, [r7, #4]
 8026456:	f7ff fb8c 	bl	8025b72 <nrf_write_register>
 802645a:	4603      	mov	r3, r0
 802645c:	2b00      	cmp	r3, #0
 802645e:	d004      	beq.n	802646a <nrf_set_rx_payload_width_p0+0x32>
        dev->config.payload_length = 0;
 8026460:	687b      	ldr	r3, [r7, #4]
 8026462:	2200      	movs	r2, #0
 8026464:	711a      	strb	r2, [r3, #4]
        return NRF_ERROR;
 8026466:	2301      	movs	r3, #1
 8026468:	e003      	b.n	8026472 <nrf_set_rx_payload_width_p0+0x3a>
    }
    dev->config.payload_length = width;
 802646a:	78fa      	ldrb	r2, [r7, #3]
 802646c:	687b      	ldr	r3, [r7, #4]
 802646e:	711a      	strb	r2, [r3, #4]
    return NRF_OK;
 8026470:	2300      	movs	r3, #0
}
 8026472:	4618      	mov	r0, r3
 8026474:	3708      	adds	r7, #8
 8026476:	46bd      	mov	sp, r7
 8026478:	bd80      	pop	{r7, pc}

0802647a <nrf_send_packet>:
    }
    dev->config.payload_length = width;
    return NRF_OK;
}

NRF_RESULT nrf_send_packet(nrf24l01 *dev, const uint8_t *data) {
 802647a:	b580      	push	{r7, lr}
 802647c:	b082      	sub	sp, #8
 802647e:	af00      	add	r7, sp, #0
 8026480:	6078      	str	r0, [r7, #4]
 8026482:	6039      	str	r1, [r7, #0]
    dev->tx_busy = 1;
 8026484:	687b      	ldr	r3, [r7, #4]
 8026486:	2201      	movs	r2, #1
 8026488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    ce_reset(dev);
 802648c:	6878      	ldr	r0, [r7, #4]
 802648e:	f7ff f952 	bl	8025736 <ce_reset>
    nrf_rx_tx_control(dev, NRF_STATE_TX);
 8026492:	2100      	movs	r1, #0
 8026494:	6878      	ldr	r0, [r7, #4]
 8026496:	f7ff fecb 	bl	8026230 <nrf_rx_tx_control>
    nrf_write_tx_payload(dev, data);
 802649a:	6839      	ldr	r1, [r7, #0]
 802649c:	6878      	ldr	r0, [r7, #4]
 802649e:	f7ff fbf2 	bl	8025c86 <nrf_write_tx_payload>
    ce_set(dev);
 80264a2:	6878      	ldr	r0, [r7, #4]
 80264a4:	f7ff f937 	bl	8025716 <ce_set>

    while (dev->tx_busy == 1) {
 80264a8:	bf00      	nop
 80264aa:	687b      	ldr	r3, [r7, #4]
 80264ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80264b0:	b2db      	uxtb	r3, r3
 80264b2:	2b01      	cmp	r3, #1
 80264b4:	d0f9      	beq.n	80264aa <nrf_send_packet+0x30>
    } // wait for end of transmition

    _DelayMS(100);
 80264b6:	2064      	movs	r0, #100	; 0x64
 80264b8:	f019 f900 	bl	803f6bc <_DelayMS>
    ce_reset(dev);
 80264bc:	6878      	ldr	r0, [r7, #4]
 80264be:	f7ff f93a 	bl	8025736 <ce_reset>
    nrf_rx_tx_control(dev, NRF_STATE_RX);
 80264c2:	2101      	movs	r1, #1
 80264c4:	6878      	ldr	r0, [r7, #4]
 80264c6:	f7ff feb3 	bl	8026230 <nrf_rx_tx_control>
    ce_set(dev);
 80264ca:	6878      	ldr	r0, [r7, #4]
 80264cc:	f7ff f923 	bl	8025716 <ce_set>

    return dev->tx_result;
 80264d0:	687b      	ldr	r3, [r7, #4]
 80264d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80264d6:	b2db      	uxtb	r3, r3
}
 80264d8:	4618      	mov	r0, r3
 80264da:	3708      	adds	r7, #8
 80264dc:	46bd      	mov	sp, r7
 80264de:	bd80      	pop	{r7, pc}

080264e0 <nrf_irq_handler>:
    ce_set(dev);

    return NRF_OK;
}

void nrf_irq_handler(nrf24l01 *dev) {
 80264e0:	b580      	push	{r7, lr}
 80264e2:	b084      	sub	sp, #16
 80264e4:	af00      	add	r7, sp, #0
 80264e6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0;
 80264e8:	2300      	movs	r3, #0
 80264ea:	72fb      	strb	r3, [r7, #11]

    // read interrupt register
    if (nrf_read_register(dev, NRF_STATUS, &status) != NRF_OK) {
 80264ec:	f107 030b 	add.w	r3, r7, #11
 80264f0:	461a      	mov	r2, r3
 80264f2:	2107      	movs	r1, #7
 80264f4:	6878      	ldr	r0, [r7, #4]
 80264f6:	f7ff faf7 	bl	8025ae8 <nrf_read_register>
 80264fa:	4603      	mov	r3, r0
 80264fc:	2b00      	cmp	r3, #0
 80264fe:	f040 8084 	bne.w	802660a <nrf_irq_handler+0x12a>
        return;
    }

    if ((status & (1 << 6))) { // RX FIFO Interrupt
 8026502:	7afb      	ldrb	r3, [r7, #11]
 8026504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8026508:	2b00      	cmp	r3, #0
 802650a:	d034      	beq.n	8026576 <nrf_irq_handler+0x96>
        uint8_t fifo_status = 0;
 802650c:	2300      	movs	r3, #0
 802650e:	72bb      	strb	r3, [r7, #10]

        ce_reset(dev);
 8026510:	6878      	ldr	r0, [r7, #4]
 8026512:	f7ff f910 	bl	8025736 <ce_reset>
        nrf_write_register(dev, NRF_STATUS, &status);
 8026516:	f107 030b 	add.w	r3, r7, #11
 802651a:	461a      	mov	r2, r3
 802651c:	2107      	movs	r1, #7
 802651e:	6878      	ldr	r0, [r7, #4]
 8026520:	f7ff fb27 	bl	8025b72 <nrf_write_register>
        nrf_read_register(dev, NRF_FIFO_STATUS, &fifo_status);
 8026524:	f107 030a 	add.w	r3, r7, #10
 8026528:	461a      	mov	r2, r3
 802652a:	2117      	movs	r1, #23
 802652c:	6878      	ldr	r0, [r7, #4]
 802652e:	f7ff fadb 	bl	8025ae8 <nrf_read_register>

        if ((fifo_status & 1) == 0) {
 8026532:	7abb      	ldrb	r3, [r7, #10]
 8026534:	f003 0301 	and.w	r3, r3, #1
 8026538:	2b00      	cmp	r3, #0
 802653a:	d119      	bne.n	8026570 <nrf_irq_handler+0x90>
            uint8_t *rx_buffer = dev->config.rx_buffer;
 802653c:	687b      	ldr	r3, [r7, #4]
 802653e:	691b      	ldr	r3, [r3, #16]
 8026540:	60fb      	str	r3, [r7, #12]
            nrf_read_rx_payload(dev, rx_buffer);
 8026542:	68f9      	ldr	r1, [r7, #12]
 8026544:	6878      	ldr	r0, [r7, #4]
 8026546:	f7ff fb5f 	bl	8025c08 <nrf_read_rx_payload>

            status |= 1 << 6;
 802654a:	7afb      	ldrb	r3, [r7, #11]
 802654c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026550:	b2db      	uxtb	r3, r3
 8026552:	72fb      	strb	r3, [r7, #11]
            nrf_write_register(dev, NRF_STATUS, &status);
 8026554:	f107 030b 	add.w	r3, r7, #11
 8026558:	461a      	mov	r2, r3
 802655a:	2107      	movs	r1, #7
 802655c:	6878      	ldr	r0, [r7, #4]
 802655e:	f7ff fb08 	bl	8025b72 <nrf_write_register>
            nrf_flush_rx(dev);
 8026562:	6878      	ldr	r0, [r7, #4]
 8026564:	f7ff fbec 	bl	8025d40 <nrf_flush_rx>
            nrf_packet_received_callback(dev, rx_buffer);
 8026568:	68f9      	ldr	r1, [r7, #12]
 802656a:	6878      	ldr	r0, [r7, #4]
 802656c:	f001 fe0c 	bl	8028188 <nrf_packet_received_callback>
        }
        ce_set(dev);
 8026570:	6878      	ldr	r0, [r7, #4]
 8026572:	f7ff f8d0 	bl	8025716 <ce_set>

    }
    if ((status & (1 << 5))) { // TX Data Sent Interrupt
 8026576:	7afb      	ldrb	r3, [r7, #11]
 8026578:	f003 0320 	and.w	r3, r3, #32
 802657c:	2b00      	cmp	r3, #0
 802657e:	d019      	beq.n	80265b4 <nrf_irq_handler+0xd4>
        status |= 1 << 5;      // clear the interrupt flag
 8026580:	7afb      	ldrb	r3, [r7, #11]
 8026582:	f043 0320 	orr.w	r3, r3, #32
 8026586:	b2db      	uxtb	r3, r3
 8026588:	72fb      	strb	r3, [r7, #11]

        ce_reset(dev);
 802658a:	6878      	ldr	r0, [r7, #4]
 802658c:	f7ff f8d3 	bl	8025736 <ce_reset>
        //        nrf_rx_tx_control(dev, NRF_STATE_RX);
        //        dev->state = NRF_STATE_RX;
        nrf_write_register(dev, NRF_STATUS, &status);
 8026590:	f107 030b 	add.w	r3, r7, #11
 8026594:	461a      	mov	r2, r3
 8026596:	2107      	movs	r1, #7
 8026598:	6878      	ldr	r0, [r7, #4]
 802659a:	f7ff faea 	bl	8025b72 <nrf_write_register>
        ce_set(dev);
 802659e:	6878      	ldr	r0, [r7, #4]
 80265a0:	f7ff f8b9 	bl	8025716 <ce_set>

        dev->tx_result = NRF_OK;
 80265a4:	687b      	ldr	r3, [r7, #4]
 80265a6:	2200      	movs	r2, #0
 80265a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        dev->tx_busy = 0;
 80265ac:	687b      	ldr	r3, [r7, #4]
 80265ae:	2200      	movs	r2, #0
 80265b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    if ((status & (1 << 4))) { // MaxRetransmits reached
 80265b4:	7afb      	ldrb	r3, [r7, #11]
 80265b6:	f003 0310 	and.w	r3, r3, #16
 80265ba:	2b00      	cmp	r3, #0
 80265bc:	d026      	beq.n	802660c <nrf_irq_handler+0x12c>
        status |= 1 << 4;      // clear the interrupt flag
 80265be:	7afb      	ldrb	r3, [r7, #11]
 80265c0:	f043 0310 	orr.w	r3, r3, #16
 80265c4:	b2db      	uxtb	r3, r3
 80265c6:	72fb      	strb	r3, [r7, #11]

        ce_reset(dev);
 80265c8:	6878      	ldr	r0, [r7, #4]
 80265ca:	f7ff f8b4 	bl	8025736 <ce_reset>
        nrf_flush_tx(dev);
 80265ce:	6878      	ldr	r0, [r7, #4]
 80265d0:	f7ff fb99 	bl	8025d06 <nrf_flush_tx>
        nrf_power_up(dev, 0); // power down
 80265d4:	2100      	movs	r1, #0
 80265d6:	6878      	ldr	r0, [r7, #4]
 80265d8:	f7ff fdf7 	bl	80261ca <nrf_power_up>
        nrf_power_up(dev, 1); // power up
 80265dc:	2101      	movs	r1, #1
 80265de:	6878      	ldr	r0, [r7, #4]
 80265e0:	f7ff fdf3 	bl	80261ca <nrf_power_up>

        //        nrf_rx_tx_control(dev, NRF_STATE_RX);
        //        dev->state = NRF_STATE_RX;
        nrf_write_register(dev, NRF_STATUS, &status);
 80265e4:	f107 030b 	add.w	r3, r7, #11
 80265e8:	461a      	mov	r2, r3
 80265ea:	2107      	movs	r1, #7
 80265ec:	6878      	ldr	r0, [r7, #4]
 80265ee:	f7ff fac0 	bl	8025b72 <nrf_write_register>
        ce_set(dev);
 80265f2:	6878      	ldr	r0, [r7, #4]
 80265f4:	f7ff f88f 	bl	8025716 <ce_set>

        dev->tx_result = NRF_ERROR;
 80265f8:	687b      	ldr	r3, [r7, #4]
 80265fa:	2201      	movs	r2, #1
 80265fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        dev->tx_busy = 0;
 8026600:	687b      	ldr	r3, [r7, #4]
 8026602:	2200      	movs	r2, #0
 8026604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8026608:	e000      	b.n	802660c <nrf_irq_handler+0x12c>
        return;
 802660a:	bf00      	nop
    }
}
 802660c:	3710      	adds	r7, #16
 802660e:	46bd      	mov	sp, r7
 8026610:	bd80      	pop	{r7, pc}

08026612 <csn_set>:
    // default implementation (__weak) is used in favor of nrf_receive_packet
    dev->rx_busy = 0;
}

/* Private functions implementation --------------------------------------------*/
static void csn_set(nrf24l01 *dev) {
 8026612:	b580      	push	{r7, lr}
 8026614:	b082      	sub	sp, #8
 8026616:	af00      	add	r7, sp, #0
 8026618:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(dev->config.csn_port, dev->config.csn_pin, GPIO_PIN_SET);
 802661a:	687b      	ldr	r3, [r7, #4]
 802661c:	69d8      	ldr	r0, [r3, #28]
 802661e:	687b      	ldr	r3, [r7, #4]
 8026620:	8c1b      	ldrh	r3, [r3, #32]
 8026622:	2201      	movs	r2, #1
 8026624:	4619      	mov	r1, r3
 8026626:	f009 fd93 	bl	8030150 <HAL_GPIO_WritePin>
}
 802662a:	bf00      	nop
 802662c:	3708      	adds	r7, #8
 802662e:	46bd      	mov	sp, r7
 8026630:	bd80      	pop	{r7, pc}

08026632 <csn_reset>:

static void csn_reset(nrf24l01 *dev) {
 8026632:	b580      	push	{r7, lr}
 8026634:	b082      	sub	sp, #8
 8026636:	af00      	add	r7, sp, #0
 8026638:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(dev->config.csn_port, dev->config.csn_pin,
 802663a:	687b      	ldr	r3, [r7, #4]
 802663c:	69d8      	ldr	r0, [r3, #28]
 802663e:	687b      	ldr	r3, [r7, #4]
 8026640:	8c1b      	ldrh	r3, [r3, #32]
 8026642:	2200      	movs	r2, #0
 8026644:	4619      	mov	r1, r3
 8026646:	f009 fd83 	bl	8030150 <HAL_GPIO_WritePin>
            GPIO_PIN_RESET);
}
 802664a:	bf00      	nop
 802664c:	3708      	adds	r7, #8
 802664e:	46bd      	mov	sp, r7
 8026650:	bd80      	pop	{r7, pc}
 8026652:	0000      	movs	r0, r0
 8026654:	0000      	movs	r0, r0
	...

08026658 <RTC_Decode>:
/* Private functions declaration ----------------------------------------------*/
static void lock(void);
static void unlock(void);

/* Public functions implementation --------------------------------------------*/
timestamp_t RTC_Decode(uint64_t dateTime) {
 8026658:	b5f0      	push	{r4, r5, r6, r7, lr}
 802665a:	b093      	sub	sp, #76	; 0x4c
 802665c:	af00      	add	r7, sp, #0
 802665e:	60f8      	str	r0, [r7, #12]
 8026660:	e9c7 2300 	strd	r2, r3, [r7]
    // format dateTime: YYMMDDHHmmssE
    uint8_t dt[7];
    timestamp_t timestamp;
    uint64_t tot = 0, mul;
 8026664:	f04f 0300 	mov.w	r3, #0
 8026668:	f04f 0400 	mov.w	r4, #0
 802666c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

    // parsing to timestamp
    for (int i = 0; i <= 6; i++) {
 8026670:	2300      	movs	r3, #0
 8026672:	637b      	str	r3, [r7, #52]	; 0x34
 8026674:	e056      	b.n	8026724 <RTC_Decode+0xcc>
        if (i < 6) {
 8026676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026678:	2b05      	cmp	r3, #5
 802667a:	dc19      	bgt.n	80266b0 <RTC_Decode+0x58>
            mul = pow(10, (11 - (2 * i)));
 802667c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802667e:	005b      	lsls	r3, r3, #1
 8026680:	f1c3 030b 	rsb	r3, r3, #11
 8026684:	4618      	mov	r0, r3
 8026686:	f7f9 ff85 	bl	8020594 <__aeabi_i2d>
 802668a:	4603      	mov	r3, r0
 802668c:	460c      	mov	r4, r1
 802668e:	ec44 3b11 	vmov	d1, r3, r4
 8026692:	ed9f 0b39 	vldr	d0, [pc, #228]	; 8026778 <RTC_Decode+0x120>
 8026696:	f01b fbb3 	bl	8041e00 <pow>
 802669a:	ec54 3b10 	vmov	r3, r4, d0
 802669e:	4618      	mov	r0, r3
 80266a0:	4621      	mov	r1, r4
 80266a2:	f7fa fb41 	bl	8020d28 <__aeabi_d2ulz>
 80266a6:	4603      	mov	r3, r0
 80266a8:	460c      	mov	r4, r1
 80266aa:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
 80266ae:	e005      	b.n	80266bc <RTC_Decode+0x64>
        } else {
            mul = 1;
 80266b0:	f04f 0301 	mov.w	r3, #1
 80266b4:	f04f 0400 	mov.w	r4, #0
 80266b8:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
        }

        dt[i] = (dateTime - tot) / mul;
 80266bc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80266c0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80266c4:	1ac9      	subs	r1, r1, r3
 80266c6:	eb62 0204 	sbc.w	r2, r2, r4
 80266ca:	4608      	mov	r0, r1
 80266cc:	4611      	mov	r1, r2
 80266ce:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80266d2:	f7fa fb11 	bl	8020cf8 <__aeabi_uldivmod>
 80266d6:	4603      	mov	r3, r0
 80266d8:	460c      	mov	r4, r1
 80266da:	b2d9      	uxtb	r1, r3
 80266dc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80266e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80266e2:	4413      	add	r3, r2
 80266e4:	460a      	mov	r2, r1
 80266e6:	701a      	strb	r2, [r3, #0]
        tot += (dt[i] * mul);
 80266e8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80266ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80266ee:	4413      	add	r3, r2
 80266f0:	781b      	ldrb	r3, [r3, #0]
 80266f2:	b2db      	uxtb	r3, r3
 80266f4:	f04f 0400 	mov.w	r4, #0
 80266f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80266fa:	fb04 f102 	mul.w	r1, r4, r2
 80266fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8026700:	fb03 f202 	mul.w	r2, r3, r2
 8026704:	440a      	add	r2, r1
 8026706:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8026708:	fba1 5603 	umull	r5, r6, r1, r3
 802670c:	4432      	add	r2, r6
 802670e:	4616      	mov	r6, r2
 8026710:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8026714:	186b      	adds	r3, r5, r1
 8026716:	eb46 0402 	adc.w	r4, r6, r2
 802671a:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    for (int i = 0; i <= 6; i++) {
 802671e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026720:	3301      	adds	r3, #1
 8026722:	637b      	str	r3, [r7, #52]	; 0x34
 8026724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026726:	2b06      	cmp	r3, #6
 8026728:	dda5      	ble.n	8026676 <RTC_Decode+0x1e>
    }

    // fill to timestamp
    timestamp.date.Year = dt[0];
 802672a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802672e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    timestamp.date.Month = dt[1];
 8026732:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8026736:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    timestamp.date.Date = dt[2];
 802673a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 802673e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    timestamp.time.Hours = dt[3];
 8026742:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8026746:	743b      	strb	r3, [r7, #16]
    timestamp.time.Minutes = dt[4];
 8026748:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 802674c:	747b      	strb	r3, [r7, #17]
    timestamp.time.Seconds = dt[5];
 802674e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8026752:	74bb      	strb	r3, [r7, #18]
    timestamp.date.WeekDay = dt[6];
 8026754:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8026758:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

    return timestamp;
 802675c:	68fb      	ldr	r3, [r7, #12]
 802675e:	461d      	mov	r5, r3
 8026760:	f107 0410 	add.w	r4, r7, #16
 8026764:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8026766:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8026768:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 802676c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8026770:	68f8      	ldr	r0, [r7, #12]
 8026772:	374c      	adds	r7, #76	; 0x4c
 8026774:	46bd      	mov	sp, r7
 8026776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026778:	00000000 	.word	0x00000000
 802677c:	40240000 	.word	0x40240000

08026780 <RTC_Encode>:

uint64_t RTC_Encode(timestamp_t timestamp) {
 8026780:	b084      	sub	sp, #16
 8026782:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8026786:	b088      	sub	sp, #32
 8026788:	af00      	add	r7, sp, #0
 802678a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 802678e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint8_t dt[7];
    uint64_t tot = 0, mul;
 8026792:	f04f 0300 	mov.w	r3, #0
 8026796:	f04f 0400 	mov.w	r4, #0
 802679a:	e9c7 3406 	strd	r3, r4, [r7, #24]

    // get from timestamp
    dt[0] = timestamp.date.Year;
 802679e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80267a2:	713b      	strb	r3, [r7, #4]
    dt[1] = timestamp.date.Month;
 80267a4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80267a8:	717b      	strb	r3, [r7, #5]
    dt[2] = timestamp.date.Date;
 80267aa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80267ae:	71bb      	strb	r3, [r7, #6]
    dt[3] = timestamp.time.Hours;
 80267b0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80267b4:	71fb      	strb	r3, [r7, #7]
    dt[4] = timestamp.time.Minutes;
 80267b6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80267ba:	723b      	strb	r3, [r7, #8]
    dt[5] = timestamp.time.Seconds;
 80267bc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80267c0:	727b      	strb	r3, [r7, #9]
    dt[6] = timestamp.date.WeekDay;
 80267c2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80267c6:	72bb      	strb	r3, [r7, #10]

    // parsing to datetime
    for (int i = 0; i <= 6; i++) {
 80267c8:	2300      	movs	r3, #0
 80267ca:	60fb      	str	r3, [r7, #12]
 80267cc:	e040      	b.n	8026850 <RTC_Encode+0xd0>
        if (i < 6) {
 80267ce:	68fb      	ldr	r3, [r7, #12]
 80267d0:	2b05      	cmp	r3, #5
 80267d2:	dc19      	bgt.n	8026808 <RTC_Encode+0x88>
            mul = pow(10, (11 - (2 * i)));
 80267d4:	68fb      	ldr	r3, [r7, #12]
 80267d6:	005b      	lsls	r3, r3, #1
 80267d8:	f1c3 030b 	rsb	r3, r3, #11
 80267dc:	4618      	mov	r0, r3
 80267de:	f7f9 fed9 	bl	8020594 <__aeabi_i2d>
 80267e2:	4603      	mov	r3, r0
 80267e4:	460c      	mov	r4, r1
 80267e6:	ec44 3b11 	vmov	d1, r3, r4
 80267ea:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8026870 <RTC_Encode+0xf0>
 80267ee:	f01b fb07 	bl	8041e00 <pow>
 80267f2:	ec54 3b10 	vmov	r3, r4, d0
 80267f6:	4618      	mov	r0, r3
 80267f8:	4621      	mov	r1, r4
 80267fa:	f7fa fa95 	bl	8020d28 <__aeabi_d2ulz>
 80267fe:	4603      	mov	r3, r0
 8026800:	460c      	mov	r4, r1
 8026802:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8026806:	e005      	b.n	8026814 <RTC_Encode+0x94>
        } else {
            mul = 1;
 8026808:	f04f 0301 	mov.w	r3, #1
 802680c:	f04f 0400 	mov.w	r4, #0
 8026810:	e9c7 3404 	strd	r3, r4, [r7, #16]
        }
        tot += dt[i] * mul;
 8026814:	1d3a      	adds	r2, r7, #4
 8026816:	68fb      	ldr	r3, [r7, #12]
 8026818:	4413      	add	r3, r2
 802681a:	781b      	ldrb	r3, [r3, #0]
 802681c:	b2db      	uxtb	r3, r3
 802681e:	f04f 0400 	mov.w	r4, #0
 8026822:	693a      	ldr	r2, [r7, #16]
 8026824:	fb04 f102 	mul.w	r1, r4, r2
 8026828:	697a      	ldr	r2, [r7, #20]
 802682a:	fb03 f202 	mul.w	r2, r3, r2
 802682e:	440a      	add	r2, r1
 8026830:	6939      	ldr	r1, [r7, #16]
 8026832:	fba1 bc03 	umull	fp, ip, r1, r3
 8026836:	4462      	add	r2, ip
 8026838:	4694      	mov	ip, r2
 802683a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 802683e:	eb1b 0301 	adds.w	r3, fp, r1
 8026842:	eb4c 0402 	adc.w	r4, ip, r2
 8026846:	e9c7 3406 	strd	r3, r4, [r7, #24]
    for (int i = 0; i <= 6; i++) {
 802684a:	68fb      	ldr	r3, [r7, #12]
 802684c:	3301      	adds	r3, #1
 802684e:	60fb      	str	r3, [r7, #12]
 8026850:	68fb      	ldr	r3, [r7, #12]
 8026852:	2b06      	cmp	r3, #6
 8026854:	ddbb      	ble.n	80267ce <RTC_Encode+0x4e>
    }

    return tot;
 8026856:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
}
 802685a:	4618      	mov	r0, r3
 802685c:	4621      	mov	r1, r4
 802685e:	3720      	adds	r7, #32
 8026860:	46bd      	mov	sp, r7
 8026862:	e8bd 4890 	ldmia.w	sp!, {r4, r7, fp, lr}
 8026866:	b004      	add	sp, #16
 8026868:	4770      	bx	lr
 802686a:	bf00      	nop
 802686c:	f3af 8000 	nop.w
 8026870:	00000000 	.word	0x00000000
 8026874:	40240000 	.word	0x40240000

08026878 <RTC_Read>:

uint64_t RTC_Read(void) {
 8026878:	b590      	push	{r4, r7, lr}
 802687a:	b08d      	sub	sp, #52	; 0x34
 802687c:	af04      	add	r7, sp, #16
    timestamp_t timestamp;

    // get the RTC
    RTC_ReadRaw(&timestamp);
 802687e:	1d3b      	adds	r3, r7, #4
 8026880:	4618      	mov	r0, r3
 8026882:	f000 f813 	bl	80268ac <RTC_ReadRaw>

    // encode timestamp to datetime
    return RTC_Encode(timestamp);
 8026886:	466c      	mov	r4, sp
 8026888:	f107 0314 	add.w	r3, r7, #20
 802688c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8026890:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8026894:	1d3b      	adds	r3, r7, #4
 8026896:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8026898:	f7ff ff72 	bl	8026780 <RTC_Encode>
 802689c:	4603      	mov	r3, r0
 802689e:	460c      	mov	r4, r1
}
 80268a0:	4618      	mov	r0, r3
 80268a2:	4621      	mov	r1, r4
 80268a4:	3724      	adds	r7, #36	; 0x24
 80268a6:	46bd      	mov	sp, r7
 80268a8:	bd90      	pop	{r4, r7, pc}
	...

080268ac <RTC_ReadRaw>:

void RTC_ReadRaw(timestamp_t *timestamp) {
 80268ac:	b580      	push	{r7, lr}
 80268ae:	b082      	sub	sp, #8
 80268b0:	af00      	add	r7, sp, #0
 80268b2:	6078      	str	r0, [r7, #4]
    // get the RTC
    lock();
 80268b4:	f000 f8c0 	bl	8026a38 <lock>
    HAL_RTC_GetTime(&hrtc, &timestamp->time, RTC_FORMAT_BIN);
 80268b8:	687b      	ldr	r3, [r7, #4]
 80268ba:	2200      	movs	r2, #0
 80268bc:	4619      	mov	r1, r3
 80268be:	4809      	ldr	r0, [pc, #36]	; (80268e4 <RTC_ReadRaw+0x38>)
 80268c0:	f00e fc4b 	bl	803515a <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &timestamp->date, RTC_FORMAT_BIN);
 80268c4:	687b      	ldr	r3, [r7, #4]
 80268c6:	3314      	adds	r3, #20
 80268c8:	2200      	movs	r2, #0
 80268ca:	4619      	mov	r1, r3
 80268cc:	4805      	ldr	r0, [pc, #20]	; (80268e4 <RTC_ReadRaw+0x38>)
 80268ce:	f00e fd49 	bl	8035364 <HAL_RTC_GetDate>
    timestamp->tzQuarterHour = 0;
 80268d2:	687b      	ldr	r3, [r7, #4]
 80268d4:	2200      	movs	r2, #0
 80268d6:	761a      	strb	r2, [r3, #24]
    unlock();
 80268d8:	f000 f8bc 	bl	8026a54 <unlock>
}
 80268dc:	bf00      	nop
 80268de:	3708      	adds	r7, #8
 80268e0:	46bd      	mov	sp, r7
 80268e2:	bd80      	pop	{r7, pc}
 80268e4:	20008854 	.word	0x20008854

080268e8 <RTC_Write>:

void RTC_Write(uint64_t dateTime, rtc_t *rtc) {
 80268e8:	b5b0      	push	{r4, r5, r7, lr}
 80268ea:	b094      	sub	sp, #80	; 0x50
 80268ec:	af00      	add	r7, sp, #0
 80268ee:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 80268f2:	627a      	str	r2, [r7, #36]	; 0x24
    timestamp_t timestamp;

    // decode datetime to timestamp
    timestamp = RTC_Decode(dateTime);
 80268f4:	4639      	mov	r1, r7
 80268f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80268fa:	4608      	mov	r0, r1
 80268fc:	f7ff feac 	bl	8026658 <RTC_Decode>
 8026900:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8026904:	463d      	mov	r5, r7
 8026906:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026908:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802690a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 802690e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    // set the RTC
    RTC_WriteRaw(&timestamp, rtc);
 8026912:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8026916:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8026918:	4618      	mov	r0, r3
 802691a:	f000 f805 	bl	8026928 <RTC_WriteRaw>
}
 802691e:	bf00      	nop
 8026920:	3750      	adds	r7, #80	; 0x50
 8026922:	46bd      	mov	sp, r7
 8026924:	bdb0      	pop	{r4, r5, r7, pc}
	...

08026928 <RTC_WriteRaw>:

void RTC_WriteRaw(timestamp_t *timestamp, rtc_t *rtc) {
 8026928:	b5b0      	push	{r4, r5, r7, lr}
 802692a:	b082      	sub	sp, #8
 802692c:	af00      	add	r7, sp, #0
 802692e:	6078      	str	r0, [r7, #4]
 8026930:	6039      	str	r1, [r7, #0]
    // add extra property
    timestamp->time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8026932:	687b      	ldr	r3, [r7, #4]
 8026934:	2200      	movs	r2, #0
 8026936:	60da      	str	r2, [r3, #12]
    timestamp->time.StoreOperation = RTC_STOREOPERATION_RESET;
 8026938:	687b      	ldr	r3, [r7, #4]
 802693a:	2200      	movs	r2, #0
 802693c:	611a      	str	r2, [r3, #16]

    // set the RTC
    lock();
 802693e:	f000 f87b 	bl	8026a38 <lock>
    HAL_RTC_SetTime(&hrtc, &timestamp->time, RTC_FORMAT_BIN);
 8026942:	687b      	ldr	r3, [r7, #4]
 8026944:	2200      	movs	r2, #0
 8026946:	4619      	mov	r1, r3
 8026948:	480e      	ldr	r0, [pc, #56]	; (8026984 <RTC_WriteRaw+0x5c>)
 802694a:	f00e fb49 	bl	8034fe0 <HAL_RTC_SetTime>
    HAL_RTC_SetDate(&hrtc, &timestamp->date, RTC_FORMAT_BIN);
 802694e:	687b      	ldr	r3, [r7, #4]
 8026950:	3314      	adds	r3, #20
 8026952:	2200      	movs	r2, #0
 8026954:	4619      	mov	r1, r3
 8026956:	480b      	ldr	r0, [pc, #44]	; (8026984 <RTC_WriteRaw+0x5c>)
 8026958:	f00e fc5d 	bl	8035216 <HAL_RTC_SetDate>
    unlock();
 802695c:	f000 f87a 	bl	8026a54 <unlock>

    // save calibration date
    // source from server is always considered as valid
    rtc->calibration = timestamp->date;
 8026960:	683b      	ldr	r3, [r7, #0]
 8026962:	687a      	ldr	r2, [r7, #4]
 8026964:	6952      	ldr	r2, [r2, #20]
 8026966:	61da      	str	r2, [r3, #28]
    // update time
    rtc->timestamp = *timestamp;
 8026968:	683a      	ldr	r2, [r7, #0]
 802696a:	687b      	ldr	r3, [r7, #4]
 802696c:	4614      	mov	r4, r2
 802696e:	461d      	mov	r5, r3
 8026970:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026972:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026974:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8026978:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 802697c:	bf00      	nop
 802697e:	3708      	adds	r7, #8
 8026980:	46bd      	mov	sp, r7
 8026982:	bdb0      	pop	{r4, r5, r7, pc}
 8026984:	20008854 	.word	0x20008854

08026988 <RTC_IsDaylight>:

uint8_t RTC_IsDaylight(timestamp_t timestamp) {
 8026988:	b084      	sub	sp, #16
 802698a:	b490      	push	{r4, r7}
 802698c:	af00      	add	r7, sp, #0
 802698e:	f107 0408 	add.w	r4, r7, #8
 8026992:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return (timestamp.time.Hours >= 5 && timestamp.time.Hours <= 16);
 8026996:	7a3b      	ldrb	r3, [r7, #8]
 8026998:	2b04      	cmp	r3, #4
 802699a:	d904      	bls.n	80269a6 <RTC_IsDaylight+0x1e>
 802699c:	7a3b      	ldrb	r3, [r7, #8]
 802699e:	2b10      	cmp	r3, #16
 80269a0:	d801      	bhi.n	80269a6 <RTC_IsDaylight+0x1e>
 80269a2:	2301      	movs	r3, #1
 80269a4:	e000      	b.n	80269a8 <RTC_IsDaylight+0x20>
 80269a6:	2300      	movs	r3, #0
 80269a8:	b2db      	uxtb	r3, r3
}
 80269aa:	4618      	mov	r0, r3
 80269ac:	46bd      	mov	sp, r7
 80269ae:	bc90      	pop	{r4, r7}
 80269b0:	b004      	add	sp, #16
 80269b2:	4770      	bx	lr

080269b4 <RTC_NeedCalibration>:

uint8_t RTC_NeedCalibration(void) {
 80269b4:	b580      	push	{r7, lr}
 80269b6:	af00      	add	r7, sp, #0
    // Retrieve RTC time
    RTC_ReadRaw(&(VCU.d.rtc.timestamp));
 80269b8:	4810      	ldr	r0, [pc, #64]	; (80269fc <RTC_NeedCalibration+0x48>)
 80269ba:	f7ff ff77 	bl	80268ac <RTC_ReadRaw>

    // Compare
    return (VCU.d.rtc.calibration.Year != VCU.d.rtc.timestamp.date.Year ||
 80269be:	4b10      	ldr	r3, [pc, #64]	; (8026a00 <RTC_NeedCalibration+0x4c>)
 80269c0:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80269c4:	4b0e      	ldr	r3, [pc, #56]	; (8026a00 <RTC_NeedCalibration+0x4c>)
 80269c6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
            VCU.d.rtc.calibration.Month != VCU.d.rtc.timestamp.date.Month ||
 80269ca:	429a      	cmp	r2, r3
 80269cc:	d10f      	bne.n	80269ee <RTC_NeedCalibration+0x3a>
 80269ce:	4b0c      	ldr	r3, [pc, #48]	; (8026a00 <RTC_NeedCalibration+0x4c>)
 80269d0:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80269d4:	4b0a      	ldr	r3, [pc, #40]	; (8026a00 <RTC_NeedCalibration+0x4c>)
 80269d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    return (VCU.d.rtc.calibration.Year != VCU.d.rtc.timestamp.date.Year ||
 80269da:	429a      	cmp	r2, r3
 80269dc:	d107      	bne.n	80269ee <RTC_NeedCalibration+0x3a>
            VCU.d.rtc.calibration.Date != VCU.d.rtc.timestamp.date.Date);
 80269de:	4b08      	ldr	r3, [pc, #32]	; (8026a00 <RTC_NeedCalibration+0x4c>)
 80269e0:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80269e4:	4b06      	ldr	r3, [pc, #24]	; (8026a00 <RTC_NeedCalibration+0x4c>)
 80269e6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
            VCU.d.rtc.calibration.Month != VCU.d.rtc.timestamp.date.Month ||
 80269ea:	429a      	cmp	r2, r3
 80269ec:	d001      	beq.n	80269f2 <RTC_NeedCalibration+0x3e>
 80269ee:	2301      	movs	r3, #1
 80269f0:	e000      	b.n	80269f4 <RTC_NeedCalibration+0x40>
 80269f2:	2300      	movs	r3, #0
 80269f4:	b2db      	uxtb	r3, r3
}
 80269f6:	4618      	mov	r0, r3
 80269f8:	bd80      	pop	{r7, pc}
 80269fa:	bf00      	nop
 80269fc:	20000238 	.word	0x20000238
 8026a00:	20000228 	.word	0x20000228

08026a04 <RTC_CalibrateWithSimcom>:

void RTC_CalibrateWithSimcom(void) {
 8026a04:	b580      	push	{r7, lr}
 8026a06:	b088      	sub	sp, #32
 8026a08:	af00      	add	r7, sp, #0
    timestamp_t timestamp;

    if (AT_Clock(ATR, &timestamp)) {
 8026a0a:	1d3b      	adds	r3, r7, #4
 8026a0c:	4619      	mov	r1, r3
 8026a0e:	2001      	movs	r0, #1
 8026a10:	f017 f826 	bl	803da60 <AT_Clock>
 8026a14:	4603      	mov	r3, r0
 8026a16:	2b00      	cmp	r3, #0
 8026a18:	d007      	beq.n	8026a2a <RTC_CalibrateWithSimcom+0x26>
        if (timestamp.date.Year >= VCU_BUILD_YEAR) {
 8026a1a:	7efb      	ldrb	r3, [r7, #27]
 8026a1c:	2b13      	cmp	r3, #19
 8026a1e:	d904      	bls.n	8026a2a <RTC_CalibrateWithSimcom+0x26>
            // Calibrate time
            RTC_WriteRaw(&timestamp, &(VCU.d.rtc));
 8026a20:	1d3b      	adds	r3, r7, #4
 8026a22:	4904      	ldr	r1, [pc, #16]	; (8026a34 <RTC_CalibrateWithSimcom+0x30>)
 8026a24:	4618      	mov	r0, r3
 8026a26:	f7ff ff7f 	bl	8026928 <RTC_WriteRaw>
        }
    }
}
 8026a2a:	bf00      	nop
 8026a2c:	3720      	adds	r7, #32
 8026a2e:	46bd      	mov	sp, r7
 8026a30:	bd80      	pop	{r7, pc}
 8026a32:	bf00      	nop
 8026a34:	20000238 	.word	0x20000238

08026a38 <lock>:

/* Private functions implementation --------------------------------------------*/
static void lock(void) {
 8026a38:	b580      	push	{r7, lr}
 8026a3a:	af00      	add	r7, sp, #0
    osMutexAcquire(RtcMutexHandle, osWaitForever);
 8026a3c:	4b04      	ldr	r3, [pc, #16]	; (8026a50 <lock+0x18>)
 8026a3e:	681b      	ldr	r3, [r3, #0]
 8026a40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8026a44:	4618      	mov	r0, r3
 8026a46:	f011 fa01 	bl	8037e4c <osMutexAcquire>
}
 8026a4a:	bf00      	nop
 8026a4c:	bd80      	pop	{r7, pc}
 8026a4e:	bf00      	nop
 8026a50:	200085d0 	.word	0x200085d0

08026a54 <unlock>:

static void unlock(void) {
 8026a54:	b580      	push	{r7, lr}
 8026a56:	af00      	add	r7, sp, #0
    osMutexRelease(RtcMutexHandle);
 8026a58:	4b03      	ldr	r3, [pc, #12]	; (8026a68 <unlock+0x14>)
 8026a5a:	681b      	ldr	r3, [r3, #0]
 8026a5c:	4618      	mov	r0, r3
 8026a5e:	f011 fa53 	bl	8037f08 <osMutexRelease>
}
 8026a62:	bf00      	nop
 8026a64:	bd80      	pop	{r7, pc}
 8026a66:	bf00      	nop
 8026a68:	200085d0 	.word	0x200085d0

08026a6c <AUDIO_Init>:
static uint8_t AUDIO_OUT_Play(uint16_t *pBuffer, uint32_t Size);
static void lock(void);
static void unlock(void);

/* Public functions implementation ---------------------------------------------*/
void AUDIO_Init(void) {
 8026a6c:	b580      	push	{r7, lr}
 8026a6e:	b082      	sub	sp, #8
 8026a70:	af00      	add	r7, sp, #0
    uint8_t ret;

    do {
        LOG_StrLn("Audio:Init");
 8026a72:	4816      	ldr	r0, [pc, #88]	; (8026acc <AUDIO_Init+0x60>)
 8026a74:	f017 fc7e 	bl	803e374 <LOG_StrLn>

        // Mosftet control
        HAL_GPIO_WritePin(INT_AUDIO_PWR_GPIO_Port, INT_AUDIO_PWR_Pin, 0);
 8026a78:	2200      	movs	r2, #0
 8026a7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8026a7e:	4814      	ldr	r0, [pc, #80]	; (8026ad0 <AUDIO_Init+0x64>)
 8026a80:	f009 fb66 	bl	8030150 <HAL_GPIO_WritePin>
        _DelayMS(500);
 8026a84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8026a88:	f018 fe18 	bl	803f6bc <_DelayMS>
        HAL_GPIO_WritePin(INT_AUDIO_PWR_GPIO_Port, INT_AUDIO_PWR_Pin, 1);
 8026a8c:	2201      	movs	r2, #1
 8026a8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8026a92:	480f      	ldr	r0, [pc, #60]	; (8026ad0 <AUDIO_Init+0x64>)
 8026a94:	f009 fb5c 	bl	8030150 <HAL_GPIO_WritePin>
        _DelayMS(1000);
 8026a98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8026a9c:	f018 fe0e 	bl	803f6bc <_DelayMS>

        /* Initialize Wave player (Codec, DMA, I2C) */
        ret = AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE, AudioVolume, AUDIO_SAMPLE_FREQ);
 8026aa0:	4b0c      	ldr	r3, [pc, #48]	; (8026ad4 <AUDIO_Init+0x68>)
 8026aa2:	7819      	ldrb	r1, [r3, #0]
 8026aa4:	4b0c      	ldr	r3, [pc, #48]	; (8026ad8 <AUDIO_Init+0x6c>)
 8026aa6:	681b      	ldr	r3, [r3, #0]
 8026aa8:	461a      	mov	r2, r3
 8026aaa:	2002      	movs	r0, #2
 8026aac:	f000 f99a 	bl	8026de4 <AUDIO_OUT_Init>
 8026ab0:	4603      	mov	r3, r0
 8026ab2:	71fb      	strb	r3, [r7, #7]

        _DelayMS(500);
 8026ab4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8026ab8:	f018 fe00 	bl	803f6bc <_DelayMS>
    } while (ret != AUDIO_OK);
 8026abc:	79fb      	ldrb	r3, [r7, #7]
 8026abe:	2b00      	cmp	r3, #0
 8026ac0:	d1d7      	bne.n	8026a72 <AUDIO_Init+0x6>
}
 8026ac2:	bf00      	nop
 8026ac4:	3708      	adds	r7, #8
 8026ac6:	46bd      	mov	sp, r7
 8026ac8:	bd80      	pop	{r7, pc}
 8026aca:	bf00      	nop
 8026acc:	08043460 	.word	0x08043460
 8026ad0:	40020800 	.word	0x40020800
 8026ad4:	20000002 	.word	0x20000002
 8026ad8:	08043ef0 	.word	0x08043ef0

08026adc <AUDIO_Play>:

void AUDIO_Play(void) {
 8026adc:	b580      	push	{r7, lr}
 8026ade:	af00      	add	r7, sp, #0
    /* Get data size from audio file */
    AudioRemSize = AUDIO_SAMPLE_SIZE;
 8026ae0:	4b0d      	ldr	r3, [pc, #52]	; (8026b18 <AUDIO_Play+0x3c>)
 8026ae2:	681b      	ldr	r3, [r3, #0]
 8026ae4:	4a0d      	ldr	r2, [pc, #52]	; (8026b1c <AUDIO_Play+0x40>)
 8026ae6:	6013      	str	r3, [r2, #0]
    /* Get total data to be played */
    if (AUDIO_SAMPLE_SIZE > AUDIO_BUFFER_SIZE) {
 8026ae8:	4b0b      	ldr	r3, [pc, #44]	; (8026b18 <AUDIO_Play+0x3c>)
 8026aea:	681b      	ldr	r3, [r3, #0]
 8026aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8026af0:	d904      	bls.n	8026afc <AUDIO_Play+0x20>
        AudioPlaySize = AUDIO_BUFFER_SIZE;
 8026af2:	4b0b      	ldr	r3, [pc, #44]	; (8026b20 <AUDIO_Play+0x44>)
 8026af4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8026af8:	801a      	strh	r2, [r3, #0]
 8026afa:	e004      	b.n	8026b06 <AUDIO_Play+0x2a>
    } else {
        AudioPlaySize = AUDIO_SAMPLE_SIZE;
 8026afc:	4b06      	ldr	r3, [pc, #24]	; (8026b18 <AUDIO_Play+0x3c>)
 8026afe:	681b      	ldr	r3, [r3, #0]
 8026b00:	b29a      	uxth	r2, r3
 8026b02:	4b07      	ldr	r3, [pc, #28]	; (8026b20 <AUDIO_Play+0x44>)
 8026b04:	801a      	strh	r2, [r3, #0]
    }

    /* Start playing Wave */
    AUDIO_OUT_Play((uint16_t*) AUDIO_SAMPLE, AudioPlaySize);
 8026b06:	4b06      	ldr	r3, [pc, #24]	; (8026b20 <AUDIO_Play+0x44>)
 8026b08:	881b      	ldrh	r3, [r3, #0]
 8026b0a:	4619      	mov	r1, r3
 8026b0c:	4805      	ldr	r0, [pc, #20]	; (8026b24 <AUDIO_Play+0x48>)
 8026b0e:	f000 f9a5 	bl	8026e5c <AUDIO_OUT_Play>
}
 8026b12:	bf00      	nop
 8026b14:	bd80      	pop	{r7, pc}
 8026b16:	bf00      	nop
 8026b18:	08043ef4 	.word	0x08043ef4
 8026b1c:	20000e38 	.word	0x20000e38
 8026b20:	20000e36 	.word	0x20000e36
 8026b24:	08043ef8 	.word	0x08043ef8

08026b28 <AUDIO_BeepPlay>:

void AUDIO_BeepPlay(uint8_t Frequency, uint16_t TimeMS) {
 8026b28:	b580      	push	{r7, lr}
 8026b2a:	b082      	sub	sp, #8
 8026b2c:	af00      	add	r7, sp, #0
 8026b2e:	4603      	mov	r3, r0
 8026b30:	460a      	mov	r2, r1
 8026b32:	71fb      	strb	r3, [r7, #7]
 8026b34:	4613      	mov	r3, r2
 8026b36:	80bb      	strh	r3, [r7, #4]
    lock();
 8026b38:	f000 f9ea 	bl	8026f10 <lock>

    cs43l22_SetBeep(AUDIO_I2C_ADDRESS, Frequency, 0, 0);
 8026b3c:	79f9      	ldrb	r1, [r7, #7]
 8026b3e:	2300      	movs	r3, #0
 8026b40:	2200      	movs	r2, #0
 8026b42:	2094      	movs	r0, #148	; 0x94
 8026b44:	f7fd fa3c 	bl	8023fc0 <cs43l22_SetBeep>
    cs43l22_Beep(AUDIO_I2C_ADDRESS, BEEP_MODE_CONTINUOUS, BEEP_MIX_ON);
 8026b48:	2200      	movs	r2, #0
 8026b4a:	2103      	movs	r1, #3
 8026b4c:	2094      	movs	r0, #148	; 0x94
 8026b4e:	f7fd fa72 	bl	8024036 <cs43l22_Beep>

    if (TimeMS > 0) {
 8026b52:	88bb      	ldrh	r3, [r7, #4]
 8026b54:	2b00      	cmp	r3, #0
 8026b56:	d008      	beq.n	8026b6a <AUDIO_BeepPlay+0x42>
        // delay with RTOS
        _DelayMS(TimeMS);
 8026b58:	88bb      	ldrh	r3, [r7, #4]
 8026b5a:	4618      	mov	r0, r3
 8026b5c:	f018 fdae 	bl	803f6bc <_DelayMS>
        // than stop
        cs43l22_Beep(AUDIO_I2C_ADDRESS, BEEP_MODE_OFF, BEEP_MIX_ON);
 8026b60:	2200      	movs	r2, #0
 8026b62:	2100      	movs	r1, #0
 8026b64:	2094      	movs	r0, #148	; 0x94
 8026b66:	f7fd fa66 	bl	8024036 <cs43l22_Beep>
    }

    unlock();
 8026b6a:	f000 f9df 	bl	8026f2c <unlock>
}
 8026b6e:	bf00      	nop
 8026b70:	3708      	adds	r7, #8
 8026b72:	46bd      	mov	sp, r7
 8026b74:	bd80      	pop	{r7, pc}

08026b76 <AUDIO_BeepStop>:

void AUDIO_BeepStop(void) {
 8026b76:	b580      	push	{r7, lr}
 8026b78:	af00      	add	r7, sp, #0
    lock();
 8026b7a:	f000 f9c9 	bl	8026f10 <lock>

    cs43l22_Beep(AUDIO_I2C_ADDRESS, BEEP_MODE_OFF, BEEP_MIX_ON);
 8026b7e:	2200      	movs	r2, #0
 8026b80:	2100      	movs	r1, #0
 8026b82:	2094      	movs	r0, #148	; 0x94
 8026b84:	f7fd fa57 	bl	8024036 <cs43l22_Beep>

    unlock();
 8026b88:	f000 f9d0 	bl	8026f2c <unlock>
}
 8026b8c:	bf00      	nop
 8026b8e:	bd80      	pop	{r7, pc}

08026b90 <AUDIO_OUT_ChangeBuffer>:
/**
 * @brief  Sends n-Bytes on the I2S interface.
 * @param  pData: Pointer to data address
 * @param  Size: Number of data to be written
 */
void AUDIO_OUT_ChangeBuffer(uint16_t *pData, uint16_t Size) {
 8026b90:	b580      	push	{r7, lr}
 8026b92:	b082      	sub	sp, #8
 8026b94:	af00      	add	r7, sp, #0
 8026b96:	6078      	str	r0, [r7, #4]
 8026b98:	460b      	mov	r3, r1
 8026b9a:	807b      	strh	r3, [r7, #2]
    HAL_I2S_Transmit_DMA(&hi2s3, pData, DMA_MAX(Size/AUDIODATA_SIZE));
 8026b9c:	887b      	ldrh	r3, [r7, #2]
 8026b9e:	085b      	lsrs	r3, r3, #1
 8026ba0:	b29b      	uxth	r3, r3
 8026ba2:	461a      	mov	r2, r3
 8026ba4:	6879      	ldr	r1, [r7, #4]
 8026ba6:	4803      	ldr	r0, [pc, #12]	; (8026bb4 <AUDIO_OUT_ChangeBuffer+0x24>)
 8026ba8:	f00c fb68 	bl	803327c <HAL_I2S_Transmit_DMA>
}
 8026bac:	bf00      	nop
 8026bae:	3708      	adds	r7, #8
 8026bb0:	46bd      	mov	sp, r7
 8026bb2:	bd80      	pop	{r7, pc}
 8026bb4:	20008a08 	.word	0x20008a08

08026bb8 <AUDIO_OUT_SetVolume>:
 * @brief  Controls the current audio volume level.
 * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for
 *         Mute and 100 for Max volume level).
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t AUDIO_OUT_SetVolume(uint8_t Volume) {
 8026bb8:	b580      	push	{r7, lr}
 8026bba:	b082      	sub	sp, #8
 8026bbc:	af00      	add	r7, sp, #0
 8026bbe:	4603      	mov	r3, r0
 8026bc0:	71fb      	strb	r3, [r7, #7]
    /* Call the codec volume control function with converted volume value */
    if (cs43l22_SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0) {
 8026bc2:	79fb      	ldrb	r3, [r7, #7]
 8026bc4:	4619      	mov	r1, r3
 8026bc6:	2094      	movs	r0, #148	; 0x94
 8026bc8:	f7fd f930 	bl	8023e2c <cs43l22_SetVolume>
 8026bcc:	4603      	mov	r3, r0
 8026bce:	2b00      	cmp	r3, #0
 8026bd0:	d001      	beq.n	8026bd6 <AUDIO_OUT_SetVolume+0x1e>
        return AUDIO_ERROR;
 8026bd2:	2301      	movs	r3, #1
 8026bd4:	e000      	b.n	8026bd8 <AUDIO_OUT_SetVolume+0x20>
    } else {
        /* Return AUDIO_OK when all operations are correctly done */
        return AUDIO_OK;
 8026bd6:	2300      	movs	r3, #0
    }
}
 8026bd8:	4618      	mov	r0, r3
 8026bda:	3708      	adds	r7, #8
 8026bdc:	46bd      	mov	sp, r7
 8026bde:	bd80      	pop	{r7, pc}

08026be0 <AUDIO_OUT_SetMute>:
 * @brief  Enables or disables the MUTE mode by software
 * @param  Cmd: could be AUDIO_MUTE_ON to mute sound or AUDIO_MUTE_OFF to
 *         unmute the codec and restore previous volume level.
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t AUDIO_OUT_SetMute(uint32_t Cmd) {
 8026be0:	b580      	push	{r7, lr}
 8026be2:	b082      	sub	sp, #8
 8026be4:	af00      	add	r7, sp, #0
 8026be6:	6078      	str	r0, [r7, #4]
    /* Call the Codec Mute function */
    if (cs43l22_SetMute(AUDIO_I2C_ADDRESS, Cmd) != 0) {
 8026be8:	6879      	ldr	r1, [r7, #4]
 8026bea:	2094      	movs	r0, #148	; 0x94
 8026bec:	f7fd f968 	bl	8023ec0 <cs43l22_SetMute>
 8026bf0:	4603      	mov	r3, r0
 8026bf2:	2b00      	cmp	r3, #0
 8026bf4:	d001      	beq.n	8026bfa <AUDIO_OUT_SetMute+0x1a>
        return AUDIO_ERROR;
 8026bf6:	2301      	movs	r3, #1
 8026bf8:	e000      	b.n	8026bfc <AUDIO_OUT_SetMute+0x1c>
    } else {
        /* Return AUDIO_OK when all operations are correctly done */
        return AUDIO_OK;
 8026bfa:	2300      	movs	r3, #0
    }
}
 8026bfc:	4618      	mov	r0, r3
 8026bfe:	3708      	adds	r7, #8
 8026c00:	46bd      	mov	sp, r7
 8026c02:	bd80      	pop	{r7, pc}

08026c04 <AUDIO_OUT_ClockConfig>:
 * @param  AudioFreq: Audio frequency used to play the audio stream.
 * @note   This API is called by AUDIO_OUT_Init() and AUDIO_OUT_SetFrequency()
 *         Being __weak it can be overwritten by the application
 * @param  Params : pointer on additional configuration parameters, can be NULL.
 */
__weak void AUDIO_OUT_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params) {
 8026c04:	b580      	push	{r7, lr}
 8026c06:	b09c      	sub	sp, #112	; 0x70
 8026c08:	af00      	add	r7, sp, #0
 8026c0a:	60f8      	str	r0, [r7, #12]
 8026c0c:	60b9      	str	r1, [r7, #8]
 8026c0e:	607a      	str	r2, [r7, #4]
    RCC_PeriphCLKInitTypeDef rccclkinit;
    uint8_t index = 0, freqindex = 0xFF;
 8026c10:	2300      	movs	r3, #0
 8026c12:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8026c16:	23ff      	movs	r3, #255	; 0xff
 8026c18:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

    for (index = 0; index < 7; index++) {
 8026c1c:	2300      	movs	r3, #0
 8026c1e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8026c22:	e011      	b.n	8026c48 <AUDIO_OUT_ClockConfig+0x44>
        if (I2SFreq[index] == AudioFreq) {
 8026c24:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8026c28:	4a1c      	ldr	r2, [pc, #112]	; (8026c9c <AUDIO_OUT_ClockConfig+0x98>)
 8026c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8026c2e:	68ba      	ldr	r2, [r7, #8]
 8026c30:	429a      	cmp	r2, r3
 8026c32:	d104      	bne.n	8026c3e <AUDIO_OUT_ClockConfig+0x3a>
            freqindex = index;
 8026c34:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8026c38:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
            break;
 8026c3c:	e008      	b.n	8026c50 <AUDIO_OUT_ClockConfig+0x4c>
    for (index = 0; index < 7; index++) {
 8026c3e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8026c42:	3301      	adds	r3, #1
 8026c44:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8026c48:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8026c4c:	2b06      	cmp	r3, #6
 8026c4e:	d9e9      	bls.n	8026c24 <AUDIO_OUT_ClockConfig+0x20>
        }
    }

    /* Enable PLLI2S clock */
    HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8026c50:	f107 0314 	add.w	r3, r7, #20
 8026c54:	4618      	mov	r0, r3
 8026c56:	f00d fc77 	bl	8034548 <HAL_RCCEx_GetPeriphCLKConfig>
    // FIXME: not consistent CubeMX for F407 & F423
    /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    if (freqindex != 0xFF) {
 8026c5a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8026c5e:	2bff      	cmp	r3, #255	; 0xff
 8026c60:	d00c      	beq.n	8026c7c <AUDIO_OUT_ClockConfig+0x78>
        /* I2S clock config
         PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) � (PLLI2SN/PLLM)
         I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
        rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8026c62:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8026c66:	4a0e      	ldr	r2, [pc, #56]	; (8026ca0 <AUDIO_OUT_ClockConfig+0x9c>)
 8026c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8026c6c:	61fb      	str	r3, [r7, #28]
        rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8026c6e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8026c72:	4a0c      	ldr	r2, [pc, #48]	; (8026ca4 <AUDIO_OUT_ClockConfig+0xa0>)
 8026c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8026c78:	627b      	str	r3, [r7, #36]	; 0x24
 8026c7a:	e004      	b.n	8026c86 <AUDIO_OUT_ClockConfig+0x82>
    } else {
        /* I2S clock config
         PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) � (PLLI2SN/PLLM)
         I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
        rccclkinit.PLLI2S.PLLI2SN = 258;
 8026c7c:	f44f 7381 	mov.w	r3, #258	; 0x102
 8026c80:	61fb      	str	r3, [r7, #28]
        rccclkinit.PLLI2S.PLLI2SR = 3;
 8026c82:	2303      	movs	r3, #3
 8026c84:	627b      	str	r3, [r7, #36]	; 0x24
    }
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1;
 8026c86:	2301      	movs	r3, #1
 8026c88:	617b      	str	r3, [r7, #20]

    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8026c8a:	f107 0314 	add.w	r3, r7, #20
 8026c8e:	4618      	mov	r0, r3
 8026c90:	f00d f9ce 	bl	8034030 <HAL_RCCEx_PeriphCLKConfig>
}
 8026c94:	bf00      	nop
 8026c96:	3770      	adds	r7, #112	; 0x70
 8026c98:	46bd      	mov	sp, r7
 8026c9a:	bd80      	pop	{r7, pc}
 8026c9c:	08055eb0 	.word	0x08055eb0
 8026ca0:	08055ecc 	.word	0x08055ecc
 8026ca4:	08055ee8 	.word	0x08055ee8

08026ca8 <AUDIO_OUT_MspInit>:
/**
 * @brief  AUDIO OUT I2S MSP Init.
 * @param  hi2s: might be required to set audio peripheral predivider if any.
 * @param  Params : pointer on additional configuration parameters, can be NULL.
 */
void AUDIO_OUT_MspInit(I2S_HandleTypeDef *hi2s, void *Params) {
 8026ca8:	b580      	push	{r7, lr}
 8026caa:	b082      	sub	sp, #8
 8026cac:	af00      	add	r7, sp, #0
 8026cae:	6078      	str	r0, [r7, #4]
 8026cb0:	6039      	str	r1, [r7, #0]
    HAL_I2S_MspInit(hi2s);
 8026cb2:	6878      	ldr	r0, [r7, #4]
 8026cb4:	f004 fe62 	bl	802b97c <HAL_I2S_MspInit>
}
 8026cb8:	bf00      	nop
 8026cba:	3708      	adds	r7, #8
 8026cbc:	46bd      	mov	sp, r7
 8026cbe:	bd80      	pop	{r7, pc}

08026cc0 <AUDIO_OUT_TransferComplete_CallBack>:
}

/**
 * @brief  Manages the DMA full Transfer complete event.
 */
__weak void AUDIO_OUT_TransferComplete_CallBack(void) {
 8026cc0:	b580      	push	{r7, lr}
 8026cc2:	af00      	add	r7, sp, #0
    if (!AudioPlayDone) {
 8026cc4:	4b1d      	ldr	r3, [pc, #116]	; (8026d3c <AUDIO_OUT_TransferComplete_CallBack+0x7c>)
 8026cc6:	781b      	ldrb	r3, [r3, #0]
 8026cc8:	2b00      	cmp	r3, #0
 8026cca:	d10f      	bne.n	8026cec <AUDIO_OUT_TransferComplete_CallBack+0x2c>
        AUDIO_OUT_ChangeBuffer((uint16_t*) (AUDIO_SAMPLE + ((AUDIO_SAMPLE_SIZE - AudioRemSize) / AUDIODATA_SIZE)), AudioPlaySize);
 8026ccc:	4b1c      	ldr	r3, [pc, #112]	; (8026d40 <AUDIO_OUT_TransferComplete_CallBack+0x80>)
 8026cce:	681a      	ldr	r2, [r3, #0]
 8026cd0:	4b1c      	ldr	r3, [pc, #112]	; (8026d44 <AUDIO_OUT_TransferComplete_CallBack+0x84>)
 8026cd2:	681b      	ldr	r3, [r3, #0]
 8026cd4:	1ad3      	subs	r3, r2, r3
 8026cd6:	f023 0301 	bic.w	r3, r3, #1
 8026cda:	4a1b      	ldr	r2, [pc, #108]	; (8026d48 <AUDIO_OUT_TransferComplete_CallBack+0x88>)
 8026cdc:	441a      	add	r2, r3
 8026cde:	4b1b      	ldr	r3, [pc, #108]	; (8026d4c <AUDIO_OUT_TransferComplete_CallBack+0x8c>)
 8026ce0:	881b      	ldrh	r3, [r3, #0]
 8026ce2:	4619      	mov	r1, r3
 8026ce4:	4610      	mov	r0, r2
 8026ce6:	f7ff ff53 	bl	8026b90 <AUDIO_OUT_ChangeBuffer>
 8026cea:	e018      	b.n	8026d1e <AUDIO_OUT_TransferComplete_CallBack+0x5e>
    } else {
        /* Get data size from audio file */
        AudioRemSize = AUDIO_SAMPLE_SIZE;
 8026cec:	4b14      	ldr	r3, [pc, #80]	; (8026d40 <AUDIO_OUT_TransferComplete_CallBack+0x80>)
 8026cee:	681b      	ldr	r3, [r3, #0]
 8026cf0:	4a14      	ldr	r2, [pc, #80]	; (8026d44 <AUDIO_OUT_TransferComplete_CallBack+0x84>)
 8026cf2:	6013      	str	r3, [r2, #0]
        /* Get total data to be played */
        if (AUDIO_SAMPLE_SIZE > AUDIO_BUFFER_SIZE) {
 8026cf4:	4b12      	ldr	r3, [pc, #72]	; (8026d40 <AUDIO_OUT_TransferComplete_CallBack+0x80>)
 8026cf6:	681b      	ldr	r3, [r3, #0]
 8026cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8026cfc:	d904      	bls.n	8026d08 <AUDIO_OUT_TransferComplete_CallBack+0x48>
            AudioPlaySize = AUDIO_BUFFER_SIZE;
 8026cfe:	4b13      	ldr	r3, [pc, #76]	; (8026d4c <AUDIO_OUT_TransferComplete_CallBack+0x8c>)
 8026d00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8026d04:	801a      	strh	r2, [r3, #0]
 8026d06:	e004      	b.n	8026d12 <AUDIO_OUT_TransferComplete_CallBack+0x52>
        } else {
            AudioPlaySize = AUDIO_SAMPLE_SIZE;
 8026d08:	4b0d      	ldr	r3, [pc, #52]	; (8026d40 <AUDIO_OUT_TransferComplete_CallBack+0x80>)
 8026d0a:	681b      	ldr	r3, [r3, #0]
 8026d0c:	b29a      	uxth	r2, r3
 8026d0e:	4b0f      	ldr	r3, [pc, #60]	; (8026d4c <AUDIO_OUT_TransferComplete_CallBack+0x8c>)
 8026d10:	801a      	strh	r2, [r3, #0]
        }

        /* Start playing Wave again*/
        AUDIO_OUT_ChangeBuffer((uint16_t*) AUDIO_SAMPLE, AudioPlaySize);
 8026d12:	4b0e      	ldr	r3, [pc, #56]	; (8026d4c <AUDIO_OUT_TransferComplete_CallBack+0x8c>)
 8026d14:	881b      	ldrh	r3, [r3, #0]
 8026d16:	4619      	mov	r1, r3
 8026d18:	480b      	ldr	r0, [pc, #44]	; (8026d48 <AUDIO_OUT_TransferComplete_CallBack+0x88>)
 8026d1a:	f7ff ff39 	bl	8026b90 <AUDIO_OUT_ChangeBuffer>
    }

    AudioPlayDone = (AudioPlaySize == AudioRemSize);
 8026d1e:	4b0b      	ldr	r3, [pc, #44]	; (8026d4c <AUDIO_OUT_TransferComplete_CallBack+0x8c>)
 8026d20:	881b      	ldrh	r3, [r3, #0]
 8026d22:	461a      	mov	r2, r3
 8026d24:	4b07      	ldr	r3, [pc, #28]	; (8026d44 <AUDIO_OUT_TransferComplete_CallBack+0x84>)
 8026d26:	681b      	ldr	r3, [r3, #0]
 8026d28:	429a      	cmp	r2, r3
 8026d2a:	bf0c      	ite	eq
 8026d2c:	2301      	moveq	r3, #1
 8026d2e:	2300      	movne	r3, #0
 8026d30:	b2db      	uxtb	r3, r3
 8026d32:	461a      	mov	r2, r3
 8026d34:	4b01      	ldr	r3, [pc, #4]	; (8026d3c <AUDIO_OUT_TransferComplete_CallBack+0x7c>)
 8026d36:	701a      	strb	r2, [r3, #0]
}
 8026d38:	bf00      	nop
 8026d3a:	bd80      	pop	{r7, pc}
 8026d3c:	20000e35 	.word	0x20000e35
 8026d40:	08043ef4 	.word	0x08043ef4
 8026d44:	20000e38 	.word	0x20000e38
 8026d48:	08043ef8 	.word	0x08043ef8
 8026d4c:	20000e36 	.word	0x20000e36

08026d50 <AUDIO_OUT_HalfTransfer_CallBack>:

/**
 * @brief  Manages the DMA Half Transfer complete event.
 */
__weak void AUDIO_OUT_HalfTransfer_CallBack(void) {
 8026d50:	b480      	push	{r7}
 8026d52:	af00      	add	r7, sp, #0
    // check remaining data
    if (AudioRemSize > AUDIO_BUFFER_SIZE) {
 8026d54:	4b0e      	ldr	r3, [pc, #56]	; (8026d90 <AUDIO_OUT_HalfTransfer_CallBack+0x40>)
 8026d56:	681b      	ldr	r3, [r3, #0]
 8026d58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8026d5c:	d90a      	bls.n	8026d74 <AUDIO_OUT_HalfTransfer_CallBack+0x24>
        /* Get total data to be played */
        AudioPlaySize = AUDIO_BUFFER_SIZE;
 8026d5e:	4b0d      	ldr	r3, [pc, #52]	; (8026d94 <AUDIO_OUT_HalfTransfer_CallBack+0x44>)
 8026d60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8026d64:	801a      	strh	r2, [r3, #0]
        /* Get remaining data */
        AudioRemSize -= AUDIO_BUFFER_SIZE;
 8026d66:	4b0a      	ldr	r3, [pc, #40]	; (8026d90 <AUDIO_OUT_HalfTransfer_CallBack+0x40>)
 8026d68:	681b      	ldr	r3, [r3, #0]
 8026d6a:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8026d6e:	4a08      	ldr	r2, [pc, #32]	; (8026d90 <AUDIO_OUT_HalfTransfer_CallBack+0x40>)
 8026d70:	6013      	str	r3, [r2, #0]
        /* Get total data to be played */
        if (!AudioPlayDone) {
            AudioPlaySize = AudioRemSize;
        }
    }
}
 8026d72:	e008      	b.n	8026d86 <AUDIO_OUT_HalfTransfer_CallBack+0x36>
        if (!AudioPlayDone) {
 8026d74:	4b08      	ldr	r3, [pc, #32]	; (8026d98 <AUDIO_OUT_HalfTransfer_CallBack+0x48>)
 8026d76:	781b      	ldrb	r3, [r3, #0]
 8026d78:	2b00      	cmp	r3, #0
 8026d7a:	d104      	bne.n	8026d86 <AUDIO_OUT_HalfTransfer_CallBack+0x36>
            AudioPlaySize = AudioRemSize;
 8026d7c:	4b04      	ldr	r3, [pc, #16]	; (8026d90 <AUDIO_OUT_HalfTransfer_CallBack+0x40>)
 8026d7e:	681b      	ldr	r3, [r3, #0]
 8026d80:	b29a      	uxth	r2, r3
 8026d82:	4b04      	ldr	r3, [pc, #16]	; (8026d94 <AUDIO_OUT_HalfTransfer_CallBack+0x44>)
 8026d84:	801a      	strh	r2, [r3, #0]
}
 8026d86:	bf00      	nop
 8026d88:	46bd      	mov	sp, r7
 8026d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026d8e:	4770      	bx	lr
 8026d90:	20000e38 	.word	0x20000e38
 8026d94:	20000e36 	.word	0x20000e36
 8026d98:	20000e35 	.word	0x20000e35

08026d9c <HAL_I2S_TxCpltCallback>:

/**
 * @brief  Tx Transfer completed callbacks.
 * @param  hi2s: I2S handle
 */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8026d9c:	b580      	push	{r7, lr}
 8026d9e:	b082      	sub	sp, #8
 8026da0:	af00      	add	r7, sp, #0
 8026da2:	6078      	str	r0, [r7, #4]
    if (hi2s->Instance == I2S) {
 8026da4:	687b      	ldr	r3, [r7, #4]
 8026da6:	681b      	ldr	r3, [r3, #0]
 8026da8:	4a04      	ldr	r2, [pc, #16]	; (8026dbc <HAL_I2S_TxCpltCallback+0x20>)
 8026daa:	4293      	cmp	r3, r2
 8026dac:	d101      	bne.n	8026db2 <HAL_I2S_TxCpltCallback+0x16>
        /* Call the user function which will manage directly transfer complete */
        AUDIO_OUT_TransferComplete_CallBack();
 8026dae:	f7ff ff87 	bl	8026cc0 <AUDIO_OUT_TransferComplete_CallBack>
    }
}
 8026db2:	bf00      	nop
 8026db4:	3708      	adds	r7, #8
 8026db6:	46bd      	mov	sp, r7
 8026db8:	bd80      	pop	{r7, pc}
 8026dba:	bf00      	nop
 8026dbc:	40003c00 	.word	0x40003c00

08026dc0 <HAL_I2S_TxHalfCpltCallback>:

/**
 * @brief  Tx Half Transfer completed callbacks.
 * @param  hi2s: I2S handle
 */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8026dc0:	b580      	push	{r7, lr}
 8026dc2:	b082      	sub	sp, #8
 8026dc4:	af00      	add	r7, sp, #0
 8026dc6:	6078      	str	r0, [r7, #4]
    if (hi2s->Instance == I2S) {
 8026dc8:	687b      	ldr	r3, [r7, #4]
 8026dca:	681b      	ldr	r3, [r3, #0]
 8026dcc:	4a04      	ldr	r2, [pc, #16]	; (8026de0 <HAL_I2S_TxHalfCpltCallback+0x20>)
 8026dce:	4293      	cmp	r3, r2
 8026dd0:	d101      	bne.n	8026dd6 <HAL_I2S_TxHalfCpltCallback+0x16>
        /* Manage the remaining file size and new address offset: This function should
         be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */
        AUDIO_OUT_HalfTransfer_CallBack();
 8026dd2:	f7ff ffbd 	bl	8026d50 <AUDIO_OUT_HalfTransfer_CallBack>
    }
}
 8026dd6:	bf00      	nop
 8026dd8:	3708      	adds	r7, #8
 8026dda:	46bd      	mov	sp, r7
 8026ddc:	bd80      	pop	{r7, pc}
 8026dde:	bf00      	nop
 8026de0:	40003c00 	.word	0x40003c00

08026de4 <AUDIO_OUT_Init>:
 *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
 * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
 * @param  AudioFreq: Audio frequency used to play the audio stream.
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
static uint8_t AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq) {
 8026de4:	b580      	push	{r7, lr}
 8026de6:	b084      	sub	sp, #16
 8026de8:	af00      	add	r7, sp, #0
 8026dea:	4603      	mov	r3, r0
 8026dec:	603a      	str	r2, [r7, #0]
 8026dee:	80fb      	strh	r3, [r7, #6]
 8026df0:	460b      	mov	r3, r1
 8026df2:	717b      	strb	r3, [r7, #5]
    uint8_t ret = AUDIO_OK;
 8026df4:	2300      	movs	r3, #0
 8026df6:	73fb      	strb	r3, [r7, #15]

    /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
    AUDIO_OUT_ClockConfig(&hi2s3, AudioFreq, NULL);
 8026df8:	2200      	movs	r2, #0
 8026dfa:	6839      	ldr	r1, [r7, #0]
 8026dfc:	4816      	ldr	r0, [pc, #88]	; (8026e58 <AUDIO_OUT_Init+0x74>)
 8026dfe:	f7ff ff01 	bl	8026c04 <AUDIO_OUT_ClockConfig>

    /* I2S data transfer preparation:
     Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
    if (HAL_I2S_GetState(&hi2s3) == HAL_I2S_STATE_RESET) {
 8026e02:	4815      	ldr	r0, [pc, #84]	; (8026e58 <AUDIO_OUT_Init+0x74>)
 8026e04:	f00c fb02 	bl	803340c <HAL_I2S_GetState>
 8026e08:	4603      	mov	r3, r0
 8026e0a:	2b00      	cmp	r3, #0
 8026e0c:	d103      	bne.n	8026e16 <AUDIO_OUT_Init+0x32>
        /* Init the I2S MSP: this __weak function can be redefined by the application*/
        AUDIO_OUT_MspInit(&hi2s3, NULL);
 8026e0e:	2100      	movs	r1, #0
 8026e10:	4811      	ldr	r0, [pc, #68]	; (8026e58 <AUDIO_OUT_Init+0x74>)
 8026e12:	f7ff ff49 	bl	8026ca8 <AUDIO_OUT_MspInit>
    }

    /* I2S data transfer preparation:
     Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
    /* Configure the I2S peripheral */
    if (I2S3_Init(AudioFreq) != AUDIO_OK) {
 8026e16:	6838      	ldr	r0, [r7, #0]
 8026e18:	f000 f848 	bl	8026eac <I2S3_Init>
 8026e1c:	4603      	mov	r3, r0
 8026e1e:	2b00      	cmp	r3, #0
 8026e20:	d001      	beq.n	8026e26 <AUDIO_OUT_Init+0x42>
        ret = AUDIO_ERROR;
 8026e22:	2301      	movs	r3, #1
 8026e24:	73fb      	strb	r3, [r7, #15]
    }

    if (ret == AUDIO_OK) {
 8026e26:	7bfb      	ldrb	r3, [r7, #15]
 8026e28:	2b00      	cmp	r3, #0
 8026e2a:	d110      	bne.n	8026e4e <AUDIO_OUT_Init+0x6a>
        /* Retieve audio codec identifier */
        if (((cs43l22_ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID) {
 8026e2c:	2094      	movs	r0, #148	; 0x94
 8026e2e:	f7fc ffab 	bl	8023d88 <cs43l22_ReadID>
 8026e32:	4603      	mov	r3, r0
 8026e34:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8026e38:	2be0      	cmp	r3, #224	; 0xe0
 8026e3a:	d106      	bne.n	8026e4a <AUDIO_OUT_Init+0x66>
            /* Initialize the audio */
            cs43l22_Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8026e3c:	797a      	ldrb	r2, [r7, #5]
 8026e3e:	88f9      	ldrh	r1, [r7, #6]
 8026e40:	683b      	ldr	r3, [r7, #0]
 8026e42:	2094      	movs	r0, #148	; 0x94
 8026e44:	f7fc feb8 	bl	8023bb8 <cs43l22_Init>
 8026e48:	e001      	b.n	8026e4e <AUDIO_OUT_Init+0x6a>
        } else {
            ret = AUDIO_ERROR;
 8026e4a:	2301      	movs	r3, #1
 8026e4c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return ret;
 8026e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8026e50:	4618      	mov	r0, r3
 8026e52:	3710      	adds	r7, #16
 8026e54:	46bd      	mov	sp, r7
 8026e56:	bd80      	pop	{r7, pc}
 8026e58:	20008a08 	.word	0x20008a08

08026e5c <AUDIO_OUT_Play>:
 * @brief  Starts playing audio stream from a data buffer for a determined size.
 * @param  pBuffer: Pointer to the buffer
 * @param  Size: Number of audio data BYTES.
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
static uint8_t AUDIO_OUT_Play(uint16_t *pBuffer, uint32_t Size) {
 8026e5c:	b580      	push	{r7, lr}
 8026e5e:	b082      	sub	sp, #8
 8026e60:	af00      	add	r7, sp, #0
 8026e62:	6078      	str	r0, [r7, #4]
 8026e64:	6039      	str	r1, [r7, #0]
    /* Call the audio Codec Play function */
    if (cs43l22_Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0) {
 8026e66:	683b      	ldr	r3, [r7, #0]
 8026e68:	b29b      	uxth	r3, r3
 8026e6a:	461a      	mov	r2, r3
 8026e6c:	6879      	ldr	r1, [r7, #4]
 8026e6e:	2094      	movs	r0, #148	; 0x94
 8026e70:	f7fc ffa2 	bl	8023db8 <cs43l22_Play>
 8026e74:	4603      	mov	r3, r0
 8026e76:	2b00      	cmp	r3, #0
 8026e78:	d001      	beq.n	8026e7e <AUDIO_OUT_Play+0x22>
        return AUDIO_ERROR;
 8026e7a:	2301      	movs	r3, #1
 8026e7c:	e00f      	b.n	8026e9e <AUDIO_OUT_Play+0x42>
    } else {
        /* Update the Media layer and enable it for play */

        HAL_I2S_Transmit_DMA(&hi2s3, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE));
 8026e7e:	683b      	ldr	r3, [r7, #0]
 8026e80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8026e84:	d203      	bcs.n	8026e8e <AUDIO_OUT_Play+0x32>
 8026e86:	683b      	ldr	r3, [r7, #0]
 8026e88:	085b      	lsrs	r3, r3, #1
 8026e8a:	b29b      	uxth	r3, r3
 8026e8c:	e001      	b.n	8026e92 <AUDIO_OUT_Play+0x36>
 8026e8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8026e92:	461a      	mov	r2, r3
 8026e94:	6879      	ldr	r1, [r7, #4]
 8026e96:	4804      	ldr	r0, [pc, #16]	; (8026ea8 <AUDIO_OUT_Play+0x4c>)
 8026e98:	f00c f9f0 	bl	803327c <HAL_I2S_Transmit_DMA>
        /* Return AUDIO_OK when all operations are correctly done */
        return AUDIO_OK;
 8026e9c:	2300      	movs	r3, #0
    }
}
 8026e9e:	4618      	mov	r0, r3
 8026ea0:	3708      	adds	r7, #8
 8026ea2:	46bd      	mov	sp, r7
 8026ea4:	bd80      	pop	{r7, pc}
 8026ea6:	bf00      	nop
 8026ea8:	20008a08 	.word	0x20008a08

08026eac <I2S3_Init>:

/**
 * @brief  Initializes the Audio Codec audio interface (I2S).
 * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral.
 */
static uint8_t I2S3_Init(uint32_t AudioFreq) {
 8026eac:	b580      	push	{r7, lr}
 8026eae:	b082      	sub	sp, #8
 8026eb0:	af00      	add	r7, sp, #0
 8026eb2:	6078      	str	r0, [r7, #4]
    /* Disable I2S block */
    __HAL_I2S_DISABLE(&hi2s3);
 8026eb4:	4b15      	ldr	r3, [pc, #84]	; (8026f0c <I2S3_Init+0x60>)
 8026eb6:	681b      	ldr	r3, [r3, #0]
 8026eb8:	69da      	ldr	r2, [r3, #28]
 8026eba:	4b14      	ldr	r3, [pc, #80]	; (8026f0c <I2S3_Init+0x60>)
 8026ebc:	681b      	ldr	r3, [r3, #0]
 8026ebe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8026ec2:	61da      	str	r2, [r3, #28]

    /* I2S3 peripheral configuration */
    hi2s3.Init.AudioFreq = AudioFreq;
 8026ec4:	4a11      	ldr	r2, [pc, #68]	; (8026f0c <I2S3_Init+0x60>)
 8026ec6:	687b      	ldr	r3, [r7, #4]
 8026ec8:	6153      	str	r3, [r2, #20]
    hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8026eca:	4b10      	ldr	r3, [pc, #64]	; (8026f0c <I2S3_Init+0x60>)
 8026ecc:	2200      	movs	r2, #0
 8026ece:	61da      	str	r2, [r3, #28]
    hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8026ed0:	4b0e      	ldr	r3, [pc, #56]	; (8026f0c <I2S3_Init+0x60>)
 8026ed2:	2200      	movs	r2, #0
 8026ed4:	619a      	str	r2, [r3, #24]
    // FIXME: Why it works on I2S_DATAFORMAT_32B? It should be I2S_DATAFORMAT_16B
    //	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
    hi2s3.Init.DataFormat = I2S_DATAFORMAT_32B;
 8026ed6:	4b0d      	ldr	r3, [pc, #52]	; (8026f0c <I2S3_Init+0x60>)
 8026ed8:	2205      	movs	r2, #5
 8026eda:	60da      	str	r2, [r3, #12]
    hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8026edc:	4b0b      	ldr	r3, [pc, #44]	; (8026f0c <I2S3_Init+0x60>)
 8026ede:	f44f 7200 	mov.w	r2, #512	; 0x200
 8026ee2:	611a      	str	r2, [r3, #16]
    hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8026ee4:	4b09      	ldr	r3, [pc, #36]	; (8026f0c <I2S3_Init+0x60>)
 8026ee6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8026eea:	605a      	str	r2, [r3, #4]
    hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8026eec:	4b07      	ldr	r3, [pc, #28]	; (8026f0c <I2S3_Init+0x60>)
 8026eee:	2200      	movs	r2, #0
 8026ef0:	609a      	str	r2, [r3, #8]
    /* Initialize the I2S peripheral with the structure above */
    if (HAL_I2S_Init(&hi2s3) != HAL_OK) {
 8026ef2:	4806      	ldr	r0, [pc, #24]	; (8026f0c <I2S3_Init+0x60>)
 8026ef4:	f00c f860 	bl	8032fb8 <HAL_I2S_Init>
 8026ef8:	4603      	mov	r3, r0
 8026efa:	2b00      	cmp	r3, #0
 8026efc:	d001      	beq.n	8026f02 <I2S3_Init+0x56>
        return AUDIO_ERROR;
 8026efe:	2301      	movs	r3, #1
 8026f00:	e000      	b.n	8026f04 <I2S3_Init+0x58>
    } else {
        return AUDIO_OK;
 8026f02:	2300      	movs	r3, #0
    }
}
 8026f04:	4618      	mov	r0, r3
 8026f06:	3708      	adds	r7, #8
 8026f08:	46bd      	mov	sp, r7
 8026f0a:	bd80      	pop	{r7, pc}
 8026f0c:	20008a08 	.word	0x20008a08

08026f10 <lock>:

static void lock(void) {
 8026f10:	b580      	push	{r7, lr}
 8026f12:	af00      	add	r7, sp, #0
    osMutexAcquire(AudioMutexHandle, osWaitForever);
 8026f14:	4b04      	ldr	r3, [pc, #16]	; (8026f28 <lock+0x18>)
 8026f16:	681b      	ldr	r3, [r3, #0]
 8026f18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8026f1c:	4618      	mov	r0, r3
 8026f1e:	f010 ff95 	bl	8037e4c <osMutexAcquire>
}
 8026f22:	bf00      	nop
 8026f24:	bd80      	pop	{r7, pc}
 8026f26:	bf00      	nop
 8026f28:	20008a5c 	.word	0x20008a5c

08026f2c <unlock>:

static void unlock(void) {
 8026f2c:	b580      	push	{r7, lr}
 8026f2e:	af00      	add	r7, sp, #0
    osMutexRelease(AudioMutexHandle);
 8026f30:	4b03      	ldr	r3, [pc, #12]	; (8026f40 <unlock+0x14>)
 8026f32:	681b      	ldr	r3, [r3, #0]
 8026f34:	4618      	mov	r0, r3
 8026f36:	f010 ffe7 	bl	8037f08 <osMutexRelease>
}
 8026f3a:	bf00      	nop
 8026f3c:	bd80      	pop	{r7, pc}
 8026f3e:	bf00      	nop
 8026f40:	20008a5c 	.word	0x20008a5c

08026f44 <Finger_Init>:
/* Private functions ----------------------------------------------------------*/
static void lock(void);
static void unlock(void);

/* Public functions implementation --------------------------------------------*/
void Finger_Init(void) {
 8026f44:	b580      	push	{r7, lr}
 8026f46:	b082      	sub	sp, #8
 8026f48:	af00      	add	r7, sp, #0
    uint8_t verified = 0;
 8026f4a:	2300      	movs	r3, #0
 8026f4c:	71fb      	strb	r3, [r7, #7]

    // Inititalize Module
    do {
        LOG_StrLn("Finger:Init");
 8026f4e:	4813      	ldr	r0, [pc, #76]	; (8026f9c <Finger_Init+0x58>)
 8026f50:	f017 fa10 	bl	803e374 <LOG_StrLn>

        // mosfet control
        HAL_GPIO_WritePin(EXT_FINGER_SENSING_PWR_GPIO_Port, EXT_FINGER_SENSING_PWR_Pin, 0);
 8026f54:	2200      	movs	r2, #0
 8026f56:	2108      	movs	r1, #8
 8026f58:	4811      	ldr	r0, [pc, #68]	; (8026fa0 <Finger_Init+0x5c>)
 8026f5a:	f009 f8f9 	bl	8030150 <HAL_GPIO_WritePin>
        _DelayMS(100);
 8026f5e:	2064      	movs	r0, #100	; 0x64
 8026f60:	f018 fbac 	bl	803f6bc <_DelayMS>
        HAL_GPIO_WritePin(EXT_FINGER_SENSING_PWR_GPIO_Port, EXT_FINGER_SENSING_PWR_Pin, 1);
 8026f64:	2201      	movs	r2, #1
 8026f66:	2108      	movs	r1, #8
 8026f68:	480d      	ldr	r0, [pc, #52]	; (8026fa0 <Finger_Init+0x5c>)
 8026f6a:	f009 f8f1 	bl	8030150 <HAL_GPIO_WritePin>
        _DelayMS(500);
 8026f6e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8026f72:	f018 fba3 	bl	803f6bc <_DelayMS>

        // verify password and check hardware
        lock();
 8026f76:	f000 fa3f 	bl	80273f8 <lock>
        verified = FZ3387_verifyPassword();
 8026f7a:	f7fd fb05 	bl	8024588 <FZ3387_verifyPassword>
 8026f7e:	4603      	mov	r3, r0
 8026f80:	71fb      	strb	r3, [r7, #7]
        unlock();
 8026f82:	f000 fa49 	bl	8027418 <unlock>

        _DelayMS(500);
 8026f86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8026f8a:	f018 fb97 	bl	803f6bc <_DelayMS>
    } while (!verified);
 8026f8e:	79fb      	ldrb	r3, [r7, #7]
 8026f90:	2b00      	cmp	r3, #0
 8026f92:	d0dc      	beq.n	8026f4e <Finger_Init+0xa>
}
 8026f94:	bf00      	nop
 8026f96:	3708      	adds	r7, #8
 8026f98:	46bd      	mov	sp, r7
 8026f9a:	bd80      	pop	{r7, pc}
 8026f9c:	0804346c 	.word	0x0804346c
 8026fa0:	40020800 	.word	0x40020800

08026fa4 <Finger_Enroll>:

uint8_t Finger_Enroll(uint8_t id) {
 8026fa4:	b580      	push	{r7, lr}
 8026fa6:	b088      	sub	sp, #32
 8026fa8:	af00      	add	r7, sp, #0
 8026faa:	4603      	mov	r3, r0
 8026fac:	71fb      	strb	r3, [r7, #7]
    const TickType_t scan_time = (FINGER_SCAN_TIMEOUT);
 8026fae:	f242 7310 	movw	r3, #10000	; 0x2710
 8026fb2:	61bb      	str	r3, [r7, #24]
    TickType_t tick;
    int p;
    uint8_t timeout, error = 0;
 8026fb4:	2300      	movs	r3, #0
 8026fb6:	77fb      	strb	r3, [r7, #31]

    lock();
 8026fb8:	f000 fa1e 	bl	80273f8 <lock>
    if (!error) {
 8026fbc:	7ffb      	ldrb	r3, [r7, #31]
 8026fbe:	2b00      	cmp	r3, #0
 8026fc0:	d12a      	bne.n	8027018 <Finger_Enroll+0x74>
        // check number of stored id
        p = FZ3387_getTemplateCount();
 8026fc2:	f7fd fbd5 	bl	8024770 <FZ3387_getTemplateCount>
 8026fc6:	4603      	mov	r3, r0
 8026fc8:	617b      	str	r3, [r7, #20]
        // check response
        switch (p) {
 8026fca:	697b      	ldr	r3, [r7, #20]
 8026fcc:	2b00      	cmp	r3, #0
 8026fce:	d002      	beq.n	8026fd6 <Finger_Enroll+0x32>
 8026fd0:	2b01      	cmp	r3, #1
 8026fd2:	d004      	beq.n	8026fde <Finger_Enroll+0x3a>
 8026fd4:	e007      	b.n	8026fe6 <Finger_Enroll+0x42>
            case FINGERPRINT_OK:
                LOG_StrLn("Retrieve OK");
 8026fd6:	48a9      	ldr	r0, [pc, #676]	; (802727c <Finger_Enroll+0x2d8>)
 8026fd8:	f017 f9cc 	bl	803e374 <LOG_StrLn>
                break;
 8026fdc:	e007      	b.n	8026fee <Finger_Enroll+0x4a>
            case FINGERPRINT_PACKETRECIEVEERR:
                LOG_StrLn("Communication error");
 8026fde:	48a8      	ldr	r0, [pc, #672]	; (8027280 <Finger_Enroll+0x2dc>)
 8026fe0:	f017 f9c8 	bl	803e374 <LOG_StrLn>
                break;
 8026fe4:	e003      	b.n	8026fee <Finger_Enroll+0x4a>
            default:
                LOG_StrLn("Unknown error");
 8026fe6:	48a7      	ldr	r0, [pc, #668]	; (8027284 <Finger_Enroll+0x2e0>)
 8026fe8:	f017 f9c4 	bl	803e374 <LOG_StrLn>
                break;
 8026fec:	bf00      	nop
        }

        LOG_Str("TemplateCount = ");
 8026fee:	48a6      	ldr	r0, [pc, #664]	; (8027288 <Finger_Enroll+0x2e4>)
 8026ff0:	f017 f9a8 	bl	803e344 <LOG_Str>
        LOG_Int(finger.templateCount);
 8026ff4:	4ba5      	ldr	r3, [pc, #660]	; (802728c <Finger_Enroll+0x2e8>)
 8026ff6:	889b      	ldrh	r3, [r3, #4]
 8026ff8:	4618      	mov	r0, r3
 8026ffa:	f017 f935 	bl	803e268 <LOG_Int>
        LOG_Enter();
 8026ffe:	f017 f927 	bl	803e250 <LOG_Enter>

        error = (p != FINGERPRINT_OK) || (finger.templateCount >= FINGER_USER_MAX);
 8027002:	697b      	ldr	r3, [r7, #20]
 8027004:	2b00      	cmp	r3, #0
 8027006:	d103      	bne.n	8027010 <Finger_Enroll+0x6c>
 8027008:	4ba0      	ldr	r3, [pc, #640]	; (802728c <Finger_Enroll+0x2e8>)
 802700a:	889b      	ldrh	r3, [r3, #4]
 802700c:	2b04      	cmp	r3, #4
 802700e:	d901      	bls.n	8027014 <Finger_Enroll+0x70>
 8027010:	2301      	movs	r3, #1
 8027012:	e000      	b.n	8027016 <Finger_Enroll+0x72>
 8027014:	2300      	movs	r3, #0
 8027016:	77fb      	strb	r3, [r7, #31]
    }

    if (!error) {
 8027018:	7ffb      	ldrb	r3, [r7, #31]
 802701a:	2b00      	cmp	r3, #0
 802701c:	d15a      	bne.n	80270d4 <Finger_Enroll+0x130>
        //  Take Image
        LOG_Str("\nWaiting for valid finger to enroll as #");
 802701e:	489c      	ldr	r0, [pc, #624]	; (8027290 <Finger_Enroll+0x2ec>)
 8027020:	f017 f990 	bl	803e344 <LOG_Str>
        LOG_Int(id);
 8027024:	79fb      	ldrb	r3, [r7, #7]
 8027026:	4618      	mov	r0, r3
 8027028:	f017 f91e 	bl	803e268 <LOG_Int>
        LOG_Enter();
 802702c:	f017 f910 	bl	803e250 <LOG_Enter>

        // set timeout guard
        tick = _GetTickMS();
 8027030:	f018 fb4f 	bl	803f6d2 <_GetTickMS>
 8027034:	6138      	str	r0, [r7, #16]
        do {
            // handle timeout
            timeout = ((_GetTickMS() - tick) > scan_time);
 8027036:	f018 fb4c 	bl	803f6d2 <_GetTickMS>
 802703a:	4602      	mov	r2, r0
 802703c:	693b      	ldr	r3, [r7, #16]
 802703e:	1ad3      	subs	r3, r2, r3
 8027040:	69ba      	ldr	r2, [r7, #24]
 8027042:	429a      	cmp	r2, r3
 8027044:	bf34      	ite	cc
 8027046:	2301      	movcc	r3, #1
 8027048:	2300      	movcs	r3, #0
 802704a:	b2db      	uxtb	r3, r3
 802704c:	73fb      	strb	r3, [r7, #15]

            // send command
            _LedToggle();
 802704e:	f018 fb59 	bl	803f704 <_LedToggle>
            HMI1.d.status.finger = !HMI1.d.status.finger;
 8027052:	4b90      	ldr	r3, [pc, #576]	; (8027294 <Finger_Enroll+0x2f0>)
 8027054:	791b      	ldrb	r3, [r3, #4]
 8027056:	2b00      	cmp	r3, #0
 8027058:	bf0c      	ite	eq
 802705a:	2301      	moveq	r3, #1
 802705c:	2300      	movne	r3, #0
 802705e:	b2db      	uxtb	r3, r3
 8027060:	461a      	mov	r2, r3
 8027062:	4b8c      	ldr	r3, [pc, #560]	; (8027294 <Finger_Enroll+0x2f0>)
 8027064:	711a      	strb	r2, [r3, #4]
            p = FZ3387_getImage();
 8027066:	f7fd fabb 	bl	80245e0 <FZ3387_getImage>
 802706a:	4603      	mov	r3, r0
 802706c:	617b      	str	r3, [r7, #20]

            // check response
            switch (p) {
 802706e:	697b      	ldr	r3, [r7, #20]
 8027070:	2b03      	cmp	r3, #3
 8027072:	d81b      	bhi.n	80270ac <Finger_Enroll+0x108>
 8027074:	a201      	add	r2, pc, #4	; (adr r2, 802707c <Finger_Enroll+0xd8>)
 8027076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802707a:	bf00      	nop
 802707c:	0802708d 	.word	0x0802708d
 8027080:	0802709d 	.word	0x0802709d
 8027084:	08027095 	.word	0x08027095
 8027088:	080270a5 	.word	0x080270a5
                case FINGERPRINT_OK:
                    LOG_StrLn("Image taken");
 802708c:	4882      	ldr	r0, [pc, #520]	; (8027298 <Finger_Enroll+0x2f4>)
 802708e:	f017 f971 	bl	803e374 <LOG_StrLn>
                    break;
 8027092:	e00f      	b.n	80270b4 <Finger_Enroll+0x110>
                case FINGERPRINT_NOFINGER:
                    LOG_StrLn(".");
 8027094:	4881      	ldr	r0, [pc, #516]	; (802729c <Finger_Enroll+0x2f8>)
 8027096:	f017 f96d 	bl	803e374 <LOG_StrLn>
                    break;
 802709a:	e00b      	b.n	80270b4 <Finger_Enroll+0x110>
                case FINGERPRINT_PACKETRECIEVEERR:
                    LOG_StrLn("Communication error");
 802709c:	4878      	ldr	r0, [pc, #480]	; (8027280 <Finger_Enroll+0x2dc>)
 802709e:	f017 f969 	bl	803e374 <LOG_StrLn>
                    break;
 80270a2:	e007      	b.n	80270b4 <Finger_Enroll+0x110>
                case FINGERPRINT_IMAGEFAIL:
                    LOG_StrLn("Imaging error");
 80270a4:	487e      	ldr	r0, [pc, #504]	; (80272a0 <Finger_Enroll+0x2fc>)
 80270a6:	f017 f965 	bl	803e374 <LOG_StrLn>
                    break;
 80270aa:	e003      	b.n	80270b4 <Finger_Enroll+0x110>
                default:
                    LOG_StrLn("Unknown error");
 80270ac:	4875      	ldr	r0, [pc, #468]	; (8027284 <Finger_Enroll+0x2e0>)
 80270ae:	f017 f961 	bl	803e374 <LOG_StrLn>
                    break;
 80270b2:	bf00      	nop
            }
        } while (p != FINGERPRINT_OK && !timeout);
 80270b4:	697b      	ldr	r3, [r7, #20]
 80270b6:	2b00      	cmp	r3, #0
 80270b8:	d002      	beq.n	80270c0 <Finger_Enroll+0x11c>
 80270ba:	7bfb      	ldrb	r3, [r7, #15]
 80270bc:	2b00      	cmp	r3, #0
 80270be:	d0ba      	beq.n	8027036 <Finger_Enroll+0x92>

        error = (p != FINGERPRINT_OK) || timeout;
 80270c0:	697b      	ldr	r3, [r7, #20]
 80270c2:	2b00      	cmp	r3, #0
 80270c4:	d102      	bne.n	80270cc <Finger_Enroll+0x128>
 80270c6:	7bfb      	ldrb	r3, [r7, #15]
 80270c8:	2b00      	cmp	r3, #0
 80270ca:	d001      	beq.n	80270d0 <Finger_Enroll+0x12c>
 80270cc:	2301      	movs	r3, #1
 80270ce:	e000      	b.n	80270d2 <Finger_Enroll+0x12e>
 80270d0:	2300      	movs	r3, #0
 80270d2:	77fb      	strb	r3, [r7, #31]
    }

    if (!error) {
 80270d4:	7ffb      	ldrb	r3, [r7, #31]
 80270d6:	2b00      	cmp	r3, #0
 80270d8:	d155      	bne.n	8027186 <Finger_Enroll+0x1e2>
        //	put image to buffer 1
        p = FZ3387_image2Tz(1);
 80270da:	2001      	movs	r0, #1
 80270dc:	f7fd fa8f 	bl	80245fe <FZ3387_image2Tz>
 80270e0:	4603      	mov	r3, r0
 80270e2:	617b      	str	r3, [r7, #20]
        switch (p) {
 80270e4:	697b      	ldr	r3, [r7, #20]
 80270e6:	2b15      	cmp	r3, #21
 80270e8:	d842      	bhi.n	8027170 <Finger_Enroll+0x1cc>
 80270ea:	a201      	add	r2, pc, #4	; (adr r2, 80270f0 <Finger_Enroll+0x14c>)
 80270ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80270f0:	08027149 	.word	0x08027149
 80270f4:	08027159 	.word	0x08027159
 80270f8:	08027171 	.word	0x08027171
 80270fc:	08027171 	.word	0x08027171
 8027100:	08027171 	.word	0x08027171
 8027104:	08027171 	.word	0x08027171
 8027108:	08027151 	.word	0x08027151
 802710c:	08027161 	.word	0x08027161
 8027110:	08027171 	.word	0x08027171
 8027114:	08027171 	.word	0x08027171
 8027118:	08027171 	.word	0x08027171
 802711c:	08027171 	.word	0x08027171
 8027120:	08027171 	.word	0x08027171
 8027124:	08027171 	.word	0x08027171
 8027128:	08027171 	.word	0x08027171
 802712c:	08027171 	.word	0x08027171
 8027130:	08027171 	.word	0x08027171
 8027134:	08027171 	.word	0x08027171
 8027138:	08027171 	.word	0x08027171
 802713c:	08027171 	.word	0x08027171
 8027140:	08027171 	.word	0x08027171
 8027144:	08027169 	.word	0x08027169
            case FINGERPRINT_OK:
                LOG_StrLn("Image converted");
 8027148:	4856      	ldr	r0, [pc, #344]	; (80272a4 <Finger_Enroll+0x300>)
 802714a:	f017 f913 	bl	803e374 <LOG_StrLn>
                break;
 802714e:	e013      	b.n	8027178 <Finger_Enroll+0x1d4>
            case FINGERPRINT_IMAGEMESS:
                LOG_StrLn("Image too messy");
 8027150:	4855      	ldr	r0, [pc, #340]	; (80272a8 <Finger_Enroll+0x304>)
 8027152:	f017 f90f 	bl	803e374 <LOG_StrLn>
                break;
 8027156:	e00f      	b.n	8027178 <Finger_Enroll+0x1d4>
            case FINGERPRINT_PACKETRECIEVEERR:
                LOG_StrLn("Communication error");
 8027158:	4849      	ldr	r0, [pc, #292]	; (8027280 <Finger_Enroll+0x2dc>)
 802715a:	f017 f90b 	bl	803e374 <LOG_StrLn>
                break;
 802715e:	e00b      	b.n	8027178 <Finger_Enroll+0x1d4>
            case FINGERPRINT_FEATUREFAIL:
                LOG_StrLn("Could not find finger print features");
 8027160:	4852      	ldr	r0, [pc, #328]	; (80272ac <Finger_Enroll+0x308>)
 8027162:	f017 f907 	bl	803e374 <LOG_StrLn>
                break;
 8027166:	e007      	b.n	8027178 <Finger_Enroll+0x1d4>
            case FINGERPRINT_INVALIDIMAGE:
                LOG_StrLn("Could not find finger print features");
 8027168:	4850      	ldr	r0, [pc, #320]	; (80272ac <Finger_Enroll+0x308>)
 802716a:	f017 f903 	bl	803e374 <LOG_StrLn>
                break;
 802716e:	e003      	b.n	8027178 <Finger_Enroll+0x1d4>
            default:
                LOG_StrLn("Unknown error");
 8027170:	4844      	ldr	r0, [pc, #272]	; (8027284 <Finger_Enroll+0x2e0>)
 8027172:	f017 f8ff 	bl	803e374 <LOG_StrLn>
                break;
 8027176:	bf00      	nop
        }

        error = (p != FINGERPRINT_OK);
 8027178:	697b      	ldr	r3, [r7, #20]
 802717a:	2b00      	cmp	r3, #0
 802717c:	bf14      	ite	ne
 802717e:	2301      	movne	r3, #1
 8027180:	2300      	moveq	r3, #0
 8027182:	b2db      	uxtb	r3, r3
 8027184:	77fb      	strb	r3, [r7, #31]
//            _DelayMS(100);
//            p = FZ3387_getImage();
//        } while (p != FINGERPRINT_NOFINGER);
//    }

    if (!error) {
 8027186:	7ffb      	ldrb	r3, [r7, #31]
 8027188:	2b00      	cmp	r3, #0
 802718a:	d12b      	bne.n	80271e4 <Finger_Enroll+0x240>
        //	Create Register model
        LOG_Str("\nCreating model for #");
 802718c:	4848      	ldr	r0, [pc, #288]	; (80272b0 <Finger_Enroll+0x30c>)
 802718e:	f017 f8d9 	bl	803e344 <LOG_Str>
        LOG_Int(id);
 8027192:	79fb      	ldrb	r3, [r7, #7]
 8027194:	4618      	mov	r0, r3
 8027196:	f017 f867 	bl	803e268 <LOG_Int>
        LOG_Enter();
 802719a:	f017 f859 	bl	803e250 <LOG_Enter>

        // Compare model from buffer 1 & 2
        p = FZ3387_createModel();
 802719e:	f7fd fa42 	bl	8024626 <FZ3387_createModel>
 80271a2:	4603      	mov	r3, r0
 80271a4:	617b      	str	r3, [r7, #20]
        if (p == FINGERPRINT_OK) {
 80271a6:	697b      	ldr	r3, [r7, #20]
 80271a8:	2b00      	cmp	r3, #0
 80271aa:	d103      	bne.n	80271b4 <Finger_Enroll+0x210>
            LOG_StrLn("Prints matched!");
 80271ac:	4841      	ldr	r0, [pc, #260]	; (80272b4 <Finger_Enroll+0x310>)
 80271ae:	f017 f8e1 	bl	803e374 <LOG_StrLn>
 80271b2:	e010      	b.n	80271d6 <Finger_Enroll+0x232>
        } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
 80271b4:	697b      	ldr	r3, [r7, #20]
 80271b6:	2b01      	cmp	r3, #1
 80271b8:	d103      	bne.n	80271c2 <Finger_Enroll+0x21e>
            LOG_StrLn("Communication error");
 80271ba:	4831      	ldr	r0, [pc, #196]	; (8027280 <Finger_Enroll+0x2dc>)
 80271bc:	f017 f8da 	bl	803e374 <LOG_StrLn>
 80271c0:	e009      	b.n	80271d6 <Finger_Enroll+0x232>
        } else if (p == FINGERPRINT_ENROLLMISMATCH) {
 80271c2:	697b      	ldr	r3, [r7, #20]
 80271c4:	2b0a      	cmp	r3, #10
 80271c6:	d103      	bne.n	80271d0 <Finger_Enroll+0x22c>
            LOG_StrLn("Fingerprints did not match");
 80271c8:	483b      	ldr	r0, [pc, #236]	; (80272b8 <Finger_Enroll+0x314>)
 80271ca:	f017 f8d3 	bl	803e374 <LOG_StrLn>
 80271ce:	e002      	b.n	80271d6 <Finger_Enroll+0x232>
        } else {
            LOG_StrLn("Unknown error");
 80271d0:	482c      	ldr	r0, [pc, #176]	; (8027284 <Finger_Enroll+0x2e0>)
 80271d2:	f017 f8cf 	bl	803e374 <LOG_StrLn>
        }

        error = (p != FINGERPRINT_OK);
 80271d6:	697b      	ldr	r3, [r7, #20]
 80271d8:	2b00      	cmp	r3, #0
 80271da:	bf14      	ite	ne
 80271dc:	2301      	movne	r3, #1
 80271de:	2300      	moveq	r3, #0
 80271e0:	b2db      	uxtb	r3, r3
 80271e2:	77fb      	strb	r3, [r7, #31]
    }

    if (!error) {
 80271e4:	7ffb      	ldrb	r3, [r7, #31]
 80271e6:	2b00      	cmp	r3, #0
 80271e8:	d135      	bne.n	8027256 <Finger_Enroll+0x2b2>
        // debug
        LOG_Str("\nID #");
 80271ea:	4834      	ldr	r0, [pc, #208]	; (80272bc <Finger_Enroll+0x318>)
 80271ec:	f017 f8aa 	bl	803e344 <LOG_Str>
        LOG_Int(id);
 80271f0:	79fb      	ldrb	r3, [r7, #7]
 80271f2:	4618      	mov	r0, r3
 80271f4:	f017 f838 	bl	803e268 <LOG_Int>
        LOG_Enter();
 80271f8:	f017 f82a 	bl	803e250 <LOG_Enter>

        //	Store in memory
        p = FZ3387_storeModel(id);
 80271fc:	79fb      	ldrb	r3, [r7, #7]
 80271fe:	b29b      	uxth	r3, r3
 8027200:	4618      	mov	r0, r3
 8027202:	f7fd fa1f 	bl	8024644 <FZ3387_storeModel>
 8027206:	4603      	mov	r3, r0
 8027208:	617b      	str	r3, [r7, #20]
        if (p == FINGERPRINT_OK) {
 802720a:	697b      	ldr	r3, [r7, #20]
 802720c:	2b00      	cmp	r3, #0
 802720e:	d103      	bne.n	8027218 <Finger_Enroll+0x274>
            LOG_StrLn("Stored!");
 8027210:	482b      	ldr	r0, [pc, #172]	; (80272c0 <Finger_Enroll+0x31c>)
 8027212:	f017 f8af 	bl	803e374 <LOG_StrLn>
 8027216:	e017      	b.n	8027248 <Finger_Enroll+0x2a4>
        } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
 8027218:	697b      	ldr	r3, [r7, #20]
 802721a:	2b01      	cmp	r3, #1
 802721c:	d103      	bne.n	8027226 <Finger_Enroll+0x282>
            LOG_StrLn("Communication error");
 802721e:	4818      	ldr	r0, [pc, #96]	; (8027280 <Finger_Enroll+0x2dc>)
 8027220:	f017 f8a8 	bl	803e374 <LOG_StrLn>
 8027224:	e010      	b.n	8027248 <Finger_Enroll+0x2a4>
        } else if (p == FINGERPRINT_BADLOCATION) {
 8027226:	697b      	ldr	r3, [r7, #20]
 8027228:	2b0b      	cmp	r3, #11
 802722a:	d103      	bne.n	8027234 <Finger_Enroll+0x290>
            LOG_StrLn("Could not store in that location");
 802722c:	4825      	ldr	r0, [pc, #148]	; (80272c4 <Finger_Enroll+0x320>)
 802722e:	f017 f8a1 	bl	803e374 <LOG_StrLn>
 8027232:	e009      	b.n	8027248 <Finger_Enroll+0x2a4>
        } else if (p == FINGERPRINT_FLASHERR) {
 8027234:	697b      	ldr	r3, [r7, #20]
 8027236:	2b18      	cmp	r3, #24
 8027238:	d103      	bne.n	8027242 <Finger_Enroll+0x29e>
            LOG_StrLn("Error writing to flash");
 802723a:	4823      	ldr	r0, [pc, #140]	; (80272c8 <Finger_Enroll+0x324>)
 802723c:	f017 f89a 	bl	803e374 <LOG_StrLn>
 8027240:	e002      	b.n	8027248 <Finger_Enroll+0x2a4>
        } else {
            LOG_StrLn("Unknown error");
 8027242:	4810      	ldr	r0, [pc, #64]	; (8027284 <Finger_Enroll+0x2e0>)
 8027244:	f017 f896 	bl	803e374 <LOG_StrLn>
        }

        error = (p != FINGERPRINT_OK);
 8027248:	697b      	ldr	r3, [r7, #20]
 802724a:	2b00      	cmp	r3, #0
 802724c:	bf14      	ite	ne
 802724e:	2301      	movne	r3, #1
 8027250:	2300      	moveq	r3, #0
 8027252:	b2db      	uxtb	r3, r3
 8027254:	77fb      	strb	r3, [r7, #31]
    }

    // reset indicator
    _LedWrite(0);
 8027256:	2000      	movs	r0, #0
 8027258:	f018 fa42 	bl	803f6e0 <_LedWrite>
    HMI1.d.status.finger = 0;
 802725c:	4b0d      	ldr	r3, [pc, #52]	; (8027294 <Finger_Enroll+0x2f0>)
 802725e:	2200      	movs	r2, #0
 8027260:	711a      	strb	r2, [r3, #4]
    unlock();
 8027262:	f000 f8d9 	bl	8027418 <unlock>

    return !error;
 8027266:	7ffb      	ldrb	r3, [r7, #31]
 8027268:	2b00      	cmp	r3, #0
 802726a:	bf0c      	ite	eq
 802726c:	2301      	moveq	r3, #1
 802726e:	2300      	movne	r3, #0
 8027270:	b2db      	uxtb	r3, r3
}
 8027272:	4618      	mov	r0, r3
 8027274:	3720      	adds	r7, #32
 8027276:	46bd      	mov	sp, r7
 8027278:	bd80      	pop	{r7, pc}
 802727a:	bf00      	nop
 802727c:	08043478 	.word	0x08043478
 8027280:	08043484 	.word	0x08043484
 8027284:	08043498 	.word	0x08043498
 8027288:	080434a8 	.word	0x080434a8
 802728c:	2000840c 	.word	0x2000840c
 8027290:	080434bc 	.word	0x080434bc
 8027294:	200001e4 	.word	0x200001e4
 8027298:	080434e8 	.word	0x080434e8
 802729c:	080434f4 	.word	0x080434f4
 80272a0:	080434f8 	.word	0x080434f8
 80272a4:	08043508 	.word	0x08043508
 80272a8:	08043518 	.word	0x08043518
 80272ac:	08043528 	.word	0x08043528
 80272b0:	08043550 	.word	0x08043550
 80272b4:	08043568 	.word	0x08043568
 80272b8:	08043578 	.word	0x08043578
 80272bc:	08043594 	.word	0x08043594
 80272c0:	0804359c 	.word	0x0804359c
 80272c4:	080435a4 	.word	0x080435a4
 80272c8:	080435c8 	.word	0x080435c8

080272cc <Finger_DeleteID>:

uint8_t Finger_DeleteID(uint8_t id) {
 80272cc:	b580      	push	{r7, lr}
 80272ce:	b084      	sub	sp, #16
 80272d0:	af00      	add	r7, sp, #0
 80272d2:	4603      	mov	r3, r0
 80272d4:	71fb      	strb	r3, [r7, #7]
    int8_t p;

    lock();
 80272d6:	f000 f88f 	bl	80273f8 <lock>
    // delete the modle
    p = FZ3387_deleteModel(id);
 80272da:	79fb      	ldrb	r3, [r7, #7]
 80272dc:	b29b      	uxth	r3, r3
 80272de:	4618      	mov	r0, r3
 80272e0:	f7fd f9cc 	bl	802467c <FZ3387_deleteModel>
 80272e4:	4603      	mov	r3, r0
 80272e6:	73fb      	strb	r3, [r7, #15]
    if (p == FINGERPRINT_OK) {
 80272e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80272ec:	2b00      	cmp	r3, #0
 80272ee:	d103      	bne.n	80272f8 <Finger_DeleteID+0x2c>
        LOG_StrLn("Deleted!");
 80272f0:	4818      	ldr	r0, [pc, #96]	; (8027354 <Finger_DeleteID+0x88>)
 80272f2:	f017 f83f 	bl	803e374 <LOG_StrLn>
 80272f6:	e020      	b.n	802733a <Finger_DeleteID+0x6e>
    } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
 80272f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80272fc:	2b01      	cmp	r3, #1
 80272fe:	d103      	bne.n	8027308 <Finger_DeleteID+0x3c>
        LOG_StrLn("Communication error");
 8027300:	4815      	ldr	r0, [pc, #84]	; (8027358 <Finger_DeleteID+0x8c>)
 8027302:	f017 f837 	bl	803e374 <LOG_StrLn>
 8027306:	e018      	b.n	802733a <Finger_DeleteID+0x6e>
    } else if (p == FINGERPRINT_BADLOCATION) {
 8027308:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802730c:	2b0b      	cmp	r3, #11
 802730e:	d103      	bne.n	8027318 <Finger_DeleteID+0x4c>
        LOG_StrLn("Could not delete in that location");
 8027310:	4812      	ldr	r0, [pc, #72]	; (802735c <Finger_DeleteID+0x90>)
 8027312:	f017 f82f 	bl	803e374 <LOG_StrLn>
 8027316:	e010      	b.n	802733a <Finger_DeleteID+0x6e>
    } else if (p == FINGERPRINT_FLASHERR) {
 8027318:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802731c:	2b18      	cmp	r3, #24
 802731e:	d103      	bne.n	8027328 <Finger_DeleteID+0x5c>
        LOG_StrLn("Error writing to flash");
 8027320:	480f      	ldr	r0, [pc, #60]	; (8027360 <Finger_DeleteID+0x94>)
 8027322:	f017 f827 	bl	803e374 <LOG_StrLn>
 8027326:	e008      	b.n	802733a <Finger_DeleteID+0x6e>
    } else {
        LOG_Str("\nUnknown error: 0x");
 8027328:	480e      	ldr	r0, [pc, #56]	; (8027364 <Finger_DeleteID+0x98>)
 802732a:	f017 f80b 	bl	803e344 <LOG_Str>
        LOG_Hex8(p);
 802732e:	7bfb      	ldrb	r3, [r7, #15]
 8027330:	4618      	mov	r0, r3
 8027332:	f016 ffe7 	bl	803e304 <LOG_Hex8>
        LOG_Enter();
 8027336:	f016 ff8b 	bl	803e250 <LOG_Enter>
    }
    unlock();
 802733a:	f000 f86d 	bl	8027418 <unlock>

    return (p == FINGERPRINT_OK);
 802733e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8027342:	2b00      	cmp	r3, #0
 8027344:	bf0c      	ite	eq
 8027346:	2301      	moveq	r3, #1
 8027348:	2300      	movne	r3, #0
 802734a:	b2db      	uxtb	r3, r3
}
 802734c:	4618      	mov	r0, r3
 802734e:	3710      	adds	r7, #16
 8027350:	46bd      	mov	sp, r7
 8027352:	bd80      	pop	{r7, pc}
 8027354:	080435e0 	.word	0x080435e0
 8027358:	08043484 	.word	0x08043484
 802735c:	080435ec 	.word	0x080435ec
 8027360:	080435c8 	.word	0x080435c8
 8027364:	08043610 	.word	0x08043610

08027368 <Finger_EmptyDatabase>:

uint8_t Finger_EmptyDatabase(void) {
 8027368:	b580      	push	{r7, lr}
 802736a:	b082      	sub	sp, #8
 802736c:	af00      	add	r7, sp, #0
    int8_t p;

    lock();
 802736e:	f000 f843 	bl	80273f8 <lock>
    // reset database
    p = FZ3387_emptyDatabase();
 8027372:	f7fd f9a1 	bl	80246b8 <FZ3387_emptyDatabase>
 8027376:	4603      	mov	r3, r0
 8027378:	71fb      	strb	r3, [r7, #7]
    unlock();
 802737a:	f000 f84d 	bl	8027418 <unlock>

    return (p == FINGERPRINT_OK);
 802737e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8027382:	2b00      	cmp	r3, #0
 8027384:	bf0c      	ite	eq
 8027386:	2301      	moveq	r3, #1
 8027388:	2300      	movne	r3, #0
 802738a:	b2db      	uxtb	r3, r3
}
 802738c:	4618      	mov	r0, r3
 802738e:	3708      	adds	r7, #8
 8027390:	46bd      	mov	sp, r7
 8027392:	bd80      	pop	{r7, pc}

08027394 <Finger_AuthFast>:
    unlock();

    return id;
}

int8_t Finger_AuthFast(void) {
 8027394:	b580      	push	{r7, lr}
 8027396:	b082      	sub	sp, #8
 8027398:	af00      	add	r7, sp, #0
    int8_t p, id = -1;
 802739a:	23ff      	movs	r3, #255	; 0xff
 802739c:	71bb      	strb	r3, [r7, #6]

    lock();
 802739e:	f000 f82b 	bl	80273f8 <lock>

    // scan the finger print
    p = FZ3387_getImage();
 80273a2:	f7fd f91d 	bl	80245e0 <FZ3387_getImage>
 80273a6:	4603      	mov	r3, r0
 80273a8:	71fb      	strb	r3, [r7, #7]

    // OK success!, convert the image taken
    if (p == FINGERPRINT_OK) {
 80273aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80273ae:	2b00      	cmp	r3, #0
 80273b0:	d104      	bne.n	80273bc <Finger_AuthFast+0x28>
        p = FZ3387_image2Tz(1);
 80273b2:	2001      	movs	r0, #1
 80273b4:	f7fd f923 	bl	80245fe <FZ3387_image2Tz>
 80273b8:	4603      	mov	r3, r0
 80273ba:	71fb      	strb	r3, [r7, #7]
    }

    // Find in the model
    if (p == FINGERPRINT_OK) {
 80273bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80273c0:	2b00      	cmp	r3, #0
 80273c2:	d103      	bne.n	80273cc <Finger_AuthFast+0x38>
        p = FZ3387_fingerFastSearch();
 80273c4:	f7fd f988 	bl	80246d8 <FZ3387_fingerFastSearch>
 80273c8:	4603      	mov	r3, r0
 80273ca:	71fb      	strb	r3, [r7, #7]
    }

    // found a match!
    if (p == FINGERPRINT_OK) {
 80273cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80273d0:	2b00      	cmp	r3, #0
 80273d2:	d106      	bne.n	80273e2 <Finger_AuthFast+0x4e>
        if (finger.confidence > FINGER_CONFIDENCE_MIN) {
 80273d4:	4b07      	ldr	r3, [pc, #28]	; (80273f4 <Finger_AuthFast+0x60>)
 80273d6:	885b      	ldrh	r3, [r3, #2]
 80273d8:	2b32      	cmp	r3, #50	; 0x32
 80273da:	d902      	bls.n	80273e2 <Finger_AuthFast+0x4e>
            id = finger.id;
 80273dc:	4b05      	ldr	r3, [pc, #20]	; (80273f4 <Finger_AuthFast+0x60>)
 80273de:	881b      	ldrh	r3, [r3, #0]
 80273e0:	71bb      	strb	r3, [r7, #6]
        }
    }
    unlock();
 80273e2:	f000 f819 	bl	8027418 <unlock>

    return id;
 80273e6:	f997 3006 	ldrsb.w	r3, [r7, #6]
}
 80273ea:	4618      	mov	r0, r3
 80273ec:	3708      	adds	r7, #8
 80273ee:	46bd      	mov	sp, r7
 80273f0:	bd80      	pop	{r7, pc}
 80273f2:	bf00      	nop
 80273f4:	2000840c 	.word	0x2000840c

080273f8 <lock>:

/* Private functions implementation --------------------------------------------*/
static void lock(void) {
 80273f8:	b580      	push	{r7, lr}
 80273fa:	af00      	add	r7, sp, #0
    osMutexAcquire(FingerRecMutexHandle, osWaitForever);
 80273fc:	4b05      	ldr	r3, [pc, #20]	; (8027414 <lock+0x1c>)
 80273fe:	681b      	ldr	r3, [r3, #0]
 8027400:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8027404:	4618      	mov	r0, r3
 8027406:	f010 fd21 	bl	8037e4c <osMutexAcquire>
    FZ3387_SET_POWER(1);
 802740a:	2001      	movs	r0, #1
 802740c:	f7fc ff3e 	bl	802428c <FZ3387_SET_POWER>
}
 8027410:	bf00      	nop
 8027412:	bd80      	pop	{r7, pc}
 8027414:	20008a54 	.word	0x20008a54

08027418 <unlock>:

static void unlock(void) {
 8027418:	b580      	push	{r7, lr}
 802741a:	af00      	add	r7, sp, #0
    FZ3387_SET_POWER(0);
 802741c:	2000      	movs	r0, #0
 802741e:	f7fc ff35 	bl	802428c <FZ3387_SET_POWER>
    _DelayMS(50);
 8027422:	2032      	movs	r0, #50	; 0x32
 8027424:	f018 f94a 	bl	803f6bc <_DelayMS>
    osMutexRelease(FingerRecMutexHandle);
 8027428:	4b03      	ldr	r3, [pc, #12]	; (8027438 <unlock+0x20>)
 802742a:	681b      	ldr	r3, [r3, #0]
 802742c:	4618      	mov	r0, r3
 802742e:	f010 fd6b 	bl	8037f08 <osMutexRelease>
}
 8027432:	bf00      	nop
 8027434:	bd80      	pop	{r7, pc}
 8027436:	bf00      	nop
 8027438:	20008a54 	.word	0x20008a54

0802743c <GPS_Init>:

/* Private variables ----------------------------------------------------------*/
static nmea_t nmea;

/* Public functions implementation --------------------------------------------*/
void GPS_Init(void) {
 802743c:	b580      	push	{r7, lr}
 802743e:	b082      	sub	sp, #8
 8027440:	af00      	add	r7, sp, #0
    uint32_t tick;

    // Inititalize Module
    _LedWrite(1);
 8027442:	2001      	movs	r0, #1
 8027444:	f018 f94c 	bl	803f6e0 <_LedWrite>
    do {
        LOG_StrLn("GPS:Init");
 8027448:	481c      	ldr	r0, [pc, #112]	; (80274bc <GPS_Init+0x80>)
 802744a:	f016 ff93 	bl	803e374 <LOG_StrLn>

        HAL_GPIO_WritePin(INT_GPS_PWR_GPIO_Port, INT_GPS_PWR_Pin, 0);
 802744e:	2200      	movs	r2, #0
 8027450:	2102      	movs	r1, #2
 8027452:	481b      	ldr	r0, [pc, #108]	; (80274c0 <GPS_Init+0x84>)
 8027454:	f008 fe7c 	bl	8030150 <HAL_GPIO_WritePin>
        _DelayMS(500);
 8027458:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 802745c:	f018 f92e 	bl	803f6bc <_DelayMS>
        HAL_GPIO_WritePin(INT_GPS_PWR_GPIO_Port, INT_GPS_PWR_Pin, 1);
 8027460:	2201      	movs	r2, #1
 8027462:	2102      	movs	r1, #2
 8027464:	4816      	ldr	r0, [pc, #88]	; (80274c0 <GPS_Init+0x84>)
 8027466:	f008 fe73 	bl	8030150 <HAL_GPIO_WritePin>

        // set timeout guard
        tick = _GetTickMS();
 802746a:	f018 f932 	bl	803f6d2 <_GetTickMS>
 802746e:	6078      	str	r0, [r7, #4]
        while ((_GetTickMS() - tick) < 5000) {
 8027470:	e008      	b.n	8027484 <GPS_Init+0x48>
            if (strlen(UBLOX_UART_RX) > 50) {
 8027472:	4814      	ldr	r0, [pc, #80]	; (80274c4 <GPS_Init+0x88>)
 8027474:	f7f8 fede 	bl	8020234 <strlen>
 8027478:	4603      	mov	r3, r0
 802747a:	2b32      	cmp	r3, #50	; 0x32
 802747c:	d80c      	bhi.n	8027498 <GPS_Init+0x5c>
                break;
            }
            _DelayMS(10);
 802747e:	200a      	movs	r0, #10
 8027480:	f018 f91c 	bl	803f6bc <_DelayMS>
        while ((_GetTickMS() - tick) < 5000) {
 8027484:	f018 f925 	bl	803f6d2 <_GetTickMS>
 8027488:	4602      	mov	r2, r0
 802748a:	687b      	ldr	r3, [r7, #4]
 802748c:	1ad3      	subs	r3, r2, r3
 802748e:	f241 3287 	movw	r2, #4999	; 0x1387
 8027492:	4293      	cmp	r3, r2
 8027494:	d9ed      	bls.n	8027472 <GPS_Init+0x36>
 8027496:	e000      	b.n	802749a <GPS_Init+0x5e>
                break;
 8027498:	bf00      	nop
        }
    } while (strlen(UBLOX_UART_RX) <= 50);
 802749a:	480a      	ldr	r0, [pc, #40]	; (80274c4 <GPS_Init+0x88>)
 802749c:	f7f8 feca 	bl	8020234 <strlen>
 80274a0:	4603      	mov	r3, r0
 80274a2:	2b32      	cmp	r3, #50	; 0x32
 80274a4:	d9d0      	bls.n	8027448 <GPS_Init+0xc>
    _LedWrite(0);
 80274a6:	2000      	movs	r0, #0
 80274a8:	f018 f91a 	bl	803f6e0 <_LedWrite>

    nmea_init(&nmea);
 80274ac:	4806      	ldr	r0, [pc, #24]	; (80274c8 <GPS_Init+0x8c>)
 80274ae:	f7fd fb55 	bl	8024b5c <nmea_init>
}
 80274b2:	bf00      	nop
 80274b4:	3708      	adds	r7, #8
 80274b6:	46bd      	mov	sp, r7
 80274b8:	bd80      	pop	{r7, pc}
 80274ba:	bf00      	nop
 80274bc:	0804368c 	.word	0x0804368c
 80274c0:	40020800 	.word	0x40020800
 80274c4:	20008164 	.word	0x20008164
 80274c8:	20000e3c 	.word	0x20000e3c

080274cc <GPS_Capture>:

uint8_t GPS_Capture(void) {
 80274cc:	b580      	push	{r7, lr}
 80274ce:	af00      	add	r7, sp, #0
    nmea_process(&nmea, UBLOX_UART_RX, strlen(UBLOX_UART_RX));
 80274d0:	481d      	ldr	r0, [pc, #116]	; (8027548 <GPS_Capture+0x7c>)
 80274d2:	f7f8 feaf 	bl	8020234 <strlen>
 80274d6:	4603      	mov	r3, r0
 80274d8:	461a      	mov	r2, r3
 80274da:	491b      	ldr	r1, [pc, #108]	; (8027548 <GPS_Capture+0x7c>)
 80274dc:	481b      	ldr	r0, [pc, #108]	; (802754c <GPS_Capture+0x80>)
 80274de:	f7fd fb4b 	bl	8024b78 <nmea_process>

    // copy only necessary part
    GPS.dop_h = nmea.dop_h;
 80274e2:	4b1a      	ldr	r3, [pc, #104]	; (802754c <GPS_Capture+0x80>)
 80274e4:	699b      	ldr	r3, [r3, #24]
 80274e6:	4a1a      	ldr	r2, [pc, #104]	; (8027550 <GPS_Capture+0x84>)
 80274e8:	6013      	str	r3, [r2, #0]
    GPS.latitude = nmea.latitude;
 80274ea:	4b18      	ldr	r3, [pc, #96]	; (802754c <GPS_Capture+0x80>)
 80274ec:	681b      	ldr	r3, [r3, #0]
 80274ee:	4a18      	ldr	r2, [pc, #96]	; (8027550 <GPS_Capture+0x84>)
 80274f0:	6053      	str	r3, [r2, #4]
    GPS.longitude = nmea.longitude;
 80274f2:	4b16      	ldr	r3, [pc, #88]	; (802754c <GPS_Capture+0x80>)
 80274f4:	685b      	ldr	r3, [r3, #4]
 80274f6:	4a16      	ldr	r2, [pc, #88]	; (8027550 <GPS_Capture+0x84>)
 80274f8:	6093      	str	r3, [r2, #8]
    GPS.heading = nmea.coarse;
 80274fa:	4b14      	ldr	r3, [pc, #80]	; (802754c <GPS_Capture+0x80>)
 80274fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80274fe:	4a14      	ldr	r2, [pc, #80]	; (8027550 <GPS_Capture+0x84>)
 8027500:	60d3      	str	r3, [r2, #12]
    GPS.speed_kph = nmea_to_speed(nmea.speed, nmea_speed_kph);
 8027502:	4b12      	ldr	r3, [pc, #72]	; (802754c <GPS_Capture+0x80>)
 8027504:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8027508:	2001      	movs	r0, #1
 802750a:	eeb0 0a67 	vmov.f32	s0, s15
 802750e:	f7fd fbed 	bl	8024cec <nmea_to_speed>
 8027512:	eef0 7a40 	vmov.f32	s15, s0
 8027516:	4b0e      	ldr	r3, [pc, #56]	; (8027550 <GPS_Capture+0x84>)
 8027518:	edc3 7a04 	vstr	s15, [r3, #16]
    GPS.speed_mps = nmea_to_speed(nmea.speed, nmea_speed_mps);
 802751c:	4b0b      	ldr	r3, [pc, #44]	; (802754c <GPS_Capture+0x80>)
 802751e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8027522:	2002      	movs	r0, #2
 8027524:	eeb0 0a67 	vmov.f32	s0, s15
 8027528:	f7fd fbe0 	bl	8024cec <nmea_to_speed>
 802752c:	eef0 7a40 	vmov.f32	s15, s0
 8027530:	4b07      	ldr	r3, [pc, #28]	; (8027550 <GPS_Capture+0x84>)
 8027532:	edc3 7a05 	vstr	s15, [r3, #20]

    return nmea.fix > 0;
 8027536:	4b05      	ldr	r3, [pc, #20]	; (802754c <GPS_Capture+0x80>)
 8027538:	7c5b      	ldrb	r3, [r3, #17]
 802753a:	2b00      	cmp	r3, #0
 802753c:	bf14      	ite	ne
 802753e:	2301      	movne	r3, #1
 8027540:	2300      	moveq	r3, #0
 8027542:	b2db      	uxtb	r3, r3
}
 8027544:	4618      	mov	r0, r3
 8027546:	bd80      	pop	{r7, pc}
 8027548:	20008164 	.word	0x20008164
 802754c:	20000e3c 	.word	0x20000e3c
 8027550:	2000844c 	.word	0x2000844c

08027554 <GPS_CalculateOdometer>:
    LOG_StrLn("GPS:Buffer = ");
    LOG_Buf(UBLOX_UART_RX, sizeof(UBLOX_UART_RX));
    LOG_Enter();
}

void GPS_CalculateOdometer(void) {
 8027554:	b580      	push	{r7, lr}
 8027556:	b082      	sub	sp, #8
 8027558:	af00      	add	r7, sp, #0
    static uint16_t odometer_mps = 0;

    // dummy odometer
    if (GPS.speed_mps > 5) {
 802755a:	4b2a      	ldr	r3, [pc, #168]	; (8027604 <GPS_CalculateOdometer+0xb0>)
 802755c:	edd3 7a05 	vldr	s15, [r3, #20]
 8027560:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8027564:	eef4 7ac7 	vcmpe.f32	s15, s14
 8027568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802756c:	dd19      	ble.n	80275a2 <GPS_CalculateOdometer+0x4e>
        odometer_mps += (GPS.speed_mps * GPS_INTERVAL_MS) / 1000;
 802756e:	4b26      	ldr	r3, [pc, #152]	; (8027608 <GPS_CalculateOdometer+0xb4>)
 8027570:	881b      	ldrh	r3, [r3, #0]
 8027572:	ee07 3a90 	vmov	s15, r3
 8027576:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802757a:	4b22      	ldr	r3, [pc, #136]	; (8027604 <GPS_CalculateOdometer+0xb0>)
 802757c:	edd3 7a05 	vldr	s15, [r3, #20]
 8027580:	eddf 6a22 	vldr	s13, [pc, #136]	; 802760c <GPS_CalculateOdometer+0xb8>
 8027584:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8027588:	ed9f 6a21 	vldr	s12, [pc, #132]	; 8027610 <GPS_CalculateOdometer+0xbc>
 802758c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8027590:	ee77 7a27 	vadd.f32	s15, s14, s15
 8027594:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8027598:	ee17 3a90 	vmov	r3, s15
 802759c:	b29a      	uxth	r2, r3
 802759e:	4b1a      	ldr	r3, [pc, #104]	; (8027608 <GPS_CalculateOdometer+0xb4>)
 80275a0:	801a      	strh	r2, [r3, #0]
    }
    // check if already > 1km
    if (odometer_mps >= 1000) {
 80275a2:	4b19      	ldr	r3, [pc, #100]	; (8027608 <GPS_CalculateOdometer+0xb4>)
 80275a4:	881b      	ldrh	r3, [r3, #0]
 80275a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80275aa:	d30b      	bcc.n	80275c4 <GPS_CalculateOdometer+0x70>
        odometer_mps = 0;
 80275ac:	4b16      	ldr	r3, [pc, #88]	; (8027608 <GPS_CalculateOdometer+0xb4>)
 80275ae:	2200      	movs	r2, #0
 80275b0:	801a      	strh	r2, [r3, #0]

        // Accumulate Odometer (Save permanently)
        EEPROM_Odometer(EE_CMD_W, VCU.d.odometer + 1);
 80275b2:	4b18      	ldr	r3, [pc, #96]	; (8027614 <GPS_CalculateOdometer+0xc0>)
 80275b4:	68db      	ldr	r3, [r3, #12]
 80275b6:	3301      	adds	r3, #1
 80275b8:	4619      	mov	r1, r3
 80275ba:	2001      	movs	r0, #1
 80275bc:	f017 f830 	bl	803e620 <EEPROM_Odometer>

        // Accumulate Sub-Trip (Reset on Start)
        HBAR_AccumulateSubTrip();
 80275c0:	f000 fb2c 	bl	8027c1c <HBAR_AccumulateSubTrip>
    }

    // FIXME: use real data
    // update data
    VCU.d.speed = GPS.speed_kph;
 80275c4:	4b0f      	ldr	r3, [pc, #60]	; (8027604 <GPS_CalculateOdometer+0xb0>)
 80275c6:	edd3 7a04 	vldr	s15, [r3, #16]
 80275ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80275ce:	edc7 7a01 	vstr	s15, [r7, #4]
 80275d2:	793b      	ldrb	r3, [r7, #4]
 80275d4:	b2da      	uxtb	r2, r3
 80275d6:	4b0f      	ldr	r3, [pc, #60]	; (8027614 <GPS_CalculateOdometer+0xc0>)
 80275d8:	725a      	strb	r2, [r3, #9]
    VCU.d.volume = VCU.d.speed * 100 / MCU_SPEED_MAX;
 80275da:	4b0e      	ldr	r3, [pc, #56]	; (8027614 <GPS_CalculateOdometer+0xc0>)
 80275dc:	7a5b      	ldrb	r3, [r3, #9]
 80275de:	461a      	mov	r2, r3
 80275e0:	2364      	movs	r3, #100	; 0x64
 80275e2:	fb03 f302 	mul.w	r3, r3, r2
 80275e6:	4a0c      	ldr	r2, [pc, #48]	; (8027618 <GPS_CalculateOdometer+0xc4>)
 80275e8:	fb82 1203 	smull	r1, r2, r2, r3
 80275ec:	441a      	add	r2, r3
 80275ee:	11d2      	asrs	r2, r2, #7
 80275f0:	17db      	asrs	r3, r3, #31
 80275f2:	1ad3      	subs	r3, r2, r3
 80275f4:	b2da      	uxtb	r2, r3
 80275f6:	4b07      	ldr	r3, [pc, #28]	; (8027614 <GPS_CalculateOdometer+0xc0>)
 80275f8:	721a      	strb	r2, [r3, #8]
}
 80275fa:	bf00      	nop
 80275fc:	3708      	adds	r7, #8
 80275fe:	46bd      	mov	sp, r7
 8027600:	bd80      	pop	{r7, pc}
 8027602:	bf00      	nop
 8027604:	2000844c 	.word	0x2000844c
 8027608:	20000eb0 	.word	0x20000eb0
 802760c:	451c4000 	.word	0x451c4000
 8027610:	447a0000 	.word	0x447a0000
 8027614:	20000228 	.word	0x20000228
 8027618:	80808081 	.word	0x80808081

0802761c <GYRO_Init>:
static mems_t mems, calibrator;
static uint8_t calibrated;
static mems_decision_t decider;

/* Public functions implementation --------------------------------------------*/
void GYRO_Init(void) {
 802761c:	b5b0      	push	{r4, r5, r7, lr}
 802761e:	b08a      	sub	sp, #40	; 0x28
 8027620:	af02      	add	r7, sp, #8
    MPU6050_Result result;
    calibrated = 0;
 8027622:	4b1f      	ldr	r3, [pc, #124]	; (80276a0 <GYRO_Init+0x84>)
 8027624:	2200      	movs	r2, #0
 8027626:	701a      	strb	r2, [r3, #0]

    do {
        LOG_StrLn("Gyro:Init");
 8027628:	481e      	ldr	r0, [pc, #120]	; (80276a4 <GYRO_Init+0x88>)
 802762a:	f016 fea3 	bl	803e374 <LOG_StrLn>

        // MOSFET Control
        HAL_GPIO_WritePin(INT_GYRO_PWR_GPIO_Port, INT_GYRO_PWR_Pin, 0);
 802762e:	2200      	movs	r2, #0
 8027630:	2110      	movs	r1, #16
 8027632:	481d      	ldr	r0, [pc, #116]	; (80276a8 <GYRO_Init+0x8c>)
 8027634:	f008 fd8c 	bl	8030150 <HAL_GPIO_WritePin>
        _DelayMS(500);
 8027638:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 802763c:	f018 f83e 	bl	803f6bc <_DelayMS>
        HAL_GPIO_WritePin(INT_GYRO_PWR_GPIO_Port, INT_GYRO_PWR_Pin, 1);
 8027640:	2201      	movs	r2, #1
 8027642:	2110      	movs	r1, #16
 8027644:	4818      	ldr	r0, [pc, #96]	; (80276a8 <GYRO_Init+0x8c>)
 8027646:	f008 fd83 	bl	8030150 <HAL_GPIO_WritePin>
        _DelayMS(1000);
 802764a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 802764e:	f018 f835 	bl	803f6bc <_DelayMS>

        // module initialization
        result = MPU6050_Init(&hi2c3, &mpu, MPU6050_Device_0, MPU6050_Accelerometer_16G, MPU6050_Gyroscope_2000s);
 8027652:	2303      	movs	r3, #3
 8027654:	9300      	str	r3, [sp, #0]
 8027656:	2303      	movs	r3, #3
 8027658:	2200      	movs	r2, #0
 802765a:	4914      	ldr	r1, [pc, #80]	; (80276ac <GYRO_Init+0x90>)
 802765c:	4814      	ldr	r0, [pc, #80]	; (80276b0 <GYRO_Init+0x94>)
 802765e:	f7fd f8af 	bl	80247c0 <MPU6050_Init>
 8027662:	4603      	mov	r3, r0
 8027664:	77fb      	strb	r3, [r7, #31]

    } while (result != MPU6050_Result_Ok);
 8027666:	7ffb      	ldrb	r3, [r7, #31]
 8027668:	2b00      	cmp	r3, #0
 802766a:	d1dd      	bne.n	8027628 <GYRO_Init+0xc>

    // Set calibrator
    calibrator = GYRO_Average(500);
 802766c:	4c11      	ldr	r4, [pc, #68]	; (80276b4 <GYRO_Init+0x98>)
 802766e:	463b      	mov	r3, r7
 8027670:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8027674:	4618      	mov	r0, r3
 8027676:	f000 f821 	bl	80276bc <GYRO_Average>
 802767a:	4625      	mov	r5, r4
 802767c:	463c      	mov	r4, r7
 802767e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8027680:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8027682:	e894 0003 	ldmia.w	r4, {r0, r1}
 8027686:	e885 0003 	stmia.w	r5, {r0, r1}
    calibrated = 1;
 802768a:	4b05      	ldr	r3, [pc, #20]	; (80276a0 <GYRO_Init+0x84>)
 802768c:	2201      	movs	r2, #1
 802768e:	701a      	strb	r2, [r3, #0]
    LOG_StrLn("Gyro:Calibrated");
 8027690:	4809      	ldr	r0, [pc, #36]	; (80276b8 <GYRO_Init+0x9c>)
 8027692:	f016 fe6f 	bl	803e374 <LOG_StrLn>
}
 8027696:	bf00      	nop
 8027698:	3720      	adds	r7, #32
 802769a:	46bd      	mov	sp, r7
 802769c:	bdb0      	pop	{r4, r5, r7, pc}
 802769e:	bf00      	nop
 80276a0:	20000f00 	.word	0x20000f00
 80276a4:	080436a8 	.word	0x080436a8
 80276a8:	40020400 	.word	0x40020400
 80276ac:	20000eb4 	.word	0x20000eb4
 80276b0:	20008524 	.word	0x20008524
 80276b4:	20000ee8 	.word	0x20000ee8
 80276b8:	080436b4 	.word	0x080436b4

080276bc <GYRO_Average>:

mems_t GYRO_Average(uint16_t sample) {
 80276bc:	b5b0      	push	{r4, r5, r7, lr}
 80276be:	b084      	sub	sp, #16
 80276c0:	af00      	add	r7, sp, #0
 80276c2:	6078      	str	r0, [r7, #4]
 80276c4:	460b      	mov	r3, r1
 80276c6:	807b      	strh	r3, [r7, #2]
    uint16_t i;

    // reset value
    mems.accelerometer.x = 0;
 80276c8:	4b5a      	ldr	r3, [pc, #360]	; (8027834 <GYRO_Average+0x178>)
 80276ca:	2200      	movs	r2, #0
 80276cc:	601a      	str	r2, [r3, #0]
    mems.accelerometer.y = 0;
 80276ce:	4b59      	ldr	r3, [pc, #356]	; (8027834 <GYRO_Average+0x178>)
 80276d0:	2200      	movs	r2, #0
 80276d2:	605a      	str	r2, [r3, #4]
    mems.accelerometer.z = 0;
 80276d4:	4b57      	ldr	r3, [pc, #348]	; (8027834 <GYRO_Average+0x178>)
 80276d6:	2200      	movs	r2, #0
 80276d8:	609a      	str	r2, [r3, #8]
    mems.gyroscope.x = 0;
 80276da:	4b56      	ldr	r3, [pc, #344]	; (8027834 <GYRO_Average+0x178>)
 80276dc:	2200      	movs	r2, #0
 80276de:	60da      	str	r2, [r3, #12]
    mems.gyroscope.y = 0;
 80276e0:	4b54      	ldr	r3, [pc, #336]	; (8027834 <GYRO_Average+0x178>)
 80276e2:	2200      	movs	r2, #0
 80276e4:	611a      	str	r2, [r3, #16]
    mems.gyroscope.z = 0;
 80276e6:	4b53      	ldr	r3, [pc, #332]	; (8027834 <GYRO_Average+0x178>)
 80276e8:	2200      	movs	r2, #0
 80276ea:	615a      	str	r2, [r3, #20]

    // sampling
    for (i = 0; i < sample; i++) {
 80276ec:	2300      	movs	r3, #0
 80276ee:	81fb      	strh	r3, [r7, #14]
 80276f0:	e036      	b.n	8027760 <GYRO_Average+0xa4>
        // read sensor
        MPU6050_ReadAll(&hi2c3, &mpu);
 80276f2:	4951      	ldr	r1, [pc, #324]	; (8027838 <GYRO_Average+0x17c>)
 80276f4:	4851      	ldr	r0, [pc, #324]	; (802783c <GYRO_Average+0x180>)
 80276f6:	f7fd f9bd 	bl	8024a74 <MPU6050_ReadAll>
        // sum all value
        mems.accelerometer.x += mpu.Gyroscope_X;
 80276fa:	4b4e      	ldr	r3, [pc, #312]	; (8027834 <GYRO_Average+0x178>)
 80276fc:	681b      	ldr	r3, [r3, #0]
 80276fe:	4a4e      	ldr	r2, [pc, #312]	; (8027838 <GYRO_Average+0x17c>)
 8027700:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8027704:	4413      	add	r3, r2
 8027706:	4a4b      	ldr	r2, [pc, #300]	; (8027834 <GYRO_Average+0x178>)
 8027708:	6013      	str	r3, [r2, #0]
        mems.accelerometer.y += mpu.Gyroscope_Y;
 802770a:	4b4a      	ldr	r3, [pc, #296]	; (8027834 <GYRO_Average+0x178>)
 802770c:	685b      	ldr	r3, [r3, #4]
 802770e:	4a4a      	ldr	r2, [pc, #296]	; (8027838 <GYRO_Average+0x17c>)
 8027710:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 8027714:	4413      	add	r3, r2
 8027716:	4a47      	ldr	r2, [pc, #284]	; (8027834 <GYRO_Average+0x178>)
 8027718:	6053      	str	r3, [r2, #4]
        mems.accelerometer.z += mpu.Gyroscope_Z;
 802771a:	4b46      	ldr	r3, [pc, #280]	; (8027834 <GYRO_Average+0x178>)
 802771c:	689b      	ldr	r3, [r3, #8]
 802771e:	4a46      	ldr	r2, [pc, #280]	; (8027838 <GYRO_Average+0x17c>)
 8027720:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 8027724:	4413      	add	r3, r2
 8027726:	4a43      	ldr	r2, [pc, #268]	; (8027834 <GYRO_Average+0x178>)
 8027728:	6093      	str	r3, [r2, #8]
        mems.gyroscope.x += mpu.Accelerometer_X;
 802772a:	4b42      	ldr	r3, [pc, #264]	; (8027834 <GYRO_Average+0x178>)
 802772c:	68db      	ldr	r3, [r3, #12]
 802772e:	4a42      	ldr	r2, [pc, #264]	; (8027838 <GYRO_Average+0x17c>)
 8027730:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8027734:	4413      	add	r3, r2
 8027736:	4a3f      	ldr	r2, [pc, #252]	; (8027834 <GYRO_Average+0x178>)
 8027738:	60d3      	str	r3, [r2, #12]
        mems.gyroscope.y += mpu.Accelerometer_Y;
 802773a:	4b3e      	ldr	r3, [pc, #248]	; (8027834 <GYRO_Average+0x178>)
 802773c:	691b      	ldr	r3, [r3, #16]
 802773e:	4a3e      	ldr	r2, [pc, #248]	; (8027838 <GYRO_Average+0x17c>)
 8027740:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8027744:	4413      	add	r3, r2
 8027746:	4a3b      	ldr	r2, [pc, #236]	; (8027834 <GYRO_Average+0x178>)
 8027748:	6113      	str	r3, [r2, #16]
        mems.gyroscope.z += mpu.Accelerometer_Z;
 802774a:	4b3a      	ldr	r3, [pc, #232]	; (8027834 <GYRO_Average+0x178>)
 802774c:	695b      	ldr	r3, [r3, #20]
 802774e:	4a3a      	ldr	r2, [pc, #232]	; (8027838 <GYRO_Average+0x17c>)
 8027750:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8027754:	4413      	add	r3, r2
 8027756:	4a37      	ldr	r2, [pc, #220]	; (8027834 <GYRO_Average+0x178>)
 8027758:	6153      	str	r3, [r2, #20]
    for (i = 0; i < sample; i++) {
 802775a:	89fb      	ldrh	r3, [r7, #14]
 802775c:	3301      	adds	r3, #1
 802775e:	81fb      	strh	r3, [r7, #14]
 8027760:	89fa      	ldrh	r2, [r7, #14]
 8027762:	887b      	ldrh	r3, [r7, #2]
 8027764:	429a      	cmp	r2, r3
 8027766:	d3c4      	bcc.n	80276f2 <GYRO_Average+0x36>
    }

    // calculate the average
    mems.accelerometer.x = mems.accelerometer.x / sample;
 8027768:	4b32      	ldr	r3, [pc, #200]	; (8027834 <GYRO_Average+0x178>)
 802776a:	681a      	ldr	r2, [r3, #0]
 802776c:	887b      	ldrh	r3, [r7, #2]
 802776e:	fb92 f3f3 	sdiv	r3, r2, r3
 8027772:	4a30      	ldr	r2, [pc, #192]	; (8027834 <GYRO_Average+0x178>)
 8027774:	6013      	str	r3, [r2, #0]
    mems.accelerometer.y = mems.accelerometer.y / sample;
 8027776:	4b2f      	ldr	r3, [pc, #188]	; (8027834 <GYRO_Average+0x178>)
 8027778:	685a      	ldr	r2, [r3, #4]
 802777a:	887b      	ldrh	r3, [r7, #2]
 802777c:	fb92 f3f3 	sdiv	r3, r2, r3
 8027780:	4a2c      	ldr	r2, [pc, #176]	; (8027834 <GYRO_Average+0x178>)
 8027782:	6053      	str	r3, [r2, #4]
    mems.accelerometer.z = mems.accelerometer.z / sample;
 8027784:	4b2b      	ldr	r3, [pc, #172]	; (8027834 <GYRO_Average+0x178>)
 8027786:	689a      	ldr	r2, [r3, #8]
 8027788:	887b      	ldrh	r3, [r7, #2]
 802778a:	fb92 f3f3 	sdiv	r3, r2, r3
 802778e:	4a29      	ldr	r2, [pc, #164]	; (8027834 <GYRO_Average+0x178>)
 8027790:	6093      	str	r3, [r2, #8]
    mems.gyroscope.x = mems.gyroscope.x / sample;
 8027792:	4b28      	ldr	r3, [pc, #160]	; (8027834 <GYRO_Average+0x178>)
 8027794:	68da      	ldr	r2, [r3, #12]
 8027796:	887b      	ldrh	r3, [r7, #2]
 8027798:	fb92 f3f3 	sdiv	r3, r2, r3
 802779c:	4a25      	ldr	r2, [pc, #148]	; (8027834 <GYRO_Average+0x178>)
 802779e:	60d3      	str	r3, [r2, #12]
    mems.gyroscope.y = mems.gyroscope.y / sample;
 80277a0:	4b24      	ldr	r3, [pc, #144]	; (8027834 <GYRO_Average+0x178>)
 80277a2:	691a      	ldr	r2, [r3, #16]
 80277a4:	887b      	ldrh	r3, [r7, #2]
 80277a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80277aa:	4a22      	ldr	r2, [pc, #136]	; (8027834 <GYRO_Average+0x178>)
 80277ac:	6113      	str	r3, [r2, #16]
    mems.gyroscope.z = mems.gyroscope.z / sample;
 80277ae:	4b21      	ldr	r3, [pc, #132]	; (8027834 <GYRO_Average+0x178>)
 80277b0:	695a      	ldr	r2, [r3, #20]
 80277b2:	887b      	ldrh	r3, [r7, #2]
 80277b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80277b8:	4a1e      	ldr	r2, [pc, #120]	; (8027834 <GYRO_Average+0x178>)
 80277ba:	6153      	str	r3, [r2, #20]

    // set for calibration
    if (calibrated) {
 80277bc:	4b20      	ldr	r3, [pc, #128]	; (8027840 <GYRO_Average+0x184>)
 80277be:	781b      	ldrb	r3, [r3, #0]
 80277c0:	2b00      	cmp	r3, #0
 80277c2:	d029      	beq.n	8027818 <GYRO_Average+0x15c>
        mems.accelerometer.x -= calibrator.accelerometer.x;
 80277c4:	4b1b      	ldr	r3, [pc, #108]	; (8027834 <GYRO_Average+0x178>)
 80277c6:	681a      	ldr	r2, [r3, #0]
 80277c8:	4b1e      	ldr	r3, [pc, #120]	; (8027844 <GYRO_Average+0x188>)
 80277ca:	681b      	ldr	r3, [r3, #0]
 80277cc:	1ad3      	subs	r3, r2, r3
 80277ce:	4a19      	ldr	r2, [pc, #100]	; (8027834 <GYRO_Average+0x178>)
 80277d0:	6013      	str	r3, [r2, #0]
        mems.accelerometer.y -= calibrator.accelerometer.y;
 80277d2:	4b18      	ldr	r3, [pc, #96]	; (8027834 <GYRO_Average+0x178>)
 80277d4:	685a      	ldr	r2, [r3, #4]
 80277d6:	4b1b      	ldr	r3, [pc, #108]	; (8027844 <GYRO_Average+0x188>)
 80277d8:	685b      	ldr	r3, [r3, #4]
 80277da:	1ad3      	subs	r3, r2, r3
 80277dc:	4a15      	ldr	r2, [pc, #84]	; (8027834 <GYRO_Average+0x178>)
 80277de:	6053      	str	r3, [r2, #4]
        mems.accelerometer.z -= calibrator.accelerometer.z;
 80277e0:	4b14      	ldr	r3, [pc, #80]	; (8027834 <GYRO_Average+0x178>)
 80277e2:	689a      	ldr	r2, [r3, #8]
 80277e4:	4b17      	ldr	r3, [pc, #92]	; (8027844 <GYRO_Average+0x188>)
 80277e6:	689b      	ldr	r3, [r3, #8]
 80277e8:	1ad3      	subs	r3, r2, r3
 80277ea:	4a12      	ldr	r2, [pc, #72]	; (8027834 <GYRO_Average+0x178>)
 80277ec:	6093      	str	r3, [r2, #8]
        mems.gyroscope.x -= calibrator.gyroscope.x;
 80277ee:	4b11      	ldr	r3, [pc, #68]	; (8027834 <GYRO_Average+0x178>)
 80277f0:	68da      	ldr	r2, [r3, #12]
 80277f2:	4b14      	ldr	r3, [pc, #80]	; (8027844 <GYRO_Average+0x188>)
 80277f4:	68db      	ldr	r3, [r3, #12]
 80277f6:	1ad3      	subs	r3, r2, r3
 80277f8:	4a0e      	ldr	r2, [pc, #56]	; (8027834 <GYRO_Average+0x178>)
 80277fa:	60d3      	str	r3, [r2, #12]
        mems.gyroscope.y -= calibrator.gyroscope.y;
 80277fc:	4b0d      	ldr	r3, [pc, #52]	; (8027834 <GYRO_Average+0x178>)
 80277fe:	691a      	ldr	r2, [r3, #16]
 8027800:	4b10      	ldr	r3, [pc, #64]	; (8027844 <GYRO_Average+0x188>)
 8027802:	691b      	ldr	r3, [r3, #16]
 8027804:	1ad3      	subs	r3, r2, r3
 8027806:	4a0b      	ldr	r2, [pc, #44]	; (8027834 <GYRO_Average+0x178>)
 8027808:	6113      	str	r3, [r2, #16]
        mems.gyroscope.z -= calibrator.gyroscope.z;
 802780a:	4b0a      	ldr	r3, [pc, #40]	; (8027834 <GYRO_Average+0x178>)
 802780c:	695a      	ldr	r2, [r3, #20]
 802780e:	4b0d      	ldr	r3, [pc, #52]	; (8027844 <GYRO_Average+0x188>)
 8027810:	695b      	ldr	r3, [r3, #20]
 8027812:	1ad3      	subs	r3, r2, r3
 8027814:	4a07      	ldr	r2, [pc, #28]	; (8027834 <GYRO_Average+0x178>)
 8027816:	6153      	str	r3, [r2, #20]
    }

    return mems;
 8027818:	687b      	ldr	r3, [r7, #4]
 802781a:	4a06      	ldr	r2, [pc, #24]	; (8027834 <GYRO_Average+0x178>)
 802781c:	461c      	mov	r4, r3
 802781e:	4615      	mov	r5, r2
 8027820:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8027822:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8027824:	e895 0003 	ldmia.w	r5, {r0, r1}
 8027828:	e884 0003 	stmia.w	r4, {r0, r1}
}
 802782c:	6878      	ldr	r0, [r7, #4]
 802782e:	3710      	adds	r7, #16
 8027830:	46bd      	mov	sp, r7
 8027832:	bdb0      	pop	{r4, r5, r7, pc}
 8027834:	20000ed0 	.word	0x20000ed0
 8027838:	20000eb4 	.word	0x20000eb4
 802783c:	20008524 	.word	0x20008524
 8027840:	20000f00 	.word	0x20000f00
 8027844:	20000ee8 	.word	0x20000ee8

08027848 <GYRO_Decision>:

mems_decision_t GYRO_Decision(uint16_t sample) {
 8027848:	b5b0      	push	{r4, r5, r7, lr}
 802784a:	b088      	sub	sp, #32
 802784c:	af00      	add	r7, sp, #0
 802784e:	61f8      	str	r0, [r7, #28]
 8027850:	460b      	mov	r3, r1
 8027852:	837b      	strh	r3, [r7, #26]
    // get mems data
    mems = GYRO_Average(sample);
 8027854:	4c44      	ldr	r4, [pc, #272]	; (8027968 <GYRO_Decision+0x120>)
 8027856:	463b      	mov	r3, r7
 8027858:	8b7a      	ldrh	r2, [r7, #26]
 802785a:	4611      	mov	r1, r2
 802785c:	4618      	mov	r0, r3
 802785e:	f7ff ff2d 	bl	80276bc <GYRO_Average>
 8027862:	4625      	mov	r5, r4
 8027864:	463c      	mov	r4, r7
 8027866:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8027868:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802786a:	e894 0003 	ldmia.w	r4, {r0, r1}
 802786e:	e885 0003 	stmia.w	r5, {r0, r1}

    // calculate g-force
    decider.crash.value = sqrt(pow(mems.accelerometer.x, 2) +
 8027872:	4b3d      	ldr	r3, [pc, #244]	; (8027968 <GYRO_Decision+0x120>)
 8027874:	681b      	ldr	r3, [r3, #0]
 8027876:	4618      	mov	r0, r3
 8027878:	f7f8 fe8c 	bl	8020594 <__aeabi_i2d>
 802787c:	4603      	mov	r3, r0
 802787e:	460c      	mov	r4, r1
 8027880:	ed9f 1b37 	vldr	d1, [pc, #220]	; 8027960 <GYRO_Decision+0x118>
 8027884:	ec44 3b10 	vmov	d0, r3, r4
 8027888:	f01a faba 	bl	8041e00 <pow>
 802788c:	ec55 4b10 	vmov	r4, r5, d0
            pow(mems.accelerometer.y, 2) +
 8027890:	4b35      	ldr	r3, [pc, #212]	; (8027968 <GYRO_Decision+0x120>)
 8027892:	685b      	ldr	r3, [r3, #4]
 8027894:	4618      	mov	r0, r3
 8027896:	f7f8 fe7d 	bl	8020594 <__aeabi_i2d>
 802789a:	4602      	mov	r2, r0
 802789c:	460b      	mov	r3, r1
 802789e:	ed9f 1b30 	vldr	d1, [pc, #192]	; 8027960 <GYRO_Decision+0x118>
 80278a2:	ec43 2b10 	vmov	d0, r2, r3
 80278a6:	f01a faab 	bl	8041e00 <pow>
 80278aa:	ec53 2b10 	vmov	r2, r3, d0
    decider.crash.value = sqrt(pow(mems.accelerometer.x, 2) +
 80278ae:	4620      	mov	r0, r4
 80278b0:	4629      	mov	r1, r5
 80278b2:	f7f8 fd23 	bl	80202fc <__adddf3>
 80278b6:	4603      	mov	r3, r0
 80278b8:	460c      	mov	r4, r1
 80278ba:	4625      	mov	r5, r4
 80278bc:	461c      	mov	r4, r3
            pow(mems.accelerometer.z, 2));
 80278be:	4b2a      	ldr	r3, [pc, #168]	; (8027968 <GYRO_Decision+0x120>)
 80278c0:	689b      	ldr	r3, [r3, #8]
 80278c2:	4618      	mov	r0, r3
 80278c4:	f7f8 fe66 	bl	8020594 <__aeabi_i2d>
 80278c8:	4602      	mov	r2, r0
 80278ca:	460b      	mov	r3, r1
 80278cc:	ed9f 1b24 	vldr	d1, [pc, #144]	; 8027960 <GYRO_Decision+0x118>
 80278d0:	ec43 2b10 	vmov	d0, r2, r3
 80278d4:	f01a fa94 	bl	8041e00 <pow>
 80278d8:	ec53 2b10 	vmov	r2, r3, d0
    decider.crash.value = sqrt(pow(mems.accelerometer.x, 2) +
 80278dc:	4620      	mov	r0, r4
 80278de:	4629      	mov	r1, r5
 80278e0:	f7f8 fd0c 	bl	80202fc <__adddf3>
 80278e4:	4603      	mov	r3, r0
 80278e6:	460c      	mov	r4, r1
 80278e8:	ec44 3b17 	vmov	d7, r3, r4
 80278ec:	eeb0 0a47 	vmov.f32	s0, s14
 80278f0:	eef0 0a67 	vmov.f32	s1, s15
 80278f4:	f01a fbf4 	bl	80420e0 <sqrt>
 80278f8:	ec54 3b10 	vmov	r3, r4, d0
 80278fc:	4618      	mov	r0, r3
 80278fe:	4621      	mov	r1, r4
 8027900:	f7f9 f962 	bl	8020bc8 <__aeabi_d2iz>
 8027904:	4602      	mov	r2, r0
 8027906:	4b19      	ldr	r3, [pc, #100]	; (802796c <GYRO_Decision+0x124>)
 8027908:	60da      	str	r2, [r3, #12]
    decider.crash.state = (decider.crash.value > ACCELEROMETER_LIMIT);
 802790a:	4b18      	ldr	r3, [pc, #96]	; (802796c <GYRO_Decision+0x124>)
 802790c:	68db      	ldr	r3, [r3, #12]
 802790e:	461a      	mov	r2, r3
 8027910:	f643 33e5 	movw	r3, #15333	; 0x3be5
 8027914:	429a      	cmp	r2, r3
 8027916:	bf8c      	ite	hi
 8027918:	2301      	movhi	r3, #1
 802791a:	2300      	movls	r3, #0
 802791c:	b2db      	uxtb	r3, r3
 802791e:	461a      	mov	r2, r3
 8027920:	4b12      	ldr	r3, [pc, #72]	; (802796c <GYRO_Decision+0x124>)
 8027922:	721a      	strb	r2, [r3, #8]

    // calculate movement change
    decider.fall.value = (abs(mems.gyroscope.z));
 8027924:	4b10      	ldr	r3, [pc, #64]	; (8027968 <GYRO_Decision+0x120>)
 8027926:	695b      	ldr	r3, [r3, #20]
 8027928:	2b00      	cmp	r3, #0
 802792a:	bfb8      	it	lt
 802792c:	425b      	neglt	r3, r3
 802792e:	461a      	mov	r2, r3
 8027930:	4b0e      	ldr	r3, [pc, #56]	; (802796c <GYRO_Decision+0x124>)
 8027932:	605a      	str	r2, [r3, #4]
    decider.fall.state = decider.fall.value > GYROSCOPE_LIMIT;
 8027934:	4b0d      	ldr	r3, [pc, #52]	; (802796c <GYRO_Decision+0x124>)
 8027936:	685b      	ldr	r3, [r3, #4]
 8027938:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802793c:	bf8c      	ite	hi
 802793e:	2301      	movhi	r3, #1
 8027940:	2300      	movls	r3, #0
 8027942:	b2db      	uxtb	r3, r3
 8027944:	461a      	mov	r2, r3
 8027946:	4b09      	ldr	r3, [pc, #36]	; (802796c <GYRO_Decision+0x124>)
 8027948:	701a      	strb	r2, [r3, #0]

    // debugger
//	Gyro_RawDebugger();

    return decider;
 802794a:	69fb      	ldr	r3, [r7, #28]
 802794c:	4a07      	ldr	r2, [pc, #28]	; (802796c <GYRO_Decision+0x124>)
 802794e:	461c      	mov	r4, r3
 8027950:	4613      	mov	r3, r2
 8027952:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8027954:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8027958:	69f8      	ldr	r0, [r7, #28]
 802795a:	3720      	adds	r7, #32
 802795c:	46bd      	mov	sp, r7
 802795e:	bdb0      	pop	{r4, r5, r7, pc}
 8027960:	00000000 	.word	0x00000000
 8027964:	40000000 	.word	0x40000000
 8027968:	20000ed0 	.word	0x20000ed0
 802796c:	20000f04 	.word	0x20000f04

08027970 <HBAR_ReadStates>:

/* Private variables ----------------------------------------------------------*/
static uint8_t mode;

/* Public functions implementation --------------------------------------------*/
void HBAR_ReadStates(void) {
 8027970:	b590      	push	{r4, r7, lr}
 8027972:	b083      	sub	sp, #12
 8027974:	af00      	add	r7, sp, #0
    // Read all EXTI state
    for (uint8_t i = 0; i < SW_TOTAL_LIST; i++) {
 8027976:	2300      	movs	r3, #0
 8027978:	71fb      	strb	r3, [r7, #7]
 802797a:	e01a      	b.n	80279b2 <HBAR_ReadStates+0x42>
        SW.list[i].state = HAL_GPIO_ReadPin(SW.list[i].port, SW.list[i].pin);
 802797c:	79fb      	ldrb	r3, [r7, #7]
 802797e:	4a11      	ldr	r2, [pc, #68]	; (80279c4 <HBAR_ReadStates+0x54>)
 8027980:	015b      	lsls	r3, r3, #5
 8027982:	4413      	add	r3, r2
 8027984:	3318      	adds	r3, #24
 8027986:	6818      	ldr	r0, [r3, #0]
 8027988:	79fb      	ldrb	r3, [r7, #7]
 802798a:	4a0e      	ldr	r2, [pc, #56]	; (80279c4 <HBAR_ReadStates+0x54>)
 802798c:	015b      	lsls	r3, r3, #5
 802798e:	4413      	add	r3, r2
 8027990:	3314      	adds	r3, #20
 8027992:	881b      	ldrh	r3, [r3, #0]
 8027994:	79fc      	ldrb	r4, [r7, #7]
 8027996:	4619      	mov	r1, r3
 8027998:	f008 fbc2 	bl	8030120 <HAL_GPIO_ReadPin>
 802799c:	4603      	mov	r3, r0
 802799e:	4619      	mov	r1, r3
 80279a0:	4a08      	ldr	r2, [pc, #32]	; (80279c4 <HBAR_ReadStates+0x54>)
 80279a2:	0163      	lsls	r3, r4, #5
 80279a4:	4413      	add	r3, r2
 80279a6:	331c      	adds	r3, #28
 80279a8:	460a      	mov	r2, r1
 80279aa:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < SW_TOTAL_LIST; i++) {
 80279ac:	79fb      	ldrb	r3, [r7, #7]
 80279ae:	3301      	adds	r3, #1
 80279b0:	71fb      	strb	r3, [r7, #7]
 80279b2:	79fb      	ldrb	r3, [r7, #7]
 80279b4:	2b06      	cmp	r3, #6
 80279b6:	d9e1      	bls.n	802797c <HBAR_ReadStates+0xc>
    }

    // check is reverse mode active
    HBAR_CheckReverse();
 80279b8:	f000 f81c 	bl	80279f4 <HBAR_CheckReverse>
}
 80279bc:	bf00      	nop
 80279be:	370c      	adds	r7, #12
 80279c0:	46bd      	mov	sp, r7
 80279c2:	bd90      	pop	{r4, r7, pc}
 80279c4:	20000004 	.word	0x20000004

080279c8 <HBAR_RestoreMode>:

void HBAR_RestoreMode(void) {
 80279c8:	b480      	push	{r7}
 80279ca:	af00      	add	r7, sp, #0
    if (SW.runner.mode.sub.val[SW_M_DRIVE] == SW_M_DRIVE_R) {
 80279cc:	4b07      	ldr	r3, [pc, #28]	; (80279ec <HBAR_RestoreMode+0x24>)
 80279ce:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 80279d2:	2b03      	cmp	r3, #3
 80279d4:	d104      	bne.n	80279e0 <HBAR_RestoreMode+0x18>
        SW.runner.mode.sub.val[SW_M_DRIVE] = mode;
 80279d6:	4b06      	ldr	r3, [pc, #24]	; (80279f0 <HBAR_RestoreMode+0x28>)
 80279d8:	781a      	ldrb	r2, [r3, #0]
 80279da:	4b04      	ldr	r3, [pc, #16]	; (80279ec <HBAR_RestoreMode+0x24>)
 80279dc:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
    }
}
 80279e0:	bf00      	nop
 80279e2:	46bd      	mov	sp, r7
 80279e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80279e8:	4770      	bx	lr
 80279ea:	bf00      	nop
 80279ec:	20000004 	.word	0x20000004
 80279f0:	20000f14 	.word	0x20000f14

080279f4 <HBAR_CheckReverse>:

void HBAR_CheckReverse(void) {
 80279f4:	b480      	push	{r7}
 80279f6:	af00      	add	r7, sp, #0
    if (SW.list[SW_K_REVERSE].state) {
 80279f8:	4b0e      	ldr	r3, [pc, #56]	; (8027a34 <HBAR_CheckReverse+0x40>)
 80279fa:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80279fe:	2b00      	cmp	r3, #0
 8027a00:	d00d      	beq.n	8027a1e <HBAR_CheckReverse+0x2a>
        // save previous Drive Mode state
        if (SW.runner.mode.sub.val[SW_M_DRIVE] != SW_M_DRIVE_R) {
 8027a02:	4b0c      	ldr	r3, [pc, #48]	; (8027a34 <HBAR_CheckReverse+0x40>)
 8027a04:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 8027a08:	2b03      	cmp	r3, #3
 8027a0a:	d004      	beq.n	8027a16 <HBAR_CheckReverse+0x22>
            mode = SW.runner.mode.sub.val[SW_M_DRIVE];
 8027a0c:	4b09      	ldr	r3, [pc, #36]	; (8027a34 <HBAR_CheckReverse+0x40>)
 8027a0e:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
 8027a12:	4b09      	ldr	r3, [pc, #36]	; (8027a38 <HBAR_CheckReverse+0x44>)
 8027a14:	701a      	strb	r2, [r3, #0]
        }
        // force state
        SW.runner.mode.sub.val[SW_M_DRIVE] = SW_M_DRIVE_R;
 8027a16:	4b07      	ldr	r3, [pc, #28]	; (8027a34 <HBAR_CheckReverse+0x40>)
 8027a18:	2203      	movs	r2, #3
 8027a1a:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
    }

    // set hazard
    SW.runner.hazard = SW.list[SW_K_REVERSE].state;
 8027a1e:	4b05      	ldr	r3, [pc, #20]	; (8027a34 <HBAR_CheckReverse+0x40>)
 8027a20:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8027a24:	4b03      	ldr	r3, [pc, #12]	; (8027a34 <HBAR_CheckReverse+0x40>)
 8027a26:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
}
 8027a2a:	bf00      	nop
 8027a2c:	46bd      	mov	sp, r7
 8027a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027a32:	4770      	bx	lr
 8027a34:	20000004 	.word	0x20000004
 8027a38:	20000f14 	.word	0x20000f14

08027a3c <HBAR_TimerSelectSet>:

void HBAR_TimerSelectSet(void) {
 8027a3c:	b590      	push	{r4, r7, lr}
 8027a3e:	b083      	sub	sp, #12
 8027a40:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < SW_TOTAL_LIST; i++) {
 8027a42:	2300      	movs	r3, #0
 8027a44:	71fb      	strb	r3, [r7, #7]
 8027a46:	e06d      	b.n	8027b24 <HBAR_TimerSelectSet+0xe8>
        if (i == SW_K_SELECT || i == SW_K_SET) {
 8027a48:	79fb      	ldrb	r3, [r7, #7]
 8027a4a:	2b00      	cmp	r3, #0
 8027a4c:	d002      	beq.n	8027a54 <HBAR_TimerSelectSet+0x18>
 8027a4e:	79fb      	ldrb	r3, [r7, #7]
 8027a50:	2b01      	cmp	r3, #1
 8027a52:	d164      	bne.n	8027b1e <HBAR_TimerSelectSet+0xe2>
            // reset SET timer
            SW.timer[i].time = 0;
 8027a54:	79fb      	ldrb	r3, [r7, #7]
 8027a56:	4a37      	ldr	r2, [pc, #220]	; (8027b34 <HBAR_TimerSelectSet+0xf8>)
 8027a58:	331c      	adds	r3, #28
 8027a5a:	00db      	lsls	r3, r3, #3
 8027a5c:	4413      	add	r3, r2
 8027a5e:	2200      	movs	r2, #0
 8027a60:	715a      	strb	r2, [r3, #5]

            // next job
            if (SW.list[i].state) {
 8027a62:	79fb      	ldrb	r3, [r7, #7]
 8027a64:	4a33      	ldr	r2, [pc, #204]	; (8027b34 <HBAR_TimerSelectSet+0xf8>)
 8027a66:	015b      	lsls	r3, r3, #5
 8027a68:	4413      	add	r3, r2
 8027a6a:	331c      	adds	r3, #28
 8027a6c:	781b      	ldrb	r3, [r3, #0]
 8027a6e:	2b00      	cmp	r3, #0
 8027a70:	d02a      	beq.n	8027ac8 <HBAR_TimerSelectSet+0x8c>
                if (i == SW_K_SELECT || (i == SW_K_SET && SW.runner.listening)) {
 8027a72:	79fb      	ldrb	r3, [r7, #7]
 8027a74:	2b00      	cmp	r3, #0
 8027a76:	d007      	beq.n	8027a88 <HBAR_TimerSelectSet+0x4c>
 8027a78:	79fb      	ldrb	r3, [r7, #7]
 8027a7a:	2b01      	cmp	r3, #1
 8027a7c:	d11c      	bne.n	8027ab8 <HBAR_TimerSelectSet+0x7c>
 8027a7e:	4b2d      	ldr	r3, [pc, #180]	; (8027b34 <HBAR_TimerSelectSet+0xf8>)
 8027a80:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8027a84:	2b00      	cmp	r3, #0
 8027a86:	d017      	beq.n	8027ab8 <HBAR_TimerSelectSet+0x7c>
                    // start timer if not running
                    if (!SW.timer[i].running) {
 8027a88:	79fb      	ldrb	r3, [r7, #7]
 8027a8a:	4a2a      	ldr	r2, [pc, #168]	; (8027b34 <HBAR_TimerSelectSet+0xf8>)
 8027a8c:	331c      	adds	r3, #28
 8027a8e:	00db      	lsls	r3, r3, #3
 8027a90:	4413      	add	r3, r2
 8027a92:	791b      	ldrb	r3, [r3, #4]
 8027a94:	2b00      	cmp	r3, #0
 8027a96:	d10f      	bne.n	8027ab8 <HBAR_TimerSelectSet+0x7c>
                        // set flag
                        SW.timer[i].running = 1;
 8027a98:	79fb      	ldrb	r3, [r7, #7]
 8027a9a:	4a26      	ldr	r2, [pc, #152]	; (8027b34 <HBAR_TimerSelectSet+0xf8>)
 8027a9c:	331c      	adds	r3, #28
 8027a9e:	00db      	lsls	r3, r3, #3
 8027aa0:	4413      	add	r3, r2
 8027aa2:	2201      	movs	r2, #1
 8027aa4:	711a      	strb	r2, [r3, #4]
                        // start timer for SET
                        SW.timer[i].start = _GetTickMS();
 8027aa6:	79fc      	ldrb	r4, [r7, #7]
 8027aa8:	f017 fe13 	bl	803f6d2 <_GetTickMS>
 8027aac:	4601      	mov	r1, r0
 8027aae:	4a21      	ldr	r2, [pc, #132]	; (8027b34 <HBAR_TimerSelectSet+0xf8>)
 8027ab0:	f104 031c 	add.w	r3, r4, #28
 8027ab4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
                    }
                }
                // reverse it
                SW.list[i].state = 0;
 8027ab8:	79fb      	ldrb	r3, [r7, #7]
 8027aba:	4a1e      	ldr	r2, [pc, #120]	; (8027b34 <HBAR_TimerSelectSet+0xf8>)
 8027abc:	015b      	lsls	r3, r3, #5
 8027abe:	4413      	add	r3, r2
 8027ac0:	331c      	adds	r3, #28
 8027ac2:	2200      	movs	r2, #0
 8027ac4:	701a      	strb	r2, [r3, #0]
 8027ac6:	e02a      	b.n	8027b1e <HBAR_TimerSelectSet+0xe2>
            } else {
                // stop timer if running
                if (SW.timer[i].running) {
 8027ac8:	79fb      	ldrb	r3, [r7, #7]
 8027aca:	4a1a      	ldr	r2, [pc, #104]	; (8027b34 <HBAR_TimerSelectSet+0xf8>)
 8027acc:	331c      	adds	r3, #28
 8027ace:	00db      	lsls	r3, r3, #3
 8027ad0:	4413      	add	r3, r2
 8027ad2:	791b      	ldrb	r3, [r3, #4]
 8027ad4:	2b00      	cmp	r3, #0
 8027ad6:	d022      	beq.n	8027b1e <HBAR_TimerSelectSet+0xe2>
                    // set flag
                    SW.timer[i].running = 0;
 8027ad8:	79fb      	ldrb	r3, [r7, #7]
 8027ada:	4a16      	ldr	r2, [pc, #88]	; (8027b34 <HBAR_TimerSelectSet+0xf8>)
 8027adc:	331c      	adds	r3, #28
 8027ade:	00db      	lsls	r3, r3, #3
 8027ae0:	4413      	add	r3, r2
 8027ae2:	2200      	movs	r2, #0
 8027ae4:	711a      	strb	r2, [r3, #4]
                    // stop SET
                    SW.timer[i].time = (_GetTickMS() - SW.timer[i].start) / 1000;
 8027ae6:	f017 fdf4 	bl	803f6d2 <_GetTickMS>
 8027aea:	4601      	mov	r1, r0
 8027aec:	79fb      	ldrb	r3, [r7, #7]
 8027aee:	4a11      	ldr	r2, [pc, #68]	; (8027b34 <HBAR_TimerSelectSet+0xf8>)
 8027af0:	331c      	adds	r3, #28
 8027af2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8027af6:	1acb      	subs	r3, r1, r3
 8027af8:	4a0f      	ldr	r2, [pc, #60]	; (8027b38 <HBAR_TimerSelectSet+0xfc>)
 8027afa:	fba2 2303 	umull	r2, r3, r2, r3
 8027afe:	099a      	lsrs	r2, r3, #6
 8027b00:	79fb      	ldrb	r3, [r7, #7]
 8027b02:	b2d1      	uxtb	r1, r2
 8027b04:	4a0b      	ldr	r2, [pc, #44]	; (8027b34 <HBAR_TimerSelectSet+0xf8>)
 8027b06:	331c      	adds	r3, #28
 8027b08:	00db      	lsls	r3, r3, #3
 8027b0a:	4413      	add	r3, r2
 8027b0c:	460a      	mov	r2, r1
 8027b0e:	715a      	strb	r2, [r3, #5]
                    // reverse it
                    SW.list[i].state = 1;
 8027b10:	79fb      	ldrb	r3, [r7, #7]
 8027b12:	4a08      	ldr	r2, [pc, #32]	; (8027b34 <HBAR_TimerSelectSet+0xf8>)
 8027b14:	015b      	lsls	r3, r3, #5
 8027b16:	4413      	add	r3, r2
 8027b18:	331c      	adds	r3, #28
 8027b1a:	2201      	movs	r2, #1
 8027b1c:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < SW_TOTAL_LIST; i++) {
 8027b1e:	79fb      	ldrb	r3, [r7, #7]
 8027b20:	3301      	adds	r3, #1
 8027b22:	71fb      	strb	r3, [r7, #7]
 8027b24:	79fb      	ldrb	r3, [r7, #7]
 8027b26:	2b06      	cmp	r3, #6
 8027b28:	d98e      	bls.n	8027a48 <HBAR_TimerSelectSet+0xc>
                }
            }
        }
    }
}
 8027b2a:	bf00      	nop
 8027b2c:	370c      	adds	r7, #12
 8027b2e:	46bd      	mov	sp, r7
 8027b30:	bd90      	pop	{r4, r7, pc}
 8027b32:	bf00      	nop
 8027b34:	20000004 	.word	0x20000004
 8027b38:	10624dd3 	.word	0x10624dd3

08027b3c <HBAR_RunSelect>:

void HBAR_RunSelect(void) {
 8027b3c:	b480      	push	{r7}
 8027b3e:	af00      	add	r7, sp, #0
    if (SW.runner.listening) {
 8027b40:	4b0f      	ldr	r3, [pc, #60]	; (8027b80 <HBAR_RunSelect+0x44>)
 8027b42:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8027b46:	2b00      	cmp	r3, #0
 8027b48:	d011      	beq.n	8027b6e <HBAR_RunSelect+0x32>
        // change mode position
        if (SW.runner.mode.val == SW_M_MAX) {
 8027b4a:	4b0d      	ldr	r3, [pc, #52]	; (8027b80 <HBAR_RunSelect+0x44>)
 8027b4c:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8027b50:	2b02      	cmp	r3, #2
 8027b52:	d104      	bne.n	8027b5e <HBAR_RunSelect+0x22>
            SW.runner.mode.val = 0;
 8027b54:	4b0a      	ldr	r3, [pc, #40]	; (8027b80 <HBAR_RunSelect+0x44>)
 8027b56:	2200      	movs	r2, #0
 8027b58:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
 8027b5c:	e007      	b.n	8027b6e <HBAR_RunSelect+0x32>
        } else {
            SW.runner.mode.val++;
 8027b5e:	4b08      	ldr	r3, [pc, #32]	; (8027b80 <HBAR_RunSelect+0x44>)
 8027b60:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8027b64:	3301      	adds	r3, #1
 8027b66:	b2da      	uxtb	r2, r3
 8027b68:	4b05      	ldr	r3, [pc, #20]	; (8027b80 <HBAR_RunSelect+0x44>)
 8027b6a:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
        }
    }
    // Listening on option
    SW.runner.listening = 1;
 8027b6e:	4b04      	ldr	r3, [pc, #16]	; (8027b80 <HBAR_RunSelect+0x44>)
 8027b70:	2201      	movs	r2, #1
 8027b72:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 8027b76:	bf00      	nop
 8027b78:	46bd      	mov	sp, r7
 8027b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027b7e:	4770      	bx	lr
 8027b80:	20000004 	.word	0x20000004

08027b84 <HBAR_RunSet>:

void HBAR_RunSet(void) {
 8027b84:	b480      	push	{r7}
 8027b86:	b083      	sub	sp, #12
 8027b88:	af00      	add	r7, sp, #0
    SW_MODE sMode = SW.runner.mode.val;
 8027b8a:	4b23      	ldr	r3, [pc, #140]	; (8027c18 <HBAR_RunSet+0x94>)
 8027b8c:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8027b90:	71fb      	strb	r3, [r7, #7]

    if (SW.runner.listening ||
 8027b92:	4b21      	ldr	r3, [pc, #132]	; (8027c18 <HBAR_RunSet+0x94>)
 8027b94:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8027b98:	2b00      	cmp	r3, #0
 8027b9a:	d107      	bne.n	8027bac <HBAR_RunSet+0x28>
            (SW.timer[SW_K_SET].time >= 3 && sMode == SW_M_TRIP)) {
 8027b9c:	4b1e      	ldr	r3, [pc, #120]	; (8027c18 <HBAR_RunSet+0x94>)
 8027b9e:	f893 30ed 	ldrb.w	r3, [r3, #237]	; 0xed
    if (SW.runner.listening ||
 8027ba2:	2b02      	cmp	r3, #2
 8027ba4:	d932      	bls.n	8027c0c <HBAR_RunSet+0x88>
            (SW.timer[SW_K_SET].time >= 3 && sMode == SW_M_TRIP)) {
 8027ba6:	79fb      	ldrb	r3, [r7, #7]
 8027ba8:	2b01      	cmp	r3, #1
 8027baa:	d12f      	bne.n	8027c0c <HBAR_RunSet+0x88>
        // handle reset only if push more than n sec, and in trip mode
        if (!SW.runner.listening) {
 8027bac:	4b1a      	ldr	r3, [pc, #104]	; (8027c18 <HBAR_RunSet+0x94>)
 8027bae:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8027bb2:	2b00      	cmp	r3, #0
 8027bb4:	d10b      	bne.n	8027bce <HBAR_RunSet+0x4a>
            // reset value
            SW.runner.mode.sub.trip[SW.runner.mode.sub.val[sMode]] = 0;
 8027bb6:	79fb      	ldrb	r3, [r7, #7]
 8027bb8:	4a17      	ldr	r2, [pc, #92]	; (8027c18 <HBAR_RunSet+0x94>)
 8027bba:	4413      	add	r3, r2
 8027bbc:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 8027bc0:	4a15      	ldr	r2, [pc, #84]	; (8027c18 <HBAR_RunSet+0x94>)
 8027bc2:	333e      	adds	r3, #62	; 0x3e
 8027bc4:	009b      	lsls	r3, r3, #2
 8027bc6:	4413      	add	r3, r2
 8027bc8:	2200      	movs	r2, #0
 8027bca:	609a      	str	r2, [r3, #8]
            } else {
                SW.runner.mode.sub.val[sMode]++;
            }
        }
    }
}
 8027bcc:	e01e      	b.n	8027c0c <HBAR_RunSet+0x88>
            if (SW.runner.mode.sub.val[sMode] == SW.runner.mode.sub.max[sMode]) {
 8027bce:	79fb      	ldrb	r3, [r7, #7]
 8027bd0:	4a11      	ldr	r2, [pc, #68]	; (8027c18 <HBAR_RunSet+0x94>)
 8027bd2:	4413      	add	r3, r2
 8027bd4:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
 8027bd8:	79fb      	ldrb	r3, [r7, #7]
 8027bda:	490f      	ldr	r1, [pc, #60]	; (8027c18 <HBAR_RunSet+0x94>)
 8027bdc:	440b      	add	r3, r1
 8027bde:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8027be2:	429a      	cmp	r2, r3
 8027be4:	d106      	bne.n	8027bf4 <HBAR_RunSet+0x70>
                SW.runner.mode.sub.val[sMode] = 0;
 8027be6:	79fb      	ldrb	r3, [r7, #7]
 8027be8:	4a0b      	ldr	r2, [pc, #44]	; (8027c18 <HBAR_RunSet+0x94>)
 8027bea:	4413      	add	r3, r2
 8027bec:	2200      	movs	r2, #0
 8027bee:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
}
 8027bf2:	e00b      	b.n	8027c0c <HBAR_RunSet+0x88>
                SW.runner.mode.sub.val[sMode]++;
 8027bf4:	79fb      	ldrb	r3, [r7, #7]
 8027bf6:	4a08      	ldr	r2, [pc, #32]	; (8027c18 <HBAR_RunSet+0x94>)
 8027bf8:	441a      	add	r2, r3
 8027bfa:	f892 20f8 	ldrb.w	r2, [r2, #248]	; 0xf8
 8027bfe:	3201      	adds	r2, #1
 8027c00:	b2d1      	uxtb	r1, r2
 8027c02:	4a05      	ldr	r2, [pc, #20]	; (8027c18 <HBAR_RunSet+0x94>)
 8027c04:	4413      	add	r3, r2
 8027c06:	460a      	mov	r2, r1
 8027c08:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
}
 8027c0c:	bf00      	nop
 8027c0e:	370c      	adds	r7, #12
 8027c10:	46bd      	mov	sp, r7
 8027c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027c16:	4770      	bx	lr
 8027c18:	20000004 	.word	0x20000004

08027c1c <HBAR_AccumulateSubTrip>:

void HBAR_AccumulateSubTrip(void) {
 8027c1c:	b480      	push	{r7}
 8027c1e:	b083      	sub	sp, #12
 8027c20:	af00      	add	r7, sp, #0
    SW_MODE_TRIP mTrip = SW.runner.mode.sub.val[SW_M_TRIP];
 8027c22:	4b14      	ldr	r3, [pc, #80]	; (8027c74 <HBAR_AccumulateSubTrip+0x58>)
 8027c24:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 8027c28:	71fb      	strb	r3, [r7, #7]

    if (SW.runner.mode.sub.trip[mTrip] >= VCU_ODOMETER_MAX) {
 8027c2a:	79fb      	ldrb	r3, [r7, #7]
 8027c2c:	4a11      	ldr	r2, [pc, #68]	; (8027c74 <HBAR_AccumulateSubTrip+0x58>)
 8027c2e:	333e      	adds	r3, #62	; 0x3e
 8027c30:	009b      	lsls	r3, r3, #2
 8027c32:	4413      	add	r3, r2
 8027c34:	689b      	ldr	r3, [r3, #8]
 8027c36:	4a10      	ldr	r2, [pc, #64]	; (8027c78 <HBAR_AccumulateSubTrip+0x5c>)
 8027c38:	4293      	cmp	r3, r2
 8027c3a:	d907      	bls.n	8027c4c <HBAR_AccumulateSubTrip+0x30>
        SW.runner.mode.sub.trip[mTrip] = 0;
 8027c3c:	79fb      	ldrb	r3, [r7, #7]
 8027c3e:	4a0d      	ldr	r2, [pc, #52]	; (8027c74 <HBAR_AccumulateSubTrip+0x58>)
 8027c40:	333e      	adds	r3, #62	; 0x3e
 8027c42:	009b      	lsls	r3, r3, #2
 8027c44:	4413      	add	r3, r2
 8027c46:	2200      	movs	r2, #0
 8027c48:	609a      	str	r2, [r3, #8]
    } else {
        SW.runner.mode.sub.trip[mTrip]++;
    }
}
 8027c4a:	e00d      	b.n	8027c68 <HBAR_AccumulateSubTrip+0x4c>
        SW.runner.mode.sub.trip[mTrip]++;
 8027c4c:	79fa      	ldrb	r2, [r7, #7]
 8027c4e:	4909      	ldr	r1, [pc, #36]	; (8027c74 <HBAR_AccumulateSubTrip+0x58>)
 8027c50:	f102 033e 	add.w	r3, r2, #62	; 0x3e
 8027c54:	009b      	lsls	r3, r3, #2
 8027c56:	440b      	add	r3, r1
 8027c58:	689b      	ldr	r3, [r3, #8]
 8027c5a:	1c59      	adds	r1, r3, #1
 8027c5c:	4805      	ldr	r0, [pc, #20]	; (8027c74 <HBAR_AccumulateSubTrip+0x58>)
 8027c5e:	f102 033e 	add.w	r3, r2, #62	; 0x3e
 8027c62:	009b      	lsls	r3, r3, #2
 8027c64:	4403      	add	r3, r0
 8027c66:	6099      	str	r1, [r3, #8]
}
 8027c68:	bf00      	nop
 8027c6a:	370c      	adds	r7, #12
 8027c6c:	46bd      	mov	sp, r7
 8027c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027c72:	4770      	bx	lr
 8027c74:	20000004 	.word	0x20000004
 8027c78:	0001869e 	.word	0x0001869e

08027c7c <HBAR_SeinController>:

sein_state_t HBAR_SeinController(sw_t *sw) {
 8027c7c:	b580      	push	{r7, lr}
 8027c7e:	b084      	sub	sp, #16
 8027c80:	af00      	add	r7, sp, #0
 8027c82:	6078      	str	r0, [r7, #4]
    static sein_state_t sein = {
            .left = 0,
            .right = 0
    };

    if ((_GetTickMS() - tickSein) >= 500) {
 8027c84:	f017 fd25 	bl	803f6d2 <_GetTickMS>
 8027c88:	4602      	mov	r2, r0
 8027c8a:	4b34      	ldr	r3, [pc, #208]	; (8027d5c <HBAR_SeinController+0xe0>)
 8027c8c:	681b      	ldr	r3, [r3, #0]
 8027c8e:	1ad3      	subs	r3, r2, r3
 8027c90:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8027c94:	d354      	bcc.n	8027d40 <HBAR_SeinController+0xc4>
        if (sw->runner.hazard) {
 8027c96:	687b      	ldr	r3, [r7, #4]
 8027c98:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
 8027c9c:	2b00      	cmp	r3, #0
 8027c9e:	d019      	beq.n	8027cd4 <HBAR_SeinController+0x58>
            // hazard
            tickSein = _GetTickMS();
 8027ca0:	f017 fd17 	bl	803f6d2 <_GetTickMS>
 8027ca4:	4602      	mov	r2, r0
 8027ca6:	4b2d      	ldr	r3, [pc, #180]	; (8027d5c <HBAR_SeinController+0xe0>)
 8027ca8:	601a      	str	r2, [r3, #0]
            sein.left = !sein.left;
 8027caa:	4b2d      	ldr	r3, [pc, #180]	; (8027d60 <HBAR_SeinController+0xe4>)
 8027cac:	781b      	ldrb	r3, [r3, #0]
 8027cae:	2b00      	cmp	r3, #0
 8027cb0:	bf0c      	ite	eq
 8027cb2:	2301      	moveq	r3, #1
 8027cb4:	2300      	movne	r3, #0
 8027cb6:	b2db      	uxtb	r3, r3
 8027cb8:	461a      	mov	r2, r3
 8027cba:	4b29      	ldr	r3, [pc, #164]	; (8027d60 <HBAR_SeinController+0xe4>)
 8027cbc:	701a      	strb	r2, [r3, #0]
            sein.right = !sein.right;
 8027cbe:	4b28      	ldr	r3, [pc, #160]	; (8027d60 <HBAR_SeinController+0xe4>)
 8027cc0:	785b      	ldrb	r3, [r3, #1]
 8027cc2:	2b00      	cmp	r3, #0
 8027cc4:	bf0c      	ite	eq
 8027cc6:	2301      	moveq	r3, #1
 8027cc8:	2300      	movne	r3, #0
 8027cca:	b2db      	uxtb	r3, r3
 8027ccc:	461a      	mov	r2, r3
 8027cce:	4b24      	ldr	r3, [pc, #144]	; (8027d60 <HBAR_SeinController+0xe4>)
 8027cd0:	705a      	strb	r2, [r3, #1]
 8027cd2:	e035      	b.n	8027d40 <HBAR_SeinController+0xc4>
        } else if (sw->list[SW_K_SEIN_LEFT].state) {
 8027cd4:	687b      	ldr	r3, [r7, #4]
 8027cd6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8027cda:	2b00      	cmp	r3, #0
 8027cdc:	d012      	beq.n	8027d04 <HBAR_SeinController+0x88>
            // left sein
            tickSein = _GetTickMS();
 8027cde:	f017 fcf8 	bl	803f6d2 <_GetTickMS>
 8027ce2:	4602      	mov	r2, r0
 8027ce4:	4b1d      	ldr	r3, [pc, #116]	; (8027d5c <HBAR_SeinController+0xe0>)
 8027ce6:	601a      	str	r2, [r3, #0]
            sein.left = !sein.left;
 8027ce8:	4b1d      	ldr	r3, [pc, #116]	; (8027d60 <HBAR_SeinController+0xe4>)
 8027cea:	781b      	ldrb	r3, [r3, #0]
 8027cec:	2b00      	cmp	r3, #0
 8027cee:	bf0c      	ite	eq
 8027cf0:	2301      	moveq	r3, #1
 8027cf2:	2300      	movne	r3, #0
 8027cf4:	b2db      	uxtb	r3, r3
 8027cf6:	461a      	mov	r2, r3
 8027cf8:	4b19      	ldr	r3, [pc, #100]	; (8027d60 <HBAR_SeinController+0xe4>)
 8027cfa:	701a      	strb	r2, [r3, #0]
            sein.right = 0;
 8027cfc:	4b18      	ldr	r3, [pc, #96]	; (8027d60 <HBAR_SeinController+0xe4>)
 8027cfe:	2200      	movs	r2, #0
 8027d00:	705a      	strb	r2, [r3, #1]
 8027d02:	e01d      	b.n	8027d40 <HBAR_SeinController+0xc4>
        } else if (sw->list[SW_K_SEIN_RIGHT].state) {
 8027d04:	687b      	ldr	r3, [r7, #4]
 8027d06:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8027d0a:	2b00      	cmp	r3, #0
 8027d0c:	d012      	beq.n	8027d34 <HBAR_SeinController+0xb8>
            // right sein
            tickSein = _GetTickMS();
 8027d0e:	f017 fce0 	bl	803f6d2 <_GetTickMS>
 8027d12:	4602      	mov	r2, r0
 8027d14:	4b11      	ldr	r3, [pc, #68]	; (8027d5c <HBAR_SeinController+0xe0>)
 8027d16:	601a      	str	r2, [r3, #0]
            sein.left = 0;
 8027d18:	4b11      	ldr	r3, [pc, #68]	; (8027d60 <HBAR_SeinController+0xe4>)
 8027d1a:	2200      	movs	r2, #0
 8027d1c:	701a      	strb	r2, [r3, #0]
            sein.right = !sein.right;
 8027d1e:	4b10      	ldr	r3, [pc, #64]	; (8027d60 <HBAR_SeinController+0xe4>)
 8027d20:	785b      	ldrb	r3, [r3, #1]
 8027d22:	2b00      	cmp	r3, #0
 8027d24:	bf0c      	ite	eq
 8027d26:	2301      	moveq	r3, #1
 8027d28:	2300      	movne	r3, #0
 8027d2a:	b2db      	uxtb	r3, r3
 8027d2c:	461a      	mov	r2, r3
 8027d2e:	4b0c      	ldr	r3, [pc, #48]	; (8027d60 <HBAR_SeinController+0xe4>)
 8027d30:	705a      	strb	r2, [r3, #1]
 8027d32:	e005      	b.n	8027d40 <HBAR_SeinController+0xc4>
        } else {
            sein.left = 0;
 8027d34:	4b0a      	ldr	r3, [pc, #40]	; (8027d60 <HBAR_SeinController+0xe4>)
 8027d36:	2200      	movs	r2, #0
 8027d38:	701a      	strb	r2, [r3, #0]
            sein.right = 0;
 8027d3a:	4b09      	ldr	r3, [pc, #36]	; (8027d60 <HBAR_SeinController+0xe4>)
 8027d3c:	2200      	movs	r2, #0
 8027d3e:	705a      	strb	r2, [r3, #1]
        }
    }

    return sein;
 8027d40:	4b07      	ldr	r3, [pc, #28]	; (8027d60 <HBAR_SeinController+0xe4>)
 8027d42:	881b      	ldrh	r3, [r3, #0]
 8027d44:	81bb      	strh	r3, [r7, #12]
 8027d46:	2300      	movs	r3, #0
 8027d48:	7b3a      	ldrb	r2, [r7, #12]
 8027d4a:	f362 0307 	bfi	r3, r2, #0, #8
 8027d4e:	7b7a      	ldrb	r2, [r7, #13]
 8027d50:	f362 230f 	bfi	r3, r2, #8, #8
}
 8027d54:	4618      	mov	r0, r3
 8027d56:	3710      	adds	r7, #16
 8027d58:	46bd      	mov	sp, r7
 8027d5a:	bd80      	pop	{r7, pc}
 8027d5c:	20000f18 	.word	0x20000f18
 8027d60:	20000f1c 	.word	0x20000f1c

08027d64 <HBAR_ModeController>:

uint8_t HBAR_ModeController(sw_runner_t *runner) {
 8027d64:	b580      	push	{r7, lr}
 8027d66:	b082      	sub	sp, #8
 8027d68:	af00      	add	r7, sp, #0
 8027d6a:	6078      	str	r0, [r7, #4]
    static TickType_t tick, tickPeriod;
    static uint8_t iHide = 0;
    static int8_t iName = -1, iValue = -1;

    // MODE Show/Hide Manipulator
    if (runner->listening) {
 8027d6c:	687b      	ldr	r3, [r7, #4]
 8027d6e:	781b      	ldrb	r3, [r3, #0]
 8027d70:	2b00      	cmp	r3, #0
 8027d72:	d05f      	beq.n	8027e34 <HBAR_ModeController+0xd0>
        // if mode same
        if (iName != runner->mode.val) {
 8027d74:	4b34      	ldr	r3, [pc, #208]	; (8027e48 <HBAR_ModeController+0xe4>)
 8027d76:	f993 3000 	ldrsb.w	r3, [r3]
 8027d7a:	461a      	mov	r2, r3
 8027d7c:	687b      	ldr	r3, [r7, #4]
 8027d7e:	791b      	ldrb	r3, [r3, #4]
 8027d80:	429a      	cmp	r2, r3
 8027d82:	d00a      	beq.n	8027d9a <HBAR_ModeController+0x36>
            iName = runner->mode.val;
 8027d84:	687b      	ldr	r3, [r7, #4]
 8027d86:	791b      	ldrb	r3, [r3, #4]
 8027d88:	b25a      	sxtb	r2, r3
 8027d8a:	4b2f      	ldr	r3, [pc, #188]	; (8027e48 <HBAR_ModeController+0xe4>)
 8027d8c:	701a      	strb	r2, [r3, #0]
            // reset period tick
            tickPeriod = _GetTickMS();
 8027d8e:	f017 fca0 	bl	803f6d2 <_GetTickMS>
 8027d92:	4602      	mov	r2, r0
 8027d94:	4b2d      	ldr	r3, [pc, #180]	; (8027e4c <HBAR_ModeController+0xe8>)
 8027d96:	601a      	str	r2, [r3, #0]
 8027d98:	e019      	b.n	8027dce <HBAR_ModeController+0x6a>

        } else if (iValue != runner->mode.sub.val[runner->mode.val]) {
 8027d9a:	4b2d      	ldr	r3, [pc, #180]	; (8027e50 <HBAR_ModeController+0xec>)
 8027d9c:	f993 3000 	ldrsb.w	r3, [r3]
 8027da0:	461a      	mov	r2, r3
 8027da2:	687b      	ldr	r3, [r7, #4]
 8027da4:	791b      	ldrb	r3, [r3, #4]
 8027da6:	4619      	mov	r1, r3
 8027da8:	687b      	ldr	r3, [r7, #4]
 8027daa:	440b      	add	r3, r1
 8027dac:	7a1b      	ldrb	r3, [r3, #8]
 8027dae:	429a      	cmp	r2, r3
 8027db0:	d00d      	beq.n	8027dce <HBAR_ModeController+0x6a>
            iValue = runner->mode.sub.val[runner->mode.val];
 8027db2:	687b      	ldr	r3, [r7, #4]
 8027db4:	791b      	ldrb	r3, [r3, #4]
 8027db6:	461a      	mov	r2, r3
 8027db8:	687b      	ldr	r3, [r7, #4]
 8027dba:	4413      	add	r3, r2
 8027dbc:	7a1b      	ldrb	r3, [r3, #8]
 8027dbe:	b25a      	sxtb	r2, r3
 8027dc0:	4b23      	ldr	r3, [pc, #140]	; (8027e50 <HBAR_ModeController+0xec>)
 8027dc2:	701a      	strb	r2, [r3, #0]
            // reset period tick
            tickPeriod = _GetTickMS();
 8027dc4:	f017 fc85 	bl	803f6d2 <_GetTickMS>
 8027dc8:	4602      	mov	r2, r0
 8027dca:	4b20      	ldr	r3, [pc, #128]	; (8027e4c <HBAR_ModeController+0xe8>)
 8027dcc:	601a      	str	r2, [r3, #0]
        }

        if ((_GetTickMS() - tickPeriod) >= 5000 ||
 8027dce:	f017 fc80 	bl	803f6d2 <_GetTickMS>
 8027dd2:	4602      	mov	r2, r0
 8027dd4:	4b1d      	ldr	r3, [pc, #116]	; (8027e4c <HBAR_ModeController+0xe8>)
 8027dd6:	681b      	ldr	r3, [r3, #0]
 8027dd8:	1ad3      	subs	r3, r2, r3
 8027dda:	f241 3287 	movw	r2, #4999	; 0x1387
 8027dde:	4293      	cmp	r3, r2
 8027de0:	d803      	bhi.n	8027dea <HBAR_ModeController+0x86>
                (runner->mode.sub.val[SW_M_DRIVE] == SW_M_DRIVE_R)) {
 8027de2:	687b      	ldr	r3, [r7, #4]
 8027de4:	7a1b      	ldrb	r3, [r3, #8]
        if ((_GetTickMS() - tickPeriod) >= 5000 ||
 8027de6:	2b03      	cmp	r3, #3
 8027de8:	d10c      	bne.n	8027e04 <HBAR_ModeController+0xa0>
            // stop listening
            runner->listening = 0;
 8027dea:	687b      	ldr	r3, [r7, #4]
 8027dec:	2200      	movs	r2, #0
 8027dee:	701a      	strb	r2, [r3, #0]
            iHide = 0;
 8027df0:	4b18      	ldr	r3, [pc, #96]	; (8027e54 <HBAR_ModeController+0xf0>)
 8027df2:	2200      	movs	r2, #0
 8027df4:	701a      	strb	r2, [r3, #0]
            iName = -1;
 8027df6:	4b14      	ldr	r3, [pc, #80]	; (8027e48 <HBAR_ModeController+0xe4>)
 8027df8:	22ff      	movs	r2, #255	; 0xff
 8027dfa:	701a      	strb	r2, [r3, #0]
            iValue = -1;
 8027dfc:	4b14      	ldr	r3, [pc, #80]	; (8027e50 <HBAR_ModeController+0xec>)
 8027dfe:	22ff      	movs	r2, #255	; 0xff
 8027e00:	701a      	strb	r2, [r3, #0]
 8027e02:	e01a      	b.n	8027e3a <HBAR_ModeController+0xd6>
        } else {
            // blink
            if ((_GetTickMS() - tick) >= 250) {
 8027e04:	f017 fc65 	bl	803f6d2 <_GetTickMS>
 8027e08:	4602      	mov	r2, r0
 8027e0a:	4b13      	ldr	r3, [pc, #76]	; (8027e58 <HBAR_ModeController+0xf4>)
 8027e0c:	681b      	ldr	r3, [r3, #0]
 8027e0e:	1ad3      	subs	r3, r2, r3
 8027e10:	2bf9      	cmp	r3, #249	; 0xf9
 8027e12:	d912      	bls.n	8027e3a <HBAR_ModeController+0xd6>
                tick = _GetTickMS();
 8027e14:	f017 fc5d 	bl	803f6d2 <_GetTickMS>
 8027e18:	4602      	mov	r2, r0
 8027e1a:	4b0f      	ldr	r3, [pc, #60]	; (8027e58 <HBAR_ModeController+0xf4>)
 8027e1c:	601a      	str	r2, [r3, #0]
                iHide = !iHide;
 8027e1e:	4b0d      	ldr	r3, [pc, #52]	; (8027e54 <HBAR_ModeController+0xf0>)
 8027e20:	781b      	ldrb	r3, [r3, #0]
 8027e22:	2b00      	cmp	r3, #0
 8027e24:	bf0c      	ite	eq
 8027e26:	2301      	moveq	r3, #1
 8027e28:	2300      	movne	r3, #0
 8027e2a:	b2db      	uxtb	r3, r3
 8027e2c:	461a      	mov	r2, r3
 8027e2e:	4b09      	ldr	r3, [pc, #36]	; (8027e54 <HBAR_ModeController+0xf0>)
 8027e30:	701a      	strb	r2, [r3, #0]
 8027e32:	e002      	b.n	8027e3a <HBAR_ModeController+0xd6>
            }
        }
    } else {
        iHide = 0;
 8027e34:	4b07      	ldr	r3, [pc, #28]	; (8027e54 <HBAR_ModeController+0xf0>)
 8027e36:	2200      	movs	r2, #0
 8027e38:	701a      	strb	r2, [r3, #0]
    }

    return iHide;
 8027e3a:	4b06      	ldr	r3, [pc, #24]	; (8027e54 <HBAR_ModeController+0xf0>)
 8027e3c:	781b      	ldrb	r3, [r3, #0]
}
 8027e3e:	4618      	mov	r0, r3
 8027e40:	3708      	adds	r7, #8
 8027e42:	46bd      	mov	sp, r7
 8027e44:	bd80      	pop	{r7, pc}
 8027e46:	bf00      	nop
 8027e48:	2000010c 	.word	0x2000010c
 8027e4c:	20000f20 	.word	0x20000f20
 8027e50:	2000010d 	.word	0x2000010d
 8027e54:	20000f24 	.word	0x20000f24
 8027e58:	20000f28 	.word	0x20000f28

08027e5c <KLESS_Init>:
/* Private functions declaration ---------------------------------------------*/
static void lock(void);
static void unlock(void);

/* Public functions implementation --------------------------------------------*/
void KLESS_Init(void) {
 8027e5c:	b580      	push	{r7, lr}
 8027e5e:	b082      	sub	sp, #8
 8027e60:	af00      	add	r7, sp, #0
    nrf24l01_config *config = &(KLESS.config);
 8027e62:	4b24      	ldr	r3, [pc, #144]	; (8027ef4 <KLESS_Init+0x98>)
 8027e64:	607b      	str	r3, [r7, #4]

    // use VCU_ID as address
    memcpy(KLESS.tx.address, &(VCU.d.unit_id), sizeof(VCU.d.unit_id));
 8027e66:	4b24      	ldr	r3, [pc, #144]	; (8027ef8 <KLESS_Init+0x9c>)
 8027e68:	681b      	ldr	r3, [r3, #0]
 8027e6a:	4a22      	ldr	r2, [pc, #136]	; (8027ef4 <KLESS_Init+0x98>)
 8027e6c:	6353      	str	r3, [r2, #52]	; 0x34
    memcpy(KLESS.rx.address, &(VCU.d.unit_id), sizeof(VCU.d.unit_id));
 8027e6e:	4b22      	ldr	r3, [pc, #136]	; (8027ef8 <KLESS_Init+0x9c>)
 8027e70:	681b      	ldr	r3, [r3, #0]
 8027e72:	4a20      	ldr	r2, [pc, #128]	; (8027ef4 <KLESS_Init+0x98>)
 8027e74:	f8c2 304e 	str.w	r3, [r2, #78]	; 0x4e

    // set configuration
    config->tx_address = KLESS.tx.address;
 8027e78:	687b      	ldr	r3, [r7, #4]
 8027e7a:	4a20      	ldr	r2, [pc, #128]	; (8027efc <KLESS_Init+0xa0>)
 8027e7c:	60da      	str	r2, [r3, #12]
    config->rx_address = KLESS.rx.address;
 8027e7e:	687b      	ldr	r3, [r7, #4]
 8027e80:	4a1f      	ldr	r2, [pc, #124]	; (8027f00 <KLESS_Init+0xa4>)
 8027e82:	609a      	str	r2, [r3, #8]
    config->rx_buffer = KLESS.rx.payload;
 8027e84:	687b      	ldr	r3, [r7, #4]
 8027e86:	4a1f      	ldr	r2, [pc, #124]	; (8027f04 <KLESS_Init+0xa8>)
 8027e88:	611a      	str	r2, [r3, #16]

    config->data_rate = NRF_DATA_RATE_250KBPS;
 8027e8a:	687b      	ldr	r3, [r7, #4]
 8027e8c:	2201      	movs	r2, #1
 8027e8e:	701a      	strb	r2, [r3, #0]
    config->tx_power = NRF_TX_PWR_0dBm;
 8027e90:	687b      	ldr	r3, [r7, #4]
 8027e92:	2203      	movs	r2, #3
 8027e94:	705a      	strb	r2, [r3, #1]
    config->crc_width = NRF_CRC_WIDTH_1B;
 8027e96:	687b      	ldr	r3, [r7, #4]
 8027e98:	2200      	movs	r2, #0
 8027e9a:	709a      	strb	r2, [r3, #2]
    config->retransmit_count = 0x0F;   // maximum is 15 times
 8027e9c:	687b      	ldr	r3, [r7, #4]
 8027e9e:	220f      	movs	r2, #15
 8027ea0:	715a      	strb	r2, [r3, #5]
    config->retransmit_delay = 0x0F; // 4000us, LSB:250us
 8027ea2:	687b      	ldr	r3, [r7, #4]
 8027ea4:	220f      	movs	r2, #15
 8027ea6:	719a      	strb	r2, [r3, #6]
    config->rf_channel = 110;
 8027ea8:	687b      	ldr	r3, [r7, #4]
 8027eaa:	226e      	movs	r2, #110	; 0x6e
 8027eac:	71da      	strb	r2, [r3, #7]

    config->spi = &hspi1;
 8027eae:	687b      	ldr	r3, [r7, #4]
 8027eb0:	4a15      	ldr	r2, [pc, #84]	; (8027f08 <KLESS_Init+0xac>)
 8027eb2:	615a      	str	r2, [r3, #20]
    config->spi_timeout = 100; // milliseconds
 8027eb4:	687b      	ldr	r3, [r7, #4]
 8027eb6:	2264      	movs	r2, #100	; 0x64
 8027eb8:	619a      	str	r2, [r3, #24]
    config->csn_port = INT_KEYLESS_CSN_GPIO_Port;
 8027eba:	687b      	ldr	r3, [r7, #4]
 8027ebc:	4a13      	ldr	r2, [pc, #76]	; (8027f0c <KLESS_Init+0xb0>)
 8027ebe:	61da      	str	r2, [r3, #28]
    config->csn_pin = INT_KEYLESS_CSN_Pin;
 8027ec0:	687b      	ldr	r3, [r7, #4]
 8027ec2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8027ec6:	841a      	strh	r2, [r3, #32]
    config->ce_port = INT_KEYLESS_CE_GPIO_Port;
 8027ec8:	687b      	ldr	r3, [r7, #4]
 8027eca:	4a11      	ldr	r2, [pc, #68]	; (8027f10 <KLESS_Init+0xb4>)
 8027ecc:	625a      	str	r2, [r3, #36]	; 0x24
    config->ce_pin = INT_KEYLESS_CE_Pin;
 8027ece:	687b      	ldr	r3, [r7, #4]
 8027ed0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8027ed4:	851a      	strh	r2, [r3, #40]	; 0x28
    config->irq_port = INT_KEYLESS_IRQ_GPIO_Port;
 8027ed6:	687b      	ldr	r3, [r7, #4]
 8027ed8:	4a0e      	ldr	r2, [pc, #56]	; (8027f14 <KLESS_Init+0xb8>)
 8027eda:	62da      	str	r2, [r3, #44]	; 0x2c
    config->irq_pin = INT_KEYLESS_IRQ_Pin;
 8027edc:	687b      	ldr	r3, [r7, #4]
 8027ede:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8027ee2:	861a      	strh	r2, [r3, #48]	; 0x30

    // initialization
    nrf_init(&nrf, config);
 8027ee4:	6879      	ldr	r1, [r7, #4]
 8027ee6:	480c      	ldr	r0, [pc, #48]	; (8027f18 <KLESS_Init+0xbc>)
 8027ee8:	f7fd fc36 	bl	8025758 <nrf_init>
}
 8027eec:	bf00      	nop
 8027eee:	3708      	adds	r7, #8
 8027ef0:	46bd      	mov	sp, r7
 8027ef2:	bd80      	pop	{r7, pc}
 8027ef4:	20000110 	.word	0x20000110
 8027ef8:	20000228 	.word	0x20000228
 8027efc:	20000144 	.word	0x20000144
 8027f00:	2000015e 	.word	0x2000015e
 8027f04:	20000163 	.word	0x20000163
 8027f08:	200088d8 	.word	0x200088d8
 8027f0c:	40020000 	.word	0x40020000
 8027f10:	40020800 	.word	0x40020800
 8027f14:	40021000 	.word	0x40021000
 8027f18:	20008414 	.word	0x20008414

08027f1c <KLESS_ValidateCommand>:

uint8_t KLESS_ValidateCommand(KLESS_CMD *cmd) {
 8027f1c:	b580      	push	{r7, lr}
 8027f1e:	b088      	sub	sp, #32
 8027f20:	af00      	add	r7, sp, #0
 8027f22:	6078      	str	r0, [r7, #4]
    uint8_t valid, payload_dec[NRF_DATA_LENGTH];

    lock();
 8027f24:	f000 f946 	bl	80281b4 <lock>
    // Read Payload
    valid = KLESS_Payload(KLESS_R, payload_dec);
 8027f28:	f107 030c 	add.w	r3, r7, #12
 8027f2c:	4619      	mov	r1, r3
 8027f2e:	2000      	movs	r0, #0
 8027f30:	f000 f82c 	bl	8027f8c <KLESS_Payload>
 8027f34:	4603      	mov	r3, r0
 8027f36:	77fb      	strb	r3, [r7, #31]

    // Get Payload position
    if (valid) {
 8027f38:	7ffb      	ldrb	r3, [r7, #31]
 8027f3a:	2b00      	cmp	r3, #0
 8027f3c:	d01d      	beq.n	8027f7a <KLESS_ValidateCommand+0x5e>
        valid = 0;
 8027f3e:	2300      	movs	r3, #0
 8027f40:	77fb      	strb	r3, [r7, #31]
        // Check Payload Command
        for (uint8_t i = 0; i < 3; i++) {
 8027f42:	2300      	movs	r3, #0
 8027f44:	77bb      	strb	r3, [r7, #30]
 8027f46:	e015      	b.n	8027f74 <KLESS_ValidateCommand+0x58>
            // check command
            if (memcmp(payload_dec, &commands[i], 8) == 0) {
 8027f48:	7fbb      	ldrb	r3, [r7, #30]
 8027f4a:	00db      	lsls	r3, r3, #3
 8027f4c:	4a0e      	ldr	r2, [pc, #56]	; (8027f88 <KLESS_ValidateCommand+0x6c>)
 8027f4e:	1899      	adds	r1, r3, r2
 8027f50:	f107 030c 	add.w	r3, r7, #12
 8027f54:	2208      	movs	r2, #8
 8027f56:	4618      	mov	r0, r3
 8027f58:	f017 fcc0 	bl	803f8dc <memcmp>
 8027f5c:	4603      	mov	r3, r0
 8027f5e:	2b00      	cmp	r3, #0
 8027f60:	d105      	bne.n	8027f6e <KLESS_ValidateCommand+0x52>
                *cmd = i;
 8027f62:	687b      	ldr	r3, [r7, #4]
 8027f64:	7fba      	ldrb	r2, [r7, #30]
 8027f66:	701a      	strb	r2, [r3, #0]
                valid = 1;
 8027f68:	2301      	movs	r3, #1
 8027f6a:	77fb      	strb	r3, [r7, #31]
                break;
 8027f6c:	e005      	b.n	8027f7a <KLESS_ValidateCommand+0x5e>
        for (uint8_t i = 0; i < 3; i++) {
 8027f6e:	7fbb      	ldrb	r3, [r7, #30]
 8027f70:	3301      	adds	r3, #1
 8027f72:	77bb      	strb	r3, [r7, #30]
 8027f74:	7fbb      	ldrb	r3, [r7, #30]
 8027f76:	2b02      	cmp	r3, #2
 8027f78:	d9e6      	bls.n	8027f48 <KLESS_ValidateCommand+0x2c>
            }
        }

    }
    unlock();
 8027f7a:	f000 f929 	bl	80281d0 <unlock>

    return valid;
 8027f7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8027f80:	4618      	mov	r0, r3
 8027f82:	3720      	adds	r7, #32
 8027f84:	46bd      	mov	sp, r7
 8027f86:	bd80      	pop	{r7, pc}
 8027f88:	08055f04 	.word	0x08055f04

08027f8c <KLESS_Payload>:

uint8_t KLESS_Payload(KLESS_MODE mode, uint8_t *payload) {
 8027f8c:	b580      	push	{r7, lr}
 8027f8e:	b084      	sub	sp, #16
 8027f90:	af00      	add	r7, sp, #0
 8027f92:	4603      	mov	r3, r0
 8027f94:	6039      	str	r1, [r7, #0]
 8027f96:	71fb      	strb	r3, [r7, #7]
    uint8_t ret = 0;
 8027f98:	2300      	movs	r3, #0
 8027f9a:	73fb      	strb	r3, [r7, #15]

    lock();
 8027f9c:	f000 f90a 	bl	80281b4 <lock>
    // Process Payload
    if (mode == KLESS_R) {
 8027fa0:	79fb      	ldrb	r3, [r7, #7]
 8027fa2:	2b00      	cmp	r3, #0
 8027fa4:	d10a      	bne.n	8027fbc <KLESS_Payload+0x30>
        // Decrypt
        if (AES_Decrypt(payload, KLESS.rx.payload, NRF_DATA_LENGTH)) {
 8027fa6:	2210      	movs	r2, #16
 8027fa8:	490d      	ldr	r1, [pc, #52]	; (8027fe0 <KLESS_Payload+0x54>)
 8027faa:	6838      	ldr	r0, [r7, #0]
 8027fac:	f7fb fcd8 	bl	8023960 <AES_Decrypt>
 8027fb0:	4603      	mov	r3, r0
 8027fb2:	2b00      	cmp	r3, #0
 8027fb4:	d00c      	beq.n	8027fd0 <KLESS_Payload+0x44>
            ret = 1;
 8027fb6:	2301      	movs	r3, #1
 8027fb8:	73fb      	strb	r3, [r7, #15]
 8027fba:	e009      	b.n	8027fd0 <KLESS_Payload+0x44>
        }
    } else {
        // Encrypt
        if (AES_Encrypt(KLESS.tx.payload, payload, NRF_DATA_LENGTH)) {
 8027fbc:	2210      	movs	r2, #16
 8027fbe:	6839      	ldr	r1, [r7, #0]
 8027fc0:	4808      	ldr	r0, [pc, #32]	; (8027fe4 <KLESS_Payload+0x58>)
 8027fc2:	f7fb fcab 	bl	802391c <AES_Encrypt>
 8027fc6:	4603      	mov	r3, r0
 8027fc8:	2b00      	cmp	r3, #0
 8027fca:	d001      	beq.n	8027fd0 <KLESS_Payload+0x44>
            ret = 1;
 8027fcc:	2301      	movs	r3, #1
 8027fce:	73fb      	strb	r3, [r7, #15]
        }
    }
    unlock();
 8027fd0:	f000 f8fe 	bl	80281d0 <unlock>

    return ret;
 8027fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8027fd6:	4618      	mov	r0, r3
 8027fd8:	3710      	adds	r7, #16
 8027fda:	46bd      	mov	sp, r7
 8027fdc:	bd80      	pop	{r7, pc}
 8027fde:	bf00      	nop
 8027fe0:	20000163 	.word	0x20000163
 8027fe4:	20000149 	.word	0x20000149

08027fe8 <KLESS_GenerateAesKey>:

void KLESS_GenerateAesKey(uint32_t *payload) {
 8027fe8:	b580      	push	{r7, lr}
 8027fea:	b084      	sub	sp, #16
 8027fec:	af00      	add	r7, sp, #0
 8027fee:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < (NRF_DATA_LENGTH / sizeof(uint32_t)); i++) {
 8027ff0:	2300      	movs	r3, #0
 8027ff2:	73fb      	strb	r3, [r7, #15]
 8027ff4:	e009      	b.n	802800a <KLESS_GenerateAesKey+0x22>
        HAL_RNG_GenerateRandomNumber(&hrng, payload++);
 8027ff6:	687b      	ldr	r3, [r7, #4]
 8027ff8:	1d1a      	adds	r2, r3, #4
 8027ffa:	607a      	str	r2, [r7, #4]
 8027ffc:	4619      	mov	r1, r3
 8027ffe:	4806      	ldr	r0, [pc, #24]	; (8028018 <KLESS_GenerateAesKey+0x30>)
 8028000:	f00c ff0e 	bl	8034e20 <HAL_RNG_GenerateRandomNumber>
    for (uint8_t i = 0; i < (NRF_DATA_LENGTH / sizeof(uint32_t)); i++) {
 8028004:	7bfb      	ldrb	r3, [r7, #15]
 8028006:	3301      	adds	r3, #1
 8028008:	73fb      	strb	r3, [r7, #15]
 802800a:	7bfb      	ldrb	r3, [r7, #15]
 802800c:	2b03      	cmp	r3, #3
 802800e:	d9f2      	bls.n	8027ff6 <KLESS_GenerateAesKey+0xe>
    }
}
 8028010:	bf00      	nop
 8028012:	3710      	adds	r7, #16
 8028014:	46bd      	mov	sp, r7
 8028016:	bd80      	pop	{r7, pc}
 8028018:	20008878 	.word	0x20008878

0802801c <KLESS_Pairing>:

uint8_t KLESS_Pairing(void) {
 802801c:	b580      	push	{r7, lr}
 802801e:	b088      	sub	sp, #32
 8028020:	af00      	add	r7, sp, #0
    uint8_t *payload = KLESS.tx.payload;
 8028022:	4b36      	ldr	r3, [pc, #216]	; (80280fc <KLESS_Pairing+0xe0>)
 8028024:	61bb      	str	r3, [r7, #24]
    uint32_t aes[4], swapped;
    NRF_RESULT p = NRF_ERROR;
 8028026:	2301      	movs	r3, #1
 8028028:	75fb      	strb	r3, [r7, #23]

    // Insert AES Key
    KLESS_GenerateAesKey(aes);
 802802a:	1d3b      	adds	r3, r7, #4
 802802c:	4618      	mov	r0, r3
 802802e:	f7ff ffdb 	bl	8027fe8 <KLESS_GenerateAesKey>
    // swap byte order
    for (uint8_t i = 0; i < 4; i++) {
 8028032:	2300      	movs	r3, #0
 8028034:	77fb      	strb	r3, [r7, #31]
 8028036:	e015      	b.n	8028064 <KLESS_Pairing+0x48>
        swapped = _ByteSwap32(aes[i]);
 8028038:	7ffb      	ldrb	r3, [r7, #31]
 802803a:	009b      	lsls	r3, r3, #2
 802803c:	f107 0220 	add.w	r2, r7, #32
 8028040:	4413      	add	r3, r2
 8028042:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8028046:	4618      	mov	r0, r3
 8028048:	f017 fb7a 	bl	803f740 <_ByteSwap32>
 802804c:	4603      	mov	r3, r0
 802804e:	603b      	str	r3, [r7, #0]
        memcpy(&payload[i * 4], &swapped, sizeof(swapped));
 8028050:	7ffb      	ldrb	r3, [r7, #31]
 8028052:	009b      	lsls	r3, r3, #2
 8028054:	461a      	mov	r2, r3
 8028056:	69bb      	ldr	r3, [r7, #24]
 8028058:	4413      	add	r3, r2
 802805a:	683a      	ldr	r2, [r7, #0]
 802805c:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++) {
 802805e:	7ffb      	ldrb	r3, [r7, #31]
 8028060:	3301      	adds	r3, #1
 8028062:	77fb      	strb	r3, [r7, #31]
 8028064:	7ffb      	ldrb	r3, [r7, #31]
 8028066:	2b03      	cmp	r3, #3
 8028068:	d9e6      	bls.n	8028038 <KLESS_Pairing+0x1c>
    }
    // Insert VCU_ID
    memcpy(&payload[NRF_DATA_LENGTH], KLESS.tx.address, NRF_ADDR_LENGTH);
 802806a:	69bb      	ldr	r3, [r7, #24]
 802806c:	f103 0210 	add.w	r2, r3, #16
 8028070:	4b23      	ldr	r3, [pc, #140]	; (8028100 <KLESS_Pairing+0xe4>)
 8028072:	3334      	adds	r3, #52	; 0x34
 8028074:	6818      	ldr	r0, [r3, #0]
 8028076:	6010      	str	r0, [r2, #0]
 8028078:	791b      	ldrb	r3, [r3, #4]
 802807a:	7113      	strb	r3, [r2, #4]

    // Set Address (pairing mode)
    memset(KLESS.tx.address, 0x00, sizeof(VCU.d.unit_id));
 802807c:	2204      	movs	r2, #4
 802807e:	2100      	movs	r1, #0
 8028080:	4820      	ldr	r0, [pc, #128]	; (8028104 <KLESS_Pairing+0xe8>)
 8028082:	f017 fc45 	bl	803f910 <memset>
    memset(KLESS.rx.address, 0x00, sizeof(VCU.d.unit_id));
 8028086:	2204      	movs	r2, #4
 8028088:	2100      	movs	r1, #0
 802808a:	481f      	ldr	r0, [pc, #124]	; (8028108 <KLESS_Pairing+0xec>)
 802808c:	f017 fc40 	bl	803f910 <memset>

    // Set NRF Config (pairing mode)
    ce_reset(&nrf);
 8028090:	481e      	ldr	r0, [pc, #120]	; (802810c <KLESS_Pairing+0xf0>)
 8028092:	f7fd fb50 	bl	8025736 <ce_reset>
    nrf_set_tx_address(&nrf, KLESS.tx.address);
 8028096:	491b      	ldr	r1, [pc, #108]	; (8028104 <KLESS_Pairing+0xe8>)
 8028098:	481c      	ldr	r0, [pc, #112]	; (802810c <KLESS_Pairing+0xf0>)
 802809a:	f7fe f9b1 	bl	8026400 <nrf_set_tx_address>
    nrf_set_rx_address_p0(&nrf, KLESS.rx.address);
 802809e:	491a      	ldr	r1, [pc, #104]	; (8028108 <KLESS_Pairing+0xec>)
 80280a0:	481a      	ldr	r0, [pc, #104]	; (802810c <KLESS_Pairing+0xf0>)
 80280a2:	f7fe f991 	bl	80263c8 <nrf_set_rx_address_p0>
    nrf_set_rx_payload_width_p0(&nrf, NRF_DATA_PAIR_LENGTH);
 80280a6:	2115      	movs	r1, #21
 80280a8:	4818      	ldr	r0, [pc, #96]	; (802810c <KLESS_Pairing+0xf0>)
 80280aa:	f7fe f9c5 	bl	8026438 <nrf_set_rx_payload_width_p0>
    ce_set(&nrf);
 80280ae:	4817      	ldr	r0, [pc, #92]	; (802810c <KLESS_Pairing+0xf0>)
 80280b0:	f7fd fb31 	bl	8025716 <ce_set>

    // Send Payload
    p = nrf_send_packet(&nrf, payload);
 80280b4:	69b9      	ldr	r1, [r7, #24]
 80280b6:	4815      	ldr	r0, [pc, #84]	; (802810c <KLESS_Pairing+0xf0>)
 80280b8:	f7fe f9df 	bl	802647a <nrf_send_packet>
 80280bc:	4603      	mov	r3, r0
 80280be:	75fb      	strb	r3, [r7, #23]
    _DelayMS(100);
 80280c0:	2064      	movs	r0, #100	; 0x64
 80280c2:	f017 fafb 	bl	803f6bc <_DelayMS>

    // Set Address (normal mode)
    memcpy(KLESS.tx.address, &(VCU.d.unit_id), sizeof(VCU.d.unit_id));
 80280c6:	4b12      	ldr	r3, [pc, #72]	; (8028110 <KLESS_Pairing+0xf4>)
 80280c8:	681b      	ldr	r3, [r3, #0]
 80280ca:	4a0d      	ldr	r2, [pc, #52]	; (8028100 <KLESS_Pairing+0xe4>)
 80280cc:	6353      	str	r3, [r2, #52]	; 0x34
    memcpy(KLESS.rx.address, &(VCU.d.unit_id), sizeof(VCU.d.unit_id));
 80280ce:	4b10      	ldr	r3, [pc, #64]	; (8028110 <KLESS_Pairing+0xf4>)
 80280d0:	681b      	ldr	r3, [r3, #0]
 80280d2:	4a0b      	ldr	r2, [pc, #44]	; (8028100 <KLESS_Pairing+0xe4>)
 80280d4:	f8c2 304e 	str.w	r3, [r2, #78]	; 0x4e
    // Set Aes Key (new)
    EEPROM_AesKey(EE_CMD_W, aes);
 80280d8:	1d3b      	adds	r3, r7, #4
 80280da:	4619      	mov	r1, r3
 80280dc:	2001      	movs	r0, #1
 80280de:	f016 fb01 	bl	803e6e4 <EEPROM_AesKey>

    // Set NRF Config (normal mode)
    KLESS_Init();
 80280e2:	f7ff febb 	bl	8027e5c <KLESS_Init>

    return (p == NRF_OK);
 80280e6:	7dfb      	ldrb	r3, [r7, #23]
 80280e8:	2b00      	cmp	r3, #0
 80280ea:	bf0c      	ite	eq
 80280ec:	2301      	moveq	r3, #1
 80280ee:	2300      	movne	r3, #0
 80280f0:	b2db      	uxtb	r3, r3
}
 80280f2:	4618      	mov	r0, r3
 80280f4:	3720      	adds	r7, #32
 80280f6:	46bd      	mov	sp, r7
 80280f8:	bd80      	pop	{r7, pc}
 80280fa:	bf00      	nop
 80280fc:	20000149 	.word	0x20000149
 8028100:	20000110 	.word	0x20000110
 8028104:	20000144 	.word	0x20000144
 8028108:	2000015e 	.word	0x2000015e
 802810c:	20008414 	.word	0x20008414
 8028110:	20000228 	.word	0x20000228

08028114 <KLESS_Debugger>:
    LOG_Enter();

    return (p == NRF_OK);
}

void KLESS_Debugger(void) {
 8028114:	b580      	push	{r7, lr}
 8028116:	af00      	add	r7, sp, #0
    lock();
 8028118:	f000 f84c 	bl	80281b4 <lock>
    LOG_Str("NRF:Receive = ");
 802811c:	4806      	ldr	r0, [pc, #24]	; (8028138 <KLESS_Debugger+0x24>)
 802811e:	f016 f911 	bl	803e344 <LOG_Str>
    LOG_BufHex((char*) KLESS.rx.payload, NRF_DATA_LENGTH);
 8028122:	2110      	movs	r1, #16
 8028124:	4805      	ldr	r0, [pc, #20]	; (802813c <KLESS_Debugger+0x28>)
 8028126:	f016 f95f 	bl	803e3e8 <LOG_BufHex>
    LOG_Enter();
 802812a:	f016 f891 	bl	803e250 <LOG_Enter>
    unlock();
 802812e:	f000 f84f 	bl	80281d0 <unlock>
}
 8028132:	bf00      	nop
 8028134:	bd80      	pop	{r7, pc}
 8028136:	bf00      	nop
 8028138:	0804374c 	.word	0x0804374c
 802813c:	20000163 	.word	0x20000163

08028140 <KLESS_Refresh>:

void KLESS_Refresh(void) {
 8028140:	b580      	push	{r7, lr}
 8028142:	af00      	add	r7, sp, #0
    if ((_GetTickMS() - VCU.d.tick.keyless) < KEYLESS_TIMEOUT) {
 8028144:	f017 fac5 	bl	803f6d2 <_GetTickMS>
 8028148:	4602      	mov	r2, r0
 802814a:	4b08      	ldr	r3, [pc, #32]	; (802816c <KLESS_Refresh+0x2c>)
 802814c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802814e:	1ad3      	subs	r3, r2, r3
 8028150:	f241 3287 	movw	r2, #4999	; 0x1387
 8028154:	4293      	cmp	r3, r2
 8028156:	d803      	bhi.n	8028160 <KLESS_Refresh+0x20>
        HMI1.d.status.keyless = 1;
 8028158:	4b05      	ldr	r3, [pc, #20]	; (8028170 <KLESS_Refresh+0x30>)
 802815a:	2201      	movs	r2, #1
 802815c:	715a      	strb	r2, [r3, #5]
    } else {
        HMI1.d.status.keyless = 0;
    }
}
 802815e:	e002      	b.n	8028166 <KLESS_Refresh+0x26>
        HMI1.d.status.keyless = 0;
 8028160:	4b03      	ldr	r3, [pc, #12]	; (8028170 <KLESS_Refresh+0x30>)
 8028162:	2200      	movs	r2, #0
 8028164:	715a      	strb	r2, [r3, #5]
}
 8028166:	bf00      	nop
 8028168:	bd80      	pop	{r7, pc}
 802816a:	bf00      	nop
 802816c:	20000228 	.word	0x20000228
 8028170:	200001e4 	.word	0x200001e4

08028174 <KLESS_IrqHandler>:

void KLESS_IrqHandler(void) {
 8028174:	b580      	push	{r7, lr}
 8028176:	af00      	add	r7, sp, #0
    nrf_irq_handler(&nrf);
 8028178:	4802      	ldr	r0, [pc, #8]	; (8028184 <KLESS_IrqHandler+0x10>)
 802817a:	f7fe f9b1 	bl	80264e0 <nrf_irq_handler>
}
 802817e:	bf00      	nop
 8028180:	bd80      	pop	{r7, pc}
 8028182:	bf00      	nop
 8028184:	20008414 	.word	0x20008414

08028188 <nrf_packet_received_callback>:

void nrf_packet_received_callback(nrf24l01 *dev, uint8_t *data) {
 8028188:	b580      	push	{r7, lr}
 802818a:	b082      	sub	sp, #8
 802818c:	af00      	add	r7, sp, #0
 802818e:	6078      	str	r0, [r7, #4]
 8028190:	6039      	str	r1, [r7, #0]
    // used in favor of nrf_receive_packet
    dev->rx_busy = 0;
 8028192:	687b      	ldr	r3, [r7, #4]
 8028194:	2200      	movs	r2, #0
 8028196:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

    osThreadFlagsSet(KeylessTaskHandle, EVT_KEYLESS_RX_IT);
 802819a:	4b05      	ldr	r3, [pc, #20]	; (80281b0 <nrf_packet_received_callback+0x28>)
 802819c:	681b      	ldr	r3, [r3, #0]
 802819e:	2101      	movs	r1, #1
 80281a0:	4618      	mov	r0, r3
 80281a2:	f00f fae5 	bl	8037770 <osThreadFlagsSet>
}
 80281a6:	bf00      	nop
 80281a8:	3708      	adds	r7, #8
 80281aa:	46bd      	mov	sp, r7
 80281ac:	bd80      	pop	{r7, pc}
 80281ae:	bf00      	nop
 80281b0:	20008680 	.word	0x20008680

080281b4 <lock>:

/* Private functions implementation --------------------------------------------*/
static void lock(void) {
 80281b4:	b580      	push	{r7, lr}
 80281b6:	af00      	add	r7, sp, #0
    osMutexAcquire(KlessRecMutexHandle, osWaitForever);
 80281b8:	4b04      	ldr	r3, [pc, #16]	; (80281cc <lock+0x18>)
 80281ba:	681b      	ldr	r3, [r3, #0]
 80281bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80281c0:	4618      	mov	r0, r3
 80281c2:	f00f fe43 	bl	8037e4c <osMutexAcquire>
}
 80281c6:	bf00      	nop
 80281c8:	bd80      	pop	{r7, pc}
 80281ca:	bf00      	nop
 80281cc:	200086fc 	.word	0x200086fc

080281d0 <unlock>:

static void unlock(void) {
 80281d0:	b580      	push	{r7, lr}
 80281d2:	af00      	add	r7, sp, #0
    osMutexRelease(KlessRecMutexHandle);
 80281d4:	4b03      	ldr	r3, [pc, #12]	; (80281e4 <unlock+0x14>)
 80281d6:	681b      	ldr	r3, [r3, #0]
 80281d8:	4618      	mov	r0, r3
 80281da:	f00f fe95 	bl	8037f08 <osMutexRelease>
}
 80281de:	bf00      	nop
 80281e0:	bd80      	pop	{r7, pc}
 80281e2:	bf00      	nop
 80281e4:	200086fc 	.word	0x200086fc

080281e8 <Report_Init>:
extern sw_t SW;
extern sim_t SIM;
extern uint16_t BACKUP_VOLTAGE;

/* Public functions implementation --------------------------------------------*/
void Report_Init(FRAME_TYPE frame, report_t *report) {
 80281e8:	b580      	push	{r7, lr}
 80281ea:	b082      	sub	sp, #8
 80281ec:	af00      	add	r7, sp, #0
 80281ee:	4603      	mov	r3, r0
 80281f0:	6039      	str	r1, [r7, #0]
 80281f2:	71fb      	strb	r3, [r7, #7]
    // set default data
    LOG_StrLn("Reporter:ReportInit");
 80281f4:	4808      	ldr	r0, [pc, #32]	; (8028218 <Report_Init+0x30>)
 80281f6:	f016 f8bd 	bl	803e374 <LOG_StrLn>
    // =============== REPORT ==============
    // header report
    report->header.prefix[0] = PREFIX_REPORT[1];
 80281fa:	2252      	movs	r2, #82	; 0x52
 80281fc:	683b      	ldr	r3, [r7, #0]
 80281fe:	701a      	strb	r2, [r3, #0]
    report->header.prefix[1] = PREFIX_REPORT[0];
 8028200:	2240      	movs	r2, #64	; 0x40
 8028202:	683b      	ldr	r3, [r7, #0]
 8028204:	705a      	strb	r2, [r3, #1]
    report->header.seq_id = VCU.d.seq_id.report;
 8028206:	4b05      	ldr	r3, [pc, #20]	; (802821c <Report_Init+0x34>)
 8028208:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 802820c:	683b      	ldr	r3, [r7, #0]
 802820e:	819a      	strh	r2, [r3, #12]
    // (already set)
    // body required
    // body optional
}
 8028210:	bf00      	nop
 8028212:	3708      	adds	r7, #8
 8028214:	46bd      	mov	sp, r7
 8028216:	bd80      	pop	{r7, pc}
 8028218:	0804375c 	.word	0x0804375c
 802821c:	20000228 	.word	0x20000228

08028220 <Response_Init>:

void Response_Init(response_t *response) {
 8028220:	b580      	push	{r7, lr}
 8028222:	b082      	sub	sp, #8
 8028224:	af00      	add	r7, sp, #0
 8028226:	6078      	str	r0, [r7, #4]
    // set default data
    LOG_StrLn("Reporter:ResponseInit");
 8028228:	4808      	ldr	r0, [pc, #32]	; (802824c <Response_Init+0x2c>)
 802822a:	f016 f8a3 	bl	803e374 <LOG_StrLn>
    // =============== REPORT ==============
    // header report
    response->header.prefix[0] = PREFIX_REPORT[1];
 802822e:	2252      	movs	r2, #82	; 0x52
 8028230:	687b      	ldr	r3, [r7, #4]
 8028232:	701a      	strb	r2, [r3, #0]
    response->header.prefix[1] = PREFIX_REPORT[0];
 8028234:	2240      	movs	r2, #64	; 0x40
 8028236:	687b      	ldr	r3, [r7, #4]
 8028238:	705a      	strb	r2, [r3, #1]
    response->header.seq_id = VCU.d.seq_id.response;
 802823a:	4b05      	ldr	r3, [pc, #20]	; (8028250 <Response_Init+0x30>)
 802823c:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8028240:	687b      	ldr	r3, [r7, #4]
 8028242:	819a      	strh	r2, [r3, #12]
}
 8028244:	bf00      	nop
 8028246:	3708      	adds	r7, #8
 8028248:	46bd      	mov	sp, r7
 802824a:	bd80      	pop	{r7, pc}
 802824c:	08043770 	.word	0x08043770
 8028250:	20000228 	.word	0x20000228

08028254 <Report_Capture>:

void Report_Capture(FRAME_TYPE frame, report_t *report) {
 8028254:	b590      	push	{r4, r7, lr}
 8028256:	b087      	sub	sp, #28
 8028258:	af00      	add	r7, sp, #0
 802825a:	4603      	mov	r3, r0
 802825c:	60b9      	str	r1, [r7, #8]
 802825e:	73fb      	strb	r3, [r7, #15]
    sw_sub_t *pSub = &(SW.runner.mode.sub);
 8028260:	4b9a      	ldr	r3, [pc, #616]	; (80284cc <Report_Capture+0x278>)
 8028262:	613b      	str	r3, [r7, #16]

    // Reconstruct the header
    report->header.seq_id++;
 8028264:	68bb      	ldr	r3, [r7, #8]
 8028266:	899b      	ldrh	r3, [r3, #12]
 8028268:	b29b      	uxth	r3, r3
 802826a:	3301      	adds	r3, #1
 802826c:	b29a      	uxth	r2, r3
 802826e:	68bb      	ldr	r3, [r7, #8]
 8028270:	819a      	strh	r2, [r3, #12]
    report->header.unit_id = VCU.d.unit_id;
 8028272:	4b97      	ldr	r3, [pc, #604]	; (80284d0 <Report_Capture+0x27c>)
 8028274:	681a      	ldr	r2, [r3, #0]
 8028276:	68bb      	ldr	r3, [r7, #8]
 8028278:	609a      	str	r2, [r3, #8]
    report->header.frame_id = frame;
 802827a:	68bb      	ldr	r3, [r7, #8]
 802827c:	7bfa      	ldrb	r2, [r7, #15]
 802827e:	71da      	strb	r2, [r3, #7]
    report->header.size = sizeof(report->header.frame_id) +
 8028280:	68bb      	ldr	r3, [r7, #8]
 8028282:	2230      	movs	r2, #48	; 0x30
 8028284:	719a      	strb	r2, [r3, #6]
            sizeof(report->header.unit_id) +
            sizeof(report->header.seq_id) +
            sizeof(report->data.req);

    // Reconstruct the body
    report->data.req.vcu.driver_id = VCU.d.driver_id;
 8028286:	4b92      	ldr	r3, [pc, #584]	; (80284d0 <Report_Capture+0x27c>)
 8028288:	791a      	ldrb	r2, [r3, #4]
 802828a:	68bb      	ldr	r3, [r7, #8]
 802828c:	779a      	strb	r2, [r3, #30]
    report->data.req.vcu.events_group = VCU.d.events;
 802828e:	4b90      	ldr	r3, [pc, #576]	; (80284d0 <Report_Capture+0x27c>)
 8028290:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8028294:	68ba      	ldr	r2, [r7, #8]
 8028296:	321f      	adds	r2, #31
 8028298:	6013      	str	r3, [r2, #0]
 802829a:	6054      	str	r4, [r2, #4]
    report->data.req.vcu.rtc.log = RTC_Read();
 802829c:	f7fe faec 	bl	8026878 <RTC_Read>
 80282a0:	4603      	mov	r3, r0
 80282a2:	460c      	mov	r4, r1
 80282a4:	68ba      	ldr	r2, [r7, #8]
 80282a6:	3216      	adds	r2, #22
 80282a8:	6013      	str	r3, [r2, #0]
 80282aa:	6054      	str	r4, [r2, #4]
    // BMS data
    for (uint8_t i = 0; i < BMS_COUNT; i++) {
 80282ac:	2300      	movs	r3, #0
 80282ae:	75fb      	strb	r3, [r7, #23]
 80282b0:	e04c      	b.n	802834c <Report_Capture+0xf8>
        report->data.req.bms.pack[i].id = BMS.d.pack[i].id;
 80282b2:	7dfa      	ldrb	r2, [r7, #23]
 80282b4:	7df8      	ldrb	r0, [r7, #23]
 80282b6:	4987      	ldr	r1, [pc, #540]	; (80284d4 <Report_Capture+0x280>)
 80282b8:	4613      	mov	r3, r2
 80282ba:	00db      	lsls	r3, r3, #3
 80282bc:	1a9b      	subs	r3, r3, r2
 80282be:	009b      	lsls	r3, r3, #2
 80282c0:	440b      	add	r3, r1
 80282c2:	3304      	adds	r3, #4
 80282c4:	681a      	ldr	r2, [r3, #0]
 80282c6:	68b9      	ldr	r1, [r7, #8]
 80282c8:	1d03      	adds	r3, r0, #4
 80282ca:	00db      	lsls	r3, r3, #3
 80282cc:	440b      	add	r3, r1
 80282ce:	f8c3 2007 	str.w	r2, [r3, #7]
        report->data.req.bms.pack[i].voltage = BMS.d.pack[i].voltage * 100;
 80282d2:	7dfa      	ldrb	r2, [r7, #23]
 80282d4:	497f      	ldr	r1, [pc, #508]	; (80284d4 <Report_Capture+0x280>)
 80282d6:	4613      	mov	r3, r2
 80282d8:	00db      	lsls	r3, r3, #3
 80282da:	1a9b      	subs	r3, r3, r2
 80282dc:	009b      	lsls	r3, r3, #2
 80282de:	440b      	add	r3, r1
 80282e0:	3308      	adds	r3, #8
 80282e2:	edd3 7a00 	vldr	s15, [r3]
 80282e6:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 80284d8 <Report_Capture+0x284>
 80282ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80282ee:	7dfb      	ldrb	r3, [r7, #23]
 80282f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80282f4:	ee17 2a90 	vmov	r2, s15
 80282f8:	b291      	uxth	r1, r2
 80282fa:	68ba      	ldr	r2, [r7, #8]
 80282fc:	3304      	adds	r3, #4
 80282fe:	00db      	lsls	r3, r3, #3
 8028300:	4413      	add	r3, r2
 8028302:	460a      	mov	r2, r1
 8028304:	f8a3 200b 	strh.w	r2, [r3, #11]
        report->data.req.bms.pack[i].current = (BMS.d.pack[i].current + 50) * 100;
 8028308:	7dfa      	ldrb	r2, [r7, #23]
 802830a:	4972      	ldr	r1, [pc, #456]	; (80284d4 <Report_Capture+0x280>)
 802830c:	4613      	mov	r3, r2
 802830e:	00db      	lsls	r3, r3, #3
 8028310:	1a9b      	subs	r3, r3, r2
 8028312:	009b      	lsls	r3, r3, #2
 8028314:	440b      	add	r3, r1
 8028316:	330c      	adds	r3, #12
 8028318:	edd3 7a00 	vldr	s15, [r3]
 802831c:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80284dc <Report_Capture+0x288>
 8028320:	ee77 7a87 	vadd.f32	s15, s15, s14
 8028324:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80284d8 <Report_Capture+0x284>
 8028328:	ee67 7a87 	vmul.f32	s15, s15, s14
 802832c:	7dfb      	ldrb	r3, [r7, #23]
 802832e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8028332:	ee17 2a90 	vmov	r2, s15
 8028336:	b291      	uxth	r1, r2
 8028338:	68ba      	ldr	r2, [r7, #8]
 802833a:	3304      	adds	r3, #4
 802833c:	00db      	lsls	r3, r3, #3
 802833e:	4413      	add	r3, r2
 8028340:	460a      	mov	r2, r1
 8028342:	f8a3 200d 	strh.w	r2, [r3, #13]
    for (uint8_t i = 0; i < BMS_COUNT; i++) {
 8028346:	7dfb      	ldrb	r3, [r7, #23]
 8028348:	3301      	adds	r3, #1
 802834a:	75fb      	strb	r3, [r7, #23]
 802834c:	7dfb      	ldrb	r3, [r7, #23]
 802834e:	2b01      	cmp	r3, #1
 8028350:	d9af      	bls.n	80282b2 <Report_Capture+0x5e>
    }

    // Add more (if full frame)
    if (frame == FR_FULL) {
 8028352:	7bfb      	ldrb	r3, [r7, #15]
 8028354:	2b02      	cmp	r3, #2
 8028356:	f040 80b4 	bne.w	80284c2 <Report_Capture+0x26e>
        report->header.size += sizeof(report->data.opt);
 802835a:	68bb      	ldr	r3, [r7, #8]
 802835c:	799b      	ldrb	r3, [r3, #6]
 802835e:	3323      	adds	r3, #35	; 0x23
 8028360:	b2da      	uxtb	r2, r3
 8028362:	68bb      	ldr	r3, [r7, #8]
 8028364:	719a      	strb	r2, [r3, #6]
        // set parameter
        report->data.opt.vcu.gps.latitude = (int32_t) (GPS.latitude * 10000000);
 8028366:	4b5e      	ldr	r3, [pc, #376]	; (80284e0 <Report_Capture+0x28c>)
 8028368:	edd3 7a01 	vldr	s15, [r3, #4]
 802836c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80284e4 <Report_Capture+0x290>
 8028370:	ee67 7a87 	vmul.f32	s15, s15, s14
 8028374:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8028378:	ee17 2a90 	vmov	r2, s15
 802837c:	68bb      	ldr	r3, [r7, #8]
 802837e:	f8c3 203b 	str.w	r2, [r3, #59]	; 0x3b
        report->data.opt.vcu.gps.longitude = (int32_t) (GPS.longitude * 10000000);
 8028382:	4b57      	ldr	r3, [pc, #348]	; (80284e0 <Report_Capture+0x28c>)
 8028384:	edd3 7a02 	vldr	s15, [r3, #8]
 8028388:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80284e4 <Report_Capture+0x290>
 802838c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8028390:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8028394:	ee17 2a90 	vmov	r2, s15
 8028398:	68bb      	ldr	r3, [r7, #8]
 802839a:	f8c3 2037 	str.w	r2, [r3, #55]	; 0x37
        report->data.opt.vcu.gps.hdop = (uint8_t) (GPS.dop_h * 10);
 802839e:	4b50      	ldr	r3, [pc, #320]	; (80284e0 <Report_Capture+0x28c>)
 80283a0:	edd3 7a00 	vldr	s15, [r3]
 80283a4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80283a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80283ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80283b0:	edc7 7a01 	vstr	s15, [r7, #4]
 80283b4:	793b      	ldrb	r3, [r7, #4]
 80283b6:	b2da      	uxtb	r2, r3
 80283b8:	68bb      	ldr	r3, [r7, #8]
 80283ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
        report->data.opt.vcu.gps.heading = (uint8_t) (GPS.heading / 2);
 80283be:	4b48      	ldr	r3, [pc, #288]	; (80284e0 <Report_Capture+0x28c>)
 80283c0:	ed93 7a03 	vldr	s14, [r3, #12]
 80283c4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80283c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80283cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80283d0:	edc7 7a01 	vstr	s15, [r7, #4]
 80283d4:	793b      	ldrb	r3, [r7, #4]
 80283d6:	b2da      	uxtb	r2, r3
 80283d8:	68bb      	ldr	r3, [r7, #8]
 80283da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        report->data.opt.vcu.speed = GPS.speed_kph;
 80283de:	4b40      	ldr	r3, [pc, #256]	; (80284e0 <Report_Capture+0x28c>)
 80283e0:	edd3 7a04 	vldr	s15, [r3, #16]
 80283e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80283e8:	edc7 7a01 	vstr	s15, [r7, #4]
 80283ec:	793b      	ldrb	r3, [r7, #4]
 80283ee:	b2da      	uxtb	r2, r3
 80283f0:	68bb      	ldr	r3, [r7, #8]
 80283f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        report->data.opt.vcu.odometer = VCU.d.odometer;
 80283f6:	4b36      	ldr	r3, [pc, #216]	; (80284d0 <Report_Capture+0x27c>)
 80283f8:	68da      	ldr	r2, [r3, #12]
 80283fa:	68bb      	ldr	r3, [r7, #8]
 80283fc:	f8c3 2042 	str.w	r2, [r3, #66]	; 0x42

        report->data.opt.vcu.trip.a = pSub->trip[SW_M_TRIP_A];
 8028400:	693b      	ldr	r3, [r7, #16]
 8028402:	689a      	ldr	r2, [r3, #8]
 8028404:	68bb      	ldr	r3, [r7, #8]
 8028406:	f8c3 204a 	str.w	r2, [r3, #74]	; 0x4a
        report->data.opt.vcu.trip.b = pSub->trip[SW_M_TRIP_B];
 802840a:	693b      	ldr	r3, [r7, #16]
 802840c:	68da      	ldr	r2, [r3, #12]
 802840e:	68bb      	ldr	r3, [r7, #8]
 8028410:	f8c3 204e 	str.w	r2, [r3, #78]	; 0x4e
        report->data.opt.vcu.report.range = pSub->report[SW_M_REPORT_RANGE];
 8028414:	693b      	ldr	r3, [r7, #16]
 8028416:	799a      	ldrb	r2, [r3, #6]
 8028418:	68bb      	ldr	r3, [r7, #8]
 802841a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        report->data.opt.vcu.report.efficiency = pSub->report[SW_M_REPORT_EFFICIENCY];
 802841e:	693b      	ldr	r3, [r7, #16]
 8028420:	79da      	ldrb	r2, [r3, #7]
 8028422:	68bb      	ldr	r3, [r7, #8]
 8028424:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        report->data.opt.vcu.signal = SIM.signal;
 8028428:	4b2f      	ldr	r3, [pc, #188]	; (80284e8 <Report_Capture+0x294>)
 802842a:	7c1a      	ldrb	r2, [r3, #16]
 802842c:	68bb      	ldr	r3, [r7, #8]
 802842e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        report->data.opt.vcu.backup_voltage = BACKUP_VOLTAGE / 18;
 8028432:	4b2e      	ldr	r3, [pc, #184]	; (80284ec <Report_Capture+0x298>)
 8028434:	881b      	ldrh	r3, [r3, #0]
 8028436:	4a2e      	ldr	r2, [pc, #184]	; (80284f0 <Report_Capture+0x29c>)
 8028438:	fba2 2303 	umull	r2, r3, r2, r3
 802843c:	089b      	lsrs	r3, r3, #2
 802843e:	b29b      	uxth	r3, r3
 8028440:	b2da      	uxtb	r2, r3
 8028442:	68bb      	ldr	r3, [r7, #8]
 8028444:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

        // BMS data
        for (uint8_t i = 0; i < BMS_COUNT; i++) {
 8028448:	2300      	movs	r3, #0
 802844a:	75bb      	strb	r3, [r7, #22]
 802844c:	e036      	b.n	80284bc <Report_Capture+0x268>
            report->data.opt.bms.pack[i].soc = BMS.d.pack[i].soc;
 802844e:	7dba      	ldrb	r2, [r7, #22]
 8028450:	4920      	ldr	r1, [pc, #128]	; (80284d4 <Report_Capture+0x280>)
 8028452:	4613      	mov	r3, r2
 8028454:	00db      	lsls	r3, r3, #3
 8028456:	1a9b      	subs	r3, r3, r2
 8028458:	009b      	lsls	r3, r3, #2
 802845a:	440b      	add	r3, r1
 802845c:	3310      	adds	r3, #16
 802845e:	edd3 7a00 	vldr	s15, [r3]
 8028462:	7dbb      	ldrb	r3, [r7, #22]
 8028464:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8028468:	ee17 2a90 	vmov	r2, s15
 802846c:	b291      	uxth	r1, r2
 802846e:	68ba      	ldr	r2, [r7, #8]
 8028470:	3312      	adds	r3, #18
 8028472:	009b      	lsls	r3, r3, #2
 8028474:	4413      	add	r3, r2
 8028476:	460a      	mov	r2, r1
 8028478:	815a      	strh	r2, [r3, #10]
            report->data.opt.bms.pack[i].temperature = (BMS.d.pack[i].temperature + 40) * 10;
 802847a:	7dba      	ldrb	r2, [r7, #22]
 802847c:	4915      	ldr	r1, [pc, #84]	; (80284d4 <Report_Capture+0x280>)
 802847e:	4613      	mov	r3, r2
 8028480:	00db      	lsls	r3, r3, #3
 8028482:	1a9b      	subs	r3, r3, r2
 8028484:	009b      	lsls	r3, r3, #2
 8028486:	440b      	add	r3, r1
 8028488:	3314      	adds	r3, #20
 802848a:	edd3 7a00 	vldr	s15, [r3]
 802848e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80284f4 <Report_Capture+0x2a0>
 8028492:	ee77 7a87 	vadd.f32	s15, s15, s14
 8028496:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 802849a:	ee67 7a87 	vmul.f32	s15, s15, s14
 802849e:	7dbb      	ldrb	r3, [r7, #22]
 80284a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80284a4:	ee17 2a90 	vmov	r2, s15
 80284a8:	b291      	uxth	r1, r2
 80284aa:	68ba      	ldr	r2, [r7, #8]
 80284ac:	3312      	adds	r3, #18
 80284ae:	009b      	lsls	r3, r3, #2
 80284b0:	4413      	add	r3, r2
 80284b2:	460a      	mov	r2, r1
 80284b4:	819a      	strh	r2, [r3, #12]
        for (uint8_t i = 0; i < BMS_COUNT; i++) {
 80284b6:	7dbb      	ldrb	r3, [r7, #22]
 80284b8:	3301      	adds	r3, #1
 80284ba:	75bb      	strb	r3, [r7, #22]
 80284bc:	7dbb      	ldrb	r3, [r7, #22]
 80284be:	2b01      	cmp	r3, #1
 80284c0:	d9c5      	bls.n	802844e <Report_Capture+0x1fa>
        }
    }
}
 80284c2:	bf00      	nop
 80284c4:	371c      	adds	r7, #28
 80284c6:	46bd      	mov	sp, r7
 80284c8:	bd90      	pop	{r4, r7, pc}
 80284ca:	bf00      	nop
 80284cc:	200000fc 	.word	0x200000fc
 80284d0:	20000228 	.word	0x20000228
 80284d4:	20000178 	.word	0x20000178
 80284d8:	42c80000 	.word	0x42c80000
 80284dc:	42480000 	.word	0x42480000
 80284e0:	2000844c 	.word	0x2000844c
 80284e4:	4b189680 	.word	0x4b189680
 80284e8:	200002a8 	.word	0x200002a8
 80284ec:	200004b4 	.word	0x200004b4
 80284f0:	38e38e39 	.word	0x38e38e39
 80284f4:	42200000 	.word	0x42200000

080284f8 <Response_Capture>:

void Response_Capture(response_t *response) {
 80284f8:	b580      	push	{r7, lr}
 80284fa:	b082      	sub	sp, #8
 80284fc:	af00      	add	r7, sp, #0
 80284fe:	6078      	str	r0, [r7, #4]
    //Reconstruct the header
    response->header.seq_id++;
 8028500:	687b      	ldr	r3, [r7, #4]
 8028502:	899b      	ldrh	r3, [r3, #12]
 8028504:	b29b      	uxth	r3, r3
 8028506:	3301      	adds	r3, #1
 8028508:	b29a      	uxth	r2, r3
 802850a:	687b      	ldr	r3, [r7, #4]
 802850c:	819a      	strh	r2, [r3, #12]
    response->header.unit_id = VCU.d.unit_id;
 802850e:	4b0b      	ldr	r3, [pc, #44]	; (802853c <Response_Capture+0x44>)
 8028510:	681a      	ldr	r2, [r3, #0]
 8028512:	687b      	ldr	r3, [r7, #4]
 8028514:	609a      	str	r2, [r3, #8]
    response->header.frame_id = FR_RESPONSE;
 8028516:	687b      	ldr	r3, [r7, #4]
 8028518:	2200      	movs	r2, #0
 802851a:	71da      	strb	r2, [r3, #7]
    response->header.size = sizeof(response->header.frame_id) +
            sizeof(response->header.unit_id) +
            sizeof(response->header.seq_id) +
            sizeof(response->data.code) +
            strlen(response->data.message);
 802851c:	687b      	ldr	r3, [r7, #4]
 802851e:	330f      	adds	r3, #15
 8028520:	4618      	mov	r0, r3
 8028522:	f7f7 fe87 	bl	8020234 <strlen>
 8028526:	4603      	mov	r3, r0
            sizeof(response->data.code) +
 8028528:	b2db      	uxtb	r3, r3
 802852a:	3308      	adds	r3, #8
 802852c:	b2da      	uxtb	r2, r3
    response->header.size = sizeof(response->header.frame_id) +
 802852e:	687b      	ldr	r3, [r7, #4]
 8028530:	719a      	strb	r2, [r3, #6]
}
 8028532:	bf00      	nop
 8028534:	3708      	adds	r7, #8
 8028536:	46bd      	mov	sp, r7
 8028538:	bd80      	pop	{r7, pc}
 802853a:	bf00      	nop
 802853c:	20000228 	.word	0x20000228

08028540 <Report_SetCRC>:

void Report_SetCRC(report_t *report) {
 8028540:	b590      	push	{r4, r7, lr}
 8028542:	b083      	sub	sp, #12
 8028544:	af00      	add	r7, sp, #0
 8028546:	6078      	str	r0, [r7, #4]
    // get current sending date-time
    report->data.req.vcu.rtc.send = RTC_Read();
 8028548:	f7fe f996 	bl	8026878 <RTC_Read>
 802854c:	4603      	mov	r3, r0
 802854e:	460c      	mov	r4, r1
 8028550:	687a      	ldr	r2, [r7, #4]
 8028552:	320e      	adds	r2, #14
 8028554:	6013      	str	r3, [r2, #0]
 8028556:	6054      	str	r4, [r2, #4]
    // recalculate the CRC
    report->header.crc = CRC_Calculate8(
 8028558:	687b      	ldr	r3, [r7, #4]
 802855a:	1d98      	adds	r0, r3, #6
            (uint8_t*) &(report->header.size),
            report->header.size + sizeof(report->header.size),
 802855c:	687b      	ldr	r3, [r7, #4]
 802855e:	799b      	ldrb	r3, [r3, #6]
 8028560:	3301      	adds	r3, #1
    report->header.crc = CRC_Calculate8(
 8028562:	2200      	movs	r2, #0
 8028564:	4619      	mov	r1, r3
 8028566:	f015 fd55 	bl	803e014 <CRC_Calculate8>
 802856a:	4602      	mov	r2, r0
 802856c:	687b      	ldr	r3, [r7, #4]
 802856e:	f8c3 2002 	str.w	r2, [r3, #2]
            0);
}
 8028572:	bf00      	nop
 8028574:	370c      	adds	r7, #12
 8028576:	46bd      	mov	sp, r7
 8028578:	bd90      	pop	{r4, r7, pc}

0802857a <Response_SetCRC>:

void Response_SetCRC(response_t *response) {
 802857a:	b580      	push	{r7, lr}
 802857c:	b082      	sub	sp, #8
 802857e:	af00      	add	r7, sp, #0
 8028580:	6078      	str	r0, [r7, #4]
    response->header.crc = CRC_Calculate8(
 8028582:	687b      	ldr	r3, [r7, #4]
 8028584:	1d98      	adds	r0, r3, #6
            (uint8_t*) &(response->header.size),
            response->header.size + sizeof(response->header.size),
 8028586:	687b      	ldr	r3, [r7, #4]
 8028588:	799b      	ldrb	r3, [r3, #6]
 802858a:	3301      	adds	r3, #1
    response->header.crc = CRC_Calculate8(
 802858c:	2200      	movs	r2, #0
 802858e:	4619      	mov	r1, r3
 8028590:	f015 fd40 	bl	803e014 <CRC_Calculate8>
 8028594:	4602      	mov	r2, r0
 8028596:	687b      	ldr	r3, [r7, #4]
 8028598:	f8c3 2002 	str.w	r2, [r3, #2]
            0);
}
 802859c:	bf00      	nop
 802859e:	3708      	adds	r7, #8
 80285a0:	46bd      	mov	sp, r7
 80285a2:	bd80      	pop	{r7, pc}

080285a4 <Command_Debugger>:

void Command_Debugger(command_t *cmd) {
 80285a4:	b580      	push	{r7, lr}
 80285a6:	b082      	sub	sp, #8
 80285a8:	af00      	add	r7, sp, #0
 80285aa:	6078      	str	r0, [r7, #4]
    LOG_Str("\nCommand:Payload [");
 80285ac:	480f      	ldr	r0, [pc, #60]	; (80285ec <Command_Debugger+0x48>)
 80285ae:	f015 fec9 	bl	803e344 <LOG_Str>
    LOG_Int(cmd->data.code);
 80285b2:	687b      	ldr	r3, [r7, #4]
 80285b4:	79db      	ldrb	r3, [r3, #7]
 80285b6:	4618      	mov	r0, r3
 80285b8:	f015 fe56 	bl	803e268 <LOG_Int>
    LOG_Str("-");
 80285bc:	480c      	ldr	r0, [pc, #48]	; (80285f0 <Command_Debugger+0x4c>)
 80285be:	f015 fec1 	bl	803e344 <LOG_Str>
    LOG_Int(cmd->data.sub_code);
 80285c2:	687b      	ldr	r3, [r7, #4]
 80285c4:	7a1b      	ldrb	r3, [r3, #8]
 80285c6:	4618      	mov	r0, r3
 80285c8:	f015 fe4e 	bl	803e268 <LOG_Int>
    LOG_Str("] = ");
 80285cc:	4809      	ldr	r0, [pc, #36]	; (80285f4 <Command_Debugger+0x50>)
 80285ce:	f015 feb9 	bl	803e344 <LOG_Str>
    LOG_BufHex((char*) &(cmd->data.value), sizeof(cmd->data.value));
 80285d2:	687b      	ldr	r3, [r7, #4]
 80285d4:	3309      	adds	r3, #9
 80285d6:	2108      	movs	r1, #8
 80285d8:	4618      	mov	r0, r3
 80285da:	f015 ff05 	bl	803e3e8 <LOG_BufHex>
    LOG_Enter();
 80285de:	f015 fe37 	bl	803e250 <LOG_Enter>
}
 80285e2:	bf00      	nop
 80285e4:	3708      	adds	r7, #8
 80285e6:	46bd      	mov	sp, r7
 80285e8:	bd80      	pop	{r7, pc}
 80285ea:	bf00      	nop
 80285ec:	08043788 	.word	0x08043788
 80285f0:	0804379c 	.word	0x0804379c
 80285f4:	080437a0 	.word	0x080437a0

080285f8 <BMS_Init>:
        BMS_CheckState,
        BMS_MergeData,
};

/* Public functions implementation --------------------------------------------*/
void BMS_Init(void) {
 80285f8:	b580      	push	{r7, lr}
 80285fa:	b082      	sub	sp, #8
 80285fc:	af00      	add	r7, sp, #0
    BMS.d.started = 0;
 80285fe:	4b0e      	ldr	r3, [pc, #56]	; (8028638 <BMS_Init+0x40>)
 8028600:	2200      	movs	r2, #0
 8028602:	701a      	strb	r2, [r3, #0]
    BMS.d.soc = 0;
 8028604:	4b0c      	ldr	r3, [pc, #48]	; (8028638 <BMS_Init+0x40>)
 8028606:	2200      	movs	r2, #0
 8028608:	705a      	strb	r2, [r3, #1]
    BMS.d.overheat = 0;
 802860a:	4b0b      	ldr	r3, [pc, #44]	; (8028638 <BMS_Init+0x40>)
 802860c:	2200      	movs	r2, #0
 802860e:	709a      	strb	r2, [r3, #2]
    BMS.d.warning = 0;
 8028610:	4b09      	ldr	r3, [pc, #36]	; (8028638 <BMS_Init+0x40>)
 8028612:	2200      	movs	r2, #0
 8028614:	70da      	strb	r2, [r3, #3]
    // set each BMS
    for (uint8_t i = 0; i < BMS_COUNT; i++) {
 8028616:	2300      	movs	r3, #0
 8028618:	71fb      	strb	r3, [r7, #7]
 802861a:	e006      	b.n	802862a <BMS_Init+0x32>
        BMS_ResetIndex(i);
 802861c:	79fb      	ldrb	r3, [r7, #7]
 802861e:	4618      	mov	r0, r3
 8028620:	f000 f852 	bl	80286c8 <BMS_ResetIndex>
    for (uint8_t i = 0; i < BMS_COUNT; i++) {
 8028624:	79fb      	ldrb	r3, [r7, #7]
 8028626:	3301      	adds	r3, #1
 8028628:	71fb      	strb	r3, [r7, #7]
 802862a:	79fb      	ldrb	r3, [r7, #7]
 802862c:	2b01      	cmp	r3, #1
 802862e:	d9f5      	bls.n	802861c <BMS_Init+0x24>
    }
}
 8028630:	bf00      	nop
 8028632:	3708      	adds	r7, #8
 8028634:	46bd      	mov	sp, r7
 8028636:	bd80      	pop	{r7, pc}
 8028638:	20000178 	.word	0x20000178

0802863c <BMS_PowerOverCan>:

void BMS_PowerOverCan(uint8_t on) {
 802863c:	b580      	push	{r7, lr}
 802863e:	b082      	sub	sp, #8
 8028640:	af00      	add	r7, sp, #0
 8028642:	4603      	mov	r3, r0
 8028644:	71fb      	strb	r3, [r7, #7]
    if (on) {
 8028646:	79fb      	ldrb	r3, [r7, #7]
 8028648:	2b00      	cmp	r3, #0
 802864a:	d016      	beq.n	802867a <BMS_PowerOverCan+0x3e>
        if (!BMS.CheckRun(1) && !BMS.CheckState(BMS_STATE_DISCHARGE)) {
 802864c:	4b1d      	ldr	r3, [pc, #116]	; (80286c4 <BMS_PowerOverCan+0x88>)
 802864e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8028650:	2001      	movs	r0, #1
 8028652:	4798      	blx	r3
 8028654:	4603      	mov	r3, r0
 8028656:	2b00      	cmp	r3, #0
 8028658:	d10b      	bne.n	8028672 <BMS_PowerOverCan+0x36>
 802865a:	4b1a      	ldr	r3, [pc, #104]	; (80286c4 <BMS_PowerOverCan+0x88>)
 802865c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802865e:	2001      	movs	r0, #1
 8028660:	4798      	blx	r3
 8028662:	4603      	mov	r3, r0
 8028664:	2b00      	cmp	r3, #0
 8028666:	d104      	bne.n	8028672 <BMS_PowerOverCan+0x36>
            BMS_CAN_TX_Setting(1, BMS_STATE_DISCHARGE);
 8028668:	2101      	movs	r1, #1
 802866a:	2001      	movs	r0, #1
 802866c:	f000 fbee 	bl	8028e4c <BMS_CAN_TX_Setting>
 8028670:	e023      	b.n	80286ba <BMS_PowerOverCan+0x7e>
        } else {
            // completely ON
            BMS.d.started = 1;
 8028672:	4b14      	ldr	r3, [pc, #80]	; (80286c4 <BMS_PowerOverCan+0x88>)
 8028674:	2201      	movs	r2, #1
 8028676:	701a      	strb	r2, [r3, #0]
            // other parameters
            BMS.d.overheat = 0;
            BMS.d.warning = 1;
        }
    }
}
 8028678:	e01f      	b.n	80286ba <BMS_PowerOverCan+0x7e>
        if (!BMS.CheckRun(0) || !BMS.CheckState(BMS_STATE_IDLE)) {
 802867a:	4b12      	ldr	r3, [pc, #72]	; (80286c4 <BMS_PowerOverCan+0x88>)
 802867c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802867e:	2000      	movs	r0, #0
 8028680:	4798      	blx	r3
 8028682:	4603      	mov	r3, r0
 8028684:	2b00      	cmp	r3, #0
 8028686:	d006      	beq.n	8028696 <BMS_PowerOverCan+0x5a>
 8028688:	4b0e      	ldr	r3, [pc, #56]	; (80286c4 <BMS_PowerOverCan+0x88>)
 802868a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802868c:	2000      	movs	r0, #0
 802868e:	4798      	blx	r3
 8028690:	4603      	mov	r3, r0
 8028692:	2b00      	cmp	r3, #0
 8028694:	d104      	bne.n	80286a0 <BMS_PowerOverCan+0x64>
            BMS_CAN_TX_Setting(0, BMS_STATE_IDLE);
 8028696:	2100      	movs	r1, #0
 8028698:	2000      	movs	r0, #0
 802869a:	f000 fbd7 	bl	8028e4c <BMS_CAN_TX_Setting>
 802869e:	e00c      	b.n	80286ba <BMS_PowerOverCan+0x7e>
            BMS.d.started = 0;
 80286a0:	4b08      	ldr	r3, [pc, #32]	; (80286c4 <BMS_PowerOverCan+0x88>)
 80286a2:	2200      	movs	r2, #0
 80286a4:	701a      	strb	r2, [r3, #0]
            BMS.d.soc = 0;
 80286a6:	4b07      	ldr	r3, [pc, #28]	; (80286c4 <BMS_PowerOverCan+0x88>)
 80286a8:	2200      	movs	r2, #0
 80286aa:	705a      	strb	r2, [r3, #1]
            BMS.d.overheat = 0;
 80286ac:	4b05      	ldr	r3, [pc, #20]	; (80286c4 <BMS_PowerOverCan+0x88>)
 80286ae:	2200      	movs	r2, #0
 80286b0:	709a      	strb	r2, [r3, #2]
            BMS.d.warning = 1;
 80286b2:	4b04      	ldr	r3, [pc, #16]	; (80286c4 <BMS_PowerOverCan+0x88>)
 80286b4:	2201      	movs	r2, #1
 80286b6:	70da      	strb	r2, [r3, #3]
}
 80286b8:	e7ff      	b.n	80286ba <BMS_PowerOverCan+0x7e>
 80286ba:	bf00      	nop
 80286bc:	3708      	adds	r7, #8
 80286be:	46bd      	mov	sp, r7
 80286c0:	bd80      	pop	{r7, pc}
 80286c2:	bf00      	nop
 80286c4:	20000178 	.word	0x20000178

080286c8 <BMS_ResetIndex>:

void BMS_ResetIndex(uint8_t i) {
 80286c8:	b480      	push	{r7}
 80286ca:	b083      	sub	sp, #12
 80286cc:	af00      	add	r7, sp, #0
 80286ce:	4603      	mov	r3, r0
 80286d0:	71fb      	strb	r3, [r7, #7]
    BMS.d.pack[i].id = BMS_ID_NONE;
 80286d2:	79fa      	ldrb	r2, [r7, #7]
 80286d4:	4931      	ldr	r1, [pc, #196]	; (802879c <BMS_ResetIndex+0xd4>)
 80286d6:	4613      	mov	r3, r2
 80286d8:	00db      	lsls	r3, r3, #3
 80286da:	1a9b      	subs	r3, r3, r2
 80286dc:	009b      	lsls	r3, r3, #2
 80286de:	440b      	add	r3, r1
 80286e0:	3304      	adds	r3, #4
 80286e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80286e6:	601a      	str	r2, [r3, #0]
    BMS.d.pack[i].voltage = 0;
 80286e8:	79fa      	ldrb	r2, [r7, #7]
 80286ea:	492c      	ldr	r1, [pc, #176]	; (802879c <BMS_ResetIndex+0xd4>)
 80286ec:	4613      	mov	r3, r2
 80286ee:	00db      	lsls	r3, r3, #3
 80286f0:	1a9b      	subs	r3, r3, r2
 80286f2:	009b      	lsls	r3, r3, #2
 80286f4:	440b      	add	r3, r1
 80286f6:	3308      	adds	r3, #8
 80286f8:	f04f 0200 	mov.w	r2, #0
 80286fc:	601a      	str	r2, [r3, #0]
    BMS.d.pack[i].current = 0;
 80286fe:	79fa      	ldrb	r2, [r7, #7]
 8028700:	4926      	ldr	r1, [pc, #152]	; (802879c <BMS_ResetIndex+0xd4>)
 8028702:	4613      	mov	r3, r2
 8028704:	00db      	lsls	r3, r3, #3
 8028706:	1a9b      	subs	r3, r3, r2
 8028708:	009b      	lsls	r3, r3, #2
 802870a:	440b      	add	r3, r1
 802870c:	330c      	adds	r3, #12
 802870e:	f04f 0200 	mov.w	r2, #0
 8028712:	601a      	str	r2, [r3, #0]
    BMS.d.pack[i].soc = 0;
 8028714:	79fa      	ldrb	r2, [r7, #7]
 8028716:	4921      	ldr	r1, [pc, #132]	; (802879c <BMS_ResetIndex+0xd4>)
 8028718:	4613      	mov	r3, r2
 802871a:	00db      	lsls	r3, r3, #3
 802871c:	1a9b      	subs	r3, r3, r2
 802871e:	009b      	lsls	r3, r3, #2
 8028720:	440b      	add	r3, r1
 8028722:	3310      	adds	r3, #16
 8028724:	f04f 0200 	mov.w	r2, #0
 8028728:	601a      	str	r2, [r3, #0]
    BMS.d.pack[i].temperature = 0;
 802872a:	79fa      	ldrb	r2, [r7, #7]
 802872c:	491b      	ldr	r1, [pc, #108]	; (802879c <BMS_ResetIndex+0xd4>)
 802872e:	4613      	mov	r3, r2
 8028730:	00db      	lsls	r3, r3, #3
 8028732:	1a9b      	subs	r3, r3, r2
 8028734:	009b      	lsls	r3, r3, #2
 8028736:	440b      	add	r3, r1
 8028738:	3314      	adds	r3, #20
 802873a:	f04f 0200 	mov.w	r2, #0
 802873e:	601a      	str	r2, [r3, #0]
    BMS.d.pack[i].state = BMS_STATE_IDLE;
 8028740:	79fa      	ldrb	r2, [r7, #7]
 8028742:	4916      	ldr	r1, [pc, #88]	; (802879c <BMS_ResetIndex+0xd4>)
 8028744:	4613      	mov	r3, r2
 8028746:	00db      	lsls	r3, r3, #3
 8028748:	1a9b      	subs	r3, r3, r2
 802874a:	009b      	lsls	r3, r3, #2
 802874c:	440b      	add	r3, r1
 802874e:	331a      	adds	r3, #26
 8028750:	2200      	movs	r2, #0
 8028752:	701a      	strb	r2, [r3, #0]
    BMS.d.pack[i].started = 0;
 8028754:	79fa      	ldrb	r2, [r7, #7]
 8028756:	4911      	ldr	r1, [pc, #68]	; (802879c <BMS_ResetIndex+0xd4>)
 8028758:	4613      	mov	r3, r2
 802875a:	00db      	lsls	r3, r3, #3
 802875c:	1a9b      	subs	r3, r3, r2
 802875e:	009b      	lsls	r3, r3, #2
 8028760:	440b      	add	r3, r1
 8028762:	331b      	adds	r3, #27
 8028764:	2200      	movs	r2, #0
 8028766:	701a      	strb	r2, [r3, #0]
    BMS.d.pack[i].flag = 0;
 8028768:	79fa      	ldrb	r2, [r7, #7]
 802876a:	490c      	ldr	r1, [pc, #48]	; (802879c <BMS_ResetIndex+0xd4>)
 802876c:	4613      	mov	r3, r2
 802876e:	00db      	lsls	r3, r3, #3
 8028770:	1a9b      	subs	r3, r3, r2
 8028772:	009b      	lsls	r3, r3, #2
 8028774:	440b      	add	r3, r1
 8028776:	3318      	adds	r3, #24
 8028778:	2200      	movs	r2, #0
 802877a:	801a      	strh	r2, [r3, #0]
    BMS.d.pack[i].tick = 0;
 802877c:	79fa      	ldrb	r2, [r7, #7]
 802877e:	4907      	ldr	r1, [pc, #28]	; (802879c <BMS_ResetIndex+0xd4>)
 8028780:	4613      	mov	r3, r2
 8028782:	00db      	lsls	r3, r3, #3
 8028784:	1a9b      	subs	r3, r3, r2
 8028786:	009b      	lsls	r3, r3, #2
 8028788:	440b      	add	r3, r1
 802878a:	331c      	adds	r3, #28
 802878c:	2200      	movs	r2, #0
 802878e:	601a      	str	r2, [r3, #0]
}
 8028790:	bf00      	nop
 8028792:	370c      	adds	r7, #12
 8028794:	46bd      	mov	sp, r7
 8028796:	f85d 7b04 	ldr.w	r7, [sp], #4
 802879a:	4770      	bx	lr
 802879c:	20000178 	.word	0x20000178

080287a0 <BMS_RefreshIndex>:

void BMS_RefreshIndex(void) {
 80287a0:	b580      	push	{r7, lr}
 80287a2:	b082      	sub	sp, #8
 80287a4:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < BMS_COUNT; i++) {
 80287a6:	2300      	movs	r3, #0
 80287a8:	71fb      	strb	r3, [r7, #7]
 80287aa:	e015      	b.n	80287d8 <BMS_RefreshIndex+0x38>
        if ((_GetTickMS() - BMS.d.pack[i].tick) > 500) {
 80287ac:	f016 ff91 	bl	803f6d2 <_GetTickMS>
 80287b0:	79fa      	ldrb	r2, [r7, #7]
 80287b2:	490e      	ldr	r1, [pc, #56]	; (80287ec <BMS_RefreshIndex+0x4c>)
 80287b4:	4613      	mov	r3, r2
 80287b6:	00db      	lsls	r3, r3, #3
 80287b8:	1a9b      	subs	r3, r3, r2
 80287ba:	009b      	lsls	r3, r3, #2
 80287bc:	440b      	add	r3, r1
 80287be:	331c      	adds	r3, #28
 80287c0:	681b      	ldr	r3, [r3, #0]
 80287c2:	1ac3      	subs	r3, r0, r3
 80287c4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80287c8:	d903      	bls.n	80287d2 <BMS_RefreshIndex+0x32>
            BMS_ResetIndex(i);
 80287ca:	79fb      	ldrb	r3, [r7, #7]
 80287cc:	4618      	mov	r0, r3
 80287ce:	f7ff ff7b 	bl	80286c8 <BMS_ResetIndex>
    for (uint8_t i = 0; i < BMS_COUNT; i++) {
 80287d2:	79fb      	ldrb	r3, [r7, #7]
 80287d4:	3301      	adds	r3, #1
 80287d6:	71fb      	strb	r3, [r7, #7]
 80287d8:	79fb      	ldrb	r3, [r7, #7]
 80287da:	2b01      	cmp	r3, #1
 80287dc:	d9e6      	bls.n	80287ac <BMS_RefreshIndex+0xc>
        }
    }
    // update data
    BMS_MergeData();
 80287de:	f000 f9cf 	bl	8028b80 <BMS_MergeData>
}
 80287e2:	bf00      	nop
 80287e4:	3708      	adds	r7, #8
 80287e6:	46bd      	mov	sp, r7
 80287e8:	bd80      	pop	{r7, pc}
 80287ea:	bf00      	nop
 80287ec:	20000178 	.word	0x20000178

080287f0 <BMS_GetIndex>:

uint8_t BMS_GetIndex(uint32_t id) {
 80287f0:	b480      	push	{r7}
 80287f2:	b085      	sub	sp, #20
 80287f4:	af00      	add	r7, sp, #0
 80287f6:	6078      	str	r0, [r7, #4]
    uint8_t i;

    // find index (if already exist)
    for (i = 0; i < BMS_COUNT; i++) {
 80287f8:	2300      	movs	r3, #0
 80287fa:	73fb      	strb	r3, [r7, #15]
 80287fc:	e010      	b.n	8028820 <BMS_GetIndex+0x30>
        if (BMS.d.pack[i].id == id) {
 80287fe:	7bfa      	ldrb	r2, [r7, #15]
 8028800:	4918      	ldr	r1, [pc, #96]	; (8028864 <BMS_GetIndex+0x74>)
 8028802:	4613      	mov	r3, r2
 8028804:	00db      	lsls	r3, r3, #3
 8028806:	1a9b      	subs	r3, r3, r2
 8028808:	009b      	lsls	r3, r3, #2
 802880a:	440b      	add	r3, r1
 802880c:	3304      	adds	r3, #4
 802880e:	681b      	ldr	r3, [r3, #0]
 8028810:	687a      	ldr	r2, [r7, #4]
 8028812:	429a      	cmp	r2, r3
 8028814:	d101      	bne.n	802881a <BMS_GetIndex+0x2a>
            return i;
 8028816:	7bfb      	ldrb	r3, [r7, #15]
 8028818:	e01d      	b.n	8028856 <BMS_GetIndex+0x66>
    for (i = 0; i < BMS_COUNT; i++) {
 802881a:	7bfb      	ldrb	r3, [r7, #15]
 802881c:	3301      	adds	r3, #1
 802881e:	73fb      	strb	r3, [r7, #15]
 8028820:	7bfb      	ldrb	r3, [r7, #15]
 8028822:	2b01      	cmp	r3, #1
 8028824:	d9eb      	bls.n	80287fe <BMS_GetIndex+0xe>
        }
    }

    // finx index (if not exist)
    for (i = 0; i < BMS_COUNT; i++) {
 8028826:	2300      	movs	r3, #0
 8028828:	73fb      	strb	r3, [r7, #15]
 802882a:	e010      	b.n	802884e <BMS_GetIndex+0x5e>
        if (BMS.d.pack[i].id == BMS_ID_NONE) {
 802882c:	7bfa      	ldrb	r2, [r7, #15]
 802882e:	490d      	ldr	r1, [pc, #52]	; (8028864 <BMS_GetIndex+0x74>)
 8028830:	4613      	mov	r3, r2
 8028832:	00db      	lsls	r3, r3, #3
 8028834:	1a9b      	subs	r3, r3, r2
 8028836:	009b      	lsls	r3, r3, #2
 8028838:	440b      	add	r3, r1
 802883a:	3304      	adds	r3, #4
 802883c:	681b      	ldr	r3, [r3, #0]
 802883e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8028842:	d101      	bne.n	8028848 <BMS_GetIndex+0x58>
            return i;
 8028844:	7bfb      	ldrb	r3, [r7, #15]
 8028846:	e006      	b.n	8028856 <BMS_GetIndex+0x66>
    for (i = 0; i < BMS_COUNT; i++) {
 8028848:	7bfb      	ldrb	r3, [r7, #15]
 802884a:	3301      	adds	r3, #1
 802884c:	73fb      	strb	r3, [r7, #15]
 802884e:	7bfb      	ldrb	r3, [r7, #15]
 8028850:	2b01      	cmp	r3, #1
 8028852:	d9eb      	bls.n	802882c <BMS_GetIndex+0x3c>
        }
    }

    // force replace first index (if already full)
    return 0;
 8028854:	2300      	movs	r3, #0
}
 8028856:	4618      	mov	r0, r3
 8028858:	3714      	adds	r7, #20
 802885a:	46bd      	mov	sp, r7
 802885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028860:	4770      	bx	lr
 8028862:	bf00      	nop
 8028864:	20000178 	.word	0x20000178

08028868 <BMS_SetEvents>:

void BMS_SetEvents(uint16_t flag) {
 8028868:	b580      	push	{r7, lr}
 802886a:	b082      	sub	sp, #8
 802886c:	af00      	add	r7, sp, #0
 802886e:	4603      	mov	r3, r0
 8028870:	80fb      	strh	r3, [r7, #6]
    // Set events
    VCU.SetEvent(EV_BMS_SHORT_CIRCUIT, _R1(flag, 0));
 8028872:	4b9a      	ldr	r3, [pc, #616]	; (8028adc <BMS_SetEvents+0x274>)
 8028874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8028876:	88fa      	ldrh	r2, [r7, #6]
 8028878:	b2d2      	uxtb	r2, r2
 802887a:	f002 0201 	and.w	r2, r2, #1
 802887e:	b2d2      	uxtb	r2, r2
 8028880:	f04f 0000 	mov.w	r0, #0
 8028884:	f04f 0101 	mov.w	r1, #1
 8028888:	4798      	blx	r3
    VCU.SetEvent(EV_BMS_DISCHARGE_OVER_CURRENT, _R1(flag, 1));
 802888a:	4b94      	ldr	r3, [pc, #592]	; (8028adc <BMS_SetEvents+0x274>)
 802888c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802888e:	88fa      	ldrh	r2, [r7, #6]
 8028890:	0852      	lsrs	r2, r2, #1
 8028892:	b292      	uxth	r2, r2
 8028894:	b2d2      	uxtb	r2, r2
 8028896:	f002 0201 	and.w	r2, r2, #1
 802889a:	b2d2      	uxtb	r2, r2
 802889c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80288a0:	f04f 0100 	mov.w	r1, #0
 80288a4:	4798      	blx	r3
    VCU.SetEvent(EV_BMS_CHARGE_OVER_CURRENT, _R1(flag, 2));
 80288a6:	4b8d      	ldr	r3, [pc, #564]	; (8028adc <BMS_SetEvents+0x274>)
 80288a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80288aa:	88fa      	ldrh	r2, [r7, #6]
 80288ac:	0892      	lsrs	r2, r2, #2
 80288ae:	b292      	uxth	r2, r2
 80288b0:	b2d2      	uxtb	r2, r2
 80288b2:	f002 0201 	and.w	r2, r2, #1
 80288b6:	b2d2      	uxtb	r2, r2
 80288b8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80288bc:	f04f 0100 	mov.w	r1, #0
 80288c0:	4798      	blx	r3
    VCU.SetEvent(EV_BMS_DISCHARGE_OVER_TEMPERATURE, _R1(flag, 3));
 80288c2:	4b86      	ldr	r3, [pc, #536]	; (8028adc <BMS_SetEvents+0x274>)
 80288c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80288c6:	88fa      	ldrh	r2, [r7, #6]
 80288c8:	08d2      	lsrs	r2, r2, #3
 80288ca:	b292      	uxth	r2, r2
 80288cc:	b2d2      	uxtb	r2, r2
 80288ce:	f002 0201 	and.w	r2, r2, #1
 80288d2:	b2d2      	uxtb	r2, r2
 80288d4:	f04f 0000 	mov.w	r0, #0
 80288d8:	f04f 0102 	mov.w	r1, #2
 80288dc:	4798      	blx	r3
    VCU.SetEvent(EV_BMS_DISCHARGE_UNDER_TEMPERATURE, _R1(flag, 4));
 80288de:	4b7f      	ldr	r3, [pc, #508]	; (8028adc <BMS_SetEvents+0x274>)
 80288e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80288e2:	88fa      	ldrh	r2, [r7, #6]
 80288e4:	0912      	lsrs	r2, r2, #4
 80288e6:	b292      	uxth	r2, r2
 80288e8:	b2d2      	uxtb	r2, r2
 80288ea:	f002 0201 	and.w	r2, r2, #1
 80288ee:	b2d2      	uxtb	r2, r2
 80288f0:	f04f 0000 	mov.w	r0, #0
 80288f4:	f04f 0104 	mov.w	r1, #4
 80288f8:	4798      	blx	r3
    VCU.SetEvent(EV_BMS_CHARGE_OVER_TEMPERATURE, _R1(flag, 5));
 80288fa:	4b78      	ldr	r3, [pc, #480]	; (8028adc <BMS_SetEvents+0x274>)
 80288fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80288fe:	88fa      	ldrh	r2, [r7, #6]
 8028900:	0952      	lsrs	r2, r2, #5
 8028902:	b292      	uxth	r2, r2
 8028904:	b2d2      	uxtb	r2, r2
 8028906:	f002 0201 	and.w	r2, r2, #1
 802890a:	b2d2      	uxtb	r2, r2
 802890c:	f04f 0000 	mov.w	r0, #0
 8028910:	f04f 0108 	mov.w	r1, #8
 8028914:	4798      	blx	r3
    VCU.SetEvent(EV_BMS_CHARGE_UNDER_TEMPERATURE, _R1(flag, 6));
 8028916:	4b71      	ldr	r3, [pc, #452]	; (8028adc <BMS_SetEvents+0x274>)
 8028918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802891a:	88fa      	ldrh	r2, [r7, #6]
 802891c:	0992      	lsrs	r2, r2, #6
 802891e:	b292      	uxth	r2, r2
 8028920:	b2d2      	uxtb	r2, r2
 8028922:	f002 0201 	and.w	r2, r2, #1
 8028926:	b2d2      	uxtb	r2, r2
 8028928:	f04f 0000 	mov.w	r0, #0
 802892c:	f04f 0110 	mov.w	r1, #16
 8028930:	4798      	blx	r3
    VCU.SetEvent(EV_BMS_UNBALANCE, _R1(flag, 7));
 8028932:	4b6a      	ldr	r3, [pc, #424]	; (8028adc <BMS_SetEvents+0x274>)
 8028934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8028936:	88fa      	ldrh	r2, [r7, #6]
 8028938:	09d2      	lsrs	r2, r2, #7
 802893a:	b292      	uxth	r2, r2
 802893c:	b2d2      	uxtb	r2, r2
 802893e:	f002 0201 	and.w	r2, r2, #1
 8028942:	b2d2      	uxtb	r2, r2
 8028944:	f04f 0000 	mov.w	r0, #0
 8028948:	f44f 7180 	mov.w	r1, #256	; 0x100
 802894c:	4798      	blx	r3
    VCU.SetEvent(EV_BMS_UNDER_VOLTAGE, _R1(flag, 8));
 802894e:	4b63      	ldr	r3, [pc, #396]	; (8028adc <BMS_SetEvents+0x274>)
 8028950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8028952:	88fa      	ldrh	r2, [r7, #6]
 8028954:	0a12      	lsrs	r2, r2, #8
 8028956:	b292      	uxth	r2, r2
 8028958:	b2d2      	uxtb	r2, r2
 802895a:	f002 0201 	and.w	r2, r2, #1
 802895e:	b2d2      	uxtb	r2, r2
 8028960:	f04f 0000 	mov.w	r0, #0
 8028964:	f04f 0120 	mov.w	r1, #32
 8028968:	4798      	blx	r3
    VCU.SetEvent(EV_BMS_OVER_VOLTAGE, _R1(flag, 9));
 802896a:	4b5c      	ldr	r3, [pc, #368]	; (8028adc <BMS_SetEvents+0x274>)
 802896c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802896e:	88fa      	ldrh	r2, [r7, #6]
 8028970:	0a52      	lsrs	r2, r2, #9
 8028972:	b292      	uxth	r2, r2
 8028974:	b2d2      	uxtb	r2, r2
 8028976:	f002 0201 	and.w	r2, r2, #1
 802897a:	b2d2      	uxtb	r2, r2
 802897c:	f04f 0000 	mov.w	r0, #0
 8028980:	f04f 0140 	mov.w	r1, #64	; 0x40
 8028984:	4798      	blx	r3
    VCU.SetEvent(EV_BMS_OVER_DISCHARGE_CAPACITY, _R1(flag, 10));
 8028986:	4b55      	ldr	r3, [pc, #340]	; (8028adc <BMS_SetEvents+0x274>)
 8028988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802898a:	88fa      	ldrh	r2, [r7, #6]
 802898c:	0a92      	lsrs	r2, r2, #10
 802898e:	b292      	uxth	r2, r2
 8028990:	b2d2      	uxtb	r2, r2
 8028992:	f002 0201 	and.w	r2, r2, #1
 8028996:	b2d2      	uxtb	r2, r2
 8028998:	f04f 0000 	mov.w	r0, #0
 802899c:	f04f 0180 	mov.w	r1, #128	; 0x80
 80289a0:	4798      	blx	r3
    VCU.SetEvent(EV_BMS_SYSTEM_FAILURE, _R1(flag, 11));
 80289a2:	4b4e      	ldr	r3, [pc, #312]	; (8028adc <BMS_SetEvents+0x274>)
 80289a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80289a6:	88fa      	ldrh	r2, [r7, #6]
 80289a8:	0ad2      	lsrs	r2, r2, #11
 80289aa:	b292      	uxth	r2, r2
 80289ac:	b2d2      	uxtb	r2, r2
 80289ae:	f002 0201 	and.w	r2, r2, #1
 80289b2:	b2d2      	uxtb	r2, r2
 80289b4:	f04f 0000 	mov.w	r0, #0
 80289b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80289bc:	4798      	blx	r3

    // Parse event for indicator
    BMS.d.overheat = VCU.ReadEvent(EV_BMS_DISCHARGE_OVER_TEMPERATURE) ||
 80289be:	4b47      	ldr	r3, [pc, #284]	; (8028adc <BMS_SetEvents+0x274>)
 80289c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80289c2:	f04f 0000 	mov.w	r0, #0
 80289c6:	f04f 0102 	mov.w	r1, #2
 80289ca:	4798      	blx	r3
 80289cc:	4603      	mov	r3, r0
            VCU.ReadEvent(EV_BMS_DISCHARGE_UNDER_TEMPERATURE) ||
            VCU.ReadEvent(EV_BMS_CHARGE_OVER_TEMPERATURE) ||
 80289ce:	2b00      	cmp	r3, #0
 80289d0:	d11d      	bne.n	8028a0e <BMS_SetEvents+0x1a6>
            VCU.ReadEvent(EV_BMS_DISCHARGE_UNDER_TEMPERATURE) ||
 80289d2:	4b42      	ldr	r3, [pc, #264]	; (8028adc <BMS_SetEvents+0x274>)
 80289d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80289d6:	f04f 0000 	mov.w	r0, #0
 80289da:	f04f 0104 	mov.w	r1, #4
 80289de:	4798      	blx	r3
 80289e0:	4603      	mov	r3, r0
    BMS.d.overheat = VCU.ReadEvent(EV_BMS_DISCHARGE_OVER_TEMPERATURE) ||
 80289e2:	2b00      	cmp	r3, #0
 80289e4:	d113      	bne.n	8028a0e <BMS_SetEvents+0x1a6>
            VCU.ReadEvent(EV_BMS_CHARGE_OVER_TEMPERATURE) ||
 80289e6:	4b3d      	ldr	r3, [pc, #244]	; (8028adc <BMS_SetEvents+0x274>)
 80289e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80289ea:	f04f 0000 	mov.w	r0, #0
 80289ee:	f04f 0108 	mov.w	r1, #8
 80289f2:	4798      	blx	r3
 80289f4:	4603      	mov	r3, r0
            VCU.ReadEvent(EV_BMS_DISCHARGE_UNDER_TEMPERATURE) ||
 80289f6:	2b00      	cmp	r3, #0
 80289f8:	d109      	bne.n	8028a0e <BMS_SetEvents+0x1a6>
            VCU.ReadEvent(EV_BMS_CHARGE_UNDER_TEMPERATURE);
 80289fa:	4b38      	ldr	r3, [pc, #224]	; (8028adc <BMS_SetEvents+0x274>)
 80289fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80289fe:	f04f 0000 	mov.w	r0, #0
 8028a02:	f04f 0110 	mov.w	r1, #16
 8028a06:	4798      	blx	r3
 8028a08:	4603      	mov	r3, r0
            VCU.ReadEvent(EV_BMS_CHARGE_OVER_TEMPERATURE) ||
 8028a0a:	2b00      	cmp	r3, #0
 8028a0c:	d001      	beq.n	8028a12 <BMS_SetEvents+0x1aa>
 8028a0e:	2301      	movs	r3, #1
 8028a10:	e000      	b.n	8028a14 <BMS_SetEvents+0x1ac>
 8028a12:	2300      	movs	r3, #0
    BMS.d.overheat = VCU.ReadEvent(EV_BMS_DISCHARGE_OVER_TEMPERATURE) ||
 8028a14:	b2da      	uxtb	r2, r3
 8028a16:	4b32      	ldr	r3, [pc, #200]	; (8028ae0 <BMS_SetEvents+0x278>)
 8028a18:	709a      	strb	r2, [r3, #2]
    BMS.d.warning = VCU.ReadEvent(EV_BMS_SHORT_CIRCUIT) ||
 8028a1a:	4b30      	ldr	r3, [pc, #192]	; (8028adc <BMS_SetEvents+0x274>)
 8028a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8028a1e:	f04f 0000 	mov.w	r0, #0
 8028a22:	f04f 0101 	mov.w	r1, #1
 8028a26:	4798      	blx	r3
 8028a28:	4603      	mov	r3, r0
            VCU.ReadEvent(EV_BMS_DISCHARGE_OVER_CURRENT) ||
            VCU.ReadEvent(EV_BMS_CHARGE_OVER_CURRENT) ||
            VCU.ReadEvent(EV_BMS_UNBALANCE) ||
            VCU.ReadEvent(EV_BMS_UNDER_VOLTAGE) ||
            VCU.ReadEvent(EV_BMS_OVER_VOLTAGE) ||
            VCU.ReadEvent(EV_BMS_OVER_DISCHARGE_CAPACITY) ||
 8028a2a:	2b00      	cmp	r3, #0
 8028a2c:	d145      	bne.n	8028aba <BMS_SetEvents+0x252>
            VCU.ReadEvent(EV_BMS_DISCHARGE_OVER_CURRENT) ||
 8028a2e:	4b2b      	ldr	r3, [pc, #172]	; (8028adc <BMS_SetEvents+0x274>)
 8028a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8028a32:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8028a36:	f04f 0100 	mov.w	r1, #0
 8028a3a:	4798      	blx	r3
 8028a3c:	4603      	mov	r3, r0
    BMS.d.warning = VCU.ReadEvent(EV_BMS_SHORT_CIRCUIT) ||
 8028a3e:	2b00      	cmp	r3, #0
 8028a40:	d13b      	bne.n	8028aba <BMS_SetEvents+0x252>
            VCU.ReadEvent(EV_BMS_CHARGE_OVER_CURRENT) ||
 8028a42:	4b26      	ldr	r3, [pc, #152]	; (8028adc <BMS_SetEvents+0x274>)
 8028a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8028a46:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8028a4a:	f04f 0100 	mov.w	r1, #0
 8028a4e:	4798      	blx	r3
 8028a50:	4603      	mov	r3, r0
            VCU.ReadEvent(EV_BMS_DISCHARGE_OVER_CURRENT) ||
 8028a52:	2b00      	cmp	r3, #0
 8028a54:	d131      	bne.n	8028aba <BMS_SetEvents+0x252>
            VCU.ReadEvent(EV_BMS_UNBALANCE) ||
 8028a56:	4b21      	ldr	r3, [pc, #132]	; (8028adc <BMS_SetEvents+0x274>)
 8028a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8028a5a:	f04f 0000 	mov.w	r0, #0
 8028a5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8028a62:	4798      	blx	r3
 8028a64:	4603      	mov	r3, r0
            VCU.ReadEvent(EV_BMS_CHARGE_OVER_CURRENT) ||
 8028a66:	2b00      	cmp	r3, #0
 8028a68:	d127      	bne.n	8028aba <BMS_SetEvents+0x252>
            VCU.ReadEvent(EV_BMS_UNDER_VOLTAGE) ||
 8028a6a:	4b1c      	ldr	r3, [pc, #112]	; (8028adc <BMS_SetEvents+0x274>)
 8028a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8028a6e:	f04f 0000 	mov.w	r0, #0
 8028a72:	f04f 0120 	mov.w	r1, #32
 8028a76:	4798      	blx	r3
 8028a78:	4603      	mov	r3, r0
            VCU.ReadEvent(EV_BMS_UNBALANCE) ||
 8028a7a:	2b00      	cmp	r3, #0
 8028a7c:	d11d      	bne.n	8028aba <BMS_SetEvents+0x252>
            VCU.ReadEvent(EV_BMS_OVER_VOLTAGE) ||
 8028a7e:	4b17      	ldr	r3, [pc, #92]	; (8028adc <BMS_SetEvents+0x274>)
 8028a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8028a82:	f04f 0000 	mov.w	r0, #0
 8028a86:	f04f 0140 	mov.w	r1, #64	; 0x40
 8028a8a:	4798      	blx	r3
 8028a8c:	4603      	mov	r3, r0
            VCU.ReadEvent(EV_BMS_UNDER_VOLTAGE) ||
 8028a8e:	2b00      	cmp	r3, #0
 8028a90:	d113      	bne.n	8028aba <BMS_SetEvents+0x252>
            VCU.ReadEvent(EV_BMS_OVER_DISCHARGE_CAPACITY) ||
 8028a92:	4b12      	ldr	r3, [pc, #72]	; (8028adc <BMS_SetEvents+0x274>)
 8028a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8028a96:	f04f 0000 	mov.w	r0, #0
 8028a9a:	f04f 0180 	mov.w	r1, #128	; 0x80
 8028a9e:	4798      	blx	r3
 8028aa0:	4603      	mov	r3, r0
            VCU.ReadEvent(EV_BMS_OVER_VOLTAGE) ||
 8028aa2:	2b00      	cmp	r3, #0
 8028aa4:	d109      	bne.n	8028aba <BMS_SetEvents+0x252>
            VCU.ReadEvent(EV_BMS_SYSTEM_FAILURE);
 8028aa6:	4b0d      	ldr	r3, [pc, #52]	; (8028adc <BMS_SetEvents+0x274>)
 8028aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8028aaa:	f04f 0000 	mov.w	r0, #0
 8028aae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8028ab2:	4798      	blx	r3
 8028ab4:	4603      	mov	r3, r0
            VCU.ReadEvent(EV_BMS_OVER_DISCHARGE_CAPACITY) ||
 8028ab6:	2b00      	cmp	r3, #0
 8028ab8:	d001      	beq.n	8028abe <BMS_SetEvents+0x256>
 8028aba:	2301      	movs	r3, #1
 8028abc:	e000      	b.n	8028ac0 <BMS_SetEvents+0x258>
 8028abe:	2300      	movs	r3, #0
    BMS.d.warning = VCU.ReadEvent(EV_BMS_SHORT_CIRCUIT) ||
 8028ac0:	b2da      	uxtb	r2, r3
 8028ac2:	4b07      	ldr	r3, [pc, #28]	; (8028ae0 <BMS_SetEvents+0x278>)
 8028ac4:	70da      	strb	r2, [r3, #3]

    // Handle overheat
    HAL_GPIO_WritePin(EXT_BMS_FAN_PWR_GPIO_Port, EXT_BMS_FAN_PWR_Pin, BMS.d.overheat);
 8028ac6:	4b06      	ldr	r3, [pc, #24]	; (8028ae0 <BMS_SetEvents+0x278>)
 8028ac8:	789b      	ldrb	r3, [r3, #2]
 8028aca:	461a      	mov	r2, r3
 8028acc:	2140      	movs	r1, #64	; 0x40
 8028ace:	4805      	ldr	r0, [pc, #20]	; (8028ae4 <BMS_SetEvents+0x27c>)
 8028ad0:	f007 fb3e 	bl	8030150 <HAL_GPIO_WritePin>
}
 8028ad4:	bf00      	nop
 8028ad6:	3708      	adds	r7, #8
 8028ad8:	46bd      	mov	sp, r7
 8028ada:	bd80      	pop	{r7, pc}
 8028adc:	20000228 	.word	0x20000228
 8028ae0:	20000178 	.word	0x20000178
 8028ae4:	40020c00 	.word	0x40020c00

08028ae8 <BMS_CheckRun>:

uint8_t BMS_CheckRun(uint8_t state) {
 8028ae8:	b480      	push	{r7}
 8028aea:	b085      	sub	sp, #20
 8028aec:	af00      	add	r7, sp, #0
 8028aee:	4603      	mov	r3, r0
 8028af0:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < BMS_COUNT; i++) {
 8028af2:	2300      	movs	r3, #0
 8028af4:	73fb      	strb	r3, [r7, #15]
 8028af6:	e010      	b.n	8028b1a <BMS_CheckRun+0x32>
        if (BMS.d.pack[i].started != state) {
 8028af8:	7bfa      	ldrb	r2, [r7, #15]
 8028afa:	490d      	ldr	r1, [pc, #52]	; (8028b30 <BMS_CheckRun+0x48>)
 8028afc:	4613      	mov	r3, r2
 8028afe:	00db      	lsls	r3, r3, #3
 8028b00:	1a9b      	subs	r3, r3, r2
 8028b02:	009b      	lsls	r3, r3, #2
 8028b04:	440b      	add	r3, r1
 8028b06:	331b      	adds	r3, #27
 8028b08:	781b      	ldrb	r3, [r3, #0]
 8028b0a:	79fa      	ldrb	r2, [r7, #7]
 8028b0c:	429a      	cmp	r2, r3
 8028b0e:	d001      	beq.n	8028b14 <BMS_CheckRun+0x2c>
            return 0;
 8028b10:	2300      	movs	r3, #0
 8028b12:	e006      	b.n	8028b22 <BMS_CheckRun+0x3a>
    for (uint8_t i = 0; i < BMS_COUNT; i++) {
 8028b14:	7bfb      	ldrb	r3, [r7, #15]
 8028b16:	3301      	adds	r3, #1
 8028b18:	73fb      	strb	r3, [r7, #15]
 8028b1a:	7bfb      	ldrb	r3, [r7, #15]
 8028b1c:	2b01      	cmp	r3, #1
 8028b1e:	d9eb      	bls.n	8028af8 <BMS_CheckRun+0x10>
        }
    }
    return 1;
 8028b20:	2301      	movs	r3, #1
}
 8028b22:	4618      	mov	r0, r3
 8028b24:	3714      	adds	r7, #20
 8028b26:	46bd      	mov	sp, r7
 8028b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028b2c:	4770      	bx	lr
 8028b2e:	bf00      	nop
 8028b30:	20000178 	.word	0x20000178

08028b34 <BMS_CheckState>:

uint8_t BMS_CheckState(BMS_STATE state) {
 8028b34:	b480      	push	{r7}
 8028b36:	b085      	sub	sp, #20
 8028b38:	af00      	add	r7, sp, #0
 8028b3a:	4603      	mov	r3, r0
 8028b3c:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < BMS_COUNT; i++) {
 8028b3e:	2300      	movs	r3, #0
 8028b40:	73fb      	strb	r3, [r7, #15]
 8028b42:	e010      	b.n	8028b66 <BMS_CheckState+0x32>
        if (BMS.d.pack[i].state != state) {
 8028b44:	7bfa      	ldrb	r2, [r7, #15]
 8028b46:	490d      	ldr	r1, [pc, #52]	; (8028b7c <BMS_CheckState+0x48>)
 8028b48:	4613      	mov	r3, r2
 8028b4a:	00db      	lsls	r3, r3, #3
 8028b4c:	1a9b      	subs	r3, r3, r2
 8028b4e:	009b      	lsls	r3, r3, #2
 8028b50:	440b      	add	r3, r1
 8028b52:	331a      	adds	r3, #26
 8028b54:	781b      	ldrb	r3, [r3, #0]
 8028b56:	79fa      	ldrb	r2, [r7, #7]
 8028b58:	429a      	cmp	r2, r3
 8028b5a:	d001      	beq.n	8028b60 <BMS_CheckState+0x2c>
            return 0;
 8028b5c:	2300      	movs	r3, #0
 8028b5e:	e006      	b.n	8028b6e <BMS_CheckState+0x3a>
    for (uint8_t i = 0; i < BMS_COUNT; i++) {
 8028b60:	7bfb      	ldrb	r3, [r7, #15]
 8028b62:	3301      	adds	r3, #1
 8028b64:	73fb      	strb	r3, [r7, #15]
 8028b66:	7bfb      	ldrb	r3, [r7, #15]
 8028b68:	2b01      	cmp	r3, #1
 8028b6a:	d9eb      	bls.n	8028b44 <BMS_CheckState+0x10>
        }
    }
    return 1;
 8028b6c:	2301      	movs	r3, #1
}
 8028b6e:	4618      	mov	r0, r3
 8028b70:	3714      	adds	r7, #20
 8028b72:	46bd      	mov	sp, r7
 8028b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028b78:	4770      	bx	lr
 8028b7a:	bf00      	nop
 8028b7c:	20000178 	.word	0x20000178

08028b80 <BMS_MergeData>:

void BMS_MergeData(void) {
 8028b80:	b580      	push	{r7, lr}
 8028b82:	b084      	sub	sp, #16
 8028b84:	af00      	add	r7, sp, #0
    uint16_t flags = 0;
 8028b86:	2300      	movs	r3, #0
 8028b88:	81fb      	strh	r3, [r7, #14]
    uint8_t soc = 0, device = 0;
 8028b8a:	2300      	movs	r3, #0
 8028b8c:	737b      	strb	r3, [r7, #13]
 8028b8e:	2300      	movs	r3, #0
 8028b90:	733b      	strb	r3, [r7, #12]

    // Merge flags (OR-ed)
    for (uint8_t i = 0; i < BMS_COUNT; i++) {
 8028b92:	2300      	movs	r3, #0
 8028b94:	72fb      	strb	r3, [r7, #11]
 8028b96:	e00e      	b.n	8028bb6 <BMS_MergeData+0x36>
        flags |= BMS.d.pack[i].flag;
 8028b98:	7afa      	ldrb	r2, [r7, #11]
 8028b9a:	4929      	ldr	r1, [pc, #164]	; (8028c40 <BMS_MergeData+0xc0>)
 8028b9c:	4613      	mov	r3, r2
 8028b9e:	00db      	lsls	r3, r3, #3
 8028ba0:	1a9b      	subs	r3, r3, r2
 8028ba2:	009b      	lsls	r3, r3, #2
 8028ba4:	440b      	add	r3, r1
 8028ba6:	3318      	adds	r3, #24
 8028ba8:	881a      	ldrh	r2, [r3, #0]
 8028baa:	89fb      	ldrh	r3, [r7, #14]
 8028bac:	4313      	orrs	r3, r2
 8028bae:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < BMS_COUNT; i++) {
 8028bb0:	7afb      	ldrb	r3, [r7, #11]
 8028bb2:	3301      	adds	r3, #1
 8028bb4:	72fb      	strb	r3, [r7, #11]
 8028bb6:	7afb      	ldrb	r3, [r7, #11]
 8028bb8:	2b01      	cmp	r3, #1
 8028bba:	d9ed      	bls.n	8028b98 <BMS_MergeData+0x18>
    }
    BMS_SetEvents(flags);
 8028bbc:	89fb      	ldrh	r3, [r7, #14]
 8028bbe:	4618      	mov	r0, r3
 8028bc0:	f7ff fe52 	bl	8028868 <BMS_SetEvents>

    // Average SOC
    for (uint8_t i = 0; i < BMS_COUNT; i++) {
 8028bc4:	2300      	movs	r3, #0
 8028bc6:	72bb      	strb	r3, [r7, #10]
 8028bc8:	e027      	b.n	8028c1a <BMS_MergeData+0x9a>
        if (BMS.d.pack[i].started == 1) {
 8028bca:	7aba      	ldrb	r2, [r7, #10]
 8028bcc:	491c      	ldr	r1, [pc, #112]	; (8028c40 <BMS_MergeData+0xc0>)
 8028bce:	4613      	mov	r3, r2
 8028bd0:	00db      	lsls	r3, r3, #3
 8028bd2:	1a9b      	subs	r3, r3, r2
 8028bd4:	009b      	lsls	r3, r3, #2
 8028bd6:	440b      	add	r3, r1
 8028bd8:	331b      	adds	r3, #27
 8028bda:	781b      	ldrb	r3, [r3, #0]
 8028bdc:	2b01      	cmp	r3, #1
 8028bde:	d119      	bne.n	8028c14 <BMS_MergeData+0x94>
            soc += BMS.d.pack[i].soc;
 8028be0:	7b7b      	ldrb	r3, [r7, #13]
 8028be2:	ee07 3a90 	vmov	s15, r3
 8028be6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8028bea:	7aba      	ldrb	r2, [r7, #10]
 8028bec:	4914      	ldr	r1, [pc, #80]	; (8028c40 <BMS_MergeData+0xc0>)
 8028bee:	4613      	mov	r3, r2
 8028bf0:	00db      	lsls	r3, r3, #3
 8028bf2:	1a9b      	subs	r3, r3, r2
 8028bf4:	009b      	lsls	r3, r3, #2
 8028bf6:	440b      	add	r3, r1
 8028bf8:	3310      	adds	r3, #16
 8028bfa:	edd3 7a00 	vldr	s15, [r3]
 8028bfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8028c02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8028c06:	edc7 7a01 	vstr	s15, [r7, #4]
 8028c0a:	793b      	ldrb	r3, [r7, #4]
 8028c0c:	737b      	strb	r3, [r7, #13]
            device++;
 8028c0e:	7b3b      	ldrb	r3, [r7, #12]
 8028c10:	3301      	adds	r3, #1
 8028c12:	733b      	strb	r3, [r7, #12]
    for (uint8_t i = 0; i < BMS_COUNT; i++) {
 8028c14:	7abb      	ldrb	r3, [r7, #10]
 8028c16:	3301      	adds	r3, #1
 8028c18:	72bb      	strb	r3, [r7, #10]
 8028c1a:	7abb      	ldrb	r3, [r7, #10]
 8028c1c:	2b01      	cmp	r3, #1
 8028c1e:	d9d4      	bls.n	8028bca <BMS_MergeData+0x4a>
        }
    }
    BMS.d.soc = device ? (soc / device) : soc;
 8028c20:	7b3b      	ldrb	r3, [r7, #12]
 8028c22:	2b00      	cmp	r3, #0
 8028c24:	d005      	beq.n	8028c32 <BMS_MergeData+0xb2>
 8028c26:	7b7a      	ldrb	r2, [r7, #13]
 8028c28:	7b3b      	ldrb	r3, [r7, #12]
 8028c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8028c2e:	b2db      	uxtb	r3, r3
 8028c30:	e000      	b.n	8028c34 <BMS_MergeData+0xb4>
 8028c32:	7b7b      	ldrb	r3, [r7, #13]
 8028c34:	4a02      	ldr	r2, [pc, #8]	; (8028c40 <BMS_MergeData+0xc0>)
 8028c36:	7053      	strb	r3, [r2, #1]
}
 8028c38:	bf00      	nop
 8028c3a:	3710      	adds	r7, #16
 8028c3c:	46bd      	mov	sp, r7
 8028c3e:	bd80      	pop	{r7, pc}
 8028c40:	20000178 	.word	0x20000178
 8028c44:	00000000 	.word	0x00000000

08028c48 <BMS_CAN_RX_Param1>:

/* ====================================== CAN RX =================================== */
void BMS_CAN_RX_Param1(void) {
 8028c48:	b590      	push	{r4, r7, lr}
 8028c4a:	b083      	sub	sp, #12
 8028c4c:	af00      	add	r7, sp, #0
    CAN_DATA *data = &(CB.rx.data);
 8028c4e:	4b58      	ldr	r3, [pc, #352]	; (8028db0 <BMS_CAN_RX_Param1+0x168>)
 8028c50:	607b      	str	r3, [r7, #4]
    uint8_t index = BMS.GetIndex(CB.rx.header.ExtId & BMS_ID_MASK);
 8028c52:	4b58      	ldr	r3, [pc, #352]	; (8028db4 <BMS_CAN_RX_Param1+0x16c>)
 8028c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8028c56:	4a58      	ldr	r2, [pc, #352]	; (8028db8 <BMS_CAN_RX_Param1+0x170>)
 8028c58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8028c5a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8028c5e:	4610      	mov	r0, r2
 8028c60:	4798      	blx	r3
 8028c62:	4603      	mov	r3, r0
 8028c64:	70fb      	strb	r3, [r7, #3]

    // read the content
    BMS.d.pack[index].voltage = data->u16[0] * 0.01;
 8028c66:	687b      	ldr	r3, [r7, #4]
 8028c68:	881b      	ldrh	r3, [r3, #0]
 8028c6a:	4618      	mov	r0, r3
 8028c6c:	f7f7 fc92 	bl	8020594 <__aeabi_i2d>
 8028c70:	a34b      	add	r3, pc, #300	; (adr r3, 8028da0 <BMS_CAN_RX_Param1+0x158>)
 8028c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028c76:	f7f7 fcf7 	bl	8020668 <__aeabi_dmul>
 8028c7a:	4603      	mov	r3, r0
 8028c7c:	460c      	mov	r4, r1
 8028c7e:	461a      	mov	r2, r3
 8028c80:	4623      	mov	r3, r4
 8028c82:	78fc      	ldrb	r4, [r7, #3]
 8028c84:	4610      	mov	r0, r2
 8028c86:	4619      	mov	r1, r3
 8028c88:	f7f7 ffe6 	bl	8020c58 <__aeabi_d2f>
 8028c8c:	4601      	mov	r1, r0
 8028c8e:	4a49      	ldr	r2, [pc, #292]	; (8028db4 <BMS_CAN_RX_Param1+0x16c>)
 8028c90:	4623      	mov	r3, r4
 8028c92:	00db      	lsls	r3, r3, #3
 8028c94:	1b1b      	subs	r3, r3, r4
 8028c96:	009b      	lsls	r3, r3, #2
 8028c98:	4413      	add	r3, r2
 8028c9a:	3308      	adds	r3, #8
 8028c9c:	6019      	str	r1, [r3, #0]
    BMS.d.pack[index].current = (data->u16[1] * 0.01) - 50;
 8028c9e:	687b      	ldr	r3, [r7, #4]
 8028ca0:	885b      	ldrh	r3, [r3, #2]
 8028ca2:	4618      	mov	r0, r3
 8028ca4:	f7f7 fc76 	bl	8020594 <__aeabi_i2d>
 8028ca8:	a33d      	add	r3, pc, #244	; (adr r3, 8028da0 <BMS_CAN_RX_Param1+0x158>)
 8028caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028cae:	f7f7 fcdb 	bl	8020668 <__aeabi_dmul>
 8028cb2:	4603      	mov	r3, r0
 8028cb4:	460c      	mov	r4, r1
 8028cb6:	4618      	mov	r0, r3
 8028cb8:	4621      	mov	r1, r4
 8028cba:	f04f 0200 	mov.w	r2, #0
 8028cbe:	4b3f      	ldr	r3, [pc, #252]	; (8028dbc <BMS_CAN_RX_Param1+0x174>)
 8028cc0:	f7f7 fb1a 	bl	80202f8 <__aeabi_dsub>
 8028cc4:	4603      	mov	r3, r0
 8028cc6:	460c      	mov	r4, r1
 8028cc8:	461a      	mov	r2, r3
 8028cca:	4623      	mov	r3, r4
 8028ccc:	78fc      	ldrb	r4, [r7, #3]
 8028cce:	4610      	mov	r0, r2
 8028cd0:	4619      	mov	r1, r3
 8028cd2:	f7f7 ffc1 	bl	8020c58 <__aeabi_d2f>
 8028cd6:	4601      	mov	r1, r0
 8028cd8:	4a36      	ldr	r2, [pc, #216]	; (8028db4 <BMS_CAN_RX_Param1+0x16c>)
 8028cda:	4623      	mov	r3, r4
 8028cdc:	00db      	lsls	r3, r3, #3
 8028cde:	1b1b      	subs	r3, r3, r4
 8028ce0:	009b      	lsls	r3, r3, #2
 8028ce2:	4413      	add	r3, r2
 8028ce4:	330c      	adds	r3, #12
 8028ce6:	6019      	str	r1, [r3, #0]
    BMS.d.pack[index].soc = data->u16[2];
 8028ce8:	687b      	ldr	r3, [r7, #4]
 8028cea:	889b      	ldrh	r3, [r3, #4]
 8028cec:	78fa      	ldrb	r2, [r7, #3]
 8028cee:	ee07 3a90 	vmov	s15, r3
 8028cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8028cf6:	492f      	ldr	r1, [pc, #188]	; (8028db4 <BMS_CAN_RX_Param1+0x16c>)
 8028cf8:	4613      	mov	r3, r2
 8028cfa:	00db      	lsls	r3, r3, #3
 8028cfc:	1a9b      	subs	r3, r3, r2
 8028cfe:	009b      	lsls	r3, r3, #2
 8028d00:	440b      	add	r3, r1
 8028d02:	3310      	adds	r3, #16
 8028d04:	edc3 7a00 	vstr	s15, [r3]
    BMS.d.pack[index].temperature = (data->u16[3] * 0.1) - 40;
 8028d08:	687b      	ldr	r3, [r7, #4]
 8028d0a:	88db      	ldrh	r3, [r3, #6]
 8028d0c:	4618      	mov	r0, r3
 8028d0e:	f7f7 fc41 	bl	8020594 <__aeabi_i2d>
 8028d12:	a325      	add	r3, pc, #148	; (adr r3, 8028da8 <BMS_CAN_RX_Param1+0x160>)
 8028d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028d18:	f7f7 fca6 	bl	8020668 <__aeabi_dmul>
 8028d1c:	4603      	mov	r3, r0
 8028d1e:	460c      	mov	r4, r1
 8028d20:	4618      	mov	r0, r3
 8028d22:	4621      	mov	r1, r4
 8028d24:	f04f 0200 	mov.w	r2, #0
 8028d28:	4b25      	ldr	r3, [pc, #148]	; (8028dc0 <BMS_CAN_RX_Param1+0x178>)
 8028d2a:	f7f7 fae5 	bl	80202f8 <__aeabi_dsub>
 8028d2e:	4603      	mov	r3, r0
 8028d30:	460c      	mov	r4, r1
 8028d32:	461a      	mov	r2, r3
 8028d34:	4623      	mov	r3, r4
 8028d36:	78fc      	ldrb	r4, [r7, #3]
 8028d38:	4610      	mov	r0, r2
 8028d3a:	4619      	mov	r1, r3
 8028d3c:	f7f7 ff8c 	bl	8020c58 <__aeabi_d2f>
 8028d40:	4601      	mov	r1, r0
 8028d42:	4a1c      	ldr	r2, [pc, #112]	; (8028db4 <BMS_CAN_RX_Param1+0x16c>)
 8028d44:	4623      	mov	r3, r4
 8028d46:	00db      	lsls	r3, r3, #3
 8028d48:	1b1b      	subs	r3, r3, r4
 8028d4a:	009b      	lsls	r3, r3, #2
 8028d4c:	4413      	add	r3, r2
 8028d4e:	3314      	adds	r3, #20
 8028d50:	6019      	str	r1, [r3, #0]

    // read the id
    BMS.d.pack[index].id = CB.rx.header.ExtId & BMS_ID_MASK;
 8028d52:	4b19      	ldr	r3, [pc, #100]	; (8028db8 <BMS_CAN_RX_Param1+0x170>)
 8028d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028d56:	78fa      	ldrb	r2, [r7, #3]
 8028d58:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8028d5c:	4815      	ldr	r0, [pc, #84]	; (8028db4 <BMS_CAN_RX_Param1+0x16c>)
 8028d5e:	4613      	mov	r3, r2
 8028d60:	00db      	lsls	r3, r3, #3
 8028d62:	1a9b      	subs	r3, r3, r2
 8028d64:	009b      	lsls	r3, r3, #2
 8028d66:	4403      	add	r3, r0
 8028d68:	3304      	adds	r3, #4
 8028d6a:	6019      	str	r1, [r3, #0]
    BMS.d.pack[index].started = 1;
 8028d6c:	78fa      	ldrb	r2, [r7, #3]
 8028d6e:	4911      	ldr	r1, [pc, #68]	; (8028db4 <BMS_CAN_RX_Param1+0x16c>)
 8028d70:	4613      	mov	r3, r2
 8028d72:	00db      	lsls	r3, r3, #3
 8028d74:	1a9b      	subs	r3, r3, r2
 8028d76:	009b      	lsls	r3, r3, #2
 8028d78:	440b      	add	r3, r1
 8028d7a:	331b      	adds	r3, #27
 8028d7c:	2201      	movs	r2, #1
 8028d7e:	701a      	strb	r2, [r3, #0]
    BMS.d.pack[index].tick = _GetTickMS();
 8028d80:	78fc      	ldrb	r4, [r7, #3]
 8028d82:	f016 fca6 	bl	803f6d2 <_GetTickMS>
 8028d86:	4601      	mov	r1, r0
 8028d88:	4a0a      	ldr	r2, [pc, #40]	; (8028db4 <BMS_CAN_RX_Param1+0x16c>)
 8028d8a:	4623      	mov	r3, r4
 8028d8c:	00db      	lsls	r3, r3, #3
 8028d8e:	1b1b      	subs	r3, r3, r4
 8028d90:	009b      	lsls	r3, r3, #2
 8028d92:	4413      	add	r3, r2
 8028d94:	331c      	adds	r3, #28
 8028d96:	6019      	str	r1, [r3, #0]
}
 8028d98:	bf00      	nop
 8028d9a:	370c      	adds	r7, #12
 8028d9c:	46bd      	mov	sp, r7
 8028d9e:	bd90      	pop	{r4, r7, pc}
 8028da0:	47ae147b 	.word	0x47ae147b
 8028da4:	3f847ae1 	.word	0x3f847ae1
 8028da8:	9999999a 	.word	0x9999999a
 8028dac:	3fb99999 	.word	0x3fb99999
 8028db0:	200083b8 	.word	0x200083b8
 8028db4:	20000178 	.word	0x20000178
 8028db8:	20008378 	.word	0x20008378
 8028dbc:	40490000 	.word	0x40490000
 8028dc0:	40440000 	.word	0x40440000

08028dc4 <BMS_CAN_RX_Param2>:

void BMS_CAN_RX_Param2(void) {
 8028dc4:	b580      	push	{r7, lr}
 8028dc6:	b082      	sub	sp, #8
 8028dc8:	af00      	add	r7, sp, #0
    CAN_DATA *data = &(CB.rx.data);
 8028dca:	4b1d      	ldr	r3, [pc, #116]	; (8028e40 <BMS_CAN_RX_Param2+0x7c>)
 8028dcc:	607b      	str	r3, [r7, #4]
    uint8_t index = BMS.GetIndex(CB.rx.header.ExtId & BMS_ID_MASK);
 8028dce:	4b1d      	ldr	r3, [pc, #116]	; (8028e44 <BMS_CAN_RX_Param2+0x80>)
 8028dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8028dd2:	4a1d      	ldr	r2, [pc, #116]	; (8028e48 <BMS_CAN_RX_Param2+0x84>)
 8028dd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8028dd6:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8028dda:	4610      	mov	r0, r2
 8028ddc:	4798      	blx	r3
 8028dde:	4603      	mov	r3, r0
 8028de0:	70fb      	strb	r3, [r7, #3]

    // save flag
    BMS.d.pack[index].flag = data->u16[3];
 8028de2:	78fa      	ldrb	r2, [r7, #3]
 8028de4:	687b      	ldr	r3, [r7, #4]
 8028de6:	88d8      	ldrh	r0, [r3, #6]
 8028de8:	4916      	ldr	r1, [pc, #88]	; (8028e44 <BMS_CAN_RX_Param2+0x80>)
 8028dea:	4613      	mov	r3, r2
 8028dec:	00db      	lsls	r3, r3, #3
 8028dee:	1a9b      	subs	r3, r3, r2
 8028df0:	009b      	lsls	r3, r3, #2
 8028df2:	440b      	add	r3, r1
 8028df4:	3318      	adds	r3, #24
 8028df6:	4602      	mov	r2, r0
 8028df8:	801a      	strh	r2, [r3, #0]

    // save state
    BMS.d.pack[index].state = _L(_R1(data->u8[7], 4), 1) | _R1(data->u8[7], 5);
 8028dfa:	687b      	ldr	r3, [r7, #4]
 8028dfc:	79db      	ldrb	r3, [r3, #7]
 8028dfe:	091b      	lsrs	r3, r3, #4
 8028e00:	b2db      	uxtb	r3, r3
 8028e02:	005b      	lsls	r3, r3, #1
 8028e04:	b25b      	sxtb	r3, r3
 8028e06:	f003 0302 	and.w	r3, r3, #2
 8028e0a:	b25a      	sxtb	r2, r3
 8028e0c:	687b      	ldr	r3, [r7, #4]
 8028e0e:	79db      	ldrb	r3, [r3, #7]
 8028e10:	095b      	lsrs	r3, r3, #5
 8028e12:	b2db      	uxtb	r3, r3
 8028e14:	b25b      	sxtb	r3, r3
 8028e16:	f003 0301 	and.w	r3, r3, #1
 8028e1a:	b25b      	sxtb	r3, r3
 8028e1c:	4313      	orrs	r3, r2
 8028e1e:	b25b      	sxtb	r3, r3
 8028e20:	78fa      	ldrb	r2, [r7, #3]
 8028e22:	b2d8      	uxtb	r0, r3
 8028e24:	4907      	ldr	r1, [pc, #28]	; (8028e44 <BMS_CAN_RX_Param2+0x80>)
 8028e26:	4613      	mov	r3, r2
 8028e28:	00db      	lsls	r3, r3, #3
 8028e2a:	1a9b      	subs	r3, r3, r2
 8028e2c:	009b      	lsls	r3, r3, #2
 8028e2e:	440b      	add	r3, r1
 8028e30:	331a      	adds	r3, #26
 8028e32:	4602      	mov	r2, r0
 8028e34:	701a      	strb	r2, [r3, #0]
}
 8028e36:	bf00      	nop
 8028e38:	3708      	adds	r7, #8
 8028e3a:	46bd      	mov	sp, r7
 8028e3c:	bd80      	pop	{r7, pc}
 8028e3e:	bf00      	nop
 8028e40:	200083b8 	.word	0x200083b8
 8028e44:	20000178 	.word	0x20000178
 8028e48:	20008378 	.word	0x20008378

08028e4c <BMS_CAN_TX_Setting>:

/* ====================================== CAN TX =================================== */
uint8_t BMS_CAN_TX_Setting(uint8_t start, BMS_STATE state) {
 8028e4c:	b580      	push	{r7, lr}
 8028e4e:	b084      	sub	sp, #16
 8028e50:	af00      	add	r7, sp, #0
 8028e52:	4603      	mov	r3, r0
 8028e54:	460a      	mov	r2, r1
 8028e56:	71fb      	strb	r3, [r7, #7]
 8028e58:	4613      	mov	r3, r2
 8028e5a:	71bb      	strb	r3, [r7, #6]
    CAN_DATA *data = &(CB.tx.data);
 8028e5c:	4b0e      	ldr	r3, [pc, #56]	; (8028e98 <BMS_CAN_TX_Setting+0x4c>)
 8028e5e:	60fb      	str	r3, [r7, #12]

    // set message
    data->u8[0] = start;
 8028e60:	68fb      	ldr	r3, [r7, #12]
 8028e62:	79fa      	ldrb	r2, [r7, #7]
 8028e64:	701a      	strb	r2, [r3, #0]
    data->u8[0] |= _L(state, 1);
 8028e66:	68fb      	ldr	r3, [r7, #12]
 8028e68:	781b      	ldrb	r3, [r3, #0]
 8028e6a:	b25a      	sxtb	r2, r3
 8028e6c:	79bb      	ldrb	r3, [r7, #6]
 8028e6e:	005b      	lsls	r3, r3, #1
 8028e70:	b25b      	sxtb	r3, r3
 8028e72:	4313      	orrs	r3, r2
 8028e74:	b25b      	sxtb	r3, r3
 8028e76:	b2da      	uxtb	r2, r3
 8028e78:	68fb      	ldr	r3, [r7, #12]
 8028e7a:	701a      	strb	r2, [r3, #0]

    // set default header
    CANBUS_Header(&(CB.tx.header), CAND_BMS_SETTING, 1);
 8028e7c:	2201      	movs	r2, #1
 8028e7e:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 8028e82:	4806      	ldr	r0, [pc, #24]	; (8028e9c <BMS_CAN_TX_Setting+0x50>)
 8028e84:	f7fa fdc6 	bl	8023a14 <CANBUS_Header>
    // send message
    return CANBUS_Write(&(CB.tx));
 8028e88:	4804      	ldr	r0, [pc, #16]	; (8028e9c <BMS_CAN_TX_Setting+0x50>)
 8028e8a:	f7fa fe05 	bl	8023a98 <CANBUS_Write>
 8028e8e:	4603      	mov	r3, r0
}
 8028e90:	4618      	mov	r0, r3
 8028e92:	3710      	adds	r7, #16
 8028e94:	46bd      	mov	sp, r7
 8028e96:	bd80      	pop	{r7, pc}
 8028e98:	20008390 	.word	0x20008390
 8028e9c:	20008378 	.word	0x20008378

08028ea0 <HMI1_Init>:
        HMI1_RefreshIndex,
        HMI1_Power
};

/* Public functions implementation --------------------------------------------*/
void HMI1_Init(void) {
 8028ea0:	b480      	push	{r7}
 8028ea2:	b083      	sub	sp, #12
 8028ea4:	af00      	add	r7, sp, #0
    // reset HMI1 data
    HMI1.d.started = 0;
 8028ea6:	4b18      	ldr	r3, [pc, #96]	; (8028f08 <HMI1_Init+0x68>)
 8028ea8:	2200      	movs	r2, #0
 8028eaa:	701a      	strb	r2, [r3, #0]
    HMI1.d.status.mirroring = 0;
 8028eac:	4b16      	ldr	r3, [pc, #88]	; (8028f08 <HMI1_Init+0x68>)
 8028eae:	2200      	movs	r2, #0
 8028eb0:	705a      	strb	r2, [r3, #1]
    HMI1.d.status.warning = 0;
 8028eb2:	4b15      	ldr	r3, [pc, #84]	; (8028f08 <HMI1_Init+0x68>)
 8028eb4:	2200      	movs	r2, #0
 8028eb6:	709a      	strb	r2, [r3, #2]
    HMI1.d.status.overheat = 0;
 8028eb8:	4b13      	ldr	r3, [pc, #76]	; (8028f08 <HMI1_Init+0x68>)
 8028eba:	2200      	movs	r2, #0
 8028ebc:	70da      	strb	r2, [r3, #3]
    HMI1.d.status.finger = 0;
 8028ebe:	4b12      	ldr	r3, [pc, #72]	; (8028f08 <HMI1_Init+0x68>)
 8028ec0:	2200      	movs	r2, #0
 8028ec2:	711a      	strb	r2, [r3, #4]
    HMI1.d.status.keyless = 0;
 8028ec4:	4b10      	ldr	r3, [pc, #64]	; (8028f08 <HMI1_Init+0x68>)
 8028ec6:	2200      	movs	r2, #0
 8028ec8:	715a      	strb	r2, [r3, #5]
    HMI1.d.status.daylight = 0;
 8028eca:	4b0f      	ldr	r3, [pc, #60]	; (8028f08 <HMI1_Init+0x68>)
 8028ecc:	2200      	movs	r2, #0
 8028ece:	719a      	strb	r2, [r3, #6]
    // each HMIs
    for (uint8_t i = 0; i < HMI1_DEV_MAX; i++) {
 8028ed0:	2300      	movs	r3, #0
 8028ed2:	71fb      	strb	r3, [r7, #7]
 8028ed4:	e00f      	b.n	8028ef6 <HMI1_Init+0x56>
        HMI1.d.device[i].started = 0;
 8028ed6:	79fb      	ldrb	r3, [r7, #7]
 8028ed8:	4a0b      	ldr	r2, [pc, #44]	; (8028f08 <HMI1_Init+0x68>)
 8028eda:	3301      	adds	r3, #1
 8028edc:	2100      	movs	r1, #0
 8028ede:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
        HMI1.d.device[i].tick = 0;
 8028ee2:	79fb      	ldrb	r3, [r7, #7]
 8028ee4:	4a08      	ldr	r2, [pc, #32]	; (8028f08 <HMI1_Init+0x68>)
 8028ee6:	3301      	adds	r3, #1
 8028ee8:	00db      	lsls	r3, r3, #3
 8028eea:	4413      	add	r3, r2
 8028eec:	2200      	movs	r2, #0
 8028eee:	605a      	str	r2, [r3, #4]
    for (uint8_t i = 0; i < HMI1_DEV_MAX; i++) {
 8028ef0:	79fb      	ldrb	r3, [r7, #7]
 8028ef2:	3301      	adds	r3, #1
 8028ef4:	71fb      	strb	r3, [r7, #7]
 8028ef6:	79fb      	ldrb	r3, [r7, #7]
 8028ef8:	2b00      	cmp	r3, #0
 8028efa:	d0ec      	beq.n	8028ed6 <HMI1_Init+0x36>
    }
}
 8028efc:	bf00      	nop
 8028efe:	370c      	adds	r7, #12
 8028f00:	46bd      	mov	sp, r7
 8028f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028f06:	4770      	bx	lr
 8028f08:	200001e4 	.word	0x200001e4

08028f0c <HMI1_RefreshIndex>:

void HMI1_RefreshIndex(void) {
 8028f0c:	b580      	push	{r7, lr}
 8028f0e:	b082      	sub	sp, #8
 8028f10:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < HMI1_DEV_MAX; i++) {
 8028f12:	2300      	movs	r3, #0
 8028f14:	71fb      	strb	r3, [r7, #7]
 8028f16:	e015      	b.n	8028f44 <HMI1_RefreshIndex+0x38>
        if ((_GetTickMS() - HMI1.d.device[i].tick) > 1000) {
 8028f18:	f016 fbdb 	bl	803f6d2 <_GetTickMS>
 8028f1c:	4601      	mov	r1, r0
 8028f1e:	79fb      	ldrb	r3, [r7, #7]
 8028f20:	4a0c      	ldr	r2, [pc, #48]	; (8028f54 <HMI1_RefreshIndex+0x48>)
 8028f22:	3301      	adds	r3, #1
 8028f24:	00db      	lsls	r3, r3, #3
 8028f26:	4413      	add	r3, r2
 8028f28:	685b      	ldr	r3, [r3, #4]
 8028f2a:	1acb      	subs	r3, r1, r3
 8028f2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8028f30:	d905      	bls.n	8028f3e <HMI1_RefreshIndex+0x32>
            HMI1.d.device[i].started = 0;
 8028f32:	79fb      	ldrb	r3, [r7, #7]
 8028f34:	4a07      	ldr	r2, [pc, #28]	; (8028f54 <HMI1_RefreshIndex+0x48>)
 8028f36:	3301      	adds	r3, #1
 8028f38:	2100      	movs	r1, #0
 8028f3a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    for (uint8_t i = 0; i < HMI1_DEV_MAX; i++) {
 8028f3e:	79fb      	ldrb	r3, [r7, #7]
 8028f40:	3301      	adds	r3, #1
 8028f42:	71fb      	strb	r3, [r7, #7]
 8028f44:	79fb      	ldrb	r3, [r7, #7]
 8028f46:	2b00      	cmp	r3, #0
 8028f48:	d0e6      	beq.n	8028f18 <HMI1_RefreshIndex+0xc>
        }
    }
}
 8028f4a:	bf00      	nop
 8028f4c:	3708      	adds	r7, #8
 8028f4e:	46bd      	mov	sp, r7
 8028f50:	bd80      	pop	{r7, pc}
 8028f52:	bf00      	nop
 8028f54:	200001e4 	.word	0x200001e4

08028f58 <HMI1_Power>:

void HMI1_Power(uint8_t state) {
 8028f58:	b580      	push	{r7, lr}
 8028f5a:	b082      	sub	sp, #8
 8028f5c:	af00      	add	r7, sp, #0
 8028f5e:	4603      	mov	r3, r0
 8028f60:	71fb      	strb	r3, [r7, #7]
    // PNP transistor is Active Low
    HAL_GPIO_WritePin(EXT_HMI1_PWR_GPIO_Port, EXT_HMI1_PWR_Pin, state);
 8028f62:	79fb      	ldrb	r3, [r7, #7]
 8028f64:	461a      	mov	r2, r3
 8028f66:	2110      	movs	r1, #16
 8028f68:	4803      	ldr	r0, [pc, #12]	; (8028f78 <HMI1_Power+0x20>)
 8028f6a:	f007 f8f1 	bl	8030150 <HAL_GPIO_WritePin>
}
 8028f6e:	bf00      	nop
 8028f70:	3708      	adds	r7, #8
 8028f72:	46bd      	mov	sp, r7
 8028f74:	bd80      	pop	{r7, pc}
 8028f76:	bf00      	nop
 8028f78:	40020800 	.word	0x40020800

08028f7c <HMI1_CAN_RX_LeftState>:

/* ====================================== CAN RX =================================== */
void HMI1_CAN_RX_LeftState(void) {
 8028f7c:	b580      	push	{r7, lr}
 8028f7e:	af00      	add	r7, sp, #0
    // save state
    HMI1.d.device[HMI1_DEV_LEFT].started = 1;
 8028f80:	4b04      	ldr	r3, [pc, #16]	; (8028f94 <HMI1_CAN_RX_LeftState+0x18>)
 8028f82:	2201      	movs	r2, #1
 8028f84:	721a      	strb	r2, [r3, #8]
    HMI1.d.device[HMI1_DEV_LEFT].tick = _GetTickMS();
 8028f86:	f016 fba4 	bl	803f6d2 <_GetTickMS>
 8028f8a:	4602      	mov	r2, r0
 8028f8c:	4b01      	ldr	r3, [pc, #4]	; (8028f94 <HMI1_CAN_RX_LeftState+0x18>)
 8028f8e:	60da      	str	r2, [r3, #12]
}
 8028f90:	bf00      	nop
 8028f92:	bd80      	pop	{r7, pc}
 8028f94:	200001e4 	.word	0x200001e4

08028f98 <HMI1_CAN_RX_RightState>:

void HMI1_CAN_RX_RightState(void) {
 8028f98:	b580      	push	{r7, lr}
 8028f9a:	af00      	add	r7, sp, #0
    // save state
    HMI1.d.device[HMI1_DEV_RIGHT].started = 1;
 8028f9c:	4b04      	ldr	r3, [pc, #16]	; (8028fb0 <HMI1_CAN_RX_RightState+0x18>)
 8028f9e:	2201      	movs	r2, #1
 8028fa0:	741a      	strb	r2, [r3, #16]
    HMI1.d.device[HMI1_DEV_RIGHT].tick = _GetTickMS();
 8028fa2:	f016 fb96 	bl	803f6d2 <_GetTickMS>
 8028fa6:	4602      	mov	r2, r0
 8028fa8:	4b01      	ldr	r3, [pc, #4]	; (8028fb0 <HMI1_CAN_RX_RightState+0x18>)
 8028faa:	615a      	str	r2, [r3, #20]
}
 8028fac:	bf00      	nop
 8028fae:	bd80      	pop	{r7, pc}
 8028fb0:	200001e4 	.word	0x200001e4

08028fb4 <HMI2_Init>:
        HMI2_Refresh,
        HMI2_PowerOverCan
};

/* Public functions implementation --------------------------------------------*/
void HMI2_Init(void) {
 8028fb4:	b480      	push	{r7}
 8028fb6:	af00      	add	r7, sp, #0
    HMI2.d.started = 0;
 8028fb8:	4b05      	ldr	r3, [pc, #20]	; (8028fd0 <HMI2_Init+0x1c>)
 8028fba:	2200      	movs	r2, #0
 8028fbc:	705a      	strb	r2, [r3, #1]
    HMI2.d.tick = 0;
 8028fbe:	4b04      	ldr	r3, [pc, #16]	; (8028fd0 <HMI2_Init+0x1c>)
 8028fc0:	2200      	movs	r2, #0
 8028fc2:	605a      	str	r2, [r3, #4]
}
 8028fc4:	bf00      	nop
 8028fc6:	46bd      	mov	sp, r7
 8028fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028fcc:	4770      	bx	lr
 8028fce:	bf00      	nop
 8028fd0:	20000210 	.word	0x20000210

08028fd4 <HMI2_Refresh>:

void HMI2_Refresh(void) {
 8028fd4:	b580      	push	{r7, lr}
 8028fd6:	af00      	add	r7, sp, #0
    if ((_GetTickMS() - HMI2.d.tick) > 10000) {
 8028fd8:	f016 fb7b 	bl	803f6d2 <_GetTickMS>
 8028fdc:	4602      	mov	r2, r0
 8028fde:	4b06      	ldr	r3, [pc, #24]	; (8028ff8 <HMI2_Refresh+0x24>)
 8028fe0:	685b      	ldr	r3, [r3, #4]
 8028fe2:	1ad3      	subs	r3, r2, r3
 8028fe4:	f242 7210 	movw	r2, #10000	; 0x2710
 8028fe8:	4293      	cmp	r3, r2
 8028fea:	d902      	bls.n	8028ff2 <HMI2_Refresh+0x1e>
        HMI2.d.started = 0;
 8028fec:	4b02      	ldr	r3, [pc, #8]	; (8028ff8 <HMI2_Refresh+0x24>)
 8028fee:	2200      	movs	r2, #0
 8028ff0:	705a      	strb	r2, [r3, #1]
    }
}
 8028ff2:	bf00      	nop
 8028ff4:	bd80      	pop	{r7, pc}
 8028ff6:	bf00      	nop
 8028ff8:	20000210 	.word	0x20000210

08028ffc <HMI2_PowerOverCan>:

void HMI2_PowerOverCan(uint8_t state) {
 8028ffc:	b580      	push	{r7, lr}
 8028ffe:	b082      	sub	sp, #8
 8029000:	af00      	add	r7, sp, #0
 8029002:	4603      	mov	r3, r0
 8029004:	71fb      	strb	r3, [r7, #7]
    // past to thread handler
    HMI2.d.power = state;
 8029006:	4a06      	ldr	r2, [pc, #24]	; (8029020 <HMI2_PowerOverCan+0x24>)
 8029008:	79fb      	ldrb	r3, [r7, #7]
 802900a:	7013      	strb	r3, [r2, #0]
    osThreadFlagsSet(Hmi2PowerTaskHandle, EVT_HMI2POWER_CHANGED);
 802900c:	4b05      	ldr	r3, [pc, #20]	; (8029024 <HMI2_PowerOverCan+0x28>)
 802900e:	681b      	ldr	r3, [r3, #0]
 8029010:	2101      	movs	r1, #1
 8029012:	4618      	mov	r0, r3
 8029014:	f00e fbac 	bl	8037770 <osThreadFlagsSet>
}
 8029018:	bf00      	nop
 802901a:	3708      	adds	r7, #8
 802901c:	46bd      	mov	sp, r7
 802901e:	bd80      	pop	{r7, pc}
 8029020:	20000210 	.word	0x20000210
 8029024:	20008874 	.word	0x20008874

08029028 <StartHmi2PowerTask>:

/* ====================================== THREAD =================================== */
void StartHmi2PowerTask(void *argument) {
 8029028:	b580      	push	{r7, lr}
 802902a:	b086      	sub	sp, #24
 802902c:	af00      	add	r7, sp, #0
 802902e:	6078      	str	r0, [r7, #4]
    TickType_t tick;
    uint32_t notif;
    uint8_t activeHigh = 0;
 8029030:	2300      	movs	r3, #0
 8029032:	75fb      	strb	r3, [r7, #23]

    /* Infinite loop */
    for (;;) {
        // wait forever until triggered
        notif = osThreadFlagsWait(EVT_HMI2POWER_CHANGED, osFlagsWaitAny, osWaitForever);
 8029034:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8029038:	2100      	movs	r1, #0
 802903a:	2001      	movs	r0, #1
 802903c:	f00e fc4a 	bl	80378d4 <osThreadFlagsWait>
 8029040:	6138      	str	r0, [r7, #16]
        if (_RTOS_ValidThreadFlag(notif)) {
 8029042:	6938      	ldr	r0, [r7, #16]
 8029044:	f016 fb9e 	bl	803f784 <_RTOS_ValidThreadFlag>
 8029048:	4603      	mov	r3, r0
 802904a:	2b00      	cmp	r3, #0
 802904c:	d0f2      	beq.n	8029034 <StartHmi2PowerTask+0xc>
            // Handle power control
            if (HMI2.d.power) {
 802904e:	4b29      	ldr	r3, [pc, #164]	; (80290f4 <StartHmi2PowerTask+0xcc>)
 8029050:	781b      	ldrb	r3, [r3, #0]
 8029052:	2b00      	cmp	r3, #0
 8029054:	d048      	beq.n	80290e8 <StartHmi2PowerTask+0xc0>
                while (!HMI2.d.started) {
 8029056:	e024      	b.n	80290a2 <StartHmi2PowerTask+0x7a>
                    // turn ON
                    HAL_GPIO_WritePin(EXT_HMI2_PWR_GPIO_Port, EXT_HMI2_PWR_Pin, !activeHigh);
 8029058:	7dfb      	ldrb	r3, [r7, #23]
 802905a:	2b00      	cmp	r3, #0
 802905c:	bf0c      	ite	eq
 802905e:	2301      	moveq	r3, #1
 8029060:	2300      	movne	r3, #0
 8029062:	b2db      	uxtb	r3, r3
 8029064:	461a      	mov	r2, r3
 8029066:	2120      	movs	r1, #32
 8029068:	4823      	ldr	r0, [pc, #140]	; (80290f8 <StartHmi2PowerTask+0xd0>)
 802906a:	f007 f871 	bl	8030150 <HAL_GPIO_WritePin>
                    _DelayMS(100);
 802906e:	2064      	movs	r0, #100	; 0x64
 8029070:	f016 fb24 	bl	803f6bc <_DelayMS>
                    HAL_GPIO_WritePin(EXT_HMI2_PWR_GPIO_Port, EXT_HMI2_PWR_Pin, activeHigh);
 8029074:	7dfb      	ldrb	r3, [r7, #23]
 8029076:	461a      	mov	r2, r3
 8029078:	2120      	movs	r1, #32
 802907a:	481f      	ldr	r0, [pc, #124]	; (80290f8 <StartHmi2PowerTask+0xd0>)
 802907c:	f007 f868 	bl	8030150 <HAL_GPIO_WritePin>

                    // wait until turned ON
                    tick = _GetTickMS();
 8029080:	f016 fb27 	bl	803f6d2 <_GetTickMS>
 8029084:	60f8      	str	r0, [r7, #12]
                    while (_GetTickMS() - tick < (90 * 1000)) {
 8029086:	e004      	b.n	8029092 <StartHmi2PowerTask+0x6a>
                        // already ON
                        if (HMI2.d.started) {
 8029088:	4b1a      	ldr	r3, [pc, #104]	; (80290f4 <StartHmi2PowerTask+0xcc>)
 802908a:	785b      	ldrb	r3, [r3, #1]
 802908c:	2b00      	cmp	r3, #0
 802908e:	d000      	beq.n	8029092 <StartHmi2PowerTask+0x6a>
                            break;
 8029090:	e007      	b.n	80290a2 <StartHmi2PowerTask+0x7a>
                    while (_GetTickMS() - tick < (90 * 1000)) {
 8029092:	f016 fb1e 	bl	803f6d2 <_GetTickMS>
 8029096:	4602      	mov	r2, r0
 8029098:	68fb      	ldr	r3, [r7, #12]
 802909a:	1ad3      	subs	r3, r2, r3
 802909c:	4a17      	ldr	r2, [pc, #92]	; (80290fc <StartHmi2PowerTask+0xd4>)
 802909e:	4293      	cmp	r3, r2
 80290a0:	d9f2      	bls.n	8029088 <StartHmi2PowerTask+0x60>
                while (!HMI2.d.started) {
 80290a2:	4b14      	ldr	r3, [pc, #80]	; (80290f4 <StartHmi2PowerTask+0xcc>)
 80290a4:	785b      	ldrb	r3, [r3, #1]
 80290a6:	2b00      	cmp	r3, #0
 80290a8:	d0d6      	beq.n	8029058 <StartHmi2PowerTask+0x30>
 80290aa:	e7c3      	b.n	8029034 <StartHmi2PowerTask+0xc>
                    }
                }
            } else {
                while (HMI2.d.started) {
                    // wait until turned OFF by CAN
                    tick = _GetTickMS();
 80290ac:	f016 fb11 	bl	803f6d2 <_GetTickMS>
 80290b0:	60f8      	str	r0, [r7, #12]
                    while (_GetTickMS() - tick < (30 * 1000)) {
 80290b2:	e003      	b.n	80290bc <StartHmi2PowerTask+0x94>
                        // already OFF
                        if (!HMI2.d.started) {
 80290b4:	4b0f      	ldr	r3, [pc, #60]	; (80290f4 <StartHmi2PowerTask+0xcc>)
 80290b6:	785b      	ldrb	r3, [r3, #1]
 80290b8:	2b00      	cmp	r3, #0
 80290ba:	d009      	beq.n	80290d0 <StartHmi2PowerTask+0xa8>
                    while (_GetTickMS() - tick < (30 * 1000)) {
 80290bc:	f016 fb09 	bl	803f6d2 <_GetTickMS>
 80290c0:	4602      	mov	r2, r0
 80290c2:	68fb      	ldr	r3, [r7, #12]
 80290c4:	1ad3      	subs	r3, r2, r3
 80290c6:	f247 522f 	movw	r2, #29999	; 0x752f
 80290ca:	4293      	cmp	r3, r2
 80290cc:	d9f2      	bls.n	80290b4 <StartHmi2PowerTask+0x8c>
 80290ce:	e000      	b.n	80290d2 <StartHmi2PowerTask+0xaa>
                            break;
 80290d0:	bf00      	nop
                        }
                    }

                    // force turn OFF
                    HAL_GPIO_WritePin(EXT_HMI2_PWR_GPIO_Port, EXT_HMI2_PWR_Pin, !activeHigh);
 80290d2:	7dfb      	ldrb	r3, [r7, #23]
 80290d4:	2b00      	cmp	r3, #0
 80290d6:	bf0c      	ite	eq
 80290d8:	2301      	moveq	r3, #1
 80290da:	2300      	movne	r3, #0
 80290dc:	b2db      	uxtb	r3, r3
 80290de:	461a      	mov	r2, r3
 80290e0:	2120      	movs	r1, #32
 80290e2:	4805      	ldr	r0, [pc, #20]	; (80290f8 <StartHmi2PowerTask+0xd0>)
 80290e4:	f007 f834 	bl	8030150 <HAL_GPIO_WritePin>
                while (HMI2.d.started) {
 80290e8:	4b02      	ldr	r3, [pc, #8]	; (80290f4 <StartHmi2PowerTask+0xcc>)
 80290ea:	785b      	ldrb	r3, [r3, #1]
 80290ec:	2b00      	cmp	r3, #0
 80290ee:	d1dd      	bne.n	80290ac <StartHmi2PowerTask+0x84>
        notif = osThreadFlagsWait(EVT_HMI2POWER_CHANGED, osFlagsWaitAny, osWaitForever);
 80290f0:	e7a0      	b.n	8029034 <StartHmi2PowerTask+0xc>
 80290f2:	bf00      	nop
 80290f4:	20000210 	.word	0x20000210
 80290f8:	40020800 	.word	0x40020800
 80290fc:	00015f8f 	.word	0x00015f8f

08029100 <HMI2_CAN_RX_State>:
        }
    }
}

/* ====================================== CAN RX =================================== */
void HMI2_CAN_RX_State(void) {
 8029100:	b580      	push	{r7, lr}
 8029102:	b082      	sub	sp, #8
 8029104:	af00      	add	r7, sp, #0
    CAN_DATA *data = &(CB.rx.data);
 8029106:	4b0a      	ldr	r3, [pc, #40]	; (8029130 <HMI2_CAN_RX_State+0x30>)
 8029108:	607b      	str	r3, [r7, #4]

    // read message
    HMI1.d.status.mirroring = _R1(data->u8[0], 0);
 802910a:	687b      	ldr	r3, [r7, #4]
 802910c:	781b      	ldrb	r3, [r3, #0]
 802910e:	f003 0301 	and.w	r3, r3, #1
 8029112:	b2da      	uxtb	r2, r3
 8029114:	4b07      	ldr	r3, [pc, #28]	; (8029134 <HMI2_CAN_RX_State+0x34>)
 8029116:	705a      	strb	r2, [r3, #1]

    // save state
    HMI2.d.started = 1;
 8029118:	4b07      	ldr	r3, [pc, #28]	; (8029138 <HMI2_CAN_RX_State+0x38>)
 802911a:	2201      	movs	r2, #1
 802911c:	705a      	strb	r2, [r3, #1]
    HMI2.d.tick = _GetTickMS();
 802911e:	f016 fad8 	bl	803f6d2 <_GetTickMS>
 8029122:	4602      	mov	r2, r0
 8029124:	4b04      	ldr	r3, [pc, #16]	; (8029138 <HMI2_CAN_RX_State+0x38>)
 8029126:	605a      	str	r2, [r3, #4]
}
 8029128:	bf00      	nop
 802912a:	3708      	adds	r7, #8
 802912c:	46bd      	mov	sp, r7
 802912e:	bd80      	pop	{r7, pc}
 8029130:	200083b8 	.word	0x200083b8
 8029134:	200001e4 	.word	0x200001e4
 8029138:	20000210 	.word	0x20000210

0802913c <VCU_Init>:
        VCU_ReadEvent,
        VCU_CheckMainPower,
};

/* Public functions implementation --------------------------------------------*/
void VCU_Init(void) {
 802913c:	b490      	push	{r4, r7}
 802913e:	af00      	add	r7, sp, #0
    // reset VCU data
    VCU.d.state.vehicle = VEHICLE_INDEPENDENT;
 8029140:	4b1a      	ldr	r3, [pc, #104]	; (80291ac <VCU_Init+0x70>)
 8029142:	2200      	movs	r2, #0
 8029144:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    VCU.d.state.starter = 0;
 8029148:	4b18      	ldr	r3, [pc, #96]	; (80291ac <VCU_Init+0x70>)
 802914a:	2200      	movs	r2, #0
 802914c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    VCU.d.state.knob = 0;
 8029150:	4b16      	ldr	r3, [pc, #88]	; (80291ac <VCU_Init+0x70>)
 8029152:	2200      	movs	r2, #0
 8029154:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    VCU.d.state.independent = 1;
 8029158:	4b14      	ldr	r3, [pc, #80]	; (80291ac <VCU_Init+0x70>)
 802915a:	2201      	movs	r2, #1
 802915c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

    VCU.d.interval = RPT_INTERVAL_SIMPLE;
 8029160:	4b12      	ldr	r3, [pc, #72]	; (80291ac <VCU_Init+0x70>)
 8029162:	2205      	movs	r2, #5
 8029164:	80da      	strh	r2, [r3, #6]
    VCU.d.driver_id = DRIVER_ID_NONE;
 8029166:	4b11      	ldr	r3, [pc, #68]	; (80291ac <VCU_Init+0x70>)
 8029168:	22ff      	movs	r2, #255	; 0xff
 802916a:	711a      	strb	r2, [r3, #4]
    VCU.d.volume = 0;
 802916c:	4b0f      	ldr	r3, [pc, #60]	; (80291ac <VCU_Init+0x70>)
 802916e:	2200      	movs	r2, #0
 8029170:	721a      	strb	r2, [r3, #8]
    VCU.d.speed = 0;
 8029172:	4b0e      	ldr	r3, [pc, #56]	; (80291ac <VCU_Init+0x70>)
 8029174:	2200      	movs	r2, #0
 8029176:	725a      	strb	r2, [r3, #9]
    VCU.d.odometer = 0;
 8029178:	4b0c      	ldr	r3, [pc, #48]	; (80291ac <VCU_Init+0x70>)
 802917a:	2200      	movs	r2, #0
 802917c:	60da      	str	r2, [r3, #12]
    VCU.d.events = 0;
 802917e:	4a0b      	ldr	r2, [pc, #44]	; (80291ac <VCU_Init+0x70>)
 8029180:	f04f 0300 	mov.w	r3, #0
 8029184:	f04f 0400 	mov.w	r4, #0
 8029188:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

    VCU.d.tick.keyless = 0;
 802918c:	4b07      	ldr	r3, [pc, #28]	; (80291ac <VCU_Init+0x70>)
 802918e:	2200      	movs	r2, #0
 8029190:	63da      	str	r2, [r3, #60]	; 0x3c
    //  VCU.d.tick.finger = 0;

    VCU.d.seq_id.report = 0;
 8029192:	4b06      	ldr	r3, [pc, #24]	; (80291ac <VCU_Init+0x70>)
 8029194:	2200      	movs	r2, #0
 8029196:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    VCU.d.seq_id.response = 0;
 802919a:	4b04      	ldr	r3, [pc, #16]	; (80291ac <VCU_Init+0x70>)
 802919c:	2200      	movs	r2, #0
 802919e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
}
 80291a2:	bf00      	nop
 80291a4:	46bd      	mov	sp, r7
 80291a6:	bc90      	pop	{r4, r7}
 80291a8:	4770      	bx	lr
 80291aa:	bf00      	nop
 80291ac:	20000228 	.word	0x20000228

080291b0 <VCU_SetEvent>:

void VCU_SetEvent(uint64_t event_id, uint8_t value) {
 80291b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80291b4:	b085      	sub	sp, #20
 80291b6:	af00      	add	r7, sp, #0
 80291b8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80291bc:	4613      	mov	r3, r2
 80291be:	71fb      	strb	r3, [r7, #7]
    if (value & 1) {
 80291c0:	79fb      	ldrb	r3, [r7, #7]
 80291c2:	f003 0301 	and.w	r3, r3, #1
 80291c6:	2b00      	cmp	r3, #0
 80291c8:	d024      	beq.n	8029214 <VCU_SetEvent+0x64>
        BV(VCU.d.events, _BitPosition(event_id));
 80291ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80291ce:	f016 fb1f 	bl	803f810 <_BitPosition>
 80291d2:	4603      	mov	r3, r0
 80291d4:	461a      	mov	r2, r3
 80291d6:	f04f 0301 	mov.w	r3, #1
 80291da:	f04f 0400 	mov.w	r4, #0
 80291de:	f1a2 0020 	sub.w	r0, r2, #32
 80291e2:	f1c2 0120 	rsb	r1, r2, #32
 80291e6:	fa04 f902 	lsl.w	r9, r4, r2
 80291ea:	fa03 f000 	lsl.w	r0, r3, r0
 80291ee:	ea49 0900 	orr.w	r9, r9, r0
 80291f2:	fa23 f101 	lsr.w	r1, r3, r1
 80291f6:	ea49 0901 	orr.w	r9, r9, r1
 80291fa:	fa03 f802 	lsl.w	r8, r3, r2
 80291fe:	4b1b      	ldr	r3, [pc, #108]	; (802926c <VCU_SetEvent+0xbc>)
 8029200:	e9d3 120c 	ldrd	r1, r2, [r3, #48]	; 0x30
 8029204:	ea41 0308 	orr.w	r3, r1, r8
 8029208:	ea42 0409 	orr.w	r4, r2, r9
 802920c:	4a17      	ldr	r2, [pc, #92]	; (802926c <VCU_SetEvent+0xbc>)
 802920e:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    } else {
        BC(VCU.d.events, _BitPosition(event_id));
    }
}
 8029212:	e025      	b.n	8029260 <VCU_SetEvent+0xb0>
        BC(VCU.d.events, _BitPosition(event_id));
 8029214:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8029218:	f016 fafa 	bl	803f810 <_BitPosition>
 802921c:	4603      	mov	r3, r0
 802921e:	4619      	mov	r1, r3
 8029220:	f04f 0201 	mov.w	r2, #1
 8029224:	f04f 0300 	mov.w	r3, #0
 8029228:	f1a1 0620 	sub.w	r6, r1, #32
 802922c:	f1c1 0020 	rsb	r0, r1, #32
 8029230:	fa03 f501 	lsl.w	r5, r3, r1
 8029234:	fa02 f606 	lsl.w	r6, r2, r6
 8029238:	4335      	orrs	r5, r6
 802923a:	fa22 f000 	lsr.w	r0, r2, r0
 802923e:	4305      	orrs	r5, r0
 8029240:	fa02 f401 	lsl.w	r4, r2, r1
 8029244:	ea6f 0104 	mvn.w	r1, r4
 8029248:	ea6f 0205 	mvn.w	r2, r5
 802924c:	4b07      	ldr	r3, [pc, #28]	; (802926c <VCU_SetEvent+0xbc>)
 802924e:	e9d3 560c 	ldrd	r5, r6, [r3, #48]	; 0x30
 8029252:	ea05 0301 	and.w	r3, r5, r1
 8029256:	ea06 0402 	and.w	r4, r6, r2
 802925a:	4a04      	ldr	r2, [pc, #16]	; (802926c <VCU_SetEvent+0xbc>)
 802925c:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
}
 8029260:	bf00      	nop
 8029262:	3714      	adds	r7, #20
 8029264:	46bd      	mov	sp, r7
 8029266:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802926a:	bf00      	nop
 802926c:	20000228 	.word	0x20000228

08029270 <VCU_ReadEvent>:

uint8_t VCU_ReadEvent(uint64_t event_id) {
 8029270:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8029274:	b083      	sub	sp, #12
 8029276:	af00      	add	r7, sp, #0
 8029278:	e9c7 0100 	strd	r0, r1, [r7]
    return (VCU.d.events & event_id) == event_id;
 802927c:	4b0b      	ldr	r3, [pc, #44]	; (80292ac <VCU_ReadEvent+0x3c>)
 802927e:	e9d3 120c 	ldrd	r1, r2, [r3, #48]	; 0x30
 8029282:	e9d7 3400 	ldrd	r3, r4, [r7]
 8029286:	ea03 0b01 	and.w	fp, r3, r1
 802928a:	ea04 0c02 	and.w	ip, r4, r2
 802928e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8029292:	4562      	cmp	r2, ip
 8029294:	bf06      	itte	eq
 8029296:	4559      	cmpeq	r1, fp
 8029298:	2301      	moveq	r3, #1
 802929a:	2300      	movne	r3, #0
 802929c:	b2db      	uxtb	r3, r3
}
 802929e:	4618      	mov	r0, r3
 80292a0:	370c      	adds	r7, #12
 80292a2:	46bd      	mov	sp, r7
 80292a4:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 80292a8:	4770      	bx	lr
 80292aa:	bf00      	nop
 80292ac:	20000228 	.word	0x20000228

080292b0 <VCU_CheckMainPower>:

void VCU_CheckMainPower(void) {
 80292b0:	b580      	push	{r7, lr}
 80292b2:	b082      	sub	sp, #8
 80292b4:	af00      	add	r7, sp, #0
    static TickType_t tick;
    static int8_t lastState = -1;
    uint8_t currentState;

    // read state
    currentState = HAL_GPIO_ReadPin(EXT_REG_5V_IRQ_GPIO_Port, EXT_REG_5V_IRQ_Pin);
 80292b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80292ba:	4831      	ldr	r0, [pc, #196]	; (8029380 <VCU_CheckMainPower+0xd0>)
 80292bc:	f006 ff30 	bl	8030120 <HAL_GPIO_ReadPin>
 80292c0:	4603      	mov	r3, r0
 80292c2:	71fb      	strb	r3, [r7, #7]
    // handle only when changed
    if (lastState != currentState) {
 80292c4:	4b2f      	ldr	r3, [pc, #188]	; (8029384 <VCU_CheckMainPower+0xd4>)
 80292c6:	f993 3000 	ldrsb.w	r3, [r3]
 80292ca:	461a      	mov	r2, r3
 80292cc:	79fb      	ldrb	r3, [r7, #7]
 80292ce:	429a      	cmp	r2, r3
 80292d0:	d008      	beq.n	80292e4 <VCU_CheckMainPower+0x34>
        lastState = currentState;
 80292d2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80292d6:	4b2b      	ldr	r3, [pc, #172]	; (8029384 <VCU_CheckMainPower+0xd4>)
 80292d8:	701a      	strb	r2, [r3, #0]
        // update tick
        tick = _GetTickMS();
 80292da:	f016 f9fa 	bl	803f6d2 <_GetTickMS>
 80292de:	4602      	mov	r2, r0
 80292e0:	4b29      	ldr	r3, [pc, #164]	; (8029388 <VCU_CheckMainPower+0xd8>)
 80292e2:	601a      	str	r2, [r3, #0]
    }

    // set things
    VCU.d.state.independent = !currentState;
 80292e4:	79fb      	ldrb	r3, [r7, #7]
 80292e6:	2b00      	cmp	r3, #0
 80292e8:	bf0c      	ite	eq
 80292ea:	2301      	moveq	r3, #1
 80292ec:	2300      	movne	r3, #0
 80292ee:	b2db      	uxtb	r3, r3
 80292f0:	461a      	mov	r2, r3
 80292f2:	4b26      	ldr	r3, [pc, #152]	; (802938c <VCU_CheckMainPower+0xdc>)
 80292f4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

    // handle when REG_5V is OFF
    if (currentState == 0) {
 80292f8:	79fb      	ldrb	r3, [r7, #7]
 80292fa:	2b00      	cmp	r3, #0
 80292fc:	d128      	bne.n	8029350 <VCU_CheckMainPower+0xa0>
        VCU.SetEvent(EV_VCU_INDEPENDENT, 1);
 80292fe:	4b23      	ldr	r3, [pc, #140]	; (802938c <VCU_CheckMainPower+0xdc>)
 8029300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8029302:	2201      	movs	r2, #1
 8029304:	f04f 0010 	mov.w	r0, #16
 8029308:	f04f 0100 	mov.w	r1, #0
 802930c:	4798      	blx	r3
        if (_GetTickMS() - tick > (VCU_ACTIVATE_LOST_MODE * 1000)) {
 802930e:	f016 f9e0 	bl	803f6d2 <_GetTickMS>
 8029312:	4602      	mov	r2, r0
 8029314:	4b1c      	ldr	r3, [pc, #112]	; (8029388 <VCU_CheckMainPower+0xd8>)
 8029316:	681b      	ldr	r3, [r3, #0]
 8029318:	1ad3      	subs	r3, r2, r3
 802931a:	4a1d      	ldr	r2, [pc, #116]	; (8029390 <VCU_CheckMainPower+0xe0>)
 802931c:	4293      	cmp	r3, r2
 802931e:	d90b      	bls.n	8029338 <VCU_CheckMainPower+0x88>
            VCU.d.interval = RPT_INTERVAL_LOST;
 8029320:	4b1a      	ldr	r3, [pc, #104]	; (802938c <VCU_CheckMainPower+0xdc>)
 8029322:	223c      	movs	r2, #60	; 0x3c
 8029324:	80da      	strh	r2, [r3, #6]
            VCU.SetEvent(EV_VCU_UNAUTHORIZE_REMOVAL, 1);
 8029326:	4b19      	ldr	r3, [pc, #100]	; (802938c <VCU_CheckMainPower+0xdc>)
 8029328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802932a:	2201      	movs	r2, #1
 802932c:	f04f 0020 	mov.w	r0, #32
 8029330:	f04f 0100 	mov.w	r1, #0
 8029334:	4798      	blx	r3
    } else {
        VCU.d.interval = RPT_INTERVAL_SIMPLE;
        VCU.SetEvent(EV_VCU_INDEPENDENT, 0);
        VCU.SetEvent(EV_VCU_UNAUTHORIZE_REMOVAL, 0);
    }
}
 8029336:	e01e      	b.n	8029376 <VCU_CheckMainPower+0xc6>
            VCU.d.interval = RPT_INTERVAL_INDEPENDENT;
 8029338:	4b14      	ldr	r3, [pc, #80]	; (802938c <VCU_CheckMainPower+0xdc>)
 802933a:	220a      	movs	r2, #10
 802933c:	80da      	strh	r2, [r3, #6]
            VCU.SetEvent(EV_VCU_UNAUTHORIZE_REMOVAL, 0);
 802933e:	4b13      	ldr	r3, [pc, #76]	; (802938c <VCU_CheckMainPower+0xdc>)
 8029340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8029342:	2200      	movs	r2, #0
 8029344:	f04f 0020 	mov.w	r0, #32
 8029348:	f04f 0100 	mov.w	r1, #0
 802934c:	4798      	blx	r3
}
 802934e:	e012      	b.n	8029376 <VCU_CheckMainPower+0xc6>
        VCU.d.interval = RPT_INTERVAL_SIMPLE;
 8029350:	4b0e      	ldr	r3, [pc, #56]	; (802938c <VCU_CheckMainPower+0xdc>)
 8029352:	2205      	movs	r2, #5
 8029354:	80da      	strh	r2, [r3, #6]
        VCU.SetEvent(EV_VCU_INDEPENDENT, 0);
 8029356:	4b0d      	ldr	r3, [pc, #52]	; (802938c <VCU_CheckMainPower+0xdc>)
 8029358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802935a:	2200      	movs	r2, #0
 802935c:	f04f 0010 	mov.w	r0, #16
 8029360:	f04f 0100 	mov.w	r1, #0
 8029364:	4798      	blx	r3
        VCU.SetEvent(EV_VCU_UNAUTHORIZE_REMOVAL, 0);
 8029366:	4b09      	ldr	r3, [pc, #36]	; (802938c <VCU_CheckMainPower+0xdc>)
 8029368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802936a:	2200      	movs	r2, #0
 802936c:	f04f 0020 	mov.w	r0, #32
 8029370:	f04f 0100 	mov.w	r1, #0
 8029374:	4798      	blx	r3
}
 8029376:	bf00      	nop
 8029378:	3708      	adds	r7, #8
 802937a:	46bd      	mov	sp, r7
 802937c:	bd80      	pop	{r7, pc}
 802937e:	bf00      	nop
 8029380:	40021000 	.word	0x40021000
 8029384:	20000290 	.word	0x20000290
 8029388:	20000f2c 	.word	0x20000f2c
 802938c:	20000228 	.word	0x20000228
 8029390:	0001d4c0 	.word	0x0001d4c0

08029394 <VCU_CAN_TX_SwitchModeControl>:

/* ====================================== CAN TX =================================== */
uint8_t VCU_CAN_TX_SwitchModeControl(sw_t *sw) {
 8029394:	b580      	push	{r7, lr}
 8029396:	b084      	sub	sp, #16
 8029398:	af00      	add	r7, sp, #0
 802939a:	6078      	str	r0, [r7, #4]
    CAN_DATA *data = &(CB.tx.data);
 802939c:	4b5d      	ldr	r3, [pc, #372]	; (8029514 <VCU_CAN_TX_SwitchModeControl+0x180>)
 802939e:	60fb      	str	r3, [r7, #12]
    sein_state_t sein = HBAR_SeinController(sw);
 80293a0:	6878      	ldr	r0, [r7, #4]
 80293a2:	f7fe fc6b 	bl	8027c7c <HBAR_SeinController>
 80293a6:	4603      	mov	r3, r0
 80293a8:	813b      	strh	r3, [r7, #8]

    // set message
    data->u8[0] = sw->list[SW_K_ABS].state;
 80293aa:	687b      	ldr	r3, [r7, #4]
 80293ac:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
 80293b0:	68fb      	ldr	r3, [r7, #12]
 80293b2:	701a      	strb	r2, [r3, #0]
    data->u8[0] |= _L(HMI1.d.status.mirroring, 1);
 80293b4:	68fb      	ldr	r3, [r7, #12]
 80293b6:	781b      	ldrb	r3, [r3, #0]
 80293b8:	b25a      	sxtb	r2, r3
 80293ba:	4b57      	ldr	r3, [pc, #348]	; (8029518 <VCU_CAN_TX_SwitchModeControl+0x184>)
 80293bc:	785b      	ldrb	r3, [r3, #1]
 80293be:	005b      	lsls	r3, r3, #1
 80293c0:	b25b      	sxtb	r3, r3
 80293c2:	4313      	orrs	r3, r2
 80293c4:	b25b      	sxtb	r3, r3
 80293c6:	b2da      	uxtb	r2, r3
 80293c8:	68fb      	ldr	r3, [r7, #12]
 80293ca:	701a      	strb	r2, [r3, #0]
    data->u8[0] |= _L(sw->list[SW_K_LAMP].state, 2);
 80293cc:	68fb      	ldr	r3, [r7, #12]
 80293ce:	781b      	ldrb	r3, [r3, #0]
 80293d0:	b25a      	sxtb	r2, r3
 80293d2:	687b      	ldr	r3, [r7, #4]
 80293d4:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80293d8:	009b      	lsls	r3, r3, #2
 80293da:	b25b      	sxtb	r3, r3
 80293dc:	4313      	orrs	r3, r2
 80293de:	b25b      	sxtb	r3, r3
 80293e0:	b2da      	uxtb	r2, r3
 80293e2:	68fb      	ldr	r3, [r7, #12]
 80293e4:	701a      	strb	r2, [r3, #0]
    data->u8[0] |= _L(HMI1.d.status.warning, 3);
 80293e6:	68fb      	ldr	r3, [r7, #12]
 80293e8:	781b      	ldrb	r3, [r3, #0]
 80293ea:	b25a      	sxtb	r2, r3
 80293ec:	4b4a      	ldr	r3, [pc, #296]	; (8029518 <VCU_CAN_TX_SwitchModeControl+0x184>)
 80293ee:	789b      	ldrb	r3, [r3, #2]
 80293f0:	00db      	lsls	r3, r3, #3
 80293f2:	b25b      	sxtb	r3, r3
 80293f4:	4313      	orrs	r3, r2
 80293f6:	b25b      	sxtb	r3, r3
 80293f8:	b2da      	uxtb	r2, r3
 80293fa:	68fb      	ldr	r3, [r7, #12]
 80293fc:	701a      	strb	r2, [r3, #0]
    data->u8[0] |= _L(HMI1.d.status.overheat, 4);
 80293fe:	68fb      	ldr	r3, [r7, #12]
 8029400:	781b      	ldrb	r3, [r3, #0]
 8029402:	b25a      	sxtb	r2, r3
 8029404:	4b44      	ldr	r3, [pc, #272]	; (8029518 <VCU_CAN_TX_SwitchModeControl+0x184>)
 8029406:	78db      	ldrb	r3, [r3, #3]
 8029408:	011b      	lsls	r3, r3, #4
 802940a:	b25b      	sxtb	r3, r3
 802940c:	4313      	orrs	r3, r2
 802940e:	b25b      	sxtb	r3, r3
 8029410:	b2da      	uxtb	r2, r3
 8029412:	68fb      	ldr	r3, [r7, #12]
 8029414:	701a      	strb	r2, [r3, #0]
    data->u8[0] |= _L(HMI1.d.status.finger, 5);
 8029416:	68fb      	ldr	r3, [r7, #12]
 8029418:	781b      	ldrb	r3, [r3, #0]
 802941a:	b25a      	sxtb	r2, r3
 802941c:	4b3e      	ldr	r3, [pc, #248]	; (8029518 <VCU_CAN_TX_SwitchModeControl+0x184>)
 802941e:	791b      	ldrb	r3, [r3, #4]
 8029420:	015b      	lsls	r3, r3, #5
 8029422:	b25b      	sxtb	r3, r3
 8029424:	4313      	orrs	r3, r2
 8029426:	b25b      	sxtb	r3, r3
 8029428:	b2da      	uxtb	r2, r3
 802942a:	68fb      	ldr	r3, [r7, #12]
 802942c:	701a      	strb	r2, [r3, #0]
    data->u8[0] |= _L(HMI1.d.status.keyless, 6);
 802942e:	68fb      	ldr	r3, [r7, #12]
 8029430:	781b      	ldrb	r3, [r3, #0]
 8029432:	b25a      	sxtb	r2, r3
 8029434:	4b38      	ldr	r3, [pc, #224]	; (8029518 <VCU_CAN_TX_SwitchModeControl+0x184>)
 8029436:	795b      	ldrb	r3, [r3, #5]
 8029438:	019b      	lsls	r3, r3, #6
 802943a:	b25b      	sxtb	r3, r3
 802943c:	4313      	orrs	r3, r2
 802943e:	b25b      	sxtb	r3, r3
 8029440:	b2da      	uxtb	r2, r3
 8029442:	68fb      	ldr	r3, [r7, #12]
 8029444:	701a      	strb	r2, [r3, #0]
    data->u8[0] |= _L(HMI1.d.status.daylight, 7);
 8029446:	68fb      	ldr	r3, [r7, #12]
 8029448:	781b      	ldrb	r3, [r3, #0]
 802944a:	b25a      	sxtb	r2, r3
 802944c:	4b32      	ldr	r3, [pc, #200]	; (8029518 <VCU_CAN_TX_SwitchModeControl+0x184>)
 802944e:	799b      	ldrb	r3, [r3, #6]
 8029450:	01db      	lsls	r3, r3, #7
 8029452:	b25b      	sxtb	r3, r3
 8029454:	4313      	orrs	r3, r2
 8029456:	b25b      	sxtb	r3, r3
 8029458:	b2da      	uxtb	r2, r3
 802945a:	68fb      	ldr	r3, [r7, #12]
 802945c:	701a      	strb	r2, [r3, #0]

    // sein value
    data->u8[1] = sein.left;
 802945e:	7a3a      	ldrb	r2, [r7, #8]
 8029460:	68fb      	ldr	r3, [r7, #12]
 8029462:	705a      	strb	r2, [r3, #1]
    data->u8[1] |= _L(sein.right, 1);
 8029464:	68fb      	ldr	r3, [r7, #12]
 8029466:	785b      	ldrb	r3, [r3, #1]
 8029468:	b25a      	sxtb	r2, r3
 802946a:	7a7b      	ldrb	r3, [r7, #9]
 802946c:	005b      	lsls	r3, r3, #1
 802946e:	b25b      	sxtb	r3, r3
 8029470:	4313      	orrs	r3, r2
 8029472:	b25b      	sxtb	r3, r3
 8029474:	b2da      	uxtb	r2, r3
 8029476:	68fb      	ldr	r3, [r7, #12]
 8029478:	705a      	strb	r2, [r3, #1]

    // mode
    data->u8[2] = sw->runner.mode.sub.val[SW_M_DRIVE];
 802947a:	687b      	ldr	r3, [r7, #4]
 802947c:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
 8029480:	68fb      	ldr	r3, [r7, #12]
 8029482:	709a      	strb	r2, [r3, #2]
    data->u8[2] |= _L(sw->runner.mode.sub.val[SW_M_TRIP], 2);
 8029484:	68fb      	ldr	r3, [r7, #12]
 8029486:	789b      	ldrb	r3, [r3, #2]
 8029488:	b25a      	sxtb	r2, r3
 802948a:	687b      	ldr	r3, [r7, #4]
 802948c:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 8029490:	009b      	lsls	r3, r3, #2
 8029492:	b25b      	sxtb	r3, r3
 8029494:	4313      	orrs	r3, r2
 8029496:	b25b      	sxtb	r3, r3
 8029498:	b2da      	uxtb	r2, r3
 802949a:	68fb      	ldr	r3, [r7, #12]
 802949c:	709a      	strb	r2, [r3, #2]
    data->u8[2] |= _L(sw->runner.mode.sub.val[SW_M_REPORT], 3);
 802949e:	68fb      	ldr	r3, [r7, #12]
 80294a0:	789b      	ldrb	r3, [r3, #2]
 80294a2:	b25a      	sxtb	r2, r3
 80294a4:	687b      	ldr	r3, [r7, #4]
 80294a6:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80294aa:	00db      	lsls	r3, r3, #3
 80294ac:	b25b      	sxtb	r3, r3
 80294ae:	4313      	orrs	r3, r2
 80294b0:	b25b      	sxtb	r3, r3
 80294b2:	b2da      	uxtb	r2, r3
 80294b4:	68fb      	ldr	r3, [r7, #12]
 80294b6:	709a      	strb	r2, [r3, #2]
    data->u8[2] |= _L(sw->runner.mode.val, 4);
 80294b8:	68fb      	ldr	r3, [r7, #12]
 80294ba:	789b      	ldrb	r3, [r3, #2]
 80294bc:	b25a      	sxtb	r2, r3
 80294be:	687b      	ldr	r3, [r7, #4]
 80294c0:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 80294c4:	011b      	lsls	r3, r3, #4
 80294c6:	b25b      	sxtb	r3, r3
 80294c8:	4313      	orrs	r3, r2
 80294ca:	b25b      	sxtb	r3, r3
 80294cc:	b2da      	uxtb	r2, r3
 80294ce:	68fb      	ldr	r3, [r7, #12]
 80294d0:	709a      	strb	r2, [r3, #2]
    data->u8[2] |= _L(HBAR_ModeController(&(sw->runner)), 6);
 80294d2:	687b      	ldr	r3, [r7, #4]
 80294d4:	33f0      	adds	r3, #240	; 0xf0
 80294d6:	4618      	mov	r0, r3
 80294d8:	f7fe fc44 	bl	8027d64 <HBAR_ModeController>
 80294dc:	4603      	mov	r3, r0
 80294de:	0199      	lsls	r1, r3, #6
 80294e0:	68fb      	ldr	r3, [r7, #12]
 80294e2:	789b      	ldrb	r3, [r3, #2]
 80294e4:	b25a      	sxtb	r2, r3
 80294e6:	b24b      	sxtb	r3, r1
 80294e8:	4313      	orrs	r3, r2
 80294ea:	b25b      	sxtb	r3, r3
 80294ec:	b2da      	uxtb	r2, r3
 80294ee:	68fb      	ldr	r3, [r7, #12]
 80294f0:	709a      	strb	r2, [r3, #2]

    // others
    data->u8[3] = VCU.d.speed;
 80294f2:	4b0a      	ldr	r3, [pc, #40]	; (802951c <VCU_CAN_TX_SwitchModeControl+0x188>)
 80294f4:	7a5a      	ldrb	r2, [r3, #9]
 80294f6:	68fb      	ldr	r3, [r7, #12]
 80294f8:	70da      	strb	r2, [r3, #3]

    // set default header
    CANBUS_Header(&(CB.tx.header), CAND_VCU_SWITCH, 4);
 80294fa:	2204      	movs	r2, #4
 80294fc:	2100      	movs	r1, #0
 80294fe:	4808      	ldr	r0, [pc, #32]	; (8029520 <VCU_CAN_TX_SwitchModeControl+0x18c>)
 8029500:	f7fa fa88 	bl	8023a14 <CANBUS_Header>
    // send message
    return CANBUS_Write(&(CB.tx));
 8029504:	4806      	ldr	r0, [pc, #24]	; (8029520 <VCU_CAN_TX_SwitchModeControl+0x18c>)
 8029506:	f7fa fac7 	bl	8023a98 <CANBUS_Write>
 802950a:	4603      	mov	r3, r0
}
 802950c:	4618      	mov	r0, r3
 802950e:	3710      	adds	r7, #16
 8029510:	46bd      	mov	sp, r7
 8029512:	bd80      	pop	{r7, pc}
 8029514:	20008390 	.word	0x20008390
 8029518:	200001e4 	.word	0x200001e4
 802951c:	20000228 	.word	0x20000228
 8029520:	20008378 	.word	0x20008378

08029524 <VCU_CAN_TX_Datetime>:

uint8_t VCU_CAN_TX_Datetime(timestamp_t *timestamp) {
 8029524:	b580      	push	{r7, lr}
 8029526:	b084      	sub	sp, #16
 8029528:	af00      	add	r7, sp, #0
 802952a:	6078      	str	r0, [r7, #4]
    CAN_DATA *data = &(CB.tx.data);
 802952c:	4b1a      	ldr	r3, [pc, #104]	; (8029598 <VCU_CAN_TX_Datetime+0x74>)
 802952e:	60fb      	str	r3, [r7, #12]

    // set message
    data->u8[0] = timestamp->time.Seconds;
 8029530:	687b      	ldr	r3, [r7, #4]
 8029532:	789a      	ldrb	r2, [r3, #2]
 8029534:	68fb      	ldr	r3, [r7, #12]
 8029536:	701a      	strb	r2, [r3, #0]
    data->u8[1] = timestamp->time.Minutes;
 8029538:	687b      	ldr	r3, [r7, #4]
 802953a:	785a      	ldrb	r2, [r3, #1]
 802953c:	68fb      	ldr	r3, [r7, #12]
 802953e:	705a      	strb	r2, [r3, #1]
    data->u8[2] = timestamp->time.Hours;
 8029540:	687b      	ldr	r3, [r7, #4]
 8029542:	781a      	ldrb	r2, [r3, #0]
 8029544:	68fb      	ldr	r3, [r7, #12]
 8029546:	709a      	strb	r2, [r3, #2]
    data->u8[3] = timestamp->date.Date;
 8029548:	687b      	ldr	r3, [r7, #4]
 802954a:	7d9a      	ldrb	r2, [r3, #22]
 802954c:	68fb      	ldr	r3, [r7, #12]
 802954e:	70da      	strb	r2, [r3, #3]
    data->u8[4] = timestamp->date.Month;
 8029550:	687b      	ldr	r3, [r7, #4]
 8029552:	7d5a      	ldrb	r2, [r3, #21]
 8029554:	68fb      	ldr	r3, [r7, #12]
 8029556:	711a      	strb	r2, [r3, #4]
    data->u8[5] = timestamp->date.Year;
 8029558:	687b      	ldr	r3, [r7, #4]
 802955a:	7dda      	ldrb	r2, [r3, #23]
 802955c:	68fb      	ldr	r3, [r7, #12]
 802955e:	715a      	strb	r2, [r3, #5]
    data->u8[6] = timestamp->date.WeekDay;
 8029560:	687b      	ldr	r3, [r7, #4]
 8029562:	7d1a      	ldrb	r2, [r3, #20]
 8029564:	68fb      	ldr	r3, [r7, #12]
 8029566:	719a      	strb	r2, [r3, #6]
    // HMI2 shutdown request
    data->u8[7] = !VCU.d.state.knob;
 8029568:	4b0c      	ldr	r3, [pc, #48]	; (802959c <VCU_CAN_TX_Datetime+0x78>)
 802956a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 802956e:	2b00      	cmp	r3, #0
 8029570:	bf0c      	ite	eq
 8029572:	2301      	moveq	r3, #1
 8029574:	2300      	movne	r3, #0
 8029576:	b2db      	uxtb	r3, r3
 8029578:	461a      	mov	r2, r3
 802957a:	68fb      	ldr	r3, [r7, #12]
 802957c:	71da      	strb	r2, [r3, #7]

    // set default header
    CANBUS_Header(&(CB.tx.header), CAND_VCU_DATETIME, 8);
 802957e:	2208      	movs	r2, #8
 8029580:	2101      	movs	r1, #1
 8029582:	4807      	ldr	r0, [pc, #28]	; (80295a0 <VCU_CAN_TX_Datetime+0x7c>)
 8029584:	f7fa fa46 	bl	8023a14 <CANBUS_Header>
    // send message
    return CANBUS_Write(&(CB.tx));
 8029588:	4805      	ldr	r0, [pc, #20]	; (80295a0 <VCU_CAN_TX_Datetime+0x7c>)
 802958a:	f7fa fa85 	bl	8023a98 <CANBUS_Write>
 802958e:	4603      	mov	r3, r0
}
 8029590:	4618      	mov	r0, r3
 8029592:	3710      	adds	r7, #16
 8029594:	46bd      	mov	sp, r7
 8029596:	bd80      	pop	{r7, pc}
 8029598:	20008390 	.word	0x20008390
 802959c:	20000228 	.word	0x20000228
 80295a0:	20008378 	.word	0x20008378

080295a4 <VCU_CAN_TX_MixedData>:

uint8_t VCU_CAN_TX_MixedData(sw_runner_t *runner) {
 80295a4:	b580      	push	{r7, lr}
 80295a6:	b084      	sub	sp, #16
 80295a8:	af00      	add	r7, sp, #0
 80295aa:	6078      	str	r0, [r7, #4]
    CAN_DATA *data = &(CB.tx.data);
 80295ac:	4b11      	ldr	r3, [pc, #68]	; (80295f4 <VCU_CAN_TX_MixedData+0x50>)
 80295ae:	60fb      	str	r3, [r7, #12]

    // set message
    data->u8[0] = SIM.signal;
 80295b0:	4b11      	ldr	r3, [pc, #68]	; (80295f8 <VCU_CAN_TX_MixedData+0x54>)
 80295b2:	7c1a      	ldrb	r2, [r3, #16]
 80295b4:	68fb      	ldr	r3, [r7, #12]
 80295b6:	701a      	strb	r2, [r3, #0]
    data->u8[1] = BMS.d.soc;
 80295b8:	4b10      	ldr	r3, [pc, #64]	; (80295fc <VCU_CAN_TX_MixedData+0x58>)
 80295ba:	785a      	ldrb	r2, [r3, #1]
 80295bc:	68fb      	ldr	r3, [r7, #12]
 80295be:	705a      	strb	r2, [r3, #1]
    data->u8[2] = runner->mode.sub.report[SW_M_REPORT_RANGE];
 80295c0:	687b      	ldr	r3, [r7, #4]
 80295c2:	7b9a      	ldrb	r2, [r3, #14]
 80295c4:	68fb      	ldr	r3, [r7, #12]
 80295c6:	709a      	strb	r2, [r3, #2]
    data->u8[3] = runner->mode.sub.report[SW_M_REPORT_EFFICIENCY];
 80295c8:	687b      	ldr	r3, [r7, #4]
 80295ca:	7bda      	ldrb	r2, [r3, #15]
 80295cc:	68fb      	ldr	r3, [r7, #12]
 80295ce:	70da      	strb	r2, [r3, #3]
    data->u32[1] = VCU.d.odometer;
 80295d0:	4b0b      	ldr	r3, [pc, #44]	; (8029600 <VCU_CAN_TX_MixedData+0x5c>)
 80295d2:	68da      	ldr	r2, [r3, #12]
 80295d4:	68fb      	ldr	r3, [r7, #12]
 80295d6:	605a      	str	r2, [r3, #4]

    // set default header
    CANBUS_Header(&(CB.tx.header), CAND_VCU_SELECT_SET, 8);
 80295d8:	2208      	movs	r2, #8
 80295da:	2102      	movs	r1, #2
 80295dc:	4809      	ldr	r0, [pc, #36]	; (8029604 <VCU_CAN_TX_MixedData+0x60>)
 80295de:	f7fa fa19 	bl	8023a14 <CANBUS_Header>
    // send message
    return CANBUS_Write(&(CB.tx));
 80295e2:	4808      	ldr	r0, [pc, #32]	; (8029604 <VCU_CAN_TX_MixedData+0x60>)
 80295e4:	f7fa fa58 	bl	8023a98 <CANBUS_Write>
 80295e8:	4603      	mov	r3, r0
}
 80295ea:	4618      	mov	r0, r3
 80295ec:	3710      	adds	r7, #16
 80295ee:	46bd      	mov	sp, r7
 80295f0:	bd80      	pop	{r7, pc}
 80295f2:	bf00      	nop
 80295f4:	20008390 	.word	0x20008390
 80295f8:	200002a8 	.word	0x200002a8
 80295fc:	20000178 	.word	0x20000178
 8029600:	20000228 	.word	0x20000228
 8029604:	20008378 	.word	0x20008378

08029608 <VCU_CAN_TX_SubTripData>:

uint8_t VCU_CAN_TX_SubTripData(uint32_t *trip) {
 8029608:	b580      	push	{r7, lr}
 802960a:	b084      	sub	sp, #16
 802960c:	af00      	add	r7, sp, #0
 802960e:	6078      	str	r0, [r7, #4]
    CAN_DATA *data = &(CB.tx.data);
 8029610:	4b0b      	ldr	r3, [pc, #44]	; (8029640 <VCU_CAN_TX_SubTripData+0x38>)
 8029612:	60fb      	str	r3, [r7, #12]

    // set message
    data->u32[0] = trip[SW_M_TRIP_A];
 8029614:	687b      	ldr	r3, [r7, #4]
 8029616:	681a      	ldr	r2, [r3, #0]
 8029618:	68fb      	ldr	r3, [r7, #12]
 802961a:	601a      	str	r2, [r3, #0]
    data->u32[1] = trip[SW_M_TRIP_B];
 802961c:	687b      	ldr	r3, [r7, #4]
 802961e:	685a      	ldr	r2, [r3, #4]
 8029620:	68fb      	ldr	r3, [r7, #12]
 8029622:	605a      	str	r2, [r3, #4]

    // set default header
    CANBUS_Header(&(CB.tx.header), CAND_VCU_TRIP_MODE, 8);
 8029624:	2208      	movs	r2, #8
 8029626:	2103      	movs	r1, #3
 8029628:	4806      	ldr	r0, [pc, #24]	; (8029644 <VCU_CAN_TX_SubTripData+0x3c>)
 802962a:	f7fa f9f3 	bl	8023a14 <CANBUS_Header>
    // send message
    return CANBUS_Write(&(CB.tx));
 802962e:	4805      	ldr	r0, [pc, #20]	; (8029644 <VCU_CAN_TX_SubTripData+0x3c>)
 8029630:	f7fa fa32 	bl	8023a98 <CANBUS_Write>
 8029634:	4603      	mov	r3, r0
}
 8029636:	4618      	mov	r0, r3
 8029638:	3710      	adds	r7, #16
 802963a:	46bd      	mov	sp, r7
 802963c:	bd80      	pop	{r7, pc}
 802963e:	bf00      	nop
 8029640:	20008390 	.word	0x20008390
 8029644:	20008378 	.word	0x20008378

08029648 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8029648:	b580      	push	{r7, lr}
 802964a:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 802964c:	f002 fe58 	bl	802c300 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8029650:	f000 f98a 	bl	8029968 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8029654:	f000 fdb0 	bl	802a1b8 <MX_GPIO_Init>
    MX_DMA_Init();
 8029658:	f000 fd60 	bl	802a11c <MX_DMA_Init>
    MX_ADC1_Init();
 802965c:	f000 fa20 	bl	8029aa0 <MX_ADC1_Init>
    MX_AES_Init();
 8029660:	f000 fa70 	bl	8029b44 <MX_AES_Init>
    MX_CAN1_Init();
 8029664:	f000 fa96 	bl	8029b94 <MX_CAN1_Init>
    MX_CRC_Init();
 8029668:	f000 faca 	bl	8029c00 <MX_CRC_Init>
    MX_I2C1_Init();
 802966c:	f000 fadc 	bl	8029c28 <MX_I2C1_Init>
    MX_I2C2_Init();
 8029670:	f000 fb1a 	bl	8029ca8 <MX_I2C2_Init>
    MX_I2C3_Init();
 8029674:	f000 fb58 	bl	8029d28 <MX_I2C3_Init>
    MX_I2S3_Init();
 8029678:	f000 fb96 	bl	8029da8 <MX_I2S3_Init>
    MX_IWDG_Init();
 802967c:	f000 fbc2 	bl	8029e04 <MX_IWDG_Init>
    MX_RTC_Init();
 8029680:	f000 fbee 	bl	8029e60 <MX_RTC_Init>
    MX_SPI1_Init();
 8029684:	f000 fc46 	bl	8029f14 <MX_SPI1_Init>
    MX_UART4_Init();
 8029688:	f000 fcca 	bl	802a020 <MX_UART4_Init>
    MX_USART1_UART_Init();
 802968c:	f000 fcf2 	bl	802a074 <MX_USART1_UART_Init>
    MX_USART2_UART_Init();
 8029690:	f000 fd1a 	bl	802a0c8 <MX_USART2_UART_Init>
    MX_RNG_Init();
 8029694:	f000 fbd0 	bl	8029e38 <MX_RNG_Init>
    MX_TIM10_Init();
 8029698:	f000 fc72 	bl	8029f80 <MX_TIM10_Init>
    /* USER CODE BEGIN 2 */
    CANBUS_Init();
 802969c:	f7fa f99c 	bl	80239d8 <CANBUS_Init>
    BAT_DMA_Init();
 80296a0:	f7f7 fccc 	bl	802103c <BAT_DMA_Init>
    SIMCOM_DMA_Init();
 80296a4:	f013 fbe4 	bl	803ce70 <SIMCOM_DMA_Init>
    UBLOX_DMA_Init();
 80296a8:	f7fa f872 	bl	8023790 <UBLOX_DMA_Init>
    FINGER_DMA_Init();
 80296ac:	f7f8 feaa 	bl	8022404 <FINGER_DMA_Init>
    /* USER CODE END 2 */

    /* Init scheduler */
    osKernelInitialize();
 80296b0:	f00d ff04 	bl	80374bc <osKernelInitialize>
    /* Create the mutex(es) */
    /* creation of AudioMutex */
    AudioMutexHandle = osMutexNew(&AudioMutex_attributes);
 80296b4:	4868      	ldr	r0, [pc, #416]	; (8029858 <main+0x210>)
 80296b6:	f00e fb2f 	bl	8037d18 <osMutexNew>
 80296ba:	4602      	mov	r2, r0
 80296bc:	4b67      	ldr	r3, [pc, #412]	; (802985c <main+0x214>)
 80296be:	601a      	str	r2, [r3, #0]

    /* creation of LogMutex */
    LogMutexHandle = osMutexNew(&LogMutex_attributes);
 80296c0:	4867      	ldr	r0, [pc, #412]	; (8029860 <main+0x218>)
 80296c2:	f00e fb29 	bl	8037d18 <osMutexNew>
 80296c6:	4602      	mov	r2, r0
 80296c8:	4b66      	ldr	r3, [pc, #408]	; (8029864 <main+0x21c>)
 80296ca:	601a      	str	r2, [r3, #0]

    /* creation of CanTxMutex */
    CanTxMutexHandle = osMutexNew(&CanTxMutex_attributes);
 80296cc:	4866      	ldr	r0, [pc, #408]	; (8029868 <main+0x220>)
 80296ce:	f00e fb23 	bl	8037d18 <osMutexNew>
 80296d2:	4602      	mov	r2, r0
 80296d4:	4b65      	ldr	r3, [pc, #404]	; (802986c <main+0x224>)
 80296d6:	601a      	str	r2, [r3, #0]

    /* creation of EepromMutex */
    EepromMutexHandle = osMutexNew(&EepromMutex_attributes);
 80296d8:	4865      	ldr	r0, [pc, #404]	; (8029870 <main+0x228>)
 80296da:	f00e fb1d 	bl	8037d18 <osMutexNew>
 80296de:	4602      	mov	r2, r0
 80296e0:	4b64      	ldr	r3, [pc, #400]	; (8029874 <main+0x22c>)
 80296e2:	601a      	str	r2, [r3, #0]

    /* creation of RtcMutex */
    RtcMutexHandle = osMutexNew(&RtcMutex_attributes);
 80296e4:	4864      	ldr	r0, [pc, #400]	; (8029878 <main+0x230>)
 80296e6:	f00e fb17 	bl	8037d18 <osMutexNew>
 80296ea:	4602      	mov	r2, r0
 80296ec:	4b63      	ldr	r3, [pc, #396]	; (802987c <main+0x234>)
 80296ee:	601a      	str	r2, [r3, #0]

    /* creation of CrcMutex */
    CrcMutexHandle = osMutexNew(&CrcMutex_attributes);
 80296f0:	4863      	ldr	r0, [pc, #396]	; (8029880 <main+0x238>)
 80296f2:	f00e fb11 	bl	8037d18 <osMutexNew>
 80296f6:	4602      	mov	r2, r0
 80296f8:	4b62      	ldr	r3, [pc, #392]	; (8029884 <main+0x23c>)
 80296fa:	601a      	str	r2, [r3, #0]

    /* creation of AesMutex */
    AesMutexHandle = osMutexNew(&AesMutex_attributes);
 80296fc:	4862      	ldr	r0, [pc, #392]	; (8029888 <main+0x240>)
 80296fe:	f00e fb0b 	bl	8037d18 <osMutexNew>
 8029702:	4602      	mov	r2, r0
 8029704:	4b61      	ldr	r3, [pc, #388]	; (802988c <main+0x244>)
 8029706:	601a      	str	r2, [r3, #0]

    /* Create the recursive mutex(es) */
    /* creation of SimcomRecMutex */
    SimcomRecMutexHandle = osMutexNew(&SimcomRecMutex_attributes);
 8029708:	4861      	ldr	r0, [pc, #388]	; (8029890 <main+0x248>)
 802970a:	f00e fb05 	bl	8037d18 <osMutexNew>
 802970e:	4602      	mov	r2, r0
 8029710:	4b60      	ldr	r3, [pc, #384]	; (8029894 <main+0x24c>)
 8029712:	601a      	str	r2, [r3, #0]

    /* creation of FingerRecMutex */
    FingerRecMutexHandle = osMutexNew(&FingerRecMutex_attributes);
 8029714:	4860      	ldr	r0, [pc, #384]	; (8029898 <main+0x250>)
 8029716:	f00e faff 	bl	8037d18 <osMutexNew>
 802971a:	4602      	mov	r2, r0
 802971c:	4b5f      	ldr	r3, [pc, #380]	; (802989c <main+0x254>)
 802971e:	601a      	str	r2, [r3, #0]

    /* creation of KlessRecMutex */
    KlessRecMutexHandle = osMutexNew(&KlessRecMutex_attributes);
 8029720:	485f      	ldr	r0, [pc, #380]	; (80298a0 <main+0x258>)
 8029722:	f00e faf9 	bl	8037d18 <osMutexNew>
 8029726:	4602      	mov	r2, r0
 8029728:	4b5e      	ldr	r3, [pc, #376]	; (80298a4 <main+0x25c>)
 802972a:	601a      	str	r2, [r3, #0]
    /* start timers, add new ones, ... */
    /* USER CODE END RTOS_TIMERS */

    /* Create the queue(s) */
    /* creation of CommandQueue */
    CommandQueueHandle = osMessageQueueNew(1, sizeof(command_t), &CommandQueue_attributes);
 802972c:	4a5e      	ldr	r2, [pc, #376]	; (80298a8 <main+0x260>)
 802972e:	2111      	movs	r1, #17
 8029730:	2001      	movs	r0, #1
 8029732:	f00e fc39 	bl	8037fa8 <osMessageQueueNew>
 8029736:	4602      	mov	r2, r0
 8029738:	4b5c      	ldr	r3, [pc, #368]	; (80298ac <main+0x264>)
 802973a:	601a      	str	r2, [r3, #0]

    /* creation of ResponseQueue */
    ResponseQueueHandle = osMessageQueueNew(1, sizeof(response_t), &ResponseQueue_attributes);
 802973c:	4a5c      	ldr	r2, [pc, #368]	; (80298b0 <main+0x268>)
 802973e:	2141      	movs	r1, #65	; 0x41
 8029740:	2001      	movs	r0, #1
 8029742:	f00e fc31 	bl	8037fa8 <osMessageQueueNew>
 8029746:	4602      	mov	r2, r0
 8029748:	4b5a      	ldr	r3, [pc, #360]	; (80298b4 <main+0x26c>)
 802974a:	601a      	str	r2, [r3, #0]

    /* creation of ReportQueue */
    ReportQueueHandle = osMessageQueueNew(100, sizeof(report_t), &ReportQueue_attributes);
 802974c:	4a5a      	ldr	r2, [pc, #360]	; (80298b8 <main+0x270>)
 802974e:	215a      	movs	r1, #90	; 0x5a
 8029750:	2064      	movs	r0, #100	; 0x64
 8029752:	f00e fc29 	bl	8037fa8 <osMessageQueueNew>
 8029756:	4602      	mov	r2, r0
 8029758:	4b58      	ldr	r3, [pc, #352]	; (80298bc <main+0x274>)
 802975a:	601a      	str	r2, [r3, #0]

    /* creation of DriverQueue */
    DriverQueueHandle = osMessageQueueNew(1, sizeof(uint8_t), &DriverQueue_attributes);
 802975c:	4a58      	ldr	r2, [pc, #352]	; (80298c0 <main+0x278>)
 802975e:	2101      	movs	r1, #1
 8029760:	2001      	movs	r0, #1
 8029762:	f00e fc21 	bl	8037fa8 <osMessageQueueNew>
 8029766:	4602      	mov	r2, r0
 8029768:	4b56      	ldr	r3, [pc, #344]	; (80298c4 <main+0x27c>)
 802976a:	601a      	str	r2, [r3, #0]

    /* USER CODE BEGIN RTOS_QUEUES */
    /* add queues, ... */
    GlobalEventHandle = osEventFlagsNew(NULL);
 802976c:	2000      	movs	r0, #0
 802976e:	f00e f9b3 	bl	8037ad8 <osEventFlagsNew>
 8029772:	4602      	mov	r2, r0
 8029774:	4b54      	ldr	r3, [pc, #336]	; (80298c8 <main+0x280>)
 8029776:	601a      	str	r2, [r3, #0]
    /* USER CODE END RTOS_QUEUES */

    /* Create the thread(s) */
    /* creation of ManagerTask */
    ManagerTaskHandle = osThreadNew(StartManagerTask, NULL, &ManagerTask_attributes);
 8029778:	4a54      	ldr	r2, [pc, #336]	; (80298cc <main+0x284>)
 802977a:	2100      	movs	r1, #0
 802977c:	4854      	ldr	r0, [pc, #336]	; (80298d0 <main+0x288>)
 802977e:	f00d ff51 	bl	8037624 <osThreadNew>
 8029782:	4602      	mov	r2, r0
 8029784:	4b53      	ldr	r3, [pc, #332]	; (80298d4 <main+0x28c>)
 8029786:	601a      	str	r2, [r3, #0]

    /* creation of IotTask */
    IotTaskHandle = osThreadNew(StartIotTask, NULL, &IotTask_attributes);
 8029788:	4a53      	ldr	r2, [pc, #332]	; (80298d8 <main+0x290>)
 802978a:	2100      	movs	r1, #0
 802978c:	4853      	ldr	r0, [pc, #332]	; (80298dc <main+0x294>)
 802978e:	f00d ff49 	bl	8037624 <osThreadNew>
 8029792:	4602      	mov	r2, r0
 8029794:	4b52      	ldr	r3, [pc, #328]	; (80298e0 <main+0x298>)
 8029796:	601a      	str	r2, [r3, #0]

    /* creation of ReporterTask */
    ReporterTaskHandle = osThreadNew(StartReporterTask, NULL, &ReporterTask_attributes);
 8029798:	4a52      	ldr	r2, [pc, #328]	; (80298e4 <main+0x29c>)
 802979a:	2100      	movs	r1, #0
 802979c:	4852      	ldr	r0, [pc, #328]	; (80298e8 <main+0x2a0>)
 802979e:	f00d ff41 	bl	8037624 <osThreadNew>
 80297a2:	4602      	mov	r2, r0
 80297a4:	4b51      	ldr	r3, [pc, #324]	; (80298ec <main+0x2a4>)
 80297a6:	601a      	str	r2, [r3, #0]

    /* creation of CommandTask */
    CommandTaskHandle = osThreadNew(StartCommandTask, NULL, &CommandTask_attributes);
 80297a8:	4a51      	ldr	r2, [pc, #324]	; (80298f0 <main+0x2a8>)
 80297aa:	2100      	movs	r1, #0
 80297ac:	4851      	ldr	r0, [pc, #324]	; (80298f4 <main+0x2ac>)
 80297ae:	f00d ff39 	bl	8037624 <osThreadNew>
 80297b2:	4602      	mov	r2, r0
 80297b4:	4b50      	ldr	r3, [pc, #320]	; (80298f8 <main+0x2b0>)
 80297b6:	601a      	str	r2, [r3, #0]

    /* creation of GpsTask */
    GpsTaskHandle = osThreadNew(StartGpsTask, NULL, &GpsTask_attributes);
 80297b8:	4a50      	ldr	r2, [pc, #320]	; (80298fc <main+0x2b4>)
 80297ba:	2100      	movs	r1, #0
 80297bc:	4850      	ldr	r0, [pc, #320]	; (8029900 <main+0x2b8>)
 80297be:	f00d ff31 	bl	8037624 <osThreadNew>
 80297c2:	4602      	mov	r2, r0
 80297c4:	4b4f      	ldr	r3, [pc, #316]	; (8029904 <main+0x2bc>)
 80297c6:	601a      	str	r2, [r3, #0]

    /* creation of GyroTask */
    GyroTaskHandle = osThreadNew(StartGyroTask, NULL, &GyroTask_attributes);
 80297c8:	4a4f      	ldr	r2, [pc, #316]	; (8029908 <main+0x2c0>)
 80297ca:	2100      	movs	r1, #0
 80297cc:	484f      	ldr	r0, [pc, #316]	; (802990c <main+0x2c4>)
 80297ce:	f00d ff29 	bl	8037624 <osThreadNew>
 80297d2:	4602      	mov	r2, r0
 80297d4:	4b4e      	ldr	r3, [pc, #312]	; (8029910 <main+0x2c8>)
 80297d6:	601a      	str	r2, [r3, #0]

    /* creation of KeylessTask */
    KeylessTaskHandle = osThreadNew(StartKeylessTask, NULL, &KeylessTask_attributes);
 80297d8:	4a4e      	ldr	r2, [pc, #312]	; (8029914 <main+0x2cc>)
 80297da:	2100      	movs	r1, #0
 80297dc:	484e      	ldr	r0, [pc, #312]	; (8029918 <main+0x2d0>)
 80297de:	f00d ff21 	bl	8037624 <osThreadNew>
 80297e2:	4602      	mov	r2, r0
 80297e4:	4b4d      	ldr	r3, [pc, #308]	; (802991c <main+0x2d4>)
 80297e6:	601a      	str	r2, [r3, #0]

    /* creation of FingerTask */
    FingerTaskHandle = osThreadNew(StartFingerTask, NULL, &FingerTask_attributes);
 80297e8:	4a4d      	ldr	r2, [pc, #308]	; (8029920 <main+0x2d8>)
 80297ea:	2100      	movs	r1, #0
 80297ec:	484d      	ldr	r0, [pc, #308]	; (8029924 <main+0x2dc>)
 80297ee:	f00d ff19 	bl	8037624 <osThreadNew>
 80297f2:	4602      	mov	r2, r0
 80297f4:	4b4c      	ldr	r3, [pc, #304]	; (8029928 <main+0x2e0>)
 80297f6:	601a      	str	r2, [r3, #0]

    /* creation of AudioTask */
    AudioTaskHandle = osThreadNew(StartAudioTask, NULL, &AudioTask_attributes);
 80297f8:	4a4c      	ldr	r2, [pc, #304]	; (802992c <main+0x2e4>)
 80297fa:	2100      	movs	r1, #0
 80297fc:	484c      	ldr	r0, [pc, #304]	; (8029930 <main+0x2e8>)
 80297fe:	f00d ff11 	bl	8037624 <osThreadNew>
 8029802:	4602      	mov	r2, r0
 8029804:	4b4b      	ldr	r3, [pc, #300]	; (8029934 <main+0x2ec>)
 8029806:	601a      	str	r2, [r3, #0]

    /* creation of SwitchTask */
    SwitchTaskHandle = osThreadNew(StartSwitchTask, NULL, &SwitchTask_attributes);
 8029808:	4a4b      	ldr	r2, [pc, #300]	; (8029938 <main+0x2f0>)
 802980a:	2100      	movs	r1, #0
 802980c:	484b      	ldr	r0, [pc, #300]	; (802993c <main+0x2f4>)
 802980e:	f00d ff09 	bl	8037624 <osThreadNew>
 8029812:	4602      	mov	r2, r0
 8029814:	4b4a      	ldr	r3, [pc, #296]	; (8029940 <main+0x2f8>)
 8029816:	601a      	str	r2, [r3, #0]

    /* creation of CanRxTask */
    CanRxTaskHandle = osThreadNew(StartCanRxTask, NULL, &CanRxTask_attributes);
 8029818:	4a4a      	ldr	r2, [pc, #296]	; (8029944 <main+0x2fc>)
 802981a:	2100      	movs	r1, #0
 802981c:	484a      	ldr	r0, [pc, #296]	; (8029948 <main+0x300>)
 802981e:	f00d ff01 	bl	8037624 <osThreadNew>
 8029822:	4602      	mov	r2, r0
 8029824:	4b49      	ldr	r3, [pc, #292]	; (802994c <main+0x304>)
 8029826:	601a      	str	r2, [r3, #0]

    /* creation of CanTxTask */
    CanTxTaskHandle = osThreadNew(StartCanTxTask, NULL, &CanTxTask_attributes);
 8029828:	4a49      	ldr	r2, [pc, #292]	; (8029950 <main+0x308>)
 802982a:	2100      	movs	r1, #0
 802982c:	4849      	ldr	r0, [pc, #292]	; (8029954 <main+0x30c>)
 802982e:	f00d fef9 	bl	8037624 <osThreadNew>
 8029832:	4602      	mov	r2, r0
 8029834:	4b48      	ldr	r3, [pc, #288]	; (8029958 <main+0x310>)
 8029836:	601a      	str	r2, [r3, #0]

    /* creation of Hmi2PowerTask */
    Hmi2PowerTaskHandle = osThreadNew(StartHmi2PowerTask, NULL, &Hmi2PowerTask_attributes);
 8029838:	4a48      	ldr	r2, [pc, #288]	; (802995c <main+0x314>)
 802983a:	2100      	movs	r1, #0
 802983c:	4848      	ldr	r0, [pc, #288]	; (8029960 <main+0x318>)
 802983e:	f00d fef1 	bl	8037624 <osThreadNew>
 8029842:	4602      	mov	r2, r0
 8029844:	4b47      	ldr	r3, [pc, #284]	; (8029964 <main+0x31c>)
 8029846:	601a      	str	r2, [r3, #0]

    /* USER CODE BEGIN RTOS_THREADS */
    /* add threads, ... */
    HAL_Delay(1000);
 8029848:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 802984c:	f002 fd9a 	bl	802c384 <HAL_Delay>
    /* USER CODE END RTOS_THREADS */

    /* Start scheduler */
    osKernelStart();
 8029850:	f00d fe8a 	bl	8037568 <osKernelStart>

    /* We should never get here as control is now taken by the scheduler */
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1) {
 8029854:	e7fe      	b.n	8029854 <main+0x20c>
 8029856:	bf00      	nop
 8029858:	08056160 	.word	0x08056160
 802985c:	20008a5c 	.word	0x20008a5c
 8029860:	08056170 	.word	0x08056170
 8029864:	20008684 	.word	0x20008684
 8029868:	08056180 	.word	0x08056180
 802986c:	200085d4 	.word	0x200085d4
 8029870:	08056190 	.word	0x08056190
 8029874:	20008978 	.word	0x20008978
 8029878:	080561a0 	.word	0x080561a0
 802987c:	200085d0 	.word	0x200085d0
 8029880:	080561b0 	.word	0x080561b0
 8029884:	20008690 	.word	0x20008690
 8029888:	080561c0 	.word	0x080561c0
 802988c:	20008890 	.word	0x20008890
 8029890:	080561d0 	.word	0x080561d0
 8029894:	20008a58 	.word	0x20008a58
 8029898:	080561e0 	.word	0x080561e0
 802989c:	20008a54 	.word	0x20008a54
 80298a0:	080561f0 	.word	0x080561f0
 80298a4:	200086fc 	.word	0x200086fc
 80298a8:	08056100 	.word	0x08056100
 80298ac:	200089a4 	.word	0x200089a4
 80298b0:	08056118 	.word	0x08056118
 80298b4:	20008578 	.word	0x20008578
 80298b8:	08056130 	.word	0x08056130
 80298bc:	20008688 	.word	0x20008688
 80298c0:	08056148 	.word	0x08056148
 80298c4:	200087a8 	.word	0x200087a8
 80298c8:	2000868c 	.word	0x2000868c
 80298cc:	08055f2c 	.word	0x08055f2c
 80298d0:	0802a5f1 	.word	0x0802a5f1
 80298d4:	200089a8 	.word	0x200089a8
 80298d8:	08055f50 	.word	0x08055f50
 80298dc:	0802a689 	.word	0x0802a689
 80298e0:	20008934 	.word	0x20008934
 80298e4:	08055f74 	.word	0x08055f74
 80298e8:	0802a88d 	.word	0x0802a88d
 80298ec:	200086f8 	.word	0x200086f8
 80298f0:	08055f98 	.word	0x08055f98
 80298f4:	0802a975 	.word	0x0802a975
 80298f8:	20008894 	.word	0x20008894
 80298fc:	08055fbc 	.word	0x08055fbc
 8029900:	0802aca1 	.word	0x0802aca1
 8029904:	2000888c 	.word	0x2000888c
 8029908:	08055fe0 	.word	0x08055fe0
 802990c:	0802acdd 	.word	0x0802acdd
 8029910:	2000884c 	.word	0x2000884c
 8029914:	08056004 	.word	0x08056004
 8029918:	0802ad91 	.word	0x0802ad91
 802991c:	20008680 	.word	0x20008680
 8029920:	08056028 	.word	0x08056028
 8029924:	0802af51 	.word	0x0802af51
 8029928:	20008694 	.word	0x20008694
 802992c:	0805604c 	.word	0x0805604c
 8029930:	0802b0c9 	.word	0x0802b0c9
 8029934:	20008a50 	.word	0x20008a50
 8029938:	08056070 	.word	0x08056070
 802993c:	0802b1d5 	.word	0x0802b1d5
 8029940:	20008930 	.word	0x20008930
 8029944:	08056094 	.word	0x08056094
 8029948:	0802b2cd 	.word	0x0802b2cd
 802994c:	20008850 	.word	0x20008850
 8029950:	080560b8 	.word	0x080560b8
 8029954:	0802b369 	.word	0x0802b369
 8029958:	20008888 	.word	0x20008888
 802995c:	080560dc 	.word	0x080560dc
 8029960:	08029029 	.word	0x08029029
 8029964:	20008874 	.word	0x20008874

08029968 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8029968:	b580      	push	{r7, lr}
 802996a:	b0aa      	sub	sp, #168	; 0xa8
 802996c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 802996e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8029972:	2234      	movs	r2, #52	; 0x34
 8029974:	2100      	movs	r1, #0
 8029976:	4618      	mov	r0, r3
 8029978:	f015 ffca 	bl	803f910 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 802997c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8029980:	2200      	movs	r2, #0
 8029982:	601a      	str	r2, [r3, #0]
 8029984:	605a      	str	r2, [r3, #4]
 8029986:	609a      	str	r2, [r3, #8]
 8029988:	60da      	str	r2, [r3, #12]
 802998a:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 802998c:	f107 0308 	add.w	r3, r7, #8
 8029990:	2258      	movs	r2, #88	; 0x58
 8029992:	2100      	movs	r1, #0
 8029994:	4618      	mov	r0, r3
 8029996:	f015 ffbb 	bl	803f910 <memset>

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 802999a:	2300      	movs	r3, #0
 802999c:	607b      	str	r3, [r7, #4]
 802999e:	4b3e      	ldr	r3, [pc, #248]	; (8029a98 <SystemClock_Config+0x130>)
 80299a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80299a2:	4a3d      	ldr	r2, [pc, #244]	; (8029a98 <SystemClock_Config+0x130>)
 80299a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80299a8:	6413      	str	r3, [r2, #64]	; 0x40
 80299aa:	4b3b      	ldr	r3, [pc, #236]	; (8029a98 <SystemClock_Config+0x130>)
 80299ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80299ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80299b2:	607b      	str	r3, [r7, #4]
 80299b4:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80299b6:	2300      	movs	r3, #0
 80299b8:	603b      	str	r3, [r7, #0]
 80299ba:	4b38      	ldr	r3, [pc, #224]	; (8029a9c <SystemClock_Config+0x134>)
 80299bc:	681b      	ldr	r3, [r3, #0]
 80299be:	4a37      	ldr	r2, [pc, #220]	; (8029a9c <SystemClock_Config+0x134>)
 80299c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80299c4:	6013      	str	r3, [r2, #0]
 80299c6:	4b35      	ldr	r3, [pc, #212]	; (8029a9c <SystemClock_Config+0x134>)
 80299c8:	681b      	ldr	r3, [r3, #0]
 80299ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80299ce:	603b      	str	r3, [r7, #0]
 80299d0:	683b      	ldr	r3, [r7, #0]
    /** Initializes the CPU, AHB and APB busses clocks
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE
 80299d2:	230d      	movs	r3, #13
 80299d4:	677b      	str	r3, [r7, #116]	; 0x74
            | RCC_OSCILLATORTYPE_LSE;
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80299d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80299da:	67bb      	str	r3, [r7, #120]	; 0x78
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80299dc:	2301      	movs	r3, #1
 80299de:	67fb      	str	r3, [r7, #124]	; 0x7c
    RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80299e0:	2301      	movs	r3, #1
 80299e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80299e6:	2302      	movs	r3, #2
 80299e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80299ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80299f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    RCC_OscInitStruct.PLL.PLLM = 4;
 80299f4:	2304      	movs	r3, #4
 80299f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    RCC_OscInitStruct.PLL.PLLN = 100;
 80299fa:	2364      	movs	r3, #100	; 0x64
 80299fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8029a00:	2302      	movs	r3, #2
 8029a02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8029a06:	2304      	movs	r3, #4
 8029a08:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    RCC_OscInitStruct.PLL.PLLR = 2;
 8029a0c:	2302      	movs	r3, #2
 8029a0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8029a12:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8029a16:	4618      	mov	r0, r3
 8029a18:	f00a ff96 	bl	8034948 <HAL_RCC_OscConfig>
 8029a1c:	4603      	mov	r3, r0
 8029a1e:	2b00      	cmp	r3, #0
 8029a20:	d001      	beq.n	8029a26 <SystemClock_Config+0xbe>
            {
        Error_Handler();
 8029a22:	f001 fd21 	bl	802b468 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB busses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8029a26:	230f      	movs	r3, #15
 8029a28:	663b      	str	r3, [r7, #96]	; 0x60
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8029a2a:	2302      	movs	r3, #2
 8029a2c:	667b      	str	r3, [r7, #100]	; 0x64
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8029a2e:	2300      	movs	r3, #0
 8029a30:	66bb      	str	r3, [r7, #104]	; 0x68
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8029a32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8029a36:	66fb      	str	r3, [r7, #108]	; 0x6c
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8029a38:	2300      	movs	r3, #0
 8029a3a:	673b      	str	r3, [r7, #112]	; 0x70

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8029a3c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8029a40:	2103      	movs	r1, #3
 8029a42:	4618      	mov	r0, r3
 8029a44:	f00a f8d0 	bl	8033be8 <HAL_RCC_ClockConfig>
 8029a48:	4603      	mov	r3, r0
 8029a4a:	2b00      	cmp	r3, #0
 8029a4c:	d001      	beq.n	8029a52 <SystemClock_Config+0xea>
            {
        Error_Handler();
 8029a4e:	f001 fd0b 	bl	802b468 <Error_Handler>
    }
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1 | RCC_PERIPHCLK_RTC
 8029a52:	2329      	movs	r3, #41	; 0x29
 8029a54:	60bb      	str	r3, [r7, #8]
            | RCC_PERIPHCLK_CLK48;
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 256;
 8029a56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8029a5a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 8029a5c:	2308      	movs	r3, #8
 8029a5e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 5;
 8029a60:	2305      	movs	r3, #5
 8029a62:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8029a64:	2302      	movs	r3, #2
 8029a66:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8029a68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8029a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8029a6e:	2300      	movs	r3, #0
 8029a70:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 8029a72:	2300      	movs	r3, #0
 8029a74:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8029a76:	2300      	movs	r3, #0
 8029a78:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8029a7a:	f107 0308 	add.w	r3, r7, #8
 8029a7e:	4618      	mov	r0, r3
 8029a80:	f00a fad6 	bl	8034030 <HAL_RCCEx_PeriphCLKConfig>
 8029a84:	4603      	mov	r3, r0
 8029a86:	2b00      	cmp	r3, #0
 8029a88:	d001      	beq.n	8029a8e <SystemClock_Config+0x126>
            {
        Error_Handler();
 8029a8a:	f001 fced 	bl	802b468 <Error_Handler>
    }
}
 8029a8e:	bf00      	nop
 8029a90:	37a8      	adds	r7, #168	; 0xa8
 8029a92:	46bd      	mov	sp, r7
 8029a94:	bd80      	pop	{r7, pc}
 8029a96:	bf00      	nop
 8029a98:	40023800 	.word	0x40023800
 8029a9c:	40007000 	.word	0x40007000

08029aa0 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8029aa0:	b580      	push	{r7, lr}
 8029aa2:	b084      	sub	sp, #16
 8029aa4:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_ChannelConfTypeDef sConfig = { 0 };
 8029aa6:	463b      	mov	r3, r7
 8029aa8:	2200      	movs	r2, #0
 8029aaa:	601a      	str	r2, [r3, #0]
 8029aac:	605a      	str	r2, [r3, #4]
 8029aae:	609a      	str	r2, [r3, #8]
 8029ab0:	60da      	str	r2, [r3, #12]
    /* USER CODE BEGIN ADC1_Init 1 */

    /* USER CODE END ADC1_Init 1 */
    /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
     */
    hadc1.Instance = ADC1;
 8029ab2:	4b21      	ldr	r3, [pc, #132]	; (8029b38 <MX_ADC1_Init+0x98>)
 8029ab4:	4a21      	ldr	r2, [pc, #132]	; (8029b3c <MX_ADC1_Init+0x9c>)
 8029ab6:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8029ab8:	4b1f      	ldr	r3, [pc, #124]	; (8029b38 <MX_ADC1_Init+0x98>)
 8029aba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8029abe:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8029ac0:	4b1d      	ldr	r3, [pc, #116]	; (8029b38 <MX_ADC1_Init+0x98>)
 8029ac2:	2200      	movs	r2, #0
 8029ac4:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = DISABLE;
 8029ac6:	4b1c      	ldr	r3, [pc, #112]	; (8029b38 <MX_ADC1_Init+0x98>)
 8029ac8:	2200      	movs	r2, #0
 8029aca:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = ENABLE;
 8029acc:	4b1a      	ldr	r3, [pc, #104]	; (8029b38 <MX_ADC1_Init+0x98>)
 8029ace:	2201      	movs	r2, #1
 8029ad0:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8029ad2:	4b19      	ldr	r3, [pc, #100]	; (8029b38 <MX_ADC1_Init+0x98>)
 8029ad4:	2200      	movs	r2, #0
 8029ad6:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8029ada:	4b17      	ldr	r3, [pc, #92]	; (8029b38 <MX_ADC1_Init+0x98>)
 8029adc:	2200      	movs	r2, #0
 8029ade:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8029ae0:	4b15      	ldr	r3, [pc, #84]	; (8029b38 <MX_ADC1_Init+0x98>)
 8029ae2:	4a17      	ldr	r2, [pc, #92]	; (8029b40 <MX_ADC1_Init+0xa0>)
 8029ae4:	629a      	str	r2, [r3, #40]	; 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8029ae6:	4b14      	ldr	r3, [pc, #80]	; (8029b38 <MX_ADC1_Init+0x98>)
 8029ae8:	2200      	movs	r2, #0
 8029aea:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 8029aec:	4b12      	ldr	r3, [pc, #72]	; (8029b38 <MX_ADC1_Init+0x98>)
 8029aee:	2201      	movs	r2, #1
 8029af0:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = ENABLE;
 8029af2:	4b11      	ldr	r3, [pc, #68]	; (8029b38 <MX_ADC1_Init+0x98>)
 8029af4:	2201      	movs	r2, #1
 8029af6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8029afa:	4b0f      	ldr	r3, [pc, #60]	; (8029b38 <MX_ADC1_Init+0x98>)
 8029afc:	2200      	movs	r2, #0
 8029afe:	615a      	str	r2, [r3, #20]
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8029b00:	480d      	ldr	r0, [pc, #52]	; (8029b38 <MX_ADC1_Init+0x98>)
 8029b02:	f002 fc61 	bl	802c3c8 <HAL_ADC_Init>
 8029b06:	4603      	mov	r3, r0
 8029b08:	2b00      	cmp	r3, #0
 8029b0a:	d001      	beq.n	8029b10 <MX_ADC1_Init+0x70>
            {
        Error_Handler();
 8029b0c:	f001 fcac 	bl	802b468 <Error_Handler>
    }
    /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
     */
    sConfig.Channel = ADC_CHANNEL_9;
 8029b10:	2309      	movs	r3, #9
 8029b12:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 8029b14:	2301      	movs	r3, #1
 8029b16:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8029b18:	2301      	movs	r3, #1
 8029b1a:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8029b1c:	463b      	mov	r3, r7
 8029b1e:	4619      	mov	r1, r3
 8029b20:	4805      	ldr	r0, [pc, #20]	; (8029b38 <MX_ADC1_Init+0x98>)
 8029b22:	f002 fd73 	bl	802c60c <HAL_ADC_ConfigChannel>
 8029b26:	4603      	mov	r3, r0
 8029b28:	2b00      	cmp	r3, #0
 8029b2a:	d001      	beq.n	8029b30 <MX_ADC1_Init+0x90>
            {
        Error_Handler();
 8029b2c:	f001 fc9c 	bl	802b468 <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */

}
 8029b30:	bf00      	nop
 8029b32:	3710      	adds	r7, #16
 8029b34:	46bd      	mov	sp, r7
 8029b36:	bd80      	pop	{r7, pc}
 8029b38:	20008700 	.word	0x20008700
 8029b3c:	40012000 	.word	0x40012000
 8029b40:	0f000001 	.word	0x0f000001

08029b44 <MX_AES_Init>:
 * @brief AES Initialization Function
 * @param None
 * @retval None
 */
static void MX_AES_Init(void)
{
 8029b44:	b580      	push	{r7, lr}
 8029b46:	af00      	add	r7, sp, #0
    /* USER CODE END AES_Init 0 */

    /* USER CODE BEGIN AES_Init 1 */

    /* USER CODE END AES_Init 1 */
    hcryp.Instance = AES;
 8029b48:	4b0f      	ldr	r3, [pc, #60]	; (8029b88 <MX_AES_Init+0x44>)
 8029b4a:	4a10      	ldr	r2, [pc, #64]	; (8029b8c <MX_AES_Init+0x48>)
 8029b4c:	601a      	str	r2, [r3, #0]
    hcryp.Init.DataType = CRYP_DATATYPE_8B;
 8029b4e:	4b0e      	ldr	r3, [pc, #56]	; (8029b88 <MX_AES_Init+0x44>)
 8029b50:	2204      	movs	r2, #4
 8029b52:	605a      	str	r2, [r3, #4]
    hcryp.Init.KeySize = CRYP_KEYSIZE_128B;
 8029b54:	4b0c      	ldr	r3, [pc, #48]	; (8029b88 <MX_AES_Init+0x44>)
 8029b56:	2200      	movs	r2, #0
 8029b58:	609a      	str	r2, [r3, #8]
    hcryp.Init.pKey = (uint32_t*) pKeyAES;
 8029b5a:	4b0b      	ldr	r3, [pc, #44]	; (8029b88 <MX_AES_Init+0x44>)
 8029b5c:	4a0c      	ldr	r2, [pc, #48]	; (8029b90 <MX_AES_Init+0x4c>)
 8029b5e:	60da      	str	r2, [r3, #12]
    hcryp.Init.Algorithm = CRYP_AES_ECB;
 8029b60:	4b09      	ldr	r3, [pc, #36]	; (8029b88 <MX_AES_Init+0x44>)
 8029b62:	2200      	movs	r2, #0
 8029b64:	615a      	str	r2, [r3, #20]
    hcryp.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_BYTE;
 8029b66:	4b08      	ldr	r3, [pc, #32]	; (8029b88 <MX_AES_Init+0x44>)
 8029b68:	2201      	movs	r2, #1
 8029b6a:	625a      	str	r2, [r3, #36]	; 0x24
    hcryp.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ALWAYS;
 8029b6c:	4b06      	ldr	r3, [pc, #24]	; (8029b88 <MX_AES_Init+0x44>)
 8029b6e:	2200      	movs	r2, #0
 8029b70:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_CRYP_Init(&hcryp) != HAL_OK)
 8029b72:	4805      	ldr	r0, [pc, #20]	; (8029b88 <MX_AES_Init+0x44>)
 8029b74:	f003 ffdf 	bl	802db36 <HAL_CRYP_Init>
 8029b78:	4603      	mov	r3, r0
 8029b7a:	2b00      	cmp	r3, #0
 8029b7c:	d001      	beq.n	8029b82 <MX_AES_Init+0x3e>
            {
        Error_Handler();
 8029b7e:	f001 fc73 	bl	802b468 <Error_Handler>
    }
    /* USER CODE BEGIN AES_Init 2 */

    /* USER CODE END AES_Init 2 */

}
 8029b82:	bf00      	nop
 8029b84:	bd80      	pop	{r7, pc}
 8029b86:	bf00      	nop
 8029b88:	200089ac 	.word	0x200089ac
 8029b8c:	50060000 	.word	0x50060000
 8029b90:	08055f1c 	.word	0x08055f1c

08029b94 <MX_CAN1_Init>:
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void)
{
 8029b94:	b580      	push	{r7, lr}
 8029b96:	af00      	add	r7, sp, #0
    /* USER CODE END CAN1_Init 0 */

    /* USER CODE BEGIN CAN1_Init 1 */

    /* USER CODE END CAN1_Init 1 */
    hcan1.Instance = CAN1;
 8029b98:	4b17      	ldr	r3, [pc, #92]	; (8029bf8 <MX_CAN1_Init+0x64>)
 8029b9a:	4a18      	ldr	r2, [pc, #96]	; (8029bfc <MX_CAN1_Init+0x68>)
 8029b9c:	601a      	str	r2, [r3, #0]
    hcan1.Init.Prescaler = 10;
 8029b9e:	4b16      	ldr	r3, [pc, #88]	; (8029bf8 <MX_CAN1_Init+0x64>)
 8029ba0:	220a      	movs	r2, #10
 8029ba2:	605a      	str	r2, [r3, #4]
    hcan1.Init.Mode = CAN_MODE_NORMAL;
 8029ba4:	4b14      	ldr	r3, [pc, #80]	; (8029bf8 <MX_CAN1_Init+0x64>)
 8029ba6:	2200      	movs	r2, #0
 8029ba8:	609a      	str	r2, [r3, #8]
    hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8029baa:	4b13      	ldr	r3, [pc, #76]	; (8029bf8 <MX_CAN1_Init+0x64>)
 8029bac:	2200      	movs	r2, #0
 8029bae:	60da      	str	r2, [r3, #12]
    hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8029bb0:	4b11      	ldr	r3, [pc, #68]	; (8029bf8 <MX_CAN1_Init+0x64>)
 8029bb2:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8029bb6:	611a      	str	r2, [r3, #16]
    hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8029bb8:	4b0f      	ldr	r3, [pc, #60]	; (8029bf8 <MX_CAN1_Init+0x64>)
 8029bba:	2200      	movs	r2, #0
 8029bbc:	615a      	str	r2, [r3, #20]
    hcan1.Init.TimeTriggeredMode = DISABLE;
 8029bbe:	4b0e      	ldr	r3, [pc, #56]	; (8029bf8 <MX_CAN1_Init+0x64>)
 8029bc0:	2200      	movs	r2, #0
 8029bc2:	761a      	strb	r2, [r3, #24]
    hcan1.Init.AutoBusOff = ENABLE;
 8029bc4:	4b0c      	ldr	r3, [pc, #48]	; (8029bf8 <MX_CAN1_Init+0x64>)
 8029bc6:	2201      	movs	r2, #1
 8029bc8:	765a      	strb	r2, [r3, #25]
    hcan1.Init.AutoWakeUp = DISABLE;
 8029bca:	4b0b      	ldr	r3, [pc, #44]	; (8029bf8 <MX_CAN1_Init+0x64>)
 8029bcc:	2200      	movs	r2, #0
 8029bce:	769a      	strb	r2, [r3, #26]
    hcan1.Init.AutoRetransmission = DISABLE;
 8029bd0:	4b09      	ldr	r3, [pc, #36]	; (8029bf8 <MX_CAN1_Init+0x64>)
 8029bd2:	2200      	movs	r2, #0
 8029bd4:	76da      	strb	r2, [r3, #27]
    hcan1.Init.ReceiveFifoLocked = DISABLE;
 8029bd6:	4b08      	ldr	r3, [pc, #32]	; (8029bf8 <MX_CAN1_Init+0x64>)
 8029bd8:	2200      	movs	r2, #0
 8029bda:	771a      	strb	r2, [r3, #28]
    hcan1.Init.TransmitFifoPriority = DISABLE;
 8029bdc:	4b06      	ldr	r3, [pc, #24]	; (8029bf8 <MX_CAN1_Init+0x64>)
 8029bde:	2200      	movs	r2, #0
 8029be0:	775a      	strb	r2, [r3, #29]
    if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8029be2:	4805      	ldr	r0, [pc, #20]	; (8029bf8 <MX_CAN1_Init+0x64>)
 8029be4:	f002 ffc2 	bl	802cb6c <HAL_CAN_Init>
 8029be8:	4603      	mov	r3, r0
 8029bea:	2b00      	cmp	r3, #0
 8029bec:	d001      	beq.n	8029bf2 <MX_CAN1_Init+0x5e>
            {
        Error_Handler();
 8029bee:	f001 fc3b 	bl	802b468 <Error_Handler>
    }
    /* USER CODE BEGIN CAN1_Init 2 */

    /* USER CODE END CAN1_Init 2 */

}
 8029bf2:	bf00      	nop
 8029bf4:	bd80      	pop	{r7, pc}
 8029bf6:	bf00      	nop
 8029bf8:	2000897c 	.word	0x2000897c
 8029bfc:	40006400 	.word	0x40006400

08029c00 <MX_CRC_Init>:
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{
 8029c00:	b580      	push	{r7, lr}
 8029c02:	af00      	add	r7, sp, #0
    /* USER CODE END CRC_Init 0 */

    /* USER CODE BEGIN CRC_Init 1 */

    /* USER CODE END CRC_Init 1 */
    hcrc.Instance = CRC;
 8029c04:	4b06      	ldr	r3, [pc, #24]	; (8029c20 <MX_CRC_Init+0x20>)
 8029c06:	4a07      	ldr	r2, [pc, #28]	; (8029c24 <MX_CRC_Init+0x24>)
 8029c08:	601a      	str	r2, [r3, #0]
    if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8029c0a:	4805      	ldr	r0, [pc, #20]	; (8029c20 <MX_CRC_Init+0x20>)
 8029c0c:	f003 ff77 	bl	802dafe <HAL_CRC_Init>
 8029c10:	4603      	mov	r3, r0
 8029c12:	2b00      	cmp	r3, #0
 8029c14:	d001      	beq.n	8029c1a <MX_CRC_Init+0x1a>
            {
        Error_Handler();
 8029c16:	f001 fc27 	bl	802b468 <Error_Handler>
    }
    /* USER CODE BEGIN CRC_Init 2 */

    /* USER CODE END CRC_Init 2 */

}
 8029c1a:	bf00      	nop
 8029c1c:	bd80      	pop	{r7, pc}
 8029c1e:	bf00      	nop
 8029c20:	20008624 	.word	0x20008624
 8029c24:	40023000 	.word	0x40023000

08029c28 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8029c28:	b580      	push	{r7, lr}
 8029c2a:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 8029c2c:	4b1b      	ldr	r3, [pc, #108]	; (8029c9c <MX_I2C1_Init+0x74>)
 8029c2e:	4a1c      	ldr	r2, [pc, #112]	; (8029ca0 <MX_I2C1_Init+0x78>)
 8029c30:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 8029c32:	4b1a      	ldr	r3, [pc, #104]	; (8029c9c <MX_I2C1_Init+0x74>)
 8029c34:	4a1b      	ldr	r2, [pc, #108]	; (8029ca4 <MX_I2C1_Init+0x7c>)
 8029c36:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8029c38:	4b18      	ldr	r3, [pc, #96]	; (8029c9c <MX_I2C1_Init+0x74>)
 8029c3a:	2200      	movs	r2, #0
 8029c3c:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8029c3e:	4b17      	ldr	r3, [pc, #92]	; (8029c9c <MX_I2C1_Init+0x74>)
 8029c40:	2200      	movs	r2, #0
 8029c42:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8029c44:	4b15      	ldr	r3, [pc, #84]	; (8029c9c <MX_I2C1_Init+0x74>)
 8029c46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8029c4a:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8029c4c:	4b13      	ldr	r3, [pc, #76]	; (8029c9c <MX_I2C1_Init+0x74>)
 8029c4e:	2200      	movs	r2, #0
 8029c50:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8029c52:	4b12      	ldr	r3, [pc, #72]	; (8029c9c <MX_I2C1_Init+0x74>)
 8029c54:	2200      	movs	r2, #0
 8029c56:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8029c58:	4b10      	ldr	r3, [pc, #64]	; (8029c9c <MX_I2C1_Init+0x74>)
 8029c5a:	2200      	movs	r2, #0
 8029c5c:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8029c5e:	4b0f      	ldr	r3, [pc, #60]	; (8029c9c <MX_I2C1_Init+0x74>)
 8029c60:	2200      	movs	r2, #0
 8029c62:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8029c64:	480d      	ldr	r0, [pc, #52]	; (8029c9c <MX_I2C1_Init+0x74>)
 8029c66:	f006 fabf 	bl	80301e8 <HAL_I2C_Init>
 8029c6a:	4603      	mov	r3, r0
 8029c6c:	2b00      	cmp	r3, #0
 8029c6e:	d001      	beq.n	8029c74 <MX_I2C1_Init+0x4c>
            {
        Error_Handler();
 8029c70:	f001 fbfa 	bl	802b468 <Error_Handler>
    }
    /** Configure Analogue filter
     */
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8029c74:	2100      	movs	r1, #0
 8029c76:	4809      	ldr	r0, [pc, #36]	; (8029c9c <MX_I2C1_Init+0x74>)
 8029c78:	f009 f923 	bl	8032ec2 <HAL_I2CEx_ConfigAnalogFilter>
 8029c7c:	4603      	mov	r3, r0
 8029c7e:	2b00      	cmp	r3, #0
 8029c80:	d001      	beq.n	8029c86 <MX_I2C1_Init+0x5e>
            {
        Error_Handler();
 8029c82:	f001 fbf1 	bl	802b468 <Error_Handler>
    }
    /** Configure Digital filter
     */
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8029c86:	2100      	movs	r1, #0
 8029c88:	4804      	ldr	r0, [pc, #16]	; (8029c9c <MX_I2C1_Init+0x74>)
 8029c8a:	f009 f956 	bl	8032f3a <HAL_I2CEx_ConfigDigitalFilter>
 8029c8e:	4603      	mov	r3, r0
 8029c90:	2b00      	cmp	r3, #0
 8029c92:	d001      	beq.n	8029c98 <MX_I2C1_Init+0x70>
            {
        Error_Handler();
 8029c94:	f001 fbe8 	bl	802b468 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */

}
 8029c98:	bf00      	nop
 8029c9a:	bd80      	pop	{r7, pc}
 8029c9c:	2000857c 	.word	0x2000857c
 8029ca0:	40005400 	.word	0x40005400
 8029ca4:	000186a0 	.word	0x000186a0

08029ca8 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8029ca8:	b580      	push	{r7, lr}
 8029caa:	af00      	add	r7, sp, #0
    /* USER CODE END I2C2_Init 0 */

    /* USER CODE BEGIN I2C2_Init 1 */

    /* USER CODE END I2C2_Init 1 */
    hi2c2.Instance = I2C2;
 8029cac:	4b1b      	ldr	r3, [pc, #108]	; (8029d1c <MX_I2C2_Init+0x74>)
 8029cae:	4a1c      	ldr	r2, [pc, #112]	; (8029d20 <MX_I2C2_Init+0x78>)
 8029cb0:	601a      	str	r2, [r3, #0]
    hi2c2.Init.ClockSpeed = 100000;
 8029cb2:	4b1a      	ldr	r3, [pc, #104]	; (8029d1c <MX_I2C2_Init+0x74>)
 8029cb4:	4a1b      	ldr	r2, [pc, #108]	; (8029d24 <MX_I2C2_Init+0x7c>)
 8029cb6:	605a      	str	r2, [r3, #4]
    hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8029cb8:	4b18      	ldr	r3, [pc, #96]	; (8029d1c <MX_I2C2_Init+0x74>)
 8029cba:	2200      	movs	r2, #0
 8029cbc:	609a      	str	r2, [r3, #8]
    hi2c2.Init.OwnAddress1 = 0;
 8029cbe:	4b17      	ldr	r3, [pc, #92]	; (8029d1c <MX_I2C2_Init+0x74>)
 8029cc0:	2200      	movs	r2, #0
 8029cc2:	60da      	str	r2, [r3, #12]
    hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8029cc4:	4b15      	ldr	r3, [pc, #84]	; (8029d1c <MX_I2C2_Init+0x74>)
 8029cc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8029cca:	611a      	str	r2, [r3, #16]
    hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8029ccc:	4b13      	ldr	r3, [pc, #76]	; (8029d1c <MX_I2C2_Init+0x74>)
 8029cce:	2200      	movs	r2, #0
 8029cd0:	615a      	str	r2, [r3, #20]
    hi2c2.Init.OwnAddress2 = 0;
 8029cd2:	4b12      	ldr	r3, [pc, #72]	; (8029d1c <MX_I2C2_Init+0x74>)
 8029cd4:	2200      	movs	r2, #0
 8029cd6:	619a      	str	r2, [r3, #24]
    hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8029cd8:	4b10      	ldr	r3, [pc, #64]	; (8029d1c <MX_I2C2_Init+0x74>)
 8029cda:	2200      	movs	r2, #0
 8029cdc:	61da      	str	r2, [r3, #28]
    hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8029cde:	4b0f      	ldr	r3, [pc, #60]	; (8029d1c <MX_I2C2_Init+0x74>)
 8029ce0:	2200      	movs	r2, #0
 8029ce2:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8029ce4:	480d      	ldr	r0, [pc, #52]	; (8029d1c <MX_I2C2_Init+0x74>)
 8029ce6:	f006 fa7f 	bl	80301e8 <HAL_I2C_Init>
 8029cea:	4603      	mov	r3, r0
 8029cec:	2b00      	cmp	r3, #0
 8029cee:	d001      	beq.n	8029cf4 <MX_I2C2_Init+0x4c>
            {
        Error_Handler();
 8029cf0:	f001 fbba 	bl	802b468 <Error_Handler>
    }
    /** Configure Analogue filter
     */
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8029cf4:	2100      	movs	r1, #0
 8029cf6:	4809      	ldr	r0, [pc, #36]	; (8029d1c <MX_I2C2_Init+0x74>)
 8029cf8:	f009 f8e3 	bl	8032ec2 <HAL_I2CEx_ConfigAnalogFilter>
 8029cfc:	4603      	mov	r3, r0
 8029cfe:	2b00      	cmp	r3, #0
 8029d00:	d001      	beq.n	8029d06 <MX_I2C2_Init+0x5e>
            {
        Error_Handler();
 8029d02:	f001 fbb1 	bl	802b468 <Error_Handler>
    }
    /** Configure Digital filter
     */
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8029d06:	2100      	movs	r1, #0
 8029d08:	4804      	ldr	r0, [pc, #16]	; (8029d1c <MX_I2C2_Init+0x74>)
 8029d0a:	f009 f916 	bl	8032f3a <HAL_I2CEx_ConfigDigitalFilter>
 8029d0e:	4603      	mov	r3, r0
 8029d10:	2b00      	cmp	r3, #0
 8029d12:	d001      	beq.n	8029d18 <MX_I2C2_Init+0x70>
            {
        Error_Handler();
 8029d14:	f001 fba8 	bl	802b468 <Error_Handler>
    }
    /* USER CODE BEGIN I2C2_Init 2 */

    /* USER CODE END I2C2_Init 2 */

}
 8029d18:	bf00      	nop
 8029d1a:	bd80      	pop	{r7, pc}
 8029d1c:	2000862c 	.word	0x2000862c
 8029d20:	40005800 	.word	0x40005800
 8029d24:	000186a0 	.word	0x000186a0

08029d28 <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 8029d28:	b580      	push	{r7, lr}
 8029d2a:	af00      	add	r7, sp, #0
    /* USER CODE END I2C3_Init 0 */

    /* USER CODE BEGIN I2C3_Init 1 */

    /* USER CODE END I2C3_Init 1 */
    hi2c3.Instance = I2C3;
 8029d2c:	4b1b      	ldr	r3, [pc, #108]	; (8029d9c <MX_I2C3_Init+0x74>)
 8029d2e:	4a1c      	ldr	r2, [pc, #112]	; (8029da0 <MX_I2C3_Init+0x78>)
 8029d30:	601a      	str	r2, [r3, #0]
    hi2c3.Init.ClockSpeed = 100000;
 8029d32:	4b1a      	ldr	r3, [pc, #104]	; (8029d9c <MX_I2C3_Init+0x74>)
 8029d34:	4a1b      	ldr	r2, [pc, #108]	; (8029da4 <MX_I2C3_Init+0x7c>)
 8029d36:	605a      	str	r2, [r3, #4]
    hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8029d38:	4b18      	ldr	r3, [pc, #96]	; (8029d9c <MX_I2C3_Init+0x74>)
 8029d3a:	2200      	movs	r2, #0
 8029d3c:	609a      	str	r2, [r3, #8]
    hi2c3.Init.OwnAddress1 = 0;
 8029d3e:	4b17      	ldr	r3, [pc, #92]	; (8029d9c <MX_I2C3_Init+0x74>)
 8029d40:	2200      	movs	r2, #0
 8029d42:	60da      	str	r2, [r3, #12]
    hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8029d44:	4b15      	ldr	r3, [pc, #84]	; (8029d9c <MX_I2C3_Init+0x74>)
 8029d46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8029d4a:	611a      	str	r2, [r3, #16]
    hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8029d4c:	4b13      	ldr	r3, [pc, #76]	; (8029d9c <MX_I2C3_Init+0x74>)
 8029d4e:	2200      	movs	r2, #0
 8029d50:	615a      	str	r2, [r3, #20]
    hi2c3.Init.OwnAddress2 = 0;
 8029d52:	4b12      	ldr	r3, [pc, #72]	; (8029d9c <MX_I2C3_Init+0x74>)
 8029d54:	2200      	movs	r2, #0
 8029d56:	619a      	str	r2, [r3, #24]
    hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8029d58:	4b10      	ldr	r3, [pc, #64]	; (8029d9c <MX_I2C3_Init+0x74>)
 8029d5a:	2200      	movs	r2, #0
 8029d5c:	61da      	str	r2, [r3, #28]
    hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8029d5e:	4b0f      	ldr	r3, [pc, #60]	; (8029d9c <MX_I2C3_Init+0x74>)
 8029d60:	2200      	movs	r2, #0
 8029d62:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8029d64:	480d      	ldr	r0, [pc, #52]	; (8029d9c <MX_I2C3_Init+0x74>)
 8029d66:	f006 fa3f 	bl	80301e8 <HAL_I2C_Init>
 8029d6a:	4603      	mov	r3, r0
 8029d6c:	2b00      	cmp	r3, #0
 8029d6e:	d001      	beq.n	8029d74 <MX_I2C3_Init+0x4c>
            {
        Error_Handler();
 8029d70:	f001 fb7a 	bl	802b468 <Error_Handler>
    }
    /** Configure Analogue filter
     */
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8029d74:	2100      	movs	r1, #0
 8029d76:	4809      	ldr	r0, [pc, #36]	; (8029d9c <MX_I2C3_Init+0x74>)
 8029d78:	f009 f8a3 	bl	8032ec2 <HAL_I2CEx_ConfigAnalogFilter>
 8029d7c:	4603      	mov	r3, r0
 8029d7e:	2b00      	cmp	r3, #0
 8029d80:	d001      	beq.n	8029d86 <MX_I2C3_Init+0x5e>
            {
        Error_Handler();
 8029d82:	f001 fb71 	bl	802b468 <Error_Handler>
    }
    /** Configure Digital filter
     */
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8029d86:	2100      	movs	r1, #0
 8029d88:	4804      	ldr	r0, [pc, #16]	; (8029d9c <MX_I2C3_Init+0x74>)
 8029d8a:	f009 f8d6 	bl	8032f3a <HAL_I2CEx_ConfigDigitalFilter>
 8029d8e:	4603      	mov	r3, r0
 8029d90:	2b00      	cmp	r3, #0
 8029d92:	d001      	beq.n	8029d98 <MX_I2C3_Init+0x70>
            {
        Error_Handler();
 8029d94:	f001 fb68 	bl	802b468 <Error_Handler>
    }
    /* USER CODE BEGIN I2C3_Init 2 */

    /* USER CODE END I2C3_Init 2 */

}
 8029d98:	bf00      	nop
 8029d9a:	bd80      	pop	{r7, pc}
 8029d9c:	20008524 	.word	0x20008524
 8029da0:	40005c00 	.word	0x40005c00
 8029da4:	000186a0 	.word	0x000186a0

08029da8 <MX_I2S3_Init>:
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void)
{
 8029da8:	b580      	push	{r7, lr}
 8029daa:	af00      	add	r7, sp, #0
    /* USER CODE END I2S3_Init 0 */

    /* USER CODE BEGIN I2S3_Init 1 */

    /* USER CODE END I2S3_Init 1 */
    hi2s3.Instance = SPI3;
 8029dac:	4b13      	ldr	r3, [pc, #76]	; (8029dfc <MX_I2S3_Init+0x54>)
 8029dae:	4a14      	ldr	r2, [pc, #80]	; (8029e00 <MX_I2S3_Init+0x58>)
 8029db0:	601a      	str	r2, [r3, #0]
    hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8029db2:	4b12      	ldr	r3, [pc, #72]	; (8029dfc <MX_I2S3_Init+0x54>)
 8029db4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8029db8:	605a      	str	r2, [r3, #4]
    hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8029dba:	4b10      	ldr	r3, [pc, #64]	; (8029dfc <MX_I2S3_Init+0x54>)
 8029dbc:	2200      	movs	r2, #0
 8029dbe:	609a      	str	r2, [r3, #8]
    hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8029dc0:	4b0e      	ldr	r3, [pc, #56]	; (8029dfc <MX_I2S3_Init+0x54>)
 8029dc2:	2200      	movs	r2, #0
 8029dc4:	60da      	str	r2, [r3, #12]
    hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8029dc6:	4b0d      	ldr	r3, [pc, #52]	; (8029dfc <MX_I2S3_Init+0x54>)
 8029dc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8029dcc:	611a      	str	r2, [r3, #16]
    hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8029dce:	4b0b      	ldr	r3, [pc, #44]	; (8029dfc <MX_I2S3_Init+0x54>)
 8029dd0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8029dd4:	615a      	str	r2, [r3, #20]
    hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8029dd6:	4b09      	ldr	r3, [pc, #36]	; (8029dfc <MX_I2S3_Init+0x54>)
 8029dd8:	2200      	movs	r2, #0
 8029dda:	619a      	str	r2, [r3, #24]
    hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8029ddc:	4b07      	ldr	r3, [pc, #28]	; (8029dfc <MX_I2S3_Init+0x54>)
 8029dde:	2200      	movs	r2, #0
 8029de0:	61da      	str	r2, [r3, #28]
    hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8029de2:	4b06      	ldr	r3, [pc, #24]	; (8029dfc <MX_I2S3_Init+0x54>)
 8029de4:	2200      	movs	r2, #0
 8029de6:	621a      	str	r2, [r3, #32]
    if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8029de8:	4804      	ldr	r0, [pc, #16]	; (8029dfc <MX_I2S3_Init+0x54>)
 8029dea:	f009 f8e5 	bl	8032fb8 <HAL_I2S_Init>
 8029dee:	4603      	mov	r3, r0
 8029df0:	2b00      	cmp	r3, #0
 8029df2:	d001      	beq.n	8029df8 <MX_I2S3_Init+0x50>
            {
        Error_Handler();
 8029df4:	f001 fb38 	bl	802b468 <Error_Handler>
    }
    /* USER CODE BEGIN I2S3_Init 2 */

    /* USER CODE END I2S3_Init 2 */

}
 8029df8:	bf00      	nop
 8029dfa:	bd80      	pop	{r7, pc}
 8029dfc:	20008a08 	.word	0x20008a08
 8029e00:	40003c00 	.word	0x40003c00

08029e04 <MX_IWDG_Init>:
 * @brief IWDG Initialization Function
 * @param None
 * @retval None
 */
static void MX_IWDG_Init(void)
{
 8029e04:	b580      	push	{r7, lr}
 8029e06:	af00      	add	r7, sp, #0
    /* USER CODE END IWDG_Init 0 */

    /* USER CODE BEGIN IWDG_Init 1 */

    /* USER CODE END IWDG_Init 1 */
    hiwdg.Instance = IWDG;
 8029e08:	4b09      	ldr	r3, [pc, #36]	; (8029e30 <MX_IWDG_Init+0x2c>)
 8029e0a:	4a0a      	ldr	r2, [pc, #40]	; (8029e34 <MX_IWDG_Init+0x30>)
 8029e0c:	601a      	str	r2, [r3, #0]
    hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8029e0e:	4b08      	ldr	r3, [pc, #32]	; (8029e30 <MX_IWDG_Init+0x2c>)
 8029e10:	2203      	movs	r2, #3
 8029e12:	605a      	str	r2, [r3, #4]
    hiwdg.Init.Reload = 4095;
 8029e14:	4b06      	ldr	r3, [pc, #24]	; (8029e30 <MX_IWDG_Init+0x2c>)
 8029e16:	f640 72ff 	movw	r2, #4095	; 0xfff
 8029e1a:	609a      	str	r2, [r3, #8]
    if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8029e1c:	4804      	ldr	r0, [pc, #16]	; (8029e30 <MX_IWDG_Init+0x2c>)
 8029e1e:	f009 fe99 	bl	8033b54 <HAL_IWDG_Init>
 8029e22:	4603      	mov	r3, r0
 8029e24:	2b00      	cmp	r3, #0
 8029e26:	d001      	beq.n	8029e2c <MX_IWDG_Init+0x28>
            {
        Error_Handler();
 8029e28:	f001 fb1e 	bl	802b468 <Error_Handler>
    }
    /* USER CODE BEGIN IWDG_Init 2 */

    /* USER CODE END IWDG_Init 2 */

}
 8029e2c:	bf00      	nop
 8029e2e:	bd80      	pop	{r7, pc}
 8029e30:	20008618 	.word	0x20008618
 8029e34:	40003000 	.word	0x40003000

08029e38 <MX_RNG_Init>:
 * @brief RNG Initialization Function
 * @param None
 * @retval None
 */
static void MX_RNG_Init(void)
{
 8029e38:	b580      	push	{r7, lr}
 8029e3a:	af00      	add	r7, sp, #0
    /* USER CODE END RNG_Init 0 */

    /* USER CODE BEGIN RNG_Init 1 */

    /* USER CODE END RNG_Init 1 */
    hrng.Instance = RNG;
 8029e3c:	4b06      	ldr	r3, [pc, #24]	; (8029e58 <MX_RNG_Init+0x20>)
 8029e3e:	4a07      	ldr	r2, [pc, #28]	; (8029e5c <MX_RNG_Init+0x24>)
 8029e40:	601a      	str	r2, [r3, #0]
    if (HAL_RNG_Init(&hrng) != HAL_OK)
 8029e42:	4805      	ldr	r0, [pc, #20]	; (8029e58 <MX_RNG_Init+0x20>)
 8029e44:	f00a ffc2 	bl	8034dcc <HAL_RNG_Init>
 8029e48:	4603      	mov	r3, r0
 8029e4a:	2b00      	cmp	r3, #0
 8029e4c:	d001      	beq.n	8029e52 <MX_RNG_Init+0x1a>
            {
        Error_Handler();
 8029e4e:	f001 fb0b 	bl	802b468 <Error_Handler>
    }
    /* USER CODE BEGIN RNG_Init 2 */

    /* USER CODE END RNG_Init 2 */

}
 8029e52:	bf00      	nop
 8029e54:	bd80      	pop	{r7, pc}
 8029e56:	bf00      	nop
 8029e58:	20008878 	.word	0x20008878
 8029e5c:	50060800 	.word	0x50060800

08029e60 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8029e60:	b580      	push	{r7, lr}
 8029e62:	b086      	sub	sp, #24
 8029e64:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN RTC_Init 0 */

    /* USER CODE END RTC_Init 0 */

    RTC_TimeTypeDef sTime = { 0 };
 8029e66:	1d3b      	adds	r3, r7, #4
 8029e68:	2200      	movs	r2, #0
 8029e6a:	601a      	str	r2, [r3, #0]
 8029e6c:	605a      	str	r2, [r3, #4]
 8029e6e:	609a      	str	r2, [r3, #8]
 8029e70:	60da      	str	r2, [r3, #12]
 8029e72:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = { 0 };
 8029e74:	2300      	movs	r3, #0
 8029e76:	603b      	str	r3, [r7, #0]
    /* USER CODE BEGIN RTC_Init 1 */

    /* USER CODE END RTC_Init 1 */
    /** Initialize RTC Only
     */
    hrtc.Instance = RTC;
 8029e78:	4b24      	ldr	r3, [pc, #144]	; (8029f0c <MX_RTC_Init+0xac>)
 8029e7a:	4a25      	ldr	r2, [pc, #148]	; (8029f10 <MX_RTC_Init+0xb0>)
 8029e7c:	601a      	str	r2, [r3, #0]
    hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8029e7e:	4b23      	ldr	r3, [pc, #140]	; (8029f0c <MX_RTC_Init+0xac>)
 8029e80:	2200      	movs	r2, #0
 8029e82:	605a      	str	r2, [r3, #4]
    hrtc.Init.AsynchPrediv = 127;
 8029e84:	4b21      	ldr	r3, [pc, #132]	; (8029f0c <MX_RTC_Init+0xac>)
 8029e86:	227f      	movs	r2, #127	; 0x7f
 8029e88:	609a      	str	r2, [r3, #8]
    hrtc.Init.SynchPrediv = 255;
 8029e8a:	4b20      	ldr	r3, [pc, #128]	; (8029f0c <MX_RTC_Init+0xac>)
 8029e8c:	22ff      	movs	r2, #255	; 0xff
 8029e8e:	60da      	str	r2, [r3, #12]
    hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8029e90:	4b1e      	ldr	r3, [pc, #120]	; (8029f0c <MX_RTC_Init+0xac>)
 8029e92:	2200      	movs	r2, #0
 8029e94:	611a      	str	r2, [r3, #16]
    hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8029e96:	4b1d      	ldr	r3, [pc, #116]	; (8029f0c <MX_RTC_Init+0xac>)
 8029e98:	2200      	movs	r2, #0
 8029e9a:	615a      	str	r2, [r3, #20]
    hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8029e9c:	4b1b      	ldr	r3, [pc, #108]	; (8029f0c <MX_RTC_Init+0xac>)
 8029e9e:	2200      	movs	r2, #0
 8029ea0:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8029ea2:	481a      	ldr	r0, [pc, #104]	; (8029f0c <MX_RTC_Init+0xac>)
 8029ea4:	f00b f80b 	bl	8034ebe <HAL_RTC_Init>
 8029ea8:	4603      	mov	r3, r0
 8029eaa:	2b00      	cmp	r3, #0
 8029eac:	d001      	beq.n	8029eb2 <MX_RTC_Init+0x52>
            {
        Error_Handler();
 8029eae:	f001 fadb 	bl	802b468 <Error_Handler>

    /* USER CODE END Check_RTC_BKUP */

    /** Initialize RTC and set the Time and Date
     */
    sTime.Hours = 0x0;
 8029eb2:	2300      	movs	r3, #0
 8029eb4:	713b      	strb	r3, [r7, #4]
    sTime.Minutes = 0x0;
 8029eb6:	2300      	movs	r3, #0
 8029eb8:	717b      	strb	r3, [r7, #5]
    sTime.Seconds = 0x0;
 8029eba:	2300      	movs	r3, #0
 8029ebc:	71bb      	strb	r3, [r7, #6]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8029ebe:	2300      	movs	r3, #0
 8029ec0:	613b      	str	r3, [r7, #16]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8029ec2:	2300      	movs	r3, #0
 8029ec4:	617b      	str	r3, [r7, #20]
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8029ec6:	1d3b      	adds	r3, r7, #4
 8029ec8:	2201      	movs	r2, #1
 8029eca:	4619      	mov	r1, r3
 8029ecc:	480f      	ldr	r0, [pc, #60]	; (8029f0c <MX_RTC_Init+0xac>)
 8029ece:	f00b f887 	bl	8034fe0 <HAL_RTC_SetTime>
 8029ed2:	4603      	mov	r3, r0
 8029ed4:	2b00      	cmp	r3, #0
 8029ed6:	d001      	beq.n	8029edc <MX_RTC_Init+0x7c>
            {
        Error_Handler();
 8029ed8:	f001 fac6 	bl	802b468 <Error_Handler>
    }
    sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8029edc:	2303      	movs	r3, #3
 8029ede:	703b      	strb	r3, [r7, #0]
    sDate.Month = RTC_MONTH_JANUARY;
 8029ee0:	2301      	movs	r3, #1
 8029ee2:	707b      	strb	r3, [r7, #1]
    sDate.Date = 0x1;
 8029ee4:	2301      	movs	r3, #1
 8029ee6:	70bb      	strb	r3, [r7, #2]
    sDate.Year = 0x20;
 8029ee8:	2320      	movs	r3, #32
 8029eea:	70fb      	strb	r3, [r7, #3]

    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8029eec:	463b      	mov	r3, r7
 8029eee:	2201      	movs	r2, #1
 8029ef0:	4619      	mov	r1, r3
 8029ef2:	4806      	ldr	r0, [pc, #24]	; (8029f0c <MX_RTC_Init+0xac>)
 8029ef4:	f00b f98f 	bl	8035216 <HAL_RTC_SetDate>
 8029ef8:	4603      	mov	r3, r0
 8029efa:	2b00      	cmp	r3, #0
 8029efc:	d001      	beq.n	8029f02 <MX_RTC_Init+0xa2>
            {
        Error_Handler();
 8029efe:	f001 fab3 	bl	802b468 <Error_Handler>
    }
    /* USER CODE BEGIN RTC_Init 2 */

    /* USER CODE END RTC_Init 2 */

}
 8029f02:	bf00      	nop
 8029f04:	3718      	adds	r7, #24
 8029f06:	46bd      	mov	sp, r7
 8029f08:	bd80      	pop	{r7, pc}
 8029f0a:	bf00      	nop
 8029f0c:	20008854 	.word	0x20008854
 8029f10:	40002800 	.word	0x40002800

08029f14 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8029f14:	b580      	push	{r7, lr}
 8029f16:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI1_Init 1 */

    /* USER CODE END SPI1_Init 1 */
    /* SPI1 parameter configuration*/
    hspi1.Instance = SPI1;
 8029f18:	4b17      	ldr	r3, [pc, #92]	; (8029f78 <MX_SPI1_Init+0x64>)
 8029f1a:	4a18      	ldr	r2, [pc, #96]	; (8029f7c <MX_SPI1_Init+0x68>)
 8029f1c:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8029f1e:	4b16      	ldr	r3, [pc, #88]	; (8029f78 <MX_SPI1_Init+0x64>)
 8029f20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8029f24:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8029f26:	4b14      	ldr	r3, [pc, #80]	; (8029f78 <MX_SPI1_Init+0x64>)
 8029f28:	2200      	movs	r2, #0
 8029f2a:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8029f2c:	4b12      	ldr	r3, [pc, #72]	; (8029f78 <MX_SPI1_Init+0x64>)
 8029f2e:	2200      	movs	r2, #0
 8029f30:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8029f32:	4b11      	ldr	r3, [pc, #68]	; (8029f78 <MX_SPI1_Init+0x64>)
 8029f34:	2200      	movs	r2, #0
 8029f36:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8029f38:	4b0f      	ldr	r3, [pc, #60]	; (8029f78 <MX_SPI1_Init+0x64>)
 8029f3a:	2200      	movs	r2, #0
 8029f3c:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8029f3e:	4b0e      	ldr	r3, [pc, #56]	; (8029f78 <MX_SPI1_Init+0x64>)
 8029f40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8029f44:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8029f46:	4b0c      	ldr	r3, [pc, #48]	; (8029f78 <MX_SPI1_Init+0x64>)
 8029f48:	2228      	movs	r2, #40	; 0x28
 8029f4a:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8029f4c:	4b0a      	ldr	r3, [pc, #40]	; (8029f78 <MX_SPI1_Init+0x64>)
 8029f4e:	2200      	movs	r2, #0
 8029f50:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8029f52:	4b09      	ldr	r3, [pc, #36]	; (8029f78 <MX_SPI1_Init+0x64>)
 8029f54:	2200      	movs	r2, #0
 8029f56:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8029f58:	4b07      	ldr	r3, [pc, #28]	; (8029f78 <MX_SPI1_Init+0x64>)
 8029f5a:	2200      	movs	r2, #0
 8029f5c:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 10;
 8029f5e:	4b06      	ldr	r3, [pc, #24]	; (8029f78 <MX_SPI1_Init+0x64>)
 8029f60:	220a      	movs	r2, #10
 8029f62:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8029f64:	4804      	ldr	r0, [pc, #16]	; (8029f78 <MX_SPI1_Init+0x64>)
 8029f66:	f00b fadc 	bl	8035522 <HAL_SPI_Init>
 8029f6a:	4603      	mov	r3, r0
 8029f6c:	2b00      	cmp	r3, #0
 8029f6e:	d001      	beq.n	8029f74 <MX_SPI1_Init+0x60>
            {
        Error_Handler();
 8029f70:	f001 fa7a 	bl	802b468 <Error_Handler>
    }
    /* USER CODE BEGIN SPI1_Init 2 */

    /* USER CODE END SPI1_Init 2 */

}
 8029f74:	bf00      	nop
 8029f76:	bd80      	pop	{r7, pc}
 8029f78:	200088d8 	.word	0x200088d8
 8029f7c:	40013000 	.word	0x40013000

08029f80 <MX_TIM10_Init>:
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void)
{
 8029f80:	b580      	push	{r7, lr}
 8029f82:	b088      	sub	sp, #32
 8029f84:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM10_Init 0 */

    /* USER CODE END TIM10_Init 0 */

    TIM_OC_InitTypeDef sConfigOC = { 0 };
 8029f86:	1d3b      	adds	r3, r7, #4
 8029f88:	2200      	movs	r2, #0
 8029f8a:	601a      	str	r2, [r3, #0]
 8029f8c:	605a      	str	r2, [r3, #4]
 8029f8e:	609a      	str	r2, [r3, #8]
 8029f90:	60da      	str	r2, [r3, #12]
 8029f92:	611a      	str	r2, [r3, #16]
 8029f94:	615a      	str	r2, [r3, #20]
 8029f96:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM10_Init 1 */

    /* USER CODE END TIM10_Init 1 */
    htim10.Instance = TIM10;
 8029f98:	4b1f      	ldr	r3, [pc, #124]	; (802a018 <MX_TIM10_Init+0x98>)
 8029f9a:	4a20      	ldr	r2, [pc, #128]	; (802a01c <MX_TIM10_Init+0x9c>)
 8029f9c:	601a      	str	r2, [r3, #0]
    htim10.Init.Prescaler = 36630 - 1;
 8029f9e:	4b1e      	ldr	r3, [pc, #120]	; (802a018 <MX_TIM10_Init+0x98>)
 8029fa0:	f648 7215 	movw	r2, #36629	; 0x8f15
 8029fa4:	605a      	str	r2, [r3, #4]
    htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8029fa6:	4b1c      	ldr	r3, [pc, #112]	; (802a018 <MX_TIM10_Init+0x98>)
 8029fa8:	2200      	movs	r2, #0
 8029faa:	609a      	str	r2, [r3, #8]
    htim10.Init.Period = 36630 - 1;
 8029fac:	4b1a      	ldr	r3, [pc, #104]	; (802a018 <MX_TIM10_Init+0x98>)
 8029fae:	f648 7215 	movw	r2, #36629	; 0x8f15
 8029fb2:	60da      	str	r2, [r3, #12]
    htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8029fb4:	4b18      	ldr	r3, [pc, #96]	; (802a018 <MX_TIM10_Init+0x98>)
 8029fb6:	2200      	movs	r2, #0
 8029fb8:	611a      	str	r2, [r3, #16]
    htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8029fba:	4b17      	ldr	r3, [pc, #92]	; (802a018 <MX_TIM10_Init+0x98>)
 8029fbc:	2280      	movs	r2, #128	; 0x80
 8029fbe:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8029fc0:	4815      	ldr	r0, [pc, #84]	; (802a018 <MX_TIM10_Init+0x98>)
 8029fc2:	f00b fd61 	bl	8035a88 <HAL_TIM_Base_Init>
 8029fc6:	4603      	mov	r3, r0
 8029fc8:	2b00      	cmp	r3, #0
 8029fca:	d001      	beq.n	8029fd0 <MX_TIM10_Init+0x50>
            {
        Error_Handler();
 8029fcc:	f001 fa4c 	bl	802b468 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8029fd0:	4811      	ldr	r0, [pc, #68]	; (802a018 <MX_TIM10_Init+0x98>)
 8029fd2:	f00b fda8 	bl	8035b26 <HAL_TIM_PWM_Init>
 8029fd6:	4603      	mov	r3, r0
 8029fd8:	2b00      	cmp	r3, #0
 8029fda:	d001      	beq.n	8029fe0 <MX_TIM10_Init+0x60>
            {
        Error_Handler();
 8029fdc:	f001 fa44 	bl	802b468 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8029fe0:	2370      	movs	r3, #112	; 0x70
 8029fe2:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 36630 / 2;
 8029fe4:	f244 738b 	movw	r3, #18315	; 0x478b
 8029fe8:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8029fea:	2300      	movs	r3, #0
 8029fec:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8029fee:	2300      	movs	r3, #0
 8029ff0:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8029ff2:	1d3b      	adds	r3, r7, #4
 8029ff4:	2200      	movs	r2, #0
 8029ff6:	4619      	mov	r1, r3
 8029ff8:	4807      	ldr	r0, [pc, #28]	; (802a018 <MX_TIM10_Init+0x98>)
 8029ffa:	f00b fed1 	bl	8035da0 <HAL_TIM_PWM_ConfigChannel>
 8029ffe:	4603      	mov	r3, r0
 802a000:	2b00      	cmp	r3, #0
 802a002:	d001      	beq.n	802a008 <MX_TIM10_Init+0x88>
            {
        Error_Handler();
 802a004:	f001 fa30 	bl	802b468 <Error_Handler>
    }
    /* USER CODE BEGIN TIM10_Init 2 */

    /* USER CODE END TIM10_Init 2 */
    HAL_TIM_MspPostInit(&htim10);
 802a008:	4803      	ldr	r0, [pc, #12]	; (802a018 <MX_TIM10_Init+0x98>)
 802a00a:	f001 fe0b 	bl	802bc24 <HAL_TIM_MspPostInit>

}
 802a00e:	bf00      	nop
 802a010:	3720      	adds	r7, #32
 802a012:	46bd      	mov	sp, r7
 802a014:	bd80      	pop	{r7, pc}
 802a016:	bf00      	nop
 802a018:	200085d8 	.word	0x200085d8
 802a01c:	40014400 	.word	0x40014400

0802a020 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 802a020:	b580      	push	{r7, lr}
 802a022:	af00      	add	r7, sp, #0
    /* USER CODE END UART4_Init 0 */

    /* USER CODE BEGIN UART4_Init 1 */

    /* USER CODE END UART4_Init 1 */
    huart4.Instance = UART4;
 802a024:	4b11      	ldr	r3, [pc, #68]	; (802a06c <MX_UART4_Init+0x4c>)
 802a026:	4a12      	ldr	r2, [pc, #72]	; (802a070 <MX_UART4_Init+0x50>)
 802a028:	601a      	str	r2, [r3, #0]
    huart4.Init.BaudRate = 57600;
 802a02a:	4b10      	ldr	r3, [pc, #64]	; (802a06c <MX_UART4_Init+0x4c>)
 802a02c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 802a030:	605a      	str	r2, [r3, #4]
    huart4.Init.WordLength = UART_WORDLENGTH_8B;
 802a032:	4b0e      	ldr	r3, [pc, #56]	; (802a06c <MX_UART4_Init+0x4c>)
 802a034:	2200      	movs	r2, #0
 802a036:	609a      	str	r2, [r3, #8]
    huart4.Init.StopBits = UART_STOPBITS_1;
 802a038:	4b0c      	ldr	r3, [pc, #48]	; (802a06c <MX_UART4_Init+0x4c>)
 802a03a:	2200      	movs	r2, #0
 802a03c:	60da      	str	r2, [r3, #12]
    huart4.Init.Parity = UART_PARITY_NONE;
 802a03e:	4b0b      	ldr	r3, [pc, #44]	; (802a06c <MX_UART4_Init+0x4c>)
 802a040:	2200      	movs	r2, #0
 802a042:	611a      	str	r2, [r3, #16]
    huart4.Init.Mode = UART_MODE_TX_RX;
 802a044:	4b09      	ldr	r3, [pc, #36]	; (802a06c <MX_UART4_Init+0x4c>)
 802a046:	220c      	movs	r2, #12
 802a048:	615a      	str	r2, [r3, #20]
    huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802a04a:	4b08      	ldr	r3, [pc, #32]	; (802a06c <MX_UART4_Init+0x4c>)
 802a04c:	2200      	movs	r2, #0
 802a04e:	619a      	str	r2, [r3, #24]
    huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 802a050:	4b06      	ldr	r3, [pc, #24]	; (802a06c <MX_UART4_Init+0x4c>)
 802a052:	2200      	movs	r2, #0
 802a054:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart4) != HAL_OK)
 802a056:	4805      	ldr	r0, [pc, #20]	; (802a06c <MX_UART4_Init+0x4c>)
 802a058:	f00c f9f4 	bl	8036444 <HAL_UART_Init>
 802a05c:	4603      	mov	r3, r0
 802a05e:	2b00      	cmp	r3, #0
 802a060:	d001      	beq.n	802a066 <MX_UART4_Init+0x46>
            {
        Error_Handler();
 802a062:	f001 fa01 	bl	802b468 <Error_Handler>
    }
    /* USER CODE BEGIN UART4_Init 2 */

    /* USER CODE END UART4_Init 2 */

}
 802a066:	bf00      	nop
 802a068:	bd80      	pop	{r7, pc}
 802a06a:	bf00      	nop
 802a06c:	20008898 	.word	0x20008898
 802a070:	40004c00 	.word	0x40004c00

0802a074 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 802a074:	b580      	push	{r7, lr}
 802a076:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 802a078:	4b11      	ldr	r3, [pc, #68]	; (802a0c0 <MX_USART1_UART_Init+0x4c>)
 802a07a:	4a12      	ldr	r2, [pc, #72]	; (802a0c4 <MX_USART1_UART_Init+0x50>)
 802a07c:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 802a07e:	4b10      	ldr	r3, [pc, #64]	; (802a0c0 <MX_USART1_UART_Init+0x4c>)
 802a080:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 802a084:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 802a086:	4b0e      	ldr	r3, [pc, #56]	; (802a0c0 <MX_USART1_UART_Init+0x4c>)
 802a088:	2200      	movs	r2, #0
 802a08a:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 802a08c:	4b0c      	ldr	r3, [pc, #48]	; (802a0c0 <MX_USART1_UART_Init+0x4c>)
 802a08e:	2200      	movs	r2, #0
 802a090:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 802a092:	4b0b      	ldr	r3, [pc, #44]	; (802a0c0 <MX_USART1_UART_Init+0x4c>)
 802a094:	2200      	movs	r2, #0
 802a096:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 802a098:	4b09      	ldr	r3, [pc, #36]	; (802a0c0 <MX_USART1_UART_Init+0x4c>)
 802a09a:	220c      	movs	r2, #12
 802a09c:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802a09e:	4b08      	ldr	r3, [pc, #32]	; (802a0c0 <MX_USART1_UART_Init+0x4c>)
 802a0a0:	2200      	movs	r2, #0
 802a0a2:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 802a0a4:	4b06      	ldr	r3, [pc, #24]	; (802a0c0 <MX_USART1_UART_Init+0x4c>)
 802a0a6:	2200      	movs	r2, #0
 802a0a8:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 802a0aa:	4805      	ldr	r0, [pc, #20]	; (802a0c0 <MX_USART1_UART_Init+0x4c>)
 802a0ac:	f00c f9ca 	bl	8036444 <HAL_UART_Init>
 802a0b0:	4603      	mov	r3, r0
 802a0b2:	2b00      	cmp	r3, #0
 802a0b4:	d001      	beq.n	802a0ba <MX_USART1_UART_Init+0x46>
            {
        Error_Handler();
 802a0b6:	f001 f9d7 	bl	802b468 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */

}
 802a0ba:	bf00      	nop
 802a0bc:	bd80      	pop	{r7, pc}
 802a0be:	bf00      	nop
 802a0c0:	200087ac 	.word	0x200087ac
 802a0c4:	40011000 	.word	0x40011000

0802a0c8 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 802a0c8:	b580      	push	{r7, lr}
 802a0ca:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 802a0cc:	4b11      	ldr	r3, [pc, #68]	; (802a114 <MX_USART2_UART_Init+0x4c>)
 802a0ce:	4a12      	ldr	r2, [pc, #72]	; (802a118 <MX_USART2_UART_Init+0x50>)
 802a0d0:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 9600;
 802a0d2:	4b10      	ldr	r3, [pc, #64]	; (802a114 <MX_USART2_UART_Init+0x4c>)
 802a0d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 802a0d8:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 802a0da:	4b0e      	ldr	r3, [pc, #56]	; (802a114 <MX_USART2_UART_Init+0x4c>)
 802a0dc:	2200      	movs	r2, #0
 802a0de:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 802a0e0:	4b0c      	ldr	r3, [pc, #48]	; (802a114 <MX_USART2_UART_Init+0x4c>)
 802a0e2:	2200      	movs	r2, #0
 802a0e4:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 802a0e6:	4b0b      	ldr	r3, [pc, #44]	; (802a114 <MX_USART2_UART_Init+0x4c>)
 802a0e8:	2200      	movs	r2, #0
 802a0ea:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_RX;
 802a0ec:	4b09      	ldr	r3, [pc, #36]	; (802a114 <MX_USART2_UART_Init+0x4c>)
 802a0ee:	2204      	movs	r2, #4
 802a0f0:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802a0f2:	4b08      	ldr	r3, [pc, #32]	; (802a114 <MX_USART2_UART_Init+0x4c>)
 802a0f4:	2200      	movs	r2, #0
 802a0f6:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 802a0f8:	4b06      	ldr	r3, [pc, #24]	; (802a114 <MX_USART2_UART_Init+0x4c>)
 802a0fa:	2200      	movs	r2, #0
 802a0fc:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 802a0fe:	4805      	ldr	r0, [pc, #20]	; (802a114 <MX_USART2_UART_Init+0x4c>)
 802a100:	f00c f9a0 	bl	8036444 <HAL_UART_Init>
 802a104:	4603      	mov	r3, r0
 802a106:	2b00      	cmp	r3, #0
 802a108:	d001      	beq.n	802a10e <MX_USART2_UART_Init+0x46>
            {
        Error_Handler();
 802a10a:	f001 f9ad 	bl	802b468 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */

}
 802a10e:	bf00      	nop
 802a110:	bd80      	pop	{r7, pc}
 802a112:	bf00      	nop
 802a114:	20008938 	.word	0x20008938
 802a118:	40004400 	.word	0x40004400

0802a11c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 802a11c:	b580      	push	{r7, lr}
 802a11e:	b082      	sub	sp, #8
 802a120:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA2_CLK_ENABLE();
 802a122:	2300      	movs	r3, #0
 802a124:	607b      	str	r3, [r7, #4]
 802a126:	4b23      	ldr	r3, [pc, #140]	; (802a1b4 <MX_DMA_Init+0x98>)
 802a128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a12a:	4a22      	ldr	r2, [pc, #136]	; (802a1b4 <MX_DMA_Init+0x98>)
 802a12c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 802a130:	6313      	str	r3, [r2, #48]	; 0x30
 802a132:	4b20      	ldr	r3, [pc, #128]	; (802a1b4 <MX_DMA_Init+0x98>)
 802a134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802a13a:	607b      	str	r3, [r7, #4]
 802a13c:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_DMA1_CLK_ENABLE();
 802a13e:	2300      	movs	r3, #0
 802a140:	603b      	str	r3, [r7, #0]
 802a142:	4b1c      	ldr	r3, [pc, #112]	; (802a1b4 <MX_DMA_Init+0x98>)
 802a144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a146:	4a1b      	ldr	r2, [pc, #108]	; (802a1b4 <MX_DMA_Init+0x98>)
 802a148:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 802a14c:	6313      	str	r3, [r2, #48]	; 0x30
 802a14e:	4b19      	ldr	r3, [pc, #100]	; (802a1b4 <MX_DMA_Init+0x98>)
 802a150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a152:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 802a156:	603b      	str	r3, [r7, #0]
 802a158:	683b      	ldr	r3, [r7, #0]

    /* DMA interrupt init */
    /* DMA1_Stream2_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 802a15a:	2200      	movs	r2, #0
 802a15c:	2105      	movs	r1, #5
 802a15e:	200d      	movs	r0, #13
 802a160:	f003 fc91 	bl	802da86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 802a164:	200d      	movs	r0, #13
 802a166:	f003 fcaa 	bl	802dabe <HAL_NVIC_EnableIRQ>
    /* DMA1_Stream5_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 802a16a:	2200      	movs	r2, #0
 802a16c:	2105      	movs	r1, #5
 802a16e:	2010      	movs	r0, #16
 802a170:	f003 fc89 	bl	802da86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 802a174:	2010      	movs	r0, #16
 802a176:	f003 fca2 	bl	802dabe <HAL_NVIC_EnableIRQ>
    /* DMA1_Stream7_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 802a17a:	2200      	movs	r2, #0
 802a17c:	2105      	movs	r1, #5
 802a17e:	202f      	movs	r0, #47	; 0x2f
 802a180:	f003 fc81 	bl	802da86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 802a184:	202f      	movs	r0, #47	; 0x2f
 802a186:	f003 fc9a 	bl	802dabe <HAL_NVIC_EnableIRQ>
    /* DMA2_Stream0_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 802a18a:	2200      	movs	r2, #0
 802a18c:	2105      	movs	r1, #5
 802a18e:	2038      	movs	r0, #56	; 0x38
 802a190:	f003 fc79 	bl	802da86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 802a194:	2038      	movs	r0, #56	; 0x38
 802a196:	f003 fc92 	bl	802dabe <HAL_NVIC_EnableIRQ>
    /* DMA2_Stream2_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 802a19a:	2200      	movs	r2, #0
 802a19c:	2105      	movs	r1, #5
 802a19e:	203a      	movs	r0, #58	; 0x3a
 802a1a0:	f003 fc71 	bl	802da86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 802a1a4:	203a      	movs	r0, #58	; 0x3a
 802a1a6:	f003 fc8a 	bl	802dabe <HAL_NVIC_EnableIRQ>

}
 802a1aa:	bf00      	nop
 802a1ac:	3708      	adds	r7, #8
 802a1ae:	46bd      	mov	sp, r7
 802a1b0:	bd80      	pop	{r7, pc}
 802a1b2:	bf00      	nop
 802a1b4:	40023800 	.word	0x40023800

0802a1b8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 802a1b8:	b580      	push	{r7, lr}
 802a1ba:	b08c      	sub	sp, #48	; 0x30
 802a1bc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 802a1be:	f107 031c 	add.w	r3, r7, #28
 802a1c2:	2200      	movs	r2, #0
 802a1c4:	601a      	str	r2, [r3, #0]
 802a1c6:	605a      	str	r2, [r3, #4]
 802a1c8:	609a      	str	r2, [r3, #8]
 802a1ca:	60da      	str	r2, [r3, #12]
 802a1cc:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 802a1ce:	2300      	movs	r3, #0
 802a1d0:	61bb      	str	r3, [r7, #24]
 802a1d2:	4bb6      	ldr	r3, [pc, #728]	; (802a4ac <MX_GPIO_Init+0x2f4>)
 802a1d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a1d6:	4ab5      	ldr	r2, [pc, #724]	; (802a4ac <MX_GPIO_Init+0x2f4>)
 802a1d8:	f043 0310 	orr.w	r3, r3, #16
 802a1dc:	6313      	str	r3, [r2, #48]	; 0x30
 802a1de:	4bb3      	ldr	r3, [pc, #716]	; (802a4ac <MX_GPIO_Init+0x2f4>)
 802a1e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a1e2:	f003 0310 	and.w	r3, r3, #16
 802a1e6:	61bb      	str	r3, [r7, #24]
 802a1e8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 802a1ea:	2300      	movs	r3, #0
 802a1ec:	617b      	str	r3, [r7, #20]
 802a1ee:	4baf      	ldr	r3, [pc, #700]	; (802a4ac <MX_GPIO_Init+0x2f4>)
 802a1f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a1f2:	4aae      	ldr	r2, [pc, #696]	; (802a4ac <MX_GPIO_Init+0x2f4>)
 802a1f4:	f043 0304 	orr.w	r3, r3, #4
 802a1f8:	6313      	str	r3, [r2, #48]	; 0x30
 802a1fa:	4bac      	ldr	r3, [pc, #688]	; (802a4ac <MX_GPIO_Init+0x2f4>)
 802a1fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a1fe:	f003 0304 	and.w	r3, r3, #4
 802a202:	617b      	str	r3, [r7, #20]
 802a204:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 802a206:	2300      	movs	r3, #0
 802a208:	613b      	str	r3, [r7, #16]
 802a20a:	4ba8      	ldr	r3, [pc, #672]	; (802a4ac <MX_GPIO_Init+0x2f4>)
 802a20c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a20e:	4aa7      	ldr	r2, [pc, #668]	; (802a4ac <MX_GPIO_Init+0x2f4>)
 802a210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802a214:	6313      	str	r3, [r2, #48]	; 0x30
 802a216:	4ba5      	ldr	r3, [pc, #660]	; (802a4ac <MX_GPIO_Init+0x2f4>)
 802a218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a21a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802a21e:	613b      	str	r3, [r7, #16]
 802a220:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802a222:	2300      	movs	r3, #0
 802a224:	60fb      	str	r3, [r7, #12]
 802a226:	4ba1      	ldr	r3, [pc, #644]	; (802a4ac <MX_GPIO_Init+0x2f4>)
 802a228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a22a:	4aa0      	ldr	r2, [pc, #640]	; (802a4ac <MX_GPIO_Init+0x2f4>)
 802a22c:	f043 0301 	orr.w	r3, r3, #1
 802a230:	6313      	str	r3, [r2, #48]	; 0x30
 802a232:	4b9e      	ldr	r3, [pc, #632]	; (802a4ac <MX_GPIO_Init+0x2f4>)
 802a234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a236:	f003 0301 	and.w	r3, r3, #1
 802a23a:	60fb      	str	r3, [r7, #12]
 802a23c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 802a23e:	2300      	movs	r3, #0
 802a240:	60bb      	str	r3, [r7, #8]
 802a242:	4b9a      	ldr	r3, [pc, #616]	; (802a4ac <MX_GPIO_Init+0x2f4>)
 802a244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a246:	4a99      	ldr	r2, [pc, #612]	; (802a4ac <MX_GPIO_Init+0x2f4>)
 802a248:	f043 0302 	orr.w	r3, r3, #2
 802a24c:	6313      	str	r3, [r2, #48]	; 0x30
 802a24e:	4b97      	ldr	r3, [pc, #604]	; (802a4ac <MX_GPIO_Init+0x2f4>)
 802a250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a252:	f003 0302 	and.w	r3, r3, #2
 802a256:	60bb      	str	r3, [r7, #8]
 802a258:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 802a25a:	2300      	movs	r3, #0
 802a25c:	607b      	str	r3, [r7, #4]
 802a25e:	4b93      	ldr	r3, [pc, #588]	; (802a4ac <MX_GPIO_Init+0x2f4>)
 802a260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a262:	4a92      	ldr	r2, [pc, #584]	; (802a4ac <MX_GPIO_Init+0x2f4>)
 802a264:	f043 0308 	orr.w	r3, r3, #8
 802a268:	6313      	str	r3, [r2, #48]	; 0x30
 802a26a:	4b90      	ldr	r3, [pc, #576]	; (802a4ac <MX_GPIO_Init+0x2f4>)
 802a26c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a26e:	f003 0308 	and.w	r3, r3, #8
 802a272:	607b      	str	r3, [r7, #4]
 802a274:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, INT_KEYLESS_CE_Pin | INT_NET_PWR_Pin | INT_GPS_PWR_Pin | EXT_FINGER_SENSING_PWR_Pin
 802a276:	2200      	movs	r2, #0
 802a278:	f642 115b 	movw	r1, #10587	; 0x295b
 802a27c:	488c      	ldr	r0, [pc, #560]	; (802a4b0 <MX_GPIO_Init+0x2f8>)
 802a27e:	f005 ff67 	bl	8030150 <HAL_GPIO_WritePin>
            | EXT_HMI1_PWR_Pin | INT_GPS_SLEEP_Pin | EXT_HORN_PWR_Pin | INT_AUDIO_PWR_Pin, GPIO_PIN_RESET);

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, EXT_FINGER_MCU_PWR_Pin | EXT_HMI2_PWR_Pin, GPIO_PIN_SET);
 802a282:	2201      	movs	r2, #1
 802a284:	2124      	movs	r1, #36	; 0x24
 802a286:	488a      	ldr	r0, [pc, #552]	; (802a4b0 <MX_GPIO_Init+0x2f8>)
 802a288:	f005 ff62 	bl	8030150 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, EXT_SOLENOID_PWR_Pin | INT_NET_RST_Pin | INT_NET_DTR_Pin | INT_GYRO_PWR_Pin
 802a28c:	2200      	movs	r2, #0
 802a28e:	f24c 0131 	movw	r1, #49201	; 0xc031
 802a292:	4888      	ldr	r0, [pc, #544]	; (802a4b4 <MX_GPIO_Init+0x2fc>)
 802a294:	f005 ff5c 	bl	8030150 <HAL_GPIO_WritePin>
            | INT_KEYLESS_PWR_Pin, GPIO_PIN_RESET);

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOD, EXT_GPIO_OUT1_Pin | SYS_LED_Pin | INT_CAN_PWR_Pin | INT_AUDIO_RST_Pin, GPIO_PIN_RESET);
 802a298:	2200      	movs	r2, #0
 802a29a:	f242 1118 	movw	r1, #8472	; 0x2118
 802a29e:	4886      	ldr	r0, [pc, #536]	; (802a4b8 <MX_GPIO_Init+0x300>)
 802a2a0:	f005 ff56 	bl	8030150 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(INT_KEYLESS_CSN_GPIO_Port, INT_KEYLESS_CSN_Pin, GPIO_PIN_SET);
 802a2a4:	2201      	movs	r2, #1
 802a2a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802a2aa:	4884      	ldr	r0, [pc, #528]	; (802a4bc <MX_GPIO_Init+0x304>)
 802a2ac:	f005 ff50 	bl	8030150 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOD, EXT_BMS_WAKEUP_Pin | EXT_BMS_FAN_PWR_Pin, GPIO_PIN_SET);
 802a2b0:	2201      	movs	r2, #1
 802a2b2:	2160      	movs	r1, #96	; 0x60
 802a2b4:	4880      	ldr	r0, [pc, #512]	; (802a4b8 <MX_GPIO_Init+0x300>)
 802a2b6:	f005 ff4b 	bl	8030150 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : EXT_HBAR_SELECT_Pin EXT_HBAR_SET_Pin EXT_HBAR_REVERSE_Pin EXT_ABS_IRQ_Pin
     EXT_KNOB_IRQ_Pin EXT_HBAR_LAMP_Pin EXT_REG_5V_IRQ_Pin EXT_HBAR_SEIN_L_Pin
     EXT_HBAR_SEIN_R_Pin */
    GPIO_InitStruct.Pin = EXT_HBAR_SELECT_Pin | EXT_HBAR_SET_Pin | EXT_HBAR_REVERSE_Pin | EXT_ABS_IRQ_Pin
 802a2ba:	f246 136f 	movw	r3, #24943	; 0x616f
 802a2be:	61fb      	str	r3, [r7, #28]
            | EXT_KNOB_IRQ_Pin | EXT_HBAR_LAMP_Pin | EXT_REG_5V_IRQ_Pin | EXT_HBAR_SEIN_L_Pin
            | EXT_HBAR_SEIN_R_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 802a2c0:	4b7f      	ldr	r3, [pc, #508]	; (802a4c0 <MX_GPIO_Init+0x308>)
 802a2c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 802a2c4:	2302      	movs	r3, #2
 802a2c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802a2c8:	f107 031c 	add.w	r3, r7, #28
 802a2cc:	4619      	mov	r1, r3
 802a2ce:	487d      	ldr	r0, [pc, #500]	; (802a4c4 <MX_GPIO_Init+0x30c>)
 802a2d0:	f005 fca2 	bl	802fc18 <HAL_GPIO_Init>

    /*Configure GPIO pins : PE4 PE10 PE12 */
    GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_10 | GPIO_PIN_12;
 802a2d4:	f241 4310 	movw	r3, #5136	; 0x1410
 802a2d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 802a2da:	2303      	movs	r3, #3
 802a2dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802a2de:	2300      	movs	r3, #0
 802a2e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802a2e2:	f107 031c 	add.w	r3, r7, #28
 802a2e6:	4619      	mov	r1, r3
 802a2e8:	4876      	ldr	r0, [pc, #472]	; (802a4c4 <MX_GPIO_Init+0x30c>)
 802a2ea:	f005 fc95 	bl	802fc18 <HAL_GPIO_Init>

    /*Configure GPIO pins : INT_KEYLESS_CE_Pin INT_NET_PWR_Pin INT_GPS_PWR_Pin EXT_FINGER_SENSING_PWR_Pin
     EXT_HMI1_PWR_Pin INT_AUDIO_PWR_Pin */
    GPIO_InitStruct.Pin = INT_KEYLESS_CE_Pin | INT_NET_PWR_Pin | INT_GPS_PWR_Pin | EXT_FINGER_SENSING_PWR_Pin
 802a2ee:	f642 031b 	movw	r3, #10267	; 0x281b
 802a2f2:	61fb      	str	r3, [r7, #28]
            | EXT_HMI1_PWR_Pin | INT_AUDIO_PWR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802a2f4:	2301      	movs	r3, #1
 802a2f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 802a2f8:	2302      	movs	r3, #2
 802a2fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802a2fc:	2300      	movs	r3, #0
 802a2fe:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802a300:	f107 031c 	add.w	r3, r7, #28
 802a304:	4619      	mov	r1, r3
 802a306:	486a      	ldr	r0, [pc, #424]	; (802a4b0 <MX_GPIO_Init+0x2f8>)
 802a308:	f005 fc86 	bl	802fc18 <HAL_GPIO_Init>

    /*Configure GPIO pins : EXT_FINGER_MCU_PWR_Pin EXT_HMI2_PWR_Pin */
    GPIO_InitStruct.Pin = EXT_FINGER_MCU_PWR_Pin | EXT_HMI2_PWR_Pin;
 802a30c:	2324      	movs	r3, #36	; 0x24
 802a30e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802a310:	2301      	movs	r3, #1
 802a312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 802a314:	2301      	movs	r3, #1
 802a316:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802a318:	2300      	movs	r3, #0
 802a31a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802a31c:	f107 031c 	add.w	r3, r7, #28
 802a320:	4619      	mov	r1, r3
 802a322:	4863      	ldr	r0, [pc, #396]	; (802a4b0 <MX_GPIO_Init+0x2f8>)
 802a324:	f005 fc78 	bl	802fc18 <HAL_GPIO_Init>

    /*Configure GPIO pin : EXT_SOLENOID_PWR_Pin */
    GPIO_InitStruct.Pin = EXT_SOLENOID_PWR_Pin;
 802a328:	2301      	movs	r3, #1
 802a32a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802a32c:	2301      	movs	r3, #1
 802a32e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802a330:	2300      	movs	r3, #0
 802a332:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802a334:	2300      	movs	r3, #0
 802a336:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(EXT_SOLENOID_PWR_GPIO_Port, &GPIO_InitStruct);
 802a338:	f107 031c 	add.w	r3, r7, #28
 802a33c:	4619      	mov	r1, r3
 802a33e:	485d      	ldr	r0, [pc, #372]	; (802a4b4 <MX_GPIO_Init+0x2fc>)
 802a340:	f005 fc6a 	bl	802fc18 <HAL_GPIO_Init>

    /*Configure GPIO pin : BOOT1_Pin */
    GPIO_InitStruct.Pin = BOOT1_Pin;
 802a344:	2304      	movs	r3, #4
 802a346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 802a348:	2300      	movs	r3, #0
 802a34a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802a34c:	2300      	movs	r3, #0
 802a34e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 802a350:	f107 031c 	add.w	r3, r7, #28
 802a354:	4619      	mov	r1, r3
 802a356:	4857      	ldr	r0, [pc, #348]	; (802a4b4 <MX_GPIO_Init+0x2fc>)
 802a358:	f005 fc5e 	bl	802fc18 <HAL_GPIO_Init>

    /*Configure GPIO pins : EXT_FINGER_IRQ_Pin EXT_STARTER_IRQ_Pin */
    GPIO_InitStruct.Pin = EXT_FINGER_IRQ_Pin | EXT_STARTER_IRQ_Pin;
 802a35c:	f44f 7320 	mov.w	r3, #640	; 0x280
 802a360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 802a362:	4b59      	ldr	r3, [pc, #356]	; (802a4c8 <MX_GPIO_Init+0x310>)
 802a364:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 802a366:	2302      	movs	r3, #2
 802a368:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802a36a:	f107 031c 	add.w	r3, r7, #28
 802a36e:	4619      	mov	r1, r3
 802a370:	4854      	ldr	r0, [pc, #336]	; (802a4c4 <MX_GPIO_Init+0x30c>)
 802a372:	f005 fc51 	bl	802fc18 <HAL_GPIO_Init>

    /*Configure GPIO pin : INT_GYRO_IRQ_Pin */
    GPIO_InitStruct.Pin = INT_GYRO_IRQ_Pin;
 802a376:	f44f 6300 	mov.w	r3, #2048	; 0x800
 802a37a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 802a37c:	4b52      	ldr	r3, [pc, #328]	; (802a4c8 <MX_GPIO_Init+0x310>)
 802a37e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802a380:	2300      	movs	r3, #0
 802a382:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(INT_GYRO_IRQ_GPIO_Port, &GPIO_InitStruct);
 802a384:	f107 031c 	add.w	r3, r7, #28
 802a388:	4619      	mov	r1, r3
 802a38a:	484e      	ldr	r0, [pc, #312]	; (802a4c4 <MX_GPIO_Init+0x30c>)
 802a38c:	f005 fc44 	bl	802fc18 <HAL_GPIO_Init>

    /*Configure GPIO pin : INT_KEYLESS_IRQ_Pin */
    GPIO_InitStruct.Pin = INT_KEYLESS_IRQ_Pin;
 802a390:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802a394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 802a396:	4b4d      	ldr	r3, [pc, #308]	; (802a4cc <MX_GPIO_Init+0x314>)
 802a398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 802a39a:	2301      	movs	r3, #1
 802a39c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(INT_KEYLESS_IRQ_GPIO_Port, &GPIO_InitStruct);
 802a39e:	f107 031c 	add.w	r3, r7, #28
 802a3a2:	4619      	mov	r1, r3
 802a3a4:	4847      	ldr	r0, [pc, #284]	; (802a4c4 <MX_GPIO_Init+0x30c>)
 802a3a6:	f005 fc37 	bl	802fc18 <HAL_GPIO_Init>

    /*Configure GPIO pins : PB12 PB13 */
    GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 802a3aa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 802a3ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 802a3b0:	2303      	movs	r3, #3
 802a3b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802a3b4:	2300      	movs	r3, #0
 802a3b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802a3b8:	f107 031c 	add.w	r3, r7, #28
 802a3bc:	4619      	mov	r1, r3
 802a3be:	483d      	ldr	r0, [pc, #244]	; (802a4b4 <MX_GPIO_Init+0x2fc>)
 802a3c0:	f005 fc2a 	bl	802fc18 <HAL_GPIO_Init>

    /*Configure GPIO pins : INT_NET_RST_Pin INT_NET_DTR_Pin INT_GYRO_PWR_Pin INT_KEYLESS_PWR_Pin */
    GPIO_InitStruct.Pin = INT_NET_RST_Pin | INT_NET_DTR_Pin | INT_GYRO_PWR_Pin | INT_KEYLESS_PWR_Pin;
 802a3c4:	f24c 0330 	movw	r3, #49200	; 0xc030
 802a3c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802a3ca:	2301      	movs	r3, #1
 802a3cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 802a3ce:	2302      	movs	r3, #2
 802a3d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802a3d2:	2300      	movs	r3, #0
 802a3d4:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802a3d6:	f107 031c 	add.w	r3, r7, #28
 802a3da:	4619      	mov	r1, r3
 802a3dc:	4835      	ldr	r0, [pc, #212]	; (802a4b4 <MX_GPIO_Init+0x2fc>)
 802a3de:	f005 fc1b 	bl	802fc18 <HAL_GPIO_Init>

    /*Configure GPIO pins : EXT_GPIO_OUT1_Pin SYS_LED_Pin INT_AUDIO_RST_Pin */
    GPIO_InitStruct.Pin = EXT_GPIO_OUT1_Pin | SYS_LED_Pin | INT_AUDIO_RST_Pin;
 802a3e2:	f242 1310 	movw	r3, #8464	; 0x2110
 802a3e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802a3e8:	2301      	movs	r3, #1
 802a3ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 802a3ec:	2302      	movs	r3, #2
 802a3ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802a3f0:	2300      	movs	r3, #0
 802a3f2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 802a3f4:	f107 031c 	add.w	r3, r7, #28
 802a3f8:	4619      	mov	r1, r3
 802a3fa:	482f      	ldr	r0, [pc, #188]	; (802a4b8 <MX_GPIO_Init+0x300>)
 802a3fc:	f005 fc0c 	bl	802fc18 <HAL_GPIO_Init>

    /*Configure GPIO pins : PD9 PD10 PD11 PD12
     PD14 PD15 PD2 PD7 */
    GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12
 802a400:	f64d 6384 	movw	r3, #56964	; 0xde84
 802a404:	61fb      	str	r3, [r7, #28]
            | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_2 | GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 802a406:	2303      	movs	r3, #3
 802a408:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802a40a:	2300      	movs	r3, #0
 802a40c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 802a40e:	f107 031c 	add.w	r3, r7, #28
 802a412:	4619      	mov	r1, r3
 802a414:	4828      	ldr	r0, [pc, #160]	; (802a4b8 <MX_GPIO_Init+0x300>)
 802a416:	f005 fbff 	bl	802fc18 <HAL_GPIO_Init>

    /*Configure GPIO pins : INT_GPS_SLEEP_Pin EXT_HORN_PWR_Pin */
    GPIO_InitStruct.Pin = INT_GPS_SLEEP_Pin | EXT_HORN_PWR_Pin;
 802a41a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 802a41e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802a420:	2301      	movs	r3, #1
 802a422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802a424:	2300      	movs	r3, #0
 802a426:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802a428:	2300      	movs	r3, #0
 802a42a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802a42c:	f107 031c 	add.w	r3, r7, #28
 802a430:	4619      	mov	r1, r3
 802a432:	481f      	ldr	r0, [pc, #124]	; (802a4b0 <MX_GPIO_Init+0x2f8>)
 802a434:	f005 fbf0 	bl	802fc18 <HAL_GPIO_Init>

    /*Configure GPIO pins : PA11 PA12 */
    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 802a438:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 802a43c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 802a43e:	2303      	movs	r3, #3
 802a440:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802a442:	2300      	movs	r3, #0
 802a444:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802a446:	f107 031c 	add.w	r3, r7, #28
 802a44a:	4619      	mov	r1, r3
 802a44c:	481b      	ldr	r0, [pc, #108]	; (802a4bc <MX_GPIO_Init+0x304>)
 802a44e:	f005 fbe3 	bl	802fc18 <HAL_GPIO_Init>

    /*Configure GPIO pin : INT_KEYLESS_CSN_Pin */
    GPIO_InitStruct.Pin = INT_KEYLESS_CSN_Pin;
 802a452:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802a456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802a458:	2301      	movs	r3, #1
 802a45a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 802a45c:	2301      	movs	r3, #1
 802a45e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802a460:	2303      	movs	r3, #3
 802a462:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(INT_KEYLESS_CSN_GPIO_Port, &GPIO_InitStruct);
 802a464:	f107 031c 	add.w	r3, r7, #28
 802a468:	4619      	mov	r1, r3
 802a46a:	4814      	ldr	r0, [pc, #80]	; (802a4bc <MX_GPIO_Init+0x304>)
 802a46c:	f005 fbd4 	bl	802fc18 <HAL_GPIO_Init>

    /*Configure GPIO pin : INT_CAN_PWR_Pin */
    GPIO_InitStruct.Pin = INT_CAN_PWR_Pin;
 802a470:	2308      	movs	r3, #8
 802a472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802a474:	2301      	movs	r3, #1
 802a476:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802a478:	2300      	movs	r3, #0
 802a47a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802a47c:	2300      	movs	r3, #0
 802a47e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(INT_CAN_PWR_GPIO_Port, &GPIO_InitStruct);
 802a480:	f107 031c 	add.w	r3, r7, #28
 802a484:	4619      	mov	r1, r3
 802a486:	480c      	ldr	r0, [pc, #48]	; (802a4b8 <MX_GPIO_Init+0x300>)
 802a488:	f005 fbc6 	bl	802fc18 <HAL_GPIO_Init>

    /*Configure GPIO pins : EXT_BMS_WAKEUP_Pin EXT_BMS_FAN_PWR_Pin */
    GPIO_InitStruct.Pin = EXT_BMS_WAKEUP_Pin | EXT_BMS_FAN_PWR_Pin;
 802a48c:	2360      	movs	r3, #96	; 0x60
 802a48e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802a490:	2301      	movs	r3, #1
 802a492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 802a494:	2301      	movs	r3, #1
 802a496:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802a498:	2300      	movs	r3, #0
 802a49a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 802a49c:	f107 031c 	add.w	r3, r7, #28
 802a4a0:	4619      	mov	r1, r3
 802a4a2:	4805      	ldr	r0, [pc, #20]	; (802a4b8 <MX_GPIO_Init+0x300>)
 802a4a4:	f005 fbb8 	bl	802fc18 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 802a4a8:	2200      	movs	r2, #0
 802a4aa:	e011      	b.n	802a4d0 <MX_GPIO_Init+0x318>
 802a4ac:	40023800 	.word	0x40023800
 802a4b0:	40020800 	.word	0x40020800
 802a4b4:	40020400 	.word	0x40020400
 802a4b8:	40020c00 	.word	0x40020c00
 802a4bc:	40020000 	.word	0x40020000
 802a4c0:	10310000 	.word	0x10310000
 802a4c4:	40021000 	.word	0x40021000
 802a4c8:	10110000 	.word	0x10110000
 802a4cc:	10210000 	.word	0x10210000
 802a4d0:	2105      	movs	r1, #5
 802a4d2:	2006      	movs	r0, #6
 802a4d4:	f003 fad7 	bl	802da86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 802a4d8:	2006      	movs	r0, #6
 802a4da:	f003 faf0 	bl	802dabe <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 802a4de:	2200      	movs	r2, #0
 802a4e0:	2105      	movs	r1, #5
 802a4e2:	2007      	movs	r0, #7
 802a4e4:	f003 facf 	bl	802da86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 802a4e8:	2007      	movs	r0, #7
 802a4ea:	f003 fae8 	bl	802dabe <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 802a4ee:	2200      	movs	r2, #0
 802a4f0:	2105      	movs	r1, #5
 802a4f2:	2008      	movs	r0, #8
 802a4f4:	f003 fac7 	bl	802da86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 802a4f8:	2008      	movs	r0, #8
 802a4fa:	f003 fae0 	bl	802dabe <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 802a4fe:	2200      	movs	r2, #0
 802a500:	2105      	movs	r1, #5
 802a502:	2009      	movs	r0, #9
 802a504:	f003 fabf 	bl	802da86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 802a508:	2009      	movs	r0, #9
 802a50a:	f003 fad8 	bl	802dabe <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 802a50e:	2200      	movs	r2, #0
 802a510:	2105      	movs	r1, #5
 802a512:	2017      	movs	r0, #23
 802a514:	f003 fab7 	bl	802da86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 802a518:	2017      	movs	r0, #23
 802a51a:	f003 fad0 	bl	802dabe <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 802a51e:	2200      	movs	r2, #0
 802a520:	2105      	movs	r1, #5
 802a522:	2028      	movs	r0, #40	; 0x28
 802a524:	f003 faaf 	bl	802da86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 802a528:	2028      	movs	r0, #40	; 0x28
 802a52a:	f003 fac8 	bl	802dabe <HAL_NVIC_EnableIRQ>

}
 802a52e:	bf00      	nop
 802a530:	3730      	adds	r7, #48	; 0x30
 802a532:	46bd      	mov	sp, r7
 802a534:	bd80      	pop	{r7, pc}
 802a536:	bf00      	nop

0802a538 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 802a538:	b580      	push	{r7, lr}
 802a53a:	b084      	sub	sp, #16
 802a53c:	af00      	add	r7, sp, #0
 802a53e:	4603      	mov	r3, r0
 802a540:	80fb      	strh	r3, [r7, #6]
    if (osKernelGetState() == osKernelRunning) {
 802a542:	f00c ffef 	bl	8037524 <osKernelGetState>
 802a546:	4603      	mov	r3, r0
 802a548:	2b02      	cmp	r3, #2
 802a54a:	d146      	bne.n	802a5da <HAL_GPIO_EXTI_Callback+0xa2>
        // handle BMS_IRQ (is 5v exist?)
        if (GPIO_Pin == EXT_REG_5V_IRQ_Pin) {
 802a54c:	88fb      	ldrh	r3, [r7, #6]
 802a54e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802a552:	d105      	bne.n	802a560 <HAL_GPIO_EXTI_Callback+0x28>
            osThreadFlagsSet(SwitchTaskHandle, EVT_SWITCH_REG_5V_IRQ);
 802a554:	4b23      	ldr	r3, [pc, #140]	; (802a5e4 <HAL_GPIO_EXTI_Callback+0xac>)
 802a556:	681b      	ldr	r3, [r3, #0]
 802a558:	2102      	movs	r1, #2
 802a55a:	4618      	mov	r0, r3
 802a55c:	f00d f908 	bl	8037770 <osThreadFlagsSet>
        }
        // handle Starter Button
        if (GPIO_Pin == EXT_STARTER_IRQ_Pin) {
 802a560:	88fb      	ldrh	r3, [r7, #6]
 802a562:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802a566:	d105      	bne.n	802a574 <HAL_GPIO_EXTI_Callback+0x3c>
            osThreadFlagsSet(SwitchTaskHandle, EVT_SWITCH_STARTER_IRQ);
 802a568:	4b1e      	ldr	r3, [pc, #120]	; (802a5e4 <HAL_GPIO_EXTI_Callback+0xac>)
 802a56a:	681b      	ldr	r3, [r3, #0]
 802a56c:	2104      	movs	r1, #4
 802a56e:	4618      	mov	r0, r3
 802a570:	f00d f8fe 	bl	8037770 <osThreadFlagsSet>
        }
        // handle KNOB IRQ (Power control for HMI1 & HMI2)
        if (GPIO_Pin == EXT_KNOB_IRQ_Pin) {
 802a574:	88fb      	ldrh	r3, [r7, #6]
 802a576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802a57a:	d105      	bne.n	802a588 <HAL_GPIO_EXTI_Callback+0x50>
            osThreadFlagsSet(SwitchTaskHandle, EVT_SWITCH_KNOB_IRQ);
 802a57c:	4b19      	ldr	r3, [pc, #100]	; (802a5e4 <HAL_GPIO_EXTI_Callback+0xac>)
 802a57e:	681b      	ldr	r3, [r3, #0]
 802a580:	2104      	movs	r1, #4
 802a582:	4618      	mov	r0, r3
 802a584:	f00d f8f4 	bl	8037770 <osThreadFlagsSet>
        }
        // handle Finger IRQ
        if (GPIO_Pin == EXT_FINGER_IRQ_Pin) {
 802a588:	88fb      	ldrh	r3, [r7, #6]
 802a58a:	2b80      	cmp	r3, #128	; 0x80
 802a58c:	d105      	bne.n	802a59a <HAL_GPIO_EXTI_Callback+0x62>
            osThreadFlagsSet(FingerTaskHandle, EVT_FINGER_PLACED);
 802a58e:	4b16      	ldr	r3, [pc, #88]	; (802a5e8 <HAL_GPIO_EXTI_Callback+0xb0>)
 802a590:	681b      	ldr	r3, [r3, #0]
 802a592:	2101      	movs	r1, #1
 802a594:	4618      	mov	r0, r3
 802a596:	f00d f8eb 	bl	8037770 <osThreadFlagsSet>
        }
        // handle NRF24 IRQ
        if (GPIO_Pin == INT_KEYLESS_IRQ_Pin) {
 802a59a:	88fb      	ldrh	r3, [r7, #6]
 802a59c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802a5a0:	d101      	bne.n	802a5a6 <HAL_GPIO_EXTI_Callback+0x6e>
            KLESS_IrqHandler();
 802a5a2:	f7fd fde7 	bl	8028174 <KLESS_IrqHandler>
        }
        // handle Switches EXTI
        for (uint8_t i = 0; i < SW_TOTAL_LIST; i++) {
 802a5a6:	2300      	movs	r3, #0
 802a5a8:	73fb      	strb	r3, [r7, #15]
 802a5aa:	e013      	b.n	802a5d4 <HAL_GPIO_EXTI_Callback+0x9c>
            if (GPIO_Pin == SW.list[i].pin) {
 802a5ac:	7bfb      	ldrb	r3, [r7, #15]
 802a5ae:	4a0f      	ldr	r2, [pc, #60]	; (802a5ec <HAL_GPIO_EXTI_Callback+0xb4>)
 802a5b0:	015b      	lsls	r3, r3, #5
 802a5b2:	4413      	add	r3, r2
 802a5b4:	3314      	adds	r3, #20
 802a5b6:	881b      	ldrh	r3, [r3, #0]
 802a5b8:	88fa      	ldrh	r2, [r7, #6]
 802a5ba:	429a      	cmp	r2, r3
 802a5bc:	d107      	bne.n	802a5ce <HAL_GPIO_EXTI_Callback+0x96>
                osThreadFlagsSet(SwitchTaskHandle, EVT_SWITCH_TRIGGERED);
 802a5be:	4b09      	ldr	r3, [pc, #36]	; (802a5e4 <HAL_GPIO_EXTI_Callback+0xac>)
 802a5c0:	681b      	ldr	r3, [r3, #0]
 802a5c2:	2101      	movs	r1, #1
 802a5c4:	4618      	mov	r0, r3
 802a5c6:	f00d f8d3 	bl	8037770 <osThreadFlagsSet>

                break;
 802a5ca:	bf00      	nop
            }
        }
    }
}
 802a5cc:	e005      	b.n	802a5da <HAL_GPIO_EXTI_Callback+0xa2>
        for (uint8_t i = 0; i < SW_TOTAL_LIST; i++) {
 802a5ce:	7bfb      	ldrb	r3, [r7, #15]
 802a5d0:	3301      	adds	r3, #1
 802a5d2:	73fb      	strb	r3, [r7, #15]
 802a5d4:	7bfb      	ldrb	r3, [r7, #15]
 802a5d6:	2b06      	cmp	r3, #6
 802a5d8:	d9e8      	bls.n	802a5ac <HAL_GPIO_EXTI_Callback+0x74>
}
 802a5da:	bf00      	nop
 802a5dc:	3710      	adds	r7, #16
 802a5de:	46bd      	mov	sp, r7
 802a5e0:	bd80      	pop	{r7, pc}
 802a5e2:	bf00      	nop
 802a5e4:	20008930 	.word	0x20008930
 802a5e8:	20008694 	.word	0x20008694
 802a5ec:	20000004 	.word	0x20000004

0802a5f0 <StartManagerTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartManagerTask */
void StartManagerTask(void *argument)
{
 802a5f0:	b5b0      	push	{r4, r5, r7, lr}
 802a5f2:	b088      	sub	sp, #32
 802a5f4:	af04      	add	r7, sp, #16
 802a5f6:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN 5 */
    TickType_t lastWake;

    // Initialization, this task get executed first!
    VCU.Init();
 802a5f8:	4b1d      	ldr	r3, [pc, #116]	; (802a670 <StartManagerTask+0x80>)
 802a5fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802a5fc:	4798      	blx	r3
    BMS.Init();
 802a5fe:	4b1d      	ldr	r3, [pc, #116]	; (802a674 <StartManagerTask+0x84>)
 802a600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802a602:	4798      	blx	r3
    HMI1.Init();
 802a604:	4b1c      	ldr	r3, [pc, #112]	; (802a678 <StartManagerTask+0x88>)
 802a606:	6a1b      	ldr	r3, [r3, #32]
 802a608:	4798      	blx	r3
    HMI2.Init();
 802a60a:	4b1c      	ldr	r3, [pc, #112]	; (802a67c <StartManagerTask+0x8c>)
 802a60c:	68db      	ldr	r3, [r3, #12]
 802a60e:	4798      	blx	r3

    // Initialize EEPROM
    EEPROM_Init();
 802a610:	f013 ff34 	bl	803e47c <EEPROM_Init>
    //    osThreadSuspend(CanRxTaskHandle);
    //    osThreadSuspend(CanTxTaskHandle);
    //    osThreadSuspend(Hmi2PowerTaskHandle);

    // Release threads
    osEventFlagsSet(GlobalEventHandle, EVENT_READY);
 802a614:	4b1a      	ldr	r3, [pc, #104]	; (802a680 <StartManagerTask+0x90>)
 802a616:	681b      	ldr	r3, [r3, #0]
 802a618:	2101      	movs	r1, #1
 802a61a:	4618      	mov	r0, r3
 802a61c:	f00d faae 	bl	8037b7c <osEventFlagsSet>
    //    osThreadFlagsSet(KeylessTaskHandle, EVT_KEYLESS_PAIRING);

    /* Infinite loop */
    for (;;) {
        lastWake = _GetTickMS();
 802a620:	f015 f857 	bl	803f6d2 <_GetTickMS>
 802a624:	60f8      	str	r0, [r7, #12]

        // Feed the dog
        HAL_IWDG_Refresh(&hiwdg);
 802a626:	4817      	ldr	r0, [pc, #92]	; (802a684 <StartManagerTask+0x94>)
 802a628:	f009 facd 	bl	8033bc6 <HAL_IWDG_Refresh>

        // Dummy data generator
        _DummyGenerator();
 802a62c:	f015 f8c2 	bl	803f7b4 <_DummyGenerator>

        // Battery Monitor
        // BAT_Debugger();

        // Other stuffs
        HMI1.d.status.daylight = RTC_IsDaylight(VCU.d.rtc.timestamp);
 802a630:	4c0f      	ldr	r4, [pc, #60]	; (802a670 <StartManagerTask+0x80>)
 802a632:	466d      	mov	r5, sp
 802a634:	f104 0320 	add.w	r3, r4, #32
 802a638:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802a63c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 802a640:	f104 0310 	add.w	r3, r4, #16
 802a644:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802a646:	f7fc f99f 	bl	8026988 <RTC_IsDaylight>
 802a64a:	4603      	mov	r3, r0
 802a64c:	461a      	mov	r2, r3
 802a64e:	4b0a      	ldr	r3, [pc, #40]	; (802a678 <StartManagerTask+0x88>)
 802a650:	719a      	strb	r2, [r3, #6]
        HMI1.d.status.warning = BMS.d.warning;
 802a652:	4b08      	ldr	r3, [pc, #32]	; (802a674 <StartManagerTask+0x84>)
 802a654:	78da      	ldrb	r2, [r3, #3]
 802a656:	4b08      	ldr	r3, [pc, #32]	; (802a678 <StartManagerTask+0x88>)
 802a658:	709a      	strb	r2, [r3, #2]
        HMI1.d.status.overheat = BMS.d.overheat;
 802a65a:	4b06      	ldr	r3, [pc, #24]	; (802a674 <StartManagerTask+0x84>)
 802a65c:	789a      	ldrb	r2, [r3, #2]
 802a65e:	4b06      	ldr	r3, [pc, #24]	; (802a678 <StartManagerTask+0x88>)
 802a660:	70da      	strb	r2, [r3, #3]

        // Periodic interval
        osDelayUntil(lastWake + 1000);
 802a662:	68fb      	ldr	r3, [r7, #12]
 802a664:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 802a668:	4618      	mov	r0, r3
 802a66a:	f00d f9f5 	bl	8037a58 <osDelayUntil>
        lastWake = _GetTickMS();
 802a66e:	e7d7      	b.n	802a620 <StartManagerTask+0x30>
 802a670:	20000228 	.word	0x20000228
 802a674:	20000178 	.word	0x20000178
 802a678:	200001e4 	.word	0x200001e4
 802a67c:	20000210 	.word	0x20000210
 802a680:	2000868c 	.word	0x2000868c
 802a684:	20008618 	.word	0x20008618

0802a688 <StartIotTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartIotTask */
void StartIotTask(void *argument)
{
 802a688:	b580      	push	{r7, lr}
 802a68a:	b0b4      	sub	sp, #208	; 0xd0
 802a68c:	af00      	add	r7, sp, #0
 802a68e:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN StartIotTask */
    TickType_t lastWake;
    osStatus_t status;
    report_t report;
    response_t response;
    uint8_t retry[2], pending[2] = { 0 };
 802a690:	2300      	movs	r3, #0
 802a692:	813b      	strh	r3, [r7, #8]
    PAYLOAD_TYPE type;

    osMessageQueueId_t *pQueue;
    header_t *pHeader;
    void *pPayload;
    const uint8_t size = sizeof(report.header.prefix)
 802a694:	2307      	movs	r3, #7
 802a696:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
            + sizeof(report.header.crc)
            + sizeof(report.header.size);

    // wait until ManagerTask done
    osEventFlagsWait(GlobalEventHandle, EVENT_READY, osFlagsNoClear, osWaitForever);
 802a69a:	4b79      	ldr	r3, [pc, #484]	; (802a880 <StartIotTask+0x1f8>)
 802a69c:	6818      	ldr	r0, [r3, #0]
 802a69e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802a6a2:	2202      	movs	r2, #2
 802a6a4:	2101      	movs	r1, #1
 802a6a6:	f00d fac1 	bl	8037c2c <osEventFlagsWait>

    // Start simcom module
    Simcom_SetState(SIM_STATE_READY, 0);
 802a6aa:	2100      	movs	r1, #0
 802a6ac:	2000      	movs	r0, #0
 802a6ae:	f014 f8b9 	bl	803e824 <Simcom_SetState>

    /* Infinite loop */
    for (;;) {
        lastWake = _GetTickMS();
 802a6b2:	f015 f80e 	bl	803f6d2 <_GetTickMS>
 802a6b6:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc

        // Upload Report & Response Payload
        if (Simcom_SetState(SIM_STATE_SERVER_ON, 0)) {
 802a6ba:	2100      	movs	r1, #0
 802a6bc:	2006      	movs	r0, #6
 802a6be:	f014 f8b1 	bl	803e824 <Simcom_SetState>
 802a6c2:	4603      	mov	r3, r0
 802a6c4:	2b00      	cmp	r3, #0
 802a6c6:	f000 80c1 	beq.w	802a84c <StartIotTask+0x1c4>
            // Iterate between REPORT & RESPONSE
            for (type = 0; type <= PAYLOAD_MAX; type++) {
 802a6ca:	2300      	movs	r3, #0
 802a6cc:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
 802a6d0:	e0b7      	b.n	802a842 <StartIotTask+0x1ba>
                // decide the payload
                if (type == PAYLOAD_REPORT) {
 802a6d2:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 802a6d6:	2b01      	cmp	r3, #1
 802a6d8:	d107      	bne.n	802a6ea <StartIotTask+0x62>
                    pQueue = &ReportQueueHandle;
 802a6da:	4b6a      	ldr	r3, [pc, #424]	; (802a884 <StartIotTask+0x1fc>)
 802a6dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
                    pPayload = &report;
 802a6e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802a6e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 802a6e8:	e006      	b.n	802a6f8 <StartIotTask+0x70>
                } else {
                    pQueue = &ResponseQueueHandle;
 802a6ea:	4b67      	ldr	r3, [pc, #412]	; (802a888 <StartIotTask+0x200>)
 802a6ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
                    pPayload = &response;
 802a6f0:	f107 0310 	add.w	r3, r7, #16
 802a6f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                }
                pHeader = (header_t*) pPayload;
 802a6f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 802a6fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

                // Handle Full Buffer
                if (type == PAYLOAD_REPORT) {
 802a700:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 802a704:	2b01      	cmp	r3, #1
 802a706:	d115      	bne.n	802a734 <StartIotTask+0xac>
                    notif = osThreadFlagsWait(EVT_IOT_DISCARD, osFlagsWaitAny, 0);
 802a708:	2200      	movs	r2, #0
 802a70a:	2100      	movs	r1, #0
 802a70c:	2001      	movs	r0, #1
 802a70e:	f00d f8e1 	bl	80378d4 <osThreadFlagsWait>
 802a712:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
                    if (_RTOS_ValidThreadFlag(notif)) {
 802a716:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 802a71a:	f015 f833 	bl	803f784 <_RTOS_ValidThreadFlag>
 802a71e:	4603      	mov	r3, r0
 802a720:	2b00      	cmp	r3, #0
 802a722:	d007      	beq.n	802a734 <StartIotTask+0xac>
                        pending[type] = 0;
 802a724:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 802a728:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 802a72c:	4413      	add	r3, r2
 802a72e:	2200      	movs	r2, #0
 802a730:	f803 2cc8 	strb.w	r2, [r3, #-200]
                    }
                }

                // Check logs
                if (!pending[type]) {
 802a734:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 802a738:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 802a73c:	4413      	add	r3, r2
 802a73e:	f813 3cc8 	ldrb.w	r3, [r3, #-200]
 802a742:	2b00      	cmp	r3, #0
 802a744:	d11e      	bne.n	802a784 <StartIotTask+0xfc>
                    status = osMessageQueueGet(*pQueue, pPayload, NULL, 0);
 802a746:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 802a74a:	6818      	ldr	r0, [r3, #0]
 802a74c:	2300      	movs	r3, #0
 802a74e:	2200      	movs	r2, #0
 802a750:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 802a754:	f00d fd22 	bl	803819c <osMessageQueueGet>
 802a758:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
                    // check is mail ready
                    if (status == osOK) {
 802a75c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 802a760:	2b00      	cmp	r3, #0
 802a762:	d10f      	bne.n	802a784 <StartIotTask+0xfc>
                        pending[type] = 1;
 802a764:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 802a768:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 802a76c:	4413      	add	r3, r2
 802a76e:	2201      	movs	r2, #1
 802a770:	f803 2cc8 	strb.w	r2, [r3, #-200]
                        retry[type] = SIMCOM_MAX_UPLOAD_RETRY;
 802a774:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 802a778:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 802a77c:	4413      	add	r3, r2
 802a77e:	2203      	movs	r2, #3
 802a780:	f803 2cc4 	strb.w	r2, [r3, #-196]
                    }
                }

                // Check is payload ready
                if (pending[type]) {
 802a784:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 802a788:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 802a78c:	4413      	add	r3, r2
 802a78e:	f813 3cc8 	ldrb.w	r3, [r3, #-200]
 802a792:	2b00      	cmp	r3, #0
 802a794:	d050      	beq.n	802a838 <StartIotTask+0x1b0>
                    // Re-calculate CRC
                    if (type == PAYLOAD_REPORT) {
 802a796:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 802a79a:	2b01      	cmp	r3, #1
 802a79c:	d104      	bne.n	802a7a8 <StartIotTask+0x120>
                        Report_SetCRC((report_t*) pPayload);
 802a79e:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 802a7a2:	f7fd fecd 	bl	8028540 <Report_SetCRC>
 802a7a6:	e003      	b.n	802a7b0 <StartIotTask+0x128>
                    } else {
                        Response_SetCRC((response_t*) pPayload);
 802a7a8:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 802a7ac:	f7fd fee5 	bl	802857a <Response_SetCRC>
                    }

                    // Send to server
                    p = Simcom_Upload(pPayload, size + pHeader->size);
 802a7b0:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 802a7b4:	b29a      	uxth	r2, r3
 802a7b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 802a7ba:	799b      	ldrb	r3, [r3, #6]
 802a7bc:	b29b      	uxth	r3, r3
 802a7be:	4413      	add	r3, r2
 802a7c0:	b29b      	uxth	r3, r3
 802a7c2:	4619      	mov	r1, r3
 802a7c4:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 802a7c8:	f014 fc44 	bl	803f054 <Simcom_Upload>
 802a7cc:	4603      	mov	r3, r0
 802a7ce:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf

                    // Handle looping NACK
                    if (p == SIM_RESULT_NACK) {
 802a7d2:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 802a7d6:	f113 0f04 	cmn.w	r3, #4
 802a7da:	d117      	bne.n	802a80c <StartIotTask+0x184>
                        // Probably  CRC not valid, cancel but force as success
                        if (!--retry[type]) {
 802a7dc:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 802a7e0:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 802a7e4:	441a      	add	r2, r3
 802a7e6:	f812 2cc4 	ldrb.w	r2, [r2, #-196]
 802a7ea:	3a01      	subs	r2, #1
 802a7ec:	b2d1      	uxtb	r1, r2
 802a7ee:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 802a7f2:	441a      	add	r2, r3
 802a7f4:	f802 1cc4 	strb.w	r1, [r2, #-196]
 802a7f8:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 802a7fc:	4413      	add	r3, r2
 802a7fe:	f813 3cc4 	ldrb.w	r3, [r3, #-196]
 802a802:	2b00      	cmp	r3, #0
 802a804:	d102      	bne.n	802a80c <StartIotTask+0x184>
                            p = SIM_RESULT_OK;
 802a806:	2301      	movs	r3, #1
 802a808:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
                        }
                    }

                    // Release back
                    if (p == SIM_RESULT_OK) {
 802a80c:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 802a810:	2b01      	cmp	r3, #1
 802a812:	d111      	bne.n	802a838 <StartIotTask+0x1b0>
                        EEPROM_SequentialID(EE_CMD_W, pHeader->seq_id, type);
 802a814:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 802a818:	899b      	ldrh	r3, [r3, #12]
 802a81a:	b29b      	uxth	r3, r3
 802a81c:	f897 20ce 	ldrb.w	r2, [r7, #206]	; 0xce
 802a820:	4619      	mov	r1, r3
 802a822:	2001      	movs	r0, #1
 802a824:	f013 ff36 	bl	803e694 <EEPROM_SequentialID>
                        pending[type] = 0;
 802a828:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 802a82c:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 802a830:	4413      	add	r3, r2
 802a832:	2200      	movs	r2, #0
 802a834:	f803 2cc8 	strb.w	r2, [r3, #-200]
            for (type = 0; type <= PAYLOAD_MAX; type++) {
 802a838:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 802a83c:	3301      	adds	r3, #1
 802a83e:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
 802a842:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 802a846:	2b01      	cmp	r3, #1
 802a848:	f67f af43 	bls.w	802a6d2 <StartIotTask+0x4a>
                }
            }
        }

        // ================= SIMCOM Related Routines ================
        if (Simcom_SetState(SIM_STATE_READY, 0)) {
 802a84c:	2100      	movs	r1, #0
 802a84e:	2000      	movs	r0, #0
 802a850:	f013 ffe8 	bl	803e824 <Simcom_SetState>
 802a854:	4603      	mov	r3, r0
 802a856:	2b00      	cmp	r3, #0
 802a858:	d009      	beq.n	802a86e <StartIotTask+0x1e6>
            Simcom_IdleJob(NULL);
 802a85a:	2000      	movs	r0, #0
 802a85c:	f014 fd0e 	bl	803f27c <Simcom_IdleJob>

            if (RTC_NeedCalibration()) {
 802a860:	f7fc f8a8 	bl	80269b4 <RTC_NeedCalibration>
 802a864:	4603      	mov	r3, r0
 802a866:	2b00      	cmp	r3, #0
 802a868:	d001      	beq.n	802a86e <StartIotTask+0x1e6>
                RTC_CalibrateWithSimcom();
 802a86a:	f7fc f8cb 	bl	8026a04 <RTC_CalibrateWithSimcom>
            }
        }

        // Periodic interval
        osDelayUntil(lastWake + 1000);
 802a86e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 802a872:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 802a876:	4618      	mov	r0, r3
 802a878:	f00d f8ee 	bl	8037a58 <osDelayUntil>
        lastWake = _GetTickMS();
 802a87c:	e719      	b.n	802a6b2 <StartIotTask+0x2a>
 802a87e:	bf00      	nop
 802a880:	2000868c 	.word	0x2000868c
 802a884:	20008688 	.word	0x20008688
 802a888:	20008578 	.word	0x20008578

0802a88c <StartReporterTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartReporterTask */
void StartReporterTask(void *argument)
{
 802a88c:	b580      	push	{r7, lr}
 802a88e:	b09c      	sub	sp, #112	; 0x70
 802a890:	af00      	add	r7, sp, #0
 802a892:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN StartReporterTask */
    TickType_t lastWake;
    report_t report;
    osStatus_t status;
    FRAME_TYPE frame;
    uint8_t frameDecider = 0;
 802a894:	2300      	movs	r3, #0
 802a896:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

    // wait until ManagerTask done
    osEventFlagsWait(GlobalEventHandle, EVENT_READY, osFlagsNoClear, osWaitForever);
 802a89a:	4b32      	ldr	r3, [pc, #200]	; (802a964 <StartReporterTask+0xd8>)
 802a89c:	6818      	ldr	r0, [r3, #0]
 802a89e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802a8a2:	2202      	movs	r2, #2
 802a8a4:	2101      	movs	r1, #1
 802a8a6:	f00d f9c1 	bl	8037c2c <osEventFlagsWait>

    // Initialize
    Report_Init(FR_SIMPLE, &report);
 802a8aa:	f107 0308 	add.w	r3, r7, #8
 802a8ae:	4619      	mov	r1, r3
 802a8b0:	2001      	movs	r0, #1
 802a8b2:	f7fd fc99 	bl	80281e8 <Report_Init>

    /* Infinite loop */
    for (;;) {
        lastWake = _GetTickMS();
 802a8b6:	f014 ff0c 	bl	803f6d2 <_GetTickMS>
 802a8ba:	66b8      	str	r0, [r7, #104]	; 0x68

        // Frame type decider
        if (!VCU.d.state.independent) {
 802a8bc:	4b2a      	ldr	r3, [pc, #168]	; (802a968 <StartReporterTask+0xdc>)
 802a8be:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 802a8c2:	2b00      	cmp	r3, #0
 802a8c4:	d113      	bne.n	802a8ee <StartReporterTask+0x62>
            if (++frameDecider == (RPT_INTERVAL_FULL / RPT_INTERVAL_SIMPLE )) {
 802a8c6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 802a8ca:	3301      	adds	r3, #1
 802a8cc:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 802a8d0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 802a8d4:	2b04      	cmp	r3, #4
 802a8d6:	d106      	bne.n	802a8e6 <StartReporterTask+0x5a>
                frame = FR_FULL;
 802a8d8:	2302      	movs	r3, #2
 802a8da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                frameDecider = 0;
 802a8de:	2300      	movs	r3, #0
 802a8e0:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 802a8e4:	e009      	b.n	802a8fa <StartReporterTask+0x6e>
            } else {
                frame = FR_SIMPLE;
 802a8e6:	2301      	movs	r3, #1
 802a8e8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 802a8ec:	e005      	b.n	802a8fa <StartReporterTask+0x6e>
            }
        }
        else {
            frame = FR_FULL;
 802a8ee:	2302      	movs	r3, #2
 802a8f0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            frameDecider = 0;
 802a8f4:	2300      	movs	r3, #0
 802a8f6:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
        }

        // Get current snapshot
        Report_Capture(frame, &report);
 802a8fa:	f107 0208 	add.w	r2, r7, #8
 802a8fe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 802a902:	4611      	mov	r1, r2
 802a904:	4618      	mov	r0, r3
 802a906:	f7fd fca5 	bl	8028254 <Report_Capture>

        // Put report to log
        do {
            status = osMessageQueuePut(ReportQueueHandle, &report, 0U, 0U);
 802a90a:	4b18      	ldr	r3, [pc, #96]	; (802a96c <StartReporterTask+0xe0>)
 802a90c:	6818      	ldr	r0, [r3, #0]
 802a90e:	f107 0108 	add.w	r1, r7, #8
 802a912:	2300      	movs	r3, #0
 802a914:	2200      	movs	r2, #0
 802a916:	f00d fbcd 	bl	80380b4 <osMessageQueuePut>
 802a91a:	6678      	str	r0, [r7, #100]	; 0x64
            // already full, remove oldest
            if (status == osErrorResource) {
 802a91c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802a91e:	f113 0f03 	cmn.w	r3, #3
 802a922:	d105      	bne.n	802a930 <StartReporterTask+0xa4>
                osThreadFlagsSet(IotTaskHandle, EVT_IOT_DISCARD);
 802a924:	4b12      	ldr	r3, [pc, #72]	; (802a970 <StartReporterTask+0xe4>)
 802a926:	681b      	ldr	r3, [r3, #0]
 802a928:	2101      	movs	r1, #1
 802a92a:	4618      	mov	r0, r3
 802a92c:	f00c ff20 	bl	8037770 <osThreadFlagsSet>
            }
        } while (status != osOK);
 802a930:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802a932:	2b00      	cmp	r3, #0
 802a934:	d1e9      	bne.n	802a90a <StartReporterTask+0x7e>

        // reset some events group
        VCU.SetEvent(EV_VCU_NETWORK_RESTART, 0);
 802a936:	4b0c      	ldr	r3, [pc, #48]	; (802a968 <StartReporterTask+0xdc>)
 802a938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802a93a:	2200      	movs	r2, #0
 802a93c:	f04f 0001 	mov.w	r0, #1
 802a940:	f04f 0100 	mov.w	r1, #0
 802a944:	4798      	blx	r3

        // Report interval
        osDelayUntil(lastWake + (VCU.d.interval * 1000));
 802a946:	4b08      	ldr	r3, [pc, #32]	; (802a968 <StartReporterTask+0xdc>)
 802a948:	88db      	ldrh	r3, [r3, #6]
 802a94a:	461a      	mov	r2, r3
 802a94c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802a950:	fb03 f302 	mul.w	r3, r3, r2
 802a954:	461a      	mov	r2, r3
 802a956:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802a958:	4413      	add	r3, r2
 802a95a:	4618      	mov	r0, r3
 802a95c:	f00d f87c 	bl	8037a58 <osDelayUntil>
        lastWake = _GetTickMS();
 802a960:	e7a9      	b.n	802a8b6 <StartReporterTask+0x2a>
 802a962:	bf00      	nop
 802a964:	2000868c 	.word	0x2000868c
 802a968:	20000228 	.word	0x20000228
 802a96c:	20008688 	.word	0x20008688
 802a970:	20008934 	.word	0x20008934

0802a974 <StartCommandTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCommandTask */
void StartCommandTask(void *argument)
{
 802a974:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 802a978:	b09c      	sub	sp, #112	; 0x70
 802a97a:	af00      	add	r7, sp, #0
 802a97c:	6078      	str	r0, [r7, #4]
    osStatus_t status;
    uint32_t notif;
    uint8_t driver;

    // wait until ManagerTask done
    osEventFlagsWait(GlobalEventHandle, EVENT_READY, osFlagsNoClear, osWaitForever);
 802a97e:	4bb9      	ldr	r3, [pc, #740]	; (802ac64 <StartCommandTask+0x2f0>)
 802a980:	6818      	ldr	r0, [r3, #0]
 802a982:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802a986:	2202      	movs	r2, #2
 802a988:	2101      	movs	r1, #1
 802a98a:	f00d f94f 	bl	8037c2c <osEventFlagsWait>

    // Initialize
    Response_Init(&response);
 802a98e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802a992:	4618      	mov	r0, r3
 802a994:	f7fd fc44 	bl	8028220 <Response_Init>

    /* Infinite loop */
    for (;;) {
        // get command in queue
        status = osMessageQueueGet(CommandQueueHandle, &command, NULL, osWaitForever);
 802a998:	4bb3      	ldr	r3, [pc, #716]	; (802ac68 <StartCommandTask+0x2f4>)
 802a99a:	6818      	ldr	r0, [r3, #0]
 802a99c:	f107 0110 	add.w	r1, r7, #16
 802a9a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802a9a4:	2200      	movs	r2, #0
 802a9a6:	f00d fbf9 	bl	803819c <osMessageQueueGet>
 802a9aa:	66f8      	str	r0, [r7, #108]	; 0x6c

        if (status == osOK) {
 802a9ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802a9ae:	2b00      	cmp	r3, #0
 802a9b0:	d1f2      	bne.n	802a998 <StartCommandTask+0x24>
            Command_Debugger(&command);
 802a9b2:	f107 0310 	add.w	r3, r7, #16
 802a9b6:	4618      	mov	r0, r3
 802a9b8:	f7fd fdf4 	bl	80285a4 <Command_Debugger>

            // default command response
            response.data.code = RESPONSE_STATUS_OK;
 802a9bc:	2301      	movs	r3, #1
 802a9be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
            strcpy(response.data.message, "");
 802a9c2:	2300      	movs	r3, #0
 802a9c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

            // handle the command
            switch (command.data.code) {
 802a9c8:	7dfb      	ldrb	r3, [r7, #23]
 802a9ca:	2b04      	cmp	r3, #4
 802a9cc:	f200 8137 	bhi.w	802ac3e <StartCommandTask+0x2ca>
 802a9d0:	a201      	add	r2, pc, #4	; (adr r2, 802a9d8 <StartCommandTask+0x64>)
 802a9d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a9d6:	bf00      	nop
 802a9d8:	0802a9ed 	.word	0x0802a9ed
 802a9dc:	0802aa85 	.word	0x0802aa85
 802a9e0:	0802aad5 	.word	0x0802aad5
 802a9e4:	0802ab35 	.word	0x0802ab35
 802a9e8:	0802abd9 	.word	0x0802abd9
                case CMD_CODE_GEN :
                    switch (command.data.sub_code) {
 802a9ec:	7e3b      	ldrb	r3, [r7, #24]
 802a9ee:	2b03      	cmp	r3, #3
 802a9f0:	d843      	bhi.n	802aa7a <StartCommandTask+0x106>
 802a9f2:	a201      	add	r2, pc, #4	; (adr r2, 802a9f8 <StartCommandTask+0x84>)
 802a9f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a9f8:	0802aa09 	.word	0x0802aa09
 802a9fc:	0802aa1d 	.word	0x0802aa1d
 802aa00:	0802aa2f 	.word	0x0802aa2f
 802aa04:	0802aa41 	.word	0x0802aa41
                        case CMD_GEN_INFO :
                            sprintf(response.data.message,
 802aa08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802aa0c:	f103 000f 	add.w	r0, r3, #15
 802aa10:	2314      	movs	r3, #20
 802aa12:	2205      	movs	r2, #5
 802aa14:	4995      	ldr	r1, [pc, #596]	; (802ac6c <StartCommandTask+0x2f8>)
 802aa16:	f014 ff83 	bl	803f920 <siprintf>
                                    "VCU v.%d, "VCU_VENDOR" @ 20%d", VCU_FIRMWARE_VERSION, VCU_BUILD_YEAR);
                            break;
 802aa1a:	e032      	b.n	802aa82 <StartCommandTask+0x10e>

                        case CMD_GEN_LED :
                            _LedWrite((uint8_t) command.data.value);
 802aa1c:	f8d7 3019 	ldr.w	r3, [r7, #25]
 802aa20:	f8d7 401d 	ldr.w	r4, [r7, #29]
 802aa24:	b2db      	uxtb	r3, r3
 802aa26:	4618      	mov	r0, r3
 802aa28:	f014 fe5a 	bl	803f6e0 <_LedWrite>
                            break;
 802aa2c:	e029      	b.n	802aa82 <StartCommandTask+0x10e>

                        case CMD_GEN_KNOB :
                            VCU.d.state.knob = (uint8_t) command.data.value;
 802aa2e:	f8d7 3019 	ldr.w	r3, [r7, #25]
 802aa32:	f8d7 401d 	ldr.w	r4, [r7, #29]
 802aa36:	b2da      	uxtb	r2, r3
 802aa38:	4b8d      	ldr	r3, [pc, #564]	; (802ac70 <StartCommandTask+0x2fc>)
 802aa3a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                            break;
 802aa3e:	e020      	b.n	802aa82 <StartCommandTask+0x10e>

                        case CMD_GEN_FOTA :
                            if (BACKUP_VOLTAGE > 3800) {
 802aa40:	4b8c      	ldr	r3, [pc, #560]	; (802ac74 <StartCommandTask+0x300>)
 802aa42:	881b      	ldrh	r3, [r3, #0]
 802aa44:	f640 62d8 	movw	r2, #3800	; 0xed8
 802aa48:	4293      	cmp	r3, r2
 802aa4a:	d908      	bls.n	802aa5e <StartCommandTask+0xea>
                                /* Set flag to SRAM */
                                *(uint32_t*) IAP_FLAG_ADDR = IAP_FLAG;
 802aa4c:	4b8a      	ldr	r3, [pc, #552]	; (802ac78 <StartCommandTask+0x304>)
 802aa4e:	4a8b      	ldr	r2, [pc, #556]	; (802ac7c <StartCommandTask+0x308>)
 802aa50:	601a      	str	r2, [r3, #0]
                                *(uint32_t*) IAP_RETRY_ADDR = IAP_RETRY;
 802aa52:	4b8b      	ldr	r3, [pc, #556]	; (802ac80 <StartCommandTask+0x30c>)
 802aa54:	2201      	movs	r2, #1
 802aa56:	601a      	str	r2, [r3, #0]
                                HAL_NVIC_SystemReset();
 802aa58:	f003 f84d 	bl	802daf6 <HAL_NVIC_SystemReset>
 802aa5c:	e009      	b.n	802aa72 <StartCommandTask+0xfe>
                            } else {
                                sprintf(response.data.message, "Battery low at %u mV", BACKUP_VOLTAGE);
 802aa5e:	4b85      	ldr	r3, [pc, #532]	; (802ac74 <StartCommandTask+0x300>)
 802aa60:	881b      	ldrh	r3, [r3, #0]
 802aa62:	461a      	mov	r2, r3
 802aa64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802aa68:	330f      	adds	r3, #15
 802aa6a:	4986      	ldr	r1, [pc, #536]	; (802ac84 <StartCommandTask+0x310>)
 802aa6c:	4618      	mov	r0, r3
 802aa6e:	f014 ff57 	bl	803f920 <siprintf>
                            }
                            /* This line is never reached when FOTA activated */
                            response.data.code = RESPONSE_STATUS_ERROR;
 802aa72:	2300      	movs	r3, #0
 802aa74:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

                            break;
 802aa78:	e003      	b.n	802aa82 <StartCommandTask+0x10e>

                        default:
                            response.data.code = RESPONSE_STATUS_INVALID;
 802aa7a:	2302      	movs	r3, #2
 802aa7c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
                            break;
 802aa80:	bf00      	nop
                    }
                    break;
 802aa82:	e0e1      	b.n	802ac48 <StartCommandTask+0x2d4>

                case CMD_CODE_REPORT :
                    switch (command.data.sub_code) {
 802aa84:	7e3b      	ldrb	r3, [r7, #24]
 802aa86:	2b01      	cmp	r3, #1
 802aa88:	d00d      	beq.n	802aaa6 <StartCommandTask+0x132>
 802aa8a:	2b02      	cmp	r3, #2
 802aa8c:	d014      	beq.n	802aab8 <StartCommandTask+0x144>
 802aa8e:	2b00      	cmp	r3, #0
 802aa90:	d11b      	bne.n	802aaca <StartCommandTask+0x156>
                        case CMD_REPORT_RTC :
                            RTC_Write((uint64_t) command.data.value, &(VCU.d.rtc));
 802aa92:	f8d7 3019 	ldr.w	r3, [r7, #25]
 802aa96:	f8d7 401d 	ldr.w	r4, [r7, #29]
 802aa9a:	4a7b      	ldr	r2, [pc, #492]	; (802ac88 <StartCommandTask+0x314>)
 802aa9c:	4618      	mov	r0, r3
 802aa9e:	4621      	mov	r1, r4
 802aaa0:	f7fb ff22 	bl	80268e8 <RTC_Write>
                            break;
 802aaa4:	e015      	b.n	802aad2 <StartCommandTask+0x15e>

                        case CMD_REPORT_ODOM :
                            EEPROM_Odometer(EE_CMD_W, (uint32_t) command.data.value);
 802aaa6:	f8d7 3019 	ldr.w	r3, [r7, #25]
 802aaaa:	f8d7 401d 	ldr.w	r4, [r7, #29]
 802aaae:	4619      	mov	r1, r3
 802aab0:	2001      	movs	r0, #1
 802aab2:	f013 fdb5 	bl	803e620 <EEPROM_Odometer>
                            break;
 802aab6:	e00c      	b.n	802aad2 <StartCommandTask+0x15e>

                        case CMD_REPORT_UNITID :
                            EEPROM_UnitID(EE_CMD_W, (uint32_t) command.data.value);
 802aab8:	f8d7 3019 	ldr.w	r3, [r7, #25]
 802aabc:	f8d7 401d 	ldr.w	r4, [r7, #29]
 802aac0:	4619      	mov	r1, r3
 802aac2:	2001      	movs	r0, #1
 802aac4:	f013 fdca 	bl	803e65c <EEPROM_UnitID>
                            break;
 802aac8:	e003      	b.n	802aad2 <StartCommandTask+0x15e>

                        default:
                            response.data.code = RESPONSE_STATUS_INVALID;
 802aaca:	2302      	movs	r3, #2
 802aacc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
                            break;
 802aad0:	bf00      	nop
                    }
                    break;
 802aad2:	e0b9      	b.n	802ac48 <StartCommandTask+0x2d4>

                case CMD_CODE_AUDIO :
                    switch (command.data.sub_code) {
 802aad4:	7e3b      	ldrb	r3, [r7, #24]
 802aad6:	2b01      	cmp	r3, #1
 802aad8:	d00a      	beq.n	802aaf0 <StartCommandTask+0x17c>
 802aada:	2b02      	cmp	r3, #2
 802aadc:	d01d      	beq.n	802ab1a <StartCommandTask+0x1a6>
 802aade:	2b00      	cmp	r3, #0
 802aae0:	d123      	bne.n	802ab2a <StartCommandTask+0x1b6>
                        case CMD_AUDIO_BEEP :
                            osThreadFlagsSet(AudioTaskHandle, EVT_AUDIO_BEEP);
 802aae2:	4b6a      	ldr	r3, [pc, #424]	; (802ac8c <StartCommandTask+0x318>)
 802aae4:	681b      	ldr	r3, [r3, #0]
 802aae6:	2101      	movs	r1, #1
 802aae8:	4618      	mov	r0, r3
 802aaea:	f00c fe41 	bl	8037770 <osThreadFlagsSet>
                            break;
 802aaee:	e020      	b.n	802ab32 <StartCommandTask+0x1be>

                        case CMD_AUDIO_MUTE :
                            if ((uint8_t) command.data.value) {
 802aaf0:	f8d7 3019 	ldr.w	r3, [r7, #25]
 802aaf4:	f8d7 401d 	ldr.w	r4, [r7, #29]
 802aaf8:	b2db      	uxtb	r3, r3
 802aafa:	2b00      	cmp	r3, #0
 802aafc:	d006      	beq.n	802ab0c <StartCommandTask+0x198>
                                osThreadFlagsSet(AudioTaskHandle, EVT_AUDIO_MUTE_ON);
 802aafe:	4b63      	ldr	r3, [pc, #396]	; (802ac8c <StartCommandTask+0x318>)
 802ab00:	681b      	ldr	r3, [r3, #0]
 802ab02:	2108      	movs	r1, #8
 802ab04:	4618      	mov	r0, r3
 802ab06:	f00c fe33 	bl	8037770 <osThreadFlagsSet>
                            } else {
                                osThreadFlagsSet(AudioTaskHandle, EVT_AUDIO_MUTE_OFF);
                            }

                            break;
 802ab0a:	e012      	b.n	802ab32 <StartCommandTask+0x1be>
                                osThreadFlagsSet(AudioTaskHandle, EVT_AUDIO_MUTE_OFF);
 802ab0c:	4b5f      	ldr	r3, [pc, #380]	; (802ac8c <StartCommandTask+0x318>)
 802ab0e:	681b      	ldr	r3, [r3, #0]
 802ab10:	2110      	movs	r1, #16
 802ab12:	4618      	mov	r0, r3
 802ab14:	f00c fe2c 	bl	8037770 <osThreadFlagsSet>
                            break;
 802ab18:	e00b      	b.n	802ab32 <StartCommandTask+0x1be>

                        case CMD_AUDIO_VOL :
                            VCU.d.volume = (uint8_t) command.data.value;
 802ab1a:	f8d7 3019 	ldr.w	r3, [r7, #25]
 802ab1e:	f8d7 401d 	ldr.w	r4, [r7, #29]
 802ab22:	b2da      	uxtb	r2, r3
 802ab24:	4b52      	ldr	r3, [pc, #328]	; (802ac70 <StartCommandTask+0x2fc>)
 802ab26:	721a      	strb	r2, [r3, #8]
                            break;
 802ab28:	e003      	b.n	802ab32 <StartCommandTask+0x1be>

                        default:
                            response.data.code = RESPONSE_STATUS_INVALID;
 802ab2a:	2302      	movs	r3, #2
 802ab2c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
                            break;
 802ab30:	bf00      	nop
                    }
                    break;
 802ab32:	e089      	b.n	802ac48 <StartCommandTask+0x2d4>

                case CMD_CODE_FINGER :
                    // put finger index to queue
                    driver = command.data.value;
 802ab34:	f8d7 3019 	ldr.w	r3, [r7, #25]
 802ab38:	f8d7 401d 	ldr.w	r4, [r7, #29]
 802ab3c:	b2db      	uxtb	r3, r3
 802ab3e:	73fb      	strb	r3, [r7, #15]
                    osMessageQueuePut(DriverQueueHandle, &driver, 0U, 0U);
 802ab40:	4b53      	ldr	r3, [pc, #332]	; (802ac90 <StartCommandTask+0x31c>)
 802ab42:	6818      	ldr	r0, [r3, #0]
 802ab44:	f107 010f 	add.w	r1, r7, #15
 802ab48:	2300      	movs	r3, #0
 802ab4a:	2200      	movs	r2, #0
 802ab4c:	f00d fab2 	bl	80380b4 <osMessageQueuePut>

                    switch (command.data.sub_code) {
 802ab50:	7e3b      	ldrb	r3, [r7, #24]
 802ab52:	2b01      	cmp	r3, #1
 802ab54:	d00a      	beq.n	802ab6c <StartCommandTask+0x1f8>
 802ab56:	2b02      	cmp	r3, #2
 802ab58:	d00f      	beq.n	802ab7a <StartCommandTask+0x206>
 802ab5a:	2b00      	cmp	r3, #0
 802ab5c:	d114      	bne.n	802ab88 <StartCommandTask+0x214>
                        case CMD_FINGER_ADD :
                            osThreadFlagsSet(FingerTaskHandle, EVT_FINGER_ADD);
 802ab5e:	4b4d      	ldr	r3, [pc, #308]	; (802ac94 <StartCommandTask+0x320>)
 802ab60:	681b      	ldr	r3, [r3, #0]
 802ab62:	2102      	movs	r1, #2
 802ab64:	4618      	mov	r0, r3
 802ab66:	f00c fe03 	bl	8037770 <osThreadFlagsSet>
                            break;
 802ab6a:	e011      	b.n	802ab90 <StartCommandTask+0x21c>

                        case CMD_FINGER_DEL :
                            osThreadFlagsSet(FingerTaskHandle, EVT_FINGER_DEL);
 802ab6c:	4b49      	ldr	r3, [pc, #292]	; (802ac94 <StartCommandTask+0x320>)
 802ab6e:	681b      	ldr	r3, [r3, #0]
 802ab70:	2104      	movs	r1, #4
 802ab72:	4618      	mov	r0, r3
 802ab74:	f00c fdfc 	bl	8037770 <osThreadFlagsSet>
                            break;
 802ab78:	e00a      	b.n	802ab90 <StartCommandTask+0x21c>

                        case CMD_FINGER_RST :
                            osThreadFlagsSet(FingerTaskHandle, EVT_FINGER_RST);
 802ab7a:	4b46      	ldr	r3, [pc, #280]	; (802ac94 <StartCommandTask+0x320>)
 802ab7c:	681b      	ldr	r3, [r3, #0]
 802ab7e:	2108      	movs	r1, #8
 802ab80:	4618      	mov	r0, r3
 802ab82:	f00c fdf5 	bl	8037770 <osThreadFlagsSet>
                            break;
 802ab86:	e003      	b.n	802ab90 <StartCommandTask+0x21c>

                        default:
                            response.data.code = RESPONSE_STATUS_INVALID;
 802ab88:	2302      	movs	r3, #2
 802ab8a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
                            break;
 802ab8e:	bf00      	nop
                    }

                    // wait response until timeout
                    if (response.data.code == RESPONSE_STATUS_OK) {
 802ab90:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 802ab94:	2b01      	cmp	r3, #1
 802ab96:	d156      	bne.n	802ac46 <StartCommandTask+0x2d2>
                        notif = osThreadFlagsWait(EVT_MASK, osFlagsWaitAny, 20000);
 802ab98:	f644 6220 	movw	r2, #20000	; 0x4e20
 802ab9c:	2100      	movs	r1, #0
 802ab9e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 802aba2:	f00c fe97 	bl	80378d4 <osThreadFlagsWait>
 802aba6:	66b8      	str	r0, [r7, #104]	; 0x68
                        if (_RTOS_ValidThreadFlag(notif)) {
 802aba8:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 802abaa:	f014 fdeb 	bl	803f784 <_RTOS_ValidThreadFlag>
 802abae:	4603      	mov	r3, r0
 802abb0:	2b00      	cmp	r3, #0
 802abb2:	d048      	beq.n	802ac46 <StartCommandTask+0x2d2>
                            if (notif & EVT_COMMAND_ERROR) {
 802abb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802abb6:	469b      	mov	fp, r3
 802abb8:	f04f 0c00 	mov.w	ip, #0
 802abbc:	f04f 0101 	mov.w	r1, #1
 802abc0:	f04f 0200 	mov.w	r2, #0
 802abc4:	ea0b 0301 	and.w	r3, fp, r1
 802abc8:	ea0c 0402 	and.w	r4, ip, r2
 802abcc:	4323      	orrs	r3, r4
 802abce:	d03a      	beq.n	802ac46 <StartCommandTask+0x2d2>
                                response.data.code = RESPONSE_STATUS_ERROR;
 802abd0:	2300      	movs	r3, #0
 802abd2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
                            }
                        }
                    }
                    break;
 802abd6:	e036      	b.n	802ac46 <StartCommandTask+0x2d2>

                case CMD_CODE_KEYLESS :
                    switch (command.data.sub_code) {
 802abd8:	7e3b      	ldrb	r3, [r7, #24]
 802abda:	2b00      	cmp	r3, #0
 802abdc:	d129      	bne.n	802ac32 <StartCommandTask+0x2be>
                        case CMD_KEYLESS_PAIRING :
                            osThreadFlagsSet(KeylessTaskHandle, EVT_KEYLESS_PAIRING);
 802abde:	4b2e      	ldr	r3, [pc, #184]	; (802ac98 <StartCommandTask+0x324>)
 802abe0:	681b      	ldr	r3, [r3, #0]
 802abe2:	2102      	movs	r1, #2
 802abe4:	4618      	mov	r0, r3
 802abe6:	f00c fdc3 	bl	8037770 <osThreadFlagsSet>

                            // wait response until timeout
                            if (response.data.code == RESPONSE_STATUS_OK) {
 802abea:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 802abee:	2b01      	cmp	r3, #1
 802abf0:	d123      	bne.n	802ac3a <StartCommandTask+0x2c6>
                                notif = osThreadFlagsWait(EVT_MASK, osFlagsWaitAny, COMMAND_TIMEOUT);
 802abf2:	f644 6220 	movw	r2, #20000	; 0x4e20
 802abf6:	2100      	movs	r1, #0
 802abf8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 802abfc:	f00c fe6a 	bl	80378d4 <osThreadFlagsWait>
 802ac00:	66b8      	str	r0, [r7, #104]	; 0x68
                                if (_RTOS_ValidThreadFlag(notif)) {
 802ac02:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 802ac04:	f014 fdbe 	bl	803f784 <_RTOS_ValidThreadFlag>
 802ac08:	4603      	mov	r3, r0
 802ac0a:	2b00      	cmp	r3, #0
 802ac0c:	d015      	beq.n	802ac3a <StartCommandTask+0x2c6>
                                    if (notif & EVT_COMMAND_ERROR) {
 802ac0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802ac10:	469b      	mov	fp, r3
 802ac12:	f04f 0c00 	mov.w	ip, #0
 802ac16:	f04f 0101 	mov.w	r1, #1
 802ac1a:	f04f 0200 	mov.w	r2, #0
 802ac1e:	ea0b 0301 	and.w	r3, fp, r1
 802ac22:	ea0c 0402 	and.w	r4, ip, r2
 802ac26:	4323      	orrs	r3, r4
 802ac28:	d007      	beq.n	802ac3a <StartCommandTask+0x2c6>
                                        response.data.code = RESPONSE_STATUS_ERROR;
 802ac2a:	2300      	movs	r3, #0
 802ac2c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
                                    }
                                }
                            }

                            break;
 802ac30:	e003      	b.n	802ac3a <StartCommandTask+0x2c6>

                        default:
                            response.data.code = RESPONSE_STATUS_INVALID;
 802ac32:	2302      	movs	r3, #2
 802ac34:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
                            break;
 802ac38:	e000      	b.n	802ac3c <StartCommandTask+0x2c8>
                            break;
 802ac3a:	bf00      	nop
                    }
                    break;
 802ac3c:	e004      	b.n	802ac48 <StartCommandTask+0x2d4>

                default:
                    response.data.code = RESPONSE_STATUS_INVALID;
 802ac3e:	2302      	movs	r3, #2
 802ac40:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
                    break;
 802ac44:	e000      	b.n	802ac48 <StartCommandTask+0x2d4>
                    break;
 802ac46:	bf00      	nop
            }

            // Get current snapshot
            Response_Capture(&response);
 802ac48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802ac4c:	4618      	mov	r0, r3
 802ac4e:	f7fd fc53 	bl	80284f8 <Response_Capture>
            // Send to Queue
            osMessageQueuePut(ResponseQueueHandle, &response, 0U, 0U);
 802ac52:	4b12      	ldr	r3, [pc, #72]	; (802ac9c <StartCommandTask+0x328>)
 802ac54:	6818      	ldr	r0, [r3, #0]
 802ac56:	f107 0124 	add.w	r1, r7, #36	; 0x24
 802ac5a:	2300      	movs	r3, #0
 802ac5c:	2200      	movs	r2, #0
 802ac5e:	f00d fa29 	bl	80380b4 <osMessageQueuePut>
        status = osMessageQueueGet(CommandQueueHandle, &command, NULL, osWaitForever);
 802ac62:	e699      	b.n	802a998 <StartCommandTask+0x24>
 802ac64:	2000868c 	.word	0x2000868c
 802ac68:	200089a4 	.word	0x200089a4
 802ac6c:	08043900 	.word	0x08043900
 802ac70:	20000228 	.word	0x20000228
 802ac74:	200004b4 	.word	0x200004b4
 802ac78:	2004fffc 	.word	0x2004fffc
 802ac7c:	aabbccdd 	.word	0xaabbccdd
 802ac80:	2004fff8 	.word	0x2004fff8
 802ac84:	08043918 	.word	0x08043918
 802ac88:	20000238 	.word	0x20000238
 802ac8c:	20008a50 	.word	0x20008a50
 802ac90:	200087a8 	.word	0x200087a8
 802ac94:	20008694 	.word	0x20008694
 802ac98:	20008680 	.word	0x20008680
 802ac9c:	20008578 	.word	0x20008578

0802aca0 <StartGpsTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartGpsTask */
void StartGpsTask(void *argument)
{
 802aca0:	b580      	push	{r7, lr}
 802aca2:	b084      	sub	sp, #16
 802aca4:	af00      	add	r7, sp, #0
 802aca6:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN StartGpsTask */
    TickType_t lastWake;

    // wait until ManagerTask done
    osEventFlagsWait(GlobalEventHandle, EVENT_READY, osFlagsNoClear, osWaitForever);
 802aca8:	4b0b      	ldr	r3, [pc, #44]	; (802acd8 <StartGpsTask+0x38>)
 802acaa:	6818      	ldr	r0, [r3, #0]
 802acac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802acb0:	2202      	movs	r2, #2
 802acb2:	2101      	movs	r1, #1
 802acb4:	f00c ffba 	bl	8037c2c <osEventFlagsWait>

    // Initialize
    GPS_Init();
 802acb8:	f7fc fbc0 	bl	802743c <GPS_Init>

    /* Infinite loop */
    for (;;) {
        lastWake = _GetTickMS();
 802acbc:	f014 fd09 	bl	803f6d2 <_GetTickMS>
 802acc0:	60f8      	str	r0, [r7, #12]

        GPS_Capture();
 802acc2:	f7fc fc03 	bl	80274cc <GPS_Capture>
        GPS_CalculateOdometer();
 802acc6:	f7fc fc45 	bl	8027554 <GPS_CalculateOdometer>
        // GPS_Debugger();

        // Periodic interval
        osDelayUntil(lastWake + GPS_INTERVAL_MS);
 802acca:	68fb      	ldr	r3, [r7, #12]
 802accc:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 802acd0:	4618      	mov	r0, r3
 802acd2:	f00c fec1 	bl	8037a58 <osDelayUntil>
        lastWake = _GetTickMS();
 802acd6:	e7f1      	b.n	802acbc <StartGpsTask+0x1c>
 802acd8:	2000868c 	.word	0x2000868c

0802acdc <StartGyroTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartGyroTask */
void StartGyroTask(void *argument)
{
 802acdc:	b580      	push	{r7, lr}
 802acde:	b08c      	sub	sp, #48	; 0x30
 802ace0:	af00      	add	r7, sp, #0
 802ace2:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN StartGyroTask */
    TickType_t lastWake;
    mems_decision_t decider, tmp;

    // wait until ManagerTask done
    osEventFlagsWait(GlobalEventHandle, EVENT_READY, osFlagsNoClear, osWaitForever);
 802ace4:	4b27      	ldr	r3, [pc, #156]	; (802ad84 <StartGyroTask+0xa8>)
 802ace6:	6818      	ldr	r0, [r3, #0]
 802ace8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802acec:	2202      	movs	r2, #2
 802acee:	2101      	movs	r1, #1
 802acf0:	f00c ff9c 	bl	8037c2c <osEventFlagsWait>

    /* MPU6050 Initialization*/
    GYRO_Init();
 802acf4:	f7fc fc92 	bl	802761c <GYRO_Init>

    /* Infinite loop */
    for (;;) {
        lastWake = _GetTickMS();
 802acf8:	f014 fceb 	bl	803f6d2 <_GetTickMS>
 802acfc:	62f8      	str	r0, [r7, #44]	; 0x2c

        // Read all accelerometer, gyroscope (average)
        decider = GYRO_Decision(25);
 802acfe:	f107 031c 	add.w	r3, r7, #28
 802ad02:	2119      	movs	r1, #25
 802ad04:	4618      	mov	r0, r3
 802ad06:	f7fc fd9f 	bl	8027848 <GYRO_Decision>
        //		Gyro_Debugger(&decider);

        // Check accelerometer, happens when impact detected
        if (tmp.crash.state != decider.crash.state) {
 802ad0a:	7d3a      	ldrb	r2, [r7, #20]
 802ad0c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 802ad10:	429a      	cmp	r2, r3
 802ad12:	d00b      	beq.n	802ad2c <StartGyroTask+0x50>
            tmp.crash.state = decider.crash.state;
 802ad14:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 802ad18:	753b      	strb	r3, [r7, #20]

            VCU.SetEvent(EV_VCU_BIKE_CRASHED, decider.crash.state);
 802ad1a:	4b1b      	ldr	r3, [pc, #108]	; (802ad88 <StartGyroTask+0xac>)
 802ad1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802ad1e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 802ad22:	f04f 0004 	mov.w	r0, #4
 802ad26:	f04f 0100 	mov.w	r1, #0
 802ad2a:	4798      	blx	r3
        }

        // Check gyroscope, happens when fall detected
        if (tmp.fall.state != decider.fall.state) {
 802ad2c:	7b3a      	ldrb	r2, [r7, #12]
 802ad2e:	7f3b      	ldrb	r3, [r7, #28]
 802ad30:	429a      	cmp	r2, r3
 802ad32:	d01d      	beq.n	802ad70 <StartGyroTask+0x94>
            tmp.fall.state = decider.fall.state;
 802ad34:	7f3b      	ldrb	r3, [r7, #28]
 802ad36:	733b      	strb	r3, [r7, #12]

            if (decider.fall.state) {
 802ad38:	7f3b      	ldrb	r3, [r7, #28]
 802ad3a:	2b00      	cmp	r3, #0
 802ad3c:	d006      	beq.n	802ad4c <StartGyroTask+0x70>
                osThreadFlagsSet(AudioTaskHandle, EVT_AUDIO_BEEP_START);
 802ad3e:	4b13      	ldr	r3, [pc, #76]	; (802ad8c <StartGyroTask+0xb0>)
 802ad40:	681b      	ldr	r3, [r3, #0]
 802ad42:	2102      	movs	r1, #2
 802ad44:	4618      	mov	r0, r3
 802ad46:	f00c fd13 	bl	8037770 <osThreadFlagsSet>
 802ad4a:	e005      	b.n	802ad58 <StartGyroTask+0x7c>
            } else {
                osThreadFlagsSet(AudioTaskHandle, EVT_AUDIO_BEEP_STOP);
 802ad4c:	4b0f      	ldr	r3, [pc, #60]	; (802ad8c <StartGyroTask+0xb0>)
 802ad4e:	681b      	ldr	r3, [r3, #0]
 802ad50:	2104      	movs	r1, #4
 802ad52:	4618      	mov	r0, r3
 802ad54:	f00c fd0c 	bl	8037770 <osThreadFlagsSet>
            }
            VCU.SetEvent(EV_VCU_BIKE_FALLING, decider.fall.state);
 802ad58:	4b0b      	ldr	r3, [pc, #44]	; (802ad88 <StartGyroTask+0xac>)
 802ad5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802ad5c:	7f3a      	ldrb	r2, [r7, #28]
 802ad5e:	f04f 0002 	mov.w	r0, #2
 802ad62:	f04f 0100 	mov.w	r1, #0
 802ad66:	4798      	blx	r3
            _LedWrite(decider.fall.state);
 802ad68:	7f3b      	ldrb	r3, [r7, #28]
 802ad6a:	4618      	mov	r0, r3
 802ad6c:	f014 fcb8 	bl	803f6e0 <_LedWrite>
        }

        // Handle for both event
        if (decider.crash.state || decider.fall.state) {
 802ad70:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 802ad74:	2b00      	cmp	r3, #0
            // Turn OFF BMS (+ MCU)

        }

        // Periodic interval
        osDelayUntil(lastWake + 100);
 802ad76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802ad78:	3364      	adds	r3, #100	; 0x64
 802ad7a:	4618      	mov	r0, r3
 802ad7c:	f00c fe6c 	bl	8037a58 <osDelayUntil>
        lastWake = _GetTickMS();
 802ad80:	e7ba      	b.n	802acf8 <StartGyroTask+0x1c>
 802ad82:	bf00      	nop
 802ad84:	2000868c 	.word	0x2000868c
 802ad88:	20000228 	.word	0x20000228
 802ad8c:	20008a50 	.word	0x20008a50

0802ad90 <StartKeylessTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartKeylessTask */
void StartKeylessTask(void *argument)
{
 802ad90:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 802ad94:	b086      	sub	sp, #24
 802ad96:	af00      	add	r7, sp, #0
 802ad98:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN StartKeylessTask */
    uint32_t notif;
    KLESS_CMD command;

    // wait until ManagerTask done
    osEventFlagsWait(GlobalEventHandle, EVENT_READY, osFlagsNoClear, osWaitForever);
 802ad9a:	4b63      	ldr	r3, [pc, #396]	; (802af28 <StartKeylessTask+0x198>)
 802ad9c:	6818      	ldr	r0, [r3, #0]
 802ad9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802ada2:	2202      	movs	r2, #2
 802ada4:	2101      	movs	r1, #1
 802ada6:	f00c ff41 	bl	8037c2c <osEventFlagsWait>

    // initialization
    AES_Init();
 802adaa:	f7f8 fd9d 	bl	80238e8 <AES_Init>
    KLESS_Init();
 802adae:	f7fd f855 	bl	8027e5c <KLESS_Init>

    /* Infinite loop */
    for (;;) {
        // check if has new can message
        notif = osThreadFlagsWait(EVT_MASK, osFlagsWaitAny, 100);
 802adb2:	2264      	movs	r2, #100	; 0x64
 802adb4:	2100      	movs	r1, #0
 802adb6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 802adba:	f00c fd8b 	bl	80378d4 <osThreadFlagsWait>
 802adbe:	6138      	str	r0, [r7, #16]
        // proceed event
        if (_RTOS_ValidThreadFlag(notif)) {
 802adc0:	6938      	ldr	r0, [r7, #16]
 802adc2:	f014 fcdf 	bl	803f784 <_RTOS_ValidThreadFlag>
 802adc6:	4603      	mov	r3, r0
 802adc8:	2b00      	cmp	r3, #0
 802adca:	f000 80a9 	beq.w	802af20 <StartKeylessTask+0x190>
            // handle incoming payload
            if (notif & EVT_KEYLESS_RX_IT) {
 802adce:	693b      	ldr	r3, [r7, #16]
 802add0:	469b      	mov	fp, r3
 802add2:	f04f 0c00 	mov.w	ip, #0
 802add6:	f04f 0101 	mov.w	r1, #1
 802adda:	f04f 0200 	mov.w	r2, #0
 802adde:	ea0b 0301 	and.w	r3, fp, r1
 802ade2:	ea0c 0402 	and.w	r4, ip, r2
 802ade6:	4323      	orrs	r3, r4
 802ade8:	d07a      	beq.n	802aee0 <StartKeylessTask+0x150>
                KLESS_Debugger();
 802adea:	f7fd f993 	bl	8028114 <KLESS_Debugger>

                // process
                if (KLESS_ValidateCommand(&command)) {
 802adee:	f107 030f 	add.w	r3, r7, #15
 802adf2:	4618      	mov	r0, r3
 802adf4:	f7fd f892 	bl	8027f1c <KLESS_ValidateCommand>
 802adf8:	4603      	mov	r3, r0
 802adfa:	2b00      	cmp	r3, #0
 802adfc:	d06c      	beq.n	802aed8 <StartKeylessTask+0x148>
                    // handle command
                    switch (command) {
 802adfe:	7bfb      	ldrb	r3, [r7, #15]
 802ae00:	2b01      	cmp	r3, #1
 802ae02:	d00d      	beq.n	802ae20 <StartKeylessTask+0x90>
 802ae04:	2b02      	cmp	r3, #2
 802ae06:	d032      	beq.n	802ae6e <StartKeylessTask+0xde>
 802ae08:	2b00      	cmp	r3, #0
 802ae0a:	d000      	beq.n	802ae0e <StartKeylessTask+0x7e>
                            _DelayMS(100);
                            HAL_GPIO_WritePin(EXT_SOLENOID_PWR_GPIO_Port, EXT_SOLENOID_PWR_Pin, 0);

                            break;
                        default:
                            break;
 802ae0c:	e040      	b.n	802ae90 <StartKeylessTask+0x100>
                            LOG_StrLn("NRF:Command = PING");
 802ae0e:	4847      	ldr	r0, [pc, #284]	; (802af2c <StartKeylessTask+0x19c>)
 802ae10:	f013 fab0 	bl	803e374 <LOG_StrLn>
                            VCU.d.tick.keyless = _GetTickMS();
 802ae14:	f014 fc5d 	bl	803f6d2 <_GetTickMS>
 802ae18:	4602      	mov	r2, r0
 802ae1a:	4b45      	ldr	r3, [pc, #276]	; (802af30 <StartKeylessTask+0x1a0>)
 802ae1c:	63da      	str	r2, [r3, #60]	; 0x3c
                            break;
 802ae1e:	e037      	b.n	802ae90 <StartKeylessTask+0x100>
                            LOG_StrLn("NRF:Command = ALARM");
 802ae20:	4844      	ldr	r0, [pc, #272]	; (802af34 <StartKeylessTask+0x1a4>)
 802ae22:	f013 faa7 	bl	803e374 <LOG_StrLn>
                            for (uint8_t i = 0; i < 2; i++) {
 802ae26:	2300      	movs	r3, #0
 802ae28:	75fb      	strb	r3, [r7, #23]
 802ae2a:	e01c      	b.n	802ae66 <StartKeylessTask+0xd6>
                                SW.runner.hazard = 1;
 802ae2c:	4b42      	ldr	r3, [pc, #264]	; (802af38 <StartKeylessTask+0x1a8>)
 802ae2e:	2201      	movs	r2, #1
 802ae30:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
                                HAL_GPIO_WritePin(EXT_HORN_PWR_GPIO_Port, EXT_HORN_PWR_Pin, 1);
 802ae34:	2201      	movs	r2, #1
 802ae36:	f44f 7180 	mov.w	r1, #256	; 0x100
 802ae3a:	4840      	ldr	r0, [pc, #256]	; (802af3c <StartKeylessTask+0x1ac>)
 802ae3c:	f005 f988 	bl	8030150 <HAL_GPIO_WritePin>
                                _DelayMS(200);
 802ae40:	20c8      	movs	r0, #200	; 0xc8
 802ae42:	f014 fc3b 	bl	803f6bc <_DelayMS>
                                SW.runner.hazard = 0;
 802ae46:	4b3c      	ldr	r3, [pc, #240]	; (802af38 <StartKeylessTask+0x1a8>)
 802ae48:	2200      	movs	r2, #0
 802ae4a:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
                                HAL_GPIO_WritePin(EXT_HORN_PWR_GPIO_Port, EXT_HORN_PWR_Pin, 0);
 802ae4e:	2200      	movs	r2, #0
 802ae50:	f44f 7180 	mov.w	r1, #256	; 0x100
 802ae54:	4839      	ldr	r0, [pc, #228]	; (802af3c <StartKeylessTask+0x1ac>)
 802ae56:	f005 f97b 	bl	8030150 <HAL_GPIO_WritePin>
                                _DelayMS(100);
 802ae5a:	2064      	movs	r0, #100	; 0x64
 802ae5c:	f014 fc2e 	bl	803f6bc <_DelayMS>
                            for (uint8_t i = 0; i < 2; i++) {
 802ae60:	7dfb      	ldrb	r3, [r7, #23]
 802ae62:	3301      	adds	r3, #1
 802ae64:	75fb      	strb	r3, [r7, #23]
 802ae66:	7dfb      	ldrb	r3, [r7, #23]
 802ae68:	2b01      	cmp	r3, #1
 802ae6a:	d9df      	bls.n	802ae2c <StartKeylessTask+0x9c>
                            break;
 802ae6c:	e010      	b.n	802ae90 <StartKeylessTask+0x100>
                            LOG_StrLn("NRF:Command = SEAT");
 802ae6e:	4834      	ldr	r0, [pc, #208]	; (802af40 <StartKeylessTask+0x1b0>)
 802ae70:	f013 fa80 	bl	803e374 <LOG_StrLn>
                            HAL_GPIO_WritePin(EXT_SOLENOID_PWR_GPIO_Port, EXT_SOLENOID_PWR_Pin, 1);
 802ae74:	2201      	movs	r2, #1
 802ae76:	2101      	movs	r1, #1
 802ae78:	4832      	ldr	r0, [pc, #200]	; (802af44 <StartKeylessTask+0x1b4>)
 802ae7a:	f005 f969 	bl	8030150 <HAL_GPIO_WritePin>
                            _DelayMS(100);
 802ae7e:	2064      	movs	r0, #100	; 0x64
 802ae80:	f014 fc1c 	bl	803f6bc <_DelayMS>
                            HAL_GPIO_WritePin(EXT_SOLENOID_PWR_GPIO_Port, EXT_SOLENOID_PWR_Pin, 0);
 802ae84:	2200      	movs	r2, #0
 802ae86:	2101      	movs	r1, #1
 802ae88:	482e      	ldr	r0, [pc, #184]	; (802af44 <StartKeylessTask+0x1b4>)
 802ae8a:	f005 f961 	bl	8030150 <HAL_GPIO_WritePin>
                            break;
 802ae8e:	bf00      	nop
                    }

                    // valid command indicator
                    osThreadFlagsSet(AudioTaskHandle, EVT_AUDIO_BEEP_START);
 802ae90:	4b2d      	ldr	r3, [pc, #180]	; (802af48 <StartKeylessTask+0x1b8>)
 802ae92:	681b      	ldr	r3, [r3, #0]
 802ae94:	2102      	movs	r1, #2
 802ae96:	4618      	mov	r0, r3
 802ae98:	f00c fc6a 	bl	8037770 <osThreadFlagsSet>
                    for (uint8_t i = 0; i < (command + 1); i++) {
 802ae9c:	2300      	movs	r3, #0
 802ae9e:	75bb      	strb	r3, [r7, #22]
 802aea0:	e00c      	b.n	802aebc <StartKeylessTask+0x12c>
                        _LedToggle();
 802aea2:	f014 fc2f 	bl	803f704 <_LedToggle>

                        _DelayMS((command + 1) * 50);
 802aea6:	7bfb      	ldrb	r3, [r7, #15]
 802aea8:	3301      	adds	r3, #1
 802aeaa:	2232      	movs	r2, #50	; 0x32
 802aeac:	fb02 f303 	mul.w	r3, r2, r3
 802aeb0:	4618      	mov	r0, r3
 802aeb2:	f014 fc03 	bl	803f6bc <_DelayMS>
                    for (uint8_t i = 0; i < (command + 1); i++) {
 802aeb6:	7dbb      	ldrb	r3, [r7, #22]
 802aeb8:	3301      	adds	r3, #1
 802aeba:	75bb      	strb	r3, [r7, #22]
 802aebc:	7dba      	ldrb	r2, [r7, #22]
 802aebe:	7bfb      	ldrb	r3, [r7, #15]
 802aec0:	3301      	adds	r3, #1
 802aec2:	429a      	cmp	r2, r3
 802aec4:	dbed      	blt.n	802aea2 <StartKeylessTask+0x112>
                    }
                    _LedWrite(0);
 802aec6:	2000      	movs	r0, #0
 802aec8:	f014 fc0a 	bl	803f6e0 <_LedWrite>
                    osThreadFlagsSet(AudioTaskHandle, EVT_AUDIO_BEEP_STOP);
 802aecc:	4b1e      	ldr	r3, [pc, #120]	; (802af48 <StartKeylessTask+0x1b8>)
 802aece:	681b      	ldr	r3, [r3, #0]
 802aed0:	2104      	movs	r1, #4
 802aed2:	4618      	mov	r0, r3
 802aed4:	f00c fc4c 	bl	8037770 <osThreadFlagsSet>
                }

                // reset pending flag
                osThreadFlagsClear(EVT_MASK);
 802aed8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 802aedc:	f00c fcaa 	bl	8037834 <osThreadFlagsClear>
            }

            // handle Pairing
            if (notif & EVT_KEYLESS_PAIRING) {
 802aee0:	693b      	ldr	r3, [r7, #16]
 802aee2:	469b      	mov	fp, r3
 802aee4:	f04f 0c00 	mov.w	ip, #0
 802aee8:	f04f 0102 	mov.w	r1, #2
 802aeec:	f04f 0200 	mov.w	r2, #0
 802aef0:	ea0b 0301 	and.w	r3, fp, r1
 802aef4:	ea0c 0402 	and.w	r4, ip, r2
 802aef8:	4323      	orrs	r3, r4
 802aefa:	d011      	beq.n	802af20 <StartKeylessTask+0x190>
                if (KLESS_Pairing()) {
 802aefc:	f7fd f88e 	bl	802801c <KLESS_Pairing>
 802af00:	4603      	mov	r3, r0
 802af02:	2b00      	cmp	r3, #0
 802af04:	d006      	beq.n	802af14 <StartKeylessTask+0x184>
                    osThreadFlagsSet(CommandTaskHandle, EVT_COMMAND_OK);
 802af06:	4b11      	ldr	r3, [pc, #68]	; (802af4c <StartKeylessTask+0x1bc>)
 802af08:	681b      	ldr	r3, [r3, #0]
 802af0a:	2102      	movs	r1, #2
 802af0c:	4618      	mov	r0, r3
 802af0e:	f00c fc2f 	bl	8037770 <osThreadFlagsSet>
 802af12:	e005      	b.n	802af20 <StartKeylessTask+0x190>
                } else {
                    osThreadFlagsSet(CommandTaskHandle, EVT_COMMAND_ERROR);
 802af14:	4b0d      	ldr	r3, [pc, #52]	; (802af4c <StartKeylessTask+0x1bc>)
 802af16:	681b      	ldr	r3, [r3, #0]
 802af18:	2101      	movs	r1, #1
 802af1a:	4618      	mov	r0, r3
 802af1c:	f00c fc28 	bl	8037770 <osThreadFlagsSet>
                }
            }
        }

        // update state
        KLESS_Refresh();
 802af20:	f7fd f90e 	bl	8028140 <KLESS_Refresh>
        notif = osThreadFlagsWait(EVT_MASK, osFlagsWaitAny, 100);
 802af24:	e745      	b.n	802adb2 <StartKeylessTask+0x22>
 802af26:	bf00      	nop
 802af28:	2000868c 	.word	0x2000868c
 802af2c:	08043930 	.word	0x08043930
 802af30:	20000228 	.word	0x20000228
 802af34:	08043944 	.word	0x08043944
 802af38:	20000004 	.word	0x20000004
 802af3c:	40020800 	.word	0x40020800
 802af40:	08043958 	.word	0x08043958
 802af44:	40020400 	.word	0x40020400
 802af48:	20008a50 	.word	0x20008a50
 802af4c:	20008894 	.word	0x20008894

0802af50 <StartFingerTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartFingerTask */
void StartFingerTask(void *argument)
{
 802af50:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 802af54:	b086      	sub	sp, #24
 802af56:	af00      	add	r7, sp, #0
 802af58:	6078      	str	r0, [r7, #4]
    uint32_t notif;
    uint8_t driver, p;
    int8_t id;

    // wait until ManagerTask done
    osEventFlagsWait(GlobalEventHandle, EVENT_READY, osFlagsNoClear, osWaitForever);
 802af5a:	4b57      	ldr	r3, [pc, #348]	; (802b0b8 <StartFingerTask+0x168>)
 802af5c:	6818      	ldr	r0, [r3, #0]
 802af5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802af62:	2202      	movs	r2, #2
 802af64:	2101      	movs	r1, #1
 802af66:	f00c fe61 	bl	8037c2c <osEventFlagsWait>

    // Initialisation
    Finger_Init();
 802af6a:	f7fb ffeb 	bl	8026f44 <Finger_Init>

    /* Infinite loop */
    for (;;) {
        // check if user put finger
        notif = osThreadFlagsWait(EVT_MASK, osFlagsWaitAny, 100);
 802af6e:	2264      	movs	r2, #100	; 0x64
 802af70:	2100      	movs	r1, #0
 802af72:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 802af76:	f00c fcad 	bl	80378d4 <osThreadFlagsWait>
 802af7a:	6138      	str	r0, [r7, #16]
        // proceed event
        if (_RTOS_ValidThreadFlag(notif)) {
 802af7c:	6938      	ldr	r0, [r7, #16]
 802af7e:	f014 fc01 	bl	803f784 <_RTOS_ValidThreadFlag>
 802af82:	4603      	mov	r3, r0
 802af84:	2b00      	cmp	r3, #0
 802af86:	d0f2      	beq.n	802af6e <StartFingerTask+0x1e>
            // Scan existing finger
            if (notif & EVT_FINGER_PLACED) {
 802af88:	693b      	ldr	r3, [r7, #16]
 802af8a:	469b      	mov	fp, r3
 802af8c:	f04f 0c00 	mov.w	ip, #0
 802af90:	f04f 0101 	mov.w	r1, #1
 802af94:	f04f 0200 	mov.w	r2, #0
 802af98:	ea0b 0301 	and.w	r3, fp, r1
 802af9c:	ea0c 0402 	and.w	r4, ip, r2
 802afa0:	4323      	orrs	r3, r4
 802afa2:	d021      	beq.n	802afe8 <StartFingerTask+0x98>
                id = Finger_AuthFast();
 802afa4:	f7fc f9f6 	bl	8027394 <Finger_AuthFast>
 802afa8:	4603      	mov	r3, r0
 802afaa:	75bb      	strb	r3, [r7, #22]
                // Finger is registered
                if (id >= 0) {
 802afac:	f997 3016 	ldrsb.w	r3, [r7, #22]
 802afb0:	2b00      	cmp	r3, #0
 802afb2:	db19      	blt.n	802afe8 <StartFingerTask+0x98>
                    // FIXME: use vehicle_state
                    VCU.d.state.knob = !VCU.d.state.knob;
 802afb4:	4b41      	ldr	r3, [pc, #260]	; (802b0bc <StartFingerTask+0x16c>)
 802afb6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 802afba:	2b00      	cmp	r3, #0
 802afbc:	bf0c      	ite	eq
 802afbe:	2301      	moveq	r3, #1
 802afc0:	2300      	movne	r3, #0
 802afc2:	b2db      	uxtb	r3, r3
 802afc4:	461a      	mov	r2, r3
 802afc6:	4b3d      	ldr	r3, [pc, #244]	; (802b0bc <StartFingerTask+0x16c>)
 802afc8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

                    // Finger Heart-Beat
                    if (!VCU.d.state.knob) {
 802afcc:	4b3b      	ldr	r3, [pc, #236]	; (802b0bc <StartFingerTask+0x16c>)
 802afce:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 802afd2:	2b00      	cmp	r3, #0
 802afd4:	d101      	bne.n	802afda <StartFingerTask+0x8a>
                        id = DRIVER_ID_NONE;
 802afd6:	23ff      	movs	r3, #255	; 0xff
 802afd8:	75bb      	strb	r3, [r7, #22]
                    }
                    VCU.d.driver_id = id;
 802afda:	7dba      	ldrb	r2, [r7, #22]
 802afdc:	4b37      	ldr	r3, [pc, #220]	; (802b0bc <StartFingerTask+0x16c>)
 802afde:	711a      	strb	r2, [r3, #4]

                    // Handle bounce effect
                    _DelayMS(5000);
 802afe0:	f241 3088 	movw	r0, #5000	; 0x1388
 802afe4:	f014 fb6a 	bl	803f6bc <_DelayMS>
                }
            }

            if (notif & (EVT_FINGER_ADD | EVT_FINGER_DEL | EVT_FINGER_RST)) {
 802afe8:	693b      	ldr	r3, [r7, #16]
 802afea:	469b      	mov	fp, r3
 802afec:	f04f 0c00 	mov.w	ip, #0
 802aff0:	f04f 010e 	mov.w	r1, #14
 802aff4:	f04f 0200 	mov.w	r2, #0
 802aff8:	ea0b 0301 	and.w	r3, fp, r1
 802affc:	ea0c 0402 	and.w	r4, ip, r2
 802b000:	4323      	orrs	r3, r4
 802b002:	d053      	beq.n	802b0ac <StartFingerTask+0x15c>
                // get driver value
                status = osMessageQueueGet(DriverQueueHandle, &driver, NULL, 0U);
 802b004:	4b2e      	ldr	r3, [pc, #184]	; (802b0c0 <StartFingerTask+0x170>)
 802b006:	6818      	ldr	r0, [r3, #0]
 802b008:	f107 010b 	add.w	r1, r7, #11
 802b00c:	2300      	movs	r3, #0
 802b00e:	2200      	movs	r2, #0
 802b010:	f00d f8c4 	bl	803819c <osMessageQueueGet>
 802b014:	60f8      	str	r0, [r7, #12]

                if (status == osOK) {
 802b016:	68fb      	ldr	r3, [r7, #12]
 802b018:	2b00      	cmp	r3, #0
 802b01a:	d147      	bne.n	802b0ac <StartFingerTask+0x15c>
                    if (notif & EVT_FINGER_ADD) {
 802b01c:	693b      	ldr	r3, [r7, #16]
 802b01e:	469b      	mov	fp, r3
 802b020:	f04f 0c00 	mov.w	ip, #0
 802b024:	f04f 0102 	mov.w	r1, #2
 802b028:	f04f 0200 	mov.w	r2, #0
 802b02c:	ea0b 0301 	and.w	r3, fp, r1
 802b030:	ea0c 0402 	and.w	r4, ip, r2
 802b034:	4323      	orrs	r3, r4
 802b036:	d006      	beq.n	802b046 <StartFingerTask+0xf6>
                        // Add new finger
                        p = Finger_Enroll(driver);
 802b038:	7afb      	ldrb	r3, [r7, #11]
 802b03a:	4618      	mov	r0, r3
 802b03c:	f7fb ffb2 	bl	8026fa4 <Finger_Enroll>
 802b040:	4603      	mov	r3, r0
 802b042:	75fb      	strb	r3, [r7, #23]
 802b044:	e026      	b.n	802b094 <StartFingerTask+0x144>
                    } else if (notif & EVT_FINGER_DEL) {
 802b046:	693b      	ldr	r3, [r7, #16]
 802b048:	469b      	mov	fp, r3
 802b04a:	f04f 0c00 	mov.w	ip, #0
 802b04e:	f04f 0104 	mov.w	r1, #4
 802b052:	f04f 0200 	mov.w	r2, #0
 802b056:	ea0b 0301 	and.w	r3, fp, r1
 802b05a:	ea0c 0402 	and.w	r4, ip, r2
 802b05e:	4323      	orrs	r3, r4
 802b060:	d006      	beq.n	802b070 <StartFingerTask+0x120>
                        // Delete existing finger
                        p = Finger_DeleteID(driver);
 802b062:	7afb      	ldrb	r3, [r7, #11]
 802b064:	4618      	mov	r0, r3
 802b066:	f7fc f931 	bl	80272cc <Finger_DeleteID>
 802b06a:	4603      	mov	r3, r0
 802b06c:	75fb      	strb	r3, [r7, #23]
 802b06e:	e011      	b.n	802b094 <StartFingerTask+0x144>
                    } else if (notif & EVT_FINGER_RST) {
 802b070:	693b      	ldr	r3, [r7, #16]
 802b072:	469b      	mov	fp, r3
 802b074:	f04f 0c00 	mov.w	ip, #0
 802b078:	f04f 0108 	mov.w	r1, #8
 802b07c:	f04f 0200 	mov.w	r2, #0
 802b080:	ea0b 0301 	and.w	r3, fp, r1
 802b084:	ea0c 0402 	and.w	r4, ip, r2
 802b088:	4323      	orrs	r3, r4
 802b08a:	d003      	beq.n	802b094 <StartFingerTask+0x144>
                        // Reset all finger database
                        p = Finger_EmptyDatabase();
 802b08c:	f7fc f96c 	bl	8027368 <Finger_EmptyDatabase>
 802b090:	4603      	mov	r3, r0
 802b092:	75fb      	strb	r3, [r7, #23]
                    }

                    // handle response
                    osThreadFlagsSet(CommandTaskHandle, p ? EVT_COMMAND_OK : EVT_COMMAND_ERROR);
 802b094:	4b0b      	ldr	r3, [pc, #44]	; (802b0c4 <StartFingerTask+0x174>)
 802b096:	681a      	ldr	r2, [r3, #0]
 802b098:	7dfb      	ldrb	r3, [r7, #23]
 802b09a:	2b00      	cmp	r3, #0
 802b09c:	d001      	beq.n	802b0a2 <StartFingerTask+0x152>
 802b09e:	2302      	movs	r3, #2
 802b0a0:	e000      	b.n	802b0a4 <StartFingerTask+0x154>
 802b0a2:	2301      	movs	r3, #1
 802b0a4:	4619      	mov	r1, r3
 802b0a6:	4610      	mov	r0, r2
 802b0a8:	f00c fb62 	bl	8037770 <osThreadFlagsSet>
                }
            }

            // reset pending flag
            osThreadFlagsClear(EVT_MASK);
 802b0ac:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 802b0b0:	f00c fbc0 	bl	8037834 <osThreadFlagsClear>
        notif = osThreadFlagsWait(EVT_MASK, osFlagsWaitAny, 100);
 802b0b4:	e75b      	b.n	802af6e <StartFingerTask+0x1e>
 802b0b6:	bf00      	nop
 802b0b8:	2000868c 	.word	0x2000868c
 802b0bc:	20000228 	.word	0x20000228
 802b0c0:	200087a8 	.word	0x200087a8
 802b0c4:	20008894 	.word	0x20008894

0802b0c8 <StartAudioTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartAudioTask */
void StartAudioTask(void *argument)
{
 802b0c8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 802b0cc:	b084      	sub	sp, #16
 802b0ce:	af00      	add	r7, sp, #0
 802b0d0:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN StartAudioTask */
    uint32_t notif;

    // wait until ManagerTask done
    osEventFlagsWait(GlobalEventHandle, EVENT_READY, osFlagsNoClear, osWaitForever);
 802b0d2:	4b3e      	ldr	r3, [pc, #248]	; (802b1cc <StartAudioTask+0x104>)
 802b0d4:	6818      	ldr	r0, [r3, #0]
 802b0d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802b0da:	2202      	movs	r2, #2
 802b0dc:	2101      	movs	r1, #1
 802b0de:	f00c fda5 	bl	8037c2c <osEventFlagsWait>

    /* Initialize Wave player (Codec, DMA, I2C) */
    AUDIO_Init();
 802b0e2:	f7fb fcc3 	bl	8026a6c <AUDIO_Init>
    // Play wave loop forever, hand-over to DMA, so CPU is free
    AUDIO_Play();
 802b0e6:	f7fb fcf9 	bl	8026adc <AUDIO_Play>

    /* Infinite loop */
    for (;;) {
        // wait with timeout
        notif = osThreadFlagsWait(EVT_MASK, osFlagsWaitAny, 100);
 802b0ea:	2264      	movs	r2, #100	; 0x64
 802b0ec:	2100      	movs	r1, #0
 802b0ee:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 802b0f2:	f00c fbef 	bl	80378d4 <osThreadFlagsWait>
 802b0f6:	60f8      	str	r0, [r7, #12]
        if (_RTOS_ValidThreadFlag(notif)) {
 802b0f8:	68f8      	ldr	r0, [r7, #12]
 802b0fa:	f014 fb43 	bl	803f784 <_RTOS_ValidThreadFlag>
 802b0fe:	4603      	mov	r3, r0
 802b100:	2b00      	cmp	r3, #0
 802b102:	d05c      	beq.n	802b1be <StartAudioTask+0xf6>
            // Beep command
            if (notif & EVT_AUDIO_BEEP) {
 802b104:	68fb      	ldr	r3, [r7, #12]
 802b106:	469b      	mov	fp, r3
 802b108:	f04f 0c00 	mov.w	ip, #0
 802b10c:	f04f 0101 	mov.w	r1, #1
 802b110:	f04f 0200 	mov.w	r2, #0
 802b114:	ea0b 0301 	and.w	r3, fp, r1
 802b118:	ea0c 0402 	and.w	r4, ip, r2
 802b11c:	4323      	orrs	r3, r4
 802b11e:	d00a      	beq.n	802b136 <StartAudioTask+0x6e>
                // Beep
                AUDIO_BeepPlay(BEEP_FREQ_2000_HZ, 250);
 802b120:	21fa      	movs	r1, #250	; 0xfa
 802b122:	200e      	movs	r0, #14
 802b124:	f7fb fd00 	bl	8026b28 <AUDIO_BeepPlay>
                _DelayMS(250);
 802b128:	20fa      	movs	r0, #250	; 0xfa
 802b12a:	f014 fac7 	bl	803f6bc <_DelayMS>
                AUDIO_BeepPlay(BEEP_FREQ_2000_HZ, 250);
 802b12e:	21fa      	movs	r1, #250	; 0xfa
 802b130:	200e      	movs	r0, #14
 802b132:	f7fb fcf9 	bl	8026b28 <AUDIO_BeepPlay>
            }
            // Long-Beep Command
            if (notif & EVT_AUDIO_BEEP_START) {
 802b136:	68fb      	ldr	r3, [r7, #12]
 802b138:	469b      	mov	fp, r3
 802b13a:	f04f 0c00 	mov.w	ip, #0
 802b13e:	f04f 0102 	mov.w	r1, #2
 802b142:	f04f 0200 	mov.w	r2, #0
 802b146:	ea0b 0301 	and.w	r3, fp, r1
 802b14a:	ea0c 0402 	and.w	r4, ip, r2
 802b14e:	4323      	orrs	r3, r4
 802b150:	d003      	beq.n	802b15a <StartAudioTask+0x92>
                AUDIO_BeepPlay(BEEP_FREQ_2000_HZ, 0);
 802b152:	2100      	movs	r1, #0
 802b154:	200e      	movs	r0, #14
 802b156:	f7fb fce7 	bl	8026b28 <AUDIO_BeepPlay>
            }
            if (notif & EVT_AUDIO_BEEP_STOP) {
 802b15a:	68fb      	ldr	r3, [r7, #12]
 802b15c:	469b      	mov	fp, r3
 802b15e:	f04f 0c00 	mov.w	ip, #0
 802b162:	f04f 0104 	mov.w	r1, #4
 802b166:	f04f 0200 	mov.w	r2, #0
 802b16a:	ea0b 0301 	and.w	r3, fp, r1
 802b16e:	ea0c 0402 	and.w	r4, ip, r2
 802b172:	4323      	orrs	r3, r4
 802b174:	d001      	beq.n	802b17a <StartAudioTask+0xb2>
                AUDIO_BeepStop();
 802b176:	f7fb fcfe 	bl	8026b76 <AUDIO_BeepStop>
            }
            // Mute command
            if (notif & EVT_AUDIO_MUTE_ON) {
 802b17a:	68fb      	ldr	r3, [r7, #12]
 802b17c:	469b      	mov	fp, r3
 802b17e:	f04f 0c00 	mov.w	ip, #0
 802b182:	f04f 0108 	mov.w	r1, #8
 802b186:	f04f 0200 	mov.w	r2, #0
 802b18a:	ea0b 0301 	and.w	r3, fp, r1
 802b18e:	ea0c 0402 	and.w	r4, ip, r2
 802b192:	4323      	orrs	r3, r4
 802b194:	d002      	beq.n	802b19c <StartAudioTask+0xd4>
                AUDIO_OUT_SetMute(AUDIO_MUTE_ON);
 802b196:	2001      	movs	r0, #1
 802b198:	f7fb fd22 	bl	8026be0 <AUDIO_OUT_SetMute>
            }
            if (notif & EVT_AUDIO_MUTE_OFF) {
 802b19c:	68fb      	ldr	r3, [r7, #12]
 802b19e:	469b      	mov	fp, r3
 802b1a0:	f04f 0c00 	mov.w	ip, #0
 802b1a4:	f04f 0110 	mov.w	r1, #16
 802b1a8:	f04f 0200 	mov.w	r2, #0
 802b1ac:	ea0b 0301 	and.w	r3, fp, r1
 802b1b0:	ea0c 0402 	and.w	r4, ip, r2
 802b1b4:	4323      	orrs	r3, r4
 802b1b6:	d002      	beq.n	802b1be <StartAudioTask+0xf6>
                AUDIO_OUT_SetMute(AUDIO_MUTE_OFF);
 802b1b8:	2000      	movs	r0, #0
 802b1ba:	f7fb fd11 	bl	8026be0 <AUDIO_OUT_SetMute>
            }
        }

        // update volume
        AUDIO_OUT_SetVolume(VCU.d.volume);
 802b1be:	4b04      	ldr	r3, [pc, #16]	; (802b1d0 <StartAudioTask+0x108>)
 802b1c0:	7a1b      	ldrb	r3, [r3, #8]
 802b1c2:	4618      	mov	r0, r3
 802b1c4:	f7fb fcf8 	bl	8026bb8 <AUDIO_OUT_SetVolume>
        notif = osThreadFlagsWait(EVT_MASK, osFlagsWaitAny, 100);
 802b1c8:	e78f      	b.n	802b0ea <StartAudioTask+0x22>
 802b1ca:	bf00      	nop
 802b1cc:	2000868c 	.word	0x2000868c
 802b1d0:	20000228 	.word	0x20000228

0802b1d4 <StartSwitchTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSwitchTask */
void StartSwitchTask(void *argument)
{
 802b1d4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 802b1d8:	b084      	sub	sp, #16
 802b1da:	af00      	add	r7, sp, #0
 802b1dc:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN StartSwitchTask */
    uint32_t notif;

    // wait until ManagerTask done
    osEventFlagsWait(GlobalEventHandle, EVENT_READY, osFlagsNoClear, osWaitForever);
 802b1de:	4b37      	ldr	r3, [pc, #220]	; (802b2bc <StartSwitchTask+0xe8>)
 802b1e0:	6818      	ldr	r0, [r3, #0]
 802b1e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802b1e6:	2202      	movs	r2, #2
 802b1e8:	2101      	movs	r1, #1
 802b1ea:	f00c fd1f 	bl	8037c2c <osEventFlagsWait>

    // Initialise
    HBAR_ReadStates();
 802b1ee:	f7fc fbbf 	bl	8027970 <HBAR_ReadStates>
    // Check GPIOs state
    VCU.CheckMainPower();
 802b1f2:	4b33      	ldr	r3, [pc, #204]	; (802b2c0 <StartSwitchTask+0xec>)
 802b1f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802b1f6:	4798      	blx	r3
    VCU.d.state.knob = HAL_GPIO_ReadPin(EXT_KNOB_IRQ_GPIO_Port, EXT_KNOB_IRQ_Pin);
 802b1f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 802b1fc:	4831      	ldr	r0, [pc, #196]	; (802b2c4 <StartSwitchTask+0xf0>)
 802b1fe:	f004 ff8f 	bl	8030120 <HAL_GPIO_ReadPin>
 802b202:	4603      	mov	r3, r0
 802b204:	461a      	mov	r2, r3
 802b206:	4b2e      	ldr	r3, [pc, #184]	; (802b2c0 <StartSwitchTask+0xec>)
 802b208:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Infinite loop */
    for (;;) {
        // wait forever
        notif = osThreadFlagsWait(EVT_MASK, osFlagsWaitAny | osFlagsNoClear, 500);
 802b20c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 802b210:	2102      	movs	r1, #2
 802b212:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 802b216:	f00c fb5d 	bl	80378d4 <osThreadFlagsWait>
 802b21a:	60f8      	str	r0, [r7, #12]
        if (_RTOS_ValidThreadFlag(notif)) {
 802b21c:	68f8      	ldr	r0, [r7, #12]
 802b21e:	f014 fab1 	bl	803f784 <_RTOS_ValidThreadFlag>
 802b222:	4603      	mov	r3, r0
 802b224:	2b00      	cmp	r3, #0
 802b226:	d045      	beq.n	802b2b4 <StartSwitchTask+0xe0>
            // handle bounce effect
            _DelayMS(50);
 802b228:	2032      	movs	r0, #50	; 0x32
 802b22a:	f014 fa47 	bl	803f6bc <_DelayMS>
            osThreadFlagsClear(EVT_MASK);
 802b22e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 802b232:	f00c faff 	bl	8037834 <osThreadFlagsClear>

            // Handle switch EXTI interrupt
            if (notif & EVT_SWITCH_TRIGGERED) {
 802b236:	68fb      	ldr	r3, [r7, #12]
 802b238:	469b      	mov	fp, r3
 802b23a:	f04f 0c00 	mov.w	ip, #0
 802b23e:	f04f 0101 	mov.w	r1, #1
 802b242:	f04f 0200 	mov.w	r2, #0
 802b246:	ea0b 0301 	and.w	r3, fp, r1
 802b24a:	ea0c 0402 	and.w	r4, ip, r2
 802b24e:	4323      	orrs	r3, r4
 802b250:	d018      	beq.n	802b284 <StartSwitchTask+0xb0>
                // Read all (to handle multiple switch change at the same time)
                HBAR_ReadStates();
 802b252:	f7fc fb8d 	bl	8027970 <HBAR_ReadStates>

                // handle select & set: timer
                HBAR_TimerSelectSet();
 802b256:	f7fc fbf1 	bl	8027a3c <HBAR_TimerSelectSet>

                // Only handle Select & Set when in non-reverse
                if (!SW.list[SW_K_REVERSE].state) {
 802b25a:	4b1b      	ldr	r3, [pc, #108]	; (802b2c8 <StartSwitchTask+0xf4>)
 802b25c:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 802b260:	2b00      	cmp	r3, #0
 802b262:	d10f      	bne.n	802b284 <StartSwitchTask+0xb0>
                    // restore previous Mode
                    HBAR_RestoreMode();
 802b264:	f7fc fbb0 	bl	80279c8 <HBAR_RestoreMode>

                    // handle Select & Set
                    if (SW.list[SW_K_SELECT].state) {
 802b268:	4b17      	ldr	r3, [pc, #92]	; (802b2c8 <StartSwitchTask+0xf4>)
 802b26a:	7f1b      	ldrb	r3, [r3, #28]
 802b26c:	2b00      	cmp	r3, #0
 802b26e:	d002      	beq.n	802b276 <StartSwitchTask+0xa2>
                        // handle select key
                        HBAR_RunSelect();
 802b270:	f7fc fc64 	bl	8027b3c <HBAR_RunSelect>
 802b274:	e006      	b.n	802b284 <StartSwitchTask+0xb0>
                    } else if (SW.list[SW_K_SET].state) {
 802b276:	4b14      	ldr	r3, [pc, #80]	; (802b2c8 <StartSwitchTask+0xf4>)
 802b278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802b27c:	2b00      	cmp	r3, #0
 802b27e:	d001      	beq.n	802b284 <StartSwitchTask+0xb0>
                        // handle set key
                        HBAR_RunSet();
 802b280:	f7fc fc80 	bl	8027b84 <HBAR_RunSet>
            if (notif & EVT_SWITCH_STARTER_IRQ) {
                // check KNOB, KickStand, Keyless, Fingerprint

            }
            // KNOB IRQ
            if (notif & EVT_SWITCH_KNOB_IRQ) {
 802b284:	68fb      	ldr	r3, [r7, #12]
 802b286:	469b      	mov	fp, r3
 802b288:	f04f 0c00 	mov.w	ip, #0
 802b28c:	f04f 0104 	mov.w	r1, #4
 802b290:	f04f 0200 	mov.w	r2, #0
 802b294:	ea0b 0301 	and.w	r3, fp, r1
 802b298:	ea0c 0402 	and.w	r4, ip, r2
 802b29c:	4323      	orrs	r3, r4
 802b29e:	d009      	beq.n	802b2b4 <StartSwitchTask+0xe0>
                // get current state
                VCU.d.state.knob = HAL_GPIO_ReadPin(EXT_KNOB_IRQ_GPIO_Port, EXT_KNOB_IRQ_Pin);
 802b2a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 802b2a4:	4807      	ldr	r0, [pc, #28]	; (802b2c4 <StartSwitchTask+0xf0>)
 802b2a6:	f004 ff3b 	bl	8030120 <HAL_GPIO_ReadPin>
 802b2aa:	4603      	mov	r3, r0
 802b2ac:	461a      	mov	r2, r3
 802b2ae:	4b04      	ldr	r3, [pc, #16]	; (802b2c0 <StartSwitchTask+0xec>)
 802b2b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            }
        }

        // Check REG_5V power state
        VCU.CheckMainPower();
 802b2b4:	4b02      	ldr	r3, [pc, #8]	; (802b2c0 <StartSwitchTask+0xec>)
 802b2b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802b2b8:	4798      	blx	r3
        notif = osThreadFlagsWait(EVT_MASK, osFlagsWaitAny | osFlagsNoClear, 500);
 802b2ba:	e7a7      	b.n	802b20c <StartSwitchTask+0x38>
 802b2bc:	2000868c 	.word	0x2000868c
 802b2c0:	20000228 	.word	0x20000228
 802b2c4:	40021000 	.word	0x40021000
 802b2c8:	20000004 	.word	0x20000004

0802b2cc <StartCanRxTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCanRxTask */
void StartCanRxTask(void *argument)
{
 802b2cc:	b580      	push	{r7, lr}
 802b2ce:	b084      	sub	sp, #16
 802b2d0:	af00      	add	r7, sp, #0
 802b2d2:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN StartCanRxTask */
    uint32_t notif;

    // wait until ManagerTask done
    osEventFlagsWait(GlobalEventHandle, EVENT_READY, osFlagsNoClear, osWaitForever);
 802b2d4:	4b20      	ldr	r3, [pc, #128]	; (802b358 <StartCanRxTask+0x8c>)
 802b2d6:	6818      	ldr	r0, [r3, #0]
 802b2d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802b2dc:	2202      	movs	r2, #2
 802b2de:	2101      	movs	r1, #1
 802b2e0:	f00c fca4 	bl	8037c2c <osEventFlagsWait>

    /* Infinite loop */
    for (;;) {
        // wait forever
        notif = osThreadFlagsWait(EVT_CAN_RX_IT, osFlagsWaitAny, osWaitForever);
 802b2e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802b2e8:	2100      	movs	r1, #0
 802b2ea:	2001      	movs	r0, #1
 802b2ec:	f00c faf2 	bl	80378d4 <osThreadFlagsWait>
 802b2f0:	60f8      	str	r0, [r7, #12]
        if (_RTOS_ValidThreadFlag(notif)) {
 802b2f2:	68f8      	ldr	r0, [r7, #12]
 802b2f4:	f014 fa46 	bl	803f784 <_RTOS_ValidThreadFlag>
 802b2f8:	4603      	mov	r3, r0
 802b2fa:	2b00      	cmp	r3, #0
 802b2fc:	d029      	beq.n	802b352 <StartCanRxTask+0x86>
            //			CANBUS_RxDebugger();

            // handle STD message
            switch (CANBUS_ReadID()) {
 802b2fe:	f7f8 fc0f 	bl	8023b20 <CANBUS_ReadID>
 802b302:	4603      	mov	r3, r0
 802b304:	f5b3 6ff8 	cmp.w	r3, #1984	; 0x7c0
 802b308:	d013      	beq.n	802b332 <StartCanRxTask+0x66>
 802b30a:	f5b3 6ff8 	cmp.w	r3, #1984	; 0x7c0
 802b30e:	d804      	bhi.n	802b31a <StartCanRxTask+0x4e>
 802b310:	2bb0      	cmp	r3, #176	; 0xb0
 802b312:	d016      	beq.n	802b342 <StartCanRxTask+0x76>
 802b314:	2bb1      	cmp	r3, #177	; 0xb1
 802b316:	d018      	beq.n	802b34a <StartCanRxTask+0x7e>
                case CAND_BMS_PARAM_2 :
                    BMS.can.r.Param2();
                    break;
                default:

                    break;
 802b318:	e01c      	b.n	802b354 <StartCanRxTask+0x88>
            switch (CANBUS_ReadID()) {
 802b31a:	f240 72c1 	movw	r2, #1985	; 0x7c1
 802b31e:	4293      	cmp	r3, r2
 802b320:	d00b      	beq.n	802b33a <StartCanRxTask+0x6e>
 802b322:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 802b326:	d000      	beq.n	802b32a <StartCanRxTask+0x5e>
                    break;
 802b328:	e014      	b.n	802b354 <StartCanRxTask+0x88>
                    HMI2.can.r.State();
 802b32a:	4b0c      	ldr	r3, [pc, #48]	; (802b35c <StartCanRxTask+0x90>)
 802b32c:	689b      	ldr	r3, [r3, #8]
 802b32e:	4798      	blx	r3
                    break;
 802b330:	e010      	b.n	802b354 <StartCanRxTask+0x88>
                    HMI1.can.r.LeftState();
 802b332:	4b0b      	ldr	r3, [pc, #44]	; (802b360 <StartCanRxTask+0x94>)
 802b334:	699b      	ldr	r3, [r3, #24]
 802b336:	4798      	blx	r3
                    break;
 802b338:	e00c      	b.n	802b354 <StartCanRxTask+0x88>
                    HMI1.can.r.RightState();
 802b33a:	4b09      	ldr	r3, [pc, #36]	; (802b360 <StartCanRxTask+0x94>)
 802b33c:	69db      	ldr	r3, [r3, #28]
 802b33e:	4798      	blx	r3
                    break;
 802b340:	e008      	b.n	802b354 <StartCanRxTask+0x88>
                    BMS.can.r.Param1();
 802b342:	4b08      	ldr	r3, [pc, #32]	; (802b364 <StartCanRxTask+0x98>)
 802b344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802b346:	4798      	blx	r3
                    break;
 802b348:	e004      	b.n	802b354 <StartCanRxTask+0x88>
                    BMS.can.r.Param2();
 802b34a:	4b06      	ldr	r3, [pc, #24]	; (802b364 <StartCanRxTask+0x98>)
 802b34c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b34e:	4798      	blx	r3
                    break;
 802b350:	e000      	b.n	802b354 <StartCanRxTask+0x88>
            }
        }
 802b352:	bf00      	nop
        notif = osThreadFlagsWait(EVT_CAN_RX_IT, osFlagsWaitAny, osWaitForever);
 802b354:	e7c6      	b.n	802b2e4 <StartCanRxTask+0x18>
 802b356:	bf00      	nop
 802b358:	2000868c 	.word	0x2000868c
 802b35c:	20000210 	.word	0x20000210
 802b360:	200001e4 	.word	0x200001e4
 802b364:	20000178 	.word	0x20000178

0802b368 <StartCanTxTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCanTxTask */
void StartCanTxTask(void *argument)
{
 802b368:	b580      	push	{r7, lr}
 802b36a:	b086      	sub	sp, #24
 802b36c:	af00      	add	r7, sp, #0
 802b36e:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN StartCanTxTask */
    TickType_t lastWake, last500ms, last1000ms;

    // wait until ManagerTask done
    osEventFlagsWait(GlobalEventHandle, EVENT_READY, osFlagsNoClear, osWaitForever);
 802b370:	4b2b      	ldr	r3, [pc, #172]	; (802b420 <StartCanTxTask+0xb8>)
 802b372:	6818      	ldr	r0, [r3, #0]
 802b374:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802b378:	2202      	movs	r2, #2
 802b37a:	2101      	movs	r1, #1
 802b37c:	f00c fc56 	bl	8037c2c <osEventFlagsWait>

    /* Infinite loop */
    last500ms = _GetTickMS();
 802b380:	f014 f9a7 	bl	803f6d2 <_GetTickMS>
 802b384:	6178      	str	r0, [r7, #20]
    last1000ms = _GetTickMS();
 802b386:	f014 f9a4 	bl	803f6d2 <_GetTickMS>
 802b38a:	6138      	str	r0, [r7, #16]
    for (;;) {
        lastWake = _GetTickMS();
 802b38c:	f014 f9a1 	bl	803f6d2 <_GetTickMS>
 802b390:	60f8      	str	r0, [r7, #12]

        // Send CAN data
        // send every 20m
        VCU.can.t.SwitchModeControl(&SW);
 802b392:	4b24      	ldr	r3, [pc, #144]	; (802b424 <StartCanTxTask+0xbc>)
 802b394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802b396:	4824      	ldr	r0, [pc, #144]	; (802b428 <StartCanTxTask+0xc0>)
 802b398:	4798      	blx	r3

        // send every 500ms
        if (lastWake - last500ms > 500) {
 802b39a:	68fa      	ldr	r2, [r7, #12]
 802b39c:	697b      	ldr	r3, [r7, #20]
 802b39e:	1ad3      	subs	r3, r2, r3
 802b3a0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 802b3a4:	d906      	bls.n	802b3b4 <StartCanTxTask+0x4c>
            last500ms = _GetTickMS();
 802b3a6:	f014 f994 	bl	803f6d2 <_GetTickMS>
 802b3aa:	6178      	str	r0, [r7, #20]

            VCU.can.t.MixedData(&(SW.runner));
 802b3ac:	4b1d      	ldr	r3, [pc, #116]	; (802b424 <StartCanTxTask+0xbc>)
 802b3ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802b3b0:	481e      	ldr	r0, [pc, #120]	; (802b42c <StartCanTxTask+0xc4>)
 802b3b2:	4798      	blx	r3
        }
        // send every 1000ms
        if (lastWake - last1000ms > 1000) {
 802b3b4:	68fa      	ldr	r2, [r7, #12]
 802b3b6:	693b      	ldr	r3, [r7, #16]
 802b3b8:	1ad3      	subs	r3, r2, r3
 802b3ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802b3be:	d90a      	bls.n	802b3d6 <StartCanTxTask+0x6e>
            last1000ms = _GetTickMS();
 802b3c0:	f014 f987 	bl	803f6d2 <_GetTickMS>
 802b3c4:	6138      	str	r0, [r7, #16]

            VCU.can.t.Datetime(&(VCU.d.rtc.timestamp));
 802b3c6:	4b17      	ldr	r3, [pc, #92]	; (802b424 <StartCanTxTask+0xbc>)
 802b3c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802b3ca:	4819      	ldr	r0, [pc, #100]	; (802b430 <StartCanTxTask+0xc8>)
 802b3cc:	4798      	blx	r3
            VCU.can.t.SubTripData(&(SW.runner.mode.sub.trip[0]));
 802b3ce:	4b15      	ldr	r3, [pc, #84]	; (802b424 <StartCanTxTask+0xbc>)
 802b3d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802b3d2:	4818      	ldr	r0, [pc, #96]	; (802b434 <StartCanTxTask+0xcc>)
 802b3d4:	4798      	blx	r3
        }

        // Handle Knob Changes
        BMS.PowerOverCan(VCU.d.state.knob);
 802b3d6:	4b18      	ldr	r3, [pc, #96]	; (802b438 <StartCanTxTask+0xd0>)
 802b3d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802b3da:	4a12      	ldr	r2, [pc, #72]	; (802b424 <StartCanTxTask+0xbc>)
 802b3dc:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 802b3e0:	4610      	mov	r0, r2
 802b3e2:	4798      	blx	r3
        HMI1.Power(VCU.d.state.knob);
 802b3e4:	4b15      	ldr	r3, [pc, #84]	; (802b43c <StartCanTxTask+0xd4>)
 802b3e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802b3e8:	4a0e      	ldr	r2, [pc, #56]	; (802b424 <StartCanTxTask+0xbc>)
 802b3ea:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 802b3ee:	4610      	mov	r0, r2
 802b3f0:	4798      	blx	r3
        HMI2.PowerOverCan(VCU.d.state.knob);
 802b3f2:	4b13      	ldr	r3, [pc, #76]	; (802b440 <StartCanTxTask+0xd8>)
 802b3f4:	695b      	ldr	r3, [r3, #20]
 802b3f6:	4a0b      	ldr	r2, [pc, #44]	; (802b424 <StartCanTxTask+0xbc>)
 802b3f8:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 802b3fc:	4610      	mov	r0, r2
 802b3fe:	4798      	blx	r3

        // Refresh state
        BMS.RefreshIndex();
 802b400:	4b0d      	ldr	r3, [pc, #52]	; (802b438 <StartCanTxTask+0xd0>)
 802b402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802b404:	4798      	blx	r3
        HMI1.RefreshIndex();
 802b406:	4b0d      	ldr	r3, [pc, #52]	; (802b43c <StartCanTxTask+0xd4>)
 802b408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b40a:	4798      	blx	r3
        HMI2.Refresh();
 802b40c:	4b0c      	ldr	r3, [pc, #48]	; (802b440 <StartCanTxTask+0xd8>)
 802b40e:	691b      	ldr	r3, [r3, #16]
 802b410:	4798      	blx	r3

        // Periodic interval
        osDelayUntil(lastWake + 20);
 802b412:	68fb      	ldr	r3, [r7, #12]
 802b414:	3314      	adds	r3, #20
 802b416:	4618      	mov	r0, r3
 802b418:	f00c fb1e 	bl	8037a58 <osDelayUntil>
        lastWake = _GetTickMS();
 802b41c:	e7b6      	b.n	802b38c <StartCanTxTask+0x24>
 802b41e:	bf00      	nop
 802b420:	2000868c 	.word	0x2000868c
 802b424:	20000228 	.word	0x20000228
 802b428:	20000004 	.word	0x20000004
 802b42c:	200000f4 	.word	0x200000f4
 802b430:	20000238 	.word	0x20000238
 802b434:	20000104 	.word	0x20000104
 802b438:	20000178 	.word	0x20000178
 802b43c:	200001e4 	.word	0x200001e4
 802b440:	20000210 	.word	0x20000210

0802b444 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 802b444:	b580      	push	{r7, lr}
 802b446:	b082      	sub	sp, #8
 802b448:	af00      	add	r7, sp, #0
 802b44a:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN Callback 0 */

    /* USER CODE END Callback 0 */
    if (htim->Instance == TIM1) {
 802b44c:	687b      	ldr	r3, [r7, #4]
 802b44e:	681b      	ldr	r3, [r3, #0]
 802b450:	4a04      	ldr	r2, [pc, #16]	; (802b464 <HAL_TIM_PeriodElapsedCallback+0x20>)
 802b452:	4293      	cmp	r3, r2
 802b454:	d101      	bne.n	802b45a <HAL_TIM_PeriodElapsedCallback+0x16>
        HAL_IncTick();
 802b456:	f000 ff75 	bl	802c344 <HAL_IncTick>
    }
    /* USER CODE BEGIN Callback 1 */

    /* USER CODE END Callback 1 */
}
 802b45a:	bf00      	nop
 802b45c:	3708      	adds	r7, #8
 802b45e:	46bd      	mov	sp, r7
 802b460:	bd80      	pop	{r7, pc}
 802b462:	bf00      	nop
 802b464:	40010000 	.word	0x40010000

0802b468 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 802b468:	b580      	push	{r7, lr}
 802b46a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    _Error("Error Handler fired.");
 802b46c:	4802      	ldr	r0, [pc, #8]	; (802b478 <Error_Handler+0x10>)
 802b46e:	f014 f955 	bl	803f71c <_Error>
    /* USER CODE END Error_Handler_Debug */
}
 802b472:	bf00      	nop
 802b474:	bd80      	pop	{r7, pc}
 802b476:	bf00      	nop
 802b478:	0804396c 	.word	0x0804396c

0802b47c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 802b47c:	b580      	push	{r7, lr}
 802b47e:	b082      	sub	sp, #8
 802b480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 802b482:	2300      	movs	r3, #0
 802b484:	607b      	str	r3, [r7, #4]
 802b486:	4b12      	ldr	r3, [pc, #72]	; (802b4d0 <HAL_MspInit+0x54>)
 802b488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802b48a:	4a11      	ldr	r2, [pc, #68]	; (802b4d0 <HAL_MspInit+0x54>)
 802b48c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802b490:	6453      	str	r3, [r2, #68]	; 0x44
 802b492:	4b0f      	ldr	r3, [pc, #60]	; (802b4d0 <HAL_MspInit+0x54>)
 802b494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802b496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802b49a:	607b      	str	r3, [r7, #4]
 802b49c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 802b49e:	2300      	movs	r3, #0
 802b4a0:	603b      	str	r3, [r7, #0]
 802b4a2:	4b0b      	ldr	r3, [pc, #44]	; (802b4d0 <HAL_MspInit+0x54>)
 802b4a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b4a6:	4a0a      	ldr	r2, [pc, #40]	; (802b4d0 <HAL_MspInit+0x54>)
 802b4a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802b4ac:	6413      	str	r3, [r2, #64]	; 0x40
 802b4ae:	4b08      	ldr	r3, [pc, #32]	; (802b4d0 <HAL_MspInit+0x54>)
 802b4b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b4b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802b4b6:	603b      	str	r3, [r7, #0]
 802b4b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 802b4ba:	2200      	movs	r2, #0
 802b4bc:	210f      	movs	r1, #15
 802b4be:	f06f 0001 	mvn.w	r0, #1
 802b4c2:	f002 fae0 	bl	802da86 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 802b4c6:	bf00      	nop
 802b4c8:	3708      	adds	r7, #8
 802b4ca:	46bd      	mov	sp, r7
 802b4cc:	bd80      	pop	{r7, pc}
 802b4ce:	bf00      	nop
 802b4d0:	40023800 	.word	0x40023800

0802b4d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 802b4d4:	b580      	push	{r7, lr}
 802b4d6:	b08a      	sub	sp, #40	; 0x28
 802b4d8:	af00      	add	r7, sp, #0
 802b4da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802b4dc:	f107 0314 	add.w	r3, r7, #20
 802b4e0:	2200      	movs	r2, #0
 802b4e2:	601a      	str	r2, [r3, #0]
 802b4e4:	605a      	str	r2, [r3, #4]
 802b4e6:	609a      	str	r2, [r3, #8]
 802b4e8:	60da      	str	r2, [r3, #12]
 802b4ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 802b4ec:	687b      	ldr	r3, [r7, #4]
 802b4ee:	681b      	ldr	r3, [r3, #0]
 802b4f0:	4a2f      	ldr	r2, [pc, #188]	; (802b5b0 <HAL_ADC_MspInit+0xdc>)
 802b4f2:	4293      	cmp	r3, r2
 802b4f4:	d158      	bne.n	802b5a8 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 802b4f6:	2300      	movs	r3, #0
 802b4f8:	613b      	str	r3, [r7, #16]
 802b4fa:	4b2e      	ldr	r3, [pc, #184]	; (802b5b4 <HAL_ADC_MspInit+0xe0>)
 802b4fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802b4fe:	4a2d      	ldr	r2, [pc, #180]	; (802b5b4 <HAL_ADC_MspInit+0xe0>)
 802b500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802b504:	6453      	str	r3, [r2, #68]	; 0x44
 802b506:	4b2b      	ldr	r3, [pc, #172]	; (802b5b4 <HAL_ADC_MspInit+0xe0>)
 802b508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802b50a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802b50e:	613b      	str	r3, [r7, #16]
 802b510:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 802b512:	2300      	movs	r3, #0
 802b514:	60fb      	str	r3, [r7, #12]
 802b516:	4b27      	ldr	r3, [pc, #156]	; (802b5b4 <HAL_ADC_MspInit+0xe0>)
 802b518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b51a:	4a26      	ldr	r2, [pc, #152]	; (802b5b4 <HAL_ADC_MspInit+0xe0>)
 802b51c:	f043 0302 	orr.w	r3, r3, #2
 802b520:	6313      	str	r3, [r2, #48]	; 0x30
 802b522:	4b24      	ldr	r3, [pc, #144]	; (802b5b4 <HAL_ADC_MspInit+0xe0>)
 802b524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b526:	f003 0302 	and.w	r3, r3, #2
 802b52a:	60fb      	str	r3, [r7, #12]
 802b52c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = INT_ADC_VBAT_Pin;
 802b52e:	2302      	movs	r3, #2
 802b530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 802b532:	2303      	movs	r3, #3
 802b534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802b536:	2300      	movs	r3, #0
 802b538:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(INT_ADC_VBAT_GPIO_Port, &GPIO_InitStruct);
 802b53a:	f107 0314 	add.w	r3, r7, #20
 802b53e:	4619      	mov	r1, r3
 802b540:	481d      	ldr	r0, [pc, #116]	; (802b5b8 <HAL_ADC_MspInit+0xe4>)
 802b542:	f004 fb69 	bl	802fc18 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 802b546:	4b1d      	ldr	r3, [pc, #116]	; (802b5bc <HAL_ADC_MspInit+0xe8>)
 802b548:	4a1d      	ldr	r2, [pc, #116]	; (802b5c0 <HAL_ADC_MspInit+0xec>)
 802b54a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 802b54c:	4b1b      	ldr	r3, [pc, #108]	; (802b5bc <HAL_ADC_MspInit+0xe8>)
 802b54e:	2200      	movs	r2, #0
 802b550:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 802b552:	4b1a      	ldr	r3, [pc, #104]	; (802b5bc <HAL_ADC_MspInit+0xe8>)
 802b554:	2200      	movs	r2, #0
 802b556:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 802b558:	4b18      	ldr	r3, [pc, #96]	; (802b5bc <HAL_ADC_MspInit+0xe8>)
 802b55a:	2200      	movs	r2, #0
 802b55c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 802b55e:	4b17      	ldr	r3, [pc, #92]	; (802b5bc <HAL_ADC_MspInit+0xe8>)
 802b560:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802b564:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 802b566:	4b15      	ldr	r3, [pc, #84]	; (802b5bc <HAL_ADC_MspInit+0xe8>)
 802b568:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802b56c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 802b56e:	4b13      	ldr	r3, [pc, #76]	; (802b5bc <HAL_ADC_MspInit+0xe8>)
 802b570:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802b574:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 802b576:	4b11      	ldr	r3, [pc, #68]	; (802b5bc <HAL_ADC_MspInit+0xe8>)
 802b578:	f44f 7280 	mov.w	r2, #256	; 0x100
 802b57c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 802b57e:	4b0f      	ldr	r3, [pc, #60]	; (802b5bc <HAL_ADC_MspInit+0xe8>)
 802b580:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 802b584:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 802b586:	4b0d      	ldr	r3, [pc, #52]	; (802b5bc <HAL_ADC_MspInit+0xe8>)
 802b588:	2200      	movs	r2, #0
 802b58a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 802b58c:	480b      	ldr	r0, [pc, #44]	; (802b5bc <HAL_ADC_MspInit+0xe8>)
 802b58e:	f003 ffa5 	bl	802f4dc <HAL_DMA_Init>
 802b592:	4603      	mov	r3, r0
 802b594:	2b00      	cmp	r3, #0
 802b596:	d001      	beq.n	802b59c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 802b598:	f7ff ff66 	bl	802b468 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 802b59c:	687b      	ldr	r3, [r7, #4]
 802b59e:	4a07      	ldr	r2, [pc, #28]	; (802b5bc <HAL_ADC_MspInit+0xe8>)
 802b5a0:	639a      	str	r2, [r3, #56]	; 0x38
 802b5a2:	4a06      	ldr	r2, [pc, #24]	; (802b5bc <HAL_ADC_MspInit+0xe8>)
 802b5a4:	687b      	ldr	r3, [r7, #4]
 802b5a6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 802b5a8:	bf00      	nop
 802b5aa:	3728      	adds	r7, #40	; 0x28
 802b5ac:	46bd      	mov	sp, r7
 802b5ae:	bd80      	pop	{r7, pc}
 802b5b0:	40012000 	.word	0x40012000
 802b5b4:	40023800 	.word	0x40023800
 802b5b8:	40020400 	.word	0x40020400
 802b5bc:	200087ec 	.word	0x200087ec
 802b5c0:	40026410 	.word	0x40026410

0802b5c4 <HAL_CRYP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcryp: CRYP handle pointer
* @retval None
*/
void HAL_CRYP_MspInit(CRYP_HandleTypeDef* hcryp)
{
 802b5c4:	b480      	push	{r7}
 802b5c6:	b085      	sub	sp, #20
 802b5c8:	af00      	add	r7, sp, #0
 802b5ca:	6078      	str	r0, [r7, #4]
  if(hcryp->Instance==AES)
 802b5cc:	687b      	ldr	r3, [r7, #4]
 802b5ce:	681b      	ldr	r3, [r3, #0]
 802b5d0:	4a0b      	ldr	r2, [pc, #44]	; (802b600 <HAL_CRYP_MspInit+0x3c>)
 802b5d2:	4293      	cmp	r3, r2
 802b5d4:	d10d      	bne.n	802b5f2 <HAL_CRYP_MspInit+0x2e>
  {
  /* USER CODE BEGIN AES_MspInit 0 */

  /* USER CODE END AES_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_AES_CLK_ENABLE();
 802b5d6:	2300      	movs	r3, #0
 802b5d8:	60fb      	str	r3, [r7, #12]
 802b5da:	4b0a      	ldr	r3, [pc, #40]	; (802b604 <HAL_CRYP_MspInit+0x40>)
 802b5dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802b5de:	4a09      	ldr	r2, [pc, #36]	; (802b604 <HAL_CRYP_MspInit+0x40>)
 802b5e0:	f043 0310 	orr.w	r3, r3, #16
 802b5e4:	6353      	str	r3, [r2, #52]	; 0x34
 802b5e6:	4b07      	ldr	r3, [pc, #28]	; (802b604 <HAL_CRYP_MspInit+0x40>)
 802b5e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802b5ea:	f003 0310 	and.w	r3, r3, #16
 802b5ee:	60fb      	str	r3, [r7, #12]
 802b5f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN AES_MspInit 1 */

  /* USER CODE END AES_MspInit 1 */
  }

}
 802b5f2:	bf00      	nop
 802b5f4:	3714      	adds	r7, #20
 802b5f6:	46bd      	mov	sp, r7
 802b5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b5fc:	4770      	bx	lr
 802b5fe:	bf00      	nop
 802b600:	50060000 	.word	0x50060000
 802b604:	40023800 	.word	0x40023800

0802b608 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 802b608:	b580      	push	{r7, lr}
 802b60a:	b08a      	sub	sp, #40	; 0x28
 802b60c:	af00      	add	r7, sp, #0
 802b60e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802b610:	f107 0314 	add.w	r3, r7, #20
 802b614:	2200      	movs	r2, #0
 802b616:	601a      	str	r2, [r3, #0]
 802b618:	605a      	str	r2, [r3, #4]
 802b61a:	609a      	str	r2, [r3, #8]
 802b61c:	60da      	str	r2, [r3, #12]
 802b61e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 802b620:	687b      	ldr	r3, [r7, #4]
 802b622:	681b      	ldr	r3, [r3, #0]
 802b624:	4a1d      	ldr	r2, [pc, #116]	; (802b69c <HAL_CAN_MspInit+0x94>)
 802b626:	4293      	cmp	r3, r2
 802b628:	d133      	bne.n	802b692 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 802b62a:	2300      	movs	r3, #0
 802b62c:	613b      	str	r3, [r7, #16]
 802b62e:	4b1c      	ldr	r3, [pc, #112]	; (802b6a0 <HAL_CAN_MspInit+0x98>)
 802b630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b632:	4a1b      	ldr	r2, [pc, #108]	; (802b6a0 <HAL_CAN_MspInit+0x98>)
 802b634:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 802b638:	6413      	str	r3, [r2, #64]	; 0x40
 802b63a:	4b19      	ldr	r3, [pc, #100]	; (802b6a0 <HAL_CAN_MspInit+0x98>)
 802b63c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b63e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802b642:	613b      	str	r3, [r7, #16]
 802b644:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 802b646:	2300      	movs	r3, #0
 802b648:	60fb      	str	r3, [r7, #12]
 802b64a:	4b15      	ldr	r3, [pc, #84]	; (802b6a0 <HAL_CAN_MspInit+0x98>)
 802b64c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b64e:	4a14      	ldr	r2, [pc, #80]	; (802b6a0 <HAL_CAN_MspInit+0x98>)
 802b650:	f043 0308 	orr.w	r3, r3, #8
 802b654:	6313      	str	r3, [r2, #48]	; 0x30
 802b656:	4b12      	ldr	r3, [pc, #72]	; (802b6a0 <HAL_CAN_MspInit+0x98>)
 802b658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b65a:	f003 0308 	and.w	r3, r3, #8
 802b65e:	60fb      	str	r3, [r7, #12]
 802b660:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = INT_CAN_RX_Pin|INT_CAN_TX_Pin;
 802b662:	2303      	movs	r3, #3
 802b664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802b666:	2302      	movs	r3, #2
 802b668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802b66a:	2300      	movs	r3, #0
 802b66c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802b66e:	2303      	movs	r3, #3
 802b670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 802b672:	2309      	movs	r3, #9
 802b674:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 802b676:	f107 0314 	add.w	r3, r7, #20
 802b67a:	4619      	mov	r1, r3
 802b67c:	4809      	ldr	r0, [pc, #36]	; (802b6a4 <HAL_CAN_MspInit+0x9c>)
 802b67e:	f004 facb 	bl	802fc18 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 802b682:	2200      	movs	r2, #0
 802b684:	2105      	movs	r1, #5
 802b686:	2014      	movs	r0, #20
 802b688:	f002 f9fd 	bl	802da86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 802b68c:	2014      	movs	r0, #20
 802b68e:	f002 fa16 	bl	802dabe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 802b692:	bf00      	nop
 802b694:	3728      	adds	r7, #40	; 0x28
 802b696:	46bd      	mov	sp, r7
 802b698:	bd80      	pop	{r7, pc}
 802b69a:	bf00      	nop
 802b69c:	40006400 	.word	0x40006400
 802b6a0:	40023800 	.word	0x40023800
 802b6a4:	40020c00 	.word	0x40020c00

0802b6a8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 802b6a8:	b480      	push	{r7}
 802b6aa:	b085      	sub	sp, #20
 802b6ac:	af00      	add	r7, sp, #0
 802b6ae:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 802b6b0:	687b      	ldr	r3, [r7, #4]
 802b6b2:	681b      	ldr	r3, [r3, #0]
 802b6b4:	4a0b      	ldr	r2, [pc, #44]	; (802b6e4 <HAL_CRC_MspInit+0x3c>)
 802b6b6:	4293      	cmp	r3, r2
 802b6b8:	d10d      	bne.n	802b6d6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 802b6ba:	2300      	movs	r3, #0
 802b6bc:	60fb      	str	r3, [r7, #12]
 802b6be:	4b0a      	ldr	r3, [pc, #40]	; (802b6e8 <HAL_CRC_MspInit+0x40>)
 802b6c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b6c2:	4a09      	ldr	r2, [pc, #36]	; (802b6e8 <HAL_CRC_MspInit+0x40>)
 802b6c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802b6c8:	6313      	str	r3, [r2, #48]	; 0x30
 802b6ca:	4b07      	ldr	r3, [pc, #28]	; (802b6e8 <HAL_CRC_MspInit+0x40>)
 802b6cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b6ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802b6d2:	60fb      	str	r3, [r7, #12]
 802b6d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 802b6d6:	bf00      	nop
 802b6d8:	3714      	adds	r7, #20
 802b6da:	46bd      	mov	sp, r7
 802b6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b6e0:	4770      	bx	lr
 802b6e2:	bf00      	nop
 802b6e4:	40023000 	.word	0x40023000
 802b6e8:	40023800 	.word	0x40023800

0802b6ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 802b6ec:	b580      	push	{r7, lr}
 802b6ee:	b08e      	sub	sp, #56	; 0x38
 802b6f0:	af00      	add	r7, sp, #0
 802b6f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802b6f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802b6f8:	2200      	movs	r2, #0
 802b6fa:	601a      	str	r2, [r3, #0]
 802b6fc:	605a      	str	r2, [r3, #4]
 802b6fe:	609a      	str	r2, [r3, #8]
 802b700:	60da      	str	r2, [r3, #12]
 802b702:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 802b704:	687b      	ldr	r3, [r7, #4]
 802b706:	681b      	ldr	r3, [r3, #0]
 802b708:	4a6c      	ldr	r2, [pc, #432]	; (802b8bc <HAL_I2C_MspInit+0x1d0>)
 802b70a:	4293      	cmp	r3, r2
 802b70c:	d13c      	bne.n	802b788 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 802b70e:	2300      	movs	r3, #0
 802b710:	623b      	str	r3, [r7, #32]
 802b712:	4b6b      	ldr	r3, [pc, #428]	; (802b8c0 <HAL_I2C_MspInit+0x1d4>)
 802b714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b716:	4a6a      	ldr	r2, [pc, #424]	; (802b8c0 <HAL_I2C_MspInit+0x1d4>)
 802b718:	f043 0302 	orr.w	r3, r3, #2
 802b71c:	6313      	str	r3, [r2, #48]	; 0x30
 802b71e:	4b68      	ldr	r3, [pc, #416]	; (802b8c0 <HAL_I2C_MspInit+0x1d4>)
 802b720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b722:	f003 0302 	and.w	r3, r3, #2
 802b726:	623b      	str	r3, [r7, #32]
 802b728:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = INT_AUDIO_SCL_Pin|INT_AUDIO_SDA_Pin;
 802b72a:	23c0      	movs	r3, #192	; 0xc0
 802b72c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 802b72e:	2312      	movs	r3, #18
 802b730:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 802b732:	2301      	movs	r3, #1
 802b734:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802b736:	2303      	movs	r3, #3
 802b738:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 802b73a:	2304      	movs	r3, #4
 802b73c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802b73e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802b742:	4619      	mov	r1, r3
 802b744:	485f      	ldr	r0, [pc, #380]	; (802b8c4 <HAL_I2C_MspInit+0x1d8>)
 802b746:	f004 fa67 	bl	802fc18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 802b74a:	2300      	movs	r3, #0
 802b74c:	61fb      	str	r3, [r7, #28]
 802b74e:	4b5c      	ldr	r3, [pc, #368]	; (802b8c0 <HAL_I2C_MspInit+0x1d4>)
 802b750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b752:	4a5b      	ldr	r2, [pc, #364]	; (802b8c0 <HAL_I2C_MspInit+0x1d4>)
 802b754:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 802b758:	6413      	str	r3, [r2, #64]	; 0x40
 802b75a:	4b59      	ldr	r3, [pc, #356]	; (802b8c0 <HAL_I2C_MspInit+0x1d4>)
 802b75c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b75e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 802b762:	61fb      	str	r3, [r7, #28]
 802b764:	69fb      	ldr	r3, [r7, #28]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 802b766:	2200      	movs	r2, #0
 802b768:	2105      	movs	r1, #5
 802b76a:	201f      	movs	r0, #31
 802b76c:	f002 f98b 	bl	802da86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 802b770:	201f      	movs	r0, #31
 802b772:	f002 f9a4 	bl	802dabe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 802b776:	2200      	movs	r2, #0
 802b778:	2105      	movs	r1, #5
 802b77a:	2020      	movs	r0, #32
 802b77c:	f002 f983 	bl	802da86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 802b780:	2020      	movs	r0, #32
 802b782:	f002 f99c 	bl	802dabe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 802b786:	e094      	b.n	802b8b2 <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C2)
 802b788:	687b      	ldr	r3, [r7, #4]
 802b78a:	681b      	ldr	r3, [r3, #0]
 802b78c:	4a4e      	ldr	r2, [pc, #312]	; (802b8c8 <HAL_I2C_MspInit+0x1dc>)
 802b78e:	4293      	cmp	r3, r2
 802b790:	d13e      	bne.n	802b810 <HAL_I2C_MspInit+0x124>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 802b792:	2300      	movs	r3, #0
 802b794:	61bb      	str	r3, [r7, #24]
 802b796:	4b4a      	ldr	r3, [pc, #296]	; (802b8c0 <HAL_I2C_MspInit+0x1d4>)
 802b798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b79a:	4a49      	ldr	r2, [pc, #292]	; (802b8c0 <HAL_I2C_MspInit+0x1d4>)
 802b79c:	f043 0302 	orr.w	r3, r3, #2
 802b7a0:	6313      	str	r3, [r2, #48]	; 0x30
 802b7a2:	4b47      	ldr	r3, [pc, #284]	; (802b8c0 <HAL_I2C_MspInit+0x1d4>)
 802b7a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b7a6:	f003 0302 	and.w	r3, r3, #2
 802b7aa:	61bb      	str	r3, [r7, #24]
 802b7ac:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = INT_EEPROM_SCL_Pin;
 802b7ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802b7b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 802b7b4:	2312      	movs	r3, #18
 802b7b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 802b7b8:	2301      	movs	r3, #1
 802b7ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802b7bc:	2303      	movs	r3, #3
 802b7be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 802b7c0:	2304      	movs	r3, #4
 802b7c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(INT_EEPROM_SCL_GPIO_Port, &GPIO_InitStruct);
 802b7c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802b7c8:	4619      	mov	r1, r3
 802b7ca:	483e      	ldr	r0, [pc, #248]	; (802b8c4 <HAL_I2C_MspInit+0x1d8>)
 802b7cc:	f004 fa24 	bl	802fc18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = INT_EEPROM_SDA_Pin;
 802b7d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 802b7d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 802b7d6:	2312      	movs	r3, #18
 802b7d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 802b7da:	2301      	movs	r3, #1
 802b7dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802b7de:	2303      	movs	r3, #3
 802b7e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 802b7e2:	2309      	movs	r3, #9
 802b7e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(INT_EEPROM_SDA_GPIO_Port, &GPIO_InitStruct);
 802b7e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802b7ea:	4619      	mov	r1, r3
 802b7ec:	4835      	ldr	r0, [pc, #212]	; (802b8c4 <HAL_I2C_MspInit+0x1d8>)
 802b7ee:	f004 fa13 	bl	802fc18 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 802b7f2:	2300      	movs	r3, #0
 802b7f4:	617b      	str	r3, [r7, #20]
 802b7f6:	4b32      	ldr	r3, [pc, #200]	; (802b8c0 <HAL_I2C_MspInit+0x1d4>)
 802b7f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b7fa:	4a31      	ldr	r2, [pc, #196]	; (802b8c0 <HAL_I2C_MspInit+0x1d4>)
 802b7fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 802b800:	6413      	str	r3, [r2, #64]	; 0x40
 802b802:	4b2f      	ldr	r3, [pc, #188]	; (802b8c0 <HAL_I2C_MspInit+0x1d4>)
 802b804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802b80a:	617b      	str	r3, [r7, #20]
 802b80c:	697b      	ldr	r3, [r7, #20]
}
 802b80e:	e050      	b.n	802b8b2 <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C3)
 802b810:	687b      	ldr	r3, [r7, #4]
 802b812:	681b      	ldr	r3, [r3, #0]
 802b814:	4a2d      	ldr	r2, [pc, #180]	; (802b8cc <HAL_I2C_MspInit+0x1e0>)
 802b816:	4293      	cmp	r3, r2
 802b818:	d14b      	bne.n	802b8b2 <HAL_I2C_MspInit+0x1c6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 802b81a:	2300      	movs	r3, #0
 802b81c:	613b      	str	r3, [r7, #16]
 802b81e:	4b28      	ldr	r3, [pc, #160]	; (802b8c0 <HAL_I2C_MspInit+0x1d4>)
 802b820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b822:	4a27      	ldr	r2, [pc, #156]	; (802b8c0 <HAL_I2C_MspInit+0x1d4>)
 802b824:	f043 0304 	orr.w	r3, r3, #4
 802b828:	6313      	str	r3, [r2, #48]	; 0x30
 802b82a:	4b25      	ldr	r3, [pc, #148]	; (802b8c0 <HAL_I2C_MspInit+0x1d4>)
 802b82c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b82e:	f003 0304 	and.w	r3, r3, #4
 802b832:	613b      	str	r3, [r7, #16]
 802b834:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802b836:	2300      	movs	r3, #0
 802b838:	60fb      	str	r3, [r7, #12]
 802b83a:	4b21      	ldr	r3, [pc, #132]	; (802b8c0 <HAL_I2C_MspInit+0x1d4>)
 802b83c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b83e:	4a20      	ldr	r2, [pc, #128]	; (802b8c0 <HAL_I2C_MspInit+0x1d4>)
 802b840:	f043 0301 	orr.w	r3, r3, #1
 802b844:	6313      	str	r3, [r2, #48]	; 0x30
 802b846:	4b1e      	ldr	r3, [pc, #120]	; (802b8c0 <HAL_I2C_MspInit+0x1d4>)
 802b848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b84a:	f003 0301 	and.w	r3, r3, #1
 802b84e:	60fb      	str	r3, [r7, #12]
 802b850:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INT_GYRO_SDA_Pin;
 802b852:	f44f 7300 	mov.w	r3, #512	; 0x200
 802b856:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 802b858:	2312      	movs	r3, #18
 802b85a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 802b85c:	2301      	movs	r3, #1
 802b85e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802b860:	2303      	movs	r3, #3
 802b862:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 802b864:	2304      	movs	r3, #4
 802b866:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(INT_GYRO_SDA_GPIO_Port, &GPIO_InitStruct);
 802b868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802b86c:	4619      	mov	r1, r3
 802b86e:	4818      	ldr	r0, [pc, #96]	; (802b8d0 <HAL_I2C_MspInit+0x1e4>)
 802b870:	f004 f9d2 	bl	802fc18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = INT_GYRO_SCL_Pin;
 802b874:	f44f 7380 	mov.w	r3, #256	; 0x100
 802b878:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 802b87a:	2312      	movs	r3, #18
 802b87c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 802b87e:	2301      	movs	r3, #1
 802b880:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802b882:	2303      	movs	r3, #3
 802b884:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 802b886:	2304      	movs	r3, #4
 802b888:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(INT_GYRO_SCL_GPIO_Port, &GPIO_InitStruct);
 802b88a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802b88e:	4619      	mov	r1, r3
 802b890:	4810      	ldr	r0, [pc, #64]	; (802b8d4 <HAL_I2C_MspInit+0x1e8>)
 802b892:	f004 f9c1 	bl	802fc18 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 802b896:	2300      	movs	r3, #0
 802b898:	60bb      	str	r3, [r7, #8]
 802b89a:	4b09      	ldr	r3, [pc, #36]	; (802b8c0 <HAL_I2C_MspInit+0x1d4>)
 802b89c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b89e:	4a08      	ldr	r2, [pc, #32]	; (802b8c0 <HAL_I2C_MspInit+0x1d4>)
 802b8a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 802b8a4:	6413      	str	r3, [r2, #64]	; 0x40
 802b8a6:	4b06      	ldr	r3, [pc, #24]	; (802b8c0 <HAL_I2C_MspInit+0x1d4>)
 802b8a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b8aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 802b8ae:	60bb      	str	r3, [r7, #8]
 802b8b0:	68bb      	ldr	r3, [r7, #8]
}
 802b8b2:	bf00      	nop
 802b8b4:	3738      	adds	r7, #56	; 0x38
 802b8b6:	46bd      	mov	sp, r7
 802b8b8:	bd80      	pop	{r7, pc}
 802b8ba:	bf00      	nop
 802b8bc:	40005400 	.word	0x40005400
 802b8c0:	40023800 	.word	0x40023800
 802b8c4:	40020400 	.word	0x40020400
 802b8c8:	40005800 	.word	0x40005800
 802b8cc:	40005c00 	.word	0x40005c00
 802b8d0:	40020800 	.word	0x40020800
 802b8d4:	40020000 	.word	0x40020000

0802b8d8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 802b8d8:	b580      	push	{r7, lr}
 802b8da:	b082      	sub	sp, #8
 802b8dc:	af00      	add	r7, sp, #0
 802b8de:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 802b8e0:	687b      	ldr	r3, [r7, #4]
 802b8e2:	681b      	ldr	r3, [r3, #0]
 802b8e4:	4a1e      	ldr	r2, [pc, #120]	; (802b960 <HAL_I2C_MspDeInit+0x88>)
 802b8e6:	4293      	cmp	r3, r2
 802b8e8:	d110      	bne.n	802b90c <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 802b8ea:	4b1e      	ldr	r3, [pc, #120]	; (802b964 <HAL_I2C_MspDeInit+0x8c>)
 802b8ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b8ee:	4a1d      	ldr	r2, [pc, #116]	; (802b964 <HAL_I2C_MspDeInit+0x8c>)
 802b8f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 802b8f4:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, INT_AUDIO_SCL_Pin|INT_AUDIO_SDA_Pin);
 802b8f6:	21c0      	movs	r1, #192	; 0xc0
 802b8f8:	481b      	ldr	r0, [pc, #108]	; (802b968 <HAL_I2C_MspDeInit+0x90>)
 802b8fa:	f004 fb1f 	bl	802ff3c <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 802b8fe:	201f      	movs	r0, #31
 802b900:	f002 f8eb 	bl	802dada <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 802b904:	2020      	movs	r0, #32
 802b906:	f002 f8e8 	bl	802dada <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 802b90a:	e025      	b.n	802b958 <HAL_I2C_MspDeInit+0x80>
  else if(hi2c->Instance==I2C2)
 802b90c:	687b      	ldr	r3, [r7, #4]
 802b90e:	681b      	ldr	r3, [r3, #0]
 802b910:	4a16      	ldr	r2, [pc, #88]	; (802b96c <HAL_I2C_MspDeInit+0x94>)
 802b912:	4293      	cmp	r3, r2
 802b914:	d10b      	bne.n	802b92e <HAL_I2C_MspDeInit+0x56>
    __HAL_RCC_I2C2_CLK_DISABLE();
 802b916:	4b13      	ldr	r3, [pc, #76]	; (802b964 <HAL_I2C_MspDeInit+0x8c>)
 802b918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b91a:	4a12      	ldr	r2, [pc, #72]	; (802b964 <HAL_I2C_MspDeInit+0x8c>)
 802b91c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 802b920:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, INT_EEPROM_SCL_Pin|INT_EEPROM_SDA_Pin);
 802b922:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 802b926:	4810      	ldr	r0, [pc, #64]	; (802b968 <HAL_I2C_MspDeInit+0x90>)
 802b928:	f004 fb08 	bl	802ff3c <HAL_GPIO_DeInit>
}
 802b92c:	e014      	b.n	802b958 <HAL_I2C_MspDeInit+0x80>
  else if(hi2c->Instance==I2C3)
 802b92e:	687b      	ldr	r3, [r7, #4]
 802b930:	681b      	ldr	r3, [r3, #0]
 802b932:	4a0f      	ldr	r2, [pc, #60]	; (802b970 <HAL_I2C_MspDeInit+0x98>)
 802b934:	4293      	cmp	r3, r2
 802b936:	d10f      	bne.n	802b958 <HAL_I2C_MspDeInit+0x80>
    __HAL_RCC_I2C3_CLK_DISABLE();
 802b938:	4b0a      	ldr	r3, [pc, #40]	; (802b964 <HAL_I2C_MspDeInit+0x8c>)
 802b93a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b93c:	4a09      	ldr	r2, [pc, #36]	; (802b964 <HAL_I2C_MspDeInit+0x8c>)
 802b93e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 802b942:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(INT_GYRO_SDA_GPIO_Port, INT_GYRO_SDA_Pin);
 802b944:	f44f 7100 	mov.w	r1, #512	; 0x200
 802b948:	480a      	ldr	r0, [pc, #40]	; (802b974 <HAL_I2C_MspDeInit+0x9c>)
 802b94a:	f004 faf7 	bl	802ff3c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(INT_GYRO_SCL_GPIO_Port, INT_GYRO_SCL_Pin);
 802b94e:	f44f 7180 	mov.w	r1, #256	; 0x100
 802b952:	4809      	ldr	r0, [pc, #36]	; (802b978 <HAL_I2C_MspDeInit+0xa0>)
 802b954:	f004 faf2 	bl	802ff3c <HAL_GPIO_DeInit>
}
 802b958:	bf00      	nop
 802b95a:	3708      	adds	r7, #8
 802b95c:	46bd      	mov	sp, r7
 802b95e:	bd80      	pop	{r7, pc}
 802b960:	40005400 	.word	0x40005400
 802b964:	40023800 	.word	0x40023800
 802b968:	40020400 	.word	0x40020400
 802b96c:	40005800 	.word	0x40005800
 802b970:	40005c00 	.word	0x40005c00
 802b974:	40020800 	.word	0x40020800
 802b978:	40020000 	.word	0x40020000

0802b97c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 802b97c:	b580      	push	{r7, lr}
 802b97e:	b08a      	sub	sp, #40	; 0x28
 802b980:	af00      	add	r7, sp, #0
 802b982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802b984:	f107 0314 	add.w	r3, r7, #20
 802b988:	2200      	movs	r2, #0
 802b98a:	601a      	str	r2, [r3, #0]
 802b98c:	605a      	str	r2, [r3, #4]
 802b98e:	609a      	str	r2, [r3, #8]
 802b990:	60da      	str	r2, [r3, #12]
 802b992:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 802b994:	687b      	ldr	r3, [r7, #4]
 802b996:	681b      	ldr	r3, [r3, #0]
 802b998:	4a48      	ldr	r2, [pc, #288]	; (802babc <HAL_I2S_MspInit+0x140>)
 802b99a:	4293      	cmp	r3, r2
 802b99c:	f040 808a 	bne.w	802bab4 <HAL_I2S_MspInit+0x138>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 802b9a0:	2300      	movs	r3, #0
 802b9a2:	613b      	str	r3, [r7, #16]
 802b9a4:	4b46      	ldr	r3, [pc, #280]	; (802bac0 <HAL_I2S_MspInit+0x144>)
 802b9a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b9a8:	4a45      	ldr	r2, [pc, #276]	; (802bac0 <HAL_I2S_MspInit+0x144>)
 802b9aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802b9ae:	6413      	str	r3, [r2, #64]	; 0x40
 802b9b0:	4b43      	ldr	r3, [pc, #268]	; (802bac0 <HAL_I2S_MspInit+0x144>)
 802b9b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b9b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802b9b8:	613b      	str	r3, [r7, #16]
 802b9ba:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802b9bc:	2300      	movs	r3, #0
 802b9be:	60fb      	str	r3, [r7, #12]
 802b9c0:	4b3f      	ldr	r3, [pc, #252]	; (802bac0 <HAL_I2S_MspInit+0x144>)
 802b9c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b9c4:	4a3e      	ldr	r2, [pc, #248]	; (802bac0 <HAL_I2S_MspInit+0x144>)
 802b9c6:	f043 0301 	orr.w	r3, r3, #1
 802b9ca:	6313      	str	r3, [r2, #48]	; 0x30
 802b9cc:	4b3c      	ldr	r3, [pc, #240]	; (802bac0 <HAL_I2S_MspInit+0x144>)
 802b9ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b9d0:	f003 0301 	and.w	r3, r3, #1
 802b9d4:	60fb      	str	r3, [r7, #12]
 802b9d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 802b9d8:	2300      	movs	r3, #0
 802b9da:	60bb      	str	r3, [r7, #8]
 802b9dc:	4b38      	ldr	r3, [pc, #224]	; (802bac0 <HAL_I2S_MspInit+0x144>)
 802b9de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b9e0:	4a37      	ldr	r2, [pc, #220]	; (802bac0 <HAL_I2S_MspInit+0x144>)
 802b9e2:	f043 0304 	orr.w	r3, r3, #4
 802b9e6:	6313      	str	r3, [r2, #48]	; 0x30
 802b9e8:	4b35      	ldr	r3, [pc, #212]	; (802bac0 <HAL_I2S_MspInit+0x144>)
 802b9ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b9ec:	f003 0304 	and.w	r3, r3, #4
 802b9f0:	60bb      	str	r3, [r7, #8]
 802b9f2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = INT_AUDIO_LRCK_Pin;
 802b9f4:	2310      	movs	r3, #16
 802b9f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802b9f8:	2302      	movs	r3, #2
 802b9fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802b9fc:	2300      	movs	r3, #0
 802b9fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802ba00:	2300      	movs	r3, #0
 802ba02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 802ba04:	2306      	movs	r3, #6
 802ba06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(INT_AUDIO_LRCK_GPIO_Port, &GPIO_InitStruct);
 802ba08:	f107 0314 	add.w	r3, r7, #20
 802ba0c:	4619      	mov	r1, r3
 802ba0e:	482d      	ldr	r0, [pc, #180]	; (802bac4 <HAL_I2S_MspInit+0x148>)
 802ba10:	f004 f902 	bl	802fc18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = INT_AUDIO_MCLK_Pin|INT_AUDIO_SCLK_Pin|INT_AUDIO_SDIN_Pin;
 802ba14:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 802ba18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802ba1a:	2302      	movs	r3, #2
 802ba1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802ba1e:	2300      	movs	r3, #0
 802ba20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802ba22:	2300      	movs	r3, #0
 802ba24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 802ba26:	2306      	movs	r3, #6
 802ba28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802ba2a:	f107 0314 	add.w	r3, r7, #20
 802ba2e:	4619      	mov	r1, r3
 802ba30:	4825      	ldr	r0, [pc, #148]	; (802bac8 <HAL_I2S_MspInit+0x14c>)
 802ba32:	f004 f8f1 	bl	802fc18 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream7;
 802ba36:	4b25      	ldr	r3, [pc, #148]	; (802bacc <HAL_I2S_MspInit+0x150>)
 802ba38:	4a25      	ldr	r2, [pc, #148]	; (802bad0 <HAL_I2S_MspInit+0x154>)
 802ba3a:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 802ba3c:	4b23      	ldr	r3, [pc, #140]	; (802bacc <HAL_I2S_MspInit+0x150>)
 802ba3e:	2200      	movs	r2, #0
 802ba40:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 802ba42:	4b22      	ldr	r3, [pc, #136]	; (802bacc <HAL_I2S_MspInit+0x150>)
 802ba44:	2240      	movs	r2, #64	; 0x40
 802ba46:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 802ba48:	4b20      	ldr	r3, [pc, #128]	; (802bacc <HAL_I2S_MspInit+0x150>)
 802ba4a:	2200      	movs	r2, #0
 802ba4c:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 802ba4e:	4b1f      	ldr	r3, [pc, #124]	; (802bacc <HAL_I2S_MspInit+0x150>)
 802ba50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802ba54:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 802ba56:	4b1d      	ldr	r3, [pc, #116]	; (802bacc <HAL_I2S_MspInit+0x150>)
 802ba58:	2200      	movs	r2, #0
 802ba5a:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 802ba5c:	4b1b      	ldr	r3, [pc, #108]	; (802bacc <HAL_I2S_MspInit+0x150>)
 802ba5e:	2200      	movs	r2, #0
 802ba60:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 802ba62:	4b1a      	ldr	r3, [pc, #104]	; (802bacc <HAL_I2S_MspInit+0x150>)
 802ba64:	2200      	movs	r2, #0
 802ba66:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 802ba68:	4b18      	ldr	r3, [pc, #96]	; (802bacc <HAL_I2S_MspInit+0x150>)
 802ba6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 802ba6e:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 802ba70:	4b16      	ldr	r3, [pc, #88]	; (802bacc <HAL_I2S_MspInit+0x150>)
 802ba72:	2204      	movs	r2, #4
 802ba74:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 802ba76:	4b15      	ldr	r3, [pc, #84]	; (802bacc <HAL_I2S_MspInit+0x150>)
 802ba78:	2203      	movs	r2, #3
 802ba7a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 802ba7c:	4b13      	ldr	r3, [pc, #76]	; (802bacc <HAL_I2S_MspInit+0x150>)
 802ba7e:	2200      	movs	r2, #0
 802ba80:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 802ba82:	4b12      	ldr	r3, [pc, #72]	; (802bacc <HAL_I2S_MspInit+0x150>)
 802ba84:	2200      	movs	r2, #0
 802ba86:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 802ba88:	4810      	ldr	r0, [pc, #64]	; (802bacc <HAL_I2S_MspInit+0x150>)
 802ba8a:	f003 fd27 	bl	802f4dc <HAL_DMA_Init>
 802ba8e:	4603      	mov	r3, r0
 802ba90:	2b00      	cmp	r3, #0
 802ba92:	d001      	beq.n	802ba98 <HAL_I2S_MspInit+0x11c>
    {
      Error_Handler();
 802ba94:	f7ff fce8 	bl	802b468 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 802ba98:	687b      	ldr	r3, [r7, #4]
 802ba9a:	4a0c      	ldr	r2, [pc, #48]	; (802bacc <HAL_I2S_MspInit+0x150>)
 802ba9c:	639a      	str	r2, [r3, #56]	; 0x38
 802ba9e:	4a0b      	ldr	r2, [pc, #44]	; (802bacc <HAL_I2S_MspInit+0x150>)
 802baa0:	687b      	ldr	r3, [r7, #4]
 802baa2:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 802baa4:	2200      	movs	r2, #0
 802baa6:	2105      	movs	r1, #5
 802baa8:	2033      	movs	r0, #51	; 0x33
 802baaa:	f001 ffec 	bl	802da86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 802baae:	2033      	movs	r0, #51	; 0x33
 802bab0:	f002 f805 	bl	802dabe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 802bab4:	bf00      	nop
 802bab6:	3728      	adds	r7, #40	; 0x28
 802bab8:	46bd      	mov	sp, r7
 802baba:	bd80      	pop	{r7, pc}
 802babc:	40003c00 	.word	0x40003c00
 802bac0:	40023800 	.word	0x40023800
 802bac4:	40020000 	.word	0x40020000
 802bac8:	40020800 	.word	0x40020800
 802bacc:	20008698 	.word	0x20008698
 802bad0:	400260b8 	.word	0x400260b8

0802bad4 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 802bad4:	b480      	push	{r7}
 802bad6:	b085      	sub	sp, #20
 802bad8:	af00      	add	r7, sp, #0
 802bada:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 802badc:	687b      	ldr	r3, [r7, #4]
 802bade:	681b      	ldr	r3, [r3, #0]
 802bae0:	4a0b      	ldr	r2, [pc, #44]	; (802bb10 <HAL_RNG_MspInit+0x3c>)
 802bae2:	4293      	cmp	r3, r2
 802bae4:	d10d      	bne.n	802bb02 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 802bae6:	2300      	movs	r3, #0
 802bae8:	60fb      	str	r3, [r7, #12]
 802baea:	4b0a      	ldr	r3, [pc, #40]	; (802bb14 <HAL_RNG_MspInit+0x40>)
 802baec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802baee:	4a09      	ldr	r2, [pc, #36]	; (802bb14 <HAL_RNG_MspInit+0x40>)
 802baf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802baf4:	6353      	str	r3, [r2, #52]	; 0x34
 802baf6:	4b07      	ldr	r3, [pc, #28]	; (802bb14 <HAL_RNG_MspInit+0x40>)
 802baf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802bafa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802bafe:	60fb      	str	r3, [r7, #12]
 802bb00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 802bb02:	bf00      	nop
 802bb04:	3714      	adds	r7, #20
 802bb06:	46bd      	mov	sp, r7
 802bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bb0c:	4770      	bx	lr
 802bb0e:	bf00      	nop
 802bb10:	50060800 	.word	0x50060800
 802bb14:	40023800 	.word	0x40023800

0802bb18 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 802bb18:	b480      	push	{r7}
 802bb1a:	b083      	sub	sp, #12
 802bb1c:	af00      	add	r7, sp, #0
 802bb1e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 802bb20:	687b      	ldr	r3, [r7, #4]
 802bb22:	681b      	ldr	r3, [r3, #0]
 802bb24:	4a05      	ldr	r2, [pc, #20]	; (802bb3c <HAL_RTC_MspInit+0x24>)
 802bb26:	4293      	cmp	r3, r2
 802bb28:	d102      	bne.n	802bb30 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 802bb2a:	4b05      	ldr	r3, [pc, #20]	; (802bb40 <HAL_RTC_MspInit+0x28>)
 802bb2c:	2201      	movs	r2, #1
 802bb2e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 802bb30:	bf00      	nop
 802bb32:	370c      	adds	r7, #12
 802bb34:	46bd      	mov	sp, r7
 802bb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bb3a:	4770      	bx	lr
 802bb3c:	40002800 	.word	0x40002800
 802bb40:	42470e3c 	.word	0x42470e3c

0802bb44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 802bb44:	b580      	push	{r7, lr}
 802bb46:	b08a      	sub	sp, #40	; 0x28
 802bb48:	af00      	add	r7, sp, #0
 802bb4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802bb4c:	f107 0314 	add.w	r3, r7, #20
 802bb50:	2200      	movs	r2, #0
 802bb52:	601a      	str	r2, [r3, #0]
 802bb54:	605a      	str	r2, [r3, #4]
 802bb56:	609a      	str	r2, [r3, #8]
 802bb58:	60da      	str	r2, [r3, #12]
 802bb5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 802bb5c:	687b      	ldr	r3, [r7, #4]
 802bb5e:	681b      	ldr	r3, [r3, #0]
 802bb60:	4a19      	ldr	r2, [pc, #100]	; (802bbc8 <HAL_SPI_MspInit+0x84>)
 802bb62:	4293      	cmp	r3, r2
 802bb64:	d12b      	bne.n	802bbbe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 802bb66:	2300      	movs	r3, #0
 802bb68:	613b      	str	r3, [r7, #16]
 802bb6a:	4b18      	ldr	r3, [pc, #96]	; (802bbcc <HAL_SPI_MspInit+0x88>)
 802bb6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802bb6e:	4a17      	ldr	r2, [pc, #92]	; (802bbcc <HAL_SPI_MspInit+0x88>)
 802bb70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802bb74:	6453      	str	r3, [r2, #68]	; 0x44
 802bb76:	4b15      	ldr	r3, [pc, #84]	; (802bbcc <HAL_SPI_MspInit+0x88>)
 802bb78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802bb7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802bb7e:	613b      	str	r3, [r7, #16]
 802bb80:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802bb82:	2300      	movs	r3, #0
 802bb84:	60fb      	str	r3, [r7, #12]
 802bb86:	4b11      	ldr	r3, [pc, #68]	; (802bbcc <HAL_SPI_MspInit+0x88>)
 802bb88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802bb8a:	4a10      	ldr	r2, [pc, #64]	; (802bbcc <HAL_SPI_MspInit+0x88>)
 802bb8c:	f043 0301 	orr.w	r3, r3, #1
 802bb90:	6313      	str	r3, [r2, #48]	; 0x30
 802bb92:	4b0e      	ldr	r3, [pc, #56]	; (802bbcc <HAL_SPI_MspInit+0x88>)
 802bb94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802bb96:	f003 0301 	and.w	r3, r3, #1
 802bb9a:	60fb      	str	r3, [r7, #12]
 802bb9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = INT_KEYLESS_SCK_Pin|INT_KEYLESS_MISO_Pin|INT_KEYLESS_MOSI_Pin;
 802bb9e:	23e0      	movs	r3, #224	; 0xe0
 802bba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802bba2:	2302      	movs	r3, #2
 802bba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802bba6:	2300      	movs	r3, #0
 802bba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802bbaa:	2303      	movs	r3, #3
 802bbac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 802bbae:	2305      	movs	r3, #5
 802bbb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802bbb2:	f107 0314 	add.w	r3, r7, #20
 802bbb6:	4619      	mov	r1, r3
 802bbb8:	4805      	ldr	r0, [pc, #20]	; (802bbd0 <HAL_SPI_MspInit+0x8c>)
 802bbba:	f004 f82d 	bl	802fc18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 802bbbe:	bf00      	nop
 802bbc0:	3728      	adds	r7, #40	; 0x28
 802bbc2:	46bd      	mov	sp, r7
 802bbc4:	bd80      	pop	{r7, pc}
 802bbc6:	bf00      	nop
 802bbc8:	40013000 	.word	0x40013000
 802bbcc:	40023800 	.word	0x40023800
 802bbd0:	40020000 	.word	0x40020000

0802bbd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 802bbd4:	b580      	push	{r7, lr}
 802bbd6:	b084      	sub	sp, #16
 802bbd8:	af00      	add	r7, sp, #0
 802bbda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 802bbdc:	687b      	ldr	r3, [r7, #4]
 802bbde:	681b      	ldr	r3, [r3, #0]
 802bbe0:	4a0e      	ldr	r2, [pc, #56]	; (802bc1c <HAL_TIM_Base_MspInit+0x48>)
 802bbe2:	4293      	cmp	r3, r2
 802bbe4:	d115      	bne.n	802bc12 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 802bbe6:	2300      	movs	r3, #0
 802bbe8:	60fb      	str	r3, [r7, #12]
 802bbea:	4b0d      	ldr	r3, [pc, #52]	; (802bc20 <HAL_TIM_Base_MspInit+0x4c>)
 802bbec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802bbee:	4a0c      	ldr	r2, [pc, #48]	; (802bc20 <HAL_TIM_Base_MspInit+0x4c>)
 802bbf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802bbf4:	6453      	str	r3, [r2, #68]	; 0x44
 802bbf6:	4b0a      	ldr	r3, [pc, #40]	; (802bc20 <HAL_TIM_Base_MspInit+0x4c>)
 802bbf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802bbfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802bbfe:	60fb      	str	r3, [r7, #12]
 802bc00:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 802bc02:	2200      	movs	r2, #0
 802bc04:	2100      	movs	r1, #0
 802bc06:	2019      	movs	r0, #25
 802bc08:	f001 ff3d 	bl	802da86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 802bc0c:	2019      	movs	r0, #25
 802bc0e:	f001 ff56 	bl	802dabe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 802bc12:	bf00      	nop
 802bc14:	3710      	adds	r7, #16
 802bc16:	46bd      	mov	sp, r7
 802bc18:	bd80      	pop	{r7, pc}
 802bc1a:	bf00      	nop
 802bc1c:	40014400 	.word	0x40014400
 802bc20:	40023800 	.word	0x40023800

0802bc24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 802bc24:	b580      	push	{r7, lr}
 802bc26:	b088      	sub	sp, #32
 802bc28:	af00      	add	r7, sp, #0
 802bc2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802bc2c:	f107 030c 	add.w	r3, r7, #12
 802bc30:	2200      	movs	r2, #0
 802bc32:	601a      	str	r2, [r3, #0]
 802bc34:	605a      	str	r2, [r3, #4]
 802bc36:	609a      	str	r2, [r3, #8]
 802bc38:	60da      	str	r2, [r3, #12]
 802bc3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM10)
 802bc3c:	687b      	ldr	r3, [r7, #4]
 802bc3e:	681b      	ldr	r3, [r3, #0]
 802bc40:	4a12      	ldr	r2, [pc, #72]	; (802bc8c <HAL_TIM_MspPostInit+0x68>)
 802bc42:	4293      	cmp	r3, r2
 802bc44:	d11e      	bne.n	802bc84 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM10_MspPostInit 0 */

  /* USER CODE END TIM10_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 802bc46:	2300      	movs	r3, #0
 802bc48:	60bb      	str	r3, [r7, #8]
 802bc4a:	4b11      	ldr	r3, [pc, #68]	; (802bc90 <HAL_TIM_MspPostInit+0x6c>)
 802bc4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802bc4e:	4a10      	ldr	r2, [pc, #64]	; (802bc90 <HAL_TIM_MspPostInit+0x6c>)
 802bc50:	f043 0302 	orr.w	r3, r3, #2
 802bc54:	6313      	str	r3, [r2, #48]	; 0x30
 802bc56:	4b0e      	ldr	r3, [pc, #56]	; (802bc90 <HAL_TIM_MspPostInit+0x6c>)
 802bc58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802bc5a:	f003 0302 	and.w	r3, r3, #2
 802bc5e:	60bb      	str	r3, [r7, #8]
 802bc60:	68bb      	ldr	r3, [r7, #8]
    /**TIM10 GPIO Configuration    
    PB8     ------> TIM10_CH1 
    */
    GPIO_InitStruct.Pin = INT_BUZZER_PWM_Pin;
 802bc62:	f44f 7380 	mov.w	r3, #256	; 0x100
 802bc66:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802bc68:	2302      	movs	r3, #2
 802bc6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802bc6c:	2300      	movs	r3, #0
 802bc6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802bc70:	2300      	movs	r3, #0
 802bc72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 802bc74:	2303      	movs	r3, #3
 802bc76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(INT_BUZZER_PWM_GPIO_Port, &GPIO_InitStruct);
 802bc78:	f107 030c 	add.w	r3, r7, #12
 802bc7c:	4619      	mov	r1, r3
 802bc7e:	4805      	ldr	r0, [pc, #20]	; (802bc94 <HAL_TIM_MspPostInit+0x70>)
 802bc80:	f003 ffca 	bl	802fc18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 802bc84:	bf00      	nop
 802bc86:	3720      	adds	r7, #32
 802bc88:	46bd      	mov	sp, r7
 802bc8a:	bd80      	pop	{r7, pc}
 802bc8c:	40014400 	.word	0x40014400
 802bc90:	40023800 	.word	0x40023800
 802bc94:	40020400 	.word	0x40020400

0802bc98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 802bc98:	b580      	push	{r7, lr}
 802bc9a:	b08e      	sub	sp, #56	; 0x38
 802bc9c:	af00      	add	r7, sp, #0
 802bc9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802bca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802bca4:	2200      	movs	r2, #0
 802bca6:	601a      	str	r2, [r3, #0]
 802bca8:	605a      	str	r2, [r3, #4]
 802bcaa:	609a      	str	r2, [r3, #8]
 802bcac:	60da      	str	r2, [r3, #12]
 802bcae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 802bcb0:	687b      	ldr	r3, [r7, #4]
 802bcb2:	681b      	ldr	r3, [r3, #0]
 802bcb4:	4a9f      	ldr	r2, [pc, #636]	; (802bf34 <HAL_UART_MspInit+0x29c>)
 802bcb6:	4293      	cmp	r3, r2
 802bcb8:	d164      	bne.n	802bd84 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 802bcba:	2300      	movs	r3, #0
 802bcbc:	623b      	str	r3, [r7, #32]
 802bcbe:	4b9e      	ldr	r3, [pc, #632]	; (802bf38 <HAL_UART_MspInit+0x2a0>)
 802bcc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802bcc2:	4a9d      	ldr	r2, [pc, #628]	; (802bf38 <HAL_UART_MspInit+0x2a0>)
 802bcc4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802bcc8:	6413      	str	r3, [r2, #64]	; 0x40
 802bcca:	4b9b      	ldr	r3, [pc, #620]	; (802bf38 <HAL_UART_MspInit+0x2a0>)
 802bccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802bcce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802bcd2:	623b      	str	r3, [r7, #32]
 802bcd4:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802bcd6:	2300      	movs	r3, #0
 802bcd8:	61fb      	str	r3, [r7, #28]
 802bcda:	4b97      	ldr	r3, [pc, #604]	; (802bf38 <HAL_UART_MspInit+0x2a0>)
 802bcdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802bcde:	4a96      	ldr	r2, [pc, #600]	; (802bf38 <HAL_UART_MspInit+0x2a0>)
 802bce0:	f043 0301 	orr.w	r3, r3, #1
 802bce4:	6313      	str	r3, [r2, #48]	; 0x30
 802bce6:	4b94      	ldr	r3, [pc, #592]	; (802bf38 <HAL_UART_MspInit+0x2a0>)
 802bce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802bcea:	f003 0301 	and.w	r3, r3, #1
 802bcee:	61fb      	str	r3, [r7, #28]
 802bcf0:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration    
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = EXT_FINGER_TX_Pin|EXT_FINGER_RX_Pin;
 802bcf2:	2303      	movs	r3, #3
 802bcf4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802bcf6:	2302      	movs	r3, #2
 802bcf8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 802bcfa:	2301      	movs	r3, #1
 802bcfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802bcfe:	2303      	movs	r3, #3
 802bd00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 802bd02:	2308      	movs	r3, #8
 802bd04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802bd06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802bd0a:	4619      	mov	r1, r3
 802bd0c:	488b      	ldr	r0, [pc, #556]	; (802bf3c <HAL_UART_MspInit+0x2a4>)
 802bd0e:	f003 ff83 	bl	802fc18 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 802bd12:	4b8b      	ldr	r3, [pc, #556]	; (802bf40 <HAL_UART_MspInit+0x2a8>)
 802bd14:	4a8b      	ldr	r2, [pc, #556]	; (802bf44 <HAL_UART_MspInit+0x2ac>)
 802bd16:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 802bd18:	4b89      	ldr	r3, [pc, #548]	; (802bf40 <HAL_UART_MspInit+0x2a8>)
 802bd1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 802bd1e:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 802bd20:	4b87      	ldr	r3, [pc, #540]	; (802bf40 <HAL_UART_MspInit+0x2a8>)
 802bd22:	2200      	movs	r2, #0
 802bd24:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 802bd26:	4b86      	ldr	r3, [pc, #536]	; (802bf40 <HAL_UART_MspInit+0x2a8>)
 802bd28:	2200      	movs	r2, #0
 802bd2a:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 802bd2c:	4b84      	ldr	r3, [pc, #528]	; (802bf40 <HAL_UART_MspInit+0x2a8>)
 802bd2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802bd32:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 802bd34:	4b82      	ldr	r3, [pc, #520]	; (802bf40 <HAL_UART_MspInit+0x2a8>)
 802bd36:	2200      	movs	r2, #0
 802bd38:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 802bd3a:	4b81      	ldr	r3, [pc, #516]	; (802bf40 <HAL_UART_MspInit+0x2a8>)
 802bd3c:	2200      	movs	r2, #0
 802bd3e:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 802bd40:	4b7f      	ldr	r3, [pc, #508]	; (802bf40 <HAL_UART_MspInit+0x2a8>)
 802bd42:	f44f 7280 	mov.w	r2, #256	; 0x100
 802bd46:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 802bd48:	4b7d      	ldr	r3, [pc, #500]	; (802bf40 <HAL_UART_MspInit+0x2a8>)
 802bd4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 802bd4e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 802bd50:	4b7b      	ldr	r3, [pc, #492]	; (802bf40 <HAL_UART_MspInit+0x2a8>)
 802bd52:	2200      	movs	r2, #0
 802bd54:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 802bd56:	487a      	ldr	r0, [pc, #488]	; (802bf40 <HAL_UART_MspInit+0x2a8>)
 802bd58:	f003 fbc0 	bl	802f4dc <HAL_DMA_Init>
 802bd5c:	4603      	mov	r3, r0
 802bd5e:	2b00      	cmp	r3, #0
 802bd60:	d001      	beq.n	802bd66 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 802bd62:	f7ff fb81 	bl	802b468 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 802bd66:	687b      	ldr	r3, [r7, #4]
 802bd68:	4a75      	ldr	r2, [pc, #468]	; (802bf40 <HAL_UART_MspInit+0x2a8>)
 802bd6a:	635a      	str	r2, [r3, #52]	; 0x34
 802bd6c:	4a74      	ldr	r2, [pc, #464]	; (802bf40 <HAL_UART_MspInit+0x2a8>)
 802bd6e:	687b      	ldr	r3, [r7, #4]
 802bd70:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 802bd72:	2200      	movs	r2, #0
 802bd74:	2105      	movs	r1, #5
 802bd76:	2034      	movs	r0, #52	; 0x34
 802bd78:	f001 fe85 	bl	802da86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 802bd7c:	2034      	movs	r0, #52	; 0x34
 802bd7e:	f001 fe9e 	bl	802dabe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 802bd82:	e0d3      	b.n	802bf2c <HAL_UART_MspInit+0x294>
  else if(huart->Instance==USART1)
 802bd84:	687b      	ldr	r3, [r7, #4]
 802bd86:	681b      	ldr	r3, [r3, #0]
 802bd88:	4a6f      	ldr	r2, [pc, #444]	; (802bf48 <HAL_UART_MspInit+0x2b0>)
 802bd8a:	4293      	cmp	r3, r2
 802bd8c:	d165      	bne.n	802be5a <HAL_UART_MspInit+0x1c2>
    __HAL_RCC_USART1_CLK_ENABLE();
 802bd8e:	2300      	movs	r3, #0
 802bd90:	61bb      	str	r3, [r7, #24]
 802bd92:	4b69      	ldr	r3, [pc, #420]	; (802bf38 <HAL_UART_MspInit+0x2a0>)
 802bd94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802bd96:	4a68      	ldr	r2, [pc, #416]	; (802bf38 <HAL_UART_MspInit+0x2a0>)
 802bd98:	f043 0310 	orr.w	r3, r3, #16
 802bd9c:	6453      	str	r3, [r2, #68]	; 0x44
 802bd9e:	4b66      	ldr	r3, [pc, #408]	; (802bf38 <HAL_UART_MspInit+0x2a0>)
 802bda0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802bda2:	f003 0310 	and.w	r3, r3, #16
 802bda6:	61bb      	str	r3, [r7, #24]
 802bda8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802bdaa:	2300      	movs	r3, #0
 802bdac:	617b      	str	r3, [r7, #20]
 802bdae:	4b62      	ldr	r3, [pc, #392]	; (802bf38 <HAL_UART_MspInit+0x2a0>)
 802bdb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802bdb2:	4a61      	ldr	r2, [pc, #388]	; (802bf38 <HAL_UART_MspInit+0x2a0>)
 802bdb4:	f043 0301 	orr.w	r3, r3, #1
 802bdb8:	6313      	str	r3, [r2, #48]	; 0x30
 802bdba:	4b5f      	ldr	r3, [pc, #380]	; (802bf38 <HAL_UART_MspInit+0x2a0>)
 802bdbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802bdbe:	f003 0301 	and.w	r3, r3, #1
 802bdc2:	617b      	str	r3, [r7, #20]
 802bdc4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = INT_NET_TX_Pin|INT_NET_RX_Pin;
 802bdc6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 802bdca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802bdcc:	2302      	movs	r3, #2
 802bdce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802bdd0:	2300      	movs	r3, #0
 802bdd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802bdd4:	2303      	movs	r3, #3
 802bdd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 802bdd8:	2307      	movs	r3, #7
 802bdda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802bddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802bde0:	4619      	mov	r1, r3
 802bde2:	4856      	ldr	r0, [pc, #344]	; (802bf3c <HAL_UART_MspInit+0x2a4>)
 802bde4:	f003 ff18 	bl	802fc18 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 802bde8:	4b58      	ldr	r3, [pc, #352]	; (802bf4c <HAL_UART_MspInit+0x2b4>)
 802bdea:	4a59      	ldr	r2, [pc, #356]	; (802bf50 <HAL_UART_MspInit+0x2b8>)
 802bdec:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 802bdee:	4b57      	ldr	r3, [pc, #348]	; (802bf4c <HAL_UART_MspInit+0x2b4>)
 802bdf0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 802bdf4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 802bdf6:	4b55      	ldr	r3, [pc, #340]	; (802bf4c <HAL_UART_MspInit+0x2b4>)
 802bdf8:	2200      	movs	r2, #0
 802bdfa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 802bdfc:	4b53      	ldr	r3, [pc, #332]	; (802bf4c <HAL_UART_MspInit+0x2b4>)
 802bdfe:	2200      	movs	r2, #0
 802be00:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 802be02:	4b52      	ldr	r3, [pc, #328]	; (802bf4c <HAL_UART_MspInit+0x2b4>)
 802be04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802be08:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 802be0a:	4b50      	ldr	r3, [pc, #320]	; (802bf4c <HAL_UART_MspInit+0x2b4>)
 802be0c:	2200      	movs	r2, #0
 802be0e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 802be10:	4b4e      	ldr	r3, [pc, #312]	; (802bf4c <HAL_UART_MspInit+0x2b4>)
 802be12:	2200      	movs	r2, #0
 802be14:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 802be16:	4b4d      	ldr	r3, [pc, #308]	; (802bf4c <HAL_UART_MspInit+0x2b4>)
 802be18:	f44f 7280 	mov.w	r2, #256	; 0x100
 802be1c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 802be1e:	4b4b      	ldr	r3, [pc, #300]	; (802bf4c <HAL_UART_MspInit+0x2b4>)
 802be20:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 802be24:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 802be26:	4b49      	ldr	r3, [pc, #292]	; (802bf4c <HAL_UART_MspInit+0x2b4>)
 802be28:	2200      	movs	r2, #0
 802be2a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 802be2c:	4847      	ldr	r0, [pc, #284]	; (802bf4c <HAL_UART_MspInit+0x2b4>)
 802be2e:	f003 fb55 	bl	802f4dc <HAL_DMA_Init>
 802be32:	4603      	mov	r3, r0
 802be34:	2b00      	cmp	r3, #0
 802be36:	d001      	beq.n	802be3c <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 802be38:	f7ff fb16 	bl	802b468 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 802be3c:	687b      	ldr	r3, [r7, #4]
 802be3e:	4a43      	ldr	r2, [pc, #268]	; (802bf4c <HAL_UART_MspInit+0x2b4>)
 802be40:	635a      	str	r2, [r3, #52]	; 0x34
 802be42:	4a42      	ldr	r2, [pc, #264]	; (802bf4c <HAL_UART_MspInit+0x2b4>)
 802be44:	687b      	ldr	r3, [r7, #4]
 802be46:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 802be48:	2200      	movs	r2, #0
 802be4a:	2105      	movs	r1, #5
 802be4c:	2025      	movs	r0, #37	; 0x25
 802be4e:	f001 fe1a 	bl	802da86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 802be52:	2025      	movs	r0, #37	; 0x25
 802be54:	f001 fe33 	bl	802dabe <HAL_NVIC_EnableIRQ>
}
 802be58:	e068      	b.n	802bf2c <HAL_UART_MspInit+0x294>
  else if(huart->Instance==USART2)
 802be5a:	687b      	ldr	r3, [r7, #4]
 802be5c:	681b      	ldr	r3, [r3, #0]
 802be5e:	4a3d      	ldr	r2, [pc, #244]	; (802bf54 <HAL_UART_MspInit+0x2bc>)
 802be60:	4293      	cmp	r3, r2
 802be62:	d163      	bne.n	802bf2c <HAL_UART_MspInit+0x294>
    __HAL_RCC_USART2_CLK_ENABLE();
 802be64:	2300      	movs	r3, #0
 802be66:	613b      	str	r3, [r7, #16]
 802be68:	4b33      	ldr	r3, [pc, #204]	; (802bf38 <HAL_UART_MspInit+0x2a0>)
 802be6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802be6c:	4a32      	ldr	r2, [pc, #200]	; (802bf38 <HAL_UART_MspInit+0x2a0>)
 802be6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802be72:	6413      	str	r3, [r2, #64]	; 0x40
 802be74:	4b30      	ldr	r3, [pc, #192]	; (802bf38 <HAL_UART_MspInit+0x2a0>)
 802be76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802be78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802be7c:	613b      	str	r3, [r7, #16]
 802be7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802be80:	2300      	movs	r3, #0
 802be82:	60fb      	str	r3, [r7, #12]
 802be84:	4b2c      	ldr	r3, [pc, #176]	; (802bf38 <HAL_UART_MspInit+0x2a0>)
 802be86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802be88:	4a2b      	ldr	r2, [pc, #172]	; (802bf38 <HAL_UART_MspInit+0x2a0>)
 802be8a:	f043 0301 	orr.w	r3, r3, #1
 802be8e:	6313      	str	r3, [r2, #48]	; 0x30
 802be90:	4b29      	ldr	r3, [pc, #164]	; (802bf38 <HAL_UART_MspInit+0x2a0>)
 802be92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802be94:	f003 0301 	and.w	r3, r3, #1
 802be98:	60fb      	str	r3, [r7, #12]
 802be9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INT_GPS_TX_Pin|INT_GPS_RX_Pin;
 802be9c:	230c      	movs	r3, #12
 802be9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802bea0:	2302      	movs	r3, #2
 802bea2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802bea4:	2300      	movs	r3, #0
 802bea6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802bea8:	2303      	movs	r3, #3
 802beaa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 802beac:	2307      	movs	r3, #7
 802beae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802beb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802beb4:	4619      	mov	r1, r3
 802beb6:	4821      	ldr	r0, [pc, #132]	; (802bf3c <HAL_UART_MspInit+0x2a4>)
 802beb8:	f003 feae 	bl	802fc18 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 802bebc:	4b26      	ldr	r3, [pc, #152]	; (802bf58 <HAL_UART_MspInit+0x2c0>)
 802bebe:	4a27      	ldr	r2, [pc, #156]	; (802bf5c <HAL_UART_MspInit+0x2c4>)
 802bec0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 802bec2:	4b25      	ldr	r3, [pc, #148]	; (802bf58 <HAL_UART_MspInit+0x2c0>)
 802bec4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 802bec8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 802beca:	4b23      	ldr	r3, [pc, #140]	; (802bf58 <HAL_UART_MspInit+0x2c0>)
 802becc:	2200      	movs	r2, #0
 802bece:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 802bed0:	4b21      	ldr	r3, [pc, #132]	; (802bf58 <HAL_UART_MspInit+0x2c0>)
 802bed2:	2200      	movs	r2, #0
 802bed4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 802bed6:	4b20      	ldr	r3, [pc, #128]	; (802bf58 <HAL_UART_MspInit+0x2c0>)
 802bed8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802bedc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 802bede:	4b1e      	ldr	r3, [pc, #120]	; (802bf58 <HAL_UART_MspInit+0x2c0>)
 802bee0:	2200      	movs	r2, #0
 802bee2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 802bee4:	4b1c      	ldr	r3, [pc, #112]	; (802bf58 <HAL_UART_MspInit+0x2c0>)
 802bee6:	2200      	movs	r2, #0
 802bee8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 802beea:	4b1b      	ldr	r3, [pc, #108]	; (802bf58 <HAL_UART_MspInit+0x2c0>)
 802beec:	f44f 7280 	mov.w	r2, #256	; 0x100
 802bef0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 802bef2:	4b19      	ldr	r3, [pc, #100]	; (802bf58 <HAL_UART_MspInit+0x2c0>)
 802bef4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 802bef8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 802befa:	4b17      	ldr	r3, [pc, #92]	; (802bf58 <HAL_UART_MspInit+0x2c0>)
 802befc:	2200      	movs	r2, #0
 802befe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 802bf00:	4815      	ldr	r0, [pc, #84]	; (802bf58 <HAL_UART_MspInit+0x2c0>)
 802bf02:	f003 faeb 	bl	802f4dc <HAL_DMA_Init>
 802bf06:	4603      	mov	r3, r0
 802bf08:	2b00      	cmp	r3, #0
 802bf0a:	d001      	beq.n	802bf10 <HAL_UART_MspInit+0x278>
      Error_Handler();
 802bf0c:	f7ff faac 	bl	802b468 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 802bf10:	687b      	ldr	r3, [r7, #4]
 802bf12:	4a11      	ldr	r2, [pc, #68]	; (802bf58 <HAL_UART_MspInit+0x2c0>)
 802bf14:	635a      	str	r2, [r3, #52]	; 0x34
 802bf16:	4a10      	ldr	r2, [pc, #64]	; (802bf58 <HAL_UART_MspInit+0x2c0>)
 802bf18:	687b      	ldr	r3, [r7, #4]
 802bf1a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 802bf1c:	2200      	movs	r2, #0
 802bf1e:	2105      	movs	r1, #5
 802bf20:	2026      	movs	r0, #38	; 0x26
 802bf22:	f001 fdb0 	bl	802da86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 802bf26:	2026      	movs	r0, #38	; 0x26
 802bf28:	f001 fdc9 	bl	802dabe <HAL_NVIC_EnableIRQ>
}
 802bf2c:	bf00      	nop
 802bf2e:	3738      	adds	r7, #56	; 0x38
 802bf30:	46bd      	mov	sp, r7
 802bf32:	bd80      	pop	{r7, pc}
 802bf34:	40004c00 	.word	0x40004c00
 802bf38:	40023800 	.word	0x40023800
 802bf3c:	40020000 	.word	0x40020000
 802bf40:	20008464 	.word	0x20008464
 802bf44:	40026040 	.word	0x40026040
 802bf48:	40011000 	.word	0x40011000
 802bf4c:	20008748 	.word	0x20008748
 802bf50:	40026440 	.word	0x40026440
 802bf54:	40004400 	.word	0x40004400
 802bf58:	200084c4 	.word	0x200084c4
 802bf5c:	40026088 	.word	0x40026088

0802bf60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 802bf60:	b580      	push	{r7, lr}
 802bf62:	b08c      	sub	sp, #48	; 0x30
 802bf64:	af00      	add	r7, sp, #0
 802bf66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 802bf68:	2300      	movs	r3, #0
 802bf6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 802bf6c:	2300      	movs	r3, #0
 802bf6e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 802bf70:	2200      	movs	r2, #0
 802bf72:	6879      	ldr	r1, [r7, #4]
 802bf74:	2019      	movs	r0, #25
 802bf76:	f001 fd86 	bl	802da86 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 802bf7a:	2019      	movs	r0, #25
 802bf7c:	f001 fd9f 	bl	802dabe <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 802bf80:	2300      	movs	r3, #0
 802bf82:	60fb      	str	r3, [r7, #12]
 802bf84:	4b1e      	ldr	r3, [pc, #120]	; (802c000 <HAL_InitTick+0xa0>)
 802bf86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802bf88:	4a1d      	ldr	r2, [pc, #116]	; (802c000 <HAL_InitTick+0xa0>)
 802bf8a:	f043 0301 	orr.w	r3, r3, #1
 802bf8e:	6453      	str	r3, [r2, #68]	; 0x44
 802bf90:	4b1b      	ldr	r3, [pc, #108]	; (802c000 <HAL_InitTick+0xa0>)
 802bf92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802bf94:	f003 0301 	and.w	r3, r3, #1
 802bf98:	60fb      	str	r3, [r7, #12]
 802bf9a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 802bf9c:	f107 0210 	add.w	r2, r7, #16
 802bfa0:	f107 0314 	add.w	r3, r7, #20
 802bfa4:	4611      	mov	r1, r2
 802bfa6:	4618      	mov	r0, r3
 802bfa8:	f008 f810 	bl	8033fcc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 802bfac:	f007 fffa 	bl	8033fa4 <HAL_RCC_GetPCLK2Freq>
 802bfb0:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 802bfb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802bfb4:	4a13      	ldr	r2, [pc, #76]	; (802c004 <HAL_InitTick+0xa4>)
 802bfb6:	fba2 2303 	umull	r2, r3, r2, r3
 802bfba:	0c9b      	lsrs	r3, r3, #18
 802bfbc:	3b01      	subs	r3, #1
 802bfbe:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 802bfc0:	4b11      	ldr	r3, [pc, #68]	; (802c008 <HAL_InitTick+0xa8>)
 802bfc2:	4a12      	ldr	r2, [pc, #72]	; (802c00c <HAL_InitTick+0xac>)
 802bfc4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 802bfc6:	4b10      	ldr	r3, [pc, #64]	; (802c008 <HAL_InitTick+0xa8>)
 802bfc8:	f240 32e7 	movw	r2, #999	; 0x3e7
 802bfcc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 802bfce:	4a0e      	ldr	r2, [pc, #56]	; (802c008 <HAL_InitTick+0xa8>)
 802bfd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802bfd2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 802bfd4:	4b0c      	ldr	r3, [pc, #48]	; (802c008 <HAL_InitTick+0xa8>)
 802bfd6:	2200      	movs	r2, #0
 802bfd8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 802bfda:	4b0b      	ldr	r3, [pc, #44]	; (802c008 <HAL_InitTick+0xa8>)
 802bfdc:	2200      	movs	r2, #0
 802bfde:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 802bfe0:	4809      	ldr	r0, [pc, #36]	; (802c008 <HAL_InitTick+0xa8>)
 802bfe2:	f009 fd51 	bl	8035a88 <HAL_TIM_Base_Init>
 802bfe6:	4603      	mov	r3, r0
 802bfe8:	2b00      	cmp	r3, #0
 802bfea:	d104      	bne.n	802bff6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 802bfec:	4806      	ldr	r0, [pc, #24]	; (802c008 <HAL_InitTick+0xa8>)
 802bfee:	f009 fd76 	bl	8035ade <HAL_TIM_Base_Start_IT>
 802bff2:	4603      	mov	r3, r0
 802bff4:	e000      	b.n	802bff8 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 802bff6:	2301      	movs	r3, #1
}
 802bff8:	4618      	mov	r0, r3
 802bffa:	3730      	adds	r7, #48	; 0x30
 802bffc:	46bd      	mov	sp, r7
 802bffe:	bd80      	pop	{r7, pc}
 802c000:	40023800 	.word	0x40023800
 802c004:	431bde83 	.word	0x431bde83
 802c008:	20008a60 	.word	0x20008a60
 802c00c:	40010000 	.word	0x40010000

0802c010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 802c010:	b580      	push	{r7, lr}
 802c012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	_Error("NMI_Handler.");
 802c014:	4802      	ldr	r0, [pc, #8]	; (802c020 <NMI_Handler+0x10>)
 802c016:	f013 fb81 	bl	803f71c <_Error>

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 802c01a:	bf00      	nop
 802c01c:	bd80      	pop	{r7, pc}
 802c01e:	bf00      	nop
 802c020:	08043984 	.word	0x08043984

0802c024 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 802c024:	b580      	push	{r7, lr}
 802c026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	_Error("Hard fault interrupt.");
 802c028:	4801      	ldr	r0, [pc, #4]	; (802c030 <HardFault_Handler+0xc>)
 802c02a:	f013 fb77 	bl	803f71c <_Error>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 802c02e:	e7fe      	b.n	802c02e <HardFault_Handler+0xa>
 802c030:	08043994 	.word	0x08043994

0802c034 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 802c034:	b580      	push	{r7, lr}
 802c036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	_Error("Memory management fault.");
 802c038:	4801      	ldr	r0, [pc, #4]	; (802c040 <MemManage_Handler+0xc>)
 802c03a:	f013 fb6f 	bl	803f71c <_Error>

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 802c03e:	e7fe      	b.n	802c03e <MemManage_Handler+0xa>
 802c040:	080439ac 	.word	0x080439ac

0802c044 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 802c044:	b580      	push	{r7, lr}
 802c046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	_Error("Pre-fetch fault, memory access fault.");
 802c048:	4801      	ldr	r0, [pc, #4]	; (802c050 <BusFault_Handler+0xc>)
 802c04a:	f013 fb67 	bl	803f71c <_Error>

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 802c04e:	e7fe      	b.n	802c04e <BusFault_Handler+0xa>
 802c050:	080439c8 	.word	0x080439c8

0802c054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 802c054:	b580      	push	{r7, lr}
 802c056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	_Error("Undefined instruction or illegal state.");
 802c058:	4801      	ldr	r0, [pc, #4]	; (802c060 <UsageFault_Handler+0xc>)
 802c05a:	f013 fb5f 	bl	803f71c <_Error>

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 802c05e:	e7fe      	b.n	802c05e <UsageFault_Handler+0xa>
 802c060:	080439f0 	.word	0x080439f0

0802c064 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 802c064:	b580      	push	{r7, lr}
 802c066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
	_Error("Debug monitor error.");
 802c068:	4802      	ldr	r0, [pc, #8]	; (802c074 <DebugMon_Handler+0x10>)
 802c06a:	f013 fb57 	bl	803f71c <_Error>

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 802c06e:	bf00      	nop
 802c070:	bd80      	pop	{r7, pc}
 802c072:	bf00      	nop
 802c074:	08043a18 	.word	0x08043a18

0802c078 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 802c078:	b580      	push	{r7, lr}
 802c07a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 802c07c:	2001      	movs	r0, #1
 802c07e:	f004 f89b 	bl	80301b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 802c082:	bf00      	nop
 802c084:	bd80      	pop	{r7, pc}

0802c086 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 802c086:	b580      	push	{r7, lr}
 802c088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 802c08a:	2002      	movs	r0, #2
 802c08c:	f004 f894 	bl	80301b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 802c090:	bf00      	nop
 802c092:	bd80      	pop	{r7, pc}

0802c094 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 802c094:	b580      	push	{r7, lr}
 802c096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 802c098:	2004      	movs	r0, #4
 802c09a:	f004 f88d 	bl	80301b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 802c09e:	bf00      	nop
 802c0a0:	bd80      	pop	{r7, pc}

0802c0a2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 802c0a2:	b580      	push	{r7, lr}
 802c0a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 802c0a6:	2008      	movs	r0, #8
 802c0a8:	f004 f886 	bl	80301b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 802c0ac:	bf00      	nop
 802c0ae:	bd80      	pop	{r7, pc}

0802c0b0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 802c0b0:	b580      	push	{r7, lr}
 802c0b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 802c0b4:	4803      	ldr	r0, [pc, #12]	; (802c0c4 <DMA1_Stream2_IRQHandler+0x14>)
 802c0b6:	f003 fb39 	bl	802f72c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */
	FINGER_DMA_IrqHandler();
 802c0ba:	f7f5 f8af 	bl	802121c <FINGER_DMA_IrqHandler>

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 802c0be:	bf00      	nop
 802c0c0:	bd80      	pop	{r7, pc}
 802c0c2:	bf00      	nop
 802c0c4:	20008464 	.word	0x20008464

0802c0c8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 802c0c8:	b580      	push	{r7, lr}
 802c0ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 802c0cc:	4803      	ldr	r0, [pc, #12]	; (802c0dc <DMA1_Stream5_IRQHandler+0x14>)
 802c0ce:	f003 fb2d 	bl	802f72c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */
	UBLOX_DMA_IrqHandler();
 802c0d2:	f7f6 fa69 	bl	80225a8 <UBLOX_DMA_IrqHandler>

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 802c0d6:	bf00      	nop
 802c0d8:	bd80      	pop	{r7, pc}
 802c0da:	bf00      	nop
 802c0dc:	200084c4 	.word	0x200084c4

0802c0e0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 802c0e0:	b580      	push	{r7, lr}
 802c0e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 802c0e4:	4802      	ldr	r0, [pc, #8]	; (802c0f0 <CAN1_RX0_IRQHandler+0x10>)
 802c0e6:	f001 f9b5 	bl	802d454 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 802c0ea:	bf00      	nop
 802c0ec:	bd80      	pop	{r7, pc}
 802c0ee:	bf00      	nop
 802c0f0:	2000897c 	.word	0x2000897c

0802c0f4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 802c0f4:	b580      	push	{r7, lr}
 802c0f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 802c0f8:	2020      	movs	r0, #32
 802c0fa:	f004 f85d 	bl	80301b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 802c0fe:	2040      	movs	r0, #64	; 0x40
 802c100:	f004 f85a 	bl	80301b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 802c104:	2080      	movs	r0, #128	; 0x80
 802c106:	f004 f857 	bl	80301b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 802c10a:	f44f 7080 	mov.w	r0, #256	; 0x100
 802c10e:	f004 f853 	bl	80301b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 802c112:	f44f 7000 	mov.w	r0, #512	; 0x200
 802c116:	f004 f84f 	bl	80301b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 802c11a:	bf00      	nop
 802c11c:	bd80      	pop	{r7, pc}
	...

0802c120 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 802c120:	b580      	push	{r7, lr}
 802c122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 802c124:	4803      	ldr	r0, [pc, #12]	; (802c134 <TIM1_UP_TIM10_IRQHandler+0x14>)
 802c126:	f009 fd33 	bl	8035b90 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 802c12a:	4803      	ldr	r0, [pc, #12]	; (802c138 <TIM1_UP_TIM10_IRQHandler+0x18>)
 802c12c:	f009 fd30 	bl	8035b90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 802c130:	bf00      	nop
 802c132:	bd80      	pop	{r7, pc}
 802c134:	20008a60 	.word	0x20008a60
 802c138:	200085d8 	.word	0x200085d8

0802c13c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 802c13c:	b580      	push	{r7, lr}
 802c13e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 802c140:	4802      	ldr	r0, [pc, #8]	; (802c14c <I2C1_EV_IRQHandler+0x10>)
 802c142:	f004 fed5 	bl	8030ef0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 802c146:	bf00      	nop
 802c148:	bd80      	pop	{r7, pc}
 802c14a:	bf00      	nop
 802c14c:	2000857c 	.word	0x2000857c

0802c150 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 802c150:	b580      	push	{r7, lr}
 802c152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 802c154:	4802      	ldr	r0, [pc, #8]	; (802c160 <I2C1_ER_IRQHandler+0x10>)
 802c156:	f005 f831 	bl	80311bc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 802c15a:	bf00      	nop
 802c15c:	bd80      	pop	{r7, pc}
 802c15e:	bf00      	nop
 802c160:	2000857c 	.word	0x2000857c

0802c164 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 802c164:	b580      	push	{r7, lr}
 802c166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 802c168:	4803      	ldr	r0, [pc, #12]	; (802c178 <USART1_IRQHandler+0x14>)
 802c16a:	f00a fad1 	bl	8036710 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
	SIMCOM_USART_IrqHandler();
 802c16e:	f00f fd6d 	bl	803bc4c <SIMCOM_USART_IrqHandler>

  /* USER CODE END USART1_IRQn 1 */
}
 802c172:	bf00      	nop
 802c174:	bd80      	pop	{r7, pc}
 802c176:	bf00      	nop
 802c178:	200087ac 	.word	0x200087ac

0802c17c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 802c17c:	b580      	push	{r7, lr}
 802c17e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 802c180:	4803      	ldr	r0, [pc, #12]	; (802c190 <USART2_IRQHandler+0x14>)
 802c182:	f00a fac5 	bl	8036710 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
	UBLOX_USART_IrqHandler();
 802c186:	f7f6 f9f1 	bl	802256c <UBLOX_USART_IrqHandler>

  /* USER CODE END USART2_IRQn 1 */
}
 802c18a:	bf00      	nop
 802c18c:	bd80      	pop	{r7, pc}
 802c18e:	bf00      	nop
 802c190:	20008938 	.word	0x20008938

0802c194 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 802c194:	b580      	push	{r7, lr}
 802c196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 802c198:	f44f 6000 	mov.w	r0, #2048	; 0x800
 802c19c:	f004 f80c 	bl	80301b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 802c1a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 802c1a4:	f004 f808 	bl	80301b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 802c1a8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 802c1ac:	f004 f804 	bl	80301b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 802c1b0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 802c1b4:	f004 f800 	bl	80301b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 802c1b8:	bf00      	nop
 802c1ba:	bd80      	pop	{r7, pc}

0802c1bc <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 802c1bc:	b580      	push	{r7, lr}
 802c1be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 802c1c0:	4802      	ldr	r0, [pc, #8]	; (802c1cc <DMA1_Stream7_IRQHandler+0x10>)
 802c1c2:	f003 fab3 	bl	802f72c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 802c1c6:	bf00      	nop
 802c1c8:	bd80      	pop	{r7, pc}
 802c1ca:	bf00      	nop
 802c1cc:	20008698 	.word	0x20008698

0802c1d0 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 802c1d0:	b580      	push	{r7, lr}
 802c1d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 802c1d4:	4802      	ldr	r0, [pc, #8]	; (802c1e0 <SPI3_IRQHandler+0x10>)
 802c1d6:	f007 f8f9 	bl	80333cc <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 802c1da:	bf00      	nop
 802c1dc:	bd80      	pop	{r7, pc}
 802c1de:	bf00      	nop
 802c1e0:	20008a08 	.word	0x20008a08

0802c1e4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 802c1e4:	b580      	push	{r7, lr}
 802c1e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 802c1e8:	4803      	ldr	r0, [pc, #12]	; (802c1f8 <UART4_IRQHandler+0x14>)
 802c1ea:	f00a fa91 	bl	8036710 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
	FINGER_USART_IrqHandler();
 802c1ee:	f7f4 fff7 	bl	80211e0 <FINGER_USART_IrqHandler>

  /* USER CODE END UART4_IRQn 1 */
}
 802c1f2:	bf00      	nop
 802c1f4:	bd80      	pop	{r7, pc}
 802c1f6:	bf00      	nop
 802c1f8:	20008898 	.word	0x20008898

0802c1fc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 802c1fc:	b580      	push	{r7, lr}
 802c1fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 802c200:	4802      	ldr	r0, [pc, #8]	; (802c20c <DMA2_Stream0_IRQHandler+0x10>)
 802c202:	f003 fa93 	bl	802f72c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 802c206:	bf00      	nop
 802c208:	bd80      	pop	{r7, pc}
 802c20a:	bf00      	nop
 802c20c:	200087ec 	.word	0x200087ec

0802c210 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 802c210:	b580      	push	{r7, lr}
 802c212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 802c214:	4803      	ldr	r0, [pc, #12]	; (802c224 <DMA2_Stream2_IRQHandler+0x14>)
 802c216:	f003 fa89 	bl	802f72c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */
	SIMCOM_DMA_IrqHandler();
 802c21a:	f00f fd35 	bl	803bc88 <SIMCOM_DMA_IrqHandler>

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 802c21e:	bf00      	nop
 802c220:	bd80      	pop	{r7, pc}
 802c222:	bf00      	nop
 802c224:	20008748 	.word	0x20008748

0802c228 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 802c228:	b580      	push	{r7, lr}
 802c22a:	b084      	sub	sp, #16
 802c22c:	af00      	add	r7, sp, #0
 802c22e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 802c230:	4b11      	ldr	r3, [pc, #68]	; (802c278 <_sbrk+0x50>)
 802c232:	681b      	ldr	r3, [r3, #0]
 802c234:	2b00      	cmp	r3, #0
 802c236:	d102      	bne.n	802c23e <_sbrk+0x16>
		heap_end = &end;
 802c238:	4b0f      	ldr	r3, [pc, #60]	; (802c278 <_sbrk+0x50>)
 802c23a:	4a10      	ldr	r2, [pc, #64]	; (802c27c <_sbrk+0x54>)
 802c23c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 802c23e:	4b0e      	ldr	r3, [pc, #56]	; (802c278 <_sbrk+0x50>)
 802c240:	681b      	ldr	r3, [r3, #0]
 802c242:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 802c244:	4b0c      	ldr	r3, [pc, #48]	; (802c278 <_sbrk+0x50>)
 802c246:	681a      	ldr	r2, [r3, #0]
 802c248:	687b      	ldr	r3, [r7, #4]
 802c24a:	4413      	add	r3, r2
 802c24c:	466a      	mov	r2, sp
 802c24e:	4293      	cmp	r3, r2
 802c250:	d907      	bls.n	802c262 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 802c252:	f013 fb19 	bl	803f888 <__errno>
 802c256:	4602      	mov	r2, r0
 802c258:	230c      	movs	r3, #12
 802c25a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 802c25c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802c260:	e006      	b.n	802c270 <_sbrk+0x48>
	}

	heap_end += incr;
 802c262:	4b05      	ldr	r3, [pc, #20]	; (802c278 <_sbrk+0x50>)
 802c264:	681a      	ldr	r2, [r3, #0]
 802c266:	687b      	ldr	r3, [r7, #4]
 802c268:	4413      	add	r3, r2
 802c26a:	4a03      	ldr	r2, [pc, #12]	; (802c278 <_sbrk+0x50>)
 802c26c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 802c26e:	68fb      	ldr	r3, [r7, #12]
}
 802c270:	4618      	mov	r0, r3
 802c272:	3710      	adds	r7, #16
 802c274:	46bd      	mov	sp, r7
 802c276:	bd80      	pop	{r7, pc}
 802c278:	20000f30 	.word	0x20000f30
 802c27c:	200090e8 	.word	0x200090e8

0802c280 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 802c280:	b480      	push	{r7}
 802c282:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 802c284:	4b07      	ldr	r3, [pc, #28]	; (802c2a4 <SystemInit+0x24>)
 802c286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802c28a:	4a06      	ldr	r2, [pc, #24]	; (802c2a4 <SystemInit+0x24>)
 802c28c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 802c290:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 802c294:	4b03      	ldr	r3, [pc, #12]	; (802c2a4 <SystemInit+0x24>)
 802c296:	4a04      	ldr	r2, [pc, #16]	; (802c2a8 <SystemInit+0x28>)
 802c298:	609a      	str	r2, [r3, #8]
#endif
}
 802c29a:	bf00      	nop
 802c29c:	46bd      	mov	sp, r7
 802c29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c2a2:	4770      	bx	lr
 802c2a4:	e000ed00 	.word	0xe000ed00
 802c2a8:	08020000 	.word	0x08020000

0802c2ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 802c2ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 802c2e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 802c2b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 802c2b2:	e003      	b.n	802c2bc <LoopCopyDataInit>

0802c2b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 802c2b4:	4b0c      	ldr	r3, [pc, #48]	; (802c2e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 802c2b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 802c2b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 802c2ba:	3104      	adds	r1, #4

0802c2bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 802c2bc:	480b      	ldr	r0, [pc, #44]	; (802c2ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 802c2be:	4b0c      	ldr	r3, [pc, #48]	; (802c2f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 802c2c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 802c2c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 802c2c4:	d3f6      	bcc.n	802c2b4 <CopyDataInit>
  ldr  r2, =_sbss
 802c2c6:	4a0b      	ldr	r2, [pc, #44]	; (802c2f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 802c2c8:	e002      	b.n	802c2d0 <LoopFillZerobss>

0802c2ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 802c2ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 802c2cc:	f842 3b04 	str.w	r3, [r2], #4

0802c2d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 802c2d0:	4b09      	ldr	r3, [pc, #36]	; (802c2f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 802c2d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 802c2d4:	d3f9      	bcc.n	802c2ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 802c2d6:	f7ff ffd3 	bl	802c280 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 802c2da:	f013 fadb 	bl	803f894 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 802c2de:	f7fd f9b3 	bl	8029648 <main>
  bx  lr    
 802c2e2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 802c2e4:	2004fff8 	.word	0x2004fff8
  ldr  r3, =_sidata
 802c2e8:	08056520 	.word	0x08056520
  ldr  r0, =_sdata
 802c2ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 802c2f0:	20000498 	.word	0x20000498
  ldr  r2, =_sbss
 802c2f4:	20000498 	.word	0x20000498
  ldr  r3, = _ebss
 802c2f8:	200090e8 	.word	0x200090e8

0802c2fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 802c2fc:	e7fe      	b.n	802c2fc <ADC_IRQHandler>
	...

0802c300 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 802c300:	b580      	push	{r7, lr}
 802c302:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 802c304:	4b0e      	ldr	r3, [pc, #56]	; (802c340 <HAL_Init+0x40>)
 802c306:	681b      	ldr	r3, [r3, #0]
 802c308:	4a0d      	ldr	r2, [pc, #52]	; (802c340 <HAL_Init+0x40>)
 802c30a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 802c30e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 802c310:	4b0b      	ldr	r3, [pc, #44]	; (802c340 <HAL_Init+0x40>)
 802c312:	681b      	ldr	r3, [r3, #0]
 802c314:	4a0a      	ldr	r2, [pc, #40]	; (802c340 <HAL_Init+0x40>)
 802c316:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 802c31a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 802c31c:	4b08      	ldr	r3, [pc, #32]	; (802c340 <HAL_Init+0x40>)
 802c31e:	681b      	ldr	r3, [r3, #0]
 802c320:	4a07      	ldr	r2, [pc, #28]	; (802c340 <HAL_Init+0x40>)
 802c322:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802c326:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 802c328:	2003      	movs	r0, #3
 802c32a:	f001 fba1 	bl	802da70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 802c32e:	2000      	movs	r0, #0
 802c330:	f7ff fe16 	bl	802bf60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 802c334:	f7ff f8a2 	bl	802b47c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 802c338:	2300      	movs	r3, #0
}
 802c33a:	4618      	mov	r0, r3
 802c33c:	bd80      	pop	{r7, pc}
 802c33e:	bf00      	nop
 802c340:	40023c00 	.word	0x40023c00

0802c344 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 802c344:	b480      	push	{r7}
 802c346:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 802c348:	4b06      	ldr	r3, [pc, #24]	; (802c364 <HAL_IncTick+0x20>)
 802c34a:	781b      	ldrb	r3, [r3, #0]
 802c34c:	461a      	mov	r2, r3
 802c34e:	4b06      	ldr	r3, [pc, #24]	; (802c368 <HAL_IncTick+0x24>)
 802c350:	681b      	ldr	r3, [r3, #0]
 802c352:	4413      	add	r3, r2
 802c354:	4a04      	ldr	r2, [pc, #16]	; (802c368 <HAL_IncTick+0x24>)
 802c356:	6013      	str	r3, [r2, #0]
}
 802c358:	bf00      	nop
 802c35a:	46bd      	mov	sp, r7
 802c35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c360:	4770      	bx	lr
 802c362:	bf00      	nop
 802c364:	2000029c 	.word	0x2000029c
 802c368:	20008aa0 	.word	0x20008aa0

0802c36c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 802c36c:	b480      	push	{r7}
 802c36e:	af00      	add	r7, sp, #0
  return uwTick;
 802c370:	4b03      	ldr	r3, [pc, #12]	; (802c380 <HAL_GetTick+0x14>)
 802c372:	681b      	ldr	r3, [r3, #0]
}
 802c374:	4618      	mov	r0, r3
 802c376:	46bd      	mov	sp, r7
 802c378:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c37c:	4770      	bx	lr
 802c37e:	bf00      	nop
 802c380:	20008aa0 	.word	0x20008aa0

0802c384 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 802c384:	b580      	push	{r7, lr}
 802c386:	b084      	sub	sp, #16
 802c388:	af00      	add	r7, sp, #0
 802c38a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 802c38c:	f7ff ffee 	bl	802c36c <HAL_GetTick>
 802c390:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 802c392:	687b      	ldr	r3, [r7, #4]
 802c394:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 802c396:	68fb      	ldr	r3, [r7, #12]
 802c398:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 802c39c:	d005      	beq.n	802c3aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 802c39e:	4b09      	ldr	r3, [pc, #36]	; (802c3c4 <HAL_Delay+0x40>)
 802c3a0:	781b      	ldrb	r3, [r3, #0]
 802c3a2:	461a      	mov	r2, r3
 802c3a4:	68fb      	ldr	r3, [r7, #12]
 802c3a6:	4413      	add	r3, r2
 802c3a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 802c3aa:	bf00      	nop
 802c3ac:	f7ff ffde 	bl	802c36c <HAL_GetTick>
 802c3b0:	4602      	mov	r2, r0
 802c3b2:	68bb      	ldr	r3, [r7, #8]
 802c3b4:	1ad3      	subs	r3, r2, r3
 802c3b6:	68fa      	ldr	r2, [r7, #12]
 802c3b8:	429a      	cmp	r2, r3
 802c3ba:	d8f7      	bhi.n	802c3ac <HAL_Delay+0x28>
  {
  }
}
 802c3bc:	bf00      	nop
 802c3be:	3710      	adds	r7, #16
 802c3c0:	46bd      	mov	sp, r7
 802c3c2:	bd80      	pop	{r7, pc}
 802c3c4:	2000029c 	.word	0x2000029c

0802c3c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 802c3c8:	b580      	push	{r7, lr}
 802c3ca:	b084      	sub	sp, #16
 802c3cc:	af00      	add	r7, sp, #0
 802c3ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 802c3d0:	2300      	movs	r3, #0
 802c3d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 802c3d4:	687b      	ldr	r3, [r7, #4]
 802c3d6:	2b00      	cmp	r3, #0
 802c3d8:	d101      	bne.n	802c3de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 802c3da:	2301      	movs	r3, #1
 802c3dc:	e033      	b.n	802c446 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 802c3de:	687b      	ldr	r3, [r7, #4]
 802c3e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802c3e2:	2b00      	cmp	r3, #0
 802c3e4:	d109      	bne.n	802c3fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 802c3e6:	6878      	ldr	r0, [r7, #4]
 802c3e8:	f7ff f874 	bl	802b4d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 802c3ec:	687b      	ldr	r3, [r7, #4]
 802c3ee:	2200      	movs	r2, #0
 802c3f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 802c3f2:	687b      	ldr	r3, [r7, #4]
 802c3f4:	2200      	movs	r2, #0
 802c3f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 802c3fa:	687b      	ldr	r3, [r7, #4]
 802c3fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802c3fe:	f003 0310 	and.w	r3, r3, #16
 802c402:	2b00      	cmp	r3, #0
 802c404:	d118      	bne.n	802c438 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 802c406:	687b      	ldr	r3, [r7, #4]
 802c408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802c40a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 802c40e:	f023 0302 	bic.w	r3, r3, #2
 802c412:	f043 0202 	orr.w	r2, r3, #2
 802c416:	687b      	ldr	r3, [r7, #4]
 802c418:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 802c41a:	6878      	ldr	r0, [r7, #4]
 802c41c:	f000 fa28 	bl	802c870 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 802c420:	687b      	ldr	r3, [r7, #4]
 802c422:	2200      	movs	r2, #0
 802c424:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 802c426:	687b      	ldr	r3, [r7, #4]
 802c428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802c42a:	f023 0303 	bic.w	r3, r3, #3
 802c42e:	f043 0201 	orr.w	r2, r3, #1
 802c432:	687b      	ldr	r3, [r7, #4]
 802c434:	641a      	str	r2, [r3, #64]	; 0x40
 802c436:	e001      	b.n	802c43c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 802c438:	2301      	movs	r3, #1
 802c43a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 802c43c:	687b      	ldr	r3, [r7, #4]
 802c43e:	2200      	movs	r2, #0
 802c440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 802c444:	7bfb      	ldrb	r3, [r7, #15]
}
 802c446:	4618      	mov	r0, r3
 802c448:	3710      	adds	r7, #16
 802c44a:	46bd      	mov	sp, r7
 802c44c:	bd80      	pop	{r7, pc}
	...

0802c450 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 802c450:	b580      	push	{r7, lr}
 802c452:	b086      	sub	sp, #24
 802c454:	af00      	add	r7, sp, #0
 802c456:	60f8      	str	r0, [r7, #12]
 802c458:	60b9      	str	r1, [r7, #8]
 802c45a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 802c45c:	2300      	movs	r3, #0
 802c45e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 802c460:	68fb      	ldr	r3, [r7, #12]
 802c462:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802c466:	2b01      	cmp	r3, #1
 802c468:	d101      	bne.n	802c46e <HAL_ADC_Start_DMA+0x1e>
 802c46a:	2302      	movs	r3, #2
 802c46c:	e0b1      	b.n	802c5d2 <HAL_ADC_Start_DMA+0x182>
 802c46e:	68fb      	ldr	r3, [r7, #12]
 802c470:	2201      	movs	r2, #1
 802c472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 802c476:	68fb      	ldr	r3, [r7, #12]
 802c478:	681b      	ldr	r3, [r3, #0]
 802c47a:	689b      	ldr	r3, [r3, #8]
 802c47c:	f003 0301 	and.w	r3, r3, #1
 802c480:	2b01      	cmp	r3, #1
 802c482:	d018      	beq.n	802c4b6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 802c484:	68fb      	ldr	r3, [r7, #12]
 802c486:	681b      	ldr	r3, [r3, #0]
 802c488:	689a      	ldr	r2, [r3, #8]
 802c48a:	68fb      	ldr	r3, [r7, #12]
 802c48c:	681b      	ldr	r3, [r3, #0]
 802c48e:	f042 0201 	orr.w	r2, r2, #1
 802c492:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 802c494:	4b51      	ldr	r3, [pc, #324]	; (802c5dc <HAL_ADC_Start_DMA+0x18c>)
 802c496:	681b      	ldr	r3, [r3, #0]
 802c498:	4a51      	ldr	r2, [pc, #324]	; (802c5e0 <HAL_ADC_Start_DMA+0x190>)
 802c49a:	fba2 2303 	umull	r2, r3, r2, r3
 802c49e:	0c9a      	lsrs	r2, r3, #18
 802c4a0:	4613      	mov	r3, r2
 802c4a2:	005b      	lsls	r3, r3, #1
 802c4a4:	4413      	add	r3, r2
 802c4a6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 802c4a8:	e002      	b.n	802c4b0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 802c4aa:	693b      	ldr	r3, [r7, #16]
 802c4ac:	3b01      	subs	r3, #1
 802c4ae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 802c4b0:	693b      	ldr	r3, [r7, #16]
 802c4b2:	2b00      	cmp	r3, #0
 802c4b4:	d1f9      	bne.n	802c4aa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 802c4b6:	68fb      	ldr	r3, [r7, #12]
 802c4b8:	681b      	ldr	r3, [r3, #0]
 802c4ba:	689b      	ldr	r3, [r3, #8]
 802c4bc:	f003 0301 	and.w	r3, r3, #1
 802c4c0:	2b01      	cmp	r3, #1
 802c4c2:	f040 8085 	bne.w	802c5d0 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 802c4c6:	68fb      	ldr	r3, [r7, #12]
 802c4c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802c4ca:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 802c4ce:	f023 0301 	bic.w	r3, r3, #1
 802c4d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 802c4d6:	68fb      	ldr	r3, [r7, #12]
 802c4d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 802c4da:	68fb      	ldr	r3, [r7, #12]
 802c4dc:	681b      	ldr	r3, [r3, #0]
 802c4de:	685b      	ldr	r3, [r3, #4]
 802c4e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802c4e4:	2b00      	cmp	r3, #0
 802c4e6:	d007      	beq.n	802c4f8 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 802c4e8:	68fb      	ldr	r3, [r7, #12]
 802c4ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802c4ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 802c4f0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 802c4f4:	68fb      	ldr	r3, [r7, #12]
 802c4f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 802c4f8:	68fb      	ldr	r3, [r7, #12]
 802c4fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802c4fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802c500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802c504:	d106      	bne.n	802c514 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 802c506:	68fb      	ldr	r3, [r7, #12]
 802c508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802c50a:	f023 0206 	bic.w	r2, r3, #6
 802c50e:	68fb      	ldr	r3, [r7, #12]
 802c510:	645a      	str	r2, [r3, #68]	; 0x44
 802c512:	e002      	b.n	802c51a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 802c514:	68fb      	ldr	r3, [r7, #12]
 802c516:	2200      	movs	r2, #0
 802c518:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 802c51a:	68fb      	ldr	r3, [r7, #12]
 802c51c:	2200      	movs	r2, #0
 802c51e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 802c522:	4b30      	ldr	r3, [pc, #192]	; (802c5e4 <HAL_ADC_Start_DMA+0x194>)
 802c524:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 802c526:	68fb      	ldr	r3, [r7, #12]
 802c528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c52a:	4a2f      	ldr	r2, [pc, #188]	; (802c5e8 <HAL_ADC_Start_DMA+0x198>)
 802c52c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 802c52e:	68fb      	ldr	r3, [r7, #12]
 802c530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c532:	4a2e      	ldr	r2, [pc, #184]	; (802c5ec <HAL_ADC_Start_DMA+0x19c>)
 802c534:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 802c536:	68fb      	ldr	r3, [r7, #12]
 802c538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c53a:	4a2d      	ldr	r2, [pc, #180]	; (802c5f0 <HAL_ADC_Start_DMA+0x1a0>)
 802c53c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 802c53e:	68fb      	ldr	r3, [r7, #12]
 802c540:	681b      	ldr	r3, [r3, #0]
 802c542:	f06f 0222 	mvn.w	r2, #34	; 0x22
 802c546:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 802c548:	68fb      	ldr	r3, [r7, #12]
 802c54a:	681b      	ldr	r3, [r3, #0]
 802c54c:	685a      	ldr	r2, [r3, #4]
 802c54e:	68fb      	ldr	r3, [r7, #12]
 802c550:	681b      	ldr	r3, [r3, #0]
 802c552:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 802c556:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 802c558:	68fb      	ldr	r3, [r7, #12]
 802c55a:	681b      	ldr	r3, [r3, #0]
 802c55c:	689a      	ldr	r2, [r3, #8]
 802c55e:	68fb      	ldr	r3, [r7, #12]
 802c560:	681b      	ldr	r3, [r3, #0]
 802c562:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802c566:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 802c568:	68fb      	ldr	r3, [r7, #12]
 802c56a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 802c56c:	68fb      	ldr	r3, [r7, #12]
 802c56e:	681b      	ldr	r3, [r3, #0]
 802c570:	334c      	adds	r3, #76	; 0x4c
 802c572:	4619      	mov	r1, r3
 802c574:	68ba      	ldr	r2, [r7, #8]
 802c576:	687b      	ldr	r3, [r7, #4]
 802c578:	f003 f85e 	bl	802f638 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 802c57c:	697b      	ldr	r3, [r7, #20]
 802c57e:	685b      	ldr	r3, [r3, #4]
 802c580:	f003 031f 	and.w	r3, r3, #31
 802c584:	2b00      	cmp	r3, #0
 802c586:	d10f      	bne.n	802c5a8 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 802c588:	68fb      	ldr	r3, [r7, #12]
 802c58a:	681b      	ldr	r3, [r3, #0]
 802c58c:	689b      	ldr	r3, [r3, #8]
 802c58e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 802c592:	2b00      	cmp	r3, #0
 802c594:	d11c      	bne.n	802c5d0 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 802c596:	68fb      	ldr	r3, [r7, #12]
 802c598:	681b      	ldr	r3, [r3, #0]
 802c59a:	689a      	ldr	r2, [r3, #8]
 802c59c:	68fb      	ldr	r3, [r7, #12]
 802c59e:	681b      	ldr	r3, [r3, #0]
 802c5a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 802c5a4:	609a      	str	r2, [r3, #8]
 802c5a6:	e013      	b.n	802c5d0 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 802c5a8:	68fb      	ldr	r3, [r7, #12]
 802c5aa:	681b      	ldr	r3, [r3, #0]
 802c5ac:	4a11      	ldr	r2, [pc, #68]	; (802c5f4 <HAL_ADC_Start_DMA+0x1a4>)
 802c5ae:	4293      	cmp	r3, r2
 802c5b0:	d10e      	bne.n	802c5d0 <HAL_ADC_Start_DMA+0x180>
 802c5b2:	68fb      	ldr	r3, [r7, #12]
 802c5b4:	681b      	ldr	r3, [r3, #0]
 802c5b6:	689b      	ldr	r3, [r3, #8]
 802c5b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 802c5bc:	2b00      	cmp	r3, #0
 802c5be:	d107      	bne.n	802c5d0 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 802c5c0:	68fb      	ldr	r3, [r7, #12]
 802c5c2:	681b      	ldr	r3, [r3, #0]
 802c5c4:	689a      	ldr	r2, [r3, #8]
 802c5c6:	68fb      	ldr	r3, [r7, #12]
 802c5c8:	681b      	ldr	r3, [r3, #0]
 802c5ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 802c5ce:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 802c5d0:	2300      	movs	r3, #0
}
 802c5d2:	4618      	mov	r0, r3
 802c5d4:	3718      	adds	r7, #24
 802c5d6:	46bd      	mov	sp, r7
 802c5d8:	bd80      	pop	{r7, pc}
 802c5da:	bf00      	nop
 802c5dc:	20000294 	.word	0x20000294
 802c5e0:	431bde83 	.word	0x431bde83
 802c5e4:	40012300 	.word	0x40012300
 802c5e8:	0802ca69 	.word	0x0802ca69
 802c5ec:	0802cb23 	.word	0x0802cb23
 802c5f0:	0802cb3f 	.word	0x0802cb3f
 802c5f4:	40012000 	.word	0x40012000

0802c5f8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 802c5f8:	b480      	push	{r7}
 802c5fa:	b083      	sub	sp, #12
 802c5fc:	af00      	add	r7, sp, #0
 802c5fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 802c600:	bf00      	nop
 802c602:	370c      	adds	r7, #12
 802c604:	46bd      	mov	sp, r7
 802c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c60a:	4770      	bx	lr

0802c60c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 802c60c:	b480      	push	{r7}
 802c60e:	b085      	sub	sp, #20
 802c610:	af00      	add	r7, sp, #0
 802c612:	6078      	str	r0, [r7, #4]
 802c614:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 802c616:	2300      	movs	r3, #0
 802c618:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 802c61a:	687b      	ldr	r3, [r7, #4]
 802c61c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802c620:	2b01      	cmp	r3, #1
 802c622:	d101      	bne.n	802c628 <HAL_ADC_ConfigChannel+0x1c>
 802c624:	2302      	movs	r3, #2
 802c626:	e113      	b.n	802c850 <HAL_ADC_ConfigChannel+0x244>
 802c628:	687b      	ldr	r3, [r7, #4]
 802c62a:	2201      	movs	r2, #1
 802c62c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 802c630:	683b      	ldr	r3, [r7, #0]
 802c632:	681b      	ldr	r3, [r3, #0]
 802c634:	2b09      	cmp	r3, #9
 802c636:	d925      	bls.n	802c684 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 802c638:	687b      	ldr	r3, [r7, #4]
 802c63a:	681b      	ldr	r3, [r3, #0]
 802c63c:	68d9      	ldr	r1, [r3, #12]
 802c63e:	683b      	ldr	r3, [r7, #0]
 802c640:	681b      	ldr	r3, [r3, #0]
 802c642:	b29b      	uxth	r3, r3
 802c644:	461a      	mov	r2, r3
 802c646:	4613      	mov	r3, r2
 802c648:	005b      	lsls	r3, r3, #1
 802c64a:	4413      	add	r3, r2
 802c64c:	3b1e      	subs	r3, #30
 802c64e:	2207      	movs	r2, #7
 802c650:	fa02 f303 	lsl.w	r3, r2, r3
 802c654:	43da      	mvns	r2, r3
 802c656:	687b      	ldr	r3, [r7, #4]
 802c658:	681b      	ldr	r3, [r3, #0]
 802c65a:	400a      	ands	r2, r1
 802c65c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 802c65e:	687b      	ldr	r3, [r7, #4]
 802c660:	681b      	ldr	r3, [r3, #0]
 802c662:	68d9      	ldr	r1, [r3, #12]
 802c664:	683b      	ldr	r3, [r7, #0]
 802c666:	689a      	ldr	r2, [r3, #8]
 802c668:	683b      	ldr	r3, [r7, #0]
 802c66a:	681b      	ldr	r3, [r3, #0]
 802c66c:	b29b      	uxth	r3, r3
 802c66e:	4618      	mov	r0, r3
 802c670:	4603      	mov	r3, r0
 802c672:	005b      	lsls	r3, r3, #1
 802c674:	4403      	add	r3, r0
 802c676:	3b1e      	subs	r3, #30
 802c678:	409a      	lsls	r2, r3
 802c67a:	687b      	ldr	r3, [r7, #4]
 802c67c:	681b      	ldr	r3, [r3, #0]
 802c67e:	430a      	orrs	r2, r1
 802c680:	60da      	str	r2, [r3, #12]
 802c682:	e022      	b.n	802c6ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 802c684:	687b      	ldr	r3, [r7, #4]
 802c686:	681b      	ldr	r3, [r3, #0]
 802c688:	6919      	ldr	r1, [r3, #16]
 802c68a:	683b      	ldr	r3, [r7, #0]
 802c68c:	681b      	ldr	r3, [r3, #0]
 802c68e:	b29b      	uxth	r3, r3
 802c690:	461a      	mov	r2, r3
 802c692:	4613      	mov	r3, r2
 802c694:	005b      	lsls	r3, r3, #1
 802c696:	4413      	add	r3, r2
 802c698:	2207      	movs	r2, #7
 802c69a:	fa02 f303 	lsl.w	r3, r2, r3
 802c69e:	43da      	mvns	r2, r3
 802c6a0:	687b      	ldr	r3, [r7, #4]
 802c6a2:	681b      	ldr	r3, [r3, #0]
 802c6a4:	400a      	ands	r2, r1
 802c6a6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 802c6a8:	687b      	ldr	r3, [r7, #4]
 802c6aa:	681b      	ldr	r3, [r3, #0]
 802c6ac:	6919      	ldr	r1, [r3, #16]
 802c6ae:	683b      	ldr	r3, [r7, #0]
 802c6b0:	689a      	ldr	r2, [r3, #8]
 802c6b2:	683b      	ldr	r3, [r7, #0]
 802c6b4:	681b      	ldr	r3, [r3, #0]
 802c6b6:	b29b      	uxth	r3, r3
 802c6b8:	4618      	mov	r0, r3
 802c6ba:	4603      	mov	r3, r0
 802c6bc:	005b      	lsls	r3, r3, #1
 802c6be:	4403      	add	r3, r0
 802c6c0:	409a      	lsls	r2, r3
 802c6c2:	687b      	ldr	r3, [r7, #4]
 802c6c4:	681b      	ldr	r3, [r3, #0]
 802c6c6:	430a      	orrs	r2, r1
 802c6c8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 802c6ca:	683b      	ldr	r3, [r7, #0]
 802c6cc:	685b      	ldr	r3, [r3, #4]
 802c6ce:	2b06      	cmp	r3, #6
 802c6d0:	d824      	bhi.n	802c71c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 802c6d2:	687b      	ldr	r3, [r7, #4]
 802c6d4:	681b      	ldr	r3, [r3, #0]
 802c6d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 802c6d8:	683b      	ldr	r3, [r7, #0]
 802c6da:	685a      	ldr	r2, [r3, #4]
 802c6dc:	4613      	mov	r3, r2
 802c6de:	009b      	lsls	r3, r3, #2
 802c6e0:	4413      	add	r3, r2
 802c6e2:	3b05      	subs	r3, #5
 802c6e4:	221f      	movs	r2, #31
 802c6e6:	fa02 f303 	lsl.w	r3, r2, r3
 802c6ea:	43da      	mvns	r2, r3
 802c6ec:	687b      	ldr	r3, [r7, #4]
 802c6ee:	681b      	ldr	r3, [r3, #0]
 802c6f0:	400a      	ands	r2, r1
 802c6f2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 802c6f4:	687b      	ldr	r3, [r7, #4]
 802c6f6:	681b      	ldr	r3, [r3, #0]
 802c6f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 802c6fa:	683b      	ldr	r3, [r7, #0]
 802c6fc:	681b      	ldr	r3, [r3, #0]
 802c6fe:	b29b      	uxth	r3, r3
 802c700:	4618      	mov	r0, r3
 802c702:	683b      	ldr	r3, [r7, #0]
 802c704:	685a      	ldr	r2, [r3, #4]
 802c706:	4613      	mov	r3, r2
 802c708:	009b      	lsls	r3, r3, #2
 802c70a:	4413      	add	r3, r2
 802c70c:	3b05      	subs	r3, #5
 802c70e:	fa00 f203 	lsl.w	r2, r0, r3
 802c712:	687b      	ldr	r3, [r7, #4]
 802c714:	681b      	ldr	r3, [r3, #0]
 802c716:	430a      	orrs	r2, r1
 802c718:	635a      	str	r2, [r3, #52]	; 0x34
 802c71a:	e04c      	b.n	802c7b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 802c71c:	683b      	ldr	r3, [r7, #0]
 802c71e:	685b      	ldr	r3, [r3, #4]
 802c720:	2b0c      	cmp	r3, #12
 802c722:	d824      	bhi.n	802c76e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 802c724:	687b      	ldr	r3, [r7, #4]
 802c726:	681b      	ldr	r3, [r3, #0]
 802c728:	6b19      	ldr	r1, [r3, #48]	; 0x30
 802c72a:	683b      	ldr	r3, [r7, #0]
 802c72c:	685a      	ldr	r2, [r3, #4]
 802c72e:	4613      	mov	r3, r2
 802c730:	009b      	lsls	r3, r3, #2
 802c732:	4413      	add	r3, r2
 802c734:	3b23      	subs	r3, #35	; 0x23
 802c736:	221f      	movs	r2, #31
 802c738:	fa02 f303 	lsl.w	r3, r2, r3
 802c73c:	43da      	mvns	r2, r3
 802c73e:	687b      	ldr	r3, [r7, #4]
 802c740:	681b      	ldr	r3, [r3, #0]
 802c742:	400a      	ands	r2, r1
 802c744:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 802c746:	687b      	ldr	r3, [r7, #4]
 802c748:	681b      	ldr	r3, [r3, #0]
 802c74a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 802c74c:	683b      	ldr	r3, [r7, #0]
 802c74e:	681b      	ldr	r3, [r3, #0]
 802c750:	b29b      	uxth	r3, r3
 802c752:	4618      	mov	r0, r3
 802c754:	683b      	ldr	r3, [r7, #0]
 802c756:	685a      	ldr	r2, [r3, #4]
 802c758:	4613      	mov	r3, r2
 802c75a:	009b      	lsls	r3, r3, #2
 802c75c:	4413      	add	r3, r2
 802c75e:	3b23      	subs	r3, #35	; 0x23
 802c760:	fa00 f203 	lsl.w	r2, r0, r3
 802c764:	687b      	ldr	r3, [r7, #4]
 802c766:	681b      	ldr	r3, [r3, #0]
 802c768:	430a      	orrs	r2, r1
 802c76a:	631a      	str	r2, [r3, #48]	; 0x30
 802c76c:	e023      	b.n	802c7b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 802c76e:	687b      	ldr	r3, [r7, #4]
 802c770:	681b      	ldr	r3, [r3, #0]
 802c772:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 802c774:	683b      	ldr	r3, [r7, #0]
 802c776:	685a      	ldr	r2, [r3, #4]
 802c778:	4613      	mov	r3, r2
 802c77a:	009b      	lsls	r3, r3, #2
 802c77c:	4413      	add	r3, r2
 802c77e:	3b41      	subs	r3, #65	; 0x41
 802c780:	221f      	movs	r2, #31
 802c782:	fa02 f303 	lsl.w	r3, r2, r3
 802c786:	43da      	mvns	r2, r3
 802c788:	687b      	ldr	r3, [r7, #4]
 802c78a:	681b      	ldr	r3, [r3, #0]
 802c78c:	400a      	ands	r2, r1
 802c78e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 802c790:	687b      	ldr	r3, [r7, #4]
 802c792:	681b      	ldr	r3, [r3, #0]
 802c794:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 802c796:	683b      	ldr	r3, [r7, #0]
 802c798:	681b      	ldr	r3, [r3, #0]
 802c79a:	b29b      	uxth	r3, r3
 802c79c:	4618      	mov	r0, r3
 802c79e:	683b      	ldr	r3, [r7, #0]
 802c7a0:	685a      	ldr	r2, [r3, #4]
 802c7a2:	4613      	mov	r3, r2
 802c7a4:	009b      	lsls	r3, r3, #2
 802c7a6:	4413      	add	r3, r2
 802c7a8:	3b41      	subs	r3, #65	; 0x41
 802c7aa:	fa00 f203 	lsl.w	r2, r0, r3
 802c7ae:	687b      	ldr	r3, [r7, #4]
 802c7b0:	681b      	ldr	r3, [r3, #0]
 802c7b2:	430a      	orrs	r2, r1
 802c7b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 802c7b6:	4b29      	ldr	r3, [pc, #164]	; (802c85c <HAL_ADC_ConfigChannel+0x250>)
 802c7b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 802c7ba:	687b      	ldr	r3, [r7, #4]
 802c7bc:	681b      	ldr	r3, [r3, #0]
 802c7be:	4a28      	ldr	r2, [pc, #160]	; (802c860 <HAL_ADC_ConfigChannel+0x254>)
 802c7c0:	4293      	cmp	r3, r2
 802c7c2:	d10f      	bne.n	802c7e4 <HAL_ADC_ConfigChannel+0x1d8>
 802c7c4:	683b      	ldr	r3, [r7, #0]
 802c7c6:	681b      	ldr	r3, [r3, #0]
 802c7c8:	2b12      	cmp	r3, #18
 802c7ca:	d10b      	bne.n	802c7e4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 802c7cc:	68fb      	ldr	r3, [r7, #12]
 802c7ce:	685b      	ldr	r3, [r3, #4]
 802c7d0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 802c7d4:	68fb      	ldr	r3, [r7, #12]
 802c7d6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 802c7d8:	68fb      	ldr	r3, [r7, #12]
 802c7da:	685b      	ldr	r3, [r3, #4]
 802c7dc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 802c7e0:	68fb      	ldr	r3, [r7, #12]
 802c7e2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 802c7e4:	687b      	ldr	r3, [r7, #4]
 802c7e6:	681b      	ldr	r3, [r3, #0]
 802c7e8:	4a1d      	ldr	r2, [pc, #116]	; (802c860 <HAL_ADC_ConfigChannel+0x254>)
 802c7ea:	4293      	cmp	r3, r2
 802c7ec:	d12b      	bne.n	802c846 <HAL_ADC_ConfigChannel+0x23a>
 802c7ee:	683b      	ldr	r3, [r7, #0]
 802c7f0:	681b      	ldr	r3, [r3, #0]
 802c7f2:	4a1c      	ldr	r2, [pc, #112]	; (802c864 <HAL_ADC_ConfigChannel+0x258>)
 802c7f4:	4293      	cmp	r3, r2
 802c7f6:	d003      	beq.n	802c800 <HAL_ADC_ConfigChannel+0x1f4>
 802c7f8:	683b      	ldr	r3, [r7, #0]
 802c7fa:	681b      	ldr	r3, [r3, #0]
 802c7fc:	2b11      	cmp	r3, #17
 802c7fe:	d122      	bne.n	802c846 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 802c800:	68fb      	ldr	r3, [r7, #12]
 802c802:	685b      	ldr	r3, [r3, #4]
 802c804:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 802c808:	68fb      	ldr	r3, [r7, #12]
 802c80a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 802c80c:	68fb      	ldr	r3, [r7, #12]
 802c80e:	685b      	ldr	r3, [r3, #4]
 802c810:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 802c814:	68fb      	ldr	r3, [r7, #12]
 802c816:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 802c818:	683b      	ldr	r3, [r7, #0]
 802c81a:	681b      	ldr	r3, [r3, #0]
 802c81c:	4a11      	ldr	r2, [pc, #68]	; (802c864 <HAL_ADC_ConfigChannel+0x258>)
 802c81e:	4293      	cmp	r3, r2
 802c820:	d111      	bne.n	802c846 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 802c822:	4b11      	ldr	r3, [pc, #68]	; (802c868 <HAL_ADC_ConfigChannel+0x25c>)
 802c824:	681b      	ldr	r3, [r3, #0]
 802c826:	4a11      	ldr	r2, [pc, #68]	; (802c86c <HAL_ADC_ConfigChannel+0x260>)
 802c828:	fba2 2303 	umull	r2, r3, r2, r3
 802c82c:	0c9a      	lsrs	r2, r3, #18
 802c82e:	4613      	mov	r3, r2
 802c830:	009b      	lsls	r3, r3, #2
 802c832:	4413      	add	r3, r2
 802c834:	005b      	lsls	r3, r3, #1
 802c836:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 802c838:	e002      	b.n	802c840 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 802c83a:	68bb      	ldr	r3, [r7, #8]
 802c83c:	3b01      	subs	r3, #1
 802c83e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 802c840:	68bb      	ldr	r3, [r7, #8]
 802c842:	2b00      	cmp	r3, #0
 802c844:	d1f9      	bne.n	802c83a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 802c846:	687b      	ldr	r3, [r7, #4]
 802c848:	2200      	movs	r2, #0
 802c84a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 802c84e:	2300      	movs	r3, #0
}
 802c850:	4618      	mov	r0, r3
 802c852:	3714      	adds	r7, #20
 802c854:	46bd      	mov	sp, r7
 802c856:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c85a:	4770      	bx	lr
 802c85c:	40012300 	.word	0x40012300
 802c860:	40012000 	.word	0x40012000
 802c864:	10000012 	.word	0x10000012
 802c868:	20000294 	.word	0x20000294
 802c86c:	431bde83 	.word	0x431bde83

0802c870 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 802c870:	b480      	push	{r7}
 802c872:	b085      	sub	sp, #20
 802c874:	af00      	add	r7, sp, #0
 802c876:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 802c878:	4b79      	ldr	r3, [pc, #484]	; (802ca60 <ADC_Init+0x1f0>)
 802c87a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 802c87c:	68fb      	ldr	r3, [r7, #12]
 802c87e:	685b      	ldr	r3, [r3, #4]
 802c880:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 802c884:	68fb      	ldr	r3, [r7, #12]
 802c886:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 802c888:	68fb      	ldr	r3, [r7, #12]
 802c88a:	685a      	ldr	r2, [r3, #4]
 802c88c:	687b      	ldr	r3, [r7, #4]
 802c88e:	685b      	ldr	r3, [r3, #4]
 802c890:	431a      	orrs	r2, r3
 802c892:	68fb      	ldr	r3, [r7, #12]
 802c894:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 802c896:	687b      	ldr	r3, [r7, #4]
 802c898:	681b      	ldr	r3, [r3, #0]
 802c89a:	685a      	ldr	r2, [r3, #4]
 802c89c:	687b      	ldr	r3, [r7, #4]
 802c89e:	681b      	ldr	r3, [r3, #0]
 802c8a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802c8a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 802c8a6:	687b      	ldr	r3, [r7, #4]
 802c8a8:	681b      	ldr	r3, [r3, #0]
 802c8aa:	6859      	ldr	r1, [r3, #4]
 802c8ac:	687b      	ldr	r3, [r7, #4]
 802c8ae:	691b      	ldr	r3, [r3, #16]
 802c8b0:	021a      	lsls	r2, r3, #8
 802c8b2:	687b      	ldr	r3, [r7, #4]
 802c8b4:	681b      	ldr	r3, [r3, #0]
 802c8b6:	430a      	orrs	r2, r1
 802c8b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 802c8ba:	687b      	ldr	r3, [r7, #4]
 802c8bc:	681b      	ldr	r3, [r3, #0]
 802c8be:	685a      	ldr	r2, [r3, #4]
 802c8c0:	687b      	ldr	r3, [r7, #4]
 802c8c2:	681b      	ldr	r3, [r3, #0]
 802c8c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 802c8c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 802c8ca:	687b      	ldr	r3, [r7, #4]
 802c8cc:	681b      	ldr	r3, [r3, #0]
 802c8ce:	6859      	ldr	r1, [r3, #4]
 802c8d0:	687b      	ldr	r3, [r7, #4]
 802c8d2:	689a      	ldr	r2, [r3, #8]
 802c8d4:	687b      	ldr	r3, [r7, #4]
 802c8d6:	681b      	ldr	r3, [r3, #0]
 802c8d8:	430a      	orrs	r2, r1
 802c8da:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 802c8dc:	687b      	ldr	r3, [r7, #4]
 802c8de:	681b      	ldr	r3, [r3, #0]
 802c8e0:	689a      	ldr	r2, [r3, #8]
 802c8e2:	687b      	ldr	r3, [r7, #4]
 802c8e4:	681b      	ldr	r3, [r3, #0]
 802c8e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802c8ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 802c8ec:	687b      	ldr	r3, [r7, #4]
 802c8ee:	681b      	ldr	r3, [r3, #0]
 802c8f0:	6899      	ldr	r1, [r3, #8]
 802c8f2:	687b      	ldr	r3, [r7, #4]
 802c8f4:	68da      	ldr	r2, [r3, #12]
 802c8f6:	687b      	ldr	r3, [r7, #4]
 802c8f8:	681b      	ldr	r3, [r3, #0]
 802c8fa:	430a      	orrs	r2, r1
 802c8fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 802c8fe:	687b      	ldr	r3, [r7, #4]
 802c900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802c902:	4a58      	ldr	r2, [pc, #352]	; (802ca64 <ADC_Init+0x1f4>)
 802c904:	4293      	cmp	r3, r2
 802c906:	d022      	beq.n	802c94e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 802c908:	687b      	ldr	r3, [r7, #4]
 802c90a:	681b      	ldr	r3, [r3, #0]
 802c90c:	689a      	ldr	r2, [r3, #8]
 802c90e:	687b      	ldr	r3, [r7, #4]
 802c910:	681b      	ldr	r3, [r3, #0]
 802c912:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 802c916:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 802c918:	687b      	ldr	r3, [r7, #4]
 802c91a:	681b      	ldr	r3, [r3, #0]
 802c91c:	6899      	ldr	r1, [r3, #8]
 802c91e:	687b      	ldr	r3, [r7, #4]
 802c920:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802c922:	687b      	ldr	r3, [r7, #4]
 802c924:	681b      	ldr	r3, [r3, #0]
 802c926:	430a      	orrs	r2, r1
 802c928:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 802c92a:	687b      	ldr	r3, [r7, #4]
 802c92c:	681b      	ldr	r3, [r3, #0]
 802c92e:	689a      	ldr	r2, [r3, #8]
 802c930:	687b      	ldr	r3, [r7, #4]
 802c932:	681b      	ldr	r3, [r3, #0]
 802c934:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 802c938:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 802c93a:	687b      	ldr	r3, [r7, #4]
 802c93c:	681b      	ldr	r3, [r3, #0]
 802c93e:	6899      	ldr	r1, [r3, #8]
 802c940:	687b      	ldr	r3, [r7, #4]
 802c942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802c944:	687b      	ldr	r3, [r7, #4]
 802c946:	681b      	ldr	r3, [r3, #0]
 802c948:	430a      	orrs	r2, r1
 802c94a:	609a      	str	r2, [r3, #8]
 802c94c:	e00f      	b.n	802c96e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 802c94e:	687b      	ldr	r3, [r7, #4]
 802c950:	681b      	ldr	r3, [r3, #0]
 802c952:	689a      	ldr	r2, [r3, #8]
 802c954:	687b      	ldr	r3, [r7, #4]
 802c956:	681b      	ldr	r3, [r3, #0]
 802c958:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 802c95c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 802c95e:	687b      	ldr	r3, [r7, #4]
 802c960:	681b      	ldr	r3, [r3, #0]
 802c962:	689a      	ldr	r2, [r3, #8]
 802c964:	687b      	ldr	r3, [r7, #4]
 802c966:	681b      	ldr	r3, [r3, #0]
 802c968:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 802c96c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 802c96e:	687b      	ldr	r3, [r7, #4]
 802c970:	681b      	ldr	r3, [r3, #0]
 802c972:	689a      	ldr	r2, [r3, #8]
 802c974:	687b      	ldr	r3, [r7, #4]
 802c976:	681b      	ldr	r3, [r3, #0]
 802c978:	f022 0202 	bic.w	r2, r2, #2
 802c97c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 802c97e:	687b      	ldr	r3, [r7, #4]
 802c980:	681b      	ldr	r3, [r3, #0]
 802c982:	6899      	ldr	r1, [r3, #8]
 802c984:	687b      	ldr	r3, [r7, #4]
 802c986:	7e1b      	ldrb	r3, [r3, #24]
 802c988:	005a      	lsls	r2, r3, #1
 802c98a:	687b      	ldr	r3, [r7, #4]
 802c98c:	681b      	ldr	r3, [r3, #0]
 802c98e:	430a      	orrs	r2, r1
 802c990:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 802c992:	687b      	ldr	r3, [r7, #4]
 802c994:	f893 3020 	ldrb.w	r3, [r3, #32]
 802c998:	2b00      	cmp	r3, #0
 802c99a:	d01b      	beq.n	802c9d4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 802c99c:	687b      	ldr	r3, [r7, #4]
 802c99e:	681b      	ldr	r3, [r3, #0]
 802c9a0:	685a      	ldr	r2, [r3, #4]
 802c9a2:	687b      	ldr	r3, [r7, #4]
 802c9a4:	681b      	ldr	r3, [r3, #0]
 802c9a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802c9aa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 802c9ac:	687b      	ldr	r3, [r7, #4]
 802c9ae:	681b      	ldr	r3, [r3, #0]
 802c9b0:	685a      	ldr	r2, [r3, #4]
 802c9b2:	687b      	ldr	r3, [r7, #4]
 802c9b4:	681b      	ldr	r3, [r3, #0]
 802c9b6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 802c9ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 802c9bc:	687b      	ldr	r3, [r7, #4]
 802c9be:	681b      	ldr	r3, [r3, #0]
 802c9c0:	6859      	ldr	r1, [r3, #4]
 802c9c2:	687b      	ldr	r3, [r7, #4]
 802c9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802c9c6:	3b01      	subs	r3, #1
 802c9c8:	035a      	lsls	r2, r3, #13
 802c9ca:	687b      	ldr	r3, [r7, #4]
 802c9cc:	681b      	ldr	r3, [r3, #0]
 802c9ce:	430a      	orrs	r2, r1
 802c9d0:	605a      	str	r2, [r3, #4]
 802c9d2:	e007      	b.n	802c9e4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 802c9d4:	687b      	ldr	r3, [r7, #4]
 802c9d6:	681b      	ldr	r3, [r3, #0]
 802c9d8:	685a      	ldr	r2, [r3, #4]
 802c9da:	687b      	ldr	r3, [r7, #4]
 802c9dc:	681b      	ldr	r3, [r3, #0]
 802c9de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802c9e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 802c9e4:	687b      	ldr	r3, [r7, #4]
 802c9e6:	681b      	ldr	r3, [r3, #0]
 802c9e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802c9ea:	687b      	ldr	r3, [r7, #4]
 802c9ec:	681b      	ldr	r3, [r3, #0]
 802c9ee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 802c9f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 802c9f4:	687b      	ldr	r3, [r7, #4]
 802c9f6:	681b      	ldr	r3, [r3, #0]
 802c9f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 802c9fa:	687b      	ldr	r3, [r7, #4]
 802c9fc:	69db      	ldr	r3, [r3, #28]
 802c9fe:	3b01      	subs	r3, #1
 802ca00:	051a      	lsls	r2, r3, #20
 802ca02:	687b      	ldr	r3, [r7, #4]
 802ca04:	681b      	ldr	r3, [r3, #0]
 802ca06:	430a      	orrs	r2, r1
 802ca08:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 802ca0a:	687b      	ldr	r3, [r7, #4]
 802ca0c:	681b      	ldr	r3, [r3, #0]
 802ca0e:	689a      	ldr	r2, [r3, #8]
 802ca10:	687b      	ldr	r3, [r7, #4]
 802ca12:	681b      	ldr	r3, [r3, #0]
 802ca14:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 802ca18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 802ca1a:	687b      	ldr	r3, [r7, #4]
 802ca1c:	681b      	ldr	r3, [r3, #0]
 802ca1e:	6899      	ldr	r1, [r3, #8]
 802ca20:	687b      	ldr	r3, [r7, #4]
 802ca22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 802ca26:	025a      	lsls	r2, r3, #9
 802ca28:	687b      	ldr	r3, [r7, #4]
 802ca2a:	681b      	ldr	r3, [r3, #0]
 802ca2c:	430a      	orrs	r2, r1
 802ca2e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 802ca30:	687b      	ldr	r3, [r7, #4]
 802ca32:	681b      	ldr	r3, [r3, #0]
 802ca34:	689a      	ldr	r2, [r3, #8]
 802ca36:	687b      	ldr	r3, [r7, #4]
 802ca38:	681b      	ldr	r3, [r3, #0]
 802ca3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802ca3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 802ca40:	687b      	ldr	r3, [r7, #4]
 802ca42:	681b      	ldr	r3, [r3, #0]
 802ca44:	6899      	ldr	r1, [r3, #8]
 802ca46:	687b      	ldr	r3, [r7, #4]
 802ca48:	695b      	ldr	r3, [r3, #20]
 802ca4a:	029a      	lsls	r2, r3, #10
 802ca4c:	687b      	ldr	r3, [r7, #4]
 802ca4e:	681b      	ldr	r3, [r3, #0]
 802ca50:	430a      	orrs	r2, r1
 802ca52:	609a      	str	r2, [r3, #8]
}
 802ca54:	bf00      	nop
 802ca56:	3714      	adds	r7, #20
 802ca58:	46bd      	mov	sp, r7
 802ca5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ca5e:	4770      	bx	lr
 802ca60:	40012300 	.word	0x40012300
 802ca64:	0f000001 	.word	0x0f000001

0802ca68 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 802ca68:	b580      	push	{r7, lr}
 802ca6a:	b084      	sub	sp, #16
 802ca6c:	af00      	add	r7, sp, #0
 802ca6e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 802ca70:	687b      	ldr	r3, [r7, #4]
 802ca72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ca74:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 802ca76:	68fb      	ldr	r3, [r7, #12]
 802ca78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802ca7a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 802ca7e:	2b00      	cmp	r3, #0
 802ca80:	d13c      	bne.n	802cafc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 802ca82:	68fb      	ldr	r3, [r7, #12]
 802ca84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802ca86:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 802ca8a:	68fb      	ldr	r3, [r7, #12]
 802ca8c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 802ca8e:	68fb      	ldr	r3, [r7, #12]
 802ca90:	681b      	ldr	r3, [r3, #0]
 802ca92:	689b      	ldr	r3, [r3, #8]
 802ca94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 802ca98:	2b00      	cmp	r3, #0
 802ca9a:	d12b      	bne.n	802caf4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 802ca9c:	68fb      	ldr	r3, [r7, #12]
 802ca9e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 802caa0:	2b00      	cmp	r3, #0
 802caa2:	d127      	bne.n	802caf4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 802caa4:	68fb      	ldr	r3, [r7, #12]
 802caa6:	681b      	ldr	r3, [r3, #0]
 802caa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802caaa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 802caae:	2b00      	cmp	r3, #0
 802cab0:	d006      	beq.n	802cac0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 802cab2:	68fb      	ldr	r3, [r7, #12]
 802cab4:	681b      	ldr	r3, [r3, #0]
 802cab6:	689b      	ldr	r3, [r3, #8]
 802cab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 802cabc:	2b00      	cmp	r3, #0
 802cabe:	d119      	bne.n	802caf4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 802cac0:	68fb      	ldr	r3, [r7, #12]
 802cac2:	681b      	ldr	r3, [r3, #0]
 802cac4:	685a      	ldr	r2, [r3, #4]
 802cac6:	68fb      	ldr	r3, [r7, #12]
 802cac8:	681b      	ldr	r3, [r3, #0]
 802caca:	f022 0220 	bic.w	r2, r2, #32
 802cace:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 802cad0:	68fb      	ldr	r3, [r7, #12]
 802cad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802cad4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 802cad8:	68fb      	ldr	r3, [r7, #12]
 802cada:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 802cadc:	68fb      	ldr	r3, [r7, #12]
 802cade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802cae0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802cae4:	2b00      	cmp	r3, #0
 802cae6:	d105      	bne.n	802caf4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 802cae8:	68fb      	ldr	r3, [r7, #12]
 802caea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802caec:	f043 0201 	orr.w	r2, r3, #1
 802caf0:	68fb      	ldr	r3, [r7, #12]
 802caf2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 802caf4:	68f8      	ldr	r0, [r7, #12]
 802caf6:	f7f4 fadf 	bl	80210b8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 802cafa:	e00e      	b.n	802cb1a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 802cafc:	68fb      	ldr	r3, [r7, #12]
 802cafe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802cb00:	f003 0310 	and.w	r3, r3, #16
 802cb04:	2b00      	cmp	r3, #0
 802cb06:	d003      	beq.n	802cb10 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 802cb08:	68f8      	ldr	r0, [r7, #12]
 802cb0a:	f7ff fd75 	bl	802c5f8 <HAL_ADC_ErrorCallback>
}
 802cb0e:	e004      	b.n	802cb1a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 802cb10:	68fb      	ldr	r3, [r7, #12]
 802cb12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802cb14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802cb16:	6878      	ldr	r0, [r7, #4]
 802cb18:	4798      	blx	r3
}
 802cb1a:	bf00      	nop
 802cb1c:	3710      	adds	r7, #16
 802cb1e:	46bd      	mov	sp, r7
 802cb20:	bd80      	pop	{r7, pc}

0802cb22 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 802cb22:	b580      	push	{r7, lr}
 802cb24:	b084      	sub	sp, #16
 802cb26:	af00      	add	r7, sp, #0
 802cb28:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 802cb2a:	687b      	ldr	r3, [r7, #4]
 802cb2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802cb2e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 802cb30:	68f8      	ldr	r0, [r7, #12]
 802cb32:	f7f4 fa91 	bl	8021058 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 802cb36:	bf00      	nop
 802cb38:	3710      	adds	r7, #16
 802cb3a:	46bd      	mov	sp, r7
 802cb3c:	bd80      	pop	{r7, pc}

0802cb3e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 802cb3e:	b580      	push	{r7, lr}
 802cb40:	b084      	sub	sp, #16
 802cb42:	af00      	add	r7, sp, #0
 802cb44:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 802cb46:	687b      	ldr	r3, [r7, #4]
 802cb48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802cb4a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 802cb4c:	68fb      	ldr	r3, [r7, #12]
 802cb4e:	2240      	movs	r2, #64	; 0x40
 802cb50:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 802cb52:	68fb      	ldr	r3, [r7, #12]
 802cb54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802cb56:	f043 0204 	orr.w	r2, r3, #4
 802cb5a:	68fb      	ldr	r3, [r7, #12]
 802cb5c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 802cb5e:	68f8      	ldr	r0, [r7, #12]
 802cb60:	f7ff fd4a 	bl	802c5f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 802cb64:	bf00      	nop
 802cb66:	3710      	adds	r7, #16
 802cb68:	46bd      	mov	sp, r7
 802cb6a:	bd80      	pop	{r7, pc}

0802cb6c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 802cb6c:	b580      	push	{r7, lr}
 802cb6e:	b084      	sub	sp, #16
 802cb70:	af00      	add	r7, sp, #0
 802cb72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 802cb74:	687b      	ldr	r3, [r7, #4]
 802cb76:	2b00      	cmp	r3, #0
 802cb78:	d101      	bne.n	802cb7e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 802cb7a:	2301      	movs	r3, #1
 802cb7c:	e0ed      	b.n	802cd5a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 802cb7e:	687b      	ldr	r3, [r7, #4]
 802cb80:	f893 3020 	ldrb.w	r3, [r3, #32]
 802cb84:	b2db      	uxtb	r3, r3
 802cb86:	2b00      	cmp	r3, #0
 802cb88:	d102      	bne.n	802cb90 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 802cb8a:	6878      	ldr	r0, [r7, #4]
 802cb8c:	f7fe fd3c 	bl	802b608 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 802cb90:	687b      	ldr	r3, [r7, #4]
 802cb92:	681b      	ldr	r3, [r3, #0]
 802cb94:	681a      	ldr	r2, [r3, #0]
 802cb96:	687b      	ldr	r3, [r7, #4]
 802cb98:	681b      	ldr	r3, [r3, #0]
 802cb9a:	f022 0202 	bic.w	r2, r2, #2
 802cb9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 802cba0:	f7ff fbe4 	bl	802c36c <HAL_GetTick>
 802cba4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 802cba6:	e012      	b.n	802cbce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 802cba8:	f7ff fbe0 	bl	802c36c <HAL_GetTick>
 802cbac:	4602      	mov	r2, r0
 802cbae:	68fb      	ldr	r3, [r7, #12]
 802cbb0:	1ad3      	subs	r3, r2, r3
 802cbb2:	2b0a      	cmp	r3, #10
 802cbb4:	d90b      	bls.n	802cbce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 802cbb6:	687b      	ldr	r3, [r7, #4]
 802cbb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802cbba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 802cbbe:	687b      	ldr	r3, [r7, #4]
 802cbc0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 802cbc2:	687b      	ldr	r3, [r7, #4]
 802cbc4:	2205      	movs	r2, #5
 802cbc6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 802cbca:	2301      	movs	r3, #1
 802cbcc:	e0c5      	b.n	802cd5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 802cbce:	687b      	ldr	r3, [r7, #4]
 802cbd0:	681b      	ldr	r3, [r3, #0]
 802cbd2:	685b      	ldr	r3, [r3, #4]
 802cbd4:	f003 0302 	and.w	r3, r3, #2
 802cbd8:	2b00      	cmp	r3, #0
 802cbda:	d1e5      	bne.n	802cba8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 802cbdc:	687b      	ldr	r3, [r7, #4]
 802cbde:	681b      	ldr	r3, [r3, #0]
 802cbe0:	681a      	ldr	r2, [r3, #0]
 802cbe2:	687b      	ldr	r3, [r7, #4]
 802cbe4:	681b      	ldr	r3, [r3, #0]
 802cbe6:	f042 0201 	orr.w	r2, r2, #1
 802cbea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 802cbec:	f7ff fbbe 	bl	802c36c <HAL_GetTick>
 802cbf0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 802cbf2:	e012      	b.n	802cc1a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 802cbf4:	f7ff fbba 	bl	802c36c <HAL_GetTick>
 802cbf8:	4602      	mov	r2, r0
 802cbfa:	68fb      	ldr	r3, [r7, #12]
 802cbfc:	1ad3      	subs	r3, r2, r3
 802cbfe:	2b0a      	cmp	r3, #10
 802cc00:	d90b      	bls.n	802cc1a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 802cc02:	687b      	ldr	r3, [r7, #4]
 802cc04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802cc06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 802cc0a:	687b      	ldr	r3, [r7, #4]
 802cc0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 802cc0e:	687b      	ldr	r3, [r7, #4]
 802cc10:	2205      	movs	r2, #5
 802cc12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 802cc16:	2301      	movs	r3, #1
 802cc18:	e09f      	b.n	802cd5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 802cc1a:	687b      	ldr	r3, [r7, #4]
 802cc1c:	681b      	ldr	r3, [r3, #0]
 802cc1e:	685b      	ldr	r3, [r3, #4]
 802cc20:	f003 0301 	and.w	r3, r3, #1
 802cc24:	2b00      	cmp	r3, #0
 802cc26:	d0e5      	beq.n	802cbf4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 802cc28:	687b      	ldr	r3, [r7, #4]
 802cc2a:	7e1b      	ldrb	r3, [r3, #24]
 802cc2c:	2b01      	cmp	r3, #1
 802cc2e:	d108      	bne.n	802cc42 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 802cc30:	687b      	ldr	r3, [r7, #4]
 802cc32:	681b      	ldr	r3, [r3, #0]
 802cc34:	681a      	ldr	r2, [r3, #0]
 802cc36:	687b      	ldr	r3, [r7, #4]
 802cc38:	681b      	ldr	r3, [r3, #0]
 802cc3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802cc3e:	601a      	str	r2, [r3, #0]
 802cc40:	e007      	b.n	802cc52 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 802cc42:	687b      	ldr	r3, [r7, #4]
 802cc44:	681b      	ldr	r3, [r3, #0]
 802cc46:	681a      	ldr	r2, [r3, #0]
 802cc48:	687b      	ldr	r3, [r7, #4]
 802cc4a:	681b      	ldr	r3, [r3, #0]
 802cc4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802cc50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 802cc52:	687b      	ldr	r3, [r7, #4]
 802cc54:	7e5b      	ldrb	r3, [r3, #25]
 802cc56:	2b01      	cmp	r3, #1
 802cc58:	d108      	bne.n	802cc6c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 802cc5a:	687b      	ldr	r3, [r7, #4]
 802cc5c:	681b      	ldr	r3, [r3, #0]
 802cc5e:	681a      	ldr	r2, [r3, #0]
 802cc60:	687b      	ldr	r3, [r7, #4]
 802cc62:	681b      	ldr	r3, [r3, #0]
 802cc64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802cc68:	601a      	str	r2, [r3, #0]
 802cc6a:	e007      	b.n	802cc7c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 802cc6c:	687b      	ldr	r3, [r7, #4]
 802cc6e:	681b      	ldr	r3, [r3, #0]
 802cc70:	681a      	ldr	r2, [r3, #0]
 802cc72:	687b      	ldr	r3, [r7, #4]
 802cc74:	681b      	ldr	r3, [r3, #0]
 802cc76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802cc7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 802cc7c:	687b      	ldr	r3, [r7, #4]
 802cc7e:	7e9b      	ldrb	r3, [r3, #26]
 802cc80:	2b01      	cmp	r3, #1
 802cc82:	d108      	bne.n	802cc96 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 802cc84:	687b      	ldr	r3, [r7, #4]
 802cc86:	681b      	ldr	r3, [r3, #0]
 802cc88:	681a      	ldr	r2, [r3, #0]
 802cc8a:	687b      	ldr	r3, [r7, #4]
 802cc8c:	681b      	ldr	r3, [r3, #0]
 802cc8e:	f042 0220 	orr.w	r2, r2, #32
 802cc92:	601a      	str	r2, [r3, #0]
 802cc94:	e007      	b.n	802cca6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 802cc96:	687b      	ldr	r3, [r7, #4]
 802cc98:	681b      	ldr	r3, [r3, #0]
 802cc9a:	681a      	ldr	r2, [r3, #0]
 802cc9c:	687b      	ldr	r3, [r7, #4]
 802cc9e:	681b      	ldr	r3, [r3, #0]
 802cca0:	f022 0220 	bic.w	r2, r2, #32
 802cca4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 802cca6:	687b      	ldr	r3, [r7, #4]
 802cca8:	7edb      	ldrb	r3, [r3, #27]
 802ccaa:	2b01      	cmp	r3, #1
 802ccac:	d108      	bne.n	802ccc0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 802ccae:	687b      	ldr	r3, [r7, #4]
 802ccb0:	681b      	ldr	r3, [r3, #0]
 802ccb2:	681a      	ldr	r2, [r3, #0]
 802ccb4:	687b      	ldr	r3, [r7, #4]
 802ccb6:	681b      	ldr	r3, [r3, #0]
 802ccb8:	f022 0210 	bic.w	r2, r2, #16
 802ccbc:	601a      	str	r2, [r3, #0]
 802ccbe:	e007      	b.n	802ccd0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 802ccc0:	687b      	ldr	r3, [r7, #4]
 802ccc2:	681b      	ldr	r3, [r3, #0]
 802ccc4:	681a      	ldr	r2, [r3, #0]
 802ccc6:	687b      	ldr	r3, [r7, #4]
 802ccc8:	681b      	ldr	r3, [r3, #0]
 802ccca:	f042 0210 	orr.w	r2, r2, #16
 802ccce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 802ccd0:	687b      	ldr	r3, [r7, #4]
 802ccd2:	7f1b      	ldrb	r3, [r3, #28]
 802ccd4:	2b01      	cmp	r3, #1
 802ccd6:	d108      	bne.n	802ccea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 802ccd8:	687b      	ldr	r3, [r7, #4]
 802ccda:	681b      	ldr	r3, [r3, #0]
 802ccdc:	681a      	ldr	r2, [r3, #0]
 802ccde:	687b      	ldr	r3, [r7, #4]
 802cce0:	681b      	ldr	r3, [r3, #0]
 802cce2:	f042 0208 	orr.w	r2, r2, #8
 802cce6:	601a      	str	r2, [r3, #0]
 802cce8:	e007      	b.n	802ccfa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 802ccea:	687b      	ldr	r3, [r7, #4]
 802ccec:	681b      	ldr	r3, [r3, #0]
 802ccee:	681a      	ldr	r2, [r3, #0]
 802ccf0:	687b      	ldr	r3, [r7, #4]
 802ccf2:	681b      	ldr	r3, [r3, #0]
 802ccf4:	f022 0208 	bic.w	r2, r2, #8
 802ccf8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 802ccfa:	687b      	ldr	r3, [r7, #4]
 802ccfc:	7f5b      	ldrb	r3, [r3, #29]
 802ccfe:	2b01      	cmp	r3, #1
 802cd00:	d108      	bne.n	802cd14 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 802cd02:	687b      	ldr	r3, [r7, #4]
 802cd04:	681b      	ldr	r3, [r3, #0]
 802cd06:	681a      	ldr	r2, [r3, #0]
 802cd08:	687b      	ldr	r3, [r7, #4]
 802cd0a:	681b      	ldr	r3, [r3, #0]
 802cd0c:	f042 0204 	orr.w	r2, r2, #4
 802cd10:	601a      	str	r2, [r3, #0]
 802cd12:	e007      	b.n	802cd24 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 802cd14:	687b      	ldr	r3, [r7, #4]
 802cd16:	681b      	ldr	r3, [r3, #0]
 802cd18:	681a      	ldr	r2, [r3, #0]
 802cd1a:	687b      	ldr	r3, [r7, #4]
 802cd1c:	681b      	ldr	r3, [r3, #0]
 802cd1e:	f022 0204 	bic.w	r2, r2, #4
 802cd22:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 802cd24:	687b      	ldr	r3, [r7, #4]
 802cd26:	689a      	ldr	r2, [r3, #8]
 802cd28:	687b      	ldr	r3, [r7, #4]
 802cd2a:	68db      	ldr	r3, [r3, #12]
 802cd2c:	431a      	orrs	r2, r3
 802cd2e:	687b      	ldr	r3, [r7, #4]
 802cd30:	691b      	ldr	r3, [r3, #16]
 802cd32:	431a      	orrs	r2, r3
 802cd34:	687b      	ldr	r3, [r7, #4]
 802cd36:	695b      	ldr	r3, [r3, #20]
 802cd38:	ea42 0103 	orr.w	r1, r2, r3
 802cd3c:	687b      	ldr	r3, [r7, #4]
 802cd3e:	685b      	ldr	r3, [r3, #4]
 802cd40:	1e5a      	subs	r2, r3, #1
 802cd42:	687b      	ldr	r3, [r7, #4]
 802cd44:	681b      	ldr	r3, [r3, #0]
 802cd46:	430a      	orrs	r2, r1
 802cd48:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 802cd4a:	687b      	ldr	r3, [r7, #4]
 802cd4c:	2200      	movs	r2, #0
 802cd4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 802cd50:	687b      	ldr	r3, [r7, #4]
 802cd52:	2201      	movs	r2, #1
 802cd54:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 802cd58:	2300      	movs	r3, #0
}
 802cd5a:	4618      	mov	r0, r3
 802cd5c:	3710      	adds	r7, #16
 802cd5e:	46bd      	mov	sp, r7
 802cd60:	bd80      	pop	{r7, pc}
	...

0802cd64 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 802cd64:	b480      	push	{r7}
 802cd66:	b087      	sub	sp, #28
 802cd68:	af00      	add	r7, sp, #0
 802cd6a:	6078      	str	r0, [r7, #4]
 802cd6c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 802cd6e:	687b      	ldr	r3, [r7, #4]
 802cd70:	681b      	ldr	r3, [r3, #0]
 802cd72:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 802cd74:	687b      	ldr	r3, [r7, #4]
 802cd76:	f893 3020 	ldrb.w	r3, [r3, #32]
 802cd7a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 802cd7c:	7cfb      	ldrb	r3, [r7, #19]
 802cd7e:	2b01      	cmp	r3, #1
 802cd80:	d003      	beq.n	802cd8a <HAL_CAN_ConfigFilter+0x26>
 802cd82:	7cfb      	ldrb	r3, [r7, #19]
 802cd84:	2b02      	cmp	r3, #2
 802cd86:	f040 80c7 	bne.w	802cf18 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 802cd8a:	687b      	ldr	r3, [r7, #4]
 802cd8c:	681b      	ldr	r3, [r3, #0]
 802cd8e:	4a69      	ldr	r2, [pc, #420]	; (802cf34 <HAL_CAN_ConfigFilter+0x1d0>)
 802cd90:	4293      	cmp	r3, r2
 802cd92:	d001      	beq.n	802cd98 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 802cd94:	4b68      	ldr	r3, [pc, #416]	; (802cf38 <HAL_CAN_ConfigFilter+0x1d4>)
 802cd96:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 802cd98:	697b      	ldr	r3, [r7, #20]
 802cd9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 802cd9e:	f043 0201 	orr.w	r2, r3, #1
 802cda2:	697b      	ldr	r3, [r7, #20]
 802cda4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 802cda8:	697b      	ldr	r3, [r7, #20]
 802cdaa:	4a63      	ldr	r2, [pc, #396]	; (802cf38 <HAL_CAN_ConfigFilter+0x1d4>)
 802cdac:	4293      	cmp	r3, r2
 802cdae:	d111      	bne.n	802cdd4 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 802cdb0:	697b      	ldr	r3, [r7, #20]
 802cdb2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 802cdb6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 802cdba:	697b      	ldr	r3, [r7, #20]
 802cdbc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 802cdc0:	697b      	ldr	r3, [r7, #20]
 802cdc2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 802cdc6:	683b      	ldr	r3, [r7, #0]
 802cdc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802cdca:	021b      	lsls	r3, r3, #8
 802cdcc:	431a      	orrs	r2, r3
 802cdce:	697b      	ldr	r3, [r7, #20]
 802cdd0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 802cdd4:	683b      	ldr	r3, [r7, #0]
 802cdd6:	695b      	ldr	r3, [r3, #20]
 802cdd8:	f003 031f 	and.w	r3, r3, #31
 802cddc:	2201      	movs	r2, #1
 802cdde:	fa02 f303 	lsl.w	r3, r2, r3
 802cde2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 802cde4:	697b      	ldr	r3, [r7, #20]
 802cde6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 802cdea:	68fb      	ldr	r3, [r7, #12]
 802cdec:	43db      	mvns	r3, r3
 802cdee:	401a      	ands	r2, r3
 802cdf0:	697b      	ldr	r3, [r7, #20]
 802cdf2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 802cdf6:	683b      	ldr	r3, [r7, #0]
 802cdf8:	69db      	ldr	r3, [r3, #28]
 802cdfa:	2b00      	cmp	r3, #0
 802cdfc:	d123      	bne.n	802ce46 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 802cdfe:	697b      	ldr	r3, [r7, #20]
 802ce00:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 802ce04:	68fb      	ldr	r3, [r7, #12]
 802ce06:	43db      	mvns	r3, r3
 802ce08:	401a      	ands	r2, r3
 802ce0a:	697b      	ldr	r3, [r7, #20]
 802ce0c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 802ce10:	683b      	ldr	r3, [r7, #0]
 802ce12:	68db      	ldr	r3, [r3, #12]
 802ce14:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 802ce16:	683b      	ldr	r3, [r7, #0]
 802ce18:	685b      	ldr	r3, [r3, #4]
 802ce1a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 802ce1c:	683a      	ldr	r2, [r7, #0]
 802ce1e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 802ce20:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 802ce22:	697b      	ldr	r3, [r7, #20]
 802ce24:	3248      	adds	r2, #72	; 0x48
 802ce26:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 802ce2a:	683b      	ldr	r3, [r7, #0]
 802ce2c:	689b      	ldr	r3, [r3, #8]
 802ce2e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 802ce30:	683b      	ldr	r3, [r7, #0]
 802ce32:	681b      	ldr	r3, [r3, #0]
 802ce34:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 802ce36:	683b      	ldr	r3, [r7, #0]
 802ce38:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 802ce3a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 802ce3c:	6979      	ldr	r1, [r7, #20]
 802ce3e:	3348      	adds	r3, #72	; 0x48
 802ce40:	00db      	lsls	r3, r3, #3
 802ce42:	440b      	add	r3, r1
 802ce44:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 802ce46:	683b      	ldr	r3, [r7, #0]
 802ce48:	69db      	ldr	r3, [r3, #28]
 802ce4a:	2b01      	cmp	r3, #1
 802ce4c:	d122      	bne.n	802ce94 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 802ce4e:	697b      	ldr	r3, [r7, #20]
 802ce50:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 802ce54:	68fb      	ldr	r3, [r7, #12]
 802ce56:	431a      	orrs	r2, r3
 802ce58:	697b      	ldr	r3, [r7, #20]
 802ce5a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 802ce5e:	683b      	ldr	r3, [r7, #0]
 802ce60:	681b      	ldr	r3, [r3, #0]
 802ce62:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 802ce64:	683b      	ldr	r3, [r7, #0]
 802ce66:	685b      	ldr	r3, [r3, #4]
 802ce68:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 802ce6a:	683a      	ldr	r2, [r7, #0]
 802ce6c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 802ce6e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 802ce70:	697b      	ldr	r3, [r7, #20]
 802ce72:	3248      	adds	r2, #72	; 0x48
 802ce74:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 802ce78:	683b      	ldr	r3, [r7, #0]
 802ce7a:	689b      	ldr	r3, [r3, #8]
 802ce7c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 802ce7e:	683b      	ldr	r3, [r7, #0]
 802ce80:	68db      	ldr	r3, [r3, #12]
 802ce82:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 802ce84:	683b      	ldr	r3, [r7, #0]
 802ce86:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 802ce88:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 802ce8a:	6979      	ldr	r1, [r7, #20]
 802ce8c:	3348      	adds	r3, #72	; 0x48
 802ce8e:	00db      	lsls	r3, r3, #3
 802ce90:	440b      	add	r3, r1
 802ce92:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 802ce94:	683b      	ldr	r3, [r7, #0]
 802ce96:	699b      	ldr	r3, [r3, #24]
 802ce98:	2b00      	cmp	r3, #0
 802ce9a:	d109      	bne.n	802ceb0 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 802ce9c:	697b      	ldr	r3, [r7, #20]
 802ce9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 802cea2:	68fb      	ldr	r3, [r7, #12]
 802cea4:	43db      	mvns	r3, r3
 802cea6:	401a      	ands	r2, r3
 802cea8:	697b      	ldr	r3, [r7, #20]
 802ceaa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 802ceae:	e007      	b.n	802cec0 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 802ceb0:	697b      	ldr	r3, [r7, #20]
 802ceb2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 802ceb6:	68fb      	ldr	r3, [r7, #12]
 802ceb8:	431a      	orrs	r2, r3
 802ceba:	697b      	ldr	r3, [r7, #20]
 802cebc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 802cec0:	683b      	ldr	r3, [r7, #0]
 802cec2:	691b      	ldr	r3, [r3, #16]
 802cec4:	2b00      	cmp	r3, #0
 802cec6:	d109      	bne.n	802cedc <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 802cec8:	697b      	ldr	r3, [r7, #20]
 802ceca:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 802cece:	68fb      	ldr	r3, [r7, #12]
 802ced0:	43db      	mvns	r3, r3
 802ced2:	401a      	ands	r2, r3
 802ced4:	697b      	ldr	r3, [r7, #20]
 802ced6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 802ceda:	e007      	b.n	802ceec <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 802cedc:	697b      	ldr	r3, [r7, #20]
 802cede:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 802cee2:	68fb      	ldr	r3, [r7, #12]
 802cee4:	431a      	orrs	r2, r3
 802cee6:	697b      	ldr	r3, [r7, #20]
 802cee8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 802ceec:	683b      	ldr	r3, [r7, #0]
 802ceee:	6a1b      	ldr	r3, [r3, #32]
 802cef0:	2b01      	cmp	r3, #1
 802cef2:	d107      	bne.n	802cf04 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 802cef4:	697b      	ldr	r3, [r7, #20]
 802cef6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 802cefa:	68fb      	ldr	r3, [r7, #12]
 802cefc:	431a      	orrs	r2, r3
 802cefe:	697b      	ldr	r3, [r7, #20]
 802cf00:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 802cf04:	697b      	ldr	r3, [r7, #20]
 802cf06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 802cf0a:	f023 0201 	bic.w	r2, r3, #1
 802cf0e:	697b      	ldr	r3, [r7, #20]
 802cf10:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 802cf14:	2300      	movs	r3, #0
 802cf16:	e006      	b.n	802cf26 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 802cf18:	687b      	ldr	r3, [r7, #4]
 802cf1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802cf1c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 802cf20:	687b      	ldr	r3, [r7, #4]
 802cf22:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 802cf24:	2301      	movs	r3, #1
  }
}
 802cf26:	4618      	mov	r0, r3
 802cf28:	371c      	adds	r7, #28
 802cf2a:	46bd      	mov	sp, r7
 802cf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cf30:	4770      	bx	lr
 802cf32:	bf00      	nop
 802cf34:	40006c00 	.word	0x40006c00
 802cf38:	40006400 	.word	0x40006400

0802cf3c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 802cf3c:	b580      	push	{r7, lr}
 802cf3e:	b084      	sub	sp, #16
 802cf40:	af00      	add	r7, sp, #0
 802cf42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 802cf44:	687b      	ldr	r3, [r7, #4]
 802cf46:	f893 3020 	ldrb.w	r3, [r3, #32]
 802cf4a:	b2db      	uxtb	r3, r3
 802cf4c:	2b01      	cmp	r3, #1
 802cf4e:	d12e      	bne.n	802cfae <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 802cf50:	687b      	ldr	r3, [r7, #4]
 802cf52:	2202      	movs	r2, #2
 802cf54:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 802cf58:	687b      	ldr	r3, [r7, #4]
 802cf5a:	681b      	ldr	r3, [r3, #0]
 802cf5c:	681a      	ldr	r2, [r3, #0]
 802cf5e:	687b      	ldr	r3, [r7, #4]
 802cf60:	681b      	ldr	r3, [r3, #0]
 802cf62:	f022 0201 	bic.w	r2, r2, #1
 802cf66:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 802cf68:	f7ff fa00 	bl	802c36c <HAL_GetTick>
 802cf6c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 802cf6e:	e012      	b.n	802cf96 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 802cf70:	f7ff f9fc 	bl	802c36c <HAL_GetTick>
 802cf74:	4602      	mov	r2, r0
 802cf76:	68fb      	ldr	r3, [r7, #12]
 802cf78:	1ad3      	subs	r3, r2, r3
 802cf7a:	2b0a      	cmp	r3, #10
 802cf7c:	d90b      	bls.n	802cf96 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 802cf7e:	687b      	ldr	r3, [r7, #4]
 802cf80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802cf82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 802cf86:	687b      	ldr	r3, [r7, #4]
 802cf88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 802cf8a:	687b      	ldr	r3, [r7, #4]
 802cf8c:	2205      	movs	r2, #5
 802cf8e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 802cf92:	2301      	movs	r3, #1
 802cf94:	e012      	b.n	802cfbc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 802cf96:	687b      	ldr	r3, [r7, #4]
 802cf98:	681b      	ldr	r3, [r3, #0]
 802cf9a:	685b      	ldr	r3, [r3, #4]
 802cf9c:	f003 0301 	and.w	r3, r3, #1
 802cfa0:	2b00      	cmp	r3, #0
 802cfa2:	d1e5      	bne.n	802cf70 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 802cfa4:	687b      	ldr	r3, [r7, #4]
 802cfa6:	2200      	movs	r2, #0
 802cfa8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 802cfaa:	2300      	movs	r3, #0
 802cfac:	e006      	b.n	802cfbc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 802cfae:	687b      	ldr	r3, [r7, #4]
 802cfb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802cfb2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 802cfb6:	687b      	ldr	r3, [r7, #4]
 802cfb8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 802cfba:	2301      	movs	r3, #1
  }
}
 802cfbc:	4618      	mov	r0, r3
 802cfbe:	3710      	adds	r7, #16
 802cfc0:	46bd      	mov	sp, r7
 802cfc2:	bd80      	pop	{r7, pc}

0802cfc4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 802cfc4:	b480      	push	{r7}
 802cfc6:	b089      	sub	sp, #36	; 0x24
 802cfc8:	af00      	add	r7, sp, #0
 802cfca:	60f8      	str	r0, [r7, #12]
 802cfcc:	60b9      	str	r1, [r7, #8]
 802cfce:	607a      	str	r2, [r7, #4]
 802cfd0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 802cfd2:	68fb      	ldr	r3, [r7, #12]
 802cfd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 802cfd8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 802cfda:	68fb      	ldr	r3, [r7, #12]
 802cfdc:	681b      	ldr	r3, [r3, #0]
 802cfde:	689b      	ldr	r3, [r3, #8]
 802cfe0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 802cfe2:	7ffb      	ldrb	r3, [r7, #31]
 802cfe4:	2b01      	cmp	r3, #1
 802cfe6:	d003      	beq.n	802cff0 <HAL_CAN_AddTxMessage+0x2c>
 802cfe8:	7ffb      	ldrb	r3, [r7, #31]
 802cfea:	2b02      	cmp	r3, #2
 802cfec:	f040 80b8 	bne.w	802d160 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 802cff0:	69bb      	ldr	r3, [r7, #24]
 802cff2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 802cff6:	2b00      	cmp	r3, #0
 802cff8:	d10a      	bne.n	802d010 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 802cffa:	69bb      	ldr	r3, [r7, #24]
 802cffc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 802d000:	2b00      	cmp	r3, #0
 802d002:	d105      	bne.n	802d010 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 802d004:	69bb      	ldr	r3, [r7, #24]
 802d006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 802d00a:	2b00      	cmp	r3, #0
 802d00c:	f000 80a0 	beq.w	802d150 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 802d010:	69bb      	ldr	r3, [r7, #24]
 802d012:	0e1b      	lsrs	r3, r3, #24
 802d014:	f003 0303 	and.w	r3, r3, #3
 802d018:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 802d01a:	697b      	ldr	r3, [r7, #20]
 802d01c:	2b02      	cmp	r3, #2
 802d01e:	d907      	bls.n	802d030 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 802d020:	68fb      	ldr	r3, [r7, #12]
 802d022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802d024:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 802d028:	68fb      	ldr	r3, [r7, #12]
 802d02a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 802d02c:	2301      	movs	r3, #1
 802d02e:	e09e      	b.n	802d16e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 802d030:	2201      	movs	r2, #1
 802d032:	697b      	ldr	r3, [r7, #20]
 802d034:	409a      	lsls	r2, r3
 802d036:	683b      	ldr	r3, [r7, #0]
 802d038:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 802d03a:	68bb      	ldr	r3, [r7, #8]
 802d03c:	689b      	ldr	r3, [r3, #8]
 802d03e:	2b00      	cmp	r3, #0
 802d040:	d10d      	bne.n	802d05e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 802d042:	68bb      	ldr	r3, [r7, #8]
 802d044:	681b      	ldr	r3, [r3, #0]
 802d046:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 802d048:	68bb      	ldr	r3, [r7, #8]
 802d04a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 802d04c:	68f9      	ldr	r1, [r7, #12]
 802d04e:	6809      	ldr	r1, [r1, #0]
 802d050:	431a      	orrs	r2, r3
 802d052:	697b      	ldr	r3, [r7, #20]
 802d054:	3318      	adds	r3, #24
 802d056:	011b      	lsls	r3, r3, #4
 802d058:	440b      	add	r3, r1
 802d05a:	601a      	str	r2, [r3, #0]
 802d05c:	e00f      	b.n	802d07e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 802d05e:	68bb      	ldr	r3, [r7, #8]
 802d060:	685b      	ldr	r3, [r3, #4]
 802d062:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 802d064:	68bb      	ldr	r3, [r7, #8]
 802d066:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 802d068:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 802d06a:	68bb      	ldr	r3, [r7, #8]
 802d06c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 802d06e:	68f9      	ldr	r1, [r7, #12]
 802d070:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 802d072:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 802d074:	697b      	ldr	r3, [r7, #20]
 802d076:	3318      	adds	r3, #24
 802d078:	011b      	lsls	r3, r3, #4
 802d07a:	440b      	add	r3, r1
 802d07c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 802d07e:	68fb      	ldr	r3, [r7, #12]
 802d080:	6819      	ldr	r1, [r3, #0]
 802d082:	68bb      	ldr	r3, [r7, #8]
 802d084:	691a      	ldr	r2, [r3, #16]
 802d086:	697b      	ldr	r3, [r7, #20]
 802d088:	3318      	adds	r3, #24
 802d08a:	011b      	lsls	r3, r3, #4
 802d08c:	440b      	add	r3, r1
 802d08e:	3304      	adds	r3, #4
 802d090:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 802d092:	68bb      	ldr	r3, [r7, #8]
 802d094:	7d1b      	ldrb	r3, [r3, #20]
 802d096:	2b01      	cmp	r3, #1
 802d098:	d111      	bne.n	802d0be <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 802d09a:	68fb      	ldr	r3, [r7, #12]
 802d09c:	681a      	ldr	r2, [r3, #0]
 802d09e:	697b      	ldr	r3, [r7, #20]
 802d0a0:	3318      	adds	r3, #24
 802d0a2:	011b      	lsls	r3, r3, #4
 802d0a4:	4413      	add	r3, r2
 802d0a6:	3304      	adds	r3, #4
 802d0a8:	681b      	ldr	r3, [r3, #0]
 802d0aa:	68fa      	ldr	r2, [r7, #12]
 802d0ac:	6811      	ldr	r1, [r2, #0]
 802d0ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 802d0b2:	697b      	ldr	r3, [r7, #20]
 802d0b4:	3318      	adds	r3, #24
 802d0b6:	011b      	lsls	r3, r3, #4
 802d0b8:	440b      	add	r3, r1
 802d0ba:	3304      	adds	r3, #4
 802d0bc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 802d0be:	687b      	ldr	r3, [r7, #4]
 802d0c0:	3307      	adds	r3, #7
 802d0c2:	781b      	ldrb	r3, [r3, #0]
 802d0c4:	061a      	lsls	r2, r3, #24
 802d0c6:	687b      	ldr	r3, [r7, #4]
 802d0c8:	3306      	adds	r3, #6
 802d0ca:	781b      	ldrb	r3, [r3, #0]
 802d0cc:	041b      	lsls	r3, r3, #16
 802d0ce:	431a      	orrs	r2, r3
 802d0d0:	687b      	ldr	r3, [r7, #4]
 802d0d2:	3305      	adds	r3, #5
 802d0d4:	781b      	ldrb	r3, [r3, #0]
 802d0d6:	021b      	lsls	r3, r3, #8
 802d0d8:	4313      	orrs	r3, r2
 802d0da:	687a      	ldr	r2, [r7, #4]
 802d0dc:	3204      	adds	r2, #4
 802d0de:	7812      	ldrb	r2, [r2, #0]
 802d0e0:	4610      	mov	r0, r2
 802d0e2:	68fa      	ldr	r2, [r7, #12]
 802d0e4:	6811      	ldr	r1, [r2, #0]
 802d0e6:	ea43 0200 	orr.w	r2, r3, r0
 802d0ea:	697b      	ldr	r3, [r7, #20]
 802d0ec:	011b      	lsls	r3, r3, #4
 802d0ee:	440b      	add	r3, r1
 802d0f0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 802d0f4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 802d0f6:	687b      	ldr	r3, [r7, #4]
 802d0f8:	3303      	adds	r3, #3
 802d0fa:	781b      	ldrb	r3, [r3, #0]
 802d0fc:	061a      	lsls	r2, r3, #24
 802d0fe:	687b      	ldr	r3, [r7, #4]
 802d100:	3302      	adds	r3, #2
 802d102:	781b      	ldrb	r3, [r3, #0]
 802d104:	041b      	lsls	r3, r3, #16
 802d106:	431a      	orrs	r2, r3
 802d108:	687b      	ldr	r3, [r7, #4]
 802d10a:	3301      	adds	r3, #1
 802d10c:	781b      	ldrb	r3, [r3, #0]
 802d10e:	021b      	lsls	r3, r3, #8
 802d110:	4313      	orrs	r3, r2
 802d112:	687a      	ldr	r2, [r7, #4]
 802d114:	7812      	ldrb	r2, [r2, #0]
 802d116:	4610      	mov	r0, r2
 802d118:	68fa      	ldr	r2, [r7, #12]
 802d11a:	6811      	ldr	r1, [r2, #0]
 802d11c:	ea43 0200 	orr.w	r2, r3, r0
 802d120:	697b      	ldr	r3, [r7, #20]
 802d122:	011b      	lsls	r3, r3, #4
 802d124:	440b      	add	r3, r1
 802d126:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 802d12a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 802d12c:	68fb      	ldr	r3, [r7, #12]
 802d12e:	681a      	ldr	r2, [r3, #0]
 802d130:	697b      	ldr	r3, [r7, #20]
 802d132:	3318      	adds	r3, #24
 802d134:	011b      	lsls	r3, r3, #4
 802d136:	4413      	add	r3, r2
 802d138:	681b      	ldr	r3, [r3, #0]
 802d13a:	68fa      	ldr	r2, [r7, #12]
 802d13c:	6811      	ldr	r1, [r2, #0]
 802d13e:	f043 0201 	orr.w	r2, r3, #1
 802d142:	697b      	ldr	r3, [r7, #20]
 802d144:	3318      	adds	r3, #24
 802d146:	011b      	lsls	r3, r3, #4
 802d148:	440b      	add	r3, r1
 802d14a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 802d14c:	2300      	movs	r3, #0
 802d14e:	e00e      	b.n	802d16e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 802d150:	68fb      	ldr	r3, [r7, #12]
 802d152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802d154:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 802d158:	68fb      	ldr	r3, [r7, #12]
 802d15a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 802d15c:	2301      	movs	r3, #1
 802d15e:	e006      	b.n	802d16e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 802d160:	68fb      	ldr	r3, [r7, #12]
 802d162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802d164:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 802d168:	68fb      	ldr	r3, [r7, #12]
 802d16a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 802d16c:	2301      	movs	r3, #1
  }
}
 802d16e:	4618      	mov	r0, r3
 802d170:	3724      	adds	r7, #36	; 0x24
 802d172:	46bd      	mov	sp, r7
 802d174:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d178:	4770      	bx	lr

0802d17a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 802d17a:	b480      	push	{r7}
 802d17c:	b085      	sub	sp, #20
 802d17e:	af00      	add	r7, sp, #0
 802d180:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 802d182:	2300      	movs	r3, #0
 802d184:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 802d186:	687b      	ldr	r3, [r7, #4]
 802d188:	f893 3020 	ldrb.w	r3, [r3, #32]
 802d18c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 802d18e:	7afb      	ldrb	r3, [r7, #11]
 802d190:	2b01      	cmp	r3, #1
 802d192:	d002      	beq.n	802d19a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 802d194:	7afb      	ldrb	r3, [r7, #11]
 802d196:	2b02      	cmp	r3, #2
 802d198:	d11d      	bne.n	802d1d6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 802d19a:	687b      	ldr	r3, [r7, #4]
 802d19c:	681b      	ldr	r3, [r3, #0]
 802d19e:	689b      	ldr	r3, [r3, #8]
 802d1a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 802d1a4:	2b00      	cmp	r3, #0
 802d1a6:	d002      	beq.n	802d1ae <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 802d1a8:	68fb      	ldr	r3, [r7, #12]
 802d1aa:	3301      	adds	r3, #1
 802d1ac:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 802d1ae:	687b      	ldr	r3, [r7, #4]
 802d1b0:	681b      	ldr	r3, [r3, #0]
 802d1b2:	689b      	ldr	r3, [r3, #8]
 802d1b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802d1b8:	2b00      	cmp	r3, #0
 802d1ba:	d002      	beq.n	802d1c2 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 802d1bc:	68fb      	ldr	r3, [r7, #12]
 802d1be:	3301      	adds	r3, #1
 802d1c0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 802d1c2:	687b      	ldr	r3, [r7, #4]
 802d1c4:	681b      	ldr	r3, [r3, #0]
 802d1c6:	689b      	ldr	r3, [r3, #8]
 802d1c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802d1cc:	2b00      	cmp	r3, #0
 802d1ce:	d002      	beq.n	802d1d6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 802d1d0:	68fb      	ldr	r3, [r7, #12]
 802d1d2:	3301      	adds	r3, #1
 802d1d4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 802d1d6:	68fb      	ldr	r3, [r7, #12]
}
 802d1d8:	4618      	mov	r0, r3
 802d1da:	3714      	adds	r7, #20
 802d1dc:	46bd      	mov	sp, r7
 802d1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d1e2:	4770      	bx	lr

0802d1e4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 802d1e4:	b480      	push	{r7}
 802d1e6:	b087      	sub	sp, #28
 802d1e8:	af00      	add	r7, sp, #0
 802d1ea:	60f8      	str	r0, [r7, #12]
 802d1ec:	60b9      	str	r1, [r7, #8]
 802d1ee:	607a      	str	r2, [r7, #4]
 802d1f0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 802d1f2:	68fb      	ldr	r3, [r7, #12]
 802d1f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 802d1f8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 802d1fa:	7dfb      	ldrb	r3, [r7, #23]
 802d1fc:	2b01      	cmp	r3, #1
 802d1fe:	d003      	beq.n	802d208 <HAL_CAN_GetRxMessage+0x24>
 802d200:	7dfb      	ldrb	r3, [r7, #23]
 802d202:	2b02      	cmp	r3, #2
 802d204:	f040 80f3 	bne.w	802d3ee <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 802d208:	68bb      	ldr	r3, [r7, #8]
 802d20a:	2b00      	cmp	r3, #0
 802d20c:	d10e      	bne.n	802d22c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 802d20e:	68fb      	ldr	r3, [r7, #12]
 802d210:	681b      	ldr	r3, [r3, #0]
 802d212:	68db      	ldr	r3, [r3, #12]
 802d214:	f003 0303 	and.w	r3, r3, #3
 802d218:	2b00      	cmp	r3, #0
 802d21a:	d116      	bne.n	802d24a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 802d21c:	68fb      	ldr	r3, [r7, #12]
 802d21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802d220:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 802d224:	68fb      	ldr	r3, [r7, #12]
 802d226:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 802d228:	2301      	movs	r3, #1
 802d22a:	e0e7      	b.n	802d3fc <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 802d22c:	68fb      	ldr	r3, [r7, #12]
 802d22e:	681b      	ldr	r3, [r3, #0]
 802d230:	691b      	ldr	r3, [r3, #16]
 802d232:	f003 0303 	and.w	r3, r3, #3
 802d236:	2b00      	cmp	r3, #0
 802d238:	d107      	bne.n	802d24a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 802d23a:	68fb      	ldr	r3, [r7, #12]
 802d23c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802d23e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 802d242:	68fb      	ldr	r3, [r7, #12]
 802d244:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 802d246:	2301      	movs	r3, #1
 802d248:	e0d8      	b.n	802d3fc <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 802d24a:	68fb      	ldr	r3, [r7, #12]
 802d24c:	681a      	ldr	r2, [r3, #0]
 802d24e:	68bb      	ldr	r3, [r7, #8]
 802d250:	331b      	adds	r3, #27
 802d252:	011b      	lsls	r3, r3, #4
 802d254:	4413      	add	r3, r2
 802d256:	681b      	ldr	r3, [r3, #0]
 802d258:	f003 0204 	and.w	r2, r3, #4
 802d25c:	687b      	ldr	r3, [r7, #4]
 802d25e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 802d260:	687b      	ldr	r3, [r7, #4]
 802d262:	689b      	ldr	r3, [r3, #8]
 802d264:	2b00      	cmp	r3, #0
 802d266:	d10c      	bne.n	802d282 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 802d268:	68fb      	ldr	r3, [r7, #12]
 802d26a:	681a      	ldr	r2, [r3, #0]
 802d26c:	68bb      	ldr	r3, [r7, #8]
 802d26e:	331b      	adds	r3, #27
 802d270:	011b      	lsls	r3, r3, #4
 802d272:	4413      	add	r3, r2
 802d274:	681b      	ldr	r3, [r3, #0]
 802d276:	0d5b      	lsrs	r3, r3, #21
 802d278:	f3c3 020a 	ubfx	r2, r3, #0, #11
 802d27c:	687b      	ldr	r3, [r7, #4]
 802d27e:	601a      	str	r2, [r3, #0]
 802d280:	e00b      	b.n	802d29a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 802d282:	68fb      	ldr	r3, [r7, #12]
 802d284:	681a      	ldr	r2, [r3, #0]
 802d286:	68bb      	ldr	r3, [r7, #8]
 802d288:	331b      	adds	r3, #27
 802d28a:	011b      	lsls	r3, r3, #4
 802d28c:	4413      	add	r3, r2
 802d28e:	681b      	ldr	r3, [r3, #0]
 802d290:	08db      	lsrs	r3, r3, #3
 802d292:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 802d296:	687b      	ldr	r3, [r7, #4]
 802d298:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 802d29a:	68fb      	ldr	r3, [r7, #12]
 802d29c:	681a      	ldr	r2, [r3, #0]
 802d29e:	68bb      	ldr	r3, [r7, #8]
 802d2a0:	331b      	adds	r3, #27
 802d2a2:	011b      	lsls	r3, r3, #4
 802d2a4:	4413      	add	r3, r2
 802d2a6:	681b      	ldr	r3, [r3, #0]
 802d2a8:	f003 0202 	and.w	r2, r3, #2
 802d2ac:	687b      	ldr	r3, [r7, #4]
 802d2ae:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 802d2b0:	68fb      	ldr	r3, [r7, #12]
 802d2b2:	681a      	ldr	r2, [r3, #0]
 802d2b4:	68bb      	ldr	r3, [r7, #8]
 802d2b6:	331b      	adds	r3, #27
 802d2b8:	011b      	lsls	r3, r3, #4
 802d2ba:	4413      	add	r3, r2
 802d2bc:	3304      	adds	r3, #4
 802d2be:	681b      	ldr	r3, [r3, #0]
 802d2c0:	f003 020f 	and.w	r2, r3, #15
 802d2c4:	687b      	ldr	r3, [r7, #4]
 802d2c6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 802d2c8:	68fb      	ldr	r3, [r7, #12]
 802d2ca:	681a      	ldr	r2, [r3, #0]
 802d2cc:	68bb      	ldr	r3, [r7, #8]
 802d2ce:	331b      	adds	r3, #27
 802d2d0:	011b      	lsls	r3, r3, #4
 802d2d2:	4413      	add	r3, r2
 802d2d4:	3304      	adds	r3, #4
 802d2d6:	681b      	ldr	r3, [r3, #0]
 802d2d8:	0a1b      	lsrs	r3, r3, #8
 802d2da:	b2da      	uxtb	r2, r3
 802d2dc:	687b      	ldr	r3, [r7, #4]
 802d2de:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 802d2e0:	68fb      	ldr	r3, [r7, #12]
 802d2e2:	681a      	ldr	r2, [r3, #0]
 802d2e4:	68bb      	ldr	r3, [r7, #8]
 802d2e6:	331b      	adds	r3, #27
 802d2e8:	011b      	lsls	r3, r3, #4
 802d2ea:	4413      	add	r3, r2
 802d2ec:	3304      	adds	r3, #4
 802d2ee:	681b      	ldr	r3, [r3, #0]
 802d2f0:	0c1b      	lsrs	r3, r3, #16
 802d2f2:	b29a      	uxth	r2, r3
 802d2f4:	687b      	ldr	r3, [r7, #4]
 802d2f6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 802d2f8:	68fb      	ldr	r3, [r7, #12]
 802d2fa:	681a      	ldr	r2, [r3, #0]
 802d2fc:	68bb      	ldr	r3, [r7, #8]
 802d2fe:	011b      	lsls	r3, r3, #4
 802d300:	4413      	add	r3, r2
 802d302:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 802d306:	681b      	ldr	r3, [r3, #0]
 802d308:	b2da      	uxtb	r2, r3
 802d30a:	683b      	ldr	r3, [r7, #0]
 802d30c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 802d30e:	68fb      	ldr	r3, [r7, #12]
 802d310:	681a      	ldr	r2, [r3, #0]
 802d312:	68bb      	ldr	r3, [r7, #8]
 802d314:	011b      	lsls	r3, r3, #4
 802d316:	4413      	add	r3, r2
 802d318:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 802d31c:	681b      	ldr	r3, [r3, #0]
 802d31e:	0a1a      	lsrs	r2, r3, #8
 802d320:	683b      	ldr	r3, [r7, #0]
 802d322:	3301      	adds	r3, #1
 802d324:	b2d2      	uxtb	r2, r2
 802d326:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 802d328:	68fb      	ldr	r3, [r7, #12]
 802d32a:	681a      	ldr	r2, [r3, #0]
 802d32c:	68bb      	ldr	r3, [r7, #8]
 802d32e:	011b      	lsls	r3, r3, #4
 802d330:	4413      	add	r3, r2
 802d332:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 802d336:	681b      	ldr	r3, [r3, #0]
 802d338:	0c1a      	lsrs	r2, r3, #16
 802d33a:	683b      	ldr	r3, [r7, #0]
 802d33c:	3302      	adds	r3, #2
 802d33e:	b2d2      	uxtb	r2, r2
 802d340:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 802d342:	68fb      	ldr	r3, [r7, #12]
 802d344:	681a      	ldr	r2, [r3, #0]
 802d346:	68bb      	ldr	r3, [r7, #8]
 802d348:	011b      	lsls	r3, r3, #4
 802d34a:	4413      	add	r3, r2
 802d34c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 802d350:	681b      	ldr	r3, [r3, #0]
 802d352:	0e1a      	lsrs	r2, r3, #24
 802d354:	683b      	ldr	r3, [r7, #0]
 802d356:	3303      	adds	r3, #3
 802d358:	b2d2      	uxtb	r2, r2
 802d35a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 802d35c:	68fb      	ldr	r3, [r7, #12]
 802d35e:	681a      	ldr	r2, [r3, #0]
 802d360:	68bb      	ldr	r3, [r7, #8]
 802d362:	011b      	lsls	r3, r3, #4
 802d364:	4413      	add	r3, r2
 802d366:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 802d36a:	681a      	ldr	r2, [r3, #0]
 802d36c:	683b      	ldr	r3, [r7, #0]
 802d36e:	3304      	adds	r3, #4
 802d370:	b2d2      	uxtb	r2, r2
 802d372:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 802d374:	68fb      	ldr	r3, [r7, #12]
 802d376:	681a      	ldr	r2, [r3, #0]
 802d378:	68bb      	ldr	r3, [r7, #8]
 802d37a:	011b      	lsls	r3, r3, #4
 802d37c:	4413      	add	r3, r2
 802d37e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 802d382:	681b      	ldr	r3, [r3, #0]
 802d384:	0a1a      	lsrs	r2, r3, #8
 802d386:	683b      	ldr	r3, [r7, #0]
 802d388:	3305      	adds	r3, #5
 802d38a:	b2d2      	uxtb	r2, r2
 802d38c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 802d38e:	68fb      	ldr	r3, [r7, #12]
 802d390:	681a      	ldr	r2, [r3, #0]
 802d392:	68bb      	ldr	r3, [r7, #8]
 802d394:	011b      	lsls	r3, r3, #4
 802d396:	4413      	add	r3, r2
 802d398:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 802d39c:	681b      	ldr	r3, [r3, #0]
 802d39e:	0c1a      	lsrs	r2, r3, #16
 802d3a0:	683b      	ldr	r3, [r7, #0]
 802d3a2:	3306      	adds	r3, #6
 802d3a4:	b2d2      	uxtb	r2, r2
 802d3a6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 802d3a8:	68fb      	ldr	r3, [r7, #12]
 802d3aa:	681a      	ldr	r2, [r3, #0]
 802d3ac:	68bb      	ldr	r3, [r7, #8]
 802d3ae:	011b      	lsls	r3, r3, #4
 802d3b0:	4413      	add	r3, r2
 802d3b2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 802d3b6:	681b      	ldr	r3, [r3, #0]
 802d3b8:	0e1a      	lsrs	r2, r3, #24
 802d3ba:	683b      	ldr	r3, [r7, #0]
 802d3bc:	3307      	adds	r3, #7
 802d3be:	b2d2      	uxtb	r2, r2
 802d3c0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 802d3c2:	68bb      	ldr	r3, [r7, #8]
 802d3c4:	2b00      	cmp	r3, #0
 802d3c6:	d108      	bne.n	802d3da <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 802d3c8:	68fb      	ldr	r3, [r7, #12]
 802d3ca:	681b      	ldr	r3, [r3, #0]
 802d3cc:	68da      	ldr	r2, [r3, #12]
 802d3ce:	68fb      	ldr	r3, [r7, #12]
 802d3d0:	681b      	ldr	r3, [r3, #0]
 802d3d2:	f042 0220 	orr.w	r2, r2, #32
 802d3d6:	60da      	str	r2, [r3, #12]
 802d3d8:	e007      	b.n	802d3ea <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 802d3da:	68fb      	ldr	r3, [r7, #12]
 802d3dc:	681b      	ldr	r3, [r3, #0]
 802d3de:	691a      	ldr	r2, [r3, #16]
 802d3e0:	68fb      	ldr	r3, [r7, #12]
 802d3e2:	681b      	ldr	r3, [r3, #0]
 802d3e4:	f042 0220 	orr.w	r2, r2, #32
 802d3e8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 802d3ea:	2300      	movs	r3, #0
 802d3ec:	e006      	b.n	802d3fc <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 802d3ee:	68fb      	ldr	r3, [r7, #12]
 802d3f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802d3f2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 802d3f6:	68fb      	ldr	r3, [r7, #12]
 802d3f8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 802d3fa:	2301      	movs	r3, #1
  }
}
 802d3fc:	4618      	mov	r0, r3
 802d3fe:	371c      	adds	r7, #28
 802d400:	46bd      	mov	sp, r7
 802d402:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d406:	4770      	bx	lr

0802d408 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 802d408:	b480      	push	{r7}
 802d40a:	b085      	sub	sp, #20
 802d40c:	af00      	add	r7, sp, #0
 802d40e:	6078      	str	r0, [r7, #4]
 802d410:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 802d412:	687b      	ldr	r3, [r7, #4]
 802d414:	f893 3020 	ldrb.w	r3, [r3, #32]
 802d418:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 802d41a:	7bfb      	ldrb	r3, [r7, #15]
 802d41c:	2b01      	cmp	r3, #1
 802d41e:	d002      	beq.n	802d426 <HAL_CAN_ActivateNotification+0x1e>
 802d420:	7bfb      	ldrb	r3, [r7, #15]
 802d422:	2b02      	cmp	r3, #2
 802d424:	d109      	bne.n	802d43a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 802d426:	687b      	ldr	r3, [r7, #4]
 802d428:	681b      	ldr	r3, [r3, #0]
 802d42a:	6959      	ldr	r1, [r3, #20]
 802d42c:	687b      	ldr	r3, [r7, #4]
 802d42e:	681b      	ldr	r3, [r3, #0]
 802d430:	683a      	ldr	r2, [r7, #0]
 802d432:	430a      	orrs	r2, r1
 802d434:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 802d436:	2300      	movs	r3, #0
 802d438:	e006      	b.n	802d448 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 802d43a:	687b      	ldr	r3, [r7, #4]
 802d43c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802d43e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 802d442:	687b      	ldr	r3, [r7, #4]
 802d444:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 802d446:	2301      	movs	r3, #1
  }
}
 802d448:	4618      	mov	r0, r3
 802d44a:	3714      	adds	r7, #20
 802d44c:	46bd      	mov	sp, r7
 802d44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d452:	4770      	bx	lr

0802d454 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 802d454:	b580      	push	{r7, lr}
 802d456:	b08a      	sub	sp, #40	; 0x28
 802d458:	af00      	add	r7, sp, #0
 802d45a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 802d45c:	2300      	movs	r3, #0
 802d45e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 802d460:	687b      	ldr	r3, [r7, #4]
 802d462:	681b      	ldr	r3, [r3, #0]
 802d464:	695b      	ldr	r3, [r3, #20]
 802d466:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 802d468:	687b      	ldr	r3, [r7, #4]
 802d46a:	681b      	ldr	r3, [r3, #0]
 802d46c:	685b      	ldr	r3, [r3, #4]
 802d46e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 802d470:	687b      	ldr	r3, [r7, #4]
 802d472:	681b      	ldr	r3, [r3, #0]
 802d474:	689b      	ldr	r3, [r3, #8]
 802d476:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 802d478:	687b      	ldr	r3, [r7, #4]
 802d47a:	681b      	ldr	r3, [r3, #0]
 802d47c:	68db      	ldr	r3, [r3, #12]
 802d47e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 802d480:	687b      	ldr	r3, [r7, #4]
 802d482:	681b      	ldr	r3, [r3, #0]
 802d484:	691b      	ldr	r3, [r3, #16]
 802d486:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 802d488:	687b      	ldr	r3, [r7, #4]
 802d48a:	681b      	ldr	r3, [r3, #0]
 802d48c:	699b      	ldr	r3, [r3, #24]
 802d48e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 802d490:	6a3b      	ldr	r3, [r7, #32]
 802d492:	f003 0301 	and.w	r3, r3, #1
 802d496:	2b00      	cmp	r3, #0
 802d498:	d07c      	beq.n	802d594 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 802d49a:	69bb      	ldr	r3, [r7, #24]
 802d49c:	f003 0301 	and.w	r3, r3, #1
 802d4a0:	2b00      	cmp	r3, #0
 802d4a2:	d023      	beq.n	802d4ec <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 802d4a4:	687b      	ldr	r3, [r7, #4]
 802d4a6:	681b      	ldr	r3, [r3, #0]
 802d4a8:	2201      	movs	r2, #1
 802d4aa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 802d4ac:	69bb      	ldr	r3, [r7, #24]
 802d4ae:	f003 0302 	and.w	r3, r3, #2
 802d4b2:	2b00      	cmp	r3, #0
 802d4b4:	d003      	beq.n	802d4be <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 802d4b6:	6878      	ldr	r0, [r7, #4]
 802d4b8:	f000 f97d 	bl	802d7b6 <HAL_CAN_TxMailbox0CompleteCallback>
 802d4bc:	e016      	b.n	802d4ec <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 802d4be:	69bb      	ldr	r3, [r7, #24]
 802d4c0:	f003 0304 	and.w	r3, r3, #4
 802d4c4:	2b00      	cmp	r3, #0
 802d4c6:	d004      	beq.n	802d4d2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 802d4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d4ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 802d4ce:	627b      	str	r3, [r7, #36]	; 0x24
 802d4d0:	e00c      	b.n	802d4ec <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 802d4d2:	69bb      	ldr	r3, [r7, #24]
 802d4d4:	f003 0308 	and.w	r3, r3, #8
 802d4d8:	2b00      	cmp	r3, #0
 802d4da:	d004      	beq.n	802d4e6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 802d4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d4de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802d4e2:	627b      	str	r3, [r7, #36]	; 0x24
 802d4e4:	e002      	b.n	802d4ec <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 802d4e6:	6878      	ldr	r0, [r7, #4]
 802d4e8:	f000 f983 	bl	802d7f2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 802d4ec:	69bb      	ldr	r3, [r7, #24]
 802d4ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802d4f2:	2b00      	cmp	r3, #0
 802d4f4:	d024      	beq.n	802d540 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 802d4f6:	687b      	ldr	r3, [r7, #4]
 802d4f8:	681b      	ldr	r3, [r3, #0]
 802d4fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 802d4fe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 802d500:	69bb      	ldr	r3, [r7, #24]
 802d502:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802d506:	2b00      	cmp	r3, #0
 802d508:	d003      	beq.n	802d512 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 802d50a:	6878      	ldr	r0, [r7, #4]
 802d50c:	f000 f95d 	bl	802d7ca <HAL_CAN_TxMailbox1CompleteCallback>
 802d510:	e016      	b.n	802d540 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 802d512:	69bb      	ldr	r3, [r7, #24]
 802d514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802d518:	2b00      	cmp	r3, #0
 802d51a:	d004      	beq.n	802d526 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 802d51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d51e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 802d522:	627b      	str	r3, [r7, #36]	; 0x24
 802d524:	e00c      	b.n	802d540 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 802d526:	69bb      	ldr	r3, [r7, #24]
 802d528:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802d52c:	2b00      	cmp	r3, #0
 802d52e:	d004      	beq.n	802d53a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 802d530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d532:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802d536:	627b      	str	r3, [r7, #36]	; 0x24
 802d538:	e002      	b.n	802d540 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 802d53a:	6878      	ldr	r0, [r7, #4]
 802d53c:	f000 f963 	bl	802d806 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 802d540:	69bb      	ldr	r3, [r7, #24]
 802d542:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802d546:	2b00      	cmp	r3, #0
 802d548:	d024      	beq.n	802d594 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 802d54a:	687b      	ldr	r3, [r7, #4]
 802d54c:	681b      	ldr	r3, [r3, #0]
 802d54e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 802d552:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 802d554:	69bb      	ldr	r3, [r7, #24]
 802d556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802d55a:	2b00      	cmp	r3, #0
 802d55c:	d003      	beq.n	802d566 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 802d55e:	6878      	ldr	r0, [r7, #4]
 802d560:	f000 f93d 	bl	802d7de <HAL_CAN_TxMailbox2CompleteCallback>
 802d564:	e016      	b.n	802d594 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 802d566:	69bb      	ldr	r3, [r7, #24]
 802d568:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802d56c:	2b00      	cmp	r3, #0
 802d56e:	d004      	beq.n	802d57a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 802d570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d572:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802d576:	627b      	str	r3, [r7, #36]	; 0x24
 802d578:	e00c      	b.n	802d594 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 802d57a:	69bb      	ldr	r3, [r7, #24]
 802d57c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802d580:	2b00      	cmp	r3, #0
 802d582:	d004      	beq.n	802d58e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 802d584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802d58a:	627b      	str	r3, [r7, #36]	; 0x24
 802d58c:	e002      	b.n	802d594 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 802d58e:	6878      	ldr	r0, [r7, #4]
 802d590:	f000 f943 	bl	802d81a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 802d594:	6a3b      	ldr	r3, [r7, #32]
 802d596:	f003 0308 	and.w	r3, r3, #8
 802d59a:	2b00      	cmp	r3, #0
 802d59c:	d00c      	beq.n	802d5b8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 802d59e:	697b      	ldr	r3, [r7, #20]
 802d5a0:	f003 0310 	and.w	r3, r3, #16
 802d5a4:	2b00      	cmp	r3, #0
 802d5a6:	d007      	beq.n	802d5b8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 802d5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d5aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 802d5ae:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 802d5b0:	687b      	ldr	r3, [r7, #4]
 802d5b2:	681b      	ldr	r3, [r3, #0]
 802d5b4:	2210      	movs	r2, #16
 802d5b6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 802d5b8:	6a3b      	ldr	r3, [r7, #32]
 802d5ba:	f003 0304 	and.w	r3, r3, #4
 802d5be:	2b00      	cmp	r3, #0
 802d5c0:	d00b      	beq.n	802d5da <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 802d5c2:	697b      	ldr	r3, [r7, #20]
 802d5c4:	f003 0308 	and.w	r3, r3, #8
 802d5c8:	2b00      	cmp	r3, #0
 802d5ca:	d006      	beq.n	802d5da <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 802d5cc:	687b      	ldr	r3, [r7, #4]
 802d5ce:	681b      	ldr	r3, [r3, #0]
 802d5d0:	2208      	movs	r2, #8
 802d5d2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 802d5d4:	6878      	ldr	r0, [r7, #4]
 802d5d6:	f000 f92a 	bl	802d82e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 802d5da:	6a3b      	ldr	r3, [r7, #32]
 802d5dc:	f003 0302 	and.w	r3, r3, #2
 802d5e0:	2b00      	cmp	r3, #0
 802d5e2:	d009      	beq.n	802d5f8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 802d5e4:	687b      	ldr	r3, [r7, #4]
 802d5e6:	681b      	ldr	r3, [r3, #0]
 802d5e8:	68db      	ldr	r3, [r3, #12]
 802d5ea:	f003 0303 	and.w	r3, r3, #3
 802d5ee:	2b00      	cmp	r3, #0
 802d5f0:	d002      	beq.n	802d5f8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 802d5f2:	6878      	ldr	r0, [r7, #4]
 802d5f4:	f7f6 faa8 	bl	8023b48 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 802d5f8:	6a3b      	ldr	r3, [r7, #32]
 802d5fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802d5fe:	2b00      	cmp	r3, #0
 802d600:	d00c      	beq.n	802d61c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 802d602:	693b      	ldr	r3, [r7, #16]
 802d604:	f003 0310 	and.w	r3, r3, #16
 802d608:	2b00      	cmp	r3, #0
 802d60a:	d007      	beq.n	802d61c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 802d60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d60e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 802d612:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 802d614:	687b      	ldr	r3, [r7, #4]
 802d616:	681b      	ldr	r3, [r3, #0]
 802d618:	2210      	movs	r2, #16
 802d61a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 802d61c:	6a3b      	ldr	r3, [r7, #32]
 802d61e:	f003 0320 	and.w	r3, r3, #32
 802d622:	2b00      	cmp	r3, #0
 802d624:	d00b      	beq.n	802d63e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 802d626:	693b      	ldr	r3, [r7, #16]
 802d628:	f003 0308 	and.w	r3, r3, #8
 802d62c:	2b00      	cmp	r3, #0
 802d62e:	d006      	beq.n	802d63e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 802d630:	687b      	ldr	r3, [r7, #4]
 802d632:	681b      	ldr	r3, [r3, #0]
 802d634:	2208      	movs	r2, #8
 802d636:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 802d638:	6878      	ldr	r0, [r7, #4]
 802d63a:	f000 f90c 	bl	802d856 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 802d63e:	6a3b      	ldr	r3, [r7, #32]
 802d640:	f003 0310 	and.w	r3, r3, #16
 802d644:	2b00      	cmp	r3, #0
 802d646:	d009      	beq.n	802d65c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 802d648:	687b      	ldr	r3, [r7, #4]
 802d64a:	681b      	ldr	r3, [r3, #0]
 802d64c:	691b      	ldr	r3, [r3, #16]
 802d64e:	f003 0303 	and.w	r3, r3, #3
 802d652:	2b00      	cmp	r3, #0
 802d654:	d002      	beq.n	802d65c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 802d656:	6878      	ldr	r0, [r7, #4]
 802d658:	f000 f8f3 	bl	802d842 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 802d65c:	6a3b      	ldr	r3, [r7, #32]
 802d65e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802d662:	2b00      	cmp	r3, #0
 802d664:	d00b      	beq.n	802d67e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 802d666:	69fb      	ldr	r3, [r7, #28]
 802d668:	f003 0310 	and.w	r3, r3, #16
 802d66c:	2b00      	cmp	r3, #0
 802d66e:	d006      	beq.n	802d67e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 802d670:	687b      	ldr	r3, [r7, #4]
 802d672:	681b      	ldr	r3, [r3, #0]
 802d674:	2210      	movs	r2, #16
 802d676:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 802d678:	6878      	ldr	r0, [r7, #4]
 802d67a:	f000 f8f6 	bl	802d86a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 802d67e:	6a3b      	ldr	r3, [r7, #32]
 802d680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802d684:	2b00      	cmp	r3, #0
 802d686:	d00b      	beq.n	802d6a0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 802d688:	69fb      	ldr	r3, [r7, #28]
 802d68a:	f003 0308 	and.w	r3, r3, #8
 802d68e:	2b00      	cmp	r3, #0
 802d690:	d006      	beq.n	802d6a0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 802d692:	687b      	ldr	r3, [r7, #4]
 802d694:	681b      	ldr	r3, [r3, #0]
 802d696:	2208      	movs	r2, #8
 802d698:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 802d69a:	6878      	ldr	r0, [r7, #4]
 802d69c:	f000 f8ef 	bl	802d87e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 802d6a0:	6a3b      	ldr	r3, [r7, #32]
 802d6a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802d6a6:	2b00      	cmp	r3, #0
 802d6a8:	d075      	beq.n	802d796 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 802d6aa:	69fb      	ldr	r3, [r7, #28]
 802d6ac:	f003 0304 	and.w	r3, r3, #4
 802d6b0:	2b00      	cmp	r3, #0
 802d6b2:	d06c      	beq.n	802d78e <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 802d6b4:	6a3b      	ldr	r3, [r7, #32]
 802d6b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802d6ba:	2b00      	cmp	r3, #0
 802d6bc:	d008      	beq.n	802d6d0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 802d6be:	68fb      	ldr	r3, [r7, #12]
 802d6c0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 802d6c4:	2b00      	cmp	r3, #0
 802d6c6:	d003      	beq.n	802d6d0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 802d6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d6ca:	f043 0301 	orr.w	r3, r3, #1
 802d6ce:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 802d6d0:	6a3b      	ldr	r3, [r7, #32]
 802d6d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802d6d6:	2b00      	cmp	r3, #0
 802d6d8:	d008      	beq.n	802d6ec <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 802d6da:	68fb      	ldr	r3, [r7, #12]
 802d6dc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 802d6e0:	2b00      	cmp	r3, #0
 802d6e2:	d003      	beq.n	802d6ec <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 802d6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d6e6:	f043 0302 	orr.w	r3, r3, #2
 802d6ea:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 802d6ec:	6a3b      	ldr	r3, [r7, #32]
 802d6ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802d6f2:	2b00      	cmp	r3, #0
 802d6f4:	d008      	beq.n	802d708 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 802d6f6:	68fb      	ldr	r3, [r7, #12]
 802d6f8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 802d6fc:	2b00      	cmp	r3, #0
 802d6fe:	d003      	beq.n	802d708 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 802d700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d702:	f043 0304 	orr.w	r3, r3, #4
 802d706:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 802d708:	6a3b      	ldr	r3, [r7, #32]
 802d70a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802d70e:	2b00      	cmp	r3, #0
 802d710:	d03d      	beq.n	802d78e <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 802d712:	68fb      	ldr	r3, [r7, #12]
 802d714:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 802d718:	2b00      	cmp	r3, #0
 802d71a:	d038      	beq.n	802d78e <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 802d71c:	68fb      	ldr	r3, [r7, #12]
 802d71e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 802d722:	2b30      	cmp	r3, #48	; 0x30
 802d724:	d017      	beq.n	802d756 <HAL_CAN_IRQHandler+0x302>
 802d726:	2b30      	cmp	r3, #48	; 0x30
 802d728:	d804      	bhi.n	802d734 <HAL_CAN_IRQHandler+0x2e0>
 802d72a:	2b10      	cmp	r3, #16
 802d72c:	d009      	beq.n	802d742 <HAL_CAN_IRQHandler+0x2ee>
 802d72e:	2b20      	cmp	r3, #32
 802d730:	d00c      	beq.n	802d74c <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 802d732:	e024      	b.n	802d77e <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 802d734:	2b50      	cmp	r3, #80	; 0x50
 802d736:	d018      	beq.n	802d76a <HAL_CAN_IRQHandler+0x316>
 802d738:	2b60      	cmp	r3, #96	; 0x60
 802d73a:	d01b      	beq.n	802d774 <HAL_CAN_IRQHandler+0x320>
 802d73c:	2b40      	cmp	r3, #64	; 0x40
 802d73e:	d00f      	beq.n	802d760 <HAL_CAN_IRQHandler+0x30c>
            break;
 802d740:	e01d      	b.n	802d77e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 802d742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d744:	f043 0308 	orr.w	r3, r3, #8
 802d748:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 802d74a:	e018      	b.n	802d77e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 802d74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d74e:	f043 0310 	orr.w	r3, r3, #16
 802d752:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 802d754:	e013      	b.n	802d77e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 802d756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d758:	f043 0320 	orr.w	r3, r3, #32
 802d75c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 802d75e:	e00e      	b.n	802d77e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 802d760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802d766:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 802d768:	e009      	b.n	802d77e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 802d76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d76c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802d770:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 802d772:	e004      	b.n	802d77e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 802d774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802d77a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 802d77c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 802d77e:	687b      	ldr	r3, [r7, #4]
 802d780:	681b      	ldr	r3, [r3, #0]
 802d782:	699a      	ldr	r2, [r3, #24]
 802d784:	687b      	ldr	r3, [r7, #4]
 802d786:	681b      	ldr	r3, [r3, #0]
 802d788:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 802d78c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 802d78e:	687b      	ldr	r3, [r7, #4]
 802d790:	681b      	ldr	r3, [r3, #0]
 802d792:	2204      	movs	r2, #4
 802d794:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 802d796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d798:	2b00      	cmp	r3, #0
 802d79a:	d008      	beq.n	802d7ae <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 802d79c:	687b      	ldr	r3, [r7, #4]
 802d79e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802d7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d7a2:	431a      	orrs	r2, r3
 802d7a4:	687b      	ldr	r3, [r7, #4]
 802d7a6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 802d7a8:	6878      	ldr	r0, [r7, #4]
 802d7aa:	f000 f872 	bl	802d892 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 802d7ae:	bf00      	nop
 802d7b0:	3728      	adds	r7, #40	; 0x28
 802d7b2:	46bd      	mov	sp, r7
 802d7b4:	bd80      	pop	{r7, pc}

0802d7b6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 802d7b6:	b480      	push	{r7}
 802d7b8:	b083      	sub	sp, #12
 802d7ba:	af00      	add	r7, sp, #0
 802d7bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 802d7be:	bf00      	nop
 802d7c0:	370c      	adds	r7, #12
 802d7c2:	46bd      	mov	sp, r7
 802d7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d7c8:	4770      	bx	lr

0802d7ca <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 802d7ca:	b480      	push	{r7}
 802d7cc:	b083      	sub	sp, #12
 802d7ce:	af00      	add	r7, sp, #0
 802d7d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 802d7d2:	bf00      	nop
 802d7d4:	370c      	adds	r7, #12
 802d7d6:	46bd      	mov	sp, r7
 802d7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d7dc:	4770      	bx	lr

0802d7de <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 802d7de:	b480      	push	{r7}
 802d7e0:	b083      	sub	sp, #12
 802d7e2:	af00      	add	r7, sp, #0
 802d7e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 802d7e6:	bf00      	nop
 802d7e8:	370c      	adds	r7, #12
 802d7ea:	46bd      	mov	sp, r7
 802d7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d7f0:	4770      	bx	lr

0802d7f2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 802d7f2:	b480      	push	{r7}
 802d7f4:	b083      	sub	sp, #12
 802d7f6:	af00      	add	r7, sp, #0
 802d7f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 802d7fa:	bf00      	nop
 802d7fc:	370c      	adds	r7, #12
 802d7fe:	46bd      	mov	sp, r7
 802d800:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d804:	4770      	bx	lr

0802d806 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 802d806:	b480      	push	{r7}
 802d808:	b083      	sub	sp, #12
 802d80a:	af00      	add	r7, sp, #0
 802d80c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 802d80e:	bf00      	nop
 802d810:	370c      	adds	r7, #12
 802d812:	46bd      	mov	sp, r7
 802d814:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d818:	4770      	bx	lr

0802d81a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 802d81a:	b480      	push	{r7}
 802d81c:	b083      	sub	sp, #12
 802d81e:	af00      	add	r7, sp, #0
 802d820:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 802d822:	bf00      	nop
 802d824:	370c      	adds	r7, #12
 802d826:	46bd      	mov	sp, r7
 802d828:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d82c:	4770      	bx	lr

0802d82e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 802d82e:	b480      	push	{r7}
 802d830:	b083      	sub	sp, #12
 802d832:	af00      	add	r7, sp, #0
 802d834:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 802d836:	bf00      	nop
 802d838:	370c      	adds	r7, #12
 802d83a:	46bd      	mov	sp, r7
 802d83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d840:	4770      	bx	lr

0802d842 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 802d842:	b480      	push	{r7}
 802d844:	b083      	sub	sp, #12
 802d846:	af00      	add	r7, sp, #0
 802d848:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 802d84a:	bf00      	nop
 802d84c:	370c      	adds	r7, #12
 802d84e:	46bd      	mov	sp, r7
 802d850:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d854:	4770      	bx	lr

0802d856 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 802d856:	b480      	push	{r7}
 802d858:	b083      	sub	sp, #12
 802d85a:	af00      	add	r7, sp, #0
 802d85c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 802d85e:	bf00      	nop
 802d860:	370c      	adds	r7, #12
 802d862:	46bd      	mov	sp, r7
 802d864:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d868:	4770      	bx	lr

0802d86a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 802d86a:	b480      	push	{r7}
 802d86c:	b083      	sub	sp, #12
 802d86e:	af00      	add	r7, sp, #0
 802d870:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 802d872:	bf00      	nop
 802d874:	370c      	adds	r7, #12
 802d876:	46bd      	mov	sp, r7
 802d878:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d87c:	4770      	bx	lr

0802d87e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 802d87e:	b480      	push	{r7}
 802d880:	b083      	sub	sp, #12
 802d882:	af00      	add	r7, sp, #0
 802d884:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 802d886:	bf00      	nop
 802d888:	370c      	adds	r7, #12
 802d88a:	46bd      	mov	sp, r7
 802d88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d890:	4770      	bx	lr

0802d892 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 802d892:	b480      	push	{r7}
 802d894:	b083      	sub	sp, #12
 802d896:	af00      	add	r7, sp, #0
 802d898:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 802d89a:	bf00      	nop
 802d89c:	370c      	adds	r7, #12
 802d89e:	46bd      	mov	sp, r7
 802d8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d8a4:	4770      	bx	lr
	...

0802d8a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802d8a8:	b480      	push	{r7}
 802d8aa:	b085      	sub	sp, #20
 802d8ac:	af00      	add	r7, sp, #0
 802d8ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 802d8b0:	687b      	ldr	r3, [r7, #4]
 802d8b2:	f003 0307 	and.w	r3, r3, #7
 802d8b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 802d8b8:	4b0c      	ldr	r3, [pc, #48]	; (802d8ec <__NVIC_SetPriorityGrouping+0x44>)
 802d8ba:	68db      	ldr	r3, [r3, #12]
 802d8bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 802d8be:	68ba      	ldr	r2, [r7, #8]
 802d8c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 802d8c4:	4013      	ands	r3, r2
 802d8c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 802d8c8:	68fb      	ldr	r3, [r7, #12]
 802d8ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 802d8cc:	68bb      	ldr	r3, [r7, #8]
 802d8ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 802d8d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 802d8d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802d8d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 802d8da:	4a04      	ldr	r2, [pc, #16]	; (802d8ec <__NVIC_SetPriorityGrouping+0x44>)
 802d8dc:	68bb      	ldr	r3, [r7, #8]
 802d8de:	60d3      	str	r3, [r2, #12]
}
 802d8e0:	bf00      	nop
 802d8e2:	3714      	adds	r7, #20
 802d8e4:	46bd      	mov	sp, r7
 802d8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d8ea:	4770      	bx	lr
 802d8ec:	e000ed00 	.word	0xe000ed00

0802d8f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 802d8f0:	b480      	push	{r7}
 802d8f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 802d8f4:	4b04      	ldr	r3, [pc, #16]	; (802d908 <__NVIC_GetPriorityGrouping+0x18>)
 802d8f6:	68db      	ldr	r3, [r3, #12]
 802d8f8:	0a1b      	lsrs	r3, r3, #8
 802d8fa:	f003 0307 	and.w	r3, r3, #7
}
 802d8fe:	4618      	mov	r0, r3
 802d900:	46bd      	mov	sp, r7
 802d902:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d906:	4770      	bx	lr
 802d908:	e000ed00 	.word	0xe000ed00

0802d90c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 802d90c:	b480      	push	{r7}
 802d90e:	b083      	sub	sp, #12
 802d910:	af00      	add	r7, sp, #0
 802d912:	4603      	mov	r3, r0
 802d914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 802d916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802d91a:	2b00      	cmp	r3, #0
 802d91c:	db0b      	blt.n	802d936 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802d91e:	79fb      	ldrb	r3, [r7, #7]
 802d920:	f003 021f 	and.w	r2, r3, #31
 802d924:	4907      	ldr	r1, [pc, #28]	; (802d944 <__NVIC_EnableIRQ+0x38>)
 802d926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802d92a:	095b      	lsrs	r3, r3, #5
 802d92c:	2001      	movs	r0, #1
 802d92e:	fa00 f202 	lsl.w	r2, r0, r2
 802d932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 802d936:	bf00      	nop
 802d938:	370c      	adds	r7, #12
 802d93a:	46bd      	mov	sp, r7
 802d93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d940:	4770      	bx	lr
 802d942:	bf00      	nop
 802d944:	e000e100 	.word	0xe000e100

0802d948 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 802d948:	b480      	push	{r7}
 802d94a:	b083      	sub	sp, #12
 802d94c:	af00      	add	r7, sp, #0
 802d94e:	4603      	mov	r3, r0
 802d950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 802d952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802d956:	2b00      	cmp	r3, #0
 802d958:	db10      	blt.n	802d97c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802d95a:	79fb      	ldrb	r3, [r7, #7]
 802d95c:	f003 021f 	and.w	r2, r3, #31
 802d960:	4909      	ldr	r1, [pc, #36]	; (802d988 <__NVIC_DisableIRQ+0x40>)
 802d962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802d966:	095b      	lsrs	r3, r3, #5
 802d968:	2001      	movs	r0, #1
 802d96a:	fa00 f202 	lsl.w	r2, r0, r2
 802d96e:	3320      	adds	r3, #32
 802d970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 802d974:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 802d978:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 802d97c:	bf00      	nop
 802d97e:	370c      	adds	r7, #12
 802d980:	46bd      	mov	sp, r7
 802d982:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d986:	4770      	bx	lr
 802d988:	e000e100 	.word	0xe000e100

0802d98c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 802d98c:	b480      	push	{r7}
 802d98e:	b083      	sub	sp, #12
 802d990:	af00      	add	r7, sp, #0
 802d992:	4603      	mov	r3, r0
 802d994:	6039      	str	r1, [r7, #0]
 802d996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 802d998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802d99c:	2b00      	cmp	r3, #0
 802d99e:	db0a      	blt.n	802d9b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802d9a0:	683b      	ldr	r3, [r7, #0]
 802d9a2:	b2da      	uxtb	r2, r3
 802d9a4:	490c      	ldr	r1, [pc, #48]	; (802d9d8 <__NVIC_SetPriority+0x4c>)
 802d9a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802d9aa:	0112      	lsls	r2, r2, #4
 802d9ac:	b2d2      	uxtb	r2, r2
 802d9ae:	440b      	add	r3, r1
 802d9b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 802d9b4:	e00a      	b.n	802d9cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802d9b6:	683b      	ldr	r3, [r7, #0]
 802d9b8:	b2da      	uxtb	r2, r3
 802d9ba:	4908      	ldr	r1, [pc, #32]	; (802d9dc <__NVIC_SetPriority+0x50>)
 802d9bc:	79fb      	ldrb	r3, [r7, #7]
 802d9be:	f003 030f 	and.w	r3, r3, #15
 802d9c2:	3b04      	subs	r3, #4
 802d9c4:	0112      	lsls	r2, r2, #4
 802d9c6:	b2d2      	uxtb	r2, r2
 802d9c8:	440b      	add	r3, r1
 802d9ca:	761a      	strb	r2, [r3, #24]
}
 802d9cc:	bf00      	nop
 802d9ce:	370c      	adds	r7, #12
 802d9d0:	46bd      	mov	sp, r7
 802d9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d9d6:	4770      	bx	lr
 802d9d8:	e000e100 	.word	0xe000e100
 802d9dc:	e000ed00 	.word	0xe000ed00

0802d9e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 802d9e0:	b480      	push	{r7}
 802d9e2:	b089      	sub	sp, #36	; 0x24
 802d9e4:	af00      	add	r7, sp, #0
 802d9e6:	60f8      	str	r0, [r7, #12]
 802d9e8:	60b9      	str	r1, [r7, #8]
 802d9ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 802d9ec:	68fb      	ldr	r3, [r7, #12]
 802d9ee:	f003 0307 	and.w	r3, r3, #7
 802d9f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 802d9f4:	69fb      	ldr	r3, [r7, #28]
 802d9f6:	f1c3 0307 	rsb	r3, r3, #7
 802d9fa:	2b04      	cmp	r3, #4
 802d9fc:	bf28      	it	cs
 802d9fe:	2304      	movcs	r3, #4
 802da00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 802da02:	69fb      	ldr	r3, [r7, #28]
 802da04:	3304      	adds	r3, #4
 802da06:	2b06      	cmp	r3, #6
 802da08:	d902      	bls.n	802da10 <NVIC_EncodePriority+0x30>
 802da0a:	69fb      	ldr	r3, [r7, #28]
 802da0c:	3b03      	subs	r3, #3
 802da0e:	e000      	b.n	802da12 <NVIC_EncodePriority+0x32>
 802da10:	2300      	movs	r3, #0
 802da12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802da14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802da18:	69bb      	ldr	r3, [r7, #24]
 802da1a:	fa02 f303 	lsl.w	r3, r2, r3
 802da1e:	43da      	mvns	r2, r3
 802da20:	68bb      	ldr	r3, [r7, #8]
 802da22:	401a      	ands	r2, r3
 802da24:	697b      	ldr	r3, [r7, #20]
 802da26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 802da28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 802da2c:	697b      	ldr	r3, [r7, #20]
 802da2e:	fa01 f303 	lsl.w	r3, r1, r3
 802da32:	43d9      	mvns	r1, r3
 802da34:	687b      	ldr	r3, [r7, #4]
 802da36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802da38:	4313      	orrs	r3, r2
         );
}
 802da3a:	4618      	mov	r0, r3
 802da3c:	3724      	adds	r7, #36	; 0x24
 802da3e:	46bd      	mov	sp, r7
 802da40:	f85d 7b04 	ldr.w	r7, [sp], #4
 802da44:	4770      	bx	lr
	...

0802da48 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 802da48:	b480      	push	{r7}
 802da4a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 802da4c:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 802da50:	4b05      	ldr	r3, [pc, #20]	; (802da68 <__NVIC_SystemReset+0x20>)
 802da52:	68db      	ldr	r3, [r3, #12]
 802da54:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 802da58:	4903      	ldr	r1, [pc, #12]	; (802da68 <__NVIC_SystemReset+0x20>)
 802da5a:	4b04      	ldr	r3, [pc, #16]	; (802da6c <__NVIC_SystemReset+0x24>)
 802da5c:	4313      	orrs	r3, r2
 802da5e:	60cb      	str	r3, [r1, #12]
 802da60:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 802da64:	bf00      	nop
 802da66:	e7fd      	b.n	802da64 <__NVIC_SystemReset+0x1c>
 802da68:	e000ed00 	.word	0xe000ed00
 802da6c:	05fa0004 	.word	0x05fa0004

0802da70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802da70:	b580      	push	{r7, lr}
 802da72:	b082      	sub	sp, #8
 802da74:	af00      	add	r7, sp, #0
 802da76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 802da78:	6878      	ldr	r0, [r7, #4]
 802da7a:	f7ff ff15 	bl	802d8a8 <__NVIC_SetPriorityGrouping>
}
 802da7e:	bf00      	nop
 802da80:	3708      	adds	r7, #8
 802da82:	46bd      	mov	sp, r7
 802da84:	bd80      	pop	{r7, pc}

0802da86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 802da86:	b580      	push	{r7, lr}
 802da88:	b086      	sub	sp, #24
 802da8a:	af00      	add	r7, sp, #0
 802da8c:	4603      	mov	r3, r0
 802da8e:	60b9      	str	r1, [r7, #8]
 802da90:	607a      	str	r2, [r7, #4]
 802da92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 802da94:	2300      	movs	r3, #0
 802da96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 802da98:	f7ff ff2a 	bl	802d8f0 <__NVIC_GetPriorityGrouping>
 802da9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 802da9e:	687a      	ldr	r2, [r7, #4]
 802daa0:	68b9      	ldr	r1, [r7, #8]
 802daa2:	6978      	ldr	r0, [r7, #20]
 802daa4:	f7ff ff9c 	bl	802d9e0 <NVIC_EncodePriority>
 802daa8:	4602      	mov	r2, r0
 802daaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802daae:	4611      	mov	r1, r2
 802dab0:	4618      	mov	r0, r3
 802dab2:	f7ff ff6b 	bl	802d98c <__NVIC_SetPriority>
}
 802dab6:	bf00      	nop
 802dab8:	3718      	adds	r7, #24
 802daba:	46bd      	mov	sp, r7
 802dabc:	bd80      	pop	{r7, pc}

0802dabe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 802dabe:	b580      	push	{r7, lr}
 802dac0:	b082      	sub	sp, #8
 802dac2:	af00      	add	r7, sp, #0
 802dac4:	4603      	mov	r3, r0
 802dac6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 802dac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802dacc:	4618      	mov	r0, r3
 802dace:	f7ff ff1d 	bl	802d90c <__NVIC_EnableIRQ>
}
 802dad2:	bf00      	nop
 802dad4:	3708      	adds	r7, #8
 802dad6:	46bd      	mov	sp, r7
 802dad8:	bd80      	pop	{r7, pc}

0802dada <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 802dada:	b580      	push	{r7, lr}
 802dadc:	b082      	sub	sp, #8
 802dade:	af00      	add	r7, sp, #0
 802dae0:	4603      	mov	r3, r0
 802dae2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 802dae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802dae8:	4618      	mov	r0, r3
 802daea:	f7ff ff2d 	bl	802d948 <__NVIC_DisableIRQ>
}
 802daee:	bf00      	nop
 802daf0:	3708      	adds	r7, #8
 802daf2:	46bd      	mov	sp, r7
 802daf4:	bd80      	pop	{r7, pc}

0802daf6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 802daf6:	b580      	push	{r7, lr}
 802daf8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 802dafa:	f7ff ffa5 	bl	802da48 <__NVIC_SystemReset>

0802dafe <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 802dafe:	b580      	push	{r7, lr}
 802db00:	b082      	sub	sp, #8
 802db02:	af00      	add	r7, sp, #0
 802db04:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 802db06:	687b      	ldr	r3, [r7, #4]
 802db08:	2b00      	cmp	r3, #0
 802db0a:	d101      	bne.n	802db10 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 802db0c:	2301      	movs	r3, #1
 802db0e:	e00e      	b.n	802db2e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 802db10:	687b      	ldr	r3, [r7, #4]
 802db12:	795b      	ldrb	r3, [r3, #5]
 802db14:	b2db      	uxtb	r3, r3
 802db16:	2b00      	cmp	r3, #0
 802db18:	d105      	bne.n	802db26 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 802db1a:	687b      	ldr	r3, [r7, #4]
 802db1c:	2200      	movs	r2, #0
 802db1e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 802db20:	6878      	ldr	r0, [r7, #4]
 802db22:	f7fd fdc1 	bl	802b6a8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 802db26:	687b      	ldr	r3, [r7, #4]
 802db28:	2201      	movs	r2, #1
 802db2a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 802db2c:	2300      	movs	r3, #0
}
 802db2e:	4618      	mov	r0, r3
 802db30:	3708      	adds	r7, #8
 802db32:	46bd      	mov	sp, r7
 802db34:	bd80      	pop	{r7, pc}

0802db36 <HAL_CRYP_Init>:
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Init(CRYP_HandleTypeDef *hcryp)
{
 802db36:	b580      	push	{r7, lr}
 802db38:	b082      	sub	sp, #8
 802db3a:	af00      	add	r7, sp, #0
 802db3c:	6078      	str	r0, [r7, #4]
  /* Check the CRYP handle allocation */
  if (hcryp == NULL)
 802db3e:	687b      	ldr	r3, [r7, #4]
 802db40:	2b00      	cmp	r3, #0
 802db42:	d101      	bne.n	802db48 <HAL_CRYP_Init+0x12>
  {
    return HAL_ERROR;
 802db44:	2301      	movs	r3, #1
 802db46:	e02a      	b.n	802db9e <HAL_CRYP_Init+0x68>

    /* Init the low level hardware */
    hcryp->MspInitCallback(hcryp);
  }
#else
  if (hcryp->State == HAL_CRYP_STATE_RESET)
 802db48:	687b      	ldr	r3, [r7, #4]
 802db4a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 802db4e:	b2db      	uxtb	r3, r3
 802db50:	2b00      	cmp	r3, #0
 802db52:	d106      	bne.n	802db62 <HAL_CRYP_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcryp->Lock = HAL_UNLOCKED;
 802db54:	687b      	ldr	r3, [r7, #4]
 802db56:	2200      	movs	r2, #0
 802db58:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware */
    HAL_CRYP_MspInit(hcryp);
 802db5c:	6878      	ldr	r0, [r7, #4]
 802db5e:	f7fd fd31 	bl	802b5c4 <HAL_CRYP_MspInit>
  MODIFY_REG(hcryp->Instance->CR, CRYP_CR_DATATYPE | CRYP_CR_KEYSIZE | CRYP_CR_ALGOMODE,
             hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm);

#else /*AES*/

  MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD,
 802db62:	687b      	ldr	r3, [r7, #4]
 802db64:	681b      	ldr	r3, [r3, #0]
 802db66:	681b      	ldr	r3, [r3, #0]
 802db68:	f423 23a0 	bic.w	r3, r3, #327680	; 0x50000
 802db6c:	f023 0366 	bic.w	r3, r3, #102	; 0x66
 802db70:	687a      	ldr	r2, [r7, #4]
 802db72:	6851      	ldr	r1, [r2, #4]
 802db74:	687a      	ldr	r2, [r7, #4]
 802db76:	6892      	ldr	r2, [r2, #8]
 802db78:	4311      	orrs	r1, r2
 802db7a:	687a      	ldr	r2, [r7, #4]
 802db7c:	6952      	ldr	r2, [r2, #20]
 802db7e:	4311      	orrs	r1, r2
 802db80:	687a      	ldr	r2, [r7, #4]
 802db82:	6812      	ldr	r2, [r2, #0]
 802db84:	430b      	orrs	r3, r1
 802db86:	6013      	str	r3, [r2, #0]
             hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm);

#endif  /* End AES or CRYP*/

  /* Reset Error Code field */
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 802db88:	687b      	ldr	r3, [r7, #4]
 802db8a:	2200      	movs	r2, #0
 802db8c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 802db8e:	687b      	ldr	r3, [r7, #4]
 802db90:	2201      	movs	r2, #1
 802db92:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Set the default CRYP phase */
  hcryp->Phase = CRYP_PHASE_READY;
 802db96:	687b      	ldr	r3, [r7, #4]
 802db98:	2201      	movs	r2, #1
 802db9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Return function status */
  return HAL_OK;
 802db9c:	2300      	movs	r3, #0
}
 802db9e:	4618      	mov	r0, r3
 802dba0:	3708      	adds	r7, #8
 802dba2:	46bd      	mov	sp, r7
 802dba4:	bd80      	pop	{r7, pc}

0802dba6 <HAL_CRYP_SetConfig>:
  * @param  pConf: pointer to a CRYP_ConfigTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_SetConfig(CRYP_HandleTypeDef *hcryp, CRYP_ConfigTypeDef *pConf)
{
 802dba6:	b480      	push	{r7}
 802dba8:	b083      	sub	sp, #12
 802dbaa:	af00      	add	r7, sp, #0
 802dbac:	6078      	str	r0, [r7, #4]
 802dbae:	6039      	str	r1, [r7, #0]
  /* Check the CRYP handle allocation */
  if ((hcryp == NULL) || (pConf == NULL))
 802dbb0:	687b      	ldr	r3, [r7, #4]
 802dbb2:	2b00      	cmp	r3, #0
 802dbb4:	d002      	beq.n	802dbbc <HAL_CRYP_SetConfig+0x16>
 802dbb6:	683b      	ldr	r3, [r7, #0]
 802dbb8:	2b00      	cmp	r3, #0
 802dbba:	d101      	bne.n	802dbc0 <HAL_CRYP_SetConfig+0x1a>
  {
    return HAL_ERROR;
 802dbbc:	2301      	movs	r3, #1
 802dbbe:	e06e      	b.n	802dc9e <HAL_CRYP_SetConfig+0xf8>
  /* Check parameters */
  assert_param(IS_CRYP_KEYSIZE(pConf->KeySize));
  assert_param(IS_CRYP_DATATYPE(pConf->DataType));
  assert_param(IS_CRYP_ALGORITHM(pConf->Algorithm));

  if (hcryp->State == HAL_CRYP_STATE_READY)
 802dbc0:	687b      	ldr	r3, [r7, #4]
 802dbc2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 802dbc6:	b2db      	uxtb	r3, r3
 802dbc8:	2b01      	cmp	r3, #1
 802dbca:	d15d      	bne.n	802dc88 <HAL_CRYP_SetConfig+0xe2>
  {
    /* Change the CRYP state */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 802dbcc:	687b      	ldr	r3, [r7, #4]
 802dbce:	2202      	movs	r2, #2
 802dbd0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /* Process locked */
    __HAL_LOCK(hcryp);
 802dbd4:	687b      	ldr	r3, [r7, #4]
 802dbd6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 802dbda:	2b01      	cmp	r3, #1
 802dbdc:	d101      	bne.n	802dbe2 <HAL_CRYP_SetConfig+0x3c>
 802dbde:	2302      	movs	r3, #2
 802dbe0:	e05d      	b.n	802dc9e <HAL_CRYP_SetConfig+0xf8>
 802dbe2:	687b      	ldr	r3, [r7, #4]
 802dbe4:	2201      	movs	r2, #1
 802dbe6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Set  CRYP parameters  */
    hcryp->Init.DataType   = pConf->DataType;
 802dbea:	683b      	ldr	r3, [r7, #0]
 802dbec:	681a      	ldr	r2, [r3, #0]
 802dbee:	687b      	ldr	r3, [r7, #4]
 802dbf0:	605a      	str	r2, [r3, #4]
    hcryp->Init.pKey       = pConf->pKey;
 802dbf2:	683b      	ldr	r3, [r7, #0]
 802dbf4:	689a      	ldr	r2, [r3, #8]
 802dbf6:	687b      	ldr	r3, [r7, #4]
 802dbf8:	60da      	str	r2, [r3, #12]
    hcryp->Init.Algorithm  = pConf->Algorithm;
 802dbfa:	683b      	ldr	r3, [r7, #0]
 802dbfc:	691a      	ldr	r2, [r3, #16]
 802dbfe:	687b      	ldr	r3, [r7, #4]
 802dc00:	615a      	str	r2, [r3, #20]
    hcryp->Init.KeySize    = pConf->KeySize;
 802dc02:	683b      	ldr	r3, [r7, #0]
 802dc04:	685a      	ldr	r2, [r3, #4]
 802dc06:	687b      	ldr	r3, [r7, #4]
 802dc08:	609a      	str	r2, [r3, #8]
    hcryp->Init.pInitVect  = pConf->pInitVect;
 802dc0a:	683b      	ldr	r3, [r7, #0]
 802dc0c:	68da      	ldr	r2, [r3, #12]
 802dc0e:	687b      	ldr	r3, [r7, #4]
 802dc10:	611a      	str	r2, [r3, #16]
    hcryp->Init.Header     = pConf->Header;
 802dc12:	683b      	ldr	r3, [r7, #0]
 802dc14:	695a      	ldr	r2, [r3, #20]
 802dc16:	687b      	ldr	r3, [r7, #4]
 802dc18:	619a      	str	r2, [r3, #24]
    hcryp->Init.HeaderSize = pConf->HeaderSize;
 802dc1a:	683b      	ldr	r3, [r7, #0]
 802dc1c:	699a      	ldr	r2, [r3, #24]
 802dc1e:	687b      	ldr	r3, [r7, #4]
 802dc20:	61da      	str	r2, [r3, #28]
    hcryp->Init.B0         = pConf->B0;
 802dc22:	683b      	ldr	r3, [r7, #0]
 802dc24:	69da      	ldr	r2, [r3, #28]
 802dc26:	687b      	ldr	r3, [r7, #4]
 802dc28:	621a      	str	r2, [r3, #32]
    hcryp->Init.DataWidthUnit = pConf->DataWidthUnit;
 802dc2a:	683b      	ldr	r3, [r7, #0]
 802dc2c:	6a1a      	ldr	r2, [r3, #32]
 802dc2e:	687b      	ldr	r3, [r7, #4]
 802dc30:	625a      	str	r2, [r3, #36]	; 0x24

    MODIFY_REG(hcryp->Instance->CR, CRYP_CR_DATATYPE | CRYP_CR_KEYSIZE | CRYP_CR_ALGOMODE,
               hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm);

#else /*AES*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD,
 802dc32:	687b      	ldr	r3, [r7, #4]
 802dc34:	681b      	ldr	r3, [r3, #0]
 802dc36:	681b      	ldr	r3, [r3, #0]
 802dc38:	f423 23a0 	bic.w	r3, r3, #327680	; 0x50000
 802dc3c:	f023 0366 	bic.w	r3, r3, #102	; 0x66
 802dc40:	687a      	ldr	r2, [r7, #4]
 802dc42:	6851      	ldr	r1, [r2, #4]
 802dc44:	687a      	ldr	r2, [r7, #4]
 802dc46:	6892      	ldr	r2, [r2, #8]
 802dc48:	4311      	orrs	r1, r2
 802dc4a:	687a      	ldr	r2, [r7, #4]
 802dc4c:	6952      	ldr	r2, [r2, #20]
 802dc4e:	4311      	orrs	r1, r2
 802dc50:	687a      	ldr	r2, [r7, #4]
 802dc52:	6812      	ldr	r2, [r2, #0]
 802dc54:	430b      	orrs	r3, r1
 802dc56:	6013      	str	r3, [r2, #0]
               hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm);

    /*clear error flags*/
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_ERR_CLEAR);
 802dc58:	687b      	ldr	r3, [r7, #4]
 802dc5a:	681b      	ldr	r3, [r3, #0]
 802dc5c:	681a      	ldr	r2, [r3, #0]
 802dc5e:	687b      	ldr	r3, [r7, #4]
 802dc60:	681b      	ldr	r3, [r3, #0]
 802dc62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802dc66:	601a      	str	r2, [r3, #0]

#endif  /* End AES or CRYP */

    /* Process Unlocked */
    __HAL_UNLOCK(hcryp);
 802dc68:	687b      	ldr	r3, [r7, #4]
 802dc6a:	2200      	movs	r2, #0
 802dc6c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Reset Error Code field */
    hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 802dc70:	687b      	ldr	r3, [r7, #4]
 802dc72:	2200      	movs	r2, #0
 802dc74:	651a      	str	r2, [r3, #80]	; 0x50

    /* Change the CRYP state */
    hcryp->State = HAL_CRYP_STATE_READY;
 802dc76:	687b      	ldr	r3, [r7, #4]
 802dc78:	2201      	movs	r2, #1
 802dc7a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /* Set the default CRYP phase */
    hcryp->Phase = CRYP_PHASE_READY;
 802dc7e:	687b      	ldr	r3, [r7, #4]
 802dc80:	2201      	movs	r2, #1
 802dc82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return function status */
    return HAL_OK;
 802dc84:	2300      	movs	r3, #0
 802dc86:	e00a      	b.n	802dc9e <HAL_CRYP_SetConfig+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hcryp);
 802dc88:	687b      	ldr	r3, [r7, #4]
 802dc8a:	2200      	movs	r2, #0
 802dc8c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 802dc90:	687b      	ldr	r3, [r7, #4]
 802dc92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802dc94:	f043 0208 	orr.w	r2, r3, #8
 802dc98:	687b      	ldr	r3, [r7, #4]
 802dc9a:	651a      	str	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 802dc9c:	2301      	movs	r3, #1
  }
}
 802dc9e:	4618      	mov	r0, r3
 802dca0:	370c      	adds	r7, #12
 802dca2:	46bd      	mov	sp, r7
 802dca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802dca8:	4770      	bx	lr

0802dcaa <HAL_CRYP_GetConfig>:
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_GetConfig(CRYP_HandleTypeDef *hcryp, CRYP_ConfigTypeDef *pConf)
{
 802dcaa:	b480      	push	{r7}
 802dcac:	b083      	sub	sp, #12
 802dcae:	af00      	add	r7, sp, #0
 802dcb0:	6078      	str	r0, [r7, #4]
 802dcb2:	6039      	str	r1, [r7, #0]
  /* Check the CRYP handle allocation */
  if ((hcryp == NULL) || (pConf == NULL))
 802dcb4:	687b      	ldr	r3, [r7, #4]
 802dcb6:	2b00      	cmp	r3, #0
 802dcb8:	d002      	beq.n	802dcc0 <HAL_CRYP_GetConfig+0x16>
 802dcba:	683b      	ldr	r3, [r7, #0]
 802dcbc:	2b00      	cmp	r3, #0
 802dcbe:	d101      	bne.n	802dcc4 <HAL_CRYP_GetConfig+0x1a>
  {
    return HAL_ERROR;
 802dcc0:	2301      	movs	r3, #1
 802dcc2:	e04d      	b.n	802dd60 <HAL_CRYP_GetConfig+0xb6>
  }

  if (hcryp->State == HAL_CRYP_STATE_READY)
 802dcc4:	687b      	ldr	r3, [r7, #4]
 802dcc6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 802dcca:	b2db      	uxtb	r3, r3
 802dccc:	2b01      	cmp	r3, #1
 802dcce:	d13c      	bne.n	802dd4a <HAL_CRYP_GetConfig+0xa0>
  {
    /* Change the CRYP state */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 802dcd0:	687b      	ldr	r3, [r7, #4]
 802dcd2:	2202      	movs	r2, #2
 802dcd4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /* Process locked */
    __HAL_LOCK(hcryp);
 802dcd8:	687b      	ldr	r3, [r7, #4]
 802dcda:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 802dcde:	2b01      	cmp	r3, #1
 802dce0:	d101      	bne.n	802dce6 <HAL_CRYP_GetConfig+0x3c>
 802dce2:	2302      	movs	r3, #2
 802dce4:	e03c      	b.n	802dd60 <HAL_CRYP_GetConfig+0xb6>
 802dce6:	687b      	ldr	r3, [r7, #4]
 802dce8:	2201      	movs	r2, #1
 802dcea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Get  CRYP parameters  */
    pConf->DataType        = hcryp->Init.DataType;
 802dcee:	687b      	ldr	r3, [r7, #4]
 802dcf0:	685a      	ldr	r2, [r3, #4]
 802dcf2:	683b      	ldr	r3, [r7, #0]
 802dcf4:	601a      	str	r2, [r3, #0]
    pConf->pKey            = hcryp->Init.pKey;
 802dcf6:	687b      	ldr	r3, [r7, #4]
 802dcf8:	68da      	ldr	r2, [r3, #12]
 802dcfa:	683b      	ldr	r3, [r7, #0]
 802dcfc:	609a      	str	r2, [r3, #8]
    pConf->Algorithm       = hcryp->Init.Algorithm;
 802dcfe:	687b      	ldr	r3, [r7, #4]
 802dd00:	695a      	ldr	r2, [r3, #20]
 802dd02:	683b      	ldr	r3, [r7, #0]
 802dd04:	611a      	str	r2, [r3, #16]
    pConf->KeySize         = hcryp->Init.KeySize ;
 802dd06:	687b      	ldr	r3, [r7, #4]
 802dd08:	689a      	ldr	r2, [r3, #8]
 802dd0a:	683b      	ldr	r3, [r7, #0]
 802dd0c:	605a      	str	r2, [r3, #4]
    pConf->pInitVect       = hcryp->Init.pInitVect;
 802dd0e:	687b      	ldr	r3, [r7, #4]
 802dd10:	691a      	ldr	r2, [r3, #16]
 802dd12:	683b      	ldr	r3, [r7, #0]
 802dd14:	60da      	str	r2, [r3, #12]
    pConf->Header          = hcryp->Init.Header ;
 802dd16:	687b      	ldr	r3, [r7, #4]
 802dd18:	699a      	ldr	r2, [r3, #24]
 802dd1a:	683b      	ldr	r3, [r7, #0]
 802dd1c:	615a      	str	r2, [r3, #20]
    pConf->HeaderSize      = hcryp->Init.HeaderSize;
 802dd1e:	687b      	ldr	r3, [r7, #4]
 802dd20:	69da      	ldr	r2, [r3, #28]
 802dd22:	683b      	ldr	r3, [r7, #0]
 802dd24:	619a      	str	r2, [r3, #24]
    pConf->B0              = hcryp->Init.B0;
 802dd26:	687b      	ldr	r3, [r7, #4]
 802dd28:	6a1a      	ldr	r2, [r3, #32]
 802dd2a:	683b      	ldr	r3, [r7, #0]
 802dd2c:	61da      	str	r2, [r3, #28]
    pConf->DataWidthUnit    = hcryp->Init.DataWidthUnit;
 802dd2e:	687b      	ldr	r3, [r7, #4]
 802dd30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802dd32:	683b      	ldr	r3, [r7, #0]
 802dd34:	621a      	str	r2, [r3, #32]

    /* Process Unlocked */
    __HAL_UNLOCK(hcryp);
 802dd36:	687b      	ldr	r3, [r7, #4]
 802dd38:	2200      	movs	r2, #0
 802dd3a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Change the CRYP state */
    hcryp->State = HAL_CRYP_STATE_READY;
 802dd3e:	687b      	ldr	r3, [r7, #4]
 802dd40:	2201      	movs	r2, #1
 802dd42:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /* Return function status */
    return HAL_OK;
 802dd46:	2300      	movs	r3, #0
 802dd48:	e00a      	b.n	802dd60 <HAL_CRYP_GetConfig+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hcryp);
 802dd4a:	687b      	ldr	r3, [r7, #4]
 802dd4c:	2200      	movs	r2, #0
 802dd4e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 802dd52:	687b      	ldr	r3, [r7, #4]
 802dd54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802dd56:	f043 0208 	orr.w	r2, r3, #8
 802dd5a:	687b      	ldr	r3, [r7, #4]
 802dd5c:	651a      	str	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 802dd5e:	2301      	movs	r3, #1
  }
}
 802dd60:	4618      	mov	r0, r3
 802dd62:	370c      	adds	r7, #12
 802dd64:	46bd      	mov	sp, r7
 802dd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 802dd6a:	4770      	bx	lr

0802dd6c <HAL_CRYP_Encrypt>:
  * @param  Timeout: Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Encrypt(CRYP_HandleTypeDef *hcryp, uint32_t *Input, uint16_t Size, uint32_t *Output,
                                   uint32_t Timeout)
{
 802dd6c:	b580      	push	{r7, lr}
 802dd6e:	b086      	sub	sp, #24
 802dd70:	af00      	add	r7, sp, #0
 802dd72:	60f8      	str	r0, [r7, #12]
 802dd74:	60b9      	str	r1, [r7, #8]
 802dd76:	603b      	str	r3, [r7, #0]
 802dd78:	4613      	mov	r3, r2
 802dd7a:	80fb      	strh	r3, [r7, #6]
  uint32_t algo;
  HAL_StatusTypeDef status;

  if (hcryp->State == HAL_CRYP_STATE_READY)
 802dd7c:	68fb      	ldr	r3, [r7, #12]
 802dd7e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 802dd82:	b2db      	uxtb	r3, r3
 802dd84:	2b01      	cmp	r3, #1
 802dd86:	d176      	bne.n	802de76 <HAL_CRYP_Encrypt+0x10a>
  {
    /* Change state Busy */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 802dd88:	68fb      	ldr	r3, [r7, #12]
 802dd8a:	2202      	movs	r2, #2
 802dd8c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /* Process locked */
    __HAL_LOCK(hcryp);
 802dd90:	68fb      	ldr	r3, [r7, #12]
 802dd92:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 802dd96:	2b01      	cmp	r3, #1
 802dd98:	d101      	bne.n	802dd9e <HAL_CRYP_Encrypt+0x32>
 802dd9a:	2302      	movs	r3, #2
 802dd9c:	e074      	b.n	802de88 <HAL_CRYP_Encrypt+0x11c>
 802dd9e:	68fb      	ldr	r3, [r7, #12]
 802dda0:	2201      	movs	r2, #1
 802dda2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /*  Reset CrypInCount, CrypOutCount and Initialize pCrypInBuffPtr and pCrypOutBuffPtr parameters*/
    hcryp->CrypInCount = 0U;
 802dda6:	68fb      	ldr	r3, [r7, #12]
 802dda8:	2200      	movs	r2, #0
 802ddaa:	875a      	strh	r2, [r3, #58]	; 0x3a
    hcryp->CrypOutCount = 0U;
 802ddac:	68fb      	ldr	r3, [r7, #12]
 802ddae:	2200      	movs	r2, #0
 802ddb0:	879a      	strh	r2, [r3, #60]	; 0x3c
    hcryp->pCrypInBuffPtr = Input;
 802ddb2:	68fb      	ldr	r3, [r7, #12]
 802ddb4:	68ba      	ldr	r2, [r7, #8]
 802ddb6:	631a      	str	r2, [r3, #48]	; 0x30
    hcryp->pCrypOutBuffPtr = Output;
 802ddb8:	68fb      	ldr	r3, [r7, #12]
 802ddba:	683a      	ldr	r2, [r7, #0]
 802ddbc:	635a      	str	r2, [r3, #52]	; 0x34

    /*  Calculate Size parameter in Byte*/
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 802ddbe:	68fb      	ldr	r3, [r7, #12]
 802ddc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ddc2:	2b00      	cmp	r3, #0
 802ddc4:	d105      	bne.n	802ddd2 <HAL_CRYP_Encrypt+0x66>
    {
      hcryp->Size = Size * 4U;
 802ddc6:	88fb      	ldrh	r3, [r7, #6]
 802ddc8:	009b      	lsls	r3, r3, #2
 802ddca:	b29a      	uxth	r2, r3
 802ddcc:	68fb      	ldr	r3, [r7, #12]
 802ddce:	87da      	strh	r2, [r3, #62]	; 0x3e
 802ddd0:	e002      	b.n	802ddd8 <HAL_CRYP_Encrypt+0x6c>
    }
    else
    {
      hcryp->Size = Size;
 802ddd2:	68fb      	ldr	r3, [r7, #12]
 802ddd4:	88fa      	ldrh	r2, [r7, #6]
 802ddd6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }

#else /*AES*/

    /* Set the operating mode*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_ENCRYPT);
 802ddd8:	68fb      	ldr	r3, [r7, #12]
 802ddda:	681b      	ldr	r3, [r3, #0]
 802dddc:	681a      	ldr	r2, [r3, #0]
 802ddde:	68fb      	ldr	r3, [r7, #12]
 802dde0:	681b      	ldr	r3, [r3, #0]
 802dde2:	f022 0218 	bic.w	r2, r2, #24
 802dde6:	601a      	str	r2, [r3, #0]

    /* algo get algorithm selected */
    algo = hcryp->Instance->CR & AES_CR_CHMOD;
 802dde8:	68fb      	ldr	r3, [r7, #12]
 802ddea:	681b      	ldr	r3, [r3, #0]
 802ddec:	681a      	ldr	r2, [r3, #0]
 802ddee:	4b28      	ldr	r3, [pc, #160]	; (802de90 <HAL_CRYP_Encrypt+0x124>)
 802ddf0:	4013      	ands	r3, r2
 802ddf2:	613b      	str	r3, [r7, #16]

    switch (algo)
 802ddf4:	693b      	ldr	r3, [r7, #16]
 802ddf6:	2b40      	cmp	r3, #64	; 0x40
 802ddf8:	d00c      	beq.n	802de14 <HAL_CRYP_Encrypt+0xa8>
 802ddfa:	2b40      	cmp	r3, #64	; 0x40
 802ddfc:	d804      	bhi.n	802de08 <HAL_CRYP_Encrypt+0x9c>
 802ddfe:	2b00      	cmp	r3, #0
 802de00:	d008      	beq.n	802de14 <HAL_CRYP_Encrypt+0xa8>
 802de02:	2b20      	cmp	r3, #32
 802de04:	d006      	beq.n	802de14 <HAL_CRYP_Encrypt+0xa8>
 802de06:	e01a      	b.n	802de3e <HAL_CRYP_Encrypt+0xd2>
 802de08:	2b60      	cmp	r3, #96	; 0x60
 802de0a:	d00a      	beq.n	802de22 <HAL_CRYP_Encrypt+0xb6>
 802de0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802de10:	d00e      	beq.n	802de30 <HAL_CRYP_Encrypt+0xc4>
 802de12:	e014      	b.n	802de3e <HAL_CRYP_Encrypt+0xd2>
      case CRYP_AES_ECB:
      case CRYP_AES_CBC:
      case CRYP_AES_CTR:

        /* AES encryption */
        status = CRYP_AES_Encrypt(hcryp, Timeout);
 802de14:	6a39      	ldr	r1, [r7, #32]
 802de16:	68f8      	ldr	r0, [r7, #12]
 802de18:	f000 f8dc 	bl	802dfd4 <CRYP_AES_Encrypt>
 802de1c:	4603      	mov	r3, r0
 802de1e:	75fb      	strb	r3, [r7, #23]
        break;
 802de20:	e01d      	b.n	802de5e <HAL_CRYP_Encrypt+0xf2>

      case CRYP_AES_GCM_GMAC:

        /* AES GCM encryption */
        status = CRYP_AESGCM_Process(hcryp, Timeout) ;
 802de22:	6a39      	ldr	r1, [r7, #32]
 802de24:	68f8      	ldr	r0, [r7, #12]
 802de26:	f000 fb2b 	bl	802e480 <CRYP_AESGCM_Process>
 802de2a:	4603      	mov	r3, r0
 802de2c:	75fb      	strb	r3, [r7, #23]
        break;
 802de2e:	e016      	b.n	802de5e <HAL_CRYP_Encrypt+0xf2>

      case CRYP_AES_CCM:

        /* AES CCM encryption */
        status = CRYP_AESCCM_Process(hcryp, Timeout);
 802de30:	6a39      	ldr	r1, [r7, #32]
 802de32:	68f8      	ldr	r0, [r7, #12]
 802de34:	f000 fc28 	bl	802e688 <CRYP_AESCCM_Process>
 802de38:	4603      	mov	r3, r0
 802de3a:	75fb      	strb	r3, [r7, #23]
        break;
 802de3c:	e00f      	b.n	802de5e <HAL_CRYP_Encrypt+0xf2>

      default:
        hcryp->ErrorCode |= HAL_CRYP_ERROR_NOT_SUPPORTED;
 802de3e:	68fb      	ldr	r3, [r7, #12]
 802de40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802de42:	f043 0220 	orr.w	r2, r3, #32
 802de46:	68fb      	ldr	r3, [r7, #12]
 802de48:	651a      	str	r2, [r3, #80]	; 0x50
        /* Change the CRYP peripheral state */
        hcryp->State = HAL_CRYP_STATE_READY;
 802de4a:	68fb      	ldr	r3, [r7, #12]
 802de4c:	2201      	movs	r2, #1
 802de4e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 802de52:	68fb      	ldr	r3, [r7, #12]
 802de54:	2200      	movs	r2, #0
 802de56:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        return HAL_ERROR;
 802de5a:	2301      	movs	r3, #1
 802de5c:	e014      	b.n	802de88 <HAL_CRYP_Encrypt+0x11c>
    }
#endif /*end AES or CRYP */

    if (status == HAL_OK)
 802de5e:	7dfb      	ldrb	r3, [r7, #23]
 802de60:	2b00      	cmp	r3, #0
 802de62:	d110      	bne.n	802de86 <HAL_CRYP_Encrypt+0x11a>
    {
      /* Change the CRYP peripheral state */
      hcryp->State = HAL_CRYP_STATE_READY;
 802de64:	68fb      	ldr	r3, [r7, #12]
 802de66:	2201      	movs	r2, #1
 802de68:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

      /* Process unlocked */
      __HAL_UNLOCK(hcryp);
 802de6c:	68fb      	ldr	r3, [r7, #12]
 802de6e:	2200      	movs	r2, #0
 802de70:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 802de74:	e007      	b.n	802de86 <HAL_CRYP_Encrypt+0x11a>
    }
  }
  else
  {
    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 802de76:	68fb      	ldr	r3, [r7, #12]
 802de78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802de7a:	f043 0208 	orr.w	r2, r3, #8
 802de7e:	68fb      	ldr	r3, [r7, #12]
 802de80:	651a      	str	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 802de82:	2301      	movs	r3, #1
 802de84:	e000      	b.n	802de88 <HAL_CRYP_Encrypt+0x11c>
  }

  /* Return function status */
  return HAL_OK;
 802de86:	2300      	movs	r3, #0
}
 802de88:	4618      	mov	r0, r3
 802de8a:	3718      	adds	r7, #24
 802de8c:	46bd      	mov	sp, r7
 802de8e:	bd80      	pop	{r7, pc}
 802de90:	00010060 	.word	0x00010060

0802de94 <HAL_CRYP_Decrypt>:
  * @param  Timeout: Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Decrypt(CRYP_HandleTypeDef *hcryp, uint32_t *Input, uint16_t Size, uint32_t *Output,
                                   uint32_t Timeout)
{
 802de94:	b580      	push	{r7, lr}
 802de96:	b086      	sub	sp, #24
 802de98:	af00      	add	r7, sp, #0
 802de9a:	60f8      	str	r0, [r7, #12]
 802de9c:	60b9      	str	r1, [r7, #8]
 802de9e:	603b      	str	r3, [r7, #0]
 802dea0:	4613      	mov	r3, r2
 802dea2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint32_t algo;

  if (hcryp->State == HAL_CRYP_STATE_READY)
 802dea4:	68fb      	ldr	r3, [r7, #12]
 802dea6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 802deaa:	b2db      	uxtb	r3, r3
 802deac:	2b01      	cmp	r3, #1
 802deae:	d178      	bne.n	802dfa2 <HAL_CRYP_Decrypt+0x10e>
  {
    /* Change state Busy */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 802deb0:	68fb      	ldr	r3, [r7, #12]
 802deb2:	2202      	movs	r2, #2
 802deb4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /* Process locked */
    __HAL_LOCK(hcryp);
 802deb8:	68fb      	ldr	r3, [r7, #12]
 802deba:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 802debe:	2b01      	cmp	r3, #1
 802dec0:	d101      	bne.n	802dec6 <HAL_CRYP_Decrypt+0x32>
 802dec2:	2302      	movs	r3, #2
 802dec4:	e076      	b.n	802dfb4 <HAL_CRYP_Decrypt+0x120>
 802dec6:	68fb      	ldr	r3, [r7, #12]
 802dec8:	2201      	movs	r2, #1
 802deca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /*  Reset CrypInCount, CrypOutCount and Initialize pCrypInBuffPtr and pCrypOutBuffPtr  parameters*/
    hcryp->CrypInCount = 0U;
 802dece:	68fb      	ldr	r3, [r7, #12]
 802ded0:	2200      	movs	r2, #0
 802ded2:	875a      	strh	r2, [r3, #58]	; 0x3a
    hcryp->CrypOutCount = 0U;
 802ded4:	68fb      	ldr	r3, [r7, #12]
 802ded6:	2200      	movs	r2, #0
 802ded8:	879a      	strh	r2, [r3, #60]	; 0x3c
    hcryp->pCrypInBuffPtr = Input;
 802deda:	68fb      	ldr	r3, [r7, #12]
 802dedc:	68ba      	ldr	r2, [r7, #8]
 802dede:	631a      	str	r2, [r3, #48]	; 0x30
    hcryp->pCrypOutBuffPtr = Output;
 802dee0:	68fb      	ldr	r3, [r7, #12]
 802dee2:	683a      	ldr	r2, [r7, #0]
 802dee4:	635a      	str	r2, [r3, #52]	; 0x34

    /*  Calculate Size parameter in Byte*/
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 802dee6:	68fb      	ldr	r3, [r7, #12]
 802dee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802deea:	2b00      	cmp	r3, #0
 802deec:	d105      	bne.n	802defa <HAL_CRYP_Decrypt+0x66>
    {
      hcryp->Size = Size * 4U;
 802deee:	88fb      	ldrh	r3, [r7, #6]
 802def0:	009b      	lsls	r3, r3, #2
 802def2:	b29a      	uxth	r2, r3
 802def4:	68fb      	ldr	r3, [r7, #12]
 802def6:	87da      	strh	r2, [r3, #62]	; 0x3e
 802def8:	e002      	b.n	802df00 <HAL_CRYP_Decrypt+0x6c>
    }
    else
    {
      hcryp->Size = Size;
 802defa:	68fb      	ldr	r3, [r7, #12]
 802defc:	88fa      	ldrh	r2, [r7, #6]
 802defe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }

#else /*AES*/

    /* Set Decryption operating mode*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 802df00:	68fb      	ldr	r3, [r7, #12]
 802df02:	681b      	ldr	r3, [r3, #0]
 802df04:	681b      	ldr	r3, [r3, #0]
 802df06:	f023 0218 	bic.w	r2, r3, #24
 802df0a:	68fb      	ldr	r3, [r7, #12]
 802df0c:	681b      	ldr	r3, [r3, #0]
 802df0e:	f042 0210 	orr.w	r2, r2, #16
 802df12:	601a      	str	r2, [r3, #0]

    /* algo get algorithm selected */
    algo = hcryp->Instance->CR & AES_CR_CHMOD;
 802df14:	68fb      	ldr	r3, [r7, #12]
 802df16:	681b      	ldr	r3, [r3, #0]
 802df18:	681a      	ldr	r2, [r3, #0]
 802df1a:	4b28      	ldr	r3, [pc, #160]	; (802dfbc <HAL_CRYP_Decrypt+0x128>)
 802df1c:	4013      	ands	r3, r2
 802df1e:	613b      	str	r3, [r7, #16]

    switch (algo)
 802df20:	693b      	ldr	r3, [r7, #16]
 802df22:	2b40      	cmp	r3, #64	; 0x40
 802df24:	d00c      	beq.n	802df40 <HAL_CRYP_Decrypt+0xac>
 802df26:	2b40      	cmp	r3, #64	; 0x40
 802df28:	d804      	bhi.n	802df34 <HAL_CRYP_Decrypt+0xa0>
 802df2a:	2b00      	cmp	r3, #0
 802df2c:	d008      	beq.n	802df40 <HAL_CRYP_Decrypt+0xac>
 802df2e:	2b20      	cmp	r3, #32
 802df30:	d006      	beq.n	802df40 <HAL_CRYP_Decrypt+0xac>
 802df32:	e01a      	b.n	802df6a <HAL_CRYP_Decrypt+0xd6>
 802df34:	2b60      	cmp	r3, #96	; 0x60
 802df36:	d00a      	beq.n	802df4e <HAL_CRYP_Decrypt+0xba>
 802df38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802df3c:	d00e      	beq.n	802df5c <HAL_CRYP_Decrypt+0xc8>
 802df3e:	e014      	b.n	802df6a <HAL_CRYP_Decrypt+0xd6>
      case CRYP_AES_ECB:
      case CRYP_AES_CBC:
      case CRYP_AES_CTR:

        /* AES decryption */
        status = CRYP_AES_Decrypt(hcryp, Timeout);
 802df40:	6a39      	ldr	r1, [r7, #32]
 802df42:	68f8      	ldr	r0, [r7, #12]
 802df44:	f000 f8b7 	bl	802e0b6 <CRYP_AES_Decrypt>
 802df48:	4603      	mov	r3, r0
 802df4a:	75fb      	strb	r3, [r7, #23]
        break;
 802df4c:	e01d      	b.n	802df8a <HAL_CRYP_Decrypt+0xf6>

      case CRYP_AES_GCM_GMAC:

        /* AES GCM decryption */
        status = CRYP_AESGCM_Process(hcryp, Timeout) ;
 802df4e:	6a39      	ldr	r1, [r7, #32]
 802df50:	68f8      	ldr	r0, [r7, #12]
 802df52:	f000 fa95 	bl	802e480 <CRYP_AESGCM_Process>
 802df56:	4603      	mov	r3, r0
 802df58:	75fb      	strb	r3, [r7, #23]
        break;
 802df5a:	e016      	b.n	802df8a <HAL_CRYP_Decrypt+0xf6>

      case CRYP_AES_CCM:

        /* AES CCM decryption */
        status = CRYP_AESCCM_Process(hcryp, Timeout);
 802df5c:	6a39      	ldr	r1, [r7, #32]
 802df5e:	68f8      	ldr	r0, [r7, #12]
 802df60:	f000 fb92 	bl	802e688 <CRYP_AESCCM_Process>
 802df64:	4603      	mov	r3, r0
 802df66:	75fb      	strb	r3, [r7, #23]
        break;
 802df68:	e00f      	b.n	802df8a <HAL_CRYP_Decrypt+0xf6>

      default:
        hcryp->ErrorCode |= HAL_CRYP_ERROR_NOT_SUPPORTED;
 802df6a:	68fb      	ldr	r3, [r7, #12]
 802df6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802df6e:	f043 0220 	orr.w	r2, r3, #32
 802df72:	68fb      	ldr	r3, [r7, #12]
 802df74:	651a      	str	r2, [r3, #80]	; 0x50
        /* Change the CRYP peripheral state */
        hcryp->State = HAL_CRYP_STATE_READY;
 802df76:	68fb      	ldr	r3, [r7, #12]
 802df78:	2201      	movs	r2, #1
 802df7a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 802df7e:	68fb      	ldr	r3, [r7, #12]
 802df80:	2200      	movs	r2, #0
 802df82:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        return HAL_ERROR;
 802df86:	2301      	movs	r3, #1
 802df88:	e014      	b.n	802dfb4 <HAL_CRYP_Decrypt+0x120>
    }
#endif /* End AES or CRYP */

    if (status == HAL_OK)
 802df8a:	7dfb      	ldrb	r3, [r7, #23]
 802df8c:	2b00      	cmp	r3, #0
 802df8e:	d110      	bne.n	802dfb2 <HAL_CRYP_Decrypt+0x11e>
    {
      /* Change the CRYP peripheral state */
      hcryp->State = HAL_CRYP_STATE_READY;
 802df90:	68fb      	ldr	r3, [r7, #12]
 802df92:	2201      	movs	r2, #1
 802df94:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

      /* Process unlocked */
      __HAL_UNLOCK(hcryp);
 802df98:	68fb      	ldr	r3, [r7, #12]
 802df9a:	2200      	movs	r2, #0
 802df9c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 802dfa0:	e007      	b.n	802dfb2 <HAL_CRYP_Decrypt+0x11e>
    }
  }
  else
  {
    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 802dfa2:	68fb      	ldr	r3, [r7, #12]
 802dfa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802dfa6:	f043 0208 	orr.w	r2, r3, #8
 802dfaa:	68fb      	ldr	r3, [r7, #12]
 802dfac:	651a      	str	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 802dfae:	2301      	movs	r3, #1
 802dfb0:	e000      	b.n	802dfb4 <HAL_CRYP_Decrypt+0x120>
  }

  /* Return function status */
  return HAL_OK;
 802dfb2:	2300      	movs	r3, #0
}
 802dfb4:	4618      	mov	r0, r3
 802dfb6:	3718      	adds	r7, #24
 802dfb8:	46bd      	mov	sp, r7
 802dfba:	bd80      	pop	{r7, pc}
 802dfbc:	00010060 	.word	0x00010060

0802dfc0 <HAL_CRYP_ErrorCallback>:
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module.
  * @retval None
  */
__weak void HAL_CRYP_ErrorCallback(CRYP_HandleTypeDef *hcryp)
{
 802dfc0:	b480      	push	{r7}
 802dfc2:	b083      	sub	sp, #12
 802dfc4:	af00      	add	r7, sp, #0
 802dfc6:	6078      	str	r0, [r7, #4]
  UNUSED(hcryp);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CRYP_ErrorCallback could be implemented in the user file
   */
}
 802dfc8:	bf00      	nop
 802dfca:	370c      	adds	r7, #12
 802dfcc:	46bd      	mov	sp, r7
 802dfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 802dfd2:	4770      	bx	lr

0802dfd4 <CRYP_AES_Encrypt>:
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure
  * @param  Timeout: specify Timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AES_Encrypt(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 802dfd4:	b580      	push	{r7, lr}
 802dfd6:	b084      	sub	sp, #16
 802dfd8:	af00      	add	r7, sp, #0
 802dfda:	6078      	str	r0, [r7, #4]
 802dfdc:	6039      	str	r1, [r7, #0]
  uint16_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 802dfde:	2301      	movs	r3, #1
 802dfe0:	60bb      	str	r3, [r7, #8]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 802dfe2:	687b      	ldr	r3, [r7, #4]
 802dfe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802dfe6:	2b01      	cmp	r3, #1
 802dfe8:	d109      	bne.n	802dffe <CRYP_AES_Encrypt+0x2a>
  {
    if (hcryp->KeyIVConfig == 1U)
 802dfea:	687b      	ldr	r3, [r7, #4]
 802dfec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802dfee:	2b01      	cmp	r3, #1
 802dff0:	d102      	bne.n	802dff8 <CRYP_AES_Encrypt+0x24>
    {
      /* If the Key and IV configuration has to be done only once
      and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 802dff2:	2300      	movs	r3, #0
 802dff4:	60bb      	str	r3, [r7, #8]
 802dff6:	e002      	b.n	802dffe <CRYP_AES_Encrypt+0x2a>
    else
    {
      /* If the Key and IV configuration has to be done only once
      and if it has not been done already, do it and set KeyIVConfig
      to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 802dff8:	687b      	ldr	r3, [r7, #4]
 802dffa:	2201      	movs	r2, #1
 802dffc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  if (DoKeyIVConfig == 1U)
 802dffe:	68bb      	ldr	r3, [r7, #8]
 802e000:	2b01      	cmp	r3, #1
 802e002:	d121      	bne.n	802e048 <CRYP_AES_Encrypt+0x74>
  {

    /*  Set the Key*/
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 802e004:	687b      	ldr	r3, [r7, #4]
 802e006:	689b      	ldr	r3, [r3, #8]
 802e008:	4619      	mov	r1, r3
 802e00a:	6878      	ldr	r0, [r7, #4]
 802e00c:	f000 f9dc 	bl	802e3c8 <CRYP_SetKey>

    if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 802e010:	687b      	ldr	r3, [r7, #4]
 802e012:	695b      	ldr	r3, [r3, #20]
 802e014:	2b00      	cmp	r3, #0
 802e016:	d017      	beq.n	802e048 <CRYP_AES_Encrypt+0x74>
    {
      /* Set the Initialization Vector*/
#if defined (AES)
      hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 802e018:	687b      	ldr	r3, [r7, #4]
 802e01a:	691a      	ldr	r2, [r3, #16]
 802e01c:	687b      	ldr	r3, [r7, #4]
 802e01e:	681b      	ldr	r3, [r3, #0]
 802e020:	6812      	ldr	r2, [r2, #0]
 802e022:	62da      	str	r2, [r3, #44]	; 0x2c
      hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1);
 802e024:	687b      	ldr	r3, [r7, #4]
 802e026:	691a      	ldr	r2, [r3, #16]
 802e028:	687b      	ldr	r3, [r7, #4]
 802e02a:	681b      	ldr	r3, [r3, #0]
 802e02c:	6852      	ldr	r2, [r2, #4]
 802e02e:	629a      	str	r2, [r3, #40]	; 0x28
      hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2);
 802e030:	687b      	ldr	r3, [r7, #4]
 802e032:	691a      	ldr	r2, [r3, #16]
 802e034:	687b      	ldr	r3, [r7, #4]
 802e036:	681b      	ldr	r3, [r3, #0]
 802e038:	6892      	ldr	r2, [r2, #8]
 802e03a:	625a      	str	r2, [r3, #36]	; 0x24
      hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3);
 802e03c:	687b      	ldr	r3, [r7, #4]
 802e03e:	691a      	ldr	r2, [r3, #16]
 802e040:	687b      	ldr	r3, [r7, #4]
 802e042:	681b      	ldr	r3, [r3, #0]
 802e044:	68d2      	ldr	r2, [r2, #12]
 802e046:	621a      	str	r2, [r3, #32]
#endif /* End AES or CRYP */
    }
  } /* if (DoKeyIVConfig == 1U) */

  /* Set the phase */
  hcryp->Phase = CRYP_PHASE_PROCESS;
 802e048:	687b      	ldr	r3, [r7, #4]
 802e04a:	2202      	movs	r2, #2
 802e04c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Enable CRYP */
  __HAL_CRYP_ENABLE(hcryp);
 802e04e:	687b      	ldr	r3, [r7, #4]
 802e050:	681b      	ldr	r3, [r3, #0]
 802e052:	681a      	ldr	r2, [r3, #0]
 802e054:	687b      	ldr	r3, [r7, #4]
 802e056:	681b      	ldr	r3, [r3, #0]
 802e058:	f042 0201 	orr.w	r2, r2, #1
 802e05c:	601a      	str	r2, [r3, #0]

  /*Temporary CrypOutCount Value*/
  outcount = hcryp->CrypOutCount;
 802e05e:	687b      	ldr	r3, [r7, #4]
 802e060:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 802e062:	81fb      	strh	r3, [r7, #14]

  while ((hcryp->CrypInCount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 802e064:	e006      	b.n	802e074 <CRYP_AES_Encrypt+0xa0>
  {
    /* Write plain Ddta and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 802e066:	6839      	ldr	r1, [r7, #0]
 802e068:	6878      	ldr	r0, [r7, #4]
 802e06a:	f000 f8f8 	bl	802e25e <CRYP_AES_ProcessData>
    /*Temporary CrypOutCount Value*/
    outcount = hcryp->CrypOutCount;
 802e06e:	687b      	ldr	r3, [r7, #4]
 802e070:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 802e072:	81fb      	strh	r3, [r7, #14]
  while ((hcryp->CrypInCount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 802e074:	687b      	ldr	r3, [r7, #4]
 802e076:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 802e078:	b29a      	uxth	r2, r3
 802e07a:	687b      	ldr	r3, [r7, #4]
 802e07c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802e07e:	089b      	lsrs	r3, r3, #2
 802e080:	b29b      	uxth	r3, r3
 802e082:	429a      	cmp	r2, r3
 802e084:	d206      	bcs.n	802e094 <CRYP_AES_Encrypt+0xc0>
 802e086:	687b      	ldr	r3, [r7, #4]
 802e088:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802e08a:	089b      	lsrs	r3, r3, #2
 802e08c:	b29b      	uxth	r3, r3
 802e08e:	89fa      	ldrh	r2, [r7, #14]
 802e090:	429a      	cmp	r2, r3
 802e092:	d3e8      	bcc.n	802e066 <CRYP_AES_Encrypt+0x92>
  }

  /* Disable CRYP */
  __HAL_CRYP_DISABLE(hcryp);
 802e094:	687b      	ldr	r3, [r7, #4]
 802e096:	681b      	ldr	r3, [r3, #0]
 802e098:	681a      	ldr	r2, [r3, #0]
 802e09a:	687b      	ldr	r3, [r7, #4]
 802e09c:	681b      	ldr	r3, [r3, #0]
 802e09e:	f022 0201 	bic.w	r2, r2, #1
 802e0a2:	601a      	str	r2, [r3, #0]

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 802e0a4:	687b      	ldr	r3, [r7, #4]
 802e0a6:	2201      	movs	r2, #1
 802e0a8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Return function status */
  return HAL_OK;
 802e0ac:	2300      	movs	r3, #0
}
 802e0ae:	4618      	mov	r0, r3
 802e0b0:	3710      	adds	r7, #16
 802e0b2:	46bd      	mov	sp, r7
 802e0b4:	bd80      	pop	{r7, pc}

0802e0b6 <CRYP_AES_Decrypt>:
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure
  * @param  Timeout: Specify Timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AES_Decrypt(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 802e0b6:	b580      	push	{r7, lr}
 802e0b8:	b084      	sub	sp, #16
 802e0ba:	af00      	add	r7, sp, #0
 802e0bc:	6078      	str	r0, [r7, #4]
 802e0be:	6039      	str	r1, [r7, #0]
  uint16_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 802e0c0:	2301      	movs	r3, #1
 802e0c2:	60bb      	str	r3, [r7, #8]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 802e0c4:	687b      	ldr	r3, [r7, #4]
 802e0c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802e0c8:	2b01      	cmp	r3, #1
 802e0ca:	d109      	bne.n	802e0e0 <CRYP_AES_Decrypt+0x2a>
  {
    if (hcryp->KeyIVConfig == 1U)
 802e0cc:	687b      	ldr	r3, [r7, #4]
 802e0ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802e0d0:	2b01      	cmp	r3, #1
 802e0d2:	d102      	bne.n	802e0da <CRYP_AES_Decrypt+0x24>
    {
      /* If the Key and IV configuration has to be done only once
      and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 802e0d4:	2300      	movs	r3, #0
 802e0d6:	60bb      	str	r3, [r7, #8]
 802e0d8:	e002      	b.n	802e0e0 <CRYP_AES_Decrypt+0x2a>
    else
    {
      /* If the Key and IV configuration has to be done only once
      and if it has not been done already, do it and set KeyIVConfig
      to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 802e0da:	687b      	ldr	r3, [r7, #4]
 802e0dc:	2201      	movs	r2, #1
 802e0de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  if (DoKeyIVConfig == 1U)
 802e0e0:	68bb      	ldr	r3, [r7, #8]
 802e0e2:	2b01      	cmp	r3, #1
 802e0e4:	f040 8084 	bne.w	802e1f0 <CRYP_AES_Decrypt+0x13a>
  {
    /*  Key preparation for ECB/CBC */
    if (hcryp->Init.Algorithm != CRYP_AES_CTR)
 802e0e8:	687b      	ldr	r3, [r7, #4]
 802e0ea:	695b      	ldr	r3, [r3, #20]
 802e0ec:	2b40      	cmp	r3, #64	; 0x40
 802e0ee:	d05d      	beq.n	802e1ac <CRYP_AES_Decrypt+0xf6>
    {
#if defined (AES)
      if (hcryp->AutoKeyDerivation == DISABLE)/*Mode 2 Key preparation*/
 802e0f0:	687b      	ldr	r3, [r7, #4]
 802e0f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 802e0f6:	2b00      	cmp	r3, #0
 802e0f8:	d149      	bne.n	802e18e <CRYP_AES_Decrypt+0xd8>
      {
        /* Set key preparation for decryption operating mode*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION);
 802e0fa:	687b      	ldr	r3, [r7, #4]
 802e0fc:	681b      	ldr	r3, [r3, #0]
 802e0fe:	681b      	ldr	r3, [r3, #0]
 802e100:	f023 0218 	bic.w	r2, r3, #24
 802e104:	687b      	ldr	r3, [r7, #4]
 802e106:	681b      	ldr	r3, [r3, #0]
 802e108:	f042 0208 	orr.w	r2, r2, #8
 802e10c:	601a      	str	r2, [r3, #0]

        /*  Set the Key*/
        CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 802e10e:	687b      	ldr	r3, [r7, #4]
 802e110:	689b      	ldr	r3, [r3, #8]
 802e112:	4619      	mov	r1, r3
 802e114:	6878      	ldr	r0, [r7, #4]
 802e116:	f000 f957 	bl	802e3c8 <CRYP_SetKey>

        /* Enable CRYP */
        __HAL_CRYP_ENABLE(hcryp);
 802e11a:	687b      	ldr	r3, [r7, #4]
 802e11c:	681b      	ldr	r3, [r3, #0]
 802e11e:	681a      	ldr	r2, [r3, #0]
 802e120:	687b      	ldr	r3, [r7, #4]
 802e122:	681b      	ldr	r3, [r3, #0]
 802e124:	f042 0201 	orr.w	r2, r2, #1
 802e128:	601a      	str	r2, [r3, #0]

        /* Wait for CCF flag to be raised */
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 802e12a:	6839      	ldr	r1, [r7, #0]
 802e12c:	6878      	ldr	r0, [r7, #4]
 802e12e:	f001 f9af 	bl	802f490 <CRYP_WaitOnCCFlag>
 802e132:	4603      	mov	r3, r0
 802e134:	2b00      	cmp	r3, #0
 802e136:	d017      	beq.n	802e168 <CRYP_AES_Decrypt+0xb2>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 802e138:	687b      	ldr	r3, [r7, #4]
 802e13a:	681b      	ldr	r3, [r3, #0]
 802e13c:	681a      	ldr	r2, [r3, #0]
 802e13e:	687b      	ldr	r3, [r7, #4]
 802e140:	681b      	ldr	r3, [r3, #0]
 802e142:	f022 0201 	bic.w	r2, r2, #1
 802e146:	601a      	str	r2, [r3, #0]

          /* Change state & error code*/
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 802e148:	687b      	ldr	r3, [r7, #4]
 802e14a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802e14c:	f043 0210 	orr.w	r2, r3, #16
 802e150:	687b      	ldr	r3, [r7, #4]
 802e152:	651a      	str	r2, [r3, #80]	; 0x50
          hcryp->State = HAL_CRYP_STATE_READY;
 802e154:	687b      	ldr	r3, [r7, #4]
 802e156:	2201      	movs	r2, #1
 802e158:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 802e15c:	687b      	ldr	r3, [r7, #4]
 802e15e:	2200      	movs	r2, #0
 802e160:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
          return HAL_ERROR;
 802e164:	2301      	movs	r3, #1
 802e166:	e076      	b.n	802e256 <CRYP_AES_Decrypt+0x1a0>
        }
        /* Clear CCF Flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 802e168:	687b      	ldr	r3, [r7, #4]
 802e16a:	681b      	ldr	r3, [r3, #0]
 802e16c:	681a      	ldr	r2, [r3, #0]
 802e16e:	687b      	ldr	r3, [r7, #4]
 802e170:	681b      	ldr	r3, [r3, #0]
 802e172:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802e176:	601a      	str	r2, [r3, #0]

        /* Return to decryption operating mode(Mode 3)*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 802e178:	687b      	ldr	r3, [r7, #4]
 802e17a:	681b      	ldr	r3, [r3, #0]
 802e17c:	681b      	ldr	r3, [r3, #0]
 802e17e:	f023 0218 	bic.w	r2, r3, #24
 802e182:	687b      	ldr	r3, [r7, #4]
 802e184:	681b      	ldr	r3, [r3, #0]
 802e186:	f042 0210 	orr.w	r2, r2, #16
 802e18a:	601a      	str	r2, [r3, #0]
 802e18c:	e014      	b.n	802e1b8 <CRYP_AES_Decrypt+0x102>
      }
      else /*Mode 4 : decryption & Key preparation*/
      {
        /*  Set the Key*/
        CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 802e18e:	687b      	ldr	r3, [r7, #4]
 802e190:	689b      	ldr	r3, [r3, #8]
 802e192:	4619      	mov	r1, r3
 802e194:	6878      	ldr	r0, [r7, #4]
 802e196:	f000 f917 	bl	802e3c8 <CRYP_SetKey>

        /* Set decryption & Key preparation operating mode*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION_DECRYPT);
 802e19a:	687b      	ldr	r3, [r7, #4]
 802e19c:	681b      	ldr	r3, [r3, #0]
 802e19e:	681a      	ldr	r2, [r3, #0]
 802e1a0:	687b      	ldr	r3, [r7, #4]
 802e1a2:	681b      	ldr	r3, [r3, #0]
 802e1a4:	f042 0218 	orr.w	r2, r2, #24
 802e1a8:	601a      	str	r2, [r3, #0]
 802e1aa:	e005      	b.n	802e1b8 <CRYP_AES_Decrypt+0x102>
#endif /* End AES or CRYP  */
    }
    else  /*Algorithm CTR */
    {
      /*  Set the Key*/
      CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 802e1ac:	687b      	ldr	r3, [r7, #4]
 802e1ae:	689b      	ldr	r3, [r3, #8]
 802e1b0:	4619      	mov	r1, r3
 802e1b2:	6878      	ldr	r0, [r7, #4]
 802e1b4:	f000 f908 	bl	802e3c8 <CRYP_SetKey>
    }

    /* Set IV */
    if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 802e1b8:	687b      	ldr	r3, [r7, #4]
 802e1ba:	695b      	ldr	r3, [r3, #20]
 802e1bc:	2b00      	cmp	r3, #0
 802e1be:	d017      	beq.n	802e1f0 <CRYP_AES_Decrypt+0x13a>
    {
      /* Set the Initialization Vector*/
#if defined (AES)
      hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 802e1c0:	687b      	ldr	r3, [r7, #4]
 802e1c2:	691a      	ldr	r2, [r3, #16]
 802e1c4:	687b      	ldr	r3, [r7, #4]
 802e1c6:	681b      	ldr	r3, [r3, #0]
 802e1c8:	6812      	ldr	r2, [r2, #0]
 802e1ca:	62da      	str	r2, [r3, #44]	; 0x2c
      hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1);
 802e1cc:	687b      	ldr	r3, [r7, #4]
 802e1ce:	691a      	ldr	r2, [r3, #16]
 802e1d0:	687b      	ldr	r3, [r7, #4]
 802e1d2:	681b      	ldr	r3, [r3, #0]
 802e1d4:	6852      	ldr	r2, [r2, #4]
 802e1d6:	629a      	str	r2, [r3, #40]	; 0x28
      hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2);
 802e1d8:	687b      	ldr	r3, [r7, #4]
 802e1da:	691a      	ldr	r2, [r3, #16]
 802e1dc:	687b      	ldr	r3, [r7, #4]
 802e1de:	681b      	ldr	r3, [r3, #0]
 802e1e0:	6892      	ldr	r2, [r2, #8]
 802e1e2:	625a      	str	r2, [r3, #36]	; 0x24
      hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3);
 802e1e4:	687b      	ldr	r3, [r7, #4]
 802e1e6:	691a      	ldr	r2, [r3, #16]
 802e1e8:	687b      	ldr	r3, [r7, #4]
 802e1ea:	681b      	ldr	r3, [r3, #0]
 802e1ec:	68d2      	ldr	r2, [r2, #12]
 802e1ee:	621a      	str	r2, [r3, #32]
      hcryp->Instance->IV1RR = *(uint32_t *)(hcryp->Init.pInitVect + 3);
#endif /* End AES or CRYP */
    }
  } /* if (DoKeyIVConfig == 1U) */
  /* Set the phase */
  hcryp->Phase = CRYP_PHASE_PROCESS;
 802e1f0:	687b      	ldr	r3, [r7, #4]
 802e1f2:	2202      	movs	r2, #2
 802e1f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Enable CRYP */
  __HAL_CRYP_ENABLE(hcryp);
 802e1f6:	687b      	ldr	r3, [r7, #4]
 802e1f8:	681b      	ldr	r3, [r3, #0]
 802e1fa:	681a      	ldr	r2, [r3, #0]
 802e1fc:	687b      	ldr	r3, [r7, #4]
 802e1fe:	681b      	ldr	r3, [r3, #0]
 802e200:	f042 0201 	orr.w	r2, r2, #1
 802e204:	601a      	str	r2, [r3, #0]

  /*Temporary CrypOutCount Value*/
  outcount = hcryp->CrypOutCount;
 802e206:	687b      	ldr	r3, [r7, #4]
 802e208:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 802e20a:	81fb      	strh	r3, [r7, #14]

  while ((hcryp->CrypInCount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 802e20c:	e006      	b.n	802e21c <CRYP_AES_Decrypt+0x166>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 802e20e:	6839      	ldr	r1, [r7, #0]
 802e210:	6878      	ldr	r0, [r7, #4]
 802e212:	f000 f824 	bl	802e25e <CRYP_AES_ProcessData>
    /*Temporary CrypOutCount Value*/
    outcount = hcryp->CrypOutCount;
 802e216:	687b      	ldr	r3, [r7, #4]
 802e218:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 802e21a:	81fb      	strh	r3, [r7, #14]
  while ((hcryp->CrypInCount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 802e21c:	687b      	ldr	r3, [r7, #4]
 802e21e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 802e220:	b29a      	uxth	r2, r3
 802e222:	687b      	ldr	r3, [r7, #4]
 802e224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802e226:	089b      	lsrs	r3, r3, #2
 802e228:	b29b      	uxth	r3, r3
 802e22a:	429a      	cmp	r2, r3
 802e22c:	d206      	bcs.n	802e23c <CRYP_AES_Decrypt+0x186>
 802e22e:	687b      	ldr	r3, [r7, #4]
 802e230:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802e232:	089b      	lsrs	r3, r3, #2
 802e234:	b29b      	uxth	r3, r3
 802e236:	89fa      	ldrh	r2, [r7, #14]
 802e238:	429a      	cmp	r2, r3
 802e23a:	d3e8      	bcc.n	802e20e <CRYP_AES_Decrypt+0x158>
  }

  /* Disable CRYP */
  __HAL_CRYP_DISABLE(hcryp);
 802e23c:	687b      	ldr	r3, [r7, #4]
 802e23e:	681b      	ldr	r3, [r3, #0]
 802e240:	681a      	ldr	r2, [r3, #0]
 802e242:	687b      	ldr	r3, [r7, #4]
 802e244:	681b      	ldr	r3, [r3, #0]
 802e246:	f022 0201 	bic.w	r2, r2, #1
 802e24a:	601a      	str	r2, [r3, #0]

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 802e24c:	687b      	ldr	r3, [r7, #4]
 802e24e:	2201      	movs	r2, #1
 802e250:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Return function status */
  return HAL_OK;
 802e254:	2300      	movs	r3, #0
}
 802e256:	4618      	mov	r0, r3
 802e258:	3710      	adds	r7, #16
 802e25a:	46bd      	mov	sp, r7
 802e25c:	bd80      	pop	{r7, pc}

0802e25e <CRYP_AES_ProcessData>:
  *         the configuration information for CRYP module
  * @param  Timeout: Specify Timeout value
  * @retval None
  */
static void CRYP_AES_ProcessData(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 802e25e:	b580      	push	{r7, lr}
 802e260:	b088      	sub	sp, #32
 802e262:	af00      	add	r7, sp, #0
 802e264:	6078      	str	r0, [r7, #4]
 802e266:	6039      	str	r1, [r7, #0]
  }

#else /* AES */

  /* Write the input block in the IN FIFO */
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 802e268:	687b      	ldr	r3, [r7, #4]
 802e26a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802e26c:	687b      	ldr	r3, [r7, #4]
 802e26e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 802e270:	b29b      	uxth	r3, r3
 802e272:	009b      	lsls	r3, r3, #2
 802e274:	441a      	add	r2, r3
 802e276:	687b      	ldr	r3, [r7, #4]
 802e278:	681b      	ldr	r3, [r3, #0]
 802e27a:	6812      	ldr	r2, [r2, #0]
 802e27c:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 802e27e:	687b      	ldr	r3, [r7, #4]
 802e280:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 802e282:	b29b      	uxth	r3, r3
 802e284:	3301      	adds	r3, #1
 802e286:	b29a      	uxth	r2, r3
 802e288:	687b      	ldr	r3, [r7, #4]
 802e28a:	875a      	strh	r2, [r3, #58]	; 0x3a
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 802e28c:	687b      	ldr	r3, [r7, #4]
 802e28e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802e290:	687b      	ldr	r3, [r7, #4]
 802e292:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 802e294:	b29b      	uxth	r3, r3
 802e296:	009b      	lsls	r3, r3, #2
 802e298:	441a      	add	r2, r3
 802e29a:	687b      	ldr	r3, [r7, #4]
 802e29c:	681b      	ldr	r3, [r3, #0]
 802e29e:	6812      	ldr	r2, [r2, #0]
 802e2a0:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 802e2a2:	687b      	ldr	r3, [r7, #4]
 802e2a4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 802e2a6:	b29b      	uxth	r3, r3
 802e2a8:	3301      	adds	r3, #1
 802e2aa:	b29a      	uxth	r2, r3
 802e2ac:	687b      	ldr	r3, [r7, #4]
 802e2ae:	875a      	strh	r2, [r3, #58]	; 0x3a
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 802e2b0:	687b      	ldr	r3, [r7, #4]
 802e2b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802e2b4:	687b      	ldr	r3, [r7, #4]
 802e2b6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 802e2b8:	b29b      	uxth	r3, r3
 802e2ba:	009b      	lsls	r3, r3, #2
 802e2bc:	441a      	add	r2, r3
 802e2be:	687b      	ldr	r3, [r7, #4]
 802e2c0:	681b      	ldr	r3, [r3, #0]
 802e2c2:	6812      	ldr	r2, [r2, #0]
 802e2c4:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 802e2c6:	687b      	ldr	r3, [r7, #4]
 802e2c8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 802e2ca:	b29b      	uxth	r3, r3
 802e2cc:	3301      	adds	r3, #1
 802e2ce:	b29a      	uxth	r2, r3
 802e2d0:	687b      	ldr	r3, [r7, #4]
 802e2d2:	875a      	strh	r2, [r3, #58]	; 0x3a
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 802e2d4:	687b      	ldr	r3, [r7, #4]
 802e2d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802e2d8:	687b      	ldr	r3, [r7, #4]
 802e2da:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 802e2dc:	b29b      	uxth	r3, r3
 802e2de:	009b      	lsls	r3, r3, #2
 802e2e0:	441a      	add	r2, r3
 802e2e2:	687b      	ldr	r3, [r7, #4]
 802e2e4:	681b      	ldr	r3, [r3, #0]
 802e2e6:	6812      	ldr	r2, [r2, #0]
 802e2e8:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 802e2ea:	687b      	ldr	r3, [r7, #4]
 802e2ec:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 802e2ee:	b29b      	uxth	r3, r3
 802e2f0:	3301      	adds	r3, #1
 802e2f2:	b29a      	uxth	r2, r3
 802e2f4:	687b      	ldr	r3, [r7, #4]
 802e2f6:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Wait for CCF flag to be raised */
  if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 802e2f8:	6839      	ldr	r1, [r7, #0]
 802e2fa:	6878      	ldr	r0, [r7, #4]
 802e2fc:	f001 f8c8 	bl	802f490 <CRYP_WaitOnCCFlag>
 802e300:	4603      	mov	r3, r0
 802e302:	2b00      	cmp	r3, #0
 802e304:	d018      	beq.n	802e338 <CRYP_AES_ProcessData+0xda>
  {
    /* Disable the CRYP peripheral clock */
    __HAL_CRYP_DISABLE(hcryp);
 802e306:	687b      	ldr	r3, [r7, #4]
 802e308:	681b      	ldr	r3, [r3, #0]
 802e30a:	681a      	ldr	r2, [r3, #0]
 802e30c:	687b      	ldr	r3, [r7, #4]
 802e30e:	681b      	ldr	r3, [r3, #0]
 802e310:	f022 0201 	bic.w	r2, r2, #1
 802e314:	601a      	str	r2, [r3, #0]

    /* Change state */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 802e316:	687b      	ldr	r3, [r7, #4]
 802e318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802e31a:	f043 0210 	orr.w	r2, r3, #16
 802e31e:	687b      	ldr	r3, [r7, #4]
 802e320:	651a      	str	r2, [r3, #80]	; 0x50
    hcryp->State = HAL_CRYP_STATE_READY;
 802e322:	687b      	ldr	r3, [r7, #4]
 802e324:	2201      	movs	r2, #1
 802e326:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /* Process unlocked */
    __HAL_UNLOCK(hcryp);
 802e32a:	687b      	ldr	r3, [r7, #4]
 802e32c:	2200      	movs	r2, #0
 802e32e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hcryp->ErrorCallback(hcryp);
#else
    /*Call legacy weak error callback*/
    HAL_CRYP_ErrorCallback(hcryp);
 802e332:	6878      	ldr	r0, [r7, #4]
 802e334:	f7ff fe44 	bl	802dfc0 <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
  }

  /* Clear CCF Flag */
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 802e338:	687b      	ldr	r3, [r7, #4]
 802e33a:	681b      	ldr	r3, [r3, #0]
 802e33c:	681a      	ldr	r2, [r3, #0]
 802e33e:	687b      	ldr	r3, [r7, #4]
 802e340:	681b      	ldr	r3, [r3, #0]
 802e342:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802e346:	601a      	str	r2, [r3, #0]

  /* Read the output block from the output FIFO and put them in temporary buffer then get CrypOutBuff from temporary buffer*/
  for (i = 0U; i < 4U; i++)
 802e348:	2300      	movs	r3, #0
 802e34a:	61fb      	str	r3, [r7, #28]
 802e34c:	e00c      	b.n	802e368 <CRYP_AES_ProcessData+0x10a>
  {
    temp[i] = hcryp->Instance->DOUTR;
 802e34e:	687b      	ldr	r3, [r7, #4]
 802e350:	681b      	ldr	r3, [r3, #0]
 802e352:	68da      	ldr	r2, [r3, #12]
 802e354:	69fb      	ldr	r3, [r7, #28]
 802e356:	009b      	lsls	r3, r3, #2
 802e358:	f107 0120 	add.w	r1, r7, #32
 802e35c:	440b      	add	r3, r1
 802e35e:	f843 2c14 	str.w	r2, [r3, #-20]
  for (i = 0U; i < 4U; i++)
 802e362:	69fb      	ldr	r3, [r7, #28]
 802e364:	3301      	adds	r3, #1
 802e366:	61fb      	str	r3, [r7, #28]
 802e368:	69fb      	ldr	r3, [r7, #28]
 802e36a:	2b03      	cmp	r3, #3
 802e36c:	d9ef      	bls.n	802e34e <CRYP_AES_ProcessData+0xf0>
  }
  i = 0U;
 802e36e:	2300      	movs	r3, #0
 802e370:	61fb      	str	r3, [r7, #28]
  while ((hcryp->CrypOutCount < ((hcryp->Size + 3U) / 4U)) && (i < 4U))
 802e372:	e018      	b.n	802e3a6 <CRYP_AES_ProcessData+0x148>
  {
    *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[i];
 802e374:	687b      	ldr	r3, [r7, #4]
 802e376:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802e378:	687b      	ldr	r3, [r7, #4]
 802e37a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 802e37c:	b29b      	uxth	r3, r3
 802e37e:	009b      	lsls	r3, r3, #2
 802e380:	441a      	add	r2, r3
 802e382:	69fb      	ldr	r3, [r7, #28]
 802e384:	009b      	lsls	r3, r3, #2
 802e386:	f107 0120 	add.w	r1, r7, #32
 802e38a:	440b      	add	r3, r1
 802e38c:	f853 3c14 	ldr.w	r3, [r3, #-20]
 802e390:	6013      	str	r3, [r2, #0]
    hcryp->CrypOutCount++;
 802e392:	687b      	ldr	r3, [r7, #4]
 802e394:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 802e396:	b29b      	uxth	r3, r3
 802e398:	3301      	adds	r3, #1
 802e39a:	b29a      	uxth	r2, r3
 802e39c:	687b      	ldr	r3, [r7, #4]
 802e39e:	879a      	strh	r2, [r3, #60]	; 0x3c
    i++;
 802e3a0:	69fb      	ldr	r3, [r7, #28]
 802e3a2:	3301      	adds	r3, #1
 802e3a4:	61fb      	str	r3, [r7, #28]
  while ((hcryp->CrypOutCount < ((hcryp->Size + 3U) / 4U)) && (i < 4U))
 802e3a6:	687b      	ldr	r3, [r7, #4]
 802e3a8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 802e3aa:	b29b      	uxth	r3, r3
 802e3ac:	461a      	mov	r2, r3
 802e3ae:	687b      	ldr	r3, [r7, #4]
 802e3b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802e3b2:	3303      	adds	r3, #3
 802e3b4:	089b      	lsrs	r3, r3, #2
 802e3b6:	429a      	cmp	r2, r3
 802e3b8:	d202      	bcs.n	802e3c0 <CRYP_AES_ProcessData+0x162>
 802e3ba:	69fb      	ldr	r3, [r7, #28]
 802e3bc:	2b03      	cmp	r3, #3
 802e3be:	d9d9      	bls.n	802e374 <CRYP_AES_ProcessData+0x116>
  }
#endif /* End AES or CRYP */
}
 802e3c0:	bf00      	nop
 802e3c2:	3720      	adds	r7, #32
 802e3c4:	46bd      	mov	sp, r7
 802e3c6:	bd80      	pop	{r7, pc}

0802e3c8 <CRYP_SetKey>:
  *         the configuration information for CRYP module
  * @param  KeySize: Size of Key
  * @retval None
  */
static void CRYP_SetKey(CRYP_HandleTypeDef *hcryp, uint32_t KeySize)
{
 802e3c8:	b480      	push	{r7}
 802e3ca:	b083      	sub	sp, #12
 802e3cc:	af00      	add	r7, sp, #0
 802e3ce:	6078      	str	r0, [r7, #4]
 802e3d0:	6039      	str	r1, [r7, #0]
      break;
    default:
      break;
  }
#else /*AES*/
  switch (KeySize)
 802e3d2:	683b      	ldr	r3, [r7, #0]
 802e3d4:	2b00      	cmp	r3, #0
 802e3d6:	d034      	beq.n	802e442 <CRYP_SetKey+0x7a>
 802e3d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 802e3dc:	d000      	beq.n	802e3e0 <CRYP_SetKey+0x18>
      hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 2);
      hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 3);

      break;
    default:
      break;
 802e3de:	e049      	b.n	802e474 <CRYP_SetKey+0xac>
      hcryp->Instance->KEYR7 = *(uint32_t *)(hcryp->Init.pKey);
 802e3e0:	687b      	ldr	r3, [r7, #4]
 802e3e2:	68da      	ldr	r2, [r3, #12]
 802e3e4:	687b      	ldr	r3, [r7, #4]
 802e3e6:	681b      	ldr	r3, [r3, #0]
 802e3e8:	6812      	ldr	r2, [r2, #0]
 802e3ea:	63da      	str	r2, [r3, #60]	; 0x3c
      hcryp->Instance->KEYR6 = *(uint32_t *)(hcryp->Init.pKey + 1);
 802e3ec:	687b      	ldr	r3, [r7, #4]
 802e3ee:	68da      	ldr	r2, [r3, #12]
 802e3f0:	687b      	ldr	r3, [r7, #4]
 802e3f2:	681b      	ldr	r3, [r3, #0]
 802e3f4:	6852      	ldr	r2, [r2, #4]
 802e3f6:	639a      	str	r2, [r3, #56]	; 0x38
      hcryp->Instance->KEYR5 = *(uint32_t *)(hcryp->Init.pKey + 2);
 802e3f8:	687b      	ldr	r3, [r7, #4]
 802e3fa:	68da      	ldr	r2, [r3, #12]
 802e3fc:	687b      	ldr	r3, [r7, #4]
 802e3fe:	681b      	ldr	r3, [r3, #0]
 802e400:	6892      	ldr	r2, [r2, #8]
 802e402:	635a      	str	r2, [r3, #52]	; 0x34
      hcryp->Instance->KEYR4 = *(uint32_t *)(hcryp->Init.pKey + 3);
 802e404:	687b      	ldr	r3, [r7, #4]
 802e406:	68da      	ldr	r2, [r3, #12]
 802e408:	687b      	ldr	r3, [r7, #4]
 802e40a:	681b      	ldr	r3, [r3, #0]
 802e40c:	68d2      	ldr	r2, [r2, #12]
 802e40e:	631a      	str	r2, [r3, #48]	; 0x30
      hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey + 4);
 802e410:	687b      	ldr	r3, [r7, #4]
 802e412:	68da      	ldr	r2, [r3, #12]
 802e414:	687b      	ldr	r3, [r7, #4]
 802e416:	681b      	ldr	r3, [r3, #0]
 802e418:	6912      	ldr	r2, [r2, #16]
 802e41a:	61da      	str	r2, [r3, #28]
      hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 5);
 802e41c:	687b      	ldr	r3, [r7, #4]
 802e41e:	68da      	ldr	r2, [r3, #12]
 802e420:	687b      	ldr	r3, [r7, #4]
 802e422:	681b      	ldr	r3, [r3, #0]
 802e424:	6952      	ldr	r2, [r2, #20]
 802e426:	619a      	str	r2, [r3, #24]
      hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 6);
 802e428:	687b      	ldr	r3, [r7, #4]
 802e42a:	68da      	ldr	r2, [r3, #12]
 802e42c:	687b      	ldr	r3, [r7, #4]
 802e42e:	681b      	ldr	r3, [r3, #0]
 802e430:	6992      	ldr	r2, [r2, #24]
 802e432:	615a      	str	r2, [r3, #20]
      hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 7);
 802e434:	687b      	ldr	r3, [r7, #4]
 802e436:	68da      	ldr	r2, [r3, #12]
 802e438:	687b      	ldr	r3, [r7, #4]
 802e43a:	681b      	ldr	r3, [r3, #0]
 802e43c:	69d2      	ldr	r2, [r2, #28]
 802e43e:	611a      	str	r2, [r3, #16]
      break;
 802e440:	e018      	b.n	802e474 <CRYP_SetKey+0xac>
      hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey);
 802e442:	687b      	ldr	r3, [r7, #4]
 802e444:	68da      	ldr	r2, [r3, #12]
 802e446:	687b      	ldr	r3, [r7, #4]
 802e448:	681b      	ldr	r3, [r3, #0]
 802e44a:	6812      	ldr	r2, [r2, #0]
 802e44c:	61da      	str	r2, [r3, #28]
      hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 1);
 802e44e:	687b      	ldr	r3, [r7, #4]
 802e450:	68da      	ldr	r2, [r3, #12]
 802e452:	687b      	ldr	r3, [r7, #4]
 802e454:	681b      	ldr	r3, [r3, #0]
 802e456:	6852      	ldr	r2, [r2, #4]
 802e458:	619a      	str	r2, [r3, #24]
      hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 2);
 802e45a:	687b      	ldr	r3, [r7, #4]
 802e45c:	68da      	ldr	r2, [r3, #12]
 802e45e:	687b      	ldr	r3, [r7, #4]
 802e460:	681b      	ldr	r3, [r3, #0]
 802e462:	6892      	ldr	r2, [r2, #8]
 802e464:	615a      	str	r2, [r3, #20]
      hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 3);
 802e466:	687b      	ldr	r3, [r7, #4]
 802e468:	68da      	ldr	r2, [r3, #12]
 802e46a:	687b      	ldr	r3, [r7, #4]
 802e46c:	681b      	ldr	r3, [r3, #0]
 802e46e:	68d2      	ldr	r2, [r2, #12]
 802e470:	611a      	str	r2, [r3, #16]
      break;
 802e472:	bf00      	nop
  }
#endif /* End AES or CRYP  */
}
 802e474:	bf00      	nop
 802e476:	370c      	adds	r7, #12
 802e478:	46bd      	mov	sp, r7
 802e47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e47e:	4770      	bx	lr

0802e480 <CRYP_AESGCM_Process>:
  *         the configuration information for CRYP module
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AESGCM_Process(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 802e480:	b580      	push	{r7, lr}
 802e482:	b086      	sub	sp, #24
 802e484:	af00      	add	r7, sp, #0
 802e486:	6078      	str	r0, [r7, #4]
 802e488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t wordsize = (uint32_t)(hcryp->Size) / 4U ;
 802e48a:	687b      	ldr	r3, [r7, #4]
 802e48c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802e48e:	089b      	lsrs	r3, r3, #2
 802e490:	b29b      	uxth	r3, r3
 802e492:	617b      	str	r3, [r7, #20]
  uint16_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 802e494:	2301      	movs	r3, #1
 802e496:	60fb      	str	r3, [r7, #12]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 802e498:	687b      	ldr	r3, [r7, #4]
 802e49a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802e49c:	2b01      	cmp	r3, #1
 802e49e:	d116      	bne.n	802e4ce <CRYP_AESGCM_Process+0x4e>
  {
    if (hcryp->KeyIVConfig == 1U)
 802e4a0:	687b      	ldr	r3, [r7, #4]
 802e4a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802e4a4:	2b01      	cmp	r3, #1
 802e4a6:	d109      	bne.n	802e4bc <CRYP_AESGCM_Process+0x3c>
    {
      /* If the Key and IV configuration has to be done only once
      and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 802e4a8:	2300      	movs	r3, #0
 802e4aa:	60fb      	str	r3, [r7, #12]
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 802e4ac:	687b      	ldr	r3, [r7, #4]
 802e4ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802e4b0:	687a      	ldr	r2, [r7, #4]
 802e4b2:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
 802e4b4:	441a      	add	r2, r3
 802e4b6:	687b      	ldr	r3, [r7, #4]
 802e4b8:	659a      	str	r2, [r3, #88]	; 0x58
 802e4ba:	e00d      	b.n	802e4d8 <CRYP_AESGCM_Process+0x58>
    else
    {
      /* If the Key and IV configuration has to be done only once
      and if it has not been done already, do it and set KeyIVConfig
      to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 802e4bc:	687b      	ldr	r3, [r7, #4]
 802e4be:	2201      	movs	r2, #1
 802e4c0:	655a      	str	r2, [r3, #84]	; 0x54
      hcryp->SizesSum = hcryp->Size; /* Merely store payload length */
 802e4c2:	687b      	ldr	r3, [r7, #4]
 802e4c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802e4c6:	461a      	mov	r2, r3
 802e4c8:	687b      	ldr	r3, [r7, #4]
 802e4ca:	659a      	str	r2, [r3, #88]	; 0x58
 802e4cc:	e004      	b.n	802e4d8 <CRYP_AESGCM_Process+0x58>
    }
  }
  else
  {
    hcryp->SizesSum = hcryp->Size;
 802e4ce:	687b      	ldr	r3, [r7, #4]
 802e4d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802e4d2:	461a      	mov	r2, r3
 802e4d4:	687b      	ldr	r3, [r7, #4]
 802e4d6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  if (DoKeyIVConfig == 1U)
 802e4d8:	68fb      	ldr	r3, [r7, #12]
 802e4da:	2b01      	cmp	r3, #1
 802e4dc:	d179      	bne.n	802e5d2 <CRYP_AESGCM_Process+0x152>
  {
    /*  Reset CrypHeaderCount */
    hcryp->CrypHeaderCount = 0U;
 802e4de:	687b      	ldr	r3, [r7, #4]
 802e4e0:	2200      	movs	r2, #0
 802e4e2:	871a      	strh	r2, [r3, #56]	; 0x38

    /****************************** Init phase **********************************/

    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 802e4e4:	687b      	ldr	r3, [r7, #4]
 802e4e6:	681b      	ldr	r3, [r3, #0]
 802e4e8:	681a      	ldr	r2, [r3, #0]
 802e4ea:	687b      	ldr	r3, [r7, #4]
 802e4ec:	681b      	ldr	r3, [r3, #0]
 802e4ee:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 802e4f2:	601a      	str	r2, [r3, #0]
 802e4f4:	687b      	ldr	r3, [r7, #4]
 802e4f6:	681a      	ldr	r2, [r3, #0]
 802e4f8:	687b      	ldr	r3, [r7, #4]
 802e4fa:	681b      	ldr	r3, [r3, #0]
 802e4fc:	6812      	ldr	r2, [r2, #0]
 802e4fe:	601a      	str	r2, [r3, #0]

    /* Set the key */
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 802e500:	687b      	ldr	r3, [r7, #4]
 802e502:	689b      	ldr	r3, [r3, #8]
 802e504:	4619      	mov	r1, r3
 802e506:	6878      	ldr	r0, [r7, #4]
 802e508:	f7ff ff5e 	bl	802e3c8 <CRYP_SetKey>
#else /* AES */
    /* Workaround 1 : only AES.
    Datatype configuration must be 32 bits during Init phase. Only, after Init, and before re
    enabling the IP, datatype different from 32 bits can be configured.*/
    /* Select DATATYPE 32  */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE, CRYP_DATATYPE_32B);
 802e50c:	687b      	ldr	r3, [r7, #4]
 802e50e:	681b      	ldr	r3, [r3, #0]
 802e510:	681a      	ldr	r2, [r3, #0]
 802e512:	687b      	ldr	r3, [r7, #4]
 802e514:	681b      	ldr	r3, [r3, #0]
 802e516:	f022 0206 	bic.w	r2, r2, #6
 802e51a:	601a      	str	r2, [r3, #0]

    /* Set the initialization vector and the counter : Initial Counter Block (ICB)*/
    hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 802e51c:	687b      	ldr	r3, [r7, #4]
 802e51e:	691a      	ldr	r2, [r3, #16]
 802e520:	687b      	ldr	r3, [r7, #4]
 802e522:	681b      	ldr	r3, [r3, #0]
 802e524:	6812      	ldr	r2, [r2, #0]
 802e526:	62da      	str	r2, [r3, #44]	; 0x2c
    hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1);
 802e528:	687b      	ldr	r3, [r7, #4]
 802e52a:	691a      	ldr	r2, [r3, #16]
 802e52c:	687b      	ldr	r3, [r7, #4]
 802e52e:	681b      	ldr	r3, [r3, #0]
 802e530:	6852      	ldr	r2, [r2, #4]
 802e532:	629a      	str	r2, [r3, #40]	; 0x28
    hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2);
 802e534:	687b      	ldr	r3, [r7, #4]
 802e536:	691a      	ldr	r2, [r3, #16]
 802e538:	687b      	ldr	r3, [r7, #4]
 802e53a:	681b      	ldr	r3, [r3, #0]
 802e53c:	6892      	ldr	r2, [r2, #8]
 802e53e:	625a      	str	r2, [r3, #36]	; 0x24
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3);
 802e540:	687b      	ldr	r3, [r7, #4]
 802e542:	691a      	ldr	r2, [r3, #16]
 802e544:	687b      	ldr	r3, [r7, #4]
 802e546:	681b      	ldr	r3, [r3, #0]
 802e548:	68d2      	ldr	r2, [r2, #12]
 802e54a:	621a      	str	r2, [r3, #32]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 802e54c:	687b      	ldr	r3, [r7, #4]
 802e54e:	681b      	ldr	r3, [r3, #0]
 802e550:	681a      	ldr	r2, [r3, #0]
 802e552:	687b      	ldr	r3, [r7, #4]
 802e554:	681b      	ldr	r3, [r3, #0]
 802e556:	f042 0201 	orr.w	r2, r2, #1
 802e55a:	601a      	str	r2, [r3, #0]

    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 802e55c:	6839      	ldr	r1, [r7, #0]
 802e55e:	6878      	ldr	r0, [r7, #4]
 802e560:	f000 ff96 	bl	802f490 <CRYP_WaitOnCCFlag>
 802e564:	4603      	mov	r3, r0
 802e566:	2b00      	cmp	r3, #0
 802e568:	d00f      	beq.n	802e58a <CRYP_AESGCM_Process+0x10a>
    {
      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 802e56a:	687b      	ldr	r3, [r7, #4]
 802e56c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802e56e:	f043 0210 	orr.w	r2, r3, #16
 802e572:	687b      	ldr	r3, [r7, #4]
 802e574:	651a      	str	r2, [r3, #80]	; 0x50
      hcryp->State = HAL_CRYP_STATE_READY;
 802e576:	687b      	ldr	r3, [r7, #4]
 802e578:	2201      	movs	r2, #1
 802e57a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

      /* Process unlocked & return error */
      __HAL_UNLOCK(hcryp);
 802e57e:	687b      	ldr	r3, [r7, #4]
 802e580:	2200      	movs	r2, #0
 802e582:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      return HAL_ERROR;
 802e586:	2301      	movs	r3, #1
 802e588:	e07a      	b.n	802e680 <CRYP_AESGCM_Process+0x200>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 802e58a:	687b      	ldr	r3, [r7, #4]
 802e58c:	681b      	ldr	r3, [r3, #0]
 802e58e:	681a      	ldr	r2, [r3, #0]
 802e590:	687b      	ldr	r3, [r7, #4]
 802e592:	681b      	ldr	r3, [r3, #0]
 802e594:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802e598:	601a      	str	r2, [r3, #0]

#endif /* End AES or CRYP  */

    /************************ Header phase *************************************/

    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 802e59a:	6839      	ldr	r1, [r7, #0]
 802e59c:	6878      	ldr	r0, [r7, #4]
 802e59e:	f000 fb2e 	bl	802ebfe <CRYP_GCMCCM_SetHeaderPhase>
 802e5a2:	4603      	mov	r3, r0
 802e5a4:	2b00      	cmp	r3, #0
 802e5a6:	d001      	beq.n	802e5ac <CRYP_AESGCM_Process+0x12c>
    {
      return HAL_ERROR;
 802e5a8:	2301      	movs	r3, #1
 802e5aa:	e069      	b.n	802e680 <CRYP_AESGCM_Process+0x200>
    }

    /*************************Payload phase ************************************/

    /* Set the phase */
    hcryp->Phase = CRYP_PHASE_PROCESS;
 802e5ac:	687b      	ldr	r3, [r7, #4]
 802e5ae:	2202      	movs	r2, #2
 802e5b0:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_CRYP_ENABLE(hcryp);

#else /* AES */

    /* Select payload phase once the header phase is performed */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_PAYLOAD);
 802e5b2:	687b      	ldr	r3, [r7, #4]
 802e5b4:	681b      	ldr	r3, [r3, #0]
 802e5b6:	681a      	ldr	r2, [r3, #0]
 802e5b8:	687b      	ldr	r3, [r7, #4]
 802e5ba:	681b      	ldr	r3, [r3, #0]
 802e5bc:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 802e5c0:	601a      	str	r2, [r3, #0]
 802e5c2:	687b      	ldr	r3, [r7, #4]
 802e5c4:	681b      	ldr	r3, [r3, #0]
 802e5c6:	681a      	ldr	r2, [r3, #0]
 802e5c8:	687b      	ldr	r3, [r7, #4]
 802e5ca:	681b      	ldr	r3, [r3, #0]
 802e5cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 802e5d0:	601a      	str	r2, [r3, #0]

#endif /* End AES or CRYP  */
  } /* if (DoKeyIVConfig == 1U) */

  if ((hcryp->Size % 16U) != 0U)
 802e5d2:	687b      	ldr	r3, [r7, #4]
 802e5d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802e5d6:	f003 030f 	and.w	r3, r3, #15
 802e5da:	b29b      	uxth	r3, r3
 802e5dc:	2b00      	cmp	r3, #0
 802e5de:	d003      	beq.n	802e5e8 <CRYP_AESGCM_Process+0x168>
  {
    /* recalculate  wordsize */
    wordsize = ((wordsize / 4U) * 4U) ;
 802e5e0:	697b      	ldr	r3, [r7, #20]
 802e5e2:	f023 0303 	bic.w	r3, r3, #3
 802e5e6:	617b      	str	r3, [r7, #20]
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 802e5e8:	f7fd fec0 	bl	802c36c <HAL_GetTick>
 802e5ec:	60b8      	str	r0, [r7, #8]
  /*Temporary CrypOutCount Value*/
  outcount = hcryp->CrypOutCount;
 802e5ee:	687b      	ldr	r3, [r7, #4]
 802e5f0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 802e5f2:	827b      	strh	r3, [r7, #18]

  /* Write input data and get output Data */
  while ((hcryp->CrypInCount < wordsize) && (outcount < wordsize))
 802e5f4:	e02d      	b.n	802e652 <CRYP_AESGCM_Process+0x1d2>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 802e5f6:	6839      	ldr	r1, [r7, #0]
 802e5f8:	6878      	ldr	r0, [r7, #4]
 802e5fa:	f7ff fe30 	bl	802e25e <CRYP_AES_ProcessData>

    /*Temporary CrypOutCount Value*/
    outcount = hcryp->CrypOutCount;
 802e5fe:	687b      	ldr	r3, [r7, #4]
 802e600:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 802e602:	827b      	strh	r3, [r7, #18]

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802e604:	683b      	ldr	r3, [r7, #0]
 802e606:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 802e60a:	d022      	beq.n	802e652 <CRYP_AESGCM_Process+0x1d2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 802e60c:	f7fd feae 	bl	802c36c <HAL_GetTick>
 802e610:	4602      	mov	r2, r0
 802e612:	68bb      	ldr	r3, [r7, #8]
 802e614:	1ad3      	subs	r3, r2, r3
 802e616:	683a      	ldr	r2, [r7, #0]
 802e618:	429a      	cmp	r2, r3
 802e61a:	d302      	bcc.n	802e622 <CRYP_AESGCM_Process+0x1a2>
 802e61c:	683b      	ldr	r3, [r7, #0]
 802e61e:	2b00      	cmp	r3, #0
 802e620:	d117      	bne.n	802e652 <CRYP_AESGCM_Process+0x1d2>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 802e622:	687b      	ldr	r3, [r7, #4]
 802e624:	681b      	ldr	r3, [r3, #0]
 802e626:	681a      	ldr	r2, [r3, #0]
 802e628:	687b      	ldr	r3, [r7, #4]
 802e62a:	681b      	ldr	r3, [r3, #0]
 802e62c:	f022 0201 	bic.w	r2, r2, #1
 802e630:	601a      	str	r2, [r3, #0]

        /* Change state & error code */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 802e632:	687b      	ldr	r3, [r7, #4]
 802e634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802e636:	f043 0210 	orr.w	r2, r3, #16
 802e63a:	687b      	ldr	r3, [r7, #4]
 802e63c:	651a      	str	r2, [r3, #80]	; 0x50
        hcryp->State = HAL_CRYP_STATE_READY;
 802e63e:	687b      	ldr	r3, [r7, #4]
 802e640:	2201      	movs	r2, #1
 802e642:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 802e646:	687b      	ldr	r3, [r7, #4]
 802e648:	2200      	movs	r2, #0
 802e64a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        return HAL_ERROR;
 802e64e:	2301      	movs	r3, #1
 802e650:	e016      	b.n	802e680 <CRYP_AESGCM_Process+0x200>
  while ((hcryp->CrypInCount < wordsize) && (outcount < wordsize))
 802e652:	687b      	ldr	r3, [r7, #4]
 802e654:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 802e656:	b29b      	uxth	r3, r3
 802e658:	461a      	mov	r2, r3
 802e65a:	697b      	ldr	r3, [r7, #20]
 802e65c:	4293      	cmp	r3, r2
 802e65e:	d903      	bls.n	802e668 <CRYP_AESGCM_Process+0x1e8>
 802e660:	8a7b      	ldrh	r3, [r7, #18]
 802e662:	697a      	ldr	r2, [r7, #20]
 802e664:	429a      	cmp	r2, r3
 802e666:	d8c6      	bhi.n	802e5f6 <CRYP_AESGCM_Process+0x176>
      }
    }
  }

  if ((hcryp->Size % 16U) != 0U)
 802e668:	687b      	ldr	r3, [r7, #4]
 802e66a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802e66c:	f003 030f 	and.w	r3, r3, #15
 802e670:	b29b      	uxth	r3, r3
 802e672:	2b00      	cmp	r3, #0
 802e674:	d003      	beq.n	802e67e <CRYP_AESGCM_Process+0x1fe>
  {
    /*  Workaround 2 :  CRYP1 & AES generates correct TAG for GCM mode only when input block size is multiple of
    128 bits. If lthe size of the last block of payload is inferior to 128 bits, when GCM encryption
    is selected, then the TAG message will be wrong.*/
    CRYP_Workaround(hcryp, Timeout);
 802e676:	6839      	ldr	r1, [r7, #0]
 802e678:	6878      	ldr	r0, [r7, #4]
 802e67a:	f000 fc6d 	bl	802ef58 <CRYP_Workaround>
  }

  /* Return function status */
  return HAL_OK;
 802e67e:	2300      	movs	r3, #0
}
 802e680:	4618      	mov	r0, r3
 802e682:	3718      	adds	r7, #24
 802e684:	46bd      	mov	sp, r7
 802e686:	bd80      	pop	{r7, pc}

0802e688 <CRYP_AESCCM_Process>:
  *         the configuration information for CRYP module
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AESCCM_Process(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 802e688:	b580      	push	{r7, lr}
 802e68a:	b08a      	sub	sp, #40	; 0x28
 802e68c:	af00      	add	r7, sp, #0
 802e68e:	6078      	str	r0, [r7, #4]
 802e690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t wordsize = (uint32_t)(hcryp->Size) / 4U;
 802e692:	687b      	ldr	r3, [r7, #4]
 802e694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802e696:	089b      	lsrs	r3, r3, #2
 802e698:	b29b      	uxth	r3, r3
 802e69a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 802e69c:	2301      	movs	r3, #1
 802e69e:	61fb      	str	r3, [r7, #28]
  uint32_t loopcounter;
  uint32_t npblb;
  uint32_t lastwordsize;
#endif /* AES */

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 802e6a0:	687b      	ldr	r3, [r7, #4]
 802e6a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802e6a4:	2b01      	cmp	r3, #1
 802e6a6:	d116      	bne.n	802e6d6 <CRYP_AESCCM_Process+0x4e>
  {
    if (hcryp->KeyIVConfig == 1U)
 802e6a8:	687b      	ldr	r3, [r7, #4]
 802e6aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802e6ac:	2b01      	cmp	r3, #1
 802e6ae:	d109      	bne.n	802e6c4 <CRYP_AESCCM_Process+0x3c>
    {
      /* If the Key and IV configuration has to be done only once
      and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 802e6b0:	2300      	movs	r3, #0
 802e6b2:	61fb      	str	r3, [r7, #28]
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 802e6b4:	687b      	ldr	r3, [r7, #4]
 802e6b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802e6b8:	687a      	ldr	r2, [r7, #4]
 802e6ba:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
 802e6bc:	441a      	add	r2, r3
 802e6be:	687b      	ldr	r3, [r7, #4]
 802e6c0:	659a      	str	r2, [r3, #88]	; 0x58
 802e6c2:	e00d      	b.n	802e6e0 <CRYP_AESCCM_Process+0x58>
    else
    {
      /* If the Key and IV configuration has to be done only once
      and if it has not been done already, do it and set KeyIVConfig
      to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 802e6c4:	687b      	ldr	r3, [r7, #4]
 802e6c6:	2201      	movs	r2, #1
 802e6c8:	655a      	str	r2, [r3, #84]	; 0x54
      hcryp->SizesSum = hcryp->Size; /* Merely store payload length */
 802e6ca:	687b      	ldr	r3, [r7, #4]
 802e6cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802e6ce:	461a      	mov	r2, r3
 802e6d0:	687b      	ldr	r3, [r7, #4]
 802e6d2:	659a      	str	r2, [r3, #88]	; 0x58
 802e6d4:	e004      	b.n	802e6e0 <CRYP_AESCCM_Process+0x58>
    }
  }
  else
  {
    hcryp->SizesSum = hcryp->Size;
 802e6d6:	687b      	ldr	r3, [r7, #4]
 802e6d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802e6da:	461a      	mov	r2, r3
 802e6dc:	687b      	ldr	r3, [r7, #4]
 802e6de:	659a      	str	r2, [r3, #88]	; 0x58
  }

  if (DoKeyIVConfig == 1U)
 802e6e0:	69fb      	ldr	r3, [r7, #28]
 802e6e2:	2b01      	cmp	r3, #1
 802e6e4:	f040 81c6 	bne.w	802ea74 <CRYP_AESCCM_Process+0x3ec>
  {

    /*  Reset CrypHeaderCount */
    hcryp->CrypHeaderCount = 0U;
 802e6e8:	687b      	ldr	r3, [r7, #4]
 802e6ea:	2200      	movs	r2, #0
 802e6ec:	871a      	strh	r2, [r3, #56]	; 0x38
      }
    }
#else /* AES */
    /*AES2v1.1.1 : CCM authentication : no init phase, only header and final phase */
    /* Select header phase */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 802e6ee:	687b      	ldr	r3, [r7, #4]
 802e6f0:	681b      	ldr	r3, [r3, #0]
 802e6f2:	681a      	ldr	r2, [r3, #0]
 802e6f4:	687b      	ldr	r3, [r7, #4]
 802e6f6:	681b      	ldr	r3, [r3, #0]
 802e6f8:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 802e6fc:	601a      	str	r2, [r3, #0]
 802e6fe:	687b      	ldr	r3, [r7, #4]
 802e700:	681b      	ldr	r3, [r3, #0]
 802e702:	681a      	ldr	r2, [r3, #0]
 802e704:	687b      	ldr	r3, [r7, #4]
 802e706:	681b      	ldr	r3, [r3, #0]
 802e708:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 802e70c:	601a      	str	r2, [r3, #0]

    /* configured encryption mode */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_ENCRYPT);
 802e70e:	687b      	ldr	r3, [r7, #4]
 802e710:	681b      	ldr	r3, [r3, #0]
 802e712:	681a      	ldr	r2, [r3, #0]
 802e714:	687b      	ldr	r3, [r7, #4]
 802e716:	681b      	ldr	r3, [r3, #0]
 802e718:	f022 0218 	bic.w	r2, r2, #24
 802e71c:	601a      	str	r2, [r3, #0]

    /* Set the key */
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 802e71e:	687b      	ldr	r3, [r7, #4]
 802e720:	689b      	ldr	r3, [r3, #8]
 802e722:	4619      	mov	r1, r3
 802e724:	6878      	ldr	r0, [r7, #4]
 802e726:	f7ff fe4f 	bl	802e3c8 <CRYP_SetKey>

    /* Set the initialization vector with zero values*/
    hcryp->Instance->IVR3 = 0U;
 802e72a:	687b      	ldr	r3, [r7, #4]
 802e72c:	681b      	ldr	r3, [r3, #0]
 802e72e:	2200      	movs	r2, #0
 802e730:	62da      	str	r2, [r3, #44]	; 0x2c
    hcryp->Instance->IVR2 = 0U;
 802e732:	687b      	ldr	r3, [r7, #4]
 802e734:	681b      	ldr	r3, [r3, #0]
 802e736:	2200      	movs	r2, #0
 802e738:	629a      	str	r2, [r3, #40]	; 0x28
    hcryp->Instance->IVR1 = 0U;
 802e73a:	687b      	ldr	r3, [r7, #4]
 802e73c:	681b      	ldr	r3, [r3, #0]
 802e73e:	2200      	movs	r2, #0
 802e740:	625a      	str	r2, [r3, #36]	; 0x24
    hcryp->Instance->IVR0 = 0U;
 802e742:	687b      	ldr	r3, [r7, #4]
 802e744:	681b      	ldr	r3, [r3, #0]
 802e746:	2200      	movs	r2, #0
 802e748:	621a      	str	r2, [r3, #32]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 802e74a:	687b      	ldr	r3, [r7, #4]
 802e74c:	681b      	ldr	r3, [r3, #0]
 802e74e:	681a      	ldr	r2, [r3, #0]
 802e750:	687b      	ldr	r3, [r7, #4]
 802e752:	681b      	ldr	r3, [r3, #0]
 802e754:	f042 0201 	orr.w	r2, r2, #1
 802e758:	601a      	str	r2, [r3, #0]

    /*Write the B0 packet into CRYP_DIN*/
    hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.B0);
 802e75a:	687b      	ldr	r3, [r7, #4]
 802e75c:	6a1a      	ldr	r2, [r3, #32]
 802e75e:	687b      	ldr	r3, [r7, #4]
 802e760:	681b      	ldr	r3, [r3, #0]
 802e762:	6812      	ldr	r2, [r2, #0]
 802e764:	609a      	str	r2, [r3, #8]
    hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.B0 + 1);
 802e766:	687b      	ldr	r3, [r7, #4]
 802e768:	6a1a      	ldr	r2, [r3, #32]
 802e76a:	687b      	ldr	r3, [r7, #4]
 802e76c:	681b      	ldr	r3, [r3, #0]
 802e76e:	6852      	ldr	r2, [r2, #4]
 802e770:	609a      	str	r2, [r3, #8]
    hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.B0 + 2);
 802e772:	687b      	ldr	r3, [r7, #4]
 802e774:	6a1a      	ldr	r2, [r3, #32]
 802e776:	687b      	ldr	r3, [r7, #4]
 802e778:	681b      	ldr	r3, [r3, #0]
 802e77a:	6892      	ldr	r2, [r2, #8]
 802e77c:	609a      	str	r2, [r3, #8]
    hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.B0 + 3);
 802e77e:	687b      	ldr	r3, [r7, #4]
 802e780:	6a1a      	ldr	r2, [r3, #32]
 802e782:	687b      	ldr	r3, [r7, #4]
 802e784:	681b      	ldr	r3, [r3, #0]
 802e786:	68d2      	ldr	r2, [r2, #12]
 802e788:	609a      	str	r2, [r3, #8]

    /*  wait until the end of computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 802e78a:	6839      	ldr	r1, [r7, #0]
 802e78c:	6878      	ldr	r0, [r7, #4]
 802e78e:	f000 fe7f 	bl	802f490 <CRYP_WaitOnCCFlag>
 802e792:	4603      	mov	r3, r0
 802e794:	2b00      	cmp	r3, #0
 802e796:	d00f      	beq.n	802e7b8 <CRYP_AESCCM_Process+0x130>
    {
      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 802e798:	687b      	ldr	r3, [r7, #4]
 802e79a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802e79c:	f043 0210 	orr.w	r2, r3, #16
 802e7a0:	687b      	ldr	r3, [r7, #4]
 802e7a2:	651a      	str	r2, [r3, #80]	; 0x50
      hcryp->State = HAL_CRYP_STATE_READY;
 802e7a4:	687b      	ldr	r3, [r7, #4]
 802e7a6:	2201      	movs	r2, #1
 802e7a8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

      /* Process unlocked & return error */
      __HAL_UNLOCK(hcryp);
 802e7ac:	687b      	ldr	r3, [r7, #4]
 802e7ae:	2200      	movs	r2, #0
 802e7b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      return HAL_ERROR;
 802e7b4:	2301      	movs	r3, #1
 802e7b6:	e21e      	b.n	802ebf6 <CRYP_AESCCM_Process+0x56e>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 802e7b8:	687b      	ldr	r3, [r7, #4]
 802e7ba:	681b      	ldr	r3, [r3, #0]
 802e7bc:	681a      	ldr	r2, [r3, #0]
 802e7be:	687b      	ldr	r3, [r7, #4]
 802e7c0:	681b      	ldr	r3, [r3, #0]
 802e7c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802e7c6:	601a      	str	r2, [r3, #0]

    /* Set the phase */
    hcryp->Phase = CRYP_PHASE_PROCESS;
 802e7c8:	687b      	ldr	r3, [r7, #4]
 802e7ca:	2202      	movs	r2, #2
 802e7cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* From that point the whole message must be processed, first the Header then the payload.
    First the  Header block(B1) : associated data length expressed in bytes concatenated with Associated Data (A)*/

    if (hcryp->Init.HeaderSize != 0U)
 802e7ce:	687b      	ldr	r3, [r7, #4]
 802e7d0:	69db      	ldr	r3, [r3, #28]
 802e7d2:	2b00      	cmp	r3, #0
 802e7d4:	f000 814e 	beq.w	802ea74 <CRYP_AESCCM_Process+0x3ec>
    {
      if ((hcryp->Init.HeaderSize % 4U) == 0U)
 802e7d8:	687b      	ldr	r3, [r7, #4]
 802e7da:	69db      	ldr	r3, [r3, #28]
 802e7dc:	f003 0303 	and.w	r3, r3, #3
 802e7e0:	2b00      	cmp	r3, #0
 802e7e2:	d17a      	bne.n	802e8da <CRYP_AESCCM_Process+0x252>
      {
        /* HeaderSize %4, no padding */
        for (loopcounter = 0U; (loopcounter < hcryp->Init.HeaderSize); loopcounter += 4U)
 802e7e4:	2300      	movs	r3, #0
 802e7e6:	61bb      	str	r3, [r7, #24]
 802e7e8:	e071      	b.n	802e8ce <CRYP_AESCCM_Process+0x246>
        {
          /* Write the Input block in the Data Input register */
          hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 802e7ea:	687b      	ldr	r3, [r7, #4]
 802e7ec:	699a      	ldr	r2, [r3, #24]
 802e7ee:	687b      	ldr	r3, [r7, #4]
 802e7f0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802e7f2:	b29b      	uxth	r3, r3
 802e7f4:	009b      	lsls	r3, r3, #2
 802e7f6:	441a      	add	r2, r3
 802e7f8:	687b      	ldr	r3, [r7, #4]
 802e7fa:	681b      	ldr	r3, [r3, #0]
 802e7fc:	6812      	ldr	r2, [r2, #0]
 802e7fe:	609a      	str	r2, [r3, #8]
          hcryp->CrypHeaderCount++ ;
 802e800:	687b      	ldr	r3, [r7, #4]
 802e802:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802e804:	b29b      	uxth	r3, r3
 802e806:	3301      	adds	r3, #1
 802e808:	b29a      	uxth	r2, r3
 802e80a:	687b      	ldr	r3, [r7, #4]
 802e80c:	871a      	strh	r2, [r3, #56]	; 0x38
          hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 802e80e:	687b      	ldr	r3, [r7, #4]
 802e810:	699a      	ldr	r2, [r3, #24]
 802e812:	687b      	ldr	r3, [r7, #4]
 802e814:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802e816:	b29b      	uxth	r3, r3
 802e818:	009b      	lsls	r3, r3, #2
 802e81a:	441a      	add	r2, r3
 802e81c:	687b      	ldr	r3, [r7, #4]
 802e81e:	681b      	ldr	r3, [r3, #0]
 802e820:	6812      	ldr	r2, [r2, #0]
 802e822:	609a      	str	r2, [r3, #8]
          hcryp->CrypHeaderCount++ ;
 802e824:	687b      	ldr	r3, [r7, #4]
 802e826:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802e828:	b29b      	uxth	r3, r3
 802e82a:	3301      	adds	r3, #1
 802e82c:	b29a      	uxth	r2, r3
 802e82e:	687b      	ldr	r3, [r7, #4]
 802e830:	871a      	strh	r2, [r3, #56]	; 0x38
          hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 802e832:	687b      	ldr	r3, [r7, #4]
 802e834:	699a      	ldr	r2, [r3, #24]
 802e836:	687b      	ldr	r3, [r7, #4]
 802e838:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802e83a:	b29b      	uxth	r3, r3
 802e83c:	009b      	lsls	r3, r3, #2
 802e83e:	441a      	add	r2, r3
 802e840:	687b      	ldr	r3, [r7, #4]
 802e842:	681b      	ldr	r3, [r3, #0]
 802e844:	6812      	ldr	r2, [r2, #0]
 802e846:	609a      	str	r2, [r3, #8]
          hcryp->CrypHeaderCount++ ;
 802e848:	687b      	ldr	r3, [r7, #4]
 802e84a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802e84c:	b29b      	uxth	r3, r3
 802e84e:	3301      	adds	r3, #1
 802e850:	b29a      	uxth	r2, r3
 802e852:	687b      	ldr	r3, [r7, #4]
 802e854:	871a      	strh	r2, [r3, #56]	; 0x38
          hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 802e856:	687b      	ldr	r3, [r7, #4]
 802e858:	699a      	ldr	r2, [r3, #24]
 802e85a:	687b      	ldr	r3, [r7, #4]
 802e85c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802e85e:	b29b      	uxth	r3, r3
 802e860:	009b      	lsls	r3, r3, #2
 802e862:	441a      	add	r2, r3
 802e864:	687b      	ldr	r3, [r7, #4]
 802e866:	681b      	ldr	r3, [r3, #0]
 802e868:	6812      	ldr	r2, [r2, #0]
 802e86a:	609a      	str	r2, [r3, #8]
          hcryp->CrypHeaderCount++ ;
 802e86c:	687b      	ldr	r3, [r7, #4]
 802e86e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802e870:	b29b      	uxth	r3, r3
 802e872:	3301      	adds	r3, #1
 802e874:	b29a      	uxth	r2, r3
 802e876:	687b      	ldr	r3, [r7, #4]
 802e878:	871a      	strh	r2, [r3, #56]	; 0x38

          if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 802e87a:	6839      	ldr	r1, [r7, #0]
 802e87c:	6878      	ldr	r0, [r7, #4]
 802e87e:	f000 fe07 	bl	802f490 <CRYP_WaitOnCCFlag>
 802e882:	4603      	mov	r3, r0
 802e884:	2b00      	cmp	r3, #0
 802e886:	d017      	beq.n	802e8b8 <CRYP_AESCCM_Process+0x230>
          {
            /* Disable the CRYP peripheral clock */
            __HAL_CRYP_DISABLE(hcryp);
 802e888:	687b      	ldr	r3, [r7, #4]
 802e88a:	681b      	ldr	r3, [r3, #0]
 802e88c:	681a      	ldr	r2, [r3, #0]
 802e88e:	687b      	ldr	r3, [r7, #4]
 802e890:	681b      	ldr	r3, [r3, #0]
 802e892:	f022 0201 	bic.w	r2, r2, #1
 802e896:	601a      	str	r2, [r3, #0]

            /* Change state */
            hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 802e898:	687b      	ldr	r3, [r7, #4]
 802e89a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802e89c:	f043 0210 	orr.w	r2, r3, #16
 802e8a0:	687b      	ldr	r3, [r7, #4]
 802e8a2:	651a      	str	r2, [r3, #80]	; 0x50
            hcryp->State = HAL_CRYP_STATE_READY;
 802e8a4:	687b      	ldr	r3, [r7, #4]
 802e8a6:	2201      	movs	r2, #1
 802e8a8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

            /* Process unlocked */
            __HAL_UNLOCK(hcryp);
 802e8ac:	687b      	ldr	r3, [r7, #4]
 802e8ae:	2200      	movs	r2, #0
 802e8b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            return HAL_ERROR;
 802e8b4:	2301      	movs	r3, #1
 802e8b6:	e19e      	b.n	802ebf6 <CRYP_AESCCM_Process+0x56e>
          }
          /* Clear CCF Flag */
          __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 802e8b8:	687b      	ldr	r3, [r7, #4]
 802e8ba:	681b      	ldr	r3, [r3, #0]
 802e8bc:	681a      	ldr	r2, [r3, #0]
 802e8be:	687b      	ldr	r3, [r7, #4]
 802e8c0:	681b      	ldr	r3, [r3, #0]
 802e8c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802e8c6:	601a      	str	r2, [r3, #0]
        for (loopcounter = 0U; (loopcounter < hcryp->Init.HeaderSize); loopcounter += 4U)
 802e8c8:	69bb      	ldr	r3, [r7, #24]
 802e8ca:	3304      	adds	r3, #4
 802e8cc:	61bb      	str	r3, [r7, #24]
 802e8ce:	687b      	ldr	r3, [r7, #4]
 802e8d0:	69db      	ldr	r3, [r3, #28]
 802e8d2:	69ba      	ldr	r2, [r7, #24]
 802e8d4:	429a      	cmp	r2, r3
 802e8d6:	d388      	bcc.n	802e7ea <CRYP_AESCCM_Process+0x162>
 802e8d8:	e0cc      	b.n	802ea74 <CRYP_AESCCM_Process+0x3ec>
        }
      }
      else
      {
        /*Write Header block in the IN FIFO without last block */
        for (loopcounter = 0U; (loopcounter < ((hcryp->Init.HeaderSize) - (hcryp->Init.HeaderSize % 4U))); loopcounter += 4U)
 802e8da:	2300      	movs	r3, #0
 802e8dc:	61bb      	str	r3, [r7, #24]
 802e8de:	e071      	b.n	802e9c4 <CRYP_AESCCM_Process+0x33c>
        {
          /* Write the input block in the data input register */
          hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 802e8e0:	687b      	ldr	r3, [r7, #4]
 802e8e2:	699a      	ldr	r2, [r3, #24]
 802e8e4:	687b      	ldr	r3, [r7, #4]
 802e8e6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802e8e8:	b29b      	uxth	r3, r3
 802e8ea:	009b      	lsls	r3, r3, #2
 802e8ec:	441a      	add	r2, r3
 802e8ee:	687b      	ldr	r3, [r7, #4]
 802e8f0:	681b      	ldr	r3, [r3, #0]
 802e8f2:	6812      	ldr	r2, [r2, #0]
 802e8f4:	609a      	str	r2, [r3, #8]
          hcryp->CrypHeaderCount++ ;
 802e8f6:	687b      	ldr	r3, [r7, #4]
 802e8f8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802e8fa:	b29b      	uxth	r3, r3
 802e8fc:	3301      	adds	r3, #1
 802e8fe:	b29a      	uxth	r2, r3
 802e900:	687b      	ldr	r3, [r7, #4]
 802e902:	871a      	strh	r2, [r3, #56]	; 0x38
          hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 802e904:	687b      	ldr	r3, [r7, #4]
 802e906:	699a      	ldr	r2, [r3, #24]
 802e908:	687b      	ldr	r3, [r7, #4]
 802e90a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802e90c:	b29b      	uxth	r3, r3
 802e90e:	009b      	lsls	r3, r3, #2
 802e910:	441a      	add	r2, r3
 802e912:	687b      	ldr	r3, [r7, #4]
 802e914:	681b      	ldr	r3, [r3, #0]
 802e916:	6812      	ldr	r2, [r2, #0]
 802e918:	609a      	str	r2, [r3, #8]
          hcryp->CrypHeaderCount++ ;
 802e91a:	687b      	ldr	r3, [r7, #4]
 802e91c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802e91e:	b29b      	uxth	r3, r3
 802e920:	3301      	adds	r3, #1
 802e922:	b29a      	uxth	r2, r3
 802e924:	687b      	ldr	r3, [r7, #4]
 802e926:	871a      	strh	r2, [r3, #56]	; 0x38
          hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 802e928:	687b      	ldr	r3, [r7, #4]
 802e92a:	699a      	ldr	r2, [r3, #24]
 802e92c:	687b      	ldr	r3, [r7, #4]
 802e92e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802e930:	b29b      	uxth	r3, r3
 802e932:	009b      	lsls	r3, r3, #2
 802e934:	441a      	add	r2, r3
 802e936:	687b      	ldr	r3, [r7, #4]
 802e938:	681b      	ldr	r3, [r3, #0]
 802e93a:	6812      	ldr	r2, [r2, #0]
 802e93c:	609a      	str	r2, [r3, #8]
          hcryp->CrypHeaderCount++ ;
 802e93e:	687b      	ldr	r3, [r7, #4]
 802e940:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802e942:	b29b      	uxth	r3, r3
 802e944:	3301      	adds	r3, #1
 802e946:	b29a      	uxth	r2, r3
 802e948:	687b      	ldr	r3, [r7, #4]
 802e94a:	871a      	strh	r2, [r3, #56]	; 0x38
          hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 802e94c:	687b      	ldr	r3, [r7, #4]
 802e94e:	699a      	ldr	r2, [r3, #24]
 802e950:	687b      	ldr	r3, [r7, #4]
 802e952:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802e954:	b29b      	uxth	r3, r3
 802e956:	009b      	lsls	r3, r3, #2
 802e958:	441a      	add	r2, r3
 802e95a:	687b      	ldr	r3, [r7, #4]
 802e95c:	681b      	ldr	r3, [r3, #0]
 802e95e:	6812      	ldr	r2, [r2, #0]
 802e960:	609a      	str	r2, [r3, #8]
          hcryp->CrypHeaderCount++ ;
 802e962:	687b      	ldr	r3, [r7, #4]
 802e964:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802e966:	b29b      	uxth	r3, r3
 802e968:	3301      	adds	r3, #1
 802e96a:	b29a      	uxth	r2, r3
 802e96c:	687b      	ldr	r3, [r7, #4]
 802e96e:	871a      	strh	r2, [r3, #56]	; 0x38

          if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 802e970:	6839      	ldr	r1, [r7, #0]
 802e972:	6878      	ldr	r0, [r7, #4]
 802e974:	f000 fd8c 	bl	802f490 <CRYP_WaitOnCCFlag>
 802e978:	4603      	mov	r3, r0
 802e97a:	2b00      	cmp	r3, #0
 802e97c:	d017      	beq.n	802e9ae <CRYP_AESCCM_Process+0x326>
          {
            /* Disable the CRYP peripheral clock */
            __HAL_CRYP_DISABLE(hcryp);
 802e97e:	687b      	ldr	r3, [r7, #4]
 802e980:	681b      	ldr	r3, [r3, #0]
 802e982:	681a      	ldr	r2, [r3, #0]
 802e984:	687b      	ldr	r3, [r7, #4]
 802e986:	681b      	ldr	r3, [r3, #0]
 802e988:	f022 0201 	bic.w	r2, r2, #1
 802e98c:	601a      	str	r2, [r3, #0]

            /* Change state */
            hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 802e98e:	687b      	ldr	r3, [r7, #4]
 802e990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802e992:	f043 0210 	orr.w	r2, r3, #16
 802e996:	687b      	ldr	r3, [r7, #4]
 802e998:	651a      	str	r2, [r3, #80]	; 0x50
            hcryp->State = HAL_CRYP_STATE_READY;
 802e99a:	687b      	ldr	r3, [r7, #4]
 802e99c:	2201      	movs	r2, #1
 802e99e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

            /* Process unlocked */
            __HAL_UNLOCK(hcryp);
 802e9a2:	687b      	ldr	r3, [r7, #4]
 802e9a4:	2200      	movs	r2, #0
 802e9a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            return HAL_ERROR;
 802e9aa:	2301      	movs	r3, #1
 802e9ac:	e123      	b.n	802ebf6 <CRYP_AESCCM_Process+0x56e>
          }
          /* Clear CCF Flag */
          __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 802e9ae:	687b      	ldr	r3, [r7, #4]
 802e9b0:	681b      	ldr	r3, [r3, #0]
 802e9b2:	681a      	ldr	r2, [r3, #0]
 802e9b4:	687b      	ldr	r3, [r7, #4]
 802e9b6:	681b      	ldr	r3, [r3, #0]
 802e9b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802e9bc:	601a      	str	r2, [r3, #0]
        for (loopcounter = 0U; (loopcounter < ((hcryp->Init.HeaderSize) - (hcryp->Init.HeaderSize % 4U))); loopcounter += 4U)
 802e9be:	69bb      	ldr	r3, [r7, #24]
 802e9c0:	3304      	adds	r3, #4
 802e9c2:	61bb      	str	r3, [r7, #24]
 802e9c4:	687b      	ldr	r3, [r7, #4]
 802e9c6:	69db      	ldr	r3, [r3, #28]
 802e9c8:	f023 0303 	bic.w	r3, r3, #3
 802e9cc:	69ba      	ldr	r2, [r7, #24]
 802e9ce:	429a      	cmp	r2, r3
 802e9d0:	d386      	bcc.n	802e8e0 <CRYP_AESCCM_Process+0x258>
        }
        /*  Last block optionally pad the data with zeros*/
        for (loopcounter = 0U; (loopcounter < (hcryp->Init.HeaderSize % 4U)); loopcounter++)
 802e9d2:	2300      	movs	r3, #0
 802e9d4:	61bb      	str	r3, [r7, #24]
 802e9d6:	e014      	b.n	802ea02 <CRYP_AESCCM_Process+0x37a>
        {
          hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 802e9d8:	687b      	ldr	r3, [r7, #4]
 802e9da:	699a      	ldr	r2, [r3, #24]
 802e9dc:	687b      	ldr	r3, [r7, #4]
 802e9de:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802e9e0:	b29b      	uxth	r3, r3
 802e9e2:	009b      	lsls	r3, r3, #2
 802e9e4:	441a      	add	r2, r3
 802e9e6:	687b      	ldr	r3, [r7, #4]
 802e9e8:	681b      	ldr	r3, [r3, #0]
 802e9ea:	6812      	ldr	r2, [r2, #0]
 802e9ec:	609a      	str	r2, [r3, #8]
          hcryp->CrypHeaderCount++ ;
 802e9ee:	687b      	ldr	r3, [r7, #4]
 802e9f0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802e9f2:	b29b      	uxth	r3, r3
 802e9f4:	3301      	adds	r3, #1
 802e9f6:	b29a      	uxth	r2, r3
 802e9f8:	687b      	ldr	r3, [r7, #4]
 802e9fa:	871a      	strh	r2, [r3, #56]	; 0x38
        for (loopcounter = 0U; (loopcounter < (hcryp->Init.HeaderSize % 4U)); loopcounter++)
 802e9fc:	69bb      	ldr	r3, [r7, #24]
 802e9fe:	3301      	adds	r3, #1
 802ea00:	61bb      	str	r3, [r7, #24]
 802ea02:	687b      	ldr	r3, [r7, #4]
 802ea04:	69db      	ldr	r3, [r3, #28]
 802ea06:	f003 0303 	and.w	r3, r3, #3
 802ea0a:	69ba      	ldr	r2, [r7, #24]
 802ea0c:	429a      	cmp	r2, r3
 802ea0e:	d3e3      	bcc.n	802e9d8 <CRYP_AESCCM_Process+0x350>
        }
        while (loopcounter < 4U)
 802ea10:	e006      	b.n	802ea20 <CRYP_AESCCM_Process+0x398>
        {
          /* Pad the data with zeros to have a complete block */
          hcryp->Instance->DINR = 0x0U;
 802ea12:	687b      	ldr	r3, [r7, #4]
 802ea14:	681b      	ldr	r3, [r3, #0]
 802ea16:	2200      	movs	r2, #0
 802ea18:	609a      	str	r2, [r3, #8]
          loopcounter++;
 802ea1a:	69bb      	ldr	r3, [r7, #24]
 802ea1c:	3301      	adds	r3, #1
 802ea1e:	61bb      	str	r3, [r7, #24]
        while (loopcounter < 4U)
 802ea20:	69bb      	ldr	r3, [r7, #24]
 802ea22:	2b03      	cmp	r3, #3
 802ea24:	d9f5      	bls.n	802ea12 <CRYP_AESCCM_Process+0x38a>
        }

        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 802ea26:	6839      	ldr	r1, [r7, #0]
 802ea28:	6878      	ldr	r0, [r7, #4]
 802ea2a:	f000 fd31 	bl	802f490 <CRYP_WaitOnCCFlag>
 802ea2e:	4603      	mov	r3, r0
 802ea30:	2b00      	cmp	r3, #0
 802ea32:	d017      	beq.n	802ea64 <CRYP_AESCCM_Process+0x3dc>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 802ea34:	687b      	ldr	r3, [r7, #4]
 802ea36:	681b      	ldr	r3, [r3, #0]
 802ea38:	681a      	ldr	r2, [r3, #0]
 802ea3a:	687b      	ldr	r3, [r7, #4]
 802ea3c:	681b      	ldr	r3, [r3, #0]
 802ea3e:	f022 0201 	bic.w	r2, r2, #1
 802ea42:	601a      	str	r2, [r3, #0]

          /* Change state */
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 802ea44:	687b      	ldr	r3, [r7, #4]
 802ea46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802ea48:	f043 0210 	orr.w	r2, r3, #16
 802ea4c:	687b      	ldr	r3, [r7, #4]
 802ea4e:	651a      	str	r2, [r3, #80]	; 0x50
          hcryp->State = HAL_CRYP_STATE_READY;
 802ea50:	687b      	ldr	r3, [r7, #4]
 802ea52:	2201      	movs	r2, #1
 802ea54:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 802ea58:	687b      	ldr	r3, [r7, #4]
 802ea5a:	2200      	movs	r2, #0
 802ea5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
          return HAL_ERROR;
 802ea60:	2301      	movs	r3, #1
 802ea62:	e0c8      	b.n	802ebf6 <CRYP_AESCCM_Process+0x56e>
        }
        /* Clear CCF flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 802ea64:	687b      	ldr	r3, [r7, #4]
 802ea66:	681b      	ldr	r3, [r3, #0]
 802ea68:	681a      	ldr	r2, [r3, #0]
 802ea6a:	687b      	ldr	r3, [r7, #4]
 802ea6c:	681b      	ldr	r3, [r3, #0]
 802ea6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802ea72:	601a      	str	r2, [r3, #0]
      }
    }
  } /* if (DoKeyIVConfig == 1U) */
  /* Then the payload: cleartext payload (not the ciphertext payload).
  Write input Data, no output Data to get */
  if (hcryp->Size != 0U)
 802ea74:	687b      	ldr	r3, [r7, #4]
 802ea76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802ea78:	2b00      	cmp	r3, #0
 802ea7a:	f000 80bb 	beq.w	802ebf4 <CRYP_AESCCM_Process+0x56c>
  {
    if ((hcryp->Size % 16U) != 0U)
 802ea7e:	687b      	ldr	r3, [r7, #4]
 802ea80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802ea82:	f003 030f 	and.w	r3, r3, #15
 802ea86:	b29b      	uxth	r3, r3
 802ea88:	2b00      	cmp	r3, #0
 802ea8a:	d003      	beq.n	802ea94 <CRYP_AESCCM_Process+0x40c>
    {
      /* recalculate  wordsize */
      wordsize = ((wordsize / 4U) * 4U) ;
 802ea8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ea8e:	f023 0303 	bic.w	r3, r3, #3
 802ea92:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 802ea94:	f7fd fc6a 	bl	802c36c <HAL_GetTick>
 802ea98:	6138      	str	r0, [r7, #16]
    /*Temporary CrypOutCount Value*/
    outcount = hcryp->CrypOutCount;
 802ea9a:	687b      	ldr	r3, [r7, #4]
 802ea9c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 802ea9e:	847b      	strh	r3, [r7, #34]	; 0x22

    while ((hcryp->CrypInCount < wordsize) && (outcount < wordsize))
 802eaa0:	e02d      	b.n	802eafe <CRYP_AESCCM_Process+0x476>
    {
      /* Write plain data and get cipher data */
      CRYP_AES_ProcessData(hcryp, Timeout);
 802eaa2:	6839      	ldr	r1, [r7, #0]
 802eaa4:	6878      	ldr	r0, [r7, #4]
 802eaa6:	f7ff fbda 	bl	802e25e <CRYP_AES_ProcessData>

      /*Temporary CrypOutCount Value*/
      outcount = hcryp->CrypOutCount;
 802eaaa:	687b      	ldr	r3, [r7, #4]
 802eaac:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 802eaae:	847b      	strh	r3, [r7, #34]	; 0x22

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 802eab0:	683b      	ldr	r3, [r7, #0]
 802eab2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 802eab6:	d022      	beq.n	802eafe <CRYP_AESCCM_Process+0x476>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 802eab8:	f7fd fc58 	bl	802c36c <HAL_GetTick>
 802eabc:	4602      	mov	r2, r0
 802eabe:	693b      	ldr	r3, [r7, #16]
 802eac0:	1ad3      	subs	r3, r2, r3
 802eac2:	683a      	ldr	r2, [r7, #0]
 802eac4:	429a      	cmp	r2, r3
 802eac6:	d302      	bcc.n	802eace <CRYP_AESCCM_Process+0x446>
 802eac8:	683b      	ldr	r3, [r7, #0]
 802eaca:	2b00      	cmp	r3, #0
 802eacc:	d117      	bne.n	802eafe <CRYP_AESCCM_Process+0x476>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 802eace:	687b      	ldr	r3, [r7, #4]
 802ead0:	681b      	ldr	r3, [r3, #0]
 802ead2:	681a      	ldr	r2, [r3, #0]
 802ead4:	687b      	ldr	r3, [r7, #4]
 802ead6:	681b      	ldr	r3, [r3, #0]
 802ead8:	f022 0201 	bic.w	r2, r2, #1
 802eadc:	601a      	str	r2, [r3, #0]

          /* Change state */
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 802eade:	687b      	ldr	r3, [r7, #4]
 802eae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802eae2:	f043 0210 	orr.w	r2, r3, #16
 802eae6:	687b      	ldr	r3, [r7, #4]
 802eae8:	651a      	str	r2, [r3, #80]	; 0x50
          hcryp->State = HAL_CRYP_STATE_READY;
 802eaea:	687b      	ldr	r3, [r7, #4]
 802eaec:	2201      	movs	r2, #1
 802eaee:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 802eaf2:	687b      	ldr	r3, [r7, #4]
 802eaf4:	2200      	movs	r2, #0
 802eaf6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
          return HAL_ERROR;
 802eafa:	2301      	movs	r3, #1
 802eafc:	e07b      	b.n	802ebf6 <CRYP_AESCCM_Process+0x56e>
    while ((hcryp->CrypInCount < wordsize) && (outcount < wordsize))
 802eafe:	687b      	ldr	r3, [r7, #4]
 802eb00:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 802eb02:	b29b      	uxth	r3, r3
 802eb04:	461a      	mov	r2, r3
 802eb06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802eb08:	4293      	cmp	r3, r2
 802eb0a:	d903      	bls.n	802eb14 <CRYP_AESCCM_Process+0x48c>
 802eb0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802eb0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802eb10:	429a      	cmp	r2, r3
 802eb12:	d8c6      	bhi.n	802eaa2 <CRYP_AESCCM_Process+0x41a>
        }
      }
    }

    if ((hcryp->Size % 16U) != 0U)
 802eb14:	687b      	ldr	r3, [r7, #4]
 802eb16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802eb18:	f003 030f 	and.w	r3, r3, #15
 802eb1c:	b29b      	uxth	r3, r3
 802eb1e:	2b00      	cmp	r3, #0
 802eb20:	d068      	beq.n	802ebf4 <CRYP_AESCCM_Process+0x56c>
    {
      /* Compute the number of padding bytes in last block of payload */
      npblb = ((((uint32_t)(hcryp->Size) / 16U) + 1U) * 16U) - (uint32_t)(hcryp->Size);
 802eb22:	687b      	ldr	r3, [r7, #4]
 802eb24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802eb26:	091b      	lsrs	r3, r3, #4
 802eb28:	b29b      	uxth	r3, r3
 802eb2a:	3301      	adds	r3, #1
 802eb2c:	011b      	lsls	r3, r3, #4
 802eb2e:	687a      	ldr	r2, [r7, #4]
 802eb30:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
 802eb32:	1a9b      	subs	r3, r3, r2
 802eb34:	60fb      	str	r3, [r7, #12]

      /* Number of valid words (lastwordsize) in last block */
      if ((npblb % 4U) == 0U)
 802eb36:	68fb      	ldr	r3, [r7, #12]
 802eb38:	f003 0303 	and.w	r3, r3, #3
 802eb3c:	2b00      	cmp	r3, #0
 802eb3e:	d105      	bne.n	802eb4c <CRYP_AESCCM_Process+0x4c4>
      {
        lastwordsize = (16U - npblb) / 4U;
 802eb40:	68fb      	ldr	r3, [r7, #12]
 802eb42:	f1c3 0310 	rsb	r3, r3, #16
 802eb46:	089b      	lsrs	r3, r3, #2
 802eb48:	617b      	str	r3, [r7, #20]
 802eb4a:	e005      	b.n	802eb58 <CRYP_AESCCM_Process+0x4d0>
      }
      else
      {
        lastwordsize = ((16U - npblb) / 4U) + 1U;
 802eb4c:	68fb      	ldr	r3, [r7, #12]
 802eb4e:	f1c3 0310 	rsb	r3, r3, #16
 802eb52:	089b      	lsrs	r3, r3, #2
 802eb54:	3301      	adds	r3, #1
 802eb56:	617b      	str	r3, [r7, #20]
      }
      /*  Last block optionally pad the data with zeros*/
      for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 802eb58:	2300      	movs	r3, #0
 802eb5a:	61bb      	str	r3, [r7, #24]
 802eb5c:	e014      	b.n	802eb88 <CRYP_AESCCM_Process+0x500>
      {
        /* Write the last input block in the IN FIFO */
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 802eb5e:	687b      	ldr	r3, [r7, #4]
 802eb60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802eb62:	687b      	ldr	r3, [r7, #4]
 802eb64:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 802eb66:	b29b      	uxth	r3, r3
 802eb68:	009b      	lsls	r3, r3, #2
 802eb6a:	441a      	add	r2, r3
 802eb6c:	687b      	ldr	r3, [r7, #4]
 802eb6e:	681b      	ldr	r3, [r3, #0]
 802eb70:	6812      	ldr	r2, [r2, #0]
 802eb72:	609a      	str	r2, [r3, #8]
        hcryp->CrypInCount++;
 802eb74:	687b      	ldr	r3, [r7, #4]
 802eb76:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 802eb78:	b29b      	uxth	r3, r3
 802eb7a:	3301      	adds	r3, #1
 802eb7c:	b29a      	uxth	r2, r3
 802eb7e:	687b      	ldr	r3, [r7, #4]
 802eb80:	875a      	strh	r2, [r3, #58]	; 0x3a
      for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 802eb82:	69bb      	ldr	r3, [r7, #24]
 802eb84:	3301      	adds	r3, #1
 802eb86:	61bb      	str	r3, [r7, #24]
 802eb88:	69ba      	ldr	r2, [r7, #24]
 802eb8a:	697b      	ldr	r3, [r7, #20]
 802eb8c:	429a      	cmp	r2, r3
 802eb8e:	d3e6      	bcc.n	802eb5e <CRYP_AESCCM_Process+0x4d6>
      }
      while (loopcounter < 4U)
 802eb90:	e006      	b.n	802eba0 <CRYP_AESCCM_Process+0x518>
      {
        /* Pad the data with zeros to have a complete block */
        hcryp->Instance->DINR  = 0U;
 802eb92:	687b      	ldr	r3, [r7, #4]
 802eb94:	681b      	ldr	r3, [r3, #0]
 802eb96:	2200      	movs	r2, #0
 802eb98:	609a      	str	r2, [r3, #8]
        loopcounter++;
 802eb9a:	69bb      	ldr	r3, [r7, #24]
 802eb9c:	3301      	adds	r3, #1
 802eb9e:	61bb      	str	r3, [r7, #24]
      while (loopcounter < 4U)
 802eba0:	69bb      	ldr	r3, [r7, #24]
 802eba2:	2b03      	cmp	r3, #3
 802eba4:	d9f5      	bls.n	802eb92 <CRYP_AESCCM_Process+0x50a>
      }
      /* Wait for CCF flag to be raised */
      if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 802eba6:	6839      	ldr	r1, [r7, #0]
 802eba8:	6878      	ldr	r0, [r7, #4]
 802ebaa:	f000 fc71 	bl	802f490 <CRYP_WaitOnCCFlag>
 802ebae:	4603      	mov	r3, r0
 802ebb0:	2b00      	cmp	r3, #0
 802ebb2:	d017      	beq.n	802ebe4 <CRYP_AESCCM_Process+0x55c>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 802ebb4:	687b      	ldr	r3, [r7, #4]
 802ebb6:	681b      	ldr	r3, [r3, #0]
 802ebb8:	681a      	ldr	r2, [r3, #0]
 802ebba:	687b      	ldr	r3, [r7, #4]
 802ebbc:	681b      	ldr	r3, [r3, #0]
 802ebbe:	f022 0201 	bic.w	r2, r2, #1
 802ebc2:	601a      	str	r2, [r3, #0]

        /* Change state */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 802ebc4:	687b      	ldr	r3, [r7, #4]
 802ebc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802ebc8:	f043 0210 	orr.w	r2, r3, #16
 802ebcc:	687b      	ldr	r3, [r7, #4]
 802ebce:	651a      	str	r2, [r3, #80]	; 0x50
        hcryp->State = HAL_CRYP_STATE_READY;
 802ebd0:	687b      	ldr	r3, [r7, #4]
 802ebd2:	2201      	movs	r2, #1
 802ebd4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 802ebd8:	687b      	ldr	r3, [r7, #4]
 802ebda:	2200      	movs	r2, #0
 802ebdc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        return HAL_ERROR;
 802ebe0:	2301      	movs	r3, #1
 802ebe2:	e008      	b.n	802ebf6 <CRYP_AESCCM_Process+0x56e>
      }
      /* Clear CCF flag */
      __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 802ebe4:	687b      	ldr	r3, [r7, #4]
 802ebe6:	681b      	ldr	r3, [r3, #0]
 802ebe8:	681a      	ldr	r2, [r3, #0]
 802ebea:	687b      	ldr	r3, [r7, #4]
 802ebec:	681b      	ldr	r3, [r3, #0]
 802ebee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802ebf2:	601a      	str	r2, [r3, #0]
    CRYP_Workaround(hcryp, Timeout);
  }
#endif /* CRYP */

  /* Return function status */
  return HAL_OK;
 802ebf4:	2300      	movs	r3, #0
}
 802ebf6:	4618      	mov	r0, r3
 802ebf8:	3728      	adds	r7, #40	; 0x28
 802ebfa:	46bd      	mov	sp, r7
 802ebfc:	bd80      	pop	{r7, pc}

0802ebfe <CRYP_GCMCCM_SetHeaderPhase>:
  *         the configuration information for CRYP module(Header & HeaderSize)
  * @param  Timeout: Timeout value
  * @retval state
  */
static HAL_StatusTypeDef CRYP_GCMCCM_SetHeaderPhase(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 802ebfe:	b580      	push	{r7, lr}
 802ec00:	b084      	sub	sp, #16
 802ec02:	af00      	add	r7, sp, #0
 802ec04:	6078      	str	r0, [r7, #4]
 802ec06:	6039      	str	r1, [r7, #0]
  uint32_t loopcounter;

  /***************************** Header phase for GCM/GMAC or CCM *********************************/

  if ((hcryp->Init.HeaderSize != 0U))
 802ec08:	687b      	ldr	r3, [r7, #4]
 802ec0a:	69db      	ldr	r3, [r3, #28]
 802ec0c:	2b00      	cmp	r3, #0
 802ec0e:	f000 8176 	beq.w	802eefe <CRYP_GCMCCM_SetHeaderPhase+0x300>
      return HAL_ERROR;
    }

#else /* AES */

    if (hcryp->Init.Algorithm == CRYP_AES_GCM_GMAC)
 802ec12:	687b      	ldr	r3, [r7, #4]
 802ec14:	695b      	ldr	r3, [r3, #20]
 802ec16:	2b60      	cmp	r3, #96	; 0x60
 802ec18:	d122      	bne.n	802ec60 <CRYP_GCMCCM_SetHeaderPhase+0x62>
    {
      /* Workaround 1 :only AES before re-enabling the IP, datatype can be configured.*/
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE, hcryp->Init.DataType);
 802ec1a:	687b      	ldr	r3, [r7, #4]
 802ec1c:	681b      	ldr	r3, [r3, #0]
 802ec1e:	681b      	ldr	r3, [r3, #0]
 802ec20:	f023 0106 	bic.w	r1, r3, #6
 802ec24:	687b      	ldr	r3, [r7, #4]
 802ec26:	685a      	ldr	r2, [r3, #4]
 802ec28:	687b      	ldr	r3, [r7, #4]
 802ec2a:	681b      	ldr	r3, [r3, #0]
 802ec2c:	430a      	orrs	r2, r1
 802ec2e:	601a      	str	r2, [r3, #0]

      /* Select header phase */
      CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 802ec30:	687b      	ldr	r3, [r7, #4]
 802ec32:	681b      	ldr	r3, [r3, #0]
 802ec34:	681a      	ldr	r2, [r3, #0]
 802ec36:	687b      	ldr	r3, [r7, #4]
 802ec38:	681b      	ldr	r3, [r3, #0]
 802ec3a:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 802ec3e:	601a      	str	r2, [r3, #0]
 802ec40:	687b      	ldr	r3, [r7, #4]
 802ec42:	681b      	ldr	r3, [r3, #0]
 802ec44:	681a      	ldr	r2, [r3, #0]
 802ec46:	687b      	ldr	r3, [r7, #4]
 802ec48:	681b      	ldr	r3, [r3, #0]
 802ec4a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 802ec4e:	601a      	str	r2, [r3, #0]

      /* Enable the CRYP peripheral */
      __HAL_CRYP_ENABLE(hcryp);
 802ec50:	687b      	ldr	r3, [r7, #4]
 802ec52:	681b      	ldr	r3, [r3, #0]
 802ec54:	681a      	ldr	r2, [r3, #0]
 802ec56:	687b      	ldr	r3, [r7, #4]
 802ec58:	681b      	ldr	r3, [r3, #0]
 802ec5a:	f042 0201 	orr.w	r2, r2, #1
 802ec5e:	601a      	str	r2, [r3, #0]

    }
    if ((hcryp->Init.HeaderSize % 4U) == 0U)
 802ec60:	687b      	ldr	r3, [r7, #4]
 802ec62:	69db      	ldr	r3, [r3, #28]
 802ec64:	f003 0303 	and.w	r3, r3, #3
 802ec68:	2b00      	cmp	r3, #0
 802ec6a:	d17a      	bne.n	802ed62 <CRYP_GCMCCM_SetHeaderPhase+0x164>
    {
      /* HeaderSize %4, no padding */
      for (loopcounter = 0U; (loopcounter < hcryp->Init.HeaderSize); loopcounter += 4U)
 802ec6c:	2300      	movs	r3, #0
 802ec6e:	60fb      	str	r3, [r7, #12]
 802ec70:	e071      	b.n	802ed56 <CRYP_GCMCCM_SetHeaderPhase+0x158>
      {
        /* Write the input block in the data input register */
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 802ec72:	687b      	ldr	r3, [r7, #4]
 802ec74:	699a      	ldr	r2, [r3, #24]
 802ec76:	687b      	ldr	r3, [r7, #4]
 802ec78:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802ec7a:	b29b      	uxth	r3, r3
 802ec7c:	009b      	lsls	r3, r3, #2
 802ec7e:	441a      	add	r2, r3
 802ec80:	687b      	ldr	r3, [r7, #4]
 802ec82:	681b      	ldr	r3, [r3, #0]
 802ec84:	6812      	ldr	r2, [r2, #0]
 802ec86:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 802ec88:	687b      	ldr	r3, [r7, #4]
 802ec8a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802ec8c:	b29b      	uxth	r3, r3
 802ec8e:	3301      	adds	r3, #1
 802ec90:	b29a      	uxth	r2, r3
 802ec92:	687b      	ldr	r3, [r7, #4]
 802ec94:	871a      	strh	r2, [r3, #56]	; 0x38
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 802ec96:	687b      	ldr	r3, [r7, #4]
 802ec98:	699a      	ldr	r2, [r3, #24]
 802ec9a:	687b      	ldr	r3, [r7, #4]
 802ec9c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802ec9e:	b29b      	uxth	r3, r3
 802eca0:	009b      	lsls	r3, r3, #2
 802eca2:	441a      	add	r2, r3
 802eca4:	687b      	ldr	r3, [r7, #4]
 802eca6:	681b      	ldr	r3, [r3, #0]
 802eca8:	6812      	ldr	r2, [r2, #0]
 802ecaa:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 802ecac:	687b      	ldr	r3, [r7, #4]
 802ecae:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802ecb0:	b29b      	uxth	r3, r3
 802ecb2:	3301      	adds	r3, #1
 802ecb4:	b29a      	uxth	r2, r3
 802ecb6:	687b      	ldr	r3, [r7, #4]
 802ecb8:	871a      	strh	r2, [r3, #56]	; 0x38
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 802ecba:	687b      	ldr	r3, [r7, #4]
 802ecbc:	699a      	ldr	r2, [r3, #24]
 802ecbe:	687b      	ldr	r3, [r7, #4]
 802ecc0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802ecc2:	b29b      	uxth	r3, r3
 802ecc4:	009b      	lsls	r3, r3, #2
 802ecc6:	441a      	add	r2, r3
 802ecc8:	687b      	ldr	r3, [r7, #4]
 802ecca:	681b      	ldr	r3, [r3, #0]
 802eccc:	6812      	ldr	r2, [r2, #0]
 802ecce:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 802ecd0:	687b      	ldr	r3, [r7, #4]
 802ecd2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802ecd4:	b29b      	uxth	r3, r3
 802ecd6:	3301      	adds	r3, #1
 802ecd8:	b29a      	uxth	r2, r3
 802ecda:	687b      	ldr	r3, [r7, #4]
 802ecdc:	871a      	strh	r2, [r3, #56]	; 0x38
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 802ecde:	687b      	ldr	r3, [r7, #4]
 802ece0:	699a      	ldr	r2, [r3, #24]
 802ece2:	687b      	ldr	r3, [r7, #4]
 802ece4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802ece6:	b29b      	uxth	r3, r3
 802ece8:	009b      	lsls	r3, r3, #2
 802ecea:	441a      	add	r2, r3
 802ecec:	687b      	ldr	r3, [r7, #4]
 802ecee:	681b      	ldr	r3, [r3, #0]
 802ecf0:	6812      	ldr	r2, [r2, #0]
 802ecf2:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 802ecf4:	687b      	ldr	r3, [r7, #4]
 802ecf6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802ecf8:	b29b      	uxth	r3, r3
 802ecfa:	3301      	adds	r3, #1
 802ecfc:	b29a      	uxth	r2, r3
 802ecfe:	687b      	ldr	r3, [r7, #4]
 802ed00:	871a      	strh	r2, [r3, #56]	; 0x38

        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 802ed02:	6839      	ldr	r1, [r7, #0]
 802ed04:	6878      	ldr	r0, [r7, #4]
 802ed06:	f000 fbc3 	bl	802f490 <CRYP_WaitOnCCFlag>
 802ed0a:	4603      	mov	r3, r0
 802ed0c:	2b00      	cmp	r3, #0
 802ed0e:	d017      	beq.n	802ed40 <CRYP_GCMCCM_SetHeaderPhase+0x142>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 802ed10:	687b      	ldr	r3, [r7, #4]
 802ed12:	681b      	ldr	r3, [r3, #0]
 802ed14:	681a      	ldr	r2, [r3, #0]
 802ed16:	687b      	ldr	r3, [r7, #4]
 802ed18:	681b      	ldr	r3, [r3, #0]
 802ed1a:	f022 0201 	bic.w	r2, r2, #1
 802ed1e:	601a      	str	r2, [r3, #0]

          /* Change state */
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 802ed20:	687b      	ldr	r3, [r7, #4]
 802ed22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802ed24:	f043 0210 	orr.w	r2, r3, #16
 802ed28:	687b      	ldr	r3, [r7, #4]
 802ed2a:	651a      	str	r2, [r3, #80]	; 0x50
          hcryp->State = HAL_CRYP_STATE_READY;
 802ed2c:	687b      	ldr	r3, [r7, #4]
 802ed2e:	2201      	movs	r2, #1
 802ed30:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 802ed34:	687b      	ldr	r3, [r7, #4]
 802ed36:	2200      	movs	r2, #0
 802ed38:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
          return HAL_ERROR;
 802ed3c:	2301      	movs	r3, #1
 802ed3e:	e106      	b.n	802ef4e <CRYP_GCMCCM_SetHeaderPhase+0x350>
        }
        /* Clear CCF flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 802ed40:	687b      	ldr	r3, [r7, #4]
 802ed42:	681b      	ldr	r3, [r3, #0]
 802ed44:	681a      	ldr	r2, [r3, #0]
 802ed46:	687b      	ldr	r3, [r7, #4]
 802ed48:	681b      	ldr	r3, [r3, #0]
 802ed4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802ed4e:	601a      	str	r2, [r3, #0]
      for (loopcounter = 0U; (loopcounter < hcryp->Init.HeaderSize); loopcounter += 4U)
 802ed50:	68fb      	ldr	r3, [r7, #12]
 802ed52:	3304      	adds	r3, #4
 802ed54:	60fb      	str	r3, [r7, #12]
 802ed56:	687b      	ldr	r3, [r7, #4]
 802ed58:	69db      	ldr	r3, [r3, #28]
 802ed5a:	68fa      	ldr	r2, [r7, #12]
 802ed5c:	429a      	cmp	r2, r3
 802ed5e:	d388      	bcc.n	802ec72 <CRYP_GCMCCM_SetHeaderPhase+0x74>
 802ed60:	e0f4      	b.n	802ef4c <CRYP_GCMCCM_SetHeaderPhase+0x34e>
      }
    }
    else
    {
      /*Write header block in the IN FIFO without last block */
      for (loopcounter = 0U; (loopcounter < ((hcryp->Init.HeaderSize) - (hcryp->Init.HeaderSize % 4U))); loopcounter += 4U)
 802ed62:	2300      	movs	r3, #0
 802ed64:	60fb      	str	r3, [r7, #12]
 802ed66:	e071      	b.n	802ee4c <CRYP_GCMCCM_SetHeaderPhase+0x24e>
      {
        /* Write the input block in the data input register */
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 802ed68:	687b      	ldr	r3, [r7, #4]
 802ed6a:	699a      	ldr	r2, [r3, #24]
 802ed6c:	687b      	ldr	r3, [r7, #4]
 802ed6e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802ed70:	b29b      	uxth	r3, r3
 802ed72:	009b      	lsls	r3, r3, #2
 802ed74:	441a      	add	r2, r3
 802ed76:	687b      	ldr	r3, [r7, #4]
 802ed78:	681b      	ldr	r3, [r3, #0]
 802ed7a:	6812      	ldr	r2, [r2, #0]
 802ed7c:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 802ed7e:	687b      	ldr	r3, [r7, #4]
 802ed80:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802ed82:	b29b      	uxth	r3, r3
 802ed84:	3301      	adds	r3, #1
 802ed86:	b29a      	uxth	r2, r3
 802ed88:	687b      	ldr	r3, [r7, #4]
 802ed8a:	871a      	strh	r2, [r3, #56]	; 0x38
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 802ed8c:	687b      	ldr	r3, [r7, #4]
 802ed8e:	699a      	ldr	r2, [r3, #24]
 802ed90:	687b      	ldr	r3, [r7, #4]
 802ed92:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802ed94:	b29b      	uxth	r3, r3
 802ed96:	009b      	lsls	r3, r3, #2
 802ed98:	441a      	add	r2, r3
 802ed9a:	687b      	ldr	r3, [r7, #4]
 802ed9c:	681b      	ldr	r3, [r3, #0]
 802ed9e:	6812      	ldr	r2, [r2, #0]
 802eda0:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 802eda2:	687b      	ldr	r3, [r7, #4]
 802eda4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802eda6:	b29b      	uxth	r3, r3
 802eda8:	3301      	adds	r3, #1
 802edaa:	b29a      	uxth	r2, r3
 802edac:	687b      	ldr	r3, [r7, #4]
 802edae:	871a      	strh	r2, [r3, #56]	; 0x38
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 802edb0:	687b      	ldr	r3, [r7, #4]
 802edb2:	699a      	ldr	r2, [r3, #24]
 802edb4:	687b      	ldr	r3, [r7, #4]
 802edb6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802edb8:	b29b      	uxth	r3, r3
 802edba:	009b      	lsls	r3, r3, #2
 802edbc:	441a      	add	r2, r3
 802edbe:	687b      	ldr	r3, [r7, #4]
 802edc0:	681b      	ldr	r3, [r3, #0]
 802edc2:	6812      	ldr	r2, [r2, #0]
 802edc4:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 802edc6:	687b      	ldr	r3, [r7, #4]
 802edc8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802edca:	b29b      	uxth	r3, r3
 802edcc:	3301      	adds	r3, #1
 802edce:	b29a      	uxth	r2, r3
 802edd0:	687b      	ldr	r3, [r7, #4]
 802edd2:	871a      	strh	r2, [r3, #56]	; 0x38
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 802edd4:	687b      	ldr	r3, [r7, #4]
 802edd6:	699a      	ldr	r2, [r3, #24]
 802edd8:	687b      	ldr	r3, [r7, #4]
 802edda:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802eddc:	b29b      	uxth	r3, r3
 802edde:	009b      	lsls	r3, r3, #2
 802ede0:	441a      	add	r2, r3
 802ede2:	687b      	ldr	r3, [r7, #4]
 802ede4:	681b      	ldr	r3, [r3, #0]
 802ede6:	6812      	ldr	r2, [r2, #0]
 802ede8:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 802edea:	687b      	ldr	r3, [r7, #4]
 802edec:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802edee:	b29b      	uxth	r3, r3
 802edf0:	3301      	adds	r3, #1
 802edf2:	b29a      	uxth	r2, r3
 802edf4:	687b      	ldr	r3, [r7, #4]
 802edf6:	871a      	strh	r2, [r3, #56]	; 0x38

        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 802edf8:	6839      	ldr	r1, [r7, #0]
 802edfa:	6878      	ldr	r0, [r7, #4]
 802edfc:	f000 fb48 	bl	802f490 <CRYP_WaitOnCCFlag>
 802ee00:	4603      	mov	r3, r0
 802ee02:	2b00      	cmp	r3, #0
 802ee04:	d017      	beq.n	802ee36 <CRYP_GCMCCM_SetHeaderPhase+0x238>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 802ee06:	687b      	ldr	r3, [r7, #4]
 802ee08:	681b      	ldr	r3, [r3, #0]
 802ee0a:	681a      	ldr	r2, [r3, #0]
 802ee0c:	687b      	ldr	r3, [r7, #4]
 802ee0e:	681b      	ldr	r3, [r3, #0]
 802ee10:	f022 0201 	bic.w	r2, r2, #1
 802ee14:	601a      	str	r2, [r3, #0]

          /* Change state */
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 802ee16:	687b      	ldr	r3, [r7, #4]
 802ee18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802ee1a:	f043 0210 	orr.w	r2, r3, #16
 802ee1e:	687b      	ldr	r3, [r7, #4]
 802ee20:	651a      	str	r2, [r3, #80]	; 0x50
          hcryp->State = HAL_CRYP_STATE_READY;
 802ee22:	687b      	ldr	r3, [r7, #4]
 802ee24:	2201      	movs	r2, #1
 802ee26:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 802ee2a:	687b      	ldr	r3, [r7, #4]
 802ee2c:	2200      	movs	r2, #0
 802ee2e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
          return HAL_ERROR;
 802ee32:	2301      	movs	r3, #1
 802ee34:	e08b      	b.n	802ef4e <CRYP_GCMCCM_SetHeaderPhase+0x350>
        }
        /* Clear CCF flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 802ee36:	687b      	ldr	r3, [r7, #4]
 802ee38:	681b      	ldr	r3, [r3, #0]
 802ee3a:	681a      	ldr	r2, [r3, #0]
 802ee3c:	687b      	ldr	r3, [r7, #4]
 802ee3e:	681b      	ldr	r3, [r3, #0]
 802ee40:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802ee44:	601a      	str	r2, [r3, #0]
      for (loopcounter = 0U; (loopcounter < ((hcryp->Init.HeaderSize) - (hcryp->Init.HeaderSize % 4U))); loopcounter += 4U)
 802ee46:	68fb      	ldr	r3, [r7, #12]
 802ee48:	3304      	adds	r3, #4
 802ee4a:	60fb      	str	r3, [r7, #12]
 802ee4c:	687b      	ldr	r3, [r7, #4]
 802ee4e:	69db      	ldr	r3, [r3, #28]
 802ee50:	f023 0303 	bic.w	r3, r3, #3
 802ee54:	68fa      	ldr	r2, [r7, #12]
 802ee56:	429a      	cmp	r2, r3
 802ee58:	d386      	bcc.n	802ed68 <CRYP_GCMCCM_SetHeaderPhase+0x16a>
      }
      /*  Last block optionally pad the data with zeros*/
      for (loopcounter = 0U; (loopcounter < (hcryp->Init.HeaderSize % 4U)); loopcounter++)
 802ee5a:	2300      	movs	r3, #0
 802ee5c:	60fb      	str	r3, [r7, #12]
 802ee5e:	e014      	b.n	802ee8a <CRYP_GCMCCM_SetHeaderPhase+0x28c>
      {
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 802ee60:	687b      	ldr	r3, [r7, #4]
 802ee62:	699a      	ldr	r2, [r3, #24]
 802ee64:	687b      	ldr	r3, [r7, #4]
 802ee66:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802ee68:	b29b      	uxth	r3, r3
 802ee6a:	009b      	lsls	r3, r3, #2
 802ee6c:	441a      	add	r2, r3
 802ee6e:	687b      	ldr	r3, [r7, #4]
 802ee70:	681b      	ldr	r3, [r3, #0]
 802ee72:	6812      	ldr	r2, [r2, #0]
 802ee74:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 802ee76:	687b      	ldr	r3, [r7, #4]
 802ee78:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802ee7a:	b29b      	uxth	r3, r3
 802ee7c:	3301      	adds	r3, #1
 802ee7e:	b29a      	uxth	r2, r3
 802ee80:	687b      	ldr	r3, [r7, #4]
 802ee82:	871a      	strh	r2, [r3, #56]	; 0x38
      for (loopcounter = 0U; (loopcounter < (hcryp->Init.HeaderSize % 4U)); loopcounter++)
 802ee84:	68fb      	ldr	r3, [r7, #12]
 802ee86:	3301      	adds	r3, #1
 802ee88:	60fb      	str	r3, [r7, #12]
 802ee8a:	687b      	ldr	r3, [r7, #4]
 802ee8c:	69db      	ldr	r3, [r3, #28]
 802ee8e:	f003 0303 	and.w	r3, r3, #3
 802ee92:	68fa      	ldr	r2, [r7, #12]
 802ee94:	429a      	cmp	r2, r3
 802ee96:	d3e3      	bcc.n	802ee60 <CRYP_GCMCCM_SetHeaderPhase+0x262>
      }
      while (loopcounter < 4U)
 802ee98:	e006      	b.n	802eea8 <CRYP_GCMCCM_SetHeaderPhase+0x2aa>
      {
        /*Pad the data with zeros to have a complete block */
        hcryp->Instance->DINR = 0x0U;
 802ee9a:	687b      	ldr	r3, [r7, #4]
 802ee9c:	681b      	ldr	r3, [r3, #0]
 802ee9e:	2200      	movs	r2, #0
 802eea0:	609a      	str	r2, [r3, #8]
        loopcounter++;
 802eea2:	68fb      	ldr	r3, [r7, #12]
 802eea4:	3301      	adds	r3, #1
 802eea6:	60fb      	str	r3, [r7, #12]
      while (loopcounter < 4U)
 802eea8:	68fb      	ldr	r3, [r7, #12]
 802eeaa:	2b03      	cmp	r3, #3
 802eeac:	d9f5      	bls.n	802ee9a <CRYP_GCMCCM_SetHeaderPhase+0x29c>
      }

      if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 802eeae:	6839      	ldr	r1, [r7, #0]
 802eeb0:	6878      	ldr	r0, [r7, #4]
 802eeb2:	f000 faed 	bl	802f490 <CRYP_WaitOnCCFlag>
 802eeb6:	4603      	mov	r3, r0
 802eeb8:	2b00      	cmp	r3, #0
 802eeba:	d017      	beq.n	802eeec <CRYP_GCMCCM_SetHeaderPhase+0x2ee>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 802eebc:	687b      	ldr	r3, [r7, #4]
 802eebe:	681b      	ldr	r3, [r3, #0]
 802eec0:	681a      	ldr	r2, [r3, #0]
 802eec2:	687b      	ldr	r3, [r7, #4]
 802eec4:	681b      	ldr	r3, [r3, #0]
 802eec6:	f022 0201 	bic.w	r2, r2, #1
 802eeca:	601a      	str	r2, [r3, #0]

        /* Change state */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 802eecc:	687b      	ldr	r3, [r7, #4]
 802eece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802eed0:	f043 0210 	orr.w	r2, r3, #16
 802eed4:	687b      	ldr	r3, [r7, #4]
 802eed6:	651a      	str	r2, [r3, #80]	; 0x50
        hcryp->State = HAL_CRYP_STATE_READY;
 802eed8:	687b      	ldr	r3, [r7, #4]
 802eeda:	2201      	movs	r2, #1
 802eedc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 802eee0:	687b      	ldr	r3, [r7, #4]
 802eee2:	2200      	movs	r2, #0
 802eee4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        return HAL_ERROR;
 802eee8:	2301      	movs	r3, #1
 802eeea:	e030      	b.n	802ef4e <CRYP_GCMCCM_SetHeaderPhase+0x350>
      }
      /* Clear CCF flag */
      __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 802eeec:	687b      	ldr	r3, [r7, #4]
 802eeee:	681b      	ldr	r3, [r3, #0]
 802eef0:	681a      	ldr	r2, [r3, #0]
 802eef2:	687b      	ldr	r3, [r7, #4]
 802eef4:	681b      	ldr	r3, [r3, #0]
 802eef6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802eefa:	601a      	str	r2, [r3, #0]
 802eefc:	e026      	b.n	802ef4c <CRYP_GCMCCM_SetHeaderPhase+0x34e>
#endif /* End AES or CRYP */
  }
  else
  {
#if defined(AES)
    if (hcryp->Init.Algorithm == CRYP_AES_GCM_GMAC)
 802eefe:	687b      	ldr	r3, [r7, #4]
 802ef00:	695b      	ldr	r3, [r3, #20]
 802ef02:	2b60      	cmp	r3, #96	; 0x60
 802ef04:	d122      	bne.n	802ef4c <CRYP_GCMCCM_SetHeaderPhase+0x34e>
    {
      /*Workaround 1: only AES, before re-enabling the IP, datatype can be configured.*/
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE, hcryp->Init.DataType);
 802ef06:	687b      	ldr	r3, [r7, #4]
 802ef08:	681b      	ldr	r3, [r3, #0]
 802ef0a:	681b      	ldr	r3, [r3, #0]
 802ef0c:	f023 0106 	bic.w	r1, r3, #6
 802ef10:	687b      	ldr	r3, [r7, #4]
 802ef12:	685a      	ldr	r2, [r3, #4]
 802ef14:	687b      	ldr	r3, [r7, #4]
 802ef16:	681b      	ldr	r3, [r3, #0]
 802ef18:	430a      	orrs	r2, r1
 802ef1a:	601a      	str	r2, [r3, #0]

      /* Select header phase */
      CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 802ef1c:	687b      	ldr	r3, [r7, #4]
 802ef1e:	681b      	ldr	r3, [r3, #0]
 802ef20:	681a      	ldr	r2, [r3, #0]
 802ef22:	687b      	ldr	r3, [r7, #4]
 802ef24:	681b      	ldr	r3, [r3, #0]
 802ef26:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 802ef2a:	601a      	str	r2, [r3, #0]
 802ef2c:	687b      	ldr	r3, [r7, #4]
 802ef2e:	681b      	ldr	r3, [r3, #0]
 802ef30:	681a      	ldr	r2, [r3, #0]
 802ef32:	687b      	ldr	r3, [r7, #4]
 802ef34:	681b      	ldr	r3, [r3, #0]
 802ef36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 802ef3a:	601a      	str	r2, [r3, #0]

      /* Enable the CRYP peripheral */
      __HAL_CRYP_ENABLE(hcryp);
 802ef3c:	687b      	ldr	r3, [r7, #4]
 802ef3e:	681b      	ldr	r3, [r3, #0]
 802ef40:	681a      	ldr	r2, [r3, #0]
 802ef42:	687b      	ldr	r3, [r7, #4]
 802ef44:	681b      	ldr	r3, [r3, #0]
 802ef46:	f042 0201 	orr.w	r2, r2, #1
 802ef4a:	601a      	str	r2, [r3, #0]
    }
#endif /* AES */
  }
  /* Return function status */
  return HAL_OK;
 802ef4c:	2300      	movs	r3, #0
}
 802ef4e:	4618      	mov	r0, r3
 802ef50:	3710      	adds	r7, #16
 802ef52:	46bd      	mov	sp, r7
 802ef54:	bd80      	pop	{r7, pc}
	...

0802ef58 <CRYP_Workaround>:
  *         the configuration information for CRYP module
  * @param  Timeout: specify Timeout value
  * @retval None
  */
static void CRYP_Workaround(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 802ef58:	b580      	push	{r7, lr}
 802ef5a:	b098      	sub	sp, #96	; 0x60
 802ef5c:	af00      	add	r7, sp, #0
 802ef5e:	6078      	str	r0, [r7, #4]
 802ef60:	6039      	str	r1, [r7, #0]
#if defined(CRYP)
  uint32_t  iv1temp;
  uint32_t  temp[4] = {0};
  uint32_t  temp2[4] = {0};
#endif /* CRYP */
  uint32_t intermediate_data[4] = {0};
 802ef62:	f107 0308 	add.w	r3, r7, #8
 802ef66:	2200      	movs	r2, #0
 802ef68:	601a      	str	r2, [r3, #0]
 802ef6a:	605a      	str	r2, [r3, #4]
 802ef6c:	609a      	str	r2, [r3, #8]
 802ef6e:	60da      	str	r2, [r3, #12]
  uint32_t index;

  /* Compute the number of padding bytes in last block of payload */
  npblb = ((((uint32_t)(hcryp->Size) / 16U) + 1U) * 16U) - (uint32_t)(hcryp->Size);
 802ef70:	687b      	ldr	r3, [r7, #4]
 802ef72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802ef74:	091b      	lsrs	r3, r3, #4
 802ef76:	b29b      	uxth	r3, r3
 802ef78:	3301      	adds	r3, #1
 802ef7a:	011b      	lsls	r3, r3, #4
 802ef7c:	687a      	ldr	r2, [r7, #4]
 802ef7e:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
 802ef80:	1a9b      	subs	r3, r3, r2
 802ef82:	657b      	str	r3, [r7, #84]	; 0x54

  /* Number of valid words (lastwordsize) in last block */
  if ((npblb % 4U) == 0U)
 802ef84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ef86:	f003 0303 	and.w	r3, r3, #3
 802ef8a:	2b00      	cmp	r3, #0
 802ef8c:	d105      	bne.n	802ef9a <CRYP_Workaround+0x42>
  {
    lastwordsize = (16U - npblb) / 4U;
 802ef8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ef90:	f1c3 0310 	rsb	r3, r3, #16
 802ef94:	089b      	lsrs	r3, r3, #2
 802ef96:	65fb      	str	r3, [r7, #92]	; 0x5c
 802ef98:	e005      	b.n	802efa6 <CRYP_Workaround+0x4e>
  }
  else
  {
    lastwordsize = ((16U - npblb) / 4U) + 1U;
 802ef9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ef9c:	f1c3 0310 	rsb	r3, r3, #16
 802efa0:	089b      	lsrs	r3, r3, #2
 802efa2:	3301      	adds	r3, #1
 802efa4:	65fb      	str	r3, [r7, #92]	; 0x5c
#else /* AES */

  /*Workaround 2: case GCM encryption, during payload phase and before inserting
  the last block of paylaod, which size is inferior to  128 bits  */

  if ((hcryp->Instance->CR & AES_CR_MODE) == CRYP_OPERATINGMODE_ENCRYPT)
 802efa6:	687b      	ldr	r3, [r7, #4]
 802efa8:	681b      	ldr	r3, [r3, #0]
 802efaa:	681b      	ldr	r3, [r3, #0]
 802efac:	f003 0318 	and.w	r3, r3, #24
 802efb0:	2b00      	cmp	r3, #0
 802efb2:	d10b      	bne.n	802efcc <CRYP_Workaround+0x74>
  {
    /* configured  CHMOD CTR   */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_CHMOD, CRYP_AES_CTR);
 802efb4:	687b      	ldr	r3, [r7, #4]
 802efb6:	681b      	ldr	r3, [r3, #0]
 802efb8:	681b      	ldr	r3, [r3, #0]
 802efba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802efbe:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 802efc2:	687a      	ldr	r2, [r7, #4]
 802efc4:	6812      	ldr	r2, [r2, #0]
 802efc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802efca:	6013      	str	r3, [r2, #0]
  }
  /*  last block optionally pad the data with zeros*/
  for (index = 0U; index < lastwordsize; index ++)
 802efcc:	2300      	movs	r3, #0
 802efce:	65bb      	str	r3, [r7, #88]	; 0x58
 802efd0:	e014      	b.n	802effc <CRYP_Workaround+0xa4>
  {
    /* Write the last Input block in the IN FIFO */
    hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 802efd2:	687b      	ldr	r3, [r7, #4]
 802efd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802efd6:	687b      	ldr	r3, [r7, #4]
 802efd8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 802efda:	b29b      	uxth	r3, r3
 802efdc:	009b      	lsls	r3, r3, #2
 802efde:	441a      	add	r2, r3
 802efe0:	687b      	ldr	r3, [r7, #4]
 802efe2:	681b      	ldr	r3, [r3, #0]
 802efe4:	6812      	ldr	r2, [r2, #0]
 802efe6:	609a      	str	r2, [r3, #8]
    hcryp->CrypInCount++;
 802efe8:	687b      	ldr	r3, [r7, #4]
 802efea:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 802efec:	b29b      	uxth	r3, r3
 802efee:	3301      	adds	r3, #1
 802eff0:	b29a      	uxth	r2, r3
 802eff2:	687b      	ldr	r3, [r7, #4]
 802eff4:	875a      	strh	r2, [r3, #58]	; 0x3a
  for (index = 0U; index < lastwordsize; index ++)
 802eff6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802eff8:	3301      	adds	r3, #1
 802effa:	65bb      	str	r3, [r7, #88]	; 0x58
 802effc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 802effe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f000:	429a      	cmp	r2, r3
 802f002:	d3e6      	bcc.n	802efd2 <CRYP_Workaround+0x7a>
  }
  while (index < 4U)
 802f004:	e006      	b.n	802f014 <CRYP_Workaround+0xbc>
  {
    /* pad the data with zeros to have a complete block */
    hcryp->Instance->DINR  = 0U;
 802f006:	687b      	ldr	r3, [r7, #4]
 802f008:	681b      	ldr	r3, [r3, #0]
 802f00a:	2200      	movs	r2, #0
 802f00c:	609a      	str	r2, [r3, #8]
    index++;
 802f00e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802f010:	3301      	adds	r3, #1
 802f012:	65bb      	str	r3, [r7, #88]	; 0x58
  while (index < 4U)
 802f014:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802f016:	2b03      	cmp	r3, #3
 802f018:	d9f5      	bls.n	802f006 <CRYP_Workaround+0xae>
  }
  /* Wait for CCF flag to be raised */
  if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 802f01a:	6839      	ldr	r1, [r7, #0]
 802f01c:	6878      	ldr	r0, [r7, #4]
 802f01e:	f000 fa37 	bl	802f490 <CRYP_WaitOnCCFlag>
 802f022:	4603      	mov	r3, r0
 802f024:	2b00      	cmp	r3, #0
 802f026:	d00a      	beq.n	802f03e <CRYP_Workaround+0xe6>
  {
    hcryp->State = HAL_CRYP_STATE_READY;
 802f028:	687b      	ldr	r3, [r7, #4]
 802f02a:	2201      	movs	r2, #1
 802f02c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    __HAL_UNLOCK(hcryp);
 802f030:	687b      	ldr	r3, [r7, #4]
 802f032:	2200      	movs	r2, #0
 802f034:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1U)
    /*Call registered error callback*/
    hcryp->ErrorCallback(hcryp);
#else
    /*Call legacy weak error callback*/
    HAL_CRYP_ErrorCallback(hcryp);
 802f038:	6878      	ldr	r0, [r7, #4]
 802f03a:	f7fe ffc1 	bl	802dfc0 <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
  }

  /* Clear CCF Flag */
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 802f03e:	687b      	ldr	r3, [r7, #4]
 802f040:	681b      	ldr	r3, [r3, #0]
 802f042:	681a      	ldr	r2, [r3, #0]
 802f044:	687b      	ldr	r3, [r7, #4]
 802f046:	681b      	ldr	r3, [r3, #0]
 802f048:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802f04c:	601a      	str	r2, [r3, #0]

  for (index = 0U; index < 4U; index++)
 802f04e:	2300      	movs	r3, #0
 802f050:	65bb      	str	r3, [r7, #88]	; 0x58
 802f052:	e022      	b.n	802f09a <CRYP_Workaround+0x142>
  {
    /* Read the Output block from the Output FIFO */
    intermediate_data[index] = hcryp->Instance->DOUTR;
 802f054:	687b      	ldr	r3, [r7, #4]
 802f056:	681b      	ldr	r3, [r3, #0]
 802f058:	68da      	ldr	r2, [r3, #12]
 802f05a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802f05c:	009b      	lsls	r3, r3, #2
 802f05e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 802f062:	440b      	add	r3, r1
 802f064:	f843 2c58 	str.w	r2, [r3, #-88]

    /*intermediate data buffer to be used in  the workaround*/
    *(uint32_t *)(hcryp->pCrypOutBuffPtr + (hcryp->CrypOutCount)) = intermediate_data[index];
 802f068:	687b      	ldr	r3, [r7, #4]
 802f06a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802f06c:	687b      	ldr	r3, [r7, #4]
 802f06e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 802f070:	b29b      	uxth	r3, r3
 802f072:	009b      	lsls	r3, r3, #2
 802f074:	441a      	add	r2, r3
 802f076:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802f078:	009b      	lsls	r3, r3, #2
 802f07a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 802f07e:	440b      	add	r3, r1
 802f080:	f853 3c58 	ldr.w	r3, [r3, #-88]
 802f084:	6013      	str	r3, [r2, #0]
    hcryp->CrypOutCount++;
 802f086:	687b      	ldr	r3, [r7, #4]
 802f088:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 802f08a:	b29b      	uxth	r3, r3
 802f08c:	3301      	adds	r3, #1
 802f08e:	b29a      	uxth	r2, r3
 802f090:	687b      	ldr	r3, [r7, #4]
 802f092:	879a      	strh	r2, [r3, #60]	; 0x3c
  for (index = 0U; index < 4U; index++)
 802f094:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802f096:	3301      	adds	r3, #1
 802f098:	65bb      	str	r3, [r7, #88]	; 0x58
 802f09a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802f09c:	2b03      	cmp	r3, #3
 802f09e:	d9d9      	bls.n	802f054 <CRYP_Workaround+0xfc>
  }

  if ((hcryp->Instance->CR & AES_CR_MODE) == CRYP_OPERATINGMODE_ENCRYPT)
 802f0a0:	687b      	ldr	r3, [r7, #4]
 802f0a2:	681b      	ldr	r3, [r3, #0]
 802f0a4:	681b      	ldr	r3, [r3, #0]
 802f0a6:	f003 0318 	and.w	r3, r3, #24
 802f0aa:	2b00      	cmp	r3, #0
 802f0ac:	f040 81ea 	bne.w	802f484 <CRYP_Workaround+0x52c>
  {
    /* configured  CHMOD GCM   */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_CHMOD, CRYP_AES_GCM_GMAC);
 802f0b0:	687b      	ldr	r3, [r7, #4]
 802f0b2:	681b      	ldr	r3, [r3, #0]
 802f0b4:	681b      	ldr	r3, [r3, #0]
 802f0b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802f0ba:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 802f0be:	687a      	ldr	r2, [r7, #4]
 802f0c0:	6812      	ldr	r2, [r2, #0]
 802f0c2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 802f0c6:	6013      	str	r3, [r2, #0]

    /* Select final phase */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, CRYP_PHASE_FINAL);
 802f0c8:	687b      	ldr	r3, [r7, #4]
 802f0ca:	681b      	ldr	r3, [r3, #0]
 802f0cc:	681a      	ldr	r2, [r3, #0]
 802f0ce:	687b      	ldr	r3, [r7, #4]
 802f0d0:	681b      	ldr	r3, [r3, #0]
 802f0d2:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 802f0d6:	601a      	str	r2, [r3, #0]

    if ((hcryp->Instance->CR & AES_CR_DATATYPE) == CRYP_DATATYPE_32B)
 802f0d8:	687b      	ldr	r3, [r7, #4]
 802f0da:	681b      	ldr	r3, [r3, #0]
 802f0dc:	681b      	ldr	r3, [r3, #0]
 802f0de:	f003 0306 	and.w	r3, r3, #6
 802f0e2:	2b00      	cmp	r3, #0
 802f0e4:	d146      	bne.n	802f174 <CRYP_Workaround+0x21c>
    {
      if ((npblb % 4U) == 1U)
 802f0e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802f0e8:	f003 0303 	and.w	r3, r3, #3
 802f0ec:	2b01      	cmp	r3, #1
 802f0ee:	d111      	bne.n	802f114 <CRYP_Workaround+0x1bc>
      {
        intermediate_data[lastwordsize - 1U] &= 0xFFFFFF00U;
 802f0f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f0f2:	3b01      	subs	r3, #1
 802f0f4:	009b      	lsls	r3, r3, #2
 802f0f6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 802f0fa:	4413      	add	r3, r2
 802f0fc:	f853 2c58 	ldr.w	r2, [r3, #-88]
 802f100:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f102:	3b01      	subs	r3, #1
 802f104:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 802f108:	009b      	lsls	r3, r3, #2
 802f10a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 802f10e:	440b      	add	r3, r1
 802f110:	f843 2c58 	str.w	r2, [r3, #-88]
      }
      if ((npblb % 4U) == 2U)
 802f114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802f116:	f003 0303 	and.w	r3, r3, #3
 802f11a:	2b02      	cmp	r3, #2
 802f11c:	d111      	bne.n	802f142 <CRYP_Workaround+0x1ea>
      {
        intermediate_data[lastwordsize - 1U] &= 0xFFFF0000U;
 802f11e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f120:	3b01      	subs	r3, #1
 802f122:	009b      	lsls	r3, r3, #2
 802f124:	f107 0260 	add.w	r2, r7, #96	; 0x60
 802f128:	4413      	add	r3, r2
 802f12a:	f853 2c58 	ldr.w	r2, [r3, #-88]
 802f12e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f130:	3b01      	subs	r3, #1
 802f132:	0c12      	lsrs	r2, r2, #16
 802f134:	0412      	lsls	r2, r2, #16
 802f136:	009b      	lsls	r3, r3, #2
 802f138:	f107 0160 	add.w	r1, r7, #96	; 0x60
 802f13c:	440b      	add	r3, r1
 802f13e:	f843 2c58 	str.w	r2, [r3, #-88]
      }
      if ((npblb % 4U) == 3U)
 802f142:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802f144:	f003 0303 	and.w	r3, r3, #3
 802f148:	2b03      	cmp	r3, #3
 802f14a:	f040 8141 	bne.w	802f3d0 <CRYP_Workaround+0x478>
      {
        intermediate_data[lastwordsize - 1U] &= 0xFF000000U;
 802f14e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f150:	3b01      	subs	r3, #1
 802f152:	009b      	lsls	r3, r3, #2
 802f154:	f107 0260 	add.w	r2, r7, #96	; 0x60
 802f158:	4413      	add	r3, r2
 802f15a:	f853 2c58 	ldr.w	r2, [r3, #-88]
 802f15e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f160:	3b01      	subs	r3, #1
 802f162:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 802f166:	009b      	lsls	r3, r3, #2
 802f168:	f107 0160 	add.w	r1, r7, #96	; 0x60
 802f16c:	440b      	add	r3, r1
 802f16e:	f843 2c58 	str.w	r2, [r3, #-88]
 802f172:	e12d      	b.n	802f3d0 <CRYP_Workaround+0x478>
      }
    }
    else if ((hcryp->Instance->CR & AES_CR_DATATYPE) == CRYP_DATATYPE_8B)
 802f174:	687b      	ldr	r3, [r7, #4]
 802f176:	681b      	ldr	r3, [r3, #0]
 802f178:	681b      	ldr	r3, [r3, #0]
 802f17a:	f003 0306 	and.w	r3, r3, #6
 802f17e:	2b04      	cmp	r3, #4
 802f180:	d151      	bne.n	802f226 <CRYP_Workaround+0x2ce>
    {
      if ((npblb % 4U) == 1U)
 802f182:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802f184:	f003 0303 	and.w	r3, r3, #3
 802f188:	2b01      	cmp	r3, #1
 802f18a:	d115      	bne.n	802f1b8 <CRYP_Workaround+0x260>
 802f18c:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 802f190:	653b      	str	r3, [r7, #80]	; 0x50
  \return               Reversed value
 */
__STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
  return __builtin_bswap32(value);
 802f192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802f194:	ba19      	rev	r1, r3
      {
        intermediate_data[lastwordsize - 1U] &= __REV(0xFFFFFF00U);
 802f196:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f198:	3b01      	subs	r3, #1
 802f19a:	009b      	lsls	r3, r3, #2
 802f19c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 802f1a0:	4413      	add	r3, r2
 802f1a2:	f853 2c58 	ldr.w	r2, [r3, #-88]
 802f1a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f1a8:	3b01      	subs	r3, #1
 802f1aa:	400a      	ands	r2, r1
 802f1ac:	009b      	lsls	r3, r3, #2
 802f1ae:	f107 0160 	add.w	r1, r7, #96	; 0x60
 802f1b2:	440b      	add	r3, r1
 802f1b4:	f843 2c58 	str.w	r2, [r3, #-88]
      }
      if ((npblb % 4U) == 2U)
 802f1b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802f1ba:	f003 0303 	and.w	r3, r3, #3
 802f1be:	2b02      	cmp	r3, #2
 802f1c0:	d114      	bne.n	802f1ec <CRYP_Workaround+0x294>
 802f1c2:	4bb2      	ldr	r3, [pc, #712]	; (802f48c <CRYP_Workaround+0x534>)
 802f1c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 802f1c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802f1c8:	ba19      	rev	r1, r3
      {
        intermediate_data[lastwordsize - 1U] &= __REV(0xFFFF0000U);
 802f1ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f1cc:	3b01      	subs	r3, #1
 802f1ce:	009b      	lsls	r3, r3, #2
 802f1d0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 802f1d4:	4413      	add	r3, r2
 802f1d6:	f853 2c58 	ldr.w	r2, [r3, #-88]
 802f1da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f1dc:	3b01      	subs	r3, #1
 802f1de:	400a      	ands	r2, r1
 802f1e0:	009b      	lsls	r3, r3, #2
 802f1e2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 802f1e6:	440b      	add	r3, r1
 802f1e8:	f843 2c58 	str.w	r2, [r3, #-88]
      }
      if ((npblb % 4U) == 3U)
 802f1ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802f1ee:	f003 0303 	and.w	r3, r3, #3
 802f1f2:	2b03      	cmp	r3, #3
 802f1f4:	f040 80ec 	bne.w	802f3d0 <CRYP_Workaround+0x478>
 802f1f8:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 802f1fc:	64bb      	str	r3, [r7, #72]	; 0x48
 802f1fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802f200:	ba19      	rev	r1, r3
      {
        intermediate_data[lastwordsize - 1U] &= __REV(0xFF000000U);
 802f202:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f204:	3b01      	subs	r3, #1
 802f206:	009b      	lsls	r3, r3, #2
 802f208:	f107 0260 	add.w	r2, r7, #96	; 0x60
 802f20c:	4413      	add	r3, r2
 802f20e:	f853 2c58 	ldr.w	r2, [r3, #-88]
 802f212:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f214:	3b01      	subs	r3, #1
 802f216:	400a      	ands	r2, r1
 802f218:	009b      	lsls	r3, r3, #2
 802f21a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 802f21e:	440b      	add	r3, r1
 802f220:	f843 2c58 	str.w	r2, [r3, #-88]
 802f224:	e0d4      	b.n	802f3d0 <CRYP_Workaround+0x478>
      }
    }
    else if ((hcryp->Instance->CR & AES_CR_DATATYPE) == CRYP_DATATYPE_16B)
 802f226:	687b      	ldr	r3, [r7, #4]
 802f228:	681b      	ldr	r3, [r3, #0]
 802f22a:	681b      	ldr	r3, [r3, #0]
 802f22c:	f003 0306 	and.w	r3, r3, #6
 802f230:	2b02      	cmp	r3, #2
 802f232:	d174      	bne.n	802f31e <CRYP_Workaround+0x3c6>
    {
      if ((npblb % 4U) == 1U)
 802f234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802f236:	f003 0303 	and.w	r3, r3, #3
 802f23a:	2b01      	cmp	r3, #1
 802f23c:	d121      	bne.n	802f282 <CRYP_Workaround+0x32a>
 802f23e:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 802f242:	647b      	str	r3, [r7, #68]	; 0x44
 802f244:	2310      	movs	r3, #16
 802f246:	643b      	str	r3, [r7, #64]	; 0x40
  \param [in]    op2  Number of Bits to rotate
  \return               Rotated value
 */
__STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
{
  op2 %= 32U;
 802f248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802f24a:	f003 031f 	and.w	r3, r3, #31
 802f24e:	643b      	str	r3, [r7, #64]	; 0x40
  if (op2 == 0U)
 802f250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802f252:	2b00      	cmp	r3, #0
 802f254:	d101      	bne.n	802f25a <CRYP_Workaround+0x302>
  {
    return op1;
 802f256:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802f258:	e002      	b.n	802f260 <CRYP_Workaround+0x308>
  }
  return (op1 >> op2) | (op1 << (32U - op2));
 802f25a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802f25c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802f25e:	41da      	rors	r2, r3
      {
        intermediate_data[lastwordsize - 1U] &= __ROR((0xFFFFFF00U), 16);
 802f260:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f262:	3b01      	subs	r3, #1
 802f264:	009b      	lsls	r3, r3, #2
 802f266:	f107 0160 	add.w	r1, r7, #96	; 0x60
 802f26a:	440b      	add	r3, r1
 802f26c:	f853 1c58 	ldr.w	r1, [r3, #-88]
 802f270:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f272:	3b01      	subs	r3, #1
 802f274:	400a      	ands	r2, r1
 802f276:	009b      	lsls	r3, r3, #2
 802f278:	f107 0160 	add.w	r1, r7, #96	; 0x60
 802f27c:	440b      	add	r3, r1
 802f27e:	f843 2c58 	str.w	r2, [r3, #-88]
      }
      if ((npblb % 4U) == 2U)
 802f282:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802f284:	f003 0303 	and.w	r3, r3, #3
 802f288:	2b02      	cmp	r3, #2
 802f28a:	d120      	bne.n	802f2ce <CRYP_Workaround+0x376>
 802f28c:	4b7f      	ldr	r3, [pc, #508]	; (802f48c <CRYP_Workaround+0x534>)
 802f28e:	63fb      	str	r3, [r7, #60]	; 0x3c
 802f290:	2310      	movs	r3, #16
 802f292:	63bb      	str	r3, [r7, #56]	; 0x38
  op2 %= 32U;
 802f294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802f296:	f003 031f 	and.w	r3, r3, #31
 802f29a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (op2 == 0U)
 802f29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802f29e:	2b00      	cmp	r3, #0
 802f2a0:	d101      	bne.n	802f2a6 <CRYP_Workaround+0x34e>
    return op1;
 802f2a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802f2a4:	e002      	b.n	802f2ac <CRYP_Workaround+0x354>
  return (op1 >> op2) | (op1 << (32U - op2));
 802f2a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802f2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802f2aa:	41da      	rors	r2, r3
      {
        intermediate_data[lastwordsize - 1U] &= __ROR((0xFFFF0000U), 16);
 802f2ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f2ae:	3b01      	subs	r3, #1
 802f2b0:	009b      	lsls	r3, r3, #2
 802f2b2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 802f2b6:	440b      	add	r3, r1
 802f2b8:	f853 1c58 	ldr.w	r1, [r3, #-88]
 802f2bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f2be:	3b01      	subs	r3, #1
 802f2c0:	400a      	ands	r2, r1
 802f2c2:	009b      	lsls	r3, r3, #2
 802f2c4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 802f2c8:	440b      	add	r3, r1
 802f2ca:	f843 2c58 	str.w	r2, [r3, #-88]
      }
      if ((npblb % 4U) == 3U)
 802f2ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802f2d0:	f003 0303 	and.w	r3, r3, #3
 802f2d4:	2b03      	cmp	r3, #3
 802f2d6:	d17b      	bne.n	802f3d0 <CRYP_Workaround+0x478>
 802f2d8:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 802f2dc:	637b      	str	r3, [r7, #52]	; 0x34
 802f2de:	2310      	movs	r3, #16
 802f2e0:	633b      	str	r3, [r7, #48]	; 0x30
  op2 %= 32U;
 802f2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802f2e4:	f003 031f 	and.w	r3, r3, #31
 802f2e8:	633b      	str	r3, [r7, #48]	; 0x30
  if (op2 == 0U)
 802f2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802f2ec:	2b00      	cmp	r3, #0
 802f2ee:	d101      	bne.n	802f2f4 <CRYP_Workaround+0x39c>
    return op1;
 802f2f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802f2f2:	e002      	b.n	802f2fa <CRYP_Workaround+0x3a2>
  return (op1 >> op2) | (op1 << (32U - op2));
 802f2f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802f2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802f2f8:	41da      	rors	r2, r3
      {
        intermediate_data[lastwordsize - 1U] &= __ROR((0xFF000000U), 16);
 802f2fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f2fc:	3b01      	subs	r3, #1
 802f2fe:	009b      	lsls	r3, r3, #2
 802f300:	f107 0160 	add.w	r1, r7, #96	; 0x60
 802f304:	440b      	add	r3, r1
 802f306:	f853 1c58 	ldr.w	r1, [r3, #-88]
 802f30a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f30c:	3b01      	subs	r3, #1
 802f30e:	400a      	ands	r2, r1
 802f310:	009b      	lsls	r3, r3, #2
 802f312:	f107 0160 	add.w	r1, r7, #96	; 0x60
 802f316:	440b      	add	r3, r1
 802f318:	f843 2c58 	str.w	r2, [r3, #-88]
 802f31c:	e058      	b.n	802f3d0 <CRYP_Workaround+0x478>
      }
    }
    else /*CRYP_DATATYPE_1B*/
    {
      if ((npblb % 4U) == 1U)
 802f31e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802f320:	f003 0303 	and.w	r3, r3, #3
 802f324:	2b01      	cmp	r3, #1
 802f326:	d118      	bne.n	802f35a <CRYP_Workaround+0x402>
 802f328:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 802f32c:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 802f32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f330:	fa93 f3a3 	rbit	r3, r3
 802f334:	62bb      	str	r3, [r7, #40]	; 0x28
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 802f336:	6ab9      	ldr	r1, [r7, #40]	; 0x28
      {
        intermediate_data[lastwordsize - 1U] &= __RBIT(0xFFFFFF00U);
 802f338:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f33a:	3b01      	subs	r3, #1
 802f33c:	009b      	lsls	r3, r3, #2
 802f33e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 802f342:	4413      	add	r3, r2
 802f344:	f853 2c58 	ldr.w	r2, [r3, #-88]
 802f348:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f34a:	3b01      	subs	r3, #1
 802f34c:	400a      	ands	r2, r1
 802f34e:	009b      	lsls	r3, r3, #2
 802f350:	f107 0160 	add.w	r1, r7, #96	; 0x60
 802f354:	440b      	add	r3, r1
 802f356:	f843 2c58 	str.w	r2, [r3, #-88]
      }
      if ((npblb % 4U) == 2U)
 802f35a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802f35c:	f003 0303 	and.w	r3, r3, #3
 802f360:	2b02      	cmp	r3, #2
 802f362:	d117      	bne.n	802f394 <CRYP_Workaround+0x43c>
 802f364:	4b49      	ldr	r3, [pc, #292]	; (802f48c <CRYP_Workaround+0x534>)
 802f366:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 802f368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802f36a:	fa93 f3a3 	rbit	r3, r3
 802f36e:	623b      	str	r3, [r7, #32]
  return result;
 802f370:	6a39      	ldr	r1, [r7, #32]
      {
        intermediate_data[lastwordsize - 1U] &= __RBIT(0xFFFF0000U);
 802f372:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f374:	3b01      	subs	r3, #1
 802f376:	009b      	lsls	r3, r3, #2
 802f378:	f107 0260 	add.w	r2, r7, #96	; 0x60
 802f37c:	4413      	add	r3, r2
 802f37e:	f853 2c58 	ldr.w	r2, [r3, #-88]
 802f382:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f384:	3b01      	subs	r3, #1
 802f386:	400a      	ands	r2, r1
 802f388:	009b      	lsls	r3, r3, #2
 802f38a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 802f38e:	440b      	add	r3, r1
 802f390:	f843 2c58 	str.w	r2, [r3, #-88]
      }
      if ((npblb % 4U) == 3U)
 802f394:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802f396:	f003 0303 	and.w	r3, r3, #3
 802f39a:	2b03      	cmp	r3, #3
 802f39c:	d118      	bne.n	802f3d0 <CRYP_Workaround+0x478>
 802f39e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 802f3a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 802f3a4:	69fb      	ldr	r3, [r7, #28]
 802f3a6:	fa93 f3a3 	rbit	r3, r3
 802f3aa:	61bb      	str	r3, [r7, #24]
  return result;
 802f3ac:	69b9      	ldr	r1, [r7, #24]
      {
        intermediate_data[lastwordsize - 1U] &= __RBIT(0xFF000000U);
 802f3ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f3b0:	3b01      	subs	r3, #1
 802f3b2:	009b      	lsls	r3, r3, #2
 802f3b4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 802f3b8:	4413      	add	r3, r2
 802f3ba:	f853 2c58 	ldr.w	r2, [r3, #-88]
 802f3be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f3c0:	3b01      	subs	r3, #1
 802f3c2:	400a      	ands	r2, r1
 802f3c4:	009b      	lsls	r3, r3, #2
 802f3c6:	f107 0160 	add.w	r1, r7, #96	; 0x60
 802f3ca:	440b      	add	r3, r1
 802f3cc:	f843 2c58 	str.w	r2, [r3, #-88]
      }
    }

    /*Write the intermediate_data in the IN FIFO */
    for (index = 0U; index < lastwordsize; index ++)
 802f3d0:	2300      	movs	r3, #0
 802f3d2:	65bb      	str	r3, [r7, #88]	; 0x58
 802f3d4:	e00c      	b.n	802f3f0 <CRYP_Workaround+0x498>
    {
      hcryp->Instance->DINR  = intermediate_data[index];
 802f3d6:	687b      	ldr	r3, [r7, #4]
 802f3d8:	681a      	ldr	r2, [r3, #0]
 802f3da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802f3dc:	009b      	lsls	r3, r3, #2
 802f3de:	f107 0160 	add.w	r1, r7, #96	; 0x60
 802f3e2:	440b      	add	r3, r1
 802f3e4:	f853 3c58 	ldr.w	r3, [r3, #-88]
 802f3e8:	6093      	str	r3, [r2, #8]
    for (index = 0U; index < lastwordsize; index ++)
 802f3ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802f3ec:	3301      	adds	r3, #1
 802f3ee:	65bb      	str	r3, [r7, #88]	; 0x58
 802f3f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 802f3f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f3f4:	429a      	cmp	r2, r3
 802f3f6:	d3ee      	bcc.n	802f3d6 <CRYP_Workaround+0x47e>
    }
    while (index < 4U)
 802f3f8:	e006      	b.n	802f408 <CRYP_Workaround+0x4b0>
    {
      /* pad the data with zeros to have a complete block */
      hcryp->Instance->DINR = 0U;
 802f3fa:	687b      	ldr	r3, [r7, #4]
 802f3fc:	681b      	ldr	r3, [r3, #0]
 802f3fe:	2200      	movs	r2, #0
 802f400:	609a      	str	r2, [r3, #8]
      index++;
 802f402:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802f404:	3301      	adds	r3, #1
 802f406:	65bb      	str	r3, [r7, #88]	; 0x58
    while (index < 4U)
 802f408:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802f40a:	2b03      	cmp	r3, #3
 802f40c:	d9f5      	bls.n	802f3fa <CRYP_Workaround+0x4a2>
    }
    /* Wait for CCF flag to be raised */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 802f40e:	6839      	ldr	r1, [r7, #0]
 802f410:	6878      	ldr	r0, [r7, #4]
 802f412:	f000 f83d 	bl	802f490 <CRYP_WaitOnCCFlag>
 802f416:	4603      	mov	r3, r0
 802f418:	2b00      	cmp	r3, #0
 802f41a:	d018      	beq.n	802f44e <CRYP_Workaround+0x4f6>
    {
      /* Disable the CRYP peripheral clock */
      __HAL_CRYP_DISABLE(hcryp);
 802f41c:	687b      	ldr	r3, [r7, #4]
 802f41e:	681b      	ldr	r3, [r3, #0]
 802f420:	681a      	ldr	r2, [r3, #0]
 802f422:	687b      	ldr	r3, [r7, #4]
 802f424:	681b      	ldr	r3, [r3, #0]
 802f426:	f022 0201 	bic.w	r2, r2, #1
 802f42a:	601a      	str	r2, [r3, #0]

      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 802f42c:	687b      	ldr	r3, [r7, #4]
 802f42e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802f430:	f043 0210 	orr.w	r2, r3, #16
 802f434:	687b      	ldr	r3, [r7, #4]
 802f436:	651a      	str	r2, [r3, #80]	; 0x50
      hcryp->State = HAL_CRYP_STATE_READY;
 802f438:	687b      	ldr	r3, [r7, #4]
 802f43a:	2201      	movs	r2, #1
 802f43c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

      /* Process Unlocked */
      __HAL_UNLOCK(hcryp);
 802f440:	687b      	ldr	r3, [r7, #4]
 802f442:	2200      	movs	r2, #0
 802f444:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1U)
      /*Call registered error callback*/
      hcryp->ErrorCallback(hcryp);
#else
      /*Call legacy weak error callback*/
      HAL_CRYP_ErrorCallback(hcryp);
 802f448:	6878      	ldr	r0, [r7, #4]
 802f44a:	f7fe fdb9 	bl	802dfc0 <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
    }
    /* Clear CCF Flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 802f44e:	687b      	ldr	r3, [r7, #4]
 802f450:	681b      	ldr	r3, [r3, #0]
 802f452:	681a      	ldr	r2, [r3, #0]
 802f454:	687b      	ldr	r3, [r7, #4]
 802f456:	681b      	ldr	r3, [r3, #0]
 802f458:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802f45c:	601a      	str	r2, [r3, #0]

    for (index = 0U; index < 4U; index++)
 802f45e:	2300      	movs	r3, #0
 802f460:	65bb      	str	r3, [r7, #88]	; 0x58
 802f462:	e00c      	b.n	802f47e <CRYP_Workaround+0x526>
    {
      intermediate_data[index] = hcryp->Instance->DOUTR;
 802f464:	687b      	ldr	r3, [r7, #4]
 802f466:	681b      	ldr	r3, [r3, #0]
 802f468:	68da      	ldr	r2, [r3, #12]
 802f46a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802f46c:	009b      	lsls	r3, r3, #2
 802f46e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 802f472:	440b      	add	r3, r1
 802f474:	f843 2c58 	str.w	r2, [r3, #-88]
    for (index = 0U; index < 4U; index++)
 802f478:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802f47a:	3301      	adds	r3, #1
 802f47c:	65bb      	str	r3, [r7, #88]	; 0x58
 802f47e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802f480:	2b03      	cmp	r3, #3
 802f482:	d9ef      	bls.n	802f464 <CRYP_Workaround+0x50c>
    }
  }/*End of Workaround 2*/
#endif /* End AES or CRYP */
}
 802f484:	bf00      	nop
 802f486:	3760      	adds	r7, #96	; 0x60
 802f488:	46bd      	mov	sp, r7
 802f48a:	bd80      	pop	{r7, pc}
 802f48c:	ffff0000 	.word	0xffff0000

0802f490 <CRYP_WaitOnCCFlag>:
  *         the configuration information for CRYP module.
  * @param  Timeout: Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_WaitOnCCFlag(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 802f490:	b580      	push	{r7, lr}
 802f492:	b084      	sub	sp, #16
 802f494:	af00      	add	r7, sp, #0
 802f496:	6078      	str	r0, [r7, #4]
 802f498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 802f49a:	f7fc ff67 	bl	802c36c <HAL_GetTick>
 802f49e:	60f8      	str	r0, [r7, #12]

  while (HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 802f4a0:	e010      	b.n	802f4c4 <CRYP_WaitOnCCFlag+0x34>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802f4a2:	683b      	ldr	r3, [r7, #0]
 802f4a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 802f4a8:	d00c      	beq.n	802f4c4 <CRYP_WaitOnCCFlag+0x34>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 802f4aa:	f7fc ff5f 	bl	802c36c <HAL_GetTick>
 802f4ae:	4602      	mov	r2, r0
 802f4b0:	68fb      	ldr	r3, [r7, #12]
 802f4b2:	1ad3      	subs	r3, r2, r3
 802f4b4:	683a      	ldr	r2, [r7, #0]
 802f4b6:	429a      	cmp	r2, r3
 802f4b8:	d302      	bcc.n	802f4c0 <CRYP_WaitOnCCFlag+0x30>
 802f4ba:	683b      	ldr	r3, [r7, #0]
 802f4bc:	2b00      	cmp	r3, #0
 802f4be:	d101      	bne.n	802f4c4 <CRYP_WaitOnCCFlag+0x34>
      {
        return HAL_ERROR;
 802f4c0:	2301      	movs	r3, #1
 802f4c2:	e007      	b.n	802f4d4 <CRYP_WaitOnCCFlag+0x44>
  while (HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 802f4c4:	687b      	ldr	r3, [r7, #4]
 802f4c6:	681b      	ldr	r3, [r3, #0]
 802f4c8:	685b      	ldr	r3, [r3, #4]
 802f4ca:	f003 0301 	and.w	r3, r3, #1
 802f4ce:	2b00      	cmp	r3, #0
 802f4d0:	d0e7      	beq.n	802f4a2 <CRYP_WaitOnCCFlag+0x12>
      }
    }
  }
  return HAL_OK;
 802f4d2:	2300      	movs	r3, #0
}
 802f4d4:	4618      	mov	r0, r3
 802f4d6:	3710      	adds	r7, #16
 802f4d8:	46bd      	mov	sp, r7
 802f4da:	bd80      	pop	{r7, pc}

0802f4dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 802f4dc:	b580      	push	{r7, lr}
 802f4de:	b086      	sub	sp, #24
 802f4e0:	af00      	add	r7, sp, #0
 802f4e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 802f4e4:	2300      	movs	r3, #0
 802f4e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 802f4e8:	f7fc ff40 	bl	802c36c <HAL_GetTick>
 802f4ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 802f4ee:	687b      	ldr	r3, [r7, #4]
 802f4f0:	2b00      	cmp	r3, #0
 802f4f2:	d101      	bne.n	802f4f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 802f4f4:	2301      	movs	r3, #1
 802f4f6:	e099      	b.n	802f62c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 802f4f8:	687b      	ldr	r3, [r7, #4]
 802f4fa:	2200      	movs	r2, #0
 802f4fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 802f500:	687b      	ldr	r3, [r7, #4]
 802f502:	2202      	movs	r2, #2
 802f504:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 802f508:	687b      	ldr	r3, [r7, #4]
 802f50a:	681b      	ldr	r3, [r3, #0]
 802f50c:	681a      	ldr	r2, [r3, #0]
 802f50e:	687b      	ldr	r3, [r7, #4]
 802f510:	681b      	ldr	r3, [r3, #0]
 802f512:	f022 0201 	bic.w	r2, r2, #1
 802f516:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 802f518:	e00f      	b.n	802f53a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 802f51a:	f7fc ff27 	bl	802c36c <HAL_GetTick>
 802f51e:	4602      	mov	r2, r0
 802f520:	693b      	ldr	r3, [r7, #16]
 802f522:	1ad3      	subs	r3, r2, r3
 802f524:	2b05      	cmp	r3, #5
 802f526:	d908      	bls.n	802f53a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 802f528:	687b      	ldr	r3, [r7, #4]
 802f52a:	2220      	movs	r2, #32
 802f52c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 802f52e:	687b      	ldr	r3, [r7, #4]
 802f530:	2203      	movs	r2, #3
 802f532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 802f536:	2303      	movs	r3, #3
 802f538:	e078      	b.n	802f62c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 802f53a:	687b      	ldr	r3, [r7, #4]
 802f53c:	681b      	ldr	r3, [r3, #0]
 802f53e:	681b      	ldr	r3, [r3, #0]
 802f540:	f003 0301 	and.w	r3, r3, #1
 802f544:	2b00      	cmp	r3, #0
 802f546:	d1e8      	bne.n	802f51a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 802f548:	687b      	ldr	r3, [r7, #4]
 802f54a:	681b      	ldr	r3, [r3, #0]
 802f54c:	681b      	ldr	r3, [r3, #0]
 802f54e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 802f550:	697a      	ldr	r2, [r7, #20]
 802f552:	4b38      	ldr	r3, [pc, #224]	; (802f634 <HAL_DMA_Init+0x158>)
 802f554:	4013      	ands	r3, r2
 802f556:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 802f558:	687b      	ldr	r3, [r7, #4]
 802f55a:	685a      	ldr	r2, [r3, #4]
 802f55c:	687b      	ldr	r3, [r7, #4]
 802f55e:	689b      	ldr	r3, [r3, #8]
 802f560:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802f562:	687b      	ldr	r3, [r7, #4]
 802f564:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 802f566:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802f568:	687b      	ldr	r3, [r7, #4]
 802f56a:	691b      	ldr	r3, [r3, #16]
 802f56c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802f56e:	687b      	ldr	r3, [r7, #4]
 802f570:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802f572:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802f574:	687b      	ldr	r3, [r7, #4]
 802f576:	699b      	ldr	r3, [r3, #24]
 802f578:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 802f57a:	687b      	ldr	r3, [r7, #4]
 802f57c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802f57e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 802f580:	687b      	ldr	r3, [r7, #4]
 802f582:	6a1b      	ldr	r3, [r3, #32]
 802f584:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 802f586:	697a      	ldr	r2, [r7, #20]
 802f588:	4313      	orrs	r3, r2
 802f58a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 802f58c:	687b      	ldr	r3, [r7, #4]
 802f58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802f590:	2b04      	cmp	r3, #4
 802f592:	d107      	bne.n	802f5a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 802f594:	687b      	ldr	r3, [r7, #4]
 802f596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802f598:	687b      	ldr	r3, [r7, #4]
 802f59a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802f59c:	4313      	orrs	r3, r2
 802f59e:	697a      	ldr	r2, [r7, #20]
 802f5a0:	4313      	orrs	r3, r2
 802f5a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 802f5a4:	687b      	ldr	r3, [r7, #4]
 802f5a6:	681b      	ldr	r3, [r3, #0]
 802f5a8:	697a      	ldr	r2, [r7, #20]
 802f5aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 802f5ac:	687b      	ldr	r3, [r7, #4]
 802f5ae:	681b      	ldr	r3, [r3, #0]
 802f5b0:	695b      	ldr	r3, [r3, #20]
 802f5b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 802f5b4:	697b      	ldr	r3, [r7, #20]
 802f5b6:	f023 0307 	bic.w	r3, r3, #7
 802f5ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 802f5bc:	687b      	ldr	r3, [r7, #4]
 802f5be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802f5c0:	697a      	ldr	r2, [r7, #20]
 802f5c2:	4313      	orrs	r3, r2
 802f5c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 802f5c6:	687b      	ldr	r3, [r7, #4]
 802f5c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802f5ca:	2b04      	cmp	r3, #4
 802f5cc:	d117      	bne.n	802f5fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 802f5ce:	687b      	ldr	r3, [r7, #4]
 802f5d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802f5d2:	697a      	ldr	r2, [r7, #20]
 802f5d4:	4313      	orrs	r3, r2
 802f5d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 802f5d8:	687b      	ldr	r3, [r7, #4]
 802f5da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802f5dc:	2b00      	cmp	r3, #0
 802f5de:	d00e      	beq.n	802f5fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 802f5e0:	6878      	ldr	r0, [r7, #4]
 802f5e2:	f000 fa9f 	bl	802fb24 <DMA_CheckFifoParam>
 802f5e6:	4603      	mov	r3, r0
 802f5e8:	2b00      	cmp	r3, #0
 802f5ea:	d008      	beq.n	802f5fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 802f5ec:	687b      	ldr	r3, [r7, #4]
 802f5ee:	2240      	movs	r2, #64	; 0x40
 802f5f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 802f5f2:	687b      	ldr	r3, [r7, #4]
 802f5f4:	2201      	movs	r2, #1
 802f5f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 802f5fa:	2301      	movs	r3, #1
 802f5fc:	e016      	b.n	802f62c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 802f5fe:	687b      	ldr	r3, [r7, #4]
 802f600:	681b      	ldr	r3, [r3, #0]
 802f602:	697a      	ldr	r2, [r7, #20]
 802f604:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 802f606:	6878      	ldr	r0, [r7, #4]
 802f608:	f000 fa56 	bl	802fab8 <DMA_CalcBaseAndBitshift>
 802f60c:	4603      	mov	r3, r0
 802f60e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 802f610:	687b      	ldr	r3, [r7, #4]
 802f612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802f614:	223f      	movs	r2, #63	; 0x3f
 802f616:	409a      	lsls	r2, r3
 802f618:	68fb      	ldr	r3, [r7, #12]
 802f61a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802f61c:	687b      	ldr	r3, [r7, #4]
 802f61e:	2200      	movs	r2, #0
 802f620:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 802f622:	687b      	ldr	r3, [r7, #4]
 802f624:	2201      	movs	r2, #1
 802f626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 802f62a:	2300      	movs	r3, #0
}
 802f62c:	4618      	mov	r0, r3
 802f62e:	3718      	adds	r7, #24
 802f630:	46bd      	mov	sp, r7
 802f632:	bd80      	pop	{r7, pc}
 802f634:	e010803f 	.word	0xe010803f

0802f638 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 802f638:	b580      	push	{r7, lr}
 802f63a:	b086      	sub	sp, #24
 802f63c:	af00      	add	r7, sp, #0
 802f63e:	60f8      	str	r0, [r7, #12]
 802f640:	60b9      	str	r1, [r7, #8]
 802f642:	607a      	str	r2, [r7, #4]
 802f644:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 802f646:	2300      	movs	r3, #0
 802f648:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802f64a:	68fb      	ldr	r3, [r7, #12]
 802f64c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802f64e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 802f650:	68fb      	ldr	r3, [r7, #12]
 802f652:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 802f656:	2b01      	cmp	r3, #1
 802f658:	d101      	bne.n	802f65e <HAL_DMA_Start_IT+0x26>
 802f65a:	2302      	movs	r3, #2
 802f65c:	e040      	b.n	802f6e0 <HAL_DMA_Start_IT+0xa8>
 802f65e:	68fb      	ldr	r3, [r7, #12]
 802f660:	2201      	movs	r2, #1
 802f662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 802f666:	68fb      	ldr	r3, [r7, #12]
 802f668:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802f66c:	b2db      	uxtb	r3, r3
 802f66e:	2b01      	cmp	r3, #1
 802f670:	d12f      	bne.n	802f6d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 802f672:	68fb      	ldr	r3, [r7, #12]
 802f674:	2202      	movs	r2, #2
 802f676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802f67a:	68fb      	ldr	r3, [r7, #12]
 802f67c:	2200      	movs	r2, #0
 802f67e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 802f680:	683b      	ldr	r3, [r7, #0]
 802f682:	687a      	ldr	r2, [r7, #4]
 802f684:	68b9      	ldr	r1, [r7, #8]
 802f686:	68f8      	ldr	r0, [r7, #12]
 802f688:	f000 f9e8 	bl	802fa5c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 802f68c:	68fb      	ldr	r3, [r7, #12]
 802f68e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802f690:	223f      	movs	r2, #63	; 0x3f
 802f692:	409a      	lsls	r2, r3
 802f694:	693b      	ldr	r3, [r7, #16]
 802f696:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 802f698:	68fb      	ldr	r3, [r7, #12]
 802f69a:	681b      	ldr	r3, [r3, #0]
 802f69c:	681a      	ldr	r2, [r3, #0]
 802f69e:	68fb      	ldr	r3, [r7, #12]
 802f6a0:	681b      	ldr	r3, [r3, #0]
 802f6a2:	f042 0216 	orr.w	r2, r2, #22
 802f6a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 802f6a8:	68fb      	ldr	r3, [r7, #12]
 802f6aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802f6ac:	2b00      	cmp	r3, #0
 802f6ae:	d007      	beq.n	802f6c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 802f6b0:	68fb      	ldr	r3, [r7, #12]
 802f6b2:	681b      	ldr	r3, [r3, #0]
 802f6b4:	681a      	ldr	r2, [r3, #0]
 802f6b6:	68fb      	ldr	r3, [r7, #12]
 802f6b8:	681b      	ldr	r3, [r3, #0]
 802f6ba:	f042 0208 	orr.w	r2, r2, #8
 802f6be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 802f6c0:	68fb      	ldr	r3, [r7, #12]
 802f6c2:	681b      	ldr	r3, [r3, #0]
 802f6c4:	681a      	ldr	r2, [r3, #0]
 802f6c6:	68fb      	ldr	r3, [r7, #12]
 802f6c8:	681b      	ldr	r3, [r3, #0]
 802f6ca:	f042 0201 	orr.w	r2, r2, #1
 802f6ce:	601a      	str	r2, [r3, #0]
 802f6d0:	e005      	b.n	802f6de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 802f6d2:	68fb      	ldr	r3, [r7, #12]
 802f6d4:	2200      	movs	r2, #0
 802f6d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 802f6da:	2302      	movs	r3, #2
 802f6dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 802f6de:	7dfb      	ldrb	r3, [r7, #23]
}
 802f6e0:	4618      	mov	r0, r3
 802f6e2:	3718      	adds	r7, #24
 802f6e4:	46bd      	mov	sp, r7
 802f6e6:	bd80      	pop	{r7, pc}

0802f6e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 802f6e8:	b480      	push	{r7}
 802f6ea:	b083      	sub	sp, #12
 802f6ec:	af00      	add	r7, sp, #0
 802f6ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 802f6f0:	687b      	ldr	r3, [r7, #4]
 802f6f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802f6f6:	b2db      	uxtb	r3, r3
 802f6f8:	2b02      	cmp	r3, #2
 802f6fa:	d004      	beq.n	802f706 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 802f6fc:	687b      	ldr	r3, [r7, #4]
 802f6fe:	2280      	movs	r2, #128	; 0x80
 802f700:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 802f702:	2301      	movs	r3, #1
 802f704:	e00c      	b.n	802f720 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 802f706:	687b      	ldr	r3, [r7, #4]
 802f708:	2205      	movs	r2, #5
 802f70a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 802f70e:	687b      	ldr	r3, [r7, #4]
 802f710:	681b      	ldr	r3, [r3, #0]
 802f712:	681a      	ldr	r2, [r3, #0]
 802f714:	687b      	ldr	r3, [r7, #4]
 802f716:	681b      	ldr	r3, [r3, #0]
 802f718:	f022 0201 	bic.w	r2, r2, #1
 802f71c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 802f71e:	2300      	movs	r3, #0
}
 802f720:	4618      	mov	r0, r3
 802f722:	370c      	adds	r7, #12
 802f724:	46bd      	mov	sp, r7
 802f726:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f72a:	4770      	bx	lr

0802f72c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 802f72c:	b580      	push	{r7, lr}
 802f72e:	b086      	sub	sp, #24
 802f730:	af00      	add	r7, sp, #0
 802f732:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 802f734:	2300      	movs	r3, #0
 802f736:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 802f738:	4b92      	ldr	r3, [pc, #584]	; (802f984 <HAL_DMA_IRQHandler+0x258>)
 802f73a:	681b      	ldr	r3, [r3, #0]
 802f73c:	4a92      	ldr	r2, [pc, #584]	; (802f988 <HAL_DMA_IRQHandler+0x25c>)
 802f73e:	fba2 2303 	umull	r2, r3, r2, r3
 802f742:	0a9b      	lsrs	r3, r3, #10
 802f744:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802f746:	687b      	ldr	r3, [r7, #4]
 802f748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802f74a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 802f74c:	693b      	ldr	r3, [r7, #16]
 802f74e:	681b      	ldr	r3, [r3, #0]
 802f750:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 802f752:	687b      	ldr	r3, [r7, #4]
 802f754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802f756:	2208      	movs	r2, #8
 802f758:	409a      	lsls	r2, r3
 802f75a:	68fb      	ldr	r3, [r7, #12]
 802f75c:	4013      	ands	r3, r2
 802f75e:	2b00      	cmp	r3, #0
 802f760:	d01a      	beq.n	802f798 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 802f762:	687b      	ldr	r3, [r7, #4]
 802f764:	681b      	ldr	r3, [r3, #0]
 802f766:	681b      	ldr	r3, [r3, #0]
 802f768:	f003 0304 	and.w	r3, r3, #4
 802f76c:	2b00      	cmp	r3, #0
 802f76e:	d013      	beq.n	802f798 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 802f770:	687b      	ldr	r3, [r7, #4]
 802f772:	681b      	ldr	r3, [r3, #0]
 802f774:	681a      	ldr	r2, [r3, #0]
 802f776:	687b      	ldr	r3, [r7, #4]
 802f778:	681b      	ldr	r3, [r3, #0]
 802f77a:	f022 0204 	bic.w	r2, r2, #4
 802f77e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 802f780:	687b      	ldr	r3, [r7, #4]
 802f782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802f784:	2208      	movs	r2, #8
 802f786:	409a      	lsls	r2, r3
 802f788:	693b      	ldr	r3, [r7, #16]
 802f78a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 802f78c:	687b      	ldr	r3, [r7, #4]
 802f78e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802f790:	f043 0201 	orr.w	r2, r3, #1
 802f794:	687b      	ldr	r3, [r7, #4]
 802f796:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 802f798:	687b      	ldr	r3, [r7, #4]
 802f79a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802f79c:	2201      	movs	r2, #1
 802f79e:	409a      	lsls	r2, r3
 802f7a0:	68fb      	ldr	r3, [r7, #12]
 802f7a2:	4013      	ands	r3, r2
 802f7a4:	2b00      	cmp	r3, #0
 802f7a6:	d012      	beq.n	802f7ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 802f7a8:	687b      	ldr	r3, [r7, #4]
 802f7aa:	681b      	ldr	r3, [r3, #0]
 802f7ac:	695b      	ldr	r3, [r3, #20]
 802f7ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802f7b2:	2b00      	cmp	r3, #0
 802f7b4:	d00b      	beq.n	802f7ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 802f7b6:	687b      	ldr	r3, [r7, #4]
 802f7b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802f7ba:	2201      	movs	r2, #1
 802f7bc:	409a      	lsls	r2, r3
 802f7be:	693b      	ldr	r3, [r7, #16]
 802f7c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 802f7c2:	687b      	ldr	r3, [r7, #4]
 802f7c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802f7c6:	f043 0202 	orr.w	r2, r3, #2
 802f7ca:	687b      	ldr	r3, [r7, #4]
 802f7cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 802f7ce:	687b      	ldr	r3, [r7, #4]
 802f7d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802f7d2:	2204      	movs	r2, #4
 802f7d4:	409a      	lsls	r2, r3
 802f7d6:	68fb      	ldr	r3, [r7, #12]
 802f7d8:	4013      	ands	r3, r2
 802f7da:	2b00      	cmp	r3, #0
 802f7dc:	d012      	beq.n	802f804 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 802f7de:	687b      	ldr	r3, [r7, #4]
 802f7e0:	681b      	ldr	r3, [r3, #0]
 802f7e2:	681b      	ldr	r3, [r3, #0]
 802f7e4:	f003 0302 	and.w	r3, r3, #2
 802f7e8:	2b00      	cmp	r3, #0
 802f7ea:	d00b      	beq.n	802f804 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 802f7ec:	687b      	ldr	r3, [r7, #4]
 802f7ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802f7f0:	2204      	movs	r2, #4
 802f7f2:	409a      	lsls	r2, r3
 802f7f4:	693b      	ldr	r3, [r7, #16]
 802f7f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 802f7f8:	687b      	ldr	r3, [r7, #4]
 802f7fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802f7fc:	f043 0204 	orr.w	r2, r3, #4
 802f800:	687b      	ldr	r3, [r7, #4]
 802f802:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 802f804:	687b      	ldr	r3, [r7, #4]
 802f806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802f808:	2210      	movs	r2, #16
 802f80a:	409a      	lsls	r2, r3
 802f80c:	68fb      	ldr	r3, [r7, #12]
 802f80e:	4013      	ands	r3, r2
 802f810:	2b00      	cmp	r3, #0
 802f812:	d043      	beq.n	802f89c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 802f814:	687b      	ldr	r3, [r7, #4]
 802f816:	681b      	ldr	r3, [r3, #0]
 802f818:	681b      	ldr	r3, [r3, #0]
 802f81a:	f003 0308 	and.w	r3, r3, #8
 802f81e:	2b00      	cmp	r3, #0
 802f820:	d03c      	beq.n	802f89c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 802f822:	687b      	ldr	r3, [r7, #4]
 802f824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802f826:	2210      	movs	r2, #16
 802f828:	409a      	lsls	r2, r3
 802f82a:	693b      	ldr	r3, [r7, #16]
 802f82c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 802f82e:	687b      	ldr	r3, [r7, #4]
 802f830:	681b      	ldr	r3, [r3, #0]
 802f832:	681b      	ldr	r3, [r3, #0]
 802f834:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802f838:	2b00      	cmp	r3, #0
 802f83a:	d018      	beq.n	802f86e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 802f83c:	687b      	ldr	r3, [r7, #4]
 802f83e:	681b      	ldr	r3, [r3, #0]
 802f840:	681b      	ldr	r3, [r3, #0]
 802f842:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802f846:	2b00      	cmp	r3, #0
 802f848:	d108      	bne.n	802f85c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 802f84a:	687b      	ldr	r3, [r7, #4]
 802f84c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802f84e:	2b00      	cmp	r3, #0
 802f850:	d024      	beq.n	802f89c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 802f852:	687b      	ldr	r3, [r7, #4]
 802f854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802f856:	6878      	ldr	r0, [r7, #4]
 802f858:	4798      	blx	r3
 802f85a:	e01f      	b.n	802f89c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 802f85c:	687b      	ldr	r3, [r7, #4]
 802f85e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802f860:	2b00      	cmp	r3, #0
 802f862:	d01b      	beq.n	802f89c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 802f864:	687b      	ldr	r3, [r7, #4]
 802f866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802f868:	6878      	ldr	r0, [r7, #4]
 802f86a:	4798      	blx	r3
 802f86c:	e016      	b.n	802f89c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 802f86e:	687b      	ldr	r3, [r7, #4]
 802f870:	681b      	ldr	r3, [r3, #0]
 802f872:	681b      	ldr	r3, [r3, #0]
 802f874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802f878:	2b00      	cmp	r3, #0
 802f87a:	d107      	bne.n	802f88c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 802f87c:	687b      	ldr	r3, [r7, #4]
 802f87e:	681b      	ldr	r3, [r3, #0]
 802f880:	681a      	ldr	r2, [r3, #0]
 802f882:	687b      	ldr	r3, [r7, #4]
 802f884:	681b      	ldr	r3, [r3, #0]
 802f886:	f022 0208 	bic.w	r2, r2, #8
 802f88a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 802f88c:	687b      	ldr	r3, [r7, #4]
 802f88e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802f890:	2b00      	cmp	r3, #0
 802f892:	d003      	beq.n	802f89c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 802f894:	687b      	ldr	r3, [r7, #4]
 802f896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802f898:	6878      	ldr	r0, [r7, #4]
 802f89a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 802f89c:	687b      	ldr	r3, [r7, #4]
 802f89e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802f8a0:	2220      	movs	r2, #32
 802f8a2:	409a      	lsls	r2, r3
 802f8a4:	68fb      	ldr	r3, [r7, #12]
 802f8a6:	4013      	ands	r3, r2
 802f8a8:	2b00      	cmp	r3, #0
 802f8aa:	f000 808e 	beq.w	802f9ca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 802f8ae:	687b      	ldr	r3, [r7, #4]
 802f8b0:	681b      	ldr	r3, [r3, #0]
 802f8b2:	681b      	ldr	r3, [r3, #0]
 802f8b4:	f003 0310 	and.w	r3, r3, #16
 802f8b8:	2b00      	cmp	r3, #0
 802f8ba:	f000 8086 	beq.w	802f9ca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 802f8be:	687b      	ldr	r3, [r7, #4]
 802f8c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802f8c2:	2220      	movs	r2, #32
 802f8c4:	409a      	lsls	r2, r3
 802f8c6:	693b      	ldr	r3, [r7, #16]
 802f8c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 802f8ca:	687b      	ldr	r3, [r7, #4]
 802f8cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802f8d0:	b2db      	uxtb	r3, r3
 802f8d2:	2b05      	cmp	r3, #5
 802f8d4:	d136      	bne.n	802f944 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 802f8d6:	687b      	ldr	r3, [r7, #4]
 802f8d8:	681b      	ldr	r3, [r3, #0]
 802f8da:	681a      	ldr	r2, [r3, #0]
 802f8dc:	687b      	ldr	r3, [r7, #4]
 802f8de:	681b      	ldr	r3, [r3, #0]
 802f8e0:	f022 0216 	bic.w	r2, r2, #22
 802f8e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 802f8e6:	687b      	ldr	r3, [r7, #4]
 802f8e8:	681b      	ldr	r3, [r3, #0]
 802f8ea:	695a      	ldr	r2, [r3, #20]
 802f8ec:	687b      	ldr	r3, [r7, #4]
 802f8ee:	681b      	ldr	r3, [r3, #0]
 802f8f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802f8f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 802f8f6:	687b      	ldr	r3, [r7, #4]
 802f8f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802f8fa:	2b00      	cmp	r3, #0
 802f8fc:	d103      	bne.n	802f906 <HAL_DMA_IRQHandler+0x1da>
 802f8fe:	687b      	ldr	r3, [r7, #4]
 802f900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802f902:	2b00      	cmp	r3, #0
 802f904:	d007      	beq.n	802f916 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 802f906:	687b      	ldr	r3, [r7, #4]
 802f908:	681b      	ldr	r3, [r3, #0]
 802f90a:	681a      	ldr	r2, [r3, #0]
 802f90c:	687b      	ldr	r3, [r7, #4]
 802f90e:	681b      	ldr	r3, [r3, #0]
 802f910:	f022 0208 	bic.w	r2, r2, #8
 802f914:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 802f916:	687b      	ldr	r3, [r7, #4]
 802f918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802f91a:	223f      	movs	r2, #63	; 0x3f
 802f91c:	409a      	lsls	r2, r3
 802f91e:	693b      	ldr	r3, [r7, #16]
 802f920:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 802f922:	687b      	ldr	r3, [r7, #4]
 802f924:	2200      	movs	r2, #0
 802f926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 802f92a:	687b      	ldr	r3, [r7, #4]
 802f92c:	2201      	movs	r2, #1
 802f92e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 802f932:	687b      	ldr	r3, [r7, #4]
 802f934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802f936:	2b00      	cmp	r3, #0
 802f938:	d07d      	beq.n	802fa36 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 802f93a:	687b      	ldr	r3, [r7, #4]
 802f93c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802f93e:	6878      	ldr	r0, [r7, #4]
 802f940:	4798      	blx	r3
        }
        return;
 802f942:	e078      	b.n	802fa36 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 802f944:	687b      	ldr	r3, [r7, #4]
 802f946:	681b      	ldr	r3, [r3, #0]
 802f948:	681b      	ldr	r3, [r3, #0]
 802f94a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802f94e:	2b00      	cmp	r3, #0
 802f950:	d01c      	beq.n	802f98c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 802f952:	687b      	ldr	r3, [r7, #4]
 802f954:	681b      	ldr	r3, [r3, #0]
 802f956:	681b      	ldr	r3, [r3, #0]
 802f958:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802f95c:	2b00      	cmp	r3, #0
 802f95e:	d108      	bne.n	802f972 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 802f960:	687b      	ldr	r3, [r7, #4]
 802f962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802f964:	2b00      	cmp	r3, #0
 802f966:	d030      	beq.n	802f9ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 802f968:	687b      	ldr	r3, [r7, #4]
 802f96a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802f96c:	6878      	ldr	r0, [r7, #4]
 802f96e:	4798      	blx	r3
 802f970:	e02b      	b.n	802f9ca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 802f972:	687b      	ldr	r3, [r7, #4]
 802f974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f976:	2b00      	cmp	r3, #0
 802f978:	d027      	beq.n	802f9ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 802f97a:	687b      	ldr	r3, [r7, #4]
 802f97c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f97e:	6878      	ldr	r0, [r7, #4]
 802f980:	4798      	blx	r3
 802f982:	e022      	b.n	802f9ca <HAL_DMA_IRQHandler+0x29e>
 802f984:	20000294 	.word	0x20000294
 802f988:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 802f98c:	687b      	ldr	r3, [r7, #4]
 802f98e:	681b      	ldr	r3, [r3, #0]
 802f990:	681b      	ldr	r3, [r3, #0]
 802f992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802f996:	2b00      	cmp	r3, #0
 802f998:	d10f      	bne.n	802f9ba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 802f99a:	687b      	ldr	r3, [r7, #4]
 802f99c:	681b      	ldr	r3, [r3, #0]
 802f99e:	681a      	ldr	r2, [r3, #0]
 802f9a0:	687b      	ldr	r3, [r7, #4]
 802f9a2:	681b      	ldr	r3, [r3, #0]
 802f9a4:	f022 0210 	bic.w	r2, r2, #16
 802f9a8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 802f9aa:	687b      	ldr	r3, [r7, #4]
 802f9ac:	2200      	movs	r2, #0
 802f9ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 802f9b2:	687b      	ldr	r3, [r7, #4]
 802f9b4:	2201      	movs	r2, #1
 802f9b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 802f9ba:	687b      	ldr	r3, [r7, #4]
 802f9bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f9be:	2b00      	cmp	r3, #0
 802f9c0:	d003      	beq.n	802f9ca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 802f9c2:	687b      	ldr	r3, [r7, #4]
 802f9c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f9c6:	6878      	ldr	r0, [r7, #4]
 802f9c8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 802f9ca:	687b      	ldr	r3, [r7, #4]
 802f9cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802f9ce:	2b00      	cmp	r3, #0
 802f9d0:	d032      	beq.n	802fa38 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 802f9d2:	687b      	ldr	r3, [r7, #4]
 802f9d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802f9d6:	f003 0301 	and.w	r3, r3, #1
 802f9da:	2b00      	cmp	r3, #0
 802f9dc:	d022      	beq.n	802fa24 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 802f9de:	687b      	ldr	r3, [r7, #4]
 802f9e0:	2205      	movs	r2, #5
 802f9e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 802f9e6:	687b      	ldr	r3, [r7, #4]
 802f9e8:	681b      	ldr	r3, [r3, #0]
 802f9ea:	681a      	ldr	r2, [r3, #0]
 802f9ec:	687b      	ldr	r3, [r7, #4]
 802f9ee:	681b      	ldr	r3, [r3, #0]
 802f9f0:	f022 0201 	bic.w	r2, r2, #1
 802f9f4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 802f9f6:	68bb      	ldr	r3, [r7, #8]
 802f9f8:	3301      	adds	r3, #1
 802f9fa:	60bb      	str	r3, [r7, #8]
 802f9fc:	697a      	ldr	r2, [r7, #20]
 802f9fe:	429a      	cmp	r2, r3
 802fa00:	d307      	bcc.n	802fa12 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 802fa02:	687b      	ldr	r3, [r7, #4]
 802fa04:	681b      	ldr	r3, [r3, #0]
 802fa06:	681b      	ldr	r3, [r3, #0]
 802fa08:	f003 0301 	and.w	r3, r3, #1
 802fa0c:	2b00      	cmp	r3, #0
 802fa0e:	d1f2      	bne.n	802f9f6 <HAL_DMA_IRQHandler+0x2ca>
 802fa10:	e000      	b.n	802fa14 <HAL_DMA_IRQHandler+0x2e8>
          break;
 802fa12:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 802fa14:	687b      	ldr	r3, [r7, #4]
 802fa16:	2200      	movs	r2, #0
 802fa18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 802fa1c:	687b      	ldr	r3, [r7, #4]
 802fa1e:	2201      	movs	r2, #1
 802fa20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 802fa24:	687b      	ldr	r3, [r7, #4]
 802fa26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802fa28:	2b00      	cmp	r3, #0
 802fa2a:	d005      	beq.n	802fa38 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 802fa2c:	687b      	ldr	r3, [r7, #4]
 802fa2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802fa30:	6878      	ldr	r0, [r7, #4]
 802fa32:	4798      	blx	r3
 802fa34:	e000      	b.n	802fa38 <HAL_DMA_IRQHandler+0x30c>
        return;
 802fa36:	bf00      	nop
    }
  }
}
 802fa38:	3718      	adds	r7, #24
 802fa3a:	46bd      	mov	sp, r7
 802fa3c:	bd80      	pop	{r7, pc}
 802fa3e:	bf00      	nop

0802fa40 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 802fa40:	b480      	push	{r7}
 802fa42:	b083      	sub	sp, #12
 802fa44:	af00      	add	r7, sp, #0
 802fa46:	6078      	str	r0, [r7, #4]
  return hdma->State;
 802fa48:	687b      	ldr	r3, [r7, #4]
 802fa4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802fa4e:	b2db      	uxtb	r3, r3
}
 802fa50:	4618      	mov	r0, r3
 802fa52:	370c      	adds	r7, #12
 802fa54:	46bd      	mov	sp, r7
 802fa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 802fa5a:	4770      	bx	lr

0802fa5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 802fa5c:	b480      	push	{r7}
 802fa5e:	b085      	sub	sp, #20
 802fa60:	af00      	add	r7, sp, #0
 802fa62:	60f8      	str	r0, [r7, #12]
 802fa64:	60b9      	str	r1, [r7, #8]
 802fa66:	607a      	str	r2, [r7, #4]
 802fa68:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 802fa6a:	68fb      	ldr	r3, [r7, #12]
 802fa6c:	681b      	ldr	r3, [r3, #0]
 802fa6e:	681a      	ldr	r2, [r3, #0]
 802fa70:	68fb      	ldr	r3, [r7, #12]
 802fa72:	681b      	ldr	r3, [r3, #0]
 802fa74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 802fa78:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 802fa7a:	68fb      	ldr	r3, [r7, #12]
 802fa7c:	681b      	ldr	r3, [r3, #0]
 802fa7e:	683a      	ldr	r2, [r7, #0]
 802fa80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 802fa82:	68fb      	ldr	r3, [r7, #12]
 802fa84:	689b      	ldr	r3, [r3, #8]
 802fa86:	2b40      	cmp	r3, #64	; 0x40
 802fa88:	d108      	bne.n	802fa9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 802fa8a:	68fb      	ldr	r3, [r7, #12]
 802fa8c:	681b      	ldr	r3, [r3, #0]
 802fa8e:	687a      	ldr	r2, [r7, #4]
 802fa90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 802fa92:	68fb      	ldr	r3, [r7, #12]
 802fa94:	681b      	ldr	r3, [r3, #0]
 802fa96:	68ba      	ldr	r2, [r7, #8]
 802fa98:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 802fa9a:	e007      	b.n	802faac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 802fa9c:	68fb      	ldr	r3, [r7, #12]
 802fa9e:	681b      	ldr	r3, [r3, #0]
 802faa0:	68ba      	ldr	r2, [r7, #8]
 802faa2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 802faa4:	68fb      	ldr	r3, [r7, #12]
 802faa6:	681b      	ldr	r3, [r3, #0]
 802faa8:	687a      	ldr	r2, [r7, #4]
 802faaa:	60da      	str	r2, [r3, #12]
}
 802faac:	bf00      	nop
 802faae:	3714      	adds	r7, #20
 802fab0:	46bd      	mov	sp, r7
 802fab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802fab6:	4770      	bx	lr

0802fab8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 802fab8:	b480      	push	{r7}
 802faba:	b085      	sub	sp, #20
 802fabc:	af00      	add	r7, sp, #0
 802fabe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 802fac0:	687b      	ldr	r3, [r7, #4]
 802fac2:	681b      	ldr	r3, [r3, #0]
 802fac4:	b2db      	uxtb	r3, r3
 802fac6:	3b10      	subs	r3, #16
 802fac8:	4a14      	ldr	r2, [pc, #80]	; (802fb1c <DMA_CalcBaseAndBitshift+0x64>)
 802faca:	fba2 2303 	umull	r2, r3, r2, r3
 802face:	091b      	lsrs	r3, r3, #4
 802fad0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 802fad2:	4a13      	ldr	r2, [pc, #76]	; (802fb20 <DMA_CalcBaseAndBitshift+0x68>)
 802fad4:	68fb      	ldr	r3, [r7, #12]
 802fad6:	4413      	add	r3, r2
 802fad8:	781b      	ldrb	r3, [r3, #0]
 802fada:	461a      	mov	r2, r3
 802fadc:	687b      	ldr	r3, [r7, #4]
 802fade:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 802fae0:	68fb      	ldr	r3, [r7, #12]
 802fae2:	2b03      	cmp	r3, #3
 802fae4:	d909      	bls.n	802fafa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 802fae6:	687b      	ldr	r3, [r7, #4]
 802fae8:	681b      	ldr	r3, [r3, #0]
 802faea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 802faee:	f023 0303 	bic.w	r3, r3, #3
 802faf2:	1d1a      	adds	r2, r3, #4
 802faf4:	687b      	ldr	r3, [r7, #4]
 802faf6:	659a      	str	r2, [r3, #88]	; 0x58
 802faf8:	e007      	b.n	802fb0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 802fafa:	687b      	ldr	r3, [r7, #4]
 802fafc:	681b      	ldr	r3, [r3, #0]
 802fafe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 802fb02:	f023 0303 	bic.w	r3, r3, #3
 802fb06:	687a      	ldr	r2, [r7, #4]
 802fb08:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 802fb0a:	687b      	ldr	r3, [r7, #4]
 802fb0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 802fb0e:	4618      	mov	r0, r3
 802fb10:	3714      	adds	r7, #20
 802fb12:	46bd      	mov	sp, r7
 802fb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 802fb18:	4770      	bx	lr
 802fb1a:	bf00      	nop
 802fb1c:	aaaaaaab 	.word	0xaaaaaaab
 802fb20:	08056218 	.word	0x08056218

0802fb24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 802fb24:	b480      	push	{r7}
 802fb26:	b085      	sub	sp, #20
 802fb28:	af00      	add	r7, sp, #0
 802fb2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 802fb2c:	2300      	movs	r3, #0
 802fb2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 802fb30:	687b      	ldr	r3, [r7, #4]
 802fb32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802fb34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 802fb36:	687b      	ldr	r3, [r7, #4]
 802fb38:	699b      	ldr	r3, [r3, #24]
 802fb3a:	2b00      	cmp	r3, #0
 802fb3c:	d11f      	bne.n	802fb7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 802fb3e:	68bb      	ldr	r3, [r7, #8]
 802fb40:	2b03      	cmp	r3, #3
 802fb42:	d855      	bhi.n	802fbf0 <DMA_CheckFifoParam+0xcc>
 802fb44:	a201      	add	r2, pc, #4	; (adr r2, 802fb4c <DMA_CheckFifoParam+0x28>)
 802fb46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802fb4a:	bf00      	nop
 802fb4c:	0802fb5d 	.word	0x0802fb5d
 802fb50:	0802fb6f 	.word	0x0802fb6f
 802fb54:	0802fb5d 	.word	0x0802fb5d
 802fb58:	0802fbf1 	.word	0x0802fbf1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802fb5c:	687b      	ldr	r3, [r7, #4]
 802fb5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802fb60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802fb64:	2b00      	cmp	r3, #0
 802fb66:	d045      	beq.n	802fbf4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 802fb68:	2301      	movs	r3, #1
 802fb6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 802fb6c:	e042      	b.n	802fbf4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 802fb6e:	687b      	ldr	r3, [r7, #4]
 802fb70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802fb72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 802fb76:	d13f      	bne.n	802fbf8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 802fb78:	2301      	movs	r3, #1
 802fb7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 802fb7c:	e03c      	b.n	802fbf8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 802fb7e:	687b      	ldr	r3, [r7, #4]
 802fb80:	699b      	ldr	r3, [r3, #24]
 802fb82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802fb86:	d121      	bne.n	802fbcc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 802fb88:	68bb      	ldr	r3, [r7, #8]
 802fb8a:	2b03      	cmp	r3, #3
 802fb8c:	d836      	bhi.n	802fbfc <DMA_CheckFifoParam+0xd8>
 802fb8e:	a201      	add	r2, pc, #4	; (adr r2, 802fb94 <DMA_CheckFifoParam+0x70>)
 802fb90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802fb94:	0802fba5 	.word	0x0802fba5
 802fb98:	0802fbab 	.word	0x0802fbab
 802fb9c:	0802fba5 	.word	0x0802fba5
 802fba0:	0802fbbd 	.word	0x0802fbbd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 802fba4:	2301      	movs	r3, #1
 802fba6:	73fb      	strb	r3, [r7, #15]
      break;
 802fba8:	e02f      	b.n	802fc0a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802fbaa:	687b      	ldr	r3, [r7, #4]
 802fbac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802fbae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802fbb2:	2b00      	cmp	r3, #0
 802fbb4:	d024      	beq.n	802fc00 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 802fbb6:	2301      	movs	r3, #1
 802fbb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 802fbba:	e021      	b.n	802fc00 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 802fbbc:	687b      	ldr	r3, [r7, #4]
 802fbbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802fbc0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 802fbc4:	d11e      	bne.n	802fc04 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 802fbc6:	2301      	movs	r3, #1
 802fbc8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 802fbca:	e01b      	b.n	802fc04 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 802fbcc:	68bb      	ldr	r3, [r7, #8]
 802fbce:	2b02      	cmp	r3, #2
 802fbd0:	d902      	bls.n	802fbd8 <DMA_CheckFifoParam+0xb4>
 802fbd2:	2b03      	cmp	r3, #3
 802fbd4:	d003      	beq.n	802fbde <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 802fbd6:	e018      	b.n	802fc0a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 802fbd8:	2301      	movs	r3, #1
 802fbda:	73fb      	strb	r3, [r7, #15]
      break;
 802fbdc:	e015      	b.n	802fc0a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802fbde:	687b      	ldr	r3, [r7, #4]
 802fbe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802fbe2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802fbe6:	2b00      	cmp	r3, #0
 802fbe8:	d00e      	beq.n	802fc08 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 802fbea:	2301      	movs	r3, #1
 802fbec:	73fb      	strb	r3, [r7, #15]
      break;
 802fbee:	e00b      	b.n	802fc08 <DMA_CheckFifoParam+0xe4>
      break;
 802fbf0:	bf00      	nop
 802fbf2:	e00a      	b.n	802fc0a <DMA_CheckFifoParam+0xe6>
      break;
 802fbf4:	bf00      	nop
 802fbf6:	e008      	b.n	802fc0a <DMA_CheckFifoParam+0xe6>
      break;
 802fbf8:	bf00      	nop
 802fbfa:	e006      	b.n	802fc0a <DMA_CheckFifoParam+0xe6>
      break;
 802fbfc:	bf00      	nop
 802fbfe:	e004      	b.n	802fc0a <DMA_CheckFifoParam+0xe6>
      break;
 802fc00:	bf00      	nop
 802fc02:	e002      	b.n	802fc0a <DMA_CheckFifoParam+0xe6>
      break;   
 802fc04:	bf00      	nop
 802fc06:	e000      	b.n	802fc0a <DMA_CheckFifoParam+0xe6>
      break;
 802fc08:	bf00      	nop
    }
  } 
  
  return status; 
 802fc0a:	7bfb      	ldrb	r3, [r7, #15]
}
 802fc0c:	4618      	mov	r0, r3
 802fc0e:	3714      	adds	r7, #20
 802fc10:	46bd      	mov	sp, r7
 802fc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 802fc16:	4770      	bx	lr

0802fc18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 802fc18:	b480      	push	{r7}
 802fc1a:	b089      	sub	sp, #36	; 0x24
 802fc1c:	af00      	add	r7, sp, #0
 802fc1e:	6078      	str	r0, [r7, #4]
 802fc20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 802fc22:	2300      	movs	r3, #0
 802fc24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 802fc26:	2300      	movs	r3, #0
 802fc28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 802fc2a:	2300      	movs	r3, #0
 802fc2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 802fc2e:	2300      	movs	r3, #0
 802fc30:	61fb      	str	r3, [r7, #28]
 802fc32:	e165      	b.n	802ff00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 802fc34:	2201      	movs	r2, #1
 802fc36:	69fb      	ldr	r3, [r7, #28]
 802fc38:	fa02 f303 	lsl.w	r3, r2, r3
 802fc3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 802fc3e:	683b      	ldr	r3, [r7, #0]
 802fc40:	681b      	ldr	r3, [r3, #0]
 802fc42:	697a      	ldr	r2, [r7, #20]
 802fc44:	4013      	ands	r3, r2
 802fc46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 802fc48:	693a      	ldr	r2, [r7, #16]
 802fc4a:	697b      	ldr	r3, [r7, #20]
 802fc4c:	429a      	cmp	r2, r3
 802fc4e:	f040 8154 	bne.w	802fefa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 802fc52:	683b      	ldr	r3, [r7, #0]
 802fc54:	685b      	ldr	r3, [r3, #4]
 802fc56:	2b01      	cmp	r3, #1
 802fc58:	d00b      	beq.n	802fc72 <HAL_GPIO_Init+0x5a>
 802fc5a:	683b      	ldr	r3, [r7, #0]
 802fc5c:	685b      	ldr	r3, [r3, #4]
 802fc5e:	2b02      	cmp	r3, #2
 802fc60:	d007      	beq.n	802fc72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 802fc62:	683b      	ldr	r3, [r7, #0]
 802fc64:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 802fc66:	2b11      	cmp	r3, #17
 802fc68:	d003      	beq.n	802fc72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 802fc6a:	683b      	ldr	r3, [r7, #0]
 802fc6c:	685b      	ldr	r3, [r3, #4]
 802fc6e:	2b12      	cmp	r3, #18
 802fc70:	d130      	bne.n	802fcd4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 802fc72:	687b      	ldr	r3, [r7, #4]
 802fc74:	689b      	ldr	r3, [r3, #8]
 802fc76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 802fc78:	69fb      	ldr	r3, [r7, #28]
 802fc7a:	005b      	lsls	r3, r3, #1
 802fc7c:	2203      	movs	r2, #3
 802fc7e:	fa02 f303 	lsl.w	r3, r2, r3
 802fc82:	43db      	mvns	r3, r3
 802fc84:	69ba      	ldr	r2, [r7, #24]
 802fc86:	4013      	ands	r3, r2
 802fc88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 802fc8a:	683b      	ldr	r3, [r7, #0]
 802fc8c:	68da      	ldr	r2, [r3, #12]
 802fc8e:	69fb      	ldr	r3, [r7, #28]
 802fc90:	005b      	lsls	r3, r3, #1
 802fc92:	fa02 f303 	lsl.w	r3, r2, r3
 802fc96:	69ba      	ldr	r2, [r7, #24]
 802fc98:	4313      	orrs	r3, r2
 802fc9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 802fc9c:	687b      	ldr	r3, [r7, #4]
 802fc9e:	69ba      	ldr	r2, [r7, #24]
 802fca0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 802fca2:	687b      	ldr	r3, [r7, #4]
 802fca4:	685b      	ldr	r3, [r3, #4]
 802fca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 802fca8:	2201      	movs	r2, #1
 802fcaa:	69fb      	ldr	r3, [r7, #28]
 802fcac:	fa02 f303 	lsl.w	r3, r2, r3
 802fcb0:	43db      	mvns	r3, r3
 802fcb2:	69ba      	ldr	r2, [r7, #24]
 802fcb4:	4013      	ands	r3, r2
 802fcb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 802fcb8:	683b      	ldr	r3, [r7, #0]
 802fcba:	685b      	ldr	r3, [r3, #4]
 802fcbc:	091b      	lsrs	r3, r3, #4
 802fcbe:	f003 0201 	and.w	r2, r3, #1
 802fcc2:	69fb      	ldr	r3, [r7, #28]
 802fcc4:	fa02 f303 	lsl.w	r3, r2, r3
 802fcc8:	69ba      	ldr	r2, [r7, #24]
 802fcca:	4313      	orrs	r3, r2
 802fccc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 802fcce:	687b      	ldr	r3, [r7, #4]
 802fcd0:	69ba      	ldr	r2, [r7, #24]
 802fcd2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 802fcd4:	687b      	ldr	r3, [r7, #4]
 802fcd6:	68db      	ldr	r3, [r3, #12]
 802fcd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 802fcda:	69fb      	ldr	r3, [r7, #28]
 802fcdc:	005b      	lsls	r3, r3, #1
 802fcde:	2203      	movs	r2, #3
 802fce0:	fa02 f303 	lsl.w	r3, r2, r3
 802fce4:	43db      	mvns	r3, r3
 802fce6:	69ba      	ldr	r2, [r7, #24]
 802fce8:	4013      	ands	r3, r2
 802fcea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 802fcec:	683b      	ldr	r3, [r7, #0]
 802fcee:	689a      	ldr	r2, [r3, #8]
 802fcf0:	69fb      	ldr	r3, [r7, #28]
 802fcf2:	005b      	lsls	r3, r3, #1
 802fcf4:	fa02 f303 	lsl.w	r3, r2, r3
 802fcf8:	69ba      	ldr	r2, [r7, #24]
 802fcfa:	4313      	orrs	r3, r2
 802fcfc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 802fcfe:	687b      	ldr	r3, [r7, #4]
 802fd00:	69ba      	ldr	r2, [r7, #24]
 802fd02:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 802fd04:	683b      	ldr	r3, [r7, #0]
 802fd06:	685b      	ldr	r3, [r3, #4]
 802fd08:	2b02      	cmp	r3, #2
 802fd0a:	d003      	beq.n	802fd14 <HAL_GPIO_Init+0xfc>
 802fd0c:	683b      	ldr	r3, [r7, #0]
 802fd0e:	685b      	ldr	r3, [r3, #4]
 802fd10:	2b12      	cmp	r3, #18
 802fd12:	d123      	bne.n	802fd5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 802fd14:	69fb      	ldr	r3, [r7, #28]
 802fd16:	08da      	lsrs	r2, r3, #3
 802fd18:	687b      	ldr	r3, [r7, #4]
 802fd1a:	3208      	adds	r2, #8
 802fd1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802fd20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 802fd22:	69fb      	ldr	r3, [r7, #28]
 802fd24:	f003 0307 	and.w	r3, r3, #7
 802fd28:	009b      	lsls	r3, r3, #2
 802fd2a:	220f      	movs	r2, #15
 802fd2c:	fa02 f303 	lsl.w	r3, r2, r3
 802fd30:	43db      	mvns	r3, r3
 802fd32:	69ba      	ldr	r2, [r7, #24]
 802fd34:	4013      	ands	r3, r2
 802fd36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 802fd38:	683b      	ldr	r3, [r7, #0]
 802fd3a:	691a      	ldr	r2, [r3, #16]
 802fd3c:	69fb      	ldr	r3, [r7, #28]
 802fd3e:	f003 0307 	and.w	r3, r3, #7
 802fd42:	009b      	lsls	r3, r3, #2
 802fd44:	fa02 f303 	lsl.w	r3, r2, r3
 802fd48:	69ba      	ldr	r2, [r7, #24]
 802fd4a:	4313      	orrs	r3, r2
 802fd4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 802fd4e:	69fb      	ldr	r3, [r7, #28]
 802fd50:	08da      	lsrs	r2, r3, #3
 802fd52:	687b      	ldr	r3, [r7, #4]
 802fd54:	3208      	adds	r2, #8
 802fd56:	69b9      	ldr	r1, [r7, #24]
 802fd58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 802fd5c:	687b      	ldr	r3, [r7, #4]
 802fd5e:	681b      	ldr	r3, [r3, #0]
 802fd60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 802fd62:	69fb      	ldr	r3, [r7, #28]
 802fd64:	005b      	lsls	r3, r3, #1
 802fd66:	2203      	movs	r2, #3
 802fd68:	fa02 f303 	lsl.w	r3, r2, r3
 802fd6c:	43db      	mvns	r3, r3
 802fd6e:	69ba      	ldr	r2, [r7, #24]
 802fd70:	4013      	ands	r3, r2
 802fd72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 802fd74:	683b      	ldr	r3, [r7, #0]
 802fd76:	685b      	ldr	r3, [r3, #4]
 802fd78:	f003 0203 	and.w	r2, r3, #3
 802fd7c:	69fb      	ldr	r3, [r7, #28]
 802fd7e:	005b      	lsls	r3, r3, #1
 802fd80:	fa02 f303 	lsl.w	r3, r2, r3
 802fd84:	69ba      	ldr	r2, [r7, #24]
 802fd86:	4313      	orrs	r3, r2
 802fd88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 802fd8a:	687b      	ldr	r3, [r7, #4]
 802fd8c:	69ba      	ldr	r2, [r7, #24]
 802fd8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 802fd90:	683b      	ldr	r3, [r7, #0]
 802fd92:	685b      	ldr	r3, [r3, #4]
 802fd94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802fd98:	2b00      	cmp	r3, #0
 802fd9a:	f000 80ae 	beq.w	802fefa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 802fd9e:	2300      	movs	r3, #0
 802fda0:	60fb      	str	r3, [r7, #12]
 802fda2:	4b5c      	ldr	r3, [pc, #368]	; (802ff14 <HAL_GPIO_Init+0x2fc>)
 802fda4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802fda6:	4a5b      	ldr	r2, [pc, #364]	; (802ff14 <HAL_GPIO_Init+0x2fc>)
 802fda8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802fdac:	6453      	str	r3, [r2, #68]	; 0x44
 802fdae:	4b59      	ldr	r3, [pc, #356]	; (802ff14 <HAL_GPIO_Init+0x2fc>)
 802fdb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802fdb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802fdb6:	60fb      	str	r3, [r7, #12]
 802fdb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 802fdba:	4a57      	ldr	r2, [pc, #348]	; (802ff18 <HAL_GPIO_Init+0x300>)
 802fdbc:	69fb      	ldr	r3, [r7, #28]
 802fdbe:	089b      	lsrs	r3, r3, #2
 802fdc0:	3302      	adds	r3, #2
 802fdc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802fdc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 802fdc8:	69fb      	ldr	r3, [r7, #28]
 802fdca:	f003 0303 	and.w	r3, r3, #3
 802fdce:	009b      	lsls	r3, r3, #2
 802fdd0:	220f      	movs	r2, #15
 802fdd2:	fa02 f303 	lsl.w	r3, r2, r3
 802fdd6:	43db      	mvns	r3, r3
 802fdd8:	69ba      	ldr	r2, [r7, #24]
 802fdda:	4013      	ands	r3, r2
 802fddc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 802fdde:	687b      	ldr	r3, [r7, #4]
 802fde0:	4a4e      	ldr	r2, [pc, #312]	; (802ff1c <HAL_GPIO_Init+0x304>)
 802fde2:	4293      	cmp	r3, r2
 802fde4:	d025      	beq.n	802fe32 <HAL_GPIO_Init+0x21a>
 802fde6:	687b      	ldr	r3, [r7, #4]
 802fde8:	4a4d      	ldr	r2, [pc, #308]	; (802ff20 <HAL_GPIO_Init+0x308>)
 802fdea:	4293      	cmp	r3, r2
 802fdec:	d01f      	beq.n	802fe2e <HAL_GPIO_Init+0x216>
 802fdee:	687b      	ldr	r3, [r7, #4]
 802fdf0:	4a4c      	ldr	r2, [pc, #304]	; (802ff24 <HAL_GPIO_Init+0x30c>)
 802fdf2:	4293      	cmp	r3, r2
 802fdf4:	d019      	beq.n	802fe2a <HAL_GPIO_Init+0x212>
 802fdf6:	687b      	ldr	r3, [r7, #4]
 802fdf8:	4a4b      	ldr	r2, [pc, #300]	; (802ff28 <HAL_GPIO_Init+0x310>)
 802fdfa:	4293      	cmp	r3, r2
 802fdfc:	d013      	beq.n	802fe26 <HAL_GPIO_Init+0x20e>
 802fdfe:	687b      	ldr	r3, [r7, #4]
 802fe00:	4a4a      	ldr	r2, [pc, #296]	; (802ff2c <HAL_GPIO_Init+0x314>)
 802fe02:	4293      	cmp	r3, r2
 802fe04:	d00d      	beq.n	802fe22 <HAL_GPIO_Init+0x20a>
 802fe06:	687b      	ldr	r3, [r7, #4]
 802fe08:	4a49      	ldr	r2, [pc, #292]	; (802ff30 <HAL_GPIO_Init+0x318>)
 802fe0a:	4293      	cmp	r3, r2
 802fe0c:	d007      	beq.n	802fe1e <HAL_GPIO_Init+0x206>
 802fe0e:	687b      	ldr	r3, [r7, #4]
 802fe10:	4a48      	ldr	r2, [pc, #288]	; (802ff34 <HAL_GPIO_Init+0x31c>)
 802fe12:	4293      	cmp	r3, r2
 802fe14:	d101      	bne.n	802fe1a <HAL_GPIO_Init+0x202>
 802fe16:	2306      	movs	r3, #6
 802fe18:	e00c      	b.n	802fe34 <HAL_GPIO_Init+0x21c>
 802fe1a:	2307      	movs	r3, #7
 802fe1c:	e00a      	b.n	802fe34 <HAL_GPIO_Init+0x21c>
 802fe1e:	2305      	movs	r3, #5
 802fe20:	e008      	b.n	802fe34 <HAL_GPIO_Init+0x21c>
 802fe22:	2304      	movs	r3, #4
 802fe24:	e006      	b.n	802fe34 <HAL_GPIO_Init+0x21c>
 802fe26:	2303      	movs	r3, #3
 802fe28:	e004      	b.n	802fe34 <HAL_GPIO_Init+0x21c>
 802fe2a:	2302      	movs	r3, #2
 802fe2c:	e002      	b.n	802fe34 <HAL_GPIO_Init+0x21c>
 802fe2e:	2301      	movs	r3, #1
 802fe30:	e000      	b.n	802fe34 <HAL_GPIO_Init+0x21c>
 802fe32:	2300      	movs	r3, #0
 802fe34:	69fa      	ldr	r2, [r7, #28]
 802fe36:	f002 0203 	and.w	r2, r2, #3
 802fe3a:	0092      	lsls	r2, r2, #2
 802fe3c:	4093      	lsls	r3, r2
 802fe3e:	69ba      	ldr	r2, [r7, #24]
 802fe40:	4313      	orrs	r3, r2
 802fe42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 802fe44:	4934      	ldr	r1, [pc, #208]	; (802ff18 <HAL_GPIO_Init+0x300>)
 802fe46:	69fb      	ldr	r3, [r7, #28]
 802fe48:	089b      	lsrs	r3, r3, #2
 802fe4a:	3302      	adds	r3, #2
 802fe4c:	69ba      	ldr	r2, [r7, #24]
 802fe4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 802fe52:	4b39      	ldr	r3, [pc, #228]	; (802ff38 <HAL_GPIO_Init+0x320>)
 802fe54:	681b      	ldr	r3, [r3, #0]
 802fe56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802fe58:	693b      	ldr	r3, [r7, #16]
 802fe5a:	43db      	mvns	r3, r3
 802fe5c:	69ba      	ldr	r2, [r7, #24]
 802fe5e:	4013      	ands	r3, r2
 802fe60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 802fe62:	683b      	ldr	r3, [r7, #0]
 802fe64:	685b      	ldr	r3, [r3, #4]
 802fe66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802fe6a:	2b00      	cmp	r3, #0
 802fe6c:	d003      	beq.n	802fe76 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 802fe6e:	69ba      	ldr	r2, [r7, #24]
 802fe70:	693b      	ldr	r3, [r7, #16]
 802fe72:	4313      	orrs	r3, r2
 802fe74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 802fe76:	4a30      	ldr	r2, [pc, #192]	; (802ff38 <HAL_GPIO_Init+0x320>)
 802fe78:	69bb      	ldr	r3, [r7, #24]
 802fe7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 802fe7c:	4b2e      	ldr	r3, [pc, #184]	; (802ff38 <HAL_GPIO_Init+0x320>)
 802fe7e:	685b      	ldr	r3, [r3, #4]
 802fe80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802fe82:	693b      	ldr	r3, [r7, #16]
 802fe84:	43db      	mvns	r3, r3
 802fe86:	69ba      	ldr	r2, [r7, #24]
 802fe88:	4013      	ands	r3, r2
 802fe8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 802fe8c:	683b      	ldr	r3, [r7, #0]
 802fe8e:	685b      	ldr	r3, [r3, #4]
 802fe90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802fe94:	2b00      	cmp	r3, #0
 802fe96:	d003      	beq.n	802fea0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 802fe98:	69ba      	ldr	r2, [r7, #24]
 802fe9a:	693b      	ldr	r3, [r7, #16]
 802fe9c:	4313      	orrs	r3, r2
 802fe9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 802fea0:	4a25      	ldr	r2, [pc, #148]	; (802ff38 <HAL_GPIO_Init+0x320>)
 802fea2:	69bb      	ldr	r3, [r7, #24]
 802fea4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 802fea6:	4b24      	ldr	r3, [pc, #144]	; (802ff38 <HAL_GPIO_Init+0x320>)
 802fea8:	689b      	ldr	r3, [r3, #8]
 802feaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802feac:	693b      	ldr	r3, [r7, #16]
 802feae:	43db      	mvns	r3, r3
 802feb0:	69ba      	ldr	r2, [r7, #24]
 802feb2:	4013      	ands	r3, r2
 802feb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 802feb6:	683b      	ldr	r3, [r7, #0]
 802feb8:	685b      	ldr	r3, [r3, #4]
 802feba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802febe:	2b00      	cmp	r3, #0
 802fec0:	d003      	beq.n	802feca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 802fec2:	69ba      	ldr	r2, [r7, #24]
 802fec4:	693b      	ldr	r3, [r7, #16]
 802fec6:	4313      	orrs	r3, r2
 802fec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 802feca:	4a1b      	ldr	r2, [pc, #108]	; (802ff38 <HAL_GPIO_Init+0x320>)
 802fecc:	69bb      	ldr	r3, [r7, #24]
 802fece:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 802fed0:	4b19      	ldr	r3, [pc, #100]	; (802ff38 <HAL_GPIO_Init+0x320>)
 802fed2:	68db      	ldr	r3, [r3, #12]
 802fed4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802fed6:	693b      	ldr	r3, [r7, #16]
 802fed8:	43db      	mvns	r3, r3
 802feda:	69ba      	ldr	r2, [r7, #24]
 802fedc:	4013      	ands	r3, r2
 802fede:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 802fee0:	683b      	ldr	r3, [r7, #0]
 802fee2:	685b      	ldr	r3, [r3, #4]
 802fee4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 802fee8:	2b00      	cmp	r3, #0
 802feea:	d003      	beq.n	802fef4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 802feec:	69ba      	ldr	r2, [r7, #24]
 802feee:	693b      	ldr	r3, [r7, #16]
 802fef0:	4313      	orrs	r3, r2
 802fef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 802fef4:	4a10      	ldr	r2, [pc, #64]	; (802ff38 <HAL_GPIO_Init+0x320>)
 802fef6:	69bb      	ldr	r3, [r7, #24]
 802fef8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 802fefa:	69fb      	ldr	r3, [r7, #28]
 802fefc:	3301      	adds	r3, #1
 802fefe:	61fb      	str	r3, [r7, #28]
 802ff00:	69fb      	ldr	r3, [r7, #28]
 802ff02:	2b0f      	cmp	r3, #15
 802ff04:	f67f ae96 	bls.w	802fc34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 802ff08:	bf00      	nop
 802ff0a:	3724      	adds	r7, #36	; 0x24
 802ff0c:	46bd      	mov	sp, r7
 802ff0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ff12:	4770      	bx	lr
 802ff14:	40023800 	.word	0x40023800
 802ff18:	40013800 	.word	0x40013800
 802ff1c:	40020000 	.word	0x40020000
 802ff20:	40020400 	.word	0x40020400
 802ff24:	40020800 	.word	0x40020800
 802ff28:	40020c00 	.word	0x40020c00
 802ff2c:	40021000 	.word	0x40021000
 802ff30:	40021400 	.word	0x40021400
 802ff34:	40021800 	.word	0x40021800
 802ff38:	40013c00 	.word	0x40013c00

0802ff3c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 802ff3c:	b480      	push	{r7}
 802ff3e:	b087      	sub	sp, #28
 802ff40:	af00      	add	r7, sp, #0
 802ff42:	6078      	str	r0, [r7, #4]
 802ff44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 802ff46:	2300      	movs	r3, #0
 802ff48:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 802ff4a:	2300      	movs	r3, #0
 802ff4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 802ff4e:	2300      	movs	r3, #0
 802ff50:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 802ff52:	2300      	movs	r3, #0
 802ff54:	617b      	str	r3, [r7, #20]
 802ff56:	e0c7      	b.n	80300e8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 802ff58:	2201      	movs	r2, #1
 802ff5a:	697b      	ldr	r3, [r7, #20]
 802ff5c:	fa02 f303 	lsl.w	r3, r2, r3
 802ff60:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 802ff62:	683a      	ldr	r2, [r7, #0]
 802ff64:	693b      	ldr	r3, [r7, #16]
 802ff66:	4013      	ands	r3, r2
 802ff68:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 802ff6a:	68fa      	ldr	r2, [r7, #12]
 802ff6c:	693b      	ldr	r3, [r7, #16]
 802ff6e:	429a      	cmp	r2, r3
 802ff70:	f040 80b7 	bne.w	80300e2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 802ff74:	4a61      	ldr	r2, [pc, #388]	; (80300fc <HAL_GPIO_DeInit+0x1c0>)
 802ff76:	697b      	ldr	r3, [r7, #20]
 802ff78:	089b      	lsrs	r3, r3, #2
 802ff7a:	3302      	adds	r3, #2
 802ff7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802ff80:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 802ff82:	697b      	ldr	r3, [r7, #20]
 802ff84:	f003 0303 	and.w	r3, r3, #3
 802ff88:	009b      	lsls	r3, r3, #2
 802ff8a:	220f      	movs	r2, #15
 802ff8c:	fa02 f303 	lsl.w	r3, r2, r3
 802ff90:	68ba      	ldr	r2, [r7, #8]
 802ff92:	4013      	ands	r3, r2
 802ff94:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 802ff96:	687b      	ldr	r3, [r7, #4]
 802ff98:	4a59      	ldr	r2, [pc, #356]	; (8030100 <HAL_GPIO_DeInit+0x1c4>)
 802ff9a:	4293      	cmp	r3, r2
 802ff9c:	d025      	beq.n	802ffea <HAL_GPIO_DeInit+0xae>
 802ff9e:	687b      	ldr	r3, [r7, #4]
 802ffa0:	4a58      	ldr	r2, [pc, #352]	; (8030104 <HAL_GPIO_DeInit+0x1c8>)
 802ffa2:	4293      	cmp	r3, r2
 802ffa4:	d01f      	beq.n	802ffe6 <HAL_GPIO_DeInit+0xaa>
 802ffa6:	687b      	ldr	r3, [r7, #4]
 802ffa8:	4a57      	ldr	r2, [pc, #348]	; (8030108 <HAL_GPIO_DeInit+0x1cc>)
 802ffaa:	4293      	cmp	r3, r2
 802ffac:	d019      	beq.n	802ffe2 <HAL_GPIO_DeInit+0xa6>
 802ffae:	687b      	ldr	r3, [r7, #4]
 802ffb0:	4a56      	ldr	r2, [pc, #344]	; (803010c <HAL_GPIO_DeInit+0x1d0>)
 802ffb2:	4293      	cmp	r3, r2
 802ffb4:	d013      	beq.n	802ffde <HAL_GPIO_DeInit+0xa2>
 802ffb6:	687b      	ldr	r3, [r7, #4]
 802ffb8:	4a55      	ldr	r2, [pc, #340]	; (8030110 <HAL_GPIO_DeInit+0x1d4>)
 802ffba:	4293      	cmp	r3, r2
 802ffbc:	d00d      	beq.n	802ffda <HAL_GPIO_DeInit+0x9e>
 802ffbe:	687b      	ldr	r3, [r7, #4]
 802ffc0:	4a54      	ldr	r2, [pc, #336]	; (8030114 <HAL_GPIO_DeInit+0x1d8>)
 802ffc2:	4293      	cmp	r3, r2
 802ffc4:	d007      	beq.n	802ffd6 <HAL_GPIO_DeInit+0x9a>
 802ffc6:	687b      	ldr	r3, [r7, #4]
 802ffc8:	4a53      	ldr	r2, [pc, #332]	; (8030118 <HAL_GPIO_DeInit+0x1dc>)
 802ffca:	4293      	cmp	r3, r2
 802ffcc:	d101      	bne.n	802ffd2 <HAL_GPIO_DeInit+0x96>
 802ffce:	2306      	movs	r3, #6
 802ffd0:	e00c      	b.n	802ffec <HAL_GPIO_DeInit+0xb0>
 802ffd2:	2307      	movs	r3, #7
 802ffd4:	e00a      	b.n	802ffec <HAL_GPIO_DeInit+0xb0>
 802ffd6:	2305      	movs	r3, #5
 802ffd8:	e008      	b.n	802ffec <HAL_GPIO_DeInit+0xb0>
 802ffda:	2304      	movs	r3, #4
 802ffdc:	e006      	b.n	802ffec <HAL_GPIO_DeInit+0xb0>
 802ffde:	2303      	movs	r3, #3
 802ffe0:	e004      	b.n	802ffec <HAL_GPIO_DeInit+0xb0>
 802ffe2:	2302      	movs	r3, #2
 802ffe4:	e002      	b.n	802ffec <HAL_GPIO_DeInit+0xb0>
 802ffe6:	2301      	movs	r3, #1
 802ffe8:	e000      	b.n	802ffec <HAL_GPIO_DeInit+0xb0>
 802ffea:	2300      	movs	r3, #0
 802ffec:	697a      	ldr	r2, [r7, #20]
 802ffee:	f002 0203 	and.w	r2, r2, #3
 802fff2:	0092      	lsls	r2, r2, #2
 802fff4:	4093      	lsls	r3, r2
 802fff6:	68ba      	ldr	r2, [r7, #8]
 802fff8:	429a      	cmp	r2, r3
 802fffa:	d132      	bne.n	8030062 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 802fffc:	4b47      	ldr	r3, [pc, #284]	; (803011c <HAL_GPIO_DeInit+0x1e0>)
 802fffe:	681a      	ldr	r2, [r3, #0]
 8030000:	68fb      	ldr	r3, [r7, #12]
 8030002:	43db      	mvns	r3, r3
 8030004:	4945      	ldr	r1, [pc, #276]	; (803011c <HAL_GPIO_DeInit+0x1e0>)
 8030006:	4013      	ands	r3, r2
 8030008:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 803000a:	4b44      	ldr	r3, [pc, #272]	; (803011c <HAL_GPIO_DeInit+0x1e0>)
 803000c:	685a      	ldr	r2, [r3, #4]
 803000e:	68fb      	ldr	r3, [r7, #12]
 8030010:	43db      	mvns	r3, r3
 8030012:	4942      	ldr	r1, [pc, #264]	; (803011c <HAL_GPIO_DeInit+0x1e0>)
 8030014:	4013      	ands	r3, r2
 8030016:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8030018:	4b40      	ldr	r3, [pc, #256]	; (803011c <HAL_GPIO_DeInit+0x1e0>)
 803001a:	689a      	ldr	r2, [r3, #8]
 803001c:	68fb      	ldr	r3, [r7, #12]
 803001e:	43db      	mvns	r3, r3
 8030020:	493e      	ldr	r1, [pc, #248]	; (803011c <HAL_GPIO_DeInit+0x1e0>)
 8030022:	4013      	ands	r3, r2
 8030024:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8030026:	4b3d      	ldr	r3, [pc, #244]	; (803011c <HAL_GPIO_DeInit+0x1e0>)
 8030028:	68da      	ldr	r2, [r3, #12]
 803002a:	68fb      	ldr	r3, [r7, #12]
 803002c:	43db      	mvns	r3, r3
 803002e:	493b      	ldr	r1, [pc, #236]	; (803011c <HAL_GPIO_DeInit+0x1e0>)
 8030030:	4013      	ands	r3, r2
 8030032:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8030034:	697b      	ldr	r3, [r7, #20]
 8030036:	f003 0303 	and.w	r3, r3, #3
 803003a:	009b      	lsls	r3, r3, #2
 803003c:	220f      	movs	r2, #15
 803003e:	fa02 f303 	lsl.w	r3, r2, r3
 8030042:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8030044:	4a2d      	ldr	r2, [pc, #180]	; (80300fc <HAL_GPIO_DeInit+0x1c0>)
 8030046:	697b      	ldr	r3, [r7, #20]
 8030048:	089b      	lsrs	r3, r3, #2
 803004a:	3302      	adds	r3, #2
 803004c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8030050:	68bb      	ldr	r3, [r7, #8]
 8030052:	43da      	mvns	r2, r3
 8030054:	4829      	ldr	r0, [pc, #164]	; (80300fc <HAL_GPIO_DeInit+0x1c0>)
 8030056:	697b      	ldr	r3, [r7, #20]
 8030058:	089b      	lsrs	r3, r3, #2
 803005a:	400a      	ands	r2, r1
 803005c:	3302      	adds	r3, #2
 803005e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8030062:	687b      	ldr	r3, [r7, #4]
 8030064:	681a      	ldr	r2, [r3, #0]
 8030066:	697b      	ldr	r3, [r7, #20]
 8030068:	005b      	lsls	r3, r3, #1
 803006a:	2103      	movs	r1, #3
 803006c:	fa01 f303 	lsl.w	r3, r1, r3
 8030070:	43db      	mvns	r3, r3
 8030072:	401a      	ands	r2, r3
 8030074:	687b      	ldr	r3, [r7, #4]
 8030076:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8030078:	697b      	ldr	r3, [r7, #20]
 803007a:	08da      	lsrs	r2, r3, #3
 803007c:	687b      	ldr	r3, [r7, #4]
 803007e:	3208      	adds	r2, #8
 8030080:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8030084:	697b      	ldr	r3, [r7, #20]
 8030086:	f003 0307 	and.w	r3, r3, #7
 803008a:	009b      	lsls	r3, r3, #2
 803008c:	220f      	movs	r2, #15
 803008e:	fa02 f303 	lsl.w	r3, r2, r3
 8030092:	43db      	mvns	r3, r3
 8030094:	697a      	ldr	r2, [r7, #20]
 8030096:	08d2      	lsrs	r2, r2, #3
 8030098:	4019      	ands	r1, r3
 803009a:	687b      	ldr	r3, [r7, #4]
 803009c:	3208      	adds	r2, #8
 803009e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80300a2:	687b      	ldr	r3, [r7, #4]
 80300a4:	68da      	ldr	r2, [r3, #12]
 80300a6:	697b      	ldr	r3, [r7, #20]
 80300a8:	005b      	lsls	r3, r3, #1
 80300aa:	2103      	movs	r1, #3
 80300ac:	fa01 f303 	lsl.w	r3, r1, r3
 80300b0:	43db      	mvns	r3, r3
 80300b2:	401a      	ands	r2, r3
 80300b4:	687b      	ldr	r3, [r7, #4]
 80300b6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80300b8:	687b      	ldr	r3, [r7, #4]
 80300ba:	685a      	ldr	r2, [r3, #4]
 80300bc:	2101      	movs	r1, #1
 80300be:	697b      	ldr	r3, [r7, #20]
 80300c0:	fa01 f303 	lsl.w	r3, r1, r3
 80300c4:	43db      	mvns	r3, r3
 80300c6:	401a      	ands	r2, r3
 80300c8:	687b      	ldr	r3, [r7, #4]
 80300ca:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80300cc:	687b      	ldr	r3, [r7, #4]
 80300ce:	689a      	ldr	r2, [r3, #8]
 80300d0:	697b      	ldr	r3, [r7, #20]
 80300d2:	005b      	lsls	r3, r3, #1
 80300d4:	2103      	movs	r1, #3
 80300d6:	fa01 f303 	lsl.w	r3, r1, r3
 80300da:	43db      	mvns	r3, r3
 80300dc:	401a      	ands	r2, r3
 80300de:	687b      	ldr	r3, [r7, #4]
 80300e0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80300e2:	697b      	ldr	r3, [r7, #20]
 80300e4:	3301      	adds	r3, #1
 80300e6:	617b      	str	r3, [r7, #20]
 80300e8:	697b      	ldr	r3, [r7, #20]
 80300ea:	2b0f      	cmp	r3, #15
 80300ec:	f67f af34 	bls.w	802ff58 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80300f0:	bf00      	nop
 80300f2:	371c      	adds	r7, #28
 80300f4:	46bd      	mov	sp, r7
 80300f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80300fa:	4770      	bx	lr
 80300fc:	40013800 	.word	0x40013800
 8030100:	40020000 	.word	0x40020000
 8030104:	40020400 	.word	0x40020400
 8030108:	40020800 	.word	0x40020800
 803010c:	40020c00 	.word	0x40020c00
 8030110:	40021000 	.word	0x40021000
 8030114:	40021400 	.word	0x40021400
 8030118:	40021800 	.word	0x40021800
 803011c:	40013c00 	.word	0x40013c00

08030120 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8030120:	b480      	push	{r7}
 8030122:	b085      	sub	sp, #20
 8030124:	af00      	add	r7, sp, #0
 8030126:	6078      	str	r0, [r7, #4]
 8030128:	460b      	mov	r3, r1
 803012a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 803012c:	687b      	ldr	r3, [r7, #4]
 803012e:	691a      	ldr	r2, [r3, #16]
 8030130:	887b      	ldrh	r3, [r7, #2]
 8030132:	4013      	ands	r3, r2
 8030134:	2b00      	cmp	r3, #0
 8030136:	d002      	beq.n	803013e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8030138:	2301      	movs	r3, #1
 803013a:	73fb      	strb	r3, [r7, #15]
 803013c:	e001      	b.n	8030142 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 803013e:	2300      	movs	r3, #0
 8030140:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8030142:	7bfb      	ldrb	r3, [r7, #15]
}
 8030144:	4618      	mov	r0, r3
 8030146:	3714      	adds	r7, #20
 8030148:	46bd      	mov	sp, r7
 803014a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803014e:	4770      	bx	lr

08030150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8030150:	b480      	push	{r7}
 8030152:	b083      	sub	sp, #12
 8030154:	af00      	add	r7, sp, #0
 8030156:	6078      	str	r0, [r7, #4]
 8030158:	460b      	mov	r3, r1
 803015a:	807b      	strh	r3, [r7, #2]
 803015c:	4613      	mov	r3, r2
 803015e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8030160:	787b      	ldrb	r3, [r7, #1]
 8030162:	2b00      	cmp	r3, #0
 8030164:	d003      	beq.n	803016e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8030166:	887a      	ldrh	r2, [r7, #2]
 8030168:	687b      	ldr	r3, [r7, #4]
 803016a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 803016c:	e003      	b.n	8030176 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 803016e:	887b      	ldrh	r3, [r7, #2]
 8030170:	041a      	lsls	r2, r3, #16
 8030172:	687b      	ldr	r3, [r7, #4]
 8030174:	619a      	str	r2, [r3, #24]
}
 8030176:	bf00      	nop
 8030178:	370c      	adds	r7, #12
 803017a:	46bd      	mov	sp, r7
 803017c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030180:	4770      	bx	lr

08030182 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8030182:	b480      	push	{r7}
 8030184:	b083      	sub	sp, #12
 8030186:	af00      	add	r7, sp, #0
 8030188:	6078      	str	r0, [r7, #4]
 803018a:	460b      	mov	r3, r1
 803018c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 803018e:	687b      	ldr	r3, [r7, #4]
 8030190:	695a      	ldr	r2, [r3, #20]
 8030192:	887b      	ldrh	r3, [r7, #2]
 8030194:	401a      	ands	r2, r3
 8030196:	887b      	ldrh	r3, [r7, #2]
 8030198:	429a      	cmp	r2, r3
 803019a:	d104      	bne.n	80301a6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 803019c:	887b      	ldrh	r3, [r7, #2]
 803019e:	041a      	lsls	r2, r3, #16
 80301a0:	687b      	ldr	r3, [r7, #4]
 80301a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80301a4:	e002      	b.n	80301ac <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80301a6:	887a      	ldrh	r2, [r7, #2]
 80301a8:	687b      	ldr	r3, [r7, #4]
 80301aa:	619a      	str	r2, [r3, #24]
}
 80301ac:	bf00      	nop
 80301ae:	370c      	adds	r7, #12
 80301b0:	46bd      	mov	sp, r7
 80301b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80301b6:	4770      	bx	lr

080301b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80301b8:	b580      	push	{r7, lr}
 80301ba:	b082      	sub	sp, #8
 80301bc:	af00      	add	r7, sp, #0
 80301be:	4603      	mov	r3, r0
 80301c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80301c2:	4b08      	ldr	r3, [pc, #32]	; (80301e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80301c4:	695a      	ldr	r2, [r3, #20]
 80301c6:	88fb      	ldrh	r3, [r7, #6]
 80301c8:	4013      	ands	r3, r2
 80301ca:	2b00      	cmp	r3, #0
 80301cc:	d006      	beq.n	80301dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80301ce:	4a05      	ldr	r2, [pc, #20]	; (80301e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80301d0:	88fb      	ldrh	r3, [r7, #6]
 80301d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80301d4:	88fb      	ldrh	r3, [r7, #6]
 80301d6:	4618      	mov	r0, r3
 80301d8:	f7fa f9ae 	bl	802a538 <HAL_GPIO_EXTI_Callback>
  }
}
 80301dc:	bf00      	nop
 80301de:	3708      	adds	r7, #8
 80301e0:	46bd      	mov	sp, r7
 80301e2:	bd80      	pop	{r7, pc}
 80301e4:	40013c00 	.word	0x40013c00

080301e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80301e8:	b580      	push	{r7, lr}
 80301ea:	b084      	sub	sp, #16
 80301ec:	af00      	add	r7, sp, #0
 80301ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80301f0:	687b      	ldr	r3, [r7, #4]
 80301f2:	2b00      	cmp	r3, #0
 80301f4:	d101      	bne.n	80301fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80301f6:	2301      	movs	r3, #1
 80301f8:	e11f      	b.n	803043a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80301fa:	687b      	ldr	r3, [r7, #4]
 80301fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8030200:	b2db      	uxtb	r3, r3
 8030202:	2b00      	cmp	r3, #0
 8030204:	d106      	bne.n	8030214 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8030206:	687b      	ldr	r3, [r7, #4]
 8030208:	2200      	movs	r2, #0
 803020a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 803020e:	6878      	ldr	r0, [r7, #4]
 8030210:	f7fb fa6c 	bl	802b6ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8030214:	687b      	ldr	r3, [r7, #4]
 8030216:	2224      	movs	r2, #36	; 0x24
 8030218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 803021c:	687b      	ldr	r3, [r7, #4]
 803021e:	681b      	ldr	r3, [r3, #0]
 8030220:	681a      	ldr	r2, [r3, #0]
 8030222:	687b      	ldr	r3, [r7, #4]
 8030224:	681b      	ldr	r3, [r3, #0]
 8030226:	f022 0201 	bic.w	r2, r2, #1
 803022a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 803022c:	687b      	ldr	r3, [r7, #4]
 803022e:	681b      	ldr	r3, [r3, #0]
 8030230:	681a      	ldr	r2, [r3, #0]
 8030232:	687b      	ldr	r3, [r7, #4]
 8030234:	681b      	ldr	r3, [r3, #0]
 8030236:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 803023a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 803023c:	687b      	ldr	r3, [r7, #4]
 803023e:	681b      	ldr	r3, [r3, #0]
 8030240:	681a      	ldr	r2, [r3, #0]
 8030242:	687b      	ldr	r3, [r7, #4]
 8030244:	681b      	ldr	r3, [r3, #0]
 8030246:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 803024a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 803024c:	f003 fe96 	bl	8033f7c <HAL_RCC_GetPCLK1Freq>
 8030250:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8030252:	687b      	ldr	r3, [r7, #4]
 8030254:	685b      	ldr	r3, [r3, #4]
 8030256:	4a7b      	ldr	r2, [pc, #492]	; (8030444 <HAL_I2C_Init+0x25c>)
 8030258:	4293      	cmp	r3, r2
 803025a:	d807      	bhi.n	803026c <HAL_I2C_Init+0x84>
 803025c:	68fb      	ldr	r3, [r7, #12]
 803025e:	4a7a      	ldr	r2, [pc, #488]	; (8030448 <HAL_I2C_Init+0x260>)
 8030260:	4293      	cmp	r3, r2
 8030262:	bf94      	ite	ls
 8030264:	2301      	movls	r3, #1
 8030266:	2300      	movhi	r3, #0
 8030268:	b2db      	uxtb	r3, r3
 803026a:	e006      	b.n	803027a <HAL_I2C_Init+0x92>
 803026c:	68fb      	ldr	r3, [r7, #12]
 803026e:	4a77      	ldr	r2, [pc, #476]	; (803044c <HAL_I2C_Init+0x264>)
 8030270:	4293      	cmp	r3, r2
 8030272:	bf94      	ite	ls
 8030274:	2301      	movls	r3, #1
 8030276:	2300      	movhi	r3, #0
 8030278:	b2db      	uxtb	r3, r3
 803027a:	2b00      	cmp	r3, #0
 803027c:	d001      	beq.n	8030282 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 803027e:	2301      	movs	r3, #1
 8030280:	e0db      	b.n	803043a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8030282:	68fb      	ldr	r3, [r7, #12]
 8030284:	4a72      	ldr	r2, [pc, #456]	; (8030450 <HAL_I2C_Init+0x268>)
 8030286:	fba2 2303 	umull	r2, r3, r2, r3
 803028a:	0c9b      	lsrs	r3, r3, #18
 803028c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 803028e:	687b      	ldr	r3, [r7, #4]
 8030290:	681b      	ldr	r3, [r3, #0]
 8030292:	685b      	ldr	r3, [r3, #4]
 8030294:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8030298:	687b      	ldr	r3, [r7, #4]
 803029a:	681b      	ldr	r3, [r3, #0]
 803029c:	68ba      	ldr	r2, [r7, #8]
 803029e:	430a      	orrs	r2, r1
 80302a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80302a2:	687b      	ldr	r3, [r7, #4]
 80302a4:	681b      	ldr	r3, [r3, #0]
 80302a6:	6a1b      	ldr	r3, [r3, #32]
 80302a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80302ac:	687b      	ldr	r3, [r7, #4]
 80302ae:	685b      	ldr	r3, [r3, #4]
 80302b0:	4a64      	ldr	r2, [pc, #400]	; (8030444 <HAL_I2C_Init+0x25c>)
 80302b2:	4293      	cmp	r3, r2
 80302b4:	d802      	bhi.n	80302bc <HAL_I2C_Init+0xd4>
 80302b6:	68bb      	ldr	r3, [r7, #8]
 80302b8:	3301      	adds	r3, #1
 80302ba:	e009      	b.n	80302d0 <HAL_I2C_Init+0xe8>
 80302bc:	68bb      	ldr	r3, [r7, #8]
 80302be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80302c2:	fb02 f303 	mul.w	r3, r2, r3
 80302c6:	4a63      	ldr	r2, [pc, #396]	; (8030454 <HAL_I2C_Init+0x26c>)
 80302c8:	fba2 2303 	umull	r2, r3, r2, r3
 80302cc:	099b      	lsrs	r3, r3, #6
 80302ce:	3301      	adds	r3, #1
 80302d0:	687a      	ldr	r2, [r7, #4]
 80302d2:	6812      	ldr	r2, [r2, #0]
 80302d4:	430b      	orrs	r3, r1
 80302d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80302d8:	687b      	ldr	r3, [r7, #4]
 80302da:	681b      	ldr	r3, [r3, #0]
 80302dc:	69db      	ldr	r3, [r3, #28]
 80302de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80302e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80302e6:	687b      	ldr	r3, [r7, #4]
 80302e8:	685b      	ldr	r3, [r3, #4]
 80302ea:	4956      	ldr	r1, [pc, #344]	; (8030444 <HAL_I2C_Init+0x25c>)
 80302ec:	428b      	cmp	r3, r1
 80302ee:	d80d      	bhi.n	803030c <HAL_I2C_Init+0x124>
 80302f0:	68fb      	ldr	r3, [r7, #12]
 80302f2:	1e59      	subs	r1, r3, #1
 80302f4:	687b      	ldr	r3, [r7, #4]
 80302f6:	685b      	ldr	r3, [r3, #4]
 80302f8:	005b      	lsls	r3, r3, #1
 80302fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80302fe:	3301      	adds	r3, #1
 8030300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8030304:	2b04      	cmp	r3, #4
 8030306:	bf38      	it	cc
 8030308:	2304      	movcc	r3, #4
 803030a:	e04f      	b.n	80303ac <HAL_I2C_Init+0x1c4>
 803030c:	687b      	ldr	r3, [r7, #4]
 803030e:	689b      	ldr	r3, [r3, #8]
 8030310:	2b00      	cmp	r3, #0
 8030312:	d111      	bne.n	8030338 <HAL_I2C_Init+0x150>
 8030314:	68fb      	ldr	r3, [r7, #12]
 8030316:	1e58      	subs	r0, r3, #1
 8030318:	687b      	ldr	r3, [r7, #4]
 803031a:	6859      	ldr	r1, [r3, #4]
 803031c:	460b      	mov	r3, r1
 803031e:	005b      	lsls	r3, r3, #1
 8030320:	440b      	add	r3, r1
 8030322:	fbb0 f3f3 	udiv	r3, r0, r3
 8030326:	3301      	adds	r3, #1
 8030328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 803032c:	2b00      	cmp	r3, #0
 803032e:	bf0c      	ite	eq
 8030330:	2301      	moveq	r3, #1
 8030332:	2300      	movne	r3, #0
 8030334:	b2db      	uxtb	r3, r3
 8030336:	e012      	b.n	803035e <HAL_I2C_Init+0x176>
 8030338:	68fb      	ldr	r3, [r7, #12]
 803033a:	1e58      	subs	r0, r3, #1
 803033c:	687b      	ldr	r3, [r7, #4]
 803033e:	6859      	ldr	r1, [r3, #4]
 8030340:	460b      	mov	r3, r1
 8030342:	009b      	lsls	r3, r3, #2
 8030344:	440b      	add	r3, r1
 8030346:	0099      	lsls	r1, r3, #2
 8030348:	440b      	add	r3, r1
 803034a:	fbb0 f3f3 	udiv	r3, r0, r3
 803034e:	3301      	adds	r3, #1
 8030350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8030354:	2b00      	cmp	r3, #0
 8030356:	bf0c      	ite	eq
 8030358:	2301      	moveq	r3, #1
 803035a:	2300      	movne	r3, #0
 803035c:	b2db      	uxtb	r3, r3
 803035e:	2b00      	cmp	r3, #0
 8030360:	d001      	beq.n	8030366 <HAL_I2C_Init+0x17e>
 8030362:	2301      	movs	r3, #1
 8030364:	e022      	b.n	80303ac <HAL_I2C_Init+0x1c4>
 8030366:	687b      	ldr	r3, [r7, #4]
 8030368:	689b      	ldr	r3, [r3, #8]
 803036a:	2b00      	cmp	r3, #0
 803036c:	d10e      	bne.n	803038c <HAL_I2C_Init+0x1a4>
 803036e:	68fb      	ldr	r3, [r7, #12]
 8030370:	1e58      	subs	r0, r3, #1
 8030372:	687b      	ldr	r3, [r7, #4]
 8030374:	6859      	ldr	r1, [r3, #4]
 8030376:	460b      	mov	r3, r1
 8030378:	005b      	lsls	r3, r3, #1
 803037a:	440b      	add	r3, r1
 803037c:	fbb0 f3f3 	udiv	r3, r0, r3
 8030380:	3301      	adds	r3, #1
 8030382:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8030386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 803038a:	e00f      	b.n	80303ac <HAL_I2C_Init+0x1c4>
 803038c:	68fb      	ldr	r3, [r7, #12]
 803038e:	1e58      	subs	r0, r3, #1
 8030390:	687b      	ldr	r3, [r7, #4]
 8030392:	6859      	ldr	r1, [r3, #4]
 8030394:	460b      	mov	r3, r1
 8030396:	009b      	lsls	r3, r3, #2
 8030398:	440b      	add	r3, r1
 803039a:	0099      	lsls	r1, r3, #2
 803039c:	440b      	add	r3, r1
 803039e:	fbb0 f3f3 	udiv	r3, r0, r3
 80303a2:	3301      	adds	r3, #1
 80303a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80303a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80303ac:	6879      	ldr	r1, [r7, #4]
 80303ae:	6809      	ldr	r1, [r1, #0]
 80303b0:	4313      	orrs	r3, r2
 80303b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80303b4:	687b      	ldr	r3, [r7, #4]
 80303b6:	681b      	ldr	r3, [r3, #0]
 80303b8:	681b      	ldr	r3, [r3, #0]
 80303ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80303be:	687b      	ldr	r3, [r7, #4]
 80303c0:	69da      	ldr	r2, [r3, #28]
 80303c2:	687b      	ldr	r3, [r7, #4]
 80303c4:	6a1b      	ldr	r3, [r3, #32]
 80303c6:	431a      	orrs	r2, r3
 80303c8:	687b      	ldr	r3, [r7, #4]
 80303ca:	681b      	ldr	r3, [r3, #0]
 80303cc:	430a      	orrs	r2, r1
 80303ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80303d0:	687b      	ldr	r3, [r7, #4]
 80303d2:	681b      	ldr	r3, [r3, #0]
 80303d4:	689b      	ldr	r3, [r3, #8]
 80303d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80303da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80303de:	687a      	ldr	r2, [r7, #4]
 80303e0:	6911      	ldr	r1, [r2, #16]
 80303e2:	687a      	ldr	r2, [r7, #4]
 80303e4:	68d2      	ldr	r2, [r2, #12]
 80303e6:	4311      	orrs	r1, r2
 80303e8:	687a      	ldr	r2, [r7, #4]
 80303ea:	6812      	ldr	r2, [r2, #0]
 80303ec:	430b      	orrs	r3, r1
 80303ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80303f0:	687b      	ldr	r3, [r7, #4]
 80303f2:	681b      	ldr	r3, [r3, #0]
 80303f4:	68db      	ldr	r3, [r3, #12]
 80303f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80303fa:	687b      	ldr	r3, [r7, #4]
 80303fc:	695a      	ldr	r2, [r3, #20]
 80303fe:	687b      	ldr	r3, [r7, #4]
 8030400:	699b      	ldr	r3, [r3, #24]
 8030402:	431a      	orrs	r2, r3
 8030404:	687b      	ldr	r3, [r7, #4]
 8030406:	681b      	ldr	r3, [r3, #0]
 8030408:	430a      	orrs	r2, r1
 803040a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 803040c:	687b      	ldr	r3, [r7, #4]
 803040e:	681b      	ldr	r3, [r3, #0]
 8030410:	681a      	ldr	r2, [r3, #0]
 8030412:	687b      	ldr	r3, [r7, #4]
 8030414:	681b      	ldr	r3, [r3, #0]
 8030416:	f042 0201 	orr.w	r2, r2, #1
 803041a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 803041c:	687b      	ldr	r3, [r7, #4]
 803041e:	2200      	movs	r2, #0
 8030420:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8030422:	687b      	ldr	r3, [r7, #4]
 8030424:	2220      	movs	r2, #32
 8030426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 803042a:	687b      	ldr	r3, [r7, #4]
 803042c:	2200      	movs	r2, #0
 803042e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8030430:	687b      	ldr	r3, [r7, #4]
 8030432:	2200      	movs	r2, #0
 8030434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8030438:	2300      	movs	r3, #0
}
 803043a:	4618      	mov	r0, r3
 803043c:	3710      	adds	r7, #16
 803043e:	46bd      	mov	sp, r7
 8030440:	bd80      	pop	{r7, pc}
 8030442:	bf00      	nop
 8030444:	000186a0 	.word	0x000186a0
 8030448:	001e847f 	.word	0x001e847f
 803044c:	003d08ff 	.word	0x003d08ff
 8030450:	431bde83 	.word	0x431bde83
 8030454:	10624dd3 	.word	0x10624dd3

08030458 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8030458:	b580      	push	{r7, lr}
 803045a:	b088      	sub	sp, #32
 803045c:	af02      	add	r7, sp, #8
 803045e:	60f8      	str	r0, [r7, #12]
 8030460:	607a      	str	r2, [r7, #4]
 8030462:	461a      	mov	r2, r3
 8030464:	460b      	mov	r3, r1
 8030466:	817b      	strh	r3, [r7, #10]
 8030468:	4613      	mov	r3, r2
 803046a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 803046c:	f7fb ff7e 	bl	802c36c <HAL_GetTick>
 8030470:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8030472:	68fb      	ldr	r3, [r7, #12]
 8030474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8030478:	b2db      	uxtb	r3, r3
 803047a:	2b20      	cmp	r3, #32
 803047c:	f040 80e0 	bne.w	8030640 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8030480:	697b      	ldr	r3, [r7, #20]
 8030482:	9300      	str	r3, [sp, #0]
 8030484:	2319      	movs	r3, #25
 8030486:	2201      	movs	r2, #1
 8030488:	4970      	ldr	r1, [pc, #448]	; (803064c <HAL_I2C_Master_Transmit+0x1f4>)
 803048a:	68f8      	ldr	r0, [r7, #12]
 803048c:	f002 fb21 	bl	8032ad2 <I2C_WaitOnFlagUntilTimeout>
 8030490:	4603      	mov	r3, r0
 8030492:	2b00      	cmp	r3, #0
 8030494:	d001      	beq.n	803049a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8030496:	2302      	movs	r3, #2
 8030498:	e0d3      	b.n	8030642 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 803049a:	68fb      	ldr	r3, [r7, #12]
 803049c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80304a0:	2b01      	cmp	r3, #1
 80304a2:	d101      	bne.n	80304a8 <HAL_I2C_Master_Transmit+0x50>
 80304a4:	2302      	movs	r3, #2
 80304a6:	e0cc      	b.n	8030642 <HAL_I2C_Master_Transmit+0x1ea>
 80304a8:	68fb      	ldr	r3, [r7, #12]
 80304aa:	2201      	movs	r2, #1
 80304ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80304b0:	68fb      	ldr	r3, [r7, #12]
 80304b2:	681b      	ldr	r3, [r3, #0]
 80304b4:	681b      	ldr	r3, [r3, #0]
 80304b6:	f003 0301 	and.w	r3, r3, #1
 80304ba:	2b01      	cmp	r3, #1
 80304bc:	d007      	beq.n	80304ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80304be:	68fb      	ldr	r3, [r7, #12]
 80304c0:	681b      	ldr	r3, [r3, #0]
 80304c2:	681a      	ldr	r2, [r3, #0]
 80304c4:	68fb      	ldr	r3, [r7, #12]
 80304c6:	681b      	ldr	r3, [r3, #0]
 80304c8:	f042 0201 	orr.w	r2, r2, #1
 80304cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80304ce:	68fb      	ldr	r3, [r7, #12]
 80304d0:	681b      	ldr	r3, [r3, #0]
 80304d2:	681a      	ldr	r2, [r3, #0]
 80304d4:	68fb      	ldr	r3, [r7, #12]
 80304d6:	681b      	ldr	r3, [r3, #0]
 80304d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80304dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80304de:	68fb      	ldr	r3, [r7, #12]
 80304e0:	2221      	movs	r2, #33	; 0x21
 80304e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80304e6:	68fb      	ldr	r3, [r7, #12]
 80304e8:	2210      	movs	r2, #16
 80304ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80304ee:	68fb      	ldr	r3, [r7, #12]
 80304f0:	2200      	movs	r2, #0
 80304f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80304f4:	68fb      	ldr	r3, [r7, #12]
 80304f6:	687a      	ldr	r2, [r7, #4]
 80304f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80304fa:	68fb      	ldr	r3, [r7, #12]
 80304fc:	893a      	ldrh	r2, [r7, #8]
 80304fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8030500:	68fb      	ldr	r3, [r7, #12]
 8030502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8030504:	b29a      	uxth	r2, r3
 8030506:	68fb      	ldr	r3, [r7, #12]
 8030508:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 803050a:	68fb      	ldr	r3, [r7, #12]
 803050c:	4a50      	ldr	r2, [pc, #320]	; (8030650 <HAL_I2C_Master_Transmit+0x1f8>)
 803050e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8030510:	8979      	ldrh	r1, [r7, #10]
 8030512:	697b      	ldr	r3, [r7, #20]
 8030514:	6a3a      	ldr	r2, [r7, #32]
 8030516:	68f8      	ldr	r0, [r7, #12]
 8030518:	f002 f860 	bl	80325dc <I2C_MasterRequestWrite>
 803051c:	4603      	mov	r3, r0
 803051e:	2b00      	cmp	r3, #0
 8030520:	d001      	beq.n	8030526 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8030522:	2301      	movs	r3, #1
 8030524:	e08d      	b.n	8030642 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8030526:	2300      	movs	r3, #0
 8030528:	613b      	str	r3, [r7, #16]
 803052a:	68fb      	ldr	r3, [r7, #12]
 803052c:	681b      	ldr	r3, [r3, #0]
 803052e:	695b      	ldr	r3, [r3, #20]
 8030530:	613b      	str	r3, [r7, #16]
 8030532:	68fb      	ldr	r3, [r7, #12]
 8030534:	681b      	ldr	r3, [r3, #0]
 8030536:	699b      	ldr	r3, [r3, #24]
 8030538:	613b      	str	r3, [r7, #16]
 803053a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 803053c:	e066      	b.n	803060c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 803053e:	697a      	ldr	r2, [r7, #20]
 8030540:	6a39      	ldr	r1, [r7, #32]
 8030542:	68f8      	ldr	r0, [r7, #12]
 8030544:	f002 fb9b 	bl	8032c7e <I2C_WaitOnTXEFlagUntilTimeout>
 8030548:	4603      	mov	r3, r0
 803054a:	2b00      	cmp	r3, #0
 803054c:	d00d      	beq.n	803056a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 803054e:	68fb      	ldr	r3, [r7, #12]
 8030550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8030552:	2b04      	cmp	r3, #4
 8030554:	d107      	bne.n	8030566 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8030556:	68fb      	ldr	r3, [r7, #12]
 8030558:	681b      	ldr	r3, [r3, #0]
 803055a:	681a      	ldr	r2, [r3, #0]
 803055c:	68fb      	ldr	r3, [r7, #12]
 803055e:	681b      	ldr	r3, [r3, #0]
 8030560:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8030564:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8030566:	2301      	movs	r3, #1
 8030568:	e06b      	b.n	8030642 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 803056a:	68fb      	ldr	r3, [r7, #12]
 803056c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803056e:	781a      	ldrb	r2, [r3, #0]
 8030570:	68fb      	ldr	r3, [r7, #12]
 8030572:	681b      	ldr	r3, [r3, #0]
 8030574:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8030576:	68fb      	ldr	r3, [r7, #12]
 8030578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803057a:	1c5a      	adds	r2, r3, #1
 803057c:	68fb      	ldr	r3, [r7, #12]
 803057e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8030580:	68fb      	ldr	r3, [r7, #12]
 8030582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8030584:	b29b      	uxth	r3, r3
 8030586:	3b01      	subs	r3, #1
 8030588:	b29a      	uxth	r2, r3
 803058a:	68fb      	ldr	r3, [r7, #12]
 803058c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 803058e:	68fb      	ldr	r3, [r7, #12]
 8030590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8030592:	3b01      	subs	r3, #1
 8030594:	b29a      	uxth	r2, r3
 8030596:	68fb      	ldr	r3, [r7, #12]
 8030598:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 803059a:	68fb      	ldr	r3, [r7, #12]
 803059c:	681b      	ldr	r3, [r3, #0]
 803059e:	695b      	ldr	r3, [r3, #20]
 80305a0:	f003 0304 	and.w	r3, r3, #4
 80305a4:	2b04      	cmp	r3, #4
 80305a6:	d11b      	bne.n	80305e0 <HAL_I2C_Master_Transmit+0x188>
 80305a8:	68fb      	ldr	r3, [r7, #12]
 80305aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80305ac:	2b00      	cmp	r3, #0
 80305ae:	d017      	beq.n	80305e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80305b0:	68fb      	ldr	r3, [r7, #12]
 80305b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80305b4:	781a      	ldrb	r2, [r3, #0]
 80305b6:	68fb      	ldr	r3, [r7, #12]
 80305b8:	681b      	ldr	r3, [r3, #0]
 80305ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80305bc:	68fb      	ldr	r3, [r7, #12]
 80305be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80305c0:	1c5a      	adds	r2, r3, #1
 80305c2:	68fb      	ldr	r3, [r7, #12]
 80305c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80305c6:	68fb      	ldr	r3, [r7, #12]
 80305c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80305ca:	b29b      	uxth	r3, r3
 80305cc:	3b01      	subs	r3, #1
 80305ce:	b29a      	uxth	r2, r3
 80305d0:	68fb      	ldr	r3, [r7, #12]
 80305d2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80305d4:	68fb      	ldr	r3, [r7, #12]
 80305d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80305d8:	3b01      	subs	r3, #1
 80305da:	b29a      	uxth	r2, r3
 80305dc:	68fb      	ldr	r3, [r7, #12]
 80305de:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80305e0:	697a      	ldr	r2, [r7, #20]
 80305e2:	6a39      	ldr	r1, [r7, #32]
 80305e4:	68f8      	ldr	r0, [r7, #12]
 80305e6:	f002 fb8b 	bl	8032d00 <I2C_WaitOnBTFFlagUntilTimeout>
 80305ea:	4603      	mov	r3, r0
 80305ec:	2b00      	cmp	r3, #0
 80305ee:	d00d      	beq.n	803060c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80305f0:	68fb      	ldr	r3, [r7, #12]
 80305f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80305f4:	2b04      	cmp	r3, #4
 80305f6:	d107      	bne.n	8030608 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80305f8:	68fb      	ldr	r3, [r7, #12]
 80305fa:	681b      	ldr	r3, [r3, #0]
 80305fc:	681a      	ldr	r2, [r3, #0]
 80305fe:	68fb      	ldr	r3, [r7, #12]
 8030600:	681b      	ldr	r3, [r3, #0]
 8030602:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8030606:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8030608:	2301      	movs	r3, #1
 803060a:	e01a      	b.n	8030642 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 803060c:	68fb      	ldr	r3, [r7, #12]
 803060e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8030610:	2b00      	cmp	r3, #0
 8030612:	d194      	bne.n	803053e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8030614:	68fb      	ldr	r3, [r7, #12]
 8030616:	681b      	ldr	r3, [r3, #0]
 8030618:	681a      	ldr	r2, [r3, #0]
 803061a:	68fb      	ldr	r3, [r7, #12]
 803061c:	681b      	ldr	r3, [r3, #0]
 803061e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8030622:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8030624:	68fb      	ldr	r3, [r7, #12]
 8030626:	2220      	movs	r2, #32
 8030628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 803062c:	68fb      	ldr	r3, [r7, #12]
 803062e:	2200      	movs	r2, #0
 8030630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8030634:	68fb      	ldr	r3, [r7, #12]
 8030636:	2200      	movs	r2, #0
 8030638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 803063c:	2300      	movs	r3, #0
 803063e:	e000      	b.n	8030642 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8030640:	2302      	movs	r3, #2
  }
}
 8030642:	4618      	mov	r0, r3
 8030644:	3718      	adds	r7, #24
 8030646:	46bd      	mov	sp, r7
 8030648:	bd80      	pop	{r7, pc}
 803064a:	bf00      	nop
 803064c:	00100002 	.word	0x00100002
 8030650:	ffff0000 	.word	0xffff0000

08030654 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8030654:	b580      	push	{r7, lr}
 8030656:	b088      	sub	sp, #32
 8030658:	af02      	add	r7, sp, #8
 803065a:	60f8      	str	r0, [r7, #12]
 803065c:	4608      	mov	r0, r1
 803065e:	4611      	mov	r1, r2
 8030660:	461a      	mov	r2, r3
 8030662:	4603      	mov	r3, r0
 8030664:	817b      	strh	r3, [r7, #10]
 8030666:	460b      	mov	r3, r1
 8030668:	813b      	strh	r3, [r7, #8]
 803066a:	4613      	mov	r3, r2
 803066c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 803066e:	f7fb fe7d 	bl	802c36c <HAL_GetTick>
 8030672:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8030674:	68fb      	ldr	r3, [r7, #12]
 8030676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 803067a:	b2db      	uxtb	r3, r3
 803067c:	2b20      	cmp	r3, #32
 803067e:	f040 80d9 	bne.w	8030834 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8030682:	697b      	ldr	r3, [r7, #20]
 8030684:	9300      	str	r3, [sp, #0]
 8030686:	2319      	movs	r3, #25
 8030688:	2201      	movs	r2, #1
 803068a:	496d      	ldr	r1, [pc, #436]	; (8030840 <HAL_I2C_Mem_Write+0x1ec>)
 803068c:	68f8      	ldr	r0, [r7, #12]
 803068e:	f002 fa20 	bl	8032ad2 <I2C_WaitOnFlagUntilTimeout>
 8030692:	4603      	mov	r3, r0
 8030694:	2b00      	cmp	r3, #0
 8030696:	d001      	beq.n	803069c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8030698:	2302      	movs	r3, #2
 803069a:	e0cc      	b.n	8030836 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 803069c:	68fb      	ldr	r3, [r7, #12]
 803069e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80306a2:	2b01      	cmp	r3, #1
 80306a4:	d101      	bne.n	80306aa <HAL_I2C_Mem_Write+0x56>
 80306a6:	2302      	movs	r3, #2
 80306a8:	e0c5      	b.n	8030836 <HAL_I2C_Mem_Write+0x1e2>
 80306aa:	68fb      	ldr	r3, [r7, #12]
 80306ac:	2201      	movs	r2, #1
 80306ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80306b2:	68fb      	ldr	r3, [r7, #12]
 80306b4:	681b      	ldr	r3, [r3, #0]
 80306b6:	681b      	ldr	r3, [r3, #0]
 80306b8:	f003 0301 	and.w	r3, r3, #1
 80306bc:	2b01      	cmp	r3, #1
 80306be:	d007      	beq.n	80306d0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80306c0:	68fb      	ldr	r3, [r7, #12]
 80306c2:	681b      	ldr	r3, [r3, #0]
 80306c4:	681a      	ldr	r2, [r3, #0]
 80306c6:	68fb      	ldr	r3, [r7, #12]
 80306c8:	681b      	ldr	r3, [r3, #0]
 80306ca:	f042 0201 	orr.w	r2, r2, #1
 80306ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80306d0:	68fb      	ldr	r3, [r7, #12]
 80306d2:	681b      	ldr	r3, [r3, #0]
 80306d4:	681a      	ldr	r2, [r3, #0]
 80306d6:	68fb      	ldr	r3, [r7, #12]
 80306d8:	681b      	ldr	r3, [r3, #0]
 80306da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80306de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80306e0:	68fb      	ldr	r3, [r7, #12]
 80306e2:	2221      	movs	r2, #33	; 0x21
 80306e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80306e8:	68fb      	ldr	r3, [r7, #12]
 80306ea:	2240      	movs	r2, #64	; 0x40
 80306ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80306f0:	68fb      	ldr	r3, [r7, #12]
 80306f2:	2200      	movs	r2, #0
 80306f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80306f6:	68fb      	ldr	r3, [r7, #12]
 80306f8:	6a3a      	ldr	r2, [r7, #32]
 80306fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80306fc:	68fb      	ldr	r3, [r7, #12]
 80306fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8030700:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8030702:	68fb      	ldr	r3, [r7, #12]
 8030704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8030706:	b29a      	uxth	r2, r3
 8030708:	68fb      	ldr	r3, [r7, #12]
 803070a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 803070c:	68fb      	ldr	r3, [r7, #12]
 803070e:	4a4d      	ldr	r2, [pc, #308]	; (8030844 <HAL_I2C_Mem_Write+0x1f0>)
 8030710:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8030712:	88f8      	ldrh	r0, [r7, #6]
 8030714:	893a      	ldrh	r2, [r7, #8]
 8030716:	8979      	ldrh	r1, [r7, #10]
 8030718:	697b      	ldr	r3, [r7, #20]
 803071a:	9301      	str	r3, [sp, #4]
 803071c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803071e:	9300      	str	r3, [sp, #0]
 8030720:	4603      	mov	r3, r0
 8030722:	68f8      	ldr	r0, [r7, #12]
 8030724:	f001 ffdc 	bl	80326e0 <I2C_RequestMemoryWrite>
 8030728:	4603      	mov	r3, r0
 803072a:	2b00      	cmp	r3, #0
 803072c:	d052      	beq.n	80307d4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 803072e:	2301      	movs	r3, #1
 8030730:	e081      	b.n	8030836 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8030732:	697a      	ldr	r2, [r7, #20]
 8030734:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8030736:	68f8      	ldr	r0, [r7, #12]
 8030738:	f002 faa1 	bl	8032c7e <I2C_WaitOnTXEFlagUntilTimeout>
 803073c:	4603      	mov	r3, r0
 803073e:	2b00      	cmp	r3, #0
 8030740:	d00d      	beq.n	803075e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8030742:	68fb      	ldr	r3, [r7, #12]
 8030744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8030746:	2b04      	cmp	r3, #4
 8030748:	d107      	bne.n	803075a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 803074a:	68fb      	ldr	r3, [r7, #12]
 803074c:	681b      	ldr	r3, [r3, #0]
 803074e:	681a      	ldr	r2, [r3, #0]
 8030750:	68fb      	ldr	r3, [r7, #12]
 8030752:	681b      	ldr	r3, [r3, #0]
 8030754:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8030758:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 803075a:	2301      	movs	r3, #1
 803075c:	e06b      	b.n	8030836 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 803075e:	68fb      	ldr	r3, [r7, #12]
 8030760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030762:	781a      	ldrb	r2, [r3, #0]
 8030764:	68fb      	ldr	r3, [r7, #12]
 8030766:	681b      	ldr	r3, [r3, #0]
 8030768:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 803076a:	68fb      	ldr	r3, [r7, #12]
 803076c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803076e:	1c5a      	adds	r2, r3, #1
 8030770:	68fb      	ldr	r3, [r7, #12]
 8030772:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8030774:	68fb      	ldr	r3, [r7, #12]
 8030776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8030778:	3b01      	subs	r3, #1
 803077a:	b29a      	uxth	r2, r3
 803077c:	68fb      	ldr	r3, [r7, #12]
 803077e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8030780:	68fb      	ldr	r3, [r7, #12]
 8030782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8030784:	b29b      	uxth	r3, r3
 8030786:	3b01      	subs	r3, #1
 8030788:	b29a      	uxth	r2, r3
 803078a:	68fb      	ldr	r3, [r7, #12]
 803078c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 803078e:	68fb      	ldr	r3, [r7, #12]
 8030790:	681b      	ldr	r3, [r3, #0]
 8030792:	695b      	ldr	r3, [r3, #20]
 8030794:	f003 0304 	and.w	r3, r3, #4
 8030798:	2b04      	cmp	r3, #4
 803079a:	d11b      	bne.n	80307d4 <HAL_I2C_Mem_Write+0x180>
 803079c:	68fb      	ldr	r3, [r7, #12]
 803079e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80307a0:	2b00      	cmp	r3, #0
 80307a2:	d017      	beq.n	80307d4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80307a4:	68fb      	ldr	r3, [r7, #12]
 80307a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80307a8:	781a      	ldrb	r2, [r3, #0]
 80307aa:	68fb      	ldr	r3, [r7, #12]
 80307ac:	681b      	ldr	r3, [r3, #0]
 80307ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80307b0:	68fb      	ldr	r3, [r7, #12]
 80307b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80307b4:	1c5a      	adds	r2, r3, #1
 80307b6:	68fb      	ldr	r3, [r7, #12]
 80307b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80307ba:	68fb      	ldr	r3, [r7, #12]
 80307bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80307be:	3b01      	subs	r3, #1
 80307c0:	b29a      	uxth	r2, r3
 80307c2:	68fb      	ldr	r3, [r7, #12]
 80307c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80307c6:	68fb      	ldr	r3, [r7, #12]
 80307c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80307ca:	b29b      	uxth	r3, r3
 80307cc:	3b01      	subs	r3, #1
 80307ce:	b29a      	uxth	r2, r3
 80307d0:	68fb      	ldr	r3, [r7, #12]
 80307d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80307d4:	68fb      	ldr	r3, [r7, #12]
 80307d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80307d8:	2b00      	cmp	r3, #0
 80307da:	d1aa      	bne.n	8030732 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80307dc:	697a      	ldr	r2, [r7, #20]
 80307de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80307e0:	68f8      	ldr	r0, [r7, #12]
 80307e2:	f002 fa8d 	bl	8032d00 <I2C_WaitOnBTFFlagUntilTimeout>
 80307e6:	4603      	mov	r3, r0
 80307e8:	2b00      	cmp	r3, #0
 80307ea:	d00d      	beq.n	8030808 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80307ec:	68fb      	ldr	r3, [r7, #12]
 80307ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80307f0:	2b04      	cmp	r3, #4
 80307f2:	d107      	bne.n	8030804 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80307f4:	68fb      	ldr	r3, [r7, #12]
 80307f6:	681b      	ldr	r3, [r3, #0]
 80307f8:	681a      	ldr	r2, [r3, #0]
 80307fa:	68fb      	ldr	r3, [r7, #12]
 80307fc:	681b      	ldr	r3, [r3, #0]
 80307fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8030802:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8030804:	2301      	movs	r3, #1
 8030806:	e016      	b.n	8030836 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8030808:	68fb      	ldr	r3, [r7, #12]
 803080a:	681b      	ldr	r3, [r3, #0]
 803080c:	681a      	ldr	r2, [r3, #0]
 803080e:	68fb      	ldr	r3, [r7, #12]
 8030810:	681b      	ldr	r3, [r3, #0]
 8030812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8030816:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8030818:	68fb      	ldr	r3, [r7, #12]
 803081a:	2220      	movs	r2, #32
 803081c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8030820:	68fb      	ldr	r3, [r7, #12]
 8030822:	2200      	movs	r2, #0
 8030824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8030828:	68fb      	ldr	r3, [r7, #12]
 803082a:	2200      	movs	r2, #0
 803082c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8030830:	2300      	movs	r3, #0
 8030832:	e000      	b.n	8030836 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8030834:	2302      	movs	r3, #2
  }
}
 8030836:	4618      	mov	r0, r3
 8030838:	3718      	adds	r7, #24
 803083a:	46bd      	mov	sp, r7
 803083c:	bd80      	pop	{r7, pc}
 803083e:	bf00      	nop
 8030840:	00100002 	.word	0x00100002
 8030844:	ffff0000 	.word	0xffff0000

08030848 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8030848:	b580      	push	{r7, lr}
 803084a:	b08c      	sub	sp, #48	; 0x30
 803084c:	af02      	add	r7, sp, #8
 803084e:	60f8      	str	r0, [r7, #12]
 8030850:	4608      	mov	r0, r1
 8030852:	4611      	mov	r1, r2
 8030854:	461a      	mov	r2, r3
 8030856:	4603      	mov	r3, r0
 8030858:	817b      	strh	r3, [r7, #10]
 803085a:	460b      	mov	r3, r1
 803085c:	813b      	strh	r3, [r7, #8]
 803085e:	4613      	mov	r3, r2
 8030860:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8030862:	f7fb fd83 	bl	802c36c <HAL_GetTick>
 8030866:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8030868:	68fb      	ldr	r3, [r7, #12]
 803086a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 803086e:	b2db      	uxtb	r3, r3
 8030870:	2b20      	cmp	r3, #32
 8030872:	f040 8208 	bne.w	8030c86 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8030876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030878:	9300      	str	r3, [sp, #0]
 803087a:	2319      	movs	r3, #25
 803087c:	2201      	movs	r2, #1
 803087e:	497b      	ldr	r1, [pc, #492]	; (8030a6c <HAL_I2C_Mem_Read+0x224>)
 8030880:	68f8      	ldr	r0, [r7, #12]
 8030882:	f002 f926 	bl	8032ad2 <I2C_WaitOnFlagUntilTimeout>
 8030886:	4603      	mov	r3, r0
 8030888:	2b00      	cmp	r3, #0
 803088a:	d001      	beq.n	8030890 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 803088c:	2302      	movs	r3, #2
 803088e:	e1fb      	b.n	8030c88 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8030890:	68fb      	ldr	r3, [r7, #12]
 8030892:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8030896:	2b01      	cmp	r3, #1
 8030898:	d101      	bne.n	803089e <HAL_I2C_Mem_Read+0x56>
 803089a:	2302      	movs	r3, #2
 803089c:	e1f4      	b.n	8030c88 <HAL_I2C_Mem_Read+0x440>
 803089e:	68fb      	ldr	r3, [r7, #12]
 80308a0:	2201      	movs	r2, #1
 80308a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80308a6:	68fb      	ldr	r3, [r7, #12]
 80308a8:	681b      	ldr	r3, [r3, #0]
 80308aa:	681b      	ldr	r3, [r3, #0]
 80308ac:	f003 0301 	and.w	r3, r3, #1
 80308b0:	2b01      	cmp	r3, #1
 80308b2:	d007      	beq.n	80308c4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80308b4:	68fb      	ldr	r3, [r7, #12]
 80308b6:	681b      	ldr	r3, [r3, #0]
 80308b8:	681a      	ldr	r2, [r3, #0]
 80308ba:	68fb      	ldr	r3, [r7, #12]
 80308bc:	681b      	ldr	r3, [r3, #0]
 80308be:	f042 0201 	orr.w	r2, r2, #1
 80308c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80308c4:	68fb      	ldr	r3, [r7, #12]
 80308c6:	681b      	ldr	r3, [r3, #0]
 80308c8:	681a      	ldr	r2, [r3, #0]
 80308ca:	68fb      	ldr	r3, [r7, #12]
 80308cc:	681b      	ldr	r3, [r3, #0]
 80308ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80308d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80308d4:	68fb      	ldr	r3, [r7, #12]
 80308d6:	2222      	movs	r2, #34	; 0x22
 80308d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80308dc:	68fb      	ldr	r3, [r7, #12]
 80308de:	2240      	movs	r2, #64	; 0x40
 80308e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80308e4:	68fb      	ldr	r3, [r7, #12]
 80308e6:	2200      	movs	r2, #0
 80308e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80308ea:	68fb      	ldr	r3, [r7, #12]
 80308ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80308ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80308f0:	68fb      	ldr	r3, [r7, #12]
 80308f2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80308f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80308f6:	68fb      	ldr	r3, [r7, #12]
 80308f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80308fa:	b29a      	uxth	r2, r3
 80308fc:	68fb      	ldr	r3, [r7, #12]
 80308fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8030900:	68fb      	ldr	r3, [r7, #12]
 8030902:	4a5b      	ldr	r2, [pc, #364]	; (8030a70 <HAL_I2C_Mem_Read+0x228>)
 8030904:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8030906:	88f8      	ldrh	r0, [r7, #6]
 8030908:	893a      	ldrh	r2, [r7, #8]
 803090a:	8979      	ldrh	r1, [r7, #10]
 803090c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803090e:	9301      	str	r3, [sp, #4]
 8030910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8030912:	9300      	str	r3, [sp, #0]
 8030914:	4603      	mov	r3, r0
 8030916:	68f8      	ldr	r0, [r7, #12]
 8030918:	f001 ff76 	bl	8032808 <I2C_RequestMemoryRead>
 803091c:	4603      	mov	r3, r0
 803091e:	2b00      	cmp	r3, #0
 8030920:	d001      	beq.n	8030926 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8030922:	2301      	movs	r3, #1
 8030924:	e1b0      	b.n	8030c88 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8030926:	68fb      	ldr	r3, [r7, #12]
 8030928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 803092a:	2b00      	cmp	r3, #0
 803092c:	d113      	bne.n	8030956 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 803092e:	2300      	movs	r3, #0
 8030930:	623b      	str	r3, [r7, #32]
 8030932:	68fb      	ldr	r3, [r7, #12]
 8030934:	681b      	ldr	r3, [r3, #0]
 8030936:	695b      	ldr	r3, [r3, #20]
 8030938:	623b      	str	r3, [r7, #32]
 803093a:	68fb      	ldr	r3, [r7, #12]
 803093c:	681b      	ldr	r3, [r3, #0]
 803093e:	699b      	ldr	r3, [r3, #24]
 8030940:	623b      	str	r3, [r7, #32]
 8030942:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8030944:	68fb      	ldr	r3, [r7, #12]
 8030946:	681b      	ldr	r3, [r3, #0]
 8030948:	681a      	ldr	r2, [r3, #0]
 803094a:	68fb      	ldr	r3, [r7, #12]
 803094c:	681b      	ldr	r3, [r3, #0]
 803094e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8030952:	601a      	str	r2, [r3, #0]
 8030954:	e184      	b.n	8030c60 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8030956:	68fb      	ldr	r3, [r7, #12]
 8030958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 803095a:	2b01      	cmp	r3, #1
 803095c:	d11b      	bne.n	8030996 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 803095e:	68fb      	ldr	r3, [r7, #12]
 8030960:	681b      	ldr	r3, [r3, #0]
 8030962:	681a      	ldr	r2, [r3, #0]
 8030964:	68fb      	ldr	r3, [r7, #12]
 8030966:	681b      	ldr	r3, [r3, #0]
 8030968:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 803096c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 803096e:	2300      	movs	r3, #0
 8030970:	61fb      	str	r3, [r7, #28]
 8030972:	68fb      	ldr	r3, [r7, #12]
 8030974:	681b      	ldr	r3, [r3, #0]
 8030976:	695b      	ldr	r3, [r3, #20]
 8030978:	61fb      	str	r3, [r7, #28]
 803097a:	68fb      	ldr	r3, [r7, #12]
 803097c:	681b      	ldr	r3, [r3, #0]
 803097e:	699b      	ldr	r3, [r3, #24]
 8030980:	61fb      	str	r3, [r7, #28]
 8030982:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8030984:	68fb      	ldr	r3, [r7, #12]
 8030986:	681b      	ldr	r3, [r3, #0]
 8030988:	681a      	ldr	r2, [r3, #0]
 803098a:	68fb      	ldr	r3, [r7, #12]
 803098c:	681b      	ldr	r3, [r3, #0]
 803098e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8030992:	601a      	str	r2, [r3, #0]
 8030994:	e164      	b.n	8030c60 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8030996:	68fb      	ldr	r3, [r7, #12]
 8030998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 803099a:	2b02      	cmp	r3, #2
 803099c:	d11b      	bne.n	80309d6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 803099e:	68fb      	ldr	r3, [r7, #12]
 80309a0:	681b      	ldr	r3, [r3, #0]
 80309a2:	681a      	ldr	r2, [r3, #0]
 80309a4:	68fb      	ldr	r3, [r7, #12]
 80309a6:	681b      	ldr	r3, [r3, #0]
 80309a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80309ac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80309ae:	68fb      	ldr	r3, [r7, #12]
 80309b0:	681b      	ldr	r3, [r3, #0]
 80309b2:	681a      	ldr	r2, [r3, #0]
 80309b4:	68fb      	ldr	r3, [r7, #12]
 80309b6:	681b      	ldr	r3, [r3, #0]
 80309b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80309bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80309be:	2300      	movs	r3, #0
 80309c0:	61bb      	str	r3, [r7, #24]
 80309c2:	68fb      	ldr	r3, [r7, #12]
 80309c4:	681b      	ldr	r3, [r3, #0]
 80309c6:	695b      	ldr	r3, [r3, #20]
 80309c8:	61bb      	str	r3, [r7, #24]
 80309ca:	68fb      	ldr	r3, [r7, #12]
 80309cc:	681b      	ldr	r3, [r3, #0]
 80309ce:	699b      	ldr	r3, [r3, #24]
 80309d0:	61bb      	str	r3, [r7, #24]
 80309d2:	69bb      	ldr	r3, [r7, #24]
 80309d4:	e144      	b.n	8030c60 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80309d6:	2300      	movs	r3, #0
 80309d8:	617b      	str	r3, [r7, #20]
 80309da:	68fb      	ldr	r3, [r7, #12]
 80309dc:	681b      	ldr	r3, [r3, #0]
 80309de:	695b      	ldr	r3, [r3, #20]
 80309e0:	617b      	str	r3, [r7, #20]
 80309e2:	68fb      	ldr	r3, [r7, #12]
 80309e4:	681b      	ldr	r3, [r3, #0]
 80309e6:	699b      	ldr	r3, [r3, #24]
 80309e8:	617b      	str	r3, [r7, #20]
 80309ea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80309ec:	e138      	b.n	8030c60 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80309ee:	68fb      	ldr	r3, [r7, #12]
 80309f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80309f2:	2b03      	cmp	r3, #3
 80309f4:	f200 80f1 	bhi.w	8030bda <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80309f8:	68fb      	ldr	r3, [r7, #12]
 80309fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80309fc:	2b01      	cmp	r3, #1
 80309fe:	d123      	bne.n	8030a48 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8030a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8030a02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8030a04:	68f8      	ldr	r0, [r7, #12]
 8030a06:	f002 f9bc 	bl	8032d82 <I2C_WaitOnRXNEFlagUntilTimeout>
 8030a0a:	4603      	mov	r3, r0
 8030a0c:	2b00      	cmp	r3, #0
 8030a0e:	d001      	beq.n	8030a14 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8030a10:	2301      	movs	r3, #1
 8030a12:	e139      	b.n	8030c88 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8030a14:	68fb      	ldr	r3, [r7, #12]
 8030a16:	681b      	ldr	r3, [r3, #0]
 8030a18:	691a      	ldr	r2, [r3, #16]
 8030a1a:	68fb      	ldr	r3, [r7, #12]
 8030a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030a1e:	b2d2      	uxtb	r2, r2
 8030a20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8030a22:	68fb      	ldr	r3, [r7, #12]
 8030a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030a26:	1c5a      	adds	r2, r3, #1
 8030a28:	68fb      	ldr	r3, [r7, #12]
 8030a2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8030a2c:	68fb      	ldr	r3, [r7, #12]
 8030a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8030a30:	3b01      	subs	r3, #1
 8030a32:	b29a      	uxth	r2, r3
 8030a34:	68fb      	ldr	r3, [r7, #12]
 8030a36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8030a38:	68fb      	ldr	r3, [r7, #12]
 8030a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8030a3c:	b29b      	uxth	r3, r3
 8030a3e:	3b01      	subs	r3, #1
 8030a40:	b29a      	uxth	r2, r3
 8030a42:	68fb      	ldr	r3, [r7, #12]
 8030a44:	855a      	strh	r2, [r3, #42]	; 0x2a
 8030a46:	e10b      	b.n	8030c60 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8030a48:	68fb      	ldr	r3, [r7, #12]
 8030a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8030a4c:	2b02      	cmp	r3, #2
 8030a4e:	d14e      	bne.n	8030aee <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8030a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030a52:	9300      	str	r3, [sp, #0]
 8030a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8030a56:	2200      	movs	r2, #0
 8030a58:	4906      	ldr	r1, [pc, #24]	; (8030a74 <HAL_I2C_Mem_Read+0x22c>)
 8030a5a:	68f8      	ldr	r0, [r7, #12]
 8030a5c:	f002 f839 	bl	8032ad2 <I2C_WaitOnFlagUntilTimeout>
 8030a60:	4603      	mov	r3, r0
 8030a62:	2b00      	cmp	r3, #0
 8030a64:	d008      	beq.n	8030a78 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8030a66:	2301      	movs	r3, #1
 8030a68:	e10e      	b.n	8030c88 <HAL_I2C_Mem_Read+0x440>
 8030a6a:	bf00      	nop
 8030a6c:	00100002 	.word	0x00100002
 8030a70:	ffff0000 	.word	0xffff0000
 8030a74:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8030a78:	68fb      	ldr	r3, [r7, #12]
 8030a7a:	681b      	ldr	r3, [r3, #0]
 8030a7c:	681a      	ldr	r2, [r3, #0]
 8030a7e:	68fb      	ldr	r3, [r7, #12]
 8030a80:	681b      	ldr	r3, [r3, #0]
 8030a82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8030a86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8030a88:	68fb      	ldr	r3, [r7, #12]
 8030a8a:	681b      	ldr	r3, [r3, #0]
 8030a8c:	691a      	ldr	r2, [r3, #16]
 8030a8e:	68fb      	ldr	r3, [r7, #12]
 8030a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030a92:	b2d2      	uxtb	r2, r2
 8030a94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8030a96:	68fb      	ldr	r3, [r7, #12]
 8030a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030a9a:	1c5a      	adds	r2, r3, #1
 8030a9c:	68fb      	ldr	r3, [r7, #12]
 8030a9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8030aa0:	68fb      	ldr	r3, [r7, #12]
 8030aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8030aa4:	3b01      	subs	r3, #1
 8030aa6:	b29a      	uxth	r2, r3
 8030aa8:	68fb      	ldr	r3, [r7, #12]
 8030aaa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8030aac:	68fb      	ldr	r3, [r7, #12]
 8030aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8030ab0:	b29b      	uxth	r3, r3
 8030ab2:	3b01      	subs	r3, #1
 8030ab4:	b29a      	uxth	r2, r3
 8030ab6:	68fb      	ldr	r3, [r7, #12]
 8030ab8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8030aba:	68fb      	ldr	r3, [r7, #12]
 8030abc:	681b      	ldr	r3, [r3, #0]
 8030abe:	691a      	ldr	r2, [r3, #16]
 8030ac0:	68fb      	ldr	r3, [r7, #12]
 8030ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030ac4:	b2d2      	uxtb	r2, r2
 8030ac6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8030ac8:	68fb      	ldr	r3, [r7, #12]
 8030aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030acc:	1c5a      	adds	r2, r3, #1
 8030ace:	68fb      	ldr	r3, [r7, #12]
 8030ad0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8030ad2:	68fb      	ldr	r3, [r7, #12]
 8030ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8030ad6:	3b01      	subs	r3, #1
 8030ad8:	b29a      	uxth	r2, r3
 8030ada:	68fb      	ldr	r3, [r7, #12]
 8030adc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8030ade:	68fb      	ldr	r3, [r7, #12]
 8030ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8030ae2:	b29b      	uxth	r3, r3
 8030ae4:	3b01      	subs	r3, #1
 8030ae6:	b29a      	uxth	r2, r3
 8030ae8:	68fb      	ldr	r3, [r7, #12]
 8030aea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8030aec:	e0b8      	b.n	8030c60 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8030aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030af0:	9300      	str	r3, [sp, #0]
 8030af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8030af4:	2200      	movs	r2, #0
 8030af6:	4966      	ldr	r1, [pc, #408]	; (8030c90 <HAL_I2C_Mem_Read+0x448>)
 8030af8:	68f8      	ldr	r0, [r7, #12]
 8030afa:	f001 ffea 	bl	8032ad2 <I2C_WaitOnFlagUntilTimeout>
 8030afe:	4603      	mov	r3, r0
 8030b00:	2b00      	cmp	r3, #0
 8030b02:	d001      	beq.n	8030b08 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8030b04:	2301      	movs	r3, #1
 8030b06:	e0bf      	b.n	8030c88 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8030b08:	68fb      	ldr	r3, [r7, #12]
 8030b0a:	681b      	ldr	r3, [r3, #0]
 8030b0c:	681a      	ldr	r2, [r3, #0]
 8030b0e:	68fb      	ldr	r3, [r7, #12]
 8030b10:	681b      	ldr	r3, [r3, #0]
 8030b12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8030b16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8030b18:	68fb      	ldr	r3, [r7, #12]
 8030b1a:	681b      	ldr	r3, [r3, #0]
 8030b1c:	691a      	ldr	r2, [r3, #16]
 8030b1e:	68fb      	ldr	r3, [r7, #12]
 8030b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030b22:	b2d2      	uxtb	r2, r2
 8030b24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8030b26:	68fb      	ldr	r3, [r7, #12]
 8030b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030b2a:	1c5a      	adds	r2, r3, #1
 8030b2c:	68fb      	ldr	r3, [r7, #12]
 8030b2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8030b30:	68fb      	ldr	r3, [r7, #12]
 8030b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8030b34:	3b01      	subs	r3, #1
 8030b36:	b29a      	uxth	r2, r3
 8030b38:	68fb      	ldr	r3, [r7, #12]
 8030b3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8030b3c:	68fb      	ldr	r3, [r7, #12]
 8030b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8030b40:	b29b      	uxth	r3, r3
 8030b42:	3b01      	subs	r3, #1
 8030b44:	b29a      	uxth	r2, r3
 8030b46:	68fb      	ldr	r3, [r7, #12]
 8030b48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8030b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030b4c:	9300      	str	r3, [sp, #0]
 8030b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8030b50:	2200      	movs	r2, #0
 8030b52:	494f      	ldr	r1, [pc, #316]	; (8030c90 <HAL_I2C_Mem_Read+0x448>)
 8030b54:	68f8      	ldr	r0, [r7, #12]
 8030b56:	f001 ffbc 	bl	8032ad2 <I2C_WaitOnFlagUntilTimeout>
 8030b5a:	4603      	mov	r3, r0
 8030b5c:	2b00      	cmp	r3, #0
 8030b5e:	d001      	beq.n	8030b64 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8030b60:	2301      	movs	r3, #1
 8030b62:	e091      	b.n	8030c88 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8030b64:	68fb      	ldr	r3, [r7, #12]
 8030b66:	681b      	ldr	r3, [r3, #0]
 8030b68:	681a      	ldr	r2, [r3, #0]
 8030b6a:	68fb      	ldr	r3, [r7, #12]
 8030b6c:	681b      	ldr	r3, [r3, #0]
 8030b6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8030b72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8030b74:	68fb      	ldr	r3, [r7, #12]
 8030b76:	681b      	ldr	r3, [r3, #0]
 8030b78:	691a      	ldr	r2, [r3, #16]
 8030b7a:	68fb      	ldr	r3, [r7, #12]
 8030b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030b7e:	b2d2      	uxtb	r2, r2
 8030b80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8030b82:	68fb      	ldr	r3, [r7, #12]
 8030b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030b86:	1c5a      	adds	r2, r3, #1
 8030b88:	68fb      	ldr	r3, [r7, #12]
 8030b8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8030b8c:	68fb      	ldr	r3, [r7, #12]
 8030b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8030b90:	3b01      	subs	r3, #1
 8030b92:	b29a      	uxth	r2, r3
 8030b94:	68fb      	ldr	r3, [r7, #12]
 8030b96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8030b98:	68fb      	ldr	r3, [r7, #12]
 8030b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8030b9c:	b29b      	uxth	r3, r3
 8030b9e:	3b01      	subs	r3, #1
 8030ba0:	b29a      	uxth	r2, r3
 8030ba2:	68fb      	ldr	r3, [r7, #12]
 8030ba4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8030ba6:	68fb      	ldr	r3, [r7, #12]
 8030ba8:	681b      	ldr	r3, [r3, #0]
 8030baa:	691a      	ldr	r2, [r3, #16]
 8030bac:	68fb      	ldr	r3, [r7, #12]
 8030bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030bb0:	b2d2      	uxtb	r2, r2
 8030bb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8030bb4:	68fb      	ldr	r3, [r7, #12]
 8030bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030bb8:	1c5a      	adds	r2, r3, #1
 8030bba:	68fb      	ldr	r3, [r7, #12]
 8030bbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8030bbe:	68fb      	ldr	r3, [r7, #12]
 8030bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8030bc2:	3b01      	subs	r3, #1
 8030bc4:	b29a      	uxth	r2, r3
 8030bc6:	68fb      	ldr	r3, [r7, #12]
 8030bc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8030bca:	68fb      	ldr	r3, [r7, #12]
 8030bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8030bce:	b29b      	uxth	r3, r3
 8030bd0:	3b01      	subs	r3, #1
 8030bd2:	b29a      	uxth	r2, r3
 8030bd4:	68fb      	ldr	r3, [r7, #12]
 8030bd6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8030bd8:	e042      	b.n	8030c60 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8030bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8030bdc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8030bde:	68f8      	ldr	r0, [r7, #12]
 8030be0:	f002 f8cf 	bl	8032d82 <I2C_WaitOnRXNEFlagUntilTimeout>
 8030be4:	4603      	mov	r3, r0
 8030be6:	2b00      	cmp	r3, #0
 8030be8:	d001      	beq.n	8030bee <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8030bea:	2301      	movs	r3, #1
 8030bec:	e04c      	b.n	8030c88 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8030bee:	68fb      	ldr	r3, [r7, #12]
 8030bf0:	681b      	ldr	r3, [r3, #0]
 8030bf2:	691a      	ldr	r2, [r3, #16]
 8030bf4:	68fb      	ldr	r3, [r7, #12]
 8030bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030bf8:	b2d2      	uxtb	r2, r2
 8030bfa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8030bfc:	68fb      	ldr	r3, [r7, #12]
 8030bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030c00:	1c5a      	adds	r2, r3, #1
 8030c02:	68fb      	ldr	r3, [r7, #12]
 8030c04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8030c06:	68fb      	ldr	r3, [r7, #12]
 8030c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8030c0a:	3b01      	subs	r3, #1
 8030c0c:	b29a      	uxth	r2, r3
 8030c0e:	68fb      	ldr	r3, [r7, #12]
 8030c10:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8030c12:	68fb      	ldr	r3, [r7, #12]
 8030c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8030c16:	b29b      	uxth	r3, r3
 8030c18:	3b01      	subs	r3, #1
 8030c1a:	b29a      	uxth	r2, r3
 8030c1c:	68fb      	ldr	r3, [r7, #12]
 8030c1e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8030c20:	68fb      	ldr	r3, [r7, #12]
 8030c22:	681b      	ldr	r3, [r3, #0]
 8030c24:	695b      	ldr	r3, [r3, #20]
 8030c26:	f003 0304 	and.w	r3, r3, #4
 8030c2a:	2b04      	cmp	r3, #4
 8030c2c:	d118      	bne.n	8030c60 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8030c2e:	68fb      	ldr	r3, [r7, #12]
 8030c30:	681b      	ldr	r3, [r3, #0]
 8030c32:	691a      	ldr	r2, [r3, #16]
 8030c34:	68fb      	ldr	r3, [r7, #12]
 8030c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030c38:	b2d2      	uxtb	r2, r2
 8030c3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8030c3c:	68fb      	ldr	r3, [r7, #12]
 8030c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030c40:	1c5a      	adds	r2, r3, #1
 8030c42:	68fb      	ldr	r3, [r7, #12]
 8030c44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8030c46:	68fb      	ldr	r3, [r7, #12]
 8030c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8030c4a:	3b01      	subs	r3, #1
 8030c4c:	b29a      	uxth	r2, r3
 8030c4e:	68fb      	ldr	r3, [r7, #12]
 8030c50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8030c52:	68fb      	ldr	r3, [r7, #12]
 8030c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8030c56:	b29b      	uxth	r3, r3
 8030c58:	3b01      	subs	r3, #1
 8030c5a:	b29a      	uxth	r2, r3
 8030c5c:	68fb      	ldr	r3, [r7, #12]
 8030c5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8030c60:	68fb      	ldr	r3, [r7, #12]
 8030c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8030c64:	2b00      	cmp	r3, #0
 8030c66:	f47f aec2 	bne.w	80309ee <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8030c6a:	68fb      	ldr	r3, [r7, #12]
 8030c6c:	2220      	movs	r2, #32
 8030c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8030c72:	68fb      	ldr	r3, [r7, #12]
 8030c74:	2200      	movs	r2, #0
 8030c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8030c7a:	68fb      	ldr	r3, [r7, #12]
 8030c7c:	2200      	movs	r2, #0
 8030c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8030c82:	2300      	movs	r3, #0
 8030c84:	e000      	b.n	8030c88 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8030c86:	2302      	movs	r3, #2
  }
}
 8030c88:	4618      	mov	r0, r3
 8030c8a:	3728      	adds	r7, #40	; 0x28
 8030c8c:	46bd      	mov	sp, r7
 8030c8e:	bd80      	pop	{r7, pc}
 8030c90:	00010004 	.word	0x00010004

08030c94 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8030c94:	b580      	push	{r7, lr}
 8030c96:	b08a      	sub	sp, #40	; 0x28
 8030c98:	af02      	add	r7, sp, #8
 8030c9a:	60f8      	str	r0, [r7, #12]
 8030c9c:	607a      	str	r2, [r7, #4]
 8030c9e:	603b      	str	r3, [r7, #0]
 8030ca0:	460b      	mov	r3, r1
 8030ca2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8030ca4:	f7fb fb62 	bl	802c36c <HAL_GetTick>
 8030ca8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8030caa:	2301      	movs	r3, #1
 8030cac:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8030cae:	68fb      	ldr	r3, [r7, #12]
 8030cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8030cb4:	b2db      	uxtb	r3, r3
 8030cb6:	2b20      	cmp	r3, #32
 8030cb8:	f040 8110 	bne.w	8030edc <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8030cbc:	69fb      	ldr	r3, [r7, #28]
 8030cbe:	9300      	str	r3, [sp, #0]
 8030cc0:	2319      	movs	r3, #25
 8030cc2:	2201      	movs	r2, #1
 8030cc4:	4988      	ldr	r1, [pc, #544]	; (8030ee8 <HAL_I2C_IsDeviceReady+0x254>)
 8030cc6:	68f8      	ldr	r0, [r7, #12]
 8030cc8:	f001 ff03 	bl	8032ad2 <I2C_WaitOnFlagUntilTimeout>
 8030ccc:	4603      	mov	r3, r0
 8030cce:	2b00      	cmp	r3, #0
 8030cd0:	d001      	beq.n	8030cd6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8030cd2:	2302      	movs	r3, #2
 8030cd4:	e103      	b.n	8030ede <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8030cd6:	68fb      	ldr	r3, [r7, #12]
 8030cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8030cdc:	2b01      	cmp	r3, #1
 8030cde:	d101      	bne.n	8030ce4 <HAL_I2C_IsDeviceReady+0x50>
 8030ce0:	2302      	movs	r3, #2
 8030ce2:	e0fc      	b.n	8030ede <HAL_I2C_IsDeviceReady+0x24a>
 8030ce4:	68fb      	ldr	r3, [r7, #12]
 8030ce6:	2201      	movs	r2, #1
 8030ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8030cec:	68fb      	ldr	r3, [r7, #12]
 8030cee:	681b      	ldr	r3, [r3, #0]
 8030cf0:	681b      	ldr	r3, [r3, #0]
 8030cf2:	f003 0301 	and.w	r3, r3, #1
 8030cf6:	2b01      	cmp	r3, #1
 8030cf8:	d007      	beq.n	8030d0a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8030cfa:	68fb      	ldr	r3, [r7, #12]
 8030cfc:	681b      	ldr	r3, [r3, #0]
 8030cfe:	681a      	ldr	r2, [r3, #0]
 8030d00:	68fb      	ldr	r3, [r7, #12]
 8030d02:	681b      	ldr	r3, [r3, #0]
 8030d04:	f042 0201 	orr.w	r2, r2, #1
 8030d08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8030d0a:	68fb      	ldr	r3, [r7, #12]
 8030d0c:	681b      	ldr	r3, [r3, #0]
 8030d0e:	681a      	ldr	r2, [r3, #0]
 8030d10:	68fb      	ldr	r3, [r7, #12]
 8030d12:	681b      	ldr	r3, [r3, #0]
 8030d14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8030d18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8030d1a:	68fb      	ldr	r3, [r7, #12]
 8030d1c:	2224      	movs	r2, #36	; 0x24
 8030d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8030d22:	68fb      	ldr	r3, [r7, #12]
 8030d24:	2200      	movs	r2, #0
 8030d26:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8030d28:	68fb      	ldr	r3, [r7, #12]
 8030d2a:	4a70      	ldr	r2, [pc, #448]	; (8030eec <HAL_I2C_IsDeviceReady+0x258>)
 8030d2c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8030d2e:	68fb      	ldr	r3, [r7, #12]
 8030d30:	681b      	ldr	r3, [r3, #0]
 8030d32:	681a      	ldr	r2, [r3, #0]
 8030d34:	68fb      	ldr	r3, [r7, #12]
 8030d36:	681b      	ldr	r3, [r3, #0]
 8030d38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8030d3c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8030d3e:	69fb      	ldr	r3, [r7, #28]
 8030d40:	9300      	str	r3, [sp, #0]
 8030d42:	683b      	ldr	r3, [r7, #0]
 8030d44:	2200      	movs	r2, #0
 8030d46:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8030d4a:	68f8      	ldr	r0, [r7, #12]
 8030d4c:	f001 fec1 	bl	8032ad2 <I2C_WaitOnFlagUntilTimeout>
 8030d50:	4603      	mov	r3, r0
 8030d52:	2b00      	cmp	r3, #0
 8030d54:	d00c      	beq.n	8030d70 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 8030d56:	68fb      	ldr	r3, [r7, #12]
 8030d58:	681b      	ldr	r3, [r3, #0]
 8030d5a:	681b      	ldr	r3, [r3, #0]
 8030d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8030d60:	2b00      	cmp	r3, #0
 8030d62:	d003      	beq.n	8030d6c <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8030d64:	68fb      	ldr	r3, [r7, #12]
 8030d66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8030d6a:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8030d6c:	2303      	movs	r3, #3
 8030d6e:	e0b6      	b.n	8030ede <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8030d70:	897b      	ldrh	r3, [r7, #10]
 8030d72:	b2db      	uxtb	r3, r3
 8030d74:	461a      	mov	r2, r3
 8030d76:	68fb      	ldr	r3, [r7, #12]
 8030d78:	681b      	ldr	r3, [r3, #0]
 8030d7a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8030d7e:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8030d80:	f7fb faf4 	bl	802c36c <HAL_GetTick>
 8030d84:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8030d86:	68fb      	ldr	r3, [r7, #12]
 8030d88:	681b      	ldr	r3, [r3, #0]
 8030d8a:	695b      	ldr	r3, [r3, #20]
 8030d8c:	f003 0302 	and.w	r3, r3, #2
 8030d90:	2b02      	cmp	r3, #2
 8030d92:	bf0c      	ite	eq
 8030d94:	2301      	moveq	r3, #1
 8030d96:	2300      	movne	r3, #0
 8030d98:	b2db      	uxtb	r3, r3
 8030d9a:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8030d9c:	68fb      	ldr	r3, [r7, #12]
 8030d9e:	681b      	ldr	r3, [r3, #0]
 8030da0:	695b      	ldr	r3, [r3, #20]
 8030da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8030da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8030daa:	bf0c      	ite	eq
 8030dac:	2301      	moveq	r3, #1
 8030dae:	2300      	movne	r3, #0
 8030db0:	b2db      	uxtb	r3, r3
 8030db2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8030db4:	e025      	b.n	8030e02 <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8030db6:	f7fb fad9 	bl	802c36c <HAL_GetTick>
 8030dba:	4602      	mov	r2, r0
 8030dbc:	69fb      	ldr	r3, [r7, #28]
 8030dbe:	1ad3      	subs	r3, r2, r3
 8030dc0:	683a      	ldr	r2, [r7, #0]
 8030dc2:	429a      	cmp	r2, r3
 8030dc4:	d302      	bcc.n	8030dcc <HAL_I2C_IsDeviceReady+0x138>
 8030dc6:	683b      	ldr	r3, [r7, #0]
 8030dc8:	2b00      	cmp	r3, #0
 8030dca:	d103      	bne.n	8030dd4 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8030dcc:	68fb      	ldr	r3, [r7, #12]
 8030dce:	22a0      	movs	r2, #160	; 0xa0
 8030dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8030dd4:	68fb      	ldr	r3, [r7, #12]
 8030dd6:	681b      	ldr	r3, [r3, #0]
 8030dd8:	695b      	ldr	r3, [r3, #20]
 8030dda:	f003 0302 	and.w	r3, r3, #2
 8030dde:	2b02      	cmp	r3, #2
 8030de0:	bf0c      	ite	eq
 8030de2:	2301      	moveq	r3, #1
 8030de4:	2300      	movne	r3, #0
 8030de6:	b2db      	uxtb	r3, r3
 8030de8:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8030dea:	68fb      	ldr	r3, [r7, #12]
 8030dec:	681b      	ldr	r3, [r3, #0]
 8030dee:	695b      	ldr	r3, [r3, #20]
 8030df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8030df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8030df8:	bf0c      	ite	eq
 8030dfa:	2301      	moveq	r3, #1
 8030dfc:	2300      	movne	r3, #0
 8030dfe:	b2db      	uxtb	r3, r3
 8030e00:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8030e02:	68fb      	ldr	r3, [r7, #12]
 8030e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8030e08:	b2db      	uxtb	r3, r3
 8030e0a:	2ba0      	cmp	r3, #160	; 0xa0
 8030e0c:	d005      	beq.n	8030e1a <HAL_I2C_IsDeviceReady+0x186>
 8030e0e:	7dfb      	ldrb	r3, [r7, #23]
 8030e10:	2b00      	cmp	r3, #0
 8030e12:	d102      	bne.n	8030e1a <HAL_I2C_IsDeviceReady+0x186>
 8030e14:	7dbb      	ldrb	r3, [r7, #22]
 8030e16:	2b00      	cmp	r3, #0
 8030e18:	d0cd      	beq.n	8030db6 <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8030e1a:	68fb      	ldr	r3, [r7, #12]
 8030e1c:	2220      	movs	r2, #32
 8030e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8030e22:	68fb      	ldr	r3, [r7, #12]
 8030e24:	681b      	ldr	r3, [r3, #0]
 8030e26:	695b      	ldr	r3, [r3, #20]
 8030e28:	f003 0302 	and.w	r3, r3, #2
 8030e2c:	2b02      	cmp	r3, #2
 8030e2e:	d129      	bne.n	8030e84 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8030e30:	68fb      	ldr	r3, [r7, #12]
 8030e32:	681b      	ldr	r3, [r3, #0]
 8030e34:	681a      	ldr	r2, [r3, #0]
 8030e36:	68fb      	ldr	r3, [r7, #12]
 8030e38:	681b      	ldr	r3, [r3, #0]
 8030e3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8030e3e:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8030e40:	2300      	movs	r3, #0
 8030e42:	613b      	str	r3, [r7, #16]
 8030e44:	68fb      	ldr	r3, [r7, #12]
 8030e46:	681b      	ldr	r3, [r3, #0]
 8030e48:	695b      	ldr	r3, [r3, #20]
 8030e4a:	613b      	str	r3, [r7, #16]
 8030e4c:	68fb      	ldr	r3, [r7, #12]
 8030e4e:	681b      	ldr	r3, [r3, #0]
 8030e50:	699b      	ldr	r3, [r3, #24]
 8030e52:	613b      	str	r3, [r7, #16]
 8030e54:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8030e56:	69fb      	ldr	r3, [r7, #28]
 8030e58:	9300      	str	r3, [sp, #0]
 8030e5a:	2319      	movs	r3, #25
 8030e5c:	2201      	movs	r2, #1
 8030e5e:	4922      	ldr	r1, [pc, #136]	; (8030ee8 <HAL_I2C_IsDeviceReady+0x254>)
 8030e60:	68f8      	ldr	r0, [r7, #12]
 8030e62:	f001 fe36 	bl	8032ad2 <I2C_WaitOnFlagUntilTimeout>
 8030e66:	4603      	mov	r3, r0
 8030e68:	2b00      	cmp	r3, #0
 8030e6a:	d001      	beq.n	8030e70 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8030e6c:	2301      	movs	r3, #1
 8030e6e:	e036      	b.n	8030ede <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8030e70:	68fb      	ldr	r3, [r7, #12]
 8030e72:	2220      	movs	r2, #32
 8030e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8030e78:	68fb      	ldr	r3, [r7, #12]
 8030e7a:	2200      	movs	r2, #0
 8030e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8030e80:	2300      	movs	r3, #0
 8030e82:	e02c      	b.n	8030ede <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8030e84:	68fb      	ldr	r3, [r7, #12]
 8030e86:	681b      	ldr	r3, [r3, #0]
 8030e88:	681a      	ldr	r2, [r3, #0]
 8030e8a:	68fb      	ldr	r3, [r7, #12]
 8030e8c:	681b      	ldr	r3, [r3, #0]
 8030e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8030e92:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8030e94:	68fb      	ldr	r3, [r7, #12]
 8030e96:	681b      	ldr	r3, [r3, #0]
 8030e98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8030e9c:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8030e9e:	69fb      	ldr	r3, [r7, #28]
 8030ea0:	9300      	str	r3, [sp, #0]
 8030ea2:	2319      	movs	r3, #25
 8030ea4:	2201      	movs	r2, #1
 8030ea6:	4910      	ldr	r1, [pc, #64]	; (8030ee8 <HAL_I2C_IsDeviceReady+0x254>)
 8030ea8:	68f8      	ldr	r0, [r7, #12]
 8030eaa:	f001 fe12 	bl	8032ad2 <I2C_WaitOnFlagUntilTimeout>
 8030eae:	4603      	mov	r3, r0
 8030eb0:	2b00      	cmp	r3, #0
 8030eb2:	d001      	beq.n	8030eb8 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8030eb4:	2301      	movs	r3, #1
 8030eb6:	e012      	b.n	8030ede <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8030eb8:	69bb      	ldr	r3, [r7, #24]
 8030eba:	3301      	adds	r3, #1
 8030ebc:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8030ebe:	69ba      	ldr	r2, [r7, #24]
 8030ec0:	687b      	ldr	r3, [r7, #4]
 8030ec2:	429a      	cmp	r2, r3
 8030ec4:	f4ff af33 	bcc.w	8030d2e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8030ec8:	68fb      	ldr	r3, [r7, #12]
 8030eca:	2220      	movs	r2, #32
 8030ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8030ed0:	68fb      	ldr	r3, [r7, #12]
 8030ed2:	2200      	movs	r2, #0
 8030ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8030ed8:	2301      	movs	r3, #1
 8030eda:	e000      	b.n	8030ede <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8030edc:	2302      	movs	r3, #2
  }
}
 8030ede:	4618      	mov	r0, r3
 8030ee0:	3720      	adds	r7, #32
 8030ee2:	46bd      	mov	sp, r7
 8030ee4:	bd80      	pop	{r7, pc}
 8030ee6:	bf00      	nop
 8030ee8:	00100002 	.word	0x00100002
 8030eec:	ffff0000 	.word	0xffff0000

08030ef0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8030ef0:	b580      	push	{r7, lr}
 8030ef2:	b088      	sub	sp, #32
 8030ef4:	af00      	add	r7, sp, #0
 8030ef6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8030ef8:	2300      	movs	r3, #0
 8030efa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8030efc:	687b      	ldr	r3, [r7, #4]
 8030efe:	681b      	ldr	r3, [r3, #0]
 8030f00:	685b      	ldr	r3, [r3, #4]
 8030f02:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8030f04:	687b      	ldr	r3, [r7, #4]
 8030f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8030f08:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8030f0a:	687b      	ldr	r3, [r7, #4]
 8030f0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8030f10:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8030f12:	687b      	ldr	r3, [r7, #4]
 8030f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8030f18:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8030f1a:	7bfb      	ldrb	r3, [r7, #15]
 8030f1c:	2b10      	cmp	r3, #16
 8030f1e:	d003      	beq.n	8030f28 <HAL_I2C_EV_IRQHandler+0x38>
 8030f20:	7bfb      	ldrb	r3, [r7, #15]
 8030f22:	2b40      	cmp	r3, #64	; 0x40
 8030f24:	f040 80b6 	bne.w	8031094 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8030f28:	687b      	ldr	r3, [r7, #4]
 8030f2a:	681b      	ldr	r3, [r3, #0]
 8030f2c:	699b      	ldr	r3, [r3, #24]
 8030f2e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8030f30:	687b      	ldr	r3, [r7, #4]
 8030f32:	681b      	ldr	r3, [r3, #0]
 8030f34:	695b      	ldr	r3, [r3, #20]
 8030f36:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8030f38:	69fb      	ldr	r3, [r7, #28]
 8030f3a:	f003 0301 	and.w	r3, r3, #1
 8030f3e:	2b00      	cmp	r3, #0
 8030f40:	d10d      	bne.n	8030f5e <HAL_I2C_EV_IRQHandler+0x6e>
 8030f42:	693b      	ldr	r3, [r7, #16]
 8030f44:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8030f48:	d003      	beq.n	8030f52 <HAL_I2C_EV_IRQHandler+0x62>
 8030f4a:	693b      	ldr	r3, [r7, #16]
 8030f4c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8030f50:	d101      	bne.n	8030f56 <HAL_I2C_EV_IRQHandler+0x66>
 8030f52:	2301      	movs	r3, #1
 8030f54:	e000      	b.n	8030f58 <HAL_I2C_EV_IRQHandler+0x68>
 8030f56:	2300      	movs	r3, #0
 8030f58:	2b01      	cmp	r3, #1
 8030f5a:	f000 8127 	beq.w	80311ac <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8030f5e:	69fb      	ldr	r3, [r7, #28]
 8030f60:	f003 0301 	and.w	r3, r3, #1
 8030f64:	2b00      	cmp	r3, #0
 8030f66:	d00c      	beq.n	8030f82 <HAL_I2C_EV_IRQHandler+0x92>
 8030f68:	697b      	ldr	r3, [r7, #20]
 8030f6a:	0a5b      	lsrs	r3, r3, #9
 8030f6c:	f003 0301 	and.w	r3, r3, #1
 8030f70:	2b00      	cmp	r3, #0
 8030f72:	d006      	beq.n	8030f82 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8030f74:	6878      	ldr	r0, [r7, #4]
 8030f76:	f001 ff89 	bl	8032e8c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8030f7a:	6878      	ldr	r0, [r7, #4]
 8030f7c:	f000 fd1c 	bl	80319b8 <I2C_Master_SB>
 8030f80:	e087      	b.n	8031092 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8030f82:	69fb      	ldr	r3, [r7, #28]
 8030f84:	08db      	lsrs	r3, r3, #3
 8030f86:	f003 0301 	and.w	r3, r3, #1
 8030f8a:	2b00      	cmp	r3, #0
 8030f8c:	d009      	beq.n	8030fa2 <HAL_I2C_EV_IRQHandler+0xb2>
 8030f8e:	697b      	ldr	r3, [r7, #20]
 8030f90:	0a5b      	lsrs	r3, r3, #9
 8030f92:	f003 0301 	and.w	r3, r3, #1
 8030f96:	2b00      	cmp	r3, #0
 8030f98:	d003      	beq.n	8030fa2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8030f9a:	6878      	ldr	r0, [r7, #4]
 8030f9c:	f000 fd92 	bl	8031ac4 <I2C_Master_ADD10>
 8030fa0:	e077      	b.n	8031092 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8030fa2:	69fb      	ldr	r3, [r7, #28]
 8030fa4:	085b      	lsrs	r3, r3, #1
 8030fa6:	f003 0301 	and.w	r3, r3, #1
 8030faa:	2b00      	cmp	r3, #0
 8030fac:	d009      	beq.n	8030fc2 <HAL_I2C_EV_IRQHandler+0xd2>
 8030fae:	697b      	ldr	r3, [r7, #20]
 8030fb0:	0a5b      	lsrs	r3, r3, #9
 8030fb2:	f003 0301 	and.w	r3, r3, #1
 8030fb6:	2b00      	cmp	r3, #0
 8030fb8:	d003      	beq.n	8030fc2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8030fba:	6878      	ldr	r0, [r7, #4]
 8030fbc:	f000 fdac 	bl	8031b18 <I2C_Master_ADDR>
 8030fc0:	e067      	b.n	8031092 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8030fc2:	69bb      	ldr	r3, [r7, #24]
 8030fc4:	089b      	lsrs	r3, r3, #2
 8030fc6:	f003 0301 	and.w	r3, r3, #1
 8030fca:	2b00      	cmp	r3, #0
 8030fcc:	d030      	beq.n	8031030 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8030fce:	687b      	ldr	r3, [r7, #4]
 8030fd0:	681b      	ldr	r3, [r3, #0]
 8030fd2:	685b      	ldr	r3, [r3, #4]
 8030fd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8030fd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8030fdc:	f000 80e8 	beq.w	80311b0 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8030fe0:	69fb      	ldr	r3, [r7, #28]
 8030fe2:	09db      	lsrs	r3, r3, #7
 8030fe4:	f003 0301 	and.w	r3, r3, #1
 8030fe8:	2b00      	cmp	r3, #0
 8030fea:	d00f      	beq.n	803100c <HAL_I2C_EV_IRQHandler+0x11c>
 8030fec:	697b      	ldr	r3, [r7, #20]
 8030fee:	0a9b      	lsrs	r3, r3, #10
 8030ff0:	f003 0301 	and.w	r3, r3, #1
 8030ff4:	2b00      	cmp	r3, #0
 8030ff6:	d009      	beq.n	803100c <HAL_I2C_EV_IRQHandler+0x11c>
 8030ff8:	69fb      	ldr	r3, [r7, #28]
 8030ffa:	089b      	lsrs	r3, r3, #2
 8030ffc:	f003 0301 	and.w	r3, r3, #1
 8031000:	2b00      	cmp	r3, #0
 8031002:	d103      	bne.n	803100c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8031004:	6878      	ldr	r0, [r7, #4]
 8031006:	f000 f9e8 	bl	80313da <I2C_MasterTransmit_TXE>
 803100a:	e042      	b.n	8031092 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 803100c:	69fb      	ldr	r3, [r7, #28]
 803100e:	089b      	lsrs	r3, r3, #2
 8031010:	f003 0301 	and.w	r3, r3, #1
 8031014:	2b00      	cmp	r3, #0
 8031016:	f000 80cb 	beq.w	80311b0 <HAL_I2C_EV_IRQHandler+0x2c0>
 803101a:	697b      	ldr	r3, [r7, #20]
 803101c:	0a5b      	lsrs	r3, r3, #9
 803101e:	f003 0301 	and.w	r3, r3, #1
 8031022:	2b00      	cmp	r3, #0
 8031024:	f000 80c4 	beq.w	80311b0 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8031028:	6878      	ldr	r0, [r7, #4]
 803102a:	f000 fa72 	bl	8031512 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 803102e:	e0bf      	b.n	80311b0 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8031030:	687b      	ldr	r3, [r7, #4]
 8031032:	681b      	ldr	r3, [r3, #0]
 8031034:	685b      	ldr	r3, [r3, #4]
 8031036:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 803103a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 803103e:	f000 80b7 	beq.w	80311b0 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8031042:	69fb      	ldr	r3, [r7, #28]
 8031044:	099b      	lsrs	r3, r3, #6
 8031046:	f003 0301 	and.w	r3, r3, #1
 803104a:	2b00      	cmp	r3, #0
 803104c:	d00f      	beq.n	803106e <HAL_I2C_EV_IRQHandler+0x17e>
 803104e:	697b      	ldr	r3, [r7, #20]
 8031050:	0a9b      	lsrs	r3, r3, #10
 8031052:	f003 0301 	and.w	r3, r3, #1
 8031056:	2b00      	cmp	r3, #0
 8031058:	d009      	beq.n	803106e <HAL_I2C_EV_IRQHandler+0x17e>
 803105a:	69fb      	ldr	r3, [r7, #28]
 803105c:	089b      	lsrs	r3, r3, #2
 803105e:	f003 0301 	and.w	r3, r3, #1
 8031062:	2b00      	cmp	r3, #0
 8031064:	d103      	bne.n	803106e <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8031066:	6878      	ldr	r0, [r7, #4]
 8031068:	f000 fb3a 	bl	80316e0 <I2C_MasterReceive_RXNE>
 803106c:	e011      	b.n	8031092 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 803106e:	69fb      	ldr	r3, [r7, #28]
 8031070:	089b      	lsrs	r3, r3, #2
 8031072:	f003 0301 	and.w	r3, r3, #1
 8031076:	2b00      	cmp	r3, #0
 8031078:	f000 809a 	beq.w	80311b0 <HAL_I2C_EV_IRQHandler+0x2c0>
 803107c:	697b      	ldr	r3, [r7, #20]
 803107e:	0a5b      	lsrs	r3, r3, #9
 8031080:	f003 0301 	and.w	r3, r3, #1
 8031084:	2b00      	cmp	r3, #0
 8031086:	f000 8093 	beq.w	80311b0 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 803108a:	6878      	ldr	r0, [r7, #4]
 803108c:	f000 fbaa 	bl	80317e4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8031090:	e08e      	b.n	80311b0 <HAL_I2C_EV_IRQHandler+0x2c0>
 8031092:	e08d      	b.n	80311b0 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8031094:	687b      	ldr	r3, [r7, #4]
 8031096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8031098:	2b00      	cmp	r3, #0
 803109a:	d004      	beq.n	80310a6 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 803109c:	687b      	ldr	r3, [r7, #4]
 803109e:	681b      	ldr	r3, [r3, #0]
 80310a0:	695b      	ldr	r3, [r3, #20]
 80310a2:	61fb      	str	r3, [r7, #28]
 80310a4:	e007      	b.n	80310b6 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80310a6:	687b      	ldr	r3, [r7, #4]
 80310a8:	681b      	ldr	r3, [r3, #0]
 80310aa:	699b      	ldr	r3, [r3, #24]
 80310ac:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80310ae:	687b      	ldr	r3, [r7, #4]
 80310b0:	681b      	ldr	r3, [r3, #0]
 80310b2:	695b      	ldr	r3, [r3, #20]
 80310b4:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80310b6:	69fb      	ldr	r3, [r7, #28]
 80310b8:	085b      	lsrs	r3, r3, #1
 80310ba:	f003 0301 	and.w	r3, r3, #1
 80310be:	2b00      	cmp	r3, #0
 80310c0:	d012      	beq.n	80310e8 <HAL_I2C_EV_IRQHandler+0x1f8>
 80310c2:	697b      	ldr	r3, [r7, #20]
 80310c4:	0a5b      	lsrs	r3, r3, #9
 80310c6:	f003 0301 	and.w	r3, r3, #1
 80310ca:	2b00      	cmp	r3, #0
 80310cc:	d00c      	beq.n	80310e8 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80310ce:	687b      	ldr	r3, [r7, #4]
 80310d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80310d2:	2b00      	cmp	r3, #0
 80310d4:	d003      	beq.n	80310de <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80310d6:	687b      	ldr	r3, [r7, #4]
 80310d8:	681b      	ldr	r3, [r3, #0]
 80310da:	699b      	ldr	r3, [r3, #24]
 80310dc:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80310de:	69b9      	ldr	r1, [r7, #24]
 80310e0:	6878      	ldr	r0, [r7, #4]
 80310e2:	f000 ff68 	bl	8031fb6 <I2C_Slave_ADDR>
 80310e6:	e066      	b.n	80311b6 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80310e8:	69fb      	ldr	r3, [r7, #28]
 80310ea:	091b      	lsrs	r3, r3, #4
 80310ec:	f003 0301 	and.w	r3, r3, #1
 80310f0:	2b00      	cmp	r3, #0
 80310f2:	d009      	beq.n	8031108 <HAL_I2C_EV_IRQHandler+0x218>
 80310f4:	697b      	ldr	r3, [r7, #20]
 80310f6:	0a5b      	lsrs	r3, r3, #9
 80310f8:	f003 0301 	and.w	r3, r3, #1
 80310fc:	2b00      	cmp	r3, #0
 80310fe:	d003      	beq.n	8031108 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8031100:	6878      	ldr	r0, [r7, #4]
 8031102:	f000 ff9d 	bl	8032040 <I2C_Slave_STOPF>
 8031106:	e056      	b.n	80311b6 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8031108:	7bbb      	ldrb	r3, [r7, #14]
 803110a:	2b21      	cmp	r3, #33	; 0x21
 803110c:	d002      	beq.n	8031114 <HAL_I2C_EV_IRQHandler+0x224>
 803110e:	7bbb      	ldrb	r3, [r7, #14]
 8031110:	2b29      	cmp	r3, #41	; 0x29
 8031112:	d125      	bne.n	8031160 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8031114:	69fb      	ldr	r3, [r7, #28]
 8031116:	09db      	lsrs	r3, r3, #7
 8031118:	f003 0301 	and.w	r3, r3, #1
 803111c:	2b00      	cmp	r3, #0
 803111e:	d00f      	beq.n	8031140 <HAL_I2C_EV_IRQHandler+0x250>
 8031120:	697b      	ldr	r3, [r7, #20]
 8031122:	0a9b      	lsrs	r3, r3, #10
 8031124:	f003 0301 	and.w	r3, r3, #1
 8031128:	2b00      	cmp	r3, #0
 803112a:	d009      	beq.n	8031140 <HAL_I2C_EV_IRQHandler+0x250>
 803112c:	69fb      	ldr	r3, [r7, #28]
 803112e:	089b      	lsrs	r3, r3, #2
 8031130:	f003 0301 	and.w	r3, r3, #1
 8031134:	2b00      	cmp	r3, #0
 8031136:	d103      	bne.n	8031140 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8031138:	6878      	ldr	r0, [r7, #4]
 803113a:	f000 fe7e 	bl	8031e3a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 803113e:	e039      	b.n	80311b4 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8031140:	69fb      	ldr	r3, [r7, #28]
 8031142:	089b      	lsrs	r3, r3, #2
 8031144:	f003 0301 	and.w	r3, r3, #1
 8031148:	2b00      	cmp	r3, #0
 803114a:	d033      	beq.n	80311b4 <HAL_I2C_EV_IRQHandler+0x2c4>
 803114c:	697b      	ldr	r3, [r7, #20]
 803114e:	0a5b      	lsrs	r3, r3, #9
 8031150:	f003 0301 	and.w	r3, r3, #1
 8031154:	2b00      	cmp	r3, #0
 8031156:	d02d      	beq.n	80311b4 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8031158:	6878      	ldr	r0, [r7, #4]
 803115a:	f000 feab 	bl	8031eb4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 803115e:	e029      	b.n	80311b4 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8031160:	69fb      	ldr	r3, [r7, #28]
 8031162:	099b      	lsrs	r3, r3, #6
 8031164:	f003 0301 	and.w	r3, r3, #1
 8031168:	2b00      	cmp	r3, #0
 803116a:	d00f      	beq.n	803118c <HAL_I2C_EV_IRQHandler+0x29c>
 803116c:	697b      	ldr	r3, [r7, #20]
 803116e:	0a9b      	lsrs	r3, r3, #10
 8031170:	f003 0301 	and.w	r3, r3, #1
 8031174:	2b00      	cmp	r3, #0
 8031176:	d009      	beq.n	803118c <HAL_I2C_EV_IRQHandler+0x29c>
 8031178:	69fb      	ldr	r3, [r7, #28]
 803117a:	089b      	lsrs	r3, r3, #2
 803117c:	f003 0301 	and.w	r3, r3, #1
 8031180:	2b00      	cmp	r3, #0
 8031182:	d103      	bne.n	803118c <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8031184:	6878      	ldr	r0, [r7, #4]
 8031186:	f000 feb6 	bl	8031ef6 <I2C_SlaveReceive_RXNE>
 803118a:	e014      	b.n	80311b6 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 803118c:	69fb      	ldr	r3, [r7, #28]
 803118e:	089b      	lsrs	r3, r3, #2
 8031190:	f003 0301 	and.w	r3, r3, #1
 8031194:	2b00      	cmp	r3, #0
 8031196:	d00e      	beq.n	80311b6 <HAL_I2C_EV_IRQHandler+0x2c6>
 8031198:	697b      	ldr	r3, [r7, #20]
 803119a:	0a5b      	lsrs	r3, r3, #9
 803119c:	f003 0301 	and.w	r3, r3, #1
 80311a0:	2b00      	cmp	r3, #0
 80311a2:	d008      	beq.n	80311b6 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80311a4:	6878      	ldr	r0, [r7, #4]
 80311a6:	f000 fee4 	bl	8031f72 <I2C_SlaveReceive_BTF>
 80311aa:	e004      	b.n	80311b6 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 80311ac:	bf00      	nop
 80311ae:	e002      	b.n	80311b6 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80311b0:	bf00      	nop
 80311b2:	e000      	b.n	80311b6 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80311b4:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80311b6:	3720      	adds	r7, #32
 80311b8:	46bd      	mov	sp, r7
 80311ba:	bd80      	pop	{r7, pc}

080311bc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80311bc:	b580      	push	{r7, lr}
 80311be:	b08a      	sub	sp, #40	; 0x28
 80311c0:	af00      	add	r7, sp, #0
 80311c2:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80311c4:	687b      	ldr	r3, [r7, #4]
 80311c6:	681b      	ldr	r3, [r3, #0]
 80311c8:	695b      	ldr	r3, [r3, #20]
 80311ca:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80311cc:	687b      	ldr	r3, [r7, #4]
 80311ce:	681b      	ldr	r3, [r3, #0]
 80311d0:	685b      	ldr	r3, [r3, #4]
 80311d2:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80311d4:	2300      	movs	r3, #0
 80311d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80311d8:	687b      	ldr	r3, [r7, #4]
 80311da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80311de:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80311e0:	6a3b      	ldr	r3, [r7, #32]
 80311e2:	0a1b      	lsrs	r3, r3, #8
 80311e4:	f003 0301 	and.w	r3, r3, #1
 80311e8:	2b00      	cmp	r3, #0
 80311ea:	d00e      	beq.n	803120a <HAL_I2C_ER_IRQHandler+0x4e>
 80311ec:	69fb      	ldr	r3, [r7, #28]
 80311ee:	0a1b      	lsrs	r3, r3, #8
 80311f0:	f003 0301 	and.w	r3, r3, #1
 80311f4:	2b00      	cmp	r3, #0
 80311f6:	d008      	beq.n	803120a <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80311f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80311fa:	f043 0301 	orr.w	r3, r3, #1
 80311fe:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8031200:	687b      	ldr	r3, [r7, #4]
 8031202:	681b      	ldr	r3, [r3, #0]
 8031204:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8031208:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 803120a:	6a3b      	ldr	r3, [r7, #32]
 803120c:	0a5b      	lsrs	r3, r3, #9
 803120e:	f003 0301 	and.w	r3, r3, #1
 8031212:	2b00      	cmp	r3, #0
 8031214:	d00e      	beq.n	8031234 <HAL_I2C_ER_IRQHandler+0x78>
 8031216:	69fb      	ldr	r3, [r7, #28]
 8031218:	0a1b      	lsrs	r3, r3, #8
 803121a:	f003 0301 	and.w	r3, r3, #1
 803121e:	2b00      	cmp	r3, #0
 8031220:	d008      	beq.n	8031234 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8031222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031224:	f043 0302 	orr.w	r3, r3, #2
 8031228:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 803122a:	687b      	ldr	r3, [r7, #4]
 803122c:	681b      	ldr	r3, [r3, #0]
 803122e:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8031232:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8031234:	6a3b      	ldr	r3, [r7, #32]
 8031236:	0a9b      	lsrs	r3, r3, #10
 8031238:	f003 0301 	and.w	r3, r3, #1
 803123c:	2b00      	cmp	r3, #0
 803123e:	d03f      	beq.n	80312c0 <HAL_I2C_ER_IRQHandler+0x104>
 8031240:	69fb      	ldr	r3, [r7, #28]
 8031242:	0a1b      	lsrs	r3, r3, #8
 8031244:	f003 0301 	and.w	r3, r3, #1
 8031248:	2b00      	cmp	r3, #0
 803124a:	d039      	beq.n	80312c0 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 803124c:	7efb      	ldrb	r3, [r7, #27]
 803124e:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8031250:	687b      	ldr	r3, [r7, #4]
 8031252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031254:	b29b      	uxth	r3, r3
 8031256:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8031258:	687b      	ldr	r3, [r7, #4]
 803125a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 803125e:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8031260:	687b      	ldr	r3, [r7, #4]
 8031262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8031264:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8031266:	7ebb      	ldrb	r3, [r7, #26]
 8031268:	2b20      	cmp	r3, #32
 803126a:	d112      	bne.n	8031292 <HAL_I2C_ER_IRQHandler+0xd6>
 803126c:	697b      	ldr	r3, [r7, #20]
 803126e:	2b00      	cmp	r3, #0
 8031270:	d10f      	bne.n	8031292 <HAL_I2C_ER_IRQHandler+0xd6>
 8031272:	7cfb      	ldrb	r3, [r7, #19]
 8031274:	2b21      	cmp	r3, #33	; 0x21
 8031276:	d008      	beq.n	803128a <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8031278:	7cfb      	ldrb	r3, [r7, #19]
 803127a:	2b29      	cmp	r3, #41	; 0x29
 803127c:	d005      	beq.n	803128a <HAL_I2C_ER_IRQHandler+0xce>
 803127e:	7cfb      	ldrb	r3, [r7, #19]
 8031280:	2b28      	cmp	r3, #40	; 0x28
 8031282:	d106      	bne.n	8031292 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8031284:	68fb      	ldr	r3, [r7, #12]
 8031286:	2b21      	cmp	r3, #33	; 0x21
 8031288:	d103      	bne.n	8031292 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 803128a:	6878      	ldr	r0, [r7, #4]
 803128c:	f001 f808 	bl	80322a0 <I2C_Slave_AF>
 8031290:	e016      	b.n	80312c0 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8031292:	687b      	ldr	r3, [r7, #4]
 8031294:	681b      	ldr	r3, [r3, #0]
 8031296:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 803129a:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 803129c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803129e:	f043 0304 	orr.w	r3, r3, #4
 80312a2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80312a4:	7efb      	ldrb	r3, [r7, #27]
 80312a6:	2b10      	cmp	r3, #16
 80312a8:	d002      	beq.n	80312b0 <HAL_I2C_ER_IRQHandler+0xf4>
 80312aa:	7efb      	ldrb	r3, [r7, #27]
 80312ac:	2b40      	cmp	r3, #64	; 0x40
 80312ae:	d107      	bne.n	80312c0 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80312b0:	687b      	ldr	r3, [r7, #4]
 80312b2:	681b      	ldr	r3, [r3, #0]
 80312b4:	681a      	ldr	r2, [r3, #0]
 80312b6:	687b      	ldr	r3, [r7, #4]
 80312b8:	681b      	ldr	r3, [r3, #0]
 80312ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80312be:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80312c0:	6a3b      	ldr	r3, [r7, #32]
 80312c2:	0adb      	lsrs	r3, r3, #11
 80312c4:	f003 0301 	and.w	r3, r3, #1
 80312c8:	2b00      	cmp	r3, #0
 80312ca:	d00e      	beq.n	80312ea <HAL_I2C_ER_IRQHandler+0x12e>
 80312cc:	69fb      	ldr	r3, [r7, #28]
 80312ce:	0a1b      	lsrs	r3, r3, #8
 80312d0:	f003 0301 	and.w	r3, r3, #1
 80312d4:	2b00      	cmp	r3, #0
 80312d6:	d008      	beq.n	80312ea <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80312d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80312da:	f043 0308 	orr.w	r3, r3, #8
 80312de:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80312e0:	687b      	ldr	r3, [r7, #4]
 80312e2:	681b      	ldr	r3, [r3, #0]
 80312e4:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80312e8:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80312ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80312ec:	2b00      	cmp	r3, #0
 80312ee:	d008      	beq.n	8031302 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80312f0:	687b      	ldr	r3, [r7, #4]
 80312f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80312f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80312f6:	431a      	orrs	r2, r3
 80312f8:	687b      	ldr	r3, [r7, #4]
 80312fa:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80312fc:	6878      	ldr	r0, [r7, #4]
 80312fe:	f001 f83f 	bl	8032380 <I2C_ITError>
  }
}
 8031302:	bf00      	nop
 8031304:	3728      	adds	r7, #40	; 0x28
 8031306:	46bd      	mov	sp, r7
 8031308:	bd80      	pop	{r7, pc}

0803130a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 803130a:	b480      	push	{r7}
 803130c:	b083      	sub	sp, #12
 803130e:	af00      	add	r7, sp, #0
 8031310:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8031312:	bf00      	nop
 8031314:	370c      	adds	r7, #12
 8031316:	46bd      	mov	sp, r7
 8031318:	f85d 7b04 	ldr.w	r7, [sp], #4
 803131c:	4770      	bx	lr

0803131e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 803131e:	b480      	push	{r7}
 8031320:	b083      	sub	sp, #12
 8031322:	af00      	add	r7, sp, #0
 8031324:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8031326:	bf00      	nop
 8031328:	370c      	adds	r7, #12
 803132a:	46bd      	mov	sp, r7
 803132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031330:	4770      	bx	lr

08031332 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8031332:	b480      	push	{r7}
 8031334:	b083      	sub	sp, #12
 8031336:	af00      	add	r7, sp, #0
 8031338:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 803133a:	bf00      	nop
 803133c:	370c      	adds	r7, #12
 803133e:	46bd      	mov	sp, r7
 8031340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031344:	4770      	bx	lr

08031346 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8031346:	b480      	push	{r7}
 8031348:	b083      	sub	sp, #12
 803134a:	af00      	add	r7, sp, #0
 803134c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 803134e:	bf00      	nop
 8031350:	370c      	adds	r7, #12
 8031352:	46bd      	mov	sp, r7
 8031354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031358:	4770      	bx	lr

0803135a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 803135a:	b480      	push	{r7}
 803135c:	b083      	sub	sp, #12
 803135e:	af00      	add	r7, sp, #0
 8031360:	6078      	str	r0, [r7, #4]
 8031362:	460b      	mov	r3, r1
 8031364:	70fb      	strb	r3, [r7, #3]
 8031366:	4613      	mov	r3, r2
 8031368:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 803136a:	bf00      	nop
 803136c:	370c      	adds	r7, #12
 803136e:	46bd      	mov	sp, r7
 8031370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031374:	4770      	bx	lr

08031376 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8031376:	b480      	push	{r7}
 8031378:	b083      	sub	sp, #12
 803137a:	af00      	add	r7, sp, #0
 803137c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 803137e:	bf00      	nop
 8031380:	370c      	adds	r7, #12
 8031382:	46bd      	mov	sp, r7
 8031384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031388:	4770      	bx	lr

0803138a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 803138a:	b480      	push	{r7}
 803138c:	b083      	sub	sp, #12
 803138e:	af00      	add	r7, sp, #0
 8031390:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8031392:	bf00      	nop
 8031394:	370c      	adds	r7, #12
 8031396:	46bd      	mov	sp, r7
 8031398:	f85d 7b04 	ldr.w	r7, [sp], #4
 803139c:	4770      	bx	lr

0803139e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 803139e:	b480      	push	{r7}
 80313a0:	b083      	sub	sp, #12
 80313a2:	af00      	add	r7, sp, #0
 80313a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80313a6:	bf00      	nop
 80313a8:	370c      	adds	r7, #12
 80313aa:	46bd      	mov	sp, r7
 80313ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80313b0:	4770      	bx	lr

080313b2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80313b2:	b480      	push	{r7}
 80313b4:	b083      	sub	sp, #12
 80313b6:	af00      	add	r7, sp, #0
 80313b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80313ba:	bf00      	nop
 80313bc:	370c      	adds	r7, #12
 80313be:	46bd      	mov	sp, r7
 80313c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80313c4:	4770      	bx	lr

080313c6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80313c6:	b480      	push	{r7}
 80313c8:	b083      	sub	sp, #12
 80313ca:	af00      	add	r7, sp, #0
 80313cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80313ce:	bf00      	nop
 80313d0:	370c      	adds	r7, #12
 80313d2:	46bd      	mov	sp, r7
 80313d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80313d8:	4770      	bx	lr

080313da <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80313da:	b580      	push	{r7, lr}
 80313dc:	b084      	sub	sp, #16
 80313de:	af00      	add	r7, sp, #0
 80313e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80313e2:	687b      	ldr	r3, [r7, #4]
 80313e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80313e8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80313ea:	687b      	ldr	r3, [r7, #4]
 80313ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80313f0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80313f2:	687b      	ldr	r3, [r7, #4]
 80313f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80313f6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80313f8:	687b      	ldr	r3, [r7, #4]
 80313fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80313fc:	2b00      	cmp	r3, #0
 80313fe:	d150      	bne.n	80314a2 <I2C_MasterTransmit_TXE+0xc8>
 8031400:	7bfb      	ldrb	r3, [r7, #15]
 8031402:	2b21      	cmp	r3, #33	; 0x21
 8031404:	d14d      	bne.n	80314a2 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8031406:	68bb      	ldr	r3, [r7, #8]
 8031408:	2b08      	cmp	r3, #8
 803140a:	d01d      	beq.n	8031448 <I2C_MasterTransmit_TXE+0x6e>
 803140c:	68bb      	ldr	r3, [r7, #8]
 803140e:	2b20      	cmp	r3, #32
 8031410:	d01a      	beq.n	8031448 <I2C_MasterTransmit_TXE+0x6e>
 8031412:	68bb      	ldr	r3, [r7, #8]
 8031414:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8031418:	d016      	beq.n	8031448 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 803141a:	687b      	ldr	r3, [r7, #4]
 803141c:	681b      	ldr	r3, [r3, #0]
 803141e:	685a      	ldr	r2, [r3, #4]
 8031420:	687b      	ldr	r3, [r7, #4]
 8031422:	681b      	ldr	r3, [r3, #0]
 8031424:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8031428:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 803142a:	687b      	ldr	r3, [r7, #4]
 803142c:	2211      	movs	r2, #17
 803142e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8031430:	687b      	ldr	r3, [r7, #4]
 8031432:	2200      	movs	r2, #0
 8031434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8031438:	687b      	ldr	r3, [r7, #4]
 803143a:	2220      	movs	r2, #32
 803143c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8031440:	6878      	ldr	r0, [r7, #4]
 8031442:	f7ff ff62 	bl	803130a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8031446:	e060      	b.n	803150a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8031448:	687b      	ldr	r3, [r7, #4]
 803144a:	681b      	ldr	r3, [r3, #0]
 803144c:	685a      	ldr	r2, [r3, #4]
 803144e:	687b      	ldr	r3, [r7, #4]
 8031450:	681b      	ldr	r3, [r3, #0]
 8031452:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8031456:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8031458:	687b      	ldr	r3, [r7, #4]
 803145a:	681b      	ldr	r3, [r3, #0]
 803145c:	681a      	ldr	r2, [r3, #0]
 803145e:	687b      	ldr	r3, [r7, #4]
 8031460:	681b      	ldr	r3, [r3, #0]
 8031462:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8031466:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8031468:	687b      	ldr	r3, [r7, #4]
 803146a:	2200      	movs	r2, #0
 803146c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 803146e:	687b      	ldr	r3, [r7, #4]
 8031470:	2220      	movs	r2, #32
 8031472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8031476:	687b      	ldr	r3, [r7, #4]
 8031478:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 803147c:	b2db      	uxtb	r3, r3
 803147e:	2b40      	cmp	r3, #64	; 0x40
 8031480:	d107      	bne.n	8031492 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8031482:	687b      	ldr	r3, [r7, #4]
 8031484:	2200      	movs	r2, #0
 8031486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 803148a:	6878      	ldr	r0, [r7, #4]
 803148c:	f7ff ff7d 	bl	803138a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8031490:	e03b      	b.n	803150a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8031492:	687b      	ldr	r3, [r7, #4]
 8031494:	2200      	movs	r2, #0
 8031496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 803149a:	6878      	ldr	r0, [r7, #4]
 803149c:	f7ff ff35 	bl	803130a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80314a0:	e033      	b.n	803150a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80314a2:	7bfb      	ldrb	r3, [r7, #15]
 80314a4:	2b21      	cmp	r3, #33	; 0x21
 80314a6:	d005      	beq.n	80314b4 <I2C_MasterTransmit_TXE+0xda>
 80314a8:	7bbb      	ldrb	r3, [r7, #14]
 80314aa:	2b40      	cmp	r3, #64	; 0x40
 80314ac:	d12d      	bne.n	803150a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80314ae:	7bfb      	ldrb	r3, [r7, #15]
 80314b0:	2b22      	cmp	r3, #34	; 0x22
 80314b2:	d12a      	bne.n	803150a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80314b4:	687b      	ldr	r3, [r7, #4]
 80314b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80314b8:	b29b      	uxth	r3, r3
 80314ba:	2b00      	cmp	r3, #0
 80314bc:	d108      	bne.n	80314d0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80314be:	687b      	ldr	r3, [r7, #4]
 80314c0:	681b      	ldr	r3, [r3, #0]
 80314c2:	685a      	ldr	r2, [r3, #4]
 80314c4:	687b      	ldr	r3, [r7, #4]
 80314c6:	681b      	ldr	r3, [r3, #0]
 80314c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80314cc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80314ce:	e01c      	b.n	803150a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80314d0:	687b      	ldr	r3, [r7, #4]
 80314d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80314d6:	b2db      	uxtb	r3, r3
 80314d8:	2b40      	cmp	r3, #64	; 0x40
 80314da:	d103      	bne.n	80314e4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80314dc:	6878      	ldr	r0, [r7, #4]
 80314de:	f000 f898 	bl	8031612 <I2C_MemoryTransmit_TXE_BTF>
}
 80314e2:	e012      	b.n	803150a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80314e4:	687b      	ldr	r3, [r7, #4]
 80314e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80314e8:	781a      	ldrb	r2, [r3, #0]
 80314ea:	687b      	ldr	r3, [r7, #4]
 80314ec:	681b      	ldr	r3, [r3, #0]
 80314ee:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80314f0:	687b      	ldr	r3, [r7, #4]
 80314f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80314f4:	1c5a      	adds	r2, r3, #1
 80314f6:	687b      	ldr	r3, [r7, #4]
 80314f8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80314fa:	687b      	ldr	r3, [r7, #4]
 80314fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80314fe:	b29b      	uxth	r3, r3
 8031500:	3b01      	subs	r3, #1
 8031502:	b29a      	uxth	r2, r3
 8031504:	687b      	ldr	r3, [r7, #4]
 8031506:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8031508:	e7ff      	b.n	803150a <I2C_MasterTransmit_TXE+0x130>
 803150a:	bf00      	nop
 803150c:	3710      	adds	r7, #16
 803150e:	46bd      	mov	sp, r7
 8031510:	bd80      	pop	{r7, pc}

08031512 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8031512:	b580      	push	{r7, lr}
 8031514:	b084      	sub	sp, #16
 8031516:	af00      	add	r7, sp, #0
 8031518:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 803151a:	687b      	ldr	r3, [r7, #4]
 803151c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803151e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8031520:	687b      	ldr	r3, [r7, #4]
 8031522:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8031526:	b2db      	uxtb	r3, r3
 8031528:	2b21      	cmp	r3, #33	; 0x21
 803152a:	d165      	bne.n	80315f8 <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 803152c:	687b      	ldr	r3, [r7, #4]
 803152e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031530:	b29b      	uxth	r3, r3
 8031532:	2b00      	cmp	r3, #0
 8031534:	d012      	beq.n	803155c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8031536:	687b      	ldr	r3, [r7, #4]
 8031538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803153a:	781a      	ldrb	r2, [r3, #0]
 803153c:	687b      	ldr	r3, [r7, #4]
 803153e:	681b      	ldr	r3, [r3, #0]
 8031540:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8031542:	687b      	ldr	r3, [r7, #4]
 8031544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031546:	1c5a      	adds	r2, r3, #1
 8031548:	687b      	ldr	r3, [r7, #4]
 803154a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 803154c:	687b      	ldr	r3, [r7, #4]
 803154e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031550:	b29b      	uxth	r3, r3
 8031552:	3b01      	subs	r3, #1
 8031554:	b29a      	uxth	r2, r3
 8031556:	687b      	ldr	r3, [r7, #4]
 8031558:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 803155a:	e056      	b.n	803160a <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 803155c:	68fb      	ldr	r3, [r7, #12]
 803155e:	2b08      	cmp	r3, #8
 8031560:	d01d      	beq.n	803159e <I2C_MasterTransmit_BTF+0x8c>
 8031562:	68fb      	ldr	r3, [r7, #12]
 8031564:	2b20      	cmp	r3, #32
 8031566:	d01a      	beq.n	803159e <I2C_MasterTransmit_BTF+0x8c>
 8031568:	68fb      	ldr	r3, [r7, #12]
 803156a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 803156e:	d016      	beq.n	803159e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8031570:	687b      	ldr	r3, [r7, #4]
 8031572:	681b      	ldr	r3, [r3, #0]
 8031574:	685a      	ldr	r2, [r3, #4]
 8031576:	687b      	ldr	r3, [r7, #4]
 8031578:	681b      	ldr	r3, [r3, #0]
 803157a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 803157e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8031580:	687b      	ldr	r3, [r7, #4]
 8031582:	2211      	movs	r2, #17
 8031584:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8031586:	687b      	ldr	r3, [r7, #4]
 8031588:	2200      	movs	r2, #0
 803158a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 803158e:	687b      	ldr	r3, [r7, #4]
 8031590:	2220      	movs	r2, #32
 8031592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8031596:	6878      	ldr	r0, [r7, #4]
 8031598:	f7ff feb7 	bl	803130a <HAL_I2C_MasterTxCpltCallback>
}
 803159c:	e035      	b.n	803160a <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 803159e:	687b      	ldr	r3, [r7, #4]
 80315a0:	681b      	ldr	r3, [r3, #0]
 80315a2:	685a      	ldr	r2, [r3, #4]
 80315a4:	687b      	ldr	r3, [r7, #4]
 80315a6:	681b      	ldr	r3, [r3, #0]
 80315a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80315ac:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80315ae:	687b      	ldr	r3, [r7, #4]
 80315b0:	681b      	ldr	r3, [r3, #0]
 80315b2:	681a      	ldr	r2, [r3, #0]
 80315b4:	687b      	ldr	r3, [r7, #4]
 80315b6:	681b      	ldr	r3, [r3, #0]
 80315b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80315bc:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80315be:	687b      	ldr	r3, [r7, #4]
 80315c0:	2200      	movs	r2, #0
 80315c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80315c4:	687b      	ldr	r3, [r7, #4]
 80315c6:	2220      	movs	r2, #32
 80315c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80315cc:	687b      	ldr	r3, [r7, #4]
 80315ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80315d2:	b2db      	uxtb	r3, r3
 80315d4:	2b40      	cmp	r3, #64	; 0x40
 80315d6:	d107      	bne.n	80315e8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80315d8:	687b      	ldr	r3, [r7, #4]
 80315da:	2200      	movs	r2, #0
 80315dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80315e0:	6878      	ldr	r0, [r7, #4]
 80315e2:	f7ff fed2 	bl	803138a <HAL_I2C_MemTxCpltCallback>
}
 80315e6:	e010      	b.n	803160a <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80315e8:	687b      	ldr	r3, [r7, #4]
 80315ea:	2200      	movs	r2, #0
 80315ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80315f0:	6878      	ldr	r0, [r7, #4]
 80315f2:	f7ff fe8a 	bl	803130a <HAL_I2C_MasterTxCpltCallback>
}
 80315f6:	e008      	b.n	803160a <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80315f8:	687b      	ldr	r3, [r7, #4]
 80315fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80315fe:	b2db      	uxtb	r3, r3
 8031600:	2b40      	cmp	r3, #64	; 0x40
 8031602:	d102      	bne.n	803160a <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8031604:	6878      	ldr	r0, [r7, #4]
 8031606:	f000 f804 	bl	8031612 <I2C_MemoryTransmit_TXE_BTF>
}
 803160a:	bf00      	nop
 803160c:	3710      	adds	r7, #16
 803160e:	46bd      	mov	sp, r7
 8031610:	bd80      	pop	{r7, pc}

08031612 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8031612:	b480      	push	{r7}
 8031614:	b083      	sub	sp, #12
 8031616:	af00      	add	r7, sp, #0
 8031618:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 803161a:	687b      	ldr	r3, [r7, #4]
 803161c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803161e:	2b00      	cmp	r3, #0
 8031620:	d11d      	bne.n	803165e <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8031622:	687b      	ldr	r3, [r7, #4]
 8031624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8031626:	2b01      	cmp	r3, #1
 8031628:	d10b      	bne.n	8031642 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 803162a:	687b      	ldr	r3, [r7, #4]
 803162c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 803162e:	b2da      	uxtb	r2, r3
 8031630:	687b      	ldr	r3, [r7, #4]
 8031632:	681b      	ldr	r3, [r3, #0]
 8031634:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8031636:	687b      	ldr	r3, [r7, #4]
 8031638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803163a:	1c9a      	adds	r2, r3, #2
 803163c:	687b      	ldr	r3, [r7, #4]
 803163e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8031640:	e048      	b.n	80316d4 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8031642:	687b      	ldr	r3, [r7, #4]
 8031644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8031646:	b29b      	uxth	r3, r3
 8031648:	121b      	asrs	r3, r3, #8
 803164a:	b2da      	uxtb	r2, r3
 803164c:	687b      	ldr	r3, [r7, #4]
 803164e:	681b      	ldr	r3, [r3, #0]
 8031650:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8031652:	687b      	ldr	r3, [r7, #4]
 8031654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8031656:	1c5a      	adds	r2, r3, #1
 8031658:	687b      	ldr	r3, [r7, #4]
 803165a:	651a      	str	r2, [r3, #80]	; 0x50
}
 803165c:	e03a      	b.n	80316d4 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 803165e:	687b      	ldr	r3, [r7, #4]
 8031660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8031662:	2b01      	cmp	r3, #1
 8031664:	d10b      	bne.n	803167e <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8031666:	687b      	ldr	r3, [r7, #4]
 8031668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 803166a:	b2da      	uxtb	r2, r3
 803166c:	687b      	ldr	r3, [r7, #4]
 803166e:	681b      	ldr	r3, [r3, #0]
 8031670:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8031672:	687b      	ldr	r3, [r7, #4]
 8031674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8031676:	1c5a      	adds	r2, r3, #1
 8031678:	687b      	ldr	r3, [r7, #4]
 803167a:	651a      	str	r2, [r3, #80]	; 0x50
}
 803167c:	e02a      	b.n	80316d4 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 803167e:	687b      	ldr	r3, [r7, #4]
 8031680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8031682:	2b02      	cmp	r3, #2
 8031684:	d126      	bne.n	80316d4 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8031686:	687b      	ldr	r3, [r7, #4]
 8031688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 803168c:	b2db      	uxtb	r3, r3
 803168e:	2b22      	cmp	r3, #34	; 0x22
 8031690:	d108      	bne.n	80316a4 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8031692:	687b      	ldr	r3, [r7, #4]
 8031694:	681b      	ldr	r3, [r3, #0]
 8031696:	681a      	ldr	r2, [r3, #0]
 8031698:	687b      	ldr	r3, [r7, #4]
 803169a:	681b      	ldr	r3, [r3, #0]
 803169c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80316a0:	601a      	str	r2, [r3, #0]
}
 80316a2:	e017      	b.n	80316d4 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80316a4:	687b      	ldr	r3, [r7, #4]
 80316a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80316aa:	b2db      	uxtb	r3, r3
 80316ac:	2b21      	cmp	r3, #33	; 0x21
 80316ae:	d111      	bne.n	80316d4 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80316b0:	687b      	ldr	r3, [r7, #4]
 80316b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80316b4:	781a      	ldrb	r2, [r3, #0]
 80316b6:	687b      	ldr	r3, [r7, #4]
 80316b8:	681b      	ldr	r3, [r3, #0]
 80316ba:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80316bc:	687b      	ldr	r3, [r7, #4]
 80316be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80316c0:	1c5a      	adds	r2, r3, #1
 80316c2:	687b      	ldr	r3, [r7, #4]
 80316c4:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80316c6:	687b      	ldr	r3, [r7, #4]
 80316c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80316ca:	b29b      	uxth	r3, r3
 80316cc:	3b01      	subs	r3, #1
 80316ce:	b29a      	uxth	r2, r3
 80316d0:	687b      	ldr	r3, [r7, #4]
 80316d2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80316d4:	bf00      	nop
 80316d6:	370c      	adds	r7, #12
 80316d8:	46bd      	mov	sp, r7
 80316da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80316de:	4770      	bx	lr

080316e0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80316e0:	b580      	push	{r7, lr}
 80316e2:	b084      	sub	sp, #16
 80316e4:	af00      	add	r7, sp, #0
 80316e6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80316e8:	687b      	ldr	r3, [r7, #4]
 80316ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80316ee:	b2db      	uxtb	r3, r3
 80316f0:	2b22      	cmp	r3, #34	; 0x22
 80316f2:	d173      	bne.n	80317dc <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80316f4:	687b      	ldr	r3, [r7, #4]
 80316f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80316f8:	b29b      	uxth	r3, r3
 80316fa:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80316fc:	68fb      	ldr	r3, [r7, #12]
 80316fe:	2b03      	cmp	r3, #3
 8031700:	d920      	bls.n	8031744 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8031702:	687b      	ldr	r3, [r7, #4]
 8031704:	681b      	ldr	r3, [r3, #0]
 8031706:	691a      	ldr	r2, [r3, #16]
 8031708:	687b      	ldr	r3, [r7, #4]
 803170a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803170c:	b2d2      	uxtb	r2, r2
 803170e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8031710:	687b      	ldr	r3, [r7, #4]
 8031712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031714:	1c5a      	adds	r2, r3, #1
 8031716:	687b      	ldr	r3, [r7, #4]
 8031718:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 803171a:	687b      	ldr	r3, [r7, #4]
 803171c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 803171e:	b29b      	uxth	r3, r3
 8031720:	3b01      	subs	r3, #1
 8031722:	b29a      	uxth	r2, r3
 8031724:	687b      	ldr	r3, [r7, #4]
 8031726:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8031728:	687b      	ldr	r3, [r7, #4]
 803172a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 803172c:	b29b      	uxth	r3, r3
 803172e:	2b03      	cmp	r3, #3
 8031730:	d154      	bne.n	80317dc <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8031732:	687b      	ldr	r3, [r7, #4]
 8031734:	681b      	ldr	r3, [r3, #0]
 8031736:	685a      	ldr	r2, [r3, #4]
 8031738:	687b      	ldr	r3, [r7, #4]
 803173a:	681b      	ldr	r3, [r3, #0]
 803173c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8031740:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8031742:	e04b      	b.n	80317dc <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8031744:	687b      	ldr	r3, [r7, #4]
 8031746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031748:	2b02      	cmp	r3, #2
 803174a:	d047      	beq.n	80317dc <I2C_MasterReceive_RXNE+0xfc>
 803174c:	68fb      	ldr	r3, [r7, #12]
 803174e:	2b01      	cmp	r3, #1
 8031750:	d002      	beq.n	8031758 <I2C_MasterReceive_RXNE+0x78>
 8031752:	68fb      	ldr	r3, [r7, #12]
 8031754:	2b00      	cmp	r3, #0
 8031756:	d141      	bne.n	80317dc <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8031758:	687b      	ldr	r3, [r7, #4]
 803175a:	681b      	ldr	r3, [r3, #0]
 803175c:	681a      	ldr	r2, [r3, #0]
 803175e:	687b      	ldr	r3, [r7, #4]
 8031760:	681b      	ldr	r3, [r3, #0]
 8031762:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8031766:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8031768:	687b      	ldr	r3, [r7, #4]
 803176a:	681b      	ldr	r3, [r3, #0]
 803176c:	685a      	ldr	r2, [r3, #4]
 803176e:	687b      	ldr	r3, [r7, #4]
 8031770:	681b      	ldr	r3, [r3, #0]
 8031772:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8031776:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8031778:	687b      	ldr	r3, [r7, #4]
 803177a:	681b      	ldr	r3, [r3, #0]
 803177c:	691a      	ldr	r2, [r3, #16]
 803177e:	687b      	ldr	r3, [r7, #4]
 8031780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031782:	b2d2      	uxtb	r2, r2
 8031784:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8031786:	687b      	ldr	r3, [r7, #4]
 8031788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803178a:	1c5a      	adds	r2, r3, #1
 803178c:	687b      	ldr	r3, [r7, #4]
 803178e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8031790:	687b      	ldr	r3, [r7, #4]
 8031792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031794:	b29b      	uxth	r3, r3
 8031796:	3b01      	subs	r3, #1
 8031798:	b29a      	uxth	r2, r3
 803179a:	687b      	ldr	r3, [r7, #4]
 803179c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 803179e:	687b      	ldr	r3, [r7, #4]
 80317a0:	2220      	movs	r2, #32
 80317a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80317a6:	687b      	ldr	r3, [r7, #4]
 80317a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80317ac:	b2db      	uxtb	r3, r3
 80317ae:	2b40      	cmp	r3, #64	; 0x40
 80317b0:	d10a      	bne.n	80317c8 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80317b2:	687b      	ldr	r3, [r7, #4]
 80317b4:	2200      	movs	r2, #0
 80317b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80317ba:	687b      	ldr	r3, [r7, #4]
 80317bc:	2200      	movs	r2, #0
 80317be:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80317c0:	6878      	ldr	r0, [r7, #4]
 80317c2:	f7ff fdec 	bl	803139e <HAL_I2C_MemRxCpltCallback>
}
 80317c6:	e009      	b.n	80317dc <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80317c8:	687b      	ldr	r3, [r7, #4]
 80317ca:	2200      	movs	r2, #0
 80317cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80317d0:	687b      	ldr	r3, [r7, #4]
 80317d2:	2212      	movs	r2, #18
 80317d4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80317d6:	6878      	ldr	r0, [r7, #4]
 80317d8:	f7ff fda1 	bl	803131e <HAL_I2C_MasterRxCpltCallback>
}
 80317dc:	bf00      	nop
 80317de:	3710      	adds	r7, #16
 80317e0:	46bd      	mov	sp, r7
 80317e2:	bd80      	pop	{r7, pc}

080317e4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80317e4:	b580      	push	{r7, lr}
 80317e6:	b084      	sub	sp, #16
 80317e8:	af00      	add	r7, sp, #0
 80317ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80317ec:	687b      	ldr	r3, [r7, #4]
 80317ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80317f0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80317f2:	687b      	ldr	r3, [r7, #4]
 80317f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80317f6:	b29b      	uxth	r3, r3
 80317f8:	2b04      	cmp	r3, #4
 80317fa:	d11b      	bne.n	8031834 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80317fc:	687b      	ldr	r3, [r7, #4]
 80317fe:	681b      	ldr	r3, [r3, #0]
 8031800:	685a      	ldr	r2, [r3, #4]
 8031802:	687b      	ldr	r3, [r7, #4]
 8031804:	681b      	ldr	r3, [r3, #0]
 8031806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 803180a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 803180c:	687b      	ldr	r3, [r7, #4]
 803180e:	681b      	ldr	r3, [r3, #0]
 8031810:	691a      	ldr	r2, [r3, #16]
 8031812:	687b      	ldr	r3, [r7, #4]
 8031814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031816:	b2d2      	uxtb	r2, r2
 8031818:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 803181a:	687b      	ldr	r3, [r7, #4]
 803181c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803181e:	1c5a      	adds	r2, r3, #1
 8031820:	687b      	ldr	r3, [r7, #4]
 8031822:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8031824:	687b      	ldr	r3, [r7, #4]
 8031826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031828:	b29b      	uxth	r3, r3
 803182a:	3b01      	subs	r3, #1
 803182c:	b29a      	uxth	r2, r3
 803182e:	687b      	ldr	r3, [r7, #4]
 8031830:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8031832:	e0bd      	b.n	80319b0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8031834:	687b      	ldr	r3, [r7, #4]
 8031836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031838:	b29b      	uxth	r3, r3
 803183a:	2b03      	cmp	r3, #3
 803183c:	d129      	bne.n	8031892 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 803183e:	687b      	ldr	r3, [r7, #4]
 8031840:	681b      	ldr	r3, [r3, #0]
 8031842:	685a      	ldr	r2, [r3, #4]
 8031844:	687b      	ldr	r3, [r7, #4]
 8031846:	681b      	ldr	r3, [r3, #0]
 8031848:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 803184c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 803184e:	68fb      	ldr	r3, [r7, #12]
 8031850:	2b04      	cmp	r3, #4
 8031852:	d00a      	beq.n	803186a <I2C_MasterReceive_BTF+0x86>
 8031854:	68fb      	ldr	r3, [r7, #12]
 8031856:	2b02      	cmp	r3, #2
 8031858:	d007      	beq.n	803186a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 803185a:	687b      	ldr	r3, [r7, #4]
 803185c:	681b      	ldr	r3, [r3, #0]
 803185e:	681a      	ldr	r2, [r3, #0]
 8031860:	687b      	ldr	r3, [r7, #4]
 8031862:	681b      	ldr	r3, [r3, #0]
 8031864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8031868:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 803186a:	687b      	ldr	r3, [r7, #4]
 803186c:	681b      	ldr	r3, [r3, #0]
 803186e:	691a      	ldr	r2, [r3, #16]
 8031870:	687b      	ldr	r3, [r7, #4]
 8031872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031874:	b2d2      	uxtb	r2, r2
 8031876:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8031878:	687b      	ldr	r3, [r7, #4]
 803187a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803187c:	1c5a      	adds	r2, r3, #1
 803187e:	687b      	ldr	r3, [r7, #4]
 8031880:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8031882:	687b      	ldr	r3, [r7, #4]
 8031884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031886:	b29b      	uxth	r3, r3
 8031888:	3b01      	subs	r3, #1
 803188a:	b29a      	uxth	r2, r3
 803188c:	687b      	ldr	r3, [r7, #4]
 803188e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8031890:	e08e      	b.n	80319b0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8031892:	687b      	ldr	r3, [r7, #4]
 8031894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031896:	b29b      	uxth	r3, r3
 8031898:	2b02      	cmp	r3, #2
 803189a:	d176      	bne.n	803198a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 803189c:	68fb      	ldr	r3, [r7, #12]
 803189e:	2b01      	cmp	r3, #1
 80318a0:	d002      	beq.n	80318a8 <I2C_MasterReceive_BTF+0xc4>
 80318a2:	68fb      	ldr	r3, [r7, #12]
 80318a4:	2b10      	cmp	r3, #16
 80318a6:	d108      	bne.n	80318ba <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80318a8:	687b      	ldr	r3, [r7, #4]
 80318aa:	681b      	ldr	r3, [r3, #0]
 80318ac:	681a      	ldr	r2, [r3, #0]
 80318ae:	687b      	ldr	r3, [r7, #4]
 80318b0:	681b      	ldr	r3, [r3, #0]
 80318b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80318b6:	601a      	str	r2, [r3, #0]
 80318b8:	e019      	b.n	80318ee <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80318ba:	68fb      	ldr	r3, [r7, #12]
 80318bc:	2b04      	cmp	r3, #4
 80318be:	d002      	beq.n	80318c6 <I2C_MasterReceive_BTF+0xe2>
 80318c0:	68fb      	ldr	r3, [r7, #12]
 80318c2:	2b02      	cmp	r3, #2
 80318c4:	d108      	bne.n	80318d8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80318c6:	687b      	ldr	r3, [r7, #4]
 80318c8:	681b      	ldr	r3, [r3, #0]
 80318ca:	681a      	ldr	r2, [r3, #0]
 80318cc:	687b      	ldr	r3, [r7, #4]
 80318ce:	681b      	ldr	r3, [r3, #0]
 80318d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80318d4:	601a      	str	r2, [r3, #0]
 80318d6:	e00a      	b.n	80318ee <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80318d8:	68fb      	ldr	r3, [r7, #12]
 80318da:	2b10      	cmp	r3, #16
 80318dc:	d007      	beq.n	80318ee <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80318de:	687b      	ldr	r3, [r7, #4]
 80318e0:	681b      	ldr	r3, [r3, #0]
 80318e2:	681a      	ldr	r2, [r3, #0]
 80318e4:	687b      	ldr	r3, [r7, #4]
 80318e6:	681b      	ldr	r3, [r3, #0]
 80318e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80318ec:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80318ee:	687b      	ldr	r3, [r7, #4]
 80318f0:	681b      	ldr	r3, [r3, #0]
 80318f2:	691a      	ldr	r2, [r3, #16]
 80318f4:	687b      	ldr	r3, [r7, #4]
 80318f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80318f8:	b2d2      	uxtb	r2, r2
 80318fa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80318fc:	687b      	ldr	r3, [r7, #4]
 80318fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031900:	1c5a      	adds	r2, r3, #1
 8031902:	687b      	ldr	r3, [r7, #4]
 8031904:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8031906:	687b      	ldr	r3, [r7, #4]
 8031908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 803190a:	b29b      	uxth	r3, r3
 803190c:	3b01      	subs	r3, #1
 803190e:	b29a      	uxth	r2, r3
 8031910:	687b      	ldr	r3, [r7, #4]
 8031912:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8031914:	687b      	ldr	r3, [r7, #4]
 8031916:	681b      	ldr	r3, [r3, #0]
 8031918:	691a      	ldr	r2, [r3, #16]
 803191a:	687b      	ldr	r3, [r7, #4]
 803191c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803191e:	b2d2      	uxtb	r2, r2
 8031920:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8031922:	687b      	ldr	r3, [r7, #4]
 8031924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031926:	1c5a      	adds	r2, r3, #1
 8031928:	687b      	ldr	r3, [r7, #4]
 803192a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 803192c:	687b      	ldr	r3, [r7, #4]
 803192e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031930:	b29b      	uxth	r3, r3
 8031932:	3b01      	subs	r3, #1
 8031934:	b29a      	uxth	r2, r3
 8031936:	687b      	ldr	r3, [r7, #4]
 8031938:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 803193a:	687b      	ldr	r3, [r7, #4]
 803193c:	681b      	ldr	r3, [r3, #0]
 803193e:	685a      	ldr	r2, [r3, #4]
 8031940:	687b      	ldr	r3, [r7, #4]
 8031942:	681b      	ldr	r3, [r3, #0]
 8031944:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8031948:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 803194a:	687b      	ldr	r3, [r7, #4]
 803194c:	2220      	movs	r2, #32
 803194e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8031952:	687b      	ldr	r3, [r7, #4]
 8031954:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8031958:	b2db      	uxtb	r3, r3
 803195a:	2b40      	cmp	r3, #64	; 0x40
 803195c:	d10a      	bne.n	8031974 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 803195e:	687b      	ldr	r3, [r7, #4]
 8031960:	2200      	movs	r2, #0
 8031962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8031966:	687b      	ldr	r3, [r7, #4]
 8031968:	2200      	movs	r2, #0
 803196a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 803196c:	6878      	ldr	r0, [r7, #4]
 803196e:	f7ff fd16 	bl	803139e <HAL_I2C_MemRxCpltCallback>
}
 8031972:	e01d      	b.n	80319b0 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8031974:	687b      	ldr	r3, [r7, #4]
 8031976:	2200      	movs	r2, #0
 8031978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 803197c:	687b      	ldr	r3, [r7, #4]
 803197e:	2212      	movs	r2, #18
 8031980:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8031982:	6878      	ldr	r0, [r7, #4]
 8031984:	f7ff fccb 	bl	803131e <HAL_I2C_MasterRxCpltCallback>
}
 8031988:	e012      	b.n	80319b0 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 803198a:	687b      	ldr	r3, [r7, #4]
 803198c:	681b      	ldr	r3, [r3, #0]
 803198e:	691a      	ldr	r2, [r3, #16]
 8031990:	687b      	ldr	r3, [r7, #4]
 8031992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031994:	b2d2      	uxtb	r2, r2
 8031996:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8031998:	687b      	ldr	r3, [r7, #4]
 803199a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803199c:	1c5a      	adds	r2, r3, #1
 803199e:	687b      	ldr	r3, [r7, #4]
 80319a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80319a2:	687b      	ldr	r3, [r7, #4]
 80319a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80319a6:	b29b      	uxth	r3, r3
 80319a8:	3b01      	subs	r3, #1
 80319aa:	b29a      	uxth	r2, r3
 80319ac:	687b      	ldr	r3, [r7, #4]
 80319ae:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80319b0:	bf00      	nop
 80319b2:	3710      	adds	r7, #16
 80319b4:	46bd      	mov	sp, r7
 80319b6:	bd80      	pop	{r7, pc}

080319b8 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80319b8:	b480      	push	{r7}
 80319ba:	b083      	sub	sp, #12
 80319bc:	af00      	add	r7, sp, #0
 80319be:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80319c0:	687b      	ldr	r3, [r7, #4]
 80319c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80319c6:	b2db      	uxtb	r3, r3
 80319c8:	2b40      	cmp	r3, #64	; 0x40
 80319ca:	d117      	bne.n	80319fc <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80319cc:	687b      	ldr	r3, [r7, #4]
 80319ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80319d0:	2b00      	cmp	r3, #0
 80319d2:	d109      	bne.n	80319e8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80319d4:	687b      	ldr	r3, [r7, #4]
 80319d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80319d8:	b2db      	uxtb	r3, r3
 80319da:	461a      	mov	r2, r3
 80319dc:	687b      	ldr	r3, [r7, #4]
 80319de:	681b      	ldr	r3, [r3, #0]
 80319e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80319e4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80319e6:	e067      	b.n	8031ab8 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80319e8:	687b      	ldr	r3, [r7, #4]
 80319ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80319ec:	b2db      	uxtb	r3, r3
 80319ee:	f043 0301 	orr.w	r3, r3, #1
 80319f2:	b2da      	uxtb	r2, r3
 80319f4:	687b      	ldr	r3, [r7, #4]
 80319f6:	681b      	ldr	r3, [r3, #0]
 80319f8:	611a      	str	r2, [r3, #16]
}
 80319fa:	e05d      	b.n	8031ab8 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80319fc:	687b      	ldr	r3, [r7, #4]
 80319fe:	691b      	ldr	r3, [r3, #16]
 8031a00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8031a04:	d133      	bne.n	8031a6e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8031a06:	687b      	ldr	r3, [r7, #4]
 8031a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8031a0c:	b2db      	uxtb	r3, r3
 8031a0e:	2b21      	cmp	r3, #33	; 0x21
 8031a10:	d109      	bne.n	8031a26 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8031a12:	687b      	ldr	r3, [r7, #4]
 8031a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8031a16:	b2db      	uxtb	r3, r3
 8031a18:	461a      	mov	r2, r3
 8031a1a:	687b      	ldr	r3, [r7, #4]
 8031a1c:	681b      	ldr	r3, [r3, #0]
 8031a1e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8031a22:	611a      	str	r2, [r3, #16]
 8031a24:	e008      	b.n	8031a38 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8031a26:	687b      	ldr	r3, [r7, #4]
 8031a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8031a2a:	b2db      	uxtb	r3, r3
 8031a2c:	f043 0301 	orr.w	r3, r3, #1
 8031a30:	b2da      	uxtb	r2, r3
 8031a32:	687b      	ldr	r3, [r7, #4]
 8031a34:	681b      	ldr	r3, [r3, #0]
 8031a36:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8031a38:	687b      	ldr	r3, [r7, #4]
 8031a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8031a3c:	2b00      	cmp	r3, #0
 8031a3e:	d004      	beq.n	8031a4a <I2C_Master_SB+0x92>
 8031a40:	687b      	ldr	r3, [r7, #4]
 8031a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8031a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8031a46:	2b00      	cmp	r3, #0
 8031a48:	d108      	bne.n	8031a5c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8031a4a:	687b      	ldr	r3, [r7, #4]
 8031a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8031a4e:	2b00      	cmp	r3, #0
 8031a50:	d032      	beq.n	8031ab8 <I2C_Master_SB+0x100>
 8031a52:	687b      	ldr	r3, [r7, #4]
 8031a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8031a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8031a58:	2b00      	cmp	r3, #0
 8031a5a:	d02d      	beq.n	8031ab8 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8031a5c:	687b      	ldr	r3, [r7, #4]
 8031a5e:	681b      	ldr	r3, [r3, #0]
 8031a60:	685a      	ldr	r2, [r3, #4]
 8031a62:	687b      	ldr	r3, [r7, #4]
 8031a64:	681b      	ldr	r3, [r3, #0]
 8031a66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8031a6a:	605a      	str	r2, [r3, #4]
}
 8031a6c:	e024      	b.n	8031ab8 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8031a6e:	687b      	ldr	r3, [r7, #4]
 8031a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8031a72:	2b00      	cmp	r3, #0
 8031a74:	d10e      	bne.n	8031a94 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8031a76:	687b      	ldr	r3, [r7, #4]
 8031a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8031a7a:	b29b      	uxth	r3, r3
 8031a7c:	11db      	asrs	r3, r3, #7
 8031a7e:	b2db      	uxtb	r3, r3
 8031a80:	f003 0306 	and.w	r3, r3, #6
 8031a84:	b2db      	uxtb	r3, r3
 8031a86:	f063 030f 	orn	r3, r3, #15
 8031a8a:	b2da      	uxtb	r2, r3
 8031a8c:	687b      	ldr	r3, [r7, #4]
 8031a8e:	681b      	ldr	r3, [r3, #0]
 8031a90:	611a      	str	r2, [r3, #16]
}
 8031a92:	e011      	b.n	8031ab8 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8031a94:	687b      	ldr	r3, [r7, #4]
 8031a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8031a98:	2b01      	cmp	r3, #1
 8031a9a:	d10d      	bne.n	8031ab8 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8031a9c:	687b      	ldr	r3, [r7, #4]
 8031a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8031aa0:	b29b      	uxth	r3, r3
 8031aa2:	11db      	asrs	r3, r3, #7
 8031aa4:	b2db      	uxtb	r3, r3
 8031aa6:	f003 0306 	and.w	r3, r3, #6
 8031aaa:	b2db      	uxtb	r3, r3
 8031aac:	f063 030e 	orn	r3, r3, #14
 8031ab0:	b2da      	uxtb	r2, r3
 8031ab2:	687b      	ldr	r3, [r7, #4]
 8031ab4:	681b      	ldr	r3, [r3, #0]
 8031ab6:	611a      	str	r2, [r3, #16]
}
 8031ab8:	bf00      	nop
 8031aba:	370c      	adds	r7, #12
 8031abc:	46bd      	mov	sp, r7
 8031abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031ac2:	4770      	bx	lr

08031ac4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8031ac4:	b480      	push	{r7}
 8031ac6:	b083      	sub	sp, #12
 8031ac8:	af00      	add	r7, sp, #0
 8031aca:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8031acc:	687b      	ldr	r3, [r7, #4]
 8031ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8031ad0:	b2da      	uxtb	r2, r3
 8031ad2:	687b      	ldr	r3, [r7, #4]
 8031ad4:	681b      	ldr	r3, [r3, #0]
 8031ad6:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8031ad8:	687b      	ldr	r3, [r7, #4]
 8031ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8031adc:	2b00      	cmp	r3, #0
 8031ade:	d103      	bne.n	8031ae8 <I2C_Master_ADD10+0x24>
 8031ae0:	687b      	ldr	r3, [r7, #4]
 8031ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8031ae4:	2b00      	cmp	r3, #0
 8031ae6:	d011      	beq.n	8031b0c <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8031ae8:	687b      	ldr	r3, [r7, #4]
 8031aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8031aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8031aee:	2b00      	cmp	r3, #0
 8031af0:	d104      	bne.n	8031afc <I2C_Master_ADD10+0x38>
 8031af2:	687b      	ldr	r3, [r7, #4]
 8031af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8031af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8031af8:	2b00      	cmp	r3, #0
 8031afa:	d007      	beq.n	8031b0c <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8031afc:	687b      	ldr	r3, [r7, #4]
 8031afe:	681b      	ldr	r3, [r3, #0]
 8031b00:	685a      	ldr	r2, [r3, #4]
 8031b02:	687b      	ldr	r3, [r7, #4]
 8031b04:	681b      	ldr	r3, [r3, #0]
 8031b06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8031b0a:	605a      	str	r2, [r3, #4]
    }
  }
}
 8031b0c:	bf00      	nop
 8031b0e:	370c      	adds	r7, #12
 8031b10:	46bd      	mov	sp, r7
 8031b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031b16:	4770      	bx	lr

08031b18 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8031b18:	b480      	push	{r7}
 8031b1a:	b091      	sub	sp, #68	; 0x44
 8031b1c:	af00      	add	r7, sp, #0
 8031b1e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8031b20:	687b      	ldr	r3, [r7, #4]
 8031b22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8031b26:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8031b2a:	687b      	ldr	r3, [r7, #4]
 8031b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031b2e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8031b30:	687b      	ldr	r3, [r7, #4]
 8031b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8031b34:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8031b36:	687b      	ldr	r3, [r7, #4]
 8031b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8031b3c:	b2db      	uxtb	r3, r3
 8031b3e:	2b22      	cmp	r3, #34	; 0x22
 8031b40:	f040 8169 	bne.w	8031e16 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8031b44:	687b      	ldr	r3, [r7, #4]
 8031b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8031b48:	2b00      	cmp	r3, #0
 8031b4a:	d10f      	bne.n	8031b6c <I2C_Master_ADDR+0x54>
 8031b4c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8031b50:	2b40      	cmp	r3, #64	; 0x40
 8031b52:	d10b      	bne.n	8031b6c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8031b54:	2300      	movs	r3, #0
 8031b56:	633b      	str	r3, [r7, #48]	; 0x30
 8031b58:	687b      	ldr	r3, [r7, #4]
 8031b5a:	681b      	ldr	r3, [r3, #0]
 8031b5c:	695b      	ldr	r3, [r3, #20]
 8031b5e:	633b      	str	r3, [r7, #48]	; 0x30
 8031b60:	687b      	ldr	r3, [r7, #4]
 8031b62:	681b      	ldr	r3, [r3, #0]
 8031b64:	699b      	ldr	r3, [r3, #24]
 8031b66:	633b      	str	r3, [r7, #48]	; 0x30
 8031b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8031b6a:	e160      	b.n	8031e2e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8031b6c:	687b      	ldr	r3, [r7, #4]
 8031b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8031b70:	2b00      	cmp	r3, #0
 8031b72:	d11d      	bne.n	8031bb0 <I2C_Master_ADDR+0x98>
 8031b74:	687b      	ldr	r3, [r7, #4]
 8031b76:	691b      	ldr	r3, [r3, #16]
 8031b78:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8031b7c:	d118      	bne.n	8031bb0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8031b7e:	2300      	movs	r3, #0
 8031b80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8031b82:	687b      	ldr	r3, [r7, #4]
 8031b84:	681b      	ldr	r3, [r3, #0]
 8031b86:	695b      	ldr	r3, [r3, #20]
 8031b88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8031b8a:	687b      	ldr	r3, [r7, #4]
 8031b8c:	681b      	ldr	r3, [r3, #0]
 8031b8e:	699b      	ldr	r3, [r3, #24]
 8031b90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8031b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8031b94:	687b      	ldr	r3, [r7, #4]
 8031b96:	681b      	ldr	r3, [r3, #0]
 8031b98:	681a      	ldr	r2, [r3, #0]
 8031b9a:	687b      	ldr	r3, [r7, #4]
 8031b9c:	681b      	ldr	r3, [r3, #0]
 8031b9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8031ba2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8031ba4:	687b      	ldr	r3, [r7, #4]
 8031ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8031ba8:	1c5a      	adds	r2, r3, #1
 8031baa:	687b      	ldr	r3, [r7, #4]
 8031bac:	651a      	str	r2, [r3, #80]	; 0x50
 8031bae:	e13e      	b.n	8031e2e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8031bb0:	687b      	ldr	r3, [r7, #4]
 8031bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031bb4:	b29b      	uxth	r3, r3
 8031bb6:	2b00      	cmp	r3, #0
 8031bb8:	d113      	bne.n	8031be2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8031bba:	2300      	movs	r3, #0
 8031bbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8031bbe:	687b      	ldr	r3, [r7, #4]
 8031bc0:	681b      	ldr	r3, [r3, #0]
 8031bc2:	695b      	ldr	r3, [r3, #20]
 8031bc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8031bc6:	687b      	ldr	r3, [r7, #4]
 8031bc8:	681b      	ldr	r3, [r3, #0]
 8031bca:	699b      	ldr	r3, [r3, #24]
 8031bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8031bce:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8031bd0:	687b      	ldr	r3, [r7, #4]
 8031bd2:	681b      	ldr	r3, [r3, #0]
 8031bd4:	681a      	ldr	r2, [r3, #0]
 8031bd6:	687b      	ldr	r3, [r7, #4]
 8031bd8:	681b      	ldr	r3, [r3, #0]
 8031bda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8031bde:	601a      	str	r2, [r3, #0]
 8031be0:	e115      	b.n	8031e0e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8031be2:	687b      	ldr	r3, [r7, #4]
 8031be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031be6:	b29b      	uxth	r3, r3
 8031be8:	2b01      	cmp	r3, #1
 8031bea:	f040 808a 	bne.w	8031d02 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8031bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8031bf0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8031bf4:	d137      	bne.n	8031c66 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8031bf6:	687b      	ldr	r3, [r7, #4]
 8031bf8:	681b      	ldr	r3, [r3, #0]
 8031bfa:	681a      	ldr	r2, [r3, #0]
 8031bfc:	687b      	ldr	r3, [r7, #4]
 8031bfe:	681b      	ldr	r3, [r3, #0]
 8031c00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8031c04:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8031c06:	687b      	ldr	r3, [r7, #4]
 8031c08:	681b      	ldr	r3, [r3, #0]
 8031c0a:	685b      	ldr	r3, [r3, #4]
 8031c0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8031c10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8031c14:	d113      	bne.n	8031c3e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8031c16:	687b      	ldr	r3, [r7, #4]
 8031c18:	681b      	ldr	r3, [r3, #0]
 8031c1a:	681a      	ldr	r2, [r3, #0]
 8031c1c:	687b      	ldr	r3, [r7, #4]
 8031c1e:	681b      	ldr	r3, [r3, #0]
 8031c20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8031c24:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8031c26:	2300      	movs	r3, #0
 8031c28:	627b      	str	r3, [r7, #36]	; 0x24
 8031c2a:	687b      	ldr	r3, [r7, #4]
 8031c2c:	681b      	ldr	r3, [r3, #0]
 8031c2e:	695b      	ldr	r3, [r3, #20]
 8031c30:	627b      	str	r3, [r7, #36]	; 0x24
 8031c32:	687b      	ldr	r3, [r7, #4]
 8031c34:	681b      	ldr	r3, [r3, #0]
 8031c36:	699b      	ldr	r3, [r3, #24]
 8031c38:	627b      	str	r3, [r7, #36]	; 0x24
 8031c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031c3c:	e0e7      	b.n	8031e0e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8031c3e:	2300      	movs	r3, #0
 8031c40:	623b      	str	r3, [r7, #32]
 8031c42:	687b      	ldr	r3, [r7, #4]
 8031c44:	681b      	ldr	r3, [r3, #0]
 8031c46:	695b      	ldr	r3, [r3, #20]
 8031c48:	623b      	str	r3, [r7, #32]
 8031c4a:	687b      	ldr	r3, [r7, #4]
 8031c4c:	681b      	ldr	r3, [r3, #0]
 8031c4e:	699b      	ldr	r3, [r3, #24]
 8031c50:	623b      	str	r3, [r7, #32]
 8031c52:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8031c54:	687b      	ldr	r3, [r7, #4]
 8031c56:	681b      	ldr	r3, [r3, #0]
 8031c58:	681a      	ldr	r2, [r3, #0]
 8031c5a:	687b      	ldr	r3, [r7, #4]
 8031c5c:	681b      	ldr	r3, [r3, #0]
 8031c5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8031c62:	601a      	str	r2, [r3, #0]
 8031c64:	e0d3      	b.n	8031e0e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8031c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8031c68:	2b08      	cmp	r3, #8
 8031c6a:	d02e      	beq.n	8031cca <I2C_Master_ADDR+0x1b2>
 8031c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8031c6e:	2b20      	cmp	r3, #32
 8031c70:	d02b      	beq.n	8031cca <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8031c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8031c74:	2b12      	cmp	r3, #18
 8031c76:	d102      	bne.n	8031c7e <I2C_Master_ADDR+0x166>
 8031c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8031c7a:	2b01      	cmp	r3, #1
 8031c7c:	d125      	bne.n	8031cca <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8031c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8031c80:	2b04      	cmp	r3, #4
 8031c82:	d00e      	beq.n	8031ca2 <I2C_Master_ADDR+0x18a>
 8031c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8031c86:	2b02      	cmp	r3, #2
 8031c88:	d00b      	beq.n	8031ca2 <I2C_Master_ADDR+0x18a>
 8031c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8031c8c:	2b10      	cmp	r3, #16
 8031c8e:	d008      	beq.n	8031ca2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8031c90:	687b      	ldr	r3, [r7, #4]
 8031c92:	681b      	ldr	r3, [r3, #0]
 8031c94:	681a      	ldr	r2, [r3, #0]
 8031c96:	687b      	ldr	r3, [r7, #4]
 8031c98:	681b      	ldr	r3, [r3, #0]
 8031c9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8031c9e:	601a      	str	r2, [r3, #0]
 8031ca0:	e007      	b.n	8031cb2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8031ca2:	687b      	ldr	r3, [r7, #4]
 8031ca4:	681b      	ldr	r3, [r3, #0]
 8031ca6:	681a      	ldr	r2, [r3, #0]
 8031ca8:	687b      	ldr	r3, [r7, #4]
 8031caa:	681b      	ldr	r3, [r3, #0]
 8031cac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8031cb0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8031cb2:	2300      	movs	r3, #0
 8031cb4:	61fb      	str	r3, [r7, #28]
 8031cb6:	687b      	ldr	r3, [r7, #4]
 8031cb8:	681b      	ldr	r3, [r3, #0]
 8031cba:	695b      	ldr	r3, [r3, #20]
 8031cbc:	61fb      	str	r3, [r7, #28]
 8031cbe:	687b      	ldr	r3, [r7, #4]
 8031cc0:	681b      	ldr	r3, [r3, #0]
 8031cc2:	699b      	ldr	r3, [r3, #24]
 8031cc4:	61fb      	str	r3, [r7, #28]
 8031cc6:	69fb      	ldr	r3, [r7, #28]
 8031cc8:	e0a1      	b.n	8031e0e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8031cca:	687b      	ldr	r3, [r7, #4]
 8031ccc:	681b      	ldr	r3, [r3, #0]
 8031cce:	681a      	ldr	r2, [r3, #0]
 8031cd0:	687b      	ldr	r3, [r7, #4]
 8031cd2:	681b      	ldr	r3, [r3, #0]
 8031cd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8031cd8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8031cda:	2300      	movs	r3, #0
 8031cdc:	61bb      	str	r3, [r7, #24]
 8031cde:	687b      	ldr	r3, [r7, #4]
 8031ce0:	681b      	ldr	r3, [r3, #0]
 8031ce2:	695b      	ldr	r3, [r3, #20]
 8031ce4:	61bb      	str	r3, [r7, #24]
 8031ce6:	687b      	ldr	r3, [r7, #4]
 8031ce8:	681b      	ldr	r3, [r3, #0]
 8031cea:	699b      	ldr	r3, [r3, #24]
 8031cec:	61bb      	str	r3, [r7, #24]
 8031cee:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8031cf0:	687b      	ldr	r3, [r7, #4]
 8031cf2:	681b      	ldr	r3, [r3, #0]
 8031cf4:	681a      	ldr	r2, [r3, #0]
 8031cf6:	687b      	ldr	r3, [r7, #4]
 8031cf8:	681b      	ldr	r3, [r3, #0]
 8031cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8031cfe:	601a      	str	r2, [r3, #0]
 8031d00:	e085      	b.n	8031e0e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8031d02:	687b      	ldr	r3, [r7, #4]
 8031d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031d06:	b29b      	uxth	r3, r3
 8031d08:	2b02      	cmp	r3, #2
 8031d0a:	d14d      	bne.n	8031da8 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8031d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8031d0e:	2b04      	cmp	r3, #4
 8031d10:	d016      	beq.n	8031d40 <I2C_Master_ADDR+0x228>
 8031d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8031d14:	2b02      	cmp	r3, #2
 8031d16:	d013      	beq.n	8031d40 <I2C_Master_ADDR+0x228>
 8031d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8031d1a:	2b10      	cmp	r3, #16
 8031d1c:	d010      	beq.n	8031d40 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8031d1e:	687b      	ldr	r3, [r7, #4]
 8031d20:	681b      	ldr	r3, [r3, #0]
 8031d22:	681a      	ldr	r2, [r3, #0]
 8031d24:	687b      	ldr	r3, [r7, #4]
 8031d26:	681b      	ldr	r3, [r3, #0]
 8031d28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8031d2c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8031d2e:	687b      	ldr	r3, [r7, #4]
 8031d30:	681b      	ldr	r3, [r3, #0]
 8031d32:	681a      	ldr	r2, [r3, #0]
 8031d34:	687b      	ldr	r3, [r7, #4]
 8031d36:	681b      	ldr	r3, [r3, #0]
 8031d38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8031d3c:	601a      	str	r2, [r3, #0]
 8031d3e:	e007      	b.n	8031d50 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8031d40:	687b      	ldr	r3, [r7, #4]
 8031d42:	681b      	ldr	r3, [r3, #0]
 8031d44:	681a      	ldr	r2, [r3, #0]
 8031d46:	687b      	ldr	r3, [r7, #4]
 8031d48:	681b      	ldr	r3, [r3, #0]
 8031d4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8031d4e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8031d50:	687b      	ldr	r3, [r7, #4]
 8031d52:	681b      	ldr	r3, [r3, #0]
 8031d54:	685b      	ldr	r3, [r3, #4]
 8031d56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8031d5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8031d5e:	d117      	bne.n	8031d90 <I2C_Master_ADDR+0x278>
 8031d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8031d62:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8031d66:	d00b      	beq.n	8031d80 <I2C_Master_ADDR+0x268>
 8031d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8031d6a:	2b01      	cmp	r3, #1
 8031d6c:	d008      	beq.n	8031d80 <I2C_Master_ADDR+0x268>
 8031d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8031d70:	2b08      	cmp	r3, #8
 8031d72:	d005      	beq.n	8031d80 <I2C_Master_ADDR+0x268>
 8031d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8031d76:	2b10      	cmp	r3, #16
 8031d78:	d002      	beq.n	8031d80 <I2C_Master_ADDR+0x268>
 8031d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8031d7c:	2b20      	cmp	r3, #32
 8031d7e:	d107      	bne.n	8031d90 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8031d80:	687b      	ldr	r3, [r7, #4]
 8031d82:	681b      	ldr	r3, [r3, #0]
 8031d84:	685a      	ldr	r2, [r3, #4]
 8031d86:	687b      	ldr	r3, [r7, #4]
 8031d88:	681b      	ldr	r3, [r3, #0]
 8031d8a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8031d8e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8031d90:	2300      	movs	r3, #0
 8031d92:	617b      	str	r3, [r7, #20]
 8031d94:	687b      	ldr	r3, [r7, #4]
 8031d96:	681b      	ldr	r3, [r3, #0]
 8031d98:	695b      	ldr	r3, [r3, #20]
 8031d9a:	617b      	str	r3, [r7, #20]
 8031d9c:	687b      	ldr	r3, [r7, #4]
 8031d9e:	681b      	ldr	r3, [r3, #0]
 8031da0:	699b      	ldr	r3, [r3, #24]
 8031da2:	617b      	str	r3, [r7, #20]
 8031da4:	697b      	ldr	r3, [r7, #20]
 8031da6:	e032      	b.n	8031e0e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8031da8:	687b      	ldr	r3, [r7, #4]
 8031daa:	681b      	ldr	r3, [r3, #0]
 8031dac:	681a      	ldr	r2, [r3, #0]
 8031dae:	687b      	ldr	r3, [r7, #4]
 8031db0:	681b      	ldr	r3, [r3, #0]
 8031db2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8031db6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8031db8:	687b      	ldr	r3, [r7, #4]
 8031dba:	681b      	ldr	r3, [r3, #0]
 8031dbc:	685b      	ldr	r3, [r3, #4]
 8031dbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8031dc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8031dc6:	d117      	bne.n	8031df8 <I2C_Master_ADDR+0x2e0>
 8031dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8031dca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8031dce:	d00b      	beq.n	8031de8 <I2C_Master_ADDR+0x2d0>
 8031dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8031dd2:	2b01      	cmp	r3, #1
 8031dd4:	d008      	beq.n	8031de8 <I2C_Master_ADDR+0x2d0>
 8031dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8031dd8:	2b08      	cmp	r3, #8
 8031dda:	d005      	beq.n	8031de8 <I2C_Master_ADDR+0x2d0>
 8031ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8031dde:	2b10      	cmp	r3, #16
 8031de0:	d002      	beq.n	8031de8 <I2C_Master_ADDR+0x2d0>
 8031de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8031de4:	2b20      	cmp	r3, #32
 8031de6:	d107      	bne.n	8031df8 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8031de8:	687b      	ldr	r3, [r7, #4]
 8031dea:	681b      	ldr	r3, [r3, #0]
 8031dec:	685a      	ldr	r2, [r3, #4]
 8031dee:	687b      	ldr	r3, [r7, #4]
 8031df0:	681b      	ldr	r3, [r3, #0]
 8031df2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8031df6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8031df8:	2300      	movs	r3, #0
 8031dfa:	613b      	str	r3, [r7, #16]
 8031dfc:	687b      	ldr	r3, [r7, #4]
 8031dfe:	681b      	ldr	r3, [r3, #0]
 8031e00:	695b      	ldr	r3, [r3, #20]
 8031e02:	613b      	str	r3, [r7, #16]
 8031e04:	687b      	ldr	r3, [r7, #4]
 8031e06:	681b      	ldr	r3, [r3, #0]
 8031e08:	699b      	ldr	r3, [r3, #24]
 8031e0a:	613b      	str	r3, [r7, #16]
 8031e0c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8031e0e:	687b      	ldr	r3, [r7, #4]
 8031e10:	2200      	movs	r2, #0
 8031e12:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8031e14:	e00b      	b.n	8031e2e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8031e16:	2300      	movs	r3, #0
 8031e18:	60fb      	str	r3, [r7, #12]
 8031e1a:	687b      	ldr	r3, [r7, #4]
 8031e1c:	681b      	ldr	r3, [r3, #0]
 8031e1e:	695b      	ldr	r3, [r3, #20]
 8031e20:	60fb      	str	r3, [r7, #12]
 8031e22:	687b      	ldr	r3, [r7, #4]
 8031e24:	681b      	ldr	r3, [r3, #0]
 8031e26:	699b      	ldr	r3, [r3, #24]
 8031e28:	60fb      	str	r3, [r7, #12]
 8031e2a:	68fb      	ldr	r3, [r7, #12]
}
 8031e2c:	e7ff      	b.n	8031e2e <I2C_Master_ADDR+0x316>
 8031e2e:	bf00      	nop
 8031e30:	3744      	adds	r7, #68	; 0x44
 8031e32:	46bd      	mov	sp, r7
 8031e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031e38:	4770      	bx	lr

08031e3a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8031e3a:	b580      	push	{r7, lr}
 8031e3c:	b084      	sub	sp, #16
 8031e3e:	af00      	add	r7, sp, #0
 8031e40:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8031e42:	687b      	ldr	r3, [r7, #4]
 8031e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8031e48:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8031e4a:	687b      	ldr	r3, [r7, #4]
 8031e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031e4e:	b29b      	uxth	r3, r3
 8031e50:	2b00      	cmp	r3, #0
 8031e52:	d02b      	beq.n	8031eac <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8031e54:	687b      	ldr	r3, [r7, #4]
 8031e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031e58:	781a      	ldrb	r2, [r3, #0]
 8031e5a:	687b      	ldr	r3, [r7, #4]
 8031e5c:	681b      	ldr	r3, [r3, #0]
 8031e5e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8031e60:	687b      	ldr	r3, [r7, #4]
 8031e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031e64:	1c5a      	adds	r2, r3, #1
 8031e66:	687b      	ldr	r3, [r7, #4]
 8031e68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8031e6a:	687b      	ldr	r3, [r7, #4]
 8031e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031e6e:	b29b      	uxth	r3, r3
 8031e70:	3b01      	subs	r3, #1
 8031e72:	b29a      	uxth	r2, r3
 8031e74:	687b      	ldr	r3, [r7, #4]
 8031e76:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8031e78:	687b      	ldr	r3, [r7, #4]
 8031e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031e7c:	b29b      	uxth	r3, r3
 8031e7e:	2b00      	cmp	r3, #0
 8031e80:	d114      	bne.n	8031eac <I2C_SlaveTransmit_TXE+0x72>
 8031e82:	7bfb      	ldrb	r3, [r7, #15]
 8031e84:	2b29      	cmp	r3, #41	; 0x29
 8031e86:	d111      	bne.n	8031eac <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8031e88:	687b      	ldr	r3, [r7, #4]
 8031e8a:	681b      	ldr	r3, [r3, #0]
 8031e8c:	685a      	ldr	r2, [r3, #4]
 8031e8e:	687b      	ldr	r3, [r7, #4]
 8031e90:	681b      	ldr	r3, [r3, #0]
 8031e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8031e96:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8031e98:	687b      	ldr	r3, [r7, #4]
 8031e9a:	2221      	movs	r2, #33	; 0x21
 8031e9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8031e9e:	687b      	ldr	r3, [r7, #4]
 8031ea0:	2228      	movs	r2, #40	; 0x28
 8031ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8031ea6:	6878      	ldr	r0, [r7, #4]
 8031ea8:	f7ff fa43 	bl	8031332 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8031eac:	bf00      	nop
 8031eae:	3710      	adds	r7, #16
 8031eb0:	46bd      	mov	sp, r7
 8031eb2:	bd80      	pop	{r7, pc}

08031eb4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8031eb4:	b480      	push	{r7}
 8031eb6:	b083      	sub	sp, #12
 8031eb8:	af00      	add	r7, sp, #0
 8031eba:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8031ebc:	687b      	ldr	r3, [r7, #4]
 8031ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031ec0:	b29b      	uxth	r3, r3
 8031ec2:	2b00      	cmp	r3, #0
 8031ec4:	d011      	beq.n	8031eea <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8031ec6:	687b      	ldr	r3, [r7, #4]
 8031ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031eca:	781a      	ldrb	r2, [r3, #0]
 8031ecc:	687b      	ldr	r3, [r7, #4]
 8031ece:	681b      	ldr	r3, [r3, #0]
 8031ed0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8031ed2:	687b      	ldr	r3, [r7, #4]
 8031ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031ed6:	1c5a      	adds	r2, r3, #1
 8031ed8:	687b      	ldr	r3, [r7, #4]
 8031eda:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8031edc:	687b      	ldr	r3, [r7, #4]
 8031ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031ee0:	b29b      	uxth	r3, r3
 8031ee2:	3b01      	subs	r3, #1
 8031ee4:	b29a      	uxth	r2, r3
 8031ee6:	687b      	ldr	r3, [r7, #4]
 8031ee8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8031eea:	bf00      	nop
 8031eec:	370c      	adds	r7, #12
 8031eee:	46bd      	mov	sp, r7
 8031ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031ef4:	4770      	bx	lr

08031ef6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8031ef6:	b580      	push	{r7, lr}
 8031ef8:	b084      	sub	sp, #16
 8031efa:	af00      	add	r7, sp, #0
 8031efc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8031efe:	687b      	ldr	r3, [r7, #4]
 8031f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8031f04:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8031f06:	687b      	ldr	r3, [r7, #4]
 8031f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031f0a:	b29b      	uxth	r3, r3
 8031f0c:	2b00      	cmp	r3, #0
 8031f0e:	d02c      	beq.n	8031f6a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8031f10:	687b      	ldr	r3, [r7, #4]
 8031f12:	681b      	ldr	r3, [r3, #0]
 8031f14:	691a      	ldr	r2, [r3, #16]
 8031f16:	687b      	ldr	r3, [r7, #4]
 8031f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031f1a:	b2d2      	uxtb	r2, r2
 8031f1c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8031f1e:	687b      	ldr	r3, [r7, #4]
 8031f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031f22:	1c5a      	adds	r2, r3, #1
 8031f24:	687b      	ldr	r3, [r7, #4]
 8031f26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8031f28:	687b      	ldr	r3, [r7, #4]
 8031f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031f2c:	b29b      	uxth	r3, r3
 8031f2e:	3b01      	subs	r3, #1
 8031f30:	b29a      	uxth	r2, r3
 8031f32:	687b      	ldr	r3, [r7, #4]
 8031f34:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8031f36:	687b      	ldr	r3, [r7, #4]
 8031f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031f3a:	b29b      	uxth	r3, r3
 8031f3c:	2b00      	cmp	r3, #0
 8031f3e:	d114      	bne.n	8031f6a <I2C_SlaveReceive_RXNE+0x74>
 8031f40:	7bfb      	ldrb	r3, [r7, #15]
 8031f42:	2b2a      	cmp	r3, #42	; 0x2a
 8031f44:	d111      	bne.n	8031f6a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8031f46:	687b      	ldr	r3, [r7, #4]
 8031f48:	681b      	ldr	r3, [r3, #0]
 8031f4a:	685a      	ldr	r2, [r3, #4]
 8031f4c:	687b      	ldr	r3, [r7, #4]
 8031f4e:	681b      	ldr	r3, [r3, #0]
 8031f50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8031f54:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8031f56:	687b      	ldr	r3, [r7, #4]
 8031f58:	2222      	movs	r2, #34	; 0x22
 8031f5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8031f5c:	687b      	ldr	r3, [r7, #4]
 8031f5e:	2228      	movs	r2, #40	; 0x28
 8031f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8031f64:	6878      	ldr	r0, [r7, #4]
 8031f66:	f7ff f9ee 	bl	8031346 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8031f6a:	bf00      	nop
 8031f6c:	3710      	adds	r7, #16
 8031f6e:	46bd      	mov	sp, r7
 8031f70:	bd80      	pop	{r7, pc}

08031f72 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8031f72:	b480      	push	{r7}
 8031f74:	b083      	sub	sp, #12
 8031f76:	af00      	add	r7, sp, #0
 8031f78:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8031f7a:	687b      	ldr	r3, [r7, #4]
 8031f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031f7e:	b29b      	uxth	r3, r3
 8031f80:	2b00      	cmp	r3, #0
 8031f82:	d012      	beq.n	8031faa <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8031f84:	687b      	ldr	r3, [r7, #4]
 8031f86:	681b      	ldr	r3, [r3, #0]
 8031f88:	691a      	ldr	r2, [r3, #16]
 8031f8a:	687b      	ldr	r3, [r7, #4]
 8031f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031f8e:	b2d2      	uxtb	r2, r2
 8031f90:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8031f92:	687b      	ldr	r3, [r7, #4]
 8031f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031f96:	1c5a      	adds	r2, r3, #1
 8031f98:	687b      	ldr	r3, [r7, #4]
 8031f9a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8031f9c:	687b      	ldr	r3, [r7, #4]
 8031f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031fa0:	b29b      	uxth	r3, r3
 8031fa2:	3b01      	subs	r3, #1
 8031fa4:	b29a      	uxth	r2, r3
 8031fa6:	687b      	ldr	r3, [r7, #4]
 8031fa8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8031faa:	bf00      	nop
 8031fac:	370c      	adds	r7, #12
 8031fae:	46bd      	mov	sp, r7
 8031fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031fb4:	4770      	bx	lr

08031fb6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8031fb6:	b580      	push	{r7, lr}
 8031fb8:	b084      	sub	sp, #16
 8031fba:	af00      	add	r7, sp, #0
 8031fbc:	6078      	str	r0, [r7, #4]
 8031fbe:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8031fc0:	2300      	movs	r3, #0
 8031fc2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8031fc4:	687b      	ldr	r3, [r7, #4]
 8031fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8031fca:	b2db      	uxtb	r3, r3
 8031fcc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8031fd0:	2b28      	cmp	r3, #40	; 0x28
 8031fd2:	d127      	bne.n	8032024 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8031fd4:	687b      	ldr	r3, [r7, #4]
 8031fd6:	681b      	ldr	r3, [r3, #0]
 8031fd8:	685a      	ldr	r2, [r3, #4]
 8031fda:	687b      	ldr	r3, [r7, #4]
 8031fdc:	681b      	ldr	r3, [r3, #0]
 8031fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8031fe2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8031fe4:	683b      	ldr	r3, [r7, #0]
 8031fe6:	089b      	lsrs	r3, r3, #2
 8031fe8:	f003 0301 	and.w	r3, r3, #1
 8031fec:	2b00      	cmp	r3, #0
 8031fee:	d101      	bne.n	8031ff4 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8031ff0:	2301      	movs	r3, #1
 8031ff2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8031ff4:	683b      	ldr	r3, [r7, #0]
 8031ff6:	09db      	lsrs	r3, r3, #7
 8031ff8:	f003 0301 	and.w	r3, r3, #1
 8031ffc:	2b00      	cmp	r3, #0
 8031ffe:	d103      	bne.n	8032008 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8032000:	687b      	ldr	r3, [r7, #4]
 8032002:	68db      	ldr	r3, [r3, #12]
 8032004:	81bb      	strh	r3, [r7, #12]
 8032006:	e002      	b.n	803200e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8032008:	687b      	ldr	r3, [r7, #4]
 803200a:	699b      	ldr	r3, [r3, #24]
 803200c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 803200e:	687b      	ldr	r3, [r7, #4]
 8032010:	2200      	movs	r2, #0
 8032012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8032016:	89ba      	ldrh	r2, [r7, #12]
 8032018:	7bfb      	ldrb	r3, [r7, #15]
 803201a:	4619      	mov	r1, r3
 803201c:	6878      	ldr	r0, [r7, #4]
 803201e:	f7ff f99c 	bl	803135a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8032022:	e008      	b.n	8032036 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8032024:	687b      	ldr	r3, [r7, #4]
 8032026:	681b      	ldr	r3, [r3, #0]
 8032028:	f06f 0202 	mvn.w	r2, #2
 803202c:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 803202e:	687b      	ldr	r3, [r7, #4]
 8032030:	2200      	movs	r2, #0
 8032032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8032036:	bf00      	nop
 8032038:	3710      	adds	r7, #16
 803203a:	46bd      	mov	sp, r7
 803203c:	bd80      	pop	{r7, pc}
	...

08032040 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8032040:	b580      	push	{r7, lr}
 8032042:	b084      	sub	sp, #16
 8032044:	af00      	add	r7, sp, #0
 8032046:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8032048:	687b      	ldr	r3, [r7, #4]
 803204a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 803204e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8032050:	687b      	ldr	r3, [r7, #4]
 8032052:	681b      	ldr	r3, [r3, #0]
 8032054:	685a      	ldr	r2, [r3, #4]
 8032056:	687b      	ldr	r3, [r7, #4]
 8032058:	681b      	ldr	r3, [r3, #0]
 803205a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 803205e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8032060:	2300      	movs	r3, #0
 8032062:	60bb      	str	r3, [r7, #8]
 8032064:	687b      	ldr	r3, [r7, #4]
 8032066:	681b      	ldr	r3, [r3, #0]
 8032068:	695b      	ldr	r3, [r3, #20]
 803206a:	60bb      	str	r3, [r7, #8]
 803206c:	687b      	ldr	r3, [r7, #4]
 803206e:	681b      	ldr	r3, [r3, #0]
 8032070:	681a      	ldr	r2, [r3, #0]
 8032072:	687b      	ldr	r3, [r7, #4]
 8032074:	681b      	ldr	r3, [r3, #0]
 8032076:	f042 0201 	orr.w	r2, r2, #1
 803207a:	601a      	str	r2, [r3, #0]
 803207c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 803207e:	687b      	ldr	r3, [r7, #4]
 8032080:	681b      	ldr	r3, [r3, #0]
 8032082:	681a      	ldr	r2, [r3, #0]
 8032084:	687b      	ldr	r3, [r7, #4]
 8032086:	681b      	ldr	r3, [r3, #0]
 8032088:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 803208c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 803208e:	687b      	ldr	r3, [r7, #4]
 8032090:	681b      	ldr	r3, [r3, #0]
 8032092:	685b      	ldr	r3, [r3, #4]
 8032094:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8032098:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 803209c:	d172      	bne.n	8032184 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 803209e:	7bfb      	ldrb	r3, [r7, #15]
 80320a0:	2b22      	cmp	r3, #34	; 0x22
 80320a2:	d002      	beq.n	80320aa <I2C_Slave_STOPF+0x6a>
 80320a4:	7bfb      	ldrb	r3, [r7, #15]
 80320a6:	2b2a      	cmp	r3, #42	; 0x2a
 80320a8:	d135      	bne.n	8032116 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80320aa:	687b      	ldr	r3, [r7, #4]
 80320ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80320ae:	681b      	ldr	r3, [r3, #0]
 80320b0:	685b      	ldr	r3, [r3, #4]
 80320b2:	b29a      	uxth	r2, r3
 80320b4:	687b      	ldr	r3, [r7, #4]
 80320b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80320b8:	687b      	ldr	r3, [r7, #4]
 80320ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80320bc:	b29b      	uxth	r3, r3
 80320be:	2b00      	cmp	r3, #0
 80320c0:	d005      	beq.n	80320ce <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80320c2:	687b      	ldr	r3, [r7, #4]
 80320c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80320c6:	f043 0204 	orr.w	r2, r3, #4
 80320ca:	687b      	ldr	r3, [r7, #4]
 80320cc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80320ce:	687b      	ldr	r3, [r7, #4]
 80320d0:	681b      	ldr	r3, [r3, #0]
 80320d2:	685a      	ldr	r2, [r3, #4]
 80320d4:	687b      	ldr	r3, [r7, #4]
 80320d6:	681b      	ldr	r3, [r3, #0]
 80320d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80320dc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80320de:	687b      	ldr	r3, [r7, #4]
 80320e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80320e2:	4618      	mov	r0, r3
 80320e4:	f7fd fcac 	bl	802fa40 <HAL_DMA_GetState>
 80320e8:	4603      	mov	r3, r0
 80320ea:	2b01      	cmp	r3, #1
 80320ec:	d049      	beq.n	8032182 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80320ee:	687b      	ldr	r3, [r7, #4]
 80320f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80320f2:	4a69      	ldr	r2, [pc, #420]	; (8032298 <I2C_Slave_STOPF+0x258>)
 80320f4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80320f6:	687b      	ldr	r3, [r7, #4]
 80320f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80320fa:	4618      	mov	r0, r3
 80320fc:	f7fd faf4 	bl	802f6e8 <HAL_DMA_Abort_IT>
 8032100:	4603      	mov	r3, r0
 8032102:	2b00      	cmp	r3, #0
 8032104:	d03d      	beq.n	8032182 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8032106:	687b      	ldr	r3, [r7, #4]
 8032108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803210a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803210c:	687a      	ldr	r2, [r7, #4]
 803210e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8032110:	4610      	mov	r0, r2
 8032112:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8032114:	e035      	b.n	8032182 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8032116:	687b      	ldr	r3, [r7, #4]
 8032118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803211a:	681b      	ldr	r3, [r3, #0]
 803211c:	685b      	ldr	r3, [r3, #4]
 803211e:	b29a      	uxth	r2, r3
 8032120:	687b      	ldr	r3, [r7, #4]
 8032122:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8032124:	687b      	ldr	r3, [r7, #4]
 8032126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8032128:	b29b      	uxth	r3, r3
 803212a:	2b00      	cmp	r3, #0
 803212c:	d005      	beq.n	803213a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 803212e:	687b      	ldr	r3, [r7, #4]
 8032130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032132:	f043 0204 	orr.w	r2, r3, #4
 8032136:	687b      	ldr	r3, [r7, #4]
 8032138:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 803213a:	687b      	ldr	r3, [r7, #4]
 803213c:	681b      	ldr	r3, [r3, #0]
 803213e:	685a      	ldr	r2, [r3, #4]
 8032140:	687b      	ldr	r3, [r7, #4]
 8032142:	681b      	ldr	r3, [r3, #0]
 8032144:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8032148:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 803214a:	687b      	ldr	r3, [r7, #4]
 803214c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803214e:	4618      	mov	r0, r3
 8032150:	f7fd fc76 	bl	802fa40 <HAL_DMA_GetState>
 8032154:	4603      	mov	r3, r0
 8032156:	2b01      	cmp	r3, #1
 8032158:	d014      	beq.n	8032184 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 803215a:	687b      	ldr	r3, [r7, #4]
 803215c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803215e:	4a4e      	ldr	r2, [pc, #312]	; (8032298 <I2C_Slave_STOPF+0x258>)
 8032160:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8032162:	687b      	ldr	r3, [r7, #4]
 8032164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8032166:	4618      	mov	r0, r3
 8032168:	f7fd fabe 	bl	802f6e8 <HAL_DMA_Abort_IT>
 803216c:	4603      	mov	r3, r0
 803216e:	2b00      	cmp	r3, #0
 8032170:	d008      	beq.n	8032184 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8032172:	687b      	ldr	r3, [r7, #4]
 8032174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8032176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8032178:	687a      	ldr	r2, [r7, #4]
 803217a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 803217c:	4610      	mov	r0, r2
 803217e:	4798      	blx	r3
 8032180:	e000      	b.n	8032184 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8032182:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8032184:	687b      	ldr	r3, [r7, #4]
 8032186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8032188:	b29b      	uxth	r3, r3
 803218a:	2b00      	cmp	r3, #0
 803218c:	d03e      	beq.n	803220c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 803218e:	687b      	ldr	r3, [r7, #4]
 8032190:	681b      	ldr	r3, [r3, #0]
 8032192:	695b      	ldr	r3, [r3, #20]
 8032194:	f003 0304 	and.w	r3, r3, #4
 8032198:	2b04      	cmp	r3, #4
 803219a:	d112      	bne.n	80321c2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 803219c:	687b      	ldr	r3, [r7, #4]
 803219e:	681b      	ldr	r3, [r3, #0]
 80321a0:	691a      	ldr	r2, [r3, #16]
 80321a2:	687b      	ldr	r3, [r7, #4]
 80321a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80321a6:	b2d2      	uxtb	r2, r2
 80321a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80321aa:	687b      	ldr	r3, [r7, #4]
 80321ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80321ae:	1c5a      	adds	r2, r3, #1
 80321b0:	687b      	ldr	r3, [r7, #4]
 80321b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80321b4:	687b      	ldr	r3, [r7, #4]
 80321b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80321b8:	b29b      	uxth	r3, r3
 80321ba:	3b01      	subs	r3, #1
 80321bc:	b29a      	uxth	r2, r3
 80321be:	687b      	ldr	r3, [r7, #4]
 80321c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80321c2:	687b      	ldr	r3, [r7, #4]
 80321c4:	681b      	ldr	r3, [r3, #0]
 80321c6:	695b      	ldr	r3, [r3, #20]
 80321c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80321cc:	2b40      	cmp	r3, #64	; 0x40
 80321ce:	d112      	bne.n	80321f6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80321d0:	687b      	ldr	r3, [r7, #4]
 80321d2:	681b      	ldr	r3, [r3, #0]
 80321d4:	691a      	ldr	r2, [r3, #16]
 80321d6:	687b      	ldr	r3, [r7, #4]
 80321d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80321da:	b2d2      	uxtb	r2, r2
 80321dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80321de:	687b      	ldr	r3, [r7, #4]
 80321e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80321e2:	1c5a      	adds	r2, r3, #1
 80321e4:	687b      	ldr	r3, [r7, #4]
 80321e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80321e8:	687b      	ldr	r3, [r7, #4]
 80321ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80321ec:	b29b      	uxth	r3, r3
 80321ee:	3b01      	subs	r3, #1
 80321f0:	b29a      	uxth	r2, r3
 80321f2:	687b      	ldr	r3, [r7, #4]
 80321f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80321f6:	687b      	ldr	r3, [r7, #4]
 80321f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80321fa:	b29b      	uxth	r3, r3
 80321fc:	2b00      	cmp	r3, #0
 80321fe:	d005      	beq.n	803220c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8032200:	687b      	ldr	r3, [r7, #4]
 8032202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032204:	f043 0204 	orr.w	r2, r3, #4
 8032208:	687b      	ldr	r3, [r7, #4]
 803220a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 803220c:	687b      	ldr	r3, [r7, #4]
 803220e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032210:	2b00      	cmp	r3, #0
 8032212:	d003      	beq.n	803221c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8032214:	6878      	ldr	r0, [r7, #4]
 8032216:	f000 f8b3 	bl	8032380 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 803221a:	e039      	b.n	8032290 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 803221c:	7bfb      	ldrb	r3, [r7, #15]
 803221e:	2b2a      	cmp	r3, #42	; 0x2a
 8032220:	d109      	bne.n	8032236 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8032222:	687b      	ldr	r3, [r7, #4]
 8032224:	2200      	movs	r2, #0
 8032226:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8032228:	687b      	ldr	r3, [r7, #4]
 803222a:	2228      	movs	r2, #40	; 0x28
 803222c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8032230:	6878      	ldr	r0, [r7, #4]
 8032232:	f7ff f888 	bl	8031346 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8032236:	687b      	ldr	r3, [r7, #4]
 8032238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 803223c:	b2db      	uxtb	r3, r3
 803223e:	2b28      	cmp	r3, #40	; 0x28
 8032240:	d111      	bne.n	8032266 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8032242:	687b      	ldr	r3, [r7, #4]
 8032244:	4a15      	ldr	r2, [pc, #84]	; (803229c <I2C_Slave_STOPF+0x25c>)
 8032246:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8032248:	687b      	ldr	r3, [r7, #4]
 803224a:	2200      	movs	r2, #0
 803224c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 803224e:	687b      	ldr	r3, [r7, #4]
 8032250:	2220      	movs	r2, #32
 8032252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8032256:	687b      	ldr	r3, [r7, #4]
 8032258:	2200      	movs	r2, #0
 803225a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 803225e:	6878      	ldr	r0, [r7, #4]
 8032260:	f7ff f889 	bl	8031376 <HAL_I2C_ListenCpltCallback>
}
 8032264:	e014      	b.n	8032290 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8032266:	687b      	ldr	r3, [r7, #4]
 8032268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803226a:	2b22      	cmp	r3, #34	; 0x22
 803226c:	d002      	beq.n	8032274 <I2C_Slave_STOPF+0x234>
 803226e:	7bfb      	ldrb	r3, [r7, #15]
 8032270:	2b22      	cmp	r3, #34	; 0x22
 8032272:	d10d      	bne.n	8032290 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8032274:	687b      	ldr	r3, [r7, #4]
 8032276:	2200      	movs	r2, #0
 8032278:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 803227a:	687b      	ldr	r3, [r7, #4]
 803227c:	2220      	movs	r2, #32
 803227e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8032282:	687b      	ldr	r3, [r7, #4]
 8032284:	2200      	movs	r2, #0
 8032286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 803228a:	6878      	ldr	r0, [r7, #4]
 803228c:	f7ff f85b 	bl	8031346 <HAL_I2C_SlaveRxCpltCallback>
}
 8032290:	bf00      	nop
 8032292:	3710      	adds	r7, #16
 8032294:	46bd      	mov	sp, r7
 8032296:	bd80      	pop	{r7, pc}
 8032298:	080329d5 	.word	0x080329d5
 803229c:	ffff0000 	.word	0xffff0000

080322a0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80322a0:	b580      	push	{r7, lr}
 80322a2:	b084      	sub	sp, #16
 80322a4:	af00      	add	r7, sp, #0
 80322a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80322a8:	687b      	ldr	r3, [r7, #4]
 80322aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80322ae:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80322b0:	687b      	ldr	r3, [r7, #4]
 80322b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80322b4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80322b6:	68bb      	ldr	r3, [r7, #8]
 80322b8:	2b08      	cmp	r3, #8
 80322ba:	d002      	beq.n	80322c2 <I2C_Slave_AF+0x22>
 80322bc:	68bb      	ldr	r3, [r7, #8]
 80322be:	2b20      	cmp	r3, #32
 80322c0:	d129      	bne.n	8032316 <I2C_Slave_AF+0x76>
 80322c2:	7bfb      	ldrb	r3, [r7, #15]
 80322c4:	2b28      	cmp	r3, #40	; 0x28
 80322c6:	d126      	bne.n	8032316 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80322c8:	687b      	ldr	r3, [r7, #4]
 80322ca:	4a2c      	ldr	r2, [pc, #176]	; (803237c <I2C_Slave_AF+0xdc>)
 80322cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80322ce:	687b      	ldr	r3, [r7, #4]
 80322d0:	681b      	ldr	r3, [r3, #0]
 80322d2:	685a      	ldr	r2, [r3, #4]
 80322d4:	687b      	ldr	r3, [r7, #4]
 80322d6:	681b      	ldr	r3, [r3, #0]
 80322d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80322dc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80322de:	687b      	ldr	r3, [r7, #4]
 80322e0:	681b      	ldr	r3, [r3, #0]
 80322e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80322e6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80322e8:	687b      	ldr	r3, [r7, #4]
 80322ea:	681b      	ldr	r3, [r3, #0]
 80322ec:	681a      	ldr	r2, [r3, #0]
 80322ee:	687b      	ldr	r3, [r7, #4]
 80322f0:	681b      	ldr	r3, [r3, #0]
 80322f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80322f6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80322f8:	687b      	ldr	r3, [r7, #4]
 80322fa:	2200      	movs	r2, #0
 80322fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80322fe:	687b      	ldr	r3, [r7, #4]
 8032300:	2220      	movs	r2, #32
 8032302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8032306:	687b      	ldr	r3, [r7, #4]
 8032308:	2200      	movs	r2, #0
 803230a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 803230e:	6878      	ldr	r0, [r7, #4]
 8032310:	f7ff f831 	bl	8031376 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8032314:	e02e      	b.n	8032374 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8032316:	7bfb      	ldrb	r3, [r7, #15]
 8032318:	2b21      	cmp	r3, #33	; 0x21
 803231a:	d126      	bne.n	803236a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 803231c:	687b      	ldr	r3, [r7, #4]
 803231e:	4a17      	ldr	r2, [pc, #92]	; (803237c <I2C_Slave_AF+0xdc>)
 8032320:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8032322:	687b      	ldr	r3, [r7, #4]
 8032324:	2221      	movs	r2, #33	; 0x21
 8032326:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8032328:	687b      	ldr	r3, [r7, #4]
 803232a:	2220      	movs	r2, #32
 803232c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8032330:	687b      	ldr	r3, [r7, #4]
 8032332:	2200      	movs	r2, #0
 8032334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8032338:	687b      	ldr	r3, [r7, #4]
 803233a:	681b      	ldr	r3, [r3, #0]
 803233c:	685a      	ldr	r2, [r3, #4]
 803233e:	687b      	ldr	r3, [r7, #4]
 8032340:	681b      	ldr	r3, [r3, #0]
 8032342:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8032346:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8032348:	687b      	ldr	r3, [r7, #4]
 803234a:	681b      	ldr	r3, [r3, #0]
 803234c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8032350:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8032352:	687b      	ldr	r3, [r7, #4]
 8032354:	681b      	ldr	r3, [r3, #0]
 8032356:	681a      	ldr	r2, [r3, #0]
 8032358:	687b      	ldr	r3, [r7, #4]
 803235a:	681b      	ldr	r3, [r3, #0]
 803235c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8032360:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8032362:	6878      	ldr	r0, [r7, #4]
 8032364:	f7fe ffe5 	bl	8031332 <HAL_I2C_SlaveTxCpltCallback>
}
 8032368:	e004      	b.n	8032374 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 803236a:	687b      	ldr	r3, [r7, #4]
 803236c:	681b      	ldr	r3, [r3, #0]
 803236e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8032372:	615a      	str	r2, [r3, #20]
}
 8032374:	bf00      	nop
 8032376:	3710      	adds	r7, #16
 8032378:	46bd      	mov	sp, r7
 803237a:	bd80      	pop	{r7, pc}
 803237c:	ffff0000 	.word	0xffff0000

08032380 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8032380:	b580      	push	{r7, lr}
 8032382:	b084      	sub	sp, #16
 8032384:	af00      	add	r7, sp, #0
 8032386:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8032388:	687b      	ldr	r3, [r7, #4]
 803238a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 803238e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8032390:	687b      	ldr	r3, [r7, #4]
 8032392:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8032396:	b2db      	uxtb	r3, r3
 8032398:	2b10      	cmp	r3, #16
 803239a:	d10a      	bne.n	80323b2 <I2C_ITError+0x32>
 803239c:	7bfb      	ldrb	r3, [r7, #15]
 803239e:	2b22      	cmp	r3, #34	; 0x22
 80323a0:	d107      	bne.n	80323b2 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80323a2:	687b      	ldr	r3, [r7, #4]
 80323a4:	681b      	ldr	r3, [r3, #0]
 80323a6:	681a      	ldr	r2, [r3, #0]
 80323a8:	687b      	ldr	r3, [r7, #4]
 80323aa:	681b      	ldr	r3, [r3, #0]
 80323ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80323b0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80323b2:	7bfb      	ldrb	r3, [r7, #15]
 80323b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80323b8:	2b28      	cmp	r3, #40	; 0x28
 80323ba:	d107      	bne.n	80323cc <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80323bc:	687b      	ldr	r3, [r7, #4]
 80323be:	2200      	movs	r2, #0
 80323c0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80323c2:	687b      	ldr	r3, [r7, #4]
 80323c4:	2228      	movs	r2, #40	; 0x28
 80323c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80323ca:	e015      	b.n	80323f8 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80323cc:	687b      	ldr	r3, [r7, #4]
 80323ce:	681b      	ldr	r3, [r3, #0]
 80323d0:	685b      	ldr	r3, [r3, #4]
 80323d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80323d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80323da:	d006      	beq.n	80323ea <I2C_ITError+0x6a>
 80323dc:	7bfb      	ldrb	r3, [r7, #15]
 80323de:	2b60      	cmp	r3, #96	; 0x60
 80323e0:	d003      	beq.n	80323ea <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80323e2:	687b      	ldr	r3, [r7, #4]
 80323e4:	2220      	movs	r2, #32
 80323e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80323ea:	687b      	ldr	r3, [r7, #4]
 80323ec:	2200      	movs	r2, #0
 80323ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80323f0:	687b      	ldr	r3, [r7, #4]
 80323f2:	2200      	movs	r2, #0
 80323f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80323f8:	687b      	ldr	r3, [r7, #4]
 80323fa:	681b      	ldr	r3, [r3, #0]
 80323fc:	685b      	ldr	r3, [r3, #4]
 80323fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8032402:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8032406:	d162      	bne.n	80324ce <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8032408:	687b      	ldr	r3, [r7, #4]
 803240a:	681b      	ldr	r3, [r3, #0]
 803240c:	685a      	ldr	r2, [r3, #4]
 803240e:	687b      	ldr	r3, [r7, #4]
 8032410:	681b      	ldr	r3, [r3, #0]
 8032412:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8032416:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8032418:	687b      	ldr	r3, [r7, #4]
 803241a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803241c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8032420:	b2db      	uxtb	r3, r3
 8032422:	2b01      	cmp	r3, #1
 8032424:	d020      	beq.n	8032468 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8032426:	687b      	ldr	r3, [r7, #4]
 8032428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803242a:	4a6a      	ldr	r2, [pc, #424]	; (80325d4 <I2C_ITError+0x254>)
 803242c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 803242e:	687b      	ldr	r3, [r7, #4]
 8032430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8032432:	4618      	mov	r0, r3
 8032434:	f7fd f958 	bl	802f6e8 <HAL_DMA_Abort_IT>
 8032438:	4603      	mov	r3, r0
 803243a:	2b00      	cmp	r3, #0
 803243c:	f000 8089 	beq.w	8032552 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8032440:	687b      	ldr	r3, [r7, #4]
 8032442:	681b      	ldr	r3, [r3, #0]
 8032444:	681a      	ldr	r2, [r3, #0]
 8032446:	687b      	ldr	r3, [r7, #4]
 8032448:	681b      	ldr	r3, [r3, #0]
 803244a:	f022 0201 	bic.w	r2, r2, #1
 803244e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8032450:	687b      	ldr	r3, [r7, #4]
 8032452:	2220      	movs	r2, #32
 8032454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8032458:	687b      	ldr	r3, [r7, #4]
 803245a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803245c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803245e:	687a      	ldr	r2, [r7, #4]
 8032460:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8032462:	4610      	mov	r0, r2
 8032464:	4798      	blx	r3
 8032466:	e074      	b.n	8032552 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8032468:	687b      	ldr	r3, [r7, #4]
 803246a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803246c:	4a59      	ldr	r2, [pc, #356]	; (80325d4 <I2C_ITError+0x254>)
 803246e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8032470:	687b      	ldr	r3, [r7, #4]
 8032472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032474:	4618      	mov	r0, r3
 8032476:	f7fd f937 	bl	802f6e8 <HAL_DMA_Abort_IT>
 803247a:	4603      	mov	r3, r0
 803247c:	2b00      	cmp	r3, #0
 803247e:	d068      	beq.n	8032552 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8032480:	687b      	ldr	r3, [r7, #4]
 8032482:	681b      	ldr	r3, [r3, #0]
 8032484:	695b      	ldr	r3, [r3, #20]
 8032486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 803248a:	2b40      	cmp	r3, #64	; 0x40
 803248c:	d10b      	bne.n	80324a6 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 803248e:	687b      	ldr	r3, [r7, #4]
 8032490:	681b      	ldr	r3, [r3, #0]
 8032492:	691a      	ldr	r2, [r3, #16]
 8032494:	687b      	ldr	r3, [r7, #4]
 8032496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8032498:	b2d2      	uxtb	r2, r2
 803249a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 803249c:	687b      	ldr	r3, [r7, #4]
 803249e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80324a0:	1c5a      	adds	r2, r3, #1
 80324a2:	687b      	ldr	r3, [r7, #4]
 80324a4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80324a6:	687b      	ldr	r3, [r7, #4]
 80324a8:	681b      	ldr	r3, [r3, #0]
 80324aa:	681a      	ldr	r2, [r3, #0]
 80324ac:	687b      	ldr	r3, [r7, #4]
 80324ae:	681b      	ldr	r3, [r3, #0]
 80324b0:	f022 0201 	bic.w	r2, r2, #1
 80324b4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80324b6:	687b      	ldr	r3, [r7, #4]
 80324b8:	2220      	movs	r2, #32
 80324ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80324be:	687b      	ldr	r3, [r7, #4]
 80324c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80324c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80324c4:	687a      	ldr	r2, [r7, #4]
 80324c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80324c8:	4610      	mov	r0, r2
 80324ca:	4798      	blx	r3
 80324cc:	e041      	b.n	8032552 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80324ce:	687b      	ldr	r3, [r7, #4]
 80324d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80324d4:	b2db      	uxtb	r3, r3
 80324d6:	2b60      	cmp	r3, #96	; 0x60
 80324d8:	d125      	bne.n	8032526 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80324da:	687b      	ldr	r3, [r7, #4]
 80324dc:	2220      	movs	r2, #32
 80324de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80324e2:	687b      	ldr	r3, [r7, #4]
 80324e4:	2200      	movs	r2, #0
 80324e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80324e8:	687b      	ldr	r3, [r7, #4]
 80324ea:	681b      	ldr	r3, [r3, #0]
 80324ec:	695b      	ldr	r3, [r3, #20]
 80324ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80324f2:	2b40      	cmp	r3, #64	; 0x40
 80324f4:	d10b      	bne.n	803250e <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80324f6:	687b      	ldr	r3, [r7, #4]
 80324f8:	681b      	ldr	r3, [r3, #0]
 80324fa:	691a      	ldr	r2, [r3, #16]
 80324fc:	687b      	ldr	r3, [r7, #4]
 80324fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8032500:	b2d2      	uxtb	r2, r2
 8032502:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8032504:	687b      	ldr	r3, [r7, #4]
 8032506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8032508:	1c5a      	adds	r2, r3, #1
 803250a:	687b      	ldr	r3, [r7, #4]
 803250c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 803250e:	687b      	ldr	r3, [r7, #4]
 8032510:	681b      	ldr	r3, [r3, #0]
 8032512:	681a      	ldr	r2, [r3, #0]
 8032514:	687b      	ldr	r3, [r7, #4]
 8032516:	681b      	ldr	r3, [r3, #0]
 8032518:	f022 0201 	bic.w	r2, r2, #1
 803251c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 803251e:	6878      	ldr	r0, [r7, #4]
 8032520:	f7fe ff51 	bl	80313c6 <HAL_I2C_AbortCpltCallback>
 8032524:	e015      	b.n	8032552 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8032526:	687b      	ldr	r3, [r7, #4]
 8032528:	681b      	ldr	r3, [r3, #0]
 803252a:	695b      	ldr	r3, [r3, #20]
 803252c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8032530:	2b40      	cmp	r3, #64	; 0x40
 8032532:	d10b      	bne.n	803254c <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8032534:	687b      	ldr	r3, [r7, #4]
 8032536:	681b      	ldr	r3, [r3, #0]
 8032538:	691a      	ldr	r2, [r3, #16]
 803253a:	687b      	ldr	r3, [r7, #4]
 803253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803253e:	b2d2      	uxtb	r2, r2
 8032540:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8032542:	687b      	ldr	r3, [r7, #4]
 8032544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8032546:	1c5a      	adds	r2, r3, #1
 8032548:	687b      	ldr	r3, [r7, #4]
 803254a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 803254c:	6878      	ldr	r0, [r7, #4]
 803254e:	f7fe ff30 	bl	80313b2 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8032552:	687b      	ldr	r3, [r7, #4]
 8032554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032556:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8032558:	68bb      	ldr	r3, [r7, #8]
 803255a:	f003 0301 	and.w	r3, r3, #1
 803255e:	2b00      	cmp	r3, #0
 8032560:	d10e      	bne.n	8032580 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8032562:	68bb      	ldr	r3, [r7, #8]
 8032564:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8032568:	2b00      	cmp	r3, #0
 803256a:	d109      	bne.n	8032580 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 803256c:	68bb      	ldr	r3, [r7, #8]
 803256e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8032572:	2b00      	cmp	r3, #0
 8032574:	d104      	bne.n	8032580 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8032576:	68bb      	ldr	r3, [r7, #8]
 8032578:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 803257c:	2b00      	cmp	r3, #0
 803257e:	d007      	beq.n	8032590 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8032580:	687b      	ldr	r3, [r7, #4]
 8032582:	681b      	ldr	r3, [r3, #0]
 8032584:	685a      	ldr	r2, [r3, #4]
 8032586:	687b      	ldr	r3, [r7, #4]
 8032588:	681b      	ldr	r3, [r3, #0]
 803258a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 803258e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8032590:	687b      	ldr	r3, [r7, #4]
 8032592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8032596:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8032598:	687b      	ldr	r3, [r7, #4]
 803259a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803259c:	f003 0304 	and.w	r3, r3, #4
 80325a0:	2b04      	cmp	r3, #4
 80325a2:	d113      	bne.n	80325cc <I2C_ITError+0x24c>
 80325a4:	7bfb      	ldrb	r3, [r7, #15]
 80325a6:	2b28      	cmp	r3, #40	; 0x28
 80325a8:	d110      	bne.n	80325cc <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80325aa:	687b      	ldr	r3, [r7, #4]
 80325ac:	4a0a      	ldr	r2, [pc, #40]	; (80325d8 <I2C_ITError+0x258>)
 80325ae:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80325b0:	687b      	ldr	r3, [r7, #4]
 80325b2:	2200      	movs	r2, #0
 80325b4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80325b6:	687b      	ldr	r3, [r7, #4]
 80325b8:	2220      	movs	r2, #32
 80325ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80325be:	687b      	ldr	r3, [r7, #4]
 80325c0:	2200      	movs	r2, #0
 80325c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80325c6:	6878      	ldr	r0, [r7, #4]
 80325c8:	f7fe fed5 	bl	8031376 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80325cc:	bf00      	nop
 80325ce:	3710      	adds	r7, #16
 80325d0:	46bd      	mov	sp, r7
 80325d2:	bd80      	pop	{r7, pc}
 80325d4:	080329d5 	.word	0x080329d5
 80325d8:	ffff0000 	.word	0xffff0000

080325dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80325dc:	b580      	push	{r7, lr}
 80325de:	b088      	sub	sp, #32
 80325e0:	af02      	add	r7, sp, #8
 80325e2:	60f8      	str	r0, [r7, #12]
 80325e4:	607a      	str	r2, [r7, #4]
 80325e6:	603b      	str	r3, [r7, #0]
 80325e8:	460b      	mov	r3, r1
 80325ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80325ec:	68fb      	ldr	r3, [r7, #12]
 80325ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80325f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80325f2:	697b      	ldr	r3, [r7, #20]
 80325f4:	2b08      	cmp	r3, #8
 80325f6:	d006      	beq.n	8032606 <I2C_MasterRequestWrite+0x2a>
 80325f8:	697b      	ldr	r3, [r7, #20]
 80325fa:	2b01      	cmp	r3, #1
 80325fc:	d003      	beq.n	8032606 <I2C_MasterRequestWrite+0x2a>
 80325fe:	697b      	ldr	r3, [r7, #20]
 8032600:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8032604:	d108      	bne.n	8032618 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8032606:	68fb      	ldr	r3, [r7, #12]
 8032608:	681b      	ldr	r3, [r3, #0]
 803260a:	681a      	ldr	r2, [r3, #0]
 803260c:	68fb      	ldr	r3, [r7, #12]
 803260e:	681b      	ldr	r3, [r3, #0]
 8032610:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8032614:	601a      	str	r2, [r3, #0]
 8032616:	e00b      	b.n	8032630 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8032618:	68fb      	ldr	r3, [r7, #12]
 803261a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803261c:	2b12      	cmp	r3, #18
 803261e:	d107      	bne.n	8032630 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8032620:	68fb      	ldr	r3, [r7, #12]
 8032622:	681b      	ldr	r3, [r3, #0]
 8032624:	681a      	ldr	r2, [r3, #0]
 8032626:	68fb      	ldr	r3, [r7, #12]
 8032628:	681b      	ldr	r3, [r3, #0]
 803262a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 803262e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8032630:	683b      	ldr	r3, [r7, #0]
 8032632:	9300      	str	r3, [sp, #0]
 8032634:	687b      	ldr	r3, [r7, #4]
 8032636:	2200      	movs	r2, #0
 8032638:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 803263c:	68f8      	ldr	r0, [r7, #12]
 803263e:	f000 fa48 	bl	8032ad2 <I2C_WaitOnFlagUntilTimeout>
 8032642:	4603      	mov	r3, r0
 8032644:	2b00      	cmp	r3, #0
 8032646:	d00c      	beq.n	8032662 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8032648:	68fb      	ldr	r3, [r7, #12]
 803264a:	681b      	ldr	r3, [r3, #0]
 803264c:	681b      	ldr	r3, [r3, #0]
 803264e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8032652:	2b00      	cmp	r3, #0
 8032654:	d003      	beq.n	803265e <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8032656:	68fb      	ldr	r3, [r7, #12]
 8032658:	f44f 7200 	mov.w	r2, #512	; 0x200
 803265c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 803265e:	2303      	movs	r3, #3
 8032660:	e035      	b.n	80326ce <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8032662:	68fb      	ldr	r3, [r7, #12]
 8032664:	691b      	ldr	r3, [r3, #16]
 8032666:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 803266a:	d108      	bne.n	803267e <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 803266c:	897b      	ldrh	r3, [r7, #10]
 803266e:	b2db      	uxtb	r3, r3
 8032670:	461a      	mov	r2, r3
 8032672:	68fb      	ldr	r3, [r7, #12]
 8032674:	681b      	ldr	r3, [r3, #0]
 8032676:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 803267a:	611a      	str	r2, [r3, #16]
 803267c:	e01b      	b.n	80326b6 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 803267e:	897b      	ldrh	r3, [r7, #10]
 8032680:	11db      	asrs	r3, r3, #7
 8032682:	b2db      	uxtb	r3, r3
 8032684:	f003 0306 	and.w	r3, r3, #6
 8032688:	b2db      	uxtb	r3, r3
 803268a:	f063 030f 	orn	r3, r3, #15
 803268e:	b2da      	uxtb	r2, r3
 8032690:	68fb      	ldr	r3, [r7, #12]
 8032692:	681b      	ldr	r3, [r3, #0]
 8032694:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8032696:	683b      	ldr	r3, [r7, #0]
 8032698:	687a      	ldr	r2, [r7, #4]
 803269a:	490f      	ldr	r1, [pc, #60]	; (80326d8 <I2C_MasterRequestWrite+0xfc>)
 803269c:	68f8      	ldr	r0, [r7, #12]
 803269e:	f000 fa6f 	bl	8032b80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80326a2:	4603      	mov	r3, r0
 80326a4:	2b00      	cmp	r3, #0
 80326a6:	d001      	beq.n	80326ac <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80326a8:	2301      	movs	r3, #1
 80326aa:	e010      	b.n	80326ce <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80326ac:	897b      	ldrh	r3, [r7, #10]
 80326ae:	b2da      	uxtb	r2, r3
 80326b0:	68fb      	ldr	r3, [r7, #12]
 80326b2:	681b      	ldr	r3, [r3, #0]
 80326b4:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80326b6:	683b      	ldr	r3, [r7, #0]
 80326b8:	687a      	ldr	r2, [r7, #4]
 80326ba:	4908      	ldr	r1, [pc, #32]	; (80326dc <I2C_MasterRequestWrite+0x100>)
 80326bc:	68f8      	ldr	r0, [r7, #12]
 80326be:	f000 fa5f 	bl	8032b80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80326c2:	4603      	mov	r3, r0
 80326c4:	2b00      	cmp	r3, #0
 80326c6:	d001      	beq.n	80326cc <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80326c8:	2301      	movs	r3, #1
 80326ca:	e000      	b.n	80326ce <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 80326cc:	2300      	movs	r3, #0
}
 80326ce:	4618      	mov	r0, r3
 80326d0:	3718      	adds	r7, #24
 80326d2:	46bd      	mov	sp, r7
 80326d4:	bd80      	pop	{r7, pc}
 80326d6:	bf00      	nop
 80326d8:	00010008 	.word	0x00010008
 80326dc:	00010002 	.word	0x00010002

080326e0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80326e0:	b580      	push	{r7, lr}
 80326e2:	b088      	sub	sp, #32
 80326e4:	af02      	add	r7, sp, #8
 80326e6:	60f8      	str	r0, [r7, #12]
 80326e8:	4608      	mov	r0, r1
 80326ea:	4611      	mov	r1, r2
 80326ec:	461a      	mov	r2, r3
 80326ee:	4603      	mov	r3, r0
 80326f0:	817b      	strh	r3, [r7, #10]
 80326f2:	460b      	mov	r3, r1
 80326f4:	813b      	strh	r3, [r7, #8]
 80326f6:	4613      	mov	r3, r2
 80326f8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80326fa:	68fb      	ldr	r3, [r7, #12]
 80326fc:	681b      	ldr	r3, [r3, #0]
 80326fe:	681a      	ldr	r2, [r3, #0]
 8032700:	68fb      	ldr	r3, [r7, #12]
 8032702:	681b      	ldr	r3, [r3, #0]
 8032704:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8032708:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 803270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803270c:	9300      	str	r3, [sp, #0]
 803270e:	6a3b      	ldr	r3, [r7, #32]
 8032710:	2200      	movs	r2, #0
 8032712:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8032716:	68f8      	ldr	r0, [r7, #12]
 8032718:	f000 f9db 	bl	8032ad2 <I2C_WaitOnFlagUntilTimeout>
 803271c:	4603      	mov	r3, r0
 803271e:	2b00      	cmp	r3, #0
 8032720:	d00c      	beq.n	803273c <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8032722:	68fb      	ldr	r3, [r7, #12]
 8032724:	681b      	ldr	r3, [r3, #0]
 8032726:	681b      	ldr	r3, [r3, #0]
 8032728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803272c:	2b00      	cmp	r3, #0
 803272e:	d003      	beq.n	8032738 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8032730:	68fb      	ldr	r3, [r7, #12]
 8032732:	f44f 7200 	mov.w	r2, #512	; 0x200
 8032736:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8032738:	2303      	movs	r3, #3
 803273a:	e05f      	b.n	80327fc <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 803273c:	897b      	ldrh	r3, [r7, #10]
 803273e:	b2db      	uxtb	r3, r3
 8032740:	461a      	mov	r2, r3
 8032742:	68fb      	ldr	r3, [r7, #12]
 8032744:	681b      	ldr	r3, [r3, #0]
 8032746:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 803274a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 803274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803274e:	6a3a      	ldr	r2, [r7, #32]
 8032750:	492c      	ldr	r1, [pc, #176]	; (8032804 <I2C_RequestMemoryWrite+0x124>)
 8032752:	68f8      	ldr	r0, [r7, #12]
 8032754:	f000 fa14 	bl	8032b80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8032758:	4603      	mov	r3, r0
 803275a:	2b00      	cmp	r3, #0
 803275c:	d001      	beq.n	8032762 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 803275e:	2301      	movs	r3, #1
 8032760:	e04c      	b.n	80327fc <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8032762:	2300      	movs	r3, #0
 8032764:	617b      	str	r3, [r7, #20]
 8032766:	68fb      	ldr	r3, [r7, #12]
 8032768:	681b      	ldr	r3, [r3, #0]
 803276a:	695b      	ldr	r3, [r3, #20]
 803276c:	617b      	str	r3, [r7, #20]
 803276e:	68fb      	ldr	r3, [r7, #12]
 8032770:	681b      	ldr	r3, [r3, #0]
 8032772:	699b      	ldr	r3, [r3, #24]
 8032774:	617b      	str	r3, [r7, #20]
 8032776:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8032778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 803277a:	6a39      	ldr	r1, [r7, #32]
 803277c:	68f8      	ldr	r0, [r7, #12]
 803277e:	f000 fa7e 	bl	8032c7e <I2C_WaitOnTXEFlagUntilTimeout>
 8032782:	4603      	mov	r3, r0
 8032784:	2b00      	cmp	r3, #0
 8032786:	d00d      	beq.n	80327a4 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8032788:	68fb      	ldr	r3, [r7, #12]
 803278a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803278c:	2b04      	cmp	r3, #4
 803278e:	d107      	bne.n	80327a0 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8032790:	68fb      	ldr	r3, [r7, #12]
 8032792:	681b      	ldr	r3, [r3, #0]
 8032794:	681a      	ldr	r2, [r3, #0]
 8032796:	68fb      	ldr	r3, [r7, #12]
 8032798:	681b      	ldr	r3, [r3, #0]
 803279a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 803279e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80327a0:	2301      	movs	r3, #1
 80327a2:	e02b      	b.n	80327fc <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80327a4:	88fb      	ldrh	r3, [r7, #6]
 80327a6:	2b01      	cmp	r3, #1
 80327a8:	d105      	bne.n	80327b6 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80327aa:	893b      	ldrh	r3, [r7, #8]
 80327ac:	b2da      	uxtb	r2, r3
 80327ae:	68fb      	ldr	r3, [r7, #12]
 80327b0:	681b      	ldr	r3, [r3, #0]
 80327b2:	611a      	str	r2, [r3, #16]
 80327b4:	e021      	b.n	80327fa <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80327b6:	893b      	ldrh	r3, [r7, #8]
 80327b8:	0a1b      	lsrs	r3, r3, #8
 80327ba:	b29b      	uxth	r3, r3
 80327bc:	b2da      	uxtb	r2, r3
 80327be:	68fb      	ldr	r3, [r7, #12]
 80327c0:	681b      	ldr	r3, [r3, #0]
 80327c2:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80327c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80327c6:	6a39      	ldr	r1, [r7, #32]
 80327c8:	68f8      	ldr	r0, [r7, #12]
 80327ca:	f000 fa58 	bl	8032c7e <I2C_WaitOnTXEFlagUntilTimeout>
 80327ce:	4603      	mov	r3, r0
 80327d0:	2b00      	cmp	r3, #0
 80327d2:	d00d      	beq.n	80327f0 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80327d4:	68fb      	ldr	r3, [r7, #12]
 80327d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80327d8:	2b04      	cmp	r3, #4
 80327da:	d107      	bne.n	80327ec <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80327dc:	68fb      	ldr	r3, [r7, #12]
 80327de:	681b      	ldr	r3, [r3, #0]
 80327e0:	681a      	ldr	r2, [r3, #0]
 80327e2:	68fb      	ldr	r3, [r7, #12]
 80327e4:	681b      	ldr	r3, [r3, #0]
 80327e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80327ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80327ec:	2301      	movs	r3, #1
 80327ee:	e005      	b.n	80327fc <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80327f0:	893b      	ldrh	r3, [r7, #8]
 80327f2:	b2da      	uxtb	r2, r3
 80327f4:	68fb      	ldr	r3, [r7, #12]
 80327f6:	681b      	ldr	r3, [r3, #0]
 80327f8:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80327fa:	2300      	movs	r3, #0
}
 80327fc:	4618      	mov	r0, r3
 80327fe:	3718      	adds	r7, #24
 8032800:	46bd      	mov	sp, r7
 8032802:	bd80      	pop	{r7, pc}
 8032804:	00010002 	.word	0x00010002

08032808 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8032808:	b580      	push	{r7, lr}
 803280a:	b088      	sub	sp, #32
 803280c:	af02      	add	r7, sp, #8
 803280e:	60f8      	str	r0, [r7, #12]
 8032810:	4608      	mov	r0, r1
 8032812:	4611      	mov	r1, r2
 8032814:	461a      	mov	r2, r3
 8032816:	4603      	mov	r3, r0
 8032818:	817b      	strh	r3, [r7, #10]
 803281a:	460b      	mov	r3, r1
 803281c:	813b      	strh	r3, [r7, #8]
 803281e:	4613      	mov	r3, r2
 8032820:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8032822:	68fb      	ldr	r3, [r7, #12]
 8032824:	681b      	ldr	r3, [r3, #0]
 8032826:	681a      	ldr	r2, [r3, #0]
 8032828:	68fb      	ldr	r3, [r7, #12]
 803282a:	681b      	ldr	r3, [r3, #0]
 803282c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8032830:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8032832:	68fb      	ldr	r3, [r7, #12]
 8032834:	681b      	ldr	r3, [r3, #0]
 8032836:	681a      	ldr	r2, [r3, #0]
 8032838:	68fb      	ldr	r3, [r7, #12]
 803283a:	681b      	ldr	r3, [r3, #0]
 803283c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8032840:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8032842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032844:	9300      	str	r3, [sp, #0]
 8032846:	6a3b      	ldr	r3, [r7, #32]
 8032848:	2200      	movs	r2, #0
 803284a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 803284e:	68f8      	ldr	r0, [r7, #12]
 8032850:	f000 f93f 	bl	8032ad2 <I2C_WaitOnFlagUntilTimeout>
 8032854:	4603      	mov	r3, r0
 8032856:	2b00      	cmp	r3, #0
 8032858:	d00c      	beq.n	8032874 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 803285a:	68fb      	ldr	r3, [r7, #12]
 803285c:	681b      	ldr	r3, [r3, #0]
 803285e:	681b      	ldr	r3, [r3, #0]
 8032860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8032864:	2b00      	cmp	r3, #0
 8032866:	d003      	beq.n	8032870 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8032868:	68fb      	ldr	r3, [r7, #12]
 803286a:	f44f 7200 	mov.w	r2, #512	; 0x200
 803286e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8032870:	2303      	movs	r3, #3
 8032872:	e0a9      	b.n	80329c8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8032874:	897b      	ldrh	r3, [r7, #10]
 8032876:	b2db      	uxtb	r3, r3
 8032878:	461a      	mov	r2, r3
 803287a:	68fb      	ldr	r3, [r7, #12]
 803287c:	681b      	ldr	r3, [r3, #0]
 803287e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8032882:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8032884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032886:	6a3a      	ldr	r2, [r7, #32]
 8032888:	4951      	ldr	r1, [pc, #324]	; (80329d0 <I2C_RequestMemoryRead+0x1c8>)
 803288a:	68f8      	ldr	r0, [r7, #12]
 803288c:	f000 f978 	bl	8032b80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8032890:	4603      	mov	r3, r0
 8032892:	2b00      	cmp	r3, #0
 8032894:	d001      	beq.n	803289a <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8032896:	2301      	movs	r3, #1
 8032898:	e096      	b.n	80329c8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 803289a:	2300      	movs	r3, #0
 803289c:	617b      	str	r3, [r7, #20]
 803289e:	68fb      	ldr	r3, [r7, #12]
 80328a0:	681b      	ldr	r3, [r3, #0]
 80328a2:	695b      	ldr	r3, [r3, #20]
 80328a4:	617b      	str	r3, [r7, #20]
 80328a6:	68fb      	ldr	r3, [r7, #12]
 80328a8:	681b      	ldr	r3, [r3, #0]
 80328aa:	699b      	ldr	r3, [r3, #24]
 80328ac:	617b      	str	r3, [r7, #20]
 80328ae:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80328b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80328b2:	6a39      	ldr	r1, [r7, #32]
 80328b4:	68f8      	ldr	r0, [r7, #12]
 80328b6:	f000 f9e2 	bl	8032c7e <I2C_WaitOnTXEFlagUntilTimeout>
 80328ba:	4603      	mov	r3, r0
 80328bc:	2b00      	cmp	r3, #0
 80328be:	d00d      	beq.n	80328dc <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80328c0:	68fb      	ldr	r3, [r7, #12]
 80328c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80328c4:	2b04      	cmp	r3, #4
 80328c6:	d107      	bne.n	80328d8 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80328c8:	68fb      	ldr	r3, [r7, #12]
 80328ca:	681b      	ldr	r3, [r3, #0]
 80328cc:	681a      	ldr	r2, [r3, #0]
 80328ce:	68fb      	ldr	r3, [r7, #12]
 80328d0:	681b      	ldr	r3, [r3, #0]
 80328d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80328d6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80328d8:	2301      	movs	r3, #1
 80328da:	e075      	b.n	80329c8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80328dc:	88fb      	ldrh	r3, [r7, #6]
 80328de:	2b01      	cmp	r3, #1
 80328e0:	d105      	bne.n	80328ee <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80328e2:	893b      	ldrh	r3, [r7, #8]
 80328e4:	b2da      	uxtb	r2, r3
 80328e6:	68fb      	ldr	r3, [r7, #12]
 80328e8:	681b      	ldr	r3, [r3, #0]
 80328ea:	611a      	str	r2, [r3, #16]
 80328ec:	e021      	b.n	8032932 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80328ee:	893b      	ldrh	r3, [r7, #8]
 80328f0:	0a1b      	lsrs	r3, r3, #8
 80328f2:	b29b      	uxth	r3, r3
 80328f4:	b2da      	uxtb	r2, r3
 80328f6:	68fb      	ldr	r3, [r7, #12]
 80328f8:	681b      	ldr	r3, [r3, #0]
 80328fa:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80328fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80328fe:	6a39      	ldr	r1, [r7, #32]
 8032900:	68f8      	ldr	r0, [r7, #12]
 8032902:	f000 f9bc 	bl	8032c7e <I2C_WaitOnTXEFlagUntilTimeout>
 8032906:	4603      	mov	r3, r0
 8032908:	2b00      	cmp	r3, #0
 803290a:	d00d      	beq.n	8032928 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 803290c:	68fb      	ldr	r3, [r7, #12]
 803290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032910:	2b04      	cmp	r3, #4
 8032912:	d107      	bne.n	8032924 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8032914:	68fb      	ldr	r3, [r7, #12]
 8032916:	681b      	ldr	r3, [r3, #0]
 8032918:	681a      	ldr	r2, [r3, #0]
 803291a:	68fb      	ldr	r3, [r7, #12]
 803291c:	681b      	ldr	r3, [r3, #0]
 803291e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8032922:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8032924:	2301      	movs	r3, #1
 8032926:	e04f      	b.n	80329c8 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8032928:	893b      	ldrh	r3, [r7, #8]
 803292a:	b2da      	uxtb	r2, r3
 803292c:	68fb      	ldr	r3, [r7, #12]
 803292e:	681b      	ldr	r3, [r3, #0]
 8032930:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8032932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8032934:	6a39      	ldr	r1, [r7, #32]
 8032936:	68f8      	ldr	r0, [r7, #12]
 8032938:	f000 f9a1 	bl	8032c7e <I2C_WaitOnTXEFlagUntilTimeout>
 803293c:	4603      	mov	r3, r0
 803293e:	2b00      	cmp	r3, #0
 8032940:	d00d      	beq.n	803295e <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8032942:	68fb      	ldr	r3, [r7, #12]
 8032944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032946:	2b04      	cmp	r3, #4
 8032948:	d107      	bne.n	803295a <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 803294a:	68fb      	ldr	r3, [r7, #12]
 803294c:	681b      	ldr	r3, [r3, #0]
 803294e:	681a      	ldr	r2, [r3, #0]
 8032950:	68fb      	ldr	r3, [r7, #12]
 8032952:	681b      	ldr	r3, [r3, #0]
 8032954:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8032958:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 803295a:	2301      	movs	r3, #1
 803295c:	e034      	b.n	80329c8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 803295e:	68fb      	ldr	r3, [r7, #12]
 8032960:	681b      	ldr	r3, [r3, #0]
 8032962:	681a      	ldr	r2, [r3, #0]
 8032964:	68fb      	ldr	r3, [r7, #12]
 8032966:	681b      	ldr	r3, [r3, #0]
 8032968:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 803296c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 803296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032970:	9300      	str	r3, [sp, #0]
 8032972:	6a3b      	ldr	r3, [r7, #32]
 8032974:	2200      	movs	r2, #0
 8032976:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 803297a:	68f8      	ldr	r0, [r7, #12]
 803297c:	f000 f8a9 	bl	8032ad2 <I2C_WaitOnFlagUntilTimeout>
 8032980:	4603      	mov	r3, r0
 8032982:	2b00      	cmp	r3, #0
 8032984:	d00c      	beq.n	80329a0 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8032986:	68fb      	ldr	r3, [r7, #12]
 8032988:	681b      	ldr	r3, [r3, #0]
 803298a:	681b      	ldr	r3, [r3, #0]
 803298c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8032990:	2b00      	cmp	r3, #0
 8032992:	d003      	beq.n	803299c <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8032994:	68fb      	ldr	r3, [r7, #12]
 8032996:	f44f 7200 	mov.w	r2, #512	; 0x200
 803299a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 803299c:	2303      	movs	r3, #3
 803299e:	e013      	b.n	80329c8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80329a0:	897b      	ldrh	r3, [r7, #10]
 80329a2:	b2db      	uxtb	r3, r3
 80329a4:	f043 0301 	orr.w	r3, r3, #1
 80329a8:	b2da      	uxtb	r2, r3
 80329aa:	68fb      	ldr	r3, [r7, #12]
 80329ac:	681b      	ldr	r3, [r3, #0]
 80329ae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80329b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80329b2:	6a3a      	ldr	r2, [r7, #32]
 80329b4:	4906      	ldr	r1, [pc, #24]	; (80329d0 <I2C_RequestMemoryRead+0x1c8>)
 80329b6:	68f8      	ldr	r0, [r7, #12]
 80329b8:	f000 f8e2 	bl	8032b80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80329bc:	4603      	mov	r3, r0
 80329be:	2b00      	cmp	r3, #0
 80329c0:	d001      	beq.n	80329c6 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 80329c2:	2301      	movs	r3, #1
 80329c4:	e000      	b.n	80329c8 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 80329c6:	2300      	movs	r3, #0
}
 80329c8:	4618      	mov	r0, r3
 80329ca:	3718      	adds	r7, #24
 80329cc:	46bd      	mov	sp, r7
 80329ce:	bd80      	pop	{r7, pc}
 80329d0:	00010002 	.word	0x00010002

080329d4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80329d4:	b580      	push	{r7, lr}
 80329d6:	b084      	sub	sp, #16
 80329d8:	af00      	add	r7, sp, #0
 80329da:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80329dc:	687b      	ldr	r3, [r7, #4]
 80329de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80329e0:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80329e2:	68fb      	ldr	r3, [r7, #12]
 80329e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80329e8:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80329ea:	68fb      	ldr	r3, [r7, #12]
 80329ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80329ee:	2b00      	cmp	r3, #0
 80329f0:	d003      	beq.n	80329fa <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80329f2:	68fb      	ldr	r3, [r7, #12]
 80329f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80329f6:	2200      	movs	r2, #0
 80329f8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80329fa:	68fb      	ldr	r3, [r7, #12]
 80329fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80329fe:	2b00      	cmp	r3, #0
 8032a00:	d003      	beq.n	8032a0a <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8032a02:	68fb      	ldr	r3, [r7, #12]
 8032a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032a06:	2200      	movs	r2, #0
 8032a08:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8032a0a:	68fb      	ldr	r3, [r7, #12]
 8032a0c:	681b      	ldr	r3, [r3, #0]
 8032a0e:	681a      	ldr	r2, [r3, #0]
 8032a10:	68fb      	ldr	r3, [r7, #12]
 8032a12:	681b      	ldr	r3, [r3, #0]
 8032a14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8032a18:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8032a1a:	68fb      	ldr	r3, [r7, #12]
 8032a1c:	2200      	movs	r2, #0
 8032a1e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8032a20:	68fb      	ldr	r3, [r7, #12]
 8032a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8032a24:	2b00      	cmp	r3, #0
 8032a26:	d003      	beq.n	8032a30 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8032a28:	68fb      	ldr	r3, [r7, #12]
 8032a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8032a2c:	2200      	movs	r2, #0
 8032a2e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8032a30:	68fb      	ldr	r3, [r7, #12]
 8032a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032a34:	2b00      	cmp	r3, #0
 8032a36:	d003      	beq.n	8032a40 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8032a38:	68fb      	ldr	r3, [r7, #12]
 8032a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032a3c:	2200      	movs	r2, #0
 8032a3e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8032a40:	68fb      	ldr	r3, [r7, #12]
 8032a42:	681b      	ldr	r3, [r3, #0]
 8032a44:	681a      	ldr	r2, [r3, #0]
 8032a46:	68fb      	ldr	r3, [r7, #12]
 8032a48:	681b      	ldr	r3, [r3, #0]
 8032a4a:	f022 0201 	bic.w	r2, r2, #1
 8032a4e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8032a50:	68fb      	ldr	r3, [r7, #12]
 8032a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8032a56:	b2db      	uxtb	r3, r3
 8032a58:	2b60      	cmp	r3, #96	; 0x60
 8032a5a:	d10e      	bne.n	8032a7a <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8032a5c:	68fb      	ldr	r3, [r7, #12]
 8032a5e:	2220      	movs	r2, #32
 8032a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8032a64:	68fb      	ldr	r3, [r7, #12]
 8032a66:	2200      	movs	r2, #0
 8032a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8032a6c:	68fb      	ldr	r3, [r7, #12]
 8032a6e:	2200      	movs	r2, #0
 8032a70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8032a72:	68f8      	ldr	r0, [r7, #12]
 8032a74:	f7fe fca7 	bl	80313c6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8032a78:	e027      	b.n	8032aca <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8032a7a:	7afb      	ldrb	r3, [r7, #11]
 8032a7c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8032a80:	2b28      	cmp	r3, #40	; 0x28
 8032a82:	d117      	bne.n	8032ab4 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8032a84:	68fb      	ldr	r3, [r7, #12]
 8032a86:	681b      	ldr	r3, [r3, #0]
 8032a88:	681a      	ldr	r2, [r3, #0]
 8032a8a:	68fb      	ldr	r3, [r7, #12]
 8032a8c:	681b      	ldr	r3, [r3, #0]
 8032a8e:	f042 0201 	orr.w	r2, r2, #1
 8032a92:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8032a94:	68fb      	ldr	r3, [r7, #12]
 8032a96:	681b      	ldr	r3, [r3, #0]
 8032a98:	681a      	ldr	r2, [r3, #0]
 8032a9a:	68fb      	ldr	r3, [r7, #12]
 8032a9c:	681b      	ldr	r3, [r3, #0]
 8032a9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8032aa2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8032aa4:	68fb      	ldr	r3, [r7, #12]
 8032aa6:	2200      	movs	r2, #0
 8032aa8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8032aaa:	68fb      	ldr	r3, [r7, #12]
 8032aac:	2228      	movs	r2, #40	; 0x28
 8032aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8032ab2:	e007      	b.n	8032ac4 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8032ab4:	68fb      	ldr	r3, [r7, #12]
 8032ab6:	2220      	movs	r2, #32
 8032ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8032abc:	68fb      	ldr	r3, [r7, #12]
 8032abe:	2200      	movs	r2, #0
 8032ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8032ac4:	68f8      	ldr	r0, [r7, #12]
 8032ac6:	f7fe fc74 	bl	80313b2 <HAL_I2C_ErrorCallback>
}
 8032aca:	bf00      	nop
 8032acc:	3710      	adds	r7, #16
 8032ace:	46bd      	mov	sp, r7
 8032ad0:	bd80      	pop	{r7, pc}

08032ad2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8032ad2:	b580      	push	{r7, lr}
 8032ad4:	b084      	sub	sp, #16
 8032ad6:	af00      	add	r7, sp, #0
 8032ad8:	60f8      	str	r0, [r7, #12]
 8032ada:	60b9      	str	r1, [r7, #8]
 8032adc:	603b      	str	r3, [r7, #0]
 8032ade:	4613      	mov	r3, r2
 8032ae0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8032ae2:	e025      	b.n	8032b30 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8032ae4:	683b      	ldr	r3, [r7, #0]
 8032ae6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8032aea:	d021      	beq.n	8032b30 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8032aec:	f7f9 fc3e 	bl	802c36c <HAL_GetTick>
 8032af0:	4602      	mov	r2, r0
 8032af2:	69bb      	ldr	r3, [r7, #24]
 8032af4:	1ad3      	subs	r3, r2, r3
 8032af6:	683a      	ldr	r2, [r7, #0]
 8032af8:	429a      	cmp	r2, r3
 8032afa:	d302      	bcc.n	8032b02 <I2C_WaitOnFlagUntilTimeout+0x30>
 8032afc:	683b      	ldr	r3, [r7, #0]
 8032afe:	2b00      	cmp	r3, #0
 8032b00:	d116      	bne.n	8032b30 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8032b02:	68fb      	ldr	r3, [r7, #12]
 8032b04:	2200      	movs	r2, #0
 8032b06:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8032b08:	68fb      	ldr	r3, [r7, #12]
 8032b0a:	2220      	movs	r2, #32
 8032b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8032b10:	68fb      	ldr	r3, [r7, #12]
 8032b12:	2200      	movs	r2, #0
 8032b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8032b18:	68fb      	ldr	r3, [r7, #12]
 8032b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032b1c:	f043 0220 	orr.w	r2, r3, #32
 8032b20:	68fb      	ldr	r3, [r7, #12]
 8032b22:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8032b24:	68fb      	ldr	r3, [r7, #12]
 8032b26:	2200      	movs	r2, #0
 8032b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8032b2c:	2301      	movs	r3, #1
 8032b2e:	e023      	b.n	8032b78 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8032b30:	68bb      	ldr	r3, [r7, #8]
 8032b32:	0c1b      	lsrs	r3, r3, #16
 8032b34:	b2db      	uxtb	r3, r3
 8032b36:	2b01      	cmp	r3, #1
 8032b38:	d10d      	bne.n	8032b56 <I2C_WaitOnFlagUntilTimeout+0x84>
 8032b3a:	68fb      	ldr	r3, [r7, #12]
 8032b3c:	681b      	ldr	r3, [r3, #0]
 8032b3e:	695b      	ldr	r3, [r3, #20]
 8032b40:	43da      	mvns	r2, r3
 8032b42:	68bb      	ldr	r3, [r7, #8]
 8032b44:	4013      	ands	r3, r2
 8032b46:	b29b      	uxth	r3, r3
 8032b48:	2b00      	cmp	r3, #0
 8032b4a:	bf0c      	ite	eq
 8032b4c:	2301      	moveq	r3, #1
 8032b4e:	2300      	movne	r3, #0
 8032b50:	b2db      	uxtb	r3, r3
 8032b52:	461a      	mov	r2, r3
 8032b54:	e00c      	b.n	8032b70 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8032b56:	68fb      	ldr	r3, [r7, #12]
 8032b58:	681b      	ldr	r3, [r3, #0]
 8032b5a:	699b      	ldr	r3, [r3, #24]
 8032b5c:	43da      	mvns	r2, r3
 8032b5e:	68bb      	ldr	r3, [r7, #8]
 8032b60:	4013      	ands	r3, r2
 8032b62:	b29b      	uxth	r3, r3
 8032b64:	2b00      	cmp	r3, #0
 8032b66:	bf0c      	ite	eq
 8032b68:	2301      	moveq	r3, #1
 8032b6a:	2300      	movne	r3, #0
 8032b6c:	b2db      	uxtb	r3, r3
 8032b6e:	461a      	mov	r2, r3
 8032b70:	79fb      	ldrb	r3, [r7, #7]
 8032b72:	429a      	cmp	r2, r3
 8032b74:	d0b6      	beq.n	8032ae4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8032b76:	2300      	movs	r3, #0
}
 8032b78:	4618      	mov	r0, r3
 8032b7a:	3710      	adds	r7, #16
 8032b7c:	46bd      	mov	sp, r7
 8032b7e:	bd80      	pop	{r7, pc}

08032b80 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8032b80:	b580      	push	{r7, lr}
 8032b82:	b084      	sub	sp, #16
 8032b84:	af00      	add	r7, sp, #0
 8032b86:	60f8      	str	r0, [r7, #12]
 8032b88:	60b9      	str	r1, [r7, #8]
 8032b8a:	607a      	str	r2, [r7, #4]
 8032b8c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8032b8e:	e051      	b.n	8032c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8032b90:	68fb      	ldr	r3, [r7, #12]
 8032b92:	681b      	ldr	r3, [r3, #0]
 8032b94:	695b      	ldr	r3, [r3, #20]
 8032b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8032b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8032b9e:	d123      	bne.n	8032be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8032ba0:	68fb      	ldr	r3, [r7, #12]
 8032ba2:	681b      	ldr	r3, [r3, #0]
 8032ba4:	681a      	ldr	r2, [r3, #0]
 8032ba6:	68fb      	ldr	r3, [r7, #12]
 8032ba8:	681b      	ldr	r3, [r3, #0]
 8032baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8032bae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8032bb0:	68fb      	ldr	r3, [r7, #12]
 8032bb2:	681b      	ldr	r3, [r3, #0]
 8032bb4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8032bb8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8032bba:	68fb      	ldr	r3, [r7, #12]
 8032bbc:	2200      	movs	r2, #0
 8032bbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8032bc0:	68fb      	ldr	r3, [r7, #12]
 8032bc2:	2220      	movs	r2, #32
 8032bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8032bc8:	68fb      	ldr	r3, [r7, #12]
 8032bca:	2200      	movs	r2, #0
 8032bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8032bd0:	68fb      	ldr	r3, [r7, #12]
 8032bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032bd4:	f043 0204 	orr.w	r2, r3, #4
 8032bd8:	68fb      	ldr	r3, [r7, #12]
 8032bda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8032bdc:	68fb      	ldr	r3, [r7, #12]
 8032bde:	2200      	movs	r2, #0
 8032be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8032be4:	2301      	movs	r3, #1
 8032be6:	e046      	b.n	8032c76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8032be8:	687b      	ldr	r3, [r7, #4]
 8032bea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8032bee:	d021      	beq.n	8032c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8032bf0:	f7f9 fbbc 	bl	802c36c <HAL_GetTick>
 8032bf4:	4602      	mov	r2, r0
 8032bf6:	683b      	ldr	r3, [r7, #0]
 8032bf8:	1ad3      	subs	r3, r2, r3
 8032bfa:	687a      	ldr	r2, [r7, #4]
 8032bfc:	429a      	cmp	r2, r3
 8032bfe:	d302      	bcc.n	8032c06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8032c00:	687b      	ldr	r3, [r7, #4]
 8032c02:	2b00      	cmp	r3, #0
 8032c04:	d116      	bne.n	8032c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8032c06:	68fb      	ldr	r3, [r7, #12]
 8032c08:	2200      	movs	r2, #0
 8032c0a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8032c0c:	68fb      	ldr	r3, [r7, #12]
 8032c0e:	2220      	movs	r2, #32
 8032c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8032c14:	68fb      	ldr	r3, [r7, #12]
 8032c16:	2200      	movs	r2, #0
 8032c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8032c1c:	68fb      	ldr	r3, [r7, #12]
 8032c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032c20:	f043 0220 	orr.w	r2, r3, #32
 8032c24:	68fb      	ldr	r3, [r7, #12]
 8032c26:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8032c28:	68fb      	ldr	r3, [r7, #12]
 8032c2a:	2200      	movs	r2, #0
 8032c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8032c30:	2301      	movs	r3, #1
 8032c32:	e020      	b.n	8032c76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8032c34:	68bb      	ldr	r3, [r7, #8]
 8032c36:	0c1b      	lsrs	r3, r3, #16
 8032c38:	b2db      	uxtb	r3, r3
 8032c3a:	2b01      	cmp	r3, #1
 8032c3c:	d10c      	bne.n	8032c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8032c3e:	68fb      	ldr	r3, [r7, #12]
 8032c40:	681b      	ldr	r3, [r3, #0]
 8032c42:	695b      	ldr	r3, [r3, #20]
 8032c44:	43da      	mvns	r2, r3
 8032c46:	68bb      	ldr	r3, [r7, #8]
 8032c48:	4013      	ands	r3, r2
 8032c4a:	b29b      	uxth	r3, r3
 8032c4c:	2b00      	cmp	r3, #0
 8032c4e:	bf14      	ite	ne
 8032c50:	2301      	movne	r3, #1
 8032c52:	2300      	moveq	r3, #0
 8032c54:	b2db      	uxtb	r3, r3
 8032c56:	e00b      	b.n	8032c70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8032c58:	68fb      	ldr	r3, [r7, #12]
 8032c5a:	681b      	ldr	r3, [r3, #0]
 8032c5c:	699b      	ldr	r3, [r3, #24]
 8032c5e:	43da      	mvns	r2, r3
 8032c60:	68bb      	ldr	r3, [r7, #8]
 8032c62:	4013      	ands	r3, r2
 8032c64:	b29b      	uxth	r3, r3
 8032c66:	2b00      	cmp	r3, #0
 8032c68:	bf14      	ite	ne
 8032c6a:	2301      	movne	r3, #1
 8032c6c:	2300      	moveq	r3, #0
 8032c6e:	b2db      	uxtb	r3, r3
 8032c70:	2b00      	cmp	r3, #0
 8032c72:	d18d      	bne.n	8032b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8032c74:	2300      	movs	r3, #0
}
 8032c76:	4618      	mov	r0, r3
 8032c78:	3710      	adds	r7, #16
 8032c7a:	46bd      	mov	sp, r7
 8032c7c:	bd80      	pop	{r7, pc}

08032c7e <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8032c7e:	b580      	push	{r7, lr}
 8032c80:	b084      	sub	sp, #16
 8032c82:	af00      	add	r7, sp, #0
 8032c84:	60f8      	str	r0, [r7, #12]
 8032c86:	60b9      	str	r1, [r7, #8]
 8032c88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8032c8a:	e02d      	b.n	8032ce8 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8032c8c:	68f8      	ldr	r0, [r7, #12]
 8032c8e:	f000 f8ce 	bl	8032e2e <I2C_IsAcknowledgeFailed>
 8032c92:	4603      	mov	r3, r0
 8032c94:	2b00      	cmp	r3, #0
 8032c96:	d001      	beq.n	8032c9c <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8032c98:	2301      	movs	r3, #1
 8032c9a:	e02d      	b.n	8032cf8 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8032c9c:	68bb      	ldr	r3, [r7, #8]
 8032c9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8032ca2:	d021      	beq.n	8032ce8 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8032ca4:	f7f9 fb62 	bl	802c36c <HAL_GetTick>
 8032ca8:	4602      	mov	r2, r0
 8032caa:	687b      	ldr	r3, [r7, #4]
 8032cac:	1ad3      	subs	r3, r2, r3
 8032cae:	68ba      	ldr	r2, [r7, #8]
 8032cb0:	429a      	cmp	r2, r3
 8032cb2:	d302      	bcc.n	8032cba <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8032cb4:	68bb      	ldr	r3, [r7, #8]
 8032cb6:	2b00      	cmp	r3, #0
 8032cb8:	d116      	bne.n	8032ce8 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8032cba:	68fb      	ldr	r3, [r7, #12]
 8032cbc:	2200      	movs	r2, #0
 8032cbe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8032cc0:	68fb      	ldr	r3, [r7, #12]
 8032cc2:	2220      	movs	r2, #32
 8032cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8032cc8:	68fb      	ldr	r3, [r7, #12]
 8032cca:	2200      	movs	r2, #0
 8032ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8032cd0:	68fb      	ldr	r3, [r7, #12]
 8032cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032cd4:	f043 0220 	orr.w	r2, r3, #32
 8032cd8:	68fb      	ldr	r3, [r7, #12]
 8032cda:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8032cdc:	68fb      	ldr	r3, [r7, #12]
 8032cde:	2200      	movs	r2, #0
 8032ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8032ce4:	2301      	movs	r3, #1
 8032ce6:	e007      	b.n	8032cf8 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8032ce8:	68fb      	ldr	r3, [r7, #12]
 8032cea:	681b      	ldr	r3, [r3, #0]
 8032cec:	695b      	ldr	r3, [r3, #20]
 8032cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8032cf2:	2b80      	cmp	r3, #128	; 0x80
 8032cf4:	d1ca      	bne.n	8032c8c <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8032cf6:	2300      	movs	r3, #0
}
 8032cf8:	4618      	mov	r0, r3
 8032cfa:	3710      	adds	r7, #16
 8032cfc:	46bd      	mov	sp, r7
 8032cfe:	bd80      	pop	{r7, pc}

08032d00 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8032d00:	b580      	push	{r7, lr}
 8032d02:	b084      	sub	sp, #16
 8032d04:	af00      	add	r7, sp, #0
 8032d06:	60f8      	str	r0, [r7, #12]
 8032d08:	60b9      	str	r1, [r7, #8]
 8032d0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8032d0c:	e02d      	b.n	8032d6a <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8032d0e:	68f8      	ldr	r0, [r7, #12]
 8032d10:	f000 f88d 	bl	8032e2e <I2C_IsAcknowledgeFailed>
 8032d14:	4603      	mov	r3, r0
 8032d16:	2b00      	cmp	r3, #0
 8032d18:	d001      	beq.n	8032d1e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8032d1a:	2301      	movs	r3, #1
 8032d1c:	e02d      	b.n	8032d7a <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8032d1e:	68bb      	ldr	r3, [r7, #8]
 8032d20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8032d24:	d021      	beq.n	8032d6a <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8032d26:	f7f9 fb21 	bl	802c36c <HAL_GetTick>
 8032d2a:	4602      	mov	r2, r0
 8032d2c:	687b      	ldr	r3, [r7, #4]
 8032d2e:	1ad3      	subs	r3, r2, r3
 8032d30:	68ba      	ldr	r2, [r7, #8]
 8032d32:	429a      	cmp	r2, r3
 8032d34:	d302      	bcc.n	8032d3c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8032d36:	68bb      	ldr	r3, [r7, #8]
 8032d38:	2b00      	cmp	r3, #0
 8032d3a:	d116      	bne.n	8032d6a <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8032d3c:	68fb      	ldr	r3, [r7, #12]
 8032d3e:	2200      	movs	r2, #0
 8032d40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8032d42:	68fb      	ldr	r3, [r7, #12]
 8032d44:	2220      	movs	r2, #32
 8032d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8032d4a:	68fb      	ldr	r3, [r7, #12]
 8032d4c:	2200      	movs	r2, #0
 8032d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8032d52:	68fb      	ldr	r3, [r7, #12]
 8032d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032d56:	f043 0220 	orr.w	r2, r3, #32
 8032d5a:	68fb      	ldr	r3, [r7, #12]
 8032d5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8032d5e:	68fb      	ldr	r3, [r7, #12]
 8032d60:	2200      	movs	r2, #0
 8032d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8032d66:	2301      	movs	r3, #1
 8032d68:	e007      	b.n	8032d7a <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8032d6a:	68fb      	ldr	r3, [r7, #12]
 8032d6c:	681b      	ldr	r3, [r3, #0]
 8032d6e:	695b      	ldr	r3, [r3, #20]
 8032d70:	f003 0304 	and.w	r3, r3, #4
 8032d74:	2b04      	cmp	r3, #4
 8032d76:	d1ca      	bne.n	8032d0e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8032d78:	2300      	movs	r3, #0
}
 8032d7a:	4618      	mov	r0, r3
 8032d7c:	3710      	adds	r7, #16
 8032d7e:	46bd      	mov	sp, r7
 8032d80:	bd80      	pop	{r7, pc}

08032d82 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8032d82:	b580      	push	{r7, lr}
 8032d84:	b084      	sub	sp, #16
 8032d86:	af00      	add	r7, sp, #0
 8032d88:	60f8      	str	r0, [r7, #12]
 8032d8a:	60b9      	str	r1, [r7, #8]
 8032d8c:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8032d8e:	e042      	b.n	8032e16 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8032d90:	68fb      	ldr	r3, [r7, #12]
 8032d92:	681b      	ldr	r3, [r3, #0]
 8032d94:	695b      	ldr	r3, [r3, #20]
 8032d96:	f003 0310 	and.w	r3, r3, #16
 8032d9a:	2b10      	cmp	r3, #16
 8032d9c:	d119      	bne.n	8032dd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8032d9e:	68fb      	ldr	r3, [r7, #12]
 8032da0:	681b      	ldr	r3, [r3, #0]
 8032da2:	f06f 0210 	mvn.w	r2, #16
 8032da6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8032da8:	68fb      	ldr	r3, [r7, #12]
 8032daa:	2200      	movs	r2, #0
 8032dac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8032dae:	68fb      	ldr	r3, [r7, #12]
 8032db0:	2220      	movs	r2, #32
 8032db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8032db6:	68fb      	ldr	r3, [r7, #12]
 8032db8:	2200      	movs	r2, #0
 8032dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8032dbe:	68fb      	ldr	r3, [r7, #12]
 8032dc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8032dc2:	68fb      	ldr	r3, [r7, #12]
 8032dc4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8032dc6:	68fb      	ldr	r3, [r7, #12]
 8032dc8:	2200      	movs	r2, #0
 8032dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8032dce:	2301      	movs	r3, #1
 8032dd0:	e029      	b.n	8032e26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8032dd2:	f7f9 facb 	bl	802c36c <HAL_GetTick>
 8032dd6:	4602      	mov	r2, r0
 8032dd8:	687b      	ldr	r3, [r7, #4]
 8032dda:	1ad3      	subs	r3, r2, r3
 8032ddc:	68ba      	ldr	r2, [r7, #8]
 8032dde:	429a      	cmp	r2, r3
 8032de0:	d302      	bcc.n	8032de8 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8032de2:	68bb      	ldr	r3, [r7, #8]
 8032de4:	2b00      	cmp	r3, #0
 8032de6:	d116      	bne.n	8032e16 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8032de8:	68fb      	ldr	r3, [r7, #12]
 8032dea:	2200      	movs	r2, #0
 8032dec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8032dee:	68fb      	ldr	r3, [r7, #12]
 8032df0:	2220      	movs	r2, #32
 8032df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8032df6:	68fb      	ldr	r3, [r7, #12]
 8032df8:	2200      	movs	r2, #0
 8032dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8032dfe:	68fb      	ldr	r3, [r7, #12]
 8032e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032e02:	f043 0220 	orr.w	r2, r3, #32
 8032e06:	68fb      	ldr	r3, [r7, #12]
 8032e08:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8032e0a:	68fb      	ldr	r3, [r7, #12]
 8032e0c:	2200      	movs	r2, #0
 8032e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8032e12:	2301      	movs	r3, #1
 8032e14:	e007      	b.n	8032e26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8032e16:	68fb      	ldr	r3, [r7, #12]
 8032e18:	681b      	ldr	r3, [r3, #0]
 8032e1a:	695b      	ldr	r3, [r3, #20]
 8032e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8032e20:	2b40      	cmp	r3, #64	; 0x40
 8032e22:	d1b5      	bne.n	8032d90 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8032e24:	2300      	movs	r3, #0
}
 8032e26:	4618      	mov	r0, r3
 8032e28:	3710      	adds	r7, #16
 8032e2a:	46bd      	mov	sp, r7
 8032e2c:	bd80      	pop	{r7, pc}

08032e2e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8032e2e:	b480      	push	{r7}
 8032e30:	b083      	sub	sp, #12
 8032e32:	af00      	add	r7, sp, #0
 8032e34:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8032e36:	687b      	ldr	r3, [r7, #4]
 8032e38:	681b      	ldr	r3, [r3, #0]
 8032e3a:	695b      	ldr	r3, [r3, #20]
 8032e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8032e40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8032e44:	d11b      	bne.n	8032e7e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8032e46:	687b      	ldr	r3, [r7, #4]
 8032e48:	681b      	ldr	r3, [r3, #0]
 8032e4a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8032e4e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8032e50:	687b      	ldr	r3, [r7, #4]
 8032e52:	2200      	movs	r2, #0
 8032e54:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8032e56:	687b      	ldr	r3, [r7, #4]
 8032e58:	2220      	movs	r2, #32
 8032e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8032e5e:	687b      	ldr	r3, [r7, #4]
 8032e60:	2200      	movs	r2, #0
 8032e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8032e66:	687b      	ldr	r3, [r7, #4]
 8032e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032e6a:	f043 0204 	orr.w	r2, r3, #4
 8032e6e:	687b      	ldr	r3, [r7, #4]
 8032e70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8032e72:	687b      	ldr	r3, [r7, #4]
 8032e74:	2200      	movs	r2, #0
 8032e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8032e7a:	2301      	movs	r3, #1
 8032e7c:	e000      	b.n	8032e80 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8032e7e:	2300      	movs	r3, #0
}
 8032e80:	4618      	mov	r0, r3
 8032e82:	370c      	adds	r7, #12
 8032e84:	46bd      	mov	sp, r7
 8032e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032e8a:	4770      	bx	lr

08032e8c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8032e8c:	b480      	push	{r7}
 8032e8e:	b083      	sub	sp, #12
 8032e90:	af00      	add	r7, sp, #0
 8032e92:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8032e94:	687b      	ldr	r3, [r7, #4]
 8032e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032e98:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8032e9c:	d103      	bne.n	8032ea6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8032e9e:	687b      	ldr	r3, [r7, #4]
 8032ea0:	2201      	movs	r2, #1
 8032ea2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8032ea4:	e007      	b.n	8032eb6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8032ea6:	687b      	ldr	r3, [r7, #4]
 8032ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032eaa:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8032eae:	d102      	bne.n	8032eb6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8032eb0:	687b      	ldr	r3, [r7, #4]
 8032eb2:	2208      	movs	r2, #8
 8032eb4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8032eb6:	bf00      	nop
 8032eb8:	370c      	adds	r7, #12
 8032eba:	46bd      	mov	sp, r7
 8032ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032ec0:	4770      	bx	lr

08032ec2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8032ec2:	b480      	push	{r7}
 8032ec4:	b083      	sub	sp, #12
 8032ec6:	af00      	add	r7, sp, #0
 8032ec8:	6078      	str	r0, [r7, #4]
 8032eca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8032ecc:	687b      	ldr	r3, [r7, #4]
 8032ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8032ed2:	b2db      	uxtb	r3, r3
 8032ed4:	2b20      	cmp	r3, #32
 8032ed6:	d129      	bne.n	8032f2c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8032ed8:	687b      	ldr	r3, [r7, #4]
 8032eda:	2224      	movs	r2, #36	; 0x24
 8032edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8032ee0:	687b      	ldr	r3, [r7, #4]
 8032ee2:	681b      	ldr	r3, [r3, #0]
 8032ee4:	681a      	ldr	r2, [r3, #0]
 8032ee6:	687b      	ldr	r3, [r7, #4]
 8032ee8:	681b      	ldr	r3, [r3, #0]
 8032eea:	f022 0201 	bic.w	r2, r2, #1
 8032eee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8032ef0:	687b      	ldr	r3, [r7, #4]
 8032ef2:	681b      	ldr	r3, [r3, #0]
 8032ef4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8032ef6:	687b      	ldr	r3, [r7, #4]
 8032ef8:	681b      	ldr	r3, [r3, #0]
 8032efa:	f022 0210 	bic.w	r2, r2, #16
 8032efe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8032f00:	687b      	ldr	r3, [r7, #4]
 8032f02:	681b      	ldr	r3, [r3, #0]
 8032f04:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8032f06:	687b      	ldr	r3, [r7, #4]
 8032f08:	681b      	ldr	r3, [r3, #0]
 8032f0a:	683a      	ldr	r2, [r7, #0]
 8032f0c:	430a      	orrs	r2, r1
 8032f0e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8032f10:	687b      	ldr	r3, [r7, #4]
 8032f12:	681b      	ldr	r3, [r3, #0]
 8032f14:	681a      	ldr	r2, [r3, #0]
 8032f16:	687b      	ldr	r3, [r7, #4]
 8032f18:	681b      	ldr	r3, [r3, #0]
 8032f1a:	f042 0201 	orr.w	r2, r2, #1
 8032f1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8032f20:	687b      	ldr	r3, [r7, #4]
 8032f22:	2220      	movs	r2, #32
 8032f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8032f28:	2300      	movs	r3, #0
 8032f2a:	e000      	b.n	8032f2e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8032f2c:	2302      	movs	r3, #2
  }
}
 8032f2e:	4618      	mov	r0, r3
 8032f30:	370c      	adds	r7, #12
 8032f32:	46bd      	mov	sp, r7
 8032f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032f38:	4770      	bx	lr

08032f3a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8032f3a:	b480      	push	{r7}
 8032f3c:	b085      	sub	sp, #20
 8032f3e:	af00      	add	r7, sp, #0
 8032f40:	6078      	str	r0, [r7, #4]
 8032f42:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8032f44:	2300      	movs	r3, #0
 8032f46:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8032f48:	687b      	ldr	r3, [r7, #4]
 8032f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8032f4e:	b2db      	uxtb	r3, r3
 8032f50:	2b20      	cmp	r3, #32
 8032f52:	d12a      	bne.n	8032faa <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8032f54:	687b      	ldr	r3, [r7, #4]
 8032f56:	2224      	movs	r2, #36	; 0x24
 8032f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8032f5c:	687b      	ldr	r3, [r7, #4]
 8032f5e:	681b      	ldr	r3, [r3, #0]
 8032f60:	681a      	ldr	r2, [r3, #0]
 8032f62:	687b      	ldr	r3, [r7, #4]
 8032f64:	681b      	ldr	r3, [r3, #0]
 8032f66:	f022 0201 	bic.w	r2, r2, #1
 8032f6a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8032f6c:	687b      	ldr	r3, [r7, #4]
 8032f6e:	681b      	ldr	r3, [r3, #0]
 8032f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8032f72:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8032f74:	89fb      	ldrh	r3, [r7, #14]
 8032f76:	f023 030f 	bic.w	r3, r3, #15
 8032f7a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8032f7c:	683b      	ldr	r3, [r7, #0]
 8032f7e:	b29a      	uxth	r2, r3
 8032f80:	89fb      	ldrh	r3, [r7, #14]
 8032f82:	4313      	orrs	r3, r2
 8032f84:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8032f86:	687b      	ldr	r3, [r7, #4]
 8032f88:	681b      	ldr	r3, [r3, #0]
 8032f8a:	89fa      	ldrh	r2, [r7, #14]
 8032f8c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8032f8e:	687b      	ldr	r3, [r7, #4]
 8032f90:	681b      	ldr	r3, [r3, #0]
 8032f92:	681a      	ldr	r2, [r3, #0]
 8032f94:	687b      	ldr	r3, [r7, #4]
 8032f96:	681b      	ldr	r3, [r3, #0]
 8032f98:	f042 0201 	orr.w	r2, r2, #1
 8032f9c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8032f9e:	687b      	ldr	r3, [r7, #4]
 8032fa0:	2220      	movs	r2, #32
 8032fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8032fa6:	2300      	movs	r3, #0
 8032fa8:	e000      	b.n	8032fac <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8032faa:	2302      	movs	r3, #2
  }
}
 8032fac:	4618      	mov	r0, r3
 8032fae:	3714      	adds	r7, #20
 8032fb0:	46bd      	mov	sp, r7
 8032fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032fb6:	4770      	bx	lr

08032fb8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8032fb8:	b580      	push	{r7, lr}
 8032fba:	b088      	sub	sp, #32
 8032fbc:	af00      	add	r7, sp, #0
 8032fbe:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8032fc0:	687b      	ldr	r3, [r7, #4]
 8032fc2:	2b00      	cmp	r3, #0
 8032fc4:	d101      	bne.n	8032fca <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8032fc6:	2301      	movs	r3, #1
 8032fc8:	e154      	b.n	8033274 <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8032fca:	687b      	ldr	r3, [r7, #4]
 8032fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8032fd0:	b2db      	uxtb	r3, r3
 8032fd2:	2b00      	cmp	r3, #0
 8032fd4:	d109      	bne.n	8032fea <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8032fd6:	687b      	ldr	r3, [r7, #4]
 8032fd8:	2200      	movs	r2, #0
 8032fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8032fde:	687b      	ldr	r3, [r7, #4]
 8032fe0:	4a98      	ldr	r2, [pc, #608]	; (8033244 <HAL_I2S_Init+0x28c>)
 8032fe2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8032fe4:	6878      	ldr	r0, [r7, #4]
 8032fe6:	f7f8 fcc9 	bl	802b97c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8032fea:	687b      	ldr	r3, [r7, #4]
 8032fec:	2202      	movs	r2, #2
 8032fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8032ff2:	687b      	ldr	r3, [r7, #4]
 8032ff4:	681b      	ldr	r3, [r3, #0]
 8032ff6:	69db      	ldr	r3, [r3, #28]
 8032ff8:	687a      	ldr	r2, [r7, #4]
 8032ffa:	6812      	ldr	r2, [r2, #0]
 8032ffc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8033000:	f023 030f 	bic.w	r3, r3, #15
 8033004:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8033006:	687b      	ldr	r3, [r7, #4]
 8033008:	681b      	ldr	r3, [r3, #0]
 803300a:	2202      	movs	r2, #2
 803300c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 803300e:	687b      	ldr	r3, [r7, #4]
 8033010:	695b      	ldr	r3, [r3, #20]
 8033012:	2b02      	cmp	r3, #2
 8033014:	d06f      	beq.n	80330f6 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8033016:	687b      	ldr	r3, [r7, #4]
 8033018:	68db      	ldr	r3, [r3, #12]
 803301a:	2b00      	cmp	r3, #0
 803301c:	d102      	bne.n	8033024 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 803301e:	2310      	movs	r3, #16
 8033020:	617b      	str	r3, [r7, #20]
 8033022:	e001      	b.n	8033028 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8033024:	2320      	movs	r3, #32
 8033026:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8033028:	687b      	ldr	r3, [r7, #4]
 803302a:	689b      	ldr	r3, [r3, #8]
 803302c:	2b20      	cmp	r3, #32
 803302e:	d802      	bhi.n	8033036 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8033030:	697b      	ldr	r3, [r7, #20]
 8033032:	005b      	lsls	r3, r3, #1
 8033034:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8033036:	687b      	ldr	r3, [r7, #4]
 8033038:	681b      	ldr	r3, [r3, #0]
 803303a:	4a83      	ldr	r2, [pc, #524]	; (8033248 <HAL_I2S_Init+0x290>)
 803303c:	4293      	cmp	r3, r2
 803303e:	d004      	beq.n	803304a <HAL_I2S_Init+0x92>
 8033040:	687b      	ldr	r3, [r7, #4]
 8033042:	681b      	ldr	r3, [r3, #0]
 8033044:	4a81      	ldr	r2, [pc, #516]	; (803324c <HAL_I2S_Init+0x294>)
 8033046:	4293      	cmp	r3, r2
 8033048:	d104      	bne.n	8033054 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 803304a:	2001      	movs	r0, #1
 803304c:	f001 fb2c 	bl	80346a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8033050:	60f8      	str	r0, [r7, #12]
 8033052:	e003      	b.n	803305c <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8033054:	2002      	movs	r0, #2
 8033056:	f001 fb27 	bl	80346a8 <HAL_RCCEx_GetPeriphCLKFreq>
 803305a:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 803305c:	687b      	ldr	r3, [r7, #4]
 803305e:	691b      	ldr	r3, [r3, #16]
 8033060:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8033064:	d125      	bne.n	80330b2 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8033066:	687b      	ldr	r3, [r7, #4]
 8033068:	68db      	ldr	r3, [r3, #12]
 803306a:	2b00      	cmp	r3, #0
 803306c:	d010      	beq.n	8033090 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 803306e:	697b      	ldr	r3, [r7, #20]
 8033070:	009b      	lsls	r3, r3, #2
 8033072:	68fa      	ldr	r2, [r7, #12]
 8033074:	fbb2 f2f3 	udiv	r2, r2, r3
 8033078:	4613      	mov	r3, r2
 803307a:	009b      	lsls	r3, r3, #2
 803307c:	4413      	add	r3, r2
 803307e:	005b      	lsls	r3, r3, #1
 8033080:	461a      	mov	r2, r3
 8033082:	687b      	ldr	r3, [r7, #4]
 8033084:	695b      	ldr	r3, [r3, #20]
 8033086:	fbb2 f3f3 	udiv	r3, r2, r3
 803308a:	3305      	adds	r3, #5
 803308c:	613b      	str	r3, [r7, #16]
 803308e:	e01f      	b.n	80330d0 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8033090:	697b      	ldr	r3, [r7, #20]
 8033092:	00db      	lsls	r3, r3, #3
 8033094:	68fa      	ldr	r2, [r7, #12]
 8033096:	fbb2 f2f3 	udiv	r2, r2, r3
 803309a:	4613      	mov	r3, r2
 803309c:	009b      	lsls	r3, r3, #2
 803309e:	4413      	add	r3, r2
 80330a0:	005b      	lsls	r3, r3, #1
 80330a2:	461a      	mov	r2, r3
 80330a4:	687b      	ldr	r3, [r7, #4]
 80330a6:	695b      	ldr	r3, [r3, #20]
 80330a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80330ac:	3305      	adds	r3, #5
 80330ae:	613b      	str	r3, [r7, #16]
 80330b0:	e00e      	b.n	80330d0 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80330b2:	68fa      	ldr	r2, [r7, #12]
 80330b4:	697b      	ldr	r3, [r7, #20]
 80330b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80330ba:	4613      	mov	r3, r2
 80330bc:	009b      	lsls	r3, r3, #2
 80330be:	4413      	add	r3, r2
 80330c0:	005b      	lsls	r3, r3, #1
 80330c2:	461a      	mov	r2, r3
 80330c4:	687b      	ldr	r3, [r7, #4]
 80330c6:	695b      	ldr	r3, [r3, #20]
 80330c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80330cc:	3305      	adds	r3, #5
 80330ce:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80330d0:	693b      	ldr	r3, [r7, #16]
 80330d2:	4a5f      	ldr	r2, [pc, #380]	; (8033250 <HAL_I2S_Init+0x298>)
 80330d4:	fba2 2303 	umull	r2, r3, r2, r3
 80330d8:	08db      	lsrs	r3, r3, #3
 80330da:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80330dc:	693b      	ldr	r3, [r7, #16]
 80330de:	f003 0301 	and.w	r3, r3, #1
 80330e2:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80330e4:	693a      	ldr	r2, [r7, #16]
 80330e6:	69bb      	ldr	r3, [r7, #24]
 80330e8:	1ad3      	subs	r3, r2, r3
 80330ea:	085b      	lsrs	r3, r3, #1
 80330ec:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80330ee:	69bb      	ldr	r3, [r7, #24]
 80330f0:	021b      	lsls	r3, r3, #8
 80330f2:	61bb      	str	r3, [r7, #24]
 80330f4:	e003      	b.n	80330fe <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80330f6:	2302      	movs	r3, #2
 80330f8:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80330fa:	2300      	movs	r3, #0
 80330fc:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80330fe:	69fb      	ldr	r3, [r7, #28]
 8033100:	2b01      	cmp	r3, #1
 8033102:	d902      	bls.n	803310a <HAL_I2S_Init+0x152>
 8033104:	69fb      	ldr	r3, [r7, #28]
 8033106:	2bff      	cmp	r3, #255	; 0xff
 8033108:	d907      	bls.n	803311a <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 803310a:	687b      	ldr	r3, [r7, #4]
 803310c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 803310e:	f043 0210 	orr.w	r2, r3, #16
 8033112:	687b      	ldr	r3, [r7, #4]
 8033114:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8033116:	2301      	movs	r3, #1
 8033118:	e0ac      	b.n	8033274 <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 803311a:	687b      	ldr	r3, [r7, #4]
 803311c:	691a      	ldr	r2, [r3, #16]
 803311e:	69bb      	ldr	r3, [r7, #24]
 8033120:	ea42 0103 	orr.w	r1, r2, r3
 8033124:	687b      	ldr	r3, [r7, #4]
 8033126:	681b      	ldr	r3, [r3, #0]
 8033128:	69fa      	ldr	r2, [r7, #28]
 803312a:	430a      	orrs	r2, r1
 803312c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 803312e:	687b      	ldr	r3, [r7, #4]
 8033130:	681b      	ldr	r3, [r3, #0]
 8033132:	69db      	ldr	r3, [r3, #28]
 8033134:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8033138:	f023 030f 	bic.w	r3, r3, #15
 803313c:	687a      	ldr	r2, [r7, #4]
 803313e:	6851      	ldr	r1, [r2, #4]
 8033140:	687a      	ldr	r2, [r7, #4]
 8033142:	6892      	ldr	r2, [r2, #8]
 8033144:	4311      	orrs	r1, r2
 8033146:	687a      	ldr	r2, [r7, #4]
 8033148:	68d2      	ldr	r2, [r2, #12]
 803314a:	4311      	orrs	r1, r2
 803314c:	687a      	ldr	r2, [r7, #4]
 803314e:	6992      	ldr	r2, [r2, #24]
 8033150:	430a      	orrs	r2, r1
 8033152:	431a      	orrs	r2, r3
 8033154:	687b      	ldr	r3, [r7, #4]
 8033156:	681b      	ldr	r3, [r3, #0]
 8033158:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 803315c:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 803315e:	687b      	ldr	r3, [r7, #4]
 8033160:	689b      	ldr	r3, [r3, #8]
 8033162:	2b30      	cmp	r3, #48	; 0x30
 8033164:	d003      	beq.n	803316e <HAL_I2S_Init+0x1b6>
 8033166:	687b      	ldr	r3, [r7, #4]
 8033168:	689b      	ldr	r3, [r3, #8]
 803316a:	2bb0      	cmp	r3, #176	; 0xb0
 803316c:	d107      	bne.n	803317e <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 803316e:	687b      	ldr	r3, [r7, #4]
 8033170:	681b      	ldr	r3, [r3, #0]
 8033172:	69da      	ldr	r2, [r3, #28]
 8033174:	687b      	ldr	r3, [r7, #4]
 8033176:	681b      	ldr	r3, [r3, #0]
 8033178:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 803317c:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 803317e:	687b      	ldr	r3, [r7, #4]
 8033180:	6a1b      	ldr	r3, [r3, #32]
 8033182:	2b01      	cmp	r3, #1
 8033184:	d16e      	bne.n	8033264 <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8033186:	687b      	ldr	r3, [r7, #4]
 8033188:	4a32      	ldr	r2, [pc, #200]	; (8033254 <HAL_I2S_Init+0x29c>)
 803318a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 803318c:	687b      	ldr	r3, [r7, #4]
 803318e:	681b      	ldr	r3, [r3, #0]
 8033190:	4a2d      	ldr	r2, [pc, #180]	; (8033248 <HAL_I2S_Init+0x290>)
 8033192:	4293      	cmp	r3, r2
 8033194:	d101      	bne.n	803319a <HAL_I2S_Init+0x1e2>
 8033196:	4b30      	ldr	r3, [pc, #192]	; (8033258 <HAL_I2S_Init+0x2a0>)
 8033198:	e001      	b.n	803319e <HAL_I2S_Init+0x1e6>
 803319a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 803319e:	69db      	ldr	r3, [r3, #28]
 80331a0:	687a      	ldr	r2, [r7, #4]
 80331a2:	6812      	ldr	r2, [r2, #0]
 80331a4:	4928      	ldr	r1, [pc, #160]	; (8033248 <HAL_I2S_Init+0x290>)
 80331a6:	428a      	cmp	r2, r1
 80331a8:	d101      	bne.n	80331ae <HAL_I2S_Init+0x1f6>
 80331aa:	4a2b      	ldr	r2, [pc, #172]	; (8033258 <HAL_I2S_Init+0x2a0>)
 80331ac:	e001      	b.n	80331b2 <HAL_I2S_Init+0x1fa>
 80331ae:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80331b2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80331b6:	f023 030f 	bic.w	r3, r3, #15
 80331ba:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80331bc:	687b      	ldr	r3, [r7, #4]
 80331be:	681b      	ldr	r3, [r3, #0]
 80331c0:	4a21      	ldr	r2, [pc, #132]	; (8033248 <HAL_I2S_Init+0x290>)
 80331c2:	4293      	cmp	r3, r2
 80331c4:	d101      	bne.n	80331ca <HAL_I2S_Init+0x212>
 80331c6:	4b24      	ldr	r3, [pc, #144]	; (8033258 <HAL_I2S_Init+0x2a0>)
 80331c8:	e001      	b.n	80331ce <HAL_I2S_Init+0x216>
 80331ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80331ce:	2202      	movs	r2, #2
 80331d0:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80331d2:	687b      	ldr	r3, [r7, #4]
 80331d4:	681b      	ldr	r3, [r3, #0]
 80331d6:	4a1c      	ldr	r2, [pc, #112]	; (8033248 <HAL_I2S_Init+0x290>)
 80331d8:	4293      	cmp	r3, r2
 80331da:	d101      	bne.n	80331e0 <HAL_I2S_Init+0x228>
 80331dc:	4b1e      	ldr	r3, [pc, #120]	; (8033258 <HAL_I2S_Init+0x2a0>)
 80331de:	e001      	b.n	80331e4 <HAL_I2S_Init+0x22c>
 80331e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80331e4:	69db      	ldr	r3, [r3, #28]
 80331e6:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80331e8:	687b      	ldr	r3, [r7, #4]
 80331ea:	685b      	ldr	r3, [r3, #4]
 80331ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80331f0:	d003      	beq.n	80331fa <HAL_I2S_Init+0x242>
 80331f2:	687b      	ldr	r3, [r7, #4]
 80331f4:	685b      	ldr	r3, [r3, #4]
 80331f6:	2b00      	cmp	r3, #0
 80331f8:	d103      	bne.n	8033202 <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80331fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80331fe:	613b      	str	r3, [r7, #16]
 8033200:	e001      	b.n	8033206 <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8033202:	2300      	movs	r3, #0
 8033204:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8033206:	693b      	ldr	r3, [r7, #16]
 8033208:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 803320a:	687b      	ldr	r3, [r7, #4]
 803320c:	689b      	ldr	r3, [r3, #8]
 803320e:	b299      	uxth	r1, r3
 8033210:	687b      	ldr	r3, [r7, #4]
 8033212:	68db      	ldr	r3, [r3, #12]
 8033214:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8033216:	687b      	ldr	r3, [r7, #4]
 8033218:	699b      	ldr	r3, [r3, #24]
 803321a:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 803321c:	4303      	orrs	r3, r0
 803321e:	b29b      	uxth	r3, r3
 8033220:	430b      	orrs	r3, r1
 8033222:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8033224:	4313      	orrs	r3, r2
 8033226:	b29a      	uxth	r2, r3
 8033228:	897b      	ldrh	r3, [r7, #10]
 803322a:	4313      	orrs	r3, r2
 803322c:	b29b      	uxth	r3, r3
 803322e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8033232:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8033234:	687b      	ldr	r3, [r7, #4]
 8033236:	681b      	ldr	r3, [r3, #0]
 8033238:	4a03      	ldr	r2, [pc, #12]	; (8033248 <HAL_I2S_Init+0x290>)
 803323a:	4293      	cmp	r3, r2
 803323c:	d10e      	bne.n	803325c <HAL_I2S_Init+0x2a4>
 803323e:	4b06      	ldr	r3, [pc, #24]	; (8033258 <HAL_I2S_Init+0x2a0>)
 8033240:	e00e      	b.n	8033260 <HAL_I2S_Init+0x2a8>
 8033242:	bf00      	nop
 8033244:	0803358d 	.word	0x0803358d
 8033248:	40003800 	.word	0x40003800
 803324c:	40003c00 	.word	0x40003c00
 8033250:	cccccccd 	.word	0xcccccccd
 8033254:	080336a1 	.word	0x080336a1
 8033258:	40003400 	.word	0x40003400
 803325c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8033260:	897a      	ldrh	r2, [r7, #10]
 8033262:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8033264:	687b      	ldr	r3, [r7, #4]
 8033266:	2200      	movs	r2, #0
 8033268:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 803326a:	687b      	ldr	r3, [r7, #4]
 803326c:	2201      	movs	r2, #1
 803326e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8033272:	2300      	movs	r3, #0
}
 8033274:	4618      	mov	r0, r3
 8033276:	3720      	adds	r7, #32
 8033278:	46bd      	mov	sp, r7
 803327a:	bd80      	pop	{r7, pc}

0803327c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 803327c:	b580      	push	{r7, lr}
 803327e:	b086      	sub	sp, #24
 8033280:	af00      	add	r7, sp, #0
 8033282:	60f8      	str	r0, [r7, #12]
 8033284:	60b9      	str	r1, [r7, #8]
 8033286:	4613      	mov	r3, r2
 8033288:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 803328a:	68bb      	ldr	r3, [r7, #8]
 803328c:	2b00      	cmp	r3, #0
 803328e:	d002      	beq.n	8033296 <HAL_I2S_Transmit_DMA+0x1a>
 8033290:	88fb      	ldrh	r3, [r7, #6]
 8033292:	2b00      	cmp	r3, #0
 8033294:	d101      	bne.n	803329a <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8033296:	2301      	movs	r3, #1
 8033298:	e08e      	b.n	80333b8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 803329a:	68fb      	ldr	r3, [r7, #12]
 803329c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80332a0:	b2db      	uxtb	r3, r3
 80332a2:	2b01      	cmp	r3, #1
 80332a4:	d101      	bne.n	80332aa <HAL_I2S_Transmit_DMA+0x2e>
 80332a6:	2302      	movs	r3, #2
 80332a8:	e086      	b.n	80333b8 <HAL_I2S_Transmit_DMA+0x13c>
 80332aa:	68fb      	ldr	r3, [r7, #12]
 80332ac:	2201      	movs	r2, #1
 80332ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80332b2:	68fb      	ldr	r3, [r7, #12]
 80332b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80332b8:	b2db      	uxtb	r3, r3
 80332ba:	2b01      	cmp	r3, #1
 80332bc:	d005      	beq.n	80332ca <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80332be:	68fb      	ldr	r3, [r7, #12]
 80332c0:	2200      	movs	r2, #0
 80332c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80332c6:	2302      	movs	r3, #2
 80332c8:	e076      	b.n	80333b8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80332ca:	68fb      	ldr	r3, [r7, #12]
 80332cc:	2203      	movs	r2, #3
 80332ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80332d2:	68fb      	ldr	r3, [r7, #12]
 80332d4:	2200      	movs	r2, #0
 80332d6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 80332d8:	68fb      	ldr	r3, [r7, #12]
 80332da:	68ba      	ldr	r2, [r7, #8]
 80332dc:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80332de:	68fb      	ldr	r3, [r7, #12]
 80332e0:	681b      	ldr	r3, [r3, #0]
 80332e2:	69db      	ldr	r3, [r3, #28]
 80332e4:	f003 0307 	and.w	r3, r3, #7
 80332e8:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80332ea:	697b      	ldr	r3, [r7, #20]
 80332ec:	2b03      	cmp	r3, #3
 80332ee:	d002      	beq.n	80332f6 <HAL_I2S_Transmit_DMA+0x7a>
 80332f0:	697b      	ldr	r3, [r7, #20]
 80332f2:	2b05      	cmp	r3, #5
 80332f4:	d10a      	bne.n	803330c <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 80332f6:	88fb      	ldrh	r3, [r7, #6]
 80332f8:	005b      	lsls	r3, r3, #1
 80332fa:	b29a      	uxth	r2, r3
 80332fc:	68fb      	ldr	r3, [r7, #12]
 80332fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8033300:	88fb      	ldrh	r3, [r7, #6]
 8033302:	005b      	lsls	r3, r3, #1
 8033304:	b29a      	uxth	r2, r3
 8033306:	68fb      	ldr	r3, [r7, #12]
 8033308:	855a      	strh	r2, [r3, #42]	; 0x2a
 803330a:	e005      	b.n	8033318 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 803330c:	68fb      	ldr	r3, [r7, #12]
 803330e:	88fa      	ldrh	r2, [r7, #6]
 8033310:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8033312:	68fb      	ldr	r3, [r7, #12]
 8033314:	88fa      	ldrh	r2, [r7, #6]
 8033316:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8033318:	68fb      	ldr	r3, [r7, #12]
 803331a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803331c:	4a28      	ldr	r2, [pc, #160]	; (80333c0 <HAL_I2S_Transmit_DMA+0x144>)
 803331e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8033320:	68fb      	ldr	r3, [r7, #12]
 8033322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8033324:	4a27      	ldr	r2, [pc, #156]	; (80333c4 <HAL_I2S_Transmit_DMA+0x148>)
 8033326:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8033328:	68fb      	ldr	r3, [r7, #12]
 803332a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803332c:	4a26      	ldr	r2, [pc, #152]	; (80333c8 <HAL_I2S_Transmit_DMA+0x14c>)
 803332e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8033330:	68fb      	ldr	r3, [r7, #12]
 8033332:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8033334:	68fb      	ldr	r3, [r7, #12]
 8033336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8033338:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 803333a:	68fb      	ldr	r3, [r7, #12]
 803333c:	681b      	ldr	r3, [r3, #0]
 803333e:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8033340:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8033342:	68fb      	ldr	r3, [r7, #12]
 8033344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8033346:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8033348:	f7fc f976 	bl	802f638 <HAL_DMA_Start_IT>
 803334c:	4603      	mov	r3, r0
 803334e:	2b00      	cmp	r3, #0
 8033350:	d00f      	beq.n	8033372 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8033352:	68fb      	ldr	r3, [r7, #12]
 8033354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8033356:	f043 0208 	orr.w	r2, r3, #8
 803335a:	68fb      	ldr	r3, [r7, #12]
 803335c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 803335e:	68fb      	ldr	r3, [r7, #12]
 8033360:	2201      	movs	r2, #1
 8033362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8033366:	68fb      	ldr	r3, [r7, #12]
 8033368:	2200      	movs	r2, #0
 803336a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 803336e:	2301      	movs	r3, #1
 8033370:	e022      	b.n	80333b8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8033372:	68fb      	ldr	r3, [r7, #12]
 8033374:	681b      	ldr	r3, [r3, #0]
 8033376:	69db      	ldr	r3, [r3, #28]
 8033378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 803337c:	2b00      	cmp	r3, #0
 803337e:	d107      	bne.n	8033390 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8033380:	68fb      	ldr	r3, [r7, #12]
 8033382:	681b      	ldr	r3, [r3, #0]
 8033384:	69da      	ldr	r2, [r3, #28]
 8033386:	68fb      	ldr	r3, [r7, #12]
 8033388:	681b      	ldr	r3, [r3, #0]
 803338a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 803338e:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8033390:	68fb      	ldr	r3, [r7, #12]
 8033392:	681b      	ldr	r3, [r3, #0]
 8033394:	685b      	ldr	r3, [r3, #4]
 8033396:	f003 0302 	and.w	r3, r3, #2
 803339a:	2b00      	cmp	r3, #0
 803339c:	d107      	bne.n	80333ae <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 803339e:	68fb      	ldr	r3, [r7, #12]
 80333a0:	681b      	ldr	r3, [r3, #0]
 80333a2:	685a      	ldr	r2, [r3, #4]
 80333a4:	68fb      	ldr	r3, [r7, #12]
 80333a6:	681b      	ldr	r3, [r3, #0]
 80333a8:	f042 0202 	orr.w	r2, r2, #2
 80333ac:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80333ae:	68fb      	ldr	r3, [r7, #12]
 80333b0:	2200      	movs	r2, #0
 80333b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80333b6:	2300      	movs	r3, #0
}
 80333b8:	4618      	mov	r0, r3
 80333ba:	3718      	adds	r7, #24
 80333bc:	46bd      	mov	sp, r7
 80333be:	bd80      	pop	{r7, pc}
 80333c0:	0803346b 	.word	0x0803346b
 80333c4:	08033429 	.word	0x08033429
 80333c8:	08033487 	.word	0x08033487

080333cc <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80333cc:	b580      	push	{r7, lr}
 80333ce:	b082      	sub	sp, #8
 80333d0:	af00      	add	r7, sp, #0
 80333d2:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 80333d4:	687b      	ldr	r3, [r7, #4]
 80333d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80333d8:	6878      	ldr	r0, [r7, #4]
 80333da:	4798      	blx	r3
}
 80333dc:	bf00      	nop
 80333de:	3708      	adds	r7, #8
 80333e0:	46bd      	mov	sp, r7
 80333e2:	bd80      	pop	{r7, pc}

080333e4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80333e4:	b480      	push	{r7}
 80333e6:	b083      	sub	sp, #12
 80333e8:	af00      	add	r7, sp, #0
 80333ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80333ec:	bf00      	nop
 80333ee:	370c      	adds	r7, #12
 80333f0:	46bd      	mov	sp, r7
 80333f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80333f6:	4770      	bx	lr

080333f8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80333f8:	b480      	push	{r7}
 80333fa:	b083      	sub	sp, #12
 80333fc:	af00      	add	r7, sp, #0
 80333fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8033400:	bf00      	nop
 8033402:	370c      	adds	r7, #12
 8033404:	46bd      	mov	sp, r7
 8033406:	f85d 7b04 	ldr.w	r7, [sp], #4
 803340a:	4770      	bx	lr

0803340c <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 803340c:	b480      	push	{r7}
 803340e:	b083      	sub	sp, #12
 8033410:	af00      	add	r7, sp, #0
 8033412:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 8033414:	687b      	ldr	r3, [r7, #4]
 8033416:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 803341a:	b2db      	uxtb	r3, r3
}
 803341c:	4618      	mov	r0, r3
 803341e:	370c      	adds	r7, #12
 8033420:	46bd      	mov	sp, r7
 8033422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033426:	4770      	bx	lr

08033428 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8033428:	b580      	push	{r7, lr}
 803342a:	b084      	sub	sp, #16
 803342c:	af00      	add	r7, sp, #0
 803342e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8033430:	687b      	ldr	r3, [r7, #4]
 8033432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8033434:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8033436:	687b      	ldr	r3, [r7, #4]
 8033438:	69db      	ldr	r3, [r3, #28]
 803343a:	2b00      	cmp	r3, #0
 803343c:	d10e      	bne.n	803345c <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 803343e:	68fb      	ldr	r3, [r7, #12]
 8033440:	681b      	ldr	r3, [r3, #0]
 8033442:	685a      	ldr	r2, [r3, #4]
 8033444:	68fb      	ldr	r3, [r7, #12]
 8033446:	681b      	ldr	r3, [r3, #0]
 8033448:	f022 0202 	bic.w	r2, r2, #2
 803344c:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 803344e:	68fb      	ldr	r3, [r7, #12]
 8033450:	2200      	movs	r2, #0
 8033452:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8033454:	68fb      	ldr	r3, [r7, #12]
 8033456:	2201      	movs	r2, #1
 8033458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 803345c:	68f8      	ldr	r0, [r7, #12]
 803345e:	f7f3 fc9d 	bl	8026d9c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8033462:	bf00      	nop
 8033464:	3710      	adds	r7, #16
 8033466:	46bd      	mov	sp, r7
 8033468:	bd80      	pop	{r7, pc}

0803346a <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 803346a:	b580      	push	{r7, lr}
 803346c:	b084      	sub	sp, #16
 803346e:	af00      	add	r7, sp, #0
 8033470:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8033472:	687b      	ldr	r3, [r7, #4]
 8033474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8033476:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8033478:	68f8      	ldr	r0, [r7, #12]
 803347a:	f7f3 fca1 	bl	8026dc0 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 803347e:	bf00      	nop
 8033480:	3710      	adds	r7, #16
 8033482:	46bd      	mov	sp, r7
 8033484:	bd80      	pop	{r7, pc}

08033486 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8033486:	b580      	push	{r7, lr}
 8033488:	b084      	sub	sp, #16
 803348a:	af00      	add	r7, sp, #0
 803348c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 803348e:	687b      	ldr	r3, [r7, #4]
 8033490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8033492:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8033494:	68fb      	ldr	r3, [r7, #12]
 8033496:	681b      	ldr	r3, [r3, #0]
 8033498:	685a      	ldr	r2, [r3, #4]
 803349a:	68fb      	ldr	r3, [r7, #12]
 803349c:	681b      	ldr	r3, [r3, #0]
 803349e:	f022 0203 	bic.w	r2, r2, #3
 80334a2:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80334a4:	68fb      	ldr	r3, [r7, #12]
 80334a6:	2200      	movs	r2, #0
 80334a8:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80334aa:	68fb      	ldr	r3, [r7, #12]
 80334ac:	2200      	movs	r2, #0
 80334ae:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80334b0:	68fb      	ldr	r3, [r7, #12]
 80334b2:	2201      	movs	r2, #1
 80334b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80334b8:	68fb      	ldr	r3, [r7, #12]
 80334ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80334bc:	f043 0208 	orr.w	r2, r3, #8
 80334c0:	68fb      	ldr	r3, [r7, #12]
 80334c2:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80334c4:	68f8      	ldr	r0, [r7, #12]
 80334c6:	f7ff ff97 	bl	80333f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80334ca:	bf00      	nop
 80334cc:	3710      	adds	r7, #16
 80334ce:	46bd      	mov	sp, r7
 80334d0:	bd80      	pop	{r7, pc}

080334d2 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80334d2:	b580      	push	{r7, lr}
 80334d4:	b082      	sub	sp, #8
 80334d6:	af00      	add	r7, sp, #0
 80334d8:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80334da:	687b      	ldr	r3, [r7, #4]
 80334dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80334de:	881a      	ldrh	r2, [r3, #0]
 80334e0:	687b      	ldr	r3, [r7, #4]
 80334e2:	681b      	ldr	r3, [r3, #0]
 80334e4:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80334e6:	687b      	ldr	r3, [r7, #4]
 80334e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80334ea:	1c9a      	adds	r2, r3, #2
 80334ec:	687b      	ldr	r3, [r7, #4]
 80334ee:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80334f0:	687b      	ldr	r3, [r7, #4]
 80334f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80334f4:	b29b      	uxth	r3, r3
 80334f6:	3b01      	subs	r3, #1
 80334f8:	b29a      	uxth	r2, r3
 80334fa:	687b      	ldr	r3, [r7, #4]
 80334fc:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80334fe:	687b      	ldr	r3, [r7, #4]
 8033500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8033502:	b29b      	uxth	r3, r3
 8033504:	2b00      	cmp	r3, #0
 8033506:	d10e      	bne.n	8033526 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8033508:	687b      	ldr	r3, [r7, #4]
 803350a:	681b      	ldr	r3, [r3, #0]
 803350c:	685a      	ldr	r2, [r3, #4]
 803350e:	687b      	ldr	r3, [r7, #4]
 8033510:	681b      	ldr	r3, [r3, #0]
 8033512:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8033516:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8033518:	687b      	ldr	r3, [r7, #4]
 803351a:	2201      	movs	r2, #1
 803351c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8033520:	6878      	ldr	r0, [r7, #4]
 8033522:	f7f3 fc3b 	bl	8026d9c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8033526:	bf00      	nop
 8033528:	3708      	adds	r7, #8
 803352a:	46bd      	mov	sp, r7
 803352c:	bd80      	pop	{r7, pc}

0803352e <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 803352e:	b580      	push	{r7, lr}
 8033530:	b082      	sub	sp, #8
 8033532:	af00      	add	r7, sp, #0
 8033534:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8033536:	687b      	ldr	r3, [r7, #4]
 8033538:	681b      	ldr	r3, [r3, #0]
 803353a:	68da      	ldr	r2, [r3, #12]
 803353c:	687b      	ldr	r3, [r7, #4]
 803353e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8033540:	b292      	uxth	r2, r2
 8033542:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8033544:	687b      	ldr	r3, [r7, #4]
 8033546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8033548:	1c9a      	adds	r2, r3, #2
 803354a:	687b      	ldr	r3, [r7, #4]
 803354c:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 803354e:	687b      	ldr	r3, [r7, #4]
 8033550:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8033552:	b29b      	uxth	r3, r3
 8033554:	3b01      	subs	r3, #1
 8033556:	b29a      	uxth	r2, r3
 8033558:	687b      	ldr	r3, [r7, #4]
 803355a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 803355c:	687b      	ldr	r3, [r7, #4]
 803355e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8033560:	b29b      	uxth	r3, r3
 8033562:	2b00      	cmp	r3, #0
 8033564:	d10e      	bne.n	8033584 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8033566:	687b      	ldr	r3, [r7, #4]
 8033568:	681b      	ldr	r3, [r3, #0]
 803356a:	685a      	ldr	r2, [r3, #4]
 803356c:	687b      	ldr	r3, [r7, #4]
 803356e:	681b      	ldr	r3, [r3, #0]
 8033570:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8033574:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8033576:	687b      	ldr	r3, [r7, #4]
 8033578:	2201      	movs	r2, #1
 803357a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 803357e:	6878      	ldr	r0, [r7, #4]
 8033580:	f7ff ff30 	bl	80333e4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8033584:	bf00      	nop
 8033586:	3708      	adds	r7, #8
 8033588:	46bd      	mov	sp, r7
 803358a:	bd80      	pop	{r7, pc}

0803358c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 803358c:	b580      	push	{r7, lr}
 803358e:	b086      	sub	sp, #24
 8033590:	af00      	add	r7, sp, #0
 8033592:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8033594:	687b      	ldr	r3, [r7, #4]
 8033596:	681b      	ldr	r3, [r3, #0]
 8033598:	689b      	ldr	r3, [r3, #8]
 803359a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 803359c:	687b      	ldr	r3, [r7, #4]
 803359e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80335a2:	b2db      	uxtb	r3, r3
 80335a4:	2b04      	cmp	r3, #4
 80335a6:	d13a      	bne.n	803361e <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80335a8:	697b      	ldr	r3, [r7, #20]
 80335aa:	f003 0301 	and.w	r3, r3, #1
 80335ae:	2b01      	cmp	r3, #1
 80335b0:	d109      	bne.n	80335c6 <I2S_IRQHandler+0x3a>
 80335b2:	687b      	ldr	r3, [r7, #4]
 80335b4:	681b      	ldr	r3, [r3, #0]
 80335b6:	685b      	ldr	r3, [r3, #4]
 80335b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80335bc:	2b40      	cmp	r3, #64	; 0x40
 80335be:	d102      	bne.n	80335c6 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80335c0:	6878      	ldr	r0, [r7, #4]
 80335c2:	f7ff ffb4 	bl	803352e <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80335c6:	697b      	ldr	r3, [r7, #20]
 80335c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80335cc:	2b40      	cmp	r3, #64	; 0x40
 80335ce:	d126      	bne.n	803361e <I2S_IRQHandler+0x92>
 80335d0:	687b      	ldr	r3, [r7, #4]
 80335d2:	681b      	ldr	r3, [r3, #0]
 80335d4:	685b      	ldr	r3, [r3, #4]
 80335d6:	f003 0320 	and.w	r3, r3, #32
 80335da:	2b20      	cmp	r3, #32
 80335dc:	d11f      	bne.n	803361e <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80335de:	687b      	ldr	r3, [r7, #4]
 80335e0:	681b      	ldr	r3, [r3, #0]
 80335e2:	685a      	ldr	r2, [r3, #4]
 80335e4:	687b      	ldr	r3, [r7, #4]
 80335e6:	681b      	ldr	r3, [r3, #0]
 80335e8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80335ec:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80335ee:	2300      	movs	r3, #0
 80335f0:	613b      	str	r3, [r7, #16]
 80335f2:	687b      	ldr	r3, [r7, #4]
 80335f4:	681b      	ldr	r3, [r3, #0]
 80335f6:	68db      	ldr	r3, [r3, #12]
 80335f8:	613b      	str	r3, [r7, #16]
 80335fa:	687b      	ldr	r3, [r7, #4]
 80335fc:	681b      	ldr	r3, [r3, #0]
 80335fe:	689b      	ldr	r3, [r3, #8]
 8033600:	613b      	str	r3, [r7, #16]
 8033602:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8033604:	687b      	ldr	r3, [r7, #4]
 8033606:	2201      	movs	r2, #1
 8033608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 803360c:	687b      	ldr	r3, [r7, #4]
 803360e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8033610:	f043 0202 	orr.w	r2, r3, #2
 8033614:	687b      	ldr	r3, [r7, #4]
 8033616:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8033618:	6878      	ldr	r0, [r7, #4]
 803361a:	f7ff feed 	bl	80333f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 803361e:	687b      	ldr	r3, [r7, #4]
 8033620:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8033624:	b2db      	uxtb	r3, r3
 8033626:	2b03      	cmp	r3, #3
 8033628:	d136      	bne.n	8033698 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 803362a:	697b      	ldr	r3, [r7, #20]
 803362c:	f003 0302 	and.w	r3, r3, #2
 8033630:	2b02      	cmp	r3, #2
 8033632:	d109      	bne.n	8033648 <I2S_IRQHandler+0xbc>
 8033634:	687b      	ldr	r3, [r7, #4]
 8033636:	681b      	ldr	r3, [r3, #0]
 8033638:	685b      	ldr	r3, [r3, #4]
 803363a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 803363e:	2b80      	cmp	r3, #128	; 0x80
 8033640:	d102      	bne.n	8033648 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8033642:	6878      	ldr	r0, [r7, #4]
 8033644:	f7ff ff45 	bl	80334d2 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8033648:	697b      	ldr	r3, [r7, #20]
 803364a:	f003 0308 	and.w	r3, r3, #8
 803364e:	2b08      	cmp	r3, #8
 8033650:	d122      	bne.n	8033698 <I2S_IRQHandler+0x10c>
 8033652:	687b      	ldr	r3, [r7, #4]
 8033654:	681b      	ldr	r3, [r3, #0]
 8033656:	685b      	ldr	r3, [r3, #4]
 8033658:	f003 0320 	and.w	r3, r3, #32
 803365c:	2b20      	cmp	r3, #32
 803365e:	d11b      	bne.n	8033698 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8033660:	687b      	ldr	r3, [r7, #4]
 8033662:	681b      	ldr	r3, [r3, #0]
 8033664:	685a      	ldr	r2, [r3, #4]
 8033666:	687b      	ldr	r3, [r7, #4]
 8033668:	681b      	ldr	r3, [r3, #0]
 803366a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 803366e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8033670:	2300      	movs	r3, #0
 8033672:	60fb      	str	r3, [r7, #12]
 8033674:	687b      	ldr	r3, [r7, #4]
 8033676:	681b      	ldr	r3, [r3, #0]
 8033678:	689b      	ldr	r3, [r3, #8]
 803367a:	60fb      	str	r3, [r7, #12]
 803367c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 803367e:	687b      	ldr	r3, [r7, #4]
 8033680:	2201      	movs	r2, #1
 8033682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8033686:	687b      	ldr	r3, [r7, #4]
 8033688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 803368a:	f043 0204 	orr.w	r2, r3, #4
 803368e:	687b      	ldr	r3, [r7, #4]
 8033690:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8033692:	6878      	ldr	r0, [r7, #4]
 8033694:	f7ff feb0 	bl	80333f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8033698:	bf00      	nop
 803369a:	3718      	adds	r7, #24
 803369c:	46bd      	mov	sp, r7
 803369e:	bd80      	pop	{r7, pc}

080336a0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80336a0:	b580      	push	{r7, lr}
 80336a2:	b088      	sub	sp, #32
 80336a4:	af00      	add	r7, sp, #0
 80336a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80336a8:	687b      	ldr	r3, [r7, #4]
 80336aa:	681b      	ldr	r3, [r3, #0]
 80336ac:	689b      	ldr	r3, [r3, #8]
 80336ae:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80336b0:	687b      	ldr	r3, [r7, #4]
 80336b2:	681b      	ldr	r3, [r3, #0]
 80336b4:	4aa2      	ldr	r2, [pc, #648]	; (8033940 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80336b6:	4293      	cmp	r3, r2
 80336b8:	d101      	bne.n	80336be <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80336ba:	4ba2      	ldr	r3, [pc, #648]	; (8033944 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80336bc:	e001      	b.n	80336c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80336be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80336c2:	689b      	ldr	r3, [r3, #8]
 80336c4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80336c6:	687b      	ldr	r3, [r7, #4]
 80336c8:	681b      	ldr	r3, [r3, #0]
 80336ca:	685b      	ldr	r3, [r3, #4]
 80336cc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80336ce:	687b      	ldr	r3, [r7, #4]
 80336d0:	681b      	ldr	r3, [r3, #0]
 80336d2:	4a9b      	ldr	r2, [pc, #620]	; (8033940 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80336d4:	4293      	cmp	r3, r2
 80336d6:	d101      	bne.n	80336dc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80336d8:	4b9a      	ldr	r3, [pc, #616]	; (8033944 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80336da:	e001      	b.n	80336e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80336dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80336e0:	685b      	ldr	r3, [r3, #4]
 80336e2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80336e4:	687b      	ldr	r3, [r7, #4]
 80336e6:	685b      	ldr	r3, [r3, #4]
 80336e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80336ec:	d004      	beq.n	80336f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80336ee:	687b      	ldr	r3, [r7, #4]
 80336f0:	685b      	ldr	r3, [r3, #4]
 80336f2:	2b00      	cmp	r3, #0
 80336f4:	f040 8099 	bne.w	803382a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80336f8:	69fb      	ldr	r3, [r7, #28]
 80336fa:	f003 0302 	and.w	r3, r3, #2
 80336fe:	2b02      	cmp	r3, #2
 8033700:	d107      	bne.n	8033712 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8033702:	697b      	ldr	r3, [r7, #20]
 8033704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8033708:	2b00      	cmp	r3, #0
 803370a:	d002      	beq.n	8033712 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 803370c:	6878      	ldr	r0, [r7, #4]
 803370e:	f000 f925 	bl	803395c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8033712:	69bb      	ldr	r3, [r7, #24]
 8033714:	f003 0301 	and.w	r3, r3, #1
 8033718:	2b01      	cmp	r3, #1
 803371a:	d107      	bne.n	803372c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 803371c:	693b      	ldr	r3, [r7, #16]
 803371e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8033722:	2b00      	cmp	r3, #0
 8033724:	d002      	beq.n	803372c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8033726:	6878      	ldr	r0, [r7, #4]
 8033728:	f000 f9c8 	bl	8033abc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 803372c:	69bb      	ldr	r3, [r7, #24]
 803372e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8033732:	2b40      	cmp	r3, #64	; 0x40
 8033734:	d13a      	bne.n	80337ac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8033736:	693b      	ldr	r3, [r7, #16]
 8033738:	f003 0320 	and.w	r3, r3, #32
 803373c:	2b00      	cmp	r3, #0
 803373e:	d035      	beq.n	80337ac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8033740:	687b      	ldr	r3, [r7, #4]
 8033742:	681b      	ldr	r3, [r3, #0]
 8033744:	4a7e      	ldr	r2, [pc, #504]	; (8033940 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8033746:	4293      	cmp	r3, r2
 8033748:	d101      	bne.n	803374e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 803374a:	4b7e      	ldr	r3, [pc, #504]	; (8033944 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 803374c:	e001      	b.n	8033752 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 803374e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8033752:	685a      	ldr	r2, [r3, #4]
 8033754:	687b      	ldr	r3, [r7, #4]
 8033756:	681b      	ldr	r3, [r3, #0]
 8033758:	4979      	ldr	r1, [pc, #484]	; (8033940 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 803375a:	428b      	cmp	r3, r1
 803375c:	d101      	bne.n	8033762 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 803375e:	4b79      	ldr	r3, [pc, #484]	; (8033944 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8033760:	e001      	b.n	8033766 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8033762:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8033766:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 803376a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 803376c:	687b      	ldr	r3, [r7, #4]
 803376e:	681b      	ldr	r3, [r3, #0]
 8033770:	685a      	ldr	r2, [r3, #4]
 8033772:	687b      	ldr	r3, [r7, #4]
 8033774:	681b      	ldr	r3, [r3, #0]
 8033776:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 803377a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 803377c:	2300      	movs	r3, #0
 803377e:	60fb      	str	r3, [r7, #12]
 8033780:	687b      	ldr	r3, [r7, #4]
 8033782:	681b      	ldr	r3, [r3, #0]
 8033784:	68db      	ldr	r3, [r3, #12]
 8033786:	60fb      	str	r3, [r7, #12]
 8033788:	687b      	ldr	r3, [r7, #4]
 803378a:	681b      	ldr	r3, [r3, #0]
 803378c:	689b      	ldr	r3, [r3, #8]
 803378e:	60fb      	str	r3, [r7, #12]
 8033790:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8033792:	687b      	ldr	r3, [r7, #4]
 8033794:	2201      	movs	r2, #1
 8033796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 803379a:	687b      	ldr	r3, [r7, #4]
 803379c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 803379e:	f043 0202 	orr.w	r2, r3, #2
 80337a2:	687b      	ldr	r3, [r7, #4]
 80337a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80337a6:	6878      	ldr	r0, [r7, #4]
 80337a8:	f7ff fe26 	bl	80333f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80337ac:	69fb      	ldr	r3, [r7, #28]
 80337ae:	f003 0308 	and.w	r3, r3, #8
 80337b2:	2b08      	cmp	r3, #8
 80337b4:	f040 80be 	bne.w	8033934 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80337b8:	697b      	ldr	r3, [r7, #20]
 80337ba:	f003 0320 	and.w	r3, r3, #32
 80337be:	2b00      	cmp	r3, #0
 80337c0:	f000 80b8 	beq.w	8033934 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80337c4:	687b      	ldr	r3, [r7, #4]
 80337c6:	681b      	ldr	r3, [r3, #0]
 80337c8:	685a      	ldr	r2, [r3, #4]
 80337ca:	687b      	ldr	r3, [r7, #4]
 80337cc:	681b      	ldr	r3, [r3, #0]
 80337ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80337d2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80337d4:	687b      	ldr	r3, [r7, #4]
 80337d6:	681b      	ldr	r3, [r3, #0]
 80337d8:	4a59      	ldr	r2, [pc, #356]	; (8033940 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80337da:	4293      	cmp	r3, r2
 80337dc:	d101      	bne.n	80337e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80337de:	4b59      	ldr	r3, [pc, #356]	; (8033944 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80337e0:	e001      	b.n	80337e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80337e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80337e6:	685a      	ldr	r2, [r3, #4]
 80337e8:	687b      	ldr	r3, [r7, #4]
 80337ea:	681b      	ldr	r3, [r3, #0]
 80337ec:	4954      	ldr	r1, [pc, #336]	; (8033940 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80337ee:	428b      	cmp	r3, r1
 80337f0:	d101      	bne.n	80337f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80337f2:	4b54      	ldr	r3, [pc, #336]	; (8033944 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80337f4:	e001      	b.n	80337fa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80337f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80337fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80337fe:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8033800:	2300      	movs	r3, #0
 8033802:	60bb      	str	r3, [r7, #8]
 8033804:	687b      	ldr	r3, [r7, #4]
 8033806:	681b      	ldr	r3, [r3, #0]
 8033808:	689b      	ldr	r3, [r3, #8]
 803380a:	60bb      	str	r3, [r7, #8]
 803380c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 803380e:	687b      	ldr	r3, [r7, #4]
 8033810:	2201      	movs	r2, #1
 8033812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8033816:	687b      	ldr	r3, [r7, #4]
 8033818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 803381a:	f043 0204 	orr.w	r2, r3, #4
 803381e:	687b      	ldr	r3, [r7, #4]
 8033820:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8033822:	6878      	ldr	r0, [r7, #4]
 8033824:	f7ff fde8 	bl	80333f8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8033828:	e084      	b.n	8033934 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 803382a:	69bb      	ldr	r3, [r7, #24]
 803382c:	f003 0302 	and.w	r3, r3, #2
 8033830:	2b02      	cmp	r3, #2
 8033832:	d107      	bne.n	8033844 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8033834:	693b      	ldr	r3, [r7, #16]
 8033836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 803383a:	2b00      	cmp	r3, #0
 803383c:	d002      	beq.n	8033844 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 803383e:	6878      	ldr	r0, [r7, #4]
 8033840:	f000 f8be 	bl	80339c0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8033844:	69fb      	ldr	r3, [r7, #28]
 8033846:	f003 0301 	and.w	r3, r3, #1
 803384a:	2b01      	cmp	r3, #1
 803384c:	d107      	bne.n	803385e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 803384e:	697b      	ldr	r3, [r7, #20]
 8033850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8033854:	2b00      	cmp	r3, #0
 8033856:	d002      	beq.n	803385e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8033858:	6878      	ldr	r0, [r7, #4]
 803385a:	f000 f8fd 	bl	8033a58 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 803385e:	69fb      	ldr	r3, [r7, #28]
 8033860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8033864:	2b40      	cmp	r3, #64	; 0x40
 8033866:	d12f      	bne.n	80338c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8033868:	697b      	ldr	r3, [r7, #20]
 803386a:	f003 0320 	and.w	r3, r3, #32
 803386e:	2b00      	cmp	r3, #0
 8033870:	d02a      	beq.n	80338c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8033872:	687b      	ldr	r3, [r7, #4]
 8033874:	681b      	ldr	r3, [r3, #0]
 8033876:	685a      	ldr	r2, [r3, #4]
 8033878:	687b      	ldr	r3, [r7, #4]
 803387a:	681b      	ldr	r3, [r3, #0]
 803387c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8033880:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8033882:	687b      	ldr	r3, [r7, #4]
 8033884:	681b      	ldr	r3, [r3, #0]
 8033886:	4a2e      	ldr	r2, [pc, #184]	; (8033940 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8033888:	4293      	cmp	r3, r2
 803388a:	d101      	bne.n	8033890 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 803388c:	4b2d      	ldr	r3, [pc, #180]	; (8033944 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 803388e:	e001      	b.n	8033894 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8033890:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8033894:	685a      	ldr	r2, [r3, #4]
 8033896:	687b      	ldr	r3, [r7, #4]
 8033898:	681b      	ldr	r3, [r3, #0]
 803389a:	4929      	ldr	r1, [pc, #164]	; (8033940 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 803389c:	428b      	cmp	r3, r1
 803389e:	d101      	bne.n	80338a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80338a0:	4b28      	ldr	r3, [pc, #160]	; (8033944 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80338a2:	e001      	b.n	80338a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80338a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80338a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80338ac:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80338ae:	687b      	ldr	r3, [r7, #4]
 80338b0:	2201      	movs	r2, #1
 80338b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80338b6:	687b      	ldr	r3, [r7, #4]
 80338b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80338ba:	f043 0202 	orr.w	r2, r3, #2
 80338be:	687b      	ldr	r3, [r7, #4]
 80338c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80338c2:	6878      	ldr	r0, [r7, #4]
 80338c4:	f7ff fd98 	bl	80333f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80338c8:	69bb      	ldr	r3, [r7, #24]
 80338ca:	f003 0308 	and.w	r3, r3, #8
 80338ce:	2b08      	cmp	r3, #8
 80338d0:	d131      	bne.n	8033936 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80338d2:	693b      	ldr	r3, [r7, #16]
 80338d4:	f003 0320 	and.w	r3, r3, #32
 80338d8:	2b00      	cmp	r3, #0
 80338da:	d02c      	beq.n	8033936 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80338dc:	687b      	ldr	r3, [r7, #4]
 80338de:	681b      	ldr	r3, [r3, #0]
 80338e0:	4a17      	ldr	r2, [pc, #92]	; (8033940 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80338e2:	4293      	cmp	r3, r2
 80338e4:	d101      	bne.n	80338ea <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80338e6:	4b17      	ldr	r3, [pc, #92]	; (8033944 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80338e8:	e001      	b.n	80338ee <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80338ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80338ee:	685a      	ldr	r2, [r3, #4]
 80338f0:	687b      	ldr	r3, [r7, #4]
 80338f2:	681b      	ldr	r3, [r3, #0]
 80338f4:	4912      	ldr	r1, [pc, #72]	; (8033940 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80338f6:	428b      	cmp	r3, r1
 80338f8:	d101      	bne.n	80338fe <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80338fa:	4b12      	ldr	r3, [pc, #72]	; (8033944 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80338fc:	e001      	b.n	8033902 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80338fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8033902:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8033906:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8033908:	687b      	ldr	r3, [r7, #4]
 803390a:	681b      	ldr	r3, [r3, #0]
 803390c:	685a      	ldr	r2, [r3, #4]
 803390e:	687b      	ldr	r3, [r7, #4]
 8033910:	681b      	ldr	r3, [r3, #0]
 8033912:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8033916:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8033918:	687b      	ldr	r3, [r7, #4]
 803391a:	2201      	movs	r2, #1
 803391c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8033920:	687b      	ldr	r3, [r7, #4]
 8033922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8033924:	f043 0204 	orr.w	r2, r3, #4
 8033928:	687b      	ldr	r3, [r7, #4]
 803392a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 803392c:	6878      	ldr	r0, [r7, #4]
 803392e:	f7ff fd63 	bl	80333f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8033932:	e000      	b.n	8033936 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8033934:	bf00      	nop
}
 8033936:	bf00      	nop
 8033938:	3720      	adds	r7, #32
 803393a:	46bd      	mov	sp, r7
 803393c:	bd80      	pop	{r7, pc}
 803393e:	bf00      	nop
 8033940:	40003800 	.word	0x40003800
 8033944:	40003400 	.word	0x40003400

08033948 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8033948:	b480      	push	{r7}
 803394a:	b083      	sub	sp, #12
 803394c:	af00      	add	r7, sp, #0
 803394e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8033950:	bf00      	nop
 8033952:	370c      	adds	r7, #12
 8033954:	46bd      	mov	sp, r7
 8033956:	f85d 7b04 	ldr.w	r7, [sp], #4
 803395a:	4770      	bx	lr

0803395c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 803395c:	b580      	push	{r7, lr}
 803395e:	b082      	sub	sp, #8
 8033960:	af00      	add	r7, sp, #0
 8033962:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8033964:	687b      	ldr	r3, [r7, #4]
 8033966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8033968:	1c99      	adds	r1, r3, #2
 803396a:	687a      	ldr	r2, [r7, #4]
 803396c:	6251      	str	r1, [r2, #36]	; 0x24
 803396e:	881a      	ldrh	r2, [r3, #0]
 8033970:	687b      	ldr	r3, [r7, #4]
 8033972:	681b      	ldr	r3, [r3, #0]
 8033974:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8033976:	687b      	ldr	r3, [r7, #4]
 8033978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 803397a:	b29b      	uxth	r3, r3
 803397c:	3b01      	subs	r3, #1
 803397e:	b29a      	uxth	r2, r3
 8033980:	687b      	ldr	r3, [r7, #4]
 8033982:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8033984:	687b      	ldr	r3, [r7, #4]
 8033986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8033988:	b29b      	uxth	r3, r3
 803398a:	2b00      	cmp	r3, #0
 803398c:	d113      	bne.n	80339b6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 803398e:	687b      	ldr	r3, [r7, #4]
 8033990:	681b      	ldr	r3, [r3, #0]
 8033992:	685a      	ldr	r2, [r3, #4]
 8033994:	687b      	ldr	r3, [r7, #4]
 8033996:	681b      	ldr	r3, [r3, #0]
 8033998:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 803399c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 803399e:	687b      	ldr	r3, [r7, #4]
 80339a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80339a2:	b29b      	uxth	r3, r3
 80339a4:	2b00      	cmp	r3, #0
 80339a6:	d106      	bne.n	80339b6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80339a8:	687b      	ldr	r3, [r7, #4]
 80339aa:	2201      	movs	r2, #1
 80339ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80339b0:	6878      	ldr	r0, [r7, #4]
 80339b2:	f7ff ffc9 	bl	8033948 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80339b6:	bf00      	nop
 80339b8:	3708      	adds	r7, #8
 80339ba:	46bd      	mov	sp, r7
 80339bc:	bd80      	pop	{r7, pc}
	...

080339c0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80339c0:	b580      	push	{r7, lr}
 80339c2:	b082      	sub	sp, #8
 80339c4:	af00      	add	r7, sp, #0
 80339c6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80339c8:	687b      	ldr	r3, [r7, #4]
 80339ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80339cc:	1c99      	adds	r1, r3, #2
 80339ce:	687a      	ldr	r2, [r7, #4]
 80339d0:	6251      	str	r1, [r2, #36]	; 0x24
 80339d2:	8819      	ldrh	r1, [r3, #0]
 80339d4:	687b      	ldr	r3, [r7, #4]
 80339d6:	681b      	ldr	r3, [r3, #0]
 80339d8:	4a1d      	ldr	r2, [pc, #116]	; (8033a50 <I2SEx_TxISR_I2SExt+0x90>)
 80339da:	4293      	cmp	r3, r2
 80339dc:	d101      	bne.n	80339e2 <I2SEx_TxISR_I2SExt+0x22>
 80339de:	4b1d      	ldr	r3, [pc, #116]	; (8033a54 <I2SEx_TxISR_I2SExt+0x94>)
 80339e0:	e001      	b.n	80339e6 <I2SEx_TxISR_I2SExt+0x26>
 80339e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80339e6:	460a      	mov	r2, r1
 80339e8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80339ea:	687b      	ldr	r3, [r7, #4]
 80339ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80339ee:	b29b      	uxth	r3, r3
 80339f0:	3b01      	subs	r3, #1
 80339f2:	b29a      	uxth	r2, r3
 80339f4:	687b      	ldr	r3, [r7, #4]
 80339f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80339f8:	687b      	ldr	r3, [r7, #4]
 80339fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80339fc:	b29b      	uxth	r3, r3
 80339fe:	2b00      	cmp	r3, #0
 8033a00:	d121      	bne.n	8033a46 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8033a02:	687b      	ldr	r3, [r7, #4]
 8033a04:	681b      	ldr	r3, [r3, #0]
 8033a06:	4a12      	ldr	r2, [pc, #72]	; (8033a50 <I2SEx_TxISR_I2SExt+0x90>)
 8033a08:	4293      	cmp	r3, r2
 8033a0a:	d101      	bne.n	8033a10 <I2SEx_TxISR_I2SExt+0x50>
 8033a0c:	4b11      	ldr	r3, [pc, #68]	; (8033a54 <I2SEx_TxISR_I2SExt+0x94>)
 8033a0e:	e001      	b.n	8033a14 <I2SEx_TxISR_I2SExt+0x54>
 8033a10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8033a14:	685a      	ldr	r2, [r3, #4]
 8033a16:	687b      	ldr	r3, [r7, #4]
 8033a18:	681b      	ldr	r3, [r3, #0]
 8033a1a:	490d      	ldr	r1, [pc, #52]	; (8033a50 <I2SEx_TxISR_I2SExt+0x90>)
 8033a1c:	428b      	cmp	r3, r1
 8033a1e:	d101      	bne.n	8033a24 <I2SEx_TxISR_I2SExt+0x64>
 8033a20:	4b0c      	ldr	r3, [pc, #48]	; (8033a54 <I2SEx_TxISR_I2SExt+0x94>)
 8033a22:	e001      	b.n	8033a28 <I2SEx_TxISR_I2SExt+0x68>
 8033a24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8033a28:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8033a2c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8033a2e:	687b      	ldr	r3, [r7, #4]
 8033a30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8033a32:	b29b      	uxth	r3, r3
 8033a34:	2b00      	cmp	r3, #0
 8033a36:	d106      	bne.n	8033a46 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8033a38:	687b      	ldr	r3, [r7, #4]
 8033a3a:	2201      	movs	r2, #1
 8033a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8033a40:	6878      	ldr	r0, [r7, #4]
 8033a42:	f7ff ff81 	bl	8033948 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8033a46:	bf00      	nop
 8033a48:	3708      	adds	r7, #8
 8033a4a:	46bd      	mov	sp, r7
 8033a4c:	bd80      	pop	{r7, pc}
 8033a4e:	bf00      	nop
 8033a50:	40003800 	.word	0x40003800
 8033a54:	40003400 	.word	0x40003400

08033a58 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8033a58:	b580      	push	{r7, lr}
 8033a5a:	b082      	sub	sp, #8
 8033a5c:	af00      	add	r7, sp, #0
 8033a5e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8033a60:	687b      	ldr	r3, [r7, #4]
 8033a62:	681b      	ldr	r3, [r3, #0]
 8033a64:	68d8      	ldr	r0, [r3, #12]
 8033a66:	687b      	ldr	r3, [r7, #4]
 8033a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8033a6a:	1c99      	adds	r1, r3, #2
 8033a6c:	687a      	ldr	r2, [r7, #4]
 8033a6e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8033a70:	b282      	uxth	r2, r0
 8033a72:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8033a74:	687b      	ldr	r3, [r7, #4]
 8033a76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8033a78:	b29b      	uxth	r3, r3
 8033a7a:	3b01      	subs	r3, #1
 8033a7c:	b29a      	uxth	r2, r3
 8033a7e:	687b      	ldr	r3, [r7, #4]
 8033a80:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8033a82:	687b      	ldr	r3, [r7, #4]
 8033a84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8033a86:	b29b      	uxth	r3, r3
 8033a88:	2b00      	cmp	r3, #0
 8033a8a:	d113      	bne.n	8033ab4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8033a8c:	687b      	ldr	r3, [r7, #4]
 8033a8e:	681b      	ldr	r3, [r3, #0]
 8033a90:	685a      	ldr	r2, [r3, #4]
 8033a92:	687b      	ldr	r3, [r7, #4]
 8033a94:	681b      	ldr	r3, [r3, #0]
 8033a96:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8033a9a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8033a9c:	687b      	ldr	r3, [r7, #4]
 8033a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8033aa0:	b29b      	uxth	r3, r3
 8033aa2:	2b00      	cmp	r3, #0
 8033aa4:	d106      	bne.n	8033ab4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8033aa6:	687b      	ldr	r3, [r7, #4]
 8033aa8:	2201      	movs	r2, #1
 8033aaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8033aae:	6878      	ldr	r0, [r7, #4]
 8033ab0:	f7ff ff4a 	bl	8033948 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8033ab4:	bf00      	nop
 8033ab6:	3708      	adds	r7, #8
 8033ab8:	46bd      	mov	sp, r7
 8033aba:	bd80      	pop	{r7, pc}

08033abc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8033abc:	b580      	push	{r7, lr}
 8033abe:	b082      	sub	sp, #8
 8033ac0:	af00      	add	r7, sp, #0
 8033ac2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8033ac4:	687b      	ldr	r3, [r7, #4]
 8033ac6:	681b      	ldr	r3, [r3, #0]
 8033ac8:	4a20      	ldr	r2, [pc, #128]	; (8033b4c <I2SEx_RxISR_I2SExt+0x90>)
 8033aca:	4293      	cmp	r3, r2
 8033acc:	d101      	bne.n	8033ad2 <I2SEx_RxISR_I2SExt+0x16>
 8033ace:	4b20      	ldr	r3, [pc, #128]	; (8033b50 <I2SEx_RxISR_I2SExt+0x94>)
 8033ad0:	e001      	b.n	8033ad6 <I2SEx_RxISR_I2SExt+0x1a>
 8033ad2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8033ad6:	68d8      	ldr	r0, [r3, #12]
 8033ad8:	687b      	ldr	r3, [r7, #4]
 8033ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8033adc:	1c99      	adds	r1, r3, #2
 8033ade:	687a      	ldr	r2, [r7, #4]
 8033ae0:	62d1      	str	r1, [r2, #44]	; 0x2c
 8033ae2:	b282      	uxth	r2, r0
 8033ae4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8033ae6:	687b      	ldr	r3, [r7, #4]
 8033ae8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8033aea:	b29b      	uxth	r3, r3
 8033aec:	3b01      	subs	r3, #1
 8033aee:	b29a      	uxth	r2, r3
 8033af0:	687b      	ldr	r3, [r7, #4]
 8033af2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8033af4:	687b      	ldr	r3, [r7, #4]
 8033af6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8033af8:	b29b      	uxth	r3, r3
 8033afa:	2b00      	cmp	r3, #0
 8033afc:	d121      	bne.n	8033b42 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8033afe:	687b      	ldr	r3, [r7, #4]
 8033b00:	681b      	ldr	r3, [r3, #0]
 8033b02:	4a12      	ldr	r2, [pc, #72]	; (8033b4c <I2SEx_RxISR_I2SExt+0x90>)
 8033b04:	4293      	cmp	r3, r2
 8033b06:	d101      	bne.n	8033b0c <I2SEx_RxISR_I2SExt+0x50>
 8033b08:	4b11      	ldr	r3, [pc, #68]	; (8033b50 <I2SEx_RxISR_I2SExt+0x94>)
 8033b0a:	e001      	b.n	8033b10 <I2SEx_RxISR_I2SExt+0x54>
 8033b0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8033b10:	685a      	ldr	r2, [r3, #4]
 8033b12:	687b      	ldr	r3, [r7, #4]
 8033b14:	681b      	ldr	r3, [r3, #0]
 8033b16:	490d      	ldr	r1, [pc, #52]	; (8033b4c <I2SEx_RxISR_I2SExt+0x90>)
 8033b18:	428b      	cmp	r3, r1
 8033b1a:	d101      	bne.n	8033b20 <I2SEx_RxISR_I2SExt+0x64>
 8033b1c:	4b0c      	ldr	r3, [pc, #48]	; (8033b50 <I2SEx_RxISR_I2SExt+0x94>)
 8033b1e:	e001      	b.n	8033b24 <I2SEx_RxISR_I2SExt+0x68>
 8033b20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8033b24:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8033b28:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8033b2a:	687b      	ldr	r3, [r7, #4]
 8033b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8033b2e:	b29b      	uxth	r3, r3
 8033b30:	2b00      	cmp	r3, #0
 8033b32:	d106      	bne.n	8033b42 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8033b34:	687b      	ldr	r3, [r7, #4]
 8033b36:	2201      	movs	r2, #1
 8033b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8033b3c:	6878      	ldr	r0, [r7, #4]
 8033b3e:	f7ff ff03 	bl	8033948 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8033b42:	bf00      	nop
 8033b44:	3708      	adds	r7, #8
 8033b46:	46bd      	mov	sp, r7
 8033b48:	bd80      	pop	{r7, pc}
 8033b4a:	bf00      	nop
 8033b4c:	40003800 	.word	0x40003800
 8033b50:	40003400 	.word	0x40003400

08033b54 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8033b54:	b580      	push	{r7, lr}
 8033b56:	b084      	sub	sp, #16
 8033b58:	af00      	add	r7, sp, #0
 8033b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8033b5c:	687b      	ldr	r3, [r7, #4]
 8033b5e:	2b00      	cmp	r3, #0
 8033b60:	d101      	bne.n	8033b66 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8033b62:	2301      	movs	r3, #1
 8033b64:	e02b      	b.n	8033bbe <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8033b66:	687b      	ldr	r3, [r7, #4]
 8033b68:	681b      	ldr	r3, [r3, #0]
 8033b6a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8033b6e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8033b70:	687b      	ldr	r3, [r7, #4]
 8033b72:	681b      	ldr	r3, [r3, #0]
 8033b74:	f245 5255 	movw	r2, #21845	; 0x5555
 8033b78:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8033b7a:	687b      	ldr	r3, [r7, #4]
 8033b7c:	681b      	ldr	r3, [r3, #0]
 8033b7e:	687a      	ldr	r2, [r7, #4]
 8033b80:	6852      	ldr	r2, [r2, #4]
 8033b82:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8033b84:	687b      	ldr	r3, [r7, #4]
 8033b86:	681b      	ldr	r3, [r3, #0]
 8033b88:	687a      	ldr	r2, [r7, #4]
 8033b8a:	6892      	ldr	r2, [r2, #8]
 8033b8c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8033b8e:	f7f8 fbed 	bl	802c36c <HAL_GetTick>
 8033b92:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8033b94:	e008      	b.n	8033ba8 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8033b96:	f7f8 fbe9 	bl	802c36c <HAL_GetTick>
 8033b9a:	4602      	mov	r2, r0
 8033b9c:	68fb      	ldr	r3, [r7, #12]
 8033b9e:	1ad3      	subs	r3, r2, r3
 8033ba0:	2b30      	cmp	r3, #48	; 0x30
 8033ba2:	d901      	bls.n	8033ba8 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8033ba4:	2303      	movs	r3, #3
 8033ba6:	e00a      	b.n	8033bbe <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
 8033ba8:	687b      	ldr	r3, [r7, #4]
 8033baa:	681b      	ldr	r3, [r3, #0]
 8033bac:	68db      	ldr	r3, [r3, #12]
 8033bae:	2b00      	cmp	r3, #0
 8033bb0:	d1f1      	bne.n	8033b96 <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8033bb2:	687b      	ldr	r3, [r7, #4]
 8033bb4:	681b      	ldr	r3, [r3, #0]
 8033bb6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8033bba:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8033bbc:	2300      	movs	r3, #0
}
 8033bbe:	4618      	mov	r0, r3
 8033bc0:	3710      	adds	r7, #16
 8033bc2:	46bd      	mov	sp, r7
 8033bc4:	bd80      	pop	{r7, pc}

08033bc6 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8033bc6:	b480      	push	{r7}
 8033bc8:	b083      	sub	sp, #12
 8033bca:	af00      	add	r7, sp, #0
 8033bcc:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8033bce:	687b      	ldr	r3, [r7, #4]
 8033bd0:	681b      	ldr	r3, [r3, #0]
 8033bd2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8033bd6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8033bd8:	2300      	movs	r3, #0
}
 8033bda:	4618      	mov	r0, r3
 8033bdc:	370c      	adds	r7, #12
 8033bde:	46bd      	mov	sp, r7
 8033be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033be4:	4770      	bx	lr
	...

08033be8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8033be8:	b580      	push	{r7, lr}
 8033bea:	b084      	sub	sp, #16
 8033bec:	af00      	add	r7, sp, #0
 8033bee:	6078      	str	r0, [r7, #4]
 8033bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8033bf2:	687b      	ldr	r3, [r7, #4]
 8033bf4:	2b00      	cmp	r3, #0
 8033bf6:	d101      	bne.n	8033bfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8033bf8:	2301      	movs	r3, #1
 8033bfa:	e0cc      	b.n	8033d96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8033bfc:	4b68      	ldr	r3, [pc, #416]	; (8033da0 <HAL_RCC_ClockConfig+0x1b8>)
 8033bfe:	681b      	ldr	r3, [r3, #0]
 8033c00:	f003 030f 	and.w	r3, r3, #15
 8033c04:	683a      	ldr	r2, [r7, #0]
 8033c06:	429a      	cmp	r2, r3
 8033c08:	d90c      	bls.n	8033c24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8033c0a:	4b65      	ldr	r3, [pc, #404]	; (8033da0 <HAL_RCC_ClockConfig+0x1b8>)
 8033c0c:	683a      	ldr	r2, [r7, #0]
 8033c0e:	b2d2      	uxtb	r2, r2
 8033c10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8033c12:	4b63      	ldr	r3, [pc, #396]	; (8033da0 <HAL_RCC_ClockConfig+0x1b8>)
 8033c14:	681b      	ldr	r3, [r3, #0]
 8033c16:	f003 030f 	and.w	r3, r3, #15
 8033c1a:	683a      	ldr	r2, [r7, #0]
 8033c1c:	429a      	cmp	r2, r3
 8033c1e:	d001      	beq.n	8033c24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8033c20:	2301      	movs	r3, #1
 8033c22:	e0b8      	b.n	8033d96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8033c24:	687b      	ldr	r3, [r7, #4]
 8033c26:	681b      	ldr	r3, [r3, #0]
 8033c28:	f003 0302 	and.w	r3, r3, #2
 8033c2c:	2b00      	cmp	r3, #0
 8033c2e:	d020      	beq.n	8033c72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8033c30:	687b      	ldr	r3, [r7, #4]
 8033c32:	681b      	ldr	r3, [r3, #0]
 8033c34:	f003 0304 	and.w	r3, r3, #4
 8033c38:	2b00      	cmp	r3, #0
 8033c3a:	d005      	beq.n	8033c48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8033c3c:	4b59      	ldr	r3, [pc, #356]	; (8033da4 <HAL_RCC_ClockConfig+0x1bc>)
 8033c3e:	689b      	ldr	r3, [r3, #8]
 8033c40:	4a58      	ldr	r2, [pc, #352]	; (8033da4 <HAL_RCC_ClockConfig+0x1bc>)
 8033c42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8033c46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8033c48:	687b      	ldr	r3, [r7, #4]
 8033c4a:	681b      	ldr	r3, [r3, #0]
 8033c4c:	f003 0308 	and.w	r3, r3, #8
 8033c50:	2b00      	cmp	r3, #0
 8033c52:	d005      	beq.n	8033c60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8033c54:	4b53      	ldr	r3, [pc, #332]	; (8033da4 <HAL_RCC_ClockConfig+0x1bc>)
 8033c56:	689b      	ldr	r3, [r3, #8]
 8033c58:	4a52      	ldr	r2, [pc, #328]	; (8033da4 <HAL_RCC_ClockConfig+0x1bc>)
 8033c5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8033c5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8033c60:	4b50      	ldr	r3, [pc, #320]	; (8033da4 <HAL_RCC_ClockConfig+0x1bc>)
 8033c62:	689b      	ldr	r3, [r3, #8]
 8033c64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8033c68:	687b      	ldr	r3, [r7, #4]
 8033c6a:	689b      	ldr	r3, [r3, #8]
 8033c6c:	494d      	ldr	r1, [pc, #308]	; (8033da4 <HAL_RCC_ClockConfig+0x1bc>)
 8033c6e:	4313      	orrs	r3, r2
 8033c70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8033c72:	687b      	ldr	r3, [r7, #4]
 8033c74:	681b      	ldr	r3, [r3, #0]
 8033c76:	f003 0301 	and.w	r3, r3, #1
 8033c7a:	2b00      	cmp	r3, #0
 8033c7c:	d044      	beq.n	8033d08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8033c7e:	687b      	ldr	r3, [r7, #4]
 8033c80:	685b      	ldr	r3, [r3, #4]
 8033c82:	2b01      	cmp	r3, #1
 8033c84:	d107      	bne.n	8033c96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8033c86:	4b47      	ldr	r3, [pc, #284]	; (8033da4 <HAL_RCC_ClockConfig+0x1bc>)
 8033c88:	681b      	ldr	r3, [r3, #0]
 8033c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8033c8e:	2b00      	cmp	r3, #0
 8033c90:	d119      	bne.n	8033cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8033c92:	2301      	movs	r3, #1
 8033c94:	e07f      	b.n	8033d96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8033c96:	687b      	ldr	r3, [r7, #4]
 8033c98:	685b      	ldr	r3, [r3, #4]
 8033c9a:	2b02      	cmp	r3, #2
 8033c9c:	d003      	beq.n	8033ca6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8033c9e:	687b      	ldr	r3, [r7, #4]
 8033ca0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8033ca2:	2b03      	cmp	r3, #3
 8033ca4:	d107      	bne.n	8033cb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8033ca6:	4b3f      	ldr	r3, [pc, #252]	; (8033da4 <HAL_RCC_ClockConfig+0x1bc>)
 8033ca8:	681b      	ldr	r3, [r3, #0]
 8033caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8033cae:	2b00      	cmp	r3, #0
 8033cb0:	d109      	bne.n	8033cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8033cb2:	2301      	movs	r3, #1
 8033cb4:	e06f      	b.n	8033d96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8033cb6:	4b3b      	ldr	r3, [pc, #236]	; (8033da4 <HAL_RCC_ClockConfig+0x1bc>)
 8033cb8:	681b      	ldr	r3, [r3, #0]
 8033cba:	f003 0302 	and.w	r3, r3, #2
 8033cbe:	2b00      	cmp	r3, #0
 8033cc0:	d101      	bne.n	8033cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8033cc2:	2301      	movs	r3, #1
 8033cc4:	e067      	b.n	8033d96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8033cc6:	4b37      	ldr	r3, [pc, #220]	; (8033da4 <HAL_RCC_ClockConfig+0x1bc>)
 8033cc8:	689b      	ldr	r3, [r3, #8]
 8033cca:	f023 0203 	bic.w	r2, r3, #3
 8033cce:	687b      	ldr	r3, [r7, #4]
 8033cd0:	685b      	ldr	r3, [r3, #4]
 8033cd2:	4934      	ldr	r1, [pc, #208]	; (8033da4 <HAL_RCC_ClockConfig+0x1bc>)
 8033cd4:	4313      	orrs	r3, r2
 8033cd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8033cd8:	f7f8 fb48 	bl	802c36c <HAL_GetTick>
 8033cdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8033cde:	e00a      	b.n	8033cf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8033ce0:	f7f8 fb44 	bl	802c36c <HAL_GetTick>
 8033ce4:	4602      	mov	r2, r0
 8033ce6:	68fb      	ldr	r3, [r7, #12]
 8033ce8:	1ad3      	subs	r3, r2, r3
 8033cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8033cee:	4293      	cmp	r3, r2
 8033cf0:	d901      	bls.n	8033cf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8033cf2:	2303      	movs	r3, #3
 8033cf4:	e04f      	b.n	8033d96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8033cf6:	4b2b      	ldr	r3, [pc, #172]	; (8033da4 <HAL_RCC_ClockConfig+0x1bc>)
 8033cf8:	689b      	ldr	r3, [r3, #8]
 8033cfa:	f003 020c 	and.w	r2, r3, #12
 8033cfe:	687b      	ldr	r3, [r7, #4]
 8033d00:	685b      	ldr	r3, [r3, #4]
 8033d02:	009b      	lsls	r3, r3, #2
 8033d04:	429a      	cmp	r2, r3
 8033d06:	d1eb      	bne.n	8033ce0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8033d08:	4b25      	ldr	r3, [pc, #148]	; (8033da0 <HAL_RCC_ClockConfig+0x1b8>)
 8033d0a:	681b      	ldr	r3, [r3, #0]
 8033d0c:	f003 030f 	and.w	r3, r3, #15
 8033d10:	683a      	ldr	r2, [r7, #0]
 8033d12:	429a      	cmp	r2, r3
 8033d14:	d20c      	bcs.n	8033d30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8033d16:	4b22      	ldr	r3, [pc, #136]	; (8033da0 <HAL_RCC_ClockConfig+0x1b8>)
 8033d18:	683a      	ldr	r2, [r7, #0]
 8033d1a:	b2d2      	uxtb	r2, r2
 8033d1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8033d1e:	4b20      	ldr	r3, [pc, #128]	; (8033da0 <HAL_RCC_ClockConfig+0x1b8>)
 8033d20:	681b      	ldr	r3, [r3, #0]
 8033d22:	f003 030f 	and.w	r3, r3, #15
 8033d26:	683a      	ldr	r2, [r7, #0]
 8033d28:	429a      	cmp	r2, r3
 8033d2a:	d001      	beq.n	8033d30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8033d2c:	2301      	movs	r3, #1
 8033d2e:	e032      	b.n	8033d96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8033d30:	687b      	ldr	r3, [r7, #4]
 8033d32:	681b      	ldr	r3, [r3, #0]
 8033d34:	f003 0304 	and.w	r3, r3, #4
 8033d38:	2b00      	cmp	r3, #0
 8033d3a:	d008      	beq.n	8033d4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8033d3c:	4b19      	ldr	r3, [pc, #100]	; (8033da4 <HAL_RCC_ClockConfig+0x1bc>)
 8033d3e:	689b      	ldr	r3, [r3, #8]
 8033d40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8033d44:	687b      	ldr	r3, [r7, #4]
 8033d46:	68db      	ldr	r3, [r3, #12]
 8033d48:	4916      	ldr	r1, [pc, #88]	; (8033da4 <HAL_RCC_ClockConfig+0x1bc>)
 8033d4a:	4313      	orrs	r3, r2
 8033d4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8033d4e:	687b      	ldr	r3, [r7, #4]
 8033d50:	681b      	ldr	r3, [r3, #0]
 8033d52:	f003 0308 	and.w	r3, r3, #8
 8033d56:	2b00      	cmp	r3, #0
 8033d58:	d009      	beq.n	8033d6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8033d5a:	4b12      	ldr	r3, [pc, #72]	; (8033da4 <HAL_RCC_ClockConfig+0x1bc>)
 8033d5c:	689b      	ldr	r3, [r3, #8]
 8033d5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8033d62:	687b      	ldr	r3, [r7, #4]
 8033d64:	691b      	ldr	r3, [r3, #16]
 8033d66:	00db      	lsls	r3, r3, #3
 8033d68:	490e      	ldr	r1, [pc, #56]	; (8033da4 <HAL_RCC_ClockConfig+0x1bc>)
 8033d6a:	4313      	orrs	r3, r2
 8033d6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8033d6e:	f000 f821 	bl	8033db4 <HAL_RCC_GetSysClockFreq>
 8033d72:	4601      	mov	r1, r0
 8033d74:	4b0b      	ldr	r3, [pc, #44]	; (8033da4 <HAL_RCC_ClockConfig+0x1bc>)
 8033d76:	689b      	ldr	r3, [r3, #8]
 8033d78:	091b      	lsrs	r3, r3, #4
 8033d7a:	f003 030f 	and.w	r3, r3, #15
 8033d7e:	4a0a      	ldr	r2, [pc, #40]	; (8033da8 <HAL_RCC_ClockConfig+0x1c0>)
 8033d80:	5cd3      	ldrb	r3, [r2, r3]
 8033d82:	fa21 f303 	lsr.w	r3, r1, r3
 8033d86:	4a09      	ldr	r2, [pc, #36]	; (8033dac <HAL_RCC_ClockConfig+0x1c4>)
 8033d88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8033d8a:	4b09      	ldr	r3, [pc, #36]	; (8033db0 <HAL_RCC_ClockConfig+0x1c8>)
 8033d8c:	681b      	ldr	r3, [r3, #0]
 8033d8e:	4618      	mov	r0, r3
 8033d90:	f7f8 f8e6 	bl	802bf60 <HAL_InitTick>

  return HAL_OK;
 8033d94:	2300      	movs	r3, #0
}
 8033d96:	4618      	mov	r0, r3
 8033d98:	3710      	adds	r7, #16
 8033d9a:	46bd      	mov	sp, r7
 8033d9c:	bd80      	pop	{r7, pc}
 8033d9e:	bf00      	nop
 8033da0:	40023c00 	.word	0x40023c00
 8033da4:	40023800 	.word	0x40023800
 8033da8:	08056200 	.word	0x08056200
 8033dac:	20000294 	.word	0x20000294
 8033db0:	20000298 	.word	0x20000298

08033db4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8033db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8033db6:	b085      	sub	sp, #20
 8033db8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8033dba:	2300      	movs	r3, #0
 8033dbc:	607b      	str	r3, [r7, #4]
 8033dbe:	2300      	movs	r3, #0
 8033dc0:	60fb      	str	r3, [r7, #12]
 8033dc2:	2300      	movs	r3, #0
 8033dc4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8033dc6:	2300      	movs	r3, #0
 8033dc8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8033dca:	4b63      	ldr	r3, [pc, #396]	; (8033f58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8033dcc:	689b      	ldr	r3, [r3, #8]
 8033dce:	f003 030c 	and.w	r3, r3, #12
 8033dd2:	2b04      	cmp	r3, #4
 8033dd4:	d007      	beq.n	8033de6 <HAL_RCC_GetSysClockFreq+0x32>
 8033dd6:	2b08      	cmp	r3, #8
 8033dd8:	d008      	beq.n	8033dec <HAL_RCC_GetSysClockFreq+0x38>
 8033dda:	2b00      	cmp	r3, #0
 8033ddc:	f040 80b4 	bne.w	8033f48 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8033de0:	4b5e      	ldr	r3, [pc, #376]	; (8033f5c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8033de2:	60bb      	str	r3, [r7, #8]
       break;
 8033de4:	e0b3      	b.n	8033f4e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8033de6:	4b5e      	ldr	r3, [pc, #376]	; (8033f60 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8033de8:	60bb      	str	r3, [r7, #8]
      break;
 8033dea:	e0b0      	b.n	8033f4e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8033dec:	4b5a      	ldr	r3, [pc, #360]	; (8033f58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8033dee:	685b      	ldr	r3, [r3, #4]
 8033df0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8033df4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8033df6:	4b58      	ldr	r3, [pc, #352]	; (8033f58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8033df8:	685b      	ldr	r3, [r3, #4]
 8033dfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8033dfe:	2b00      	cmp	r3, #0
 8033e00:	d04a      	beq.n	8033e98 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8033e02:	4b55      	ldr	r3, [pc, #340]	; (8033f58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8033e04:	685b      	ldr	r3, [r3, #4]
 8033e06:	099b      	lsrs	r3, r3, #6
 8033e08:	f04f 0400 	mov.w	r4, #0
 8033e0c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8033e10:	f04f 0200 	mov.w	r2, #0
 8033e14:	ea03 0501 	and.w	r5, r3, r1
 8033e18:	ea04 0602 	and.w	r6, r4, r2
 8033e1c:	4629      	mov	r1, r5
 8033e1e:	4632      	mov	r2, r6
 8033e20:	f04f 0300 	mov.w	r3, #0
 8033e24:	f04f 0400 	mov.w	r4, #0
 8033e28:	0154      	lsls	r4, r2, #5
 8033e2a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8033e2e:	014b      	lsls	r3, r1, #5
 8033e30:	4619      	mov	r1, r3
 8033e32:	4622      	mov	r2, r4
 8033e34:	1b49      	subs	r1, r1, r5
 8033e36:	eb62 0206 	sbc.w	r2, r2, r6
 8033e3a:	f04f 0300 	mov.w	r3, #0
 8033e3e:	f04f 0400 	mov.w	r4, #0
 8033e42:	0194      	lsls	r4, r2, #6
 8033e44:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8033e48:	018b      	lsls	r3, r1, #6
 8033e4a:	1a5b      	subs	r3, r3, r1
 8033e4c:	eb64 0402 	sbc.w	r4, r4, r2
 8033e50:	f04f 0100 	mov.w	r1, #0
 8033e54:	f04f 0200 	mov.w	r2, #0
 8033e58:	00e2      	lsls	r2, r4, #3
 8033e5a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8033e5e:	00d9      	lsls	r1, r3, #3
 8033e60:	460b      	mov	r3, r1
 8033e62:	4614      	mov	r4, r2
 8033e64:	195b      	adds	r3, r3, r5
 8033e66:	eb44 0406 	adc.w	r4, r4, r6
 8033e6a:	f04f 0100 	mov.w	r1, #0
 8033e6e:	f04f 0200 	mov.w	r2, #0
 8033e72:	0262      	lsls	r2, r4, #9
 8033e74:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8033e78:	0259      	lsls	r1, r3, #9
 8033e7a:	460b      	mov	r3, r1
 8033e7c:	4614      	mov	r4, r2
 8033e7e:	4618      	mov	r0, r3
 8033e80:	4621      	mov	r1, r4
 8033e82:	687b      	ldr	r3, [r7, #4]
 8033e84:	f04f 0400 	mov.w	r4, #0
 8033e88:	461a      	mov	r2, r3
 8033e8a:	4623      	mov	r3, r4
 8033e8c:	f7ec ff34 	bl	8020cf8 <__aeabi_uldivmod>
 8033e90:	4603      	mov	r3, r0
 8033e92:	460c      	mov	r4, r1
 8033e94:	60fb      	str	r3, [r7, #12]
 8033e96:	e049      	b.n	8033f2c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8033e98:	4b2f      	ldr	r3, [pc, #188]	; (8033f58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8033e9a:	685b      	ldr	r3, [r3, #4]
 8033e9c:	099b      	lsrs	r3, r3, #6
 8033e9e:	f04f 0400 	mov.w	r4, #0
 8033ea2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8033ea6:	f04f 0200 	mov.w	r2, #0
 8033eaa:	ea03 0501 	and.w	r5, r3, r1
 8033eae:	ea04 0602 	and.w	r6, r4, r2
 8033eb2:	4629      	mov	r1, r5
 8033eb4:	4632      	mov	r2, r6
 8033eb6:	f04f 0300 	mov.w	r3, #0
 8033eba:	f04f 0400 	mov.w	r4, #0
 8033ebe:	0154      	lsls	r4, r2, #5
 8033ec0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8033ec4:	014b      	lsls	r3, r1, #5
 8033ec6:	4619      	mov	r1, r3
 8033ec8:	4622      	mov	r2, r4
 8033eca:	1b49      	subs	r1, r1, r5
 8033ecc:	eb62 0206 	sbc.w	r2, r2, r6
 8033ed0:	f04f 0300 	mov.w	r3, #0
 8033ed4:	f04f 0400 	mov.w	r4, #0
 8033ed8:	0194      	lsls	r4, r2, #6
 8033eda:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8033ede:	018b      	lsls	r3, r1, #6
 8033ee0:	1a5b      	subs	r3, r3, r1
 8033ee2:	eb64 0402 	sbc.w	r4, r4, r2
 8033ee6:	f04f 0100 	mov.w	r1, #0
 8033eea:	f04f 0200 	mov.w	r2, #0
 8033eee:	00e2      	lsls	r2, r4, #3
 8033ef0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8033ef4:	00d9      	lsls	r1, r3, #3
 8033ef6:	460b      	mov	r3, r1
 8033ef8:	4614      	mov	r4, r2
 8033efa:	195b      	adds	r3, r3, r5
 8033efc:	eb44 0406 	adc.w	r4, r4, r6
 8033f00:	f04f 0100 	mov.w	r1, #0
 8033f04:	f04f 0200 	mov.w	r2, #0
 8033f08:	02a2      	lsls	r2, r4, #10
 8033f0a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8033f0e:	0299      	lsls	r1, r3, #10
 8033f10:	460b      	mov	r3, r1
 8033f12:	4614      	mov	r4, r2
 8033f14:	4618      	mov	r0, r3
 8033f16:	4621      	mov	r1, r4
 8033f18:	687b      	ldr	r3, [r7, #4]
 8033f1a:	f04f 0400 	mov.w	r4, #0
 8033f1e:	461a      	mov	r2, r3
 8033f20:	4623      	mov	r3, r4
 8033f22:	f7ec fee9 	bl	8020cf8 <__aeabi_uldivmod>
 8033f26:	4603      	mov	r3, r0
 8033f28:	460c      	mov	r4, r1
 8033f2a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8033f2c:	4b0a      	ldr	r3, [pc, #40]	; (8033f58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8033f2e:	685b      	ldr	r3, [r3, #4]
 8033f30:	0c1b      	lsrs	r3, r3, #16
 8033f32:	f003 0303 	and.w	r3, r3, #3
 8033f36:	3301      	adds	r3, #1
 8033f38:	005b      	lsls	r3, r3, #1
 8033f3a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8033f3c:	68fa      	ldr	r2, [r7, #12]
 8033f3e:	683b      	ldr	r3, [r7, #0]
 8033f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8033f44:	60bb      	str	r3, [r7, #8]
      break;
 8033f46:	e002      	b.n	8033f4e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8033f48:	4b04      	ldr	r3, [pc, #16]	; (8033f5c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8033f4a:	60bb      	str	r3, [r7, #8]
      break;
 8033f4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8033f4e:	68bb      	ldr	r3, [r7, #8]
}
 8033f50:	4618      	mov	r0, r3
 8033f52:	3714      	adds	r7, #20
 8033f54:	46bd      	mov	sp, r7
 8033f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8033f58:	40023800 	.word	0x40023800
 8033f5c:	00f42400 	.word	0x00f42400
 8033f60:	007a1200 	.word	0x007a1200

08033f64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8033f64:	b480      	push	{r7}
 8033f66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8033f68:	4b03      	ldr	r3, [pc, #12]	; (8033f78 <HAL_RCC_GetHCLKFreq+0x14>)
 8033f6a:	681b      	ldr	r3, [r3, #0]
}
 8033f6c:	4618      	mov	r0, r3
 8033f6e:	46bd      	mov	sp, r7
 8033f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033f74:	4770      	bx	lr
 8033f76:	bf00      	nop
 8033f78:	20000294 	.word	0x20000294

08033f7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8033f7c:	b580      	push	{r7, lr}
 8033f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8033f80:	f7ff fff0 	bl	8033f64 <HAL_RCC_GetHCLKFreq>
 8033f84:	4601      	mov	r1, r0
 8033f86:	4b05      	ldr	r3, [pc, #20]	; (8033f9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8033f88:	689b      	ldr	r3, [r3, #8]
 8033f8a:	0a9b      	lsrs	r3, r3, #10
 8033f8c:	f003 0307 	and.w	r3, r3, #7
 8033f90:	4a03      	ldr	r2, [pc, #12]	; (8033fa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8033f92:	5cd3      	ldrb	r3, [r2, r3]
 8033f94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8033f98:	4618      	mov	r0, r3
 8033f9a:	bd80      	pop	{r7, pc}
 8033f9c:	40023800 	.word	0x40023800
 8033fa0:	08056210 	.word	0x08056210

08033fa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8033fa4:	b580      	push	{r7, lr}
 8033fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8033fa8:	f7ff ffdc 	bl	8033f64 <HAL_RCC_GetHCLKFreq>
 8033fac:	4601      	mov	r1, r0
 8033fae:	4b05      	ldr	r3, [pc, #20]	; (8033fc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8033fb0:	689b      	ldr	r3, [r3, #8]
 8033fb2:	0b5b      	lsrs	r3, r3, #13
 8033fb4:	f003 0307 	and.w	r3, r3, #7
 8033fb8:	4a03      	ldr	r2, [pc, #12]	; (8033fc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8033fba:	5cd3      	ldrb	r3, [r2, r3]
 8033fbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8033fc0:	4618      	mov	r0, r3
 8033fc2:	bd80      	pop	{r7, pc}
 8033fc4:	40023800 	.word	0x40023800
 8033fc8:	08056210 	.word	0x08056210

08033fcc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8033fcc:	b480      	push	{r7}
 8033fce:	b083      	sub	sp, #12
 8033fd0:	af00      	add	r7, sp, #0
 8033fd2:	6078      	str	r0, [r7, #4]
 8033fd4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8033fd6:	687b      	ldr	r3, [r7, #4]
 8033fd8:	220f      	movs	r2, #15
 8033fda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8033fdc:	4b12      	ldr	r3, [pc, #72]	; (8034028 <HAL_RCC_GetClockConfig+0x5c>)
 8033fde:	689b      	ldr	r3, [r3, #8]
 8033fe0:	f003 0203 	and.w	r2, r3, #3
 8033fe4:	687b      	ldr	r3, [r7, #4]
 8033fe6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8033fe8:	4b0f      	ldr	r3, [pc, #60]	; (8034028 <HAL_RCC_GetClockConfig+0x5c>)
 8033fea:	689b      	ldr	r3, [r3, #8]
 8033fec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8033ff0:	687b      	ldr	r3, [r7, #4]
 8033ff2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8033ff4:	4b0c      	ldr	r3, [pc, #48]	; (8034028 <HAL_RCC_GetClockConfig+0x5c>)
 8033ff6:	689b      	ldr	r3, [r3, #8]
 8033ff8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8033ffc:	687b      	ldr	r3, [r7, #4]
 8033ffe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8034000:	4b09      	ldr	r3, [pc, #36]	; (8034028 <HAL_RCC_GetClockConfig+0x5c>)
 8034002:	689b      	ldr	r3, [r3, #8]
 8034004:	08db      	lsrs	r3, r3, #3
 8034006:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 803400a:	687b      	ldr	r3, [r7, #4]
 803400c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 803400e:	4b07      	ldr	r3, [pc, #28]	; (803402c <HAL_RCC_GetClockConfig+0x60>)
 8034010:	681b      	ldr	r3, [r3, #0]
 8034012:	f003 020f 	and.w	r2, r3, #15
 8034016:	683b      	ldr	r3, [r7, #0]
 8034018:	601a      	str	r2, [r3, #0]
}
 803401a:	bf00      	nop
 803401c:	370c      	adds	r7, #12
 803401e:	46bd      	mov	sp, r7
 8034020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034024:	4770      	bx	lr
 8034026:	bf00      	nop
 8034028:	40023800 	.word	0x40023800
 803402c:	40023c00 	.word	0x40023c00

08034030 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8034030:	b580      	push	{r7, lr}
 8034032:	b088      	sub	sp, #32
 8034034:	af00      	add	r7, sp, #0
 8034036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8034038:	2300      	movs	r3, #0
 803403a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 803403c:	2300      	movs	r3, #0
 803403e:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8034040:	2300      	movs	r3, #0
 8034042:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8034044:	2300      	movs	r3, #0
 8034046:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8034048:	687b      	ldr	r3, [r7, #4]
 803404a:	681b      	ldr	r3, [r3, #0]
 803404c:	f003 0301 	and.w	r3, r3, #1
 8034050:	2b00      	cmp	r3, #0
 8034052:	d010      	beq.n	8034076 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8034054:	4b7a      	ldr	r3, [pc, #488]	; (8034240 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8034056:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803405a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 803405e:	687b      	ldr	r3, [r7, #4]
 8034060:	69db      	ldr	r3, [r3, #28]
 8034062:	4977      	ldr	r1, [pc, #476]	; (8034240 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8034064:	4313      	orrs	r3, r2
 8034066:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 803406a:	687b      	ldr	r3, [r7, #4]
 803406c:	69db      	ldr	r3, [r3, #28]
 803406e:	2b00      	cmp	r3, #0
 8034070:	d101      	bne.n	8034076 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8034072:	2301      	movs	r3, #1
 8034074:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8034076:	687b      	ldr	r3, [r7, #4]
 8034078:	681b      	ldr	r3, [r3, #0]
 803407a:	f003 0302 	and.w	r3, r3, #2
 803407e:	2b00      	cmp	r3, #0
 8034080:	d010      	beq.n	80340a4 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8034082:	4b6f      	ldr	r3, [pc, #444]	; (8034240 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8034084:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8034088:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 803408c:	687b      	ldr	r3, [r7, #4]
 803408e:	6a1b      	ldr	r3, [r3, #32]
 8034090:	496b      	ldr	r1, [pc, #428]	; (8034240 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8034092:	4313      	orrs	r3, r2
 8034094:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8034098:	687b      	ldr	r3, [r7, #4]
 803409a:	6a1b      	ldr	r3, [r3, #32]
 803409c:	2b00      	cmp	r3, #0
 803409e:	d101      	bne.n	80340a4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 80340a0:	2301      	movs	r3, #1
 80340a2:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 80340a4:	687b      	ldr	r3, [r7, #4]
 80340a6:	681b      	ldr	r3, [r3, #0]
 80340a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80340ac:	2b00      	cmp	r3, #0
 80340ae:	d022      	beq.n	80340f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 80340b0:	4b63      	ldr	r3, [pc, #396]	; (8034240 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80340b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80340b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80340ba:	687b      	ldr	r3, [r7, #4]
 80340bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80340be:	4960      	ldr	r1, [pc, #384]	; (8034240 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80340c0:	4313      	orrs	r3, r2
 80340c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 80340c6:	687b      	ldr	r3, [r7, #4]
 80340c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80340ca:	2b00      	cmp	r3, #0
 80340cc:	d101      	bne.n	80340d2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 80340ce:	2301      	movs	r3, #1
 80340d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 80340d2:	687b      	ldr	r3, [r7, #4]
 80340d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80340d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80340da:	d10c      	bne.n	80340f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 80340dc:	4b58      	ldr	r3, [pc, #352]	; (8034240 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80340de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80340e2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80340e6:	687b      	ldr	r3, [r7, #4]
 80340e8:	695b      	ldr	r3, [r3, #20]
 80340ea:	3b01      	subs	r3, #1
 80340ec:	021b      	lsls	r3, r3, #8
 80340ee:	4954      	ldr	r1, [pc, #336]	; (8034240 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80340f0:	4313      	orrs	r3, r2
 80340f2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 80340f6:	687b      	ldr	r3, [r7, #4]
 80340f8:	681b      	ldr	r3, [r3, #0]
 80340fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80340fe:	2b00      	cmp	r3, #0
 8034100:	d022      	beq.n	8034148 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8034102:	4b4f      	ldr	r3, [pc, #316]	; (8034240 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8034104:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8034108:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 803410c:	687b      	ldr	r3, [r7, #4]
 803410e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8034110:	494b      	ldr	r1, [pc, #300]	; (8034240 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8034112:	4313      	orrs	r3, r2
 8034114:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8034118:	687b      	ldr	r3, [r7, #4]
 803411a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 803411c:	2b00      	cmp	r3, #0
 803411e:	d101      	bne.n	8034124 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8034120:	2301      	movs	r3, #1
 8034122:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8034124:	687b      	ldr	r3, [r7, #4]
 8034126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8034128:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 803412c:	d10c      	bne.n	8034148 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 803412e:	4b44      	ldr	r3, [pc, #272]	; (8034240 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8034130:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8034134:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8034138:	687b      	ldr	r3, [r7, #4]
 803413a:	695b      	ldr	r3, [r3, #20]
 803413c:	3b01      	subs	r3, #1
 803413e:	021b      	lsls	r3, r3, #8
 8034140:	493f      	ldr	r1, [pc, #252]	; (8034240 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8034142:	4313      	orrs	r3, r2
 8034144:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8034148:	687b      	ldr	r3, [r7, #4]
 803414a:	681b      	ldr	r3, [r3, #0]
 803414c:	f003 0308 	and.w	r3, r3, #8
 8034150:	2b00      	cmp	r3, #0
 8034152:	f000 808a 	beq.w	803426a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8034156:	2300      	movs	r3, #0
 8034158:	60fb      	str	r3, [r7, #12]
 803415a:	4b39      	ldr	r3, [pc, #228]	; (8034240 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 803415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803415e:	4a38      	ldr	r2, [pc, #224]	; (8034240 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8034160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8034164:	6413      	str	r3, [r2, #64]	; 0x40
 8034166:	4b36      	ldr	r3, [pc, #216]	; (8034240 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8034168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803416a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 803416e:	60fb      	str	r3, [r7, #12]
 8034170:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8034172:	4b34      	ldr	r3, [pc, #208]	; (8034244 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8034174:	681b      	ldr	r3, [r3, #0]
 8034176:	4a33      	ldr	r2, [pc, #204]	; (8034244 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8034178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 803417c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 803417e:	f7f8 f8f5 	bl	802c36c <HAL_GetTick>
 8034182:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8034184:	e008      	b.n	8034198 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8034186:	f7f8 f8f1 	bl	802c36c <HAL_GetTick>
 803418a:	4602      	mov	r2, r0
 803418c:	69bb      	ldr	r3, [r7, #24]
 803418e:	1ad3      	subs	r3, r2, r3
 8034190:	2b02      	cmp	r3, #2
 8034192:	d901      	bls.n	8034198 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8034194:	2303      	movs	r3, #3
 8034196:	e1d1      	b.n	803453c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8034198:	4b2a      	ldr	r3, [pc, #168]	; (8034244 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 803419a:	681b      	ldr	r3, [r3, #0]
 803419c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80341a0:	2b00      	cmp	r3, #0
 80341a2:	d0f0      	beq.n	8034186 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80341a4:	4b26      	ldr	r3, [pc, #152]	; (8034240 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80341a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80341a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80341ac:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80341ae:	697b      	ldr	r3, [r7, #20]
 80341b0:	2b00      	cmp	r3, #0
 80341b2:	d02f      	beq.n	8034214 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80341b4:	687b      	ldr	r3, [r7, #4]
 80341b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80341b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80341bc:	697a      	ldr	r2, [r7, #20]
 80341be:	429a      	cmp	r2, r3
 80341c0:	d028      	beq.n	8034214 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80341c2:	4b1f      	ldr	r3, [pc, #124]	; (8034240 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80341c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80341c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80341ca:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80341cc:	4b1e      	ldr	r3, [pc, #120]	; (8034248 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80341ce:	2201      	movs	r2, #1
 80341d0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80341d2:	4b1d      	ldr	r3, [pc, #116]	; (8034248 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80341d4:	2200      	movs	r2, #0
 80341d6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80341d8:	4a19      	ldr	r2, [pc, #100]	; (8034240 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80341da:	697b      	ldr	r3, [r7, #20]
 80341dc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80341de:	4b18      	ldr	r3, [pc, #96]	; (8034240 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80341e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80341e2:	f003 0301 	and.w	r3, r3, #1
 80341e6:	2b01      	cmp	r3, #1
 80341e8:	d114      	bne.n	8034214 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80341ea:	f7f8 f8bf 	bl	802c36c <HAL_GetTick>
 80341ee:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80341f0:	e00a      	b.n	8034208 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80341f2:	f7f8 f8bb 	bl	802c36c <HAL_GetTick>
 80341f6:	4602      	mov	r2, r0
 80341f8:	69bb      	ldr	r3, [r7, #24]
 80341fa:	1ad3      	subs	r3, r2, r3
 80341fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8034200:	4293      	cmp	r3, r2
 8034202:	d901      	bls.n	8034208 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8034204:	2303      	movs	r3, #3
 8034206:	e199      	b.n	803453c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8034208:	4b0d      	ldr	r3, [pc, #52]	; (8034240 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 803420a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803420c:	f003 0302 	and.w	r3, r3, #2
 8034210:	2b00      	cmp	r3, #0
 8034212:	d0ee      	beq.n	80341f2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8034214:	687b      	ldr	r3, [r7, #4]
 8034216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8034218:	f403 7340 	and.w	r3, r3, #768	; 0x300
 803421c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8034220:	d114      	bne.n	803424c <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8034222:	4b07      	ldr	r3, [pc, #28]	; (8034240 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8034224:	689b      	ldr	r3, [r3, #8]
 8034226:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 803422a:	687b      	ldr	r3, [r7, #4]
 803422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803422e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8034232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8034236:	4902      	ldr	r1, [pc, #8]	; (8034240 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8034238:	4313      	orrs	r3, r2
 803423a:	608b      	str	r3, [r1, #8]
 803423c:	e00c      	b.n	8034258 <HAL_RCCEx_PeriphCLKConfig+0x228>
 803423e:	bf00      	nop
 8034240:	40023800 	.word	0x40023800
 8034244:	40007000 	.word	0x40007000
 8034248:	42470e40 	.word	0x42470e40
 803424c:	4b89      	ldr	r3, [pc, #548]	; (8034474 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 803424e:	689b      	ldr	r3, [r3, #8]
 8034250:	4a88      	ldr	r2, [pc, #544]	; (8034474 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8034252:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8034256:	6093      	str	r3, [r2, #8]
 8034258:	4b86      	ldr	r3, [pc, #536]	; (8034474 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 803425a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 803425c:	687b      	ldr	r3, [r7, #4]
 803425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8034260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8034264:	4983      	ldr	r1, [pc, #524]	; (8034474 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8034266:	4313      	orrs	r3, r2
 8034268:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 803426a:	687b      	ldr	r3, [r7, #4]
 803426c:	681b      	ldr	r3, [r3, #0]
 803426e:	f003 0304 	and.w	r3, r3, #4
 8034272:	2b00      	cmp	r3, #0
 8034274:	d004      	beq.n	8034280 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8034276:	687b      	ldr	r3, [r7, #4]
 8034278:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 803427c:	4b7e      	ldr	r3, [pc, #504]	; (8034478 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 803427e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8034280:	687b      	ldr	r3, [r7, #4]
 8034282:	681b      	ldr	r3, [r3, #0]
 8034284:	f003 0310 	and.w	r3, r3, #16
 8034288:	2b00      	cmp	r3, #0
 803428a:	d00a      	beq.n	80342a2 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 803428c:	4b79      	ldr	r3, [pc, #484]	; (8034474 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 803428e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8034292:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8034296:	687b      	ldr	r3, [r7, #4]
 8034298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803429a:	4976      	ldr	r1, [pc, #472]	; (8034474 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 803429c:	4313      	orrs	r3, r2
 803429e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80342a2:	687b      	ldr	r3, [r7, #4]
 80342a4:	681b      	ldr	r3, [r3, #0]
 80342a6:	f003 0320 	and.w	r3, r3, #32
 80342aa:	2b00      	cmp	r3, #0
 80342ac:	d011      	beq.n	80342d2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80342ae:	4b71      	ldr	r3, [pc, #452]	; (8034474 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80342b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80342b4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80342b8:	687b      	ldr	r3, [r7, #4]
 80342ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80342bc:	496d      	ldr	r1, [pc, #436]	; (8034474 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80342be:	4313      	orrs	r3, r2
 80342c0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 80342c4:	687b      	ldr	r3, [r7, #4]
 80342c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80342c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80342cc:	d101      	bne.n	80342d2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 80342ce:	2301      	movs	r3, #1
 80342d0:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80342d2:	687b      	ldr	r3, [r7, #4]
 80342d4:	681b      	ldr	r3, [r3, #0]
 80342d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80342da:	2b00      	cmp	r3, #0
 80342dc:	d00a      	beq.n	80342f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80342de:	4b65      	ldr	r3, [pc, #404]	; (8034474 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80342e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80342e4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80342e8:	687b      	ldr	r3, [r7, #4]
 80342ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80342ec:	4961      	ldr	r1, [pc, #388]	; (8034474 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80342ee:	4313      	orrs	r3, r2
 80342f0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80342f4:	69fb      	ldr	r3, [r7, #28]
 80342f6:	2b01      	cmp	r3, #1
 80342f8:	d004      	beq.n	8034304 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80342fa:	687b      	ldr	r3, [r7, #4]
 80342fc:	681b      	ldr	r3, [r3, #0]
 80342fe:	2b80      	cmp	r3, #128	; 0x80
 8034300:	f040 80c6 	bne.w	8034490 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8034304:	4b5d      	ldr	r3, [pc, #372]	; (803447c <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8034306:	2200      	movs	r2, #0
 8034308:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 803430a:	f7f8 f82f 	bl	802c36c <HAL_GetTick>
 803430e:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8034310:	e008      	b.n	8034324 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8034312:	f7f8 f82b 	bl	802c36c <HAL_GetTick>
 8034316:	4602      	mov	r2, r0
 8034318:	69bb      	ldr	r3, [r7, #24]
 803431a:	1ad3      	subs	r3, r2, r3
 803431c:	2b02      	cmp	r3, #2
 803431e:	d901      	bls.n	8034324 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8034320:	2303      	movs	r3, #3
 8034322:	e10b      	b.n	803453c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8034324:	4b53      	ldr	r3, [pc, #332]	; (8034474 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8034326:	681b      	ldr	r3, [r3, #0]
 8034328:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 803432c:	2b00      	cmp	r3, #0
 803432e:	d1f0      	bne.n	8034312 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8034330:	4a53      	ldr	r2, [pc, #332]	; (8034480 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8034332:	687b      	ldr	r3, [r7, #4]
 8034334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8034336:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8034338:	687b      	ldr	r3, [r7, #4]
 803433a:	681b      	ldr	r3, [r3, #0]
 803433c:	f003 0301 	and.w	r3, r3, #1
 8034340:	2b00      	cmp	r3, #0
 8034342:	d003      	beq.n	803434c <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8034344:	687b      	ldr	r3, [r7, #4]
 8034346:	69db      	ldr	r3, [r3, #28]
 8034348:	2b00      	cmp	r3, #0
 803434a:	d023      	beq.n	8034394 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 803434c:	687b      	ldr	r3, [r7, #4]
 803434e:	681b      	ldr	r3, [r3, #0]
 8034350:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8034354:	2b00      	cmp	r3, #0
 8034356:	d003      	beq.n	8034360 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8034358:	687b      	ldr	r3, [r7, #4]
 803435a:	6a1b      	ldr	r3, [r3, #32]
 803435c:	2b00      	cmp	r3, #0
 803435e:	d019      	beq.n	8034394 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8034360:	687b      	ldr	r3, [r7, #4]
 8034362:	681b      	ldr	r3, [r3, #0]
 8034364:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8034368:	2b00      	cmp	r3, #0
 803436a:	d004      	beq.n	8034376 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 803436c:	687b      	ldr	r3, [r7, #4]
 803436e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8034370:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8034374:	d00e      	beq.n	8034394 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8034376:	687b      	ldr	r3, [r7, #4]
 8034378:	681b      	ldr	r3, [r3, #0]
 803437a:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 803437e:	2b00      	cmp	r3, #0
 8034380:	d019      	beq.n	80343b6 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8034382:	687b      	ldr	r3, [r7, #4]
 8034384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8034386:	2b00      	cmp	r3, #0
 8034388:	d115      	bne.n	80343b6 <HAL_RCCEx_PeriphCLKConfig+0x386>
 803438a:	687b      	ldr	r3, [r7, #4]
 803438c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803438e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8034392:	d110      	bne.n	80343b6 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8034394:	687b      	ldr	r3, [r7, #4]
 8034396:	685a      	ldr	r2, [r3, #4]
 8034398:	687b      	ldr	r3, [r7, #4]
 803439a:	689b      	ldr	r3, [r3, #8]
 803439c:	019b      	lsls	r3, r3, #6
 803439e:	431a      	orrs	r2, r3
 80343a0:	687b      	ldr	r3, [r7, #4]
 80343a2:	68db      	ldr	r3, [r3, #12]
 80343a4:	061b      	lsls	r3, r3, #24
 80343a6:	431a      	orrs	r2, r3
 80343a8:	687b      	ldr	r3, [r7, #4]
 80343aa:	691b      	ldr	r3, [r3, #16]
 80343ac:	071b      	lsls	r3, r3, #28
 80343ae:	4931      	ldr	r1, [pc, #196]	; (8034474 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80343b0:	4313      	orrs	r3, r2
 80343b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80343b6:	687b      	ldr	r3, [r7, #4]
 80343b8:	681b      	ldr	r3, [r3, #0]
 80343ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80343be:	2b00      	cmp	r3, #0
 80343c0:	d003      	beq.n	80343ca <HAL_RCCEx_PeriphCLKConfig+0x39a>
 80343c2:	687b      	ldr	r3, [r7, #4]
 80343c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80343c6:	2b00      	cmp	r3, #0
 80343c8:	d009      	beq.n	80343de <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80343ca:	687b      	ldr	r3, [r7, #4]
 80343cc:	681b      	ldr	r3, [r3, #0]
 80343ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80343d2:	2b00      	cmp	r3, #0
 80343d4:	d026      	beq.n	8034424 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80343d6:	687b      	ldr	r3, [r7, #4]
 80343d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80343da:	2b00      	cmp	r3, #0
 80343dc:	d122      	bne.n	8034424 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80343de:	4b25      	ldr	r3, [pc, #148]	; (8034474 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80343e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80343e4:	0e1b      	lsrs	r3, r3, #24
 80343e6:	f003 030f 	and.w	r3, r3, #15
 80343ea:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80343ec:	687b      	ldr	r3, [r7, #4]
 80343ee:	685a      	ldr	r2, [r3, #4]
 80343f0:	687b      	ldr	r3, [r7, #4]
 80343f2:	689b      	ldr	r3, [r3, #8]
 80343f4:	019b      	lsls	r3, r3, #6
 80343f6:	431a      	orrs	r2, r3
 80343f8:	693b      	ldr	r3, [r7, #16]
 80343fa:	061b      	lsls	r3, r3, #24
 80343fc:	431a      	orrs	r2, r3
 80343fe:	687b      	ldr	r3, [r7, #4]
 8034400:	691b      	ldr	r3, [r3, #16]
 8034402:	071b      	lsls	r3, r3, #28
 8034404:	491b      	ldr	r1, [pc, #108]	; (8034474 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8034406:	4313      	orrs	r3, r2
 8034408:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 803440c:	4b19      	ldr	r3, [pc, #100]	; (8034474 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 803440e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8034412:	f023 021f 	bic.w	r2, r3, #31
 8034416:	687b      	ldr	r3, [r7, #4]
 8034418:	699b      	ldr	r3, [r3, #24]
 803441a:	3b01      	subs	r3, #1
 803441c:	4915      	ldr	r1, [pc, #84]	; (8034474 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 803441e:	4313      	orrs	r3, r2
 8034420:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8034424:	687b      	ldr	r3, [r7, #4]
 8034426:	681b      	ldr	r3, [r3, #0]
 8034428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 803442c:	2b00      	cmp	r3, #0
 803442e:	d010      	beq.n	8034452 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8034430:	687b      	ldr	r3, [r7, #4]
 8034432:	685a      	ldr	r2, [r3, #4]
 8034434:	687b      	ldr	r3, [r7, #4]
 8034436:	689b      	ldr	r3, [r3, #8]
 8034438:	019b      	lsls	r3, r3, #6
 803443a:	431a      	orrs	r2, r3
 803443c:	687b      	ldr	r3, [r7, #4]
 803443e:	68db      	ldr	r3, [r3, #12]
 8034440:	061b      	lsls	r3, r3, #24
 8034442:	431a      	orrs	r2, r3
 8034444:	687b      	ldr	r3, [r7, #4]
 8034446:	691b      	ldr	r3, [r3, #16]
 8034448:	071b      	lsls	r3, r3, #28
 803444a:	490a      	ldr	r1, [pc, #40]	; (8034474 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 803444c:	4313      	orrs	r3, r2
 803444e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8034452:	4b0a      	ldr	r3, [pc, #40]	; (803447c <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8034454:	2201      	movs	r2, #1
 8034456:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8034458:	f7f7 ff88 	bl	802c36c <HAL_GetTick>
 803445c:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 803445e:	e011      	b.n	8034484 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8034460:	f7f7 ff84 	bl	802c36c <HAL_GetTick>
 8034464:	4602      	mov	r2, r0
 8034466:	69bb      	ldr	r3, [r7, #24]
 8034468:	1ad3      	subs	r3, r2, r3
 803446a:	2b02      	cmp	r3, #2
 803446c:	d90a      	bls.n	8034484 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 803446e:	2303      	movs	r3, #3
 8034470:	e064      	b.n	803453c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8034472:	bf00      	nop
 8034474:	40023800 	.word	0x40023800
 8034478:	424711e0 	.word	0x424711e0
 803447c:	42470068 	.word	0x42470068
 8034480:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8034484:	4b2f      	ldr	r3, [pc, #188]	; (8034544 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8034486:	681b      	ldr	r3, [r3, #0]
 8034488:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 803448c:	2b00      	cmp	r3, #0
 803448e:	d0e7      	beq.n	8034460 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8034490:	687b      	ldr	r3, [r7, #4]
 8034492:	681b      	ldr	r3, [r3, #0]
 8034494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8034498:	2b00      	cmp	r3, #0
 803449a:	d00a      	beq.n	80344b2 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 803449c:	4b29      	ldr	r3, [pc, #164]	; (8034544 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 803449e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80344a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80344a6:	687b      	ldr	r3, [r7, #4]
 80344a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80344aa:	4926      	ldr	r1, [pc, #152]	; (8034544 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80344ac:	4313      	orrs	r3, r2
 80344ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80344b2:	687b      	ldr	r3, [r7, #4]
 80344b4:	681b      	ldr	r3, [r3, #0]
 80344b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80344ba:	2b00      	cmp	r3, #0
 80344bc:	d00a      	beq.n	80344d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80344be:	4b21      	ldr	r3, [pc, #132]	; (8034544 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80344c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80344c4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80344c8:	687b      	ldr	r3, [r7, #4]
 80344ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80344cc:	491d      	ldr	r1, [pc, #116]	; (8034544 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80344ce:	4313      	orrs	r3, r2
 80344d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80344d4:	687b      	ldr	r3, [r7, #4]
 80344d6:	681b      	ldr	r3, [r3, #0]
 80344d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80344dc:	2b00      	cmp	r3, #0
 80344de:	d00a      	beq.n	80344f6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80344e0:	4b18      	ldr	r3, [pc, #96]	; (8034544 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80344e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80344e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80344ea:	687b      	ldr	r3, [r7, #4]
 80344ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80344ee:	4915      	ldr	r1, [pc, #84]	; (8034544 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80344f0:	4313      	orrs	r3, r2
 80344f2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 80344f6:	687b      	ldr	r3, [r7, #4]
 80344f8:	681b      	ldr	r3, [r3, #0]
 80344fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80344fe:	2b00      	cmp	r3, #0
 8034500:	d00a      	beq.n	8034518 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8034502:	4b10      	ldr	r3, [pc, #64]	; (8034544 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8034504:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8034508:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 803450c:	687b      	ldr	r3, [r7, #4]
 803450e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8034510:	490c      	ldr	r1, [pc, #48]	; (8034544 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8034512:	4313      	orrs	r3, r2
 8034514:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8034518:	687b      	ldr	r3, [r7, #4]
 803451a:	681b      	ldr	r3, [r3, #0]
 803451c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8034520:	2b00      	cmp	r3, #0
 8034522:	d00a      	beq.n	803453a <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8034524:	4b07      	ldr	r3, [pc, #28]	; (8034544 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8034526:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 803452a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 803452e:	687b      	ldr	r3, [r7, #4]
 8034530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8034532:	4904      	ldr	r1, [pc, #16]	; (8034544 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8034534:	4313      	orrs	r3, r2
 8034536:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 803453a:	2300      	movs	r3, #0
}
 803453c:	4618      	mov	r0, r3
 803453e:	3720      	adds	r7, #32
 8034540:	46bd      	mov	sp, r7
 8034542:	bd80      	pop	{r7, pc}
 8034544:	40023800 	.word	0x40023800

08034548 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  *         will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8034548:	b480      	push	{r7}
 803454a:	b085      	sub	sp, #20
 803454c:	af00      	add	r7, sp, #0
 803454e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
#if defined(STM32F413xx) || defined(STM32F423xx)
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1     | RCC_PERIPHCLK_I2S_APB2 |\
 8034550:	687b      	ldr	r3, [r7, #4]
 8034552:	f647 727f 	movw	r2, #32639	; 0x7f7f
 8034556:	601a      	str	r2, [r3, #0]
#endif /* STM32F413xx || STM32F423xx */



  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM) >> RCC_PLLI2SCFGR_PLLI2SM_Pos);
 8034558:	4b52      	ldr	r3, [pc, #328]	; (80346a4 <HAL_RCCEx_GetPeriphCLKConfig+0x15c>)
 803455a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803455e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8034562:	687b      	ldr	r3, [r7, #4]
 8034564:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8034566:	4b4f      	ldr	r3, [pc, #316]	; (80346a4 <HAL_RCCEx_GetPeriphCLKConfig+0x15c>)
 8034568:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803456c:	099b      	lsrs	r3, r3, #6
 803456e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8034572:	687b      	ldr	r3, [r7, #4]
 8034574:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8034576:	4b4b      	ldr	r3, [pc, #300]	; (80346a4 <HAL_RCCEx_GetPeriphCLKConfig+0x15c>)
 8034578:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803457c:	0e1b      	lsrs	r3, r3, #24
 803457e:	f003 020f 	and.w	r2, r3, #15
 8034582:	687b      	ldr	r3, [r7, #4]
 8034584:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8034586:	4b47      	ldr	r3, [pc, #284]	; (80346a4 <HAL_RCCEx_GetPeriphCLKConfig+0x15c>)
 8034588:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803458c:	0f1b      	lsrs	r3, r3, #28
 803458e:	f003 0207 	and.w	r2, r3, #7
 8034592:	687b      	ldr	r3, [r7, #4]
 8034594:	611a      	str	r2, [r3, #16]
#if defined(STM32F413xx) || defined(STM32F423xx)
  /* Get the PLL/PLLI2S division factors -------------------------------------*/
  PeriphClkInit->PLLI2SDivR = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVR) >> RCC_DCKCFGR_PLLI2SDIVR_Pos);
 8034596:	4b43      	ldr	r3, [pc, #268]	; (80346a4 <HAL_RCCEx_GetPeriphCLKConfig+0x15c>)
 8034598:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803459c:	f003 021f 	and.w	r2, r3, #31
 80345a0:	687b      	ldr	r3, [r7, #4]
 80345a2:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLDivR = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLDIVR) >> RCC_DCKCFGR_PLLDIVR_Pos);
 80345a4:	4b3f      	ldr	r3, [pc, #252]	; (80346a4 <HAL_RCCEx_GetPeriphCLKConfig+0x15c>)
 80345a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80345aa:	0a1b      	lsrs	r3, r3, #8
 80345ac:	f003 021f 	and.w	r2, r3, #31
 80345b0:	687b      	ldr	r3, [r7, #4]
 80345b2:	615a      	str	r2, [r3, #20]
#endif /* STM32F413xx || STM32F423xx */

  /* Get the I2S APB1 clock configuration ------------------------------------*/
  PeriphClkInit->I2sApb1ClockSelection = __HAL_RCC_GET_I2S_APB1_SOURCE();
 80345b4:	4b3b      	ldr	r3, [pc, #236]	; (80346a4 <HAL_RCCEx_GetPeriphCLKConfig+0x15c>)
 80345b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80345ba:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80345be:	687b      	ldr	r3, [r7, #4]
 80345c0:	61da      	str	r2, [r3, #28]

  /* Get the I2S APB2 clock configuration ------------------------------------*/
  PeriphClkInit->I2sApb2ClockSelection = __HAL_RCC_GET_I2S_APB2_SOURCE();
 80345c2:	4b38      	ldr	r3, [pc, #224]	; (80346a4 <HAL_RCCEx_GetPeriphCLKConfig+0x15c>)
 80345c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80345c8:	f003 52c0 	and.w	r2, r3, #402653184	; 0x18000000
 80345cc:	687b      	ldr	r3, [r7, #4]
 80345ce:	621a      	str	r2, [r3, #32]

  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80345d0:	4b34      	ldr	r3, [pc, #208]	; (80346a4 <HAL_RCCEx_GetPeriphCLKConfig+0x15c>)
 80345d2:	689b      	ldr	r3, [r3, #8]
 80345d4:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80345d8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80345da:	4b32      	ldr	r3, [pc, #200]	; (80346a4 <HAL_RCCEx_GetPeriphCLKConfig+0x15c>)
 80345dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80345de:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80345e2:	68fb      	ldr	r3, [r7, #12]
 80345e4:	431a      	orrs	r2, r3
 80345e6:	687b      	ldr	r3, [r7, #4]
 80345e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Get the FMPI2C1 clock configuration -------------------------------------*/
  PeriphClkInit->Fmpi2c1ClockSelection = __HAL_RCC_GET_FMPI2C1_SOURCE();
 80345ea:	4b2e      	ldr	r3, [pc, #184]	; (80346a4 <HAL_RCCEx_GetPeriphCLKConfig+0x15c>)
 80345ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80345f0:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80345f4:	687b      	ldr	r3, [r7, #4]
 80345f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Get the CLK48 clock configuration ---------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 80345f8:	4b2a      	ldr	r3, [pc, #168]	; (80346a4 <HAL_RCCEx_GetPeriphCLKConfig+0x15c>)
 80345fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80345fe:	f003 6200 	and.w	r2, r3, #134217728	; 0x8000000
 8034602:	687b      	ldr	r3, [r7, #4]
 8034604:	631a      	str	r2, [r3, #48]	; 0x30

  /* Get the SDIO clock configuration ----------------------------------------*/
  PeriphClkInit->SdioClockSelection = __HAL_RCC_GET_SDIO_SOURCE();
 8034606:	4b27      	ldr	r3, [pc, #156]	; (80346a4 <HAL_RCCEx_GetPeriphCLKConfig+0x15c>)
 8034608:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 803460c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8034610:	687b      	ldr	r3, [r7, #4]
 8034612:	629a      	str	r2, [r3, #40]	; 0x28

  /* Get the DFSDM1 clock configuration --------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection = __HAL_RCC_GET_DFSDM1_SOURCE();
 8034614:	4b23      	ldr	r3, [pc, #140]	; (80346a4 <HAL_RCCEx_GetPeriphCLKConfig+0x15c>)
 8034616:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803461a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 803461e:	687b      	ldr	r3, [r7, #4]
 8034620:	635a      	str	r2, [r3, #52]	; 0x34

  /* Get the DFSDM1 Audio clock configuration --------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8034622:	4b20      	ldr	r3, [pc, #128]	; (80346a4 <HAL_RCCEx_GetPeriphCLKConfig+0x15c>)
 8034624:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8034628:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 803462c:	687b      	ldr	r3, [r7, #4]
 803462e:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(STM32F413xx) || defined(STM32F423xx)
  /* Get the DFSDM2 clock configuration --------------------------------------*/
  PeriphClkInit->Dfsdm2ClockSelection = __HAL_RCC_GET_DFSDM2_SOURCE();
 8034630:	4b1c      	ldr	r3, [pc, #112]	; (80346a4 <HAL_RCCEx_GetPeriphCLKConfig+0x15c>)
 8034632:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8034636:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 803463a:	687b      	ldr	r3, [r7, #4]
 803463c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the DFSDM2 Audio clock configuration --------------------------------*/
  PeriphClkInit->Dfsdm2AudioClockSelection = __HAL_RCC_GET_DFSDM2AUDIO_SOURCE();
 803463e:	4b19      	ldr	r3, [pc, #100]	; (80346a4 <HAL_RCCEx_GetPeriphCLKConfig+0x15c>)
 8034640:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8034644:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8034648:	687b      	ldr	r3, [r7, #4]
 803464a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get the LPTIM1 clock configuration --------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 803464c:	4b15      	ldr	r3, [pc, #84]	; (80346a4 <HAL_RCCEx_GetPeriphCLKConfig+0x15c>)
 803464e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8034652:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
 8034656:	687b      	ldr	r3, [r7, #4]
 8034658:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get the SAI1 Block Aclock configuration ---------------------------------*/
  PeriphClkInit->SaiAClockSelection = __HAL_RCC_GET_SAI_BLOCKA_SOURCE();
 803465a:	4b12      	ldr	r3, [pc, #72]	; (80346a4 <HAL_RCCEx_GetPeriphCLKConfig+0x15c>)
 803465c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8034660:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8034664:	687b      	ldr	r3, [r7, #4]
 8034666:	649a      	str	r2, [r3, #72]	; 0x48

  /* Get the SAI1 Block B clock configuration --------------------------------*/
  PeriphClkInit->SaiBClockSelection = __HAL_RCC_GET_SAI_BLOCKB_SOURCE();
 8034668:	4b0e      	ldr	r3, [pc, #56]	; (80346a4 <HAL_RCCEx_GetPeriphCLKConfig+0x15c>)
 803466a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803466e:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8034672:	687b      	ldr	r3, [r7, #4]
 8034674:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* STM32F413xx || STM32F423xx */

  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 8034676:	4b0b      	ldr	r3, [pc, #44]	; (80346a4 <HAL_RCCEx_GetPeriphCLKConfig+0x15c>)
 8034678:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803467c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8034680:	2b00      	cmp	r3, #0
 8034682:	d104      	bne.n	803468e <HAL_RCCEx_GetPeriphCLKConfig+0x146>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 8034684:	687b      	ldr	r3, [r7, #4]
 8034686:	2200      	movs	r2, #0
 8034688:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 803468c:	e003      	b.n	8034696 <HAL_RCCEx_GetPeriphCLKConfig+0x14e>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 803468e:	687b      	ldr	r3, [r7, #4]
 8034690:	2201      	movs	r2, #1
 8034692:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
}
 8034696:	bf00      	nop
 8034698:	3714      	adds	r7, #20
 803469a:	46bd      	mov	sp, r7
 803469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80346a0:	4770      	bx	lr
 80346a2:	bf00      	nop
 80346a4:	40023800 	.word	0x40023800

080346a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80346a8:	b480      	push	{r7}
 80346aa:	b087      	sub	sp, #28
 80346ac:	af00      	add	r7, sp, #0
 80346ae:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80346b0:	2300      	movs	r3, #0
 80346b2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80346b4:	2300      	movs	r3, #0
 80346b6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80346b8:	2300      	movs	r3, #0
 80346ba:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80346bc:	2300      	movs	r3, #0
 80346be:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80346c0:	687b      	ldr	r3, [r7, #4]
 80346c2:	2b01      	cmp	r3, #1
 80346c4:	d003      	beq.n	80346ce <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 80346c6:	2b02      	cmp	r3, #2
 80346c8:	f000 8098 	beq.w	80347fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80346cc:	e12d      	b.n	803492a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 80346ce:	4b9a      	ldr	r3, [pc, #616]	; (8034938 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80346d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80346d4:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80346d8:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80346da:	68fb      	ldr	r3, [r7, #12]
 80346dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80346e0:	d00c      	beq.n	80346fc <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 80346e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80346e6:	d802      	bhi.n	80346ee <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80346e8:	2b00      	cmp	r3, #0
 80346ea:	d00a      	beq.n	8034702 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80346ec:	e082      	b.n	80347f4 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80346ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80346f2:	d047      	beq.n	8034784 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80346f4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80346f8:	d06f      	beq.n	80347da <HAL_RCCEx_GetPeriphCLKFreq+0x132>
 80346fa:	e07b      	b.n	80347f4 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80346fc:	4b8f      	ldr	r3, [pc, #572]	; (803493c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80346fe:	617b      	str	r3, [r7, #20]
          break;
 8034700:	e07b      	b.n	80347fa <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8034702:	4b8d      	ldr	r3, [pc, #564]	; (8034938 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8034704:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034708:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 803470c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8034710:	d109      	bne.n	8034726 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8034712:	4b89      	ldr	r3, [pc, #548]	; (8034938 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8034714:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034718:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 803471c:	4a87      	ldr	r2, [pc, #540]	; (803493c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 803471e:	fbb2 f3f3 	udiv	r3, r2, r3
 8034722:	613b      	str	r3, [r7, #16]
 8034724:	e019      	b.n	803475a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8034726:	4b84      	ldr	r3, [pc, #528]	; (8034938 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8034728:	685b      	ldr	r3, [r3, #4]
 803472a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 803472e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8034732:	d109      	bne.n	8034748 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8034734:	4b80      	ldr	r3, [pc, #512]	; (8034938 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8034736:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803473a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 803473e:	4a80      	ldr	r2, [pc, #512]	; (8034940 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8034740:	fbb2 f3f3 	udiv	r3, r2, r3
 8034744:	613b      	str	r3, [r7, #16]
 8034746:	e008      	b.n	803475a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8034748:	4b7b      	ldr	r3, [pc, #492]	; (8034938 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 803474a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803474e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8034752:	4a7c      	ldr	r2, [pc, #496]	; (8034944 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8034754:	fbb2 f3f3 	udiv	r3, r2, r3
 8034758:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 803475a:	4b77      	ldr	r3, [pc, #476]	; (8034938 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 803475c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034760:	099b      	lsrs	r3, r3, #6
 8034762:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8034766:	693b      	ldr	r3, [r7, #16]
 8034768:	fb02 f303 	mul.w	r3, r2, r3
 803476c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 803476e:	4b72      	ldr	r3, [pc, #456]	; (8034938 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8034770:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034774:	0f1b      	lsrs	r3, r3, #28
 8034776:	f003 0307 	and.w	r3, r3, #7
 803477a:	68ba      	ldr	r2, [r7, #8]
 803477c:	fbb2 f3f3 	udiv	r3, r2, r3
 8034780:	617b      	str	r3, [r7, #20]
          break;
 8034782:	e03a      	b.n	80347fa <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8034784:	4b6c      	ldr	r3, [pc, #432]	; (8034938 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8034786:	685b      	ldr	r3, [r3, #4]
 8034788:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 803478c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8034790:	d108      	bne.n	80347a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8034792:	4b69      	ldr	r3, [pc, #420]	; (8034938 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8034794:	685b      	ldr	r3, [r3, #4]
 8034796:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 803479a:	4a69      	ldr	r2, [pc, #420]	; (8034940 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 803479c:	fbb2 f3f3 	udiv	r3, r2, r3
 80347a0:	613b      	str	r3, [r7, #16]
 80347a2:	e007      	b.n	80347b4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80347a4:	4b64      	ldr	r3, [pc, #400]	; (8034938 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80347a6:	685b      	ldr	r3, [r3, #4]
 80347a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80347ac:	4a65      	ldr	r2, [pc, #404]	; (8034944 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80347ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80347b2:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80347b4:	4b60      	ldr	r3, [pc, #384]	; (8034938 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80347b6:	685b      	ldr	r3, [r3, #4]
 80347b8:	099b      	lsrs	r3, r3, #6
 80347ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80347be:	693b      	ldr	r3, [r7, #16]
 80347c0:	fb02 f303 	mul.w	r3, r2, r3
 80347c4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80347c6:	4b5c      	ldr	r3, [pc, #368]	; (8034938 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80347c8:	685b      	ldr	r3, [r3, #4]
 80347ca:	0f1b      	lsrs	r3, r3, #28
 80347cc:	f003 0307 	and.w	r3, r3, #7
 80347d0:	68ba      	ldr	r2, [r7, #8]
 80347d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80347d6:	617b      	str	r3, [r7, #20]
          break;
 80347d8:	e00f      	b.n	80347fa <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80347da:	4b57      	ldr	r3, [pc, #348]	; (8034938 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80347dc:	685b      	ldr	r3, [r3, #4]
 80347de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80347e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80347e6:	d102      	bne.n	80347ee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          {
            frequency = HSE_VALUE;
 80347e8:	4b55      	ldr	r3, [pc, #340]	; (8034940 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80347ea:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80347ec:	e005      	b.n	80347fa <HAL_RCCEx_GetPeriphCLKFreq+0x152>
            frequency = HSI_VALUE;
 80347ee:	4b55      	ldr	r3, [pc, #340]	; (8034944 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80347f0:	617b      	str	r3, [r7, #20]
          break;
 80347f2:	e002      	b.n	80347fa <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80347f4:	2300      	movs	r3, #0
 80347f6:	617b      	str	r3, [r7, #20]
          break;
 80347f8:	bf00      	nop
        }
      }
      break;
 80347fa:	e096      	b.n	803492a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 80347fc:	4b4e      	ldr	r3, [pc, #312]	; (8034938 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80347fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8034802:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8034806:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8034808:	68fb      	ldr	r3, [r7, #12]
 803480a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 803480e:	d00c      	beq.n	803482a <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8034810:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8034814:	d802      	bhi.n	803481c <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 8034816:	2b00      	cmp	r3, #0
 8034818:	d00a      	beq.n	8034830 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 803481a:	e082      	b.n	8034922 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 803481c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8034820:	d047      	beq.n	80348b2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8034822:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8034826:	d06f      	beq.n	8034908 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8034828:	e07b      	b.n	8034922 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 803482a:	4b44      	ldr	r3, [pc, #272]	; (803493c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 803482c:	617b      	str	r3, [r7, #20]
          break;
 803482e:	e07b      	b.n	8034928 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8034830:	4b41      	ldr	r3, [pc, #260]	; (8034938 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8034832:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 803483a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 803483e:	d109      	bne.n	8034854 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8034840:	4b3d      	ldr	r3, [pc, #244]	; (8034938 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8034842:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034846:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 803484a:	4a3c      	ldr	r2, [pc, #240]	; (803493c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 803484c:	fbb2 f3f3 	udiv	r3, r2, r3
 8034850:	613b      	str	r3, [r7, #16]
 8034852:	e019      	b.n	8034888 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8034854:	4b38      	ldr	r3, [pc, #224]	; (8034938 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8034856:	685b      	ldr	r3, [r3, #4]
 8034858:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 803485c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8034860:	d109      	bne.n	8034876 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8034862:	4b35      	ldr	r3, [pc, #212]	; (8034938 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8034864:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034868:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 803486c:	4a34      	ldr	r2, [pc, #208]	; (8034940 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 803486e:	fbb2 f3f3 	udiv	r3, r2, r3
 8034872:	613b      	str	r3, [r7, #16]
 8034874:	e008      	b.n	8034888 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8034876:	4b30      	ldr	r3, [pc, #192]	; (8034938 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8034878:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803487c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8034880:	4a30      	ldr	r2, [pc, #192]	; (8034944 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8034882:	fbb2 f3f3 	udiv	r3, r2, r3
 8034886:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8034888:	4b2b      	ldr	r3, [pc, #172]	; (8034938 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 803488a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803488e:	099b      	lsrs	r3, r3, #6
 8034890:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8034894:	693b      	ldr	r3, [r7, #16]
 8034896:	fb02 f303 	mul.w	r3, r2, r3
 803489a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 803489c:	4b26      	ldr	r3, [pc, #152]	; (8034938 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 803489e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80348a2:	0f1b      	lsrs	r3, r3, #28
 80348a4:	f003 0307 	and.w	r3, r3, #7
 80348a8:	68ba      	ldr	r2, [r7, #8]
 80348aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80348ae:	617b      	str	r3, [r7, #20]
          break;
 80348b0:	e03a      	b.n	8034928 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80348b2:	4b21      	ldr	r3, [pc, #132]	; (8034938 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80348b4:	685b      	ldr	r3, [r3, #4]
 80348b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80348ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80348be:	d108      	bne.n	80348d2 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80348c0:	4b1d      	ldr	r3, [pc, #116]	; (8034938 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80348c2:	685b      	ldr	r3, [r3, #4]
 80348c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80348c8:	4a1d      	ldr	r2, [pc, #116]	; (8034940 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80348ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80348ce:	613b      	str	r3, [r7, #16]
 80348d0:	e007      	b.n	80348e2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80348d2:	4b19      	ldr	r3, [pc, #100]	; (8034938 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80348d4:	685b      	ldr	r3, [r3, #4]
 80348d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80348da:	4a1a      	ldr	r2, [pc, #104]	; (8034944 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80348dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80348e0:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80348e2:	4b15      	ldr	r3, [pc, #84]	; (8034938 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80348e4:	685b      	ldr	r3, [r3, #4]
 80348e6:	099b      	lsrs	r3, r3, #6
 80348e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80348ec:	693b      	ldr	r3, [r7, #16]
 80348ee:	fb02 f303 	mul.w	r3, r2, r3
 80348f2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80348f4:	4b10      	ldr	r3, [pc, #64]	; (8034938 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80348f6:	685b      	ldr	r3, [r3, #4]
 80348f8:	0f1b      	lsrs	r3, r3, #28
 80348fa:	f003 0307 	and.w	r3, r3, #7
 80348fe:	68ba      	ldr	r2, [r7, #8]
 8034900:	fbb2 f3f3 	udiv	r3, r2, r3
 8034904:	617b      	str	r3, [r7, #20]
          break;
 8034906:	e00f      	b.n	8034928 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8034908:	4b0b      	ldr	r3, [pc, #44]	; (8034938 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 803490a:	685b      	ldr	r3, [r3, #4]
 803490c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8034910:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8034914:	d102      	bne.n	803491c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          {
            frequency = HSE_VALUE;
 8034916:	4b0a      	ldr	r3, [pc, #40]	; (8034940 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8034918:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 803491a:	e005      	b.n	8034928 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
            frequency = HSI_VALUE;
 803491c:	4b09      	ldr	r3, [pc, #36]	; (8034944 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 803491e:	617b      	str	r3, [r7, #20]
          break;
 8034920:	e002      	b.n	8034928 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8034922:	2300      	movs	r3, #0
 8034924:	617b      	str	r3, [r7, #20]
          break;
 8034926:	bf00      	nop
        }
      }
      break;
 8034928:	bf00      	nop
    }
  }
  return frequency;
 803492a:	697b      	ldr	r3, [r7, #20]
}
 803492c:	4618      	mov	r0, r3
 803492e:	371c      	adds	r7, #28
 8034930:	46bd      	mov	sp, r7
 8034932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034936:	4770      	bx	lr
 8034938:	40023800 	.word	0x40023800
 803493c:	00bb8000 	.word	0x00bb8000
 8034940:	007a1200 	.word	0x007a1200
 8034944:	00f42400 	.word	0x00f42400

08034948 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8034948:	b580      	push	{r7, lr}
 803494a:	b086      	sub	sp, #24
 803494c:	af00      	add	r7, sp, #0
 803494e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8034950:	2300      	movs	r3, #0
 8034952:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8034954:	687b      	ldr	r3, [r7, #4]
 8034956:	681b      	ldr	r3, [r3, #0]
 8034958:	f003 0301 	and.w	r3, r3, #1
 803495c:	2b00      	cmp	r3, #0
 803495e:	d075      	beq.n	8034a4c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8034960:	4ba2      	ldr	r3, [pc, #648]	; (8034bec <HAL_RCC_OscConfig+0x2a4>)
 8034962:	689b      	ldr	r3, [r3, #8]
 8034964:	f003 030c 	and.w	r3, r3, #12
 8034968:	2b04      	cmp	r3, #4
 803496a:	d00c      	beq.n	8034986 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 803496c:	4b9f      	ldr	r3, [pc, #636]	; (8034bec <HAL_RCC_OscConfig+0x2a4>)
 803496e:	689b      	ldr	r3, [r3, #8]
 8034970:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8034974:	2b08      	cmp	r3, #8
 8034976:	d112      	bne.n	803499e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8034978:	4b9c      	ldr	r3, [pc, #624]	; (8034bec <HAL_RCC_OscConfig+0x2a4>)
 803497a:	685b      	ldr	r3, [r3, #4]
 803497c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8034980:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8034984:	d10b      	bne.n	803499e <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8034986:	4b99      	ldr	r3, [pc, #612]	; (8034bec <HAL_RCC_OscConfig+0x2a4>)
 8034988:	681b      	ldr	r3, [r3, #0]
 803498a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 803498e:	2b00      	cmp	r3, #0
 8034990:	d05b      	beq.n	8034a4a <HAL_RCC_OscConfig+0x102>
 8034992:	687b      	ldr	r3, [r7, #4]
 8034994:	685b      	ldr	r3, [r3, #4]
 8034996:	2b00      	cmp	r3, #0
 8034998:	d157      	bne.n	8034a4a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 803499a:	2301      	movs	r3, #1
 803499c:	e20b      	b.n	8034db6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 803499e:	687b      	ldr	r3, [r7, #4]
 80349a0:	685b      	ldr	r3, [r3, #4]
 80349a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80349a6:	d106      	bne.n	80349b6 <HAL_RCC_OscConfig+0x6e>
 80349a8:	4b90      	ldr	r3, [pc, #576]	; (8034bec <HAL_RCC_OscConfig+0x2a4>)
 80349aa:	681b      	ldr	r3, [r3, #0]
 80349ac:	4a8f      	ldr	r2, [pc, #572]	; (8034bec <HAL_RCC_OscConfig+0x2a4>)
 80349ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80349b2:	6013      	str	r3, [r2, #0]
 80349b4:	e01d      	b.n	80349f2 <HAL_RCC_OscConfig+0xaa>
 80349b6:	687b      	ldr	r3, [r7, #4]
 80349b8:	685b      	ldr	r3, [r3, #4]
 80349ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80349be:	d10c      	bne.n	80349da <HAL_RCC_OscConfig+0x92>
 80349c0:	4b8a      	ldr	r3, [pc, #552]	; (8034bec <HAL_RCC_OscConfig+0x2a4>)
 80349c2:	681b      	ldr	r3, [r3, #0]
 80349c4:	4a89      	ldr	r2, [pc, #548]	; (8034bec <HAL_RCC_OscConfig+0x2a4>)
 80349c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80349ca:	6013      	str	r3, [r2, #0]
 80349cc:	4b87      	ldr	r3, [pc, #540]	; (8034bec <HAL_RCC_OscConfig+0x2a4>)
 80349ce:	681b      	ldr	r3, [r3, #0]
 80349d0:	4a86      	ldr	r2, [pc, #536]	; (8034bec <HAL_RCC_OscConfig+0x2a4>)
 80349d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80349d6:	6013      	str	r3, [r2, #0]
 80349d8:	e00b      	b.n	80349f2 <HAL_RCC_OscConfig+0xaa>
 80349da:	4b84      	ldr	r3, [pc, #528]	; (8034bec <HAL_RCC_OscConfig+0x2a4>)
 80349dc:	681b      	ldr	r3, [r3, #0]
 80349de:	4a83      	ldr	r2, [pc, #524]	; (8034bec <HAL_RCC_OscConfig+0x2a4>)
 80349e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80349e4:	6013      	str	r3, [r2, #0]
 80349e6:	4b81      	ldr	r3, [pc, #516]	; (8034bec <HAL_RCC_OscConfig+0x2a4>)
 80349e8:	681b      	ldr	r3, [r3, #0]
 80349ea:	4a80      	ldr	r2, [pc, #512]	; (8034bec <HAL_RCC_OscConfig+0x2a4>)
 80349ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80349f0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80349f2:	687b      	ldr	r3, [r7, #4]
 80349f4:	685b      	ldr	r3, [r3, #4]
 80349f6:	2b00      	cmp	r3, #0
 80349f8:	d013      	beq.n	8034a22 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80349fa:	f7f7 fcb7 	bl	802c36c <HAL_GetTick>
 80349fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8034a00:	e008      	b.n	8034a14 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8034a02:	f7f7 fcb3 	bl	802c36c <HAL_GetTick>
 8034a06:	4602      	mov	r2, r0
 8034a08:	693b      	ldr	r3, [r7, #16]
 8034a0a:	1ad3      	subs	r3, r2, r3
 8034a0c:	2b64      	cmp	r3, #100	; 0x64
 8034a0e:	d901      	bls.n	8034a14 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8034a10:	2303      	movs	r3, #3
 8034a12:	e1d0      	b.n	8034db6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8034a14:	4b75      	ldr	r3, [pc, #468]	; (8034bec <HAL_RCC_OscConfig+0x2a4>)
 8034a16:	681b      	ldr	r3, [r3, #0]
 8034a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8034a1c:	2b00      	cmp	r3, #0
 8034a1e:	d0f0      	beq.n	8034a02 <HAL_RCC_OscConfig+0xba>
 8034a20:	e014      	b.n	8034a4c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8034a22:	f7f7 fca3 	bl	802c36c <HAL_GetTick>
 8034a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8034a28:	e008      	b.n	8034a3c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8034a2a:	f7f7 fc9f 	bl	802c36c <HAL_GetTick>
 8034a2e:	4602      	mov	r2, r0
 8034a30:	693b      	ldr	r3, [r7, #16]
 8034a32:	1ad3      	subs	r3, r2, r3
 8034a34:	2b64      	cmp	r3, #100	; 0x64
 8034a36:	d901      	bls.n	8034a3c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8034a38:	2303      	movs	r3, #3
 8034a3a:	e1bc      	b.n	8034db6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8034a3c:	4b6b      	ldr	r3, [pc, #428]	; (8034bec <HAL_RCC_OscConfig+0x2a4>)
 8034a3e:	681b      	ldr	r3, [r3, #0]
 8034a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8034a44:	2b00      	cmp	r3, #0
 8034a46:	d1f0      	bne.n	8034a2a <HAL_RCC_OscConfig+0xe2>
 8034a48:	e000      	b.n	8034a4c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8034a4a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8034a4c:	687b      	ldr	r3, [r7, #4]
 8034a4e:	681b      	ldr	r3, [r3, #0]
 8034a50:	f003 0302 	and.w	r3, r3, #2
 8034a54:	2b00      	cmp	r3, #0
 8034a56:	d063      	beq.n	8034b20 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8034a58:	4b64      	ldr	r3, [pc, #400]	; (8034bec <HAL_RCC_OscConfig+0x2a4>)
 8034a5a:	689b      	ldr	r3, [r3, #8]
 8034a5c:	f003 030c 	and.w	r3, r3, #12
 8034a60:	2b00      	cmp	r3, #0
 8034a62:	d00b      	beq.n	8034a7c <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8034a64:	4b61      	ldr	r3, [pc, #388]	; (8034bec <HAL_RCC_OscConfig+0x2a4>)
 8034a66:	689b      	ldr	r3, [r3, #8]
 8034a68:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8034a6c:	2b08      	cmp	r3, #8
 8034a6e:	d11c      	bne.n	8034aaa <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8034a70:	4b5e      	ldr	r3, [pc, #376]	; (8034bec <HAL_RCC_OscConfig+0x2a4>)
 8034a72:	685b      	ldr	r3, [r3, #4]
 8034a74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8034a78:	2b00      	cmp	r3, #0
 8034a7a:	d116      	bne.n	8034aaa <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8034a7c:	4b5b      	ldr	r3, [pc, #364]	; (8034bec <HAL_RCC_OscConfig+0x2a4>)
 8034a7e:	681b      	ldr	r3, [r3, #0]
 8034a80:	f003 0302 	and.w	r3, r3, #2
 8034a84:	2b00      	cmp	r3, #0
 8034a86:	d005      	beq.n	8034a94 <HAL_RCC_OscConfig+0x14c>
 8034a88:	687b      	ldr	r3, [r7, #4]
 8034a8a:	68db      	ldr	r3, [r3, #12]
 8034a8c:	2b01      	cmp	r3, #1
 8034a8e:	d001      	beq.n	8034a94 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8034a90:	2301      	movs	r3, #1
 8034a92:	e190      	b.n	8034db6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8034a94:	4b55      	ldr	r3, [pc, #340]	; (8034bec <HAL_RCC_OscConfig+0x2a4>)
 8034a96:	681b      	ldr	r3, [r3, #0]
 8034a98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8034a9c:	687b      	ldr	r3, [r7, #4]
 8034a9e:	691b      	ldr	r3, [r3, #16]
 8034aa0:	00db      	lsls	r3, r3, #3
 8034aa2:	4952      	ldr	r1, [pc, #328]	; (8034bec <HAL_RCC_OscConfig+0x2a4>)
 8034aa4:	4313      	orrs	r3, r2
 8034aa6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8034aa8:	e03a      	b.n	8034b20 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8034aaa:	687b      	ldr	r3, [r7, #4]
 8034aac:	68db      	ldr	r3, [r3, #12]
 8034aae:	2b00      	cmp	r3, #0
 8034ab0:	d020      	beq.n	8034af4 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8034ab2:	4b4f      	ldr	r3, [pc, #316]	; (8034bf0 <HAL_RCC_OscConfig+0x2a8>)
 8034ab4:	2201      	movs	r2, #1
 8034ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8034ab8:	f7f7 fc58 	bl	802c36c <HAL_GetTick>
 8034abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8034abe:	e008      	b.n	8034ad2 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8034ac0:	f7f7 fc54 	bl	802c36c <HAL_GetTick>
 8034ac4:	4602      	mov	r2, r0
 8034ac6:	693b      	ldr	r3, [r7, #16]
 8034ac8:	1ad3      	subs	r3, r2, r3
 8034aca:	2b02      	cmp	r3, #2
 8034acc:	d901      	bls.n	8034ad2 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8034ace:	2303      	movs	r3, #3
 8034ad0:	e171      	b.n	8034db6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8034ad2:	4b46      	ldr	r3, [pc, #280]	; (8034bec <HAL_RCC_OscConfig+0x2a4>)
 8034ad4:	681b      	ldr	r3, [r3, #0]
 8034ad6:	f003 0302 	and.w	r3, r3, #2
 8034ada:	2b00      	cmp	r3, #0
 8034adc:	d0f0      	beq.n	8034ac0 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8034ade:	4b43      	ldr	r3, [pc, #268]	; (8034bec <HAL_RCC_OscConfig+0x2a4>)
 8034ae0:	681b      	ldr	r3, [r3, #0]
 8034ae2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8034ae6:	687b      	ldr	r3, [r7, #4]
 8034ae8:	691b      	ldr	r3, [r3, #16]
 8034aea:	00db      	lsls	r3, r3, #3
 8034aec:	493f      	ldr	r1, [pc, #252]	; (8034bec <HAL_RCC_OscConfig+0x2a4>)
 8034aee:	4313      	orrs	r3, r2
 8034af0:	600b      	str	r3, [r1, #0]
 8034af2:	e015      	b.n	8034b20 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8034af4:	4b3e      	ldr	r3, [pc, #248]	; (8034bf0 <HAL_RCC_OscConfig+0x2a8>)
 8034af6:	2200      	movs	r2, #0
 8034af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8034afa:	f7f7 fc37 	bl	802c36c <HAL_GetTick>
 8034afe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8034b00:	e008      	b.n	8034b14 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8034b02:	f7f7 fc33 	bl	802c36c <HAL_GetTick>
 8034b06:	4602      	mov	r2, r0
 8034b08:	693b      	ldr	r3, [r7, #16]
 8034b0a:	1ad3      	subs	r3, r2, r3
 8034b0c:	2b02      	cmp	r3, #2
 8034b0e:	d901      	bls.n	8034b14 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8034b10:	2303      	movs	r3, #3
 8034b12:	e150      	b.n	8034db6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8034b14:	4b35      	ldr	r3, [pc, #212]	; (8034bec <HAL_RCC_OscConfig+0x2a4>)
 8034b16:	681b      	ldr	r3, [r3, #0]
 8034b18:	f003 0302 	and.w	r3, r3, #2
 8034b1c:	2b00      	cmp	r3, #0
 8034b1e:	d1f0      	bne.n	8034b02 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8034b20:	687b      	ldr	r3, [r7, #4]
 8034b22:	681b      	ldr	r3, [r3, #0]
 8034b24:	f003 0308 	and.w	r3, r3, #8
 8034b28:	2b00      	cmp	r3, #0
 8034b2a:	d030      	beq.n	8034b8e <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8034b2c:	687b      	ldr	r3, [r7, #4]
 8034b2e:	695b      	ldr	r3, [r3, #20]
 8034b30:	2b00      	cmp	r3, #0
 8034b32:	d016      	beq.n	8034b62 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8034b34:	4b2f      	ldr	r3, [pc, #188]	; (8034bf4 <HAL_RCC_OscConfig+0x2ac>)
 8034b36:	2201      	movs	r2, #1
 8034b38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8034b3a:	f7f7 fc17 	bl	802c36c <HAL_GetTick>
 8034b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8034b40:	e008      	b.n	8034b54 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8034b42:	f7f7 fc13 	bl	802c36c <HAL_GetTick>
 8034b46:	4602      	mov	r2, r0
 8034b48:	693b      	ldr	r3, [r7, #16]
 8034b4a:	1ad3      	subs	r3, r2, r3
 8034b4c:	2b02      	cmp	r3, #2
 8034b4e:	d901      	bls.n	8034b54 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8034b50:	2303      	movs	r3, #3
 8034b52:	e130      	b.n	8034db6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8034b54:	4b25      	ldr	r3, [pc, #148]	; (8034bec <HAL_RCC_OscConfig+0x2a4>)
 8034b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8034b58:	f003 0302 	and.w	r3, r3, #2
 8034b5c:	2b00      	cmp	r3, #0
 8034b5e:	d0f0      	beq.n	8034b42 <HAL_RCC_OscConfig+0x1fa>
 8034b60:	e015      	b.n	8034b8e <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8034b62:	4b24      	ldr	r3, [pc, #144]	; (8034bf4 <HAL_RCC_OscConfig+0x2ac>)
 8034b64:	2200      	movs	r2, #0
 8034b66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8034b68:	f7f7 fc00 	bl	802c36c <HAL_GetTick>
 8034b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8034b6e:	e008      	b.n	8034b82 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8034b70:	f7f7 fbfc 	bl	802c36c <HAL_GetTick>
 8034b74:	4602      	mov	r2, r0
 8034b76:	693b      	ldr	r3, [r7, #16]
 8034b78:	1ad3      	subs	r3, r2, r3
 8034b7a:	2b02      	cmp	r3, #2
 8034b7c:	d901      	bls.n	8034b82 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8034b7e:	2303      	movs	r3, #3
 8034b80:	e119      	b.n	8034db6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8034b82:	4b1a      	ldr	r3, [pc, #104]	; (8034bec <HAL_RCC_OscConfig+0x2a4>)
 8034b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8034b86:	f003 0302 	and.w	r3, r3, #2
 8034b8a:	2b00      	cmp	r3, #0
 8034b8c:	d1f0      	bne.n	8034b70 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8034b8e:	687b      	ldr	r3, [r7, #4]
 8034b90:	681b      	ldr	r3, [r3, #0]
 8034b92:	f003 0304 	and.w	r3, r3, #4
 8034b96:	2b00      	cmp	r3, #0
 8034b98:	f000 809f 	beq.w	8034cda <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8034b9c:	2300      	movs	r3, #0
 8034b9e:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8034ba0:	4b12      	ldr	r3, [pc, #72]	; (8034bec <HAL_RCC_OscConfig+0x2a4>)
 8034ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8034ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8034ba8:	2b00      	cmp	r3, #0
 8034baa:	d10f      	bne.n	8034bcc <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8034bac:	2300      	movs	r3, #0
 8034bae:	60fb      	str	r3, [r7, #12]
 8034bb0:	4b0e      	ldr	r3, [pc, #56]	; (8034bec <HAL_RCC_OscConfig+0x2a4>)
 8034bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8034bb4:	4a0d      	ldr	r2, [pc, #52]	; (8034bec <HAL_RCC_OscConfig+0x2a4>)
 8034bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8034bba:	6413      	str	r3, [r2, #64]	; 0x40
 8034bbc:	4b0b      	ldr	r3, [pc, #44]	; (8034bec <HAL_RCC_OscConfig+0x2a4>)
 8034bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8034bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8034bc4:	60fb      	str	r3, [r7, #12]
 8034bc6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8034bc8:	2301      	movs	r3, #1
 8034bca:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8034bcc:	4b0a      	ldr	r3, [pc, #40]	; (8034bf8 <HAL_RCC_OscConfig+0x2b0>)
 8034bce:	681b      	ldr	r3, [r3, #0]
 8034bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8034bd4:	2b00      	cmp	r3, #0
 8034bd6:	d120      	bne.n	8034c1a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8034bd8:	4b07      	ldr	r3, [pc, #28]	; (8034bf8 <HAL_RCC_OscConfig+0x2b0>)
 8034bda:	681b      	ldr	r3, [r3, #0]
 8034bdc:	4a06      	ldr	r2, [pc, #24]	; (8034bf8 <HAL_RCC_OscConfig+0x2b0>)
 8034bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8034be2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8034be4:	f7f7 fbc2 	bl	802c36c <HAL_GetTick>
 8034be8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8034bea:	e010      	b.n	8034c0e <HAL_RCC_OscConfig+0x2c6>
 8034bec:	40023800 	.word	0x40023800
 8034bf0:	42470000 	.word	0x42470000
 8034bf4:	42470e80 	.word	0x42470e80
 8034bf8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8034bfc:	f7f7 fbb6 	bl	802c36c <HAL_GetTick>
 8034c00:	4602      	mov	r2, r0
 8034c02:	693b      	ldr	r3, [r7, #16]
 8034c04:	1ad3      	subs	r3, r2, r3
 8034c06:	2b02      	cmp	r3, #2
 8034c08:	d901      	bls.n	8034c0e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8034c0a:	2303      	movs	r3, #3
 8034c0c:	e0d3      	b.n	8034db6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8034c0e:	4b6c      	ldr	r3, [pc, #432]	; (8034dc0 <HAL_RCC_OscConfig+0x478>)
 8034c10:	681b      	ldr	r3, [r3, #0]
 8034c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8034c16:	2b00      	cmp	r3, #0
 8034c18:	d0f0      	beq.n	8034bfc <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8034c1a:	687b      	ldr	r3, [r7, #4]
 8034c1c:	689b      	ldr	r3, [r3, #8]
 8034c1e:	2b01      	cmp	r3, #1
 8034c20:	d106      	bne.n	8034c30 <HAL_RCC_OscConfig+0x2e8>
 8034c22:	4b68      	ldr	r3, [pc, #416]	; (8034dc4 <HAL_RCC_OscConfig+0x47c>)
 8034c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8034c26:	4a67      	ldr	r2, [pc, #412]	; (8034dc4 <HAL_RCC_OscConfig+0x47c>)
 8034c28:	f043 0301 	orr.w	r3, r3, #1
 8034c2c:	6713      	str	r3, [r2, #112]	; 0x70
 8034c2e:	e01c      	b.n	8034c6a <HAL_RCC_OscConfig+0x322>
 8034c30:	687b      	ldr	r3, [r7, #4]
 8034c32:	689b      	ldr	r3, [r3, #8]
 8034c34:	2b05      	cmp	r3, #5
 8034c36:	d10c      	bne.n	8034c52 <HAL_RCC_OscConfig+0x30a>
 8034c38:	4b62      	ldr	r3, [pc, #392]	; (8034dc4 <HAL_RCC_OscConfig+0x47c>)
 8034c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8034c3c:	4a61      	ldr	r2, [pc, #388]	; (8034dc4 <HAL_RCC_OscConfig+0x47c>)
 8034c3e:	f043 0304 	orr.w	r3, r3, #4
 8034c42:	6713      	str	r3, [r2, #112]	; 0x70
 8034c44:	4b5f      	ldr	r3, [pc, #380]	; (8034dc4 <HAL_RCC_OscConfig+0x47c>)
 8034c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8034c48:	4a5e      	ldr	r2, [pc, #376]	; (8034dc4 <HAL_RCC_OscConfig+0x47c>)
 8034c4a:	f043 0301 	orr.w	r3, r3, #1
 8034c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8034c50:	e00b      	b.n	8034c6a <HAL_RCC_OscConfig+0x322>
 8034c52:	4b5c      	ldr	r3, [pc, #368]	; (8034dc4 <HAL_RCC_OscConfig+0x47c>)
 8034c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8034c56:	4a5b      	ldr	r2, [pc, #364]	; (8034dc4 <HAL_RCC_OscConfig+0x47c>)
 8034c58:	f023 0301 	bic.w	r3, r3, #1
 8034c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8034c5e:	4b59      	ldr	r3, [pc, #356]	; (8034dc4 <HAL_RCC_OscConfig+0x47c>)
 8034c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8034c62:	4a58      	ldr	r2, [pc, #352]	; (8034dc4 <HAL_RCC_OscConfig+0x47c>)
 8034c64:	f023 0304 	bic.w	r3, r3, #4
 8034c68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8034c6a:	687b      	ldr	r3, [r7, #4]
 8034c6c:	689b      	ldr	r3, [r3, #8]
 8034c6e:	2b00      	cmp	r3, #0
 8034c70:	d015      	beq.n	8034c9e <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8034c72:	f7f7 fb7b 	bl	802c36c <HAL_GetTick>
 8034c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8034c78:	e00a      	b.n	8034c90 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8034c7a:	f7f7 fb77 	bl	802c36c <HAL_GetTick>
 8034c7e:	4602      	mov	r2, r0
 8034c80:	693b      	ldr	r3, [r7, #16]
 8034c82:	1ad3      	subs	r3, r2, r3
 8034c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8034c88:	4293      	cmp	r3, r2
 8034c8a:	d901      	bls.n	8034c90 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8034c8c:	2303      	movs	r3, #3
 8034c8e:	e092      	b.n	8034db6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8034c90:	4b4c      	ldr	r3, [pc, #304]	; (8034dc4 <HAL_RCC_OscConfig+0x47c>)
 8034c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8034c94:	f003 0302 	and.w	r3, r3, #2
 8034c98:	2b00      	cmp	r3, #0
 8034c9a:	d0ee      	beq.n	8034c7a <HAL_RCC_OscConfig+0x332>
 8034c9c:	e014      	b.n	8034cc8 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8034c9e:	f7f7 fb65 	bl	802c36c <HAL_GetTick>
 8034ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8034ca4:	e00a      	b.n	8034cbc <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8034ca6:	f7f7 fb61 	bl	802c36c <HAL_GetTick>
 8034caa:	4602      	mov	r2, r0
 8034cac:	693b      	ldr	r3, [r7, #16]
 8034cae:	1ad3      	subs	r3, r2, r3
 8034cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8034cb4:	4293      	cmp	r3, r2
 8034cb6:	d901      	bls.n	8034cbc <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8034cb8:	2303      	movs	r3, #3
 8034cba:	e07c      	b.n	8034db6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8034cbc:	4b41      	ldr	r3, [pc, #260]	; (8034dc4 <HAL_RCC_OscConfig+0x47c>)
 8034cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8034cc0:	f003 0302 	and.w	r3, r3, #2
 8034cc4:	2b00      	cmp	r3, #0
 8034cc6:	d1ee      	bne.n	8034ca6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8034cc8:	7dfb      	ldrb	r3, [r7, #23]
 8034cca:	2b01      	cmp	r3, #1
 8034ccc:	d105      	bne.n	8034cda <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8034cce:	4b3d      	ldr	r3, [pc, #244]	; (8034dc4 <HAL_RCC_OscConfig+0x47c>)
 8034cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8034cd2:	4a3c      	ldr	r2, [pc, #240]	; (8034dc4 <HAL_RCC_OscConfig+0x47c>)
 8034cd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8034cd8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8034cda:	687b      	ldr	r3, [r7, #4]
 8034cdc:	699b      	ldr	r3, [r3, #24]
 8034cde:	2b00      	cmp	r3, #0
 8034ce0:	d068      	beq.n	8034db4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8034ce2:	4b38      	ldr	r3, [pc, #224]	; (8034dc4 <HAL_RCC_OscConfig+0x47c>)
 8034ce4:	689b      	ldr	r3, [r3, #8]
 8034ce6:	f003 030c 	and.w	r3, r3, #12
 8034cea:	2b08      	cmp	r3, #8
 8034cec:	d060      	beq.n	8034db0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8034cee:	687b      	ldr	r3, [r7, #4]
 8034cf0:	699b      	ldr	r3, [r3, #24]
 8034cf2:	2b02      	cmp	r3, #2
 8034cf4:	d145      	bne.n	8034d82 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8034cf6:	4b34      	ldr	r3, [pc, #208]	; (8034dc8 <HAL_RCC_OscConfig+0x480>)
 8034cf8:	2200      	movs	r2, #0
 8034cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8034cfc:	f7f7 fb36 	bl	802c36c <HAL_GetTick>
 8034d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8034d02:	e008      	b.n	8034d16 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8034d04:	f7f7 fb32 	bl	802c36c <HAL_GetTick>
 8034d08:	4602      	mov	r2, r0
 8034d0a:	693b      	ldr	r3, [r7, #16]
 8034d0c:	1ad3      	subs	r3, r2, r3
 8034d0e:	2b02      	cmp	r3, #2
 8034d10:	d901      	bls.n	8034d16 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8034d12:	2303      	movs	r3, #3
 8034d14:	e04f      	b.n	8034db6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8034d16:	4b2b      	ldr	r3, [pc, #172]	; (8034dc4 <HAL_RCC_OscConfig+0x47c>)
 8034d18:	681b      	ldr	r3, [r3, #0]
 8034d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8034d1e:	2b00      	cmp	r3, #0
 8034d20:	d1f0      	bne.n	8034d04 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8034d22:	687b      	ldr	r3, [r7, #4]
 8034d24:	69da      	ldr	r2, [r3, #28]
 8034d26:	687b      	ldr	r3, [r7, #4]
 8034d28:	6a1b      	ldr	r3, [r3, #32]
 8034d2a:	431a      	orrs	r2, r3
 8034d2c:	687b      	ldr	r3, [r7, #4]
 8034d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8034d30:	019b      	lsls	r3, r3, #6
 8034d32:	431a      	orrs	r2, r3
 8034d34:	687b      	ldr	r3, [r7, #4]
 8034d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8034d38:	085b      	lsrs	r3, r3, #1
 8034d3a:	3b01      	subs	r3, #1
 8034d3c:	041b      	lsls	r3, r3, #16
 8034d3e:	431a      	orrs	r2, r3
 8034d40:	687b      	ldr	r3, [r7, #4]
 8034d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8034d44:	061b      	lsls	r3, r3, #24
 8034d46:	431a      	orrs	r2, r3
 8034d48:	687b      	ldr	r3, [r7, #4]
 8034d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8034d4c:	071b      	lsls	r3, r3, #28
 8034d4e:	491d      	ldr	r1, [pc, #116]	; (8034dc4 <HAL_RCC_OscConfig+0x47c>)
 8034d50:	4313      	orrs	r3, r2
 8034d52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8034d54:	4b1c      	ldr	r3, [pc, #112]	; (8034dc8 <HAL_RCC_OscConfig+0x480>)
 8034d56:	2201      	movs	r2, #1
 8034d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8034d5a:	f7f7 fb07 	bl	802c36c <HAL_GetTick>
 8034d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8034d60:	e008      	b.n	8034d74 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8034d62:	f7f7 fb03 	bl	802c36c <HAL_GetTick>
 8034d66:	4602      	mov	r2, r0
 8034d68:	693b      	ldr	r3, [r7, #16]
 8034d6a:	1ad3      	subs	r3, r2, r3
 8034d6c:	2b02      	cmp	r3, #2
 8034d6e:	d901      	bls.n	8034d74 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8034d70:	2303      	movs	r3, #3
 8034d72:	e020      	b.n	8034db6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8034d74:	4b13      	ldr	r3, [pc, #76]	; (8034dc4 <HAL_RCC_OscConfig+0x47c>)
 8034d76:	681b      	ldr	r3, [r3, #0]
 8034d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8034d7c:	2b00      	cmp	r3, #0
 8034d7e:	d0f0      	beq.n	8034d62 <HAL_RCC_OscConfig+0x41a>
 8034d80:	e018      	b.n	8034db4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8034d82:	4b11      	ldr	r3, [pc, #68]	; (8034dc8 <HAL_RCC_OscConfig+0x480>)
 8034d84:	2200      	movs	r2, #0
 8034d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8034d88:	f7f7 faf0 	bl	802c36c <HAL_GetTick>
 8034d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8034d8e:	e008      	b.n	8034da2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8034d90:	f7f7 faec 	bl	802c36c <HAL_GetTick>
 8034d94:	4602      	mov	r2, r0
 8034d96:	693b      	ldr	r3, [r7, #16]
 8034d98:	1ad3      	subs	r3, r2, r3
 8034d9a:	2b02      	cmp	r3, #2
 8034d9c:	d901      	bls.n	8034da2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8034d9e:	2303      	movs	r3, #3
 8034da0:	e009      	b.n	8034db6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8034da2:	4b08      	ldr	r3, [pc, #32]	; (8034dc4 <HAL_RCC_OscConfig+0x47c>)
 8034da4:	681b      	ldr	r3, [r3, #0]
 8034da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8034daa:	2b00      	cmp	r3, #0
 8034dac:	d1f0      	bne.n	8034d90 <HAL_RCC_OscConfig+0x448>
 8034dae:	e001      	b.n	8034db4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8034db0:	2301      	movs	r3, #1
 8034db2:	e000      	b.n	8034db6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8034db4:	2300      	movs	r3, #0
}
 8034db6:	4618      	mov	r0, r3
 8034db8:	3718      	adds	r7, #24
 8034dba:	46bd      	mov	sp, r7
 8034dbc:	bd80      	pop	{r7, pc}
 8034dbe:	bf00      	nop
 8034dc0:	40007000 	.word	0x40007000
 8034dc4:	40023800 	.word	0x40023800
 8034dc8:	42470060 	.word	0x42470060

08034dcc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8034dcc:	b580      	push	{r7, lr}
 8034dce:	b082      	sub	sp, #8
 8034dd0:	af00      	add	r7, sp, #0
 8034dd2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8034dd4:	687b      	ldr	r3, [r7, #4]
 8034dd6:	2b00      	cmp	r3, #0
 8034dd8:	d101      	bne.n	8034dde <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8034dda:	2301      	movs	r3, #1
 8034ddc:	e01c      	b.n	8034e18 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8034dde:	687b      	ldr	r3, [r7, #4]
 8034de0:	795b      	ldrb	r3, [r3, #5]
 8034de2:	b2db      	uxtb	r3, r3
 8034de4:	2b00      	cmp	r3, #0
 8034de6:	d105      	bne.n	8034df4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8034de8:	687b      	ldr	r3, [r7, #4]
 8034dea:	2200      	movs	r2, #0
 8034dec:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8034dee:	6878      	ldr	r0, [r7, #4]
 8034df0:	f7f6 fe70 	bl	802bad4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8034df4:	687b      	ldr	r3, [r7, #4]
 8034df6:	2202      	movs	r2, #2
 8034df8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8034dfa:	687b      	ldr	r3, [r7, #4]
 8034dfc:	681b      	ldr	r3, [r3, #0]
 8034dfe:	681a      	ldr	r2, [r3, #0]
 8034e00:	687b      	ldr	r3, [r7, #4]
 8034e02:	681b      	ldr	r3, [r3, #0]
 8034e04:	f042 0204 	orr.w	r2, r2, #4
 8034e08:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8034e0a:	687b      	ldr	r3, [r7, #4]
 8034e0c:	2201      	movs	r2, #1
 8034e0e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8034e10:	687b      	ldr	r3, [r7, #4]
 8034e12:	2200      	movs	r2, #0
 8034e14:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8034e16:	2300      	movs	r3, #0
}
 8034e18:	4618      	mov	r0, r3
 8034e1a:	3708      	adds	r7, #8
 8034e1c:	46bd      	mov	sp, r7
 8034e1e:	bd80      	pop	{r7, pc}

08034e20 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8034e20:	b580      	push	{r7, lr}
 8034e22:	b084      	sub	sp, #16
 8034e24:	af00      	add	r7, sp, #0
 8034e26:	6078      	str	r0, [r7, #4]
 8034e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8034e2a:	2300      	movs	r3, #0
 8034e2c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8034e2e:	687b      	ldr	r3, [r7, #4]
 8034e30:	791b      	ldrb	r3, [r3, #4]
 8034e32:	2b01      	cmp	r3, #1
 8034e34:	d101      	bne.n	8034e3a <HAL_RNG_GenerateRandomNumber+0x1a>
 8034e36:	2302      	movs	r3, #2
 8034e38:	e03d      	b.n	8034eb6 <HAL_RNG_GenerateRandomNumber+0x96>
 8034e3a:	687b      	ldr	r3, [r7, #4]
 8034e3c:	2201      	movs	r2, #1
 8034e3e:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8034e40:	687b      	ldr	r3, [r7, #4]
 8034e42:	795b      	ldrb	r3, [r3, #5]
 8034e44:	b2db      	uxtb	r3, r3
 8034e46:	2b01      	cmp	r3, #1
 8034e48:	d12c      	bne.n	8034ea4 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8034e4a:	687b      	ldr	r3, [r7, #4]
 8034e4c:	2202      	movs	r2, #2
 8034e4e:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8034e50:	f7f7 fa8c 	bl	802c36c <HAL_GetTick>
 8034e54:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8034e56:	e011      	b.n	8034e7c <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8034e58:	f7f7 fa88 	bl	802c36c <HAL_GetTick>
 8034e5c:	4602      	mov	r2, r0
 8034e5e:	68bb      	ldr	r3, [r7, #8]
 8034e60:	1ad3      	subs	r3, r2, r3
 8034e62:	2b02      	cmp	r3, #2
 8034e64:	d90a      	bls.n	8034e7c <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8034e66:	687b      	ldr	r3, [r7, #4]
 8034e68:	2201      	movs	r2, #1
 8034e6a:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8034e6c:	687b      	ldr	r3, [r7, #4]
 8034e6e:	2202      	movs	r2, #2
 8034e70:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8034e72:	687b      	ldr	r3, [r7, #4]
 8034e74:	2200      	movs	r2, #0
 8034e76:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 8034e78:	2301      	movs	r3, #1
 8034e7a:	e01c      	b.n	8034eb6 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8034e7c:	687b      	ldr	r3, [r7, #4]
 8034e7e:	681b      	ldr	r3, [r3, #0]
 8034e80:	685b      	ldr	r3, [r3, #4]
 8034e82:	f003 0301 	and.w	r3, r3, #1
 8034e86:	2b01      	cmp	r3, #1
 8034e88:	d1e6      	bne.n	8034e58 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8034e8a:	687b      	ldr	r3, [r7, #4]
 8034e8c:	681b      	ldr	r3, [r3, #0]
 8034e8e:	689a      	ldr	r2, [r3, #8]
 8034e90:	687b      	ldr	r3, [r7, #4]
 8034e92:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8034e94:	687b      	ldr	r3, [r7, #4]
 8034e96:	68da      	ldr	r2, [r3, #12]
 8034e98:	683b      	ldr	r3, [r7, #0]
 8034e9a:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8034e9c:	687b      	ldr	r3, [r7, #4]
 8034e9e:	2201      	movs	r2, #1
 8034ea0:	715a      	strb	r2, [r3, #5]
 8034ea2:	e004      	b.n	8034eae <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8034ea4:	687b      	ldr	r3, [r7, #4]
 8034ea6:	2204      	movs	r2, #4
 8034ea8:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8034eaa:	2301      	movs	r3, #1
 8034eac:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8034eae:	687b      	ldr	r3, [r7, #4]
 8034eb0:	2200      	movs	r2, #0
 8034eb2:	711a      	strb	r2, [r3, #4]

  return status;
 8034eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8034eb6:	4618      	mov	r0, r3
 8034eb8:	3710      	adds	r7, #16
 8034eba:	46bd      	mov	sp, r7
 8034ebc:	bd80      	pop	{r7, pc}

08034ebe <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8034ebe:	b580      	push	{r7, lr}
 8034ec0:	b082      	sub	sp, #8
 8034ec2:	af00      	add	r7, sp, #0
 8034ec4:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8034ec6:	687b      	ldr	r3, [r7, #4]
 8034ec8:	2b00      	cmp	r3, #0
 8034eca:	d101      	bne.n	8034ed0 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8034ecc:	2301      	movs	r3, #1
 8034ece:	e083      	b.n	8034fd8 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8034ed0:	687b      	ldr	r3, [r7, #4]
 8034ed2:	7f5b      	ldrb	r3, [r3, #29]
 8034ed4:	b2db      	uxtb	r3, r3
 8034ed6:	2b00      	cmp	r3, #0
 8034ed8:	d105      	bne.n	8034ee6 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8034eda:	687b      	ldr	r3, [r7, #4]
 8034edc:	2200      	movs	r2, #0
 8034ede:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8034ee0:	6878      	ldr	r0, [r7, #4]
 8034ee2:	f7f6 fe19 	bl	802bb18 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8034ee6:	687b      	ldr	r3, [r7, #4]
 8034ee8:	2202      	movs	r2, #2
 8034eea:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8034eec:	687b      	ldr	r3, [r7, #4]
 8034eee:	681b      	ldr	r3, [r3, #0]
 8034ef0:	22ca      	movs	r2, #202	; 0xca
 8034ef2:	625a      	str	r2, [r3, #36]	; 0x24
 8034ef4:	687b      	ldr	r3, [r7, #4]
 8034ef6:	681b      	ldr	r3, [r3, #0]
 8034ef8:	2253      	movs	r2, #83	; 0x53
 8034efa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8034efc:	6878      	ldr	r0, [r7, #4]
 8034efe:	f000 faa8 	bl	8035452 <RTC_EnterInitMode>
 8034f02:	4603      	mov	r3, r0
 8034f04:	2b00      	cmp	r3, #0
 8034f06:	d008      	beq.n	8034f1a <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8034f08:	687b      	ldr	r3, [r7, #4]
 8034f0a:	681b      	ldr	r3, [r3, #0]
 8034f0c:	22ff      	movs	r2, #255	; 0xff
 8034f0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8034f10:	687b      	ldr	r3, [r7, #4]
 8034f12:	2204      	movs	r2, #4
 8034f14:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8034f16:	2301      	movs	r3, #1
 8034f18:	e05e      	b.n	8034fd8 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8034f1a:	687b      	ldr	r3, [r7, #4]
 8034f1c:	681b      	ldr	r3, [r3, #0]
 8034f1e:	689b      	ldr	r3, [r3, #8]
 8034f20:	687a      	ldr	r2, [r7, #4]
 8034f22:	6812      	ldr	r2, [r2, #0]
 8034f24:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8034f28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8034f2c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8034f2e:	687b      	ldr	r3, [r7, #4]
 8034f30:	681b      	ldr	r3, [r3, #0]
 8034f32:	6899      	ldr	r1, [r3, #8]
 8034f34:	687b      	ldr	r3, [r7, #4]
 8034f36:	685a      	ldr	r2, [r3, #4]
 8034f38:	687b      	ldr	r3, [r7, #4]
 8034f3a:	691b      	ldr	r3, [r3, #16]
 8034f3c:	431a      	orrs	r2, r3
 8034f3e:	687b      	ldr	r3, [r7, #4]
 8034f40:	695b      	ldr	r3, [r3, #20]
 8034f42:	431a      	orrs	r2, r3
 8034f44:	687b      	ldr	r3, [r7, #4]
 8034f46:	681b      	ldr	r3, [r3, #0]
 8034f48:	430a      	orrs	r2, r1
 8034f4a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8034f4c:	687b      	ldr	r3, [r7, #4]
 8034f4e:	681b      	ldr	r3, [r3, #0]
 8034f50:	687a      	ldr	r2, [r7, #4]
 8034f52:	68d2      	ldr	r2, [r2, #12]
 8034f54:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8034f56:	687b      	ldr	r3, [r7, #4]
 8034f58:	681b      	ldr	r3, [r3, #0]
 8034f5a:	6919      	ldr	r1, [r3, #16]
 8034f5c:	687b      	ldr	r3, [r7, #4]
 8034f5e:	689b      	ldr	r3, [r3, #8]
 8034f60:	041a      	lsls	r2, r3, #16
 8034f62:	687b      	ldr	r3, [r7, #4]
 8034f64:	681b      	ldr	r3, [r3, #0]
 8034f66:	430a      	orrs	r2, r1
 8034f68:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8034f6a:	687b      	ldr	r3, [r7, #4]
 8034f6c:	681b      	ldr	r3, [r3, #0]
 8034f6e:	68da      	ldr	r2, [r3, #12]
 8034f70:	687b      	ldr	r3, [r7, #4]
 8034f72:	681b      	ldr	r3, [r3, #0]
 8034f74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8034f78:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8034f7a:	687b      	ldr	r3, [r7, #4]
 8034f7c:	681b      	ldr	r3, [r3, #0]
 8034f7e:	689b      	ldr	r3, [r3, #8]
 8034f80:	f003 0320 	and.w	r3, r3, #32
 8034f84:	2b00      	cmp	r3, #0
 8034f86:	d10e      	bne.n	8034fa6 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8034f88:	6878      	ldr	r0, [r7, #4]
 8034f8a:	f000 fa3a 	bl	8035402 <HAL_RTC_WaitForSynchro>
 8034f8e:	4603      	mov	r3, r0
 8034f90:	2b00      	cmp	r3, #0
 8034f92:	d008      	beq.n	8034fa6 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8034f94:	687b      	ldr	r3, [r7, #4]
 8034f96:	681b      	ldr	r3, [r3, #0]
 8034f98:	22ff      	movs	r2, #255	; 0xff
 8034f9a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8034f9c:	687b      	ldr	r3, [r7, #4]
 8034f9e:	2204      	movs	r2, #4
 8034fa0:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8034fa2:	2301      	movs	r3, #1
 8034fa4:	e018      	b.n	8034fd8 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8034fa6:	687b      	ldr	r3, [r7, #4]
 8034fa8:	681b      	ldr	r3, [r3, #0]
 8034faa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8034fac:	687b      	ldr	r3, [r7, #4]
 8034fae:	681b      	ldr	r3, [r3, #0]
 8034fb0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8034fb4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8034fb6:	687b      	ldr	r3, [r7, #4]
 8034fb8:	681b      	ldr	r3, [r3, #0]
 8034fba:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8034fbc:	687b      	ldr	r3, [r7, #4]
 8034fbe:	699a      	ldr	r2, [r3, #24]
 8034fc0:	687b      	ldr	r3, [r7, #4]
 8034fc2:	681b      	ldr	r3, [r3, #0]
 8034fc4:	430a      	orrs	r2, r1
 8034fc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8034fc8:	687b      	ldr	r3, [r7, #4]
 8034fca:	681b      	ldr	r3, [r3, #0]
 8034fcc:	22ff      	movs	r2, #255	; 0xff
 8034fce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8034fd0:	687b      	ldr	r3, [r7, #4]
 8034fd2:	2201      	movs	r2, #1
 8034fd4:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8034fd6:	2300      	movs	r3, #0
  }
}
 8034fd8:	4618      	mov	r0, r3
 8034fda:	3708      	adds	r7, #8
 8034fdc:	46bd      	mov	sp, r7
 8034fde:	bd80      	pop	{r7, pc}

08034fe0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8034fe0:	b590      	push	{r4, r7, lr}
 8034fe2:	b087      	sub	sp, #28
 8034fe4:	af00      	add	r7, sp, #0
 8034fe6:	60f8      	str	r0, [r7, #12]
 8034fe8:	60b9      	str	r1, [r7, #8]
 8034fea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8034fec:	2300      	movs	r3, #0
 8034fee:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8034ff0:	68fb      	ldr	r3, [r7, #12]
 8034ff2:	7f1b      	ldrb	r3, [r3, #28]
 8034ff4:	2b01      	cmp	r3, #1
 8034ff6:	d101      	bne.n	8034ffc <HAL_RTC_SetTime+0x1c>
 8034ff8:	2302      	movs	r3, #2
 8034ffa:	e0aa      	b.n	8035152 <HAL_RTC_SetTime+0x172>
 8034ffc:	68fb      	ldr	r3, [r7, #12]
 8034ffe:	2201      	movs	r2, #1
 8035000:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8035002:	68fb      	ldr	r3, [r7, #12]
 8035004:	2202      	movs	r2, #2
 8035006:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8035008:	687b      	ldr	r3, [r7, #4]
 803500a:	2b00      	cmp	r3, #0
 803500c:	d126      	bne.n	803505c <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 803500e:	68fb      	ldr	r3, [r7, #12]
 8035010:	681b      	ldr	r3, [r3, #0]
 8035012:	689b      	ldr	r3, [r3, #8]
 8035014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8035018:	2b00      	cmp	r3, #0
 803501a:	d102      	bne.n	8035022 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 803501c:	68bb      	ldr	r3, [r7, #8]
 803501e:	2200      	movs	r2, #0
 8035020:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8035022:	68bb      	ldr	r3, [r7, #8]
 8035024:	781b      	ldrb	r3, [r3, #0]
 8035026:	4618      	mov	r0, r3
 8035028:	f000 fa3f 	bl	80354aa <RTC_ByteToBcd2>
 803502c:	4603      	mov	r3, r0
 803502e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8035030:	68bb      	ldr	r3, [r7, #8]
 8035032:	785b      	ldrb	r3, [r3, #1]
 8035034:	4618      	mov	r0, r3
 8035036:	f000 fa38 	bl	80354aa <RTC_ByteToBcd2>
 803503a:	4603      	mov	r3, r0
 803503c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 803503e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8035040:	68bb      	ldr	r3, [r7, #8]
 8035042:	789b      	ldrb	r3, [r3, #2]
 8035044:	4618      	mov	r0, r3
 8035046:	f000 fa30 	bl	80354aa <RTC_ByteToBcd2>
 803504a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 803504c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8035050:	68bb      	ldr	r3, [r7, #8]
 8035052:	78db      	ldrb	r3, [r3, #3]
 8035054:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8035056:	4313      	orrs	r3, r2
 8035058:	617b      	str	r3, [r7, #20]
 803505a:	e018      	b.n	803508e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 803505c:	68fb      	ldr	r3, [r7, #12]
 803505e:	681b      	ldr	r3, [r3, #0]
 8035060:	689b      	ldr	r3, [r3, #8]
 8035062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8035066:	2b00      	cmp	r3, #0
 8035068:	d102      	bne.n	8035070 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 803506a:	68bb      	ldr	r3, [r7, #8]
 803506c:	2200      	movs	r2, #0
 803506e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8035070:	68bb      	ldr	r3, [r7, #8]
 8035072:	781b      	ldrb	r3, [r3, #0]
 8035074:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8035076:	68bb      	ldr	r3, [r7, #8]
 8035078:	785b      	ldrb	r3, [r3, #1]
 803507a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 803507c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 803507e:	68ba      	ldr	r2, [r7, #8]
 8035080:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8035082:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8035084:	68bb      	ldr	r3, [r7, #8]
 8035086:	78db      	ldrb	r3, [r3, #3]
 8035088:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 803508a:	4313      	orrs	r3, r2
 803508c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 803508e:	68fb      	ldr	r3, [r7, #12]
 8035090:	681b      	ldr	r3, [r3, #0]
 8035092:	22ca      	movs	r2, #202	; 0xca
 8035094:	625a      	str	r2, [r3, #36]	; 0x24
 8035096:	68fb      	ldr	r3, [r7, #12]
 8035098:	681b      	ldr	r3, [r3, #0]
 803509a:	2253      	movs	r2, #83	; 0x53
 803509c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 803509e:	68f8      	ldr	r0, [r7, #12]
 80350a0:	f000 f9d7 	bl	8035452 <RTC_EnterInitMode>
 80350a4:	4603      	mov	r3, r0
 80350a6:	2b00      	cmp	r3, #0
 80350a8:	d00b      	beq.n	80350c2 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80350aa:	68fb      	ldr	r3, [r7, #12]
 80350ac:	681b      	ldr	r3, [r3, #0]
 80350ae:	22ff      	movs	r2, #255	; 0xff
 80350b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80350b2:	68fb      	ldr	r3, [r7, #12]
 80350b4:	2204      	movs	r2, #4
 80350b6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80350b8:	68fb      	ldr	r3, [r7, #12]
 80350ba:	2200      	movs	r2, #0
 80350bc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80350be:	2301      	movs	r3, #1
 80350c0:	e047      	b.n	8035152 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80350c2:	68fb      	ldr	r3, [r7, #12]
 80350c4:	681a      	ldr	r2, [r3, #0]
 80350c6:	697b      	ldr	r3, [r7, #20]
 80350c8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80350cc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80350d0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80350d2:	68fb      	ldr	r3, [r7, #12]
 80350d4:	681b      	ldr	r3, [r3, #0]
 80350d6:	689a      	ldr	r2, [r3, #8]
 80350d8:	68fb      	ldr	r3, [r7, #12]
 80350da:	681b      	ldr	r3, [r3, #0]
 80350dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80350e0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80350e2:	68fb      	ldr	r3, [r7, #12]
 80350e4:	681b      	ldr	r3, [r3, #0]
 80350e6:	6899      	ldr	r1, [r3, #8]
 80350e8:	68bb      	ldr	r3, [r7, #8]
 80350ea:	68da      	ldr	r2, [r3, #12]
 80350ec:	68bb      	ldr	r3, [r7, #8]
 80350ee:	691b      	ldr	r3, [r3, #16]
 80350f0:	431a      	orrs	r2, r3
 80350f2:	68fb      	ldr	r3, [r7, #12]
 80350f4:	681b      	ldr	r3, [r3, #0]
 80350f6:	430a      	orrs	r2, r1
 80350f8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80350fa:	68fb      	ldr	r3, [r7, #12]
 80350fc:	681b      	ldr	r3, [r3, #0]
 80350fe:	68da      	ldr	r2, [r3, #12]
 8035100:	68fb      	ldr	r3, [r7, #12]
 8035102:	681b      	ldr	r3, [r3, #0]
 8035104:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8035108:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 803510a:	68fb      	ldr	r3, [r7, #12]
 803510c:	681b      	ldr	r3, [r3, #0]
 803510e:	689b      	ldr	r3, [r3, #8]
 8035110:	f003 0320 	and.w	r3, r3, #32
 8035114:	2b00      	cmp	r3, #0
 8035116:	d111      	bne.n	803513c <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8035118:	68f8      	ldr	r0, [r7, #12]
 803511a:	f000 f972 	bl	8035402 <HAL_RTC_WaitForSynchro>
 803511e:	4603      	mov	r3, r0
 8035120:	2b00      	cmp	r3, #0
 8035122:	d00b      	beq.n	803513c <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8035124:	68fb      	ldr	r3, [r7, #12]
 8035126:	681b      	ldr	r3, [r3, #0]
 8035128:	22ff      	movs	r2, #255	; 0xff
 803512a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 803512c:	68fb      	ldr	r3, [r7, #12]
 803512e:	2204      	movs	r2, #4
 8035130:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8035132:	68fb      	ldr	r3, [r7, #12]
 8035134:	2200      	movs	r2, #0
 8035136:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8035138:	2301      	movs	r3, #1
 803513a:	e00a      	b.n	8035152 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 803513c:	68fb      	ldr	r3, [r7, #12]
 803513e:	681b      	ldr	r3, [r3, #0]
 8035140:	22ff      	movs	r2, #255	; 0xff
 8035142:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8035144:	68fb      	ldr	r3, [r7, #12]
 8035146:	2201      	movs	r2, #1
 8035148:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 803514a:	68fb      	ldr	r3, [r7, #12]
 803514c:	2200      	movs	r2, #0
 803514e:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8035150:	2300      	movs	r3, #0
  }
}
 8035152:	4618      	mov	r0, r3
 8035154:	371c      	adds	r7, #28
 8035156:	46bd      	mov	sp, r7
 8035158:	bd90      	pop	{r4, r7, pc}

0803515a <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 803515a:	b580      	push	{r7, lr}
 803515c:	b086      	sub	sp, #24
 803515e:	af00      	add	r7, sp, #0
 8035160:	60f8      	str	r0, [r7, #12]
 8035162:	60b9      	str	r1, [r7, #8]
 8035164:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8035166:	2300      	movs	r3, #0
 8035168:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 803516a:	68fb      	ldr	r3, [r7, #12]
 803516c:	681b      	ldr	r3, [r3, #0]
 803516e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8035170:	68bb      	ldr	r3, [r7, #8]
 8035172:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8035174:	68fb      	ldr	r3, [r7, #12]
 8035176:	681b      	ldr	r3, [r3, #0]
 8035178:	691b      	ldr	r3, [r3, #16]
 803517a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 803517e:	68bb      	ldr	r3, [r7, #8]
 8035180:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8035182:	68fb      	ldr	r3, [r7, #12]
 8035184:	681b      	ldr	r3, [r3, #0]
 8035186:	681b      	ldr	r3, [r3, #0]
 8035188:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 803518c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8035190:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8035192:	697b      	ldr	r3, [r7, #20]
 8035194:	0c1b      	lsrs	r3, r3, #16
 8035196:	b2db      	uxtb	r3, r3
 8035198:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 803519c:	b2da      	uxtb	r2, r3
 803519e:	68bb      	ldr	r3, [r7, #8]
 80351a0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80351a2:	697b      	ldr	r3, [r7, #20]
 80351a4:	0a1b      	lsrs	r3, r3, #8
 80351a6:	b2db      	uxtb	r3, r3
 80351a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80351ac:	b2da      	uxtb	r2, r3
 80351ae:	68bb      	ldr	r3, [r7, #8]
 80351b0:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80351b2:	697b      	ldr	r3, [r7, #20]
 80351b4:	b2db      	uxtb	r3, r3
 80351b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80351ba:	b2da      	uxtb	r2, r3
 80351bc:	68bb      	ldr	r3, [r7, #8]
 80351be:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80351c0:	697b      	ldr	r3, [r7, #20]
 80351c2:	0c1b      	lsrs	r3, r3, #16
 80351c4:	b2db      	uxtb	r3, r3
 80351c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80351ca:	b2da      	uxtb	r2, r3
 80351cc:	68bb      	ldr	r3, [r7, #8]
 80351ce:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80351d0:	687b      	ldr	r3, [r7, #4]
 80351d2:	2b00      	cmp	r3, #0
 80351d4:	d11a      	bne.n	803520c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80351d6:	68bb      	ldr	r3, [r7, #8]
 80351d8:	781b      	ldrb	r3, [r3, #0]
 80351da:	4618      	mov	r0, r3
 80351dc:	f000 f983 	bl	80354e6 <RTC_Bcd2ToByte>
 80351e0:	4603      	mov	r3, r0
 80351e2:	461a      	mov	r2, r3
 80351e4:	68bb      	ldr	r3, [r7, #8]
 80351e6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80351e8:	68bb      	ldr	r3, [r7, #8]
 80351ea:	785b      	ldrb	r3, [r3, #1]
 80351ec:	4618      	mov	r0, r3
 80351ee:	f000 f97a 	bl	80354e6 <RTC_Bcd2ToByte>
 80351f2:	4603      	mov	r3, r0
 80351f4:	461a      	mov	r2, r3
 80351f6:	68bb      	ldr	r3, [r7, #8]
 80351f8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80351fa:	68bb      	ldr	r3, [r7, #8]
 80351fc:	789b      	ldrb	r3, [r3, #2]
 80351fe:	4618      	mov	r0, r3
 8035200:	f000 f971 	bl	80354e6 <RTC_Bcd2ToByte>
 8035204:	4603      	mov	r3, r0
 8035206:	461a      	mov	r2, r3
 8035208:	68bb      	ldr	r3, [r7, #8]
 803520a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 803520c:	2300      	movs	r3, #0
}
 803520e:	4618      	mov	r0, r3
 8035210:	3718      	adds	r7, #24
 8035212:	46bd      	mov	sp, r7
 8035214:	bd80      	pop	{r7, pc}

08035216 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8035216:	b590      	push	{r4, r7, lr}
 8035218:	b087      	sub	sp, #28
 803521a:	af00      	add	r7, sp, #0
 803521c:	60f8      	str	r0, [r7, #12]
 803521e:	60b9      	str	r1, [r7, #8]
 8035220:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8035222:	2300      	movs	r3, #0
 8035224:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8035226:	68fb      	ldr	r3, [r7, #12]
 8035228:	7f1b      	ldrb	r3, [r3, #28]
 803522a:	2b01      	cmp	r3, #1
 803522c:	d101      	bne.n	8035232 <HAL_RTC_SetDate+0x1c>
 803522e:	2302      	movs	r3, #2
 8035230:	e094      	b.n	803535c <HAL_RTC_SetDate+0x146>
 8035232:	68fb      	ldr	r3, [r7, #12]
 8035234:	2201      	movs	r2, #1
 8035236:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8035238:	68fb      	ldr	r3, [r7, #12]
 803523a:	2202      	movs	r2, #2
 803523c:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 803523e:	687b      	ldr	r3, [r7, #4]
 8035240:	2b00      	cmp	r3, #0
 8035242:	d10e      	bne.n	8035262 <HAL_RTC_SetDate+0x4c>
 8035244:	68bb      	ldr	r3, [r7, #8]
 8035246:	785b      	ldrb	r3, [r3, #1]
 8035248:	f003 0310 	and.w	r3, r3, #16
 803524c:	2b00      	cmp	r3, #0
 803524e:	d008      	beq.n	8035262 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8035250:	68bb      	ldr	r3, [r7, #8]
 8035252:	785b      	ldrb	r3, [r3, #1]
 8035254:	f023 0310 	bic.w	r3, r3, #16
 8035258:	b2db      	uxtb	r3, r3
 803525a:	330a      	adds	r3, #10
 803525c:	b2da      	uxtb	r2, r3
 803525e:	68bb      	ldr	r3, [r7, #8]
 8035260:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8035262:	687b      	ldr	r3, [r7, #4]
 8035264:	2b00      	cmp	r3, #0
 8035266:	d11c      	bne.n	80352a2 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8035268:	68bb      	ldr	r3, [r7, #8]
 803526a:	78db      	ldrb	r3, [r3, #3]
 803526c:	4618      	mov	r0, r3
 803526e:	f000 f91c 	bl	80354aa <RTC_ByteToBcd2>
 8035272:	4603      	mov	r3, r0
 8035274:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8035276:	68bb      	ldr	r3, [r7, #8]
 8035278:	785b      	ldrb	r3, [r3, #1]
 803527a:	4618      	mov	r0, r3
 803527c:	f000 f915 	bl	80354aa <RTC_ByteToBcd2>
 8035280:	4603      	mov	r3, r0
 8035282:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8035284:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8035286:	68bb      	ldr	r3, [r7, #8]
 8035288:	789b      	ldrb	r3, [r3, #2]
 803528a:	4618      	mov	r0, r3
 803528c:	f000 f90d 	bl	80354aa <RTC_ByteToBcd2>
 8035290:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8035292:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8035296:	68bb      	ldr	r3, [r7, #8]
 8035298:	781b      	ldrb	r3, [r3, #0]
 803529a:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 803529c:	4313      	orrs	r3, r2
 803529e:	617b      	str	r3, [r7, #20]
 80352a0:	e00e      	b.n	80352c0 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80352a2:	68bb      	ldr	r3, [r7, #8]
 80352a4:	78db      	ldrb	r3, [r3, #3]
 80352a6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80352a8:	68bb      	ldr	r3, [r7, #8]
 80352aa:	785b      	ldrb	r3, [r3, #1]
 80352ac:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80352ae:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80352b0:	68ba      	ldr	r2, [r7, #8]
 80352b2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80352b4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80352b6:	68bb      	ldr	r3, [r7, #8]
 80352b8:	781b      	ldrb	r3, [r3, #0]
 80352ba:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80352bc:	4313      	orrs	r3, r2
 80352be:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80352c0:	68fb      	ldr	r3, [r7, #12]
 80352c2:	681b      	ldr	r3, [r3, #0]
 80352c4:	22ca      	movs	r2, #202	; 0xca
 80352c6:	625a      	str	r2, [r3, #36]	; 0x24
 80352c8:	68fb      	ldr	r3, [r7, #12]
 80352ca:	681b      	ldr	r3, [r3, #0]
 80352cc:	2253      	movs	r2, #83	; 0x53
 80352ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80352d0:	68f8      	ldr	r0, [r7, #12]
 80352d2:	f000 f8be 	bl	8035452 <RTC_EnterInitMode>
 80352d6:	4603      	mov	r3, r0
 80352d8:	2b00      	cmp	r3, #0
 80352da:	d00b      	beq.n	80352f4 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80352dc:	68fb      	ldr	r3, [r7, #12]
 80352de:	681b      	ldr	r3, [r3, #0]
 80352e0:	22ff      	movs	r2, #255	; 0xff
 80352e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80352e4:	68fb      	ldr	r3, [r7, #12]
 80352e6:	2204      	movs	r2, #4
 80352e8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80352ea:	68fb      	ldr	r3, [r7, #12]
 80352ec:	2200      	movs	r2, #0
 80352ee:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80352f0:	2301      	movs	r3, #1
 80352f2:	e033      	b.n	803535c <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80352f4:	68fb      	ldr	r3, [r7, #12]
 80352f6:	681a      	ldr	r2, [r3, #0]
 80352f8:	697b      	ldr	r3, [r7, #20]
 80352fa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80352fe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8035302:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8035304:	68fb      	ldr	r3, [r7, #12]
 8035306:	681b      	ldr	r3, [r3, #0]
 8035308:	68da      	ldr	r2, [r3, #12]
 803530a:	68fb      	ldr	r3, [r7, #12]
 803530c:	681b      	ldr	r3, [r3, #0]
 803530e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8035312:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8035314:	68fb      	ldr	r3, [r7, #12]
 8035316:	681b      	ldr	r3, [r3, #0]
 8035318:	689b      	ldr	r3, [r3, #8]
 803531a:	f003 0320 	and.w	r3, r3, #32
 803531e:	2b00      	cmp	r3, #0
 8035320:	d111      	bne.n	8035346 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8035322:	68f8      	ldr	r0, [r7, #12]
 8035324:	f000 f86d 	bl	8035402 <HAL_RTC_WaitForSynchro>
 8035328:	4603      	mov	r3, r0
 803532a:	2b00      	cmp	r3, #0
 803532c:	d00b      	beq.n	8035346 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 803532e:	68fb      	ldr	r3, [r7, #12]
 8035330:	681b      	ldr	r3, [r3, #0]
 8035332:	22ff      	movs	r2, #255	; 0xff
 8035334:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8035336:	68fb      	ldr	r3, [r7, #12]
 8035338:	2204      	movs	r2, #4
 803533a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 803533c:	68fb      	ldr	r3, [r7, #12]
 803533e:	2200      	movs	r2, #0
 8035340:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8035342:	2301      	movs	r3, #1
 8035344:	e00a      	b.n	803535c <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8035346:	68fb      	ldr	r3, [r7, #12]
 8035348:	681b      	ldr	r3, [r3, #0]
 803534a:	22ff      	movs	r2, #255	; 0xff
 803534c:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 803534e:	68fb      	ldr	r3, [r7, #12]
 8035350:	2201      	movs	r2, #1
 8035352:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8035354:	68fb      	ldr	r3, [r7, #12]
 8035356:	2200      	movs	r2, #0
 8035358:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 803535a:	2300      	movs	r3, #0
  }
}
 803535c:	4618      	mov	r0, r3
 803535e:	371c      	adds	r7, #28
 8035360:	46bd      	mov	sp, r7
 8035362:	bd90      	pop	{r4, r7, pc}

08035364 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8035364:	b580      	push	{r7, lr}
 8035366:	b086      	sub	sp, #24
 8035368:	af00      	add	r7, sp, #0
 803536a:	60f8      	str	r0, [r7, #12]
 803536c:	60b9      	str	r1, [r7, #8]
 803536e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8035370:	2300      	movs	r3, #0
 8035372:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8035374:	68fb      	ldr	r3, [r7, #12]
 8035376:	681b      	ldr	r3, [r3, #0]
 8035378:	685b      	ldr	r3, [r3, #4]
 803537a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 803537e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8035382:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8035384:	697b      	ldr	r3, [r7, #20]
 8035386:	0c1b      	lsrs	r3, r3, #16
 8035388:	b2da      	uxtb	r2, r3
 803538a:	68bb      	ldr	r3, [r7, #8]
 803538c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 803538e:	697b      	ldr	r3, [r7, #20]
 8035390:	0a1b      	lsrs	r3, r3, #8
 8035392:	b2db      	uxtb	r3, r3
 8035394:	f003 031f 	and.w	r3, r3, #31
 8035398:	b2da      	uxtb	r2, r3
 803539a:	68bb      	ldr	r3, [r7, #8]
 803539c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 803539e:	697b      	ldr	r3, [r7, #20]
 80353a0:	b2db      	uxtb	r3, r3
 80353a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80353a6:	b2da      	uxtb	r2, r3
 80353a8:	68bb      	ldr	r3, [r7, #8]
 80353aa:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80353ac:	697b      	ldr	r3, [r7, #20]
 80353ae:	0b5b      	lsrs	r3, r3, #13
 80353b0:	b2db      	uxtb	r3, r3
 80353b2:	f003 0307 	and.w	r3, r3, #7
 80353b6:	b2da      	uxtb	r2, r3
 80353b8:	68bb      	ldr	r3, [r7, #8]
 80353ba:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80353bc:	687b      	ldr	r3, [r7, #4]
 80353be:	2b00      	cmp	r3, #0
 80353c0:	d11a      	bne.n	80353f8 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80353c2:	68bb      	ldr	r3, [r7, #8]
 80353c4:	78db      	ldrb	r3, [r3, #3]
 80353c6:	4618      	mov	r0, r3
 80353c8:	f000 f88d 	bl	80354e6 <RTC_Bcd2ToByte>
 80353cc:	4603      	mov	r3, r0
 80353ce:	461a      	mov	r2, r3
 80353d0:	68bb      	ldr	r3, [r7, #8]
 80353d2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80353d4:	68bb      	ldr	r3, [r7, #8]
 80353d6:	785b      	ldrb	r3, [r3, #1]
 80353d8:	4618      	mov	r0, r3
 80353da:	f000 f884 	bl	80354e6 <RTC_Bcd2ToByte>
 80353de:	4603      	mov	r3, r0
 80353e0:	461a      	mov	r2, r3
 80353e2:	68bb      	ldr	r3, [r7, #8]
 80353e4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80353e6:	68bb      	ldr	r3, [r7, #8]
 80353e8:	789b      	ldrb	r3, [r3, #2]
 80353ea:	4618      	mov	r0, r3
 80353ec:	f000 f87b 	bl	80354e6 <RTC_Bcd2ToByte>
 80353f0:	4603      	mov	r3, r0
 80353f2:	461a      	mov	r2, r3
 80353f4:	68bb      	ldr	r3, [r7, #8]
 80353f6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80353f8:	2300      	movs	r3, #0
}
 80353fa:	4618      	mov	r0, r3
 80353fc:	3718      	adds	r7, #24
 80353fe:	46bd      	mov	sp, r7
 8035400:	bd80      	pop	{r7, pc}

08035402 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8035402:	b580      	push	{r7, lr}
 8035404:	b084      	sub	sp, #16
 8035406:	af00      	add	r7, sp, #0
 8035408:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 803540a:	2300      	movs	r3, #0
 803540c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 803540e:	687b      	ldr	r3, [r7, #4]
 8035410:	681b      	ldr	r3, [r3, #0]
 8035412:	68da      	ldr	r2, [r3, #12]
 8035414:	687b      	ldr	r3, [r7, #4]
 8035416:	681b      	ldr	r3, [r3, #0]
 8035418:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 803541c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 803541e:	f7f6 ffa5 	bl	802c36c <HAL_GetTick>
 8035422:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8035424:	e009      	b.n	803543a <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8035426:	f7f6 ffa1 	bl	802c36c <HAL_GetTick>
 803542a:	4602      	mov	r2, r0
 803542c:	68fb      	ldr	r3, [r7, #12]
 803542e:	1ad3      	subs	r3, r2, r3
 8035430:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8035434:	d901      	bls.n	803543a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8035436:	2303      	movs	r3, #3
 8035438:	e007      	b.n	803544a <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 803543a:	687b      	ldr	r3, [r7, #4]
 803543c:	681b      	ldr	r3, [r3, #0]
 803543e:	68db      	ldr	r3, [r3, #12]
 8035440:	f003 0320 	and.w	r3, r3, #32
 8035444:	2b00      	cmp	r3, #0
 8035446:	d0ee      	beq.n	8035426 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8035448:	2300      	movs	r3, #0
}
 803544a:	4618      	mov	r0, r3
 803544c:	3710      	adds	r7, #16
 803544e:	46bd      	mov	sp, r7
 8035450:	bd80      	pop	{r7, pc}

08035452 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8035452:	b580      	push	{r7, lr}
 8035454:	b084      	sub	sp, #16
 8035456:	af00      	add	r7, sp, #0
 8035458:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 803545a:	2300      	movs	r3, #0
 803545c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 803545e:	687b      	ldr	r3, [r7, #4]
 8035460:	681b      	ldr	r3, [r3, #0]
 8035462:	68db      	ldr	r3, [r3, #12]
 8035464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8035468:	2b00      	cmp	r3, #0
 803546a:	d119      	bne.n	80354a0 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 803546c:	687b      	ldr	r3, [r7, #4]
 803546e:	681b      	ldr	r3, [r3, #0]
 8035470:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8035474:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8035476:	f7f6 ff79 	bl	802c36c <HAL_GetTick>
 803547a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 803547c:	e009      	b.n	8035492 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 803547e:	f7f6 ff75 	bl	802c36c <HAL_GetTick>
 8035482:	4602      	mov	r2, r0
 8035484:	68fb      	ldr	r3, [r7, #12]
 8035486:	1ad3      	subs	r3, r2, r3
 8035488:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 803548c:	d901      	bls.n	8035492 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 803548e:	2303      	movs	r3, #3
 8035490:	e007      	b.n	80354a2 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8035492:	687b      	ldr	r3, [r7, #4]
 8035494:	681b      	ldr	r3, [r3, #0]
 8035496:	68db      	ldr	r3, [r3, #12]
 8035498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 803549c:	2b00      	cmp	r3, #0
 803549e:	d0ee      	beq.n	803547e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80354a0:	2300      	movs	r3, #0
}
 80354a2:	4618      	mov	r0, r3
 80354a4:	3710      	adds	r7, #16
 80354a6:	46bd      	mov	sp, r7
 80354a8:	bd80      	pop	{r7, pc}

080354aa <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80354aa:	b480      	push	{r7}
 80354ac:	b085      	sub	sp, #20
 80354ae:	af00      	add	r7, sp, #0
 80354b0:	4603      	mov	r3, r0
 80354b2:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80354b4:	2300      	movs	r3, #0
 80354b6:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80354b8:	e005      	b.n	80354c6 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80354ba:	68fb      	ldr	r3, [r7, #12]
 80354bc:	3301      	adds	r3, #1
 80354be:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80354c0:	79fb      	ldrb	r3, [r7, #7]
 80354c2:	3b0a      	subs	r3, #10
 80354c4:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80354c6:	79fb      	ldrb	r3, [r7, #7]
 80354c8:	2b09      	cmp	r3, #9
 80354ca:	d8f6      	bhi.n	80354ba <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80354cc:	68fb      	ldr	r3, [r7, #12]
 80354ce:	b2db      	uxtb	r3, r3
 80354d0:	011b      	lsls	r3, r3, #4
 80354d2:	b2da      	uxtb	r2, r3
 80354d4:	79fb      	ldrb	r3, [r7, #7]
 80354d6:	4313      	orrs	r3, r2
 80354d8:	b2db      	uxtb	r3, r3
}
 80354da:	4618      	mov	r0, r3
 80354dc:	3714      	adds	r7, #20
 80354de:	46bd      	mov	sp, r7
 80354e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80354e4:	4770      	bx	lr

080354e6 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80354e6:	b480      	push	{r7}
 80354e8:	b085      	sub	sp, #20
 80354ea:	af00      	add	r7, sp, #0
 80354ec:	4603      	mov	r3, r0
 80354ee:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80354f0:	2300      	movs	r3, #0
 80354f2:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80354f4:	79fb      	ldrb	r3, [r7, #7]
 80354f6:	091b      	lsrs	r3, r3, #4
 80354f8:	b2db      	uxtb	r3, r3
 80354fa:	461a      	mov	r2, r3
 80354fc:	4613      	mov	r3, r2
 80354fe:	009b      	lsls	r3, r3, #2
 8035500:	4413      	add	r3, r2
 8035502:	005b      	lsls	r3, r3, #1
 8035504:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8035506:	79fb      	ldrb	r3, [r7, #7]
 8035508:	f003 030f 	and.w	r3, r3, #15
 803550c:	b2da      	uxtb	r2, r3
 803550e:	68fb      	ldr	r3, [r7, #12]
 8035510:	b2db      	uxtb	r3, r3
 8035512:	4413      	add	r3, r2
 8035514:	b2db      	uxtb	r3, r3
}
 8035516:	4618      	mov	r0, r3
 8035518:	3714      	adds	r7, #20
 803551a:	46bd      	mov	sp, r7
 803551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035520:	4770      	bx	lr

08035522 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8035522:	b580      	push	{r7, lr}
 8035524:	b082      	sub	sp, #8
 8035526:	af00      	add	r7, sp, #0
 8035528:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 803552a:	687b      	ldr	r3, [r7, #4]
 803552c:	2b00      	cmp	r3, #0
 803552e:	d101      	bne.n	8035534 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8035530:	2301      	movs	r3, #1
 8035532:	e056      	b.n	80355e2 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8035534:	687b      	ldr	r3, [r7, #4]
 8035536:	2200      	movs	r2, #0
 8035538:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 803553a:	687b      	ldr	r3, [r7, #4]
 803553c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8035540:	b2db      	uxtb	r3, r3
 8035542:	2b00      	cmp	r3, #0
 8035544:	d106      	bne.n	8035554 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8035546:	687b      	ldr	r3, [r7, #4]
 8035548:	2200      	movs	r2, #0
 803554a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 803554e:	6878      	ldr	r0, [r7, #4]
 8035550:	f7f6 faf8 	bl	802bb44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8035554:	687b      	ldr	r3, [r7, #4]
 8035556:	2202      	movs	r2, #2
 8035558:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 803555c:	687b      	ldr	r3, [r7, #4]
 803555e:	681b      	ldr	r3, [r3, #0]
 8035560:	681a      	ldr	r2, [r3, #0]
 8035562:	687b      	ldr	r3, [r7, #4]
 8035564:	681b      	ldr	r3, [r3, #0]
 8035566:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 803556a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 803556c:	687b      	ldr	r3, [r7, #4]
 803556e:	685a      	ldr	r2, [r3, #4]
 8035570:	687b      	ldr	r3, [r7, #4]
 8035572:	689b      	ldr	r3, [r3, #8]
 8035574:	431a      	orrs	r2, r3
 8035576:	687b      	ldr	r3, [r7, #4]
 8035578:	68db      	ldr	r3, [r3, #12]
 803557a:	431a      	orrs	r2, r3
 803557c:	687b      	ldr	r3, [r7, #4]
 803557e:	691b      	ldr	r3, [r3, #16]
 8035580:	431a      	orrs	r2, r3
 8035582:	687b      	ldr	r3, [r7, #4]
 8035584:	695b      	ldr	r3, [r3, #20]
 8035586:	431a      	orrs	r2, r3
 8035588:	687b      	ldr	r3, [r7, #4]
 803558a:	699b      	ldr	r3, [r3, #24]
 803558c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8035590:	431a      	orrs	r2, r3
 8035592:	687b      	ldr	r3, [r7, #4]
 8035594:	69db      	ldr	r3, [r3, #28]
 8035596:	431a      	orrs	r2, r3
 8035598:	687b      	ldr	r3, [r7, #4]
 803559a:	6a1b      	ldr	r3, [r3, #32]
 803559c:	ea42 0103 	orr.w	r1, r2, r3
 80355a0:	687b      	ldr	r3, [r7, #4]
 80355a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80355a4:	687b      	ldr	r3, [r7, #4]
 80355a6:	681b      	ldr	r3, [r3, #0]
 80355a8:	430a      	orrs	r2, r1
 80355aa:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80355ac:	687b      	ldr	r3, [r7, #4]
 80355ae:	699b      	ldr	r3, [r3, #24]
 80355b0:	0c1b      	lsrs	r3, r3, #16
 80355b2:	f003 0104 	and.w	r1, r3, #4
 80355b6:	687b      	ldr	r3, [r7, #4]
 80355b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80355ba:	687b      	ldr	r3, [r7, #4]
 80355bc:	681b      	ldr	r3, [r3, #0]
 80355be:	430a      	orrs	r2, r1
 80355c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80355c2:	687b      	ldr	r3, [r7, #4]
 80355c4:	681b      	ldr	r3, [r3, #0]
 80355c6:	69da      	ldr	r2, [r3, #28]
 80355c8:	687b      	ldr	r3, [r7, #4]
 80355ca:	681b      	ldr	r3, [r3, #0]
 80355cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80355d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80355d2:	687b      	ldr	r3, [r7, #4]
 80355d4:	2200      	movs	r2, #0
 80355d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80355d8:	687b      	ldr	r3, [r7, #4]
 80355da:	2201      	movs	r2, #1
 80355dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80355e0:	2300      	movs	r3, #0
}
 80355e2:	4618      	mov	r0, r3
 80355e4:	3708      	adds	r7, #8
 80355e6:	46bd      	mov	sp, r7
 80355e8:	bd80      	pop	{r7, pc}

080355ea <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80355ea:	b580      	push	{r7, lr}
 80355ec:	b08c      	sub	sp, #48	; 0x30
 80355ee:	af00      	add	r7, sp, #0
 80355f0:	60f8      	str	r0, [r7, #12]
 80355f2:	60b9      	str	r1, [r7, #8]
 80355f4:	607a      	str	r2, [r7, #4]
 80355f6:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80355f8:	2301      	movs	r3, #1
 80355fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80355fc:	2300      	movs	r3, #0
 80355fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8035602:	68fb      	ldr	r3, [r7, #12]
 8035604:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8035608:	2b01      	cmp	r3, #1
 803560a:	d101      	bne.n	8035610 <HAL_SPI_TransmitReceive+0x26>
 803560c:	2302      	movs	r3, #2
 803560e:	e18a      	b.n	8035926 <HAL_SPI_TransmitReceive+0x33c>
 8035610:	68fb      	ldr	r3, [r7, #12]
 8035612:	2201      	movs	r2, #1
 8035614:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8035618:	f7f6 fea8 	bl	802c36c <HAL_GetTick>
 803561c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 803561e:	68fb      	ldr	r3, [r7, #12]
 8035620:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8035624:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8035628:	68fb      	ldr	r3, [r7, #12]
 803562a:	685b      	ldr	r3, [r3, #4]
 803562c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 803562e:	887b      	ldrh	r3, [r7, #2]
 8035630:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8035632:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8035636:	2b01      	cmp	r3, #1
 8035638:	d00f      	beq.n	803565a <HAL_SPI_TransmitReceive+0x70>
 803563a:	69fb      	ldr	r3, [r7, #28]
 803563c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8035640:	d107      	bne.n	8035652 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8035642:	68fb      	ldr	r3, [r7, #12]
 8035644:	689b      	ldr	r3, [r3, #8]
 8035646:	2b00      	cmp	r3, #0
 8035648:	d103      	bne.n	8035652 <HAL_SPI_TransmitReceive+0x68>
 803564a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 803564e:	2b04      	cmp	r3, #4
 8035650:	d003      	beq.n	803565a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8035652:	2302      	movs	r3, #2
 8035654:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8035658:	e15b      	b.n	8035912 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 803565a:	68bb      	ldr	r3, [r7, #8]
 803565c:	2b00      	cmp	r3, #0
 803565e:	d005      	beq.n	803566c <HAL_SPI_TransmitReceive+0x82>
 8035660:	687b      	ldr	r3, [r7, #4]
 8035662:	2b00      	cmp	r3, #0
 8035664:	d002      	beq.n	803566c <HAL_SPI_TransmitReceive+0x82>
 8035666:	887b      	ldrh	r3, [r7, #2]
 8035668:	2b00      	cmp	r3, #0
 803566a:	d103      	bne.n	8035674 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 803566c:	2301      	movs	r3, #1
 803566e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8035672:	e14e      	b.n	8035912 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8035674:	68fb      	ldr	r3, [r7, #12]
 8035676:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 803567a:	b2db      	uxtb	r3, r3
 803567c:	2b04      	cmp	r3, #4
 803567e:	d003      	beq.n	8035688 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8035680:	68fb      	ldr	r3, [r7, #12]
 8035682:	2205      	movs	r2, #5
 8035684:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8035688:	68fb      	ldr	r3, [r7, #12]
 803568a:	2200      	movs	r2, #0
 803568c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 803568e:	68fb      	ldr	r3, [r7, #12]
 8035690:	687a      	ldr	r2, [r7, #4]
 8035692:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8035694:	68fb      	ldr	r3, [r7, #12]
 8035696:	887a      	ldrh	r2, [r7, #2]
 8035698:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 803569a:	68fb      	ldr	r3, [r7, #12]
 803569c:	887a      	ldrh	r2, [r7, #2]
 803569e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80356a0:	68fb      	ldr	r3, [r7, #12]
 80356a2:	68ba      	ldr	r2, [r7, #8]
 80356a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80356a6:	68fb      	ldr	r3, [r7, #12]
 80356a8:	887a      	ldrh	r2, [r7, #2]
 80356aa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80356ac:	68fb      	ldr	r3, [r7, #12]
 80356ae:	887a      	ldrh	r2, [r7, #2]
 80356b0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80356b2:	68fb      	ldr	r3, [r7, #12]
 80356b4:	2200      	movs	r2, #0
 80356b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80356b8:	68fb      	ldr	r3, [r7, #12]
 80356ba:	2200      	movs	r2, #0
 80356bc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80356be:	68fb      	ldr	r3, [r7, #12]
 80356c0:	681b      	ldr	r3, [r3, #0]
 80356c2:	681b      	ldr	r3, [r3, #0]
 80356c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80356c8:	2b40      	cmp	r3, #64	; 0x40
 80356ca:	d007      	beq.n	80356dc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80356cc:	68fb      	ldr	r3, [r7, #12]
 80356ce:	681b      	ldr	r3, [r3, #0]
 80356d0:	681a      	ldr	r2, [r3, #0]
 80356d2:	68fb      	ldr	r3, [r7, #12]
 80356d4:	681b      	ldr	r3, [r3, #0]
 80356d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80356da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80356dc:	68fb      	ldr	r3, [r7, #12]
 80356de:	68db      	ldr	r3, [r3, #12]
 80356e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80356e4:	d178      	bne.n	80357d8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80356e6:	68fb      	ldr	r3, [r7, #12]
 80356e8:	685b      	ldr	r3, [r3, #4]
 80356ea:	2b00      	cmp	r3, #0
 80356ec:	d002      	beq.n	80356f4 <HAL_SPI_TransmitReceive+0x10a>
 80356ee:	8b7b      	ldrh	r3, [r7, #26]
 80356f0:	2b01      	cmp	r3, #1
 80356f2:	d166      	bne.n	80357c2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80356f4:	68fb      	ldr	r3, [r7, #12]
 80356f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80356f8:	881a      	ldrh	r2, [r3, #0]
 80356fa:	68fb      	ldr	r3, [r7, #12]
 80356fc:	681b      	ldr	r3, [r3, #0]
 80356fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8035700:	68fb      	ldr	r3, [r7, #12]
 8035702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8035704:	1c9a      	adds	r2, r3, #2
 8035706:	68fb      	ldr	r3, [r7, #12]
 8035708:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 803570a:	68fb      	ldr	r3, [r7, #12]
 803570c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 803570e:	b29b      	uxth	r3, r3
 8035710:	3b01      	subs	r3, #1
 8035712:	b29a      	uxth	r2, r3
 8035714:	68fb      	ldr	r3, [r7, #12]
 8035716:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8035718:	e053      	b.n	80357c2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 803571a:	68fb      	ldr	r3, [r7, #12]
 803571c:	681b      	ldr	r3, [r3, #0]
 803571e:	689b      	ldr	r3, [r3, #8]
 8035720:	f003 0302 	and.w	r3, r3, #2
 8035724:	2b02      	cmp	r3, #2
 8035726:	d11b      	bne.n	8035760 <HAL_SPI_TransmitReceive+0x176>
 8035728:	68fb      	ldr	r3, [r7, #12]
 803572a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 803572c:	b29b      	uxth	r3, r3
 803572e:	2b00      	cmp	r3, #0
 8035730:	d016      	beq.n	8035760 <HAL_SPI_TransmitReceive+0x176>
 8035732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8035734:	2b01      	cmp	r3, #1
 8035736:	d113      	bne.n	8035760 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8035738:	68fb      	ldr	r3, [r7, #12]
 803573a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803573c:	881a      	ldrh	r2, [r3, #0]
 803573e:	68fb      	ldr	r3, [r7, #12]
 8035740:	681b      	ldr	r3, [r3, #0]
 8035742:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8035744:	68fb      	ldr	r3, [r7, #12]
 8035746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8035748:	1c9a      	adds	r2, r3, #2
 803574a:	68fb      	ldr	r3, [r7, #12]
 803574c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 803574e:	68fb      	ldr	r3, [r7, #12]
 8035750:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8035752:	b29b      	uxth	r3, r3
 8035754:	3b01      	subs	r3, #1
 8035756:	b29a      	uxth	r2, r3
 8035758:	68fb      	ldr	r3, [r7, #12]
 803575a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 803575c:	2300      	movs	r3, #0
 803575e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8035760:	68fb      	ldr	r3, [r7, #12]
 8035762:	681b      	ldr	r3, [r3, #0]
 8035764:	689b      	ldr	r3, [r3, #8]
 8035766:	f003 0301 	and.w	r3, r3, #1
 803576a:	2b01      	cmp	r3, #1
 803576c:	d119      	bne.n	80357a2 <HAL_SPI_TransmitReceive+0x1b8>
 803576e:	68fb      	ldr	r3, [r7, #12]
 8035770:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8035772:	b29b      	uxth	r3, r3
 8035774:	2b00      	cmp	r3, #0
 8035776:	d014      	beq.n	80357a2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8035778:	68fb      	ldr	r3, [r7, #12]
 803577a:	681b      	ldr	r3, [r3, #0]
 803577c:	68da      	ldr	r2, [r3, #12]
 803577e:	68fb      	ldr	r3, [r7, #12]
 8035780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8035782:	b292      	uxth	r2, r2
 8035784:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8035786:	68fb      	ldr	r3, [r7, #12]
 8035788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803578a:	1c9a      	adds	r2, r3, #2
 803578c:	68fb      	ldr	r3, [r7, #12]
 803578e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8035790:	68fb      	ldr	r3, [r7, #12]
 8035792:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8035794:	b29b      	uxth	r3, r3
 8035796:	3b01      	subs	r3, #1
 8035798:	b29a      	uxth	r2, r3
 803579a:	68fb      	ldr	r3, [r7, #12]
 803579c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 803579e:	2301      	movs	r3, #1
 80357a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80357a2:	f7f6 fde3 	bl	802c36c <HAL_GetTick>
 80357a6:	4602      	mov	r2, r0
 80357a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80357aa:	1ad3      	subs	r3, r2, r3
 80357ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80357ae:	429a      	cmp	r2, r3
 80357b0:	d807      	bhi.n	80357c2 <HAL_SPI_TransmitReceive+0x1d8>
 80357b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80357b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80357b8:	d003      	beq.n	80357c2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80357ba:	2303      	movs	r3, #3
 80357bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80357c0:	e0a7      	b.n	8035912 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80357c2:	68fb      	ldr	r3, [r7, #12]
 80357c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80357c6:	b29b      	uxth	r3, r3
 80357c8:	2b00      	cmp	r3, #0
 80357ca:	d1a6      	bne.n	803571a <HAL_SPI_TransmitReceive+0x130>
 80357cc:	68fb      	ldr	r3, [r7, #12]
 80357ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80357d0:	b29b      	uxth	r3, r3
 80357d2:	2b00      	cmp	r3, #0
 80357d4:	d1a1      	bne.n	803571a <HAL_SPI_TransmitReceive+0x130>
 80357d6:	e07c      	b.n	80358d2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80357d8:	68fb      	ldr	r3, [r7, #12]
 80357da:	685b      	ldr	r3, [r3, #4]
 80357dc:	2b00      	cmp	r3, #0
 80357de:	d002      	beq.n	80357e6 <HAL_SPI_TransmitReceive+0x1fc>
 80357e0:	8b7b      	ldrh	r3, [r7, #26]
 80357e2:	2b01      	cmp	r3, #1
 80357e4:	d16b      	bne.n	80358be <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80357e6:	68fb      	ldr	r3, [r7, #12]
 80357e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80357ea:	68fb      	ldr	r3, [r7, #12]
 80357ec:	681b      	ldr	r3, [r3, #0]
 80357ee:	330c      	adds	r3, #12
 80357f0:	7812      	ldrb	r2, [r2, #0]
 80357f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80357f4:	68fb      	ldr	r3, [r7, #12]
 80357f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80357f8:	1c5a      	adds	r2, r3, #1
 80357fa:	68fb      	ldr	r3, [r7, #12]
 80357fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80357fe:	68fb      	ldr	r3, [r7, #12]
 8035800:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8035802:	b29b      	uxth	r3, r3
 8035804:	3b01      	subs	r3, #1
 8035806:	b29a      	uxth	r2, r3
 8035808:	68fb      	ldr	r3, [r7, #12]
 803580a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 803580c:	e057      	b.n	80358be <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 803580e:	68fb      	ldr	r3, [r7, #12]
 8035810:	681b      	ldr	r3, [r3, #0]
 8035812:	689b      	ldr	r3, [r3, #8]
 8035814:	f003 0302 	and.w	r3, r3, #2
 8035818:	2b02      	cmp	r3, #2
 803581a:	d11c      	bne.n	8035856 <HAL_SPI_TransmitReceive+0x26c>
 803581c:	68fb      	ldr	r3, [r7, #12]
 803581e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8035820:	b29b      	uxth	r3, r3
 8035822:	2b00      	cmp	r3, #0
 8035824:	d017      	beq.n	8035856 <HAL_SPI_TransmitReceive+0x26c>
 8035826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8035828:	2b01      	cmp	r3, #1
 803582a:	d114      	bne.n	8035856 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 803582c:	68fb      	ldr	r3, [r7, #12]
 803582e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8035830:	68fb      	ldr	r3, [r7, #12]
 8035832:	681b      	ldr	r3, [r3, #0]
 8035834:	330c      	adds	r3, #12
 8035836:	7812      	ldrb	r2, [r2, #0]
 8035838:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 803583a:	68fb      	ldr	r3, [r7, #12]
 803583c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803583e:	1c5a      	adds	r2, r3, #1
 8035840:	68fb      	ldr	r3, [r7, #12]
 8035842:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8035844:	68fb      	ldr	r3, [r7, #12]
 8035846:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8035848:	b29b      	uxth	r3, r3
 803584a:	3b01      	subs	r3, #1
 803584c:	b29a      	uxth	r2, r3
 803584e:	68fb      	ldr	r3, [r7, #12]
 8035850:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8035852:	2300      	movs	r3, #0
 8035854:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8035856:	68fb      	ldr	r3, [r7, #12]
 8035858:	681b      	ldr	r3, [r3, #0]
 803585a:	689b      	ldr	r3, [r3, #8]
 803585c:	f003 0301 	and.w	r3, r3, #1
 8035860:	2b01      	cmp	r3, #1
 8035862:	d119      	bne.n	8035898 <HAL_SPI_TransmitReceive+0x2ae>
 8035864:	68fb      	ldr	r3, [r7, #12]
 8035866:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8035868:	b29b      	uxth	r3, r3
 803586a:	2b00      	cmp	r3, #0
 803586c:	d014      	beq.n	8035898 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 803586e:	68fb      	ldr	r3, [r7, #12]
 8035870:	681b      	ldr	r3, [r3, #0]
 8035872:	68da      	ldr	r2, [r3, #12]
 8035874:	68fb      	ldr	r3, [r7, #12]
 8035876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8035878:	b2d2      	uxtb	r2, r2
 803587a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 803587c:	68fb      	ldr	r3, [r7, #12]
 803587e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8035880:	1c5a      	adds	r2, r3, #1
 8035882:	68fb      	ldr	r3, [r7, #12]
 8035884:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8035886:	68fb      	ldr	r3, [r7, #12]
 8035888:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 803588a:	b29b      	uxth	r3, r3
 803588c:	3b01      	subs	r3, #1
 803588e:	b29a      	uxth	r2, r3
 8035890:	68fb      	ldr	r3, [r7, #12]
 8035892:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8035894:	2301      	movs	r3, #1
 8035896:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8035898:	f7f6 fd68 	bl	802c36c <HAL_GetTick>
 803589c:	4602      	mov	r2, r0
 803589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80358a0:	1ad3      	subs	r3, r2, r3
 80358a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80358a4:	429a      	cmp	r2, r3
 80358a6:	d803      	bhi.n	80358b0 <HAL_SPI_TransmitReceive+0x2c6>
 80358a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80358aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80358ae:	d102      	bne.n	80358b6 <HAL_SPI_TransmitReceive+0x2cc>
 80358b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80358b2:	2b00      	cmp	r3, #0
 80358b4:	d103      	bne.n	80358be <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80358b6:	2303      	movs	r3, #3
 80358b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80358bc:	e029      	b.n	8035912 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80358be:	68fb      	ldr	r3, [r7, #12]
 80358c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80358c2:	b29b      	uxth	r3, r3
 80358c4:	2b00      	cmp	r3, #0
 80358c6:	d1a2      	bne.n	803580e <HAL_SPI_TransmitReceive+0x224>
 80358c8:	68fb      	ldr	r3, [r7, #12]
 80358ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80358cc:	b29b      	uxth	r3, r3
 80358ce:	2b00      	cmp	r3, #0
 80358d0:	d19d      	bne.n	803580e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80358d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80358d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80358d6:	68f8      	ldr	r0, [r7, #12]
 80358d8:	f000 f894 	bl	8035a04 <SPI_EndRxTxTransaction>
 80358dc:	4603      	mov	r3, r0
 80358de:	2b00      	cmp	r3, #0
 80358e0:	d006      	beq.n	80358f0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80358e2:	2301      	movs	r3, #1
 80358e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80358e8:	68fb      	ldr	r3, [r7, #12]
 80358ea:	2220      	movs	r2, #32
 80358ec:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80358ee:	e010      	b.n	8035912 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80358f0:	68fb      	ldr	r3, [r7, #12]
 80358f2:	689b      	ldr	r3, [r3, #8]
 80358f4:	2b00      	cmp	r3, #0
 80358f6:	d10b      	bne.n	8035910 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80358f8:	2300      	movs	r3, #0
 80358fa:	617b      	str	r3, [r7, #20]
 80358fc:	68fb      	ldr	r3, [r7, #12]
 80358fe:	681b      	ldr	r3, [r3, #0]
 8035900:	68db      	ldr	r3, [r3, #12]
 8035902:	617b      	str	r3, [r7, #20]
 8035904:	68fb      	ldr	r3, [r7, #12]
 8035906:	681b      	ldr	r3, [r3, #0]
 8035908:	689b      	ldr	r3, [r3, #8]
 803590a:	617b      	str	r3, [r7, #20]
 803590c:	697b      	ldr	r3, [r7, #20]
 803590e:	e000      	b.n	8035912 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8035910:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8035912:	68fb      	ldr	r3, [r7, #12]
 8035914:	2201      	movs	r2, #1
 8035916:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 803591a:	68fb      	ldr	r3, [r7, #12]
 803591c:	2200      	movs	r2, #0
 803591e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8035922:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8035926:	4618      	mov	r0, r3
 8035928:	3730      	adds	r7, #48	; 0x30
 803592a:	46bd      	mov	sp, r7
 803592c:	bd80      	pop	{r7, pc}

0803592e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 803592e:	b580      	push	{r7, lr}
 8035930:	b084      	sub	sp, #16
 8035932:	af00      	add	r7, sp, #0
 8035934:	60f8      	str	r0, [r7, #12]
 8035936:	60b9      	str	r1, [r7, #8]
 8035938:	603b      	str	r3, [r7, #0]
 803593a:	4613      	mov	r3, r2
 803593c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 803593e:	e04c      	b.n	80359da <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8035940:	683b      	ldr	r3, [r7, #0]
 8035942:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8035946:	d048      	beq.n	80359da <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8035948:	f7f6 fd10 	bl	802c36c <HAL_GetTick>
 803594c:	4602      	mov	r2, r0
 803594e:	69bb      	ldr	r3, [r7, #24]
 8035950:	1ad3      	subs	r3, r2, r3
 8035952:	683a      	ldr	r2, [r7, #0]
 8035954:	429a      	cmp	r2, r3
 8035956:	d902      	bls.n	803595e <SPI_WaitFlagStateUntilTimeout+0x30>
 8035958:	683b      	ldr	r3, [r7, #0]
 803595a:	2b00      	cmp	r3, #0
 803595c:	d13d      	bne.n	80359da <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 803595e:	68fb      	ldr	r3, [r7, #12]
 8035960:	681b      	ldr	r3, [r3, #0]
 8035962:	685a      	ldr	r2, [r3, #4]
 8035964:	68fb      	ldr	r3, [r7, #12]
 8035966:	681b      	ldr	r3, [r3, #0]
 8035968:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 803596c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 803596e:	68fb      	ldr	r3, [r7, #12]
 8035970:	685b      	ldr	r3, [r3, #4]
 8035972:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8035976:	d111      	bne.n	803599c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8035978:	68fb      	ldr	r3, [r7, #12]
 803597a:	689b      	ldr	r3, [r3, #8]
 803597c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8035980:	d004      	beq.n	803598c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8035982:	68fb      	ldr	r3, [r7, #12]
 8035984:	689b      	ldr	r3, [r3, #8]
 8035986:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 803598a:	d107      	bne.n	803599c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 803598c:	68fb      	ldr	r3, [r7, #12]
 803598e:	681b      	ldr	r3, [r3, #0]
 8035990:	681a      	ldr	r2, [r3, #0]
 8035992:	68fb      	ldr	r3, [r7, #12]
 8035994:	681b      	ldr	r3, [r3, #0]
 8035996:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 803599a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 803599c:	68fb      	ldr	r3, [r7, #12]
 803599e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80359a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80359a4:	d10f      	bne.n	80359c6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80359a6:	68fb      	ldr	r3, [r7, #12]
 80359a8:	681b      	ldr	r3, [r3, #0]
 80359aa:	681a      	ldr	r2, [r3, #0]
 80359ac:	68fb      	ldr	r3, [r7, #12]
 80359ae:	681b      	ldr	r3, [r3, #0]
 80359b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80359b4:	601a      	str	r2, [r3, #0]
 80359b6:	68fb      	ldr	r3, [r7, #12]
 80359b8:	681b      	ldr	r3, [r3, #0]
 80359ba:	681a      	ldr	r2, [r3, #0]
 80359bc:	68fb      	ldr	r3, [r7, #12]
 80359be:	681b      	ldr	r3, [r3, #0]
 80359c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80359c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80359c6:	68fb      	ldr	r3, [r7, #12]
 80359c8:	2201      	movs	r2, #1
 80359ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80359ce:	68fb      	ldr	r3, [r7, #12]
 80359d0:	2200      	movs	r2, #0
 80359d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80359d6:	2303      	movs	r3, #3
 80359d8:	e00f      	b.n	80359fa <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80359da:	68fb      	ldr	r3, [r7, #12]
 80359dc:	681b      	ldr	r3, [r3, #0]
 80359de:	689a      	ldr	r2, [r3, #8]
 80359e0:	68bb      	ldr	r3, [r7, #8]
 80359e2:	4013      	ands	r3, r2
 80359e4:	68ba      	ldr	r2, [r7, #8]
 80359e6:	429a      	cmp	r2, r3
 80359e8:	bf0c      	ite	eq
 80359ea:	2301      	moveq	r3, #1
 80359ec:	2300      	movne	r3, #0
 80359ee:	b2db      	uxtb	r3, r3
 80359f0:	461a      	mov	r2, r3
 80359f2:	79fb      	ldrb	r3, [r7, #7]
 80359f4:	429a      	cmp	r2, r3
 80359f6:	d1a3      	bne.n	8035940 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80359f8:	2300      	movs	r3, #0
}
 80359fa:	4618      	mov	r0, r3
 80359fc:	3710      	adds	r7, #16
 80359fe:	46bd      	mov	sp, r7
 8035a00:	bd80      	pop	{r7, pc}
	...

08035a04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8035a04:	b580      	push	{r7, lr}
 8035a06:	b088      	sub	sp, #32
 8035a08:	af02      	add	r7, sp, #8
 8035a0a:	60f8      	str	r0, [r7, #12]
 8035a0c:	60b9      	str	r1, [r7, #8]
 8035a0e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8035a10:	4b1b      	ldr	r3, [pc, #108]	; (8035a80 <SPI_EndRxTxTransaction+0x7c>)
 8035a12:	681b      	ldr	r3, [r3, #0]
 8035a14:	4a1b      	ldr	r2, [pc, #108]	; (8035a84 <SPI_EndRxTxTransaction+0x80>)
 8035a16:	fba2 2303 	umull	r2, r3, r2, r3
 8035a1a:	0d5b      	lsrs	r3, r3, #21
 8035a1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8035a20:	fb02 f303 	mul.w	r3, r2, r3
 8035a24:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8035a26:	68fb      	ldr	r3, [r7, #12]
 8035a28:	685b      	ldr	r3, [r3, #4]
 8035a2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8035a2e:	d112      	bne.n	8035a56 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8035a30:	687b      	ldr	r3, [r7, #4]
 8035a32:	9300      	str	r3, [sp, #0]
 8035a34:	68bb      	ldr	r3, [r7, #8]
 8035a36:	2200      	movs	r2, #0
 8035a38:	2180      	movs	r1, #128	; 0x80
 8035a3a:	68f8      	ldr	r0, [r7, #12]
 8035a3c:	f7ff ff77 	bl	803592e <SPI_WaitFlagStateUntilTimeout>
 8035a40:	4603      	mov	r3, r0
 8035a42:	2b00      	cmp	r3, #0
 8035a44:	d016      	beq.n	8035a74 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8035a46:	68fb      	ldr	r3, [r7, #12]
 8035a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035a4a:	f043 0220 	orr.w	r2, r3, #32
 8035a4e:	68fb      	ldr	r3, [r7, #12]
 8035a50:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8035a52:	2303      	movs	r3, #3
 8035a54:	e00f      	b.n	8035a76 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8035a56:	697b      	ldr	r3, [r7, #20]
 8035a58:	2b00      	cmp	r3, #0
 8035a5a:	d00a      	beq.n	8035a72 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8035a5c:	697b      	ldr	r3, [r7, #20]
 8035a5e:	3b01      	subs	r3, #1
 8035a60:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8035a62:	68fb      	ldr	r3, [r7, #12]
 8035a64:	681b      	ldr	r3, [r3, #0]
 8035a66:	689b      	ldr	r3, [r3, #8]
 8035a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8035a6c:	2b80      	cmp	r3, #128	; 0x80
 8035a6e:	d0f2      	beq.n	8035a56 <SPI_EndRxTxTransaction+0x52>
 8035a70:	e000      	b.n	8035a74 <SPI_EndRxTxTransaction+0x70>
        break;
 8035a72:	bf00      	nop
  }

  return HAL_OK;
 8035a74:	2300      	movs	r3, #0
}
 8035a76:	4618      	mov	r0, r3
 8035a78:	3718      	adds	r7, #24
 8035a7a:	46bd      	mov	sp, r7
 8035a7c:	bd80      	pop	{r7, pc}
 8035a7e:	bf00      	nop
 8035a80:	20000294 	.word	0x20000294
 8035a84:	165e9f81 	.word	0x165e9f81

08035a88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8035a88:	b580      	push	{r7, lr}
 8035a8a:	b082      	sub	sp, #8
 8035a8c:	af00      	add	r7, sp, #0
 8035a8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8035a90:	687b      	ldr	r3, [r7, #4]
 8035a92:	2b00      	cmp	r3, #0
 8035a94:	d101      	bne.n	8035a9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8035a96:	2301      	movs	r3, #1
 8035a98:	e01d      	b.n	8035ad6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8035a9a:	687b      	ldr	r3, [r7, #4]
 8035a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8035aa0:	b2db      	uxtb	r3, r3
 8035aa2:	2b00      	cmp	r3, #0
 8035aa4:	d106      	bne.n	8035ab4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8035aa6:	687b      	ldr	r3, [r7, #4]
 8035aa8:	2200      	movs	r2, #0
 8035aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8035aae:	6878      	ldr	r0, [r7, #4]
 8035ab0:	f7f6 f890 	bl	802bbd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8035ab4:	687b      	ldr	r3, [r7, #4]
 8035ab6:	2202      	movs	r2, #2
 8035ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8035abc:	687b      	ldr	r3, [r7, #4]
 8035abe:	681a      	ldr	r2, [r3, #0]
 8035ac0:	687b      	ldr	r3, [r7, #4]
 8035ac2:	3304      	adds	r3, #4
 8035ac4:	4619      	mov	r1, r3
 8035ac6:	4610      	mov	r0, r2
 8035ac8:	f000 fa58 	bl	8035f7c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8035acc:	687b      	ldr	r3, [r7, #4]
 8035ace:	2201      	movs	r2, #1
 8035ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8035ad4:	2300      	movs	r3, #0
}
 8035ad6:	4618      	mov	r0, r3
 8035ad8:	3708      	adds	r7, #8
 8035ada:	46bd      	mov	sp, r7
 8035adc:	bd80      	pop	{r7, pc}

08035ade <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8035ade:	b480      	push	{r7}
 8035ae0:	b085      	sub	sp, #20
 8035ae2:	af00      	add	r7, sp, #0
 8035ae4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8035ae6:	687b      	ldr	r3, [r7, #4]
 8035ae8:	681b      	ldr	r3, [r3, #0]
 8035aea:	68da      	ldr	r2, [r3, #12]
 8035aec:	687b      	ldr	r3, [r7, #4]
 8035aee:	681b      	ldr	r3, [r3, #0]
 8035af0:	f042 0201 	orr.w	r2, r2, #1
 8035af4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8035af6:	687b      	ldr	r3, [r7, #4]
 8035af8:	681b      	ldr	r3, [r3, #0]
 8035afa:	689b      	ldr	r3, [r3, #8]
 8035afc:	f003 0307 	and.w	r3, r3, #7
 8035b00:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8035b02:	68fb      	ldr	r3, [r7, #12]
 8035b04:	2b06      	cmp	r3, #6
 8035b06:	d007      	beq.n	8035b18 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8035b08:	687b      	ldr	r3, [r7, #4]
 8035b0a:	681b      	ldr	r3, [r3, #0]
 8035b0c:	681a      	ldr	r2, [r3, #0]
 8035b0e:	687b      	ldr	r3, [r7, #4]
 8035b10:	681b      	ldr	r3, [r3, #0]
 8035b12:	f042 0201 	orr.w	r2, r2, #1
 8035b16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8035b18:	2300      	movs	r3, #0
}
 8035b1a:	4618      	mov	r0, r3
 8035b1c:	3714      	adds	r7, #20
 8035b1e:	46bd      	mov	sp, r7
 8035b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035b24:	4770      	bx	lr

08035b26 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8035b26:	b580      	push	{r7, lr}
 8035b28:	b082      	sub	sp, #8
 8035b2a:	af00      	add	r7, sp, #0
 8035b2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8035b2e:	687b      	ldr	r3, [r7, #4]
 8035b30:	2b00      	cmp	r3, #0
 8035b32:	d101      	bne.n	8035b38 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8035b34:	2301      	movs	r3, #1
 8035b36:	e01d      	b.n	8035b74 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8035b38:	687b      	ldr	r3, [r7, #4]
 8035b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8035b3e:	b2db      	uxtb	r3, r3
 8035b40:	2b00      	cmp	r3, #0
 8035b42:	d106      	bne.n	8035b52 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8035b44:	687b      	ldr	r3, [r7, #4]
 8035b46:	2200      	movs	r2, #0
 8035b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8035b4c:	6878      	ldr	r0, [r7, #4]
 8035b4e:	f000 f815 	bl	8035b7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8035b52:	687b      	ldr	r3, [r7, #4]
 8035b54:	2202      	movs	r2, #2
 8035b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8035b5a:	687b      	ldr	r3, [r7, #4]
 8035b5c:	681a      	ldr	r2, [r3, #0]
 8035b5e:	687b      	ldr	r3, [r7, #4]
 8035b60:	3304      	adds	r3, #4
 8035b62:	4619      	mov	r1, r3
 8035b64:	4610      	mov	r0, r2
 8035b66:	f000 fa09 	bl	8035f7c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8035b6a:	687b      	ldr	r3, [r7, #4]
 8035b6c:	2201      	movs	r2, #1
 8035b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8035b72:	2300      	movs	r3, #0
}
 8035b74:	4618      	mov	r0, r3
 8035b76:	3708      	adds	r7, #8
 8035b78:	46bd      	mov	sp, r7
 8035b7a:	bd80      	pop	{r7, pc}

08035b7c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8035b7c:	b480      	push	{r7}
 8035b7e:	b083      	sub	sp, #12
 8035b80:	af00      	add	r7, sp, #0
 8035b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8035b84:	bf00      	nop
 8035b86:	370c      	adds	r7, #12
 8035b88:	46bd      	mov	sp, r7
 8035b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035b8e:	4770      	bx	lr

08035b90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8035b90:	b580      	push	{r7, lr}
 8035b92:	b082      	sub	sp, #8
 8035b94:	af00      	add	r7, sp, #0
 8035b96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8035b98:	687b      	ldr	r3, [r7, #4]
 8035b9a:	681b      	ldr	r3, [r3, #0]
 8035b9c:	691b      	ldr	r3, [r3, #16]
 8035b9e:	f003 0302 	and.w	r3, r3, #2
 8035ba2:	2b02      	cmp	r3, #2
 8035ba4:	d122      	bne.n	8035bec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8035ba6:	687b      	ldr	r3, [r7, #4]
 8035ba8:	681b      	ldr	r3, [r3, #0]
 8035baa:	68db      	ldr	r3, [r3, #12]
 8035bac:	f003 0302 	and.w	r3, r3, #2
 8035bb0:	2b02      	cmp	r3, #2
 8035bb2:	d11b      	bne.n	8035bec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8035bb4:	687b      	ldr	r3, [r7, #4]
 8035bb6:	681b      	ldr	r3, [r3, #0]
 8035bb8:	f06f 0202 	mvn.w	r2, #2
 8035bbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8035bbe:	687b      	ldr	r3, [r7, #4]
 8035bc0:	2201      	movs	r2, #1
 8035bc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8035bc4:	687b      	ldr	r3, [r7, #4]
 8035bc6:	681b      	ldr	r3, [r3, #0]
 8035bc8:	699b      	ldr	r3, [r3, #24]
 8035bca:	f003 0303 	and.w	r3, r3, #3
 8035bce:	2b00      	cmp	r3, #0
 8035bd0:	d003      	beq.n	8035bda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8035bd2:	6878      	ldr	r0, [r7, #4]
 8035bd4:	f000 f9b4 	bl	8035f40 <HAL_TIM_IC_CaptureCallback>
 8035bd8:	e005      	b.n	8035be6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8035bda:	6878      	ldr	r0, [r7, #4]
 8035bdc:	f000 f9a6 	bl	8035f2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8035be0:	6878      	ldr	r0, [r7, #4]
 8035be2:	f000 f9b7 	bl	8035f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8035be6:	687b      	ldr	r3, [r7, #4]
 8035be8:	2200      	movs	r2, #0
 8035bea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8035bec:	687b      	ldr	r3, [r7, #4]
 8035bee:	681b      	ldr	r3, [r3, #0]
 8035bf0:	691b      	ldr	r3, [r3, #16]
 8035bf2:	f003 0304 	and.w	r3, r3, #4
 8035bf6:	2b04      	cmp	r3, #4
 8035bf8:	d122      	bne.n	8035c40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8035bfa:	687b      	ldr	r3, [r7, #4]
 8035bfc:	681b      	ldr	r3, [r3, #0]
 8035bfe:	68db      	ldr	r3, [r3, #12]
 8035c00:	f003 0304 	and.w	r3, r3, #4
 8035c04:	2b04      	cmp	r3, #4
 8035c06:	d11b      	bne.n	8035c40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8035c08:	687b      	ldr	r3, [r7, #4]
 8035c0a:	681b      	ldr	r3, [r3, #0]
 8035c0c:	f06f 0204 	mvn.w	r2, #4
 8035c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8035c12:	687b      	ldr	r3, [r7, #4]
 8035c14:	2202      	movs	r2, #2
 8035c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8035c18:	687b      	ldr	r3, [r7, #4]
 8035c1a:	681b      	ldr	r3, [r3, #0]
 8035c1c:	699b      	ldr	r3, [r3, #24]
 8035c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8035c22:	2b00      	cmp	r3, #0
 8035c24:	d003      	beq.n	8035c2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8035c26:	6878      	ldr	r0, [r7, #4]
 8035c28:	f000 f98a 	bl	8035f40 <HAL_TIM_IC_CaptureCallback>
 8035c2c:	e005      	b.n	8035c3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8035c2e:	6878      	ldr	r0, [r7, #4]
 8035c30:	f000 f97c 	bl	8035f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8035c34:	6878      	ldr	r0, [r7, #4]
 8035c36:	f000 f98d 	bl	8035f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8035c3a:	687b      	ldr	r3, [r7, #4]
 8035c3c:	2200      	movs	r2, #0
 8035c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8035c40:	687b      	ldr	r3, [r7, #4]
 8035c42:	681b      	ldr	r3, [r3, #0]
 8035c44:	691b      	ldr	r3, [r3, #16]
 8035c46:	f003 0308 	and.w	r3, r3, #8
 8035c4a:	2b08      	cmp	r3, #8
 8035c4c:	d122      	bne.n	8035c94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8035c4e:	687b      	ldr	r3, [r7, #4]
 8035c50:	681b      	ldr	r3, [r3, #0]
 8035c52:	68db      	ldr	r3, [r3, #12]
 8035c54:	f003 0308 	and.w	r3, r3, #8
 8035c58:	2b08      	cmp	r3, #8
 8035c5a:	d11b      	bne.n	8035c94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8035c5c:	687b      	ldr	r3, [r7, #4]
 8035c5e:	681b      	ldr	r3, [r3, #0]
 8035c60:	f06f 0208 	mvn.w	r2, #8
 8035c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8035c66:	687b      	ldr	r3, [r7, #4]
 8035c68:	2204      	movs	r2, #4
 8035c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8035c6c:	687b      	ldr	r3, [r7, #4]
 8035c6e:	681b      	ldr	r3, [r3, #0]
 8035c70:	69db      	ldr	r3, [r3, #28]
 8035c72:	f003 0303 	and.w	r3, r3, #3
 8035c76:	2b00      	cmp	r3, #0
 8035c78:	d003      	beq.n	8035c82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8035c7a:	6878      	ldr	r0, [r7, #4]
 8035c7c:	f000 f960 	bl	8035f40 <HAL_TIM_IC_CaptureCallback>
 8035c80:	e005      	b.n	8035c8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8035c82:	6878      	ldr	r0, [r7, #4]
 8035c84:	f000 f952 	bl	8035f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8035c88:	6878      	ldr	r0, [r7, #4]
 8035c8a:	f000 f963 	bl	8035f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8035c8e:	687b      	ldr	r3, [r7, #4]
 8035c90:	2200      	movs	r2, #0
 8035c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8035c94:	687b      	ldr	r3, [r7, #4]
 8035c96:	681b      	ldr	r3, [r3, #0]
 8035c98:	691b      	ldr	r3, [r3, #16]
 8035c9a:	f003 0310 	and.w	r3, r3, #16
 8035c9e:	2b10      	cmp	r3, #16
 8035ca0:	d122      	bne.n	8035ce8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8035ca2:	687b      	ldr	r3, [r7, #4]
 8035ca4:	681b      	ldr	r3, [r3, #0]
 8035ca6:	68db      	ldr	r3, [r3, #12]
 8035ca8:	f003 0310 	and.w	r3, r3, #16
 8035cac:	2b10      	cmp	r3, #16
 8035cae:	d11b      	bne.n	8035ce8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8035cb0:	687b      	ldr	r3, [r7, #4]
 8035cb2:	681b      	ldr	r3, [r3, #0]
 8035cb4:	f06f 0210 	mvn.w	r2, #16
 8035cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8035cba:	687b      	ldr	r3, [r7, #4]
 8035cbc:	2208      	movs	r2, #8
 8035cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8035cc0:	687b      	ldr	r3, [r7, #4]
 8035cc2:	681b      	ldr	r3, [r3, #0]
 8035cc4:	69db      	ldr	r3, [r3, #28]
 8035cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8035cca:	2b00      	cmp	r3, #0
 8035ccc:	d003      	beq.n	8035cd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8035cce:	6878      	ldr	r0, [r7, #4]
 8035cd0:	f000 f936 	bl	8035f40 <HAL_TIM_IC_CaptureCallback>
 8035cd4:	e005      	b.n	8035ce2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8035cd6:	6878      	ldr	r0, [r7, #4]
 8035cd8:	f000 f928 	bl	8035f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8035cdc:	6878      	ldr	r0, [r7, #4]
 8035cde:	f000 f939 	bl	8035f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8035ce2:	687b      	ldr	r3, [r7, #4]
 8035ce4:	2200      	movs	r2, #0
 8035ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8035ce8:	687b      	ldr	r3, [r7, #4]
 8035cea:	681b      	ldr	r3, [r3, #0]
 8035cec:	691b      	ldr	r3, [r3, #16]
 8035cee:	f003 0301 	and.w	r3, r3, #1
 8035cf2:	2b01      	cmp	r3, #1
 8035cf4:	d10e      	bne.n	8035d14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8035cf6:	687b      	ldr	r3, [r7, #4]
 8035cf8:	681b      	ldr	r3, [r3, #0]
 8035cfa:	68db      	ldr	r3, [r3, #12]
 8035cfc:	f003 0301 	and.w	r3, r3, #1
 8035d00:	2b01      	cmp	r3, #1
 8035d02:	d107      	bne.n	8035d14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8035d04:	687b      	ldr	r3, [r7, #4]
 8035d06:	681b      	ldr	r3, [r3, #0]
 8035d08:	f06f 0201 	mvn.w	r2, #1
 8035d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8035d0e:	6878      	ldr	r0, [r7, #4]
 8035d10:	f7f5 fb98 	bl	802b444 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8035d14:	687b      	ldr	r3, [r7, #4]
 8035d16:	681b      	ldr	r3, [r3, #0]
 8035d18:	691b      	ldr	r3, [r3, #16]
 8035d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8035d1e:	2b80      	cmp	r3, #128	; 0x80
 8035d20:	d10e      	bne.n	8035d40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8035d22:	687b      	ldr	r3, [r7, #4]
 8035d24:	681b      	ldr	r3, [r3, #0]
 8035d26:	68db      	ldr	r3, [r3, #12]
 8035d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8035d2c:	2b80      	cmp	r3, #128	; 0x80
 8035d2e:	d107      	bne.n	8035d40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8035d30:	687b      	ldr	r3, [r7, #4]
 8035d32:	681b      	ldr	r3, [r3, #0]
 8035d34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8035d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8035d3a:	6878      	ldr	r0, [r7, #4]
 8035d3c:	f000 fb78 	bl	8036430 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8035d40:	687b      	ldr	r3, [r7, #4]
 8035d42:	681b      	ldr	r3, [r3, #0]
 8035d44:	691b      	ldr	r3, [r3, #16]
 8035d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8035d4a:	2b40      	cmp	r3, #64	; 0x40
 8035d4c:	d10e      	bne.n	8035d6c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8035d4e:	687b      	ldr	r3, [r7, #4]
 8035d50:	681b      	ldr	r3, [r3, #0]
 8035d52:	68db      	ldr	r3, [r3, #12]
 8035d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8035d58:	2b40      	cmp	r3, #64	; 0x40
 8035d5a:	d107      	bne.n	8035d6c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8035d5c:	687b      	ldr	r3, [r7, #4]
 8035d5e:	681b      	ldr	r3, [r3, #0]
 8035d60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8035d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8035d66:	6878      	ldr	r0, [r7, #4]
 8035d68:	f000 f8fe 	bl	8035f68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8035d6c:	687b      	ldr	r3, [r7, #4]
 8035d6e:	681b      	ldr	r3, [r3, #0]
 8035d70:	691b      	ldr	r3, [r3, #16]
 8035d72:	f003 0320 	and.w	r3, r3, #32
 8035d76:	2b20      	cmp	r3, #32
 8035d78:	d10e      	bne.n	8035d98 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8035d7a:	687b      	ldr	r3, [r7, #4]
 8035d7c:	681b      	ldr	r3, [r3, #0]
 8035d7e:	68db      	ldr	r3, [r3, #12]
 8035d80:	f003 0320 	and.w	r3, r3, #32
 8035d84:	2b20      	cmp	r3, #32
 8035d86:	d107      	bne.n	8035d98 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8035d88:	687b      	ldr	r3, [r7, #4]
 8035d8a:	681b      	ldr	r3, [r3, #0]
 8035d8c:	f06f 0220 	mvn.w	r2, #32
 8035d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8035d92:	6878      	ldr	r0, [r7, #4]
 8035d94:	f000 fb42 	bl	803641c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8035d98:	bf00      	nop
 8035d9a:	3708      	adds	r7, #8
 8035d9c:	46bd      	mov	sp, r7
 8035d9e:	bd80      	pop	{r7, pc}

08035da0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8035da0:	b580      	push	{r7, lr}
 8035da2:	b084      	sub	sp, #16
 8035da4:	af00      	add	r7, sp, #0
 8035da6:	60f8      	str	r0, [r7, #12]
 8035da8:	60b9      	str	r1, [r7, #8]
 8035daa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8035dac:	68fb      	ldr	r3, [r7, #12]
 8035dae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8035db2:	2b01      	cmp	r3, #1
 8035db4:	d101      	bne.n	8035dba <HAL_TIM_PWM_ConfigChannel+0x1a>
 8035db6:	2302      	movs	r3, #2
 8035db8:	e0b4      	b.n	8035f24 <HAL_TIM_PWM_ConfigChannel+0x184>
 8035dba:	68fb      	ldr	r3, [r7, #12]
 8035dbc:	2201      	movs	r2, #1
 8035dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8035dc2:	68fb      	ldr	r3, [r7, #12]
 8035dc4:	2202      	movs	r2, #2
 8035dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8035dca:	687b      	ldr	r3, [r7, #4]
 8035dcc:	2b0c      	cmp	r3, #12
 8035dce:	f200 809f 	bhi.w	8035f10 <HAL_TIM_PWM_ConfigChannel+0x170>
 8035dd2:	a201      	add	r2, pc, #4	; (adr r2, 8035dd8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8035dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035dd8:	08035e0d 	.word	0x08035e0d
 8035ddc:	08035f11 	.word	0x08035f11
 8035de0:	08035f11 	.word	0x08035f11
 8035de4:	08035f11 	.word	0x08035f11
 8035de8:	08035e4d 	.word	0x08035e4d
 8035dec:	08035f11 	.word	0x08035f11
 8035df0:	08035f11 	.word	0x08035f11
 8035df4:	08035f11 	.word	0x08035f11
 8035df8:	08035e8f 	.word	0x08035e8f
 8035dfc:	08035f11 	.word	0x08035f11
 8035e00:	08035f11 	.word	0x08035f11
 8035e04:	08035f11 	.word	0x08035f11
 8035e08:	08035ecf 	.word	0x08035ecf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8035e0c:	68fb      	ldr	r3, [r7, #12]
 8035e0e:	681b      	ldr	r3, [r3, #0]
 8035e10:	68b9      	ldr	r1, [r7, #8]
 8035e12:	4618      	mov	r0, r3
 8035e14:	f000 f952 	bl	80360bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8035e18:	68fb      	ldr	r3, [r7, #12]
 8035e1a:	681b      	ldr	r3, [r3, #0]
 8035e1c:	699a      	ldr	r2, [r3, #24]
 8035e1e:	68fb      	ldr	r3, [r7, #12]
 8035e20:	681b      	ldr	r3, [r3, #0]
 8035e22:	f042 0208 	orr.w	r2, r2, #8
 8035e26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8035e28:	68fb      	ldr	r3, [r7, #12]
 8035e2a:	681b      	ldr	r3, [r3, #0]
 8035e2c:	699a      	ldr	r2, [r3, #24]
 8035e2e:	68fb      	ldr	r3, [r7, #12]
 8035e30:	681b      	ldr	r3, [r3, #0]
 8035e32:	f022 0204 	bic.w	r2, r2, #4
 8035e36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8035e38:	68fb      	ldr	r3, [r7, #12]
 8035e3a:	681b      	ldr	r3, [r3, #0]
 8035e3c:	6999      	ldr	r1, [r3, #24]
 8035e3e:	68bb      	ldr	r3, [r7, #8]
 8035e40:	691a      	ldr	r2, [r3, #16]
 8035e42:	68fb      	ldr	r3, [r7, #12]
 8035e44:	681b      	ldr	r3, [r3, #0]
 8035e46:	430a      	orrs	r2, r1
 8035e48:	619a      	str	r2, [r3, #24]
      break;
 8035e4a:	e062      	b.n	8035f12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8035e4c:	68fb      	ldr	r3, [r7, #12]
 8035e4e:	681b      	ldr	r3, [r3, #0]
 8035e50:	68b9      	ldr	r1, [r7, #8]
 8035e52:	4618      	mov	r0, r3
 8035e54:	f000 f9a2 	bl	803619c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8035e58:	68fb      	ldr	r3, [r7, #12]
 8035e5a:	681b      	ldr	r3, [r3, #0]
 8035e5c:	699a      	ldr	r2, [r3, #24]
 8035e5e:	68fb      	ldr	r3, [r7, #12]
 8035e60:	681b      	ldr	r3, [r3, #0]
 8035e62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8035e66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8035e68:	68fb      	ldr	r3, [r7, #12]
 8035e6a:	681b      	ldr	r3, [r3, #0]
 8035e6c:	699a      	ldr	r2, [r3, #24]
 8035e6e:	68fb      	ldr	r3, [r7, #12]
 8035e70:	681b      	ldr	r3, [r3, #0]
 8035e72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8035e76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8035e78:	68fb      	ldr	r3, [r7, #12]
 8035e7a:	681b      	ldr	r3, [r3, #0]
 8035e7c:	6999      	ldr	r1, [r3, #24]
 8035e7e:	68bb      	ldr	r3, [r7, #8]
 8035e80:	691b      	ldr	r3, [r3, #16]
 8035e82:	021a      	lsls	r2, r3, #8
 8035e84:	68fb      	ldr	r3, [r7, #12]
 8035e86:	681b      	ldr	r3, [r3, #0]
 8035e88:	430a      	orrs	r2, r1
 8035e8a:	619a      	str	r2, [r3, #24]
      break;
 8035e8c:	e041      	b.n	8035f12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8035e8e:	68fb      	ldr	r3, [r7, #12]
 8035e90:	681b      	ldr	r3, [r3, #0]
 8035e92:	68b9      	ldr	r1, [r7, #8]
 8035e94:	4618      	mov	r0, r3
 8035e96:	f000 f9f7 	bl	8036288 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8035e9a:	68fb      	ldr	r3, [r7, #12]
 8035e9c:	681b      	ldr	r3, [r3, #0]
 8035e9e:	69da      	ldr	r2, [r3, #28]
 8035ea0:	68fb      	ldr	r3, [r7, #12]
 8035ea2:	681b      	ldr	r3, [r3, #0]
 8035ea4:	f042 0208 	orr.w	r2, r2, #8
 8035ea8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8035eaa:	68fb      	ldr	r3, [r7, #12]
 8035eac:	681b      	ldr	r3, [r3, #0]
 8035eae:	69da      	ldr	r2, [r3, #28]
 8035eb0:	68fb      	ldr	r3, [r7, #12]
 8035eb2:	681b      	ldr	r3, [r3, #0]
 8035eb4:	f022 0204 	bic.w	r2, r2, #4
 8035eb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8035eba:	68fb      	ldr	r3, [r7, #12]
 8035ebc:	681b      	ldr	r3, [r3, #0]
 8035ebe:	69d9      	ldr	r1, [r3, #28]
 8035ec0:	68bb      	ldr	r3, [r7, #8]
 8035ec2:	691a      	ldr	r2, [r3, #16]
 8035ec4:	68fb      	ldr	r3, [r7, #12]
 8035ec6:	681b      	ldr	r3, [r3, #0]
 8035ec8:	430a      	orrs	r2, r1
 8035eca:	61da      	str	r2, [r3, #28]
      break;
 8035ecc:	e021      	b.n	8035f12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8035ece:	68fb      	ldr	r3, [r7, #12]
 8035ed0:	681b      	ldr	r3, [r3, #0]
 8035ed2:	68b9      	ldr	r1, [r7, #8]
 8035ed4:	4618      	mov	r0, r3
 8035ed6:	f000 fa4b 	bl	8036370 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8035eda:	68fb      	ldr	r3, [r7, #12]
 8035edc:	681b      	ldr	r3, [r3, #0]
 8035ede:	69da      	ldr	r2, [r3, #28]
 8035ee0:	68fb      	ldr	r3, [r7, #12]
 8035ee2:	681b      	ldr	r3, [r3, #0]
 8035ee4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8035ee8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8035eea:	68fb      	ldr	r3, [r7, #12]
 8035eec:	681b      	ldr	r3, [r3, #0]
 8035eee:	69da      	ldr	r2, [r3, #28]
 8035ef0:	68fb      	ldr	r3, [r7, #12]
 8035ef2:	681b      	ldr	r3, [r3, #0]
 8035ef4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8035ef8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8035efa:	68fb      	ldr	r3, [r7, #12]
 8035efc:	681b      	ldr	r3, [r3, #0]
 8035efe:	69d9      	ldr	r1, [r3, #28]
 8035f00:	68bb      	ldr	r3, [r7, #8]
 8035f02:	691b      	ldr	r3, [r3, #16]
 8035f04:	021a      	lsls	r2, r3, #8
 8035f06:	68fb      	ldr	r3, [r7, #12]
 8035f08:	681b      	ldr	r3, [r3, #0]
 8035f0a:	430a      	orrs	r2, r1
 8035f0c:	61da      	str	r2, [r3, #28]
      break;
 8035f0e:	e000      	b.n	8035f12 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8035f10:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8035f12:	68fb      	ldr	r3, [r7, #12]
 8035f14:	2201      	movs	r2, #1
 8035f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8035f1a:	68fb      	ldr	r3, [r7, #12]
 8035f1c:	2200      	movs	r2, #0
 8035f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8035f22:	2300      	movs	r3, #0
}
 8035f24:	4618      	mov	r0, r3
 8035f26:	3710      	adds	r7, #16
 8035f28:	46bd      	mov	sp, r7
 8035f2a:	bd80      	pop	{r7, pc}

08035f2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8035f2c:	b480      	push	{r7}
 8035f2e:	b083      	sub	sp, #12
 8035f30:	af00      	add	r7, sp, #0
 8035f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8035f34:	bf00      	nop
 8035f36:	370c      	adds	r7, #12
 8035f38:	46bd      	mov	sp, r7
 8035f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035f3e:	4770      	bx	lr

08035f40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8035f40:	b480      	push	{r7}
 8035f42:	b083      	sub	sp, #12
 8035f44:	af00      	add	r7, sp, #0
 8035f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8035f48:	bf00      	nop
 8035f4a:	370c      	adds	r7, #12
 8035f4c:	46bd      	mov	sp, r7
 8035f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035f52:	4770      	bx	lr

08035f54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8035f54:	b480      	push	{r7}
 8035f56:	b083      	sub	sp, #12
 8035f58:	af00      	add	r7, sp, #0
 8035f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8035f5c:	bf00      	nop
 8035f5e:	370c      	adds	r7, #12
 8035f60:	46bd      	mov	sp, r7
 8035f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035f66:	4770      	bx	lr

08035f68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8035f68:	b480      	push	{r7}
 8035f6a:	b083      	sub	sp, #12
 8035f6c:	af00      	add	r7, sp, #0
 8035f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8035f70:	bf00      	nop
 8035f72:	370c      	adds	r7, #12
 8035f74:	46bd      	mov	sp, r7
 8035f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035f7a:	4770      	bx	lr

08035f7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8035f7c:	b480      	push	{r7}
 8035f7e:	b085      	sub	sp, #20
 8035f80:	af00      	add	r7, sp, #0
 8035f82:	6078      	str	r0, [r7, #4]
 8035f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8035f86:	687b      	ldr	r3, [r7, #4]
 8035f88:	681b      	ldr	r3, [r3, #0]
 8035f8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8035f8c:	687b      	ldr	r3, [r7, #4]
 8035f8e:	4a40      	ldr	r2, [pc, #256]	; (8036090 <TIM_Base_SetConfig+0x114>)
 8035f90:	4293      	cmp	r3, r2
 8035f92:	d013      	beq.n	8035fbc <TIM_Base_SetConfig+0x40>
 8035f94:	687b      	ldr	r3, [r7, #4]
 8035f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8035f9a:	d00f      	beq.n	8035fbc <TIM_Base_SetConfig+0x40>
 8035f9c:	687b      	ldr	r3, [r7, #4]
 8035f9e:	4a3d      	ldr	r2, [pc, #244]	; (8036094 <TIM_Base_SetConfig+0x118>)
 8035fa0:	4293      	cmp	r3, r2
 8035fa2:	d00b      	beq.n	8035fbc <TIM_Base_SetConfig+0x40>
 8035fa4:	687b      	ldr	r3, [r7, #4]
 8035fa6:	4a3c      	ldr	r2, [pc, #240]	; (8036098 <TIM_Base_SetConfig+0x11c>)
 8035fa8:	4293      	cmp	r3, r2
 8035faa:	d007      	beq.n	8035fbc <TIM_Base_SetConfig+0x40>
 8035fac:	687b      	ldr	r3, [r7, #4]
 8035fae:	4a3b      	ldr	r2, [pc, #236]	; (803609c <TIM_Base_SetConfig+0x120>)
 8035fb0:	4293      	cmp	r3, r2
 8035fb2:	d003      	beq.n	8035fbc <TIM_Base_SetConfig+0x40>
 8035fb4:	687b      	ldr	r3, [r7, #4]
 8035fb6:	4a3a      	ldr	r2, [pc, #232]	; (80360a0 <TIM_Base_SetConfig+0x124>)
 8035fb8:	4293      	cmp	r3, r2
 8035fba:	d108      	bne.n	8035fce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8035fbc:	68fb      	ldr	r3, [r7, #12]
 8035fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8035fc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8035fc4:	683b      	ldr	r3, [r7, #0]
 8035fc6:	685b      	ldr	r3, [r3, #4]
 8035fc8:	68fa      	ldr	r2, [r7, #12]
 8035fca:	4313      	orrs	r3, r2
 8035fcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8035fce:	687b      	ldr	r3, [r7, #4]
 8035fd0:	4a2f      	ldr	r2, [pc, #188]	; (8036090 <TIM_Base_SetConfig+0x114>)
 8035fd2:	4293      	cmp	r3, r2
 8035fd4:	d02b      	beq.n	803602e <TIM_Base_SetConfig+0xb2>
 8035fd6:	687b      	ldr	r3, [r7, #4]
 8035fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8035fdc:	d027      	beq.n	803602e <TIM_Base_SetConfig+0xb2>
 8035fde:	687b      	ldr	r3, [r7, #4]
 8035fe0:	4a2c      	ldr	r2, [pc, #176]	; (8036094 <TIM_Base_SetConfig+0x118>)
 8035fe2:	4293      	cmp	r3, r2
 8035fe4:	d023      	beq.n	803602e <TIM_Base_SetConfig+0xb2>
 8035fe6:	687b      	ldr	r3, [r7, #4]
 8035fe8:	4a2b      	ldr	r2, [pc, #172]	; (8036098 <TIM_Base_SetConfig+0x11c>)
 8035fea:	4293      	cmp	r3, r2
 8035fec:	d01f      	beq.n	803602e <TIM_Base_SetConfig+0xb2>
 8035fee:	687b      	ldr	r3, [r7, #4]
 8035ff0:	4a2a      	ldr	r2, [pc, #168]	; (803609c <TIM_Base_SetConfig+0x120>)
 8035ff2:	4293      	cmp	r3, r2
 8035ff4:	d01b      	beq.n	803602e <TIM_Base_SetConfig+0xb2>
 8035ff6:	687b      	ldr	r3, [r7, #4]
 8035ff8:	4a29      	ldr	r2, [pc, #164]	; (80360a0 <TIM_Base_SetConfig+0x124>)
 8035ffa:	4293      	cmp	r3, r2
 8035ffc:	d017      	beq.n	803602e <TIM_Base_SetConfig+0xb2>
 8035ffe:	687b      	ldr	r3, [r7, #4]
 8036000:	4a28      	ldr	r2, [pc, #160]	; (80360a4 <TIM_Base_SetConfig+0x128>)
 8036002:	4293      	cmp	r3, r2
 8036004:	d013      	beq.n	803602e <TIM_Base_SetConfig+0xb2>
 8036006:	687b      	ldr	r3, [r7, #4]
 8036008:	4a27      	ldr	r2, [pc, #156]	; (80360a8 <TIM_Base_SetConfig+0x12c>)
 803600a:	4293      	cmp	r3, r2
 803600c:	d00f      	beq.n	803602e <TIM_Base_SetConfig+0xb2>
 803600e:	687b      	ldr	r3, [r7, #4]
 8036010:	4a26      	ldr	r2, [pc, #152]	; (80360ac <TIM_Base_SetConfig+0x130>)
 8036012:	4293      	cmp	r3, r2
 8036014:	d00b      	beq.n	803602e <TIM_Base_SetConfig+0xb2>
 8036016:	687b      	ldr	r3, [r7, #4]
 8036018:	4a25      	ldr	r2, [pc, #148]	; (80360b0 <TIM_Base_SetConfig+0x134>)
 803601a:	4293      	cmp	r3, r2
 803601c:	d007      	beq.n	803602e <TIM_Base_SetConfig+0xb2>
 803601e:	687b      	ldr	r3, [r7, #4]
 8036020:	4a24      	ldr	r2, [pc, #144]	; (80360b4 <TIM_Base_SetConfig+0x138>)
 8036022:	4293      	cmp	r3, r2
 8036024:	d003      	beq.n	803602e <TIM_Base_SetConfig+0xb2>
 8036026:	687b      	ldr	r3, [r7, #4]
 8036028:	4a23      	ldr	r2, [pc, #140]	; (80360b8 <TIM_Base_SetConfig+0x13c>)
 803602a:	4293      	cmp	r3, r2
 803602c:	d108      	bne.n	8036040 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 803602e:	68fb      	ldr	r3, [r7, #12]
 8036030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8036034:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8036036:	683b      	ldr	r3, [r7, #0]
 8036038:	68db      	ldr	r3, [r3, #12]
 803603a:	68fa      	ldr	r2, [r7, #12]
 803603c:	4313      	orrs	r3, r2
 803603e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8036040:	68fb      	ldr	r3, [r7, #12]
 8036042:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8036046:	683b      	ldr	r3, [r7, #0]
 8036048:	695b      	ldr	r3, [r3, #20]
 803604a:	4313      	orrs	r3, r2
 803604c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 803604e:	687b      	ldr	r3, [r7, #4]
 8036050:	68fa      	ldr	r2, [r7, #12]
 8036052:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8036054:	683b      	ldr	r3, [r7, #0]
 8036056:	689a      	ldr	r2, [r3, #8]
 8036058:	687b      	ldr	r3, [r7, #4]
 803605a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 803605c:	683b      	ldr	r3, [r7, #0]
 803605e:	681a      	ldr	r2, [r3, #0]
 8036060:	687b      	ldr	r3, [r7, #4]
 8036062:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8036064:	687b      	ldr	r3, [r7, #4]
 8036066:	4a0a      	ldr	r2, [pc, #40]	; (8036090 <TIM_Base_SetConfig+0x114>)
 8036068:	4293      	cmp	r3, r2
 803606a:	d003      	beq.n	8036074 <TIM_Base_SetConfig+0xf8>
 803606c:	687b      	ldr	r3, [r7, #4]
 803606e:	4a0c      	ldr	r2, [pc, #48]	; (80360a0 <TIM_Base_SetConfig+0x124>)
 8036070:	4293      	cmp	r3, r2
 8036072:	d103      	bne.n	803607c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8036074:	683b      	ldr	r3, [r7, #0]
 8036076:	691a      	ldr	r2, [r3, #16]
 8036078:	687b      	ldr	r3, [r7, #4]
 803607a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 803607c:	687b      	ldr	r3, [r7, #4]
 803607e:	2201      	movs	r2, #1
 8036080:	615a      	str	r2, [r3, #20]
}
 8036082:	bf00      	nop
 8036084:	3714      	adds	r7, #20
 8036086:	46bd      	mov	sp, r7
 8036088:	f85d 7b04 	ldr.w	r7, [sp], #4
 803608c:	4770      	bx	lr
 803608e:	bf00      	nop
 8036090:	40010000 	.word	0x40010000
 8036094:	40000400 	.word	0x40000400
 8036098:	40000800 	.word	0x40000800
 803609c:	40000c00 	.word	0x40000c00
 80360a0:	40010400 	.word	0x40010400
 80360a4:	40014000 	.word	0x40014000
 80360a8:	40014400 	.word	0x40014400
 80360ac:	40014800 	.word	0x40014800
 80360b0:	40001800 	.word	0x40001800
 80360b4:	40001c00 	.word	0x40001c00
 80360b8:	40002000 	.word	0x40002000

080360bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80360bc:	b480      	push	{r7}
 80360be:	b087      	sub	sp, #28
 80360c0:	af00      	add	r7, sp, #0
 80360c2:	6078      	str	r0, [r7, #4]
 80360c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80360c6:	687b      	ldr	r3, [r7, #4]
 80360c8:	6a1b      	ldr	r3, [r3, #32]
 80360ca:	f023 0201 	bic.w	r2, r3, #1
 80360ce:	687b      	ldr	r3, [r7, #4]
 80360d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80360d2:	687b      	ldr	r3, [r7, #4]
 80360d4:	6a1b      	ldr	r3, [r3, #32]
 80360d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80360d8:	687b      	ldr	r3, [r7, #4]
 80360da:	685b      	ldr	r3, [r3, #4]
 80360dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80360de:	687b      	ldr	r3, [r7, #4]
 80360e0:	699b      	ldr	r3, [r3, #24]
 80360e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80360e4:	68fb      	ldr	r3, [r7, #12]
 80360e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80360ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80360ec:	68fb      	ldr	r3, [r7, #12]
 80360ee:	f023 0303 	bic.w	r3, r3, #3
 80360f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80360f4:	683b      	ldr	r3, [r7, #0]
 80360f6:	681b      	ldr	r3, [r3, #0]
 80360f8:	68fa      	ldr	r2, [r7, #12]
 80360fa:	4313      	orrs	r3, r2
 80360fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80360fe:	697b      	ldr	r3, [r7, #20]
 8036100:	f023 0302 	bic.w	r3, r3, #2
 8036104:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8036106:	683b      	ldr	r3, [r7, #0]
 8036108:	689b      	ldr	r3, [r3, #8]
 803610a:	697a      	ldr	r2, [r7, #20]
 803610c:	4313      	orrs	r3, r2
 803610e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8036110:	687b      	ldr	r3, [r7, #4]
 8036112:	4a20      	ldr	r2, [pc, #128]	; (8036194 <TIM_OC1_SetConfig+0xd8>)
 8036114:	4293      	cmp	r3, r2
 8036116:	d003      	beq.n	8036120 <TIM_OC1_SetConfig+0x64>
 8036118:	687b      	ldr	r3, [r7, #4]
 803611a:	4a1f      	ldr	r2, [pc, #124]	; (8036198 <TIM_OC1_SetConfig+0xdc>)
 803611c:	4293      	cmp	r3, r2
 803611e:	d10c      	bne.n	803613a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8036120:	697b      	ldr	r3, [r7, #20]
 8036122:	f023 0308 	bic.w	r3, r3, #8
 8036126:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8036128:	683b      	ldr	r3, [r7, #0]
 803612a:	68db      	ldr	r3, [r3, #12]
 803612c:	697a      	ldr	r2, [r7, #20]
 803612e:	4313      	orrs	r3, r2
 8036130:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8036132:	697b      	ldr	r3, [r7, #20]
 8036134:	f023 0304 	bic.w	r3, r3, #4
 8036138:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 803613a:	687b      	ldr	r3, [r7, #4]
 803613c:	4a15      	ldr	r2, [pc, #84]	; (8036194 <TIM_OC1_SetConfig+0xd8>)
 803613e:	4293      	cmp	r3, r2
 8036140:	d003      	beq.n	803614a <TIM_OC1_SetConfig+0x8e>
 8036142:	687b      	ldr	r3, [r7, #4]
 8036144:	4a14      	ldr	r2, [pc, #80]	; (8036198 <TIM_OC1_SetConfig+0xdc>)
 8036146:	4293      	cmp	r3, r2
 8036148:	d111      	bne.n	803616e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 803614a:	693b      	ldr	r3, [r7, #16]
 803614c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8036150:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8036152:	693b      	ldr	r3, [r7, #16]
 8036154:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8036158:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 803615a:	683b      	ldr	r3, [r7, #0]
 803615c:	695b      	ldr	r3, [r3, #20]
 803615e:	693a      	ldr	r2, [r7, #16]
 8036160:	4313      	orrs	r3, r2
 8036162:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8036164:	683b      	ldr	r3, [r7, #0]
 8036166:	699b      	ldr	r3, [r3, #24]
 8036168:	693a      	ldr	r2, [r7, #16]
 803616a:	4313      	orrs	r3, r2
 803616c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 803616e:	687b      	ldr	r3, [r7, #4]
 8036170:	693a      	ldr	r2, [r7, #16]
 8036172:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8036174:	687b      	ldr	r3, [r7, #4]
 8036176:	68fa      	ldr	r2, [r7, #12]
 8036178:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 803617a:	683b      	ldr	r3, [r7, #0]
 803617c:	685a      	ldr	r2, [r3, #4]
 803617e:	687b      	ldr	r3, [r7, #4]
 8036180:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8036182:	687b      	ldr	r3, [r7, #4]
 8036184:	697a      	ldr	r2, [r7, #20]
 8036186:	621a      	str	r2, [r3, #32]
}
 8036188:	bf00      	nop
 803618a:	371c      	adds	r7, #28
 803618c:	46bd      	mov	sp, r7
 803618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036192:	4770      	bx	lr
 8036194:	40010000 	.word	0x40010000
 8036198:	40010400 	.word	0x40010400

0803619c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 803619c:	b480      	push	{r7}
 803619e:	b087      	sub	sp, #28
 80361a0:	af00      	add	r7, sp, #0
 80361a2:	6078      	str	r0, [r7, #4]
 80361a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80361a6:	687b      	ldr	r3, [r7, #4]
 80361a8:	6a1b      	ldr	r3, [r3, #32]
 80361aa:	f023 0210 	bic.w	r2, r3, #16
 80361ae:	687b      	ldr	r3, [r7, #4]
 80361b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80361b2:	687b      	ldr	r3, [r7, #4]
 80361b4:	6a1b      	ldr	r3, [r3, #32]
 80361b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80361b8:	687b      	ldr	r3, [r7, #4]
 80361ba:	685b      	ldr	r3, [r3, #4]
 80361bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80361be:	687b      	ldr	r3, [r7, #4]
 80361c0:	699b      	ldr	r3, [r3, #24]
 80361c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80361c4:	68fb      	ldr	r3, [r7, #12]
 80361c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80361ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80361cc:	68fb      	ldr	r3, [r7, #12]
 80361ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80361d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80361d4:	683b      	ldr	r3, [r7, #0]
 80361d6:	681b      	ldr	r3, [r3, #0]
 80361d8:	021b      	lsls	r3, r3, #8
 80361da:	68fa      	ldr	r2, [r7, #12]
 80361dc:	4313      	orrs	r3, r2
 80361de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80361e0:	697b      	ldr	r3, [r7, #20]
 80361e2:	f023 0320 	bic.w	r3, r3, #32
 80361e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80361e8:	683b      	ldr	r3, [r7, #0]
 80361ea:	689b      	ldr	r3, [r3, #8]
 80361ec:	011b      	lsls	r3, r3, #4
 80361ee:	697a      	ldr	r2, [r7, #20]
 80361f0:	4313      	orrs	r3, r2
 80361f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80361f4:	687b      	ldr	r3, [r7, #4]
 80361f6:	4a22      	ldr	r2, [pc, #136]	; (8036280 <TIM_OC2_SetConfig+0xe4>)
 80361f8:	4293      	cmp	r3, r2
 80361fa:	d003      	beq.n	8036204 <TIM_OC2_SetConfig+0x68>
 80361fc:	687b      	ldr	r3, [r7, #4]
 80361fe:	4a21      	ldr	r2, [pc, #132]	; (8036284 <TIM_OC2_SetConfig+0xe8>)
 8036200:	4293      	cmp	r3, r2
 8036202:	d10d      	bne.n	8036220 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8036204:	697b      	ldr	r3, [r7, #20]
 8036206:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 803620a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 803620c:	683b      	ldr	r3, [r7, #0]
 803620e:	68db      	ldr	r3, [r3, #12]
 8036210:	011b      	lsls	r3, r3, #4
 8036212:	697a      	ldr	r2, [r7, #20]
 8036214:	4313      	orrs	r3, r2
 8036216:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8036218:	697b      	ldr	r3, [r7, #20]
 803621a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 803621e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8036220:	687b      	ldr	r3, [r7, #4]
 8036222:	4a17      	ldr	r2, [pc, #92]	; (8036280 <TIM_OC2_SetConfig+0xe4>)
 8036224:	4293      	cmp	r3, r2
 8036226:	d003      	beq.n	8036230 <TIM_OC2_SetConfig+0x94>
 8036228:	687b      	ldr	r3, [r7, #4]
 803622a:	4a16      	ldr	r2, [pc, #88]	; (8036284 <TIM_OC2_SetConfig+0xe8>)
 803622c:	4293      	cmp	r3, r2
 803622e:	d113      	bne.n	8036258 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8036230:	693b      	ldr	r3, [r7, #16]
 8036232:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8036236:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8036238:	693b      	ldr	r3, [r7, #16]
 803623a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 803623e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8036240:	683b      	ldr	r3, [r7, #0]
 8036242:	695b      	ldr	r3, [r3, #20]
 8036244:	009b      	lsls	r3, r3, #2
 8036246:	693a      	ldr	r2, [r7, #16]
 8036248:	4313      	orrs	r3, r2
 803624a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 803624c:	683b      	ldr	r3, [r7, #0]
 803624e:	699b      	ldr	r3, [r3, #24]
 8036250:	009b      	lsls	r3, r3, #2
 8036252:	693a      	ldr	r2, [r7, #16]
 8036254:	4313      	orrs	r3, r2
 8036256:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8036258:	687b      	ldr	r3, [r7, #4]
 803625a:	693a      	ldr	r2, [r7, #16]
 803625c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 803625e:	687b      	ldr	r3, [r7, #4]
 8036260:	68fa      	ldr	r2, [r7, #12]
 8036262:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8036264:	683b      	ldr	r3, [r7, #0]
 8036266:	685a      	ldr	r2, [r3, #4]
 8036268:	687b      	ldr	r3, [r7, #4]
 803626a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 803626c:	687b      	ldr	r3, [r7, #4]
 803626e:	697a      	ldr	r2, [r7, #20]
 8036270:	621a      	str	r2, [r3, #32]
}
 8036272:	bf00      	nop
 8036274:	371c      	adds	r7, #28
 8036276:	46bd      	mov	sp, r7
 8036278:	f85d 7b04 	ldr.w	r7, [sp], #4
 803627c:	4770      	bx	lr
 803627e:	bf00      	nop
 8036280:	40010000 	.word	0x40010000
 8036284:	40010400 	.word	0x40010400

08036288 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8036288:	b480      	push	{r7}
 803628a:	b087      	sub	sp, #28
 803628c:	af00      	add	r7, sp, #0
 803628e:	6078      	str	r0, [r7, #4]
 8036290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8036292:	687b      	ldr	r3, [r7, #4]
 8036294:	6a1b      	ldr	r3, [r3, #32]
 8036296:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 803629a:	687b      	ldr	r3, [r7, #4]
 803629c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 803629e:	687b      	ldr	r3, [r7, #4]
 80362a0:	6a1b      	ldr	r3, [r3, #32]
 80362a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80362a4:	687b      	ldr	r3, [r7, #4]
 80362a6:	685b      	ldr	r3, [r3, #4]
 80362a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80362aa:	687b      	ldr	r3, [r7, #4]
 80362ac:	69db      	ldr	r3, [r3, #28]
 80362ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80362b0:	68fb      	ldr	r3, [r7, #12]
 80362b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80362b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80362b8:	68fb      	ldr	r3, [r7, #12]
 80362ba:	f023 0303 	bic.w	r3, r3, #3
 80362be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80362c0:	683b      	ldr	r3, [r7, #0]
 80362c2:	681b      	ldr	r3, [r3, #0]
 80362c4:	68fa      	ldr	r2, [r7, #12]
 80362c6:	4313      	orrs	r3, r2
 80362c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80362ca:	697b      	ldr	r3, [r7, #20]
 80362cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80362d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80362d2:	683b      	ldr	r3, [r7, #0]
 80362d4:	689b      	ldr	r3, [r3, #8]
 80362d6:	021b      	lsls	r3, r3, #8
 80362d8:	697a      	ldr	r2, [r7, #20]
 80362da:	4313      	orrs	r3, r2
 80362dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80362de:	687b      	ldr	r3, [r7, #4]
 80362e0:	4a21      	ldr	r2, [pc, #132]	; (8036368 <TIM_OC3_SetConfig+0xe0>)
 80362e2:	4293      	cmp	r3, r2
 80362e4:	d003      	beq.n	80362ee <TIM_OC3_SetConfig+0x66>
 80362e6:	687b      	ldr	r3, [r7, #4]
 80362e8:	4a20      	ldr	r2, [pc, #128]	; (803636c <TIM_OC3_SetConfig+0xe4>)
 80362ea:	4293      	cmp	r3, r2
 80362ec:	d10d      	bne.n	803630a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80362ee:	697b      	ldr	r3, [r7, #20]
 80362f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80362f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80362f6:	683b      	ldr	r3, [r7, #0]
 80362f8:	68db      	ldr	r3, [r3, #12]
 80362fa:	021b      	lsls	r3, r3, #8
 80362fc:	697a      	ldr	r2, [r7, #20]
 80362fe:	4313      	orrs	r3, r2
 8036300:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8036302:	697b      	ldr	r3, [r7, #20]
 8036304:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8036308:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 803630a:	687b      	ldr	r3, [r7, #4]
 803630c:	4a16      	ldr	r2, [pc, #88]	; (8036368 <TIM_OC3_SetConfig+0xe0>)
 803630e:	4293      	cmp	r3, r2
 8036310:	d003      	beq.n	803631a <TIM_OC3_SetConfig+0x92>
 8036312:	687b      	ldr	r3, [r7, #4]
 8036314:	4a15      	ldr	r2, [pc, #84]	; (803636c <TIM_OC3_SetConfig+0xe4>)
 8036316:	4293      	cmp	r3, r2
 8036318:	d113      	bne.n	8036342 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 803631a:	693b      	ldr	r3, [r7, #16]
 803631c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8036320:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8036322:	693b      	ldr	r3, [r7, #16]
 8036324:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8036328:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 803632a:	683b      	ldr	r3, [r7, #0]
 803632c:	695b      	ldr	r3, [r3, #20]
 803632e:	011b      	lsls	r3, r3, #4
 8036330:	693a      	ldr	r2, [r7, #16]
 8036332:	4313      	orrs	r3, r2
 8036334:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8036336:	683b      	ldr	r3, [r7, #0]
 8036338:	699b      	ldr	r3, [r3, #24]
 803633a:	011b      	lsls	r3, r3, #4
 803633c:	693a      	ldr	r2, [r7, #16]
 803633e:	4313      	orrs	r3, r2
 8036340:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8036342:	687b      	ldr	r3, [r7, #4]
 8036344:	693a      	ldr	r2, [r7, #16]
 8036346:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8036348:	687b      	ldr	r3, [r7, #4]
 803634a:	68fa      	ldr	r2, [r7, #12]
 803634c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 803634e:	683b      	ldr	r3, [r7, #0]
 8036350:	685a      	ldr	r2, [r3, #4]
 8036352:	687b      	ldr	r3, [r7, #4]
 8036354:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8036356:	687b      	ldr	r3, [r7, #4]
 8036358:	697a      	ldr	r2, [r7, #20]
 803635a:	621a      	str	r2, [r3, #32]
}
 803635c:	bf00      	nop
 803635e:	371c      	adds	r7, #28
 8036360:	46bd      	mov	sp, r7
 8036362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036366:	4770      	bx	lr
 8036368:	40010000 	.word	0x40010000
 803636c:	40010400 	.word	0x40010400

08036370 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8036370:	b480      	push	{r7}
 8036372:	b087      	sub	sp, #28
 8036374:	af00      	add	r7, sp, #0
 8036376:	6078      	str	r0, [r7, #4]
 8036378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 803637a:	687b      	ldr	r3, [r7, #4]
 803637c:	6a1b      	ldr	r3, [r3, #32]
 803637e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8036382:	687b      	ldr	r3, [r7, #4]
 8036384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8036386:	687b      	ldr	r3, [r7, #4]
 8036388:	6a1b      	ldr	r3, [r3, #32]
 803638a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 803638c:	687b      	ldr	r3, [r7, #4]
 803638e:	685b      	ldr	r3, [r3, #4]
 8036390:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8036392:	687b      	ldr	r3, [r7, #4]
 8036394:	69db      	ldr	r3, [r3, #28]
 8036396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8036398:	68fb      	ldr	r3, [r7, #12]
 803639a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 803639e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80363a0:	68fb      	ldr	r3, [r7, #12]
 80363a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80363a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80363a8:	683b      	ldr	r3, [r7, #0]
 80363aa:	681b      	ldr	r3, [r3, #0]
 80363ac:	021b      	lsls	r3, r3, #8
 80363ae:	68fa      	ldr	r2, [r7, #12]
 80363b0:	4313      	orrs	r3, r2
 80363b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80363b4:	693b      	ldr	r3, [r7, #16]
 80363b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80363ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80363bc:	683b      	ldr	r3, [r7, #0]
 80363be:	689b      	ldr	r3, [r3, #8]
 80363c0:	031b      	lsls	r3, r3, #12
 80363c2:	693a      	ldr	r2, [r7, #16]
 80363c4:	4313      	orrs	r3, r2
 80363c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80363c8:	687b      	ldr	r3, [r7, #4]
 80363ca:	4a12      	ldr	r2, [pc, #72]	; (8036414 <TIM_OC4_SetConfig+0xa4>)
 80363cc:	4293      	cmp	r3, r2
 80363ce:	d003      	beq.n	80363d8 <TIM_OC4_SetConfig+0x68>
 80363d0:	687b      	ldr	r3, [r7, #4]
 80363d2:	4a11      	ldr	r2, [pc, #68]	; (8036418 <TIM_OC4_SetConfig+0xa8>)
 80363d4:	4293      	cmp	r3, r2
 80363d6:	d109      	bne.n	80363ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80363d8:	697b      	ldr	r3, [r7, #20]
 80363da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80363de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80363e0:	683b      	ldr	r3, [r7, #0]
 80363e2:	695b      	ldr	r3, [r3, #20]
 80363e4:	019b      	lsls	r3, r3, #6
 80363e6:	697a      	ldr	r2, [r7, #20]
 80363e8:	4313      	orrs	r3, r2
 80363ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80363ec:	687b      	ldr	r3, [r7, #4]
 80363ee:	697a      	ldr	r2, [r7, #20]
 80363f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80363f2:	687b      	ldr	r3, [r7, #4]
 80363f4:	68fa      	ldr	r2, [r7, #12]
 80363f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80363f8:	683b      	ldr	r3, [r7, #0]
 80363fa:	685a      	ldr	r2, [r3, #4]
 80363fc:	687b      	ldr	r3, [r7, #4]
 80363fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8036400:	687b      	ldr	r3, [r7, #4]
 8036402:	693a      	ldr	r2, [r7, #16]
 8036404:	621a      	str	r2, [r3, #32]
}
 8036406:	bf00      	nop
 8036408:	371c      	adds	r7, #28
 803640a:	46bd      	mov	sp, r7
 803640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036410:	4770      	bx	lr
 8036412:	bf00      	nop
 8036414:	40010000 	.word	0x40010000
 8036418:	40010400 	.word	0x40010400

0803641c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 803641c:	b480      	push	{r7}
 803641e:	b083      	sub	sp, #12
 8036420:	af00      	add	r7, sp, #0
 8036422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8036424:	bf00      	nop
 8036426:	370c      	adds	r7, #12
 8036428:	46bd      	mov	sp, r7
 803642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803642e:	4770      	bx	lr

08036430 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8036430:	b480      	push	{r7}
 8036432:	b083      	sub	sp, #12
 8036434:	af00      	add	r7, sp, #0
 8036436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8036438:	bf00      	nop
 803643a:	370c      	adds	r7, #12
 803643c:	46bd      	mov	sp, r7
 803643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036442:	4770      	bx	lr

08036444 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8036444:	b580      	push	{r7, lr}
 8036446:	b082      	sub	sp, #8
 8036448:	af00      	add	r7, sp, #0
 803644a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 803644c:	687b      	ldr	r3, [r7, #4]
 803644e:	2b00      	cmp	r3, #0
 8036450:	d101      	bne.n	8036456 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8036452:	2301      	movs	r3, #1
 8036454:	e03f      	b.n	80364d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8036456:	687b      	ldr	r3, [r7, #4]
 8036458:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 803645c:	b2db      	uxtb	r3, r3
 803645e:	2b00      	cmp	r3, #0
 8036460:	d106      	bne.n	8036470 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8036462:	687b      	ldr	r3, [r7, #4]
 8036464:	2200      	movs	r2, #0
 8036466:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 803646a:	6878      	ldr	r0, [r7, #4]
 803646c:	f7f5 fc14 	bl	802bc98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8036470:	687b      	ldr	r3, [r7, #4]
 8036472:	2224      	movs	r2, #36	; 0x24
 8036474:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8036478:	687b      	ldr	r3, [r7, #4]
 803647a:	681b      	ldr	r3, [r3, #0]
 803647c:	68da      	ldr	r2, [r3, #12]
 803647e:	687b      	ldr	r3, [r7, #4]
 8036480:	681b      	ldr	r3, [r3, #0]
 8036482:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8036486:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8036488:	6878      	ldr	r0, [r7, #4]
 803648a:	f000 fc77 	bl	8036d7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 803648e:	687b      	ldr	r3, [r7, #4]
 8036490:	681b      	ldr	r3, [r3, #0]
 8036492:	691a      	ldr	r2, [r3, #16]
 8036494:	687b      	ldr	r3, [r7, #4]
 8036496:	681b      	ldr	r3, [r3, #0]
 8036498:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 803649c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 803649e:	687b      	ldr	r3, [r7, #4]
 80364a0:	681b      	ldr	r3, [r3, #0]
 80364a2:	695a      	ldr	r2, [r3, #20]
 80364a4:	687b      	ldr	r3, [r7, #4]
 80364a6:	681b      	ldr	r3, [r3, #0]
 80364a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80364ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80364ae:	687b      	ldr	r3, [r7, #4]
 80364b0:	681b      	ldr	r3, [r3, #0]
 80364b2:	68da      	ldr	r2, [r3, #12]
 80364b4:	687b      	ldr	r3, [r7, #4]
 80364b6:	681b      	ldr	r3, [r3, #0]
 80364b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80364bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80364be:	687b      	ldr	r3, [r7, #4]
 80364c0:	2200      	movs	r2, #0
 80364c2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80364c4:	687b      	ldr	r3, [r7, #4]
 80364c6:	2220      	movs	r2, #32
 80364c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80364cc:	687b      	ldr	r3, [r7, #4]
 80364ce:	2220      	movs	r2, #32
 80364d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80364d4:	2300      	movs	r3, #0
}
 80364d6:	4618      	mov	r0, r3
 80364d8:	3708      	adds	r7, #8
 80364da:	46bd      	mov	sp, r7
 80364dc:	bd80      	pop	{r7, pc}

080364de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80364de:	b580      	push	{r7, lr}
 80364e0:	b088      	sub	sp, #32
 80364e2:	af02      	add	r7, sp, #8
 80364e4:	60f8      	str	r0, [r7, #12]
 80364e6:	60b9      	str	r1, [r7, #8]
 80364e8:	603b      	str	r3, [r7, #0]
 80364ea:	4613      	mov	r3, r2
 80364ec:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80364ee:	2300      	movs	r3, #0
 80364f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80364f2:	68fb      	ldr	r3, [r7, #12]
 80364f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80364f8:	b2db      	uxtb	r3, r3
 80364fa:	2b20      	cmp	r3, #32
 80364fc:	f040 8083 	bne.w	8036606 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8036500:	68bb      	ldr	r3, [r7, #8]
 8036502:	2b00      	cmp	r3, #0
 8036504:	d002      	beq.n	803650c <HAL_UART_Transmit+0x2e>
 8036506:	88fb      	ldrh	r3, [r7, #6]
 8036508:	2b00      	cmp	r3, #0
 803650a:	d101      	bne.n	8036510 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 803650c:	2301      	movs	r3, #1
 803650e:	e07b      	b.n	8036608 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8036510:	68fb      	ldr	r3, [r7, #12]
 8036512:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8036516:	2b01      	cmp	r3, #1
 8036518:	d101      	bne.n	803651e <HAL_UART_Transmit+0x40>
 803651a:	2302      	movs	r3, #2
 803651c:	e074      	b.n	8036608 <HAL_UART_Transmit+0x12a>
 803651e:	68fb      	ldr	r3, [r7, #12]
 8036520:	2201      	movs	r2, #1
 8036522:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8036526:	68fb      	ldr	r3, [r7, #12]
 8036528:	2200      	movs	r2, #0
 803652a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 803652c:	68fb      	ldr	r3, [r7, #12]
 803652e:	2221      	movs	r2, #33	; 0x21
 8036530:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8036534:	f7f5 ff1a 	bl	802c36c <HAL_GetTick>
 8036538:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 803653a:	68fb      	ldr	r3, [r7, #12]
 803653c:	88fa      	ldrh	r2, [r7, #6]
 803653e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8036540:	68fb      	ldr	r3, [r7, #12]
 8036542:	88fa      	ldrh	r2, [r7, #6]
 8036544:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8036546:	68fb      	ldr	r3, [r7, #12]
 8036548:	2200      	movs	r2, #0
 803654a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 803654e:	e042      	b.n	80365d6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8036550:	68fb      	ldr	r3, [r7, #12]
 8036552:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8036554:	b29b      	uxth	r3, r3
 8036556:	3b01      	subs	r3, #1
 8036558:	b29a      	uxth	r2, r3
 803655a:	68fb      	ldr	r3, [r7, #12]
 803655c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 803655e:	68fb      	ldr	r3, [r7, #12]
 8036560:	689b      	ldr	r3, [r3, #8]
 8036562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8036566:	d122      	bne.n	80365ae <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8036568:	683b      	ldr	r3, [r7, #0]
 803656a:	9300      	str	r3, [sp, #0]
 803656c:	697b      	ldr	r3, [r7, #20]
 803656e:	2200      	movs	r2, #0
 8036570:	2180      	movs	r1, #128	; 0x80
 8036572:	68f8      	ldr	r0, [r7, #12]
 8036574:	f000 fa80 	bl	8036a78 <UART_WaitOnFlagUntilTimeout>
 8036578:	4603      	mov	r3, r0
 803657a:	2b00      	cmp	r3, #0
 803657c:	d001      	beq.n	8036582 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 803657e:	2303      	movs	r3, #3
 8036580:	e042      	b.n	8036608 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8036582:	68bb      	ldr	r3, [r7, #8]
 8036584:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8036586:	693b      	ldr	r3, [r7, #16]
 8036588:	881b      	ldrh	r3, [r3, #0]
 803658a:	461a      	mov	r2, r3
 803658c:	68fb      	ldr	r3, [r7, #12]
 803658e:	681b      	ldr	r3, [r3, #0]
 8036590:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8036594:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8036596:	68fb      	ldr	r3, [r7, #12]
 8036598:	691b      	ldr	r3, [r3, #16]
 803659a:	2b00      	cmp	r3, #0
 803659c:	d103      	bne.n	80365a6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 803659e:	68bb      	ldr	r3, [r7, #8]
 80365a0:	3302      	adds	r3, #2
 80365a2:	60bb      	str	r3, [r7, #8]
 80365a4:	e017      	b.n	80365d6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80365a6:	68bb      	ldr	r3, [r7, #8]
 80365a8:	3301      	adds	r3, #1
 80365aa:	60bb      	str	r3, [r7, #8]
 80365ac:	e013      	b.n	80365d6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80365ae:	683b      	ldr	r3, [r7, #0]
 80365b0:	9300      	str	r3, [sp, #0]
 80365b2:	697b      	ldr	r3, [r7, #20]
 80365b4:	2200      	movs	r2, #0
 80365b6:	2180      	movs	r1, #128	; 0x80
 80365b8:	68f8      	ldr	r0, [r7, #12]
 80365ba:	f000 fa5d 	bl	8036a78 <UART_WaitOnFlagUntilTimeout>
 80365be:	4603      	mov	r3, r0
 80365c0:	2b00      	cmp	r3, #0
 80365c2:	d001      	beq.n	80365c8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80365c4:	2303      	movs	r3, #3
 80365c6:	e01f      	b.n	8036608 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80365c8:	68bb      	ldr	r3, [r7, #8]
 80365ca:	1c5a      	adds	r2, r3, #1
 80365cc:	60ba      	str	r2, [r7, #8]
 80365ce:	781a      	ldrb	r2, [r3, #0]
 80365d0:	68fb      	ldr	r3, [r7, #12]
 80365d2:	681b      	ldr	r3, [r3, #0]
 80365d4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80365d6:	68fb      	ldr	r3, [r7, #12]
 80365d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80365da:	b29b      	uxth	r3, r3
 80365dc:	2b00      	cmp	r3, #0
 80365de:	d1b7      	bne.n	8036550 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80365e0:	683b      	ldr	r3, [r7, #0]
 80365e2:	9300      	str	r3, [sp, #0]
 80365e4:	697b      	ldr	r3, [r7, #20]
 80365e6:	2200      	movs	r2, #0
 80365e8:	2140      	movs	r1, #64	; 0x40
 80365ea:	68f8      	ldr	r0, [r7, #12]
 80365ec:	f000 fa44 	bl	8036a78 <UART_WaitOnFlagUntilTimeout>
 80365f0:	4603      	mov	r3, r0
 80365f2:	2b00      	cmp	r3, #0
 80365f4:	d001      	beq.n	80365fa <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80365f6:	2303      	movs	r3, #3
 80365f8:	e006      	b.n	8036608 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80365fa:	68fb      	ldr	r3, [r7, #12]
 80365fc:	2220      	movs	r2, #32
 80365fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8036602:	2300      	movs	r3, #0
 8036604:	e000      	b.n	8036608 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8036606:	2302      	movs	r3, #2
  }
}
 8036608:	4618      	mov	r0, r3
 803660a:	3718      	adds	r7, #24
 803660c:	46bd      	mov	sp, r7
 803660e:	bd80      	pop	{r7, pc}

08036610 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8036610:	b580      	push	{r7, lr}
 8036612:	b086      	sub	sp, #24
 8036614:	af00      	add	r7, sp, #0
 8036616:	60f8      	str	r0, [r7, #12]
 8036618:	60b9      	str	r1, [r7, #8]
 803661a:	4613      	mov	r3, r2
 803661c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 803661e:	68fb      	ldr	r3, [r7, #12]
 8036620:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8036624:	b2db      	uxtb	r3, r3
 8036626:	2b20      	cmp	r3, #32
 8036628:	d166      	bne.n	80366f8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 803662a:	68bb      	ldr	r3, [r7, #8]
 803662c:	2b00      	cmp	r3, #0
 803662e:	d002      	beq.n	8036636 <HAL_UART_Receive_DMA+0x26>
 8036630:	88fb      	ldrh	r3, [r7, #6]
 8036632:	2b00      	cmp	r3, #0
 8036634:	d101      	bne.n	803663a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8036636:	2301      	movs	r3, #1
 8036638:	e05f      	b.n	80366fa <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 803663a:	68fb      	ldr	r3, [r7, #12]
 803663c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8036640:	2b01      	cmp	r3, #1
 8036642:	d101      	bne.n	8036648 <HAL_UART_Receive_DMA+0x38>
 8036644:	2302      	movs	r3, #2
 8036646:	e058      	b.n	80366fa <HAL_UART_Receive_DMA+0xea>
 8036648:	68fb      	ldr	r3, [r7, #12]
 803664a:	2201      	movs	r2, #1
 803664c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8036650:	68ba      	ldr	r2, [r7, #8]
 8036652:	68fb      	ldr	r3, [r7, #12]
 8036654:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8036656:	68fb      	ldr	r3, [r7, #12]
 8036658:	88fa      	ldrh	r2, [r7, #6]
 803665a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 803665c:	68fb      	ldr	r3, [r7, #12]
 803665e:	2200      	movs	r2, #0
 8036660:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8036662:	68fb      	ldr	r3, [r7, #12]
 8036664:	2222      	movs	r2, #34	; 0x22
 8036666:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 803666a:	68fb      	ldr	r3, [r7, #12]
 803666c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803666e:	4a25      	ldr	r2, [pc, #148]	; (8036704 <HAL_UART_Receive_DMA+0xf4>)
 8036670:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8036672:	68fb      	ldr	r3, [r7, #12]
 8036674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8036676:	4a24      	ldr	r2, [pc, #144]	; (8036708 <HAL_UART_Receive_DMA+0xf8>)
 8036678:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 803667a:	68fb      	ldr	r3, [r7, #12]
 803667c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803667e:	4a23      	ldr	r2, [pc, #140]	; (803670c <HAL_UART_Receive_DMA+0xfc>)
 8036680:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8036682:	68fb      	ldr	r3, [r7, #12]
 8036684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8036686:	2200      	movs	r2, #0
 8036688:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 803668a:	f107 0308 	add.w	r3, r7, #8
 803668e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8036690:	68fb      	ldr	r3, [r7, #12]
 8036692:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8036694:	68fb      	ldr	r3, [r7, #12]
 8036696:	681b      	ldr	r3, [r3, #0]
 8036698:	3304      	adds	r3, #4
 803669a:	4619      	mov	r1, r3
 803669c:	697b      	ldr	r3, [r7, #20]
 803669e:	681a      	ldr	r2, [r3, #0]
 80366a0:	88fb      	ldrh	r3, [r7, #6]
 80366a2:	f7f8 ffc9 	bl	802f638 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80366a6:	2300      	movs	r3, #0
 80366a8:	613b      	str	r3, [r7, #16]
 80366aa:	68fb      	ldr	r3, [r7, #12]
 80366ac:	681b      	ldr	r3, [r3, #0]
 80366ae:	681b      	ldr	r3, [r3, #0]
 80366b0:	613b      	str	r3, [r7, #16]
 80366b2:	68fb      	ldr	r3, [r7, #12]
 80366b4:	681b      	ldr	r3, [r3, #0]
 80366b6:	685b      	ldr	r3, [r3, #4]
 80366b8:	613b      	str	r3, [r7, #16]
 80366ba:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80366bc:	68fb      	ldr	r3, [r7, #12]
 80366be:	2200      	movs	r2, #0
 80366c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80366c4:	68fb      	ldr	r3, [r7, #12]
 80366c6:	681b      	ldr	r3, [r3, #0]
 80366c8:	68da      	ldr	r2, [r3, #12]
 80366ca:	68fb      	ldr	r3, [r7, #12]
 80366cc:	681b      	ldr	r3, [r3, #0]
 80366ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80366d2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80366d4:	68fb      	ldr	r3, [r7, #12]
 80366d6:	681b      	ldr	r3, [r3, #0]
 80366d8:	695a      	ldr	r2, [r3, #20]
 80366da:	68fb      	ldr	r3, [r7, #12]
 80366dc:	681b      	ldr	r3, [r3, #0]
 80366de:	f042 0201 	orr.w	r2, r2, #1
 80366e2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80366e4:	68fb      	ldr	r3, [r7, #12]
 80366e6:	681b      	ldr	r3, [r3, #0]
 80366e8:	695a      	ldr	r2, [r3, #20]
 80366ea:	68fb      	ldr	r3, [r7, #12]
 80366ec:	681b      	ldr	r3, [r3, #0]
 80366ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80366f2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80366f4:	2300      	movs	r3, #0
 80366f6:	e000      	b.n	80366fa <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80366f8:	2302      	movs	r3, #2
  }
}
 80366fa:	4618      	mov	r0, r3
 80366fc:	3718      	adds	r7, #24
 80366fe:	46bd      	mov	sp, r7
 8036700:	bd80      	pop	{r7, pc}
 8036702:	bf00      	nop
 8036704:	08036961 	.word	0x08036961
 8036708:	080369c9 	.word	0x080369c9
 803670c:	080369e5 	.word	0x080369e5

08036710 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8036710:	b580      	push	{r7, lr}
 8036712:	b088      	sub	sp, #32
 8036714:	af00      	add	r7, sp, #0
 8036716:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8036718:	687b      	ldr	r3, [r7, #4]
 803671a:	681b      	ldr	r3, [r3, #0]
 803671c:	681b      	ldr	r3, [r3, #0]
 803671e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8036720:	687b      	ldr	r3, [r7, #4]
 8036722:	681b      	ldr	r3, [r3, #0]
 8036724:	68db      	ldr	r3, [r3, #12]
 8036726:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8036728:	687b      	ldr	r3, [r7, #4]
 803672a:	681b      	ldr	r3, [r3, #0]
 803672c:	695b      	ldr	r3, [r3, #20]
 803672e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8036730:	2300      	movs	r3, #0
 8036732:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8036734:	2300      	movs	r3, #0
 8036736:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8036738:	69fb      	ldr	r3, [r7, #28]
 803673a:	f003 030f 	and.w	r3, r3, #15
 803673e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8036740:	693b      	ldr	r3, [r7, #16]
 8036742:	2b00      	cmp	r3, #0
 8036744:	d10d      	bne.n	8036762 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8036746:	69fb      	ldr	r3, [r7, #28]
 8036748:	f003 0320 	and.w	r3, r3, #32
 803674c:	2b00      	cmp	r3, #0
 803674e:	d008      	beq.n	8036762 <HAL_UART_IRQHandler+0x52>
 8036750:	69bb      	ldr	r3, [r7, #24]
 8036752:	f003 0320 	and.w	r3, r3, #32
 8036756:	2b00      	cmp	r3, #0
 8036758:	d003      	beq.n	8036762 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 803675a:	6878      	ldr	r0, [r7, #4]
 803675c:	f000 fa8c 	bl	8036c78 <UART_Receive_IT>
      return;
 8036760:	e0d1      	b.n	8036906 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8036762:	693b      	ldr	r3, [r7, #16]
 8036764:	2b00      	cmp	r3, #0
 8036766:	f000 80b0 	beq.w	80368ca <HAL_UART_IRQHandler+0x1ba>
 803676a:	697b      	ldr	r3, [r7, #20]
 803676c:	f003 0301 	and.w	r3, r3, #1
 8036770:	2b00      	cmp	r3, #0
 8036772:	d105      	bne.n	8036780 <HAL_UART_IRQHandler+0x70>
 8036774:	69bb      	ldr	r3, [r7, #24]
 8036776:	f403 7390 	and.w	r3, r3, #288	; 0x120
 803677a:	2b00      	cmp	r3, #0
 803677c:	f000 80a5 	beq.w	80368ca <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8036780:	69fb      	ldr	r3, [r7, #28]
 8036782:	f003 0301 	and.w	r3, r3, #1
 8036786:	2b00      	cmp	r3, #0
 8036788:	d00a      	beq.n	80367a0 <HAL_UART_IRQHandler+0x90>
 803678a:	69bb      	ldr	r3, [r7, #24]
 803678c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8036790:	2b00      	cmp	r3, #0
 8036792:	d005      	beq.n	80367a0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8036794:	687b      	ldr	r3, [r7, #4]
 8036796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8036798:	f043 0201 	orr.w	r2, r3, #1
 803679c:	687b      	ldr	r3, [r7, #4]
 803679e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80367a0:	69fb      	ldr	r3, [r7, #28]
 80367a2:	f003 0304 	and.w	r3, r3, #4
 80367a6:	2b00      	cmp	r3, #0
 80367a8:	d00a      	beq.n	80367c0 <HAL_UART_IRQHandler+0xb0>
 80367aa:	697b      	ldr	r3, [r7, #20]
 80367ac:	f003 0301 	and.w	r3, r3, #1
 80367b0:	2b00      	cmp	r3, #0
 80367b2:	d005      	beq.n	80367c0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80367b4:	687b      	ldr	r3, [r7, #4]
 80367b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80367b8:	f043 0202 	orr.w	r2, r3, #2
 80367bc:	687b      	ldr	r3, [r7, #4]
 80367be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80367c0:	69fb      	ldr	r3, [r7, #28]
 80367c2:	f003 0302 	and.w	r3, r3, #2
 80367c6:	2b00      	cmp	r3, #0
 80367c8:	d00a      	beq.n	80367e0 <HAL_UART_IRQHandler+0xd0>
 80367ca:	697b      	ldr	r3, [r7, #20]
 80367cc:	f003 0301 	and.w	r3, r3, #1
 80367d0:	2b00      	cmp	r3, #0
 80367d2:	d005      	beq.n	80367e0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80367d4:	687b      	ldr	r3, [r7, #4]
 80367d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80367d8:	f043 0204 	orr.w	r2, r3, #4
 80367dc:	687b      	ldr	r3, [r7, #4]
 80367de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80367e0:	69fb      	ldr	r3, [r7, #28]
 80367e2:	f003 0308 	and.w	r3, r3, #8
 80367e6:	2b00      	cmp	r3, #0
 80367e8:	d00f      	beq.n	803680a <HAL_UART_IRQHandler+0xfa>
 80367ea:	69bb      	ldr	r3, [r7, #24]
 80367ec:	f003 0320 	and.w	r3, r3, #32
 80367f0:	2b00      	cmp	r3, #0
 80367f2:	d104      	bne.n	80367fe <HAL_UART_IRQHandler+0xee>
 80367f4:	697b      	ldr	r3, [r7, #20]
 80367f6:	f003 0301 	and.w	r3, r3, #1
 80367fa:	2b00      	cmp	r3, #0
 80367fc:	d005      	beq.n	803680a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80367fe:	687b      	ldr	r3, [r7, #4]
 8036800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8036802:	f043 0208 	orr.w	r2, r3, #8
 8036806:	687b      	ldr	r3, [r7, #4]
 8036808:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 803680a:	687b      	ldr	r3, [r7, #4]
 803680c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803680e:	2b00      	cmp	r3, #0
 8036810:	d078      	beq.n	8036904 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8036812:	69fb      	ldr	r3, [r7, #28]
 8036814:	f003 0320 	and.w	r3, r3, #32
 8036818:	2b00      	cmp	r3, #0
 803681a:	d007      	beq.n	803682c <HAL_UART_IRQHandler+0x11c>
 803681c:	69bb      	ldr	r3, [r7, #24]
 803681e:	f003 0320 	and.w	r3, r3, #32
 8036822:	2b00      	cmp	r3, #0
 8036824:	d002      	beq.n	803682c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8036826:	6878      	ldr	r0, [r7, #4]
 8036828:	f000 fa26 	bl	8036c78 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 803682c:	687b      	ldr	r3, [r7, #4]
 803682e:	681b      	ldr	r3, [r3, #0]
 8036830:	695b      	ldr	r3, [r3, #20]
 8036832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8036836:	2b40      	cmp	r3, #64	; 0x40
 8036838:	bf0c      	ite	eq
 803683a:	2301      	moveq	r3, #1
 803683c:	2300      	movne	r3, #0
 803683e:	b2db      	uxtb	r3, r3
 8036840:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8036842:	687b      	ldr	r3, [r7, #4]
 8036844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8036846:	f003 0308 	and.w	r3, r3, #8
 803684a:	2b00      	cmp	r3, #0
 803684c:	d102      	bne.n	8036854 <HAL_UART_IRQHandler+0x144>
 803684e:	68fb      	ldr	r3, [r7, #12]
 8036850:	2b00      	cmp	r3, #0
 8036852:	d031      	beq.n	80368b8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8036854:	6878      	ldr	r0, [r7, #4]
 8036856:	f000 f96f 	bl	8036b38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 803685a:	687b      	ldr	r3, [r7, #4]
 803685c:	681b      	ldr	r3, [r3, #0]
 803685e:	695b      	ldr	r3, [r3, #20]
 8036860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8036864:	2b40      	cmp	r3, #64	; 0x40
 8036866:	d123      	bne.n	80368b0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8036868:	687b      	ldr	r3, [r7, #4]
 803686a:	681b      	ldr	r3, [r3, #0]
 803686c:	695a      	ldr	r2, [r3, #20]
 803686e:	687b      	ldr	r3, [r7, #4]
 8036870:	681b      	ldr	r3, [r3, #0]
 8036872:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8036876:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8036878:	687b      	ldr	r3, [r7, #4]
 803687a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803687c:	2b00      	cmp	r3, #0
 803687e:	d013      	beq.n	80368a8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8036880:	687b      	ldr	r3, [r7, #4]
 8036882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8036884:	4a21      	ldr	r2, [pc, #132]	; (803690c <HAL_UART_IRQHandler+0x1fc>)
 8036886:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8036888:	687b      	ldr	r3, [r7, #4]
 803688a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803688c:	4618      	mov	r0, r3
 803688e:	f7f8 ff2b 	bl	802f6e8 <HAL_DMA_Abort_IT>
 8036892:	4603      	mov	r3, r0
 8036894:	2b00      	cmp	r3, #0
 8036896:	d016      	beq.n	80368c6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8036898:	687b      	ldr	r3, [r7, #4]
 803689a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803689c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803689e:	687a      	ldr	r2, [r7, #4]
 80368a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80368a2:	4610      	mov	r0, r2
 80368a4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80368a6:	e00e      	b.n	80368c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80368a8:	6878      	ldr	r0, [r7, #4]
 80368aa:	f000 f84f 	bl	803694c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80368ae:	e00a      	b.n	80368c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80368b0:	6878      	ldr	r0, [r7, #4]
 80368b2:	f000 f84b 	bl	803694c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80368b6:	e006      	b.n	80368c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80368b8:	6878      	ldr	r0, [r7, #4]
 80368ba:	f000 f847 	bl	803694c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80368be:	687b      	ldr	r3, [r7, #4]
 80368c0:	2200      	movs	r2, #0
 80368c2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80368c4:	e01e      	b.n	8036904 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80368c6:	bf00      	nop
    return;
 80368c8:	e01c      	b.n	8036904 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80368ca:	69fb      	ldr	r3, [r7, #28]
 80368cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80368d0:	2b00      	cmp	r3, #0
 80368d2:	d008      	beq.n	80368e6 <HAL_UART_IRQHandler+0x1d6>
 80368d4:	69bb      	ldr	r3, [r7, #24]
 80368d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80368da:	2b00      	cmp	r3, #0
 80368dc:	d003      	beq.n	80368e6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80368de:	6878      	ldr	r0, [r7, #4]
 80368e0:	f000 f95c 	bl	8036b9c <UART_Transmit_IT>
    return;
 80368e4:	e00f      	b.n	8036906 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80368e6:	69fb      	ldr	r3, [r7, #28]
 80368e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80368ec:	2b00      	cmp	r3, #0
 80368ee:	d00a      	beq.n	8036906 <HAL_UART_IRQHandler+0x1f6>
 80368f0:	69bb      	ldr	r3, [r7, #24]
 80368f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80368f6:	2b00      	cmp	r3, #0
 80368f8:	d005      	beq.n	8036906 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80368fa:	6878      	ldr	r0, [r7, #4]
 80368fc:	f000 f9a4 	bl	8036c48 <UART_EndTransmit_IT>
    return;
 8036900:	bf00      	nop
 8036902:	e000      	b.n	8036906 <HAL_UART_IRQHandler+0x1f6>
    return;
 8036904:	bf00      	nop
  }
}
 8036906:	3720      	adds	r7, #32
 8036908:	46bd      	mov	sp, r7
 803690a:	bd80      	pop	{r7, pc}
 803690c:	08036b75 	.word	0x08036b75

08036910 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8036910:	b480      	push	{r7}
 8036912:	b083      	sub	sp, #12
 8036914:	af00      	add	r7, sp, #0
 8036916:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8036918:	bf00      	nop
 803691a:	370c      	adds	r7, #12
 803691c:	46bd      	mov	sp, r7
 803691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036922:	4770      	bx	lr

08036924 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8036924:	b480      	push	{r7}
 8036926:	b083      	sub	sp, #12
 8036928:	af00      	add	r7, sp, #0
 803692a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 803692c:	bf00      	nop
 803692e:	370c      	adds	r7, #12
 8036930:	46bd      	mov	sp, r7
 8036932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036936:	4770      	bx	lr

08036938 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8036938:	b480      	push	{r7}
 803693a:	b083      	sub	sp, #12
 803693c:	af00      	add	r7, sp, #0
 803693e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8036940:	bf00      	nop
 8036942:	370c      	adds	r7, #12
 8036944:	46bd      	mov	sp, r7
 8036946:	f85d 7b04 	ldr.w	r7, [sp], #4
 803694a:	4770      	bx	lr

0803694c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 803694c:	b480      	push	{r7}
 803694e:	b083      	sub	sp, #12
 8036950:	af00      	add	r7, sp, #0
 8036952:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8036954:	bf00      	nop
 8036956:	370c      	adds	r7, #12
 8036958:	46bd      	mov	sp, r7
 803695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803695e:	4770      	bx	lr

08036960 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8036960:	b580      	push	{r7, lr}
 8036962:	b084      	sub	sp, #16
 8036964:	af00      	add	r7, sp, #0
 8036966:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8036968:	687b      	ldr	r3, [r7, #4]
 803696a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803696c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 803696e:	687b      	ldr	r3, [r7, #4]
 8036970:	681b      	ldr	r3, [r3, #0]
 8036972:	681b      	ldr	r3, [r3, #0]
 8036974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8036978:	2b00      	cmp	r3, #0
 803697a:	d11e      	bne.n	80369ba <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 803697c:	68fb      	ldr	r3, [r7, #12]
 803697e:	2200      	movs	r2, #0
 8036980:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8036982:	68fb      	ldr	r3, [r7, #12]
 8036984:	681b      	ldr	r3, [r3, #0]
 8036986:	68da      	ldr	r2, [r3, #12]
 8036988:	68fb      	ldr	r3, [r7, #12]
 803698a:	681b      	ldr	r3, [r3, #0]
 803698c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8036990:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8036992:	68fb      	ldr	r3, [r7, #12]
 8036994:	681b      	ldr	r3, [r3, #0]
 8036996:	695a      	ldr	r2, [r3, #20]
 8036998:	68fb      	ldr	r3, [r7, #12]
 803699a:	681b      	ldr	r3, [r3, #0]
 803699c:	f022 0201 	bic.w	r2, r2, #1
 80369a0:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80369a2:	68fb      	ldr	r3, [r7, #12]
 80369a4:	681b      	ldr	r3, [r3, #0]
 80369a6:	695a      	ldr	r2, [r3, #20]
 80369a8:	68fb      	ldr	r3, [r7, #12]
 80369aa:	681b      	ldr	r3, [r3, #0]
 80369ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80369b0:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80369b2:	68fb      	ldr	r3, [r7, #12]
 80369b4:	2220      	movs	r2, #32
 80369b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80369ba:	68f8      	ldr	r0, [r7, #12]
 80369bc:	f7ff ffb2 	bl	8036924 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80369c0:	bf00      	nop
 80369c2:	3710      	adds	r7, #16
 80369c4:	46bd      	mov	sp, r7
 80369c6:	bd80      	pop	{r7, pc}

080369c8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80369c8:	b580      	push	{r7, lr}
 80369ca:	b084      	sub	sp, #16
 80369cc:	af00      	add	r7, sp, #0
 80369ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80369d0:	687b      	ldr	r3, [r7, #4]
 80369d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80369d4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80369d6:	68f8      	ldr	r0, [r7, #12]
 80369d8:	f7ff ffae 	bl	8036938 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80369dc:	bf00      	nop
 80369de:	3710      	adds	r7, #16
 80369e0:	46bd      	mov	sp, r7
 80369e2:	bd80      	pop	{r7, pc}

080369e4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80369e4:	b580      	push	{r7, lr}
 80369e6:	b084      	sub	sp, #16
 80369e8:	af00      	add	r7, sp, #0
 80369ea:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80369ec:	2300      	movs	r3, #0
 80369ee:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80369f0:	687b      	ldr	r3, [r7, #4]
 80369f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80369f4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80369f6:	68bb      	ldr	r3, [r7, #8]
 80369f8:	681b      	ldr	r3, [r3, #0]
 80369fa:	695b      	ldr	r3, [r3, #20]
 80369fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8036a00:	2b80      	cmp	r3, #128	; 0x80
 8036a02:	bf0c      	ite	eq
 8036a04:	2301      	moveq	r3, #1
 8036a06:	2300      	movne	r3, #0
 8036a08:	b2db      	uxtb	r3, r3
 8036a0a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8036a0c:	68bb      	ldr	r3, [r7, #8]
 8036a0e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8036a12:	b2db      	uxtb	r3, r3
 8036a14:	2b21      	cmp	r3, #33	; 0x21
 8036a16:	d108      	bne.n	8036a2a <UART_DMAError+0x46>
 8036a18:	68fb      	ldr	r3, [r7, #12]
 8036a1a:	2b00      	cmp	r3, #0
 8036a1c:	d005      	beq.n	8036a2a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8036a1e:	68bb      	ldr	r3, [r7, #8]
 8036a20:	2200      	movs	r2, #0
 8036a22:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8036a24:	68b8      	ldr	r0, [r7, #8]
 8036a26:	f000 f871 	bl	8036b0c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8036a2a:	68bb      	ldr	r3, [r7, #8]
 8036a2c:	681b      	ldr	r3, [r3, #0]
 8036a2e:	695b      	ldr	r3, [r3, #20]
 8036a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8036a34:	2b40      	cmp	r3, #64	; 0x40
 8036a36:	bf0c      	ite	eq
 8036a38:	2301      	moveq	r3, #1
 8036a3a:	2300      	movne	r3, #0
 8036a3c:	b2db      	uxtb	r3, r3
 8036a3e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8036a40:	68bb      	ldr	r3, [r7, #8]
 8036a42:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8036a46:	b2db      	uxtb	r3, r3
 8036a48:	2b22      	cmp	r3, #34	; 0x22
 8036a4a:	d108      	bne.n	8036a5e <UART_DMAError+0x7a>
 8036a4c:	68fb      	ldr	r3, [r7, #12]
 8036a4e:	2b00      	cmp	r3, #0
 8036a50:	d005      	beq.n	8036a5e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8036a52:	68bb      	ldr	r3, [r7, #8]
 8036a54:	2200      	movs	r2, #0
 8036a56:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8036a58:	68b8      	ldr	r0, [r7, #8]
 8036a5a:	f000 f86d 	bl	8036b38 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8036a5e:	68bb      	ldr	r3, [r7, #8]
 8036a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8036a62:	f043 0210 	orr.w	r2, r3, #16
 8036a66:	68bb      	ldr	r3, [r7, #8]
 8036a68:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8036a6a:	68b8      	ldr	r0, [r7, #8]
 8036a6c:	f7ff ff6e 	bl	803694c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8036a70:	bf00      	nop
 8036a72:	3710      	adds	r7, #16
 8036a74:	46bd      	mov	sp, r7
 8036a76:	bd80      	pop	{r7, pc}

08036a78 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8036a78:	b580      	push	{r7, lr}
 8036a7a:	b084      	sub	sp, #16
 8036a7c:	af00      	add	r7, sp, #0
 8036a7e:	60f8      	str	r0, [r7, #12]
 8036a80:	60b9      	str	r1, [r7, #8]
 8036a82:	603b      	str	r3, [r7, #0]
 8036a84:	4613      	mov	r3, r2
 8036a86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8036a88:	e02c      	b.n	8036ae4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8036a8a:	69bb      	ldr	r3, [r7, #24]
 8036a8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8036a90:	d028      	beq.n	8036ae4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8036a92:	69bb      	ldr	r3, [r7, #24]
 8036a94:	2b00      	cmp	r3, #0
 8036a96:	d007      	beq.n	8036aa8 <UART_WaitOnFlagUntilTimeout+0x30>
 8036a98:	f7f5 fc68 	bl	802c36c <HAL_GetTick>
 8036a9c:	4602      	mov	r2, r0
 8036a9e:	683b      	ldr	r3, [r7, #0]
 8036aa0:	1ad3      	subs	r3, r2, r3
 8036aa2:	69ba      	ldr	r2, [r7, #24]
 8036aa4:	429a      	cmp	r2, r3
 8036aa6:	d21d      	bcs.n	8036ae4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8036aa8:	68fb      	ldr	r3, [r7, #12]
 8036aaa:	681b      	ldr	r3, [r3, #0]
 8036aac:	68da      	ldr	r2, [r3, #12]
 8036aae:	68fb      	ldr	r3, [r7, #12]
 8036ab0:	681b      	ldr	r3, [r3, #0]
 8036ab2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8036ab6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8036ab8:	68fb      	ldr	r3, [r7, #12]
 8036aba:	681b      	ldr	r3, [r3, #0]
 8036abc:	695a      	ldr	r2, [r3, #20]
 8036abe:	68fb      	ldr	r3, [r7, #12]
 8036ac0:	681b      	ldr	r3, [r3, #0]
 8036ac2:	f022 0201 	bic.w	r2, r2, #1
 8036ac6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8036ac8:	68fb      	ldr	r3, [r7, #12]
 8036aca:	2220      	movs	r2, #32
 8036acc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8036ad0:	68fb      	ldr	r3, [r7, #12]
 8036ad2:	2220      	movs	r2, #32
 8036ad4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8036ad8:	68fb      	ldr	r3, [r7, #12]
 8036ada:	2200      	movs	r2, #0
 8036adc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8036ae0:	2303      	movs	r3, #3
 8036ae2:	e00f      	b.n	8036b04 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8036ae4:	68fb      	ldr	r3, [r7, #12]
 8036ae6:	681b      	ldr	r3, [r3, #0]
 8036ae8:	681a      	ldr	r2, [r3, #0]
 8036aea:	68bb      	ldr	r3, [r7, #8]
 8036aec:	4013      	ands	r3, r2
 8036aee:	68ba      	ldr	r2, [r7, #8]
 8036af0:	429a      	cmp	r2, r3
 8036af2:	bf0c      	ite	eq
 8036af4:	2301      	moveq	r3, #1
 8036af6:	2300      	movne	r3, #0
 8036af8:	b2db      	uxtb	r3, r3
 8036afa:	461a      	mov	r2, r3
 8036afc:	79fb      	ldrb	r3, [r7, #7]
 8036afe:	429a      	cmp	r2, r3
 8036b00:	d0c3      	beq.n	8036a8a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8036b02:	2300      	movs	r3, #0
}
 8036b04:	4618      	mov	r0, r3
 8036b06:	3710      	adds	r7, #16
 8036b08:	46bd      	mov	sp, r7
 8036b0a:	bd80      	pop	{r7, pc}

08036b0c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8036b0c:	b480      	push	{r7}
 8036b0e:	b083      	sub	sp, #12
 8036b10:	af00      	add	r7, sp, #0
 8036b12:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8036b14:	687b      	ldr	r3, [r7, #4]
 8036b16:	681b      	ldr	r3, [r3, #0]
 8036b18:	68da      	ldr	r2, [r3, #12]
 8036b1a:	687b      	ldr	r3, [r7, #4]
 8036b1c:	681b      	ldr	r3, [r3, #0]
 8036b1e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8036b22:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8036b24:	687b      	ldr	r3, [r7, #4]
 8036b26:	2220      	movs	r2, #32
 8036b28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8036b2c:	bf00      	nop
 8036b2e:	370c      	adds	r7, #12
 8036b30:	46bd      	mov	sp, r7
 8036b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036b36:	4770      	bx	lr

08036b38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8036b38:	b480      	push	{r7}
 8036b3a:	b083      	sub	sp, #12
 8036b3c:	af00      	add	r7, sp, #0
 8036b3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8036b40:	687b      	ldr	r3, [r7, #4]
 8036b42:	681b      	ldr	r3, [r3, #0]
 8036b44:	68da      	ldr	r2, [r3, #12]
 8036b46:	687b      	ldr	r3, [r7, #4]
 8036b48:	681b      	ldr	r3, [r3, #0]
 8036b4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8036b4e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8036b50:	687b      	ldr	r3, [r7, #4]
 8036b52:	681b      	ldr	r3, [r3, #0]
 8036b54:	695a      	ldr	r2, [r3, #20]
 8036b56:	687b      	ldr	r3, [r7, #4]
 8036b58:	681b      	ldr	r3, [r3, #0]
 8036b5a:	f022 0201 	bic.w	r2, r2, #1
 8036b5e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8036b60:	687b      	ldr	r3, [r7, #4]
 8036b62:	2220      	movs	r2, #32
 8036b64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8036b68:	bf00      	nop
 8036b6a:	370c      	adds	r7, #12
 8036b6c:	46bd      	mov	sp, r7
 8036b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036b72:	4770      	bx	lr

08036b74 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8036b74:	b580      	push	{r7, lr}
 8036b76:	b084      	sub	sp, #16
 8036b78:	af00      	add	r7, sp, #0
 8036b7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8036b7c:	687b      	ldr	r3, [r7, #4]
 8036b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8036b80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8036b82:	68fb      	ldr	r3, [r7, #12]
 8036b84:	2200      	movs	r2, #0
 8036b86:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8036b88:	68fb      	ldr	r3, [r7, #12]
 8036b8a:	2200      	movs	r2, #0
 8036b8c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8036b8e:	68f8      	ldr	r0, [r7, #12]
 8036b90:	f7ff fedc 	bl	803694c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8036b94:	bf00      	nop
 8036b96:	3710      	adds	r7, #16
 8036b98:	46bd      	mov	sp, r7
 8036b9a:	bd80      	pop	{r7, pc}

08036b9c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8036b9c:	b480      	push	{r7}
 8036b9e:	b085      	sub	sp, #20
 8036ba0:	af00      	add	r7, sp, #0
 8036ba2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8036ba4:	687b      	ldr	r3, [r7, #4]
 8036ba6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8036baa:	b2db      	uxtb	r3, r3
 8036bac:	2b21      	cmp	r3, #33	; 0x21
 8036bae:	d144      	bne.n	8036c3a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8036bb0:	687b      	ldr	r3, [r7, #4]
 8036bb2:	689b      	ldr	r3, [r3, #8]
 8036bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8036bb8:	d11a      	bne.n	8036bf0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8036bba:	687b      	ldr	r3, [r7, #4]
 8036bbc:	6a1b      	ldr	r3, [r3, #32]
 8036bbe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8036bc0:	68fb      	ldr	r3, [r7, #12]
 8036bc2:	881b      	ldrh	r3, [r3, #0]
 8036bc4:	461a      	mov	r2, r3
 8036bc6:	687b      	ldr	r3, [r7, #4]
 8036bc8:	681b      	ldr	r3, [r3, #0]
 8036bca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8036bce:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8036bd0:	687b      	ldr	r3, [r7, #4]
 8036bd2:	691b      	ldr	r3, [r3, #16]
 8036bd4:	2b00      	cmp	r3, #0
 8036bd6:	d105      	bne.n	8036be4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8036bd8:	687b      	ldr	r3, [r7, #4]
 8036bda:	6a1b      	ldr	r3, [r3, #32]
 8036bdc:	1c9a      	adds	r2, r3, #2
 8036bde:	687b      	ldr	r3, [r7, #4]
 8036be0:	621a      	str	r2, [r3, #32]
 8036be2:	e00e      	b.n	8036c02 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8036be4:	687b      	ldr	r3, [r7, #4]
 8036be6:	6a1b      	ldr	r3, [r3, #32]
 8036be8:	1c5a      	adds	r2, r3, #1
 8036bea:	687b      	ldr	r3, [r7, #4]
 8036bec:	621a      	str	r2, [r3, #32]
 8036bee:	e008      	b.n	8036c02 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8036bf0:	687b      	ldr	r3, [r7, #4]
 8036bf2:	6a1b      	ldr	r3, [r3, #32]
 8036bf4:	1c59      	adds	r1, r3, #1
 8036bf6:	687a      	ldr	r2, [r7, #4]
 8036bf8:	6211      	str	r1, [r2, #32]
 8036bfa:	781a      	ldrb	r2, [r3, #0]
 8036bfc:	687b      	ldr	r3, [r7, #4]
 8036bfe:	681b      	ldr	r3, [r3, #0]
 8036c00:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8036c02:	687b      	ldr	r3, [r7, #4]
 8036c04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8036c06:	b29b      	uxth	r3, r3
 8036c08:	3b01      	subs	r3, #1
 8036c0a:	b29b      	uxth	r3, r3
 8036c0c:	687a      	ldr	r2, [r7, #4]
 8036c0e:	4619      	mov	r1, r3
 8036c10:	84d1      	strh	r1, [r2, #38]	; 0x26
 8036c12:	2b00      	cmp	r3, #0
 8036c14:	d10f      	bne.n	8036c36 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8036c16:	687b      	ldr	r3, [r7, #4]
 8036c18:	681b      	ldr	r3, [r3, #0]
 8036c1a:	68da      	ldr	r2, [r3, #12]
 8036c1c:	687b      	ldr	r3, [r7, #4]
 8036c1e:	681b      	ldr	r3, [r3, #0]
 8036c20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8036c24:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8036c26:	687b      	ldr	r3, [r7, #4]
 8036c28:	681b      	ldr	r3, [r3, #0]
 8036c2a:	68da      	ldr	r2, [r3, #12]
 8036c2c:	687b      	ldr	r3, [r7, #4]
 8036c2e:	681b      	ldr	r3, [r3, #0]
 8036c30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8036c34:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8036c36:	2300      	movs	r3, #0
 8036c38:	e000      	b.n	8036c3c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8036c3a:	2302      	movs	r3, #2
  }
}
 8036c3c:	4618      	mov	r0, r3
 8036c3e:	3714      	adds	r7, #20
 8036c40:	46bd      	mov	sp, r7
 8036c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036c46:	4770      	bx	lr

08036c48 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8036c48:	b580      	push	{r7, lr}
 8036c4a:	b082      	sub	sp, #8
 8036c4c:	af00      	add	r7, sp, #0
 8036c4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8036c50:	687b      	ldr	r3, [r7, #4]
 8036c52:	681b      	ldr	r3, [r3, #0]
 8036c54:	68da      	ldr	r2, [r3, #12]
 8036c56:	687b      	ldr	r3, [r7, #4]
 8036c58:	681b      	ldr	r3, [r3, #0]
 8036c5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8036c5e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8036c60:	687b      	ldr	r3, [r7, #4]
 8036c62:	2220      	movs	r2, #32
 8036c64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8036c68:	6878      	ldr	r0, [r7, #4]
 8036c6a:	f7ff fe51 	bl	8036910 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8036c6e:	2300      	movs	r3, #0
}
 8036c70:	4618      	mov	r0, r3
 8036c72:	3708      	adds	r7, #8
 8036c74:	46bd      	mov	sp, r7
 8036c76:	bd80      	pop	{r7, pc}

08036c78 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8036c78:	b580      	push	{r7, lr}
 8036c7a:	b084      	sub	sp, #16
 8036c7c:	af00      	add	r7, sp, #0
 8036c7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8036c80:	687b      	ldr	r3, [r7, #4]
 8036c82:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8036c86:	b2db      	uxtb	r3, r3
 8036c88:	2b22      	cmp	r3, #34	; 0x22
 8036c8a:	d171      	bne.n	8036d70 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8036c8c:	687b      	ldr	r3, [r7, #4]
 8036c8e:	689b      	ldr	r3, [r3, #8]
 8036c90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8036c94:	d123      	bne.n	8036cde <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8036c96:	687b      	ldr	r3, [r7, #4]
 8036c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8036c9a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8036c9c:	687b      	ldr	r3, [r7, #4]
 8036c9e:	691b      	ldr	r3, [r3, #16]
 8036ca0:	2b00      	cmp	r3, #0
 8036ca2:	d10e      	bne.n	8036cc2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8036ca4:	687b      	ldr	r3, [r7, #4]
 8036ca6:	681b      	ldr	r3, [r3, #0]
 8036ca8:	685b      	ldr	r3, [r3, #4]
 8036caa:	b29b      	uxth	r3, r3
 8036cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8036cb0:	b29a      	uxth	r2, r3
 8036cb2:	68fb      	ldr	r3, [r7, #12]
 8036cb4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8036cb6:	687b      	ldr	r3, [r7, #4]
 8036cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8036cba:	1c9a      	adds	r2, r3, #2
 8036cbc:	687b      	ldr	r3, [r7, #4]
 8036cbe:	629a      	str	r2, [r3, #40]	; 0x28
 8036cc0:	e029      	b.n	8036d16 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8036cc2:	687b      	ldr	r3, [r7, #4]
 8036cc4:	681b      	ldr	r3, [r3, #0]
 8036cc6:	685b      	ldr	r3, [r3, #4]
 8036cc8:	b29b      	uxth	r3, r3
 8036cca:	b2db      	uxtb	r3, r3
 8036ccc:	b29a      	uxth	r2, r3
 8036cce:	68fb      	ldr	r3, [r7, #12]
 8036cd0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8036cd2:	687b      	ldr	r3, [r7, #4]
 8036cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8036cd6:	1c5a      	adds	r2, r3, #1
 8036cd8:	687b      	ldr	r3, [r7, #4]
 8036cda:	629a      	str	r2, [r3, #40]	; 0x28
 8036cdc:	e01b      	b.n	8036d16 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8036cde:	687b      	ldr	r3, [r7, #4]
 8036ce0:	691b      	ldr	r3, [r3, #16]
 8036ce2:	2b00      	cmp	r3, #0
 8036ce4:	d10a      	bne.n	8036cfc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8036ce6:	687b      	ldr	r3, [r7, #4]
 8036ce8:	681b      	ldr	r3, [r3, #0]
 8036cea:	6858      	ldr	r0, [r3, #4]
 8036cec:	687b      	ldr	r3, [r7, #4]
 8036cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8036cf0:	1c59      	adds	r1, r3, #1
 8036cf2:	687a      	ldr	r2, [r7, #4]
 8036cf4:	6291      	str	r1, [r2, #40]	; 0x28
 8036cf6:	b2c2      	uxtb	r2, r0
 8036cf8:	701a      	strb	r2, [r3, #0]
 8036cfa:	e00c      	b.n	8036d16 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8036cfc:	687b      	ldr	r3, [r7, #4]
 8036cfe:	681b      	ldr	r3, [r3, #0]
 8036d00:	685b      	ldr	r3, [r3, #4]
 8036d02:	b2da      	uxtb	r2, r3
 8036d04:	687b      	ldr	r3, [r7, #4]
 8036d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8036d08:	1c58      	adds	r0, r3, #1
 8036d0a:	6879      	ldr	r1, [r7, #4]
 8036d0c:	6288      	str	r0, [r1, #40]	; 0x28
 8036d0e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8036d12:	b2d2      	uxtb	r2, r2
 8036d14:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8036d16:	687b      	ldr	r3, [r7, #4]
 8036d18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8036d1a:	b29b      	uxth	r3, r3
 8036d1c:	3b01      	subs	r3, #1
 8036d1e:	b29b      	uxth	r3, r3
 8036d20:	687a      	ldr	r2, [r7, #4]
 8036d22:	4619      	mov	r1, r3
 8036d24:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8036d26:	2b00      	cmp	r3, #0
 8036d28:	d120      	bne.n	8036d6c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8036d2a:	687b      	ldr	r3, [r7, #4]
 8036d2c:	681b      	ldr	r3, [r3, #0]
 8036d2e:	68da      	ldr	r2, [r3, #12]
 8036d30:	687b      	ldr	r3, [r7, #4]
 8036d32:	681b      	ldr	r3, [r3, #0]
 8036d34:	f022 0220 	bic.w	r2, r2, #32
 8036d38:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8036d3a:	687b      	ldr	r3, [r7, #4]
 8036d3c:	681b      	ldr	r3, [r3, #0]
 8036d3e:	68da      	ldr	r2, [r3, #12]
 8036d40:	687b      	ldr	r3, [r7, #4]
 8036d42:	681b      	ldr	r3, [r3, #0]
 8036d44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8036d48:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8036d4a:	687b      	ldr	r3, [r7, #4]
 8036d4c:	681b      	ldr	r3, [r3, #0]
 8036d4e:	695a      	ldr	r2, [r3, #20]
 8036d50:	687b      	ldr	r3, [r7, #4]
 8036d52:	681b      	ldr	r3, [r3, #0]
 8036d54:	f022 0201 	bic.w	r2, r2, #1
 8036d58:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8036d5a:	687b      	ldr	r3, [r7, #4]
 8036d5c:	2220      	movs	r2, #32
 8036d5e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8036d62:	6878      	ldr	r0, [r7, #4]
 8036d64:	f7ff fdde 	bl	8036924 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8036d68:	2300      	movs	r3, #0
 8036d6a:	e002      	b.n	8036d72 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8036d6c:	2300      	movs	r3, #0
 8036d6e:	e000      	b.n	8036d72 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8036d70:	2302      	movs	r3, #2
  }
}
 8036d72:	4618      	mov	r0, r3
 8036d74:	3710      	adds	r7, #16
 8036d76:	46bd      	mov	sp, r7
 8036d78:	bd80      	pop	{r7, pc}
	...

08036d7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8036d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8036d80:	b085      	sub	sp, #20
 8036d82:	af00      	add	r7, sp, #0
 8036d84:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8036d86:	687b      	ldr	r3, [r7, #4]
 8036d88:	681b      	ldr	r3, [r3, #0]
 8036d8a:	691b      	ldr	r3, [r3, #16]
 8036d8c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8036d90:	687b      	ldr	r3, [r7, #4]
 8036d92:	68da      	ldr	r2, [r3, #12]
 8036d94:	687b      	ldr	r3, [r7, #4]
 8036d96:	681b      	ldr	r3, [r3, #0]
 8036d98:	430a      	orrs	r2, r1
 8036d9a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8036d9c:	687b      	ldr	r3, [r7, #4]
 8036d9e:	689a      	ldr	r2, [r3, #8]
 8036da0:	687b      	ldr	r3, [r7, #4]
 8036da2:	691b      	ldr	r3, [r3, #16]
 8036da4:	431a      	orrs	r2, r3
 8036da6:	687b      	ldr	r3, [r7, #4]
 8036da8:	695b      	ldr	r3, [r3, #20]
 8036daa:	431a      	orrs	r2, r3
 8036dac:	687b      	ldr	r3, [r7, #4]
 8036dae:	69db      	ldr	r3, [r3, #28]
 8036db0:	4313      	orrs	r3, r2
 8036db2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8036db4:	687b      	ldr	r3, [r7, #4]
 8036db6:	681b      	ldr	r3, [r3, #0]
 8036db8:	68db      	ldr	r3, [r3, #12]
 8036dba:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8036dbe:	f023 030c 	bic.w	r3, r3, #12
 8036dc2:	687a      	ldr	r2, [r7, #4]
 8036dc4:	6812      	ldr	r2, [r2, #0]
 8036dc6:	68f9      	ldr	r1, [r7, #12]
 8036dc8:	430b      	orrs	r3, r1
 8036dca:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8036dcc:	687b      	ldr	r3, [r7, #4]
 8036dce:	681b      	ldr	r3, [r3, #0]
 8036dd0:	695b      	ldr	r3, [r3, #20]
 8036dd2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8036dd6:	687b      	ldr	r3, [r7, #4]
 8036dd8:	699a      	ldr	r2, [r3, #24]
 8036dda:	687b      	ldr	r3, [r7, #4]
 8036ddc:	681b      	ldr	r3, [r3, #0]
 8036dde:	430a      	orrs	r2, r1
 8036de0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8036de2:	687b      	ldr	r3, [r7, #4]
 8036de4:	69db      	ldr	r3, [r3, #28]
 8036de6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8036dea:	f040 8199 	bne.w	8037120 <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8036dee:	687b      	ldr	r3, [r7, #4]
 8036df0:	681b      	ldr	r3, [r3, #0]
 8036df2:	4ac6      	ldr	r2, [pc, #792]	; (803710c <UART_SetConfig+0x390>)
 8036df4:	4293      	cmp	r3, r2
 8036df6:	d00f      	beq.n	8036e18 <UART_SetConfig+0x9c>
 8036df8:	687b      	ldr	r3, [r7, #4]
 8036dfa:	681b      	ldr	r3, [r3, #0]
 8036dfc:	4ac4      	ldr	r2, [pc, #784]	; (8037110 <UART_SetConfig+0x394>)
 8036dfe:	4293      	cmp	r3, r2
 8036e00:	d00a      	beq.n	8036e18 <UART_SetConfig+0x9c>
 8036e02:	687b      	ldr	r3, [r7, #4]
 8036e04:	681b      	ldr	r3, [r3, #0]
 8036e06:	4ac3      	ldr	r2, [pc, #780]	; (8037114 <UART_SetConfig+0x398>)
 8036e08:	4293      	cmp	r3, r2
 8036e0a:	d005      	beq.n	8036e18 <UART_SetConfig+0x9c>
 8036e0c:	687b      	ldr	r3, [r7, #4]
 8036e0e:	681b      	ldr	r3, [r3, #0]
 8036e10:	4ac1      	ldr	r2, [pc, #772]	; (8037118 <UART_SetConfig+0x39c>)
 8036e12:	4293      	cmp	r3, r2
 8036e14:	f040 80bd 	bne.w	8036f92 <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8036e18:	f7fd f8c4 	bl	8033fa4 <HAL_RCC_GetPCLK2Freq>
 8036e1c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8036e1e:	68bb      	ldr	r3, [r7, #8]
 8036e20:	461d      	mov	r5, r3
 8036e22:	f04f 0600 	mov.w	r6, #0
 8036e26:	46a8      	mov	r8, r5
 8036e28:	46b1      	mov	r9, r6
 8036e2a:	eb18 0308 	adds.w	r3, r8, r8
 8036e2e:	eb49 0409 	adc.w	r4, r9, r9
 8036e32:	4698      	mov	r8, r3
 8036e34:	46a1      	mov	r9, r4
 8036e36:	eb18 0805 	adds.w	r8, r8, r5
 8036e3a:	eb49 0906 	adc.w	r9, r9, r6
 8036e3e:	f04f 0100 	mov.w	r1, #0
 8036e42:	f04f 0200 	mov.w	r2, #0
 8036e46:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8036e4a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8036e4e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8036e52:	4688      	mov	r8, r1
 8036e54:	4691      	mov	r9, r2
 8036e56:	eb18 0005 	adds.w	r0, r8, r5
 8036e5a:	eb49 0106 	adc.w	r1, r9, r6
 8036e5e:	687b      	ldr	r3, [r7, #4]
 8036e60:	685b      	ldr	r3, [r3, #4]
 8036e62:	461d      	mov	r5, r3
 8036e64:	f04f 0600 	mov.w	r6, #0
 8036e68:	196b      	adds	r3, r5, r5
 8036e6a:	eb46 0406 	adc.w	r4, r6, r6
 8036e6e:	461a      	mov	r2, r3
 8036e70:	4623      	mov	r3, r4
 8036e72:	f7e9 ff41 	bl	8020cf8 <__aeabi_uldivmod>
 8036e76:	4603      	mov	r3, r0
 8036e78:	460c      	mov	r4, r1
 8036e7a:	461a      	mov	r2, r3
 8036e7c:	4ba7      	ldr	r3, [pc, #668]	; (803711c <UART_SetConfig+0x3a0>)
 8036e7e:	fba3 2302 	umull	r2, r3, r3, r2
 8036e82:	095b      	lsrs	r3, r3, #5
 8036e84:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8036e88:	68bb      	ldr	r3, [r7, #8]
 8036e8a:	461d      	mov	r5, r3
 8036e8c:	f04f 0600 	mov.w	r6, #0
 8036e90:	46a9      	mov	r9, r5
 8036e92:	46b2      	mov	sl, r6
 8036e94:	eb19 0309 	adds.w	r3, r9, r9
 8036e98:	eb4a 040a 	adc.w	r4, sl, sl
 8036e9c:	4699      	mov	r9, r3
 8036e9e:	46a2      	mov	sl, r4
 8036ea0:	eb19 0905 	adds.w	r9, r9, r5
 8036ea4:	eb4a 0a06 	adc.w	sl, sl, r6
 8036ea8:	f04f 0100 	mov.w	r1, #0
 8036eac:	f04f 0200 	mov.w	r2, #0
 8036eb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8036eb4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8036eb8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8036ebc:	4689      	mov	r9, r1
 8036ebe:	4692      	mov	sl, r2
 8036ec0:	eb19 0005 	adds.w	r0, r9, r5
 8036ec4:	eb4a 0106 	adc.w	r1, sl, r6
 8036ec8:	687b      	ldr	r3, [r7, #4]
 8036eca:	685b      	ldr	r3, [r3, #4]
 8036ecc:	461d      	mov	r5, r3
 8036ece:	f04f 0600 	mov.w	r6, #0
 8036ed2:	196b      	adds	r3, r5, r5
 8036ed4:	eb46 0406 	adc.w	r4, r6, r6
 8036ed8:	461a      	mov	r2, r3
 8036eda:	4623      	mov	r3, r4
 8036edc:	f7e9 ff0c 	bl	8020cf8 <__aeabi_uldivmod>
 8036ee0:	4603      	mov	r3, r0
 8036ee2:	460c      	mov	r4, r1
 8036ee4:	461a      	mov	r2, r3
 8036ee6:	4b8d      	ldr	r3, [pc, #564]	; (803711c <UART_SetConfig+0x3a0>)
 8036ee8:	fba3 1302 	umull	r1, r3, r3, r2
 8036eec:	095b      	lsrs	r3, r3, #5
 8036eee:	2164      	movs	r1, #100	; 0x64
 8036ef0:	fb01 f303 	mul.w	r3, r1, r3
 8036ef4:	1ad3      	subs	r3, r2, r3
 8036ef6:	00db      	lsls	r3, r3, #3
 8036ef8:	3332      	adds	r3, #50	; 0x32
 8036efa:	4a88      	ldr	r2, [pc, #544]	; (803711c <UART_SetConfig+0x3a0>)
 8036efc:	fba2 2303 	umull	r2, r3, r2, r3
 8036f00:	095b      	lsrs	r3, r3, #5
 8036f02:	005b      	lsls	r3, r3, #1
 8036f04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8036f08:	4498      	add	r8, r3
 8036f0a:	68bb      	ldr	r3, [r7, #8]
 8036f0c:	461d      	mov	r5, r3
 8036f0e:	f04f 0600 	mov.w	r6, #0
 8036f12:	46a9      	mov	r9, r5
 8036f14:	46b2      	mov	sl, r6
 8036f16:	eb19 0309 	adds.w	r3, r9, r9
 8036f1a:	eb4a 040a 	adc.w	r4, sl, sl
 8036f1e:	4699      	mov	r9, r3
 8036f20:	46a2      	mov	sl, r4
 8036f22:	eb19 0905 	adds.w	r9, r9, r5
 8036f26:	eb4a 0a06 	adc.w	sl, sl, r6
 8036f2a:	f04f 0100 	mov.w	r1, #0
 8036f2e:	f04f 0200 	mov.w	r2, #0
 8036f32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8036f36:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8036f3a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8036f3e:	4689      	mov	r9, r1
 8036f40:	4692      	mov	sl, r2
 8036f42:	eb19 0005 	adds.w	r0, r9, r5
 8036f46:	eb4a 0106 	adc.w	r1, sl, r6
 8036f4a:	687b      	ldr	r3, [r7, #4]
 8036f4c:	685b      	ldr	r3, [r3, #4]
 8036f4e:	461d      	mov	r5, r3
 8036f50:	f04f 0600 	mov.w	r6, #0
 8036f54:	196b      	adds	r3, r5, r5
 8036f56:	eb46 0406 	adc.w	r4, r6, r6
 8036f5a:	461a      	mov	r2, r3
 8036f5c:	4623      	mov	r3, r4
 8036f5e:	f7e9 fecb 	bl	8020cf8 <__aeabi_uldivmod>
 8036f62:	4603      	mov	r3, r0
 8036f64:	460c      	mov	r4, r1
 8036f66:	461a      	mov	r2, r3
 8036f68:	4b6c      	ldr	r3, [pc, #432]	; (803711c <UART_SetConfig+0x3a0>)
 8036f6a:	fba3 1302 	umull	r1, r3, r3, r2
 8036f6e:	095b      	lsrs	r3, r3, #5
 8036f70:	2164      	movs	r1, #100	; 0x64
 8036f72:	fb01 f303 	mul.w	r3, r1, r3
 8036f76:	1ad3      	subs	r3, r2, r3
 8036f78:	00db      	lsls	r3, r3, #3
 8036f7a:	3332      	adds	r3, #50	; 0x32
 8036f7c:	4a67      	ldr	r2, [pc, #412]	; (803711c <UART_SetConfig+0x3a0>)
 8036f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8036f82:	095b      	lsrs	r3, r3, #5
 8036f84:	f003 0207 	and.w	r2, r3, #7
 8036f88:	687b      	ldr	r3, [r7, #4]
 8036f8a:	681b      	ldr	r3, [r3, #0]
 8036f8c:	4442      	add	r2, r8
 8036f8e:	609a      	str	r2, [r3, #8]
 8036f90:	e27d      	b.n	803748e <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8036f92:	f7fc fff3 	bl	8033f7c <HAL_RCC_GetPCLK1Freq>
 8036f96:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8036f98:	68bb      	ldr	r3, [r7, #8]
 8036f9a:	461d      	mov	r5, r3
 8036f9c:	f04f 0600 	mov.w	r6, #0
 8036fa0:	46a8      	mov	r8, r5
 8036fa2:	46b1      	mov	r9, r6
 8036fa4:	eb18 0308 	adds.w	r3, r8, r8
 8036fa8:	eb49 0409 	adc.w	r4, r9, r9
 8036fac:	4698      	mov	r8, r3
 8036fae:	46a1      	mov	r9, r4
 8036fb0:	eb18 0805 	adds.w	r8, r8, r5
 8036fb4:	eb49 0906 	adc.w	r9, r9, r6
 8036fb8:	f04f 0100 	mov.w	r1, #0
 8036fbc:	f04f 0200 	mov.w	r2, #0
 8036fc0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8036fc4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8036fc8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8036fcc:	4688      	mov	r8, r1
 8036fce:	4691      	mov	r9, r2
 8036fd0:	eb18 0005 	adds.w	r0, r8, r5
 8036fd4:	eb49 0106 	adc.w	r1, r9, r6
 8036fd8:	687b      	ldr	r3, [r7, #4]
 8036fda:	685b      	ldr	r3, [r3, #4]
 8036fdc:	461d      	mov	r5, r3
 8036fde:	f04f 0600 	mov.w	r6, #0
 8036fe2:	196b      	adds	r3, r5, r5
 8036fe4:	eb46 0406 	adc.w	r4, r6, r6
 8036fe8:	461a      	mov	r2, r3
 8036fea:	4623      	mov	r3, r4
 8036fec:	f7e9 fe84 	bl	8020cf8 <__aeabi_uldivmod>
 8036ff0:	4603      	mov	r3, r0
 8036ff2:	460c      	mov	r4, r1
 8036ff4:	461a      	mov	r2, r3
 8036ff6:	4b49      	ldr	r3, [pc, #292]	; (803711c <UART_SetConfig+0x3a0>)
 8036ff8:	fba3 2302 	umull	r2, r3, r3, r2
 8036ffc:	095b      	lsrs	r3, r3, #5
 8036ffe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8037002:	68bb      	ldr	r3, [r7, #8]
 8037004:	461d      	mov	r5, r3
 8037006:	f04f 0600 	mov.w	r6, #0
 803700a:	46a9      	mov	r9, r5
 803700c:	46b2      	mov	sl, r6
 803700e:	eb19 0309 	adds.w	r3, r9, r9
 8037012:	eb4a 040a 	adc.w	r4, sl, sl
 8037016:	4699      	mov	r9, r3
 8037018:	46a2      	mov	sl, r4
 803701a:	eb19 0905 	adds.w	r9, r9, r5
 803701e:	eb4a 0a06 	adc.w	sl, sl, r6
 8037022:	f04f 0100 	mov.w	r1, #0
 8037026:	f04f 0200 	mov.w	r2, #0
 803702a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 803702e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8037032:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8037036:	4689      	mov	r9, r1
 8037038:	4692      	mov	sl, r2
 803703a:	eb19 0005 	adds.w	r0, r9, r5
 803703e:	eb4a 0106 	adc.w	r1, sl, r6
 8037042:	687b      	ldr	r3, [r7, #4]
 8037044:	685b      	ldr	r3, [r3, #4]
 8037046:	461d      	mov	r5, r3
 8037048:	f04f 0600 	mov.w	r6, #0
 803704c:	196b      	adds	r3, r5, r5
 803704e:	eb46 0406 	adc.w	r4, r6, r6
 8037052:	461a      	mov	r2, r3
 8037054:	4623      	mov	r3, r4
 8037056:	f7e9 fe4f 	bl	8020cf8 <__aeabi_uldivmod>
 803705a:	4603      	mov	r3, r0
 803705c:	460c      	mov	r4, r1
 803705e:	461a      	mov	r2, r3
 8037060:	4b2e      	ldr	r3, [pc, #184]	; (803711c <UART_SetConfig+0x3a0>)
 8037062:	fba3 1302 	umull	r1, r3, r3, r2
 8037066:	095b      	lsrs	r3, r3, #5
 8037068:	2164      	movs	r1, #100	; 0x64
 803706a:	fb01 f303 	mul.w	r3, r1, r3
 803706e:	1ad3      	subs	r3, r2, r3
 8037070:	00db      	lsls	r3, r3, #3
 8037072:	3332      	adds	r3, #50	; 0x32
 8037074:	4a29      	ldr	r2, [pc, #164]	; (803711c <UART_SetConfig+0x3a0>)
 8037076:	fba2 2303 	umull	r2, r3, r2, r3
 803707a:	095b      	lsrs	r3, r3, #5
 803707c:	005b      	lsls	r3, r3, #1
 803707e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8037082:	4498      	add	r8, r3
 8037084:	68bb      	ldr	r3, [r7, #8]
 8037086:	461d      	mov	r5, r3
 8037088:	f04f 0600 	mov.w	r6, #0
 803708c:	46a9      	mov	r9, r5
 803708e:	46b2      	mov	sl, r6
 8037090:	eb19 0309 	adds.w	r3, r9, r9
 8037094:	eb4a 040a 	adc.w	r4, sl, sl
 8037098:	4699      	mov	r9, r3
 803709a:	46a2      	mov	sl, r4
 803709c:	eb19 0905 	adds.w	r9, r9, r5
 80370a0:	eb4a 0a06 	adc.w	sl, sl, r6
 80370a4:	f04f 0100 	mov.w	r1, #0
 80370a8:	f04f 0200 	mov.w	r2, #0
 80370ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80370b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80370b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80370b8:	4689      	mov	r9, r1
 80370ba:	4692      	mov	sl, r2
 80370bc:	eb19 0005 	adds.w	r0, r9, r5
 80370c0:	eb4a 0106 	adc.w	r1, sl, r6
 80370c4:	687b      	ldr	r3, [r7, #4]
 80370c6:	685b      	ldr	r3, [r3, #4]
 80370c8:	461d      	mov	r5, r3
 80370ca:	f04f 0600 	mov.w	r6, #0
 80370ce:	196b      	adds	r3, r5, r5
 80370d0:	eb46 0406 	adc.w	r4, r6, r6
 80370d4:	461a      	mov	r2, r3
 80370d6:	4623      	mov	r3, r4
 80370d8:	f7e9 fe0e 	bl	8020cf8 <__aeabi_uldivmod>
 80370dc:	4603      	mov	r3, r0
 80370de:	460c      	mov	r4, r1
 80370e0:	461a      	mov	r2, r3
 80370e2:	4b0e      	ldr	r3, [pc, #56]	; (803711c <UART_SetConfig+0x3a0>)
 80370e4:	fba3 1302 	umull	r1, r3, r3, r2
 80370e8:	095b      	lsrs	r3, r3, #5
 80370ea:	2164      	movs	r1, #100	; 0x64
 80370ec:	fb01 f303 	mul.w	r3, r1, r3
 80370f0:	1ad3      	subs	r3, r2, r3
 80370f2:	00db      	lsls	r3, r3, #3
 80370f4:	3332      	adds	r3, #50	; 0x32
 80370f6:	4a09      	ldr	r2, [pc, #36]	; (803711c <UART_SetConfig+0x3a0>)
 80370f8:	fba2 2303 	umull	r2, r3, r2, r3
 80370fc:	095b      	lsrs	r3, r3, #5
 80370fe:	f003 0207 	and.w	r2, r3, #7
 8037102:	687b      	ldr	r3, [r7, #4]
 8037104:	681b      	ldr	r3, [r3, #0]
 8037106:	4442      	add	r2, r8
 8037108:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 803710a:	e1c0      	b.n	803748e <UART_SetConfig+0x712>
 803710c:	40011000 	.word	0x40011000
 8037110:	40011400 	.word	0x40011400
 8037114:	40011800 	.word	0x40011800
 8037118:	40011c00 	.word	0x40011c00
 803711c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8037120:	687b      	ldr	r3, [r7, #4]
 8037122:	681b      	ldr	r3, [r3, #0]
 8037124:	4adc      	ldr	r2, [pc, #880]	; (8037498 <UART_SetConfig+0x71c>)
 8037126:	4293      	cmp	r3, r2
 8037128:	d00f      	beq.n	803714a <UART_SetConfig+0x3ce>
 803712a:	687b      	ldr	r3, [r7, #4]
 803712c:	681b      	ldr	r3, [r3, #0]
 803712e:	4adb      	ldr	r2, [pc, #876]	; (803749c <UART_SetConfig+0x720>)
 8037130:	4293      	cmp	r3, r2
 8037132:	d00a      	beq.n	803714a <UART_SetConfig+0x3ce>
 8037134:	687b      	ldr	r3, [r7, #4]
 8037136:	681b      	ldr	r3, [r3, #0]
 8037138:	4ad9      	ldr	r2, [pc, #868]	; (80374a0 <UART_SetConfig+0x724>)
 803713a:	4293      	cmp	r3, r2
 803713c:	d005      	beq.n	803714a <UART_SetConfig+0x3ce>
 803713e:	687b      	ldr	r3, [r7, #4]
 8037140:	681b      	ldr	r3, [r3, #0]
 8037142:	4ad8      	ldr	r2, [pc, #864]	; (80374a4 <UART_SetConfig+0x728>)
 8037144:	4293      	cmp	r3, r2
 8037146:	f040 80d1 	bne.w	80372ec <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 803714a:	f7fc ff2b 	bl	8033fa4 <HAL_RCC_GetPCLK2Freq>
 803714e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8037150:	68bb      	ldr	r3, [r7, #8]
 8037152:	469a      	mov	sl, r3
 8037154:	f04f 0b00 	mov.w	fp, #0
 8037158:	46d0      	mov	r8, sl
 803715a:	46d9      	mov	r9, fp
 803715c:	eb18 0308 	adds.w	r3, r8, r8
 8037160:	eb49 0409 	adc.w	r4, r9, r9
 8037164:	4698      	mov	r8, r3
 8037166:	46a1      	mov	r9, r4
 8037168:	eb18 080a 	adds.w	r8, r8, sl
 803716c:	eb49 090b 	adc.w	r9, r9, fp
 8037170:	f04f 0100 	mov.w	r1, #0
 8037174:	f04f 0200 	mov.w	r2, #0
 8037178:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 803717c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8037180:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8037184:	4688      	mov	r8, r1
 8037186:	4691      	mov	r9, r2
 8037188:	eb1a 0508 	adds.w	r5, sl, r8
 803718c:	eb4b 0609 	adc.w	r6, fp, r9
 8037190:	687b      	ldr	r3, [r7, #4]
 8037192:	685b      	ldr	r3, [r3, #4]
 8037194:	4619      	mov	r1, r3
 8037196:	f04f 0200 	mov.w	r2, #0
 803719a:	f04f 0300 	mov.w	r3, #0
 803719e:	f04f 0400 	mov.w	r4, #0
 80371a2:	0094      	lsls	r4, r2, #2
 80371a4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80371a8:	008b      	lsls	r3, r1, #2
 80371aa:	461a      	mov	r2, r3
 80371ac:	4623      	mov	r3, r4
 80371ae:	4628      	mov	r0, r5
 80371b0:	4631      	mov	r1, r6
 80371b2:	f7e9 fda1 	bl	8020cf8 <__aeabi_uldivmod>
 80371b6:	4603      	mov	r3, r0
 80371b8:	460c      	mov	r4, r1
 80371ba:	461a      	mov	r2, r3
 80371bc:	4bba      	ldr	r3, [pc, #744]	; (80374a8 <UART_SetConfig+0x72c>)
 80371be:	fba3 2302 	umull	r2, r3, r3, r2
 80371c2:	095b      	lsrs	r3, r3, #5
 80371c4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80371c8:	68bb      	ldr	r3, [r7, #8]
 80371ca:	469b      	mov	fp, r3
 80371cc:	f04f 0c00 	mov.w	ip, #0
 80371d0:	46d9      	mov	r9, fp
 80371d2:	46e2      	mov	sl, ip
 80371d4:	eb19 0309 	adds.w	r3, r9, r9
 80371d8:	eb4a 040a 	adc.w	r4, sl, sl
 80371dc:	4699      	mov	r9, r3
 80371de:	46a2      	mov	sl, r4
 80371e0:	eb19 090b 	adds.w	r9, r9, fp
 80371e4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80371e8:	f04f 0100 	mov.w	r1, #0
 80371ec:	f04f 0200 	mov.w	r2, #0
 80371f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80371f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80371f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80371fc:	4689      	mov	r9, r1
 80371fe:	4692      	mov	sl, r2
 8037200:	eb1b 0509 	adds.w	r5, fp, r9
 8037204:	eb4c 060a 	adc.w	r6, ip, sl
 8037208:	687b      	ldr	r3, [r7, #4]
 803720a:	685b      	ldr	r3, [r3, #4]
 803720c:	4619      	mov	r1, r3
 803720e:	f04f 0200 	mov.w	r2, #0
 8037212:	f04f 0300 	mov.w	r3, #0
 8037216:	f04f 0400 	mov.w	r4, #0
 803721a:	0094      	lsls	r4, r2, #2
 803721c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8037220:	008b      	lsls	r3, r1, #2
 8037222:	461a      	mov	r2, r3
 8037224:	4623      	mov	r3, r4
 8037226:	4628      	mov	r0, r5
 8037228:	4631      	mov	r1, r6
 803722a:	f7e9 fd65 	bl	8020cf8 <__aeabi_uldivmod>
 803722e:	4603      	mov	r3, r0
 8037230:	460c      	mov	r4, r1
 8037232:	461a      	mov	r2, r3
 8037234:	4b9c      	ldr	r3, [pc, #624]	; (80374a8 <UART_SetConfig+0x72c>)
 8037236:	fba3 1302 	umull	r1, r3, r3, r2
 803723a:	095b      	lsrs	r3, r3, #5
 803723c:	2164      	movs	r1, #100	; 0x64
 803723e:	fb01 f303 	mul.w	r3, r1, r3
 8037242:	1ad3      	subs	r3, r2, r3
 8037244:	011b      	lsls	r3, r3, #4
 8037246:	3332      	adds	r3, #50	; 0x32
 8037248:	4a97      	ldr	r2, [pc, #604]	; (80374a8 <UART_SetConfig+0x72c>)
 803724a:	fba2 2303 	umull	r2, r3, r2, r3
 803724e:	095b      	lsrs	r3, r3, #5
 8037250:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8037254:	4498      	add	r8, r3
 8037256:	68bb      	ldr	r3, [r7, #8]
 8037258:	469b      	mov	fp, r3
 803725a:	f04f 0c00 	mov.w	ip, #0
 803725e:	46d9      	mov	r9, fp
 8037260:	46e2      	mov	sl, ip
 8037262:	eb19 0309 	adds.w	r3, r9, r9
 8037266:	eb4a 040a 	adc.w	r4, sl, sl
 803726a:	4699      	mov	r9, r3
 803726c:	46a2      	mov	sl, r4
 803726e:	eb19 090b 	adds.w	r9, r9, fp
 8037272:	eb4a 0a0c 	adc.w	sl, sl, ip
 8037276:	f04f 0100 	mov.w	r1, #0
 803727a:	f04f 0200 	mov.w	r2, #0
 803727e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8037282:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8037286:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 803728a:	4689      	mov	r9, r1
 803728c:	4692      	mov	sl, r2
 803728e:	eb1b 0509 	adds.w	r5, fp, r9
 8037292:	eb4c 060a 	adc.w	r6, ip, sl
 8037296:	687b      	ldr	r3, [r7, #4]
 8037298:	685b      	ldr	r3, [r3, #4]
 803729a:	4619      	mov	r1, r3
 803729c:	f04f 0200 	mov.w	r2, #0
 80372a0:	f04f 0300 	mov.w	r3, #0
 80372a4:	f04f 0400 	mov.w	r4, #0
 80372a8:	0094      	lsls	r4, r2, #2
 80372aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80372ae:	008b      	lsls	r3, r1, #2
 80372b0:	461a      	mov	r2, r3
 80372b2:	4623      	mov	r3, r4
 80372b4:	4628      	mov	r0, r5
 80372b6:	4631      	mov	r1, r6
 80372b8:	f7e9 fd1e 	bl	8020cf8 <__aeabi_uldivmod>
 80372bc:	4603      	mov	r3, r0
 80372be:	460c      	mov	r4, r1
 80372c0:	461a      	mov	r2, r3
 80372c2:	4b79      	ldr	r3, [pc, #484]	; (80374a8 <UART_SetConfig+0x72c>)
 80372c4:	fba3 1302 	umull	r1, r3, r3, r2
 80372c8:	095b      	lsrs	r3, r3, #5
 80372ca:	2164      	movs	r1, #100	; 0x64
 80372cc:	fb01 f303 	mul.w	r3, r1, r3
 80372d0:	1ad3      	subs	r3, r2, r3
 80372d2:	011b      	lsls	r3, r3, #4
 80372d4:	3332      	adds	r3, #50	; 0x32
 80372d6:	4a74      	ldr	r2, [pc, #464]	; (80374a8 <UART_SetConfig+0x72c>)
 80372d8:	fba2 2303 	umull	r2, r3, r2, r3
 80372dc:	095b      	lsrs	r3, r3, #5
 80372de:	f003 020f 	and.w	r2, r3, #15
 80372e2:	687b      	ldr	r3, [r7, #4]
 80372e4:	681b      	ldr	r3, [r3, #0]
 80372e6:	4442      	add	r2, r8
 80372e8:	609a      	str	r2, [r3, #8]
 80372ea:	e0d0      	b.n	803748e <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 80372ec:	f7fc fe46 	bl	8033f7c <HAL_RCC_GetPCLK1Freq>
 80372f0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80372f2:	68bb      	ldr	r3, [r7, #8]
 80372f4:	469a      	mov	sl, r3
 80372f6:	f04f 0b00 	mov.w	fp, #0
 80372fa:	46d0      	mov	r8, sl
 80372fc:	46d9      	mov	r9, fp
 80372fe:	eb18 0308 	adds.w	r3, r8, r8
 8037302:	eb49 0409 	adc.w	r4, r9, r9
 8037306:	4698      	mov	r8, r3
 8037308:	46a1      	mov	r9, r4
 803730a:	eb18 080a 	adds.w	r8, r8, sl
 803730e:	eb49 090b 	adc.w	r9, r9, fp
 8037312:	f04f 0100 	mov.w	r1, #0
 8037316:	f04f 0200 	mov.w	r2, #0
 803731a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 803731e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8037322:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8037326:	4688      	mov	r8, r1
 8037328:	4691      	mov	r9, r2
 803732a:	eb1a 0508 	adds.w	r5, sl, r8
 803732e:	eb4b 0609 	adc.w	r6, fp, r9
 8037332:	687b      	ldr	r3, [r7, #4]
 8037334:	685b      	ldr	r3, [r3, #4]
 8037336:	4619      	mov	r1, r3
 8037338:	f04f 0200 	mov.w	r2, #0
 803733c:	f04f 0300 	mov.w	r3, #0
 8037340:	f04f 0400 	mov.w	r4, #0
 8037344:	0094      	lsls	r4, r2, #2
 8037346:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 803734a:	008b      	lsls	r3, r1, #2
 803734c:	461a      	mov	r2, r3
 803734e:	4623      	mov	r3, r4
 8037350:	4628      	mov	r0, r5
 8037352:	4631      	mov	r1, r6
 8037354:	f7e9 fcd0 	bl	8020cf8 <__aeabi_uldivmod>
 8037358:	4603      	mov	r3, r0
 803735a:	460c      	mov	r4, r1
 803735c:	461a      	mov	r2, r3
 803735e:	4b52      	ldr	r3, [pc, #328]	; (80374a8 <UART_SetConfig+0x72c>)
 8037360:	fba3 2302 	umull	r2, r3, r3, r2
 8037364:	095b      	lsrs	r3, r3, #5
 8037366:	ea4f 1803 	mov.w	r8, r3, lsl #4
 803736a:	68bb      	ldr	r3, [r7, #8]
 803736c:	469b      	mov	fp, r3
 803736e:	f04f 0c00 	mov.w	ip, #0
 8037372:	46d9      	mov	r9, fp
 8037374:	46e2      	mov	sl, ip
 8037376:	eb19 0309 	adds.w	r3, r9, r9
 803737a:	eb4a 040a 	adc.w	r4, sl, sl
 803737e:	4699      	mov	r9, r3
 8037380:	46a2      	mov	sl, r4
 8037382:	eb19 090b 	adds.w	r9, r9, fp
 8037386:	eb4a 0a0c 	adc.w	sl, sl, ip
 803738a:	f04f 0100 	mov.w	r1, #0
 803738e:	f04f 0200 	mov.w	r2, #0
 8037392:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8037396:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 803739a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 803739e:	4689      	mov	r9, r1
 80373a0:	4692      	mov	sl, r2
 80373a2:	eb1b 0509 	adds.w	r5, fp, r9
 80373a6:	eb4c 060a 	adc.w	r6, ip, sl
 80373aa:	687b      	ldr	r3, [r7, #4]
 80373ac:	685b      	ldr	r3, [r3, #4]
 80373ae:	4619      	mov	r1, r3
 80373b0:	f04f 0200 	mov.w	r2, #0
 80373b4:	f04f 0300 	mov.w	r3, #0
 80373b8:	f04f 0400 	mov.w	r4, #0
 80373bc:	0094      	lsls	r4, r2, #2
 80373be:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80373c2:	008b      	lsls	r3, r1, #2
 80373c4:	461a      	mov	r2, r3
 80373c6:	4623      	mov	r3, r4
 80373c8:	4628      	mov	r0, r5
 80373ca:	4631      	mov	r1, r6
 80373cc:	f7e9 fc94 	bl	8020cf8 <__aeabi_uldivmod>
 80373d0:	4603      	mov	r3, r0
 80373d2:	460c      	mov	r4, r1
 80373d4:	461a      	mov	r2, r3
 80373d6:	4b34      	ldr	r3, [pc, #208]	; (80374a8 <UART_SetConfig+0x72c>)
 80373d8:	fba3 1302 	umull	r1, r3, r3, r2
 80373dc:	095b      	lsrs	r3, r3, #5
 80373de:	2164      	movs	r1, #100	; 0x64
 80373e0:	fb01 f303 	mul.w	r3, r1, r3
 80373e4:	1ad3      	subs	r3, r2, r3
 80373e6:	011b      	lsls	r3, r3, #4
 80373e8:	3332      	adds	r3, #50	; 0x32
 80373ea:	4a2f      	ldr	r2, [pc, #188]	; (80374a8 <UART_SetConfig+0x72c>)
 80373ec:	fba2 2303 	umull	r2, r3, r2, r3
 80373f0:	095b      	lsrs	r3, r3, #5
 80373f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80373f6:	4498      	add	r8, r3
 80373f8:	68bb      	ldr	r3, [r7, #8]
 80373fa:	469b      	mov	fp, r3
 80373fc:	f04f 0c00 	mov.w	ip, #0
 8037400:	46d9      	mov	r9, fp
 8037402:	46e2      	mov	sl, ip
 8037404:	eb19 0309 	adds.w	r3, r9, r9
 8037408:	eb4a 040a 	adc.w	r4, sl, sl
 803740c:	4699      	mov	r9, r3
 803740e:	46a2      	mov	sl, r4
 8037410:	eb19 090b 	adds.w	r9, r9, fp
 8037414:	eb4a 0a0c 	adc.w	sl, sl, ip
 8037418:	f04f 0100 	mov.w	r1, #0
 803741c:	f04f 0200 	mov.w	r2, #0
 8037420:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8037424:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8037428:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 803742c:	4689      	mov	r9, r1
 803742e:	4692      	mov	sl, r2
 8037430:	eb1b 0509 	adds.w	r5, fp, r9
 8037434:	eb4c 060a 	adc.w	r6, ip, sl
 8037438:	687b      	ldr	r3, [r7, #4]
 803743a:	685b      	ldr	r3, [r3, #4]
 803743c:	4619      	mov	r1, r3
 803743e:	f04f 0200 	mov.w	r2, #0
 8037442:	f04f 0300 	mov.w	r3, #0
 8037446:	f04f 0400 	mov.w	r4, #0
 803744a:	0094      	lsls	r4, r2, #2
 803744c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8037450:	008b      	lsls	r3, r1, #2
 8037452:	461a      	mov	r2, r3
 8037454:	4623      	mov	r3, r4
 8037456:	4628      	mov	r0, r5
 8037458:	4631      	mov	r1, r6
 803745a:	f7e9 fc4d 	bl	8020cf8 <__aeabi_uldivmod>
 803745e:	4603      	mov	r3, r0
 8037460:	460c      	mov	r4, r1
 8037462:	461a      	mov	r2, r3
 8037464:	4b10      	ldr	r3, [pc, #64]	; (80374a8 <UART_SetConfig+0x72c>)
 8037466:	fba3 1302 	umull	r1, r3, r3, r2
 803746a:	095b      	lsrs	r3, r3, #5
 803746c:	2164      	movs	r1, #100	; 0x64
 803746e:	fb01 f303 	mul.w	r3, r1, r3
 8037472:	1ad3      	subs	r3, r2, r3
 8037474:	011b      	lsls	r3, r3, #4
 8037476:	3332      	adds	r3, #50	; 0x32
 8037478:	4a0b      	ldr	r2, [pc, #44]	; (80374a8 <UART_SetConfig+0x72c>)
 803747a:	fba2 2303 	umull	r2, r3, r2, r3
 803747e:	095b      	lsrs	r3, r3, #5
 8037480:	f003 020f 	and.w	r2, r3, #15
 8037484:	687b      	ldr	r3, [r7, #4]
 8037486:	681b      	ldr	r3, [r3, #0]
 8037488:	4442      	add	r2, r8
 803748a:	609a      	str	r2, [r3, #8]
}
 803748c:	e7ff      	b.n	803748e <UART_SetConfig+0x712>
 803748e:	bf00      	nop
 8037490:	3714      	adds	r7, #20
 8037492:	46bd      	mov	sp, r7
 8037494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8037498:	40011000 	.word	0x40011000
 803749c:	40011400 	.word	0x40011400
 80374a0:	40011800 	.word	0x40011800
 80374a4:	40011c00 	.word	0x40011c00
 80374a8:	51eb851f 	.word	0x51eb851f

080374ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80374ac:	b480      	push	{r7}
 80374ae:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80374b0:	bf00      	nop
 80374b2:	46bd      	mov	sp, r7
 80374b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80374b8:	4770      	bx	lr
	...

080374bc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80374bc:	b480      	push	{r7}
 80374be:	b085      	sub	sp, #20
 80374c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80374c2:	f3ef 8305 	mrs	r3, IPSR
 80374c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80374c8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80374ca:	2b00      	cmp	r3, #0
 80374cc:	d10f      	bne.n	80374ee <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80374ce:	f3ef 8310 	mrs	r3, PRIMASK
 80374d2:	607b      	str	r3, [r7, #4]
  return(result);
 80374d4:	687b      	ldr	r3, [r7, #4]
 80374d6:	2b00      	cmp	r3, #0
 80374d8:	d105      	bne.n	80374e6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80374da:	f3ef 8311 	mrs	r3, BASEPRI
 80374de:	603b      	str	r3, [r7, #0]
  return(result);
 80374e0:	683b      	ldr	r3, [r7, #0]
 80374e2:	2b00      	cmp	r3, #0
 80374e4:	d007      	beq.n	80374f6 <osKernelInitialize+0x3a>
 80374e6:	4b0e      	ldr	r3, [pc, #56]	; (8037520 <osKernelInitialize+0x64>)
 80374e8:	681b      	ldr	r3, [r3, #0]
 80374ea:	2b02      	cmp	r3, #2
 80374ec:	d103      	bne.n	80374f6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80374ee:	f06f 0305 	mvn.w	r3, #5
 80374f2:	60fb      	str	r3, [r7, #12]
 80374f4:	e00c      	b.n	8037510 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80374f6:	4b0a      	ldr	r3, [pc, #40]	; (8037520 <osKernelInitialize+0x64>)
 80374f8:	681b      	ldr	r3, [r3, #0]
 80374fa:	2b00      	cmp	r3, #0
 80374fc:	d105      	bne.n	803750a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80374fe:	4b08      	ldr	r3, [pc, #32]	; (8037520 <osKernelInitialize+0x64>)
 8037500:	2201      	movs	r2, #1
 8037502:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8037504:	2300      	movs	r3, #0
 8037506:	60fb      	str	r3, [r7, #12]
 8037508:	e002      	b.n	8037510 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 803750a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 803750e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8037510:	68fb      	ldr	r3, [r7, #12]
}
 8037512:	4618      	mov	r0, r3
 8037514:	3714      	adds	r7, #20
 8037516:	46bd      	mov	sp, r7
 8037518:	f85d 7b04 	ldr.w	r7, [sp], #4
 803751c:	4770      	bx	lr
 803751e:	bf00      	nop
 8037520:	20000f34 	.word	0x20000f34

08037524 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8037524:	b580      	push	{r7, lr}
 8037526:	b082      	sub	sp, #8
 8037528:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 803752a:	f003 f831 	bl	803a590 <xTaskGetSchedulerState>
 803752e:	4603      	mov	r3, r0
 8037530:	2b00      	cmp	r3, #0
 8037532:	d004      	beq.n	803753e <osKernelGetState+0x1a>
 8037534:	2b02      	cmp	r3, #2
 8037536:	d105      	bne.n	8037544 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8037538:	2302      	movs	r3, #2
 803753a:	607b      	str	r3, [r7, #4]
      break;
 803753c:	e00c      	b.n	8037558 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 803753e:	2303      	movs	r3, #3
 8037540:	607b      	str	r3, [r7, #4]
      break;
 8037542:	e009      	b.n	8037558 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8037544:	4b07      	ldr	r3, [pc, #28]	; (8037564 <osKernelGetState+0x40>)
 8037546:	681b      	ldr	r3, [r3, #0]
 8037548:	2b01      	cmp	r3, #1
 803754a:	d102      	bne.n	8037552 <osKernelGetState+0x2e>
        state = osKernelReady;
 803754c:	2301      	movs	r3, #1
 803754e:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8037550:	e001      	b.n	8037556 <osKernelGetState+0x32>
        state = osKernelInactive;
 8037552:	2300      	movs	r3, #0
 8037554:	607b      	str	r3, [r7, #4]
      break;
 8037556:	bf00      	nop
  }

  return (state);
 8037558:	687b      	ldr	r3, [r7, #4]
}
 803755a:	4618      	mov	r0, r3
 803755c:	3708      	adds	r7, #8
 803755e:	46bd      	mov	sp, r7
 8037560:	bd80      	pop	{r7, pc}
 8037562:	bf00      	nop
 8037564:	20000f34 	.word	0x20000f34

08037568 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8037568:	b580      	push	{r7, lr}
 803756a:	b084      	sub	sp, #16
 803756c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 803756e:	f3ef 8305 	mrs	r3, IPSR
 8037572:	60bb      	str	r3, [r7, #8]
  return(result);
 8037574:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8037576:	2b00      	cmp	r3, #0
 8037578:	d10f      	bne.n	803759a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 803757a:	f3ef 8310 	mrs	r3, PRIMASK
 803757e:	607b      	str	r3, [r7, #4]
  return(result);
 8037580:	687b      	ldr	r3, [r7, #4]
 8037582:	2b00      	cmp	r3, #0
 8037584:	d105      	bne.n	8037592 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8037586:	f3ef 8311 	mrs	r3, BASEPRI
 803758a:	603b      	str	r3, [r7, #0]
  return(result);
 803758c:	683b      	ldr	r3, [r7, #0]
 803758e:	2b00      	cmp	r3, #0
 8037590:	d007      	beq.n	80375a2 <osKernelStart+0x3a>
 8037592:	4b0f      	ldr	r3, [pc, #60]	; (80375d0 <osKernelStart+0x68>)
 8037594:	681b      	ldr	r3, [r3, #0]
 8037596:	2b02      	cmp	r3, #2
 8037598:	d103      	bne.n	80375a2 <osKernelStart+0x3a>
    stat = osErrorISR;
 803759a:	f06f 0305 	mvn.w	r3, #5
 803759e:	60fb      	str	r3, [r7, #12]
 80375a0:	e010      	b.n	80375c4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80375a2:	4b0b      	ldr	r3, [pc, #44]	; (80375d0 <osKernelStart+0x68>)
 80375a4:	681b      	ldr	r3, [r3, #0]
 80375a6:	2b01      	cmp	r3, #1
 80375a8:	d109      	bne.n	80375be <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80375aa:	f7ff ff7f 	bl	80374ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80375ae:	4b08      	ldr	r3, [pc, #32]	; (80375d0 <osKernelStart+0x68>)
 80375b0:	2202      	movs	r2, #2
 80375b2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80375b4:	f002 faea 	bl	8039b8c <vTaskStartScheduler>
      stat = osOK;
 80375b8:	2300      	movs	r3, #0
 80375ba:	60fb      	str	r3, [r7, #12]
 80375bc:	e002      	b.n	80375c4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80375be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80375c2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80375c4:	68fb      	ldr	r3, [r7, #12]
}
 80375c6:	4618      	mov	r0, r3
 80375c8:	3710      	adds	r7, #16
 80375ca:	46bd      	mov	sp, r7
 80375cc:	bd80      	pop	{r7, pc}
 80375ce:	bf00      	nop
 80375d0:	20000f34 	.word	0x20000f34

080375d4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80375d4:	b580      	push	{r7, lr}
 80375d6:	b084      	sub	sp, #16
 80375d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80375da:	f3ef 8305 	mrs	r3, IPSR
 80375de:	60bb      	str	r3, [r7, #8]
  return(result);
 80375e0:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 80375e2:	2b00      	cmp	r3, #0
 80375e4:	d10f      	bne.n	8037606 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80375e6:	f3ef 8310 	mrs	r3, PRIMASK
 80375ea:	607b      	str	r3, [r7, #4]
  return(result);
 80375ec:	687b      	ldr	r3, [r7, #4]
 80375ee:	2b00      	cmp	r3, #0
 80375f0:	d105      	bne.n	80375fe <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80375f2:	f3ef 8311 	mrs	r3, BASEPRI
 80375f6:	603b      	str	r3, [r7, #0]
  return(result);
 80375f8:	683b      	ldr	r3, [r7, #0]
 80375fa:	2b00      	cmp	r3, #0
 80375fc:	d007      	beq.n	803760e <osKernelGetTickCount+0x3a>
 80375fe:	4b08      	ldr	r3, [pc, #32]	; (8037620 <osKernelGetTickCount+0x4c>)
 8037600:	681b      	ldr	r3, [r3, #0]
 8037602:	2b02      	cmp	r3, #2
 8037604:	d103      	bne.n	803760e <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8037606:	f002 fbdf 	bl	8039dc8 <xTaskGetTickCountFromISR>
 803760a:	60f8      	str	r0, [r7, #12]
 803760c:	e002      	b.n	8037614 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 803760e:	f002 fbcb 	bl	8039da8 <xTaskGetTickCount>
 8037612:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8037614:	68fb      	ldr	r3, [r7, #12]
}
 8037616:	4618      	mov	r0, r3
 8037618:	3710      	adds	r7, #16
 803761a:	46bd      	mov	sp, r7
 803761c:	bd80      	pop	{r7, pc}
 803761e:	bf00      	nop
 8037620:	20000f34 	.word	0x20000f34

08037624 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8037624:	b580      	push	{r7, lr}
 8037626:	b090      	sub	sp, #64	; 0x40
 8037628:	af04      	add	r7, sp, #16
 803762a:	60f8      	str	r0, [r7, #12]
 803762c:	60b9      	str	r1, [r7, #8]
 803762e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8037630:	2300      	movs	r3, #0
 8037632:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8037634:	f3ef 8305 	mrs	r3, IPSR
 8037638:	61fb      	str	r3, [r7, #28]
  return(result);
 803763a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 803763c:	2b00      	cmp	r3, #0
 803763e:	f040 808f 	bne.w	8037760 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8037642:	f3ef 8310 	mrs	r3, PRIMASK
 8037646:	61bb      	str	r3, [r7, #24]
  return(result);
 8037648:	69bb      	ldr	r3, [r7, #24]
 803764a:	2b00      	cmp	r3, #0
 803764c:	d105      	bne.n	803765a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 803764e:	f3ef 8311 	mrs	r3, BASEPRI
 8037652:	617b      	str	r3, [r7, #20]
  return(result);
 8037654:	697b      	ldr	r3, [r7, #20]
 8037656:	2b00      	cmp	r3, #0
 8037658:	d003      	beq.n	8037662 <osThreadNew+0x3e>
 803765a:	4b44      	ldr	r3, [pc, #272]	; (803776c <osThreadNew+0x148>)
 803765c:	681b      	ldr	r3, [r3, #0]
 803765e:	2b02      	cmp	r3, #2
 8037660:	d07e      	beq.n	8037760 <osThreadNew+0x13c>
 8037662:	68fb      	ldr	r3, [r7, #12]
 8037664:	2b00      	cmp	r3, #0
 8037666:	d07b      	beq.n	8037760 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8037668:	2380      	movs	r3, #128	; 0x80
 803766a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 803766c:	2318      	movs	r3, #24
 803766e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8037670:	2300      	movs	r3, #0
 8037672:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8037674:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8037678:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 803767a:	687b      	ldr	r3, [r7, #4]
 803767c:	2b00      	cmp	r3, #0
 803767e:	d045      	beq.n	803770c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8037680:	687b      	ldr	r3, [r7, #4]
 8037682:	681b      	ldr	r3, [r3, #0]
 8037684:	2b00      	cmp	r3, #0
 8037686:	d002      	beq.n	803768e <osThreadNew+0x6a>
        name = attr->name;
 8037688:	687b      	ldr	r3, [r7, #4]
 803768a:	681b      	ldr	r3, [r3, #0]
 803768c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 803768e:	687b      	ldr	r3, [r7, #4]
 8037690:	699b      	ldr	r3, [r3, #24]
 8037692:	2b00      	cmp	r3, #0
 8037694:	d002      	beq.n	803769c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8037696:	687b      	ldr	r3, [r7, #4]
 8037698:	699b      	ldr	r3, [r3, #24]
 803769a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 803769c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803769e:	2b00      	cmp	r3, #0
 80376a0:	d008      	beq.n	80376b4 <osThreadNew+0x90>
 80376a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80376a4:	2b38      	cmp	r3, #56	; 0x38
 80376a6:	d805      	bhi.n	80376b4 <osThreadNew+0x90>
 80376a8:	687b      	ldr	r3, [r7, #4]
 80376aa:	685b      	ldr	r3, [r3, #4]
 80376ac:	f003 0301 	and.w	r3, r3, #1
 80376b0:	2b00      	cmp	r3, #0
 80376b2:	d001      	beq.n	80376b8 <osThreadNew+0x94>
        return (NULL);
 80376b4:	2300      	movs	r3, #0
 80376b6:	e054      	b.n	8037762 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80376b8:	687b      	ldr	r3, [r7, #4]
 80376ba:	695b      	ldr	r3, [r3, #20]
 80376bc:	2b00      	cmp	r3, #0
 80376be:	d003      	beq.n	80376c8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80376c0:	687b      	ldr	r3, [r7, #4]
 80376c2:	695b      	ldr	r3, [r3, #20]
 80376c4:	089b      	lsrs	r3, r3, #2
 80376c6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80376c8:	687b      	ldr	r3, [r7, #4]
 80376ca:	689b      	ldr	r3, [r3, #8]
 80376cc:	2b00      	cmp	r3, #0
 80376ce:	d00e      	beq.n	80376ee <osThreadNew+0xca>
 80376d0:	687b      	ldr	r3, [r7, #4]
 80376d2:	68db      	ldr	r3, [r3, #12]
 80376d4:	2b5f      	cmp	r3, #95	; 0x5f
 80376d6:	d90a      	bls.n	80376ee <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80376d8:	687b      	ldr	r3, [r7, #4]
 80376da:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80376dc:	2b00      	cmp	r3, #0
 80376de:	d006      	beq.n	80376ee <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80376e0:	687b      	ldr	r3, [r7, #4]
 80376e2:	695b      	ldr	r3, [r3, #20]
 80376e4:	2b00      	cmp	r3, #0
 80376e6:	d002      	beq.n	80376ee <osThreadNew+0xca>
        mem = 1;
 80376e8:	2301      	movs	r3, #1
 80376ea:	623b      	str	r3, [r7, #32]
 80376ec:	e010      	b.n	8037710 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80376ee:	687b      	ldr	r3, [r7, #4]
 80376f0:	689b      	ldr	r3, [r3, #8]
 80376f2:	2b00      	cmp	r3, #0
 80376f4:	d10c      	bne.n	8037710 <osThreadNew+0xec>
 80376f6:	687b      	ldr	r3, [r7, #4]
 80376f8:	68db      	ldr	r3, [r3, #12]
 80376fa:	2b00      	cmp	r3, #0
 80376fc:	d108      	bne.n	8037710 <osThreadNew+0xec>
 80376fe:	687b      	ldr	r3, [r7, #4]
 8037700:	691b      	ldr	r3, [r3, #16]
 8037702:	2b00      	cmp	r3, #0
 8037704:	d104      	bne.n	8037710 <osThreadNew+0xec>
          mem = 0;
 8037706:	2300      	movs	r3, #0
 8037708:	623b      	str	r3, [r7, #32]
 803770a:	e001      	b.n	8037710 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 803770c:	2300      	movs	r3, #0
 803770e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8037710:	6a3b      	ldr	r3, [r7, #32]
 8037712:	2b01      	cmp	r3, #1
 8037714:	d110      	bne.n	8037738 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8037716:	687b      	ldr	r3, [r7, #4]
 8037718:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 803771a:	687a      	ldr	r2, [r7, #4]
 803771c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 803771e:	9202      	str	r2, [sp, #8]
 8037720:	9301      	str	r3, [sp, #4]
 8037722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037724:	9300      	str	r3, [sp, #0]
 8037726:	68bb      	ldr	r3, [r7, #8]
 8037728:	6aba      	ldr	r2, [r7, #40]	; 0x28
 803772a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 803772c:	68f8      	ldr	r0, [r7, #12]
 803772e:	f001 ffdb 	bl	80396e8 <xTaskCreateStatic>
 8037732:	4603      	mov	r3, r0
 8037734:	613b      	str	r3, [r7, #16]
 8037736:	e013      	b.n	8037760 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8037738:	6a3b      	ldr	r3, [r7, #32]
 803773a:	2b00      	cmp	r3, #0
 803773c:	d110      	bne.n	8037760 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 803773e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8037740:	b29a      	uxth	r2, r3
 8037742:	f107 0310 	add.w	r3, r7, #16
 8037746:	9301      	str	r3, [sp, #4]
 8037748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803774a:	9300      	str	r3, [sp, #0]
 803774c:	68bb      	ldr	r3, [r7, #8]
 803774e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8037750:	68f8      	ldr	r0, [r7, #12]
 8037752:	f002 f823 	bl	803979c <xTaskCreate>
 8037756:	4603      	mov	r3, r0
 8037758:	2b01      	cmp	r3, #1
 803775a:	d001      	beq.n	8037760 <osThreadNew+0x13c>
          hTask = NULL;
 803775c:	2300      	movs	r3, #0
 803775e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8037760:	693b      	ldr	r3, [r7, #16]
}
 8037762:	4618      	mov	r0, r3
 8037764:	3730      	adds	r7, #48	; 0x30
 8037766:	46bd      	mov	sp, r7
 8037768:	bd80      	pop	{r7, pc}
 803776a:	bf00      	nop
 803776c:	20000f34 	.word	0x20000f34

08037770 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8037770:	b580      	push	{r7, lr}
 8037772:	b08a      	sub	sp, #40	; 0x28
 8037774:	af02      	add	r7, sp, #8
 8037776:	6078      	str	r0, [r7, #4]
 8037778:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 803777a:	687b      	ldr	r3, [r7, #4]
 803777c:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 803777e:	69fb      	ldr	r3, [r7, #28]
 8037780:	2b00      	cmp	r3, #0
 8037782:	d002      	beq.n	803778a <osThreadFlagsSet+0x1a>
 8037784:	683b      	ldr	r3, [r7, #0]
 8037786:	2b00      	cmp	r3, #0
 8037788:	da03      	bge.n	8037792 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 803778a:	f06f 0303 	mvn.w	r3, #3
 803778e:	60fb      	str	r3, [r7, #12]
 8037790:	e046      	b.n	8037820 <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 8037792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8037796:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8037798:	f3ef 8305 	mrs	r3, IPSR
 803779c:	61bb      	str	r3, [r7, #24]
  return(result);
 803779e:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 80377a0:	2b00      	cmp	r3, #0
 80377a2:	d10f      	bne.n	80377c4 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80377a4:	f3ef 8310 	mrs	r3, PRIMASK
 80377a8:	617b      	str	r3, [r7, #20]
  return(result);
 80377aa:	697b      	ldr	r3, [r7, #20]
 80377ac:	2b00      	cmp	r3, #0
 80377ae:	d105      	bne.n	80377bc <osThreadFlagsSet+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80377b0:	f3ef 8311 	mrs	r3, BASEPRI
 80377b4:	613b      	str	r3, [r7, #16]
  return(result);
 80377b6:	693b      	ldr	r3, [r7, #16]
 80377b8:	2b00      	cmp	r3, #0
 80377ba:	d024      	beq.n	8037806 <osThreadFlagsSet+0x96>
 80377bc:	4b1b      	ldr	r3, [pc, #108]	; (803782c <osThreadFlagsSet+0xbc>)
 80377be:	681b      	ldr	r3, [r3, #0]
 80377c0:	2b02      	cmp	r3, #2
 80377c2:	d120      	bne.n	8037806 <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 80377c4:	2300      	movs	r3, #0
 80377c6:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 80377c8:	f107 0308 	add.w	r3, r7, #8
 80377cc:	9300      	str	r3, [sp, #0]
 80377ce:	2300      	movs	r3, #0
 80377d0:	2201      	movs	r2, #1
 80377d2:	6839      	ldr	r1, [r7, #0]
 80377d4:	69f8      	ldr	r0, [r7, #28]
 80377d6:	f003 f987 	bl	803aae8 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 80377da:	f107 020c 	add.w	r2, r7, #12
 80377de:	2300      	movs	r3, #0
 80377e0:	9300      	str	r3, [sp, #0]
 80377e2:	4613      	mov	r3, r2
 80377e4:	2200      	movs	r2, #0
 80377e6:	2100      	movs	r1, #0
 80377e8:	69f8      	ldr	r0, [r7, #28]
 80377ea:	f003 f97d 	bl	803aae8 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 80377ee:	68bb      	ldr	r3, [r7, #8]
 80377f0:	2b00      	cmp	r3, #0
 80377f2:	d015      	beq.n	8037820 <osThreadFlagsSet+0xb0>
 80377f4:	4b0e      	ldr	r3, [pc, #56]	; (8037830 <osThreadFlagsSet+0xc0>)
 80377f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80377fa:	601a      	str	r2, [r3, #0]
 80377fc:	f3bf 8f4f 	dsb	sy
 8037800:	f3bf 8f6f 	isb	sy
 8037804:	e00c      	b.n	8037820 <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8037806:	2300      	movs	r3, #0
 8037808:	2201      	movs	r2, #1
 803780a:	6839      	ldr	r1, [r7, #0]
 803780c:	69f8      	ldr	r0, [r7, #28]
 803780e:	f003 f8b7 	bl	803a980 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8037812:	f107 030c 	add.w	r3, r7, #12
 8037816:	2200      	movs	r2, #0
 8037818:	2100      	movs	r1, #0
 803781a:	69f8      	ldr	r0, [r7, #28]
 803781c:	f003 f8b0 	bl	803a980 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8037820:	68fb      	ldr	r3, [r7, #12]
}
 8037822:	4618      	mov	r0, r3
 8037824:	3720      	adds	r7, #32
 8037826:	46bd      	mov	sp, r7
 8037828:	bd80      	pop	{r7, pc}
 803782a:	bf00      	nop
 803782c:	20000f34 	.word	0x20000f34
 8037830:	e000ed04 	.word	0xe000ed04

08037834 <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 8037834:	b580      	push	{r7, lr}
 8037836:	b088      	sub	sp, #32
 8037838:	af00      	add	r7, sp, #0
 803783a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 803783c:	f3ef 8305 	mrs	r3, IPSR
 8037840:	617b      	str	r3, [r7, #20]
  return(result);
 8037842:	697b      	ldr	r3, [r7, #20]
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 8037844:	2b00      	cmp	r3, #0
 8037846:	d10f      	bne.n	8037868 <osThreadFlagsClear+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8037848:	f3ef 8310 	mrs	r3, PRIMASK
 803784c:	613b      	str	r3, [r7, #16]
  return(result);
 803784e:	693b      	ldr	r3, [r7, #16]
 8037850:	2b00      	cmp	r3, #0
 8037852:	d105      	bne.n	8037860 <osThreadFlagsClear+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8037854:	f3ef 8311 	mrs	r3, BASEPRI
 8037858:	60fb      	str	r3, [r7, #12]
  return(result);
 803785a:	68fb      	ldr	r3, [r7, #12]
 803785c:	2b00      	cmp	r3, #0
 803785e:	d007      	beq.n	8037870 <osThreadFlagsClear+0x3c>
 8037860:	4b1b      	ldr	r3, [pc, #108]	; (80378d0 <osThreadFlagsClear+0x9c>)
 8037862:	681b      	ldr	r3, [r3, #0]
 8037864:	2b02      	cmp	r3, #2
 8037866:	d103      	bne.n	8037870 <osThreadFlagsClear+0x3c>
    rflags = (uint32_t)osErrorISR;
 8037868:	f06f 0305 	mvn.w	r3, #5
 803786c:	61fb      	str	r3, [r7, #28]
 803786e:	e02a      	b.n	80378c6 <osThreadFlagsClear+0x92>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8037870:	687b      	ldr	r3, [r7, #4]
 8037872:	2b00      	cmp	r3, #0
 8037874:	da03      	bge.n	803787e <osThreadFlagsClear+0x4a>
    rflags = (uint32_t)osErrorParameter;
 8037876:	f06f 0303 	mvn.w	r3, #3
 803787a:	61fb      	str	r3, [r7, #28]
 803787c:	e023      	b.n	80378c6 <osThreadFlagsClear+0x92>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 803787e:	f002 fe77 	bl	803a570 <xTaskGetCurrentTaskHandle>
 8037882:	61b8      	str	r0, [r7, #24]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 8037884:	f107 0308 	add.w	r3, r7, #8
 8037888:	2200      	movs	r2, #0
 803788a:	2100      	movs	r1, #0
 803788c:	69b8      	ldr	r0, [r7, #24]
 803788e:	f003 f877 	bl	803a980 <xTaskGenericNotify>
 8037892:	4603      	mov	r3, r0
 8037894:	2b01      	cmp	r3, #1
 8037896:	d113      	bne.n	80378c0 <osThreadFlagsClear+0x8c>
      rflags = cflags;
 8037898:	68bb      	ldr	r3, [r7, #8]
 803789a:	61fb      	str	r3, [r7, #28]
      cflags &= ~flags;
 803789c:	687b      	ldr	r3, [r7, #4]
 803789e:	43da      	mvns	r2, r3
 80378a0:	68bb      	ldr	r3, [r7, #8]
 80378a2:	4013      	ands	r3, r2
 80378a4:	60bb      	str	r3, [r7, #8]

      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 80378a6:	68b9      	ldr	r1, [r7, #8]
 80378a8:	2300      	movs	r3, #0
 80378aa:	2203      	movs	r2, #3
 80378ac:	69b8      	ldr	r0, [r7, #24]
 80378ae:	f003 f867 	bl	803a980 <xTaskGenericNotify>
 80378b2:	4603      	mov	r3, r0
 80378b4:	2b01      	cmp	r3, #1
 80378b6:	d006      	beq.n	80378c6 <osThreadFlagsClear+0x92>
        rflags = (uint32_t)osError;
 80378b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80378bc:	61fb      	str	r3, [r7, #28]
 80378be:	e002      	b.n	80378c6 <osThreadFlagsClear+0x92>
      }
    }
    else {
      rflags = (uint32_t)osError;
 80378c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80378c4:	61fb      	str	r3, [r7, #28]
    }
  }

  /* Return flags before clearing */
  return (rflags);
 80378c6:	69fb      	ldr	r3, [r7, #28]
}
 80378c8:	4618      	mov	r0, r3
 80378ca:	3720      	adds	r7, #32
 80378cc:	46bd      	mov	sp, r7
 80378ce:	bd80      	pop	{r7, pc}
 80378d0:	20000f34 	.word	0x20000f34

080378d4 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 80378d4:	b580      	push	{r7, lr}
 80378d6:	b08e      	sub	sp, #56	; 0x38
 80378d8:	af00      	add	r7, sp, #0
 80378da:	60f8      	str	r0, [r7, #12]
 80378dc:	60b9      	str	r1, [r7, #8]
 80378de:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80378e0:	f3ef 8305 	mrs	r3, IPSR
 80378e4:	61fb      	str	r3, [r7, #28]
  return(result);
 80378e6:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 80378e8:	2b00      	cmp	r3, #0
 80378ea:	d10f      	bne.n	803790c <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80378ec:	f3ef 8310 	mrs	r3, PRIMASK
 80378f0:	61bb      	str	r3, [r7, #24]
  return(result);
 80378f2:	69bb      	ldr	r3, [r7, #24]
 80378f4:	2b00      	cmp	r3, #0
 80378f6:	d105      	bne.n	8037904 <osThreadFlagsWait+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80378f8:	f3ef 8311 	mrs	r3, BASEPRI
 80378fc:	617b      	str	r3, [r7, #20]
  return(result);
 80378fe:	697b      	ldr	r3, [r7, #20]
 8037900:	2b00      	cmp	r3, #0
 8037902:	d007      	beq.n	8037914 <osThreadFlagsWait+0x40>
 8037904:	4b3c      	ldr	r3, [pc, #240]	; (80379f8 <osThreadFlagsWait+0x124>)
 8037906:	681b      	ldr	r3, [r3, #0]
 8037908:	2b02      	cmp	r3, #2
 803790a:	d103      	bne.n	8037914 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 803790c:	f06f 0305 	mvn.w	r3, #5
 8037910:	637b      	str	r3, [r7, #52]	; 0x34
 8037912:	e06b      	b.n	80379ec <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8037914:	68fb      	ldr	r3, [r7, #12]
 8037916:	2b00      	cmp	r3, #0
 8037918:	da03      	bge.n	8037922 <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 803791a:	f06f 0303 	mvn.w	r3, #3
 803791e:	637b      	str	r3, [r7, #52]	; 0x34
 8037920:	e064      	b.n	80379ec <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8037922:	68bb      	ldr	r3, [r7, #8]
 8037924:	f003 0302 	and.w	r3, r3, #2
 8037928:	2b00      	cmp	r3, #0
 803792a:	d002      	beq.n	8037932 <osThreadFlagsWait+0x5e>
      clear = 0U;
 803792c:	2300      	movs	r3, #0
 803792e:	633b      	str	r3, [r7, #48]	; 0x30
 8037930:	e001      	b.n	8037936 <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 8037932:	68fb      	ldr	r3, [r7, #12]
 8037934:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 8037936:	2300      	movs	r3, #0
 8037938:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 803793a:	687b      	ldr	r3, [r7, #4]
 803793c:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 803793e:	f002 fa33 	bl	8039da8 <xTaskGetTickCount>
 8037942:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8037944:	f107 0210 	add.w	r2, r7, #16
 8037948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803794a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 803794c:	2000      	movs	r0, #0
 803794e:	f002 ffbd 	bl	803a8cc <xTaskNotifyWait>
 8037952:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 8037954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037956:	2b01      	cmp	r3, #1
 8037958:	d137      	bne.n	80379ca <osThreadFlagsWait+0xf6>
        rflags &= flags;
 803795a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 803795c:	68fb      	ldr	r3, [r7, #12]
 803795e:	4013      	ands	r3, r2
 8037960:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 8037962:	693b      	ldr	r3, [r7, #16]
 8037964:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8037966:	4313      	orrs	r3, r2
 8037968:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 803796a:	68bb      	ldr	r3, [r7, #8]
 803796c:	f003 0301 	and.w	r3, r3, #1
 8037970:	2b00      	cmp	r3, #0
 8037972:	d00c      	beq.n	803798e <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 8037974:	68fa      	ldr	r2, [r7, #12]
 8037976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8037978:	4013      	ands	r3, r2
 803797a:	68fa      	ldr	r2, [r7, #12]
 803797c:	429a      	cmp	r2, r3
 803797e:	d032      	beq.n	80379e6 <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 8037980:	687b      	ldr	r3, [r7, #4]
 8037982:	2b00      	cmp	r3, #0
 8037984:	d10f      	bne.n	80379a6 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 8037986:	f06f 0302 	mvn.w	r3, #2
 803798a:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 803798c:	e02e      	b.n	80379ec <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 803798e:	68fa      	ldr	r2, [r7, #12]
 8037990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8037992:	4013      	ands	r3, r2
 8037994:	2b00      	cmp	r3, #0
 8037996:	d128      	bne.n	80379ea <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 8037998:	687b      	ldr	r3, [r7, #4]
 803799a:	2b00      	cmp	r3, #0
 803799c:	d103      	bne.n	80379a6 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 803799e:	f06f 0302 	mvn.w	r3, #2
 80379a2:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 80379a4:	e022      	b.n	80379ec <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 80379a6:	f002 f9ff 	bl	8039da8 <xTaskGetTickCount>
 80379aa:	4602      	mov	r2, r0
 80379ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80379ae:	1ad3      	subs	r3, r2, r3
 80379b0:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 80379b2:	6a3a      	ldr	r2, [r7, #32]
 80379b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80379b6:	429a      	cmp	r2, r3
 80379b8:	d902      	bls.n	80379c0 <osThreadFlagsWait+0xec>
          tout  = 0;
 80379ba:	2300      	movs	r3, #0
 80379bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80379be:	e00e      	b.n	80379de <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 80379c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80379c2:	6a3b      	ldr	r3, [r7, #32]
 80379c4:	1ad3      	subs	r3, r2, r3
 80379c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80379c8:	e009      	b.n	80379de <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 80379ca:	687b      	ldr	r3, [r7, #4]
 80379cc:	2b00      	cmp	r3, #0
 80379ce:	d103      	bne.n	80379d8 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 80379d0:	f06f 0302 	mvn.w	r3, #2
 80379d4:	637b      	str	r3, [r7, #52]	; 0x34
 80379d6:	e002      	b.n	80379de <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 80379d8:	f06f 0301 	mvn.w	r3, #1
 80379dc:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 80379de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80379e0:	2b00      	cmp	r3, #0
 80379e2:	d1af      	bne.n	8037944 <osThreadFlagsWait+0x70>
 80379e4:	e002      	b.n	80379ec <osThreadFlagsWait+0x118>
            break;
 80379e6:	bf00      	nop
 80379e8:	e000      	b.n	80379ec <osThreadFlagsWait+0x118>
            break;
 80379ea:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 80379ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80379ee:	4618      	mov	r0, r3
 80379f0:	3738      	adds	r7, #56	; 0x38
 80379f2:	46bd      	mov	sp, r7
 80379f4:	bd80      	pop	{r7, pc}
 80379f6:	bf00      	nop
 80379f8:	20000f34 	.word	0x20000f34

080379fc <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 80379fc:	b580      	push	{r7, lr}
 80379fe:	b086      	sub	sp, #24
 8037a00:	af00      	add	r7, sp, #0
 8037a02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8037a04:	f3ef 8305 	mrs	r3, IPSR
 8037a08:	613b      	str	r3, [r7, #16]
  return(result);
 8037a0a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8037a0c:	2b00      	cmp	r3, #0
 8037a0e:	d10f      	bne.n	8037a30 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8037a10:	f3ef 8310 	mrs	r3, PRIMASK
 8037a14:	60fb      	str	r3, [r7, #12]
  return(result);
 8037a16:	68fb      	ldr	r3, [r7, #12]
 8037a18:	2b00      	cmp	r3, #0
 8037a1a:	d105      	bne.n	8037a28 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8037a1c:	f3ef 8311 	mrs	r3, BASEPRI
 8037a20:	60bb      	str	r3, [r7, #8]
  return(result);
 8037a22:	68bb      	ldr	r3, [r7, #8]
 8037a24:	2b00      	cmp	r3, #0
 8037a26:	d007      	beq.n	8037a38 <osDelay+0x3c>
 8037a28:	4b0a      	ldr	r3, [pc, #40]	; (8037a54 <osDelay+0x58>)
 8037a2a:	681b      	ldr	r3, [r3, #0]
 8037a2c:	2b02      	cmp	r3, #2
 8037a2e:	d103      	bne.n	8037a38 <osDelay+0x3c>
    stat = osErrorISR;
 8037a30:	f06f 0305 	mvn.w	r3, #5
 8037a34:	617b      	str	r3, [r7, #20]
 8037a36:	e007      	b.n	8037a48 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8037a38:	2300      	movs	r3, #0
 8037a3a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8037a3c:	687b      	ldr	r3, [r7, #4]
 8037a3e:	2b00      	cmp	r3, #0
 8037a40:	d002      	beq.n	8037a48 <osDelay+0x4c>
      vTaskDelay(ticks);
 8037a42:	6878      	ldr	r0, [r7, #4]
 8037a44:	f002 f86e 	bl	8039b24 <vTaskDelay>
    }
  }

  return (stat);
 8037a48:	697b      	ldr	r3, [r7, #20]
}
 8037a4a:	4618      	mov	r0, r3
 8037a4c:	3718      	adds	r7, #24
 8037a4e:	46bd      	mov	sp, r7
 8037a50:	bd80      	pop	{r7, pc}
 8037a52:	bf00      	nop
 8037a54:	20000f34 	.word	0x20000f34

08037a58 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8037a58:	b580      	push	{r7, lr}
 8037a5a:	b088      	sub	sp, #32
 8037a5c:	af00      	add	r7, sp, #0
 8037a5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8037a60:	f3ef 8305 	mrs	r3, IPSR
 8037a64:	617b      	str	r3, [r7, #20]
  return(result);
 8037a66:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8037a68:	2b00      	cmp	r3, #0
 8037a6a:	d10f      	bne.n	8037a8c <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8037a6c:	f3ef 8310 	mrs	r3, PRIMASK
 8037a70:	613b      	str	r3, [r7, #16]
  return(result);
 8037a72:	693b      	ldr	r3, [r7, #16]
 8037a74:	2b00      	cmp	r3, #0
 8037a76:	d105      	bne.n	8037a84 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8037a78:	f3ef 8311 	mrs	r3, BASEPRI
 8037a7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8037a7e:	68fb      	ldr	r3, [r7, #12]
 8037a80:	2b00      	cmp	r3, #0
 8037a82:	d007      	beq.n	8037a94 <osDelayUntil+0x3c>
 8037a84:	4b13      	ldr	r3, [pc, #76]	; (8037ad4 <osDelayUntil+0x7c>)
 8037a86:	681b      	ldr	r3, [r3, #0]
 8037a88:	2b02      	cmp	r3, #2
 8037a8a:	d103      	bne.n	8037a94 <osDelayUntil+0x3c>
    stat = osErrorISR;
 8037a8c:	f06f 0305 	mvn.w	r3, #5
 8037a90:	61fb      	str	r3, [r7, #28]
 8037a92:	e019      	b.n	8037ac8 <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 8037a94:	2300      	movs	r3, #0
 8037a96:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8037a98:	f002 f986 	bl	8039da8 <xTaskGetTickCount>
 8037a9c:	4603      	mov	r3, r0
 8037a9e:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8037aa0:	68bb      	ldr	r3, [r7, #8]
 8037aa2:	687a      	ldr	r2, [r7, #4]
 8037aa4:	1ad3      	subs	r3, r2, r3
 8037aa6:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8037aa8:	69bb      	ldr	r3, [r7, #24]
 8037aaa:	2b00      	cmp	r3, #0
 8037aac:	d009      	beq.n	8037ac2 <osDelayUntil+0x6a>
 8037aae:	69bb      	ldr	r3, [r7, #24]
 8037ab0:	2b00      	cmp	r3, #0
 8037ab2:	db06      	blt.n	8037ac2 <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 8037ab4:	f107 0308 	add.w	r3, r7, #8
 8037ab8:	69b9      	ldr	r1, [r7, #24]
 8037aba:	4618      	mov	r0, r3
 8037abc:	f001 ffb8 	bl	8039a30 <vTaskDelayUntil>
 8037ac0:	e002      	b.n	8037ac8 <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8037ac2:	f06f 0303 	mvn.w	r3, #3
 8037ac6:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8037ac8:	69fb      	ldr	r3, [r7, #28]
}
 8037aca:	4618      	mov	r0, r3
 8037acc:	3720      	adds	r7, #32
 8037ace:	46bd      	mov	sp, r7
 8037ad0:	bd80      	pop	{r7, pc}
 8037ad2:	bf00      	nop
 8037ad4:	20000f34 	.word	0x20000f34

08037ad8 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8037ad8:	b580      	push	{r7, lr}
 8037ada:	b088      	sub	sp, #32
 8037adc:	af00      	add	r7, sp, #0
 8037ade:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8037ae0:	2300      	movs	r3, #0
 8037ae2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8037ae4:	f3ef 8305 	mrs	r3, IPSR
 8037ae8:	617b      	str	r3, [r7, #20]
  return(result);
 8037aea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 8037aec:	2b00      	cmp	r3, #0
 8037aee:	d13d      	bne.n	8037b6c <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8037af0:	f3ef 8310 	mrs	r3, PRIMASK
 8037af4:	613b      	str	r3, [r7, #16]
  return(result);
 8037af6:	693b      	ldr	r3, [r7, #16]
 8037af8:	2b00      	cmp	r3, #0
 8037afa:	d105      	bne.n	8037b08 <osEventFlagsNew+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8037afc:	f3ef 8311 	mrs	r3, BASEPRI
 8037b00:	60fb      	str	r3, [r7, #12]
  return(result);
 8037b02:	68fb      	ldr	r3, [r7, #12]
 8037b04:	2b00      	cmp	r3, #0
 8037b06:	d003      	beq.n	8037b10 <osEventFlagsNew+0x38>
 8037b08:	4b1b      	ldr	r3, [pc, #108]	; (8037b78 <osEventFlagsNew+0xa0>)
 8037b0a:	681b      	ldr	r3, [r3, #0]
 8037b0c:	2b02      	cmp	r3, #2
 8037b0e:	d02d      	beq.n	8037b6c <osEventFlagsNew+0x94>
    mem = -1;
 8037b10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8037b14:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8037b16:	687b      	ldr	r3, [r7, #4]
 8037b18:	2b00      	cmp	r3, #0
 8037b1a:	d015      	beq.n	8037b48 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8037b1c:	687b      	ldr	r3, [r7, #4]
 8037b1e:	689b      	ldr	r3, [r3, #8]
 8037b20:	2b00      	cmp	r3, #0
 8037b22:	d006      	beq.n	8037b32 <osEventFlagsNew+0x5a>
 8037b24:	687b      	ldr	r3, [r7, #4]
 8037b26:	68db      	ldr	r3, [r3, #12]
 8037b28:	2b1f      	cmp	r3, #31
 8037b2a:	d902      	bls.n	8037b32 <osEventFlagsNew+0x5a>
        mem = 1;
 8037b2c:	2301      	movs	r3, #1
 8037b2e:	61bb      	str	r3, [r7, #24]
 8037b30:	e00c      	b.n	8037b4c <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8037b32:	687b      	ldr	r3, [r7, #4]
 8037b34:	689b      	ldr	r3, [r3, #8]
 8037b36:	2b00      	cmp	r3, #0
 8037b38:	d108      	bne.n	8037b4c <osEventFlagsNew+0x74>
 8037b3a:	687b      	ldr	r3, [r7, #4]
 8037b3c:	68db      	ldr	r3, [r3, #12]
 8037b3e:	2b00      	cmp	r3, #0
 8037b40:	d104      	bne.n	8037b4c <osEventFlagsNew+0x74>
          mem = 0;
 8037b42:	2300      	movs	r3, #0
 8037b44:	61bb      	str	r3, [r7, #24]
 8037b46:	e001      	b.n	8037b4c <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 8037b48:	2300      	movs	r3, #0
 8037b4a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8037b4c:	69bb      	ldr	r3, [r7, #24]
 8037b4e:	2b01      	cmp	r3, #1
 8037b50:	d106      	bne.n	8037b60 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8037b52:	687b      	ldr	r3, [r7, #4]
 8037b54:	689b      	ldr	r3, [r3, #8]
 8037b56:	4618      	mov	r0, r3
 8037b58:	f000 fbc6 	bl	80382e8 <xEventGroupCreateStatic>
 8037b5c:	61f8      	str	r0, [r7, #28]
 8037b5e:	e005      	b.n	8037b6c <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 8037b60:	69bb      	ldr	r3, [r7, #24]
 8037b62:	2b00      	cmp	r3, #0
 8037b64:	d102      	bne.n	8037b6c <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 8037b66:	f000 fbf4 	bl	8038352 <xEventGroupCreate>
 8037b6a:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8037b6c:	69fb      	ldr	r3, [r7, #28]
}
 8037b6e:	4618      	mov	r0, r3
 8037b70:	3720      	adds	r7, #32
 8037b72:	46bd      	mov	sp, r7
 8037b74:	bd80      	pop	{r7, pc}
 8037b76:	bf00      	nop
 8037b78:	20000f34 	.word	0x20000f34

08037b7c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8037b7c:	b580      	push	{r7, lr}
 8037b7e:	b088      	sub	sp, #32
 8037b80:	af00      	add	r7, sp, #0
 8037b82:	6078      	str	r0, [r7, #4]
 8037b84:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8037b86:	687b      	ldr	r3, [r7, #4]
 8037b88:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8037b8a:	69bb      	ldr	r3, [r7, #24]
 8037b8c:	2b00      	cmp	r3, #0
 8037b8e:	d004      	beq.n	8037b9a <osEventFlagsSet+0x1e>
 8037b90:	683b      	ldr	r3, [r7, #0]
 8037b92:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8037b96:	2b00      	cmp	r3, #0
 8037b98:	d003      	beq.n	8037ba2 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8037b9a:	f06f 0303 	mvn.w	r3, #3
 8037b9e:	61fb      	str	r3, [r7, #28]
 8037ba0:	e03a      	b.n	8037c18 <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8037ba2:	f3ef 8305 	mrs	r3, IPSR
 8037ba6:	617b      	str	r3, [r7, #20]
  return(result);
 8037ba8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8037baa:	2b00      	cmp	r3, #0
 8037bac:	d10f      	bne.n	8037bce <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8037bae:	f3ef 8310 	mrs	r3, PRIMASK
 8037bb2:	613b      	str	r3, [r7, #16]
  return(result);
 8037bb4:	693b      	ldr	r3, [r7, #16]
 8037bb6:	2b00      	cmp	r3, #0
 8037bb8:	d105      	bne.n	8037bc6 <osEventFlagsSet+0x4a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8037bba:	f3ef 8311 	mrs	r3, BASEPRI
 8037bbe:	60fb      	str	r3, [r7, #12]
  return(result);
 8037bc0:	68fb      	ldr	r3, [r7, #12]
 8037bc2:	2b00      	cmp	r3, #0
 8037bc4:	d021      	beq.n	8037c0a <osEventFlagsSet+0x8e>
 8037bc6:	4b17      	ldr	r3, [pc, #92]	; (8037c24 <osEventFlagsSet+0xa8>)
 8037bc8:	681b      	ldr	r3, [r3, #0]
 8037bca:	2b02      	cmp	r3, #2
 8037bcc:	d11d      	bne.n	8037c0a <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 8037bce:	2300      	movs	r3, #0
 8037bd0:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8037bd2:	f107 0308 	add.w	r3, r7, #8
 8037bd6:	461a      	mov	r2, r3
 8037bd8:	6839      	ldr	r1, [r7, #0]
 8037bda:	69b8      	ldr	r0, [r7, #24]
 8037bdc:	f000 fd56 	bl	803868c <xEventGroupSetBitsFromISR>
 8037be0:	4603      	mov	r3, r0
 8037be2:	2b00      	cmp	r3, #0
 8037be4:	d103      	bne.n	8037bee <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 8037be6:	f06f 0302 	mvn.w	r3, #2
 8037bea:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8037bec:	e013      	b.n	8037c16 <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 8037bee:	683b      	ldr	r3, [r7, #0]
 8037bf0:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 8037bf2:	68bb      	ldr	r3, [r7, #8]
 8037bf4:	2b00      	cmp	r3, #0
 8037bf6:	d00e      	beq.n	8037c16 <osEventFlagsSet+0x9a>
 8037bf8:	4b0b      	ldr	r3, [pc, #44]	; (8037c28 <osEventFlagsSet+0xac>)
 8037bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8037bfe:	601a      	str	r2, [r3, #0]
 8037c00:	f3bf 8f4f 	dsb	sy
 8037c04:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8037c08:	e005      	b.n	8037c16 <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8037c0a:	6839      	ldr	r1, [r7, #0]
 8037c0c:	69b8      	ldr	r0, [r7, #24]
 8037c0e:	f000 fc85 	bl	803851c <xEventGroupSetBits>
 8037c12:	61f8      	str	r0, [r7, #28]
 8037c14:	e000      	b.n	8037c18 <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8037c16:	bf00      	nop
  }

  return (rflags);
 8037c18:	69fb      	ldr	r3, [r7, #28]
}
 8037c1a:	4618      	mov	r0, r3
 8037c1c:	3720      	adds	r7, #32
 8037c1e:	46bd      	mov	sp, r7
 8037c20:	bd80      	pop	{r7, pc}
 8037c22:	bf00      	nop
 8037c24:	20000f34 	.word	0x20000f34
 8037c28:	e000ed04 	.word	0xe000ed04

08037c2c <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8037c2c:	b580      	push	{r7, lr}
 8037c2e:	b08e      	sub	sp, #56	; 0x38
 8037c30:	af02      	add	r7, sp, #8
 8037c32:	60f8      	str	r0, [r7, #12]
 8037c34:	60b9      	str	r1, [r7, #8]
 8037c36:	607a      	str	r2, [r7, #4]
 8037c38:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8037c3a:	68fb      	ldr	r3, [r7, #12]
 8037c3c:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8037c3e:	6a3b      	ldr	r3, [r7, #32]
 8037c40:	2b00      	cmp	r3, #0
 8037c42:	d004      	beq.n	8037c4e <osEventFlagsWait+0x22>
 8037c44:	68bb      	ldr	r3, [r7, #8]
 8037c46:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8037c4a:	2b00      	cmp	r3, #0
 8037c4c:	d003      	beq.n	8037c56 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8037c4e:	f06f 0303 	mvn.w	r3, #3
 8037c52:	627b      	str	r3, [r7, #36]	; 0x24
 8037c54:	e059      	b.n	8037d0a <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8037c56:	f3ef 8305 	mrs	r3, IPSR
 8037c5a:	61fb      	str	r3, [r7, #28]
  return(result);
 8037c5c:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 8037c5e:	2b00      	cmp	r3, #0
 8037c60:	d10f      	bne.n	8037c82 <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8037c62:	f3ef 8310 	mrs	r3, PRIMASK
 8037c66:	61bb      	str	r3, [r7, #24]
  return(result);
 8037c68:	69bb      	ldr	r3, [r7, #24]
 8037c6a:	2b00      	cmp	r3, #0
 8037c6c:	d105      	bne.n	8037c7a <osEventFlagsWait+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8037c6e:	f3ef 8311 	mrs	r3, BASEPRI
 8037c72:	617b      	str	r3, [r7, #20]
  return(result);
 8037c74:	697b      	ldr	r3, [r7, #20]
 8037c76:	2b00      	cmp	r3, #0
 8037c78:	d007      	beq.n	8037c8a <osEventFlagsWait+0x5e>
 8037c7a:	4b26      	ldr	r3, [pc, #152]	; (8037d14 <osEventFlagsWait+0xe8>)
 8037c7c:	681b      	ldr	r3, [r3, #0]
 8037c7e:	2b02      	cmp	r3, #2
 8037c80:	d103      	bne.n	8037c8a <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 8037c82:	f06f 0305 	mvn.w	r3, #5
 8037c86:	627b      	str	r3, [r7, #36]	; 0x24
 8037c88:	e03f      	b.n	8037d0a <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 8037c8a:	687b      	ldr	r3, [r7, #4]
 8037c8c:	f003 0301 	and.w	r3, r3, #1
 8037c90:	2b00      	cmp	r3, #0
 8037c92:	d002      	beq.n	8037c9a <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 8037c94:	2301      	movs	r3, #1
 8037c96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8037c98:	e001      	b.n	8037c9e <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 8037c9a:	2300      	movs	r3, #0
 8037c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 8037c9e:	687b      	ldr	r3, [r7, #4]
 8037ca0:	f003 0302 	and.w	r3, r3, #2
 8037ca4:	2b00      	cmp	r3, #0
 8037ca6:	d002      	beq.n	8037cae <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 8037ca8:	2300      	movs	r3, #0
 8037caa:	62bb      	str	r3, [r7, #40]	; 0x28
 8037cac:	e001      	b.n	8037cb2 <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 8037cae:	2301      	movs	r3, #1
 8037cb0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8037cb2:	683b      	ldr	r3, [r7, #0]
 8037cb4:	9300      	str	r3, [sp, #0]
 8037cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8037cb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8037cba:	68b9      	ldr	r1, [r7, #8]
 8037cbc:	6a38      	ldr	r0, [r7, #32]
 8037cbe:	f000 fb63 	bl	8038388 <xEventGroupWaitBits>
 8037cc2:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 8037cc4:	687b      	ldr	r3, [r7, #4]
 8037cc6:	f003 0301 	and.w	r3, r3, #1
 8037cca:	2b00      	cmp	r3, #0
 8037ccc:	d00e      	beq.n	8037cec <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 8037cce:	68ba      	ldr	r2, [r7, #8]
 8037cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037cd2:	429a      	cmp	r2, r3
 8037cd4:	d019      	beq.n	8037d0a <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 8037cd6:	683b      	ldr	r3, [r7, #0]
 8037cd8:	2b00      	cmp	r3, #0
 8037cda:	d003      	beq.n	8037ce4 <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 8037cdc:	f06f 0301 	mvn.w	r3, #1
 8037ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8037ce2:	e012      	b.n	8037d0a <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8037ce4:	f06f 0302 	mvn.w	r3, #2
 8037ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8037cea:	e00e      	b.n	8037d0a <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8037cec:	68ba      	ldr	r2, [r7, #8]
 8037cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037cf0:	4013      	ands	r3, r2
 8037cf2:	2b00      	cmp	r3, #0
 8037cf4:	d109      	bne.n	8037d0a <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 8037cf6:	683b      	ldr	r3, [r7, #0]
 8037cf8:	2b00      	cmp	r3, #0
 8037cfa:	d003      	beq.n	8037d04 <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 8037cfc:	f06f 0301 	mvn.w	r3, #1
 8037d00:	627b      	str	r3, [r7, #36]	; 0x24
 8037d02:	e002      	b.n	8037d0a <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8037d04:	f06f 0302 	mvn.w	r3, #2
 8037d08:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 8037d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8037d0c:	4618      	mov	r0, r3
 8037d0e:	3730      	adds	r7, #48	; 0x30
 8037d10:	46bd      	mov	sp, r7
 8037d12:	bd80      	pop	{r7, pc}
 8037d14:	20000f34 	.word	0x20000f34

08037d18 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8037d18:	b580      	push	{r7, lr}
 8037d1a:	b08a      	sub	sp, #40	; 0x28
 8037d1c:	af00      	add	r7, sp, #0
 8037d1e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8037d20:	2300      	movs	r3, #0
 8037d22:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8037d24:	f3ef 8305 	mrs	r3, IPSR
 8037d28:	613b      	str	r3, [r7, #16]
  return(result);
 8037d2a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8037d2c:	2b00      	cmp	r3, #0
 8037d2e:	f040 8085 	bne.w	8037e3c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8037d32:	f3ef 8310 	mrs	r3, PRIMASK
 8037d36:	60fb      	str	r3, [r7, #12]
  return(result);
 8037d38:	68fb      	ldr	r3, [r7, #12]
 8037d3a:	2b00      	cmp	r3, #0
 8037d3c:	d105      	bne.n	8037d4a <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8037d3e:	f3ef 8311 	mrs	r3, BASEPRI
 8037d42:	60bb      	str	r3, [r7, #8]
  return(result);
 8037d44:	68bb      	ldr	r3, [r7, #8]
 8037d46:	2b00      	cmp	r3, #0
 8037d48:	d003      	beq.n	8037d52 <osMutexNew+0x3a>
 8037d4a:	4b3f      	ldr	r3, [pc, #252]	; (8037e48 <osMutexNew+0x130>)
 8037d4c:	681b      	ldr	r3, [r3, #0]
 8037d4e:	2b02      	cmp	r3, #2
 8037d50:	d074      	beq.n	8037e3c <osMutexNew+0x124>
    if (attr != NULL) {
 8037d52:	687b      	ldr	r3, [r7, #4]
 8037d54:	2b00      	cmp	r3, #0
 8037d56:	d003      	beq.n	8037d60 <osMutexNew+0x48>
      type = attr->attr_bits;
 8037d58:	687b      	ldr	r3, [r7, #4]
 8037d5a:	685b      	ldr	r3, [r3, #4]
 8037d5c:	623b      	str	r3, [r7, #32]
 8037d5e:	e001      	b.n	8037d64 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8037d60:	2300      	movs	r3, #0
 8037d62:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8037d64:	6a3b      	ldr	r3, [r7, #32]
 8037d66:	f003 0301 	and.w	r3, r3, #1
 8037d6a:	2b00      	cmp	r3, #0
 8037d6c:	d002      	beq.n	8037d74 <osMutexNew+0x5c>
      rmtx = 1U;
 8037d6e:	2301      	movs	r3, #1
 8037d70:	61fb      	str	r3, [r7, #28]
 8037d72:	e001      	b.n	8037d78 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8037d74:	2300      	movs	r3, #0
 8037d76:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8037d78:	6a3b      	ldr	r3, [r7, #32]
 8037d7a:	f003 0308 	and.w	r3, r3, #8
 8037d7e:	2b00      	cmp	r3, #0
 8037d80:	d15c      	bne.n	8037e3c <osMutexNew+0x124>
      mem = -1;
 8037d82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8037d86:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8037d88:	687b      	ldr	r3, [r7, #4]
 8037d8a:	2b00      	cmp	r3, #0
 8037d8c:	d015      	beq.n	8037dba <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8037d8e:	687b      	ldr	r3, [r7, #4]
 8037d90:	689b      	ldr	r3, [r3, #8]
 8037d92:	2b00      	cmp	r3, #0
 8037d94:	d006      	beq.n	8037da4 <osMutexNew+0x8c>
 8037d96:	687b      	ldr	r3, [r7, #4]
 8037d98:	68db      	ldr	r3, [r3, #12]
 8037d9a:	2b4f      	cmp	r3, #79	; 0x4f
 8037d9c:	d902      	bls.n	8037da4 <osMutexNew+0x8c>
          mem = 1;
 8037d9e:	2301      	movs	r3, #1
 8037da0:	61bb      	str	r3, [r7, #24]
 8037da2:	e00c      	b.n	8037dbe <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8037da4:	687b      	ldr	r3, [r7, #4]
 8037da6:	689b      	ldr	r3, [r3, #8]
 8037da8:	2b00      	cmp	r3, #0
 8037daa:	d108      	bne.n	8037dbe <osMutexNew+0xa6>
 8037dac:	687b      	ldr	r3, [r7, #4]
 8037dae:	68db      	ldr	r3, [r3, #12]
 8037db0:	2b00      	cmp	r3, #0
 8037db2:	d104      	bne.n	8037dbe <osMutexNew+0xa6>
            mem = 0;
 8037db4:	2300      	movs	r3, #0
 8037db6:	61bb      	str	r3, [r7, #24]
 8037db8:	e001      	b.n	8037dbe <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8037dba:	2300      	movs	r3, #0
 8037dbc:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8037dbe:	69bb      	ldr	r3, [r7, #24]
 8037dc0:	2b01      	cmp	r3, #1
 8037dc2:	d112      	bne.n	8037dea <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8037dc4:	69fb      	ldr	r3, [r7, #28]
 8037dc6:	2b00      	cmp	r3, #0
 8037dc8:	d007      	beq.n	8037dda <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8037dca:	687b      	ldr	r3, [r7, #4]
 8037dcc:	689b      	ldr	r3, [r3, #8]
 8037dce:	4619      	mov	r1, r3
 8037dd0:	2004      	movs	r0, #4
 8037dd2:	f000 fe92 	bl	8038afa <xQueueCreateMutexStatic>
 8037dd6:	6278      	str	r0, [r7, #36]	; 0x24
 8037dd8:	e016      	b.n	8037e08 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8037dda:	687b      	ldr	r3, [r7, #4]
 8037ddc:	689b      	ldr	r3, [r3, #8]
 8037dde:	4619      	mov	r1, r3
 8037de0:	2001      	movs	r0, #1
 8037de2:	f000 fe8a 	bl	8038afa <xQueueCreateMutexStatic>
 8037de6:	6278      	str	r0, [r7, #36]	; 0x24
 8037de8:	e00e      	b.n	8037e08 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8037dea:	69bb      	ldr	r3, [r7, #24]
 8037dec:	2b00      	cmp	r3, #0
 8037dee:	d10b      	bne.n	8037e08 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8037df0:	69fb      	ldr	r3, [r7, #28]
 8037df2:	2b00      	cmp	r3, #0
 8037df4:	d004      	beq.n	8037e00 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8037df6:	2004      	movs	r0, #4
 8037df8:	f000 fe67 	bl	8038aca <xQueueCreateMutex>
 8037dfc:	6278      	str	r0, [r7, #36]	; 0x24
 8037dfe:	e003      	b.n	8037e08 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8037e00:	2001      	movs	r0, #1
 8037e02:	f000 fe62 	bl	8038aca <xQueueCreateMutex>
 8037e06:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8037e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037e0a:	2b00      	cmp	r3, #0
 8037e0c:	d00c      	beq.n	8037e28 <osMutexNew+0x110>
        if (attr != NULL) {
 8037e0e:	687b      	ldr	r3, [r7, #4]
 8037e10:	2b00      	cmp	r3, #0
 8037e12:	d003      	beq.n	8037e1c <osMutexNew+0x104>
          name = attr->name;
 8037e14:	687b      	ldr	r3, [r7, #4]
 8037e16:	681b      	ldr	r3, [r3, #0]
 8037e18:	617b      	str	r3, [r7, #20]
 8037e1a:	e001      	b.n	8037e20 <osMutexNew+0x108>
        } else {
          name = NULL;
 8037e1c:	2300      	movs	r3, #0
 8037e1e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8037e20:	6979      	ldr	r1, [r7, #20]
 8037e22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8037e24:	f001 fc04 	bl	8039630 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8037e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037e2a:	2b00      	cmp	r3, #0
 8037e2c:	d006      	beq.n	8037e3c <osMutexNew+0x124>
 8037e2e:	69fb      	ldr	r3, [r7, #28]
 8037e30:	2b00      	cmp	r3, #0
 8037e32:	d003      	beq.n	8037e3c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8037e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037e36:	f043 0301 	orr.w	r3, r3, #1
 8037e3a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8037e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8037e3e:	4618      	mov	r0, r3
 8037e40:	3728      	adds	r7, #40	; 0x28
 8037e42:	46bd      	mov	sp, r7
 8037e44:	bd80      	pop	{r7, pc}
 8037e46:	bf00      	nop
 8037e48:	20000f34 	.word	0x20000f34

08037e4c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8037e4c:	b580      	push	{r7, lr}
 8037e4e:	b088      	sub	sp, #32
 8037e50:	af00      	add	r7, sp, #0
 8037e52:	6078      	str	r0, [r7, #4]
 8037e54:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8037e56:	687b      	ldr	r3, [r7, #4]
 8037e58:	f023 0301 	bic.w	r3, r3, #1
 8037e5c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8037e5e:	687b      	ldr	r3, [r7, #4]
 8037e60:	f003 0301 	and.w	r3, r3, #1
 8037e64:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8037e66:	2300      	movs	r3, #0
 8037e68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8037e6a:	f3ef 8305 	mrs	r3, IPSR
 8037e6e:	613b      	str	r3, [r7, #16]
  return(result);
 8037e70:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8037e72:	2b00      	cmp	r3, #0
 8037e74:	d10f      	bne.n	8037e96 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8037e76:	f3ef 8310 	mrs	r3, PRIMASK
 8037e7a:	60fb      	str	r3, [r7, #12]
  return(result);
 8037e7c:	68fb      	ldr	r3, [r7, #12]
 8037e7e:	2b00      	cmp	r3, #0
 8037e80:	d105      	bne.n	8037e8e <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8037e82:	f3ef 8311 	mrs	r3, BASEPRI
 8037e86:	60bb      	str	r3, [r7, #8]
  return(result);
 8037e88:	68bb      	ldr	r3, [r7, #8]
 8037e8a:	2b00      	cmp	r3, #0
 8037e8c:	d007      	beq.n	8037e9e <osMutexAcquire+0x52>
 8037e8e:	4b1d      	ldr	r3, [pc, #116]	; (8037f04 <osMutexAcquire+0xb8>)
 8037e90:	681b      	ldr	r3, [r3, #0]
 8037e92:	2b02      	cmp	r3, #2
 8037e94:	d103      	bne.n	8037e9e <osMutexAcquire+0x52>
    stat = osErrorISR;
 8037e96:	f06f 0305 	mvn.w	r3, #5
 8037e9a:	61fb      	str	r3, [r7, #28]
 8037e9c:	e02c      	b.n	8037ef8 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8037e9e:	69bb      	ldr	r3, [r7, #24]
 8037ea0:	2b00      	cmp	r3, #0
 8037ea2:	d103      	bne.n	8037eac <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8037ea4:	f06f 0303 	mvn.w	r3, #3
 8037ea8:	61fb      	str	r3, [r7, #28]
 8037eaa:	e025      	b.n	8037ef8 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8037eac:	697b      	ldr	r3, [r7, #20]
 8037eae:	2b00      	cmp	r3, #0
 8037eb0:	d011      	beq.n	8037ed6 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8037eb2:	6839      	ldr	r1, [r7, #0]
 8037eb4:	69b8      	ldr	r0, [r7, #24]
 8037eb6:	f000 fe6e 	bl	8038b96 <xQueueTakeMutexRecursive>
 8037eba:	4603      	mov	r3, r0
 8037ebc:	2b01      	cmp	r3, #1
 8037ebe:	d01b      	beq.n	8037ef8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8037ec0:	683b      	ldr	r3, [r7, #0]
 8037ec2:	2b00      	cmp	r3, #0
 8037ec4:	d003      	beq.n	8037ece <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8037ec6:	f06f 0301 	mvn.w	r3, #1
 8037eca:	61fb      	str	r3, [r7, #28]
 8037ecc:	e014      	b.n	8037ef8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8037ece:	f06f 0302 	mvn.w	r3, #2
 8037ed2:	61fb      	str	r3, [r7, #28]
 8037ed4:	e010      	b.n	8037ef8 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8037ed6:	6839      	ldr	r1, [r7, #0]
 8037ed8:	69b8      	ldr	r0, [r7, #24]
 8037eda:	f001 f8fb 	bl	80390d4 <xQueueSemaphoreTake>
 8037ede:	4603      	mov	r3, r0
 8037ee0:	2b01      	cmp	r3, #1
 8037ee2:	d009      	beq.n	8037ef8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8037ee4:	683b      	ldr	r3, [r7, #0]
 8037ee6:	2b00      	cmp	r3, #0
 8037ee8:	d003      	beq.n	8037ef2 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8037eea:	f06f 0301 	mvn.w	r3, #1
 8037eee:	61fb      	str	r3, [r7, #28]
 8037ef0:	e002      	b.n	8037ef8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8037ef2:	f06f 0302 	mvn.w	r3, #2
 8037ef6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8037ef8:	69fb      	ldr	r3, [r7, #28]
}
 8037efa:	4618      	mov	r0, r3
 8037efc:	3720      	adds	r7, #32
 8037efe:	46bd      	mov	sp, r7
 8037f00:	bd80      	pop	{r7, pc}
 8037f02:	bf00      	nop
 8037f04:	20000f34 	.word	0x20000f34

08037f08 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8037f08:	b580      	push	{r7, lr}
 8037f0a:	b088      	sub	sp, #32
 8037f0c:	af00      	add	r7, sp, #0
 8037f0e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8037f10:	687b      	ldr	r3, [r7, #4]
 8037f12:	f023 0301 	bic.w	r3, r3, #1
 8037f16:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8037f18:	687b      	ldr	r3, [r7, #4]
 8037f1a:	f003 0301 	and.w	r3, r3, #1
 8037f1e:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8037f20:	2300      	movs	r3, #0
 8037f22:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8037f24:	f3ef 8305 	mrs	r3, IPSR
 8037f28:	613b      	str	r3, [r7, #16]
  return(result);
 8037f2a:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8037f2c:	2b00      	cmp	r3, #0
 8037f2e:	d10f      	bne.n	8037f50 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8037f30:	f3ef 8310 	mrs	r3, PRIMASK
 8037f34:	60fb      	str	r3, [r7, #12]
  return(result);
 8037f36:	68fb      	ldr	r3, [r7, #12]
 8037f38:	2b00      	cmp	r3, #0
 8037f3a:	d105      	bne.n	8037f48 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8037f3c:	f3ef 8311 	mrs	r3, BASEPRI
 8037f40:	60bb      	str	r3, [r7, #8]
  return(result);
 8037f42:	68bb      	ldr	r3, [r7, #8]
 8037f44:	2b00      	cmp	r3, #0
 8037f46:	d007      	beq.n	8037f58 <osMutexRelease+0x50>
 8037f48:	4b16      	ldr	r3, [pc, #88]	; (8037fa4 <osMutexRelease+0x9c>)
 8037f4a:	681b      	ldr	r3, [r3, #0]
 8037f4c:	2b02      	cmp	r3, #2
 8037f4e:	d103      	bne.n	8037f58 <osMutexRelease+0x50>
    stat = osErrorISR;
 8037f50:	f06f 0305 	mvn.w	r3, #5
 8037f54:	61fb      	str	r3, [r7, #28]
 8037f56:	e01f      	b.n	8037f98 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8037f58:	69bb      	ldr	r3, [r7, #24]
 8037f5a:	2b00      	cmp	r3, #0
 8037f5c:	d103      	bne.n	8037f66 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8037f5e:	f06f 0303 	mvn.w	r3, #3
 8037f62:	61fb      	str	r3, [r7, #28]
 8037f64:	e018      	b.n	8037f98 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8037f66:	697b      	ldr	r3, [r7, #20]
 8037f68:	2b00      	cmp	r3, #0
 8037f6a:	d009      	beq.n	8037f80 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8037f6c:	69b8      	ldr	r0, [r7, #24]
 8037f6e:	f000 fddf 	bl	8038b30 <xQueueGiveMutexRecursive>
 8037f72:	4603      	mov	r3, r0
 8037f74:	2b01      	cmp	r3, #1
 8037f76:	d00f      	beq.n	8037f98 <osMutexRelease+0x90>
        stat = osErrorResource;
 8037f78:	f06f 0302 	mvn.w	r3, #2
 8037f7c:	61fb      	str	r3, [r7, #28]
 8037f7e:	e00b      	b.n	8037f98 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8037f80:	2300      	movs	r3, #0
 8037f82:	2200      	movs	r2, #0
 8037f84:	2100      	movs	r1, #0
 8037f86:	69b8      	ldr	r0, [r7, #24]
 8037f88:	f000 fe3a 	bl	8038c00 <xQueueGenericSend>
 8037f8c:	4603      	mov	r3, r0
 8037f8e:	2b01      	cmp	r3, #1
 8037f90:	d002      	beq.n	8037f98 <osMutexRelease+0x90>
        stat = osErrorResource;
 8037f92:	f06f 0302 	mvn.w	r3, #2
 8037f96:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8037f98:	69fb      	ldr	r3, [r7, #28]
}
 8037f9a:	4618      	mov	r0, r3
 8037f9c:	3720      	adds	r7, #32
 8037f9e:	46bd      	mov	sp, r7
 8037fa0:	bd80      	pop	{r7, pc}
 8037fa2:	bf00      	nop
 8037fa4:	20000f34 	.word	0x20000f34

08037fa8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8037fa8:	b580      	push	{r7, lr}
 8037faa:	b08c      	sub	sp, #48	; 0x30
 8037fac:	af02      	add	r7, sp, #8
 8037fae:	60f8      	str	r0, [r7, #12]
 8037fb0:	60b9      	str	r1, [r7, #8]
 8037fb2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8037fb4:	2300      	movs	r3, #0
 8037fb6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8037fb8:	f3ef 8305 	mrs	r3, IPSR
 8037fbc:	61bb      	str	r3, [r7, #24]
  return(result);
 8037fbe:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8037fc0:	2b00      	cmp	r3, #0
 8037fc2:	d170      	bne.n	80380a6 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8037fc4:	f3ef 8310 	mrs	r3, PRIMASK
 8037fc8:	617b      	str	r3, [r7, #20]
  return(result);
 8037fca:	697b      	ldr	r3, [r7, #20]
 8037fcc:	2b00      	cmp	r3, #0
 8037fce:	d105      	bne.n	8037fdc <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8037fd0:	f3ef 8311 	mrs	r3, BASEPRI
 8037fd4:	613b      	str	r3, [r7, #16]
  return(result);
 8037fd6:	693b      	ldr	r3, [r7, #16]
 8037fd8:	2b00      	cmp	r3, #0
 8037fda:	d003      	beq.n	8037fe4 <osMessageQueueNew+0x3c>
 8037fdc:	4b34      	ldr	r3, [pc, #208]	; (80380b0 <osMessageQueueNew+0x108>)
 8037fde:	681b      	ldr	r3, [r3, #0]
 8037fe0:	2b02      	cmp	r3, #2
 8037fe2:	d060      	beq.n	80380a6 <osMessageQueueNew+0xfe>
 8037fe4:	68fb      	ldr	r3, [r7, #12]
 8037fe6:	2b00      	cmp	r3, #0
 8037fe8:	d05d      	beq.n	80380a6 <osMessageQueueNew+0xfe>
 8037fea:	68bb      	ldr	r3, [r7, #8]
 8037fec:	2b00      	cmp	r3, #0
 8037fee:	d05a      	beq.n	80380a6 <osMessageQueueNew+0xfe>
    mem = -1;
 8037ff0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8037ff4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8037ff6:	687b      	ldr	r3, [r7, #4]
 8037ff8:	2b00      	cmp	r3, #0
 8037ffa:	d029      	beq.n	8038050 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8037ffc:	687b      	ldr	r3, [r7, #4]
 8037ffe:	689b      	ldr	r3, [r3, #8]
 8038000:	2b00      	cmp	r3, #0
 8038002:	d012      	beq.n	803802a <osMessageQueueNew+0x82>
 8038004:	687b      	ldr	r3, [r7, #4]
 8038006:	68db      	ldr	r3, [r3, #12]
 8038008:	2b4f      	cmp	r3, #79	; 0x4f
 803800a:	d90e      	bls.n	803802a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 803800c:	687b      	ldr	r3, [r7, #4]
 803800e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8038010:	2b00      	cmp	r3, #0
 8038012:	d00a      	beq.n	803802a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8038014:	687b      	ldr	r3, [r7, #4]
 8038016:	695a      	ldr	r2, [r3, #20]
 8038018:	68fb      	ldr	r3, [r7, #12]
 803801a:	68b9      	ldr	r1, [r7, #8]
 803801c:	fb01 f303 	mul.w	r3, r1, r3
 8038020:	429a      	cmp	r2, r3
 8038022:	d302      	bcc.n	803802a <osMessageQueueNew+0x82>
        mem = 1;
 8038024:	2301      	movs	r3, #1
 8038026:	623b      	str	r3, [r7, #32]
 8038028:	e014      	b.n	8038054 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 803802a:	687b      	ldr	r3, [r7, #4]
 803802c:	689b      	ldr	r3, [r3, #8]
 803802e:	2b00      	cmp	r3, #0
 8038030:	d110      	bne.n	8038054 <osMessageQueueNew+0xac>
 8038032:	687b      	ldr	r3, [r7, #4]
 8038034:	68db      	ldr	r3, [r3, #12]
 8038036:	2b00      	cmp	r3, #0
 8038038:	d10c      	bne.n	8038054 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 803803a:	687b      	ldr	r3, [r7, #4]
 803803c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 803803e:	2b00      	cmp	r3, #0
 8038040:	d108      	bne.n	8038054 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8038042:	687b      	ldr	r3, [r7, #4]
 8038044:	695b      	ldr	r3, [r3, #20]
 8038046:	2b00      	cmp	r3, #0
 8038048:	d104      	bne.n	8038054 <osMessageQueueNew+0xac>
          mem = 0;
 803804a:	2300      	movs	r3, #0
 803804c:	623b      	str	r3, [r7, #32]
 803804e:	e001      	b.n	8038054 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8038050:	2300      	movs	r3, #0
 8038052:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8038054:	6a3b      	ldr	r3, [r7, #32]
 8038056:	2b01      	cmp	r3, #1
 8038058:	d10c      	bne.n	8038074 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 803805a:	687b      	ldr	r3, [r7, #4]
 803805c:	691a      	ldr	r2, [r3, #16]
 803805e:	687b      	ldr	r3, [r7, #4]
 8038060:	6899      	ldr	r1, [r3, #8]
 8038062:	2300      	movs	r3, #0
 8038064:	9300      	str	r3, [sp, #0]
 8038066:	460b      	mov	r3, r1
 8038068:	68b9      	ldr	r1, [r7, #8]
 803806a:	68f8      	ldr	r0, [r7, #12]
 803806c:	f000 fc3e 	bl	80388ec <xQueueGenericCreateStatic>
 8038070:	6278      	str	r0, [r7, #36]	; 0x24
 8038072:	e008      	b.n	8038086 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8038074:	6a3b      	ldr	r3, [r7, #32]
 8038076:	2b00      	cmp	r3, #0
 8038078:	d105      	bne.n	8038086 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 803807a:	2200      	movs	r2, #0
 803807c:	68b9      	ldr	r1, [r7, #8]
 803807e:	68f8      	ldr	r0, [r7, #12]
 8038080:	f000 fca7 	bl	80389d2 <xQueueGenericCreate>
 8038084:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8038086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038088:	2b00      	cmp	r3, #0
 803808a:	d00c      	beq.n	80380a6 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 803808c:	687b      	ldr	r3, [r7, #4]
 803808e:	2b00      	cmp	r3, #0
 8038090:	d003      	beq.n	803809a <osMessageQueueNew+0xf2>
        name = attr->name;
 8038092:	687b      	ldr	r3, [r7, #4]
 8038094:	681b      	ldr	r3, [r3, #0]
 8038096:	61fb      	str	r3, [r7, #28]
 8038098:	e001      	b.n	803809e <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 803809a:	2300      	movs	r3, #0
 803809c:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 803809e:	69f9      	ldr	r1, [r7, #28]
 80380a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80380a2:	f001 fac5 	bl	8039630 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80380a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80380a8:	4618      	mov	r0, r3
 80380aa:	3728      	adds	r7, #40	; 0x28
 80380ac:	46bd      	mov	sp, r7
 80380ae:	bd80      	pop	{r7, pc}
 80380b0:	20000f34 	.word	0x20000f34

080380b4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80380b4:	b580      	push	{r7, lr}
 80380b6:	b08a      	sub	sp, #40	; 0x28
 80380b8:	af00      	add	r7, sp, #0
 80380ba:	60f8      	str	r0, [r7, #12]
 80380bc:	60b9      	str	r1, [r7, #8]
 80380be:	603b      	str	r3, [r7, #0]
 80380c0:	4613      	mov	r3, r2
 80380c2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80380c4:	68fb      	ldr	r3, [r7, #12]
 80380c6:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80380c8:	2300      	movs	r3, #0
 80380ca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80380cc:	f3ef 8305 	mrs	r3, IPSR
 80380d0:	61fb      	str	r3, [r7, #28]
  return(result);
 80380d2:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80380d4:	2b00      	cmp	r3, #0
 80380d6:	d10f      	bne.n	80380f8 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80380d8:	f3ef 8310 	mrs	r3, PRIMASK
 80380dc:	61bb      	str	r3, [r7, #24]
  return(result);
 80380de:	69bb      	ldr	r3, [r7, #24]
 80380e0:	2b00      	cmp	r3, #0
 80380e2:	d105      	bne.n	80380f0 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80380e4:	f3ef 8311 	mrs	r3, BASEPRI
 80380e8:	617b      	str	r3, [r7, #20]
  return(result);
 80380ea:	697b      	ldr	r3, [r7, #20]
 80380ec:	2b00      	cmp	r3, #0
 80380ee:	d02c      	beq.n	803814a <osMessageQueuePut+0x96>
 80380f0:	4b28      	ldr	r3, [pc, #160]	; (8038194 <osMessageQueuePut+0xe0>)
 80380f2:	681b      	ldr	r3, [r3, #0]
 80380f4:	2b02      	cmp	r3, #2
 80380f6:	d128      	bne.n	803814a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80380f8:	6a3b      	ldr	r3, [r7, #32]
 80380fa:	2b00      	cmp	r3, #0
 80380fc:	d005      	beq.n	803810a <osMessageQueuePut+0x56>
 80380fe:	68bb      	ldr	r3, [r7, #8]
 8038100:	2b00      	cmp	r3, #0
 8038102:	d002      	beq.n	803810a <osMessageQueuePut+0x56>
 8038104:	683b      	ldr	r3, [r7, #0]
 8038106:	2b00      	cmp	r3, #0
 8038108:	d003      	beq.n	8038112 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 803810a:	f06f 0303 	mvn.w	r3, #3
 803810e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8038110:	e039      	b.n	8038186 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8038112:	2300      	movs	r3, #0
 8038114:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8038116:	f107 0210 	add.w	r2, r7, #16
 803811a:	2300      	movs	r3, #0
 803811c:	68b9      	ldr	r1, [r7, #8]
 803811e:	6a38      	ldr	r0, [r7, #32]
 8038120:	f000 fe68 	bl	8038df4 <xQueueGenericSendFromISR>
 8038124:	4603      	mov	r3, r0
 8038126:	2b01      	cmp	r3, #1
 8038128:	d003      	beq.n	8038132 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 803812a:	f06f 0302 	mvn.w	r3, #2
 803812e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8038130:	e029      	b.n	8038186 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8038132:	693b      	ldr	r3, [r7, #16]
 8038134:	2b00      	cmp	r3, #0
 8038136:	d026      	beq.n	8038186 <osMessageQueuePut+0xd2>
 8038138:	4b17      	ldr	r3, [pc, #92]	; (8038198 <osMessageQueuePut+0xe4>)
 803813a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 803813e:	601a      	str	r2, [r3, #0]
 8038140:	f3bf 8f4f 	dsb	sy
 8038144:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8038148:	e01d      	b.n	8038186 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 803814a:	6a3b      	ldr	r3, [r7, #32]
 803814c:	2b00      	cmp	r3, #0
 803814e:	d002      	beq.n	8038156 <osMessageQueuePut+0xa2>
 8038150:	68bb      	ldr	r3, [r7, #8]
 8038152:	2b00      	cmp	r3, #0
 8038154:	d103      	bne.n	803815e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8038156:	f06f 0303 	mvn.w	r3, #3
 803815a:	627b      	str	r3, [r7, #36]	; 0x24
 803815c:	e014      	b.n	8038188 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 803815e:	2300      	movs	r3, #0
 8038160:	683a      	ldr	r2, [r7, #0]
 8038162:	68b9      	ldr	r1, [r7, #8]
 8038164:	6a38      	ldr	r0, [r7, #32]
 8038166:	f000 fd4b 	bl	8038c00 <xQueueGenericSend>
 803816a:	4603      	mov	r3, r0
 803816c:	2b01      	cmp	r3, #1
 803816e:	d00b      	beq.n	8038188 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8038170:	683b      	ldr	r3, [r7, #0]
 8038172:	2b00      	cmp	r3, #0
 8038174:	d003      	beq.n	803817e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8038176:	f06f 0301 	mvn.w	r3, #1
 803817a:	627b      	str	r3, [r7, #36]	; 0x24
 803817c:	e004      	b.n	8038188 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 803817e:	f06f 0302 	mvn.w	r3, #2
 8038182:	627b      	str	r3, [r7, #36]	; 0x24
 8038184:	e000      	b.n	8038188 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8038186:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8038188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 803818a:	4618      	mov	r0, r3
 803818c:	3728      	adds	r7, #40	; 0x28
 803818e:	46bd      	mov	sp, r7
 8038190:	bd80      	pop	{r7, pc}
 8038192:	bf00      	nop
 8038194:	20000f34 	.word	0x20000f34
 8038198:	e000ed04 	.word	0xe000ed04

0803819c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 803819c:	b580      	push	{r7, lr}
 803819e:	b08a      	sub	sp, #40	; 0x28
 80381a0:	af00      	add	r7, sp, #0
 80381a2:	60f8      	str	r0, [r7, #12]
 80381a4:	60b9      	str	r1, [r7, #8]
 80381a6:	607a      	str	r2, [r7, #4]
 80381a8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80381aa:	68fb      	ldr	r3, [r7, #12]
 80381ac:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80381ae:	2300      	movs	r3, #0
 80381b0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80381b2:	f3ef 8305 	mrs	r3, IPSR
 80381b6:	61fb      	str	r3, [r7, #28]
  return(result);
 80381b8:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80381ba:	2b00      	cmp	r3, #0
 80381bc:	d10f      	bne.n	80381de <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80381be:	f3ef 8310 	mrs	r3, PRIMASK
 80381c2:	61bb      	str	r3, [r7, #24]
  return(result);
 80381c4:	69bb      	ldr	r3, [r7, #24]
 80381c6:	2b00      	cmp	r3, #0
 80381c8:	d105      	bne.n	80381d6 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80381ca:	f3ef 8311 	mrs	r3, BASEPRI
 80381ce:	617b      	str	r3, [r7, #20]
  return(result);
 80381d0:	697b      	ldr	r3, [r7, #20]
 80381d2:	2b00      	cmp	r3, #0
 80381d4:	d02c      	beq.n	8038230 <osMessageQueueGet+0x94>
 80381d6:	4b28      	ldr	r3, [pc, #160]	; (8038278 <osMessageQueueGet+0xdc>)
 80381d8:	681b      	ldr	r3, [r3, #0]
 80381da:	2b02      	cmp	r3, #2
 80381dc:	d128      	bne.n	8038230 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80381de:	6a3b      	ldr	r3, [r7, #32]
 80381e0:	2b00      	cmp	r3, #0
 80381e2:	d005      	beq.n	80381f0 <osMessageQueueGet+0x54>
 80381e4:	68bb      	ldr	r3, [r7, #8]
 80381e6:	2b00      	cmp	r3, #0
 80381e8:	d002      	beq.n	80381f0 <osMessageQueueGet+0x54>
 80381ea:	683b      	ldr	r3, [r7, #0]
 80381ec:	2b00      	cmp	r3, #0
 80381ee:	d003      	beq.n	80381f8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80381f0:	f06f 0303 	mvn.w	r3, #3
 80381f4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80381f6:	e038      	b.n	803826a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80381f8:	2300      	movs	r3, #0
 80381fa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80381fc:	f107 0310 	add.w	r3, r7, #16
 8038200:	461a      	mov	r2, r3
 8038202:	68b9      	ldr	r1, [r7, #8]
 8038204:	6a38      	ldr	r0, [r7, #32]
 8038206:	f001 f86d 	bl	80392e4 <xQueueReceiveFromISR>
 803820a:	4603      	mov	r3, r0
 803820c:	2b01      	cmp	r3, #1
 803820e:	d003      	beq.n	8038218 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8038210:	f06f 0302 	mvn.w	r3, #2
 8038214:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8038216:	e028      	b.n	803826a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8038218:	693b      	ldr	r3, [r7, #16]
 803821a:	2b00      	cmp	r3, #0
 803821c:	d025      	beq.n	803826a <osMessageQueueGet+0xce>
 803821e:	4b17      	ldr	r3, [pc, #92]	; (803827c <osMessageQueueGet+0xe0>)
 8038220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8038224:	601a      	str	r2, [r3, #0]
 8038226:	f3bf 8f4f 	dsb	sy
 803822a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 803822e:	e01c      	b.n	803826a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8038230:	6a3b      	ldr	r3, [r7, #32]
 8038232:	2b00      	cmp	r3, #0
 8038234:	d002      	beq.n	803823c <osMessageQueueGet+0xa0>
 8038236:	68bb      	ldr	r3, [r7, #8]
 8038238:	2b00      	cmp	r3, #0
 803823a:	d103      	bne.n	8038244 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 803823c:	f06f 0303 	mvn.w	r3, #3
 8038240:	627b      	str	r3, [r7, #36]	; 0x24
 8038242:	e013      	b.n	803826c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8038244:	683a      	ldr	r2, [r7, #0]
 8038246:	68b9      	ldr	r1, [r7, #8]
 8038248:	6a38      	ldr	r0, [r7, #32]
 803824a:	f000 fe67 	bl	8038f1c <xQueueReceive>
 803824e:	4603      	mov	r3, r0
 8038250:	2b01      	cmp	r3, #1
 8038252:	d00b      	beq.n	803826c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8038254:	683b      	ldr	r3, [r7, #0]
 8038256:	2b00      	cmp	r3, #0
 8038258:	d003      	beq.n	8038262 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 803825a:	f06f 0301 	mvn.w	r3, #1
 803825e:	627b      	str	r3, [r7, #36]	; 0x24
 8038260:	e004      	b.n	803826c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8038262:	f06f 0302 	mvn.w	r3, #2
 8038266:	627b      	str	r3, [r7, #36]	; 0x24
 8038268:	e000      	b.n	803826c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 803826a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 803826c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 803826e:	4618      	mov	r0, r3
 8038270:	3728      	adds	r7, #40	; 0x28
 8038272:	46bd      	mov	sp, r7
 8038274:	bd80      	pop	{r7, pc}
 8038276:	bf00      	nop
 8038278:	20000f34 	.word	0x20000f34
 803827c:	e000ed04 	.word	0xe000ed04

08038280 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8038280:	b480      	push	{r7}
 8038282:	b085      	sub	sp, #20
 8038284:	af00      	add	r7, sp, #0
 8038286:	60f8      	str	r0, [r7, #12]
 8038288:	60b9      	str	r1, [r7, #8]
 803828a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 803828c:	68fb      	ldr	r3, [r7, #12]
 803828e:	4a07      	ldr	r2, [pc, #28]	; (80382ac <vApplicationGetIdleTaskMemory+0x2c>)
 8038290:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8038292:	68bb      	ldr	r3, [r7, #8]
 8038294:	4a06      	ldr	r2, [pc, #24]	; (80382b0 <vApplicationGetIdleTaskMemory+0x30>)
 8038296:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8038298:	687b      	ldr	r3, [r7, #4]
 803829a:	2280      	movs	r2, #128	; 0x80
 803829c:	601a      	str	r2, [r3, #0]
}
 803829e:	bf00      	nop
 80382a0:	3714      	adds	r7, #20
 80382a2:	46bd      	mov	sp, r7
 80382a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80382a8:	4770      	bx	lr
 80382aa:	bf00      	nop
 80382ac:	20000f38 	.word	0x20000f38
 80382b0:	20000f98 	.word	0x20000f98

080382b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80382b4:	b480      	push	{r7}
 80382b6:	b085      	sub	sp, #20
 80382b8:	af00      	add	r7, sp, #0
 80382ba:	60f8      	str	r0, [r7, #12]
 80382bc:	60b9      	str	r1, [r7, #8]
 80382be:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80382c0:	68fb      	ldr	r3, [r7, #12]
 80382c2:	4a07      	ldr	r2, [pc, #28]	; (80382e0 <vApplicationGetTimerTaskMemory+0x2c>)
 80382c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80382c6:	68bb      	ldr	r3, [r7, #8]
 80382c8:	4a06      	ldr	r2, [pc, #24]	; (80382e4 <vApplicationGetTimerTaskMemory+0x30>)
 80382ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80382cc:	687b      	ldr	r3, [r7, #4]
 80382ce:	2280      	movs	r2, #128	; 0x80
 80382d0:	601a      	str	r2, [r3, #0]
}
 80382d2:	bf00      	nop
 80382d4:	3714      	adds	r7, #20
 80382d6:	46bd      	mov	sp, r7
 80382d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80382dc:	4770      	bx	lr
 80382de:	bf00      	nop
 80382e0:	20001198 	.word	0x20001198
 80382e4:	200011f8 	.word	0x200011f8

080382e8 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80382e8:	b580      	push	{r7, lr}
 80382ea:	b086      	sub	sp, #24
 80382ec:	af00      	add	r7, sp, #0
 80382ee:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80382f0:	687b      	ldr	r3, [r7, #4]
 80382f2:	2b00      	cmp	r3, #0
 80382f4:	d109      	bne.n	803830a <xEventGroupCreateStatic+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80382f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80382fa:	f383 8811 	msr	BASEPRI, r3
 80382fe:	f3bf 8f6f 	isb	sy
 8038302:	f3bf 8f4f 	dsb	sy
 8038306:	613b      	str	r3, [r7, #16]
 8038308:	e7fe      	b.n	8038308 <xEventGroupCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 803830a:	2320      	movs	r3, #32
 803830c:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 803830e:	68bb      	ldr	r3, [r7, #8]
 8038310:	2b20      	cmp	r3, #32
 8038312:	d009      	beq.n	8038328 <xEventGroupCreateStatic+0x40>
 8038314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038318:	f383 8811 	msr	BASEPRI, r3
 803831c:	f3bf 8f6f 	isb	sy
 8038320:	f3bf 8f4f 	dsb	sy
 8038324:	60fb      	str	r3, [r7, #12]
 8038326:	e7fe      	b.n	8038326 <xEventGroupCreateStatic+0x3e>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8038328:	687b      	ldr	r3, [r7, #4]
 803832a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 803832c:	697b      	ldr	r3, [r7, #20]
 803832e:	2b00      	cmp	r3, #0
 8038330:	d00a      	beq.n	8038348 <xEventGroupCreateStatic+0x60>
		{
			pxEventBits->uxEventBits = 0;
 8038332:	697b      	ldr	r3, [r7, #20]
 8038334:	2200      	movs	r2, #0
 8038336:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8038338:	697b      	ldr	r3, [r7, #20]
 803833a:	3304      	adds	r3, #4
 803833c:	4618      	mov	r0, r3
 803833e:	f000 f9b9 	bl	80386b4 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8038342:	697b      	ldr	r3, [r7, #20]
 8038344:	2201      	movs	r2, #1
 8038346:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8038348:	697b      	ldr	r3, [r7, #20]
	}
 803834a:	4618      	mov	r0, r3
 803834c:	3718      	adds	r7, #24
 803834e:	46bd      	mov	sp, r7
 8038350:	bd80      	pop	{r7, pc}

08038352 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8038352:	b580      	push	{r7, lr}
 8038354:	b082      	sub	sp, #8
 8038356:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8038358:	2020      	movs	r0, #32
 803835a:	f003 faa1 	bl	803b8a0 <pvPortMalloc>
 803835e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8038360:	687b      	ldr	r3, [r7, #4]
 8038362:	2b00      	cmp	r3, #0
 8038364:	d00a      	beq.n	803837c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8038366:	687b      	ldr	r3, [r7, #4]
 8038368:	2200      	movs	r2, #0
 803836a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 803836c:	687b      	ldr	r3, [r7, #4]
 803836e:	3304      	adds	r3, #4
 8038370:	4618      	mov	r0, r3
 8038372:	f000 f99f 	bl	80386b4 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8038376:	687b      	ldr	r3, [r7, #4]
 8038378:	2200      	movs	r2, #0
 803837a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 803837c:	687b      	ldr	r3, [r7, #4]
	}
 803837e:	4618      	mov	r0, r3
 8038380:	3708      	adds	r7, #8
 8038382:	46bd      	mov	sp, r7
 8038384:	bd80      	pop	{r7, pc}
	...

08038388 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8038388:	b580      	push	{r7, lr}
 803838a:	b090      	sub	sp, #64	; 0x40
 803838c:	af00      	add	r7, sp, #0
 803838e:	60f8      	str	r0, [r7, #12]
 8038390:	60b9      	str	r1, [r7, #8]
 8038392:	607a      	str	r2, [r7, #4]
 8038394:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8038396:	68fb      	ldr	r3, [r7, #12]
 8038398:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 803839a:	2300      	movs	r3, #0
 803839c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 803839e:	2300      	movs	r3, #0
 80383a0:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80383a2:	68fb      	ldr	r3, [r7, #12]
 80383a4:	2b00      	cmp	r3, #0
 80383a6:	d109      	bne.n	80383bc <xEventGroupWaitBits+0x34>
 80383a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80383ac:	f383 8811 	msr	BASEPRI, r3
 80383b0:	f3bf 8f6f 	isb	sy
 80383b4:	f3bf 8f4f 	dsb	sy
 80383b8:	623b      	str	r3, [r7, #32]
 80383ba:	e7fe      	b.n	80383ba <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80383bc:	68bb      	ldr	r3, [r7, #8]
 80383be:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80383c2:	2b00      	cmp	r3, #0
 80383c4:	d009      	beq.n	80383da <xEventGroupWaitBits+0x52>
 80383c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80383ca:	f383 8811 	msr	BASEPRI, r3
 80383ce:	f3bf 8f6f 	isb	sy
 80383d2:	f3bf 8f4f 	dsb	sy
 80383d6:	61fb      	str	r3, [r7, #28]
 80383d8:	e7fe      	b.n	80383d8 <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 80383da:	68bb      	ldr	r3, [r7, #8]
 80383dc:	2b00      	cmp	r3, #0
 80383de:	d109      	bne.n	80383f4 <xEventGroupWaitBits+0x6c>
 80383e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80383e4:	f383 8811 	msr	BASEPRI, r3
 80383e8:	f3bf 8f6f 	isb	sy
 80383ec:	f3bf 8f4f 	dsb	sy
 80383f0:	61bb      	str	r3, [r7, #24]
 80383f2:	e7fe      	b.n	80383f2 <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80383f4:	f002 f8cc 	bl	803a590 <xTaskGetSchedulerState>
 80383f8:	4603      	mov	r3, r0
 80383fa:	2b00      	cmp	r3, #0
 80383fc:	d102      	bne.n	8038404 <xEventGroupWaitBits+0x7c>
 80383fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8038400:	2b00      	cmp	r3, #0
 8038402:	d101      	bne.n	8038408 <xEventGroupWaitBits+0x80>
 8038404:	2301      	movs	r3, #1
 8038406:	e000      	b.n	803840a <xEventGroupWaitBits+0x82>
 8038408:	2300      	movs	r3, #0
 803840a:	2b00      	cmp	r3, #0
 803840c:	d109      	bne.n	8038422 <xEventGroupWaitBits+0x9a>
 803840e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038412:	f383 8811 	msr	BASEPRI, r3
 8038416:	f3bf 8f6f 	isb	sy
 803841a:	f3bf 8f4f 	dsb	sy
 803841e:	617b      	str	r3, [r7, #20]
 8038420:	e7fe      	b.n	8038420 <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 8038422:	f001 fc17 	bl	8039c54 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8038426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8038428:	681b      	ldr	r3, [r3, #0]
 803842a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 803842c:	683a      	ldr	r2, [r7, #0]
 803842e:	68b9      	ldr	r1, [r7, #8]
 8038430:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8038432:	f000 f909 	bl	8038648 <prvTestWaitCondition>
 8038436:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8038438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803843a:	2b00      	cmp	r3, #0
 803843c:	d00e      	beq.n	803845c <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 803843e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8038440:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8038442:	2300      	movs	r3, #0
 8038444:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8038446:	687b      	ldr	r3, [r7, #4]
 8038448:	2b00      	cmp	r3, #0
 803844a:	d028      	beq.n	803849e <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 803844c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803844e:	681a      	ldr	r2, [r3, #0]
 8038450:	68bb      	ldr	r3, [r7, #8]
 8038452:	43db      	mvns	r3, r3
 8038454:	401a      	ands	r2, r3
 8038456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8038458:	601a      	str	r2, [r3, #0]
 803845a:	e020      	b.n	803849e <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 803845c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 803845e:	2b00      	cmp	r3, #0
 8038460:	d104      	bne.n	803846c <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8038462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8038464:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8038466:	2301      	movs	r3, #1
 8038468:	633b      	str	r3, [r7, #48]	; 0x30
 803846a:	e018      	b.n	803849e <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 803846c:	687b      	ldr	r3, [r7, #4]
 803846e:	2b00      	cmp	r3, #0
 8038470:	d003      	beq.n	803847a <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8038472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8038474:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8038478:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 803847a:	683b      	ldr	r3, [r7, #0]
 803847c:	2b00      	cmp	r3, #0
 803847e:	d003      	beq.n	8038488 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8038480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8038482:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8038486:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8038488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803848a:	1d18      	adds	r0, r3, #4
 803848c:	68ba      	ldr	r2, [r7, #8]
 803848e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8038490:	4313      	orrs	r3, r2
 8038492:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8038494:	4619      	mov	r1, r3
 8038496:	f001 fde1 	bl	803a05c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 803849a:	2300      	movs	r3, #0
 803849c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 803849e:	f001 fbe7 	bl	8039c70 <xTaskResumeAll>
 80384a2:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80384a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80384a6:	2b00      	cmp	r3, #0
 80384a8:	d031      	beq.n	803850e <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 80384aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80384ac:	2b00      	cmp	r3, #0
 80384ae:	d107      	bne.n	80384c0 <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 80384b0:	4b19      	ldr	r3, [pc, #100]	; (8038518 <xEventGroupWaitBits+0x190>)
 80384b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80384b6:	601a      	str	r2, [r3, #0]
 80384b8:	f3bf 8f4f 	dsb	sy
 80384bc:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80384c0:	f002 f9d8 	bl	803a874 <uxTaskResetEventItemValue>
 80384c4:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80384c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80384c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80384cc:	2b00      	cmp	r3, #0
 80384ce:	d11a      	bne.n	8038506 <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 80384d0:	f003 f8cc 	bl	803b66c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80384d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80384d6:	681b      	ldr	r3, [r3, #0]
 80384d8:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80384da:	683a      	ldr	r2, [r7, #0]
 80384dc:	68b9      	ldr	r1, [r7, #8]
 80384de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80384e0:	f000 f8b2 	bl	8038648 <prvTestWaitCondition>
 80384e4:	4603      	mov	r3, r0
 80384e6:	2b00      	cmp	r3, #0
 80384e8:	d009      	beq.n	80384fe <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 80384ea:	687b      	ldr	r3, [r7, #4]
 80384ec:	2b00      	cmp	r3, #0
 80384ee:	d006      	beq.n	80384fe <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80384f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80384f2:	681a      	ldr	r2, [r3, #0]
 80384f4:	68bb      	ldr	r3, [r7, #8]
 80384f6:	43db      	mvns	r3, r3
 80384f8:	401a      	ands	r2, r3
 80384fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80384fc:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80384fe:	2301      	movs	r3, #1
 8038500:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8038502:	f003 f8e1 	bl	803b6c8 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8038506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8038508:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 803850c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 803850e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8038510:	4618      	mov	r0, r3
 8038512:	3740      	adds	r7, #64	; 0x40
 8038514:	46bd      	mov	sp, r7
 8038516:	bd80      	pop	{r7, pc}
 8038518:	e000ed04 	.word	0xe000ed04

0803851c <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 803851c:	b580      	push	{r7, lr}
 803851e:	b08e      	sub	sp, #56	; 0x38
 8038520:	af00      	add	r7, sp, #0
 8038522:	6078      	str	r0, [r7, #4]
 8038524:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8038526:	2300      	movs	r3, #0
 8038528:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 803852a:	687b      	ldr	r3, [r7, #4]
 803852c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 803852e:	2300      	movs	r3, #0
 8038530:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8038532:	687b      	ldr	r3, [r7, #4]
 8038534:	2b00      	cmp	r3, #0
 8038536:	d109      	bne.n	803854c <xEventGroupSetBits+0x30>
 8038538:	f04f 0350 	mov.w	r3, #80	; 0x50
 803853c:	f383 8811 	msr	BASEPRI, r3
 8038540:	f3bf 8f6f 	isb	sy
 8038544:	f3bf 8f4f 	dsb	sy
 8038548:	613b      	str	r3, [r7, #16]
 803854a:	e7fe      	b.n	803854a <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 803854c:	683b      	ldr	r3, [r7, #0]
 803854e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8038552:	2b00      	cmp	r3, #0
 8038554:	d009      	beq.n	803856a <xEventGroupSetBits+0x4e>
 8038556:	f04f 0350 	mov.w	r3, #80	; 0x50
 803855a:	f383 8811 	msr	BASEPRI, r3
 803855e:	f3bf 8f6f 	isb	sy
 8038562:	f3bf 8f4f 	dsb	sy
 8038566:	60fb      	str	r3, [r7, #12]
 8038568:	e7fe      	b.n	8038568 <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 803856a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803856c:	3304      	adds	r3, #4
 803856e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8038570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038572:	3308      	adds	r3, #8
 8038574:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8038576:	f001 fb6d 	bl	8039c54 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 803857a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803857c:	68db      	ldr	r3, [r3, #12]
 803857e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8038580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038582:	681a      	ldr	r2, [r3, #0]
 8038584:	683b      	ldr	r3, [r7, #0]
 8038586:	431a      	orrs	r2, r3
 8038588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803858a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 803858c:	e03c      	b.n	8038608 <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 803858e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8038590:	685b      	ldr	r3, [r3, #4]
 8038592:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8038594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8038596:	681b      	ldr	r3, [r3, #0]
 8038598:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 803859a:	2300      	movs	r3, #0
 803859c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 803859e:	69bb      	ldr	r3, [r7, #24]
 80385a0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80385a4:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80385a6:	69bb      	ldr	r3, [r7, #24]
 80385a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80385ac:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80385ae:	697b      	ldr	r3, [r7, #20]
 80385b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80385b4:	2b00      	cmp	r3, #0
 80385b6:	d108      	bne.n	80385ca <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80385b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80385ba:	681a      	ldr	r2, [r3, #0]
 80385bc:	69bb      	ldr	r3, [r7, #24]
 80385be:	4013      	ands	r3, r2
 80385c0:	2b00      	cmp	r3, #0
 80385c2:	d00b      	beq.n	80385dc <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 80385c4:	2301      	movs	r3, #1
 80385c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80385c8:	e008      	b.n	80385dc <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80385ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80385cc:	681a      	ldr	r2, [r3, #0]
 80385ce:	69bb      	ldr	r3, [r7, #24]
 80385d0:	4013      	ands	r3, r2
 80385d2:	69ba      	ldr	r2, [r7, #24]
 80385d4:	429a      	cmp	r2, r3
 80385d6:	d101      	bne.n	80385dc <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80385d8:	2301      	movs	r3, #1
 80385da:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80385dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80385de:	2b00      	cmp	r3, #0
 80385e0:	d010      	beq.n	8038604 <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80385e2:	697b      	ldr	r3, [r7, #20]
 80385e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80385e8:	2b00      	cmp	r3, #0
 80385ea:	d003      	beq.n	80385f4 <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80385ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80385ee:	69bb      	ldr	r3, [r7, #24]
 80385f0:	4313      	orrs	r3, r2
 80385f2:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80385f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80385f6:	681b      	ldr	r3, [r3, #0]
 80385f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80385fc:	4619      	mov	r1, r3
 80385fe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8038600:	f001 fdf2 	bl	803a1e8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8038604:	69fb      	ldr	r3, [r7, #28]
 8038606:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8038608:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 803860a:	6a3b      	ldr	r3, [r7, #32]
 803860c:	429a      	cmp	r2, r3
 803860e:	d1be      	bne.n	803858e <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8038610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038612:	681a      	ldr	r2, [r3, #0]
 8038614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038616:	43db      	mvns	r3, r3
 8038618:	401a      	ands	r2, r3
 803861a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803861c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 803861e:	f001 fb27 	bl	8039c70 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8038622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038624:	681b      	ldr	r3, [r3, #0]
}
 8038626:	4618      	mov	r0, r3
 8038628:	3738      	adds	r7, #56	; 0x38
 803862a:	46bd      	mov	sp, r7
 803862c:	bd80      	pop	{r7, pc}

0803862e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 803862e:	b580      	push	{r7, lr}
 8038630:	b082      	sub	sp, #8
 8038632:	af00      	add	r7, sp, #0
 8038634:	6078      	str	r0, [r7, #4]
 8038636:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8038638:	6839      	ldr	r1, [r7, #0]
 803863a:	6878      	ldr	r0, [r7, #4]
 803863c:	f7ff ff6e 	bl	803851c <xEventGroupSetBits>
}
 8038640:	bf00      	nop
 8038642:	3708      	adds	r7, #8
 8038644:	46bd      	mov	sp, r7
 8038646:	bd80      	pop	{r7, pc}

08038648 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8038648:	b480      	push	{r7}
 803864a:	b087      	sub	sp, #28
 803864c:	af00      	add	r7, sp, #0
 803864e:	60f8      	str	r0, [r7, #12]
 8038650:	60b9      	str	r1, [r7, #8]
 8038652:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8038654:	2300      	movs	r3, #0
 8038656:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8038658:	687b      	ldr	r3, [r7, #4]
 803865a:	2b00      	cmp	r3, #0
 803865c:	d107      	bne.n	803866e <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 803865e:	68fa      	ldr	r2, [r7, #12]
 8038660:	68bb      	ldr	r3, [r7, #8]
 8038662:	4013      	ands	r3, r2
 8038664:	2b00      	cmp	r3, #0
 8038666:	d00a      	beq.n	803867e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8038668:	2301      	movs	r3, #1
 803866a:	617b      	str	r3, [r7, #20]
 803866c:	e007      	b.n	803867e <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 803866e:	68fa      	ldr	r2, [r7, #12]
 8038670:	68bb      	ldr	r3, [r7, #8]
 8038672:	4013      	ands	r3, r2
 8038674:	68ba      	ldr	r2, [r7, #8]
 8038676:	429a      	cmp	r2, r3
 8038678:	d101      	bne.n	803867e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 803867a:	2301      	movs	r3, #1
 803867c:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 803867e:	697b      	ldr	r3, [r7, #20]
}
 8038680:	4618      	mov	r0, r3
 8038682:	371c      	adds	r7, #28
 8038684:	46bd      	mov	sp, r7
 8038686:	f85d 7b04 	ldr.w	r7, [sp], #4
 803868a:	4770      	bx	lr

0803868c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 803868c:	b580      	push	{r7, lr}
 803868e:	b086      	sub	sp, #24
 8038690:	af00      	add	r7, sp, #0
 8038692:	60f8      	str	r0, [r7, #12]
 8038694:	60b9      	str	r1, [r7, #8]
 8038696:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8038698:	687b      	ldr	r3, [r7, #4]
 803869a:	68ba      	ldr	r2, [r7, #8]
 803869c:	68f9      	ldr	r1, [r7, #12]
 803869e:	4804      	ldr	r0, [pc, #16]	; (80386b0 <xEventGroupSetBitsFromISR+0x24>)
 80386a0:	f002 fe9a 	bl	803b3d8 <xTimerPendFunctionCallFromISR>
 80386a4:	6178      	str	r0, [r7, #20]

		return xReturn;
 80386a6:	697b      	ldr	r3, [r7, #20]
	}
 80386a8:	4618      	mov	r0, r3
 80386aa:	3718      	adds	r7, #24
 80386ac:	46bd      	mov	sp, r7
 80386ae:	bd80      	pop	{r7, pc}
 80386b0:	0803862f 	.word	0x0803862f

080386b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80386b4:	b480      	push	{r7}
 80386b6:	b083      	sub	sp, #12
 80386b8:	af00      	add	r7, sp, #0
 80386ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80386bc:	687b      	ldr	r3, [r7, #4]
 80386be:	f103 0208 	add.w	r2, r3, #8
 80386c2:	687b      	ldr	r3, [r7, #4]
 80386c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80386c6:	687b      	ldr	r3, [r7, #4]
 80386c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80386cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80386ce:	687b      	ldr	r3, [r7, #4]
 80386d0:	f103 0208 	add.w	r2, r3, #8
 80386d4:	687b      	ldr	r3, [r7, #4]
 80386d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80386d8:	687b      	ldr	r3, [r7, #4]
 80386da:	f103 0208 	add.w	r2, r3, #8
 80386de:	687b      	ldr	r3, [r7, #4]
 80386e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80386e2:	687b      	ldr	r3, [r7, #4]
 80386e4:	2200      	movs	r2, #0
 80386e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80386e8:	bf00      	nop
 80386ea:	370c      	adds	r7, #12
 80386ec:	46bd      	mov	sp, r7
 80386ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80386f2:	4770      	bx	lr

080386f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80386f4:	b480      	push	{r7}
 80386f6:	b083      	sub	sp, #12
 80386f8:	af00      	add	r7, sp, #0
 80386fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80386fc:	687b      	ldr	r3, [r7, #4]
 80386fe:	2200      	movs	r2, #0
 8038700:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8038702:	bf00      	nop
 8038704:	370c      	adds	r7, #12
 8038706:	46bd      	mov	sp, r7
 8038708:	f85d 7b04 	ldr.w	r7, [sp], #4
 803870c:	4770      	bx	lr

0803870e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 803870e:	b480      	push	{r7}
 8038710:	b085      	sub	sp, #20
 8038712:	af00      	add	r7, sp, #0
 8038714:	6078      	str	r0, [r7, #4]
 8038716:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8038718:	687b      	ldr	r3, [r7, #4]
 803871a:	685b      	ldr	r3, [r3, #4]
 803871c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 803871e:	683b      	ldr	r3, [r7, #0]
 8038720:	68fa      	ldr	r2, [r7, #12]
 8038722:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8038724:	68fb      	ldr	r3, [r7, #12]
 8038726:	689a      	ldr	r2, [r3, #8]
 8038728:	683b      	ldr	r3, [r7, #0]
 803872a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 803872c:	68fb      	ldr	r3, [r7, #12]
 803872e:	689b      	ldr	r3, [r3, #8]
 8038730:	683a      	ldr	r2, [r7, #0]
 8038732:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8038734:	68fb      	ldr	r3, [r7, #12]
 8038736:	683a      	ldr	r2, [r7, #0]
 8038738:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 803873a:	683b      	ldr	r3, [r7, #0]
 803873c:	687a      	ldr	r2, [r7, #4]
 803873e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8038740:	687b      	ldr	r3, [r7, #4]
 8038742:	681b      	ldr	r3, [r3, #0]
 8038744:	1c5a      	adds	r2, r3, #1
 8038746:	687b      	ldr	r3, [r7, #4]
 8038748:	601a      	str	r2, [r3, #0]
}
 803874a:	bf00      	nop
 803874c:	3714      	adds	r7, #20
 803874e:	46bd      	mov	sp, r7
 8038750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038754:	4770      	bx	lr

08038756 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8038756:	b480      	push	{r7}
 8038758:	b085      	sub	sp, #20
 803875a:	af00      	add	r7, sp, #0
 803875c:	6078      	str	r0, [r7, #4]
 803875e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8038760:	683b      	ldr	r3, [r7, #0]
 8038762:	681b      	ldr	r3, [r3, #0]
 8038764:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8038766:	68bb      	ldr	r3, [r7, #8]
 8038768:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 803876c:	d103      	bne.n	8038776 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 803876e:	687b      	ldr	r3, [r7, #4]
 8038770:	691b      	ldr	r3, [r3, #16]
 8038772:	60fb      	str	r3, [r7, #12]
 8038774:	e00c      	b.n	8038790 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8038776:	687b      	ldr	r3, [r7, #4]
 8038778:	3308      	adds	r3, #8
 803877a:	60fb      	str	r3, [r7, #12]
 803877c:	e002      	b.n	8038784 <vListInsert+0x2e>
 803877e:	68fb      	ldr	r3, [r7, #12]
 8038780:	685b      	ldr	r3, [r3, #4]
 8038782:	60fb      	str	r3, [r7, #12]
 8038784:	68fb      	ldr	r3, [r7, #12]
 8038786:	685b      	ldr	r3, [r3, #4]
 8038788:	681b      	ldr	r3, [r3, #0]
 803878a:	68ba      	ldr	r2, [r7, #8]
 803878c:	429a      	cmp	r2, r3
 803878e:	d2f6      	bcs.n	803877e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8038790:	68fb      	ldr	r3, [r7, #12]
 8038792:	685a      	ldr	r2, [r3, #4]
 8038794:	683b      	ldr	r3, [r7, #0]
 8038796:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8038798:	683b      	ldr	r3, [r7, #0]
 803879a:	685b      	ldr	r3, [r3, #4]
 803879c:	683a      	ldr	r2, [r7, #0]
 803879e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80387a0:	683b      	ldr	r3, [r7, #0]
 80387a2:	68fa      	ldr	r2, [r7, #12]
 80387a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80387a6:	68fb      	ldr	r3, [r7, #12]
 80387a8:	683a      	ldr	r2, [r7, #0]
 80387aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80387ac:	683b      	ldr	r3, [r7, #0]
 80387ae:	687a      	ldr	r2, [r7, #4]
 80387b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80387b2:	687b      	ldr	r3, [r7, #4]
 80387b4:	681b      	ldr	r3, [r3, #0]
 80387b6:	1c5a      	adds	r2, r3, #1
 80387b8:	687b      	ldr	r3, [r7, #4]
 80387ba:	601a      	str	r2, [r3, #0]
}
 80387bc:	bf00      	nop
 80387be:	3714      	adds	r7, #20
 80387c0:	46bd      	mov	sp, r7
 80387c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80387c6:	4770      	bx	lr

080387c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80387c8:	b480      	push	{r7}
 80387ca:	b085      	sub	sp, #20
 80387cc:	af00      	add	r7, sp, #0
 80387ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80387d0:	687b      	ldr	r3, [r7, #4]
 80387d2:	691b      	ldr	r3, [r3, #16]
 80387d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80387d6:	687b      	ldr	r3, [r7, #4]
 80387d8:	685b      	ldr	r3, [r3, #4]
 80387da:	687a      	ldr	r2, [r7, #4]
 80387dc:	6892      	ldr	r2, [r2, #8]
 80387de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80387e0:	687b      	ldr	r3, [r7, #4]
 80387e2:	689b      	ldr	r3, [r3, #8]
 80387e4:	687a      	ldr	r2, [r7, #4]
 80387e6:	6852      	ldr	r2, [r2, #4]
 80387e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80387ea:	68fb      	ldr	r3, [r7, #12]
 80387ec:	685b      	ldr	r3, [r3, #4]
 80387ee:	687a      	ldr	r2, [r7, #4]
 80387f0:	429a      	cmp	r2, r3
 80387f2:	d103      	bne.n	80387fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80387f4:	687b      	ldr	r3, [r7, #4]
 80387f6:	689a      	ldr	r2, [r3, #8]
 80387f8:	68fb      	ldr	r3, [r7, #12]
 80387fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80387fc:	687b      	ldr	r3, [r7, #4]
 80387fe:	2200      	movs	r2, #0
 8038800:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8038802:	68fb      	ldr	r3, [r7, #12]
 8038804:	681b      	ldr	r3, [r3, #0]
 8038806:	1e5a      	subs	r2, r3, #1
 8038808:	68fb      	ldr	r3, [r7, #12]
 803880a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 803880c:	68fb      	ldr	r3, [r7, #12]
 803880e:	681b      	ldr	r3, [r3, #0]
}
 8038810:	4618      	mov	r0, r3
 8038812:	3714      	adds	r7, #20
 8038814:	46bd      	mov	sp, r7
 8038816:	f85d 7b04 	ldr.w	r7, [sp], #4
 803881a:	4770      	bx	lr

0803881c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 803881c:	b580      	push	{r7, lr}
 803881e:	b084      	sub	sp, #16
 8038820:	af00      	add	r7, sp, #0
 8038822:	6078      	str	r0, [r7, #4]
 8038824:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8038826:	687b      	ldr	r3, [r7, #4]
 8038828:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 803882a:	68fb      	ldr	r3, [r7, #12]
 803882c:	2b00      	cmp	r3, #0
 803882e:	d109      	bne.n	8038844 <xQueueGenericReset+0x28>
 8038830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038834:	f383 8811 	msr	BASEPRI, r3
 8038838:	f3bf 8f6f 	isb	sy
 803883c:	f3bf 8f4f 	dsb	sy
 8038840:	60bb      	str	r3, [r7, #8]
 8038842:	e7fe      	b.n	8038842 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8038844:	f002 ff12 	bl	803b66c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8038848:	68fb      	ldr	r3, [r7, #12]
 803884a:	681a      	ldr	r2, [r3, #0]
 803884c:	68fb      	ldr	r3, [r7, #12]
 803884e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8038850:	68f9      	ldr	r1, [r7, #12]
 8038852:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8038854:	fb01 f303 	mul.w	r3, r1, r3
 8038858:	441a      	add	r2, r3
 803885a:	68fb      	ldr	r3, [r7, #12]
 803885c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 803885e:	68fb      	ldr	r3, [r7, #12]
 8038860:	2200      	movs	r2, #0
 8038862:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8038864:	68fb      	ldr	r3, [r7, #12]
 8038866:	681a      	ldr	r2, [r3, #0]
 8038868:	68fb      	ldr	r3, [r7, #12]
 803886a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 803886c:	68fb      	ldr	r3, [r7, #12]
 803886e:	681a      	ldr	r2, [r3, #0]
 8038870:	68fb      	ldr	r3, [r7, #12]
 8038872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8038874:	3b01      	subs	r3, #1
 8038876:	68f9      	ldr	r1, [r7, #12]
 8038878:	6c09      	ldr	r1, [r1, #64]	; 0x40
 803887a:	fb01 f303 	mul.w	r3, r1, r3
 803887e:	441a      	add	r2, r3
 8038880:	68fb      	ldr	r3, [r7, #12]
 8038882:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8038884:	68fb      	ldr	r3, [r7, #12]
 8038886:	22ff      	movs	r2, #255	; 0xff
 8038888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 803888c:	68fb      	ldr	r3, [r7, #12]
 803888e:	22ff      	movs	r2, #255	; 0xff
 8038890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8038894:	683b      	ldr	r3, [r7, #0]
 8038896:	2b00      	cmp	r3, #0
 8038898:	d114      	bne.n	80388c4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 803889a:	68fb      	ldr	r3, [r7, #12]
 803889c:	691b      	ldr	r3, [r3, #16]
 803889e:	2b00      	cmp	r3, #0
 80388a0:	d01a      	beq.n	80388d8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80388a2:	68fb      	ldr	r3, [r7, #12]
 80388a4:	3310      	adds	r3, #16
 80388a6:	4618      	mov	r0, r3
 80388a8:	f001 fc3c 	bl	803a124 <xTaskRemoveFromEventList>
 80388ac:	4603      	mov	r3, r0
 80388ae:	2b00      	cmp	r3, #0
 80388b0:	d012      	beq.n	80388d8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80388b2:	4b0d      	ldr	r3, [pc, #52]	; (80388e8 <xQueueGenericReset+0xcc>)
 80388b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80388b8:	601a      	str	r2, [r3, #0]
 80388ba:	f3bf 8f4f 	dsb	sy
 80388be:	f3bf 8f6f 	isb	sy
 80388c2:	e009      	b.n	80388d8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80388c4:	68fb      	ldr	r3, [r7, #12]
 80388c6:	3310      	adds	r3, #16
 80388c8:	4618      	mov	r0, r3
 80388ca:	f7ff fef3 	bl	80386b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80388ce:	68fb      	ldr	r3, [r7, #12]
 80388d0:	3324      	adds	r3, #36	; 0x24
 80388d2:	4618      	mov	r0, r3
 80388d4:	f7ff feee 	bl	80386b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80388d8:	f002 fef6 	bl	803b6c8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80388dc:	2301      	movs	r3, #1
}
 80388de:	4618      	mov	r0, r3
 80388e0:	3710      	adds	r7, #16
 80388e2:	46bd      	mov	sp, r7
 80388e4:	bd80      	pop	{r7, pc}
 80388e6:	bf00      	nop
 80388e8:	e000ed04 	.word	0xe000ed04

080388ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80388ec:	b580      	push	{r7, lr}
 80388ee:	b08e      	sub	sp, #56	; 0x38
 80388f0:	af02      	add	r7, sp, #8
 80388f2:	60f8      	str	r0, [r7, #12]
 80388f4:	60b9      	str	r1, [r7, #8]
 80388f6:	607a      	str	r2, [r7, #4]
 80388f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80388fa:	68fb      	ldr	r3, [r7, #12]
 80388fc:	2b00      	cmp	r3, #0
 80388fe:	d109      	bne.n	8038914 <xQueueGenericCreateStatic+0x28>
 8038900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038904:	f383 8811 	msr	BASEPRI, r3
 8038908:	f3bf 8f6f 	isb	sy
 803890c:	f3bf 8f4f 	dsb	sy
 8038910:	62bb      	str	r3, [r7, #40]	; 0x28
 8038912:	e7fe      	b.n	8038912 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8038914:	683b      	ldr	r3, [r7, #0]
 8038916:	2b00      	cmp	r3, #0
 8038918:	d109      	bne.n	803892e <xQueueGenericCreateStatic+0x42>
 803891a:	f04f 0350 	mov.w	r3, #80	; 0x50
 803891e:	f383 8811 	msr	BASEPRI, r3
 8038922:	f3bf 8f6f 	isb	sy
 8038926:	f3bf 8f4f 	dsb	sy
 803892a:	627b      	str	r3, [r7, #36]	; 0x24
 803892c:	e7fe      	b.n	803892c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 803892e:	687b      	ldr	r3, [r7, #4]
 8038930:	2b00      	cmp	r3, #0
 8038932:	d002      	beq.n	803893a <xQueueGenericCreateStatic+0x4e>
 8038934:	68bb      	ldr	r3, [r7, #8]
 8038936:	2b00      	cmp	r3, #0
 8038938:	d001      	beq.n	803893e <xQueueGenericCreateStatic+0x52>
 803893a:	2301      	movs	r3, #1
 803893c:	e000      	b.n	8038940 <xQueueGenericCreateStatic+0x54>
 803893e:	2300      	movs	r3, #0
 8038940:	2b00      	cmp	r3, #0
 8038942:	d109      	bne.n	8038958 <xQueueGenericCreateStatic+0x6c>
 8038944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038948:	f383 8811 	msr	BASEPRI, r3
 803894c:	f3bf 8f6f 	isb	sy
 8038950:	f3bf 8f4f 	dsb	sy
 8038954:	623b      	str	r3, [r7, #32]
 8038956:	e7fe      	b.n	8038956 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8038958:	687b      	ldr	r3, [r7, #4]
 803895a:	2b00      	cmp	r3, #0
 803895c:	d102      	bne.n	8038964 <xQueueGenericCreateStatic+0x78>
 803895e:	68bb      	ldr	r3, [r7, #8]
 8038960:	2b00      	cmp	r3, #0
 8038962:	d101      	bne.n	8038968 <xQueueGenericCreateStatic+0x7c>
 8038964:	2301      	movs	r3, #1
 8038966:	e000      	b.n	803896a <xQueueGenericCreateStatic+0x7e>
 8038968:	2300      	movs	r3, #0
 803896a:	2b00      	cmp	r3, #0
 803896c:	d109      	bne.n	8038982 <xQueueGenericCreateStatic+0x96>
 803896e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038972:	f383 8811 	msr	BASEPRI, r3
 8038976:	f3bf 8f6f 	isb	sy
 803897a:	f3bf 8f4f 	dsb	sy
 803897e:	61fb      	str	r3, [r7, #28]
 8038980:	e7fe      	b.n	8038980 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8038982:	2350      	movs	r3, #80	; 0x50
 8038984:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8038986:	697b      	ldr	r3, [r7, #20]
 8038988:	2b50      	cmp	r3, #80	; 0x50
 803898a:	d009      	beq.n	80389a0 <xQueueGenericCreateStatic+0xb4>
 803898c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038990:	f383 8811 	msr	BASEPRI, r3
 8038994:	f3bf 8f6f 	isb	sy
 8038998:	f3bf 8f4f 	dsb	sy
 803899c:	61bb      	str	r3, [r7, #24]
 803899e:	e7fe      	b.n	803899e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80389a0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80389a2:	683b      	ldr	r3, [r7, #0]
 80389a4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80389a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80389a8:	2b00      	cmp	r3, #0
 80389aa:	d00d      	beq.n	80389c8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80389ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80389ae:	2201      	movs	r2, #1
 80389b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80389b4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80389b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80389ba:	9300      	str	r3, [sp, #0]
 80389bc:	4613      	mov	r3, r2
 80389be:	687a      	ldr	r2, [r7, #4]
 80389c0:	68b9      	ldr	r1, [r7, #8]
 80389c2:	68f8      	ldr	r0, [r7, #12]
 80389c4:	f000 f844 	bl	8038a50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80389c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80389ca:	4618      	mov	r0, r3
 80389cc:	3730      	adds	r7, #48	; 0x30
 80389ce:	46bd      	mov	sp, r7
 80389d0:	bd80      	pop	{r7, pc}

080389d2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80389d2:	b580      	push	{r7, lr}
 80389d4:	b08a      	sub	sp, #40	; 0x28
 80389d6:	af02      	add	r7, sp, #8
 80389d8:	60f8      	str	r0, [r7, #12]
 80389da:	60b9      	str	r1, [r7, #8]
 80389dc:	4613      	mov	r3, r2
 80389de:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80389e0:	68fb      	ldr	r3, [r7, #12]
 80389e2:	2b00      	cmp	r3, #0
 80389e4:	d109      	bne.n	80389fa <xQueueGenericCreate+0x28>
 80389e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80389ea:	f383 8811 	msr	BASEPRI, r3
 80389ee:	f3bf 8f6f 	isb	sy
 80389f2:	f3bf 8f4f 	dsb	sy
 80389f6:	613b      	str	r3, [r7, #16]
 80389f8:	e7fe      	b.n	80389f8 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80389fa:	68bb      	ldr	r3, [r7, #8]
 80389fc:	2b00      	cmp	r3, #0
 80389fe:	d102      	bne.n	8038a06 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8038a00:	2300      	movs	r3, #0
 8038a02:	61fb      	str	r3, [r7, #28]
 8038a04:	e004      	b.n	8038a10 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8038a06:	68fb      	ldr	r3, [r7, #12]
 8038a08:	68ba      	ldr	r2, [r7, #8]
 8038a0a:	fb02 f303 	mul.w	r3, r2, r3
 8038a0e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8038a10:	69fb      	ldr	r3, [r7, #28]
 8038a12:	3350      	adds	r3, #80	; 0x50
 8038a14:	4618      	mov	r0, r3
 8038a16:	f002 ff43 	bl	803b8a0 <pvPortMalloc>
 8038a1a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8038a1c:	69bb      	ldr	r3, [r7, #24]
 8038a1e:	2b00      	cmp	r3, #0
 8038a20:	d011      	beq.n	8038a46 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8038a22:	69bb      	ldr	r3, [r7, #24]
 8038a24:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8038a26:	697b      	ldr	r3, [r7, #20]
 8038a28:	3350      	adds	r3, #80	; 0x50
 8038a2a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8038a2c:	69bb      	ldr	r3, [r7, #24]
 8038a2e:	2200      	movs	r2, #0
 8038a30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8038a34:	79fa      	ldrb	r2, [r7, #7]
 8038a36:	69bb      	ldr	r3, [r7, #24]
 8038a38:	9300      	str	r3, [sp, #0]
 8038a3a:	4613      	mov	r3, r2
 8038a3c:	697a      	ldr	r2, [r7, #20]
 8038a3e:	68b9      	ldr	r1, [r7, #8]
 8038a40:	68f8      	ldr	r0, [r7, #12]
 8038a42:	f000 f805 	bl	8038a50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8038a46:	69bb      	ldr	r3, [r7, #24]
	}
 8038a48:	4618      	mov	r0, r3
 8038a4a:	3720      	adds	r7, #32
 8038a4c:	46bd      	mov	sp, r7
 8038a4e:	bd80      	pop	{r7, pc}

08038a50 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8038a50:	b580      	push	{r7, lr}
 8038a52:	b084      	sub	sp, #16
 8038a54:	af00      	add	r7, sp, #0
 8038a56:	60f8      	str	r0, [r7, #12]
 8038a58:	60b9      	str	r1, [r7, #8]
 8038a5a:	607a      	str	r2, [r7, #4]
 8038a5c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8038a5e:	68bb      	ldr	r3, [r7, #8]
 8038a60:	2b00      	cmp	r3, #0
 8038a62:	d103      	bne.n	8038a6c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8038a64:	69bb      	ldr	r3, [r7, #24]
 8038a66:	69ba      	ldr	r2, [r7, #24]
 8038a68:	601a      	str	r2, [r3, #0]
 8038a6a:	e002      	b.n	8038a72 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8038a6c:	69bb      	ldr	r3, [r7, #24]
 8038a6e:	687a      	ldr	r2, [r7, #4]
 8038a70:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8038a72:	69bb      	ldr	r3, [r7, #24]
 8038a74:	68fa      	ldr	r2, [r7, #12]
 8038a76:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8038a78:	69bb      	ldr	r3, [r7, #24]
 8038a7a:	68ba      	ldr	r2, [r7, #8]
 8038a7c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8038a7e:	2101      	movs	r1, #1
 8038a80:	69b8      	ldr	r0, [r7, #24]
 8038a82:	f7ff fecb 	bl	803881c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8038a86:	69bb      	ldr	r3, [r7, #24]
 8038a88:	78fa      	ldrb	r2, [r7, #3]
 8038a8a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8038a8e:	bf00      	nop
 8038a90:	3710      	adds	r7, #16
 8038a92:	46bd      	mov	sp, r7
 8038a94:	bd80      	pop	{r7, pc}

08038a96 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8038a96:	b580      	push	{r7, lr}
 8038a98:	b082      	sub	sp, #8
 8038a9a:	af00      	add	r7, sp, #0
 8038a9c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8038a9e:	687b      	ldr	r3, [r7, #4]
 8038aa0:	2b00      	cmp	r3, #0
 8038aa2:	d00e      	beq.n	8038ac2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8038aa4:	687b      	ldr	r3, [r7, #4]
 8038aa6:	2200      	movs	r2, #0
 8038aa8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8038aaa:	687b      	ldr	r3, [r7, #4]
 8038aac:	2200      	movs	r2, #0
 8038aae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8038ab0:	687b      	ldr	r3, [r7, #4]
 8038ab2:	2200      	movs	r2, #0
 8038ab4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8038ab6:	2300      	movs	r3, #0
 8038ab8:	2200      	movs	r2, #0
 8038aba:	2100      	movs	r1, #0
 8038abc:	6878      	ldr	r0, [r7, #4]
 8038abe:	f000 f89f 	bl	8038c00 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8038ac2:	bf00      	nop
 8038ac4:	3708      	adds	r7, #8
 8038ac6:	46bd      	mov	sp, r7
 8038ac8:	bd80      	pop	{r7, pc}

08038aca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8038aca:	b580      	push	{r7, lr}
 8038acc:	b086      	sub	sp, #24
 8038ace:	af00      	add	r7, sp, #0
 8038ad0:	4603      	mov	r3, r0
 8038ad2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8038ad4:	2301      	movs	r3, #1
 8038ad6:	617b      	str	r3, [r7, #20]
 8038ad8:	2300      	movs	r3, #0
 8038ada:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8038adc:	79fb      	ldrb	r3, [r7, #7]
 8038ade:	461a      	mov	r2, r3
 8038ae0:	6939      	ldr	r1, [r7, #16]
 8038ae2:	6978      	ldr	r0, [r7, #20]
 8038ae4:	f7ff ff75 	bl	80389d2 <xQueueGenericCreate>
 8038ae8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8038aea:	68f8      	ldr	r0, [r7, #12]
 8038aec:	f7ff ffd3 	bl	8038a96 <prvInitialiseMutex>

		return xNewQueue;
 8038af0:	68fb      	ldr	r3, [r7, #12]
	}
 8038af2:	4618      	mov	r0, r3
 8038af4:	3718      	adds	r7, #24
 8038af6:	46bd      	mov	sp, r7
 8038af8:	bd80      	pop	{r7, pc}

08038afa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8038afa:	b580      	push	{r7, lr}
 8038afc:	b088      	sub	sp, #32
 8038afe:	af02      	add	r7, sp, #8
 8038b00:	4603      	mov	r3, r0
 8038b02:	6039      	str	r1, [r7, #0]
 8038b04:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8038b06:	2301      	movs	r3, #1
 8038b08:	617b      	str	r3, [r7, #20]
 8038b0a:	2300      	movs	r3, #0
 8038b0c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8038b0e:	79fb      	ldrb	r3, [r7, #7]
 8038b10:	9300      	str	r3, [sp, #0]
 8038b12:	683b      	ldr	r3, [r7, #0]
 8038b14:	2200      	movs	r2, #0
 8038b16:	6939      	ldr	r1, [r7, #16]
 8038b18:	6978      	ldr	r0, [r7, #20]
 8038b1a:	f7ff fee7 	bl	80388ec <xQueueGenericCreateStatic>
 8038b1e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8038b20:	68f8      	ldr	r0, [r7, #12]
 8038b22:	f7ff ffb8 	bl	8038a96 <prvInitialiseMutex>

		return xNewQueue;
 8038b26:	68fb      	ldr	r3, [r7, #12]
	}
 8038b28:	4618      	mov	r0, r3
 8038b2a:	3718      	adds	r7, #24
 8038b2c:	46bd      	mov	sp, r7
 8038b2e:	bd80      	pop	{r7, pc}

08038b30 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8038b30:	b590      	push	{r4, r7, lr}
 8038b32:	b087      	sub	sp, #28
 8038b34:	af00      	add	r7, sp, #0
 8038b36:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8038b38:	687b      	ldr	r3, [r7, #4]
 8038b3a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8038b3c:	693b      	ldr	r3, [r7, #16]
 8038b3e:	2b00      	cmp	r3, #0
 8038b40:	d109      	bne.n	8038b56 <xQueueGiveMutexRecursive+0x26>
 8038b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038b46:	f383 8811 	msr	BASEPRI, r3
 8038b4a:	f3bf 8f6f 	isb	sy
 8038b4e:	f3bf 8f4f 	dsb	sy
 8038b52:	60fb      	str	r3, [r7, #12]
 8038b54:	e7fe      	b.n	8038b54 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8038b56:	693b      	ldr	r3, [r7, #16]
 8038b58:	689c      	ldr	r4, [r3, #8]
 8038b5a:	f001 fd09 	bl	803a570 <xTaskGetCurrentTaskHandle>
 8038b5e:	4603      	mov	r3, r0
 8038b60:	429c      	cmp	r4, r3
 8038b62:	d111      	bne.n	8038b88 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8038b64:	693b      	ldr	r3, [r7, #16]
 8038b66:	68db      	ldr	r3, [r3, #12]
 8038b68:	1e5a      	subs	r2, r3, #1
 8038b6a:	693b      	ldr	r3, [r7, #16]
 8038b6c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8038b6e:	693b      	ldr	r3, [r7, #16]
 8038b70:	68db      	ldr	r3, [r3, #12]
 8038b72:	2b00      	cmp	r3, #0
 8038b74:	d105      	bne.n	8038b82 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8038b76:	2300      	movs	r3, #0
 8038b78:	2200      	movs	r2, #0
 8038b7a:	2100      	movs	r1, #0
 8038b7c:	6938      	ldr	r0, [r7, #16]
 8038b7e:	f000 f83f 	bl	8038c00 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8038b82:	2301      	movs	r3, #1
 8038b84:	617b      	str	r3, [r7, #20]
 8038b86:	e001      	b.n	8038b8c <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8038b88:	2300      	movs	r3, #0
 8038b8a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8038b8c:	697b      	ldr	r3, [r7, #20]
	}
 8038b8e:	4618      	mov	r0, r3
 8038b90:	371c      	adds	r7, #28
 8038b92:	46bd      	mov	sp, r7
 8038b94:	bd90      	pop	{r4, r7, pc}

08038b96 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8038b96:	b590      	push	{r4, r7, lr}
 8038b98:	b087      	sub	sp, #28
 8038b9a:	af00      	add	r7, sp, #0
 8038b9c:	6078      	str	r0, [r7, #4]
 8038b9e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8038ba0:	687b      	ldr	r3, [r7, #4]
 8038ba2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8038ba4:	693b      	ldr	r3, [r7, #16]
 8038ba6:	2b00      	cmp	r3, #0
 8038ba8:	d109      	bne.n	8038bbe <xQueueTakeMutexRecursive+0x28>
 8038baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038bae:	f383 8811 	msr	BASEPRI, r3
 8038bb2:	f3bf 8f6f 	isb	sy
 8038bb6:	f3bf 8f4f 	dsb	sy
 8038bba:	60fb      	str	r3, [r7, #12]
 8038bbc:	e7fe      	b.n	8038bbc <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8038bbe:	693b      	ldr	r3, [r7, #16]
 8038bc0:	689c      	ldr	r4, [r3, #8]
 8038bc2:	f001 fcd5 	bl	803a570 <xTaskGetCurrentTaskHandle>
 8038bc6:	4603      	mov	r3, r0
 8038bc8:	429c      	cmp	r4, r3
 8038bca:	d107      	bne.n	8038bdc <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8038bcc:	693b      	ldr	r3, [r7, #16]
 8038bce:	68db      	ldr	r3, [r3, #12]
 8038bd0:	1c5a      	adds	r2, r3, #1
 8038bd2:	693b      	ldr	r3, [r7, #16]
 8038bd4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8038bd6:	2301      	movs	r3, #1
 8038bd8:	617b      	str	r3, [r7, #20]
 8038bda:	e00c      	b.n	8038bf6 <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8038bdc:	6839      	ldr	r1, [r7, #0]
 8038bde:	6938      	ldr	r0, [r7, #16]
 8038be0:	f000 fa78 	bl	80390d4 <xQueueSemaphoreTake>
 8038be4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8038be6:	697b      	ldr	r3, [r7, #20]
 8038be8:	2b00      	cmp	r3, #0
 8038bea:	d004      	beq.n	8038bf6 <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8038bec:	693b      	ldr	r3, [r7, #16]
 8038bee:	68db      	ldr	r3, [r3, #12]
 8038bf0:	1c5a      	adds	r2, r3, #1
 8038bf2:	693b      	ldr	r3, [r7, #16]
 8038bf4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8038bf6:	697b      	ldr	r3, [r7, #20]
	}
 8038bf8:	4618      	mov	r0, r3
 8038bfa:	371c      	adds	r7, #28
 8038bfc:	46bd      	mov	sp, r7
 8038bfe:	bd90      	pop	{r4, r7, pc}

08038c00 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8038c00:	b580      	push	{r7, lr}
 8038c02:	b08e      	sub	sp, #56	; 0x38
 8038c04:	af00      	add	r7, sp, #0
 8038c06:	60f8      	str	r0, [r7, #12]
 8038c08:	60b9      	str	r1, [r7, #8]
 8038c0a:	607a      	str	r2, [r7, #4]
 8038c0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8038c0e:	2300      	movs	r3, #0
 8038c10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8038c12:	68fb      	ldr	r3, [r7, #12]
 8038c14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8038c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038c18:	2b00      	cmp	r3, #0
 8038c1a:	d109      	bne.n	8038c30 <xQueueGenericSend+0x30>
 8038c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038c20:	f383 8811 	msr	BASEPRI, r3
 8038c24:	f3bf 8f6f 	isb	sy
 8038c28:	f3bf 8f4f 	dsb	sy
 8038c2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8038c2e:	e7fe      	b.n	8038c2e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8038c30:	68bb      	ldr	r3, [r7, #8]
 8038c32:	2b00      	cmp	r3, #0
 8038c34:	d103      	bne.n	8038c3e <xQueueGenericSend+0x3e>
 8038c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8038c3a:	2b00      	cmp	r3, #0
 8038c3c:	d101      	bne.n	8038c42 <xQueueGenericSend+0x42>
 8038c3e:	2301      	movs	r3, #1
 8038c40:	e000      	b.n	8038c44 <xQueueGenericSend+0x44>
 8038c42:	2300      	movs	r3, #0
 8038c44:	2b00      	cmp	r3, #0
 8038c46:	d109      	bne.n	8038c5c <xQueueGenericSend+0x5c>
 8038c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038c4c:	f383 8811 	msr	BASEPRI, r3
 8038c50:	f3bf 8f6f 	isb	sy
 8038c54:	f3bf 8f4f 	dsb	sy
 8038c58:	627b      	str	r3, [r7, #36]	; 0x24
 8038c5a:	e7fe      	b.n	8038c5a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8038c5c:	683b      	ldr	r3, [r7, #0]
 8038c5e:	2b02      	cmp	r3, #2
 8038c60:	d103      	bne.n	8038c6a <xQueueGenericSend+0x6a>
 8038c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8038c66:	2b01      	cmp	r3, #1
 8038c68:	d101      	bne.n	8038c6e <xQueueGenericSend+0x6e>
 8038c6a:	2301      	movs	r3, #1
 8038c6c:	e000      	b.n	8038c70 <xQueueGenericSend+0x70>
 8038c6e:	2300      	movs	r3, #0
 8038c70:	2b00      	cmp	r3, #0
 8038c72:	d109      	bne.n	8038c88 <xQueueGenericSend+0x88>
 8038c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038c78:	f383 8811 	msr	BASEPRI, r3
 8038c7c:	f3bf 8f6f 	isb	sy
 8038c80:	f3bf 8f4f 	dsb	sy
 8038c84:	623b      	str	r3, [r7, #32]
 8038c86:	e7fe      	b.n	8038c86 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8038c88:	f001 fc82 	bl	803a590 <xTaskGetSchedulerState>
 8038c8c:	4603      	mov	r3, r0
 8038c8e:	2b00      	cmp	r3, #0
 8038c90:	d102      	bne.n	8038c98 <xQueueGenericSend+0x98>
 8038c92:	687b      	ldr	r3, [r7, #4]
 8038c94:	2b00      	cmp	r3, #0
 8038c96:	d101      	bne.n	8038c9c <xQueueGenericSend+0x9c>
 8038c98:	2301      	movs	r3, #1
 8038c9a:	e000      	b.n	8038c9e <xQueueGenericSend+0x9e>
 8038c9c:	2300      	movs	r3, #0
 8038c9e:	2b00      	cmp	r3, #0
 8038ca0:	d109      	bne.n	8038cb6 <xQueueGenericSend+0xb6>
 8038ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038ca6:	f383 8811 	msr	BASEPRI, r3
 8038caa:	f3bf 8f6f 	isb	sy
 8038cae:	f3bf 8f4f 	dsb	sy
 8038cb2:	61fb      	str	r3, [r7, #28]
 8038cb4:	e7fe      	b.n	8038cb4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8038cb6:	f002 fcd9 	bl	803b66c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8038cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038cbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8038cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8038cc2:	429a      	cmp	r2, r3
 8038cc4:	d302      	bcc.n	8038ccc <xQueueGenericSend+0xcc>
 8038cc6:	683b      	ldr	r3, [r7, #0]
 8038cc8:	2b02      	cmp	r3, #2
 8038cca:	d129      	bne.n	8038d20 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8038ccc:	683a      	ldr	r2, [r7, #0]
 8038cce:	68b9      	ldr	r1, [r7, #8]
 8038cd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8038cd2:	f000 fb9c 	bl	803940e <prvCopyDataToQueue>
 8038cd6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8038cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8038cdc:	2b00      	cmp	r3, #0
 8038cde:	d010      	beq.n	8038d02 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8038ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038ce2:	3324      	adds	r3, #36	; 0x24
 8038ce4:	4618      	mov	r0, r3
 8038ce6:	f001 fa1d 	bl	803a124 <xTaskRemoveFromEventList>
 8038cea:	4603      	mov	r3, r0
 8038cec:	2b00      	cmp	r3, #0
 8038cee:	d013      	beq.n	8038d18 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8038cf0:	4b3f      	ldr	r3, [pc, #252]	; (8038df0 <xQueueGenericSend+0x1f0>)
 8038cf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8038cf6:	601a      	str	r2, [r3, #0]
 8038cf8:	f3bf 8f4f 	dsb	sy
 8038cfc:	f3bf 8f6f 	isb	sy
 8038d00:	e00a      	b.n	8038d18 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8038d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8038d04:	2b00      	cmp	r3, #0
 8038d06:	d007      	beq.n	8038d18 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8038d08:	4b39      	ldr	r3, [pc, #228]	; (8038df0 <xQueueGenericSend+0x1f0>)
 8038d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8038d0e:	601a      	str	r2, [r3, #0]
 8038d10:	f3bf 8f4f 	dsb	sy
 8038d14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8038d18:	f002 fcd6 	bl	803b6c8 <vPortExitCritical>
				return pdPASS;
 8038d1c:	2301      	movs	r3, #1
 8038d1e:	e063      	b.n	8038de8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8038d20:	687b      	ldr	r3, [r7, #4]
 8038d22:	2b00      	cmp	r3, #0
 8038d24:	d103      	bne.n	8038d2e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8038d26:	f002 fccf 	bl	803b6c8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8038d2a:	2300      	movs	r3, #0
 8038d2c:	e05c      	b.n	8038de8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8038d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8038d30:	2b00      	cmp	r3, #0
 8038d32:	d106      	bne.n	8038d42 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8038d34:	f107 0314 	add.w	r3, r7, #20
 8038d38:	4618      	mov	r0, r3
 8038d3a:	f001 fab5 	bl	803a2a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8038d3e:	2301      	movs	r3, #1
 8038d40:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8038d42:	f002 fcc1 	bl	803b6c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8038d46:	f000 ff85 	bl	8039c54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8038d4a:	f002 fc8f 	bl	803b66c <vPortEnterCritical>
 8038d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038d50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8038d54:	b25b      	sxtb	r3, r3
 8038d56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8038d5a:	d103      	bne.n	8038d64 <xQueueGenericSend+0x164>
 8038d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038d5e:	2200      	movs	r2, #0
 8038d60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8038d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038d66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8038d6a:	b25b      	sxtb	r3, r3
 8038d6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8038d70:	d103      	bne.n	8038d7a <xQueueGenericSend+0x17a>
 8038d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038d74:	2200      	movs	r2, #0
 8038d76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8038d7a:	f002 fca5 	bl	803b6c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8038d7e:	1d3a      	adds	r2, r7, #4
 8038d80:	f107 0314 	add.w	r3, r7, #20
 8038d84:	4611      	mov	r1, r2
 8038d86:	4618      	mov	r0, r3
 8038d88:	f001 faa4 	bl	803a2d4 <xTaskCheckForTimeOut>
 8038d8c:	4603      	mov	r3, r0
 8038d8e:	2b00      	cmp	r3, #0
 8038d90:	d124      	bne.n	8038ddc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8038d92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8038d94:	f000 fc33 	bl	80395fe <prvIsQueueFull>
 8038d98:	4603      	mov	r3, r0
 8038d9a:	2b00      	cmp	r3, #0
 8038d9c:	d018      	beq.n	8038dd0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8038d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038da0:	3310      	adds	r3, #16
 8038da2:	687a      	ldr	r2, [r7, #4]
 8038da4:	4611      	mov	r1, r2
 8038da6:	4618      	mov	r0, r3
 8038da8:	f001 f934 	bl	803a014 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8038dac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8038dae:	f000 fbbe 	bl	803952e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8038db2:	f000 ff5d 	bl	8039c70 <xTaskResumeAll>
 8038db6:	4603      	mov	r3, r0
 8038db8:	2b00      	cmp	r3, #0
 8038dba:	f47f af7c 	bne.w	8038cb6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8038dbe:	4b0c      	ldr	r3, [pc, #48]	; (8038df0 <xQueueGenericSend+0x1f0>)
 8038dc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8038dc4:	601a      	str	r2, [r3, #0]
 8038dc6:	f3bf 8f4f 	dsb	sy
 8038dca:	f3bf 8f6f 	isb	sy
 8038dce:	e772      	b.n	8038cb6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8038dd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8038dd2:	f000 fbac 	bl	803952e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8038dd6:	f000 ff4b 	bl	8039c70 <xTaskResumeAll>
 8038dda:	e76c      	b.n	8038cb6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8038ddc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8038dde:	f000 fba6 	bl	803952e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8038de2:	f000 ff45 	bl	8039c70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8038de6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8038de8:	4618      	mov	r0, r3
 8038dea:	3738      	adds	r7, #56	; 0x38
 8038dec:	46bd      	mov	sp, r7
 8038dee:	bd80      	pop	{r7, pc}
 8038df0:	e000ed04 	.word	0xe000ed04

08038df4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8038df4:	b580      	push	{r7, lr}
 8038df6:	b08e      	sub	sp, #56	; 0x38
 8038df8:	af00      	add	r7, sp, #0
 8038dfa:	60f8      	str	r0, [r7, #12]
 8038dfc:	60b9      	str	r1, [r7, #8]
 8038dfe:	607a      	str	r2, [r7, #4]
 8038e00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8038e02:	68fb      	ldr	r3, [r7, #12]
 8038e04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8038e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038e08:	2b00      	cmp	r3, #0
 8038e0a:	d109      	bne.n	8038e20 <xQueueGenericSendFromISR+0x2c>
 8038e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038e10:	f383 8811 	msr	BASEPRI, r3
 8038e14:	f3bf 8f6f 	isb	sy
 8038e18:	f3bf 8f4f 	dsb	sy
 8038e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8038e1e:	e7fe      	b.n	8038e1e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8038e20:	68bb      	ldr	r3, [r7, #8]
 8038e22:	2b00      	cmp	r3, #0
 8038e24:	d103      	bne.n	8038e2e <xQueueGenericSendFromISR+0x3a>
 8038e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8038e2a:	2b00      	cmp	r3, #0
 8038e2c:	d101      	bne.n	8038e32 <xQueueGenericSendFromISR+0x3e>
 8038e2e:	2301      	movs	r3, #1
 8038e30:	e000      	b.n	8038e34 <xQueueGenericSendFromISR+0x40>
 8038e32:	2300      	movs	r3, #0
 8038e34:	2b00      	cmp	r3, #0
 8038e36:	d109      	bne.n	8038e4c <xQueueGenericSendFromISR+0x58>
 8038e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038e3c:	f383 8811 	msr	BASEPRI, r3
 8038e40:	f3bf 8f6f 	isb	sy
 8038e44:	f3bf 8f4f 	dsb	sy
 8038e48:	623b      	str	r3, [r7, #32]
 8038e4a:	e7fe      	b.n	8038e4a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8038e4c:	683b      	ldr	r3, [r7, #0]
 8038e4e:	2b02      	cmp	r3, #2
 8038e50:	d103      	bne.n	8038e5a <xQueueGenericSendFromISR+0x66>
 8038e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8038e56:	2b01      	cmp	r3, #1
 8038e58:	d101      	bne.n	8038e5e <xQueueGenericSendFromISR+0x6a>
 8038e5a:	2301      	movs	r3, #1
 8038e5c:	e000      	b.n	8038e60 <xQueueGenericSendFromISR+0x6c>
 8038e5e:	2300      	movs	r3, #0
 8038e60:	2b00      	cmp	r3, #0
 8038e62:	d109      	bne.n	8038e78 <xQueueGenericSendFromISR+0x84>
 8038e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038e68:	f383 8811 	msr	BASEPRI, r3
 8038e6c:	f3bf 8f6f 	isb	sy
 8038e70:	f3bf 8f4f 	dsb	sy
 8038e74:	61fb      	str	r3, [r7, #28]
 8038e76:	e7fe      	b.n	8038e76 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8038e78:	f002 fcd4 	bl	803b824 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8038e7c:	f3ef 8211 	mrs	r2, BASEPRI
 8038e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038e84:	f383 8811 	msr	BASEPRI, r3
 8038e88:	f3bf 8f6f 	isb	sy
 8038e8c:	f3bf 8f4f 	dsb	sy
 8038e90:	61ba      	str	r2, [r7, #24]
 8038e92:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8038e94:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8038e96:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8038e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038e9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8038e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8038ea0:	429a      	cmp	r2, r3
 8038ea2:	d302      	bcc.n	8038eaa <xQueueGenericSendFromISR+0xb6>
 8038ea4:	683b      	ldr	r3, [r7, #0]
 8038ea6:	2b02      	cmp	r3, #2
 8038ea8:	d12c      	bne.n	8038f04 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8038eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038eac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8038eb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8038eb4:	683a      	ldr	r2, [r7, #0]
 8038eb6:	68b9      	ldr	r1, [r7, #8]
 8038eb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8038eba:	f000 faa8 	bl	803940e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8038ebe:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8038ec2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8038ec6:	d112      	bne.n	8038eee <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8038ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8038ecc:	2b00      	cmp	r3, #0
 8038ece:	d016      	beq.n	8038efe <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8038ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038ed2:	3324      	adds	r3, #36	; 0x24
 8038ed4:	4618      	mov	r0, r3
 8038ed6:	f001 f925 	bl	803a124 <xTaskRemoveFromEventList>
 8038eda:	4603      	mov	r3, r0
 8038edc:	2b00      	cmp	r3, #0
 8038ede:	d00e      	beq.n	8038efe <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8038ee0:	687b      	ldr	r3, [r7, #4]
 8038ee2:	2b00      	cmp	r3, #0
 8038ee4:	d00b      	beq.n	8038efe <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8038ee6:	687b      	ldr	r3, [r7, #4]
 8038ee8:	2201      	movs	r2, #1
 8038eea:	601a      	str	r2, [r3, #0]
 8038eec:	e007      	b.n	8038efe <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8038eee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8038ef2:	3301      	adds	r3, #1
 8038ef4:	b2db      	uxtb	r3, r3
 8038ef6:	b25a      	sxtb	r2, r3
 8038ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038efa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8038efe:	2301      	movs	r3, #1
 8038f00:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8038f02:	e001      	b.n	8038f08 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8038f04:	2300      	movs	r3, #0
 8038f06:	637b      	str	r3, [r7, #52]	; 0x34
 8038f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8038f0a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8038f0c:	693b      	ldr	r3, [r7, #16]
 8038f0e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8038f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8038f14:	4618      	mov	r0, r3
 8038f16:	3738      	adds	r7, #56	; 0x38
 8038f18:	46bd      	mov	sp, r7
 8038f1a:	bd80      	pop	{r7, pc}

08038f1c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8038f1c:	b580      	push	{r7, lr}
 8038f1e:	b08c      	sub	sp, #48	; 0x30
 8038f20:	af00      	add	r7, sp, #0
 8038f22:	60f8      	str	r0, [r7, #12]
 8038f24:	60b9      	str	r1, [r7, #8]
 8038f26:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8038f28:	2300      	movs	r3, #0
 8038f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8038f2c:	68fb      	ldr	r3, [r7, #12]
 8038f2e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8038f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038f32:	2b00      	cmp	r3, #0
 8038f34:	d109      	bne.n	8038f4a <xQueueReceive+0x2e>
	__asm volatile
 8038f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038f3a:	f383 8811 	msr	BASEPRI, r3
 8038f3e:	f3bf 8f6f 	isb	sy
 8038f42:	f3bf 8f4f 	dsb	sy
 8038f46:	623b      	str	r3, [r7, #32]
 8038f48:	e7fe      	b.n	8038f48 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8038f4a:	68bb      	ldr	r3, [r7, #8]
 8038f4c:	2b00      	cmp	r3, #0
 8038f4e:	d103      	bne.n	8038f58 <xQueueReceive+0x3c>
 8038f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8038f54:	2b00      	cmp	r3, #0
 8038f56:	d101      	bne.n	8038f5c <xQueueReceive+0x40>
 8038f58:	2301      	movs	r3, #1
 8038f5a:	e000      	b.n	8038f5e <xQueueReceive+0x42>
 8038f5c:	2300      	movs	r3, #0
 8038f5e:	2b00      	cmp	r3, #0
 8038f60:	d109      	bne.n	8038f76 <xQueueReceive+0x5a>
 8038f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038f66:	f383 8811 	msr	BASEPRI, r3
 8038f6a:	f3bf 8f6f 	isb	sy
 8038f6e:	f3bf 8f4f 	dsb	sy
 8038f72:	61fb      	str	r3, [r7, #28]
 8038f74:	e7fe      	b.n	8038f74 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8038f76:	f001 fb0b 	bl	803a590 <xTaskGetSchedulerState>
 8038f7a:	4603      	mov	r3, r0
 8038f7c:	2b00      	cmp	r3, #0
 8038f7e:	d102      	bne.n	8038f86 <xQueueReceive+0x6a>
 8038f80:	687b      	ldr	r3, [r7, #4]
 8038f82:	2b00      	cmp	r3, #0
 8038f84:	d101      	bne.n	8038f8a <xQueueReceive+0x6e>
 8038f86:	2301      	movs	r3, #1
 8038f88:	e000      	b.n	8038f8c <xQueueReceive+0x70>
 8038f8a:	2300      	movs	r3, #0
 8038f8c:	2b00      	cmp	r3, #0
 8038f8e:	d109      	bne.n	8038fa4 <xQueueReceive+0x88>
 8038f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038f94:	f383 8811 	msr	BASEPRI, r3
 8038f98:	f3bf 8f6f 	isb	sy
 8038f9c:	f3bf 8f4f 	dsb	sy
 8038fa0:	61bb      	str	r3, [r7, #24]
 8038fa2:	e7fe      	b.n	8038fa2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8038fa4:	f002 fb62 	bl	803b66c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8038fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8038fac:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8038fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038fb0:	2b00      	cmp	r3, #0
 8038fb2:	d01f      	beq.n	8038ff4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8038fb4:	68b9      	ldr	r1, [r7, #8]
 8038fb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8038fb8:	f000 fa93 	bl	80394e2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8038fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038fbe:	1e5a      	subs	r2, r3, #1
 8038fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038fc2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8038fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038fc6:	691b      	ldr	r3, [r3, #16]
 8038fc8:	2b00      	cmp	r3, #0
 8038fca:	d00f      	beq.n	8038fec <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8038fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038fce:	3310      	adds	r3, #16
 8038fd0:	4618      	mov	r0, r3
 8038fd2:	f001 f8a7 	bl	803a124 <xTaskRemoveFromEventList>
 8038fd6:	4603      	mov	r3, r0
 8038fd8:	2b00      	cmp	r3, #0
 8038fda:	d007      	beq.n	8038fec <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8038fdc:	4b3c      	ldr	r3, [pc, #240]	; (80390d0 <xQueueReceive+0x1b4>)
 8038fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8038fe2:	601a      	str	r2, [r3, #0]
 8038fe4:	f3bf 8f4f 	dsb	sy
 8038fe8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8038fec:	f002 fb6c 	bl	803b6c8 <vPortExitCritical>
				return pdPASS;
 8038ff0:	2301      	movs	r3, #1
 8038ff2:	e069      	b.n	80390c8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8038ff4:	687b      	ldr	r3, [r7, #4]
 8038ff6:	2b00      	cmp	r3, #0
 8038ff8:	d103      	bne.n	8039002 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8038ffa:	f002 fb65 	bl	803b6c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8038ffe:	2300      	movs	r3, #0
 8039000:	e062      	b.n	80390c8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8039002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8039004:	2b00      	cmp	r3, #0
 8039006:	d106      	bne.n	8039016 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8039008:	f107 0310 	add.w	r3, r7, #16
 803900c:	4618      	mov	r0, r3
 803900e:	f001 f94b 	bl	803a2a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8039012:	2301      	movs	r3, #1
 8039014:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8039016:	f002 fb57 	bl	803b6c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 803901a:	f000 fe1b 	bl	8039c54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 803901e:	f002 fb25 	bl	803b66c <vPortEnterCritical>
 8039022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8039024:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8039028:	b25b      	sxtb	r3, r3
 803902a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 803902e:	d103      	bne.n	8039038 <xQueueReceive+0x11c>
 8039030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8039032:	2200      	movs	r2, #0
 8039034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8039038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803903a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 803903e:	b25b      	sxtb	r3, r3
 8039040:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8039044:	d103      	bne.n	803904e <xQueueReceive+0x132>
 8039046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8039048:	2200      	movs	r2, #0
 803904a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 803904e:	f002 fb3b 	bl	803b6c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8039052:	1d3a      	adds	r2, r7, #4
 8039054:	f107 0310 	add.w	r3, r7, #16
 8039058:	4611      	mov	r1, r2
 803905a:	4618      	mov	r0, r3
 803905c:	f001 f93a 	bl	803a2d4 <xTaskCheckForTimeOut>
 8039060:	4603      	mov	r3, r0
 8039062:	2b00      	cmp	r3, #0
 8039064:	d123      	bne.n	80390ae <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8039066:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8039068:	f000 fab3 	bl	80395d2 <prvIsQueueEmpty>
 803906c:	4603      	mov	r3, r0
 803906e:	2b00      	cmp	r3, #0
 8039070:	d017      	beq.n	80390a2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8039072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8039074:	3324      	adds	r3, #36	; 0x24
 8039076:	687a      	ldr	r2, [r7, #4]
 8039078:	4611      	mov	r1, r2
 803907a:	4618      	mov	r0, r3
 803907c:	f000 ffca 	bl	803a014 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8039080:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8039082:	f000 fa54 	bl	803952e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8039086:	f000 fdf3 	bl	8039c70 <xTaskResumeAll>
 803908a:	4603      	mov	r3, r0
 803908c:	2b00      	cmp	r3, #0
 803908e:	d189      	bne.n	8038fa4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8039090:	4b0f      	ldr	r3, [pc, #60]	; (80390d0 <xQueueReceive+0x1b4>)
 8039092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8039096:	601a      	str	r2, [r3, #0]
 8039098:	f3bf 8f4f 	dsb	sy
 803909c:	f3bf 8f6f 	isb	sy
 80390a0:	e780      	b.n	8038fa4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80390a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80390a4:	f000 fa43 	bl	803952e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80390a8:	f000 fde2 	bl	8039c70 <xTaskResumeAll>
 80390ac:	e77a      	b.n	8038fa4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80390ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80390b0:	f000 fa3d 	bl	803952e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80390b4:	f000 fddc 	bl	8039c70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80390b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80390ba:	f000 fa8a 	bl	80395d2 <prvIsQueueEmpty>
 80390be:	4603      	mov	r3, r0
 80390c0:	2b00      	cmp	r3, #0
 80390c2:	f43f af6f 	beq.w	8038fa4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80390c6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80390c8:	4618      	mov	r0, r3
 80390ca:	3730      	adds	r7, #48	; 0x30
 80390cc:	46bd      	mov	sp, r7
 80390ce:	bd80      	pop	{r7, pc}
 80390d0:	e000ed04 	.word	0xe000ed04

080390d4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80390d4:	b580      	push	{r7, lr}
 80390d6:	b08e      	sub	sp, #56	; 0x38
 80390d8:	af00      	add	r7, sp, #0
 80390da:	6078      	str	r0, [r7, #4]
 80390dc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80390de:	2300      	movs	r3, #0
 80390e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80390e2:	687b      	ldr	r3, [r7, #4]
 80390e4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80390e6:	2300      	movs	r3, #0
 80390e8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80390ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80390ec:	2b00      	cmp	r3, #0
 80390ee:	d109      	bne.n	8039104 <xQueueSemaphoreTake+0x30>
 80390f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80390f4:	f383 8811 	msr	BASEPRI, r3
 80390f8:	f3bf 8f6f 	isb	sy
 80390fc:	f3bf 8f4f 	dsb	sy
 8039100:	623b      	str	r3, [r7, #32]
 8039102:	e7fe      	b.n	8039102 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8039104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8039106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8039108:	2b00      	cmp	r3, #0
 803910a:	d009      	beq.n	8039120 <xQueueSemaphoreTake+0x4c>
 803910c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8039110:	f383 8811 	msr	BASEPRI, r3
 8039114:	f3bf 8f6f 	isb	sy
 8039118:	f3bf 8f4f 	dsb	sy
 803911c:	61fb      	str	r3, [r7, #28]
 803911e:	e7fe      	b.n	803911e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8039120:	f001 fa36 	bl	803a590 <xTaskGetSchedulerState>
 8039124:	4603      	mov	r3, r0
 8039126:	2b00      	cmp	r3, #0
 8039128:	d102      	bne.n	8039130 <xQueueSemaphoreTake+0x5c>
 803912a:	683b      	ldr	r3, [r7, #0]
 803912c:	2b00      	cmp	r3, #0
 803912e:	d101      	bne.n	8039134 <xQueueSemaphoreTake+0x60>
 8039130:	2301      	movs	r3, #1
 8039132:	e000      	b.n	8039136 <xQueueSemaphoreTake+0x62>
 8039134:	2300      	movs	r3, #0
 8039136:	2b00      	cmp	r3, #0
 8039138:	d109      	bne.n	803914e <xQueueSemaphoreTake+0x7a>
 803913a:	f04f 0350 	mov.w	r3, #80	; 0x50
 803913e:	f383 8811 	msr	BASEPRI, r3
 8039142:	f3bf 8f6f 	isb	sy
 8039146:	f3bf 8f4f 	dsb	sy
 803914a:	61bb      	str	r3, [r7, #24]
 803914c:	e7fe      	b.n	803914c <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 803914e:	f002 fa8d 	bl	803b66c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8039152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8039154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8039156:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8039158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803915a:	2b00      	cmp	r3, #0
 803915c:	d024      	beq.n	80391a8 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 803915e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8039160:	1e5a      	subs	r2, r3, #1
 8039162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8039164:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8039166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8039168:	681b      	ldr	r3, [r3, #0]
 803916a:	2b00      	cmp	r3, #0
 803916c:	d104      	bne.n	8039178 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 803916e:	f001 fb99 	bl	803a8a4 <pvTaskIncrementMutexHeldCount>
 8039172:	4602      	mov	r2, r0
 8039174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8039176:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8039178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803917a:	691b      	ldr	r3, [r3, #16]
 803917c:	2b00      	cmp	r3, #0
 803917e:	d00f      	beq.n	80391a0 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8039180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8039182:	3310      	adds	r3, #16
 8039184:	4618      	mov	r0, r3
 8039186:	f000 ffcd 	bl	803a124 <xTaskRemoveFromEventList>
 803918a:	4603      	mov	r3, r0
 803918c:	2b00      	cmp	r3, #0
 803918e:	d007      	beq.n	80391a0 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8039190:	4b53      	ldr	r3, [pc, #332]	; (80392e0 <xQueueSemaphoreTake+0x20c>)
 8039192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8039196:	601a      	str	r2, [r3, #0]
 8039198:	f3bf 8f4f 	dsb	sy
 803919c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80391a0:	f002 fa92 	bl	803b6c8 <vPortExitCritical>
				return pdPASS;
 80391a4:	2301      	movs	r3, #1
 80391a6:	e096      	b.n	80392d6 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80391a8:	683b      	ldr	r3, [r7, #0]
 80391aa:	2b00      	cmp	r3, #0
 80391ac:	d110      	bne.n	80391d0 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80391ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80391b0:	2b00      	cmp	r3, #0
 80391b2:	d009      	beq.n	80391c8 <xQueueSemaphoreTake+0xf4>
 80391b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80391b8:	f383 8811 	msr	BASEPRI, r3
 80391bc:	f3bf 8f6f 	isb	sy
 80391c0:	f3bf 8f4f 	dsb	sy
 80391c4:	617b      	str	r3, [r7, #20]
 80391c6:	e7fe      	b.n	80391c6 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80391c8:	f002 fa7e 	bl	803b6c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80391cc:	2300      	movs	r3, #0
 80391ce:	e082      	b.n	80392d6 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80391d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80391d2:	2b00      	cmp	r3, #0
 80391d4:	d106      	bne.n	80391e4 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80391d6:	f107 030c 	add.w	r3, r7, #12
 80391da:	4618      	mov	r0, r3
 80391dc:	f001 f864 	bl	803a2a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80391e0:	2301      	movs	r3, #1
 80391e2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80391e4:	f002 fa70 	bl	803b6c8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80391e8:	f000 fd34 	bl	8039c54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80391ec:	f002 fa3e 	bl	803b66c <vPortEnterCritical>
 80391f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80391f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80391f6:	b25b      	sxtb	r3, r3
 80391f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80391fc:	d103      	bne.n	8039206 <xQueueSemaphoreTake+0x132>
 80391fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8039200:	2200      	movs	r2, #0
 8039202:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8039206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8039208:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 803920c:	b25b      	sxtb	r3, r3
 803920e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8039212:	d103      	bne.n	803921c <xQueueSemaphoreTake+0x148>
 8039214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8039216:	2200      	movs	r2, #0
 8039218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 803921c:	f002 fa54 	bl	803b6c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8039220:	463a      	mov	r2, r7
 8039222:	f107 030c 	add.w	r3, r7, #12
 8039226:	4611      	mov	r1, r2
 8039228:	4618      	mov	r0, r3
 803922a:	f001 f853 	bl	803a2d4 <xTaskCheckForTimeOut>
 803922e:	4603      	mov	r3, r0
 8039230:	2b00      	cmp	r3, #0
 8039232:	d132      	bne.n	803929a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8039234:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8039236:	f000 f9cc 	bl	80395d2 <prvIsQueueEmpty>
 803923a:	4603      	mov	r3, r0
 803923c:	2b00      	cmp	r3, #0
 803923e:	d026      	beq.n	803928e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8039240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8039242:	681b      	ldr	r3, [r3, #0]
 8039244:	2b00      	cmp	r3, #0
 8039246:	d109      	bne.n	803925c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8039248:	f002 fa10 	bl	803b66c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 803924c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803924e:	689b      	ldr	r3, [r3, #8]
 8039250:	4618      	mov	r0, r3
 8039252:	f001 f9bb 	bl	803a5cc <xTaskPriorityInherit>
 8039256:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8039258:	f002 fa36 	bl	803b6c8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 803925c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803925e:	3324      	adds	r3, #36	; 0x24
 8039260:	683a      	ldr	r2, [r7, #0]
 8039262:	4611      	mov	r1, r2
 8039264:	4618      	mov	r0, r3
 8039266:	f000 fed5 	bl	803a014 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 803926a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 803926c:	f000 f95f 	bl	803952e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8039270:	f000 fcfe 	bl	8039c70 <xTaskResumeAll>
 8039274:	4603      	mov	r3, r0
 8039276:	2b00      	cmp	r3, #0
 8039278:	f47f af69 	bne.w	803914e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 803927c:	4b18      	ldr	r3, [pc, #96]	; (80392e0 <xQueueSemaphoreTake+0x20c>)
 803927e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8039282:	601a      	str	r2, [r3, #0]
 8039284:	f3bf 8f4f 	dsb	sy
 8039288:	f3bf 8f6f 	isb	sy
 803928c:	e75f      	b.n	803914e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 803928e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8039290:	f000 f94d 	bl	803952e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8039294:	f000 fcec 	bl	8039c70 <xTaskResumeAll>
 8039298:	e759      	b.n	803914e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 803929a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 803929c:	f000 f947 	bl	803952e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80392a0:	f000 fce6 	bl	8039c70 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80392a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80392a6:	f000 f994 	bl	80395d2 <prvIsQueueEmpty>
 80392aa:	4603      	mov	r3, r0
 80392ac:	2b00      	cmp	r3, #0
 80392ae:	f43f af4e 	beq.w	803914e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80392b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80392b4:	2b00      	cmp	r3, #0
 80392b6:	d00d      	beq.n	80392d4 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80392b8:	f002 f9d8 	bl	803b66c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80392bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80392be:	f000 f88e 	bl	80393de <prvGetDisinheritPriorityAfterTimeout>
 80392c2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80392c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80392c6:	689b      	ldr	r3, [r3, #8]
 80392c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80392ca:	4618      	mov	r0, r3
 80392cc:	f001 fa52 	bl	803a774 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80392d0:	f002 f9fa 	bl	803b6c8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80392d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80392d6:	4618      	mov	r0, r3
 80392d8:	3738      	adds	r7, #56	; 0x38
 80392da:	46bd      	mov	sp, r7
 80392dc:	bd80      	pop	{r7, pc}
 80392de:	bf00      	nop
 80392e0:	e000ed04 	.word	0xe000ed04

080392e4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80392e4:	b580      	push	{r7, lr}
 80392e6:	b08e      	sub	sp, #56	; 0x38
 80392e8:	af00      	add	r7, sp, #0
 80392ea:	60f8      	str	r0, [r7, #12]
 80392ec:	60b9      	str	r1, [r7, #8]
 80392ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80392f0:	68fb      	ldr	r3, [r7, #12]
 80392f2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80392f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80392f6:	2b00      	cmp	r3, #0
 80392f8:	d109      	bne.n	803930e <xQueueReceiveFromISR+0x2a>
 80392fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80392fe:	f383 8811 	msr	BASEPRI, r3
 8039302:	f3bf 8f6f 	isb	sy
 8039306:	f3bf 8f4f 	dsb	sy
 803930a:	623b      	str	r3, [r7, #32]
 803930c:	e7fe      	b.n	803930c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 803930e:	68bb      	ldr	r3, [r7, #8]
 8039310:	2b00      	cmp	r3, #0
 8039312:	d103      	bne.n	803931c <xQueueReceiveFromISR+0x38>
 8039314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8039316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8039318:	2b00      	cmp	r3, #0
 803931a:	d101      	bne.n	8039320 <xQueueReceiveFromISR+0x3c>
 803931c:	2301      	movs	r3, #1
 803931e:	e000      	b.n	8039322 <xQueueReceiveFromISR+0x3e>
 8039320:	2300      	movs	r3, #0
 8039322:	2b00      	cmp	r3, #0
 8039324:	d109      	bne.n	803933a <xQueueReceiveFromISR+0x56>
 8039326:	f04f 0350 	mov.w	r3, #80	; 0x50
 803932a:	f383 8811 	msr	BASEPRI, r3
 803932e:	f3bf 8f6f 	isb	sy
 8039332:	f3bf 8f4f 	dsb	sy
 8039336:	61fb      	str	r3, [r7, #28]
 8039338:	e7fe      	b.n	8039338 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 803933a:	f002 fa73 	bl	803b824 <vPortValidateInterruptPriority>
	__asm volatile
 803933e:	f3ef 8211 	mrs	r2, BASEPRI
 8039342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8039346:	f383 8811 	msr	BASEPRI, r3
 803934a:	f3bf 8f6f 	isb	sy
 803934e:	f3bf 8f4f 	dsb	sy
 8039352:	61ba      	str	r2, [r7, #24]
 8039354:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8039356:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8039358:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 803935a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803935c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803935e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8039360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8039362:	2b00      	cmp	r3, #0
 8039364:	d02f      	beq.n	80393c6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8039366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8039368:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 803936c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8039370:	68b9      	ldr	r1, [r7, #8]
 8039372:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8039374:	f000 f8b5 	bl	80394e2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8039378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803937a:	1e5a      	subs	r2, r3, #1
 803937c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803937e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8039380:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8039384:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8039388:	d112      	bne.n	80393b0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 803938a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803938c:	691b      	ldr	r3, [r3, #16]
 803938e:	2b00      	cmp	r3, #0
 8039390:	d016      	beq.n	80393c0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8039392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8039394:	3310      	adds	r3, #16
 8039396:	4618      	mov	r0, r3
 8039398:	f000 fec4 	bl	803a124 <xTaskRemoveFromEventList>
 803939c:	4603      	mov	r3, r0
 803939e:	2b00      	cmp	r3, #0
 80393a0:	d00e      	beq.n	80393c0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80393a2:	687b      	ldr	r3, [r7, #4]
 80393a4:	2b00      	cmp	r3, #0
 80393a6:	d00b      	beq.n	80393c0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80393a8:	687b      	ldr	r3, [r7, #4]
 80393aa:	2201      	movs	r2, #1
 80393ac:	601a      	str	r2, [r3, #0]
 80393ae:	e007      	b.n	80393c0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80393b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80393b4:	3301      	adds	r3, #1
 80393b6:	b2db      	uxtb	r3, r3
 80393b8:	b25a      	sxtb	r2, r3
 80393ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80393bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80393c0:	2301      	movs	r3, #1
 80393c2:	637b      	str	r3, [r7, #52]	; 0x34
 80393c4:	e001      	b.n	80393ca <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80393c6:	2300      	movs	r3, #0
 80393c8:	637b      	str	r3, [r7, #52]	; 0x34
 80393ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80393cc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80393ce:	693b      	ldr	r3, [r7, #16]
 80393d0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80393d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80393d6:	4618      	mov	r0, r3
 80393d8:	3738      	adds	r7, #56	; 0x38
 80393da:	46bd      	mov	sp, r7
 80393dc:	bd80      	pop	{r7, pc}

080393de <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80393de:	b480      	push	{r7}
 80393e0:	b085      	sub	sp, #20
 80393e2:	af00      	add	r7, sp, #0
 80393e4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80393e6:	687b      	ldr	r3, [r7, #4]
 80393e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80393ea:	2b00      	cmp	r3, #0
 80393ec:	d006      	beq.n	80393fc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80393ee:	687b      	ldr	r3, [r7, #4]
 80393f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80393f2:	681b      	ldr	r3, [r3, #0]
 80393f4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80393f8:	60fb      	str	r3, [r7, #12]
 80393fa:	e001      	b.n	8039400 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80393fc:	2300      	movs	r3, #0
 80393fe:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8039400:	68fb      	ldr	r3, [r7, #12]
	}
 8039402:	4618      	mov	r0, r3
 8039404:	3714      	adds	r7, #20
 8039406:	46bd      	mov	sp, r7
 8039408:	f85d 7b04 	ldr.w	r7, [sp], #4
 803940c:	4770      	bx	lr

0803940e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 803940e:	b580      	push	{r7, lr}
 8039410:	b086      	sub	sp, #24
 8039412:	af00      	add	r7, sp, #0
 8039414:	60f8      	str	r0, [r7, #12]
 8039416:	60b9      	str	r1, [r7, #8]
 8039418:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 803941a:	2300      	movs	r3, #0
 803941c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 803941e:	68fb      	ldr	r3, [r7, #12]
 8039420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8039422:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8039424:	68fb      	ldr	r3, [r7, #12]
 8039426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8039428:	2b00      	cmp	r3, #0
 803942a:	d10d      	bne.n	8039448 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 803942c:	68fb      	ldr	r3, [r7, #12]
 803942e:	681b      	ldr	r3, [r3, #0]
 8039430:	2b00      	cmp	r3, #0
 8039432:	d14d      	bne.n	80394d0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8039434:	68fb      	ldr	r3, [r7, #12]
 8039436:	689b      	ldr	r3, [r3, #8]
 8039438:	4618      	mov	r0, r3
 803943a:	f001 f92f 	bl	803a69c <xTaskPriorityDisinherit>
 803943e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8039440:	68fb      	ldr	r3, [r7, #12]
 8039442:	2200      	movs	r2, #0
 8039444:	609a      	str	r2, [r3, #8]
 8039446:	e043      	b.n	80394d0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8039448:	687b      	ldr	r3, [r7, #4]
 803944a:	2b00      	cmp	r3, #0
 803944c:	d119      	bne.n	8039482 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 803944e:	68fb      	ldr	r3, [r7, #12]
 8039450:	6858      	ldr	r0, [r3, #4]
 8039452:	68fb      	ldr	r3, [r7, #12]
 8039454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8039456:	461a      	mov	r2, r3
 8039458:	68b9      	ldr	r1, [r7, #8]
 803945a:	f006 fa4e 	bl	803f8fa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 803945e:	68fb      	ldr	r3, [r7, #12]
 8039460:	685a      	ldr	r2, [r3, #4]
 8039462:	68fb      	ldr	r3, [r7, #12]
 8039464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8039466:	441a      	add	r2, r3
 8039468:	68fb      	ldr	r3, [r7, #12]
 803946a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 803946c:	68fb      	ldr	r3, [r7, #12]
 803946e:	685a      	ldr	r2, [r3, #4]
 8039470:	68fb      	ldr	r3, [r7, #12]
 8039472:	689b      	ldr	r3, [r3, #8]
 8039474:	429a      	cmp	r2, r3
 8039476:	d32b      	bcc.n	80394d0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8039478:	68fb      	ldr	r3, [r7, #12]
 803947a:	681a      	ldr	r2, [r3, #0]
 803947c:	68fb      	ldr	r3, [r7, #12]
 803947e:	605a      	str	r2, [r3, #4]
 8039480:	e026      	b.n	80394d0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8039482:	68fb      	ldr	r3, [r7, #12]
 8039484:	68d8      	ldr	r0, [r3, #12]
 8039486:	68fb      	ldr	r3, [r7, #12]
 8039488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803948a:	461a      	mov	r2, r3
 803948c:	68b9      	ldr	r1, [r7, #8]
 803948e:	f006 fa34 	bl	803f8fa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8039492:	68fb      	ldr	r3, [r7, #12]
 8039494:	68da      	ldr	r2, [r3, #12]
 8039496:	68fb      	ldr	r3, [r7, #12]
 8039498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803949a:	425b      	negs	r3, r3
 803949c:	441a      	add	r2, r3
 803949e:	68fb      	ldr	r3, [r7, #12]
 80394a0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80394a2:	68fb      	ldr	r3, [r7, #12]
 80394a4:	68da      	ldr	r2, [r3, #12]
 80394a6:	68fb      	ldr	r3, [r7, #12]
 80394a8:	681b      	ldr	r3, [r3, #0]
 80394aa:	429a      	cmp	r2, r3
 80394ac:	d207      	bcs.n	80394be <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80394ae:	68fb      	ldr	r3, [r7, #12]
 80394b0:	689a      	ldr	r2, [r3, #8]
 80394b2:	68fb      	ldr	r3, [r7, #12]
 80394b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80394b6:	425b      	negs	r3, r3
 80394b8:	441a      	add	r2, r3
 80394ba:	68fb      	ldr	r3, [r7, #12]
 80394bc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80394be:	687b      	ldr	r3, [r7, #4]
 80394c0:	2b02      	cmp	r3, #2
 80394c2:	d105      	bne.n	80394d0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80394c4:	693b      	ldr	r3, [r7, #16]
 80394c6:	2b00      	cmp	r3, #0
 80394c8:	d002      	beq.n	80394d0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80394ca:	693b      	ldr	r3, [r7, #16]
 80394cc:	3b01      	subs	r3, #1
 80394ce:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80394d0:	693b      	ldr	r3, [r7, #16]
 80394d2:	1c5a      	adds	r2, r3, #1
 80394d4:	68fb      	ldr	r3, [r7, #12]
 80394d6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80394d8:	697b      	ldr	r3, [r7, #20]
}
 80394da:	4618      	mov	r0, r3
 80394dc:	3718      	adds	r7, #24
 80394de:	46bd      	mov	sp, r7
 80394e0:	bd80      	pop	{r7, pc}

080394e2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80394e2:	b580      	push	{r7, lr}
 80394e4:	b082      	sub	sp, #8
 80394e6:	af00      	add	r7, sp, #0
 80394e8:	6078      	str	r0, [r7, #4]
 80394ea:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80394ec:	687b      	ldr	r3, [r7, #4]
 80394ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80394f0:	2b00      	cmp	r3, #0
 80394f2:	d018      	beq.n	8039526 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80394f4:	687b      	ldr	r3, [r7, #4]
 80394f6:	68da      	ldr	r2, [r3, #12]
 80394f8:	687b      	ldr	r3, [r7, #4]
 80394fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80394fc:	441a      	add	r2, r3
 80394fe:	687b      	ldr	r3, [r7, #4]
 8039500:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8039502:	687b      	ldr	r3, [r7, #4]
 8039504:	68da      	ldr	r2, [r3, #12]
 8039506:	687b      	ldr	r3, [r7, #4]
 8039508:	689b      	ldr	r3, [r3, #8]
 803950a:	429a      	cmp	r2, r3
 803950c:	d303      	bcc.n	8039516 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 803950e:	687b      	ldr	r3, [r7, #4]
 8039510:	681a      	ldr	r2, [r3, #0]
 8039512:	687b      	ldr	r3, [r7, #4]
 8039514:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8039516:	687b      	ldr	r3, [r7, #4]
 8039518:	68d9      	ldr	r1, [r3, #12]
 803951a:	687b      	ldr	r3, [r7, #4]
 803951c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803951e:	461a      	mov	r2, r3
 8039520:	6838      	ldr	r0, [r7, #0]
 8039522:	f006 f9ea 	bl	803f8fa <memcpy>
	}
}
 8039526:	bf00      	nop
 8039528:	3708      	adds	r7, #8
 803952a:	46bd      	mov	sp, r7
 803952c:	bd80      	pop	{r7, pc}

0803952e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 803952e:	b580      	push	{r7, lr}
 8039530:	b084      	sub	sp, #16
 8039532:	af00      	add	r7, sp, #0
 8039534:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8039536:	f002 f899 	bl	803b66c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 803953a:	687b      	ldr	r3, [r7, #4]
 803953c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8039540:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8039542:	e011      	b.n	8039568 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8039544:	687b      	ldr	r3, [r7, #4]
 8039546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8039548:	2b00      	cmp	r3, #0
 803954a:	d012      	beq.n	8039572 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 803954c:	687b      	ldr	r3, [r7, #4]
 803954e:	3324      	adds	r3, #36	; 0x24
 8039550:	4618      	mov	r0, r3
 8039552:	f000 fde7 	bl	803a124 <xTaskRemoveFromEventList>
 8039556:	4603      	mov	r3, r0
 8039558:	2b00      	cmp	r3, #0
 803955a:	d001      	beq.n	8039560 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 803955c:	f000 ff2a 	bl	803a3b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8039560:	7bfb      	ldrb	r3, [r7, #15]
 8039562:	3b01      	subs	r3, #1
 8039564:	b2db      	uxtb	r3, r3
 8039566:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8039568:	f997 300f 	ldrsb.w	r3, [r7, #15]
 803956c:	2b00      	cmp	r3, #0
 803956e:	dce9      	bgt.n	8039544 <prvUnlockQueue+0x16>
 8039570:	e000      	b.n	8039574 <prvUnlockQueue+0x46>
					break;
 8039572:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8039574:	687b      	ldr	r3, [r7, #4]
 8039576:	22ff      	movs	r2, #255	; 0xff
 8039578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 803957c:	f002 f8a4 	bl	803b6c8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8039580:	f002 f874 	bl	803b66c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8039584:	687b      	ldr	r3, [r7, #4]
 8039586:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 803958a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 803958c:	e011      	b.n	80395b2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 803958e:	687b      	ldr	r3, [r7, #4]
 8039590:	691b      	ldr	r3, [r3, #16]
 8039592:	2b00      	cmp	r3, #0
 8039594:	d012      	beq.n	80395bc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8039596:	687b      	ldr	r3, [r7, #4]
 8039598:	3310      	adds	r3, #16
 803959a:	4618      	mov	r0, r3
 803959c:	f000 fdc2 	bl	803a124 <xTaskRemoveFromEventList>
 80395a0:	4603      	mov	r3, r0
 80395a2:	2b00      	cmp	r3, #0
 80395a4:	d001      	beq.n	80395aa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80395a6:	f000 ff05 	bl	803a3b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80395aa:	7bbb      	ldrb	r3, [r7, #14]
 80395ac:	3b01      	subs	r3, #1
 80395ae:	b2db      	uxtb	r3, r3
 80395b0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80395b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80395b6:	2b00      	cmp	r3, #0
 80395b8:	dce9      	bgt.n	803958e <prvUnlockQueue+0x60>
 80395ba:	e000      	b.n	80395be <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80395bc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80395be:	687b      	ldr	r3, [r7, #4]
 80395c0:	22ff      	movs	r2, #255	; 0xff
 80395c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80395c6:	f002 f87f 	bl	803b6c8 <vPortExitCritical>
}
 80395ca:	bf00      	nop
 80395cc:	3710      	adds	r7, #16
 80395ce:	46bd      	mov	sp, r7
 80395d0:	bd80      	pop	{r7, pc}

080395d2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80395d2:	b580      	push	{r7, lr}
 80395d4:	b084      	sub	sp, #16
 80395d6:	af00      	add	r7, sp, #0
 80395d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80395da:	f002 f847 	bl	803b66c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80395de:	687b      	ldr	r3, [r7, #4]
 80395e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80395e2:	2b00      	cmp	r3, #0
 80395e4:	d102      	bne.n	80395ec <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80395e6:	2301      	movs	r3, #1
 80395e8:	60fb      	str	r3, [r7, #12]
 80395ea:	e001      	b.n	80395f0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80395ec:	2300      	movs	r3, #0
 80395ee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80395f0:	f002 f86a 	bl	803b6c8 <vPortExitCritical>

	return xReturn;
 80395f4:	68fb      	ldr	r3, [r7, #12]
}
 80395f6:	4618      	mov	r0, r3
 80395f8:	3710      	adds	r7, #16
 80395fa:	46bd      	mov	sp, r7
 80395fc:	bd80      	pop	{r7, pc}

080395fe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80395fe:	b580      	push	{r7, lr}
 8039600:	b084      	sub	sp, #16
 8039602:	af00      	add	r7, sp, #0
 8039604:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8039606:	f002 f831 	bl	803b66c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 803960a:	687b      	ldr	r3, [r7, #4]
 803960c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 803960e:	687b      	ldr	r3, [r7, #4]
 8039610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8039612:	429a      	cmp	r2, r3
 8039614:	d102      	bne.n	803961c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8039616:	2301      	movs	r3, #1
 8039618:	60fb      	str	r3, [r7, #12]
 803961a:	e001      	b.n	8039620 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 803961c:	2300      	movs	r3, #0
 803961e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8039620:	f002 f852 	bl	803b6c8 <vPortExitCritical>

	return xReturn;
 8039624:	68fb      	ldr	r3, [r7, #12]
}
 8039626:	4618      	mov	r0, r3
 8039628:	3710      	adds	r7, #16
 803962a:	46bd      	mov	sp, r7
 803962c:	bd80      	pop	{r7, pc}
	...

08039630 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8039630:	b480      	push	{r7}
 8039632:	b085      	sub	sp, #20
 8039634:	af00      	add	r7, sp, #0
 8039636:	6078      	str	r0, [r7, #4]
 8039638:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 803963a:	2300      	movs	r3, #0
 803963c:	60fb      	str	r3, [r7, #12]
 803963e:	e014      	b.n	803966a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8039640:	4a0e      	ldr	r2, [pc, #56]	; (803967c <vQueueAddToRegistry+0x4c>)
 8039642:	68fb      	ldr	r3, [r7, #12]
 8039644:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8039648:	2b00      	cmp	r3, #0
 803964a:	d10b      	bne.n	8039664 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 803964c:	490b      	ldr	r1, [pc, #44]	; (803967c <vQueueAddToRegistry+0x4c>)
 803964e:	68fb      	ldr	r3, [r7, #12]
 8039650:	683a      	ldr	r2, [r7, #0]
 8039652:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8039656:	4a09      	ldr	r2, [pc, #36]	; (803967c <vQueueAddToRegistry+0x4c>)
 8039658:	68fb      	ldr	r3, [r7, #12]
 803965a:	00db      	lsls	r3, r3, #3
 803965c:	4413      	add	r3, r2
 803965e:	687a      	ldr	r2, [r7, #4]
 8039660:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8039662:	e005      	b.n	8039670 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8039664:	68fb      	ldr	r3, [r7, #12]
 8039666:	3301      	adds	r3, #1
 8039668:	60fb      	str	r3, [r7, #12]
 803966a:	68fb      	ldr	r3, [r7, #12]
 803966c:	2b07      	cmp	r3, #7
 803966e:	d9e7      	bls.n	8039640 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8039670:	bf00      	nop
 8039672:	3714      	adds	r7, #20
 8039674:	46bd      	mov	sp, r7
 8039676:	f85d 7b04 	ldr.w	r7, [sp], #4
 803967a:	4770      	bx	lr
 803967c:	20008aa4 	.word	0x20008aa4

08039680 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8039680:	b580      	push	{r7, lr}
 8039682:	b086      	sub	sp, #24
 8039684:	af00      	add	r7, sp, #0
 8039686:	60f8      	str	r0, [r7, #12]
 8039688:	60b9      	str	r1, [r7, #8]
 803968a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 803968c:	68fb      	ldr	r3, [r7, #12]
 803968e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8039690:	f001 ffec 	bl	803b66c <vPortEnterCritical>
 8039694:	697b      	ldr	r3, [r7, #20]
 8039696:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 803969a:	b25b      	sxtb	r3, r3
 803969c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80396a0:	d103      	bne.n	80396aa <vQueueWaitForMessageRestricted+0x2a>
 80396a2:	697b      	ldr	r3, [r7, #20]
 80396a4:	2200      	movs	r2, #0
 80396a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80396aa:	697b      	ldr	r3, [r7, #20]
 80396ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80396b0:	b25b      	sxtb	r3, r3
 80396b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80396b6:	d103      	bne.n	80396c0 <vQueueWaitForMessageRestricted+0x40>
 80396b8:	697b      	ldr	r3, [r7, #20]
 80396ba:	2200      	movs	r2, #0
 80396bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80396c0:	f002 f802 	bl	803b6c8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80396c4:	697b      	ldr	r3, [r7, #20]
 80396c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80396c8:	2b00      	cmp	r3, #0
 80396ca:	d106      	bne.n	80396da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80396cc:	697b      	ldr	r3, [r7, #20]
 80396ce:	3324      	adds	r3, #36	; 0x24
 80396d0:	687a      	ldr	r2, [r7, #4]
 80396d2:	68b9      	ldr	r1, [r7, #8]
 80396d4:	4618      	mov	r0, r3
 80396d6:	f000 fcfb 	bl	803a0d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80396da:	6978      	ldr	r0, [r7, #20]
 80396dc:	f7ff ff27 	bl	803952e <prvUnlockQueue>
	}
 80396e0:	bf00      	nop
 80396e2:	3718      	adds	r7, #24
 80396e4:	46bd      	mov	sp, r7
 80396e6:	bd80      	pop	{r7, pc}

080396e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80396e8:	b580      	push	{r7, lr}
 80396ea:	b08e      	sub	sp, #56	; 0x38
 80396ec:	af04      	add	r7, sp, #16
 80396ee:	60f8      	str	r0, [r7, #12]
 80396f0:	60b9      	str	r1, [r7, #8]
 80396f2:	607a      	str	r2, [r7, #4]
 80396f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80396f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80396f8:	2b00      	cmp	r3, #0
 80396fa:	d109      	bne.n	8039710 <xTaskCreateStatic+0x28>
	__asm volatile
 80396fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8039700:	f383 8811 	msr	BASEPRI, r3
 8039704:	f3bf 8f6f 	isb	sy
 8039708:	f3bf 8f4f 	dsb	sy
 803970c:	623b      	str	r3, [r7, #32]
 803970e:	e7fe      	b.n	803970e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8039710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039712:	2b00      	cmp	r3, #0
 8039714:	d109      	bne.n	803972a <xTaskCreateStatic+0x42>
 8039716:	f04f 0350 	mov.w	r3, #80	; 0x50
 803971a:	f383 8811 	msr	BASEPRI, r3
 803971e:	f3bf 8f6f 	isb	sy
 8039722:	f3bf 8f4f 	dsb	sy
 8039726:	61fb      	str	r3, [r7, #28]
 8039728:	e7fe      	b.n	8039728 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 803972a:	2360      	movs	r3, #96	; 0x60
 803972c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 803972e:	693b      	ldr	r3, [r7, #16]
 8039730:	2b60      	cmp	r3, #96	; 0x60
 8039732:	d009      	beq.n	8039748 <xTaskCreateStatic+0x60>
 8039734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8039738:	f383 8811 	msr	BASEPRI, r3
 803973c:	f3bf 8f6f 	isb	sy
 8039740:	f3bf 8f4f 	dsb	sy
 8039744:	61bb      	str	r3, [r7, #24]
 8039746:	e7fe      	b.n	8039746 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8039748:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 803974a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803974c:	2b00      	cmp	r3, #0
 803974e:	d01e      	beq.n	803978e <xTaskCreateStatic+0xa6>
 8039750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8039752:	2b00      	cmp	r3, #0
 8039754:	d01b      	beq.n	803978e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8039756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039758:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 803975a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803975c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 803975e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8039760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8039762:	2202      	movs	r2, #2
 8039764:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8039768:	2300      	movs	r3, #0
 803976a:	9303      	str	r3, [sp, #12]
 803976c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803976e:	9302      	str	r3, [sp, #8]
 8039770:	f107 0314 	add.w	r3, r7, #20
 8039774:	9301      	str	r3, [sp, #4]
 8039776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8039778:	9300      	str	r3, [sp, #0]
 803977a:	683b      	ldr	r3, [r7, #0]
 803977c:	687a      	ldr	r2, [r7, #4]
 803977e:	68b9      	ldr	r1, [r7, #8]
 8039780:	68f8      	ldr	r0, [r7, #12]
 8039782:	f000 f850 	bl	8039826 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8039786:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8039788:	f000 f8e2 	bl	8039950 <prvAddNewTaskToReadyList>
 803978c:	e001      	b.n	8039792 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 803978e:	2300      	movs	r3, #0
 8039790:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8039792:	697b      	ldr	r3, [r7, #20]
	}
 8039794:	4618      	mov	r0, r3
 8039796:	3728      	adds	r7, #40	; 0x28
 8039798:	46bd      	mov	sp, r7
 803979a:	bd80      	pop	{r7, pc}

0803979c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 803979c:	b580      	push	{r7, lr}
 803979e:	b08c      	sub	sp, #48	; 0x30
 80397a0:	af04      	add	r7, sp, #16
 80397a2:	60f8      	str	r0, [r7, #12]
 80397a4:	60b9      	str	r1, [r7, #8]
 80397a6:	603b      	str	r3, [r7, #0]
 80397a8:	4613      	mov	r3, r2
 80397aa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80397ac:	88fb      	ldrh	r3, [r7, #6]
 80397ae:	009b      	lsls	r3, r3, #2
 80397b0:	4618      	mov	r0, r3
 80397b2:	f002 f875 	bl	803b8a0 <pvPortMalloc>
 80397b6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80397b8:	697b      	ldr	r3, [r7, #20]
 80397ba:	2b00      	cmp	r3, #0
 80397bc:	d00e      	beq.n	80397dc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80397be:	2060      	movs	r0, #96	; 0x60
 80397c0:	f002 f86e 	bl	803b8a0 <pvPortMalloc>
 80397c4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80397c6:	69fb      	ldr	r3, [r7, #28]
 80397c8:	2b00      	cmp	r3, #0
 80397ca:	d003      	beq.n	80397d4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80397cc:	69fb      	ldr	r3, [r7, #28]
 80397ce:	697a      	ldr	r2, [r7, #20]
 80397d0:	631a      	str	r2, [r3, #48]	; 0x30
 80397d2:	e005      	b.n	80397e0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80397d4:	6978      	ldr	r0, [r7, #20]
 80397d6:	f002 f925 	bl	803ba24 <vPortFree>
 80397da:	e001      	b.n	80397e0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80397dc:	2300      	movs	r3, #0
 80397de:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80397e0:	69fb      	ldr	r3, [r7, #28]
 80397e2:	2b00      	cmp	r3, #0
 80397e4:	d017      	beq.n	8039816 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80397e6:	69fb      	ldr	r3, [r7, #28]
 80397e8:	2200      	movs	r2, #0
 80397ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80397ee:	88fa      	ldrh	r2, [r7, #6]
 80397f0:	2300      	movs	r3, #0
 80397f2:	9303      	str	r3, [sp, #12]
 80397f4:	69fb      	ldr	r3, [r7, #28]
 80397f6:	9302      	str	r3, [sp, #8]
 80397f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80397fa:	9301      	str	r3, [sp, #4]
 80397fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80397fe:	9300      	str	r3, [sp, #0]
 8039800:	683b      	ldr	r3, [r7, #0]
 8039802:	68b9      	ldr	r1, [r7, #8]
 8039804:	68f8      	ldr	r0, [r7, #12]
 8039806:	f000 f80e 	bl	8039826 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 803980a:	69f8      	ldr	r0, [r7, #28]
 803980c:	f000 f8a0 	bl	8039950 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8039810:	2301      	movs	r3, #1
 8039812:	61bb      	str	r3, [r7, #24]
 8039814:	e002      	b.n	803981c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8039816:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 803981a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 803981c:	69bb      	ldr	r3, [r7, #24]
	}
 803981e:	4618      	mov	r0, r3
 8039820:	3720      	adds	r7, #32
 8039822:	46bd      	mov	sp, r7
 8039824:	bd80      	pop	{r7, pc}

08039826 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8039826:	b580      	push	{r7, lr}
 8039828:	b088      	sub	sp, #32
 803982a:	af00      	add	r7, sp, #0
 803982c:	60f8      	str	r0, [r7, #12]
 803982e:	60b9      	str	r1, [r7, #8]
 8039830:	607a      	str	r2, [r7, #4]
 8039832:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8039834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8039836:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8039838:	687b      	ldr	r3, [r7, #4]
 803983a:	009b      	lsls	r3, r3, #2
 803983c:	461a      	mov	r2, r3
 803983e:	21a5      	movs	r1, #165	; 0xa5
 8039840:	f006 f866 	bl	803f910 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8039844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8039846:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8039848:	687b      	ldr	r3, [r7, #4]
 803984a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 803984e:	3b01      	subs	r3, #1
 8039850:	009b      	lsls	r3, r3, #2
 8039852:	4413      	add	r3, r2
 8039854:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8039856:	69bb      	ldr	r3, [r7, #24]
 8039858:	f023 0307 	bic.w	r3, r3, #7
 803985c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 803985e:	69bb      	ldr	r3, [r7, #24]
 8039860:	f003 0307 	and.w	r3, r3, #7
 8039864:	2b00      	cmp	r3, #0
 8039866:	d009      	beq.n	803987c <prvInitialiseNewTask+0x56>
 8039868:	f04f 0350 	mov.w	r3, #80	; 0x50
 803986c:	f383 8811 	msr	BASEPRI, r3
 8039870:	f3bf 8f6f 	isb	sy
 8039874:	f3bf 8f4f 	dsb	sy
 8039878:	617b      	str	r3, [r7, #20]
 803987a:	e7fe      	b.n	803987a <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 803987c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803987e:	69ba      	ldr	r2, [r7, #24]
 8039880:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8039882:	68bb      	ldr	r3, [r7, #8]
 8039884:	2b00      	cmp	r3, #0
 8039886:	d01f      	beq.n	80398c8 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8039888:	2300      	movs	r3, #0
 803988a:	61fb      	str	r3, [r7, #28]
 803988c:	e012      	b.n	80398b4 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 803988e:	68ba      	ldr	r2, [r7, #8]
 8039890:	69fb      	ldr	r3, [r7, #28]
 8039892:	4413      	add	r3, r2
 8039894:	7819      	ldrb	r1, [r3, #0]
 8039896:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8039898:	69fb      	ldr	r3, [r7, #28]
 803989a:	4413      	add	r3, r2
 803989c:	3334      	adds	r3, #52	; 0x34
 803989e:	460a      	mov	r2, r1
 80398a0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80398a2:	68ba      	ldr	r2, [r7, #8]
 80398a4:	69fb      	ldr	r3, [r7, #28]
 80398a6:	4413      	add	r3, r2
 80398a8:	781b      	ldrb	r3, [r3, #0]
 80398aa:	2b00      	cmp	r3, #0
 80398ac:	d006      	beq.n	80398bc <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80398ae:	69fb      	ldr	r3, [r7, #28]
 80398b0:	3301      	adds	r3, #1
 80398b2:	61fb      	str	r3, [r7, #28]
 80398b4:	69fb      	ldr	r3, [r7, #28]
 80398b6:	2b0f      	cmp	r3, #15
 80398b8:	d9e9      	bls.n	803988e <prvInitialiseNewTask+0x68>
 80398ba:	e000      	b.n	80398be <prvInitialiseNewTask+0x98>
			{
				break;
 80398bc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80398be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80398c0:	2200      	movs	r2, #0
 80398c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80398c6:	e003      	b.n	80398d0 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80398c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80398ca:	2200      	movs	r2, #0
 80398cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80398d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80398d2:	2b37      	cmp	r3, #55	; 0x37
 80398d4:	d901      	bls.n	80398da <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80398d6:	2337      	movs	r3, #55	; 0x37
 80398d8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80398da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80398dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80398de:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80398e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80398e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80398e4:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 80398e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80398e8:	2200      	movs	r2, #0
 80398ea:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80398ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80398ee:	3304      	adds	r3, #4
 80398f0:	4618      	mov	r0, r3
 80398f2:	f7fe feff 	bl	80386f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80398f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80398f8:	3318      	adds	r3, #24
 80398fa:	4618      	mov	r0, r3
 80398fc:	f7fe fefa 	bl	80386f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8039900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8039902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8039904:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8039906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8039908:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 803990c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803990e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8039910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8039912:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8039914:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8039916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8039918:	2200      	movs	r2, #0
 803991a:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 803991c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803991e:	2200      	movs	r2, #0
 8039920:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 8039924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8039926:	2200      	movs	r2, #0
 8039928:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 803992c:	683a      	ldr	r2, [r7, #0]
 803992e:	68f9      	ldr	r1, [r7, #12]
 8039930:	69b8      	ldr	r0, [r7, #24]
 8039932:	f001 fd71 	bl	803b418 <pxPortInitialiseStack>
 8039936:	4602      	mov	r2, r0
 8039938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803993a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 803993c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803993e:	2b00      	cmp	r3, #0
 8039940:	d002      	beq.n	8039948 <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8039942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8039944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8039946:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8039948:	bf00      	nop
 803994a:	3720      	adds	r7, #32
 803994c:	46bd      	mov	sp, r7
 803994e:	bd80      	pop	{r7, pc}

08039950 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8039950:	b580      	push	{r7, lr}
 8039952:	b082      	sub	sp, #8
 8039954:	af00      	add	r7, sp, #0
 8039956:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8039958:	f001 fe88 	bl	803b66c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 803995c:	4b2d      	ldr	r3, [pc, #180]	; (8039a14 <prvAddNewTaskToReadyList+0xc4>)
 803995e:	681b      	ldr	r3, [r3, #0]
 8039960:	3301      	adds	r3, #1
 8039962:	4a2c      	ldr	r2, [pc, #176]	; (8039a14 <prvAddNewTaskToReadyList+0xc4>)
 8039964:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8039966:	4b2c      	ldr	r3, [pc, #176]	; (8039a18 <prvAddNewTaskToReadyList+0xc8>)
 8039968:	681b      	ldr	r3, [r3, #0]
 803996a:	2b00      	cmp	r3, #0
 803996c:	d109      	bne.n	8039982 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 803996e:	4a2a      	ldr	r2, [pc, #168]	; (8039a18 <prvAddNewTaskToReadyList+0xc8>)
 8039970:	687b      	ldr	r3, [r7, #4]
 8039972:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8039974:	4b27      	ldr	r3, [pc, #156]	; (8039a14 <prvAddNewTaskToReadyList+0xc4>)
 8039976:	681b      	ldr	r3, [r3, #0]
 8039978:	2b01      	cmp	r3, #1
 803997a:	d110      	bne.n	803999e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 803997c:	f000 fd3e 	bl	803a3fc <prvInitialiseTaskLists>
 8039980:	e00d      	b.n	803999e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8039982:	4b26      	ldr	r3, [pc, #152]	; (8039a1c <prvAddNewTaskToReadyList+0xcc>)
 8039984:	681b      	ldr	r3, [r3, #0]
 8039986:	2b00      	cmp	r3, #0
 8039988:	d109      	bne.n	803999e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 803998a:	4b23      	ldr	r3, [pc, #140]	; (8039a18 <prvAddNewTaskToReadyList+0xc8>)
 803998c:	681b      	ldr	r3, [r3, #0]
 803998e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8039990:	687b      	ldr	r3, [r7, #4]
 8039992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8039994:	429a      	cmp	r2, r3
 8039996:	d802      	bhi.n	803999e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8039998:	4a1f      	ldr	r2, [pc, #124]	; (8039a18 <prvAddNewTaskToReadyList+0xc8>)
 803999a:	687b      	ldr	r3, [r7, #4]
 803999c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 803999e:	4b20      	ldr	r3, [pc, #128]	; (8039a20 <prvAddNewTaskToReadyList+0xd0>)
 80399a0:	681b      	ldr	r3, [r3, #0]
 80399a2:	3301      	adds	r3, #1
 80399a4:	4a1e      	ldr	r2, [pc, #120]	; (8039a20 <prvAddNewTaskToReadyList+0xd0>)
 80399a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80399a8:	4b1d      	ldr	r3, [pc, #116]	; (8039a20 <prvAddNewTaskToReadyList+0xd0>)
 80399aa:	681a      	ldr	r2, [r3, #0]
 80399ac:	687b      	ldr	r3, [r7, #4]
 80399ae:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80399b0:	687b      	ldr	r3, [r7, #4]
 80399b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80399b4:	4b1b      	ldr	r3, [pc, #108]	; (8039a24 <prvAddNewTaskToReadyList+0xd4>)
 80399b6:	681b      	ldr	r3, [r3, #0]
 80399b8:	429a      	cmp	r2, r3
 80399ba:	d903      	bls.n	80399c4 <prvAddNewTaskToReadyList+0x74>
 80399bc:	687b      	ldr	r3, [r7, #4]
 80399be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80399c0:	4a18      	ldr	r2, [pc, #96]	; (8039a24 <prvAddNewTaskToReadyList+0xd4>)
 80399c2:	6013      	str	r3, [r2, #0]
 80399c4:	687b      	ldr	r3, [r7, #4]
 80399c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80399c8:	4613      	mov	r3, r2
 80399ca:	009b      	lsls	r3, r3, #2
 80399cc:	4413      	add	r3, r2
 80399ce:	009b      	lsls	r3, r3, #2
 80399d0:	4a15      	ldr	r2, [pc, #84]	; (8039a28 <prvAddNewTaskToReadyList+0xd8>)
 80399d2:	441a      	add	r2, r3
 80399d4:	687b      	ldr	r3, [r7, #4]
 80399d6:	3304      	adds	r3, #4
 80399d8:	4619      	mov	r1, r3
 80399da:	4610      	mov	r0, r2
 80399dc:	f7fe fe97 	bl	803870e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80399e0:	f001 fe72 	bl	803b6c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80399e4:	4b0d      	ldr	r3, [pc, #52]	; (8039a1c <prvAddNewTaskToReadyList+0xcc>)
 80399e6:	681b      	ldr	r3, [r3, #0]
 80399e8:	2b00      	cmp	r3, #0
 80399ea:	d00e      	beq.n	8039a0a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80399ec:	4b0a      	ldr	r3, [pc, #40]	; (8039a18 <prvAddNewTaskToReadyList+0xc8>)
 80399ee:	681b      	ldr	r3, [r3, #0]
 80399f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80399f2:	687b      	ldr	r3, [r7, #4]
 80399f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80399f6:	429a      	cmp	r2, r3
 80399f8:	d207      	bcs.n	8039a0a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80399fa:	4b0c      	ldr	r3, [pc, #48]	; (8039a2c <prvAddNewTaskToReadyList+0xdc>)
 80399fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8039a00:	601a      	str	r2, [r3, #0]
 8039a02:	f3bf 8f4f 	dsb	sy
 8039a06:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8039a0a:	bf00      	nop
 8039a0c:	3708      	adds	r7, #8
 8039a0e:	46bd      	mov	sp, r7
 8039a10:	bd80      	pop	{r7, pc}
 8039a12:	bf00      	nop
 8039a14:	200018cc 	.word	0x200018cc
 8039a18:	200013f8 	.word	0x200013f8
 8039a1c:	200018d8 	.word	0x200018d8
 8039a20:	200018e8 	.word	0x200018e8
 8039a24:	200018d4 	.word	0x200018d4
 8039a28:	200013fc 	.word	0x200013fc
 8039a2c:	e000ed04 	.word	0xe000ed04

08039a30 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8039a30:	b580      	push	{r7, lr}
 8039a32:	b08a      	sub	sp, #40	; 0x28
 8039a34:	af00      	add	r7, sp, #0
 8039a36:	6078      	str	r0, [r7, #4]
 8039a38:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8039a3a:	2300      	movs	r3, #0
 8039a3c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8039a3e:	687b      	ldr	r3, [r7, #4]
 8039a40:	2b00      	cmp	r3, #0
 8039a42:	d109      	bne.n	8039a58 <vTaskDelayUntil+0x28>
 8039a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8039a48:	f383 8811 	msr	BASEPRI, r3
 8039a4c:	f3bf 8f6f 	isb	sy
 8039a50:	f3bf 8f4f 	dsb	sy
 8039a54:	617b      	str	r3, [r7, #20]
 8039a56:	e7fe      	b.n	8039a56 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8039a58:	683b      	ldr	r3, [r7, #0]
 8039a5a:	2b00      	cmp	r3, #0
 8039a5c:	d109      	bne.n	8039a72 <vTaskDelayUntil+0x42>
 8039a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8039a62:	f383 8811 	msr	BASEPRI, r3
 8039a66:	f3bf 8f6f 	isb	sy
 8039a6a:	f3bf 8f4f 	dsb	sy
 8039a6e:	613b      	str	r3, [r7, #16]
 8039a70:	e7fe      	b.n	8039a70 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 8039a72:	4b29      	ldr	r3, [pc, #164]	; (8039b18 <vTaskDelayUntil+0xe8>)
 8039a74:	681b      	ldr	r3, [r3, #0]
 8039a76:	2b00      	cmp	r3, #0
 8039a78:	d009      	beq.n	8039a8e <vTaskDelayUntil+0x5e>
 8039a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8039a7e:	f383 8811 	msr	BASEPRI, r3
 8039a82:	f3bf 8f6f 	isb	sy
 8039a86:	f3bf 8f4f 	dsb	sy
 8039a8a:	60fb      	str	r3, [r7, #12]
 8039a8c:	e7fe      	b.n	8039a8c <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8039a8e:	f000 f8e1 	bl	8039c54 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8039a92:	4b22      	ldr	r3, [pc, #136]	; (8039b1c <vTaskDelayUntil+0xec>)
 8039a94:	681b      	ldr	r3, [r3, #0]
 8039a96:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8039a98:	687b      	ldr	r3, [r7, #4]
 8039a9a:	681b      	ldr	r3, [r3, #0]
 8039a9c:	683a      	ldr	r2, [r7, #0]
 8039a9e:	4413      	add	r3, r2
 8039aa0:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8039aa2:	687b      	ldr	r3, [r7, #4]
 8039aa4:	681b      	ldr	r3, [r3, #0]
 8039aa6:	6a3a      	ldr	r2, [r7, #32]
 8039aa8:	429a      	cmp	r2, r3
 8039aaa:	d20b      	bcs.n	8039ac4 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8039aac:	687b      	ldr	r3, [r7, #4]
 8039aae:	681b      	ldr	r3, [r3, #0]
 8039ab0:	69fa      	ldr	r2, [r7, #28]
 8039ab2:	429a      	cmp	r2, r3
 8039ab4:	d211      	bcs.n	8039ada <vTaskDelayUntil+0xaa>
 8039ab6:	69fa      	ldr	r2, [r7, #28]
 8039ab8:	6a3b      	ldr	r3, [r7, #32]
 8039aba:	429a      	cmp	r2, r3
 8039abc:	d90d      	bls.n	8039ada <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8039abe:	2301      	movs	r3, #1
 8039ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8039ac2:	e00a      	b.n	8039ada <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8039ac4:	687b      	ldr	r3, [r7, #4]
 8039ac6:	681b      	ldr	r3, [r3, #0]
 8039ac8:	69fa      	ldr	r2, [r7, #28]
 8039aca:	429a      	cmp	r2, r3
 8039acc:	d303      	bcc.n	8039ad6 <vTaskDelayUntil+0xa6>
 8039ace:	69fa      	ldr	r2, [r7, #28]
 8039ad0:	6a3b      	ldr	r3, [r7, #32]
 8039ad2:	429a      	cmp	r2, r3
 8039ad4:	d901      	bls.n	8039ada <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8039ad6:	2301      	movs	r3, #1
 8039ad8:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8039ada:	687b      	ldr	r3, [r7, #4]
 8039adc:	69fa      	ldr	r2, [r7, #28]
 8039ade:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8039ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8039ae2:	2b00      	cmp	r3, #0
 8039ae4:	d006      	beq.n	8039af4 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8039ae6:	69fa      	ldr	r2, [r7, #28]
 8039ae8:	6a3b      	ldr	r3, [r7, #32]
 8039aea:	1ad3      	subs	r3, r2, r3
 8039aec:	2100      	movs	r1, #0
 8039aee:	4618      	mov	r0, r3
 8039af0:	f001 f8d2 	bl	803ac98 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8039af4:	f000 f8bc 	bl	8039c70 <xTaskResumeAll>
 8039af8:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8039afa:	69bb      	ldr	r3, [r7, #24]
 8039afc:	2b00      	cmp	r3, #0
 8039afe:	d107      	bne.n	8039b10 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8039b00:	4b07      	ldr	r3, [pc, #28]	; (8039b20 <vTaskDelayUntil+0xf0>)
 8039b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8039b06:	601a      	str	r2, [r3, #0]
 8039b08:	f3bf 8f4f 	dsb	sy
 8039b0c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8039b10:	bf00      	nop
 8039b12:	3728      	adds	r7, #40	; 0x28
 8039b14:	46bd      	mov	sp, r7
 8039b16:	bd80      	pop	{r7, pc}
 8039b18:	200018f4 	.word	0x200018f4
 8039b1c:	200018d0 	.word	0x200018d0
 8039b20:	e000ed04 	.word	0xe000ed04

08039b24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8039b24:	b580      	push	{r7, lr}
 8039b26:	b084      	sub	sp, #16
 8039b28:	af00      	add	r7, sp, #0
 8039b2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8039b2c:	2300      	movs	r3, #0
 8039b2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8039b30:	687b      	ldr	r3, [r7, #4]
 8039b32:	2b00      	cmp	r3, #0
 8039b34:	d016      	beq.n	8039b64 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8039b36:	4b13      	ldr	r3, [pc, #76]	; (8039b84 <vTaskDelay+0x60>)
 8039b38:	681b      	ldr	r3, [r3, #0]
 8039b3a:	2b00      	cmp	r3, #0
 8039b3c:	d009      	beq.n	8039b52 <vTaskDelay+0x2e>
 8039b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8039b42:	f383 8811 	msr	BASEPRI, r3
 8039b46:	f3bf 8f6f 	isb	sy
 8039b4a:	f3bf 8f4f 	dsb	sy
 8039b4e:	60bb      	str	r3, [r7, #8]
 8039b50:	e7fe      	b.n	8039b50 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8039b52:	f000 f87f 	bl	8039c54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8039b56:	2100      	movs	r1, #0
 8039b58:	6878      	ldr	r0, [r7, #4]
 8039b5a:	f001 f89d 	bl	803ac98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8039b5e:	f000 f887 	bl	8039c70 <xTaskResumeAll>
 8039b62:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8039b64:	68fb      	ldr	r3, [r7, #12]
 8039b66:	2b00      	cmp	r3, #0
 8039b68:	d107      	bne.n	8039b7a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8039b6a:	4b07      	ldr	r3, [pc, #28]	; (8039b88 <vTaskDelay+0x64>)
 8039b6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8039b70:	601a      	str	r2, [r3, #0]
 8039b72:	f3bf 8f4f 	dsb	sy
 8039b76:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8039b7a:	bf00      	nop
 8039b7c:	3710      	adds	r7, #16
 8039b7e:	46bd      	mov	sp, r7
 8039b80:	bd80      	pop	{r7, pc}
 8039b82:	bf00      	nop
 8039b84:	200018f4 	.word	0x200018f4
 8039b88:	e000ed04 	.word	0xe000ed04

08039b8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8039b8c:	b580      	push	{r7, lr}
 8039b8e:	b08a      	sub	sp, #40	; 0x28
 8039b90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8039b92:	2300      	movs	r3, #0
 8039b94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8039b96:	2300      	movs	r3, #0
 8039b98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8039b9a:	463a      	mov	r2, r7
 8039b9c:	1d39      	adds	r1, r7, #4
 8039b9e:	f107 0308 	add.w	r3, r7, #8
 8039ba2:	4618      	mov	r0, r3
 8039ba4:	f7fe fb6c 	bl	8038280 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8039ba8:	6839      	ldr	r1, [r7, #0]
 8039baa:	687b      	ldr	r3, [r7, #4]
 8039bac:	68ba      	ldr	r2, [r7, #8]
 8039bae:	9202      	str	r2, [sp, #8]
 8039bb0:	9301      	str	r3, [sp, #4]
 8039bb2:	2300      	movs	r3, #0
 8039bb4:	9300      	str	r3, [sp, #0]
 8039bb6:	2300      	movs	r3, #0
 8039bb8:	460a      	mov	r2, r1
 8039bba:	4920      	ldr	r1, [pc, #128]	; (8039c3c <vTaskStartScheduler+0xb0>)
 8039bbc:	4820      	ldr	r0, [pc, #128]	; (8039c40 <vTaskStartScheduler+0xb4>)
 8039bbe:	f7ff fd93 	bl	80396e8 <xTaskCreateStatic>
 8039bc2:	4602      	mov	r2, r0
 8039bc4:	4b1f      	ldr	r3, [pc, #124]	; (8039c44 <vTaskStartScheduler+0xb8>)
 8039bc6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8039bc8:	4b1e      	ldr	r3, [pc, #120]	; (8039c44 <vTaskStartScheduler+0xb8>)
 8039bca:	681b      	ldr	r3, [r3, #0]
 8039bcc:	2b00      	cmp	r3, #0
 8039bce:	d002      	beq.n	8039bd6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8039bd0:	2301      	movs	r3, #1
 8039bd2:	617b      	str	r3, [r7, #20]
 8039bd4:	e001      	b.n	8039bda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8039bd6:	2300      	movs	r3, #0
 8039bd8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8039bda:	697b      	ldr	r3, [r7, #20]
 8039bdc:	2b01      	cmp	r3, #1
 8039bde:	d102      	bne.n	8039be6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8039be0:	f001 f8b4 	bl	803ad4c <xTimerCreateTimerTask>
 8039be4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8039be6:	697b      	ldr	r3, [r7, #20]
 8039be8:	2b01      	cmp	r3, #1
 8039bea:	d115      	bne.n	8039c18 <vTaskStartScheduler+0x8c>
 8039bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8039bf0:	f383 8811 	msr	BASEPRI, r3
 8039bf4:	f3bf 8f6f 	isb	sy
 8039bf8:	f3bf 8f4f 	dsb	sy
 8039bfc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8039bfe:	4b12      	ldr	r3, [pc, #72]	; (8039c48 <vTaskStartScheduler+0xbc>)
 8039c00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8039c04:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8039c06:	4b11      	ldr	r3, [pc, #68]	; (8039c4c <vTaskStartScheduler+0xc0>)
 8039c08:	2201      	movs	r2, #1
 8039c0a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8039c0c:	4b10      	ldr	r3, [pc, #64]	; (8039c50 <vTaskStartScheduler+0xc4>)
 8039c0e:	2200      	movs	r2, #0
 8039c10:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8039c12:	f001 fc8d 	bl	803b530 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8039c16:	e00d      	b.n	8039c34 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8039c18:	697b      	ldr	r3, [r7, #20]
 8039c1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8039c1e:	d109      	bne.n	8039c34 <vTaskStartScheduler+0xa8>
 8039c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8039c24:	f383 8811 	msr	BASEPRI, r3
 8039c28:	f3bf 8f6f 	isb	sy
 8039c2c:	f3bf 8f4f 	dsb	sy
 8039c30:	60fb      	str	r3, [r7, #12]
 8039c32:	e7fe      	b.n	8039c32 <vTaskStartScheduler+0xa6>
}
 8039c34:	bf00      	nop
 8039c36:	3718      	adds	r7, #24
 8039c38:	46bd      	mov	sp, r7
 8039c3a:	bd80      	pop	{r7, pc}
 8039c3c:	08043a30 	.word	0x08043a30
 8039c40:	0803a3cd 	.word	0x0803a3cd
 8039c44:	200018f0 	.word	0x200018f0
 8039c48:	200018ec 	.word	0x200018ec
 8039c4c:	200018d8 	.word	0x200018d8
 8039c50:	200018d0 	.word	0x200018d0

08039c54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8039c54:	b480      	push	{r7}
 8039c56:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8039c58:	4b04      	ldr	r3, [pc, #16]	; (8039c6c <vTaskSuspendAll+0x18>)
 8039c5a:	681b      	ldr	r3, [r3, #0]
 8039c5c:	3301      	adds	r3, #1
 8039c5e:	4a03      	ldr	r2, [pc, #12]	; (8039c6c <vTaskSuspendAll+0x18>)
 8039c60:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8039c62:	bf00      	nop
 8039c64:	46bd      	mov	sp, r7
 8039c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039c6a:	4770      	bx	lr
 8039c6c:	200018f4 	.word	0x200018f4

08039c70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8039c70:	b580      	push	{r7, lr}
 8039c72:	b084      	sub	sp, #16
 8039c74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8039c76:	2300      	movs	r3, #0
 8039c78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8039c7a:	2300      	movs	r3, #0
 8039c7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8039c7e:	4b41      	ldr	r3, [pc, #260]	; (8039d84 <xTaskResumeAll+0x114>)
 8039c80:	681b      	ldr	r3, [r3, #0]
 8039c82:	2b00      	cmp	r3, #0
 8039c84:	d109      	bne.n	8039c9a <xTaskResumeAll+0x2a>
 8039c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8039c8a:	f383 8811 	msr	BASEPRI, r3
 8039c8e:	f3bf 8f6f 	isb	sy
 8039c92:	f3bf 8f4f 	dsb	sy
 8039c96:	603b      	str	r3, [r7, #0]
 8039c98:	e7fe      	b.n	8039c98 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8039c9a:	f001 fce7 	bl	803b66c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8039c9e:	4b39      	ldr	r3, [pc, #228]	; (8039d84 <xTaskResumeAll+0x114>)
 8039ca0:	681b      	ldr	r3, [r3, #0]
 8039ca2:	3b01      	subs	r3, #1
 8039ca4:	4a37      	ldr	r2, [pc, #220]	; (8039d84 <xTaskResumeAll+0x114>)
 8039ca6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8039ca8:	4b36      	ldr	r3, [pc, #216]	; (8039d84 <xTaskResumeAll+0x114>)
 8039caa:	681b      	ldr	r3, [r3, #0]
 8039cac:	2b00      	cmp	r3, #0
 8039cae:	d162      	bne.n	8039d76 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8039cb0:	4b35      	ldr	r3, [pc, #212]	; (8039d88 <xTaskResumeAll+0x118>)
 8039cb2:	681b      	ldr	r3, [r3, #0]
 8039cb4:	2b00      	cmp	r3, #0
 8039cb6:	d05e      	beq.n	8039d76 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8039cb8:	e02f      	b.n	8039d1a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8039cba:	4b34      	ldr	r3, [pc, #208]	; (8039d8c <xTaskResumeAll+0x11c>)
 8039cbc:	68db      	ldr	r3, [r3, #12]
 8039cbe:	68db      	ldr	r3, [r3, #12]
 8039cc0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8039cc2:	68fb      	ldr	r3, [r7, #12]
 8039cc4:	3318      	adds	r3, #24
 8039cc6:	4618      	mov	r0, r3
 8039cc8:	f7fe fd7e 	bl	80387c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8039ccc:	68fb      	ldr	r3, [r7, #12]
 8039cce:	3304      	adds	r3, #4
 8039cd0:	4618      	mov	r0, r3
 8039cd2:	f7fe fd79 	bl	80387c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8039cd6:	68fb      	ldr	r3, [r7, #12]
 8039cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8039cda:	4b2d      	ldr	r3, [pc, #180]	; (8039d90 <xTaskResumeAll+0x120>)
 8039cdc:	681b      	ldr	r3, [r3, #0]
 8039cde:	429a      	cmp	r2, r3
 8039ce0:	d903      	bls.n	8039cea <xTaskResumeAll+0x7a>
 8039ce2:	68fb      	ldr	r3, [r7, #12]
 8039ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8039ce6:	4a2a      	ldr	r2, [pc, #168]	; (8039d90 <xTaskResumeAll+0x120>)
 8039ce8:	6013      	str	r3, [r2, #0]
 8039cea:	68fb      	ldr	r3, [r7, #12]
 8039cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8039cee:	4613      	mov	r3, r2
 8039cf0:	009b      	lsls	r3, r3, #2
 8039cf2:	4413      	add	r3, r2
 8039cf4:	009b      	lsls	r3, r3, #2
 8039cf6:	4a27      	ldr	r2, [pc, #156]	; (8039d94 <xTaskResumeAll+0x124>)
 8039cf8:	441a      	add	r2, r3
 8039cfa:	68fb      	ldr	r3, [r7, #12]
 8039cfc:	3304      	adds	r3, #4
 8039cfe:	4619      	mov	r1, r3
 8039d00:	4610      	mov	r0, r2
 8039d02:	f7fe fd04 	bl	803870e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8039d06:	68fb      	ldr	r3, [r7, #12]
 8039d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8039d0a:	4b23      	ldr	r3, [pc, #140]	; (8039d98 <xTaskResumeAll+0x128>)
 8039d0c:	681b      	ldr	r3, [r3, #0]
 8039d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8039d10:	429a      	cmp	r2, r3
 8039d12:	d302      	bcc.n	8039d1a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8039d14:	4b21      	ldr	r3, [pc, #132]	; (8039d9c <xTaskResumeAll+0x12c>)
 8039d16:	2201      	movs	r2, #1
 8039d18:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8039d1a:	4b1c      	ldr	r3, [pc, #112]	; (8039d8c <xTaskResumeAll+0x11c>)
 8039d1c:	681b      	ldr	r3, [r3, #0]
 8039d1e:	2b00      	cmp	r3, #0
 8039d20:	d1cb      	bne.n	8039cba <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8039d22:	68fb      	ldr	r3, [r7, #12]
 8039d24:	2b00      	cmp	r3, #0
 8039d26:	d001      	beq.n	8039d2c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8039d28:	f000 fc02 	bl	803a530 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8039d2c:	4b1c      	ldr	r3, [pc, #112]	; (8039da0 <xTaskResumeAll+0x130>)
 8039d2e:	681b      	ldr	r3, [r3, #0]
 8039d30:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8039d32:	687b      	ldr	r3, [r7, #4]
 8039d34:	2b00      	cmp	r3, #0
 8039d36:	d010      	beq.n	8039d5a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8039d38:	f000 f858 	bl	8039dec <xTaskIncrementTick>
 8039d3c:	4603      	mov	r3, r0
 8039d3e:	2b00      	cmp	r3, #0
 8039d40:	d002      	beq.n	8039d48 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8039d42:	4b16      	ldr	r3, [pc, #88]	; (8039d9c <xTaskResumeAll+0x12c>)
 8039d44:	2201      	movs	r2, #1
 8039d46:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8039d48:	687b      	ldr	r3, [r7, #4]
 8039d4a:	3b01      	subs	r3, #1
 8039d4c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8039d4e:	687b      	ldr	r3, [r7, #4]
 8039d50:	2b00      	cmp	r3, #0
 8039d52:	d1f1      	bne.n	8039d38 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8039d54:	4b12      	ldr	r3, [pc, #72]	; (8039da0 <xTaskResumeAll+0x130>)
 8039d56:	2200      	movs	r2, #0
 8039d58:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8039d5a:	4b10      	ldr	r3, [pc, #64]	; (8039d9c <xTaskResumeAll+0x12c>)
 8039d5c:	681b      	ldr	r3, [r3, #0]
 8039d5e:	2b00      	cmp	r3, #0
 8039d60:	d009      	beq.n	8039d76 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8039d62:	2301      	movs	r3, #1
 8039d64:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8039d66:	4b0f      	ldr	r3, [pc, #60]	; (8039da4 <xTaskResumeAll+0x134>)
 8039d68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8039d6c:	601a      	str	r2, [r3, #0]
 8039d6e:	f3bf 8f4f 	dsb	sy
 8039d72:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8039d76:	f001 fca7 	bl	803b6c8 <vPortExitCritical>

	return xAlreadyYielded;
 8039d7a:	68bb      	ldr	r3, [r7, #8]
}
 8039d7c:	4618      	mov	r0, r3
 8039d7e:	3710      	adds	r7, #16
 8039d80:	46bd      	mov	sp, r7
 8039d82:	bd80      	pop	{r7, pc}
 8039d84:	200018f4 	.word	0x200018f4
 8039d88:	200018cc 	.word	0x200018cc
 8039d8c:	2000188c 	.word	0x2000188c
 8039d90:	200018d4 	.word	0x200018d4
 8039d94:	200013fc 	.word	0x200013fc
 8039d98:	200013f8 	.word	0x200013f8
 8039d9c:	200018e0 	.word	0x200018e0
 8039da0:	200018dc 	.word	0x200018dc
 8039da4:	e000ed04 	.word	0xe000ed04

08039da8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8039da8:	b480      	push	{r7}
 8039daa:	b083      	sub	sp, #12
 8039dac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8039dae:	4b05      	ldr	r3, [pc, #20]	; (8039dc4 <xTaskGetTickCount+0x1c>)
 8039db0:	681b      	ldr	r3, [r3, #0]
 8039db2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8039db4:	687b      	ldr	r3, [r7, #4]
}
 8039db6:	4618      	mov	r0, r3
 8039db8:	370c      	adds	r7, #12
 8039dba:	46bd      	mov	sp, r7
 8039dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039dc0:	4770      	bx	lr
 8039dc2:	bf00      	nop
 8039dc4:	200018d0 	.word	0x200018d0

08039dc8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8039dc8:	b580      	push	{r7, lr}
 8039dca:	b082      	sub	sp, #8
 8039dcc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8039dce:	f001 fd29 	bl	803b824 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8039dd2:	2300      	movs	r3, #0
 8039dd4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8039dd6:	4b04      	ldr	r3, [pc, #16]	; (8039de8 <xTaskGetTickCountFromISR+0x20>)
 8039dd8:	681b      	ldr	r3, [r3, #0]
 8039dda:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8039ddc:	683b      	ldr	r3, [r7, #0]
}
 8039dde:	4618      	mov	r0, r3
 8039de0:	3708      	adds	r7, #8
 8039de2:	46bd      	mov	sp, r7
 8039de4:	bd80      	pop	{r7, pc}
 8039de6:	bf00      	nop
 8039de8:	200018d0 	.word	0x200018d0

08039dec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8039dec:	b580      	push	{r7, lr}
 8039dee:	b086      	sub	sp, #24
 8039df0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8039df2:	2300      	movs	r3, #0
 8039df4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8039df6:	4b4e      	ldr	r3, [pc, #312]	; (8039f30 <xTaskIncrementTick+0x144>)
 8039df8:	681b      	ldr	r3, [r3, #0]
 8039dfa:	2b00      	cmp	r3, #0
 8039dfc:	f040 8088 	bne.w	8039f10 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8039e00:	4b4c      	ldr	r3, [pc, #304]	; (8039f34 <xTaskIncrementTick+0x148>)
 8039e02:	681b      	ldr	r3, [r3, #0]
 8039e04:	3301      	adds	r3, #1
 8039e06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8039e08:	4a4a      	ldr	r2, [pc, #296]	; (8039f34 <xTaskIncrementTick+0x148>)
 8039e0a:	693b      	ldr	r3, [r7, #16]
 8039e0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8039e0e:	693b      	ldr	r3, [r7, #16]
 8039e10:	2b00      	cmp	r3, #0
 8039e12:	d11f      	bne.n	8039e54 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8039e14:	4b48      	ldr	r3, [pc, #288]	; (8039f38 <xTaskIncrementTick+0x14c>)
 8039e16:	681b      	ldr	r3, [r3, #0]
 8039e18:	681b      	ldr	r3, [r3, #0]
 8039e1a:	2b00      	cmp	r3, #0
 8039e1c:	d009      	beq.n	8039e32 <xTaskIncrementTick+0x46>
 8039e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8039e22:	f383 8811 	msr	BASEPRI, r3
 8039e26:	f3bf 8f6f 	isb	sy
 8039e2a:	f3bf 8f4f 	dsb	sy
 8039e2e:	603b      	str	r3, [r7, #0]
 8039e30:	e7fe      	b.n	8039e30 <xTaskIncrementTick+0x44>
 8039e32:	4b41      	ldr	r3, [pc, #260]	; (8039f38 <xTaskIncrementTick+0x14c>)
 8039e34:	681b      	ldr	r3, [r3, #0]
 8039e36:	60fb      	str	r3, [r7, #12]
 8039e38:	4b40      	ldr	r3, [pc, #256]	; (8039f3c <xTaskIncrementTick+0x150>)
 8039e3a:	681b      	ldr	r3, [r3, #0]
 8039e3c:	4a3e      	ldr	r2, [pc, #248]	; (8039f38 <xTaskIncrementTick+0x14c>)
 8039e3e:	6013      	str	r3, [r2, #0]
 8039e40:	4a3e      	ldr	r2, [pc, #248]	; (8039f3c <xTaskIncrementTick+0x150>)
 8039e42:	68fb      	ldr	r3, [r7, #12]
 8039e44:	6013      	str	r3, [r2, #0]
 8039e46:	4b3e      	ldr	r3, [pc, #248]	; (8039f40 <xTaskIncrementTick+0x154>)
 8039e48:	681b      	ldr	r3, [r3, #0]
 8039e4a:	3301      	adds	r3, #1
 8039e4c:	4a3c      	ldr	r2, [pc, #240]	; (8039f40 <xTaskIncrementTick+0x154>)
 8039e4e:	6013      	str	r3, [r2, #0]
 8039e50:	f000 fb6e 	bl	803a530 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8039e54:	4b3b      	ldr	r3, [pc, #236]	; (8039f44 <xTaskIncrementTick+0x158>)
 8039e56:	681b      	ldr	r3, [r3, #0]
 8039e58:	693a      	ldr	r2, [r7, #16]
 8039e5a:	429a      	cmp	r2, r3
 8039e5c:	d349      	bcc.n	8039ef2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8039e5e:	4b36      	ldr	r3, [pc, #216]	; (8039f38 <xTaskIncrementTick+0x14c>)
 8039e60:	681b      	ldr	r3, [r3, #0]
 8039e62:	681b      	ldr	r3, [r3, #0]
 8039e64:	2b00      	cmp	r3, #0
 8039e66:	d104      	bne.n	8039e72 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8039e68:	4b36      	ldr	r3, [pc, #216]	; (8039f44 <xTaskIncrementTick+0x158>)
 8039e6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8039e6e:	601a      	str	r2, [r3, #0]
					break;
 8039e70:	e03f      	b.n	8039ef2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8039e72:	4b31      	ldr	r3, [pc, #196]	; (8039f38 <xTaskIncrementTick+0x14c>)
 8039e74:	681b      	ldr	r3, [r3, #0]
 8039e76:	68db      	ldr	r3, [r3, #12]
 8039e78:	68db      	ldr	r3, [r3, #12]
 8039e7a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8039e7c:	68bb      	ldr	r3, [r7, #8]
 8039e7e:	685b      	ldr	r3, [r3, #4]
 8039e80:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8039e82:	693a      	ldr	r2, [r7, #16]
 8039e84:	687b      	ldr	r3, [r7, #4]
 8039e86:	429a      	cmp	r2, r3
 8039e88:	d203      	bcs.n	8039e92 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8039e8a:	4a2e      	ldr	r2, [pc, #184]	; (8039f44 <xTaskIncrementTick+0x158>)
 8039e8c:	687b      	ldr	r3, [r7, #4]
 8039e8e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8039e90:	e02f      	b.n	8039ef2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8039e92:	68bb      	ldr	r3, [r7, #8]
 8039e94:	3304      	adds	r3, #4
 8039e96:	4618      	mov	r0, r3
 8039e98:	f7fe fc96 	bl	80387c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8039e9c:	68bb      	ldr	r3, [r7, #8]
 8039e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8039ea0:	2b00      	cmp	r3, #0
 8039ea2:	d004      	beq.n	8039eae <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8039ea4:	68bb      	ldr	r3, [r7, #8]
 8039ea6:	3318      	adds	r3, #24
 8039ea8:	4618      	mov	r0, r3
 8039eaa:	f7fe fc8d 	bl	80387c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8039eae:	68bb      	ldr	r3, [r7, #8]
 8039eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8039eb2:	4b25      	ldr	r3, [pc, #148]	; (8039f48 <xTaskIncrementTick+0x15c>)
 8039eb4:	681b      	ldr	r3, [r3, #0]
 8039eb6:	429a      	cmp	r2, r3
 8039eb8:	d903      	bls.n	8039ec2 <xTaskIncrementTick+0xd6>
 8039eba:	68bb      	ldr	r3, [r7, #8]
 8039ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8039ebe:	4a22      	ldr	r2, [pc, #136]	; (8039f48 <xTaskIncrementTick+0x15c>)
 8039ec0:	6013      	str	r3, [r2, #0]
 8039ec2:	68bb      	ldr	r3, [r7, #8]
 8039ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8039ec6:	4613      	mov	r3, r2
 8039ec8:	009b      	lsls	r3, r3, #2
 8039eca:	4413      	add	r3, r2
 8039ecc:	009b      	lsls	r3, r3, #2
 8039ece:	4a1f      	ldr	r2, [pc, #124]	; (8039f4c <xTaskIncrementTick+0x160>)
 8039ed0:	441a      	add	r2, r3
 8039ed2:	68bb      	ldr	r3, [r7, #8]
 8039ed4:	3304      	adds	r3, #4
 8039ed6:	4619      	mov	r1, r3
 8039ed8:	4610      	mov	r0, r2
 8039eda:	f7fe fc18 	bl	803870e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8039ede:	68bb      	ldr	r3, [r7, #8]
 8039ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8039ee2:	4b1b      	ldr	r3, [pc, #108]	; (8039f50 <xTaskIncrementTick+0x164>)
 8039ee4:	681b      	ldr	r3, [r3, #0]
 8039ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8039ee8:	429a      	cmp	r2, r3
 8039eea:	d3b8      	bcc.n	8039e5e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8039eec:	2301      	movs	r3, #1
 8039eee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8039ef0:	e7b5      	b.n	8039e5e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8039ef2:	4b17      	ldr	r3, [pc, #92]	; (8039f50 <xTaskIncrementTick+0x164>)
 8039ef4:	681b      	ldr	r3, [r3, #0]
 8039ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8039ef8:	4914      	ldr	r1, [pc, #80]	; (8039f4c <xTaskIncrementTick+0x160>)
 8039efa:	4613      	mov	r3, r2
 8039efc:	009b      	lsls	r3, r3, #2
 8039efe:	4413      	add	r3, r2
 8039f00:	009b      	lsls	r3, r3, #2
 8039f02:	440b      	add	r3, r1
 8039f04:	681b      	ldr	r3, [r3, #0]
 8039f06:	2b01      	cmp	r3, #1
 8039f08:	d907      	bls.n	8039f1a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8039f0a:	2301      	movs	r3, #1
 8039f0c:	617b      	str	r3, [r7, #20]
 8039f0e:	e004      	b.n	8039f1a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8039f10:	4b10      	ldr	r3, [pc, #64]	; (8039f54 <xTaskIncrementTick+0x168>)
 8039f12:	681b      	ldr	r3, [r3, #0]
 8039f14:	3301      	adds	r3, #1
 8039f16:	4a0f      	ldr	r2, [pc, #60]	; (8039f54 <xTaskIncrementTick+0x168>)
 8039f18:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8039f1a:	4b0f      	ldr	r3, [pc, #60]	; (8039f58 <xTaskIncrementTick+0x16c>)
 8039f1c:	681b      	ldr	r3, [r3, #0]
 8039f1e:	2b00      	cmp	r3, #0
 8039f20:	d001      	beq.n	8039f26 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8039f22:	2301      	movs	r3, #1
 8039f24:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8039f26:	697b      	ldr	r3, [r7, #20]
}
 8039f28:	4618      	mov	r0, r3
 8039f2a:	3718      	adds	r7, #24
 8039f2c:	46bd      	mov	sp, r7
 8039f2e:	bd80      	pop	{r7, pc}
 8039f30:	200018f4 	.word	0x200018f4
 8039f34:	200018d0 	.word	0x200018d0
 8039f38:	20001884 	.word	0x20001884
 8039f3c:	20001888 	.word	0x20001888
 8039f40:	200018e4 	.word	0x200018e4
 8039f44:	200018ec 	.word	0x200018ec
 8039f48:	200018d4 	.word	0x200018d4
 8039f4c:	200013fc 	.word	0x200013fc
 8039f50:	200013f8 	.word	0x200013f8
 8039f54:	200018dc 	.word	0x200018dc
 8039f58:	200018e0 	.word	0x200018e0

08039f5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8039f5c:	b480      	push	{r7}
 8039f5e:	b085      	sub	sp, #20
 8039f60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8039f62:	4b27      	ldr	r3, [pc, #156]	; (803a000 <vTaskSwitchContext+0xa4>)
 8039f64:	681b      	ldr	r3, [r3, #0]
 8039f66:	2b00      	cmp	r3, #0
 8039f68:	d003      	beq.n	8039f72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8039f6a:	4b26      	ldr	r3, [pc, #152]	; (803a004 <vTaskSwitchContext+0xa8>)
 8039f6c:	2201      	movs	r2, #1
 8039f6e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8039f70:	e040      	b.n	8039ff4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8039f72:	4b24      	ldr	r3, [pc, #144]	; (803a004 <vTaskSwitchContext+0xa8>)
 8039f74:	2200      	movs	r2, #0
 8039f76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8039f78:	4b23      	ldr	r3, [pc, #140]	; (803a008 <vTaskSwitchContext+0xac>)
 8039f7a:	681b      	ldr	r3, [r3, #0]
 8039f7c:	60fb      	str	r3, [r7, #12]
 8039f7e:	e00f      	b.n	8039fa0 <vTaskSwitchContext+0x44>
 8039f80:	68fb      	ldr	r3, [r7, #12]
 8039f82:	2b00      	cmp	r3, #0
 8039f84:	d109      	bne.n	8039f9a <vTaskSwitchContext+0x3e>
 8039f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8039f8a:	f383 8811 	msr	BASEPRI, r3
 8039f8e:	f3bf 8f6f 	isb	sy
 8039f92:	f3bf 8f4f 	dsb	sy
 8039f96:	607b      	str	r3, [r7, #4]
 8039f98:	e7fe      	b.n	8039f98 <vTaskSwitchContext+0x3c>
 8039f9a:	68fb      	ldr	r3, [r7, #12]
 8039f9c:	3b01      	subs	r3, #1
 8039f9e:	60fb      	str	r3, [r7, #12]
 8039fa0:	491a      	ldr	r1, [pc, #104]	; (803a00c <vTaskSwitchContext+0xb0>)
 8039fa2:	68fa      	ldr	r2, [r7, #12]
 8039fa4:	4613      	mov	r3, r2
 8039fa6:	009b      	lsls	r3, r3, #2
 8039fa8:	4413      	add	r3, r2
 8039faa:	009b      	lsls	r3, r3, #2
 8039fac:	440b      	add	r3, r1
 8039fae:	681b      	ldr	r3, [r3, #0]
 8039fb0:	2b00      	cmp	r3, #0
 8039fb2:	d0e5      	beq.n	8039f80 <vTaskSwitchContext+0x24>
 8039fb4:	68fa      	ldr	r2, [r7, #12]
 8039fb6:	4613      	mov	r3, r2
 8039fb8:	009b      	lsls	r3, r3, #2
 8039fba:	4413      	add	r3, r2
 8039fbc:	009b      	lsls	r3, r3, #2
 8039fbe:	4a13      	ldr	r2, [pc, #76]	; (803a00c <vTaskSwitchContext+0xb0>)
 8039fc0:	4413      	add	r3, r2
 8039fc2:	60bb      	str	r3, [r7, #8]
 8039fc4:	68bb      	ldr	r3, [r7, #8]
 8039fc6:	685b      	ldr	r3, [r3, #4]
 8039fc8:	685a      	ldr	r2, [r3, #4]
 8039fca:	68bb      	ldr	r3, [r7, #8]
 8039fcc:	605a      	str	r2, [r3, #4]
 8039fce:	68bb      	ldr	r3, [r7, #8]
 8039fd0:	685a      	ldr	r2, [r3, #4]
 8039fd2:	68bb      	ldr	r3, [r7, #8]
 8039fd4:	3308      	adds	r3, #8
 8039fd6:	429a      	cmp	r2, r3
 8039fd8:	d104      	bne.n	8039fe4 <vTaskSwitchContext+0x88>
 8039fda:	68bb      	ldr	r3, [r7, #8]
 8039fdc:	685b      	ldr	r3, [r3, #4]
 8039fde:	685a      	ldr	r2, [r3, #4]
 8039fe0:	68bb      	ldr	r3, [r7, #8]
 8039fe2:	605a      	str	r2, [r3, #4]
 8039fe4:	68bb      	ldr	r3, [r7, #8]
 8039fe6:	685b      	ldr	r3, [r3, #4]
 8039fe8:	68db      	ldr	r3, [r3, #12]
 8039fea:	4a09      	ldr	r2, [pc, #36]	; (803a010 <vTaskSwitchContext+0xb4>)
 8039fec:	6013      	str	r3, [r2, #0]
 8039fee:	4a06      	ldr	r2, [pc, #24]	; (803a008 <vTaskSwitchContext+0xac>)
 8039ff0:	68fb      	ldr	r3, [r7, #12]
 8039ff2:	6013      	str	r3, [r2, #0]
}
 8039ff4:	bf00      	nop
 8039ff6:	3714      	adds	r7, #20
 8039ff8:	46bd      	mov	sp, r7
 8039ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039ffe:	4770      	bx	lr
 803a000:	200018f4 	.word	0x200018f4
 803a004:	200018e0 	.word	0x200018e0
 803a008:	200018d4 	.word	0x200018d4
 803a00c:	200013fc 	.word	0x200013fc
 803a010:	200013f8 	.word	0x200013f8

0803a014 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 803a014:	b580      	push	{r7, lr}
 803a016:	b084      	sub	sp, #16
 803a018:	af00      	add	r7, sp, #0
 803a01a:	6078      	str	r0, [r7, #4]
 803a01c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 803a01e:	687b      	ldr	r3, [r7, #4]
 803a020:	2b00      	cmp	r3, #0
 803a022:	d109      	bne.n	803a038 <vTaskPlaceOnEventList+0x24>
 803a024:	f04f 0350 	mov.w	r3, #80	; 0x50
 803a028:	f383 8811 	msr	BASEPRI, r3
 803a02c:	f3bf 8f6f 	isb	sy
 803a030:	f3bf 8f4f 	dsb	sy
 803a034:	60fb      	str	r3, [r7, #12]
 803a036:	e7fe      	b.n	803a036 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 803a038:	4b07      	ldr	r3, [pc, #28]	; (803a058 <vTaskPlaceOnEventList+0x44>)
 803a03a:	681b      	ldr	r3, [r3, #0]
 803a03c:	3318      	adds	r3, #24
 803a03e:	4619      	mov	r1, r3
 803a040:	6878      	ldr	r0, [r7, #4]
 803a042:	f7fe fb88 	bl	8038756 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 803a046:	2101      	movs	r1, #1
 803a048:	6838      	ldr	r0, [r7, #0]
 803a04a:	f000 fe25 	bl	803ac98 <prvAddCurrentTaskToDelayedList>
}
 803a04e:	bf00      	nop
 803a050:	3710      	adds	r7, #16
 803a052:	46bd      	mov	sp, r7
 803a054:	bd80      	pop	{r7, pc}
 803a056:	bf00      	nop
 803a058:	200013f8 	.word	0x200013f8

0803a05c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 803a05c:	b580      	push	{r7, lr}
 803a05e:	b086      	sub	sp, #24
 803a060:	af00      	add	r7, sp, #0
 803a062:	60f8      	str	r0, [r7, #12]
 803a064:	60b9      	str	r1, [r7, #8]
 803a066:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 803a068:	68fb      	ldr	r3, [r7, #12]
 803a06a:	2b00      	cmp	r3, #0
 803a06c:	d109      	bne.n	803a082 <vTaskPlaceOnUnorderedEventList+0x26>
 803a06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 803a072:	f383 8811 	msr	BASEPRI, r3
 803a076:	f3bf 8f6f 	isb	sy
 803a07a:	f3bf 8f4f 	dsb	sy
 803a07e:	617b      	str	r3, [r7, #20]
 803a080:	e7fe      	b.n	803a080 <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 803a082:	4b11      	ldr	r3, [pc, #68]	; (803a0c8 <vTaskPlaceOnUnorderedEventList+0x6c>)
 803a084:	681b      	ldr	r3, [r3, #0]
 803a086:	2b00      	cmp	r3, #0
 803a088:	d109      	bne.n	803a09e <vTaskPlaceOnUnorderedEventList+0x42>
 803a08a:	f04f 0350 	mov.w	r3, #80	; 0x50
 803a08e:	f383 8811 	msr	BASEPRI, r3
 803a092:	f3bf 8f6f 	isb	sy
 803a096:	f3bf 8f4f 	dsb	sy
 803a09a:	613b      	str	r3, [r7, #16]
 803a09c:	e7fe      	b.n	803a09c <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 803a09e:	4b0b      	ldr	r3, [pc, #44]	; (803a0cc <vTaskPlaceOnUnorderedEventList+0x70>)
 803a0a0:	681b      	ldr	r3, [r3, #0]
 803a0a2:	68ba      	ldr	r2, [r7, #8]
 803a0a4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 803a0a8:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 803a0aa:	4b08      	ldr	r3, [pc, #32]	; (803a0cc <vTaskPlaceOnUnorderedEventList+0x70>)
 803a0ac:	681b      	ldr	r3, [r3, #0]
 803a0ae:	3318      	adds	r3, #24
 803a0b0:	4619      	mov	r1, r3
 803a0b2:	68f8      	ldr	r0, [r7, #12]
 803a0b4:	f7fe fb2b 	bl	803870e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 803a0b8:	2101      	movs	r1, #1
 803a0ba:	6878      	ldr	r0, [r7, #4]
 803a0bc:	f000 fdec 	bl	803ac98 <prvAddCurrentTaskToDelayedList>
}
 803a0c0:	bf00      	nop
 803a0c2:	3718      	adds	r7, #24
 803a0c4:	46bd      	mov	sp, r7
 803a0c6:	bd80      	pop	{r7, pc}
 803a0c8:	200018f4 	.word	0x200018f4
 803a0cc:	200013f8 	.word	0x200013f8

0803a0d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 803a0d0:	b580      	push	{r7, lr}
 803a0d2:	b086      	sub	sp, #24
 803a0d4:	af00      	add	r7, sp, #0
 803a0d6:	60f8      	str	r0, [r7, #12]
 803a0d8:	60b9      	str	r1, [r7, #8]
 803a0da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 803a0dc:	68fb      	ldr	r3, [r7, #12]
 803a0de:	2b00      	cmp	r3, #0
 803a0e0:	d109      	bne.n	803a0f6 <vTaskPlaceOnEventListRestricted+0x26>
 803a0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 803a0e6:	f383 8811 	msr	BASEPRI, r3
 803a0ea:	f3bf 8f6f 	isb	sy
 803a0ee:	f3bf 8f4f 	dsb	sy
 803a0f2:	617b      	str	r3, [r7, #20]
 803a0f4:	e7fe      	b.n	803a0f4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 803a0f6:	4b0a      	ldr	r3, [pc, #40]	; (803a120 <vTaskPlaceOnEventListRestricted+0x50>)
 803a0f8:	681b      	ldr	r3, [r3, #0]
 803a0fa:	3318      	adds	r3, #24
 803a0fc:	4619      	mov	r1, r3
 803a0fe:	68f8      	ldr	r0, [r7, #12]
 803a100:	f7fe fb05 	bl	803870e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 803a104:	687b      	ldr	r3, [r7, #4]
 803a106:	2b00      	cmp	r3, #0
 803a108:	d002      	beq.n	803a110 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 803a10a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 803a10e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 803a110:	6879      	ldr	r1, [r7, #4]
 803a112:	68b8      	ldr	r0, [r7, #8]
 803a114:	f000 fdc0 	bl	803ac98 <prvAddCurrentTaskToDelayedList>
	}
 803a118:	bf00      	nop
 803a11a:	3718      	adds	r7, #24
 803a11c:	46bd      	mov	sp, r7
 803a11e:	bd80      	pop	{r7, pc}
 803a120:	200013f8 	.word	0x200013f8

0803a124 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 803a124:	b580      	push	{r7, lr}
 803a126:	b086      	sub	sp, #24
 803a128:	af00      	add	r7, sp, #0
 803a12a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 803a12c:	687b      	ldr	r3, [r7, #4]
 803a12e:	68db      	ldr	r3, [r3, #12]
 803a130:	68db      	ldr	r3, [r3, #12]
 803a132:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 803a134:	693b      	ldr	r3, [r7, #16]
 803a136:	2b00      	cmp	r3, #0
 803a138:	d109      	bne.n	803a14e <xTaskRemoveFromEventList+0x2a>
 803a13a:	f04f 0350 	mov.w	r3, #80	; 0x50
 803a13e:	f383 8811 	msr	BASEPRI, r3
 803a142:	f3bf 8f6f 	isb	sy
 803a146:	f3bf 8f4f 	dsb	sy
 803a14a:	60fb      	str	r3, [r7, #12]
 803a14c:	e7fe      	b.n	803a14c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 803a14e:	693b      	ldr	r3, [r7, #16]
 803a150:	3318      	adds	r3, #24
 803a152:	4618      	mov	r0, r3
 803a154:	f7fe fb38 	bl	80387c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 803a158:	4b1d      	ldr	r3, [pc, #116]	; (803a1d0 <xTaskRemoveFromEventList+0xac>)
 803a15a:	681b      	ldr	r3, [r3, #0]
 803a15c:	2b00      	cmp	r3, #0
 803a15e:	d11d      	bne.n	803a19c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 803a160:	693b      	ldr	r3, [r7, #16]
 803a162:	3304      	adds	r3, #4
 803a164:	4618      	mov	r0, r3
 803a166:	f7fe fb2f 	bl	80387c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 803a16a:	693b      	ldr	r3, [r7, #16]
 803a16c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803a16e:	4b19      	ldr	r3, [pc, #100]	; (803a1d4 <xTaskRemoveFromEventList+0xb0>)
 803a170:	681b      	ldr	r3, [r3, #0]
 803a172:	429a      	cmp	r2, r3
 803a174:	d903      	bls.n	803a17e <xTaskRemoveFromEventList+0x5a>
 803a176:	693b      	ldr	r3, [r7, #16]
 803a178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803a17a:	4a16      	ldr	r2, [pc, #88]	; (803a1d4 <xTaskRemoveFromEventList+0xb0>)
 803a17c:	6013      	str	r3, [r2, #0]
 803a17e:	693b      	ldr	r3, [r7, #16]
 803a180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803a182:	4613      	mov	r3, r2
 803a184:	009b      	lsls	r3, r3, #2
 803a186:	4413      	add	r3, r2
 803a188:	009b      	lsls	r3, r3, #2
 803a18a:	4a13      	ldr	r2, [pc, #76]	; (803a1d8 <xTaskRemoveFromEventList+0xb4>)
 803a18c:	441a      	add	r2, r3
 803a18e:	693b      	ldr	r3, [r7, #16]
 803a190:	3304      	adds	r3, #4
 803a192:	4619      	mov	r1, r3
 803a194:	4610      	mov	r0, r2
 803a196:	f7fe faba 	bl	803870e <vListInsertEnd>
 803a19a:	e005      	b.n	803a1a8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 803a19c:	693b      	ldr	r3, [r7, #16]
 803a19e:	3318      	adds	r3, #24
 803a1a0:	4619      	mov	r1, r3
 803a1a2:	480e      	ldr	r0, [pc, #56]	; (803a1dc <xTaskRemoveFromEventList+0xb8>)
 803a1a4:	f7fe fab3 	bl	803870e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 803a1a8:	693b      	ldr	r3, [r7, #16]
 803a1aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803a1ac:	4b0c      	ldr	r3, [pc, #48]	; (803a1e0 <xTaskRemoveFromEventList+0xbc>)
 803a1ae:	681b      	ldr	r3, [r3, #0]
 803a1b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803a1b2:	429a      	cmp	r2, r3
 803a1b4:	d905      	bls.n	803a1c2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 803a1b6:	2301      	movs	r3, #1
 803a1b8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 803a1ba:	4b0a      	ldr	r3, [pc, #40]	; (803a1e4 <xTaskRemoveFromEventList+0xc0>)
 803a1bc:	2201      	movs	r2, #1
 803a1be:	601a      	str	r2, [r3, #0]
 803a1c0:	e001      	b.n	803a1c6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 803a1c2:	2300      	movs	r3, #0
 803a1c4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 803a1c6:	697b      	ldr	r3, [r7, #20]
}
 803a1c8:	4618      	mov	r0, r3
 803a1ca:	3718      	adds	r7, #24
 803a1cc:	46bd      	mov	sp, r7
 803a1ce:	bd80      	pop	{r7, pc}
 803a1d0:	200018f4 	.word	0x200018f4
 803a1d4:	200018d4 	.word	0x200018d4
 803a1d8:	200013fc 	.word	0x200013fc
 803a1dc:	2000188c 	.word	0x2000188c
 803a1e0:	200013f8 	.word	0x200013f8
 803a1e4:	200018e0 	.word	0x200018e0

0803a1e8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 803a1e8:	b580      	push	{r7, lr}
 803a1ea:	b086      	sub	sp, #24
 803a1ec:	af00      	add	r7, sp, #0
 803a1ee:	6078      	str	r0, [r7, #4]
 803a1f0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 803a1f2:	4b28      	ldr	r3, [pc, #160]	; (803a294 <vTaskRemoveFromUnorderedEventList+0xac>)
 803a1f4:	681b      	ldr	r3, [r3, #0]
 803a1f6:	2b00      	cmp	r3, #0
 803a1f8:	d109      	bne.n	803a20e <vTaskRemoveFromUnorderedEventList+0x26>
 803a1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 803a1fe:	f383 8811 	msr	BASEPRI, r3
 803a202:	f3bf 8f6f 	isb	sy
 803a206:	f3bf 8f4f 	dsb	sy
 803a20a:	613b      	str	r3, [r7, #16]
 803a20c:	e7fe      	b.n	803a20c <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 803a20e:	683b      	ldr	r3, [r7, #0]
 803a210:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 803a214:	687b      	ldr	r3, [r7, #4]
 803a216:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 803a218:	687b      	ldr	r3, [r7, #4]
 803a21a:	68db      	ldr	r3, [r3, #12]
 803a21c:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 803a21e:	697b      	ldr	r3, [r7, #20]
 803a220:	2b00      	cmp	r3, #0
 803a222:	d109      	bne.n	803a238 <vTaskRemoveFromUnorderedEventList+0x50>
 803a224:	f04f 0350 	mov.w	r3, #80	; 0x50
 803a228:	f383 8811 	msr	BASEPRI, r3
 803a22c:	f3bf 8f6f 	isb	sy
 803a230:	f3bf 8f4f 	dsb	sy
 803a234:	60fb      	str	r3, [r7, #12]
 803a236:	e7fe      	b.n	803a236 <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 803a238:	6878      	ldr	r0, [r7, #4]
 803a23a:	f7fe fac5 	bl	80387c8 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 803a23e:	697b      	ldr	r3, [r7, #20]
 803a240:	3304      	adds	r3, #4
 803a242:	4618      	mov	r0, r3
 803a244:	f7fe fac0 	bl	80387c8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 803a248:	697b      	ldr	r3, [r7, #20]
 803a24a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803a24c:	4b12      	ldr	r3, [pc, #72]	; (803a298 <vTaskRemoveFromUnorderedEventList+0xb0>)
 803a24e:	681b      	ldr	r3, [r3, #0]
 803a250:	429a      	cmp	r2, r3
 803a252:	d903      	bls.n	803a25c <vTaskRemoveFromUnorderedEventList+0x74>
 803a254:	697b      	ldr	r3, [r7, #20]
 803a256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803a258:	4a0f      	ldr	r2, [pc, #60]	; (803a298 <vTaskRemoveFromUnorderedEventList+0xb0>)
 803a25a:	6013      	str	r3, [r2, #0]
 803a25c:	697b      	ldr	r3, [r7, #20]
 803a25e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803a260:	4613      	mov	r3, r2
 803a262:	009b      	lsls	r3, r3, #2
 803a264:	4413      	add	r3, r2
 803a266:	009b      	lsls	r3, r3, #2
 803a268:	4a0c      	ldr	r2, [pc, #48]	; (803a29c <vTaskRemoveFromUnorderedEventList+0xb4>)
 803a26a:	441a      	add	r2, r3
 803a26c:	697b      	ldr	r3, [r7, #20]
 803a26e:	3304      	adds	r3, #4
 803a270:	4619      	mov	r1, r3
 803a272:	4610      	mov	r0, r2
 803a274:	f7fe fa4b 	bl	803870e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 803a278:	697b      	ldr	r3, [r7, #20]
 803a27a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803a27c:	4b08      	ldr	r3, [pc, #32]	; (803a2a0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 803a27e:	681b      	ldr	r3, [r3, #0]
 803a280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803a282:	429a      	cmp	r2, r3
 803a284:	d902      	bls.n	803a28c <vTaskRemoveFromUnorderedEventList+0xa4>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 803a286:	4b07      	ldr	r3, [pc, #28]	; (803a2a4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 803a288:	2201      	movs	r2, #1
 803a28a:	601a      	str	r2, [r3, #0]
	}
}
 803a28c:	bf00      	nop
 803a28e:	3718      	adds	r7, #24
 803a290:	46bd      	mov	sp, r7
 803a292:	bd80      	pop	{r7, pc}
 803a294:	200018f4 	.word	0x200018f4
 803a298:	200018d4 	.word	0x200018d4
 803a29c:	200013fc 	.word	0x200013fc
 803a2a0:	200013f8 	.word	0x200013f8
 803a2a4:	200018e0 	.word	0x200018e0

0803a2a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 803a2a8:	b480      	push	{r7}
 803a2aa:	b083      	sub	sp, #12
 803a2ac:	af00      	add	r7, sp, #0
 803a2ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 803a2b0:	4b06      	ldr	r3, [pc, #24]	; (803a2cc <vTaskInternalSetTimeOutState+0x24>)
 803a2b2:	681a      	ldr	r2, [r3, #0]
 803a2b4:	687b      	ldr	r3, [r7, #4]
 803a2b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 803a2b8:	4b05      	ldr	r3, [pc, #20]	; (803a2d0 <vTaskInternalSetTimeOutState+0x28>)
 803a2ba:	681a      	ldr	r2, [r3, #0]
 803a2bc:	687b      	ldr	r3, [r7, #4]
 803a2be:	605a      	str	r2, [r3, #4]
}
 803a2c0:	bf00      	nop
 803a2c2:	370c      	adds	r7, #12
 803a2c4:	46bd      	mov	sp, r7
 803a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a2ca:	4770      	bx	lr
 803a2cc:	200018e4 	.word	0x200018e4
 803a2d0:	200018d0 	.word	0x200018d0

0803a2d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 803a2d4:	b580      	push	{r7, lr}
 803a2d6:	b088      	sub	sp, #32
 803a2d8:	af00      	add	r7, sp, #0
 803a2da:	6078      	str	r0, [r7, #4]
 803a2dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 803a2de:	687b      	ldr	r3, [r7, #4]
 803a2e0:	2b00      	cmp	r3, #0
 803a2e2:	d109      	bne.n	803a2f8 <xTaskCheckForTimeOut+0x24>
 803a2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 803a2e8:	f383 8811 	msr	BASEPRI, r3
 803a2ec:	f3bf 8f6f 	isb	sy
 803a2f0:	f3bf 8f4f 	dsb	sy
 803a2f4:	613b      	str	r3, [r7, #16]
 803a2f6:	e7fe      	b.n	803a2f6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 803a2f8:	683b      	ldr	r3, [r7, #0]
 803a2fa:	2b00      	cmp	r3, #0
 803a2fc:	d109      	bne.n	803a312 <xTaskCheckForTimeOut+0x3e>
 803a2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 803a302:	f383 8811 	msr	BASEPRI, r3
 803a306:	f3bf 8f6f 	isb	sy
 803a30a:	f3bf 8f4f 	dsb	sy
 803a30e:	60fb      	str	r3, [r7, #12]
 803a310:	e7fe      	b.n	803a310 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 803a312:	f001 f9ab 	bl	803b66c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 803a316:	4b24      	ldr	r3, [pc, #144]	; (803a3a8 <xTaskCheckForTimeOut+0xd4>)
 803a318:	681b      	ldr	r3, [r3, #0]
 803a31a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 803a31c:	687b      	ldr	r3, [r7, #4]
 803a31e:	685b      	ldr	r3, [r3, #4]
 803a320:	69ba      	ldr	r2, [r7, #24]
 803a322:	1ad3      	subs	r3, r2, r3
 803a324:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 803a326:	4b21      	ldr	r3, [pc, #132]	; (803a3ac <xTaskCheckForTimeOut+0xd8>)
 803a328:	681b      	ldr	r3, [r3, #0]
 803a32a:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 803a32e:	2b00      	cmp	r3, #0
 803a330:	d007      	beq.n	803a342 <xTaskCheckForTimeOut+0x6e>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 803a332:	4b1e      	ldr	r3, [pc, #120]	; (803a3ac <xTaskCheckForTimeOut+0xd8>)
 803a334:	681b      	ldr	r3, [r3, #0]
 803a336:	2200      	movs	r2, #0
 803a338:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
				xReturn = pdTRUE;
 803a33c:	2301      	movs	r3, #1
 803a33e:	61fb      	str	r3, [r7, #28]
 803a340:	e02b      	b.n	803a39a <xTaskCheckForTimeOut+0xc6>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 803a342:	683b      	ldr	r3, [r7, #0]
 803a344:	681b      	ldr	r3, [r3, #0]
 803a346:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 803a34a:	d102      	bne.n	803a352 <xTaskCheckForTimeOut+0x7e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 803a34c:	2300      	movs	r3, #0
 803a34e:	61fb      	str	r3, [r7, #28]
 803a350:	e023      	b.n	803a39a <xTaskCheckForTimeOut+0xc6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 803a352:	687b      	ldr	r3, [r7, #4]
 803a354:	681a      	ldr	r2, [r3, #0]
 803a356:	4b16      	ldr	r3, [pc, #88]	; (803a3b0 <xTaskCheckForTimeOut+0xdc>)
 803a358:	681b      	ldr	r3, [r3, #0]
 803a35a:	429a      	cmp	r2, r3
 803a35c:	d007      	beq.n	803a36e <xTaskCheckForTimeOut+0x9a>
 803a35e:	687b      	ldr	r3, [r7, #4]
 803a360:	685b      	ldr	r3, [r3, #4]
 803a362:	69ba      	ldr	r2, [r7, #24]
 803a364:	429a      	cmp	r2, r3
 803a366:	d302      	bcc.n	803a36e <xTaskCheckForTimeOut+0x9a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 803a368:	2301      	movs	r3, #1
 803a36a:	61fb      	str	r3, [r7, #28]
 803a36c:	e015      	b.n	803a39a <xTaskCheckForTimeOut+0xc6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 803a36e:	683b      	ldr	r3, [r7, #0]
 803a370:	681b      	ldr	r3, [r3, #0]
 803a372:	697a      	ldr	r2, [r7, #20]
 803a374:	429a      	cmp	r2, r3
 803a376:	d20b      	bcs.n	803a390 <xTaskCheckForTimeOut+0xbc>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 803a378:	683b      	ldr	r3, [r7, #0]
 803a37a:	681a      	ldr	r2, [r3, #0]
 803a37c:	697b      	ldr	r3, [r7, #20]
 803a37e:	1ad2      	subs	r2, r2, r3
 803a380:	683b      	ldr	r3, [r7, #0]
 803a382:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 803a384:	6878      	ldr	r0, [r7, #4]
 803a386:	f7ff ff8f 	bl	803a2a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 803a38a:	2300      	movs	r3, #0
 803a38c:	61fb      	str	r3, [r7, #28]
 803a38e:	e004      	b.n	803a39a <xTaskCheckForTimeOut+0xc6>
		}
		else
		{
			*pxTicksToWait = 0;
 803a390:	683b      	ldr	r3, [r7, #0]
 803a392:	2200      	movs	r2, #0
 803a394:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 803a396:	2301      	movs	r3, #1
 803a398:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 803a39a:	f001 f995 	bl	803b6c8 <vPortExitCritical>

	return xReturn;
 803a39e:	69fb      	ldr	r3, [r7, #28]
}
 803a3a0:	4618      	mov	r0, r3
 803a3a2:	3720      	adds	r7, #32
 803a3a4:	46bd      	mov	sp, r7
 803a3a6:	bd80      	pop	{r7, pc}
 803a3a8:	200018d0 	.word	0x200018d0
 803a3ac:	200013f8 	.word	0x200013f8
 803a3b0:	200018e4 	.word	0x200018e4

0803a3b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 803a3b4:	b480      	push	{r7}
 803a3b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 803a3b8:	4b03      	ldr	r3, [pc, #12]	; (803a3c8 <vTaskMissedYield+0x14>)
 803a3ba:	2201      	movs	r2, #1
 803a3bc:	601a      	str	r2, [r3, #0]
}
 803a3be:	bf00      	nop
 803a3c0:	46bd      	mov	sp, r7
 803a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a3c6:	4770      	bx	lr
 803a3c8:	200018e0 	.word	0x200018e0

0803a3cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 803a3cc:	b580      	push	{r7, lr}
 803a3ce:	b082      	sub	sp, #8
 803a3d0:	af00      	add	r7, sp, #0
 803a3d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 803a3d4:	f000 f852 	bl	803a47c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 803a3d8:	4b06      	ldr	r3, [pc, #24]	; (803a3f4 <prvIdleTask+0x28>)
 803a3da:	681b      	ldr	r3, [r3, #0]
 803a3dc:	2b01      	cmp	r3, #1
 803a3de:	d9f9      	bls.n	803a3d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 803a3e0:	4b05      	ldr	r3, [pc, #20]	; (803a3f8 <prvIdleTask+0x2c>)
 803a3e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 803a3e6:	601a      	str	r2, [r3, #0]
 803a3e8:	f3bf 8f4f 	dsb	sy
 803a3ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 803a3f0:	e7f0      	b.n	803a3d4 <prvIdleTask+0x8>
 803a3f2:	bf00      	nop
 803a3f4:	200013fc 	.word	0x200013fc
 803a3f8:	e000ed04 	.word	0xe000ed04

0803a3fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 803a3fc:	b580      	push	{r7, lr}
 803a3fe:	b082      	sub	sp, #8
 803a400:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 803a402:	2300      	movs	r3, #0
 803a404:	607b      	str	r3, [r7, #4]
 803a406:	e00c      	b.n	803a422 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 803a408:	687a      	ldr	r2, [r7, #4]
 803a40a:	4613      	mov	r3, r2
 803a40c:	009b      	lsls	r3, r3, #2
 803a40e:	4413      	add	r3, r2
 803a410:	009b      	lsls	r3, r3, #2
 803a412:	4a12      	ldr	r2, [pc, #72]	; (803a45c <prvInitialiseTaskLists+0x60>)
 803a414:	4413      	add	r3, r2
 803a416:	4618      	mov	r0, r3
 803a418:	f7fe f94c 	bl	80386b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 803a41c:	687b      	ldr	r3, [r7, #4]
 803a41e:	3301      	adds	r3, #1
 803a420:	607b      	str	r3, [r7, #4]
 803a422:	687b      	ldr	r3, [r7, #4]
 803a424:	2b37      	cmp	r3, #55	; 0x37
 803a426:	d9ef      	bls.n	803a408 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 803a428:	480d      	ldr	r0, [pc, #52]	; (803a460 <prvInitialiseTaskLists+0x64>)
 803a42a:	f7fe f943 	bl	80386b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 803a42e:	480d      	ldr	r0, [pc, #52]	; (803a464 <prvInitialiseTaskLists+0x68>)
 803a430:	f7fe f940 	bl	80386b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 803a434:	480c      	ldr	r0, [pc, #48]	; (803a468 <prvInitialiseTaskLists+0x6c>)
 803a436:	f7fe f93d 	bl	80386b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 803a43a:	480c      	ldr	r0, [pc, #48]	; (803a46c <prvInitialiseTaskLists+0x70>)
 803a43c:	f7fe f93a 	bl	80386b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 803a440:	480b      	ldr	r0, [pc, #44]	; (803a470 <prvInitialiseTaskLists+0x74>)
 803a442:	f7fe f937 	bl	80386b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 803a446:	4b0b      	ldr	r3, [pc, #44]	; (803a474 <prvInitialiseTaskLists+0x78>)
 803a448:	4a05      	ldr	r2, [pc, #20]	; (803a460 <prvInitialiseTaskLists+0x64>)
 803a44a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 803a44c:	4b0a      	ldr	r3, [pc, #40]	; (803a478 <prvInitialiseTaskLists+0x7c>)
 803a44e:	4a05      	ldr	r2, [pc, #20]	; (803a464 <prvInitialiseTaskLists+0x68>)
 803a450:	601a      	str	r2, [r3, #0]
}
 803a452:	bf00      	nop
 803a454:	3708      	adds	r7, #8
 803a456:	46bd      	mov	sp, r7
 803a458:	bd80      	pop	{r7, pc}
 803a45a:	bf00      	nop
 803a45c:	200013fc 	.word	0x200013fc
 803a460:	2000185c 	.word	0x2000185c
 803a464:	20001870 	.word	0x20001870
 803a468:	2000188c 	.word	0x2000188c
 803a46c:	200018a0 	.word	0x200018a0
 803a470:	200018b8 	.word	0x200018b8
 803a474:	20001884 	.word	0x20001884
 803a478:	20001888 	.word	0x20001888

0803a47c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 803a47c:	b580      	push	{r7, lr}
 803a47e:	b082      	sub	sp, #8
 803a480:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 803a482:	e019      	b.n	803a4b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 803a484:	f001 f8f2 	bl	803b66c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 803a488:	4b0f      	ldr	r3, [pc, #60]	; (803a4c8 <prvCheckTasksWaitingTermination+0x4c>)
 803a48a:	68db      	ldr	r3, [r3, #12]
 803a48c:	68db      	ldr	r3, [r3, #12]
 803a48e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 803a490:	687b      	ldr	r3, [r7, #4]
 803a492:	3304      	adds	r3, #4
 803a494:	4618      	mov	r0, r3
 803a496:	f7fe f997 	bl	80387c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 803a49a:	4b0c      	ldr	r3, [pc, #48]	; (803a4cc <prvCheckTasksWaitingTermination+0x50>)
 803a49c:	681b      	ldr	r3, [r3, #0]
 803a49e:	3b01      	subs	r3, #1
 803a4a0:	4a0a      	ldr	r2, [pc, #40]	; (803a4cc <prvCheckTasksWaitingTermination+0x50>)
 803a4a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 803a4a4:	4b0a      	ldr	r3, [pc, #40]	; (803a4d0 <prvCheckTasksWaitingTermination+0x54>)
 803a4a6:	681b      	ldr	r3, [r3, #0]
 803a4a8:	3b01      	subs	r3, #1
 803a4aa:	4a09      	ldr	r2, [pc, #36]	; (803a4d0 <prvCheckTasksWaitingTermination+0x54>)
 803a4ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 803a4ae:	f001 f90b 	bl	803b6c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 803a4b2:	6878      	ldr	r0, [r7, #4]
 803a4b4:	f000 f80e 	bl	803a4d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 803a4b8:	4b05      	ldr	r3, [pc, #20]	; (803a4d0 <prvCheckTasksWaitingTermination+0x54>)
 803a4ba:	681b      	ldr	r3, [r3, #0]
 803a4bc:	2b00      	cmp	r3, #0
 803a4be:	d1e1      	bne.n	803a484 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 803a4c0:	bf00      	nop
 803a4c2:	3708      	adds	r7, #8
 803a4c4:	46bd      	mov	sp, r7
 803a4c6:	bd80      	pop	{r7, pc}
 803a4c8:	200018a0 	.word	0x200018a0
 803a4cc:	200018cc 	.word	0x200018cc
 803a4d0:	200018b4 	.word	0x200018b4

0803a4d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 803a4d4:	b580      	push	{r7, lr}
 803a4d6:	b084      	sub	sp, #16
 803a4d8:	af00      	add	r7, sp, #0
 803a4da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 803a4dc:	687b      	ldr	r3, [r7, #4]
 803a4de:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 803a4e2:	2b00      	cmp	r3, #0
 803a4e4:	d108      	bne.n	803a4f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 803a4e6:	687b      	ldr	r3, [r7, #4]
 803a4e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803a4ea:	4618      	mov	r0, r3
 803a4ec:	f001 fa9a 	bl	803ba24 <vPortFree>
				vPortFree( pxTCB );
 803a4f0:	6878      	ldr	r0, [r7, #4]
 803a4f2:	f001 fa97 	bl	803ba24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 803a4f6:	e017      	b.n	803a528 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 803a4f8:	687b      	ldr	r3, [r7, #4]
 803a4fa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 803a4fe:	2b01      	cmp	r3, #1
 803a500:	d103      	bne.n	803a50a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 803a502:	6878      	ldr	r0, [r7, #4]
 803a504:	f001 fa8e 	bl	803ba24 <vPortFree>
	}
 803a508:	e00e      	b.n	803a528 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 803a50a:	687b      	ldr	r3, [r7, #4]
 803a50c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 803a510:	2b02      	cmp	r3, #2
 803a512:	d009      	beq.n	803a528 <prvDeleteTCB+0x54>
 803a514:	f04f 0350 	mov.w	r3, #80	; 0x50
 803a518:	f383 8811 	msr	BASEPRI, r3
 803a51c:	f3bf 8f6f 	isb	sy
 803a520:	f3bf 8f4f 	dsb	sy
 803a524:	60fb      	str	r3, [r7, #12]
 803a526:	e7fe      	b.n	803a526 <prvDeleteTCB+0x52>
	}
 803a528:	bf00      	nop
 803a52a:	3710      	adds	r7, #16
 803a52c:	46bd      	mov	sp, r7
 803a52e:	bd80      	pop	{r7, pc}

0803a530 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 803a530:	b480      	push	{r7}
 803a532:	b083      	sub	sp, #12
 803a534:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 803a536:	4b0c      	ldr	r3, [pc, #48]	; (803a568 <prvResetNextTaskUnblockTime+0x38>)
 803a538:	681b      	ldr	r3, [r3, #0]
 803a53a:	681b      	ldr	r3, [r3, #0]
 803a53c:	2b00      	cmp	r3, #0
 803a53e:	d104      	bne.n	803a54a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 803a540:	4b0a      	ldr	r3, [pc, #40]	; (803a56c <prvResetNextTaskUnblockTime+0x3c>)
 803a542:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 803a546:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 803a548:	e008      	b.n	803a55c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 803a54a:	4b07      	ldr	r3, [pc, #28]	; (803a568 <prvResetNextTaskUnblockTime+0x38>)
 803a54c:	681b      	ldr	r3, [r3, #0]
 803a54e:	68db      	ldr	r3, [r3, #12]
 803a550:	68db      	ldr	r3, [r3, #12]
 803a552:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 803a554:	687b      	ldr	r3, [r7, #4]
 803a556:	685b      	ldr	r3, [r3, #4]
 803a558:	4a04      	ldr	r2, [pc, #16]	; (803a56c <prvResetNextTaskUnblockTime+0x3c>)
 803a55a:	6013      	str	r3, [r2, #0]
}
 803a55c:	bf00      	nop
 803a55e:	370c      	adds	r7, #12
 803a560:	46bd      	mov	sp, r7
 803a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a566:	4770      	bx	lr
 803a568:	20001884 	.word	0x20001884
 803a56c:	200018ec 	.word	0x200018ec

0803a570 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 803a570:	b480      	push	{r7}
 803a572:	b083      	sub	sp, #12
 803a574:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 803a576:	4b05      	ldr	r3, [pc, #20]	; (803a58c <xTaskGetCurrentTaskHandle+0x1c>)
 803a578:	681b      	ldr	r3, [r3, #0]
 803a57a:	607b      	str	r3, [r7, #4]

		return xReturn;
 803a57c:	687b      	ldr	r3, [r7, #4]
	}
 803a57e:	4618      	mov	r0, r3
 803a580:	370c      	adds	r7, #12
 803a582:	46bd      	mov	sp, r7
 803a584:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a588:	4770      	bx	lr
 803a58a:	bf00      	nop
 803a58c:	200013f8 	.word	0x200013f8

0803a590 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 803a590:	b480      	push	{r7}
 803a592:	b083      	sub	sp, #12
 803a594:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 803a596:	4b0b      	ldr	r3, [pc, #44]	; (803a5c4 <xTaskGetSchedulerState+0x34>)
 803a598:	681b      	ldr	r3, [r3, #0]
 803a59a:	2b00      	cmp	r3, #0
 803a59c:	d102      	bne.n	803a5a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 803a59e:	2301      	movs	r3, #1
 803a5a0:	607b      	str	r3, [r7, #4]
 803a5a2:	e008      	b.n	803a5b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 803a5a4:	4b08      	ldr	r3, [pc, #32]	; (803a5c8 <xTaskGetSchedulerState+0x38>)
 803a5a6:	681b      	ldr	r3, [r3, #0]
 803a5a8:	2b00      	cmp	r3, #0
 803a5aa:	d102      	bne.n	803a5b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 803a5ac:	2302      	movs	r3, #2
 803a5ae:	607b      	str	r3, [r7, #4]
 803a5b0:	e001      	b.n	803a5b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 803a5b2:	2300      	movs	r3, #0
 803a5b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 803a5b6:	687b      	ldr	r3, [r7, #4]
	}
 803a5b8:	4618      	mov	r0, r3
 803a5ba:	370c      	adds	r7, #12
 803a5bc:	46bd      	mov	sp, r7
 803a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a5c2:	4770      	bx	lr
 803a5c4:	200018d8 	.word	0x200018d8
 803a5c8:	200018f4 	.word	0x200018f4

0803a5cc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 803a5cc:	b580      	push	{r7, lr}
 803a5ce:	b084      	sub	sp, #16
 803a5d0:	af00      	add	r7, sp, #0
 803a5d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 803a5d4:	687b      	ldr	r3, [r7, #4]
 803a5d6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 803a5d8:	2300      	movs	r3, #0
 803a5da:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 803a5dc:	687b      	ldr	r3, [r7, #4]
 803a5de:	2b00      	cmp	r3, #0
 803a5e0:	d051      	beq.n	803a686 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 803a5e2:	68bb      	ldr	r3, [r7, #8]
 803a5e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803a5e6:	4b2a      	ldr	r3, [pc, #168]	; (803a690 <xTaskPriorityInherit+0xc4>)
 803a5e8:	681b      	ldr	r3, [r3, #0]
 803a5ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803a5ec:	429a      	cmp	r2, r3
 803a5ee:	d241      	bcs.n	803a674 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 803a5f0:	68bb      	ldr	r3, [r7, #8]
 803a5f2:	699b      	ldr	r3, [r3, #24]
 803a5f4:	2b00      	cmp	r3, #0
 803a5f6:	db06      	blt.n	803a606 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 803a5f8:	4b25      	ldr	r3, [pc, #148]	; (803a690 <xTaskPriorityInherit+0xc4>)
 803a5fa:	681b      	ldr	r3, [r3, #0]
 803a5fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803a5fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 803a602:	68bb      	ldr	r3, [r7, #8]
 803a604:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 803a606:	68bb      	ldr	r3, [r7, #8]
 803a608:	6959      	ldr	r1, [r3, #20]
 803a60a:	68bb      	ldr	r3, [r7, #8]
 803a60c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803a60e:	4613      	mov	r3, r2
 803a610:	009b      	lsls	r3, r3, #2
 803a612:	4413      	add	r3, r2
 803a614:	009b      	lsls	r3, r3, #2
 803a616:	4a1f      	ldr	r2, [pc, #124]	; (803a694 <xTaskPriorityInherit+0xc8>)
 803a618:	4413      	add	r3, r2
 803a61a:	4299      	cmp	r1, r3
 803a61c:	d122      	bne.n	803a664 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 803a61e:	68bb      	ldr	r3, [r7, #8]
 803a620:	3304      	adds	r3, #4
 803a622:	4618      	mov	r0, r3
 803a624:	f7fe f8d0 	bl	80387c8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 803a628:	4b19      	ldr	r3, [pc, #100]	; (803a690 <xTaskPriorityInherit+0xc4>)
 803a62a:	681b      	ldr	r3, [r3, #0]
 803a62c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803a62e:	68bb      	ldr	r3, [r7, #8]
 803a630:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 803a632:	68bb      	ldr	r3, [r7, #8]
 803a634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803a636:	4b18      	ldr	r3, [pc, #96]	; (803a698 <xTaskPriorityInherit+0xcc>)
 803a638:	681b      	ldr	r3, [r3, #0]
 803a63a:	429a      	cmp	r2, r3
 803a63c:	d903      	bls.n	803a646 <xTaskPriorityInherit+0x7a>
 803a63e:	68bb      	ldr	r3, [r7, #8]
 803a640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803a642:	4a15      	ldr	r2, [pc, #84]	; (803a698 <xTaskPriorityInherit+0xcc>)
 803a644:	6013      	str	r3, [r2, #0]
 803a646:	68bb      	ldr	r3, [r7, #8]
 803a648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803a64a:	4613      	mov	r3, r2
 803a64c:	009b      	lsls	r3, r3, #2
 803a64e:	4413      	add	r3, r2
 803a650:	009b      	lsls	r3, r3, #2
 803a652:	4a10      	ldr	r2, [pc, #64]	; (803a694 <xTaskPriorityInherit+0xc8>)
 803a654:	441a      	add	r2, r3
 803a656:	68bb      	ldr	r3, [r7, #8]
 803a658:	3304      	adds	r3, #4
 803a65a:	4619      	mov	r1, r3
 803a65c:	4610      	mov	r0, r2
 803a65e:	f7fe f856 	bl	803870e <vListInsertEnd>
 803a662:	e004      	b.n	803a66e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 803a664:	4b0a      	ldr	r3, [pc, #40]	; (803a690 <xTaskPriorityInherit+0xc4>)
 803a666:	681b      	ldr	r3, [r3, #0]
 803a668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803a66a:	68bb      	ldr	r3, [r7, #8]
 803a66c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 803a66e:	2301      	movs	r3, #1
 803a670:	60fb      	str	r3, [r7, #12]
 803a672:	e008      	b.n	803a686 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 803a674:	68bb      	ldr	r3, [r7, #8]
 803a676:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 803a678:	4b05      	ldr	r3, [pc, #20]	; (803a690 <xTaskPriorityInherit+0xc4>)
 803a67a:	681b      	ldr	r3, [r3, #0]
 803a67c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803a67e:	429a      	cmp	r2, r3
 803a680:	d201      	bcs.n	803a686 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 803a682:	2301      	movs	r3, #1
 803a684:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 803a686:	68fb      	ldr	r3, [r7, #12]
	}
 803a688:	4618      	mov	r0, r3
 803a68a:	3710      	adds	r7, #16
 803a68c:	46bd      	mov	sp, r7
 803a68e:	bd80      	pop	{r7, pc}
 803a690:	200013f8 	.word	0x200013f8
 803a694:	200013fc 	.word	0x200013fc
 803a698:	200018d4 	.word	0x200018d4

0803a69c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 803a69c:	b580      	push	{r7, lr}
 803a69e:	b086      	sub	sp, #24
 803a6a0:	af00      	add	r7, sp, #0
 803a6a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 803a6a4:	687b      	ldr	r3, [r7, #4]
 803a6a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 803a6a8:	2300      	movs	r3, #0
 803a6aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 803a6ac:	687b      	ldr	r3, [r7, #4]
 803a6ae:	2b00      	cmp	r3, #0
 803a6b0:	d054      	beq.n	803a75c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 803a6b2:	4b2d      	ldr	r3, [pc, #180]	; (803a768 <xTaskPriorityDisinherit+0xcc>)
 803a6b4:	681b      	ldr	r3, [r3, #0]
 803a6b6:	693a      	ldr	r2, [r7, #16]
 803a6b8:	429a      	cmp	r2, r3
 803a6ba:	d009      	beq.n	803a6d0 <xTaskPriorityDisinherit+0x34>
 803a6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 803a6c0:	f383 8811 	msr	BASEPRI, r3
 803a6c4:	f3bf 8f6f 	isb	sy
 803a6c8:	f3bf 8f4f 	dsb	sy
 803a6cc:	60fb      	str	r3, [r7, #12]
 803a6ce:	e7fe      	b.n	803a6ce <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 803a6d0:	693b      	ldr	r3, [r7, #16]
 803a6d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 803a6d4:	2b00      	cmp	r3, #0
 803a6d6:	d109      	bne.n	803a6ec <xTaskPriorityDisinherit+0x50>
 803a6d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 803a6dc:	f383 8811 	msr	BASEPRI, r3
 803a6e0:	f3bf 8f6f 	isb	sy
 803a6e4:	f3bf 8f4f 	dsb	sy
 803a6e8:	60bb      	str	r3, [r7, #8]
 803a6ea:	e7fe      	b.n	803a6ea <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 803a6ec:	693b      	ldr	r3, [r7, #16]
 803a6ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 803a6f0:	1e5a      	subs	r2, r3, #1
 803a6f2:	693b      	ldr	r3, [r7, #16]
 803a6f4:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 803a6f6:	693b      	ldr	r3, [r7, #16]
 803a6f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803a6fa:	693b      	ldr	r3, [r7, #16]
 803a6fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803a6fe:	429a      	cmp	r2, r3
 803a700:	d02c      	beq.n	803a75c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 803a702:	693b      	ldr	r3, [r7, #16]
 803a704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 803a706:	2b00      	cmp	r3, #0
 803a708:	d128      	bne.n	803a75c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 803a70a:	693b      	ldr	r3, [r7, #16]
 803a70c:	3304      	adds	r3, #4
 803a70e:	4618      	mov	r0, r3
 803a710:	f7fe f85a 	bl	80387c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 803a714:	693b      	ldr	r3, [r7, #16]
 803a716:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 803a718:	693b      	ldr	r3, [r7, #16]
 803a71a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 803a71c:	693b      	ldr	r3, [r7, #16]
 803a71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803a720:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 803a724:	693b      	ldr	r3, [r7, #16]
 803a726:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 803a728:	693b      	ldr	r3, [r7, #16]
 803a72a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803a72c:	4b0f      	ldr	r3, [pc, #60]	; (803a76c <xTaskPriorityDisinherit+0xd0>)
 803a72e:	681b      	ldr	r3, [r3, #0]
 803a730:	429a      	cmp	r2, r3
 803a732:	d903      	bls.n	803a73c <xTaskPriorityDisinherit+0xa0>
 803a734:	693b      	ldr	r3, [r7, #16]
 803a736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803a738:	4a0c      	ldr	r2, [pc, #48]	; (803a76c <xTaskPriorityDisinherit+0xd0>)
 803a73a:	6013      	str	r3, [r2, #0]
 803a73c:	693b      	ldr	r3, [r7, #16]
 803a73e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803a740:	4613      	mov	r3, r2
 803a742:	009b      	lsls	r3, r3, #2
 803a744:	4413      	add	r3, r2
 803a746:	009b      	lsls	r3, r3, #2
 803a748:	4a09      	ldr	r2, [pc, #36]	; (803a770 <xTaskPriorityDisinherit+0xd4>)
 803a74a:	441a      	add	r2, r3
 803a74c:	693b      	ldr	r3, [r7, #16]
 803a74e:	3304      	adds	r3, #4
 803a750:	4619      	mov	r1, r3
 803a752:	4610      	mov	r0, r2
 803a754:	f7fd ffdb 	bl	803870e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 803a758:	2301      	movs	r3, #1
 803a75a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 803a75c:	697b      	ldr	r3, [r7, #20]
	}
 803a75e:	4618      	mov	r0, r3
 803a760:	3718      	adds	r7, #24
 803a762:	46bd      	mov	sp, r7
 803a764:	bd80      	pop	{r7, pc}
 803a766:	bf00      	nop
 803a768:	200013f8 	.word	0x200013f8
 803a76c:	200018d4 	.word	0x200018d4
 803a770:	200013fc 	.word	0x200013fc

0803a774 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 803a774:	b580      	push	{r7, lr}
 803a776:	b088      	sub	sp, #32
 803a778:	af00      	add	r7, sp, #0
 803a77a:	6078      	str	r0, [r7, #4]
 803a77c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 803a77e:	687b      	ldr	r3, [r7, #4]
 803a780:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 803a782:	2301      	movs	r3, #1
 803a784:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 803a786:	687b      	ldr	r3, [r7, #4]
 803a788:	2b00      	cmp	r3, #0
 803a78a:	d068      	beq.n	803a85e <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 803a78c:	69bb      	ldr	r3, [r7, #24]
 803a78e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 803a790:	2b00      	cmp	r3, #0
 803a792:	d109      	bne.n	803a7a8 <vTaskPriorityDisinheritAfterTimeout+0x34>
 803a794:	f04f 0350 	mov.w	r3, #80	; 0x50
 803a798:	f383 8811 	msr	BASEPRI, r3
 803a79c:	f3bf 8f6f 	isb	sy
 803a7a0:	f3bf 8f4f 	dsb	sy
 803a7a4:	60fb      	str	r3, [r7, #12]
 803a7a6:	e7fe      	b.n	803a7a6 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 803a7a8:	69bb      	ldr	r3, [r7, #24]
 803a7aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803a7ac:	683a      	ldr	r2, [r7, #0]
 803a7ae:	429a      	cmp	r2, r3
 803a7b0:	d902      	bls.n	803a7b8 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 803a7b2:	683b      	ldr	r3, [r7, #0]
 803a7b4:	61fb      	str	r3, [r7, #28]
 803a7b6:	e002      	b.n	803a7be <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 803a7b8:	69bb      	ldr	r3, [r7, #24]
 803a7ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803a7bc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 803a7be:	69bb      	ldr	r3, [r7, #24]
 803a7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803a7c2:	69fa      	ldr	r2, [r7, #28]
 803a7c4:	429a      	cmp	r2, r3
 803a7c6:	d04a      	beq.n	803a85e <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 803a7c8:	69bb      	ldr	r3, [r7, #24]
 803a7ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 803a7cc:	697a      	ldr	r2, [r7, #20]
 803a7ce:	429a      	cmp	r2, r3
 803a7d0:	d145      	bne.n	803a85e <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 803a7d2:	4b25      	ldr	r3, [pc, #148]	; (803a868 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 803a7d4:	681b      	ldr	r3, [r3, #0]
 803a7d6:	69ba      	ldr	r2, [r7, #24]
 803a7d8:	429a      	cmp	r2, r3
 803a7da:	d109      	bne.n	803a7f0 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 803a7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 803a7e0:	f383 8811 	msr	BASEPRI, r3
 803a7e4:	f3bf 8f6f 	isb	sy
 803a7e8:	f3bf 8f4f 	dsb	sy
 803a7ec:	60bb      	str	r3, [r7, #8]
 803a7ee:	e7fe      	b.n	803a7ee <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 803a7f0:	69bb      	ldr	r3, [r7, #24]
 803a7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803a7f4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 803a7f6:	69bb      	ldr	r3, [r7, #24]
 803a7f8:	69fa      	ldr	r2, [r7, #28]
 803a7fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 803a7fc:	69bb      	ldr	r3, [r7, #24]
 803a7fe:	699b      	ldr	r3, [r3, #24]
 803a800:	2b00      	cmp	r3, #0
 803a802:	db04      	blt.n	803a80e <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 803a804:	69fb      	ldr	r3, [r7, #28]
 803a806:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 803a80a:	69bb      	ldr	r3, [r7, #24]
 803a80c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 803a80e:	69bb      	ldr	r3, [r7, #24]
 803a810:	6959      	ldr	r1, [r3, #20]
 803a812:	693a      	ldr	r2, [r7, #16]
 803a814:	4613      	mov	r3, r2
 803a816:	009b      	lsls	r3, r3, #2
 803a818:	4413      	add	r3, r2
 803a81a:	009b      	lsls	r3, r3, #2
 803a81c:	4a13      	ldr	r2, [pc, #76]	; (803a86c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 803a81e:	4413      	add	r3, r2
 803a820:	4299      	cmp	r1, r3
 803a822:	d11c      	bne.n	803a85e <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 803a824:	69bb      	ldr	r3, [r7, #24]
 803a826:	3304      	adds	r3, #4
 803a828:	4618      	mov	r0, r3
 803a82a:	f7fd ffcd 	bl	80387c8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 803a82e:	69bb      	ldr	r3, [r7, #24]
 803a830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803a832:	4b0f      	ldr	r3, [pc, #60]	; (803a870 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 803a834:	681b      	ldr	r3, [r3, #0]
 803a836:	429a      	cmp	r2, r3
 803a838:	d903      	bls.n	803a842 <vTaskPriorityDisinheritAfterTimeout+0xce>
 803a83a:	69bb      	ldr	r3, [r7, #24]
 803a83c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803a83e:	4a0c      	ldr	r2, [pc, #48]	; (803a870 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 803a840:	6013      	str	r3, [r2, #0]
 803a842:	69bb      	ldr	r3, [r7, #24]
 803a844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803a846:	4613      	mov	r3, r2
 803a848:	009b      	lsls	r3, r3, #2
 803a84a:	4413      	add	r3, r2
 803a84c:	009b      	lsls	r3, r3, #2
 803a84e:	4a07      	ldr	r2, [pc, #28]	; (803a86c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 803a850:	441a      	add	r2, r3
 803a852:	69bb      	ldr	r3, [r7, #24]
 803a854:	3304      	adds	r3, #4
 803a856:	4619      	mov	r1, r3
 803a858:	4610      	mov	r0, r2
 803a85a:	f7fd ff58 	bl	803870e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 803a85e:	bf00      	nop
 803a860:	3720      	adds	r7, #32
 803a862:	46bd      	mov	sp, r7
 803a864:	bd80      	pop	{r7, pc}
 803a866:	bf00      	nop
 803a868:	200013f8 	.word	0x200013f8
 803a86c:	200013fc 	.word	0x200013fc
 803a870:	200018d4 	.word	0x200018d4

0803a874 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 803a874:	b480      	push	{r7}
 803a876:	b083      	sub	sp, #12
 803a878:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 803a87a:	4b09      	ldr	r3, [pc, #36]	; (803a8a0 <uxTaskResetEventItemValue+0x2c>)
 803a87c:	681b      	ldr	r3, [r3, #0]
 803a87e:	699b      	ldr	r3, [r3, #24]
 803a880:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 803a882:	4b07      	ldr	r3, [pc, #28]	; (803a8a0 <uxTaskResetEventItemValue+0x2c>)
 803a884:	681b      	ldr	r3, [r3, #0]
 803a886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803a888:	4b05      	ldr	r3, [pc, #20]	; (803a8a0 <uxTaskResetEventItemValue+0x2c>)
 803a88a:	681b      	ldr	r3, [r3, #0]
 803a88c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 803a890:	619a      	str	r2, [r3, #24]

	return uxReturn;
 803a892:	687b      	ldr	r3, [r7, #4]
}
 803a894:	4618      	mov	r0, r3
 803a896:	370c      	adds	r7, #12
 803a898:	46bd      	mov	sp, r7
 803a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a89e:	4770      	bx	lr
 803a8a0:	200013f8 	.word	0x200013f8

0803a8a4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 803a8a4:	b480      	push	{r7}
 803a8a6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 803a8a8:	4b07      	ldr	r3, [pc, #28]	; (803a8c8 <pvTaskIncrementMutexHeldCount+0x24>)
 803a8aa:	681b      	ldr	r3, [r3, #0]
 803a8ac:	2b00      	cmp	r3, #0
 803a8ae:	d004      	beq.n	803a8ba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 803a8b0:	4b05      	ldr	r3, [pc, #20]	; (803a8c8 <pvTaskIncrementMutexHeldCount+0x24>)
 803a8b2:	681b      	ldr	r3, [r3, #0]
 803a8b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 803a8b6:	3201      	adds	r2, #1
 803a8b8:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 803a8ba:	4b03      	ldr	r3, [pc, #12]	; (803a8c8 <pvTaskIncrementMutexHeldCount+0x24>)
 803a8bc:	681b      	ldr	r3, [r3, #0]
	}
 803a8be:	4618      	mov	r0, r3
 803a8c0:	46bd      	mov	sp, r7
 803a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a8c6:	4770      	bx	lr
 803a8c8:	200013f8 	.word	0x200013f8

0803a8cc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 803a8cc:	b580      	push	{r7, lr}
 803a8ce:	b086      	sub	sp, #24
 803a8d0:	af00      	add	r7, sp, #0
 803a8d2:	60f8      	str	r0, [r7, #12]
 803a8d4:	60b9      	str	r1, [r7, #8]
 803a8d6:	607a      	str	r2, [r7, #4]
 803a8d8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 803a8da:	f000 fec7 	bl	803b66c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 803a8de:	4b26      	ldr	r3, [pc, #152]	; (803a978 <xTaskNotifyWait+0xac>)
 803a8e0:	681b      	ldr	r3, [r3, #0]
 803a8e2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 803a8e6:	b2db      	uxtb	r3, r3
 803a8e8:	2b02      	cmp	r3, #2
 803a8ea:	d01a      	beq.n	803a922 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 803a8ec:	4b22      	ldr	r3, [pc, #136]	; (803a978 <xTaskNotifyWait+0xac>)
 803a8ee:	681b      	ldr	r3, [r3, #0]
 803a8f0:	6d99      	ldr	r1, [r3, #88]	; 0x58
 803a8f2:	68fa      	ldr	r2, [r7, #12]
 803a8f4:	43d2      	mvns	r2, r2
 803a8f6:	400a      	ands	r2, r1
 803a8f8:	659a      	str	r2, [r3, #88]	; 0x58

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 803a8fa:	4b1f      	ldr	r3, [pc, #124]	; (803a978 <xTaskNotifyWait+0xac>)
 803a8fc:	681b      	ldr	r3, [r3, #0]
 803a8fe:	2201      	movs	r2, #1
 803a900:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

				if( xTicksToWait > ( TickType_t ) 0 )
 803a904:	683b      	ldr	r3, [r7, #0]
 803a906:	2b00      	cmp	r3, #0
 803a908:	d00b      	beq.n	803a922 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 803a90a:	2101      	movs	r1, #1
 803a90c:	6838      	ldr	r0, [r7, #0]
 803a90e:	f000 f9c3 	bl	803ac98 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 803a912:	4b1a      	ldr	r3, [pc, #104]	; (803a97c <xTaskNotifyWait+0xb0>)
 803a914:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 803a918:	601a      	str	r2, [r3, #0]
 803a91a:	f3bf 8f4f 	dsb	sy
 803a91e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 803a922:	f000 fed1 	bl	803b6c8 <vPortExitCritical>

		taskENTER_CRITICAL();
 803a926:	f000 fea1 	bl	803b66c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 803a92a:	687b      	ldr	r3, [r7, #4]
 803a92c:	2b00      	cmp	r3, #0
 803a92e:	d004      	beq.n	803a93a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 803a930:	4b11      	ldr	r3, [pc, #68]	; (803a978 <xTaskNotifyWait+0xac>)
 803a932:	681b      	ldr	r3, [r3, #0]
 803a934:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 803a936:	687b      	ldr	r3, [r7, #4]
 803a938:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 803a93a:	4b0f      	ldr	r3, [pc, #60]	; (803a978 <xTaskNotifyWait+0xac>)
 803a93c:	681b      	ldr	r3, [r3, #0]
 803a93e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 803a942:	b2db      	uxtb	r3, r3
 803a944:	2b02      	cmp	r3, #2
 803a946:	d002      	beq.n	803a94e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 803a948:	2300      	movs	r3, #0
 803a94a:	617b      	str	r3, [r7, #20]
 803a94c:	e008      	b.n	803a960 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 803a94e:	4b0a      	ldr	r3, [pc, #40]	; (803a978 <xTaskNotifyWait+0xac>)
 803a950:	681b      	ldr	r3, [r3, #0]
 803a952:	6d99      	ldr	r1, [r3, #88]	; 0x58
 803a954:	68ba      	ldr	r2, [r7, #8]
 803a956:	43d2      	mvns	r2, r2
 803a958:	400a      	ands	r2, r1
 803a95a:	659a      	str	r2, [r3, #88]	; 0x58
				xReturn = pdTRUE;
 803a95c:	2301      	movs	r3, #1
 803a95e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 803a960:	4b05      	ldr	r3, [pc, #20]	; (803a978 <xTaskNotifyWait+0xac>)
 803a962:	681b      	ldr	r3, [r3, #0]
 803a964:	2200      	movs	r2, #0
 803a966:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		}
		taskEXIT_CRITICAL();
 803a96a:	f000 fead 	bl	803b6c8 <vPortExitCritical>

		return xReturn;
 803a96e:	697b      	ldr	r3, [r7, #20]
	}
 803a970:	4618      	mov	r0, r3
 803a972:	3718      	adds	r7, #24
 803a974:	46bd      	mov	sp, r7
 803a976:	bd80      	pop	{r7, pc}
 803a978:	200013f8 	.word	0x200013f8
 803a97c:	e000ed04 	.word	0xe000ed04

0803a980 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 803a980:	b580      	push	{r7, lr}
 803a982:	b08a      	sub	sp, #40	; 0x28
 803a984:	af00      	add	r7, sp, #0
 803a986:	60f8      	str	r0, [r7, #12]
 803a988:	60b9      	str	r1, [r7, #8]
 803a98a:	603b      	str	r3, [r7, #0]
 803a98c:	4613      	mov	r3, r2
 803a98e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 803a990:	2301      	movs	r3, #1
 803a992:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 803a994:	68fb      	ldr	r3, [r7, #12]
 803a996:	2b00      	cmp	r3, #0
 803a998:	d109      	bne.n	803a9ae <xTaskGenericNotify+0x2e>
 803a99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 803a99e:	f383 8811 	msr	BASEPRI, r3
 803a9a2:	f3bf 8f6f 	isb	sy
 803a9a6:	f3bf 8f4f 	dsb	sy
 803a9aa:	61bb      	str	r3, [r7, #24]
 803a9ac:	e7fe      	b.n	803a9ac <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 803a9ae:	68fb      	ldr	r3, [r7, #12]
 803a9b0:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 803a9b2:	f000 fe5b 	bl	803b66c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 803a9b6:	683b      	ldr	r3, [r7, #0]
 803a9b8:	2b00      	cmp	r3, #0
 803a9ba:	d003      	beq.n	803a9c4 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 803a9bc:	6a3b      	ldr	r3, [r7, #32]
 803a9be:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 803a9c0:	683b      	ldr	r3, [r7, #0]
 803a9c2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 803a9c4:	6a3b      	ldr	r3, [r7, #32]
 803a9c6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 803a9ca:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 803a9cc:	6a3b      	ldr	r3, [r7, #32]
 803a9ce:	2202      	movs	r2, #2
 803a9d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

			switch( eAction )
 803a9d4:	79fb      	ldrb	r3, [r7, #7]
 803a9d6:	2b04      	cmp	r3, #4
 803a9d8:	d827      	bhi.n	803aa2a <xTaskGenericNotify+0xaa>
 803a9da:	a201      	add	r2, pc, #4	; (adr r2, 803a9e0 <xTaskGenericNotify+0x60>)
 803a9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803a9e0:	0803aa49 	.word	0x0803aa49
 803a9e4:	0803a9f5 	.word	0x0803a9f5
 803a9e8:	0803aa03 	.word	0x0803aa03
 803a9ec:	0803aa0f 	.word	0x0803aa0f
 803a9f0:	0803aa17 	.word	0x0803aa17
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 803a9f4:	6a3b      	ldr	r3, [r7, #32]
 803a9f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 803a9f8:	68bb      	ldr	r3, [r7, #8]
 803a9fa:	431a      	orrs	r2, r3
 803a9fc:	6a3b      	ldr	r3, [r7, #32]
 803a9fe:	659a      	str	r2, [r3, #88]	; 0x58
					break;
 803aa00:	e025      	b.n	803aa4e <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 803aa02:	6a3b      	ldr	r3, [r7, #32]
 803aa04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803aa06:	1c5a      	adds	r2, r3, #1
 803aa08:	6a3b      	ldr	r3, [r7, #32]
 803aa0a:	659a      	str	r2, [r3, #88]	; 0x58
					break;
 803aa0c:	e01f      	b.n	803aa4e <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 803aa0e:	6a3b      	ldr	r3, [r7, #32]
 803aa10:	68ba      	ldr	r2, [r7, #8]
 803aa12:	659a      	str	r2, [r3, #88]	; 0x58
					break;
 803aa14:	e01b      	b.n	803aa4e <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 803aa16:	7ffb      	ldrb	r3, [r7, #31]
 803aa18:	2b02      	cmp	r3, #2
 803aa1a:	d003      	beq.n	803aa24 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 803aa1c:	6a3b      	ldr	r3, [r7, #32]
 803aa1e:	68ba      	ldr	r2, [r7, #8]
 803aa20:	659a      	str	r2, [r3, #88]	; 0x58
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 803aa22:	e014      	b.n	803aa4e <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 803aa24:	2300      	movs	r3, #0
 803aa26:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 803aa28:	e011      	b.n	803aa4e <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 803aa2a:	6a3b      	ldr	r3, [r7, #32]
 803aa2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803aa2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 803aa32:	d00b      	beq.n	803aa4c <xTaskGenericNotify+0xcc>
 803aa34:	f04f 0350 	mov.w	r3, #80	; 0x50
 803aa38:	f383 8811 	msr	BASEPRI, r3
 803aa3c:	f3bf 8f6f 	isb	sy
 803aa40:	f3bf 8f4f 	dsb	sy
 803aa44:	617b      	str	r3, [r7, #20]
 803aa46:	e7fe      	b.n	803aa46 <xTaskGenericNotify+0xc6>
					break;
 803aa48:	bf00      	nop
 803aa4a:	e000      	b.n	803aa4e <xTaskGenericNotify+0xce>

					break;
 803aa4c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 803aa4e:	7ffb      	ldrb	r3, [r7, #31]
 803aa50:	2b01      	cmp	r3, #1
 803aa52:	d139      	bne.n	803aac8 <xTaskGenericNotify+0x148>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 803aa54:	6a3b      	ldr	r3, [r7, #32]
 803aa56:	3304      	adds	r3, #4
 803aa58:	4618      	mov	r0, r3
 803aa5a:	f7fd feb5 	bl	80387c8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 803aa5e:	6a3b      	ldr	r3, [r7, #32]
 803aa60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803aa62:	4b1d      	ldr	r3, [pc, #116]	; (803aad8 <xTaskGenericNotify+0x158>)
 803aa64:	681b      	ldr	r3, [r3, #0]
 803aa66:	429a      	cmp	r2, r3
 803aa68:	d903      	bls.n	803aa72 <xTaskGenericNotify+0xf2>
 803aa6a:	6a3b      	ldr	r3, [r7, #32]
 803aa6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803aa6e:	4a1a      	ldr	r2, [pc, #104]	; (803aad8 <xTaskGenericNotify+0x158>)
 803aa70:	6013      	str	r3, [r2, #0]
 803aa72:	6a3b      	ldr	r3, [r7, #32]
 803aa74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803aa76:	4613      	mov	r3, r2
 803aa78:	009b      	lsls	r3, r3, #2
 803aa7a:	4413      	add	r3, r2
 803aa7c:	009b      	lsls	r3, r3, #2
 803aa7e:	4a17      	ldr	r2, [pc, #92]	; (803aadc <xTaskGenericNotify+0x15c>)
 803aa80:	441a      	add	r2, r3
 803aa82:	6a3b      	ldr	r3, [r7, #32]
 803aa84:	3304      	adds	r3, #4
 803aa86:	4619      	mov	r1, r3
 803aa88:	4610      	mov	r0, r2
 803aa8a:	f7fd fe40 	bl	803870e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 803aa8e:	6a3b      	ldr	r3, [r7, #32]
 803aa90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803aa92:	2b00      	cmp	r3, #0
 803aa94:	d009      	beq.n	803aaaa <xTaskGenericNotify+0x12a>
 803aa96:	f04f 0350 	mov.w	r3, #80	; 0x50
 803aa9a:	f383 8811 	msr	BASEPRI, r3
 803aa9e:	f3bf 8f6f 	isb	sy
 803aaa2:	f3bf 8f4f 	dsb	sy
 803aaa6:	613b      	str	r3, [r7, #16]
 803aaa8:	e7fe      	b.n	803aaa8 <xTaskGenericNotify+0x128>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 803aaaa:	6a3b      	ldr	r3, [r7, #32]
 803aaac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803aaae:	4b0c      	ldr	r3, [pc, #48]	; (803aae0 <xTaskGenericNotify+0x160>)
 803aab0:	681b      	ldr	r3, [r3, #0]
 803aab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803aab4:	429a      	cmp	r2, r3
 803aab6:	d907      	bls.n	803aac8 <xTaskGenericNotify+0x148>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 803aab8:	4b0a      	ldr	r3, [pc, #40]	; (803aae4 <xTaskGenericNotify+0x164>)
 803aaba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 803aabe:	601a      	str	r2, [r3, #0]
 803aac0:	f3bf 8f4f 	dsb	sy
 803aac4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 803aac8:	f000 fdfe 	bl	803b6c8 <vPortExitCritical>

		return xReturn;
 803aacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 803aace:	4618      	mov	r0, r3
 803aad0:	3728      	adds	r7, #40	; 0x28
 803aad2:	46bd      	mov	sp, r7
 803aad4:	bd80      	pop	{r7, pc}
 803aad6:	bf00      	nop
 803aad8:	200018d4 	.word	0x200018d4
 803aadc:	200013fc 	.word	0x200013fc
 803aae0:	200013f8 	.word	0x200013f8
 803aae4:	e000ed04 	.word	0xe000ed04

0803aae8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 803aae8:	b580      	push	{r7, lr}
 803aaea:	b08e      	sub	sp, #56	; 0x38
 803aaec:	af00      	add	r7, sp, #0
 803aaee:	60f8      	str	r0, [r7, #12]
 803aaf0:	60b9      	str	r1, [r7, #8]
 803aaf2:	603b      	str	r3, [r7, #0]
 803aaf4:	4613      	mov	r3, r2
 803aaf6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 803aaf8:	2301      	movs	r3, #1
 803aafa:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 803aafc:	68fb      	ldr	r3, [r7, #12]
 803aafe:	2b00      	cmp	r3, #0
 803ab00:	d109      	bne.n	803ab16 <xTaskGenericNotifyFromISR+0x2e>
 803ab02:	f04f 0350 	mov.w	r3, #80	; 0x50
 803ab06:	f383 8811 	msr	BASEPRI, r3
 803ab0a:	f3bf 8f6f 	isb	sy
 803ab0e:	f3bf 8f4f 	dsb	sy
 803ab12:	627b      	str	r3, [r7, #36]	; 0x24
 803ab14:	e7fe      	b.n	803ab14 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 803ab16:	f000 fe85 	bl	803b824 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 803ab1a:	68fb      	ldr	r3, [r7, #12]
 803ab1c:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 803ab1e:	f3ef 8211 	mrs	r2, BASEPRI
 803ab22:	f04f 0350 	mov.w	r3, #80	; 0x50
 803ab26:	f383 8811 	msr	BASEPRI, r3
 803ab2a:	f3bf 8f6f 	isb	sy
 803ab2e:	f3bf 8f4f 	dsb	sy
 803ab32:	623a      	str	r2, [r7, #32]
 803ab34:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 803ab36:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 803ab38:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 803ab3a:	683b      	ldr	r3, [r7, #0]
 803ab3c:	2b00      	cmp	r3, #0
 803ab3e:	d003      	beq.n	803ab48 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 803ab40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803ab42:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 803ab44:	683b      	ldr	r3, [r7, #0]
 803ab46:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 803ab48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803ab4a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 803ab4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 803ab52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803ab54:	2202      	movs	r2, #2
 803ab56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

			switch( eAction )
 803ab5a:	79fb      	ldrb	r3, [r7, #7]
 803ab5c:	2b04      	cmp	r3, #4
 803ab5e:	d829      	bhi.n	803abb4 <xTaskGenericNotifyFromISR+0xcc>
 803ab60:	a201      	add	r2, pc, #4	; (adr r2, 803ab68 <xTaskGenericNotifyFromISR+0x80>)
 803ab62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803ab66:	bf00      	nop
 803ab68:	0803abd3 	.word	0x0803abd3
 803ab6c:	0803ab7d 	.word	0x0803ab7d
 803ab70:	0803ab8b 	.word	0x0803ab8b
 803ab74:	0803ab97 	.word	0x0803ab97
 803ab78:	0803ab9f 	.word	0x0803ab9f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 803ab7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803ab7e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 803ab80:	68bb      	ldr	r3, [r7, #8]
 803ab82:	431a      	orrs	r2, r3
 803ab84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803ab86:	659a      	str	r2, [r3, #88]	; 0x58
					break;
 803ab88:	e026      	b.n	803abd8 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 803ab8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803ab8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803ab8e:	1c5a      	adds	r2, r3, #1
 803ab90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803ab92:	659a      	str	r2, [r3, #88]	; 0x58
					break;
 803ab94:	e020      	b.n	803abd8 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 803ab96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803ab98:	68ba      	ldr	r2, [r7, #8]
 803ab9a:	659a      	str	r2, [r3, #88]	; 0x58
					break;
 803ab9c:	e01c      	b.n	803abd8 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 803ab9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 803aba2:	2b02      	cmp	r3, #2
 803aba4:	d003      	beq.n	803abae <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 803aba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803aba8:	68ba      	ldr	r2, [r7, #8]
 803abaa:	659a      	str	r2, [r3, #88]	; 0x58
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 803abac:	e014      	b.n	803abd8 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 803abae:	2300      	movs	r3, #0
 803abb0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 803abb2:	e011      	b.n	803abd8 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 803abb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803abb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803abb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 803abbc:	d00b      	beq.n	803abd6 <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 803abbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 803abc2:	f383 8811 	msr	BASEPRI, r3
 803abc6:	f3bf 8f6f 	isb	sy
 803abca:	f3bf 8f4f 	dsb	sy
 803abce:	61bb      	str	r3, [r7, #24]
 803abd0:	e7fe      	b.n	803abd0 <xTaskGenericNotifyFromISR+0xe8>
					break;
 803abd2:	bf00      	nop
 803abd4:	e000      	b.n	803abd8 <xTaskGenericNotifyFromISR+0xf0>
					break;
 803abd6:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 803abd8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 803abdc:	2b01      	cmp	r3, #1
 803abde:	d145      	bne.n	803ac6c <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 803abe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803abe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803abe4:	2b00      	cmp	r3, #0
 803abe6:	d009      	beq.n	803abfc <xTaskGenericNotifyFromISR+0x114>
 803abe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 803abec:	f383 8811 	msr	BASEPRI, r3
 803abf0:	f3bf 8f6f 	isb	sy
 803abf4:	f3bf 8f4f 	dsb	sy
 803abf8:	617b      	str	r3, [r7, #20]
 803abfa:	e7fe      	b.n	803abfa <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 803abfc:	4b20      	ldr	r3, [pc, #128]	; (803ac80 <xTaskGenericNotifyFromISR+0x198>)
 803abfe:	681b      	ldr	r3, [r3, #0]
 803ac00:	2b00      	cmp	r3, #0
 803ac02:	d11d      	bne.n	803ac40 <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 803ac04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803ac06:	3304      	adds	r3, #4
 803ac08:	4618      	mov	r0, r3
 803ac0a:	f7fd fddd 	bl	80387c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 803ac0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803ac10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803ac12:	4b1c      	ldr	r3, [pc, #112]	; (803ac84 <xTaskGenericNotifyFromISR+0x19c>)
 803ac14:	681b      	ldr	r3, [r3, #0]
 803ac16:	429a      	cmp	r2, r3
 803ac18:	d903      	bls.n	803ac22 <xTaskGenericNotifyFromISR+0x13a>
 803ac1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803ac1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803ac1e:	4a19      	ldr	r2, [pc, #100]	; (803ac84 <xTaskGenericNotifyFromISR+0x19c>)
 803ac20:	6013      	str	r3, [r2, #0]
 803ac22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803ac24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803ac26:	4613      	mov	r3, r2
 803ac28:	009b      	lsls	r3, r3, #2
 803ac2a:	4413      	add	r3, r2
 803ac2c:	009b      	lsls	r3, r3, #2
 803ac2e:	4a16      	ldr	r2, [pc, #88]	; (803ac88 <xTaskGenericNotifyFromISR+0x1a0>)
 803ac30:	441a      	add	r2, r3
 803ac32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803ac34:	3304      	adds	r3, #4
 803ac36:	4619      	mov	r1, r3
 803ac38:	4610      	mov	r0, r2
 803ac3a:	f7fd fd68 	bl	803870e <vListInsertEnd>
 803ac3e:	e005      	b.n	803ac4c <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 803ac40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803ac42:	3318      	adds	r3, #24
 803ac44:	4619      	mov	r1, r3
 803ac46:	4811      	ldr	r0, [pc, #68]	; (803ac8c <xTaskGenericNotifyFromISR+0x1a4>)
 803ac48:	f7fd fd61 	bl	803870e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 803ac4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803ac4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803ac50:	4b0f      	ldr	r3, [pc, #60]	; (803ac90 <xTaskGenericNotifyFromISR+0x1a8>)
 803ac52:	681b      	ldr	r3, [r3, #0]
 803ac54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803ac56:	429a      	cmp	r2, r3
 803ac58:	d908      	bls.n	803ac6c <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 803ac5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 803ac5c:	2b00      	cmp	r3, #0
 803ac5e:	d002      	beq.n	803ac66 <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 803ac60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 803ac62:	2201      	movs	r2, #1
 803ac64:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 803ac66:	4b0b      	ldr	r3, [pc, #44]	; (803ac94 <xTaskGenericNotifyFromISR+0x1ac>)
 803ac68:	2201      	movs	r2, #1
 803ac6a:	601a      	str	r2, [r3, #0]
 803ac6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803ac6e:	613b      	str	r3, [r7, #16]
	__asm volatile
 803ac70:	693b      	ldr	r3, [r7, #16]
 803ac72:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 803ac76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 803ac78:	4618      	mov	r0, r3
 803ac7a:	3738      	adds	r7, #56	; 0x38
 803ac7c:	46bd      	mov	sp, r7
 803ac7e:	bd80      	pop	{r7, pc}
 803ac80:	200018f4 	.word	0x200018f4
 803ac84:	200018d4 	.word	0x200018d4
 803ac88:	200013fc 	.word	0x200013fc
 803ac8c:	2000188c 	.word	0x2000188c
 803ac90:	200013f8 	.word	0x200013f8
 803ac94:	200018e0 	.word	0x200018e0

0803ac98 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 803ac98:	b580      	push	{r7, lr}
 803ac9a:	b084      	sub	sp, #16
 803ac9c:	af00      	add	r7, sp, #0
 803ac9e:	6078      	str	r0, [r7, #4]
 803aca0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 803aca2:	4b24      	ldr	r3, [pc, #144]	; (803ad34 <prvAddCurrentTaskToDelayedList+0x9c>)
 803aca4:	681b      	ldr	r3, [r3, #0]
 803aca6:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 803aca8:	4b23      	ldr	r3, [pc, #140]	; (803ad38 <prvAddCurrentTaskToDelayedList+0xa0>)
 803acaa:	681b      	ldr	r3, [r3, #0]
 803acac:	2200      	movs	r2, #0
 803acae:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 803acb2:	4b21      	ldr	r3, [pc, #132]	; (803ad38 <prvAddCurrentTaskToDelayedList+0xa0>)
 803acb4:	681b      	ldr	r3, [r3, #0]
 803acb6:	3304      	adds	r3, #4
 803acb8:	4618      	mov	r0, r3
 803acba:	f7fd fd85 	bl	80387c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 803acbe:	687b      	ldr	r3, [r7, #4]
 803acc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 803acc4:	d10a      	bne.n	803acdc <prvAddCurrentTaskToDelayedList+0x44>
 803acc6:	683b      	ldr	r3, [r7, #0]
 803acc8:	2b00      	cmp	r3, #0
 803acca:	d007      	beq.n	803acdc <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 803accc:	4b1a      	ldr	r3, [pc, #104]	; (803ad38 <prvAddCurrentTaskToDelayedList+0xa0>)
 803acce:	681b      	ldr	r3, [r3, #0]
 803acd0:	3304      	adds	r3, #4
 803acd2:	4619      	mov	r1, r3
 803acd4:	4819      	ldr	r0, [pc, #100]	; (803ad3c <prvAddCurrentTaskToDelayedList+0xa4>)
 803acd6:	f7fd fd1a 	bl	803870e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 803acda:	e026      	b.n	803ad2a <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 803acdc:	68fa      	ldr	r2, [r7, #12]
 803acde:	687b      	ldr	r3, [r7, #4]
 803ace0:	4413      	add	r3, r2
 803ace2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 803ace4:	4b14      	ldr	r3, [pc, #80]	; (803ad38 <prvAddCurrentTaskToDelayedList+0xa0>)
 803ace6:	681b      	ldr	r3, [r3, #0]
 803ace8:	68ba      	ldr	r2, [r7, #8]
 803acea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 803acec:	68ba      	ldr	r2, [r7, #8]
 803acee:	68fb      	ldr	r3, [r7, #12]
 803acf0:	429a      	cmp	r2, r3
 803acf2:	d209      	bcs.n	803ad08 <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 803acf4:	4b12      	ldr	r3, [pc, #72]	; (803ad40 <prvAddCurrentTaskToDelayedList+0xa8>)
 803acf6:	681a      	ldr	r2, [r3, #0]
 803acf8:	4b0f      	ldr	r3, [pc, #60]	; (803ad38 <prvAddCurrentTaskToDelayedList+0xa0>)
 803acfa:	681b      	ldr	r3, [r3, #0]
 803acfc:	3304      	adds	r3, #4
 803acfe:	4619      	mov	r1, r3
 803ad00:	4610      	mov	r0, r2
 803ad02:	f7fd fd28 	bl	8038756 <vListInsert>
}
 803ad06:	e010      	b.n	803ad2a <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 803ad08:	4b0e      	ldr	r3, [pc, #56]	; (803ad44 <prvAddCurrentTaskToDelayedList+0xac>)
 803ad0a:	681a      	ldr	r2, [r3, #0]
 803ad0c:	4b0a      	ldr	r3, [pc, #40]	; (803ad38 <prvAddCurrentTaskToDelayedList+0xa0>)
 803ad0e:	681b      	ldr	r3, [r3, #0]
 803ad10:	3304      	adds	r3, #4
 803ad12:	4619      	mov	r1, r3
 803ad14:	4610      	mov	r0, r2
 803ad16:	f7fd fd1e 	bl	8038756 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 803ad1a:	4b0b      	ldr	r3, [pc, #44]	; (803ad48 <prvAddCurrentTaskToDelayedList+0xb0>)
 803ad1c:	681b      	ldr	r3, [r3, #0]
 803ad1e:	68ba      	ldr	r2, [r7, #8]
 803ad20:	429a      	cmp	r2, r3
 803ad22:	d202      	bcs.n	803ad2a <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 803ad24:	4a08      	ldr	r2, [pc, #32]	; (803ad48 <prvAddCurrentTaskToDelayedList+0xb0>)
 803ad26:	68bb      	ldr	r3, [r7, #8]
 803ad28:	6013      	str	r3, [r2, #0]
}
 803ad2a:	bf00      	nop
 803ad2c:	3710      	adds	r7, #16
 803ad2e:	46bd      	mov	sp, r7
 803ad30:	bd80      	pop	{r7, pc}
 803ad32:	bf00      	nop
 803ad34:	200018d0 	.word	0x200018d0
 803ad38:	200013f8 	.word	0x200013f8
 803ad3c:	200018b8 	.word	0x200018b8
 803ad40:	20001888 	.word	0x20001888
 803ad44:	20001884 	.word	0x20001884
 803ad48:	200018ec 	.word	0x200018ec

0803ad4c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 803ad4c:	b580      	push	{r7, lr}
 803ad4e:	b08a      	sub	sp, #40	; 0x28
 803ad50:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 803ad52:	2300      	movs	r3, #0
 803ad54:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 803ad56:	f000 faff 	bl	803b358 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 803ad5a:	4b1c      	ldr	r3, [pc, #112]	; (803adcc <xTimerCreateTimerTask+0x80>)
 803ad5c:	681b      	ldr	r3, [r3, #0]
 803ad5e:	2b00      	cmp	r3, #0
 803ad60:	d021      	beq.n	803ada6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 803ad62:	2300      	movs	r3, #0
 803ad64:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 803ad66:	2300      	movs	r3, #0
 803ad68:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 803ad6a:	1d3a      	adds	r2, r7, #4
 803ad6c:	f107 0108 	add.w	r1, r7, #8
 803ad70:	f107 030c 	add.w	r3, r7, #12
 803ad74:	4618      	mov	r0, r3
 803ad76:	f7fd fa9d 	bl	80382b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 803ad7a:	6879      	ldr	r1, [r7, #4]
 803ad7c:	68bb      	ldr	r3, [r7, #8]
 803ad7e:	68fa      	ldr	r2, [r7, #12]
 803ad80:	9202      	str	r2, [sp, #8]
 803ad82:	9301      	str	r3, [sp, #4]
 803ad84:	2302      	movs	r3, #2
 803ad86:	9300      	str	r3, [sp, #0]
 803ad88:	2300      	movs	r3, #0
 803ad8a:	460a      	mov	r2, r1
 803ad8c:	4910      	ldr	r1, [pc, #64]	; (803add0 <xTimerCreateTimerTask+0x84>)
 803ad8e:	4811      	ldr	r0, [pc, #68]	; (803add4 <xTimerCreateTimerTask+0x88>)
 803ad90:	f7fe fcaa 	bl	80396e8 <xTaskCreateStatic>
 803ad94:	4602      	mov	r2, r0
 803ad96:	4b10      	ldr	r3, [pc, #64]	; (803add8 <xTimerCreateTimerTask+0x8c>)
 803ad98:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 803ad9a:	4b0f      	ldr	r3, [pc, #60]	; (803add8 <xTimerCreateTimerTask+0x8c>)
 803ad9c:	681b      	ldr	r3, [r3, #0]
 803ad9e:	2b00      	cmp	r3, #0
 803ada0:	d001      	beq.n	803ada6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 803ada2:	2301      	movs	r3, #1
 803ada4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 803ada6:	697b      	ldr	r3, [r7, #20]
 803ada8:	2b00      	cmp	r3, #0
 803adaa:	d109      	bne.n	803adc0 <xTimerCreateTimerTask+0x74>
	__asm volatile
 803adac:	f04f 0350 	mov.w	r3, #80	; 0x50
 803adb0:	f383 8811 	msr	BASEPRI, r3
 803adb4:	f3bf 8f6f 	isb	sy
 803adb8:	f3bf 8f4f 	dsb	sy
 803adbc:	613b      	str	r3, [r7, #16]
 803adbe:	e7fe      	b.n	803adbe <xTimerCreateTimerTask+0x72>
	return xReturn;
 803adc0:	697b      	ldr	r3, [r7, #20]
}
 803adc2:	4618      	mov	r0, r3
 803adc4:	3718      	adds	r7, #24
 803adc6:	46bd      	mov	sp, r7
 803adc8:	bd80      	pop	{r7, pc}
 803adca:	bf00      	nop
 803adcc:	20001928 	.word	0x20001928
 803add0:	08043a38 	.word	0x08043a38
 803add4:	0803af0d 	.word	0x0803af0d
 803add8:	2000192c 	.word	0x2000192c

0803addc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 803addc:	b580      	push	{r7, lr}
 803adde:	b08a      	sub	sp, #40	; 0x28
 803ade0:	af00      	add	r7, sp, #0
 803ade2:	60f8      	str	r0, [r7, #12]
 803ade4:	60b9      	str	r1, [r7, #8]
 803ade6:	607a      	str	r2, [r7, #4]
 803ade8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 803adea:	2300      	movs	r3, #0
 803adec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 803adee:	68fb      	ldr	r3, [r7, #12]
 803adf0:	2b00      	cmp	r3, #0
 803adf2:	d109      	bne.n	803ae08 <xTimerGenericCommand+0x2c>
 803adf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 803adf8:	f383 8811 	msr	BASEPRI, r3
 803adfc:	f3bf 8f6f 	isb	sy
 803ae00:	f3bf 8f4f 	dsb	sy
 803ae04:	623b      	str	r3, [r7, #32]
 803ae06:	e7fe      	b.n	803ae06 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 803ae08:	4b19      	ldr	r3, [pc, #100]	; (803ae70 <xTimerGenericCommand+0x94>)
 803ae0a:	681b      	ldr	r3, [r3, #0]
 803ae0c:	2b00      	cmp	r3, #0
 803ae0e:	d02a      	beq.n	803ae66 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 803ae10:	68bb      	ldr	r3, [r7, #8]
 803ae12:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 803ae14:	687b      	ldr	r3, [r7, #4]
 803ae16:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 803ae18:	68fb      	ldr	r3, [r7, #12]
 803ae1a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 803ae1c:	68bb      	ldr	r3, [r7, #8]
 803ae1e:	2b05      	cmp	r3, #5
 803ae20:	dc18      	bgt.n	803ae54 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 803ae22:	f7ff fbb5 	bl	803a590 <xTaskGetSchedulerState>
 803ae26:	4603      	mov	r3, r0
 803ae28:	2b02      	cmp	r3, #2
 803ae2a:	d109      	bne.n	803ae40 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 803ae2c:	4b10      	ldr	r3, [pc, #64]	; (803ae70 <xTimerGenericCommand+0x94>)
 803ae2e:	6818      	ldr	r0, [r3, #0]
 803ae30:	f107 0110 	add.w	r1, r7, #16
 803ae34:	2300      	movs	r3, #0
 803ae36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 803ae38:	f7fd fee2 	bl	8038c00 <xQueueGenericSend>
 803ae3c:	6278      	str	r0, [r7, #36]	; 0x24
 803ae3e:	e012      	b.n	803ae66 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 803ae40:	4b0b      	ldr	r3, [pc, #44]	; (803ae70 <xTimerGenericCommand+0x94>)
 803ae42:	6818      	ldr	r0, [r3, #0]
 803ae44:	f107 0110 	add.w	r1, r7, #16
 803ae48:	2300      	movs	r3, #0
 803ae4a:	2200      	movs	r2, #0
 803ae4c:	f7fd fed8 	bl	8038c00 <xQueueGenericSend>
 803ae50:	6278      	str	r0, [r7, #36]	; 0x24
 803ae52:	e008      	b.n	803ae66 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 803ae54:	4b06      	ldr	r3, [pc, #24]	; (803ae70 <xTimerGenericCommand+0x94>)
 803ae56:	6818      	ldr	r0, [r3, #0]
 803ae58:	f107 0110 	add.w	r1, r7, #16
 803ae5c:	2300      	movs	r3, #0
 803ae5e:	683a      	ldr	r2, [r7, #0]
 803ae60:	f7fd ffc8 	bl	8038df4 <xQueueGenericSendFromISR>
 803ae64:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 803ae66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 803ae68:	4618      	mov	r0, r3
 803ae6a:	3728      	adds	r7, #40	; 0x28
 803ae6c:	46bd      	mov	sp, r7
 803ae6e:	bd80      	pop	{r7, pc}
 803ae70:	20001928 	.word	0x20001928

0803ae74 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 803ae74:	b580      	push	{r7, lr}
 803ae76:	b088      	sub	sp, #32
 803ae78:	af02      	add	r7, sp, #8
 803ae7a:	6078      	str	r0, [r7, #4]
 803ae7c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 803ae7e:	4b22      	ldr	r3, [pc, #136]	; (803af08 <prvProcessExpiredTimer+0x94>)
 803ae80:	681b      	ldr	r3, [r3, #0]
 803ae82:	68db      	ldr	r3, [r3, #12]
 803ae84:	68db      	ldr	r3, [r3, #12]
 803ae86:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 803ae88:	697b      	ldr	r3, [r7, #20]
 803ae8a:	3304      	adds	r3, #4
 803ae8c:	4618      	mov	r0, r3
 803ae8e:	f7fd fc9b 	bl	80387c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 803ae92:	697b      	ldr	r3, [r7, #20]
 803ae94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 803ae98:	f003 0304 	and.w	r3, r3, #4
 803ae9c:	2b00      	cmp	r3, #0
 803ae9e:	d021      	beq.n	803aee4 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 803aea0:	697b      	ldr	r3, [r7, #20]
 803aea2:	699a      	ldr	r2, [r3, #24]
 803aea4:	687b      	ldr	r3, [r7, #4]
 803aea6:	18d1      	adds	r1, r2, r3
 803aea8:	687b      	ldr	r3, [r7, #4]
 803aeaa:	683a      	ldr	r2, [r7, #0]
 803aeac:	6978      	ldr	r0, [r7, #20]
 803aeae:	f000 f8d1 	bl	803b054 <prvInsertTimerInActiveList>
 803aeb2:	4603      	mov	r3, r0
 803aeb4:	2b00      	cmp	r3, #0
 803aeb6:	d01e      	beq.n	803aef6 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 803aeb8:	2300      	movs	r3, #0
 803aeba:	9300      	str	r3, [sp, #0]
 803aebc:	2300      	movs	r3, #0
 803aebe:	687a      	ldr	r2, [r7, #4]
 803aec0:	2100      	movs	r1, #0
 803aec2:	6978      	ldr	r0, [r7, #20]
 803aec4:	f7ff ff8a 	bl	803addc <xTimerGenericCommand>
 803aec8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 803aeca:	693b      	ldr	r3, [r7, #16]
 803aecc:	2b00      	cmp	r3, #0
 803aece:	d112      	bne.n	803aef6 <prvProcessExpiredTimer+0x82>
 803aed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 803aed4:	f383 8811 	msr	BASEPRI, r3
 803aed8:	f3bf 8f6f 	isb	sy
 803aedc:	f3bf 8f4f 	dsb	sy
 803aee0:	60fb      	str	r3, [r7, #12]
 803aee2:	e7fe      	b.n	803aee2 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 803aee4:	697b      	ldr	r3, [r7, #20]
 803aee6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 803aeea:	f023 0301 	bic.w	r3, r3, #1
 803aeee:	b2da      	uxtb	r2, r3
 803aef0:	697b      	ldr	r3, [r7, #20]
 803aef2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 803aef6:	697b      	ldr	r3, [r7, #20]
 803aef8:	6a1b      	ldr	r3, [r3, #32]
 803aefa:	6978      	ldr	r0, [r7, #20]
 803aefc:	4798      	blx	r3
}
 803aefe:	bf00      	nop
 803af00:	3718      	adds	r7, #24
 803af02:	46bd      	mov	sp, r7
 803af04:	bd80      	pop	{r7, pc}
 803af06:	bf00      	nop
 803af08:	20001920 	.word	0x20001920

0803af0c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 803af0c:	b580      	push	{r7, lr}
 803af0e:	b084      	sub	sp, #16
 803af10:	af00      	add	r7, sp, #0
 803af12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 803af14:	f107 0308 	add.w	r3, r7, #8
 803af18:	4618      	mov	r0, r3
 803af1a:	f000 f857 	bl	803afcc <prvGetNextExpireTime>
 803af1e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 803af20:	68bb      	ldr	r3, [r7, #8]
 803af22:	4619      	mov	r1, r3
 803af24:	68f8      	ldr	r0, [r7, #12]
 803af26:	f000 f803 	bl	803af30 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 803af2a:	f000 f8d5 	bl	803b0d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 803af2e:	e7f1      	b.n	803af14 <prvTimerTask+0x8>

0803af30 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 803af30:	b580      	push	{r7, lr}
 803af32:	b084      	sub	sp, #16
 803af34:	af00      	add	r7, sp, #0
 803af36:	6078      	str	r0, [r7, #4]
 803af38:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 803af3a:	f7fe fe8b 	bl	8039c54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 803af3e:	f107 0308 	add.w	r3, r7, #8
 803af42:	4618      	mov	r0, r3
 803af44:	f000 f866 	bl	803b014 <prvSampleTimeNow>
 803af48:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 803af4a:	68bb      	ldr	r3, [r7, #8]
 803af4c:	2b00      	cmp	r3, #0
 803af4e:	d130      	bne.n	803afb2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 803af50:	683b      	ldr	r3, [r7, #0]
 803af52:	2b00      	cmp	r3, #0
 803af54:	d10a      	bne.n	803af6c <prvProcessTimerOrBlockTask+0x3c>
 803af56:	687a      	ldr	r2, [r7, #4]
 803af58:	68fb      	ldr	r3, [r7, #12]
 803af5a:	429a      	cmp	r2, r3
 803af5c:	d806      	bhi.n	803af6c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 803af5e:	f7fe fe87 	bl	8039c70 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 803af62:	68f9      	ldr	r1, [r7, #12]
 803af64:	6878      	ldr	r0, [r7, #4]
 803af66:	f7ff ff85 	bl	803ae74 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 803af6a:	e024      	b.n	803afb6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 803af6c:	683b      	ldr	r3, [r7, #0]
 803af6e:	2b00      	cmp	r3, #0
 803af70:	d008      	beq.n	803af84 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 803af72:	4b13      	ldr	r3, [pc, #76]	; (803afc0 <prvProcessTimerOrBlockTask+0x90>)
 803af74:	681b      	ldr	r3, [r3, #0]
 803af76:	681b      	ldr	r3, [r3, #0]
 803af78:	2b00      	cmp	r3, #0
 803af7a:	d101      	bne.n	803af80 <prvProcessTimerOrBlockTask+0x50>
 803af7c:	2301      	movs	r3, #1
 803af7e:	e000      	b.n	803af82 <prvProcessTimerOrBlockTask+0x52>
 803af80:	2300      	movs	r3, #0
 803af82:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 803af84:	4b0f      	ldr	r3, [pc, #60]	; (803afc4 <prvProcessTimerOrBlockTask+0x94>)
 803af86:	6818      	ldr	r0, [r3, #0]
 803af88:	687a      	ldr	r2, [r7, #4]
 803af8a:	68fb      	ldr	r3, [r7, #12]
 803af8c:	1ad3      	subs	r3, r2, r3
 803af8e:	683a      	ldr	r2, [r7, #0]
 803af90:	4619      	mov	r1, r3
 803af92:	f7fe fb75 	bl	8039680 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 803af96:	f7fe fe6b 	bl	8039c70 <xTaskResumeAll>
 803af9a:	4603      	mov	r3, r0
 803af9c:	2b00      	cmp	r3, #0
 803af9e:	d10a      	bne.n	803afb6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 803afa0:	4b09      	ldr	r3, [pc, #36]	; (803afc8 <prvProcessTimerOrBlockTask+0x98>)
 803afa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 803afa6:	601a      	str	r2, [r3, #0]
 803afa8:	f3bf 8f4f 	dsb	sy
 803afac:	f3bf 8f6f 	isb	sy
}
 803afb0:	e001      	b.n	803afb6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 803afb2:	f7fe fe5d 	bl	8039c70 <xTaskResumeAll>
}
 803afb6:	bf00      	nop
 803afb8:	3710      	adds	r7, #16
 803afba:	46bd      	mov	sp, r7
 803afbc:	bd80      	pop	{r7, pc}
 803afbe:	bf00      	nop
 803afc0:	20001924 	.word	0x20001924
 803afc4:	20001928 	.word	0x20001928
 803afc8:	e000ed04 	.word	0xe000ed04

0803afcc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 803afcc:	b480      	push	{r7}
 803afce:	b085      	sub	sp, #20
 803afd0:	af00      	add	r7, sp, #0
 803afd2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 803afd4:	4b0e      	ldr	r3, [pc, #56]	; (803b010 <prvGetNextExpireTime+0x44>)
 803afd6:	681b      	ldr	r3, [r3, #0]
 803afd8:	681b      	ldr	r3, [r3, #0]
 803afda:	2b00      	cmp	r3, #0
 803afdc:	d101      	bne.n	803afe2 <prvGetNextExpireTime+0x16>
 803afde:	2201      	movs	r2, #1
 803afe0:	e000      	b.n	803afe4 <prvGetNextExpireTime+0x18>
 803afe2:	2200      	movs	r2, #0
 803afe4:	687b      	ldr	r3, [r7, #4]
 803afe6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 803afe8:	687b      	ldr	r3, [r7, #4]
 803afea:	681b      	ldr	r3, [r3, #0]
 803afec:	2b00      	cmp	r3, #0
 803afee:	d105      	bne.n	803affc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 803aff0:	4b07      	ldr	r3, [pc, #28]	; (803b010 <prvGetNextExpireTime+0x44>)
 803aff2:	681b      	ldr	r3, [r3, #0]
 803aff4:	68db      	ldr	r3, [r3, #12]
 803aff6:	681b      	ldr	r3, [r3, #0]
 803aff8:	60fb      	str	r3, [r7, #12]
 803affa:	e001      	b.n	803b000 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 803affc:	2300      	movs	r3, #0
 803affe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 803b000:	68fb      	ldr	r3, [r7, #12]
}
 803b002:	4618      	mov	r0, r3
 803b004:	3714      	adds	r7, #20
 803b006:	46bd      	mov	sp, r7
 803b008:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b00c:	4770      	bx	lr
 803b00e:	bf00      	nop
 803b010:	20001920 	.word	0x20001920

0803b014 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 803b014:	b580      	push	{r7, lr}
 803b016:	b084      	sub	sp, #16
 803b018:	af00      	add	r7, sp, #0
 803b01a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 803b01c:	f7fe fec4 	bl	8039da8 <xTaskGetTickCount>
 803b020:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 803b022:	4b0b      	ldr	r3, [pc, #44]	; (803b050 <prvSampleTimeNow+0x3c>)
 803b024:	681b      	ldr	r3, [r3, #0]
 803b026:	68fa      	ldr	r2, [r7, #12]
 803b028:	429a      	cmp	r2, r3
 803b02a:	d205      	bcs.n	803b038 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 803b02c:	f000 f930 	bl	803b290 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 803b030:	687b      	ldr	r3, [r7, #4]
 803b032:	2201      	movs	r2, #1
 803b034:	601a      	str	r2, [r3, #0]
 803b036:	e002      	b.n	803b03e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 803b038:	687b      	ldr	r3, [r7, #4]
 803b03a:	2200      	movs	r2, #0
 803b03c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 803b03e:	4a04      	ldr	r2, [pc, #16]	; (803b050 <prvSampleTimeNow+0x3c>)
 803b040:	68fb      	ldr	r3, [r7, #12]
 803b042:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 803b044:	68fb      	ldr	r3, [r7, #12]
}
 803b046:	4618      	mov	r0, r3
 803b048:	3710      	adds	r7, #16
 803b04a:	46bd      	mov	sp, r7
 803b04c:	bd80      	pop	{r7, pc}
 803b04e:	bf00      	nop
 803b050:	20001930 	.word	0x20001930

0803b054 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 803b054:	b580      	push	{r7, lr}
 803b056:	b086      	sub	sp, #24
 803b058:	af00      	add	r7, sp, #0
 803b05a:	60f8      	str	r0, [r7, #12]
 803b05c:	60b9      	str	r1, [r7, #8]
 803b05e:	607a      	str	r2, [r7, #4]
 803b060:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 803b062:	2300      	movs	r3, #0
 803b064:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 803b066:	68fb      	ldr	r3, [r7, #12]
 803b068:	68ba      	ldr	r2, [r7, #8]
 803b06a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 803b06c:	68fb      	ldr	r3, [r7, #12]
 803b06e:	68fa      	ldr	r2, [r7, #12]
 803b070:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 803b072:	68ba      	ldr	r2, [r7, #8]
 803b074:	687b      	ldr	r3, [r7, #4]
 803b076:	429a      	cmp	r2, r3
 803b078:	d812      	bhi.n	803b0a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 803b07a:	687a      	ldr	r2, [r7, #4]
 803b07c:	683b      	ldr	r3, [r7, #0]
 803b07e:	1ad2      	subs	r2, r2, r3
 803b080:	68fb      	ldr	r3, [r7, #12]
 803b082:	699b      	ldr	r3, [r3, #24]
 803b084:	429a      	cmp	r2, r3
 803b086:	d302      	bcc.n	803b08e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 803b088:	2301      	movs	r3, #1
 803b08a:	617b      	str	r3, [r7, #20]
 803b08c:	e01b      	b.n	803b0c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 803b08e:	4b10      	ldr	r3, [pc, #64]	; (803b0d0 <prvInsertTimerInActiveList+0x7c>)
 803b090:	681a      	ldr	r2, [r3, #0]
 803b092:	68fb      	ldr	r3, [r7, #12]
 803b094:	3304      	adds	r3, #4
 803b096:	4619      	mov	r1, r3
 803b098:	4610      	mov	r0, r2
 803b09a:	f7fd fb5c 	bl	8038756 <vListInsert>
 803b09e:	e012      	b.n	803b0c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 803b0a0:	687a      	ldr	r2, [r7, #4]
 803b0a2:	683b      	ldr	r3, [r7, #0]
 803b0a4:	429a      	cmp	r2, r3
 803b0a6:	d206      	bcs.n	803b0b6 <prvInsertTimerInActiveList+0x62>
 803b0a8:	68ba      	ldr	r2, [r7, #8]
 803b0aa:	683b      	ldr	r3, [r7, #0]
 803b0ac:	429a      	cmp	r2, r3
 803b0ae:	d302      	bcc.n	803b0b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 803b0b0:	2301      	movs	r3, #1
 803b0b2:	617b      	str	r3, [r7, #20]
 803b0b4:	e007      	b.n	803b0c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 803b0b6:	4b07      	ldr	r3, [pc, #28]	; (803b0d4 <prvInsertTimerInActiveList+0x80>)
 803b0b8:	681a      	ldr	r2, [r3, #0]
 803b0ba:	68fb      	ldr	r3, [r7, #12]
 803b0bc:	3304      	adds	r3, #4
 803b0be:	4619      	mov	r1, r3
 803b0c0:	4610      	mov	r0, r2
 803b0c2:	f7fd fb48 	bl	8038756 <vListInsert>
		}
	}

	return xProcessTimerNow;
 803b0c6:	697b      	ldr	r3, [r7, #20]
}
 803b0c8:	4618      	mov	r0, r3
 803b0ca:	3718      	adds	r7, #24
 803b0cc:	46bd      	mov	sp, r7
 803b0ce:	bd80      	pop	{r7, pc}
 803b0d0:	20001924 	.word	0x20001924
 803b0d4:	20001920 	.word	0x20001920

0803b0d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 803b0d8:	b580      	push	{r7, lr}
 803b0da:	b08e      	sub	sp, #56	; 0x38
 803b0dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 803b0de:	e0c6      	b.n	803b26e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 803b0e0:	687b      	ldr	r3, [r7, #4]
 803b0e2:	2b00      	cmp	r3, #0
 803b0e4:	da17      	bge.n	803b116 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 803b0e6:	1d3b      	adds	r3, r7, #4
 803b0e8:	3304      	adds	r3, #4
 803b0ea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 803b0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803b0ee:	2b00      	cmp	r3, #0
 803b0f0:	d109      	bne.n	803b106 <prvProcessReceivedCommands+0x2e>
 803b0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 803b0f6:	f383 8811 	msr	BASEPRI, r3
 803b0fa:	f3bf 8f6f 	isb	sy
 803b0fe:	f3bf 8f4f 	dsb	sy
 803b102:	61fb      	str	r3, [r7, #28]
 803b104:	e7fe      	b.n	803b104 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 803b106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803b108:	681b      	ldr	r3, [r3, #0]
 803b10a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 803b10c:	6850      	ldr	r0, [r2, #4]
 803b10e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 803b110:	6892      	ldr	r2, [r2, #8]
 803b112:	4611      	mov	r1, r2
 803b114:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 803b116:	687b      	ldr	r3, [r7, #4]
 803b118:	2b00      	cmp	r3, #0
 803b11a:	f2c0 80a7 	blt.w	803b26c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 803b11e:	68fb      	ldr	r3, [r7, #12]
 803b120:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 803b122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803b124:	695b      	ldr	r3, [r3, #20]
 803b126:	2b00      	cmp	r3, #0
 803b128:	d004      	beq.n	803b134 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 803b12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803b12c:	3304      	adds	r3, #4
 803b12e:	4618      	mov	r0, r3
 803b130:	f7fd fb4a 	bl	80387c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 803b134:	463b      	mov	r3, r7
 803b136:	4618      	mov	r0, r3
 803b138:	f7ff ff6c 	bl	803b014 <prvSampleTimeNow>
 803b13c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 803b13e:	687b      	ldr	r3, [r7, #4]
 803b140:	2b09      	cmp	r3, #9
 803b142:	f200 8094 	bhi.w	803b26e <prvProcessReceivedCommands+0x196>
 803b146:	a201      	add	r2, pc, #4	; (adr r2, 803b14c <prvProcessReceivedCommands+0x74>)
 803b148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803b14c:	0803b175 	.word	0x0803b175
 803b150:	0803b175 	.word	0x0803b175
 803b154:	0803b175 	.word	0x0803b175
 803b158:	0803b1e7 	.word	0x0803b1e7
 803b15c:	0803b1fb 	.word	0x0803b1fb
 803b160:	0803b243 	.word	0x0803b243
 803b164:	0803b175 	.word	0x0803b175
 803b168:	0803b175 	.word	0x0803b175
 803b16c:	0803b1e7 	.word	0x0803b1e7
 803b170:	0803b1fb 	.word	0x0803b1fb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 803b174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803b176:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 803b17a:	f043 0301 	orr.w	r3, r3, #1
 803b17e:	b2da      	uxtb	r2, r3
 803b180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803b182:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 803b186:	68ba      	ldr	r2, [r7, #8]
 803b188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803b18a:	699b      	ldr	r3, [r3, #24]
 803b18c:	18d1      	adds	r1, r2, r3
 803b18e:	68bb      	ldr	r3, [r7, #8]
 803b190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 803b192:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 803b194:	f7ff ff5e 	bl	803b054 <prvInsertTimerInActiveList>
 803b198:	4603      	mov	r3, r0
 803b19a:	2b00      	cmp	r3, #0
 803b19c:	d067      	beq.n	803b26e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 803b19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803b1a0:	6a1b      	ldr	r3, [r3, #32]
 803b1a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 803b1a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 803b1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803b1a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 803b1ac:	f003 0304 	and.w	r3, r3, #4
 803b1b0:	2b00      	cmp	r3, #0
 803b1b2:	d05c      	beq.n	803b26e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 803b1b4:	68ba      	ldr	r2, [r7, #8]
 803b1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803b1b8:	699b      	ldr	r3, [r3, #24]
 803b1ba:	441a      	add	r2, r3
 803b1bc:	2300      	movs	r3, #0
 803b1be:	9300      	str	r3, [sp, #0]
 803b1c0:	2300      	movs	r3, #0
 803b1c2:	2100      	movs	r1, #0
 803b1c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 803b1c6:	f7ff fe09 	bl	803addc <xTimerGenericCommand>
 803b1ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 803b1cc:	6a3b      	ldr	r3, [r7, #32]
 803b1ce:	2b00      	cmp	r3, #0
 803b1d0:	d14d      	bne.n	803b26e <prvProcessReceivedCommands+0x196>
 803b1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 803b1d6:	f383 8811 	msr	BASEPRI, r3
 803b1da:	f3bf 8f6f 	isb	sy
 803b1de:	f3bf 8f4f 	dsb	sy
 803b1e2:	61bb      	str	r3, [r7, #24]
 803b1e4:	e7fe      	b.n	803b1e4 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 803b1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803b1e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 803b1ec:	f023 0301 	bic.w	r3, r3, #1
 803b1f0:	b2da      	uxtb	r2, r3
 803b1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803b1f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 803b1f8:	e039      	b.n	803b26e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 803b1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803b1fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 803b200:	f043 0301 	orr.w	r3, r3, #1
 803b204:	b2da      	uxtb	r2, r3
 803b206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803b208:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 803b20c:	68ba      	ldr	r2, [r7, #8]
 803b20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803b210:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 803b212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803b214:	699b      	ldr	r3, [r3, #24]
 803b216:	2b00      	cmp	r3, #0
 803b218:	d109      	bne.n	803b22e <prvProcessReceivedCommands+0x156>
 803b21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 803b21e:	f383 8811 	msr	BASEPRI, r3
 803b222:	f3bf 8f6f 	isb	sy
 803b226:	f3bf 8f4f 	dsb	sy
 803b22a:	617b      	str	r3, [r7, #20]
 803b22c:	e7fe      	b.n	803b22c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 803b22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803b230:	699a      	ldr	r2, [r3, #24]
 803b232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803b234:	18d1      	adds	r1, r2, r3
 803b236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803b238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 803b23a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 803b23c:	f7ff ff0a 	bl	803b054 <prvInsertTimerInActiveList>
					break;
 803b240:	e015      	b.n	803b26e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 803b242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803b244:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 803b248:	f003 0302 	and.w	r3, r3, #2
 803b24c:	2b00      	cmp	r3, #0
 803b24e:	d103      	bne.n	803b258 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 803b250:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 803b252:	f000 fbe7 	bl	803ba24 <vPortFree>
 803b256:	e00a      	b.n	803b26e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 803b258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803b25a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 803b25e:	f023 0301 	bic.w	r3, r3, #1
 803b262:	b2da      	uxtb	r2, r3
 803b264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803b266:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 803b26a:	e000      	b.n	803b26e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 803b26c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 803b26e:	4b07      	ldr	r3, [pc, #28]	; (803b28c <prvProcessReceivedCommands+0x1b4>)
 803b270:	681b      	ldr	r3, [r3, #0]
 803b272:	1d39      	adds	r1, r7, #4
 803b274:	2200      	movs	r2, #0
 803b276:	4618      	mov	r0, r3
 803b278:	f7fd fe50 	bl	8038f1c <xQueueReceive>
 803b27c:	4603      	mov	r3, r0
 803b27e:	2b00      	cmp	r3, #0
 803b280:	f47f af2e 	bne.w	803b0e0 <prvProcessReceivedCommands+0x8>
	}
}
 803b284:	bf00      	nop
 803b286:	3730      	adds	r7, #48	; 0x30
 803b288:	46bd      	mov	sp, r7
 803b28a:	bd80      	pop	{r7, pc}
 803b28c:	20001928 	.word	0x20001928

0803b290 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 803b290:	b580      	push	{r7, lr}
 803b292:	b088      	sub	sp, #32
 803b294:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 803b296:	e047      	b.n	803b328 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 803b298:	4b2d      	ldr	r3, [pc, #180]	; (803b350 <prvSwitchTimerLists+0xc0>)
 803b29a:	681b      	ldr	r3, [r3, #0]
 803b29c:	68db      	ldr	r3, [r3, #12]
 803b29e:	681b      	ldr	r3, [r3, #0]
 803b2a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 803b2a2:	4b2b      	ldr	r3, [pc, #172]	; (803b350 <prvSwitchTimerLists+0xc0>)
 803b2a4:	681b      	ldr	r3, [r3, #0]
 803b2a6:	68db      	ldr	r3, [r3, #12]
 803b2a8:	68db      	ldr	r3, [r3, #12]
 803b2aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 803b2ac:	68fb      	ldr	r3, [r7, #12]
 803b2ae:	3304      	adds	r3, #4
 803b2b0:	4618      	mov	r0, r3
 803b2b2:	f7fd fa89 	bl	80387c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 803b2b6:	68fb      	ldr	r3, [r7, #12]
 803b2b8:	6a1b      	ldr	r3, [r3, #32]
 803b2ba:	68f8      	ldr	r0, [r7, #12]
 803b2bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 803b2be:	68fb      	ldr	r3, [r7, #12]
 803b2c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 803b2c4:	f003 0304 	and.w	r3, r3, #4
 803b2c8:	2b00      	cmp	r3, #0
 803b2ca:	d02d      	beq.n	803b328 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 803b2cc:	68fb      	ldr	r3, [r7, #12]
 803b2ce:	699b      	ldr	r3, [r3, #24]
 803b2d0:	693a      	ldr	r2, [r7, #16]
 803b2d2:	4413      	add	r3, r2
 803b2d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 803b2d6:	68ba      	ldr	r2, [r7, #8]
 803b2d8:	693b      	ldr	r3, [r7, #16]
 803b2da:	429a      	cmp	r2, r3
 803b2dc:	d90e      	bls.n	803b2fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 803b2de:	68fb      	ldr	r3, [r7, #12]
 803b2e0:	68ba      	ldr	r2, [r7, #8]
 803b2e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 803b2e4:	68fb      	ldr	r3, [r7, #12]
 803b2e6:	68fa      	ldr	r2, [r7, #12]
 803b2e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 803b2ea:	4b19      	ldr	r3, [pc, #100]	; (803b350 <prvSwitchTimerLists+0xc0>)
 803b2ec:	681a      	ldr	r2, [r3, #0]
 803b2ee:	68fb      	ldr	r3, [r7, #12]
 803b2f0:	3304      	adds	r3, #4
 803b2f2:	4619      	mov	r1, r3
 803b2f4:	4610      	mov	r0, r2
 803b2f6:	f7fd fa2e 	bl	8038756 <vListInsert>
 803b2fa:	e015      	b.n	803b328 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 803b2fc:	2300      	movs	r3, #0
 803b2fe:	9300      	str	r3, [sp, #0]
 803b300:	2300      	movs	r3, #0
 803b302:	693a      	ldr	r2, [r7, #16]
 803b304:	2100      	movs	r1, #0
 803b306:	68f8      	ldr	r0, [r7, #12]
 803b308:	f7ff fd68 	bl	803addc <xTimerGenericCommand>
 803b30c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 803b30e:	687b      	ldr	r3, [r7, #4]
 803b310:	2b00      	cmp	r3, #0
 803b312:	d109      	bne.n	803b328 <prvSwitchTimerLists+0x98>
 803b314:	f04f 0350 	mov.w	r3, #80	; 0x50
 803b318:	f383 8811 	msr	BASEPRI, r3
 803b31c:	f3bf 8f6f 	isb	sy
 803b320:	f3bf 8f4f 	dsb	sy
 803b324:	603b      	str	r3, [r7, #0]
 803b326:	e7fe      	b.n	803b326 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 803b328:	4b09      	ldr	r3, [pc, #36]	; (803b350 <prvSwitchTimerLists+0xc0>)
 803b32a:	681b      	ldr	r3, [r3, #0]
 803b32c:	681b      	ldr	r3, [r3, #0]
 803b32e:	2b00      	cmp	r3, #0
 803b330:	d1b2      	bne.n	803b298 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 803b332:	4b07      	ldr	r3, [pc, #28]	; (803b350 <prvSwitchTimerLists+0xc0>)
 803b334:	681b      	ldr	r3, [r3, #0]
 803b336:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 803b338:	4b06      	ldr	r3, [pc, #24]	; (803b354 <prvSwitchTimerLists+0xc4>)
 803b33a:	681b      	ldr	r3, [r3, #0]
 803b33c:	4a04      	ldr	r2, [pc, #16]	; (803b350 <prvSwitchTimerLists+0xc0>)
 803b33e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 803b340:	4a04      	ldr	r2, [pc, #16]	; (803b354 <prvSwitchTimerLists+0xc4>)
 803b342:	697b      	ldr	r3, [r7, #20]
 803b344:	6013      	str	r3, [r2, #0]
}
 803b346:	bf00      	nop
 803b348:	3718      	adds	r7, #24
 803b34a:	46bd      	mov	sp, r7
 803b34c:	bd80      	pop	{r7, pc}
 803b34e:	bf00      	nop
 803b350:	20001920 	.word	0x20001920
 803b354:	20001924 	.word	0x20001924

0803b358 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 803b358:	b580      	push	{r7, lr}
 803b35a:	b082      	sub	sp, #8
 803b35c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 803b35e:	f000 f985 	bl	803b66c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 803b362:	4b15      	ldr	r3, [pc, #84]	; (803b3b8 <prvCheckForValidListAndQueue+0x60>)
 803b364:	681b      	ldr	r3, [r3, #0]
 803b366:	2b00      	cmp	r3, #0
 803b368:	d120      	bne.n	803b3ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 803b36a:	4814      	ldr	r0, [pc, #80]	; (803b3bc <prvCheckForValidListAndQueue+0x64>)
 803b36c:	f7fd f9a2 	bl	80386b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 803b370:	4813      	ldr	r0, [pc, #76]	; (803b3c0 <prvCheckForValidListAndQueue+0x68>)
 803b372:	f7fd f99f 	bl	80386b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 803b376:	4b13      	ldr	r3, [pc, #76]	; (803b3c4 <prvCheckForValidListAndQueue+0x6c>)
 803b378:	4a10      	ldr	r2, [pc, #64]	; (803b3bc <prvCheckForValidListAndQueue+0x64>)
 803b37a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 803b37c:	4b12      	ldr	r3, [pc, #72]	; (803b3c8 <prvCheckForValidListAndQueue+0x70>)
 803b37e:	4a10      	ldr	r2, [pc, #64]	; (803b3c0 <prvCheckForValidListAndQueue+0x68>)
 803b380:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 803b382:	2300      	movs	r3, #0
 803b384:	9300      	str	r3, [sp, #0]
 803b386:	4b11      	ldr	r3, [pc, #68]	; (803b3cc <prvCheckForValidListAndQueue+0x74>)
 803b388:	4a11      	ldr	r2, [pc, #68]	; (803b3d0 <prvCheckForValidListAndQueue+0x78>)
 803b38a:	2110      	movs	r1, #16
 803b38c:	200a      	movs	r0, #10
 803b38e:	f7fd faad 	bl	80388ec <xQueueGenericCreateStatic>
 803b392:	4602      	mov	r2, r0
 803b394:	4b08      	ldr	r3, [pc, #32]	; (803b3b8 <prvCheckForValidListAndQueue+0x60>)
 803b396:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 803b398:	4b07      	ldr	r3, [pc, #28]	; (803b3b8 <prvCheckForValidListAndQueue+0x60>)
 803b39a:	681b      	ldr	r3, [r3, #0]
 803b39c:	2b00      	cmp	r3, #0
 803b39e:	d005      	beq.n	803b3ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 803b3a0:	4b05      	ldr	r3, [pc, #20]	; (803b3b8 <prvCheckForValidListAndQueue+0x60>)
 803b3a2:	681b      	ldr	r3, [r3, #0]
 803b3a4:	490b      	ldr	r1, [pc, #44]	; (803b3d4 <prvCheckForValidListAndQueue+0x7c>)
 803b3a6:	4618      	mov	r0, r3
 803b3a8:	f7fe f942 	bl	8039630 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 803b3ac:	f000 f98c 	bl	803b6c8 <vPortExitCritical>
}
 803b3b0:	bf00      	nop
 803b3b2:	46bd      	mov	sp, r7
 803b3b4:	bd80      	pop	{r7, pc}
 803b3b6:	bf00      	nop
 803b3b8:	20001928 	.word	0x20001928
 803b3bc:	200018f8 	.word	0x200018f8
 803b3c0:	2000190c 	.word	0x2000190c
 803b3c4:	20001920 	.word	0x20001920
 803b3c8:	20001924 	.word	0x20001924
 803b3cc:	200019d4 	.word	0x200019d4
 803b3d0:	20001934 	.word	0x20001934
 803b3d4:	08043a40 	.word	0x08043a40

0803b3d8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 803b3d8:	b580      	push	{r7, lr}
 803b3da:	b08a      	sub	sp, #40	; 0x28
 803b3dc:	af00      	add	r7, sp, #0
 803b3de:	60f8      	str	r0, [r7, #12]
 803b3e0:	60b9      	str	r1, [r7, #8]
 803b3e2:	607a      	str	r2, [r7, #4]
 803b3e4:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 803b3e6:	f06f 0301 	mvn.w	r3, #1
 803b3ea:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 803b3ec:	68fb      	ldr	r3, [r7, #12]
 803b3ee:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 803b3f0:	68bb      	ldr	r3, [r7, #8]
 803b3f2:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 803b3f4:	687b      	ldr	r3, [r7, #4]
 803b3f6:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 803b3f8:	4b06      	ldr	r3, [pc, #24]	; (803b414 <xTimerPendFunctionCallFromISR+0x3c>)
 803b3fa:	6818      	ldr	r0, [r3, #0]
 803b3fc:	f107 0114 	add.w	r1, r7, #20
 803b400:	2300      	movs	r3, #0
 803b402:	683a      	ldr	r2, [r7, #0]
 803b404:	f7fd fcf6 	bl	8038df4 <xQueueGenericSendFromISR>
 803b408:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 803b40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 803b40c:	4618      	mov	r0, r3
 803b40e:	3728      	adds	r7, #40	; 0x28
 803b410:	46bd      	mov	sp, r7
 803b412:	bd80      	pop	{r7, pc}
 803b414:	20001928 	.word	0x20001928

0803b418 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 803b418:	b480      	push	{r7}
 803b41a:	b085      	sub	sp, #20
 803b41c:	af00      	add	r7, sp, #0
 803b41e:	60f8      	str	r0, [r7, #12]
 803b420:	60b9      	str	r1, [r7, #8]
 803b422:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 803b424:	68fb      	ldr	r3, [r7, #12]
 803b426:	3b04      	subs	r3, #4
 803b428:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 803b42a:	68fb      	ldr	r3, [r7, #12]
 803b42c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 803b430:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 803b432:	68fb      	ldr	r3, [r7, #12]
 803b434:	3b04      	subs	r3, #4
 803b436:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 803b438:	68bb      	ldr	r3, [r7, #8]
 803b43a:	f023 0201 	bic.w	r2, r3, #1
 803b43e:	68fb      	ldr	r3, [r7, #12]
 803b440:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 803b442:	68fb      	ldr	r3, [r7, #12]
 803b444:	3b04      	subs	r3, #4
 803b446:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 803b448:	4a0c      	ldr	r2, [pc, #48]	; (803b47c <pxPortInitialiseStack+0x64>)
 803b44a:	68fb      	ldr	r3, [r7, #12]
 803b44c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 803b44e:	68fb      	ldr	r3, [r7, #12]
 803b450:	3b14      	subs	r3, #20
 803b452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 803b454:	687a      	ldr	r2, [r7, #4]
 803b456:	68fb      	ldr	r3, [r7, #12]
 803b458:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 803b45a:	68fb      	ldr	r3, [r7, #12]
 803b45c:	3b04      	subs	r3, #4
 803b45e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 803b460:	68fb      	ldr	r3, [r7, #12]
 803b462:	f06f 0202 	mvn.w	r2, #2
 803b466:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 803b468:	68fb      	ldr	r3, [r7, #12]
 803b46a:	3b20      	subs	r3, #32
 803b46c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 803b46e:	68fb      	ldr	r3, [r7, #12]
}
 803b470:	4618      	mov	r0, r3
 803b472:	3714      	adds	r7, #20
 803b474:	46bd      	mov	sp, r7
 803b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b47a:	4770      	bx	lr
 803b47c:	0803b481 	.word	0x0803b481

0803b480 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 803b480:	b480      	push	{r7}
 803b482:	b085      	sub	sp, #20
 803b484:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 803b486:	2300      	movs	r3, #0
 803b488:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 803b48a:	4b11      	ldr	r3, [pc, #68]	; (803b4d0 <prvTaskExitError+0x50>)
 803b48c:	681b      	ldr	r3, [r3, #0]
 803b48e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 803b492:	d009      	beq.n	803b4a8 <prvTaskExitError+0x28>
 803b494:	f04f 0350 	mov.w	r3, #80	; 0x50
 803b498:	f383 8811 	msr	BASEPRI, r3
 803b49c:	f3bf 8f6f 	isb	sy
 803b4a0:	f3bf 8f4f 	dsb	sy
 803b4a4:	60fb      	str	r3, [r7, #12]
 803b4a6:	e7fe      	b.n	803b4a6 <prvTaskExitError+0x26>
 803b4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 803b4ac:	f383 8811 	msr	BASEPRI, r3
 803b4b0:	f3bf 8f6f 	isb	sy
 803b4b4:	f3bf 8f4f 	dsb	sy
 803b4b8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 803b4ba:	bf00      	nop
 803b4bc:	687b      	ldr	r3, [r7, #4]
 803b4be:	2b00      	cmp	r3, #0
 803b4c0:	d0fc      	beq.n	803b4bc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 803b4c2:	bf00      	nop
 803b4c4:	3714      	adds	r7, #20
 803b4c6:	46bd      	mov	sp, r7
 803b4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b4cc:	4770      	bx	lr
 803b4ce:	bf00      	nop
 803b4d0:	200002a0 	.word	0x200002a0
	...

0803b4e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 803b4e0:	4b07      	ldr	r3, [pc, #28]	; (803b500 <pxCurrentTCBConst2>)
 803b4e2:	6819      	ldr	r1, [r3, #0]
 803b4e4:	6808      	ldr	r0, [r1, #0]
 803b4e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803b4ea:	f380 8809 	msr	PSP, r0
 803b4ee:	f3bf 8f6f 	isb	sy
 803b4f2:	f04f 0000 	mov.w	r0, #0
 803b4f6:	f380 8811 	msr	BASEPRI, r0
 803b4fa:	4770      	bx	lr
 803b4fc:	f3af 8000 	nop.w

0803b500 <pxCurrentTCBConst2>:
 803b500:	200013f8 	.word	0x200013f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 803b504:	bf00      	nop
 803b506:	bf00      	nop

0803b508 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 803b508:	4808      	ldr	r0, [pc, #32]	; (803b52c <prvPortStartFirstTask+0x24>)
 803b50a:	6800      	ldr	r0, [r0, #0]
 803b50c:	6800      	ldr	r0, [r0, #0]
 803b50e:	f380 8808 	msr	MSP, r0
 803b512:	f04f 0000 	mov.w	r0, #0
 803b516:	f380 8814 	msr	CONTROL, r0
 803b51a:	b662      	cpsie	i
 803b51c:	b661      	cpsie	f
 803b51e:	f3bf 8f4f 	dsb	sy
 803b522:	f3bf 8f6f 	isb	sy
 803b526:	df00      	svc	0
 803b528:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 803b52a:	bf00      	nop
 803b52c:	e000ed08 	.word	0xe000ed08

0803b530 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 803b530:	b580      	push	{r7, lr}
 803b532:	b086      	sub	sp, #24
 803b534:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 803b536:	4b44      	ldr	r3, [pc, #272]	; (803b648 <xPortStartScheduler+0x118>)
 803b538:	681b      	ldr	r3, [r3, #0]
 803b53a:	4a44      	ldr	r2, [pc, #272]	; (803b64c <xPortStartScheduler+0x11c>)
 803b53c:	4293      	cmp	r3, r2
 803b53e:	d109      	bne.n	803b554 <xPortStartScheduler+0x24>
 803b540:	f04f 0350 	mov.w	r3, #80	; 0x50
 803b544:	f383 8811 	msr	BASEPRI, r3
 803b548:	f3bf 8f6f 	isb	sy
 803b54c:	f3bf 8f4f 	dsb	sy
 803b550:	613b      	str	r3, [r7, #16]
 803b552:	e7fe      	b.n	803b552 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 803b554:	4b3c      	ldr	r3, [pc, #240]	; (803b648 <xPortStartScheduler+0x118>)
 803b556:	681b      	ldr	r3, [r3, #0]
 803b558:	4a3d      	ldr	r2, [pc, #244]	; (803b650 <xPortStartScheduler+0x120>)
 803b55a:	4293      	cmp	r3, r2
 803b55c:	d109      	bne.n	803b572 <xPortStartScheduler+0x42>
 803b55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 803b562:	f383 8811 	msr	BASEPRI, r3
 803b566:	f3bf 8f6f 	isb	sy
 803b56a:	f3bf 8f4f 	dsb	sy
 803b56e:	60fb      	str	r3, [r7, #12]
 803b570:	e7fe      	b.n	803b570 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 803b572:	4b38      	ldr	r3, [pc, #224]	; (803b654 <xPortStartScheduler+0x124>)
 803b574:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 803b576:	697b      	ldr	r3, [r7, #20]
 803b578:	781b      	ldrb	r3, [r3, #0]
 803b57a:	b2db      	uxtb	r3, r3
 803b57c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 803b57e:	697b      	ldr	r3, [r7, #20]
 803b580:	22ff      	movs	r2, #255	; 0xff
 803b582:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 803b584:	697b      	ldr	r3, [r7, #20]
 803b586:	781b      	ldrb	r3, [r3, #0]
 803b588:	b2db      	uxtb	r3, r3
 803b58a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 803b58c:	78fb      	ldrb	r3, [r7, #3]
 803b58e:	b2db      	uxtb	r3, r3
 803b590:	f003 0350 	and.w	r3, r3, #80	; 0x50
 803b594:	b2da      	uxtb	r2, r3
 803b596:	4b30      	ldr	r3, [pc, #192]	; (803b658 <xPortStartScheduler+0x128>)
 803b598:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 803b59a:	4b30      	ldr	r3, [pc, #192]	; (803b65c <xPortStartScheduler+0x12c>)
 803b59c:	2207      	movs	r2, #7
 803b59e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 803b5a0:	e009      	b.n	803b5b6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 803b5a2:	4b2e      	ldr	r3, [pc, #184]	; (803b65c <xPortStartScheduler+0x12c>)
 803b5a4:	681b      	ldr	r3, [r3, #0]
 803b5a6:	3b01      	subs	r3, #1
 803b5a8:	4a2c      	ldr	r2, [pc, #176]	; (803b65c <xPortStartScheduler+0x12c>)
 803b5aa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 803b5ac:	78fb      	ldrb	r3, [r7, #3]
 803b5ae:	b2db      	uxtb	r3, r3
 803b5b0:	005b      	lsls	r3, r3, #1
 803b5b2:	b2db      	uxtb	r3, r3
 803b5b4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 803b5b6:	78fb      	ldrb	r3, [r7, #3]
 803b5b8:	b2db      	uxtb	r3, r3
 803b5ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 803b5be:	2b80      	cmp	r3, #128	; 0x80
 803b5c0:	d0ef      	beq.n	803b5a2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 803b5c2:	4b26      	ldr	r3, [pc, #152]	; (803b65c <xPortStartScheduler+0x12c>)
 803b5c4:	681b      	ldr	r3, [r3, #0]
 803b5c6:	f1c3 0307 	rsb	r3, r3, #7
 803b5ca:	2b04      	cmp	r3, #4
 803b5cc:	d009      	beq.n	803b5e2 <xPortStartScheduler+0xb2>
 803b5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 803b5d2:	f383 8811 	msr	BASEPRI, r3
 803b5d6:	f3bf 8f6f 	isb	sy
 803b5da:	f3bf 8f4f 	dsb	sy
 803b5de:	60bb      	str	r3, [r7, #8]
 803b5e0:	e7fe      	b.n	803b5e0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 803b5e2:	4b1e      	ldr	r3, [pc, #120]	; (803b65c <xPortStartScheduler+0x12c>)
 803b5e4:	681b      	ldr	r3, [r3, #0]
 803b5e6:	021b      	lsls	r3, r3, #8
 803b5e8:	4a1c      	ldr	r2, [pc, #112]	; (803b65c <xPortStartScheduler+0x12c>)
 803b5ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 803b5ec:	4b1b      	ldr	r3, [pc, #108]	; (803b65c <xPortStartScheduler+0x12c>)
 803b5ee:	681b      	ldr	r3, [r3, #0]
 803b5f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 803b5f4:	4a19      	ldr	r2, [pc, #100]	; (803b65c <xPortStartScheduler+0x12c>)
 803b5f6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 803b5f8:	687b      	ldr	r3, [r7, #4]
 803b5fa:	b2da      	uxtb	r2, r3
 803b5fc:	697b      	ldr	r3, [r7, #20]
 803b5fe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 803b600:	4b17      	ldr	r3, [pc, #92]	; (803b660 <xPortStartScheduler+0x130>)
 803b602:	681b      	ldr	r3, [r3, #0]
 803b604:	4a16      	ldr	r2, [pc, #88]	; (803b660 <xPortStartScheduler+0x130>)
 803b606:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 803b60a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 803b60c:	4b14      	ldr	r3, [pc, #80]	; (803b660 <xPortStartScheduler+0x130>)
 803b60e:	681b      	ldr	r3, [r3, #0]
 803b610:	4a13      	ldr	r2, [pc, #76]	; (803b660 <xPortStartScheduler+0x130>)
 803b612:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 803b616:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 803b618:	f000 f8d6 	bl	803b7c8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 803b61c:	4b11      	ldr	r3, [pc, #68]	; (803b664 <xPortStartScheduler+0x134>)
 803b61e:	2200      	movs	r2, #0
 803b620:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 803b622:	f000 f8f5 	bl	803b810 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 803b626:	4b10      	ldr	r3, [pc, #64]	; (803b668 <xPortStartScheduler+0x138>)
 803b628:	681b      	ldr	r3, [r3, #0]
 803b62a:	4a0f      	ldr	r2, [pc, #60]	; (803b668 <xPortStartScheduler+0x138>)
 803b62c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 803b630:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 803b632:	f7ff ff69 	bl	803b508 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 803b636:	f7fe fc91 	bl	8039f5c <vTaskSwitchContext>
	prvTaskExitError();
 803b63a:	f7ff ff21 	bl	803b480 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 803b63e:	2300      	movs	r3, #0
}
 803b640:	4618      	mov	r0, r3
 803b642:	3718      	adds	r7, #24
 803b644:	46bd      	mov	sp, r7
 803b646:	bd80      	pop	{r7, pc}
 803b648:	e000ed00 	.word	0xe000ed00
 803b64c:	410fc271 	.word	0x410fc271
 803b650:	410fc270 	.word	0x410fc270
 803b654:	e000e400 	.word	0xe000e400
 803b658:	20001a24 	.word	0x20001a24
 803b65c:	20001a28 	.word	0x20001a28
 803b660:	e000ed20 	.word	0xe000ed20
 803b664:	200002a0 	.word	0x200002a0
 803b668:	e000ef34 	.word	0xe000ef34

0803b66c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 803b66c:	b480      	push	{r7}
 803b66e:	b083      	sub	sp, #12
 803b670:	af00      	add	r7, sp, #0
 803b672:	f04f 0350 	mov.w	r3, #80	; 0x50
 803b676:	f383 8811 	msr	BASEPRI, r3
 803b67a:	f3bf 8f6f 	isb	sy
 803b67e:	f3bf 8f4f 	dsb	sy
 803b682:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 803b684:	4b0e      	ldr	r3, [pc, #56]	; (803b6c0 <vPortEnterCritical+0x54>)
 803b686:	681b      	ldr	r3, [r3, #0]
 803b688:	3301      	adds	r3, #1
 803b68a:	4a0d      	ldr	r2, [pc, #52]	; (803b6c0 <vPortEnterCritical+0x54>)
 803b68c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 803b68e:	4b0c      	ldr	r3, [pc, #48]	; (803b6c0 <vPortEnterCritical+0x54>)
 803b690:	681b      	ldr	r3, [r3, #0]
 803b692:	2b01      	cmp	r3, #1
 803b694:	d10e      	bne.n	803b6b4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 803b696:	4b0b      	ldr	r3, [pc, #44]	; (803b6c4 <vPortEnterCritical+0x58>)
 803b698:	681b      	ldr	r3, [r3, #0]
 803b69a:	b2db      	uxtb	r3, r3
 803b69c:	2b00      	cmp	r3, #0
 803b69e:	d009      	beq.n	803b6b4 <vPortEnterCritical+0x48>
 803b6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 803b6a4:	f383 8811 	msr	BASEPRI, r3
 803b6a8:	f3bf 8f6f 	isb	sy
 803b6ac:	f3bf 8f4f 	dsb	sy
 803b6b0:	603b      	str	r3, [r7, #0]
 803b6b2:	e7fe      	b.n	803b6b2 <vPortEnterCritical+0x46>
	}
}
 803b6b4:	bf00      	nop
 803b6b6:	370c      	adds	r7, #12
 803b6b8:	46bd      	mov	sp, r7
 803b6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b6be:	4770      	bx	lr
 803b6c0:	200002a0 	.word	0x200002a0
 803b6c4:	e000ed04 	.word	0xe000ed04

0803b6c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 803b6c8:	b480      	push	{r7}
 803b6ca:	b083      	sub	sp, #12
 803b6cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 803b6ce:	4b11      	ldr	r3, [pc, #68]	; (803b714 <vPortExitCritical+0x4c>)
 803b6d0:	681b      	ldr	r3, [r3, #0]
 803b6d2:	2b00      	cmp	r3, #0
 803b6d4:	d109      	bne.n	803b6ea <vPortExitCritical+0x22>
 803b6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 803b6da:	f383 8811 	msr	BASEPRI, r3
 803b6de:	f3bf 8f6f 	isb	sy
 803b6e2:	f3bf 8f4f 	dsb	sy
 803b6e6:	607b      	str	r3, [r7, #4]
 803b6e8:	e7fe      	b.n	803b6e8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 803b6ea:	4b0a      	ldr	r3, [pc, #40]	; (803b714 <vPortExitCritical+0x4c>)
 803b6ec:	681b      	ldr	r3, [r3, #0]
 803b6ee:	3b01      	subs	r3, #1
 803b6f0:	4a08      	ldr	r2, [pc, #32]	; (803b714 <vPortExitCritical+0x4c>)
 803b6f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 803b6f4:	4b07      	ldr	r3, [pc, #28]	; (803b714 <vPortExitCritical+0x4c>)
 803b6f6:	681b      	ldr	r3, [r3, #0]
 803b6f8:	2b00      	cmp	r3, #0
 803b6fa:	d104      	bne.n	803b706 <vPortExitCritical+0x3e>
 803b6fc:	2300      	movs	r3, #0
 803b6fe:	603b      	str	r3, [r7, #0]
	__asm volatile
 803b700:	683b      	ldr	r3, [r7, #0]
 803b702:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 803b706:	bf00      	nop
 803b708:	370c      	adds	r7, #12
 803b70a:	46bd      	mov	sp, r7
 803b70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b710:	4770      	bx	lr
 803b712:	bf00      	nop
 803b714:	200002a0 	.word	0x200002a0
	...

0803b720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 803b720:	f3ef 8009 	mrs	r0, PSP
 803b724:	f3bf 8f6f 	isb	sy
 803b728:	4b15      	ldr	r3, [pc, #84]	; (803b780 <pxCurrentTCBConst>)
 803b72a:	681a      	ldr	r2, [r3, #0]
 803b72c:	f01e 0f10 	tst.w	lr, #16
 803b730:	bf08      	it	eq
 803b732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 803b736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803b73a:	6010      	str	r0, [r2, #0]
 803b73c:	e92d 0009 	stmdb	sp!, {r0, r3}
 803b740:	f04f 0050 	mov.w	r0, #80	; 0x50
 803b744:	f380 8811 	msr	BASEPRI, r0
 803b748:	f3bf 8f4f 	dsb	sy
 803b74c:	f3bf 8f6f 	isb	sy
 803b750:	f7fe fc04 	bl	8039f5c <vTaskSwitchContext>
 803b754:	f04f 0000 	mov.w	r0, #0
 803b758:	f380 8811 	msr	BASEPRI, r0
 803b75c:	bc09      	pop	{r0, r3}
 803b75e:	6819      	ldr	r1, [r3, #0]
 803b760:	6808      	ldr	r0, [r1, #0]
 803b762:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803b766:	f01e 0f10 	tst.w	lr, #16
 803b76a:	bf08      	it	eq
 803b76c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 803b770:	f380 8809 	msr	PSP, r0
 803b774:	f3bf 8f6f 	isb	sy
 803b778:	4770      	bx	lr
 803b77a:	bf00      	nop
 803b77c:	f3af 8000 	nop.w

0803b780 <pxCurrentTCBConst>:
 803b780:	200013f8 	.word	0x200013f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 803b784:	bf00      	nop
 803b786:	bf00      	nop

0803b788 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 803b788:	b580      	push	{r7, lr}
 803b78a:	b082      	sub	sp, #8
 803b78c:	af00      	add	r7, sp, #0
	__asm volatile
 803b78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 803b792:	f383 8811 	msr	BASEPRI, r3
 803b796:	f3bf 8f6f 	isb	sy
 803b79a:	f3bf 8f4f 	dsb	sy
 803b79e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 803b7a0:	f7fe fb24 	bl	8039dec <xTaskIncrementTick>
 803b7a4:	4603      	mov	r3, r0
 803b7a6:	2b00      	cmp	r3, #0
 803b7a8:	d003      	beq.n	803b7b2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 803b7aa:	4b06      	ldr	r3, [pc, #24]	; (803b7c4 <SysTick_Handler+0x3c>)
 803b7ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 803b7b0:	601a      	str	r2, [r3, #0]
 803b7b2:	2300      	movs	r3, #0
 803b7b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 803b7b6:	683b      	ldr	r3, [r7, #0]
 803b7b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 803b7bc:	bf00      	nop
 803b7be:	3708      	adds	r7, #8
 803b7c0:	46bd      	mov	sp, r7
 803b7c2:	bd80      	pop	{r7, pc}
 803b7c4:	e000ed04 	.word	0xe000ed04

0803b7c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 803b7c8:	b480      	push	{r7}
 803b7ca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 803b7cc:	4b0b      	ldr	r3, [pc, #44]	; (803b7fc <vPortSetupTimerInterrupt+0x34>)
 803b7ce:	2200      	movs	r2, #0
 803b7d0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 803b7d2:	4b0b      	ldr	r3, [pc, #44]	; (803b800 <vPortSetupTimerInterrupt+0x38>)
 803b7d4:	2200      	movs	r2, #0
 803b7d6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 803b7d8:	4b0a      	ldr	r3, [pc, #40]	; (803b804 <vPortSetupTimerInterrupt+0x3c>)
 803b7da:	681b      	ldr	r3, [r3, #0]
 803b7dc:	4a0a      	ldr	r2, [pc, #40]	; (803b808 <vPortSetupTimerInterrupt+0x40>)
 803b7de:	fba2 2303 	umull	r2, r3, r2, r3
 803b7e2:	099b      	lsrs	r3, r3, #6
 803b7e4:	4a09      	ldr	r2, [pc, #36]	; (803b80c <vPortSetupTimerInterrupt+0x44>)
 803b7e6:	3b01      	subs	r3, #1
 803b7e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 803b7ea:	4b04      	ldr	r3, [pc, #16]	; (803b7fc <vPortSetupTimerInterrupt+0x34>)
 803b7ec:	2207      	movs	r2, #7
 803b7ee:	601a      	str	r2, [r3, #0]
}
 803b7f0:	bf00      	nop
 803b7f2:	46bd      	mov	sp, r7
 803b7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b7f8:	4770      	bx	lr
 803b7fa:	bf00      	nop
 803b7fc:	e000e010 	.word	0xe000e010
 803b800:	e000e018 	.word	0xe000e018
 803b804:	20000294 	.word	0x20000294
 803b808:	10624dd3 	.word	0x10624dd3
 803b80c:	e000e014 	.word	0xe000e014

0803b810 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 803b810:	f8df 000c 	ldr.w	r0, [pc, #12]	; 803b820 <vPortEnableVFP+0x10>
 803b814:	6801      	ldr	r1, [r0, #0]
 803b816:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 803b81a:	6001      	str	r1, [r0, #0]
 803b81c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 803b81e:	bf00      	nop
 803b820:	e000ed88 	.word	0xe000ed88

0803b824 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 803b824:	b480      	push	{r7}
 803b826:	b085      	sub	sp, #20
 803b828:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 803b82a:	f3ef 8305 	mrs	r3, IPSR
 803b82e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 803b830:	68fb      	ldr	r3, [r7, #12]
 803b832:	2b0f      	cmp	r3, #15
 803b834:	d913      	bls.n	803b85e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 803b836:	4a16      	ldr	r2, [pc, #88]	; (803b890 <vPortValidateInterruptPriority+0x6c>)
 803b838:	68fb      	ldr	r3, [r7, #12]
 803b83a:	4413      	add	r3, r2
 803b83c:	781b      	ldrb	r3, [r3, #0]
 803b83e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 803b840:	4b14      	ldr	r3, [pc, #80]	; (803b894 <vPortValidateInterruptPriority+0x70>)
 803b842:	781b      	ldrb	r3, [r3, #0]
 803b844:	7afa      	ldrb	r2, [r7, #11]
 803b846:	429a      	cmp	r2, r3
 803b848:	d209      	bcs.n	803b85e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 803b84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 803b84e:	f383 8811 	msr	BASEPRI, r3
 803b852:	f3bf 8f6f 	isb	sy
 803b856:	f3bf 8f4f 	dsb	sy
 803b85a:	607b      	str	r3, [r7, #4]
 803b85c:	e7fe      	b.n	803b85c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 803b85e:	4b0e      	ldr	r3, [pc, #56]	; (803b898 <vPortValidateInterruptPriority+0x74>)
 803b860:	681b      	ldr	r3, [r3, #0]
 803b862:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 803b866:	4b0d      	ldr	r3, [pc, #52]	; (803b89c <vPortValidateInterruptPriority+0x78>)
 803b868:	681b      	ldr	r3, [r3, #0]
 803b86a:	429a      	cmp	r2, r3
 803b86c:	d909      	bls.n	803b882 <vPortValidateInterruptPriority+0x5e>
 803b86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 803b872:	f383 8811 	msr	BASEPRI, r3
 803b876:	f3bf 8f6f 	isb	sy
 803b87a:	f3bf 8f4f 	dsb	sy
 803b87e:	603b      	str	r3, [r7, #0]
 803b880:	e7fe      	b.n	803b880 <vPortValidateInterruptPriority+0x5c>
	}
 803b882:	bf00      	nop
 803b884:	3714      	adds	r7, #20
 803b886:	46bd      	mov	sp, r7
 803b888:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b88c:	4770      	bx	lr
 803b88e:	bf00      	nop
 803b890:	e000e3f0 	.word	0xe000e3f0
 803b894:	20001a24 	.word	0x20001a24
 803b898:	e000ed0c 	.word	0xe000ed0c
 803b89c:	20001a28 	.word	0x20001a28

0803b8a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 803b8a0:	b580      	push	{r7, lr}
 803b8a2:	b08a      	sub	sp, #40	; 0x28
 803b8a4:	af00      	add	r7, sp, #0
 803b8a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 803b8a8:	2300      	movs	r3, #0
 803b8aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 803b8ac:	f7fe f9d2 	bl	8039c54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 803b8b0:	4b57      	ldr	r3, [pc, #348]	; (803ba10 <pvPortMalloc+0x170>)
 803b8b2:	681b      	ldr	r3, [r3, #0]
 803b8b4:	2b00      	cmp	r3, #0
 803b8b6:	d101      	bne.n	803b8bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 803b8b8:	f000 f90c 	bl	803bad4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 803b8bc:	4b55      	ldr	r3, [pc, #340]	; (803ba14 <pvPortMalloc+0x174>)
 803b8be:	681a      	ldr	r2, [r3, #0]
 803b8c0:	687b      	ldr	r3, [r7, #4]
 803b8c2:	4013      	ands	r3, r2
 803b8c4:	2b00      	cmp	r3, #0
 803b8c6:	f040 808c 	bne.w	803b9e2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 803b8ca:	687b      	ldr	r3, [r7, #4]
 803b8cc:	2b00      	cmp	r3, #0
 803b8ce:	d01c      	beq.n	803b90a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 803b8d0:	2208      	movs	r2, #8
 803b8d2:	687b      	ldr	r3, [r7, #4]
 803b8d4:	4413      	add	r3, r2
 803b8d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 803b8d8:	687b      	ldr	r3, [r7, #4]
 803b8da:	f003 0307 	and.w	r3, r3, #7
 803b8de:	2b00      	cmp	r3, #0
 803b8e0:	d013      	beq.n	803b90a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 803b8e2:	687b      	ldr	r3, [r7, #4]
 803b8e4:	f023 0307 	bic.w	r3, r3, #7
 803b8e8:	3308      	adds	r3, #8
 803b8ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 803b8ec:	687b      	ldr	r3, [r7, #4]
 803b8ee:	f003 0307 	and.w	r3, r3, #7
 803b8f2:	2b00      	cmp	r3, #0
 803b8f4:	d009      	beq.n	803b90a <pvPortMalloc+0x6a>
 803b8f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 803b8fa:	f383 8811 	msr	BASEPRI, r3
 803b8fe:	f3bf 8f6f 	isb	sy
 803b902:	f3bf 8f4f 	dsb	sy
 803b906:	617b      	str	r3, [r7, #20]
 803b908:	e7fe      	b.n	803b908 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 803b90a:	687b      	ldr	r3, [r7, #4]
 803b90c:	2b00      	cmp	r3, #0
 803b90e:	d068      	beq.n	803b9e2 <pvPortMalloc+0x142>
 803b910:	4b41      	ldr	r3, [pc, #260]	; (803ba18 <pvPortMalloc+0x178>)
 803b912:	681b      	ldr	r3, [r3, #0]
 803b914:	687a      	ldr	r2, [r7, #4]
 803b916:	429a      	cmp	r2, r3
 803b918:	d863      	bhi.n	803b9e2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 803b91a:	4b40      	ldr	r3, [pc, #256]	; (803ba1c <pvPortMalloc+0x17c>)
 803b91c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 803b91e:	4b3f      	ldr	r3, [pc, #252]	; (803ba1c <pvPortMalloc+0x17c>)
 803b920:	681b      	ldr	r3, [r3, #0]
 803b922:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 803b924:	e004      	b.n	803b930 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 803b926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803b928:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 803b92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803b92c:	681b      	ldr	r3, [r3, #0]
 803b92e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 803b930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803b932:	685b      	ldr	r3, [r3, #4]
 803b934:	687a      	ldr	r2, [r7, #4]
 803b936:	429a      	cmp	r2, r3
 803b938:	d903      	bls.n	803b942 <pvPortMalloc+0xa2>
 803b93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803b93c:	681b      	ldr	r3, [r3, #0]
 803b93e:	2b00      	cmp	r3, #0
 803b940:	d1f1      	bne.n	803b926 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 803b942:	4b33      	ldr	r3, [pc, #204]	; (803ba10 <pvPortMalloc+0x170>)
 803b944:	681b      	ldr	r3, [r3, #0]
 803b946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 803b948:	429a      	cmp	r2, r3
 803b94a:	d04a      	beq.n	803b9e2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 803b94c:	6a3b      	ldr	r3, [r7, #32]
 803b94e:	681b      	ldr	r3, [r3, #0]
 803b950:	2208      	movs	r2, #8
 803b952:	4413      	add	r3, r2
 803b954:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 803b956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803b958:	681a      	ldr	r2, [r3, #0]
 803b95a:	6a3b      	ldr	r3, [r7, #32]
 803b95c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 803b95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803b960:	685a      	ldr	r2, [r3, #4]
 803b962:	687b      	ldr	r3, [r7, #4]
 803b964:	1ad2      	subs	r2, r2, r3
 803b966:	2308      	movs	r3, #8
 803b968:	005b      	lsls	r3, r3, #1
 803b96a:	429a      	cmp	r2, r3
 803b96c:	d91e      	bls.n	803b9ac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 803b96e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 803b970:	687b      	ldr	r3, [r7, #4]
 803b972:	4413      	add	r3, r2
 803b974:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 803b976:	69bb      	ldr	r3, [r7, #24]
 803b978:	f003 0307 	and.w	r3, r3, #7
 803b97c:	2b00      	cmp	r3, #0
 803b97e:	d009      	beq.n	803b994 <pvPortMalloc+0xf4>
 803b980:	f04f 0350 	mov.w	r3, #80	; 0x50
 803b984:	f383 8811 	msr	BASEPRI, r3
 803b988:	f3bf 8f6f 	isb	sy
 803b98c:	f3bf 8f4f 	dsb	sy
 803b990:	613b      	str	r3, [r7, #16]
 803b992:	e7fe      	b.n	803b992 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 803b994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803b996:	685a      	ldr	r2, [r3, #4]
 803b998:	687b      	ldr	r3, [r7, #4]
 803b99a:	1ad2      	subs	r2, r2, r3
 803b99c:	69bb      	ldr	r3, [r7, #24]
 803b99e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 803b9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803b9a2:	687a      	ldr	r2, [r7, #4]
 803b9a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 803b9a6:	69b8      	ldr	r0, [r7, #24]
 803b9a8:	f000 f8f6 	bl	803bb98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 803b9ac:	4b1a      	ldr	r3, [pc, #104]	; (803ba18 <pvPortMalloc+0x178>)
 803b9ae:	681a      	ldr	r2, [r3, #0]
 803b9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803b9b2:	685b      	ldr	r3, [r3, #4]
 803b9b4:	1ad3      	subs	r3, r2, r3
 803b9b6:	4a18      	ldr	r2, [pc, #96]	; (803ba18 <pvPortMalloc+0x178>)
 803b9b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 803b9ba:	4b17      	ldr	r3, [pc, #92]	; (803ba18 <pvPortMalloc+0x178>)
 803b9bc:	681a      	ldr	r2, [r3, #0]
 803b9be:	4b18      	ldr	r3, [pc, #96]	; (803ba20 <pvPortMalloc+0x180>)
 803b9c0:	681b      	ldr	r3, [r3, #0]
 803b9c2:	429a      	cmp	r2, r3
 803b9c4:	d203      	bcs.n	803b9ce <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 803b9c6:	4b14      	ldr	r3, [pc, #80]	; (803ba18 <pvPortMalloc+0x178>)
 803b9c8:	681b      	ldr	r3, [r3, #0]
 803b9ca:	4a15      	ldr	r2, [pc, #84]	; (803ba20 <pvPortMalloc+0x180>)
 803b9cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 803b9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803b9d0:	685a      	ldr	r2, [r3, #4]
 803b9d2:	4b10      	ldr	r3, [pc, #64]	; (803ba14 <pvPortMalloc+0x174>)
 803b9d4:	681b      	ldr	r3, [r3, #0]
 803b9d6:	431a      	orrs	r2, r3
 803b9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803b9da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 803b9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803b9de:	2200      	movs	r2, #0
 803b9e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 803b9e2:	f7fe f945 	bl	8039c70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 803b9e6:	69fb      	ldr	r3, [r7, #28]
 803b9e8:	f003 0307 	and.w	r3, r3, #7
 803b9ec:	2b00      	cmp	r3, #0
 803b9ee:	d009      	beq.n	803ba04 <pvPortMalloc+0x164>
 803b9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 803b9f4:	f383 8811 	msr	BASEPRI, r3
 803b9f8:	f3bf 8f6f 	isb	sy
 803b9fc:	f3bf 8f4f 	dsb	sy
 803ba00:	60fb      	str	r3, [r7, #12]
 803ba02:	e7fe      	b.n	803ba02 <pvPortMalloc+0x162>
	return pvReturn;
 803ba04:	69fb      	ldr	r3, [r7, #28]
}
 803ba06:	4618      	mov	r0, r3
 803ba08:	3728      	adds	r7, #40	; 0x28
 803ba0a:	46bd      	mov	sp, r7
 803ba0c:	bd80      	pop	{r7, pc}
 803ba0e:	bf00      	nop
 803ba10:	20007fc4 	.word	0x20007fc4
 803ba14:	20007fd0 	.word	0x20007fd0
 803ba18:	20007fc8 	.word	0x20007fc8
 803ba1c:	20007fbc 	.word	0x20007fbc
 803ba20:	20007fcc 	.word	0x20007fcc

0803ba24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 803ba24:	b580      	push	{r7, lr}
 803ba26:	b086      	sub	sp, #24
 803ba28:	af00      	add	r7, sp, #0
 803ba2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 803ba2c:	687b      	ldr	r3, [r7, #4]
 803ba2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 803ba30:	687b      	ldr	r3, [r7, #4]
 803ba32:	2b00      	cmp	r3, #0
 803ba34:	d046      	beq.n	803bac4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 803ba36:	2308      	movs	r3, #8
 803ba38:	425b      	negs	r3, r3
 803ba3a:	697a      	ldr	r2, [r7, #20]
 803ba3c:	4413      	add	r3, r2
 803ba3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 803ba40:	697b      	ldr	r3, [r7, #20]
 803ba42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 803ba44:	693b      	ldr	r3, [r7, #16]
 803ba46:	685a      	ldr	r2, [r3, #4]
 803ba48:	4b20      	ldr	r3, [pc, #128]	; (803bacc <vPortFree+0xa8>)
 803ba4a:	681b      	ldr	r3, [r3, #0]
 803ba4c:	4013      	ands	r3, r2
 803ba4e:	2b00      	cmp	r3, #0
 803ba50:	d109      	bne.n	803ba66 <vPortFree+0x42>
 803ba52:	f04f 0350 	mov.w	r3, #80	; 0x50
 803ba56:	f383 8811 	msr	BASEPRI, r3
 803ba5a:	f3bf 8f6f 	isb	sy
 803ba5e:	f3bf 8f4f 	dsb	sy
 803ba62:	60fb      	str	r3, [r7, #12]
 803ba64:	e7fe      	b.n	803ba64 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 803ba66:	693b      	ldr	r3, [r7, #16]
 803ba68:	681b      	ldr	r3, [r3, #0]
 803ba6a:	2b00      	cmp	r3, #0
 803ba6c:	d009      	beq.n	803ba82 <vPortFree+0x5e>
 803ba6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 803ba72:	f383 8811 	msr	BASEPRI, r3
 803ba76:	f3bf 8f6f 	isb	sy
 803ba7a:	f3bf 8f4f 	dsb	sy
 803ba7e:	60bb      	str	r3, [r7, #8]
 803ba80:	e7fe      	b.n	803ba80 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 803ba82:	693b      	ldr	r3, [r7, #16]
 803ba84:	685a      	ldr	r2, [r3, #4]
 803ba86:	4b11      	ldr	r3, [pc, #68]	; (803bacc <vPortFree+0xa8>)
 803ba88:	681b      	ldr	r3, [r3, #0]
 803ba8a:	4013      	ands	r3, r2
 803ba8c:	2b00      	cmp	r3, #0
 803ba8e:	d019      	beq.n	803bac4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 803ba90:	693b      	ldr	r3, [r7, #16]
 803ba92:	681b      	ldr	r3, [r3, #0]
 803ba94:	2b00      	cmp	r3, #0
 803ba96:	d115      	bne.n	803bac4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 803ba98:	693b      	ldr	r3, [r7, #16]
 803ba9a:	685a      	ldr	r2, [r3, #4]
 803ba9c:	4b0b      	ldr	r3, [pc, #44]	; (803bacc <vPortFree+0xa8>)
 803ba9e:	681b      	ldr	r3, [r3, #0]
 803baa0:	43db      	mvns	r3, r3
 803baa2:	401a      	ands	r2, r3
 803baa4:	693b      	ldr	r3, [r7, #16]
 803baa6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 803baa8:	f7fe f8d4 	bl	8039c54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 803baac:	693b      	ldr	r3, [r7, #16]
 803baae:	685a      	ldr	r2, [r3, #4]
 803bab0:	4b07      	ldr	r3, [pc, #28]	; (803bad0 <vPortFree+0xac>)
 803bab2:	681b      	ldr	r3, [r3, #0]
 803bab4:	4413      	add	r3, r2
 803bab6:	4a06      	ldr	r2, [pc, #24]	; (803bad0 <vPortFree+0xac>)
 803bab8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 803baba:	6938      	ldr	r0, [r7, #16]
 803babc:	f000 f86c 	bl	803bb98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 803bac0:	f7fe f8d6 	bl	8039c70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 803bac4:	bf00      	nop
 803bac6:	3718      	adds	r7, #24
 803bac8:	46bd      	mov	sp, r7
 803baca:	bd80      	pop	{r7, pc}
 803bacc:	20007fd0 	.word	0x20007fd0
 803bad0:	20007fc8 	.word	0x20007fc8

0803bad4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 803bad4:	b480      	push	{r7}
 803bad6:	b085      	sub	sp, #20
 803bad8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 803bada:	f246 5390 	movw	r3, #26000	; 0x6590
 803bade:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 803bae0:	4b27      	ldr	r3, [pc, #156]	; (803bb80 <prvHeapInit+0xac>)
 803bae2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 803bae4:	68fb      	ldr	r3, [r7, #12]
 803bae6:	f003 0307 	and.w	r3, r3, #7
 803baea:	2b00      	cmp	r3, #0
 803baec:	d00c      	beq.n	803bb08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 803baee:	68fb      	ldr	r3, [r7, #12]
 803baf0:	3307      	adds	r3, #7
 803baf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 803baf4:	68fb      	ldr	r3, [r7, #12]
 803baf6:	f023 0307 	bic.w	r3, r3, #7
 803bafa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 803bafc:	68ba      	ldr	r2, [r7, #8]
 803bafe:	68fb      	ldr	r3, [r7, #12]
 803bb00:	1ad3      	subs	r3, r2, r3
 803bb02:	4a1f      	ldr	r2, [pc, #124]	; (803bb80 <prvHeapInit+0xac>)
 803bb04:	4413      	add	r3, r2
 803bb06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 803bb08:	68fb      	ldr	r3, [r7, #12]
 803bb0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 803bb0c:	4a1d      	ldr	r2, [pc, #116]	; (803bb84 <prvHeapInit+0xb0>)
 803bb0e:	687b      	ldr	r3, [r7, #4]
 803bb10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 803bb12:	4b1c      	ldr	r3, [pc, #112]	; (803bb84 <prvHeapInit+0xb0>)
 803bb14:	2200      	movs	r2, #0
 803bb16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 803bb18:	687b      	ldr	r3, [r7, #4]
 803bb1a:	68ba      	ldr	r2, [r7, #8]
 803bb1c:	4413      	add	r3, r2
 803bb1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 803bb20:	2208      	movs	r2, #8
 803bb22:	68fb      	ldr	r3, [r7, #12]
 803bb24:	1a9b      	subs	r3, r3, r2
 803bb26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 803bb28:	68fb      	ldr	r3, [r7, #12]
 803bb2a:	f023 0307 	bic.w	r3, r3, #7
 803bb2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 803bb30:	68fb      	ldr	r3, [r7, #12]
 803bb32:	4a15      	ldr	r2, [pc, #84]	; (803bb88 <prvHeapInit+0xb4>)
 803bb34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 803bb36:	4b14      	ldr	r3, [pc, #80]	; (803bb88 <prvHeapInit+0xb4>)
 803bb38:	681b      	ldr	r3, [r3, #0]
 803bb3a:	2200      	movs	r2, #0
 803bb3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 803bb3e:	4b12      	ldr	r3, [pc, #72]	; (803bb88 <prvHeapInit+0xb4>)
 803bb40:	681b      	ldr	r3, [r3, #0]
 803bb42:	2200      	movs	r2, #0
 803bb44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 803bb46:	687b      	ldr	r3, [r7, #4]
 803bb48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 803bb4a:	683b      	ldr	r3, [r7, #0]
 803bb4c:	68fa      	ldr	r2, [r7, #12]
 803bb4e:	1ad2      	subs	r2, r2, r3
 803bb50:	683b      	ldr	r3, [r7, #0]
 803bb52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 803bb54:	4b0c      	ldr	r3, [pc, #48]	; (803bb88 <prvHeapInit+0xb4>)
 803bb56:	681a      	ldr	r2, [r3, #0]
 803bb58:	683b      	ldr	r3, [r7, #0]
 803bb5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 803bb5c:	683b      	ldr	r3, [r7, #0]
 803bb5e:	685b      	ldr	r3, [r3, #4]
 803bb60:	4a0a      	ldr	r2, [pc, #40]	; (803bb8c <prvHeapInit+0xb8>)
 803bb62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 803bb64:	683b      	ldr	r3, [r7, #0]
 803bb66:	685b      	ldr	r3, [r3, #4]
 803bb68:	4a09      	ldr	r2, [pc, #36]	; (803bb90 <prvHeapInit+0xbc>)
 803bb6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 803bb6c:	4b09      	ldr	r3, [pc, #36]	; (803bb94 <prvHeapInit+0xc0>)
 803bb6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 803bb72:	601a      	str	r2, [r3, #0]
}
 803bb74:	bf00      	nop
 803bb76:	3714      	adds	r7, #20
 803bb78:	46bd      	mov	sp, r7
 803bb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803bb7e:	4770      	bx	lr
 803bb80:	20001a2c 	.word	0x20001a2c
 803bb84:	20007fbc 	.word	0x20007fbc
 803bb88:	20007fc4 	.word	0x20007fc4
 803bb8c:	20007fcc 	.word	0x20007fcc
 803bb90:	20007fc8 	.word	0x20007fc8
 803bb94:	20007fd0 	.word	0x20007fd0

0803bb98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 803bb98:	b480      	push	{r7}
 803bb9a:	b085      	sub	sp, #20
 803bb9c:	af00      	add	r7, sp, #0
 803bb9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 803bba0:	4b28      	ldr	r3, [pc, #160]	; (803bc44 <prvInsertBlockIntoFreeList+0xac>)
 803bba2:	60fb      	str	r3, [r7, #12]
 803bba4:	e002      	b.n	803bbac <prvInsertBlockIntoFreeList+0x14>
 803bba6:	68fb      	ldr	r3, [r7, #12]
 803bba8:	681b      	ldr	r3, [r3, #0]
 803bbaa:	60fb      	str	r3, [r7, #12]
 803bbac:	68fb      	ldr	r3, [r7, #12]
 803bbae:	681b      	ldr	r3, [r3, #0]
 803bbb0:	687a      	ldr	r2, [r7, #4]
 803bbb2:	429a      	cmp	r2, r3
 803bbb4:	d8f7      	bhi.n	803bba6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 803bbb6:	68fb      	ldr	r3, [r7, #12]
 803bbb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 803bbba:	68fb      	ldr	r3, [r7, #12]
 803bbbc:	685b      	ldr	r3, [r3, #4]
 803bbbe:	68ba      	ldr	r2, [r7, #8]
 803bbc0:	4413      	add	r3, r2
 803bbc2:	687a      	ldr	r2, [r7, #4]
 803bbc4:	429a      	cmp	r2, r3
 803bbc6:	d108      	bne.n	803bbda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 803bbc8:	68fb      	ldr	r3, [r7, #12]
 803bbca:	685a      	ldr	r2, [r3, #4]
 803bbcc:	687b      	ldr	r3, [r7, #4]
 803bbce:	685b      	ldr	r3, [r3, #4]
 803bbd0:	441a      	add	r2, r3
 803bbd2:	68fb      	ldr	r3, [r7, #12]
 803bbd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 803bbd6:	68fb      	ldr	r3, [r7, #12]
 803bbd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 803bbda:	687b      	ldr	r3, [r7, #4]
 803bbdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 803bbde:	687b      	ldr	r3, [r7, #4]
 803bbe0:	685b      	ldr	r3, [r3, #4]
 803bbe2:	68ba      	ldr	r2, [r7, #8]
 803bbe4:	441a      	add	r2, r3
 803bbe6:	68fb      	ldr	r3, [r7, #12]
 803bbe8:	681b      	ldr	r3, [r3, #0]
 803bbea:	429a      	cmp	r2, r3
 803bbec:	d118      	bne.n	803bc20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 803bbee:	68fb      	ldr	r3, [r7, #12]
 803bbf0:	681a      	ldr	r2, [r3, #0]
 803bbf2:	4b15      	ldr	r3, [pc, #84]	; (803bc48 <prvInsertBlockIntoFreeList+0xb0>)
 803bbf4:	681b      	ldr	r3, [r3, #0]
 803bbf6:	429a      	cmp	r2, r3
 803bbf8:	d00d      	beq.n	803bc16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 803bbfa:	687b      	ldr	r3, [r7, #4]
 803bbfc:	685a      	ldr	r2, [r3, #4]
 803bbfe:	68fb      	ldr	r3, [r7, #12]
 803bc00:	681b      	ldr	r3, [r3, #0]
 803bc02:	685b      	ldr	r3, [r3, #4]
 803bc04:	441a      	add	r2, r3
 803bc06:	687b      	ldr	r3, [r7, #4]
 803bc08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 803bc0a:	68fb      	ldr	r3, [r7, #12]
 803bc0c:	681b      	ldr	r3, [r3, #0]
 803bc0e:	681a      	ldr	r2, [r3, #0]
 803bc10:	687b      	ldr	r3, [r7, #4]
 803bc12:	601a      	str	r2, [r3, #0]
 803bc14:	e008      	b.n	803bc28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 803bc16:	4b0c      	ldr	r3, [pc, #48]	; (803bc48 <prvInsertBlockIntoFreeList+0xb0>)
 803bc18:	681a      	ldr	r2, [r3, #0]
 803bc1a:	687b      	ldr	r3, [r7, #4]
 803bc1c:	601a      	str	r2, [r3, #0]
 803bc1e:	e003      	b.n	803bc28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 803bc20:	68fb      	ldr	r3, [r7, #12]
 803bc22:	681a      	ldr	r2, [r3, #0]
 803bc24:	687b      	ldr	r3, [r7, #4]
 803bc26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 803bc28:	68fa      	ldr	r2, [r7, #12]
 803bc2a:	687b      	ldr	r3, [r7, #4]
 803bc2c:	429a      	cmp	r2, r3
 803bc2e:	d002      	beq.n	803bc36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 803bc30:	68fb      	ldr	r3, [r7, #12]
 803bc32:	687a      	ldr	r2, [r7, #4]
 803bc34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 803bc36:	bf00      	nop
 803bc38:	3714      	adds	r7, #20
 803bc3a:	46bd      	mov	sp, r7
 803bc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 803bc40:	4770      	bx	lr
 803bc42:	bf00      	nop
 803bc44:	20007fbc 	.word	0x20007fbc
 803bc48:	20007fc4 	.word	0x20007fc4

0803bc4c <SIMCOM_USART_IrqHandler>:
/* Private functions implementation -------------------------------------------*/
static void SIMCOM_Check_Buffer(void);
static void SIMCOM_Fill_Buffer(const void *data, size_t len);

/* Public functions implementation ---------------------------------------------*/
void SIMCOM_USART_IrqHandler(void) {
 803bc4c:	b580      	push	{r7, lr}
 803bc4e:	b082      	sub	sp, #8
 803bc50:	af00      	add	r7, sp, #0
    /* if Idle flag is set */
    if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)) {
 803bc52:	4b0c      	ldr	r3, [pc, #48]	; (803bc84 <SIMCOM_USART_IrqHandler+0x38>)
 803bc54:	681b      	ldr	r3, [r3, #0]
 803bc56:	681b      	ldr	r3, [r3, #0]
 803bc58:	f003 0310 	and.w	r3, r3, #16
 803bc5c:	2b10      	cmp	r3, #16
 803bc5e:	d10c      	bne.n	803bc7a <SIMCOM_USART_IrqHandler+0x2e>
        /* Clear idle flag */
        __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 803bc60:	2300      	movs	r3, #0
 803bc62:	607b      	str	r3, [r7, #4]
 803bc64:	4b07      	ldr	r3, [pc, #28]	; (803bc84 <SIMCOM_USART_IrqHandler+0x38>)
 803bc66:	681b      	ldr	r3, [r3, #0]
 803bc68:	681b      	ldr	r3, [r3, #0]
 803bc6a:	607b      	str	r3, [r7, #4]
 803bc6c:	4b05      	ldr	r3, [pc, #20]	; (803bc84 <SIMCOM_USART_IrqHandler+0x38>)
 803bc6e:	681b      	ldr	r3, [r3, #0]
 803bc70:	685b      	ldr	r3, [r3, #4]
 803bc72:	607b      	str	r3, [r7, #4]
 803bc74:	687b      	ldr	r3, [r7, #4]

        SIMCOM_Check_Buffer();
 803bc76:	f001 f923 	bl	803cec0 <SIMCOM_Check_Buffer>
    }
}
 803bc7a:	bf00      	nop
 803bc7c:	3708      	adds	r7, #8
 803bc7e:	46bd      	mov	sp, r7
 803bc80:	bd80      	pop	{r7, pc}
 803bc82:	bf00      	nop
 803bc84:	200087ac 	.word	0x200087ac

0803bc88 <SIMCOM_DMA_IrqHandler>:

void SIMCOM_DMA_IrqHandler(void) {
 803bc88:	b580      	push	{r7, lr}
 803bc8a:	af00      	add	r7, sp, #0
    // if the source is HT
    if (__HAL_DMA_GET_IT_SOURCE(&hdma_usart1_rx, DMA_IT_HT)) {
 803bc8c:	4b9a      	ldr	r3, [pc, #616]	; (803bef8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bc8e:	681b      	ldr	r3, [r3, #0]
 803bc90:	681b      	ldr	r3, [r3, #0]
 803bc92:	f003 0308 	and.w	r3, r3, #8
 803bc96:	2b00      	cmp	r3, #0
 803bc98:	f000 81bc 	beq.w	803c014 <SIMCOM_DMA_IrqHandler+0x38c>
        /* Clear HT flag */
        __HAL_DMA_CLEAR_FLAG(&hdma_usart1_rx, __HAL_DMA_GET_HT_FLAG_INDEX(&hdma_usart1_rx));
 803bc9c:	4b96      	ldr	r3, [pc, #600]	; (803bef8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bc9e:	681b      	ldr	r3, [r3, #0]
 803bca0:	461a      	mov	r2, r3
 803bca2:	4b96      	ldr	r3, [pc, #600]	; (803befc <SIMCOM_DMA_IrqHandler+0x274>)
 803bca4:	429a      	cmp	r2, r3
 803bca6:	d960      	bls.n	803bd6a <SIMCOM_DMA_IrqHandler+0xe2>
 803bca8:	4b93      	ldr	r3, [pc, #588]	; (803bef8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bcaa:	681b      	ldr	r3, [r3, #0]
 803bcac:	4a94      	ldr	r2, [pc, #592]	; (803bf00 <SIMCOM_DMA_IrqHandler+0x278>)
 803bcae:	4293      	cmp	r3, r2
 803bcb0:	d057      	beq.n	803bd62 <SIMCOM_DMA_IrqHandler+0xda>
 803bcb2:	4b91      	ldr	r3, [pc, #580]	; (803bef8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bcb4:	681b      	ldr	r3, [r3, #0]
 803bcb6:	4a93      	ldr	r2, [pc, #588]	; (803bf04 <SIMCOM_DMA_IrqHandler+0x27c>)
 803bcb8:	4293      	cmp	r3, r2
 803bcba:	d050      	beq.n	803bd5e <SIMCOM_DMA_IrqHandler+0xd6>
 803bcbc:	4b8e      	ldr	r3, [pc, #568]	; (803bef8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bcbe:	681b      	ldr	r3, [r3, #0]
 803bcc0:	4a91      	ldr	r2, [pc, #580]	; (803bf08 <SIMCOM_DMA_IrqHandler+0x280>)
 803bcc2:	4293      	cmp	r3, r2
 803bcc4:	d049      	beq.n	803bd5a <SIMCOM_DMA_IrqHandler+0xd2>
 803bcc6:	4b8c      	ldr	r3, [pc, #560]	; (803bef8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bcc8:	681b      	ldr	r3, [r3, #0]
 803bcca:	4a90      	ldr	r2, [pc, #576]	; (803bf0c <SIMCOM_DMA_IrqHandler+0x284>)
 803bccc:	4293      	cmp	r3, r2
 803bcce:	d042      	beq.n	803bd56 <SIMCOM_DMA_IrqHandler+0xce>
 803bcd0:	4b89      	ldr	r3, [pc, #548]	; (803bef8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bcd2:	681b      	ldr	r3, [r3, #0]
 803bcd4:	4a8e      	ldr	r2, [pc, #568]	; (803bf10 <SIMCOM_DMA_IrqHandler+0x288>)
 803bcd6:	4293      	cmp	r3, r2
 803bcd8:	d03a      	beq.n	803bd50 <SIMCOM_DMA_IrqHandler+0xc8>
 803bcda:	4b87      	ldr	r3, [pc, #540]	; (803bef8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bcdc:	681b      	ldr	r3, [r3, #0]
 803bcde:	4a8d      	ldr	r2, [pc, #564]	; (803bf14 <SIMCOM_DMA_IrqHandler+0x28c>)
 803bce0:	4293      	cmp	r3, r2
 803bce2:	d032      	beq.n	803bd4a <SIMCOM_DMA_IrqHandler+0xc2>
 803bce4:	4b84      	ldr	r3, [pc, #528]	; (803bef8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bce6:	681b      	ldr	r3, [r3, #0]
 803bce8:	4a8b      	ldr	r2, [pc, #556]	; (803bf18 <SIMCOM_DMA_IrqHandler+0x290>)
 803bcea:	4293      	cmp	r3, r2
 803bcec:	d02a      	beq.n	803bd44 <SIMCOM_DMA_IrqHandler+0xbc>
 803bcee:	4b82      	ldr	r3, [pc, #520]	; (803bef8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bcf0:	681b      	ldr	r3, [r3, #0]
 803bcf2:	4a8a      	ldr	r2, [pc, #552]	; (803bf1c <SIMCOM_DMA_IrqHandler+0x294>)
 803bcf4:	4293      	cmp	r3, r2
 803bcf6:	d022      	beq.n	803bd3e <SIMCOM_DMA_IrqHandler+0xb6>
 803bcf8:	4b7f      	ldr	r3, [pc, #508]	; (803bef8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bcfa:	681b      	ldr	r3, [r3, #0]
 803bcfc:	4a88      	ldr	r2, [pc, #544]	; (803bf20 <SIMCOM_DMA_IrqHandler+0x298>)
 803bcfe:	4293      	cmp	r3, r2
 803bd00:	d01a      	beq.n	803bd38 <SIMCOM_DMA_IrqHandler+0xb0>
 803bd02:	4b7d      	ldr	r3, [pc, #500]	; (803bef8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bd04:	681b      	ldr	r3, [r3, #0]
 803bd06:	4a87      	ldr	r2, [pc, #540]	; (803bf24 <SIMCOM_DMA_IrqHandler+0x29c>)
 803bd08:	4293      	cmp	r3, r2
 803bd0a:	d012      	beq.n	803bd32 <SIMCOM_DMA_IrqHandler+0xaa>
 803bd0c:	4b7a      	ldr	r3, [pc, #488]	; (803bef8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bd0e:	681b      	ldr	r3, [r3, #0]
 803bd10:	4a85      	ldr	r2, [pc, #532]	; (803bf28 <SIMCOM_DMA_IrqHandler+0x2a0>)
 803bd12:	4293      	cmp	r3, r2
 803bd14:	d00a      	beq.n	803bd2c <SIMCOM_DMA_IrqHandler+0xa4>
 803bd16:	4b78      	ldr	r3, [pc, #480]	; (803bef8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bd18:	681b      	ldr	r3, [r3, #0]
 803bd1a:	4a84      	ldr	r2, [pc, #528]	; (803bf2c <SIMCOM_DMA_IrqHandler+0x2a4>)
 803bd1c:	4293      	cmp	r3, r2
 803bd1e:	d102      	bne.n	803bd26 <SIMCOM_DMA_IrqHandler+0x9e>
 803bd20:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 803bd24:	e01e      	b.n	803bd64 <SIMCOM_DMA_IrqHandler+0xdc>
 803bd26:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 803bd2a:	e01b      	b.n	803bd64 <SIMCOM_DMA_IrqHandler+0xdc>
 803bd2c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 803bd30:	e018      	b.n	803bd64 <SIMCOM_DMA_IrqHandler+0xdc>
 803bd32:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 803bd36:	e015      	b.n	803bd64 <SIMCOM_DMA_IrqHandler+0xdc>
 803bd38:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 803bd3c:	e012      	b.n	803bd64 <SIMCOM_DMA_IrqHandler+0xdc>
 803bd3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803bd42:	e00f      	b.n	803bd64 <SIMCOM_DMA_IrqHandler+0xdc>
 803bd44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803bd48:	e00c      	b.n	803bd64 <SIMCOM_DMA_IrqHandler+0xdc>
 803bd4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803bd4e:	e009      	b.n	803bd64 <SIMCOM_DMA_IrqHandler+0xdc>
 803bd50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803bd54:	e006      	b.n	803bd64 <SIMCOM_DMA_IrqHandler+0xdc>
 803bd56:	2310      	movs	r3, #16
 803bd58:	e004      	b.n	803bd64 <SIMCOM_DMA_IrqHandler+0xdc>
 803bd5a:	2310      	movs	r3, #16
 803bd5c:	e002      	b.n	803bd64 <SIMCOM_DMA_IrqHandler+0xdc>
 803bd5e:	2310      	movs	r3, #16
 803bd60:	e000      	b.n	803bd64 <SIMCOM_DMA_IrqHandler+0xdc>
 803bd62:	2310      	movs	r3, #16
 803bd64:	4a72      	ldr	r2, [pc, #456]	; (803bf30 <SIMCOM_DMA_IrqHandler+0x2a8>)
 803bd66:	60d3      	str	r3, [r2, #12]
 803bd68:	e150      	b.n	803c00c <SIMCOM_DMA_IrqHandler+0x384>
 803bd6a:	4b63      	ldr	r3, [pc, #396]	; (803bef8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bd6c:	681b      	ldr	r3, [r3, #0]
 803bd6e:	461a      	mov	r2, r3
 803bd70:	4b70      	ldr	r3, [pc, #448]	; (803bf34 <SIMCOM_DMA_IrqHandler+0x2ac>)
 803bd72:	429a      	cmp	r2, r3
 803bd74:	d960      	bls.n	803be38 <SIMCOM_DMA_IrqHandler+0x1b0>
 803bd76:	4b60      	ldr	r3, [pc, #384]	; (803bef8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bd78:	681b      	ldr	r3, [r3, #0]
 803bd7a:	4a61      	ldr	r2, [pc, #388]	; (803bf00 <SIMCOM_DMA_IrqHandler+0x278>)
 803bd7c:	4293      	cmp	r3, r2
 803bd7e:	d057      	beq.n	803be30 <SIMCOM_DMA_IrqHandler+0x1a8>
 803bd80:	4b5d      	ldr	r3, [pc, #372]	; (803bef8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bd82:	681b      	ldr	r3, [r3, #0]
 803bd84:	4a5f      	ldr	r2, [pc, #380]	; (803bf04 <SIMCOM_DMA_IrqHandler+0x27c>)
 803bd86:	4293      	cmp	r3, r2
 803bd88:	d050      	beq.n	803be2c <SIMCOM_DMA_IrqHandler+0x1a4>
 803bd8a:	4b5b      	ldr	r3, [pc, #364]	; (803bef8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bd8c:	681b      	ldr	r3, [r3, #0]
 803bd8e:	4a5e      	ldr	r2, [pc, #376]	; (803bf08 <SIMCOM_DMA_IrqHandler+0x280>)
 803bd90:	4293      	cmp	r3, r2
 803bd92:	d049      	beq.n	803be28 <SIMCOM_DMA_IrqHandler+0x1a0>
 803bd94:	4b58      	ldr	r3, [pc, #352]	; (803bef8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bd96:	681b      	ldr	r3, [r3, #0]
 803bd98:	4a5c      	ldr	r2, [pc, #368]	; (803bf0c <SIMCOM_DMA_IrqHandler+0x284>)
 803bd9a:	4293      	cmp	r3, r2
 803bd9c:	d042      	beq.n	803be24 <SIMCOM_DMA_IrqHandler+0x19c>
 803bd9e:	4b56      	ldr	r3, [pc, #344]	; (803bef8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bda0:	681b      	ldr	r3, [r3, #0]
 803bda2:	4a5b      	ldr	r2, [pc, #364]	; (803bf10 <SIMCOM_DMA_IrqHandler+0x288>)
 803bda4:	4293      	cmp	r3, r2
 803bda6:	d03a      	beq.n	803be1e <SIMCOM_DMA_IrqHandler+0x196>
 803bda8:	4b53      	ldr	r3, [pc, #332]	; (803bef8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bdaa:	681b      	ldr	r3, [r3, #0]
 803bdac:	4a59      	ldr	r2, [pc, #356]	; (803bf14 <SIMCOM_DMA_IrqHandler+0x28c>)
 803bdae:	4293      	cmp	r3, r2
 803bdb0:	d032      	beq.n	803be18 <SIMCOM_DMA_IrqHandler+0x190>
 803bdb2:	4b51      	ldr	r3, [pc, #324]	; (803bef8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bdb4:	681b      	ldr	r3, [r3, #0]
 803bdb6:	4a58      	ldr	r2, [pc, #352]	; (803bf18 <SIMCOM_DMA_IrqHandler+0x290>)
 803bdb8:	4293      	cmp	r3, r2
 803bdba:	d02a      	beq.n	803be12 <SIMCOM_DMA_IrqHandler+0x18a>
 803bdbc:	4b4e      	ldr	r3, [pc, #312]	; (803bef8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bdbe:	681b      	ldr	r3, [r3, #0]
 803bdc0:	4a56      	ldr	r2, [pc, #344]	; (803bf1c <SIMCOM_DMA_IrqHandler+0x294>)
 803bdc2:	4293      	cmp	r3, r2
 803bdc4:	d022      	beq.n	803be0c <SIMCOM_DMA_IrqHandler+0x184>
 803bdc6:	4b4c      	ldr	r3, [pc, #304]	; (803bef8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bdc8:	681b      	ldr	r3, [r3, #0]
 803bdca:	4a55      	ldr	r2, [pc, #340]	; (803bf20 <SIMCOM_DMA_IrqHandler+0x298>)
 803bdcc:	4293      	cmp	r3, r2
 803bdce:	d01a      	beq.n	803be06 <SIMCOM_DMA_IrqHandler+0x17e>
 803bdd0:	4b49      	ldr	r3, [pc, #292]	; (803bef8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bdd2:	681b      	ldr	r3, [r3, #0]
 803bdd4:	4a53      	ldr	r2, [pc, #332]	; (803bf24 <SIMCOM_DMA_IrqHandler+0x29c>)
 803bdd6:	4293      	cmp	r3, r2
 803bdd8:	d012      	beq.n	803be00 <SIMCOM_DMA_IrqHandler+0x178>
 803bdda:	4b47      	ldr	r3, [pc, #284]	; (803bef8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bddc:	681b      	ldr	r3, [r3, #0]
 803bdde:	4a52      	ldr	r2, [pc, #328]	; (803bf28 <SIMCOM_DMA_IrqHandler+0x2a0>)
 803bde0:	4293      	cmp	r3, r2
 803bde2:	d00a      	beq.n	803bdfa <SIMCOM_DMA_IrqHandler+0x172>
 803bde4:	4b44      	ldr	r3, [pc, #272]	; (803bef8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bde6:	681b      	ldr	r3, [r3, #0]
 803bde8:	4a50      	ldr	r2, [pc, #320]	; (803bf2c <SIMCOM_DMA_IrqHandler+0x2a4>)
 803bdea:	4293      	cmp	r3, r2
 803bdec:	d102      	bne.n	803bdf4 <SIMCOM_DMA_IrqHandler+0x16c>
 803bdee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 803bdf2:	e01e      	b.n	803be32 <SIMCOM_DMA_IrqHandler+0x1aa>
 803bdf4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 803bdf8:	e01b      	b.n	803be32 <SIMCOM_DMA_IrqHandler+0x1aa>
 803bdfa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 803bdfe:	e018      	b.n	803be32 <SIMCOM_DMA_IrqHandler+0x1aa>
 803be00:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 803be04:	e015      	b.n	803be32 <SIMCOM_DMA_IrqHandler+0x1aa>
 803be06:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 803be0a:	e012      	b.n	803be32 <SIMCOM_DMA_IrqHandler+0x1aa>
 803be0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803be10:	e00f      	b.n	803be32 <SIMCOM_DMA_IrqHandler+0x1aa>
 803be12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803be16:	e00c      	b.n	803be32 <SIMCOM_DMA_IrqHandler+0x1aa>
 803be18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803be1c:	e009      	b.n	803be32 <SIMCOM_DMA_IrqHandler+0x1aa>
 803be1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803be22:	e006      	b.n	803be32 <SIMCOM_DMA_IrqHandler+0x1aa>
 803be24:	2310      	movs	r3, #16
 803be26:	e004      	b.n	803be32 <SIMCOM_DMA_IrqHandler+0x1aa>
 803be28:	2310      	movs	r3, #16
 803be2a:	e002      	b.n	803be32 <SIMCOM_DMA_IrqHandler+0x1aa>
 803be2c:	2310      	movs	r3, #16
 803be2e:	e000      	b.n	803be32 <SIMCOM_DMA_IrqHandler+0x1aa>
 803be30:	2310      	movs	r3, #16
 803be32:	4a3f      	ldr	r2, [pc, #252]	; (803bf30 <SIMCOM_DMA_IrqHandler+0x2a8>)
 803be34:	6093      	str	r3, [r2, #8]
 803be36:	e0e9      	b.n	803c00c <SIMCOM_DMA_IrqHandler+0x384>
 803be38:	4b2f      	ldr	r3, [pc, #188]	; (803bef8 <SIMCOM_DMA_IrqHandler+0x270>)
 803be3a:	681b      	ldr	r3, [r3, #0]
 803be3c:	461a      	mov	r2, r3
 803be3e:	4b3e      	ldr	r3, [pc, #248]	; (803bf38 <SIMCOM_DMA_IrqHandler+0x2b0>)
 803be40:	429a      	cmp	r2, r3
 803be42:	f240 8083 	bls.w	803bf4c <SIMCOM_DMA_IrqHandler+0x2c4>
 803be46:	4b2c      	ldr	r3, [pc, #176]	; (803bef8 <SIMCOM_DMA_IrqHandler+0x270>)
 803be48:	681b      	ldr	r3, [r3, #0]
 803be4a:	4a2d      	ldr	r2, [pc, #180]	; (803bf00 <SIMCOM_DMA_IrqHandler+0x278>)
 803be4c:	4293      	cmp	r3, r2
 803be4e:	d079      	beq.n	803bf44 <SIMCOM_DMA_IrqHandler+0x2bc>
 803be50:	4b29      	ldr	r3, [pc, #164]	; (803bef8 <SIMCOM_DMA_IrqHandler+0x270>)
 803be52:	681b      	ldr	r3, [r3, #0]
 803be54:	4a2b      	ldr	r2, [pc, #172]	; (803bf04 <SIMCOM_DMA_IrqHandler+0x27c>)
 803be56:	4293      	cmp	r3, r2
 803be58:	d072      	beq.n	803bf40 <SIMCOM_DMA_IrqHandler+0x2b8>
 803be5a:	4b27      	ldr	r3, [pc, #156]	; (803bef8 <SIMCOM_DMA_IrqHandler+0x270>)
 803be5c:	681b      	ldr	r3, [r3, #0]
 803be5e:	4a2a      	ldr	r2, [pc, #168]	; (803bf08 <SIMCOM_DMA_IrqHandler+0x280>)
 803be60:	4293      	cmp	r3, r2
 803be62:	d06b      	beq.n	803bf3c <SIMCOM_DMA_IrqHandler+0x2b4>
 803be64:	4b24      	ldr	r3, [pc, #144]	; (803bef8 <SIMCOM_DMA_IrqHandler+0x270>)
 803be66:	681b      	ldr	r3, [r3, #0]
 803be68:	4a28      	ldr	r2, [pc, #160]	; (803bf0c <SIMCOM_DMA_IrqHandler+0x284>)
 803be6a:	4293      	cmp	r3, r2
 803be6c:	d042      	beq.n	803bef4 <SIMCOM_DMA_IrqHandler+0x26c>
 803be6e:	4b22      	ldr	r3, [pc, #136]	; (803bef8 <SIMCOM_DMA_IrqHandler+0x270>)
 803be70:	681b      	ldr	r3, [r3, #0]
 803be72:	4a27      	ldr	r2, [pc, #156]	; (803bf10 <SIMCOM_DMA_IrqHandler+0x288>)
 803be74:	4293      	cmp	r3, r2
 803be76:	d03a      	beq.n	803beee <SIMCOM_DMA_IrqHandler+0x266>
 803be78:	4b1f      	ldr	r3, [pc, #124]	; (803bef8 <SIMCOM_DMA_IrqHandler+0x270>)
 803be7a:	681b      	ldr	r3, [r3, #0]
 803be7c:	4a25      	ldr	r2, [pc, #148]	; (803bf14 <SIMCOM_DMA_IrqHandler+0x28c>)
 803be7e:	4293      	cmp	r3, r2
 803be80:	d032      	beq.n	803bee8 <SIMCOM_DMA_IrqHandler+0x260>
 803be82:	4b1d      	ldr	r3, [pc, #116]	; (803bef8 <SIMCOM_DMA_IrqHandler+0x270>)
 803be84:	681b      	ldr	r3, [r3, #0]
 803be86:	4a24      	ldr	r2, [pc, #144]	; (803bf18 <SIMCOM_DMA_IrqHandler+0x290>)
 803be88:	4293      	cmp	r3, r2
 803be8a:	d02a      	beq.n	803bee2 <SIMCOM_DMA_IrqHandler+0x25a>
 803be8c:	4b1a      	ldr	r3, [pc, #104]	; (803bef8 <SIMCOM_DMA_IrqHandler+0x270>)
 803be8e:	681b      	ldr	r3, [r3, #0]
 803be90:	4a22      	ldr	r2, [pc, #136]	; (803bf1c <SIMCOM_DMA_IrqHandler+0x294>)
 803be92:	4293      	cmp	r3, r2
 803be94:	d022      	beq.n	803bedc <SIMCOM_DMA_IrqHandler+0x254>
 803be96:	4b18      	ldr	r3, [pc, #96]	; (803bef8 <SIMCOM_DMA_IrqHandler+0x270>)
 803be98:	681b      	ldr	r3, [r3, #0]
 803be9a:	4a21      	ldr	r2, [pc, #132]	; (803bf20 <SIMCOM_DMA_IrqHandler+0x298>)
 803be9c:	4293      	cmp	r3, r2
 803be9e:	d01a      	beq.n	803bed6 <SIMCOM_DMA_IrqHandler+0x24e>
 803bea0:	4b15      	ldr	r3, [pc, #84]	; (803bef8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bea2:	681b      	ldr	r3, [r3, #0]
 803bea4:	4a1f      	ldr	r2, [pc, #124]	; (803bf24 <SIMCOM_DMA_IrqHandler+0x29c>)
 803bea6:	4293      	cmp	r3, r2
 803bea8:	d012      	beq.n	803bed0 <SIMCOM_DMA_IrqHandler+0x248>
 803beaa:	4b13      	ldr	r3, [pc, #76]	; (803bef8 <SIMCOM_DMA_IrqHandler+0x270>)
 803beac:	681b      	ldr	r3, [r3, #0]
 803beae:	4a1e      	ldr	r2, [pc, #120]	; (803bf28 <SIMCOM_DMA_IrqHandler+0x2a0>)
 803beb0:	4293      	cmp	r3, r2
 803beb2:	d00a      	beq.n	803beca <SIMCOM_DMA_IrqHandler+0x242>
 803beb4:	4b10      	ldr	r3, [pc, #64]	; (803bef8 <SIMCOM_DMA_IrqHandler+0x270>)
 803beb6:	681b      	ldr	r3, [r3, #0]
 803beb8:	4a1c      	ldr	r2, [pc, #112]	; (803bf2c <SIMCOM_DMA_IrqHandler+0x2a4>)
 803beba:	4293      	cmp	r3, r2
 803bebc:	d102      	bne.n	803bec4 <SIMCOM_DMA_IrqHandler+0x23c>
 803bebe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 803bec2:	e040      	b.n	803bf46 <SIMCOM_DMA_IrqHandler+0x2be>
 803bec4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 803bec8:	e03d      	b.n	803bf46 <SIMCOM_DMA_IrqHandler+0x2be>
 803beca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 803bece:	e03a      	b.n	803bf46 <SIMCOM_DMA_IrqHandler+0x2be>
 803bed0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 803bed4:	e037      	b.n	803bf46 <SIMCOM_DMA_IrqHandler+0x2be>
 803bed6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 803beda:	e034      	b.n	803bf46 <SIMCOM_DMA_IrqHandler+0x2be>
 803bedc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803bee0:	e031      	b.n	803bf46 <SIMCOM_DMA_IrqHandler+0x2be>
 803bee2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803bee6:	e02e      	b.n	803bf46 <SIMCOM_DMA_IrqHandler+0x2be>
 803bee8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803beec:	e02b      	b.n	803bf46 <SIMCOM_DMA_IrqHandler+0x2be>
 803beee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803bef2:	e028      	b.n	803bf46 <SIMCOM_DMA_IrqHandler+0x2be>
 803bef4:	2310      	movs	r3, #16
 803bef6:	e026      	b.n	803bf46 <SIMCOM_DMA_IrqHandler+0x2be>
 803bef8:	20008748 	.word	0x20008748
 803befc:	40026458 	.word	0x40026458
 803bf00:	40026010 	.word	0x40026010
 803bf04:	40026410 	.word	0x40026410
 803bf08:	40026070 	.word	0x40026070
 803bf0c:	40026470 	.word	0x40026470
 803bf10:	40026028 	.word	0x40026028
 803bf14:	40026428 	.word	0x40026428
 803bf18:	40026088 	.word	0x40026088
 803bf1c:	40026488 	.word	0x40026488
 803bf20:	40026040 	.word	0x40026040
 803bf24:	40026440 	.word	0x40026440
 803bf28:	400260a0 	.word	0x400260a0
 803bf2c:	400264a0 	.word	0x400264a0
 803bf30:	40026400 	.word	0x40026400
 803bf34:	400260b8 	.word	0x400260b8
 803bf38:	40026058 	.word	0x40026058
 803bf3c:	2310      	movs	r3, #16
 803bf3e:	e002      	b.n	803bf46 <SIMCOM_DMA_IrqHandler+0x2be>
 803bf40:	2310      	movs	r3, #16
 803bf42:	e000      	b.n	803bf46 <SIMCOM_DMA_IrqHandler+0x2be>
 803bf44:	2310      	movs	r3, #16
 803bf46:	4a9b      	ldr	r2, [pc, #620]	; (803c1b4 <SIMCOM_DMA_IrqHandler+0x52c>)
 803bf48:	60d3      	str	r3, [r2, #12]
 803bf4a:	e05f      	b.n	803c00c <SIMCOM_DMA_IrqHandler+0x384>
 803bf4c:	4b9a      	ldr	r3, [pc, #616]	; (803c1b8 <SIMCOM_DMA_IrqHandler+0x530>)
 803bf4e:	681b      	ldr	r3, [r3, #0]
 803bf50:	4a9a      	ldr	r2, [pc, #616]	; (803c1bc <SIMCOM_DMA_IrqHandler+0x534>)
 803bf52:	4293      	cmp	r3, r2
 803bf54:	d057      	beq.n	803c006 <SIMCOM_DMA_IrqHandler+0x37e>
 803bf56:	4b98      	ldr	r3, [pc, #608]	; (803c1b8 <SIMCOM_DMA_IrqHandler+0x530>)
 803bf58:	681b      	ldr	r3, [r3, #0]
 803bf5a:	4a99      	ldr	r2, [pc, #612]	; (803c1c0 <SIMCOM_DMA_IrqHandler+0x538>)
 803bf5c:	4293      	cmp	r3, r2
 803bf5e:	d050      	beq.n	803c002 <SIMCOM_DMA_IrqHandler+0x37a>
 803bf60:	4b95      	ldr	r3, [pc, #596]	; (803c1b8 <SIMCOM_DMA_IrqHandler+0x530>)
 803bf62:	681b      	ldr	r3, [r3, #0]
 803bf64:	4a97      	ldr	r2, [pc, #604]	; (803c1c4 <SIMCOM_DMA_IrqHandler+0x53c>)
 803bf66:	4293      	cmp	r3, r2
 803bf68:	d049      	beq.n	803bffe <SIMCOM_DMA_IrqHandler+0x376>
 803bf6a:	4b93      	ldr	r3, [pc, #588]	; (803c1b8 <SIMCOM_DMA_IrqHandler+0x530>)
 803bf6c:	681b      	ldr	r3, [r3, #0]
 803bf6e:	4a96      	ldr	r2, [pc, #600]	; (803c1c8 <SIMCOM_DMA_IrqHandler+0x540>)
 803bf70:	4293      	cmp	r3, r2
 803bf72:	d042      	beq.n	803bffa <SIMCOM_DMA_IrqHandler+0x372>
 803bf74:	4b90      	ldr	r3, [pc, #576]	; (803c1b8 <SIMCOM_DMA_IrqHandler+0x530>)
 803bf76:	681b      	ldr	r3, [r3, #0]
 803bf78:	4a94      	ldr	r2, [pc, #592]	; (803c1cc <SIMCOM_DMA_IrqHandler+0x544>)
 803bf7a:	4293      	cmp	r3, r2
 803bf7c:	d03a      	beq.n	803bff4 <SIMCOM_DMA_IrqHandler+0x36c>
 803bf7e:	4b8e      	ldr	r3, [pc, #568]	; (803c1b8 <SIMCOM_DMA_IrqHandler+0x530>)
 803bf80:	681b      	ldr	r3, [r3, #0]
 803bf82:	4a93      	ldr	r2, [pc, #588]	; (803c1d0 <SIMCOM_DMA_IrqHandler+0x548>)
 803bf84:	4293      	cmp	r3, r2
 803bf86:	d032      	beq.n	803bfee <SIMCOM_DMA_IrqHandler+0x366>
 803bf88:	4b8b      	ldr	r3, [pc, #556]	; (803c1b8 <SIMCOM_DMA_IrqHandler+0x530>)
 803bf8a:	681b      	ldr	r3, [r3, #0]
 803bf8c:	4a91      	ldr	r2, [pc, #580]	; (803c1d4 <SIMCOM_DMA_IrqHandler+0x54c>)
 803bf8e:	4293      	cmp	r3, r2
 803bf90:	d02a      	beq.n	803bfe8 <SIMCOM_DMA_IrqHandler+0x360>
 803bf92:	4b89      	ldr	r3, [pc, #548]	; (803c1b8 <SIMCOM_DMA_IrqHandler+0x530>)
 803bf94:	681b      	ldr	r3, [r3, #0]
 803bf96:	4a90      	ldr	r2, [pc, #576]	; (803c1d8 <SIMCOM_DMA_IrqHandler+0x550>)
 803bf98:	4293      	cmp	r3, r2
 803bf9a:	d022      	beq.n	803bfe2 <SIMCOM_DMA_IrqHandler+0x35a>
 803bf9c:	4b86      	ldr	r3, [pc, #536]	; (803c1b8 <SIMCOM_DMA_IrqHandler+0x530>)
 803bf9e:	681b      	ldr	r3, [r3, #0]
 803bfa0:	4a8e      	ldr	r2, [pc, #568]	; (803c1dc <SIMCOM_DMA_IrqHandler+0x554>)
 803bfa2:	4293      	cmp	r3, r2
 803bfa4:	d01a      	beq.n	803bfdc <SIMCOM_DMA_IrqHandler+0x354>
 803bfa6:	4b84      	ldr	r3, [pc, #528]	; (803c1b8 <SIMCOM_DMA_IrqHandler+0x530>)
 803bfa8:	681b      	ldr	r3, [r3, #0]
 803bfaa:	4a8d      	ldr	r2, [pc, #564]	; (803c1e0 <SIMCOM_DMA_IrqHandler+0x558>)
 803bfac:	4293      	cmp	r3, r2
 803bfae:	d012      	beq.n	803bfd6 <SIMCOM_DMA_IrqHandler+0x34e>
 803bfb0:	4b81      	ldr	r3, [pc, #516]	; (803c1b8 <SIMCOM_DMA_IrqHandler+0x530>)
 803bfb2:	681b      	ldr	r3, [r3, #0]
 803bfb4:	4a8b      	ldr	r2, [pc, #556]	; (803c1e4 <SIMCOM_DMA_IrqHandler+0x55c>)
 803bfb6:	4293      	cmp	r3, r2
 803bfb8:	d00a      	beq.n	803bfd0 <SIMCOM_DMA_IrqHandler+0x348>
 803bfba:	4b7f      	ldr	r3, [pc, #508]	; (803c1b8 <SIMCOM_DMA_IrqHandler+0x530>)
 803bfbc:	681b      	ldr	r3, [r3, #0]
 803bfbe:	4a8a      	ldr	r2, [pc, #552]	; (803c1e8 <SIMCOM_DMA_IrqHandler+0x560>)
 803bfc0:	4293      	cmp	r3, r2
 803bfc2:	d102      	bne.n	803bfca <SIMCOM_DMA_IrqHandler+0x342>
 803bfc4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 803bfc8:	e01e      	b.n	803c008 <SIMCOM_DMA_IrqHandler+0x380>
 803bfca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 803bfce:	e01b      	b.n	803c008 <SIMCOM_DMA_IrqHandler+0x380>
 803bfd0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 803bfd4:	e018      	b.n	803c008 <SIMCOM_DMA_IrqHandler+0x380>
 803bfd6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 803bfda:	e015      	b.n	803c008 <SIMCOM_DMA_IrqHandler+0x380>
 803bfdc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 803bfe0:	e012      	b.n	803c008 <SIMCOM_DMA_IrqHandler+0x380>
 803bfe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803bfe6:	e00f      	b.n	803c008 <SIMCOM_DMA_IrqHandler+0x380>
 803bfe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803bfec:	e00c      	b.n	803c008 <SIMCOM_DMA_IrqHandler+0x380>
 803bfee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803bff2:	e009      	b.n	803c008 <SIMCOM_DMA_IrqHandler+0x380>
 803bff4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803bff8:	e006      	b.n	803c008 <SIMCOM_DMA_IrqHandler+0x380>
 803bffa:	2310      	movs	r3, #16
 803bffc:	e004      	b.n	803c008 <SIMCOM_DMA_IrqHandler+0x380>
 803bffe:	2310      	movs	r3, #16
 803c000:	e002      	b.n	803c008 <SIMCOM_DMA_IrqHandler+0x380>
 803c002:	2310      	movs	r3, #16
 803c004:	e000      	b.n	803c008 <SIMCOM_DMA_IrqHandler+0x380>
 803c006:	2310      	movs	r3, #16
 803c008:	4a6a      	ldr	r2, [pc, #424]	; (803c1b4 <SIMCOM_DMA_IrqHandler+0x52c>)
 803c00a:	6093      	str	r3, [r2, #8]

        SIMCOM_Check_Buffer();
 803c00c:	f000 ff58 	bl	803cec0 <SIMCOM_Check_Buffer>
        __HAL_DMA_CLEAR_FLAG(&hdma_usart1_rx, __HAL_DMA_GET_DME_FLAG_INDEX(&hdma_usart1_rx));

        /* Start DMA transfer */
        HAL_UART_Receive_DMA(&huart1, (uint8_t*) SIMCOM_DMA_RX, SIMCOM_DMA_RX_SZ);
    }
}
 803c010:	f000 bf0a 	b.w	803ce28 <SIMCOM_DMA_IrqHandler+0x11a0>
    else if (__HAL_DMA_GET_IT_SOURCE(&hdma_usart1_rx, DMA_IT_TC)) {
 803c014:	4b68      	ldr	r3, [pc, #416]	; (803c1b8 <SIMCOM_DMA_IrqHandler+0x530>)
 803c016:	681b      	ldr	r3, [r3, #0]
 803c018:	681b      	ldr	r3, [r3, #0]
 803c01a:	f003 0310 	and.w	r3, r3, #16
 803c01e:	2b00      	cmp	r3, #0
 803c020:	f000 81bd 	beq.w	803c39e <SIMCOM_DMA_IrqHandler+0x716>
        __HAL_DMA_CLEAR_FLAG(&hdma_usart1_rx, __HAL_DMA_GET_TC_FLAG_INDEX(&hdma_usart1_rx));
 803c024:	4b64      	ldr	r3, [pc, #400]	; (803c1b8 <SIMCOM_DMA_IrqHandler+0x530>)
 803c026:	681b      	ldr	r3, [r3, #0]
 803c028:	461a      	mov	r2, r3
 803c02a:	4b70      	ldr	r3, [pc, #448]	; (803c1ec <SIMCOM_DMA_IrqHandler+0x564>)
 803c02c:	429a      	cmp	r2, r3
 803c02e:	d960      	bls.n	803c0f2 <SIMCOM_DMA_IrqHandler+0x46a>
 803c030:	4b61      	ldr	r3, [pc, #388]	; (803c1b8 <SIMCOM_DMA_IrqHandler+0x530>)
 803c032:	681b      	ldr	r3, [r3, #0]
 803c034:	4a61      	ldr	r2, [pc, #388]	; (803c1bc <SIMCOM_DMA_IrqHandler+0x534>)
 803c036:	4293      	cmp	r3, r2
 803c038:	d057      	beq.n	803c0ea <SIMCOM_DMA_IrqHandler+0x462>
 803c03a:	4b5f      	ldr	r3, [pc, #380]	; (803c1b8 <SIMCOM_DMA_IrqHandler+0x530>)
 803c03c:	681b      	ldr	r3, [r3, #0]
 803c03e:	4a60      	ldr	r2, [pc, #384]	; (803c1c0 <SIMCOM_DMA_IrqHandler+0x538>)
 803c040:	4293      	cmp	r3, r2
 803c042:	d050      	beq.n	803c0e6 <SIMCOM_DMA_IrqHandler+0x45e>
 803c044:	4b5c      	ldr	r3, [pc, #368]	; (803c1b8 <SIMCOM_DMA_IrqHandler+0x530>)
 803c046:	681b      	ldr	r3, [r3, #0]
 803c048:	4a5e      	ldr	r2, [pc, #376]	; (803c1c4 <SIMCOM_DMA_IrqHandler+0x53c>)
 803c04a:	4293      	cmp	r3, r2
 803c04c:	d049      	beq.n	803c0e2 <SIMCOM_DMA_IrqHandler+0x45a>
 803c04e:	4b5a      	ldr	r3, [pc, #360]	; (803c1b8 <SIMCOM_DMA_IrqHandler+0x530>)
 803c050:	681b      	ldr	r3, [r3, #0]
 803c052:	4a5d      	ldr	r2, [pc, #372]	; (803c1c8 <SIMCOM_DMA_IrqHandler+0x540>)
 803c054:	4293      	cmp	r3, r2
 803c056:	d042      	beq.n	803c0de <SIMCOM_DMA_IrqHandler+0x456>
 803c058:	4b57      	ldr	r3, [pc, #348]	; (803c1b8 <SIMCOM_DMA_IrqHandler+0x530>)
 803c05a:	681b      	ldr	r3, [r3, #0]
 803c05c:	4a5b      	ldr	r2, [pc, #364]	; (803c1cc <SIMCOM_DMA_IrqHandler+0x544>)
 803c05e:	4293      	cmp	r3, r2
 803c060:	d03a      	beq.n	803c0d8 <SIMCOM_DMA_IrqHandler+0x450>
 803c062:	4b55      	ldr	r3, [pc, #340]	; (803c1b8 <SIMCOM_DMA_IrqHandler+0x530>)
 803c064:	681b      	ldr	r3, [r3, #0]
 803c066:	4a5a      	ldr	r2, [pc, #360]	; (803c1d0 <SIMCOM_DMA_IrqHandler+0x548>)
 803c068:	4293      	cmp	r3, r2
 803c06a:	d032      	beq.n	803c0d2 <SIMCOM_DMA_IrqHandler+0x44a>
 803c06c:	4b52      	ldr	r3, [pc, #328]	; (803c1b8 <SIMCOM_DMA_IrqHandler+0x530>)
 803c06e:	681b      	ldr	r3, [r3, #0]
 803c070:	4a58      	ldr	r2, [pc, #352]	; (803c1d4 <SIMCOM_DMA_IrqHandler+0x54c>)
 803c072:	4293      	cmp	r3, r2
 803c074:	d02a      	beq.n	803c0cc <SIMCOM_DMA_IrqHandler+0x444>
 803c076:	4b50      	ldr	r3, [pc, #320]	; (803c1b8 <SIMCOM_DMA_IrqHandler+0x530>)
 803c078:	681b      	ldr	r3, [r3, #0]
 803c07a:	4a57      	ldr	r2, [pc, #348]	; (803c1d8 <SIMCOM_DMA_IrqHandler+0x550>)
 803c07c:	4293      	cmp	r3, r2
 803c07e:	d022      	beq.n	803c0c6 <SIMCOM_DMA_IrqHandler+0x43e>
 803c080:	4b4d      	ldr	r3, [pc, #308]	; (803c1b8 <SIMCOM_DMA_IrqHandler+0x530>)
 803c082:	681b      	ldr	r3, [r3, #0]
 803c084:	4a55      	ldr	r2, [pc, #340]	; (803c1dc <SIMCOM_DMA_IrqHandler+0x554>)
 803c086:	4293      	cmp	r3, r2
 803c088:	d01a      	beq.n	803c0c0 <SIMCOM_DMA_IrqHandler+0x438>
 803c08a:	4b4b      	ldr	r3, [pc, #300]	; (803c1b8 <SIMCOM_DMA_IrqHandler+0x530>)
 803c08c:	681b      	ldr	r3, [r3, #0]
 803c08e:	4a54      	ldr	r2, [pc, #336]	; (803c1e0 <SIMCOM_DMA_IrqHandler+0x558>)
 803c090:	4293      	cmp	r3, r2
 803c092:	d012      	beq.n	803c0ba <SIMCOM_DMA_IrqHandler+0x432>
 803c094:	4b48      	ldr	r3, [pc, #288]	; (803c1b8 <SIMCOM_DMA_IrqHandler+0x530>)
 803c096:	681b      	ldr	r3, [r3, #0]
 803c098:	4a52      	ldr	r2, [pc, #328]	; (803c1e4 <SIMCOM_DMA_IrqHandler+0x55c>)
 803c09a:	4293      	cmp	r3, r2
 803c09c:	d00a      	beq.n	803c0b4 <SIMCOM_DMA_IrqHandler+0x42c>
 803c09e:	4b46      	ldr	r3, [pc, #280]	; (803c1b8 <SIMCOM_DMA_IrqHandler+0x530>)
 803c0a0:	681b      	ldr	r3, [r3, #0]
 803c0a2:	4a51      	ldr	r2, [pc, #324]	; (803c1e8 <SIMCOM_DMA_IrqHandler+0x560>)
 803c0a4:	4293      	cmp	r3, r2
 803c0a6:	d102      	bne.n	803c0ae <SIMCOM_DMA_IrqHandler+0x426>
 803c0a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 803c0ac:	e01e      	b.n	803c0ec <SIMCOM_DMA_IrqHandler+0x464>
 803c0ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 803c0b2:	e01b      	b.n	803c0ec <SIMCOM_DMA_IrqHandler+0x464>
 803c0b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 803c0b8:	e018      	b.n	803c0ec <SIMCOM_DMA_IrqHandler+0x464>
 803c0ba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 803c0be:	e015      	b.n	803c0ec <SIMCOM_DMA_IrqHandler+0x464>
 803c0c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 803c0c4:	e012      	b.n	803c0ec <SIMCOM_DMA_IrqHandler+0x464>
 803c0c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 803c0ca:	e00f      	b.n	803c0ec <SIMCOM_DMA_IrqHandler+0x464>
 803c0cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 803c0d0:	e00c      	b.n	803c0ec <SIMCOM_DMA_IrqHandler+0x464>
 803c0d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 803c0d6:	e009      	b.n	803c0ec <SIMCOM_DMA_IrqHandler+0x464>
 803c0d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 803c0dc:	e006      	b.n	803c0ec <SIMCOM_DMA_IrqHandler+0x464>
 803c0de:	2320      	movs	r3, #32
 803c0e0:	e004      	b.n	803c0ec <SIMCOM_DMA_IrqHandler+0x464>
 803c0e2:	2320      	movs	r3, #32
 803c0e4:	e002      	b.n	803c0ec <SIMCOM_DMA_IrqHandler+0x464>
 803c0e6:	2320      	movs	r3, #32
 803c0e8:	e000      	b.n	803c0ec <SIMCOM_DMA_IrqHandler+0x464>
 803c0ea:	2320      	movs	r3, #32
 803c0ec:	4a40      	ldr	r2, [pc, #256]	; (803c1f0 <SIMCOM_DMA_IrqHandler+0x568>)
 803c0ee:	60d3      	str	r3, [r2, #12]
 803c0f0:	e151      	b.n	803c396 <SIMCOM_DMA_IrqHandler+0x70e>
 803c0f2:	4b31      	ldr	r3, [pc, #196]	; (803c1b8 <SIMCOM_DMA_IrqHandler+0x530>)
 803c0f4:	681b      	ldr	r3, [r3, #0]
 803c0f6:	461a      	mov	r2, r3
 803c0f8:	4b3e      	ldr	r3, [pc, #248]	; (803c1f4 <SIMCOM_DMA_IrqHandler+0x56c>)
 803c0fa:	429a      	cmp	r2, r3
 803c0fc:	f240 8084 	bls.w	803c208 <SIMCOM_DMA_IrqHandler+0x580>
 803c100:	4b2d      	ldr	r3, [pc, #180]	; (803c1b8 <SIMCOM_DMA_IrqHandler+0x530>)
 803c102:	681b      	ldr	r3, [r3, #0]
 803c104:	4a2d      	ldr	r2, [pc, #180]	; (803c1bc <SIMCOM_DMA_IrqHandler+0x534>)
 803c106:	4293      	cmp	r3, r2
 803c108:	d07a      	beq.n	803c200 <SIMCOM_DMA_IrqHandler+0x578>
 803c10a:	4b2b      	ldr	r3, [pc, #172]	; (803c1b8 <SIMCOM_DMA_IrqHandler+0x530>)
 803c10c:	681b      	ldr	r3, [r3, #0]
 803c10e:	4a2c      	ldr	r2, [pc, #176]	; (803c1c0 <SIMCOM_DMA_IrqHandler+0x538>)
 803c110:	4293      	cmp	r3, r2
 803c112:	d073      	beq.n	803c1fc <SIMCOM_DMA_IrqHandler+0x574>
 803c114:	4b28      	ldr	r3, [pc, #160]	; (803c1b8 <SIMCOM_DMA_IrqHandler+0x530>)
 803c116:	681b      	ldr	r3, [r3, #0]
 803c118:	4a2a      	ldr	r2, [pc, #168]	; (803c1c4 <SIMCOM_DMA_IrqHandler+0x53c>)
 803c11a:	4293      	cmp	r3, r2
 803c11c:	d06c      	beq.n	803c1f8 <SIMCOM_DMA_IrqHandler+0x570>
 803c11e:	4b26      	ldr	r3, [pc, #152]	; (803c1b8 <SIMCOM_DMA_IrqHandler+0x530>)
 803c120:	681b      	ldr	r3, [r3, #0]
 803c122:	4a29      	ldr	r2, [pc, #164]	; (803c1c8 <SIMCOM_DMA_IrqHandler+0x540>)
 803c124:	4293      	cmp	r3, r2
 803c126:	d042      	beq.n	803c1ae <SIMCOM_DMA_IrqHandler+0x526>
 803c128:	4b23      	ldr	r3, [pc, #140]	; (803c1b8 <SIMCOM_DMA_IrqHandler+0x530>)
 803c12a:	681b      	ldr	r3, [r3, #0]
 803c12c:	4a27      	ldr	r2, [pc, #156]	; (803c1cc <SIMCOM_DMA_IrqHandler+0x544>)
 803c12e:	4293      	cmp	r3, r2
 803c130:	d03a      	beq.n	803c1a8 <SIMCOM_DMA_IrqHandler+0x520>
 803c132:	4b21      	ldr	r3, [pc, #132]	; (803c1b8 <SIMCOM_DMA_IrqHandler+0x530>)
 803c134:	681b      	ldr	r3, [r3, #0]
 803c136:	4a26      	ldr	r2, [pc, #152]	; (803c1d0 <SIMCOM_DMA_IrqHandler+0x548>)
 803c138:	4293      	cmp	r3, r2
 803c13a:	d032      	beq.n	803c1a2 <SIMCOM_DMA_IrqHandler+0x51a>
 803c13c:	4b1e      	ldr	r3, [pc, #120]	; (803c1b8 <SIMCOM_DMA_IrqHandler+0x530>)
 803c13e:	681b      	ldr	r3, [r3, #0]
 803c140:	4a24      	ldr	r2, [pc, #144]	; (803c1d4 <SIMCOM_DMA_IrqHandler+0x54c>)
 803c142:	4293      	cmp	r3, r2
 803c144:	d02a      	beq.n	803c19c <SIMCOM_DMA_IrqHandler+0x514>
 803c146:	4b1c      	ldr	r3, [pc, #112]	; (803c1b8 <SIMCOM_DMA_IrqHandler+0x530>)
 803c148:	681b      	ldr	r3, [r3, #0]
 803c14a:	4a23      	ldr	r2, [pc, #140]	; (803c1d8 <SIMCOM_DMA_IrqHandler+0x550>)
 803c14c:	4293      	cmp	r3, r2
 803c14e:	d022      	beq.n	803c196 <SIMCOM_DMA_IrqHandler+0x50e>
 803c150:	4b19      	ldr	r3, [pc, #100]	; (803c1b8 <SIMCOM_DMA_IrqHandler+0x530>)
 803c152:	681b      	ldr	r3, [r3, #0]
 803c154:	4a21      	ldr	r2, [pc, #132]	; (803c1dc <SIMCOM_DMA_IrqHandler+0x554>)
 803c156:	4293      	cmp	r3, r2
 803c158:	d01a      	beq.n	803c190 <SIMCOM_DMA_IrqHandler+0x508>
 803c15a:	4b17      	ldr	r3, [pc, #92]	; (803c1b8 <SIMCOM_DMA_IrqHandler+0x530>)
 803c15c:	681b      	ldr	r3, [r3, #0]
 803c15e:	4a20      	ldr	r2, [pc, #128]	; (803c1e0 <SIMCOM_DMA_IrqHandler+0x558>)
 803c160:	4293      	cmp	r3, r2
 803c162:	d012      	beq.n	803c18a <SIMCOM_DMA_IrqHandler+0x502>
 803c164:	4b14      	ldr	r3, [pc, #80]	; (803c1b8 <SIMCOM_DMA_IrqHandler+0x530>)
 803c166:	681b      	ldr	r3, [r3, #0]
 803c168:	4a1e      	ldr	r2, [pc, #120]	; (803c1e4 <SIMCOM_DMA_IrqHandler+0x55c>)
 803c16a:	4293      	cmp	r3, r2
 803c16c:	d00a      	beq.n	803c184 <SIMCOM_DMA_IrqHandler+0x4fc>
 803c16e:	4b12      	ldr	r3, [pc, #72]	; (803c1b8 <SIMCOM_DMA_IrqHandler+0x530>)
 803c170:	681b      	ldr	r3, [r3, #0]
 803c172:	4a1d      	ldr	r2, [pc, #116]	; (803c1e8 <SIMCOM_DMA_IrqHandler+0x560>)
 803c174:	4293      	cmp	r3, r2
 803c176:	d102      	bne.n	803c17e <SIMCOM_DMA_IrqHandler+0x4f6>
 803c178:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 803c17c:	e041      	b.n	803c202 <SIMCOM_DMA_IrqHandler+0x57a>
 803c17e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 803c182:	e03e      	b.n	803c202 <SIMCOM_DMA_IrqHandler+0x57a>
 803c184:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 803c188:	e03b      	b.n	803c202 <SIMCOM_DMA_IrqHandler+0x57a>
 803c18a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 803c18e:	e038      	b.n	803c202 <SIMCOM_DMA_IrqHandler+0x57a>
 803c190:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 803c194:	e035      	b.n	803c202 <SIMCOM_DMA_IrqHandler+0x57a>
 803c196:	f44f 6300 	mov.w	r3, #2048	; 0x800
 803c19a:	e032      	b.n	803c202 <SIMCOM_DMA_IrqHandler+0x57a>
 803c19c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 803c1a0:	e02f      	b.n	803c202 <SIMCOM_DMA_IrqHandler+0x57a>
 803c1a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 803c1a6:	e02c      	b.n	803c202 <SIMCOM_DMA_IrqHandler+0x57a>
 803c1a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 803c1ac:	e029      	b.n	803c202 <SIMCOM_DMA_IrqHandler+0x57a>
 803c1ae:	2320      	movs	r3, #32
 803c1b0:	e027      	b.n	803c202 <SIMCOM_DMA_IrqHandler+0x57a>
 803c1b2:	bf00      	nop
 803c1b4:	40026000 	.word	0x40026000
 803c1b8:	20008748 	.word	0x20008748
 803c1bc:	40026010 	.word	0x40026010
 803c1c0:	40026410 	.word	0x40026410
 803c1c4:	40026070 	.word	0x40026070
 803c1c8:	40026470 	.word	0x40026470
 803c1cc:	40026028 	.word	0x40026028
 803c1d0:	40026428 	.word	0x40026428
 803c1d4:	40026088 	.word	0x40026088
 803c1d8:	40026488 	.word	0x40026488
 803c1dc:	40026040 	.word	0x40026040
 803c1e0:	40026440 	.word	0x40026440
 803c1e4:	400260a0 	.word	0x400260a0
 803c1e8:	400264a0 	.word	0x400264a0
 803c1ec:	40026458 	.word	0x40026458
 803c1f0:	40026400 	.word	0x40026400
 803c1f4:	400260b8 	.word	0x400260b8
 803c1f8:	2320      	movs	r3, #32
 803c1fa:	e002      	b.n	803c202 <SIMCOM_DMA_IrqHandler+0x57a>
 803c1fc:	2320      	movs	r3, #32
 803c1fe:	e000      	b.n	803c202 <SIMCOM_DMA_IrqHandler+0x57a>
 803c200:	2320      	movs	r3, #32
 803c202:	4a9b      	ldr	r2, [pc, #620]	; (803c470 <SIMCOM_DMA_IrqHandler+0x7e8>)
 803c204:	6093      	str	r3, [r2, #8]
 803c206:	e0c6      	b.n	803c396 <SIMCOM_DMA_IrqHandler+0x70e>
 803c208:	4b9a      	ldr	r3, [pc, #616]	; (803c474 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c20a:	681b      	ldr	r3, [r3, #0]
 803c20c:	461a      	mov	r2, r3
 803c20e:	4b9a      	ldr	r3, [pc, #616]	; (803c478 <SIMCOM_DMA_IrqHandler+0x7f0>)
 803c210:	429a      	cmp	r2, r3
 803c212:	d960      	bls.n	803c2d6 <SIMCOM_DMA_IrqHandler+0x64e>
 803c214:	4b97      	ldr	r3, [pc, #604]	; (803c474 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c216:	681b      	ldr	r3, [r3, #0]
 803c218:	4a98      	ldr	r2, [pc, #608]	; (803c47c <SIMCOM_DMA_IrqHandler+0x7f4>)
 803c21a:	4293      	cmp	r3, r2
 803c21c:	d057      	beq.n	803c2ce <SIMCOM_DMA_IrqHandler+0x646>
 803c21e:	4b95      	ldr	r3, [pc, #596]	; (803c474 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c220:	681b      	ldr	r3, [r3, #0]
 803c222:	4a97      	ldr	r2, [pc, #604]	; (803c480 <SIMCOM_DMA_IrqHandler+0x7f8>)
 803c224:	4293      	cmp	r3, r2
 803c226:	d050      	beq.n	803c2ca <SIMCOM_DMA_IrqHandler+0x642>
 803c228:	4b92      	ldr	r3, [pc, #584]	; (803c474 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c22a:	681b      	ldr	r3, [r3, #0]
 803c22c:	4a95      	ldr	r2, [pc, #596]	; (803c484 <SIMCOM_DMA_IrqHandler+0x7fc>)
 803c22e:	4293      	cmp	r3, r2
 803c230:	d049      	beq.n	803c2c6 <SIMCOM_DMA_IrqHandler+0x63e>
 803c232:	4b90      	ldr	r3, [pc, #576]	; (803c474 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c234:	681b      	ldr	r3, [r3, #0]
 803c236:	4a94      	ldr	r2, [pc, #592]	; (803c488 <SIMCOM_DMA_IrqHandler+0x800>)
 803c238:	4293      	cmp	r3, r2
 803c23a:	d042      	beq.n	803c2c2 <SIMCOM_DMA_IrqHandler+0x63a>
 803c23c:	4b8d      	ldr	r3, [pc, #564]	; (803c474 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c23e:	681b      	ldr	r3, [r3, #0]
 803c240:	4a92      	ldr	r2, [pc, #584]	; (803c48c <SIMCOM_DMA_IrqHandler+0x804>)
 803c242:	4293      	cmp	r3, r2
 803c244:	d03a      	beq.n	803c2bc <SIMCOM_DMA_IrqHandler+0x634>
 803c246:	4b8b      	ldr	r3, [pc, #556]	; (803c474 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c248:	681b      	ldr	r3, [r3, #0]
 803c24a:	4a91      	ldr	r2, [pc, #580]	; (803c490 <SIMCOM_DMA_IrqHandler+0x808>)
 803c24c:	4293      	cmp	r3, r2
 803c24e:	d032      	beq.n	803c2b6 <SIMCOM_DMA_IrqHandler+0x62e>
 803c250:	4b88      	ldr	r3, [pc, #544]	; (803c474 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c252:	681b      	ldr	r3, [r3, #0]
 803c254:	4a8f      	ldr	r2, [pc, #572]	; (803c494 <SIMCOM_DMA_IrqHandler+0x80c>)
 803c256:	4293      	cmp	r3, r2
 803c258:	d02a      	beq.n	803c2b0 <SIMCOM_DMA_IrqHandler+0x628>
 803c25a:	4b86      	ldr	r3, [pc, #536]	; (803c474 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c25c:	681b      	ldr	r3, [r3, #0]
 803c25e:	4a8e      	ldr	r2, [pc, #568]	; (803c498 <SIMCOM_DMA_IrqHandler+0x810>)
 803c260:	4293      	cmp	r3, r2
 803c262:	d022      	beq.n	803c2aa <SIMCOM_DMA_IrqHandler+0x622>
 803c264:	4b83      	ldr	r3, [pc, #524]	; (803c474 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c266:	681b      	ldr	r3, [r3, #0]
 803c268:	4a8c      	ldr	r2, [pc, #560]	; (803c49c <SIMCOM_DMA_IrqHandler+0x814>)
 803c26a:	4293      	cmp	r3, r2
 803c26c:	d01a      	beq.n	803c2a4 <SIMCOM_DMA_IrqHandler+0x61c>
 803c26e:	4b81      	ldr	r3, [pc, #516]	; (803c474 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c270:	681b      	ldr	r3, [r3, #0]
 803c272:	4a8b      	ldr	r2, [pc, #556]	; (803c4a0 <SIMCOM_DMA_IrqHandler+0x818>)
 803c274:	4293      	cmp	r3, r2
 803c276:	d012      	beq.n	803c29e <SIMCOM_DMA_IrqHandler+0x616>
 803c278:	4b7e      	ldr	r3, [pc, #504]	; (803c474 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c27a:	681b      	ldr	r3, [r3, #0]
 803c27c:	4a89      	ldr	r2, [pc, #548]	; (803c4a4 <SIMCOM_DMA_IrqHandler+0x81c>)
 803c27e:	4293      	cmp	r3, r2
 803c280:	d00a      	beq.n	803c298 <SIMCOM_DMA_IrqHandler+0x610>
 803c282:	4b7c      	ldr	r3, [pc, #496]	; (803c474 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c284:	681b      	ldr	r3, [r3, #0]
 803c286:	4a88      	ldr	r2, [pc, #544]	; (803c4a8 <SIMCOM_DMA_IrqHandler+0x820>)
 803c288:	4293      	cmp	r3, r2
 803c28a:	d102      	bne.n	803c292 <SIMCOM_DMA_IrqHandler+0x60a>
 803c28c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 803c290:	e01e      	b.n	803c2d0 <SIMCOM_DMA_IrqHandler+0x648>
 803c292:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 803c296:	e01b      	b.n	803c2d0 <SIMCOM_DMA_IrqHandler+0x648>
 803c298:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 803c29c:	e018      	b.n	803c2d0 <SIMCOM_DMA_IrqHandler+0x648>
 803c29e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 803c2a2:	e015      	b.n	803c2d0 <SIMCOM_DMA_IrqHandler+0x648>
 803c2a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 803c2a8:	e012      	b.n	803c2d0 <SIMCOM_DMA_IrqHandler+0x648>
 803c2aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 803c2ae:	e00f      	b.n	803c2d0 <SIMCOM_DMA_IrqHandler+0x648>
 803c2b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 803c2b4:	e00c      	b.n	803c2d0 <SIMCOM_DMA_IrqHandler+0x648>
 803c2b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 803c2ba:	e009      	b.n	803c2d0 <SIMCOM_DMA_IrqHandler+0x648>
 803c2bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 803c2c0:	e006      	b.n	803c2d0 <SIMCOM_DMA_IrqHandler+0x648>
 803c2c2:	2320      	movs	r3, #32
 803c2c4:	e004      	b.n	803c2d0 <SIMCOM_DMA_IrqHandler+0x648>
 803c2c6:	2320      	movs	r3, #32
 803c2c8:	e002      	b.n	803c2d0 <SIMCOM_DMA_IrqHandler+0x648>
 803c2ca:	2320      	movs	r3, #32
 803c2cc:	e000      	b.n	803c2d0 <SIMCOM_DMA_IrqHandler+0x648>
 803c2ce:	2320      	movs	r3, #32
 803c2d0:	4a76      	ldr	r2, [pc, #472]	; (803c4ac <SIMCOM_DMA_IrqHandler+0x824>)
 803c2d2:	60d3      	str	r3, [r2, #12]
 803c2d4:	e05f      	b.n	803c396 <SIMCOM_DMA_IrqHandler+0x70e>
 803c2d6:	4b67      	ldr	r3, [pc, #412]	; (803c474 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c2d8:	681b      	ldr	r3, [r3, #0]
 803c2da:	4a68      	ldr	r2, [pc, #416]	; (803c47c <SIMCOM_DMA_IrqHandler+0x7f4>)
 803c2dc:	4293      	cmp	r3, r2
 803c2de:	d057      	beq.n	803c390 <SIMCOM_DMA_IrqHandler+0x708>
 803c2e0:	4b64      	ldr	r3, [pc, #400]	; (803c474 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c2e2:	681b      	ldr	r3, [r3, #0]
 803c2e4:	4a66      	ldr	r2, [pc, #408]	; (803c480 <SIMCOM_DMA_IrqHandler+0x7f8>)
 803c2e6:	4293      	cmp	r3, r2
 803c2e8:	d050      	beq.n	803c38c <SIMCOM_DMA_IrqHandler+0x704>
 803c2ea:	4b62      	ldr	r3, [pc, #392]	; (803c474 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c2ec:	681b      	ldr	r3, [r3, #0]
 803c2ee:	4a65      	ldr	r2, [pc, #404]	; (803c484 <SIMCOM_DMA_IrqHandler+0x7fc>)
 803c2f0:	4293      	cmp	r3, r2
 803c2f2:	d049      	beq.n	803c388 <SIMCOM_DMA_IrqHandler+0x700>
 803c2f4:	4b5f      	ldr	r3, [pc, #380]	; (803c474 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c2f6:	681b      	ldr	r3, [r3, #0]
 803c2f8:	4a63      	ldr	r2, [pc, #396]	; (803c488 <SIMCOM_DMA_IrqHandler+0x800>)
 803c2fa:	4293      	cmp	r3, r2
 803c2fc:	d042      	beq.n	803c384 <SIMCOM_DMA_IrqHandler+0x6fc>
 803c2fe:	4b5d      	ldr	r3, [pc, #372]	; (803c474 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c300:	681b      	ldr	r3, [r3, #0]
 803c302:	4a62      	ldr	r2, [pc, #392]	; (803c48c <SIMCOM_DMA_IrqHandler+0x804>)
 803c304:	4293      	cmp	r3, r2
 803c306:	d03a      	beq.n	803c37e <SIMCOM_DMA_IrqHandler+0x6f6>
 803c308:	4b5a      	ldr	r3, [pc, #360]	; (803c474 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c30a:	681b      	ldr	r3, [r3, #0]
 803c30c:	4a60      	ldr	r2, [pc, #384]	; (803c490 <SIMCOM_DMA_IrqHandler+0x808>)
 803c30e:	4293      	cmp	r3, r2
 803c310:	d032      	beq.n	803c378 <SIMCOM_DMA_IrqHandler+0x6f0>
 803c312:	4b58      	ldr	r3, [pc, #352]	; (803c474 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c314:	681b      	ldr	r3, [r3, #0]
 803c316:	4a5f      	ldr	r2, [pc, #380]	; (803c494 <SIMCOM_DMA_IrqHandler+0x80c>)
 803c318:	4293      	cmp	r3, r2
 803c31a:	d02a      	beq.n	803c372 <SIMCOM_DMA_IrqHandler+0x6ea>
 803c31c:	4b55      	ldr	r3, [pc, #340]	; (803c474 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c31e:	681b      	ldr	r3, [r3, #0]
 803c320:	4a5d      	ldr	r2, [pc, #372]	; (803c498 <SIMCOM_DMA_IrqHandler+0x810>)
 803c322:	4293      	cmp	r3, r2
 803c324:	d022      	beq.n	803c36c <SIMCOM_DMA_IrqHandler+0x6e4>
 803c326:	4b53      	ldr	r3, [pc, #332]	; (803c474 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c328:	681b      	ldr	r3, [r3, #0]
 803c32a:	4a5c      	ldr	r2, [pc, #368]	; (803c49c <SIMCOM_DMA_IrqHandler+0x814>)
 803c32c:	4293      	cmp	r3, r2
 803c32e:	d01a      	beq.n	803c366 <SIMCOM_DMA_IrqHandler+0x6de>
 803c330:	4b50      	ldr	r3, [pc, #320]	; (803c474 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c332:	681b      	ldr	r3, [r3, #0]
 803c334:	4a5a      	ldr	r2, [pc, #360]	; (803c4a0 <SIMCOM_DMA_IrqHandler+0x818>)
 803c336:	4293      	cmp	r3, r2
 803c338:	d012      	beq.n	803c360 <SIMCOM_DMA_IrqHandler+0x6d8>
 803c33a:	4b4e      	ldr	r3, [pc, #312]	; (803c474 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c33c:	681b      	ldr	r3, [r3, #0]
 803c33e:	4a59      	ldr	r2, [pc, #356]	; (803c4a4 <SIMCOM_DMA_IrqHandler+0x81c>)
 803c340:	4293      	cmp	r3, r2
 803c342:	d00a      	beq.n	803c35a <SIMCOM_DMA_IrqHandler+0x6d2>
 803c344:	4b4b      	ldr	r3, [pc, #300]	; (803c474 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c346:	681b      	ldr	r3, [r3, #0]
 803c348:	4a57      	ldr	r2, [pc, #348]	; (803c4a8 <SIMCOM_DMA_IrqHandler+0x820>)
 803c34a:	4293      	cmp	r3, r2
 803c34c:	d102      	bne.n	803c354 <SIMCOM_DMA_IrqHandler+0x6cc>
 803c34e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 803c352:	e01e      	b.n	803c392 <SIMCOM_DMA_IrqHandler+0x70a>
 803c354:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 803c358:	e01b      	b.n	803c392 <SIMCOM_DMA_IrqHandler+0x70a>
 803c35a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 803c35e:	e018      	b.n	803c392 <SIMCOM_DMA_IrqHandler+0x70a>
 803c360:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 803c364:	e015      	b.n	803c392 <SIMCOM_DMA_IrqHandler+0x70a>
 803c366:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 803c36a:	e012      	b.n	803c392 <SIMCOM_DMA_IrqHandler+0x70a>
 803c36c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 803c370:	e00f      	b.n	803c392 <SIMCOM_DMA_IrqHandler+0x70a>
 803c372:	f44f 6300 	mov.w	r3, #2048	; 0x800
 803c376:	e00c      	b.n	803c392 <SIMCOM_DMA_IrqHandler+0x70a>
 803c378:	f44f 6300 	mov.w	r3, #2048	; 0x800
 803c37c:	e009      	b.n	803c392 <SIMCOM_DMA_IrqHandler+0x70a>
 803c37e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 803c382:	e006      	b.n	803c392 <SIMCOM_DMA_IrqHandler+0x70a>
 803c384:	2320      	movs	r3, #32
 803c386:	e004      	b.n	803c392 <SIMCOM_DMA_IrqHandler+0x70a>
 803c388:	2320      	movs	r3, #32
 803c38a:	e002      	b.n	803c392 <SIMCOM_DMA_IrqHandler+0x70a>
 803c38c:	2320      	movs	r3, #32
 803c38e:	e000      	b.n	803c392 <SIMCOM_DMA_IrqHandler+0x70a>
 803c390:	2320      	movs	r3, #32
 803c392:	4a46      	ldr	r2, [pc, #280]	; (803c4ac <SIMCOM_DMA_IrqHandler+0x824>)
 803c394:	6093      	str	r3, [r2, #8]
        SIMCOM_Check_Buffer();
 803c396:	f000 fd93 	bl	803cec0 <SIMCOM_Check_Buffer>
}
 803c39a:	f000 bd45 	b.w	803ce28 <SIMCOM_DMA_IrqHandler+0x11a0>
        __HAL_DMA_CLEAR_FLAG(&hdma_usart1_rx, __HAL_DMA_GET_TE_FLAG_INDEX(&hdma_usart1_rx));
 803c39e:	4b35      	ldr	r3, [pc, #212]	; (803c474 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c3a0:	681b      	ldr	r3, [r3, #0]
 803c3a2:	461a      	mov	r2, r3
 803c3a4:	4b42      	ldr	r3, [pc, #264]	; (803c4b0 <SIMCOM_DMA_IrqHandler+0x828>)
 803c3a6:	429a      	cmp	r2, r3
 803c3a8:	f240 8084 	bls.w	803c4b4 <SIMCOM_DMA_IrqHandler+0x82c>
 803c3ac:	4b31      	ldr	r3, [pc, #196]	; (803c474 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c3ae:	681b      	ldr	r3, [r3, #0]
 803c3b0:	4a32      	ldr	r2, [pc, #200]	; (803c47c <SIMCOM_DMA_IrqHandler+0x7f4>)
 803c3b2:	4293      	cmp	r3, r2
 803c3b4:	d057      	beq.n	803c466 <SIMCOM_DMA_IrqHandler+0x7de>
 803c3b6:	4b2f      	ldr	r3, [pc, #188]	; (803c474 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c3b8:	681b      	ldr	r3, [r3, #0]
 803c3ba:	4a31      	ldr	r2, [pc, #196]	; (803c480 <SIMCOM_DMA_IrqHandler+0x7f8>)
 803c3bc:	4293      	cmp	r3, r2
 803c3be:	d050      	beq.n	803c462 <SIMCOM_DMA_IrqHandler+0x7da>
 803c3c0:	4b2c      	ldr	r3, [pc, #176]	; (803c474 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c3c2:	681b      	ldr	r3, [r3, #0]
 803c3c4:	4a2f      	ldr	r2, [pc, #188]	; (803c484 <SIMCOM_DMA_IrqHandler+0x7fc>)
 803c3c6:	4293      	cmp	r3, r2
 803c3c8:	d049      	beq.n	803c45e <SIMCOM_DMA_IrqHandler+0x7d6>
 803c3ca:	4b2a      	ldr	r3, [pc, #168]	; (803c474 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c3cc:	681b      	ldr	r3, [r3, #0]
 803c3ce:	4a2e      	ldr	r2, [pc, #184]	; (803c488 <SIMCOM_DMA_IrqHandler+0x800>)
 803c3d0:	4293      	cmp	r3, r2
 803c3d2:	d042      	beq.n	803c45a <SIMCOM_DMA_IrqHandler+0x7d2>
 803c3d4:	4b27      	ldr	r3, [pc, #156]	; (803c474 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c3d6:	681b      	ldr	r3, [r3, #0]
 803c3d8:	4a2c      	ldr	r2, [pc, #176]	; (803c48c <SIMCOM_DMA_IrqHandler+0x804>)
 803c3da:	4293      	cmp	r3, r2
 803c3dc:	d03a      	beq.n	803c454 <SIMCOM_DMA_IrqHandler+0x7cc>
 803c3de:	4b25      	ldr	r3, [pc, #148]	; (803c474 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c3e0:	681b      	ldr	r3, [r3, #0]
 803c3e2:	4a2b      	ldr	r2, [pc, #172]	; (803c490 <SIMCOM_DMA_IrqHandler+0x808>)
 803c3e4:	4293      	cmp	r3, r2
 803c3e6:	d032      	beq.n	803c44e <SIMCOM_DMA_IrqHandler+0x7c6>
 803c3e8:	4b22      	ldr	r3, [pc, #136]	; (803c474 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c3ea:	681b      	ldr	r3, [r3, #0]
 803c3ec:	4a29      	ldr	r2, [pc, #164]	; (803c494 <SIMCOM_DMA_IrqHandler+0x80c>)
 803c3ee:	4293      	cmp	r3, r2
 803c3f0:	d02a      	beq.n	803c448 <SIMCOM_DMA_IrqHandler+0x7c0>
 803c3f2:	4b20      	ldr	r3, [pc, #128]	; (803c474 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c3f4:	681b      	ldr	r3, [r3, #0]
 803c3f6:	4a28      	ldr	r2, [pc, #160]	; (803c498 <SIMCOM_DMA_IrqHandler+0x810>)
 803c3f8:	4293      	cmp	r3, r2
 803c3fa:	d022      	beq.n	803c442 <SIMCOM_DMA_IrqHandler+0x7ba>
 803c3fc:	4b1d      	ldr	r3, [pc, #116]	; (803c474 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c3fe:	681b      	ldr	r3, [r3, #0]
 803c400:	4a26      	ldr	r2, [pc, #152]	; (803c49c <SIMCOM_DMA_IrqHandler+0x814>)
 803c402:	4293      	cmp	r3, r2
 803c404:	d01a      	beq.n	803c43c <SIMCOM_DMA_IrqHandler+0x7b4>
 803c406:	4b1b      	ldr	r3, [pc, #108]	; (803c474 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c408:	681b      	ldr	r3, [r3, #0]
 803c40a:	4a25      	ldr	r2, [pc, #148]	; (803c4a0 <SIMCOM_DMA_IrqHandler+0x818>)
 803c40c:	4293      	cmp	r3, r2
 803c40e:	d012      	beq.n	803c436 <SIMCOM_DMA_IrqHandler+0x7ae>
 803c410:	4b18      	ldr	r3, [pc, #96]	; (803c474 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c412:	681b      	ldr	r3, [r3, #0]
 803c414:	4a23      	ldr	r2, [pc, #140]	; (803c4a4 <SIMCOM_DMA_IrqHandler+0x81c>)
 803c416:	4293      	cmp	r3, r2
 803c418:	d00a      	beq.n	803c430 <SIMCOM_DMA_IrqHandler+0x7a8>
 803c41a:	4b16      	ldr	r3, [pc, #88]	; (803c474 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c41c:	681b      	ldr	r3, [r3, #0]
 803c41e:	4a22      	ldr	r2, [pc, #136]	; (803c4a8 <SIMCOM_DMA_IrqHandler+0x820>)
 803c420:	4293      	cmp	r3, r2
 803c422:	d102      	bne.n	803c42a <SIMCOM_DMA_IrqHandler+0x7a2>
 803c424:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 803c428:	e01e      	b.n	803c468 <SIMCOM_DMA_IrqHandler+0x7e0>
 803c42a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 803c42e:	e01b      	b.n	803c468 <SIMCOM_DMA_IrqHandler+0x7e0>
 803c430:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 803c434:	e018      	b.n	803c468 <SIMCOM_DMA_IrqHandler+0x7e0>
 803c436:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 803c43a:	e015      	b.n	803c468 <SIMCOM_DMA_IrqHandler+0x7e0>
 803c43c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 803c440:	e012      	b.n	803c468 <SIMCOM_DMA_IrqHandler+0x7e0>
 803c442:	f44f 7300 	mov.w	r3, #512	; 0x200
 803c446:	e00f      	b.n	803c468 <SIMCOM_DMA_IrqHandler+0x7e0>
 803c448:	f44f 7300 	mov.w	r3, #512	; 0x200
 803c44c:	e00c      	b.n	803c468 <SIMCOM_DMA_IrqHandler+0x7e0>
 803c44e:	f44f 7300 	mov.w	r3, #512	; 0x200
 803c452:	e009      	b.n	803c468 <SIMCOM_DMA_IrqHandler+0x7e0>
 803c454:	f44f 7300 	mov.w	r3, #512	; 0x200
 803c458:	e006      	b.n	803c468 <SIMCOM_DMA_IrqHandler+0x7e0>
 803c45a:	2308      	movs	r3, #8
 803c45c:	e004      	b.n	803c468 <SIMCOM_DMA_IrqHandler+0x7e0>
 803c45e:	2308      	movs	r3, #8
 803c460:	e002      	b.n	803c468 <SIMCOM_DMA_IrqHandler+0x7e0>
 803c462:	2308      	movs	r3, #8
 803c464:	e000      	b.n	803c468 <SIMCOM_DMA_IrqHandler+0x7e0>
 803c466:	2308      	movs	r3, #8
 803c468:	4a01      	ldr	r2, [pc, #4]	; (803c470 <SIMCOM_DMA_IrqHandler+0x7e8>)
 803c46a:	60d3      	str	r3, [r2, #12]
 803c46c:	e173      	b.n	803c756 <SIMCOM_DMA_IrqHandler+0xace>
 803c46e:	bf00      	nop
 803c470:	40026400 	.word	0x40026400
 803c474:	20008748 	.word	0x20008748
 803c478:	40026058 	.word	0x40026058
 803c47c:	40026010 	.word	0x40026010
 803c480:	40026410 	.word	0x40026410
 803c484:	40026070 	.word	0x40026070
 803c488:	40026470 	.word	0x40026470
 803c48c:	40026028 	.word	0x40026028
 803c490:	40026428 	.word	0x40026428
 803c494:	40026088 	.word	0x40026088
 803c498:	40026488 	.word	0x40026488
 803c49c:	40026040 	.word	0x40026040
 803c4a0:	40026440 	.word	0x40026440
 803c4a4:	400260a0 	.word	0x400260a0
 803c4a8:	400264a0 	.word	0x400264a0
 803c4ac:	40026000 	.word	0x40026000
 803c4b0:	40026458 	.word	0x40026458
 803c4b4:	4b95      	ldr	r3, [pc, #596]	; (803c70c <SIMCOM_DMA_IrqHandler+0xa84>)
 803c4b6:	681b      	ldr	r3, [r3, #0]
 803c4b8:	461a      	mov	r2, r3
 803c4ba:	4b95      	ldr	r3, [pc, #596]	; (803c710 <SIMCOM_DMA_IrqHandler+0xa88>)
 803c4bc:	429a      	cmp	r2, r3
 803c4be:	d960      	bls.n	803c582 <SIMCOM_DMA_IrqHandler+0x8fa>
 803c4c0:	4b92      	ldr	r3, [pc, #584]	; (803c70c <SIMCOM_DMA_IrqHandler+0xa84>)
 803c4c2:	681b      	ldr	r3, [r3, #0]
 803c4c4:	4a93      	ldr	r2, [pc, #588]	; (803c714 <SIMCOM_DMA_IrqHandler+0xa8c>)
 803c4c6:	4293      	cmp	r3, r2
 803c4c8:	d057      	beq.n	803c57a <SIMCOM_DMA_IrqHandler+0x8f2>
 803c4ca:	4b90      	ldr	r3, [pc, #576]	; (803c70c <SIMCOM_DMA_IrqHandler+0xa84>)
 803c4cc:	681b      	ldr	r3, [r3, #0]
 803c4ce:	4a92      	ldr	r2, [pc, #584]	; (803c718 <SIMCOM_DMA_IrqHandler+0xa90>)
 803c4d0:	4293      	cmp	r3, r2
 803c4d2:	d050      	beq.n	803c576 <SIMCOM_DMA_IrqHandler+0x8ee>
 803c4d4:	4b8d      	ldr	r3, [pc, #564]	; (803c70c <SIMCOM_DMA_IrqHandler+0xa84>)
 803c4d6:	681b      	ldr	r3, [r3, #0]
 803c4d8:	4a90      	ldr	r2, [pc, #576]	; (803c71c <SIMCOM_DMA_IrqHandler+0xa94>)
 803c4da:	4293      	cmp	r3, r2
 803c4dc:	d049      	beq.n	803c572 <SIMCOM_DMA_IrqHandler+0x8ea>
 803c4de:	4b8b      	ldr	r3, [pc, #556]	; (803c70c <SIMCOM_DMA_IrqHandler+0xa84>)
 803c4e0:	681b      	ldr	r3, [r3, #0]
 803c4e2:	4a8f      	ldr	r2, [pc, #572]	; (803c720 <SIMCOM_DMA_IrqHandler+0xa98>)
 803c4e4:	4293      	cmp	r3, r2
 803c4e6:	d042      	beq.n	803c56e <SIMCOM_DMA_IrqHandler+0x8e6>
 803c4e8:	4b88      	ldr	r3, [pc, #544]	; (803c70c <SIMCOM_DMA_IrqHandler+0xa84>)
 803c4ea:	681b      	ldr	r3, [r3, #0]
 803c4ec:	4a8d      	ldr	r2, [pc, #564]	; (803c724 <SIMCOM_DMA_IrqHandler+0xa9c>)
 803c4ee:	4293      	cmp	r3, r2
 803c4f0:	d03a      	beq.n	803c568 <SIMCOM_DMA_IrqHandler+0x8e0>
 803c4f2:	4b86      	ldr	r3, [pc, #536]	; (803c70c <SIMCOM_DMA_IrqHandler+0xa84>)
 803c4f4:	681b      	ldr	r3, [r3, #0]
 803c4f6:	4a8c      	ldr	r2, [pc, #560]	; (803c728 <SIMCOM_DMA_IrqHandler+0xaa0>)
 803c4f8:	4293      	cmp	r3, r2
 803c4fa:	d032      	beq.n	803c562 <SIMCOM_DMA_IrqHandler+0x8da>
 803c4fc:	4b83      	ldr	r3, [pc, #524]	; (803c70c <SIMCOM_DMA_IrqHandler+0xa84>)
 803c4fe:	681b      	ldr	r3, [r3, #0]
 803c500:	4a8a      	ldr	r2, [pc, #552]	; (803c72c <SIMCOM_DMA_IrqHandler+0xaa4>)
 803c502:	4293      	cmp	r3, r2
 803c504:	d02a      	beq.n	803c55c <SIMCOM_DMA_IrqHandler+0x8d4>
 803c506:	4b81      	ldr	r3, [pc, #516]	; (803c70c <SIMCOM_DMA_IrqHandler+0xa84>)
 803c508:	681b      	ldr	r3, [r3, #0]
 803c50a:	4a89      	ldr	r2, [pc, #548]	; (803c730 <SIMCOM_DMA_IrqHandler+0xaa8>)
 803c50c:	4293      	cmp	r3, r2
 803c50e:	d022      	beq.n	803c556 <SIMCOM_DMA_IrqHandler+0x8ce>
 803c510:	4b7e      	ldr	r3, [pc, #504]	; (803c70c <SIMCOM_DMA_IrqHandler+0xa84>)
 803c512:	681b      	ldr	r3, [r3, #0]
 803c514:	4a87      	ldr	r2, [pc, #540]	; (803c734 <SIMCOM_DMA_IrqHandler+0xaac>)
 803c516:	4293      	cmp	r3, r2
 803c518:	d01a      	beq.n	803c550 <SIMCOM_DMA_IrqHandler+0x8c8>
 803c51a:	4b7c      	ldr	r3, [pc, #496]	; (803c70c <SIMCOM_DMA_IrqHandler+0xa84>)
 803c51c:	681b      	ldr	r3, [r3, #0]
 803c51e:	4a86      	ldr	r2, [pc, #536]	; (803c738 <SIMCOM_DMA_IrqHandler+0xab0>)
 803c520:	4293      	cmp	r3, r2
 803c522:	d012      	beq.n	803c54a <SIMCOM_DMA_IrqHandler+0x8c2>
 803c524:	4b79      	ldr	r3, [pc, #484]	; (803c70c <SIMCOM_DMA_IrqHandler+0xa84>)
 803c526:	681b      	ldr	r3, [r3, #0]
 803c528:	4a84      	ldr	r2, [pc, #528]	; (803c73c <SIMCOM_DMA_IrqHandler+0xab4>)
 803c52a:	4293      	cmp	r3, r2
 803c52c:	d00a      	beq.n	803c544 <SIMCOM_DMA_IrqHandler+0x8bc>
 803c52e:	4b77      	ldr	r3, [pc, #476]	; (803c70c <SIMCOM_DMA_IrqHandler+0xa84>)
 803c530:	681b      	ldr	r3, [r3, #0]
 803c532:	4a83      	ldr	r2, [pc, #524]	; (803c740 <SIMCOM_DMA_IrqHandler+0xab8>)
 803c534:	4293      	cmp	r3, r2
 803c536:	d102      	bne.n	803c53e <SIMCOM_DMA_IrqHandler+0x8b6>
 803c538:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 803c53c:	e01e      	b.n	803c57c <SIMCOM_DMA_IrqHandler+0x8f4>
 803c53e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 803c542:	e01b      	b.n	803c57c <SIMCOM_DMA_IrqHandler+0x8f4>
 803c544:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 803c548:	e018      	b.n	803c57c <SIMCOM_DMA_IrqHandler+0x8f4>
 803c54a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 803c54e:	e015      	b.n	803c57c <SIMCOM_DMA_IrqHandler+0x8f4>
 803c550:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 803c554:	e012      	b.n	803c57c <SIMCOM_DMA_IrqHandler+0x8f4>
 803c556:	f44f 7300 	mov.w	r3, #512	; 0x200
 803c55a:	e00f      	b.n	803c57c <SIMCOM_DMA_IrqHandler+0x8f4>
 803c55c:	f44f 7300 	mov.w	r3, #512	; 0x200
 803c560:	e00c      	b.n	803c57c <SIMCOM_DMA_IrqHandler+0x8f4>
 803c562:	f44f 7300 	mov.w	r3, #512	; 0x200
 803c566:	e009      	b.n	803c57c <SIMCOM_DMA_IrqHandler+0x8f4>
 803c568:	f44f 7300 	mov.w	r3, #512	; 0x200
 803c56c:	e006      	b.n	803c57c <SIMCOM_DMA_IrqHandler+0x8f4>
 803c56e:	2308      	movs	r3, #8
 803c570:	e004      	b.n	803c57c <SIMCOM_DMA_IrqHandler+0x8f4>
 803c572:	2308      	movs	r3, #8
 803c574:	e002      	b.n	803c57c <SIMCOM_DMA_IrqHandler+0x8f4>
 803c576:	2308      	movs	r3, #8
 803c578:	e000      	b.n	803c57c <SIMCOM_DMA_IrqHandler+0x8f4>
 803c57a:	2308      	movs	r3, #8
 803c57c:	4a71      	ldr	r2, [pc, #452]	; (803c744 <SIMCOM_DMA_IrqHandler+0xabc>)
 803c57e:	6093      	str	r3, [r2, #8]
 803c580:	e0e9      	b.n	803c756 <SIMCOM_DMA_IrqHandler+0xace>
 803c582:	4b62      	ldr	r3, [pc, #392]	; (803c70c <SIMCOM_DMA_IrqHandler+0xa84>)
 803c584:	681b      	ldr	r3, [r3, #0]
 803c586:	461a      	mov	r2, r3
 803c588:	4b6f      	ldr	r3, [pc, #444]	; (803c748 <SIMCOM_DMA_IrqHandler+0xac0>)
 803c58a:	429a      	cmp	r2, r3
 803c58c:	d960      	bls.n	803c650 <SIMCOM_DMA_IrqHandler+0x9c8>
 803c58e:	4b5f      	ldr	r3, [pc, #380]	; (803c70c <SIMCOM_DMA_IrqHandler+0xa84>)
 803c590:	681b      	ldr	r3, [r3, #0]
 803c592:	4a60      	ldr	r2, [pc, #384]	; (803c714 <SIMCOM_DMA_IrqHandler+0xa8c>)
 803c594:	4293      	cmp	r3, r2
 803c596:	d057      	beq.n	803c648 <SIMCOM_DMA_IrqHandler+0x9c0>
 803c598:	4b5c      	ldr	r3, [pc, #368]	; (803c70c <SIMCOM_DMA_IrqHandler+0xa84>)
 803c59a:	681b      	ldr	r3, [r3, #0]
 803c59c:	4a5e      	ldr	r2, [pc, #376]	; (803c718 <SIMCOM_DMA_IrqHandler+0xa90>)
 803c59e:	4293      	cmp	r3, r2
 803c5a0:	d050      	beq.n	803c644 <SIMCOM_DMA_IrqHandler+0x9bc>
 803c5a2:	4b5a      	ldr	r3, [pc, #360]	; (803c70c <SIMCOM_DMA_IrqHandler+0xa84>)
 803c5a4:	681b      	ldr	r3, [r3, #0]
 803c5a6:	4a5d      	ldr	r2, [pc, #372]	; (803c71c <SIMCOM_DMA_IrqHandler+0xa94>)
 803c5a8:	4293      	cmp	r3, r2
 803c5aa:	d049      	beq.n	803c640 <SIMCOM_DMA_IrqHandler+0x9b8>
 803c5ac:	4b57      	ldr	r3, [pc, #348]	; (803c70c <SIMCOM_DMA_IrqHandler+0xa84>)
 803c5ae:	681b      	ldr	r3, [r3, #0]
 803c5b0:	4a5b      	ldr	r2, [pc, #364]	; (803c720 <SIMCOM_DMA_IrqHandler+0xa98>)
 803c5b2:	4293      	cmp	r3, r2
 803c5b4:	d042      	beq.n	803c63c <SIMCOM_DMA_IrqHandler+0x9b4>
 803c5b6:	4b55      	ldr	r3, [pc, #340]	; (803c70c <SIMCOM_DMA_IrqHandler+0xa84>)
 803c5b8:	681b      	ldr	r3, [r3, #0]
 803c5ba:	4a5a      	ldr	r2, [pc, #360]	; (803c724 <SIMCOM_DMA_IrqHandler+0xa9c>)
 803c5bc:	4293      	cmp	r3, r2
 803c5be:	d03a      	beq.n	803c636 <SIMCOM_DMA_IrqHandler+0x9ae>
 803c5c0:	4b52      	ldr	r3, [pc, #328]	; (803c70c <SIMCOM_DMA_IrqHandler+0xa84>)
 803c5c2:	681b      	ldr	r3, [r3, #0]
 803c5c4:	4a58      	ldr	r2, [pc, #352]	; (803c728 <SIMCOM_DMA_IrqHandler+0xaa0>)
 803c5c6:	4293      	cmp	r3, r2
 803c5c8:	d032      	beq.n	803c630 <SIMCOM_DMA_IrqHandler+0x9a8>
 803c5ca:	4b50      	ldr	r3, [pc, #320]	; (803c70c <SIMCOM_DMA_IrqHandler+0xa84>)
 803c5cc:	681b      	ldr	r3, [r3, #0]
 803c5ce:	4a57      	ldr	r2, [pc, #348]	; (803c72c <SIMCOM_DMA_IrqHandler+0xaa4>)
 803c5d0:	4293      	cmp	r3, r2
 803c5d2:	d02a      	beq.n	803c62a <SIMCOM_DMA_IrqHandler+0x9a2>
 803c5d4:	4b4d      	ldr	r3, [pc, #308]	; (803c70c <SIMCOM_DMA_IrqHandler+0xa84>)
 803c5d6:	681b      	ldr	r3, [r3, #0]
 803c5d8:	4a55      	ldr	r2, [pc, #340]	; (803c730 <SIMCOM_DMA_IrqHandler+0xaa8>)
 803c5da:	4293      	cmp	r3, r2
 803c5dc:	d022      	beq.n	803c624 <SIMCOM_DMA_IrqHandler+0x99c>
 803c5de:	4b4b      	ldr	r3, [pc, #300]	; (803c70c <SIMCOM_DMA_IrqHandler+0xa84>)
 803c5e0:	681b      	ldr	r3, [r3, #0]
 803c5e2:	4a54      	ldr	r2, [pc, #336]	; (803c734 <SIMCOM_DMA_IrqHandler+0xaac>)
 803c5e4:	4293      	cmp	r3, r2
 803c5e6:	d01a      	beq.n	803c61e <SIMCOM_DMA_IrqHandler+0x996>
 803c5e8:	4b48      	ldr	r3, [pc, #288]	; (803c70c <SIMCOM_DMA_IrqHandler+0xa84>)
 803c5ea:	681b      	ldr	r3, [r3, #0]
 803c5ec:	4a52      	ldr	r2, [pc, #328]	; (803c738 <SIMCOM_DMA_IrqHandler+0xab0>)
 803c5ee:	4293      	cmp	r3, r2
 803c5f0:	d012      	beq.n	803c618 <SIMCOM_DMA_IrqHandler+0x990>
 803c5f2:	4b46      	ldr	r3, [pc, #280]	; (803c70c <SIMCOM_DMA_IrqHandler+0xa84>)
 803c5f4:	681b      	ldr	r3, [r3, #0]
 803c5f6:	4a51      	ldr	r2, [pc, #324]	; (803c73c <SIMCOM_DMA_IrqHandler+0xab4>)
 803c5f8:	4293      	cmp	r3, r2
 803c5fa:	d00a      	beq.n	803c612 <SIMCOM_DMA_IrqHandler+0x98a>
 803c5fc:	4b43      	ldr	r3, [pc, #268]	; (803c70c <SIMCOM_DMA_IrqHandler+0xa84>)
 803c5fe:	681b      	ldr	r3, [r3, #0]
 803c600:	4a4f      	ldr	r2, [pc, #316]	; (803c740 <SIMCOM_DMA_IrqHandler+0xab8>)
 803c602:	4293      	cmp	r3, r2
 803c604:	d102      	bne.n	803c60c <SIMCOM_DMA_IrqHandler+0x984>
 803c606:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 803c60a:	e01e      	b.n	803c64a <SIMCOM_DMA_IrqHandler+0x9c2>
 803c60c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 803c610:	e01b      	b.n	803c64a <SIMCOM_DMA_IrqHandler+0x9c2>
 803c612:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 803c616:	e018      	b.n	803c64a <SIMCOM_DMA_IrqHandler+0x9c2>
 803c618:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 803c61c:	e015      	b.n	803c64a <SIMCOM_DMA_IrqHandler+0x9c2>
 803c61e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 803c622:	e012      	b.n	803c64a <SIMCOM_DMA_IrqHandler+0x9c2>
 803c624:	f44f 7300 	mov.w	r3, #512	; 0x200
 803c628:	e00f      	b.n	803c64a <SIMCOM_DMA_IrqHandler+0x9c2>
 803c62a:	f44f 7300 	mov.w	r3, #512	; 0x200
 803c62e:	e00c      	b.n	803c64a <SIMCOM_DMA_IrqHandler+0x9c2>
 803c630:	f44f 7300 	mov.w	r3, #512	; 0x200
 803c634:	e009      	b.n	803c64a <SIMCOM_DMA_IrqHandler+0x9c2>
 803c636:	f44f 7300 	mov.w	r3, #512	; 0x200
 803c63a:	e006      	b.n	803c64a <SIMCOM_DMA_IrqHandler+0x9c2>
 803c63c:	2308      	movs	r3, #8
 803c63e:	e004      	b.n	803c64a <SIMCOM_DMA_IrqHandler+0x9c2>
 803c640:	2308      	movs	r3, #8
 803c642:	e002      	b.n	803c64a <SIMCOM_DMA_IrqHandler+0x9c2>
 803c644:	2308      	movs	r3, #8
 803c646:	e000      	b.n	803c64a <SIMCOM_DMA_IrqHandler+0x9c2>
 803c648:	2308      	movs	r3, #8
 803c64a:	4a40      	ldr	r2, [pc, #256]	; (803c74c <SIMCOM_DMA_IrqHandler+0xac4>)
 803c64c:	60d3      	str	r3, [r2, #12]
 803c64e:	e082      	b.n	803c756 <SIMCOM_DMA_IrqHandler+0xace>
 803c650:	4b2e      	ldr	r3, [pc, #184]	; (803c70c <SIMCOM_DMA_IrqHandler+0xa84>)
 803c652:	681b      	ldr	r3, [r3, #0]
 803c654:	4a2f      	ldr	r2, [pc, #188]	; (803c714 <SIMCOM_DMA_IrqHandler+0xa8c>)
 803c656:	4293      	cmp	r3, r2
 803c658:	d07a      	beq.n	803c750 <SIMCOM_DMA_IrqHandler+0xac8>
 803c65a:	4b2c      	ldr	r3, [pc, #176]	; (803c70c <SIMCOM_DMA_IrqHandler+0xa84>)
 803c65c:	681b      	ldr	r3, [r3, #0]
 803c65e:	4a2e      	ldr	r2, [pc, #184]	; (803c718 <SIMCOM_DMA_IrqHandler+0xa90>)
 803c660:	4293      	cmp	r3, r2
 803c662:	d050      	beq.n	803c706 <SIMCOM_DMA_IrqHandler+0xa7e>
 803c664:	4b29      	ldr	r3, [pc, #164]	; (803c70c <SIMCOM_DMA_IrqHandler+0xa84>)
 803c666:	681b      	ldr	r3, [r3, #0]
 803c668:	4a2c      	ldr	r2, [pc, #176]	; (803c71c <SIMCOM_DMA_IrqHandler+0xa94>)
 803c66a:	4293      	cmp	r3, r2
 803c66c:	d049      	beq.n	803c702 <SIMCOM_DMA_IrqHandler+0xa7a>
 803c66e:	4b27      	ldr	r3, [pc, #156]	; (803c70c <SIMCOM_DMA_IrqHandler+0xa84>)
 803c670:	681b      	ldr	r3, [r3, #0]
 803c672:	4a2b      	ldr	r2, [pc, #172]	; (803c720 <SIMCOM_DMA_IrqHandler+0xa98>)
 803c674:	4293      	cmp	r3, r2
 803c676:	d042      	beq.n	803c6fe <SIMCOM_DMA_IrqHandler+0xa76>
 803c678:	4b24      	ldr	r3, [pc, #144]	; (803c70c <SIMCOM_DMA_IrqHandler+0xa84>)
 803c67a:	681b      	ldr	r3, [r3, #0]
 803c67c:	4a29      	ldr	r2, [pc, #164]	; (803c724 <SIMCOM_DMA_IrqHandler+0xa9c>)
 803c67e:	4293      	cmp	r3, r2
 803c680:	d03a      	beq.n	803c6f8 <SIMCOM_DMA_IrqHandler+0xa70>
 803c682:	4b22      	ldr	r3, [pc, #136]	; (803c70c <SIMCOM_DMA_IrqHandler+0xa84>)
 803c684:	681b      	ldr	r3, [r3, #0]
 803c686:	4a28      	ldr	r2, [pc, #160]	; (803c728 <SIMCOM_DMA_IrqHandler+0xaa0>)
 803c688:	4293      	cmp	r3, r2
 803c68a:	d032      	beq.n	803c6f2 <SIMCOM_DMA_IrqHandler+0xa6a>
 803c68c:	4b1f      	ldr	r3, [pc, #124]	; (803c70c <SIMCOM_DMA_IrqHandler+0xa84>)
 803c68e:	681b      	ldr	r3, [r3, #0]
 803c690:	4a26      	ldr	r2, [pc, #152]	; (803c72c <SIMCOM_DMA_IrqHandler+0xaa4>)
 803c692:	4293      	cmp	r3, r2
 803c694:	d02a      	beq.n	803c6ec <SIMCOM_DMA_IrqHandler+0xa64>
 803c696:	4b1d      	ldr	r3, [pc, #116]	; (803c70c <SIMCOM_DMA_IrqHandler+0xa84>)
 803c698:	681b      	ldr	r3, [r3, #0]
 803c69a:	4a25      	ldr	r2, [pc, #148]	; (803c730 <SIMCOM_DMA_IrqHandler+0xaa8>)
 803c69c:	4293      	cmp	r3, r2
 803c69e:	d022      	beq.n	803c6e6 <SIMCOM_DMA_IrqHandler+0xa5e>
 803c6a0:	4b1a      	ldr	r3, [pc, #104]	; (803c70c <SIMCOM_DMA_IrqHandler+0xa84>)
 803c6a2:	681b      	ldr	r3, [r3, #0]
 803c6a4:	4a23      	ldr	r2, [pc, #140]	; (803c734 <SIMCOM_DMA_IrqHandler+0xaac>)
 803c6a6:	4293      	cmp	r3, r2
 803c6a8:	d01a      	beq.n	803c6e0 <SIMCOM_DMA_IrqHandler+0xa58>
 803c6aa:	4b18      	ldr	r3, [pc, #96]	; (803c70c <SIMCOM_DMA_IrqHandler+0xa84>)
 803c6ac:	681b      	ldr	r3, [r3, #0]
 803c6ae:	4a22      	ldr	r2, [pc, #136]	; (803c738 <SIMCOM_DMA_IrqHandler+0xab0>)
 803c6b0:	4293      	cmp	r3, r2
 803c6b2:	d012      	beq.n	803c6da <SIMCOM_DMA_IrqHandler+0xa52>
 803c6b4:	4b15      	ldr	r3, [pc, #84]	; (803c70c <SIMCOM_DMA_IrqHandler+0xa84>)
 803c6b6:	681b      	ldr	r3, [r3, #0]
 803c6b8:	4a20      	ldr	r2, [pc, #128]	; (803c73c <SIMCOM_DMA_IrqHandler+0xab4>)
 803c6ba:	4293      	cmp	r3, r2
 803c6bc:	d00a      	beq.n	803c6d4 <SIMCOM_DMA_IrqHandler+0xa4c>
 803c6be:	4b13      	ldr	r3, [pc, #76]	; (803c70c <SIMCOM_DMA_IrqHandler+0xa84>)
 803c6c0:	681b      	ldr	r3, [r3, #0]
 803c6c2:	4a1f      	ldr	r2, [pc, #124]	; (803c740 <SIMCOM_DMA_IrqHandler+0xab8>)
 803c6c4:	4293      	cmp	r3, r2
 803c6c6:	d102      	bne.n	803c6ce <SIMCOM_DMA_IrqHandler+0xa46>
 803c6c8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 803c6cc:	e041      	b.n	803c752 <SIMCOM_DMA_IrqHandler+0xaca>
 803c6ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 803c6d2:	e03e      	b.n	803c752 <SIMCOM_DMA_IrqHandler+0xaca>
 803c6d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 803c6d8:	e03b      	b.n	803c752 <SIMCOM_DMA_IrqHandler+0xaca>
 803c6da:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 803c6de:	e038      	b.n	803c752 <SIMCOM_DMA_IrqHandler+0xaca>
 803c6e0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 803c6e4:	e035      	b.n	803c752 <SIMCOM_DMA_IrqHandler+0xaca>
 803c6e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 803c6ea:	e032      	b.n	803c752 <SIMCOM_DMA_IrqHandler+0xaca>
 803c6ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 803c6f0:	e02f      	b.n	803c752 <SIMCOM_DMA_IrqHandler+0xaca>
 803c6f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 803c6f6:	e02c      	b.n	803c752 <SIMCOM_DMA_IrqHandler+0xaca>
 803c6f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 803c6fc:	e029      	b.n	803c752 <SIMCOM_DMA_IrqHandler+0xaca>
 803c6fe:	2308      	movs	r3, #8
 803c700:	e027      	b.n	803c752 <SIMCOM_DMA_IrqHandler+0xaca>
 803c702:	2308      	movs	r3, #8
 803c704:	e025      	b.n	803c752 <SIMCOM_DMA_IrqHandler+0xaca>
 803c706:	2308      	movs	r3, #8
 803c708:	e023      	b.n	803c752 <SIMCOM_DMA_IrqHandler+0xaca>
 803c70a:	bf00      	nop
 803c70c:	20008748 	.word	0x20008748
 803c710:	400260b8 	.word	0x400260b8
 803c714:	40026010 	.word	0x40026010
 803c718:	40026410 	.word	0x40026410
 803c71c:	40026070 	.word	0x40026070
 803c720:	40026470 	.word	0x40026470
 803c724:	40026028 	.word	0x40026028
 803c728:	40026428 	.word	0x40026428
 803c72c:	40026088 	.word	0x40026088
 803c730:	40026488 	.word	0x40026488
 803c734:	40026040 	.word	0x40026040
 803c738:	40026440 	.word	0x40026440
 803c73c:	400260a0 	.word	0x400260a0
 803c740:	400264a0 	.word	0x400264a0
 803c744:	40026400 	.word	0x40026400
 803c748:	40026058 	.word	0x40026058
 803c74c:	40026000 	.word	0x40026000
 803c750:	2308      	movs	r3, #8
 803c752:	4a96      	ldr	r2, [pc, #600]	; (803c9ac <SIMCOM_DMA_IrqHandler+0xd24>)
 803c754:	6093      	str	r3, [r2, #8]
        __HAL_DMA_CLEAR_FLAG(&hdma_usart1_rx, __HAL_DMA_GET_FE_FLAG_INDEX(&hdma_usart1_rx));
 803c756:	4b96      	ldr	r3, [pc, #600]	; (803c9b0 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c758:	681b      	ldr	r3, [r3, #0]
 803c75a:	461a      	mov	r2, r3
 803c75c:	4b95      	ldr	r3, [pc, #596]	; (803c9b4 <SIMCOM_DMA_IrqHandler+0xd2c>)
 803c75e:	429a      	cmp	r2, r3
 803c760:	d95c      	bls.n	803c81c <SIMCOM_DMA_IrqHandler+0xb94>
 803c762:	4b93      	ldr	r3, [pc, #588]	; (803c9b0 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c764:	681b      	ldr	r3, [r3, #0]
 803c766:	4a94      	ldr	r2, [pc, #592]	; (803c9b8 <SIMCOM_DMA_IrqHandler+0xd30>)
 803c768:	4293      	cmp	r3, r2
 803c76a:	d053      	beq.n	803c814 <SIMCOM_DMA_IrqHandler+0xb8c>
 803c76c:	4b90      	ldr	r3, [pc, #576]	; (803c9b0 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c76e:	681b      	ldr	r3, [r3, #0]
 803c770:	4a92      	ldr	r2, [pc, #584]	; (803c9bc <SIMCOM_DMA_IrqHandler+0xd34>)
 803c772:	4293      	cmp	r3, r2
 803c774:	d04c      	beq.n	803c810 <SIMCOM_DMA_IrqHandler+0xb88>
 803c776:	4b8e      	ldr	r3, [pc, #568]	; (803c9b0 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c778:	681b      	ldr	r3, [r3, #0]
 803c77a:	4a91      	ldr	r2, [pc, #580]	; (803c9c0 <SIMCOM_DMA_IrqHandler+0xd38>)
 803c77c:	4293      	cmp	r3, r2
 803c77e:	d045      	beq.n	803c80c <SIMCOM_DMA_IrqHandler+0xb84>
 803c780:	4b8b      	ldr	r3, [pc, #556]	; (803c9b0 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c782:	681b      	ldr	r3, [r3, #0]
 803c784:	4a8f      	ldr	r2, [pc, #572]	; (803c9c4 <SIMCOM_DMA_IrqHandler+0xd3c>)
 803c786:	4293      	cmp	r3, r2
 803c788:	d03e      	beq.n	803c808 <SIMCOM_DMA_IrqHandler+0xb80>
 803c78a:	4b89      	ldr	r3, [pc, #548]	; (803c9b0 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c78c:	681b      	ldr	r3, [r3, #0]
 803c78e:	4a8e      	ldr	r2, [pc, #568]	; (803c9c8 <SIMCOM_DMA_IrqHandler+0xd40>)
 803c790:	4293      	cmp	r3, r2
 803c792:	d037      	beq.n	803c804 <SIMCOM_DMA_IrqHandler+0xb7c>
 803c794:	4b86      	ldr	r3, [pc, #536]	; (803c9b0 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c796:	681b      	ldr	r3, [r3, #0]
 803c798:	4a8c      	ldr	r2, [pc, #560]	; (803c9cc <SIMCOM_DMA_IrqHandler+0xd44>)
 803c79a:	4293      	cmp	r3, r2
 803c79c:	d030      	beq.n	803c800 <SIMCOM_DMA_IrqHandler+0xb78>
 803c79e:	4b84      	ldr	r3, [pc, #528]	; (803c9b0 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c7a0:	681b      	ldr	r3, [r3, #0]
 803c7a2:	4a8b      	ldr	r2, [pc, #556]	; (803c9d0 <SIMCOM_DMA_IrqHandler+0xd48>)
 803c7a4:	4293      	cmp	r3, r2
 803c7a6:	d029      	beq.n	803c7fc <SIMCOM_DMA_IrqHandler+0xb74>
 803c7a8:	4b81      	ldr	r3, [pc, #516]	; (803c9b0 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c7aa:	681b      	ldr	r3, [r3, #0]
 803c7ac:	4a89      	ldr	r2, [pc, #548]	; (803c9d4 <SIMCOM_DMA_IrqHandler+0xd4c>)
 803c7ae:	4293      	cmp	r3, r2
 803c7b0:	d022      	beq.n	803c7f8 <SIMCOM_DMA_IrqHandler+0xb70>
 803c7b2:	4b7f      	ldr	r3, [pc, #508]	; (803c9b0 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c7b4:	681b      	ldr	r3, [r3, #0]
 803c7b6:	4a88      	ldr	r2, [pc, #544]	; (803c9d8 <SIMCOM_DMA_IrqHandler+0xd50>)
 803c7b8:	4293      	cmp	r3, r2
 803c7ba:	d01a      	beq.n	803c7f2 <SIMCOM_DMA_IrqHandler+0xb6a>
 803c7bc:	4b7c      	ldr	r3, [pc, #496]	; (803c9b0 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c7be:	681b      	ldr	r3, [r3, #0]
 803c7c0:	4a86      	ldr	r2, [pc, #536]	; (803c9dc <SIMCOM_DMA_IrqHandler+0xd54>)
 803c7c2:	4293      	cmp	r3, r2
 803c7c4:	d012      	beq.n	803c7ec <SIMCOM_DMA_IrqHandler+0xb64>
 803c7c6:	4b7a      	ldr	r3, [pc, #488]	; (803c9b0 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c7c8:	681b      	ldr	r3, [r3, #0]
 803c7ca:	4a85      	ldr	r2, [pc, #532]	; (803c9e0 <SIMCOM_DMA_IrqHandler+0xd58>)
 803c7cc:	4293      	cmp	r3, r2
 803c7ce:	d00a      	beq.n	803c7e6 <SIMCOM_DMA_IrqHandler+0xb5e>
 803c7d0:	4b77      	ldr	r3, [pc, #476]	; (803c9b0 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c7d2:	681b      	ldr	r3, [r3, #0]
 803c7d4:	4a83      	ldr	r2, [pc, #524]	; (803c9e4 <SIMCOM_DMA_IrqHandler+0xd5c>)
 803c7d6:	4293      	cmp	r3, r2
 803c7d8:	d102      	bne.n	803c7e0 <SIMCOM_DMA_IrqHandler+0xb58>
 803c7da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 803c7de:	e01a      	b.n	803c816 <SIMCOM_DMA_IrqHandler+0xb8e>
 803c7e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 803c7e4:	e017      	b.n	803c816 <SIMCOM_DMA_IrqHandler+0xb8e>
 803c7e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 803c7ea:	e014      	b.n	803c816 <SIMCOM_DMA_IrqHandler+0xb8e>
 803c7ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 803c7f0:	e011      	b.n	803c816 <SIMCOM_DMA_IrqHandler+0xb8e>
 803c7f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 803c7f6:	e00e      	b.n	803c816 <SIMCOM_DMA_IrqHandler+0xb8e>
 803c7f8:	2340      	movs	r3, #64	; 0x40
 803c7fa:	e00c      	b.n	803c816 <SIMCOM_DMA_IrqHandler+0xb8e>
 803c7fc:	2340      	movs	r3, #64	; 0x40
 803c7fe:	e00a      	b.n	803c816 <SIMCOM_DMA_IrqHandler+0xb8e>
 803c800:	2340      	movs	r3, #64	; 0x40
 803c802:	e008      	b.n	803c816 <SIMCOM_DMA_IrqHandler+0xb8e>
 803c804:	2340      	movs	r3, #64	; 0x40
 803c806:	e006      	b.n	803c816 <SIMCOM_DMA_IrqHandler+0xb8e>
 803c808:	2301      	movs	r3, #1
 803c80a:	e004      	b.n	803c816 <SIMCOM_DMA_IrqHandler+0xb8e>
 803c80c:	2301      	movs	r3, #1
 803c80e:	e002      	b.n	803c816 <SIMCOM_DMA_IrqHandler+0xb8e>
 803c810:	2301      	movs	r3, #1
 803c812:	e000      	b.n	803c816 <SIMCOM_DMA_IrqHandler+0xb8e>
 803c814:	2301      	movs	r3, #1
 803c816:	4a74      	ldr	r2, [pc, #464]	; (803c9e8 <SIMCOM_DMA_IrqHandler+0xd60>)
 803c818:	60d3      	str	r3, [r2, #12]
 803c81a:	e147      	b.n	803caac <SIMCOM_DMA_IrqHandler+0xe24>
 803c81c:	4b64      	ldr	r3, [pc, #400]	; (803c9b0 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c81e:	681b      	ldr	r3, [r3, #0]
 803c820:	461a      	mov	r2, r3
 803c822:	4b72      	ldr	r3, [pc, #456]	; (803c9ec <SIMCOM_DMA_IrqHandler+0xd64>)
 803c824:	429a      	cmp	r2, r3
 803c826:	d95c      	bls.n	803c8e2 <SIMCOM_DMA_IrqHandler+0xc5a>
 803c828:	4b61      	ldr	r3, [pc, #388]	; (803c9b0 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c82a:	681b      	ldr	r3, [r3, #0]
 803c82c:	4a62      	ldr	r2, [pc, #392]	; (803c9b8 <SIMCOM_DMA_IrqHandler+0xd30>)
 803c82e:	4293      	cmp	r3, r2
 803c830:	d053      	beq.n	803c8da <SIMCOM_DMA_IrqHandler+0xc52>
 803c832:	4b5f      	ldr	r3, [pc, #380]	; (803c9b0 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c834:	681b      	ldr	r3, [r3, #0]
 803c836:	4a61      	ldr	r2, [pc, #388]	; (803c9bc <SIMCOM_DMA_IrqHandler+0xd34>)
 803c838:	4293      	cmp	r3, r2
 803c83a:	d04c      	beq.n	803c8d6 <SIMCOM_DMA_IrqHandler+0xc4e>
 803c83c:	4b5c      	ldr	r3, [pc, #368]	; (803c9b0 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c83e:	681b      	ldr	r3, [r3, #0]
 803c840:	4a5f      	ldr	r2, [pc, #380]	; (803c9c0 <SIMCOM_DMA_IrqHandler+0xd38>)
 803c842:	4293      	cmp	r3, r2
 803c844:	d045      	beq.n	803c8d2 <SIMCOM_DMA_IrqHandler+0xc4a>
 803c846:	4b5a      	ldr	r3, [pc, #360]	; (803c9b0 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c848:	681b      	ldr	r3, [r3, #0]
 803c84a:	4a5e      	ldr	r2, [pc, #376]	; (803c9c4 <SIMCOM_DMA_IrqHandler+0xd3c>)
 803c84c:	4293      	cmp	r3, r2
 803c84e:	d03e      	beq.n	803c8ce <SIMCOM_DMA_IrqHandler+0xc46>
 803c850:	4b57      	ldr	r3, [pc, #348]	; (803c9b0 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c852:	681b      	ldr	r3, [r3, #0]
 803c854:	4a5c      	ldr	r2, [pc, #368]	; (803c9c8 <SIMCOM_DMA_IrqHandler+0xd40>)
 803c856:	4293      	cmp	r3, r2
 803c858:	d037      	beq.n	803c8ca <SIMCOM_DMA_IrqHandler+0xc42>
 803c85a:	4b55      	ldr	r3, [pc, #340]	; (803c9b0 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c85c:	681b      	ldr	r3, [r3, #0]
 803c85e:	4a5b      	ldr	r2, [pc, #364]	; (803c9cc <SIMCOM_DMA_IrqHandler+0xd44>)
 803c860:	4293      	cmp	r3, r2
 803c862:	d030      	beq.n	803c8c6 <SIMCOM_DMA_IrqHandler+0xc3e>
 803c864:	4b52      	ldr	r3, [pc, #328]	; (803c9b0 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c866:	681b      	ldr	r3, [r3, #0]
 803c868:	4a59      	ldr	r2, [pc, #356]	; (803c9d0 <SIMCOM_DMA_IrqHandler+0xd48>)
 803c86a:	4293      	cmp	r3, r2
 803c86c:	d029      	beq.n	803c8c2 <SIMCOM_DMA_IrqHandler+0xc3a>
 803c86e:	4b50      	ldr	r3, [pc, #320]	; (803c9b0 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c870:	681b      	ldr	r3, [r3, #0]
 803c872:	4a58      	ldr	r2, [pc, #352]	; (803c9d4 <SIMCOM_DMA_IrqHandler+0xd4c>)
 803c874:	4293      	cmp	r3, r2
 803c876:	d022      	beq.n	803c8be <SIMCOM_DMA_IrqHandler+0xc36>
 803c878:	4b4d      	ldr	r3, [pc, #308]	; (803c9b0 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c87a:	681b      	ldr	r3, [r3, #0]
 803c87c:	4a56      	ldr	r2, [pc, #344]	; (803c9d8 <SIMCOM_DMA_IrqHandler+0xd50>)
 803c87e:	4293      	cmp	r3, r2
 803c880:	d01a      	beq.n	803c8b8 <SIMCOM_DMA_IrqHandler+0xc30>
 803c882:	4b4b      	ldr	r3, [pc, #300]	; (803c9b0 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c884:	681b      	ldr	r3, [r3, #0]
 803c886:	4a55      	ldr	r2, [pc, #340]	; (803c9dc <SIMCOM_DMA_IrqHandler+0xd54>)
 803c888:	4293      	cmp	r3, r2
 803c88a:	d012      	beq.n	803c8b2 <SIMCOM_DMA_IrqHandler+0xc2a>
 803c88c:	4b48      	ldr	r3, [pc, #288]	; (803c9b0 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c88e:	681b      	ldr	r3, [r3, #0]
 803c890:	4a53      	ldr	r2, [pc, #332]	; (803c9e0 <SIMCOM_DMA_IrqHandler+0xd58>)
 803c892:	4293      	cmp	r3, r2
 803c894:	d00a      	beq.n	803c8ac <SIMCOM_DMA_IrqHandler+0xc24>
 803c896:	4b46      	ldr	r3, [pc, #280]	; (803c9b0 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c898:	681b      	ldr	r3, [r3, #0]
 803c89a:	4a52      	ldr	r2, [pc, #328]	; (803c9e4 <SIMCOM_DMA_IrqHandler+0xd5c>)
 803c89c:	4293      	cmp	r3, r2
 803c89e:	d102      	bne.n	803c8a6 <SIMCOM_DMA_IrqHandler+0xc1e>
 803c8a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 803c8a4:	e01a      	b.n	803c8dc <SIMCOM_DMA_IrqHandler+0xc54>
 803c8a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 803c8aa:	e017      	b.n	803c8dc <SIMCOM_DMA_IrqHandler+0xc54>
 803c8ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 803c8b0:	e014      	b.n	803c8dc <SIMCOM_DMA_IrqHandler+0xc54>
 803c8b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 803c8b6:	e011      	b.n	803c8dc <SIMCOM_DMA_IrqHandler+0xc54>
 803c8b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 803c8bc:	e00e      	b.n	803c8dc <SIMCOM_DMA_IrqHandler+0xc54>
 803c8be:	2340      	movs	r3, #64	; 0x40
 803c8c0:	e00c      	b.n	803c8dc <SIMCOM_DMA_IrqHandler+0xc54>
 803c8c2:	2340      	movs	r3, #64	; 0x40
 803c8c4:	e00a      	b.n	803c8dc <SIMCOM_DMA_IrqHandler+0xc54>
 803c8c6:	2340      	movs	r3, #64	; 0x40
 803c8c8:	e008      	b.n	803c8dc <SIMCOM_DMA_IrqHandler+0xc54>
 803c8ca:	2340      	movs	r3, #64	; 0x40
 803c8cc:	e006      	b.n	803c8dc <SIMCOM_DMA_IrqHandler+0xc54>
 803c8ce:	2301      	movs	r3, #1
 803c8d0:	e004      	b.n	803c8dc <SIMCOM_DMA_IrqHandler+0xc54>
 803c8d2:	2301      	movs	r3, #1
 803c8d4:	e002      	b.n	803c8dc <SIMCOM_DMA_IrqHandler+0xc54>
 803c8d6:	2301      	movs	r3, #1
 803c8d8:	e000      	b.n	803c8dc <SIMCOM_DMA_IrqHandler+0xc54>
 803c8da:	2301      	movs	r3, #1
 803c8dc:	4a42      	ldr	r2, [pc, #264]	; (803c9e8 <SIMCOM_DMA_IrqHandler+0xd60>)
 803c8de:	6093      	str	r3, [r2, #8]
 803c8e0:	e0e4      	b.n	803caac <SIMCOM_DMA_IrqHandler+0xe24>
 803c8e2:	4b33      	ldr	r3, [pc, #204]	; (803c9b0 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c8e4:	681b      	ldr	r3, [r3, #0]
 803c8e6:	461a      	mov	r2, r3
 803c8e8:	4b41      	ldr	r3, [pc, #260]	; (803c9f0 <SIMCOM_DMA_IrqHandler+0xd68>)
 803c8ea:	429a      	cmp	r2, r3
 803c8ec:	f240 8082 	bls.w	803c9f4 <SIMCOM_DMA_IrqHandler+0xd6c>
 803c8f0:	4b2f      	ldr	r3, [pc, #188]	; (803c9b0 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c8f2:	681b      	ldr	r3, [r3, #0]
 803c8f4:	4a30      	ldr	r2, [pc, #192]	; (803c9b8 <SIMCOM_DMA_IrqHandler+0xd30>)
 803c8f6:	4293      	cmp	r3, r2
 803c8f8:	d053      	beq.n	803c9a2 <SIMCOM_DMA_IrqHandler+0xd1a>
 803c8fa:	4b2d      	ldr	r3, [pc, #180]	; (803c9b0 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c8fc:	681b      	ldr	r3, [r3, #0]
 803c8fe:	4a2f      	ldr	r2, [pc, #188]	; (803c9bc <SIMCOM_DMA_IrqHandler+0xd34>)
 803c900:	4293      	cmp	r3, r2
 803c902:	d04c      	beq.n	803c99e <SIMCOM_DMA_IrqHandler+0xd16>
 803c904:	4b2a      	ldr	r3, [pc, #168]	; (803c9b0 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c906:	681b      	ldr	r3, [r3, #0]
 803c908:	4a2d      	ldr	r2, [pc, #180]	; (803c9c0 <SIMCOM_DMA_IrqHandler+0xd38>)
 803c90a:	4293      	cmp	r3, r2
 803c90c:	d045      	beq.n	803c99a <SIMCOM_DMA_IrqHandler+0xd12>
 803c90e:	4b28      	ldr	r3, [pc, #160]	; (803c9b0 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c910:	681b      	ldr	r3, [r3, #0]
 803c912:	4a2c      	ldr	r2, [pc, #176]	; (803c9c4 <SIMCOM_DMA_IrqHandler+0xd3c>)
 803c914:	4293      	cmp	r3, r2
 803c916:	d03e      	beq.n	803c996 <SIMCOM_DMA_IrqHandler+0xd0e>
 803c918:	4b25      	ldr	r3, [pc, #148]	; (803c9b0 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c91a:	681b      	ldr	r3, [r3, #0]
 803c91c:	4a2a      	ldr	r2, [pc, #168]	; (803c9c8 <SIMCOM_DMA_IrqHandler+0xd40>)
 803c91e:	4293      	cmp	r3, r2
 803c920:	d037      	beq.n	803c992 <SIMCOM_DMA_IrqHandler+0xd0a>
 803c922:	4b23      	ldr	r3, [pc, #140]	; (803c9b0 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c924:	681b      	ldr	r3, [r3, #0]
 803c926:	4a29      	ldr	r2, [pc, #164]	; (803c9cc <SIMCOM_DMA_IrqHandler+0xd44>)
 803c928:	4293      	cmp	r3, r2
 803c92a:	d030      	beq.n	803c98e <SIMCOM_DMA_IrqHandler+0xd06>
 803c92c:	4b20      	ldr	r3, [pc, #128]	; (803c9b0 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c92e:	681b      	ldr	r3, [r3, #0]
 803c930:	4a27      	ldr	r2, [pc, #156]	; (803c9d0 <SIMCOM_DMA_IrqHandler+0xd48>)
 803c932:	4293      	cmp	r3, r2
 803c934:	d029      	beq.n	803c98a <SIMCOM_DMA_IrqHandler+0xd02>
 803c936:	4b1e      	ldr	r3, [pc, #120]	; (803c9b0 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c938:	681b      	ldr	r3, [r3, #0]
 803c93a:	4a26      	ldr	r2, [pc, #152]	; (803c9d4 <SIMCOM_DMA_IrqHandler+0xd4c>)
 803c93c:	4293      	cmp	r3, r2
 803c93e:	d022      	beq.n	803c986 <SIMCOM_DMA_IrqHandler+0xcfe>
 803c940:	4b1b      	ldr	r3, [pc, #108]	; (803c9b0 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c942:	681b      	ldr	r3, [r3, #0]
 803c944:	4a24      	ldr	r2, [pc, #144]	; (803c9d8 <SIMCOM_DMA_IrqHandler+0xd50>)
 803c946:	4293      	cmp	r3, r2
 803c948:	d01a      	beq.n	803c980 <SIMCOM_DMA_IrqHandler+0xcf8>
 803c94a:	4b19      	ldr	r3, [pc, #100]	; (803c9b0 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c94c:	681b      	ldr	r3, [r3, #0]
 803c94e:	4a23      	ldr	r2, [pc, #140]	; (803c9dc <SIMCOM_DMA_IrqHandler+0xd54>)
 803c950:	4293      	cmp	r3, r2
 803c952:	d012      	beq.n	803c97a <SIMCOM_DMA_IrqHandler+0xcf2>
 803c954:	4b16      	ldr	r3, [pc, #88]	; (803c9b0 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c956:	681b      	ldr	r3, [r3, #0]
 803c958:	4a21      	ldr	r2, [pc, #132]	; (803c9e0 <SIMCOM_DMA_IrqHandler+0xd58>)
 803c95a:	4293      	cmp	r3, r2
 803c95c:	d00a      	beq.n	803c974 <SIMCOM_DMA_IrqHandler+0xcec>
 803c95e:	4b14      	ldr	r3, [pc, #80]	; (803c9b0 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c960:	681b      	ldr	r3, [r3, #0]
 803c962:	4a20      	ldr	r2, [pc, #128]	; (803c9e4 <SIMCOM_DMA_IrqHandler+0xd5c>)
 803c964:	4293      	cmp	r3, r2
 803c966:	d102      	bne.n	803c96e <SIMCOM_DMA_IrqHandler+0xce6>
 803c968:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 803c96c:	e01a      	b.n	803c9a4 <SIMCOM_DMA_IrqHandler+0xd1c>
 803c96e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 803c972:	e017      	b.n	803c9a4 <SIMCOM_DMA_IrqHandler+0xd1c>
 803c974:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 803c978:	e014      	b.n	803c9a4 <SIMCOM_DMA_IrqHandler+0xd1c>
 803c97a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 803c97e:	e011      	b.n	803c9a4 <SIMCOM_DMA_IrqHandler+0xd1c>
 803c980:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 803c984:	e00e      	b.n	803c9a4 <SIMCOM_DMA_IrqHandler+0xd1c>
 803c986:	2340      	movs	r3, #64	; 0x40
 803c988:	e00c      	b.n	803c9a4 <SIMCOM_DMA_IrqHandler+0xd1c>
 803c98a:	2340      	movs	r3, #64	; 0x40
 803c98c:	e00a      	b.n	803c9a4 <SIMCOM_DMA_IrqHandler+0xd1c>
 803c98e:	2340      	movs	r3, #64	; 0x40
 803c990:	e008      	b.n	803c9a4 <SIMCOM_DMA_IrqHandler+0xd1c>
 803c992:	2340      	movs	r3, #64	; 0x40
 803c994:	e006      	b.n	803c9a4 <SIMCOM_DMA_IrqHandler+0xd1c>
 803c996:	2301      	movs	r3, #1
 803c998:	e004      	b.n	803c9a4 <SIMCOM_DMA_IrqHandler+0xd1c>
 803c99a:	2301      	movs	r3, #1
 803c99c:	e002      	b.n	803c9a4 <SIMCOM_DMA_IrqHandler+0xd1c>
 803c99e:	2301      	movs	r3, #1
 803c9a0:	e000      	b.n	803c9a4 <SIMCOM_DMA_IrqHandler+0xd1c>
 803c9a2:	2301      	movs	r3, #1
 803c9a4:	4a01      	ldr	r2, [pc, #4]	; (803c9ac <SIMCOM_DMA_IrqHandler+0xd24>)
 803c9a6:	60d3      	str	r3, [r2, #12]
 803c9a8:	e080      	b.n	803caac <SIMCOM_DMA_IrqHandler+0xe24>
 803c9aa:	bf00      	nop
 803c9ac:	40026000 	.word	0x40026000
 803c9b0:	20008748 	.word	0x20008748
 803c9b4:	40026458 	.word	0x40026458
 803c9b8:	40026010 	.word	0x40026010
 803c9bc:	40026410 	.word	0x40026410
 803c9c0:	40026070 	.word	0x40026070
 803c9c4:	40026470 	.word	0x40026470
 803c9c8:	40026028 	.word	0x40026028
 803c9cc:	40026428 	.word	0x40026428
 803c9d0:	40026088 	.word	0x40026088
 803c9d4:	40026488 	.word	0x40026488
 803c9d8:	40026040 	.word	0x40026040
 803c9dc:	40026440 	.word	0x40026440
 803c9e0:	400260a0 	.word	0x400260a0
 803c9e4:	400264a0 	.word	0x400264a0
 803c9e8:	40026400 	.word	0x40026400
 803c9ec:	400260b8 	.word	0x400260b8
 803c9f0:	40026058 	.word	0x40026058
 803c9f4:	4b95      	ldr	r3, [pc, #596]	; (803cc4c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803c9f6:	681b      	ldr	r3, [r3, #0]
 803c9f8:	4a95      	ldr	r2, [pc, #596]	; (803cc50 <SIMCOM_DMA_IrqHandler+0xfc8>)
 803c9fa:	4293      	cmp	r3, r2
 803c9fc:	d053      	beq.n	803caa6 <SIMCOM_DMA_IrqHandler+0xe1e>
 803c9fe:	4b93      	ldr	r3, [pc, #588]	; (803cc4c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803ca00:	681b      	ldr	r3, [r3, #0]
 803ca02:	4a94      	ldr	r2, [pc, #592]	; (803cc54 <SIMCOM_DMA_IrqHandler+0xfcc>)
 803ca04:	4293      	cmp	r3, r2
 803ca06:	d04c      	beq.n	803caa2 <SIMCOM_DMA_IrqHandler+0xe1a>
 803ca08:	4b90      	ldr	r3, [pc, #576]	; (803cc4c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803ca0a:	681b      	ldr	r3, [r3, #0]
 803ca0c:	4a92      	ldr	r2, [pc, #584]	; (803cc58 <SIMCOM_DMA_IrqHandler+0xfd0>)
 803ca0e:	4293      	cmp	r3, r2
 803ca10:	d045      	beq.n	803ca9e <SIMCOM_DMA_IrqHandler+0xe16>
 803ca12:	4b8e      	ldr	r3, [pc, #568]	; (803cc4c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803ca14:	681b      	ldr	r3, [r3, #0]
 803ca16:	4a91      	ldr	r2, [pc, #580]	; (803cc5c <SIMCOM_DMA_IrqHandler+0xfd4>)
 803ca18:	4293      	cmp	r3, r2
 803ca1a:	d03e      	beq.n	803ca9a <SIMCOM_DMA_IrqHandler+0xe12>
 803ca1c:	4b8b      	ldr	r3, [pc, #556]	; (803cc4c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803ca1e:	681b      	ldr	r3, [r3, #0]
 803ca20:	4a8f      	ldr	r2, [pc, #572]	; (803cc60 <SIMCOM_DMA_IrqHandler+0xfd8>)
 803ca22:	4293      	cmp	r3, r2
 803ca24:	d037      	beq.n	803ca96 <SIMCOM_DMA_IrqHandler+0xe0e>
 803ca26:	4b89      	ldr	r3, [pc, #548]	; (803cc4c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803ca28:	681b      	ldr	r3, [r3, #0]
 803ca2a:	4a8e      	ldr	r2, [pc, #568]	; (803cc64 <SIMCOM_DMA_IrqHandler+0xfdc>)
 803ca2c:	4293      	cmp	r3, r2
 803ca2e:	d030      	beq.n	803ca92 <SIMCOM_DMA_IrqHandler+0xe0a>
 803ca30:	4b86      	ldr	r3, [pc, #536]	; (803cc4c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803ca32:	681b      	ldr	r3, [r3, #0]
 803ca34:	4a8c      	ldr	r2, [pc, #560]	; (803cc68 <SIMCOM_DMA_IrqHandler+0xfe0>)
 803ca36:	4293      	cmp	r3, r2
 803ca38:	d029      	beq.n	803ca8e <SIMCOM_DMA_IrqHandler+0xe06>
 803ca3a:	4b84      	ldr	r3, [pc, #528]	; (803cc4c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803ca3c:	681b      	ldr	r3, [r3, #0]
 803ca3e:	4a8b      	ldr	r2, [pc, #556]	; (803cc6c <SIMCOM_DMA_IrqHandler+0xfe4>)
 803ca40:	4293      	cmp	r3, r2
 803ca42:	d022      	beq.n	803ca8a <SIMCOM_DMA_IrqHandler+0xe02>
 803ca44:	4b81      	ldr	r3, [pc, #516]	; (803cc4c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803ca46:	681b      	ldr	r3, [r3, #0]
 803ca48:	4a89      	ldr	r2, [pc, #548]	; (803cc70 <SIMCOM_DMA_IrqHandler+0xfe8>)
 803ca4a:	4293      	cmp	r3, r2
 803ca4c:	d01a      	beq.n	803ca84 <SIMCOM_DMA_IrqHandler+0xdfc>
 803ca4e:	4b7f      	ldr	r3, [pc, #508]	; (803cc4c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803ca50:	681b      	ldr	r3, [r3, #0]
 803ca52:	4a88      	ldr	r2, [pc, #544]	; (803cc74 <SIMCOM_DMA_IrqHandler+0xfec>)
 803ca54:	4293      	cmp	r3, r2
 803ca56:	d012      	beq.n	803ca7e <SIMCOM_DMA_IrqHandler+0xdf6>
 803ca58:	4b7c      	ldr	r3, [pc, #496]	; (803cc4c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803ca5a:	681b      	ldr	r3, [r3, #0]
 803ca5c:	4a86      	ldr	r2, [pc, #536]	; (803cc78 <SIMCOM_DMA_IrqHandler+0xff0>)
 803ca5e:	4293      	cmp	r3, r2
 803ca60:	d00a      	beq.n	803ca78 <SIMCOM_DMA_IrqHandler+0xdf0>
 803ca62:	4b7a      	ldr	r3, [pc, #488]	; (803cc4c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803ca64:	681b      	ldr	r3, [r3, #0]
 803ca66:	4a85      	ldr	r2, [pc, #532]	; (803cc7c <SIMCOM_DMA_IrqHandler+0xff4>)
 803ca68:	4293      	cmp	r3, r2
 803ca6a:	d102      	bne.n	803ca72 <SIMCOM_DMA_IrqHandler+0xdea>
 803ca6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 803ca70:	e01a      	b.n	803caa8 <SIMCOM_DMA_IrqHandler+0xe20>
 803ca72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 803ca76:	e017      	b.n	803caa8 <SIMCOM_DMA_IrqHandler+0xe20>
 803ca78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 803ca7c:	e014      	b.n	803caa8 <SIMCOM_DMA_IrqHandler+0xe20>
 803ca7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 803ca82:	e011      	b.n	803caa8 <SIMCOM_DMA_IrqHandler+0xe20>
 803ca84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 803ca88:	e00e      	b.n	803caa8 <SIMCOM_DMA_IrqHandler+0xe20>
 803ca8a:	2340      	movs	r3, #64	; 0x40
 803ca8c:	e00c      	b.n	803caa8 <SIMCOM_DMA_IrqHandler+0xe20>
 803ca8e:	2340      	movs	r3, #64	; 0x40
 803ca90:	e00a      	b.n	803caa8 <SIMCOM_DMA_IrqHandler+0xe20>
 803ca92:	2340      	movs	r3, #64	; 0x40
 803ca94:	e008      	b.n	803caa8 <SIMCOM_DMA_IrqHandler+0xe20>
 803ca96:	2340      	movs	r3, #64	; 0x40
 803ca98:	e006      	b.n	803caa8 <SIMCOM_DMA_IrqHandler+0xe20>
 803ca9a:	2301      	movs	r3, #1
 803ca9c:	e004      	b.n	803caa8 <SIMCOM_DMA_IrqHandler+0xe20>
 803ca9e:	2301      	movs	r3, #1
 803caa0:	e002      	b.n	803caa8 <SIMCOM_DMA_IrqHandler+0xe20>
 803caa2:	2301      	movs	r3, #1
 803caa4:	e000      	b.n	803caa8 <SIMCOM_DMA_IrqHandler+0xe20>
 803caa6:	2301      	movs	r3, #1
 803caa8:	4a75      	ldr	r2, [pc, #468]	; (803cc80 <SIMCOM_DMA_IrqHandler+0xff8>)
 803caaa:	6093      	str	r3, [r2, #8]
        __HAL_DMA_CLEAR_FLAG(&hdma_usart1_rx, __HAL_DMA_GET_DME_FLAG_INDEX(&hdma_usart1_rx));
 803caac:	4b67      	ldr	r3, [pc, #412]	; (803cc4c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803caae:	681b      	ldr	r3, [r3, #0]
 803cab0:	461a      	mov	r2, r3
 803cab2:	4b74      	ldr	r3, [pc, #464]	; (803cc84 <SIMCOM_DMA_IrqHandler+0xffc>)
 803cab4:	429a      	cmp	r2, r3
 803cab6:	d960      	bls.n	803cb7a <SIMCOM_DMA_IrqHandler+0xef2>
 803cab8:	4b64      	ldr	r3, [pc, #400]	; (803cc4c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803caba:	681b      	ldr	r3, [r3, #0]
 803cabc:	4a64      	ldr	r2, [pc, #400]	; (803cc50 <SIMCOM_DMA_IrqHandler+0xfc8>)
 803cabe:	4293      	cmp	r3, r2
 803cac0:	d057      	beq.n	803cb72 <SIMCOM_DMA_IrqHandler+0xeea>
 803cac2:	4b62      	ldr	r3, [pc, #392]	; (803cc4c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803cac4:	681b      	ldr	r3, [r3, #0]
 803cac6:	4a63      	ldr	r2, [pc, #396]	; (803cc54 <SIMCOM_DMA_IrqHandler+0xfcc>)
 803cac8:	4293      	cmp	r3, r2
 803caca:	d050      	beq.n	803cb6e <SIMCOM_DMA_IrqHandler+0xee6>
 803cacc:	4b5f      	ldr	r3, [pc, #380]	; (803cc4c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803cace:	681b      	ldr	r3, [r3, #0]
 803cad0:	4a61      	ldr	r2, [pc, #388]	; (803cc58 <SIMCOM_DMA_IrqHandler+0xfd0>)
 803cad2:	4293      	cmp	r3, r2
 803cad4:	d049      	beq.n	803cb6a <SIMCOM_DMA_IrqHandler+0xee2>
 803cad6:	4b5d      	ldr	r3, [pc, #372]	; (803cc4c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803cad8:	681b      	ldr	r3, [r3, #0]
 803cada:	4a60      	ldr	r2, [pc, #384]	; (803cc5c <SIMCOM_DMA_IrqHandler+0xfd4>)
 803cadc:	4293      	cmp	r3, r2
 803cade:	d042      	beq.n	803cb66 <SIMCOM_DMA_IrqHandler+0xede>
 803cae0:	4b5a      	ldr	r3, [pc, #360]	; (803cc4c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803cae2:	681b      	ldr	r3, [r3, #0]
 803cae4:	4a5e      	ldr	r2, [pc, #376]	; (803cc60 <SIMCOM_DMA_IrqHandler+0xfd8>)
 803cae6:	4293      	cmp	r3, r2
 803cae8:	d03a      	beq.n	803cb60 <SIMCOM_DMA_IrqHandler+0xed8>
 803caea:	4b58      	ldr	r3, [pc, #352]	; (803cc4c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803caec:	681b      	ldr	r3, [r3, #0]
 803caee:	4a5d      	ldr	r2, [pc, #372]	; (803cc64 <SIMCOM_DMA_IrqHandler+0xfdc>)
 803caf0:	4293      	cmp	r3, r2
 803caf2:	d032      	beq.n	803cb5a <SIMCOM_DMA_IrqHandler+0xed2>
 803caf4:	4b55      	ldr	r3, [pc, #340]	; (803cc4c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803caf6:	681b      	ldr	r3, [r3, #0]
 803caf8:	4a5b      	ldr	r2, [pc, #364]	; (803cc68 <SIMCOM_DMA_IrqHandler+0xfe0>)
 803cafa:	4293      	cmp	r3, r2
 803cafc:	d02a      	beq.n	803cb54 <SIMCOM_DMA_IrqHandler+0xecc>
 803cafe:	4b53      	ldr	r3, [pc, #332]	; (803cc4c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803cb00:	681b      	ldr	r3, [r3, #0]
 803cb02:	4a5a      	ldr	r2, [pc, #360]	; (803cc6c <SIMCOM_DMA_IrqHandler+0xfe4>)
 803cb04:	4293      	cmp	r3, r2
 803cb06:	d022      	beq.n	803cb4e <SIMCOM_DMA_IrqHandler+0xec6>
 803cb08:	4b50      	ldr	r3, [pc, #320]	; (803cc4c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803cb0a:	681b      	ldr	r3, [r3, #0]
 803cb0c:	4a58      	ldr	r2, [pc, #352]	; (803cc70 <SIMCOM_DMA_IrqHandler+0xfe8>)
 803cb0e:	4293      	cmp	r3, r2
 803cb10:	d01a      	beq.n	803cb48 <SIMCOM_DMA_IrqHandler+0xec0>
 803cb12:	4b4e      	ldr	r3, [pc, #312]	; (803cc4c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803cb14:	681b      	ldr	r3, [r3, #0]
 803cb16:	4a57      	ldr	r2, [pc, #348]	; (803cc74 <SIMCOM_DMA_IrqHandler+0xfec>)
 803cb18:	4293      	cmp	r3, r2
 803cb1a:	d012      	beq.n	803cb42 <SIMCOM_DMA_IrqHandler+0xeba>
 803cb1c:	4b4b      	ldr	r3, [pc, #300]	; (803cc4c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803cb1e:	681b      	ldr	r3, [r3, #0]
 803cb20:	4a55      	ldr	r2, [pc, #340]	; (803cc78 <SIMCOM_DMA_IrqHandler+0xff0>)
 803cb22:	4293      	cmp	r3, r2
 803cb24:	d00a      	beq.n	803cb3c <SIMCOM_DMA_IrqHandler+0xeb4>
 803cb26:	4b49      	ldr	r3, [pc, #292]	; (803cc4c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803cb28:	681b      	ldr	r3, [r3, #0]
 803cb2a:	4a54      	ldr	r2, [pc, #336]	; (803cc7c <SIMCOM_DMA_IrqHandler+0xff4>)
 803cb2c:	4293      	cmp	r3, r2
 803cb2e:	d102      	bne.n	803cb36 <SIMCOM_DMA_IrqHandler+0xeae>
 803cb30:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 803cb34:	e01e      	b.n	803cb74 <SIMCOM_DMA_IrqHandler+0xeec>
 803cb36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 803cb3a:	e01b      	b.n	803cb74 <SIMCOM_DMA_IrqHandler+0xeec>
 803cb3c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 803cb40:	e018      	b.n	803cb74 <SIMCOM_DMA_IrqHandler+0xeec>
 803cb42:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 803cb46:	e015      	b.n	803cb74 <SIMCOM_DMA_IrqHandler+0xeec>
 803cb48:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 803cb4c:	e012      	b.n	803cb74 <SIMCOM_DMA_IrqHandler+0xeec>
 803cb4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 803cb52:	e00f      	b.n	803cb74 <SIMCOM_DMA_IrqHandler+0xeec>
 803cb54:	f44f 7380 	mov.w	r3, #256	; 0x100
 803cb58:	e00c      	b.n	803cb74 <SIMCOM_DMA_IrqHandler+0xeec>
 803cb5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 803cb5e:	e009      	b.n	803cb74 <SIMCOM_DMA_IrqHandler+0xeec>
 803cb60:	f44f 7380 	mov.w	r3, #256	; 0x100
 803cb64:	e006      	b.n	803cb74 <SIMCOM_DMA_IrqHandler+0xeec>
 803cb66:	2304      	movs	r3, #4
 803cb68:	e004      	b.n	803cb74 <SIMCOM_DMA_IrqHandler+0xeec>
 803cb6a:	2304      	movs	r3, #4
 803cb6c:	e002      	b.n	803cb74 <SIMCOM_DMA_IrqHandler+0xeec>
 803cb6e:	2304      	movs	r3, #4
 803cb70:	e000      	b.n	803cb74 <SIMCOM_DMA_IrqHandler+0xeec>
 803cb72:	2304      	movs	r3, #4
 803cb74:	4a44      	ldr	r2, [pc, #272]	; (803cc88 <SIMCOM_DMA_IrqHandler+0x1000>)
 803cb76:	60d3      	str	r3, [r2, #12]
 803cb78:	e151      	b.n	803ce1e <SIMCOM_DMA_IrqHandler+0x1196>
 803cb7a:	4b34      	ldr	r3, [pc, #208]	; (803cc4c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803cb7c:	681b      	ldr	r3, [r3, #0]
 803cb7e:	461a      	mov	r2, r3
 803cb80:	4b42      	ldr	r3, [pc, #264]	; (803cc8c <SIMCOM_DMA_IrqHandler+0x1004>)
 803cb82:	429a      	cmp	r2, r3
 803cb84:	f240 8084 	bls.w	803cc90 <SIMCOM_DMA_IrqHandler+0x1008>
 803cb88:	4b30      	ldr	r3, [pc, #192]	; (803cc4c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803cb8a:	681b      	ldr	r3, [r3, #0]
 803cb8c:	4a30      	ldr	r2, [pc, #192]	; (803cc50 <SIMCOM_DMA_IrqHandler+0xfc8>)
 803cb8e:	4293      	cmp	r3, r2
 803cb90:	d057      	beq.n	803cc42 <SIMCOM_DMA_IrqHandler+0xfba>
 803cb92:	4b2e      	ldr	r3, [pc, #184]	; (803cc4c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803cb94:	681b      	ldr	r3, [r3, #0]
 803cb96:	4a2f      	ldr	r2, [pc, #188]	; (803cc54 <SIMCOM_DMA_IrqHandler+0xfcc>)
 803cb98:	4293      	cmp	r3, r2
 803cb9a:	d050      	beq.n	803cc3e <SIMCOM_DMA_IrqHandler+0xfb6>
 803cb9c:	4b2b      	ldr	r3, [pc, #172]	; (803cc4c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803cb9e:	681b      	ldr	r3, [r3, #0]
 803cba0:	4a2d      	ldr	r2, [pc, #180]	; (803cc58 <SIMCOM_DMA_IrqHandler+0xfd0>)
 803cba2:	4293      	cmp	r3, r2
 803cba4:	d049      	beq.n	803cc3a <SIMCOM_DMA_IrqHandler+0xfb2>
 803cba6:	4b29      	ldr	r3, [pc, #164]	; (803cc4c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803cba8:	681b      	ldr	r3, [r3, #0]
 803cbaa:	4a2c      	ldr	r2, [pc, #176]	; (803cc5c <SIMCOM_DMA_IrqHandler+0xfd4>)
 803cbac:	4293      	cmp	r3, r2
 803cbae:	d042      	beq.n	803cc36 <SIMCOM_DMA_IrqHandler+0xfae>
 803cbb0:	4b26      	ldr	r3, [pc, #152]	; (803cc4c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803cbb2:	681b      	ldr	r3, [r3, #0]
 803cbb4:	4a2a      	ldr	r2, [pc, #168]	; (803cc60 <SIMCOM_DMA_IrqHandler+0xfd8>)
 803cbb6:	4293      	cmp	r3, r2
 803cbb8:	d03a      	beq.n	803cc30 <SIMCOM_DMA_IrqHandler+0xfa8>
 803cbba:	4b24      	ldr	r3, [pc, #144]	; (803cc4c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803cbbc:	681b      	ldr	r3, [r3, #0]
 803cbbe:	4a29      	ldr	r2, [pc, #164]	; (803cc64 <SIMCOM_DMA_IrqHandler+0xfdc>)
 803cbc0:	4293      	cmp	r3, r2
 803cbc2:	d032      	beq.n	803cc2a <SIMCOM_DMA_IrqHandler+0xfa2>
 803cbc4:	4b21      	ldr	r3, [pc, #132]	; (803cc4c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803cbc6:	681b      	ldr	r3, [r3, #0]
 803cbc8:	4a27      	ldr	r2, [pc, #156]	; (803cc68 <SIMCOM_DMA_IrqHandler+0xfe0>)
 803cbca:	4293      	cmp	r3, r2
 803cbcc:	d02a      	beq.n	803cc24 <SIMCOM_DMA_IrqHandler+0xf9c>
 803cbce:	4b1f      	ldr	r3, [pc, #124]	; (803cc4c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803cbd0:	681b      	ldr	r3, [r3, #0]
 803cbd2:	4a26      	ldr	r2, [pc, #152]	; (803cc6c <SIMCOM_DMA_IrqHandler+0xfe4>)
 803cbd4:	4293      	cmp	r3, r2
 803cbd6:	d022      	beq.n	803cc1e <SIMCOM_DMA_IrqHandler+0xf96>
 803cbd8:	4b1c      	ldr	r3, [pc, #112]	; (803cc4c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803cbda:	681b      	ldr	r3, [r3, #0]
 803cbdc:	4a24      	ldr	r2, [pc, #144]	; (803cc70 <SIMCOM_DMA_IrqHandler+0xfe8>)
 803cbde:	4293      	cmp	r3, r2
 803cbe0:	d01a      	beq.n	803cc18 <SIMCOM_DMA_IrqHandler+0xf90>
 803cbe2:	4b1a      	ldr	r3, [pc, #104]	; (803cc4c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803cbe4:	681b      	ldr	r3, [r3, #0]
 803cbe6:	4a23      	ldr	r2, [pc, #140]	; (803cc74 <SIMCOM_DMA_IrqHandler+0xfec>)
 803cbe8:	4293      	cmp	r3, r2
 803cbea:	d012      	beq.n	803cc12 <SIMCOM_DMA_IrqHandler+0xf8a>
 803cbec:	4b17      	ldr	r3, [pc, #92]	; (803cc4c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803cbee:	681b      	ldr	r3, [r3, #0]
 803cbf0:	4a21      	ldr	r2, [pc, #132]	; (803cc78 <SIMCOM_DMA_IrqHandler+0xff0>)
 803cbf2:	4293      	cmp	r3, r2
 803cbf4:	d00a      	beq.n	803cc0c <SIMCOM_DMA_IrqHandler+0xf84>
 803cbf6:	4b15      	ldr	r3, [pc, #84]	; (803cc4c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803cbf8:	681b      	ldr	r3, [r3, #0]
 803cbfa:	4a20      	ldr	r2, [pc, #128]	; (803cc7c <SIMCOM_DMA_IrqHandler+0xff4>)
 803cbfc:	4293      	cmp	r3, r2
 803cbfe:	d102      	bne.n	803cc06 <SIMCOM_DMA_IrqHandler+0xf7e>
 803cc00:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 803cc04:	e01e      	b.n	803cc44 <SIMCOM_DMA_IrqHandler+0xfbc>
 803cc06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 803cc0a:	e01b      	b.n	803cc44 <SIMCOM_DMA_IrqHandler+0xfbc>
 803cc0c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 803cc10:	e018      	b.n	803cc44 <SIMCOM_DMA_IrqHandler+0xfbc>
 803cc12:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 803cc16:	e015      	b.n	803cc44 <SIMCOM_DMA_IrqHandler+0xfbc>
 803cc18:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 803cc1c:	e012      	b.n	803cc44 <SIMCOM_DMA_IrqHandler+0xfbc>
 803cc1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 803cc22:	e00f      	b.n	803cc44 <SIMCOM_DMA_IrqHandler+0xfbc>
 803cc24:	f44f 7380 	mov.w	r3, #256	; 0x100
 803cc28:	e00c      	b.n	803cc44 <SIMCOM_DMA_IrqHandler+0xfbc>
 803cc2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 803cc2e:	e009      	b.n	803cc44 <SIMCOM_DMA_IrqHandler+0xfbc>
 803cc30:	f44f 7380 	mov.w	r3, #256	; 0x100
 803cc34:	e006      	b.n	803cc44 <SIMCOM_DMA_IrqHandler+0xfbc>
 803cc36:	2304      	movs	r3, #4
 803cc38:	e004      	b.n	803cc44 <SIMCOM_DMA_IrqHandler+0xfbc>
 803cc3a:	2304      	movs	r3, #4
 803cc3c:	e002      	b.n	803cc44 <SIMCOM_DMA_IrqHandler+0xfbc>
 803cc3e:	2304      	movs	r3, #4
 803cc40:	e000      	b.n	803cc44 <SIMCOM_DMA_IrqHandler+0xfbc>
 803cc42:	2304      	movs	r3, #4
 803cc44:	4a10      	ldr	r2, [pc, #64]	; (803cc88 <SIMCOM_DMA_IrqHandler+0x1000>)
 803cc46:	6093      	str	r3, [r2, #8]
 803cc48:	e0e9      	b.n	803ce1e <SIMCOM_DMA_IrqHandler+0x1196>
 803cc4a:	bf00      	nop
 803cc4c:	20008748 	.word	0x20008748
 803cc50:	40026010 	.word	0x40026010
 803cc54:	40026410 	.word	0x40026410
 803cc58:	40026070 	.word	0x40026070
 803cc5c:	40026470 	.word	0x40026470
 803cc60:	40026028 	.word	0x40026028
 803cc64:	40026428 	.word	0x40026428
 803cc68:	40026088 	.word	0x40026088
 803cc6c:	40026488 	.word	0x40026488
 803cc70:	40026040 	.word	0x40026040
 803cc74:	40026440 	.word	0x40026440
 803cc78:	400260a0 	.word	0x400260a0
 803cc7c:	400264a0 	.word	0x400264a0
 803cc80:	40026000 	.word	0x40026000
 803cc84:	40026458 	.word	0x40026458
 803cc88:	40026400 	.word	0x40026400
 803cc8c:	400260b8 	.word	0x400260b8
 803cc90:	4b66      	ldr	r3, [pc, #408]	; (803ce2c <SIMCOM_DMA_IrqHandler+0x11a4>)
 803cc92:	681b      	ldr	r3, [r3, #0]
 803cc94:	461a      	mov	r2, r3
 803cc96:	4b66      	ldr	r3, [pc, #408]	; (803ce30 <SIMCOM_DMA_IrqHandler+0x11a8>)
 803cc98:	429a      	cmp	r2, r3
 803cc9a:	d960      	bls.n	803cd5e <SIMCOM_DMA_IrqHandler+0x10d6>
 803cc9c:	4b63      	ldr	r3, [pc, #396]	; (803ce2c <SIMCOM_DMA_IrqHandler+0x11a4>)
 803cc9e:	681b      	ldr	r3, [r3, #0]
 803cca0:	4a64      	ldr	r2, [pc, #400]	; (803ce34 <SIMCOM_DMA_IrqHandler+0x11ac>)
 803cca2:	4293      	cmp	r3, r2
 803cca4:	d057      	beq.n	803cd56 <SIMCOM_DMA_IrqHandler+0x10ce>
 803cca6:	4b61      	ldr	r3, [pc, #388]	; (803ce2c <SIMCOM_DMA_IrqHandler+0x11a4>)
 803cca8:	681b      	ldr	r3, [r3, #0]
 803ccaa:	4a63      	ldr	r2, [pc, #396]	; (803ce38 <SIMCOM_DMA_IrqHandler+0x11b0>)
 803ccac:	4293      	cmp	r3, r2
 803ccae:	d050      	beq.n	803cd52 <SIMCOM_DMA_IrqHandler+0x10ca>
 803ccb0:	4b5e      	ldr	r3, [pc, #376]	; (803ce2c <SIMCOM_DMA_IrqHandler+0x11a4>)
 803ccb2:	681b      	ldr	r3, [r3, #0]
 803ccb4:	4a61      	ldr	r2, [pc, #388]	; (803ce3c <SIMCOM_DMA_IrqHandler+0x11b4>)
 803ccb6:	4293      	cmp	r3, r2
 803ccb8:	d049      	beq.n	803cd4e <SIMCOM_DMA_IrqHandler+0x10c6>
 803ccba:	4b5c      	ldr	r3, [pc, #368]	; (803ce2c <SIMCOM_DMA_IrqHandler+0x11a4>)
 803ccbc:	681b      	ldr	r3, [r3, #0]
 803ccbe:	4a60      	ldr	r2, [pc, #384]	; (803ce40 <SIMCOM_DMA_IrqHandler+0x11b8>)
 803ccc0:	4293      	cmp	r3, r2
 803ccc2:	d042      	beq.n	803cd4a <SIMCOM_DMA_IrqHandler+0x10c2>
 803ccc4:	4b59      	ldr	r3, [pc, #356]	; (803ce2c <SIMCOM_DMA_IrqHandler+0x11a4>)
 803ccc6:	681b      	ldr	r3, [r3, #0]
 803ccc8:	4a5e      	ldr	r2, [pc, #376]	; (803ce44 <SIMCOM_DMA_IrqHandler+0x11bc>)
 803ccca:	4293      	cmp	r3, r2
 803cccc:	d03a      	beq.n	803cd44 <SIMCOM_DMA_IrqHandler+0x10bc>
 803ccce:	4b57      	ldr	r3, [pc, #348]	; (803ce2c <SIMCOM_DMA_IrqHandler+0x11a4>)
 803ccd0:	681b      	ldr	r3, [r3, #0]
 803ccd2:	4a5d      	ldr	r2, [pc, #372]	; (803ce48 <SIMCOM_DMA_IrqHandler+0x11c0>)
 803ccd4:	4293      	cmp	r3, r2
 803ccd6:	d032      	beq.n	803cd3e <SIMCOM_DMA_IrqHandler+0x10b6>
 803ccd8:	4b54      	ldr	r3, [pc, #336]	; (803ce2c <SIMCOM_DMA_IrqHandler+0x11a4>)
 803ccda:	681b      	ldr	r3, [r3, #0]
 803ccdc:	4a5b      	ldr	r2, [pc, #364]	; (803ce4c <SIMCOM_DMA_IrqHandler+0x11c4>)
 803ccde:	4293      	cmp	r3, r2
 803cce0:	d02a      	beq.n	803cd38 <SIMCOM_DMA_IrqHandler+0x10b0>
 803cce2:	4b52      	ldr	r3, [pc, #328]	; (803ce2c <SIMCOM_DMA_IrqHandler+0x11a4>)
 803cce4:	681b      	ldr	r3, [r3, #0]
 803cce6:	4a5a      	ldr	r2, [pc, #360]	; (803ce50 <SIMCOM_DMA_IrqHandler+0x11c8>)
 803cce8:	4293      	cmp	r3, r2
 803ccea:	d022      	beq.n	803cd32 <SIMCOM_DMA_IrqHandler+0x10aa>
 803ccec:	4b4f      	ldr	r3, [pc, #316]	; (803ce2c <SIMCOM_DMA_IrqHandler+0x11a4>)
 803ccee:	681b      	ldr	r3, [r3, #0]
 803ccf0:	4a58      	ldr	r2, [pc, #352]	; (803ce54 <SIMCOM_DMA_IrqHandler+0x11cc>)
 803ccf2:	4293      	cmp	r3, r2
 803ccf4:	d01a      	beq.n	803cd2c <SIMCOM_DMA_IrqHandler+0x10a4>
 803ccf6:	4b4d      	ldr	r3, [pc, #308]	; (803ce2c <SIMCOM_DMA_IrqHandler+0x11a4>)
 803ccf8:	681b      	ldr	r3, [r3, #0]
 803ccfa:	4a57      	ldr	r2, [pc, #348]	; (803ce58 <SIMCOM_DMA_IrqHandler+0x11d0>)
 803ccfc:	4293      	cmp	r3, r2
 803ccfe:	d012      	beq.n	803cd26 <SIMCOM_DMA_IrqHandler+0x109e>
 803cd00:	4b4a      	ldr	r3, [pc, #296]	; (803ce2c <SIMCOM_DMA_IrqHandler+0x11a4>)
 803cd02:	681b      	ldr	r3, [r3, #0]
 803cd04:	4a55      	ldr	r2, [pc, #340]	; (803ce5c <SIMCOM_DMA_IrqHandler+0x11d4>)
 803cd06:	4293      	cmp	r3, r2
 803cd08:	d00a      	beq.n	803cd20 <SIMCOM_DMA_IrqHandler+0x1098>
 803cd0a:	4b48      	ldr	r3, [pc, #288]	; (803ce2c <SIMCOM_DMA_IrqHandler+0x11a4>)
 803cd0c:	681b      	ldr	r3, [r3, #0]
 803cd0e:	4a54      	ldr	r2, [pc, #336]	; (803ce60 <SIMCOM_DMA_IrqHandler+0x11d8>)
 803cd10:	4293      	cmp	r3, r2
 803cd12:	d102      	bne.n	803cd1a <SIMCOM_DMA_IrqHandler+0x1092>
 803cd14:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 803cd18:	e01e      	b.n	803cd58 <SIMCOM_DMA_IrqHandler+0x10d0>
 803cd1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 803cd1e:	e01b      	b.n	803cd58 <SIMCOM_DMA_IrqHandler+0x10d0>
 803cd20:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 803cd24:	e018      	b.n	803cd58 <SIMCOM_DMA_IrqHandler+0x10d0>
 803cd26:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 803cd2a:	e015      	b.n	803cd58 <SIMCOM_DMA_IrqHandler+0x10d0>
 803cd2c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 803cd30:	e012      	b.n	803cd58 <SIMCOM_DMA_IrqHandler+0x10d0>
 803cd32:	f44f 7380 	mov.w	r3, #256	; 0x100
 803cd36:	e00f      	b.n	803cd58 <SIMCOM_DMA_IrqHandler+0x10d0>
 803cd38:	f44f 7380 	mov.w	r3, #256	; 0x100
 803cd3c:	e00c      	b.n	803cd58 <SIMCOM_DMA_IrqHandler+0x10d0>
 803cd3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 803cd42:	e009      	b.n	803cd58 <SIMCOM_DMA_IrqHandler+0x10d0>
 803cd44:	f44f 7380 	mov.w	r3, #256	; 0x100
 803cd48:	e006      	b.n	803cd58 <SIMCOM_DMA_IrqHandler+0x10d0>
 803cd4a:	2304      	movs	r3, #4
 803cd4c:	e004      	b.n	803cd58 <SIMCOM_DMA_IrqHandler+0x10d0>
 803cd4e:	2304      	movs	r3, #4
 803cd50:	e002      	b.n	803cd58 <SIMCOM_DMA_IrqHandler+0x10d0>
 803cd52:	2304      	movs	r3, #4
 803cd54:	e000      	b.n	803cd58 <SIMCOM_DMA_IrqHandler+0x10d0>
 803cd56:	2304      	movs	r3, #4
 803cd58:	4a42      	ldr	r2, [pc, #264]	; (803ce64 <SIMCOM_DMA_IrqHandler+0x11dc>)
 803cd5a:	60d3      	str	r3, [r2, #12]
 803cd5c:	e05f      	b.n	803ce1e <SIMCOM_DMA_IrqHandler+0x1196>
 803cd5e:	4b33      	ldr	r3, [pc, #204]	; (803ce2c <SIMCOM_DMA_IrqHandler+0x11a4>)
 803cd60:	681b      	ldr	r3, [r3, #0]
 803cd62:	4a34      	ldr	r2, [pc, #208]	; (803ce34 <SIMCOM_DMA_IrqHandler+0x11ac>)
 803cd64:	4293      	cmp	r3, r2
 803cd66:	d057      	beq.n	803ce18 <SIMCOM_DMA_IrqHandler+0x1190>
 803cd68:	4b30      	ldr	r3, [pc, #192]	; (803ce2c <SIMCOM_DMA_IrqHandler+0x11a4>)
 803cd6a:	681b      	ldr	r3, [r3, #0]
 803cd6c:	4a32      	ldr	r2, [pc, #200]	; (803ce38 <SIMCOM_DMA_IrqHandler+0x11b0>)
 803cd6e:	4293      	cmp	r3, r2
 803cd70:	d050      	beq.n	803ce14 <SIMCOM_DMA_IrqHandler+0x118c>
 803cd72:	4b2e      	ldr	r3, [pc, #184]	; (803ce2c <SIMCOM_DMA_IrqHandler+0x11a4>)
 803cd74:	681b      	ldr	r3, [r3, #0]
 803cd76:	4a31      	ldr	r2, [pc, #196]	; (803ce3c <SIMCOM_DMA_IrqHandler+0x11b4>)
 803cd78:	4293      	cmp	r3, r2
 803cd7a:	d049      	beq.n	803ce10 <SIMCOM_DMA_IrqHandler+0x1188>
 803cd7c:	4b2b      	ldr	r3, [pc, #172]	; (803ce2c <SIMCOM_DMA_IrqHandler+0x11a4>)
 803cd7e:	681b      	ldr	r3, [r3, #0]
 803cd80:	4a2f      	ldr	r2, [pc, #188]	; (803ce40 <SIMCOM_DMA_IrqHandler+0x11b8>)
 803cd82:	4293      	cmp	r3, r2
 803cd84:	d042      	beq.n	803ce0c <SIMCOM_DMA_IrqHandler+0x1184>
 803cd86:	4b29      	ldr	r3, [pc, #164]	; (803ce2c <SIMCOM_DMA_IrqHandler+0x11a4>)
 803cd88:	681b      	ldr	r3, [r3, #0]
 803cd8a:	4a2e      	ldr	r2, [pc, #184]	; (803ce44 <SIMCOM_DMA_IrqHandler+0x11bc>)
 803cd8c:	4293      	cmp	r3, r2
 803cd8e:	d03a      	beq.n	803ce06 <SIMCOM_DMA_IrqHandler+0x117e>
 803cd90:	4b26      	ldr	r3, [pc, #152]	; (803ce2c <SIMCOM_DMA_IrqHandler+0x11a4>)
 803cd92:	681b      	ldr	r3, [r3, #0]
 803cd94:	4a2c      	ldr	r2, [pc, #176]	; (803ce48 <SIMCOM_DMA_IrqHandler+0x11c0>)
 803cd96:	4293      	cmp	r3, r2
 803cd98:	d032      	beq.n	803ce00 <SIMCOM_DMA_IrqHandler+0x1178>
 803cd9a:	4b24      	ldr	r3, [pc, #144]	; (803ce2c <SIMCOM_DMA_IrqHandler+0x11a4>)
 803cd9c:	681b      	ldr	r3, [r3, #0]
 803cd9e:	4a2b      	ldr	r2, [pc, #172]	; (803ce4c <SIMCOM_DMA_IrqHandler+0x11c4>)
 803cda0:	4293      	cmp	r3, r2
 803cda2:	d02a      	beq.n	803cdfa <SIMCOM_DMA_IrqHandler+0x1172>
 803cda4:	4b21      	ldr	r3, [pc, #132]	; (803ce2c <SIMCOM_DMA_IrqHandler+0x11a4>)
 803cda6:	681b      	ldr	r3, [r3, #0]
 803cda8:	4a29      	ldr	r2, [pc, #164]	; (803ce50 <SIMCOM_DMA_IrqHandler+0x11c8>)
 803cdaa:	4293      	cmp	r3, r2
 803cdac:	d022      	beq.n	803cdf4 <SIMCOM_DMA_IrqHandler+0x116c>
 803cdae:	4b1f      	ldr	r3, [pc, #124]	; (803ce2c <SIMCOM_DMA_IrqHandler+0x11a4>)
 803cdb0:	681b      	ldr	r3, [r3, #0]
 803cdb2:	4a28      	ldr	r2, [pc, #160]	; (803ce54 <SIMCOM_DMA_IrqHandler+0x11cc>)
 803cdb4:	4293      	cmp	r3, r2
 803cdb6:	d01a      	beq.n	803cdee <SIMCOM_DMA_IrqHandler+0x1166>
 803cdb8:	4b1c      	ldr	r3, [pc, #112]	; (803ce2c <SIMCOM_DMA_IrqHandler+0x11a4>)
 803cdba:	681b      	ldr	r3, [r3, #0]
 803cdbc:	4a26      	ldr	r2, [pc, #152]	; (803ce58 <SIMCOM_DMA_IrqHandler+0x11d0>)
 803cdbe:	4293      	cmp	r3, r2
 803cdc0:	d012      	beq.n	803cde8 <SIMCOM_DMA_IrqHandler+0x1160>
 803cdc2:	4b1a      	ldr	r3, [pc, #104]	; (803ce2c <SIMCOM_DMA_IrqHandler+0x11a4>)
 803cdc4:	681b      	ldr	r3, [r3, #0]
 803cdc6:	4a25      	ldr	r2, [pc, #148]	; (803ce5c <SIMCOM_DMA_IrqHandler+0x11d4>)
 803cdc8:	4293      	cmp	r3, r2
 803cdca:	d00a      	beq.n	803cde2 <SIMCOM_DMA_IrqHandler+0x115a>
 803cdcc:	4b17      	ldr	r3, [pc, #92]	; (803ce2c <SIMCOM_DMA_IrqHandler+0x11a4>)
 803cdce:	681b      	ldr	r3, [r3, #0]
 803cdd0:	4a23      	ldr	r2, [pc, #140]	; (803ce60 <SIMCOM_DMA_IrqHandler+0x11d8>)
 803cdd2:	4293      	cmp	r3, r2
 803cdd4:	d102      	bne.n	803cddc <SIMCOM_DMA_IrqHandler+0x1154>
 803cdd6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 803cdda:	e01e      	b.n	803ce1a <SIMCOM_DMA_IrqHandler+0x1192>
 803cddc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 803cde0:	e01b      	b.n	803ce1a <SIMCOM_DMA_IrqHandler+0x1192>
 803cde2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 803cde6:	e018      	b.n	803ce1a <SIMCOM_DMA_IrqHandler+0x1192>
 803cde8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 803cdec:	e015      	b.n	803ce1a <SIMCOM_DMA_IrqHandler+0x1192>
 803cdee:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 803cdf2:	e012      	b.n	803ce1a <SIMCOM_DMA_IrqHandler+0x1192>
 803cdf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 803cdf8:	e00f      	b.n	803ce1a <SIMCOM_DMA_IrqHandler+0x1192>
 803cdfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 803cdfe:	e00c      	b.n	803ce1a <SIMCOM_DMA_IrqHandler+0x1192>
 803ce00:	f44f 7380 	mov.w	r3, #256	; 0x100
 803ce04:	e009      	b.n	803ce1a <SIMCOM_DMA_IrqHandler+0x1192>
 803ce06:	f44f 7380 	mov.w	r3, #256	; 0x100
 803ce0a:	e006      	b.n	803ce1a <SIMCOM_DMA_IrqHandler+0x1192>
 803ce0c:	2304      	movs	r3, #4
 803ce0e:	e004      	b.n	803ce1a <SIMCOM_DMA_IrqHandler+0x1192>
 803ce10:	2304      	movs	r3, #4
 803ce12:	e002      	b.n	803ce1a <SIMCOM_DMA_IrqHandler+0x1192>
 803ce14:	2304      	movs	r3, #4
 803ce16:	e000      	b.n	803ce1a <SIMCOM_DMA_IrqHandler+0x1192>
 803ce18:	2304      	movs	r3, #4
 803ce1a:	4a12      	ldr	r2, [pc, #72]	; (803ce64 <SIMCOM_DMA_IrqHandler+0x11dc>)
 803ce1c:	6093      	str	r3, [r2, #8]
        HAL_UART_Receive_DMA(&huart1, (uint8_t*) SIMCOM_DMA_RX, SIMCOM_DMA_RX_SZ);
 803ce1e:	2280      	movs	r2, #128	; 0x80
 803ce20:	4911      	ldr	r1, [pc, #68]	; (803ce68 <SIMCOM_DMA_IrqHandler+0x11e0>)
 803ce22:	4812      	ldr	r0, [pc, #72]	; (803ce6c <SIMCOM_DMA_IrqHandler+0x11e4>)
 803ce24:	f7f9 fbf4 	bl	8036610 <HAL_UART_Receive_DMA>
}
 803ce28:	bf00      	nop
 803ce2a:	bd80      	pop	{r7, pc}
 803ce2c:	20008748 	.word	0x20008748
 803ce30:	40026058 	.word	0x40026058
 803ce34:	40026010 	.word	0x40026010
 803ce38:	40026410 	.word	0x40026410
 803ce3c:	40026070 	.word	0x40026070
 803ce40:	40026470 	.word	0x40026470
 803ce44:	40026028 	.word	0x40026028
 803ce48:	40026428 	.word	0x40026428
 803ce4c:	40026088 	.word	0x40026088
 803ce50:	40026488 	.word	0x40026488
 803ce54:	40026040 	.word	0x40026040
 803ce58:	40026440 	.word	0x40026440
 803ce5c:	400260a0 	.word	0x400260a0
 803ce60:	400264a0 	.word	0x400264a0
 803ce64:	40026000 	.word	0x40026000
 803ce68:	20007fd4 	.word	0x20007fd4
 803ce6c:	200087ac 	.word	0x200087ac

0803ce70 <SIMCOM_DMA_Init>:

void SIMCOM_DMA_Init(void) {
 803ce70:	b580      	push	{r7, lr}
 803ce72:	af00      	add	r7, sp, #0
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);        // enable idle line interrupt
 803ce74:	4b0f      	ldr	r3, [pc, #60]	; (803ceb4 <SIMCOM_DMA_Init+0x44>)
 803ce76:	681b      	ldr	r3, [r3, #0]
 803ce78:	68da      	ldr	r2, [r3, #12]
 803ce7a:	4b0e      	ldr	r3, [pc, #56]	; (803ceb4 <SIMCOM_DMA_Init+0x44>)
 803ce7c:	681b      	ldr	r3, [r3, #0]
 803ce7e:	f042 0210 	orr.w	r2, r2, #16
 803ce82:	60da      	str	r2, [r3, #12]
    __HAL_DMA_ENABLE_IT(&hdma_usart1_rx, DMA_IT_TC);    // enable DMA Tx cplt interrupt
 803ce84:	4b0c      	ldr	r3, [pc, #48]	; (803ceb8 <SIMCOM_DMA_Init+0x48>)
 803ce86:	681b      	ldr	r3, [r3, #0]
 803ce88:	681a      	ldr	r2, [r3, #0]
 803ce8a:	4b0b      	ldr	r3, [pc, #44]	; (803ceb8 <SIMCOM_DMA_Init+0x48>)
 803ce8c:	681b      	ldr	r3, [r3, #0]
 803ce8e:	f042 0210 	orr.w	r2, r2, #16
 803ce92:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE_IT(&hdma_usart1_rx, DMA_IT_HT);    // enable half complete interrupt
 803ce94:	4b08      	ldr	r3, [pc, #32]	; (803ceb8 <SIMCOM_DMA_Init+0x48>)
 803ce96:	681b      	ldr	r3, [r3, #0]
 803ce98:	681a      	ldr	r2, [r3, #0]
 803ce9a:	4b07      	ldr	r3, [pc, #28]	; (803ceb8 <SIMCOM_DMA_Init+0x48>)
 803ce9c:	681b      	ldr	r3, [r3, #0]
 803ce9e:	f042 0208 	orr.w	r2, r2, #8
 803cea2:	601a      	str	r2, [r3, #0]

    /* Start DMA transfer */
    HAL_UART_Receive_DMA(&huart1, (uint8_t*) SIMCOM_DMA_RX, SIMCOM_DMA_RX_SZ);
 803cea4:	2280      	movs	r2, #128	; 0x80
 803cea6:	4905      	ldr	r1, [pc, #20]	; (803cebc <SIMCOM_DMA_Init+0x4c>)
 803cea8:	4802      	ldr	r0, [pc, #8]	; (803ceb4 <SIMCOM_DMA_Init+0x44>)
 803ceaa:	f7f9 fbb1 	bl	8036610 <HAL_UART_Receive_DMA>
}
 803ceae:	bf00      	nop
 803ceb0:	bd80      	pop	{r7, pc}
 803ceb2:	bf00      	nop
 803ceb4:	200087ac 	.word	0x200087ac
 803ceb8:	20008748 	.word	0x20008748
 803cebc:	20007fd4 	.word	0x20007fd4

0803cec0 <SIMCOM_Check_Buffer>:

static void SIMCOM_Check_Buffer(void) {
 803cec0:	b580      	push	{r7, lr}
 803cec2:	b082      	sub	sp, #8
 803cec4:	af00      	add	r7, sp, #0
    static size_t old_pos;
    size_t pos;

    /* Calculate current position in buffer */
    pos = SIMCOM_DMA_RX_SZ - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 803cec6:	4b1e      	ldr	r3, [pc, #120]	; (803cf40 <SIMCOM_Check_Buffer+0x80>)
 803cec8:	681b      	ldr	r3, [r3, #0]
 803ceca:	685b      	ldr	r3, [r3, #4]
 803cecc:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 803ced0:	607b      	str	r3, [r7, #4]
    if (pos != old_pos) { /* Check change in received data */
 803ced2:	4b1c      	ldr	r3, [pc, #112]	; (803cf44 <SIMCOM_Check_Buffer+0x84>)
 803ced4:	681b      	ldr	r3, [r3, #0]
 803ced6:	687a      	ldr	r2, [r7, #4]
 803ced8:	429a      	cmp	r2, r3
 803ceda:	d023      	beq.n	803cf24 <SIMCOM_Check_Buffer+0x64>
        if (pos > old_pos) { /* Current position is over previous one */
 803cedc:	4b19      	ldr	r3, [pc, #100]	; (803cf44 <SIMCOM_Check_Buffer+0x84>)
 803cede:	681b      	ldr	r3, [r3, #0]
 803cee0:	687a      	ldr	r2, [r7, #4]
 803cee2:	429a      	cmp	r2, r3
 803cee4:	d90b      	bls.n	803cefe <SIMCOM_Check_Buffer+0x3e>
            /* We are in "linear" mode */
            /* Process data directly by subtracting "pointers" */
            SIMCOM_Fill_Buffer(&SIMCOM_DMA_RX[old_pos], pos - old_pos);
 803cee6:	4b17      	ldr	r3, [pc, #92]	; (803cf44 <SIMCOM_Check_Buffer+0x84>)
 803cee8:	681b      	ldr	r3, [r3, #0]
 803ceea:	4a17      	ldr	r2, [pc, #92]	; (803cf48 <SIMCOM_Check_Buffer+0x88>)
 803ceec:	1898      	adds	r0, r3, r2
 803ceee:	4b15      	ldr	r3, [pc, #84]	; (803cf44 <SIMCOM_Check_Buffer+0x84>)
 803cef0:	681b      	ldr	r3, [r3, #0]
 803cef2:	687a      	ldr	r2, [r7, #4]
 803cef4:	1ad3      	subs	r3, r2, r3
 803cef6:	4619      	mov	r1, r3
 803cef8:	f000 f828 	bl	803cf4c <SIMCOM_Fill_Buffer>
 803cefc:	e012      	b.n	803cf24 <SIMCOM_Check_Buffer+0x64>
        } else {
            /* We are in "overflow" mode */
            /* First process data to the end of buffer */
            SIMCOM_Fill_Buffer(&SIMCOM_DMA_RX[old_pos], SIMCOM_DMA_RX_SZ - old_pos);
 803cefe:	4b11      	ldr	r3, [pc, #68]	; (803cf44 <SIMCOM_Check_Buffer+0x84>)
 803cf00:	681b      	ldr	r3, [r3, #0]
 803cf02:	4a11      	ldr	r2, [pc, #68]	; (803cf48 <SIMCOM_Check_Buffer+0x88>)
 803cf04:	441a      	add	r2, r3
 803cf06:	4b0f      	ldr	r3, [pc, #60]	; (803cf44 <SIMCOM_Check_Buffer+0x84>)
 803cf08:	681b      	ldr	r3, [r3, #0]
 803cf0a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 803cf0e:	4619      	mov	r1, r3
 803cf10:	4610      	mov	r0, r2
 803cf12:	f000 f81b 	bl	803cf4c <SIMCOM_Fill_Buffer>
            /* Check and continue with beginning of buffer */
            if (pos > 0) {
 803cf16:	687b      	ldr	r3, [r7, #4]
 803cf18:	2b00      	cmp	r3, #0
 803cf1a:	d003      	beq.n	803cf24 <SIMCOM_Check_Buffer+0x64>
                SIMCOM_Fill_Buffer(&SIMCOM_DMA_RX[0], pos);
 803cf1c:	6879      	ldr	r1, [r7, #4]
 803cf1e:	480a      	ldr	r0, [pc, #40]	; (803cf48 <SIMCOM_Check_Buffer+0x88>)
 803cf20:	f000 f814 	bl	803cf4c <SIMCOM_Fill_Buffer>
            }
        }
    }
    old_pos = pos; /* Save current position as old */
 803cf24:	4a07      	ldr	r2, [pc, #28]	; (803cf44 <SIMCOM_Check_Buffer+0x84>)
 803cf26:	687b      	ldr	r3, [r7, #4]
 803cf28:	6013      	str	r3, [r2, #0]

    /* Check and manually update if we reached end of buffer */
    if (old_pos == SIMCOM_DMA_RX_SZ) {
 803cf2a:	4b06      	ldr	r3, [pc, #24]	; (803cf44 <SIMCOM_Check_Buffer+0x84>)
 803cf2c:	681b      	ldr	r3, [r3, #0]
 803cf2e:	2b80      	cmp	r3, #128	; 0x80
 803cf30:	d102      	bne.n	803cf38 <SIMCOM_Check_Buffer+0x78>
        old_pos = 0;
 803cf32:	4b04      	ldr	r3, [pc, #16]	; (803cf44 <SIMCOM_Check_Buffer+0x84>)
 803cf34:	2200      	movs	r2, #0
 803cf36:	601a      	str	r2, [r3, #0]
    }
}
 803cf38:	bf00      	nop
 803cf3a:	3708      	adds	r7, #8
 803cf3c:	46bd      	mov	sp, r7
 803cf3e:	bd80      	pop	{r7, pc}
 803cf40:	20008748 	.word	0x20008748
 803cf44:	20008058 	.word	0x20008058
 803cf48:	20007fd4 	.word	0x20007fd4

0803cf4c <SIMCOM_Fill_Buffer>:

static void SIMCOM_Fill_Buffer(const void *data, size_t len) {
 803cf4c:	b580      	push	{r7, lr}
 803cf4e:	b082      	sub	sp, #8
 803cf50:	af00      	add	r7, sp, #0
 803cf52:	6078      	str	r0, [r7, #4]
 803cf54:	6039      	str	r1, [r7, #0]
    /* Write data to buffer */
    memcpy(&SIMCOM_UART_RX[simcom_write], data, len);
 803cf56:	4b09      	ldr	r3, [pc, #36]	; (803cf7c <SIMCOM_Fill_Buffer+0x30>)
 803cf58:	681b      	ldr	r3, [r3, #0]
 803cf5a:	4a09      	ldr	r2, [pc, #36]	; (803cf80 <SIMCOM_Fill_Buffer+0x34>)
 803cf5c:	4413      	add	r3, r2
 803cf5e:	683a      	ldr	r2, [r7, #0]
 803cf60:	6879      	ldr	r1, [r7, #4]
 803cf62:	4618      	mov	r0, r3
 803cf64:	f002 fcc9 	bl	803f8fa <memcpy>
    simcom_write += len;
 803cf68:	4b04      	ldr	r3, [pc, #16]	; (803cf7c <SIMCOM_Fill_Buffer+0x30>)
 803cf6a:	681a      	ldr	r2, [r3, #0]
 803cf6c:	683b      	ldr	r3, [r7, #0]
 803cf6e:	4413      	add	r3, r2
 803cf70:	4a02      	ldr	r2, [pc, #8]	; (803cf7c <SIMCOM_Fill_Buffer+0x30>)
 803cf72:	6013      	str	r3, [r2, #0]
}
 803cf74:	bf00      	nop
 803cf76:	3708      	adds	r7, #8
 803cf78:	46bd      	mov	sp, r7
 803cf7a:	bd80      	pop	{r7, pc}
 803cf7c:	20008054 	.word	0x20008054
 803cf80:	20008ae4 	.word	0x20008ae4

0803cf84 <SIMCOM_Reset_Buffer>:

void SIMCOM_Reset_Buffer(void) {
 803cf84:	b580      	push	{r7, lr}
 803cf86:	af00      	add	r7, sp, #0
    // clear rx buffer
    memset(SIMCOM_UART_RX, 0x00, simcom_write);
 803cf88:	4b05      	ldr	r3, [pc, #20]	; (803cfa0 <SIMCOM_Reset_Buffer+0x1c>)
 803cf8a:	681b      	ldr	r3, [r3, #0]
 803cf8c:	461a      	mov	r2, r3
 803cf8e:	2100      	movs	r1, #0
 803cf90:	4804      	ldr	r0, [pc, #16]	; (803cfa4 <SIMCOM_Reset_Buffer+0x20>)
 803cf92:	f002 fcbd 	bl	803f910 <memset>
    simcom_write = 0;
 803cf96:	4b02      	ldr	r3, [pc, #8]	; (803cfa0 <SIMCOM_Reset_Buffer+0x1c>)
 803cf98:	2200      	movs	r2, #0
 803cf9a:	601a      	str	r2, [r3, #0]
}
 803cf9c:	bf00      	nop
 803cf9e:	bd80      	pop	{r7, pc}
 803cfa0:	20008054 	.word	0x20008054
 803cfa4:	20008ae4 	.word	0x20008ae4

0803cfa8 <SIMCOM_Transmit>:

uint8_t SIMCOM_Transmit(char *pData, uint16_t Size) {
 803cfa8:	b580      	push	{r7, lr}
 803cfaa:	b082      	sub	sp, #8
 803cfac:	af00      	add	r7, sp, #0
 803cfae:	6078      	str	r0, [r7, #4]
 803cfb0:	460b      	mov	r3, r1
 803cfb2:	807b      	strh	r3, [r7, #2]
    SIMCOM_Reset_Buffer();
 803cfb4:	f7ff ffe6 	bl	803cf84 <SIMCOM_Reset_Buffer>

    return (HAL_UART_Transmit(&huart1, (uint8_t*) pData, Size, HAL_MAX_DELAY) == HAL_OK);
 803cfb8:	887a      	ldrh	r2, [r7, #2]
 803cfba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 803cfbe:	6879      	ldr	r1, [r7, #4]
 803cfc0:	4806      	ldr	r0, [pc, #24]	; (803cfdc <SIMCOM_Transmit+0x34>)
 803cfc2:	f7f9 fa8c 	bl	80364de <HAL_UART_Transmit>
 803cfc6:	4603      	mov	r3, r0
 803cfc8:	2b00      	cmp	r3, #0
 803cfca:	bf0c      	ite	eq
 803cfcc:	2301      	moveq	r3, #1
 803cfce:	2300      	movne	r3, #0
 803cfd0:	b2db      	uxtb	r3, r3
}
 803cfd2:	4618      	mov	r0, r3
 803cfd4:	3708      	adds	r7, #8
 803cfd6:	46bd      	mov	sp, r7
 803cfd8:	bd80      	pop	{r7, pc}
 803cfda:	bf00      	nop
 803cfdc:	200087ac 	.word	0x200087ac

0803cfe0 <AT_CommandEchoMode>:
static void AT_ParseText(const char *ptr, uint8_t *cnt, char *text, uint8_t size);
static int32_t AT_ParseNumber(const char *ptr, uint8_t *cnt);
//static float AT_ParseFloat(const char *ptr, uint8_t *cnt);

/* Public functions implementation --------------------------------------------*/
SIMCOM_RESULT AT_CommandEchoMode(uint8_t state) {
 803cfe0:	b580      	push	{r7, lr}
 803cfe2:	b084      	sub	sp, #16
 803cfe4:	af00      	add	r7, sp, #0
 803cfe6:	4603      	mov	r3, r0
 803cfe8:	71fb      	strb	r3, [r7, #7]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 803cfea:	2300      	movs	r3, #0
 803cfec:	73fb      	strb	r3, [r7, #15]
    char cmd[6];

    Simcom_Lock();
 803cfee:	f001 fbef 	bl	803e7d0 <Simcom_Lock>
    // Write
    sprintf(cmd, "ATE%d\r", state);
 803cff2:	79fa      	ldrb	r2, [r7, #7]
 803cff4:	f107 0308 	add.w	r3, r7, #8
 803cff8:	490a      	ldr	r1, [pc, #40]	; (803d024 <AT_CommandEchoMode+0x44>)
 803cffa:	4618      	mov	r0, r3
 803cffc:	f002 fc90 	bl	803f920 <siprintf>
    p = AT_CmdWrite(cmd, 500, NULL);
 803d000:	f107 0308 	add.w	r3, r7, #8
 803d004:	2200      	movs	r2, #0
 803d006:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 803d00a:	4618      	mov	r0, r3
 803d00c:	f000 ff1e 	bl	803de4c <AT_CmdWrite>
 803d010:	4603      	mov	r3, r0
 803d012:	73fb      	strb	r3, [r7, #15]
    Simcom_Unlock();
 803d014:	f001 fbea 	bl	803e7ec <Simcom_Unlock>

    return p;
 803d018:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 803d01c:	4618      	mov	r0, r3
 803d01e:	3710      	adds	r7, #16
 803d020:	46bd      	mov	sp, r7
 803d022:	bd80      	pop	{r7, pc}
 803d024:	08043a48 	.word	0x08043a48

0803d028 <AT_SignalQualityReport>:

SIMCOM_RESULT AT_SignalQualityReport(at_csq_t *signal) {
 803d028:	b590      	push	{r4, r7, lr}
 803d02a:	b087      	sub	sp, #28
 803d02c:	af00      	add	r7, sp, #0
 803d02e:	6078      	str	r0, [r7, #4]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 803d030:	2300      	movs	r3, #0
 803d032:	75fb      	strb	r3, [r7, #23]
    uint8_t cnt, len = 0;
 803d034:	2300      	movs	r3, #0
 803d036:	75bb      	strb	r3, [r7, #22]
    char *str = NULL;
 803d038:	2300      	movs	r3, #0
 803d03a:	60bb      	str	r3, [r7, #8]
    float dBm;

    Simcom_Lock();
 803d03c:	f001 fbc8 	bl	803e7d0 <Simcom_Lock>
    // Read
    p = AT_CmdRead("AT+CSQ\r", 500, "+CSQ: ", &str);
 803d040:	f107 0308 	add.w	r3, r7, #8
 803d044:	4a48      	ldr	r2, [pc, #288]	; (803d168 <AT_SignalQualityReport+0x140>)
 803d046:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 803d04a:	4848      	ldr	r0, [pc, #288]	; (803d16c <AT_SignalQualityReport+0x144>)
 803d04c:	f000 ff1c 	bl	803de88 <AT_CmdRead>
 803d050:	4603      	mov	r3, r0
 803d052:	75fb      	strb	r3, [r7, #23]
    if (p > 0) {
 803d054:	f997 3017 	ldrsb.w	r3, [r7, #23]
 803d058:	2b00      	cmp	r3, #0
 803d05a:	dd77      	ble.n	803d14c <AT_SignalQualityReport+0x124>
        signal->rssi = AT_ParseNumber(&str[len], &cnt);
 803d05c:	68ba      	ldr	r2, [r7, #8]
 803d05e:	7dbb      	ldrb	r3, [r7, #22]
 803d060:	4413      	add	r3, r2
 803d062:	f107 020f 	add.w	r2, r7, #15
 803d066:	4611      	mov	r1, r2
 803d068:	4618      	mov	r0, r3
 803d06a:	f000 ff8f 	bl	803df8c <AT_ParseNumber>
 803d06e:	4603      	mov	r3, r0
 803d070:	b2da      	uxtb	r2, r3
 803d072:	687b      	ldr	r3, [r7, #4]
 803d074:	701a      	strb	r2, [r3, #0]
        len += cnt + 1;
 803d076:	7bfa      	ldrb	r2, [r7, #15]
 803d078:	7dbb      	ldrb	r3, [r7, #22]
 803d07a:	4413      	add	r3, r2
 803d07c:	b2db      	uxtb	r3, r3
 803d07e:	3301      	adds	r3, #1
 803d080:	75bb      	strb	r3, [r7, #22]
        signal->ber = AT_ParseNumber(&str[len], NULL);
 803d082:	68ba      	ldr	r2, [r7, #8]
 803d084:	7dbb      	ldrb	r3, [r7, #22]
 803d086:	4413      	add	r3, r2
 803d088:	2100      	movs	r1, #0
 803d08a:	4618      	mov	r0, r3
 803d08c:	f000 ff7e 	bl	803df8c <AT_ParseNumber>
 803d090:	4603      	mov	r3, r0
 803d092:	b2da      	uxtb	r2, r3
 803d094:	687b      	ldr	r3, [r7, #4]
 803d096:	705a      	strb	r2, [r3, #1]

        // Formatting
        {
            // Handle not detectable value
            if (signal->rssi > 31) {
 803d098:	687b      	ldr	r3, [r7, #4]
 803d09a:	781b      	ldrb	r3, [r3, #0]
 803d09c:	2b1f      	cmp	r3, #31
 803d09e:	d902      	bls.n	803d0a6 <AT_SignalQualityReport+0x7e>
                signal->rssi = 0;
 803d0a0:	687b      	ldr	r3, [r7, #4]
 803d0a2:	2200      	movs	r2, #0
 803d0a4:	701a      	strb	r2, [r3, #0]
            }

            // Scale RSSI to dBm
            dBm = (signal->rssi * 63.0 / 31.0) - 115.0;
 803d0a6:	687b      	ldr	r3, [r7, #4]
 803d0a8:	781b      	ldrb	r3, [r3, #0]
 803d0aa:	4618      	mov	r0, r3
 803d0ac:	f7e3 fa72 	bl	8020594 <__aeabi_i2d>
 803d0b0:	f04f 0200 	mov.w	r2, #0
 803d0b4:	4b2e      	ldr	r3, [pc, #184]	; (803d170 <AT_SignalQualityReport+0x148>)
 803d0b6:	f7e3 fad7 	bl	8020668 <__aeabi_dmul>
 803d0ba:	4603      	mov	r3, r0
 803d0bc:	460c      	mov	r4, r1
 803d0be:	4618      	mov	r0, r3
 803d0c0:	4621      	mov	r1, r4
 803d0c2:	f04f 0200 	mov.w	r2, #0
 803d0c6:	4b2b      	ldr	r3, [pc, #172]	; (803d174 <AT_SignalQualityReport+0x14c>)
 803d0c8:	f7e3 fbf8 	bl	80208bc <__aeabi_ddiv>
 803d0cc:	4603      	mov	r3, r0
 803d0ce:	460c      	mov	r4, r1
 803d0d0:	4618      	mov	r0, r3
 803d0d2:	4621      	mov	r1, r4
 803d0d4:	a322      	add	r3, pc, #136	; (adr r3, 803d160 <AT_SignalQualityReport+0x138>)
 803d0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 803d0da:	f7e3 f90d 	bl	80202f8 <__aeabi_dsub>
 803d0de:	4603      	mov	r3, r0
 803d0e0:	460c      	mov	r4, r1
 803d0e2:	4618      	mov	r0, r3
 803d0e4:	4621      	mov	r1, r4
 803d0e6:	f7e3 fdb7 	bl	8020c58 <__aeabi_d2f>
 803d0ea:	4603      	mov	r3, r0
 803d0ec:	613b      	str	r3, [r7, #16]
            // Scale dBm to percentage
            signal->percent = (dBm + 115.0) * 100.0 / 63.0;
 803d0ee:	6938      	ldr	r0, [r7, #16]
 803d0f0:	f7e3 fa62 	bl	80205b8 <__aeabi_f2d>
 803d0f4:	a31a      	add	r3, pc, #104	; (adr r3, 803d160 <AT_SignalQualityReport+0x138>)
 803d0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 803d0fa:	f7e3 f8ff 	bl	80202fc <__adddf3>
 803d0fe:	4603      	mov	r3, r0
 803d100:	460c      	mov	r4, r1
 803d102:	4618      	mov	r0, r3
 803d104:	4621      	mov	r1, r4
 803d106:	f04f 0200 	mov.w	r2, #0
 803d10a:	4b1b      	ldr	r3, [pc, #108]	; (803d178 <AT_SignalQualityReport+0x150>)
 803d10c:	f7e3 faac 	bl	8020668 <__aeabi_dmul>
 803d110:	4603      	mov	r3, r0
 803d112:	460c      	mov	r4, r1
 803d114:	4618      	mov	r0, r3
 803d116:	4621      	mov	r1, r4
 803d118:	f04f 0200 	mov.w	r2, #0
 803d11c:	4b14      	ldr	r3, [pc, #80]	; (803d170 <AT_SignalQualityReport+0x148>)
 803d11e:	f7e3 fbcd 	bl	80208bc <__aeabi_ddiv>
 803d122:	4603      	mov	r3, r0
 803d124:	460c      	mov	r4, r1
 803d126:	4618      	mov	r0, r3
 803d128:	4621      	mov	r1, r4
 803d12a:	f7e3 fd75 	bl	8020c18 <__aeabi_d2uiz>
 803d12e:	4603      	mov	r3, r0
 803d130:	b2da      	uxtb	r2, r3
 803d132:	687b      	ldr	r3, [r7, #4]
 803d134:	709a      	strb	r2, [r3, #2]

            // debugging
            LOG_Str("\nSimcom:RSSI = ");
 803d136:	4811      	ldr	r0, [pc, #68]	; (803d17c <AT_SignalQualityReport+0x154>)
 803d138:	f001 f904 	bl	803e344 <LOG_Str>
            LOG_Int(signal->percent);
 803d13c:	687b      	ldr	r3, [r7, #4]
 803d13e:	789b      	ldrb	r3, [r3, #2]
 803d140:	4618      	mov	r0, r3
 803d142:	f001 f891 	bl	803e268 <LOG_Int>
            LOG_StrLn("%");
 803d146:	480e      	ldr	r0, [pc, #56]	; (803d180 <AT_SignalQualityReport+0x158>)
 803d148:	f001 f914 	bl	803e374 <LOG_StrLn>
        }
    }
    Simcom_Unlock();
 803d14c:	f001 fb4e 	bl	803e7ec <Simcom_Unlock>

    return p;
 803d150:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 803d154:	4618      	mov	r0, r3
 803d156:	371c      	adds	r7, #28
 803d158:	46bd      	mov	sp, r7
 803d15a:	bd90      	pop	{r4, r7, pc}
 803d15c:	f3af 8000 	nop.w
 803d160:	00000000 	.word	0x00000000
 803d164:	405cc000 	.word	0x405cc000
 803d168:	08043a50 	.word	0x08043a50
 803d16c:	08043a58 	.word	0x08043a58
 803d170:	404f8000 	.word	0x404f8000
 803d174:	403f0000 	.word	0x403f0000
 803d178:	40590000 	.word	0x40590000
 803d17c:	08043a60 	.word	0x08043a60
 803d180:	08043a70 	.word	0x08043a70

0803d184 <AT_ConnectionStatusSingle>:

SIMCOM_RESULT AT_ConnectionStatusSingle(AT_CIPSTATUS *state) {
 803d184:	b590      	push	{r4, r7, lr}
 803d186:	b08b      	sub	sp, #44	; 0x2c
 803d188:	af00      	add	r7, sp, #0
 803d18a:	6078      	str	r0, [r7, #4]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 803d18c:	2300      	movs	r3, #0
 803d18e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    char status[20];
    char *str = NULL;
 803d192:	2300      	movs	r3, #0
 803d194:	60fb      	str	r3, [r7, #12]

    Simcom_Lock();
 803d196:	f001 fb1b 	bl	803e7d0 <Simcom_Lock>
    // Read
    p = AT_CmdRead("AT+CIPSTATUS\r", 500, "STATE: ", &str);
 803d19a:	f107 030c 	add.w	r3, r7, #12
 803d19e:	4a7d      	ldr	r2, [pc, #500]	; (803d394 <AT_ConnectionStatusSingle+0x210>)
 803d1a0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 803d1a4:	487c      	ldr	r0, [pc, #496]	; (803d398 <AT_ConnectionStatusSingle+0x214>)
 803d1a6:	f000 fe6f 	bl	803de88 <AT_CmdRead>
 803d1aa:	4603      	mov	r3, r0
 803d1ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (p > 0) {
 803d1b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 803d1b4:	2b00      	cmp	r3, #0
 803d1b6:	f340 80dd 	ble.w	803d374 <AT_ConnectionStatusSingle+0x1f0>
        AT_ParseText(&str[0], NULL, status, sizeof(status));
 803d1ba:	68f8      	ldr	r0, [r7, #12]
 803d1bc:	f107 0210 	add.w	r2, r7, #16
 803d1c0:	2314      	movs	r3, #20
 803d1c2:	2100      	movs	r1, #0
 803d1c4:	f000 fe98 	bl	803def8 <AT_ParseText>

        // decide
        if (!strcmp(status, "IP INITIAL")) {
 803d1c8:	f107 0310 	add.w	r3, r7, #16
 803d1cc:	4973      	ldr	r1, [pc, #460]	; (803d39c <AT_ConnectionStatusSingle+0x218>)
 803d1ce:	4618      	mov	r0, r3
 803d1d0:	f7e3 f826 	bl	8020220 <strcmp>
 803d1d4:	4603      	mov	r3, r0
 803d1d6:	2b00      	cmp	r3, #0
 803d1d8:	d107      	bne.n	803d1ea <AT_ConnectionStatusSingle+0x66>
            *state = CIPSTAT_IP_INITIAL;
 803d1da:	687a      	ldr	r2, [r7, #4]
 803d1dc:	f04f 0300 	mov.w	r3, #0
 803d1e0:	f04f 0400 	mov.w	r4, #0
 803d1e4:	e9c2 3400 	strd	r3, r4, [r2]
 803d1e8:	e0cb      	b.n	803d382 <AT_ConnectionStatusSingle+0x1fe>
        } else if (!strcmp(status, "IP START")) {
 803d1ea:	f107 0310 	add.w	r3, r7, #16
 803d1ee:	496c      	ldr	r1, [pc, #432]	; (803d3a0 <AT_ConnectionStatusSingle+0x21c>)
 803d1f0:	4618      	mov	r0, r3
 803d1f2:	f7e3 f815 	bl	8020220 <strcmp>
 803d1f6:	4603      	mov	r3, r0
 803d1f8:	2b00      	cmp	r3, #0
 803d1fa:	d107      	bne.n	803d20c <AT_ConnectionStatusSingle+0x88>
            *state = CIPSTAT_IP_START;
 803d1fc:	687a      	ldr	r2, [r7, #4]
 803d1fe:	f04f 0301 	mov.w	r3, #1
 803d202:	f04f 0400 	mov.w	r4, #0
 803d206:	e9c2 3400 	strd	r3, r4, [r2]
 803d20a:	e0ba      	b.n	803d382 <AT_ConnectionStatusSingle+0x1fe>
        } else if (!strcmp(status, "IP CONFIG")) {
 803d20c:	f107 0310 	add.w	r3, r7, #16
 803d210:	4964      	ldr	r1, [pc, #400]	; (803d3a4 <AT_ConnectionStatusSingle+0x220>)
 803d212:	4618      	mov	r0, r3
 803d214:	f7e3 f804 	bl	8020220 <strcmp>
 803d218:	4603      	mov	r3, r0
 803d21a:	2b00      	cmp	r3, #0
 803d21c:	d107      	bne.n	803d22e <AT_ConnectionStatusSingle+0xaa>
            *state = CIPSTAT_IP_CONFIG;
 803d21e:	687a      	ldr	r2, [r7, #4]
 803d220:	f04f 0302 	mov.w	r3, #2
 803d224:	f04f 0400 	mov.w	r4, #0
 803d228:	e9c2 3400 	strd	r3, r4, [r2]
 803d22c:	e0a9      	b.n	803d382 <AT_ConnectionStatusSingle+0x1fe>
        } else if (!strcmp(status, "IP GPRSACT")) {
 803d22e:	f107 0310 	add.w	r3, r7, #16
 803d232:	495d      	ldr	r1, [pc, #372]	; (803d3a8 <AT_ConnectionStatusSingle+0x224>)
 803d234:	4618      	mov	r0, r3
 803d236:	f7e2 fff3 	bl	8020220 <strcmp>
 803d23a:	4603      	mov	r3, r0
 803d23c:	2b00      	cmp	r3, #0
 803d23e:	d107      	bne.n	803d250 <AT_ConnectionStatusSingle+0xcc>
            *state = CIPSTAT_IP_GPRSACT;
 803d240:	687a      	ldr	r2, [r7, #4]
 803d242:	f04f 0303 	mov.w	r3, #3
 803d246:	f04f 0400 	mov.w	r4, #0
 803d24a:	e9c2 3400 	strd	r3, r4, [r2]
 803d24e:	e098      	b.n	803d382 <AT_ConnectionStatusSingle+0x1fe>
        } else if (!strcmp(status, "IP STATUS")) {
 803d250:	f107 0310 	add.w	r3, r7, #16
 803d254:	4955      	ldr	r1, [pc, #340]	; (803d3ac <AT_ConnectionStatusSingle+0x228>)
 803d256:	4618      	mov	r0, r3
 803d258:	f7e2 ffe2 	bl	8020220 <strcmp>
 803d25c:	4603      	mov	r3, r0
 803d25e:	2b00      	cmp	r3, #0
 803d260:	d107      	bne.n	803d272 <AT_ConnectionStatusSingle+0xee>
            *state = CIPSTAT_IP_STATUS;
 803d262:	687a      	ldr	r2, [r7, #4]
 803d264:	f04f 0304 	mov.w	r3, #4
 803d268:	f04f 0400 	mov.w	r4, #0
 803d26c:	e9c2 3400 	strd	r3, r4, [r2]
 803d270:	e087      	b.n	803d382 <AT_ConnectionStatusSingle+0x1fe>
        } else if (!strcmp(status, "TCP CONNECTING")
 803d272:	f107 0310 	add.w	r3, r7, #16
 803d276:	494e      	ldr	r1, [pc, #312]	; (803d3b0 <AT_ConnectionStatusSingle+0x22c>)
 803d278:	4618      	mov	r0, r3
 803d27a:	f7e2 ffd1 	bl	8020220 <strcmp>
 803d27e:	4603      	mov	r3, r0
 803d280:	2b00      	cmp	r3, #0
 803d282:	d011      	beq.n	803d2a8 <AT_ConnectionStatusSingle+0x124>
                || !strcmp(status, "UDP CONNECTING")
 803d284:	f107 0310 	add.w	r3, r7, #16
 803d288:	494a      	ldr	r1, [pc, #296]	; (803d3b4 <AT_ConnectionStatusSingle+0x230>)
 803d28a:	4618      	mov	r0, r3
 803d28c:	f7e2 ffc8 	bl	8020220 <strcmp>
 803d290:	4603      	mov	r3, r0
 803d292:	2b00      	cmp	r3, #0
 803d294:	d008      	beq.n	803d2a8 <AT_ConnectionStatusSingle+0x124>
                || !strcmp(status, "SERVER LISTENING")) {
 803d296:	f107 0310 	add.w	r3, r7, #16
 803d29a:	4947      	ldr	r1, [pc, #284]	; (803d3b8 <AT_ConnectionStatusSingle+0x234>)
 803d29c:	4618      	mov	r0, r3
 803d29e:	f7e2 ffbf 	bl	8020220 <strcmp>
 803d2a2:	4603      	mov	r3, r0
 803d2a4:	2b00      	cmp	r3, #0
 803d2a6:	d107      	bne.n	803d2b8 <AT_ConnectionStatusSingle+0x134>
            *state = CIPSTAT_CONNECTING;
 803d2a8:	687a      	ldr	r2, [r7, #4]
 803d2aa:	f04f 0305 	mov.w	r3, #5
 803d2ae:	f04f 0400 	mov.w	r4, #0
 803d2b2:	e9c2 3400 	strd	r3, r4, [r2]
 803d2b6:	e064      	b.n	803d382 <AT_ConnectionStatusSingle+0x1fe>
        } else if (!strcmp(status, "CONNECT OK")) {
 803d2b8:	f107 0310 	add.w	r3, r7, #16
 803d2bc:	493f      	ldr	r1, [pc, #252]	; (803d3bc <AT_ConnectionStatusSingle+0x238>)
 803d2be:	4618      	mov	r0, r3
 803d2c0:	f7e2 ffae 	bl	8020220 <strcmp>
 803d2c4:	4603      	mov	r3, r0
 803d2c6:	2b00      	cmp	r3, #0
 803d2c8:	d107      	bne.n	803d2da <AT_ConnectionStatusSingle+0x156>
            *state = CIPSTAT_CONNECT_OK;
 803d2ca:	687a      	ldr	r2, [r7, #4]
 803d2cc:	f04f 0306 	mov.w	r3, #6
 803d2d0:	f04f 0400 	mov.w	r4, #0
 803d2d4:	e9c2 3400 	strd	r3, r4, [r2]
 803d2d8:	e053      	b.n	803d382 <AT_ConnectionStatusSingle+0x1fe>
        } else if (!strcmp(status, "TCP CLOSING")
 803d2da:	f107 0310 	add.w	r3, r7, #16
 803d2de:	4938      	ldr	r1, [pc, #224]	; (803d3c0 <AT_ConnectionStatusSingle+0x23c>)
 803d2e0:	4618      	mov	r0, r3
 803d2e2:	f7e2 ff9d 	bl	8020220 <strcmp>
 803d2e6:	4603      	mov	r3, r0
 803d2e8:	2b00      	cmp	r3, #0
 803d2ea:	d008      	beq.n	803d2fe <AT_ConnectionStatusSingle+0x17a>
                || !strcmp(status, "UDP CLOSING")) {
 803d2ec:	f107 0310 	add.w	r3, r7, #16
 803d2f0:	4934      	ldr	r1, [pc, #208]	; (803d3c4 <AT_ConnectionStatusSingle+0x240>)
 803d2f2:	4618      	mov	r0, r3
 803d2f4:	f7e2 ff94 	bl	8020220 <strcmp>
 803d2f8:	4603      	mov	r3, r0
 803d2fa:	2b00      	cmp	r3, #0
 803d2fc:	d107      	bne.n	803d30e <AT_ConnectionStatusSingle+0x18a>
            *state = CIPSTAT_CLOSING;
 803d2fe:	687a      	ldr	r2, [r7, #4]
 803d300:	f04f 0307 	mov.w	r3, #7
 803d304:	f04f 0400 	mov.w	r4, #0
 803d308:	e9c2 3400 	strd	r3, r4, [r2]
 803d30c:	e039      	b.n	803d382 <AT_ConnectionStatusSingle+0x1fe>
        } else if (!strcmp(status, "TCP CLOSED")
 803d30e:	f107 0310 	add.w	r3, r7, #16
 803d312:	492d      	ldr	r1, [pc, #180]	; (803d3c8 <AT_ConnectionStatusSingle+0x244>)
 803d314:	4618      	mov	r0, r3
 803d316:	f7e2 ff83 	bl	8020220 <strcmp>
 803d31a:	4603      	mov	r3, r0
 803d31c:	2b00      	cmp	r3, #0
 803d31e:	d008      	beq.n	803d332 <AT_ConnectionStatusSingle+0x1ae>
                || !strcmp(status, "UDP CLOSED")) {
 803d320:	f107 0310 	add.w	r3, r7, #16
 803d324:	4929      	ldr	r1, [pc, #164]	; (803d3cc <AT_ConnectionStatusSingle+0x248>)
 803d326:	4618      	mov	r0, r3
 803d328:	f7e2 ff7a 	bl	8020220 <strcmp>
 803d32c:	4603      	mov	r3, r0
 803d32e:	2b00      	cmp	r3, #0
 803d330:	d107      	bne.n	803d342 <AT_ConnectionStatusSingle+0x1be>
            *state = CIPSTAT_CLOSED;
 803d332:	687a      	ldr	r2, [r7, #4]
 803d334:	f04f 0308 	mov.w	r3, #8
 803d338:	f04f 0400 	mov.w	r4, #0
 803d33c:	e9c2 3400 	strd	r3, r4, [r2]
 803d340:	e01f      	b.n	803d382 <AT_ConnectionStatusSingle+0x1fe>
        } else if (!strcmp(status, "PDP DEACT")) {
 803d342:	f107 0310 	add.w	r3, r7, #16
 803d346:	4922      	ldr	r1, [pc, #136]	; (803d3d0 <AT_ConnectionStatusSingle+0x24c>)
 803d348:	4618      	mov	r0, r3
 803d34a:	f7e2 ff69 	bl	8020220 <strcmp>
 803d34e:	4603      	mov	r3, r0
 803d350:	2b00      	cmp	r3, #0
 803d352:	d107      	bne.n	803d364 <AT_ConnectionStatusSingle+0x1e0>
            *state = CIPSTAT_PDP_DEACT;
 803d354:	687a      	ldr	r2, [r7, #4]
 803d356:	f04f 0309 	mov.w	r3, #9
 803d35a:	f04f 0400 	mov.w	r4, #0
 803d35e:	e9c2 3400 	strd	r3, r4, [r2]
 803d362:	e00e      	b.n	803d382 <AT_ConnectionStatusSingle+0x1fe>
        } else {
            *state = CIPSTAT_UNKNOWN;
 803d364:	687a      	ldr	r2, [r7, #4]
 803d366:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 803d36a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 803d36e:	e9c2 3400 	strd	r3, r4, [r2]
 803d372:	e006      	b.n	803d382 <AT_ConnectionStatusSingle+0x1fe>
        }
    } else {
        *state = CIPSTAT_UNKNOWN;
 803d374:	687a      	ldr	r2, [r7, #4]
 803d376:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 803d37a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 803d37e:	e9c2 3400 	strd	r3, r4, [r2]
    }
    Simcom_Unlock();
 803d382:	f001 fa33 	bl	803e7ec <Simcom_Unlock>

    return p;
 803d386:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 803d38a:	4618      	mov	r0, r3
 803d38c:	372c      	adds	r7, #44	; 0x2c
 803d38e:	46bd      	mov	sp, r7
 803d390:	bd90      	pop	{r4, r7, pc}
 803d392:	bf00      	nop
 803d394:	08043a74 	.word	0x08043a74
 803d398:	08043a7c 	.word	0x08043a7c
 803d39c:	08043a8c 	.word	0x08043a8c
 803d3a0:	08043a98 	.word	0x08043a98
 803d3a4:	08043aa4 	.word	0x08043aa4
 803d3a8:	08043ab0 	.word	0x08043ab0
 803d3ac:	08043abc 	.word	0x08043abc
 803d3b0:	08043ac8 	.word	0x08043ac8
 803d3b4:	08043ad8 	.word	0x08043ad8
 803d3b8:	08043ae8 	.word	0x08043ae8
 803d3bc:	08043afc 	.word	0x08043afc
 803d3c0:	08043b08 	.word	0x08043b08
 803d3c4:	08043b14 	.word	0x08043b14
 803d3c8:	08043b20 	.word	0x08043b20
 803d3cc:	08043b2c 	.word	0x08043b2c
 803d3d0:	08043b38 	.word	0x08043b38

0803d3d4 <AT_RadioAccessTechnology>:

SIMCOM_RESULT AT_RadioAccessTechnology(AT_MODE mode, at_cnmp_t *param) {
 803d3d4:	b580      	push	{r7, lr}
 803d3d6:	b08a      	sub	sp, #40	; 0x28
 803d3d8:	af00      	add	r7, sp, #0
 803d3da:	4603      	mov	r3, r0
 803d3dc:	6039      	str	r1, [r7, #0]
 803d3de:	71fb      	strb	r3, [r7, #7]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 803d3e0:	2300      	movs	r3, #0
 803d3e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t cnt, len = 0;
 803d3e6:	2300      	movs	r3, #0
 803d3e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    char *str = NULL, cmd[14];
 803d3ec:	2300      	movs	r3, #0
 803d3ee:	623b      	str	r3, [r7, #32]

    // Copy by value
    at_cnmp_t tmp = *param;
 803d3f0:	683a      	ldr	r2, [r7, #0]
 803d3f2:	f107 0308 	add.w	r3, r7, #8
 803d3f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 803d3fa:	e883 0003 	stmia.w	r3, {r0, r1}

    Simcom_Lock();
 803d3fe:	f001 f9e7 	bl	803e7d0 <Simcom_Lock>
    // Read
    p = AT_CmdRead("AT+CNMP?\r", 500, "+CNMP: ", &str);
 803d402:	f107 0320 	add.w	r3, r7, #32
 803d406:	4a3a      	ldr	r2, [pc, #232]	; (803d4f0 <AT_RadioAccessTechnology+0x11c>)
 803d408:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 803d40c:	4839      	ldr	r0, [pc, #228]	; (803d4f4 <AT_RadioAccessTechnology+0x120>)
 803d40e:	f000 fd3b 	bl	803de88 <AT_CmdRead>
 803d412:	4603      	mov	r3, r0
 803d414:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (p > 0) {
 803d418:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 803d41c:	2b00      	cmp	r3, #0
 803d41e:	dd5e      	ble.n	803d4de <AT_RadioAccessTechnology+0x10a>
        param->mode = AT_ParseNumber(&str[len], &cnt);
 803d420:	6a3a      	ldr	r2, [r7, #32]
 803d422:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 803d426:	4413      	add	r3, r2
 803d428:	f107 0225 	add.w	r2, r7, #37	; 0x25
 803d42c:	4611      	mov	r1, r2
 803d42e:	4618      	mov	r0, r3
 803d430:	f000 fdac 	bl	803df8c <AT_ParseNumber>
 803d434:	4603      	mov	r3, r0
 803d436:	461a      	mov	r2, r3
 803d438:	683b      	ldr	r3, [r7, #0]
 803d43a:	601a      	str	r2, [r3, #0]
        if (param->mode == CNMP_ACT_AUTO) {
 803d43c:	683b      	ldr	r3, [r7, #0]
 803d43e:	681b      	ldr	r3, [r3, #0]
 803d440:	2b02      	cmp	r3, #2
 803d442:	d116      	bne.n	803d472 <AT_RadioAccessTechnology+0x9e>
            len += cnt + 1;
 803d444:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 803d448:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 803d44c:	4413      	add	r3, r2
 803d44e:	b2db      	uxtb	r3, r3
 803d450:	3301      	adds	r3, #1
 803d452:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            param->preferred = AT_ParseNumber(&str[len], &cnt);
 803d456:	6a3a      	ldr	r2, [r7, #32]
 803d458:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 803d45c:	4413      	add	r3, r2
 803d45e:	f107 0225 	add.w	r2, r7, #37	; 0x25
 803d462:	4611      	mov	r1, r2
 803d464:	4618      	mov	r0, r3
 803d466:	f000 fd91 	bl	803df8c <AT_ParseNumber>
 803d46a:	4603      	mov	r3, r0
 803d46c:	461a      	mov	r2, r3
 803d46e:	683b      	ldr	r3, [r7, #0]
 803d470:	605a      	str	r2, [r3, #4]
        }

        // Write
        if (mode == ATW) {
 803d472:	79fb      	ldrb	r3, [r7, #7]
 803d474:	2b00      	cmp	r3, #0
 803d476:	d12a      	bne.n	803d4ce <AT_RadioAccessTechnology+0xfa>
            if (memcmp(&tmp, param, sizeof(at_cnmp_t)) != 0) {
 803d478:	f107 0308 	add.w	r3, r7, #8
 803d47c:	2208      	movs	r2, #8
 803d47e:	6839      	ldr	r1, [r7, #0]
 803d480:	4618      	mov	r0, r3
 803d482:	f002 fa2b 	bl	803f8dc <memcmp>
 803d486:	4603      	mov	r3, r0
 803d488:	2b00      	cmp	r3, #0
 803d48a:	d028      	beq.n	803d4de <AT_RadioAccessTechnology+0x10a>
                if (tmp.mode == CNMP_ACT_AUTO) {
 803d48c:	68bb      	ldr	r3, [r7, #8]
 803d48e:	2b02      	cmp	r3, #2
 803d490:	d109      	bne.n	803d4a6 <AT_RadioAccessTechnology+0xd2>
                    sprintf(cmd, "AT+CNMP=%d%d\r", param->mode, param->preferred);
 803d492:	683b      	ldr	r3, [r7, #0]
 803d494:	681a      	ldr	r2, [r3, #0]
 803d496:	683b      	ldr	r3, [r7, #0]
 803d498:	685b      	ldr	r3, [r3, #4]
 803d49a:	f107 0010 	add.w	r0, r7, #16
 803d49e:	4916      	ldr	r1, [pc, #88]	; (803d4f8 <AT_RadioAccessTechnology+0x124>)
 803d4a0:	f002 fa3e 	bl	803f920 <siprintf>
 803d4a4:	e007      	b.n	803d4b6 <AT_RadioAccessTechnology+0xe2>
                } else {
                    sprintf(cmd, "AT+CNMP=%d\r", param->mode);
 803d4a6:	683b      	ldr	r3, [r7, #0]
 803d4a8:	681a      	ldr	r2, [r3, #0]
 803d4aa:	f107 0310 	add.w	r3, r7, #16
 803d4ae:	4913      	ldr	r1, [pc, #76]	; (803d4fc <AT_RadioAccessTechnology+0x128>)
 803d4b0:	4618      	mov	r0, r3
 803d4b2:	f002 fa35 	bl	803f920 <siprintf>
                }

                p = AT_CmdWrite(cmd, 10000, NULL);
 803d4b6:	f107 0310 	add.w	r3, r7, #16
 803d4ba:	2200      	movs	r2, #0
 803d4bc:	f242 7110 	movw	r1, #10000	; 0x2710
 803d4c0:	4618      	mov	r0, r3
 803d4c2:	f000 fcc3 	bl	803de4c <AT_CmdWrite>
 803d4c6:	4603      	mov	r3, r0
 803d4c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 803d4cc:	e007      	b.n	803d4de <AT_RadioAccessTechnology+0x10a>
            }
        } else {
            *param = tmp;
 803d4ce:	683b      	ldr	r3, [r7, #0]
 803d4d0:	461a      	mov	r2, r3
 803d4d2:	f107 0308 	add.w	r3, r7, #8
 803d4d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 803d4da:	e882 0003 	stmia.w	r2, {r0, r1}
        }
    }
    Simcom_Unlock();
 803d4de:	f001 f985 	bl	803e7ec <Simcom_Unlock>

    return p;
 803d4e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 803d4e6:	4618      	mov	r0, r3
 803d4e8:	3728      	adds	r7, #40	; 0x28
 803d4ea:	46bd      	mov	sp, r7
 803d4ec:	bd80      	pop	{r7, pc}
 803d4ee:	bf00      	nop
 803d4f0:	08043b44 	.word	0x08043b44
 803d4f4:	08043b4c 	.word	0x08043b4c
 803d4f8:	08043b58 	.word	0x08043b58
 803d4fc:	08043b68 	.word	0x08043b68

0803d500 <AT_NetworkAttachedStatus>:

SIMCOM_RESULT AT_NetworkAttachedStatus(AT_MODE mode, at_csact_t *param) {
 803d500:	b590      	push	{r4, r7, lr}
 803d502:	b08d      	sub	sp, #52	; 0x34
 803d504:	af00      	add	r7, sp, #0
 803d506:	4603      	mov	r3, r0
 803d508:	6039      	str	r1, [r7, #0]
 803d50a:	71fb      	strb	r3, [r7, #7]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 803d50c:	2300      	movs	r3, #0
 803d50e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t cnt, len = 0;
 803d512:	2300      	movs	r3, #0
 803d514:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    char *str = NULL, cmd[14];
 803d518:	2300      	movs	r3, #0
 803d51a:	62bb      	str	r3, [r7, #40]	; 0x28

    // Copy by value
    at_csact_t tmp = *param;
 803d51c:	683a      	ldr	r2, [r7, #0]
 803d51e:	f107 030c 	add.w	r3, r7, #12
 803d522:	ca07      	ldmia	r2, {r0, r1, r2}
 803d524:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    Simcom_Lock();
 803d528:	f001 f952 	bl	803e7d0 <Simcom_Lock>
    // Read
    p = AT_CmdRead("AT+CSACT?\r", 500, "+CSACT: ", &str);
 803d52c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 803d530:	4a46      	ldr	r2, [pc, #280]	; (803d64c <AT_NetworkAttachedStatus+0x14c>)
 803d532:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 803d536:	4846      	ldr	r0, [pc, #280]	; (803d650 <AT_NetworkAttachedStatus+0x150>)
 803d538:	f000 fca6 	bl	803de88 <AT_CmdRead>
 803d53c:	4603      	mov	r3, r0
 803d53e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (p > 0) {
 803d542:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 803d546:	2b00      	cmp	r3, #0
 803d548:	dd77      	ble.n	803d63a <AT_NetworkAttachedStatus+0x13a>
        tmp.act = AT_ParseNumber(&str[len], &cnt);
 803d54a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 803d54c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 803d550:	4413      	add	r3, r2
 803d552:	f107 022d 	add.w	r2, r7, #45	; 0x2d
 803d556:	4611      	mov	r1, r2
 803d558:	4618      	mov	r0, r3
 803d55a:	f000 fd17 	bl	803df8c <AT_ParseNumber>
 803d55e:	4603      	mov	r3, r0
 803d560:	60fb      	str	r3, [r7, #12]
        len += cnt + 1;
 803d562:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 803d566:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 803d56a:	4413      	add	r3, r2
 803d56c:	b2db      	uxtb	r3, r3
 803d56e:	3301      	adds	r3, #1
 803d570:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        AT_ParseText(&str[len], &cnt, tmp.rac, sizeof(tmp.rac));
 803d574:	6aba      	ldr	r2, [r7, #40]	; 0x28
 803d576:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 803d57a:	18d0      	adds	r0, r2, r3
 803d57c:	f107 030c 	add.w	r3, r7, #12
 803d580:	1d1a      	adds	r2, r3, #4
 803d582:	f107 012d 	add.w	r1, r7, #45	; 0x2d
 803d586:	2303      	movs	r3, #3
 803d588:	f000 fcb6 	bl	803def8 <AT_ParseText>
        len += cnt + 1;
 803d58c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 803d590:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 803d594:	4413      	add	r3, r2
 803d596:	b2db      	uxtb	r3, r3
 803d598:	3301      	adds	r3, #1
 803d59a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        tmp.creg = AT_ParseNumber(&str[len], &cnt);
 803d59e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 803d5a0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 803d5a4:	4413      	add	r3, r2
 803d5a6:	f107 022d 	add.w	r2, r7, #45	; 0x2d
 803d5aa:	4611      	mov	r1, r2
 803d5ac:	4618      	mov	r0, r3
 803d5ae:	f000 fced 	bl	803df8c <AT_ParseNumber>
 803d5b2:	4603      	mov	r3, r0
 803d5b4:	b2db      	uxtb	r3, r3
 803d5b6:	74fb      	strb	r3, [r7, #19]
        len += cnt + 1;
 803d5b8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 803d5bc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 803d5c0:	4413      	add	r3, r2
 803d5c2:	b2db      	uxtb	r3, r3
 803d5c4:	3301      	adds	r3, #1
 803d5c6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        tmp.cgreg = AT_ParseNumber(&str[len], &cnt);
 803d5ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 803d5cc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 803d5d0:	4413      	add	r3, r2
 803d5d2:	f107 022d 	add.w	r2, r7, #45	; 0x2d
 803d5d6:	4611      	mov	r1, r2
 803d5d8:	4618      	mov	r0, r3
 803d5da:	f000 fcd7 	bl	803df8c <AT_ParseNumber>
 803d5de:	4603      	mov	r3, r0
 803d5e0:	b2db      	uxtb	r3, r3
 803d5e2:	753b      	strb	r3, [r7, #20]

        // Write
        if (mode == ATW) {
 803d5e4:	79fb      	ldrb	r3, [r7, #7]
 803d5e6:	2b00      	cmp	r3, #0
 803d5e8:	d11f      	bne.n	803d62a <AT_NetworkAttachedStatus+0x12a>
            if (tmp.cgreg != param->creg || tmp.cgreg != param->cgreg) {
 803d5ea:	7d3a      	ldrb	r2, [r7, #20]
 803d5ec:	683b      	ldr	r3, [r7, #0]
 803d5ee:	79db      	ldrb	r3, [r3, #7]
 803d5f0:	429a      	cmp	r2, r3
 803d5f2:	d104      	bne.n	803d5fe <AT_NetworkAttachedStatus+0xfe>
 803d5f4:	7d3a      	ldrb	r2, [r7, #20]
 803d5f6:	683b      	ldr	r3, [r7, #0]
 803d5f8:	7a1b      	ldrb	r3, [r3, #8]
 803d5fa:	429a      	cmp	r2, r3
 803d5fc:	d01d      	beq.n	803d63a <AT_NetworkAttachedStatus+0x13a>
                sprintf(cmd, "AT+CSACT=%d,%d\r", param->creg, param->cgreg);
 803d5fe:	683b      	ldr	r3, [r7, #0]
 803d600:	79db      	ldrb	r3, [r3, #7]
 803d602:	461a      	mov	r2, r3
 803d604:	683b      	ldr	r3, [r7, #0]
 803d606:	7a1b      	ldrb	r3, [r3, #8]
 803d608:	f107 0018 	add.w	r0, r7, #24
 803d60c:	4911      	ldr	r1, [pc, #68]	; (803d654 <AT_NetworkAttachedStatus+0x154>)
 803d60e:	f002 f987 	bl	803f920 <siprintf>
                p = AT_CmdWrite(cmd, 500, NULL);
 803d612:	f107 0318 	add.w	r3, r7, #24
 803d616:	2200      	movs	r2, #0
 803d618:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 803d61c:	4618      	mov	r0, r3
 803d61e:	f000 fc15 	bl	803de4c <AT_CmdWrite>
 803d622:	4603      	mov	r3, r0
 803d624:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 803d628:	e007      	b.n	803d63a <AT_NetworkAttachedStatus+0x13a>
            }
        } else {
            *param = tmp;
 803d62a:	683b      	ldr	r3, [r7, #0]
 803d62c:	461c      	mov	r4, r3
 803d62e:	f107 030c 	add.w	r3, r7, #12
 803d632:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 803d636:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        }
    }
    Simcom_Unlock();
 803d63a:	f001 f8d7 	bl	803e7ec <Simcom_Unlock>

    return p;
 803d63e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 803d642:	4618      	mov	r0, r3
 803d644:	3734      	adds	r7, #52	; 0x34
 803d646:	46bd      	mov	sp, r7
 803d648:	bd90      	pop	{r4, r7, pc}
 803d64a:	bf00      	nop
 803d64c:	08043b74 	.word	0x08043b74
 803d650:	08043b80 	.word	0x08043b80
 803d654:	08043b8c 	.word	0x08043b8c

0803d658 <AT_NetworkRegistration>:

SIMCOM_RESULT AT_NetworkRegistration(char command[20], AT_MODE mode, at_c_greg_t *param) {
 803d658:	b580      	push	{r7, lr}
 803d65a:	b090      	sub	sp, #64	; 0x40
 803d65c:	af00      	add	r7, sp, #0
 803d65e:	60f8      	str	r0, [r7, #12]
 803d660:	460b      	mov	r3, r1
 803d662:	607a      	str	r2, [r7, #4]
 803d664:	72fb      	strb	r3, [r7, #11]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 803d666:	2300      	movs	r3, #0
 803d668:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    uint8_t cnt, len = 0;
 803d66c:	2300      	movs	r3, #0
 803d66e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    char *str = NULL, cmd[14], res[15];
 803d672:	2300      	movs	r3, #0
 803d674:	63bb      	str	r3, [r7, #56]	; 0x38

    // Copy by value
    at_c_greg_t tmp = *param;
 803d676:	687a      	ldr	r2, [r7, #4]
 803d678:	f107 0310 	add.w	r3, r7, #16
 803d67c:	e892 0003 	ldmia.w	r2, {r0, r1}
 803d680:	e883 0003 	stmia.w	r3, {r0, r1}

    Simcom_Lock();
 803d684:	f001 f8a4 	bl	803e7d0 <Simcom_Lock>
    // Read
    sprintf(cmd, "AT+%s?\r", command);
 803d688:	f107 0328 	add.w	r3, r7, #40	; 0x28
 803d68c:	68fa      	ldr	r2, [r7, #12]
 803d68e:	4937      	ldr	r1, [pc, #220]	; (803d76c <AT_NetworkRegistration+0x114>)
 803d690:	4618      	mov	r0, r3
 803d692:	f002 f945 	bl	803f920 <siprintf>
    sprintf(res, "+%s: ", command);
 803d696:	f107 0318 	add.w	r3, r7, #24
 803d69a:	68fa      	ldr	r2, [r7, #12]
 803d69c:	4934      	ldr	r1, [pc, #208]	; (803d770 <AT_NetworkRegistration+0x118>)
 803d69e:	4618      	mov	r0, r3
 803d6a0:	f002 f93e 	bl	803f920 <siprintf>
    p = AT_CmdRead(cmd, 500, res, &str);
 803d6a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 803d6a8:	f107 0218 	add.w	r2, r7, #24
 803d6ac:	f107 0028 	add.w	r0, r7, #40	; 0x28
 803d6b0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 803d6b4:	f000 fbe8 	bl	803de88 <AT_CmdRead>
 803d6b8:	4603      	mov	r3, r0
 803d6ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (p > 0) {
 803d6be:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 803d6c2:	2b00      	cmp	r3, #0
 803d6c4:	dd49      	ble.n	803d75a <AT_NetworkRegistration+0x102>
        tmp.mode = AT_ParseNumber(&str[len], &cnt);
 803d6c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 803d6c8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 803d6cc:	4413      	add	r3, r2
 803d6ce:	f107 023d 	add.w	r2, r7, #61	; 0x3d
 803d6d2:	4611      	mov	r1, r2
 803d6d4:	4618      	mov	r0, r3
 803d6d6:	f000 fc59 	bl	803df8c <AT_ParseNumber>
 803d6da:	4603      	mov	r3, r0
 803d6dc:	613b      	str	r3, [r7, #16]
        len += cnt + 1;
 803d6de:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 803d6e2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 803d6e6:	4413      	add	r3, r2
 803d6e8:	b2db      	uxtb	r3, r3
 803d6ea:	3301      	adds	r3, #1
 803d6ec:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        tmp.stat = AT_ParseNumber(&str[len], &cnt);
 803d6f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 803d6f2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 803d6f6:	4413      	add	r3, r2
 803d6f8:	f107 023d 	add.w	r2, r7, #61	; 0x3d
 803d6fc:	4611      	mov	r1, r2
 803d6fe:	4618      	mov	r0, r3
 803d700:	f000 fc44 	bl	803df8c <AT_ParseNumber>
 803d704:	4603      	mov	r3, r0
 803d706:	617b      	str	r3, [r7, #20]

        // Write
        if (mode == ATW) {
 803d708:	7afb      	ldrb	r3, [r7, #11]
 803d70a:	2b00      	cmp	r3, #0
 803d70c:	d11d      	bne.n	803d74a <AT_NetworkRegistration+0xf2>
            if (memcmp(&tmp, param, sizeof(tmp)) != 0) {
 803d70e:	f107 0310 	add.w	r3, r7, #16
 803d712:	2208      	movs	r2, #8
 803d714:	6879      	ldr	r1, [r7, #4]
 803d716:	4618      	mov	r0, r3
 803d718:	f002 f8e0 	bl	803f8dc <memcmp>
 803d71c:	4603      	mov	r3, r0
 803d71e:	2b00      	cmp	r3, #0
 803d720:	d01b      	beq.n	803d75a <AT_NetworkRegistration+0x102>
                sprintf(cmd, "AT+%s=%d\r", command, param->mode);
 803d722:	687b      	ldr	r3, [r7, #4]
 803d724:	681b      	ldr	r3, [r3, #0]
 803d726:	f107 0028 	add.w	r0, r7, #40	; 0x28
 803d72a:	68fa      	ldr	r2, [r7, #12]
 803d72c:	4911      	ldr	r1, [pc, #68]	; (803d774 <AT_NetworkRegistration+0x11c>)
 803d72e:	f002 f8f7 	bl	803f920 <siprintf>
                p = AT_CmdWrite(cmd, 500, NULL);
 803d732:	f107 0328 	add.w	r3, r7, #40	; 0x28
 803d736:	2200      	movs	r2, #0
 803d738:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 803d73c:	4618      	mov	r0, r3
 803d73e:	f000 fb85 	bl	803de4c <AT_CmdWrite>
 803d742:	4603      	mov	r3, r0
 803d744:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 803d748:	e007      	b.n	803d75a <AT_NetworkRegistration+0x102>
            }
        } else {
            *param = tmp;
 803d74a:	687b      	ldr	r3, [r7, #4]
 803d74c:	461a      	mov	r2, r3
 803d74e:	f107 0310 	add.w	r3, r7, #16
 803d752:	e893 0003 	ldmia.w	r3, {r0, r1}
 803d756:	e882 0003 	stmia.w	r2, {r0, r1}
        }
    }
    Simcom_Unlock();
 803d75a:	f001 f847 	bl	803e7ec <Simcom_Unlock>

    return p;
 803d75e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 803d762:	4618      	mov	r0, r3
 803d764:	3740      	adds	r7, #64	; 0x40
 803d766:	46bd      	mov	sp, r7
 803d768:	bd80      	pop	{r7, pc}
 803d76a:	bf00      	nop
 803d76c:	08043b9c 	.word	0x08043b9c
 803d770:	08043ba4 	.word	0x08043ba4
 803d774:	08043bac 	.word	0x08043bac

0803d778 <AT_ConfigureSlowClock>:

SIMCOM_RESULT AT_ConfigureSlowClock(AT_MODE mode, AT_CSCLK *state) {
 803d778:	b580      	push	{r7, lr}
 803d77a:	b082      	sub	sp, #8
 803d77c:	af00      	add	r7, sp, #0
 803d77e:	4603      	mov	r3, r0
 803d780:	6039      	str	r1, [r7, #0]
 803d782:	71fb      	strb	r3, [r7, #7]
    return AT_SingleInteger("CSCLK", mode, (int32_t*) state, 0);
 803d784:	79f9      	ldrb	r1, [r7, #7]
 803d786:	2300      	movs	r3, #0
 803d788:	683a      	ldr	r2, [r7, #0]
 803d78a:	4804      	ldr	r0, [pc, #16]	; (803d79c <AT_ConfigureSlowClock+0x24>)
 803d78c:	f000 faee 	bl	803dd6c <AT_SingleInteger>
 803d790:	4603      	mov	r3, r0
}
 803d792:	4618      	mov	r0, r3
 803d794:	3708      	adds	r7, #8
 803d796:	46bd      	mov	sp, r7
 803d798:	bd80      	pop	{r7, pc}
 803d79a:	bf00      	nop
 803d79c:	08043bb8 	.word	0x08043bb8

0803d7a0 <AT_ReportMobileEquipmentError>:

SIMCOM_RESULT AT_ReportMobileEquipmentError(AT_MODE mode, AT_CMEE *state) {
 803d7a0:	b580      	push	{r7, lr}
 803d7a2:	b082      	sub	sp, #8
 803d7a4:	af00      	add	r7, sp, #0
 803d7a6:	4603      	mov	r3, r0
 803d7a8:	6039      	str	r1, [r7, #0]
 803d7aa:	71fb      	strb	r3, [r7, #7]
    return AT_SingleInteger("CMEE", mode, (int32_t*) state, 0);
 803d7ac:	79f9      	ldrb	r1, [r7, #7]
 803d7ae:	2300      	movs	r3, #0
 803d7b0:	683a      	ldr	r2, [r7, #0]
 803d7b2:	4804      	ldr	r0, [pc, #16]	; (803d7c4 <AT_ReportMobileEquipmentError+0x24>)
 803d7b4:	f000 fada 	bl	803dd6c <AT_SingleInteger>
 803d7b8:	4603      	mov	r3, r0
}
 803d7ba:	4618      	mov	r0, r3
 803d7bc:	3708      	adds	r7, #8
 803d7be:	46bd      	mov	sp, r7
 803d7c0:	bd80      	pop	{r7, pc}
 803d7c2:	bf00      	nop
 803d7c4:	08043bc0 	.word	0x08043bc0

0803d7c8 <AT_FixedLocalRate>:

SIMCOM_RESULT AT_FixedLocalRate(AT_MODE mode, uint32_t *rate) {
 803d7c8:	b580      	push	{r7, lr}
 803d7ca:	b082      	sub	sp, #8
 803d7cc:	af00      	add	r7, sp, #0
 803d7ce:	4603      	mov	r3, r0
 803d7d0:	6039      	str	r1, [r7, #0]
 803d7d2:	71fb      	strb	r3, [r7, #7]
    return AT_SingleInteger("IPR", mode, (int32_t*) rate, 0);
 803d7d4:	79f9      	ldrb	r1, [r7, #7]
 803d7d6:	2300      	movs	r3, #0
 803d7d8:	683a      	ldr	r2, [r7, #0]
 803d7da:	4804      	ldr	r0, [pc, #16]	; (803d7ec <AT_FixedLocalRate+0x24>)
 803d7dc:	f000 fac6 	bl	803dd6c <AT_SingleInteger>
 803d7e0:	4603      	mov	r3, r0
}
 803d7e2:	4618      	mov	r0, r3
 803d7e4:	3708      	adds	r7, #8
 803d7e6:	46bd      	mov	sp, r7
 803d7e8:	bd80      	pop	{r7, pc}
 803d7ea:	bf00      	nop
 803d7ec:	08043bc8 	.word	0x08043bc8

0803d7f0 <AT_ConfigureAPN>:

#if (!BOOTLOADER)
SIMCOM_RESULT AT_ConfigureAPN(AT_MODE mode, at_cstt_t *param) {
 803d7f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 803d7f2:	b0ab      	sub	sp, #172	; 0xac
 803d7f4:	af02      	add	r7, sp, #8
 803d7f6:	4603      	mov	r3, r0
 803d7f8:	6039      	str	r1, [r7, #0]
 803d7fa:	71fb      	strb	r3, [r7, #7]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 803d7fc:	2300      	movs	r3, #0
 803d7fe:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
    uint8_t cnt, len = 0;
 803d802:	2300      	movs	r3, #0
 803d804:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
    char *str = NULL, cmd[80];
 803d808:	2300      	movs	r3, #0
 803d80a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    // Copy by value
    at_cstt_t tmp = *param;
 803d80e:	683b      	ldr	r3, [r7, #0]
 803d810:	461c      	mov	r4, r3
 803d812:	f107 060c 	add.w	r6, r7, #12
 803d816:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 803d81a:	4635      	mov	r5, r6
 803d81c:	4623      	mov	r3, r4
 803d81e:	6818      	ldr	r0, [r3, #0]
 803d820:	6859      	ldr	r1, [r3, #4]
 803d822:	689a      	ldr	r2, [r3, #8]
 803d824:	68db      	ldr	r3, [r3, #12]
 803d826:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 803d828:	3410      	adds	r4, #16
 803d82a:	3610      	adds	r6, #16
 803d82c:	4564      	cmp	r4, ip
 803d82e:	d1f4      	bne.n	803d81a <AT_ConfigureAPN+0x2a>
 803d830:	4633      	mov	r3, r6
 803d832:	4622      	mov	r2, r4
 803d834:	6810      	ldr	r0, [r2, #0]
 803d836:	6851      	ldr	r1, [r2, #4]
 803d838:	6892      	ldr	r2, [r2, #8]
 803d83a:	c307      	stmia	r3!, {r0, r1, r2}

    Simcom_Lock();
 803d83c:	f000 ffc8 	bl	803e7d0 <Simcom_Lock>
    // Read
    p = AT_CmdRead("AT+CSTT?\r", 500, "+CSTT: ", &str);
 803d840:	f107 0398 	add.w	r3, r7, #152	; 0x98
 803d844:	4a46      	ldr	r2, [pc, #280]	; (803d960 <AT_ConfigureAPN+0x170>)
 803d846:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 803d84a:	4846      	ldr	r0, [pc, #280]	; (803d964 <AT_ConfigureAPN+0x174>)
 803d84c:	f000 fb1c 	bl	803de88 <AT_CmdRead>
 803d850:	4603      	mov	r3, r0
 803d852:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
    if (p > 0) {
 803d856:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 803d85a:	2b00      	cmp	r3, #0
 803d85c:	dd77      	ble.n	803d94e <AT_ConfigureAPN+0x15e>
        AT_ParseText(&str[len], &cnt, tmp.apn, sizeof(tmp.apn));
 803d85e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 803d862:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 803d866:	18d0      	adds	r0, r2, r3
 803d868:	f107 020c 	add.w	r2, r7, #12
 803d86c:	f107 019d 	add.w	r1, r7, #157	; 0x9d
 803d870:	2314      	movs	r3, #20
 803d872:	f000 fb41 	bl	803def8 <AT_ParseText>
        len += cnt + 1;
 803d876:	f897 209d 	ldrb.w	r2, [r7, #157]	; 0x9d
 803d87a:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 803d87e:	4413      	add	r3, r2
 803d880:	b2db      	uxtb	r3, r3
 803d882:	3301      	adds	r3, #1
 803d884:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
        AT_ParseText(&str[len], &cnt, tmp.username, sizeof(tmp.username));
 803d888:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 803d88c:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 803d890:	18d0      	adds	r0, r2, r3
 803d892:	f107 030c 	add.w	r3, r7, #12
 803d896:	f103 0214 	add.w	r2, r3, #20
 803d89a:	f107 019d 	add.w	r1, r7, #157	; 0x9d
 803d89e:	2314      	movs	r3, #20
 803d8a0:	f000 fb2a 	bl	803def8 <AT_ParseText>
        len += cnt + 1;
 803d8a4:	f897 209d 	ldrb.w	r2, [r7, #157]	; 0x9d
 803d8a8:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 803d8ac:	4413      	add	r3, r2
 803d8ae:	b2db      	uxtb	r3, r3
 803d8b0:	3301      	adds	r3, #1
 803d8b2:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
        AT_ParseText(&str[len], &cnt, tmp.password, sizeof(tmp.password));
 803d8b6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 803d8ba:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 803d8be:	18d0      	adds	r0, r2, r3
 803d8c0:	f107 030c 	add.w	r3, r7, #12
 803d8c4:	f103 0228 	add.w	r2, r3, #40	; 0x28
 803d8c8:	f107 019d 	add.w	r1, r7, #157	; 0x9d
 803d8cc:	2314      	movs	r3, #20
 803d8ce:	f000 fb13 	bl	803def8 <AT_ParseText>

        // Write
        if (mode == ATW) {
 803d8d2:	79fb      	ldrb	r3, [r7, #7]
 803d8d4:	2b00      	cmp	r3, #0
 803d8d6:	d122      	bne.n	803d91e <AT_ConfigureAPN+0x12e>
            if (memcmp(&tmp, param, sizeof(at_cstt_t)) != 0) {
 803d8d8:	f107 030c 	add.w	r3, r7, #12
 803d8dc:	223c      	movs	r2, #60	; 0x3c
 803d8de:	6839      	ldr	r1, [r7, #0]
 803d8e0:	4618      	mov	r0, r3
 803d8e2:	f001 fffb 	bl	803f8dc <memcmp>
 803d8e6:	4603      	mov	r3, r0
 803d8e8:	2b00      	cmp	r3, #0
 803d8ea:	d030      	beq.n	803d94e <AT_ConfigureAPN+0x15e>
                sprintf(cmd, "AT+CSTT=\"%s\",\"%s\",\"%s\"\r",
                        param->apn, param->username, param->password);
 803d8ec:	683a      	ldr	r2, [r7, #0]
 803d8ee:	683b      	ldr	r3, [r7, #0]
 803d8f0:	f103 0114 	add.w	r1, r3, #20
 803d8f4:	683b      	ldr	r3, [r7, #0]
 803d8f6:	3328      	adds	r3, #40	; 0x28
                sprintf(cmd, "AT+CSTT=\"%s\",\"%s\",\"%s\"\r",
 803d8f8:	f107 0048 	add.w	r0, r7, #72	; 0x48
 803d8fc:	9300      	str	r3, [sp, #0]
 803d8fe:	460b      	mov	r3, r1
 803d900:	4919      	ldr	r1, [pc, #100]	; (803d968 <AT_ConfigureAPN+0x178>)
 803d902:	f002 f80d 	bl	803f920 <siprintf>
                p = AT_CmdWrite(cmd, 1000, NULL);
 803d906:	f107 0348 	add.w	r3, r7, #72	; 0x48
 803d90a:	2200      	movs	r2, #0
 803d90c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 803d910:	4618      	mov	r0, r3
 803d912:	f000 fa9b 	bl	803de4c <AT_CmdWrite>
 803d916:	4603      	mov	r3, r0
 803d918:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 803d91c:	e017      	b.n	803d94e <AT_ConfigureAPN+0x15e>
            }
        } else {
            *param = tmp;
 803d91e:	683b      	ldr	r3, [r7, #0]
 803d920:	f107 040c 	add.w	r4, r7, #12
 803d924:	469c      	mov	ip, r3
 803d926:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 803d92a:	4665      	mov	r5, ip
 803d92c:	4626      	mov	r6, r4
 803d92e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 803d930:	6028      	str	r0, [r5, #0]
 803d932:	6069      	str	r1, [r5, #4]
 803d934:	60aa      	str	r2, [r5, #8]
 803d936:	60eb      	str	r3, [r5, #12]
 803d938:	3410      	adds	r4, #16
 803d93a:	f10c 0c10 	add.w	ip, ip, #16
 803d93e:	4574      	cmp	r4, lr
 803d940:	d1f3      	bne.n	803d92a <AT_ConfigureAPN+0x13a>
 803d942:	4665      	mov	r5, ip
 803d944:	4623      	mov	r3, r4
 803d946:	cb07      	ldmia	r3!, {r0, r1, r2}
 803d948:	6028      	str	r0, [r5, #0]
 803d94a:	6069      	str	r1, [r5, #4]
 803d94c:	60aa      	str	r2, [r5, #8]
        }
    }
    Simcom_Unlock();
 803d94e:	f000 ff4d 	bl	803e7ec <Simcom_Unlock>

    return p;
 803d952:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 803d956:	4618      	mov	r0, r3
 803d958:	37a4      	adds	r7, #164	; 0xa4
 803d95a:	46bd      	mov	sp, r7
 803d95c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 803d95e:	bf00      	nop
 803d960:	08043bcc 	.word	0x08043bcc
 803d964:	08043bd4 	.word	0x08043bd4
 803d968:	08043be0 	.word	0x08043be0

0803d96c <AT_GetLocalIpAddress>:

SIMCOM_RESULT AT_GetLocalIpAddress(at_cifsr_t *param) {
 803d96c:	b580      	push	{r7, lr}
 803d96e:	b084      	sub	sp, #16
 803d970:	af00      	add	r7, sp, #0
 803d972:	6078      	str	r0, [r7, #4]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 803d974:	2300      	movs	r3, #0
 803d976:	73fb      	strb	r3, [r7, #15]
    char *str = NULL;
 803d978:	2300      	movs	r3, #0
 803d97a:	60bb      	str	r3, [r7, #8]

    Simcom_Lock();
 803d97c:	f000 ff28 	bl	803e7d0 <Simcom_Lock>
    // Read
    p = AT_CmdRead("AT+CIFSR\r", 500, SIMCOM_RSP_NONE, &str);
 803d980:	f107 0308 	add.w	r3, r7, #8
 803d984:	4a0c      	ldr	r2, [pc, #48]	; (803d9b8 <AT_GetLocalIpAddress+0x4c>)
 803d986:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 803d98a:	480c      	ldr	r0, [pc, #48]	; (803d9bc <AT_GetLocalIpAddress+0x50>)
 803d98c:	f000 fa7c 	bl	803de88 <AT_CmdRead>
 803d990:	4603      	mov	r3, r0
 803d992:	73fb      	strb	r3, [r7, #15]
    if (p > 0) {
 803d994:	f997 300f 	ldrsb.w	r3, [r7, #15]
 803d998:	2b00      	cmp	r3, #0
 803d99a:	dd05      	ble.n	803d9a8 <AT_GetLocalIpAddress+0x3c>
        AT_ParseText(&str[0], NULL, param->address, sizeof(param->address));
 803d99c:	68b8      	ldr	r0, [r7, #8]
 803d99e:	687a      	ldr	r2, [r7, #4]
 803d9a0:	2314      	movs	r3, #20
 803d9a2:	2100      	movs	r1, #0
 803d9a4:	f000 faa8 	bl	803def8 <AT_ParseText>
    }
    Simcom_Unlock();
 803d9a8:	f000 ff20 	bl	803e7ec <Simcom_Unlock>

    return p;
 803d9ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 803d9b0:	4618      	mov	r0, r3
 803d9b2:	3710      	adds	r7, #16
 803d9b4:	46bd      	mov	sp, r7
 803d9b6:	bd80      	pop	{r7, pc}
 803d9b8:	08043bf8 	.word	0x08043bf8
 803d9bc:	08043bfc 	.word	0x08043bfc

0803d9c0 <AT_StartConnectionSingle>:

SIMCOM_RESULT AT_StartConnectionSingle(at_cipstart_t *param) {
 803d9c0:	b580      	push	{r7, lr}
 803d9c2:	b09a      	sub	sp, #104	; 0x68
 803d9c4:	af02      	add	r7, sp, #8
 803d9c6:	6078      	str	r0, [r7, #4]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 803d9c8:	2300      	movs	r3, #0
 803d9ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    char cmd[80];

    Simcom_Lock();
 803d9ce:	f000 feff 	bl	803e7d0 <Simcom_Lock>
    // Write
    sprintf(cmd, "AT+CIPSTART=\"%s\",\"%s\",\"%d\"\r",
            param->mode, param->ip, param->port);
 803d9d2:	687a      	ldr	r2, [r7, #4]
 803d9d4:	687b      	ldr	r3, [r7, #4]
 803d9d6:	1d19      	adds	r1, r3, #4
 803d9d8:	687b      	ldr	r3, [r7, #4]
 803d9da:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    sprintf(cmd, "AT+CIPSTART=\"%s\",\"%s\",\"%d\"\r",
 803d9dc:	f107 000c 	add.w	r0, r7, #12
 803d9e0:	9300      	str	r3, [sp, #0]
 803d9e2:	460b      	mov	r3, r1
 803d9e4:	4919      	ldr	r1, [pc, #100]	; (803da4c <AT_StartConnectionSingle+0x8c>)
 803d9e6:	f001 ff9b 	bl	803f920 <siprintf>
    p = AT_CmdWrite(cmd, 30000, "CONNECT");
 803d9ea:	f107 030c 	add.w	r3, r7, #12
 803d9ee:	4a18      	ldr	r2, [pc, #96]	; (803da50 <AT_StartConnectionSingle+0x90>)
 803d9f0:	f247 5130 	movw	r1, #30000	; 0x7530
 803d9f4:	4618      	mov	r0, r3
 803d9f6:	f000 fa29 	bl	803de4c <AT_CmdWrite>
 803d9fa:	4603      	mov	r3, r0
 803d9fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    // check either connection ok / error
    if (p > 0) {
 803da00:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 803da04:	2b00      	cmp	r3, #0
 803da06:	dd18      	ble.n	803da3a <AT_StartConnectionSingle+0x7a>
        if (Simcom_Response("CONNECT OK")
 803da08:	4812      	ldr	r0, [pc, #72]	; (803da54 <AT_StartConnectionSingle+0x94>)
 803da0a:	f000 fefb 	bl	803e804 <Simcom_Response>
 803da0e:	4603      	mov	r3, r0
 803da10:	2b00      	cmp	r3, #0
 803da12:	d10b      	bne.n	803da2c <AT_StartConnectionSingle+0x6c>
                || Simcom_Response("ALREADY CONNECT")
 803da14:	4810      	ldr	r0, [pc, #64]	; (803da58 <AT_StartConnectionSingle+0x98>)
 803da16:	f000 fef5 	bl	803e804 <Simcom_Response>
 803da1a:	4603      	mov	r3, r0
 803da1c:	2b00      	cmp	r3, #0
 803da1e:	d105      	bne.n	803da2c <AT_StartConnectionSingle+0x6c>
                || Simcom_Response("TCP CLOSED")) {
 803da20:	480e      	ldr	r0, [pc, #56]	; (803da5c <AT_StartConnectionSingle+0x9c>)
 803da22:	f000 feef 	bl	803e804 <Simcom_Response>
 803da26:	4603      	mov	r3, r0
 803da28:	2b00      	cmp	r3, #0
 803da2a:	d003      	beq.n	803da34 <AT_StartConnectionSingle+0x74>
            p = SIM_RESULT_OK;
 803da2c:	2301      	movs	r3, #1
 803da2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 803da32:	e002      	b.n	803da3a <AT_StartConnectionSingle+0x7a>
        } else {
            p = SIM_RESULT_ERROR;
 803da34:	2300      	movs	r3, #0
 803da36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
    }
    Simcom_Unlock();
 803da3a:	f000 fed7 	bl	803e7ec <Simcom_Unlock>

    return p;
 803da3e:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 803da42:	4618      	mov	r0, r3
 803da44:	3760      	adds	r7, #96	; 0x60
 803da46:	46bd      	mov	sp, r7
 803da48:	bd80      	pop	{r7, pc}
 803da4a:	bf00      	nop
 803da4c:	08043c08 	.word	0x08043c08
 803da50:	08043c24 	.word	0x08043c24
 803da54:	08043afc 	.word	0x08043afc
 803da58:	08043c2c 	.word	0x08043c2c
 803da5c:	08043b20 	.word	0x08043b20

0803da60 <AT_Clock>:

SIMCOM_RESULT AT_Clock(AT_MODE mode, timestamp_t *tm) {
 803da60:	b5f0      	push	{r4, r5, r6, r7, lr}
 803da62:	b093      	sub	sp, #76	; 0x4c
 803da64:	af06      	add	r7, sp, #24
 803da66:	4603      	mov	r3, r0
 803da68:	6039      	str	r1, [r7, #0]
 803da6a:	71fb      	strb	r3, [r7, #7]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 803da6c:	2300      	movs	r3, #0
 803da6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t cnt, len = 0;
 803da72:	2300      	movs	r3, #0
 803da74:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    char *str = NULL, cmd[32];
 803da78:	2300      	movs	r3, #0
 803da7a:	62bb      	str	r3, [r7, #40]	; 0x28

    Simcom_Lock();
 803da7c:	f000 fea8 	bl	803e7d0 <Simcom_Lock>
    if (mode == ATW) {
 803da80:	79fb      	ldrb	r3, [r7, #7]
 803da82:	2b00      	cmp	r3, #0
 803da84:	d12c      	bne.n	803dae0 <AT_Clock+0x80>
        // Write
        sprintf(cmd, "AT+CCLK=\"%d/%d/%d,%d:%d:%d%+d\"\r",
                tm->date.Year,
 803da86:	683b      	ldr	r3, [r7, #0]
 803da88:	7ddb      	ldrb	r3, [r3, #23]
        sprintf(cmd, "AT+CCLK=\"%d/%d/%d,%d:%d:%d%+d\"\r",
 803da8a:	461e      	mov	r6, r3
                tm->date.Month,
 803da8c:	683b      	ldr	r3, [r7, #0]
 803da8e:	7d5b      	ldrb	r3, [r3, #21]
        sprintf(cmd, "AT+CCLK=\"%d/%d/%d,%d:%d:%d%+d\"\r",
 803da90:	469c      	mov	ip, r3
                tm->date.Date,
 803da92:	683b      	ldr	r3, [r7, #0]
 803da94:	7d9b      	ldrb	r3, [r3, #22]
        sprintf(cmd, "AT+CCLK=\"%d/%d/%d,%d:%d:%d%+d\"\r",
 803da96:	461a      	mov	r2, r3
                tm->time.Hours,
 803da98:	683b      	ldr	r3, [r7, #0]
 803da9a:	781b      	ldrb	r3, [r3, #0]
        sprintf(cmd, "AT+CCLK=\"%d/%d/%d,%d:%d:%d%+d\"\r",
 803da9c:	4619      	mov	r1, r3
                tm->time.Minutes,
 803da9e:	683b      	ldr	r3, [r7, #0]
 803daa0:	785b      	ldrb	r3, [r3, #1]
        sprintf(cmd, "AT+CCLK=\"%d/%d/%d,%d:%d:%d%+d\"\r",
 803daa2:	461c      	mov	r4, r3
                tm->time.Seconds,
 803daa4:	683b      	ldr	r3, [r7, #0]
 803daa6:	789b      	ldrb	r3, [r3, #2]
        sprintf(cmd, "AT+CCLK=\"%d/%d/%d,%d:%d:%d%+d\"\r",
 803daa8:	461d      	mov	r5, r3
                tm->tzQuarterHour);
 803daaa:	683b      	ldr	r3, [r7, #0]
 803daac:	f993 3018 	ldrsb.w	r3, [r3, #24]
        sprintf(cmd, "AT+CCLK=\"%d/%d/%d,%d:%d:%d%+d\"\r",
 803dab0:	f107 0008 	add.w	r0, r7, #8
 803dab4:	9304      	str	r3, [sp, #16]
 803dab6:	9503      	str	r5, [sp, #12]
 803dab8:	9402      	str	r4, [sp, #8]
 803daba:	9101      	str	r1, [sp, #4]
 803dabc:	9200      	str	r2, [sp, #0]
 803dabe:	4663      	mov	r3, ip
 803dac0:	4632      	mov	r2, r6
 803dac2:	4961      	ldr	r1, [pc, #388]	; (803dc48 <AT_Clock+0x1e8>)
 803dac4:	f001 ff2c 	bl	803f920 <siprintf>
        p = AT_CmdWrite(cmd, 500, NULL);
 803dac8:	f107 0308 	add.w	r3, r7, #8
 803dacc:	2200      	movs	r2, #0
 803dace:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 803dad2:	4618      	mov	r0, r3
 803dad4:	f000 f9ba 	bl	803de4c <AT_CmdWrite>
 803dad8:	4603      	mov	r3, r0
 803dada:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 803dade:	e0ab      	b.n	803dc38 <AT_Clock+0x1d8>

    } else {
        // Read
        p = AT_CmdRead("AT+CCLK?\r", 500, "+CCLK: ", &str);
 803dae0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 803dae4:	4a59      	ldr	r2, [pc, #356]	; (803dc4c <AT_Clock+0x1ec>)
 803dae6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 803daea:	4859      	ldr	r0, [pc, #356]	; (803dc50 <AT_Clock+0x1f0>)
 803daec:	f000 f9cc 	bl	803de88 <AT_CmdRead>
 803daf0:	4603      	mov	r3, r0
 803daf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (p > 0) {
 803daf6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 803dafa:	2b00      	cmp	r3, #0
 803dafc:	f340 809c 	ble.w	803dc38 <AT_Clock+0x1d8>
            len = 1;
 803db00:	2301      	movs	r3, #1
 803db02:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            tm->date.Year = AT_ParseNumber(&str[len], &cnt);
 803db06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 803db08:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 803db0c:	4413      	add	r3, r2
 803db0e:	f107 022d 	add.w	r2, r7, #45	; 0x2d
 803db12:	4611      	mov	r1, r2
 803db14:	4618      	mov	r0, r3
 803db16:	f000 fa39 	bl	803df8c <AT_ParseNumber>
 803db1a:	4603      	mov	r3, r0
 803db1c:	b2da      	uxtb	r2, r3
 803db1e:	683b      	ldr	r3, [r7, #0]
 803db20:	75da      	strb	r2, [r3, #23]
            len += cnt + 1;
 803db22:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 803db26:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 803db2a:	4413      	add	r3, r2
 803db2c:	b2db      	uxtb	r3, r3
 803db2e:	3301      	adds	r3, #1
 803db30:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            tm->date.Month = AT_ParseNumber(&str[len], &cnt);
 803db34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 803db36:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 803db3a:	4413      	add	r3, r2
 803db3c:	f107 022d 	add.w	r2, r7, #45	; 0x2d
 803db40:	4611      	mov	r1, r2
 803db42:	4618      	mov	r0, r3
 803db44:	f000 fa22 	bl	803df8c <AT_ParseNumber>
 803db48:	4603      	mov	r3, r0
 803db4a:	b2da      	uxtb	r2, r3
 803db4c:	683b      	ldr	r3, [r7, #0]
 803db4e:	755a      	strb	r2, [r3, #21]
            len += cnt + 1;
 803db50:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 803db54:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 803db58:	4413      	add	r3, r2
 803db5a:	b2db      	uxtb	r3, r3
 803db5c:	3301      	adds	r3, #1
 803db5e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            tm->date.Date = AT_ParseNumber(&str[len], &cnt);
 803db62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 803db64:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 803db68:	4413      	add	r3, r2
 803db6a:	f107 022d 	add.w	r2, r7, #45	; 0x2d
 803db6e:	4611      	mov	r1, r2
 803db70:	4618      	mov	r0, r3
 803db72:	f000 fa0b 	bl	803df8c <AT_ParseNumber>
 803db76:	4603      	mov	r3, r0
 803db78:	b2da      	uxtb	r2, r3
 803db7a:	683b      	ldr	r3, [r7, #0]
 803db7c:	759a      	strb	r2, [r3, #22]
            len += cnt + 1;
 803db7e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 803db82:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 803db86:	4413      	add	r3, r2
 803db88:	b2db      	uxtb	r3, r3
 803db8a:	3301      	adds	r3, #1
 803db8c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            tm->time.Hours = AT_ParseNumber(&str[len], &cnt);
 803db90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 803db92:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 803db96:	4413      	add	r3, r2
 803db98:	f107 022d 	add.w	r2, r7, #45	; 0x2d
 803db9c:	4611      	mov	r1, r2
 803db9e:	4618      	mov	r0, r3
 803dba0:	f000 f9f4 	bl	803df8c <AT_ParseNumber>
 803dba4:	4603      	mov	r3, r0
 803dba6:	b2da      	uxtb	r2, r3
 803dba8:	683b      	ldr	r3, [r7, #0]
 803dbaa:	701a      	strb	r2, [r3, #0]
            len += cnt + 1;
 803dbac:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 803dbb0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 803dbb4:	4413      	add	r3, r2
 803dbb6:	b2db      	uxtb	r3, r3
 803dbb8:	3301      	adds	r3, #1
 803dbba:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            tm->time.Minutes = AT_ParseNumber(&str[len], &cnt);
 803dbbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 803dbc0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 803dbc4:	4413      	add	r3, r2
 803dbc6:	f107 022d 	add.w	r2, r7, #45	; 0x2d
 803dbca:	4611      	mov	r1, r2
 803dbcc:	4618      	mov	r0, r3
 803dbce:	f000 f9dd 	bl	803df8c <AT_ParseNumber>
 803dbd2:	4603      	mov	r3, r0
 803dbd4:	b2da      	uxtb	r2, r3
 803dbd6:	683b      	ldr	r3, [r7, #0]
 803dbd8:	705a      	strb	r2, [r3, #1]
            len += cnt + 1;
 803dbda:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 803dbde:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 803dbe2:	4413      	add	r3, r2
 803dbe4:	b2db      	uxtb	r3, r3
 803dbe6:	3301      	adds	r3, #1
 803dbe8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            tm->time.Seconds = AT_ParseNumber(&str[len], &cnt);
 803dbec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 803dbee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 803dbf2:	4413      	add	r3, r2
 803dbf4:	f107 022d 	add.w	r2, r7, #45	; 0x2d
 803dbf8:	4611      	mov	r1, r2
 803dbfa:	4618      	mov	r0, r3
 803dbfc:	f000 f9c6 	bl	803df8c <AT_ParseNumber>
 803dc00:	4603      	mov	r3, r0
 803dc02:	b2da      	uxtb	r2, r3
 803dc04:	683b      	ldr	r3, [r7, #0]
 803dc06:	709a      	strb	r2, [r3, #2]
            len += cnt + 1;
 803dc08:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 803dc0c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 803dc10:	4413      	add	r3, r2
 803dc12:	b2db      	uxtb	r3, r3
 803dc14:	3301      	adds	r3, #1
 803dc16:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            tm->tzQuarterHour = AT_ParseNumber(&str[len], NULL);
 803dc1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 803dc1c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 803dc20:	4413      	add	r3, r2
 803dc22:	2100      	movs	r1, #0
 803dc24:	4618      	mov	r0, r3
 803dc26:	f000 f9b1 	bl	803df8c <AT_ParseNumber>
 803dc2a:	4603      	mov	r3, r0
 803dc2c:	b25a      	sxtb	r2, r3
 803dc2e:	683b      	ldr	r3, [r7, #0]
 803dc30:	761a      	strb	r2, [r3, #24]

            // Formatting
            tm->date.WeekDay = RTC_WEEKDAY_MONDAY;
 803dc32:	683b      	ldr	r3, [r7, #0]
 803dc34:	2201      	movs	r2, #1
 803dc36:	751a      	strb	r2, [r3, #20]
        }
    }
    Simcom_Unlock();
 803dc38:	f000 fdd8 	bl	803e7ec <Simcom_Unlock>

    return p;
 803dc3c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 803dc40:	4618      	mov	r0, r3
 803dc42:	3734      	adds	r7, #52	; 0x34
 803dc44:	46bd      	mov	sp, r7
 803dc46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 803dc48:	08043c3c 	.word	0x08043c3c
 803dc4c:	08043c5c 	.word	0x08043c5c
 803dc50:	08043c64 	.word	0x08043c64

0803dc54 <AT_GprsAttachment>:

SIMCOM_RESULT AT_GprsAttachment(AT_MODE mode, AT_CGATT *state) {
 803dc54:	b580      	push	{r7, lr}
 803dc56:	b082      	sub	sp, #8
 803dc58:	af00      	add	r7, sp, #0
 803dc5a:	4603      	mov	r3, r0
 803dc5c:	6039      	str	r1, [r7, #0]
 803dc5e:	71fb      	strb	r3, [r7, #7]
    return AT_SingleInteger("CGATT", mode, (int32_t*) state, 0);
 803dc60:	79f9      	ldrb	r1, [r7, #7]
 803dc62:	2300      	movs	r3, #0
 803dc64:	683a      	ldr	r2, [r7, #0]
 803dc66:	4804      	ldr	r0, [pc, #16]	; (803dc78 <AT_GprsAttachment+0x24>)
 803dc68:	f000 f880 	bl	803dd6c <AT_SingleInteger>
 803dc6c:	4603      	mov	r3, r0
}
 803dc6e:	4618      	mov	r0, r3
 803dc70:	3708      	adds	r7, #8
 803dc72:	46bd      	mov	sp, r7
 803dc74:	bd80      	pop	{r7, pc}
 803dc76:	bf00      	nop
 803dc78:	08043c70 	.word	0x08043c70

0803dc7c <AT_ManuallyReceiveData>:

SIMCOM_RESULT AT_ManuallyReceiveData(AT_MODE mode, AT_CIPRXGET *state) {
 803dc7c:	b580      	push	{r7, lr}
 803dc7e:	b082      	sub	sp, #8
 803dc80:	af00      	add	r7, sp, #0
 803dc82:	4603      	mov	r3, r0
 803dc84:	6039      	str	r1, [r7, #0]
 803dc86:	71fb      	strb	r3, [r7, #7]
    return AT_SingleInteger("CIPRXGET", mode, (int32_t*) state, 0);
 803dc88:	79f9      	ldrb	r1, [r7, #7]
 803dc8a:	2300      	movs	r3, #0
 803dc8c:	683a      	ldr	r2, [r7, #0]
 803dc8e:	4804      	ldr	r0, [pc, #16]	; (803dca0 <AT_ManuallyReceiveData+0x24>)
 803dc90:	f000 f86c 	bl	803dd6c <AT_SingleInteger>
 803dc94:	4603      	mov	r3, r0
}
 803dc96:	4618      	mov	r0, r3
 803dc98:	3708      	adds	r7, #8
 803dc9a:	46bd      	mov	sp, r7
 803dc9c:	bd80      	pop	{r7, pc}
 803dc9e:	bf00      	nop
 803dca0:	08043c78 	.word	0x08043c78

0803dca4 <AT_MultiIpConnection>:

SIMCOM_RESULT AT_MultiIpConnection(AT_MODE mode, AT_CIPMUX *state) {
 803dca4:	b580      	push	{r7, lr}
 803dca6:	b082      	sub	sp, #8
 803dca8:	af00      	add	r7, sp, #0
 803dcaa:	4603      	mov	r3, r0
 803dcac:	6039      	str	r1, [r7, #0]
 803dcae:	71fb      	strb	r3, [r7, #7]
    return AT_SingleInteger("CIPMUX", mode, (int32_t*) state, 0);
 803dcb0:	79f9      	ldrb	r1, [r7, #7]
 803dcb2:	2300      	movs	r3, #0
 803dcb4:	683a      	ldr	r2, [r7, #0]
 803dcb6:	4804      	ldr	r0, [pc, #16]	; (803dcc8 <AT_MultiIpConnection+0x24>)
 803dcb8:	f000 f858 	bl	803dd6c <AT_SingleInteger>
 803dcbc:	4603      	mov	r3, r0
}
 803dcbe:	4618      	mov	r0, r3
 803dcc0:	3708      	adds	r7, #8
 803dcc2:	46bd      	mov	sp, r7
 803dcc4:	bd80      	pop	{r7, pc}
 803dcc6:	bf00      	nop
 803dcc8:	08043c84 	.word	0x08043c84

0803dccc <AT_TcpApllicationMode>:

SIMCOM_RESULT AT_TcpApllicationMode(AT_MODE mode, AT_CIPMODE *state) {
 803dccc:	b580      	push	{r7, lr}
 803dcce:	b082      	sub	sp, #8
 803dcd0:	af00      	add	r7, sp, #0
 803dcd2:	4603      	mov	r3, r0
 803dcd4:	6039      	str	r1, [r7, #0]
 803dcd6:	71fb      	strb	r3, [r7, #7]
    return AT_SingleInteger("CIPMODE", mode, (int32_t*) state, 0);
 803dcd8:	79f9      	ldrb	r1, [r7, #7]
 803dcda:	2300      	movs	r3, #0
 803dcdc:	683a      	ldr	r2, [r7, #0]
 803dcde:	4804      	ldr	r0, [pc, #16]	; (803dcf0 <AT_TcpApllicationMode+0x24>)
 803dce0:	f000 f844 	bl	803dd6c <AT_SingleInteger>
 803dce4:	4603      	mov	r3, r0
}
 803dce6:	4618      	mov	r0, r3
 803dce8:	3708      	adds	r7, #8
 803dcea:	46bd      	mov	sp, r7
 803dcec:	bd80      	pop	{r7, pc}
 803dcee:	bf00      	nop
 803dcf0:	08043c8c 	.word	0x08043c8c

0803dcf4 <AT_ShowRemoteIp>:

SIMCOM_RESULT AT_ShowRemoteIp(AT_MODE mode, AT_BOOL *state) {
 803dcf4:	b580      	push	{r7, lr}
 803dcf6:	b082      	sub	sp, #8
 803dcf8:	af00      	add	r7, sp, #0
 803dcfa:	4603      	mov	r3, r0
 803dcfc:	6039      	str	r1, [r7, #0]
 803dcfe:	71fb      	strb	r3, [r7, #7]
    return AT_SingleInteger("CIPSRIP", mode, (int32_t*) state, 0);
 803dd00:	79f9      	ldrb	r1, [r7, #7]
 803dd02:	2300      	movs	r3, #0
 803dd04:	683a      	ldr	r2, [r7, #0]
 803dd06:	4804      	ldr	r0, [pc, #16]	; (803dd18 <AT_ShowRemoteIp+0x24>)
 803dd08:	f000 f830 	bl	803dd6c <AT_SingleInteger>
 803dd0c:	4603      	mov	r3, r0
}
 803dd0e:	4618      	mov	r0, r3
 803dd10:	3708      	adds	r7, #8
 803dd12:	46bd      	mov	sp, r7
 803dd14:	bd80      	pop	{r7, pc}
 803dd16:	bf00      	nop
 803dd18:	08043c94 	.word	0x08043c94

0803dd1c <AT_IpPackageHeader>:

SIMCOM_RESULT AT_IpPackageHeader(AT_MODE mode, AT_BOOL *state) {
 803dd1c:	b580      	push	{r7, lr}
 803dd1e:	b082      	sub	sp, #8
 803dd20:	af00      	add	r7, sp, #0
 803dd22:	4603      	mov	r3, r0
 803dd24:	6039      	str	r1, [r7, #0]
 803dd26:	71fb      	strb	r3, [r7, #7]
    return AT_SingleInteger("CIPHEAD", mode, (int32_t*) state, 0);
 803dd28:	79f9      	ldrb	r1, [r7, #7]
 803dd2a:	2300      	movs	r3, #0
 803dd2c:	683a      	ldr	r2, [r7, #0]
 803dd2e:	4804      	ldr	r0, [pc, #16]	; (803dd40 <AT_IpPackageHeader+0x24>)
 803dd30:	f000 f81c 	bl	803dd6c <AT_SingleInteger>
 803dd34:	4603      	mov	r3, r0
}
 803dd36:	4618      	mov	r0, r3
 803dd38:	3708      	adds	r7, #8
 803dd3a:	46bd      	mov	sp, r7
 803dd3c:	bd80      	pop	{r7, pc}
 803dd3e:	bf00      	nop
 803dd40:	08043c9c 	.word	0x08043c9c

0803dd44 <AT_EnableLocalTimestamp>:

SIMCOM_RESULT AT_EnableLocalTimestamp(AT_MODE mode, AT_BOOL *state) {
 803dd44:	b580      	push	{r7, lr}
 803dd46:	b082      	sub	sp, #8
 803dd48:	af00      	add	r7, sp, #0
 803dd4a:	4603      	mov	r3, r0
 803dd4c:	6039      	str	r1, [r7, #0]
 803dd4e:	71fb      	strb	r3, [r7, #7]
    return AT_SingleInteger("CLTS", mode, (int32_t*) state, 0);
 803dd50:	79f9      	ldrb	r1, [r7, #7]
 803dd52:	2300      	movs	r3, #0
 803dd54:	683a      	ldr	r2, [r7, #0]
 803dd56:	4804      	ldr	r0, [pc, #16]	; (803dd68 <AT_EnableLocalTimestamp+0x24>)
 803dd58:	f000 f808 	bl	803dd6c <AT_SingleInteger>
 803dd5c:	4603      	mov	r3, r0
}
 803dd5e:	4618      	mov	r0, r3
 803dd60:	3708      	adds	r7, #8
 803dd62:	46bd      	mov	sp, r7
 803dd64:	bd80      	pop	{r7, pc}
 803dd66:	bf00      	nop
 803dd68:	08043ca4 	.word	0x08043ca4

0803dd6c <AT_SingleInteger>:

    return *str != NULL;
}
#endif

static SIMCOM_RESULT AT_SingleInteger(char command[20], AT_MODE mode, int32_t *value, uint8_t executor) {
 803dd6c:	b580      	push	{r7, lr}
 803dd6e:	b092      	sub	sp, #72	; 0x48
 803dd70:	af00      	add	r7, sp, #0
 803dd72:	60f8      	str	r0, [r7, #12]
 803dd74:	607a      	str	r2, [r7, #4]
 803dd76:	461a      	mov	r2, r3
 803dd78:	460b      	mov	r3, r1
 803dd7a:	72fb      	strb	r3, [r7, #11]
 803dd7c:	4613      	mov	r3, r2
 803dd7e:	72bb      	strb	r3, [r7, #10]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 803dd80:	2300      	movs	r3, #0
 803dd82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    char *str = NULL, cmd[20], res[20];
 803dd86:	2300      	movs	r3, #0
 803dd88:	63fb      	str	r3, [r7, #60]	; 0x3c

    // Copy by vale
    int32_t tmp = *value;
 803dd8a:	687b      	ldr	r3, [r7, #4]
 803dd8c:	681b      	ldr	r3, [r3, #0]
 803dd8e:	643b      	str	r3, [r7, #64]	; 0x40

    Simcom_Lock();
 803dd90:	f000 fd1e 	bl	803e7d0 <Simcom_Lock>
    // Read
    sprintf(cmd, "AT+%s%s", command, executor ? "\r" : "?\r");
 803dd94:	7abb      	ldrb	r3, [r7, #10]
 803dd96:	2b00      	cmp	r3, #0
 803dd98:	d001      	beq.n	803dd9e <AT_SingleInteger+0x32>
 803dd9a:	4b27      	ldr	r3, [pc, #156]	; (803de38 <AT_SingleInteger+0xcc>)
 803dd9c:	e000      	b.n	803dda0 <AT_SingleInteger+0x34>
 803dd9e:	4b27      	ldr	r3, [pc, #156]	; (803de3c <AT_SingleInteger+0xd0>)
 803dda0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 803dda4:	68fa      	ldr	r2, [r7, #12]
 803dda6:	4926      	ldr	r1, [pc, #152]	; (803de40 <AT_SingleInteger+0xd4>)
 803dda8:	f001 fdba 	bl	803f920 <siprintf>
    sprintf(res, "+%s: ", command);
 803ddac:	f107 0314 	add.w	r3, r7, #20
 803ddb0:	68fa      	ldr	r2, [r7, #12]
 803ddb2:	4924      	ldr	r1, [pc, #144]	; (803de44 <AT_SingleInteger+0xd8>)
 803ddb4:	4618      	mov	r0, r3
 803ddb6:	f001 fdb3 	bl	803f920 <siprintf>
    p = AT_CmdRead(cmd, 1000, res, &str);
 803ddba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 803ddbe:	f107 0214 	add.w	r2, r7, #20
 803ddc2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 803ddc6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 803ddca:	f000 f85d 	bl	803de88 <AT_CmdRead>
 803ddce:	4603      	mov	r3, r0
 803ddd0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (p > 0) {
 803ddd4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 803ddd8:	2b00      	cmp	r3, #0
 803ddda:	dd24      	ble.n	803de26 <AT_SingleInteger+0xba>
        tmp = AT_ParseNumber(&str[0], NULL);
 803dddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803ddde:	2100      	movs	r1, #0
 803dde0:	4618      	mov	r0, r3
 803dde2:	f000 f8d3 	bl	803df8c <AT_ParseNumber>
 803dde6:	6438      	str	r0, [r7, #64]	; 0x40

        // Write
        if (mode == ATW) {
 803dde8:	7afb      	ldrb	r3, [r7, #11]
 803ddea:	2b00      	cmp	r3, #0
 803ddec:	d118      	bne.n	803de20 <AT_SingleInteger+0xb4>
            if (tmp != *value) {
 803ddee:	687b      	ldr	r3, [r7, #4]
 803ddf0:	681b      	ldr	r3, [r3, #0]
 803ddf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 803ddf4:	429a      	cmp	r2, r3
 803ddf6:	d016      	beq.n	803de26 <AT_SingleInteger+0xba>
                sprintf(cmd, "AT+%s=%d\r", command, (int) *value);
 803ddf8:	687b      	ldr	r3, [r7, #4]
 803ddfa:	681b      	ldr	r3, [r3, #0]
 803ddfc:	f107 0028 	add.w	r0, r7, #40	; 0x28
 803de00:	68fa      	ldr	r2, [r7, #12]
 803de02:	4911      	ldr	r1, [pc, #68]	; (803de48 <AT_SingleInteger+0xdc>)
 803de04:	f001 fd8c 	bl	803f920 <siprintf>
                p = AT_CmdWrite(cmd, 500, NULL);
 803de08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 803de0c:	2200      	movs	r2, #0
 803de0e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 803de12:	4618      	mov	r0, r3
 803de14:	f000 f81a 	bl	803de4c <AT_CmdWrite>
 803de18:	4603      	mov	r3, r0
 803de1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 803de1e:	e002      	b.n	803de26 <AT_SingleInteger+0xba>
            }
        } else {
            *value = tmp;
 803de20:	687b      	ldr	r3, [r7, #4]
 803de22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 803de24:	601a      	str	r2, [r3, #0]
        }
    }
    Simcom_Unlock();
 803de26:	f000 fce1 	bl	803e7ec <Simcom_Unlock>

    return p;
 803de2a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 803de2e:	4618      	mov	r0, r3
 803de30:	3748      	adds	r7, #72	; 0x48
 803de32:	46bd      	mov	sp, r7
 803de34:	bd80      	pop	{r7, pc}
 803de36:	bf00      	nop
 803de38:	08043cac 	.word	0x08043cac
 803de3c:	08043cb0 	.word	0x08043cb0
 803de40:	08043cb4 	.word	0x08043cb4
 803de44:	08043ba4 	.word	0x08043ba4
 803de48:	08043bac 	.word	0x08043bac

0803de4c <AT_CmdWrite>:

static SIMCOM_RESULT AT_CmdWrite(char *cmd, uint32_t ms, char *res) {
 803de4c:	b580      	push	{r7, lr}
 803de4e:	b086      	sub	sp, #24
 803de50:	af00      	add	r7, sp, #0
 803de52:	60f8      	str	r0, [r7, #12]
 803de54:	60b9      	str	r1, [r7, #8]
 803de56:	607a      	str	r2, [r7, #4]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 803de58:	2300      	movs	r3, #0
 803de5a:	75fb      	strb	r3, [r7, #23]

    if (SIM.state >= SIM_STATE_READY) {
 803de5c:	4b09      	ldr	r3, [pc, #36]	; (803de84 <AT_CmdWrite+0x38>)
 803de5e:	f993 3000 	ldrsb.w	r3, [r3]
 803de62:	2b00      	cmp	r3, #0
 803de64:	db07      	blt.n	803de76 <AT_CmdWrite+0x2a>
        p = Simcom_Command(cmd, res, ms, 0);
 803de66:	2300      	movs	r3, #0
 803de68:	68ba      	ldr	r2, [r7, #8]
 803de6a:	6879      	ldr	r1, [r7, #4]
 803de6c:	68f8      	ldr	r0, [r7, #12]
 803de6e:	f001 f999 	bl	803f1a4 <Simcom_Command>
 803de72:	4603      	mov	r3, r0
 803de74:	75fb      	strb	r3, [r7, #23]
    }

    return p;
 803de76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 803de7a:	4618      	mov	r0, r3
 803de7c:	3718      	adds	r7, #24
 803de7e:	46bd      	mov	sp, r7
 803de80:	bd80      	pop	{r7, pc}
 803de82:	bf00      	nop
 803de84:	200002a8 	.word	0x200002a8

0803de88 <AT_CmdRead>:

static SIMCOM_RESULT AT_CmdRead(char *cmd, uint32_t ms, char *prefix, char **str) {
 803de88:	b590      	push	{r4, r7, lr}
 803de8a:	b087      	sub	sp, #28
 803de8c:	af00      	add	r7, sp, #0
 803de8e:	60f8      	str	r0, [r7, #12]
 803de90:	60b9      	str	r1, [r7, #8]
 803de92:	607a      	str	r2, [r7, #4]
 803de94:	603b      	str	r3, [r7, #0]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 803de96:	2300      	movs	r3, #0
 803de98:	75fb      	strb	r3, [r7, #23]

    if (SIM.state >= SIM_STATE_READY) {
 803de9a:	4b16      	ldr	r3, [pc, #88]	; (803def4 <AT_CmdRead+0x6c>)
 803de9c:	f993 3000 	ldrsb.w	r3, [r3]
 803dea0:	2b00      	cmp	r3, #0
 803dea2:	db20      	blt.n	803dee6 <AT_CmdRead+0x5e>
        p = Simcom_Command(cmd, prefix, ms, 0);
 803dea4:	2300      	movs	r3, #0
 803dea6:	68ba      	ldr	r2, [r7, #8]
 803dea8:	6879      	ldr	r1, [r7, #4]
 803deaa:	68f8      	ldr	r0, [r7, #12]
 803deac:	f001 f97a 	bl	803f1a4 <Simcom_Command>
 803deb0:	4603      	mov	r3, r0
 803deb2:	75fb      	strb	r3, [r7, #23]

        if (p > 0) {
 803deb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 803deb8:	2b00      	cmp	r3, #0
 803deba:	dd14      	ble.n	803dee6 <AT_CmdRead+0x5e>
            *str = Simcom_Response(prefix);
 803debc:	6878      	ldr	r0, [r7, #4]
 803debe:	f000 fca1 	bl	803e804 <Simcom_Response>
 803dec2:	4602      	mov	r2, r0
 803dec4:	683b      	ldr	r3, [r7, #0]
 803dec6:	601a      	str	r2, [r3, #0]

            if (*str != NULL) {
 803dec8:	683b      	ldr	r3, [r7, #0]
 803deca:	681b      	ldr	r3, [r3, #0]
 803decc:	2b00      	cmp	r3, #0
 803dece:	d00a      	beq.n	803dee6 <AT_CmdRead+0x5e>
                *str += strlen(prefix);
 803ded0:	683b      	ldr	r3, [r7, #0]
 803ded2:	681c      	ldr	r4, [r3, #0]
 803ded4:	6878      	ldr	r0, [r7, #4]
 803ded6:	f7e2 f9ad 	bl	8020234 <strlen>
 803deda:	4603      	mov	r3, r0
 803dedc:	18e2      	adds	r2, r4, r3
 803dede:	683b      	ldr	r3, [r7, #0]
 803dee0:	601a      	str	r2, [r3, #0]

                p = SIM_RESULT_OK;
 803dee2:	2301      	movs	r3, #1
 803dee4:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return p;
 803dee6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 803deea:	4618      	mov	r0, r3
 803deec:	371c      	adds	r7, #28
 803deee:	46bd      	mov	sp, r7
 803def0:	bd90      	pop	{r4, r7, pc}
 803def2:	bf00      	nop
 803def4:	200002a8 	.word	0x200002a8

0803def8 <AT_ParseText>:

static void AT_ParseText(const char *ptr, uint8_t *cnt, char *text, uint8_t size) {
 803def8:	b480      	push	{r7}
 803defa:	b087      	sub	sp, #28
 803defc:	af00      	add	r7, sp, #0
 803defe:	60f8      	str	r0, [r7, #12]
 803df00:	60b9      	str	r1, [r7, #8]
 803df02:	607a      	str	r2, [r7, #4]
 803df04:	70fb      	strb	r3, [r7, #3]
    uint8_t i = 0;
 803df06:	2300      	movs	r3, #0
 803df08:	75fb      	strb	r3, [r7, #23]

    // check for double quote start
    if (*ptr == '"') {
 803df0a:	68fb      	ldr	r3, [r7, #12]
 803df0c:	781b      	ldrb	r3, [r3, #0]
 803df0e:	2b22      	cmp	r3, #34	; 0x22
 803df10:	d119      	bne.n	803df46 <AT_ParseText+0x4e>
        ptr++;
 803df12:	68fb      	ldr	r3, [r7, #12]
 803df14:	3301      	adds	r3, #1
 803df16:	60fb      	str	r3, [r7, #12]
        i++;
 803df18:	7dfb      	ldrb	r3, [r7, #23]
 803df1a:	3301      	adds	r3, #1
 803df1c:	75fb      	strb	r3, [r7, #23]
    }
    // Parse text
    while (*ptr != '"' && *ptr != '\r' && *ptr != '\n') {
 803df1e:	e012      	b.n	803df46 <AT_ParseText+0x4e>
        *text = *ptr;
 803df20:	68fb      	ldr	r3, [r7, #12]
 803df22:	781a      	ldrb	r2, [r3, #0]
 803df24:	687b      	ldr	r3, [r7, #4]
 803df26:	701a      	strb	r2, [r3, #0]

        // increment
        text++;
 803df28:	687b      	ldr	r3, [r7, #4]
 803df2a:	3301      	adds	r3, #1
 803df2c:	607b      	str	r3, [r7, #4]
        ptr++;
 803df2e:	68fb      	ldr	r3, [r7, #12]
 803df30:	3301      	adds	r3, #1
 803df32:	60fb      	str	r3, [r7, #12]
        i++;
 803df34:	7dfb      	ldrb	r3, [r7, #23]
 803df36:	3301      	adds	r3, #1
 803df38:	75fb      	strb	r3, [r7, #23]
        size--;
 803df3a:	78fb      	ldrb	r3, [r7, #3]
 803df3c:	3b01      	subs	r3, #1
 803df3e:	70fb      	strb	r3, [r7, #3]

        // handle overflow
        if (size <= 1) {
 803df40:	78fb      	ldrb	r3, [r7, #3]
 803df42:	2b01      	cmp	r3, #1
 803df44:	d90c      	bls.n	803df60 <AT_ParseText+0x68>
    while (*ptr != '"' && *ptr != '\r' && *ptr != '\n') {
 803df46:	68fb      	ldr	r3, [r7, #12]
 803df48:	781b      	ldrb	r3, [r3, #0]
 803df4a:	2b22      	cmp	r3, #34	; 0x22
 803df4c:	d009      	beq.n	803df62 <AT_ParseText+0x6a>
 803df4e:	68fb      	ldr	r3, [r7, #12]
 803df50:	781b      	ldrb	r3, [r3, #0]
 803df52:	2b0d      	cmp	r3, #13
 803df54:	d005      	beq.n	803df62 <AT_ParseText+0x6a>
 803df56:	68fb      	ldr	r3, [r7, #12]
 803df58:	781b      	ldrb	r3, [r3, #0]
 803df5a:	2b0a      	cmp	r3, #10
 803df5c:	d1e0      	bne.n	803df20 <AT_ParseText+0x28>
 803df5e:	e000      	b.n	803df62 <AT_ParseText+0x6a>
            break;
 803df60:	bf00      	nop
        }
    }
    // end of parsing for : double-quote, tab, new-line
    *text = '\0';
 803df62:	687b      	ldr	r3, [r7, #4]
 803df64:	2200      	movs	r2, #0
 803df66:	701a      	strb	r2, [r3, #0]
    ptr++;
 803df68:	68fb      	ldr	r3, [r7, #12]
 803df6a:	3301      	adds	r3, #1
 803df6c:	60fb      	str	r3, [r7, #12]
    i++;
 803df6e:	7dfb      	ldrb	r3, [r7, #23]
 803df70:	3301      	adds	r3, #1
 803df72:	75fb      	strb	r3, [r7, #23]
    // Save number of characters used for number
    if (cnt != NULL) {
 803df74:	68bb      	ldr	r3, [r7, #8]
 803df76:	2b00      	cmp	r3, #0
 803df78:	d002      	beq.n	803df80 <AT_ParseText+0x88>
        *cnt = i;
 803df7a:	68bb      	ldr	r3, [r7, #8]
 803df7c:	7dfa      	ldrb	r2, [r7, #23]
 803df7e:	701a      	strb	r2, [r3, #0]
    }
}
 803df80:	bf00      	nop
 803df82:	371c      	adds	r7, #28
 803df84:	46bd      	mov	sp, r7
 803df86:	f85d 7b04 	ldr.w	r7, [sp], #4
 803df8a:	4770      	bx	lr

0803df8c <AT_ParseNumber>:

static int32_t AT_ParseNumber(const char *ptr, uint8_t *cnt) {
 803df8c:	b480      	push	{r7}
 803df8e:	b085      	sub	sp, #20
 803df90:	af00      	add	r7, sp, #0
 803df92:	6078      	str	r0, [r7, #4]
 803df94:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 803df96:	2300      	movs	r3, #0
 803df98:	73fb      	strb	r3, [r7, #15]
 803df9a:	2300      	movs	r3, #0
 803df9c:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 803df9e:	2300      	movs	r3, #0
 803dfa0:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') { /* Check for minus character */
 803dfa2:	687b      	ldr	r3, [r7, #4]
 803dfa4:	781b      	ldrb	r3, [r3, #0]
 803dfa6:	2b2d      	cmp	r3, #45	; 0x2d
 803dfa8:	d119      	bne.n	803dfde <AT_ParseNumber+0x52>
        minus = 1;
 803dfaa:	2301      	movs	r3, #1
 803dfac:	73fb      	strb	r3, [r7, #15]
        ptr++;
 803dfae:	687b      	ldr	r3, [r7, #4]
 803dfb0:	3301      	adds	r3, #1
 803dfb2:	607b      	str	r3, [r7, #4]
        i++;
 803dfb4:	7bbb      	ldrb	r3, [r7, #14]
 803dfb6:	3301      	adds	r3, #1
 803dfb8:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) { /* Parse number */
 803dfba:	e010      	b.n	803dfde <AT_ParseNumber+0x52>
        sum = 10 * sum + CHARTONUM(*ptr);
 803dfbc:	68ba      	ldr	r2, [r7, #8]
 803dfbe:	4613      	mov	r3, r2
 803dfc0:	009b      	lsls	r3, r3, #2
 803dfc2:	4413      	add	r3, r2
 803dfc4:	005b      	lsls	r3, r3, #1
 803dfc6:	461a      	mov	r2, r3
 803dfc8:	687b      	ldr	r3, [r7, #4]
 803dfca:	781b      	ldrb	r3, [r3, #0]
 803dfcc:	3b30      	subs	r3, #48	; 0x30
 803dfce:	4413      	add	r3, r2
 803dfd0:	60bb      	str	r3, [r7, #8]
        ptr++;
 803dfd2:	687b      	ldr	r3, [r7, #4]
 803dfd4:	3301      	adds	r3, #1
 803dfd6:	607b      	str	r3, [r7, #4]
        i++;
 803dfd8:	7bbb      	ldrb	r3, [r7, #14]
 803dfda:	3301      	adds	r3, #1
 803dfdc:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) { /* Parse number */
 803dfde:	687b      	ldr	r3, [r7, #4]
 803dfe0:	781b      	ldrb	r3, [r3, #0]
 803dfe2:	2b2f      	cmp	r3, #47	; 0x2f
 803dfe4:	d903      	bls.n	803dfee <AT_ParseNumber+0x62>
 803dfe6:	687b      	ldr	r3, [r7, #4]
 803dfe8:	781b      	ldrb	r3, [r3, #0]
 803dfea:	2b39      	cmp	r3, #57	; 0x39
 803dfec:	d9e6      	bls.n	803dfbc <AT_ParseNumber+0x30>
    }
    if (cnt != NULL) { /* Save number of characters used for number */
 803dfee:	683b      	ldr	r3, [r7, #0]
 803dff0:	2b00      	cmp	r3, #0
 803dff2:	d002      	beq.n	803dffa <AT_ParseNumber+0x6e>
        *cnt = i;
 803dff4:	683b      	ldr	r3, [r7, #0]
 803dff6:	7bba      	ldrb	r2, [r7, #14]
 803dff8:	701a      	strb	r2, [r3, #0]
    }
    if (minus) { /* Minus detected */
 803dffa:	7bfb      	ldrb	r3, [r7, #15]
 803dffc:	2b00      	cmp	r3, #0
 803dffe:	d002      	beq.n	803e006 <AT_ParseNumber+0x7a>
        return 0 - sum;
 803e000:	68bb      	ldr	r3, [r7, #8]
 803e002:	425b      	negs	r3, r3
 803e004:	e000      	b.n	803e008 <AT_ParseNumber+0x7c>
    }
    return sum; /* Return number */
 803e006:	68bb      	ldr	r3, [r7, #8]
}
 803e008:	4618      	mov	r0, r3
 803e00a:	3714      	adds	r7, #20
 803e00c:	46bd      	mov	sp, r7
 803e00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803e012:	4770      	bx	lr

0803e014 <CRC_Calculate8>:
/* Private functions declaration ----------------------------------------------*/
static void lock(void);
static void unlock(void);

/* Public functions implementation --------------------------------------------*/
uint32_t CRC_Calculate8(uint8_t *arr, uint32_t count, uint8_t swapped) {
 803e014:	b580      	push	{r7, lr}
 803e016:	b08a      	sub	sp, #40	; 0x28
 803e018:	af00      	add	r7, sp, #0
 803e01a:	60f8      	str	r0, [r7, #12]
 803e01c:	60b9      	str	r1, [r7, #8]
 803e01e:	4613      	mov	r3, r2
 803e020:	71fb      	strb	r3, [r7, #7]
    uint32_t cnt, result, value = 0;
 803e022:	2300      	movs	r3, #0
 803e024:	61fb      	str	r3, [r7, #28]
    uint8_t index = 0, remaining[4] = { 0 };
 803e026:	2300      	movs	r3, #0
 803e028:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 803e02c:	2300      	movs	r3, #0
 803e02e:	617b      	str	r3, [r7, #20]

    lock();
 803e030:	f000 f85c 	bl	803e0ec <lock>

    /* Reset generator */
    __HAL_CRC_DR_RESET(&hcrc);
 803e034:	4b2c      	ldr	r3, [pc, #176]	; (803e0e8 <CRC_Calculate8+0xd4>)
 803e036:	681b      	ldr	r3, [r3, #0]
 803e038:	689a      	ldr	r2, [r3, #8]
 803e03a:	4b2b      	ldr	r3, [pc, #172]	; (803e0e8 <CRC_Calculate8+0xd4>)
 803e03c:	681b      	ldr	r3, [r3, #0]
 803e03e:	f042 0201 	orr.w	r2, r2, #1
 803e042:	609a      	str	r2, [r3, #8]

    /* Calculate number of 32-bit blocks */
    cnt = count >> 2;
 803e044:	68bb      	ldr	r3, [r7, #8]
 803e046:	089b      	lsrs	r3, r3, #2
 803e048:	627b      	str	r3, [r7, #36]	; 0x24

    /* Calculate */
    while (cnt--) {
 803e04a:	e011      	b.n	803e070 <CRC_Calculate8+0x5c>
        value = *(uint32_t*) arr;
 803e04c:	68fb      	ldr	r3, [r7, #12]
 803e04e:	681b      	ldr	r3, [r3, #0]
 803e050:	61fb      	str	r3, [r7, #28]
        /* Set new value */
        hcrc.Instance->DR = swapped ? _ByteSwap32(value) : value;
 803e052:	79fb      	ldrb	r3, [r7, #7]
 803e054:	2b00      	cmp	r3, #0
 803e056:	d004      	beq.n	803e062 <CRC_Calculate8+0x4e>
 803e058:	69f8      	ldr	r0, [r7, #28]
 803e05a:	f001 fb71 	bl	803f740 <_ByteSwap32>
 803e05e:	4603      	mov	r3, r0
 803e060:	e000      	b.n	803e064 <CRC_Calculate8+0x50>
 803e062:	69fb      	ldr	r3, [r7, #28]
 803e064:	4a20      	ldr	r2, [pc, #128]	; (803e0e8 <CRC_Calculate8+0xd4>)
 803e066:	6812      	ldr	r2, [r2, #0]
 803e068:	6013      	str	r3, [r2, #0]

        /* Increase by 4 */
        arr += 4;
 803e06a:	68fb      	ldr	r3, [r7, #12]
 803e06c:	3304      	adds	r3, #4
 803e06e:	60fb      	str	r3, [r7, #12]
    while (cnt--) {
 803e070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803e072:	1e5a      	subs	r2, r3, #1
 803e074:	627a      	str	r2, [r7, #36]	; 0x24
 803e076:	2b00      	cmp	r3, #0
 803e078:	d1e8      	bne.n	803e04c <CRC_Calculate8+0x38>
    }

    /* Calculate remaining data as 8-bit */
    cnt = count % 4;
 803e07a:	68bb      	ldr	r3, [r7, #8]
 803e07c:	f003 0303 	and.w	r3, r3, #3
 803e080:	627b      	str	r3, [r7, #36]	; 0x24

    if (cnt) {
 803e082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803e084:	2b00      	cmp	r3, #0
 803e086:	d024      	beq.n	803e0d2 <CRC_Calculate8+0xbe>
        /* Calculate */
        while (cnt--) {
 803e088:	e00e      	b.n	803e0a8 <CRC_Calculate8+0x94>
            remaining[index++] = *arr++;
 803e08a:	68fb      	ldr	r3, [r7, #12]
 803e08c:	1c5a      	adds	r2, r3, #1
 803e08e:	60fa      	str	r2, [r7, #12]
 803e090:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 803e094:	1c51      	adds	r1, r2, #1
 803e096:	f887 1023 	strb.w	r1, [r7, #35]	; 0x23
 803e09a:	4611      	mov	r1, r2
 803e09c:	781a      	ldrb	r2, [r3, #0]
 803e09e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 803e0a2:	440b      	add	r3, r1
 803e0a4:	f803 2c14 	strb.w	r2, [r3, #-20]
        while (cnt--) {
 803e0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803e0aa:	1e5a      	subs	r2, r3, #1
 803e0ac:	627a      	str	r2, [r7, #36]	; 0x24
 803e0ae:	2b00      	cmp	r3, #0
 803e0b0:	d1eb      	bne.n	803e08a <CRC_Calculate8+0x76>
        }
        /* Set new value */
        value = *(uint32_t*) remaining;
 803e0b2:	f107 0314 	add.w	r3, r7, #20
 803e0b6:	681b      	ldr	r3, [r3, #0]
 803e0b8:	61fb      	str	r3, [r7, #28]
        hcrc.Instance->DR = swapped ? _ByteSwap32(value) : value;
 803e0ba:	79fb      	ldrb	r3, [r7, #7]
 803e0bc:	2b00      	cmp	r3, #0
 803e0be:	d004      	beq.n	803e0ca <CRC_Calculate8+0xb6>
 803e0c0:	69f8      	ldr	r0, [r7, #28]
 803e0c2:	f001 fb3d 	bl	803f740 <_ByteSwap32>
 803e0c6:	4603      	mov	r3, r0
 803e0c8:	e000      	b.n	803e0cc <CRC_Calculate8+0xb8>
 803e0ca:	69fb      	ldr	r3, [r7, #28]
 803e0cc:	4a06      	ldr	r2, [pc, #24]	; (803e0e8 <CRC_Calculate8+0xd4>)
 803e0ce:	6812      	ldr	r2, [r2, #0]
 803e0d0:	6013      	str	r3, [r2, #0]
    }
    result = hcrc.Instance->DR;
 803e0d2:	4b05      	ldr	r3, [pc, #20]	; (803e0e8 <CRC_Calculate8+0xd4>)
 803e0d4:	681b      	ldr	r3, [r3, #0]
 803e0d6:	681b      	ldr	r3, [r3, #0]
 803e0d8:	61bb      	str	r3, [r7, #24]

    unlock();
 803e0da:	f000 f815 	bl	803e108 <unlock>
    /* Return data */
    return result;
 803e0de:	69bb      	ldr	r3, [r7, #24]
}
 803e0e0:	4618      	mov	r0, r3
 803e0e2:	3728      	adds	r7, #40	; 0x28
 803e0e4:	46bd      	mov	sp, r7
 803e0e6:	bd80      	pop	{r7, pc}
 803e0e8:	20008624 	.word	0x20008624

0803e0ec <lock>:

    return result;
}

/* Private functions implementation --------------------------------------------*/
static void lock(void) {
 803e0ec:	b580      	push	{r7, lr}
 803e0ee:	af00      	add	r7, sp, #0
#if (!BOOTLOADER)
    osMutexAcquire(CrcMutexHandle, osWaitForever);
 803e0f0:	4b04      	ldr	r3, [pc, #16]	; (803e104 <lock+0x18>)
 803e0f2:	681b      	ldr	r3, [r3, #0]
 803e0f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 803e0f8:	4618      	mov	r0, r3
 803e0fa:	f7f9 fea7 	bl	8037e4c <osMutexAcquire>
#endif
}
 803e0fe:	bf00      	nop
 803e100:	bd80      	pop	{r7, pc}
 803e102:	bf00      	nop
 803e104:	20008690 	.word	0x20008690

0803e108 <unlock>:

static void unlock(void) {
 803e108:	b580      	push	{r7, lr}
 803e10a:	af00      	add	r7, sp, #0
#if (!BOOTLOADER)
    osMutexRelease(CrcMutexHandle);
 803e10c:	4b03      	ldr	r3, [pc, #12]	; (803e11c <unlock+0x14>)
 803e10e:	681b      	ldr	r3, [r3, #0]
 803e110:	4618      	mov	r0, r3
 803e112:	f7f9 fef9 	bl	8037f08 <osMutexRelease>
#endif
}
 803e116:	bf00      	nop
 803e118:	bd80      	pop	{r7, pc}
 803e11a:	bf00      	nop
 803e11c:	20008690 	.word	0x20008690

0803e120 <EEPROM24XX_SetDevice>:

/* Private variables ----------------------------------------------------------*/
static uint16_t DevAddress = EEPROM24_MAIN;

/* Public functions implementation ---------------------------------------------*/
void EEPROM24XX_SetDevice(EEPROM24_DEVICE Device) {
 803e120:	b480      	push	{r7}
 803e122:	b083      	sub	sp, #12
 803e124:	af00      	add	r7, sp, #0
 803e126:	4603      	mov	r3, r0
 803e128:	71fb      	strb	r3, [r7, #7]
    DevAddress = Device;
 803e12a:	79fb      	ldrb	r3, [r7, #7]
 803e12c:	b29a      	uxth	r2, r3
 803e12e:	4b04      	ldr	r3, [pc, #16]	; (803e140 <EEPROM24XX_SetDevice+0x20>)
 803e130:	801a      	strh	r2, [r3, #0]
}
 803e132:	bf00      	nop
 803e134:	370c      	adds	r7, #12
 803e136:	46bd      	mov	sp, r7
 803e138:	f85d 7b04 	ldr.w	r7, [sp], #4
 803e13c:	4770      	bx	lr
 803e13e:	bf00      	nop
 803e140:	200002a4 	.word	0x200002a4

0803e144 <EEPROM24XX_IsConnected>:

uint8_t EEPROM24XX_IsConnected(void) {
 803e144:	b580      	push	{r7, lr}
 803e146:	af00      	add	r7, sp, #0
    if (HAL_I2C_IsDeviceReady(&hi2c2, DevAddress, 2, 1000) == HAL_OK) {
 803e148:	4b07      	ldr	r3, [pc, #28]	; (803e168 <EEPROM24XX_IsConnected+0x24>)
 803e14a:	8819      	ldrh	r1, [r3, #0]
 803e14c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 803e150:	2202      	movs	r2, #2
 803e152:	4806      	ldr	r0, [pc, #24]	; (803e16c <EEPROM24XX_IsConnected+0x28>)
 803e154:	f7f2 fd9e 	bl	8030c94 <HAL_I2C_IsDeviceReady>
 803e158:	4603      	mov	r3, r0
 803e15a:	2b00      	cmp	r3, #0
 803e15c:	d101      	bne.n	803e162 <EEPROM24XX_IsConnected+0x1e>
        return 1;
 803e15e:	2301      	movs	r3, #1
 803e160:	e000      	b.n	803e164 <EEPROM24XX_IsConnected+0x20>
    }
    return 0;
 803e162:	2300      	movs	r3, #0
}
 803e164:	4618      	mov	r0, r3
 803e166:	bd80      	pop	{r7, pc}
 803e168:	200002a4 	.word	0x200002a4
 803e16c:	2000862c 	.word	0x2000862c

0803e170 <EEPROM24XX_Save>:

uint8_t EEPROM24XX_Save(uint16_t Address, void *data, size_t size_of_data) {
 803e170:	b580      	push	{r7, lr}
 803e172:	b088      	sub	sp, #32
 803e174:	af04      	add	r7, sp, #16
 803e176:	4603      	mov	r3, r0
 803e178:	60b9      	str	r1, [r7, #8]
 803e17a:	607a      	str	r2, [r7, #4]
 803e17c:	81fb      	strh	r3, [r7, #14]
#elif ((EEPROM_SIZE_KBIT==4) || (EEPROM_SIZE_KBIT==8) || (EEPROM_SIZE_KBIT==16))
  if(size_of_data > 16){
    return 0;
  }
#else
    if (size_of_data > 32) {
 803e17e:	687b      	ldr	r3, [r7, #4]
 803e180:	2b20      	cmp	r3, #32
 803e182:	d901      	bls.n	803e188 <EEPROM24XX_Save+0x18>
        return 0;
 803e184:	2300      	movs	r3, #0
 803e186:	e017      	b.n	803e1b8 <EEPROM24XX_Save+0x48>
#elif   (EEPROM_SIZE_KBIT==8)
  if(HAL_I2C_Mem_Write(&hi2c2,DevAddress|((Address&0x0300>>7)),(Address&0xff),I2C_MEMADD_SIZE_8BIT,(uint8_t*)data,size_of_data,100) == HAL_OK) {
#elif   (EEPROM_SIZE_KBIT==16)
  if(HAL_I2C_Mem_Write(&hi2c2,DevAddress|((Address&0x0700>>7)),(Address&0xff),I2C_MEMADD_SIZE_8BIT,(uint8_t*)data,size_of_data,100) == HAL_OK) {
#else
    if (HAL_I2C_Mem_Write(&hi2c2, DevAddress, Address, I2C_MEMADD_SIZE_16BIT, (uint8_t*) data, size_of_data, 100) == HAL_OK) {
 803e188:	4b0d      	ldr	r3, [pc, #52]	; (803e1c0 <EEPROM24XX_Save+0x50>)
 803e18a:	8819      	ldrh	r1, [r3, #0]
 803e18c:	687b      	ldr	r3, [r7, #4]
 803e18e:	b29b      	uxth	r3, r3
 803e190:	89f8      	ldrh	r0, [r7, #14]
 803e192:	2264      	movs	r2, #100	; 0x64
 803e194:	9202      	str	r2, [sp, #8]
 803e196:	9301      	str	r3, [sp, #4]
 803e198:	68bb      	ldr	r3, [r7, #8]
 803e19a:	9300      	str	r3, [sp, #0]
 803e19c:	2310      	movs	r3, #16
 803e19e:	4602      	mov	r2, r0
 803e1a0:	4808      	ldr	r0, [pc, #32]	; (803e1c4 <EEPROM24XX_Save+0x54>)
 803e1a2:	f7f2 fa57 	bl	8030654 <HAL_I2C_Mem_Write>
 803e1a6:	4603      	mov	r3, r0
 803e1a8:	2b00      	cmp	r3, #0
 803e1aa:	d104      	bne.n	803e1b6 <EEPROM24XX_Save+0x46>
#endif
        _DelayMS(7);
 803e1ac:	2007      	movs	r0, #7
 803e1ae:	f001 fa85 	bl	803f6bc <_DelayMS>
        return 1;
 803e1b2:	2301      	movs	r3, #1
 803e1b4:	e000      	b.n	803e1b8 <EEPROM24XX_Save+0x48>
    }
    return 0;
 803e1b6:	2300      	movs	r3, #0

}
 803e1b8:	4618      	mov	r0, r3
 803e1ba:	3710      	adds	r7, #16
 803e1bc:	46bd      	mov	sp, r7
 803e1be:	bd80      	pop	{r7, pc}
 803e1c0:	200002a4 	.word	0x200002a4
 803e1c4:	2000862c 	.word	0x2000862c

0803e1c8 <EEPROM24XX_Load>:

uint8_t EEPROM24XX_Load(uint16_t Address, void *data, size_t size_of_data) {
 803e1c8:	b580      	push	{r7, lr}
 803e1ca:	b088      	sub	sp, #32
 803e1cc:	af04      	add	r7, sp, #16
 803e1ce:	4603      	mov	r3, r0
 803e1d0:	60b9      	str	r1, [r7, #8]
 803e1d2:	607a      	str	r2, [r7, #4]
 803e1d4:	81fb      	strh	r3, [r7, #14]
#elif (EEPROM_SIZE_KBIT==8)
  if(HAL_I2C_Mem_Read(&hi2c2,DevAddress|((Address&0x0300>>7)),(Address&0xff),I2C_MEMADD_SIZE_8BIT,(uint8_t*)data,size_of_data,100) == HAL_OK) {
#elif (EEPROM_SIZE_KBIT==16)
  if(HAL_I2C_Mem_Read(&hi2c2,DevAddress|((Address&0x0700>>7)),(Address&0xff),I2C_MEMADD_SIZE_8BIT,(uint8_t*)data,size_of_data,100) == HAL_OK) {
#else
    if (HAL_I2C_Mem_Read(&hi2c2, DevAddress, Address, I2C_MEMADD_SIZE_16BIT, (uint8_t*) data, size_of_data, 100) == HAL_OK) {
 803e1d6:	4b0c      	ldr	r3, [pc, #48]	; (803e208 <EEPROM24XX_Load+0x40>)
 803e1d8:	8819      	ldrh	r1, [r3, #0]
 803e1da:	687b      	ldr	r3, [r7, #4]
 803e1dc:	b29b      	uxth	r3, r3
 803e1de:	89f8      	ldrh	r0, [r7, #14]
 803e1e0:	2264      	movs	r2, #100	; 0x64
 803e1e2:	9202      	str	r2, [sp, #8]
 803e1e4:	9301      	str	r3, [sp, #4]
 803e1e6:	68bb      	ldr	r3, [r7, #8]
 803e1e8:	9300      	str	r3, [sp, #0]
 803e1ea:	2310      	movs	r3, #16
 803e1ec:	4602      	mov	r2, r0
 803e1ee:	4807      	ldr	r0, [pc, #28]	; (803e20c <EEPROM24XX_Load+0x44>)
 803e1f0:	f7f2 fb2a 	bl	8030848 <HAL_I2C_Mem_Read>
 803e1f4:	4603      	mov	r3, r0
 803e1f6:	2b00      	cmp	r3, #0
 803e1f8:	d101      	bne.n	803e1fe <EEPROM24XX_Load+0x36>
#endif
        return 1;
 803e1fa:	2301      	movs	r3, #1
 803e1fc:	e000      	b.n	803e200 <EEPROM24XX_Load+0x38>
    }
    return 0;
 803e1fe:	2300      	movs	r3, #0
}
 803e200:	4618      	mov	r0, r3
 803e202:	3710      	adds	r7, #16
 803e204:	46bd      	mov	sp, r7
 803e206:	bd80      	pop	{r7, pc}
 803e208:	200002a4 	.word	0x200002a4
 803e20c:	2000862c 	.word	0x2000862c

0803e210 <LOG_Char>:
/* Private functions declarations ----------------------------------------------*/
static void lock(void);
static void unlock(void);

/* Public functions implementation ---------------------------------------------*/
void LOG_Char(char ch) {
 803e210:	b580      	push	{r7, lr}
 803e212:	b084      	sub	sp, #16
 803e214:	af00      	add	r7, sp, #0
 803e216:	4603      	mov	r3, r0
 803e218:	71fb      	strb	r3, [r7, #7]
    uint32_t tick;

    tick = _GetTickMS();
 803e21a:	f001 fa5a 	bl	803f6d2 <_GetTickMS>
 803e21e:	60f8      	str	r0, [r7, #12]
    // wait if busy
    while (1) {
        if (ITM->PORT[0].u32 != 0 || _GetTickMS() - tick >= 10) {
 803e220:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 803e224:	681b      	ldr	r3, [r3, #0]
 803e226:	2b00      	cmp	r3, #0
 803e228:	d10a      	bne.n	803e240 <LOG_Char+0x30>
 803e22a:	f001 fa52 	bl	803f6d2 <_GetTickMS>
 803e22e:	4602      	mov	r2, r0
 803e230:	68fb      	ldr	r3, [r7, #12]
 803e232:	1ad3      	subs	r3, r2, r3
 803e234:	2b09      	cmp	r3, #9
 803e236:	d803      	bhi.n	803e240 <LOG_Char+0x30>
            break;
        }
        _DelayMS(1);
 803e238:	2001      	movs	r0, #1
 803e23a:	f001 fa3f 	bl	803f6bc <_DelayMS>
        if (ITM->PORT[0].u32 != 0 || _GetTickMS() - tick >= 10) {
 803e23e:	e7ef      	b.n	803e220 <LOG_Char+0x10>
    }
    // send to ITM0
    ITM->PORT[0].u8 = (uint8_t) ch;
 803e240:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 803e244:	79fb      	ldrb	r3, [r7, #7]
 803e246:	7013      	strb	r3, [r2, #0]
}
 803e248:	bf00      	nop
 803e24a:	3710      	adds	r7, #16
 803e24c:	46bd      	mov	sp, r7
 803e24e:	bd80      	pop	{r7, pc}

0803e250 <LOG_Enter>:

void LOG_Enter(void) {
 803e250:	b580      	push	{r7, lr}
 803e252:	af00      	add	r7, sp, #0
    lock();
 803e254:	f000 f8f8 	bl	803e448 <lock>
    LOG_Char('\n');
 803e258:	200a      	movs	r0, #10
 803e25a:	f7ff ffd9 	bl	803e210 <LOG_Char>
    unlock();
 803e25e:	f000 f901 	bl	803e464 <unlock>
}
 803e262:	bf00      	nop
 803e264:	bd80      	pop	{r7, pc}
	...

0803e268 <LOG_Int>:

void LOG_Int(int32_t num) {
 803e268:	b580      	push	{r7, lr}
 803e26a:	b086      	sub	sp, #24
 803e26c:	af00      	add	r7, sp, #0
 803e26e:	6078      	str	r0, [r7, #4]
    lock();
 803e270:	f000 f8ea 	bl	803e448 <lock>

    char str[10]; // 10 chars max for INT32_MAX
    int i = 0;
 803e274:	2300      	movs	r3, #0
 803e276:	617b      	str	r3, [r7, #20]
    if (num < 0) {
 803e278:	687b      	ldr	r3, [r7, #4]
 803e27a:	2b00      	cmp	r3, #0
 803e27c:	da05      	bge.n	803e28a <LOG_Int+0x22>
        LOG_Char('-');
 803e27e:	202d      	movs	r0, #45	; 0x2d
 803e280:	f7ff ffc6 	bl	803e210 <LOG_Char>
        num *= -1;
 803e284:	687b      	ldr	r3, [r7, #4]
 803e286:	425b      	negs	r3, r3
 803e288:	607b      	str	r3, [r7, #4]
    }
    do
        str[i++] = num % 10 + '0';
 803e28a:	687a      	ldr	r2, [r7, #4]
 803e28c:	4b1c      	ldr	r3, [pc, #112]	; (803e300 <LOG_Int+0x98>)
 803e28e:	fb83 1302 	smull	r1, r3, r3, r2
 803e292:	1099      	asrs	r1, r3, #2
 803e294:	17d3      	asrs	r3, r2, #31
 803e296:	1ac9      	subs	r1, r1, r3
 803e298:	460b      	mov	r3, r1
 803e29a:	009b      	lsls	r3, r3, #2
 803e29c:	440b      	add	r3, r1
 803e29e:	005b      	lsls	r3, r3, #1
 803e2a0:	1ad1      	subs	r1, r2, r3
 803e2a2:	b2ca      	uxtb	r2, r1
 803e2a4:	697b      	ldr	r3, [r7, #20]
 803e2a6:	1c59      	adds	r1, r3, #1
 803e2a8:	6179      	str	r1, [r7, #20]
 803e2aa:	3230      	adds	r2, #48	; 0x30
 803e2ac:	b2d2      	uxtb	r2, r2
 803e2ae:	f107 0118 	add.w	r1, r7, #24
 803e2b2:	440b      	add	r3, r1
 803e2b4:	f803 2c10 	strb.w	r2, [r3, #-16]
    while ((num /= 10) > 0);
 803e2b8:	687b      	ldr	r3, [r7, #4]
 803e2ba:	4a11      	ldr	r2, [pc, #68]	; (803e300 <LOG_Int+0x98>)
 803e2bc:	fb82 1203 	smull	r1, r2, r2, r3
 803e2c0:	1092      	asrs	r2, r2, #2
 803e2c2:	17db      	asrs	r3, r3, #31
 803e2c4:	1ad3      	subs	r3, r2, r3
 803e2c6:	607b      	str	r3, [r7, #4]
 803e2c8:	687b      	ldr	r3, [r7, #4]
 803e2ca:	2b00      	cmp	r3, #0
 803e2cc:	dcdd      	bgt.n	803e28a <LOG_Int+0x22>
    for (i--; i >= 0; i--)
 803e2ce:	697b      	ldr	r3, [r7, #20]
 803e2d0:	3b01      	subs	r3, #1
 803e2d2:	617b      	str	r3, [r7, #20]
 803e2d4:	e00a      	b.n	803e2ec <LOG_Int+0x84>
        LOG_Char(str[i]);
 803e2d6:	f107 0208 	add.w	r2, r7, #8
 803e2da:	697b      	ldr	r3, [r7, #20]
 803e2dc:	4413      	add	r3, r2
 803e2de:	781b      	ldrb	r3, [r3, #0]
 803e2e0:	4618      	mov	r0, r3
 803e2e2:	f7ff ff95 	bl	803e210 <LOG_Char>
    for (i--; i >= 0; i--)
 803e2e6:	697b      	ldr	r3, [r7, #20]
 803e2e8:	3b01      	subs	r3, #1
 803e2ea:	617b      	str	r3, [r7, #20]
 803e2ec:	697b      	ldr	r3, [r7, #20]
 803e2ee:	2b00      	cmp	r3, #0
 803e2f0:	daf1      	bge.n	803e2d6 <LOG_Int+0x6e>

    unlock();
 803e2f2:	f000 f8b7 	bl	803e464 <unlock>
}
 803e2f6:	bf00      	nop
 803e2f8:	3718      	adds	r7, #24
 803e2fa:	46bd      	mov	sp, r7
 803e2fc:	bd80      	pop	{r7, pc}
 803e2fe:	bf00      	nop
 803e300:	66666667 	.word	0x66666667

0803e304 <LOG_Hex8>:
        LOG_Char(str[i]);

    unlock();
}

void LOG_Hex8(uint8_t num) {
 803e304:	b580      	push	{r7, lr}
 803e306:	b082      	sub	sp, #8
 803e308:	af00      	add	r7, sp, #0
 803e30a:	4603      	mov	r3, r0
 803e30c:	71fb      	strb	r3, [r7, #7]
    lock();
 803e30e:	f000 f89b 	bl	803e448 <lock>

    LOG_Char(HEX_CHARS[(num >> 4) % 0x10]);
 803e312:	79fb      	ldrb	r3, [r7, #7]
 803e314:	091b      	lsrs	r3, r3, #4
 803e316:	b2db      	uxtb	r3, r3
 803e318:	461a      	mov	r2, r3
 803e31a:	4b09      	ldr	r3, [pc, #36]	; (803e340 <LOG_Hex8+0x3c>)
 803e31c:	5c9b      	ldrb	r3, [r3, r2]
 803e31e:	4618      	mov	r0, r3
 803e320:	f7ff ff76 	bl	803e210 <LOG_Char>
    LOG_Char(HEX_CHARS[(num & 0x0f) % 0x10]);
 803e324:	79fb      	ldrb	r3, [r7, #7]
 803e326:	f003 030f 	and.w	r3, r3, #15
 803e32a:	4a05      	ldr	r2, [pc, #20]	; (803e340 <LOG_Hex8+0x3c>)
 803e32c:	5cd3      	ldrb	r3, [r2, r3]
 803e32e:	4618      	mov	r0, r3
 803e330:	f7ff ff6e 	bl	803e210 <LOG_Char>

    unlock();
 803e334:	f000 f896 	bl	803e464 <unlock>
}
 803e338:	bf00      	nop
 803e33a:	3708      	adds	r7, #8
 803e33c:	46bd      	mov	sp, r7
 803e33e:	bd80      	pop	{r7, pc}
 803e340:	08043cbc 	.word	0x08043cbc

0803e344 <LOG_Str>:
    LOG_Char(HEX_CHARS[(num & 0x0f) % 0x10]);

    unlock();
}

void LOG_Str(char *str) {
 803e344:	b580      	push	{r7, lr}
 803e346:	b082      	sub	sp, #8
 803e348:	af00      	add	r7, sp, #0
 803e34a:	6078      	str	r0, [r7, #4]
    lock();
 803e34c:	f000 f87c 	bl	803e448 <lock>

    while (*str != '\0')
 803e350:	e006      	b.n	803e360 <LOG_Str+0x1c>
        LOG_Char(*str++);
 803e352:	687b      	ldr	r3, [r7, #4]
 803e354:	1c5a      	adds	r2, r3, #1
 803e356:	607a      	str	r2, [r7, #4]
 803e358:	781b      	ldrb	r3, [r3, #0]
 803e35a:	4618      	mov	r0, r3
 803e35c:	f7ff ff58 	bl	803e210 <LOG_Char>
    while (*str != '\0')
 803e360:	687b      	ldr	r3, [r7, #4]
 803e362:	781b      	ldrb	r3, [r3, #0]
 803e364:	2b00      	cmp	r3, #0
 803e366:	d1f4      	bne.n	803e352 <LOG_Str+0xe>

    unlock();
 803e368:	f000 f87c 	bl	803e464 <unlock>
}
 803e36c:	bf00      	nop
 803e36e:	3708      	adds	r7, #8
 803e370:	46bd      	mov	sp, r7
 803e372:	bd80      	pop	{r7, pc}

0803e374 <LOG_StrLn>:

void LOG_StrLn(char *str) {
 803e374:	b580      	push	{r7, lr}
 803e376:	b082      	sub	sp, #8
 803e378:	af00      	add	r7, sp, #0
 803e37a:	6078      	str	r0, [r7, #4]
    lock();
 803e37c:	f000 f864 	bl	803e448 <lock>

    while (*str != '\0') {
 803e380:	e006      	b.n	803e390 <LOG_StrLn+0x1c>
        LOG_Char(*str++);
 803e382:	687b      	ldr	r3, [r7, #4]
 803e384:	1c5a      	adds	r2, r3, #1
 803e386:	607a      	str	r2, [r7, #4]
 803e388:	781b      	ldrb	r3, [r3, #0]
 803e38a:	4618      	mov	r0, r3
 803e38c:	f7ff ff40 	bl	803e210 <LOG_Char>
    while (*str != '\0') {
 803e390:	687b      	ldr	r3, [r7, #4]
 803e392:	781b      	ldrb	r3, [r3, #0]
 803e394:	2b00      	cmp	r3, #0
 803e396:	d1f4      	bne.n	803e382 <LOG_StrLn+0xe>
    }
    LOG_Char('\n');
 803e398:	200a      	movs	r0, #10
 803e39a:	f7ff ff39 	bl	803e210 <LOG_Char>

    unlock();
 803e39e:	f000 f861 	bl	803e464 <unlock>
}
 803e3a2:	bf00      	nop
 803e3a4:	3708      	adds	r7, #8
 803e3a6:	46bd      	mov	sp, r7
 803e3a8:	bd80      	pop	{r7, pc}

0803e3aa <LOG_Buf>:

void LOG_Buf(char *buf, uint16_t bufsize) {
 803e3aa:	b580      	push	{r7, lr}
 803e3ac:	b084      	sub	sp, #16
 803e3ae:	af00      	add	r7, sp, #0
 803e3b0:	6078      	str	r0, [r7, #4]
 803e3b2:	460b      	mov	r3, r1
 803e3b4:	807b      	strh	r3, [r7, #2]
    lock();
 803e3b6:	f000 f847 	bl	803e448 <lock>

    uint16_t i;
    for (i = 0; i < bufsize; i++)
 803e3ba:	2300      	movs	r3, #0
 803e3bc:	81fb      	strh	r3, [r7, #14]
 803e3be:	e009      	b.n	803e3d4 <LOG_Buf+0x2a>
        LOG_Char(*buf++);
 803e3c0:	687b      	ldr	r3, [r7, #4]
 803e3c2:	1c5a      	adds	r2, r3, #1
 803e3c4:	607a      	str	r2, [r7, #4]
 803e3c6:	781b      	ldrb	r3, [r3, #0]
 803e3c8:	4618      	mov	r0, r3
 803e3ca:	f7ff ff21 	bl	803e210 <LOG_Char>
    for (i = 0; i < bufsize; i++)
 803e3ce:	89fb      	ldrh	r3, [r7, #14]
 803e3d0:	3301      	adds	r3, #1
 803e3d2:	81fb      	strh	r3, [r7, #14]
 803e3d4:	89fa      	ldrh	r2, [r7, #14]
 803e3d6:	887b      	ldrh	r3, [r7, #2]
 803e3d8:	429a      	cmp	r2, r3
 803e3da:	d3f1      	bcc.n	803e3c0 <LOG_Buf+0x16>

    unlock();
 803e3dc:	f000 f842 	bl	803e464 <unlock>
}
 803e3e0:	bf00      	nop
 803e3e2:	3710      	adds	r7, #16
 803e3e4:	46bd      	mov	sp, r7
 803e3e6:	bd80      	pop	{r7, pc}

0803e3e8 <LOG_BufHex>:
    }

    unlock();
}

void LOG_BufHex(char *buf, uint16_t bufsize) {
 803e3e8:	b580      	push	{r7, lr}
 803e3ea:	b084      	sub	sp, #16
 803e3ec:	af00      	add	r7, sp, #0
 803e3ee:	6078      	str	r0, [r7, #4]
 803e3f0:	460b      	mov	r3, r1
 803e3f2:	807b      	strh	r3, [r7, #2]
    lock();
 803e3f4:	f000 f828 	bl	803e448 <lock>

    uint16_t i;
    char ch;
    for (i = 0; i < bufsize; i++) {
 803e3f8:	2300      	movs	r3, #0
 803e3fa:	81fb      	strh	r3, [r7, #14]
 803e3fc:	e018      	b.n	803e430 <LOG_BufHex+0x48>
        ch = *buf++;
 803e3fe:	687b      	ldr	r3, [r7, #4]
 803e400:	1c5a      	adds	r2, r3, #1
 803e402:	607a      	str	r2, [r7, #4]
 803e404:	781b      	ldrb	r3, [r3, #0]
 803e406:	737b      	strb	r3, [r7, #13]
        LOG_Char(HEX_CHARS[(ch >> 4) % 0x10]);
 803e408:	7b7b      	ldrb	r3, [r7, #13]
 803e40a:	091b      	lsrs	r3, r3, #4
 803e40c:	b2db      	uxtb	r3, r3
 803e40e:	461a      	mov	r2, r3
 803e410:	4b0c      	ldr	r3, [pc, #48]	; (803e444 <LOG_BufHex+0x5c>)
 803e412:	5c9b      	ldrb	r3, [r3, r2]
 803e414:	4618      	mov	r0, r3
 803e416:	f7ff fefb 	bl	803e210 <LOG_Char>
        LOG_Char(HEX_CHARS[(ch & 0x0f) % 0x10]);
 803e41a:	7b7b      	ldrb	r3, [r7, #13]
 803e41c:	f003 030f 	and.w	r3, r3, #15
 803e420:	4a08      	ldr	r2, [pc, #32]	; (803e444 <LOG_BufHex+0x5c>)
 803e422:	5cd3      	ldrb	r3, [r2, r3]
 803e424:	4618      	mov	r0, r3
 803e426:	f7ff fef3 	bl	803e210 <LOG_Char>
    for (i = 0; i < bufsize; i++) {
 803e42a:	89fb      	ldrh	r3, [r7, #14]
 803e42c:	3301      	adds	r3, #1
 803e42e:	81fb      	strh	r3, [r7, #14]
 803e430:	89fa      	ldrh	r2, [r7, #14]
 803e432:	887b      	ldrh	r3, [r7, #2]
 803e434:	429a      	cmp	r2, r3
 803e436:	d3e2      	bcc.n	803e3fe <LOG_BufHex+0x16>
    }

    unlock();
 803e438:	f000 f814 	bl	803e464 <unlock>
}
 803e43c:	bf00      	nop
 803e43e:	3710      	adds	r7, #16
 803e440:	46bd      	mov	sp, r7
 803e442:	bd80      	pop	{r7, pc}
 803e444:	08043cbc 	.word	0x08043cbc

0803e448 <lock>:

    unlock();
}

/* Private functions implementations ----------------------------------------------*/
static void lock(void) {
 803e448:	b580      	push	{r7, lr}
 803e44a:	af00      	add	r7, sp, #0
#if (!BOOTLOADER)
    osMutexAcquire(LogMutexHandle, osWaitForever);
 803e44c:	4b04      	ldr	r3, [pc, #16]	; (803e460 <lock+0x18>)
 803e44e:	681b      	ldr	r3, [r3, #0]
 803e450:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 803e454:	4618      	mov	r0, r3
 803e456:	f7f9 fcf9 	bl	8037e4c <osMutexAcquire>
#endif
}
 803e45a:	bf00      	nop
 803e45c:	bd80      	pop	{r7, pc}
 803e45e:	bf00      	nop
 803e460:	20008684 	.word	0x20008684

0803e464 <unlock>:

static void unlock(void) {
 803e464:	b580      	push	{r7, lr}
 803e466:	af00      	add	r7, sp, #0
#if (!BOOTLOADER)
    osMutexRelease(LogMutexHandle);
 803e468:	4b03      	ldr	r3, [pc, #12]	; (803e478 <unlock+0x14>)
 803e46a:	681b      	ldr	r3, [r3, #0]
 803e46c:	4618      	mov	r0, r3
 803e46e:	f7f9 fd4b 	bl	8037f08 <osMutexRelease>
#endif
}
 803e472:	bf00      	nop
 803e474:	bd80      	pop	{r7, pc}
 803e476:	bf00      	nop
 803e478:	20008684 	.word	0x20008684

0803e47c <EEPROM_Init>:
static uint8_t EE_Command(uint16_t vaddr, EEPROM_COMMAND cmd, void *value, void *ptr, uint16_t size);
static void lock(void);
static void unlock(void);

/* Public functions implementation --------------------------------------------*/
uint8_t EEPROM_Init(void) {
 803e47c:	b580      	push	{r7, lr}
 803e47e:	b082      	sub	sp, #8
 803e480:	af00      	add	r7, sp, #0
    const uint8_t MAX_RETRY = 5;
 803e482:	2305      	movs	r3, #5
 803e484:	713b      	strb	r3, [r7, #4]
    const EEPROM24_DEVICE EEPROMS[2] = {
 803e486:	4b25      	ldr	r3, [pc, #148]	; (803e51c <EEPROM_Init+0xa0>)
 803e488:	881b      	ldrh	r3, [r3, #0]
 803e48a:	803b      	strh	r3, [r7, #0]
            EEPROM24_MAIN,
            EEPROM24_BACKUP
    };
    uint8_t retry, ret = 0;
 803e48c:	2300      	movs	r3, #0
 803e48e:	71bb      	strb	r3, [r7, #6]

    lock();
 803e490:	f000 f984 	bl	803e79c <lock>
    LOG_StrLn("EEPROM:Init");
 803e494:	4822      	ldr	r0, [pc, #136]	; (803e520 <EEPROM_Init+0xa4>)
 803e496:	f7ff ff6d 	bl	803e374 <LOG_StrLn>
    // check each eeprom
    for (uint8_t i = 0; i < 1; i++) {
 803e49a:	2300      	movs	r3, #0
 803e49c:	717b      	strb	r3, [r7, #5]
 803e49e:	e02a      	b.n	803e4f6 <EEPROM_Init+0x7a>
        if (!ret) {
 803e4a0:	79bb      	ldrb	r3, [r7, #6]
 803e4a2:	2b00      	cmp	r3, #0
 803e4a4:	d124      	bne.n	803e4f0 <EEPROM_Init+0x74>
            retry = MAX_RETRY;
 803e4a6:	793b      	ldrb	r3, [r7, #4]
 803e4a8:	71fb      	strb	r3, [r7, #7]
            EEPROM24XX_SetDevice(EEPROMS[i]);
 803e4aa:	797b      	ldrb	r3, [r7, #5]
 803e4ac:	f107 0208 	add.w	r2, r7, #8
 803e4b0:	4413      	add	r3, r2
 803e4b2:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 803e4b6:	4618      	mov	r0, r3
 803e4b8:	f7ff fe32 	bl	803e120 <EEPROM24XX_SetDevice>
            do {
                if (EEPROM24XX_IsConnected()) {
 803e4bc:	f7ff fe42 	bl	803e144 <EEPROM24XX_IsConnected>
 803e4c0:	4603      	mov	r3, r0
 803e4c2:	2b00      	cmp	r3, #0
 803e4c4:	d00c      	beq.n	803e4e0 <EEPROM_Init+0x64>
                    LOG_Str("EEPROM:Device = ");
 803e4c6:	4817      	ldr	r0, [pc, #92]	; (803e524 <EEPROM_Init+0xa8>)
 803e4c8:	f7ff ff3c 	bl	803e344 <LOG_Str>
                    LOG_Int(i + 1);
 803e4cc:	797b      	ldrb	r3, [r7, #5]
 803e4ce:	3301      	adds	r3, #1
 803e4d0:	4618      	mov	r0, r3
 803e4d2:	f7ff fec9 	bl	803e268 <LOG_Int>
                    LOG_Enter();
 803e4d6:	f7ff febb 	bl	803e250 <LOG_Enter>

                    ret = 1;
 803e4da:	2301      	movs	r3, #1
 803e4dc:	71bb      	strb	r3, [r7, #6]
                    break;
 803e4de:	e007      	b.n	803e4f0 <EEPROM_Init+0x74>
                }
                _DelayMS(50);
 803e4e0:	2032      	movs	r0, #50	; 0x32
 803e4e2:	f001 f8eb 	bl	803f6bc <_DelayMS>
            } while (retry--);
 803e4e6:	79fb      	ldrb	r3, [r7, #7]
 803e4e8:	1e5a      	subs	r2, r3, #1
 803e4ea:	71fa      	strb	r2, [r7, #7]
 803e4ec:	2b00      	cmp	r3, #0
 803e4ee:	d1e5      	bne.n	803e4bc <EEPROM_Init+0x40>
    for (uint8_t i = 0; i < 1; i++) {
 803e4f0:	797b      	ldrb	r3, [r7, #5]
 803e4f2:	3301      	adds	r3, #1
 803e4f4:	717b      	strb	r3, [r7, #5]
 803e4f6:	797b      	ldrb	r3, [r7, #5]
 803e4f8:	2b00      	cmp	r3, #0
 803e4fa:	d0d1      	beq.n	803e4a0 <EEPROM_Init+0x24>
        }
    }

    // all failed
    if (!ret) {
 803e4fc:	79bb      	ldrb	r3, [r7, #6]
 803e4fe:	2b00      	cmp	r3, #0
 803e500:	d102      	bne.n	803e508 <EEPROM_Init+0x8c>
        LOG_StrLn("EEPROM:Error");
 803e502:	4809      	ldr	r0, [pc, #36]	; (803e528 <EEPROM_Init+0xac>)
 803e504:	f7ff ff36 	bl	803e374 <LOG_StrLn>
    }
    unlock();
 803e508:	f000 f956 	bl	803e7b8 <unlock>

#if (!BOOTLOADER)
    // Load or Reset
    EEPROM_ResetOrLoad();
 803e50c:	f000 f80e 	bl	803e52c <EEPROM_ResetOrLoad>
#endif
    return ret;
 803e510:	79bb      	ldrb	r3, [r7, #6]
}
 803e512:	4618      	mov	r0, r3
 803e514:	3708      	adds	r7, #8
 803e516:	46bd      	mov	sp, r7
 803e518:	bd80      	pop	{r7, pc}
 803e51a:	bf00      	nop
 803e51c:	08043d00 	.word	0x08043d00
 803e520:	08043cd0 	.word	0x08043cd0
 803e524:	08043cdc 	.word	0x08043cdc
 803e528:	08043cf0 	.word	0x08043cf0

0803e52c <EEPROM_ResetOrLoad>:

#if (!BOOTLOADER)
void EEPROM_ResetOrLoad(void) {
 803e52c:	b580      	push	{r7, lr}
 803e52e:	b086      	sub	sp, #24
 803e530:	af00      	add	r7, sp, #0
    uint32_t AesKeyNew[4];

    if (!EEPROM_Reset(EE_CMD_R, EEPROM_RESET)) {
 803e532:	2135      	movs	r1, #53	; 0x35
 803e534:	2000      	movs	r0, #0
 803e536:	f000 f849 	bl	803e5cc <EEPROM_Reset>
 803e53a:	4603      	mov	r3, r0
 803e53c:	2b00      	cmp	r3, #0
 803e53e:	d11b      	bne.n	803e578 <EEPROM_ResetOrLoad+0x4c>
        // load from EEPROM
        EEPROM_UnitID(EE_CMD_R, EE_NULL);
 803e540:	2100      	movs	r1, #0
 803e542:	2000      	movs	r0, #0
 803e544:	f000 f88a 	bl	803e65c <EEPROM_UnitID>
        EEPROM_Odometer(EE_CMD_R, EE_NULL);
 803e548:	2100      	movs	r1, #0
 803e54a:	2000      	movs	r0, #0
 803e54c:	f000 f868 	bl	803e620 <EEPROM_Odometer>
        for (uint8_t type = 0; type <= PAYLOAD_MAX; type++) {
 803e550:	2300      	movs	r3, #0
 803e552:	75fb      	strb	r3, [r7, #23]
 803e554:	e008      	b.n	803e568 <EEPROM_ResetOrLoad+0x3c>
            EEPROM_SequentialID(EE_CMD_R, EE_NULL, type);
 803e556:	7dfb      	ldrb	r3, [r7, #23]
 803e558:	461a      	mov	r2, r3
 803e55a:	2100      	movs	r1, #0
 803e55c:	2000      	movs	r0, #0
 803e55e:	f000 f899 	bl	803e694 <EEPROM_SequentialID>
        for (uint8_t type = 0; type <= PAYLOAD_MAX; type++) {
 803e562:	7dfb      	ldrb	r3, [r7, #23]
 803e564:	3301      	adds	r3, #1
 803e566:	75fb      	strb	r3, [r7, #23]
 803e568:	7dfb      	ldrb	r3, [r7, #23]
 803e56a:	2b01      	cmp	r3, #1
 803e56c:	d9f3      	bls.n	803e556 <EEPROM_ResetOrLoad+0x2a>
        }
        // load aes key
        EEPROM_AesKey(EE_CMD_R, EE_NULL);
 803e56e:	2100      	movs	r1, #0
 803e570:	2000      	movs	r0, #0
 803e572:	f000 f8b7 	bl	803e6e4 <EEPROM_AesKey>

        // re-write eeprom
        EEPROM_Reset(EE_CMD_W, EEPROM_RESET);
    }

}
 803e576:	e023      	b.n	803e5c0 <EEPROM_ResetOrLoad+0x94>
        EEPROM_UnitID(EE_CMD_W, VCU_UNITID);
 803e578:	4913      	ldr	r1, [pc, #76]	; (803e5c8 <EEPROM_ResetOrLoad+0x9c>)
 803e57a:	2001      	movs	r0, #1
 803e57c:	f000 f86e 	bl	803e65c <EEPROM_UnitID>
        EEPROM_Odometer(EE_CMD_W, 0);
 803e580:	2100      	movs	r1, #0
 803e582:	2001      	movs	r0, #1
 803e584:	f000 f84c 	bl	803e620 <EEPROM_Odometer>
        for (uint8_t type = 0; type <= PAYLOAD_MAX; type++) {
 803e588:	2300      	movs	r3, #0
 803e58a:	75bb      	strb	r3, [r7, #22]
 803e58c:	e008      	b.n	803e5a0 <EEPROM_ResetOrLoad+0x74>
            EEPROM_SequentialID(EE_CMD_W, 0, type);
 803e58e:	7dbb      	ldrb	r3, [r7, #22]
 803e590:	461a      	mov	r2, r3
 803e592:	2100      	movs	r1, #0
 803e594:	2001      	movs	r0, #1
 803e596:	f000 f87d 	bl	803e694 <EEPROM_SequentialID>
        for (uint8_t type = 0; type <= PAYLOAD_MAX; type++) {
 803e59a:	7dbb      	ldrb	r3, [r7, #22]
 803e59c:	3301      	adds	r3, #1
 803e59e:	75bb      	strb	r3, [r7, #22]
 803e5a0:	7dbb      	ldrb	r3, [r7, #22]
 803e5a2:	2b01      	cmp	r3, #1
 803e5a4:	d9f3      	bls.n	803e58e <EEPROM_ResetOrLoad+0x62>
        KLESS_GenerateAesKey(AesKeyNew);
 803e5a6:	1d3b      	adds	r3, r7, #4
 803e5a8:	4618      	mov	r0, r3
 803e5aa:	f7e9 fd1d 	bl	8027fe8 <KLESS_GenerateAesKey>
        EEPROM_AesKey(EE_CMD_W, AesKeyNew);
 803e5ae:	1d3b      	adds	r3, r7, #4
 803e5b0:	4619      	mov	r1, r3
 803e5b2:	2001      	movs	r0, #1
 803e5b4:	f000 f896 	bl	803e6e4 <EEPROM_AesKey>
        EEPROM_Reset(EE_CMD_W, EEPROM_RESET);
 803e5b8:	2135      	movs	r1, #53	; 0x35
 803e5ba:	2001      	movs	r0, #1
 803e5bc:	f000 f806 	bl	803e5cc <EEPROM_Reset>
}
 803e5c0:	bf00      	nop
 803e5c2:	3718      	adds	r7, #24
 803e5c4:	46bd      	mov	sp, r7
 803e5c6:	bd80      	pop	{r7, pc}
 803e5c8:	00056809 	.word	0x00056809

0803e5cc <EEPROM_Reset>:

uint8_t EEPROM_Reset(EEPROM_COMMAND cmd, uint16_t value) {
 803e5cc:	b580      	push	{r7, lr}
 803e5ce:	b086      	sub	sp, #24
 803e5d0:	af02      	add	r7, sp, #8
 803e5d2:	4603      	mov	r3, r0
 803e5d4:	460a      	mov	r2, r1
 803e5d6:	71fb      	strb	r3, [r7, #7]
 803e5d8:	4613      	mov	r3, r2
 803e5da:	80bb      	strh	r3, [r7, #4]
    uint8_t ret;
    uint16_t tmp = value, temp;
 803e5dc:	88bb      	ldrh	r3, [r7, #4]
 803e5de:	81fb      	strh	r3, [r7, #14]

    ret = EE_Command(VADDR_RESET, cmd, &value, &temp, sizeof(value));
 803e5e0:	f107 000a 	add.w	r0, r7, #10
 803e5e4:	1d3a      	adds	r2, r7, #4
 803e5e6:	79f9      	ldrb	r1, [r7, #7]
 803e5e8:	2302      	movs	r3, #2
 803e5ea:	9300      	str	r3, [sp, #0]
 803e5ec:	4603      	mov	r3, r0
 803e5ee:	2000      	movs	r0, #0
 803e5f0:	f000 f89c 	bl	803e72c <EE_Command>
 803e5f4:	4603      	mov	r3, r0
 803e5f6:	737b      	strb	r3, [r7, #13]

    if (ret) {
 803e5f8:	7b7b      	ldrb	r3, [r7, #13]
 803e5fa:	2b00      	cmp	r3, #0
 803e5fc:	d00a      	beq.n	803e614 <EEPROM_Reset+0x48>
        if (cmd == EE_CMD_R) {
 803e5fe:	79fb      	ldrb	r3, [r7, #7]
 803e600:	2b00      	cmp	r3, #0
 803e602:	d107      	bne.n	803e614 <EEPROM_Reset+0x48>
            return tmp != temp;
 803e604:	897b      	ldrh	r3, [r7, #10]
 803e606:	89fa      	ldrh	r2, [r7, #14]
 803e608:	429a      	cmp	r2, r3
 803e60a:	bf14      	ite	ne
 803e60c:	2301      	movne	r3, #1
 803e60e:	2300      	moveq	r3, #0
 803e610:	b2db      	uxtb	r3, r3
 803e612:	e000      	b.n	803e616 <EEPROM_Reset+0x4a>
        }
    }

    return ret;
 803e614:	7b7b      	ldrb	r3, [r7, #13]
}
 803e616:	4618      	mov	r0, r3
 803e618:	3710      	adds	r7, #16
 803e61a:	46bd      	mov	sp, r7
 803e61c:	bd80      	pop	{r7, pc}
	...

0803e620 <EEPROM_Odometer>:

uint8_t EEPROM_Odometer(EEPROM_COMMAND cmd, uint32_t value) {
 803e620:	b580      	push	{r7, lr}
 803e622:	b084      	sub	sp, #16
 803e624:	af02      	add	r7, sp, #8
 803e626:	4603      	mov	r3, r0
 803e628:	6039      	str	r1, [r7, #0]
 803e62a:	71fb      	strb	r3, [r7, #7]
    // reset on overflow
    if (value > VCU_ODOMETER_MAX) {
 803e62c:	683b      	ldr	r3, [r7, #0]
 803e62e:	4a09      	ldr	r2, [pc, #36]	; (803e654 <EEPROM_Odometer+0x34>)
 803e630:	4293      	cmp	r3, r2
 803e632:	d901      	bls.n	803e638 <EEPROM_Odometer+0x18>
        value = 0;
 803e634:	2300      	movs	r3, #0
 803e636:	603b      	str	r3, [r7, #0]
    }

    return EE_Command(VADDR_ODOMETER, cmd, &value, &(VCU.d.odometer), sizeof(value));
 803e638:	463a      	mov	r2, r7
 803e63a:	79f9      	ldrb	r1, [r7, #7]
 803e63c:	2304      	movs	r3, #4
 803e63e:	9300      	str	r3, [sp, #0]
 803e640:	4b05      	ldr	r3, [pc, #20]	; (803e658 <EEPROM_Odometer+0x38>)
 803e642:	2002      	movs	r0, #2
 803e644:	f000 f872 	bl	803e72c <EE_Command>
 803e648:	4603      	mov	r3, r0
}
 803e64a:	4618      	mov	r0, r3
 803e64c:	3708      	adds	r7, #8
 803e64e:	46bd      	mov	sp, r7
 803e650:	bd80      	pop	{r7, pc}
 803e652:	bf00      	nop
 803e654:	0001869f 	.word	0x0001869f
 803e658:	20000234 	.word	0x20000234

0803e65c <EEPROM_UnitID>:

uint8_t EEPROM_UnitID(EEPROM_COMMAND cmd, uint32_t value) {
 803e65c:	b580      	push	{r7, lr}
 803e65e:	b086      	sub	sp, #24
 803e660:	af02      	add	r7, sp, #8
 803e662:	4603      	mov	r3, r0
 803e664:	6039      	str	r1, [r7, #0]
 803e666:	71fb      	strb	r3, [r7, #7]
    uint8_t ret;

    ret = EE_Command(VADDR_UNITID, cmd, &value, &(VCU.d.unit_id), sizeof(value));
 803e668:	463a      	mov	r2, r7
 803e66a:	79f9      	ldrb	r1, [r7, #7]
 803e66c:	2304      	movs	r3, #4
 803e66e:	9300      	str	r3, [sp, #0]
 803e670:	4b07      	ldr	r3, [pc, #28]	; (803e690 <EEPROM_UnitID+0x34>)
 803e672:	2006      	movs	r0, #6
 803e674:	f000 f85a 	bl	803e72c <EE_Command>
 803e678:	4603      	mov	r3, r0
 803e67a:	73fb      	strb	r3, [r7, #15]

    // update the NRF Address
    if (cmd == EE_CMD_W) {
 803e67c:	79fb      	ldrb	r3, [r7, #7]
 803e67e:	2b01      	cmp	r3, #1
 803e680:	d101      	bne.n	803e686 <EEPROM_UnitID+0x2a>
        KLESS_Init();
 803e682:	f7e9 fbeb 	bl	8027e5c <KLESS_Init>
    }

    return ret;
 803e686:	7bfb      	ldrb	r3, [r7, #15]
}
 803e688:	4618      	mov	r0, r3
 803e68a:	3710      	adds	r7, #16
 803e68c:	46bd      	mov	sp, r7
 803e68e:	bd80      	pop	{r7, pc}
 803e690:	20000228 	.word	0x20000228

0803e694 <EEPROM_SequentialID>:

uint8_t EEPROM_SequentialID(EEPROM_COMMAND cmd, uint16_t value, PAYLOAD_TYPE type) {
 803e694:	b580      	push	{r7, lr}
 803e696:	b086      	sub	sp, #24
 803e698:	af02      	add	r7, sp, #8
 803e69a:	4603      	mov	r3, r0
 803e69c:	71fb      	strb	r3, [r7, #7]
 803e69e:	460b      	mov	r3, r1
 803e6a0:	80bb      	strh	r3, [r7, #4]
 803e6a2:	4613      	mov	r3, r2
 803e6a4:	71bb      	strb	r3, [r7, #6]
    uint16_t *pSeqId;
    uint32_t vaddr;

    // decide payload type
    if (type == PAYLOAD_REPORT) {
 803e6a6:	79bb      	ldrb	r3, [r7, #6]
 803e6a8:	2b01      	cmp	r3, #1
 803e6aa:	d104      	bne.n	803e6b6 <EEPROM_SequentialID+0x22>
        pSeqId = &(VCU.d.seq_id.report);
 803e6ac:	4b0b      	ldr	r3, [pc, #44]	; (803e6dc <EEPROM_SequentialID+0x48>)
 803e6ae:	60fb      	str	r3, [r7, #12]
        vaddr = VADDR_REPORT_SEQ_ID;
 803e6b0:	230a      	movs	r3, #10
 803e6b2:	60bb      	str	r3, [r7, #8]
 803e6b4:	e003      	b.n	803e6be <EEPROM_SequentialID+0x2a>
    } else {
        pSeqId = &(VCU.d.seq_id.response);
 803e6b6:	4b0a      	ldr	r3, [pc, #40]	; (803e6e0 <EEPROM_SequentialID+0x4c>)
 803e6b8:	60fb      	str	r3, [r7, #12]
        vaddr = VADDR_RESPONSE_SEQ_ID;
 803e6ba:	230c      	movs	r3, #12
 803e6bc:	60bb      	str	r3, [r7, #8]
    }

    return EE_Command(vaddr, cmd, &value, pSeqId, sizeof(value));
 803e6be:	68bb      	ldr	r3, [r7, #8]
 803e6c0:	b298      	uxth	r0, r3
 803e6c2:	1d3a      	adds	r2, r7, #4
 803e6c4:	79f9      	ldrb	r1, [r7, #7]
 803e6c6:	2302      	movs	r3, #2
 803e6c8:	9300      	str	r3, [sp, #0]
 803e6ca:	68fb      	ldr	r3, [r7, #12]
 803e6cc:	f000 f82e 	bl	803e72c <EE_Command>
 803e6d0:	4603      	mov	r3, r0
}
 803e6d2:	4618      	mov	r0, r3
 803e6d4:	3710      	adds	r7, #16
 803e6d6:	46bd      	mov	sp, r7
 803e6d8:	bd80      	pop	{r7, pc}
 803e6da:	bf00      	nop
 803e6dc:	20000268 	.word	0x20000268
 803e6e0:	2000026a 	.word	0x2000026a

0803e6e4 <EEPROM_AesKey>:

uint8_t EEPROM_AesKey(EEPROM_COMMAND cmd, uint32_t *value) {
 803e6e4:	b580      	push	{r7, lr}
 803e6e6:	b08a      	sub	sp, #40	; 0x28
 803e6e8:	af02      	add	r7, sp, #8
 803e6ea:	4603      	mov	r3, r0
 803e6ec:	6039      	str	r1, [r7, #0]
 803e6ee:	71fb      	strb	r3, [r7, #7]
    uint8_t ret;
    uint32_t *ptr, tmp[4];

    // eeprom
    ptr = (cmd == EE_CMD_W ? value : tmp);
 803e6f0:	79fb      	ldrb	r3, [r7, #7]
 803e6f2:	2b01      	cmp	r3, #1
 803e6f4:	d002      	beq.n	803e6fc <EEPROM_AesKey+0x18>
 803e6f6:	f107 0308 	add.w	r3, r7, #8
 803e6fa:	e000      	b.n	803e6fe <EEPROM_AesKey+0x1a>
 803e6fc:	683b      	ldr	r3, [r7, #0]
 803e6fe:	61fb      	str	r3, [r7, #28]
    ret = EE_Command(VADDR_AES_KEY, cmd, ptr, AesKey, 16);
 803e700:	79f9      	ldrb	r1, [r7, #7]
 803e702:	2310      	movs	r3, #16
 803e704:	9300      	str	r3, [sp, #0]
 803e706:	4b08      	ldr	r3, [pc, #32]	; (803e728 <EEPROM_AesKey+0x44>)
 803e708:	69fa      	ldr	r2, [r7, #28]
 803e70a:	200e      	movs	r0, #14
 803e70c:	f000 f80e 	bl	803e72c <EE_Command>
 803e710:	4603      	mov	r3, r0
 803e712:	76fb      	strb	r3, [r7, #27]

    // apply the AES key
    if (cmd == EE_CMD_W) {
 803e714:	79fb      	ldrb	r3, [r7, #7]
 803e716:	2b01      	cmp	r3, #1
 803e718:	d101      	bne.n	803e71e <EEPROM_AesKey+0x3a>
        AES_Init();
 803e71a:	f7e5 f8e5 	bl	80238e8 <AES_Init>
    }

    return ret;
 803e71e:	7efb      	ldrb	r3, [r7, #27]
}
 803e720:	4618      	mov	r0, r3
 803e722:	3720      	adds	r7, #32
 803e724:	46bd      	mov	sp, r7
 803e726:	bd80      	pop	{r7, pc}
 803e728:	20008364 	.word	0x20008364

0803e72c <EE_Command>:
    return EE_Command(VADDR_DFU_FLAG, cmd, &value, &DFU_FLAG, sizeof(value));
}
#endif

/* Private functions implementation --------------------------------------------*/
static uint8_t EE_Command(uint16_t vaddr, EEPROM_COMMAND cmd, void *value, void *ptr, uint16_t size) {
 803e72c:	b580      	push	{r7, lr}
 803e72e:	b086      	sub	sp, #24
 803e730:	af00      	add	r7, sp, #0
 803e732:	60ba      	str	r2, [r7, #8]
 803e734:	607b      	str	r3, [r7, #4]
 803e736:	4603      	mov	r3, r0
 803e738:	81fb      	strh	r3, [r7, #14]
 803e73a:	460b      	mov	r3, r1
 803e73c:	737b      	strb	r3, [r7, #13]
    uint8_t ret = 0;
 803e73e:	2300      	movs	r3, #0
 803e740:	75fb      	strb	r3, [r7, #23]

    lock();
 803e742:	f000 f82b 	bl	803e79c <lock>

    // check if new value is same with old value
    if (cmd == EE_CMD_W) {
 803e746:	7b7b      	ldrb	r3, [r7, #13]
 803e748:	2b01      	cmp	r3, #1
 803e74a:	d10e      	bne.n	803e76a <EE_Command+0x3e>
        // apply the value
        memcpy(ptr, value, size);
 803e74c:	8c3b      	ldrh	r3, [r7, #32]
 803e74e:	461a      	mov	r2, r3
 803e750:	68b9      	ldr	r1, [r7, #8]
 803e752:	6878      	ldr	r0, [r7, #4]
 803e754:	f001 f8d1 	bl	803f8fa <memcpy>
        // save the value
        ret = EEPROM24XX_Save(vaddr, value, size);
 803e758:	8c3a      	ldrh	r2, [r7, #32]
 803e75a:	89fb      	ldrh	r3, [r7, #14]
 803e75c:	68b9      	ldr	r1, [r7, #8]
 803e75e:	4618      	mov	r0, r3
 803e760:	f7ff fd06 	bl	803e170 <EEPROM24XX_Save>
 803e764:	4603      	mov	r3, r0
 803e766:	75fb      	strb	r3, [r7, #23]
 803e768:	e010      	b.n	803e78c <EE_Command+0x60>
    } else {
        // load the value
        ret = EEPROM24XX_Load(vaddr, value, size);
 803e76a:	8c3a      	ldrh	r2, [r7, #32]
 803e76c:	89fb      	ldrh	r3, [r7, #14]
 803e76e:	68b9      	ldr	r1, [r7, #8]
 803e770:	4618      	mov	r0, r3
 803e772:	f7ff fd29 	bl	803e1c8 <EEPROM24XX_Load>
 803e776:	4603      	mov	r3, r0
 803e778:	75fb      	strb	r3, [r7, #23]
        // apply the value
        if (ret) {
 803e77a:	7dfb      	ldrb	r3, [r7, #23]
 803e77c:	2b00      	cmp	r3, #0
 803e77e:	d005      	beq.n	803e78c <EE_Command+0x60>
            memcpy(ptr, value, size);
 803e780:	8c3b      	ldrh	r3, [r7, #32]
 803e782:	461a      	mov	r2, r3
 803e784:	68b9      	ldr	r1, [r7, #8]
 803e786:	6878      	ldr	r0, [r7, #4]
 803e788:	f001 f8b7 	bl	803f8fa <memcpy>
        }
    }

    unlock();
 803e78c:	f000 f814 	bl	803e7b8 <unlock>
    return ret;
 803e790:	7dfb      	ldrb	r3, [r7, #23]
}
 803e792:	4618      	mov	r0, r3
 803e794:	3718      	adds	r7, #24
 803e796:	46bd      	mov	sp, r7
 803e798:	bd80      	pop	{r7, pc}
	...

0803e79c <lock>:

static void lock(void) {
 803e79c:	b580      	push	{r7, lr}
 803e79e:	af00      	add	r7, sp, #0
#if (!BOOTLOADER)
    osMutexAcquire(EepromMutexHandle, osWaitForever);
 803e7a0:	4b04      	ldr	r3, [pc, #16]	; (803e7b4 <lock+0x18>)
 803e7a2:	681b      	ldr	r3, [r3, #0]
 803e7a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 803e7a8:	4618      	mov	r0, r3
 803e7aa:	f7f9 fb4f 	bl	8037e4c <osMutexAcquire>
#endif
}
 803e7ae:	bf00      	nop
 803e7b0:	bd80      	pop	{r7, pc}
 803e7b2:	bf00      	nop
 803e7b4:	20008978 	.word	0x20008978

0803e7b8 <unlock>:

static void unlock(void) {
 803e7b8:	b580      	push	{r7, lr}
 803e7ba:	af00      	add	r7, sp, #0
#if (!BOOTLOADER)
    osMutexRelease(EepromMutexHandle);
 803e7bc:	4b03      	ldr	r3, [pc, #12]	; (803e7cc <unlock+0x14>)
 803e7be:	681b      	ldr	r3, [r3, #0]
 803e7c0:	4618      	mov	r0, r3
 803e7c2:	f7f9 fba1 	bl	8037f08 <osMutexRelease>
#endif
}
 803e7c6:	bf00      	nop
 803e7c8:	bd80      	pop	{r7, pc}
 803e7ca:	bf00      	nop
 803e7cc:	20008978 	.word	0x20008978

0803e7d0 <Simcom_Lock>:
static SIMCOM_RESULT Simcom_ProcessACK(header_t *header);
static uint8_t Simcom_CommandoIRQ(void);
#endif

/* Public functions implementation --------------------------------------------*/
void Simcom_Lock(void) {
 803e7d0:	b580      	push	{r7, lr}
 803e7d2:	af00      	add	r7, sp, #0
#if (!BOOTLOADER)
    osMutexAcquire(SimcomRecMutexHandle, osWaitForever);
 803e7d4:	4b04      	ldr	r3, [pc, #16]	; (803e7e8 <Simcom_Lock+0x18>)
 803e7d6:	681b      	ldr	r3, [r3, #0]
 803e7d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 803e7dc:	4618      	mov	r0, r3
 803e7de:	f7f9 fb35 	bl	8037e4c <osMutexAcquire>
#endif
}
 803e7e2:	bf00      	nop
 803e7e4:	bd80      	pop	{r7, pc}
 803e7e6:	bf00      	nop
 803e7e8:	20008a58 	.word	0x20008a58

0803e7ec <Simcom_Unlock>:

void Simcom_Unlock(void) {
 803e7ec:	b580      	push	{r7, lr}
 803e7ee:	af00      	add	r7, sp, #0
#if (!BOOTLOADER)
    osMutexRelease(SimcomRecMutexHandle);
 803e7f0:	4b03      	ldr	r3, [pc, #12]	; (803e800 <Simcom_Unlock+0x14>)
 803e7f2:	681b      	ldr	r3, [r3, #0]
 803e7f4:	4618      	mov	r0, r3
 803e7f6:	f7f9 fb87 	bl	8037f08 <osMutexRelease>
#endif
}
 803e7fa:	bf00      	nop
 803e7fc:	bd80      	pop	{r7, pc}
 803e7fe:	bf00      	nop
 803e800:	20008a58 	.word	0x20008a58

0803e804 <Simcom_Response>:

char* Simcom_Response(char *str) {
 803e804:	b580      	push	{r7, lr}
 803e806:	b082      	sub	sp, #8
 803e808:	af00      	add	r7, sp, #0
 803e80a:	6078      	str	r0, [r7, #4]
    return strstr(SIMCOM_UART_RX, str);
 803e80c:	6879      	ldr	r1, [r7, #4]
 803e80e:	4804      	ldr	r0, [pc, #16]	; (803e820 <Simcom_Response+0x1c>)
 803e810:	f001 f8b8 	bl	803f984 <strstr>
 803e814:	4603      	mov	r3, r0
}
 803e816:	4618      	mov	r0, r3
 803e818:	3708      	adds	r7, #8
 803e81a:	46bd      	mov	sp, r7
 803e81c:	bd80      	pop	{r7, pc}
 803e81e:	bf00      	nop
 803e820:	20008ae4 	.word	0x20008ae4

0803e824 <Simcom_SetState>:

uint8_t Simcom_SetState(SIMCOM_STATE state, uint32_t timeout) {
 803e824:	b5b0      	push	{r4, r5, r7, lr}
 803e826:	b0b0      	sub	sp, #192	; 0xc0
 803e828:	af00      	add	r7, sp, #0
 803e82a:	4603      	mov	r3, r0
 803e82c:	6039      	str	r1, [r7, #0]
 803e82e:	71fb      	strb	r3, [r7, #7]
    SIMCOM_STATE lastState = SIM_STATE_DOWN;
 803e830:	23ff      	movs	r3, #255	; 0xff
 803e832:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
    uint32_t tick = _GetTickMS();
 803e836:	f000 ff4c 	bl	803f6d2 <_GetTickMS>
 803e83a:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
    static uint8_t init = 1;
    uint8_t depth = 3;
 803e83e:	2303      	movs	r3, #3
 803e840:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    SIMCOM_RESULT p;

    Simcom_Lock();
 803e844:	f7ff ffc4 	bl	803e7d0 <Simcom_Lock>
    // Handle SIMCOM state properly
    while (SIM.state < state) {
 803e848:	e3e2      	b.n	803f010 <Simcom_SetState+0x7ec>
        if (timeout) {
 803e84a:	683b      	ldr	r3, [r7, #0]
 803e84c:	2b00      	cmp	r3, #0
 803e84e:	d014      	beq.n	803e87a <Simcom_SetState+0x56>
            // Update tick
            if (p == SIM_RESULT_OK) {
 803e850:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803e854:	2b01      	cmp	r3, #1
 803e856:	d103      	bne.n	803e860 <Simcom_SetState+0x3c>
                tick = _GetTickMS();
 803e858:	f000 ff3b 	bl	803f6d2 <_GetTickMS>
 803e85c:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
            }
            // Handle timeout
            if ((_GetTickMS() - tick) > timeout) {
 803e860:	f000 ff37 	bl	803f6d2 <_GetTickMS>
 803e864:	4602      	mov	r2, r0
 803e866:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 803e86a:	1ad3      	subs	r3, r2, r3
 803e86c:	683a      	ldr	r2, [r7, #0]
 803e86e:	429a      	cmp	r2, r3
 803e870:	d203      	bcs.n	803e87a <Simcom_SetState+0x56>
                LOG_StrLn("Simcom:StateTimeout");
 803e872:	48c4      	ldr	r0, [pc, #784]	; (803eb84 <Simcom_SetState+0x360>)
 803e874:	f7ff fd7e 	bl	803e374 <LOG_StrLn>
                break;
 803e878:	e3d2      	b.n	803f020 <Simcom_SetState+0x7fc>
            }
        }
        // Handle locked-loop
        if (SIM.state < lastState) {
 803e87a:	4bc3      	ldr	r3, [pc, #780]	; (803eb88 <Simcom_SetState+0x364>)
 803e87c:	f993 3000 	ldrsb.w	r3, [r3]
 803e880:	f997 20bf 	ldrsb.w	r2, [r7, #191]	; 0xbf
 803e884:	429a      	cmp	r2, r3
 803e886:	dd16      	ble.n	803e8b6 <Simcom_SetState+0x92>
            if (!--depth) {
 803e888:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 803e88c:	3b01      	subs	r3, #1
 803e88e:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 803e892:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 803e896:	2b00      	cmp	r3, #0
 803e898:	d103      	bne.n	803e8a2 <Simcom_SetState+0x7e>
                SIM.state = SIM_STATE_DOWN;
 803e89a:	4bbb      	ldr	r3, [pc, #748]	; (803eb88 <Simcom_SetState+0x364>)
 803e89c:	22ff      	movs	r2, #255	; 0xff
 803e89e:	701a      	strb	r2, [r3, #0]
                break;
 803e8a0:	e3be      	b.n	803f020 <Simcom_SetState+0x7fc>
            }
            LOG_Str("Simcom:LockedLoop = ");
 803e8a2:	48ba      	ldr	r0, [pc, #744]	; (803eb8c <Simcom_SetState+0x368>)
 803e8a4:	f7ff fd4e 	bl	803e344 <LOG_Str>
            LOG_Int(depth);
 803e8a8:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 803e8ac:	4618      	mov	r0, r3
 803e8ae:	f7ff fcdb 	bl	803e268 <LOG_Int>
            LOG_Enter();
 803e8b2:	f7ff fccd 	bl	803e250 <LOG_Enter>
        }
        // Handle signal
        if (SIM.state == SIM_STATE_DOWN) {
 803e8b6:	4bb4      	ldr	r3, [pc, #720]	; (803eb88 <Simcom_SetState+0x364>)
 803e8b8:	f993 3000 	ldrsb.w	r3, [r3]
 803e8bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 803e8c0:	d103      	bne.n	803e8ca <Simcom_SetState+0xa6>
            SIM.signal = 0;
 803e8c2:	4bb1      	ldr	r3, [pc, #708]	; (803eb88 <Simcom_SetState+0x364>)
 803e8c4:	2200      	movs	r2, #0
 803e8c6:	741a      	strb	r2, [r3, #16]
 803e8c8:	e00f      	b.n	803e8ea <Simcom_SetState+0xc6>
        } else {
            Simcom_IdleJob(NULL);
 803e8ca:	2000      	movs	r0, #0
 803e8cc:	f000 fcd6 	bl	803f27c <Simcom_IdleJob>
            if (SIM.state >= SIM_STATE_GPRS_ON) {
 803e8d0:	4bad      	ldr	r3, [pc, #692]	; (803eb88 <Simcom_SetState+0x364>)
 803e8d2:	f993 3000 	ldrsb.w	r3, [r3]
 803e8d6:	2b02      	cmp	r3, #2
 803e8d8:	dd07      	ble.n	803e8ea <Simcom_SetState+0xc6>
                // Force to exit loop
                if (SIM.signal < 15) {
 803e8da:	4bab      	ldr	r3, [pc, #684]	; (803eb88 <Simcom_SetState+0x364>)
 803e8dc:	7c1b      	ldrb	r3, [r3, #16]
 803e8de:	2b0e      	cmp	r3, #14
 803e8e0:	d803      	bhi.n	803e8ea <Simcom_SetState+0xc6>
                    LOG_StrLn("Simcom:PoorSignal");
 803e8e2:	48ab      	ldr	r0, [pc, #684]	; (803eb90 <Simcom_SetState+0x36c>)
 803e8e4:	f7ff fd46 	bl	803e374 <LOG_StrLn>
                    break;
 803e8e8:	e39a      	b.n	803f020 <Simcom_SetState+0x7fc>
                }
            }
        }

        // Set value
        p = SIM_RESULT_OK;
 803e8ea:	2301      	movs	r3, #1
 803e8ec:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
        lastState = SIM.state;
 803e8f0:	4ba5      	ldr	r3, [pc, #660]	; (803eb88 <Simcom_SetState+0x364>)
 803e8f2:	781b      	ldrb	r3, [r3, #0]
 803e8f4:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
        // Handle simcom states
        switch (SIM.state) {
 803e8f8:	4ba3      	ldr	r3, [pc, #652]	; (803eb88 <Simcom_SetState+0x364>)
 803e8fa:	f993 3000 	ldrsb.w	r3, [r3]
 803e8fe:	3301      	adds	r3, #1
 803e900:	2b07      	cmp	r3, #7
 803e902:	f200 8384 	bhi.w	803f00e <Simcom_SetState+0x7ea>
 803e906:	a201      	add	r2, pc, #4	; (adr r2, 803e90c <Simcom_SetState+0xe8>)
 803e908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803e90c:	0803e92d 	.word	0x0803e92d
 803e910:	0803e985 	.word	0x0803e985
 803e914:	0803eabf 	.word	0x0803eabf
 803e918:	0803ebb9 	.word	0x0803ebb9
 803e91c:	0803ec73 	.word	0x0803ec73
 803e920:	0803ed5f 	.word	0x0803ed5f
 803e924:	0803eead 	.word	0x0803eead
 803e928:	0803efdd 	.word	0x0803efdd
            case SIM_STATE_DOWN:
                // only executed at power up
                if (init) {
 803e92c:	4b99      	ldr	r3, [pc, #612]	; (803eb94 <Simcom_SetState+0x370>)
 803e92e:	781b      	ldrb	r3, [r3, #0]
 803e930:	2b00      	cmp	r3, #0
 803e932:	d006      	beq.n	803e942 <Simcom_SetState+0x11e>
                    init = 0;
 803e934:	4b97      	ldr	r3, [pc, #604]	; (803eb94 <Simcom_SetState+0x370>)
 803e936:	2200      	movs	r2, #0
 803e938:	701a      	strb	r2, [r3, #0]
                    LOG_StrLn("Simcom:Init");
 803e93a:	4897      	ldr	r0, [pc, #604]	; (803eb98 <Simcom_SetState+0x374>)
 803e93c:	f7ff fd1a 	bl	803e374 <LOG_StrLn>
 803e940:	e002      	b.n	803e948 <Simcom_SetState+0x124>
                } else {
                    LOG_StrLn("Simcom:Restarting...");
 803e942:	4896      	ldr	r0, [pc, #600]	; (803eb9c <Simcom_SetState+0x378>)
 803e944:	f7ff fd16 	bl	803e374 <LOG_StrLn>
                }

                // power up the module
                p = Simcom_Power();
 803e948:	f000 fdae 	bl	803f4a8 <Simcom_Power>
 803e94c:	4603      	mov	r3, r0
 803e94e:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6

                // upgrade simcom state
                if (p > 0) {
 803e952:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803e956:	2b00      	cmp	r3, #0
 803e958:	dd0c      	ble.n	803e974 <Simcom_SetState+0x150>
                    SIM.state++;
 803e95a:	4b8b      	ldr	r3, [pc, #556]	; (803eb88 <Simcom_SetState+0x364>)
 803e95c:	f993 3000 	ldrsb.w	r3, [r3]
 803e960:	b2db      	uxtb	r3, r3
 803e962:	3301      	adds	r3, #1
 803e964:	b2db      	uxtb	r3, r3
 803e966:	b25a      	sxtb	r2, r3
 803e968:	4b87      	ldr	r3, [pc, #540]	; (803eb88 <Simcom_SetState+0x364>)
 803e96a:	701a      	strb	r2, [r3, #0]
                    LOG_StrLn("Simcom:ON");
 803e96c:	488c      	ldr	r0, [pc, #560]	; (803eba0 <Simcom_SetState+0x37c>)
 803e96e:	f7ff fd01 	bl	803e374 <LOG_StrLn>
 803e972:	e002      	b.n	803e97a <Simcom_SetState+0x156>
                } else {
                    LOG_StrLn("Simcom:Error");
 803e974:	488b      	ldr	r0, [pc, #556]	; (803eba4 <Simcom_SetState+0x380>)
 803e976:	f7ff fcfd 	bl	803e374 <LOG_StrLn>
                }

                _DelayMS(500);
 803e97a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 803e97e:	f000 fe9d 	bl	803f6bc <_DelayMS>
                break;
 803e982:	e345      	b.n	803f010 <Simcom_SetState+0x7ec>
            case SIM_STATE_READY:
                // =========== BASIC CONFIGURATION
                // disable command echo
                if (p > 0) {
 803e984:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803e988:	2b00      	cmp	r3, #0
 803e98a:	dd05      	ble.n	803e998 <Simcom_SetState+0x174>
                    p = AT_CommandEchoMode(0);
 803e98c:	2000      	movs	r0, #0
 803e98e:	f7fe fb27 	bl	803cfe0 <AT_CommandEchoMode>
 803e992:	4603      	mov	r3, r0
 803e994:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
                }
                // Set serial baud-rate
                if (p > 0) {
 803e998:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803e99c:	2b00      	cmp	r3, #0
 803e99e:	dd0b      	ble.n	803e9b8 <Simcom_SetState+0x194>
                    uint32_t rate = 0;
 803e9a0:	2300      	movs	r3, #0
 803e9a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                    p = AT_FixedLocalRate(ATW, &rate);
 803e9a6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 803e9aa:	4619      	mov	r1, r3
 803e9ac:	2000      	movs	r0, #0
 803e9ae:	f7fe ff0b 	bl	803d7c8 <AT_FixedLocalRate>
 803e9b2:	4603      	mov	r3, r0
 803e9b4:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
                }
                // Error report format: 0, 1(Numeric), 2(verbose)
                if (p > 0) {
 803e9b8:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803e9bc:	2b00      	cmp	r3, #0
 803e9be:	dd0b      	ble.n	803e9d8 <Simcom_SetState+0x1b4>
                    AT_CMEE state = CMEE_VERBOSE;
 803e9c0:	2302      	movs	r3, #2
 803e9c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                    p = AT_ReportMobileEquipmentError(ATW, &state);
 803e9c6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 803e9ca:	4619      	mov	r1, r3
 803e9cc:	2000      	movs	r0, #0
 803e9ce:	f7fe fee7 	bl	803d7a0 <AT_ReportMobileEquipmentError>
 803e9d2:	4603      	mov	r3, r0
 803e9d4:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
                }
                // Use pin DTR as sleep control
                if (p > 0) {
 803e9d8:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803e9dc:	2b00      	cmp	r3, #0
 803e9de:	dd0b      	ble.n	803e9f8 <Simcom_SetState+0x1d4>
                    AT_CSCLK state = CSCLK_EN_DTR;
 803e9e0:	2301      	movs	r3, #1
 803e9e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                    p = AT_ConfigureSlowClock(ATW, &state);
 803e9e6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 803e9ea:	4619      	mov	r1, r3
 803e9ec:	2000      	movs	r0, #0
 803e9ee:	f7fe fec3 	bl	803d778 <AT_ConfigureSlowClock>
 803e9f2:	4603      	mov	r3, r0
 803e9f4:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
                }
#if (!BOOTLOADER)
                // Enable time reporting
                if (p > 0) {
 803e9f8:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803e9fc:	2b00      	cmp	r3, #0
 803e9fe:	dd0b      	ble.n	803ea18 <Simcom_SetState+0x1f4>
                    AT_BOOL state = AT_ENABLE;
 803ea00:	2301      	movs	r3, #1
 803ea02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                    p = AT_EnableLocalTimestamp(ATW, &state);
 803ea06:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 803ea0a:	4619      	mov	r1, r3
 803ea0c:	2000      	movs	r0, #0
 803ea0e:	f7ff f999 	bl	803dd44 <AT_EnableLocalTimestamp>
 803ea12:	4603      	mov	r3, r0
 803ea14:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
                }
                // Enable “+IPD” header
                if (p > 0) {
 803ea18:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803ea1c:	2b00      	cmp	r3, #0
 803ea1e:	dd0b      	ble.n	803ea38 <Simcom_SetState+0x214>
                    AT_BOOL state = AT_ENABLE;
 803ea20:	2301      	movs	r3, #1
 803ea22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                    p = AT_IpPackageHeader(ATW, &state);
 803ea26:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 803ea2a:	4619      	mov	r1, r3
 803ea2c:	2000      	movs	r0, #0
 803ea2e:	f7ff f975 	bl	803dd1c <AT_IpPackageHeader>
 803ea32:	4603      	mov	r3, r0
 803ea34:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
                }
                // Disable “RECV FROM” header
                if (p > 0) {
 803ea38:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803ea3c:	2b00      	cmp	r3, #0
 803ea3e:	dd0b      	ble.n	803ea58 <Simcom_SetState+0x234>
                    AT_BOOL state = AT_DISABLE;
 803ea40:	2300      	movs	r3, #0
 803ea42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                    p = AT_ShowRemoteIp(ATW, &state);
 803ea46:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 803ea4a:	4619      	mov	r1, r3
 803ea4c:	2000      	movs	r0, #0
 803ea4e:	f7ff f951 	bl	803dcf4 <AT_ShowRemoteIp>
 803ea52:	4603      	mov	r3, r0
 803ea54:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
                }
#endif
                // =========== NETWORK CONFIGURATION
                // Check SIM Card
                if (p > 0) {
 803ea58:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803ea5c:	2b00      	cmp	r3, #0
 803ea5e:	dd09      	ble.n	803ea74 <Simcom_SetState+0x250>
                    p = Simcom_Command("AT+CPIN?\r", "READY", 500, 0);
 803ea60:	2300      	movs	r3, #0
 803ea62:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 803ea66:	4950      	ldr	r1, [pc, #320]	; (803eba8 <Simcom_SetState+0x384>)
 803ea68:	4850      	ldr	r0, [pc, #320]	; (803ebac <Simcom_SetState+0x388>)
 803ea6a:	f000 fb9b 	bl	803f1a4 <Simcom_Command>
 803ea6e:	4603      	mov	r3, r0
 803ea70:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
                }
                // Disable presentation of <AcT>&<rac> at CREG and CGREG
                if (p > 0) {
 803ea74:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803ea78:	2b00      	cmp	r3, #0
 803ea7a:	dd0e      	ble.n	803ea9a <Simcom_SetState+0x276>
                    at_csact_t param = {
 803ea7c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 803ea80:	2200      	movs	r2, #0
 803ea82:	601a      	str	r2, [r3, #0]
 803ea84:	605a      	str	r2, [r3, #4]
 803ea86:	609a      	str	r2, [r3, #8]
                            .creg = 0,
                            .cgreg = 0,
                    };
                    p = AT_NetworkAttachedStatus(ATW, &param);
 803ea88:	f107 0390 	add.w	r3, r7, #144	; 0x90
 803ea8c:	4619      	mov	r1, r3
 803ea8e:	2000      	movs	r0, #0
 803ea90:	f7fe fd36 	bl	803d500 <AT_NetworkAttachedStatus>
 803ea94:	4603      	mov	r3, r0
 803ea96:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
                }

                // upgrade simcom state
                if (p > 0) {
 803ea9a:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803ea9e:	2b00      	cmp	r3, #0
 803eaa0:	dd08      	ble.n	803eab4 <Simcom_SetState+0x290>
                    SIM.state++;
 803eaa2:	4b39      	ldr	r3, [pc, #228]	; (803eb88 <Simcom_SetState+0x364>)
 803eaa4:	f993 3000 	ldrsb.w	r3, [r3]
 803eaa8:	b2db      	uxtb	r3, r3
 803eaaa:	3301      	adds	r3, #1
 803eaac:	b2db      	uxtb	r3, r3
 803eaae:	b25a      	sxtb	r2, r3
 803eab0:	4b35      	ldr	r3, [pc, #212]	; (803eb88 <Simcom_SetState+0x364>)
 803eab2:	701a      	strb	r2, [r3, #0]
                }

                _DelayMS(500);
 803eab4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 803eab8:	f000 fe00 	bl	803f6bc <_DelayMS>
                break;
 803eabc:	e2a8      	b.n	803f010 <Simcom_SetState+0x7ec>
            case SIM_STATE_CONFIGURED:
                // =========== NETWORK ATTACH
                // Set signal Generation 2G(13)/3G(14)/AUTO(2)
                if (p > 0) {
 803eabe:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803eac2:	2b00      	cmp	r3, #0
 803eac4:	dd0f      	ble.n	803eae6 <Simcom_SetState+0x2c2>
                    at_cnmp_t param = {
 803eac6:	4a3a      	ldr	r2, [pc, #232]	; (803ebb0 <Simcom_SetState+0x38c>)
 803eac8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 803eacc:	e892 0003 	ldmia.w	r2, {r0, r1}
 803ead0:	e883 0003 	stmia.w	r3, {r0, r1}
                            .mode = CNMP_ACT_AUTO,
                            .preferred = CNMP_ACT_P_UMTS
                    };
                    p = AT_RadioAccessTechnology(ATW, &param);
 803ead4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 803ead8:	4619      	mov	r1, r3
 803eada:	2000      	movs	r0, #0
 803eadc:	f7fe fc7a 	bl	803d3d4 <AT_RadioAccessTechnology>
 803eae0:	4603      	mov	r3, r0
 803eae2:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
                }
                // Network Registration Status
                if (p > 0) {
 803eae6:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803eaea:	2b00      	cmp	r3, #0
 803eaec:	dd38      	ble.n	803eb60 <Simcom_SetState+0x33c>
                    at_c_greg_t read, param = {
 803eaee:	2300      	movs	r3, #0
 803eaf0:	67bb      	str	r3, [r7, #120]	; 0x78
 803eaf2:	2301      	movs	r3, #1
 803eaf4:	67fb      	str	r3, [r7, #124]	; 0x7c
                            .mode = CREG_MODE_DISABLE,
                            .stat = CREG_STAT_REG_HOME
                    };
                    // wait until attached
                    do {
                        p = AT_NetworkRegistration("CREG", ATW, &param);
 803eaf6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 803eafa:	461a      	mov	r2, r3
 803eafc:	2100      	movs	r1, #0
 803eafe:	482d      	ldr	r0, [pc, #180]	; (803ebb4 <Simcom_SetState+0x390>)
 803eb00:	f7fe fdaa 	bl	803d658 <AT_NetworkRegistration>
 803eb04:	4603      	mov	r3, r0
 803eb06:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
                        if (p > 0) {
 803eb0a:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803eb0e:	2b00      	cmp	r3, #0
 803eb10:	dd09      	ble.n	803eb26 <Simcom_SetState+0x302>
                            p = AT_NetworkRegistration("CREG", ATR, &read);
 803eb12:	f107 0380 	add.w	r3, r7, #128	; 0x80
 803eb16:	461a      	mov	r2, r3
 803eb18:	2101      	movs	r1, #1
 803eb1a:	4826      	ldr	r0, [pc, #152]	; (803ebb4 <Simcom_SetState+0x390>)
 803eb1c:	f7fe fd9c 	bl	803d658 <AT_NetworkRegistration>
 803eb20:	4603      	mov	r3, r0
 803eb22:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
                        }

                        // Handle timeout
                        if (timeout && (_GetTickMS() - tick) > timeout) {
 803eb26:	683b      	ldr	r3, [r7, #0]
 803eb28:	2b00      	cmp	r3, #0
 803eb2a:	d00c      	beq.n	803eb46 <Simcom_SetState+0x322>
 803eb2c:	f000 fdd1 	bl	803f6d2 <_GetTickMS>
 803eb30:	4602      	mov	r2, r0
 803eb32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 803eb36:	1ad3      	subs	r3, r2, r3
 803eb38:	683a      	ldr	r2, [r7, #0]
 803eb3a:	429a      	cmp	r2, r3
 803eb3c:	d203      	bcs.n	803eb46 <Simcom_SetState+0x322>
                            LOG_StrLn("Simcom:StateTimeout");
 803eb3e:	4811      	ldr	r0, [pc, #68]	; (803eb84 <Simcom_SetState+0x360>)
 803eb40:	f7ff fc18 	bl	803e374 <LOG_StrLn>
                            break;
 803eb44:	e00c      	b.n	803eb60 <Simcom_SetState+0x33c>
                        }
                        _DelayMS(1000);
 803eb46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 803eb4a:	f000 fdb7 	bl	803f6bc <_DelayMS>
                    } while (p && read.stat != param.stat);
 803eb4e:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803eb52:	2b00      	cmp	r3, #0
 803eb54:	d004      	beq.n	803eb60 <Simcom_SetState+0x33c>
 803eb56:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 803eb5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 803eb5c:	429a      	cmp	r2, r3
 803eb5e:	d1ca      	bne.n	803eaf6 <Simcom_SetState+0x2d2>
                }

                // upgrade simcom state
                if (p > 0) {
 803eb60:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803eb64:	2b00      	cmp	r3, #0
 803eb66:	dd08      	ble.n	803eb7a <Simcom_SetState+0x356>
                    SIM.state++;
 803eb68:	4b07      	ldr	r3, [pc, #28]	; (803eb88 <Simcom_SetState+0x364>)
 803eb6a:	f993 3000 	ldrsb.w	r3, [r3]
 803eb6e:	b2db      	uxtb	r3, r3
 803eb70:	3301      	adds	r3, #1
 803eb72:	b2db      	uxtb	r3, r3
 803eb74:	b25a      	sxtb	r2, r3
 803eb76:	4b04      	ldr	r3, [pc, #16]	; (803eb88 <Simcom_SetState+0x364>)
 803eb78:	701a      	strb	r2, [r3, #0]
                }

                _DelayMS(500);
 803eb7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 803eb7e:	f000 fd9d 	bl	803f6bc <_DelayMS>
                break;
 803eb82:	e245      	b.n	803f010 <Simcom_SetState+0x7ec>
 803eb84:	08043d04 	.word	0x08043d04
 803eb88:	200002a8 	.word	0x200002a8
 803eb8c:	08043d18 	.word	0x08043d18
 803eb90:	08043d30 	.word	0x08043d30
 803eb94:	200002c0 	.word	0x200002c0
 803eb98:	08043d44 	.word	0x08043d44
 803eb9c:	08043d50 	.word	0x08043d50
 803eba0:	08043d68 	.word	0x08043d68
 803eba4:	08043d74 	.word	0x08043d74
 803eba8:	08043d84 	.word	0x08043d84
 803ebac:	08043d8c 	.word	0x08043d8c
 803ebb0:	08043dd0 	.word	0x08043dd0
 803ebb4:	08043d98 	.word	0x08043d98
            case SIM_STATE_NETWORK_ON:
                // =========== GPRS ATTACH
                // GPRS Registration Status
                if (p > 0) {
 803ebb8:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803ebbc:	2b00      	cmp	r3, #0
 803ebbe:	dd37      	ble.n	803ec30 <Simcom_SetState+0x40c>
                    at_c_greg_t read, param = {
 803ebc0:	2300      	movs	r3, #0
 803ebc2:	66bb      	str	r3, [r7, #104]	; 0x68
 803ebc4:	2301      	movs	r3, #1
 803ebc6:	66fb      	str	r3, [r7, #108]	; 0x6c
                            .mode = CREG_MODE_DISABLE,
                            .stat = CREG_STAT_REG_HOME
                    };
                    // wait until attached
                    do {
                        p = AT_NetworkRegistration("CGREG", ATW, &param);
 803ebc8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 803ebcc:	461a      	mov	r2, r3
 803ebce:	2100      	movs	r1, #0
 803ebd0:	48af      	ldr	r0, [pc, #700]	; (803ee90 <Simcom_SetState+0x66c>)
 803ebd2:	f7fe fd41 	bl	803d658 <AT_NetworkRegistration>
 803ebd6:	4603      	mov	r3, r0
 803ebd8:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
                        if (p > 0) {
 803ebdc:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803ebe0:	2b00      	cmp	r3, #0
 803ebe2:	dd09      	ble.n	803ebf8 <Simcom_SetState+0x3d4>
                            p = AT_NetworkRegistration("CGREG", ATR, &read);
 803ebe4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 803ebe8:	461a      	mov	r2, r3
 803ebea:	2101      	movs	r1, #1
 803ebec:	48a8      	ldr	r0, [pc, #672]	; (803ee90 <Simcom_SetState+0x66c>)
 803ebee:	f7fe fd33 	bl	803d658 <AT_NetworkRegistration>
 803ebf2:	4603      	mov	r3, r0
 803ebf4:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
                        }

                        // Handle timeout
                        if (timeout && (_GetTickMS() - tick) > timeout) {
 803ebf8:	683b      	ldr	r3, [r7, #0]
 803ebfa:	2b00      	cmp	r3, #0
 803ebfc:	d00c      	beq.n	803ec18 <Simcom_SetState+0x3f4>
 803ebfe:	f000 fd68 	bl	803f6d2 <_GetTickMS>
 803ec02:	4602      	mov	r2, r0
 803ec04:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 803ec08:	1ad3      	subs	r3, r2, r3
 803ec0a:	683a      	ldr	r2, [r7, #0]
 803ec0c:	429a      	cmp	r2, r3
 803ec0e:	d203      	bcs.n	803ec18 <Simcom_SetState+0x3f4>
                            LOG_StrLn("Simcom:StateTimeout");
 803ec10:	48a0      	ldr	r0, [pc, #640]	; (803ee94 <Simcom_SetState+0x670>)
 803ec12:	f7ff fbaf 	bl	803e374 <LOG_StrLn>
                            break;
 803ec16:	e00b      	b.n	803ec30 <Simcom_SetState+0x40c>
                        }
                        _DelayMS(1000);
 803ec18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 803ec1c:	f000 fd4e 	bl	803f6bc <_DelayMS>
                    } while (p && read.stat != param.stat);
 803ec20:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803ec24:	2b00      	cmp	r3, #0
 803ec26:	d003      	beq.n	803ec30 <Simcom_SetState+0x40c>
 803ec28:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 803ec2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 803ec2c:	429a      	cmp	r2, r3
 803ec2e:	d1cb      	bne.n	803ebc8 <Simcom_SetState+0x3a4>
                }

                // upgrade simcom state
                if (p > 0) {
 803ec30:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803ec34:	2b00      	cmp	r3, #0
 803ec36:	dd09      	ble.n	803ec4c <Simcom_SetState+0x428>
                    SIM.state++;
 803ec38:	4b97      	ldr	r3, [pc, #604]	; (803ee98 <Simcom_SetState+0x674>)
 803ec3a:	f993 3000 	ldrsb.w	r3, [r3]
 803ec3e:	b2db      	uxtb	r3, r3
 803ec40:	3301      	adds	r3, #1
 803ec42:	b2db      	uxtb	r3, r3
 803ec44:	b25a      	sxtb	r2, r3
 803ec46:	4b94      	ldr	r3, [pc, #592]	; (803ee98 <Simcom_SetState+0x674>)
 803ec48:	701a      	strb	r2, [r3, #0]
 803ec4a:	e00d      	b.n	803ec68 <Simcom_SetState+0x444>
                } else {
                    if (SIM.state == SIM_STATE_NETWORK_ON) {
 803ec4c:	4b92      	ldr	r3, [pc, #584]	; (803ee98 <Simcom_SetState+0x674>)
 803ec4e:	f993 3000 	ldrsb.w	r3, [r3]
 803ec52:	2b02      	cmp	r3, #2
 803ec54:	d108      	bne.n	803ec68 <Simcom_SetState+0x444>
                        SIM.state--;
 803ec56:	4b90      	ldr	r3, [pc, #576]	; (803ee98 <Simcom_SetState+0x674>)
 803ec58:	f993 3000 	ldrsb.w	r3, [r3]
 803ec5c:	b2db      	uxtb	r3, r3
 803ec5e:	3b01      	subs	r3, #1
 803ec60:	b2db      	uxtb	r3, r3
 803ec62:	b25a      	sxtb	r2, r3
 803ec64:	4b8c      	ldr	r3, [pc, #560]	; (803ee98 <Simcom_SetState+0x674>)
 803ec66:	701a      	strb	r2, [r3, #0]
                    }
                }

                _DelayMS(500);
 803ec68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 803ec6c:	f000 fd26 	bl	803f6bc <_DelayMS>
                break;
 803ec70:	e1ce      	b.n	803f010 <Simcom_SetState+0x7ec>
#if (!BOOTLOADER)
            case SIM_STATE_GPRS_ON:
                // =========== PDP CONFIGURATION
                // Attach to GPRS service
                if (p > 0) {
 803ec72:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803ec76:	2b00      	cmp	r3, #0
 803ec78:	dd23      	ble.n	803ecc2 <Simcom_SetState+0x49e>
                    AT_CGATT state;
                    // wait until attached
                    do {
                        p = AT_GprsAttachment(ATR, &state);
 803ec7a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 803ec7e:	4619      	mov	r1, r3
 803ec80:	2001      	movs	r0, #1
 803ec82:	f7fe ffe7 	bl	803dc54 <AT_GprsAttachment>
 803ec86:	4603      	mov	r3, r0
 803ec88:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6

                        // Handle timeout
                        if (timeout && (_GetTickMS() - tick) > timeout) {
 803ec8c:	683b      	ldr	r3, [r7, #0]
 803ec8e:	2b00      	cmp	r3, #0
 803ec90:	d00c      	beq.n	803ecac <Simcom_SetState+0x488>
 803ec92:	f000 fd1e 	bl	803f6d2 <_GetTickMS>
 803ec96:	4602      	mov	r2, r0
 803ec98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 803ec9c:	1ad3      	subs	r3, r2, r3
 803ec9e:	683a      	ldr	r2, [r7, #0]
 803eca0:	429a      	cmp	r2, r3
 803eca2:	d203      	bcs.n	803ecac <Simcom_SetState+0x488>
                            LOG_StrLn("Simcom:StateTimeout");
 803eca4:	487b      	ldr	r0, [pc, #492]	; (803ee94 <Simcom_SetState+0x670>)
 803eca6:	f7ff fb65 	bl	803e374 <LOG_StrLn>
                            break;
 803ecaa:	e00a      	b.n	803ecc2 <Simcom_SetState+0x49e>
                        }
                        _DelayMS(1000);
 803ecac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 803ecb0:	f000 fd04 	bl	803f6bc <_DelayMS>
                    } while (p && !state);
 803ecb4:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803ecb8:	2b00      	cmp	r3, #0
 803ecba:	d002      	beq.n	803ecc2 <Simcom_SetState+0x49e>
 803ecbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 803ecbe:	2b00      	cmp	r3, #0
 803ecc0:	d0db      	beq.n	803ec7a <Simcom_SetState+0x456>
                }

                // Select TCPIP application mode:
                // (0: Non Transparent (command mode), 1: Transparent (data mode))
                if (p > 0) {
 803ecc2:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803ecc6:	2b00      	cmp	r3, #0
 803ecc8:	dd0a      	ble.n	803ece0 <Simcom_SetState+0x4bc>
                    AT_CIPMODE state = CIPMODE_NORMAL;
 803ecca:	2300      	movs	r3, #0
 803eccc:	663b      	str	r3, [r7, #96]	; 0x60
                    p = AT_TcpApllicationMode(ATW, &state);
 803ecce:	f107 0360 	add.w	r3, r7, #96	; 0x60
 803ecd2:	4619      	mov	r1, r3
 803ecd4:	2000      	movs	r0, #0
 803ecd6:	f7fe fff9 	bl	803dccc <AT_TcpApllicationMode>
 803ecda:	4603      	mov	r3, r0
 803ecdc:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
                }
                // Set to Single IP Connection (Backend)
                if (p > 0) {
 803ece0:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803ece4:	2b00      	cmp	r3, #0
 803ece6:	dd0a      	ble.n	803ecfe <Simcom_SetState+0x4da>
                    AT_CIPMUX state = CIPMUX_SINGLE_IP;
 803ece8:	2300      	movs	r3, #0
 803ecea:	65fb      	str	r3, [r7, #92]	; 0x5c
                    p = AT_MultiIpConnection(ATW, &state);
 803ecec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 803ecf0:	4619      	mov	r1, r3
 803ecf2:	2000      	movs	r0, #0
 803ecf4:	f7fe ffd6 	bl	803dca4 <AT_MultiIpConnection>
 803ecf8:	4603      	mov	r3, r0
 803ecfa:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
                }
                // Get data from network automatically
                if (p > 0) {
 803ecfe:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803ed02:	2b00      	cmp	r3, #0
 803ed04:	dd0a      	ble.n	803ed1c <Simcom_SetState+0x4f8>
                    AT_CIPRXGET state = CIPRXGET_DISABLE;
 803ed06:	2300      	movs	r3, #0
 803ed08:	65bb      	str	r3, [r7, #88]	; 0x58
                    p = AT_ManuallyReceiveData(ATW, &state);
 803ed0a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 803ed0e:	4619      	mov	r1, r3
 803ed10:	2000      	movs	r0, #0
 803ed12:	f7fe ffb3 	bl	803dc7c <AT_ManuallyReceiveData>
 803ed16:	4603      	mov	r3, r0
 803ed18:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
                }

                // upgrade simcom state
                if (p > 0) {
 803ed1c:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803ed20:	2b00      	cmp	r3, #0
 803ed22:	dd09      	ble.n	803ed38 <Simcom_SetState+0x514>
                    SIM.state++;
 803ed24:	4b5c      	ldr	r3, [pc, #368]	; (803ee98 <Simcom_SetState+0x674>)
 803ed26:	f993 3000 	ldrsb.w	r3, [r3]
 803ed2a:	b2db      	uxtb	r3, r3
 803ed2c:	3301      	adds	r3, #1
 803ed2e:	b2db      	uxtb	r3, r3
 803ed30:	b25a      	sxtb	r2, r3
 803ed32:	4b59      	ldr	r3, [pc, #356]	; (803ee98 <Simcom_SetState+0x674>)
 803ed34:	701a      	strb	r2, [r3, #0]
 803ed36:	e00d      	b.n	803ed54 <Simcom_SetState+0x530>
                } else {
                    if (SIM.state == SIM_STATE_GPRS_ON) {
 803ed38:	4b57      	ldr	r3, [pc, #348]	; (803ee98 <Simcom_SetState+0x674>)
 803ed3a:	f993 3000 	ldrsb.w	r3, [r3]
 803ed3e:	2b03      	cmp	r3, #3
 803ed40:	d108      	bne.n	803ed54 <Simcom_SetState+0x530>
                        SIM.state--;
 803ed42:	4b55      	ldr	r3, [pc, #340]	; (803ee98 <Simcom_SetState+0x674>)
 803ed44:	f993 3000 	ldrsb.w	r3, [r3]
 803ed48:	b2db      	uxtb	r3, r3
 803ed4a:	3b01      	subs	r3, #1
 803ed4c:	b2db      	uxtb	r3, r3
 803ed4e:	b25a      	sxtb	r2, r3
 803ed50:	4b51      	ldr	r3, [pc, #324]	; (803ee98 <Simcom_SetState+0x674>)
 803ed52:	701a      	strb	r2, [r3, #0]
                    }
                }

                _DelayMS(500);
 803ed54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 803ed58:	f000 fcb0 	bl	803f6bc <_DelayMS>
                break;
 803ed5c:	e158      	b.n	803f010 <Simcom_SetState+0x7ec>
            case SIM_STATE_PDP_ON:
                // =========== PDP ATTACH
                // Set type of authentication for PDP connections of socket
                AT_ConnectionStatusSingle(&(SIM.ip_status));
 803ed5e:	484f      	ldr	r0, [pc, #316]	; (803ee9c <Simcom_SetState+0x678>)
 803ed60:	f7fe fa10 	bl	803d184 <AT_ConnectionStatusSingle>
                if (p > 0 && (SIM.ip_status == CIPSTAT_IP_INITIAL || SIM.ip_status == CIPSTAT_PDP_DEACT)) {
 803ed64:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803ed68:	2b00      	cmp	r3, #0
 803ed6a:	dd22      	ble.n	803edb2 <Simcom_SetState+0x58e>
 803ed6c:	4b4a      	ldr	r3, [pc, #296]	; (803ee98 <Simcom_SetState+0x674>)
 803ed6e:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 803ed72:	4323      	orrs	r3, r4
 803ed74:	d006      	beq.n	803ed84 <Simcom_SetState+0x560>
 803ed76:	4b48      	ldr	r3, [pc, #288]	; (803ee98 <Simcom_SetState+0x674>)
 803ed78:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 803ed7c:	2c00      	cmp	r4, #0
 803ed7e:	bf08      	it	eq
 803ed80:	2b09      	cmpeq	r3, #9
 803ed82:	d116      	bne.n	803edb2 <Simcom_SetState+0x58e>
                    at_cstt_t param = {
 803ed84:	4b46      	ldr	r3, [pc, #280]	; (803eea0 <Simcom_SetState+0x67c>)
 803ed86:	f107 0408 	add.w	r4, r7, #8
 803ed8a:	461d      	mov	r5, r3
 803ed8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 803ed8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 803ed90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 803ed92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 803ed94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 803ed96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 803ed98:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 803ed9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                            .apn = NET_CON_APN,
                            .username = NET_CON_USERNAME,
                            .password = NET_CON_PASSWORD,
                    };
                    p = AT_ConfigureAPN(ATW, &param);
 803eda0:	f107 0308 	add.w	r3, r7, #8
 803eda4:	4619      	mov	r1, r3
 803eda6:	2000      	movs	r0, #0
 803eda8:	f7fe fd22 	bl	803d7f0 <AT_ConfigureAPN>
 803edac:	4603      	mov	r3, r0
 803edae:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
                }
                // =========== IP ATTACH
                // Bring Up IP Connection
                AT_ConnectionStatusSingle(&(SIM.ip_status));
 803edb2:	483a      	ldr	r0, [pc, #232]	; (803ee9c <Simcom_SetState+0x678>)
 803edb4:	f7fe f9e6 	bl	803d184 <AT_ConnectionStatusSingle>
                if (p > 0 && SIM.ip_status == CIPSTAT_IP_START) {
 803edb8:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803edbc:	2b00      	cmp	r3, #0
 803edbe:	dd10      	ble.n	803ede2 <Simcom_SetState+0x5be>
 803edc0:	4b35      	ldr	r3, [pc, #212]	; (803ee98 <Simcom_SetState+0x674>)
 803edc2:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 803edc6:	2c00      	cmp	r4, #0
 803edc8:	bf08      	it	eq
 803edca:	2b01      	cmpeq	r3, #1
 803edcc:	d109      	bne.n	803ede2 <Simcom_SetState+0x5be>
                    p = Simcom_Command("AT+CIICR\r", NULL, 30000, 0);
 803edce:	2300      	movs	r3, #0
 803edd0:	f247 5230 	movw	r2, #30000	; 0x7530
 803edd4:	2100      	movs	r1, #0
 803edd6:	4833      	ldr	r0, [pc, #204]	; (803eea4 <Simcom_SetState+0x680>)
 803edd8:	f000 f9e4 	bl	803f1a4 <Simcom_Command>
 803eddc:	4603      	mov	r3, r0
 803edde:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
                }
                // Check IP Address
                AT_ConnectionStatusSingle(&(SIM.ip_status));
 803ede2:	482e      	ldr	r0, [pc, #184]	; (803ee9c <Simcom_SetState+0x678>)
 803ede4:	f7fe f9ce 	bl	803d184 <AT_ConnectionStatusSingle>
                if (p > 0 && (SIM.ip_status == CIPSTAT_IP_CONFIG || SIM.ip_status == CIPSTAT_IP_GPRSACT)) {
 803ede8:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803edec:	2b00      	cmp	r3, #0
 803edee:	dd15      	ble.n	803ee1c <Simcom_SetState+0x5f8>
 803edf0:	4b29      	ldr	r3, [pc, #164]	; (803ee98 <Simcom_SetState+0x674>)
 803edf2:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 803edf6:	2c00      	cmp	r4, #0
 803edf8:	bf08      	it	eq
 803edfa:	2b02      	cmpeq	r3, #2
 803edfc:	d006      	beq.n	803ee0c <Simcom_SetState+0x5e8>
 803edfe:	4b26      	ldr	r3, [pc, #152]	; (803ee98 <Simcom_SetState+0x674>)
 803ee00:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 803ee04:	2c00      	cmp	r4, #0
 803ee06:	bf08      	it	eq
 803ee08:	2b03      	cmpeq	r3, #3
 803ee0a:	d107      	bne.n	803ee1c <Simcom_SetState+0x5f8>
                    at_cifsr_t param;
                    p = AT_GetLocalIpAddress(&param);
 803ee0c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 803ee10:	4618      	mov	r0, r3
 803ee12:	f7fe fdab 	bl	803d96c <AT_GetLocalIpAddress>
 803ee16:	4603      	mov	r3, r0
 803ee18:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
                }

                // upgrade simcom state
                if (p > 0) {
 803ee1c:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803ee20:	2b00      	cmp	r3, #0
 803ee22:	dd09      	ble.n	803ee38 <Simcom_SetState+0x614>
                    SIM.state++;
 803ee24:	4b1c      	ldr	r3, [pc, #112]	; (803ee98 <Simcom_SetState+0x674>)
 803ee26:	f993 3000 	ldrsb.w	r3, [r3]
 803ee2a:	b2db      	uxtb	r3, r3
 803ee2c:	3301      	adds	r3, #1
 803ee2e:	b2db      	uxtb	r3, r3
 803ee30:	b25a      	sxtb	r2, r3
 803ee32:	4b19      	ldr	r3, [pc, #100]	; (803ee98 <Simcom_SetState+0x674>)
 803ee34:	701a      	strb	r2, [r3, #0]
 803ee36:	e026      	b.n	803ee86 <Simcom_SetState+0x662>
                } else {
                    // Check IP Status
                    AT_ConnectionStatusSingle(&(SIM.ip_status));
 803ee38:	4818      	ldr	r0, [pc, #96]	; (803ee9c <Simcom_SetState+0x678>)
 803ee3a:	f7fe f9a3 	bl	803d184 <AT_ConnectionStatusSingle>

                    // Close PDP
                    if (SIM.ip_status != CIPSTAT_IP_INITIAL &&
 803ee3e:	4b16      	ldr	r3, [pc, #88]	; (803ee98 <Simcom_SetState+0x674>)
 803ee40:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 803ee44:	4323      	orrs	r3, r4
 803ee46:	d010      	beq.n	803ee6a <Simcom_SetState+0x646>
                            SIM.ip_status != CIPSTAT_PDP_DEACT) {
 803ee48:	4b13      	ldr	r3, [pc, #76]	; (803ee98 <Simcom_SetState+0x674>)
 803ee4a:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
                    if (SIM.ip_status != CIPSTAT_IP_INITIAL &&
 803ee4e:	2c00      	cmp	r4, #0
 803ee50:	bf08      	it	eq
 803ee52:	2b09      	cmpeq	r3, #9
 803ee54:	d009      	beq.n	803ee6a <Simcom_SetState+0x646>
                        p = Simcom_Command("AT+CIPSHUT\r", NULL, 1000, 0);
 803ee56:	2300      	movs	r3, #0
 803ee58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 803ee5c:	2100      	movs	r1, #0
 803ee5e:	4812      	ldr	r0, [pc, #72]	; (803eea8 <Simcom_SetState+0x684>)
 803ee60:	f000 f9a0 	bl	803f1a4 <Simcom_Command>
 803ee64:	4603      	mov	r3, r0
 803ee66:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
                    }

                    if (SIM.state == SIM_STATE_PDP_ON) {
 803ee6a:	4b0b      	ldr	r3, [pc, #44]	; (803ee98 <Simcom_SetState+0x674>)
 803ee6c:	f993 3000 	ldrsb.w	r3, [r3]
 803ee70:	2b04      	cmp	r3, #4
 803ee72:	d108      	bne.n	803ee86 <Simcom_SetState+0x662>
                        SIM.state--;
 803ee74:	4b08      	ldr	r3, [pc, #32]	; (803ee98 <Simcom_SetState+0x674>)
 803ee76:	f993 3000 	ldrsb.w	r3, [r3]
 803ee7a:	b2db      	uxtb	r3, r3
 803ee7c:	3b01      	subs	r3, #1
 803ee7e:	b2db      	uxtb	r3, r3
 803ee80:	b25a      	sxtb	r2, r3
 803ee82:	4b05      	ldr	r3, [pc, #20]	; (803ee98 <Simcom_SetState+0x674>)
 803ee84:	701a      	strb	r2, [r3, #0]
                    }
                }

                _DelayMS(500);
 803ee86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 803ee8a:	f000 fc17 	bl	803f6bc <_DelayMS>
                break;
 803ee8e:	e0bf      	b.n	803f010 <Simcom_SetState+0x7ec>
 803ee90:	08043da0 	.word	0x08043da0
 803ee94:	08043d04 	.word	0x08043d04
 803ee98:	200002a8 	.word	0x200002a8
 803ee9c:	200002b0 	.word	0x200002b0
 803eea0:	08043dd8 	.word	0x08043dd8
 803eea4:	08043da8 	.word	0x08043da8
 803eea8:	08043db4 	.word	0x08043db4
            case SIM_STATE_INTERNET_ON:
                AT_ConnectionStatusSingle(&(SIM.ip_status));
 803eeac:	4864      	ldr	r0, [pc, #400]	; (803f040 <Simcom_SetState+0x81c>)
 803eeae:	f7fe f969 	bl	803d184 <AT_ConnectionStatusSingle>
                // ============ SOCKET CONFIGURATION
                // Establish connection with server
                if (p > 0 && (SIM.ip_status != CIPSTAT_CONNECT_OK || SIM.ip_status != CIPSTAT_CONNECTING)) {
 803eeb2:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803eeb6:	2b00      	cmp	r3, #0
 803eeb8:	dd3d      	ble.n	803ef36 <Simcom_SetState+0x712>
 803eeba:	4b62      	ldr	r3, [pc, #392]	; (803f044 <Simcom_SetState+0x820>)
 803eebc:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 803eec0:	2c00      	cmp	r4, #0
 803eec2:	bf08      	it	eq
 803eec4:	2b06      	cmpeq	r3, #6
 803eec6:	d106      	bne.n	803eed6 <Simcom_SetState+0x6b2>
 803eec8:	4b5e      	ldr	r3, [pc, #376]	; (803f044 <Simcom_SetState+0x820>)
 803eeca:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 803eece:	2c00      	cmp	r4, #0
 803eed0:	bf08      	it	eq
 803eed2:	2b05      	cmpeq	r3, #5
 803eed4:	d02f      	beq.n	803ef36 <Simcom_SetState+0x712>
                    at_cipstart_t param = {
 803eed6:	4b5c      	ldr	r3, [pc, #368]	; (803f048 <Simcom_SetState+0x824>)
 803eed8:	f107 0408 	add.w	r4, r7, #8
 803eedc:	461d      	mov	r5, r3
 803eede:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 803eee0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 803eee2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 803eee4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 803eee6:	682b      	ldr	r3, [r5, #0]
 803eee8:	6023      	str	r3, [r4, #0]
                            .mode = "TCP",
                            .ip = NET_TCP_SERVER,
                            .port = NET_TCP_PORT
                    };
                    p = AT_StartConnectionSingle(&param);
 803eeea:	f107 0308 	add.w	r3, r7, #8
 803eeee:	4618      	mov	r0, r3
 803eef0:	f7fe fd66 	bl	803d9c0 <AT_StartConnectionSingle>
 803eef4:	4603      	mov	r3, r0
 803eef6:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6

                    // wait until attached
                    do {
                        AT_ConnectionStatusSingle(&(SIM.ip_status));
 803eefa:	4851      	ldr	r0, [pc, #324]	; (803f040 <Simcom_SetState+0x81c>)
 803eefc:	f7fe f942 	bl	803d184 <AT_ConnectionStatusSingle>

                        // Handle timeout
                        if (timeout && (_GetTickMS() - tick) > timeout) {
 803ef00:	683b      	ldr	r3, [r7, #0]
 803ef02:	2b00      	cmp	r3, #0
 803ef04:	d00c      	beq.n	803ef20 <Simcom_SetState+0x6fc>
 803ef06:	f000 fbe4 	bl	803f6d2 <_GetTickMS>
 803ef0a:	4602      	mov	r2, r0
 803ef0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 803ef10:	1ad3      	subs	r3, r2, r3
 803ef12:	683a      	ldr	r2, [r7, #0]
 803ef14:	429a      	cmp	r2, r3
 803ef16:	d203      	bcs.n	803ef20 <Simcom_SetState+0x6fc>
                            LOG_StrLn("Simcom:StateTimeout");
 803ef18:	484c      	ldr	r0, [pc, #304]	; (803f04c <Simcom_SetState+0x828>)
 803ef1a:	f7ff fa2b 	bl	803e374 <LOG_StrLn>
                            break;
 803ef1e:	e00a      	b.n	803ef36 <Simcom_SetState+0x712>
                        }
                        _DelayMS(1000);
 803ef20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 803ef24:	f000 fbca 	bl	803f6bc <_DelayMS>
                    } while (SIM.ip_status == CIPSTAT_CONNECTING);
 803ef28:	4b46      	ldr	r3, [pc, #280]	; (803f044 <Simcom_SetState+0x820>)
 803ef2a:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 803ef2e:	2c00      	cmp	r4, #0
 803ef30:	bf08      	it	eq
 803ef32:	2b05      	cmpeq	r3, #5
 803ef34:	d0e1      	beq.n	803eefa <Simcom_SetState+0x6d6>
                }

                // upgrade simcom state
                if (p > 0) {
 803ef36:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803ef3a:	2b00      	cmp	r3, #0
 803ef3c:	dd09      	ble.n	803ef52 <Simcom_SetState+0x72e>
                    SIM.state++;
 803ef3e:	4b41      	ldr	r3, [pc, #260]	; (803f044 <Simcom_SetState+0x820>)
 803ef40:	f993 3000 	ldrsb.w	r3, [r3]
 803ef44:	b2db      	uxtb	r3, r3
 803ef46:	3301      	adds	r3, #1
 803ef48:	b2db      	uxtb	r3, r3
 803ef4a:	b25a      	sxtb	r2, r3
 803ef4c:	4b3d      	ldr	r3, [pc, #244]	; (803f044 <Simcom_SetState+0x820>)
 803ef4e:	701a      	strb	r2, [r3, #0]
 803ef50:	e03f      	b.n	803efd2 <Simcom_SetState+0x7ae>
                } else {
                    // Check IP Status
                    AT_ConnectionStatusSingle(&(SIM.ip_status));
 803ef52:	483b      	ldr	r0, [pc, #236]	; (803f040 <Simcom_SetState+0x81c>)
 803ef54:	f7fe f916 	bl	803d184 <AT_ConnectionStatusSingle>

                    // Close IP
                    if (SIM.ip_status == CIPSTAT_CONNECT_OK) {
 803ef58:	4b3a      	ldr	r3, [pc, #232]	; (803f044 <Simcom_SetState+0x820>)
 803ef5a:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 803ef5e:	2c00      	cmp	r4, #0
 803ef60:	bf08      	it	eq
 803ef62:	2b06      	cmpeq	r3, #6
 803ef64:	d127      	bne.n	803efb6 <Simcom_SetState+0x792>
                        p = Simcom_Command("AT+CIPCLOSE\r", NULL, 1000, 0);
 803ef66:	2300      	movs	r3, #0
 803ef68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 803ef6c:	2100      	movs	r1, #0
 803ef6e:	4838      	ldr	r0, [pc, #224]	; (803f050 <Simcom_SetState+0x82c>)
 803ef70:	f000 f918 	bl	803f1a4 <Simcom_Command>
 803ef74:	4603      	mov	r3, r0
 803ef76:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6

                        // wait until closed
                        do {
                            AT_ConnectionStatusSingle(&(SIM.ip_status));
 803ef7a:	4831      	ldr	r0, [pc, #196]	; (803f040 <Simcom_SetState+0x81c>)
 803ef7c:	f7fe f902 	bl	803d184 <AT_ConnectionStatusSingle>

                            // Handle timeout
                            if (timeout && (_GetTickMS() - tick) > timeout) {
 803ef80:	683b      	ldr	r3, [r7, #0]
 803ef82:	2b00      	cmp	r3, #0
 803ef84:	d00c      	beq.n	803efa0 <Simcom_SetState+0x77c>
 803ef86:	f000 fba4 	bl	803f6d2 <_GetTickMS>
 803ef8a:	4602      	mov	r2, r0
 803ef8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 803ef90:	1ad3      	subs	r3, r2, r3
 803ef92:	683a      	ldr	r2, [r7, #0]
 803ef94:	429a      	cmp	r2, r3
 803ef96:	d203      	bcs.n	803efa0 <Simcom_SetState+0x77c>
                                LOG_StrLn("Simcom:StateTimeout");
 803ef98:	482c      	ldr	r0, [pc, #176]	; (803f04c <Simcom_SetState+0x828>)
 803ef9a:	f7ff f9eb 	bl	803e374 <LOG_StrLn>
                                break;
 803ef9e:	e00a      	b.n	803efb6 <Simcom_SetState+0x792>
                            }
                            _DelayMS(1000);
 803efa0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 803efa4:	f000 fb8a 	bl	803f6bc <_DelayMS>
                        } while (SIM.ip_status == CIPSTAT_CLOSING);
 803efa8:	4b26      	ldr	r3, [pc, #152]	; (803f044 <Simcom_SetState+0x820>)
 803efaa:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 803efae:	2c00      	cmp	r4, #0
 803efb0:	bf08      	it	eq
 803efb2:	2b07      	cmpeq	r3, #7
 803efb4:	d0e1      	beq.n	803ef7a <Simcom_SetState+0x756>
                    }

                    if (SIM.state == SIM_STATE_INTERNET_ON) {
 803efb6:	4b23      	ldr	r3, [pc, #140]	; (803f044 <Simcom_SetState+0x820>)
 803efb8:	f993 3000 	ldrsb.w	r3, [r3]
 803efbc:	2b05      	cmp	r3, #5
 803efbe:	d108      	bne.n	803efd2 <Simcom_SetState+0x7ae>
                        SIM.state--;
 803efc0:	4b20      	ldr	r3, [pc, #128]	; (803f044 <Simcom_SetState+0x820>)
 803efc2:	f993 3000 	ldrsb.w	r3, [r3]
 803efc6:	b2db      	uxtb	r3, r3
 803efc8:	3b01      	subs	r3, #1
 803efca:	b2db      	uxtb	r3, r3
 803efcc:	b25a      	sxtb	r2, r3
 803efce:	4b1d      	ldr	r3, [pc, #116]	; (803f044 <Simcom_SetState+0x820>)
 803efd0:	701a      	strb	r2, [r3, #0]
                    }
                }

                _DelayMS(500);
 803efd2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 803efd6:	f000 fb71 	bl	803f6bc <_DelayMS>
                break;
 803efda:	e019      	b.n	803f010 <Simcom_SetState+0x7ec>
            case SIM_STATE_SERVER_ON:
                // Check IP Status
                AT_ConnectionStatusSingle(&(SIM.ip_status));
 803efdc:	4818      	ldr	r0, [pc, #96]	; (803f040 <Simcom_SetState+0x81c>)
 803efde:	f7fe f8d1 	bl	803d184 <AT_ConnectionStatusSingle>

                if (SIM.ip_status != CIPSTAT_CONNECT_OK) {
 803efe2:	4b18      	ldr	r3, [pc, #96]	; (803f044 <Simcom_SetState+0x820>)
 803efe4:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 803efe8:	2c00      	cmp	r4, #0
 803efea:	bf08      	it	eq
 803efec:	2b06      	cmpeq	r3, #6
 803efee:	d00f      	beq.n	803f010 <Simcom_SetState+0x7ec>
                    if (SIM.state == SIM_STATE_SERVER_ON) {
 803eff0:	4b14      	ldr	r3, [pc, #80]	; (803f044 <Simcom_SetState+0x820>)
 803eff2:	f993 3000 	ldrsb.w	r3, [r3]
 803eff6:	2b06      	cmp	r3, #6
 803eff8:	d10a      	bne.n	803f010 <Simcom_SetState+0x7ec>
                        SIM.state--;
 803effa:	4b12      	ldr	r3, [pc, #72]	; (803f044 <Simcom_SetState+0x820>)
 803effc:	f993 3000 	ldrsb.w	r3, [r3]
 803f000:	b2db      	uxtb	r3, r3
 803f002:	3b01      	subs	r3, #1
 803f004:	b2db      	uxtb	r3, r3
 803f006:	b25a      	sxtb	r2, r3
 803f008:	4b0e      	ldr	r3, [pc, #56]	; (803f044 <Simcom_SetState+0x820>)
 803f00a:	701a      	strb	r2, [r3, #0]
                    }
                }

                break;
 803f00c:	e000      	b.n	803f010 <Simcom_SetState+0x7ec>
#endif
            default:
                break;
 803f00e:	bf00      	nop
    while (SIM.state < state) {
 803f010:	4b0c      	ldr	r3, [pc, #48]	; (803f044 <Simcom_SetState+0x820>)
 803f012:	f993 3000 	ldrsb.w	r3, [r3]
 803f016:	f997 2007 	ldrsb.w	r2, [r7, #7]
 803f01a:	429a      	cmp	r2, r3
 803f01c:	f73f ac15 	bgt.w	803e84a <Simcom_SetState+0x26>
        }
    };
    Simcom_Unlock();
 803f020:	f7ff fbe4 	bl	803e7ec <Simcom_Unlock>

    return (SIM.state >= state);
 803f024:	4b07      	ldr	r3, [pc, #28]	; (803f044 <Simcom_SetState+0x820>)
 803f026:	f993 3000 	ldrsb.w	r3, [r3]
 803f02a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 803f02e:	429a      	cmp	r2, r3
 803f030:	bfd4      	ite	le
 803f032:	2301      	movle	r3, #1
 803f034:	2300      	movgt	r3, #0
 803f036:	b2db      	uxtb	r3, r3
}
 803f038:	4618      	mov	r0, r3
 803f03a:	37c0      	adds	r7, #192	; 0xc0
 803f03c:	46bd      	mov	sp, r7
 803f03e:	bdb0      	pop	{r4, r5, r7, pc}
 803f040:	200002b0 	.word	0x200002b0
 803f044:	200002a8 	.word	0x200002a8
 803f048:	08043e14 	.word	0x08043e14
 803f04c:	08043d04 	.word	0x08043d04
 803f050:	08043dc0 	.word	0x08043dc0

0803f054 <Simcom_Upload>:

#if (!BOOTLOADER)
SIMCOM_RESULT Simcom_Upload(void *payload, uint16_t size) {
 803f054:	b590      	push	{r4, r7, lr}
 803f056:	b08b      	sub	sp, #44	; 0x2c
 803f058:	af00      	add	r7, sp, #0
 803f05a:	6078      	str	r0, [r7, #4]
 803f05c:	460b      	mov	r3, r1
 803f05e:	807b      	strh	r3, [r7, #2]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 803f060:	2300      	movs	r3, #0
 803f062:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    header_t *hHeader = NULL;
 803f066:	2300      	movs	r3, #0
 803f068:	623b      	str	r3, [r7, #32]
    uint32_t tick;
    char str[20];

    // Check IP Status
    AT_ConnectionStatusSingle(&(SIM.ip_status));
 803f06a:	4846      	ldr	r0, [pc, #280]	; (803f184 <Simcom_Upload+0x130>)
 803f06c:	f7fe f88a 	bl	803d184 <AT_ConnectionStatusSingle>
    // combine the size
    sprintf(str, "AT+CIPSEND=%d\r", size);
 803f070:	887a      	ldrh	r2, [r7, #2]
 803f072:	f107 0308 	add.w	r3, r7, #8
 803f076:	4944      	ldr	r1, [pc, #272]	; (803f188 <Simcom_Upload+0x134>)
 803f078:	4618      	mov	r0, r3
 803f07a:	f000 fc51 	bl	803f920 <siprintf>

    Simcom_Lock();
 803f07e:	f7ff fba7 	bl	803e7d0 <Simcom_Lock>

    if (SIM.state >= SIM_STATE_SERVER_ON && SIM.ip_status == CIPSTAT_CONNECT_OK) {
 803f082:	4b42      	ldr	r3, [pc, #264]	; (803f18c <Simcom_Upload+0x138>)
 803f084:	f993 3000 	ldrsb.w	r3, [r3]
 803f088:	2b05      	cmp	r3, #5
 803f08a:	dd72      	ble.n	803f172 <Simcom_Upload+0x11e>
 803f08c:	4b3f      	ldr	r3, [pc, #252]	; (803f18c <Simcom_Upload+0x138>)
 803f08e:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 803f092:	2c00      	cmp	r4, #0
 803f094:	bf08      	it	eq
 803f096:	2b06      	cmpeq	r3, #6
 803f098:	d16b      	bne.n	803f172 <Simcom_Upload+0x11e>
        // send command
        p = Simcom_Command(str, SIMCOM_RSP_SEND, 500, 0);
 803f09a:	f107 0008 	add.w	r0, r7, #8
 803f09e:	2300      	movs	r3, #0
 803f0a0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 803f0a4:	493a      	ldr	r1, [pc, #232]	; (803f190 <Simcom_Upload+0x13c>)
 803f0a6:	f000 f87d 	bl	803f1a4 <Simcom_Command>
 803f0aa:	4603      	mov	r3, r0
 803f0ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (p > 0) {
 803f0b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 803f0b4:	2b00      	cmp	r3, #0
 803f0b6:	dd5c      	ble.n	803f172 <Simcom_Upload+0x11e>
            // send the payload
            p = Simcom_Command((char*) payload, SIMCOM_RSP_SENT, 20000, size);
 803f0b8:	887b      	ldrh	r3, [r7, #2]
 803f0ba:	f644 6220 	movw	r2, #20000	; 0x4e20
 803f0be:	4935      	ldr	r1, [pc, #212]	; (803f194 <Simcom_Upload+0x140>)
 803f0c0:	6878      	ldr	r0, [r7, #4]
 803f0c2:	f000 f86f 	bl	803f1a4 <Simcom_Command>
 803f0c6:	4603      	mov	r3, r0
 803f0c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            // wait for ACK/NACK
            if (p > 0) {
 803f0cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 803f0d0:	2b00      	cmp	r3, #0
 803f0d2:	dd4e      	ble.n	803f172 <Simcom_Upload+0x11e>
                // set timeout guard
                tick = _GetTickMS();
 803f0d4:	f000 fafd 	bl	803f6d2 <_GetTickMS>
 803f0d8:	61f8      	str	r0, [r7, #28]
                // wait ACK for payload
                while (SIM.state >= SIM_STATE_SERVER_ON) {
 803f0da:	e01d      	b.n	803f118 <Simcom_Upload+0xc4>
                    if (Simcom_Response(PREFIX_ACK)
 803f0dc:	482e      	ldr	r0, [pc, #184]	; (803f198 <Simcom_Upload+0x144>)
 803f0de:	f7ff fb91 	bl	803e804 <Simcom_Response>
 803f0e2:	4603      	mov	r3, r0
 803f0e4:	2b00      	cmp	r3, #0
 803f0e6:	d11c      	bne.n	803f122 <Simcom_Upload+0xce>
                            || Simcom_Response(PREFIX_NACK)
 803f0e8:	482c      	ldr	r0, [pc, #176]	; (803f19c <Simcom_Upload+0x148>)
 803f0ea:	f7ff fb8b 	bl	803e804 <Simcom_Response>
 803f0ee:	4603      	mov	r3, r0
 803f0f0:	2b00      	cmp	r3, #0
 803f0f2:	d116      	bne.n	803f122 <Simcom_Upload+0xce>
                            || Simcom_Response(PREFIX_COMMAND)
 803f0f4:	482a      	ldr	r0, [pc, #168]	; (803f1a0 <Simcom_Upload+0x14c>)
 803f0f6:	f7ff fb85 	bl	803e804 <Simcom_Response>
 803f0fa:	4603      	mov	r3, r0
 803f0fc:	2b00      	cmp	r3, #0
 803f0fe:	d110      	bne.n	803f122 <Simcom_Upload+0xce>
                            || (_GetTickMS() - tick) >= 10000) {
 803f100:	f000 fae7 	bl	803f6d2 <_GetTickMS>
 803f104:	4602      	mov	r2, r0
 803f106:	69fb      	ldr	r3, [r7, #28]
 803f108:	1ad3      	subs	r3, r2, r3
 803f10a:	f242 720f 	movw	r2, #9999	; 0x270f
 803f10e:	4293      	cmp	r3, r2
 803f110:	d807      	bhi.n	803f122 <Simcom_Upload+0xce>
                        break;
                    }
                    _DelayMS(10);
 803f112:	200a      	movs	r0, #10
 803f114:	f000 fad2 	bl	803f6bc <_DelayMS>
                while (SIM.state >= SIM_STATE_SERVER_ON) {
 803f118:	4b1c      	ldr	r3, [pc, #112]	; (803f18c <Simcom_Upload+0x138>)
 803f11a:	f993 3000 	ldrsb.w	r3, [r3]
 803f11e:	2b05      	cmp	r3, #5
 803f120:	dcdc      	bgt.n	803f0dc <Simcom_Upload+0x88>
                }

                // handle SIMCOM result
                if (Simcom_Response(PREFIX_ACK)) {
 803f122:	481d      	ldr	r0, [pc, #116]	; (803f198 <Simcom_Upload+0x144>)
 803f124:	f7ff fb6e 	bl	803e804 <Simcom_Response>
 803f128:	4603      	mov	r3, r0
 803f12a:	2b00      	cmp	r3, #0
 803f12c:	d00e      	beq.n	803f14c <Simcom_Upload+0xf8>
                    p = SIM_RESULT_NACK;
 803f12e:	23fc      	movs	r3, #252	; 0xfc
 803f130:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                    // validate ACK
                    hHeader = (header_t*) payload;
 803f134:	687b      	ldr	r3, [r7, #4]
 803f136:	623b      	str	r3, [r7, #32]
                    if (Simcom_ProcessACK(hHeader)) {
 803f138:	6a38      	ldr	r0, [r7, #32]
 803f13a:	f000 f929 	bl	803f390 <Simcom_ProcessACK>
 803f13e:	4603      	mov	r3, r0
 803f140:	2b00      	cmp	r3, #0
 803f142:	d016      	beq.n	803f172 <Simcom_Upload+0x11e>
                        p = SIM_RESULT_OK;
 803f144:	2301      	movs	r3, #1
 803f146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 803f14a:	e012      	b.n	803f172 <Simcom_Upload+0x11e>
                    }
                } else if (Simcom_Response(PREFIX_NACK) || Simcom_Response(PREFIX_COMMAND)) {
 803f14c:	4813      	ldr	r0, [pc, #76]	; (803f19c <Simcom_Upload+0x148>)
 803f14e:	f7ff fb59 	bl	803e804 <Simcom_Response>
 803f152:	4603      	mov	r3, r0
 803f154:	2b00      	cmp	r3, #0
 803f156:	d105      	bne.n	803f164 <Simcom_Upload+0x110>
 803f158:	4811      	ldr	r0, [pc, #68]	; (803f1a0 <Simcom_Upload+0x14c>)
 803f15a:	f7ff fb53 	bl	803e804 <Simcom_Response>
 803f15e:	4603      	mov	r3, r0
 803f160:	2b00      	cmp	r3, #0
 803f162:	d003      	beq.n	803f16c <Simcom_Upload+0x118>
                    p = SIM_RESULT_NACK;
 803f164:	23fc      	movs	r3, #252	; 0xfc
 803f166:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 803f16a:	e002      	b.n	803f172 <Simcom_Upload+0x11e>
                } else {
                    p = SIM_RESULT_TIMEOUT;
 803f16c:	23ff      	movs	r3, #255	; 0xff
 803f16e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
            }
        }
    }

    Simcom_Unlock();
 803f172:	f7ff fb3b 	bl	803e7ec <Simcom_Unlock>
    return p;
 803f176:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 803f17a:	4618      	mov	r0, r3
 803f17c:	372c      	adds	r7, #44	; 0x2c
 803f17e:	46bd      	mov	sp, r7
 803f180:	bd90      	pop	{r4, r7, pc}
 803f182:	bf00      	nop
 803f184:	200002b0 	.word	0x200002b0
 803f188:	08043e38 	.word	0x08043e38
 803f18c:	200002a8 	.word	0x200002a8
 803f190:	08043e48 	.word	0x08043e48
 803f194:	08043e4c 	.word	0x08043e4c
 803f198:	08043e58 	.word	0x08043e58
 803f19c:	08043e5c 	.word	0x08043e5c
 803f1a0:	08043e60 	.word	0x08043e60

0803f1a4 <Simcom_Command>:

    return (p == SIM_RESULT_OK);
}
#endif

SIMCOM_RESULT Simcom_Command(char *data, char *res, uint32_t ms, uint16_t size) {
 803f1a4:	b580      	push	{r7, lr}
 803f1a6:	b086      	sub	sp, #24
 803f1a8:	af00      	add	r7, sp, #0
 803f1aa:	60f8      	str	r0, [r7, #12]
 803f1ac:	60b9      	str	r1, [r7, #8]
 803f1ae:	607a      	str	r2, [r7, #4]
 803f1b0:	807b      	strh	r3, [r7, #2]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 803f1b2:	2300      	movs	r3, #0
 803f1b4:	75fb      	strb	r3, [r7, #23]
    uint8_t upload = 1;
 803f1b6:	2301      	movs	r3, #1
 803f1b8:	75bb      	strb	r3, [r7, #22]

    // Handle default value
    if (res == NULL) {
 803f1ba:	68bb      	ldr	r3, [r7, #8]
 803f1bc:	2b00      	cmp	r3, #0
 803f1be:	d101      	bne.n	803f1c4 <Simcom_Command+0x20>
        res = SIMCOM_RSP_OK;
 803f1c0:	4b28      	ldr	r3, [pc, #160]	; (803f264 <Simcom_Command+0xc0>)
 803f1c2:	60bb      	str	r3, [r7, #8]
    }
    if (!size) {
 803f1c4:	887b      	ldrh	r3, [r7, #2]
 803f1c6:	2b00      	cmp	r3, #0
 803f1c8:	d106      	bne.n	803f1d8 <Simcom_Command+0x34>
        upload = 0;
 803f1ca:	2300      	movs	r3, #0
 803f1cc:	75bb      	strb	r3, [r7, #22]
        size = strlen(data);
 803f1ce:	68f8      	ldr	r0, [r7, #12]
 803f1d0:	f7e1 f830 	bl	8020234 <strlen>
 803f1d4:	4603      	mov	r3, r0
 803f1d6:	807b      	strh	r3, [r7, #2]
    }

    // only handle command if SIM_STATE_READY or BOOT_CMD
    if (SIM.state >= SIM_STATE_READY || (strcmp(data, SIMCOM_CMD_BOOT) == 0)) {
 803f1d8:	4b23      	ldr	r3, [pc, #140]	; (803f268 <Simcom_Command+0xc4>)
 803f1da:	f993 3000 	ldrsb.w	r3, [r3]
 803f1de:	2b00      	cmp	r3, #0
 803f1e0:	da06      	bge.n	803f1f0 <Simcom_Command+0x4c>
 803f1e2:	4922      	ldr	r1, [pc, #136]	; (803f26c <Simcom_Command+0xc8>)
 803f1e4:	68f8      	ldr	r0, [r7, #12]
 803f1e6:	f7e1 f81b 	bl	8020220 <strcmp>
 803f1ea:	4603      	mov	r3, r0
 803f1ec:	2b00      	cmp	r3, #0
 803f1ee:	d133      	bne.n	803f258 <Simcom_Command+0xb4>
        Simcom_Lock();
 803f1f0:	f7ff faee 	bl	803e7d0 <Simcom_Lock>

        // Debug: print command
        if (SIMCOM_DEBUG) {
            if (!upload) {
 803f1f4:	7dbb      	ldrb	r3, [r7, #22]
 803f1f6:	2b00      	cmp	r3, #0
 803f1f8:	d108      	bne.n	803f20c <Simcom_Command+0x68>
                LOG_Str("\n=> ");
 803f1fa:	481d      	ldr	r0, [pc, #116]	; (803f270 <Simcom_Command+0xcc>)
 803f1fc:	f7ff f8a2 	bl	803e344 <LOG_Str>
                LOG_Buf(data, size);
 803f200:	887b      	ldrh	r3, [r7, #2]
 803f202:	4619      	mov	r1, r3
 803f204:	68f8      	ldr	r0, [r7, #12]
 803f206:	f7ff f8d0 	bl	803e3aa <LOG_Buf>
 803f20a:	e004      	b.n	803f216 <Simcom_Command+0x72>
            } else {
                LOG_BufHex(data, size);
 803f20c:	887b      	ldrh	r3, [r7, #2]
 803f20e:	4619      	mov	r1, r3
 803f210:	68f8      	ldr	r0, [r7, #12]
 803f212:	f7ff f8e9 	bl	803e3e8 <LOG_BufHex>
            }
            LOG_Enter();
 803f216:	f7ff f81b 	bl	803e250 <LOG_Enter>
        }

        // send command
        p = Simcom_Execute(data, size, ms, res);
 803f21a:	8879      	ldrh	r1, [r7, #2]
 803f21c:	68bb      	ldr	r3, [r7, #8]
 803f21e:	687a      	ldr	r2, [r7, #4]
 803f220:	68f8      	ldr	r0, [r7, #12]
 803f222:	f000 f989 	bl	803f538 <Simcom_Execute>
 803f226:	4603      	mov	r3, r0
 803f228:	75fb      	strb	r3, [r7, #23]

        // Debug: print response
        if (SIMCOM_DEBUG) {
            char *FTPGET = "AT+FTPGET=2";
 803f22a:	4b12      	ldr	r3, [pc, #72]	; (803f274 <Simcom_Command+0xd0>)
 803f22c:	613b      	str	r3, [r7, #16]
            if (strncmp(data, FTPGET, strlen(FTPGET)) != 0) {
 803f22e:	6938      	ldr	r0, [r7, #16]
 803f230:	f7e1 f800 	bl	8020234 <strlen>
 803f234:	4603      	mov	r3, r0
 803f236:	461a      	mov	r2, r3
 803f238:	6939      	ldr	r1, [r7, #16]
 803f23a:	68f8      	ldr	r0, [r7, #12]
 803f23c:	f000 fb90 	bl	803f960 <strncmp>
 803f240:	4603      	mov	r3, r0
 803f242:	2b00      	cmp	r3, #0
 803f244:	d006      	beq.n	803f254 <Simcom_Command+0xb0>
                LOG_Buf(SIMCOM_UART_RX, sizeof(SIMCOM_UART_RX));
 803f246:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 803f24a:	480b      	ldr	r0, [pc, #44]	; (803f278 <Simcom_Command+0xd4>)
 803f24c:	f7ff f8ad 	bl	803e3aa <LOG_Buf>
                LOG_Enter();
 803f250:	f7fe fffe 	bl	803e250 <LOG_Enter>
            }
        }

        Simcom_Unlock();
 803f254:	f7ff faca 	bl	803e7ec <Simcom_Unlock>
    }

    return p;
 803f258:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 803f25c:	4618      	mov	r0, r3
 803f25e:	3718      	adds	r7, #24
 803f260:	46bd      	mov	sp, r7
 803f262:	bd80      	pop	{r7, pc}
 803f264:	08043e64 	.word	0x08043e64
 803f268:	200002a8 	.word	0x200002a8
 803f26c:	08043e68 	.word	0x08043e68
 803f270:	08043e6c 	.word	0x08043e6c
 803f274:	08043e74 	.word	0x08043e74
 803f278:	20008ae4 	.word	0x20008ae4

0803f27c <Simcom_IdleJob>:

SIMCOM_RESULT Simcom_IdleJob(uint8_t *iteration) {
 803f27c:	b580      	push	{r7, lr}
 803f27e:	b084      	sub	sp, #16
 803f280:	af00      	add	r7, sp, #0
 803f282:	6078      	str	r0, [r7, #4]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 803f284:	2300      	movs	r3, #0
 803f286:	73fb      	strb	r3, [r7, #15]
    at_csq_t signal;

    // debug
    if (iteration != NULL) {
 803f288:	687b      	ldr	r3, [r7, #4]
 803f28a:	2b00      	cmp	r3, #0
 803f28c:	d00d      	beq.n	803f2aa <Simcom_IdleJob+0x2e>
        LOG_Str("Simcom:Iteration = ");
 803f28e:	4813      	ldr	r0, [pc, #76]	; (803f2dc <Simcom_IdleJob+0x60>)
 803f290:	f7ff f858 	bl	803e344 <LOG_Str>
        LOG_Int((*iteration)++);
 803f294:	687b      	ldr	r3, [r7, #4]
 803f296:	781b      	ldrb	r3, [r3, #0]
 803f298:	1c5a      	adds	r2, r3, #1
 803f29a:	b2d1      	uxtb	r1, r2
 803f29c:	687a      	ldr	r2, [r7, #4]
 803f29e:	7011      	strb	r1, [r2, #0]
 803f2a0:	4618      	mov	r0, r3
 803f2a2:	f7fe ffe1 	bl	803e268 <LOG_Int>
        LOG_Enter();
 803f2a6:	f7fe ffd3 	bl	803e250 <LOG_Enter>
    }

    // other routines
    p = AT_SignalQualityReport(&signal);
 803f2aa:	f107 030c 	add.w	r3, r7, #12
 803f2ae:	4618      	mov	r0, r3
 803f2b0:	f7fd feba 	bl	803d028 <AT_SignalQualityReport>
 803f2b4:	4603      	mov	r3, r0
 803f2b6:	73fb      	strb	r3, [r7, #15]
    if (p > 0) {
 803f2b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 803f2bc:	2b00      	cmp	r3, #0
 803f2be:	dd02      	ble.n	803f2c6 <Simcom_IdleJob+0x4a>
        SIM.signal = signal.percent;
 803f2c0:	7bba      	ldrb	r2, [r7, #14]
 803f2c2:	4b07      	ldr	r3, [pc, #28]	; (803f2e0 <Simcom_IdleJob+0x64>)
 803f2c4:	741a      	strb	r2, [r3, #16]
    }
#if (!BOOTLOADER)
    p = AT_ConnectionStatusSingle(&(SIM.ip_status));
 803f2c6:	4807      	ldr	r0, [pc, #28]	; (803f2e4 <Simcom_IdleJob+0x68>)
 803f2c8:	f7fd ff5c 	bl	803d184 <AT_ConnectionStatusSingle>
 803f2cc:	4603      	mov	r3, r0
 803f2ce:	73fb      	strb	r3, [r7, #15]
#endif
    return p;
 803f2d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 803f2d4:	4618      	mov	r0, r3
 803f2d6:	3710      	adds	r7, #16
 803f2d8:	46bd      	mov	sp, r7
 803f2da:	bd80      	pop	{r7, pc}
 803f2dc:	08043e80 	.word	0x08043e80
 803f2e0:	200002a8 	.word	0x200002a8
 803f2e4:	200002b0 	.word	0x200002b0

0803f2e8 <Simcom_ProcessCommando>:

/* Private functions implementation --------------------------------------------*/
#if (!BOOTLOADER)
static SIMCOM_RESULT Simcom_ProcessCommando(command_t *command) {
 803f2e8:	b5b0      	push	{r4, r5, r7, lr}
 803f2ea:	b086      	sub	sp, #24
 803f2ec:	af00      	add	r7, sp, #0
 803f2ee:	6078      	str	r0, [r7, #4]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 803f2f0:	2300      	movs	r3, #0
 803f2f2:	75fb      	strb	r3, [r7, #23]
    uint32_t crcValue;
    char *str = NULL;
 803f2f4:	2300      	movs	r3, #0
 803f2f6:	613b      	str	r3, [r7, #16]

    Simcom_Lock();
 803f2f8:	f7ff fa6a 	bl	803e7d0 <Simcom_Lock>
    if (Simcom_Response(SIMCOM_RSP_IPD)) {
 803f2fc:	4821      	ldr	r0, [pc, #132]	; (803f384 <Simcom_ProcessCommando+0x9c>)
 803f2fe:	f7ff fa81 	bl	803e804 <Simcom_Response>
 803f302:	4603      	mov	r3, r0
 803f304:	2b00      	cmp	r3, #0
 803f306:	d035      	beq.n	803f374 <Simcom_ProcessCommando+0x8c>
        // get pointer reference
        str = Simcom_Response(PREFIX_ACK);
 803f308:	481f      	ldr	r0, [pc, #124]	; (803f388 <Simcom_ProcessCommando+0xa0>)
 803f30a:	f7ff fa7b 	bl	803e804 <Simcom_Response>
 803f30e:	6138      	str	r0, [r7, #16]
        if (str) {
 803f310:	693b      	ldr	r3, [r7, #16]
 803f312:	2b00      	cmp	r3, #0
 803f314:	d007      	beq.n	803f326 <Simcom_ProcessCommando+0x3e>
            str = strstr(str + sizeof(ack_t), PREFIX_COMMAND);
 803f316:	693b      	ldr	r3, [r7, #16]
 803f318:	3305      	adds	r3, #5
 803f31a:	491c      	ldr	r1, [pc, #112]	; (803f38c <Simcom_ProcessCommando+0xa4>)
 803f31c:	4618      	mov	r0, r3
 803f31e:	f000 fb31 	bl	803f984 <strstr>
 803f322:	6138      	str	r0, [r7, #16]
 803f324:	e003      	b.n	803f32e <Simcom_ProcessCommando+0x46>
        } else {
            str = Simcom_Response(PREFIX_COMMAND);
 803f326:	4819      	ldr	r0, [pc, #100]	; (803f38c <Simcom_ProcessCommando+0xa4>)
 803f328:	f7ff fa6c 	bl	803e804 <Simcom_Response>
 803f32c:	6138      	str	r0, [r7, #16]
        }

        if (str != NULL) {
 803f32e:	693b      	ldr	r3, [r7, #16]
 803f330:	2b00      	cmp	r3, #0
 803f332:	d01f      	beq.n	803f374 <Simcom_ProcessCommando+0x8c>
            // copy the whole value (any time the buffer can change)
            *command = *(command_t*) str;
 803f334:	687b      	ldr	r3, [r7, #4]
 803f336:	693a      	ldr	r2, [r7, #16]
 803f338:	6815      	ldr	r5, [r2, #0]
 803f33a:	6854      	ldr	r4, [r2, #4]
 803f33c:	6890      	ldr	r0, [r2, #8]
 803f33e:	68d1      	ldr	r1, [r2, #12]
 803f340:	601d      	str	r5, [r3, #0]
 803f342:	605c      	str	r4, [r3, #4]
 803f344:	6098      	str	r0, [r3, #8]
 803f346:	60d9      	str	r1, [r3, #12]
 803f348:	7c12      	ldrb	r2, [r2, #16]
 803f34a:	741a      	strb	r2, [r3, #16]

            // check the Size
            if (command->header.size == sizeof(command->data)) {
 803f34c:	687b      	ldr	r3, [r7, #4]
 803f34e:	799b      	ldrb	r3, [r3, #6]
 803f350:	2b0a      	cmp	r3, #10
 803f352:	d10f      	bne.n	803f374 <Simcom_ProcessCommando+0x8c>
                // calculate the CRC
                crcValue = CRC_Calculate8(
 803f354:	687b      	ldr	r3, [r7, #4]
 803f356:	3306      	adds	r3, #6
 803f358:	2200      	movs	r2, #0
 803f35a:	210b      	movs	r1, #11
 803f35c:	4618      	mov	r0, r3
 803f35e:	f7fe fe59 	bl	803e014 <CRC_Calculate8>
 803f362:	60f8      	str	r0, [r7, #12]
                        (uint8_t*) &(command->header.size),
                        sizeof(command->header.size) + sizeof(command->data),
                        0);

                // check the CRC
                if (command->header.crc == crcValue) {
 803f364:	687b      	ldr	r3, [r7, #4]
 803f366:	f8d3 3002 	ldr.w	r3, [r3, #2]
 803f36a:	68fa      	ldr	r2, [r7, #12]
 803f36c:	429a      	cmp	r2, r3
 803f36e:	d101      	bne.n	803f374 <Simcom_ProcessCommando+0x8c>
                    p = SIM_RESULT_OK;
 803f370:	2301      	movs	r3, #1
 803f372:	75fb      	strb	r3, [r7, #23]
                }
            }
        }
    }
    Simcom_Unlock();
 803f374:	f7ff fa3a 	bl	803e7ec <Simcom_Unlock>

    return p;
 803f378:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 803f37c:	4618      	mov	r0, r3
 803f37e:	3718      	adds	r7, #24
 803f380:	46bd      	mov	sp, r7
 803f382:	bdb0      	pop	{r4, r5, r7, pc}
 803f384:	08043e94 	.word	0x08043e94
 803f388:	08043e58 	.word	0x08043e58
 803f38c:	08043e60 	.word	0x08043e60

0803f390 <Simcom_ProcessACK>:

static SIMCOM_RESULT Simcom_ProcessACK(header_t *header) {
 803f390:	b580      	push	{r7, lr}
 803f392:	b086      	sub	sp, #24
 803f394:	af00      	add	r7, sp, #0
 803f396:	6078      	str	r0, [r7, #4]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 803f398:	2300      	movs	r3, #0
 803f39a:	75fb      	strb	r3, [r7, #23]
    ack_t ack;
    char *str = NULL;
 803f39c:	2300      	movs	r3, #0
 803f39e:	613b      	str	r3, [r7, #16]

    Simcom_Lock();
 803f3a0:	f7ff fa16 	bl	803e7d0 <Simcom_Lock>
    if (Simcom_Response(SIMCOM_RSP_IPD)) {
 803f3a4:	4815      	ldr	r0, [pc, #84]	; (803f3fc <Simcom_ProcessACK+0x6c>)
 803f3a6:	f7ff fa2d 	bl	803e804 <Simcom_Response>
 803f3aa:	4603      	mov	r3, r0
 803f3ac:	2b00      	cmp	r3, #0
 803f3ae:	d01c      	beq.n	803f3ea <Simcom_ProcessACK+0x5a>
        // parse ACK
        str = Simcom_Response(PREFIX_ACK);
 803f3b0:	4813      	ldr	r0, [pc, #76]	; (803f400 <Simcom_ProcessACK+0x70>)
 803f3b2:	f7ff fa27 	bl	803e804 <Simcom_Response>
 803f3b6:	6138      	str	r0, [r7, #16]
        if (str != NULL) {
 803f3b8:	693b      	ldr	r3, [r7, #16]
 803f3ba:	2b00      	cmp	r3, #0
 803f3bc:	d015      	beq.n	803f3ea <Simcom_ProcessACK+0x5a>
            ack = *(ack_t*) str;
 803f3be:	693a      	ldr	r2, [r7, #16]
 803f3c0:	f107 0308 	add.w	r3, r7, #8
 803f3c4:	6810      	ldr	r0, [r2, #0]
 803f3c6:	6018      	str	r0, [r3, #0]
 803f3c8:	7912      	ldrb	r2, [r2, #4]
 803f3ca:	711a      	strb	r2, [r3, #4]

            // validate the value
            if (header->frame_id == ack.frame_id &&
 803f3cc:	687b      	ldr	r3, [r7, #4]
 803f3ce:	79da      	ldrb	r2, [r3, #7]
 803f3d0:	7abb      	ldrb	r3, [r7, #10]
 803f3d2:	429a      	cmp	r2, r3
 803f3d4:	d109      	bne.n	803f3ea <Simcom_ProcessACK+0x5a>
                    header->seq_id == ack.seq_id) {
 803f3d6:	687b      	ldr	r3, [r7, #4]
 803f3d8:	899b      	ldrh	r3, [r3, #12]
 803f3da:	b29a      	uxth	r2, r3
 803f3dc:	f8b7 300b 	ldrh.w	r3, [r7, #11]
 803f3e0:	b29b      	uxth	r3, r3
            if (header->frame_id == ack.frame_id &&
 803f3e2:	429a      	cmp	r2, r3
 803f3e4:	d101      	bne.n	803f3ea <Simcom_ProcessACK+0x5a>
                p = SIM_RESULT_OK;
 803f3e6:	2301      	movs	r3, #1
 803f3e8:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    Simcom_Unlock();
 803f3ea:	f7ff f9ff 	bl	803e7ec <Simcom_Unlock>
    return p;
 803f3ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 803f3f2:	4618      	mov	r0, r3
 803f3f4:	3718      	adds	r7, #24
 803f3f6:	46bd      	mov	sp, r7
 803f3f8:	bd80      	pop	{r7, pc}
 803f3fa:	bf00      	nop
 803f3fc:	08043e94 	.word	0x08043e94
 803f400:	08043e58 	.word	0x08043e58

0803f404 <Simcom_CommandoIRQ>:

static uint8_t Simcom_CommandoIRQ(void) {
 803f404:	b580      	push	{r7, lr}
 803f406:	af00      	add	r7, sp, #0
    return Simcom_Response(PREFIX_COMMAND) != NULL;
 803f408:	4805      	ldr	r0, [pc, #20]	; (803f420 <Simcom_CommandoIRQ+0x1c>)
 803f40a:	f7ff f9fb 	bl	803e804 <Simcom_Response>
 803f40e:	4603      	mov	r3, r0
 803f410:	2b00      	cmp	r3, #0
 803f412:	bf14      	ite	ne
 803f414:	2301      	movne	r3, #1
 803f416:	2300      	moveq	r3, #0
 803f418:	b2db      	uxtb	r3, r3
}
 803f41a:	4618      	mov	r0, r3
 803f41c:	bd80      	pop	{r7, pc}
 803f41e:	bf00      	nop
 803f420:	08043e60 	.word	0x08043e60

0803f424 <Simcom_Ready>:
#endif

static SIMCOM_RESULT Simcom_Ready(void) {
 803f424:	b580      	push	{r7, lr}
 803f426:	b082      	sub	sp, #8
 803f428:	af00      	add	r7, sp, #0
    uint32_t tick;

#if (!BOOTLOADER)
    // save event
    VCU.SetEvent(EV_VCU_NETWORK_RESTART, 1);
 803f42a:	4b1a      	ldr	r3, [pc, #104]	; (803f494 <Simcom_Ready+0x70>)
 803f42c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 803f42e:	2201      	movs	r2, #1
 803f430:	f04f 0001 	mov.w	r0, #1
 803f434:	f04f 0100 	mov.w	r1, #0
 803f438:	4798      	blx	r3
#endif

    // wait until 1s response
    tick = _GetTickMS();
 803f43a:	f000 f94a 	bl	803f6d2 <_GetTickMS>
 803f43e:	6078      	str	r0, [r7, #4]
    while (SIM.state == SIM_STATE_DOWN) {
 803f440:	e016      	b.n	803f470 <Simcom_Ready+0x4c>
        if (Simcom_Response(SIMCOM_RSP_READY)
 803f442:	4815      	ldr	r0, [pc, #84]	; (803f498 <Simcom_Ready+0x74>)
 803f444:	f7ff f9de 	bl	803e804 <Simcom_Response>
 803f448:	4603      	mov	r3, r0
 803f44a:	2b00      	cmp	r3, #0
 803f44c:	d116      	bne.n	803f47c <Simcom_Ready+0x58>
                || Simcom_Response(SIMCOM_RSP_OK)
 803f44e:	4813      	ldr	r0, [pc, #76]	; (803f49c <Simcom_Ready+0x78>)
 803f450:	f7ff f9d8 	bl	803e804 <Simcom_Response>
 803f454:	4603      	mov	r3, r0
 803f456:	2b00      	cmp	r3, #0
 803f458:	d110      	bne.n	803f47c <Simcom_Ready+0x58>
                || (_GetTickMS() - tick) >= NET_BOOT_TIMEOUT) {
 803f45a:	f000 f93a 	bl	803f6d2 <_GetTickMS>
 803f45e:	4602      	mov	r2, r0
 803f460:	687b      	ldr	r3, [r7, #4]
 803f462:	1ad3      	subs	r3, r2, r3
 803f464:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 803f468:	d208      	bcs.n	803f47c <Simcom_Ready+0x58>
            break;
        }
        _DelayMS(1);
 803f46a:	2001      	movs	r0, #1
 803f46c:	f000 f926 	bl	803f6bc <_DelayMS>
    while (SIM.state == SIM_STATE_DOWN) {
 803f470:	4b0b      	ldr	r3, [pc, #44]	; (803f4a0 <Simcom_Ready+0x7c>)
 803f472:	f993 3000 	ldrsb.w	r3, [r3]
 803f476:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 803f47a:	d0e2      	beq.n	803f442 <Simcom_Ready+0x1e>
    }

    // check
    return Simcom_Command(SIMCOM_CMD_BOOT, SIMCOM_RSP_READY, 1000, 0);
 803f47c:	2300      	movs	r3, #0
 803f47e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 803f482:	4905      	ldr	r1, [pc, #20]	; (803f498 <Simcom_Ready+0x74>)
 803f484:	4807      	ldr	r0, [pc, #28]	; (803f4a4 <Simcom_Ready+0x80>)
 803f486:	f7ff fe8d 	bl	803f1a4 <Simcom_Command>
 803f48a:	4603      	mov	r3, r0
}
 803f48c:	4618      	mov	r0, r3
 803f48e:	3708      	adds	r7, #8
 803f490:	46bd      	mov	sp, r7
 803f492:	bd80      	pop	{r7, pc}
 803f494:	20000228 	.word	0x20000228
 803f498:	08043e9c 	.word	0x08043e9c
 803f49c:	08043e64 	.word	0x08043e64
 803f4a0:	200002a8 	.word	0x200002a8
 803f4a4:	08043e68 	.word	0x08043e68

0803f4a8 <Simcom_Power>:

static SIMCOM_RESULT Simcom_Power(void) {
 803f4a8:	b580      	push	{r7, lr}
 803f4aa:	af00      	add	r7, sp, #0
    LOG_StrLn("Simcom:Powered");
 803f4ac:	4814      	ldr	r0, [pc, #80]	; (803f500 <Simcom_Power+0x58>)
 803f4ae:	f7fe ff61 	bl	803e374 <LOG_StrLn>
    // reset buffer
    SIMCOM_Reset_Buffer();
 803f4b2:	f7fd fd67 	bl	803cf84 <SIMCOM_Reset_Buffer>

    // power control
    HAL_GPIO_WritePin(INT_NET_PWR_GPIO_Port, INT_NET_PWR_Pin, 0);
 803f4b6:	2200      	movs	r2, #0
 803f4b8:	2101      	movs	r1, #1
 803f4ba:	4812      	ldr	r0, [pc, #72]	; (803f504 <Simcom_Power+0x5c>)
 803f4bc:	f7f0 fe48 	bl	8030150 <HAL_GPIO_WritePin>
    _DelayMS(100);
 803f4c0:	2064      	movs	r0, #100	; 0x64
 803f4c2:	f000 f8fb 	bl	803f6bc <_DelayMS>
    HAL_GPIO_WritePin(INT_NET_PWR_GPIO_Port, INT_NET_PWR_Pin, 1);
 803f4c6:	2201      	movs	r2, #1
 803f4c8:	2101      	movs	r1, #1
 803f4ca:	480e      	ldr	r0, [pc, #56]	; (803f504 <Simcom_Power+0x5c>)
 803f4cc:	f7f0 fe40 	bl	8030150 <HAL_GPIO_WritePin>
    _DelayMS(1000);
 803f4d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 803f4d4:	f000 f8f2 	bl	803f6bc <_DelayMS>

    // simcom reset pin
    HAL_GPIO_WritePin(INT_NET_RST_GPIO_Port, INT_NET_RST_Pin, 1);
 803f4d8:	2201      	movs	r2, #1
 803f4da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 803f4de:	480a      	ldr	r0, [pc, #40]	; (803f508 <Simcom_Power+0x60>)
 803f4e0:	f7f0 fe36 	bl	8030150 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 803f4e4:	2001      	movs	r0, #1
 803f4e6:	f7ec ff4d 	bl	802c384 <HAL_Delay>
    HAL_GPIO_WritePin(INT_NET_RST_GPIO_Port, INT_NET_RST_Pin, 0);
 803f4ea:	2200      	movs	r2, #0
 803f4ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 803f4f0:	4805      	ldr	r0, [pc, #20]	; (803f508 <Simcom_Power+0x60>)
 803f4f2:	f7f0 fe2d 	bl	8030150 <HAL_GPIO_WritePin>

    // wait response
    return Simcom_Ready();
 803f4f6:	f7ff ff95 	bl	803f424 <Simcom_Ready>
 803f4fa:	4603      	mov	r3, r0
}
 803f4fc:	4618      	mov	r0, r3
 803f4fe:	bd80      	pop	{r7, pc}
 803f500:	08043ea0 	.word	0x08043ea0
 803f504:	40020800 	.word	0x40020800
 803f508:	40020400 	.word	0x40020400

0803f50c <Simcom_Sleep>:

static void Simcom_Sleep(uint8_t state) {
 803f50c:	b580      	push	{r7, lr}
 803f50e:	b082      	sub	sp, #8
 803f510:	af00      	add	r7, sp, #0
 803f512:	4603      	mov	r3, r0
 803f514:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(INT_NET_DTR_GPIO_Port, INT_NET_DTR_Pin, state);
 803f516:	79fb      	ldrb	r3, [r7, #7]
 803f518:	461a      	mov	r2, r3
 803f51a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 803f51e:	4805      	ldr	r0, [pc, #20]	; (803f534 <Simcom_Sleep+0x28>)
 803f520:	f7f0 fe16 	bl	8030150 <HAL_GPIO_WritePin>
    _DelayMS(50);
 803f524:	2032      	movs	r0, #50	; 0x32
 803f526:	f000 f8c9 	bl	803f6bc <_DelayMS>
}
 803f52a:	bf00      	nop
 803f52c:	3708      	adds	r7, #8
 803f52e:	46bd      	mov	sp, r7
 803f530:	bd80      	pop	{r7, pc}
 803f532:	bf00      	nop
 803f534:	40020400 	.word	0x40020400

0803f538 <Simcom_Execute>:

static SIMCOM_RESULT Simcom_Execute(char *data, uint16_t size, uint32_t ms, char *res) {
 803f538:	b580      	push	{r7, lr}
 803f53a:	b088      	sub	sp, #32
 803f53c:	af00      	add	r7, sp, #0
 803f53e:	60f8      	str	r0, [r7, #12]
 803f540:	607a      	str	r2, [r7, #4]
 803f542:	603b      	str	r3, [r7, #0]
 803f544:	460b      	mov	r3, r1
 803f546:	817b      	strh	r3, [r7, #10]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 803f548:	2300      	movs	r3, #0
 803f54a:	77fb      	strb	r3, [r7, #31]
    uint32_t tick, timeout = 0;
 803f54c:	2300      	movs	r3, #0
 803f54e:	61bb      	str	r3, [r7, #24]

    Simcom_Lock();
 803f550:	f7ff f93e 	bl	803e7d0 <Simcom_Lock>
    // wake-up the SIMCOM
    Simcom_Sleep(0);
 803f554:	2000      	movs	r0, #0
 803f556:	f7ff ffd9 	bl	803f50c <Simcom_Sleep>

    // transmit to serial (low-level)
    Simcom_BeforeTransmitHook();
 803f55a:	f000 f897 	bl	803f68c <Simcom_BeforeTransmitHook>
    SIMCOM_Transmit(data, size);
 803f55e:	897b      	ldrh	r3, [r7, #10]
 803f560:	4619      	mov	r1, r3
 803f562:	68f8      	ldr	r0, [r7, #12]
 803f564:	f7fd fd20 	bl	803cfa8 <SIMCOM_Transmit>

    // convert time to tick
    timeout = (ms + NET_EXTRA_TIME);
 803f568:	687b      	ldr	r3, [r7, #4]
 803f56a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 803f56e:	61bb      	str	r3, [r7, #24]
    // set timeout guard
    tick = _GetTickMS();
 803f570:	f000 f8af 	bl	803f6d2 <_GetTickMS>
 803f574:	6178      	str	r0, [r7, #20]

    // wait response from SIMCOM
    while (1) {
        if (Simcom_Response(res)
 803f576:	6838      	ldr	r0, [r7, #0]
 803f578:	f7ff f944 	bl	803e804 <Simcom_Response>
 803f57c:	4603      	mov	r3, r0
 803f57e:	2b00      	cmp	r3, #0
 803f580:	d118      	bne.n	803f5b4 <Simcom_Execute+0x7c>
                || Simcom_Response(SIMCOM_RSP_ERROR)
 803f582:	483a      	ldr	r0, [pc, #232]	; (803f66c <Simcom_Execute+0x134>)
 803f584:	f7ff f93e 	bl	803e804 <Simcom_Response>
 803f588:	4603      	mov	r3, r0
 803f58a:	2b00      	cmp	r3, #0
 803f58c:	d112      	bne.n	803f5b4 <Simcom_Execute+0x7c>
                || Simcom_Response(SIMCOM_RSP_READY)
 803f58e:	4838      	ldr	r0, [pc, #224]	; (803f670 <Simcom_Execute+0x138>)
 803f590:	f7ff f938 	bl	803e804 <Simcom_Response>
 803f594:	4603      	mov	r3, r0
 803f596:	2b00      	cmp	r3, #0
 803f598:	d10c      	bne.n	803f5b4 <Simcom_Execute+0x7c>
                #if (!BOOTLOADER)
                || Simcom_CommandoIRQ()
 803f59a:	f7ff ff33 	bl	803f404 <Simcom_CommandoIRQ>
 803f59e:	4603      	mov	r3, r0
 803f5a0:	2b00      	cmp	r3, #0
 803f5a2:	d107      	bne.n	803f5b4 <Simcom_Execute+0x7c>
                #endif
                || (_GetTickMS() - tick) >= timeout) {
 803f5a4:	f000 f895 	bl	803f6d2 <_GetTickMS>
 803f5a8:	4602      	mov	r2, r0
 803f5aa:	697b      	ldr	r3, [r7, #20]
 803f5ac:	1ad3      	subs	r3, r2, r3
 803f5ae:	69ba      	ldr	r2, [r7, #24]
 803f5b0:	429a      	cmp	r2, r3
 803f5b2:	d84a      	bhi.n	803f64a <Simcom_Execute+0x112>

            // check response
            if (Simcom_Response(res)) {
 803f5b4:	6838      	ldr	r0, [r7, #0]
 803f5b6:	f7ff f925 	bl	803e804 <Simcom_Response>
 803f5ba:	4603      	mov	r3, r0
 803f5bc:	2b00      	cmp	r3, #0
 803f5be:	d001      	beq.n	803f5c4 <Simcom_Execute+0x8c>
                p = SIM_RESULT_OK;
 803f5c0:	2301      	movs	r3, #1
 803f5c2:	77fb      	strb	r3, [r7, #31]
            }

            // Handle failure
            if (p != SIM_RESULT_OK) {
 803f5c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 803f5c8:	2b01      	cmp	r3, #1
 803f5ca:	d042      	beq.n	803f652 <Simcom_Execute+0x11a>
                // exception for no response
                if (strlen(SIMCOM_UART_RX) == 0) {
 803f5cc:	4b29      	ldr	r3, [pc, #164]	; (803f674 <Simcom_Execute+0x13c>)
 803f5ce:	781b      	ldrb	r3, [r3, #0]
 803f5d0:	2b00      	cmp	r3, #0
 803f5d2:	d108      	bne.n	803f5e6 <Simcom_Execute+0xae>
                    p = SIM_RESULT_NO_RESPONSE;
 803f5d4:	23fe      	movs	r3, #254	; 0xfe
 803f5d6:	77fb      	strb	r3, [r7, #31]
                    SIM.state = SIM_STATE_DOWN;
 803f5d8:	4b27      	ldr	r3, [pc, #156]	; (803f678 <Simcom_Execute+0x140>)
 803f5da:	22ff      	movs	r2, #255	; 0xff
 803f5dc:	701a      	strb	r2, [r3, #0]
                    LOG_StrLn("Simcom:NoResponse");
 803f5de:	4827      	ldr	r0, [pc, #156]	; (803f67c <Simcom_Execute+0x144>)
 803f5e0:	f7fe fec8 	bl	803e374 <LOG_StrLn>
                    }
                }
            }

            // exit loop
            break;
 803f5e4:	e035      	b.n	803f652 <Simcom_Execute+0x11a>
                else if (Simcom_CommandoIRQ()) {
 803f5e6:	f7ff ff0d 	bl	803f404 <Simcom_CommandoIRQ>
 803f5ea:	4603      	mov	r3, r0
 803f5ec:	2b00      	cmp	r3, #0
 803f5ee:	d002      	beq.n	803f5f6 <Simcom_Execute+0xbe>
                    p = SIM_RESULT_TIMEOUT;
 803f5f0:	23ff      	movs	r3, #255	; 0xff
 803f5f2:	77fb      	strb	r3, [r7, #31]
            break;
 803f5f4:	e02d      	b.n	803f652 <Simcom_Execute+0x11a>
                    if (Simcom_Response(SIMCOM_RSP_READY) && (SIM.state >= SIM_STATE_READY)) {
 803f5f6:	481e      	ldr	r0, [pc, #120]	; (803f670 <Simcom_Execute+0x138>)
 803f5f8:	f7ff f904 	bl	803e804 <Simcom_Response>
 803f5fc:	4603      	mov	r3, r0
 803f5fe:	2b00      	cmp	r3, #0
 803f600:	d015      	beq.n	803f62e <Simcom_Execute+0xf6>
 803f602:	4b1d      	ldr	r3, [pc, #116]	; (803f678 <Simcom_Execute+0x140>)
 803f604:	f993 3000 	ldrsb.w	r3, [r3]
 803f608:	2b00      	cmp	r3, #0
 803f60a:	db10      	blt.n	803f62e <Simcom_Execute+0xf6>
                        LOG_StrLn("Simcom:Restarted");
 803f60c:	481c      	ldr	r0, [pc, #112]	; (803f680 <Simcom_Execute+0x148>)
 803f60e:	f7fe feb1 	bl	803e374 <LOG_StrLn>
                        p = SIM_RESULT_RESTARTED;
 803f612:	23fd      	movs	r3, #253	; 0xfd
 803f614:	77fb      	strb	r3, [r7, #31]
                        SIM.state = SIM_STATE_READY;
 803f616:	4b18      	ldr	r3, [pc, #96]	; (803f678 <Simcom_Execute+0x140>)
 803f618:	2200      	movs	r2, #0
 803f61a:	701a      	strb	r2, [r3, #0]
                        VCU.SetEvent(EV_VCU_NETWORK_RESTART, 1);
 803f61c:	4b19      	ldr	r3, [pc, #100]	; (803f684 <Simcom_Execute+0x14c>)
 803f61e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 803f620:	2201      	movs	r2, #1
 803f622:	f04f 0001 	mov.w	r0, #1
 803f626:	f04f 0100 	mov.w	r1, #0
 803f62a:	4798      	blx	r3
            break;
 803f62c:	e011      	b.n	803f652 <Simcom_Execute+0x11a>
                    else if ((_GetTickMS() - tick) >= timeout) {
 803f62e:	f000 f850 	bl	803f6d2 <_GetTickMS>
 803f632:	4602      	mov	r2, r0
 803f634:	697b      	ldr	r3, [r7, #20]
 803f636:	1ad3      	subs	r3, r2, r3
 803f638:	69ba      	ldr	r2, [r7, #24]
 803f63a:	429a      	cmp	r2, r3
 803f63c:	d809      	bhi.n	803f652 <Simcom_Execute+0x11a>
                        LOG_StrLn("Simcom:Timeout");
 803f63e:	4812      	ldr	r0, [pc, #72]	; (803f688 <Simcom_Execute+0x150>)
 803f640:	f7fe fe98 	bl	803e374 <LOG_StrLn>
                        p = SIM_RESULT_TIMEOUT;
 803f644:	23ff      	movs	r3, #255	; 0xff
 803f646:	77fb      	strb	r3, [r7, #31]
            break;
 803f648:	e003      	b.n	803f652 <Simcom_Execute+0x11a>
        }
        _DelayMS(10);
 803f64a:	200a      	movs	r0, #10
 803f64c:	f000 f836 	bl	803f6bc <_DelayMS>
        if (Simcom_Response(res)
 803f650:	e791      	b.n	803f576 <Simcom_Execute+0x3e>
            break;
 803f652:	bf00      	nop
    }

    // sleep the SIMCOM
    Simcom_Sleep(1);
 803f654:	2001      	movs	r0, #1
 803f656:	f7ff ff59 	bl	803f50c <Simcom_Sleep>
    Simcom_Unlock();
 803f65a:	f7ff f8c7 	bl	803e7ec <Simcom_Unlock>
    return p;
 803f65e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 803f662:	4618      	mov	r0, r3
 803f664:	3720      	adds	r7, #32
 803f666:	46bd      	mov	sp, r7
 803f668:	bd80      	pop	{r7, pc}
 803f66a:	bf00      	nop
 803f66c:	08043eb0 	.word	0x08043eb0
 803f670:	08043e9c 	.word	0x08043e9c
 803f674:	20008ae4 	.word	0x20008ae4
 803f678:	200002a8 	.word	0x200002a8
 803f67c:	08043eb8 	.word	0x08043eb8
 803f680:	08043ecc 	.word	0x08043ecc
 803f684:	20000228 	.word	0x20000228
 803f688:	08043ee0 	.word	0x08043ee0

0803f68c <Simcom_BeforeTransmitHook>:

static void Simcom_BeforeTransmitHook(void) {
 803f68c:	b580      	push	{r7, lr}
 803f68e:	b086      	sub	sp, #24
 803f690:	af00      	add	r7, sp, #0
#if (!BOOTLOADER)
    command_t hCommand;
    // handle Commando (if any)
    if (Simcom_ProcessCommando(&hCommand)) {
 803f692:	1d3b      	adds	r3, r7, #4
 803f694:	4618      	mov	r0, r3
 803f696:	f7ff fe27 	bl	803f2e8 <Simcom_ProcessCommando>
 803f69a:	4603      	mov	r3, r0
 803f69c:	2b00      	cmp	r3, #0
 803f69e:	d006      	beq.n	803f6ae <Simcom_BeforeTransmitHook+0x22>
        osMessageQueuePut(CommandQueueHandle, &hCommand, 0U, 0U);
 803f6a0:	4b05      	ldr	r3, [pc, #20]	; (803f6b8 <Simcom_BeforeTransmitHook+0x2c>)
 803f6a2:	6818      	ldr	r0, [r3, #0]
 803f6a4:	1d39      	adds	r1, r7, #4
 803f6a6:	2300      	movs	r3, #0
 803f6a8:	2200      	movs	r2, #0
 803f6aa:	f7f8 fd03 	bl	80380b4 <osMessageQueuePut>
    //  LOG_StrLn("============ SIMCOM DEBUG ============");
    //  LOG_Buf(SIMCOM_UART_RX, strlen(SIMCOM_UART_RX));
    //  LOG_Enter();
    //  LOG_StrLn("======================================");

}
 803f6ae:	bf00      	nop
 803f6b0:	3718      	adds	r7, #24
 803f6b2:	46bd      	mov	sp, r7
 803f6b4:	bd80      	pop	{r7, pc}
 803f6b6:	bf00      	nop
 803f6b8:	200089a4 	.word	0x200089a4

0803f6bc <_DelayMS>:
extern vcu_t VCU;
extern sw_t SW;
#endif

/* Public functions implementation --------------------------------------------*/
void _DelayMS(uint32_t ms) {
 803f6bc:	b580      	push	{r7, lr}
 803f6be:	b082      	sub	sp, #8
 803f6c0:	af00      	add	r7, sp, #0
 803f6c2:	6078      	str	r0, [r7, #4]
#if RTOS_ENABLE
    osDelay(ms);
 803f6c4:	6878      	ldr	r0, [r7, #4]
 803f6c6:	f7f8 f999 	bl	80379fc <osDelay>
#else
    HAL_Delay(ms);
#endif
}
 803f6ca:	bf00      	nop
 803f6cc:	3708      	adds	r7, #8
 803f6ce:	46bd      	mov	sp, r7
 803f6d0:	bd80      	pop	{r7, pc}

0803f6d2 <_GetTickMS>:

uint32_t _GetTickMS(void) {
 803f6d2:	b580      	push	{r7, lr}
 803f6d4:	af00      	add	r7, sp, #0
#if RTOS_ENABLE
    return osKernelGetTickCount();
 803f6d6:	f7f7 ff7d 	bl	80375d4 <osKernelGetTickCount>
 803f6da:	4603      	mov	r3, r0
#else
    return HAL_GetTick();
#endif
}
 803f6dc:	4618      	mov	r0, r3
 803f6de:	bd80      	pop	{r7, pc}

0803f6e0 <_LedWrite>:

uint8_t _LedRead(void) {
    return HAL_GPIO_ReadPin(SYS_LED_GPIO_Port, SYS_LED_Pin);
}

void _LedWrite(uint8_t state) {
 803f6e0:	b580      	push	{r7, lr}
 803f6e2:	b082      	sub	sp, #8
 803f6e4:	af00      	add	r7, sp, #0
 803f6e6:	4603      	mov	r3, r0
 803f6e8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SYS_LED_GPIO_Port, SYS_LED_Pin, state);
 803f6ea:	79fb      	ldrb	r3, [r7, #7]
 803f6ec:	461a      	mov	r2, r3
 803f6ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 803f6f2:	4803      	ldr	r0, [pc, #12]	; (803f700 <_LedWrite+0x20>)
 803f6f4:	f7f0 fd2c 	bl	8030150 <HAL_GPIO_WritePin>
}
 803f6f8:	bf00      	nop
 803f6fa:	3708      	adds	r7, #8
 803f6fc:	46bd      	mov	sp, r7
 803f6fe:	bd80      	pop	{r7, pc}
 803f700:	40020c00 	.word	0x40020c00

0803f704 <_LedToggle>:

void _LedToggle(void) {
 803f704:	b580      	push	{r7, lr}
 803f706:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(SYS_LED_GPIO_Port, SYS_LED_Pin);
 803f708:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 803f70c:	4802      	ldr	r0, [pc, #8]	; (803f718 <_LedToggle+0x14>)
 803f70e:	f7f0 fd38 	bl	8030182 <HAL_GPIO_TogglePin>
}
 803f712:	bf00      	nop
 803f714:	bd80      	pop	{r7, pc}
 803f716:	bf00      	nop
 803f718:	40020c00 	.word	0x40020c00

0803f71c <_Error>:

void _Error(char msg[50]) {
 803f71c:	b580      	push	{r7, lr}
 803f71e:	b082      	sub	sp, #8
 803f720:	af00      	add	r7, sp, #0
 803f722:	6078      	str	r0, [r7, #4]
#if RTOS_ENABLE
    if (osKernelGetState() == osKernelRunning) {
 803f724:	f7f7 fefe 	bl	8037524 <osKernelGetState>
 803f728:	4603      	mov	r3, r0
 803f72a:	2b02      	cmp	r3, #2
 803f72c:	d102      	bne.n	803f734 <_Error+0x18>
        LOG_StrLn(msg);
 803f72e:	6878      	ldr	r0, [r7, #4]
 803f730:	f7fe fe20 	bl	803e374 <LOG_StrLn>
    LOG_StrLn(msg);
#endif

    // indicator error
    while (1) {
        _LedToggle();
 803f734:	f7ff ffe6 	bl	803f704 <_LedToggle>
        HAL_Delay(50);
 803f738:	2032      	movs	r0, #50	; 0x32
 803f73a:	f7ec fe23 	bl	802c384 <HAL_Delay>
        _LedToggle();
 803f73e:	e7f9      	b.n	803f734 <_Error+0x18>

0803f740 <_ByteSwap32>:
    }
}

uint32_t _ByteSwap32(uint32_t x) {
 803f740:	b480      	push	{r7}
 803f742:	b085      	sub	sp, #20
 803f744:	af00      	add	r7, sp, #0
 803f746:	6078      	str	r0, [r7, #4]
    uint32_t y = (x >> 24) & 0xff;
 803f748:	687b      	ldr	r3, [r7, #4]
 803f74a:	0e1b      	lsrs	r3, r3, #24
 803f74c:	60fb      	str	r3, [r7, #12]
    y |= ((x >> 16) & 0xff) << 8;
 803f74e:	687b      	ldr	r3, [r7, #4]
 803f750:	0c1b      	lsrs	r3, r3, #16
 803f752:	021b      	lsls	r3, r3, #8
 803f754:	b29b      	uxth	r3, r3
 803f756:	68fa      	ldr	r2, [r7, #12]
 803f758:	4313      	orrs	r3, r2
 803f75a:	60fb      	str	r3, [r7, #12]
    y |= ((x >> 8) & 0xff) << 16;
 803f75c:	687b      	ldr	r3, [r7, #4]
 803f75e:	0a1b      	lsrs	r3, r3, #8
 803f760:	041b      	lsls	r3, r3, #16
 803f762:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 803f766:	68fa      	ldr	r2, [r7, #12]
 803f768:	4313      	orrs	r3, r2
 803f76a:	60fb      	str	r3, [r7, #12]
    y |= (x & 0xff) << 24;
 803f76c:	687b      	ldr	r3, [r7, #4]
 803f76e:	061b      	lsls	r3, r3, #24
 803f770:	68fa      	ldr	r2, [r7, #12]
 803f772:	4313      	orrs	r3, r2
 803f774:	60fb      	str	r3, [r7, #12]

    return y;
 803f776:	68fb      	ldr	r3, [r7, #12]
}
 803f778:	4618      	mov	r0, r3
 803f77a:	3714      	adds	r7, #20
 803f77c:	46bd      	mov	sp, r7
 803f77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803f782:	4770      	bx	lr

0803f784 <_RTOS_ValidThreadFlag>:
        }
        LOG_StrLn("===========================================");
    }
}

uint8_t _RTOS_ValidThreadFlag(uint32_t flag) {
 803f784:	b480      	push	{r7}
 803f786:	b085      	sub	sp, #20
 803f788:	af00      	add	r7, sp, #0
 803f78a:	6078      	str	r0, [r7, #4]
    uint8_t ret = 1;
 803f78c:	2301      	movs	r3, #1
 803f78e:	73fb      	strb	r3, [r7, #15]

    // check is empty
    if (!flag) {
 803f790:	687b      	ldr	r3, [r7, #4]
 803f792:	2b00      	cmp	r3, #0
 803f794:	d102      	bne.n	803f79c <_RTOS_ValidThreadFlag+0x18>
        ret = 0;
 803f796:	2300      	movs	r3, #0
 803f798:	73fb      	strb	r3, [r7, #15]
 803f79a:	e004      	b.n	803f7a6 <_RTOS_ValidThreadFlag+0x22>
    } else if (flag & (~EVT_MASK)) {
 803f79c:	687b      	ldr	r3, [r7, #4]
 803f79e:	2b00      	cmp	r3, #0
 803f7a0:	da01      	bge.n	803f7a6 <_RTOS_ValidThreadFlag+0x22>
        // error
        ret = 0;
 803f7a2:	2300      	movs	r3, #0
 803f7a4:	73fb      	strb	r3, [r7, #15]
    }

    return ret;
 803f7a6:	7bfb      	ldrb	r3, [r7, #15]
}
 803f7a8:	4618      	mov	r0, r3
 803f7aa:	3714      	adds	r7, #20
 803f7ac:	46bd      	mov	sp, r7
 803f7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 803f7b2:	4770      	bx	lr

0803f7b4 <_DummyGenerator>:
    }

    return ret;
}

void _DummyGenerator(void) {
 803f7b4:	b480      	push	{r7}
 803f7b6:	b083      	sub	sp, #12
 803f7b8:	af00      	add	r7, sp, #0
    uint8_t *pRange = &(SW.runner.mode.sub.report[SW_M_REPORT_RANGE]);
 803f7ba:	4b13      	ldr	r3, [pc, #76]	; (803f808 <_DummyGenerator+0x54>)
 803f7bc:	607b      	str	r3, [r7, #4]
    uint8_t *pEfficiency = &(SW.runner.mode.sub.report[SW_M_REPORT_EFFICIENCY]);
 803f7be:	4b13      	ldr	r3, [pc, #76]	; (803f80c <_DummyGenerator+0x58>)
 803f7c0:	603b      	str	r3, [r7, #0]

    // Dummy Report Range
    if (!(*pRange)) {
 803f7c2:	687b      	ldr	r3, [r7, #4]
 803f7c4:	781b      	ldrb	r3, [r3, #0]
 803f7c6:	2b00      	cmp	r3, #0
 803f7c8:	d103      	bne.n	803f7d2 <_DummyGenerator+0x1e>
        *pRange = 255;
 803f7ca:	687b      	ldr	r3, [r7, #4]
 803f7cc:	22ff      	movs	r2, #255	; 0xff
 803f7ce:	701a      	strb	r2, [r3, #0]
 803f7d0:	e005      	b.n	803f7de <_DummyGenerator+0x2a>
    } else {
        (*pRange)--;
 803f7d2:	687b      	ldr	r3, [r7, #4]
 803f7d4:	781b      	ldrb	r3, [r3, #0]
 803f7d6:	3b01      	subs	r3, #1
 803f7d8:	b2da      	uxtb	r2, r3
 803f7da:	687b      	ldr	r3, [r7, #4]
 803f7dc:	701a      	strb	r2, [r3, #0]
    }

    // Dummy Report Efficiency
    if (*pEfficiency >= 255) {
 803f7de:	683b      	ldr	r3, [r7, #0]
 803f7e0:	781b      	ldrb	r3, [r3, #0]
 803f7e2:	2bff      	cmp	r3, #255	; 0xff
 803f7e4:	d103      	bne.n	803f7ee <_DummyGenerator+0x3a>
        *pEfficiency = 0;
 803f7e6:	683b      	ldr	r3, [r7, #0]
 803f7e8:	2200      	movs	r2, #0
 803f7ea:	701a      	strb	r2, [r3, #0]
    } else {
        (*pEfficiency)++;
    }
}
 803f7ec:	e005      	b.n	803f7fa <_DummyGenerator+0x46>
        (*pEfficiency)++;
 803f7ee:	683b      	ldr	r3, [r7, #0]
 803f7f0:	781b      	ldrb	r3, [r3, #0]
 803f7f2:	3301      	adds	r3, #1
 803f7f4:	b2da      	uxtb	r2, r3
 803f7f6:	683b      	ldr	r3, [r7, #0]
 803f7f8:	701a      	strb	r2, [r3, #0]
}
 803f7fa:	bf00      	nop
 803f7fc:	370c      	adds	r7, #12
 803f7fe:	46bd      	mov	sp, r7
 803f800:	f85d 7b04 	ldr.w	r7, [sp], #4
 803f804:	4770      	bx	lr
 803f806:	bf00      	nop
 803f808:	20000102 	.word	0x20000102
 803f80c:	20000103 	.word	0x20000103

0803f810 <_BitPosition>:

int8_t _BitPosition(uint64_t event_id) {
 803f810:	b4f0      	push	{r4, r5, r6, r7}
 803f812:	b084      	sub	sp, #16
 803f814:	af00      	add	r7, sp, #0
 803f816:	e9c7 0100 	strd	r0, r1, [r7]
    uint8_t pos = -1;
 803f81a:	22ff      	movs	r2, #255	; 0xff
 803f81c:	73fa      	strb	r2, [r7, #15]

    for (int8_t i = 0; i < 64; i++) {
 803f81e:	2200      	movs	r2, #0
 803f820:	73ba      	strb	r2, [r7, #14]
 803f822:	e025      	b.n	803f870 <_BitPosition+0x60>
        if (event_id & BIT(i)) {
 803f824:	f997 000e 	ldrsb.w	r0, [r7, #14]
 803f828:	e9d7 1200 	ldrd	r1, r2, [r7]
 803f82c:	f1c0 0620 	rsb	r6, r0, #32
 803f830:	f1a0 0520 	sub.w	r5, r0, #32
 803f834:	fa21 f300 	lsr.w	r3, r1, r0
 803f838:	fa02 f606 	lsl.w	r6, r2, r6
 803f83c:	4333      	orrs	r3, r6
 803f83e:	fa22 f505 	lsr.w	r5, r2, r5
 803f842:	432b      	orrs	r3, r5
 803f844:	fa22 f400 	lsr.w	r4, r2, r0
 803f848:	f04f 0101 	mov.w	r1, #1
 803f84c:	f04f 0200 	mov.w	r2, #0
 803f850:	ea01 0503 	and.w	r5, r1, r3
 803f854:	ea02 0604 	and.w	r6, r2, r4
 803f858:	ea55 0206 	orrs.w	r2, r5, r6
 803f85c:	d002      	beq.n	803f864 <_BitPosition+0x54>
            pos = i;
 803f85e:	7bbb      	ldrb	r3, [r7, #14]
 803f860:	73fb      	strb	r3, [r7, #15]
            break;
 803f862:	e009      	b.n	803f878 <_BitPosition+0x68>
    for (int8_t i = 0; i < 64; i++) {
 803f864:	f997 200e 	ldrsb.w	r2, [r7, #14]
 803f868:	b2d2      	uxtb	r2, r2
 803f86a:	3201      	adds	r2, #1
 803f86c:	b2d2      	uxtb	r2, r2
 803f86e:	73ba      	strb	r2, [r7, #14]
 803f870:	f997 200e 	ldrsb.w	r2, [r7, #14]
 803f874:	2a3f      	cmp	r2, #63	; 0x3f
 803f876:	ddd5      	ble.n	803f824 <_BitPosition+0x14>
        }
    }

    return pos;
 803f878:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 803f87c:	4618      	mov	r0, r3
 803f87e:	3710      	adds	r7, #16
 803f880:	46bd      	mov	sp, r7
 803f882:	bcf0      	pop	{r4, r5, r6, r7}
 803f884:	4770      	bx	lr
	...

0803f888 <__errno>:
 803f888:	4b01      	ldr	r3, [pc, #4]	; (803f890 <__errno+0x8>)
 803f88a:	6818      	ldr	r0, [r3, #0]
 803f88c:	4770      	bx	lr
 803f88e:	bf00      	nop
 803f890:	200002c4 	.word	0x200002c4

0803f894 <__libc_init_array>:
 803f894:	b570      	push	{r4, r5, r6, lr}
 803f896:	4e0d      	ldr	r6, [pc, #52]	; (803f8cc <__libc_init_array+0x38>)
 803f898:	4c0d      	ldr	r4, [pc, #52]	; (803f8d0 <__libc_init_array+0x3c>)
 803f89a:	1ba4      	subs	r4, r4, r6
 803f89c:	10a4      	asrs	r4, r4, #2
 803f89e:	2500      	movs	r5, #0
 803f8a0:	42a5      	cmp	r5, r4
 803f8a2:	d109      	bne.n	803f8b8 <__libc_init_array+0x24>
 803f8a4:	4e0b      	ldr	r6, [pc, #44]	; (803f8d4 <__libc_init_array+0x40>)
 803f8a6:	4c0c      	ldr	r4, [pc, #48]	; (803f8d8 <__libc_init_array+0x44>)
 803f8a8:	f003 fd9c 	bl	80433e4 <_init>
 803f8ac:	1ba4      	subs	r4, r4, r6
 803f8ae:	10a4      	asrs	r4, r4, #2
 803f8b0:	2500      	movs	r5, #0
 803f8b2:	42a5      	cmp	r5, r4
 803f8b4:	d105      	bne.n	803f8c2 <__libc_init_array+0x2e>
 803f8b6:	bd70      	pop	{r4, r5, r6, pc}
 803f8b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 803f8bc:	4798      	blx	r3
 803f8be:	3501      	adds	r5, #1
 803f8c0:	e7ee      	b.n	803f8a0 <__libc_init_array+0xc>
 803f8c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 803f8c6:	4798      	blx	r3
 803f8c8:	3501      	adds	r5, #1
 803f8ca:	e7f2      	b.n	803f8b2 <__libc_init_array+0x1e>
 803f8cc:	08056518 	.word	0x08056518
 803f8d0:	08056518 	.word	0x08056518
 803f8d4:	08056518 	.word	0x08056518
 803f8d8:	0805651c 	.word	0x0805651c

0803f8dc <memcmp>:
 803f8dc:	b530      	push	{r4, r5, lr}
 803f8de:	2400      	movs	r4, #0
 803f8e0:	42a2      	cmp	r2, r4
 803f8e2:	d101      	bne.n	803f8e8 <memcmp+0xc>
 803f8e4:	2000      	movs	r0, #0
 803f8e6:	e007      	b.n	803f8f8 <memcmp+0x1c>
 803f8e8:	5d03      	ldrb	r3, [r0, r4]
 803f8ea:	3401      	adds	r4, #1
 803f8ec:	190d      	adds	r5, r1, r4
 803f8ee:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 803f8f2:	42ab      	cmp	r3, r5
 803f8f4:	d0f4      	beq.n	803f8e0 <memcmp+0x4>
 803f8f6:	1b58      	subs	r0, r3, r5
 803f8f8:	bd30      	pop	{r4, r5, pc}

0803f8fa <memcpy>:
 803f8fa:	b510      	push	{r4, lr}
 803f8fc:	1e43      	subs	r3, r0, #1
 803f8fe:	440a      	add	r2, r1
 803f900:	4291      	cmp	r1, r2
 803f902:	d100      	bne.n	803f906 <memcpy+0xc>
 803f904:	bd10      	pop	{r4, pc}
 803f906:	f811 4b01 	ldrb.w	r4, [r1], #1
 803f90a:	f803 4f01 	strb.w	r4, [r3, #1]!
 803f90e:	e7f7      	b.n	803f900 <memcpy+0x6>

0803f910 <memset>:
 803f910:	4402      	add	r2, r0
 803f912:	4603      	mov	r3, r0
 803f914:	4293      	cmp	r3, r2
 803f916:	d100      	bne.n	803f91a <memset+0xa>
 803f918:	4770      	bx	lr
 803f91a:	f803 1b01 	strb.w	r1, [r3], #1
 803f91e:	e7f9      	b.n	803f914 <memset+0x4>

0803f920 <siprintf>:
 803f920:	b40e      	push	{r1, r2, r3}
 803f922:	b500      	push	{lr}
 803f924:	b09c      	sub	sp, #112	; 0x70
 803f926:	ab1d      	add	r3, sp, #116	; 0x74
 803f928:	9002      	str	r0, [sp, #8]
 803f92a:	9006      	str	r0, [sp, #24]
 803f92c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 803f930:	4809      	ldr	r0, [pc, #36]	; (803f958 <siprintf+0x38>)
 803f932:	9107      	str	r1, [sp, #28]
 803f934:	9104      	str	r1, [sp, #16]
 803f936:	4909      	ldr	r1, [pc, #36]	; (803f95c <siprintf+0x3c>)
 803f938:	f853 2b04 	ldr.w	r2, [r3], #4
 803f93c:	9105      	str	r1, [sp, #20]
 803f93e:	6800      	ldr	r0, [r0, #0]
 803f940:	9301      	str	r3, [sp, #4]
 803f942:	a902      	add	r1, sp, #8
 803f944:	f001 fe98 	bl	8041678 <_svfiprintf_r>
 803f948:	9b02      	ldr	r3, [sp, #8]
 803f94a:	2200      	movs	r2, #0
 803f94c:	701a      	strb	r2, [r3, #0]
 803f94e:	b01c      	add	sp, #112	; 0x70
 803f950:	f85d eb04 	ldr.w	lr, [sp], #4
 803f954:	b003      	add	sp, #12
 803f956:	4770      	bx	lr
 803f958:	200002c4 	.word	0x200002c4
 803f95c:	ffff0208 	.word	0xffff0208

0803f960 <strncmp>:
 803f960:	b510      	push	{r4, lr}
 803f962:	b16a      	cbz	r2, 803f980 <strncmp+0x20>
 803f964:	3901      	subs	r1, #1
 803f966:	1884      	adds	r4, r0, r2
 803f968:	f810 3b01 	ldrb.w	r3, [r0], #1
 803f96c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 803f970:	4293      	cmp	r3, r2
 803f972:	d103      	bne.n	803f97c <strncmp+0x1c>
 803f974:	42a0      	cmp	r0, r4
 803f976:	d001      	beq.n	803f97c <strncmp+0x1c>
 803f978:	2b00      	cmp	r3, #0
 803f97a:	d1f5      	bne.n	803f968 <strncmp+0x8>
 803f97c:	1a98      	subs	r0, r3, r2
 803f97e:	bd10      	pop	{r4, pc}
 803f980:	4610      	mov	r0, r2
 803f982:	e7fc      	b.n	803f97e <strncmp+0x1e>

0803f984 <strstr>:
 803f984:	b5f0      	push	{r4, r5, r6, r7, lr}
 803f986:	7803      	ldrb	r3, [r0, #0]
 803f988:	b17b      	cbz	r3, 803f9aa <strstr+0x26>
 803f98a:	4604      	mov	r4, r0
 803f98c:	7823      	ldrb	r3, [r4, #0]
 803f98e:	4620      	mov	r0, r4
 803f990:	1c66      	adds	r6, r4, #1
 803f992:	b17b      	cbz	r3, 803f9b4 <strstr+0x30>
 803f994:	1e4a      	subs	r2, r1, #1
 803f996:	1e63      	subs	r3, r4, #1
 803f998:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 803f99c:	b14d      	cbz	r5, 803f9b2 <strstr+0x2e>
 803f99e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 803f9a2:	42af      	cmp	r7, r5
 803f9a4:	4634      	mov	r4, r6
 803f9a6:	d0f7      	beq.n	803f998 <strstr+0x14>
 803f9a8:	e7f0      	b.n	803f98c <strstr+0x8>
 803f9aa:	780b      	ldrb	r3, [r1, #0]
 803f9ac:	2b00      	cmp	r3, #0
 803f9ae:	bf18      	it	ne
 803f9b0:	2000      	movne	r0, #0
 803f9b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 803f9b4:	4618      	mov	r0, r3
 803f9b6:	e7fc      	b.n	803f9b2 <strstr+0x2e>

0803f9b8 <sulp>:
 803f9b8:	b570      	push	{r4, r5, r6, lr}
 803f9ba:	4604      	mov	r4, r0
 803f9bc:	460d      	mov	r5, r1
 803f9be:	ec45 4b10 	vmov	d0, r4, r5
 803f9c2:	4616      	mov	r6, r2
 803f9c4:	f001 fc62 	bl	804128c <__ulp>
 803f9c8:	ec51 0b10 	vmov	r0, r1, d0
 803f9cc:	b17e      	cbz	r6, 803f9ee <sulp+0x36>
 803f9ce:	f3c5 530a 	ubfx	r3, r5, #20, #11
 803f9d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 803f9d6:	2b00      	cmp	r3, #0
 803f9d8:	dd09      	ble.n	803f9ee <sulp+0x36>
 803f9da:	051b      	lsls	r3, r3, #20
 803f9dc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 803f9e0:	2400      	movs	r4, #0
 803f9e2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 803f9e6:	4622      	mov	r2, r4
 803f9e8:	462b      	mov	r3, r5
 803f9ea:	f7e0 fe3d 	bl	8020668 <__aeabi_dmul>
 803f9ee:	bd70      	pop	{r4, r5, r6, pc}

0803f9f0 <_strtod_l>:
 803f9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803f9f4:	461f      	mov	r7, r3
 803f9f6:	b0a1      	sub	sp, #132	; 0x84
 803f9f8:	2300      	movs	r3, #0
 803f9fa:	4681      	mov	r9, r0
 803f9fc:	4638      	mov	r0, r7
 803f9fe:	460e      	mov	r6, r1
 803fa00:	9217      	str	r2, [sp, #92]	; 0x5c
 803fa02:	931c      	str	r3, [sp, #112]	; 0x70
 803fa04:	f001 f962 	bl	8040ccc <__localeconv_l>
 803fa08:	4680      	mov	r8, r0
 803fa0a:	6800      	ldr	r0, [r0, #0]
 803fa0c:	f7e0 fc12 	bl	8020234 <strlen>
 803fa10:	f04f 0a00 	mov.w	sl, #0
 803fa14:	4604      	mov	r4, r0
 803fa16:	f04f 0b00 	mov.w	fp, #0
 803fa1a:	961b      	str	r6, [sp, #108]	; 0x6c
 803fa1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 803fa1e:	781a      	ldrb	r2, [r3, #0]
 803fa20:	2a0d      	cmp	r2, #13
 803fa22:	d832      	bhi.n	803fa8a <_strtod_l+0x9a>
 803fa24:	2a09      	cmp	r2, #9
 803fa26:	d236      	bcs.n	803fa96 <_strtod_l+0xa6>
 803fa28:	2a00      	cmp	r2, #0
 803fa2a:	d03e      	beq.n	803faaa <_strtod_l+0xba>
 803fa2c:	2300      	movs	r3, #0
 803fa2e:	930d      	str	r3, [sp, #52]	; 0x34
 803fa30:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 803fa32:	782b      	ldrb	r3, [r5, #0]
 803fa34:	2b30      	cmp	r3, #48	; 0x30
 803fa36:	f040 80ac 	bne.w	803fb92 <_strtod_l+0x1a2>
 803fa3a:	786b      	ldrb	r3, [r5, #1]
 803fa3c:	2b58      	cmp	r3, #88	; 0x58
 803fa3e:	d001      	beq.n	803fa44 <_strtod_l+0x54>
 803fa40:	2b78      	cmp	r3, #120	; 0x78
 803fa42:	d167      	bne.n	803fb14 <_strtod_l+0x124>
 803fa44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 803fa46:	9301      	str	r3, [sp, #4]
 803fa48:	ab1c      	add	r3, sp, #112	; 0x70
 803fa4a:	9300      	str	r3, [sp, #0]
 803fa4c:	9702      	str	r7, [sp, #8]
 803fa4e:	ab1d      	add	r3, sp, #116	; 0x74
 803fa50:	4a88      	ldr	r2, [pc, #544]	; (803fc74 <_strtod_l+0x284>)
 803fa52:	a91b      	add	r1, sp, #108	; 0x6c
 803fa54:	4648      	mov	r0, r9
 803fa56:	f000 fe62 	bl	804071e <__gethex>
 803fa5a:	f010 0407 	ands.w	r4, r0, #7
 803fa5e:	4606      	mov	r6, r0
 803fa60:	d005      	beq.n	803fa6e <_strtod_l+0x7e>
 803fa62:	2c06      	cmp	r4, #6
 803fa64:	d12b      	bne.n	803fabe <_strtod_l+0xce>
 803fa66:	3501      	adds	r5, #1
 803fa68:	2300      	movs	r3, #0
 803fa6a:	951b      	str	r5, [sp, #108]	; 0x6c
 803fa6c:	930d      	str	r3, [sp, #52]	; 0x34
 803fa6e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 803fa70:	2b00      	cmp	r3, #0
 803fa72:	f040 859a 	bne.w	80405aa <_strtod_l+0xbba>
 803fa76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 803fa78:	b1e3      	cbz	r3, 803fab4 <_strtod_l+0xc4>
 803fa7a:	4652      	mov	r2, sl
 803fa7c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 803fa80:	ec43 2b10 	vmov	d0, r2, r3
 803fa84:	b021      	add	sp, #132	; 0x84
 803fa86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803fa8a:	2a2b      	cmp	r2, #43	; 0x2b
 803fa8c:	d015      	beq.n	803faba <_strtod_l+0xca>
 803fa8e:	2a2d      	cmp	r2, #45	; 0x2d
 803fa90:	d004      	beq.n	803fa9c <_strtod_l+0xac>
 803fa92:	2a20      	cmp	r2, #32
 803fa94:	d1ca      	bne.n	803fa2c <_strtod_l+0x3c>
 803fa96:	3301      	adds	r3, #1
 803fa98:	931b      	str	r3, [sp, #108]	; 0x6c
 803fa9a:	e7bf      	b.n	803fa1c <_strtod_l+0x2c>
 803fa9c:	2201      	movs	r2, #1
 803fa9e:	920d      	str	r2, [sp, #52]	; 0x34
 803faa0:	1c5a      	adds	r2, r3, #1
 803faa2:	921b      	str	r2, [sp, #108]	; 0x6c
 803faa4:	785b      	ldrb	r3, [r3, #1]
 803faa6:	2b00      	cmp	r3, #0
 803faa8:	d1c2      	bne.n	803fa30 <_strtod_l+0x40>
 803faaa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 803faac:	961b      	str	r6, [sp, #108]	; 0x6c
 803faae:	2b00      	cmp	r3, #0
 803fab0:	f040 8579 	bne.w	80405a6 <_strtod_l+0xbb6>
 803fab4:	4652      	mov	r2, sl
 803fab6:	465b      	mov	r3, fp
 803fab8:	e7e2      	b.n	803fa80 <_strtod_l+0x90>
 803faba:	2200      	movs	r2, #0
 803fabc:	e7ef      	b.n	803fa9e <_strtod_l+0xae>
 803fabe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 803fac0:	b13a      	cbz	r2, 803fad2 <_strtod_l+0xe2>
 803fac2:	2135      	movs	r1, #53	; 0x35
 803fac4:	a81e      	add	r0, sp, #120	; 0x78
 803fac6:	f001 fcd9 	bl	804147c <__copybits>
 803faca:	991c      	ldr	r1, [sp, #112]	; 0x70
 803facc:	4648      	mov	r0, r9
 803face:	f001 f945 	bl	8040d5c <_Bfree>
 803fad2:	3c01      	subs	r4, #1
 803fad4:	2c04      	cmp	r4, #4
 803fad6:	d806      	bhi.n	803fae6 <_strtod_l+0xf6>
 803fad8:	e8df f004 	tbb	[pc, r4]
 803fadc:	1714030a 	.word	0x1714030a
 803fae0:	0a          	.byte	0x0a
 803fae1:	00          	.byte	0x00
 803fae2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 803fae6:	0730      	lsls	r0, r6, #28
 803fae8:	d5c1      	bpl.n	803fa6e <_strtod_l+0x7e>
 803faea:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 803faee:	e7be      	b.n	803fa6e <_strtod_l+0x7e>
 803faf0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 803faf4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 803faf6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 803fafa:	f202 4233 	addw	r2, r2, #1075	; 0x433
 803fafe:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 803fb02:	e7f0      	b.n	803fae6 <_strtod_l+0xf6>
 803fb04:	f8df b170 	ldr.w	fp, [pc, #368]	; 803fc78 <_strtod_l+0x288>
 803fb08:	e7ed      	b.n	803fae6 <_strtod_l+0xf6>
 803fb0a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 803fb0e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 803fb12:	e7e8      	b.n	803fae6 <_strtod_l+0xf6>
 803fb14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 803fb16:	1c5a      	adds	r2, r3, #1
 803fb18:	921b      	str	r2, [sp, #108]	; 0x6c
 803fb1a:	785b      	ldrb	r3, [r3, #1]
 803fb1c:	2b30      	cmp	r3, #48	; 0x30
 803fb1e:	d0f9      	beq.n	803fb14 <_strtod_l+0x124>
 803fb20:	2b00      	cmp	r3, #0
 803fb22:	d0a4      	beq.n	803fa6e <_strtod_l+0x7e>
 803fb24:	2301      	movs	r3, #1
 803fb26:	2500      	movs	r5, #0
 803fb28:	9306      	str	r3, [sp, #24]
 803fb2a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 803fb2c:	9308      	str	r3, [sp, #32]
 803fb2e:	9507      	str	r5, [sp, #28]
 803fb30:	9505      	str	r5, [sp, #20]
 803fb32:	220a      	movs	r2, #10
 803fb34:	981b      	ldr	r0, [sp, #108]	; 0x6c
 803fb36:	7807      	ldrb	r7, [r0, #0]
 803fb38:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 803fb3c:	b2d9      	uxtb	r1, r3
 803fb3e:	2909      	cmp	r1, #9
 803fb40:	d929      	bls.n	803fb96 <_strtod_l+0x1a6>
 803fb42:	4622      	mov	r2, r4
 803fb44:	f8d8 1000 	ldr.w	r1, [r8]
 803fb48:	f7ff ff0a 	bl	803f960 <strncmp>
 803fb4c:	2800      	cmp	r0, #0
 803fb4e:	d031      	beq.n	803fbb4 <_strtod_l+0x1c4>
 803fb50:	2000      	movs	r0, #0
 803fb52:	9c05      	ldr	r4, [sp, #20]
 803fb54:	9004      	str	r0, [sp, #16]
 803fb56:	463b      	mov	r3, r7
 803fb58:	4602      	mov	r2, r0
 803fb5a:	2b65      	cmp	r3, #101	; 0x65
 803fb5c:	d001      	beq.n	803fb62 <_strtod_l+0x172>
 803fb5e:	2b45      	cmp	r3, #69	; 0x45
 803fb60:	d114      	bne.n	803fb8c <_strtod_l+0x19c>
 803fb62:	b924      	cbnz	r4, 803fb6e <_strtod_l+0x17e>
 803fb64:	b910      	cbnz	r0, 803fb6c <_strtod_l+0x17c>
 803fb66:	9b06      	ldr	r3, [sp, #24]
 803fb68:	2b00      	cmp	r3, #0
 803fb6a:	d09e      	beq.n	803faaa <_strtod_l+0xba>
 803fb6c:	2400      	movs	r4, #0
 803fb6e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 803fb70:	1c73      	adds	r3, r6, #1
 803fb72:	931b      	str	r3, [sp, #108]	; 0x6c
 803fb74:	7873      	ldrb	r3, [r6, #1]
 803fb76:	2b2b      	cmp	r3, #43	; 0x2b
 803fb78:	d078      	beq.n	803fc6c <_strtod_l+0x27c>
 803fb7a:	2b2d      	cmp	r3, #45	; 0x2d
 803fb7c:	d070      	beq.n	803fc60 <_strtod_l+0x270>
 803fb7e:	f04f 0c00 	mov.w	ip, #0
 803fb82:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 803fb86:	2f09      	cmp	r7, #9
 803fb88:	d97c      	bls.n	803fc84 <_strtod_l+0x294>
 803fb8a:	961b      	str	r6, [sp, #108]	; 0x6c
 803fb8c:	f04f 0e00 	mov.w	lr, #0
 803fb90:	e09a      	b.n	803fcc8 <_strtod_l+0x2d8>
 803fb92:	2300      	movs	r3, #0
 803fb94:	e7c7      	b.n	803fb26 <_strtod_l+0x136>
 803fb96:	9905      	ldr	r1, [sp, #20]
 803fb98:	2908      	cmp	r1, #8
 803fb9a:	bfdd      	ittte	le
 803fb9c:	9907      	ldrle	r1, [sp, #28]
 803fb9e:	fb02 3301 	mlale	r3, r2, r1, r3
 803fba2:	9307      	strle	r3, [sp, #28]
 803fba4:	fb02 3505 	mlagt	r5, r2, r5, r3
 803fba8:	9b05      	ldr	r3, [sp, #20]
 803fbaa:	3001      	adds	r0, #1
 803fbac:	3301      	adds	r3, #1
 803fbae:	9305      	str	r3, [sp, #20]
 803fbb0:	901b      	str	r0, [sp, #108]	; 0x6c
 803fbb2:	e7bf      	b.n	803fb34 <_strtod_l+0x144>
 803fbb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 803fbb6:	191a      	adds	r2, r3, r4
 803fbb8:	921b      	str	r2, [sp, #108]	; 0x6c
 803fbba:	9a05      	ldr	r2, [sp, #20]
 803fbbc:	5d1b      	ldrb	r3, [r3, r4]
 803fbbe:	2a00      	cmp	r2, #0
 803fbc0:	d037      	beq.n	803fc32 <_strtod_l+0x242>
 803fbc2:	9c05      	ldr	r4, [sp, #20]
 803fbc4:	4602      	mov	r2, r0
 803fbc6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 803fbca:	2909      	cmp	r1, #9
 803fbcc:	d913      	bls.n	803fbf6 <_strtod_l+0x206>
 803fbce:	2101      	movs	r1, #1
 803fbd0:	9104      	str	r1, [sp, #16]
 803fbd2:	e7c2      	b.n	803fb5a <_strtod_l+0x16a>
 803fbd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 803fbd6:	1c5a      	adds	r2, r3, #1
 803fbd8:	921b      	str	r2, [sp, #108]	; 0x6c
 803fbda:	785b      	ldrb	r3, [r3, #1]
 803fbdc:	3001      	adds	r0, #1
 803fbde:	2b30      	cmp	r3, #48	; 0x30
 803fbe0:	d0f8      	beq.n	803fbd4 <_strtod_l+0x1e4>
 803fbe2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 803fbe6:	2a08      	cmp	r2, #8
 803fbe8:	f200 84e4 	bhi.w	80405b4 <_strtod_l+0xbc4>
 803fbec:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 803fbee:	9208      	str	r2, [sp, #32]
 803fbf0:	4602      	mov	r2, r0
 803fbf2:	2000      	movs	r0, #0
 803fbf4:	4604      	mov	r4, r0
 803fbf6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 803fbfa:	f100 0101 	add.w	r1, r0, #1
 803fbfe:	d012      	beq.n	803fc26 <_strtod_l+0x236>
 803fc00:	440a      	add	r2, r1
 803fc02:	eb00 0c04 	add.w	ip, r0, r4
 803fc06:	4621      	mov	r1, r4
 803fc08:	270a      	movs	r7, #10
 803fc0a:	458c      	cmp	ip, r1
 803fc0c:	d113      	bne.n	803fc36 <_strtod_l+0x246>
 803fc0e:	1821      	adds	r1, r4, r0
 803fc10:	2908      	cmp	r1, #8
 803fc12:	f104 0401 	add.w	r4, r4, #1
 803fc16:	4404      	add	r4, r0
 803fc18:	dc19      	bgt.n	803fc4e <_strtod_l+0x25e>
 803fc1a:	9b07      	ldr	r3, [sp, #28]
 803fc1c:	210a      	movs	r1, #10
 803fc1e:	fb01 e303 	mla	r3, r1, r3, lr
 803fc22:	9307      	str	r3, [sp, #28]
 803fc24:	2100      	movs	r1, #0
 803fc26:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 803fc28:	1c58      	adds	r0, r3, #1
 803fc2a:	901b      	str	r0, [sp, #108]	; 0x6c
 803fc2c:	785b      	ldrb	r3, [r3, #1]
 803fc2e:	4608      	mov	r0, r1
 803fc30:	e7c9      	b.n	803fbc6 <_strtod_l+0x1d6>
 803fc32:	9805      	ldr	r0, [sp, #20]
 803fc34:	e7d3      	b.n	803fbde <_strtod_l+0x1ee>
 803fc36:	2908      	cmp	r1, #8
 803fc38:	f101 0101 	add.w	r1, r1, #1
 803fc3c:	dc03      	bgt.n	803fc46 <_strtod_l+0x256>
 803fc3e:	9b07      	ldr	r3, [sp, #28]
 803fc40:	437b      	muls	r3, r7
 803fc42:	9307      	str	r3, [sp, #28]
 803fc44:	e7e1      	b.n	803fc0a <_strtod_l+0x21a>
 803fc46:	2910      	cmp	r1, #16
 803fc48:	bfd8      	it	le
 803fc4a:	437d      	mulle	r5, r7
 803fc4c:	e7dd      	b.n	803fc0a <_strtod_l+0x21a>
 803fc4e:	2c10      	cmp	r4, #16
 803fc50:	bfdc      	itt	le
 803fc52:	210a      	movle	r1, #10
 803fc54:	fb01 e505 	mlale	r5, r1, r5, lr
 803fc58:	e7e4      	b.n	803fc24 <_strtod_l+0x234>
 803fc5a:	2301      	movs	r3, #1
 803fc5c:	9304      	str	r3, [sp, #16]
 803fc5e:	e781      	b.n	803fb64 <_strtod_l+0x174>
 803fc60:	f04f 0c01 	mov.w	ip, #1
 803fc64:	1cb3      	adds	r3, r6, #2
 803fc66:	931b      	str	r3, [sp, #108]	; 0x6c
 803fc68:	78b3      	ldrb	r3, [r6, #2]
 803fc6a:	e78a      	b.n	803fb82 <_strtod_l+0x192>
 803fc6c:	f04f 0c00 	mov.w	ip, #0
 803fc70:	e7f8      	b.n	803fc64 <_strtod_l+0x274>
 803fc72:	bf00      	nop
 803fc74:	0805622c 	.word	0x0805622c
 803fc78:	7ff00000 	.word	0x7ff00000
 803fc7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 803fc7e:	1c5f      	adds	r7, r3, #1
 803fc80:	971b      	str	r7, [sp, #108]	; 0x6c
 803fc82:	785b      	ldrb	r3, [r3, #1]
 803fc84:	2b30      	cmp	r3, #48	; 0x30
 803fc86:	d0f9      	beq.n	803fc7c <_strtod_l+0x28c>
 803fc88:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 803fc8c:	2f08      	cmp	r7, #8
 803fc8e:	f63f af7d 	bhi.w	803fb8c <_strtod_l+0x19c>
 803fc92:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 803fc96:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 803fc98:	930a      	str	r3, [sp, #40]	; 0x28
 803fc9a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 803fc9c:	1c5f      	adds	r7, r3, #1
 803fc9e:	971b      	str	r7, [sp, #108]	; 0x6c
 803fca0:	785b      	ldrb	r3, [r3, #1]
 803fca2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 803fca6:	f1b8 0f09 	cmp.w	r8, #9
 803fcaa:	d937      	bls.n	803fd1c <_strtod_l+0x32c>
 803fcac:	990a      	ldr	r1, [sp, #40]	; 0x28
 803fcae:	1a7f      	subs	r7, r7, r1
 803fcb0:	2f08      	cmp	r7, #8
 803fcb2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 803fcb6:	dc37      	bgt.n	803fd28 <_strtod_l+0x338>
 803fcb8:	45be      	cmp	lr, r7
 803fcba:	bfa8      	it	ge
 803fcbc:	46be      	movge	lr, r7
 803fcbe:	f1bc 0f00 	cmp.w	ip, #0
 803fcc2:	d001      	beq.n	803fcc8 <_strtod_l+0x2d8>
 803fcc4:	f1ce 0e00 	rsb	lr, lr, #0
 803fcc8:	2c00      	cmp	r4, #0
 803fcca:	d151      	bne.n	803fd70 <_strtod_l+0x380>
 803fccc:	2800      	cmp	r0, #0
 803fcce:	f47f aece 	bne.w	803fa6e <_strtod_l+0x7e>
 803fcd2:	9a06      	ldr	r2, [sp, #24]
 803fcd4:	2a00      	cmp	r2, #0
 803fcd6:	f47f aeca 	bne.w	803fa6e <_strtod_l+0x7e>
 803fcda:	9a04      	ldr	r2, [sp, #16]
 803fcdc:	2a00      	cmp	r2, #0
 803fcde:	f47f aee4 	bne.w	803faaa <_strtod_l+0xba>
 803fce2:	2b4e      	cmp	r3, #78	; 0x4e
 803fce4:	d027      	beq.n	803fd36 <_strtod_l+0x346>
 803fce6:	dc21      	bgt.n	803fd2c <_strtod_l+0x33c>
 803fce8:	2b49      	cmp	r3, #73	; 0x49
 803fcea:	f47f aede 	bne.w	803faaa <_strtod_l+0xba>
 803fcee:	49a0      	ldr	r1, [pc, #640]	; (803ff70 <_strtod_l+0x580>)
 803fcf0:	a81b      	add	r0, sp, #108	; 0x6c
 803fcf2:	f000 ff47 	bl	8040b84 <__match>
 803fcf6:	2800      	cmp	r0, #0
 803fcf8:	f43f aed7 	beq.w	803faaa <_strtod_l+0xba>
 803fcfc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 803fcfe:	499d      	ldr	r1, [pc, #628]	; (803ff74 <_strtod_l+0x584>)
 803fd00:	3b01      	subs	r3, #1
 803fd02:	a81b      	add	r0, sp, #108	; 0x6c
 803fd04:	931b      	str	r3, [sp, #108]	; 0x6c
 803fd06:	f000 ff3d 	bl	8040b84 <__match>
 803fd0a:	b910      	cbnz	r0, 803fd12 <_strtod_l+0x322>
 803fd0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 803fd0e:	3301      	adds	r3, #1
 803fd10:	931b      	str	r3, [sp, #108]	; 0x6c
 803fd12:	f8df b274 	ldr.w	fp, [pc, #628]	; 803ff88 <_strtod_l+0x598>
 803fd16:	f04f 0a00 	mov.w	sl, #0
 803fd1a:	e6a8      	b.n	803fa6e <_strtod_l+0x7e>
 803fd1c:	210a      	movs	r1, #10
 803fd1e:	fb01 3e0e 	mla	lr, r1, lr, r3
 803fd22:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 803fd26:	e7b8      	b.n	803fc9a <_strtod_l+0x2aa>
 803fd28:	46be      	mov	lr, r7
 803fd2a:	e7c8      	b.n	803fcbe <_strtod_l+0x2ce>
 803fd2c:	2b69      	cmp	r3, #105	; 0x69
 803fd2e:	d0de      	beq.n	803fcee <_strtod_l+0x2fe>
 803fd30:	2b6e      	cmp	r3, #110	; 0x6e
 803fd32:	f47f aeba 	bne.w	803faaa <_strtod_l+0xba>
 803fd36:	4990      	ldr	r1, [pc, #576]	; (803ff78 <_strtod_l+0x588>)
 803fd38:	a81b      	add	r0, sp, #108	; 0x6c
 803fd3a:	f000 ff23 	bl	8040b84 <__match>
 803fd3e:	2800      	cmp	r0, #0
 803fd40:	f43f aeb3 	beq.w	803faaa <_strtod_l+0xba>
 803fd44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 803fd46:	781b      	ldrb	r3, [r3, #0]
 803fd48:	2b28      	cmp	r3, #40	; 0x28
 803fd4a:	d10e      	bne.n	803fd6a <_strtod_l+0x37a>
 803fd4c:	aa1e      	add	r2, sp, #120	; 0x78
 803fd4e:	498b      	ldr	r1, [pc, #556]	; (803ff7c <_strtod_l+0x58c>)
 803fd50:	a81b      	add	r0, sp, #108	; 0x6c
 803fd52:	f000 ff2b 	bl	8040bac <__hexnan>
 803fd56:	2805      	cmp	r0, #5
 803fd58:	d107      	bne.n	803fd6a <_strtod_l+0x37a>
 803fd5a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 803fd5c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 803fd60:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 803fd64:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 803fd68:	e681      	b.n	803fa6e <_strtod_l+0x7e>
 803fd6a:	f8df b224 	ldr.w	fp, [pc, #548]	; 803ff90 <_strtod_l+0x5a0>
 803fd6e:	e7d2      	b.n	803fd16 <_strtod_l+0x326>
 803fd70:	ebae 0302 	sub.w	r3, lr, r2
 803fd74:	9306      	str	r3, [sp, #24]
 803fd76:	9b05      	ldr	r3, [sp, #20]
 803fd78:	9807      	ldr	r0, [sp, #28]
 803fd7a:	2b00      	cmp	r3, #0
 803fd7c:	bf08      	it	eq
 803fd7e:	4623      	moveq	r3, r4
 803fd80:	2c10      	cmp	r4, #16
 803fd82:	9305      	str	r3, [sp, #20]
 803fd84:	46a0      	mov	r8, r4
 803fd86:	bfa8      	it	ge
 803fd88:	f04f 0810 	movge.w	r8, #16
 803fd8c:	f7e0 fbf2 	bl	8020574 <__aeabi_ui2d>
 803fd90:	2c09      	cmp	r4, #9
 803fd92:	4682      	mov	sl, r0
 803fd94:	468b      	mov	fp, r1
 803fd96:	dc13      	bgt.n	803fdc0 <_strtod_l+0x3d0>
 803fd98:	9b06      	ldr	r3, [sp, #24]
 803fd9a:	2b00      	cmp	r3, #0
 803fd9c:	f43f ae67 	beq.w	803fa6e <_strtod_l+0x7e>
 803fda0:	9b06      	ldr	r3, [sp, #24]
 803fda2:	dd7a      	ble.n	803fe9a <_strtod_l+0x4aa>
 803fda4:	2b16      	cmp	r3, #22
 803fda6:	dc61      	bgt.n	803fe6c <_strtod_l+0x47c>
 803fda8:	4a75      	ldr	r2, [pc, #468]	; (803ff80 <_strtod_l+0x590>)
 803fdaa:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 803fdae:	e9de 0100 	ldrd	r0, r1, [lr]
 803fdb2:	4652      	mov	r2, sl
 803fdb4:	465b      	mov	r3, fp
 803fdb6:	f7e0 fc57 	bl	8020668 <__aeabi_dmul>
 803fdba:	4682      	mov	sl, r0
 803fdbc:	468b      	mov	fp, r1
 803fdbe:	e656      	b.n	803fa6e <_strtod_l+0x7e>
 803fdc0:	4b6f      	ldr	r3, [pc, #444]	; (803ff80 <_strtod_l+0x590>)
 803fdc2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 803fdc6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 803fdca:	f7e0 fc4d 	bl	8020668 <__aeabi_dmul>
 803fdce:	4606      	mov	r6, r0
 803fdd0:	4628      	mov	r0, r5
 803fdd2:	460f      	mov	r7, r1
 803fdd4:	f7e0 fbce 	bl	8020574 <__aeabi_ui2d>
 803fdd8:	4602      	mov	r2, r0
 803fdda:	460b      	mov	r3, r1
 803fddc:	4630      	mov	r0, r6
 803fdde:	4639      	mov	r1, r7
 803fde0:	f7e0 fa8c 	bl	80202fc <__adddf3>
 803fde4:	2c0f      	cmp	r4, #15
 803fde6:	4682      	mov	sl, r0
 803fde8:	468b      	mov	fp, r1
 803fdea:	ddd5      	ble.n	803fd98 <_strtod_l+0x3a8>
 803fdec:	9b06      	ldr	r3, [sp, #24]
 803fdee:	eba4 0808 	sub.w	r8, r4, r8
 803fdf2:	4498      	add	r8, r3
 803fdf4:	f1b8 0f00 	cmp.w	r8, #0
 803fdf8:	f340 8096 	ble.w	803ff28 <_strtod_l+0x538>
 803fdfc:	f018 030f 	ands.w	r3, r8, #15
 803fe00:	d00a      	beq.n	803fe18 <_strtod_l+0x428>
 803fe02:	495f      	ldr	r1, [pc, #380]	; (803ff80 <_strtod_l+0x590>)
 803fe04:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 803fe08:	4652      	mov	r2, sl
 803fe0a:	465b      	mov	r3, fp
 803fe0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 803fe10:	f7e0 fc2a 	bl	8020668 <__aeabi_dmul>
 803fe14:	4682      	mov	sl, r0
 803fe16:	468b      	mov	fp, r1
 803fe18:	f038 080f 	bics.w	r8, r8, #15
 803fe1c:	d073      	beq.n	803ff06 <_strtod_l+0x516>
 803fe1e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 803fe22:	dd47      	ble.n	803feb4 <_strtod_l+0x4c4>
 803fe24:	2400      	movs	r4, #0
 803fe26:	46a0      	mov	r8, r4
 803fe28:	9407      	str	r4, [sp, #28]
 803fe2a:	9405      	str	r4, [sp, #20]
 803fe2c:	2322      	movs	r3, #34	; 0x22
 803fe2e:	f8df b158 	ldr.w	fp, [pc, #344]	; 803ff88 <_strtod_l+0x598>
 803fe32:	f8c9 3000 	str.w	r3, [r9]
 803fe36:	f04f 0a00 	mov.w	sl, #0
 803fe3a:	9b07      	ldr	r3, [sp, #28]
 803fe3c:	2b00      	cmp	r3, #0
 803fe3e:	f43f ae16 	beq.w	803fa6e <_strtod_l+0x7e>
 803fe42:	991c      	ldr	r1, [sp, #112]	; 0x70
 803fe44:	4648      	mov	r0, r9
 803fe46:	f000 ff89 	bl	8040d5c <_Bfree>
 803fe4a:	9905      	ldr	r1, [sp, #20]
 803fe4c:	4648      	mov	r0, r9
 803fe4e:	f000 ff85 	bl	8040d5c <_Bfree>
 803fe52:	4641      	mov	r1, r8
 803fe54:	4648      	mov	r0, r9
 803fe56:	f000 ff81 	bl	8040d5c <_Bfree>
 803fe5a:	9907      	ldr	r1, [sp, #28]
 803fe5c:	4648      	mov	r0, r9
 803fe5e:	f000 ff7d 	bl	8040d5c <_Bfree>
 803fe62:	4621      	mov	r1, r4
 803fe64:	4648      	mov	r0, r9
 803fe66:	f000 ff79 	bl	8040d5c <_Bfree>
 803fe6a:	e600      	b.n	803fa6e <_strtod_l+0x7e>
 803fe6c:	9a06      	ldr	r2, [sp, #24]
 803fe6e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 803fe72:	4293      	cmp	r3, r2
 803fe74:	dbba      	blt.n	803fdec <_strtod_l+0x3fc>
 803fe76:	4d42      	ldr	r5, [pc, #264]	; (803ff80 <_strtod_l+0x590>)
 803fe78:	f1c4 040f 	rsb	r4, r4, #15
 803fe7c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 803fe80:	4652      	mov	r2, sl
 803fe82:	465b      	mov	r3, fp
 803fe84:	e9d1 0100 	ldrd	r0, r1, [r1]
 803fe88:	f7e0 fbee 	bl	8020668 <__aeabi_dmul>
 803fe8c:	9b06      	ldr	r3, [sp, #24]
 803fe8e:	1b1c      	subs	r4, r3, r4
 803fe90:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 803fe94:	e9d5 2300 	ldrd	r2, r3, [r5]
 803fe98:	e78d      	b.n	803fdb6 <_strtod_l+0x3c6>
 803fe9a:	f113 0f16 	cmn.w	r3, #22
 803fe9e:	dba5      	blt.n	803fdec <_strtod_l+0x3fc>
 803fea0:	4a37      	ldr	r2, [pc, #220]	; (803ff80 <_strtod_l+0x590>)
 803fea2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 803fea6:	e9d2 2300 	ldrd	r2, r3, [r2]
 803feaa:	4650      	mov	r0, sl
 803feac:	4659      	mov	r1, fp
 803feae:	f7e0 fd05 	bl	80208bc <__aeabi_ddiv>
 803feb2:	e782      	b.n	803fdba <_strtod_l+0x3ca>
 803feb4:	2300      	movs	r3, #0
 803feb6:	4e33      	ldr	r6, [pc, #204]	; (803ff84 <_strtod_l+0x594>)
 803feb8:	ea4f 1828 	mov.w	r8, r8, asr #4
 803febc:	4650      	mov	r0, sl
 803febe:	4659      	mov	r1, fp
 803fec0:	461d      	mov	r5, r3
 803fec2:	f1b8 0f01 	cmp.w	r8, #1
 803fec6:	dc21      	bgt.n	803ff0c <_strtod_l+0x51c>
 803fec8:	b10b      	cbz	r3, 803fece <_strtod_l+0x4de>
 803feca:	4682      	mov	sl, r0
 803fecc:	468b      	mov	fp, r1
 803fece:	4b2d      	ldr	r3, [pc, #180]	; (803ff84 <_strtod_l+0x594>)
 803fed0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 803fed4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 803fed8:	4652      	mov	r2, sl
 803feda:	465b      	mov	r3, fp
 803fedc:	e9d5 0100 	ldrd	r0, r1, [r5]
 803fee0:	f7e0 fbc2 	bl	8020668 <__aeabi_dmul>
 803fee4:	4b28      	ldr	r3, [pc, #160]	; (803ff88 <_strtod_l+0x598>)
 803fee6:	460a      	mov	r2, r1
 803fee8:	400b      	ands	r3, r1
 803feea:	4928      	ldr	r1, [pc, #160]	; (803ff8c <_strtod_l+0x59c>)
 803feec:	428b      	cmp	r3, r1
 803feee:	4682      	mov	sl, r0
 803fef0:	d898      	bhi.n	803fe24 <_strtod_l+0x434>
 803fef2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 803fef6:	428b      	cmp	r3, r1
 803fef8:	bf86      	itte	hi
 803fefa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 803ff94 <_strtod_l+0x5a4>
 803fefe:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 803ff02:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 803ff06:	2300      	movs	r3, #0
 803ff08:	9304      	str	r3, [sp, #16]
 803ff0a:	e077      	b.n	803fffc <_strtod_l+0x60c>
 803ff0c:	f018 0f01 	tst.w	r8, #1
 803ff10:	d006      	beq.n	803ff20 <_strtod_l+0x530>
 803ff12:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 803ff16:	e9d3 2300 	ldrd	r2, r3, [r3]
 803ff1a:	f7e0 fba5 	bl	8020668 <__aeabi_dmul>
 803ff1e:	2301      	movs	r3, #1
 803ff20:	3501      	adds	r5, #1
 803ff22:	ea4f 0868 	mov.w	r8, r8, asr #1
 803ff26:	e7cc      	b.n	803fec2 <_strtod_l+0x4d2>
 803ff28:	d0ed      	beq.n	803ff06 <_strtod_l+0x516>
 803ff2a:	f1c8 0800 	rsb	r8, r8, #0
 803ff2e:	f018 020f 	ands.w	r2, r8, #15
 803ff32:	d00a      	beq.n	803ff4a <_strtod_l+0x55a>
 803ff34:	4b12      	ldr	r3, [pc, #72]	; (803ff80 <_strtod_l+0x590>)
 803ff36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 803ff3a:	4650      	mov	r0, sl
 803ff3c:	4659      	mov	r1, fp
 803ff3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 803ff42:	f7e0 fcbb 	bl	80208bc <__aeabi_ddiv>
 803ff46:	4682      	mov	sl, r0
 803ff48:	468b      	mov	fp, r1
 803ff4a:	ea5f 1828 	movs.w	r8, r8, asr #4
 803ff4e:	d0da      	beq.n	803ff06 <_strtod_l+0x516>
 803ff50:	f1b8 0f1f 	cmp.w	r8, #31
 803ff54:	dd20      	ble.n	803ff98 <_strtod_l+0x5a8>
 803ff56:	2400      	movs	r4, #0
 803ff58:	46a0      	mov	r8, r4
 803ff5a:	9407      	str	r4, [sp, #28]
 803ff5c:	9405      	str	r4, [sp, #20]
 803ff5e:	2322      	movs	r3, #34	; 0x22
 803ff60:	f04f 0a00 	mov.w	sl, #0
 803ff64:	f04f 0b00 	mov.w	fp, #0
 803ff68:	f8c9 3000 	str.w	r3, [r9]
 803ff6c:	e765      	b.n	803fe3a <_strtod_l+0x44a>
 803ff6e:	bf00      	nop
 803ff70:	08056220 	.word	0x08056220
 803ff74:	08056223 	.word	0x08056223
 803ff78:	08056229 	.word	0x08056229
 803ff7c:	08056240 	.word	0x08056240
 803ff80:	080562b8 	.word	0x080562b8
 803ff84:	08056290 	.word	0x08056290
 803ff88:	7ff00000 	.word	0x7ff00000
 803ff8c:	7ca00000 	.word	0x7ca00000
 803ff90:	fff80000 	.word	0xfff80000
 803ff94:	7fefffff 	.word	0x7fefffff
 803ff98:	f018 0310 	ands.w	r3, r8, #16
 803ff9c:	bf18      	it	ne
 803ff9e:	236a      	movne	r3, #106	; 0x6a
 803ffa0:	4da0      	ldr	r5, [pc, #640]	; (8040224 <_strtod_l+0x834>)
 803ffa2:	9304      	str	r3, [sp, #16]
 803ffa4:	4650      	mov	r0, sl
 803ffa6:	4659      	mov	r1, fp
 803ffa8:	2300      	movs	r3, #0
 803ffaa:	f1b8 0f00 	cmp.w	r8, #0
 803ffae:	f300 810a 	bgt.w	80401c6 <_strtod_l+0x7d6>
 803ffb2:	b10b      	cbz	r3, 803ffb8 <_strtod_l+0x5c8>
 803ffb4:	4682      	mov	sl, r0
 803ffb6:	468b      	mov	fp, r1
 803ffb8:	9b04      	ldr	r3, [sp, #16]
 803ffba:	b1bb      	cbz	r3, 803ffec <_strtod_l+0x5fc>
 803ffbc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 803ffc0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 803ffc4:	2b00      	cmp	r3, #0
 803ffc6:	4659      	mov	r1, fp
 803ffc8:	dd10      	ble.n	803ffec <_strtod_l+0x5fc>
 803ffca:	2b1f      	cmp	r3, #31
 803ffcc:	f340 8107 	ble.w	80401de <_strtod_l+0x7ee>
 803ffd0:	2b34      	cmp	r3, #52	; 0x34
 803ffd2:	bfde      	ittt	le
 803ffd4:	3b20      	suble	r3, #32
 803ffd6:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 803ffda:	fa02 f303 	lslle.w	r3, r2, r3
 803ffde:	f04f 0a00 	mov.w	sl, #0
 803ffe2:	bfcc      	ite	gt
 803ffe4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 803ffe8:	ea03 0b01 	andle.w	fp, r3, r1
 803ffec:	2200      	movs	r2, #0
 803ffee:	2300      	movs	r3, #0
 803fff0:	4650      	mov	r0, sl
 803fff2:	4659      	mov	r1, fp
 803fff4:	f7e0 fda0 	bl	8020b38 <__aeabi_dcmpeq>
 803fff8:	2800      	cmp	r0, #0
 803fffa:	d1ac      	bne.n	803ff56 <_strtod_l+0x566>
 803fffc:	9b07      	ldr	r3, [sp, #28]
 803fffe:	9300      	str	r3, [sp, #0]
 8040000:	9a05      	ldr	r2, [sp, #20]
 8040002:	9908      	ldr	r1, [sp, #32]
 8040004:	4623      	mov	r3, r4
 8040006:	4648      	mov	r0, r9
 8040008:	f000 fefa 	bl	8040e00 <__s2b>
 804000c:	9007      	str	r0, [sp, #28]
 804000e:	2800      	cmp	r0, #0
 8040010:	f43f af08 	beq.w	803fe24 <_strtod_l+0x434>
 8040014:	9a06      	ldr	r2, [sp, #24]
 8040016:	9b06      	ldr	r3, [sp, #24]
 8040018:	2a00      	cmp	r2, #0
 804001a:	f1c3 0300 	rsb	r3, r3, #0
 804001e:	bfa8      	it	ge
 8040020:	2300      	movge	r3, #0
 8040022:	930e      	str	r3, [sp, #56]	; 0x38
 8040024:	2400      	movs	r4, #0
 8040026:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 804002a:	9316      	str	r3, [sp, #88]	; 0x58
 804002c:	46a0      	mov	r8, r4
 804002e:	9b07      	ldr	r3, [sp, #28]
 8040030:	4648      	mov	r0, r9
 8040032:	6859      	ldr	r1, [r3, #4]
 8040034:	f000 fe5e 	bl	8040cf4 <_Balloc>
 8040038:	9005      	str	r0, [sp, #20]
 804003a:	2800      	cmp	r0, #0
 804003c:	f43f aef6 	beq.w	803fe2c <_strtod_l+0x43c>
 8040040:	9b07      	ldr	r3, [sp, #28]
 8040042:	691a      	ldr	r2, [r3, #16]
 8040044:	3202      	adds	r2, #2
 8040046:	f103 010c 	add.w	r1, r3, #12
 804004a:	0092      	lsls	r2, r2, #2
 804004c:	300c      	adds	r0, #12
 804004e:	f7ff fc54 	bl	803f8fa <memcpy>
 8040052:	aa1e      	add	r2, sp, #120	; 0x78
 8040054:	a91d      	add	r1, sp, #116	; 0x74
 8040056:	ec4b ab10 	vmov	d0, sl, fp
 804005a:	4648      	mov	r0, r9
 804005c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8040060:	f001 f98a 	bl	8041378 <__d2b>
 8040064:	901c      	str	r0, [sp, #112]	; 0x70
 8040066:	2800      	cmp	r0, #0
 8040068:	f43f aee0 	beq.w	803fe2c <_strtod_l+0x43c>
 804006c:	2101      	movs	r1, #1
 804006e:	4648      	mov	r0, r9
 8040070:	f000 ff52 	bl	8040f18 <__i2b>
 8040074:	4680      	mov	r8, r0
 8040076:	2800      	cmp	r0, #0
 8040078:	f43f aed8 	beq.w	803fe2c <_strtod_l+0x43c>
 804007c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 804007e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8040080:	2e00      	cmp	r6, #0
 8040082:	bfab      	itete	ge
 8040084:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8040086:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8040088:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 804008a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 804008c:	bfac      	ite	ge
 804008e:	18f7      	addge	r7, r6, r3
 8040090:	1b9d      	sublt	r5, r3, r6
 8040092:	9b04      	ldr	r3, [sp, #16]
 8040094:	1af6      	subs	r6, r6, r3
 8040096:	4416      	add	r6, r2
 8040098:	4b63      	ldr	r3, [pc, #396]	; (8040228 <_strtod_l+0x838>)
 804009a:	3e01      	subs	r6, #1
 804009c:	429e      	cmp	r6, r3
 804009e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80400a2:	f280 80af 	bge.w	8040204 <_strtod_l+0x814>
 80400a6:	1b9b      	subs	r3, r3, r6
 80400a8:	2b1f      	cmp	r3, #31
 80400aa:	eba2 0203 	sub.w	r2, r2, r3
 80400ae:	f04f 0101 	mov.w	r1, #1
 80400b2:	f300 809b 	bgt.w	80401ec <_strtod_l+0x7fc>
 80400b6:	fa01 f303 	lsl.w	r3, r1, r3
 80400ba:	930f      	str	r3, [sp, #60]	; 0x3c
 80400bc:	2300      	movs	r3, #0
 80400be:	930a      	str	r3, [sp, #40]	; 0x28
 80400c0:	18be      	adds	r6, r7, r2
 80400c2:	9b04      	ldr	r3, [sp, #16]
 80400c4:	42b7      	cmp	r7, r6
 80400c6:	4415      	add	r5, r2
 80400c8:	441d      	add	r5, r3
 80400ca:	463b      	mov	r3, r7
 80400cc:	bfa8      	it	ge
 80400ce:	4633      	movge	r3, r6
 80400d0:	42ab      	cmp	r3, r5
 80400d2:	bfa8      	it	ge
 80400d4:	462b      	movge	r3, r5
 80400d6:	2b00      	cmp	r3, #0
 80400d8:	bfc2      	ittt	gt
 80400da:	1af6      	subgt	r6, r6, r3
 80400dc:	1aed      	subgt	r5, r5, r3
 80400de:	1aff      	subgt	r7, r7, r3
 80400e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80400e2:	b1bb      	cbz	r3, 8040114 <_strtod_l+0x724>
 80400e4:	4641      	mov	r1, r8
 80400e6:	461a      	mov	r2, r3
 80400e8:	4648      	mov	r0, r9
 80400ea:	f000 ffb5 	bl	8041058 <__pow5mult>
 80400ee:	4680      	mov	r8, r0
 80400f0:	2800      	cmp	r0, #0
 80400f2:	f43f ae9b 	beq.w	803fe2c <_strtod_l+0x43c>
 80400f6:	4601      	mov	r1, r0
 80400f8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80400fa:	4648      	mov	r0, r9
 80400fc:	f000 ff15 	bl	8040f2a <__multiply>
 8040100:	900c      	str	r0, [sp, #48]	; 0x30
 8040102:	2800      	cmp	r0, #0
 8040104:	f43f ae92 	beq.w	803fe2c <_strtod_l+0x43c>
 8040108:	991c      	ldr	r1, [sp, #112]	; 0x70
 804010a:	4648      	mov	r0, r9
 804010c:	f000 fe26 	bl	8040d5c <_Bfree>
 8040110:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8040112:	931c      	str	r3, [sp, #112]	; 0x70
 8040114:	2e00      	cmp	r6, #0
 8040116:	dc7a      	bgt.n	804020e <_strtod_l+0x81e>
 8040118:	9b06      	ldr	r3, [sp, #24]
 804011a:	2b00      	cmp	r3, #0
 804011c:	dd08      	ble.n	8040130 <_strtod_l+0x740>
 804011e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8040120:	9905      	ldr	r1, [sp, #20]
 8040122:	4648      	mov	r0, r9
 8040124:	f000 ff98 	bl	8041058 <__pow5mult>
 8040128:	9005      	str	r0, [sp, #20]
 804012a:	2800      	cmp	r0, #0
 804012c:	f43f ae7e 	beq.w	803fe2c <_strtod_l+0x43c>
 8040130:	2d00      	cmp	r5, #0
 8040132:	dd08      	ble.n	8040146 <_strtod_l+0x756>
 8040134:	462a      	mov	r2, r5
 8040136:	9905      	ldr	r1, [sp, #20]
 8040138:	4648      	mov	r0, r9
 804013a:	f000 ffdb 	bl	80410f4 <__lshift>
 804013e:	9005      	str	r0, [sp, #20]
 8040140:	2800      	cmp	r0, #0
 8040142:	f43f ae73 	beq.w	803fe2c <_strtod_l+0x43c>
 8040146:	2f00      	cmp	r7, #0
 8040148:	dd08      	ble.n	804015c <_strtod_l+0x76c>
 804014a:	4641      	mov	r1, r8
 804014c:	463a      	mov	r2, r7
 804014e:	4648      	mov	r0, r9
 8040150:	f000 ffd0 	bl	80410f4 <__lshift>
 8040154:	4680      	mov	r8, r0
 8040156:	2800      	cmp	r0, #0
 8040158:	f43f ae68 	beq.w	803fe2c <_strtod_l+0x43c>
 804015c:	9a05      	ldr	r2, [sp, #20]
 804015e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8040160:	4648      	mov	r0, r9
 8040162:	f001 f835 	bl	80411d0 <__mdiff>
 8040166:	4604      	mov	r4, r0
 8040168:	2800      	cmp	r0, #0
 804016a:	f43f ae5f 	beq.w	803fe2c <_strtod_l+0x43c>
 804016e:	68c3      	ldr	r3, [r0, #12]
 8040170:	930c      	str	r3, [sp, #48]	; 0x30
 8040172:	2300      	movs	r3, #0
 8040174:	60c3      	str	r3, [r0, #12]
 8040176:	4641      	mov	r1, r8
 8040178:	f001 f810 	bl	804119c <__mcmp>
 804017c:	2800      	cmp	r0, #0
 804017e:	da55      	bge.n	804022c <_strtod_l+0x83c>
 8040180:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8040182:	b9e3      	cbnz	r3, 80401be <_strtod_l+0x7ce>
 8040184:	f1ba 0f00 	cmp.w	sl, #0
 8040188:	d119      	bne.n	80401be <_strtod_l+0x7ce>
 804018a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 804018e:	b9b3      	cbnz	r3, 80401be <_strtod_l+0x7ce>
 8040190:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8040194:	0d1b      	lsrs	r3, r3, #20
 8040196:	051b      	lsls	r3, r3, #20
 8040198:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 804019c:	d90f      	bls.n	80401be <_strtod_l+0x7ce>
 804019e:	6963      	ldr	r3, [r4, #20]
 80401a0:	b913      	cbnz	r3, 80401a8 <_strtod_l+0x7b8>
 80401a2:	6923      	ldr	r3, [r4, #16]
 80401a4:	2b01      	cmp	r3, #1
 80401a6:	dd0a      	ble.n	80401be <_strtod_l+0x7ce>
 80401a8:	4621      	mov	r1, r4
 80401aa:	2201      	movs	r2, #1
 80401ac:	4648      	mov	r0, r9
 80401ae:	f000 ffa1 	bl	80410f4 <__lshift>
 80401b2:	4641      	mov	r1, r8
 80401b4:	4604      	mov	r4, r0
 80401b6:	f000 fff1 	bl	804119c <__mcmp>
 80401ba:	2800      	cmp	r0, #0
 80401bc:	dc67      	bgt.n	804028e <_strtod_l+0x89e>
 80401be:	9b04      	ldr	r3, [sp, #16]
 80401c0:	2b00      	cmp	r3, #0
 80401c2:	d171      	bne.n	80402a8 <_strtod_l+0x8b8>
 80401c4:	e63d      	b.n	803fe42 <_strtod_l+0x452>
 80401c6:	f018 0f01 	tst.w	r8, #1
 80401ca:	d004      	beq.n	80401d6 <_strtod_l+0x7e6>
 80401cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80401d0:	f7e0 fa4a 	bl	8020668 <__aeabi_dmul>
 80401d4:	2301      	movs	r3, #1
 80401d6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80401da:	3508      	adds	r5, #8
 80401dc:	e6e5      	b.n	803ffaa <_strtod_l+0x5ba>
 80401de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80401e2:	fa02 f303 	lsl.w	r3, r2, r3
 80401e6:	ea03 0a0a 	and.w	sl, r3, sl
 80401ea:	e6ff      	b.n	803ffec <_strtod_l+0x5fc>
 80401ec:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80401f0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80401f4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80401f8:	36e2      	adds	r6, #226	; 0xe2
 80401fa:	fa01 f306 	lsl.w	r3, r1, r6
 80401fe:	930a      	str	r3, [sp, #40]	; 0x28
 8040200:	910f      	str	r1, [sp, #60]	; 0x3c
 8040202:	e75d      	b.n	80400c0 <_strtod_l+0x6d0>
 8040204:	2300      	movs	r3, #0
 8040206:	930a      	str	r3, [sp, #40]	; 0x28
 8040208:	2301      	movs	r3, #1
 804020a:	930f      	str	r3, [sp, #60]	; 0x3c
 804020c:	e758      	b.n	80400c0 <_strtod_l+0x6d0>
 804020e:	4632      	mov	r2, r6
 8040210:	991c      	ldr	r1, [sp, #112]	; 0x70
 8040212:	4648      	mov	r0, r9
 8040214:	f000 ff6e 	bl	80410f4 <__lshift>
 8040218:	901c      	str	r0, [sp, #112]	; 0x70
 804021a:	2800      	cmp	r0, #0
 804021c:	f47f af7c 	bne.w	8040118 <_strtod_l+0x728>
 8040220:	e604      	b.n	803fe2c <_strtod_l+0x43c>
 8040222:	bf00      	nop
 8040224:	08056258 	.word	0x08056258
 8040228:	fffffc02 	.word	0xfffffc02
 804022c:	465d      	mov	r5, fp
 804022e:	f040 8086 	bne.w	804033e <_strtod_l+0x94e>
 8040232:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8040234:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8040238:	b32a      	cbz	r2, 8040286 <_strtod_l+0x896>
 804023a:	4aaf      	ldr	r2, [pc, #700]	; (80404f8 <_strtod_l+0xb08>)
 804023c:	4293      	cmp	r3, r2
 804023e:	d153      	bne.n	80402e8 <_strtod_l+0x8f8>
 8040240:	9b04      	ldr	r3, [sp, #16]
 8040242:	4650      	mov	r0, sl
 8040244:	b1d3      	cbz	r3, 804027c <_strtod_l+0x88c>
 8040246:	4aad      	ldr	r2, [pc, #692]	; (80404fc <_strtod_l+0xb0c>)
 8040248:	402a      	ands	r2, r5
 804024a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 804024e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8040252:	d816      	bhi.n	8040282 <_strtod_l+0x892>
 8040254:	0d12      	lsrs	r2, r2, #20
 8040256:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 804025a:	fa01 f303 	lsl.w	r3, r1, r3
 804025e:	4298      	cmp	r0, r3
 8040260:	d142      	bne.n	80402e8 <_strtod_l+0x8f8>
 8040262:	4ba7      	ldr	r3, [pc, #668]	; (8040500 <_strtod_l+0xb10>)
 8040264:	429d      	cmp	r5, r3
 8040266:	d102      	bne.n	804026e <_strtod_l+0x87e>
 8040268:	3001      	adds	r0, #1
 804026a:	f43f addf 	beq.w	803fe2c <_strtod_l+0x43c>
 804026e:	4ba3      	ldr	r3, [pc, #652]	; (80404fc <_strtod_l+0xb0c>)
 8040270:	402b      	ands	r3, r5
 8040272:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8040276:	f04f 0a00 	mov.w	sl, #0
 804027a:	e7a0      	b.n	80401be <_strtod_l+0x7ce>
 804027c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8040280:	e7ed      	b.n	804025e <_strtod_l+0x86e>
 8040282:	460b      	mov	r3, r1
 8040284:	e7eb      	b.n	804025e <_strtod_l+0x86e>
 8040286:	bb7b      	cbnz	r3, 80402e8 <_strtod_l+0x8f8>
 8040288:	f1ba 0f00 	cmp.w	sl, #0
 804028c:	d12c      	bne.n	80402e8 <_strtod_l+0x8f8>
 804028e:	9904      	ldr	r1, [sp, #16]
 8040290:	4a9a      	ldr	r2, [pc, #616]	; (80404fc <_strtod_l+0xb0c>)
 8040292:	465b      	mov	r3, fp
 8040294:	b1f1      	cbz	r1, 80402d4 <_strtod_l+0x8e4>
 8040296:	ea02 010b 	and.w	r1, r2, fp
 804029a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 804029e:	dc19      	bgt.n	80402d4 <_strtod_l+0x8e4>
 80402a0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80402a4:	f77f ae5b 	ble.w	803ff5e <_strtod_l+0x56e>
 80402a8:	4a96      	ldr	r2, [pc, #600]	; (8040504 <_strtod_l+0xb14>)
 80402aa:	2300      	movs	r3, #0
 80402ac:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80402b0:	4650      	mov	r0, sl
 80402b2:	4659      	mov	r1, fp
 80402b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80402b8:	f7e0 f9d6 	bl	8020668 <__aeabi_dmul>
 80402bc:	4682      	mov	sl, r0
 80402be:	468b      	mov	fp, r1
 80402c0:	2900      	cmp	r1, #0
 80402c2:	f47f adbe 	bne.w	803fe42 <_strtod_l+0x452>
 80402c6:	2800      	cmp	r0, #0
 80402c8:	f47f adbb 	bne.w	803fe42 <_strtod_l+0x452>
 80402cc:	2322      	movs	r3, #34	; 0x22
 80402ce:	f8c9 3000 	str.w	r3, [r9]
 80402d2:	e5b6      	b.n	803fe42 <_strtod_l+0x452>
 80402d4:	4013      	ands	r3, r2
 80402d6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80402da:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80402de:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80402e2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80402e6:	e76a      	b.n	80401be <_strtod_l+0x7ce>
 80402e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80402ea:	b193      	cbz	r3, 8040312 <_strtod_l+0x922>
 80402ec:	422b      	tst	r3, r5
 80402ee:	f43f af66 	beq.w	80401be <_strtod_l+0x7ce>
 80402f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80402f4:	9a04      	ldr	r2, [sp, #16]
 80402f6:	4650      	mov	r0, sl
 80402f8:	4659      	mov	r1, fp
 80402fa:	b173      	cbz	r3, 804031a <_strtod_l+0x92a>
 80402fc:	f7ff fb5c 	bl	803f9b8 <sulp>
 8040300:	4602      	mov	r2, r0
 8040302:	460b      	mov	r3, r1
 8040304:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8040308:	f7df fff8 	bl	80202fc <__adddf3>
 804030c:	4682      	mov	sl, r0
 804030e:	468b      	mov	fp, r1
 8040310:	e755      	b.n	80401be <_strtod_l+0x7ce>
 8040312:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8040314:	ea13 0f0a 	tst.w	r3, sl
 8040318:	e7e9      	b.n	80402ee <_strtod_l+0x8fe>
 804031a:	f7ff fb4d 	bl	803f9b8 <sulp>
 804031e:	4602      	mov	r2, r0
 8040320:	460b      	mov	r3, r1
 8040322:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8040326:	f7df ffe7 	bl	80202f8 <__aeabi_dsub>
 804032a:	2200      	movs	r2, #0
 804032c:	2300      	movs	r3, #0
 804032e:	4682      	mov	sl, r0
 8040330:	468b      	mov	fp, r1
 8040332:	f7e0 fc01 	bl	8020b38 <__aeabi_dcmpeq>
 8040336:	2800      	cmp	r0, #0
 8040338:	f47f ae11 	bne.w	803ff5e <_strtod_l+0x56e>
 804033c:	e73f      	b.n	80401be <_strtod_l+0x7ce>
 804033e:	4641      	mov	r1, r8
 8040340:	4620      	mov	r0, r4
 8040342:	f001 f868 	bl	8041416 <__ratio>
 8040346:	ec57 6b10 	vmov	r6, r7, d0
 804034a:	2200      	movs	r2, #0
 804034c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8040350:	ee10 0a10 	vmov	r0, s0
 8040354:	4639      	mov	r1, r7
 8040356:	f7e0 fc03 	bl	8020b60 <__aeabi_dcmple>
 804035a:	2800      	cmp	r0, #0
 804035c:	d077      	beq.n	804044e <_strtod_l+0xa5e>
 804035e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8040360:	2b00      	cmp	r3, #0
 8040362:	d04a      	beq.n	80403fa <_strtod_l+0xa0a>
 8040364:	4b68      	ldr	r3, [pc, #416]	; (8040508 <_strtod_l+0xb18>)
 8040366:	2200      	movs	r2, #0
 8040368:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 804036c:	4f66      	ldr	r7, [pc, #408]	; (8040508 <_strtod_l+0xb18>)
 804036e:	2600      	movs	r6, #0
 8040370:	4b62      	ldr	r3, [pc, #392]	; (80404fc <_strtod_l+0xb0c>)
 8040372:	402b      	ands	r3, r5
 8040374:	930f      	str	r3, [sp, #60]	; 0x3c
 8040376:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8040378:	4b64      	ldr	r3, [pc, #400]	; (804050c <_strtod_l+0xb1c>)
 804037a:	429a      	cmp	r2, r3
 804037c:	f040 80ce 	bne.w	804051c <_strtod_l+0xb2c>
 8040380:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8040384:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8040388:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 804038c:	ec4b ab10 	vmov	d0, sl, fp
 8040390:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8040394:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8040398:	f000 ff78 	bl	804128c <__ulp>
 804039c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80403a0:	ec53 2b10 	vmov	r2, r3, d0
 80403a4:	f7e0 f960 	bl	8020668 <__aeabi_dmul>
 80403a8:	4652      	mov	r2, sl
 80403aa:	465b      	mov	r3, fp
 80403ac:	f7df ffa6 	bl	80202fc <__adddf3>
 80403b0:	460b      	mov	r3, r1
 80403b2:	4952      	ldr	r1, [pc, #328]	; (80404fc <_strtod_l+0xb0c>)
 80403b4:	4a56      	ldr	r2, [pc, #344]	; (8040510 <_strtod_l+0xb20>)
 80403b6:	4019      	ands	r1, r3
 80403b8:	4291      	cmp	r1, r2
 80403ba:	4682      	mov	sl, r0
 80403bc:	d95b      	bls.n	8040476 <_strtod_l+0xa86>
 80403be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80403c0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80403c4:	4293      	cmp	r3, r2
 80403c6:	d103      	bne.n	80403d0 <_strtod_l+0x9e0>
 80403c8:	9b08      	ldr	r3, [sp, #32]
 80403ca:	3301      	adds	r3, #1
 80403cc:	f43f ad2e 	beq.w	803fe2c <_strtod_l+0x43c>
 80403d0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8040500 <_strtod_l+0xb10>
 80403d4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80403d8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80403da:	4648      	mov	r0, r9
 80403dc:	f000 fcbe 	bl	8040d5c <_Bfree>
 80403e0:	9905      	ldr	r1, [sp, #20]
 80403e2:	4648      	mov	r0, r9
 80403e4:	f000 fcba 	bl	8040d5c <_Bfree>
 80403e8:	4641      	mov	r1, r8
 80403ea:	4648      	mov	r0, r9
 80403ec:	f000 fcb6 	bl	8040d5c <_Bfree>
 80403f0:	4621      	mov	r1, r4
 80403f2:	4648      	mov	r0, r9
 80403f4:	f000 fcb2 	bl	8040d5c <_Bfree>
 80403f8:	e619      	b.n	804002e <_strtod_l+0x63e>
 80403fa:	f1ba 0f00 	cmp.w	sl, #0
 80403fe:	d11a      	bne.n	8040436 <_strtod_l+0xa46>
 8040400:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8040404:	b9eb      	cbnz	r3, 8040442 <_strtod_l+0xa52>
 8040406:	2200      	movs	r2, #0
 8040408:	4b3f      	ldr	r3, [pc, #252]	; (8040508 <_strtod_l+0xb18>)
 804040a:	4630      	mov	r0, r6
 804040c:	4639      	mov	r1, r7
 804040e:	f7e0 fb9d 	bl	8020b4c <__aeabi_dcmplt>
 8040412:	b9c8      	cbnz	r0, 8040448 <_strtod_l+0xa58>
 8040414:	4630      	mov	r0, r6
 8040416:	4639      	mov	r1, r7
 8040418:	2200      	movs	r2, #0
 804041a:	4b3e      	ldr	r3, [pc, #248]	; (8040514 <_strtod_l+0xb24>)
 804041c:	f7e0 f924 	bl	8020668 <__aeabi_dmul>
 8040420:	4606      	mov	r6, r0
 8040422:	460f      	mov	r7, r1
 8040424:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8040428:	9618      	str	r6, [sp, #96]	; 0x60
 804042a:	9319      	str	r3, [sp, #100]	; 0x64
 804042c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8040430:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8040434:	e79c      	b.n	8040370 <_strtod_l+0x980>
 8040436:	f1ba 0f01 	cmp.w	sl, #1
 804043a:	d102      	bne.n	8040442 <_strtod_l+0xa52>
 804043c:	2d00      	cmp	r5, #0
 804043e:	f43f ad8e 	beq.w	803ff5e <_strtod_l+0x56e>
 8040442:	2200      	movs	r2, #0
 8040444:	4b34      	ldr	r3, [pc, #208]	; (8040518 <_strtod_l+0xb28>)
 8040446:	e78f      	b.n	8040368 <_strtod_l+0x978>
 8040448:	2600      	movs	r6, #0
 804044a:	4f32      	ldr	r7, [pc, #200]	; (8040514 <_strtod_l+0xb24>)
 804044c:	e7ea      	b.n	8040424 <_strtod_l+0xa34>
 804044e:	4b31      	ldr	r3, [pc, #196]	; (8040514 <_strtod_l+0xb24>)
 8040450:	4630      	mov	r0, r6
 8040452:	4639      	mov	r1, r7
 8040454:	2200      	movs	r2, #0
 8040456:	f7e0 f907 	bl	8020668 <__aeabi_dmul>
 804045a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 804045c:	4606      	mov	r6, r0
 804045e:	460f      	mov	r7, r1
 8040460:	b933      	cbnz	r3, 8040470 <_strtod_l+0xa80>
 8040462:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8040466:	9010      	str	r0, [sp, #64]	; 0x40
 8040468:	9311      	str	r3, [sp, #68]	; 0x44
 804046a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 804046e:	e7df      	b.n	8040430 <_strtod_l+0xa40>
 8040470:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8040474:	e7f9      	b.n	804046a <_strtod_l+0xa7a>
 8040476:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 804047a:	9b04      	ldr	r3, [sp, #16]
 804047c:	2b00      	cmp	r3, #0
 804047e:	d1ab      	bne.n	80403d8 <_strtod_l+0x9e8>
 8040480:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8040484:	0d1b      	lsrs	r3, r3, #20
 8040486:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8040488:	051b      	lsls	r3, r3, #20
 804048a:	429a      	cmp	r2, r3
 804048c:	465d      	mov	r5, fp
 804048e:	d1a3      	bne.n	80403d8 <_strtod_l+0x9e8>
 8040490:	4639      	mov	r1, r7
 8040492:	4630      	mov	r0, r6
 8040494:	f7e0 fb98 	bl	8020bc8 <__aeabi_d2iz>
 8040498:	f7e0 f87c 	bl	8020594 <__aeabi_i2d>
 804049c:	460b      	mov	r3, r1
 804049e:	4602      	mov	r2, r0
 80404a0:	4639      	mov	r1, r7
 80404a2:	4630      	mov	r0, r6
 80404a4:	f7df ff28 	bl	80202f8 <__aeabi_dsub>
 80404a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80404aa:	4606      	mov	r6, r0
 80404ac:	460f      	mov	r7, r1
 80404ae:	b933      	cbnz	r3, 80404be <_strtod_l+0xace>
 80404b0:	f1ba 0f00 	cmp.w	sl, #0
 80404b4:	d103      	bne.n	80404be <_strtod_l+0xace>
 80404b6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80404ba:	2d00      	cmp	r5, #0
 80404bc:	d06d      	beq.n	804059a <_strtod_l+0xbaa>
 80404be:	a30a      	add	r3, pc, #40	; (adr r3, 80404e8 <_strtod_l+0xaf8>)
 80404c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80404c4:	4630      	mov	r0, r6
 80404c6:	4639      	mov	r1, r7
 80404c8:	f7e0 fb40 	bl	8020b4c <__aeabi_dcmplt>
 80404cc:	2800      	cmp	r0, #0
 80404ce:	f47f acb8 	bne.w	803fe42 <_strtod_l+0x452>
 80404d2:	a307      	add	r3, pc, #28	; (adr r3, 80404f0 <_strtod_l+0xb00>)
 80404d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80404d8:	4630      	mov	r0, r6
 80404da:	4639      	mov	r1, r7
 80404dc:	f7e0 fb54 	bl	8020b88 <__aeabi_dcmpgt>
 80404e0:	2800      	cmp	r0, #0
 80404e2:	f43f af79 	beq.w	80403d8 <_strtod_l+0x9e8>
 80404e6:	e4ac      	b.n	803fe42 <_strtod_l+0x452>
 80404e8:	94a03595 	.word	0x94a03595
 80404ec:	3fdfffff 	.word	0x3fdfffff
 80404f0:	35afe535 	.word	0x35afe535
 80404f4:	3fe00000 	.word	0x3fe00000
 80404f8:	000fffff 	.word	0x000fffff
 80404fc:	7ff00000 	.word	0x7ff00000
 8040500:	7fefffff 	.word	0x7fefffff
 8040504:	39500000 	.word	0x39500000
 8040508:	3ff00000 	.word	0x3ff00000
 804050c:	7fe00000 	.word	0x7fe00000
 8040510:	7c9fffff 	.word	0x7c9fffff
 8040514:	3fe00000 	.word	0x3fe00000
 8040518:	bff00000 	.word	0xbff00000
 804051c:	9b04      	ldr	r3, [sp, #16]
 804051e:	b333      	cbz	r3, 804056e <_strtod_l+0xb7e>
 8040520:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8040522:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8040526:	d822      	bhi.n	804056e <_strtod_l+0xb7e>
 8040528:	a327      	add	r3, pc, #156	; (adr r3, 80405c8 <_strtod_l+0xbd8>)
 804052a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804052e:	4630      	mov	r0, r6
 8040530:	4639      	mov	r1, r7
 8040532:	f7e0 fb15 	bl	8020b60 <__aeabi_dcmple>
 8040536:	b1a0      	cbz	r0, 8040562 <_strtod_l+0xb72>
 8040538:	4639      	mov	r1, r7
 804053a:	4630      	mov	r0, r6
 804053c:	f7e0 fb6c 	bl	8020c18 <__aeabi_d2uiz>
 8040540:	2800      	cmp	r0, #0
 8040542:	bf08      	it	eq
 8040544:	2001      	moveq	r0, #1
 8040546:	f7e0 f815 	bl	8020574 <__aeabi_ui2d>
 804054a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 804054c:	4606      	mov	r6, r0
 804054e:	460f      	mov	r7, r1
 8040550:	bb03      	cbnz	r3, 8040594 <_strtod_l+0xba4>
 8040552:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8040556:	9012      	str	r0, [sp, #72]	; 0x48
 8040558:	9313      	str	r3, [sp, #76]	; 0x4c
 804055a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 804055e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8040562:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8040564:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8040566:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 804056a:	1a9b      	subs	r3, r3, r2
 804056c:	930b      	str	r3, [sp, #44]	; 0x2c
 804056e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8040572:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8040576:	f000 fe89 	bl	804128c <__ulp>
 804057a:	4650      	mov	r0, sl
 804057c:	ec53 2b10 	vmov	r2, r3, d0
 8040580:	4659      	mov	r1, fp
 8040582:	f7e0 f871 	bl	8020668 <__aeabi_dmul>
 8040586:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 804058a:	f7df feb7 	bl	80202fc <__adddf3>
 804058e:	4682      	mov	sl, r0
 8040590:	468b      	mov	fp, r1
 8040592:	e772      	b.n	804047a <_strtod_l+0xa8a>
 8040594:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8040598:	e7df      	b.n	804055a <_strtod_l+0xb6a>
 804059a:	a30d      	add	r3, pc, #52	; (adr r3, 80405d0 <_strtod_l+0xbe0>)
 804059c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80405a0:	f7e0 fad4 	bl	8020b4c <__aeabi_dcmplt>
 80405a4:	e79c      	b.n	80404e0 <_strtod_l+0xaf0>
 80405a6:	2300      	movs	r3, #0
 80405a8:	930d      	str	r3, [sp, #52]	; 0x34
 80405aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80405ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80405ae:	6013      	str	r3, [r2, #0]
 80405b0:	f7ff ba61 	b.w	803fa76 <_strtod_l+0x86>
 80405b4:	2b65      	cmp	r3, #101	; 0x65
 80405b6:	f04f 0200 	mov.w	r2, #0
 80405ba:	f43f ab4e 	beq.w	803fc5a <_strtod_l+0x26a>
 80405be:	2101      	movs	r1, #1
 80405c0:	4614      	mov	r4, r2
 80405c2:	9104      	str	r1, [sp, #16]
 80405c4:	f7ff bacb 	b.w	803fb5e <_strtod_l+0x16e>
 80405c8:	ffc00000 	.word	0xffc00000
 80405cc:	41dfffff 	.word	0x41dfffff
 80405d0:	94a03595 	.word	0x94a03595
 80405d4:	3fcfffff 	.word	0x3fcfffff

080405d8 <strtof>:
 80405d8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80405dc:	4e24      	ldr	r6, [pc, #144]	; (8040670 <strtof+0x98>)
 80405de:	4a25      	ldr	r2, [pc, #148]	; (8040674 <strtof+0x9c>)
 80405e0:	6834      	ldr	r4, [r6, #0]
 80405e2:	6a23      	ldr	r3, [r4, #32]
 80405e4:	ed2d 8b02 	vpush	{d8}
 80405e8:	2b00      	cmp	r3, #0
 80405ea:	bf08      	it	eq
 80405ec:	4613      	moveq	r3, r2
 80405ee:	460a      	mov	r2, r1
 80405f0:	4601      	mov	r1, r0
 80405f2:	4620      	mov	r0, r4
 80405f4:	f7ff f9fc 	bl	803f9f0 <_strtod_l>
 80405f8:	ec55 4b10 	vmov	r4, r5, d0
 80405fc:	ee10 2a10 	vmov	r2, s0
 8040600:	462b      	mov	r3, r5
 8040602:	ee10 0a10 	vmov	r0, s0
 8040606:	4629      	mov	r1, r5
 8040608:	f7e0 fac8 	bl	8020b9c <__aeabi_dcmpun>
 804060c:	b130      	cbz	r0, 804061c <strtof+0x44>
 804060e:	ecbd 8b02 	vpop	{d8}
 8040612:	2000      	movs	r0, #0
 8040614:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
 8040618:	f001 babe 	b.w	8041b98 <nanf>
 804061c:	4620      	mov	r0, r4
 804061e:	4629      	mov	r1, r5
 8040620:	f7e0 fb1a 	bl	8020c58 <__aeabi_d2f>
 8040624:	ee08 0a10 	vmov	s16, r0
 8040628:	eddf 7a13 	vldr	s15, [pc, #76]	; 8040678 <strtof+0xa0>
 804062c:	eeb0 7ac8 	vabs.f32	s14, s16
 8040630:	eeb4 7a67 	vcmp.f32	s14, s15
 8040634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8040638:	dd14      	ble.n	8040664 <strtof+0x8c>
 804063a:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
 804063e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8040642:	4b0e      	ldr	r3, [pc, #56]	; (804067c <strtof+0xa4>)
 8040644:	4620      	mov	r0, r4
 8040646:	4649      	mov	r1, r9
 8040648:	f7e0 faa8 	bl	8020b9c <__aeabi_dcmpun>
 804064c:	b938      	cbnz	r0, 804065e <strtof+0x86>
 804064e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8040652:	4b0a      	ldr	r3, [pc, #40]	; (804067c <strtof+0xa4>)
 8040654:	4620      	mov	r0, r4
 8040656:	4649      	mov	r1, r9
 8040658:	f7e0 fa82 	bl	8020b60 <__aeabi_dcmple>
 804065c:	b110      	cbz	r0, 8040664 <strtof+0x8c>
 804065e:	6833      	ldr	r3, [r6, #0]
 8040660:	2222      	movs	r2, #34	; 0x22
 8040662:	601a      	str	r2, [r3, #0]
 8040664:	eeb0 0a48 	vmov.f32	s0, s16
 8040668:	ecbd 8b02 	vpop	{d8}
 804066c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8040670:	200002c4 	.word	0x200002c4
 8040674:	20000328 	.word	0x20000328
 8040678:	7f7fffff 	.word	0x7f7fffff
 804067c:	7fefffff 	.word	0x7fefffff

08040680 <rshift>:
 8040680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8040682:	6906      	ldr	r6, [r0, #16]
 8040684:	114b      	asrs	r3, r1, #5
 8040686:	429e      	cmp	r6, r3
 8040688:	f100 0414 	add.w	r4, r0, #20
 804068c:	dd30      	ble.n	80406f0 <rshift+0x70>
 804068e:	f011 011f 	ands.w	r1, r1, #31
 8040692:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8040696:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 804069a:	d108      	bne.n	80406ae <rshift+0x2e>
 804069c:	4621      	mov	r1, r4
 804069e:	42b2      	cmp	r2, r6
 80406a0:	460b      	mov	r3, r1
 80406a2:	d211      	bcs.n	80406c8 <rshift+0x48>
 80406a4:	f852 3b04 	ldr.w	r3, [r2], #4
 80406a8:	f841 3b04 	str.w	r3, [r1], #4
 80406ac:	e7f7      	b.n	804069e <rshift+0x1e>
 80406ae:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80406b2:	f1c1 0c20 	rsb	ip, r1, #32
 80406b6:	40cd      	lsrs	r5, r1
 80406b8:	3204      	adds	r2, #4
 80406ba:	4623      	mov	r3, r4
 80406bc:	42b2      	cmp	r2, r6
 80406be:	4617      	mov	r7, r2
 80406c0:	d30c      	bcc.n	80406dc <rshift+0x5c>
 80406c2:	601d      	str	r5, [r3, #0]
 80406c4:	b105      	cbz	r5, 80406c8 <rshift+0x48>
 80406c6:	3304      	adds	r3, #4
 80406c8:	1b1a      	subs	r2, r3, r4
 80406ca:	42a3      	cmp	r3, r4
 80406cc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80406d0:	bf08      	it	eq
 80406d2:	2300      	moveq	r3, #0
 80406d4:	6102      	str	r2, [r0, #16]
 80406d6:	bf08      	it	eq
 80406d8:	6143      	streq	r3, [r0, #20]
 80406da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80406dc:	683f      	ldr	r7, [r7, #0]
 80406de:	fa07 f70c 	lsl.w	r7, r7, ip
 80406e2:	433d      	orrs	r5, r7
 80406e4:	f843 5b04 	str.w	r5, [r3], #4
 80406e8:	f852 5b04 	ldr.w	r5, [r2], #4
 80406ec:	40cd      	lsrs	r5, r1
 80406ee:	e7e5      	b.n	80406bc <rshift+0x3c>
 80406f0:	4623      	mov	r3, r4
 80406f2:	e7e9      	b.n	80406c8 <rshift+0x48>

080406f4 <__hexdig_fun>:
 80406f4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80406f8:	2b09      	cmp	r3, #9
 80406fa:	d802      	bhi.n	8040702 <__hexdig_fun+0xe>
 80406fc:	3820      	subs	r0, #32
 80406fe:	b2c0      	uxtb	r0, r0
 8040700:	4770      	bx	lr
 8040702:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8040706:	2b05      	cmp	r3, #5
 8040708:	d801      	bhi.n	804070e <__hexdig_fun+0x1a>
 804070a:	3847      	subs	r0, #71	; 0x47
 804070c:	e7f7      	b.n	80406fe <__hexdig_fun+0xa>
 804070e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8040712:	2b05      	cmp	r3, #5
 8040714:	d801      	bhi.n	804071a <__hexdig_fun+0x26>
 8040716:	3827      	subs	r0, #39	; 0x27
 8040718:	e7f1      	b.n	80406fe <__hexdig_fun+0xa>
 804071a:	2000      	movs	r0, #0
 804071c:	4770      	bx	lr

0804071e <__gethex>:
 804071e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8040722:	b08b      	sub	sp, #44	; 0x2c
 8040724:	468a      	mov	sl, r1
 8040726:	9002      	str	r0, [sp, #8]
 8040728:	9816      	ldr	r0, [sp, #88]	; 0x58
 804072a:	9306      	str	r3, [sp, #24]
 804072c:	4690      	mov	r8, r2
 804072e:	f000 facd 	bl	8040ccc <__localeconv_l>
 8040732:	6803      	ldr	r3, [r0, #0]
 8040734:	9303      	str	r3, [sp, #12]
 8040736:	4618      	mov	r0, r3
 8040738:	f7df fd7c 	bl	8020234 <strlen>
 804073c:	9b03      	ldr	r3, [sp, #12]
 804073e:	9001      	str	r0, [sp, #4]
 8040740:	4403      	add	r3, r0
 8040742:	f04f 0b00 	mov.w	fp, #0
 8040746:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 804074a:	9307      	str	r3, [sp, #28]
 804074c:	f8da 3000 	ldr.w	r3, [sl]
 8040750:	3302      	adds	r3, #2
 8040752:	461f      	mov	r7, r3
 8040754:	f813 0b01 	ldrb.w	r0, [r3], #1
 8040758:	2830      	cmp	r0, #48	; 0x30
 804075a:	d06c      	beq.n	8040836 <__gethex+0x118>
 804075c:	f7ff ffca 	bl	80406f4 <__hexdig_fun>
 8040760:	4604      	mov	r4, r0
 8040762:	2800      	cmp	r0, #0
 8040764:	d16a      	bne.n	804083c <__gethex+0x11e>
 8040766:	9a01      	ldr	r2, [sp, #4]
 8040768:	9903      	ldr	r1, [sp, #12]
 804076a:	4638      	mov	r0, r7
 804076c:	f7ff f8f8 	bl	803f960 <strncmp>
 8040770:	2800      	cmp	r0, #0
 8040772:	d166      	bne.n	8040842 <__gethex+0x124>
 8040774:	9b01      	ldr	r3, [sp, #4]
 8040776:	5cf8      	ldrb	r0, [r7, r3]
 8040778:	18fe      	adds	r6, r7, r3
 804077a:	f7ff ffbb 	bl	80406f4 <__hexdig_fun>
 804077e:	2800      	cmp	r0, #0
 8040780:	d062      	beq.n	8040848 <__gethex+0x12a>
 8040782:	4633      	mov	r3, r6
 8040784:	7818      	ldrb	r0, [r3, #0]
 8040786:	2830      	cmp	r0, #48	; 0x30
 8040788:	461f      	mov	r7, r3
 804078a:	f103 0301 	add.w	r3, r3, #1
 804078e:	d0f9      	beq.n	8040784 <__gethex+0x66>
 8040790:	f7ff ffb0 	bl	80406f4 <__hexdig_fun>
 8040794:	fab0 f580 	clz	r5, r0
 8040798:	096d      	lsrs	r5, r5, #5
 804079a:	4634      	mov	r4, r6
 804079c:	f04f 0b01 	mov.w	fp, #1
 80407a0:	463a      	mov	r2, r7
 80407a2:	4616      	mov	r6, r2
 80407a4:	3201      	adds	r2, #1
 80407a6:	7830      	ldrb	r0, [r6, #0]
 80407a8:	f7ff ffa4 	bl	80406f4 <__hexdig_fun>
 80407ac:	2800      	cmp	r0, #0
 80407ae:	d1f8      	bne.n	80407a2 <__gethex+0x84>
 80407b0:	9a01      	ldr	r2, [sp, #4]
 80407b2:	9903      	ldr	r1, [sp, #12]
 80407b4:	4630      	mov	r0, r6
 80407b6:	f7ff f8d3 	bl	803f960 <strncmp>
 80407ba:	b950      	cbnz	r0, 80407d2 <__gethex+0xb4>
 80407bc:	b954      	cbnz	r4, 80407d4 <__gethex+0xb6>
 80407be:	9b01      	ldr	r3, [sp, #4]
 80407c0:	18f4      	adds	r4, r6, r3
 80407c2:	4622      	mov	r2, r4
 80407c4:	4616      	mov	r6, r2
 80407c6:	3201      	adds	r2, #1
 80407c8:	7830      	ldrb	r0, [r6, #0]
 80407ca:	f7ff ff93 	bl	80406f4 <__hexdig_fun>
 80407ce:	2800      	cmp	r0, #0
 80407d0:	d1f8      	bne.n	80407c4 <__gethex+0xa6>
 80407d2:	b10c      	cbz	r4, 80407d8 <__gethex+0xba>
 80407d4:	1ba4      	subs	r4, r4, r6
 80407d6:	00a4      	lsls	r4, r4, #2
 80407d8:	7833      	ldrb	r3, [r6, #0]
 80407da:	2b50      	cmp	r3, #80	; 0x50
 80407dc:	d001      	beq.n	80407e2 <__gethex+0xc4>
 80407de:	2b70      	cmp	r3, #112	; 0x70
 80407e0:	d140      	bne.n	8040864 <__gethex+0x146>
 80407e2:	7873      	ldrb	r3, [r6, #1]
 80407e4:	2b2b      	cmp	r3, #43	; 0x2b
 80407e6:	d031      	beq.n	804084c <__gethex+0x12e>
 80407e8:	2b2d      	cmp	r3, #45	; 0x2d
 80407ea:	d033      	beq.n	8040854 <__gethex+0x136>
 80407ec:	1c71      	adds	r1, r6, #1
 80407ee:	f04f 0900 	mov.w	r9, #0
 80407f2:	7808      	ldrb	r0, [r1, #0]
 80407f4:	f7ff ff7e 	bl	80406f4 <__hexdig_fun>
 80407f8:	1e43      	subs	r3, r0, #1
 80407fa:	b2db      	uxtb	r3, r3
 80407fc:	2b18      	cmp	r3, #24
 80407fe:	d831      	bhi.n	8040864 <__gethex+0x146>
 8040800:	f1a0 0210 	sub.w	r2, r0, #16
 8040804:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8040808:	f7ff ff74 	bl	80406f4 <__hexdig_fun>
 804080c:	1e43      	subs	r3, r0, #1
 804080e:	b2db      	uxtb	r3, r3
 8040810:	2b18      	cmp	r3, #24
 8040812:	d922      	bls.n	804085a <__gethex+0x13c>
 8040814:	f1b9 0f00 	cmp.w	r9, #0
 8040818:	d000      	beq.n	804081c <__gethex+0xfe>
 804081a:	4252      	negs	r2, r2
 804081c:	4414      	add	r4, r2
 804081e:	f8ca 1000 	str.w	r1, [sl]
 8040822:	b30d      	cbz	r5, 8040868 <__gethex+0x14a>
 8040824:	f1bb 0f00 	cmp.w	fp, #0
 8040828:	bf0c      	ite	eq
 804082a:	2706      	moveq	r7, #6
 804082c:	2700      	movne	r7, #0
 804082e:	4638      	mov	r0, r7
 8040830:	b00b      	add	sp, #44	; 0x2c
 8040832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8040836:	f10b 0b01 	add.w	fp, fp, #1
 804083a:	e78a      	b.n	8040752 <__gethex+0x34>
 804083c:	2500      	movs	r5, #0
 804083e:	462c      	mov	r4, r5
 8040840:	e7ae      	b.n	80407a0 <__gethex+0x82>
 8040842:	463e      	mov	r6, r7
 8040844:	2501      	movs	r5, #1
 8040846:	e7c7      	b.n	80407d8 <__gethex+0xba>
 8040848:	4604      	mov	r4, r0
 804084a:	e7fb      	b.n	8040844 <__gethex+0x126>
 804084c:	f04f 0900 	mov.w	r9, #0
 8040850:	1cb1      	adds	r1, r6, #2
 8040852:	e7ce      	b.n	80407f2 <__gethex+0xd4>
 8040854:	f04f 0901 	mov.w	r9, #1
 8040858:	e7fa      	b.n	8040850 <__gethex+0x132>
 804085a:	230a      	movs	r3, #10
 804085c:	fb03 0202 	mla	r2, r3, r2, r0
 8040860:	3a10      	subs	r2, #16
 8040862:	e7cf      	b.n	8040804 <__gethex+0xe6>
 8040864:	4631      	mov	r1, r6
 8040866:	e7da      	b.n	804081e <__gethex+0x100>
 8040868:	1bf3      	subs	r3, r6, r7
 804086a:	3b01      	subs	r3, #1
 804086c:	4629      	mov	r1, r5
 804086e:	2b07      	cmp	r3, #7
 8040870:	dc49      	bgt.n	8040906 <__gethex+0x1e8>
 8040872:	9802      	ldr	r0, [sp, #8]
 8040874:	f000 fa3e 	bl	8040cf4 <_Balloc>
 8040878:	9b01      	ldr	r3, [sp, #4]
 804087a:	f100 0914 	add.w	r9, r0, #20
 804087e:	f04f 0b00 	mov.w	fp, #0
 8040882:	f1c3 0301 	rsb	r3, r3, #1
 8040886:	4605      	mov	r5, r0
 8040888:	f8cd 9010 	str.w	r9, [sp, #16]
 804088c:	46da      	mov	sl, fp
 804088e:	9308      	str	r3, [sp, #32]
 8040890:	42b7      	cmp	r7, r6
 8040892:	d33b      	bcc.n	804090c <__gethex+0x1ee>
 8040894:	9804      	ldr	r0, [sp, #16]
 8040896:	f840 ab04 	str.w	sl, [r0], #4
 804089a:	eba0 0009 	sub.w	r0, r0, r9
 804089e:	1080      	asrs	r0, r0, #2
 80408a0:	6128      	str	r0, [r5, #16]
 80408a2:	0147      	lsls	r7, r0, #5
 80408a4:	4650      	mov	r0, sl
 80408a6:	f000 fae9 	bl	8040e7c <__hi0bits>
 80408aa:	f8d8 6000 	ldr.w	r6, [r8]
 80408ae:	1a3f      	subs	r7, r7, r0
 80408b0:	42b7      	cmp	r7, r6
 80408b2:	dd64      	ble.n	804097e <__gethex+0x260>
 80408b4:	1bbf      	subs	r7, r7, r6
 80408b6:	4639      	mov	r1, r7
 80408b8:	4628      	mov	r0, r5
 80408ba:	f000 fdf9 	bl	80414b0 <__any_on>
 80408be:	4682      	mov	sl, r0
 80408c0:	b178      	cbz	r0, 80408e2 <__gethex+0x1c4>
 80408c2:	1e7b      	subs	r3, r7, #1
 80408c4:	1159      	asrs	r1, r3, #5
 80408c6:	f003 021f 	and.w	r2, r3, #31
 80408ca:	f04f 0a01 	mov.w	sl, #1
 80408ce:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80408d2:	fa0a f202 	lsl.w	r2, sl, r2
 80408d6:	420a      	tst	r2, r1
 80408d8:	d003      	beq.n	80408e2 <__gethex+0x1c4>
 80408da:	4553      	cmp	r3, sl
 80408dc:	dc46      	bgt.n	804096c <__gethex+0x24e>
 80408de:	f04f 0a02 	mov.w	sl, #2
 80408e2:	4639      	mov	r1, r7
 80408e4:	4628      	mov	r0, r5
 80408e6:	f7ff fecb 	bl	8040680 <rshift>
 80408ea:	443c      	add	r4, r7
 80408ec:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80408f0:	42a3      	cmp	r3, r4
 80408f2:	da52      	bge.n	804099a <__gethex+0x27c>
 80408f4:	4629      	mov	r1, r5
 80408f6:	9802      	ldr	r0, [sp, #8]
 80408f8:	f000 fa30 	bl	8040d5c <_Bfree>
 80408fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80408fe:	2300      	movs	r3, #0
 8040900:	6013      	str	r3, [r2, #0]
 8040902:	27a3      	movs	r7, #163	; 0xa3
 8040904:	e793      	b.n	804082e <__gethex+0x110>
 8040906:	3101      	adds	r1, #1
 8040908:	105b      	asrs	r3, r3, #1
 804090a:	e7b0      	b.n	804086e <__gethex+0x150>
 804090c:	1e73      	subs	r3, r6, #1
 804090e:	9305      	str	r3, [sp, #20]
 8040910:	9a07      	ldr	r2, [sp, #28]
 8040912:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8040916:	4293      	cmp	r3, r2
 8040918:	d018      	beq.n	804094c <__gethex+0x22e>
 804091a:	f1bb 0f20 	cmp.w	fp, #32
 804091e:	d107      	bne.n	8040930 <__gethex+0x212>
 8040920:	9b04      	ldr	r3, [sp, #16]
 8040922:	f8c3 a000 	str.w	sl, [r3]
 8040926:	3304      	adds	r3, #4
 8040928:	f04f 0a00 	mov.w	sl, #0
 804092c:	9304      	str	r3, [sp, #16]
 804092e:	46d3      	mov	fp, sl
 8040930:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8040934:	f7ff fede 	bl	80406f4 <__hexdig_fun>
 8040938:	f000 000f 	and.w	r0, r0, #15
 804093c:	fa00 f00b 	lsl.w	r0, r0, fp
 8040940:	ea4a 0a00 	orr.w	sl, sl, r0
 8040944:	f10b 0b04 	add.w	fp, fp, #4
 8040948:	9b05      	ldr	r3, [sp, #20]
 804094a:	e00d      	b.n	8040968 <__gethex+0x24a>
 804094c:	9b05      	ldr	r3, [sp, #20]
 804094e:	9a08      	ldr	r2, [sp, #32]
 8040950:	4413      	add	r3, r2
 8040952:	42bb      	cmp	r3, r7
 8040954:	d3e1      	bcc.n	804091a <__gethex+0x1fc>
 8040956:	4618      	mov	r0, r3
 8040958:	9a01      	ldr	r2, [sp, #4]
 804095a:	9903      	ldr	r1, [sp, #12]
 804095c:	9309      	str	r3, [sp, #36]	; 0x24
 804095e:	f7fe ffff 	bl	803f960 <strncmp>
 8040962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8040964:	2800      	cmp	r0, #0
 8040966:	d1d8      	bne.n	804091a <__gethex+0x1fc>
 8040968:	461e      	mov	r6, r3
 804096a:	e791      	b.n	8040890 <__gethex+0x172>
 804096c:	1eb9      	subs	r1, r7, #2
 804096e:	4628      	mov	r0, r5
 8040970:	f000 fd9e 	bl	80414b0 <__any_on>
 8040974:	2800      	cmp	r0, #0
 8040976:	d0b2      	beq.n	80408de <__gethex+0x1c0>
 8040978:	f04f 0a03 	mov.w	sl, #3
 804097c:	e7b1      	b.n	80408e2 <__gethex+0x1c4>
 804097e:	da09      	bge.n	8040994 <__gethex+0x276>
 8040980:	1bf7      	subs	r7, r6, r7
 8040982:	4629      	mov	r1, r5
 8040984:	463a      	mov	r2, r7
 8040986:	9802      	ldr	r0, [sp, #8]
 8040988:	f000 fbb4 	bl	80410f4 <__lshift>
 804098c:	1be4      	subs	r4, r4, r7
 804098e:	4605      	mov	r5, r0
 8040990:	f100 0914 	add.w	r9, r0, #20
 8040994:	f04f 0a00 	mov.w	sl, #0
 8040998:	e7a8      	b.n	80408ec <__gethex+0x1ce>
 804099a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 804099e:	42a0      	cmp	r0, r4
 80409a0:	dd6a      	ble.n	8040a78 <__gethex+0x35a>
 80409a2:	1b04      	subs	r4, r0, r4
 80409a4:	42a6      	cmp	r6, r4
 80409a6:	dc2e      	bgt.n	8040a06 <__gethex+0x2e8>
 80409a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80409ac:	2b02      	cmp	r3, #2
 80409ae:	d022      	beq.n	80409f6 <__gethex+0x2d8>
 80409b0:	2b03      	cmp	r3, #3
 80409b2:	d024      	beq.n	80409fe <__gethex+0x2e0>
 80409b4:	2b01      	cmp	r3, #1
 80409b6:	d115      	bne.n	80409e4 <__gethex+0x2c6>
 80409b8:	42a6      	cmp	r6, r4
 80409ba:	d113      	bne.n	80409e4 <__gethex+0x2c6>
 80409bc:	2e01      	cmp	r6, #1
 80409be:	dc0b      	bgt.n	80409d8 <__gethex+0x2ba>
 80409c0:	9a06      	ldr	r2, [sp, #24]
 80409c2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80409c6:	6013      	str	r3, [r2, #0]
 80409c8:	2301      	movs	r3, #1
 80409ca:	612b      	str	r3, [r5, #16]
 80409cc:	f8c9 3000 	str.w	r3, [r9]
 80409d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80409d2:	2762      	movs	r7, #98	; 0x62
 80409d4:	601d      	str	r5, [r3, #0]
 80409d6:	e72a      	b.n	804082e <__gethex+0x110>
 80409d8:	1e71      	subs	r1, r6, #1
 80409da:	4628      	mov	r0, r5
 80409dc:	f000 fd68 	bl	80414b0 <__any_on>
 80409e0:	2800      	cmp	r0, #0
 80409e2:	d1ed      	bne.n	80409c0 <__gethex+0x2a2>
 80409e4:	4629      	mov	r1, r5
 80409e6:	9802      	ldr	r0, [sp, #8]
 80409e8:	f000 f9b8 	bl	8040d5c <_Bfree>
 80409ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80409ee:	2300      	movs	r3, #0
 80409f0:	6013      	str	r3, [r2, #0]
 80409f2:	2750      	movs	r7, #80	; 0x50
 80409f4:	e71b      	b.n	804082e <__gethex+0x110>
 80409f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80409f8:	2b00      	cmp	r3, #0
 80409fa:	d0e1      	beq.n	80409c0 <__gethex+0x2a2>
 80409fc:	e7f2      	b.n	80409e4 <__gethex+0x2c6>
 80409fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8040a00:	2b00      	cmp	r3, #0
 8040a02:	d1dd      	bne.n	80409c0 <__gethex+0x2a2>
 8040a04:	e7ee      	b.n	80409e4 <__gethex+0x2c6>
 8040a06:	1e67      	subs	r7, r4, #1
 8040a08:	f1ba 0f00 	cmp.w	sl, #0
 8040a0c:	d131      	bne.n	8040a72 <__gethex+0x354>
 8040a0e:	b127      	cbz	r7, 8040a1a <__gethex+0x2fc>
 8040a10:	4639      	mov	r1, r7
 8040a12:	4628      	mov	r0, r5
 8040a14:	f000 fd4c 	bl	80414b0 <__any_on>
 8040a18:	4682      	mov	sl, r0
 8040a1a:	117a      	asrs	r2, r7, #5
 8040a1c:	2301      	movs	r3, #1
 8040a1e:	f007 071f 	and.w	r7, r7, #31
 8040a22:	fa03 f707 	lsl.w	r7, r3, r7
 8040a26:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8040a2a:	4621      	mov	r1, r4
 8040a2c:	421f      	tst	r7, r3
 8040a2e:	4628      	mov	r0, r5
 8040a30:	bf18      	it	ne
 8040a32:	f04a 0a02 	orrne.w	sl, sl, #2
 8040a36:	1b36      	subs	r6, r6, r4
 8040a38:	f7ff fe22 	bl	8040680 <rshift>
 8040a3c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8040a40:	2702      	movs	r7, #2
 8040a42:	f1ba 0f00 	cmp.w	sl, #0
 8040a46:	d048      	beq.n	8040ada <__gethex+0x3bc>
 8040a48:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8040a4c:	2b02      	cmp	r3, #2
 8040a4e:	d015      	beq.n	8040a7c <__gethex+0x35e>
 8040a50:	2b03      	cmp	r3, #3
 8040a52:	d017      	beq.n	8040a84 <__gethex+0x366>
 8040a54:	2b01      	cmp	r3, #1
 8040a56:	d109      	bne.n	8040a6c <__gethex+0x34e>
 8040a58:	f01a 0f02 	tst.w	sl, #2
 8040a5c:	d006      	beq.n	8040a6c <__gethex+0x34e>
 8040a5e:	f8d9 3000 	ldr.w	r3, [r9]
 8040a62:	ea4a 0a03 	orr.w	sl, sl, r3
 8040a66:	f01a 0f01 	tst.w	sl, #1
 8040a6a:	d10e      	bne.n	8040a8a <__gethex+0x36c>
 8040a6c:	f047 0710 	orr.w	r7, r7, #16
 8040a70:	e033      	b.n	8040ada <__gethex+0x3bc>
 8040a72:	f04f 0a01 	mov.w	sl, #1
 8040a76:	e7d0      	b.n	8040a1a <__gethex+0x2fc>
 8040a78:	2701      	movs	r7, #1
 8040a7a:	e7e2      	b.n	8040a42 <__gethex+0x324>
 8040a7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8040a7e:	f1c3 0301 	rsb	r3, r3, #1
 8040a82:	9315      	str	r3, [sp, #84]	; 0x54
 8040a84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8040a86:	2b00      	cmp	r3, #0
 8040a88:	d0f0      	beq.n	8040a6c <__gethex+0x34e>
 8040a8a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8040a8e:	f105 0314 	add.w	r3, r5, #20
 8040a92:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8040a96:	eb03 010a 	add.w	r1, r3, sl
 8040a9a:	f04f 0c00 	mov.w	ip, #0
 8040a9e:	4618      	mov	r0, r3
 8040aa0:	f853 2b04 	ldr.w	r2, [r3], #4
 8040aa4:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8040aa8:	d01c      	beq.n	8040ae4 <__gethex+0x3c6>
 8040aaa:	3201      	adds	r2, #1
 8040aac:	6002      	str	r2, [r0, #0]
 8040aae:	2f02      	cmp	r7, #2
 8040ab0:	f105 0314 	add.w	r3, r5, #20
 8040ab4:	d138      	bne.n	8040b28 <__gethex+0x40a>
 8040ab6:	f8d8 2000 	ldr.w	r2, [r8]
 8040aba:	3a01      	subs	r2, #1
 8040abc:	42b2      	cmp	r2, r6
 8040abe:	d10a      	bne.n	8040ad6 <__gethex+0x3b8>
 8040ac0:	1171      	asrs	r1, r6, #5
 8040ac2:	2201      	movs	r2, #1
 8040ac4:	f006 061f 	and.w	r6, r6, #31
 8040ac8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8040acc:	fa02 f606 	lsl.w	r6, r2, r6
 8040ad0:	421e      	tst	r6, r3
 8040ad2:	bf18      	it	ne
 8040ad4:	4617      	movne	r7, r2
 8040ad6:	f047 0720 	orr.w	r7, r7, #32
 8040ada:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8040adc:	601d      	str	r5, [r3, #0]
 8040ade:	9b06      	ldr	r3, [sp, #24]
 8040ae0:	601c      	str	r4, [r3, #0]
 8040ae2:	e6a4      	b.n	804082e <__gethex+0x110>
 8040ae4:	4299      	cmp	r1, r3
 8040ae6:	f843 cc04 	str.w	ip, [r3, #-4]
 8040aea:	d8d8      	bhi.n	8040a9e <__gethex+0x380>
 8040aec:	68ab      	ldr	r3, [r5, #8]
 8040aee:	4599      	cmp	r9, r3
 8040af0:	db12      	blt.n	8040b18 <__gethex+0x3fa>
 8040af2:	6869      	ldr	r1, [r5, #4]
 8040af4:	9802      	ldr	r0, [sp, #8]
 8040af6:	3101      	adds	r1, #1
 8040af8:	f000 f8fc 	bl	8040cf4 <_Balloc>
 8040afc:	692a      	ldr	r2, [r5, #16]
 8040afe:	3202      	adds	r2, #2
 8040b00:	f105 010c 	add.w	r1, r5, #12
 8040b04:	4683      	mov	fp, r0
 8040b06:	0092      	lsls	r2, r2, #2
 8040b08:	300c      	adds	r0, #12
 8040b0a:	f7fe fef6 	bl	803f8fa <memcpy>
 8040b0e:	4629      	mov	r1, r5
 8040b10:	9802      	ldr	r0, [sp, #8]
 8040b12:	f000 f923 	bl	8040d5c <_Bfree>
 8040b16:	465d      	mov	r5, fp
 8040b18:	692b      	ldr	r3, [r5, #16]
 8040b1a:	1c5a      	adds	r2, r3, #1
 8040b1c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8040b20:	612a      	str	r2, [r5, #16]
 8040b22:	2201      	movs	r2, #1
 8040b24:	615a      	str	r2, [r3, #20]
 8040b26:	e7c2      	b.n	8040aae <__gethex+0x390>
 8040b28:	692a      	ldr	r2, [r5, #16]
 8040b2a:	454a      	cmp	r2, r9
 8040b2c:	dd0b      	ble.n	8040b46 <__gethex+0x428>
 8040b2e:	2101      	movs	r1, #1
 8040b30:	4628      	mov	r0, r5
 8040b32:	f7ff fda5 	bl	8040680 <rshift>
 8040b36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8040b3a:	3401      	adds	r4, #1
 8040b3c:	42a3      	cmp	r3, r4
 8040b3e:	f6ff aed9 	blt.w	80408f4 <__gethex+0x1d6>
 8040b42:	2701      	movs	r7, #1
 8040b44:	e7c7      	b.n	8040ad6 <__gethex+0x3b8>
 8040b46:	f016 061f 	ands.w	r6, r6, #31
 8040b4a:	d0fa      	beq.n	8040b42 <__gethex+0x424>
 8040b4c:	449a      	add	sl, r3
 8040b4e:	f1c6 0620 	rsb	r6, r6, #32
 8040b52:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8040b56:	f000 f991 	bl	8040e7c <__hi0bits>
 8040b5a:	42b0      	cmp	r0, r6
 8040b5c:	dbe7      	blt.n	8040b2e <__gethex+0x410>
 8040b5e:	e7f0      	b.n	8040b42 <__gethex+0x424>

08040b60 <L_shift>:
 8040b60:	f1c2 0208 	rsb	r2, r2, #8
 8040b64:	0092      	lsls	r2, r2, #2
 8040b66:	b570      	push	{r4, r5, r6, lr}
 8040b68:	f1c2 0620 	rsb	r6, r2, #32
 8040b6c:	6843      	ldr	r3, [r0, #4]
 8040b6e:	6804      	ldr	r4, [r0, #0]
 8040b70:	fa03 f506 	lsl.w	r5, r3, r6
 8040b74:	432c      	orrs	r4, r5
 8040b76:	40d3      	lsrs	r3, r2
 8040b78:	6004      	str	r4, [r0, #0]
 8040b7a:	f840 3f04 	str.w	r3, [r0, #4]!
 8040b7e:	4288      	cmp	r0, r1
 8040b80:	d3f4      	bcc.n	8040b6c <L_shift+0xc>
 8040b82:	bd70      	pop	{r4, r5, r6, pc}

08040b84 <__match>:
 8040b84:	b530      	push	{r4, r5, lr}
 8040b86:	6803      	ldr	r3, [r0, #0]
 8040b88:	3301      	adds	r3, #1
 8040b8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8040b8e:	b914      	cbnz	r4, 8040b96 <__match+0x12>
 8040b90:	6003      	str	r3, [r0, #0]
 8040b92:	2001      	movs	r0, #1
 8040b94:	bd30      	pop	{r4, r5, pc}
 8040b96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8040b9a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8040b9e:	2d19      	cmp	r5, #25
 8040ba0:	bf98      	it	ls
 8040ba2:	3220      	addls	r2, #32
 8040ba4:	42a2      	cmp	r2, r4
 8040ba6:	d0f0      	beq.n	8040b8a <__match+0x6>
 8040ba8:	2000      	movs	r0, #0
 8040baa:	e7f3      	b.n	8040b94 <__match+0x10>

08040bac <__hexnan>:
 8040bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8040bb0:	680b      	ldr	r3, [r1, #0]
 8040bb2:	6801      	ldr	r1, [r0, #0]
 8040bb4:	115f      	asrs	r7, r3, #5
 8040bb6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8040bba:	f013 031f 	ands.w	r3, r3, #31
 8040bbe:	b087      	sub	sp, #28
 8040bc0:	bf18      	it	ne
 8040bc2:	3704      	addne	r7, #4
 8040bc4:	2500      	movs	r5, #0
 8040bc6:	1f3e      	subs	r6, r7, #4
 8040bc8:	4682      	mov	sl, r0
 8040bca:	4690      	mov	r8, r2
 8040bcc:	9301      	str	r3, [sp, #4]
 8040bce:	f847 5c04 	str.w	r5, [r7, #-4]
 8040bd2:	46b1      	mov	r9, r6
 8040bd4:	4634      	mov	r4, r6
 8040bd6:	9502      	str	r5, [sp, #8]
 8040bd8:	46ab      	mov	fp, r5
 8040bda:	784a      	ldrb	r2, [r1, #1]
 8040bdc:	1c4b      	adds	r3, r1, #1
 8040bde:	9303      	str	r3, [sp, #12]
 8040be0:	b342      	cbz	r2, 8040c34 <__hexnan+0x88>
 8040be2:	4610      	mov	r0, r2
 8040be4:	9105      	str	r1, [sp, #20]
 8040be6:	9204      	str	r2, [sp, #16]
 8040be8:	f7ff fd84 	bl	80406f4 <__hexdig_fun>
 8040bec:	2800      	cmp	r0, #0
 8040bee:	d143      	bne.n	8040c78 <__hexnan+0xcc>
 8040bf0:	9a04      	ldr	r2, [sp, #16]
 8040bf2:	9905      	ldr	r1, [sp, #20]
 8040bf4:	2a20      	cmp	r2, #32
 8040bf6:	d818      	bhi.n	8040c2a <__hexnan+0x7e>
 8040bf8:	9b02      	ldr	r3, [sp, #8]
 8040bfa:	459b      	cmp	fp, r3
 8040bfc:	dd13      	ble.n	8040c26 <__hexnan+0x7a>
 8040bfe:	454c      	cmp	r4, r9
 8040c00:	d206      	bcs.n	8040c10 <__hexnan+0x64>
 8040c02:	2d07      	cmp	r5, #7
 8040c04:	dc04      	bgt.n	8040c10 <__hexnan+0x64>
 8040c06:	462a      	mov	r2, r5
 8040c08:	4649      	mov	r1, r9
 8040c0a:	4620      	mov	r0, r4
 8040c0c:	f7ff ffa8 	bl	8040b60 <L_shift>
 8040c10:	4544      	cmp	r4, r8
 8040c12:	d944      	bls.n	8040c9e <__hexnan+0xf2>
 8040c14:	2300      	movs	r3, #0
 8040c16:	f1a4 0904 	sub.w	r9, r4, #4
 8040c1a:	f844 3c04 	str.w	r3, [r4, #-4]
 8040c1e:	f8cd b008 	str.w	fp, [sp, #8]
 8040c22:	464c      	mov	r4, r9
 8040c24:	461d      	mov	r5, r3
 8040c26:	9903      	ldr	r1, [sp, #12]
 8040c28:	e7d7      	b.n	8040bda <__hexnan+0x2e>
 8040c2a:	2a29      	cmp	r2, #41	; 0x29
 8040c2c:	d14a      	bne.n	8040cc4 <__hexnan+0x118>
 8040c2e:	3102      	adds	r1, #2
 8040c30:	f8ca 1000 	str.w	r1, [sl]
 8040c34:	f1bb 0f00 	cmp.w	fp, #0
 8040c38:	d044      	beq.n	8040cc4 <__hexnan+0x118>
 8040c3a:	454c      	cmp	r4, r9
 8040c3c:	d206      	bcs.n	8040c4c <__hexnan+0xa0>
 8040c3e:	2d07      	cmp	r5, #7
 8040c40:	dc04      	bgt.n	8040c4c <__hexnan+0xa0>
 8040c42:	462a      	mov	r2, r5
 8040c44:	4649      	mov	r1, r9
 8040c46:	4620      	mov	r0, r4
 8040c48:	f7ff ff8a 	bl	8040b60 <L_shift>
 8040c4c:	4544      	cmp	r4, r8
 8040c4e:	d928      	bls.n	8040ca2 <__hexnan+0xf6>
 8040c50:	4643      	mov	r3, r8
 8040c52:	f854 2b04 	ldr.w	r2, [r4], #4
 8040c56:	f843 2b04 	str.w	r2, [r3], #4
 8040c5a:	42a6      	cmp	r6, r4
 8040c5c:	d2f9      	bcs.n	8040c52 <__hexnan+0xa6>
 8040c5e:	2200      	movs	r2, #0
 8040c60:	f843 2b04 	str.w	r2, [r3], #4
 8040c64:	429e      	cmp	r6, r3
 8040c66:	d2fb      	bcs.n	8040c60 <__hexnan+0xb4>
 8040c68:	6833      	ldr	r3, [r6, #0]
 8040c6a:	b91b      	cbnz	r3, 8040c74 <__hexnan+0xc8>
 8040c6c:	4546      	cmp	r6, r8
 8040c6e:	d127      	bne.n	8040cc0 <__hexnan+0x114>
 8040c70:	2301      	movs	r3, #1
 8040c72:	6033      	str	r3, [r6, #0]
 8040c74:	2005      	movs	r0, #5
 8040c76:	e026      	b.n	8040cc6 <__hexnan+0x11a>
 8040c78:	3501      	adds	r5, #1
 8040c7a:	2d08      	cmp	r5, #8
 8040c7c:	f10b 0b01 	add.w	fp, fp, #1
 8040c80:	dd06      	ble.n	8040c90 <__hexnan+0xe4>
 8040c82:	4544      	cmp	r4, r8
 8040c84:	d9cf      	bls.n	8040c26 <__hexnan+0x7a>
 8040c86:	2300      	movs	r3, #0
 8040c88:	f844 3c04 	str.w	r3, [r4, #-4]
 8040c8c:	2501      	movs	r5, #1
 8040c8e:	3c04      	subs	r4, #4
 8040c90:	6822      	ldr	r2, [r4, #0]
 8040c92:	f000 000f 	and.w	r0, r0, #15
 8040c96:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8040c9a:	6020      	str	r0, [r4, #0]
 8040c9c:	e7c3      	b.n	8040c26 <__hexnan+0x7a>
 8040c9e:	2508      	movs	r5, #8
 8040ca0:	e7c1      	b.n	8040c26 <__hexnan+0x7a>
 8040ca2:	9b01      	ldr	r3, [sp, #4]
 8040ca4:	2b00      	cmp	r3, #0
 8040ca6:	d0df      	beq.n	8040c68 <__hexnan+0xbc>
 8040ca8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8040cac:	f1c3 0320 	rsb	r3, r3, #32
 8040cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8040cb4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8040cb8:	401a      	ands	r2, r3
 8040cba:	f847 2c04 	str.w	r2, [r7, #-4]
 8040cbe:	e7d3      	b.n	8040c68 <__hexnan+0xbc>
 8040cc0:	3e04      	subs	r6, #4
 8040cc2:	e7d1      	b.n	8040c68 <__hexnan+0xbc>
 8040cc4:	2004      	movs	r0, #4
 8040cc6:	b007      	add	sp, #28
 8040cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08040ccc <__localeconv_l>:
 8040ccc:	30f0      	adds	r0, #240	; 0xf0
 8040cce:	4770      	bx	lr

08040cd0 <__ascii_mbtowc>:
 8040cd0:	b082      	sub	sp, #8
 8040cd2:	b901      	cbnz	r1, 8040cd6 <__ascii_mbtowc+0x6>
 8040cd4:	a901      	add	r1, sp, #4
 8040cd6:	b142      	cbz	r2, 8040cea <__ascii_mbtowc+0x1a>
 8040cd8:	b14b      	cbz	r3, 8040cee <__ascii_mbtowc+0x1e>
 8040cda:	7813      	ldrb	r3, [r2, #0]
 8040cdc:	600b      	str	r3, [r1, #0]
 8040cde:	7812      	ldrb	r2, [r2, #0]
 8040ce0:	1c10      	adds	r0, r2, #0
 8040ce2:	bf18      	it	ne
 8040ce4:	2001      	movne	r0, #1
 8040ce6:	b002      	add	sp, #8
 8040ce8:	4770      	bx	lr
 8040cea:	4610      	mov	r0, r2
 8040cec:	e7fb      	b.n	8040ce6 <__ascii_mbtowc+0x16>
 8040cee:	f06f 0001 	mvn.w	r0, #1
 8040cf2:	e7f8      	b.n	8040ce6 <__ascii_mbtowc+0x16>

08040cf4 <_Balloc>:
 8040cf4:	b570      	push	{r4, r5, r6, lr}
 8040cf6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8040cf8:	4604      	mov	r4, r0
 8040cfa:	460e      	mov	r6, r1
 8040cfc:	b93d      	cbnz	r5, 8040d0e <_Balloc+0x1a>
 8040cfe:	2010      	movs	r0, #16
 8040d00:	f000 ff5e 	bl	8041bc0 <malloc>
 8040d04:	6260      	str	r0, [r4, #36]	; 0x24
 8040d06:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8040d0a:	6005      	str	r5, [r0, #0]
 8040d0c:	60c5      	str	r5, [r0, #12]
 8040d0e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8040d10:	68eb      	ldr	r3, [r5, #12]
 8040d12:	b183      	cbz	r3, 8040d36 <_Balloc+0x42>
 8040d14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8040d16:	68db      	ldr	r3, [r3, #12]
 8040d18:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8040d1c:	b9b8      	cbnz	r0, 8040d4e <_Balloc+0x5a>
 8040d1e:	2101      	movs	r1, #1
 8040d20:	fa01 f506 	lsl.w	r5, r1, r6
 8040d24:	1d6a      	adds	r2, r5, #5
 8040d26:	0092      	lsls	r2, r2, #2
 8040d28:	4620      	mov	r0, r4
 8040d2a:	f000 fbe2 	bl	80414f2 <_calloc_r>
 8040d2e:	b160      	cbz	r0, 8040d4a <_Balloc+0x56>
 8040d30:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8040d34:	e00e      	b.n	8040d54 <_Balloc+0x60>
 8040d36:	2221      	movs	r2, #33	; 0x21
 8040d38:	2104      	movs	r1, #4
 8040d3a:	4620      	mov	r0, r4
 8040d3c:	f000 fbd9 	bl	80414f2 <_calloc_r>
 8040d40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8040d42:	60e8      	str	r0, [r5, #12]
 8040d44:	68db      	ldr	r3, [r3, #12]
 8040d46:	2b00      	cmp	r3, #0
 8040d48:	d1e4      	bne.n	8040d14 <_Balloc+0x20>
 8040d4a:	2000      	movs	r0, #0
 8040d4c:	bd70      	pop	{r4, r5, r6, pc}
 8040d4e:	6802      	ldr	r2, [r0, #0]
 8040d50:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8040d54:	2300      	movs	r3, #0
 8040d56:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8040d5a:	e7f7      	b.n	8040d4c <_Balloc+0x58>

08040d5c <_Bfree>:
 8040d5c:	b570      	push	{r4, r5, r6, lr}
 8040d5e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8040d60:	4606      	mov	r6, r0
 8040d62:	460d      	mov	r5, r1
 8040d64:	b93c      	cbnz	r4, 8040d76 <_Bfree+0x1a>
 8040d66:	2010      	movs	r0, #16
 8040d68:	f000 ff2a 	bl	8041bc0 <malloc>
 8040d6c:	6270      	str	r0, [r6, #36]	; 0x24
 8040d6e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8040d72:	6004      	str	r4, [r0, #0]
 8040d74:	60c4      	str	r4, [r0, #12]
 8040d76:	b13d      	cbz	r5, 8040d88 <_Bfree+0x2c>
 8040d78:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8040d7a:	686a      	ldr	r2, [r5, #4]
 8040d7c:	68db      	ldr	r3, [r3, #12]
 8040d7e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8040d82:	6029      	str	r1, [r5, #0]
 8040d84:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8040d88:	bd70      	pop	{r4, r5, r6, pc}

08040d8a <__multadd>:
 8040d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8040d8e:	690d      	ldr	r5, [r1, #16]
 8040d90:	461f      	mov	r7, r3
 8040d92:	4606      	mov	r6, r0
 8040d94:	460c      	mov	r4, r1
 8040d96:	f101 0c14 	add.w	ip, r1, #20
 8040d9a:	2300      	movs	r3, #0
 8040d9c:	f8dc 0000 	ldr.w	r0, [ip]
 8040da0:	b281      	uxth	r1, r0
 8040da2:	fb02 7101 	mla	r1, r2, r1, r7
 8040da6:	0c0f      	lsrs	r7, r1, #16
 8040da8:	0c00      	lsrs	r0, r0, #16
 8040daa:	fb02 7000 	mla	r0, r2, r0, r7
 8040dae:	b289      	uxth	r1, r1
 8040db0:	3301      	adds	r3, #1
 8040db2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8040db6:	429d      	cmp	r5, r3
 8040db8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8040dbc:	f84c 1b04 	str.w	r1, [ip], #4
 8040dc0:	dcec      	bgt.n	8040d9c <__multadd+0x12>
 8040dc2:	b1d7      	cbz	r7, 8040dfa <__multadd+0x70>
 8040dc4:	68a3      	ldr	r3, [r4, #8]
 8040dc6:	42ab      	cmp	r3, r5
 8040dc8:	dc12      	bgt.n	8040df0 <__multadd+0x66>
 8040dca:	6861      	ldr	r1, [r4, #4]
 8040dcc:	4630      	mov	r0, r6
 8040dce:	3101      	adds	r1, #1
 8040dd0:	f7ff ff90 	bl	8040cf4 <_Balloc>
 8040dd4:	6922      	ldr	r2, [r4, #16]
 8040dd6:	3202      	adds	r2, #2
 8040dd8:	f104 010c 	add.w	r1, r4, #12
 8040ddc:	4680      	mov	r8, r0
 8040dde:	0092      	lsls	r2, r2, #2
 8040de0:	300c      	adds	r0, #12
 8040de2:	f7fe fd8a 	bl	803f8fa <memcpy>
 8040de6:	4621      	mov	r1, r4
 8040de8:	4630      	mov	r0, r6
 8040dea:	f7ff ffb7 	bl	8040d5c <_Bfree>
 8040dee:	4644      	mov	r4, r8
 8040df0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8040df4:	3501      	adds	r5, #1
 8040df6:	615f      	str	r7, [r3, #20]
 8040df8:	6125      	str	r5, [r4, #16]
 8040dfa:	4620      	mov	r0, r4
 8040dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08040e00 <__s2b>:
 8040e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8040e04:	460c      	mov	r4, r1
 8040e06:	4615      	mov	r5, r2
 8040e08:	461f      	mov	r7, r3
 8040e0a:	2209      	movs	r2, #9
 8040e0c:	3308      	adds	r3, #8
 8040e0e:	4606      	mov	r6, r0
 8040e10:	fb93 f3f2 	sdiv	r3, r3, r2
 8040e14:	2100      	movs	r1, #0
 8040e16:	2201      	movs	r2, #1
 8040e18:	429a      	cmp	r2, r3
 8040e1a:	db20      	blt.n	8040e5e <__s2b+0x5e>
 8040e1c:	4630      	mov	r0, r6
 8040e1e:	f7ff ff69 	bl	8040cf4 <_Balloc>
 8040e22:	9b08      	ldr	r3, [sp, #32]
 8040e24:	6143      	str	r3, [r0, #20]
 8040e26:	2d09      	cmp	r5, #9
 8040e28:	f04f 0301 	mov.w	r3, #1
 8040e2c:	6103      	str	r3, [r0, #16]
 8040e2e:	dd19      	ble.n	8040e64 <__s2b+0x64>
 8040e30:	f104 0809 	add.w	r8, r4, #9
 8040e34:	46c1      	mov	r9, r8
 8040e36:	442c      	add	r4, r5
 8040e38:	f819 3b01 	ldrb.w	r3, [r9], #1
 8040e3c:	4601      	mov	r1, r0
 8040e3e:	3b30      	subs	r3, #48	; 0x30
 8040e40:	220a      	movs	r2, #10
 8040e42:	4630      	mov	r0, r6
 8040e44:	f7ff ffa1 	bl	8040d8a <__multadd>
 8040e48:	45a1      	cmp	r9, r4
 8040e4a:	d1f5      	bne.n	8040e38 <__s2b+0x38>
 8040e4c:	eb08 0405 	add.w	r4, r8, r5
 8040e50:	3c08      	subs	r4, #8
 8040e52:	1b2d      	subs	r5, r5, r4
 8040e54:	1963      	adds	r3, r4, r5
 8040e56:	42bb      	cmp	r3, r7
 8040e58:	db07      	blt.n	8040e6a <__s2b+0x6a>
 8040e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8040e5e:	0052      	lsls	r2, r2, #1
 8040e60:	3101      	adds	r1, #1
 8040e62:	e7d9      	b.n	8040e18 <__s2b+0x18>
 8040e64:	340a      	adds	r4, #10
 8040e66:	2509      	movs	r5, #9
 8040e68:	e7f3      	b.n	8040e52 <__s2b+0x52>
 8040e6a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8040e6e:	4601      	mov	r1, r0
 8040e70:	3b30      	subs	r3, #48	; 0x30
 8040e72:	220a      	movs	r2, #10
 8040e74:	4630      	mov	r0, r6
 8040e76:	f7ff ff88 	bl	8040d8a <__multadd>
 8040e7a:	e7eb      	b.n	8040e54 <__s2b+0x54>

08040e7c <__hi0bits>:
 8040e7c:	0c02      	lsrs	r2, r0, #16
 8040e7e:	0412      	lsls	r2, r2, #16
 8040e80:	4603      	mov	r3, r0
 8040e82:	b9b2      	cbnz	r2, 8040eb2 <__hi0bits+0x36>
 8040e84:	0403      	lsls	r3, r0, #16
 8040e86:	2010      	movs	r0, #16
 8040e88:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8040e8c:	bf04      	itt	eq
 8040e8e:	021b      	lsleq	r3, r3, #8
 8040e90:	3008      	addeq	r0, #8
 8040e92:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8040e96:	bf04      	itt	eq
 8040e98:	011b      	lsleq	r3, r3, #4
 8040e9a:	3004      	addeq	r0, #4
 8040e9c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8040ea0:	bf04      	itt	eq
 8040ea2:	009b      	lsleq	r3, r3, #2
 8040ea4:	3002      	addeq	r0, #2
 8040ea6:	2b00      	cmp	r3, #0
 8040ea8:	db06      	blt.n	8040eb8 <__hi0bits+0x3c>
 8040eaa:	005b      	lsls	r3, r3, #1
 8040eac:	d503      	bpl.n	8040eb6 <__hi0bits+0x3a>
 8040eae:	3001      	adds	r0, #1
 8040eb0:	4770      	bx	lr
 8040eb2:	2000      	movs	r0, #0
 8040eb4:	e7e8      	b.n	8040e88 <__hi0bits+0xc>
 8040eb6:	2020      	movs	r0, #32
 8040eb8:	4770      	bx	lr

08040eba <__lo0bits>:
 8040eba:	6803      	ldr	r3, [r0, #0]
 8040ebc:	f013 0207 	ands.w	r2, r3, #7
 8040ec0:	4601      	mov	r1, r0
 8040ec2:	d00b      	beq.n	8040edc <__lo0bits+0x22>
 8040ec4:	07da      	lsls	r2, r3, #31
 8040ec6:	d423      	bmi.n	8040f10 <__lo0bits+0x56>
 8040ec8:	0798      	lsls	r0, r3, #30
 8040eca:	bf49      	itett	mi
 8040ecc:	085b      	lsrmi	r3, r3, #1
 8040ece:	089b      	lsrpl	r3, r3, #2
 8040ed0:	2001      	movmi	r0, #1
 8040ed2:	600b      	strmi	r3, [r1, #0]
 8040ed4:	bf5c      	itt	pl
 8040ed6:	600b      	strpl	r3, [r1, #0]
 8040ed8:	2002      	movpl	r0, #2
 8040eda:	4770      	bx	lr
 8040edc:	b298      	uxth	r0, r3
 8040ede:	b9a8      	cbnz	r0, 8040f0c <__lo0bits+0x52>
 8040ee0:	0c1b      	lsrs	r3, r3, #16
 8040ee2:	2010      	movs	r0, #16
 8040ee4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8040ee8:	bf04      	itt	eq
 8040eea:	0a1b      	lsreq	r3, r3, #8
 8040eec:	3008      	addeq	r0, #8
 8040eee:	071a      	lsls	r2, r3, #28
 8040ef0:	bf04      	itt	eq
 8040ef2:	091b      	lsreq	r3, r3, #4
 8040ef4:	3004      	addeq	r0, #4
 8040ef6:	079a      	lsls	r2, r3, #30
 8040ef8:	bf04      	itt	eq
 8040efa:	089b      	lsreq	r3, r3, #2
 8040efc:	3002      	addeq	r0, #2
 8040efe:	07da      	lsls	r2, r3, #31
 8040f00:	d402      	bmi.n	8040f08 <__lo0bits+0x4e>
 8040f02:	085b      	lsrs	r3, r3, #1
 8040f04:	d006      	beq.n	8040f14 <__lo0bits+0x5a>
 8040f06:	3001      	adds	r0, #1
 8040f08:	600b      	str	r3, [r1, #0]
 8040f0a:	4770      	bx	lr
 8040f0c:	4610      	mov	r0, r2
 8040f0e:	e7e9      	b.n	8040ee4 <__lo0bits+0x2a>
 8040f10:	2000      	movs	r0, #0
 8040f12:	4770      	bx	lr
 8040f14:	2020      	movs	r0, #32
 8040f16:	4770      	bx	lr

08040f18 <__i2b>:
 8040f18:	b510      	push	{r4, lr}
 8040f1a:	460c      	mov	r4, r1
 8040f1c:	2101      	movs	r1, #1
 8040f1e:	f7ff fee9 	bl	8040cf4 <_Balloc>
 8040f22:	2201      	movs	r2, #1
 8040f24:	6144      	str	r4, [r0, #20]
 8040f26:	6102      	str	r2, [r0, #16]
 8040f28:	bd10      	pop	{r4, pc}

08040f2a <__multiply>:
 8040f2a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8040f2e:	4614      	mov	r4, r2
 8040f30:	690a      	ldr	r2, [r1, #16]
 8040f32:	6923      	ldr	r3, [r4, #16]
 8040f34:	429a      	cmp	r2, r3
 8040f36:	bfb8      	it	lt
 8040f38:	460b      	movlt	r3, r1
 8040f3a:	4688      	mov	r8, r1
 8040f3c:	bfbc      	itt	lt
 8040f3e:	46a0      	movlt	r8, r4
 8040f40:	461c      	movlt	r4, r3
 8040f42:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8040f46:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8040f4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8040f4e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8040f52:	eb07 0609 	add.w	r6, r7, r9
 8040f56:	42b3      	cmp	r3, r6
 8040f58:	bfb8      	it	lt
 8040f5a:	3101      	addlt	r1, #1
 8040f5c:	f7ff feca 	bl	8040cf4 <_Balloc>
 8040f60:	f100 0514 	add.w	r5, r0, #20
 8040f64:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8040f68:	462b      	mov	r3, r5
 8040f6a:	2200      	movs	r2, #0
 8040f6c:	4573      	cmp	r3, lr
 8040f6e:	d316      	bcc.n	8040f9e <__multiply+0x74>
 8040f70:	f104 0214 	add.w	r2, r4, #20
 8040f74:	f108 0114 	add.w	r1, r8, #20
 8040f78:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8040f7c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8040f80:	9300      	str	r3, [sp, #0]
 8040f82:	9b00      	ldr	r3, [sp, #0]
 8040f84:	9201      	str	r2, [sp, #4]
 8040f86:	4293      	cmp	r3, r2
 8040f88:	d80c      	bhi.n	8040fa4 <__multiply+0x7a>
 8040f8a:	2e00      	cmp	r6, #0
 8040f8c:	dd03      	ble.n	8040f96 <__multiply+0x6c>
 8040f8e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8040f92:	2b00      	cmp	r3, #0
 8040f94:	d05d      	beq.n	8041052 <__multiply+0x128>
 8040f96:	6106      	str	r6, [r0, #16]
 8040f98:	b003      	add	sp, #12
 8040f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8040f9e:	f843 2b04 	str.w	r2, [r3], #4
 8040fa2:	e7e3      	b.n	8040f6c <__multiply+0x42>
 8040fa4:	f8b2 b000 	ldrh.w	fp, [r2]
 8040fa8:	f1bb 0f00 	cmp.w	fp, #0
 8040fac:	d023      	beq.n	8040ff6 <__multiply+0xcc>
 8040fae:	4689      	mov	r9, r1
 8040fb0:	46ac      	mov	ip, r5
 8040fb2:	f04f 0800 	mov.w	r8, #0
 8040fb6:	f859 4b04 	ldr.w	r4, [r9], #4
 8040fba:	f8dc a000 	ldr.w	sl, [ip]
 8040fbe:	b2a3      	uxth	r3, r4
 8040fc0:	fa1f fa8a 	uxth.w	sl, sl
 8040fc4:	fb0b a303 	mla	r3, fp, r3, sl
 8040fc8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8040fcc:	f8dc 4000 	ldr.w	r4, [ip]
 8040fd0:	4443      	add	r3, r8
 8040fd2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8040fd6:	fb0b 840a 	mla	r4, fp, sl, r8
 8040fda:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8040fde:	46e2      	mov	sl, ip
 8040fe0:	b29b      	uxth	r3, r3
 8040fe2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8040fe6:	454f      	cmp	r7, r9
 8040fe8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8040fec:	f84a 3b04 	str.w	r3, [sl], #4
 8040ff0:	d82b      	bhi.n	804104a <__multiply+0x120>
 8040ff2:	f8cc 8004 	str.w	r8, [ip, #4]
 8040ff6:	9b01      	ldr	r3, [sp, #4]
 8040ff8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8040ffc:	3204      	adds	r2, #4
 8040ffe:	f1ba 0f00 	cmp.w	sl, #0
 8041002:	d020      	beq.n	8041046 <__multiply+0x11c>
 8041004:	682b      	ldr	r3, [r5, #0]
 8041006:	4689      	mov	r9, r1
 8041008:	46a8      	mov	r8, r5
 804100a:	f04f 0b00 	mov.w	fp, #0
 804100e:	f8b9 c000 	ldrh.w	ip, [r9]
 8041012:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8041016:	fb0a 440c 	mla	r4, sl, ip, r4
 804101a:	445c      	add	r4, fp
 804101c:	46c4      	mov	ip, r8
 804101e:	b29b      	uxth	r3, r3
 8041020:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8041024:	f84c 3b04 	str.w	r3, [ip], #4
 8041028:	f859 3b04 	ldr.w	r3, [r9], #4
 804102c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8041030:	0c1b      	lsrs	r3, r3, #16
 8041032:	fb0a b303 	mla	r3, sl, r3, fp
 8041036:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 804103a:	454f      	cmp	r7, r9
 804103c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8041040:	d805      	bhi.n	804104e <__multiply+0x124>
 8041042:	f8c8 3004 	str.w	r3, [r8, #4]
 8041046:	3504      	adds	r5, #4
 8041048:	e79b      	b.n	8040f82 <__multiply+0x58>
 804104a:	46d4      	mov	ip, sl
 804104c:	e7b3      	b.n	8040fb6 <__multiply+0x8c>
 804104e:	46e0      	mov	r8, ip
 8041050:	e7dd      	b.n	804100e <__multiply+0xe4>
 8041052:	3e01      	subs	r6, #1
 8041054:	e799      	b.n	8040f8a <__multiply+0x60>
	...

08041058 <__pow5mult>:
 8041058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 804105c:	4615      	mov	r5, r2
 804105e:	f012 0203 	ands.w	r2, r2, #3
 8041062:	4606      	mov	r6, r0
 8041064:	460f      	mov	r7, r1
 8041066:	d007      	beq.n	8041078 <__pow5mult+0x20>
 8041068:	3a01      	subs	r2, #1
 804106a:	4c21      	ldr	r4, [pc, #132]	; (80410f0 <__pow5mult+0x98>)
 804106c:	2300      	movs	r3, #0
 804106e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8041072:	f7ff fe8a 	bl	8040d8a <__multadd>
 8041076:	4607      	mov	r7, r0
 8041078:	10ad      	asrs	r5, r5, #2
 804107a:	d035      	beq.n	80410e8 <__pow5mult+0x90>
 804107c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 804107e:	b93c      	cbnz	r4, 8041090 <__pow5mult+0x38>
 8041080:	2010      	movs	r0, #16
 8041082:	f000 fd9d 	bl	8041bc0 <malloc>
 8041086:	6270      	str	r0, [r6, #36]	; 0x24
 8041088:	e9c0 4401 	strd	r4, r4, [r0, #4]
 804108c:	6004      	str	r4, [r0, #0]
 804108e:	60c4      	str	r4, [r0, #12]
 8041090:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8041094:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8041098:	b94c      	cbnz	r4, 80410ae <__pow5mult+0x56>
 804109a:	f240 2171 	movw	r1, #625	; 0x271
 804109e:	4630      	mov	r0, r6
 80410a0:	f7ff ff3a 	bl	8040f18 <__i2b>
 80410a4:	2300      	movs	r3, #0
 80410a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80410aa:	4604      	mov	r4, r0
 80410ac:	6003      	str	r3, [r0, #0]
 80410ae:	f04f 0800 	mov.w	r8, #0
 80410b2:	07eb      	lsls	r3, r5, #31
 80410b4:	d50a      	bpl.n	80410cc <__pow5mult+0x74>
 80410b6:	4639      	mov	r1, r7
 80410b8:	4622      	mov	r2, r4
 80410ba:	4630      	mov	r0, r6
 80410bc:	f7ff ff35 	bl	8040f2a <__multiply>
 80410c0:	4639      	mov	r1, r7
 80410c2:	4681      	mov	r9, r0
 80410c4:	4630      	mov	r0, r6
 80410c6:	f7ff fe49 	bl	8040d5c <_Bfree>
 80410ca:	464f      	mov	r7, r9
 80410cc:	106d      	asrs	r5, r5, #1
 80410ce:	d00b      	beq.n	80410e8 <__pow5mult+0x90>
 80410d0:	6820      	ldr	r0, [r4, #0]
 80410d2:	b938      	cbnz	r0, 80410e4 <__pow5mult+0x8c>
 80410d4:	4622      	mov	r2, r4
 80410d6:	4621      	mov	r1, r4
 80410d8:	4630      	mov	r0, r6
 80410da:	f7ff ff26 	bl	8040f2a <__multiply>
 80410de:	6020      	str	r0, [r4, #0]
 80410e0:	f8c0 8000 	str.w	r8, [r0]
 80410e4:	4604      	mov	r4, r0
 80410e6:	e7e4      	b.n	80410b2 <__pow5mult+0x5a>
 80410e8:	4638      	mov	r0, r7
 80410ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80410ee:	bf00      	nop
 80410f0:	08056380 	.word	0x08056380

080410f4 <__lshift>:
 80410f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80410f8:	460c      	mov	r4, r1
 80410fa:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80410fe:	6923      	ldr	r3, [r4, #16]
 8041100:	6849      	ldr	r1, [r1, #4]
 8041102:	eb0a 0903 	add.w	r9, sl, r3
 8041106:	68a3      	ldr	r3, [r4, #8]
 8041108:	4607      	mov	r7, r0
 804110a:	4616      	mov	r6, r2
 804110c:	f109 0501 	add.w	r5, r9, #1
 8041110:	42ab      	cmp	r3, r5
 8041112:	db32      	blt.n	804117a <__lshift+0x86>
 8041114:	4638      	mov	r0, r7
 8041116:	f7ff fded 	bl	8040cf4 <_Balloc>
 804111a:	2300      	movs	r3, #0
 804111c:	4680      	mov	r8, r0
 804111e:	f100 0114 	add.w	r1, r0, #20
 8041122:	461a      	mov	r2, r3
 8041124:	4553      	cmp	r3, sl
 8041126:	db2b      	blt.n	8041180 <__lshift+0x8c>
 8041128:	6920      	ldr	r0, [r4, #16]
 804112a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 804112e:	f104 0314 	add.w	r3, r4, #20
 8041132:	f016 021f 	ands.w	r2, r6, #31
 8041136:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 804113a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 804113e:	d025      	beq.n	804118c <__lshift+0x98>
 8041140:	f1c2 0e20 	rsb	lr, r2, #32
 8041144:	2000      	movs	r0, #0
 8041146:	681e      	ldr	r6, [r3, #0]
 8041148:	468a      	mov	sl, r1
 804114a:	4096      	lsls	r6, r2
 804114c:	4330      	orrs	r0, r6
 804114e:	f84a 0b04 	str.w	r0, [sl], #4
 8041152:	f853 0b04 	ldr.w	r0, [r3], #4
 8041156:	459c      	cmp	ip, r3
 8041158:	fa20 f00e 	lsr.w	r0, r0, lr
 804115c:	d814      	bhi.n	8041188 <__lshift+0x94>
 804115e:	6048      	str	r0, [r1, #4]
 8041160:	b108      	cbz	r0, 8041166 <__lshift+0x72>
 8041162:	f109 0502 	add.w	r5, r9, #2
 8041166:	3d01      	subs	r5, #1
 8041168:	4638      	mov	r0, r7
 804116a:	f8c8 5010 	str.w	r5, [r8, #16]
 804116e:	4621      	mov	r1, r4
 8041170:	f7ff fdf4 	bl	8040d5c <_Bfree>
 8041174:	4640      	mov	r0, r8
 8041176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804117a:	3101      	adds	r1, #1
 804117c:	005b      	lsls	r3, r3, #1
 804117e:	e7c7      	b.n	8041110 <__lshift+0x1c>
 8041180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8041184:	3301      	adds	r3, #1
 8041186:	e7cd      	b.n	8041124 <__lshift+0x30>
 8041188:	4651      	mov	r1, sl
 804118a:	e7dc      	b.n	8041146 <__lshift+0x52>
 804118c:	3904      	subs	r1, #4
 804118e:	f853 2b04 	ldr.w	r2, [r3], #4
 8041192:	f841 2f04 	str.w	r2, [r1, #4]!
 8041196:	459c      	cmp	ip, r3
 8041198:	d8f9      	bhi.n	804118e <__lshift+0x9a>
 804119a:	e7e4      	b.n	8041166 <__lshift+0x72>

0804119c <__mcmp>:
 804119c:	6903      	ldr	r3, [r0, #16]
 804119e:	690a      	ldr	r2, [r1, #16]
 80411a0:	1a9b      	subs	r3, r3, r2
 80411a2:	b530      	push	{r4, r5, lr}
 80411a4:	d10c      	bne.n	80411c0 <__mcmp+0x24>
 80411a6:	0092      	lsls	r2, r2, #2
 80411a8:	3014      	adds	r0, #20
 80411aa:	3114      	adds	r1, #20
 80411ac:	1884      	adds	r4, r0, r2
 80411ae:	4411      	add	r1, r2
 80411b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80411b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80411b8:	4295      	cmp	r5, r2
 80411ba:	d003      	beq.n	80411c4 <__mcmp+0x28>
 80411bc:	d305      	bcc.n	80411ca <__mcmp+0x2e>
 80411be:	2301      	movs	r3, #1
 80411c0:	4618      	mov	r0, r3
 80411c2:	bd30      	pop	{r4, r5, pc}
 80411c4:	42a0      	cmp	r0, r4
 80411c6:	d3f3      	bcc.n	80411b0 <__mcmp+0x14>
 80411c8:	e7fa      	b.n	80411c0 <__mcmp+0x24>
 80411ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80411ce:	e7f7      	b.n	80411c0 <__mcmp+0x24>

080411d0 <__mdiff>:
 80411d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80411d4:	460d      	mov	r5, r1
 80411d6:	4607      	mov	r7, r0
 80411d8:	4611      	mov	r1, r2
 80411da:	4628      	mov	r0, r5
 80411dc:	4614      	mov	r4, r2
 80411de:	f7ff ffdd 	bl	804119c <__mcmp>
 80411e2:	1e06      	subs	r6, r0, #0
 80411e4:	d108      	bne.n	80411f8 <__mdiff+0x28>
 80411e6:	4631      	mov	r1, r6
 80411e8:	4638      	mov	r0, r7
 80411ea:	f7ff fd83 	bl	8040cf4 <_Balloc>
 80411ee:	2301      	movs	r3, #1
 80411f0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80411f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80411f8:	bfa4      	itt	ge
 80411fa:	4623      	movge	r3, r4
 80411fc:	462c      	movge	r4, r5
 80411fe:	4638      	mov	r0, r7
 8041200:	6861      	ldr	r1, [r4, #4]
 8041202:	bfa6      	itte	ge
 8041204:	461d      	movge	r5, r3
 8041206:	2600      	movge	r6, #0
 8041208:	2601      	movlt	r6, #1
 804120a:	f7ff fd73 	bl	8040cf4 <_Balloc>
 804120e:	692b      	ldr	r3, [r5, #16]
 8041210:	60c6      	str	r6, [r0, #12]
 8041212:	6926      	ldr	r6, [r4, #16]
 8041214:	f105 0914 	add.w	r9, r5, #20
 8041218:	f104 0214 	add.w	r2, r4, #20
 804121c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8041220:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8041224:	f100 0514 	add.w	r5, r0, #20
 8041228:	f04f 0e00 	mov.w	lr, #0
 804122c:	f852 ab04 	ldr.w	sl, [r2], #4
 8041230:	f859 4b04 	ldr.w	r4, [r9], #4
 8041234:	fa1e f18a 	uxtah	r1, lr, sl
 8041238:	b2a3      	uxth	r3, r4
 804123a:	1ac9      	subs	r1, r1, r3
 804123c:	0c23      	lsrs	r3, r4, #16
 804123e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8041242:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8041246:	b289      	uxth	r1, r1
 8041248:	ea4f 4e23 	mov.w	lr, r3, asr #16
 804124c:	45c8      	cmp	r8, r9
 804124e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8041252:	4694      	mov	ip, r2
 8041254:	f845 3b04 	str.w	r3, [r5], #4
 8041258:	d8e8      	bhi.n	804122c <__mdiff+0x5c>
 804125a:	45bc      	cmp	ip, r7
 804125c:	d304      	bcc.n	8041268 <__mdiff+0x98>
 804125e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8041262:	b183      	cbz	r3, 8041286 <__mdiff+0xb6>
 8041264:	6106      	str	r6, [r0, #16]
 8041266:	e7c5      	b.n	80411f4 <__mdiff+0x24>
 8041268:	f85c 1b04 	ldr.w	r1, [ip], #4
 804126c:	fa1e f381 	uxtah	r3, lr, r1
 8041270:	141a      	asrs	r2, r3, #16
 8041272:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8041276:	b29b      	uxth	r3, r3
 8041278:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 804127c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8041280:	f845 3b04 	str.w	r3, [r5], #4
 8041284:	e7e9      	b.n	804125a <__mdiff+0x8a>
 8041286:	3e01      	subs	r6, #1
 8041288:	e7e9      	b.n	804125e <__mdiff+0x8e>
	...

0804128c <__ulp>:
 804128c:	4b12      	ldr	r3, [pc, #72]	; (80412d8 <__ulp+0x4c>)
 804128e:	ee10 2a90 	vmov	r2, s1
 8041292:	401a      	ands	r2, r3
 8041294:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8041298:	2b00      	cmp	r3, #0
 804129a:	dd04      	ble.n	80412a6 <__ulp+0x1a>
 804129c:	2000      	movs	r0, #0
 804129e:	4619      	mov	r1, r3
 80412a0:	ec41 0b10 	vmov	d0, r0, r1
 80412a4:	4770      	bx	lr
 80412a6:	425b      	negs	r3, r3
 80412a8:	151b      	asrs	r3, r3, #20
 80412aa:	2b13      	cmp	r3, #19
 80412ac:	f04f 0000 	mov.w	r0, #0
 80412b0:	f04f 0100 	mov.w	r1, #0
 80412b4:	dc04      	bgt.n	80412c0 <__ulp+0x34>
 80412b6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80412ba:	fa42 f103 	asr.w	r1, r2, r3
 80412be:	e7ef      	b.n	80412a0 <__ulp+0x14>
 80412c0:	3b14      	subs	r3, #20
 80412c2:	2b1e      	cmp	r3, #30
 80412c4:	f04f 0201 	mov.w	r2, #1
 80412c8:	bfda      	itte	le
 80412ca:	f1c3 031f 	rsble	r3, r3, #31
 80412ce:	fa02 f303 	lslle.w	r3, r2, r3
 80412d2:	4613      	movgt	r3, r2
 80412d4:	4618      	mov	r0, r3
 80412d6:	e7e3      	b.n	80412a0 <__ulp+0x14>
 80412d8:	7ff00000 	.word	0x7ff00000

080412dc <__b2d>:
 80412dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80412de:	6905      	ldr	r5, [r0, #16]
 80412e0:	f100 0714 	add.w	r7, r0, #20
 80412e4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80412e8:	1f2e      	subs	r6, r5, #4
 80412ea:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80412ee:	4620      	mov	r0, r4
 80412f0:	f7ff fdc4 	bl	8040e7c <__hi0bits>
 80412f4:	f1c0 0320 	rsb	r3, r0, #32
 80412f8:	280a      	cmp	r0, #10
 80412fa:	600b      	str	r3, [r1, #0]
 80412fc:	f8df c074 	ldr.w	ip, [pc, #116]	; 8041374 <__b2d+0x98>
 8041300:	dc14      	bgt.n	804132c <__b2d+0x50>
 8041302:	f1c0 0e0b 	rsb	lr, r0, #11
 8041306:	fa24 f10e 	lsr.w	r1, r4, lr
 804130a:	42b7      	cmp	r7, r6
 804130c:	ea41 030c 	orr.w	r3, r1, ip
 8041310:	bf34      	ite	cc
 8041312:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8041316:	2100      	movcs	r1, #0
 8041318:	3015      	adds	r0, #21
 804131a:	fa04 f000 	lsl.w	r0, r4, r0
 804131e:	fa21 f10e 	lsr.w	r1, r1, lr
 8041322:	ea40 0201 	orr.w	r2, r0, r1
 8041326:	ec43 2b10 	vmov	d0, r2, r3
 804132a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804132c:	42b7      	cmp	r7, r6
 804132e:	bf3a      	itte	cc
 8041330:	f1a5 0608 	subcc.w	r6, r5, #8
 8041334:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8041338:	2100      	movcs	r1, #0
 804133a:	380b      	subs	r0, #11
 804133c:	d015      	beq.n	804136a <__b2d+0x8e>
 804133e:	4084      	lsls	r4, r0
 8041340:	f1c0 0520 	rsb	r5, r0, #32
 8041344:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8041348:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 804134c:	42be      	cmp	r6, r7
 804134e:	fa21 fc05 	lsr.w	ip, r1, r5
 8041352:	ea44 030c 	orr.w	r3, r4, ip
 8041356:	bf8c      	ite	hi
 8041358:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 804135c:	2400      	movls	r4, #0
 804135e:	fa01 f000 	lsl.w	r0, r1, r0
 8041362:	40ec      	lsrs	r4, r5
 8041364:	ea40 0204 	orr.w	r2, r0, r4
 8041368:	e7dd      	b.n	8041326 <__b2d+0x4a>
 804136a:	ea44 030c 	orr.w	r3, r4, ip
 804136e:	460a      	mov	r2, r1
 8041370:	e7d9      	b.n	8041326 <__b2d+0x4a>
 8041372:	bf00      	nop
 8041374:	3ff00000 	.word	0x3ff00000

08041378 <__d2b>:
 8041378:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 804137c:	460e      	mov	r6, r1
 804137e:	2101      	movs	r1, #1
 8041380:	ec59 8b10 	vmov	r8, r9, d0
 8041384:	4615      	mov	r5, r2
 8041386:	f7ff fcb5 	bl	8040cf4 <_Balloc>
 804138a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 804138e:	4607      	mov	r7, r0
 8041390:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8041394:	bb34      	cbnz	r4, 80413e4 <__d2b+0x6c>
 8041396:	9301      	str	r3, [sp, #4]
 8041398:	f1b8 0300 	subs.w	r3, r8, #0
 804139c:	d027      	beq.n	80413ee <__d2b+0x76>
 804139e:	a802      	add	r0, sp, #8
 80413a0:	f840 3d08 	str.w	r3, [r0, #-8]!
 80413a4:	f7ff fd89 	bl	8040eba <__lo0bits>
 80413a8:	9900      	ldr	r1, [sp, #0]
 80413aa:	b1f0      	cbz	r0, 80413ea <__d2b+0x72>
 80413ac:	9a01      	ldr	r2, [sp, #4]
 80413ae:	f1c0 0320 	rsb	r3, r0, #32
 80413b2:	fa02 f303 	lsl.w	r3, r2, r3
 80413b6:	430b      	orrs	r3, r1
 80413b8:	40c2      	lsrs	r2, r0
 80413ba:	617b      	str	r3, [r7, #20]
 80413bc:	9201      	str	r2, [sp, #4]
 80413be:	9b01      	ldr	r3, [sp, #4]
 80413c0:	61bb      	str	r3, [r7, #24]
 80413c2:	2b00      	cmp	r3, #0
 80413c4:	bf14      	ite	ne
 80413c6:	2102      	movne	r1, #2
 80413c8:	2101      	moveq	r1, #1
 80413ca:	6139      	str	r1, [r7, #16]
 80413cc:	b1c4      	cbz	r4, 8041400 <__d2b+0x88>
 80413ce:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80413d2:	4404      	add	r4, r0
 80413d4:	6034      	str	r4, [r6, #0]
 80413d6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80413da:	6028      	str	r0, [r5, #0]
 80413dc:	4638      	mov	r0, r7
 80413de:	b003      	add	sp, #12
 80413e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80413e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80413e8:	e7d5      	b.n	8041396 <__d2b+0x1e>
 80413ea:	6179      	str	r1, [r7, #20]
 80413ec:	e7e7      	b.n	80413be <__d2b+0x46>
 80413ee:	a801      	add	r0, sp, #4
 80413f0:	f7ff fd63 	bl	8040eba <__lo0bits>
 80413f4:	9b01      	ldr	r3, [sp, #4]
 80413f6:	617b      	str	r3, [r7, #20]
 80413f8:	2101      	movs	r1, #1
 80413fa:	6139      	str	r1, [r7, #16]
 80413fc:	3020      	adds	r0, #32
 80413fe:	e7e5      	b.n	80413cc <__d2b+0x54>
 8041400:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8041404:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8041408:	6030      	str	r0, [r6, #0]
 804140a:	6918      	ldr	r0, [r3, #16]
 804140c:	f7ff fd36 	bl	8040e7c <__hi0bits>
 8041410:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8041414:	e7e1      	b.n	80413da <__d2b+0x62>

08041416 <__ratio>:
 8041416:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804141a:	4688      	mov	r8, r1
 804141c:	4669      	mov	r1, sp
 804141e:	4681      	mov	r9, r0
 8041420:	f7ff ff5c 	bl	80412dc <__b2d>
 8041424:	a901      	add	r1, sp, #4
 8041426:	4640      	mov	r0, r8
 8041428:	ec57 6b10 	vmov	r6, r7, d0
 804142c:	f7ff ff56 	bl	80412dc <__b2d>
 8041430:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8041434:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8041438:	eba3 0c02 	sub.w	ip, r3, r2
 804143c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8041440:	1a9b      	subs	r3, r3, r2
 8041442:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8041446:	ec5b ab10 	vmov	sl, fp, d0
 804144a:	2b00      	cmp	r3, #0
 804144c:	bfce      	itee	gt
 804144e:	463a      	movgt	r2, r7
 8041450:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8041454:	465a      	movle	r2, fp
 8041456:	4659      	mov	r1, fp
 8041458:	463d      	mov	r5, r7
 804145a:	bfd4      	ite	le
 804145c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8041460:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8041464:	4630      	mov	r0, r6
 8041466:	ee10 2a10 	vmov	r2, s0
 804146a:	460b      	mov	r3, r1
 804146c:	4629      	mov	r1, r5
 804146e:	f7df fa25 	bl	80208bc <__aeabi_ddiv>
 8041472:	ec41 0b10 	vmov	d0, r0, r1
 8041476:	b003      	add	sp, #12
 8041478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0804147c <__copybits>:
 804147c:	3901      	subs	r1, #1
 804147e:	b510      	push	{r4, lr}
 8041480:	1149      	asrs	r1, r1, #5
 8041482:	6914      	ldr	r4, [r2, #16]
 8041484:	3101      	adds	r1, #1
 8041486:	f102 0314 	add.w	r3, r2, #20
 804148a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 804148e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8041492:	42a3      	cmp	r3, r4
 8041494:	4602      	mov	r2, r0
 8041496:	d303      	bcc.n	80414a0 <__copybits+0x24>
 8041498:	2300      	movs	r3, #0
 804149a:	428a      	cmp	r2, r1
 804149c:	d305      	bcc.n	80414aa <__copybits+0x2e>
 804149e:	bd10      	pop	{r4, pc}
 80414a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80414a4:	f840 2b04 	str.w	r2, [r0], #4
 80414a8:	e7f3      	b.n	8041492 <__copybits+0x16>
 80414aa:	f842 3b04 	str.w	r3, [r2], #4
 80414ae:	e7f4      	b.n	804149a <__copybits+0x1e>

080414b0 <__any_on>:
 80414b0:	f100 0214 	add.w	r2, r0, #20
 80414b4:	6900      	ldr	r0, [r0, #16]
 80414b6:	114b      	asrs	r3, r1, #5
 80414b8:	4298      	cmp	r0, r3
 80414ba:	b510      	push	{r4, lr}
 80414bc:	db11      	blt.n	80414e2 <__any_on+0x32>
 80414be:	dd0a      	ble.n	80414d6 <__any_on+0x26>
 80414c0:	f011 011f 	ands.w	r1, r1, #31
 80414c4:	d007      	beq.n	80414d6 <__any_on+0x26>
 80414c6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80414ca:	fa24 f001 	lsr.w	r0, r4, r1
 80414ce:	fa00 f101 	lsl.w	r1, r0, r1
 80414d2:	428c      	cmp	r4, r1
 80414d4:	d10b      	bne.n	80414ee <__any_on+0x3e>
 80414d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80414da:	4293      	cmp	r3, r2
 80414dc:	d803      	bhi.n	80414e6 <__any_on+0x36>
 80414de:	2000      	movs	r0, #0
 80414e0:	bd10      	pop	{r4, pc}
 80414e2:	4603      	mov	r3, r0
 80414e4:	e7f7      	b.n	80414d6 <__any_on+0x26>
 80414e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80414ea:	2900      	cmp	r1, #0
 80414ec:	d0f5      	beq.n	80414da <__any_on+0x2a>
 80414ee:	2001      	movs	r0, #1
 80414f0:	e7f6      	b.n	80414e0 <__any_on+0x30>

080414f2 <_calloc_r>:
 80414f2:	b538      	push	{r3, r4, r5, lr}
 80414f4:	fb02 f401 	mul.w	r4, r2, r1
 80414f8:	4621      	mov	r1, r4
 80414fa:	f000 f809 	bl	8041510 <_malloc_r>
 80414fe:	4605      	mov	r5, r0
 8041500:	b118      	cbz	r0, 804150a <_calloc_r+0x18>
 8041502:	4622      	mov	r2, r4
 8041504:	2100      	movs	r1, #0
 8041506:	f7fe fa03 	bl	803f910 <memset>
 804150a:	4628      	mov	r0, r5
 804150c:	bd38      	pop	{r3, r4, r5, pc}
	...

08041510 <_malloc_r>:
 8041510:	b570      	push	{r4, r5, r6, lr}
 8041512:	1ccd      	adds	r5, r1, #3
 8041514:	f025 0503 	bic.w	r5, r5, #3
 8041518:	3508      	adds	r5, #8
 804151a:	2d0c      	cmp	r5, #12
 804151c:	bf38      	it	cc
 804151e:	250c      	movcc	r5, #12
 8041520:	2d00      	cmp	r5, #0
 8041522:	4606      	mov	r6, r0
 8041524:	db01      	blt.n	804152a <_malloc_r+0x1a>
 8041526:	42a9      	cmp	r1, r5
 8041528:	d903      	bls.n	8041532 <_malloc_r+0x22>
 804152a:	230c      	movs	r3, #12
 804152c:	6033      	str	r3, [r6, #0]
 804152e:	2000      	movs	r0, #0
 8041530:	bd70      	pop	{r4, r5, r6, pc}
 8041532:	f000 fb66 	bl	8041c02 <__malloc_lock>
 8041536:	4a21      	ldr	r2, [pc, #132]	; (80415bc <_malloc_r+0xac>)
 8041538:	6814      	ldr	r4, [r2, #0]
 804153a:	4621      	mov	r1, r4
 804153c:	b991      	cbnz	r1, 8041564 <_malloc_r+0x54>
 804153e:	4c20      	ldr	r4, [pc, #128]	; (80415c0 <_malloc_r+0xb0>)
 8041540:	6823      	ldr	r3, [r4, #0]
 8041542:	b91b      	cbnz	r3, 804154c <_malloc_r+0x3c>
 8041544:	4630      	mov	r0, r6
 8041546:	f000 fb17 	bl	8041b78 <_sbrk_r>
 804154a:	6020      	str	r0, [r4, #0]
 804154c:	4629      	mov	r1, r5
 804154e:	4630      	mov	r0, r6
 8041550:	f000 fb12 	bl	8041b78 <_sbrk_r>
 8041554:	1c43      	adds	r3, r0, #1
 8041556:	d124      	bne.n	80415a2 <_malloc_r+0x92>
 8041558:	230c      	movs	r3, #12
 804155a:	6033      	str	r3, [r6, #0]
 804155c:	4630      	mov	r0, r6
 804155e:	f000 fb51 	bl	8041c04 <__malloc_unlock>
 8041562:	e7e4      	b.n	804152e <_malloc_r+0x1e>
 8041564:	680b      	ldr	r3, [r1, #0]
 8041566:	1b5b      	subs	r3, r3, r5
 8041568:	d418      	bmi.n	804159c <_malloc_r+0x8c>
 804156a:	2b0b      	cmp	r3, #11
 804156c:	d90f      	bls.n	804158e <_malloc_r+0x7e>
 804156e:	600b      	str	r3, [r1, #0]
 8041570:	50cd      	str	r5, [r1, r3]
 8041572:	18cc      	adds	r4, r1, r3
 8041574:	4630      	mov	r0, r6
 8041576:	f000 fb45 	bl	8041c04 <__malloc_unlock>
 804157a:	f104 000b 	add.w	r0, r4, #11
 804157e:	1d23      	adds	r3, r4, #4
 8041580:	f020 0007 	bic.w	r0, r0, #7
 8041584:	1ac3      	subs	r3, r0, r3
 8041586:	d0d3      	beq.n	8041530 <_malloc_r+0x20>
 8041588:	425a      	negs	r2, r3
 804158a:	50e2      	str	r2, [r4, r3]
 804158c:	e7d0      	b.n	8041530 <_malloc_r+0x20>
 804158e:	428c      	cmp	r4, r1
 8041590:	684b      	ldr	r3, [r1, #4]
 8041592:	bf16      	itet	ne
 8041594:	6063      	strne	r3, [r4, #4]
 8041596:	6013      	streq	r3, [r2, #0]
 8041598:	460c      	movne	r4, r1
 804159a:	e7eb      	b.n	8041574 <_malloc_r+0x64>
 804159c:	460c      	mov	r4, r1
 804159e:	6849      	ldr	r1, [r1, #4]
 80415a0:	e7cc      	b.n	804153c <_malloc_r+0x2c>
 80415a2:	1cc4      	adds	r4, r0, #3
 80415a4:	f024 0403 	bic.w	r4, r4, #3
 80415a8:	42a0      	cmp	r0, r4
 80415aa:	d005      	beq.n	80415b8 <_malloc_r+0xa8>
 80415ac:	1a21      	subs	r1, r4, r0
 80415ae:	4630      	mov	r0, r6
 80415b0:	f000 fae2 	bl	8041b78 <_sbrk_r>
 80415b4:	3001      	adds	r0, #1
 80415b6:	d0cf      	beq.n	8041558 <_malloc_r+0x48>
 80415b8:	6025      	str	r5, [r4, #0]
 80415ba:	e7db      	b.n	8041574 <_malloc_r+0x64>
 80415bc:	2000805c 	.word	0x2000805c
 80415c0:	20008060 	.word	0x20008060

080415c4 <__ssputs_r>:
 80415c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80415c8:	688e      	ldr	r6, [r1, #8]
 80415ca:	429e      	cmp	r6, r3
 80415cc:	4682      	mov	sl, r0
 80415ce:	460c      	mov	r4, r1
 80415d0:	4690      	mov	r8, r2
 80415d2:	4699      	mov	r9, r3
 80415d4:	d837      	bhi.n	8041646 <__ssputs_r+0x82>
 80415d6:	898a      	ldrh	r2, [r1, #12]
 80415d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80415dc:	d031      	beq.n	8041642 <__ssputs_r+0x7e>
 80415de:	6825      	ldr	r5, [r4, #0]
 80415e0:	6909      	ldr	r1, [r1, #16]
 80415e2:	1a6f      	subs	r7, r5, r1
 80415e4:	6965      	ldr	r5, [r4, #20]
 80415e6:	2302      	movs	r3, #2
 80415e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80415ec:	fb95 f5f3 	sdiv	r5, r5, r3
 80415f0:	f109 0301 	add.w	r3, r9, #1
 80415f4:	443b      	add	r3, r7
 80415f6:	429d      	cmp	r5, r3
 80415f8:	bf38      	it	cc
 80415fa:	461d      	movcc	r5, r3
 80415fc:	0553      	lsls	r3, r2, #21
 80415fe:	d530      	bpl.n	8041662 <__ssputs_r+0x9e>
 8041600:	4629      	mov	r1, r5
 8041602:	f7ff ff85 	bl	8041510 <_malloc_r>
 8041606:	4606      	mov	r6, r0
 8041608:	b950      	cbnz	r0, 8041620 <__ssputs_r+0x5c>
 804160a:	230c      	movs	r3, #12
 804160c:	f8ca 3000 	str.w	r3, [sl]
 8041610:	89a3      	ldrh	r3, [r4, #12]
 8041612:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8041616:	81a3      	strh	r3, [r4, #12]
 8041618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 804161c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8041620:	463a      	mov	r2, r7
 8041622:	6921      	ldr	r1, [r4, #16]
 8041624:	f7fe f969 	bl	803f8fa <memcpy>
 8041628:	89a3      	ldrh	r3, [r4, #12]
 804162a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 804162e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8041632:	81a3      	strh	r3, [r4, #12]
 8041634:	6126      	str	r6, [r4, #16]
 8041636:	6165      	str	r5, [r4, #20]
 8041638:	443e      	add	r6, r7
 804163a:	1bed      	subs	r5, r5, r7
 804163c:	6026      	str	r6, [r4, #0]
 804163e:	60a5      	str	r5, [r4, #8]
 8041640:	464e      	mov	r6, r9
 8041642:	454e      	cmp	r6, r9
 8041644:	d900      	bls.n	8041648 <__ssputs_r+0x84>
 8041646:	464e      	mov	r6, r9
 8041648:	4632      	mov	r2, r6
 804164a:	4641      	mov	r1, r8
 804164c:	6820      	ldr	r0, [r4, #0]
 804164e:	f000 fabf 	bl	8041bd0 <memmove>
 8041652:	68a3      	ldr	r3, [r4, #8]
 8041654:	1b9b      	subs	r3, r3, r6
 8041656:	60a3      	str	r3, [r4, #8]
 8041658:	6823      	ldr	r3, [r4, #0]
 804165a:	441e      	add	r6, r3
 804165c:	6026      	str	r6, [r4, #0]
 804165e:	2000      	movs	r0, #0
 8041660:	e7dc      	b.n	804161c <__ssputs_r+0x58>
 8041662:	462a      	mov	r2, r5
 8041664:	f000 fb1e 	bl	8041ca4 <_realloc_r>
 8041668:	4606      	mov	r6, r0
 804166a:	2800      	cmp	r0, #0
 804166c:	d1e2      	bne.n	8041634 <__ssputs_r+0x70>
 804166e:	6921      	ldr	r1, [r4, #16]
 8041670:	4650      	mov	r0, sl
 8041672:	f000 fac9 	bl	8041c08 <_free_r>
 8041676:	e7c8      	b.n	804160a <__ssputs_r+0x46>

08041678 <_svfiprintf_r>:
 8041678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804167c:	461d      	mov	r5, r3
 804167e:	898b      	ldrh	r3, [r1, #12]
 8041680:	061f      	lsls	r7, r3, #24
 8041682:	b09d      	sub	sp, #116	; 0x74
 8041684:	4680      	mov	r8, r0
 8041686:	460c      	mov	r4, r1
 8041688:	4616      	mov	r6, r2
 804168a:	d50f      	bpl.n	80416ac <_svfiprintf_r+0x34>
 804168c:	690b      	ldr	r3, [r1, #16]
 804168e:	b96b      	cbnz	r3, 80416ac <_svfiprintf_r+0x34>
 8041690:	2140      	movs	r1, #64	; 0x40
 8041692:	f7ff ff3d 	bl	8041510 <_malloc_r>
 8041696:	6020      	str	r0, [r4, #0]
 8041698:	6120      	str	r0, [r4, #16]
 804169a:	b928      	cbnz	r0, 80416a8 <_svfiprintf_r+0x30>
 804169c:	230c      	movs	r3, #12
 804169e:	f8c8 3000 	str.w	r3, [r8]
 80416a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80416a6:	e0c8      	b.n	804183a <_svfiprintf_r+0x1c2>
 80416a8:	2340      	movs	r3, #64	; 0x40
 80416aa:	6163      	str	r3, [r4, #20]
 80416ac:	2300      	movs	r3, #0
 80416ae:	9309      	str	r3, [sp, #36]	; 0x24
 80416b0:	2320      	movs	r3, #32
 80416b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80416b6:	2330      	movs	r3, #48	; 0x30
 80416b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80416bc:	9503      	str	r5, [sp, #12]
 80416be:	f04f 0b01 	mov.w	fp, #1
 80416c2:	4637      	mov	r7, r6
 80416c4:	463d      	mov	r5, r7
 80416c6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80416ca:	b10b      	cbz	r3, 80416d0 <_svfiprintf_r+0x58>
 80416cc:	2b25      	cmp	r3, #37	; 0x25
 80416ce:	d13e      	bne.n	804174e <_svfiprintf_r+0xd6>
 80416d0:	ebb7 0a06 	subs.w	sl, r7, r6
 80416d4:	d00b      	beq.n	80416ee <_svfiprintf_r+0x76>
 80416d6:	4653      	mov	r3, sl
 80416d8:	4632      	mov	r2, r6
 80416da:	4621      	mov	r1, r4
 80416dc:	4640      	mov	r0, r8
 80416de:	f7ff ff71 	bl	80415c4 <__ssputs_r>
 80416e2:	3001      	adds	r0, #1
 80416e4:	f000 80a4 	beq.w	8041830 <_svfiprintf_r+0x1b8>
 80416e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80416ea:	4453      	add	r3, sl
 80416ec:	9309      	str	r3, [sp, #36]	; 0x24
 80416ee:	783b      	ldrb	r3, [r7, #0]
 80416f0:	2b00      	cmp	r3, #0
 80416f2:	f000 809d 	beq.w	8041830 <_svfiprintf_r+0x1b8>
 80416f6:	2300      	movs	r3, #0
 80416f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80416fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8041700:	9304      	str	r3, [sp, #16]
 8041702:	9307      	str	r3, [sp, #28]
 8041704:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8041708:	931a      	str	r3, [sp, #104]	; 0x68
 804170a:	462f      	mov	r7, r5
 804170c:	2205      	movs	r2, #5
 804170e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8041712:	4850      	ldr	r0, [pc, #320]	; (8041854 <_svfiprintf_r+0x1dc>)
 8041714:	f7de fd9c 	bl	8020250 <memchr>
 8041718:	9b04      	ldr	r3, [sp, #16]
 804171a:	b9d0      	cbnz	r0, 8041752 <_svfiprintf_r+0xda>
 804171c:	06d9      	lsls	r1, r3, #27
 804171e:	bf44      	itt	mi
 8041720:	2220      	movmi	r2, #32
 8041722:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8041726:	071a      	lsls	r2, r3, #28
 8041728:	bf44      	itt	mi
 804172a:	222b      	movmi	r2, #43	; 0x2b
 804172c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8041730:	782a      	ldrb	r2, [r5, #0]
 8041732:	2a2a      	cmp	r2, #42	; 0x2a
 8041734:	d015      	beq.n	8041762 <_svfiprintf_r+0xea>
 8041736:	9a07      	ldr	r2, [sp, #28]
 8041738:	462f      	mov	r7, r5
 804173a:	2000      	movs	r0, #0
 804173c:	250a      	movs	r5, #10
 804173e:	4639      	mov	r1, r7
 8041740:	f811 3b01 	ldrb.w	r3, [r1], #1
 8041744:	3b30      	subs	r3, #48	; 0x30
 8041746:	2b09      	cmp	r3, #9
 8041748:	d94d      	bls.n	80417e6 <_svfiprintf_r+0x16e>
 804174a:	b1b8      	cbz	r0, 804177c <_svfiprintf_r+0x104>
 804174c:	e00f      	b.n	804176e <_svfiprintf_r+0xf6>
 804174e:	462f      	mov	r7, r5
 8041750:	e7b8      	b.n	80416c4 <_svfiprintf_r+0x4c>
 8041752:	4a40      	ldr	r2, [pc, #256]	; (8041854 <_svfiprintf_r+0x1dc>)
 8041754:	1a80      	subs	r0, r0, r2
 8041756:	fa0b f000 	lsl.w	r0, fp, r0
 804175a:	4318      	orrs	r0, r3
 804175c:	9004      	str	r0, [sp, #16]
 804175e:	463d      	mov	r5, r7
 8041760:	e7d3      	b.n	804170a <_svfiprintf_r+0x92>
 8041762:	9a03      	ldr	r2, [sp, #12]
 8041764:	1d11      	adds	r1, r2, #4
 8041766:	6812      	ldr	r2, [r2, #0]
 8041768:	9103      	str	r1, [sp, #12]
 804176a:	2a00      	cmp	r2, #0
 804176c:	db01      	blt.n	8041772 <_svfiprintf_r+0xfa>
 804176e:	9207      	str	r2, [sp, #28]
 8041770:	e004      	b.n	804177c <_svfiprintf_r+0x104>
 8041772:	4252      	negs	r2, r2
 8041774:	f043 0302 	orr.w	r3, r3, #2
 8041778:	9207      	str	r2, [sp, #28]
 804177a:	9304      	str	r3, [sp, #16]
 804177c:	783b      	ldrb	r3, [r7, #0]
 804177e:	2b2e      	cmp	r3, #46	; 0x2e
 8041780:	d10c      	bne.n	804179c <_svfiprintf_r+0x124>
 8041782:	787b      	ldrb	r3, [r7, #1]
 8041784:	2b2a      	cmp	r3, #42	; 0x2a
 8041786:	d133      	bne.n	80417f0 <_svfiprintf_r+0x178>
 8041788:	9b03      	ldr	r3, [sp, #12]
 804178a:	1d1a      	adds	r2, r3, #4
 804178c:	681b      	ldr	r3, [r3, #0]
 804178e:	9203      	str	r2, [sp, #12]
 8041790:	2b00      	cmp	r3, #0
 8041792:	bfb8      	it	lt
 8041794:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8041798:	3702      	adds	r7, #2
 804179a:	9305      	str	r3, [sp, #20]
 804179c:	4d2e      	ldr	r5, [pc, #184]	; (8041858 <_svfiprintf_r+0x1e0>)
 804179e:	7839      	ldrb	r1, [r7, #0]
 80417a0:	2203      	movs	r2, #3
 80417a2:	4628      	mov	r0, r5
 80417a4:	f7de fd54 	bl	8020250 <memchr>
 80417a8:	b138      	cbz	r0, 80417ba <_svfiprintf_r+0x142>
 80417aa:	2340      	movs	r3, #64	; 0x40
 80417ac:	1b40      	subs	r0, r0, r5
 80417ae:	fa03 f000 	lsl.w	r0, r3, r0
 80417b2:	9b04      	ldr	r3, [sp, #16]
 80417b4:	4303      	orrs	r3, r0
 80417b6:	3701      	adds	r7, #1
 80417b8:	9304      	str	r3, [sp, #16]
 80417ba:	7839      	ldrb	r1, [r7, #0]
 80417bc:	4827      	ldr	r0, [pc, #156]	; (804185c <_svfiprintf_r+0x1e4>)
 80417be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80417c2:	2206      	movs	r2, #6
 80417c4:	1c7e      	adds	r6, r7, #1
 80417c6:	f7de fd43 	bl	8020250 <memchr>
 80417ca:	2800      	cmp	r0, #0
 80417cc:	d038      	beq.n	8041840 <_svfiprintf_r+0x1c8>
 80417ce:	4b24      	ldr	r3, [pc, #144]	; (8041860 <_svfiprintf_r+0x1e8>)
 80417d0:	bb13      	cbnz	r3, 8041818 <_svfiprintf_r+0x1a0>
 80417d2:	9b03      	ldr	r3, [sp, #12]
 80417d4:	3307      	adds	r3, #7
 80417d6:	f023 0307 	bic.w	r3, r3, #7
 80417da:	3308      	adds	r3, #8
 80417dc:	9303      	str	r3, [sp, #12]
 80417de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80417e0:	444b      	add	r3, r9
 80417e2:	9309      	str	r3, [sp, #36]	; 0x24
 80417e4:	e76d      	b.n	80416c2 <_svfiprintf_r+0x4a>
 80417e6:	fb05 3202 	mla	r2, r5, r2, r3
 80417ea:	2001      	movs	r0, #1
 80417ec:	460f      	mov	r7, r1
 80417ee:	e7a6      	b.n	804173e <_svfiprintf_r+0xc6>
 80417f0:	2300      	movs	r3, #0
 80417f2:	3701      	adds	r7, #1
 80417f4:	9305      	str	r3, [sp, #20]
 80417f6:	4619      	mov	r1, r3
 80417f8:	250a      	movs	r5, #10
 80417fa:	4638      	mov	r0, r7
 80417fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8041800:	3a30      	subs	r2, #48	; 0x30
 8041802:	2a09      	cmp	r2, #9
 8041804:	d903      	bls.n	804180e <_svfiprintf_r+0x196>
 8041806:	2b00      	cmp	r3, #0
 8041808:	d0c8      	beq.n	804179c <_svfiprintf_r+0x124>
 804180a:	9105      	str	r1, [sp, #20]
 804180c:	e7c6      	b.n	804179c <_svfiprintf_r+0x124>
 804180e:	fb05 2101 	mla	r1, r5, r1, r2
 8041812:	2301      	movs	r3, #1
 8041814:	4607      	mov	r7, r0
 8041816:	e7f0      	b.n	80417fa <_svfiprintf_r+0x182>
 8041818:	ab03      	add	r3, sp, #12
 804181a:	9300      	str	r3, [sp, #0]
 804181c:	4622      	mov	r2, r4
 804181e:	4b11      	ldr	r3, [pc, #68]	; (8041864 <_svfiprintf_r+0x1ec>)
 8041820:	a904      	add	r1, sp, #16
 8041822:	4640      	mov	r0, r8
 8041824:	f3af 8000 	nop.w
 8041828:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 804182c:	4681      	mov	r9, r0
 804182e:	d1d6      	bne.n	80417de <_svfiprintf_r+0x166>
 8041830:	89a3      	ldrh	r3, [r4, #12]
 8041832:	065b      	lsls	r3, r3, #25
 8041834:	f53f af35 	bmi.w	80416a2 <_svfiprintf_r+0x2a>
 8041838:	9809      	ldr	r0, [sp, #36]	; 0x24
 804183a:	b01d      	add	sp, #116	; 0x74
 804183c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8041840:	ab03      	add	r3, sp, #12
 8041842:	9300      	str	r3, [sp, #0]
 8041844:	4622      	mov	r2, r4
 8041846:	4b07      	ldr	r3, [pc, #28]	; (8041864 <_svfiprintf_r+0x1ec>)
 8041848:	a904      	add	r1, sp, #16
 804184a:	4640      	mov	r0, r8
 804184c:	f000 f882 	bl	8041954 <_printf_i>
 8041850:	e7ea      	b.n	8041828 <_svfiprintf_r+0x1b0>
 8041852:	bf00      	nop
 8041854:	0805638c 	.word	0x0805638c
 8041858:	08056392 	.word	0x08056392
 804185c:	08056396 	.word	0x08056396
 8041860:	00000000 	.word	0x00000000
 8041864:	080415c5 	.word	0x080415c5

08041868 <_printf_common>:
 8041868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804186c:	4691      	mov	r9, r2
 804186e:	461f      	mov	r7, r3
 8041870:	688a      	ldr	r2, [r1, #8]
 8041872:	690b      	ldr	r3, [r1, #16]
 8041874:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8041878:	4293      	cmp	r3, r2
 804187a:	bfb8      	it	lt
 804187c:	4613      	movlt	r3, r2
 804187e:	f8c9 3000 	str.w	r3, [r9]
 8041882:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8041886:	4606      	mov	r6, r0
 8041888:	460c      	mov	r4, r1
 804188a:	b112      	cbz	r2, 8041892 <_printf_common+0x2a>
 804188c:	3301      	adds	r3, #1
 804188e:	f8c9 3000 	str.w	r3, [r9]
 8041892:	6823      	ldr	r3, [r4, #0]
 8041894:	0699      	lsls	r1, r3, #26
 8041896:	bf42      	ittt	mi
 8041898:	f8d9 3000 	ldrmi.w	r3, [r9]
 804189c:	3302      	addmi	r3, #2
 804189e:	f8c9 3000 	strmi.w	r3, [r9]
 80418a2:	6825      	ldr	r5, [r4, #0]
 80418a4:	f015 0506 	ands.w	r5, r5, #6
 80418a8:	d107      	bne.n	80418ba <_printf_common+0x52>
 80418aa:	f104 0a19 	add.w	sl, r4, #25
 80418ae:	68e3      	ldr	r3, [r4, #12]
 80418b0:	f8d9 2000 	ldr.w	r2, [r9]
 80418b4:	1a9b      	subs	r3, r3, r2
 80418b6:	42ab      	cmp	r3, r5
 80418b8:	dc28      	bgt.n	804190c <_printf_common+0xa4>
 80418ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80418be:	6822      	ldr	r2, [r4, #0]
 80418c0:	3300      	adds	r3, #0
 80418c2:	bf18      	it	ne
 80418c4:	2301      	movne	r3, #1
 80418c6:	0692      	lsls	r2, r2, #26
 80418c8:	d42d      	bmi.n	8041926 <_printf_common+0xbe>
 80418ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80418ce:	4639      	mov	r1, r7
 80418d0:	4630      	mov	r0, r6
 80418d2:	47c0      	blx	r8
 80418d4:	3001      	adds	r0, #1
 80418d6:	d020      	beq.n	804191a <_printf_common+0xb2>
 80418d8:	6823      	ldr	r3, [r4, #0]
 80418da:	68e5      	ldr	r5, [r4, #12]
 80418dc:	f8d9 2000 	ldr.w	r2, [r9]
 80418e0:	f003 0306 	and.w	r3, r3, #6
 80418e4:	2b04      	cmp	r3, #4
 80418e6:	bf08      	it	eq
 80418e8:	1aad      	subeq	r5, r5, r2
 80418ea:	68a3      	ldr	r3, [r4, #8]
 80418ec:	6922      	ldr	r2, [r4, #16]
 80418ee:	bf0c      	ite	eq
 80418f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80418f4:	2500      	movne	r5, #0
 80418f6:	4293      	cmp	r3, r2
 80418f8:	bfc4      	itt	gt
 80418fa:	1a9b      	subgt	r3, r3, r2
 80418fc:	18ed      	addgt	r5, r5, r3
 80418fe:	f04f 0900 	mov.w	r9, #0
 8041902:	341a      	adds	r4, #26
 8041904:	454d      	cmp	r5, r9
 8041906:	d11a      	bne.n	804193e <_printf_common+0xd6>
 8041908:	2000      	movs	r0, #0
 804190a:	e008      	b.n	804191e <_printf_common+0xb6>
 804190c:	2301      	movs	r3, #1
 804190e:	4652      	mov	r2, sl
 8041910:	4639      	mov	r1, r7
 8041912:	4630      	mov	r0, r6
 8041914:	47c0      	blx	r8
 8041916:	3001      	adds	r0, #1
 8041918:	d103      	bne.n	8041922 <_printf_common+0xba>
 804191a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 804191e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8041922:	3501      	adds	r5, #1
 8041924:	e7c3      	b.n	80418ae <_printf_common+0x46>
 8041926:	18e1      	adds	r1, r4, r3
 8041928:	1c5a      	adds	r2, r3, #1
 804192a:	2030      	movs	r0, #48	; 0x30
 804192c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8041930:	4422      	add	r2, r4
 8041932:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8041936:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 804193a:	3302      	adds	r3, #2
 804193c:	e7c5      	b.n	80418ca <_printf_common+0x62>
 804193e:	2301      	movs	r3, #1
 8041940:	4622      	mov	r2, r4
 8041942:	4639      	mov	r1, r7
 8041944:	4630      	mov	r0, r6
 8041946:	47c0      	blx	r8
 8041948:	3001      	adds	r0, #1
 804194a:	d0e6      	beq.n	804191a <_printf_common+0xb2>
 804194c:	f109 0901 	add.w	r9, r9, #1
 8041950:	e7d8      	b.n	8041904 <_printf_common+0x9c>
	...

08041954 <_printf_i>:
 8041954:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8041958:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 804195c:	460c      	mov	r4, r1
 804195e:	7e09      	ldrb	r1, [r1, #24]
 8041960:	b085      	sub	sp, #20
 8041962:	296e      	cmp	r1, #110	; 0x6e
 8041964:	4617      	mov	r7, r2
 8041966:	4606      	mov	r6, r0
 8041968:	4698      	mov	r8, r3
 804196a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 804196c:	f000 80b3 	beq.w	8041ad6 <_printf_i+0x182>
 8041970:	d822      	bhi.n	80419b8 <_printf_i+0x64>
 8041972:	2963      	cmp	r1, #99	; 0x63
 8041974:	d036      	beq.n	80419e4 <_printf_i+0x90>
 8041976:	d80a      	bhi.n	804198e <_printf_i+0x3a>
 8041978:	2900      	cmp	r1, #0
 804197a:	f000 80b9 	beq.w	8041af0 <_printf_i+0x19c>
 804197e:	2958      	cmp	r1, #88	; 0x58
 8041980:	f000 8083 	beq.w	8041a8a <_printf_i+0x136>
 8041984:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8041988:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 804198c:	e032      	b.n	80419f4 <_printf_i+0xa0>
 804198e:	2964      	cmp	r1, #100	; 0x64
 8041990:	d001      	beq.n	8041996 <_printf_i+0x42>
 8041992:	2969      	cmp	r1, #105	; 0x69
 8041994:	d1f6      	bne.n	8041984 <_printf_i+0x30>
 8041996:	6820      	ldr	r0, [r4, #0]
 8041998:	6813      	ldr	r3, [r2, #0]
 804199a:	0605      	lsls	r5, r0, #24
 804199c:	f103 0104 	add.w	r1, r3, #4
 80419a0:	d52a      	bpl.n	80419f8 <_printf_i+0xa4>
 80419a2:	681b      	ldr	r3, [r3, #0]
 80419a4:	6011      	str	r1, [r2, #0]
 80419a6:	2b00      	cmp	r3, #0
 80419a8:	da03      	bge.n	80419b2 <_printf_i+0x5e>
 80419aa:	222d      	movs	r2, #45	; 0x2d
 80419ac:	425b      	negs	r3, r3
 80419ae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80419b2:	486f      	ldr	r0, [pc, #444]	; (8041b70 <_printf_i+0x21c>)
 80419b4:	220a      	movs	r2, #10
 80419b6:	e039      	b.n	8041a2c <_printf_i+0xd8>
 80419b8:	2973      	cmp	r1, #115	; 0x73
 80419ba:	f000 809d 	beq.w	8041af8 <_printf_i+0x1a4>
 80419be:	d808      	bhi.n	80419d2 <_printf_i+0x7e>
 80419c0:	296f      	cmp	r1, #111	; 0x6f
 80419c2:	d020      	beq.n	8041a06 <_printf_i+0xb2>
 80419c4:	2970      	cmp	r1, #112	; 0x70
 80419c6:	d1dd      	bne.n	8041984 <_printf_i+0x30>
 80419c8:	6823      	ldr	r3, [r4, #0]
 80419ca:	f043 0320 	orr.w	r3, r3, #32
 80419ce:	6023      	str	r3, [r4, #0]
 80419d0:	e003      	b.n	80419da <_printf_i+0x86>
 80419d2:	2975      	cmp	r1, #117	; 0x75
 80419d4:	d017      	beq.n	8041a06 <_printf_i+0xb2>
 80419d6:	2978      	cmp	r1, #120	; 0x78
 80419d8:	d1d4      	bne.n	8041984 <_printf_i+0x30>
 80419da:	2378      	movs	r3, #120	; 0x78
 80419dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80419e0:	4864      	ldr	r0, [pc, #400]	; (8041b74 <_printf_i+0x220>)
 80419e2:	e055      	b.n	8041a90 <_printf_i+0x13c>
 80419e4:	6813      	ldr	r3, [r2, #0]
 80419e6:	1d19      	adds	r1, r3, #4
 80419e8:	681b      	ldr	r3, [r3, #0]
 80419ea:	6011      	str	r1, [r2, #0]
 80419ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80419f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80419f4:	2301      	movs	r3, #1
 80419f6:	e08c      	b.n	8041b12 <_printf_i+0x1be>
 80419f8:	681b      	ldr	r3, [r3, #0]
 80419fa:	6011      	str	r1, [r2, #0]
 80419fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8041a00:	bf18      	it	ne
 8041a02:	b21b      	sxthne	r3, r3
 8041a04:	e7cf      	b.n	80419a6 <_printf_i+0x52>
 8041a06:	6813      	ldr	r3, [r2, #0]
 8041a08:	6825      	ldr	r5, [r4, #0]
 8041a0a:	1d18      	adds	r0, r3, #4
 8041a0c:	6010      	str	r0, [r2, #0]
 8041a0e:	0628      	lsls	r0, r5, #24
 8041a10:	d501      	bpl.n	8041a16 <_printf_i+0xc2>
 8041a12:	681b      	ldr	r3, [r3, #0]
 8041a14:	e002      	b.n	8041a1c <_printf_i+0xc8>
 8041a16:	0668      	lsls	r0, r5, #25
 8041a18:	d5fb      	bpl.n	8041a12 <_printf_i+0xbe>
 8041a1a:	881b      	ldrh	r3, [r3, #0]
 8041a1c:	4854      	ldr	r0, [pc, #336]	; (8041b70 <_printf_i+0x21c>)
 8041a1e:	296f      	cmp	r1, #111	; 0x6f
 8041a20:	bf14      	ite	ne
 8041a22:	220a      	movne	r2, #10
 8041a24:	2208      	moveq	r2, #8
 8041a26:	2100      	movs	r1, #0
 8041a28:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8041a2c:	6865      	ldr	r5, [r4, #4]
 8041a2e:	60a5      	str	r5, [r4, #8]
 8041a30:	2d00      	cmp	r5, #0
 8041a32:	f2c0 8095 	blt.w	8041b60 <_printf_i+0x20c>
 8041a36:	6821      	ldr	r1, [r4, #0]
 8041a38:	f021 0104 	bic.w	r1, r1, #4
 8041a3c:	6021      	str	r1, [r4, #0]
 8041a3e:	2b00      	cmp	r3, #0
 8041a40:	d13d      	bne.n	8041abe <_printf_i+0x16a>
 8041a42:	2d00      	cmp	r5, #0
 8041a44:	f040 808e 	bne.w	8041b64 <_printf_i+0x210>
 8041a48:	4665      	mov	r5, ip
 8041a4a:	2a08      	cmp	r2, #8
 8041a4c:	d10b      	bne.n	8041a66 <_printf_i+0x112>
 8041a4e:	6823      	ldr	r3, [r4, #0]
 8041a50:	07db      	lsls	r3, r3, #31
 8041a52:	d508      	bpl.n	8041a66 <_printf_i+0x112>
 8041a54:	6923      	ldr	r3, [r4, #16]
 8041a56:	6862      	ldr	r2, [r4, #4]
 8041a58:	429a      	cmp	r2, r3
 8041a5a:	bfde      	ittt	le
 8041a5c:	2330      	movle	r3, #48	; 0x30
 8041a5e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8041a62:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8041a66:	ebac 0305 	sub.w	r3, ip, r5
 8041a6a:	6123      	str	r3, [r4, #16]
 8041a6c:	f8cd 8000 	str.w	r8, [sp]
 8041a70:	463b      	mov	r3, r7
 8041a72:	aa03      	add	r2, sp, #12
 8041a74:	4621      	mov	r1, r4
 8041a76:	4630      	mov	r0, r6
 8041a78:	f7ff fef6 	bl	8041868 <_printf_common>
 8041a7c:	3001      	adds	r0, #1
 8041a7e:	d14d      	bne.n	8041b1c <_printf_i+0x1c8>
 8041a80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8041a84:	b005      	add	sp, #20
 8041a86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8041a8a:	4839      	ldr	r0, [pc, #228]	; (8041b70 <_printf_i+0x21c>)
 8041a8c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8041a90:	6813      	ldr	r3, [r2, #0]
 8041a92:	6821      	ldr	r1, [r4, #0]
 8041a94:	1d1d      	adds	r5, r3, #4
 8041a96:	681b      	ldr	r3, [r3, #0]
 8041a98:	6015      	str	r5, [r2, #0]
 8041a9a:	060a      	lsls	r2, r1, #24
 8041a9c:	d50b      	bpl.n	8041ab6 <_printf_i+0x162>
 8041a9e:	07ca      	lsls	r2, r1, #31
 8041aa0:	bf44      	itt	mi
 8041aa2:	f041 0120 	orrmi.w	r1, r1, #32
 8041aa6:	6021      	strmi	r1, [r4, #0]
 8041aa8:	b91b      	cbnz	r3, 8041ab2 <_printf_i+0x15e>
 8041aaa:	6822      	ldr	r2, [r4, #0]
 8041aac:	f022 0220 	bic.w	r2, r2, #32
 8041ab0:	6022      	str	r2, [r4, #0]
 8041ab2:	2210      	movs	r2, #16
 8041ab4:	e7b7      	b.n	8041a26 <_printf_i+0xd2>
 8041ab6:	064d      	lsls	r5, r1, #25
 8041ab8:	bf48      	it	mi
 8041aba:	b29b      	uxthmi	r3, r3
 8041abc:	e7ef      	b.n	8041a9e <_printf_i+0x14a>
 8041abe:	4665      	mov	r5, ip
 8041ac0:	fbb3 f1f2 	udiv	r1, r3, r2
 8041ac4:	fb02 3311 	mls	r3, r2, r1, r3
 8041ac8:	5cc3      	ldrb	r3, [r0, r3]
 8041aca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8041ace:	460b      	mov	r3, r1
 8041ad0:	2900      	cmp	r1, #0
 8041ad2:	d1f5      	bne.n	8041ac0 <_printf_i+0x16c>
 8041ad4:	e7b9      	b.n	8041a4a <_printf_i+0xf6>
 8041ad6:	6813      	ldr	r3, [r2, #0]
 8041ad8:	6825      	ldr	r5, [r4, #0]
 8041ada:	6961      	ldr	r1, [r4, #20]
 8041adc:	1d18      	adds	r0, r3, #4
 8041ade:	6010      	str	r0, [r2, #0]
 8041ae0:	0628      	lsls	r0, r5, #24
 8041ae2:	681b      	ldr	r3, [r3, #0]
 8041ae4:	d501      	bpl.n	8041aea <_printf_i+0x196>
 8041ae6:	6019      	str	r1, [r3, #0]
 8041ae8:	e002      	b.n	8041af0 <_printf_i+0x19c>
 8041aea:	066a      	lsls	r2, r5, #25
 8041aec:	d5fb      	bpl.n	8041ae6 <_printf_i+0x192>
 8041aee:	8019      	strh	r1, [r3, #0]
 8041af0:	2300      	movs	r3, #0
 8041af2:	6123      	str	r3, [r4, #16]
 8041af4:	4665      	mov	r5, ip
 8041af6:	e7b9      	b.n	8041a6c <_printf_i+0x118>
 8041af8:	6813      	ldr	r3, [r2, #0]
 8041afa:	1d19      	adds	r1, r3, #4
 8041afc:	6011      	str	r1, [r2, #0]
 8041afe:	681d      	ldr	r5, [r3, #0]
 8041b00:	6862      	ldr	r2, [r4, #4]
 8041b02:	2100      	movs	r1, #0
 8041b04:	4628      	mov	r0, r5
 8041b06:	f7de fba3 	bl	8020250 <memchr>
 8041b0a:	b108      	cbz	r0, 8041b10 <_printf_i+0x1bc>
 8041b0c:	1b40      	subs	r0, r0, r5
 8041b0e:	6060      	str	r0, [r4, #4]
 8041b10:	6863      	ldr	r3, [r4, #4]
 8041b12:	6123      	str	r3, [r4, #16]
 8041b14:	2300      	movs	r3, #0
 8041b16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8041b1a:	e7a7      	b.n	8041a6c <_printf_i+0x118>
 8041b1c:	6923      	ldr	r3, [r4, #16]
 8041b1e:	462a      	mov	r2, r5
 8041b20:	4639      	mov	r1, r7
 8041b22:	4630      	mov	r0, r6
 8041b24:	47c0      	blx	r8
 8041b26:	3001      	adds	r0, #1
 8041b28:	d0aa      	beq.n	8041a80 <_printf_i+0x12c>
 8041b2a:	6823      	ldr	r3, [r4, #0]
 8041b2c:	079b      	lsls	r3, r3, #30
 8041b2e:	d413      	bmi.n	8041b58 <_printf_i+0x204>
 8041b30:	68e0      	ldr	r0, [r4, #12]
 8041b32:	9b03      	ldr	r3, [sp, #12]
 8041b34:	4298      	cmp	r0, r3
 8041b36:	bfb8      	it	lt
 8041b38:	4618      	movlt	r0, r3
 8041b3a:	e7a3      	b.n	8041a84 <_printf_i+0x130>
 8041b3c:	2301      	movs	r3, #1
 8041b3e:	464a      	mov	r2, r9
 8041b40:	4639      	mov	r1, r7
 8041b42:	4630      	mov	r0, r6
 8041b44:	47c0      	blx	r8
 8041b46:	3001      	adds	r0, #1
 8041b48:	d09a      	beq.n	8041a80 <_printf_i+0x12c>
 8041b4a:	3501      	adds	r5, #1
 8041b4c:	68e3      	ldr	r3, [r4, #12]
 8041b4e:	9a03      	ldr	r2, [sp, #12]
 8041b50:	1a9b      	subs	r3, r3, r2
 8041b52:	42ab      	cmp	r3, r5
 8041b54:	dcf2      	bgt.n	8041b3c <_printf_i+0x1e8>
 8041b56:	e7eb      	b.n	8041b30 <_printf_i+0x1dc>
 8041b58:	2500      	movs	r5, #0
 8041b5a:	f104 0919 	add.w	r9, r4, #25
 8041b5e:	e7f5      	b.n	8041b4c <_printf_i+0x1f8>
 8041b60:	2b00      	cmp	r3, #0
 8041b62:	d1ac      	bne.n	8041abe <_printf_i+0x16a>
 8041b64:	7803      	ldrb	r3, [r0, #0]
 8041b66:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8041b6a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8041b6e:	e76c      	b.n	8041a4a <_printf_i+0xf6>
 8041b70:	0805639d 	.word	0x0805639d
 8041b74:	080563ae 	.word	0x080563ae

08041b78 <_sbrk_r>:
 8041b78:	b538      	push	{r3, r4, r5, lr}
 8041b7a:	4c06      	ldr	r4, [pc, #24]	; (8041b94 <_sbrk_r+0x1c>)
 8041b7c:	2300      	movs	r3, #0
 8041b7e:	4605      	mov	r5, r0
 8041b80:	4608      	mov	r0, r1
 8041b82:	6023      	str	r3, [r4, #0]
 8041b84:	f7ea fb50 	bl	802c228 <_sbrk>
 8041b88:	1c43      	adds	r3, r0, #1
 8041b8a:	d102      	bne.n	8041b92 <_sbrk_r+0x1a>
 8041b8c:	6823      	ldr	r3, [r4, #0]
 8041b8e:	b103      	cbz	r3, 8041b92 <_sbrk_r+0x1a>
 8041b90:	602b      	str	r3, [r5, #0]
 8041b92:	bd38      	pop	{r3, r4, r5, pc}
 8041b94:	200090e4 	.word	0x200090e4

08041b98 <nanf>:
 8041b98:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8041ba0 <nanf+0x8>
 8041b9c:	4770      	bx	lr
 8041b9e:	bf00      	nop
 8041ba0:	7fc00000 	.word	0x7fc00000

08041ba4 <__ascii_wctomb>:
 8041ba4:	b149      	cbz	r1, 8041bba <__ascii_wctomb+0x16>
 8041ba6:	2aff      	cmp	r2, #255	; 0xff
 8041ba8:	bf85      	ittet	hi
 8041baa:	238a      	movhi	r3, #138	; 0x8a
 8041bac:	6003      	strhi	r3, [r0, #0]
 8041bae:	700a      	strbls	r2, [r1, #0]
 8041bb0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8041bb4:	bf98      	it	ls
 8041bb6:	2001      	movls	r0, #1
 8041bb8:	4770      	bx	lr
 8041bba:	4608      	mov	r0, r1
 8041bbc:	4770      	bx	lr
	...

08041bc0 <malloc>:
 8041bc0:	4b02      	ldr	r3, [pc, #8]	; (8041bcc <malloc+0xc>)
 8041bc2:	4601      	mov	r1, r0
 8041bc4:	6818      	ldr	r0, [r3, #0]
 8041bc6:	f7ff bca3 	b.w	8041510 <_malloc_r>
 8041bca:	bf00      	nop
 8041bcc:	200002c4 	.word	0x200002c4

08041bd0 <memmove>:
 8041bd0:	4288      	cmp	r0, r1
 8041bd2:	b510      	push	{r4, lr}
 8041bd4:	eb01 0302 	add.w	r3, r1, r2
 8041bd8:	d807      	bhi.n	8041bea <memmove+0x1a>
 8041bda:	1e42      	subs	r2, r0, #1
 8041bdc:	4299      	cmp	r1, r3
 8041bde:	d00a      	beq.n	8041bf6 <memmove+0x26>
 8041be0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8041be4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8041be8:	e7f8      	b.n	8041bdc <memmove+0xc>
 8041bea:	4283      	cmp	r3, r0
 8041bec:	d9f5      	bls.n	8041bda <memmove+0xa>
 8041bee:	1881      	adds	r1, r0, r2
 8041bf0:	1ad2      	subs	r2, r2, r3
 8041bf2:	42d3      	cmn	r3, r2
 8041bf4:	d100      	bne.n	8041bf8 <memmove+0x28>
 8041bf6:	bd10      	pop	{r4, pc}
 8041bf8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8041bfc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8041c00:	e7f7      	b.n	8041bf2 <memmove+0x22>

08041c02 <__malloc_lock>:
 8041c02:	4770      	bx	lr

08041c04 <__malloc_unlock>:
 8041c04:	4770      	bx	lr
	...

08041c08 <_free_r>:
 8041c08:	b538      	push	{r3, r4, r5, lr}
 8041c0a:	4605      	mov	r5, r0
 8041c0c:	2900      	cmp	r1, #0
 8041c0e:	d045      	beq.n	8041c9c <_free_r+0x94>
 8041c10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8041c14:	1f0c      	subs	r4, r1, #4
 8041c16:	2b00      	cmp	r3, #0
 8041c18:	bfb8      	it	lt
 8041c1a:	18e4      	addlt	r4, r4, r3
 8041c1c:	f7ff fff1 	bl	8041c02 <__malloc_lock>
 8041c20:	4a1f      	ldr	r2, [pc, #124]	; (8041ca0 <_free_r+0x98>)
 8041c22:	6813      	ldr	r3, [r2, #0]
 8041c24:	4610      	mov	r0, r2
 8041c26:	b933      	cbnz	r3, 8041c36 <_free_r+0x2e>
 8041c28:	6063      	str	r3, [r4, #4]
 8041c2a:	6014      	str	r4, [r2, #0]
 8041c2c:	4628      	mov	r0, r5
 8041c2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8041c32:	f7ff bfe7 	b.w	8041c04 <__malloc_unlock>
 8041c36:	42a3      	cmp	r3, r4
 8041c38:	d90c      	bls.n	8041c54 <_free_r+0x4c>
 8041c3a:	6821      	ldr	r1, [r4, #0]
 8041c3c:	1862      	adds	r2, r4, r1
 8041c3e:	4293      	cmp	r3, r2
 8041c40:	bf04      	itt	eq
 8041c42:	681a      	ldreq	r2, [r3, #0]
 8041c44:	685b      	ldreq	r3, [r3, #4]
 8041c46:	6063      	str	r3, [r4, #4]
 8041c48:	bf04      	itt	eq
 8041c4a:	1852      	addeq	r2, r2, r1
 8041c4c:	6022      	streq	r2, [r4, #0]
 8041c4e:	6004      	str	r4, [r0, #0]
 8041c50:	e7ec      	b.n	8041c2c <_free_r+0x24>
 8041c52:	4613      	mov	r3, r2
 8041c54:	685a      	ldr	r2, [r3, #4]
 8041c56:	b10a      	cbz	r2, 8041c5c <_free_r+0x54>
 8041c58:	42a2      	cmp	r2, r4
 8041c5a:	d9fa      	bls.n	8041c52 <_free_r+0x4a>
 8041c5c:	6819      	ldr	r1, [r3, #0]
 8041c5e:	1858      	adds	r0, r3, r1
 8041c60:	42a0      	cmp	r0, r4
 8041c62:	d10b      	bne.n	8041c7c <_free_r+0x74>
 8041c64:	6820      	ldr	r0, [r4, #0]
 8041c66:	4401      	add	r1, r0
 8041c68:	1858      	adds	r0, r3, r1
 8041c6a:	4282      	cmp	r2, r0
 8041c6c:	6019      	str	r1, [r3, #0]
 8041c6e:	d1dd      	bne.n	8041c2c <_free_r+0x24>
 8041c70:	6810      	ldr	r0, [r2, #0]
 8041c72:	6852      	ldr	r2, [r2, #4]
 8041c74:	605a      	str	r2, [r3, #4]
 8041c76:	4401      	add	r1, r0
 8041c78:	6019      	str	r1, [r3, #0]
 8041c7a:	e7d7      	b.n	8041c2c <_free_r+0x24>
 8041c7c:	d902      	bls.n	8041c84 <_free_r+0x7c>
 8041c7e:	230c      	movs	r3, #12
 8041c80:	602b      	str	r3, [r5, #0]
 8041c82:	e7d3      	b.n	8041c2c <_free_r+0x24>
 8041c84:	6820      	ldr	r0, [r4, #0]
 8041c86:	1821      	adds	r1, r4, r0
 8041c88:	428a      	cmp	r2, r1
 8041c8a:	bf04      	itt	eq
 8041c8c:	6811      	ldreq	r1, [r2, #0]
 8041c8e:	6852      	ldreq	r2, [r2, #4]
 8041c90:	6062      	str	r2, [r4, #4]
 8041c92:	bf04      	itt	eq
 8041c94:	1809      	addeq	r1, r1, r0
 8041c96:	6021      	streq	r1, [r4, #0]
 8041c98:	605c      	str	r4, [r3, #4]
 8041c9a:	e7c7      	b.n	8041c2c <_free_r+0x24>
 8041c9c:	bd38      	pop	{r3, r4, r5, pc}
 8041c9e:	bf00      	nop
 8041ca0:	2000805c 	.word	0x2000805c

08041ca4 <_realloc_r>:
 8041ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8041ca6:	4607      	mov	r7, r0
 8041ca8:	4614      	mov	r4, r2
 8041caa:	460e      	mov	r6, r1
 8041cac:	b921      	cbnz	r1, 8041cb8 <_realloc_r+0x14>
 8041cae:	4611      	mov	r1, r2
 8041cb0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8041cb4:	f7ff bc2c 	b.w	8041510 <_malloc_r>
 8041cb8:	b922      	cbnz	r2, 8041cc4 <_realloc_r+0x20>
 8041cba:	f7ff ffa5 	bl	8041c08 <_free_r>
 8041cbe:	4625      	mov	r5, r4
 8041cc0:	4628      	mov	r0, r5
 8041cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8041cc4:	f000 f814 	bl	8041cf0 <_malloc_usable_size_r>
 8041cc8:	42a0      	cmp	r0, r4
 8041cca:	d20f      	bcs.n	8041cec <_realloc_r+0x48>
 8041ccc:	4621      	mov	r1, r4
 8041cce:	4638      	mov	r0, r7
 8041cd0:	f7ff fc1e 	bl	8041510 <_malloc_r>
 8041cd4:	4605      	mov	r5, r0
 8041cd6:	2800      	cmp	r0, #0
 8041cd8:	d0f2      	beq.n	8041cc0 <_realloc_r+0x1c>
 8041cda:	4631      	mov	r1, r6
 8041cdc:	4622      	mov	r2, r4
 8041cde:	f7fd fe0c 	bl	803f8fa <memcpy>
 8041ce2:	4631      	mov	r1, r6
 8041ce4:	4638      	mov	r0, r7
 8041ce6:	f7ff ff8f 	bl	8041c08 <_free_r>
 8041cea:	e7e9      	b.n	8041cc0 <_realloc_r+0x1c>
 8041cec:	4635      	mov	r5, r6
 8041cee:	e7e7      	b.n	8041cc0 <_realloc_r+0x1c>

08041cf0 <_malloc_usable_size_r>:
 8041cf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8041cf4:	1f18      	subs	r0, r3, #4
 8041cf6:	2b00      	cmp	r3, #0
 8041cf8:	bfbc      	itt	lt
 8041cfa:	580b      	ldrlt	r3, [r1, r0]
 8041cfc:	18c0      	addlt	r0, r0, r3
 8041cfe:	4770      	bx	lr

08041d00 <log10>:
 8041d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8041d02:	ed2d 8b02 	vpush	{d8}
 8041d06:	b08b      	sub	sp, #44	; 0x2c
 8041d08:	ec55 4b10 	vmov	r4, r5, d0
 8041d0c:	f000 fa44 	bl	8042198 <__ieee754_log10>
 8041d10:	4b36      	ldr	r3, [pc, #216]	; (8041dec <log10+0xec>)
 8041d12:	eeb0 8a40 	vmov.f32	s16, s0
 8041d16:	eef0 8a60 	vmov.f32	s17, s1
 8041d1a:	f993 6000 	ldrsb.w	r6, [r3]
 8041d1e:	1c73      	adds	r3, r6, #1
 8041d20:	d05c      	beq.n	8041ddc <log10+0xdc>
 8041d22:	4622      	mov	r2, r4
 8041d24:	462b      	mov	r3, r5
 8041d26:	4620      	mov	r0, r4
 8041d28:	4629      	mov	r1, r5
 8041d2a:	f7de ff37 	bl	8020b9c <__aeabi_dcmpun>
 8041d2e:	4607      	mov	r7, r0
 8041d30:	2800      	cmp	r0, #0
 8041d32:	d153      	bne.n	8041ddc <log10+0xdc>
 8041d34:	2200      	movs	r2, #0
 8041d36:	2300      	movs	r3, #0
 8041d38:	4620      	mov	r0, r4
 8041d3a:	4629      	mov	r1, r5
 8041d3c:	f7de ff10 	bl	8020b60 <__aeabi_dcmple>
 8041d40:	2800      	cmp	r0, #0
 8041d42:	d04b      	beq.n	8041ddc <log10+0xdc>
 8041d44:	4b2a      	ldr	r3, [pc, #168]	; (8041df0 <log10+0xf0>)
 8041d46:	9301      	str	r3, [sp, #4]
 8041d48:	9708      	str	r7, [sp, #32]
 8041d4a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8041d4e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8041d52:	b9a6      	cbnz	r6, 8041d7e <log10+0x7e>
 8041d54:	4b27      	ldr	r3, [pc, #156]	; (8041df4 <log10+0xf4>)
 8041d56:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8041d5a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8041d5e:	4620      	mov	r0, r4
 8041d60:	2200      	movs	r2, #0
 8041d62:	2300      	movs	r3, #0
 8041d64:	4629      	mov	r1, r5
 8041d66:	f7de fee7 	bl	8020b38 <__aeabi_dcmpeq>
 8041d6a:	bb40      	cbnz	r0, 8041dbe <log10+0xbe>
 8041d6c:	2301      	movs	r3, #1
 8041d6e:	2e02      	cmp	r6, #2
 8041d70:	9300      	str	r3, [sp, #0]
 8041d72:	d119      	bne.n	8041da8 <log10+0xa8>
 8041d74:	f7fd fd88 	bl	803f888 <__errno>
 8041d78:	2321      	movs	r3, #33	; 0x21
 8041d7a:	6003      	str	r3, [r0, #0]
 8041d7c:	e019      	b.n	8041db2 <log10+0xb2>
 8041d7e:	4b1e      	ldr	r3, [pc, #120]	; (8041df8 <log10+0xf8>)
 8041d80:	2200      	movs	r2, #0
 8041d82:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8041d86:	4620      	mov	r0, r4
 8041d88:	2200      	movs	r2, #0
 8041d8a:	2300      	movs	r3, #0
 8041d8c:	4629      	mov	r1, r5
 8041d8e:	f7de fed3 	bl	8020b38 <__aeabi_dcmpeq>
 8041d92:	2800      	cmp	r0, #0
 8041d94:	d0ea      	beq.n	8041d6c <log10+0x6c>
 8041d96:	2302      	movs	r3, #2
 8041d98:	429e      	cmp	r6, r3
 8041d9a:	9300      	str	r3, [sp, #0]
 8041d9c:	d111      	bne.n	8041dc2 <log10+0xc2>
 8041d9e:	f7fd fd73 	bl	803f888 <__errno>
 8041da2:	2322      	movs	r3, #34	; 0x22
 8041da4:	6003      	str	r3, [r0, #0]
 8041da6:	e011      	b.n	8041dcc <log10+0xcc>
 8041da8:	4668      	mov	r0, sp
 8041daa:	f001 f850 	bl	8042e4e <matherr>
 8041dae:	2800      	cmp	r0, #0
 8041db0:	d0e0      	beq.n	8041d74 <log10+0x74>
 8041db2:	4812      	ldr	r0, [pc, #72]	; (8041dfc <log10+0xfc>)
 8041db4:	f001 f850 	bl	8042e58 <nan>
 8041db8:	ed8d 0b06 	vstr	d0, [sp, #24]
 8041dbc:	e006      	b.n	8041dcc <log10+0xcc>
 8041dbe:	2302      	movs	r3, #2
 8041dc0:	9300      	str	r3, [sp, #0]
 8041dc2:	4668      	mov	r0, sp
 8041dc4:	f001 f843 	bl	8042e4e <matherr>
 8041dc8:	2800      	cmp	r0, #0
 8041dca:	d0e8      	beq.n	8041d9e <log10+0x9e>
 8041dcc:	9b08      	ldr	r3, [sp, #32]
 8041dce:	b11b      	cbz	r3, 8041dd8 <log10+0xd8>
 8041dd0:	f7fd fd5a 	bl	803f888 <__errno>
 8041dd4:	9b08      	ldr	r3, [sp, #32]
 8041dd6:	6003      	str	r3, [r0, #0]
 8041dd8:	ed9d 8b06 	vldr	d8, [sp, #24]
 8041ddc:	eeb0 0a48 	vmov.f32	s0, s16
 8041de0:	eef0 0a68 	vmov.f32	s1, s17
 8041de4:	b00b      	add	sp, #44	; 0x2c
 8041de6:	ecbd 8b02 	vpop	{d8}
 8041dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8041dec:	20000494 	.word	0x20000494
 8041df0:	080564c0 	.word	0x080564c0
 8041df4:	c7efffff 	.word	0xc7efffff
 8041df8:	fff00000 	.word	0xfff00000
 8041dfc:	08056391 	.word	0x08056391

08041e00 <pow>:
 8041e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8041e04:	ed2d 8b04 	vpush	{d8-d9}
 8041e08:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80420dc <pow+0x2dc>
 8041e0c:	b08d      	sub	sp, #52	; 0x34
 8041e0e:	ec57 6b10 	vmov	r6, r7, d0
 8041e12:	ec55 4b11 	vmov	r4, r5, d1
 8041e16:	f000 fa4b 	bl	80422b0 <__ieee754_pow>
 8041e1a:	f999 3000 	ldrsb.w	r3, [r9]
 8041e1e:	9300      	str	r3, [sp, #0]
 8041e20:	3301      	adds	r3, #1
 8041e22:	eeb0 8a40 	vmov.f32	s16, s0
 8041e26:	eef0 8a60 	vmov.f32	s17, s1
 8041e2a:	46c8      	mov	r8, r9
 8041e2c:	d05f      	beq.n	8041eee <pow+0xee>
 8041e2e:	4622      	mov	r2, r4
 8041e30:	462b      	mov	r3, r5
 8041e32:	4620      	mov	r0, r4
 8041e34:	4629      	mov	r1, r5
 8041e36:	f7de feb1 	bl	8020b9c <__aeabi_dcmpun>
 8041e3a:	4683      	mov	fp, r0
 8041e3c:	2800      	cmp	r0, #0
 8041e3e:	d156      	bne.n	8041eee <pow+0xee>
 8041e40:	4632      	mov	r2, r6
 8041e42:	463b      	mov	r3, r7
 8041e44:	4630      	mov	r0, r6
 8041e46:	4639      	mov	r1, r7
 8041e48:	f7de fea8 	bl	8020b9c <__aeabi_dcmpun>
 8041e4c:	9001      	str	r0, [sp, #4]
 8041e4e:	b1e8      	cbz	r0, 8041e8c <pow+0x8c>
 8041e50:	2200      	movs	r2, #0
 8041e52:	2300      	movs	r3, #0
 8041e54:	4620      	mov	r0, r4
 8041e56:	4629      	mov	r1, r5
 8041e58:	f7de fe6e 	bl	8020b38 <__aeabi_dcmpeq>
 8041e5c:	2800      	cmp	r0, #0
 8041e5e:	d046      	beq.n	8041eee <pow+0xee>
 8041e60:	2301      	movs	r3, #1
 8041e62:	9302      	str	r3, [sp, #8]
 8041e64:	4b96      	ldr	r3, [pc, #600]	; (80420c0 <pow+0x2c0>)
 8041e66:	9303      	str	r3, [sp, #12]
 8041e68:	4b96      	ldr	r3, [pc, #600]	; (80420c4 <pow+0x2c4>)
 8041e6a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8041e6e:	2200      	movs	r2, #0
 8041e70:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8041e74:	9b00      	ldr	r3, [sp, #0]
 8041e76:	2b02      	cmp	r3, #2
 8041e78:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8041e7c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8041e80:	d033      	beq.n	8041eea <pow+0xea>
 8041e82:	a802      	add	r0, sp, #8
 8041e84:	f000 ffe3 	bl	8042e4e <matherr>
 8041e88:	bb48      	cbnz	r0, 8041ede <pow+0xde>
 8041e8a:	e05d      	b.n	8041f48 <pow+0x148>
 8041e8c:	f04f 0a00 	mov.w	sl, #0
 8041e90:	f04f 0b00 	mov.w	fp, #0
 8041e94:	4652      	mov	r2, sl
 8041e96:	465b      	mov	r3, fp
 8041e98:	4630      	mov	r0, r6
 8041e9a:	4639      	mov	r1, r7
 8041e9c:	f7de fe4c 	bl	8020b38 <__aeabi_dcmpeq>
 8041ea0:	ec4b ab19 	vmov	d9, sl, fp
 8041ea4:	2800      	cmp	r0, #0
 8041ea6:	d054      	beq.n	8041f52 <pow+0x152>
 8041ea8:	4652      	mov	r2, sl
 8041eaa:	465b      	mov	r3, fp
 8041eac:	4620      	mov	r0, r4
 8041eae:	4629      	mov	r1, r5
 8041eb0:	f7de fe42 	bl	8020b38 <__aeabi_dcmpeq>
 8041eb4:	4680      	mov	r8, r0
 8041eb6:	b318      	cbz	r0, 8041f00 <pow+0x100>
 8041eb8:	2301      	movs	r3, #1
 8041eba:	9302      	str	r3, [sp, #8]
 8041ebc:	4b80      	ldr	r3, [pc, #512]	; (80420c0 <pow+0x2c0>)
 8041ebe:	9303      	str	r3, [sp, #12]
 8041ec0:	9b01      	ldr	r3, [sp, #4]
 8041ec2:	930a      	str	r3, [sp, #40]	; 0x28
 8041ec4:	9b00      	ldr	r3, [sp, #0]
 8041ec6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8041eca:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8041ece:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8041ed2:	2b00      	cmp	r3, #0
 8041ed4:	d0d5      	beq.n	8041e82 <pow+0x82>
 8041ed6:	4b7b      	ldr	r3, [pc, #492]	; (80420c4 <pow+0x2c4>)
 8041ed8:	2200      	movs	r2, #0
 8041eda:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8041ede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8041ee0:	b11b      	cbz	r3, 8041eea <pow+0xea>
 8041ee2:	f7fd fcd1 	bl	803f888 <__errno>
 8041ee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8041ee8:	6003      	str	r3, [r0, #0]
 8041eea:	ed9d 8b08 	vldr	d8, [sp, #32]
 8041eee:	eeb0 0a48 	vmov.f32	s0, s16
 8041ef2:	eef0 0a68 	vmov.f32	s1, s17
 8041ef6:	b00d      	add	sp, #52	; 0x34
 8041ef8:	ecbd 8b04 	vpop	{d8-d9}
 8041efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8041f00:	ec45 4b10 	vmov	d0, r4, r5
 8041f04:	f000 ff9b 	bl	8042e3e <finite>
 8041f08:	2800      	cmp	r0, #0
 8041f0a:	d0f0      	beq.n	8041eee <pow+0xee>
 8041f0c:	4652      	mov	r2, sl
 8041f0e:	465b      	mov	r3, fp
 8041f10:	4620      	mov	r0, r4
 8041f12:	4629      	mov	r1, r5
 8041f14:	f7de fe1a 	bl	8020b4c <__aeabi_dcmplt>
 8041f18:	2800      	cmp	r0, #0
 8041f1a:	d0e8      	beq.n	8041eee <pow+0xee>
 8041f1c:	2301      	movs	r3, #1
 8041f1e:	9302      	str	r3, [sp, #8]
 8041f20:	4b67      	ldr	r3, [pc, #412]	; (80420c0 <pow+0x2c0>)
 8041f22:	9303      	str	r3, [sp, #12]
 8041f24:	f999 3000 	ldrsb.w	r3, [r9]
 8041f28:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8041f2c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8041f30:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8041f34:	b913      	cbnz	r3, 8041f3c <pow+0x13c>
 8041f36:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8041f3a:	e7a2      	b.n	8041e82 <pow+0x82>
 8041f3c:	4962      	ldr	r1, [pc, #392]	; (80420c8 <pow+0x2c8>)
 8041f3e:	2000      	movs	r0, #0
 8041f40:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8041f44:	2b02      	cmp	r3, #2
 8041f46:	d19c      	bne.n	8041e82 <pow+0x82>
 8041f48:	f7fd fc9e 	bl	803f888 <__errno>
 8041f4c:	2321      	movs	r3, #33	; 0x21
 8041f4e:	6003      	str	r3, [r0, #0]
 8041f50:	e7c5      	b.n	8041ede <pow+0xde>
 8041f52:	eeb0 0a48 	vmov.f32	s0, s16
 8041f56:	eef0 0a68 	vmov.f32	s1, s17
 8041f5a:	f000 ff70 	bl	8042e3e <finite>
 8041f5e:	9000      	str	r0, [sp, #0]
 8041f60:	2800      	cmp	r0, #0
 8041f62:	f040 8081 	bne.w	8042068 <pow+0x268>
 8041f66:	ec47 6b10 	vmov	d0, r6, r7
 8041f6a:	f000 ff68 	bl	8042e3e <finite>
 8041f6e:	2800      	cmp	r0, #0
 8041f70:	d07a      	beq.n	8042068 <pow+0x268>
 8041f72:	ec45 4b10 	vmov	d0, r4, r5
 8041f76:	f000 ff62 	bl	8042e3e <finite>
 8041f7a:	2800      	cmp	r0, #0
 8041f7c:	d074      	beq.n	8042068 <pow+0x268>
 8041f7e:	ec53 2b18 	vmov	r2, r3, d8
 8041f82:	ee18 0a10 	vmov	r0, s16
 8041f86:	4619      	mov	r1, r3
 8041f88:	f7de fe08 	bl	8020b9c <__aeabi_dcmpun>
 8041f8c:	f999 9000 	ldrsb.w	r9, [r9]
 8041f90:	4b4b      	ldr	r3, [pc, #300]	; (80420c0 <pow+0x2c0>)
 8041f92:	b1b0      	cbz	r0, 8041fc2 <pow+0x1c2>
 8041f94:	2201      	movs	r2, #1
 8041f96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8041f9a:	9b00      	ldr	r3, [sp, #0]
 8041f9c:	930a      	str	r3, [sp, #40]	; 0x28
 8041f9e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8041fa2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8041fa6:	f1b9 0f00 	cmp.w	r9, #0
 8041faa:	d0c4      	beq.n	8041f36 <pow+0x136>
 8041fac:	4652      	mov	r2, sl
 8041fae:	465b      	mov	r3, fp
 8041fb0:	4650      	mov	r0, sl
 8041fb2:	4659      	mov	r1, fp
 8041fb4:	f7de fc82 	bl	80208bc <__aeabi_ddiv>
 8041fb8:	f1b9 0f02 	cmp.w	r9, #2
 8041fbc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8041fc0:	e7c1      	b.n	8041f46 <pow+0x146>
 8041fc2:	2203      	movs	r2, #3
 8041fc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8041fc8:	900a      	str	r0, [sp, #40]	; 0x28
 8041fca:	4629      	mov	r1, r5
 8041fcc:	4620      	mov	r0, r4
 8041fce:	2200      	movs	r2, #0
 8041fd0:	4b3e      	ldr	r3, [pc, #248]	; (80420cc <pow+0x2cc>)
 8041fd2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8041fd6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8041fda:	f7de fb45 	bl	8020668 <__aeabi_dmul>
 8041fde:	4604      	mov	r4, r0
 8041fe0:	460d      	mov	r5, r1
 8041fe2:	f1b9 0f00 	cmp.w	r9, #0
 8041fe6:	d124      	bne.n	8042032 <pow+0x232>
 8041fe8:	4b39      	ldr	r3, [pc, #228]	; (80420d0 <pow+0x2d0>)
 8041fea:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8041fee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8041ff2:	4630      	mov	r0, r6
 8041ff4:	4652      	mov	r2, sl
 8041ff6:	465b      	mov	r3, fp
 8041ff8:	4639      	mov	r1, r7
 8041ffa:	f7de fda7 	bl	8020b4c <__aeabi_dcmplt>
 8041ffe:	2800      	cmp	r0, #0
 8042000:	d056      	beq.n	80420b0 <pow+0x2b0>
 8042002:	ec45 4b10 	vmov	d0, r4, r5
 8042006:	f000 ff2f 	bl	8042e68 <rint>
 804200a:	4622      	mov	r2, r4
 804200c:	462b      	mov	r3, r5
 804200e:	ec51 0b10 	vmov	r0, r1, d0
 8042012:	f7de fd91 	bl	8020b38 <__aeabi_dcmpeq>
 8042016:	b920      	cbnz	r0, 8042022 <pow+0x222>
 8042018:	4b2e      	ldr	r3, [pc, #184]	; (80420d4 <pow+0x2d4>)
 804201a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 804201e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8042022:	f998 3000 	ldrsb.w	r3, [r8]
 8042026:	2b02      	cmp	r3, #2
 8042028:	d142      	bne.n	80420b0 <pow+0x2b0>
 804202a:	f7fd fc2d 	bl	803f888 <__errno>
 804202e:	2322      	movs	r3, #34	; 0x22
 8042030:	e78d      	b.n	8041f4e <pow+0x14e>
 8042032:	4b29      	ldr	r3, [pc, #164]	; (80420d8 <pow+0x2d8>)
 8042034:	2200      	movs	r2, #0
 8042036:	e9cd 2308 	strd	r2, r3, [sp, #32]
 804203a:	4630      	mov	r0, r6
 804203c:	4652      	mov	r2, sl
 804203e:	465b      	mov	r3, fp
 8042040:	4639      	mov	r1, r7
 8042042:	f7de fd83 	bl	8020b4c <__aeabi_dcmplt>
 8042046:	2800      	cmp	r0, #0
 8042048:	d0eb      	beq.n	8042022 <pow+0x222>
 804204a:	ec45 4b10 	vmov	d0, r4, r5
 804204e:	f000 ff0b 	bl	8042e68 <rint>
 8042052:	4622      	mov	r2, r4
 8042054:	462b      	mov	r3, r5
 8042056:	ec51 0b10 	vmov	r0, r1, d0
 804205a:	f7de fd6d 	bl	8020b38 <__aeabi_dcmpeq>
 804205e:	2800      	cmp	r0, #0
 8042060:	d1df      	bne.n	8042022 <pow+0x222>
 8042062:	2200      	movs	r2, #0
 8042064:	4b18      	ldr	r3, [pc, #96]	; (80420c8 <pow+0x2c8>)
 8042066:	e7da      	b.n	804201e <pow+0x21e>
 8042068:	2200      	movs	r2, #0
 804206a:	2300      	movs	r3, #0
 804206c:	ec51 0b18 	vmov	r0, r1, d8
 8042070:	f7de fd62 	bl	8020b38 <__aeabi_dcmpeq>
 8042074:	2800      	cmp	r0, #0
 8042076:	f43f af3a 	beq.w	8041eee <pow+0xee>
 804207a:	ec47 6b10 	vmov	d0, r6, r7
 804207e:	f000 fede 	bl	8042e3e <finite>
 8042082:	2800      	cmp	r0, #0
 8042084:	f43f af33 	beq.w	8041eee <pow+0xee>
 8042088:	ec45 4b10 	vmov	d0, r4, r5
 804208c:	f000 fed7 	bl	8042e3e <finite>
 8042090:	2800      	cmp	r0, #0
 8042092:	f43f af2c 	beq.w	8041eee <pow+0xee>
 8042096:	2304      	movs	r3, #4
 8042098:	9302      	str	r3, [sp, #8]
 804209a:	4b09      	ldr	r3, [pc, #36]	; (80420c0 <pow+0x2c0>)
 804209c:	9303      	str	r3, [sp, #12]
 804209e:	2300      	movs	r3, #0
 80420a0:	930a      	str	r3, [sp, #40]	; 0x28
 80420a2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80420a6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80420aa:	ed8d 9b08 	vstr	d9, [sp, #32]
 80420ae:	e7b8      	b.n	8042022 <pow+0x222>
 80420b0:	a802      	add	r0, sp, #8
 80420b2:	f000 fecc 	bl	8042e4e <matherr>
 80420b6:	2800      	cmp	r0, #0
 80420b8:	f47f af11 	bne.w	8041ede <pow+0xde>
 80420bc:	e7b5      	b.n	804202a <pow+0x22a>
 80420be:	bf00      	nop
 80420c0:	080564c6 	.word	0x080564c6
 80420c4:	3ff00000 	.word	0x3ff00000
 80420c8:	fff00000 	.word	0xfff00000
 80420cc:	3fe00000 	.word	0x3fe00000
 80420d0:	47efffff 	.word	0x47efffff
 80420d4:	c7efffff 	.word	0xc7efffff
 80420d8:	7ff00000 	.word	0x7ff00000
 80420dc:	20000494 	.word	0x20000494

080420e0 <sqrt>:
 80420e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80420e4:	ed2d 8b02 	vpush	{d8}
 80420e8:	b08b      	sub	sp, #44	; 0x2c
 80420ea:	ec55 4b10 	vmov	r4, r5, d0
 80420ee:	f000 fded 	bl	8042ccc <__ieee754_sqrt>
 80420f2:	4b26      	ldr	r3, [pc, #152]	; (804218c <sqrt+0xac>)
 80420f4:	eeb0 8a40 	vmov.f32	s16, s0
 80420f8:	eef0 8a60 	vmov.f32	s17, s1
 80420fc:	f993 6000 	ldrsb.w	r6, [r3]
 8042100:	1c73      	adds	r3, r6, #1
 8042102:	d02a      	beq.n	804215a <sqrt+0x7a>
 8042104:	4622      	mov	r2, r4
 8042106:	462b      	mov	r3, r5
 8042108:	4620      	mov	r0, r4
 804210a:	4629      	mov	r1, r5
 804210c:	f7de fd46 	bl	8020b9c <__aeabi_dcmpun>
 8042110:	4607      	mov	r7, r0
 8042112:	bb10      	cbnz	r0, 804215a <sqrt+0x7a>
 8042114:	f04f 0800 	mov.w	r8, #0
 8042118:	f04f 0900 	mov.w	r9, #0
 804211c:	4642      	mov	r2, r8
 804211e:	464b      	mov	r3, r9
 8042120:	4620      	mov	r0, r4
 8042122:	4629      	mov	r1, r5
 8042124:	f7de fd12 	bl	8020b4c <__aeabi_dcmplt>
 8042128:	b1b8      	cbz	r0, 804215a <sqrt+0x7a>
 804212a:	2301      	movs	r3, #1
 804212c:	9300      	str	r3, [sp, #0]
 804212e:	4b18      	ldr	r3, [pc, #96]	; (8042190 <sqrt+0xb0>)
 8042130:	9301      	str	r3, [sp, #4]
 8042132:	9708      	str	r7, [sp, #32]
 8042134:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8042138:	e9cd 4502 	strd	r4, r5, [sp, #8]
 804213c:	b9b6      	cbnz	r6, 804216c <sqrt+0x8c>
 804213e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8042142:	4668      	mov	r0, sp
 8042144:	f000 fe83 	bl	8042e4e <matherr>
 8042148:	b1d0      	cbz	r0, 8042180 <sqrt+0xa0>
 804214a:	9b08      	ldr	r3, [sp, #32]
 804214c:	b11b      	cbz	r3, 8042156 <sqrt+0x76>
 804214e:	f7fd fb9b 	bl	803f888 <__errno>
 8042152:	9b08      	ldr	r3, [sp, #32]
 8042154:	6003      	str	r3, [r0, #0]
 8042156:	ed9d 8b06 	vldr	d8, [sp, #24]
 804215a:	eeb0 0a48 	vmov.f32	s0, s16
 804215e:	eef0 0a68 	vmov.f32	s1, s17
 8042162:	b00b      	add	sp, #44	; 0x2c
 8042164:	ecbd 8b02 	vpop	{d8}
 8042168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 804216c:	4642      	mov	r2, r8
 804216e:	464b      	mov	r3, r9
 8042170:	4640      	mov	r0, r8
 8042172:	4649      	mov	r1, r9
 8042174:	f7de fba2 	bl	80208bc <__aeabi_ddiv>
 8042178:	2e02      	cmp	r6, #2
 804217a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 804217e:	d1e0      	bne.n	8042142 <sqrt+0x62>
 8042180:	f7fd fb82 	bl	803f888 <__errno>
 8042184:	2321      	movs	r3, #33	; 0x21
 8042186:	6003      	str	r3, [r0, #0]
 8042188:	e7df      	b.n	804214a <sqrt+0x6a>
 804218a:	bf00      	nop
 804218c:	20000494 	.word	0x20000494
 8042190:	080564ca 	.word	0x080564ca
 8042194:	00000000 	.word	0x00000000

08042198 <__ieee754_log10>:
 8042198:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 804219c:	ec55 4b10 	vmov	r4, r5, d0
 80421a0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80421a4:	462b      	mov	r3, r5
 80421a6:	da2f      	bge.n	8042208 <__ieee754_log10+0x70>
 80421a8:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80421ac:	4322      	orrs	r2, r4
 80421ae:	d10a      	bne.n	80421c6 <__ieee754_log10+0x2e>
 80421b0:	493b      	ldr	r1, [pc, #236]	; (80422a0 <__ieee754_log10+0x108>)
 80421b2:	2200      	movs	r2, #0
 80421b4:	2300      	movs	r3, #0
 80421b6:	2000      	movs	r0, #0
 80421b8:	f7de fb80 	bl	80208bc <__aeabi_ddiv>
 80421bc:	ec41 0b10 	vmov	d0, r0, r1
 80421c0:	b003      	add	sp, #12
 80421c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80421c6:	2d00      	cmp	r5, #0
 80421c8:	da08      	bge.n	80421dc <__ieee754_log10+0x44>
 80421ca:	ee10 2a10 	vmov	r2, s0
 80421ce:	4620      	mov	r0, r4
 80421d0:	4629      	mov	r1, r5
 80421d2:	f7de f891 	bl	80202f8 <__aeabi_dsub>
 80421d6:	2200      	movs	r2, #0
 80421d8:	2300      	movs	r3, #0
 80421da:	e7ed      	b.n	80421b8 <__ieee754_log10+0x20>
 80421dc:	2200      	movs	r2, #0
 80421de:	4b31      	ldr	r3, [pc, #196]	; (80422a4 <__ieee754_log10+0x10c>)
 80421e0:	4629      	mov	r1, r5
 80421e2:	ee10 0a10 	vmov	r0, s0
 80421e6:	f7de fa3f 	bl	8020668 <__aeabi_dmul>
 80421ea:	f06f 0235 	mvn.w	r2, #53	; 0x35
 80421ee:	4604      	mov	r4, r0
 80421f0:	460d      	mov	r5, r1
 80421f2:	460b      	mov	r3, r1
 80421f4:	492c      	ldr	r1, [pc, #176]	; (80422a8 <__ieee754_log10+0x110>)
 80421f6:	428b      	cmp	r3, r1
 80421f8:	dd08      	ble.n	804220c <__ieee754_log10+0x74>
 80421fa:	4622      	mov	r2, r4
 80421fc:	462b      	mov	r3, r5
 80421fe:	4620      	mov	r0, r4
 8042200:	4629      	mov	r1, r5
 8042202:	f7de f87b 	bl	80202fc <__adddf3>
 8042206:	e7d9      	b.n	80421bc <__ieee754_log10+0x24>
 8042208:	2200      	movs	r2, #0
 804220a:	e7f3      	b.n	80421f4 <__ieee754_log10+0x5c>
 804220c:	1518      	asrs	r0, r3, #20
 804220e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8042212:	4410      	add	r0, r2
 8042214:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8042218:	4448      	add	r0, r9
 804221a:	f3c3 0813 	ubfx	r8, r3, #0, #20
 804221e:	f7de f9b9 	bl	8020594 <__aeabi_i2d>
 8042222:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8042226:	3303      	adds	r3, #3
 8042228:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 804222c:	ec45 4b10 	vmov	d0, r4, r5
 8042230:	4606      	mov	r6, r0
 8042232:	460f      	mov	r7, r1
 8042234:	f000 ff14 	bl	8043060 <__ieee754_log>
 8042238:	a313      	add	r3, pc, #76	; (adr r3, 8042288 <__ieee754_log10+0xf0>)
 804223a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804223e:	4630      	mov	r0, r6
 8042240:	4639      	mov	r1, r7
 8042242:	ed8d 0b00 	vstr	d0, [sp]
 8042246:	f7de fa0f 	bl	8020668 <__aeabi_dmul>
 804224a:	ed9d 0b00 	vldr	d0, [sp]
 804224e:	4604      	mov	r4, r0
 8042250:	460d      	mov	r5, r1
 8042252:	a30f      	add	r3, pc, #60	; (adr r3, 8042290 <__ieee754_log10+0xf8>)
 8042254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042258:	ec51 0b10 	vmov	r0, r1, d0
 804225c:	f7de fa04 	bl	8020668 <__aeabi_dmul>
 8042260:	4602      	mov	r2, r0
 8042262:	460b      	mov	r3, r1
 8042264:	4620      	mov	r0, r4
 8042266:	4629      	mov	r1, r5
 8042268:	f7de f848 	bl	80202fc <__adddf3>
 804226c:	a30a      	add	r3, pc, #40	; (adr r3, 8042298 <__ieee754_log10+0x100>)
 804226e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042272:	4604      	mov	r4, r0
 8042274:	460d      	mov	r5, r1
 8042276:	4630      	mov	r0, r6
 8042278:	4639      	mov	r1, r7
 804227a:	f7de f9f5 	bl	8020668 <__aeabi_dmul>
 804227e:	4602      	mov	r2, r0
 8042280:	460b      	mov	r3, r1
 8042282:	4620      	mov	r0, r4
 8042284:	4629      	mov	r1, r5
 8042286:	e7bc      	b.n	8042202 <__ieee754_log10+0x6a>
 8042288:	11f12b36 	.word	0x11f12b36
 804228c:	3d59fef3 	.word	0x3d59fef3
 8042290:	1526e50e 	.word	0x1526e50e
 8042294:	3fdbcb7b 	.word	0x3fdbcb7b
 8042298:	509f6000 	.word	0x509f6000
 804229c:	3fd34413 	.word	0x3fd34413
 80422a0:	c3500000 	.word	0xc3500000
 80422a4:	43500000 	.word	0x43500000
 80422a8:	7fefffff 	.word	0x7fefffff
 80422ac:	00000000 	.word	0x00000000

080422b0 <__ieee754_pow>:
 80422b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80422b4:	b091      	sub	sp, #68	; 0x44
 80422b6:	ed8d 1b00 	vstr	d1, [sp]
 80422ba:	e9dd 2900 	ldrd	r2, r9, [sp]
 80422be:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80422c2:	ea58 0302 	orrs.w	r3, r8, r2
 80422c6:	ec57 6b10 	vmov	r6, r7, d0
 80422ca:	f000 84be 	beq.w	8042c4a <__ieee754_pow+0x99a>
 80422ce:	4b7a      	ldr	r3, [pc, #488]	; (80424b8 <__ieee754_pow+0x208>)
 80422d0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80422d4:	429c      	cmp	r4, r3
 80422d6:	463d      	mov	r5, r7
 80422d8:	ee10 aa10 	vmov	sl, s0
 80422dc:	dc09      	bgt.n	80422f2 <__ieee754_pow+0x42>
 80422de:	d103      	bne.n	80422e8 <__ieee754_pow+0x38>
 80422e0:	b93e      	cbnz	r6, 80422f2 <__ieee754_pow+0x42>
 80422e2:	45a0      	cmp	r8, r4
 80422e4:	dc0d      	bgt.n	8042302 <__ieee754_pow+0x52>
 80422e6:	e001      	b.n	80422ec <__ieee754_pow+0x3c>
 80422e8:	4598      	cmp	r8, r3
 80422ea:	dc02      	bgt.n	80422f2 <__ieee754_pow+0x42>
 80422ec:	4598      	cmp	r8, r3
 80422ee:	d10e      	bne.n	804230e <__ieee754_pow+0x5e>
 80422f0:	b16a      	cbz	r2, 804230e <__ieee754_pow+0x5e>
 80422f2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80422f6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80422fa:	ea54 030a 	orrs.w	r3, r4, sl
 80422fe:	f000 84a4 	beq.w	8042c4a <__ieee754_pow+0x99a>
 8042302:	486e      	ldr	r0, [pc, #440]	; (80424bc <__ieee754_pow+0x20c>)
 8042304:	b011      	add	sp, #68	; 0x44
 8042306:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804230a:	f000 bda5 	b.w	8042e58 <nan>
 804230e:	2d00      	cmp	r5, #0
 8042310:	da53      	bge.n	80423ba <__ieee754_pow+0x10a>
 8042312:	4b6b      	ldr	r3, [pc, #428]	; (80424c0 <__ieee754_pow+0x210>)
 8042314:	4598      	cmp	r8, r3
 8042316:	dc4d      	bgt.n	80423b4 <__ieee754_pow+0x104>
 8042318:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 804231c:	4598      	cmp	r8, r3
 804231e:	dd4c      	ble.n	80423ba <__ieee754_pow+0x10a>
 8042320:	ea4f 5328 	mov.w	r3, r8, asr #20
 8042324:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8042328:	2b14      	cmp	r3, #20
 804232a:	dd26      	ble.n	804237a <__ieee754_pow+0xca>
 804232c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8042330:	fa22 f103 	lsr.w	r1, r2, r3
 8042334:	fa01 f303 	lsl.w	r3, r1, r3
 8042338:	4293      	cmp	r3, r2
 804233a:	d13e      	bne.n	80423ba <__ieee754_pow+0x10a>
 804233c:	f001 0101 	and.w	r1, r1, #1
 8042340:	f1c1 0b02 	rsb	fp, r1, #2
 8042344:	2a00      	cmp	r2, #0
 8042346:	d15b      	bne.n	8042400 <__ieee754_pow+0x150>
 8042348:	4b5b      	ldr	r3, [pc, #364]	; (80424b8 <__ieee754_pow+0x208>)
 804234a:	4598      	cmp	r8, r3
 804234c:	d124      	bne.n	8042398 <__ieee754_pow+0xe8>
 804234e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8042352:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8042356:	ea53 030a 	orrs.w	r3, r3, sl
 804235a:	f000 8476 	beq.w	8042c4a <__ieee754_pow+0x99a>
 804235e:	4b59      	ldr	r3, [pc, #356]	; (80424c4 <__ieee754_pow+0x214>)
 8042360:	429c      	cmp	r4, r3
 8042362:	dd2d      	ble.n	80423c0 <__ieee754_pow+0x110>
 8042364:	f1b9 0f00 	cmp.w	r9, #0
 8042368:	f280 8473 	bge.w	8042c52 <__ieee754_pow+0x9a2>
 804236c:	2000      	movs	r0, #0
 804236e:	2100      	movs	r1, #0
 8042370:	ec41 0b10 	vmov	d0, r0, r1
 8042374:	b011      	add	sp, #68	; 0x44
 8042376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804237a:	2a00      	cmp	r2, #0
 804237c:	d13e      	bne.n	80423fc <__ieee754_pow+0x14c>
 804237e:	f1c3 0314 	rsb	r3, r3, #20
 8042382:	fa48 f103 	asr.w	r1, r8, r3
 8042386:	fa01 f303 	lsl.w	r3, r1, r3
 804238a:	4543      	cmp	r3, r8
 804238c:	f040 8469 	bne.w	8042c62 <__ieee754_pow+0x9b2>
 8042390:	f001 0101 	and.w	r1, r1, #1
 8042394:	f1c1 0b02 	rsb	fp, r1, #2
 8042398:	4b4b      	ldr	r3, [pc, #300]	; (80424c8 <__ieee754_pow+0x218>)
 804239a:	4598      	cmp	r8, r3
 804239c:	d118      	bne.n	80423d0 <__ieee754_pow+0x120>
 804239e:	f1b9 0f00 	cmp.w	r9, #0
 80423a2:	f280 845a 	bge.w	8042c5a <__ieee754_pow+0x9aa>
 80423a6:	4948      	ldr	r1, [pc, #288]	; (80424c8 <__ieee754_pow+0x218>)
 80423a8:	4632      	mov	r2, r6
 80423aa:	463b      	mov	r3, r7
 80423ac:	2000      	movs	r0, #0
 80423ae:	f7de fa85 	bl	80208bc <__aeabi_ddiv>
 80423b2:	e7dd      	b.n	8042370 <__ieee754_pow+0xc0>
 80423b4:	f04f 0b02 	mov.w	fp, #2
 80423b8:	e7c4      	b.n	8042344 <__ieee754_pow+0x94>
 80423ba:	f04f 0b00 	mov.w	fp, #0
 80423be:	e7c1      	b.n	8042344 <__ieee754_pow+0x94>
 80423c0:	f1b9 0f00 	cmp.w	r9, #0
 80423c4:	dad2      	bge.n	804236c <__ieee754_pow+0xbc>
 80423c6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80423ca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80423ce:	e7cf      	b.n	8042370 <__ieee754_pow+0xc0>
 80423d0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80423d4:	d106      	bne.n	80423e4 <__ieee754_pow+0x134>
 80423d6:	4632      	mov	r2, r6
 80423d8:	463b      	mov	r3, r7
 80423da:	4610      	mov	r0, r2
 80423dc:	4619      	mov	r1, r3
 80423de:	f7de f943 	bl	8020668 <__aeabi_dmul>
 80423e2:	e7c5      	b.n	8042370 <__ieee754_pow+0xc0>
 80423e4:	4b39      	ldr	r3, [pc, #228]	; (80424cc <__ieee754_pow+0x21c>)
 80423e6:	4599      	cmp	r9, r3
 80423e8:	d10a      	bne.n	8042400 <__ieee754_pow+0x150>
 80423ea:	2d00      	cmp	r5, #0
 80423ec:	db08      	blt.n	8042400 <__ieee754_pow+0x150>
 80423ee:	ec47 6b10 	vmov	d0, r6, r7
 80423f2:	b011      	add	sp, #68	; 0x44
 80423f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80423f8:	f000 bc68 	b.w	8042ccc <__ieee754_sqrt>
 80423fc:	f04f 0b00 	mov.w	fp, #0
 8042400:	ec47 6b10 	vmov	d0, r6, r7
 8042404:	f000 fd12 	bl	8042e2c <fabs>
 8042408:	ec51 0b10 	vmov	r0, r1, d0
 804240c:	f1ba 0f00 	cmp.w	sl, #0
 8042410:	d127      	bne.n	8042462 <__ieee754_pow+0x1b2>
 8042412:	b124      	cbz	r4, 804241e <__ieee754_pow+0x16e>
 8042414:	4b2c      	ldr	r3, [pc, #176]	; (80424c8 <__ieee754_pow+0x218>)
 8042416:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 804241a:	429a      	cmp	r2, r3
 804241c:	d121      	bne.n	8042462 <__ieee754_pow+0x1b2>
 804241e:	f1b9 0f00 	cmp.w	r9, #0
 8042422:	da05      	bge.n	8042430 <__ieee754_pow+0x180>
 8042424:	4602      	mov	r2, r0
 8042426:	460b      	mov	r3, r1
 8042428:	2000      	movs	r0, #0
 804242a:	4927      	ldr	r1, [pc, #156]	; (80424c8 <__ieee754_pow+0x218>)
 804242c:	f7de fa46 	bl	80208bc <__aeabi_ddiv>
 8042430:	2d00      	cmp	r5, #0
 8042432:	da9d      	bge.n	8042370 <__ieee754_pow+0xc0>
 8042434:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8042438:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 804243c:	ea54 030b 	orrs.w	r3, r4, fp
 8042440:	d108      	bne.n	8042454 <__ieee754_pow+0x1a4>
 8042442:	4602      	mov	r2, r0
 8042444:	460b      	mov	r3, r1
 8042446:	4610      	mov	r0, r2
 8042448:	4619      	mov	r1, r3
 804244a:	f7dd ff55 	bl	80202f8 <__aeabi_dsub>
 804244e:	4602      	mov	r2, r0
 8042450:	460b      	mov	r3, r1
 8042452:	e7ac      	b.n	80423ae <__ieee754_pow+0xfe>
 8042454:	f1bb 0f01 	cmp.w	fp, #1
 8042458:	d18a      	bne.n	8042370 <__ieee754_pow+0xc0>
 804245a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 804245e:	4619      	mov	r1, r3
 8042460:	e786      	b.n	8042370 <__ieee754_pow+0xc0>
 8042462:	0fed      	lsrs	r5, r5, #31
 8042464:	1e6b      	subs	r3, r5, #1
 8042466:	930d      	str	r3, [sp, #52]	; 0x34
 8042468:	ea5b 0303 	orrs.w	r3, fp, r3
 804246c:	d102      	bne.n	8042474 <__ieee754_pow+0x1c4>
 804246e:	4632      	mov	r2, r6
 8042470:	463b      	mov	r3, r7
 8042472:	e7e8      	b.n	8042446 <__ieee754_pow+0x196>
 8042474:	4b16      	ldr	r3, [pc, #88]	; (80424d0 <__ieee754_pow+0x220>)
 8042476:	4598      	cmp	r8, r3
 8042478:	f340 80fe 	ble.w	8042678 <__ieee754_pow+0x3c8>
 804247c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8042480:	4598      	cmp	r8, r3
 8042482:	dd0a      	ble.n	804249a <__ieee754_pow+0x1ea>
 8042484:	4b0f      	ldr	r3, [pc, #60]	; (80424c4 <__ieee754_pow+0x214>)
 8042486:	429c      	cmp	r4, r3
 8042488:	dc0d      	bgt.n	80424a6 <__ieee754_pow+0x1f6>
 804248a:	f1b9 0f00 	cmp.w	r9, #0
 804248e:	f6bf af6d 	bge.w	804236c <__ieee754_pow+0xbc>
 8042492:	a307      	add	r3, pc, #28	; (adr r3, 80424b0 <__ieee754_pow+0x200>)
 8042494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042498:	e79f      	b.n	80423da <__ieee754_pow+0x12a>
 804249a:	4b0e      	ldr	r3, [pc, #56]	; (80424d4 <__ieee754_pow+0x224>)
 804249c:	429c      	cmp	r4, r3
 804249e:	ddf4      	ble.n	804248a <__ieee754_pow+0x1da>
 80424a0:	4b09      	ldr	r3, [pc, #36]	; (80424c8 <__ieee754_pow+0x218>)
 80424a2:	429c      	cmp	r4, r3
 80424a4:	dd18      	ble.n	80424d8 <__ieee754_pow+0x228>
 80424a6:	f1b9 0f00 	cmp.w	r9, #0
 80424aa:	dcf2      	bgt.n	8042492 <__ieee754_pow+0x1e2>
 80424ac:	e75e      	b.n	804236c <__ieee754_pow+0xbc>
 80424ae:	bf00      	nop
 80424b0:	8800759c 	.word	0x8800759c
 80424b4:	7e37e43c 	.word	0x7e37e43c
 80424b8:	7ff00000 	.word	0x7ff00000
 80424bc:	08056391 	.word	0x08056391
 80424c0:	433fffff 	.word	0x433fffff
 80424c4:	3fefffff 	.word	0x3fefffff
 80424c8:	3ff00000 	.word	0x3ff00000
 80424cc:	3fe00000 	.word	0x3fe00000
 80424d0:	41e00000 	.word	0x41e00000
 80424d4:	3feffffe 	.word	0x3feffffe
 80424d8:	2200      	movs	r2, #0
 80424da:	4b63      	ldr	r3, [pc, #396]	; (8042668 <__ieee754_pow+0x3b8>)
 80424dc:	f7dd ff0c 	bl	80202f8 <__aeabi_dsub>
 80424e0:	a355      	add	r3, pc, #340	; (adr r3, 8042638 <__ieee754_pow+0x388>)
 80424e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80424e6:	4604      	mov	r4, r0
 80424e8:	460d      	mov	r5, r1
 80424ea:	f7de f8bd 	bl	8020668 <__aeabi_dmul>
 80424ee:	a354      	add	r3, pc, #336	; (adr r3, 8042640 <__ieee754_pow+0x390>)
 80424f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80424f4:	4606      	mov	r6, r0
 80424f6:	460f      	mov	r7, r1
 80424f8:	4620      	mov	r0, r4
 80424fa:	4629      	mov	r1, r5
 80424fc:	f7de f8b4 	bl	8020668 <__aeabi_dmul>
 8042500:	2200      	movs	r2, #0
 8042502:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8042506:	4b59      	ldr	r3, [pc, #356]	; (804266c <__ieee754_pow+0x3bc>)
 8042508:	4620      	mov	r0, r4
 804250a:	4629      	mov	r1, r5
 804250c:	f7de f8ac 	bl	8020668 <__aeabi_dmul>
 8042510:	4602      	mov	r2, r0
 8042512:	460b      	mov	r3, r1
 8042514:	a14c      	add	r1, pc, #304	; (adr r1, 8042648 <__ieee754_pow+0x398>)
 8042516:	e9d1 0100 	ldrd	r0, r1, [r1]
 804251a:	f7dd feed 	bl	80202f8 <__aeabi_dsub>
 804251e:	4622      	mov	r2, r4
 8042520:	462b      	mov	r3, r5
 8042522:	f7de f8a1 	bl	8020668 <__aeabi_dmul>
 8042526:	4602      	mov	r2, r0
 8042528:	460b      	mov	r3, r1
 804252a:	2000      	movs	r0, #0
 804252c:	4950      	ldr	r1, [pc, #320]	; (8042670 <__ieee754_pow+0x3c0>)
 804252e:	f7dd fee3 	bl	80202f8 <__aeabi_dsub>
 8042532:	4622      	mov	r2, r4
 8042534:	462b      	mov	r3, r5
 8042536:	4680      	mov	r8, r0
 8042538:	4689      	mov	r9, r1
 804253a:	4620      	mov	r0, r4
 804253c:	4629      	mov	r1, r5
 804253e:	f7de f893 	bl	8020668 <__aeabi_dmul>
 8042542:	4602      	mov	r2, r0
 8042544:	460b      	mov	r3, r1
 8042546:	4640      	mov	r0, r8
 8042548:	4649      	mov	r1, r9
 804254a:	f7de f88d 	bl	8020668 <__aeabi_dmul>
 804254e:	a340      	add	r3, pc, #256	; (adr r3, 8042650 <__ieee754_pow+0x3a0>)
 8042550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042554:	f7de f888 	bl	8020668 <__aeabi_dmul>
 8042558:	4602      	mov	r2, r0
 804255a:	460b      	mov	r3, r1
 804255c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8042560:	f7dd feca 	bl	80202f8 <__aeabi_dsub>
 8042564:	4602      	mov	r2, r0
 8042566:	460b      	mov	r3, r1
 8042568:	4604      	mov	r4, r0
 804256a:	460d      	mov	r5, r1
 804256c:	4630      	mov	r0, r6
 804256e:	4639      	mov	r1, r7
 8042570:	f7dd fec4 	bl	80202fc <__adddf3>
 8042574:	2000      	movs	r0, #0
 8042576:	e9cd 0104 	strd	r0, r1, [sp, #16]
 804257a:	4632      	mov	r2, r6
 804257c:	463b      	mov	r3, r7
 804257e:	f7dd febb 	bl	80202f8 <__aeabi_dsub>
 8042582:	4602      	mov	r2, r0
 8042584:	460b      	mov	r3, r1
 8042586:	4620      	mov	r0, r4
 8042588:	4629      	mov	r1, r5
 804258a:	f7dd feb5 	bl	80202f8 <__aeabi_dsub>
 804258e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8042590:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8042594:	4313      	orrs	r3, r2
 8042596:	4606      	mov	r6, r0
 8042598:	460f      	mov	r7, r1
 804259a:	f040 81eb 	bne.w	8042974 <__ieee754_pow+0x6c4>
 804259e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8042658 <__ieee754_pow+0x3a8>
 80425a2:	e9dd 4500 	ldrd	r4, r5, [sp]
 80425a6:	2400      	movs	r4, #0
 80425a8:	4622      	mov	r2, r4
 80425aa:	462b      	mov	r3, r5
 80425ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80425b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80425b4:	f7dd fea0 	bl	80202f8 <__aeabi_dsub>
 80425b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80425bc:	f7de f854 	bl	8020668 <__aeabi_dmul>
 80425c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80425c4:	4680      	mov	r8, r0
 80425c6:	4689      	mov	r9, r1
 80425c8:	4630      	mov	r0, r6
 80425ca:	4639      	mov	r1, r7
 80425cc:	f7de f84c 	bl	8020668 <__aeabi_dmul>
 80425d0:	4602      	mov	r2, r0
 80425d2:	460b      	mov	r3, r1
 80425d4:	4640      	mov	r0, r8
 80425d6:	4649      	mov	r1, r9
 80425d8:	f7dd fe90 	bl	80202fc <__adddf3>
 80425dc:	4622      	mov	r2, r4
 80425de:	462b      	mov	r3, r5
 80425e0:	4680      	mov	r8, r0
 80425e2:	4689      	mov	r9, r1
 80425e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80425e8:	f7de f83e 	bl	8020668 <__aeabi_dmul>
 80425ec:	460b      	mov	r3, r1
 80425ee:	4604      	mov	r4, r0
 80425f0:	460d      	mov	r5, r1
 80425f2:	4602      	mov	r2, r0
 80425f4:	4649      	mov	r1, r9
 80425f6:	4640      	mov	r0, r8
 80425f8:	e9cd 4500 	strd	r4, r5, [sp]
 80425fc:	f7dd fe7e 	bl	80202fc <__adddf3>
 8042600:	4b1c      	ldr	r3, [pc, #112]	; (8042674 <__ieee754_pow+0x3c4>)
 8042602:	4299      	cmp	r1, r3
 8042604:	4606      	mov	r6, r0
 8042606:	460f      	mov	r7, r1
 8042608:	468b      	mov	fp, r1
 804260a:	f340 82f7 	ble.w	8042bfc <__ieee754_pow+0x94c>
 804260e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8042612:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8042616:	4303      	orrs	r3, r0
 8042618:	f000 81ea 	beq.w	80429f0 <__ieee754_pow+0x740>
 804261c:	a310      	add	r3, pc, #64	; (adr r3, 8042660 <__ieee754_pow+0x3b0>)
 804261e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042622:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8042626:	f7de f81f 	bl	8020668 <__aeabi_dmul>
 804262a:	a30d      	add	r3, pc, #52	; (adr r3, 8042660 <__ieee754_pow+0x3b0>)
 804262c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042630:	e6d5      	b.n	80423de <__ieee754_pow+0x12e>
 8042632:	bf00      	nop
 8042634:	f3af 8000 	nop.w
 8042638:	60000000 	.word	0x60000000
 804263c:	3ff71547 	.word	0x3ff71547
 8042640:	f85ddf44 	.word	0xf85ddf44
 8042644:	3e54ae0b 	.word	0x3e54ae0b
 8042648:	55555555 	.word	0x55555555
 804264c:	3fd55555 	.word	0x3fd55555
 8042650:	652b82fe 	.word	0x652b82fe
 8042654:	3ff71547 	.word	0x3ff71547
 8042658:	00000000 	.word	0x00000000
 804265c:	bff00000 	.word	0xbff00000
 8042660:	8800759c 	.word	0x8800759c
 8042664:	7e37e43c 	.word	0x7e37e43c
 8042668:	3ff00000 	.word	0x3ff00000
 804266c:	3fd00000 	.word	0x3fd00000
 8042670:	3fe00000 	.word	0x3fe00000
 8042674:	408fffff 	.word	0x408fffff
 8042678:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 804267c:	f04f 0200 	mov.w	r2, #0
 8042680:	da05      	bge.n	804268e <__ieee754_pow+0x3de>
 8042682:	4bd3      	ldr	r3, [pc, #844]	; (80429d0 <__ieee754_pow+0x720>)
 8042684:	f7dd fff0 	bl	8020668 <__aeabi_dmul>
 8042688:	f06f 0234 	mvn.w	r2, #52	; 0x34
 804268c:	460c      	mov	r4, r1
 804268e:	1523      	asrs	r3, r4, #20
 8042690:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8042694:	4413      	add	r3, r2
 8042696:	9309      	str	r3, [sp, #36]	; 0x24
 8042698:	4bce      	ldr	r3, [pc, #824]	; (80429d4 <__ieee754_pow+0x724>)
 804269a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 804269e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80426a2:	429c      	cmp	r4, r3
 80426a4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80426a8:	dd08      	ble.n	80426bc <__ieee754_pow+0x40c>
 80426aa:	4bcb      	ldr	r3, [pc, #812]	; (80429d8 <__ieee754_pow+0x728>)
 80426ac:	429c      	cmp	r4, r3
 80426ae:	f340 815e 	ble.w	804296e <__ieee754_pow+0x6be>
 80426b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80426b4:	3301      	adds	r3, #1
 80426b6:	9309      	str	r3, [sp, #36]	; 0x24
 80426b8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80426bc:	f04f 0a00 	mov.w	sl, #0
 80426c0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80426c4:	930c      	str	r3, [sp, #48]	; 0x30
 80426c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80426c8:	4bc4      	ldr	r3, [pc, #784]	; (80429dc <__ieee754_pow+0x72c>)
 80426ca:	4413      	add	r3, r2
 80426cc:	ed93 7b00 	vldr	d7, [r3]
 80426d0:	4629      	mov	r1, r5
 80426d2:	ec53 2b17 	vmov	r2, r3, d7
 80426d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80426da:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80426de:	f7dd fe0b 	bl	80202f8 <__aeabi_dsub>
 80426e2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80426e6:	4606      	mov	r6, r0
 80426e8:	460f      	mov	r7, r1
 80426ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80426ee:	f7dd fe05 	bl	80202fc <__adddf3>
 80426f2:	4602      	mov	r2, r0
 80426f4:	460b      	mov	r3, r1
 80426f6:	2000      	movs	r0, #0
 80426f8:	49b9      	ldr	r1, [pc, #740]	; (80429e0 <__ieee754_pow+0x730>)
 80426fa:	f7de f8df 	bl	80208bc <__aeabi_ddiv>
 80426fe:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8042702:	4602      	mov	r2, r0
 8042704:	460b      	mov	r3, r1
 8042706:	4630      	mov	r0, r6
 8042708:	4639      	mov	r1, r7
 804270a:	f7dd ffad 	bl	8020668 <__aeabi_dmul>
 804270e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8042712:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8042716:	e9cd 3402 	strd	r3, r4, [sp, #8]
 804271a:	2300      	movs	r3, #0
 804271c:	9302      	str	r3, [sp, #8]
 804271e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8042722:	106d      	asrs	r5, r5, #1
 8042724:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8042728:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 804272c:	2200      	movs	r2, #0
 804272e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8042732:	4640      	mov	r0, r8
 8042734:	4649      	mov	r1, r9
 8042736:	4614      	mov	r4, r2
 8042738:	461d      	mov	r5, r3
 804273a:	f7dd ff95 	bl	8020668 <__aeabi_dmul>
 804273e:	4602      	mov	r2, r0
 8042740:	460b      	mov	r3, r1
 8042742:	4630      	mov	r0, r6
 8042744:	4639      	mov	r1, r7
 8042746:	f7dd fdd7 	bl	80202f8 <__aeabi_dsub>
 804274a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 804274e:	4606      	mov	r6, r0
 8042750:	460f      	mov	r7, r1
 8042752:	4620      	mov	r0, r4
 8042754:	4629      	mov	r1, r5
 8042756:	f7dd fdcf 	bl	80202f8 <__aeabi_dsub>
 804275a:	4602      	mov	r2, r0
 804275c:	460b      	mov	r3, r1
 804275e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8042762:	f7dd fdc9 	bl	80202f8 <__aeabi_dsub>
 8042766:	4642      	mov	r2, r8
 8042768:	464b      	mov	r3, r9
 804276a:	f7dd ff7d 	bl	8020668 <__aeabi_dmul>
 804276e:	4602      	mov	r2, r0
 8042770:	460b      	mov	r3, r1
 8042772:	4630      	mov	r0, r6
 8042774:	4639      	mov	r1, r7
 8042776:	f7dd fdbf 	bl	80202f8 <__aeabi_dsub>
 804277a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 804277e:	f7dd ff73 	bl	8020668 <__aeabi_dmul>
 8042782:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8042786:	e9cd 0106 	strd	r0, r1, [sp, #24]
 804278a:	4610      	mov	r0, r2
 804278c:	4619      	mov	r1, r3
 804278e:	f7dd ff6b 	bl	8020668 <__aeabi_dmul>
 8042792:	a37b      	add	r3, pc, #492	; (adr r3, 8042980 <__ieee754_pow+0x6d0>)
 8042794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042798:	4604      	mov	r4, r0
 804279a:	460d      	mov	r5, r1
 804279c:	f7dd ff64 	bl	8020668 <__aeabi_dmul>
 80427a0:	a379      	add	r3, pc, #484	; (adr r3, 8042988 <__ieee754_pow+0x6d8>)
 80427a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80427a6:	f7dd fda9 	bl	80202fc <__adddf3>
 80427aa:	4622      	mov	r2, r4
 80427ac:	462b      	mov	r3, r5
 80427ae:	f7dd ff5b 	bl	8020668 <__aeabi_dmul>
 80427b2:	a377      	add	r3, pc, #476	; (adr r3, 8042990 <__ieee754_pow+0x6e0>)
 80427b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80427b8:	f7dd fda0 	bl	80202fc <__adddf3>
 80427bc:	4622      	mov	r2, r4
 80427be:	462b      	mov	r3, r5
 80427c0:	f7dd ff52 	bl	8020668 <__aeabi_dmul>
 80427c4:	a374      	add	r3, pc, #464	; (adr r3, 8042998 <__ieee754_pow+0x6e8>)
 80427c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80427ca:	f7dd fd97 	bl	80202fc <__adddf3>
 80427ce:	4622      	mov	r2, r4
 80427d0:	462b      	mov	r3, r5
 80427d2:	f7dd ff49 	bl	8020668 <__aeabi_dmul>
 80427d6:	a372      	add	r3, pc, #456	; (adr r3, 80429a0 <__ieee754_pow+0x6f0>)
 80427d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80427dc:	f7dd fd8e 	bl	80202fc <__adddf3>
 80427e0:	4622      	mov	r2, r4
 80427e2:	462b      	mov	r3, r5
 80427e4:	f7dd ff40 	bl	8020668 <__aeabi_dmul>
 80427e8:	a36f      	add	r3, pc, #444	; (adr r3, 80429a8 <__ieee754_pow+0x6f8>)
 80427ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80427ee:	f7dd fd85 	bl	80202fc <__adddf3>
 80427f2:	4622      	mov	r2, r4
 80427f4:	4606      	mov	r6, r0
 80427f6:	460f      	mov	r7, r1
 80427f8:	462b      	mov	r3, r5
 80427fa:	4620      	mov	r0, r4
 80427fc:	4629      	mov	r1, r5
 80427fe:	f7dd ff33 	bl	8020668 <__aeabi_dmul>
 8042802:	4602      	mov	r2, r0
 8042804:	460b      	mov	r3, r1
 8042806:	4630      	mov	r0, r6
 8042808:	4639      	mov	r1, r7
 804280a:	f7dd ff2d 	bl	8020668 <__aeabi_dmul>
 804280e:	4642      	mov	r2, r8
 8042810:	4604      	mov	r4, r0
 8042812:	460d      	mov	r5, r1
 8042814:	464b      	mov	r3, r9
 8042816:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 804281a:	f7dd fd6f 	bl	80202fc <__adddf3>
 804281e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8042822:	f7dd ff21 	bl	8020668 <__aeabi_dmul>
 8042826:	4622      	mov	r2, r4
 8042828:	462b      	mov	r3, r5
 804282a:	f7dd fd67 	bl	80202fc <__adddf3>
 804282e:	4642      	mov	r2, r8
 8042830:	4606      	mov	r6, r0
 8042832:	460f      	mov	r7, r1
 8042834:	464b      	mov	r3, r9
 8042836:	4640      	mov	r0, r8
 8042838:	4649      	mov	r1, r9
 804283a:	f7dd ff15 	bl	8020668 <__aeabi_dmul>
 804283e:	2200      	movs	r2, #0
 8042840:	4b68      	ldr	r3, [pc, #416]	; (80429e4 <__ieee754_pow+0x734>)
 8042842:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8042846:	f7dd fd59 	bl	80202fc <__adddf3>
 804284a:	4632      	mov	r2, r6
 804284c:	463b      	mov	r3, r7
 804284e:	f7dd fd55 	bl	80202fc <__adddf3>
 8042852:	9802      	ldr	r0, [sp, #8]
 8042854:	460d      	mov	r5, r1
 8042856:	4604      	mov	r4, r0
 8042858:	4602      	mov	r2, r0
 804285a:	460b      	mov	r3, r1
 804285c:	4640      	mov	r0, r8
 804285e:	4649      	mov	r1, r9
 8042860:	f7dd ff02 	bl	8020668 <__aeabi_dmul>
 8042864:	2200      	movs	r2, #0
 8042866:	4680      	mov	r8, r0
 8042868:	4689      	mov	r9, r1
 804286a:	4b5e      	ldr	r3, [pc, #376]	; (80429e4 <__ieee754_pow+0x734>)
 804286c:	4620      	mov	r0, r4
 804286e:	4629      	mov	r1, r5
 8042870:	f7dd fd42 	bl	80202f8 <__aeabi_dsub>
 8042874:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8042878:	f7dd fd3e 	bl	80202f8 <__aeabi_dsub>
 804287c:	4602      	mov	r2, r0
 804287e:	460b      	mov	r3, r1
 8042880:	4630      	mov	r0, r6
 8042882:	4639      	mov	r1, r7
 8042884:	f7dd fd38 	bl	80202f8 <__aeabi_dsub>
 8042888:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 804288c:	f7dd feec 	bl	8020668 <__aeabi_dmul>
 8042890:	4622      	mov	r2, r4
 8042892:	4606      	mov	r6, r0
 8042894:	460f      	mov	r7, r1
 8042896:	462b      	mov	r3, r5
 8042898:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 804289c:	f7dd fee4 	bl	8020668 <__aeabi_dmul>
 80428a0:	4602      	mov	r2, r0
 80428a2:	460b      	mov	r3, r1
 80428a4:	4630      	mov	r0, r6
 80428a6:	4639      	mov	r1, r7
 80428a8:	f7dd fd28 	bl	80202fc <__adddf3>
 80428ac:	4606      	mov	r6, r0
 80428ae:	460f      	mov	r7, r1
 80428b0:	4602      	mov	r2, r0
 80428b2:	460b      	mov	r3, r1
 80428b4:	4640      	mov	r0, r8
 80428b6:	4649      	mov	r1, r9
 80428b8:	f7dd fd20 	bl	80202fc <__adddf3>
 80428bc:	9802      	ldr	r0, [sp, #8]
 80428be:	a33c      	add	r3, pc, #240	; (adr r3, 80429b0 <__ieee754_pow+0x700>)
 80428c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80428c4:	4604      	mov	r4, r0
 80428c6:	460d      	mov	r5, r1
 80428c8:	f7dd fece 	bl	8020668 <__aeabi_dmul>
 80428cc:	4642      	mov	r2, r8
 80428ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80428d2:	464b      	mov	r3, r9
 80428d4:	4620      	mov	r0, r4
 80428d6:	4629      	mov	r1, r5
 80428d8:	f7dd fd0e 	bl	80202f8 <__aeabi_dsub>
 80428dc:	4602      	mov	r2, r0
 80428de:	460b      	mov	r3, r1
 80428e0:	4630      	mov	r0, r6
 80428e2:	4639      	mov	r1, r7
 80428e4:	f7dd fd08 	bl	80202f8 <__aeabi_dsub>
 80428e8:	a333      	add	r3, pc, #204	; (adr r3, 80429b8 <__ieee754_pow+0x708>)
 80428ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80428ee:	f7dd febb 	bl	8020668 <__aeabi_dmul>
 80428f2:	a333      	add	r3, pc, #204	; (adr r3, 80429c0 <__ieee754_pow+0x710>)
 80428f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80428f8:	4606      	mov	r6, r0
 80428fa:	460f      	mov	r7, r1
 80428fc:	4620      	mov	r0, r4
 80428fe:	4629      	mov	r1, r5
 8042900:	f7dd feb2 	bl	8020668 <__aeabi_dmul>
 8042904:	4602      	mov	r2, r0
 8042906:	460b      	mov	r3, r1
 8042908:	4630      	mov	r0, r6
 804290a:	4639      	mov	r1, r7
 804290c:	f7dd fcf6 	bl	80202fc <__adddf3>
 8042910:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8042912:	4b35      	ldr	r3, [pc, #212]	; (80429e8 <__ieee754_pow+0x738>)
 8042914:	4413      	add	r3, r2
 8042916:	e9d3 2300 	ldrd	r2, r3, [r3]
 804291a:	f7dd fcef 	bl	80202fc <__adddf3>
 804291e:	4604      	mov	r4, r0
 8042920:	9809      	ldr	r0, [sp, #36]	; 0x24
 8042922:	460d      	mov	r5, r1
 8042924:	f7dd fe36 	bl	8020594 <__aeabi_i2d>
 8042928:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 804292a:	4b30      	ldr	r3, [pc, #192]	; (80429ec <__ieee754_pow+0x73c>)
 804292c:	4413      	add	r3, r2
 804292e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8042932:	4606      	mov	r6, r0
 8042934:	460f      	mov	r7, r1
 8042936:	4622      	mov	r2, r4
 8042938:	462b      	mov	r3, r5
 804293a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 804293e:	f7dd fcdd 	bl	80202fc <__adddf3>
 8042942:	4642      	mov	r2, r8
 8042944:	464b      	mov	r3, r9
 8042946:	f7dd fcd9 	bl	80202fc <__adddf3>
 804294a:	4632      	mov	r2, r6
 804294c:	463b      	mov	r3, r7
 804294e:	f7dd fcd5 	bl	80202fc <__adddf3>
 8042952:	9802      	ldr	r0, [sp, #8]
 8042954:	4632      	mov	r2, r6
 8042956:	463b      	mov	r3, r7
 8042958:	e9cd 0104 	strd	r0, r1, [sp, #16]
 804295c:	f7dd fccc 	bl	80202f8 <__aeabi_dsub>
 8042960:	4642      	mov	r2, r8
 8042962:	464b      	mov	r3, r9
 8042964:	f7dd fcc8 	bl	80202f8 <__aeabi_dsub>
 8042968:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 804296c:	e607      	b.n	804257e <__ieee754_pow+0x2ce>
 804296e:	f04f 0a01 	mov.w	sl, #1
 8042972:	e6a5      	b.n	80426c0 <__ieee754_pow+0x410>
 8042974:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80429c8 <__ieee754_pow+0x718>
 8042978:	e613      	b.n	80425a2 <__ieee754_pow+0x2f2>
 804297a:	bf00      	nop
 804297c:	f3af 8000 	nop.w
 8042980:	4a454eef 	.word	0x4a454eef
 8042984:	3fca7e28 	.word	0x3fca7e28
 8042988:	93c9db65 	.word	0x93c9db65
 804298c:	3fcd864a 	.word	0x3fcd864a
 8042990:	a91d4101 	.word	0xa91d4101
 8042994:	3fd17460 	.word	0x3fd17460
 8042998:	518f264d 	.word	0x518f264d
 804299c:	3fd55555 	.word	0x3fd55555
 80429a0:	db6fabff 	.word	0xdb6fabff
 80429a4:	3fdb6db6 	.word	0x3fdb6db6
 80429a8:	33333303 	.word	0x33333303
 80429ac:	3fe33333 	.word	0x3fe33333
 80429b0:	e0000000 	.word	0xe0000000
 80429b4:	3feec709 	.word	0x3feec709
 80429b8:	dc3a03fd 	.word	0xdc3a03fd
 80429bc:	3feec709 	.word	0x3feec709
 80429c0:	145b01f5 	.word	0x145b01f5
 80429c4:	be3e2fe0 	.word	0xbe3e2fe0
 80429c8:	00000000 	.word	0x00000000
 80429cc:	3ff00000 	.word	0x3ff00000
 80429d0:	43400000 	.word	0x43400000
 80429d4:	0003988e 	.word	0x0003988e
 80429d8:	000bb679 	.word	0x000bb679
 80429dc:	080564d0 	.word	0x080564d0
 80429e0:	3ff00000 	.word	0x3ff00000
 80429e4:	40080000 	.word	0x40080000
 80429e8:	080564f0 	.word	0x080564f0
 80429ec:	080564e0 	.word	0x080564e0
 80429f0:	a3b4      	add	r3, pc, #720	; (adr r3, 8042cc4 <__ieee754_pow+0xa14>)
 80429f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80429f6:	4640      	mov	r0, r8
 80429f8:	4649      	mov	r1, r9
 80429fa:	f7dd fc7f 	bl	80202fc <__adddf3>
 80429fe:	4622      	mov	r2, r4
 8042a00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8042a04:	462b      	mov	r3, r5
 8042a06:	4630      	mov	r0, r6
 8042a08:	4639      	mov	r1, r7
 8042a0a:	f7dd fc75 	bl	80202f8 <__aeabi_dsub>
 8042a0e:	4602      	mov	r2, r0
 8042a10:	460b      	mov	r3, r1
 8042a12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8042a16:	f7de f8b7 	bl	8020b88 <__aeabi_dcmpgt>
 8042a1a:	2800      	cmp	r0, #0
 8042a1c:	f47f adfe 	bne.w	804261c <__ieee754_pow+0x36c>
 8042a20:	4aa3      	ldr	r2, [pc, #652]	; (8042cb0 <__ieee754_pow+0xa00>)
 8042a22:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8042a26:	4293      	cmp	r3, r2
 8042a28:	f340 810a 	ble.w	8042c40 <__ieee754_pow+0x990>
 8042a2c:	151b      	asrs	r3, r3, #20
 8042a2e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8042a32:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8042a36:	fa4a f303 	asr.w	r3, sl, r3
 8042a3a:	445b      	add	r3, fp
 8042a3c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8042a40:	4e9c      	ldr	r6, [pc, #624]	; (8042cb4 <__ieee754_pow+0xa04>)
 8042a42:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8042a46:	4116      	asrs	r6, r2
 8042a48:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8042a4c:	2000      	movs	r0, #0
 8042a4e:	ea23 0106 	bic.w	r1, r3, r6
 8042a52:	f1c2 0214 	rsb	r2, r2, #20
 8042a56:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8042a5a:	fa4a fa02 	asr.w	sl, sl, r2
 8042a5e:	f1bb 0f00 	cmp.w	fp, #0
 8042a62:	4602      	mov	r2, r0
 8042a64:	460b      	mov	r3, r1
 8042a66:	4620      	mov	r0, r4
 8042a68:	4629      	mov	r1, r5
 8042a6a:	bfb8      	it	lt
 8042a6c:	f1ca 0a00 	rsblt	sl, sl, #0
 8042a70:	f7dd fc42 	bl	80202f8 <__aeabi_dsub>
 8042a74:	e9cd 0100 	strd	r0, r1, [sp]
 8042a78:	4642      	mov	r2, r8
 8042a7a:	464b      	mov	r3, r9
 8042a7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8042a80:	f7dd fc3c 	bl	80202fc <__adddf3>
 8042a84:	2000      	movs	r0, #0
 8042a86:	a378      	add	r3, pc, #480	; (adr r3, 8042c68 <__ieee754_pow+0x9b8>)
 8042a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042a8c:	4604      	mov	r4, r0
 8042a8e:	460d      	mov	r5, r1
 8042a90:	f7dd fdea 	bl	8020668 <__aeabi_dmul>
 8042a94:	e9dd 2300 	ldrd	r2, r3, [sp]
 8042a98:	4606      	mov	r6, r0
 8042a9a:	460f      	mov	r7, r1
 8042a9c:	4620      	mov	r0, r4
 8042a9e:	4629      	mov	r1, r5
 8042aa0:	f7dd fc2a 	bl	80202f8 <__aeabi_dsub>
 8042aa4:	4602      	mov	r2, r0
 8042aa6:	460b      	mov	r3, r1
 8042aa8:	4640      	mov	r0, r8
 8042aaa:	4649      	mov	r1, r9
 8042aac:	f7dd fc24 	bl	80202f8 <__aeabi_dsub>
 8042ab0:	a36f      	add	r3, pc, #444	; (adr r3, 8042c70 <__ieee754_pow+0x9c0>)
 8042ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042ab6:	f7dd fdd7 	bl	8020668 <__aeabi_dmul>
 8042aba:	a36f      	add	r3, pc, #444	; (adr r3, 8042c78 <__ieee754_pow+0x9c8>)
 8042abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042ac0:	4680      	mov	r8, r0
 8042ac2:	4689      	mov	r9, r1
 8042ac4:	4620      	mov	r0, r4
 8042ac6:	4629      	mov	r1, r5
 8042ac8:	f7dd fdce 	bl	8020668 <__aeabi_dmul>
 8042acc:	4602      	mov	r2, r0
 8042ace:	460b      	mov	r3, r1
 8042ad0:	4640      	mov	r0, r8
 8042ad2:	4649      	mov	r1, r9
 8042ad4:	f7dd fc12 	bl	80202fc <__adddf3>
 8042ad8:	4604      	mov	r4, r0
 8042ada:	460d      	mov	r5, r1
 8042adc:	4602      	mov	r2, r0
 8042ade:	460b      	mov	r3, r1
 8042ae0:	4630      	mov	r0, r6
 8042ae2:	4639      	mov	r1, r7
 8042ae4:	f7dd fc0a 	bl	80202fc <__adddf3>
 8042ae8:	4632      	mov	r2, r6
 8042aea:	463b      	mov	r3, r7
 8042aec:	4680      	mov	r8, r0
 8042aee:	4689      	mov	r9, r1
 8042af0:	f7dd fc02 	bl	80202f8 <__aeabi_dsub>
 8042af4:	4602      	mov	r2, r0
 8042af6:	460b      	mov	r3, r1
 8042af8:	4620      	mov	r0, r4
 8042afa:	4629      	mov	r1, r5
 8042afc:	f7dd fbfc 	bl	80202f8 <__aeabi_dsub>
 8042b00:	4642      	mov	r2, r8
 8042b02:	4606      	mov	r6, r0
 8042b04:	460f      	mov	r7, r1
 8042b06:	464b      	mov	r3, r9
 8042b08:	4640      	mov	r0, r8
 8042b0a:	4649      	mov	r1, r9
 8042b0c:	f7dd fdac 	bl	8020668 <__aeabi_dmul>
 8042b10:	a35b      	add	r3, pc, #364	; (adr r3, 8042c80 <__ieee754_pow+0x9d0>)
 8042b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042b16:	4604      	mov	r4, r0
 8042b18:	460d      	mov	r5, r1
 8042b1a:	f7dd fda5 	bl	8020668 <__aeabi_dmul>
 8042b1e:	a35a      	add	r3, pc, #360	; (adr r3, 8042c88 <__ieee754_pow+0x9d8>)
 8042b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042b24:	f7dd fbe8 	bl	80202f8 <__aeabi_dsub>
 8042b28:	4622      	mov	r2, r4
 8042b2a:	462b      	mov	r3, r5
 8042b2c:	f7dd fd9c 	bl	8020668 <__aeabi_dmul>
 8042b30:	a357      	add	r3, pc, #348	; (adr r3, 8042c90 <__ieee754_pow+0x9e0>)
 8042b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042b36:	f7dd fbe1 	bl	80202fc <__adddf3>
 8042b3a:	4622      	mov	r2, r4
 8042b3c:	462b      	mov	r3, r5
 8042b3e:	f7dd fd93 	bl	8020668 <__aeabi_dmul>
 8042b42:	a355      	add	r3, pc, #340	; (adr r3, 8042c98 <__ieee754_pow+0x9e8>)
 8042b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042b48:	f7dd fbd6 	bl	80202f8 <__aeabi_dsub>
 8042b4c:	4622      	mov	r2, r4
 8042b4e:	462b      	mov	r3, r5
 8042b50:	f7dd fd8a 	bl	8020668 <__aeabi_dmul>
 8042b54:	a352      	add	r3, pc, #328	; (adr r3, 8042ca0 <__ieee754_pow+0x9f0>)
 8042b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042b5a:	f7dd fbcf 	bl	80202fc <__adddf3>
 8042b5e:	4622      	mov	r2, r4
 8042b60:	462b      	mov	r3, r5
 8042b62:	f7dd fd81 	bl	8020668 <__aeabi_dmul>
 8042b66:	4602      	mov	r2, r0
 8042b68:	460b      	mov	r3, r1
 8042b6a:	4640      	mov	r0, r8
 8042b6c:	4649      	mov	r1, r9
 8042b6e:	f7dd fbc3 	bl	80202f8 <__aeabi_dsub>
 8042b72:	4604      	mov	r4, r0
 8042b74:	460d      	mov	r5, r1
 8042b76:	4602      	mov	r2, r0
 8042b78:	460b      	mov	r3, r1
 8042b7a:	4640      	mov	r0, r8
 8042b7c:	4649      	mov	r1, r9
 8042b7e:	f7dd fd73 	bl	8020668 <__aeabi_dmul>
 8042b82:	2200      	movs	r2, #0
 8042b84:	e9cd 0100 	strd	r0, r1, [sp]
 8042b88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8042b8c:	4620      	mov	r0, r4
 8042b8e:	4629      	mov	r1, r5
 8042b90:	f7dd fbb2 	bl	80202f8 <__aeabi_dsub>
 8042b94:	4602      	mov	r2, r0
 8042b96:	460b      	mov	r3, r1
 8042b98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8042b9c:	f7dd fe8e 	bl	80208bc <__aeabi_ddiv>
 8042ba0:	4632      	mov	r2, r6
 8042ba2:	4604      	mov	r4, r0
 8042ba4:	460d      	mov	r5, r1
 8042ba6:	463b      	mov	r3, r7
 8042ba8:	4640      	mov	r0, r8
 8042baa:	4649      	mov	r1, r9
 8042bac:	f7dd fd5c 	bl	8020668 <__aeabi_dmul>
 8042bb0:	4632      	mov	r2, r6
 8042bb2:	463b      	mov	r3, r7
 8042bb4:	f7dd fba2 	bl	80202fc <__adddf3>
 8042bb8:	4602      	mov	r2, r0
 8042bba:	460b      	mov	r3, r1
 8042bbc:	4620      	mov	r0, r4
 8042bbe:	4629      	mov	r1, r5
 8042bc0:	f7dd fb9a 	bl	80202f8 <__aeabi_dsub>
 8042bc4:	4642      	mov	r2, r8
 8042bc6:	464b      	mov	r3, r9
 8042bc8:	f7dd fb96 	bl	80202f8 <__aeabi_dsub>
 8042bcc:	4602      	mov	r2, r0
 8042bce:	460b      	mov	r3, r1
 8042bd0:	2000      	movs	r0, #0
 8042bd2:	4939      	ldr	r1, [pc, #228]	; (8042cb8 <__ieee754_pow+0xa08>)
 8042bd4:	f7dd fb90 	bl	80202f8 <__aeabi_dsub>
 8042bd8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8042bdc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8042be0:	4602      	mov	r2, r0
 8042be2:	460b      	mov	r3, r1
 8042be4:	da2f      	bge.n	8042c46 <__ieee754_pow+0x996>
 8042be6:	4650      	mov	r0, sl
 8042be8:	ec43 2b10 	vmov	d0, r2, r3
 8042bec:	f000 f9c0 	bl	8042f70 <scalbn>
 8042bf0:	ec51 0b10 	vmov	r0, r1, d0
 8042bf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8042bf8:	f7ff bbf1 	b.w	80423de <__ieee754_pow+0x12e>
 8042bfc:	4b2f      	ldr	r3, [pc, #188]	; (8042cbc <__ieee754_pow+0xa0c>)
 8042bfe:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8042c02:	429e      	cmp	r6, r3
 8042c04:	f77f af0c 	ble.w	8042a20 <__ieee754_pow+0x770>
 8042c08:	4b2d      	ldr	r3, [pc, #180]	; (8042cc0 <__ieee754_pow+0xa10>)
 8042c0a:	440b      	add	r3, r1
 8042c0c:	4303      	orrs	r3, r0
 8042c0e:	d00b      	beq.n	8042c28 <__ieee754_pow+0x978>
 8042c10:	a325      	add	r3, pc, #148	; (adr r3, 8042ca8 <__ieee754_pow+0x9f8>)
 8042c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042c16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8042c1a:	f7dd fd25 	bl	8020668 <__aeabi_dmul>
 8042c1e:	a322      	add	r3, pc, #136	; (adr r3, 8042ca8 <__ieee754_pow+0x9f8>)
 8042c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042c24:	f7ff bbdb 	b.w	80423de <__ieee754_pow+0x12e>
 8042c28:	4622      	mov	r2, r4
 8042c2a:	462b      	mov	r3, r5
 8042c2c:	f7dd fb64 	bl	80202f8 <__aeabi_dsub>
 8042c30:	4642      	mov	r2, r8
 8042c32:	464b      	mov	r3, r9
 8042c34:	f7dd ff9e 	bl	8020b74 <__aeabi_dcmpge>
 8042c38:	2800      	cmp	r0, #0
 8042c3a:	f43f aef1 	beq.w	8042a20 <__ieee754_pow+0x770>
 8042c3e:	e7e7      	b.n	8042c10 <__ieee754_pow+0x960>
 8042c40:	f04f 0a00 	mov.w	sl, #0
 8042c44:	e718      	b.n	8042a78 <__ieee754_pow+0x7c8>
 8042c46:	4621      	mov	r1, r4
 8042c48:	e7d4      	b.n	8042bf4 <__ieee754_pow+0x944>
 8042c4a:	2000      	movs	r0, #0
 8042c4c:	491a      	ldr	r1, [pc, #104]	; (8042cb8 <__ieee754_pow+0xa08>)
 8042c4e:	f7ff bb8f 	b.w	8042370 <__ieee754_pow+0xc0>
 8042c52:	e9dd 0100 	ldrd	r0, r1, [sp]
 8042c56:	f7ff bb8b 	b.w	8042370 <__ieee754_pow+0xc0>
 8042c5a:	4630      	mov	r0, r6
 8042c5c:	4639      	mov	r1, r7
 8042c5e:	f7ff bb87 	b.w	8042370 <__ieee754_pow+0xc0>
 8042c62:	4693      	mov	fp, r2
 8042c64:	f7ff bb98 	b.w	8042398 <__ieee754_pow+0xe8>
 8042c68:	00000000 	.word	0x00000000
 8042c6c:	3fe62e43 	.word	0x3fe62e43
 8042c70:	fefa39ef 	.word	0xfefa39ef
 8042c74:	3fe62e42 	.word	0x3fe62e42
 8042c78:	0ca86c39 	.word	0x0ca86c39
 8042c7c:	be205c61 	.word	0xbe205c61
 8042c80:	72bea4d0 	.word	0x72bea4d0
 8042c84:	3e663769 	.word	0x3e663769
 8042c88:	c5d26bf1 	.word	0xc5d26bf1
 8042c8c:	3ebbbd41 	.word	0x3ebbbd41
 8042c90:	af25de2c 	.word	0xaf25de2c
 8042c94:	3f11566a 	.word	0x3f11566a
 8042c98:	16bebd93 	.word	0x16bebd93
 8042c9c:	3f66c16c 	.word	0x3f66c16c
 8042ca0:	5555553e 	.word	0x5555553e
 8042ca4:	3fc55555 	.word	0x3fc55555
 8042ca8:	c2f8f359 	.word	0xc2f8f359
 8042cac:	01a56e1f 	.word	0x01a56e1f
 8042cb0:	3fe00000 	.word	0x3fe00000
 8042cb4:	000fffff 	.word	0x000fffff
 8042cb8:	3ff00000 	.word	0x3ff00000
 8042cbc:	4090cbff 	.word	0x4090cbff
 8042cc0:	3f6f3400 	.word	0x3f6f3400
 8042cc4:	652b82fe 	.word	0x652b82fe
 8042cc8:	3c971547 	.word	0x3c971547

08042ccc <__ieee754_sqrt>:
 8042ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8042cd0:	4955      	ldr	r1, [pc, #340]	; (8042e28 <__ieee754_sqrt+0x15c>)
 8042cd2:	ec55 4b10 	vmov	r4, r5, d0
 8042cd6:	43a9      	bics	r1, r5
 8042cd8:	462b      	mov	r3, r5
 8042cda:	462a      	mov	r2, r5
 8042cdc:	d112      	bne.n	8042d04 <__ieee754_sqrt+0x38>
 8042cde:	ee10 2a10 	vmov	r2, s0
 8042ce2:	ee10 0a10 	vmov	r0, s0
 8042ce6:	4629      	mov	r1, r5
 8042ce8:	f7dd fcbe 	bl	8020668 <__aeabi_dmul>
 8042cec:	4602      	mov	r2, r0
 8042cee:	460b      	mov	r3, r1
 8042cf0:	4620      	mov	r0, r4
 8042cf2:	4629      	mov	r1, r5
 8042cf4:	f7dd fb02 	bl	80202fc <__adddf3>
 8042cf8:	4604      	mov	r4, r0
 8042cfa:	460d      	mov	r5, r1
 8042cfc:	ec45 4b10 	vmov	d0, r4, r5
 8042d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8042d04:	2d00      	cmp	r5, #0
 8042d06:	ee10 0a10 	vmov	r0, s0
 8042d0a:	4621      	mov	r1, r4
 8042d0c:	dc0f      	bgt.n	8042d2e <__ieee754_sqrt+0x62>
 8042d0e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8042d12:	4330      	orrs	r0, r6
 8042d14:	d0f2      	beq.n	8042cfc <__ieee754_sqrt+0x30>
 8042d16:	b155      	cbz	r5, 8042d2e <__ieee754_sqrt+0x62>
 8042d18:	ee10 2a10 	vmov	r2, s0
 8042d1c:	4620      	mov	r0, r4
 8042d1e:	4629      	mov	r1, r5
 8042d20:	f7dd faea 	bl	80202f8 <__aeabi_dsub>
 8042d24:	4602      	mov	r2, r0
 8042d26:	460b      	mov	r3, r1
 8042d28:	f7dd fdc8 	bl	80208bc <__aeabi_ddiv>
 8042d2c:	e7e4      	b.n	8042cf8 <__ieee754_sqrt+0x2c>
 8042d2e:	151b      	asrs	r3, r3, #20
 8042d30:	d073      	beq.n	8042e1a <__ieee754_sqrt+0x14e>
 8042d32:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8042d36:	07dd      	lsls	r5, r3, #31
 8042d38:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8042d3c:	bf48      	it	mi
 8042d3e:	0fc8      	lsrmi	r0, r1, #31
 8042d40:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8042d44:	bf44      	itt	mi
 8042d46:	0049      	lslmi	r1, r1, #1
 8042d48:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8042d4c:	2500      	movs	r5, #0
 8042d4e:	1058      	asrs	r0, r3, #1
 8042d50:	0fcb      	lsrs	r3, r1, #31
 8042d52:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8042d56:	0049      	lsls	r1, r1, #1
 8042d58:	2316      	movs	r3, #22
 8042d5a:	462c      	mov	r4, r5
 8042d5c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8042d60:	19a7      	adds	r7, r4, r6
 8042d62:	4297      	cmp	r7, r2
 8042d64:	bfde      	ittt	le
 8042d66:	19bc      	addle	r4, r7, r6
 8042d68:	1bd2      	suble	r2, r2, r7
 8042d6a:	19ad      	addle	r5, r5, r6
 8042d6c:	0fcf      	lsrs	r7, r1, #31
 8042d6e:	3b01      	subs	r3, #1
 8042d70:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8042d74:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8042d78:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8042d7c:	d1f0      	bne.n	8042d60 <__ieee754_sqrt+0x94>
 8042d7e:	f04f 0c20 	mov.w	ip, #32
 8042d82:	469e      	mov	lr, r3
 8042d84:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8042d88:	42a2      	cmp	r2, r4
 8042d8a:	eb06 070e 	add.w	r7, r6, lr
 8042d8e:	dc02      	bgt.n	8042d96 <__ieee754_sqrt+0xca>
 8042d90:	d112      	bne.n	8042db8 <__ieee754_sqrt+0xec>
 8042d92:	428f      	cmp	r7, r1
 8042d94:	d810      	bhi.n	8042db8 <__ieee754_sqrt+0xec>
 8042d96:	2f00      	cmp	r7, #0
 8042d98:	eb07 0e06 	add.w	lr, r7, r6
 8042d9c:	da42      	bge.n	8042e24 <__ieee754_sqrt+0x158>
 8042d9e:	f1be 0f00 	cmp.w	lr, #0
 8042da2:	db3f      	blt.n	8042e24 <__ieee754_sqrt+0x158>
 8042da4:	f104 0801 	add.w	r8, r4, #1
 8042da8:	1b12      	subs	r2, r2, r4
 8042daa:	428f      	cmp	r7, r1
 8042dac:	bf88      	it	hi
 8042dae:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8042db2:	1bc9      	subs	r1, r1, r7
 8042db4:	4433      	add	r3, r6
 8042db6:	4644      	mov	r4, r8
 8042db8:	0052      	lsls	r2, r2, #1
 8042dba:	f1bc 0c01 	subs.w	ip, ip, #1
 8042dbe:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8042dc2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8042dc6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8042dca:	d1dd      	bne.n	8042d88 <__ieee754_sqrt+0xbc>
 8042dcc:	430a      	orrs	r2, r1
 8042dce:	d006      	beq.n	8042dde <__ieee754_sqrt+0x112>
 8042dd0:	1c5c      	adds	r4, r3, #1
 8042dd2:	bf13      	iteet	ne
 8042dd4:	3301      	addne	r3, #1
 8042dd6:	3501      	addeq	r5, #1
 8042dd8:	4663      	moveq	r3, ip
 8042dda:	f023 0301 	bicne.w	r3, r3, #1
 8042dde:	106a      	asrs	r2, r5, #1
 8042de0:	085b      	lsrs	r3, r3, #1
 8042de2:	07e9      	lsls	r1, r5, #31
 8042de4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8042de8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8042dec:	bf48      	it	mi
 8042dee:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8042df2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8042df6:	461c      	mov	r4, r3
 8042df8:	e780      	b.n	8042cfc <__ieee754_sqrt+0x30>
 8042dfa:	0aca      	lsrs	r2, r1, #11
 8042dfc:	3815      	subs	r0, #21
 8042dfe:	0549      	lsls	r1, r1, #21
 8042e00:	2a00      	cmp	r2, #0
 8042e02:	d0fa      	beq.n	8042dfa <__ieee754_sqrt+0x12e>
 8042e04:	02d6      	lsls	r6, r2, #11
 8042e06:	d50a      	bpl.n	8042e1e <__ieee754_sqrt+0x152>
 8042e08:	f1c3 0420 	rsb	r4, r3, #32
 8042e0c:	fa21 f404 	lsr.w	r4, r1, r4
 8042e10:	1e5d      	subs	r5, r3, #1
 8042e12:	4099      	lsls	r1, r3
 8042e14:	4322      	orrs	r2, r4
 8042e16:	1b43      	subs	r3, r0, r5
 8042e18:	e78b      	b.n	8042d32 <__ieee754_sqrt+0x66>
 8042e1a:	4618      	mov	r0, r3
 8042e1c:	e7f0      	b.n	8042e00 <__ieee754_sqrt+0x134>
 8042e1e:	0052      	lsls	r2, r2, #1
 8042e20:	3301      	adds	r3, #1
 8042e22:	e7ef      	b.n	8042e04 <__ieee754_sqrt+0x138>
 8042e24:	46a0      	mov	r8, r4
 8042e26:	e7bf      	b.n	8042da8 <__ieee754_sqrt+0xdc>
 8042e28:	7ff00000 	.word	0x7ff00000

08042e2c <fabs>:
 8042e2c:	ec51 0b10 	vmov	r0, r1, d0
 8042e30:	ee10 2a10 	vmov	r2, s0
 8042e34:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8042e38:	ec43 2b10 	vmov	d0, r2, r3
 8042e3c:	4770      	bx	lr

08042e3e <finite>:
 8042e3e:	ee10 3a90 	vmov	r3, s1
 8042e42:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8042e46:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8042e4a:	0fc0      	lsrs	r0, r0, #31
 8042e4c:	4770      	bx	lr

08042e4e <matherr>:
 8042e4e:	2000      	movs	r0, #0
 8042e50:	4770      	bx	lr
 8042e52:	0000      	movs	r0, r0
 8042e54:	0000      	movs	r0, r0
	...

08042e58 <nan>:
 8042e58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8042e60 <nan+0x8>
 8042e5c:	4770      	bx	lr
 8042e5e:	bf00      	nop
 8042e60:	00000000 	.word	0x00000000
 8042e64:	7ff80000 	.word	0x7ff80000

08042e68 <rint>:
 8042e68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8042e6a:	ec51 0b10 	vmov	r0, r1, d0
 8042e6e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8042e72:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8042e76:	2e13      	cmp	r6, #19
 8042e78:	460b      	mov	r3, r1
 8042e7a:	ee10 4a10 	vmov	r4, s0
 8042e7e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8042e82:	dc56      	bgt.n	8042f32 <rint+0xca>
 8042e84:	2e00      	cmp	r6, #0
 8042e86:	da2b      	bge.n	8042ee0 <rint+0x78>
 8042e88:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8042e8c:	4302      	orrs	r2, r0
 8042e8e:	d023      	beq.n	8042ed8 <rint+0x70>
 8042e90:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8042e94:	4302      	orrs	r2, r0
 8042e96:	4254      	negs	r4, r2
 8042e98:	4314      	orrs	r4, r2
 8042e9a:	0c4b      	lsrs	r3, r1, #17
 8042e9c:	0b24      	lsrs	r4, r4, #12
 8042e9e:	045b      	lsls	r3, r3, #17
 8042ea0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8042ea4:	ea44 0103 	orr.w	r1, r4, r3
 8042ea8:	460b      	mov	r3, r1
 8042eaa:	492f      	ldr	r1, [pc, #188]	; (8042f68 <rint+0x100>)
 8042eac:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8042eb0:	e9d1 6700 	ldrd	r6, r7, [r1]
 8042eb4:	4602      	mov	r2, r0
 8042eb6:	4639      	mov	r1, r7
 8042eb8:	4630      	mov	r0, r6
 8042eba:	f7dd fa1f 	bl	80202fc <__adddf3>
 8042ebe:	e9cd 0100 	strd	r0, r1, [sp]
 8042ec2:	463b      	mov	r3, r7
 8042ec4:	4632      	mov	r2, r6
 8042ec6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8042eca:	f7dd fa15 	bl	80202f8 <__aeabi_dsub>
 8042ece:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8042ed2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8042ed6:	4639      	mov	r1, r7
 8042ed8:	ec41 0b10 	vmov	d0, r0, r1
 8042edc:	b003      	add	sp, #12
 8042ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8042ee0:	4a22      	ldr	r2, [pc, #136]	; (8042f6c <rint+0x104>)
 8042ee2:	4132      	asrs	r2, r6
 8042ee4:	ea01 0702 	and.w	r7, r1, r2
 8042ee8:	4307      	orrs	r7, r0
 8042eea:	d0f5      	beq.n	8042ed8 <rint+0x70>
 8042eec:	0852      	lsrs	r2, r2, #1
 8042eee:	4011      	ands	r1, r2
 8042ef0:	430c      	orrs	r4, r1
 8042ef2:	d00b      	beq.n	8042f0c <rint+0xa4>
 8042ef4:	ea23 0202 	bic.w	r2, r3, r2
 8042ef8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8042efc:	2e13      	cmp	r6, #19
 8042efe:	fa43 f306 	asr.w	r3, r3, r6
 8042f02:	bf0c      	ite	eq
 8042f04:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8042f08:	2400      	movne	r4, #0
 8042f0a:	4313      	orrs	r3, r2
 8042f0c:	4916      	ldr	r1, [pc, #88]	; (8042f68 <rint+0x100>)
 8042f0e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8042f12:	4622      	mov	r2, r4
 8042f14:	e9d5 4500 	ldrd	r4, r5, [r5]
 8042f18:	4620      	mov	r0, r4
 8042f1a:	4629      	mov	r1, r5
 8042f1c:	f7dd f9ee 	bl	80202fc <__adddf3>
 8042f20:	e9cd 0100 	strd	r0, r1, [sp]
 8042f24:	4622      	mov	r2, r4
 8042f26:	462b      	mov	r3, r5
 8042f28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8042f2c:	f7dd f9e4 	bl	80202f8 <__aeabi_dsub>
 8042f30:	e7d2      	b.n	8042ed8 <rint+0x70>
 8042f32:	2e33      	cmp	r6, #51	; 0x33
 8042f34:	dd07      	ble.n	8042f46 <rint+0xde>
 8042f36:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8042f3a:	d1cd      	bne.n	8042ed8 <rint+0x70>
 8042f3c:	ee10 2a10 	vmov	r2, s0
 8042f40:	f7dd f9dc 	bl	80202fc <__adddf3>
 8042f44:	e7c8      	b.n	8042ed8 <rint+0x70>
 8042f46:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8042f4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8042f4e:	40f2      	lsrs	r2, r6
 8042f50:	4210      	tst	r0, r2
 8042f52:	d0c1      	beq.n	8042ed8 <rint+0x70>
 8042f54:	0852      	lsrs	r2, r2, #1
 8042f56:	4210      	tst	r0, r2
 8042f58:	bf1f      	itttt	ne
 8042f5a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8042f5e:	ea20 0202 	bicne.w	r2, r0, r2
 8042f62:	4134      	asrne	r4, r6
 8042f64:	4314      	orrne	r4, r2
 8042f66:	e7d1      	b.n	8042f0c <rint+0xa4>
 8042f68:	08056500 	.word	0x08056500
 8042f6c:	000fffff 	.word	0x000fffff

08042f70 <scalbn>:
 8042f70:	b570      	push	{r4, r5, r6, lr}
 8042f72:	ec55 4b10 	vmov	r4, r5, d0
 8042f76:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8042f7a:	4606      	mov	r6, r0
 8042f7c:	462b      	mov	r3, r5
 8042f7e:	b9aa      	cbnz	r2, 8042fac <scalbn+0x3c>
 8042f80:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8042f84:	4323      	orrs	r3, r4
 8042f86:	d03b      	beq.n	8043000 <scalbn+0x90>
 8042f88:	4b31      	ldr	r3, [pc, #196]	; (8043050 <scalbn+0xe0>)
 8042f8a:	4629      	mov	r1, r5
 8042f8c:	2200      	movs	r2, #0
 8042f8e:	ee10 0a10 	vmov	r0, s0
 8042f92:	f7dd fb69 	bl	8020668 <__aeabi_dmul>
 8042f96:	4b2f      	ldr	r3, [pc, #188]	; (8043054 <scalbn+0xe4>)
 8042f98:	429e      	cmp	r6, r3
 8042f9a:	4604      	mov	r4, r0
 8042f9c:	460d      	mov	r5, r1
 8042f9e:	da12      	bge.n	8042fc6 <scalbn+0x56>
 8042fa0:	a327      	add	r3, pc, #156	; (adr r3, 8043040 <scalbn+0xd0>)
 8042fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042fa6:	f7dd fb5f 	bl	8020668 <__aeabi_dmul>
 8042faa:	e009      	b.n	8042fc0 <scalbn+0x50>
 8042fac:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8042fb0:	428a      	cmp	r2, r1
 8042fb2:	d10c      	bne.n	8042fce <scalbn+0x5e>
 8042fb4:	ee10 2a10 	vmov	r2, s0
 8042fb8:	4620      	mov	r0, r4
 8042fba:	4629      	mov	r1, r5
 8042fbc:	f7dd f99e 	bl	80202fc <__adddf3>
 8042fc0:	4604      	mov	r4, r0
 8042fc2:	460d      	mov	r5, r1
 8042fc4:	e01c      	b.n	8043000 <scalbn+0x90>
 8042fc6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8042fca:	460b      	mov	r3, r1
 8042fcc:	3a36      	subs	r2, #54	; 0x36
 8042fce:	4432      	add	r2, r6
 8042fd0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8042fd4:	428a      	cmp	r2, r1
 8042fd6:	dd0b      	ble.n	8042ff0 <scalbn+0x80>
 8042fd8:	ec45 4b11 	vmov	d1, r4, r5
 8042fdc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8043048 <scalbn+0xd8>
 8042fe0:	f000 f9f0 	bl	80433c4 <copysign>
 8042fe4:	a318      	add	r3, pc, #96	; (adr r3, 8043048 <scalbn+0xd8>)
 8042fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042fea:	ec51 0b10 	vmov	r0, r1, d0
 8042fee:	e7da      	b.n	8042fa6 <scalbn+0x36>
 8042ff0:	2a00      	cmp	r2, #0
 8042ff2:	dd08      	ble.n	8043006 <scalbn+0x96>
 8042ff4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8042ff8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8042ffc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8043000:	ec45 4b10 	vmov	d0, r4, r5
 8043004:	bd70      	pop	{r4, r5, r6, pc}
 8043006:	f112 0f35 	cmn.w	r2, #53	; 0x35
 804300a:	da0d      	bge.n	8043028 <scalbn+0xb8>
 804300c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8043010:	429e      	cmp	r6, r3
 8043012:	ec45 4b11 	vmov	d1, r4, r5
 8043016:	dce1      	bgt.n	8042fdc <scalbn+0x6c>
 8043018:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8043040 <scalbn+0xd0>
 804301c:	f000 f9d2 	bl	80433c4 <copysign>
 8043020:	a307      	add	r3, pc, #28	; (adr r3, 8043040 <scalbn+0xd0>)
 8043022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043026:	e7e0      	b.n	8042fea <scalbn+0x7a>
 8043028:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 804302c:	3236      	adds	r2, #54	; 0x36
 804302e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8043032:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8043036:	4620      	mov	r0, r4
 8043038:	4629      	mov	r1, r5
 804303a:	2200      	movs	r2, #0
 804303c:	4b06      	ldr	r3, [pc, #24]	; (8043058 <scalbn+0xe8>)
 804303e:	e7b2      	b.n	8042fa6 <scalbn+0x36>
 8043040:	c2f8f359 	.word	0xc2f8f359
 8043044:	01a56e1f 	.word	0x01a56e1f
 8043048:	8800759c 	.word	0x8800759c
 804304c:	7e37e43c 	.word	0x7e37e43c
 8043050:	43500000 	.word	0x43500000
 8043054:	ffff3cb0 	.word	0xffff3cb0
 8043058:	3c900000 	.word	0x3c900000
 804305c:	00000000 	.word	0x00000000

08043060 <__ieee754_log>:
 8043060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8043064:	ec51 0b10 	vmov	r0, r1, d0
 8043068:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 804306c:	b087      	sub	sp, #28
 804306e:	460d      	mov	r5, r1
 8043070:	da27      	bge.n	80430c2 <__ieee754_log+0x62>
 8043072:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8043076:	4303      	orrs	r3, r0
 8043078:	ee10 2a10 	vmov	r2, s0
 804307c:	d10a      	bne.n	8043094 <__ieee754_log+0x34>
 804307e:	49cc      	ldr	r1, [pc, #816]	; (80433b0 <__ieee754_log+0x350>)
 8043080:	2200      	movs	r2, #0
 8043082:	2300      	movs	r3, #0
 8043084:	2000      	movs	r0, #0
 8043086:	f7dd fc19 	bl	80208bc <__aeabi_ddiv>
 804308a:	ec41 0b10 	vmov	d0, r0, r1
 804308e:	b007      	add	sp, #28
 8043090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8043094:	2900      	cmp	r1, #0
 8043096:	da05      	bge.n	80430a4 <__ieee754_log+0x44>
 8043098:	460b      	mov	r3, r1
 804309a:	f7dd f92d 	bl	80202f8 <__aeabi_dsub>
 804309e:	2200      	movs	r2, #0
 80430a0:	2300      	movs	r3, #0
 80430a2:	e7f0      	b.n	8043086 <__ieee754_log+0x26>
 80430a4:	4bc3      	ldr	r3, [pc, #780]	; (80433b4 <__ieee754_log+0x354>)
 80430a6:	2200      	movs	r2, #0
 80430a8:	f7dd fade 	bl	8020668 <__aeabi_dmul>
 80430ac:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80430b0:	460d      	mov	r5, r1
 80430b2:	4ac1      	ldr	r2, [pc, #772]	; (80433b8 <__ieee754_log+0x358>)
 80430b4:	4295      	cmp	r5, r2
 80430b6:	dd06      	ble.n	80430c6 <__ieee754_log+0x66>
 80430b8:	4602      	mov	r2, r0
 80430ba:	460b      	mov	r3, r1
 80430bc:	f7dd f91e 	bl	80202fc <__adddf3>
 80430c0:	e7e3      	b.n	804308a <__ieee754_log+0x2a>
 80430c2:	2300      	movs	r3, #0
 80430c4:	e7f5      	b.n	80430b2 <__ieee754_log+0x52>
 80430c6:	152c      	asrs	r4, r5, #20
 80430c8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80430cc:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80430d0:	441c      	add	r4, r3
 80430d2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80430d6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80430da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80430de:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80430e2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80430e6:	ea42 0105 	orr.w	r1, r2, r5
 80430ea:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80430ee:	2200      	movs	r2, #0
 80430f0:	4bb2      	ldr	r3, [pc, #712]	; (80433bc <__ieee754_log+0x35c>)
 80430f2:	f7dd f901 	bl	80202f8 <__aeabi_dsub>
 80430f6:	1cab      	adds	r3, r5, #2
 80430f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80430fc:	2b02      	cmp	r3, #2
 80430fe:	4682      	mov	sl, r0
 8043100:	468b      	mov	fp, r1
 8043102:	f04f 0200 	mov.w	r2, #0
 8043106:	dc53      	bgt.n	80431b0 <__ieee754_log+0x150>
 8043108:	2300      	movs	r3, #0
 804310a:	f7dd fd15 	bl	8020b38 <__aeabi_dcmpeq>
 804310e:	b1d0      	cbz	r0, 8043146 <__ieee754_log+0xe6>
 8043110:	2c00      	cmp	r4, #0
 8043112:	f000 8120 	beq.w	8043356 <__ieee754_log+0x2f6>
 8043116:	4620      	mov	r0, r4
 8043118:	f7dd fa3c 	bl	8020594 <__aeabi_i2d>
 804311c:	a390      	add	r3, pc, #576	; (adr r3, 8043360 <__ieee754_log+0x300>)
 804311e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043122:	4606      	mov	r6, r0
 8043124:	460f      	mov	r7, r1
 8043126:	f7dd fa9f 	bl	8020668 <__aeabi_dmul>
 804312a:	a38f      	add	r3, pc, #572	; (adr r3, 8043368 <__ieee754_log+0x308>)
 804312c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043130:	4604      	mov	r4, r0
 8043132:	460d      	mov	r5, r1
 8043134:	4630      	mov	r0, r6
 8043136:	4639      	mov	r1, r7
 8043138:	f7dd fa96 	bl	8020668 <__aeabi_dmul>
 804313c:	4602      	mov	r2, r0
 804313e:	460b      	mov	r3, r1
 8043140:	4620      	mov	r0, r4
 8043142:	4629      	mov	r1, r5
 8043144:	e7ba      	b.n	80430bc <__ieee754_log+0x5c>
 8043146:	a38a      	add	r3, pc, #552	; (adr r3, 8043370 <__ieee754_log+0x310>)
 8043148:	e9d3 2300 	ldrd	r2, r3, [r3]
 804314c:	4650      	mov	r0, sl
 804314e:	4659      	mov	r1, fp
 8043150:	f7dd fa8a 	bl	8020668 <__aeabi_dmul>
 8043154:	4602      	mov	r2, r0
 8043156:	460b      	mov	r3, r1
 8043158:	2000      	movs	r0, #0
 804315a:	4999      	ldr	r1, [pc, #612]	; (80433c0 <__ieee754_log+0x360>)
 804315c:	f7dd f8cc 	bl	80202f8 <__aeabi_dsub>
 8043160:	4652      	mov	r2, sl
 8043162:	4606      	mov	r6, r0
 8043164:	460f      	mov	r7, r1
 8043166:	465b      	mov	r3, fp
 8043168:	4650      	mov	r0, sl
 804316a:	4659      	mov	r1, fp
 804316c:	f7dd fa7c 	bl	8020668 <__aeabi_dmul>
 8043170:	4602      	mov	r2, r0
 8043172:	460b      	mov	r3, r1
 8043174:	4630      	mov	r0, r6
 8043176:	4639      	mov	r1, r7
 8043178:	f7dd fa76 	bl	8020668 <__aeabi_dmul>
 804317c:	4606      	mov	r6, r0
 804317e:	460f      	mov	r7, r1
 8043180:	b914      	cbnz	r4, 8043188 <__ieee754_log+0x128>
 8043182:	4632      	mov	r2, r6
 8043184:	463b      	mov	r3, r7
 8043186:	e0a0      	b.n	80432ca <__ieee754_log+0x26a>
 8043188:	4620      	mov	r0, r4
 804318a:	f7dd fa03 	bl	8020594 <__aeabi_i2d>
 804318e:	a374      	add	r3, pc, #464	; (adr r3, 8043360 <__ieee754_log+0x300>)
 8043190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043194:	4680      	mov	r8, r0
 8043196:	4689      	mov	r9, r1
 8043198:	f7dd fa66 	bl	8020668 <__aeabi_dmul>
 804319c:	a372      	add	r3, pc, #456	; (adr r3, 8043368 <__ieee754_log+0x308>)
 804319e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80431a2:	4604      	mov	r4, r0
 80431a4:	460d      	mov	r5, r1
 80431a6:	4640      	mov	r0, r8
 80431a8:	4649      	mov	r1, r9
 80431aa:	f7dd fa5d 	bl	8020668 <__aeabi_dmul>
 80431ae:	e0a5      	b.n	80432fc <__ieee754_log+0x29c>
 80431b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80431b4:	f7dd f8a2 	bl	80202fc <__adddf3>
 80431b8:	4602      	mov	r2, r0
 80431ba:	460b      	mov	r3, r1
 80431bc:	4650      	mov	r0, sl
 80431be:	4659      	mov	r1, fp
 80431c0:	f7dd fb7c 	bl	80208bc <__aeabi_ddiv>
 80431c4:	e9cd 0100 	strd	r0, r1, [sp]
 80431c8:	4620      	mov	r0, r4
 80431ca:	f7dd f9e3 	bl	8020594 <__aeabi_i2d>
 80431ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80431d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80431d6:	4610      	mov	r0, r2
 80431d8:	4619      	mov	r1, r3
 80431da:	f7dd fa45 	bl	8020668 <__aeabi_dmul>
 80431de:	4602      	mov	r2, r0
 80431e0:	460b      	mov	r3, r1
 80431e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80431e6:	f7dd fa3f 	bl	8020668 <__aeabi_dmul>
 80431ea:	a363      	add	r3, pc, #396	; (adr r3, 8043378 <__ieee754_log+0x318>)
 80431ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80431f0:	4680      	mov	r8, r0
 80431f2:	4689      	mov	r9, r1
 80431f4:	f7dd fa38 	bl	8020668 <__aeabi_dmul>
 80431f8:	a361      	add	r3, pc, #388	; (adr r3, 8043380 <__ieee754_log+0x320>)
 80431fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80431fe:	f7dd f87d 	bl	80202fc <__adddf3>
 8043202:	4642      	mov	r2, r8
 8043204:	464b      	mov	r3, r9
 8043206:	f7dd fa2f 	bl	8020668 <__aeabi_dmul>
 804320a:	a35f      	add	r3, pc, #380	; (adr r3, 8043388 <__ieee754_log+0x328>)
 804320c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043210:	f7dd f874 	bl	80202fc <__adddf3>
 8043214:	4642      	mov	r2, r8
 8043216:	464b      	mov	r3, r9
 8043218:	f7dd fa26 	bl	8020668 <__aeabi_dmul>
 804321c:	a35c      	add	r3, pc, #368	; (adr r3, 8043390 <__ieee754_log+0x330>)
 804321e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043222:	f7dd f86b 	bl	80202fc <__adddf3>
 8043226:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 804322a:	f7dd fa1d 	bl	8020668 <__aeabi_dmul>
 804322e:	a35a      	add	r3, pc, #360	; (adr r3, 8043398 <__ieee754_log+0x338>)
 8043230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043234:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8043238:	4640      	mov	r0, r8
 804323a:	4649      	mov	r1, r9
 804323c:	f7dd fa14 	bl	8020668 <__aeabi_dmul>
 8043240:	a357      	add	r3, pc, #348	; (adr r3, 80433a0 <__ieee754_log+0x340>)
 8043242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043246:	f7dd f859 	bl	80202fc <__adddf3>
 804324a:	4642      	mov	r2, r8
 804324c:	464b      	mov	r3, r9
 804324e:	f7dd fa0b 	bl	8020668 <__aeabi_dmul>
 8043252:	a355      	add	r3, pc, #340	; (adr r3, 80433a8 <__ieee754_log+0x348>)
 8043254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043258:	f7dd f850 	bl	80202fc <__adddf3>
 804325c:	4642      	mov	r2, r8
 804325e:	464b      	mov	r3, r9
 8043260:	f7dd fa02 	bl	8020668 <__aeabi_dmul>
 8043264:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8043268:	4602      	mov	r2, r0
 804326a:	460b      	mov	r3, r1
 804326c:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8043270:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8043274:	f7dd f842 	bl	80202fc <__adddf3>
 8043278:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 804327c:	3551      	adds	r5, #81	; 0x51
 804327e:	4335      	orrs	r5, r6
 8043280:	2d00      	cmp	r5, #0
 8043282:	4680      	mov	r8, r0
 8043284:	4689      	mov	r9, r1
 8043286:	dd48      	ble.n	804331a <__ieee754_log+0x2ba>
 8043288:	2200      	movs	r2, #0
 804328a:	4b4d      	ldr	r3, [pc, #308]	; (80433c0 <__ieee754_log+0x360>)
 804328c:	4650      	mov	r0, sl
 804328e:	4659      	mov	r1, fp
 8043290:	f7dd f9ea 	bl	8020668 <__aeabi_dmul>
 8043294:	4652      	mov	r2, sl
 8043296:	465b      	mov	r3, fp
 8043298:	f7dd f9e6 	bl	8020668 <__aeabi_dmul>
 804329c:	4602      	mov	r2, r0
 804329e:	460b      	mov	r3, r1
 80432a0:	4606      	mov	r6, r0
 80432a2:	460f      	mov	r7, r1
 80432a4:	4640      	mov	r0, r8
 80432a6:	4649      	mov	r1, r9
 80432a8:	f7dd f828 	bl	80202fc <__adddf3>
 80432ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80432b0:	f7dd f9da 	bl	8020668 <__aeabi_dmul>
 80432b4:	4680      	mov	r8, r0
 80432b6:	4689      	mov	r9, r1
 80432b8:	b964      	cbnz	r4, 80432d4 <__ieee754_log+0x274>
 80432ba:	4602      	mov	r2, r0
 80432bc:	460b      	mov	r3, r1
 80432be:	4630      	mov	r0, r6
 80432c0:	4639      	mov	r1, r7
 80432c2:	f7dd f819 	bl	80202f8 <__aeabi_dsub>
 80432c6:	4602      	mov	r2, r0
 80432c8:	460b      	mov	r3, r1
 80432ca:	4650      	mov	r0, sl
 80432cc:	4659      	mov	r1, fp
 80432ce:	f7dd f813 	bl	80202f8 <__aeabi_dsub>
 80432d2:	e6da      	b.n	804308a <__ieee754_log+0x2a>
 80432d4:	a322      	add	r3, pc, #136	; (adr r3, 8043360 <__ieee754_log+0x300>)
 80432d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80432da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80432de:	f7dd f9c3 	bl	8020668 <__aeabi_dmul>
 80432e2:	a321      	add	r3, pc, #132	; (adr r3, 8043368 <__ieee754_log+0x308>)
 80432e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80432e8:	4604      	mov	r4, r0
 80432ea:	460d      	mov	r5, r1
 80432ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80432f0:	f7dd f9ba 	bl	8020668 <__aeabi_dmul>
 80432f4:	4642      	mov	r2, r8
 80432f6:	464b      	mov	r3, r9
 80432f8:	f7dd f800 	bl	80202fc <__adddf3>
 80432fc:	4602      	mov	r2, r0
 80432fe:	460b      	mov	r3, r1
 8043300:	4630      	mov	r0, r6
 8043302:	4639      	mov	r1, r7
 8043304:	f7dc fff8 	bl	80202f8 <__aeabi_dsub>
 8043308:	4652      	mov	r2, sl
 804330a:	465b      	mov	r3, fp
 804330c:	f7dc fff4 	bl	80202f8 <__aeabi_dsub>
 8043310:	4602      	mov	r2, r0
 8043312:	460b      	mov	r3, r1
 8043314:	4620      	mov	r0, r4
 8043316:	4629      	mov	r1, r5
 8043318:	e7d9      	b.n	80432ce <__ieee754_log+0x26e>
 804331a:	4602      	mov	r2, r0
 804331c:	460b      	mov	r3, r1
 804331e:	4650      	mov	r0, sl
 8043320:	4659      	mov	r1, fp
 8043322:	f7dc ffe9 	bl	80202f8 <__aeabi_dsub>
 8043326:	e9dd 2300 	ldrd	r2, r3, [sp]
 804332a:	f7dd f99d 	bl	8020668 <__aeabi_dmul>
 804332e:	4606      	mov	r6, r0
 8043330:	460f      	mov	r7, r1
 8043332:	2c00      	cmp	r4, #0
 8043334:	f43f af25 	beq.w	8043182 <__ieee754_log+0x122>
 8043338:	a309      	add	r3, pc, #36	; (adr r3, 8043360 <__ieee754_log+0x300>)
 804333a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804333e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8043342:	f7dd f991 	bl	8020668 <__aeabi_dmul>
 8043346:	a308      	add	r3, pc, #32	; (adr r3, 8043368 <__ieee754_log+0x308>)
 8043348:	e9d3 2300 	ldrd	r2, r3, [r3]
 804334c:	4604      	mov	r4, r0
 804334e:	460d      	mov	r5, r1
 8043350:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8043354:	e729      	b.n	80431aa <__ieee754_log+0x14a>
 8043356:	2000      	movs	r0, #0
 8043358:	2100      	movs	r1, #0
 804335a:	e696      	b.n	804308a <__ieee754_log+0x2a>
 804335c:	f3af 8000 	nop.w
 8043360:	fee00000 	.word	0xfee00000
 8043364:	3fe62e42 	.word	0x3fe62e42
 8043368:	35793c76 	.word	0x35793c76
 804336c:	3dea39ef 	.word	0x3dea39ef
 8043370:	55555555 	.word	0x55555555
 8043374:	3fd55555 	.word	0x3fd55555
 8043378:	df3e5244 	.word	0xdf3e5244
 804337c:	3fc2f112 	.word	0x3fc2f112
 8043380:	96cb03de 	.word	0x96cb03de
 8043384:	3fc74664 	.word	0x3fc74664
 8043388:	94229359 	.word	0x94229359
 804338c:	3fd24924 	.word	0x3fd24924
 8043390:	55555593 	.word	0x55555593
 8043394:	3fe55555 	.word	0x3fe55555
 8043398:	d078c69f 	.word	0xd078c69f
 804339c:	3fc39a09 	.word	0x3fc39a09
 80433a0:	1d8e78af 	.word	0x1d8e78af
 80433a4:	3fcc71c5 	.word	0x3fcc71c5
 80433a8:	9997fa04 	.word	0x9997fa04
 80433ac:	3fd99999 	.word	0x3fd99999
 80433b0:	c3500000 	.word	0xc3500000
 80433b4:	43500000 	.word	0x43500000
 80433b8:	7fefffff 	.word	0x7fefffff
 80433bc:	3ff00000 	.word	0x3ff00000
 80433c0:	3fe00000 	.word	0x3fe00000

080433c4 <copysign>:
 80433c4:	ec51 0b10 	vmov	r0, r1, d0
 80433c8:	ee11 0a90 	vmov	r0, s3
 80433cc:	ee10 2a10 	vmov	r2, s0
 80433d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80433d4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80433d8:	ea41 0300 	orr.w	r3, r1, r0
 80433dc:	ec43 2b10 	vmov	d0, r2, r3
 80433e0:	4770      	bx	lr
	...

080433e4 <_init>:
 80433e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80433e6:	bf00      	nop
 80433e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80433ea:	bc08      	pop	{r3}
 80433ec:	469e      	mov	lr, r3
 80433ee:	4770      	bx	lr

080433f0 <_fini>:
 80433f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80433f2:	bf00      	nop
 80433f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80433f6:	bc08      	pop	{r3}
 80433f8:	469e      	mov	lr, r3
 80433fa:	4770      	bx	lr
