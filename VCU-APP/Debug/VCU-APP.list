
VCU-APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023324  080201e0  080201e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013138  08043508  08043508  00033508  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08056640  08056640  00050498  2**0
                  CONTENTS
  4 .ARM          00000008  08056640  08056640  00046640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08056648  08056648  00050498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08056648  08056648  00046648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0805664c  0805664c  0004664c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000498  20000000  08056650  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008c54  20000498  08056ae8  00050498  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200090ec  08056ae8  000590ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00050498  2**0
                  CONTENTS, READONLY
 12 .debug_info   00051393  00000000  00000000  000504c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00009995  00000000  00000000  000a185b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002f88  00000000  00000000  000ab1f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  000333f2  00000000  00000000  000ae178  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00039fd2  00000000  00000000  000e156a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000f4e58  00000000  00000000  0011b53c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00210394  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00002b90  00000000  00000000  00210410  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  0000d0b4  00000000  00000000  00212fa0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080201e0 <__do_global_dtors_aux>:
 80201e0:	b510      	push	{r4, lr}
 80201e2:	4c05      	ldr	r4, [pc, #20]	; (80201f8 <__do_global_dtors_aux+0x18>)
 80201e4:	7823      	ldrb	r3, [r4, #0]
 80201e6:	b933      	cbnz	r3, 80201f6 <__do_global_dtors_aux+0x16>
 80201e8:	4b04      	ldr	r3, [pc, #16]	; (80201fc <__do_global_dtors_aux+0x1c>)
 80201ea:	b113      	cbz	r3, 80201f2 <__do_global_dtors_aux+0x12>
 80201ec:	4804      	ldr	r0, [pc, #16]	; (8020200 <__do_global_dtors_aux+0x20>)
 80201ee:	f3af 8000 	nop.w
 80201f2:	2301      	movs	r3, #1
 80201f4:	7023      	strb	r3, [r4, #0]
 80201f6:	bd10      	pop	{r4, pc}
 80201f8:	20000498 	.word	0x20000498
 80201fc:	00000000 	.word	0x00000000
 8020200:	080434ec 	.word	0x080434ec

08020204 <frame_dummy>:
 8020204:	b508      	push	{r3, lr}
 8020206:	4b03      	ldr	r3, [pc, #12]	; (8020214 <frame_dummy+0x10>)
 8020208:	b11b      	cbz	r3, 8020212 <frame_dummy+0xe>
 802020a:	4903      	ldr	r1, [pc, #12]	; (8020218 <frame_dummy+0x14>)
 802020c:	4803      	ldr	r0, [pc, #12]	; (802021c <frame_dummy+0x18>)
 802020e:	f3af 8000 	nop.w
 8020212:	bd08      	pop	{r3, pc}
 8020214:	00000000 	.word	0x00000000
 8020218:	2000049c 	.word	0x2000049c
 802021c:	080434ec 	.word	0x080434ec

08020220 <strcmp>:
 8020220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020228:	2a01      	cmp	r2, #1
 802022a:	bf28      	it	cs
 802022c:	429a      	cmpcs	r2, r3
 802022e:	d0f7      	beq.n	8020220 <strcmp>
 8020230:	1ad0      	subs	r0, r2, r3
 8020232:	4770      	bx	lr

08020234 <strlen>:
 8020234:	4603      	mov	r3, r0
 8020236:	f813 2b01 	ldrb.w	r2, [r3], #1
 802023a:	2a00      	cmp	r2, #0
 802023c:	d1fb      	bne.n	8020236 <strlen+0x2>
 802023e:	1a18      	subs	r0, r3, r0
 8020240:	3801      	subs	r0, #1
 8020242:	4770      	bx	lr
	...

08020250 <memchr>:
 8020250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8020254:	2a10      	cmp	r2, #16
 8020256:	db2b      	blt.n	80202b0 <memchr+0x60>
 8020258:	f010 0f07 	tst.w	r0, #7
 802025c:	d008      	beq.n	8020270 <memchr+0x20>
 802025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020262:	3a01      	subs	r2, #1
 8020264:	428b      	cmp	r3, r1
 8020266:	d02d      	beq.n	80202c4 <memchr+0x74>
 8020268:	f010 0f07 	tst.w	r0, #7
 802026c:	b342      	cbz	r2, 80202c0 <memchr+0x70>
 802026e:	d1f6      	bne.n	802025e <memchr+0xe>
 8020270:	b4f0      	push	{r4, r5, r6, r7}
 8020272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802027a:	f022 0407 	bic.w	r4, r2, #7
 802027e:	f07f 0700 	mvns.w	r7, #0
 8020282:	2300      	movs	r3, #0
 8020284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020288:	3c08      	subs	r4, #8
 802028a:	ea85 0501 	eor.w	r5, r5, r1
 802028e:	ea86 0601 	eor.w	r6, r6, r1
 8020292:	fa85 f547 	uadd8	r5, r5, r7
 8020296:	faa3 f587 	sel	r5, r3, r7
 802029a:	fa86 f647 	uadd8	r6, r6, r7
 802029e:	faa5 f687 	sel	r6, r5, r7
 80202a2:	b98e      	cbnz	r6, 80202c8 <memchr+0x78>
 80202a4:	d1ee      	bne.n	8020284 <memchr+0x34>
 80202a6:	bcf0      	pop	{r4, r5, r6, r7}
 80202a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80202ac:	f002 0207 	and.w	r2, r2, #7
 80202b0:	b132      	cbz	r2, 80202c0 <memchr+0x70>
 80202b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80202b6:	3a01      	subs	r2, #1
 80202b8:	ea83 0301 	eor.w	r3, r3, r1
 80202bc:	b113      	cbz	r3, 80202c4 <memchr+0x74>
 80202be:	d1f8      	bne.n	80202b2 <memchr+0x62>
 80202c0:	2000      	movs	r0, #0
 80202c2:	4770      	bx	lr
 80202c4:	3801      	subs	r0, #1
 80202c6:	4770      	bx	lr
 80202c8:	2d00      	cmp	r5, #0
 80202ca:	bf06      	itte	eq
 80202cc:	4635      	moveq	r5, r6
 80202ce:	3803      	subeq	r0, #3
 80202d0:	3807      	subne	r0, #7
 80202d2:	f015 0f01 	tst.w	r5, #1
 80202d6:	d107      	bne.n	80202e8 <memchr+0x98>
 80202d8:	3001      	adds	r0, #1
 80202da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80202de:	bf02      	ittt	eq
 80202e0:	3001      	addeq	r0, #1
 80202e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80202e6:	3001      	addeq	r0, #1
 80202e8:	bcf0      	pop	{r4, r5, r6, r7}
 80202ea:	3801      	subs	r0, #1
 80202ec:	4770      	bx	lr
 80202ee:	bf00      	nop

080202f0 <__aeabi_drsub>:
 80202f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80202f4:	e002      	b.n	80202fc <__adddf3>
 80202f6:	bf00      	nop

080202f8 <__aeabi_dsub>:
 80202f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080202fc <__adddf3>:
 80202fc:	b530      	push	{r4, r5, lr}
 80202fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8020302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8020306:	ea94 0f05 	teq	r4, r5
 802030a:	bf08      	it	eq
 802030c:	ea90 0f02 	teqeq	r0, r2
 8020310:	bf1f      	itttt	ne
 8020312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8020316:	ea55 0c02 	orrsne.w	ip, r5, r2
 802031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 802031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020322:	f000 80e2 	beq.w	80204ea <__adddf3+0x1ee>
 8020326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 802032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 802032e:	bfb8      	it	lt
 8020330:	426d      	neglt	r5, r5
 8020332:	dd0c      	ble.n	802034e <__adddf3+0x52>
 8020334:	442c      	add	r4, r5
 8020336:	ea80 0202 	eor.w	r2, r0, r2
 802033a:	ea81 0303 	eor.w	r3, r1, r3
 802033e:	ea82 0000 	eor.w	r0, r2, r0
 8020342:	ea83 0101 	eor.w	r1, r3, r1
 8020346:	ea80 0202 	eor.w	r2, r0, r2
 802034a:	ea81 0303 	eor.w	r3, r1, r3
 802034e:	2d36      	cmp	r5, #54	; 0x36
 8020350:	bf88      	it	hi
 8020352:	bd30      	pophi	{r4, r5, pc}
 8020354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8020358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 802035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8020360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8020364:	d002      	beq.n	802036c <__adddf3+0x70>
 8020366:	4240      	negs	r0, r0
 8020368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 802036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8020370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8020378:	d002      	beq.n	8020380 <__adddf3+0x84>
 802037a:	4252      	negs	r2, r2
 802037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8020380:	ea94 0f05 	teq	r4, r5
 8020384:	f000 80a7 	beq.w	80204d6 <__adddf3+0x1da>
 8020388:	f1a4 0401 	sub.w	r4, r4, #1
 802038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8020390:	db0d      	blt.n	80203ae <__adddf3+0xb2>
 8020392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8020396:	fa22 f205 	lsr.w	r2, r2, r5
 802039a:	1880      	adds	r0, r0, r2
 802039c:	f141 0100 	adc.w	r1, r1, #0
 80203a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80203a4:	1880      	adds	r0, r0, r2
 80203a6:	fa43 f305 	asr.w	r3, r3, r5
 80203aa:	4159      	adcs	r1, r3
 80203ac:	e00e      	b.n	80203cc <__adddf3+0xd0>
 80203ae:	f1a5 0520 	sub.w	r5, r5, #32
 80203b2:	f10e 0e20 	add.w	lr, lr, #32
 80203b6:	2a01      	cmp	r2, #1
 80203b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80203bc:	bf28      	it	cs
 80203be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80203c2:	fa43 f305 	asr.w	r3, r3, r5
 80203c6:	18c0      	adds	r0, r0, r3
 80203c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80203cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80203d0:	d507      	bpl.n	80203e2 <__adddf3+0xe6>
 80203d2:	f04f 0e00 	mov.w	lr, #0
 80203d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80203da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80203de:	eb6e 0101 	sbc.w	r1, lr, r1
 80203e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80203e6:	d31b      	bcc.n	8020420 <__adddf3+0x124>
 80203e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80203ec:	d30c      	bcc.n	8020408 <__adddf3+0x10c>
 80203ee:	0849      	lsrs	r1, r1, #1
 80203f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80203f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80203f8:	f104 0401 	add.w	r4, r4, #1
 80203fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8020400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8020404:	f080 809a 	bcs.w	802053c <__adddf3+0x240>
 8020408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 802040c:	bf08      	it	eq
 802040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020412:	f150 0000 	adcs.w	r0, r0, #0
 8020416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802041a:	ea41 0105 	orr.w	r1, r1, r5
 802041e:	bd30      	pop	{r4, r5, pc}
 8020420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8020424:	4140      	adcs	r0, r0
 8020426:	eb41 0101 	adc.w	r1, r1, r1
 802042a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 802042e:	f1a4 0401 	sub.w	r4, r4, #1
 8020432:	d1e9      	bne.n	8020408 <__adddf3+0x10c>
 8020434:	f091 0f00 	teq	r1, #0
 8020438:	bf04      	itt	eq
 802043a:	4601      	moveq	r1, r0
 802043c:	2000      	moveq	r0, #0
 802043e:	fab1 f381 	clz	r3, r1
 8020442:	bf08      	it	eq
 8020444:	3320      	addeq	r3, #32
 8020446:	f1a3 030b 	sub.w	r3, r3, #11
 802044a:	f1b3 0220 	subs.w	r2, r3, #32
 802044e:	da0c      	bge.n	802046a <__adddf3+0x16e>
 8020450:	320c      	adds	r2, #12
 8020452:	dd08      	ble.n	8020466 <__adddf3+0x16a>
 8020454:	f102 0c14 	add.w	ip, r2, #20
 8020458:	f1c2 020c 	rsb	r2, r2, #12
 802045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8020460:	fa21 f102 	lsr.w	r1, r1, r2
 8020464:	e00c      	b.n	8020480 <__adddf3+0x184>
 8020466:	f102 0214 	add.w	r2, r2, #20
 802046a:	bfd8      	it	le
 802046c:	f1c2 0c20 	rsble	ip, r2, #32
 8020470:	fa01 f102 	lsl.w	r1, r1, r2
 8020474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8020478:	bfdc      	itt	le
 802047a:	ea41 010c 	orrle.w	r1, r1, ip
 802047e:	4090      	lslle	r0, r2
 8020480:	1ae4      	subs	r4, r4, r3
 8020482:	bfa2      	ittt	ge
 8020484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8020488:	4329      	orrge	r1, r5
 802048a:	bd30      	popge	{r4, r5, pc}
 802048c:	ea6f 0404 	mvn.w	r4, r4
 8020490:	3c1f      	subs	r4, #31
 8020492:	da1c      	bge.n	80204ce <__adddf3+0x1d2>
 8020494:	340c      	adds	r4, #12
 8020496:	dc0e      	bgt.n	80204b6 <__adddf3+0x1ba>
 8020498:	f104 0414 	add.w	r4, r4, #20
 802049c:	f1c4 0220 	rsb	r2, r4, #32
 80204a0:	fa20 f004 	lsr.w	r0, r0, r4
 80204a4:	fa01 f302 	lsl.w	r3, r1, r2
 80204a8:	ea40 0003 	orr.w	r0, r0, r3
 80204ac:	fa21 f304 	lsr.w	r3, r1, r4
 80204b0:	ea45 0103 	orr.w	r1, r5, r3
 80204b4:	bd30      	pop	{r4, r5, pc}
 80204b6:	f1c4 040c 	rsb	r4, r4, #12
 80204ba:	f1c4 0220 	rsb	r2, r4, #32
 80204be:	fa20 f002 	lsr.w	r0, r0, r2
 80204c2:	fa01 f304 	lsl.w	r3, r1, r4
 80204c6:	ea40 0003 	orr.w	r0, r0, r3
 80204ca:	4629      	mov	r1, r5
 80204cc:	bd30      	pop	{r4, r5, pc}
 80204ce:	fa21 f004 	lsr.w	r0, r1, r4
 80204d2:	4629      	mov	r1, r5
 80204d4:	bd30      	pop	{r4, r5, pc}
 80204d6:	f094 0f00 	teq	r4, #0
 80204da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80204de:	bf06      	itte	eq
 80204e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80204e4:	3401      	addeq	r4, #1
 80204e6:	3d01      	subne	r5, #1
 80204e8:	e74e      	b.n	8020388 <__adddf3+0x8c>
 80204ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80204ee:	bf18      	it	ne
 80204f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80204f4:	d029      	beq.n	802054a <__adddf3+0x24e>
 80204f6:	ea94 0f05 	teq	r4, r5
 80204fa:	bf08      	it	eq
 80204fc:	ea90 0f02 	teqeq	r0, r2
 8020500:	d005      	beq.n	802050e <__adddf3+0x212>
 8020502:	ea54 0c00 	orrs.w	ip, r4, r0
 8020506:	bf04      	itt	eq
 8020508:	4619      	moveq	r1, r3
 802050a:	4610      	moveq	r0, r2
 802050c:	bd30      	pop	{r4, r5, pc}
 802050e:	ea91 0f03 	teq	r1, r3
 8020512:	bf1e      	ittt	ne
 8020514:	2100      	movne	r1, #0
 8020516:	2000      	movne	r0, #0
 8020518:	bd30      	popne	{r4, r5, pc}
 802051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 802051e:	d105      	bne.n	802052c <__adddf3+0x230>
 8020520:	0040      	lsls	r0, r0, #1
 8020522:	4149      	adcs	r1, r1
 8020524:	bf28      	it	cs
 8020526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 802052a:	bd30      	pop	{r4, r5, pc}
 802052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8020530:	bf3c      	itt	cc
 8020532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8020536:	bd30      	popcc	{r4, r5, pc}
 8020538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 802053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8020540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8020544:	f04f 0000 	mov.w	r0, #0
 8020548:	bd30      	pop	{r4, r5, pc}
 802054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802054e:	bf1a      	itte	ne
 8020550:	4619      	movne	r1, r3
 8020552:	4610      	movne	r0, r2
 8020554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8020558:	bf1c      	itt	ne
 802055a:	460b      	movne	r3, r1
 802055c:	4602      	movne	r2, r0
 802055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8020562:	bf06      	itte	eq
 8020564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8020568:	ea91 0f03 	teqeq	r1, r3
 802056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8020570:	bd30      	pop	{r4, r5, pc}
 8020572:	bf00      	nop

08020574 <__aeabi_ui2d>:
 8020574:	f090 0f00 	teq	r0, #0
 8020578:	bf04      	itt	eq
 802057a:	2100      	moveq	r1, #0
 802057c:	4770      	bxeq	lr
 802057e:	b530      	push	{r4, r5, lr}
 8020580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8020588:	f04f 0500 	mov.w	r5, #0
 802058c:	f04f 0100 	mov.w	r1, #0
 8020590:	e750      	b.n	8020434 <__adddf3+0x138>
 8020592:	bf00      	nop

08020594 <__aeabi_i2d>:
 8020594:	f090 0f00 	teq	r0, #0
 8020598:	bf04      	itt	eq
 802059a:	2100      	moveq	r1, #0
 802059c:	4770      	bxeq	lr
 802059e:	b530      	push	{r4, r5, lr}
 80205a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80205a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80205a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80205ac:	bf48      	it	mi
 80205ae:	4240      	negmi	r0, r0
 80205b0:	f04f 0100 	mov.w	r1, #0
 80205b4:	e73e      	b.n	8020434 <__adddf3+0x138>
 80205b6:	bf00      	nop

080205b8 <__aeabi_f2d>:
 80205b8:	0042      	lsls	r2, r0, #1
 80205ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80205be:	ea4f 0131 	mov.w	r1, r1, rrx
 80205c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80205c6:	bf1f      	itttt	ne
 80205c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80205cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80205d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80205d4:	4770      	bxne	lr
 80205d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80205da:	bf08      	it	eq
 80205dc:	4770      	bxeq	lr
 80205de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80205e2:	bf04      	itt	eq
 80205e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80205e8:	4770      	bxeq	lr
 80205ea:	b530      	push	{r4, r5, lr}
 80205ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80205f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80205f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80205f8:	e71c      	b.n	8020434 <__adddf3+0x138>
 80205fa:	bf00      	nop

080205fc <__aeabi_ul2d>:
 80205fc:	ea50 0201 	orrs.w	r2, r0, r1
 8020600:	bf08      	it	eq
 8020602:	4770      	bxeq	lr
 8020604:	b530      	push	{r4, r5, lr}
 8020606:	f04f 0500 	mov.w	r5, #0
 802060a:	e00a      	b.n	8020622 <__aeabi_l2d+0x16>

0802060c <__aeabi_l2d>:
 802060c:	ea50 0201 	orrs.w	r2, r0, r1
 8020610:	bf08      	it	eq
 8020612:	4770      	bxeq	lr
 8020614:	b530      	push	{r4, r5, lr}
 8020616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 802061a:	d502      	bpl.n	8020622 <__aeabi_l2d+0x16>
 802061c:	4240      	negs	r0, r0
 802061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8020622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 802062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 802062e:	f43f aed8 	beq.w	80203e2 <__adddf3+0xe6>
 8020632:	f04f 0203 	mov.w	r2, #3
 8020636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 802063a:	bf18      	it	ne
 802063c:	3203      	addne	r2, #3
 802063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8020642:	bf18      	it	ne
 8020644:	3203      	addne	r2, #3
 8020646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 802064a:	f1c2 0320 	rsb	r3, r2, #32
 802064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8020652:	fa20 f002 	lsr.w	r0, r0, r2
 8020656:	fa01 fe03 	lsl.w	lr, r1, r3
 802065a:	ea40 000e 	orr.w	r0, r0, lr
 802065e:	fa21 f102 	lsr.w	r1, r1, r2
 8020662:	4414      	add	r4, r2
 8020664:	e6bd      	b.n	80203e2 <__adddf3+0xe6>
 8020666:	bf00      	nop

08020668 <__aeabi_dmul>:
 8020668:	b570      	push	{r4, r5, r6, lr}
 802066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 802066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8020672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8020676:	bf1d      	ittte	ne
 8020678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 802067c:	ea94 0f0c 	teqne	r4, ip
 8020680:	ea95 0f0c 	teqne	r5, ip
 8020684:	f000 f8de 	bleq	8020844 <__aeabi_dmul+0x1dc>
 8020688:	442c      	add	r4, r5
 802068a:	ea81 0603 	eor.w	r6, r1, r3
 802068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8020692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8020696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 802069a:	bf18      	it	ne
 802069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80206a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80206a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80206a8:	d038      	beq.n	802071c <__aeabi_dmul+0xb4>
 80206aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80206ae:	f04f 0500 	mov.w	r5, #0
 80206b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80206b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80206ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80206be:	f04f 0600 	mov.w	r6, #0
 80206c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80206c6:	f09c 0f00 	teq	ip, #0
 80206ca:	bf18      	it	ne
 80206cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80206d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80206d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80206d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80206dc:	d204      	bcs.n	80206e8 <__aeabi_dmul+0x80>
 80206de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80206e2:	416d      	adcs	r5, r5
 80206e4:	eb46 0606 	adc.w	r6, r6, r6
 80206e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80206ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80206f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80206f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80206f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80206fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8020700:	bf88      	it	hi
 8020702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020706:	d81e      	bhi.n	8020746 <__aeabi_dmul+0xde>
 8020708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 802070c:	bf08      	it	eq
 802070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8020712:	f150 0000 	adcs.w	r0, r0, #0
 8020716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802071a:	bd70      	pop	{r4, r5, r6, pc}
 802071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8020720:	ea46 0101 	orr.w	r1, r6, r1
 8020724:	ea40 0002 	orr.w	r0, r0, r2
 8020728:	ea81 0103 	eor.w	r1, r1, r3
 802072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8020730:	bfc2      	ittt	gt
 8020732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 802073a:	bd70      	popgt	{r4, r5, r6, pc}
 802073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020740:	f04f 0e00 	mov.w	lr, #0
 8020744:	3c01      	subs	r4, #1
 8020746:	f300 80ab 	bgt.w	80208a0 <__aeabi_dmul+0x238>
 802074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 802074e:	bfde      	ittt	le
 8020750:	2000      	movle	r0, #0
 8020752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8020756:	bd70      	pople	{r4, r5, r6, pc}
 8020758:	f1c4 0400 	rsb	r4, r4, #0
 802075c:	3c20      	subs	r4, #32
 802075e:	da35      	bge.n	80207cc <__aeabi_dmul+0x164>
 8020760:	340c      	adds	r4, #12
 8020762:	dc1b      	bgt.n	802079c <__aeabi_dmul+0x134>
 8020764:	f104 0414 	add.w	r4, r4, #20
 8020768:	f1c4 0520 	rsb	r5, r4, #32
 802076c:	fa00 f305 	lsl.w	r3, r0, r5
 8020770:	fa20 f004 	lsr.w	r0, r0, r4
 8020774:	fa01 f205 	lsl.w	r2, r1, r5
 8020778:	ea40 0002 	orr.w	r0, r0, r2
 802077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8020780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8020784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8020788:	fa21 f604 	lsr.w	r6, r1, r4
 802078c:	eb42 0106 	adc.w	r1, r2, r6
 8020790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020794:	bf08      	it	eq
 8020796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802079a:	bd70      	pop	{r4, r5, r6, pc}
 802079c:	f1c4 040c 	rsb	r4, r4, #12
 80207a0:	f1c4 0520 	rsb	r5, r4, #32
 80207a4:	fa00 f304 	lsl.w	r3, r0, r4
 80207a8:	fa20 f005 	lsr.w	r0, r0, r5
 80207ac:	fa01 f204 	lsl.w	r2, r1, r4
 80207b0:	ea40 0002 	orr.w	r0, r0, r2
 80207b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80207b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80207bc:	f141 0100 	adc.w	r1, r1, #0
 80207c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80207c4:	bf08      	it	eq
 80207c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80207ca:	bd70      	pop	{r4, r5, r6, pc}
 80207cc:	f1c4 0520 	rsb	r5, r4, #32
 80207d0:	fa00 f205 	lsl.w	r2, r0, r5
 80207d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80207d8:	fa20 f304 	lsr.w	r3, r0, r4
 80207dc:	fa01 f205 	lsl.w	r2, r1, r5
 80207e0:	ea43 0302 	orr.w	r3, r3, r2
 80207e4:	fa21 f004 	lsr.w	r0, r1, r4
 80207e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80207ec:	fa21 f204 	lsr.w	r2, r1, r4
 80207f0:	ea20 0002 	bic.w	r0, r0, r2
 80207f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80207f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80207fc:	bf08      	it	eq
 80207fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8020802:	bd70      	pop	{r4, r5, r6, pc}
 8020804:	f094 0f00 	teq	r4, #0
 8020808:	d10f      	bne.n	802082a <__aeabi_dmul+0x1c2>
 802080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 802080e:	0040      	lsls	r0, r0, #1
 8020810:	eb41 0101 	adc.w	r1, r1, r1
 8020814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020818:	bf08      	it	eq
 802081a:	3c01      	subeq	r4, #1
 802081c:	d0f7      	beq.n	802080e <__aeabi_dmul+0x1a6>
 802081e:	ea41 0106 	orr.w	r1, r1, r6
 8020822:	f095 0f00 	teq	r5, #0
 8020826:	bf18      	it	ne
 8020828:	4770      	bxne	lr
 802082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 802082e:	0052      	lsls	r2, r2, #1
 8020830:	eb43 0303 	adc.w	r3, r3, r3
 8020834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8020838:	bf08      	it	eq
 802083a:	3d01      	subeq	r5, #1
 802083c:	d0f7      	beq.n	802082e <__aeabi_dmul+0x1c6>
 802083e:	ea43 0306 	orr.w	r3, r3, r6
 8020842:	4770      	bx	lr
 8020844:	ea94 0f0c 	teq	r4, ip
 8020848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 802084c:	bf18      	it	ne
 802084e:	ea95 0f0c 	teqne	r5, ip
 8020852:	d00c      	beq.n	802086e <__aeabi_dmul+0x206>
 8020854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020858:	bf18      	it	ne
 802085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 802085e:	d1d1      	bne.n	8020804 <__aeabi_dmul+0x19c>
 8020860:	ea81 0103 	eor.w	r1, r1, r3
 8020864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020868:	f04f 0000 	mov.w	r0, #0
 802086c:	bd70      	pop	{r4, r5, r6, pc}
 802086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020872:	bf06      	itte	eq
 8020874:	4610      	moveq	r0, r2
 8020876:	4619      	moveq	r1, r3
 8020878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 802087c:	d019      	beq.n	80208b2 <__aeabi_dmul+0x24a>
 802087e:	ea94 0f0c 	teq	r4, ip
 8020882:	d102      	bne.n	802088a <__aeabi_dmul+0x222>
 8020884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8020888:	d113      	bne.n	80208b2 <__aeabi_dmul+0x24a>
 802088a:	ea95 0f0c 	teq	r5, ip
 802088e:	d105      	bne.n	802089c <__aeabi_dmul+0x234>
 8020890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8020894:	bf1c      	itt	ne
 8020896:	4610      	movne	r0, r2
 8020898:	4619      	movne	r1, r3
 802089a:	d10a      	bne.n	80208b2 <__aeabi_dmul+0x24a>
 802089c:	ea81 0103 	eor.w	r1, r1, r3
 80208a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80208a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80208a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80208ac:	f04f 0000 	mov.w	r0, #0
 80208b0:	bd70      	pop	{r4, r5, r6, pc}
 80208b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80208b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80208ba:	bd70      	pop	{r4, r5, r6, pc}

080208bc <__aeabi_ddiv>:
 80208bc:	b570      	push	{r4, r5, r6, lr}
 80208be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80208c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80208c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80208ca:	bf1d      	ittte	ne
 80208cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80208d0:	ea94 0f0c 	teqne	r4, ip
 80208d4:	ea95 0f0c 	teqne	r5, ip
 80208d8:	f000 f8a7 	bleq	8020a2a <__aeabi_ddiv+0x16e>
 80208dc:	eba4 0405 	sub.w	r4, r4, r5
 80208e0:	ea81 0e03 	eor.w	lr, r1, r3
 80208e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80208e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80208ec:	f000 8088 	beq.w	8020a00 <__aeabi_ddiv+0x144>
 80208f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80208f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80208f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80208fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8020900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8020904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8020908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 802090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8020910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8020914:	429d      	cmp	r5, r3
 8020916:	bf08      	it	eq
 8020918:	4296      	cmpeq	r6, r2
 802091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 802091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8020922:	d202      	bcs.n	802092a <__aeabi_ddiv+0x6e>
 8020924:	085b      	lsrs	r3, r3, #1
 8020926:	ea4f 0232 	mov.w	r2, r2, rrx
 802092a:	1ab6      	subs	r6, r6, r2
 802092c:	eb65 0503 	sbc.w	r5, r5, r3
 8020930:	085b      	lsrs	r3, r3, #1
 8020932:	ea4f 0232 	mov.w	r2, r2, rrx
 8020936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 802093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 802093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8020942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020946:	bf22      	ittt	cs
 8020948:	1ab6      	subcs	r6, r6, r2
 802094a:	4675      	movcs	r5, lr
 802094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8020950:	085b      	lsrs	r3, r3, #1
 8020952:	ea4f 0232 	mov.w	r2, r2, rrx
 8020956:	ebb6 0e02 	subs.w	lr, r6, r2
 802095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 802095e:	bf22      	ittt	cs
 8020960:	1ab6      	subcs	r6, r6, r2
 8020962:	4675      	movcs	r5, lr
 8020964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8020968:	085b      	lsrs	r3, r3, #1
 802096a:	ea4f 0232 	mov.w	r2, r2, rrx
 802096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8020972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020976:	bf22      	ittt	cs
 8020978:	1ab6      	subcs	r6, r6, r2
 802097a:	4675      	movcs	r5, lr
 802097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8020980:	085b      	lsrs	r3, r3, #1
 8020982:	ea4f 0232 	mov.w	r2, r2, rrx
 8020986:	ebb6 0e02 	subs.w	lr, r6, r2
 802098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 802098e:	bf22      	ittt	cs
 8020990:	1ab6      	subcs	r6, r6, r2
 8020992:	4675      	movcs	r5, lr
 8020994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8020998:	ea55 0e06 	orrs.w	lr, r5, r6
 802099c:	d018      	beq.n	80209d0 <__aeabi_ddiv+0x114>
 802099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80209a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80209a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80209aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80209ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80209b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80209b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80209ba:	d1c0      	bne.n	802093e <__aeabi_ddiv+0x82>
 80209bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80209c0:	d10b      	bne.n	80209da <__aeabi_ddiv+0x11e>
 80209c2:	ea41 0100 	orr.w	r1, r1, r0
 80209c6:	f04f 0000 	mov.w	r0, #0
 80209ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80209ce:	e7b6      	b.n	802093e <__aeabi_ddiv+0x82>
 80209d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80209d4:	bf04      	itt	eq
 80209d6:	4301      	orreq	r1, r0
 80209d8:	2000      	moveq	r0, #0
 80209da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80209de:	bf88      	it	hi
 80209e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80209e4:	f63f aeaf 	bhi.w	8020746 <__aeabi_dmul+0xde>
 80209e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80209ec:	bf04      	itt	eq
 80209ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80209f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80209f6:	f150 0000 	adcs.w	r0, r0, #0
 80209fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80209fe:	bd70      	pop	{r4, r5, r6, pc}
 8020a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8020a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8020a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8020a0c:	bfc2      	ittt	gt
 8020a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8020a16:	bd70      	popgt	{r4, r5, r6, pc}
 8020a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020a1c:	f04f 0e00 	mov.w	lr, #0
 8020a20:	3c01      	subs	r4, #1
 8020a22:	e690      	b.n	8020746 <__aeabi_dmul+0xde>
 8020a24:	ea45 0e06 	orr.w	lr, r5, r6
 8020a28:	e68d      	b.n	8020746 <__aeabi_dmul+0xde>
 8020a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8020a2e:	ea94 0f0c 	teq	r4, ip
 8020a32:	bf08      	it	eq
 8020a34:	ea95 0f0c 	teqeq	r5, ip
 8020a38:	f43f af3b 	beq.w	80208b2 <__aeabi_dmul+0x24a>
 8020a3c:	ea94 0f0c 	teq	r4, ip
 8020a40:	d10a      	bne.n	8020a58 <__aeabi_ddiv+0x19c>
 8020a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8020a46:	f47f af34 	bne.w	80208b2 <__aeabi_dmul+0x24a>
 8020a4a:	ea95 0f0c 	teq	r5, ip
 8020a4e:	f47f af25 	bne.w	802089c <__aeabi_dmul+0x234>
 8020a52:	4610      	mov	r0, r2
 8020a54:	4619      	mov	r1, r3
 8020a56:	e72c      	b.n	80208b2 <__aeabi_dmul+0x24a>
 8020a58:	ea95 0f0c 	teq	r5, ip
 8020a5c:	d106      	bne.n	8020a6c <__aeabi_ddiv+0x1b0>
 8020a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8020a62:	f43f aefd 	beq.w	8020860 <__aeabi_dmul+0x1f8>
 8020a66:	4610      	mov	r0, r2
 8020a68:	4619      	mov	r1, r3
 8020a6a:	e722      	b.n	80208b2 <__aeabi_dmul+0x24a>
 8020a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020a70:	bf18      	it	ne
 8020a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8020a76:	f47f aec5 	bne.w	8020804 <__aeabi_dmul+0x19c>
 8020a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8020a7e:	f47f af0d 	bne.w	802089c <__aeabi_dmul+0x234>
 8020a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8020a86:	f47f aeeb 	bne.w	8020860 <__aeabi_dmul+0x1f8>
 8020a8a:	e712      	b.n	80208b2 <__aeabi_dmul+0x24a>

08020a8c <__gedf2>:
 8020a8c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8020a90:	e006      	b.n	8020aa0 <__cmpdf2+0x4>
 8020a92:	bf00      	nop

08020a94 <__ledf2>:
 8020a94:	f04f 0c01 	mov.w	ip, #1
 8020a98:	e002      	b.n	8020aa0 <__cmpdf2+0x4>
 8020a9a:	bf00      	nop

08020a9c <__cmpdf2>:
 8020a9c:	f04f 0c01 	mov.w	ip, #1
 8020aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8020aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020ab0:	bf18      	it	ne
 8020ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8020ab6:	d01b      	beq.n	8020af0 <__cmpdf2+0x54>
 8020ab8:	b001      	add	sp, #4
 8020aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8020abe:	bf0c      	ite	eq
 8020ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8020ac4:	ea91 0f03 	teqne	r1, r3
 8020ac8:	bf02      	ittt	eq
 8020aca:	ea90 0f02 	teqeq	r0, r2
 8020ace:	2000      	moveq	r0, #0
 8020ad0:	4770      	bxeq	lr
 8020ad2:	f110 0f00 	cmn.w	r0, #0
 8020ad6:	ea91 0f03 	teq	r1, r3
 8020ada:	bf58      	it	pl
 8020adc:	4299      	cmppl	r1, r3
 8020ade:	bf08      	it	eq
 8020ae0:	4290      	cmpeq	r0, r2
 8020ae2:	bf2c      	ite	cs
 8020ae4:	17d8      	asrcs	r0, r3, #31
 8020ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8020aea:	f040 0001 	orr.w	r0, r0, #1
 8020aee:	4770      	bx	lr
 8020af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020af8:	d102      	bne.n	8020b00 <__cmpdf2+0x64>
 8020afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8020afe:	d107      	bne.n	8020b10 <__cmpdf2+0x74>
 8020b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020b08:	d1d6      	bne.n	8020ab8 <__cmpdf2+0x1c>
 8020b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8020b0e:	d0d3      	beq.n	8020ab8 <__cmpdf2+0x1c>
 8020b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8020b14:	4770      	bx	lr
 8020b16:	bf00      	nop

08020b18 <__aeabi_cdrcmple>:
 8020b18:	4684      	mov	ip, r0
 8020b1a:	4610      	mov	r0, r2
 8020b1c:	4662      	mov	r2, ip
 8020b1e:	468c      	mov	ip, r1
 8020b20:	4619      	mov	r1, r3
 8020b22:	4663      	mov	r3, ip
 8020b24:	e000      	b.n	8020b28 <__aeabi_cdcmpeq>
 8020b26:	bf00      	nop

08020b28 <__aeabi_cdcmpeq>:
 8020b28:	b501      	push	{r0, lr}
 8020b2a:	f7ff ffb7 	bl	8020a9c <__cmpdf2>
 8020b2e:	2800      	cmp	r0, #0
 8020b30:	bf48      	it	mi
 8020b32:	f110 0f00 	cmnmi.w	r0, #0
 8020b36:	bd01      	pop	{r0, pc}

08020b38 <__aeabi_dcmpeq>:
 8020b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b3c:	f7ff fff4 	bl	8020b28 <__aeabi_cdcmpeq>
 8020b40:	bf0c      	ite	eq
 8020b42:	2001      	moveq	r0, #1
 8020b44:	2000      	movne	r0, #0
 8020b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b4a:	bf00      	nop

08020b4c <__aeabi_dcmplt>:
 8020b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b50:	f7ff ffea 	bl	8020b28 <__aeabi_cdcmpeq>
 8020b54:	bf34      	ite	cc
 8020b56:	2001      	movcc	r0, #1
 8020b58:	2000      	movcs	r0, #0
 8020b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b5e:	bf00      	nop

08020b60 <__aeabi_dcmple>:
 8020b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b64:	f7ff ffe0 	bl	8020b28 <__aeabi_cdcmpeq>
 8020b68:	bf94      	ite	ls
 8020b6a:	2001      	movls	r0, #1
 8020b6c:	2000      	movhi	r0, #0
 8020b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b72:	bf00      	nop

08020b74 <__aeabi_dcmpge>:
 8020b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b78:	f7ff ffce 	bl	8020b18 <__aeabi_cdrcmple>
 8020b7c:	bf94      	ite	ls
 8020b7e:	2001      	movls	r0, #1
 8020b80:	2000      	movhi	r0, #0
 8020b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b86:	bf00      	nop

08020b88 <__aeabi_dcmpgt>:
 8020b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b8c:	f7ff ffc4 	bl	8020b18 <__aeabi_cdrcmple>
 8020b90:	bf34      	ite	cc
 8020b92:	2001      	movcc	r0, #1
 8020b94:	2000      	movcs	r0, #0
 8020b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b9a:	bf00      	nop

08020b9c <__aeabi_dcmpun>:
 8020b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020ba4:	d102      	bne.n	8020bac <__aeabi_dcmpun+0x10>
 8020ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8020baa:	d10a      	bne.n	8020bc2 <__aeabi_dcmpun+0x26>
 8020bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020bb4:	d102      	bne.n	8020bbc <__aeabi_dcmpun+0x20>
 8020bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8020bba:	d102      	bne.n	8020bc2 <__aeabi_dcmpun+0x26>
 8020bbc:	f04f 0000 	mov.w	r0, #0
 8020bc0:	4770      	bx	lr
 8020bc2:	f04f 0001 	mov.w	r0, #1
 8020bc6:	4770      	bx	lr

08020bc8 <__aeabi_d2iz>:
 8020bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8020bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8020bd0:	d215      	bcs.n	8020bfe <__aeabi_d2iz+0x36>
 8020bd2:	d511      	bpl.n	8020bf8 <__aeabi_d2iz+0x30>
 8020bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8020bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8020bdc:	d912      	bls.n	8020c04 <__aeabi_d2iz+0x3c>
 8020bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8020be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8020bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8020bee:	fa23 f002 	lsr.w	r0, r3, r2
 8020bf2:	bf18      	it	ne
 8020bf4:	4240      	negne	r0, r0
 8020bf6:	4770      	bx	lr
 8020bf8:	f04f 0000 	mov.w	r0, #0
 8020bfc:	4770      	bx	lr
 8020bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8020c02:	d105      	bne.n	8020c10 <__aeabi_d2iz+0x48>
 8020c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8020c08:	bf08      	it	eq
 8020c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8020c0e:	4770      	bx	lr
 8020c10:	f04f 0000 	mov.w	r0, #0
 8020c14:	4770      	bx	lr
 8020c16:	bf00      	nop

08020c18 <__aeabi_d2uiz>:
 8020c18:	004a      	lsls	r2, r1, #1
 8020c1a:	d211      	bcs.n	8020c40 <__aeabi_d2uiz+0x28>
 8020c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8020c20:	d211      	bcs.n	8020c46 <__aeabi_d2uiz+0x2e>
 8020c22:	d50d      	bpl.n	8020c40 <__aeabi_d2uiz+0x28>
 8020c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8020c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8020c2c:	d40e      	bmi.n	8020c4c <__aeabi_d2uiz+0x34>
 8020c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8020c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8020c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8020c3e:	4770      	bx	lr
 8020c40:	f04f 0000 	mov.w	r0, #0
 8020c44:	4770      	bx	lr
 8020c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8020c4a:	d102      	bne.n	8020c52 <__aeabi_d2uiz+0x3a>
 8020c4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020c50:	4770      	bx	lr
 8020c52:	f04f 0000 	mov.w	r0, #0
 8020c56:	4770      	bx	lr

08020c58 <__aeabi_d2f>:
 8020c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8020c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8020c60:	bf24      	itt	cs
 8020c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8020c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8020c6a:	d90d      	bls.n	8020c88 <__aeabi_d2f+0x30>
 8020c6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8020c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8020c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8020c78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8020c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8020c80:	bf08      	it	eq
 8020c82:	f020 0001 	biceq.w	r0, r0, #1
 8020c86:	4770      	bx	lr
 8020c88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8020c8c:	d121      	bne.n	8020cd2 <__aeabi_d2f+0x7a>
 8020c8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8020c92:	bfbc      	itt	lt
 8020c94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8020c98:	4770      	bxlt	lr
 8020c9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8020ca2:	f1c2 0218 	rsb	r2, r2, #24
 8020ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8020caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8020cae:	fa20 f002 	lsr.w	r0, r0, r2
 8020cb2:	bf18      	it	ne
 8020cb4:	f040 0001 	orrne.w	r0, r0, #1
 8020cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8020cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8020cc4:	ea40 000c 	orr.w	r0, r0, ip
 8020cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8020ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8020cd0:	e7cc      	b.n	8020c6c <__aeabi_d2f+0x14>
 8020cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8020cd6:	d107      	bne.n	8020ce8 <__aeabi_d2f+0x90>
 8020cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8020cdc:	bf1e      	ittt	ne
 8020cde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8020ce2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8020ce6:	4770      	bxne	lr
 8020ce8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8020cec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8020cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8020cf4:	4770      	bx	lr
 8020cf6:	bf00      	nop

08020cf8 <__aeabi_uldivmod>:
 8020cf8:	b953      	cbnz	r3, 8020d10 <__aeabi_uldivmod+0x18>
 8020cfa:	b94a      	cbnz	r2, 8020d10 <__aeabi_uldivmod+0x18>
 8020cfc:	2900      	cmp	r1, #0
 8020cfe:	bf08      	it	eq
 8020d00:	2800      	cmpeq	r0, #0
 8020d02:	bf1c      	itt	ne
 8020d04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8020d08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8020d0c:	f000 b994 	b.w	8021038 <__aeabi_idiv0>
 8020d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8020d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8020d18:	f000 f828 	bl	8020d6c <__udivmoddi4>
 8020d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8020d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020d24:	b004      	add	sp, #16
 8020d26:	4770      	bx	lr

08020d28 <__aeabi_d2ulz>:
 8020d28:	b5d0      	push	{r4, r6, r7, lr}
 8020d2a:	2200      	movs	r2, #0
 8020d2c:	4b0d      	ldr	r3, [pc, #52]	; (8020d64 <__aeabi_d2ulz+0x3c>)
 8020d2e:	4606      	mov	r6, r0
 8020d30:	460f      	mov	r7, r1
 8020d32:	f7ff fc99 	bl	8020668 <__aeabi_dmul>
 8020d36:	f7ff ff6f 	bl	8020c18 <__aeabi_d2uiz>
 8020d3a:	4604      	mov	r4, r0
 8020d3c:	f7ff fc1a 	bl	8020574 <__aeabi_ui2d>
 8020d40:	2200      	movs	r2, #0
 8020d42:	4b09      	ldr	r3, [pc, #36]	; (8020d68 <__aeabi_d2ulz+0x40>)
 8020d44:	f7ff fc90 	bl	8020668 <__aeabi_dmul>
 8020d48:	4602      	mov	r2, r0
 8020d4a:	460b      	mov	r3, r1
 8020d4c:	4630      	mov	r0, r6
 8020d4e:	4639      	mov	r1, r7
 8020d50:	f7ff fad2 	bl	80202f8 <__aeabi_dsub>
 8020d54:	f7ff ff60 	bl	8020c18 <__aeabi_d2uiz>
 8020d58:	2200      	movs	r2, #0
 8020d5a:	4623      	mov	r3, r4
 8020d5c:	4310      	orrs	r0, r2
 8020d5e:	4619      	mov	r1, r3
 8020d60:	bdd0      	pop	{r4, r6, r7, pc}
 8020d62:	bf00      	nop
 8020d64:	3df00000 	.word	0x3df00000
 8020d68:	41f00000 	.word	0x41f00000

08020d6c <__udivmoddi4>:
 8020d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020d70:	9e08      	ldr	r6, [sp, #32]
 8020d72:	4604      	mov	r4, r0
 8020d74:	4688      	mov	r8, r1
 8020d76:	2b00      	cmp	r3, #0
 8020d78:	d14b      	bne.n	8020e12 <__udivmoddi4+0xa6>
 8020d7a:	428a      	cmp	r2, r1
 8020d7c:	4615      	mov	r5, r2
 8020d7e:	d967      	bls.n	8020e50 <__udivmoddi4+0xe4>
 8020d80:	fab2 f282 	clz	r2, r2
 8020d84:	b14a      	cbz	r2, 8020d9a <__udivmoddi4+0x2e>
 8020d86:	f1c2 0720 	rsb	r7, r2, #32
 8020d8a:	fa01 f302 	lsl.w	r3, r1, r2
 8020d8e:	fa20 f707 	lsr.w	r7, r0, r7
 8020d92:	4095      	lsls	r5, r2
 8020d94:	ea47 0803 	orr.w	r8, r7, r3
 8020d98:	4094      	lsls	r4, r2
 8020d9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020d9e:	0c23      	lsrs	r3, r4, #16
 8020da0:	fbb8 f7fe 	udiv	r7, r8, lr
 8020da4:	fa1f fc85 	uxth.w	ip, r5
 8020da8:	fb0e 8817 	mls	r8, lr, r7, r8
 8020dac:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8020db0:	fb07 f10c 	mul.w	r1, r7, ip
 8020db4:	4299      	cmp	r1, r3
 8020db6:	d909      	bls.n	8020dcc <__udivmoddi4+0x60>
 8020db8:	18eb      	adds	r3, r5, r3
 8020dba:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8020dbe:	f080 811b 	bcs.w	8020ff8 <__udivmoddi4+0x28c>
 8020dc2:	4299      	cmp	r1, r3
 8020dc4:	f240 8118 	bls.w	8020ff8 <__udivmoddi4+0x28c>
 8020dc8:	3f02      	subs	r7, #2
 8020dca:	442b      	add	r3, r5
 8020dcc:	1a5b      	subs	r3, r3, r1
 8020dce:	b2a4      	uxth	r4, r4
 8020dd0:	fbb3 f0fe 	udiv	r0, r3, lr
 8020dd4:	fb0e 3310 	mls	r3, lr, r0, r3
 8020dd8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020ddc:	fb00 fc0c 	mul.w	ip, r0, ip
 8020de0:	45a4      	cmp	ip, r4
 8020de2:	d909      	bls.n	8020df8 <__udivmoddi4+0x8c>
 8020de4:	192c      	adds	r4, r5, r4
 8020de6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8020dea:	f080 8107 	bcs.w	8020ffc <__udivmoddi4+0x290>
 8020dee:	45a4      	cmp	ip, r4
 8020df0:	f240 8104 	bls.w	8020ffc <__udivmoddi4+0x290>
 8020df4:	3802      	subs	r0, #2
 8020df6:	442c      	add	r4, r5
 8020df8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8020dfc:	eba4 040c 	sub.w	r4, r4, ip
 8020e00:	2700      	movs	r7, #0
 8020e02:	b11e      	cbz	r6, 8020e0c <__udivmoddi4+0xa0>
 8020e04:	40d4      	lsrs	r4, r2
 8020e06:	2300      	movs	r3, #0
 8020e08:	e9c6 4300 	strd	r4, r3, [r6]
 8020e0c:	4639      	mov	r1, r7
 8020e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020e12:	428b      	cmp	r3, r1
 8020e14:	d909      	bls.n	8020e2a <__udivmoddi4+0xbe>
 8020e16:	2e00      	cmp	r6, #0
 8020e18:	f000 80eb 	beq.w	8020ff2 <__udivmoddi4+0x286>
 8020e1c:	2700      	movs	r7, #0
 8020e1e:	e9c6 0100 	strd	r0, r1, [r6]
 8020e22:	4638      	mov	r0, r7
 8020e24:	4639      	mov	r1, r7
 8020e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020e2a:	fab3 f783 	clz	r7, r3
 8020e2e:	2f00      	cmp	r7, #0
 8020e30:	d147      	bne.n	8020ec2 <__udivmoddi4+0x156>
 8020e32:	428b      	cmp	r3, r1
 8020e34:	d302      	bcc.n	8020e3c <__udivmoddi4+0xd0>
 8020e36:	4282      	cmp	r2, r0
 8020e38:	f200 80fa 	bhi.w	8021030 <__udivmoddi4+0x2c4>
 8020e3c:	1a84      	subs	r4, r0, r2
 8020e3e:	eb61 0303 	sbc.w	r3, r1, r3
 8020e42:	2001      	movs	r0, #1
 8020e44:	4698      	mov	r8, r3
 8020e46:	2e00      	cmp	r6, #0
 8020e48:	d0e0      	beq.n	8020e0c <__udivmoddi4+0xa0>
 8020e4a:	e9c6 4800 	strd	r4, r8, [r6]
 8020e4e:	e7dd      	b.n	8020e0c <__udivmoddi4+0xa0>
 8020e50:	b902      	cbnz	r2, 8020e54 <__udivmoddi4+0xe8>
 8020e52:	deff      	udf	#255	; 0xff
 8020e54:	fab2 f282 	clz	r2, r2
 8020e58:	2a00      	cmp	r2, #0
 8020e5a:	f040 808f 	bne.w	8020f7c <__udivmoddi4+0x210>
 8020e5e:	1b49      	subs	r1, r1, r5
 8020e60:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020e64:	fa1f f885 	uxth.w	r8, r5
 8020e68:	2701      	movs	r7, #1
 8020e6a:	fbb1 fcfe 	udiv	ip, r1, lr
 8020e6e:	0c23      	lsrs	r3, r4, #16
 8020e70:	fb0e 111c 	mls	r1, lr, ip, r1
 8020e74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020e78:	fb08 f10c 	mul.w	r1, r8, ip
 8020e7c:	4299      	cmp	r1, r3
 8020e7e:	d907      	bls.n	8020e90 <__udivmoddi4+0x124>
 8020e80:	18eb      	adds	r3, r5, r3
 8020e82:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8020e86:	d202      	bcs.n	8020e8e <__udivmoddi4+0x122>
 8020e88:	4299      	cmp	r1, r3
 8020e8a:	f200 80cd 	bhi.w	8021028 <__udivmoddi4+0x2bc>
 8020e8e:	4684      	mov	ip, r0
 8020e90:	1a59      	subs	r1, r3, r1
 8020e92:	b2a3      	uxth	r3, r4
 8020e94:	fbb1 f0fe 	udiv	r0, r1, lr
 8020e98:	fb0e 1410 	mls	r4, lr, r0, r1
 8020e9c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8020ea0:	fb08 f800 	mul.w	r8, r8, r0
 8020ea4:	45a0      	cmp	r8, r4
 8020ea6:	d907      	bls.n	8020eb8 <__udivmoddi4+0x14c>
 8020ea8:	192c      	adds	r4, r5, r4
 8020eaa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8020eae:	d202      	bcs.n	8020eb6 <__udivmoddi4+0x14a>
 8020eb0:	45a0      	cmp	r8, r4
 8020eb2:	f200 80b6 	bhi.w	8021022 <__udivmoddi4+0x2b6>
 8020eb6:	4618      	mov	r0, r3
 8020eb8:	eba4 0408 	sub.w	r4, r4, r8
 8020ebc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8020ec0:	e79f      	b.n	8020e02 <__udivmoddi4+0x96>
 8020ec2:	f1c7 0c20 	rsb	ip, r7, #32
 8020ec6:	40bb      	lsls	r3, r7
 8020ec8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8020ecc:	ea4e 0e03 	orr.w	lr, lr, r3
 8020ed0:	fa01 f407 	lsl.w	r4, r1, r7
 8020ed4:	fa20 f50c 	lsr.w	r5, r0, ip
 8020ed8:	fa21 f30c 	lsr.w	r3, r1, ip
 8020edc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8020ee0:	4325      	orrs	r5, r4
 8020ee2:	fbb3 f9f8 	udiv	r9, r3, r8
 8020ee6:	0c2c      	lsrs	r4, r5, #16
 8020ee8:	fb08 3319 	mls	r3, r8, r9, r3
 8020eec:	fa1f fa8e 	uxth.w	sl, lr
 8020ef0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8020ef4:	fb09 f40a 	mul.w	r4, r9, sl
 8020ef8:	429c      	cmp	r4, r3
 8020efa:	fa02 f207 	lsl.w	r2, r2, r7
 8020efe:	fa00 f107 	lsl.w	r1, r0, r7
 8020f02:	d90b      	bls.n	8020f1c <__udivmoddi4+0x1b0>
 8020f04:	eb1e 0303 	adds.w	r3, lr, r3
 8020f08:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8020f0c:	f080 8087 	bcs.w	802101e <__udivmoddi4+0x2b2>
 8020f10:	429c      	cmp	r4, r3
 8020f12:	f240 8084 	bls.w	802101e <__udivmoddi4+0x2b2>
 8020f16:	f1a9 0902 	sub.w	r9, r9, #2
 8020f1a:	4473      	add	r3, lr
 8020f1c:	1b1b      	subs	r3, r3, r4
 8020f1e:	b2ad      	uxth	r5, r5
 8020f20:	fbb3 f0f8 	udiv	r0, r3, r8
 8020f24:	fb08 3310 	mls	r3, r8, r0, r3
 8020f28:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8020f2c:	fb00 fa0a 	mul.w	sl, r0, sl
 8020f30:	45a2      	cmp	sl, r4
 8020f32:	d908      	bls.n	8020f46 <__udivmoddi4+0x1da>
 8020f34:	eb1e 0404 	adds.w	r4, lr, r4
 8020f38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8020f3c:	d26b      	bcs.n	8021016 <__udivmoddi4+0x2aa>
 8020f3e:	45a2      	cmp	sl, r4
 8020f40:	d969      	bls.n	8021016 <__udivmoddi4+0x2aa>
 8020f42:	3802      	subs	r0, #2
 8020f44:	4474      	add	r4, lr
 8020f46:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8020f4a:	fba0 8902 	umull	r8, r9, r0, r2
 8020f4e:	eba4 040a 	sub.w	r4, r4, sl
 8020f52:	454c      	cmp	r4, r9
 8020f54:	46c2      	mov	sl, r8
 8020f56:	464b      	mov	r3, r9
 8020f58:	d354      	bcc.n	8021004 <__udivmoddi4+0x298>
 8020f5a:	d051      	beq.n	8021000 <__udivmoddi4+0x294>
 8020f5c:	2e00      	cmp	r6, #0
 8020f5e:	d069      	beq.n	8021034 <__udivmoddi4+0x2c8>
 8020f60:	ebb1 050a 	subs.w	r5, r1, sl
 8020f64:	eb64 0403 	sbc.w	r4, r4, r3
 8020f68:	fa04 fc0c 	lsl.w	ip, r4, ip
 8020f6c:	40fd      	lsrs	r5, r7
 8020f6e:	40fc      	lsrs	r4, r7
 8020f70:	ea4c 0505 	orr.w	r5, ip, r5
 8020f74:	e9c6 5400 	strd	r5, r4, [r6]
 8020f78:	2700      	movs	r7, #0
 8020f7a:	e747      	b.n	8020e0c <__udivmoddi4+0xa0>
 8020f7c:	f1c2 0320 	rsb	r3, r2, #32
 8020f80:	fa20 f703 	lsr.w	r7, r0, r3
 8020f84:	4095      	lsls	r5, r2
 8020f86:	fa01 f002 	lsl.w	r0, r1, r2
 8020f8a:	fa21 f303 	lsr.w	r3, r1, r3
 8020f8e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020f92:	4338      	orrs	r0, r7
 8020f94:	0c01      	lsrs	r1, r0, #16
 8020f96:	fbb3 f7fe 	udiv	r7, r3, lr
 8020f9a:	fa1f f885 	uxth.w	r8, r5
 8020f9e:	fb0e 3317 	mls	r3, lr, r7, r3
 8020fa2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020fa6:	fb07 f308 	mul.w	r3, r7, r8
 8020faa:	428b      	cmp	r3, r1
 8020fac:	fa04 f402 	lsl.w	r4, r4, r2
 8020fb0:	d907      	bls.n	8020fc2 <__udivmoddi4+0x256>
 8020fb2:	1869      	adds	r1, r5, r1
 8020fb4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8020fb8:	d22f      	bcs.n	802101a <__udivmoddi4+0x2ae>
 8020fba:	428b      	cmp	r3, r1
 8020fbc:	d92d      	bls.n	802101a <__udivmoddi4+0x2ae>
 8020fbe:	3f02      	subs	r7, #2
 8020fc0:	4429      	add	r1, r5
 8020fc2:	1acb      	subs	r3, r1, r3
 8020fc4:	b281      	uxth	r1, r0
 8020fc6:	fbb3 f0fe 	udiv	r0, r3, lr
 8020fca:	fb0e 3310 	mls	r3, lr, r0, r3
 8020fce:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020fd2:	fb00 f308 	mul.w	r3, r0, r8
 8020fd6:	428b      	cmp	r3, r1
 8020fd8:	d907      	bls.n	8020fea <__udivmoddi4+0x27e>
 8020fda:	1869      	adds	r1, r5, r1
 8020fdc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8020fe0:	d217      	bcs.n	8021012 <__udivmoddi4+0x2a6>
 8020fe2:	428b      	cmp	r3, r1
 8020fe4:	d915      	bls.n	8021012 <__udivmoddi4+0x2a6>
 8020fe6:	3802      	subs	r0, #2
 8020fe8:	4429      	add	r1, r5
 8020fea:	1ac9      	subs	r1, r1, r3
 8020fec:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8020ff0:	e73b      	b.n	8020e6a <__udivmoddi4+0xfe>
 8020ff2:	4637      	mov	r7, r6
 8020ff4:	4630      	mov	r0, r6
 8020ff6:	e709      	b.n	8020e0c <__udivmoddi4+0xa0>
 8020ff8:	4607      	mov	r7, r0
 8020ffa:	e6e7      	b.n	8020dcc <__udivmoddi4+0x60>
 8020ffc:	4618      	mov	r0, r3
 8020ffe:	e6fb      	b.n	8020df8 <__udivmoddi4+0x8c>
 8021000:	4541      	cmp	r1, r8
 8021002:	d2ab      	bcs.n	8020f5c <__udivmoddi4+0x1f0>
 8021004:	ebb8 0a02 	subs.w	sl, r8, r2
 8021008:	eb69 020e 	sbc.w	r2, r9, lr
 802100c:	3801      	subs	r0, #1
 802100e:	4613      	mov	r3, r2
 8021010:	e7a4      	b.n	8020f5c <__udivmoddi4+0x1f0>
 8021012:	4660      	mov	r0, ip
 8021014:	e7e9      	b.n	8020fea <__udivmoddi4+0x27e>
 8021016:	4618      	mov	r0, r3
 8021018:	e795      	b.n	8020f46 <__udivmoddi4+0x1da>
 802101a:	4667      	mov	r7, ip
 802101c:	e7d1      	b.n	8020fc2 <__udivmoddi4+0x256>
 802101e:	4681      	mov	r9, r0
 8021020:	e77c      	b.n	8020f1c <__udivmoddi4+0x1b0>
 8021022:	3802      	subs	r0, #2
 8021024:	442c      	add	r4, r5
 8021026:	e747      	b.n	8020eb8 <__udivmoddi4+0x14c>
 8021028:	f1ac 0c02 	sub.w	ip, ip, #2
 802102c:	442b      	add	r3, r5
 802102e:	e72f      	b.n	8020e90 <__udivmoddi4+0x124>
 8021030:	4638      	mov	r0, r7
 8021032:	e708      	b.n	8020e46 <__udivmoddi4+0xda>
 8021034:	4637      	mov	r7, r6
 8021036:	e6e9      	b.n	8020e0c <__udivmoddi4+0xa0>

08021038 <__aeabi_idiv0>:
 8021038:	4770      	bx	lr
 802103a:	bf00      	nop

0802103c <BAT_DMA_Init>:

/* Public functions declaration ------------------------------------------------*/
static uint16_t MovingAverage(uint16_t *pBuffer, uint16_t len, uint16_t value);

/* Public functions implementation ---------------------------------------------*/
void BAT_DMA_Init(void) {
 802103c:	b580      	push	{r7, lr}
 802103e:	af00      	add	r7, sp, #0
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*) DMA_BUFFER, DMA_SZ);
 8021040:	2232      	movs	r2, #50	; 0x32
 8021042:	4903      	ldr	r1, [pc, #12]	; (8021050 <BAT_DMA_Init+0x14>)
 8021044:	4803      	ldr	r0, [pc, #12]	; (8021054 <BAT_DMA_Init+0x18>)
 8021046:	f00b f971 	bl	802c32c <HAL_ADC_Start_DMA>
}
 802104a:	bf00      	nop
 802104c:	bd80      	pop	{r7, pc}
 802104e:	bf00      	nop
 8021050:	200004b8 	.word	0x200004b8
 8021054:	200086b8 	.word	0x200086b8

08021058 <HAL_ADC_ConvHalfCpltCallback>:
    LOG_Str("Battery:Voltage = ");
    LOG_Int(BACKUP_VOLTAGE);
    LOG_StrLn(" mV");
}

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8021058:	b580      	push	{r7, lr}
 802105a:	b084      	sub	sp, #16
 802105c:	af00      	add	r7, sp, #0
 802105e:	6078      	str	r0, [r7, #4]
    uint16_t i;
    uint32_t temp = 0;
 8021060:	2300      	movs	r3, #0
 8021062:	60bb      	str	r3, [r7, #8]

    // sum all buffer sample
    for (i = 0; i < (DMA_SZ / 2); i++) {
 8021064:	2300      	movs	r3, #0
 8021066:	81fb      	strh	r3, [r7, #14]
 8021068:	e00a      	b.n	8021080 <HAL_ADC_ConvHalfCpltCallback+0x28>
        temp += DMA_BUFFER[i];
 802106a:	89fb      	ldrh	r3, [r7, #14]
 802106c:	4a0f      	ldr	r2, [pc, #60]	; (80210ac <HAL_ADC_ConvHalfCpltCallback+0x54>)
 802106e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8021072:	461a      	mov	r2, r3
 8021074:	68bb      	ldr	r3, [r7, #8]
 8021076:	4413      	add	r3, r2
 8021078:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < (DMA_SZ / 2); i++) {
 802107a:	89fb      	ldrh	r3, [r7, #14]
 802107c:	3301      	adds	r3, #1
 802107e:	81fb      	strh	r3, [r7, #14]
 8021080:	89fb      	ldrh	r3, [r7, #14]
 8021082:	2b18      	cmp	r3, #24
 8021084:	d9f1      	bls.n	802106a <HAL_ADC_ConvHalfCpltCallback+0x12>
    }
    // calculate the average
    temp = temp / (DMA_SZ / 2);
 8021086:	68bb      	ldr	r3, [r7, #8]
 8021088:	4a09      	ldr	r2, [pc, #36]	; (80210b0 <HAL_ADC_ConvHalfCpltCallback+0x58>)
 802108a:	fba2 2303 	umull	r2, r3, r2, r3
 802108e:	08db      	lsrs	r3, r3, #3
 8021090:	60bb      	str	r3, [r7, #8]

    // calculate the moving average
    MovingAverage(AVERAGE_BUFFER, AVERAGE_SZ, temp);
 8021092:	68bb      	ldr	r3, [r7, #8]
 8021094:	b29b      	uxth	r3, r3
 8021096:	461a      	mov	r2, r3
 8021098:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 802109c:	4805      	ldr	r0, [pc, #20]	; (80210b4 <HAL_ADC_ConvHalfCpltCallback+0x5c>)
 802109e:	f000 f857 	bl	8021150 <MovingAverage>
}
 80210a2:	bf00      	nop
 80210a4:	3710      	adds	r7, #16
 80210a6:	46bd      	mov	sp, r7
 80210a8:	bd80      	pop	{r7, pc}
 80210aa:	bf00      	nop
 80210ac:	200004b8 	.word	0x200004b8
 80210b0:	51eb851f 	.word	0x51eb851f
 80210b4:	2000051c 	.word	0x2000051c

080210b8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80210b8:	b580      	push	{r7, lr}
 80210ba:	b084      	sub	sp, #16
 80210bc:	af00      	add	r7, sp, #0
 80210be:	6078      	str	r0, [r7, #4]
    uint16_t i;
    uint32_t temp = 0;
 80210c0:	2300      	movs	r3, #0
 80210c2:	60bb      	str	r3, [r7, #8]

    // sum all buffer sample
    for (i = ((DMA_SZ / 2) - 1); i < DMA_SZ; i++) {
 80210c4:	2318      	movs	r3, #24
 80210c6:	81fb      	strh	r3, [r7, #14]
 80210c8:	e00a      	b.n	80210e0 <HAL_ADC_ConvCpltCallback+0x28>
        temp += DMA_BUFFER[i];
 80210ca:	89fb      	ldrh	r3, [r7, #14]
 80210cc:	4a1a      	ldr	r2, [pc, #104]	; (8021138 <HAL_ADC_ConvCpltCallback+0x80>)
 80210ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80210d2:	461a      	mov	r2, r3
 80210d4:	68bb      	ldr	r3, [r7, #8]
 80210d6:	4413      	add	r3, r2
 80210d8:	60bb      	str	r3, [r7, #8]
    for (i = ((DMA_SZ / 2) - 1); i < DMA_SZ; i++) {
 80210da:	89fb      	ldrh	r3, [r7, #14]
 80210dc:	3301      	adds	r3, #1
 80210de:	81fb      	strh	r3, [r7, #14]
 80210e0:	89fb      	ldrh	r3, [r7, #14]
 80210e2:	2b31      	cmp	r3, #49	; 0x31
 80210e4:	d9f1      	bls.n	80210ca <HAL_ADC_ConvCpltCallback+0x12>
    }
    // calculate the average
    temp = temp / (DMA_SZ / 2);
 80210e6:	68bb      	ldr	r3, [r7, #8]
 80210e8:	4a14      	ldr	r2, [pc, #80]	; (802113c <HAL_ADC_ConvCpltCallback+0x84>)
 80210ea:	fba2 2303 	umull	r2, r3, r2, r3
 80210ee:	08db      	lsrs	r3, r3, #3
 80210f0:	60bb      	str	r3, [r7, #8]

    // calculate the moving average
    temp = MovingAverage(AVERAGE_BUFFER, AVERAGE_SZ, temp);
 80210f2:	68bb      	ldr	r3, [r7, #8]
 80210f4:	b29b      	uxth	r3, r3
 80210f6:	461a      	mov	r2, r3
 80210f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80210fc:	4810      	ldr	r0, [pc, #64]	; (8021140 <HAL_ADC_ConvCpltCallback+0x88>)
 80210fe:	f000 f827 	bl	8021150 <MovingAverage>
 8021102:	4603      	mov	r3, r0
 8021104:	60bb      	str	r3, [r7, #8]
    // change to battery value
    BACKUP_VOLTAGE = (temp * BAT_MAX_VOLTAGE) / ADC_MAX_VALUE;
 8021106:	68bb      	ldr	r3, [r7, #8]
 8021108:	ee07 3a90 	vmov	s15, r3
 802110c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021110:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8021144 <HAL_ADC_ConvCpltCallback+0x8c>
 8021114:	ee27 7a87 	vmul.f32	s14, s15, s14
 8021118:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8021148 <HAL_ADC_ConvCpltCallback+0x90>
 802111c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8021120:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021124:	ee17 3a90 	vmov	r3, s15
 8021128:	b29a      	uxth	r2, r3
 802112a:	4b08      	ldr	r3, [pc, #32]	; (802114c <HAL_ADC_ConvCpltCallback+0x94>)
 802112c:	801a      	strh	r2, [r3, #0]
}
 802112e:	bf00      	nop
 8021130:	3710      	adds	r7, #16
 8021132:	46bd      	mov	sp, r7
 8021134:	bd80      	pop	{r7, pc}
 8021136:	bf00      	nop
 8021138:	200004b8 	.word	0x200004b8
 802113c:	51eb851f 	.word	0x51eb851f
 8021140:	2000051c 	.word	0x2000051c
 8021144:	45834000 	.word	0x45834000
 8021148:	457ff000 	.word	0x457ff000
 802114c:	200004b4 	.word	0x200004b4

08021150 <MovingAverage>:

/* Private functions implementation ---------------------------------------------*/
static uint16_t MovingAverage(uint16_t *pBuffer, uint16_t len, uint16_t value) {
 8021150:	b480      	push	{r7}
 8021152:	b083      	sub	sp, #12
 8021154:	af00      	add	r7, sp, #0
 8021156:	6078      	str	r0, [r7, #4]
 8021158:	460b      	mov	r3, r1
 802115a:	807b      	strh	r3, [r7, #2]
 802115c:	4613      	mov	r3, r2
 802115e:	803b      	strh	r3, [r7, #0]
    static uint32_t sum = 0, pos = 0;
    static uint16_t length = 0;

    //Subtract the oldest number from the prev sum, add the new number
    sum = sum - pBuffer[pos] + value;
 8021160:	4b1c      	ldr	r3, [pc, #112]	; (80211d4 <MovingAverage+0x84>)
 8021162:	681b      	ldr	r3, [r3, #0]
 8021164:	4a1c      	ldr	r2, [pc, #112]	; (80211d8 <MovingAverage+0x88>)
 8021166:	6812      	ldr	r2, [r2, #0]
 8021168:	0052      	lsls	r2, r2, #1
 802116a:	6879      	ldr	r1, [r7, #4]
 802116c:	440a      	add	r2, r1
 802116e:	8812      	ldrh	r2, [r2, #0]
 8021170:	1a9a      	subs	r2, r3, r2
 8021172:	883b      	ldrh	r3, [r7, #0]
 8021174:	4413      	add	r3, r2
 8021176:	4a17      	ldr	r2, [pc, #92]	; (80211d4 <MovingAverage+0x84>)
 8021178:	6013      	str	r3, [r2, #0]
    //Assign the nextNum to the position in the array
    pBuffer[pos] = value;
 802117a:	4b17      	ldr	r3, [pc, #92]	; (80211d8 <MovingAverage+0x88>)
 802117c:	681b      	ldr	r3, [r3, #0]
 802117e:	005b      	lsls	r3, r3, #1
 8021180:	687a      	ldr	r2, [r7, #4]
 8021182:	4413      	add	r3, r2
 8021184:	883a      	ldrh	r2, [r7, #0]
 8021186:	801a      	strh	r2, [r3, #0]
    //Increment position
    pos++;
 8021188:	4b13      	ldr	r3, [pc, #76]	; (80211d8 <MovingAverage+0x88>)
 802118a:	681b      	ldr	r3, [r3, #0]
 802118c:	3301      	adds	r3, #1
 802118e:	4a12      	ldr	r2, [pc, #72]	; (80211d8 <MovingAverage+0x88>)
 8021190:	6013      	str	r3, [r2, #0]
    if (pos >= len) {
 8021192:	887a      	ldrh	r2, [r7, #2]
 8021194:	4b10      	ldr	r3, [pc, #64]	; (80211d8 <MovingAverage+0x88>)
 8021196:	681b      	ldr	r3, [r3, #0]
 8021198:	429a      	cmp	r2, r3
 802119a:	d802      	bhi.n	80211a2 <MovingAverage+0x52>
        pos = 0;
 802119c:	4b0e      	ldr	r3, [pc, #56]	; (80211d8 <MovingAverage+0x88>)
 802119e:	2200      	movs	r2, #0
 80211a0:	601a      	str	r2, [r3, #0]
    }
    // calculate filled array
    if (length < len) {
 80211a2:	4b0e      	ldr	r3, [pc, #56]	; (80211dc <MovingAverage+0x8c>)
 80211a4:	881b      	ldrh	r3, [r3, #0]
 80211a6:	887a      	ldrh	r2, [r7, #2]
 80211a8:	429a      	cmp	r2, r3
 80211aa:	d905      	bls.n	80211b8 <MovingAverage+0x68>
        length++;
 80211ac:	4b0b      	ldr	r3, [pc, #44]	; (80211dc <MovingAverage+0x8c>)
 80211ae:	881b      	ldrh	r3, [r3, #0]
 80211b0:	3301      	adds	r3, #1
 80211b2:	b29a      	uxth	r2, r3
 80211b4:	4b09      	ldr	r3, [pc, #36]	; (80211dc <MovingAverage+0x8c>)
 80211b6:	801a      	strh	r2, [r3, #0]
    }
    //return the average
    return sum / length;
 80211b8:	4b06      	ldr	r3, [pc, #24]	; (80211d4 <MovingAverage+0x84>)
 80211ba:	681b      	ldr	r3, [r3, #0]
 80211bc:	4a07      	ldr	r2, [pc, #28]	; (80211dc <MovingAverage+0x8c>)
 80211be:	8812      	ldrh	r2, [r2, #0]
 80211c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80211c4:	b29b      	uxth	r3, r3
}
 80211c6:	4618      	mov	r0, r3
 80211c8:	370c      	adds	r7, #12
 80211ca:	46bd      	mov	sp, r7
 80211cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211d0:	4770      	bx	lr
 80211d2:	bf00      	nop
 80211d4:	20000cec 	.word	0x20000cec
 80211d8:	20000cf0 	.word	0x20000cf0
 80211dc:	20000cf4 	.word	0x20000cf4

080211e0 <FINGER_USART_IrqHandler>:
/* Private functions implementation -------------------------------------------*/
static void FINGER_Check_Buffer(void);
static void FINGER_Fill_Buffer(const void *data, size_t len);

/* Public functions implementation ---------------------------------------------*/
void FINGER_USART_IrqHandler(void) {
 80211e0:	b580      	push	{r7, lr}
 80211e2:	b082      	sub	sp, #8
 80211e4:	af00      	add	r7, sp, #0
    /* if Idle flag is set */
    if (__HAL_UART_GET_FLAG(&huart4, UART_FLAG_IDLE)) {
 80211e6:	4b0c      	ldr	r3, [pc, #48]	; (8021218 <FINGER_USART_IrqHandler+0x38>)
 80211e8:	681b      	ldr	r3, [r3, #0]
 80211ea:	681b      	ldr	r3, [r3, #0]
 80211ec:	f003 0310 	and.w	r3, r3, #16
 80211f0:	2b10      	cmp	r3, #16
 80211f2:	d10c      	bne.n	802120e <FINGER_USART_IrqHandler+0x2e>
        /* Clear idle flag */
        __HAL_UART_CLEAR_IDLEFLAG(&huart4);
 80211f4:	2300      	movs	r3, #0
 80211f6:	607b      	str	r3, [r7, #4]
 80211f8:	4b07      	ldr	r3, [pc, #28]	; (8021218 <FINGER_USART_IrqHandler+0x38>)
 80211fa:	681b      	ldr	r3, [r3, #0]
 80211fc:	681b      	ldr	r3, [r3, #0]
 80211fe:	607b      	str	r3, [r7, #4]
 8021200:	4b05      	ldr	r3, [pc, #20]	; (8021218 <FINGER_USART_IrqHandler+0x38>)
 8021202:	681b      	ldr	r3, [r3, #0]
 8021204:	685b      	ldr	r3, [r3, #4]
 8021206:	607b      	str	r3, [r7, #4]
 8021208:	687b      	ldr	r3, [r7, #4]

        FINGER_Check_Buffer();
 802120a:	f001 f923 	bl	8022454 <FINGER_Check_Buffer>
    }
}
 802120e:	bf00      	nop
 8021210:	3708      	adds	r7, #8
 8021212:	46bd      	mov	sp, r7
 8021214:	bd80      	pop	{r7, pc}
 8021216:	bf00      	nop
 8021218:	20008850 	.word	0x20008850

0802121c <FINGER_DMA_IrqHandler>:

void FINGER_DMA_IrqHandler(void) {
 802121c:	b580      	push	{r7, lr}
 802121e:	af00      	add	r7, sp, #0
    // if the source is HT
    if (__HAL_DMA_GET_IT_SOURCE(&hdma_uart4_rx, DMA_IT_HT)) {
 8021220:	4b9a      	ldr	r3, [pc, #616]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 8021222:	681b      	ldr	r3, [r3, #0]
 8021224:	681b      	ldr	r3, [r3, #0]
 8021226:	f003 0308 	and.w	r3, r3, #8
 802122a:	2b00      	cmp	r3, #0
 802122c:	f000 81bc 	beq.w	80215a8 <FINGER_DMA_IrqHandler+0x38c>
        /* Clear HT flag */
        __HAL_DMA_CLEAR_FLAG(&hdma_uart4_rx, __HAL_DMA_GET_HT_FLAG_INDEX(&hdma_uart4_rx));
 8021230:	4b96      	ldr	r3, [pc, #600]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 8021232:	681b      	ldr	r3, [r3, #0]
 8021234:	461a      	mov	r2, r3
 8021236:	4b96      	ldr	r3, [pc, #600]	; (8021490 <FINGER_DMA_IrqHandler+0x274>)
 8021238:	429a      	cmp	r2, r3
 802123a:	d960      	bls.n	80212fe <FINGER_DMA_IrqHandler+0xe2>
 802123c:	4b93      	ldr	r3, [pc, #588]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 802123e:	681b      	ldr	r3, [r3, #0]
 8021240:	4a94      	ldr	r2, [pc, #592]	; (8021494 <FINGER_DMA_IrqHandler+0x278>)
 8021242:	4293      	cmp	r3, r2
 8021244:	d057      	beq.n	80212f6 <FINGER_DMA_IrqHandler+0xda>
 8021246:	4b91      	ldr	r3, [pc, #580]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 8021248:	681b      	ldr	r3, [r3, #0]
 802124a:	4a93      	ldr	r2, [pc, #588]	; (8021498 <FINGER_DMA_IrqHandler+0x27c>)
 802124c:	4293      	cmp	r3, r2
 802124e:	d050      	beq.n	80212f2 <FINGER_DMA_IrqHandler+0xd6>
 8021250:	4b8e      	ldr	r3, [pc, #568]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 8021252:	681b      	ldr	r3, [r3, #0]
 8021254:	4a91      	ldr	r2, [pc, #580]	; (802149c <FINGER_DMA_IrqHandler+0x280>)
 8021256:	4293      	cmp	r3, r2
 8021258:	d049      	beq.n	80212ee <FINGER_DMA_IrqHandler+0xd2>
 802125a:	4b8c      	ldr	r3, [pc, #560]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 802125c:	681b      	ldr	r3, [r3, #0]
 802125e:	4a90      	ldr	r2, [pc, #576]	; (80214a0 <FINGER_DMA_IrqHandler+0x284>)
 8021260:	4293      	cmp	r3, r2
 8021262:	d042      	beq.n	80212ea <FINGER_DMA_IrqHandler+0xce>
 8021264:	4b89      	ldr	r3, [pc, #548]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 8021266:	681b      	ldr	r3, [r3, #0]
 8021268:	4a8e      	ldr	r2, [pc, #568]	; (80214a4 <FINGER_DMA_IrqHandler+0x288>)
 802126a:	4293      	cmp	r3, r2
 802126c:	d03a      	beq.n	80212e4 <FINGER_DMA_IrqHandler+0xc8>
 802126e:	4b87      	ldr	r3, [pc, #540]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 8021270:	681b      	ldr	r3, [r3, #0]
 8021272:	4a8d      	ldr	r2, [pc, #564]	; (80214a8 <FINGER_DMA_IrqHandler+0x28c>)
 8021274:	4293      	cmp	r3, r2
 8021276:	d032      	beq.n	80212de <FINGER_DMA_IrqHandler+0xc2>
 8021278:	4b84      	ldr	r3, [pc, #528]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 802127a:	681b      	ldr	r3, [r3, #0]
 802127c:	4a8b      	ldr	r2, [pc, #556]	; (80214ac <FINGER_DMA_IrqHandler+0x290>)
 802127e:	4293      	cmp	r3, r2
 8021280:	d02a      	beq.n	80212d8 <FINGER_DMA_IrqHandler+0xbc>
 8021282:	4b82      	ldr	r3, [pc, #520]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 8021284:	681b      	ldr	r3, [r3, #0]
 8021286:	4a8a      	ldr	r2, [pc, #552]	; (80214b0 <FINGER_DMA_IrqHandler+0x294>)
 8021288:	4293      	cmp	r3, r2
 802128a:	d022      	beq.n	80212d2 <FINGER_DMA_IrqHandler+0xb6>
 802128c:	4b7f      	ldr	r3, [pc, #508]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 802128e:	681b      	ldr	r3, [r3, #0]
 8021290:	4a88      	ldr	r2, [pc, #544]	; (80214b4 <FINGER_DMA_IrqHandler+0x298>)
 8021292:	4293      	cmp	r3, r2
 8021294:	d01a      	beq.n	80212cc <FINGER_DMA_IrqHandler+0xb0>
 8021296:	4b7d      	ldr	r3, [pc, #500]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 8021298:	681b      	ldr	r3, [r3, #0]
 802129a:	4a87      	ldr	r2, [pc, #540]	; (80214b8 <FINGER_DMA_IrqHandler+0x29c>)
 802129c:	4293      	cmp	r3, r2
 802129e:	d012      	beq.n	80212c6 <FINGER_DMA_IrqHandler+0xaa>
 80212a0:	4b7a      	ldr	r3, [pc, #488]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 80212a2:	681b      	ldr	r3, [r3, #0]
 80212a4:	4a85      	ldr	r2, [pc, #532]	; (80214bc <FINGER_DMA_IrqHandler+0x2a0>)
 80212a6:	4293      	cmp	r3, r2
 80212a8:	d00a      	beq.n	80212c0 <FINGER_DMA_IrqHandler+0xa4>
 80212aa:	4b78      	ldr	r3, [pc, #480]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 80212ac:	681b      	ldr	r3, [r3, #0]
 80212ae:	4a84      	ldr	r2, [pc, #528]	; (80214c0 <FINGER_DMA_IrqHandler+0x2a4>)
 80212b0:	4293      	cmp	r3, r2
 80212b2:	d102      	bne.n	80212ba <FINGER_DMA_IrqHandler+0x9e>
 80212b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80212b8:	e01e      	b.n	80212f8 <FINGER_DMA_IrqHandler+0xdc>
 80212ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80212be:	e01b      	b.n	80212f8 <FINGER_DMA_IrqHandler+0xdc>
 80212c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80212c4:	e018      	b.n	80212f8 <FINGER_DMA_IrqHandler+0xdc>
 80212c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80212ca:	e015      	b.n	80212f8 <FINGER_DMA_IrqHandler+0xdc>
 80212cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80212d0:	e012      	b.n	80212f8 <FINGER_DMA_IrqHandler+0xdc>
 80212d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80212d6:	e00f      	b.n	80212f8 <FINGER_DMA_IrqHandler+0xdc>
 80212d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80212dc:	e00c      	b.n	80212f8 <FINGER_DMA_IrqHandler+0xdc>
 80212de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80212e2:	e009      	b.n	80212f8 <FINGER_DMA_IrqHandler+0xdc>
 80212e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80212e8:	e006      	b.n	80212f8 <FINGER_DMA_IrqHandler+0xdc>
 80212ea:	2310      	movs	r3, #16
 80212ec:	e004      	b.n	80212f8 <FINGER_DMA_IrqHandler+0xdc>
 80212ee:	2310      	movs	r3, #16
 80212f0:	e002      	b.n	80212f8 <FINGER_DMA_IrqHandler+0xdc>
 80212f2:	2310      	movs	r3, #16
 80212f4:	e000      	b.n	80212f8 <FINGER_DMA_IrqHandler+0xdc>
 80212f6:	2310      	movs	r3, #16
 80212f8:	4a72      	ldr	r2, [pc, #456]	; (80214c4 <FINGER_DMA_IrqHandler+0x2a8>)
 80212fa:	60d3      	str	r3, [r2, #12]
 80212fc:	e150      	b.n	80215a0 <FINGER_DMA_IrqHandler+0x384>
 80212fe:	4b63      	ldr	r3, [pc, #396]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 8021300:	681b      	ldr	r3, [r3, #0]
 8021302:	461a      	mov	r2, r3
 8021304:	4b70      	ldr	r3, [pc, #448]	; (80214c8 <FINGER_DMA_IrqHandler+0x2ac>)
 8021306:	429a      	cmp	r2, r3
 8021308:	d960      	bls.n	80213cc <FINGER_DMA_IrqHandler+0x1b0>
 802130a:	4b60      	ldr	r3, [pc, #384]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 802130c:	681b      	ldr	r3, [r3, #0]
 802130e:	4a61      	ldr	r2, [pc, #388]	; (8021494 <FINGER_DMA_IrqHandler+0x278>)
 8021310:	4293      	cmp	r3, r2
 8021312:	d057      	beq.n	80213c4 <FINGER_DMA_IrqHandler+0x1a8>
 8021314:	4b5d      	ldr	r3, [pc, #372]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 8021316:	681b      	ldr	r3, [r3, #0]
 8021318:	4a5f      	ldr	r2, [pc, #380]	; (8021498 <FINGER_DMA_IrqHandler+0x27c>)
 802131a:	4293      	cmp	r3, r2
 802131c:	d050      	beq.n	80213c0 <FINGER_DMA_IrqHandler+0x1a4>
 802131e:	4b5b      	ldr	r3, [pc, #364]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 8021320:	681b      	ldr	r3, [r3, #0]
 8021322:	4a5e      	ldr	r2, [pc, #376]	; (802149c <FINGER_DMA_IrqHandler+0x280>)
 8021324:	4293      	cmp	r3, r2
 8021326:	d049      	beq.n	80213bc <FINGER_DMA_IrqHandler+0x1a0>
 8021328:	4b58      	ldr	r3, [pc, #352]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 802132a:	681b      	ldr	r3, [r3, #0]
 802132c:	4a5c      	ldr	r2, [pc, #368]	; (80214a0 <FINGER_DMA_IrqHandler+0x284>)
 802132e:	4293      	cmp	r3, r2
 8021330:	d042      	beq.n	80213b8 <FINGER_DMA_IrqHandler+0x19c>
 8021332:	4b56      	ldr	r3, [pc, #344]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 8021334:	681b      	ldr	r3, [r3, #0]
 8021336:	4a5b      	ldr	r2, [pc, #364]	; (80214a4 <FINGER_DMA_IrqHandler+0x288>)
 8021338:	4293      	cmp	r3, r2
 802133a:	d03a      	beq.n	80213b2 <FINGER_DMA_IrqHandler+0x196>
 802133c:	4b53      	ldr	r3, [pc, #332]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 802133e:	681b      	ldr	r3, [r3, #0]
 8021340:	4a59      	ldr	r2, [pc, #356]	; (80214a8 <FINGER_DMA_IrqHandler+0x28c>)
 8021342:	4293      	cmp	r3, r2
 8021344:	d032      	beq.n	80213ac <FINGER_DMA_IrqHandler+0x190>
 8021346:	4b51      	ldr	r3, [pc, #324]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 8021348:	681b      	ldr	r3, [r3, #0]
 802134a:	4a58      	ldr	r2, [pc, #352]	; (80214ac <FINGER_DMA_IrqHandler+0x290>)
 802134c:	4293      	cmp	r3, r2
 802134e:	d02a      	beq.n	80213a6 <FINGER_DMA_IrqHandler+0x18a>
 8021350:	4b4e      	ldr	r3, [pc, #312]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 8021352:	681b      	ldr	r3, [r3, #0]
 8021354:	4a56      	ldr	r2, [pc, #344]	; (80214b0 <FINGER_DMA_IrqHandler+0x294>)
 8021356:	4293      	cmp	r3, r2
 8021358:	d022      	beq.n	80213a0 <FINGER_DMA_IrqHandler+0x184>
 802135a:	4b4c      	ldr	r3, [pc, #304]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 802135c:	681b      	ldr	r3, [r3, #0]
 802135e:	4a55      	ldr	r2, [pc, #340]	; (80214b4 <FINGER_DMA_IrqHandler+0x298>)
 8021360:	4293      	cmp	r3, r2
 8021362:	d01a      	beq.n	802139a <FINGER_DMA_IrqHandler+0x17e>
 8021364:	4b49      	ldr	r3, [pc, #292]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 8021366:	681b      	ldr	r3, [r3, #0]
 8021368:	4a53      	ldr	r2, [pc, #332]	; (80214b8 <FINGER_DMA_IrqHandler+0x29c>)
 802136a:	4293      	cmp	r3, r2
 802136c:	d012      	beq.n	8021394 <FINGER_DMA_IrqHandler+0x178>
 802136e:	4b47      	ldr	r3, [pc, #284]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 8021370:	681b      	ldr	r3, [r3, #0]
 8021372:	4a52      	ldr	r2, [pc, #328]	; (80214bc <FINGER_DMA_IrqHandler+0x2a0>)
 8021374:	4293      	cmp	r3, r2
 8021376:	d00a      	beq.n	802138e <FINGER_DMA_IrqHandler+0x172>
 8021378:	4b44      	ldr	r3, [pc, #272]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 802137a:	681b      	ldr	r3, [r3, #0]
 802137c:	4a50      	ldr	r2, [pc, #320]	; (80214c0 <FINGER_DMA_IrqHandler+0x2a4>)
 802137e:	4293      	cmp	r3, r2
 8021380:	d102      	bne.n	8021388 <FINGER_DMA_IrqHandler+0x16c>
 8021382:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8021386:	e01e      	b.n	80213c6 <FINGER_DMA_IrqHandler+0x1aa>
 8021388:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 802138c:	e01b      	b.n	80213c6 <FINGER_DMA_IrqHandler+0x1aa>
 802138e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8021392:	e018      	b.n	80213c6 <FINGER_DMA_IrqHandler+0x1aa>
 8021394:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8021398:	e015      	b.n	80213c6 <FINGER_DMA_IrqHandler+0x1aa>
 802139a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 802139e:	e012      	b.n	80213c6 <FINGER_DMA_IrqHandler+0x1aa>
 80213a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80213a4:	e00f      	b.n	80213c6 <FINGER_DMA_IrqHandler+0x1aa>
 80213a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80213aa:	e00c      	b.n	80213c6 <FINGER_DMA_IrqHandler+0x1aa>
 80213ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80213b0:	e009      	b.n	80213c6 <FINGER_DMA_IrqHandler+0x1aa>
 80213b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80213b6:	e006      	b.n	80213c6 <FINGER_DMA_IrqHandler+0x1aa>
 80213b8:	2310      	movs	r3, #16
 80213ba:	e004      	b.n	80213c6 <FINGER_DMA_IrqHandler+0x1aa>
 80213bc:	2310      	movs	r3, #16
 80213be:	e002      	b.n	80213c6 <FINGER_DMA_IrqHandler+0x1aa>
 80213c0:	2310      	movs	r3, #16
 80213c2:	e000      	b.n	80213c6 <FINGER_DMA_IrqHandler+0x1aa>
 80213c4:	2310      	movs	r3, #16
 80213c6:	4a3f      	ldr	r2, [pc, #252]	; (80214c4 <FINGER_DMA_IrqHandler+0x2a8>)
 80213c8:	6093      	str	r3, [r2, #8]
 80213ca:	e0e9      	b.n	80215a0 <FINGER_DMA_IrqHandler+0x384>
 80213cc:	4b2f      	ldr	r3, [pc, #188]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 80213ce:	681b      	ldr	r3, [r3, #0]
 80213d0:	461a      	mov	r2, r3
 80213d2:	4b3e      	ldr	r3, [pc, #248]	; (80214cc <FINGER_DMA_IrqHandler+0x2b0>)
 80213d4:	429a      	cmp	r2, r3
 80213d6:	f240 8083 	bls.w	80214e0 <FINGER_DMA_IrqHandler+0x2c4>
 80213da:	4b2c      	ldr	r3, [pc, #176]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 80213dc:	681b      	ldr	r3, [r3, #0]
 80213de:	4a2d      	ldr	r2, [pc, #180]	; (8021494 <FINGER_DMA_IrqHandler+0x278>)
 80213e0:	4293      	cmp	r3, r2
 80213e2:	d079      	beq.n	80214d8 <FINGER_DMA_IrqHandler+0x2bc>
 80213e4:	4b29      	ldr	r3, [pc, #164]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 80213e6:	681b      	ldr	r3, [r3, #0]
 80213e8:	4a2b      	ldr	r2, [pc, #172]	; (8021498 <FINGER_DMA_IrqHandler+0x27c>)
 80213ea:	4293      	cmp	r3, r2
 80213ec:	d072      	beq.n	80214d4 <FINGER_DMA_IrqHandler+0x2b8>
 80213ee:	4b27      	ldr	r3, [pc, #156]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 80213f0:	681b      	ldr	r3, [r3, #0]
 80213f2:	4a2a      	ldr	r2, [pc, #168]	; (802149c <FINGER_DMA_IrqHandler+0x280>)
 80213f4:	4293      	cmp	r3, r2
 80213f6:	d06b      	beq.n	80214d0 <FINGER_DMA_IrqHandler+0x2b4>
 80213f8:	4b24      	ldr	r3, [pc, #144]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 80213fa:	681b      	ldr	r3, [r3, #0]
 80213fc:	4a28      	ldr	r2, [pc, #160]	; (80214a0 <FINGER_DMA_IrqHandler+0x284>)
 80213fe:	4293      	cmp	r3, r2
 8021400:	d042      	beq.n	8021488 <FINGER_DMA_IrqHandler+0x26c>
 8021402:	4b22      	ldr	r3, [pc, #136]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 8021404:	681b      	ldr	r3, [r3, #0]
 8021406:	4a27      	ldr	r2, [pc, #156]	; (80214a4 <FINGER_DMA_IrqHandler+0x288>)
 8021408:	4293      	cmp	r3, r2
 802140a:	d03a      	beq.n	8021482 <FINGER_DMA_IrqHandler+0x266>
 802140c:	4b1f      	ldr	r3, [pc, #124]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 802140e:	681b      	ldr	r3, [r3, #0]
 8021410:	4a25      	ldr	r2, [pc, #148]	; (80214a8 <FINGER_DMA_IrqHandler+0x28c>)
 8021412:	4293      	cmp	r3, r2
 8021414:	d032      	beq.n	802147c <FINGER_DMA_IrqHandler+0x260>
 8021416:	4b1d      	ldr	r3, [pc, #116]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 8021418:	681b      	ldr	r3, [r3, #0]
 802141a:	4a24      	ldr	r2, [pc, #144]	; (80214ac <FINGER_DMA_IrqHandler+0x290>)
 802141c:	4293      	cmp	r3, r2
 802141e:	d02a      	beq.n	8021476 <FINGER_DMA_IrqHandler+0x25a>
 8021420:	4b1a      	ldr	r3, [pc, #104]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 8021422:	681b      	ldr	r3, [r3, #0]
 8021424:	4a22      	ldr	r2, [pc, #136]	; (80214b0 <FINGER_DMA_IrqHandler+0x294>)
 8021426:	4293      	cmp	r3, r2
 8021428:	d022      	beq.n	8021470 <FINGER_DMA_IrqHandler+0x254>
 802142a:	4b18      	ldr	r3, [pc, #96]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 802142c:	681b      	ldr	r3, [r3, #0]
 802142e:	4a21      	ldr	r2, [pc, #132]	; (80214b4 <FINGER_DMA_IrqHandler+0x298>)
 8021430:	4293      	cmp	r3, r2
 8021432:	d01a      	beq.n	802146a <FINGER_DMA_IrqHandler+0x24e>
 8021434:	4b15      	ldr	r3, [pc, #84]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 8021436:	681b      	ldr	r3, [r3, #0]
 8021438:	4a1f      	ldr	r2, [pc, #124]	; (80214b8 <FINGER_DMA_IrqHandler+0x29c>)
 802143a:	4293      	cmp	r3, r2
 802143c:	d012      	beq.n	8021464 <FINGER_DMA_IrqHandler+0x248>
 802143e:	4b13      	ldr	r3, [pc, #76]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 8021440:	681b      	ldr	r3, [r3, #0]
 8021442:	4a1e      	ldr	r2, [pc, #120]	; (80214bc <FINGER_DMA_IrqHandler+0x2a0>)
 8021444:	4293      	cmp	r3, r2
 8021446:	d00a      	beq.n	802145e <FINGER_DMA_IrqHandler+0x242>
 8021448:	4b10      	ldr	r3, [pc, #64]	; (802148c <FINGER_DMA_IrqHandler+0x270>)
 802144a:	681b      	ldr	r3, [r3, #0]
 802144c:	4a1c      	ldr	r2, [pc, #112]	; (80214c0 <FINGER_DMA_IrqHandler+0x2a4>)
 802144e:	4293      	cmp	r3, r2
 8021450:	d102      	bne.n	8021458 <FINGER_DMA_IrqHandler+0x23c>
 8021452:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8021456:	e040      	b.n	80214da <FINGER_DMA_IrqHandler+0x2be>
 8021458:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 802145c:	e03d      	b.n	80214da <FINGER_DMA_IrqHandler+0x2be>
 802145e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8021462:	e03a      	b.n	80214da <FINGER_DMA_IrqHandler+0x2be>
 8021464:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8021468:	e037      	b.n	80214da <FINGER_DMA_IrqHandler+0x2be>
 802146a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 802146e:	e034      	b.n	80214da <FINGER_DMA_IrqHandler+0x2be>
 8021470:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021474:	e031      	b.n	80214da <FINGER_DMA_IrqHandler+0x2be>
 8021476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802147a:	e02e      	b.n	80214da <FINGER_DMA_IrqHandler+0x2be>
 802147c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021480:	e02b      	b.n	80214da <FINGER_DMA_IrqHandler+0x2be>
 8021482:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021486:	e028      	b.n	80214da <FINGER_DMA_IrqHandler+0x2be>
 8021488:	2310      	movs	r3, #16
 802148a:	e026      	b.n	80214da <FINGER_DMA_IrqHandler+0x2be>
 802148c:	2000841c 	.word	0x2000841c
 8021490:	40026458 	.word	0x40026458
 8021494:	40026010 	.word	0x40026010
 8021498:	40026410 	.word	0x40026410
 802149c:	40026070 	.word	0x40026070
 80214a0:	40026470 	.word	0x40026470
 80214a4:	40026028 	.word	0x40026028
 80214a8:	40026428 	.word	0x40026428
 80214ac:	40026088 	.word	0x40026088
 80214b0:	40026488 	.word	0x40026488
 80214b4:	40026040 	.word	0x40026040
 80214b8:	40026440 	.word	0x40026440
 80214bc:	400260a0 	.word	0x400260a0
 80214c0:	400264a0 	.word	0x400264a0
 80214c4:	40026400 	.word	0x40026400
 80214c8:	400260b8 	.word	0x400260b8
 80214cc:	40026058 	.word	0x40026058
 80214d0:	2310      	movs	r3, #16
 80214d2:	e002      	b.n	80214da <FINGER_DMA_IrqHandler+0x2be>
 80214d4:	2310      	movs	r3, #16
 80214d6:	e000      	b.n	80214da <FINGER_DMA_IrqHandler+0x2be>
 80214d8:	2310      	movs	r3, #16
 80214da:	4a9b      	ldr	r2, [pc, #620]	; (8021748 <FINGER_DMA_IrqHandler+0x52c>)
 80214dc:	60d3      	str	r3, [r2, #12]
 80214de:	e05f      	b.n	80215a0 <FINGER_DMA_IrqHandler+0x384>
 80214e0:	4b9a      	ldr	r3, [pc, #616]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 80214e2:	681b      	ldr	r3, [r3, #0]
 80214e4:	4a9a      	ldr	r2, [pc, #616]	; (8021750 <FINGER_DMA_IrqHandler+0x534>)
 80214e6:	4293      	cmp	r3, r2
 80214e8:	d057      	beq.n	802159a <FINGER_DMA_IrqHandler+0x37e>
 80214ea:	4b98      	ldr	r3, [pc, #608]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 80214ec:	681b      	ldr	r3, [r3, #0]
 80214ee:	4a99      	ldr	r2, [pc, #612]	; (8021754 <FINGER_DMA_IrqHandler+0x538>)
 80214f0:	4293      	cmp	r3, r2
 80214f2:	d050      	beq.n	8021596 <FINGER_DMA_IrqHandler+0x37a>
 80214f4:	4b95      	ldr	r3, [pc, #596]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 80214f6:	681b      	ldr	r3, [r3, #0]
 80214f8:	4a97      	ldr	r2, [pc, #604]	; (8021758 <FINGER_DMA_IrqHandler+0x53c>)
 80214fa:	4293      	cmp	r3, r2
 80214fc:	d049      	beq.n	8021592 <FINGER_DMA_IrqHandler+0x376>
 80214fe:	4b93      	ldr	r3, [pc, #588]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 8021500:	681b      	ldr	r3, [r3, #0]
 8021502:	4a96      	ldr	r2, [pc, #600]	; (802175c <FINGER_DMA_IrqHandler+0x540>)
 8021504:	4293      	cmp	r3, r2
 8021506:	d042      	beq.n	802158e <FINGER_DMA_IrqHandler+0x372>
 8021508:	4b90      	ldr	r3, [pc, #576]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 802150a:	681b      	ldr	r3, [r3, #0]
 802150c:	4a94      	ldr	r2, [pc, #592]	; (8021760 <FINGER_DMA_IrqHandler+0x544>)
 802150e:	4293      	cmp	r3, r2
 8021510:	d03a      	beq.n	8021588 <FINGER_DMA_IrqHandler+0x36c>
 8021512:	4b8e      	ldr	r3, [pc, #568]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 8021514:	681b      	ldr	r3, [r3, #0]
 8021516:	4a93      	ldr	r2, [pc, #588]	; (8021764 <FINGER_DMA_IrqHandler+0x548>)
 8021518:	4293      	cmp	r3, r2
 802151a:	d032      	beq.n	8021582 <FINGER_DMA_IrqHandler+0x366>
 802151c:	4b8b      	ldr	r3, [pc, #556]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 802151e:	681b      	ldr	r3, [r3, #0]
 8021520:	4a91      	ldr	r2, [pc, #580]	; (8021768 <FINGER_DMA_IrqHandler+0x54c>)
 8021522:	4293      	cmp	r3, r2
 8021524:	d02a      	beq.n	802157c <FINGER_DMA_IrqHandler+0x360>
 8021526:	4b89      	ldr	r3, [pc, #548]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 8021528:	681b      	ldr	r3, [r3, #0]
 802152a:	4a90      	ldr	r2, [pc, #576]	; (802176c <FINGER_DMA_IrqHandler+0x550>)
 802152c:	4293      	cmp	r3, r2
 802152e:	d022      	beq.n	8021576 <FINGER_DMA_IrqHandler+0x35a>
 8021530:	4b86      	ldr	r3, [pc, #536]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 8021532:	681b      	ldr	r3, [r3, #0]
 8021534:	4a8e      	ldr	r2, [pc, #568]	; (8021770 <FINGER_DMA_IrqHandler+0x554>)
 8021536:	4293      	cmp	r3, r2
 8021538:	d01a      	beq.n	8021570 <FINGER_DMA_IrqHandler+0x354>
 802153a:	4b84      	ldr	r3, [pc, #528]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 802153c:	681b      	ldr	r3, [r3, #0]
 802153e:	4a8d      	ldr	r2, [pc, #564]	; (8021774 <FINGER_DMA_IrqHandler+0x558>)
 8021540:	4293      	cmp	r3, r2
 8021542:	d012      	beq.n	802156a <FINGER_DMA_IrqHandler+0x34e>
 8021544:	4b81      	ldr	r3, [pc, #516]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 8021546:	681b      	ldr	r3, [r3, #0]
 8021548:	4a8b      	ldr	r2, [pc, #556]	; (8021778 <FINGER_DMA_IrqHandler+0x55c>)
 802154a:	4293      	cmp	r3, r2
 802154c:	d00a      	beq.n	8021564 <FINGER_DMA_IrqHandler+0x348>
 802154e:	4b7f      	ldr	r3, [pc, #508]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 8021550:	681b      	ldr	r3, [r3, #0]
 8021552:	4a8a      	ldr	r2, [pc, #552]	; (802177c <FINGER_DMA_IrqHandler+0x560>)
 8021554:	4293      	cmp	r3, r2
 8021556:	d102      	bne.n	802155e <FINGER_DMA_IrqHandler+0x342>
 8021558:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 802155c:	e01e      	b.n	802159c <FINGER_DMA_IrqHandler+0x380>
 802155e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8021562:	e01b      	b.n	802159c <FINGER_DMA_IrqHandler+0x380>
 8021564:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8021568:	e018      	b.n	802159c <FINGER_DMA_IrqHandler+0x380>
 802156a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 802156e:	e015      	b.n	802159c <FINGER_DMA_IrqHandler+0x380>
 8021570:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8021574:	e012      	b.n	802159c <FINGER_DMA_IrqHandler+0x380>
 8021576:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802157a:	e00f      	b.n	802159c <FINGER_DMA_IrqHandler+0x380>
 802157c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021580:	e00c      	b.n	802159c <FINGER_DMA_IrqHandler+0x380>
 8021582:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021586:	e009      	b.n	802159c <FINGER_DMA_IrqHandler+0x380>
 8021588:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802158c:	e006      	b.n	802159c <FINGER_DMA_IrqHandler+0x380>
 802158e:	2310      	movs	r3, #16
 8021590:	e004      	b.n	802159c <FINGER_DMA_IrqHandler+0x380>
 8021592:	2310      	movs	r3, #16
 8021594:	e002      	b.n	802159c <FINGER_DMA_IrqHandler+0x380>
 8021596:	2310      	movs	r3, #16
 8021598:	e000      	b.n	802159c <FINGER_DMA_IrqHandler+0x380>
 802159a:	2310      	movs	r3, #16
 802159c:	4a6a      	ldr	r2, [pc, #424]	; (8021748 <FINGER_DMA_IrqHandler+0x52c>)
 802159e:	6093      	str	r3, [r2, #8]

        FINGER_Check_Buffer();
 80215a0:	f000 ff58 	bl	8022454 <FINGER_Check_Buffer>
        __HAL_DMA_CLEAR_FLAG(&hdma_uart4_rx, __HAL_DMA_GET_DME_FLAG_INDEX(&hdma_uart4_rx));

        /* Start DMA transfer */
        HAL_UART_Receive_DMA(&huart4, (uint8_t*) FINGER_DMA_RX, FINGER_DMA_RX_SZ);
    }
}
 80215a4:	f000 bf0a 	b.w	80223bc <FINGER_DMA_IrqHandler+0x11a0>
    else if (__HAL_DMA_GET_IT_SOURCE(&hdma_uart4_rx, DMA_IT_TC)) {
 80215a8:	4b68      	ldr	r3, [pc, #416]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 80215aa:	681b      	ldr	r3, [r3, #0]
 80215ac:	681b      	ldr	r3, [r3, #0]
 80215ae:	f003 0310 	and.w	r3, r3, #16
 80215b2:	2b00      	cmp	r3, #0
 80215b4:	f000 81bd 	beq.w	8021932 <FINGER_DMA_IrqHandler+0x716>
        __HAL_DMA_CLEAR_FLAG(&hdma_uart4_rx, __HAL_DMA_GET_TC_FLAG_INDEX(&hdma_uart4_rx));
 80215b8:	4b64      	ldr	r3, [pc, #400]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 80215ba:	681b      	ldr	r3, [r3, #0]
 80215bc:	461a      	mov	r2, r3
 80215be:	4b70      	ldr	r3, [pc, #448]	; (8021780 <FINGER_DMA_IrqHandler+0x564>)
 80215c0:	429a      	cmp	r2, r3
 80215c2:	d960      	bls.n	8021686 <FINGER_DMA_IrqHandler+0x46a>
 80215c4:	4b61      	ldr	r3, [pc, #388]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 80215c6:	681b      	ldr	r3, [r3, #0]
 80215c8:	4a61      	ldr	r2, [pc, #388]	; (8021750 <FINGER_DMA_IrqHandler+0x534>)
 80215ca:	4293      	cmp	r3, r2
 80215cc:	d057      	beq.n	802167e <FINGER_DMA_IrqHandler+0x462>
 80215ce:	4b5f      	ldr	r3, [pc, #380]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 80215d0:	681b      	ldr	r3, [r3, #0]
 80215d2:	4a60      	ldr	r2, [pc, #384]	; (8021754 <FINGER_DMA_IrqHandler+0x538>)
 80215d4:	4293      	cmp	r3, r2
 80215d6:	d050      	beq.n	802167a <FINGER_DMA_IrqHandler+0x45e>
 80215d8:	4b5c      	ldr	r3, [pc, #368]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 80215da:	681b      	ldr	r3, [r3, #0]
 80215dc:	4a5e      	ldr	r2, [pc, #376]	; (8021758 <FINGER_DMA_IrqHandler+0x53c>)
 80215de:	4293      	cmp	r3, r2
 80215e0:	d049      	beq.n	8021676 <FINGER_DMA_IrqHandler+0x45a>
 80215e2:	4b5a      	ldr	r3, [pc, #360]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 80215e4:	681b      	ldr	r3, [r3, #0]
 80215e6:	4a5d      	ldr	r2, [pc, #372]	; (802175c <FINGER_DMA_IrqHandler+0x540>)
 80215e8:	4293      	cmp	r3, r2
 80215ea:	d042      	beq.n	8021672 <FINGER_DMA_IrqHandler+0x456>
 80215ec:	4b57      	ldr	r3, [pc, #348]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 80215ee:	681b      	ldr	r3, [r3, #0]
 80215f0:	4a5b      	ldr	r2, [pc, #364]	; (8021760 <FINGER_DMA_IrqHandler+0x544>)
 80215f2:	4293      	cmp	r3, r2
 80215f4:	d03a      	beq.n	802166c <FINGER_DMA_IrqHandler+0x450>
 80215f6:	4b55      	ldr	r3, [pc, #340]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 80215f8:	681b      	ldr	r3, [r3, #0]
 80215fa:	4a5a      	ldr	r2, [pc, #360]	; (8021764 <FINGER_DMA_IrqHandler+0x548>)
 80215fc:	4293      	cmp	r3, r2
 80215fe:	d032      	beq.n	8021666 <FINGER_DMA_IrqHandler+0x44a>
 8021600:	4b52      	ldr	r3, [pc, #328]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 8021602:	681b      	ldr	r3, [r3, #0]
 8021604:	4a58      	ldr	r2, [pc, #352]	; (8021768 <FINGER_DMA_IrqHandler+0x54c>)
 8021606:	4293      	cmp	r3, r2
 8021608:	d02a      	beq.n	8021660 <FINGER_DMA_IrqHandler+0x444>
 802160a:	4b50      	ldr	r3, [pc, #320]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 802160c:	681b      	ldr	r3, [r3, #0]
 802160e:	4a57      	ldr	r2, [pc, #348]	; (802176c <FINGER_DMA_IrqHandler+0x550>)
 8021610:	4293      	cmp	r3, r2
 8021612:	d022      	beq.n	802165a <FINGER_DMA_IrqHandler+0x43e>
 8021614:	4b4d      	ldr	r3, [pc, #308]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 8021616:	681b      	ldr	r3, [r3, #0]
 8021618:	4a55      	ldr	r2, [pc, #340]	; (8021770 <FINGER_DMA_IrqHandler+0x554>)
 802161a:	4293      	cmp	r3, r2
 802161c:	d01a      	beq.n	8021654 <FINGER_DMA_IrqHandler+0x438>
 802161e:	4b4b      	ldr	r3, [pc, #300]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 8021620:	681b      	ldr	r3, [r3, #0]
 8021622:	4a54      	ldr	r2, [pc, #336]	; (8021774 <FINGER_DMA_IrqHandler+0x558>)
 8021624:	4293      	cmp	r3, r2
 8021626:	d012      	beq.n	802164e <FINGER_DMA_IrqHandler+0x432>
 8021628:	4b48      	ldr	r3, [pc, #288]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 802162a:	681b      	ldr	r3, [r3, #0]
 802162c:	4a52      	ldr	r2, [pc, #328]	; (8021778 <FINGER_DMA_IrqHandler+0x55c>)
 802162e:	4293      	cmp	r3, r2
 8021630:	d00a      	beq.n	8021648 <FINGER_DMA_IrqHandler+0x42c>
 8021632:	4b46      	ldr	r3, [pc, #280]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 8021634:	681b      	ldr	r3, [r3, #0]
 8021636:	4a51      	ldr	r2, [pc, #324]	; (802177c <FINGER_DMA_IrqHandler+0x560>)
 8021638:	4293      	cmp	r3, r2
 802163a:	d102      	bne.n	8021642 <FINGER_DMA_IrqHandler+0x426>
 802163c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8021640:	e01e      	b.n	8021680 <FINGER_DMA_IrqHandler+0x464>
 8021642:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8021646:	e01b      	b.n	8021680 <FINGER_DMA_IrqHandler+0x464>
 8021648:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 802164c:	e018      	b.n	8021680 <FINGER_DMA_IrqHandler+0x464>
 802164e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8021652:	e015      	b.n	8021680 <FINGER_DMA_IrqHandler+0x464>
 8021654:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8021658:	e012      	b.n	8021680 <FINGER_DMA_IrqHandler+0x464>
 802165a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 802165e:	e00f      	b.n	8021680 <FINGER_DMA_IrqHandler+0x464>
 8021660:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8021664:	e00c      	b.n	8021680 <FINGER_DMA_IrqHandler+0x464>
 8021666:	f44f 6300 	mov.w	r3, #2048	; 0x800
 802166a:	e009      	b.n	8021680 <FINGER_DMA_IrqHandler+0x464>
 802166c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8021670:	e006      	b.n	8021680 <FINGER_DMA_IrqHandler+0x464>
 8021672:	2320      	movs	r3, #32
 8021674:	e004      	b.n	8021680 <FINGER_DMA_IrqHandler+0x464>
 8021676:	2320      	movs	r3, #32
 8021678:	e002      	b.n	8021680 <FINGER_DMA_IrqHandler+0x464>
 802167a:	2320      	movs	r3, #32
 802167c:	e000      	b.n	8021680 <FINGER_DMA_IrqHandler+0x464>
 802167e:	2320      	movs	r3, #32
 8021680:	4a40      	ldr	r2, [pc, #256]	; (8021784 <FINGER_DMA_IrqHandler+0x568>)
 8021682:	60d3      	str	r3, [r2, #12]
 8021684:	e151      	b.n	802192a <FINGER_DMA_IrqHandler+0x70e>
 8021686:	4b31      	ldr	r3, [pc, #196]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 8021688:	681b      	ldr	r3, [r3, #0]
 802168a:	461a      	mov	r2, r3
 802168c:	4b3e      	ldr	r3, [pc, #248]	; (8021788 <FINGER_DMA_IrqHandler+0x56c>)
 802168e:	429a      	cmp	r2, r3
 8021690:	f240 8084 	bls.w	802179c <FINGER_DMA_IrqHandler+0x580>
 8021694:	4b2d      	ldr	r3, [pc, #180]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 8021696:	681b      	ldr	r3, [r3, #0]
 8021698:	4a2d      	ldr	r2, [pc, #180]	; (8021750 <FINGER_DMA_IrqHandler+0x534>)
 802169a:	4293      	cmp	r3, r2
 802169c:	d07a      	beq.n	8021794 <FINGER_DMA_IrqHandler+0x578>
 802169e:	4b2b      	ldr	r3, [pc, #172]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 80216a0:	681b      	ldr	r3, [r3, #0]
 80216a2:	4a2c      	ldr	r2, [pc, #176]	; (8021754 <FINGER_DMA_IrqHandler+0x538>)
 80216a4:	4293      	cmp	r3, r2
 80216a6:	d073      	beq.n	8021790 <FINGER_DMA_IrqHandler+0x574>
 80216a8:	4b28      	ldr	r3, [pc, #160]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 80216aa:	681b      	ldr	r3, [r3, #0]
 80216ac:	4a2a      	ldr	r2, [pc, #168]	; (8021758 <FINGER_DMA_IrqHandler+0x53c>)
 80216ae:	4293      	cmp	r3, r2
 80216b0:	d06c      	beq.n	802178c <FINGER_DMA_IrqHandler+0x570>
 80216b2:	4b26      	ldr	r3, [pc, #152]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 80216b4:	681b      	ldr	r3, [r3, #0]
 80216b6:	4a29      	ldr	r2, [pc, #164]	; (802175c <FINGER_DMA_IrqHandler+0x540>)
 80216b8:	4293      	cmp	r3, r2
 80216ba:	d042      	beq.n	8021742 <FINGER_DMA_IrqHandler+0x526>
 80216bc:	4b23      	ldr	r3, [pc, #140]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 80216be:	681b      	ldr	r3, [r3, #0]
 80216c0:	4a27      	ldr	r2, [pc, #156]	; (8021760 <FINGER_DMA_IrqHandler+0x544>)
 80216c2:	4293      	cmp	r3, r2
 80216c4:	d03a      	beq.n	802173c <FINGER_DMA_IrqHandler+0x520>
 80216c6:	4b21      	ldr	r3, [pc, #132]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 80216c8:	681b      	ldr	r3, [r3, #0]
 80216ca:	4a26      	ldr	r2, [pc, #152]	; (8021764 <FINGER_DMA_IrqHandler+0x548>)
 80216cc:	4293      	cmp	r3, r2
 80216ce:	d032      	beq.n	8021736 <FINGER_DMA_IrqHandler+0x51a>
 80216d0:	4b1e      	ldr	r3, [pc, #120]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 80216d2:	681b      	ldr	r3, [r3, #0]
 80216d4:	4a24      	ldr	r2, [pc, #144]	; (8021768 <FINGER_DMA_IrqHandler+0x54c>)
 80216d6:	4293      	cmp	r3, r2
 80216d8:	d02a      	beq.n	8021730 <FINGER_DMA_IrqHandler+0x514>
 80216da:	4b1c      	ldr	r3, [pc, #112]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 80216dc:	681b      	ldr	r3, [r3, #0]
 80216de:	4a23      	ldr	r2, [pc, #140]	; (802176c <FINGER_DMA_IrqHandler+0x550>)
 80216e0:	4293      	cmp	r3, r2
 80216e2:	d022      	beq.n	802172a <FINGER_DMA_IrqHandler+0x50e>
 80216e4:	4b19      	ldr	r3, [pc, #100]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 80216e6:	681b      	ldr	r3, [r3, #0]
 80216e8:	4a21      	ldr	r2, [pc, #132]	; (8021770 <FINGER_DMA_IrqHandler+0x554>)
 80216ea:	4293      	cmp	r3, r2
 80216ec:	d01a      	beq.n	8021724 <FINGER_DMA_IrqHandler+0x508>
 80216ee:	4b17      	ldr	r3, [pc, #92]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 80216f0:	681b      	ldr	r3, [r3, #0]
 80216f2:	4a20      	ldr	r2, [pc, #128]	; (8021774 <FINGER_DMA_IrqHandler+0x558>)
 80216f4:	4293      	cmp	r3, r2
 80216f6:	d012      	beq.n	802171e <FINGER_DMA_IrqHandler+0x502>
 80216f8:	4b14      	ldr	r3, [pc, #80]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 80216fa:	681b      	ldr	r3, [r3, #0]
 80216fc:	4a1e      	ldr	r2, [pc, #120]	; (8021778 <FINGER_DMA_IrqHandler+0x55c>)
 80216fe:	4293      	cmp	r3, r2
 8021700:	d00a      	beq.n	8021718 <FINGER_DMA_IrqHandler+0x4fc>
 8021702:	4b12      	ldr	r3, [pc, #72]	; (802174c <FINGER_DMA_IrqHandler+0x530>)
 8021704:	681b      	ldr	r3, [r3, #0]
 8021706:	4a1d      	ldr	r2, [pc, #116]	; (802177c <FINGER_DMA_IrqHandler+0x560>)
 8021708:	4293      	cmp	r3, r2
 802170a:	d102      	bne.n	8021712 <FINGER_DMA_IrqHandler+0x4f6>
 802170c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8021710:	e041      	b.n	8021796 <FINGER_DMA_IrqHandler+0x57a>
 8021712:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8021716:	e03e      	b.n	8021796 <FINGER_DMA_IrqHandler+0x57a>
 8021718:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 802171c:	e03b      	b.n	8021796 <FINGER_DMA_IrqHandler+0x57a>
 802171e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8021722:	e038      	b.n	8021796 <FINGER_DMA_IrqHandler+0x57a>
 8021724:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8021728:	e035      	b.n	8021796 <FINGER_DMA_IrqHandler+0x57a>
 802172a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 802172e:	e032      	b.n	8021796 <FINGER_DMA_IrqHandler+0x57a>
 8021730:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8021734:	e02f      	b.n	8021796 <FINGER_DMA_IrqHandler+0x57a>
 8021736:	f44f 6300 	mov.w	r3, #2048	; 0x800
 802173a:	e02c      	b.n	8021796 <FINGER_DMA_IrqHandler+0x57a>
 802173c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8021740:	e029      	b.n	8021796 <FINGER_DMA_IrqHandler+0x57a>
 8021742:	2320      	movs	r3, #32
 8021744:	e027      	b.n	8021796 <FINGER_DMA_IrqHandler+0x57a>
 8021746:	bf00      	nop
 8021748:	40026000 	.word	0x40026000
 802174c:	2000841c 	.word	0x2000841c
 8021750:	40026010 	.word	0x40026010
 8021754:	40026410 	.word	0x40026410
 8021758:	40026070 	.word	0x40026070
 802175c:	40026470 	.word	0x40026470
 8021760:	40026028 	.word	0x40026028
 8021764:	40026428 	.word	0x40026428
 8021768:	40026088 	.word	0x40026088
 802176c:	40026488 	.word	0x40026488
 8021770:	40026040 	.word	0x40026040
 8021774:	40026440 	.word	0x40026440
 8021778:	400260a0 	.word	0x400260a0
 802177c:	400264a0 	.word	0x400264a0
 8021780:	40026458 	.word	0x40026458
 8021784:	40026400 	.word	0x40026400
 8021788:	400260b8 	.word	0x400260b8
 802178c:	2320      	movs	r3, #32
 802178e:	e002      	b.n	8021796 <FINGER_DMA_IrqHandler+0x57a>
 8021790:	2320      	movs	r3, #32
 8021792:	e000      	b.n	8021796 <FINGER_DMA_IrqHandler+0x57a>
 8021794:	2320      	movs	r3, #32
 8021796:	4a9b      	ldr	r2, [pc, #620]	; (8021a04 <FINGER_DMA_IrqHandler+0x7e8>)
 8021798:	6093      	str	r3, [r2, #8]
 802179a:	e0c6      	b.n	802192a <FINGER_DMA_IrqHandler+0x70e>
 802179c:	4b9a      	ldr	r3, [pc, #616]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 802179e:	681b      	ldr	r3, [r3, #0]
 80217a0:	461a      	mov	r2, r3
 80217a2:	4b9a      	ldr	r3, [pc, #616]	; (8021a0c <FINGER_DMA_IrqHandler+0x7f0>)
 80217a4:	429a      	cmp	r2, r3
 80217a6:	d960      	bls.n	802186a <FINGER_DMA_IrqHandler+0x64e>
 80217a8:	4b97      	ldr	r3, [pc, #604]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 80217aa:	681b      	ldr	r3, [r3, #0]
 80217ac:	4a98      	ldr	r2, [pc, #608]	; (8021a10 <FINGER_DMA_IrqHandler+0x7f4>)
 80217ae:	4293      	cmp	r3, r2
 80217b0:	d057      	beq.n	8021862 <FINGER_DMA_IrqHandler+0x646>
 80217b2:	4b95      	ldr	r3, [pc, #596]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 80217b4:	681b      	ldr	r3, [r3, #0]
 80217b6:	4a97      	ldr	r2, [pc, #604]	; (8021a14 <FINGER_DMA_IrqHandler+0x7f8>)
 80217b8:	4293      	cmp	r3, r2
 80217ba:	d050      	beq.n	802185e <FINGER_DMA_IrqHandler+0x642>
 80217bc:	4b92      	ldr	r3, [pc, #584]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 80217be:	681b      	ldr	r3, [r3, #0]
 80217c0:	4a95      	ldr	r2, [pc, #596]	; (8021a18 <FINGER_DMA_IrqHandler+0x7fc>)
 80217c2:	4293      	cmp	r3, r2
 80217c4:	d049      	beq.n	802185a <FINGER_DMA_IrqHandler+0x63e>
 80217c6:	4b90      	ldr	r3, [pc, #576]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 80217c8:	681b      	ldr	r3, [r3, #0]
 80217ca:	4a94      	ldr	r2, [pc, #592]	; (8021a1c <FINGER_DMA_IrqHandler+0x800>)
 80217cc:	4293      	cmp	r3, r2
 80217ce:	d042      	beq.n	8021856 <FINGER_DMA_IrqHandler+0x63a>
 80217d0:	4b8d      	ldr	r3, [pc, #564]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 80217d2:	681b      	ldr	r3, [r3, #0]
 80217d4:	4a92      	ldr	r2, [pc, #584]	; (8021a20 <FINGER_DMA_IrqHandler+0x804>)
 80217d6:	4293      	cmp	r3, r2
 80217d8:	d03a      	beq.n	8021850 <FINGER_DMA_IrqHandler+0x634>
 80217da:	4b8b      	ldr	r3, [pc, #556]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 80217dc:	681b      	ldr	r3, [r3, #0]
 80217de:	4a91      	ldr	r2, [pc, #580]	; (8021a24 <FINGER_DMA_IrqHandler+0x808>)
 80217e0:	4293      	cmp	r3, r2
 80217e2:	d032      	beq.n	802184a <FINGER_DMA_IrqHandler+0x62e>
 80217e4:	4b88      	ldr	r3, [pc, #544]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 80217e6:	681b      	ldr	r3, [r3, #0]
 80217e8:	4a8f      	ldr	r2, [pc, #572]	; (8021a28 <FINGER_DMA_IrqHandler+0x80c>)
 80217ea:	4293      	cmp	r3, r2
 80217ec:	d02a      	beq.n	8021844 <FINGER_DMA_IrqHandler+0x628>
 80217ee:	4b86      	ldr	r3, [pc, #536]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 80217f0:	681b      	ldr	r3, [r3, #0]
 80217f2:	4a8e      	ldr	r2, [pc, #568]	; (8021a2c <FINGER_DMA_IrqHandler+0x810>)
 80217f4:	4293      	cmp	r3, r2
 80217f6:	d022      	beq.n	802183e <FINGER_DMA_IrqHandler+0x622>
 80217f8:	4b83      	ldr	r3, [pc, #524]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 80217fa:	681b      	ldr	r3, [r3, #0]
 80217fc:	4a8c      	ldr	r2, [pc, #560]	; (8021a30 <FINGER_DMA_IrqHandler+0x814>)
 80217fe:	4293      	cmp	r3, r2
 8021800:	d01a      	beq.n	8021838 <FINGER_DMA_IrqHandler+0x61c>
 8021802:	4b81      	ldr	r3, [pc, #516]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 8021804:	681b      	ldr	r3, [r3, #0]
 8021806:	4a8b      	ldr	r2, [pc, #556]	; (8021a34 <FINGER_DMA_IrqHandler+0x818>)
 8021808:	4293      	cmp	r3, r2
 802180a:	d012      	beq.n	8021832 <FINGER_DMA_IrqHandler+0x616>
 802180c:	4b7e      	ldr	r3, [pc, #504]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 802180e:	681b      	ldr	r3, [r3, #0]
 8021810:	4a89      	ldr	r2, [pc, #548]	; (8021a38 <FINGER_DMA_IrqHandler+0x81c>)
 8021812:	4293      	cmp	r3, r2
 8021814:	d00a      	beq.n	802182c <FINGER_DMA_IrqHandler+0x610>
 8021816:	4b7c      	ldr	r3, [pc, #496]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 8021818:	681b      	ldr	r3, [r3, #0]
 802181a:	4a88      	ldr	r2, [pc, #544]	; (8021a3c <FINGER_DMA_IrqHandler+0x820>)
 802181c:	4293      	cmp	r3, r2
 802181e:	d102      	bne.n	8021826 <FINGER_DMA_IrqHandler+0x60a>
 8021820:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8021824:	e01e      	b.n	8021864 <FINGER_DMA_IrqHandler+0x648>
 8021826:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 802182a:	e01b      	b.n	8021864 <FINGER_DMA_IrqHandler+0x648>
 802182c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8021830:	e018      	b.n	8021864 <FINGER_DMA_IrqHandler+0x648>
 8021832:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8021836:	e015      	b.n	8021864 <FINGER_DMA_IrqHandler+0x648>
 8021838:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 802183c:	e012      	b.n	8021864 <FINGER_DMA_IrqHandler+0x648>
 802183e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8021842:	e00f      	b.n	8021864 <FINGER_DMA_IrqHandler+0x648>
 8021844:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8021848:	e00c      	b.n	8021864 <FINGER_DMA_IrqHandler+0x648>
 802184a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 802184e:	e009      	b.n	8021864 <FINGER_DMA_IrqHandler+0x648>
 8021850:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8021854:	e006      	b.n	8021864 <FINGER_DMA_IrqHandler+0x648>
 8021856:	2320      	movs	r3, #32
 8021858:	e004      	b.n	8021864 <FINGER_DMA_IrqHandler+0x648>
 802185a:	2320      	movs	r3, #32
 802185c:	e002      	b.n	8021864 <FINGER_DMA_IrqHandler+0x648>
 802185e:	2320      	movs	r3, #32
 8021860:	e000      	b.n	8021864 <FINGER_DMA_IrqHandler+0x648>
 8021862:	2320      	movs	r3, #32
 8021864:	4a76      	ldr	r2, [pc, #472]	; (8021a40 <FINGER_DMA_IrqHandler+0x824>)
 8021866:	60d3      	str	r3, [r2, #12]
 8021868:	e05f      	b.n	802192a <FINGER_DMA_IrqHandler+0x70e>
 802186a:	4b67      	ldr	r3, [pc, #412]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 802186c:	681b      	ldr	r3, [r3, #0]
 802186e:	4a68      	ldr	r2, [pc, #416]	; (8021a10 <FINGER_DMA_IrqHandler+0x7f4>)
 8021870:	4293      	cmp	r3, r2
 8021872:	d057      	beq.n	8021924 <FINGER_DMA_IrqHandler+0x708>
 8021874:	4b64      	ldr	r3, [pc, #400]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 8021876:	681b      	ldr	r3, [r3, #0]
 8021878:	4a66      	ldr	r2, [pc, #408]	; (8021a14 <FINGER_DMA_IrqHandler+0x7f8>)
 802187a:	4293      	cmp	r3, r2
 802187c:	d050      	beq.n	8021920 <FINGER_DMA_IrqHandler+0x704>
 802187e:	4b62      	ldr	r3, [pc, #392]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 8021880:	681b      	ldr	r3, [r3, #0]
 8021882:	4a65      	ldr	r2, [pc, #404]	; (8021a18 <FINGER_DMA_IrqHandler+0x7fc>)
 8021884:	4293      	cmp	r3, r2
 8021886:	d049      	beq.n	802191c <FINGER_DMA_IrqHandler+0x700>
 8021888:	4b5f      	ldr	r3, [pc, #380]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 802188a:	681b      	ldr	r3, [r3, #0]
 802188c:	4a63      	ldr	r2, [pc, #396]	; (8021a1c <FINGER_DMA_IrqHandler+0x800>)
 802188e:	4293      	cmp	r3, r2
 8021890:	d042      	beq.n	8021918 <FINGER_DMA_IrqHandler+0x6fc>
 8021892:	4b5d      	ldr	r3, [pc, #372]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 8021894:	681b      	ldr	r3, [r3, #0]
 8021896:	4a62      	ldr	r2, [pc, #392]	; (8021a20 <FINGER_DMA_IrqHandler+0x804>)
 8021898:	4293      	cmp	r3, r2
 802189a:	d03a      	beq.n	8021912 <FINGER_DMA_IrqHandler+0x6f6>
 802189c:	4b5a      	ldr	r3, [pc, #360]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 802189e:	681b      	ldr	r3, [r3, #0]
 80218a0:	4a60      	ldr	r2, [pc, #384]	; (8021a24 <FINGER_DMA_IrqHandler+0x808>)
 80218a2:	4293      	cmp	r3, r2
 80218a4:	d032      	beq.n	802190c <FINGER_DMA_IrqHandler+0x6f0>
 80218a6:	4b58      	ldr	r3, [pc, #352]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 80218a8:	681b      	ldr	r3, [r3, #0]
 80218aa:	4a5f      	ldr	r2, [pc, #380]	; (8021a28 <FINGER_DMA_IrqHandler+0x80c>)
 80218ac:	4293      	cmp	r3, r2
 80218ae:	d02a      	beq.n	8021906 <FINGER_DMA_IrqHandler+0x6ea>
 80218b0:	4b55      	ldr	r3, [pc, #340]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 80218b2:	681b      	ldr	r3, [r3, #0]
 80218b4:	4a5d      	ldr	r2, [pc, #372]	; (8021a2c <FINGER_DMA_IrqHandler+0x810>)
 80218b6:	4293      	cmp	r3, r2
 80218b8:	d022      	beq.n	8021900 <FINGER_DMA_IrqHandler+0x6e4>
 80218ba:	4b53      	ldr	r3, [pc, #332]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 80218bc:	681b      	ldr	r3, [r3, #0]
 80218be:	4a5c      	ldr	r2, [pc, #368]	; (8021a30 <FINGER_DMA_IrqHandler+0x814>)
 80218c0:	4293      	cmp	r3, r2
 80218c2:	d01a      	beq.n	80218fa <FINGER_DMA_IrqHandler+0x6de>
 80218c4:	4b50      	ldr	r3, [pc, #320]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 80218c6:	681b      	ldr	r3, [r3, #0]
 80218c8:	4a5a      	ldr	r2, [pc, #360]	; (8021a34 <FINGER_DMA_IrqHandler+0x818>)
 80218ca:	4293      	cmp	r3, r2
 80218cc:	d012      	beq.n	80218f4 <FINGER_DMA_IrqHandler+0x6d8>
 80218ce:	4b4e      	ldr	r3, [pc, #312]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 80218d0:	681b      	ldr	r3, [r3, #0]
 80218d2:	4a59      	ldr	r2, [pc, #356]	; (8021a38 <FINGER_DMA_IrqHandler+0x81c>)
 80218d4:	4293      	cmp	r3, r2
 80218d6:	d00a      	beq.n	80218ee <FINGER_DMA_IrqHandler+0x6d2>
 80218d8:	4b4b      	ldr	r3, [pc, #300]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 80218da:	681b      	ldr	r3, [r3, #0]
 80218dc:	4a57      	ldr	r2, [pc, #348]	; (8021a3c <FINGER_DMA_IrqHandler+0x820>)
 80218de:	4293      	cmp	r3, r2
 80218e0:	d102      	bne.n	80218e8 <FINGER_DMA_IrqHandler+0x6cc>
 80218e2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80218e6:	e01e      	b.n	8021926 <FINGER_DMA_IrqHandler+0x70a>
 80218e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80218ec:	e01b      	b.n	8021926 <FINGER_DMA_IrqHandler+0x70a>
 80218ee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80218f2:	e018      	b.n	8021926 <FINGER_DMA_IrqHandler+0x70a>
 80218f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80218f8:	e015      	b.n	8021926 <FINGER_DMA_IrqHandler+0x70a>
 80218fa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80218fe:	e012      	b.n	8021926 <FINGER_DMA_IrqHandler+0x70a>
 8021900:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8021904:	e00f      	b.n	8021926 <FINGER_DMA_IrqHandler+0x70a>
 8021906:	f44f 6300 	mov.w	r3, #2048	; 0x800
 802190a:	e00c      	b.n	8021926 <FINGER_DMA_IrqHandler+0x70a>
 802190c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8021910:	e009      	b.n	8021926 <FINGER_DMA_IrqHandler+0x70a>
 8021912:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8021916:	e006      	b.n	8021926 <FINGER_DMA_IrqHandler+0x70a>
 8021918:	2320      	movs	r3, #32
 802191a:	e004      	b.n	8021926 <FINGER_DMA_IrqHandler+0x70a>
 802191c:	2320      	movs	r3, #32
 802191e:	e002      	b.n	8021926 <FINGER_DMA_IrqHandler+0x70a>
 8021920:	2320      	movs	r3, #32
 8021922:	e000      	b.n	8021926 <FINGER_DMA_IrqHandler+0x70a>
 8021924:	2320      	movs	r3, #32
 8021926:	4a46      	ldr	r2, [pc, #280]	; (8021a40 <FINGER_DMA_IrqHandler+0x824>)
 8021928:	6093      	str	r3, [r2, #8]
        FINGER_Check_Buffer();
 802192a:	f000 fd93 	bl	8022454 <FINGER_Check_Buffer>
}
 802192e:	f000 bd45 	b.w	80223bc <FINGER_DMA_IrqHandler+0x11a0>
        __HAL_DMA_CLEAR_FLAG(&hdma_uart4_rx, __HAL_DMA_GET_TE_FLAG_INDEX(&hdma_uart4_rx));
 8021932:	4b35      	ldr	r3, [pc, #212]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 8021934:	681b      	ldr	r3, [r3, #0]
 8021936:	461a      	mov	r2, r3
 8021938:	4b42      	ldr	r3, [pc, #264]	; (8021a44 <FINGER_DMA_IrqHandler+0x828>)
 802193a:	429a      	cmp	r2, r3
 802193c:	f240 8084 	bls.w	8021a48 <FINGER_DMA_IrqHandler+0x82c>
 8021940:	4b31      	ldr	r3, [pc, #196]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 8021942:	681b      	ldr	r3, [r3, #0]
 8021944:	4a32      	ldr	r2, [pc, #200]	; (8021a10 <FINGER_DMA_IrqHandler+0x7f4>)
 8021946:	4293      	cmp	r3, r2
 8021948:	d057      	beq.n	80219fa <FINGER_DMA_IrqHandler+0x7de>
 802194a:	4b2f      	ldr	r3, [pc, #188]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 802194c:	681b      	ldr	r3, [r3, #0]
 802194e:	4a31      	ldr	r2, [pc, #196]	; (8021a14 <FINGER_DMA_IrqHandler+0x7f8>)
 8021950:	4293      	cmp	r3, r2
 8021952:	d050      	beq.n	80219f6 <FINGER_DMA_IrqHandler+0x7da>
 8021954:	4b2c      	ldr	r3, [pc, #176]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 8021956:	681b      	ldr	r3, [r3, #0]
 8021958:	4a2f      	ldr	r2, [pc, #188]	; (8021a18 <FINGER_DMA_IrqHandler+0x7fc>)
 802195a:	4293      	cmp	r3, r2
 802195c:	d049      	beq.n	80219f2 <FINGER_DMA_IrqHandler+0x7d6>
 802195e:	4b2a      	ldr	r3, [pc, #168]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 8021960:	681b      	ldr	r3, [r3, #0]
 8021962:	4a2e      	ldr	r2, [pc, #184]	; (8021a1c <FINGER_DMA_IrqHandler+0x800>)
 8021964:	4293      	cmp	r3, r2
 8021966:	d042      	beq.n	80219ee <FINGER_DMA_IrqHandler+0x7d2>
 8021968:	4b27      	ldr	r3, [pc, #156]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 802196a:	681b      	ldr	r3, [r3, #0]
 802196c:	4a2c      	ldr	r2, [pc, #176]	; (8021a20 <FINGER_DMA_IrqHandler+0x804>)
 802196e:	4293      	cmp	r3, r2
 8021970:	d03a      	beq.n	80219e8 <FINGER_DMA_IrqHandler+0x7cc>
 8021972:	4b25      	ldr	r3, [pc, #148]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 8021974:	681b      	ldr	r3, [r3, #0]
 8021976:	4a2b      	ldr	r2, [pc, #172]	; (8021a24 <FINGER_DMA_IrqHandler+0x808>)
 8021978:	4293      	cmp	r3, r2
 802197a:	d032      	beq.n	80219e2 <FINGER_DMA_IrqHandler+0x7c6>
 802197c:	4b22      	ldr	r3, [pc, #136]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 802197e:	681b      	ldr	r3, [r3, #0]
 8021980:	4a29      	ldr	r2, [pc, #164]	; (8021a28 <FINGER_DMA_IrqHandler+0x80c>)
 8021982:	4293      	cmp	r3, r2
 8021984:	d02a      	beq.n	80219dc <FINGER_DMA_IrqHandler+0x7c0>
 8021986:	4b20      	ldr	r3, [pc, #128]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 8021988:	681b      	ldr	r3, [r3, #0]
 802198a:	4a28      	ldr	r2, [pc, #160]	; (8021a2c <FINGER_DMA_IrqHandler+0x810>)
 802198c:	4293      	cmp	r3, r2
 802198e:	d022      	beq.n	80219d6 <FINGER_DMA_IrqHandler+0x7ba>
 8021990:	4b1d      	ldr	r3, [pc, #116]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 8021992:	681b      	ldr	r3, [r3, #0]
 8021994:	4a26      	ldr	r2, [pc, #152]	; (8021a30 <FINGER_DMA_IrqHandler+0x814>)
 8021996:	4293      	cmp	r3, r2
 8021998:	d01a      	beq.n	80219d0 <FINGER_DMA_IrqHandler+0x7b4>
 802199a:	4b1b      	ldr	r3, [pc, #108]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 802199c:	681b      	ldr	r3, [r3, #0]
 802199e:	4a25      	ldr	r2, [pc, #148]	; (8021a34 <FINGER_DMA_IrqHandler+0x818>)
 80219a0:	4293      	cmp	r3, r2
 80219a2:	d012      	beq.n	80219ca <FINGER_DMA_IrqHandler+0x7ae>
 80219a4:	4b18      	ldr	r3, [pc, #96]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 80219a6:	681b      	ldr	r3, [r3, #0]
 80219a8:	4a23      	ldr	r2, [pc, #140]	; (8021a38 <FINGER_DMA_IrqHandler+0x81c>)
 80219aa:	4293      	cmp	r3, r2
 80219ac:	d00a      	beq.n	80219c4 <FINGER_DMA_IrqHandler+0x7a8>
 80219ae:	4b16      	ldr	r3, [pc, #88]	; (8021a08 <FINGER_DMA_IrqHandler+0x7ec>)
 80219b0:	681b      	ldr	r3, [r3, #0]
 80219b2:	4a22      	ldr	r2, [pc, #136]	; (8021a3c <FINGER_DMA_IrqHandler+0x820>)
 80219b4:	4293      	cmp	r3, r2
 80219b6:	d102      	bne.n	80219be <FINGER_DMA_IrqHandler+0x7a2>
 80219b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80219bc:	e01e      	b.n	80219fc <FINGER_DMA_IrqHandler+0x7e0>
 80219be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80219c2:	e01b      	b.n	80219fc <FINGER_DMA_IrqHandler+0x7e0>
 80219c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80219c8:	e018      	b.n	80219fc <FINGER_DMA_IrqHandler+0x7e0>
 80219ca:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80219ce:	e015      	b.n	80219fc <FINGER_DMA_IrqHandler+0x7e0>
 80219d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80219d4:	e012      	b.n	80219fc <FINGER_DMA_IrqHandler+0x7e0>
 80219d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80219da:	e00f      	b.n	80219fc <FINGER_DMA_IrqHandler+0x7e0>
 80219dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80219e0:	e00c      	b.n	80219fc <FINGER_DMA_IrqHandler+0x7e0>
 80219e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80219e6:	e009      	b.n	80219fc <FINGER_DMA_IrqHandler+0x7e0>
 80219e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80219ec:	e006      	b.n	80219fc <FINGER_DMA_IrqHandler+0x7e0>
 80219ee:	2308      	movs	r3, #8
 80219f0:	e004      	b.n	80219fc <FINGER_DMA_IrqHandler+0x7e0>
 80219f2:	2308      	movs	r3, #8
 80219f4:	e002      	b.n	80219fc <FINGER_DMA_IrqHandler+0x7e0>
 80219f6:	2308      	movs	r3, #8
 80219f8:	e000      	b.n	80219fc <FINGER_DMA_IrqHandler+0x7e0>
 80219fa:	2308      	movs	r3, #8
 80219fc:	4a01      	ldr	r2, [pc, #4]	; (8021a04 <FINGER_DMA_IrqHandler+0x7e8>)
 80219fe:	60d3      	str	r3, [r2, #12]
 8021a00:	e173      	b.n	8021cea <FINGER_DMA_IrqHandler+0xace>
 8021a02:	bf00      	nop
 8021a04:	40026400 	.word	0x40026400
 8021a08:	2000841c 	.word	0x2000841c
 8021a0c:	40026058 	.word	0x40026058
 8021a10:	40026010 	.word	0x40026010
 8021a14:	40026410 	.word	0x40026410
 8021a18:	40026070 	.word	0x40026070
 8021a1c:	40026470 	.word	0x40026470
 8021a20:	40026028 	.word	0x40026028
 8021a24:	40026428 	.word	0x40026428
 8021a28:	40026088 	.word	0x40026088
 8021a2c:	40026488 	.word	0x40026488
 8021a30:	40026040 	.word	0x40026040
 8021a34:	40026440 	.word	0x40026440
 8021a38:	400260a0 	.word	0x400260a0
 8021a3c:	400264a0 	.word	0x400264a0
 8021a40:	40026000 	.word	0x40026000
 8021a44:	40026458 	.word	0x40026458
 8021a48:	4b95      	ldr	r3, [pc, #596]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021a4a:	681b      	ldr	r3, [r3, #0]
 8021a4c:	461a      	mov	r2, r3
 8021a4e:	4b95      	ldr	r3, [pc, #596]	; (8021ca4 <FINGER_DMA_IrqHandler+0xa88>)
 8021a50:	429a      	cmp	r2, r3
 8021a52:	d960      	bls.n	8021b16 <FINGER_DMA_IrqHandler+0x8fa>
 8021a54:	4b92      	ldr	r3, [pc, #584]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021a56:	681b      	ldr	r3, [r3, #0]
 8021a58:	4a93      	ldr	r2, [pc, #588]	; (8021ca8 <FINGER_DMA_IrqHandler+0xa8c>)
 8021a5a:	4293      	cmp	r3, r2
 8021a5c:	d057      	beq.n	8021b0e <FINGER_DMA_IrqHandler+0x8f2>
 8021a5e:	4b90      	ldr	r3, [pc, #576]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021a60:	681b      	ldr	r3, [r3, #0]
 8021a62:	4a92      	ldr	r2, [pc, #584]	; (8021cac <FINGER_DMA_IrqHandler+0xa90>)
 8021a64:	4293      	cmp	r3, r2
 8021a66:	d050      	beq.n	8021b0a <FINGER_DMA_IrqHandler+0x8ee>
 8021a68:	4b8d      	ldr	r3, [pc, #564]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021a6a:	681b      	ldr	r3, [r3, #0]
 8021a6c:	4a90      	ldr	r2, [pc, #576]	; (8021cb0 <FINGER_DMA_IrqHandler+0xa94>)
 8021a6e:	4293      	cmp	r3, r2
 8021a70:	d049      	beq.n	8021b06 <FINGER_DMA_IrqHandler+0x8ea>
 8021a72:	4b8b      	ldr	r3, [pc, #556]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021a74:	681b      	ldr	r3, [r3, #0]
 8021a76:	4a8f      	ldr	r2, [pc, #572]	; (8021cb4 <FINGER_DMA_IrqHandler+0xa98>)
 8021a78:	4293      	cmp	r3, r2
 8021a7a:	d042      	beq.n	8021b02 <FINGER_DMA_IrqHandler+0x8e6>
 8021a7c:	4b88      	ldr	r3, [pc, #544]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021a7e:	681b      	ldr	r3, [r3, #0]
 8021a80:	4a8d      	ldr	r2, [pc, #564]	; (8021cb8 <FINGER_DMA_IrqHandler+0xa9c>)
 8021a82:	4293      	cmp	r3, r2
 8021a84:	d03a      	beq.n	8021afc <FINGER_DMA_IrqHandler+0x8e0>
 8021a86:	4b86      	ldr	r3, [pc, #536]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021a88:	681b      	ldr	r3, [r3, #0]
 8021a8a:	4a8c      	ldr	r2, [pc, #560]	; (8021cbc <FINGER_DMA_IrqHandler+0xaa0>)
 8021a8c:	4293      	cmp	r3, r2
 8021a8e:	d032      	beq.n	8021af6 <FINGER_DMA_IrqHandler+0x8da>
 8021a90:	4b83      	ldr	r3, [pc, #524]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021a92:	681b      	ldr	r3, [r3, #0]
 8021a94:	4a8a      	ldr	r2, [pc, #552]	; (8021cc0 <FINGER_DMA_IrqHandler+0xaa4>)
 8021a96:	4293      	cmp	r3, r2
 8021a98:	d02a      	beq.n	8021af0 <FINGER_DMA_IrqHandler+0x8d4>
 8021a9a:	4b81      	ldr	r3, [pc, #516]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021a9c:	681b      	ldr	r3, [r3, #0]
 8021a9e:	4a89      	ldr	r2, [pc, #548]	; (8021cc4 <FINGER_DMA_IrqHandler+0xaa8>)
 8021aa0:	4293      	cmp	r3, r2
 8021aa2:	d022      	beq.n	8021aea <FINGER_DMA_IrqHandler+0x8ce>
 8021aa4:	4b7e      	ldr	r3, [pc, #504]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021aa6:	681b      	ldr	r3, [r3, #0]
 8021aa8:	4a87      	ldr	r2, [pc, #540]	; (8021cc8 <FINGER_DMA_IrqHandler+0xaac>)
 8021aaa:	4293      	cmp	r3, r2
 8021aac:	d01a      	beq.n	8021ae4 <FINGER_DMA_IrqHandler+0x8c8>
 8021aae:	4b7c      	ldr	r3, [pc, #496]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021ab0:	681b      	ldr	r3, [r3, #0]
 8021ab2:	4a86      	ldr	r2, [pc, #536]	; (8021ccc <FINGER_DMA_IrqHandler+0xab0>)
 8021ab4:	4293      	cmp	r3, r2
 8021ab6:	d012      	beq.n	8021ade <FINGER_DMA_IrqHandler+0x8c2>
 8021ab8:	4b79      	ldr	r3, [pc, #484]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021aba:	681b      	ldr	r3, [r3, #0]
 8021abc:	4a84      	ldr	r2, [pc, #528]	; (8021cd0 <FINGER_DMA_IrqHandler+0xab4>)
 8021abe:	4293      	cmp	r3, r2
 8021ac0:	d00a      	beq.n	8021ad8 <FINGER_DMA_IrqHandler+0x8bc>
 8021ac2:	4b77      	ldr	r3, [pc, #476]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021ac4:	681b      	ldr	r3, [r3, #0]
 8021ac6:	4a83      	ldr	r2, [pc, #524]	; (8021cd4 <FINGER_DMA_IrqHandler+0xab8>)
 8021ac8:	4293      	cmp	r3, r2
 8021aca:	d102      	bne.n	8021ad2 <FINGER_DMA_IrqHandler+0x8b6>
 8021acc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8021ad0:	e01e      	b.n	8021b10 <FINGER_DMA_IrqHandler+0x8f4>
 8021ad2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8021ad6:	e01b      	b.n	8021b10 <FINGER_DMA_IrqHandler+0x8f4>
 8021ad8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8021adc:	e018      	b.n	8021b10 <FINGER_DMA_IrqHandler+0x8f4>
 8021ade:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8021ae2:	e015      	b.n	8021b10 <FINGER_DMA_IrqHandler+0x8f4>
 8021ae4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8021ae8:	e012      	b.n	8021b10 <FINGER_DMA_IrqHandler+0x8f4>
 8021aea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8021aee:	e00f      	b.n	8021b10 <FINGER_DMA_IrqHandler+0x8f4>
 8021af0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8021af4:	e00c      	b.n	8021b10 <FINGER_DMA_IrqHandler+0x8f4>
 8021af6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8021afa:	e009      	b.n	8021b10 <FINGER_DMA_IrqHandler+0x8f4>
 8021afc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8021b00:	e006      	b.n	8021b10 <FINGER_DMA_IrqHandler+0x8f4>
 8021b02:	2308      	movs	r3, #8
 8021b04:	e004      	b.n	8021b10 <FINGER_DMA_IrqHandler+0x8f4>
 8021b06:	2308      	movs	r3, #8
 8021b08:	e002      	b.n	8021b10 <FINGER_DMA_IrqHandler+0x8f4>
 8021b0a:	2308      	movs	r3, #8
 8021b0c:	e000      	b.n	8021b10 <FINGER_DMA_IrqHandler+0x8f4>
 8021b0e:	2308      	movs	r3, #8
 8021b10:	4a71      	ldr	r2, [pc, #452]	; (8021cd8 <FINGER_DMA_IrqHandler+0xabc>)
 8021b12:	6093      	str	r3, [r2, #8]
 8021b14:	e0e9      	b.n	8021cea <FINGER_DMA_IrqHandler+0xace>
 8021b16:	4b62      	ldr	r3, [pc, #392]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021b18:	681b      	ldr	r3, [r3, #0]
 8021b1a:	461a      	mov	r2, r3
 8021b1c:	4b6f      	ldr	r3, [pc, #444]	; (8021cdc <FINGER_DMA_IrqHandler+0xac0>)
 8021b1e:	429a      	cmp	r2, r3
 8021b20:	d960      	bls.n	8021be4 <FINGER_DMA_IrqHandler+0x9c8>
 8021b22:	4b5f      	ldr	r3, [pc, #380]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021b24:	681b      	ldr	r3, [r3, #0]
 8021b26:	4a60      	ldr	r2, [pc, #384]	; (8021ca8 <FINGER_DMA_IrqHandler+0xa8c>)
 8021b28:	4293      	cmp	r3, r2
 8021b2a:	d057      	beq.n	8021bdc <FINGER_DMA_IrqHandler+0x9c0>
 8021b2c:	4b5c      	ldr	r3, [pc, #368]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021b2e:	681b      	ldr	r3, [r3, #0]
 8021b30:	4a5e      	ldr	r2, [pc, #376]	; (8021cac <FINGER_DMA_IrqHandler+0xa90>)
 8021b32:	4293      	cmp	r3, r2
 8021b34:	d050      	beq.n	8021bd8 <FINGER_DMA_IrqHandler+0x9bc>
 8021b36:	4b5a      	ldr	r3, [pc, #360]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021b38:	681b      	ldr	r3, [r3, #0]
 8021b3a:	4a5d      	ldr	r2, [pc, #372]	; (8021cb0 <FINGER_DMA_IrqHandler+0xa94>)
 8021b3c:	4293      	cmp	r3, r2
 8021b3e:	d049      	beq.n	8021bd4 <FINGER_DMA_IrqHandler+0x9b8>
 8021b40:	4b57      	ldr	r3, [pc, #348]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021b42:	681b      	ldr	r3, [r3, #0]
 8021b44:	4a5b      	ldr	r2, [pc, #364]	; (8021cb4 <FINGER_DMA_IrqHandler+0xa98>)
 8021b46:	4293      	cmp	r3, r2
 8021b48:	d042      	beq.n	8021bd0 <FINGER_DMA_IrqHandler+0x9b4>
 8021b4a:	4b55      	ldr	r3, [pc, #340]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021b4c:	681b      	ldr	r3, [r3, #0]
 8021b4e:	4a5a      	ldr	r2, [pc, #360]	; (8021cb8 <FINGER_DMA_IrqHandler+0xa9c>)
 8021b50:	4293      	cmp	r3, r2
 8021b52:	d03a      	beq.n	8021bca <FINGER_DMA_IrqHandler+0x9ae>
 8021b54:	4b52      	ldr	r3, [pc, #328]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021b56:	681b      	ldr	r3, [r3, #0]
 8021b58:	4a58      	ldr	r2, [pc, #352]	; (8021cbc <FINGER_DMA_IrqHandler+0xaa0>)
 8021b5a:	4293      	cmp	r3, r2
 8021b5c:	d032      	beq.n	8021bc4 <FINGER_DMA_IrqHandler+0x9a8>
 8021b5e:	4b50      	ldr	r3, [pc, #320]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021b60:	681b      	ldr	r3, [r3, #0]
 8021b62:	4a57      	ldr	r2, [pc, #348]	; (8021cc0 <FINGER_DMA_IrqHandler+0xaa4>)
 8021b64:	4293      	cmp	r3, r2
 8021b66:	d02a      	beq.n	8021bbe <FINGER_DMA_IrqHandler+0x9a2>
 8021b68:	4b4d      	ldr	r3, [pc, #308]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021b6a:	681b      	ldr	r3, [r3, #0]
 8021b6c:	4a55      	ldr	r2, [pc, #340]	; (8021cc4 <FINGER_DMA_IrqHandler+0xaa8>)
 8021b6e:	4293      	cmp	r3, r2
 8021b70:	d022      	beq.n	8021bb8 <FINGER_DMA_IrqHandler+0x99c>
 8021b72:	4b4b      	ldr	r3, [pc, #300]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021b74:	681b      	ldr	r3, [r3, #0]
 8021b76:	4a54      	ldr	r2, [pc, #336]	; (8021cc8 <FINGER_DMA_IrqHandler+0xaac>)
 8021b78:	4293      	cmp	r3, r2
 8021b7a:	d01a      	beq.n	8021bb2 <FINGER_DMA_IrqHandler+0x996>
 8021b7c:	4b48      	ldr	r3, [pc, #288]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021b7e:	681b      	ldr	r3, [r3, #0]
 8021b80:	4a52      	ldr	r2, [pc, #328]	; (8021ccc <FINGER_DMA_IrqHandler+0xab0>)
 8021b82:	4293      	cmp	r3, r2
 8021b84:	d012      	beq.n	8021bac <FINGER_DMA_IrqHandler+0x990>
 8021b86:	4b46      	ldr	r3, [pc, #280]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021b88:	681b      	ldr	r3, [r3, #0]
 8021b8a:	4a51      	ldr	r2, [pc, #324]	; (8021cd0 <FINGER_DMA_IrqHandler+0xab4>)
 8021b8c:	4293      	cmp	r3, r2
 8021b8e:	d00a      	beq.n	8021ba6 <FINGER_DMA_IrqHandler+0x98a>
 8021b90:	4b43      	ldr	r3, [pc, #268]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021b92:	681b      	ldr	r3, [r3, #0]
 8021b94:	4a4f      	ldr	r2, [pc, #316]	; (8021cd4 <FINGER_DMA_IrqHandler+0xab8>)
 8021b96:	4293      	cmp	r3, r2
 8021b98:	d102      	bne.n	8021ba0 <FINGER_DMA_IrqHandler+0x984>
 8021b9a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8021b9e:	e01e      	b.n	8021bde <FINGER_DMA_IrqHandler+0x9c2>
 8021ba0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8021ba4:	e01b      	b.n	8021bde <FINGER_DMA_IrqHandler+0x9c2>
 8021ba6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8021baa:	e018      	b.n	8021bde <FINGER_DMA_IrqHandler+0x9c2>
 8021bac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8021bb0:	e015      	b.n	8021bde <FINGER_DMA_IrqHandler+0x9c2>
 8021bb2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8021bb6:	e012      	b.n	8021bde <FINGER_DMA_IrqHandler+0x9c2>
 8021bb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8021bbc:	e00f      	b.n	8021bde <FINGER_DMA_IrqHandler+0x9c2>
 8021bbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8021bc2:	e00c      	b.n	8021bde <FINGER_DMA_IrqHandler+0x9c2>
 8021bc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8021bc8:	e009      	b.n	8021bde <FINGER_DMA_IrqHandler+0x9c2>
 8021bca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8021bce:	e006      	b.n	8021bde <FINGER_DMA_IrqHandler+0x9c2>
 8021bd0:	2308      	movs	r3, #8
 8021bd2:	e004      	b.n	8021bde <FINGER_DMA_IrqHandler+0x9c2>
 8021bd4:	2308      	movs	r3, #8
 8021bd6:	e002      	b.n	8021bde <FINGER_DMA_IrqHandler+0x9c2>
 8021bd8:	2308      	movs	r3, #8
 8021bda:	e000      	b.n	8021bde <FINGER_DMA_IrqHandler+0x9c2>
 8021bdc:	2308      	movs	r3, #8
 8021bde:	4a40      	ldr	r2, [pc, #256]	; (8021ce0 <FINGER_DMA_IrqHandler+0xac4>)
 8021be0:	60d3      	str	r3, [r2, #12]
 8021be2:	e082      	b.n	8021cea <FINGER_DMA_IrqHandler+0xace>
 8021be4:	4b2e      	ldr	r3, [pc, #184]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021be6:	681b      	ldr	r3, [r3, #0]
 8021be8:	4a2f      	ldr	r2, [pc, #188]	; (8021ca8 <FINGER_DMA_IrqHandler+0xa8c>)
 8021bea:	4293      	cmp	r3, r2
 8021bec:	d07a      	beq.n	8021ce4 <FINGER_DMA_IrqHandler+0xac8>
 8021bee:	4b2c      	ldr	r3, [pc, #176]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021bf0:	681b      	ldr	r3, [r3, #0]
 8021bf2:	4a2e      	ldr	r2, [pc, #184]	; (8021cac <FINGER_DMA_IrqHandler+0xa90>)
 8021bf4:	4293      	cmp	r3, r2
 8021bf6:	d050      	beq.n	8021c9a <FINGER_DMA_IrqHandler+0xa7e>
 8021bf8:	4b29      	ldr	r3, [pc, #164]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021bfa:	681b      	ldr	r3, [r3, #0]
 8021bfc:	4a2c      	ldr	r2, [pc, #176]	; (8021cb0 <FINGER_DMA_IrqHandler+0xa94>)
 8021bfe:	4293      	cmp	r3, r2
 8021c00:	d049      	beq.n	8021c96 <FINGER_DMA_IrqHandler+0xa7a>
 8021c02:	4b27      	ldr	r3, [pc, #156]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021c04:	681b      	ldr	r3, [r3, #0]
 8021c06:	4a2b      	ldr	r2, [pc, #172]	; (8021cb4 <FINGER_DMA_IrqHandler+0xa98>)
 8021c08:	4293      	cmp	r3, r2
 8021c0a:	d042      	beq.n	8021c92 <FINGER_DMA_IrqHandler+0xa76>
 8021c0c:	4b24      	ldr	r3, [pc, #144]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021c0e:	681b      	ldr	r3, [r3, #0]
 8021c10:	4a29      	ldr	r2, [pc, #164]	; (8021cb8 <FINGER_DMA_IrqHandler+0xa9c>)
 8021c12:	4293      	cmp	r3, r2
 8021c14:	d03a      	beq.n	8021c8c <FINGER_DMA_IrqHandler+0xa70>
 8021c16:	4b22      	ldr	r3, [pc, #136]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021c18:	681b      	ldr	r3, [r3, #0]
 8021c1a:	4a28      	ldr	r2, [pc, #160]	; (8021cbc <FINGER_DMA_IrqHandler+0xaa0>)
 8021c1c:	4293      	cmp	r3, r2
 8021c1e:	d032      	beq.n	8021c86 <FINGER_DMA_IrqHandler+0xa6a>
 8021c20:	4b1f      	ldr	r3, [pc, #124]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021c22:	681b      	ldr	r3, [r3, #0]
 8021c24:	4a26      	ldr	r2, [pc, #152]	; (8021cc0 <FINGER_DMA_IrqHandler+0xaa4>)
 8021c26:	4293      	cmp	r3, r2
 8021c28:	d02a      	beq.n	8021c80 <FINGER_DMA_IrqHandler+0xa64>
 8021c2a:	4b1d      	ldr	r3, [pc, #116]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021c2c:	681b      	ldr	r3, [r3, #0]
 8021c2e:	4a25      	ldr	r2, [pc, #148]	; (8021cc4 <FINGER_DMA_IrqHandler+0xaa8>)
 8021c30:	4293      	cmp	r3, r2
 8021c32:	d022      	beq.n	8021c7a <FINGER_DMA_IrqHandler+0xa5e>
 8021c34:	4b1a      	ldr	r3, [pc, #104]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021c36:	681b      	ldr	r3, [r3, #0]
 8021c38:	4a23      	ldr	r2, [pc, #140]	; (8021cc8 <FINGER_DMA_IrqHandler+0xaac>)
 8021c3a:	4293      	cmp	r3, r2
 8021c3c:	d01a      	beq.n	8021c74 <FINGER_DMA_IrqHandler+0xa58>
 8021c3e:	4b18      	ldr	r3, [pc, #96]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021c40:	681b      	ldr	r3, [r3, #0]
 8021c42:	4a22      	ldr	r2, [pc, #136]	; (8021ccc <FINGER_DMA_IrqHandler+0xab0>)
 8021c44:	4293      	cmp	r3, r2
 8021c46:	d012      	beq.n	8021c6e <FINGER_DMA_IrqHandler+0xa52>
 8021c48:	4b15      	ldr	r3, [pc, #84]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021c4a:	681b      	ldr	r3, [r3, #0]
 8021c4c:	4a20      	ldr	r2, [pc, #128]	; (8021cd0 <FINGER_DMA_IrqHandler+0xab4>)
 8021c4e:	4293      	cmp	r3, r2
 8021c50:	d00a      	beq.n	8021c68 <FINGER_DMA_IrqHandler+0xa4c>
 8021c52:	4b13      	ldr	r3, [pc, #76]	; (8021ca0 <FINGER_DMA_IrqHandler+0xa84>)
 8021c54:	681b      	ldr	r3, [r3, #0]
 8021c56:	4a1f      	ldr	r2, [pc, #124]	; (8021cd4 <FINGER_DMA_IrqHandler+0xab8>)
 8021c58:	4293      	cmp	r3, r2
 8021c5a:	d102      	bne.n	8021c62 <FINGER_DMA_IrqHandler+0xa46>
 8021c5c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8021c60:	e041      	b.n	8021ce6 <FINGER_DMA_IrqHandler+0xaca>
 8021c62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8021c66:	e03e      	b.n	8021ce6 <FINGER_DMA_IrqHandler+0xaca>
 8021c68:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8021c6c:	e03b      	b.n	8021ce6 <FINGER_DMA_IrqHandler+0xaca>
 8021c6e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8021c72:	e038      	b.n	8021ce6 <FINGER_DMA_IrqHandler+0xaca>
 8021c74:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8021c78:	e035      	b.n	8021ce6 <FINGER_DMA_IrqHandler+0xaca>
 8021c7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8021c7e:	e032      	b.n	8021ce6 <FINGER_DMA_IrqHandler+0xaca>
 8021c80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8021c84:	e02f      	b.n	8021ce6 <FINGER_DMA_IrqHandler+0xaca>
 8021c86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8021c8a:	e02c      	b.n	8021ce6 <FINGER_DMA_IrqHandler+0xaca>
 8021c8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8021c90:	e029      	b.n	8021ce6 <FINGER_DMA_IrqHandler+0xaca>
 8021c92:	2308      	movs	r3, #8
 8021c94:	e027      	b.n	8021ce6 <FINGER_DMA_IrqHandler+0xaca>
 8021c96:	2308      	movs	r3, #8
 8021c98:	e025      	b.n	8021ce6 <FINGER_DMA_IrqHandler+0xaca>
 8021c9a:	2308      	movs	r3, #8
 8021c9c:	e023      	b.n	8021ce6 <FINGER_DMA_IrqHandler+0xaca>
 8021c9e:	bf00      	nop
 8021ca0:	2000841c 	.word	0x2000841c
 8021ca4:	400260b8 	.word	0x400260b8
 8021ca8:	40026010 	.word	0x40026010
 8021cac:	40026410 	.word	0x40026410
 8021cb0:	40026070 	.word	0x40026070
 8021cb4:	40026470 	.word	0x40026470
 8021cb8:	40026028 	.word	0x40026028
 8021cbc:	40026428 	.word	0x40026428
 8021cc0:	40026088 	.word	0x40026088
 8021cc4:	40026488 	.word	0x40026488
 8021cc8:	40026040 	.word	0x40026040
 8021ccc:	40026440 	.word	0x40026440
 8021cd0:	400260a0 	.word	0x400260a0
 8021cd4:	400264a0 	.word	0x400264a0
 8021cd8:	40026400 	.word	0x40026400
 8021cdc:	40026058 	.word	0x40026058
 8021ce0:	40026000 	.word	0x40026000
 8021ce4:	2308      	movs	r3, #8
 8021ce6:	4a96      	ldr	r2, [pc, #600]	; (8021f40 <FINGER_DMA_IrqHandler+0xd24>)
 8021ce8:	6093      	str	r3, [r2, #8]
        __HAL_DMA_CLEAR_FLAG(&hdma_uart4_rx, __HAL_DMA_GET_FE_FLAG_INDEX(&hdma_uart4_rx));
 8021cea:	4b96      	ldr	r3, [pc, #600]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021cec:	681b      	ldr	r3, [r3, #0]
 8021cee:	461a      	mov	r2, r3
 8021cf0:	4b95      	ldr	r3, [pc, #596]	; (8021f48 <FINGER_DMA_IrqHandler+0xd2c>)
 8021cf2:	429a      	cmp	r2, r3
 8021cf4:	d95c      	bls.n	8021db0 <FINGER_DMA_IrqHandler+0xb94>
 8021cf6:	4b93      	ldr	r3, [pc, #588]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021cf8:	681b      	ldr	r3, [r3, #0]
 8021cfa:	4a94      	ldr	r2, [pc, #592]	; (8021f4c <FINGER_DMA_IrqHandler+0xd30>)
 8021cfc:	4293      	cmp	r3, r2
 8021cfe:	d053      	beq.n	8021da8 <FINGER_DMA_IrqHandler+0xb8c>
 8021d00:	4b90      	ldr	r3, [pc, #576]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021d02:	681b      	ldr	r3, [r3, #0]
 8021d04:	4a92      	ldr	r2, [pc, #584]	; (8021f50 <FINGER_DMA_IrqHandler+0xd34>)
 8021d06:	4293      	cmp	r3, r2
 8021d08:	d04c      	beq.n	8021da4 <FINGER_DMA_IrqHandler+0xb88>
 8021d0a:	4b8e      	ldr	r3, [pc, #568]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021d0c:	681b      	ldr	r3, [r3, #0]
 8021d0e:	4a91      	ldr	r2, [pc, #580]	; (8021f54 <FINGER_DMA_IrqHandler+0xd38>)
 8021d10:	4293      	cmp	r3, r2
 8021d12:	d045      	beq.n	8021da0 <FINGER_DMA_IrqHandler+0xb84>
 8021d14:	4b8b      	ldr	r3, [pc, #556]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021d16:	681b      	ldr	r3, [r3, #0]
 8021d18:	4a8f      	ldr	r2, [pc, #572]	; (8021f58 <FINGER_DMA_IrqHandler+0xd3c>)
 8021d1a:	4293      	cmp	r3, r2
 8021d1c:	d03e      	beq.n	8021d9c <FINGER_DMA_IrqHandler+0xb80>
 8021d1e:	4b89      	ldr	r3, [pc, #548]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021d20:	681b      	ldr	r3, [r3, #0]
 8021d22:	4a8e      	ldr	r2, [pc, #568]	; (8021f5c <FINGER_DMA_IrqHandler+0xd40>)
 8021d24:	4293      	cmp	r3, r2
 8021d26:	d037      	beq.n	8021d98 <FINGER_DMA_IrqHandler+0xb7c>
 8021d28:	4b86      	ldr	r3, [pc, #536]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021d2a:	681b      	ldr	r3, [r3, #0]
 8021d2c:	4a8c      	ldr	r2, [pc, #560]	; (8021f60 <FINGER_DMA_IrqHandler+0xd44>)
 8021d2e:	4293      	cmp	r3, r2
 8021d30:	d030      	beq.n	8021d94 <FINGER_DMA_IrqHandler+0xb78>
 8021d32:	4b84      	ldr	r3, [pc, #528]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021d34:	681b      	ldr	r3, [r3, #0]
 8021d36:	4a8b      	ldr	r2, [pc, #556]	; (8021f64 <FINGER_DMA_IrqHandler+0xd48>)
 8021d38:	4293      	cmp	r3, r2
 8021d3a:	d029      	beq.n	8021d90 <FINGER_DMA_IrqHandler+0xb74>
 8021d3c:	4b81      	ldr	r3, [pc, #516]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021d3e:	681b      	ldr	r3, [r3, #0]
 8021d40:	4a89      	ldr	r2, [pc, #548]	; (8021f68 <FINGER_DMA_IrqHandler+0xd4c>)
 8021d42:	4293      	cmp	r3, r2
 8021d44:	d022      	beq.n	8021d8c <FINGER_DMA_IrqHandler+0xb70>
 8021d46:	4b7f      	ldr	r3, [pc, #508]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021d48:	681b      	ldr	r3, [r3, #0]
 8021d4a:	4a88      	ldr	r2, [pc, #544]	; (8021f6c <FINGER_DMA_IrqHandler+0xd50>)
 8021d4c:	4293      	cmp	r3, r2
 8021d4e:	d01a      	beq.n	8021d86 <FINGER_DMA_IrqHandler+0xb6a>
 8021d50:	4b7c      	ldr	r3, [pc, #496]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021d52:	681b      	ldr	r3, [r3, #0]
 8021d54:	4a86      	ldr	r2, [pc, #536]	; (8021f70 <FINGER_DMA_IrqHandler+0xd54>)
 8021d56:	4293      	cmp	r3, r2
 8021d58:	d012      	beq.n	8021d80 <FINGER_DMA_IrqHandler+0xb64>
 8021d5a:	4b7a      	ldr	r3, [pc, #488]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021d5c:	681b      	ldr	r3, [r3, #0]
 8021d5e:	4a85      	ldr	r2, [pc, #532]	; (8021f74 <FINGER_DMA_IrqHandler+0xd58>)
 8021d60:	4293      	cmp	r3, r2
 8021d62:	d00a      	beq.n	8021d7a <FINGER_DMA_IrqHandler+0xb5e>
 8021d64:	4b77      	ldr	r3, [pc, #476]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021d66:	681b      	ldr	r3, [r3, #0]
 8021d68:	4a83      	ldr	r2, [pc, #524]	; (8021f78 <FINGER_DMA_IrqHandler+0xd5c>)
 8021d6a:	4293      	cmp	r3, r2
 8021d6c:	d102      	bne.n	8021d74 <FINGER_DMA_IrqHandler+0xb58>
 8021d6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8021d72:	e01a      	b.n	8021daa <FINGER_DMA_IrqHandler+0xb8e>
 8021d74:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8021d78:	e017      	b.n	8021daa <FINGER_DMA_IrqHandler+0xb8e>
 8021d7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8021d7e:	e014      	b.n	8021daa <FINGER_DMA_IrqHandler+0xb8e>
 8021d80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8021d84:	e011      	b.n	8021daa <FINGER_DMA_IrqHandler+0xb8e>
 8021d86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8021d8a:	e00e      	b.n	8021daa <FINGER_DMA_IrqHandler+0xb8e>
 8021d8c:	2340      	movs	r3, #64	; 0x40
 8021d8e:	e00c      	b.n	8021daa <FINGER_DMA_IrqHandler+0xb8e>
 8021d90:	2340      	movs	r3, #64	; 0x40
 8021d92:	e00a      	b.n	8021daa <FINGER_DMA_IrqHandler+0xb8e>
 8021d94:	2340      	movs	r3, #64	; 0x40
 8021d96:	e008      	b.n	8021daa <FINGER_DMA_IrqHandler+0xb8e>
 8021d98:	2340      	movs	r3, #64	; 0x40
 8021d9a:	e006      	b.n	8021daa <FINGER_DMA_IrqHandler+0xb8e>
 8021d9c:	2301      	movs	r3, #1
 8021d9e:	e004      	b.n	8021daa <FINGER_DMA_IrqHandler+0xb8e>
 8021da0:	2301      	movs	r3, #1
 8021da2:	e002      	b.n	8021daa <FINGER_DMA_IrqHandler+0xb8e>
 8021da4:	2301      	movs	r3, #1
 8021da6:	e000      	b.n	8021daa <FINGER_DMA_IrqHandler+0xb8e>
 8021da8:	2301      	movs	r3, #1
 8021daa:	4a74      	ldr	r2, [pc, #464]	; (8021f7c <FINGER_DMA_IrqHandler+0xd60>)
 8021dac:	60d3      	str	r3, [r2, #12]
 8021dae:	e147      	b.n	8022040 <FINGER_DMA_IrqHandler+0xe24>
 8021db0:	4b64      	ldr	r3, [pc, #400]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021db2:	681b      	ldr	r3, [r3, #0]
 8021db4:	461a      	mov	r2, r3
 8021db6:	4b72      	ldr	r3, [pc, #456]	; (8021f80 <FINGER_DMA_IrqHandler+0xd64>)
 8021db8:	429a      	cmp	r2, r3
 8021dba:	d95c      	bls.n	8021e76 <FINGER_DMA_IrqHandler+0xc5a>
 8021dbc:	4b61      	ldr	r3, [pc, #388]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021dbe:	681b      	ldr	r3, [r3, #0]
 8021dc0:	4a62      	ldr	r2, [pc, #392]	; (8021f4c <FINGER_DMA_IrqHandler+0xd30>)
 8021dc2:	4293      	cmp	r3, r2
 8021dc4:	d053      	beq.n	8021e6e <FINGER_DMA_IrqHandler+0xc52>
 8021dc6:	4b5f      	ldr	r3, [pc, #380]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021dc8:	681b      	ldr	r3, [r3, #0]
 8021dca:	4a61      	ldr	r2, [pc, #388]	; (8021f50 <FINGER_DMA_IrqHandler+0xd34>)
 8021dcc:	4293      	cmp	r3, r2
 8021dce:	d04c      	beq.n	8021e6a <FINGER_DMA_IrqHandler+0xc4e>
 8021dd0:	4b5c      	ldr	r3, [pc, #368]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021dd2:	681b      	ldr	r3, [r3, #0]
 8021dd4:	4a5f      	ldr	r2, [pc, #380]	; (8021f54 <FINGER_DMA_IrqHandler+0xd38>)
 8021dd6:	4293      	cmp	r3, r2
 8021dd8:	d045      	beq.n	8021e66 <FINGER_DMA_IrqHandler+0xc4a>
 8021dda:	4b5a      	ldr	r3, [pc, #360]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021ddc:	681b      	ldr	r3, [r3, #0]
 8021dde:	4a5e      	ldr	r2, [pc, #376]	; (8021f58 <FINGER_DMA_IrqHandler+0xd3c>)
 8021de0:	4293      	cmp	r3, r2
 8021de2:	d03e      	beq.n	8021e62 <FINGER_DMA_IrqHandler+0xc46>
 8021de4:	4b57      	ldr	r3, [pc, #348]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021de6:	681b      	ldr	r3, [r3, #0]
 8021de8:	4a5c      	ldr	r2, [pc, #368]	; (8021f5c <FINGER_DMA_IrqHandler+0xd40>)
 8021dea:	4293      	cmp	r3, r2
 8021dec:	d037      	beq.n	8021e5e <FINGER_DMA_IrqHandler+0xc42>
 8021dee:	4b55      	ldr	r3, [pc, #340]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021df0:	681b      	ldr	r3, [r3, #0]
 8021df2:	4a5b      	ldr	r2, [pc, #364]	; (8021f60 <FINGER_DMA_IrqHandler+0xd44>)
 8021df4:	4293      	cmp	r3, r2
 8021df6:	d030      	beq.n	8021e5a <FINGER_DMA_IrqHandler+0xc3e>
 8021df8:	4b52      	ldr	r3, [pc, #328]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021dfa:	681b      	ldr	r3, [r3, #0]
 8021dfc:	4a59      	ldr	r2, [pc, #356]	; (8021f64 <FINGER_DMA_IrqHandler+0xd48>)
 8021dfe:	4293      	cmp	r3, r2
 8021e00:	d029      	beq.n	8021e56 <FINGER_DMA_IrqHandler+0xc3a>
 8021e02:	4b50      	ldr	r3, [pc, #320]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021e04:	681b      	ldr	r3, [r3, #0]
 8021e06:	4a58      	ldr	r2, [pc, #352]	; (8021f68 <FINGER_DMA_IrqHandler+0xd4c>)
 8021e08:	4293      	cmp	r3, r2
 8021e0a:	d022      	beq.n	8021e52 <FINGER_DMA_IrqHandler+0xc36>
 8021e0c:	4b4d      	ldr	r3, [pc, #308]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021e0e:	681b      	ldr	r3, [r3, #0]
 8021e10:	4a56      	ldr	r2, [pc, #344]	; (8021f6c <FINGER_DMA_IrqHandler+0xd50>)
 8021e12:	4293      	cmp	r3, r2
 8021e14:	d01a      	beq.n	8021e4c <FINGER_DMA_IrqHandler+0xc30>
 8021e16:	4b4b      	ldr	r3, [pc, #300]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021e18:	681b      	ldr	r3, [r3, #0]
 8021e1a:	4a55      	ldr	r2, [pc, #340]	; (8021f70 <FINGER_DMA_IrqHandler+0xd54>)
 8021e1c:	4293      	cmp	r3, r2
 8021e1e:	d012      	beq.n	8021e46 <FINGER_DMA_IrqHandler+0xc2a>
 8021e20:	4b48      	ldr	r3, [pc, #288]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021e22:	681b      	ldr	r3, [r3, #0]
 8021e24:	4a53      	ldr	r2, [pc, #332]	; (8021f74 <FINGER_DMA_IrqHandler+0xd58>)
 8021e26:	4293      	cmp	r3, r2
 8021e28:	d00a      	beq.n	8021e40 <FINGER_DMA_IrqHandler+0xc24>
 8021e2a:	4b46      	ldr	r3, [pc, #280]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021e2c:	681b      	ldr	r3, [r3, #0]
 8021e2e:	4a52      	ldr	r2, [pc, #328]	; (8021f78 <FINGER_DMA_IrqHandler+0xd5c>)
 8021e30:	4293      	cmp	r3, r2
 8021e32:	d102      	bne.n	8021e3a <FINGER_DMA_IrqHandler+0xc1e>
 8021e34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8021e38:	e01a      	b.n	8021e70 <FINGER_DMA_IrqHandler+0xc54>
 8021e3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8021e3e:	e017      	b.n	8021e70 <FINGER_DMA_IrqHandler+0xc54>
 8021e40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8021e44:	e014      	b.n	8021e70 <FINGER_DMA_IrqHandler+0xc54>
 8021e46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8021e4a:	e011      	b.n	8021e70 <FINGER_DMA_IrqHandler+0xc54>
 8021e4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8021e50:	e00e      	b.n	8021e70 <FINGER_DMA_IrqHandler+0xc54>
 8021e52:	2340      	movs	r3, #64	; 0x40
 8021e54:	e00c      	b.n	8021e70 <FINGER_DMA_IrqHandler+0xc54>
 8021e56:	2340      	movs	r3, #64	; 0x40
 8021e58:	e00a      	b.n	8021e70 <FINGER_DMA_IrqHandler+0xc54>
 8021e5a:	2340      	movs	r3, #64	; 0x40
 8021e5c:	e008      	b.n	8021e70 <FINGER_DMA_IrqHandler+0xc54>
 8021e5e:	2340      	movs	r3, #64	; 0x40
 8021e60:	e006      	b.n	8021e70 <FINGER_DMA_IrqHandler+0xc54>
 8021e62:	2301      	movs	r3, #1
 8021e64:	e004      	b.n	8021e70 <FINGER_DMA_IrqHandler+0xc54>
 8021e66:	2301      	movs	r3, #1
 8021e68:	e002      	b.n	8021e70 <FINGER_DMA_IrqHandler+0xc54>
 8021e6a:	2301      	movs	r3, #1
 8021e6c:	e000      	b.n	8021e70 <FINGER_DMA_IrqHandler+0xc54>
 8021e6e:	2301      	movs	r3, #1
 8021e70:	4a42      	ldr	r2, [pc, #264]	; (8021f7c <FINGER_DMA_IrqHandler+0xd60>)
 8021e72:	6093      	str	r3, [r2, #8]
 8021e74:	e0e4      	b.n	8022040 <FINGER_DMA_IrqHandler+0xe24>
 8021e76:	4b33      	ldr	r3, [pc, #204]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021e78:	681b      	ldr	r3, [r3, #0]
 8021e7a:	461a      	mov	r2, r3
 8021e7c:	4b41      	ldr	r3, [pc, #260]	; (8021f84 <FINGER_DMA_IrqHandler+0xd68>)
 8021e7e:	429a      	cmp	r2, r3
 8021e80:	f240 8082 	bls.w	8021f88 <FINGER_DMA_IrqHandler+0xd6c>
 8021e84:	4b2f      	ldr	r3, [pc, #188]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021e86:	681b      	ldr	r3, [r3, #0]
 8021e88:	4a30      	ldr	r2, [pc, #192]	; (8021f4c <FINGER_DMA_IrqHandler+0xd30>)
 8021e8a:	4293      	cmp	r3, r2
 8021e8c:	d053      	beq.n	8021f36 <FINGER_DMA_IrqHandler+0xd1a>
 8021e8e:	4b2d      	ldr	r3, [pc, #180]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021e90:	681b      	ldr	r3, [r3, #0]
 8021e92:	4a2f      	ldr	r2, [pc, #188]	; (8021f50 <FINGER_DMA_IrqHandler+0xd34>)
 8021e94:	4293      	cmp	r3, r2
 8021e96:	d04c      	beq.n	8021f32 <FINGER_DMA_IrqHandler+0xd16>
 8021e98:	4b2a      	ldr	r3, [pc, #168]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021e9a:	681b      	ldr	r3, [r3, #0]
 8021e9c:	4a2d      	ldr	r2, [pc, #180]	; (8021f54 <FINGER_DMA_IrqHandler+0xd38>)
 8021e9e:	4293      	cmp	r3, r2
 8021ea0:	d045      	beq.n	8021f2e <FINGER_DMA_IrqHandler+0xd12>
 8021ea2:	4b28      	ldr	r3, [pc, #160]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021ea4:	681b      	ldr	r3, [r3, #0]
 8021ea6:	4a2c      	ldr	r2, [pc, #176]	; (8021f58 <FINGER_DMA_IrqHandler+0xd3c>)
 8021ea8:	4293      	cmp	r3, r2
 8021eaa:	d03e      	beq.n	8021f2a <FINGER_DMA_IrqHandler+0xd0e>
 8021eac:	4b25      	ldr	r3, [pc, #148]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021eae:	681b      	ldr	r3, [r3, #0]
 8021eb0:	4a2a      	ldr	r2, [pc, #168]	; (8021f5c <FINGER_DMA_IrqHandler+0xd40>)
 8021eb2:	4293      	cmp	r3, r2
 8021eb4:	d037      	beq.n	8021f26 <FINGER_DMA_IrqHandler+0xd0a>
 8021eb6:	4b23      	ldr	r3, [pc, #140]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021eb8:	681b      	ldr	r3, [r3, #0]
 8021eba:	4a29      	ldr	r2, [pc, #164]	; (8021f60 <FINGER_DMA_IrqHandler+0xd44>)
 8021ebc:	4293      	cmp	r3, r2
 8021ebe:	d030      	beq.n	8021f22 <FINGER_DMA_IrqHandler+0xd06>
 8021ec0:	4b20      	ldr	r3, [pc, #128]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021ec2:	681b      	ldr	r3, [r3, #0]
 8021ec4:	4a27      	ldr	r2, [pc, #156]	; (8021f64 <FINGER_DMA_IrqHandler+0xd48>)
 8021ec6:	4293      	cmp	r3, r2
 8021ec8:	d029      	beq.n	8021f1e <FINGER_DMA_IrqHandler+0xd02>
 8021eca:	4b1e      	ldr	r3, [pc, #120]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021ecc:	681b      	ldr	r3, [r3, #0]
 8021ece:	4a26      	ldr	r2, [pc, #152]	; (8021f68 <FINGER_DMA_IrqHandler+0xd4c>)
 8021ed0:	4293      	cmp	r3, r2
 8021ed2:	d022      	beq.n	8021f1a <FINGER_DMA_IrqHandler+0xcfe>
 8021ed4:	4b1b      	ldr	r3, [pc, #108]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021ed6:	681b      	ldr	r3, [r3, #0]
 8021ed8:	4a24      	ldr	r2, [pc, #144]	; (8021f6c <FINGER_DMA_IrqHandler+0xd50>)
 8021eda:	4293      	cmp	r3, r2
 8021edc:	d01a      	beq.n	8021f14 <FINGER_DMA_IrqHandler+0xcf8>
 8021ede:	4b19      	ldr	r3, [pc, #100]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021ee0:	681b      	ldr	r3, [r3, #0]
 8021ee2:	4a23      	ldr	r2, [pc, #140]	; (8021f70 <FINGER_DMA_IrqHandler+0xd54>)
 8021ee4:	4293      	cmp	r3, r2
 8021ee6:	d012      	beq.n	8021f0e <FINGER_DMA_IrqHandler+0xcf2>
 8021ee8:	4b16      	ldr	r3, [pc, #88]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021eea:	681b      	ldr	r3, [r3, #0]
 8021eec:	4a21      	ldr	r2, [pc, #132]	; (8021f74 <FINGER_DMA_IrqHandler+0xd58>)
 8021eee:	4293      	cmp	r3, r2
 8021ef0:	d00a      	beq.n	8021f08 <FINGER_DMA_IrqHandler+0xcec>
 8021ef2:	4b14      	ldr	r3, [pc, #80]	; (8021f44 <FINGER_DMA_IrqHandler+0xd28>)
 8021ef4:	681b      	ldr	r3, [r3, #0]
 8021ef6:	4a20      	ldr	r2, [pc, #128]	; (8021f78 <FINGER_DMA_IrqHandler+0xd5c>)
 8021ef8:	4293      	cmp	r3, r2
 8021efa:	d102      	bne.n	8021f02 <FINGER_DMA_IrqHandler+0xce6>
 8021efc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8021f00:	e01a      	b.n	8021f38 <FINGER_DMA_IrqHandler+0xd1c>
 8021f02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8021f06:	e017      	b.n	8021f38 <FINGER_DMA_IrqHandler+0xd1c>
 8021f08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8021f0c:	e014      	b.n	8021f38 <FINGER_DMA_IrqHandler+0xd1c>
 8021f0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8021f12:	e011      	b.n	8021f38 <FINGER_DMA_IrqHandler+0xd1c>
 8021f14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8021f18:	e00e      	b.n	8021f38 <FINGER_DMA_IrqHandler+0xd1c>
 8021f1a:	2340      	movs	r3, #64	; 0x40
 8021f1c:	e00c      	b.n	8021f38 <FINGER_DMA_IrqHandler+0xd1c>
 8021f1e:	2340      	movs	r3, #64	; 0x40
 8021f20:	e00a      	b.n	8021f38 <FINGER_DMA_IrqHandler+0xd1c>
 8021f22:	2340      	movs	r3, #64	; 0x40
 8021f24:	e008      	b.n	8021f38 <FINGER_DMA_IrqHandler+0xd1c>
 8021f26:	2340      	movs	r3, #64	; 0x40
 8021f28:	e006      	b.n	8021f38 <FINGER_DMA_IrqHandler+0xd1c>
 8021f2a:	2301      	movs	r3, #1
 8021f2c:	e004      	b.n	8021f38 <FINGER_DMA_IrqHandler+0xd1c>
 8021f2e:	2301      	movs	r3, #1
 8021f30:	e002      	b.n	8021f38 <FINGER_DMA_IrqHandler+0xd1c>
 8021f32:	2301      	movs	r3, #1
 8021f34:	e000      	b.n	8021f38 <FINGER_DMA_IrqHandler+0xd1c>
 8021f36:	2301      	movs	r3, #1
 8021f38:	4a01      	ldr	r2, [pc, #4]	; (8021f40 <FINGER_DMA_IrqHandler+0xd24>)
 8021f3a:	60d3      	str	r3, [r2, #12]
 8021f3c:	e080      	b.n	8022040 <FINGER_DMA_IrqHandler+0xe24>
 8021f3e:	bf00      	nop
 8021f40:	40026000 	.word	0x40026000
 8021f44:	2000841c 	.word	0x2000841c
 8021f48:	40026458 	.word	0x40026458
 8021f4c:	40026010 	.word	0x40026010
 8021f50:	40026410 	.word	0x40026410
 8021f54:	40026070 	.word	0x40026070
 8021f58:	40026470 	.word	0x40026470
 8021f5c:	40026028 	.word	0x40026028
 8021f60:	40026428 	.word	0x40026428
 8021f64:	40026088 	.word	0x40026088
 8021f68:	40026488 	.word	0x40026488
 8021f6c:	40026040 	.word	0x40026040
 8021f70:	40026440 	.word	0x40026440
 8021f74:	400260a0 	.word	0x400260a0
 8021f78:	400264a0 	.word	0x400264a0
 8021f7c:	40026400 	.word	0x40026400
 8021f80:	400260b8 	.word	0x400260b8
 8021f84:	40026058 	.word	0x40026058
 8021f88:	4b95      	ldr	r3, [pc, #596]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8021f8a:	681b      	ldr	r3, [r3, #0]
 8021f8c:	4a95      	ldr	r2, [pc, #596]	; (80221e4 <FINGER_DMA_IrqHandler+0xfc8>)
 8021f8e:	4293      	cmp	r3, r2
 8021f90:	d053      	beq.n	802203a <FINGER_DMA_IrqHandler+0xe1e>
 8021f92:	4b93      	ldr	r3, [pc, #588]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8021f94:	681b      	ldr	r3, [r3, #0]
 8021f96:	4a94      	ldr	r2, [pc, #592]	; (80221e8 <FINGER_DMA_IrqHandler+0xfcc>)
 8021f98:	4293      	cmp	r3, r2
 8021f9a:	d04c      	beq.n	8022036 <FINGER_DMA_IrqHandler+0xe1a>
 8021f9c:	4b90      	ldr	r3, [pc, #576]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8021f9e:	681b      	ldr	r3, [r3, #0]
 8021fa0:	4a92      	ldr	r2, [pc, #584]	; (80221ec <FINGER_DMA_IrqHandler+0xfd0>)
 8021fa2:	4293      	cmp	r3, r2
 8021fa4:	d045      	beq.n	8022032 <FINGER_DMA_IrqHandler+0xe16>
 8021fa6:	4b8e      	ldr	r3, [pc, #568]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8021fa8:	681b      	ldr	r3, [r3, #0]
 8021faa:	4a91      	ldr	r2, [pc, #580]	; (80221f0 <FINGER_DMA_IrqHandler+0xfd4>)
 8021fac:	4293      	cmp	r3, r2
 8021fae:	d03e      	beq.n	802202e <FINGER_DMA_IrqHandler+0xe12>
 8021fb0:	4b8b      	ldr	r3, [pc, #556]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8021fb2:	681b      	ldr	r3, [r3, #0]
 8021fb4:	4a8f      	ldr	r2, [pc, #572]	; (80221f4 <FINGER_DMA_IrqHandler+0xfd8>)
 8021fb6:	4293      	cmp	r3, r2
 8021fb8:	d037      	beq.n	802202a <FINGER_DMA_IrqHandler+0xe0e>
 8021fba:	4b89      	ldr	r3, [pc, #548]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8021fbc:	681b      	ldr	r3, [r3, #0]
 8021fbe:	4a8e      	ldr	r2, [pc, #568]	; (80221f8 <FINGER_DMA_IrqHandler+0xfdc>)
 8021fc0:	4293      	cmp	r3, r2
 8021fc2:	d030      	beq.n	8022026 <FINGER_DMA_IrqHandler+0xe0a>
 8021fc4:	4b86      	ldr	r3, [pc, #536]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8021fc6:	681b      	ldr	r3, [r3, #0]
 8021fc8:	4a8c      	ldr	r2, [pc, #560]	; (80221fc <FINGER_DMA_IrqHandler+0xfe0>)
 8021fca:	4293      	cmp	r3, r2
 8021fcc:	d029      	beq.n	8022022 <FINGER_DMA_IrqHandler+0xe06>
 8021fce:	4b84      	ldr	r3, [pc, #528]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8021fd0:	681b      	ldr	r3, [r3, #0]
 8021fd2:	4a8b      	ldr	r2, [pc, #556]	; (8022200 <FINGER_DMA_IrqHandler+0xfe4>)
 8021fd4:	4293      	cmp	r3, r2
 8021fd6:	d022      	beq.n	802201e <FINGER_DMA_IrqHandler+0xe02>
 8021fd8:	4b81      	ldr	r3, [pc, #516]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8021fda:	681b      	ldr	r3, [r3, #0]
 8021fdc:	4a89      	ldr	r2, [pc, #548]	; (8022204 <FINGER_DMA_IrqHandler+0xfe8>)
 8021fde:	4293      	cmp	r3, r2
 8021fe0:	d01a      	beq.n	8022018 <FINGER_DMA_IrqHandler+0xdfc>
 8021fe2:	4b7f      	ldr	r3, [pc, #508]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8021fe4:	681b      	ldr	r3, [r3, #0]
 8021fe6:	4a88      	ldr	r2, [pc, #544]	; (8022208 <FINGER_DMA_IrqHandler+0xfec>)
 8021fe8:	4293      	cmp	r3, r2
 8021fea:	d012      	beq.n	8022012 <FINGER_DMA_IrqHandler+0xdf6>
 8021fec:	4b7c      	ldr	r3, [pc, #496]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8021fee:	681b      	ldr	r3, [r3, #0]
 8021ff0:	4a86      	ldr	r2, [pc, #536]	; (802220c <FINGER_DMA_IrqHandler+0xff0>)
 8021ff2:	4293      	cmp	r3, r2
 8021ff4:	d00a      	beq.n	802200c <FINGER_DMA_IrqHandler+0xdf0>
 8021ff6:	4b7a      	ldr	r3, [pc, #488]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8021ff8:	681b      	ldr	r3, [r3, #0]
 8021ffa:	4a85      	ldr	r2, [pc, #532]	; (8022210 <FINGER_DMA_IrqHandler+0xff4>)
 8021ffc:	4293      	cmp	r3, r2
 8021ffe:	d102      	bne.n	8022006 <FINGER_DMA_IrqHandler+0xdea>
 8022000:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8022004:	e01a      	b.n	802203c <FINGER_DMA_IrqHandler+0xe20>
 8022006:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 802200a:	e017      	b.n	802203c <FINGER_DMA_IrqHandler+0xe20>
 802200c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8022010:	e014      	b.n	802203c <FINGER_DMA_IrqHandler+0xe20>
 8022012:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8022016:	e011      	b.n	802203c <FINGER_DMA_IrqHandler+0xe20>
 8022018:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 802201c:	e00e      	b.n	802203c <FINGER_DMA_IrqHandler+0xe20>
 802201e:	2340      	movs	r3, #64	; 0x40
 8022020:	e00c      	b.n	802203c <FINGER_DMA_IrqHandler+0xe20>
 8022022:	2340      	movs	r3, #64	; 0x40
 8022024:	e00a      	b.n	802203c <FINGER_DMA_IrqHandler+0xe20>
 8022026:	2340      	movs	r3, #64	; 0x40
 8022028:	e008      	b.n	802203c <FINGER_DMA_IrqHandler+0xe20>
 802202a:	2340      	movs	r3, #64	; 0x40
 802202c:	e006      	b.n	802203c <FINGER_DMA_IrqHandler+0xe20>
 802202e:	2301      	movs	r3, #1
 8022030:	e004      	b.n	802203c <FINGER_DMA_IrqHandler+0xe20>
 8022032:	2301      	movs	r3, #1
 8022034:	e002      	b.n	802203c <FINGER_DMA_IrqHandler+0xe20>
 8022036:	2301      	movs	r3, #1
 8022038:	e000      	b.n	802203c <FINGER_DMA_IrqHandler+0xe20>
 802203a:	2301      	movs	r3, #1
 802203c:	4a75      	ldr	r2, [pc, #468]	; (8022214 <FINGER_DMA_IrqHandler+0xff8>)
 802203e:	6093      	str	r3, [r2, #8]
        __HAL_DMA_CLEAR_FLAG(&hdma_uart4_rx, __HAL_DMA_GET_DME_FLAG_INDEX(&hdma_uart4_rx));
 8022040:	4b67      	ldr	r3, [pc, #412]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8022042:	681b      	ldr	r3, [r3, #0]
 8022044:	461a      	mov	r2, r3
 8022046:	4b74      	ldr	r3, [pc, #464]	; (8022218 <FINGER_DMA_IrqHandler+0xffc>)
 8022048:	429a      	cmp	r2, r3
 802204a:	d960      	bls.n	802210e <FINGER_DMA_IrqHandler+0xef2>
 802204c:	4b64      	ldr	r3, [pc, #400]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 802204e:	681b      	ldr	r3, [r3, #0]
 8022050:	4a64      	ldr	r2, [pc, #400]	; (80221e4 <FINGER_DMA_IrqHandler+0xfc8>)
 8022052:	4293      	cmp	r3, r2
 8022054:	d057      	beq.n	8022106 <FINGER_DMA_IrqHandler+0xeea>
 8022056:	4b62      	ldr	r3, [pc, #392]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8022058:	681b      	ldr	r3, [r3, #0]
 802205a:	4a63      	ldr	r2, [pc, #396]	; (80221e8 <FINGER_DMA_IrqHandler+0xfcc>)
 802205c:	4293      	cmp	r3, r2
 802205e:	d050      	beq.n	8022102 <FINGER_DMA_IrqHandler+0xee6>
 8022060:	4b5f      	ldr	r3, [pc, #380]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8022062:	681b      	ldr	r3, [r3, #0]
 8022064:	4a61      	ldr	r2, [pc, #388]	; (80221ec <FINGER_DMA_IrqHandler+0xfd0>)
 8022066:	4293      	cmp	r3, r2
 8022068:	d049      	beq.n	80220fe <FINGER_DMA_IrqHandler+0xee2>
 802206a:	4b5d      	ldr	r3, [pc, #372]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 802206c:	681b      	ldr	r3, [r3, #0]
 802206e:	4a60      	ldr	r2, [pc, #384]	; (80221f0 <FINGER_DMA_IrqHandler+0xfd4>)
 8022070:	4293      	cmp	r3, r2
 8022072:	d042      	beq.n	80220fa <FINGER_DMA_IrqHandler+0xede>
 8022074:	4b5a      	ldr	r3, [pc, #360]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8022076:	681b      	ldr	r3, [r3, #0]
 8022078:	4a5e      	ldr	r2, [pc, #376]	; (80221f4 <FINGER_DMA_IrqHandler+0xfd8>)
 802207a:	4293      	cmp	r3, r2
 802207c:	d03a      	beq.n	80220f4 <FINGER_DMA_IrqHandler+0xed8>
 802207e:	4b58      	ldr	r3, [pc, #352]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8022080:	681b      	ldr	r3, [r3, #0]
 8022082:	4a5d      	ldr	r2, [pc, #372]	; (80221f8 <FINGER_DMA_IrqHandler+0xfdc>)
 8022084:	4293      	cmp	r3, r2
 8022086:	d032      	beq.n	80220ee <FINGER_DMA_IrqHandler+0xed2>
 8022088:	4b55      	ldr	r3, [pc, #340]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 802208a:	681b      	ldr	r3, [r3, #0]
 802208c:	4a5b      	ldr	r2, [pc, #364]	; (80221fc <FINGER_DMA_IrqHandler+0xfe0>)
 802208e:	4293      	cmp	r3, r2
 8022090:	d02a      	beq.n	80220e8 <FINGER_DMA_IrqHandler+0xecc>
 8022092:	4b53      	ldr	r3, [pc, #332]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8022094:	681b      	ldr	r3, [r3, #0]
 8022096:	4a5a      	ldr	r2, [pc, #360]	; (8022200 <FINGER_DMA_IrqHandler+0xfe4>)
 8022098:	4293      	cmp	r3, r2
 802209a:	d022      	beq.n	80220e2 <FINGER_DMA_IrqHandler+0xec6>
 802209c:	4b50      	ldr	r3, [pc, #320]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 802209e:	681b      	ldr	r3, [r3, #0]
 80220a0:	4a58      	ldr	r2, [pc, #352]	; (8022204 <FINGER_DMA_IrqHandler+0xfe8>)
 80220a2:	4293      	cmp	r3, r2
 80220a4:	d01a      	beq.n	80220dc <FINGER_DMA_IrqHandler+0xec0>
 80220a6:	4b4e      	ldr	r3, [pc, #312]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 80220a8:	681b      	ldr	r3, [r3, #0]
 80220aa:	4a57      	ldr	r2, [pc, #348]	; (8022208 <FINGER_DMA_IrqHandler+0xfec>)
 80220ac:	4293      	cmp	r3, r2
 80220ae:	d012      	beq.n	80220d6 <FINGER_DMA_IrqHandler+0xeba>
 80220b0:	4b4b      	ldr	r3, [pc, #300]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 80220b2:	681b      	ldr	r3, [r3, #0]
 80220b4:	4a55      	ldr	r2, [pc, #340]	; (802220c <FINGER_DMA_IrqHandler+0xff0>)
 80220b6:	4293      	cmp	r3, r2
 80220b8:	d00a      	beq.n	80220d0 <FINGER_DMA_IrqHandler+0xeb4>
 80220ba:	4b49      	ldr	r3, [pc, #292]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 80220bc:	681b      	ldr	r3, [r3, #0]
 80220be:	4a54      	ldr	r2, [pc, #336]	; (8022210 <FINGER_DMA_IrqHandler+0xff4>)
 80220c0:	4293      	cmp	r3, r2
 80220c2:	d102      	bne.n	80220ca <FINGER_DMA_IrqHandler+0xeae>
 80220c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80220c8:	e01e      	b.n	8022108 <FINGER_DMA_IrqHandler+0xeec>
 80220ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80220ce:	e01b      	b.n	8022108 <FINGER_DMA_IrqHandler+0xeec>
 80220d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80220d4:	e018      	b.n	8022108 <FINGER_DMA_IrqHandler+0xeec>
 80220d6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80220da:	e015      	b.n	8022108 <FINGER_DMA_IrqHandler+0xeec>
 80220dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80220e0:	e012      	b.n	8022108 <FINGER_DMA_IrqHandler+0xeec>
 80220e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80220e6:	e00f      	b.n	8022108 <FINGER_DMA_IrqHandler+0xeec>
 80220e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80220ec:	e00c      	b.n	8022108 <FINGER_DMA_IrqHandler+0xeec>
 80220ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80220f2:	e009      	b.n	8022108 <FINGER_DMA_IrqHandler+0xeec>
 80220f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80220f8:	e006      	b.n	8022108 <FINGER_DMA_IrqHandler+0xeec>
 80220fa:	2304      	movs	r3, #4
 80220fc:	e004      	b.n	8022108 <FINGER_DMA_IrqHandler+0xeec>
 80220fe:	2304      	movs	r3, #4
 8022100:	e002      	b.n	8022108 <FINGER_DMA_IrqHandler+0xeec>
 8022102:	2304      	movs	r3, #4
 8022104:	e000      	b.n	8022108 <FINGER_DMA_IrqHandler+0xeec>
 8022106:	2304      	movs	r3, #4
 8022108:	4a44      	ldr	r2, [pc, #272]	; (802221c <FINGER_DMA_IrqHandler+0x1000>)
 802210a:	60d3      	str	r3, [r2, #12]
 802210c:	e151      	b.n	80223b2 <FINGER_DMA_IrqHandler+0x1196>
 802210e:	4b34      	ldr	r3, [pc, #208]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8022110:	681b      	ldr	r3, [r3, #0]
 8022112:	461a      	mov	r2, r3
 8022114:	4b42      	ldr	r3, [pc, #264]	; (8022220 <FINGER_DMA_IrqHandler+0x1004>)
 8022116:	429a      	cmp	r2, r3
 8022118:	f240 8084 	bls.w	8022224 <FINGER_DMA_IrqHandler+0x1008>
 802211c:	4b30      	ldr	r3, [pc, #192]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 802211e:	681b      	ldr	r3, [r3, #0]
 8022120:	4a30      	ldr	r2, [pc, #192]	; (80221e4 <FINGER_DMA_IrqHandler+0xfc8>)
 8022122:	4293      	cmp	r3, r2
 8022124:	d057      	beq.n	80221d6 <FINGER_DMA_IrqHandler+0xfba>
 8022126:	4b2e      	ldr	r3, [pc, #184]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8022128:	681b      	ldr	r3, [r3, #0]
 802212a:	4a2f      	ldr	r2, [pc, #188]	; (80221e8 <FINGER_DMA_IrqHandler+0xfcc>)
 802212c:	4293      	cmp	r3, r2
 802212e:	d050      	beq.n	80221d2 <FINGER_DMA_IrqHandler+0xfb6>
 8022130:	4b2b      	ldr	r3, [pc, #172]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8022132:	681b      	ldr	r3, [r3, #0]
 8022134:	4a2d      	ldr	r2, [pc, #180]	; (80221ec <FINGER_DMA_IrqHandler+0xfd0>)
 8022136:	4293      	cmp	r3, r2
 8022138:	d049      	beq.n	80221ce <FINGER_DMA_IrqHandler+0xfb2>
 802213a:	4b29      	ldr	r3, [pc, #164]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 802213c:	681b      	ldr	r3, [r3, #0]
 802213e:	4a2c      	ldr	r2, [pc, #176]	; (80221f0 <FINGER_DMA_IrqHandler+0xfd4>)
 8022140:	4293      	cmp	r3, r2
 8022142:	d042      	beq.n	80221ca <FINGER_DMA_IrqHandler+0xfae>
 8022144:	4b26      	ldr	r3, [pc, #152]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8022146:	681b      	ldr	r3, [r3, #0]
 8022148:	4a2a      	ldr	r2, [pc, #168]	; (80221f4 <FINGER_DMA_IrqHandler+0xfd8>)
 802214a:	4293      	cmp	r3, r2
 802214c:	d03a      	beq.n	80221c4 <FINGER_DMA_IrqHandler+0xfa8>
 802214e:	4b24      	ldr	r3, [pc, #144]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8022150:	681b      	ldr	r3, [r3, #0]
 8022152:	4a29      	ldr	r2, [pc, #164]	; (80221f8 <FINGER_DMA_IrqHandler+0xfdc>)
 8022154:	4293      	cmp	r3, r2
 8022156:	d032      	beq.n	80221be <FINGER_DMA_IrqHandler+0xfa2>
 8022158:	4b21      	ldr	r3, [pc, #132]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 802215a:	681b      	ldr	r3, [r3, #0]
 802215c:	4a27      	ldr	r2, [pc, #156]	; (80221fc <FINGER_DMA_IrqHandler+0xfe0>)
 802215e:	4293      	cmp	r3, r2
 8022160:	d02a      	beq.n	80221b8 <FINGER_DMA_IrqHandler+0xf9c>
 8022162:	4b1f      	ldr	r3, [pc, #124]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8022164:	681b      	ldr	r3, [r3, #0]
 8022166:	4a26      	ldr	r2, [pc, #152]	; (8022200 <FINGER_DMA_IrqHandler+0xfe4>)
 8022168:	4293      	cmp	r3, r2
 802216a:	d022      	beq.n	80221b2 <FINGER_DMA_IrqHandler+0xf96>
 802216c:	4b1c      	ldr	r3, [pc, #112]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 802216e:	681b      	ldr	r3, [r3, #0]
 8022170:	4a24      	ldr	r2, [pc, #144]	; (8022204 <FINGER_DMA_IrqHandler+0xfe8>)
 8022172:	4293      	cmp	r3, r2
 8022174:	d01a      	beq.n	80221ac <FINGER_DMA_IrqHandler+0xf90>
 8022176:	4b1a      	ldr	r3, [pc, #104]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8022178:	681b      	ldr	r3, [r3, #0]
 802217a:	4a23      	ldr	r2, [pc, #140]	; (8022208 <FINGER_DMA_IrqHandler+0xfec>)
 802217c:	4293      	cmp	r3, r2
 802217e:	d012      	beq.n	80221a6 <FINGER_DMA_IrqHandler+0xf8a>
 8022180:	4b17      	ldr	r3, [pc, #92]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 8022182:	681b      	ldr	r3, [r3, #0]
 8022184:	4a21      	ldr	r2, [pc, #132]	; (802220c <FINGER_DMA_IrqHandler+0xff0>)
 8022186:	4293      	cmp	r3, r2
 8022188:	d00a      	beq.n	80221a0 <FINGER_DMA_IrqHandler+0xf84>
 802218a:	4b15      	ldr	r3, [pc, #84]	; (80221e0 <FINGER_DMA_IrqHandler+0xfc4>)
 802218c:	681b      	ldr	r3, [r3, #0]
 802218e:	4a20      	ldr	r2, [pc, #128]	; (8022210 <FINGER_DMA_IrqHandler+0xff4>)
 8022190:	4293      	cmp	r3, r2
 8022192:	d102      	bne.n	802219a <FINGER_DMA_IrqHandler+0xf7e>
 8022194:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8022198:	e01e      	b.n	80221d8 <FINGER_DMA_IrqHandler+0xfbc>
 802219a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 802219e:	e01b      	b.n	80221d8 <FINGER_DMA_IrqHandler+0xfbc>
 80221a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80221a4:	e018      	b.n	80221d8 <FINGER_DMA_IrqHandler+0xfbc>
 80221a6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80221aa:	e015      	b.n	80221d8 <FINGER_DMA_IrqHandler+0xfbc>
 80221ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80221b0:	e012      	b.n	80221d8 <FINGER_DMA_IrqHandler+0xfbc>
 80221b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80221b6:	e00f      	b.n	80221d8 <FINGER_DMA_IrqHandler+0xfbc>
 80221b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80221bc:	e00c      	b.n	80221d8 <FINGER_DMA_IrqHandler+0xfbc>
 80221be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80221c2:	e009      	b.n	80221d8 <FINGER_DMA_IrqHandler+0xfbc>
 80221c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80221c8:	e006      	b.n	80221d8 <FINGER_DMA_IrqHandler+0xfbc>
 80221ca:	2304      	movs	r3, #4
 80221cc:	e004      	b.n	80221d8 <FINGER_DMA_IrqHandler+0xfbc>
 80221ce:	2304      	movs	r3, #4
 80221d0:	e002      	b.n	80221d8 <FINGER_DMA_IrqHandler+0xfbc>
 80221d2:	2304      	movs	r3, #4
 80221d4:	e000      	b.n	80221d8 <FINGER_DMA_IrqHandler+0xfbc>
 80221d6:	2304      	movs	r3, #4
 80221d8:	4a10      	ldr	r2, [pc, #64]	; (802221c <FINGER_DMA_IrqHandler+0x1000>)
 80221da:	6093      	str	r3, [r2, #8]
 80221dc:	e0e9      	b.n	80223b2 <FINGER_DMA_IrqHandler+0x1196>
 80221de:	bf00      	nop
 80221e0:	2000841c 	.word	0x2000841c
 80221e4:	40026010 	.word	0x40026010
 80221e8:	40026410 	.word	0x40026410
 80221ec:	40026070 	.word	0x40026070
 80221f0:	40026470 	.word	0x40026470
 80221f4:	40026028 	.word	0x40026028
 80221f8:	40026428 	.word	0x40026428
 80221fc:	40026088 	.word	0x40026088
 8022200:	40026488 	.word	0x40026488
 8022204:	40026040 	.word	0x40026040
 8022208:	40026440 	.word	0x40026440
 802220c:	400260a0 	.word	0x400260a0
 8022210:	400264a0 	.word	0x400264a0
 8022214:	40026000 	.word	0x40026000
 8022218:	40026458 	.word	0x40026458
 802221c:	40026400 	.word	0x40026400
 8022220:	400260b8 	.word	0x400260b8
 8022224:	4b66      	ldr	r3, [pc, #408]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 8022226:	681b      	ldr	r3, [r3, #0]
 8022228:	461a      	mov	r2, r3
 802222a:	4b66      	ldr	r3, [pc, #408]	; (80223c4 <FINGER_DMA_IrqHandler+0x11a8>)
 802222c:	429a      	cmp	r2, r3
 802222e:	d960      	bls.n	80222f2 <FINGER_DMA_IrqHandler+0x10d6>
 8022230:	4b63      	ldr	r3, [pc, #396]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 8022232:	681b      	ldr	r3, [r3, #0]
 8022234:	4a64      	ldr	r2, [pc, #400]	; (80223c8 <FINGER_DMA_IrqHandler+0x11ac>)
 8022236:	4293      	cmp	r3, r2
 8022238:	d057      	beq.n	80222ea <FINGER_DMA_IrqHandler+0x10ce>
 802223a:	4b61      	ldr	r3, [pc, #388]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 802223c:	681b      	ldr	r3, [r3, #0]
 802223e:	4a63      	ldr	r2, [pc, #396]	; (80223cc <FINGER_DMA_IrqHandler+0x11b0>)
 8022240:	4293      	cmp	r3, r2
 8022242:	d050      	beq.n	80222e6 <FINGER_DMA_IrqHandler+0x10ca>
 8022244:	4b5e      	ldr	r3, [pc, #376]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 8022246:	681b      	ldr	r3, [r3, #0]
 8022248:	4a61      	ldr	r2, [pc, #388]	; (80223d0 <FINGER_DMA_IrqHandler+0x11b4>)
 802224a:	4293      	cmp	r3, r2
 802224c:	d049      	beq.n	80222e2 <FINGER_DMA_IrqHandler+0x10c6>
 802224e:	4b5c      	ldr	r3, [pc, #368]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 8022250:	681b      	ldr	r3, [r3, #0]
 8022252:	4a60      	ldr	r2, [pc, #384]	; (80223d4 <FINGER_DMA_IrqHandler+0x11b8>)
 8022254:	4293      	cmp	r3, r2
 8022256:	d042      	beq.n	80222de <FINGER_DMA_IrqHandler+0x10c2>
 8022258:	4b59      	ldr	r3, [pc, #356]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 802225a:	681b      	ldr	r3, [r3, #0]
 802225c:	4a5e      	ldr	r2, [pc, #376]	; (80223d8 <FINGER_DMA_IrqHandler+0x11bc>)
 802225e:	4293      	cmp	r3, r2
 8022260:	d03a      	beq.n	80222d8 <FINGER_DMA_IrqHandler+0x10bc>
 8022262:	4b57      	ldr	r3, [pc, #348]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 8022264:	681b      	ldr	r3, [r3, #0]
 8022266:	4a5d      	ldr	r2, [pc, #372]	; (80223dc <FINGER_DMA_IrqHandler+0x11c0>)
 8022268:	4293      	cmp	r3, r2
 802226a:	d032      	beq.n	80222d2 <FINGER_DMA_IrqHandler+0x10b6>
 802226c:	4b54      	ldr	r3, [pc, #336]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 802226e:	681b      	ldr	r3, [r3, #0]
 8022270:	4a5b      	ldr	r2, [pc, #364]	; (80223e0 <FINGER_DMA_IrqHandler+0x11c4>)
 8022272:	4293      	cmp	r3, r2
 8022274:	d02a      	beq.n	80222cc <FINGER_DMA_IrqHandler+0x10b0>
 8022276:	4b52      	ldr	r3, [pc, #328]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 8022278:	681b      	ldr	r3, [r3, #0]
 802227a:	4a5a      	ldr	r2, [pc, #360]	; (80223e4 <FINGER_DMA_IrqHandler+0x11c8>)
 802227c:	4293      	cmp	r3, r2
 802227e:	d022      	beq.n	80222c6 <FINGER_DMA_IrqHandler+0x10aa>
 8022280:	4b4f      	ldr	r3, [pc, #316]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 8022282:	681b      	ldr	r3, [r3, #0]
 8022284:	4a58      	ldr	r2, [pc, #352]	; (80223e8 <FINGER_DMA_IrqHandler+0x11cc>)
 8022286:	4293      	cmp	r3, r2
 8022288:	d01a      	beq.n	80222c0 <FINGER_DMA_IrqHandler+0x10a4>
 802228a:	4b4d      	ldr	r3, [pc, #308]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 802228c:	681b      	ldr	r3, [r3, #0]
 802228e:	4a57      	ldr	r2, [pc, #348]	; (80223ec <FINGER_DMA_IrqHandler+0x11d0>)
 8022290:	4293      	cmp	r3, r2
 8022292:	d012      	beq.n	80222ba <FINGER_DMA_IrqHandler+0x109e>
 8022294:	4b4a      	ldr	r3, [pc, #296]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 8022296:	681b      	ldr	r3, [r3, #0]
 8022298:	4a55      	ldr	r2, [pc, #340]	; (80223f0 <FINGER_DMA_IrqHandler+0x11d4>)
 802229a:	4293      	cmp	r3, r2
 802229c:	d00a      	beq.n	80222b4 <FINGER_DMA_IrqHandler+0x1098>
 802229e:	4b48      	ldr	r3, [pc, #288]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 80222a0:	681b      	ldr	r3, [r3, #0]
 80222a2:	4a54      	ldr	r2, [pc, #336]	; (80223f4 <FINGER_DMA_IrqHandler+0x11d8>)
 80222a4:	4293      	cmp	r3, r2
 80222a6:	d102      	bne.n	80222ae <FINGER_DMA_IrqHandler+0x1092>
 80222a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80222ac:	e01e      	b.n	80222ec <FINGER_DMA_IrqHandler+0x10d0>
 80222ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80222b2:	e01b      	b.n	80222ec <FINGER_DMA_IrqHandler+0x10d0>
 80222b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80222b8:	e018      	b.n	80222ec <FINGER_DMA_IrqHandler+0x10d0>
 80222ba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80222be:	e015      	b.n	80222ec <FINGER_DMA_IrqHandler+0x10d0>
 80222c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80222c4:	e012      	b.n	80222ec <FINGER_DMA_IrqHandler+0x10d0>
 80222c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80222ca:	e00f      	b.n	80222ec <FINGER_DMA_IrqHandler+0x10d0>
 80222cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80222d0:	e00c      	b.n	80222ec <FINGER_DMA_IrqHandler+0x10d0>
 80222d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80222d6:	e009      	b.n	80222ec <FINGER_DMA_IrqHandler+0x10d0>
 80222d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80222dc:	e006      	b.n	80222ec <FINGER_DMA_IrqHandler+0x10d0>
 80222de:	2304      	movs	r3, #4
 80222e0:	e004      	b.n	80222ec <FINGER_DMA_IrqHandler+0x10d0>
 80222e2:	2304      	movs	r3, #4
 80222e4:	e002      	b.n	80222ec <FINGER_DMA_IrqHandler+0x10d0>
 80222e6:	2304      	movs	r3, #4
 80222e8:	e000      	b.n	80222ec <FINGER_DMA_IrqHandler+0x10d0>
 80222ea:	2304      	movs	r3, #4
 80222ec:	4a42      	ldr	r2, [pc, #264]	; (80223f8 <FINGER_DMA_IrqHandler+0x11dc>)
 80222ee:	60d3      	str	r3, [r2, #12]
 80222f0:	e05f      	b.n	80223b2 <FINGER_DMA_IrqHandler+0x1196>
 80222f2:	4b33      	ldr	r3, [pc, #204]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 80222f4:	681b      	ldr	r3, [r3, #0]
 80222f6:	4a34      	ldr	r2, [pc, #208]	; (80223c8 <FINGER_DMA_IrqHandler+0x11ac>)
 80222f8:	4293      	cmp	r3, r2
 80222fa:	d057      	beq.n	80223ac <FINGER_DMA_IrqHandler+0x1190>
 80222fc:	4b30      	ldr	r3, [pc, #192]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 80222fe:	681b      	ldr	r3, [r3, #0]
 8022300:	4a32      	ldr	r2, [pc, #200]	; (80223cc <FINGER_DMA_IrqHandler+0x11b0>)
 8022302:	4293      	cmp	r3, r2
 8022304:	d050      	beq.n	80223a8 <FINGER_DMA_IrqHandler+0x118c>
 8022306:	4b2e      	ldr	r3, [pc, #184]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 8022308:	681b      	ldr	r3, [r3, #0]
 802230a:	4a31      	ldr	r2, [pc, #196]	; (80223d0 <FINGER_DMA_IrqHandler+0x11b4>)
 802230c:	4293      	cmp	r3, r2
 802230e:	d049      	beq.n	80223a4 <FINGER_DMA_IrqHandler+0x1188>
 8022310:	4b2b      	ldr	r3, [pc, #172]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 8022312:	681b      	ldr	r3, [r3, #0]
 8022314:	4a2f      	ldr	r2, [pc, #188]	; (80223d4 <FINGER_DMA_IrqHandler+0x11b8>)
 8022316:	4293      	cmp	r3, r2
 8022318:	d042      	beq.n	80223a0 <FINGER_DMA_IrqHandler+0x1184>
 802231a:	4b29      	ldr	r3, [pc, #164]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 802231c:	681b      	ldr	r3, [r3, #0]
 802231e:	4a2e      	ldr	r2, [pc, #184]	; (80223d8 <FINGER_DMA_IrqHandler+0x11bc>)
 8022320:	4293      	cmp	r3, r2
 8022322:	d03a      	beq.n	802239a <FINGER_DMA_IrqHandler+0x117e>
 8022324:	4b26      	ldr	r3, [pc, #152]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 8022326:	681b      	ldr	r3, [r3, #0]
 8022328:	4a2c      	ldr	r2, [pc, #176]	; (80223dc <FINGER_DMA_IrqHandler+0x11c0>)
 802232a:	4293      	cmp	r3, r2
 802232c:	d032      	beq.n	8022394 <FINGER_DMA_IrqHandler+0x1178>
 802232e:	4b24      	ldr	r3, [pc, #144]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 8022330:	681b      	ldr	r3, [r3, #0]
 8022332:	4a2b      	ldr	r2, [pc, #172]	; (80223e0 <FINGER_DMA_IrqHandler+0x11c4>)
 8022334:	4293      	cmp	r3, r2
 8022336:	d02a      	beq.n	802238e <FINGER_DMA_IrqHandler+0x1172>
 8022338:	4b21      	ldr	r3, [pc, #132]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 802233a:	681b      	ldr	r3, [r3, #0]
 802233c:	4a29      	ldr	r2, [pc, #164]	; (80223e4 <FINGER_DMA_IrqHandler+0x11c8>)
 802233e:	4293      	cmp	r3, r2
 8022340:	d022      	beq.n	8022388 <FINGER_DMA_IrqHandler+0x116c>
 8022342:	4b1f      	ldr	r3, [pc, #124]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 8022344:	681b      	ldr	r3, [r3, #0]
 8022346:	4a28      	ldr	r2, [pc, #160]	; (80223e8 <FINGER_DMA_IrqHandler+0x11cc>)
 8022348:	4293      	cmp	r3, r2
 802234a:	d01a      	beq.n	8022382 <FINGER_DMA_IrqHandler+0x1166>
 802234c:	4b1c      	ldr	r3, [pc, #112]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 802234e:	681b      	ldr	r3, [r3, #0]
 8022350:	4a26      	ldr	r2, [pc, #152]	; (80223ec <FINGER_DMA_IrqHandler+0x11d0>)
 8022352:	4293      	cmp	r3, r2
 8022354:	d012      	beq.n	802237c <FINGER_DMA_IrqHandler+0x1160>
 8022356:	4b1a      	ldr	r3, [pc, #104]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 8022358:	681b      	ldr	r3, [r3, #0]
 802235a:	4a25      	ldr	r2, [pc, #148]	; (80223f0 <FINGER_DMA_IrqHandler+0x11d4>)
 802235c:	4293      	cmp	r3, r2
 802235e:	d00a      	beq.n	8022376 <FINGER_DMA_IrqHandler+0x115a>
 8022360:	4b17      	ldr	r3, [pc, #92]	; (80223c0 <FINGER_DMA_IrqHandler+0x11a4>)
 8022362:	681b      	ldr	r3, [r3, #0]
 8022364:	4a23      	ldr	r2, [pc, #140]	; (80223f4 <FINGER_DMA_IrqHandler+0x11d8>)
 8022366:	4293      	cmp	r3, r2
 8022368:	d102      	bne.n	8022370 <FINGER_DMA_IrqHandler+0x1154>
 802236a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 802236e:	e01e      	b.n	80223ae <FINGER_DMA_IrqHandler+0x1192>
 8022370:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8022374:	e01b      	b.n	80223ae <FINGER_DMA_IrqHandler+0x1192>
 8022376:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 802237a:	e018      	b.n	80223ae <FINGER_DMA_IrqHandler+0x1192>
 802237c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8022380:	e015      	b.n	80223ae <FINGER_DMA_IrqHandler+0x1192>
 8022382:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8022386:	e012      	b.n	80223ae <FINGER_DMA_IrqHandler+0x1192>
 8022388:	f44f 7380 	mov.w	r3, #256	; 0x100
 802238c:	e00f      	b.n	80223ae <FINGER_DMA_IrqHandler+0x1192>
 802238e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8022392:	e00c      	b.n	80223ae <FINGER_DMA_IrqHandler+0x1192>
 8022394:	f44f 7380 	mov.w	r3, #256	; 0x100
 8022398:	e009      	b.n	80223ae <FINGER_DMA_IrqHandler+0x1192>
 802239a:	f44f 7380 	mov.w	r3, #256	; 0x100
 802239e:	e006      	b.n	80223ae <FINGER_DMA_IrqHandler+0x1192>
 80223a0:	2304      	movs	r3, #4
 80223a2:	e004      	b.n	80223ae <FINGER_DMA_IrqHandler+0x1192>
 80223a4:	2304      	movs	r3, #4
 80223a6:	e002      	b.n	80223ae <FINGER_DMA_IrqHandler+0x1192>
 80223a8:	2304      	movs	r3, #4
 80223aa:	e000      	b.n	80223ae <FINGER_DMA_IrqHandler+0x1192>
 80223ac:	2304      	movs	r3, #4
 80223ae:	4a12      	ldr	r2, [pc, #72]	; (80223f8 <FINGER_DMA_IrqHandler+0x11dc>)
 80223b0:	6093      	str	r3, [r2, #8]
        HAL_UART_Receive_DMA(&huart4, (uint8_t*) FINGER_DMA_RX, FINGER_DMA_RX_SZ);
 80223b2:	2280      	movs	r2, #128	; 0x80
 80223b4:	4911      	ldr	r1, [pc, #68]	; (80223fc <FINGER_DMA_IrqHandler+0x11e0>)
 80223b6:	4812      	ldr	r0, [pc, #72]	; (8022400 <FINGER_DMA_IrqHandler+0x11e4>)
 80223b8:	f014 f898 	bl	80364ec <HAL_UART_Receive_DMA>
}
 80223bc:	bf00      	nop
 80223be:	bd80      	pop	{r7, pc}
 80223c0:	2000841c 	.word	0x2000841c
 80223c4:	40026058 	.word	0x40026058
 80223c8:	40026010 	.word	0x40026010
 80223cc:	40026410 	.word	0x40026410
 80223d0:	40026070 	.word	0x40026070
 80223d4:	40026470 	.word	0x40026470
 80223d8:	40026028 	.word	0x40026028
 80223dc:	40026428 	.word	0x40026428
 80223e0:	40026088 	.word	0x40026088
 80223e4:	40026488 	.word	0x40026488
 80223e8:	40026040 	.word	0x40026040
 80223ec:	40026440 	.word	0x40026440
 80223f0:	400260a0 	.word	0x400260a0
 80223f4:	400264a0 	.word	0x400264a0
 80223f8:	40026000 	.word	0x40026000
 80223fc:	20000cf8 	.word	0x20000cf8
 8022400:	20008850 	.word	0x20008850

08022404 <FINGER_DMA_Init>:

void FINGER_DMA_Init(void) {
 8022404:	b580      	push	{r7, lr}
 8022406:	af00      	add	r7, sp, #0
    __HAL_UART_ENABLE_IT(&huart4, UART_IT_IDLE);        // enable idle line interrupt
 8022408:	4b0f      	ldr	r3, [pc, #60]	; (8022448 <FINGER_DMA_Init+0x44>)
 802240a:	681b      	ldr	r3, [r3, #0]
 802240c:	68da      	ldr	r2, [r3, #12]
 802240e:	4b0e      	ldr	r3, [pc, #56]	; (8022448 <FINGER_DMA_Init+0x44>)
 8022410:	681b      	ldr	r3, [r3, #0]
 8022412:	f042 0210 	orr.w	r2, r2, #16
 8022416:	60da      	str	r2, [r3, #12]
    __HAL_DMA_ENABLE_IT(&hdma_uart4_rx, DMA_IT_TC);    // enable DMA Tx cplt interrupt
 8022418:	4b0c      	ldr	r3, [pc, #48]	; (802244c <FINGER_DMA_Init+0x48>)
 802241a:	681b      	ldr	r3, [r3, #0]
 802241c:	681a      	ldr	r2, [r3, #0]
 802241e:	4b0b      	ldr	r3, [pc, #44]	; (802244c <FINGER_DMA_Init+0x48>)
 8022420:	681b      	ldr	r3, [r3, #0]
 8022422:	f042 0210 	orr.w	r2, r2, #16
 8022426:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE_IT(&hdma_uart4_rx, DMA_IT_HT);    // enable half complete interrupt
 8022428:	4b08      	ldr	r3, [pc, #32]	; (802244c <FINGER_DMA_Init+0x48>)
 802242a:	681b      	ldr	r3, [r3, #0]
 802242c:	681a      	ldr	r2, [r3, #0]
 802242e:	4b07      	ldr	r3, [pc, #28]	; (802244c <FINGER_DMA_Init+0x48>)
 8022430:	681b      	ldr	r3, [r3, #0]
 8022432:	f042 0208 	orr.w	r2, r2, #8
 8022436:	601a      	str	r2, [r3, #0]

    /* Start DMA transfer */
    HAL_UART_Receive_DMA(&huart4, (uint8_t*) FINGER_DMA_RX, FINGER_DMA_RX_SZ);
 8022438:	2280      	movs	r2, #128	; 0x80
 802243a:	4905      	ldr	r1, [pc, #20]	; (8022450 <FINGER_DMA_Init+0x4c>)
 802243c:	4802      	ldr	r0, [pc, #8]	; (8022448 <FINGER_DMA_Init+0x44>)
 802243e:	f014 f855 	bl	80364ec <HAL_UART_Receive_DMA>
}
 8022442:	bf00      	nop
 8022444:	bd80      	pop	{r7, pc}
 8022446:	bf00      	nop
 8022448:	20008850 	.word	0x20008850
 802244c:	2000841c 	.word	0x2000841c
 8022450:	20000cf8 	.word	0x20000cf8

08022454 <FINGER_Check_Buffer>:

static void FINGER_Check_Buffer(void) {
 8022454:	b580      	push	{r7, lr}
 8022456:	b082      	sub	sp, #8
 8022458:	af00      	add	r7, sp, #0
    static size_t old_pos;
    size_t pos;

    /* Calculate current position in buffer */
    pos = FINGER_DMA_RX_SZ - __HAL_DMA_GET_COUNTER(&hdma_uart4_rx);
 802245a:	4b1e      	ldr	r3, [pc, #120]	; (80224d4 <FINGER_Check_Buffer+0x80>)
 802245c:	681b      	ldr	r3, [r3, #0]
 802245e:	685b      	ldr	r3, [r3, #4]
 8022460:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8022464:	607b      	str	r3, [r7, #4]
    if (pos != old_pos) { /* Check change in received data */
 8022466:	4b1c      	ldr	r3, [pc, #112]	; (80224d8 <FINGER_Check_Buffer+0x84>)
 8022468:	681b      	ldr	r3, [r3, #0]
 802246a:	687a      	ldr	r2, [r7, #4]
 802246c:	429a      	cmp	r2, r3
 802246e:	d023      	beq.n	80224b8 <FINGER_Check_Buffer+0x64>
        if (pos > old_pos) { /* Current position is over previous one */
 8022470:	4b19      	ldr	r3, [pc, #100]	; (80224d8 <FINGER_Check_Buffer+0x84>)
 8022472:	681b      	ldr	r3, [r3, #0]
 8022474:	687a      	ldr	r2, [r7, #4]
 8022476:	429a      	cmp	r2, r3
 8022478:	d90b      	bls.n	8022492 <FINGER_Check_Buffer+0x3e>
            /* We are in "linear" mode */
            /* Process data directly by subtracting "pointers" */
            FINGER_Fill_Buffer(&FINGER_DMA_RX[old_pos], pos - old_pos);
 802247a:	4b17      	ldr	r3, [pc, #92]	; (80224d8 <FINGER_Check_Buffer+0x84>)
 802247c:	681b      	ldr	r3, [r3, #0]
 802247e:	4a17      	ldr	r2, [pc, #92]	; (80224dc <FINGER_Check_Buffer+0x88>)
 8022480:	1898      	adds	r0, r3, r2
 8022482:	4b15      	ldr	r3, [pc, #84]	; (80224d8 <FINGER_Check_Buffer+0x84>)
 8022484:	681b      	ldr	r3, [r3, #0]
 8022486:	687a      	ldr	r2, [r7, #4]
 8022488:	1ad3      	subs	r3, r2, r3
 802248a:	4619      	mov	r1, r3
 802248c:	f000 f828 	bl	80224e0 <FINGER_Fill_Buffer>
 8022490:	e012      	b.n	80224b8 <FINGER_Check_Buffer+0x64>
        } else {
            /* We are in "overflow" mode */
            /* First process data to the end of buffer */
            FINGER_Fill_Buffer(&FINGER_DMA_RX[old_pos], FINGER_DMA_RX_SZ - old_pos);
 8022492:	4b11      	ldr	r3, [pc, #68]	; (80224d8 <FINGER_Check_Buffer+0x84>)
 8022494:	681b      	ldr	r3, [r3, #0]
 8022496:	4a11      	ldr	r2, [pc, #68]	; (80224dc <FINGER_Check_Buffer+0x88>)
 8022498:	441a      	add	r2, r3
 802249a:	4b0f      	ldr	r3, [pc, #60]	; (80224d8 <FINGER_Check_Buffer+0x84>)
 802249c:	681b      	ldr	r3, [r3, #0]
 802249e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80224a2:	4619      	mov	r1, r3
 80224a4:	4610      	mov	r0, r2
 80224a6:	f000 f81b 	bl	80224e0 <FINGER_Fill_Buffer>
            /* Check and continue with beginning of buffer */
            if (pos > 0) {
 80224aa:	687b      	ldr	r3, [r7, #4]
 80224ac:	2b00      	cmp	r3, #0
 80224ae:	d003      	beq.n	80224b8 <FINGER_Check_Buffer+0x64>
                FINGER_Fill_Buffer(&FINGER_DMA_RX[0], pos);
 80224b0:	6879      	ldr	r1, [r7, #4]
 80224b2:	480a      	ldr	r0, [pc, #40]	; (80224dc <FINGER_Check_Buffer+0x88>)
 80224b4:	f000 f814 	bl	80224e0 <FINGER_Fill_Buffer>
            }
        }
    }
    old_pos = pos; /* Save current position as old */
 80224b8:	4a07      	ldr	r2, [pc, #28]	; (80224d8 <FINGER_Check_Buffer+0x84>)
 80224ba:	687b      	ldr	r3, [r7, #4]
 80224bc:	6013      	str	r3, [r2, #0]

    /* Check and manually update if we reached end of buffer */
    if (old_pos == FINGER_DMA_RX_SZ) {
 80224be:	4b06      	ldr	r3, [pc, #24]	; (80224d8 <FINGER_Check_Buffer+0x84>)
 80224c0:	681b      	ldr	r3, [r3, #0]
 80224c2:	2b80      	cmp	r3, #128	; 0x80
 80224c4:	d102      	bne.n	80224cc <FINGER_Check_Buffer+0x78>
        old_pos = 0;
 80224c6:	4b04      	ldr	r3, [pc, #16]	; (80224d8 <FINGER_Check_Buffer+0x84>)
 80224c8:	2200      	movs	r2, #0
 80224ca:	601a      	str	r2, [r3, #0]
    }
}
 80224cc:	bf00      	nop
 80224ce:	3708      	adds	r7, #8
 80224d0:	46bd      	mov	sp, r7
 80224d2:	bd80      	pop	{r7, pc}
 80224d4:	2000841c 	.word	0x2000841c
 80224d8:	20000d7c 	.word	0x20000d7c
 80224dc:	20000cf8 	.word	0x20000cf8

080224e0 <FINGER_Fill_Buffer>:

static void FINGER_Fill_Buffer(const void *data, size_t len) {
 80224e0:	b580      	push	{r7, lr}
 80224e2:	b082      	sub	sp, #8
 80224e4:	af00      	add	r7, sp, #0
 80224e6:	6078      	str	r0, [r7, #4]
 80224e8:	6039      	str	r1, [r7, #0]
    /* Write data to buffer */
    memcpy(&FINGER_UART_RX[finger_write], data, len);
 80224ea:	4b09      	ldr	r3, [pc, #36]	; (8022510 <FINGER_Fill_Buffer+0x30>)
 80224ec:	681b      	ldr	r3, [r3, #0]
 80224ee:	4a09      	ldr	r2, [pc, #36]	; (8022514 <FINGER_Fill_Buffer+0x34>)
 80224f0:	4413      	add	r3, r2
 80224f2:	683a      	ldr	r2, [r7, #0]
 80224f4:	6879      	ldr	r1, [r7, #4]
 80224f6:	4618      	mov	r0, r3
 80224f8:	f01d fa81 	bl	803f9fe <memcpy>
    finger_write += len;
 80224fc:	4b04      	ldr	r3, [pc, #16]	; (8022510 <FINGER_Fill_Buffer+0x30>)
 80224fe:	681a      	ldr	r2, [r3, #0]
 8022500:	683b      	ldr	r3, [r7, #0]
 8022502:	4413      	add	r3, r2
 8022504:	4a02      	ldr	r2, [pc, #8]	; (8022510 <FINGER_Fill_Buffer+0x30>)
 8022506:	6013      	str	r3, [r2, #0]
}
 8022508:	bf00      	nop
 802250a:	3708      	adds	r7, #8
 802250c:	46bd      	mov	sp, r7
 802250e:	bd80      	pop	{r7, pc}
 8022510:	20000d78 	.word	0x20000d78
 8022514:	20008068 	.word	0x20008068

08022518 <FINGER_Reset_Buffer>:

void FINGER_Reset_Buffer(void) {
 8022518:	b580      	push	{r7, lr}
 802251a:	af00      	add	r7, sp, #0
    // clear rx buffer
    memset(FINGER_UART_RX, 0x00, finger_write);
 802251c:	4b05      	ldr	r3, [pc, #20]	; (8022534 <FINGER_Reset_Buffer+0x1c>)
 802251e:	681b      	ldr	r3, [r3, #0]
 8022520:	461a      	mov	r2, r3
 8022522:	2100      	movs	r1, #0
 8022524:	4804      	ldr	r0, [pc, #16]	; (8022538 <FINGER_Reset_Buffer+0x20>)
 8022526:	f01d fa75 	bl	803fa14 <memset>
    finger_write = 0;
 802252a:	4b02      	ldr	r3, [pc, #8]	; (8022534 <FINGER_Reset_Buffer+0x1c>)
 802252c:	2200      	movs	r2, #0
 802252e:	601a      	str	r2, [r3, #0]
}
 8022530:	bf00      	nop
 8022532:	bd80      	pop	{r7, pc}
 8022534:	20000d78 	.word	0x20000d78
 8022538:	20008068 	.word	0x20008068

0802253c <FINGER_Transmit8>:

uint8_t FINGER_Transmit8(uint8_t *pData) {
 802253c:	b580      	push	{r7, lr}
 802253e:	b082      	sub	sp, #8
 8022540:	af00      	add	r7, sp, #0
 8022542:	6078      	str	r0, [r7, #4]
    return (HAL_UART_Transmit(&huart4, pData, 1, HAL_MAX_DELAY) == HAL_OK);
 8022544:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022548:	2201      	movs	r2, #1
 802254a:	6879      	ldr	r1, [r7, #4]
 802254c:	4806      	ldr	r0, [pc, #24]	; (8022568 <FINGER_Transmit8+0x2c>)
 802254e:	f013 ff34 	bl	80363ba <HAL_UART_Transmit>
 8022552:	4603      	mov	r3, r0
 8022554:	2b00      	cmp	r3, #0
 8022556:	bf0c      	ite	eq
 8022558:	2301      	moveq	r3, #1
 802255a:	2300      	movne	r3, #0
 802255c:	b2db      	uxtb	r3, r3
}
 802255e:	4618      	mov	r0, r3
 8022560:	3708      	adds	r7, #8
 8022562:	46bd      	mov	sp, r7
 8022564:	bd80      	pop	{r7, pc}
 8022566:	bf00      	nop
 8022568:	20008850 	.word	0x20008850

0802256c <UBLOX_USART_IrqHandler>:
static void UBLOX_Check_Buffer(uint8_t idle);
static void UBLOX_Fill_Buffer(const void *data, size_t len);
static void UBLOX_Reset_Buffer(void);

/* Public functions implementation ---------------------------------------------*/
void UBLOX_USART_IrqHandler(void) {
 802256c:	b580      	push	{r7, lr}
 802256e:	b082      	sub	sp, #8
 8022570:	af00      	add	r7, sp, #0
    /* if Idle flag is set */
    if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE)) {
 8022572:	4b0c      	ldr	r3, [pc, #48]	; (80225a4 <UBLOX_USART_IrqHandler+0x38>)
 8022574:	681b      	ldr	r3, [r3, #0]
 8022576:	681b      	ldr	r3, [r3, #0]
 8022578:	f003 0310 	and.w	r3, r3, #16
 802257c:	2b10      	cmp	r3, #16
 802257e:	d10d      	bne.n	802259c <UBLOX_USART_IrqHandler+0x30>
        /* Clear idle flag */
        __HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8022580:	2300      	movs	r3, #0
 8022582:	607b      	str	r3, [r7, #4]
 8022584:	4b07      	ldr	r3, [pc, #28]	; (80225a4 <UBLOX_USART_IrqHandler+0x38>)
 8022586:	681b      	ldr	r3, [r3, #0]
 8022588:	681b      	ldr	r3, [r3, #0]
 802258a:	607b      	str	r3, [r7, #4]
 802258c:	4b05      	ldr	r3, [pc, #20]	; (80225a4 <UBLOX_USART_IrqHandler+0x38>)
 802258e:	681b      	ldr	r3, [r3, #0]
 8022590:	685b      	ldr	r3, [r3, #4]
 8022592:	607b      	str	r3, [r7, #4]
 8022594:	687b      	ldr	r3, [r7, #4]

        UBLOX_Check_Buffer(1);
 8022596:	2001      	movs	r0, #1
 8022598:	f001 f922 	bl	80237e0 <UBLOX_Check_Buffer>
    }
}
 802259c:	bf00      	nop
 802259e:	3708      	adds	r7, #8
 80225a0:	46bd      	mov	sp, r7
 80225a2:	bd80      	pop	{r7, pc}
 80225a4:	200088f0 	.word	0x200088f0

080225a8 <UBLOX_DMA_IrqHandler>:

void UBLOX_DMA_IrqHandler(void) {
 80225a8:	b580      	push	{r7, lr}
 80225aa:	af00      	add	r7, sp, #0
    // if the source is HT
    if (__HAL_DMA_GET_IT_SOURCE(&hdma_usart2_rx, DMA_IT_HT)) {
 80225ac:	4b9a      	ldr	r3, [pc, #616]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80225ae:	681b      	ldr	r3, [r3, #0]
 80225b0:	681b      	ldr	r3, [r3, #0]
 80225b2:	f003 0308 	and.w	r3, r3, #8
 80225b6:	2b00      	cmp	r3, #0
 80225b8:	f000 81bd 	beq.w	8022936 <UBLOX_DMA_IrqHandler+0x38e>
        /* Clear HT flag */
        __HAL_DMA_CLEAR_FLAG(&hdma_usart2_rx, __HAL_DMA_GET_HT_FLAG_INDEX(&hdma_usart2_rx));
 80225bc:	4b96      	ldr	r3, [pc, #600]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80225be:	681b      	ldr	r3, [r3, #0]
 80225c0:	461a      	mov	r2, r3
 80225c2:	4b96      	ldr	r3, [pc, #600]	; (802281c <UBLOX_DMA_IrqHandler+0x274>)
 80225c4:	429a      	cmp	r2, r3
 80225c6:	d960      	bls.n	802268a <UBLOX_DMA_IrqHandler+0xe2>
 80225c8:	4b93      	ldr	r3, [pc, #588]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80225ca:	681b      	ldr	r3, [r3, #0]
 80225cc:	4a94      	ldr	r2, [pc, #592]	; (8022820 <UBLOX_DMA_IrqHandler+0x278>)
 80225ce:	4293      	cmp	r3, r2
 80225d0:	d057      	beq.n	8022682 <UBLOX_DMA_IrqHandler+0xda>
 80225d2:	4b91      	ldr	r3, [pc, #580]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80225d4:	681b      	ldr	r3, [r3, #0]
 80225d6:	4a93      	ldr	r2, [pc, #588]	; (8022824 <UBLOX_DMA_IrqHandler+0x27c>)
 80225d8:	4293      	cmp	r3, r2
 80225da:	d050      	beq.n	802267e <UBLOX_DMA_IrqHandler+0xd6>
 80225dc:	4b8e      	ldr	r3, [pc, #568]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80225de:	681b      	ldr	r3, [r3, #0]
 80225e0:	4a91      	ldr	r2, [pc, #580]	; (8022828 <UBLOX_DMA_IrqHandler+0x280>)
 80225e2:	4293      	cmp	r3, r2
 80225e4:	d049      	beq.n	802267a <UBLOX_DMA_IrqHandler+0xd2>
 80225e6:	4b8c      	ldr	r3, [pc, #560]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80225e8:	681b      	ldr	r3, [r3, #0]
 80225ea:	4a90      	ldr	r2, [pc, #576]	; (802282c <UBLOX_DMA_IrqHandler+0x284>)
 80225ec:	4293      	cmp	r3, r2
 80225ee:	d042      	beq.n	8022676 <UBLOX_DMA_IrqHandler+0xce>
 80225f0:	4b89      	ldr	r3, [pc, #548]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80225f2:	681b      	ldr	r3, [r3, #0]
 80225f4:	4a8e      	ldr	r2, [pc, #568]	; (8022830 <UBLOX_DMA_IrqHandler+0x288>)
 80225f6:	4293      	cmp	r3, r2
 80225f8:	d03a      	beq.n	8022670 <UBLOX_DMA_IrqHandler+0xc8>
 80225fa:	4b87      	ldr	r3, [pc, #540]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80225fc:	681b      	ldr	r3, [r3, #0]
 80225fe:	4a8d      	ldr	r2, [pc, #564]	; (8022834 <UBLOX_DMA_IrqHandler+0x28c>)
 8022600:	4293      	cmp	r3, r2
 8022602:	d032      	beq.n	802266a <UBLOX_DMA_IrqHandler+0xc2>
 8022604:	4b84      	ldr	r3, [pc, #528]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 8022606:	681b      	ldr	r3, [r3, #0]
 8022608:	4a8b      	ldr	r2, [pc, #556]	; (8022838 <UBLOX_DMA_IrqHandler+0x290>)
 802260a:	4293      	cmp	r3, r2
 802260c:	d02a      	beq.n	8022664 <UBLOX_DMA_IrqHandler+0xbc>
 802260e:	4b82      	ldr	r3, [pc, #520]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 8022610:	681b      	ldr	r3, [r3, #0]
 8022612:	4a8a      	ldr	r2, [pc, #552]	; (802283c <UBLOX_DMA_IrqHandler+0x294>)
 8022614:	4293      	cmp	r3, r2
 8022616:	d022      	beq.n	802265e <UBLOX_DMA_IrqHandler+0xb6>
 8022618:	4b7f      	ldr	r3, [pc, #508]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 802261a:	681b      	ldr	r3, [r3, #0]
 802261c:	4a88      	ldr	r2, [pc, #544]	; (8022840 <UBLOX_DMA_IrqHandler+0x298>)
 802261e:	4293      	cmp	r3, r2
 8022620:	d01a      	beq.n	8022658 <UBLOX_DMA_IrqHandler+0xb0>
 8022622:	4b7d      	ldr	r3, [pc, #500]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 8022624:	681b      	ldr	r3, [r3, #0]
 8022626:	4a87      	ldr	r2, [pc, #540]	; (8022844 <UBLOX_DMA_IrqHandler+0x29c>)
 8022628:	4293      	cmp	r3, r2
 802262a:	d012      	beq.n	8022652 <UBLOX_DMA_IrqHandler+0xaa>
 802262c:	4b7a      	ldr	r3, [pc, #488]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 802262e:	681b      	ldr	r3, [r3, #0]
 8022630:	4a85      	ldr	r2, [pc, #532]	; (8022848 <UBLOX_DMA_IrqHandler+0x2a0>)
 8022632:	4293      	cmp	r3, r2
 8022634:	d00a      	beq.n	802264c <UBLOX_DMA_IrqHandler+0xa4>
 8022636:	4b78      	ldr	r3, [pc, #480]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 8022638:	681b      	ldr	r3, [r3, #0]
 802263a:	4a84      	ldr	r2, [pc, #528]	; (802284c <UBLOX_DMA_IrqHandler+0x2a4>)
 802263c:	4293      	cmp	r3, r2
 802263e:	d102      	bne.n	8022646 <UBLOX_DMA_IrqHandler+0x9e>
 8022640:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8022644:	e01e      	b.n	8022684 <UBLOX_DMA_IrqHandler+0xdc>
 8022646:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 802264a:	e01b      	b.n	8022684 <UBLOX_DMA_IrqHandler+0xdc>
 802264c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8022650:	e018      	b.n	8022684 <UBLOX_DMA_IrqHandler+0xdc>
 8022652:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8022656:	e015      	b.n	8022684 <UBLOX_DMA_IrqHandler+0xdc>
 8022658:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 802265c:	e012      	b.n	8022684 <UBLOX_DMA_IrqHandler+0xdc>
 802265e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022662:	e00f      	b.n	8022684 <UBLOX_DMA_IrqHandler+0xdc>
 8022664:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022668:	e00c      	b.n	8022684 <UBLOX_DMA_IrqHandler+0xdc>
 802266a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802266e:	e009      	b.n	8022684 <UBLOX_DMA_IrqHandler+0xdc>
 8022670:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022674:	e006      	b.n	8022684 <UBLOX_DMA_IrqHandler+0xdc>
 8022676:	2310      	movs	r3, #16
 8022678:	e004      	b.n	8022684 <UBLOX_DMA_IrqHandler+0xdc>
 802267a:	2310      	movs	r3, #16
 802267c:	e002      	b.n	8022684 <UBLOX_DMA_IrqHandler+0xdc>
 802267e:	2310      	movs	r3, #16
 8022680:	e000      	b.n	8022684 <UBLOX_DMA_IrqHandler+0xdc>
 8022682:	2310      	movs	r3, #16
 8022684:	4a72      	ldr	r2, [pc, #456]	; (8022850 <UBLOX_DMA_IrqHandler+0x2a8>)
 8022686:	60d3      	str	r3, [r2, #12]
 8022688:	e150      	b.n	802292c <UBLOX_DMA_IrqHandler+0x384>
 802268a:	4b63      	ldr	r3, [pc, #396]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 802268c:	681b      	ldr	r3, [r3, #0]
 802268e:	461a      	mov	r2, r3
 8022690:	4b70      	ldr	r3, [pc, #448]	; (8022854 <UBLOX_DMA_IrqHandler+0x2ac>)
 8022692:	429a      	cmp	r2, r3
 8022694:	d960      	bls.n	8022758 <UBLOX_DMA_IrqHandler+0x1b0>
 8022696:	4b60      	ldr	r3, [pc, #384]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 8022698:	681b      	ldr	r3, [r3, #0]
 802269a:	4a61      	ldr	r2, [pc, #388]	; (8022820 <UBLOX_DMA_IrqHandler+0x278>)
 802269c:	4293      	cmp	r3, r2
 802269e:	d057      	beq.n	8022750 <UBLOX_DMA_IrqHandler+0x1a8>
 80226a0:	4b5d      	ldr	r3, [pc, #372]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80226a2:	681b      	ldr	r3, [r3, #0]
 80226a4:	4a5f      	ldr	r2, [pc, #380]	; (8022824 <UBLOX_DMA_IrqHandler+0x27c>)
 80226a6:	4293      	cmp	r3, r2
 80226a8:	d050      	beq.n	802274c <UBLOX_DMA_IrqHandler+0x1a4>
 80226aa:	4b5b      	ldr	r3, [pc, #364]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80226ac:	681b      	ldr	r3, [r3, #0]
 80226ae:	4a5e      	ldr	r2, [pc, #376]	; (8022828 <UBLOX_DMA_IrqHandler+0x280>)
 80226b0:	4293      	cmp	r3, r2
 80226b2:	d049      	beq.n	8022748 <UBLOX_DMA_IrqHandler+0x1a0>
 80226b4:	4b58      	ldr	r3, [pc, #352]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80226b6:	681b      	ldr	r3, [r3, #0]
 80226b8:	4a5c      	ldr	r2, [pc, #368]	; (802282c <UBLOX_DMA_IrqHandler+0x284>)
 80226ba:	4293      	cmp	r3, r2
 80226bc:	d042      	beq.n	8022744 <UBLOX_DMA_IrqHandler+0x19c>
 80226be:	4b56      	ldr	r3, [pc, #344]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80226c0:	681b      	ldr	r3, [r3, #0]
 80226c2:	4a5b      	ldr	r2, [pc, #364]	; (8022830 <UBLOX_DMA_IrqHandler+0x288>)
 80226c4:	4293      	cmp	r3, r2
 80226c6:	d03a      	beq.n	802273e <UBLOX_DMA_IrqHandler+0x196>
 80226c8:	4b53      	ldr	r3, [pc, #332]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80226ca:	681b      	ldr	r3, [r3, #0]
 80226cc:	4a59      	ldr	r2, [pc, #356]	; (8022834 <UBLOX_DMA_IrqHandler+0x28c>)
 80226ce:	4293      	cmp	r3, r2
 80226d0:	d032      	beq.n	8022738 <UBLOX_DMA_IrqHandler+0x190>
 80226d2:	4b51      	ldr	r3, [pc, #324]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80226d4:	681b      	ldr	r3, [r3, #0]
 80226d6:	4a58      	ldr	r2, [pc, #352]	; (8022838 <UBLOX_DMA_IrqHandler+0x290>)
 80226d8:	4293      	cmp	r3, r2
 80226da:	d02a      	beq.n	8022732 <UBLOX_DMA_IrqHandler+0x18a>
 80226dc:	4b4e      	ldr	r3, [pc, #312]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80226de:	681b      	ldr	r3, [r3, #0]
 80226e0:	4a56      	ldr	r2, [pc, #344]	; (802283c <UBLOX_DMA_IrqHandler+0x294>)
 80226e2:	4293      	cmp	r3, r2
 80226e4:	d022      	beq.n	802272c <UBLOX_DMA_IrqHandler+0x184>
 80226e6:	4b4c      	ldr	r3, [pc, #304]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80226e8:	681b      	ldr	r3, [r3, #0]
 80226ea:	4a55      	ldr	r2, [pc, #340]	; (8022840 <UBLOX_DMA_IrqHandler+0x298>)
 80226ec:	4293      	cmp	r3, r2
 80226ee:	d01a      	beq.n	8022726 <UBLOX_DMA_IrqHandler+0x17e>
 80226f0:	4b49      	ldr	r3, [pc, #292]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80226f2:	681b      	ldr	r3, [r3, #0]
 80226f4:	4a53      	ldr	r2, [pc, #332]	; (8022844 <UBLOX_DMA_IrqHandler+0x29c>)
 80226f6:	4293      	cmp	r3, r2
 80226f8:	d012      	beq.n	8022720 <UBLOX_DMA_IrqHandler+0x178>
 80226fa:	4b47      	ldr	r3, [pc, #284]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80226fc:	681b      	ldr	r3, [r3, #0]
 80226fe:	4a52      	ldr	r2, [pc, #328]	; (8022848 <UBLOX_DMA_IrqHandler+0x2a0>)
 8022700:	4293      	cmp	r3, r2
 8022702:	d00a      	beq.n	802271a <UBLOX_DMA_IrqHandler+0x172>
 8022704:	4b44      	ldr	r3, [pc, #272]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 8022706:	681b      	ldr	r3, [r3, #0]
 8022708:	4a50      	ldr	r2, [pc, #320]	; (802284c <UBLOX_DMA_IrqHandler+0x2a4>)
 802270a:	4293      	cmp	r3, r2
 802270c:	d102      	bne.n	8022714 <UBLOX_DMA_IrqHandler+0x16c>
 802270e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8022712:	e01e      	b.n	8022752 <UBLOX_DMA_IrqHandler+0x1aa>
 8022714:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8022718:	e01b      	b.n	8022752 <UBLOX_DMA_IrqHandler+0x1aa>
 802271a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 802271e:	e018      	b.n	8022752 <UBLOX_DMA_IrqHandler+0x1aa>
 8022720:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8022724:	e015      	b.n	8022752 <UBLOX_DMA_IrqHandler+0x1aa>
 8022726:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 802272a:	e012      	b.n	8022752 <UBLOX_DMA_IrqHandler+0x1aa>
 802272c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022730:	e00f      	b.n	8022752 <UBLOX_DMA_IrqHandler+0x1aa>
 8022732:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022736:	e00c      	b.n	8022752 <UBLOX_DMA_IrqHandler+0x1aa>
 8022738:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802273c:	e009      	b.n	8022752 <UBLOX_DMA_IrqHandler+0x1aa>
 802273e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022742:	e006      	b.n	8022752 <UBLOX_DMA_IrqHandler+0x1aa>
 8022744:	2310      	movs	r3, #16
 8022746:	e004      	b.n	8022752 <UBLOX_DMA_IrqHandler+0x1aa>
 8022748:	2310      	movs	r3, #16
 802274a:	e002      	b.n	8022752 <UBLOX_DMA_IrqHandler+0x1aa>
 802274c:	2310      	movs	r3, #16
 802274e:	e000      	b.n	8022752 <UBLOX_DMA_IrqHandler+0x1aa>
 8022750:	2310      	movs	r3, #16
 8022752:	4a3f      	ldr	r2, [pc, #252]	; (8022850 <UBLOX_DMA_IrqHandler+0x2a8>)
 8022754:	6093      	str	r3, [r2, #8]
 8022756:	e0e9      	b.n	802292c <UBLOX_DMA_IrqHandler+0x384>
 8022758:	4b2f      	ldr	r3, [pc, #188]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 802275a:	681b      	ldr	r3, [r3, #0]
 802275c:	461a      	mov	r2, r3
 802275e:	4b3e      	ldr	r3, [pc, #248]	; (8022858 <UBLOX_DMA_IrqHandler+0x2b0>)
 8022760:	429a      	cmp	r2, r3
 8022762:	f240 8083 	bls.w	802286c <UBLOX_DMA_IrqHandler+0x2c4>
 8022766:	4b2c      	ldr	r3, [pc, #176]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 8022768:	681b      	ldr	r3, [r3, #0]
 802276a:	4a2d      	ldr	r2, [pc, #180]	; (8022820 <UBLOX_DMA_IrqHandler+0x278>)
 802276c:	4293      	cmp	r3, r2
 802276e:	d079      	beq.n	8022864 <UBLOX_DMA_IrqHandler+0x2bc>
 8022770:	4b29      	ldr	r3, [pc, #164]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 8022772:	681b      	ldr	r3, [r3, #0]
 8022774:	4a2b      	ldr	r2, [pc, #172]	; (8022824 <UBLOX_DMA_IrqHandler+0x27c>)
 8022776:	4293      	cmp	r3, r2
 8022778:	d072      	beq.n	8022860 <UBLOX_DMA_IrqHandler+0x2b8>
 802277a:	4b27      	ldr	r3, [pc, #156]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 802277c:	681b      	ldr	r3, [r3, #0]
 802277e:	4a2a      	ldr	r2, [pc, #168]	; (8022828 <UBLOX_DMA_IrqHandler+0x280>)
 8022780:	4293      	cmp	r3, r2
 8022782:	d06b      	beq.n	802285c <UBLOX_DMA_IrqHandler+0x2b4>
 8022784:	4b24      	ldr	r3, [pc, #144]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 8022786:	681b      	ldr	r3, [r3, #0]
 8022788:	4a28      	ldr	r2, [pc, #160]	; (802282c <UBLOX_DMA_IrqHandler+0x284>)
 802278a:	4293      	cmp	r3, r2
 802278c:	d042      	beq.n	8022814 <UBLOX_DMA_IrqHandler+0x26c>
 802278e:	4b22      	ldr	r3, [pc, #136]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 8022790:	681b      	ldr	r3, [r3, #0]
 8022792:	4a27      	ldr	r2, [pc, #156]	; (8022830 <UBLOX_DMA_IrqHandler+0x288>)
 8022794:	4293      	cmp	r3, r2
 8022796:	d03a      	beq.n	802280e <UBLOX_DMA_IrqHandler+0x266>
 8022798:	4b1f      	ldr	r3, [pc, #124]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 802279a:	681b      	ldr	r3, [r3, #0]
 802279c:	4a25      	ldr	r2, [pc, #148]	; (8022834 <UBLOX_DMA_IrqHandler+0x28c>)
 802279e:	4293      	cmp	r3, r2
 80227a0:	d032      	beq.n	8022808 <UBLOX_DMA_IrqHandler+0x260>
 80227a2:	4b1d      	ldr	r3, [pc, #116]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80227a4:	681b      	ldr	r3, [r3, #0]
 80227a6:	4a24      	ldr	r2, [pc, #144]	; (8022838 <UBLOX_DMA_IrqHandler+0x290>)
 80227a8:	4293      	cmp	r3, r2
 80227aa:	d02a      	beq.n	8022802 <UBLOX_DMA_IrqHandler+0x25a>
 80227ac:	4b1a      	ldr	r3, [pc, #104]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80227ae:	681b      	ldr	r3, [r3, #0]
 80227b0:	4a22      	ldr	r2, [pc, #136]	; (802283c <UBLOX_DMA_IrqHandler+0x294>)
 80227b2:	4293      	cmp	r3, r2
 80227b4:	d022      	beq.n	80227fc <UBLOX_DMA_IrqHandler+0x254>
 80227b6:	4b18      	ldr	r3, [pc, #96]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80227b8:	681b      	ldr	r3, [r3, #0]
 80227ba:	4a21      	ldr	r2, [pc, #132]	; (8022840 <UBLOX_DMA_IrqHandler+0x298>)
 80227bc:	4293      	cmp	r3, r2
 80227be:	d01a      	beq.n	80227f6 <UBLOX_DMA_IrqHandler+0x24e>
 80227c0:	4b15      	ldr	r3, [pc, #84]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80227c2:	681b      	ldr	r3, [r3, #0]
 80227c4:	4a1f      	ldr	r2, [pc, #124]	; (8022844 <UBLOX_DMA_IrqHandler+0x29c>)
 80227c6:	4293      	cmp	r3, r2
 80227c8:	d012      	beq.n	80227f0 <UBLOX_DMA_IrqHandler+0x248>
 80227ca:	4b13      	ldr	r3, [pc, #76]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80227cc:	681b      	ldr	r3, [r3, #0]
 80227ce:	4a1e      	ldr	r2, [pc, #120]	; (8022848 <UBLOX_DMA_IrqHandler+0x2a0>)
 80227d0:	4293      	cmp	r3, r2
 80227d2:	d00a      	beq.n	80227ea <UBLOX_DMA_IrqHandler+0x242>
 80227d4:	4b10      	ldr	r3, [pc, #64]	; (8022818 <UBLOX_DMA_IrqHandler+0x270>)
 80227d6:	681b      	ldr	r3, [r3, #0]
 80227d8:	4a1c      	ldr	r2, [pc, #112]	; (802284c <UBLOX_DMA_IrqHandler+0x2a4>)
 80227da:	4293      	cmp	r3, r2
 80227dc:	d102      	bne.n	80227e4 <UBLOX_DMA_IrqHandler+0x23c>
 80227de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80227e2:	e040      	b.n	8022866 <UBLOX_DMA_IrqHandler+0x2be>
 80227e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80227e8:	e03d      	b.n	8022866 <UBLOX_DMA_IrqHandler+0x2be>
 80227ea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80227ee:	e03a      	b.n	8022866 <UBLOX_DMA_IrqHandler+0x2be>
 80227f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80227f4:	e037      	b.n	8022866 <UBLOX_DMA_IrqHandler+0x2be>
 80227f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80227fa:	e034      	b.n	8022866 <UBLOX_DMA_IrqHandler+0x2be>
 80227fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022800:	e031      	b.n	8022866 <UBLOX_DMA_IrqHandler+0x2be>
 8022802:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022806:	e02e      	b.n	8022866 <UBLOX_DMA_IrqHandler+0x2be>
 8022808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802280c:	e02b      	b.n	8022866 <UBLOX_DMA_IrqHandler+0x2be>
 802280e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022812:	e028      	b.n	8022866 <UBLOX_DMA_IrqHandler+0x2be>
 8022814:	2310      	movs	r3, #16
 8022816:	e026      	b.n	8022866 <UBLOX_DMA_IrqHandler+0x2be>
 8022818:	2000847c 	.word	0x2000847c
 802281c:	40026458 	.word	0x40026458
 8022820:	40026010 	.word	0x40026010
 8022824:	40026410 	.word	0x40026410
 8022828:	40026070 	.word	0x40026070
 802282c:	40026470 	.word	0x40026470
 8022830:	40026028 	.word	0x40026028
 8022834:	40026428 	.word	0x40026428
 8022838:	40026088 	.word	0x40026088
 802283c:	40026488 	.word	0x40026488
 8022840:	40026040 	.word	0x40026040
 8022844:	40026440 	.word	0x40026440
 8022848:	400260a0 	.word	0x400260a0
 802284c:	400264a0 	.word	0x400264a0
 8022850:	40026400 	.word	0x40026400
 8022854:	400260b8 	.word	0x400260b8
 8022858:	40026058 	.word	0x40026058
 802285c:	2310      	movs	r3, #16
 802285e:	e002      	b.n	8022866 <UBLOX_DMA_IrqHandler+0x2be>
 8022860:	2310      	movs	r3, #16
 8022862:	e000      	b.n	8022866 <UBLOX_DMA_IrqHandler+0x2be>
 8022864:	2310      	movs	r3, #16
 8022866:	4a9b      	ldr	r2, [pc, #620]	; (8022ad4 <UBLOX_DMA_IrqHandler+0x52c>)
 8022868:	60d3      	str	r3, [r2, #12]
 802286a:	e05f      	b.n	802292c <UBLOX_DMA_IrqHandler+0x384>
 802286c:	4b9a      	ldr	r3, [pc, #616]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 802286e:	681b      	ldr	r3, [r3, #0]
 8022870:	4a9a      	ldr	r2, [pc, #616]	; (8022adc <UBLOX_DMA_IrqHandler+0x534>)
 8022872:	4293      	cmp	r3, r2
 8022874:	d057      	beq.n	8022926 <UBLOX_DMA_IrqHandler+0x37e>
 8022876:	4b98      	ldr	r3, [pc, #608]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022878:	681b      	ldr	r3, [r3, #0]
 802287a:	4a99      	ldr	r2, [pc, #612]	; (8022ae0 <UBLOX_DMA_IrqHandler+0x538>)
 802287c:	4293      	cmp	r3, r2
 802287e:	d050      	beq.n	8022922 <UBLOX_DMA_IrqHandler+0x37a>
 8022880:	4b95      	ldr	r3, [pc, #596]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022882:	681b      	ldr	r3, [r3, #0]
 8022884:	4a97      	ldr	r2, [pc, #604]	; (8022ae4 <UBLOX_DMA_IrqHandler+0x53c>)
 8022886:	4293      	cmp	r3, r2
 8022888:	d049      	beq.n	802291e <UBLOX_DMA_IrqHandler+0x376>
 802288a:	4b93      	ldr	r3, [pc, #588]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 802288c:	681b      	ldr	r3, [r3, #0]
 802288e:	4a96      	ldr	r2, [pc, #600]	; (8022ae8 <UBLOX_DMA_IrqHandler+0x540>)
 8022890:	4293      	cmp	r3, r2
 8022892:	d042      	beq.n	802291a <UBLOX_DMA_IrqHandler+0x372>
 8022894:	4b90      	ldr	r3, [pc, #576]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022896:	681b      	ldr	r3, [r3, #0]
 8022898:	4a94      	ldr	r2, [pc, #592]	; (8022aec <UBLOX_DMA_IrqHandler+0x544>)
 802289a:	4293      	cmp	r3, r2
 802289c:	d03a      	beq.n	8022914 <UBLOX_DMA_IrqHandler+0x36c>
 802289e:	4b8e      	ldr	r3, [pc, #568]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 80228a0:	681b      	ldr	r3, [r3, #0]
 80228a2:	4a93      	ldr	r2, [pc, #588]	; (8022af0 <UBLOX_DMA_IrqHandler+0x548>)
 80228a4:	4293      	cmp	r3, r2
 80228a6:	d032      	beq.n	802290e <UBLOX_DMA_IrqHandler+0x366>
 80228a8:	4b8b      	ldr	r3, [pc, #556]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 80228aa:	681b      	ldr	r3, [r3, #0]
 80228ac:	4a91      	ldr	r2, [pc, #580]	; (8022af4 <UBLOX_DMA_IrqHandler+0x54c>)
 80228ae:	4293      	cmp	r3, r2
 80228b0:	d02a      	beq.n	8022908 <UBLOX_DMA_IrqHandler+0x360>
 80228b2:	4b89      	ldr	r3, [pc, #548]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 80228b4:	681b      	ldr	r3, [r3, #0]
 80228b6:	4a90      	ldr	r2, [pc, #576]	; (8022af8 <UBLOX_DMA_IrqHandler+0x550>)
 80228b8:	4293      	cmp	r3, r2
 80228ba:	d022      	beq.n	8022902 <UBLOX_DMA_IrqHandler+0x35a>
 80228bc:	4b86      	ldr	r3, [pc, #536]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 80228be:	681b      	ldr	r3, [r3, #0]
 80228c0:	4a8e      	ldr	r2, [pc, #568]	; (8022afc <UBLOX_DMA_IrqHandler+0x554>)
 80228c2:	4293      	cmp	r3, r2
 80228c4:	d01a      	beq.n	80228fc <UBLOX_DMA_IrqHandler+0x354>
 80228c6:	4b84      	ldr	r3, [pc, #528]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 80228c8:	681b      	ldr	r3, [r3, #0]
 80228ca:	4a8d      	ldr	r2, [pc, #564]	; (8022b00 <UBLOX_DMA_IrqHandler+0x558>)
 80228cc:	4293      	cmp	r3, r2
 80228ce:	d012      	beq.n	80228f6 <UBLOX_DMA_IrqHandler+0x34e>
 80228d0:	4b81      	ldr	r3, [pc, #516]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 80228d2:	681b      	ldr	r3, [r3, #0]
 80228d4:	4a8b      	ldr	r2, [pc, #556]	; (8022b04 <UBLOX_DMA_IrqHandler+0x55c>)
 80228d6:	4293      	cmp	r3, r2
 80228d8:	d00a      	beq.n	80228f0 <UBLOX_DMA_IrqHandler+0x348>
 80228da:	4b7f      	ldr	r3, [pc, #508]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 80228dc:	681b      	ldr	r3, [r3, #0]
 80228de:	4a8a      	ldr	r2, [pc, #552]	; (8022b08 <UBLOX_DMA_IrqHandler+0x560>)
 80228e0:	4293      	cmp	r3, r2
 80228e2:	d102      	bne.n	80228ea <UBLOX_DMA_IrqHandler+0x342>
 80228e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80228e8:	e01e      	b.n	8022928 <UBLOX_DMA_IrqHandler+0x380>
 80228ea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80228ee:	e01b      	b.n	8022928 <UBLOX_DMA_IrqHandler+0x380>
 80228f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80228f4:	e018      	b.n	8022928 <UBLOX_DMA_IrqHandler+0x380>
 80228f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80228fa:	e015      	b.n	8022928 <UBLOX_DMA_IrqHandler+0x380>
 80228fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8022900:	e012      	b.n	8022928 <UBLOX_DMA_IrqHandler+0x380>
 8022902:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022906:	e00f      	b.n	8022928 <UBLOX_DMA_IrqHandler+0x380>
 8022908:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802290c:	e00c      	b.n	8022928 <UBLOX_DMA_IrqHandler+0x380>
 802290e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022912:	e009      	b.n	8022928 <UBLOX_DMA_IrqHandler+0x380>
 8022914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022918:	e006      	b.n	8022928 <UBLOX_DMA_IrqHandler+0x380>
 802291a:	2310      	movs	r3, #16
 802291c:	e004      	b.n	8022928 <UBLOX_DMA_IrqHandler+0x380>
 802291e:	2310      	movs	r3, #16
 8022920:	e002      	b.n	8022928 <UBLOX_DMA_IrqHandler+0x380>
 8022922:	2310      	movs	r3, #16
 8022924:	e000      	b.n	8022928 <UBLOX_DMA_IrqHandler+0x380>
 8022926:	2310      	movs	r3, #16
 8022928:	4a6a      	ldr	r2, [pc, #424]	; (8022ad4 <UBLOX_DMA_IrqHandler+0x52c>)
 802292a:	6093      	str	r3, [r2, #8]

        UBLOX_Check_Buffer(0);
 802292c:	2000      	movs	r0, #0
 802292e:	f000 ff57 	bl	80237e0 <UBLOX_Check_Buffer>
        __HAL_DMA_CLEAR_FLAG(&hdma_usart2_rx, __HAL_DMA_GET_DME_FLAG_INDEX(&hdma_usart2_rx));

        /* Start DMA transfer */
        HAL_UART_Receive_DMA(&huart2, (uint8_t*) UBLOX_DMA_RX, UBLOX_DMA_RX_SZ);
    }
}
 8022932:	f000 bf09 	b.w	8023748 <UBLOX_DMA_IrqHandler+0x11a0>
    else if (__HAL_DMA_GET_IT_SOURCE(&hdma_usart2_rx, DMA_IT_TC)) {
 8022936:	4b68      	ldr	r3, [pc, #416]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022938:	681b      	ldr	r3, [r3, #0]
 802293a:	681b      	ldr	r3, [r3, #0]
 802293c:	f003 0310 	and.w	r3, r3, #16
 8022940:	2b00      	cmp	r3, #0
 8022942:	f000 81bd 	beq.w	8022cc0 <UBLOX_DMA_IrqHandler+0x718>
        __HAL_DMA_CLEAR_FLAG(&hdma_usart2_rx, __HAL_DMA_GET_TC_FLAG_INDEX(&hdma_usart2_rx));
 8022946:	4b64      	ldr	r3, [pc, #400]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022948:	681b      	ldr	r3, [r3, #0]
 802294a:	461a      	mov	r2, r3
 802294c:	4b6f      	ldr	r3, [pc, #444]	; (8022b0c <UBLOX_DMA_IrqHandler+0x564>)
 802294e:	429a      	cmp	r2, r3
 8022950:	d960      	bls.n	8022a14 <UBLOX_DMA_IrqHandler+0x46c>
 8022952:	4b61      	ldr	r3, [pc, #388]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022954:	681b      	ldr	r3, [r3, #0]
 8022956:	4a61      	ldr	r2, [pc, #388]	; (8022adc <UBLOX_DMA_IrqHandler+0x534>)
 8022958:	4293      	cmp	r3, r2
 802295a:	d057      	beq.n	8022a0c <UBLOX_DMA_IrqHandler+0x464>
 802295c:	4b5e      	ldr	r3, [pc, #376]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 802295e:	681b      	ldr	r3, [r3, #0]
 8022960:	4a5f      	ldr	r2, [pc, #380]	; (8022ae0 <UBLOX_DMA_IrqHandler+0x538>)
 8022962:	4293      	cmp	r3, r2
 8022964:	d050      	beq.n	8022a08 <UBLOX_DMA_IrqHandler+0x460>
 8022966:	4b5c      	ldr	r3, [pc, #368]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022968:	681b      	ldr	r3, [r3, #0]
 802296a:	4a5e      	ldr	r2, [pc, #376]	; (8022ae4 <UBLOX_DMA_IrqHandler+0x53c>)
 802296c:	4293      	cmp	r3, r2
 802296e:	d049      	beq.n	8022a04 <UBLOX_DMA_IrqHandler+0x45c>
 8022970:	4b59      	ldr	r3, [pc, #356]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022972:	681b      	ldr	r3, [r3, #0]
 8022974:	4a5c      	ldr	r2, [pc, #368]	; (8022ae8 <UBLOX_DMA_IrqHandler+0x540>)
 8022976:	4293      	cmp	r3, r2
 8022978:	d042      	beq.n	8022a00 <UBLOX_DMA_IrqHandler+0x458>
 802297a:	4b57      	ldr	r3, [pc, #348]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 802297c:	681b      	ldr	r3, [r3, #0]
 802297e:	4a5b      	ldr	r2, [pc, #364]	; (8022aec <UBLOX_DMA_IrqHandler+0x544>)
 8022980:	4293      	cmp	r3, r2
 8022982:	d03a      	beq.n	80229fa <UBLOX_DMA_IrqHandler+0x452>
 8022984:	4b54      	ldr	r3, [pc, #336]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022986:	681b      	ldr	r3, [r3, #0]
 8022988:	4a59      	ldr	r2, [pc, #356]	; (8022af0 <UBLOX_DMA_IrqHandler+0x548>)
 802298a:	4293      	cmp	r3, r2
 802298c:	d032      	beq.n	80229f4 <UBLOX_DMA_IrqHandler+0x44c>
 802298e:	4b52      	ldr	r3, [pc, #328]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022990:	681b      	ldr	r3, [r3, #0]
 8022992:	4a58      	ldr	r2, [pc, #352]	; (8022af4 <UBLOX_DMA_IrqHandler+0x54c>)
 8022994:	4293      	cmp	r3, r2
 8022996:	d02a      	beq.n	80229ee <UBLOX_DMA_IrqHandler+0x446>
 8022998:	4b4f      	ldr	r3, [pc, #316]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 802299a:	681b      	ldr	r3, [r3, #0]
 802299c:	4a56      	ldr	r2, [pc, #344]	; (8022af8 <UBLOX_DMA_IrqHandler+0x550>)
 802299e:	4293      	cmp	r3, r2
 80229a0:	d022      	beq.n	80229e8 <UBLOX_DMA_IrqHandler+0x440>
 80229a2:	4b4d      	ldr	r3, [pc, #308]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 80229a4:	681b      	ldr	r3, [r3, #0]
 80229a6:	4a55      	ldr	r2, [pc, #340]	; (8022afc <UBLOX_DMA_IrqHandler+0x554>)
 80229a8:	4293      	cmp	r3, r2
 80229aa:	d01a      	beq.n	80229e2 <UBLOX_DMA_IrqHandler+0x43a>
 80229ac:	4b4a      	ldr	r3, [pc, #296]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 80229ae:	681b      	ldr	r3, [r3, #0]
 80229b0:	4a53      	ldr	r2, [pc, #332]	; (8022b00 <UBLOX_DMA_IrqHandler+0x558>)
 80229b2:	4293      	cmp	r3, r2
 80229b4:	d012      	beq.n	80229dc <UBLOX_DMA_IrqHandler+0x434>
 80229b6:	4b48      	ldr	r3, [pc, #288]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 80229b8:	681b      	ldr	r3, [r3, #0]
 80229ba:	4a52      	ldr	r2, [pc, #328]	; (8022b04 <UBLOX_DMA_IrqHandler+0x55c>)
 80229bc:	4293      	cmp	r3, r2
 80229be:	d00a      	beq.n	80229d6 <UBLOX_DMA_IrqHandler+0x42e>
 80229c0:	4b45      	ldr	r3, [pc, #276]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 80229c2:	681b      	ldr	r3, [r3, #0]
 80229c4:	4a50      	ldr	r2, [pc, #320]	; (8022b08 <UBLOX_DMA_IrqHandler+0x560>)
 80229c6:	4293      	cmp	r3, r2
 80229c8:	d102      	bne.n	80229d0 <UBLOX_DMA_IrqHandler+0x428>
 80229ca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80229ce:	e01e      	b.n	8022a0e <UBLOX_DMA_IrqHandler+0x466>
 80229d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80229d4:	e01b      	b.n	8022a0e <UBLOX_DMA_IrqHandler+0x466>
 80229d6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80229da:	e018      	b.n	8022a0e <UBLOX_DMA_IrqHandler+0x466>
 80229dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80229e0:	e015      	b.n	8022a0e <UBLOX_DMA_IrqHandler+0x466>
 80229e2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80229e6:	e012      	b.n	8022a0e <UBLOX_DMA_IrqHandler+0x466>
 80229e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80229ec:	e00f      	b.n	8022a0e <UBLOX_DMA_IrqHandler+0x466>
 80229ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80229f2:	e00c      	b.n	8022a0e <UBLOX_DMA_IrqHandler+0x466>
 80229f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80229f8:	e009      	b.n	8022a0e <UBLOX_DMA_IrqHandler+0x466>
 80229fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80229fe:	e006      	b.n	8022a0e <UBLOX_DMA_IrqHandler+0x466>
 8022a00:	2320      	movs	r3, #32
 8022a02:	e004      	b.n	8022a0e <UBLOX_DMA_IrqHandler+0x466>
 8022a04:	2320      	movs	r3, #32
 8022a06:	e002      	b.n	8022a0e <UBLOX_DMA_IrqHandler+0x466>
 8022a08:	2320      	movs	r3, #32
 8022a0a:	e000      	b.n	8022a0e <UBLOX_DMA_IrqHandler+0x466>
 8022a0c:	2320      	movs	r3, #32
 8022a0e:	4a40      	ldr	r2, [pc, #256]	; (8022b10 <UBLOX_DMA_IrqHandler+0x568>)
 8022a10:	60d3      	str	r3, [r2, #12]
 8022a12:	e150      	b.n	8022cb6 <UBLOX_DMA_IrqHandler+0x70e>
 8022a14:	4b30      	ldr	r3, [pc, #192]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022a16:	681b      	ldr	r3, [r3, #0]
 8022a18:	461a      	mov	r2, r3
 8022a1a:	4b3e      	ldr	r3, [pc, #248]	; (8022b14 <UBLOX_DMA_IrqHandler+0x56c>)
 8022a1c:	429a      	cmp	r2, r3
 8022a1e:	f240 8083 	bls.w	8022b28 <UBLOX_DMA_IrqHandler+0x580>
 8022a22:	4b2d      	ldr	r3, [pc, #180]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022a24:	681b      	ldr	r3, [r3, #0]
 8022a26:	4a2d      	ldr	r2, [pc, #180]	; (8022adc <UBLOX_DMA_IrqHandler+0x534>)
 8022a28:	4293      	cmp	r3, r2
 8022a2a:	d079      	beq.n	8022b20 <UBLOX_DMA_IrqHandler+0x578>
 8022a2c:	4b2a      	ldr	r3, [pc, #168]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022a2e:	681b      	ldr	r3, [r3, #0]
 8022a30:	4a2b      	ldr	r2, [pc, #172]	; (8022ae0 <UBLOX_DMA_IrqHandler+0x538>)
 8022a32:	4293      	cmp	r3, r2
 8022a34:	d072      	beq.n	8022b1c <UBLOX_DMA_IrqHandler+0x574>
 8022a36:	4b28      	ldr	r3, [pc, #160]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022a38:	681b      	ldr	r3, [r3, #0]
 8022a3a:	4a2a      	ldr	r2, [pc, #168]	; (8022ae4 <UBLOX_DMA_IrqHandler+0x53c>)
 8022a3c:	4293      	cmp	r3, r2
 8022a3e:	d06b      	beq.n	8022b18 <UBLOX_DMA_IrqHandler+0x570>
 8022a40:	4b25      	ldr	r3, [pc, #148]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022a42:	681b      	ldr	r3, [r3, #0]
 8022a44:	4a28      	ldr	r2, [pc, #160]	; (8022ae8 <UBLOX_DMA_IrqHandler+0x540>)
 8022a46:	4293      	cmp	r3, r2
 8022a48:	d042      	beq.n	8022ad0 <UBLOX_DMA_IrqHandler+0x528>
 8022a4a:	4b23      	ldr	r3, [pc, #140]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022a4c:	681b      	ldr	r3, [r3, #0]
 8022a4e:	4a27      	ldr	r2, [pc, #156]	; (8022aec <UBLOX_DMA_IrqHandler+0x544>)
 8022a50:	4293      	cmp	r3, r2
 8022a52:	d03a      	beq.n	8022aca <UBLOX_DMA_IrqHandler+0x522>
 8022a54:	4b20      	ldr	r3, [pc, #128]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022a56:	681b      	ldr	r3, [r3, #0]
 8022a58:	4a25      	ldr	r2, [pc, #148]	; (8022af0 <UBLOX_DMA_IrqHandler+0x548>)
 8022a5a:	4293      	cmp	r3, r2
 8022a5c:	d032      	beq.n	8022ac4 <UBLOX_DMA_IrqHandler+0x51c>
 8022a5e:	4b1e      	ldr	r3, [pc, #120]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022a60:	681b      	ldr	r3, [r3, #0]
 8022a62:	4a24      	ldr	r2, [pc, #144]	; (8022af4 <UBLOX_DMA_IrqHandler+0x54c>)
 8022a64:	4293      	cmp	r3, r2
 8022a66:	d02a      	beq.n	8022abe <UBLOX_DMA_IrqHandler+0x516>
 8022a68:	4b1b      	ldr	r3, [pc, #108]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022a6a:	681b      	ldr	r3, [r3, #0]
 8022a6c:	4a22      	ldr	r2, [pc, #136]	; (8022af8 <UBLOX_DMA_IrqHandler+0x550>)
 8022a6e:	4293      	cmp	r3, r2
 8022a70:	d022      	beq.n	8022ab8 <UBLOX_DMA_IrqHandler+0x510>
 8022a72:	4b19      	ldr	r3, [pc, #100]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022a74:	681b      	ldr	r3, [r3, #0]
 8022a76:	4a21      	ldr	r2, [pc, #132]	; (8022afc <UBLOX_DMA_IrqHandler+0x554>)
 8022a78:	4293      	cmp	r3, r2
 8022a7a:	d01a      	beq.n	8022ab2 <UBLOX_DMA_IrqHandler+0x50a>
 8022a7c:	4b16      	ldr	r3, [pc, #88]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022a7e:	681b      	ldr	r3, [r3, #0]
 8022a80:	4a1f      	ldr	r2, [pc, #124]	; (8022b00 <UBLOX_DMA_IrqHandler+0x558>)
 8022a82:	4293      	cmp	r3, r2
 8022a84:	d012      	beq.n	8022aac <UBLOX_DMA_IrqHandler+0x504>
 8022a86:	4b14      	ldr	r3, [pc, #80]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022a88:	681b      	ldr	r3, [r3, #0]
 8022a8a:	4a1e      	ldr	r2, [pc, #120]	; (8022b04 <UBLOX_DMA_IrqHandler+0x55c>)
 8022a8c:	4293      	cmp	r3, r2
 8022a8e:	d00a      	beq.n	8022aa6 <UBLOX_DMA_IrqHandler+0x4fe>
 8022a90:	4b11      	ldr	r3, [pc, #68]	; (8022ad8 <UBLOX_DMA_IrqHandler+0x530>)
 8022a92:	681b      	ldr	r3, [r3, #0]
 8022a94:	4a1c      	ldr	r2, [pc, #112]	; (8022b08 <UBLOX_DMA_IrqHandler+0x560>)
 8022a96:	4293      	cmp	r3, r2
 8022a98:	d102      	bne.n	8022aa0 <UBLOX_DMA_IrqHandler+0x4f8>
 8022a9a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8022a9e:	e040      	b.n	8022b22 <UBLOX_DMA_IrqHandler+0x57a>
 8022aa0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8022aa4:	e03d      	b.n	8022b22 <UBLOX_DMA_IrqHandler+0x57a>
 8022aa6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8022aaa:	e03a      	b.n	8022b22 <UBLOX_DMA_IrqHandler+0x57a>
 8022aac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8022ab0:	e037      	b.n	8022b22 <UBLOX_DMA_IrqHandler+0x57a>
 8022ab2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8022ab6:	e034      	b.n	8022b22 <UBLOX_DMA_IrqHandler+0x57a>
 8022ab8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8022abc:	e031      	b.n	8022b22 <UBLOX_DMA_IrqHandler+0x57a>
 8022abe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8022ac2:	e02e      	b.n	8022b22 <UBLOX_DMA_IrqHandler+0x57a>
 8022ac4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8022ac8:	e02b      	b.n	8022b22 <UBLOX_DMA_IrqHandler+0x57a>
 8022aca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8022ace:	e028      	b.n	8022b22 <UBLOX_DMA_IrqHandler+0x57a>
 8022ad0:	2320      	movs	r3, #32
 8022ad2:	e026      	b.n	8022b22 <UBLOX_DMA_IrqHandler+0x57a>
 8022ad4:	40026000 	.word	0x40026000
 8022ad8:	2000847c 	.word	0x2000847c
 8022adc:	40026010 	.word	0x40026010
 8022ae0:	40026410 	.word	0x40026410
 8022ae4:	40026070 	.word	0x40026070
 8022ae8:	40026470 	.word	0x40026470
 8022aec:	40026028 	.word	0x40026028
 8022af0:	40026428 	.word	0x40026428
 8022af4:	40026088 	.word	0x40026088
 8022af8:	40026488 	.word	0x40026488
 8022afc:	40026040 	.word	0x40026040
 8022b00:	40026440 	.word	0x40026440
 8022b04:	400260a0 	.word	0x400260a0
 8022b08:	400264a0 	.word	0x400264a0
 8022b0c:	40026458 	.word	0x40026458
 8022b10:	40026400 	.word	0x40026400
 8022b14:	400260b8 	.word	0x400260b8
 8022b18:	2320      	movs	r3, #32
 8022b1a:	e002      	b.n	8022b22 <UBLOX_DMA_IrqHandler+0x57a>
 8022b1c:	2320      	movs	r3, #32
 8022b1e:	e000      	b.n	8022b22 <UBLOX_DMA_IrqHandler+0x57a>
 8022b20:	2320      	movs	r3, #32
 8022b22:	4a99      	ldr	r2, [pc, #612]	; (8022d88 <UBLOX_DMA_IrqHandler+0x7e0>)
 8022b24:	6093      	str	r3, [r2, #8]
 8022b26:	e0c6      	b.n	8022cb6 <UBLOX_DMA_IrqHandler+0x70e>
 8022b28:	4b98      	ldr	r3, [pc, #608]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022b2a:	681b      	ldr	r3, [r3, #0]
 8022b2c:	461a      	mov	r2, r3
 8022b2e:	4b98      	ldr	r3, [pc, #608]	; (8022d90 <UBLOX_DMA_IrqHandler+0x7e8>)
 8022b30:	429a      	cmp	r2, r3
 8022b32:	d960      	bls.n	8022bf6 <UBLOX_DMA_IrqHandler+0x64e>
 8022b34:	4b95      	ldr	r3, [pc, #596]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022b36:	681b      	ldr	r3, [r3, #0]
 8022b38:	4a96      	ldr	r2, [pc, #600]	; (8022d94 <UBLOX_DMA_IrqHandler+0x7ec>)
 8022b3a:	4293      	cmp	r3, r2
 8022b3c:	d057      	beq.n	8022bee <UBLOX_DMA_IrqHandler+0x646>
 8022b3e:	4b93      	ldr	r3, [pc, #588]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022b40:	681b      	ldr	r3, [r3, #0]
 8022b42:	4a95      	ldr	r2, [pc, #596]	; (8022d98 <UBLOX_DMA_IrqHandler+0x7f0>)
 8022b44:	4293      	cmp	r3, r2
 8022b46:	d050      	beq.n	8022bea <UBLOX_DMA_IrqHandler+0x642>
 8022b48:	4b90      	ldr	r3, [pc, #576]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022b4a:	681b      	ldr	r3, [r3, #0]
 8022b4c:	4a93      	ldr	r2, [pc, #588]	; (8022d9c <UBLOX_DMA_IrqHandler+0x7f4>)
 8022b4e:	4293      	cmp	r3, r2
 8022b50:	d049      	beq.n	8022be6 <UBLOX_DMA_IrqHandler+0x63e>
 8022b52:	4b8e      	ldr	r3, [pc, #568]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022b54:	681b      	ldr	r3, [r3, #0]
 8022b56:	4a92      	ldr	r2, [pc, #584]	; (8022da0 <UBLOX_DMA_IrqHandler+0x7f8>)
 8022b58:	4293      	cmp	r3, r2
 8022b5a:	d042      	beq.n	8022be2 <UBLOX_DMA_IrqHandler+0x63a>
 8022b5c:	4b8b      	ldr	r3, [pc, #556]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022b5e:	681b      	ldr	r3, [r3, #0]
 8022b60:	4a90      	ldr	r2, [pc, #576]	; (8022da4 <UBLOX_DMA_IrqHandler+0x7fc>)
 8022b62:	4293      	cmp	r3, r2
 8022b64:	d03a      	beq.n	8022bdc <UBLOX_DMA_IrqHandler+0x634>
 8022b66:	4b89      	ldr	r3, [pc, #548]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022b68:	681b      	ldr	r3, [r3, #0]
 8022b6a:	4a8f      	ldr	r2, [pc, #572]	; (8022da8 <UBLOX_DMA_IrqHandler+0x800>)
 8022b6c:	4293      	cmp	r3, r2
 8022b6e:	d032      	beq.n	8022bd6 <UBLOX_DMA_IrqHandler+0x62e>
 8022b70:	4b86      	ldr	r3, [pc, #536]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022b72:	681b      	ldr	r3, [r3, #0]
 8022b74:	4a8d      	ldr	r2, [pc, #564]	; (8022dac <UBLOX_DMA_IrqHandler+0x804>)
 8022b76:	4293      	cmp	r3, r2
 8022b78:	d02a      	beq.n	8022bd0 <UBLOX_DMA_IrqHandler+0x628>
 8022b7a:	4b84      	ldr	r3, [pc, #528]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022b7c:	681b      	ldr	r3, [r3, #0]
 8022b7e:	4a8c      	ldr	r2, [pc, #560]	; (8022db0 <UBLOX_DMA_IrqHandler+0x808>)
 8022b80:	4293      	cmp	r3, r2
 8022b82:	d022      	beq.n	8022bca <UBLOX_DMA_IrqHandler+0x622>
 8022b84:	4b81      	ldr	r3, [pc, #516]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022b86:	681b      	ldr	r3, [r3, #0]
 8022b88:	4a8a      	ldr	r2, [pc, #552]	; (8022db4 <UBLOX_DMA_IrqHandler+0x80c>)
 8022b8a:	4293      	cmp	r3, r2
 8022b8c:	d01a      	beq.n	8022bc4 <UBLOX_DMA_IrqHandler+0x61c>
 8022b8e:	4b7f      	ldr	r3, [pc, #508]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022b90:	681b      	ldr	r3, [r3, #0]
 8022b92:	4a89      	ldr	r2, [pc, #548]	; (8022db8 <UBLOX_DMA_IrqHandler+0x810>)
 8022b94:	4293      	cmp	r3, r2
 8022b96:	d012      	beq.n	8022bbe <UBLOX_DMA_IrqHandler+0x616>
 8022b98:	4b7c      	ldr	r3, [pc, #496]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022b9a:	681b      	ldr	r3, [r3, #0]
 8022b9c:	4a87      	ldr	r2, [pc, #540]	; (8022dbc <UBLOX_DMA_IrqHandler+0x814>)
 8022b9e:	4293      	cmp	r3, r2
 8022ba0:	d00a      	beq.n	8022bb8 <UBLOX_DMA_IrqHandler+0x610>
 8022ba2:	4b7a      	ldr	r3, [pc, #488]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022ba4:	681b      	ldr	r3, [r3, #0]
 8022ba6:	4a86      	ldr	r2, [pc, #536]	; (8022dc0 <UBLOX_DMA_IrqHandler+0x818>)
 8022ba8:	4293      	cmp	r3, r2
 8022baa:	d102      	bne.n	8022bb2 <UBLOX_DMA_IrqHandler+0x60a>
 8022bac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8022bb0:	e01e      	b.n	8022bf0 <UBLOX_DMA_IrqHandler+0x648>
 8022bb2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8022bb6:	e01b      	b.n	8022bf0 <UBLOX_DMA_IrqHandler+0x648>
 8022bb8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8022bbc:	e018      	b.n	8022bf0 <UBLOX_DMA_IrqHandler+0x648>
 8022bbe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8022bc2:	e015      	b.n	8022bf0 <UBLOX_DMA_IrqHandler+0x648>
 8022bc4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8022bc8:	e012      	b.n	8022bf0 <UBLOX_DMA_IrqHandler+0x648>
 8022bca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8022bce:	e00f      	b.n	8022bf0 <UBLOX_DMA_IrqHandler+0x648>
 8022bd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8022bd4:	e00c      	b.n	8022bf0 <UBLOX_DMA_IrqHandler+0x648>
 8022bd6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8022bda:	e009      	b.n	8022bf0 <UBLOX_DMA_IrqHandler+0x648>
 8022bdc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8022be0:	e006      	b.n	8022bf0 <UBLOX_DMA_IrqHandler+0x648>
 8022be2:	2320      	movs	r3, #32
 8022be4:	e004      	b.n	8022bf0 <UBLOX_DMA_IrqHandler+0x648>
 8022be6:	2320      	movs	r3, #32
 8022be8:	e002      	b.n	8022bf0 <UBLOX_DMA_IrqHandler+0x648>
 8022bea:	2320      	movs	r3, #32
 8022bec:	e000      	b.n	8022bf0 <UBLOX_DMA_IrqHandler+0x648>
 8022bee:	2320      	movs	r3, #32
 8022bf0:	4a74      	ldr	r2, [pc, #464]	; (8022dc4 <UBLOX_DMA_IrqHandler+0x81c>)
 8022bf2:	60d3      	str	r3, [r2, #12]
 8022bf4:	e05f      	b.n	8022cb6 <UBLOX_DMA_IrqHandler+0x70e>
 8022bf6:	4b65      	ldr	r3, [pc, #404]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022bf8:	681b      	ldr	r3, [r3, #0]
 8022bfa:	4a66      	ldr	r2, [pc, #408]	; (8022d94 <UBLOX_DMA_IrqHandler+0x7ec>)
 8022bfc:	4293      	cmp	r3, r2
 8022bfe:	d057      	beq.n	8022cb0 <UBLOX_DMA_IrqHandler+0x708>
 8022c00:	4b62      	ldr	r3, [pc, #392]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022c02:	681b      	ldr	r3, [r3, #0]
 8022c04:	4a64      	ldr	r2, [pc, #400]	; (8022d98 <UBLOX_DMA_IrqHandler+0x7f0>)
 8022c06:	4293      	cmp	r3, r2
 8022c08:	d050      	beq.n	8022cac <UBLOX_DMA_IrqHandler+0x704>
 8022c0a:	4b60      	ldr	r3, [pc, #384]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022c0c:	681b      	ldr	r3, [r3, #0]
 8022c0e:	4a63      	ldr	r2, [pc, #396]	; (8022d9c <UBLOX_DMA_IrqHandler+0x7f4>)
 8022c10:	4293      	cmp	r3, r2
 8022c12:	d049      	beq.n	8022ca8 <UBLOX_DMA_IrqHandler+0x700>
 8022c14:	4b5d      	ldr	r3, [pc, #372]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022c16:	681b      	ldr	r3, [r3, #0]
 8022c18:	4a61      	ldr	r2, [pc, #388]	; (8022da0 <UBLOX_DMA_IrqHandler+0x7f8>)
 8022c1a:	4293      	cmp	r3, r2
 8022c1c:	d042      	beq.n	8022ca4 <UBLOX_DMA_IrqHandler+0x6fc>
 8022c1e:	4b5b      	ldr	r3, [pc, #364]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022c20:	681b      	ldr	r3, [r3, #0]
 8022c22:	4a60      	ldr	r2, [pc, #384]	; (8022da4 <UBLOX_DMA_IrqHandler+0x7fc>)
 8022c24:	4293      	cmp	r3, r2
 8022c26:	d03a      	beq.n	8022c9e <UBLOX_DMA_IrqHandler+0x6f6>
 8022c28:	4b58      	ldr	r3, [pc, #352]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022c2a:	681b      	ldr	r3, [r3, #0]
 8022c2c:	4a5e      	ldr	r2, [pc, #376]	; (8022da8 <UBLOX_DMA_IrqHandler+0x800>)
 8022c2e:	4293      	cmp	r3, r2
 8022c30:	d032      	beq.n	8022c98 <UBLOX_DMA_IrqHandler+0x6f0>
 8022c32:	4b56      	ldr	r3, [pc, #344]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022c34:	681b      	ldr	r3, [r3, #0]
 8022c36:	4a5d      	ldr	r2, [pc, #372]	; (8022dac <UBLOX_DMA_IrqHandler+0x804>)
 8022c38:	4293      	cmp	r3, r2
 8022c3a:	d02a      	beq.n	8022c92 <UBLOX_DMA_IrqHandler+0x6ea>
 8022c3c:	4b53      	ldr	r3, [pc, #332]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022c3e:	681b      	ldr	r3, [r3, #0]
 8022c40:	4a5b      	ldr	r2, [pc, #364]	; (8022db0 <UBLOX_DMA_IrqHandler+0x808>)
 8022c42:	4293      	cmp	r3, r2
 8022c44:	d022      	beq.n	8022c8c <UBLOX_DMA_IrqHandler+0x6e4>
 8022c46:	4b51      	ldr	r3, [pc, #324]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022c48:	681b      	ldr	r3, [r3, #0]
 8022c4a:	4a5a      	ldr	r2, [pc, #360]	; (8022db4 <UBLOX_DMA_IrqHandler+0x80c>)
 8022c4c:	4293      	cmp	r3, r2
 8022c4e:	d01a      	beq.n	8022c86 <UBLOX_DMA_IrqHandler+0x6de>
 8022c50:	4b4e      	ldr	r3, [pc, #312]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022c52:	681b      	ldr	r3, [r3, #0]
 8022c54:	4a58      	ldr	r2, [pc, #352]	; (8022db8 <UBLOX_DMA_IrqHandler+0x810>)
 8022c56:	4293      	cmp	r3, r2
 8022c58:	d012      	beq.n	8022c80 <UBLOX_DMA_IrqHandler+0x6d8>
 8022c5a:	4b4c      	ldr	r3, [pc, #304]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022c5c:	681b      	ldr	r3, [r3, #0]
 8022c5e:	4a57      	ldr	r2, [pc, #348]	; (8022dbc <UBLOX_DMA_IrqHandler+0x814>)
 8022c60:	4293      	cmp	r3, r2
 8022c62:	d00a      	beq.n	8022c7a <UBLOX_DMA_IrqHandler+0x6d2>
 8022c64:	4b49      	ldr	r3, [pc, #292]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022c66:	681b      	ldr	r3, [r3, #0]
 8022c68:	4a55      	ldr	r2, [pc, #340]	; (8022dc0 <UBLOX_DMA_IrqHandler+0x818>)
 8022c6a:	4293      	cmp	r3, r2
 8022c6c:	d102      	bne.n	8022c74 <UBLOX_DMA_IrqHandler+0x6cc>
 8022c6e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8022c72:	e01e      	b.n	8022cb2 <UBLOX_DMA_IrqHandler+0x70a>
 8022c74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8022c78:	e01b      	b.n	8022cb2 <UBLOX_DMA_IrqHandler+0x70a>
 8022c7a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8022c7e:	e018      	b.n	8022cb2 <UBLOX_DMA_IrqHandler+0x70a>
 8022c80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8022c84:	e015      	b.n	8022cb2 <UBLOX_DMA_IrqHandler+0x70a>
 8022c86:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8022c8a:	e012      	b.n	8022cb2 <UBLOX_DMA_IrqHandler+0x70a>
 8022c8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8022c90:	e00f      	b.n	8022cb2 <UBLOX_DMA_IrqHandler+0x70a>
 8022c92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8022c96:	e00c      	b.n	8022cb2 <UBLOX_DMA_IrqHandler+0x70a>
 8022c98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8022c9c:	e009      	b.n	8022cb2 <UBLOX_DMA_IrqHandler+0x70a>
 8022c9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8022ca2:	e006      	b.n	8022cb2 <UBLOX_DMA_IrqHandler+0x70a>
 8022ca4:	2320      	movs	r3, #32
 8022ca6:	e004      	b.n	8022cb2 <UBLOX_DMA_IrqHandler+0x70a>
 8022ca8:	2320      	movs	r3, #32
 8022caa:	e002      	b.n	8022cb2 <UBLOX_DMA_IrqHandler+0x70a>
 8022cac:	2320      	movs	r3, #32
 8022cae:	e000      	b.n	8022cb2 <UBLOX_DMA_IrqHandler+0x70a>
 8022cb0:	2320      	movs	r3, #32
 8022cb2:	4a44      	ldr	r2, [pc, #272]	; (8022dc4 <UBLOX_DMA_IrqHandler+0x81c>)
 8022cb4:	6093      	str	r3, [r2, #8]
        UBLOX_Check_Buffer(0);
 8022cb6:	2000      	movs	r0, #0
 8022cb8:	f000 fd92 	bl	80237e0 <UBLOX_Check_Buffer>
}
 8022cbc:	f000 bd44 	b.w	8023748 <UBLOX_DMA_IrqHandler+0x11a0>
        __HAL_DMA_CLEAR_FLAG(&hdma_usart2_rx, __HAL_DMA_GET_TE_FLAG_INDEX(&hdma_usart2_rx));
 8022cc0:	4b32      	ldr	r3, [pc, #200]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022cc2:	681b      	ldr	r3, [r3, #0]
 8022cc4:	461a      	mov	r2, r3
 8022cc6:	4b40      	ldr	r3, [pc, #256]	; (8022dc8 <UBLOX_DMA_IrqHandler+0x820>)
 8022cc8:	429a      	cmp	r2, r3
 8022cca:	f240 8083 	bls.w	8022dd4 <UBLOX_DMA_IrqHandler+0x82c>
 8022cce:	4b2f      	ldr	r3, [pc, #188]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022cd0:	681b      	ldr	r3, [r3, #0]
 8022cd2:	4a30      	ldr	r2, [pc, #192]	; (8022d94 <UBLOX_DMA_IrqHandler+0x7ec>)
 8022cd4:	4293      	cmp	r3, r2
 8022cd6:	d079      	beq.n	8022dcc <UBLOX_DMA_IrqHandler+0x824>
 8022cd8:	4b2c      	ldr	r3, [pc, #176]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022cda:	681b      	ldr	r3, [r3, #0]
 8022cdc:	4a2e      	ldr	r2, [pc, #184]	; (8022d98 <UBLOX_DMA_IrqHandler+0x7f0>)
 8022cde:	4293      	cmp	r3, r2
 8022ce0:	d050      	beq.n	8022d84 <UBLOX_DMA_IrqHandler+0x7dc>
 8022ce2:	4b2a      	ldr	r3, [pc, #168]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022ce4:	681b      	ldr	r3, [r3, #0]
 8022ce6:	4a2d      	ldr	r2, [pc, #180]	; (8022d9c <UBLOX_DMA_IrqHandler+0x7f4>)
 8022ce8:	4293      	cmp	r3, r2
 8022cea:	d049      	beq.n	8022d80 <UBLOX_DMA_IrqHandler+0x7d8>
 8022cec:	4b27      	ldr	r3, [pc, #156]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022cee:	681b      	ldr	r3, [r3, #0]
 8022cf0:	4a2b      	ldr	r2, [pc, #172]	; (8022da0 <UBLOX_DMA_IrqHandler+0x7f8>)
 8022cf2:	4293      	cmp	r3, r2
 8022cf4:	d042      	beq.n	8022d7c <UBLOX_DMA_IrqHandler+0x7d4>
 8022cf6:	4b25      	ldr	r3, [pc, #148]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022cf8:	681b      	ldr	r3, [r3, #0]
 8022cfa:	4a2a      	ldr	r2, [pc, #168]	; (8022da4 <UBLOX_DMA_IrqHandler+0x7fc>)
 8022cfc:	4293      	cmp	r3, r2
 8022cfe:	d03a      	beq.n	8022d76 <UBLOX_DMA_IrqHandler+0x7ce>
 8022d00:	4b22      	ldr	r3, [pc, #136]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022d02:	681b      	ldr	r3, [r3, #0]
 8022d04:	4a28      	ldr	r2, [pc, #160]	; (8022da8 <UBLOX_DMA_IrqHandler+0x800>)
 8022d06:	4293      	cmp	r3, r2
 8022d08:	d032      	beq.n	8022d70 <UBLOX_DMA_IrqHandler+0x7c8>
 8022d0a:	4b20      	ldr	r3, [pc, #128]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022d0c:	681b      	ldr	r3, [r3, #0]
 8022d0e:	4a27      	ldr	r2, [pc, #156]	; (8022dac <UBLOX_DMA_IrqHandler+0x804>)
 8022d10:	4293      	cmp	r3, r2
 8022d12:	d02a      	beq.n	8022d6a <UBLOX_DMA_IrqHandler+0x7c2>
 8022d14:	4b1d      	ldr	r3, [pc, #116]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022d16:	681b      	ldr	r3, [r3, #0]
 8022d18:	4a25      	ldr	r2, [pc, #148]	; (8022db0 <UBLOX_DMA_IrqHandler+0x808>)
 8022d1a:	4293      	cmp	r3, r2
 8022d1c:	d022      	beq.n	8022d64 <UBLOX_DMA_IrqHandler+0x7bc>
 8022d1e:	4b1b      	ldr	r3, [pc, #108]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022d20:	681b      	ldr	r3, [r3, #0]
 8022d22:	4a24      	ldr	r2, [pc, #144]	; (8022db4 <UBLOX_DMA_IrqHandler+0x80c>)
 8022d24:	4293      	cmp	r3, r2
 8022d26:	d01a      	beq.n	8022d5e <UBLOX_DMA_IrqHandler+0x7b6>
 8022d28:	4b18      	ldr	r3, [pc, #96]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022d2a:	681b      	ldr	r3, [r3, #0]
 8022d2c:	4a22      	ldr	r2, [pc, #136]	; (8022db8 <UBLOX_DMA_IrqHandler+0x810>)
 8022d2e:	4293      	cmp	r3, r2
 8022d30:	d012      	beq.n	8022d58 <UBLOX_DMA_IrqHandler+0x7b0>
 8022d32:	4b16      	ldr	r3, [pc, #88]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022d34:	681b      	ldr	r3, [r3, #0]
 8022d36:	4a21      	ldr	r2, [pc, #132]	; (8022dbc <UBLOX_DMA_IrqHandler+0x814>)
 8022d38:	4293      	cmp	r3, r2
 8022d3a:	d00a      	beq.n	8022d52 <UBLOX_DMA_IrqHandler+0x7aa>
 8022d3c:	4b13      	ldr	r3, [pc, #76]	; (8022d8c <UBLOX_DMA_IrqHandler+0x7e4>)
 8022d3e:	681b      	ldr	r3, [r3, #0]
 8022d40:	4a1f      	ldr	r2, [pc, #124]	; (8022dc0 <UBLOX_DMA_IrqHandler+0x818>)
 8022d42:	4293      	cmp	r3, r2
 8022d44:	d102      	bne.n	8022d4c <UBLOX_DMA_IrqHandler+0x7a4>
 8022d46:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8022d4a:	e040      	b.n	8022dce <UBLOX_DMA_IrqHandler+0x826>
 8022d4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8022d50:	e03d      	b.n	8022dce <UBLOX_DMA_IrqHandler+0x826>
 8022d52:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8022d56:	e03a      	b.n	8022dce <UBLOX_DMA_IrqHandler+0x826>
 8022d58:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8022d5c:	e037      	b.n	8022dce <UBLOX_DMA_IrqHandler+0x826>
 8022d5e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8022d62:	e034      	b.n	8022dce <UBLOX_DMA_IrqHandler+0x826>
 8022d64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8022d68:	e031      	b.n	8022dce <UBLOX_DMA_IrqHandler+0x826>
 8022d6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8022d6e:	e02e      	b.n	8022dce <UBLOX_DMA_IrqHandler+0x826>
 8022d70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8022d74:	e02b      	b.n	8022dce <UBLOX_DMA_IrqHandler+0x826>
 8022d76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8022d7a:	e028      	b.n	8022dce <UBLOX_DMA_IrqHandler+0x826>
 8022d7c:	2308      	movs	r3, #8
 8022d7e:	e026      	b.n	8022dce <UBLOX_DMA_IrqHandler+0x826>
 8022d80:	2308      	movs	r3, #8
 8022d82:	e024      	b.n	8022dce <UBLOX_DMA_IrqHandler+0x826>
 8022d84:	2308      	movs	r3, #8
 8022d86:	e022      	b.n	8022dce <UBLOX_DMA_IrqHandler+0x826>
 8022d88:	40026400 	.word	0x40026400
 8022d8c:	2000847c 	.word	0x2000847c
 8022d90:	40026058 	.word	0x40026058
 8022d94:	40026010 	.word	0x40026010
 8022d98:	40026410 	.word	0x40026410
 8022d9c:	40026070 	.word	0x40026070
 8022da0:	40026470 	.word	0x40026470
 8022da4:	40026028 	.word	0x40026028
 8022da8:	40026428 	.word	0x40026428
 8022dac:	40026088 	.word	0x40026088
 8022db0:	40026488 	.word	0x40026488
 8022db4:	40026040 	.word	0x40026040
 8022db8:	40026440 	.word	0x40026440
 8022dbc:	400260a0 	.word	0x400260a0
 8022dc0:	400264a0 	.word	0x400264a0
 8022dc4:	40026000 	.word	0x40026000
 8022dc8:	40026458 	.word	0x40026458
 8022dcc:	2308      	movs	r3, #8
 8022dce:	4a97      	ldr	r2, [pc, #604]	; (802302c <UBLOX_DMA_IrqHandler+0xa84>)
 8022dd0:	60d3      	str	r3, [r2, #12]
 8022dd2:	e150      	b.n	8023076 <UBLOX_DMA_IrqHandler+0xace>
 8022dd4:	4b96      	ldr	r3, [pc, #600]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022dd6:	681b      	ldr	r3, [r3, #0]
 8022dd8:	461a      	mov	r2, r3
 8022dda:	4b96      	ldr	r3, [pc, #600]	; (8023034 <UBLOX_DMA_IrqHandler+0xa8c>)
 8022ddc:	429a      	cmp	r2, r3
 8022dde:	d960      	bls.n	8022ea2 <UBLOX_DMA_IrqHandler+0x8fa>
 8022de0:	4b93      	ldr	r3, [pc, #588]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022de2:	681b      	ldr	r3, [r3, #0]
 8022de4:	4a94      	ldr	r2, [pc, #592]	; (8023038 <UBLOX_DMA_IrqHandler+0xa90>)
 8022de6:	4293      	cmp	r3, r2
 8022de8:	d057      	beq.n	8022e9a <UBLOX_DMA_IrqHandler+0x8f2>
 8022dea:	4b91      	ldr	r3, [pc, #580]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022dec:	681b      	ldr	r3, [r3, #0]
 8022dee:	4a93      	ldr	r2, [pc, #588]	; (802303c <UBLOX_DMA_IrqHandler+0xa94>)
 8022df0:	4293      	cmp	r3, r2
 8022df2:	d050      	beq.n	8022e96 <UBLOX_DMA_IrqHandler+0x8ee>
 8022df4:	4b8e      	ldr	r3, [pc, #568]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022df6:	681b      	ldr	r3, [r3, #0]
 8022df8:	4a91      	ldr	r2, [pc, #580]	; (8023040 <UBLOX_DMA_IrqHandler+0xa98>)
 8022dfa:	4293      	cmp	r3, r2
 8022dfc:	d049      	beq.n	8022e92 <UBLOX_DMA_IrqHandler+0x8ea>
 8022dfe:	4b8c      	ldr	r3, [pc, #560]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022e00:	681b      	ldr	r3, [r3, #0]
 8022e02:	4a90      	ldr	r2, [pc, #576]	; (8023044 <UBLOX_DMA_IrqHandler+0xa9c>)
 8022e04:	4293      	cmp	r3, r2
 8022e06:	d042      	beq.n	8022e8e <UBLOX_DMA_IrqHandler+0x8e6>
 8022e08:	4b89      	ldr	r3, [pc, #548]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022e0a:	681b      	ldr	r3, [r3, #0]
 8022e0c:	4a8e      	ldr	r2, [pc, #568]	; (8023048 <UBLOX_DMA_IrqHandler+0xaa0>)
 8022e0e:	4293      	cmp	r3, r2
 8022e10:	d03a      	beq.n	8022e88 <UBLOX_DMA_IrqHandler+0x8e0>
 8022e12:	4b87      	ldr	r3, [pc, #540]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022e14:	681b      	ldr	r3, [r3, #0]
 8022e16:	4a8d      	ldr	r2, [pc, #564]	; (802304c <UBLOX_DMA_IrqHandler+0xaa4>)
 8022e18:	4293      	cmp	r3, r2
 8022e1a:	d032      	beq.n	8022e82 <UBLOX_DMA_IrqHandler+0x8da>
 8022e1c:	4b84      	ldr	r3, [pc, #528]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022e1e:	681b      	ldr	r3, [r3, #0]
 8022e20:	4a8b      	ldr	r2, [pc, #556]	; (8023050 <UBLOX_DMA_IrqHandler+0xaa8>)
 8022e22:	4293      	cmp	r3, r2
 8022e24:	d02a      	beq.n	8022e7c <UBLOX_DMA_IrqHandler+0x8d4>
 8022e26:	4b82      	ldr	r3, [pc, #520]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022e28:	681b      	ldr	r3, [r3, #0]
 8022e2a:	4a8a      	ldr	r2, [pc, #552]	; (8023054 <UBLOX_DMA_IrqHandler+0xaac>)
 8022e2c:	4293      	cmp	r3, r2
 8022e2e:	d022      	beq.n	8022e76 <UBLOX_DMA_IrqHandler+0x8ce>
 8022e30:	4b7f      	ldr	r3, [pc, #508]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022e32:	681b      	ldr	r3, [r3, #0]
 8022e34:	4a88      	ldr	r2, [pc, #544]	; (8023058 <UBLOX_DMA_IrqHandler+0xab0>)
 8022e36:	4293      	cmp	r3, r2
 8022e38:	d01a      	beq.n	8022e70 <UBLOX_DMA_IrqHandler+0x8c8>
 8022e3a:	4b7d      	ldr	r3, [pc, #500]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022e3c:	681b      	ldr	r3, [r3, #0]
 8022e3e:	4a87      	ldr	r2, [pc, #540]	; (802305c <UBLOX_DMA_IrqHandler+0xab4>)
 8022e40:	4293      	cmp	r3, r2
 8022e42:	d012      	beq.n	8022e6a <UBLOX_DMA_IrqHandler+0x8c2>
 8022e44:	4b7a      	ldr	r3, [pc, #488]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022e46:	681b      	ldr	r3, [r3, #0]
 8022e48:	4a85      	ldr	r2, [pc, #532]	; (8023060 <UBLOX_DMA_IrqHandler+0xab8>)
 8022e4a:	4293      	cmp	r3, r2
 8022e4c:	d00a      	beq.n	8022e64 <UBLOX_DMA_IrqHandler+0x8bc>
 8022e4e:	4b78      	ldr	r3, [pc, #480]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022e50:	681b      	ldr	r3, [r3, #0]
 8022e52:	4a84      	ldr	r2, [pc, #528]	; (8023064 <UBLOX_DMA_IrqHandler+0xabc>)
 8022e54:	4293      	cmp	r3, r2
 8022e56:	d102      	bne.n	8022e5e <UBLOX_DMA_IrqHandler+0x8b6>
 8022e58:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8022e5c:	e01e      	b.n	8022e9c <UBLOX_DMA_IrqHandler+0x8f4>
 8022e5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8022e62:	e01b      	b.n	8022e9c <UBLOX_DMA_IrqHandler+0x8f4>
 8022e64:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8022e68:	e018      	b.n	8022e9c <UBLOX_DMA_IrqHandler+0x8f4>
 8022e6a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8022e6e:	e015      	b.n	8022e9c <UBLOX_DMA_IrqHandler+0x8f4>
 8022e70:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8022e74:	e012      	b.n	8022e9c <UBLOX_DMA_IrqHandler+0x8f4>
 8022e76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8022e7a:	e00f      	b.n	8022e9c <UBLOX_DMA_IrqHandler+0x8f4>
 8022e7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8022e80:	e00c      	b.n	8022e9c <UBLOX_DMA_IrqHandler+0x8f4>
 8022e82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8022e86:	e009      	b.n	8022e9c <UBLOX_DMA_IrqHandler+0x8f4>
 8022e88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8022e8c:	e006      	b.n	8022e9c <UBLOX_DMA_IrqHandler+0x8f4>
 8022e8e:	2308      	movs	r3, #8
 8022e90:	e004      	b.n	8022e9c <UBLOX_DMA_IrqHandler+0x8f4>
 8022e92:	2308      	movs	r3, #8
 8022e94:	e002      	b.n	8022e9c <UBLOX_DMA_IrqHandler+0x8f4>
 8022e96:	2308      	movs	r3, #8
 8022e98:	e000      	b.n	8022e9c <UBLOX_DMA_IrqHandler+0x8f4>
 8022e9a:	2308      	movs	r3, #8
 8022e9c:	4a63      	ldr	r2, [pc, #396]	; (802302c <UBLOX_DMA_IrqHandler+0xa84>)
 8022e9e:	6093      	str	r3, [r2, #8]
 8022ea0:	e0e9      	b.n	8023076 <UBLOX_DMA_IrqHandler+0xace>
 8022ea2:	4b63      	ldr	r3, [pc, #396]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022ea4:	681b      	ldr	r3, [r3, #0]
 8022ea6:	461a      	mov	r2, r3
 8022ea8:	4b6f      	ldr	r3, [pc, #444]	; (8023068 <UBLOX_DMA_IrqHandler+0xac0>)
 8022eaa:	429a      	cmp	r2, r3
 8022eac:	d960      	bls.n	8022f70 <UBLOX_DMA_IrqHandler+0x9c8>
 8022eae:	4b60      	ldr	r3, [pc, #384]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022eb0:	681b      	ldr	r3, [r3, #0]
 8022eb2:	4a61      	ldr	r2, [pc, #388]	; (8023038 <UBLOX_DMA_IrqHandler+0xa90>)
 8022eb4:	4293      	cmp	r3, r2
 8022eb6:	d057      	beq.n	8022f68 <UBLOX_DMA_IrqHandler+0x9c0>
 8022eb8:	4b5d      	ldr	r3, [pc, #372]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022eba:	681b      	ldr	r3, [r3, #0]
 8022ebc:	4a5f      	ldr	r2, [pc, #380]	; (802303c <UBLOX_DMA_IrqHandler+0xa94>)
 8022ebe:	4293      	cmp	r3, r2
 8022ec0:	d050      	beq.n	8022f64 <UBLOX_DMA_IrqHandler+0x9bc>
 8022ec2:	4b5b      	ldr	r3, [pc, #364]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022ec4:	681b      	ldr	r3, [r3, #0]
 8022ec6:	4a5e      	ldr	r2, [pc, #376]	; (8023040 <UBLOX_DMA_IrqHandler+0xa98>)
 8022ec8:	4293      	cmp	r3, r2
 8022eca:	d049      	beq.n	8022f60 <UBLOX_DMA_IrqHandler+0x9b8>
 8022ecc:	4b58      	ldr	r3, [pc, #352]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022ece:	681b      	ldr	r3, [r3, #0]
 8022ed0:	4a5c      	ldr	r2, [pc, #368]	; (8023044 <UBLOX_DMA_IrqHandler+0xa9c>)
 8022ed2:	4293      	cmp	r3, r2
 8022ed4:	d042      	beq.n	8022f5c <UBLOX_DMA_IrqHandler+0x9b4>
 8022ed6:	4b56      	ldr	r3, [pc, #344]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022ed8:	681b      	ldr	r3, [r3, #0]
 8022eda:	4a5b      	ldr	r2, [pc, #364]	; (8023048 <UBLOX_DMA_IrqHandler+0xaa0>)
 8022edc:	4293      	cmp	r3, r2
 8022ede:	d03a      	beq.n	8022f56 <UBLOX_DMA_IrqHandler+0x9ae>
 8022ee0:	4b53      	ldr	r3, [pc, #332]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022ee2:	681b      	ldr	r3, [r3, #0]
 8022ee4:	4a59      	ldr	r2, [pc, #356]	; (802304c <UBLOX_DMA_IrqHandler+0xaa4>)
 8022ee6:	4293      	cmp	r3, r2
 8022ee8:	d032      	beq.n	8022f50 <UBLOX_DMA_IrqHandler+0x9a8>
 8022eea:	4b51      	ldr	r3, [pc, #324]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022eec:	681b      	ldr	r3, [r3, #0]
 8022eee:	4a58      	ldr	r2, [pc, #352]	; (8023050 <UBLOX_DMA_IrqHandler+0xaa8>)
 8022ef0:	4293      	cmp	r3, r2
 8022ef2:	d02a      	beq.n	8022f4a <UBLOX_DMA_IrqHandler+0x9a2>
 8022ef4:	4b4e      	ldr	r3, [pc, #312]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022ef6:	681b      	ldr	r3, [r3, #0]
 8022ef8:	4a56      	ldr	r2, [pc, #344]	; (8023054 <UBLOX_DMA_IrqHandler+0xaac>)
 8022efa:	4293      	cmp	r3, r2
 8022efc:	d022      	beq.n	8022f44 <UBLOX_DMA_IrqHandler+0x99c>
 8022efe:	4b4c      	ldr	r3, [pc, #304]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022f00:	681b      	ldr	r3, [r3, #0]
 8022f02:	4a55      	ldr	r2, [pc, #340]	; (8023058 <UBLOX_DMA_IrqHandler+0xab0>)
 8022f04:	4293      	cmp	r3, r2
 8022f06:	d01a      	beq.n	8022f3e <UBLOX_DMA_IrqHandler+0x996>
 8022f08:	4b49      	ldr	r3, [pc, #292]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022f0a:	681b      	ldr	r3, [r3, #0]
 8022f0c:	4a53      	ldr	r2, [pc, #332]	; (802305c <UBLOX_DMA_IrqHandler+0xab4>)
 8022f0e:	4293      	cmp	r3, r2
 8022f10:	d012      	beq.n	8022f38 <UBLOX_DMA_IrqHandler+0x990>
 8022f12:	4b47      	ldr	r3, [pc, #284]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022f14:	681b      	ldr	r3, [r3, #0]
 8022f16:	4a52      	ldr	r2, [pc, #328]	; (8023060 <UBLOX_DMA_IrqHandler+0xab8>)
 8022f18:	4293      	cmp	r3, r2
 8022f1a:	d00a      	beq.n	8022f32 <UBLOX_DMA_IrqHandler+0x98a>
 8022f1c:	4b44      	ldr	r3, [pc, #272]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022f1e:	681b      	ldr	r3, [r3, #0]
 8022f20:	4a50      	ldr	r2, [pc, #320]	; (8023064 <UBLOX_DMA_IrqHandler+0xabc>)
 8022f22:	4293      	cmp	r3, r2
 8022f24:	d102      	bne.n	8022f2c <UBLOX_DMA_IrqHandler+0x984>
 8022f26:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8022f2a:	e01e      	b.n	8022f6a <UBLOX_DMA_IrqHandler+0x9c2>
 8022f2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8022f30:	e01b      	b.n	8022f6a <UBLOX_DMA_IrqHandler+0x9c2>
 8022f32:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8022f36:	e018      	b.n	8022f6a <UBLOX_DMA_IrqHandler+0x9c2>
 8022f38:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8022f3c:	e015      	b.n	8022f6a <UBLOX_DMA_IrqHandler+0x9c2>
 8022f3e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8022f42:	e012      	b.n	8022f6a <UBLOX_DMA_IrqHandler+0x9c2>
 8022f44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8022f48:	e00f      	b.n	8022f6a <UBLOX_DMA_IrqHandler+0x9c2>
 8022f4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8022f4e:	e00c      	b.n	8022f6a <UBLOX_DMA_IrqHandler+0x9c2>
 8022f50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8022f54:	e009      	b.n	8022f6a <UBLOX_DMA_IrqHandler+0x9c2>
 8022f56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8022f5a:	e006      	b.n	8022f6a <UBLOX_DMA_IrqHandler+0x9c2>
 8022f5c:	2308      	movs	r3, #8
 8022f5e:	e004      	b.n	8022f6a <UBLOX_DMA_IrqHandler+0x9c2>
 8022f60:	2308      	movs	r3, #8
 8022f62:	e002      	b.n	8022f6a <UBLOX_DMA_IrqHandler+0x9c2>
 8022f64:	2308      	movs	r3, #8
 8022f66:	e000      	b.n	8022f6a <UBLOX_DMA_IrqHandler+0x9c2>
 8022f68:	2308      	movs	r3, #8
 8022f6a:	4a40      	ldr	r2, [pc, #256]	; (802306c <UBLOX_DMA_IrqHandler+0xac4>)
 8022f6c:	60d3      	str	r3, [r2, #12]
 8022f6e:	e082      	b.n	8023076 <UBLOX_DMA_IrqHandler+0xace>
 8022f70:	4b2f      	ldr	r3, [pc, #188]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022f72:	681b      	ldr	r3, [r3, #0]
 8022f74:	4a30      	ldr	r2, [pc, #192]	; (8023038 <UBLOX_DMA_IrqHandler+0xa90>)
 8022f76:	4293      	cmp	r3, r2
 8022f78:	d07a      	beq.n	8023070 <UBLOX_DMA_IrqHandler+0xac8>
 8022f7a:	4b2d      	ldr	r3, [pc, #180]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022f7c:	681b      	ldr	r3, [r3, #0]
 8022f7e:	4a2f      	ldr	r2, [pc, #188]	; (802303c <UBLOX_DMA_IrqHandler+0xa94>)
 8022f80:	4293      	cmp	r3, r2
 8022f82:	d050      	beq.n	8023026 <UBLOX_DMA_IrqHandler+0xa7e>
 8022f84:	4b2a      	ldr	r3, [pc, #168]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022f86:	681b      	ldr	r3, [r3, #0]
 8022f88:	4a2d      	ldr	r2, [pc, #180]	; (8023040 <UBLOX_DMA_IrqHandler+0xa98>)
 8022f8a:	4293      	cmp	r3, r2
 8022f8c:	d049      	beq.n	8023022 <UBLOX_DMA_IrqHandler+0xa7a>
 8022f8e:	4b28      	ldr	r3, [pc, #160]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022f90:	681b      	ldr	r3, [r3, #0]
 8022f92:	4a2c      	ldr	r2, [pc, #176]	; (8023044 <UBLOX_DMA_IrqHandler+0xa9c>)
 8022f94:	4293      	cmp	r3, r2
 8022f96:	d042      	beq.n	802301e <UBLOX_DMA_IrqHandler+0xa76>
 8022f98:	4b25      	ldr	r3, [pc, #148]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022f9a:	681b      	ldr	r3, [r3, #0]
 8022f9c:	4a2a      	ldr	r2, [pc, #168]	; (8023048 <UBLOX_DMA_IrqHandler+0xaa0>)
 8022f9e:	4293      	cmp	r3, r2
 8022fa0:	d03a      	beq.n	8023018 <UBLOX_DMA_IrqHandler+0xa70>
 8022fa2:	4b23      	ldr	r3, [pc, #140]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022fa4:	681b      	ldr	r3, [r3, #0]
 8022fa6:	4a29      	ldr	r2, [pc, #164]	; (802304c <UBLOX_DMA_IrqHandler+0xaa4>)
 8022fa8:	4293      	cmp	r3, r2
 8022faa:	d032      	beq.n	8023012 <UBLOX_DMA_IrqHandler+0xa6a>
 8022fac:	4b20      	ldr	r3, [pc, #128]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022fae:	681b      	ldr	r3, [r3, #0]
 8022fb0:	4a27      	ldr	r2, [pc, #156]	; (8023050 <UBLOX_DMA_IrqHandler+0xaa8>)
 8022fb2:	4293      	cmp	r3, r2
 8022fb4:	d02a      	beq.n	802300c <UBLOX_DMA_IrqHandler+0xa64>
 8022fb6:	4b1e      	ldr	r3, [pc, #120]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022fb8:	681b      	ldr	r3, [r3, #0]
 8022fba:	4a26      	ldr	r2, [pc, #152]	; (8023054 <UBLOX_DMA_IrqHandler+0xaac>)
 8022fbc:	4293      	cmp	r3, r2
 8022fbe:	d022      	beq.n	8023006 <UBLOX_DMA_IrqHandler+0xa5e>
 8022fc0:	4b1b      	ldr	r3, [pc, #108]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022fc2:	681b      	ldr	r3, [r3, #0]
 8022fc4:	4a24      	ldr	r2, [pc, #144]	; (8023058 <UBLOX_DMA_IrqHandler+0xab0>)
 8022fc6:	4293      	cmp	r3, r2
 8022fc8:	d01a      	beq.n	8023000 <UBLOX_DMA_IrqHandler+0xa58>
 8022fca:	4b19      	ldr	r3, [pc, #100]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022fcc:	681b      	ldr	r3, [r3, #0]
 8022fce:	4a23      	ldr	r2, [pc, #140]	; (802305c <UBLOX_DMA_IrqHandler+0xab4>)
 8022fd0:	4293      	cmp	r3, r2
 8022fd2:	d012      	beq.n	8022ffa <UBLOX_DMA_IrqHandler+0xa52>
 8022fd4:	4b16      	ldr	r3, [pc, #88]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022fd6:	681b      	ldr	r3, [r3, #0]
 8022fd8:	4a21      	ldr	r2, [pc, #132]	; (8023060 <UBLOX_DMA_IrqHandler+0xab8>)
 8022fda:	4293      	cmp	r3, r2
 8022fdc:	d00a      	beq.n	8022ff4 <UBLOX_DMA_IrqHandler+0xa4c>
 8022fde:	4b14      	ldr	r3, [pc, #80]	; (8023030 <UBLOX_DMA_IrqHandler+0xa88>)
 8022fe0:	681b      	ldr	r3, [r3, #0]
 8022fe2:	4a20      	ldr	r2, [pc, #128]	; (8023064 <UBLOX_DMA_IrqHandler+0xabc>)
 8022fe4:	4293      	cmp	r3, r2
 8022fe6:	d102      	bne.n	8022fee <UBLOX_DMA_IrqHandler+0xa46>
 8022fe8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8022fec:	e041      	b.n	8023072 <UBLOX_DMA_IrqHandler+0xaca>
 8022fee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8022ff2:	e03e      	b.n	8023072 <UBLOX_DMA_IrqHandler+0xaca>
 8022ff4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8022ff8:	e03b      	b.n	8023072 <UBLOX_DMA_IrqHandler+0xaca>
 8022ffa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8022ffe:	e038      	b.n	8023072 <UBLOX_DMA_IrqHandler+0xaca>
 8023000:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8023004:	e035      	b.n	8023072 <UBLOX_DMA_IrqHandler+0xaca>
 8023006:	f44f 7300 	mov.w	r3, #512	; 0x200
 802300a:	e032      	b.n	8023072 <UBLOX_DMA_IrqHandler+0xaca>
 802300c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8023010:	e02f      	b.n	8023072 <UBLOX_DMA_IrqHandler+0xaca>
 8023012:	f44f 7300 	mov.w	r3, #512	; 0x200
 8023016:	e02c      	b.n	8023072 <UBLOX_DMA_IrqHandler+0xaca>
 8023018:	f44f 7300 	mov.w	r3, #512	; 0x200
 802301c:	e029      	b.n	8023072 <UBLOX_DMA_IrqHandler+0xaca>
 802301e:	2308      	movs	r3, #8
 8023020:	e027      	b.n	8023072 <UBLOX_DMA_IrqHandler+0xaca>
 8023022:	2308      	movs	r3, #8
 8023024:	e025      	b.n	8023072 <UBLOX_DMA_IrqHandler+0xaca>
 8023026:	2308      	movs	r3, #8
 8023028:	e023      	b.n	8023072 <UBLOX_DMA_IrqHandler+0xaca>
 802302a:	bf00      	nop
 802302c:	40026400 	.word	0x40026400
 8023030:	2000847c 	.word	0x2000847c
 8023034:	400260b8 	.word	0x400260b8
 8023038:	40026010 	.word	0x40026010
 802303c:	40026410 	.word	0x40026410
 8023040:	40026070 	.word	0x40026070
 8023044:	40026470 	.word	0x40026470
 8023048:	40026028 	.word	0x40026028
 802304c:	40026428 	.word	0x40026428
 8023050:	40026088 	.word	0x40026088
 8023054:	40026488 	.word	0x40026488
 8023058:	40026040 	.word	0x40026040
 802305c:	40026440 	.word	0x40026440
 8023060:	400260a0 	.word	0x400260a0
 8023064:	400264a0 	.word	0x400264a0
 8023068:	40026058 	.word	0x40026058
 802306c:	40026000 	.word	0x40026000
 8023070:	2308      	movs	r3, #8
 8023072:	4a96      	ldr	r2, [pc, #600]	; (80232cc <UBLOX_DMA_IrqHandler+0xd24>)
 8023074:	6093      	str	r3, [r2, #8]
        __HAL_DMA_CLEAR_FLAG(&hdma_usart2_rx, __HAL_DMA_GET_FE_FLAG_INDEX(&hdma_usart2_rx));
 8023076:	4b96      	ldr	r3, [pc, #600]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 8023078:	681b      	ldr	r3, [r3, #0]
 802307a:	461a      	mov	r2, r3
 802307c:	4b95      	ldr	r3, [pc, #596]	; (80232d4 <UBLOX_DMA_IrqHandler+0xd2c>)
 802307e:	429a      	cmp	r2, r3
 8023080:	d95c      	bls.n	802313c <UBLOX_DMA_IrqHandler+0xb94>
 8023082:	4b93      	ldr	r3, [pc, #588]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 8023084:	681b      	ldr	r3, [r3, #0]
 8023086:	4a94      	ldr	r2, [pc, #592]	; (80232d8 <UBLOX_DMA_IrqHandler+0xd30>)
 8023088:	4293      	cmp	r3, r2
 802308a:	d053      	beq.n	8023134 <UBLOX_DMA_IrqHandler+0xb8c>
 802308c:	4b90      	ldr	r3, [pc, #576]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 802308e:	681b      	ldr	r3, [r3, #0]
 8023090:	4a92      	ldr	r2, [pc, #584]	; (80232dc <UBLOX_DMA_IrqHandler+0xd34>)
 8023092:	4293      	cmp	r3, r2
 8023094:	d04c      	beq.n	8023130 <UBLOX_DMA_IrqHandler+0xb88>
 8023096:	4b8e      	ldr	r3, [pc, #568]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 8023098:	681b      	ldr	r3, [r3, #0]
 802309a:	4a91      	ldr	r2, [pc, #580]	; (80232e0 <UBLOX_DMA_IrqHandler+0xd38>)
 802309c:	4293      	cmp	r3, r2
 802309e:	d045      	beq.n	802312c <UBLOX_DMA_IrqHandler+0xb84>
 80230a0:	4b8b      	ldr	r3, [pc, #556]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 80230a2:	681b      	ldr	r3, [r3, #0]
 80230a4:	4a8f      	ldr	r2, [pc, #572]	; (80232e4 <UBLOX_DMA_IrqHandler+0xd3c>)
 80230a6:	4293      	cmp	r3, r2
 80230a8:	d03e      	beq.n	8023128 <UBLOX_DMA_IrqHandler+0xb80>
 80230aa:	4b89      	ldr	r3, [pc, #548]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 80230ac:	681b      	ldr	r3, [r3, #0]
 80230ae:	4a8e      	ldr	r2, [pc, #568]	; (80232e8 <UBLOX_DMA_IrqHandler+0xd40>)
 80230b0:	4293      	cmp	r3, r2
 80230b2:	d037      	beq.n	8023124 <UBLOX_DMA_IrqHandler+0xb7c>
 80230b4:	4b86      	ldr	r3, [pc, #536]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 80230b6:	681b      	ldr	r3, [r3, #0]
 80230b8:	4a8c      	ldr	r2, [pc, #560]	; (80232ec <UBLOX_DMA_IrqHandler+0xd44>)
 80230ba:	4293      	cmp	r3, r2
 80230bc:	d030      	beq.n	8023120 <UBLOX_DMA_IrqHandler+0xb78>
 80230be:	4b84      	ldr	r3, [pc, #528]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 80230c0:	681b      	ldr	r3, [r3, #0]
 80230c2:	4a8b      	ldr	r2, [pc, #556]	; (80232f0 <UBLOX_DMA_IrqHandler+0xd48>)
 80230c4:	4293      	cmp	r3, r2
 80230c6:	d029      	beq.n	802311c <UBLOX_DMA_IrqHandler+0xb74>
 80230c8:	4b81      	ldr	r3, [pc, #516]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 80230ca:	681b      	ldr	r3, [r3, #0]
 80230cc:	4a89      	ldr	r2, [pc, #548]	; (80232f4 <UBLOX_DMA_IrqHandler+0xd4c>)
 80230ce:	4293      	cmp	r3, r2
 80230d0:	d022      	beq.n	8023118 <UBLOX_DMA_IrqHandler+0xb70>
 80230d2:	4b7f      	ldr	r3, [pc, #508]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 80230d4:	681b      	ldr	r3, [r3, #0]
 80230d6:	4a88      	ldr	r2, [pc, #544]	; (80232f8 <UBLOX_DMA_IrqHandler+0xd50>)
 80230d8:	4293      	cmp	r3, r2
 80230da:	d01a      	beq.n	8023112 <UBLOX_DMA_IrqHandler+0xb6a>
 80230dc:	4b7c      	ldr	r3, [pc, #496]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 80230de:	681b      	ldr	r3, [r3, #0]
 80230e0:	4a86      	ldr	r2, [pc, #536]	; (80232fc <UBLOX_DMA_IrqHandler+0xd54>)
 80230e2:	4293      	cmp	r3, r2
 80230e4:	d012      	beq.n	802310c <UBLOX_DMA_IrqHandler+0xb64>
 80230e6:	4b7a      	ldr	r3, [pc, #488]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 80230e8:	681b      	ldr	r3, [r3, #0]
 80230ea:	4a85      	ldr	r2, [pc, #532]	; (8023300 <UBLOX_DMA_IrqHandler+0xd58>)
 80230ec:	4293      	cmp	r3, r2
 80230ee:	d00a      	beq.n	8023106 <UBLOX_DMA_IrqHandler+0xb5e>
 80230f0:	4b77      	ldr	r3, [pc, #476]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 80230f2:	681b      	ldr	r3, [r3, #0]
 80230f4:	4a83      	ldr	r2, [pc, #524]	; (8023304 <UBLOX_DMA_IrqHandler+0xd5c>)
 80230f6:	4293      	cmp	r3, r2
 80230f8:	d102      	bne.n	8023100 <UBLOX_DMA_IrqHandler+0xb58>
 80230fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80230fe:	e01a      	b.n	8023136 <UBLOX_DMA_IrqHandler+0xb8e>
 8023100:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8023104:	e017      	b.n	8023136 <UBLOX_DMA_IrqHandler+0xb8e>
 8023106:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 802310a:	e014      	b.n	8023136 <UBLOX_DMA_IrqHandler+0xb8e>
 802310c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8023110:	e011      	b.n	8023136 <UBLOX_DMA_IrqHandler+0xb8e>
 8023112:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8023116:	e00e      	b.n	8023136 <UBLOX_DMA_IrqHandler+0xb8e>
 8023118:	2340      	movs	r3, #64	; 0x40
 802311a:	e00c      	b.n	8023136 <UBLOX_DMA_IrqHandler+0xb8e>
 802311c:	2340      	movs	r3, #64	; 0x40
 802311e:	e00a      	b.n	8023136 <UBLOX_DMA_IrqHandler+0xb8e>
 8023120:	2340      	movs	r3, #64	; 0x40
 8023122:	e008      	b.n	8023136 <UBLOX_DMA_IrqHandler+0xb8e>
 8023124:	2340      	movs	r3, #64	; 0x40
 8023126:	e006      	b.n	8023136 <UBLOX_DMA_IrqHandler+0xb8e>
 8023128:	2301      	movs	r3, #1
 802312a:	e004      	b.n	8023136 <UBLOX_DMA_IrqHandler+0xb8e>
 802312c:	2301      	movs	r3, #1
 802312e:	e002      	b.n	8023136 <UBLOX_DMA_IrqHandler+0xb8e>
 8023130:	2301      	movs	r3, #1
 8023132:	e000      	b.n	8023136 <UBLOX_DMA_IrqHandler+0xb8e>
 8023134:	2301      	movs	r3, #1
 8023136:	4a74      	ldr	r2, [pc, #464]	; (8023308 <UBLOX_DMA_IrqHandler+0xd60>)
 8023138:	60d3      	str	r3, [r2, #12]
 802313a:	e147      	b.n	80233cc <UBLOX_DMA_IrqHandler+0xe24>
 802313c:	4b64      	ldr	r3, [pc, #400]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 802313e:	681b      	ldr	r3, [r3, #0]
 8023140:	461a      	mov	r2, r3
 8023142:	4b72      	ldr	r3, [pc, #456]	; (802330c <UBLOX_DMA_IrqHandler+0xd64>)
 8023144:	429a      	cmp	r2, r3
 8023146:	d95c      	bls.n	8023202 <UBLOX_DMA_IrqHandler+0xc5a>
 8023148:	4b61      	ldr	r3, [pc, #388]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 802314a:	681b      	ldr	r3, [r3, #0]
 802314c:	4a62      	ldr	r2, [pc, #392]	; (80232d8 <UBLOX_DMA_IrqHandler+0xd30>)
 802314e:	4293      	cmp	r3, r2
 8023150:	d053      	beq.n	80231fa <UBLOX_DMA_IrqHandler+0xc52>
 8023152:	4b5f      	ldr	r3, [pc, #380]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 8023154:	681b      	ldr	r3, [r3, #0]
 8023156:	4a61      	ldr	r2, [pc, #388]	; (80232dc <UBLOX_DMA_IrqHandler+0xd34>)
 8023158:	4293      	cmp	r3, r2
 802315a:	d04c      	beq.n	80231f6 <UBLOX_DMA_IrqHandler+0xc4e>
 802315c:	4b5c      	ldr	r3, [pc, #368]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 802315e:	681b      	ldr	r3, [r3, #0]
 8023160:	4a5f      	ldr	r2, [pc, #380]	; (80232e0 <UBLOX_DMA_IrqHandler+0xd38>)
 8023162:	4293      	cmp	r3, r2
 8023164:	d045      	beq.n	80231f2 <UBLOX_DMA_IrqHandler+0xc4a>
 8023166:	4b5a      	ldr	r3, [pc, #360]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 8023168:	681b      	ldr	r3, [r3, #0]
 802316a:	4a5e      	ldr	r2, [pc, #376]	; (80232e4 <UBLOX_DMA_IrqHandler+0xd3c>)
 802316c:	4293      	cmp	r3, r2
 802316e:	d03e      	beq.n	80231ee <UBLOX_DMA_IrqHandler+0xc46>
 8023170:	4b57      	ldr	r3, [pc, #348]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 8023172:	681b      	ldr	r3, [r3, #0]
 8023174:	4a5c      	ldr	r2, [pc, #368]	; (80232e8 <UBLOX_DMA_IrqHandler+0xd40>)
 8023176:	4293      	cmp	r3, r2
 8023178:	d037      	beq.n	80231ea <UBLOX_DMA_IrqHandler+0xc42>
 802317a:	4b55      	ldr	r3, [pc, #340]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 802317c:	681b      	ldr	r3, [r3, #0]
 802317e:	4a5b      	ldr	r2, [pc, #364]	; (80232ec <UBLOX_DMA_IrqHandler+0xd44>)
 8023180:	4293      	cmp	r3, r2
 8023182:	d030      	beq.n	80231e6 <UBLOX_DMA_IrqHandler+0xc3e>
 8023184:	4b52      	ldr	r3, [pc, #328]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 8023186:	681b      	ldr	r3, [r3, #0]
 8023188:	4a59      	ldr	r2, [pc, #356]	; (80232f0 <UBLOX_DMA_IrqHandler+0xd48>)
 802318a:	4293      	cmp	r3, r2
 802318c:	d029      	beq.n	80231e2 <UBLOX_DMA_IrqHandler+0xc3a>
 802318e:	4b50      	ldr	r3, [pc, #320]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 8023190:	681b      	ldr	r3, [r3, #0]
 8023192:	4a58      	ldr	r2, [pc, #352]	; (80232f4 <UBLOX_DMA_IrqHandler+0xd4c>)
 8023194:	4293      	cmp	r3, r2
 8023196:	d022      	beq.n	80231de <UBLOX_DMA_IrqHandler+0xc36>
 8023198:	4b4d      	ldr	r3, [pc, #308]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 802319a:	681b      	ldr	r3, [r3, #0]
 802319c:	4a56      	ldr	r2, [pc, #344]	; (80232f8 <UBLOX_DMA_IrqHandler+0xd50>)
 802319e:	4293      	cmp	r3, r2
 80231a0:	d01a      	beq.n	80231d8 <UBLOX_DMA_IrqHandler+0xc30>
 80231a2:	4b4b      	ldr	r3, [pc, #300]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 80231a4:	681b      	ldr	r3, [r3, #0]
 80231a6:	4a55      	ldr	r2, [pc, #340]	; (80232fc <UBLOX_DMA_IrqHandler+0xd54>)
 80231a8:	4293      	cmp	r3, r2
 80231aa:	d012      	beq.n	80231d2 <UBLOX_DMA_IrqHandler+0xc2a>
 80231ac:	4b48      	ldr	r3, [pc, #288]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 80231ae:	681b      	ldr	r3, [r3, #0]
 80231b0:	4a53      	ldr	r2, [pc, #332]	; (8023300 <UBLOX_DMA_IrqHandler+0xd58>)
 80231b2:	4293      	cmp	r3, r2
 80231b4:	d00a      	beq.n	80231cc <UBLOX_DMA_IrqHandler+0xc24>
 80231b6:	4b46      	ldr	r3, [pc, #280]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 80231b8:	681b      	ldr	r3, [r3, #0]
 80231ba:	4a52      	ldr	r2, [pc, #328]	; (8023304 <UBLOX_DMA_IrqHandler+0xd5c>)
 80231bc:	4293      	cmp	r3, r2
 80231be:	d102      	bne.n	80231c6 <UBLOX_DMA_IrqHandler+0xc1e>
 80231c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80231c4:	e01a      	b.n	80231fc <UBLOX_DMA_IrqHandler+0xc54>
 80231c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80231ca:	e017      	b.n	80231fc <UBLOX_DMA_IrqHandler+0xc54>
 80231cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80231d0:	e014      	b.n	80231fc <UBLOX_DMA_IrqHandler+0xc54>
 80231d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80231d6:	e011      	b.n	80231fc <UBLOX_DMA_IrqHandler+0xc54>
 80231d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80231dc:	e00e      	b.n	80231fc <UBLOX_DMA_IrqHandler+0xc54>
 80231de:	2340      	movs	r3, #64	; 0x40
 80231e0:	e00c      	b.n	80231fc <UBLOX_DMA_IrqHandler+0xc54>
 80231e2:	2340      	movs	r3, #64	; 0x40
 80231e4:	e00a      	b.n	80231fc <UBLOX_DMA_IrqHandler+0xc54>
 80231e6:	2340      	movs	r3, #64	; 0x40
 80231e8:	e008      	b.n	80231fc <UBLOX_DMA_IrqHandler+0xc54>
 80231ea:	2340      	movs	r3, #64	; 0x40
 80231ec:	e006      	b.n	80231fc <UBLOX_DMA_IrqHandler+0xc54>
 80231ee:	2301      	movs	r3, #1
 80231f0:	e004      	b.n	80231fc <UBLOX_DMA_IrqHandler+0xc54>
 80231f2:	2301      	movs	r3, #1
 80231f4:	e002      	b.n	80231fc <UBLOX_DMA_IrqHandler+0xc54>
 80231f6:	2301      	movs	r3, #1
 80231f8:	e000      	b.n	80231fc <UBLOX_DMA_IrqHandler+0xc54>
 80231fa:	2301      	movs	r3, #1
 80231fc:	4a42      	ldr	r2, [pc, #264]	; (8023308 <UBLOX_DMA_IrqHandler+0xd60>)
 80231fe:	6093      	str	r3, [r2, #8]
 8023200:	e0e4      	b.n	80233cc <UBLOX_DMA_IrqHandler+0xe24>
 8023202:	4b33      	ldr	r3, [pc, #204]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 8023204:	681b      	ldr	r3, [r3, #0]
 8023206:	461a      	mov	r2, r3
 8023208:	4b41      	ldr	r3, [pc, #260]	; (8023310 <UBLOX_DMA_IrqHandler+0xd68>)
 802320a:	429a      	cmp	r2, r3
 802320c:	f240 8082 	bls.w	8023314 <UBLOX_DMA_IrqHandler+0xd6c>
 8023210:	4b2f      	ldr	r3, [pc, #188]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 8023212:	681b      	ldr	r3, [r3, #0]
 8023214:	4a30      	ldr	r2, [pc, #192]	; (80232d8 <UBLOX_DMA_IrqHandler+0xd30>)
 8023216:	4293      	cmp	r3, r2
 8023218:	d053      	beq.n	80232c2 <UBLOX_DMA_IrqHandler+0xd1a>
 802321a:	4b2d      	ldr	r3, [pc, #180]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 802321c:	681b      	ldr	r3, [r3, #0]
 802321e:	4a2f      	ldr	r2, [pc, #188]	; (80232dc <UBLOX_DMA_IrqHandler+0xd34>)
 8023220:	4293      	cmp	r3, r2
 8023222:	d04c      	beq.n	80232be <UBLOX_DMA_IrqHandler+0xd16>
 8023224:	4b2a      	ldr	r3, [pc, #168]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 8023226:	681b      	ldr	r3, [r3, #0]
 8023228:	4a2d      	ldr	r2, [pc, #180]	; (80232e0 <UBLOX_DMA_IrqHandler+0xd38>)
 802322a:	4293      	cmp	r3, r2
 802322c:	d045      	beq.n	80232ba <UBLOX_DMA_IrqHandler+0xd12>
 802322e:	4b28      	ldr	r3, [pc, #160]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 8023230:	681b      	ldr	r3, [r3, #0]
 8023232:	4a2c      	ldr	r2, [pc, #176]	; (80232e4 <UBLOX_DMA_IrqHandler+0xd3c>)
 8023234:	4293      	cmp	r3, r2
 8023236:	d03e      	beq.n	80232b6 <UBLOX_DMA_IrqHandler+0xd0e>
 8023238:	4b25      	ldr	r3, [pc, #148]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 802323a:	681b      	ldr	r3, [r3, #0]
 802323c:	4a2a      	ldr	r2, [pc, #168]	; (80232e8 <UBLOX_DMA_IrqHandler+0xd40>)
 802323e:	4293      	cmp	r3, r2
 8023240:	d037      	beq.n	80232b2 <UBLOX_DMA_IrqHandler+0xd0a>
 8023242:	4b23      	ldr	r3, [pc, #140]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 8023244:	681b      	ldr	r3, [r3, #0]
 8023246:	4a29      	ldr	r2, [pc, #164]	; (80232ec <UBLOX_DMA_IrqHandler+0xd44>)
 8023248:	4293      	cmp	r3, r2
 802324a:	d030      	beq.n	80232ae <UBLOX_DMA_IrqHandler+0xd06>
 802324c:	4b20      	ldr	r3, [pc, #128]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 802324e:	681b      	ldr	r3, [r3, #0]
 8023250:	4a27      	ldr	r2, [pc, #156]	; (80232f0 <UBLOX_DMA_IrqHandler+0xd48>)
 8023252:	4293      	cmp	r3, r2
 8023254:	d029      	beq.n	80232aa <UBLOX_DMA_IrqHandler+0xd02>
 8023256:	4b1e      	ldr	r3, [pc, #120]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 8023258:	681b      	ldr	r3, [r3, #0]
 802325a:	4a26      	ldr	r2, [pc, #152]	; (80232f4 <UBLOX_DMA_IrqHandler+0xd4c>)
 802325c:	4293      	cmp	r3, r2
 802325e:	d022      	beq.n	80232a6 <UBLOX_DMA_IrqHandler+0xcfe>
 8023260:	4b1b      	ldr	r3, [pc, #108]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 8023262:	681b      	ldr	r3, [r3, #0]
 8023264:	4a24      	ldr	r2, [pc, #144]	; (80232f8 <UBLOX_DMA_IrqHandler+0xd50>)
 8023266:	4293      	cmp	r3, r2
 8023268:	d01a      	beq.n	80232a0 <UBLOX_DMA_IrqHandler+0xcf8>
 802326a:	4b19      	ldr	r3, [pc, #100]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 802326c:	681b      	ldr	r3, [r3, #0]
 802326e:	4a23      	ldr	r2, [pc, #140]	; (80232fc <UBLOX_DMA_IrqHandler+0xd54>)
 8023270:	4293      	cmp	r3, r2
 8023272:	d012      	beq.n	802329a <UBLOX_DMA_IrqHandler+0xcf2>
 8023274:	4b16      	ldr	r3, [pc, #88]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 8023276:	681b      	ldr	r3, [r3, #0]
 8023278:	4a21      	ldr	r2, [pc, #132]	; (8023300 <UBLOX_DMA_IrqHandler+0xd58>)
 802327a:	4293      	cmp	r3, r2
 802327c:	d00a      	beq.n	8023294 <UBLOX_DMA_IrqHandler+0xcec>
 802327e:	4b14      	ldr	r3, [pc, #80]	; (80232d0 <UBLOX_DMA_IrqHandler+0xd28>)
 8023280:	681b      	ldr	r3, [r3, #0]
 8023282:	4a20      	ldr	r2, [pc, #128]	; (8023304 <UBLOX_DMA_IrqHandler+0xd5c>)
 8023284:	4293      	cmp	r3, r2
 8023286:	d102      	bne.n	802328e <UBLOX_DMA_IrqHandler+0xce6>
 8023288:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 802328c:	e01a      	b.n	80232c4 <UBLOX_DMA_IrqHandler+0xd1c>
 802328e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8023292:	e017      	b.n	80232c4 <UBLOX_DMA_IrqHandler+0xd1c>
 8023294:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8023298:	e014      	b.n	80232c4 <UBLOX_DMA_IrqHandler+0xd1c>
 802329a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 802329e:	e011      	b.n	80232c4 <UBLOX_DMA_IrqHandler+0xd1c>
 80232a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80232a4:	e00e      	b.n	80232c4 <UBLOX_DMA_IrqHandler+0xd1c>
 80232a6:	2340      	movs	r3, #64	; 0x40
 80232a8:	e00c      	b.n	80232c4 <UBLOX_DMA_IrqHandler+0xd1c>
 80232aa:	2340      	movs	r3, #64	; 0x40
 80232ac:	e00a      	b.n	80232c4 <UBLOX_DMA_IrqHandler+0xd1c>
 80232ae:	2340      	movs	r3, #64	; 0x40
 80232b0:	e008      	b.n	80232c4 <UBLOX_DMA_IrqHandler+0xd1c>
 80232b2:	2340      	movs	r3, #64	; 0x40
 80232b4:	e006      	b.n	80232c4 <UBLOX_DMA_IrqHandler+0xd1c>
 80232b6:	2301      	movs	r3, #1
 80232b8:	e004      	b.n	80232c4 <UBLOX_DMA_IrqHandler+0xd1c>
 80232ba:	2301      	movs	r3, #1
 80232bc:	e002      	b.n	80232c4 <UBLOX_DMA_IrqHandler+0xd1c>
 80232be:	2301      	movs	r3, #1
 80232c0:	e000      	b.n	80232c4 <UBLOX_DMA_IrqHandler+0xd1c>
 80232c2:	2301      	movs	r3, #1
 80232c4:	4a01      	ldr	r2, [pc, #4]	; (80232cc <UBLOX_DMA_IrqHandler+0xd24>)
 80232c6:	60d3      	str	r3, [r2, #12]
 80232c8:	e080      	b.n	80233cc <UBLOX_DMA_IrqHandler+0xe24>
 80232ca:	bf00      	nop
 80232cc:	40026000 	.word	0x40026000
 80232d0:	2000847c 	.word	0x2000847c
 80232d4:	40026458 	.word	0x40026458
 80232d8:	40026010 	.word	0x40026010
 80232dc:	40026410 	.word	0x40026410
 80232e0:	40026070 	.word	0x40026070
 80232e4:	40026470 	.word	0x40026470
 80232e8:	40026028 	.word	0x40026028
 80232ec:	40026428 	.word	0x40026428
 80232f0:	40026088 	.word	0x40026088
 80232f4:	40026488 	.word	0x40026488
 80232f8:	40026040 	.word	0x40026040
 80232fc:	40026440 	.word	0x40026440
 8023300:	400260a0 	.word	0x400260a0
 8023304:	400264a0 	.word	0x400264a0
 8023308:	40026400 	.word	0x40026400
 802330c:	400260b8 	.word	0x400260b8
 8023310:	40026058 	.word	0x40026058
 8023314:	4b95      	ldr	r3, [pc, #596]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 8023316:	681b      	ldr	r3, [r3, #0]
 8023318:	4a95      	ldr	r2, [pc, #596]	; (8023570 <UBLOX_DMA_IrqHandler+0xfc8>)
 802331a:	4293      	cmp	r3, r2
 802331c:	d053      	beq.n	80233c6 <UBLOX_DMA_IrqHandler+0xe1e>
 802331e:	4b93      	ldr	r3, [pc, #588]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 8023320:	681b      	ldr	r3, [r3, #0]
 8023322:	4a94      	ldr	r2, [pc, #592]	; (8023574 <UBLOX_DMA_IrqHandler+0xfcc>)
 8023324:	4293      	cmp	r3, r2
 8023326:	d04c      	beq.n	80233c2 <UBLOX_DMA_IrqHandler+0xe1a>
 8023328:	4b90      	ldr	r3, [pc, #576]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 802332a:	681b      	ldr	r3, [r3, #0]
 802332c:	4a92      	ldr	r2, [pc, #584]	; (8023578 <UBLOX_DMA_IrqHandler+0xfd0>)
 802332e:	4293      	cmp	r3, r2
 8023330:	d045      	beq.n	80233be <UBLOX_DMA_IrqHandler+0xe16>
 8023332:	4b8e      	ldr	r3, [pc, #568]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 8023334:	681b      	ldr	r3, [r3, #0]
 8023336:	4a91      	ldr	r2, [pc, #580]	; (802357c <UBLOX_DMA_IrqHandler+0xfd4>)
 8023338:	4293      	cmp	r3, r2
 802333a:	d03e      	beq.n	80233ba <UBLOX_DMA_IrqHandler+0xe12>
 802333c:	4b8b      	ldr	r3, [pc, #556]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 802333e:	681b      	ldr	r3, [r3, #0]
 8023340:	4a8f      	ldr	r2, [pc, #572]	; (8023580 <UBLOX_DMA_IrqHandler+0xfd8>)
 8023342:	4293      	cmp	r3, r2
 8023344:	d037      	beq.n	80233b6 <UBLOX_DMA_IrqHandler+0xe0e>
 8023346:	4b89      	ldr	r3, [pc, #548]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 8023348:	681b      	ldr	r3, [r3, #0]
 802334a:	4a8e      	ldr	r2, [pc, #568]	; (8023584 <UBLOX_DMA_IrqHandler+0xfdc>)
 802334c:	4293      	cmp	r3, r2
 802334e:	d030      	beq.n	80233b2 <UBLOX_DMA_IrqHandler+0xe0a>
 8023350:	4b86      	ldr	r3, [pc, #536]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 8023352:	681b      	ldr	r3, [r3, #0]
 8023354:	4a8c      	ldr	r2, [pc, #560]	; (8023588 <UBLOX_DMA_IrqHandler+0xfe0>)
 8023356:	4293      	cmp	r3, r2
 8023358:	d029      	beq.n	80233ae <UBLOX_DMA_IrqHandler+0xe06>
 802335a:	4b84      	ldr	r3, [pc, #528]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 802335c:	681b      	ldr	r3, [r3, #0]
 802335e:	4a8b      	ldr	r2, [pc, #556]	; (802358c <UBLOX_DMA_IrqHandler+0xfe4>)
 8023360:	4293      	cmp	r3, r2
 8023362:	d022      	beq.n	80233aa <UBLOX_DMA_IrqHandler+0xe02>
 8023364:	4b81      	ldr	r3, [pc, #516]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 8023366:	681b      	ldr	r3, [r3, #0]
 8023368:	4a89      	ldr	r2, [pc, #548]	; (8023590 <UBLOX_DMA_IrqHandler+0xfe8>)
 802336a:	4293      	cmp	r3, r2
 802336c:	d01a      	beq.n	80233a4 <UBLOX_DMA_IrqHandler+0xdfc>
 802336e:	4b7f      	ldr	r3, [pc, #508]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 8023370:	681b      	ldr	r3, [r3, #0]
 8023372:	4a88      	ldr	r2, [pc, #544]	; (8023594 <UBLOX_DMA_IrqHandler+0xfec>)
 8023374:	4293      	cmp	r3, r2
 8023376:	d012      	beq.n	802339e <UBLOX_DMA_IrqHandler+0xdf6>
 8023378:	4b7c      	ldr	r3, [pc, #496]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 802337a:	681b      	ldr	r3, [r3, #0]
 802337c:	4a86      	ldr	r2, [pc, #536]	; (8023598 <UBLOX_DMA_IrqHandler+0xff0>)
 802337e:	4293      	cmp	r3, r2
 8023380:	d00a      	beq.n	8023398 <UBLOX_DMA_IrqHandler+0xdf0>
 8023382:	4b7a      	ldr	r3, [pc, #488]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 8023384:	681b      	ldr	r3, [r3, #0]
 8023386:	4a85      	ldr	r2, [pc, #532]	; (802359c <UBLOX_DMA_IrqHandler+0xff4>)
 8023388:	4293      	cmp	r3, r2
 802338a:	d102      	bne.n	8023392 <UBLOX_DMA_IrqHandler+0xdea>
 802338c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8023390:	e01a      	b.n	80233c8 <UBLOX_DMA_IrqHandler+0xe20>
 8023392:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8023396:	e017      	b.n	80233c8 <UBLOX_DMA_IrqHandler+0xe20>
 8023398:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 802339c:	e014      	b.n	80233c8 <UBLOX_DMA_IrqHandler+0xe20>
 802339e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80233a2:	e011      	b.n	80233c8 <UBLOX_DMA_IrqHandler+0xe20>
 80233a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80233a8:	e00e      	b.n	80233c8 <UBLOX_DMA_IrqHandler+0xe20>
 80233aa:	2340      	movs	r3, #64	; 0x40
 80233ac:	e00c      	b.n	80233c8 <UBLOX_DMA_IrqHandler+0xe20>
 80233ae:	2340      	movs	r3, #64	; 0x40
 80233b0:	e00a      	b.n	80233c8 <UBLOX_DMA_IrqHandler+0xe20>
 80233b2:	2340      	movs	r3, #64	; 0x40
 80233b4:	e008      	b.n	80233c8 <UBLOX_DMA_IrqHandler+0xe20>
 80233b6:	2340      	movs	r3, #64	; 0x40
 80233b8:	e006      	b.n	80233c8 <UBLOX_DMA_IrqHandler+0xe20>
 80233ba:	2301      	movs	r3, #1
 80233bc:	e004      	b.n	80233c8 <UBLOX_DMA_IrqHandler+0xe20>
 80233be:	2301      	movs	r3, #1
 80233c0:	e002      	b.n	80233c8 <UBLOX_DMA_IrqHandler+0xe20>
 80233c2:	2301      	movs	r3, #1
 80233c4:	e000      	b.n	80233c8 <UBLOX_DMA_IrqHandler+0xe20>
 80233c6:	2301      	movs	r3, #1
 80233c8:	4a75      	ldr	r2, [pc, #468]	; (80235a0 <UBLOX_DMA_IrqHandler+0xff8>)
 80233ca:	6093      	str	r3, [r2, #8]
        __HAL_DMA_CLEAR_FLAG(&hdma_usart2_rx, __HAL_DMA_GET_DME_FLAG_INDEX(&hdma_usart2_rx));
 80233cc:	4b67      	ldr	r3, [pc, #412]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 80233ce:	681b      	ldr	r3, [r3, #0]
 80233d0:	461a      	mov	r2, r3
 80233d2:	4b74      	ldr	r3, [pc, #464]	; (80235a4 <UBLOX_DMA_IrqHandler+0xffc>)
 80233d4:	429a      	cmp	r2, r3
 80233d6:	d960      	bls.n	802349a <UBLOX_DMA_IrqHandler+0xef2>
 80233d8:	4b64      	ldr	r3, [pc, #400]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 80233da:	681b      	ldr	r3, [r3, #0]
 80233dc:	4a64      	ldr	r2, [pc, #400]	; (8023570 <UBLOX_DMA_IrqHandler+0xfc8>)
 80233de:	4293      	cmp	r3, r2
 80233e0:	d057      	beq.n	8023492 <UBLOX_DMA_IrqHandler+0xeea>
 80233e2:	4b62      	ldr	r3, [pc, #392]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 80233e4:	681b      	ldr	r3, [r3, #0]
 80233e6:	4a63      	ldr	r2, [pc, #396]	; (8023574 <UBLOX_DMA_IrqHandler+0xfcc>)
 80233e8:	4293      	cmp	r3, r2
 80233ea:	d050      	beq.n	802348e <UBLOX_DMA_IrqHandler+0xee6>
 80233ec:	4b5f      	ldr	r3, [pc, #380]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 80233ee:	681b      	ldr	r3, [r3, #0]
 80233f0:	4a61      	ldr	r2, [pc, #388]	; (8023578 <UBLOX_DMA_IrqHandler+0xfd0>)
 80233f2:	4293      	cmp	r3, r2
 80233f4:	d049      	beq.n	802348a <UBLOX_DMA_IrqHandler+0xee2>
 80233f6:	4b5d      	ldr	r3, [pc, #372]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 80233f8:	681b      	ldr	r3, [r3, #0]
 80233fa:	4a60      	ldr	r2, [pc, #384]	; (802357c <UBLOX_DMA_IrqHandler+0xfd4>)
 80233fc:	4293      	cmp	r3, r2
 80233fe:	d042      	beq.n	8023486 <UBLOX_DMA_IrqHandler+0xede>
 8023400:	4b5a      	ldr	r3, [pc, #360]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 8023402:	681b      	ldr	r3, [r3, #0]
 8023404:	4a5e      	ldr	r2, [pc, #376]	; (8023580 <UBLOX_DMA_IrqHandler+0xfd8>)
 8023406:	4293      	cmp	r3, r2
 8023408:	d03a      	beq.n	8023480 <UBLOX_DMA_IrqHandler+0xed8>
 802340a:	4b58      	ldr	r3, [pc, #352]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 802340c:	681b      	ldr	r3, [r3, #0]
 802340e:	4a5d      	ldr	r2, [pc, #372]	; (8023584 <UBLOX_DMA_IrqHandler+0xfdc>)
 8023410:	4293      	cmp	r3, r2
 8023412:	d032      	beq.n	802347a <UBLOX_DMA_IrqHandler+0xed2>
 8023414:	4b55      	ldr	r3, [pc, #340]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 8023416:	681b      	ldr	r3, [r3, #0]
 8023418:	4a5b      	ldr	r2, [pc, #364]	; (8023588 <UBLOX_DMA_IrqHandler+0xfe0>)
 802341a:	4293      	cmp	r3, r2
 802341c:	d02a      	beq.n	8023474 <UBLOX_DMA_IrqHandler+0xecc>
 802341e:	4b53      	ldr	r3, [pc, #332]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 8023420:	681b      	ldr	r3, [r3, #0]
 8023422:	4a5a      	ldr	r2, [pc, #360]	; (802358c <UBLOX_DMA_IrqHandler+0xfe4>)
 8023424:	4293      	cmp	r3, r2
 8023426:	d022      	beq.n	802346e <UBLOX_DMA_IrqHandler+0xec6>
 8023428:	4b50      	ldr	r3, [pc, #320]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 802342a:	681b      	ldr	r3, [r3, #0]
 802342c:	4a58      	ldr	r2, [pc, #352]	; (8023590 <UBLOX_DMA_IrqHandler+0xfe8>)
 802342e:	4293      	cmp	r3, r2
 8023430:	d01a      	beq.n	8023468 <UBLOX_DMA_IrqHandler+0xec0>
 8023432:	4b4e      	ldr	r3, [pc, #312]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 8023434:	681b      	ldr	r3, [r3, #0]
 8023436:	4a57      	ldr	r2, [pc, #348]	; (8023594 <UBLOX_DMA_IrqHandler+0xfec>)
 8023438:	4293      	cmp	r3, r2
 802343a:	d012      	beq.n	8023462 <UBLOX_DMA_IrqHandler+0xeba>
 802343c:	4b4b      	ldr	r3, [pc, #300]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 802343e:	681b      	ldr	r3, [r3, #0]
 8023440:	4a55      	ldr	r2, [pc, #340]	; (8023598 <UBLOX_DMA_IrqHandler+0xff0>)
 8023442:	4293      	cmp	r3, r2
 8023444:	d00a      	beq.n	802345c <UBLOX_DMA_IrqHandler+0xeb4>
 8023446:	4b49      	ldr	r3, [pc, #292]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 8023448:	681b      	ldr	r3, [r3, #0]
 802344a:	4a54      	ldr	r2, [pc, #336]	; (802359c <UBLOX_DMA_IrqHandler+0xff4>)
 802344c:	4293      	cmp	r3, r2
 802344e:	d102      	bne.n	8023456 <UBLOX_DMA_IrqHandler+0xeae>
 8023450:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8023454:	e01e      	b.n	8023494 <UBLOX_DMA_IrqHandler+0xeec>
 8023456:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 802345a:	e01b      	b.n	8023494 <UBLOX_DMA_IrqHandler+0xeec>
 802345c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8023460:	e018      	b.n	8023494 <UBLOX_DMA_IrqHandler+0xeec>
 8023462:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8023466:	e015      	b.n	8023494 <UBLOX_DMA_IrqHandler+0xeec>
 8023468:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 802346c:	e012      	b.n	8023494 <UBLOX_DMA_IrqHandler+0xeec>
 802346e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8023472:	e00f      	b.n	8023494 <UBLOX_DMA_IrqHandler+0xeec>
 8023474:	f44f 7380 	mov.w	r3, #256	; 0x100
 8023478:	e00c      	b.n	8023494 <UBLOX_DMA_IrqHandler+0xeec>
 802347a:	f44f 7380 	mov.w	r3, #256	; 0x100
 802347e:	e009      	b.n	8023494 <UBLOX_DMA_IrqHandler+0xeec>
 8023480:	f44f 7380 	mov.w	r3, #256	; 0x100
 8023484:	e006      	b.n	8023494 <UBLOX_DMA_IrqHandler+0xeec>
 8023486:	2304      	movs	r3, #4
 8023488:	e004      	b.n	8023494 <UBLOX_DMA_IrqHandler+0xeec>
 802348a:	2304      	movs	r3, #4
 802348c:	e002      	b.n	8023494 <UBLOX_DMA_IrqHandler+0xeec>
 802348e:	2304      	movs	r3, #4
 8023490:	e000      	b.n	8023494 <UBLOX_DMA_IrqHandler+0xeec>
 8023492:	2304      	movs	r3, #4
 8023494:	4a44      	ldr	r2, [pc, #272]	; (80235a8 <UBLOX_DMA_IrqHandler+0x1000>)
 8023496:	60d3      	str	r3, [r2, #12]
 8023498:	e151      	b.n	802373e <UBLOX_DMA_IrqHandler+0x1196>
 802349a:	4b34      	ldr	r3, [pc, #208]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 802349c:	681b      	ldr	r3, [r3, #0]
 802349e:	461a      	mov	r2, r3
 80234a0:	4b42      	ldr	r3, [pc, #264]	; (80235ac <UBLOX_DMA_IrqHandler+0x1004>)
 80234a2:	429a      	cmp	r2, r3
 80234a4:	f240 8084 	bls.w	80235b0 <UBLOX_DMA_IrqHandler+0x1008>
 80234a8:	4b30      	ldr	r3, [pc, #192]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 80234aa:	681b      	ldr	r3, [r3, #0]
 80234ac:	4a30      	ldr	r2, [pc, #192]	; (8023570 <UBLOX_DMA_IrqHandler+0xfc8>)
 80234ae:	4293      	cmp	r3, r2
 80234b0:	d057      	beq.n	8023562 <UBLOX_DMA_IrqHandler+0xfba>
 80234b2:	4b2e      	ldr	r3, [pc, #184]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 80234b4:	681b      	ldr	r3, [r3, #0]
 80234b6:	4a2f      	ldr	r2, [pc, #188]	; (8023574 <UBLOX_DMA_IrqHandler+0xfcc>)
 80234b8:	4293      	cmp	r3, r2
 80234ba:	d050      	beq.n	802355e <UBLOX_DMA_IrqHandler+0xfb6>
 80234bc:	4b2b      	ldr	r3, [pc, #172]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 80234be:	681b      	ldr	r3, [r3, #0]
 80234c0:	4a2d      	ldr	r2, [pc, #180]	; (8023578 <UBLOX_DMA_IrqHandler+0xfd0>)
 80234c2:	4293      	cmp	r3, r2
 80234c4:	d049      	beq.n	802355a <UBLOX_DMA_IrqHandler+0xfb2>
 80234c6:	4b29      	ldr	r3, [pc, #164]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 80234c8:	681b      	ldr	r3, [r3, #0]
 80234ca:	4a2c      	ldr	r2, [pc, #176]	; (802357c <UBLOX_DMA_IrqHandler+0xfd4>)
 80234cc:	4293      	cmp	r3, r2
 80234ce:	d042      	beq.n	8023556 <UBLOX_DMA_IrqHandler+0xfae>
 80234d0:	4b26      	ldr	r3, [pc, #152]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 80234d2:	681b      	ldr	r3, [r3, #0]
 80234d4:	4a2a      	ldr	r2, [pc, #168]	; (8023580 <UBLOX_DMA_IrqHandler+0xfd8>)
 80234d6:	4293      	cmp	r3, r2
 80234d8:	d03a      	beq.n	8023550 <UBLOX_DMA_IrqHandler+0xfa8>
 80234da:	4b24      	ldr	r3, [pc, #144]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 80234dc:	681b      	ldr	r3, [r3, #0]
 80234de:	4a29      	ldr	r2, [pc, #164]	; (8023584 <UBLOX_DMA_IrqHandler+0xfdc>)
 80234e0:	4293      	cmp	r3, r2
 80234e2:	d032      	beq.n	802354a <UBLOX_DMA_IrqHandler+0xfa2>
 80234e4:	4b21      	ldr	r3, [pc, #132]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 80234e6:	681b      	ldr	r3, [r3, #0]
 80234e8:	4a27      	ldr	r2, [pc, #156]	; (8023588 <UBLOX_DMA_IrqHandler+0xfe0>)
 80234ea:	4293      	cmp	r3, r2
 80234ec:	d02a      	beq.n	8023544 <UBLOX_DMA_IrqHandler+0xf9c>
 80234ee:	4b1f      	ldr	r3, [pc, #124]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 80234f0:	681b      	ldr	r3, [r3, #0]
 80234f2:	4a26      	ldr	r2, [pc, #152]	; (802358c <UBLOX_DMA_IrqHandler+0xfe4>)
 80234f4:	4293      	cmp	r3, r2
 80234f6:	d022      	beq.n	802353e <UBLOX_DMA_IrqHandler+0xf96>
 80234f8:	4b1c      	ldr	r3, [pc, #112]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 80234fa:	681b      	ldr	r3, [r3, #0]
 80234fc:	4a24      	ldr	r2, [pc, #144]	; (8023590 <UBLOX_DMA_IrqHandler+0xfe8>)
 80234fe:	4293      	cmp	r3, r2
 8023500:	d01a      	beq.n	8023538 <UBLOX_DMA_IrqHandler+0xf90>
 8023502:	4b1a      	ldr	r3, [pc, #104]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 8023504:	681b      	ldr	r3, [r3, #0]
 8023506:	4a23      	ldr	r2, [pc, #140]	; (8023594 <UBLOX_DMA_IrqHandler+0xfec>)
 8023508:	4293      	cmp	r3, r2
 802350a:	d012      	beq.n	8023532 <UBLOX_DMA_IrqHandler+0xf8a>
 802350c:	4b17      	ldr	r3, [pc, #92]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 802350e:	681b      	ldr	r3, [r3, #0]
 8023510:	4a21      	ldr	r2, [pc, #132]	; (8023598 <UBLOX_DMA_IrqHandler+0xff0>)
 8023512:	4293      	cmp	r3, r2
 8023514:	d00a      	beq.n	802352c <UBLOX_DMA_IrqHandler+0xf84>
 8023516:	4b15      	ldr	r3, [pc, #84]	; (802356c <UBLOX_DMA_IrqHandler+0xfc4>)
 8023518:	681b      	ldr	r3, [r3, #0]
 802351a:	4a20      	ldr	r2, [pc, #128]	; (802359c <UBLOX_DMA_IrqHandler+0xff4>)
 802351c:	4293      	cmp	r3, r2
 802351e:	d102      	bne.n	8023526 <UBLOX_DMA_IrqHandler+0xf7e>
 8023520:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8023524:	e01e      	b.n	8023564 <UBLOX_DMA_IrqHandler+0xfbc>
 8023526:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 802352a:	e01b      	b.n	8023564 <UBLOX_DMA_IrqHandler+0xfbc>
 802352c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8023530:	e018      	b.n	8023564 <UBLOX_DMA_IrqHandler+0xfbc>
 8023532:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8023536:	e015      	b.n	8023564 <UBLOX_DMA_IrqHandler+0xfbc>
 8023538:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 802353c:	e012      	b.n	8023564 <UBLOX_DMA_IrqHandler+0xfbc>
 802353e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8023542:	e00f      	b.n	8023564 <UBLOX_DMA_IrqHandler+0xfbc>
 8023544:	f44f 7380 	mov.w	r3, #256	; 0x100
 8023548:	e00c      	b.n	8023564 <UBLOX_DMA_IrqHandler+0xfbc>
 802354a:	f44f 7380 	mov.w	r3, #256	; 0x100
 802354e:	e009      	b.n	8023564 <UBLOX_DMA_IrqHandler+0xfbc>
 8023550:	f44f 7380 	mov.w	r3, #256	; 0x100
 8023554:	e006      	b.n	8023564 <UBLOX_DMA_IrqHandler+0xfbc>
 8023556:	2304      	movs	r3, #4
 8023558:	e004      	b.n	8023564 <UBLOX_DMA_IrqHandler+0xfbc>
 802355a:	2304      	movs	r3, #4
 802355c:	e002      	b.n	8023564 <UBLOX_DMA_IrqHandler+0xfbc>
 802355e:	2304      	movs	r3, #4
 8023560:	e000      	b.n	8023564 <UBLOX_DMA_IrqHandler+0xfbc>
 8023562:	2304      	movs	r3, #4
 8023564:	4a10      	ldr	r2, [pc, #64]	; (80235a8 <UBLOX_DMA_IrqHandler+0x1000>)
 8023566:	6093      	str	r3, [r2, #8]
 8023568:	e0e9      	b.n	802373e <UBLOX_DMA_IrqHandler+0x1196>
 802356a:	bf00      	nop
 802356c:	2000847c 	.word	0x2000847c
 8023570:	40026010 	.word	0x40026010
 8023574:	40026410 	.word	0x40026410
 8023578:	40026070 	.word	0x40026070
 802357c:	40026470 	.word	0x40026470
 8023580:	40026028 	.word	0x40026028
 8023584:	40026428 	.word	0x40026428
 8023588:	40026088 	.word	0x40026088
 802358c:	40026488 	.word	0x40026488
 8023590:	40026040 	.word	0x40026040
 8023594:	40026440 	.word	0x40026440
 8023598:	400260a0 	.word	0x400260a0
 802359c:	400264a0 	.word	0x400264a0
 80235a0:	40026000 	.word	0x40026000
 80235a4:	40026458 	.word	0x40026458
 80235a8:	40026400 	.word	0x40026400
 80235ac:	400260b8 	.word	0x400260b8
 80235b0:	4b66      	ldr	r3, [pc, #408]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 80235b2:	681b      	ldr	r3, [r3, #0]
 80235b4:	461a      	mov	r2, r3
 80235b6:	4b66      	ldr	r3, [pc, #408]	; (8023750 <UBLOX_DMA_IrqHandler+0x11a8>)
 80235b8:	429a      	cmp	r2, r3
 80235ba:	d960      	bls.n	802367e <UBLOX_DMA_IrqHandler+0x10d6>
 80235bc:	4b63      	ldr	r3, [pc, #396]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 80235be:	681b      	ldr	r3, [r3, #0]
 80235c0:	4a64      	ldr	r2, [pc, #400]	; (8023754 <UBLOX_DMA_IrqHandler+0x11ac>)
 80235c2:	4293      	cmp	r3, r2
 80235c4:	d057      	beq.n	8023676 <UBLOX_DMA_IrqHandler+0x10ce>
 80235c6:	4b61      	ldr	r3, [pc, #388]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 80235c8:	681b      	ldr	r3, [r3, #0]
 80235ca:	4a63      	ldr	r2, [pc, #396]	; (8023758 <UBLOX_DMA_IrqHandler+0x11b0>)
 80235cc:	4293      	cmp	r3, r2
 80235ce:	d050      	beq.n	8023672 <UBLOX_DMA_IrqHandler+0x10ca>
 80235d0:	4b5e      	ldr	r3, [pc, #376]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 80235d2:	681b      	ldr	r3, [r3, #0]
 80235d4:	4a61      	ldr	r2, [pc, #388]	; (802375c <UBLOX_DMA_IrqHandler+0x11b4>)
 80235d6:	4293      	cmp	r3, r2
 80235d8:	d049      	beq.n	802366e <UBLOX_DMA_IrqHandler+0x10c6>
 80235da:	4b5c      	ldr	r3, [pc, #368]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 80235dc:	681b      	ldr	r3, [r3, #0]
 80235de:	4a60      	ldr	r2, [pc, #384]	; (8023760 <UBLOX_DMA_IrqHandler+0x11b8>)
 80235e0:	4293      	cmp	r3, r2
 80235e2:	d042      	beq.n	802366a <UBLOX_DMA_IrqHandler+0x10c2>
 80235e4:	4b59      	ldr	r3, [pc, #356]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 80235e6:	681b      	ldr	r3, [r3, #0]
 80235e8:	4a5e      	ldr	r2, [pc, #376]	; (8023764 <UBLOX_DMA_IrqHandler+0x11bc>)
 80235ea:	4293      	cmp	r3, r2
 80235ec:	d03a      	beq.n	8023664 <UBLOX_DMA_IrqHandler+0x10bc>
 80235ee:	4b57      	ldr	r3, [pc, #348]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 80235f0:	681b      	ldr	r3, [r3, #0]
 80235f2:	4a5d      	ldr	r2, [pc, #372]	; (8023768 <UBLOX_DMA_IrqHandler+0x11c0>)
 80235f4:	4293      	cmp	r3, r2
 80235f6:	d032      	beq.n	802365e <UBLOX_DMA_IrqHandler+0x10b6>
 80235f8:	4b54      	ldr	r3, [pc, #336]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 80235fa:	681b      	ldr	r3, [r3, #0]
 80235fc:	4a5b      	ldr	r2, [pc, #364]	; (802376c <UBLOX_DMA_IrqHandler+0x11c4>)
 80235fe:	4293      	cmp	r3, r2
 8023600:	d02a      	beq.n	8023658 <UBLOX_DMA_IrqHandler+0x10b0>
 8023602:	4b52      	ldr	r3, [pc, #328]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 8023604:	681b      	ldr	r3, [r3, #0]
 8023606:	4a5a      	ldr	r2, [pc, #360]	; (8023770 <UBLOX_DMA_IrqHandler+0x11c8>)
 8023608:	4293      	cmp	r3, r2
 802360a:	d022      	beq.n	8023652 <UBLOX_DMA_IrqHandler+0x10aa>
 802360c:	4b4f      	ldr	r3, [pc, #316]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 802360e:	681b      	ldr	r3, [r3, #0]
 8023610:	4a58      	ldr	r2, [pc, #352]	; (8023774 <UBLOX_DMA_IrqHandler+0x11cc>)
 8023612:	4293      	cmp	r3, r2
 8023614:	d01a      	beq.n	802364c <UBLOX_DMA_IrqHandler+0x10a4>
 8023616:	4b4d      	ldr	r3, [pc, #308]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 8023618:	681b      	ldr	r3, [r3, #0]
 802361a:	4a57      	ldr	r2, [pc, #348]	; (8023778 <UBLOX_DMA_IrqHandler+0x11d0>)
 802361c:	4293      	cmp	r3, r2
 802361e:	d012      	beq.n	8023646 <UBLOX_DMA_IrqHandler+0x109e>
 8023620:	4b4a      	ldr	r3, [pc, #296]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 8023622:	681b      	ldr	r3, [r3, #0]
 8023624:	4a55      	ldr	r2, [pc, #340]	; (802377c <UBLOX_DMA_IrqHandler+0x11d4>)
 8023626:	4293      	cmp	r3, r2
 8023628:	d00a      	beq.n	8023640 <UBLOX_DMA_IrqHandler+0x1098>
 802362a:	4b48      	ldr	r3, [pc, #288]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 802362c:	681b      	ldr	r3, [r3, #0]
 802362e:	4a54      	ldr	r2, [pc, #336]	; (8023780 <UBLOX_DMA_IrqHandler+0x11d8>)
 8023630:	4293      	cmp	r3, r2
 8023632:	d102      	bne.n	802363a <UBLOX_DMA_IrqHandler+0x1092>
 8023634:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8023638:	e01e      	b.n	8023678 <UBLOX_DMA_IrqHandler+0x10d0>
 802363a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 802363e:	e01b      	b.n	8023678 <UBLOX_DMA_IrqHandler+0x10d0>
 8023640:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8023644:	e018      	b.n	8023678 <UBLOX_DMA_IrqHandler+0x10d0>
 8023646:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 802364a:	e015      	b.n	8023678 <UBLOX_DMA_IrqHandler+0x10d0>
 802364c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8023650:	e012      	b.n	8023678 <UBLOX_DMA_IrqHandler+0x10d0>
 8023652:	f44f 7380 	mov.w	r3, #256	; 0x100
 8023656:	e00f      	b.n	8023678 <UBLOX_DMA_IrqHandler+0x10d0>
 8023658:	f44f 7380 	mov.w	r3, #256	; 0x100
 802365c:	e00c      	b.n	8023678 <UBLOX_DMA_IrqHandler+0x10d0>
 802365e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8023662:	e009      	b.n	8023678 <UBLOX_DMA_IrqHandler+0x10d0>
 8023664:	f44f 7380 	mov.w	r3, #256	; 0x100
 8023668:	e006      	b.n	8023678 <UBLOX_DMA_IrqHandler+0x10d0>
 802366a:	2304      	movs	r3, #4
 802366c:	e004      	b.n	8023678 <UBLOX_DMA_IrqHandler+0x10d0>
 802366e:	2304      	movs	r3, #4
 8023670:	e002      	b.n	8023678 <UBLOX_DMA_IrqHandler+0x10d0>
 8023672:	2304      	movs	r3, #4
 8023674:	e000      	b.n	8023678 <UBLOX_DMA_IrqHandler+0x10d0>
 8023676:	2304      	movs	r3, #4
 8023678:	4a42      	ldr	r2, [pc, #264]	; (8023784 <UBLOX_DMA_IrqHandler+0x11dc>)
 802367a:	60d3      	str	r3, [r2, #12]
 802367c:	e05f      	b.n	802373e <UBLOX_DMA_IrqHandler+0x1196>
 802367e:	4b33      	ldr	r3, [pc, #204]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 8023680:	681b      	ldr	r3, [r3, #0]
 8023682:	4a34      	ldr	r2, [pc, #208]	; (8023754 <UBLOX_DMA_IrqHandler+0x11ac>)
 8023684:	4293      	cmp	r3, r2
 8023686:	d057      	beq.n	8023738 <UBLOX_DMA_IrqHandler+0x1190>
 8023688:	4b30      	ldr	r3, [pc, #192]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 802368a:	681b      	ldr	r3, [r3, #0]
 802368c:	4a32      	ldr	r2, [pc, #200]	; (8023758 <UBLOX_DMA_IrqHandler+0x11b0>)
 802368e:	4293      	cmp	r3, r2
 8023690:	d050      	beq.n	8023734 <UBLOX_DMA_IrqHandler+0x118c>
 8023692:	4b2e      	ldr	r3, [pc, #184]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 8023694:	681b      	ldr	r3, [r3, #0]
 8023696:	4a31      	ldr	r2, [pc, #196]	; (802375c <UBLOX_DMA_IrqHandler+0x11b4>)
 8023698:	4293      	cmp	r3, r2
 802369a:	d049      	beq.n	8023730 <UBLOX_DMA_IrqHandler+0x1188>
 802369c:	4b2b      	ldr	r3, [pc, #172]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 802369e:	681b      	ldr	r3, [r3, #0]
 80236a0:	4a2f      	ldr	r2, [pc, #188]	; (8023760 <UBLOX_DMA_IrqHandler+0x11b8>)
 80236a2:	4293      	cmp	r3, r2
 80236a4:	d042      	beq.n	802372c <UBLOX_DMA_IrqHandler+0x1184>
 80236a6:	4b29      	ldr	r3, [pc, #164]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 80236a8:	681b      	ldr	r3, [r3, #0]
 80236aa:	4a2e      	ldr	r2, [pc, #184]	; (8023764 <UBLOX_DMA_IrqHandler+0x11bc>)
 80236ac:	4293      	cmp	r3, r2
 80236ae:	d03a      	beq.n	8023726 <UBLOX_DMA_IrqHandler+0x117e>
 80236b0:	4b26      	ldr	r3, [pc, #152]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 80236b2:	681b      	ldr	r3, [r3, #0]
 80236b4:	4a2c      	ldr	r2, [pc, #176]	; (8023768 <UBLOX_DMA_IrqHandler+0x11c0>)
 80236b6:	4293      	cmp	r3, r2
 80236b8:	d032      	beq.n	8023720 <UBLOX_DMA_IrqHandler+0x1178>
 80236ba:	4b24      	ldr	r3, [pc, #144]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 80236bc:	681b      	ldr	r3, [r3, #0]
 80236be:	4a2b      	ldr	r2, [pc, #172]	; (802376c <UBLOX_DMA_IrqHandler+0x11c4>)
 80236c0:	4293      	cmp	r3, r2
 80236c2:	d02a      	beq.n	802371a <UBLOX_DMA_IrqHandler+0x1172>
 80236c4:	4b21      	ldr	r3, [pc, #132]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 80236c6:	681b      	ldr	r3, [r3, #0]
 80236c8:	4a29      	ldr	r2, [pc, #164]	; (8023770 <UBLOX_DMA_IrqHandler+0x11c8>)
 80236ca:	4293      	cmp	r3, r2
 80236cc:	d022      	beq.n	8023714 <UBLOX_DMA_IrqHandler+0x116c>
 80236ce:	4b1f      	ldr	r3, [pc, #124]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 80236d0:	681b      	ldr	r3, [r3, #0]
 80236d2:	4a28      	ldr	r2, [pc, #160]	; (8023774 <UBLOX_DMA_IrqHandler+0x11cc>)
 80236d4:	4293      	cmp	r3, r2
 80236d6:	d01a      	beq.n	802370e <UBLOX_DMA_IrqHandler+0x1166>
 80236d8:	4b1c      	ldr	r3, [pc, #112]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 80236da:	681b      	ldr	r3, [r3, #0]
 80236dc:	4a26      	ldr	r2, [pc, #152]	; (8023778 <UBLOX_DMA_IrqHandler+0x11d0>)
 80236de:	4293      	cmp	r3, r2
 80236e0:	d012      	beq.n	8023708 <UBLOX_DMA_IrqHandler+0x1160>
 80236e2:	4b1a      	ldr	r3, [pc, #104]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 80236e4:	681b      	ldr	r3, [r3, #0]
 80236e6:	4a25      	ldr	r2, [pc, #148]	; (802377c <UBLOX_DMA_IrqHandler+0x11d4>)
 80236e8:	4293      	cmp	r3, r2
 80236ea:	d00a      	beq.n	8023702 <UBLOX_DMA_IrqHandler+0x115a>
 80236ec:	4b17      	ldr	r3, [pc, #92]	; (802374c <UBLOX_DMA_IrqHandler+0x11a4>)
 80236ee:	681b      	ldr	r3, [r3, #0]
 80236f0:	4a23      	ldr	r2, [pc, #140]	; (8023780 <UBLOX_DMA_IrqHandler+0x11d8>)
 80236f2:	4293      	cmp	r3, r2
 80236f4:	d102      	bne.n	80236fc <UBLOX_DMA_IrqHandler+0x1154>
 80236f6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80236fa:	e01e      	b.n	802373a <UBLOX_DMA_IrqHandler+0x1192>
 80236fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8023700:	e01b      	b.n	802373a <UBLOX_DMA_IrqHandler+0x1192>
 8023702:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8023706:	e018      	b.n	802373a <UBLOX_DMA_IrqHandler+0x1192>
 8023708:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 802370c:	e015      	b.n	802373a <UBLOX_DMA_IrqHandler+0x1192>
 802370e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8023712:	e012      	b.n	802373a <UBLOX_DMA_IrqHandler+0x1192>
 8023714:	f44f 7380 	mov.w	r3, #256	; 0x100
 8023718:	e00f      	b.n	802373a <UBLOX_DMA_IrqHandler+0x1192>
 802371a:	f44f 7380 	mov.w	r3, #256	; 0x100
 802371e:	e00c      	b.n	802373a <UBLOX_DMA_IrqHandler+0x1192>
 8023720:	f44f 7380 	mov.w	r3, #256	; 0x100
 8023724:	e009      	b.n	802373a <UBLOX_DMA_IrqHandler+0x1192>
 8023726:	f44f 7380 	mov.w	r3, #256	; 0x100
 802372a:	e006      	b.n	802373a <UBLOX_DMA_IrqHandler+0x1192>
 802372c:	2304      	movs	r3, #4
 802372e:	e004      	b.n	802373a <UBLOX_DMA_IrqHandler+0x1192>
 8023730:	2304      	movs	r3, #4
 8023732:	e002      	b.n	802373a <UBLOX_DMA_IrqHandler+0x1192>
 8023734:	2304      	movs	r3, #4
 8023736:	e000      	b.n	802373a <UBLOX_DMA_IrqHandler+0x1192>
 8023738:	2304      	movs	r3, #4
 802373a:	4a12      	ldr	r2, [pc, #72]	; (8023784 <UBLOX_DMA_IrqHandler+0x11dc>)
 802373c:	6093      	str	r3, [r2, #8]
        HAL_UART_Receive_DMA(&huart2, (uint8_t*) UBLOX_DMA_RX, UBLOX_DMA_RX_SZ);
 802373e:	2280      	movs	r2, #128	; 0x80
 8023740:	4911      	ldr	r1, [pc, #68]	; (8023788 <UBLOX_DMA_IrqHandler+0x11e0>)
 8023742:	4812      	ldr	r0, [pc, #72]	; (802378c <UBLOX_DMA_IrqHandler+0x11e4>)
 8023744:	f012 fed2 	bl	80364ec <HAL_UART_Receive_DMA>
}
 8023748:	bf00      	nop
 802374a:	bd80      	pop	{r7, pc}
 802374c:	2000847c 	.word	0x2000847c
 8023750:	40026058 	.word	0x40026058
 8023754:	40026010 	.word	0x40026010
 8023758:	40026410 	.word	0x40026410
 802375c:	40026070 	.word	0x40026070
 8023760:	40026470 	.word	0x40026470
 8023764:	40026028 	.word	0x40026028
 8023768:	40026428 	.word	0x40026428
 802376c:	40026088 	.word	0x40026088
 8023770:	40026488 	.word	0x40026488
 8023774:	40026040 	.word	0x40026040
 8023778:	40026440 	.word	0x40026440
 802377c:	400260a0 	.word	0x400260a0
 8023780:	400264a0 	.word	0x400264a0
 8023784:	40026000 	.word	0x40026000
 8023788:	20000d80 	.word	0x20000d80
 802378c:	200088f0 	.word	0x200088f0

08023790 <UBLOX_DMA_Init>:

void UBLOX_DMA_Init(void) {
 8023790:	b580      	push	{r7, lr}
 8023792:	af00      	add	r7, sp, #0
    __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);        // enable idle line interrupt
 8023794:	4b0f      	ldr	r3, [pc, #60]	; (80237d4 <UBLOX_DMA_Init+0x44>)
 8023796:	681b      	ldr	r3, [r3, #0]
 8023798:	68da      	ldr	r2, [r3, #12]
 802379a:	4b0e      	ldr	r3, [pc, #56]	; (80237d4 <UBLOX_DMA_Init+0x44>)
 802379c:	681b      	ldr	r3, [r3, #0]
 802379e:	f042 0210 	orr.w	r2, r2, #16
 80237a2:	60da      	str	r2, [r3, #12]
    __HAL_DMA_ENABLE_IT(&hdma_usart2_rx, DMA_IT_TC);    // enable DMA Tx cplt interrupt
 80237a4:	4b0c      	ldr	r3, [pc, #48]	; (80237d8 <UBLOX_DMA_Init+0x48>)
 80237a6:	681b      	ldr	r3, [r3, #0]
 80237a8:	681a      	ldr	r2, [r3, #0]
 80237aa:	4b0b      	ldr	r3, [pc, #44]	; (80237d8 <UBLOX_DMA_Init+0x48>)
 80237ac:	681b      	ldr	r3, [r3, #0]
 80237ae:	f042 0210 	orr.w	r2, r2, #16
 80237b2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE_IT(&hdma_usart2_rx, DMA_IT_HT);    // enable half complete interrupt
 80237b4:	4b08      	ldr	r3, [pc, #32]	; (80237d8 <UBLOX_DMA_Init+0x48>)
 80237b6:	681b      	ldr	r3, [r3, #0]
 80237b8:	681a      	ldr	r2, [r3, #0]
 80237ba:	4b07      	ldr	r3, [pc, #28]	; (80237d8 <UBLOX_DMA_Init+0x48>)
 80237bc:	681b      	ldr	r3, [r3, #0]
 80237be:	f042 0208 	orr.w	r2, r2, #8
 80237c2:	601a      	str	r2, [r3, #0]

    /* Start DMA transfer */
    HAL_UART_Receive_DMA(&huart2, (uint8_t*) UBLOX_DMA_RX, UBLOX_DMA_RX_SZ);
 80237c4:	2280      	movs	r2, #128	; 0x80
 80237c6:	4905      	ldr	r1, [pc, #20]	; (80237dc <UBLOX_DMA_Init+0x4c>)
 80237c8:	4802      	ldr	r0, [pc, #8]	; (80237d4 <UBLOX_DMA_Init+0x44>)
 80237ca:	f012 fe8f 	bl	80364ec <HAL_UART_Receive_DMA>
}
 80237ce:	bf00      	nop
 80237d0:	bd80      	pop	{r7, pc}
 80237d2:	bf00      	nop
 80237d4:	200088f0 	.word	0x200088f0
 80237d8:	2000847c 	.word	0x2000847c
 80237dc:	20000d80 	.word	0x20000d80

080237e0 <UBLOX_Check_Buffer>:

static void UBLOX_Check_Buffer(uint8_t idle) {
 80237e0:	b580      	push	{r7, lr}
 80237e2:	b084      	sub	sp, #16
 80237e4:	af00      	add	r7, sp, #0
 80237e6:	4603      	mov	r3, r0
 80237e8:	71fb      	strb	r3, [r7, #7]
    static uint8_t clear = 1;
    static size_t old_pos;
    size_t pos;

    // Auto clear
    if (clear) {
 80237ea:	4b24      	ldr	r3, [pc, #144]	; (802387c <UBLOX_Check_Buffer+0x9c>)
 80237ec:	781b      	ldrb	r3, [r3, #0]
 80237ee:	2b00      	cmp	r3, #0
 80237f0:	d004      	beq.n	80237fc <UBLOX_Check_Buffer+0x1c>
        clear = 0;
 80237f2:	4b22      	ldr	r3, [pc, #136]	; (802387c <UBLOX_Check_Buffer+0x9c>)
 80237f4:	2200      	movs	r2, #0
 80237f6:	701a      	strb	r2, [r3, #0]
        UBLOX_Reset_Buffer();
 80237f8:	f000 f864 	bl	80238c4 <UBLOX_Reset_Buffer>
    }
    clear = idle;
 80237fc:	4a1f      	ldr	r2, [pc, #124]	; (802387c <UBLOX_Check_Buffer+0x9c>)
 80237fe:	79fb      	ldrb	r3, [r7, #7]
 8023800:	7013      	strb	r3, [r2, #0]

    /* Calculate current position in buffer */
    pos = UBLOX_DMA_RX_SZ - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 8023802:	4b1f      	ldr	r3, [pc, #124]	; (8023880 <UBLOX_Check_Buffer+0xa0>)
 8023804:	681b      	ldr	r3, [r3, #0]
 8023806:	685b      	ldr	r3, [r3, #4]
 8023808:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 802380c:	60fb      	str	r3, [r7, #12]
    if (pos != old_pos) { /* Check change in received data */
 802380e:	4b1d      	ldr	r3, [pc, #116]	; (8023884 <UBLOX_Check_Buffer+0xa4>)
 8023810:	681b      	ldr	r3, [r3, #0]
 8023812:	68fa      	ldr	r2, [r7, #12]
 8023814:	429a      	cmp	r2, r3
 8023816:	d023      	beq.n	8023860 <UBLOX_Check_Buffer+0x80>
        if (pos > old_pos) { /* Current position is over previous one */
 8023818:	4b1a      	ldr	r3, [pc, #104]	; (8023884 <UBLOX_Check_Buffer+0xa4>)
 802381a:	681b      	ldr	r3, [r3, #0]
 802381c:	68fa      	ldr	r2, [r7, #12]
 802381e:	429a      	cmp	r2, r3
 8023820:	d90b      	bls.n	802383a <UBLOX_Check_Buffer+0x5a>
            /* We are in "linear" mode */
            /* Process data directly by subtracting "pointers" */
            UBLOX_Fill_Buffer(&UBLOX_DMA_RX[old_pos], pos - old_pos);
 8023822:	4b18      	ldr	r3, [pc, #96]	; (8023884 <UBLOX_Check_Buffer+0xa4>)
 8023824:	681b      	ldr	r3, [r3, #0]
 8023826:	4a18      	ldr	r2, [pc, #96]	; (8023888 <UBLOX_Check_Buffer+0xa8>)
 8023828:	1898      	adds	r0, r3, r2
 802382a:	4b16      	ldr	r3, [pc, #88]	; (8023884 <UBLOX_Check_Buffer+0xa4>)
 802382c:	681b      	ldr	r3, [r3, #0]
 802382e:	68fa      	ldr	r2, [r7, #12]
 8023830:	1ad3      	subs	r3, r2, r3
 8023832:	4619      	mov	r1, r3
 8023834:	f000 f82a 	bl	802388c <UBLOX_Fill_Buffer>
 8023838:	e012      	b.n	8023860 <UBLOX_Check_Buffer+0x80>
        } else {
            /* We are in "overflow" mode */
            /* First process data to the end of buffer */
            UBLOX_Fill_Buffer(&UBLOX_DMA_RX[old_pos], UBLOX_DMA_RX_SZ - old_pos);
 802383a:	4b12      	ldr	r3, [pc, #72]	; (8023884 <UBLOX_Check_Buffer+0xa4>)
 802383c:	681b      	ldr	r3, [r3, #0]
 802383e:	4a12      	ldr	r2, [pc, #72]	; (8023888 <UBLOX_Check_Buffer+0xa8>)
 8023840:	441a      	add	r2, r3
 8023842:	4b10      	ldr	r3, [pc, #64]	; (8023884 <UBLOX_Check_Buffer+0xa4>)
 8023844:	681b      	ldr	r3, [r3, #0]
 8023846:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 802384a:	4619      	mov	r1, r3
 802384c:	4610      	mov	r0, r2
 802384e:	f000 f81d 	bl	802388c <UBLOX_Fill_Buffer>
            /* Check and continue with beginning of buffer */
            if (pos > 0) {
 8023852:	68fb      	ldr	r3, [r7, #12]
 8023854:	2b00      	cmp	r3, #0
 8023856:	d003      	beq.n	8023860 <UBLOX_Check_Buffer+0x80>
                UBLOX_Fill_Buffer(&UBLOX_DMA_RX[0], pos);
 8023858:	68f9      	ldr	r1, [r7, #12]
 802385a:	480b      	ldr	r0, [pc, #44]	; (8023888 <UBLOX_Check_Buffer+0xa8>)
 802385c:	f000 f816 	bl	802388c <UBLOX_Fill_Buffer>
            }
        }
    }
    old_pos = pos; /* Save current position as old */
 8023860:	4a08      	ldr	r2, [pc, #32]	; (8023884 <UBLOX_Check_Buffer+0xa4>)
 8023862:	68fb      	ldr	r3, [r7, #12]
 8023864:	6013      	str	r3, [r2, #0]

    /* Check and manually update if we reached end of buffer */
    if (old_pos == UBLOX_DMA_RX_SZ) {
 8023866:	4b07      	ldr	r3, [pc, #28]	; (8023884 <UBLOX_Check_Buffer+0xa4>)
 8023868:	681b      	ldr	r3, [r3, #0]
 802386a:	2b80      	cmp	r3, #128	; 0x80
 802386c:	d102      	bne.n	8023874 <UBLOX_Check_Buffer+0x94>
        old_pos = 0;
 802386e:	4b05      	ldr	r3, [pc, #20]	; (8023884 <UBLOX_Check_Buffer+0xa4>)
 8023870:	2200      	movs	r2, #0
 8023872:	601a      	str	r2, [r3, #0]
    }
}
 8023874:	bf00      	nop
 8023876:	3710      	adds	r7, #16
 8023878:	46bd      	mov	sp, r7
 802387a:	bd80      	pop	{r7, pc}
 802387c:	20000000 	.word	0x20000000
 8023880:	2000847c 	.word	0x2000847c
 8023884:	20000e04 	.word	0x20000e04
 8023888:	20000d80 	.word	0x20000d80

0802388c <UBLOX_Fill_Buffer>:

static void UBLOX_Fill_Buffer(const void *data, size_t len) {
 802388c:	b580      	push	{r7, lr}
 802388e:	b082      	sub	sp, #8
 8023890:	af00      	add	r7, sp, #0
 8023892:	6078      	str	r0, [r7, #4]
 8023894:	6039      	str	r1, [r7, #0]
    /* Write data to buffer */
    memcpy(&UBLOX_UART_RX[ublox_write], data, len);
 8023896:	4b09      	ldr	r3, [pc, #36]	; (80238bc <UBLOX_Fill_Buffer+0x30>)
 8023898:	681b      	ldr	r3, [r3, #0]
 802389a:	4a09      	ldr	r2, [pc, #36]	; (80238c0 <UBLOX_Fill_Buffer+0x34>)
 802389c:	4413      	add	r3, r2
 802389e:	683a      	ldr	r2, [r7, #0]
 80238a0:	6879      	ldr	r1, [r7, #4]
 80238a2:	4618      	mov	r0, r3
 80238a4:	f01c f8ab 	bl	803f9fe <memcpy>
    ublox_write += len;
 80238a8:	4b04      	ldr	r3, [pc, #16]	; (80238bc <UBLOX_Fill_Buffer+0x30>)
 80238aa:	681a      	ldr	r2, [r3, #0]
 80238ac:	683b      	ldr	r3, [r7, #0]
 80238ae:	4413      	add	r3, r2
 80238b0:	4a02      	ldr	r2, [pc, #8]	; (80238bc <UBLOX_Fill_Buffer+0x30>)
 80238b2:	6013      	str	r3, [r2, #0]
}
 80238b4:	bf00      	nop
 80238b6:	3708      	adds	r7, #8
 80238b8:	46bd      	mov	sp, r7
 80238ba:	bd80      	pop	{r7, pc}
 80238bc:	20000e00 	.word	0x20000e00
 80238c0:	20008168 	.word	0x20008168

080238c4 <UBLOX_Reset_Buffer>:

static void UBLOX_Reset_Buffer(void) {
 80238c4:	b580      	push	{r7, lr}
 80238c6:	af00      	add	r7, sp, #0
    // clear rx buffer
    memset(UBLOX_UART_RX, 0x00, ublox_write);
 80238c8:	4b05      	ldr	r3, [pc, #20]	; (80238e0 <UBLOX_Reset_Buffer+0x1c>)
 80238ca:	681b      	ldr	r3, [r3, #0]
 80238cc:	461a      	mov	r2, r3
 80238ce:	2100      	movs	r1, #0
 80238d0:	4804      	ldr	r0, [pc, #16]	; (80238e4 <UBLOX_Reset_Buffer+0x20>)
 80238d2:	f01c f89f 	bl	803fa14 <memset>
    ublox_write = 0;
 80238d6:	4b02      	ldr	r3, [pc, #8]	; (80238e0 <UBLOX_Reset_Buffer+0x1c>)
 80238d8:	2200      	movs	r2, #0
 80238da:	601a      	str	r2, [r3, #0]
}
 80238dc:	bf00      	nop
 80238de:	bd80      	pop	{r7, pc}
 80238e0:	20000e00 	.word	0x20000e00
 80238e4:	20008168 	.word	0x20008168

080238e8 <AES_Init>:
/* Private functions declaration ---------------------------------------------*/
static void lock(void);
static void unlock(void);

/* Public functions implementation -------------------------------------------*/
void AES_Init(void) {
 80238e8:	b580      	push	{r7, lr}
 80238ea:	af00      	add	r7, sp, #0
    lock();
 80238ec:	f000 f85a 	bl	80239a4 <lock>
    HAL_CRYP_GetConfig(&hcryp, &config);
 80238f0:	4907      	ldr	r1, [pc, #28]	; (8023910 <AES_Init+0x28>)
 80238f2:	4808      	ldr	r0, [pc, #32]	; (8023914 <AES_Init+0x2c>)
 80238f4:	f00a f947 	bl	802db86 <HAL_CRYP_GetConfig>
    config.pKey = AesKey;
 80238f8:	4b05      	ldr	r3, [pc, #20]	; (8023910 <AES_Init+0x28>)
 80238fa:	4a07      	ldr	r2, [pc, #28]	; (8023918 <AES_Init+0x30>)
 80238fc:	609a      	str	r2, [r3, #8]
    HAL_CRYP_SetConfig(&hcryp, &config);
 80238fe:	4904      	ldr	r1, [pc, #16]	; (8023910 <AES_Init+0x28>)
 8023900:	4804      	ldr	r0, [pc, #16]	; (8023914 <AES_Init+0x2c>)
 8023902:	f00a f8be 	bl	802da82 <HAL_CRYP_SetConfig>
    unlock();
 8023906:	f000 f85b 	bl	80239c0 <unlock>
}
 802390a:	bf00      	nop
 802390c:	bd80      	pop	{r7, pc}
 802390e:	bf00      	nop
 8023910:	20000e08 	.word	0x20000e08
 8023914:	20008964 	.word	0x20008964
 8023918:	20008368 	.word	0x20008368

0802391c <AES_Encrypt>:

uint8_t AES_Encrypt(uint8_t *pDst, uint8_t *pSrc, uint16_t Sz) {
 802391c:	b580      	push	{r7, lr}
 802391e:	b088      	sub	sp, #32
 8023920:	af02      	add	r7, sp, #8
 8023922:	60f8      	str	r0, [r7, #12]
 8023924:	60b9      	str	r1, [r7, #8]
 8023926:	4613      	mov	r3, r2
 8023928:	80fb      	strh	r3, [r7, #6]
    uint8_t ret;

    lock();
 802392a:	f000 f83b 	bl	80239a4 <lock>
    ret = (HAL_CRYP_Encrypt(&hcryp, (uint32_t*) pSrc, Sz, (uint32_t*) pDst, 1000) == HAL_OK);
 802392e:	88fa      	ldrh	r2, [r7, #6]
 8023930:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8023934:	9300      	str	r3, [sp, #0]
 8023936:	68fb      	ldr	r3, [r7, #12]
 8023938:	68b9      	ldr	r1, [r7, #8]
 802393a:	4808      	ldr	r0, [pc, #32]	; (802395c <AES_Encrypt+0x40>)
 802393c:	f00a f984 	bl	802dc48 <HAL_CRYP_Encrypt>
 8023940:	4603      	mov	r3, r0
 8023942:	2b00      	cmp	r3, #0
 8023944:	bf0c      	ite	eq
 8023946:	2301      	moveq	r3, #1
 8023948:	2300      	movne	r3, #0
 802394a:	b2db      	uxtb	r3, r3
 802394c:	75fb      	strb	r3, [r7, #23]
    unlock();
 802394e:	f000 f837 	bl	80239c0 <unlock>

    return ret;
 8023952:	7dfb      	ldrb	r3, [r7, #23]
}
 8023954:	4618      	mov	r0, r3
 8023956:	3718      	adds	r7, #24
 8023958:	46bd      	mov	sp, r7
 802395a:	bd80      	pop	{r7, pc}
 802395c:	20008964 	.word	0x20008964

08023960 <AES_Decrypt>:

uint8_t AES_Decrypt(uint8_t *pDst, uint8_t *pSrc, uint16_t Sz) {
 8023960:	b580      	push	{r7, lr}
 8023962:	b088      	sub	sp, #32
 8023964:	af02      	add	r7, sp, #8
 8023966:	60f8      	str	r0, [r7, #12]
 8023968:	60b9      	str	r1, [r7, #8]
 802396a:	4613      	mov	r3, r2
 802396c:	80fb      	strh	r3, [r7, #6]
    uint8_t ret;

    lock();
 802396e:	f000 f819 	bl	80239a4 <lock>
    ret = (HAL_CRYP_Decrypt(&hcryp, (uint32_t*) pSrc, Sz, (uint32_t*) pDst, 1000) == HAL_OK);
 8023972:	88fa      	ldrh	r2, [r7, #6]
 8023974:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8023978:	9300      	str	r3, [sp, #0]
 802397a:	68fb      	ldr	r3, [r7, #12]
 802397c:	68b9      	ldr	r1, [r7, #8]
 802397e:	4808      	ldr	r0, [pc, #32]	; (80239a0 <AES_Decrypt+0x40>)
 8023980:	f00a f9f6 	bl	802dd70 <HAL_CRYP_Decrypt>
 8023984:	4603      	mov	r3, r0
 8023986:	2b00      	cmp	r3, #0
 8023988:	bf0c      	ite	eq
 802398a:	2301      	moveq	r3, #1
 802398c:	2300      	movne	r3, #0
 802398e:	b2db      	uxtb	r3, r3
 8023990:	75fb      	strb	r3, [r7, #23]
    unlock();
 8023992:	f000 f815 	bl	80239c0 <unlock>

    return ret;
 8023996:	7dfb      	ldrb	r3, [r7, #23]
}
 8023998:	4618      	mov	r0, r3
 802399a:	3718      	adds	r7, #24
 802399c:	46bd      	mov	sp, r7
 802399e:	bd80      	pop	{r7, pc}
 80239a0:	20008964 	.word	0x20008964

080239a4 <lock>:
        LOG_StrLn("AES:ItWorks!");
    }
}

/* Private functions implementation --------------------------------------------*/
static void lock(void) {
 80239a4:	b580      	push	{r7, lr}
 80239a6:	af00      	add	r7, sp, #0
    osMutexAcquire(AesMutexHandle, osWaitForever);
 80239a8:	4b04      	ldr	r3, [pc, #16]	; (80239bc <lock+0x18>)
 80239aa:	681b      	ldr	r3, [r3, #0]
 80239ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80239b0:	4618      	mov	r0, r3
 80239b2:	f014 f9b9 	bl	8037d28 <osMutexAcquire>
}
 80239b6:	bf00      	nop
 80239b8:	bd80      	pop	{r7, pc}
 80239ba:	bf00      	nop
 80239bc:	20008848 	.word	0x20008848

080239c0 <unlock>:

static void unlock(void) {
 80239c0:	b580      	push	{r7, lr}
 80239c2:	af00      	add	r7, sp, #0
    osMutexRelease(AesMutexHandle);
 80239c4:	4b03      	ldr	r3, [pc, #12]	; (80239d4 <unlock+0x14>)
 80239c6:	681b      	ldr	r3, [r3, #0]
 80239c8:	4618      	mov	r0, r3
 80239ca:	f014 fa0b 	bl	8037de4 <osMutexRelease>
}
 80239ce:	bf00      	nop
 80239d0:	bd80      	pop	{r7, pc}
 80239d2:	bf00      	nop
 80239d4:	20008848 	.word	0x20008848

080239d8 <cs43l22_Init>:
 * @param OutputDevice: can be OUTPUT_DEVICE_SPEAKER, OUTPUT_DEVICE_HEADPHONE,
 *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
 * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq) {
 80239d8:	b580      	push	{r7, lr}
 80239da:	b086      	sub	sp, #24
 80239dc:	af00      	add	r7, sp, #0
 80239de:	607b      	str	r3, [r7, #4]
 80239e0:	4603      	mov	r3, r0
 80239e2:	81fb      	strh	r3, [r7, #14]
 80239e4:	460b      	mov	r3, r1
 80239e6:	81bb      	strh	r3, [r7, #12]
 80239e8:	4613      	mov	r3, r2
 80239ea:	72fb      	strb	r3, [r7, #11]
    uint32_t counter = 0;
 80239ec:	2300      	movs	r3, #0
 80239ee:	617b      	str	r3, [r7, #20]
    theOutputDevice = OutputDevice;
 80239f0:	4a6b      	ldr	r2, [pc, #428]	; (8023ba0 <cs43l22_Init+0x1c8>)
 80239f2:	89bb      	ldrh	r3, [r7, #12]
 80239f4:	8013      	strh	r3, [r2, #0]

    /* Initialize the Control interface of the Audio Codec */
    AUDIO_IO_Init();
 80239f6:	f000 fa53 	bl	8023ea0 <AUDIO_IO_Init>

    /* Keep Codec powered OFF */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 80239fa:	89fb      	ldrh	r3, [r7, #14]
 80239fc:	b2db      	uxtb	r3, r3
 80239fe:	2201      	movs	r2, #1
 8023a00:	2102      	movs	r1, #2
 8023a02:	4618      	mov	r0, r3
 8023a04:	f000 faba 	bl	8023f7c <CODEC_IO_Write>
 8023a08:	4603      	mov	r3, r0
 8023a0a:	461a      	mov	r2, r3
 8023a0c:	697b      	ldr	r3, [r7, #20]
 8023a0e:	4413      	add	r3, r2
 8023a10:	617b      	str	r3, [r7, #20]

    /*Save Output device for mute ON/OFF procedure*/
    switch (OutputDevice) {
 8023a12:	89bb      	ldrh	r3, [r7, #12]
 8023a14:	3b01      	subs	r3, #1
 8023a16:	2b03      	cmp	r3, #3
 8023a18:	d81a      	bhi.n	8023a50 <cs43l22_Init+0x78>
 8023a1a:	a201      	add	r2, pc, #4	; (adr r2, 8023a20 <cs43l22_Init+0x48>)
 8023a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023a20:	08023a31 	.word	0x08023a31
 8023a24:	08023a39 	.word	0x08023a39
 8023a28:	08023a41 	.word	0x08023a41
 8023a2c:	08023a49 	.word	0x08023a49
        case OUTPUT_DEVICE_SPEAKER:
            OutputDev = 0xFA;
 8023a30:	4b5c      	ldr	r3, [pc, #368]	; (8023ba4 <cs43l22_Init+0x1cc>)
 8023a32:	22fa      	movs	r2, #250	; 0xfa
 8023a34:	701a      	strb	r2, [r3, #0]
            break;
 8023a36:	e00f      	b.n	8023a58 <cs43l22_Init+0x80>

        case OUTPUT_DEVICE_HEADPHONE:
            OutputDev = 0xAF;
 8023a38:	4b5a      	ldr	r3, [pc, #360]	; (8023ba4 <cs43l22_Init+0x1cc>)
 8023a3a:	22af      	movs	r2, #175	; 0xaf
 8023a3c:	701a      	strb	r2, [r3, #0]
            break;
 8023a3e:	e00b      	b.n	8023a58 <cs43l22_Init+0x80>

        case OUTPUT_DEVICE_BOTH:
            OutputDev = 0xAA;
 8023a40:	4b58      	ldr	r3, [pc, #352]	; (8023ba4 <cs43l22_Init+0x1cc>)
 8023a42:	22aa      	movs	r2, #170	; 0xaa
 8023a44:	701a      	strb	r2, [r3, #0]
            break;
 8023a46:	e007      	b.n	8023a58 <cs43l22_Init+0x80>

        case OUTPUT_DEVICE_AUTO:
            OutputDev = 0x05;
 8023a48:	4b56      	ldr	r3, [pc, #344]	; (8023ba4 <cs43l22_Init+0x1cc>)
 8023a4a:	2205      	movs	r2, #5
 8023a4c:	701a      	strb	r2, [r3, #0]
            break;
 8023a4e:	e003      	b.n	8023a58 <cs43l22_Init+0x80>

        default:
            OutputDev = 0x05;
 8023a50:	4b54      	ldr	r3, [pc, #336]	; (8023ba4 <cs43l22_Init+0x1cc>)
 8023a52:	2205      	movs	r2, #5
 8023a54:	701a      	strb	r2, [r3, #0]
            break;
 8023a56:	bf00      	nop
    }

    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8023a58:	89fb      	ldrh	r3, [r7, #14]
 8023a5a:	b2d8      	uxtb	r0, r3
 8023a5c:	4b51      	ldr	r3, [pc, #324]	; (8023ba4 <cs43l22_Init+0x1cc>)
 8023a5e:	781b      	ldrb	r3, [r3, #0]
 8023a60:	b2db      	uxtb	r3, r3
 8023a62:	461a      	mov	r2, r3
 8023a64:	2104      	movs	r1, #4
 8023a66:	f000 fa89 	bl	8023f7c <CODEC_IO_Write>
 8023a6a:	4603      	mov	r3, r0
 8023a6c:	461a      	mov	r2, r3
 8023a6e:	697b      	ldr	r3, [r7, #20]
 8023a70:	4413      	add	r3, r2
 8023a72:	617b      	str	r3, [r7, #20]

    /* Clock configuration: Auto detection */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x80);
 8023a74:	89fb      	ldrh	r3, [r7, #14]
 8023a76:	b2db      	uxtb	r3, r3
 8023a78:	2280      	movs	r2, #128	; 0x80
 8023a7a:	2105      	movs	r1, #5
 8023a7c:	4618      	mov	r0, r3
 8023a7e:	f000 fa7d 	bl	8023f7c <CODEC_IO_Write>
 8023a82:	4603      	mov	r3, r0
 8023a84:	461a      	mov	r2, r3
 8023a86:	697b      	ldr	r3, [r7, #20]
 8023a88:	4413      	add	r3, r2
 8023a8a:	617b      	str	r3, [r7, #20]

    /* Set the Slave Mode and the audio Standard */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8023a8c:	89fb      	ldrh	r3, [r7, #14]
 8023a8e:	b2db      	uxtb	r3, r3
 8023a90:	2204      	movs	r2, #4
 8023a92:	2106      	movs	r1, #6
 8023a94:	4618      	mov	r0, r3
 8023a96:	f000 fa71 	bl	8023f7c <CODEC_IO_Write>
 8023a9a:	4603      	mov	r3, r0
 8023a9c:	461a      	mov	r2, r3
 8023a9e:	697b      	ldr	r3, [r7, #20]
 8023aa0:	4413      	add	r3, r2
 8023aa2:	617b      	str	r3, [r7, #20]

    /* Set the Master volume to maximum */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, 0);
 8023aa4:	89fb      	ldrh	r3, [r7, #14]
 8023aa6:	b2db      	uxtb	r3, r3
 8023aa8:	2200      	movs	r2, #0
 8023aaa:	2120      	movs	r1, #32
 8023aac:	4618      	mov	r0, r3
 8023aae:	f000 fa65 	bl	8023f7c <CODEC_IO_Write>
 8023ab2:	4603      	mov	r3, r0
 8023ab4:	461a      	mov	r2, r3
 8023ab6:	697b      	ldr	r3, [r7, #20]
 8023ab8:	4413      	add	r3, r2
 8023aba:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, 0);
 8023abc:	89fb      	ldrh	r3, [r7, #14]
 8023abe:	b2db      	uxtb	r3, r3
 8023ac0:	2200      	movs	r2, #0
 8023ac2:	2121      	movs	r1, #33	; 0x21
 8023ac4:	4618      	mov	r0, r3
 8023ac6:	f000 fa59 	bl	8023f7c <CODEC_IO_Write>
 8023aca:	4603      	mov	r3, r0
 8023acc:	461a      	mov	r2, r3
 8023ace:	697b      	ldr	r3, [r7, #20]
 8023ad0:	4413      	add	r3, r2
 8023ad2:	617b      	str	r3, [r7, #20]

    /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
    if (OutputDevice != OUTPUT_DEVICE_HEADPHONE) {
 8023ad4:	89bb      	ldrh	r3, [r7, #12]
 8023ad6:	2b02      	cmp	r3, #2
 8023ad8:	d00b      	beq.n	8023af2 <cs43l22_Init+0x11a>
        /* Set the Speaker Mono mode */
        counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 8023ada:	89fb      	ldrh	r3, [r7, #14]
 8023adc:	b2db      	uxtb	r3, r3
 8023ade:	2206      	movs	r2, #6
 8023ae0:	210f      	movs	r1, #15
 8023ae2:	4618      	mov	r0, r3
 8023ae4:	f000 fa4a 	bl	8023f7c <CODEC_IO_Write>
 8023ae8:	4603      	mov	r3, r0
 8023aea:	461a      	mov	r2, r3
 8023aec:	697b      	ldr	r3, [r7, #20]
 8023aee:	4413      	add	r3, r2
 8023af0:	617b      	str	r3, [r7, #20]
    }

    /* Set the Speaker/Headphone attenuation level */
    counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8023af2:	7afa      	ldrb	r2, [r7, #11]
 8023af4:	89fb      	ldrh	r3, [r7, #14]
 8023af6:	4611      	mov	r1, r2
 8023af8:	4618      	mov	r0, r3
 8023afa:	f000 f8a7 	bl	8023c4c <cs43l22_SetVolume>
 8023afe:	4602      	mov	r2, r0
 8023b00:	697b      	ldr	r3, [r7, #20]
 8023b02:	4413      	add	r3, r2
 8023b04:	617b      	str	r3, [r7, #20]
     off the I2S peripheral MCLK clock (which is the operating clock for Codec).
     If this delay is not inserted, then the codec will not shut down properly and
     it results in high noise after shut down. */

    /* Disable the analog soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 8023b06:	89fb      	ldrh	r3, [r7, #14]
 8023b08:	b2db      	uxtb	r3, r3
 8023b0a:	2200      	movs	r2, #0
 8023b0c:	210a      	movs	r1, #10
 8023b0e:	4618      	mov	r0, r3
 8023b10:	f000 fa34 	bl	8023f7c <CODEC_IO_Write>
 8023b14:	4603      	mov	r3, r0
 8023b16:	461a      	mov	r2, r3
 8023b18:	697b      	ldr	r3, [r7, #20]
 8023b1a:	4413      	add	r3, r2
 8023b1c:	617b      	str	r3, [r7, #20]
    /* Disable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8023b1e:	89fb      	ldrh	r3, [r7, #14]
 8023b20:	b2db      	uxtb	r3, r3
 8023b22:	2204      	movs	r2, #4
 8023b24:	210e      	movs	r1, #14
 8023b26:	4618      	mov	r0, r3
 8023b28:	f000 fa28 	bl	8023f7c <CODEC_IO_Write>
 8023b2c:	4603      	mov	r3, r0
 8023b2e:	461a      	mov	r2, r3
 8023b30:	697b      	ldr	r3, [r7, #20]
 8023b32:	4413      	add	r3, r2
 8023b34:	617b      	str	r3, [r7, #20]
    /* Disable the limiter attack level */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 8023b36:	89fb      	ldrh	r3, [r7, #14]
 8023b38:	b2db      	uxtb	r3, r3
 8023b3a:	2200      	movs	r2, #0
 8023b3c:	2127      	movs	r1, #39	; 0x27
 8023b3e:	4618      	mov	r0, r3
 8023b40:	f000 fa1c 	bl	8023f7c <CODEC_IO_Write>
 8023b44:	4603      	mov	r3, r0
 8023b46:	461a      	mov	r2, r3
 8023b48:	697b      	ldr	r3, [r7, #20]
 8023b4a:	4413      	add	r3, r2
 8023b4c:	617b      	str	r3, [r7, #20]
    /* Adjust Bass and Treble levels */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 8023b4e:	89fb      	ldrh	r3, [r7, #14]
 8023b50:	b2db      	uxtb	r3, r3
 8023b52:	220f      	movs	r2, #15
 8023b54:	211f      	movs	r1, #31
 8023b56:	4618      	mov	r0, r3
 8023b58:	f000 fa10 	bl	8023f7c <CODEC_IO_Write>
 8023b5c:	4603      	mov	r3, r0
 8023b5e:	461a      	mov	r2, r3
 8023b60:	697b      	ldr	r3, [r7, #20]
 8023b62:	4413      	add	r3, r2
 8023b64:	617b      	str	r3, [r7, #20]
    /* Adjust PCM volume level */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 8023b66:	89fb      	ldrh	r3, [r7, #14]
 8023b68:	b2db      	uxtb	r3, r3
 8023b6a:	220a      	movs	r2, #10
 8023b6c:	211a      	movs	r1, #26
 8023b6e:	4618      	mov	r0, r3
 8023b70:	f000 fa04 	bl	8023f7c <CODEC_IO_Write>
 8023b74:	4603      	mov	r3, r0
 8023b76:	461a      	mov	r2, r3
 8023b78:	697b      	ldr	r3, [r7, #20]
 8023b7a:	4413      	add	r3, r2
 8023b7c:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 8023b7e:	89fb      	ldrh	r3, [r7, #14]
 8023b80:	b2db      	uxtb	r3, r3
 8023b82:	220a      	movs	r2, #10
 8023b84:	211b      	movs	r1, #27
 8023b86:	4618      	mov	r0, r3
 8023b88:	f000 f9f8 	bl	8023f7c <CODEC_IO_Write>
 8023b8c:	4603      	mov	r3, r0
 8023b8e:	461a      	mov	r2, r3
 8023b90:	697b      	ldr	r3, [r7, #20]
 8023b92:	4413      	add	r3, r2
 8023b94:	617b      	str	r3, [r7, #20]
    /* Return communication control value */
    return counter;
 8023b96:	697b      	ldr	r3, [r7, #20]
}
 8023b98:	4618      	mov	r0, r3
 8023b9a:	3718      	adds	r7, #24
 8023b9c:	46bd      	mov	sp, r7
 8023b9e:	bd80      	pop	{r7, pc}
 8023ba0:	20000e32 	.word	0x20000e32
 8023ba4:	20000e34 	.word	0x20000e34

08023ba8 <cs43l22_ReadID>:
/**
 * @brief  Get the CS43L22 ID.
 * @param DeviceAddr: Device address on communication Bus.
 * @retval The CS43L22 ID
 */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr) {
 8023ba8:	b580      	push	{r7, lr}
 8023baa:	b084      	sub	sp, #16
 8023bac:	af00      	add	r7, sp, #0
 8023bae:	4603      	mov	r3, r0
 8023bb0:	80fb      	strh	r3, [r7, #6]
    uint8_t Value;
    /* Initialize the Control interface of the Audio Codec */
    AUDIO_IO_Init();
 8023bb2:	f000 f975 	bl	8023ea0 <AUDIO_IO_Init>

    Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 8023bb6:	88fb      	ldrh	r3, [r7, #6]
 8023bb8:	b2db      	uxtb	r3, r3
 8023bba:	2101      	movs	r1, #1
 8023bbc:	4618      	mov	r0, r3
 8023bbe:	f000 f9b1 	bl	8023f24 <AUDIO_IO_Read>
 8023bc2:	4603      	mov	r3, r0
 8023bc4:	73fb      	strb	r3, [r7, #15]
    Value = (Value & CS43L22_ID_MASK);
 8023bc6:	7bfb      	ldrb	r3, [r7, #15]
 8023bc8:	f023 0307 	bic.w	r3, r3, #7
 8023bcc:	73fb      	strb	r3, [r7, #15]

    return ((uint32_t) Value);
 8023bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8023bd0:	4618      	mov	r0, r3
 8023bd2:	3710      	adds	r7, #16
 8023bd4:	46bd      	mov	sp, r7
 8023bd6:	bd80      	pop	{r7, pc}

08023bd8 <cs43l22_Play>:
 * @brief Start the audio Codec play feature.
 * @note For this codec no Play options are required.
 * @param DeviceAddr: Device address on communication Bus.
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t *pBuffer, uint16_t Size) {
 8023bd8:	b580      	push	{r7, lr}
 8023bda:	b084      	sub	sp, #16
 8023bdc:	af00      	add	r7, sp, #0
 8023bde:	4603      	mov	r3, r0
 8023be0:	6039      	str	r1, [r7, #0]
 8023be2:	80fb      	strh	r3, [r7, #6]
 8023be4:	4613      	mov	r3, r2
 8023be6:	80bb      	strh	r3, [r7, #4]
    uint32_t counter = 0;
 8023be8:	2300      	movs	r3, #0
 8023bea:	60fb      	str	r3, [r7, #12]

    if (Is_cs43l22_Stop == 1) {
 8023bec:	4b16      	ldr	r3, [pc, #88]	; (8023c48 <cs43l22_Play+0x70>)
 8023bee:	781b      	ldrb	r3, [r3, #0]
 8023bf0:	2b01      	cmp	r3, #1
 8023bf2:	d123      	bne.n	8023c3c <cs43l22_Play+0x64>
        /* Enable the digital soft ramp */
        counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 8023bf4:	88fb      	ldrh	r3, [r7, #6]
 8023bf6:	b2db      	uxtb	r3, r3
 8023bf8:	2206      	movs	r2, #6
 8023bfa:	210e      	movs	r1, #14
 8023bfc:	4618      	mov	r0, r3
 8023bfe:	f000 f9bd 	bl	8023f7c <CODEC_IO_Write>
 8023c02:	4603      	mov	r3, r0
 8023c04:	461a      	mov	r2, r3
 8023c06:	68fb      	ldr	r3, [r7, #12]
 8023c08:	4413      	add	r3, r2
 8023c0a:	60fb      	str	r3, [r7, #12]

        /* Enable Output device */
        counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8023c0c:	88fb      	ldrh	r3, [r7, #6]
 8023c0e:	2100      	movs	r1, #0
 8023c10:	4618      	mov	r0, r3
 8023c12:	f000 f865 	bl	8023ce0 <cs43l22_SetMute>
 8023c16:	4602      	mov	r2, r0
 8023c18:	68fb      	ldr	r3, [r7, #12]
 8023c1a:	4413      	add	r3, r2
 8023c1c:	60fb      	str	r3, [r7, #12]

        /* Power on the Codec */
        counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);
 8023c1e:	88fb      	ldrh	r3, [r7, #6]
 8023c20:	b2db      	uxtb	r3, r3
 8023c22:	229e      	movs	r2, #158	; 0x9e
 8023c24:	2102      	movs	r1, #2
 8023c26:	4618      	mov	r0, r3
 8023c28:	f000 f9a8 	bl	8023f7c <CODEC_IO_Write>
 8023c2c:	4603      	mov	r3, r0
 8023c2e:	461a      	mov	r2, r3
 8023c30:	68fb      	ldr	r3, [r7, #12]
 8023c32:	4413      	add	r3, r2
 8023c34:	60fb      	str	r3, [r7, #12]
        Is_cs43l22_Stop = 0;
 8023c36:	4b04      	ldr	r3, [pc, #16]	; (8023c48 <cs43l22_Play+0x70>)
 8023c38:	2200      	movs	r2, #0
 8023c3a:	701a      	strb	r2, [r3, #0]
    }

    /* Return communication control value */
    return counter;
 8023c3c:	68fb      	ldr	r3, [r7, #12]
}
 8023c3e:	4618      	mov	r0, r3
 8023c40:	3710      	adds	r7, #16
 8023c42:	46bd      	mov	sp, r7
 8023c44:	bd80      	pop	{r7, pc}
 8023c46:	bf00      	nop
 8023c48:	20000001 	.word	0x20000001

08023c4c <cs43l22_SetVolume>:
 * @param Volume: a byte value from 0 to 255 (refer to codec registers
 *                description for more details).
 *
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume) {
 8023c4c:	b5b0      	push	{r4, r5, r7, lr}
 8023c4e:	b084      	sub	sp, #16
 8023c50:	af00      	add	r7, sp, #0
 8023c52:	4603      	mov	r3, r0
 8023c54:	460a      	mov	r2, r1
 8023c56:	80fb      	strh	r3, [r7, #6]
 8023c58:	4613      	mov	r3, r2
 8023c5a:	717b      	strb	r3, [r7, #5]
    uint32_t counter = 0;
 8023c5c:	2300      	movs	r3, #0
 8023c5e:	60bb      	str	r3, [r7, #8]
    uint16_t regA, regB;
    theVolume = Volume;
 8023c60:	4a1d      	ldr	r2, [pc, #116]	; (8023cd8 <cs43l22_SetVolume+0x8c>)
 8023c62:	797b      	ldrb	r3, [r7, #5]
 8023c64:	7013      	strb	r3, [r2, #0]

    if (theOutputDevice != OUTPUT_DEVICE_HEADPHONE) {
 8023c66:	4b1d      	ldr	r3, [pc, #116]	; (8023cdc <cs43l22_SetVolume+0x90>)
 8023c68:	881b      	ldrh	r3, [r3, #0]
 8023c6a:	2b02      	cmp	r3, #2
 8023c6c:	d004      	beq.n	8023c78 <cs43l22_SetVolume+0x2c>
        regA = CS43L22_REG_SPEAKER_A_VOL;
 8023c6e:	2324      	movs	r3, #36	; 0x24
 8023c70:	81fb      	strh	r3, [r7, #14]
        regB = CS43L22_REG_SPEAKER_B_VOL;
 8023c72:	2325      	movs	r3, #37	; 0x25
 8023c74:	81bb      	strh	r3, [r7, #12]
 8023c76:	e003      	b.n	8023c80 <cs43l22_SetVolume+0x34>
    } else {
        regA = CS43L22_REG_HEADPHONE_A_VOL;
 8023c78:	2322      	movs	r3, #34	; 0x22
 8023c7a:	81fb      	strh	r3, [r7, #14]
        regB = CS43L22_REG_HEADPHONE_B_VOL;
 8023c7c:	2323      	movs	r3, #35	; 0x23
 8023c7e:	81bb      	strh	r3, [r7, #12]
    }

    counter += CODEC_IO_Write(DeviceAddr, regA, VOLUME_CONVERT(Volume));
 8023c80:	88fb      	ldrh	r3, [r7, #6]
 8023c82:	b2dc      	uxtb	r4, r3
 8023c84:	89fb      	ldrh	r3, [r7, #14]
 8023c86:	b2dd      	uxtb	r5, r3
 8023c88:	797b      	ldrb	r3, [r7, #5]
 8023c8a:	4618      	mov	r0, r3
 8023c8c:	f000 f990 	bl	8023fb0 <VOLUME_CONVERT>
 8023c90:	4603      	mov	r3, r0
 8023c92:	461a      	mov	r2, r3
 8023c94:	4629      	mov	r1, r5
 8023c96:	4620      	mov	r0, r4
 8023c98:	f000 f970 	bl	8023f7c <CODEC_IO_Write>
 8023c9c:	4603      	mov	r3, r0
 8023c9e:	461a      	mov	r2, r3
 8023ca0:	68bb      	ldr	r3, [r7, #8]
 8023ca2:	4413      	add	r3, r2
 8023ca4:	60bb      	str	r3, [r7, #8]
    counter += CODEC_IO_Write(DeviceAddr, regB, VOLUME_CONVERT(Volume));
 8023ca6:	88fb      	ldrh	r3, [r7, #6]
 8023ca8:	b2dc      	uxtb	r4, r3
 8023caa:	89bb      	ldrh	r3, [r7, #12]
 8023cac:	b2dd      	uxtb	r5, r3
 8023cae:	797b      	ldrb	r3, [r7, #5]
 8023cb0:	4618      	mov	r0, r3
 8023cb2:	f000 f97d 	bl	8023fb0 <VOLUME_CONVERT>
 8023cb6:	4603      	mov	r3, r0
 8023cb8:	461a      	mov	r2, r3
 8023cba:	4629      	mov	r1, r5
 8023cbc:	4620      	mov	r0, r4
 8023cbe:	f000 f95d 	bl	8023f7c <CODEC_IO_Write>
 8023cc2:	4603      	mov	r3, r0
 8023cc4:	461a      	mov	r2, r3
 8023cc6:	68bb      	ldr	r3, [r7, #8]
 8023cc8:	4413      	add	r3, r2
 8023cca:	60bb      	str	r3, [r7, #8]

    return counter;
 8023ccc:	68bb      	ldr	r3, [r7, #8]
}
 8023cce:	4618      	mov	r0, r3
 8023cd0:	3710      	adds	r7, #16
 8023cd2:	46bd      	mov	sp, r7
 8023cd4:	bdb0      	pop	{r4, r5, r7, pc}
 8023cd6:	bf00      	nop
 8023cd8:	20000e30 	.word	0x20000e30
 8023cdc:	20000e32 	.word	0x20000e32

08023ce0 <cs43l22_SetMute>:
 * @param DeviceAddr: Device address on communication Bus.
 * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
 *             mute mode.
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd) {
 8023ce0:	b5b0      	push	{r4, r5, r7, lr}
 8023ce2:	b084      	sub	sp, #16
 8023ce4:	af00      	add	r7, sp, #0
 8023ce6:	4603      	mov	r3, r0
 8023ce8:	6039      	str	r1, [r7, #0]
 8023cea:	80fb      	strh	r3, [r7, #6]
    uint32_t counter = 0;
 8023cec:	2300      	movs	r3, #0
 8023cee:	60fb      	str	r3, [r7, #12]
    uint16_t regA, regB;

    if (theOutputDevice != OUTPUT_DEVICE_HEADPHONE) {
 8023cf0:	4b38      	ldr	r3, [pc, #224]	; (8023dd4 <cs43l22_SetMute+0xf4>)
 8023cf2:	881b      	ldrh	r3, [r3, #0]
 8023cf4:	2b02      	cmp	r3, #2
 8023cf6:	d004      	beq.n	8023d02 <cs43l22_SetMute+0x22>
        regA = CS43L22_REG_SPEAKER_A_VOL;
 8023cf8:	2324      	movs	r3, #36	; 0x24
 8023cfa:	817b      	strh	r3, [r7, #10]
        regB = CS43L22_REG_SPEAKER_B_VOL;
 8023cfc:	2325      	movs	r3, #37	; 0x25
 8023cfe:	813b      	strh	r3, [r7, #8]
 8023d00:	e003      	b.n	8023d0a <cs43l22_SetMute+0x2a>
    } else {
        regA = CS43L22_REG_HEADPHONE_A_VOL;
 8023d02:	2322      	movs	r3, #34	; 0x22
 8023d04:	817b      	strh	r3, [r7, #10]
        regB = CS43L22_REG_HEADPHONE_B_VOL;
 8023d06:	2323      	movs	r3, #35	; 0x23
 8023d08:	813b      	strh	r3, [r7, #8]
    }

    /* Set the Mute mode */
    if (Cmd == AUDIO_MUTE_ON) {
 8023d0a:	683b      	ldr	r3, [r7, #0]
 8023d0c:	2b01      	cmp	r3, #1
 8023d0e:	d126      	bne.n	8023d5e <cs43l22_SetMute+0x7e>
        counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 8023d10:	88fb      	ldrh	r3, [r7, #6]
 8023d12:	b2db      	uxtb	r3, r3
 8023d14:	22ff      	movs	r2, #255	; 0xff
 8023d16:	2104      	movs	r1, #4
 8023d18:	4618      	mov	r0, r3
 8023d1a:	f000 f92f 	bl	8023f7c <CODEC_IO_Write>
 8023d1e:	4603      	mov	r3, r0
 8023d20:	461a      	mov	r2, r3
 8023d22:	68fb      	ldr	r3, [r7, #12]
 8023d24:	4413      	add	r3, r2
 8023d26:	60fb      	str	r3, [r7, #12]
        // mute
        counter += CODEC_IO_Write(DeviceAddr, regA, 0x01);
 8023d28:	88fb      	ldrh	r3, [r7, #6]
 8023d2a:	b2db      	uxtb	r3, r3
 8023d2c:	897a      	ldrh	r2, [r7, #10]
 8023d2e:	b2d1      	uxtb	r1, r2
 8023d30:	2201      	movs	r2, #1
 8023d32:	4618      	mov	r0, r3
 8023d34:	f000 f922 	bl	8023f7c <CODEC_IO_Write>
 8023d38:	4603      	mov	r3, r0
 8023d3a:	461a      	mov	r2, r3
 8023d3c:	68fb      	ldr	r3, [r7, #12]
 8023d3e:	4413      	add	r3, r2
 8023d40:	60fb      	str	r3, [r7, #12]
        counter += CODEC_IO_Write(DeviceAddr, regB, 0x01);
 8023d42:	88fb      	ldrh	r3, [r7, #6]
 8023d44:	b2db      	uxtb	r3, r3
 8023d46:	893a      	ldrh	r2, [r7, #8]
 8023d48:	b2d1      	uxtb	r1, r2
 8023d4a:	2201      	movs	r2, #1
 8023d4c:	4618      	mov	r0, r3
 8023d4e:	f000 f915 	bl	8023f7c <CODEC_IO_Write>
 8023d52:	4603      	mov	r3, r0
 8023d54:	461a      	mov	r2, r3
 8023d56:	68fb      	ldr	r3, [r7, #12]
 8023d58:	4413      	add	r3, r2
 8023d5a:	60fb      	str	r3, [r7, #12]
 8023d5c:	e035      	b.n	8023dca <cs43l22_SetMute+0xea>
    } else /* AUDIO_MUTE_OFF Disable the Mute */
    {
        // set to max
        counter += CODEC_IO_Write(DeviceAddr, regA, VOLUME_CONVERT(theVolume));
 8023d5e:	88fb      	ldrh	r3, [r7, #6]
 8023d60:	b2dc      	uxtb	r4, r3
 8023d62:	897b      	ldrh	r3, [r7, #10]
 8023d64:	b2dd      	uxtb	r5, r3
 8023d66:	4b1c      	ldr	r3, [pc, #112]	; (8023dd8 <cs43l22_SetMute+0xf8>)
 8023d68:	781b      	ldrb	r3, [r3, #0]
 8023d6a:	4618      	mov	r0, r3
 8023d6c:	f000 f920 	bl	8023fb0 <VOLUME_CONVERT>
 8023d70:	4603      	mov	r3, r0
 8023d72:	461a      	mov	r2, r3
 8023d74:	4629      	mov	r1, r5
 8023d76:	4620      	mov	r0, r4
 8023d78:	f000 f900 	bl	8023f7c <CODEC_IO_Write>
 8023d7c:	4603      	mov	r3, r0
 8023d7e:	461a      	mov	r2, r3
 8023d80:	68fb      	ldr	r3, [r7, #12]
 8023d82:	4413      	add	r3, r2
 8023d84:	60fb      	str	r3, [r7, #12]
        counter += CODEC_IO_Write(DeviceAddr, regB, VOLUME_CONVERT(theVolume));
 8023d86:	88fb      	ldrh	r3, [r7, #6]
 8023d88:	b2dc      	uxtb	r4, r3
 8023d8a:	893b      	ldrh	r3, [r7, #8]
 8023d8c:	b2dd      	uxtb	r5, r3
 8023d8e:	4b12      	ldr	r3, [pc, #72]	; (8023dd8 <cs43l22_SetMute+0xf8>)
 8023d90:	781b      	ldrb	r3, [r3, #0]
 8023d92:	4618      	mov	r0, r3
 8023d94:	f000 f90c 	bl	8023fb0 <VOLUME_CONVERT>
 8023d98:	4603      	mov	r3, r0
 8023d9a:	461a      	mov	r2, r3
 8023d9c:	4629      	mov	r1, r5
 8023d9e:	4620      	mov	r0, r4
 8023da0:	f000 f8ec 	bl	8023f7c <CODEC_IO_Write>
 8023da4:	4603      	mov	r3, r0
 8023da6:	461a      	mov	r2, r3
 8023da8:	68fb      	ldr	r3, [r7, #12]
 8023daa:	4413      	add	r3, r2
 8023dac:	60fb      	str	r3, [r7, #12]
        counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8023dae:	88fb      	ldrh	r3, [r7, #6]
 8023db0:	b2d8      	uxtb	r0, r3
 8023db2:	4b0a      	ldr	r3, [pc, #40]	; (8023ddc <cs43l22_SetMute+0xfc>)
 8023db4:	781b      	ldrb	r3, [r3, #0]
 8023db6:	b2db      	uxtb	r3, r3
 8023db8:	461a      	mov	r2, r3
 8023dba:	2104      	movs	r1, #4
 8023dbc:	f000 f8de 	bl	8023f7c <CODEC_IO_Write>
 8023dc0:	4603      	mov	r3, r0
 8023dc2:	461a      	mov	r2, r3
 8023dc4:	68fb      	ldr	r3, [r7, #12]
 8023dc6:	4413      	add	r3, r2
 8023dc8:	60fb      	str	r3, [r7, #12]
    }
    return counter;
 8023dca:	68fb      	ldr	r3, [r7, #12]
}
 8023dcc:	4618      	mov	r0, r3
 8023dce:	3710      	adds	r7, #16
 8023dd0:	46bd      	mov	sp, r7
 8023dd2:	bdb0      	pop	{r4, r5, r7, pc}
 8023dd4:	20000e32 	.word	0x20000e32
 8023dd8:	20000e30 	.word	0x20000e30
 8023ddc:	20000e34 	.word	0x20000e34

08023de0 <cs43l22_SetBeep>:
 */
uint32_t cs43l22_Reset(uint16_t DeviceAddr) {
    return 0;
}

uint32_t cs43l22_SetBeep(uint16_t DeviceAddr, uint8_t Frequency, uint8_t OnTime, uint8_t OffTime) {
 8023de0:	b590      	push	{r4, r7, lr}
 8023de2:	b085      	sub	sp, #20
 8023de4:	af00      	add	r7, sp, #0
 8023de6:	4604      	mov	r4, r0
 8023de8:	4608      	mov	r0, r1
 8023dea:	4611      	mov	r1, r2
 8023dec:	461a      	mov	r2, r3
 8023dee:	4623      	mov	r3, r4
 8023df0:	80fb      	strh	r3, [r7, #6]
 8023df2:	4603      	mov	r3, r0
 8023df4:	717b      	strb	r3, [r7, #5]
 8023df6:	460b      	mov	r3, r1
 8023df8:	713b      	strb	r3, [r7, #4]
 8023dfa:	4613      	mov	r3, r2
 8023dfc:	70fb      	strb	r3, [r7, #3]
    uint32_t counter = 0;
 8023dfe:	2300      	movs	r3, #0
 8023e00:	60fb      	str	r3, [r7, #12]

    /* Set frequency of beep and on time */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_BEEP_FREQ_ON_TIME, (Frequency << 4) | OnTime);
 8023e02:	88fb      	ldrh	r3, [r7, #6]
 8023e04:	b2d8      	uxtb	r0, r3
 8023e06:	797b      	ldrb	r3, [r7, #5]
 8023e08:	011b      	lsls	r3, r3, #4
 8023e0a:	b25a      	sxtb	r2, r3
 8023e0c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8023e10:	4313      	orrs	r3, r2
 8023e12:	b25b      	sxtb	r3, r3
 8023e14:	b2db      	uxtb	r3, r3
 8023e16:	461a      	mov	r2, r3
 8023e18:	211c      	movs	r1, #28
 8023e1a:	f000 f8af 	bl	8023f7c <CODEC_IO_Write>
 8023e1e:	4603      	mov	r3, r0
 8023e20:	461a      	mov	r2, r3
 8023e22:	68fb      	ldr	r3, [r7, #12]
 8023e24:	4413      	add	r3, r2
 8023e26:	60fb      	str	r3, [r7, #12]
    /* Set volume of beep (max), and off time */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_BEEP_VOL_OFF_TIME, (OffTime << 5) | BEEP_VOL_MAX);
 8023e28:	88fb      	ldrh	r3, [r7, #6]
 8023e2a:	b2d8      	uxtb	r0, r3
 8023e2c:	78fb      	ldrb	r3, [r7, #3]
 8023e2e:	015b      	lsls	r3, r3, #5
 8023e30:	b25b      	sxtb	r3, r3
 8023e32:	f043 0306 	orr.w	r3, r3, #6
 8023e36:	b25b      	sxtb	r3, r3
 8023e38:	b2db      	uxtb	r3, r3
 8023e3a:	461a      	mov	r2, r3
 8023e3c:	211d      	movs	r1, #29
 8023e3e:	f000 f89d 	bl	8023f7c <CODEC_IO_Write>
 8023e42:	4603      	mov	r3, r0
 8023e44:	461a      	mov	r2, r3
 8023e46:	68fb      	ldr	r3, [r7, #12]
 8023e48:	4413      	add	r3, r2
 8023e4a:	60fb      	str	r3, [r7, #12]

    return counter;
 8023e4c:	68fb      	ldr	r3, [r7, #12]
}
 8023e4e:	4618      	mov	r0, r3
 8023e50:	3714      	adds	r7, #20
 8023e52:	46bd      	mov	sp, r7
 8023e54:	bd90      	pop	{r4, r7, pc}

08023e56 <cs43l22_Beep>:

uint32_t cs43l22_Beep(uint16_t DeviceAddr, uint8_t Mode, uint8_t Mix) {
 8023e56:	b580      	push	{r7, lr}
 8023e58:	b084      	sub	sp, #16
 8023e5a:	af00      	add	r7, sp, #0
 8023e5c:	4603      	mov	r3, r0
 8023e5e:	80fb      	strh	r3, [r7, #6]
 8023e60:	460b      	mov	r3, r1
 8023e62:	717b      	strb	r3, [r7, #5]
 8023e64:	4613      	mov	r3, r2
 8023e66:	713b      	strb	r3, [r7, #4]
    uint32_t counter = 0;
 8023e68:	2300      	movs	r3, #0
 8023e6a:	60fb      	str	r3, [r7, #12]

    /* Set mode beep play and mix with serial sound*/
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_BEEP_TONE_CFG, (Mode << 6) | (Mix << 5));
 8023e6c:	88fb      	ldrh	r3, [r7, #6]
 8023e6e:	b2d8      	uxtb	r0, r3
 8023e70:	797b      	ldrb	r3, [r7, #5]
 8023e72:	019b      	lsls	r3, r3, #6
 8023e74:	b25a      	sxtb	r2, r3
 8023e76:	793b      	ldrb	r3, [r7, #4]
 8023e78:	015b      	lsls	r3, r3, #5
 8023e7a:	b25b      	sxtb	r3, r3
 8023e7c:	4313      	orrs	r3, r2
 8023e7e:	b25b      	sxtb	r3, r3
 8023e80:	b2db      	uxtb	r3, r3
 8023e82:	461a      	mov	r2, r3
 8023e84:	211e      	movs	r1, #30
 8023e86:	f000 f879 	bl	8023f7c <CODEC_IO_Write>
 8023e8a:	4603      	mov	r3, r0
 8023e8c:	461a      	mov	r2, r3
 8023e8e:	68fb      	ldr	r3, [r7, #12]
 8023e90:	4413      	add	r3, r2
 8023e92:	60fb      	str	r3, [r7, #12]

    return counter;
 8023e94:	68fb      	ldr	r3, [r7, #12]
}
 8023e96:	4618      	mov	r0, r3
 8023e98:	3710      	adds	r7, #16
 8023e9a:	46bd      	mov	sp, r7
 8023e9c:	bd80      	pop	{r7, pc}
	...

08023ea0 <AUDIO_IO_Init>:

/********************************* LINK AUDIO *********************************/
/**
 * @brief  Initializes Audio low level.
 */
void AUDIO_IO_Init(void) {
 8023ea0:	b580      	push	{r7, lr}
 8023ea2:	af00      	add	r7, sp, #0
    /* Power Down the codec */
    HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 8023ea4:	2200      	movs	r2, #0
 8023ea6:	2110      	movs	r1, #16
 8023ea8:	4808      	ldr	r0, [pc, #32]	; (8023ecc <AUDIO_IO_Init+0x2c>)
 8023eaa:	f00c f8bf 	bl	803002c <HAL_GPIO_WritePin>
    /* Wait for a delay to insure registers erasing */
    _DelayMS(500);
 8023eae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8023eb2:	f01b fc85 	bl	803f7c0 <_DelayMS>
    /* Power on the codec */
    HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_SET);
 8023eb6:	2201      	movs	r2, #1
 8023eb8:	2110      	movs	r1, #16
 8023eba:	4804      	ldr	r0, [pc, #16]	; (8023ecc <AUDIO_IO_Init+0x2c>)
 8023ebc:	f00c f8b6 	bl	803002c <HAL_GPIO_WritePin>
    /* Wait for a delay to insure registers erasing */
    _DelayMS(500);
 8023ec0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8023ec4:	f01b fc7c 	bl	803f7c0 <_DelayMS>
}
 8023ec8:	bf00      	nop
 8023eca:	bd80      	pop	{r7, pc}
 8023ecc:	40020c00 	.word	0x40020c00

08023ed0 <AUDIO_IO_Write>:
 * @brief  Writes a single data.
 * @param  Addr: I2C address
 * @param  Reg: Reg address
 * @param  Value: Data to be written
 */
void AUDIO_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value) {
 8023ed0:	b580      	push	{r7, lr}
 8023ed2:	b088      	sub	sp, #32
 8023ed4:	af04      	add	r7, sp, #16
 8023ed6:	4603      	mov	r3, r0
 8023ed8:	71fb      	strb	r3, [r7, #7]
 8023eda:	460b      	mov	r3, r1
 8023edc:	71bb      	strb	r3, [r7, #6]
 8023ede:	4613      	mov	r3, r2
 8023ee0:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef status = HAL_OK;
 8023ee2:	2300      	movs	r3, #0
 8023ee4:	73fb      	strb	r3, [r7, #15]

    status = HAL_I2C_Mem_Write(&hi2c1, Addr, (uint16_t) Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2Cx_TIMEOUT_MAX);
 8023ee6:	79fb      	ldrb	r3, [r7, #7]
 8023ee8:	b299      	uxth	r1, r3
 8023eea:	79bb      	ldrb	r3, [r7, #6]
 8023eec:	b29a      	uxth	r2, r3
 8023eee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8023ef2:	9302      	str	r3, [sp, #8]
 8023ef4:	2301      	movs	r3, #1
 8023ef6:	9301      	str	r3, [sp, #4]
 8023ef8:	1d7b      	adds	r3, r7, #5
 8023efa:	9300      	str	r3, [sp, #0]
 8023efc:	2301      	movs	r3, #1
 8023efe:	4808      	ldr	r0, [pc, #32]	; (8023f20 <AUDIO_IO_Write+0x50>)
 8023f00:	f00c fb16 	bl	8030530 <HAL_I2C_Mem_Write>
 8023f04:	4603      	mov	r3, r0
 8023f06:	73fb      	strb	r3, [r7, #15]

    /* Check the communication status */
    if (status != HAL_OK) {
 8023f08:	7bfb      	ldrb	r3, [r7, #15]
 8023f0a:	2b00      	cmp	r3, #0
 8023f0c:	d003      	beq.n	8023f16 <AUDIO_IO_Write+0x46>
        /* Execute user timeout callback */
        I2Cx_Error(Addr);
 8023f0e:	79fb      	ldrb	r3, [r7, #7]
 8023f10:	4618      	mov	r0, r3
 8023f12:	f000 f8b9 	bl	8024088 <I2Cx_Error>
    }
}
 8023f16:	bf00      	nop
 8023f18:	3710      	adds	r7, #16
 8023f1a:	46bd      	mov	sp, r7
 8023f1c:	bd80      	pop	{r7, pc}
 8023f1e:	bf00      	nop
 8023f20:	20008534 	.word	0x20008534

08023f24 <AUDIO_IO_Read>:
 * @brief  Reads a single data.
 * @param  Addr: I2C address
 * @param  Reg: Reg address
 * @retval Data to be read
 */
uint8_t AUDIO_IO_Read(uint8_t Addr, uint8_t Reg) {
 8023f24:	b580      	push	{r7, lr}
 8023f26:	b088      	sub	sp, #32
 8023f28:	af04      	add	r7, sp, #16
 8023f2a:	4603      	mov	r3, r0
 8023f2c:	460a      	mov	r2, r1
 8023f2e:	71fb      	strb	r3, [r7, #7]
 8023f30:	4613      	mov	r3, r2
 8023f32:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef status = HAL_OK;
 8023f34:	2300      	movs	r3, #0
 8023f36:	73fb      	strb	r3, [r7, #15]
    uint8_t value = 0;
 8023f38:	2300      	movs	r3, #0
 8023f3a:	73bb      	strb	r3, [r7, #14]

    status = HAL_I2C_Mem_Read(&hi2c1, Addr, (uint16_t) Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2Cx_TIMEOUT_MAX);
 8023f3c:	79fb      	ldrb	r3, [r7, #7]
 8023f3e:	b299      	uxth	r1, r3
 8023f40:	79bb      	ldrb	r3, [r7, #6]
 8023f42:	b29a      	uxth	r2, r3
 8023f44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8023f48:	9302      	str	r3, [sp, #8]
 8023f4a:	2301      	movs	r3, #1
 8023f4c:	9301      	str	r3, [sp, #4]
 8023f4e:	f107 030e 	add.w	r3, r7, #14
 8023f52:	9300      	str	r3, [sp, #0]
 8023f54:	2301      	movs	r3, #1
 8023f56:	4808      	ldr	r0, [pc, #32]	; (8023f78 <AUDIO_IO_Read+0x54>)
 8023f58:	f00c fbe4 	bl	8030724 <HAL_I2C_Mem_Read>
 8023f5c:	4603      	mov	r3, r0
 8023f5e:	73fb      	strb	r3, [r7, #15]

    /* Check the communication status */
    if (status != HAL_OK) {
 8023f60:	7bfb      	ldrb	r3, [r7, #15]
 8023f62:	2b00      	cmp	r3, #0
 8023f64:	d003      	beq.n	8023f6e <AUDIO_IO_Read+0x4a>
        /* Execute user timeout callback */
        I2Cx_Error(Addr);
 8023f66:	79fb      	ldrb	r3, [r7, #7]
 8023f68:	4618      	mov	r0, r3
 8023f6a:	f000 f88d 	bl	8024088 <I2Cx_Error>
    }
    return value;
 8023f6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8023f70:	4618      	mov	r0, r3
 8023f72:	3710      	adds	r7, #16
 8023f74:	46bd      	mov	sp, r7
 8023f76:	bd80      	pop	{r7, pc}
 8023f78:	20008534 	.word	0x20008534

08023f7c <CODEC_IO_Write>:
 * @param  Addr: I2C address
 * @param  Reg: Reg address
 * @param  Value: Data to be written
 * @retval None
 */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value) {
 8023f7c:	b580      	push	{r7, lr}
 8023f7e:	b084      	sub	sp, #16
 8023f80:	af00      	add	r7, sp, #0
 8023f82:	4603      	mov	r3, r0
 8023f84:	71fb      	strb	r3, [r7, #7]
 8023f86:	460b      	mov	r3, r1
 8023f88:	71bb      	strb	r3, [r7, #6]
 8023f8a:	4613      	mov	r3, r2
 8023f8c:	717b      	strb	r3, [r7, #5]
    uint32_t result = 0;
 8023f8e:	2300      	movs	r3, #0
 8023f90:	60fb      	str	r3, [r7, #12]

    AUDIO_IO_Write(Addr, Reg, Value);
 8023f92:	797a      	ldrb	r2, [r7, #5]
 8023f94:	79b9      	ldrb	r1, [r7, #6]
 8023f96:	79fb      	ldrb	r3, [r7, #7]
 8023f98:	4618      	mov	r0, r3
 8023f9a:	f7ff ff99 	bl	8023ed0 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
	/* Verify that the data has been correctly written */
	result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */

    return result;
 8023f9e:	68fb      	ldr	r3, [r7, #12]
 8023fa0:	b2db      	uxtb	r3, r3
}
 8023fa2:	4618      	mov	r0, r3
 8023fa4:	3710      	adds	r7, #16
 8023fa6:	46bd      	mov	sp, r7
 8023fa8:	bd80      	pop	{r7, pc}
 8023faa:	0000      	movs	r0, r0
 8023fac:	0000      	movs	r0, r0
	...

08023fb0 <VOLUME_CONVERT>:

static uint8_t VOLUME_CONVERT(uint8_t Volume) {
 8023fb0:	b590      	push	{r4, r7, lr}
 8023fb2:	b089      	sub	sp, #36	; 0x24
 8023fb4:	af00      	add	r7, sp, #0
 8023fb6:	4603      	mov	r3, r0
 8023fb8:	71fb      	strb	r3, [r7, #7]
    uint64_t Vol, Multiplier = pow(10, 10);
 8023fba:	a431      	add	r4, pc, #196	; (adr r4, 8024080 <VOLUME_CONVERT+0xd0>)
 8023fbc:	e9d4 3400 	ldrd	r3, r4, [r4]
 8023fc0:	e9c7 3406 	strd	r3, r4, [r7, #24]
    uint8_t Log, Result;

    // change zero to 1
    Volume = Volume ? Volume : 1;
 8023fc4:	79fb      	ldrb	r3, [r7, #7]
 8023fc6:	2b00      	cmp	r3, #0
 8023fc8:	d001      	beq.n	8023fce <VOLUME_CONVERT+0x1e>
 8023fca:	79fb      	ldrb	r3, [r7, #7]
 8023fcc:	e000      	b.n	8023fd0 <VOLUME_CONVERT+0x20>
 8023fce:	2301      	movs	r3, #1
 8023fd0:	71fb      	strb	r3, [r7, #7]

    // expand resolution
    Vol = Volume > 100 ? Multiplier : (uint64_t) ((Volume * Multiplier) / 100);
 8023fd2:	79fb      	ldrb	r3, [r7, #7]
 8023fd4:	2b64      	cmp	r3, #100	; 0x64
 8023fd6:	d817      	bhi.n	8024008 <VOLUME_CONVERT+0x58>
 8023fd8:	79fb      	ldrb	r3, [r7, #7]
 8023fda:	f04f 0400 	mov.w	r4, #0
 8023fde:	69ba      	ldr	r2, [r7, #24]
 8023fe0:	fb04 f102 	mul.w	r1, r4, r2
 8023fe4:	69fa      	ldr	r2, [r7, #28]
 8023fe6:	fb03 f202 	mul.w	r2, r3, r2
 8023fea:	440a      	add	r2, r1
 8023fec:	69b9      	ldr	r1, [r7, #24]
 8023fee:	fba1 0103 	umull	r0, r1, r1, r3
 8023ff2:	1853      	adds	r3, r2, r1
 8023ff4:	4619      	mov	r1, r3
 8023ff6:	f04f 0264 	mov.w	r2, #100	; 0x64
 8023ffa:	f04f 0300 	mov.w	r3, #0
 8023ffe:	f7fc fe7b 	bl	8020cf8 <__aeabi_uldivmod>
 8024002:	4603      	mov	r3, r0
 8024004:	460c      	mov	r4, r1
 8024006:	e001      	b.n	802400c <VOLUME_CONVERT+0x5c>
 8024008:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 802400c:	e9c7 3404 	strd	r3, r4, [r7, #16]

    // convert linear to logarithmic (scale 100)
    Log = (uint8_t) (10 * log10(1 + Vol));
 8024010:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8024014:	1c59      	adds	r1, r3, #1
 8024016:	f144 0200 	adc.w	r2, r4, #0
 802401a:	4608      	mov	r0, r1
 802401c:	4611      	mov	r1, r2
 802401e:	f7fc faed 	bl	80205fc <__aeabi_ul2d>
 8024022:	4603      	mov	r3, r0
 8024024:	460c      	mov	r4, r1
 8024026:	ec44 3b10 	vmov	d0, r3, r4
 802402a:	f01d feed 	bl	8041e08 <log10>
 802402e:	ec51 0b10 	vmov	r0, r1, d0
 8024032:	f04f 0200 	mov.w	r2, #0
 8024036:	4b10      	ldr	r3, [pc, #64]	; (8024078 <VOLUME_CONVERT+0xc8>)
 8024038:	f7fc fb16 	bl	8020668 <__aeabi_dmul>
 802403c:	4603      	mov	r3, r0
 802403e:	460c      	mov	r4, r1
 8024040:	4618      	mov	r0, r3
 8024042:	4621      	mov	r1, r4
 8024044:	f7fc fde8 	bl	8020c18 <__aeabi_d2uiz>
 8024048:	4603      	mov	r3, r0
 802404a:	73fb      	strb	r3, [r7, #15]

    // scale 100 to 255
    Result = Log > 100 ? 255 : (uint8_t) ((Log * 255) / 100);
 802404c:	7bfb      	ldrb	r3, [r7, #15]
 802404e:	2b64      	cmp	r3, #100	; 0x64
 8024050:	d80b      	bhi.n	802406a <VOLUME_CONVERT+0xba>
 8024052:	7bfa      	ldrb	r2, [r7, #15]
 8024054:	4613      	mov	r3, r2
 8024056:	021b      	lsls	r3, r3, #8
 8024058:	1a9b      	subs	r3, r3, r2
 802405a:	4a08      	ldr	r2, [pc, #32]	; (802407c <VOLUME_CONVERT+0xcc>)
 802405c:	fb82 1203 	smull	r1, r2, r2, r3
 8024060:	1152      	asrs	r2, r2, #5
 8024062:	17db      	asrs	r3, r3, #31
 8024064:	1ad3      	subs	r3, r2, r3
 8024066:	b2db      	uxtb	r3, r3
 8024068:	e000      	b.n	802406c <VOLUME_CONVERT+0xbc>
 802406a:	23ff      	movs	r3, #255	; 0xff
 802406c:	73bb      	strb	r3, [r7, #14]

    return Result;
 802406e:	7bbb      	ldrb	r3, [r7, #14]
}
 8024070:	4618      	mov	r0, r3
 8024072:	3724      	adds	r7, #36	; 0x24
 8024074:	46bd      	mov	sp, r7
 8024076:	bd90      	pop	{r4, r7, pc}
 8024078:	40240000 	.word	0x40240000
 802407c:	51eb851f 	.word	0x51eb851f
 8024080:	540be400 	.word	0x540be400
 8024084:	00000002 	.word	0x00000002

08024088 <I2Cx_Error>:

/**
 * @brief  Manages error callback by re-initializing I2C.
 * @param  Addr: I2C Address
 */
static void I2Cx_Error(uint8_t Addr) {
 8024088:	b580      	push	{r7, lr}
 802408a:	b082      	sub	sp, #8
 802408c:	af00      	add	r7, sp, #0
 802408e:	4603      	mov	r3, r0
 8024090:	71fb      	strb	r3, [r7, #7]
    /* De-initialize the I2C communication bus */
    HAL_I2C_MspDeInit(&hi2c1);
 8024092:	4805      	ldr	r0, [pc, #20]	; (80240a8 <I2Cx_Error+0x20>)
 8024094:	f007 fb8e 	bl	802b7b4 <HAL_I2C_MspDeInit>

    /* Re-Initialize the I2C communication bus */
    HAL_I2C_MspInit(&hi2c1);
 8024098:	4803      	ldr	r0, [pc, #12]	; (80240a8 <I2Cx_Error+0x20>)
 802409a:	f007 fa95 	bl	802b5c8 <HAL_I2C_MspInit>
}
 802409e:	bf00      	nop
 80240a0:	3708      	adds	r7, #8
 80240a2:	46bd      	mov	sp, r7
 80240a4:	bd80      	pop	{r7, pc}
 80240a6:	bf00      	nop
 80240a8:	20008534 	.word	0x20008534

080240ac <FZ3387_SET_POWER>:
/* Public variables -----------------------------------------------------------*/
packet_t packet;
finger_t finger;

/* Public functions implementation ---------------------------------------------*/
void FZ3387_SET_POWER(uint8_t state) {
 80240ac:	b580      	push	{r7, lr}
 80240ae:	b082      	sub	sp, #8
 80240b0:	af00      	add	r7, sp, #0
 80240b2:	4603      	mov	r3, r0
 80240b4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(EXT_FINGER_MCU_PWR_GPIO_Port, EXT_FINGER_MCU_PWR_Pin, !state);
 80240b6:	79fb      	ldrb	r3, [r7, #7]
 80240b8:	2b00      	cmp	r3, #0
 80240ba:	bf0c      	ite	eq
 80240bc:	2301      	moveq	r3, #1
 80240be:	2300      	movne	r3, #0
 80240c0:	b2db      	uxtb	r3, r3
 80240c2:	461a      	mov	r2, r3
 80240c4:	2104      	movs	r1, #4
 80240c6:	4805      	ldr	r0, [pc, #20]	; (80240dc <FZ3387_SET_POWER+0x30>)
 80240c8:	f00b ffb0 	bl	803002c <HAL_GPIO_WritePin>
    _DelayMS(500);
 80240cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80240d0:	f01b fb76 	bl	803f7c0 <_DelayMS>
}
 80240d4:	bf00      	nop
 80240d6:	3708      	adds	r7, #8
 80240d8:	46bd      	mov	sp, r7
 80240da:	bd80      	pop	{r7, pc}
 80240dc:	40020800 	.word	0x40020800

080240e0 <FZ3387_SERIAL_WRITE>:

void FZ3387_SERIAL_WRITE(uint8_t c) {
 80240e0:	b580      	push	{r7, lr}
 80240e2:	b082      	sub	sp, #8
 80240e4:	af00      	add	r7, sp, #0
 80240e6:	4603      	mov	r3, r0
 80240e8:	71fb      	strb	r3, [r7, #7]
    FINGER_Transmit8(&c);
 80240ea:	1dfb      	adds	r3, r7, #7
 80240ec:	4618      	mov	r0, r3
 80240ee:	f7fe fa25 	bl	802253c <FINGER_Transmit8>
}
 80240f2:	bf00      	nop
 80240f4:	3708      	adds	r7, #8
 80240f6:	46bd      	mov	sp, r7
 80240f8:	bd80      	pop	{r7, pc}

080240fa <FZ3387_SERIAL_WRITE_U16>:

void FZ3387_SERIAL_WRITE_U16(uint16_t cc) {
 80240fa:	b580      	push	{r7, lr}
 80240fc:	b082      	sub	sp, #8
 80240fe:	af00      	add	r7, sp, #0
 8024100:	4603      	mov	r3, r0
 8024102:	80fb      	strh	r3, [r7, #6]
    FZ3387_SERIAL_WRITE((uint8_t) (cc >> 8));
 8024104:	88fb      	ldrh	r3, [r7, #6]
 8024106:	0a1b      	lsrs	r3, r3, #8
 8024108:	b29b      	uxth	r3, r3
 802410a:	b2db      	uxtb	r3, r3
 802410c:	4618      	mov	r0, r3
 802410e:	f7ff ffe7 	bl	80240e0 <FZ3387_SERIAL_WRITE>
    FZ3387_SERIAL_WRITE((uint8_t) (cc & 0xFF));
 8024112:	88fb      	ldrh	r3, [r7, #6]
 8024114:	b2db      	uxtb	r3, r3
 8024116:	4618      	mov	r0, r3
 8024118:	f7ff ffe2 	bl	80240e0 <FZ3387_SERIAL_WRITE>
}
 802411c:	bf00      	nop
 802411e:	3708      	adds	r7, #8
 8024120:	46bd      	mov	sp, r7
 8024122:	bd80      	pop	{r7, pc}

08024124 <FZ3387_writeStructuredPacket>:
 @brief   Helper function to process a packet and send it over UART to the sensor
 @param   packet A structure containing the bytes to transmit
 */
/**************************************************************************/

void FZ3387_writeStructuredPacket(void) {
 8024124:	b580      	push	{r7, lr}
 8024126:	b082      	sub	sp, #8
 8024128:	af00      	add	r7, sp, #0
    FINGER_Reset_Buffer();
 802412a:	f7fe f9f5 	bl	8022518 <FINGER_Reset_Buffer>

    FZ3387_SERIAL_WRITE_U16(packet.start_code);
 802412e:	4b2c      	ldr	r3, [pc, #176]	; (80241e0 <FZ3387_writeStructuredPacket+0xbc>)
 8024130:	881b      	ldrh	r3, [r3, #0]
 8024132:	4618      	mov	r0, r3
 8024134:	f7ff ffe1 	bl	80240fa <FZ3387_SERIAL_WRITE_U16>
    FZ3387_SERIAL_WRITE(packet.address[0]);
 8024138:	4b29      	ldr	r3, [pc, #164]	; (80241e0 <FZ3387_writeStructuredPacket+0xbc>)
 802413a:	789b      	ldrb	r3, [r3, #2]
 802413c:	4618      	mov	r0, r3
 802413e:	f7ff ffcf 	bl	80240e0 <FZ3387_SERIAL_WRITE>
    FZ3387_SERIAL_WRITE(packet.address[1]);
 8024142:	4b27      	ldr	r3, [pc, #156]	; (80241e0 <FZ3387_writeStructuredPacket+0xbc>)
 8024144:	78db      	ldrb	r3, [r3, #3]
 8024146:	4618      	mov	r0, r3
 8024148:	f7ff ffca 	bl	80240e0 <FZ3387_SERIAL_WRITE>
    FZ3387_SERIAL_WRITE(packet.address[2]);
 802414c:	4b24      	ldr	r3, [pc, #144]	; (80241e0 <FZ3387_writeStructuredPacket+0xbc>)
 802414e:	791b      	ldrb	r3, [r3, #4]
 8024150:	4618      	mov	r0, r3
 8024152:	f7ff ffc5 	bl	80240e0 <FZ3387_SERIAL_WRITE>
    FZ3387_SERIAL_WRITE(packet.address[3]);
 8024156:	4b22      	ldr	r3, [pc, #136]	; (80241e0 <FZ3387_writeStructuredPacket+0xbc>)
 8024158:	795b      	ldrb	r3, [r3, #5]
 802415a:	4618      	mov	r0, r3
 802415c:	f7ff ffc0 	bl	80240e0 <FZ3387_SERIAL_WRITE>
    FZ3387_SERIAL_WRITE(packet.type);
 8024160:	4b1f      	ldr	r3, [pc, #124]	; (80241e0 <FZ3387_writeStructuredPacket+0xbc>)
 8024162:	799b      	ldrb	r3, [r3, #6]
 8024164:	4618      	mov	r0, r3
 8024166:	f7ff ffbb 	bl	80240e0 <FZ3387_SERIAL_WRITE>

    uint16_t wire_length = packet.length + 2;
 802416a:	4b1d      	ldr	r3, [pc, #116]	; (80241e0 <FZ3387_writeStructuredPacket+0xbc>)
 802416c:	891b      	ldrh	r3, [r3, #8]
 802416e:	3302      	adds	r3, #2
 8024170:	807b      	strh	r3, [r7, #2]
    FZ3387_SERIAL_WRITE_U16(wire_length);
 8024172:	887b      	ldrh	r3, [r7, #2]
 8024174:	4618      	mov	r0, r3
 8024176:	f7ff ffc0 	bl	80240fa <FZ3387_SERIAL_WRITE_U16>

    uint16_t sum = ((wire_length) >> 8) + ((wire_length) & 0xFF) + packet.type;
 802417a:	887b      	ldrh	r3, [r7, #2]
 802417c:	0a1b      	lsrs	r3, r3, #8
 802417e:	b29a      	uxth	r2, r3
 8024180:	887b      	ldrh	r3, [r7, #2]
 8024182:	b2db      	uxtb	r3, r3
 8024184:	b29b      	uxth	r3, r3
 8024186:	4413      	add	r3, r2
 8024188:	b29a      	uxth	r2, r3
 802418a:	4b15      	ldr	r3, [pc, #84]	; (80241e0 <FZ3387_writeStructuredPacket+0xbc>)
 802418c:	799b      	ldrb	r3, [r3, #6]
 802418e:	b29b      	uxth	r3, r3
 8024190:	4413      	add	r3, r2
 8024192:	80fb      	strh	r3, [r7, #6]
    for (uint8_t i = 0; i < packet.length; i++) {
 8024194:	2300      	movs	r3, #0
 8024196:	717b      	strb	r3, [r7, #5]
 8024198:	e011      	b.n	80241be <FZ3387_writeStructuredPacket+0x9a>
        FZ3387_SERIAL_WRITE(packet.data[i]);
 802419a:	797b      	ldrb	r3, [r7, #5]
 802419c:	4a10      	ldr	r2, [pc, #64]	; (80241e0 <FZ3387_writeStructuredPacket+0xbc>)
 802419e:	4413      	add	r3, r2
 80241a0:	7a9b      	ldrb	r3, [r3, #10]
 80241a2:	4618      	mov	r0, r3
 80241a4:	f7ff ff9c 	bl	80240e0 <FZ3387_SERIAL_WRITE>
        sum += packet.data[i];
 80241a8:	797b      	ldrb	r3, [r7, #5]
 80241aa:	4a0d      	ldr	r2, [pc, #52]	; (80241e0 <FZ3387_writeStructuredPacket+0xbc>)
 80241ac:	4413      	add	r3, r2
 80241ae:	7a9b      	ldrb	r3, [r3, #10]
 80241b0:	b29a      	uxth	r2, r3
 80241b2:	88fb      	ldrh	r3, [r7, #6]
 80241b4:	4413      	add	r3, r2
 80241b6:	80fb      	strh	r3, [r7, #6]
    for (uint8_t i = 0; i < packet.length; i++) {
 80241b8:	797b      	ldrb	r3, [r7, #5]
 80241ba:	3301      	adds	r3, #1
 80241bc:	717b      	strb	r3, [r7, #5]
 80241be:	797b      	ldrb	r3, [r7, #5]
 80241c0:	b29a      	uxth	r2, r3
 80241c2:	4b07      	ldr	r3, [pc, #28]	; (80241e0 <FZ3387_writeStructuredPacket+0xbc>)
 80241c4:	891b      	ldrh	r3, [r3, #8]
 80241c6:	429a      	cmp	r2, r3
 80241c8:	d3e7      	bcc.n	802419a <FZ3387_writeStructuredPacket+0x76>
    }

    FZ3387_SERIAL_WRITE_U16(sum);
 80241ca:	88fb      	ldrh	r3, [r7, #6]
 80241cc:	4618      	mov	r0, r3
 80241ce:	f7ff ff94 	bl	80240fa <FZ3387_SERIAL_WRITE_U16>

    _DelayMS(250);
 80241d2:	20fa      	movs	r0, #250	; 0xfa
 80241d4:	f01b faf4 	bl	803f7c0 <_DelayMS>
}
 80241d8:	bf00      	nop
 80241da:	3708      	adds	r7, #8
 80241dc:	46bd      	mov	sp, r7
 80241de:	bd80      	pop	{r7, pc}
 80241e0:	20008378 	.word	0x20008378

080241e4 <FZ3387_getStructuredPacket>:
 @param   timeout how many milliseconds we're willing to wait
 @returns <code>FINGERPRINT_OK</code> on success
 @returns <code>FINGERPRINT_TIMEOUT</code> or <code>FINGERPRINT_BADPACKET</code> on failure
 */
/**************************************************************************/
uint8_t FZ3387_getStructuredPacket(void) {
 80241e4:	b480      	push	{r7}
 80241e6:	b083      	sub	sp, #12
 80241e8:	af00      	add	r7, sp, #0
    uint8_t byte;
    uint16_t idx = 0;
 80241ea:	2300      	movs	r3, #0
 80241ec:	80fb      	strh	r3, [r7, #6]

    while (1) {
        byte = FINGER_UART_RX[idx];
 80241ee:	88fb      	ldrh	r3, [r7, #6]
 80241f0:	4a36      	ldr	r2, [pc, #216]	; (80242cc <FZ3387_getStructuredPacket+0xe8>)
 80241f2:	5cd3      	ldrb	r3, [r2, r3]
 80241f4:	717b      	strb	r3, [r7, #5]

        switch (idx) {
 80241f6:	88fb      	ldrh	r3, [r7, #6]
 80241f8:	2b08      	cmp	r3, #8
 80241fa:	d84c      	bhi.n	8024296 <FZ3387_getStructuredPacket+0xb2>
 80241fc:	a201      	add	r2, pc, #4	; (adr r2, 8024204 <FZ3387_getStructuredPacket+0x20>)
 80241fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024202:	bf00      	nop
 8024204:	08024229 	.word	0x08024229
 8024208:	08024241 	.word	0x08024241
 802420c:	08024261 	.word	0x08024261
 8024210:	08024261 	.word	0x08024261
 8024214:	08024261 	.word	0x08024261
 8024218:	08024261 	.word	0x08024261
 802421c:	0802426f 	.word	0x0802426f
 8024220:	08024277 	.word	0x08024277
 8024224:	08024285 	.word	0x08024285
            case 0:
                if (byte != (FINGERPRINT_STARTCODE >> 8)) {
 8024228:	797b      	ldrb	r3, [r7, #5]
 802422a:	2bef      	cmp	r3, #239	; 0xef
 802422c:	d001      	beq.n	8024232 <FZ3387_getStructuredPacket+0x4e>
                    // continue;
                    return FINGERPRINT_BADPACKET;
 802422e:	23fe      	movs	r3, #254	; 0xfe
 8024230:	e046      	b.n	80242c0 <FZ3387_getStructuredPacket+0xdc>
                }
                packet.start_code = (uint16_t) byte << 8;
 8024232:	797b      	ldrb	r3, [r7, #5]
 8024234:	b29b      	uxth	r3, r3
 8024236:	021b      	lsls	r3, r3, #8
 8024238:	b29a      	uxth	r2, r3
 802423a:	4b25      	ldr	r3, [pc, #148]	; (80242d0 <FZ3387_getStructuredPacket+0xec>)
 802423c:	801a      	strh	r2, [r3, #0]
                break;
 802423e:	e03b      	b.n	80242b8 <FZ3387_getStructuredPacket+0xd4>
            case 1:
                packet.start_code |= byte;
 8024240:	4b23      	ldr	r3, [pc, #140]	; (80242d0 <FZ3387_getStructuredPacket+0xec>)
 8024242:	881a      	ldrh	r2, [r3, #0]
 8024244:	797b      	ldrb	r3, [r7, #5]
 8024246:	b29b      	uxth	r3, r3
 8024248:	4313      	orrs	r3, r2
 802424a:	b29a      	uxth	r2, r3
 802424c:	4b20      	ldr	r3, [pc, #128]	; (80242d0 <FZ3387_getStructuredPacket+0xec>)
 802424e:	801a      	strh	r2, [r3, #0]
                if (packet.start_code != FINGERPRINT_STARTCODE) {
 8024250:	4b1f      	ldr	r3, [pc, #124]	; (80242d0 <FZ3387_getStructuredPacket+0xec>)
 8024252:	881b      	ldrh	r3, [r3, #0]
 8024254:	f64e 7201 	movw	r2, #61185	; 0xef01
 8024258:	4293      	cmp	r3, r2
 802425a:	d02a      	beq.n	80242b2 <FZ3387_getStructuredPacket+0xce>
                    return FINGERPRINT_BADPACKET;
 802425c:	23fe      	movs	r3, #254	; 0xfe
 802425e:	e02f      	b.n	80242c0 <FZ3387_getStructuredPacket+0xdc>
                break;
            case 2:
                case 3:
                case 4:
                case 5:
                packet.address[idx - 2] = byte;
 8024260:	88fb      	ldrh	r3, [r7, #6]
 8024262:	3b02      	subs	r3, #2
 8024264:	4a1a      	ldr	r2, [pc, #104]	; (80242d0 <FZ3387_getStructuredPacket+0xec>)
 8024266:	4413      	add	r3, r2
 8024268:	797a      	ldrb	r2, [r7, #5]
 802426a:	709a      	strb	r2, [r3, #2]
                break;
 802426c:	e024      	b.n	80242b8 <FZ3387_getStructuredPacket+0xd4>
            case 6:
                packet.type = byte;
 802426e:	4a18      	ldr	r2, [pc, #96]	; (80242d0 <FZ3387_getStructuredPacket+0xec>)
 8024270:	797b      	ldrb	r3, [r7, #5]
 8024272:	7193      	strb	r3, [r2, #6]
                break;
 8024274:	e020      	b.n	80242b8 <FZ3387_getStructuredPacket+0xd4>
            case 7:
                packet.length = (uint16_t) byte << 8;
 8024276:	797b      	ldrb	r3, [r7, #5]
 8024278:	b29b      	uxth	r3, r3
 802427a:	021b      	lsls	r3, r3, #8
 802427c:	b29a      	uxth	r2, r3
 802427e:	4b14      	ldr	r3, [pc, #80]	; (80242d0 <FZ3387_getStructuredPacket+0xec>)
 8024280:	811a      	strh	r2, [r3, #8]
                break;
 8024282:	e019      	b.n	80242b8 <FZ3387_getStructuredPacket+0xd4>
            case 8:
                packet.length |= byte;
 8024284:	4b12      	ldr	r3, [pc, #72]	; (80242d0 <FZ3387_getStructuredPacket+0xec>)
 8024286:	891a      	ldrh	r2, [r3, #8]
 8024288:	797b      	ldrb	r3, [r7, #5]
 802428a:	b29b      	uxth	r3, r3
 802428c:	4313      	orrs	r3, r2
 802428e:	b29a      	uxth	r2, r3
 8024290:	4b0f      	ldr	r3, [pc, #60]	; (80242d0 <FZ3387_getStructuredPacket+0xec>)
 8024292:	811a      	strh	r2, [r3, #8]
                break;
 8024294:	e010      	b.n	80242b8 <FZ3387_getStructuredPacket+0xd4>
            default:
                packet.data[idx - 9] = byte;
 8024296:	88fb      	ldrh	r3, [r7, #6]
 8024298:	3b09      	subs	r3, #9
 802429a:	4a0d      	ldr	r2, [pc, #52]	; (80242d0 <FZ3387_getStructuredPacket+0xec>)
 802429c:	4413      	add	r3, r2
 802429e:	797a      	ldrb	r2, [r7, #5]
 80242a0:	729a      	strb	r2, [r3, #10]
                if ((idx - 8) == packet.length) {
 80242a2:	88fb      	ldrh	r3, [r7, #6]
 80242a4:	3b08      	subs	r3, #8
 80242a6:	4a0a      	ldr	r2, [pc, #40]	; (80242d0 <FZ3387_getStructuredPacket+0xec>)
 80242a8:	8912      	ldrh	r2, [r2, #8]
 80242aa:	4293      	cmp	r3, r2
 80242ac:	d103      	bne.n	80242b6 <FZ3387_getStructuredPacket+0xd2>
                    return FINGERPRINT_OK;
 80242ae:	2300      	movs	r3, #0
 80242b0:	e006      	b.n	80242c0 <FZ3387_getStructuredPacket+0xdc>
                break;
 80242b2:	bf00      	nop
 80242b4:	e000      	b.n	80242b8 <FZ3387_getStructuredPacket+0xd4>
                }
                break;
 80242b6:	bf00      	nop
        }
        idx++;
 80242b8:	88fb      	ldrh	r3, [r7, #6]
 80242ba:	3301      	adds	r3, #1
 80242bc:	80fb      	strh	r3, [r7, #6]
        byte = FINGER_UART_RX[idx];
 80242be:	e796      	b.n	80241ee <FZ3387_getStructuredPacket+0xa>
    }

    // Shouldn't get here so...
    return FINGERPRINT_BADPACKET;
}
 80242c0:	4618      	mov	r0, r3
 80242c2:	370c      	adds	r7, #12
 80242c4:	46bd      	mov	sp, r7
 80242c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80242ca:	4770      	bx	lr
 80242cc:	20008068 	.word	0x20008068
 80242d0:	20008378 	.word	0x20008378

080242d4 <FZ3387_SendCmdPacket>:
/**************************************************************************/
/*!
 @brief Send command packet
 */
/**************************************************************************/
uint8_t FZ3387_SendCmdPacket(uint8_t *data, uint8_t size) {
 80242d4:	b580      	push	{r7, lr}
 80242d6:	b082      	sub	sp, #8
 80242d8:	af00      	add	r7, sp, #0
 80242da:	6078      	str	r0, [r7, #4]
 80242dc:	460b      	mov	r3, r1
 80242de:	70fb      	strb	r3, [r7, #3]
    FZ3387_setPacket(FINGERPRINT_COMMANDPACKET, size, data);
 80242e0:	78fb      	ldrb	r3, [r7, #3]
 80242e2:	b29b      	uxth	r3, r3
 80242e4:	687a      	ldr	r2, [r7, #4]
 80242e6:	4619      	mov	r1, r3
 80242e8:	2001      	movs	r0, #1
 80242ea:	f000 f817 	bl	802431c <FZ3387_setPacket>
    FZ3387_writeStructuredPacket();
 80242ee:	f7ff ff19 	bl	8024124 <FZ3387_writeStructuredPacket>

    if (FZ3387_getStructuredPacket() != FINGERPRINT_OK) {
 80242f2:	f7ff ff77 	bl	80241e4 <FZ3387_getStructuredPacket>
 80242f6:	4603      	mov	r3, r0
 80242f8:	2b00      	cmp	r3, #0
 80242fa:	d001      	beq.n	8024300 <FZ3387_SendCmdPacket+0x2c>
        return FINGERPRINT_PACKETRECIEVEERR;
 80242fc:	2301      	movs	r3, #1
 80242fe:	e007      	b.n	8024310 <FZ3387_SendCmdPacket+0x3c>
    }
    if (packet.type != FINGERPRINT_ACKPACKET) {
 8024300:	4b05      	ldr	r3, [pc, #20]	; (8024318 <FZ3387_SendCmdPacket+0x44>)
 8024302:	799b      	ldrb	r3, [r3, #6]
 8024304:	2b07      	cmp	r3, #7
 8024306:	d001      	beq.n	802430c <FZ3387_SendCmdPacket+0x38>
        return FINGERPRINT_PACKETRECIEVEERR;
 8024308:	2301      	movs	r3, #1
 802430a:	e001      	b.n	8024310 <FZ3387_SendCmdPacket+0x3c>
    }
    return packet.data[0];
 802430c:	4b02      	ldr	r3, [pc, #8]	; (8024318 <FZ3387_SendCmdPacket+0x44>)
 802430e:	7a9b      	ldrb	r3, [r3, #10]
}
 8024310:	4618      	mov	r0, r3
 8024312:	3708      	adds	r7, #8
 8024314:	46bd      	mov	sp, r7
 8024316:	bd80      	pop	{r7, pc}
 8024318:	20008378 	.word	0x20008378

0802431c <FZ3387_setPacket>:
/*!
 @brief Packet conversion
 */
/**************************************************************************/

void FZ3387_setPacket(uint8_t type, uint16_t length, uint8_t *data) {
 802431c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802431e:	b083      	sub	sp, #12
 8024320:	af00      	add	r7, sp, #0
 8024322:	4603      	mov	r3, r0
 8024324:	603a      	str	r2, [r7, #0]
 8024326:	71fb      	strb	r3, [r7, #7]
 8024328:	460b      	mov	r3, r1
 802432a:	80bb      	strh	r3, [r7, #4]
    packet.start_code = FINGERPRINT_STARTCODE;
 802432c:	4b1c      	ldr	r3, [pc, #112]	; (80243a0 <FZ3387_setPacket+0x84>)
 802432e:	f64e 7201 	movw	r2, #61185	; 0xef01
 8024332:	801a      	strh	r2, [r3, #0]
    packet.type = type;
 8024334:	4a1a      	ldr	r2, [pc, #104]	; (80243a0 <FZ3387_setPacket+0x84>)
 8024336:	79fb      	ldrb	r3, [r7, #7]
 8024338:	7193      	strb	r3, [r2, #6]
    packet.length = length;
 802433a:	4a19      	ldr	r2, [pc, #100]	; (80243a0 <FZ3387_setPacket+0x84>)
 802433c:	88bb      	ldrh	r3, [r7, #4]
 802433e:	8113      	strh	r3, [r2, #8]
    packet.address[0] = (uint8_t) (FINGERPRINT_ADDRESS >> 24);
 8024340:	4b17      	ldr	r3, [pc, #92]	; (80243a0 <FZ3387_setPacket+0x84>)
 8024342:	22ff      	movs	r2, #255	; 0xff
 8024344:	709a      	strb	r2, [r3, #2]
    packet.address[1] = (uint8_t) (FINGERPRINT_ADDRESS >> 16);
 8024346:	4b16      	ldr	r3, [pc, #88]	; (80243a0 <FZ3387_setPacket+0x84>)
 8024348:	22ff      	movs	r2, #255	; 0xff
 802434a:	70da      	strb	r2, [r3, #3]
    packet.address[2] = (uint8_t) (FINGERPRINT_ADDRESS >> 8);
 802434c:	4b14      	ldr	r3, [pc, #80]	; (80243a0 <FZ3387_setPacket+0x84>)
 802434e:	22ff      	movs	r2, #255	; 0xff
 8024350:	711a      	strb	r2, [r3, #4]
    packet.address[3] = (uint8_t) (FINGERPRINT_ADDRESS & 0xFF);
 8024352:	4b13      	ldr	r3, [pc, #76]	; (80243a0 <FZ3387_setPacket+0x84>)
 8024354:	22ff      	movs	r2, #255	; 0xff
 8024356:	715a      	strb	r2, [r3, #5]

    if (length < 64)
 8024358:	88bb      	ldrh	r3, [r7, #4]
 802435a:	2b3f      	cmp	r3, #63	; 0x3f
 802435c:	d806      	bhi.n	802436c <FZ3387_setPacket+0x50>
        memcpy(packet.data, data, length);
 802435e:	88bb      	ldrh	r3, [r7, #4]
 8024360:	461a      	mov	r2, r3
 8024362:	6839      	ldr	r1, [r7, #0]
 8024364:	480f      	ldr	r0, [pc, #60]	; (80243a4 <FZ3387_setPacket+0x88>)
 8024366:	f01b fb4a 	bl	803f9fe <memcpy>
    else
        memcpy(packet.data, data, 64);
}
 802436a:	e015      	b.n	8024398 <FZ3387_setPacket+0x7c>
        memcpy(packet.data, data, 64);
 802436c:	4a0c      	ldr	r2, [pc, #48]	; (80243a0 <FZ3387_setPacket+0x84>)
 802436e:	683b      	ldr	r3, [r7, #0]
 8024370:	f102 000a 	add.w	r0, r2, #10
 8024374:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8024378:	4602      	mov	r2, r0
 802437a:	4619      	mov	r1, r3
 802437c:	f8d1 c000 	ldr.w	ip, [r1]
 8024380:	684e      	ldr	r6, [r1, #4]
 8024382:	688d      	ldr	r5, [r1, #8]
 8024384:	68c9      	ldr	r1, [r1, #12]
 8024386:	f8c2 c000 	str.w	ip, [r2]
 802438a:	6056      	str	r6, [r2, #4]
 802438c:	6095      	str	r5, [r2, #8]
 802438e:	60d1      	str	r1, [r2, #12]
 8024390:	3310      	adds	r3, #16
 8024392:	3010      	adds	r0, #16
 8024394:	42a3      	cmp	r3, r4
 8024396:	d1ef      	bne.n	8024378 <FZ3387_setPacket+0x5c>
}
 8024398:	bf00      	nop
 802439a:	370c      	adds	r7, #12
 802439c:	46bd      	mov	sp, r7
 802439e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80243a0:	20008378 	.word	0x20008378
 80243a4:	20008382 	.word	0x20008382

080243a8 <FZ3387_verifyPassword>:
/*!
 @brief  Verifies the sensors' access password (default password is 0x0000000). A good way to also check if the sensors is active and responding
 @returns True if password is correct
 */
/**************************************************************************/
uint8_t FZ3387_verifyPassword(void) {
 80243a8:	b580      	push	{r7, lr}
 80243aa:	af00      	add	r7, sp, #0
    return FZ3387_checkPassword() == FINGERPRINT_OK;
 80243ac:	f000 f808 	bl	80243c0 <FZ3387_checkPassword>
 80243b0:	4603      	mov	r3, r0
 80243b2:	2b00      	cmp	r3, #0
 80243b4:	bf0c      	ite	eq
 80243b6:	2301      	moveq	r3, #1
 80243b8:	2300      	movne	r3, #0
 80243ba:	b2db      	uxtb	r3, r3
}
 80243bc:	4618      	mov	r0, r3
 80243be:	bd80      	pop	{r7, pc}

080243c0 <FZ3387_checkPassword>:

uint8_t FZ3387_checkPassword(void) {
 80243c0:	b580      	push	{r7, lr}
 80243c2:	b082      	sub	sp, #8
 80243c4:	af00      	add	r7, sp, #0
    uint8_t data[] = {
 80243c6:	2313      	movs	r3, #19
 80243c8:	703b      	strb	r3, [r7, #0]
 80243ca:	2300      	movs	r3, #0
 80243cc:	707b      	strb	r3, [r7, #1]
 80243ce:	2300      	movs	r3, #0
 80243d0:	70bb      	strb	r3, [r7, #2]
 80243d2:	2300      	movs	r3, #0
 80243d4:	70fb      	strb	r3, [r7, #3]
 80243d6:	2300      	movs	r3, #0
 80243d8:	713b      	strb	r3, [r7, #4]
            (uint8_t) (FINGERPRINT_PASSWORD >> 16),
            (uint8_t) (FINGERPRINT_PASSWORD >> 8),
            (uint8_t) (FINGERPRINT_PASSWORD & 0xFF)
    };

    FZ3387_SendCmdPacket(data, sizeof(data));
 80243da:	463b      	mov	r3, r7
 80243dc:	2105      	movs	r1, #5
 80243de:	4618      	mov	r0, r3
 80243e0:	f7ff ff78 	bl	80242d4 <FZ3387_SendCmdPacket>
    if (packet.data[0] == FINGERPRINT_OK)
 80243e4:	4b05      	ldr	r3, [pc, #20]	; (80243fc <FZ3387_checkPassword+0x3c>)
 80243e6:	7a9b      	ldrb	r3, [r3, #10]
 80243e8:	2b00      	cmp	r3, #0
 80243ea:	d101      	bne.n	80243f0 <FZ3387_checkPassword+0x30>
        return FINGERPRINT_OK;
 80243ec:	2300      	movs	r3, #0
 80243ee:	e000      	b.n	80243f2 <FZ3387_checkPassword+0x32>
    else
        return FINGERPRINT_PACKETRECIEVEERR;
 80243f0:	2301      	movs	r3, #1
}
 80243f2:	4618      	mov	r0, r3
 80243f4:	3708      	adds	r7, #8
 80243f6:	46bd      	mov	sp, r7
 80243f8:	bd80      	pop	{r7, pc}
 80243fa:	bf00      	nop
 80243fc:	20008378 	.word	0x20008378

08024400 <FZ3387_getImage>:
 @returns <code>FINGERPRINT_NOFINGER</code> if no finger detected
 @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
 @returns <code>FINGERPRINT_IMAGEFAIL</code> on imaging error
 */
/**************************************************************************/
uint8_t FZ3387_getImage(void) {
 8024400:	b580      	push	{r7, lr}
 8024402:	b082      	sub	sp, #8
 8024404:	af00      	add	r7, sp, #0
    uint8_t data[] = {
 8024406:	2301      	movs	r3, #1
 8024408:	713b      	strb	r3, [r7, #4]
    FINGERPRINT_GETIMAGE
    };
    return FZ3387_SendCmdPacket(data, sizeof(data));
 802440a:	1d3b      	adds	r3, r7, #4
 802440c:	2101      	movs	r1, #1
 802440e:	4618      	mov	r0, r3
 8024410:	f7ff ff60 	bl	80242d4 <FZ3387_SendCmdPacket>
 8024414:	4603      	mov	r3, r0
}
 8024416:	4618      	mov	r0, r3
 8024418:	3708      	adds	r7, #8
 802441a:	46bd      	mov	sp, r7
 802441c:	bd80      	pop	{r7, pc}

0802441e <FZ3387_image2Tz>:
 @returns <code>FINGERPRINT_IMAGEMESS</code> if image is too messy
 @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
 @returns <code>FINGERPRINT_FEATUREFAIL</code> on failure to identify fingerprint features
 @returns <code>FINGERPRINT_INVALIDIMAGE</code> on failure to identify fingerprint features
 */
uint8_t FZ3387_image2Tz(uint8_t slot) {
 802441e:	b580      	push	{r7, lr}
 8024420:	b084      	sub	sp, #16
 8024422:	af00      	add	r7, sp, #0
 8024424:	4603      	mov	r3, r0
 8024426:	71fb      	strb	r3, [r7, #7]
    uint8_t data[] = {
 8024428:	2302      	movs	r3, #2
 802442a:	733b      	strb	r3, [r7, #12]
 802442c:	79fb      	ldrb	r3, [r7, #7]
 802442e:	737b      	strb	r3, [r7, #13]
    FINGERPRINT_IMAGE2TZ,
            slot
    };
    return FZ3387_SendCmdPacket(data, sizeof(data));
 8024430:	f107 030c 	add.w	r3, r7, #12
 8024434:	2102      	movs	r1, #2
 8024436:	4618      	mov	r0, r3
 8024438:	f7ff ff4c 	bl	80242d4 <FZ3387_SendCmdPacket>
 802443c:	4603      	mov	r3, r0
}
 802443e:	4618      	mov	r0, r3
 8024440:	3710      	adds	r7, #16
 8024442:	46bd      	mov	sp, r7
 8024444:	bd80      	pop	{r7, pc}

08024446 <FZ3387_createModel>:
 @brief   Ask the sensor to take two print feature template and create a model
 @returns <code>FINGERPRINT_OK</code> on success
 @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
 @returns <code>FINGERPRINT_ENROLLMISMATCH</code> on mismatch of fingerprints
 */
uint8_t FZ3387_createModel(void) {
 8024446:	b580      	push	{r7, lr}
 8024448:	b082      	sub	sp, #8
 802444a:	af00      	add	r7, sp, #0
    uint8_t data[] = {
 802444c:	2305      	movs	r3, #5
 802444e:	713b      	strb	r3, [r7, #4]
    FINGERPRINT_REGMODEL
    };
    return FZ3387_SendCmdPacket(data, sizeof(data));
 8024450:	1d3b      	adds	r3, r7, #4
 8024452:	2101      	movs	r1, #1
 8024454:	4618      	mov	r0, r3
 8024456:	f7ff ff3d 	bl	80242d4 <FZ3387_SendCmdPacket>
 802445a:	4603      	mov	r3, r0
}
 802445c:	4618      	mov	r0, r3
 802445e:	3708      	adds	r7, #8
 8024460:	46bd      	mov	sp, r7
 8024462:	bd80      	pop	{r7, pc}

08024464 <FZ3387_storeModel>:
 @returns <code>FINGERPRINT_OK</code> on success
 @returns <code>FINGERPRINT_BADLOCATION</code> if the location is invalid
 @returns <code>FINGERPRINT_FLASHERR</code> if the model couldn't be written to flash memory
 @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
 */
uint8_t FZ3387_storeModel(uint16_t location) {
 8024464:	b580      	push	{r7, lr}
 8024466:	b084      	sub	sp, #16
 8024468:	af00      	add	r7, sp, #0
 802446a:	4603      	mov	r3, r0
 802446c:	80fb      	strh	r3, [r7, #6]
    uint8_t data[] = {
 802446e:	2306      	movs	r3, #6
 8024470:	733b      	strb	r3, [r7, #12]
 8024472:	2301      	movs	r3, #1
 8024474:	737b      	strb	r3, [r7, #13]
    FINGERPRINT_STORE,
            0x01,
            (uint8_t) (location >> 8),
 8024476:	88fb      	ldrh	r3, [r7, #6]
 8024478:	0a1b      	lsrs	r3, r3, #8
 802447a:	b29b      	uxth	r3, r3
 802447c:	b2db      	uxtb	r3, r3
    uint8_t data[] = {
 802447e:	73bb      	strb	r3, [r7, #14]
            (uint8_t) (location & 0xFF)
 8024480:	88fb      	ldrh	r3, [r7, #6]
 8024482:	b2db      	uxtb	r3, r3
    uint8_t data[] = {
 8024484:	73fb      	strb	r3, [r7, #15]
    };
    return FZ3387_SendCmdPacket(data, sizeof(data));
 8024486:	f107 030c 	add.w	r3, r7, #12
 802448a:	2104      	movs	r1, #4
 802448c:	4618      	mov	r0, r3
 802448e:	f7ff ff21 	bl	80242d4 <FZ3387_SendCmdPacket>
 8024492:	4603      	mov	r3, r0
}
 8024494:	4618      	mov	r0, r3
 8024496:	3710      	adds	r7, #16
 8024498:	46bd      	mov	sp, r7
 802449a:	bd80      	pop	{r7, pc}

0802449c <FZ3387_deleteModel>:
 @returns <code>FINGERPRINT_OK</code> on success
 @returns <code>FINGERPRINT_BADLOCATION</code> if the location is invalid
 @returns <code>FINGERPRINT_FLASHERR</code> if the model couldn't be written to flash memory
 @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
 */
uint8_t FZ3387_deleteModel(uint16_t location) {
 802449c:	b580      	push	{r7, lr}
 802449e:	b084      	sub	sp, #16
 80244a0:	af00      	add	r7, sp, #0
 80244a2:	4603      	mov	r3, r0
 80244a4:	80fb      	strh	r3, [r7, #6]
    uint8_t data[] = {
 80244a6:	230c      	movs	r3, #12
 80244a8:	723b      	strb	r3, [r7, #8]
    FINGERPRINT_DELETE,
            (uint8_t) (location >> 8),
 80244aa:	88fb      	ldrh	r3, [r7, #6]
 80244ac:	0a1b      	lsrs	r3, r3, #8
 80244ae:	b29b      	uxth	r3, r3
 80244b0:	b2db      	uxtb	r3, r3
    uint8_t data[] = {
 80244b2:	727b      	strb	r3, [r7, #9]
            (uint8_t) (location & 0xFF),
 80244b4:	88fb      	ldrh	r3, [r7, #6]
 80244b6:	b2db      	uxtb	r3, r3
    uint8_t data[] = {
 80244b8:	72bb      	strb	r3, [r7, #10]
 80244ba:	2300      	movs	r3, #0
 80244bc:	72fb      	strb	r3, [r7, #11]
 80244be:	2301      	movs	r3, #1
 80244c0:	733b      	strb	r3, [r7, #12]
            0x00,
            0x01
    };
    return FZ3387_SendCmdPacket(data, sizeof(data));
 80244c2:	f107 0308 	add.w	r3, r7, #8
 80244c6:	2105      	movs	r1, #5
 80244c8:	4618      	mov	r0, r3
 80244ca:	f7ff ff03 	bl	80242d4 <FZ3387_SendCmdPacket>
 80244ce:	4603      	mov	r3, r0
}
 80244d0:	4618      	mov	r0, r3
 80244d2:	3710      	adds	r7, #16
 80244d4:	46bd      	mov	sp, r7
 80244d6:	bd80      	pop	{r7, pc}

080244d8 <FZ3387_emptyDatabase>:
 @returns <code>FINGERPRINT_OK</code> on success
 @returns <code>FINGERPRINT_BADLOCATION</code> if the location is invalid
 @returns <code>FINGERPRINT_FLASHERR</code> if the model couldn't be written to flash memory
 @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
 */
uint8_t FZ3387_emptyDatabase(void) {
 80244d8:	b580      	push	{r7, lr}
 80244da:	b082      	sub	sp, #8
 80244dc:	af00      	add	r7, sp, #0
    uint8_t data[] = {
 80244de:	230d      	movs	r3, #13
 80244e0:	713b      	strb	r3, [r7, #4]
    FINGERPRINT_EMPTY
    };
    return FZ3387_SendCmdPacket(data, sizeof(data));
 80244e2:	1d3b      	adds	r3, r7, #4
 80244e4:	2101      	movs	r1, #1
 80244e6:	4618      	mov	r0, r3
 80244e8:	f7ff fef4 	bl	80242d4 <FZ3387_SendCmdPacket>
 80244ec:	4603      	mov	r3, r0
}
 80244ee:	4618      	mov	r0, r3
 80244f0:	3708      	adds	r7, #8
 80244f2:	46bd      	mov	sp, r7
 80244f4:	bd80      	pop	{r7, pc}
	...

080244f8 <FZ3387_fingerFastSearch>:
 @returns <code>FINGERPRINT_OK</code> on fingerprint match success
 @returns <code>FINGERPRINT_NOTFOUND</code> no match made
 @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
 */
/**************************************************************************/
uint8_t FZ3387_fingerFastSearch(void) {
 80244f8:	b580      	push	{r7, lr}
 80244fa:	b082      	sub	sp, #8
 80244fc:	af00      	add	r7, sp, #0
    uint8_t data[] = {
 80244fe:	4a21      	ldr	r2, [pc, #132]	; (8024584 <FZ3387_fingerFastSearch+0x8c>)
 8024500:	463b      	mov	r3, r7
 8024502:	e892 0003 	ldmia.w	r2, {r0, r1}
 8024506:	6018      	str	r0, [r3, #0]
 8024508:	3304      	adds	r3, #4
 802450a:	8019      	strh	r1, [r3, #0]
            0x00,
            0x00,
            0xA3
    };
    // high speed search of slot #1 starting at page 0x0000 and page #0x00A3
    FZ3387_SendCmdPacket(data, sizeof(data));
 802450c:	463b      	mov	r3, r7
 802450e:	2106      	movs	r1, #6
 8024510:	4618      	mov	r0, r3
 8024512:	f7ff fedf 	bl	80242d4 <FZ3387_SendCmdPacket>
    finger.id = 0xFFFF;
 8024516:	4b1c      	ldr	r3, [pc, #112]	; (8024588 <FZ3387_fingerFastSearch+0x90>)
 8024518:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802451c:	801a      	strh	r2, [r3, #0]
    finger.confidence = 0xFFFF;
 802451e:	4b1a      	ldr	r3, [pc, #104]	; (8024588 <FZ3387_fingerFastSearch+0x90>)
 8024520:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8024524:	805a      	strh	r2, [r3, #2]

    finger.id = packet.data[1];
 8024526:	4b19      	ldr	r3, [pc, #100]	; (802458c <FZ3387_fingerFastSearch+0x94>)
 8024528:	7adb      	ldrb	r3, [r3, #11]
 802452a:	b29a      	uxth	r2, r3
 802452c:	4b16      	ldr	r3, [pc, #88]	; (8024588 <FZ3387_fingerFastSearch+0x90>)
 802452e:	801a      	strh	r2, [r3, #0]
    finger.id <<= 8;
 8024530:	4b15      	ldr	r3, [pc, #84]	; (8024588 <FZ3387_fingerFastSearch+0x90>)
 8024532:	881b      	ldrh	r3, [r3, #0]
 8024534:	021b      	lsls	r3, r3, #8
 8024536:	b29a      	uxth	r2, r3
 8024538:	4b13      	ldr	r3, [pc, #76]	; (8024588 <FZ3387_fingerFastSearch+0x90>)
 802453a:	801a      	strh	r2, [r3, #0]
    finger.id |= packet.data[2];
 802453c:	4b12      	ldr	r3, [pc, #72]	; (8024588 <FZ3387_fingerFastSearch+0x90>)
 802453e:	881a      	ldrh	r2, [r3, #0]
 8024540:	4b12      	ldr	r3, [pc, #72]	; (802458c <FZ3387_fingerFastSearch+0x94>)
 8024542:	7b1b      	ldrb	r3, [r3, #12]
 8024544:	b29b      	uxth	r3, r3
 8024546:	4313      	orrs	r3, r2
 8024548:	b29a      	uxth	r2, r3
 802454a:	4b0f      	ldr	r3, [pc, #60]	; (8024588 <FZ3387_fingerFastSearch+0x90>)
 802454c:	801a      	strh	r2, [r3, #0]

    finger.confidence = packet.data[3];
 802454e:	4b0f      	ldr	r3, [pc, #60]	; (802458c <FZ3387_fingerFastSearch+0x94>)
 8024550:	7b5b      	ldrb	r3, [r3, #13]
 8024552:	b29a      	uxth	r2, r3
 8024554:	4b0c      	ldr	r3, [pc, #48]	; (8024588 <FZ3387_fingerFastSearch+0x90>)
 8024556:	805a      	strh	r2, [r3, #2]
    finger.confidence <<= 8;
 8024558:	4b0b      	ldr	r3, [pc, #44]	; (8024588 <FZ3387_fingerFastSearch+0x90>)
 802455a:	885b      	ldrh	r3, [r3, #2]
 802455c:	021b      	lsls	r3, r3, #8
 802455e:	b29a      	uxth	r2, r3
 8024560:	4b09      	ldr	r3, [pc, #36]	; (8024588 <FZ3387_fingerFastSearch+0x90>)
 8024562:	805a      	strh	r2, [r3, #2]
    finger.confidence |= packet.data[4];
 8024564:	4b08      	ldr	r3, [pc, #32]	; (8024588 <FZ3387_fingerFastSearch+0x90>)
 8024566:	885a      	ldrh	r2, [r3, #2]
 8024568:	4b08      	ldr	r3, [pc, #32]	; (802458c <FZ3387_fingerFastSearch+0x94>)
 802456a:	7b9b      	ldrb	r3, [r3, #14]
 802456c:	b29b      	uxth	r3, r3
 802456e:	4313      	orrs	r3, r2
 8024570:	b29a      	uxth	r2, r3
 8024572:	4b05      	ldr	r3, [pc, #20]	; (8024588 <FZ3387_fingerFastSearch+0x90>)
 8024574:	805a      	strh	r2, [r3, #2]

    return packet.data[0];
 8024576:	4b05      	ldr	r3, [pc, #20]	; (802458c <FZ3387_fingerFastSearch+0x94>)
 8024578:	7a9b      	ldrb	r3, [r3, #10]
}
 802457a:	4618      	mov	r0, r3
 802457c:	3708      	adds	r7, #8
 802457e:	46bd      	mov	sp, r7
 8024580:	bd80      	pop	{r7, pc}
 8024582:	bf00      	nop
 8024584:	0804350c 	.word	0x0804350c
 8024588:	200083c4 	.word	0x200083c4
 802458c:	20008378 	.word	0x20008378

08024590 <FZ3387_getTemplateCount>:
 @brief   Ask the sensor for the number of templates stored in memory. The number is stored in <b>fingerTemplateCount</b> on success.
 @returns <code>FINGERPRINT_OK</code> on success
 @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
 */
/**************************************************************************/
uint8_t FZ3387_getTemplateCount(void) {
 8024590:	b580      	push	{r7, lr}
 8024592:	b082      	sub	sp, #8
 8024594:	af00      	add	r7, sp, #0
    uint8_t data[] = {
 8024596:	231d      	movs	r3, #29
 8024598:	713b      	strb	r3, [r7, #4]
    FINGERPRINT_TEMPLATECOUNT
    };
    FZ3387_SendCmdPacket(data, sizeof(data));
 802459a:	1d3b      	adds	r3, r7, #4
 802459c:	2101      	movs	r1, #1
 802459e:	4618      	mov	r0, r3
 80245a0:	f7ff fe98 	bl	80242d4 <FZ3387_SendCmdPacket>

    finger.templateCount = packet.data[1];
 80245a4:	4b0c      	ldr	r3, [pc, #48]	; (80245d8 <FZ3387_getTemplateCount+0x48>)
 80245a6:	7adb      	ldrb	r3, [r3, #11]
 80245a8:	b29a      	uxth	r2, r3
 80245aa:	4b0c      	ldr	r3, [pc, #48]	; (80245dc <FZ3387_getTemplateCount+0x4c>)
 80245ac:	809a      	strh	r2, [r3, #4]
    finger.templateCount <<= 8;
 80245ae:	4b0b      	ldr	r3, [pc, #44]	; (80245dc <FZ3387_getTemplateCount+0x4c>)
 80245b0:	889b      	ldrh	r3, [r3, #4]
 80245b2:	021b      	lsls	r3, r3, #8
 80245b4:	b29a      	uxth	r2, r3
 80245b6:	4b09      	ldr	r3, [pc, #36]	; (80245dc <FZ3387_getTemplateCount+0x4c>)
 80245b8:	809a      	strh	r2, [r3, #4]
    finger.templateCount |= packet.data[2];
 80245ba:	4b08      	ldr	r3, [pc, #32]	; (80245dc <FZ3387_getTemplateCount+0x4c>)
 80245bc:	889a      	ldrh	r2, [r3, #4]
 80245be:	4b06      	ldr	r3, [pc, #24]	; (80245d8 <FZ3387_getTemplateCount+0x48>)
 80245c0:	7b1b      	ldrb	r3, [r3, #12]
 80245c2:	b29b      	uxth	r3, r3
 80245c4:	4313      	orrs	r3, r2
 80245c6:	b29a      	uxth	r2, r3
 80245c8:	4b04      	ldr	r3, [pc, #16]	; (80245dc <FZ3387_getTemplateCount+0x4c>)
 80245ca:	809a      	strh	r2, [r3, #4]

    return packet.data[0];
 80245cc:	4b02      	ldr	r3, [pc, #8]	; (80245d8 <FZ3387_getTemplateCount+0x48>)
 80245ce:	7a9b      	ldrb	r3, [r3, #10]
}
 80245d0:	4618      	mov	r0, r3
 80245d2:	3708      	adds	r7, #8
 80245d4:	46bd      	mov	sp, r7
 80245d6:	bd80      	pop	{r7, pc}
 80245d8:	20008378 	.word	0x20008378
 80245dc:	200083c4 	.word	0x200083c4

080245e0 <MPU6050_Init>:
#define MPU6050_ACCE_SENS_8			((float) 4096)
#define MPU6050_ACCE_SENS_16		((float) 2048)

/* Public functions implementation ---------------------------------------------*/
MPU6050_Result MPU6050_Init(I2C_HandleTypeDef *I2Cx, MPU6050 *DataStruct, MPU6050_Device DeviceNumber,
		MPU6050_Accelerometer AccelerometerSensitivity, MPU6050_Gyroscope GyroscopeSensitivity) {
 80245e0:	b580      	push	{r7, lr}
 80245e2:	b08c      	sub	sp, #48	; 0x30
 80245e4:	af04      	add	r7, sp, #16
 80245e6:	60f8      	str	r0, [r7, #12]
 80245e8:	60b9      	str	r1, [r7, #8]
 80245ea:	4611      	mov	r1, r2
 80245ec:	461a      	mov	r2, r3
 80245ee:	460b      	mov	r3, r1
 80245f0:	71fb      	strb	r3, [r7, #7]
 80245f2:	4613      	mov	r3, r2
 80245f4:	71bb      	strb	r3, [r7, #6]
	I2C_HandleTypeDef *Handle = I2Cx;
 80245f6:	68fb      	ldr	r3, [r7, #12]
 80245f8:	61fb      	str	r3, [r7, #28]
	uint8_t d[2], temp;

	/* Format I2C address */
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t) DeviceNumber;
 80245fa:	79fb      	ldrb	r3, [r7, #7]
 80245fc:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8024600:	b2da      	uxtb	r2, r3
 8024602:	68bb      	ldr	r3, [r7, #8]
 8024604:	701a      	strb	r2, [r3, #0]
	uint8_t address = DataStruct->Address;
 8024606:	68bb      	ldr	r3, [r7, #8]
 8024608:	781b      	ldrb	r3, [r3, #0]
 802460a:	76fb      	strb	r3, [r7, #27]

	/* Check if device is connected */
	if (HAL_I2C_IsDeviceReady(Handle, address, 2, 5) != HAL_OK) {
 802460c:	7efb      	ldrb	r3, [r7, #27]
 802460e:	b299      	uxth	r1, r3
 8024610:	2305      	movs	r3, #5
 8024612:	2202      	movs	r2, #2
 8024614:	69f8      	ldr	r0, [r7, #28]
 8024616:	f00c faab 	bl	8030b70 <HAL_I2C_IsDeviceReady>
 802461a:	4603      	mov	r3, r0
 802461c:	2b00      	cmp	r3, #0
 802461e:	d001      	beq.n	8024624 <MPU6050_Init+0x44>
		return MPU6050_Result_Error;
 8024620:	2301      	movs	r3, #1
 8024622:	e03f      	b.n	80246a4 <MPU6050_Init+0xc4>
	}

	/* Check who am I */
	//------------------
	/* Send address */
	if (HAL_I2C_Mem_Read(Handle, address, MPU6050_WHO_AM_I, 1, &temp, 1, 1000) != HAL_OK) {
 8024624:	7efb      	ldrb	r3, [r7, #27]
 8024626:	b299      	uxth	r1, r3
 8024628:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802462c:	9302      	str	r3, [sp, #8]
 802462e:	2301      	movs	r3, #1
 8024630:	9301      	str	r3, [sp, #4]
 8024632:	f107 0317 	add.w	r3, r7, #23
 8024636:	9300      	str	r3, [sp, #0]
 8024638:	2301      	movs	r3, #1
 802463a:	2275      	movs	r2, #117	; 0x75
 802463c:	69f8      	ldr	r0, [r7, #28]
 802463e:	f00c f871 	bl	8030724 <HAL_I2C_Mem_Read>
 8024642:	4603      	mov	r3, r0
 8024644:	2b00      	cmp	r3, #0
 8024646:	d001      	beq.n	802464c <MPU6050_Init+0x6c>
		return MPU6050_Result_Error;
 8024648:	2301      	movs	r3, #1
 802464a:	e02b      	b.n	80246a4 <MPU6050_Init+0xc4>
	}

	/* Checking */
	if (temp != MPU6050_I_AM) {
 802464c:	7dfb      	ldrb	r3, [r7, #23]
 802464e:	2b68      	cmp	r3, #104	; 0x68
 8024650:	d001      	beq.n	8024656 <MPU6050_Init+0x76>
		/* Return error */
		return MPU6050_Result_DeviceInvalid;
 8024652:	2303      	movs	r3, #3
 8024654:	e026      	b.n	80246a4 <MPU6050_Init+0xc4>
	//------------------

	/* Wakeup MPU6050 */
	//------------------
	/* Format array to send */
	d[0] = MPU6050_PWR_MGMT_1;
 8024656:	236b      	movs	r3, #107	; 0x6b
 8024658:	763b      	strb	r3, [r7, #24]
	d[1] = 0x01;
 802465a:	2301      	movs	r3, #1
 802465c:	767b      	strb	r3, [r7, #25]

	/* Try to transmit via I2C */
	if (HAL_I2C_Master_Transmit(Handle, address, d, 2, 1000) != HAL_OK) {
 802465e:	7efb      	ldrb	r3, [r7, #27]
 8024660:	b299      	uxth	r1, r3
 8024662:	f107 0218 	add.w	r2, r7, #24
 8024666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802466a:	9300      	str	r3, [sp, #0]
 802466c:	2302      	movs	r3, #2
 802466e:	69f8      	ldr	r0, [r7, #28]
 8024670:	f00b fe60 	bl	8030334 <HAL_I2C_Master_Transmit>
 8024674:	4603      	mov	r3, r0
 8024676:	2b00      	cmp	r3, #0
 8024678:	d001      	beq.n	802467e <MPU6050_Init+0x9e>
		return MPU6050_Result_Error;
 802467a:	2301      	movs	r3, #1
 802467c:	e012      	b.n	80246a4 <MPU6050_Init+0xc4>
	}
	//------------------

	/* Set sample rate to 1kHz */
	MPU6050_SetDataRate(I2Cx, DataStruct, MPU6050_DataRate_8KHz);
 802467e:	2200      	movs	r2, #0
 8024680:	68b9      	ldr	r1, [r7, #8]
 8024682:	68f8      	ldr	r0, [r7, #12]
 8024684:	f000 f812 	bl	80246ac <MPU6050_SetDataRate>

	/* Config accelerometer */
	MPU6050_SetAccelerometer(I2Cx, DataStruct, AccelerometerSensitivity);
 8024688:	79bb      	ldrb	r3, [r7, #6]
 802468a:	461a      	mov	r2, r3
 802468c:	68b9      	ldr	r1, [r7, #8]
 802468e:	68f8      	ldr	r0, [r7, #12]
 8024690:	f000 f830 	bl	80246f4 <MPU6050_SetAccelerometer>

	/* Config Gyroscope */
	MPU6050_SetGyroscope(I2Cx, DataStruct, GyroscopeSensitivity);
 8024694:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8024698:	461a      	mov	r2, r3
 802469a:	68b9      	ldr	r1, [r7, #8]
 802469c:	68f8      	ldr	r0, [r7, #12]
 802469e:	f000 f88f 	bl	80247c0 <MPU6050_SetGyroscope>

	/* Return OK */
	return MPU6050_Result_Ok;
 80246a2:	2300      	movs	r3, #0
}
 80246a4:	4618      	mov	r0, r3
 80246a6:	3720      	adds	r7, #32
 80246a8:	46bd      	mov	sp, r7
 80246aa:	bd80      	pop	{r7, pc}

080246ac <MPU6050_SetDataRate>:

MPU6050_Result MPU6050_SetDataRate(I2C_HandleTypeDef *I2Cx, MPU6050 *DataStruct, uint8_t rate) {
 80246ac:	b580      	push	{r7, lr}
 80246ae:	b08a      	sub	sp, #40	; 0x28
 80246b0:	af04      	add	r7, sp, #16
 80246b2:	60f8      	str	r0, [r7, #12]
 80246b4:	60b9      	str	r1, [r7, #8]
 80246b6:	4613      	mov	r3, r2
 80246b8:	71fb      	strb	r3, [r7, #7]
	I2C_HandleTypeDef *Handle = I2Cx;
 80246ba:	68fb      	ldr	r3, [r7, #12]
 80246bc:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 80246be:	68bb      	ldr	r3, [r7, #8]
 80246c0:	781b      	ldrb	r3, [r3, #0]
 80246c2:	74fb      	strb	r3, [r7, #19]
	/* Format array to send */
	//  d[0] = MPU6050_SMPLRT_DIV;
	//  d[1] = rate;
	/* Set data sample rate */
	while (HAL_I2C_Mem_Write(Handle, address, MPU6050_SMPLRT_DIV, 1, &rate, 1, 1000) != HAL_OK)
 80246c4:	bf00      	nop
 80246c6:	7cfb      	ldrb	r3, [r7, #19]
 80246c8:	b299      	uxth	r1, r3
 80246ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80246ce:	9302      	str	r3, [sp, #8]
 80246d0:	2301      	movs	r3, #1
 80246d2:	9301      	str	r3, [sp, #4]
 80246d4:	1dfb      	adds	r3, r7, #7
 80246d6:	9300      	str	r3, [sp, #0]
 80246d8:	2301      	movs	r3, #1
 80246da:	2219      	movs	r2, #25
 80246dc:	6978      	ldr	r0, [r7, #20]
 80246de:	f00b ff27 	bl	8030530 <HAL_I2C_Mem_Write>
 80246e2:	4603      	mov	r3, r0
 80246e4:	2b00      	cmp	r3, #0
 80246e6:	d1ee      	bne.n	80246c6 <MPU6050_SetDataRate+0x1a>
	//  if (HAL_I2C_Master_Transmit(Handle, (uint16_t) address, (uint8_t*) d, 2, 1000) != HAL_OK) {
	//    return MPU6050_Result_Error;
	//  }

	/* Return OK */
	return MPU6050_Result_Ok;
 80246e8:	2300      	movs	r3, #0
}
 80246ea:	4618      	mov	r0, r3
 80246ec:	3718      	adds	r7, #24
 80246ee:	46bd      	mov	sp, r7
 80246f0:	bd80      	pop	{r7, pc}
	...

080246f4 <MPU6050_SetAccelerometer>:

MPU6050_Result MPU6050_SetAccelerometer(I2C_HandleTypeDef *I2Cx, MPU6050 *DataStruct,
		MPU6050_Accelerometer AccelerometerSensitivity) {
 80246f4:	b580      	push	{r7, lr}
 80246f6:	b08a      	sub	sp, #40	; 0x28
 80246f8:	af04      	add	r7, sp, #16
 80246fa:	60f8      	str	r0, [r7, #12]
 80246fc:	60b9      	str	r1, [r7, #8]
 80246fe:	4613      	mov	r3, r2
 8024700:	71fb      	strb	r3, [r7, #7]
	I2C_HandleTypeDef *Handle = I2Cx;
 8024702:	68fb      	ldr	r3, [r7, #12]
 8024704:	617b      	str	r3, [r7, #20]
	uint8_t data, address = DataStruct->Address;
 8024706:	68bb      	ldr	r3, [r7, #8]
 8024708:	781b      	ldrb	r3, [r3, #0]
 802470a:	74fb      	strb	r3, [r7, #19]

	/* Config accelerometer */
	while (HAL_I2C_Mem_Read(Handle, address, MPU6050_ACCEL_CONFIG, 1, &data, 1, 1000) != HAL_OK)
 802470c:	bf00      	nop
 802470e:	7cfb      	ldrb	r3, [r7, #19]
 8024710:	b299      	uxth	r1, r3
 8024712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8024716:	9302      	str	r3, [sp, #8]
 8024718:	2301      	movs	r3, #1
 802471a:	9301      	str	r3, [sp, #4]
 802471c:	f107 0312 	add.w	r3, r7, #18
 8024720:	9300      	str	r3, [sp, #0]
 8024722:	2301      	movs	r3, #1
 8024724:	221c      	movs	r2, #28
 8024726:	6978      	ldr	r0, [r7, #20]
 8024728:	f00b fffc 	bl	8030724 <HAL_I2C_Mem_Read>
 802472c:	4603      	mov	r3, r0
 802472e:	2b00      	cmp	r3, #0
 8024730:	d1ed      	bne.n	802470e <MPU6050_SetAccelerometer+0x1a>
	//  while (HAL_I2C_Master_Receive(Handle, (uint16_t) address, &data, 1, 1000) != HAL_OK)
	//    ;
	//  /*{
	//   return MPU6050_Result_Error;
	//   }*/
	data = (data & 0xE7) | (uint8_t) AccelerometerSensitivity << 3;
 8024732:	7cbb      	ldrb	r3, [r7, #18]
 8024734:	b25b      	sxtb	r3, r3
 8024736:	f023 0318 	bic.w	r3, r3, #24
 802473a:	b25a      	sxtb	r2, r3
 802473c:	79fb      	ldrb	r3, [r7, #7]
 802473e:	00db      	lsls	r3, r3, #3
 8024740:	b25b      	sxtb	r3, r3
 8024742:	4313      	orrs	r3, r2
 8024744:	b25b      	sxtb	r3, r3
 8024746:	b2db      	uxtb	r3, r3
 8024748:	74bb      	strb	r3, [r7, #18]
	while (HAL_I2C_Mem_Write(Handle, address, MPU6050_ACCEL_CONFIG, 1, &data, 1, 1000) != HAL_OK)
 802474a:	bf00      	nop
 802474c:	7cfb      	ldrb	r3, [r7, #19]
 802474e:	b299      	uxth	r1, r3
 8024750:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8024754:	9302      	str	r3, [sp, #8]
 8024756:	2301      	movs	r3, #1
 8024758:	9301      	str	r3, [sp, #4]
 802475a:	f107 0312 	add.w	r3, r7, #18
 802475e:	9300      	str	r3, [sp, #0]
 8024760:	2301      	movs	r3, #1
 8024762:	221c      	movs	r2, #28
 8024764:	6978      	ldr	r0, [r7, #20]
 8024766:	f00b fee3 	bl	8030530 <HAL_I2C_Mem_Write>
 802476a:	4603      	mov	r3, r0
 802476c:	2b00      	cmp	r3, #0
 802476e:	d1ed      	bne.n	802474c <MPU6050_SetAccelerometer+0x58>
	//  /*{
	//   return MPU6050_Result_Error;
	//   }*/

	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (AccelerometerSensitivity) {
 8024770:	79fb      	ldrb	r3, [r7, #7]
 8024772:	2b03      	cmp	r3, #3
 8024774:	d81e      	bhi.n	80247b4 <MPU6050_SetAccelerometer+0xc0>
 8024776:	a201      	add	r2, pc, #4	; (adr r2, 802477c <MPU6050_SetAccelerometer+0x88>)
 8024778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802477c:	0802478d 	.word	0x0802478d
 8024780:	08024797 	.word	0x08024797
 8024784:	080247a1 	.word	0x080247a1
 8024788:	080247ab 	.word	0x080247ab
		case MPU6050_Accelerometer_2G:
			DataStruct->Acce_Mult = (float) 1 / MPU6050_ACCE_SENS_2;
 802478c:	68bb      	ldr	r3, [r7, #8]
 802478e:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8024792:	609a      	str	r2, [r3, #8]
			break;
 8024794:	e00f      	b.n	80247b6 <MPU6050_SetAccelerometer+0xc2>
		case MPU6050_Accelerometer_4G:
			DataStruct->Acce_Mult = (float) 1 / MPU6050_ACCE_SENS_4;
 8024796:	68bb      	ldr	r3, [r7, #8]
 8024798:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 802479c:	609a      	str	r2, [r3, #8]
			break;
 802479e:	e00a      	b.n	80247b6 <MPU6050_SetAccelerometer+0xc2>
		case MPU6050_Accelerometer_8G:
			DataStruct->Acce_Mult = (float) 1 / MPU6050_ACCE_SENS_8;
 80247a0:	68bb      	ldr	r3, [r7, #8]
 80247a2:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80247a6:	609a      	str	r2, [r3, #8]
			break;
 80247a8:	e005      	b.n	80247b6 <MPU6050_SetAccelerometer+0xc2>
		case MPU6050_Accelerometer_16G:
			DataStruct->Acce_Mult = (float) 1 / MPU6050_ACCE_SENS_16;
 80247aa:	68bb      	ldr	r3, [r7, #8]
 80247ac:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 80247b0:	609a      	str	r2, [r3, #8]
			break;
 80247b2:	e000      	b.n	80247b6 <MPU6050_SetAccelerometer+0xc2>
		default:
			break;
 80247b4:	bf00      	nop
	}

	/* Return OK */
	return MPU6050_Result_Ok;
 80247b6:	2300      	movs	r3, #0
}
 80247b8:	4618      	mov	r0, r3
 80247ba:	3718      	adds	r7, #24
 80247bc:	46bd      	mov	sp, r7
 80247be:	bd80      	pop	{r7, pc}

080247c0 <MPU6050_SetGyroscope>:

MPU6050_Result MPU6050_SetGyroscope(I2C_HandleTypeDef *I2Cx, MPU6050 *DataStruct,
		MPU6050_Gyroscope GyroscopeSensitivity) {
 80247c0:	b580      	push	{r7, lr}
 80247c2:	b08a      	sub	sp, #40	; 0x28
 80247c4:	af04      	add	r7, sp, #16
 80247c6:	60f8      	str	r0, [r7, #12]
 80247c8:	60b9      	str	r1, [r7, #8]
 80247ca:	4613      	mov	r3, r2
 80247cc:	71fb      	strb	r3, [r7, #7]
	I2C_HandleTypeDef *Handle = I2Cx;
 80247ce:	68fb      	ldr	r3, [r7, #12]
 80247d0:	617b      	str	r3, [r7, #20]
	uint8_t data, address = DataStruct->Address;
 80247d2:	68bb      	ldr	r3, [r7, #8]
 80247d4:	781b      	ldrb	r3, [r3, #0]
 80247d6:	74fb      	strb	r3, [r7, #19]

	/* Config gyroscope */
	while (HAL_I2C_Mem_Read(Handle, address, MPU6050_GYRO_CONFIG, 1, &data, 1, 1000) != HAL_OK)
 80247d8:	bf00      	nop
 80247da:	7cfb      	ldrb	r3, [r7, #19]
 80247dc:	b299      	uxth	r1, r3
 80247de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80247e2:	9302      	str	r3, [sp, #8]
 80247e4:	2301      	movs	r3, #1
 80247e6:	9301      	str	r3, [sp, #4]
 80247e8:	f107 0312 	add.w	r3, r7, #18
 80247ec:	9300      	str	r3, [sp, #0]
 80247ee:	2301      	movs	r3, #1
 80247f0:	221b      	movs	r2, #27
 80247f2:	6978      	ldr	r0, [r7, #20]
 80247f4:	f00b ff96 	bl	8030724 <HAL_I2C_Mem_Read>
 80247f8:	4603      	mov	r3, r0
 80247fa:	2b00      	cmp	r3, #0
 80247fc:	d1ed      	bne.n	80247da <MPU6050_SetGyroscope+0x1a>
	//  while (HAL_I2C_Master_Receive(Handle, (uint16_t) address, &data, 1, 1000) != HAL_OK)
	//    ;
	//  /*{
	//   return MPU6050_Result_Error;
	//   }*/
	data = (data & 0xE7) | (uint8_t) GyroscopeSensitivity << 3;
 80247fe:	7cbb      	ldrb	r3, [r7, #18]
 8024800:	b25b      	sxtb	r3, r3
 8024802:	f023 0318 	bic.w	r3, r3, #24
 8024806:	b25a      	sxtb	r2, r3
 8024808:	79fb      	ldrb	r3, [r7, #7]
 802480a:	00db      	lsls	r3, r3, #3
 802480c:	b25b      	sxtb	r3, r3
 802480e:	4313      	orrs	r3, r2
 8024810:	b25b      	sxtb	r3, r3
 8024812:	b2db      	uxtb	r3, r3
 8024814:	74bb      	strb	r3, [r7, #18]
	while (HAL_I2C_Mem_Write(Handle, address, MPU6050_GYRO_CONFIG, 1, &data, 1, 1000) != HAL_OK)
 8024816:	bf00      	nop
 8024818:	7cfb      	ldrb	r3, [r7, #19]
 802481a:	b299      	uxth	r1, r3
 802481c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8024820:	9302      	str	r3, [sp, #8]
 8024822:	2301      	movs	r3, #1
 8024824:	9301      	str	r3, [sp, #4]
 8024826:	f107 0312 	add.w	r3, r7, #18
 802482a:	9300      	str	r3, [sp, #0]
 802482c:	2301      	movs	r3, #1
 802482e:	221b      	movs	r2, #27
 8024830:	6978      	ldr	r0, [r7, #20]
 8024832:	f00b fe7d 	bl	8030530 <HAL_I2C_Mem_Write>
 8024836:	4603      	mov	r3, r0
 8024838:	2b00      	cmp	r3, #0
 802483a:	d1ed      	bne.n	8024818 <MPU6050_SetGyroscope+0x58>
	//    ;
	//  /*{
	//   return MPU6050_Result_Error;
	//   }*/

	switch (GyroscopeSensitivity) {
 802483c:	79fb      	ldrb	r3, [r7, #7]
 802483e:	2b03      	cmp	r3, #3
 8024840:	d81a      	bhi.n	8024878 <MPU6050_SetGyroscope+0xb8>
 8024842:	a201      	add	r2, pc, #4	; (adr r2, 8024848 <MPU6050_SetGyroscope+0x88>)
 8024844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024848:	08024859 	.word	0x08024859
 802484c:	08024861 	.word	0x08024861
 8024850:	08024869 	.word	0x08024869
 8024854:	08024871 	.word	0x08024871
		case MPU6050_Gyroscope_250s:
			DataStruct->Gyro_Mult = (float) 1 / MPU6050_GYRO_SENS_250;
 8024858:	68bb      	ldr	r3, [r7, #8]
 802485a:	4a0a      	ldr	r2, [pc, #40]	; (8024884 <MPU6050_SetGyroscope+0xc4>)
 802485c:	605a      	str	r2, [r3, #4]
			break;
 802485e:	e00c      	b.n	802487a <MPU6050_SetGyroscope+0xba>
		case MPU6050_Gyroscope_500s:
			DataStruct->Gyro_Mult = (float) 1 / MPU6050_GYRO_SENS_500;
 8024860:	68bb      	ldr	r3, [r7, #8]
 8024862:	4a09      	ldr	r2, [pc, #36]	; (8024888 <MPU6050_SetGyroscope+0xc8>)
 8024864:	605a      	str	r2, [r3, #4]
			break;
 8024866:	e008      	b.n	802487a <MPU6050_SetGyroscope+0xba>
		case MPU6050_Gyroscope_1000s:
			DataStruct->Gyro_Mult = (float) 1 / MPU6050_GYRO_SENS_1000;
 8024868:	68bb      	ldr	r3, [r7, #8]
 802486a:	4a08      	ldr	r2, [pc, #32]	; (802488c <MPU6050_SetGyroscope+0xcc>)
 802486c:	605a      	str	r2, [r3, #4]
			break;
 802486e:	e004      	b.n	802487a <MPU6050_SetGyroscope+0xba>
		case MPU6050_Gyroscope_2000s:
			DataStruct->Gyro_Mult = (float) 1 / MPU6050_GYRO_SENS_2000;
 8024870:	68bb      	ldr	r3, [r7, #8]
 8024872:	4a07      	ldr	r2, [pc, #28]	; (8024890 <MPU6050_SetGyroscope+0xd0>)
 8024874:	605a      	str	r2, [r3, #4]
			break;
 8024876:	e000      	b.n	802487a <MPU6050_SetGyroscope+0xba>
		default:
			break;
 8024878:	bf00      	nop
	}
	/* Return OK */
	return MPU6050_Result_Ok;
 802487a:	2300      	movs	r3, #0
}
 802487c:	4618      	mov	r0, r3
 802487e:	3718      	adds	r7, #24
 8024880:	46bd      	mov	sp, r7
 8024882:	bd80      	pop	{r7, pc}
 8024884:	3bfa232d 	.word	0x3bfa232d
 8024888:	3c7a232d 	.word	0x3c7a232d
 802488c:	3cf9c190 	.word	0x3cf9c190
 8024890:	3d79c190 	.word	0x3d79c190

08024894 <MPU6050_ReadAll>:
	DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);

	/* Return OK */
	return MPU6050_Result_Ok;
}
MPU6050_Result MPU6050_ReadAll(I2C_HandleTypeDef *I2Cx, MPU6050 *DataStruct) {
 8024894:	b580      	push	{r7, lr}
 8024896:	b08c      	sub	sp, #48	; 0x30
 8024898:	af04      	add	r7, sp, #16
 802489a:	6078      	str	r0, [r7, #4]
 802489c:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef *Handle = I2Cx;
 802489e:	687b      	ldr	r3, [r7, #4]
 80248a0:	61fb      	str	r3, [r7, #28]
	uint8_t data[14], address = DataStruct->Address;
 80248a2:	683b      	ldr	r3, [r7, #0]
 80248a4:	781b      	ldrb	r3, [r3, #0]
 80248a6:	76fb      	strb	r3, [r7, #27]
	int16_t temp;

	/* Read full raw data, 14bytes */
	while (HAL_I2C_Mem_Read(Handle, address, MPU6050_ACCEL_XOUT_H, 1, data, 14, 1000) != HAL_OK)
 80248a8:	bf00      	nop
 80248aa:	7efb      	ldrb	r3, [r7, #27]
 80248ac:	b299      	uxth	r1, r3
 80248ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80248b2:	9302      	str	r3, [sp, #8]
 80248b4:	230e      	movs	r3, #14
 80248b6:	9301      	str	r3, [sp, #4]
 80248b8:	f107 0308 	add.w	r3, r7, #8
 80248bc:	9300      	str	r3, [sp, #0]
 80248be:	2301      	movs	r3, #1
 80248c0:	223b      	movs	r2, #59	; 0x3b
 80248c2:	69f8      	ldr	r0, [r7, #28]
 80248c4:	f00b ff2e 	bl	8030724 <HAL_I2C_Mem_Read>
 80248c8:	4603      	mov	r3, r0
 80248ca:	2b00      	cmp	r3, #0
 80248cc:	d1ed      	bne.n	80248aa <MPU6050_ReadAll+0x16>
	//
	//  while (HAL_I2C_Master_Receive(Handle, (uint16_t) address, data, 14, 1000) != HAL_OK)
	//    ;

	/* Format accelerometer data */
	DataStruct->Accelerometer_X = (int16_t) (data[0] << 8 | data[1]);
 80248ce:	7a3b      	ldrb	r3, [r7, #8]
 80248d0:	021b      	lsls	r3, r3, #8
 80248d2:	b21a      	sxth	r2, r3
 80248d4:	7a7b      	ldrb	r3, [r7, #9]
 80248d6:	b21b      	sxth	r3, r3
 80248d8:	4313      	orrs	r3, r2
 80248da:	b21a      	sxth	r2, r3
 80248dc:	683b      	ldr	r3, [r7, #0]
 80248de:	819a      	strh	r2, [r3, #12]
	DataStruct->Accelerometer_Y = (int16_t) (data[2] << 8 | data[3]);
 80248e0:	7abb      	ldrb	r3, [r7, #10]
 80248e2:	021b      	lsls	r3, r3, #8
 80248e4:	b21a      	sxth	r2, r3
 80248e6:	7afb      	ldrb	r3, [r7, #11]
 80248e8:	b21b      	sxth	r3, r3
 80248ea:	4313      	orrs	r3, r2
 80248ec:	b21a      	sxth	r2, r3
 80248ee:	683b      	ldr	r3, [r7, #0]
 80248f0:	81da      	strh	r2, [r3, #14]
	DataStruct->Accelerometer_Z = (int16_t) (data[4] << 8 | data[5]);
 80248f2:	7b3b      	ldrb	r3, [r7, #12]
 80248f4:	021b      	lsls	r3, r3, #8
 80248f6:	b21a      	sxth	r2, r3
 80248f8:	7b7b      	ldrb	r3, [r7, #13]
 80248fa:	b21b      	sxth	r3, r3
 80248fc:	4313      	orrs	r3, r2
 80248fe:	b21a      	sxth	r2, r3
 8024900:	683b      	ldr	r3, [r7, #0]
 8024902:	821a      	strh	r2, [r3, #16]

	/* Format temperature */
	temp = (data[6] << 8 | data[7]);
 8024904:	7bbb      	ldrb	r3, [r7, #14]
 8024906:	021b      	lsls	r3, r3, #8
 8024908:	b21a      	sxth	r2, r3
 802490a:	7bfb      	ldrb	r3, [r7, #15]
 802490c:	b21b      	sxth	r3, r3
 802490e:	4313      	orrs	r3, r2
 8024910:	833b      	strh	r3, [r7, #24]
	DataStruct->Temperature = (float) ((float) ((int16_t) temp) / (float) 340.0 + (float) 36.53);
 8024912:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8024916:	ee07 3a90 	vmov	s15, r3
 802491a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802491e:	eddf 6a15 	vldr	s13, [pc, #84]	; 8024974 <MPU6050_ReadAll+0xe0>
 8024922:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8024926:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8024978 <MPU6050_ReadAll+0xe4>
 802492a:	ee77 7a87 	vadd.f32	s15, s15, s14
 802492e:	683b      	ldr	r3, [r7, #0]
 8024930:	edc3 7a06 	vstr	s15, [r3, #24]

	/* Format gyroscope data */
	DataStruct->Gyroscope_X = (int16_t) (data[8] << 8 | data[9]);
 8024934:	7c3b      	ldrb	r3, [r7, #16]
 8024936:	021b      	lsls	r3, r3, #8
 8024938:	b21a      	sxth	r2, r3
 802493a:	7c7b      	ldrb	r3, [r7, #17]
 802493c:	b21b      	sxth	r3, r3
 802493e:	4313      	orrs	r3, r2
 8024940:	b21a      	sxth	r2, r3
 8024942:	683b      	ldr	r3, [r7, #0]
 8024944:	825a      	strh	r2, [r3, #18]
	DataStruct->Gyroscope_Y = (int16_t) (data[10] << 8 | data[11]);
 8024946:	7cbb      	ldrb	r3, [r7, #18]
 8024948:	021b      	lsls	r3, r3, #8
 802494a:	b21a      	sxth	r2, r3
 802494c:	7cfb      	ldrb	r3, [r7, #19]
 802494e:	b21b      	sxth	r3, r3
 8024950:	4313      	orrs	r3, r2
 8024952:	b21a      	sxth	r2, r3
 8024954:	683b      	ldr	r3, [r7, #0]
 8024956:	829a      	strh	r2, [r3, #20]
	DataStruct->Gyroscope_Z = (int16_t) (data[12] << 8 | data[13]);
 8024958:	7d3b      	ldrb	r3, [r7, #20]
 802495a:	021b      	lsls	r3, r3, #8
 802495c:	b21a      	sxth	r2, r3
 802495e:	7d7b      	ldrb	r3, [r7, #21]
 8024960:	b21b      	sxth	r3, r3
 8024962:	4313      	orrs	r3, r2
 8024964:	b21a      	sxth	r2, r3
 8024966:	683b      	ldr	r3, [r7, #0]
 8024968:	82da      	strh	r2, [r3, #22]

	/* Return OK */
	return MPU6050_Result_Ok;
 802496a:	2300      	movs	r3, #0
}
 802496c:	4618      	mov	r0, r3
 802496e:	3720      	adds	r7, #32
 8024970:	46bd      	mov	sp, r7
 8024972:	bd80      	pop	{r7, pc}
 8024974:	43aa0000 	.word	0x43aa0000
 8024978:	42121eb8 	.word	0x42121eb8

0802497c <nmea_init>:
/**
 * @brief           Init NMEA handle
 * @param[in]       gh: NMEA handle structure
 * @return          `1` on success, `0` otherwise
 */
uint8_t nmea_init(nmea_t *nh) {
 802497c:	b580      	push	{r7, lr}
 802497e:	b082      	sub	sp, #8
 8024980:	af00      	add	r7, sp, #0
 8024982:	6078      	str	r0, [r7, #4]
    memset(nh, 0x00, sizeof(*nh)); /* Reset structure */
 8024984:	2274      	movs	r2, #116	; 0x74
 8024986:	2100      	movs	r1, #0
 8024988:	6878      	ldr	r0, [r7, #4]
 802498a:	f01b f843 	bl	803fa14 <memset>
    return 1;
 802498e:	2301      	movs	r3, #1
}
 8024990:	4618      	mov	r0, r3
 8024992:	3708      	adds	r7, #8
 8024994:	46bd      	mov	sp, r7
 8024996:	bd80      	pop	{r7, pc}

08024998 <nmea_process>:
 * @param[in]       gh: NMEA handle structure
 * @param[in]       data: Received data
 * @param[in]       len: Number of bytes to process
 * @return          `1` on success, `0` otherwise
 */
uint8_t nmea_process(nmea_t *nh, const void *data, size_t len) {
 8024998:	b580      	push	{r7, lr}
 802499a:	b086      	sub	sp, #24
 802499c:	af00      	add	r7, sp, #0
 802499e:	60f8      	str	r0, [r7, #12]
 80249a0:	60b9      	str	r1, [r7, #8]
 80249a2:	607a      	str	r2, [r7, #4]
    const uint8_t *d = data;
 80249a4:	68bb      	ldr	r3, [r7, #8]
 80249a6:	617b      	str	r3, [r7, #20]

    while (len--) { /* Process all bytes */
 80249a8:	e0a4      	b.n	8024af4 <nmea_process+0x15c>
        if (*d == '$') { /* Check for beginning of NMEA line */
 80249aa:	697b      	ldr	r3, [r7, #20]
 80249ac:	781b      	ldrb	r3, [r3, #0]
 80249ae:	2b24      	cmp	r3, #36	; 0x24
 80249b0:	d125      	bne.n	80249fe <nmea_process+0x66>
            memset(&nh->p, 0x00, sizeof(nh->p));/* Reset private memory */
 80249b2:	68fb      	ldr	r3, [r7, #12]
 80249b4:	3344      	adds	r3, #68	; 0x44
 80249b6:	2230      	movs	r2, #48	; 0x30
 80249b8:	2100      	movs	r1, #0
 80249ba:	4618      	mov	r0, r3
 80249bc:	f01b f82a 	bl	803fa14 <memset>
            TERM_ADD(nh, *d); /* Add character to term */
 80249c0:	68fb      	ldr	r3, [r7, #12]
 80249c2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80249c6:	2b0b      	cmp	r3, #11
 80249c8:	f200 8091 	bhi.w	8024aee <nmea_process+0x156>
 80249cc:	68fb      	ldr	r3, [r7, #12]
 80249ce:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80249d2:	1c5a      	adds	r2, r3, #1
 80249d4:	b2d1      	uxtb	r1, r2
 80249d6:	68fa      	ldr	r2, [r7, #12]
 80249d8:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
 80249dc:	4619      	mov	r1, r3
 80249de:	697b      	ldr	r3, [r7, #20]
 80249e0:	781a      	ldrb	r2, [r3, #0]
 80249e2:	68fb      	ldr	r3, [r7, #12]
 80249e4:	440b      	add	r3, r1
 80249e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80249ea:	68fb      	ldr	r3, [r7, #12]
 80249ec:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80249f0:	461a      	mov	r2, r3
 80249f2:	68fb      	ldr	r3, [r7, #12]
 80249f4:	4413      	add	r3, r2
 80249f6:	2200      	movs	r2, #0
 80249f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80249fc:	e077      	b.n	8024aee <nmea_process+0x156>
        } else if (*d == ',') { /* Term separator character */
 80249fe:	697b      	ldr	r3, [r7, #20]
 8024a00:	781b      	ldrb	r3, [r3, #0]
 8024a02:	2b2c      	cmp	r3, #44	; 0x2c
 8024a04:	d11d      	bne.n	8024a42 <nmea_process+0xaa>
            parse_term(nh); /* Parse term we have currently in memory */
 8024a06:	68f8      	ldr	r0, [r7, #12]
 8024a08:	f000 f9e8 	bl	8024ddc <parse_term>
            CRC_ADD(nh, *d); /* Add character to CRC computation */
 8024a0c:	68fb      	ldr	r3, [r7, #12]
 8024a0e:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8024a12:	697b      	ldr	r3, [r7, #20]
 8024a14:	781b      	ldrb	r3, [r3, #0]
 8024a16:	4053      	eors	r3, r2
 8024a18:	b2da      	uxtb	r2, r3
 8024a1a:	68fb      	ldr	r3, [r7, #12]
 8024a1c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
            TERM_NEXT(nh); /* Start with next term */
 8024a20:	68fb      	ldr	r3, [r7, #12]
 8024a22:	2200      	movs	r2, #0
 8024a24:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8024a28:	68fb      	ldr	r3, [r7, #12]
 8024a2a:	2200      	movs	r2, #0
 8024a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8024a30:	68fb      	ldr	r3, [r7, #12]
 8024a32:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8024a36:	3301      	adds	r3, #1
 8024a38:	b2da      	uxtb	r2, r3
 8024a3a:	68fb      	ldr	r3, [r7, #12]
 8024a3c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8024a40:	e055      	b.n	8024aee <nmea_process+0x156>
        } else if (*d == '*') { /* Start indicates end of data for CRC computation */
 8024a42:	697b      	ldr	r3, [r7, #20]
 8024a44:	781b      	ldrb	r3, [r3, #0]
 8024a46:	2b2a      	cmp	r3, #42	; 0x2a
 8024a48:	d117      	bne.n	8024a7a <nmea_process+0xe2>
            parse_term(nh); /* Parse term we have currently in memory */
 8024a4a:	68f8      	ldr	r0, [r7, #12]
 8024a4c:	f000 f9c6 	bl	8024ddc <parse_term>
            nh->p.star = 1; /* STAR detected */
 8024a50:	68fb      	ldr	r3, [r7, #12]
 8024a52:	2201      	movs	r2, #1
 8024a54:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            TERM_NEXT(nh); /* Start with next term */
 8024a58:	68fb      	ldr	r3, [r7, #12]
 8024a5a:	2200      	movs	r2, #0
 8024a5c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8024a60:	68fb      	ldr	r3, [r7, #12]
 8024a62:	2200      	movs	r2, #0
 8024a64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8024a68:	68fb      	ldr	r3, [r7, #12]
 8024a6a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8024a6e:	3301      	adds	r3, #1
 8024a70:	b2da      	uxtb	r2, r3
 8024a72:	68fb      	ldr	r3, [r7, #12]
 8024a74:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8024a78:	e039      	b.n	8024aee <nmea_process+0x156>
        } else if (*d == '\r') {
 8024a7a:	697b      	ldr	r3, [r7, #20]
 8024a7c:	781b      	ldrb	r3, [r3, #0]
 8024a7e:	2b0d      	cmp	r3, #13
 8024a80:	d109      	bne.n	8024a96 <nmea_process+0xfe>
            if (check_crc(nh)) { /* Check for CRC result */
 8024a82:	68f8      	ldr	r0, [r7, #12]
 8024a84:	f000 fc40 	bl	8025308 <check_crc>
 8024a88:	4603      	mov	r3, r0
 8024a8a:	2b00      	cmp	r3, #0
 8024a8c:	d02f      	beq.n	8024aee <nmea_process+0x156>
                /* CRC is OK, in theory we can copy data from statements to user data */
                copy_from_tmp_memory(nh); /* Copy memory from temporary to user memory */
 8024a8e:	68f8      	ldr	r0, [r7, #12]
 8024a90:	f000 fcc3 	bl	802541a <copy_from_tmp_memory>
 8024a94:	e02b      	b.n	8024aee <nmea_process+0x156>
            }
        } else {
            if (!nh->p.star) { /* Add to CRC only if star not yet detected */
 8024a96:	68fb      	ldr	r3, [r7, #12]
 8024a98:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8024a9c:	2b00      	cmp	r3, #0
 8024a9e:	d109      	bne.n	8024ab4 <nmea_process+0x11c>
                CRC_ADD(nh, *d); /* Add to CRC */
 8024aa0:	68fb      	ldr	r3, [r7, #12]
 8024aa2:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8024aa6:	697b      	ldr	r3, [r7, #20]
 8024aa8:	781b      	ldrb	r3, [r3, #0]
 8024aaa:	4053      	eors	r3, r2
 8024aac:	b2da      	uxtb	r2, r3
 8024aae:	68fb      	ldr	r3, [r7, #12]
 8024ab0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
            }
            TERM_ADD(nh, *d); /* Add character to term */
 8024ab4:	68fb      	ldr	r3, [r7, #12]
 8024ab6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8024aba:	2b0b      	cmp	r3, #11
 8024abc:	d817      	bhi.n	8024aee <nmea_process+0x156>
 8024abe:	68fb      	ldr	r3, [r7, #12]
 8024ac0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8024ac4:	1c5a      	adds	r2, r3, #1
 8024ac6:	b2d1      	uxtb	r1, r2
 8024ac8:	68fa      	ldr	r2, [r7, #12]
 8024aca:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
 8024ace:	4619      	mov	r1, r3
 8024ad0:	697b      	ldr	r3, [r7, #20]
 8024ad2:	781a      	ldrb	r2, [r3, #0]
 8024ad4:	68fb      	ldr	r3, [r7, #12]
 8024ad6:	440b      	add	r3, r1
 8024ad8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8024adc:	68fb      	ldr	r3, [r7, #12]
 8024ade:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8024ae2:	461a      	mov	r2, r3
 8024ae4:	68fb      	ldr	r3, [r7, #12]
 8024ae6:	4413      	add	r3, r2
 8024ae8:	2200      	movs	r2, #0
 8024aea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        }
        d++; /* Process next character */
 8024aee:	697b      	ldr	r3, [r7, #20]
 8024af0:	3301      	adds	r3, #1
 8024af2:	617b      	str	r3, [r7, #20]
    while (len--) { /* Process all bytes */
 8024af4:	687b      	ldr	r3, [r7, #4]
 8024af6:	1e5a      	subs	r2, r3, #1
 8024af8:	607a      	str	r2, [r7, #4]
 8024afa:	2b00      	cmp	r3, #0
 8024afc:	f47f af55 	bne.w	80249aa <nmea_process+0x12>
    }
    return 1;
 8024b00:	2301      	movs	r3, #1
}
 8024b02:	4618      	mov	r0, r3
 8024b04:	3718      	adds	r7, #24
 8024b06:	46bd      	mov	sp, r7
 8024b08:	bd80      	pop	{r7, pc}
	...

08024b0c <nmea_to_speed>:
 * @brief           Convert NMEA speed (in knots = nautical mile per hour) to different speed format
 * @param[in]       sik: Speed in knots, received from NMEA statement
 * @param[in]       ts: Target speed to convert to from knots
 * @return          Speed calculated from knots
 */
nmea_float_t nmea_to_speed(nmea_float_t sik, NMEA_SPEED ts) {
 8024b0c:	b480      	push	{r7}
 8024b0e:	b083      	sub	sp, #12
 8024b10:	af00      	add	r7, sp, #0
 8024b12:	ed87 0a01 	vstr	s0, [r7, #4]
 8024b16:	4603      	mov	r3, r0
 8024b18:	70fb      	strb	r3, [r7, #3]
    switch (ts) {
 8024b1a:	78fb      	ldrb	r3, [r7, #3]
 8024b1c:	2b0e      	cmp	r3, #14
 8024b1e:	f200 8086 	bhi.w	8024c2e <nmea_to_speed+0x122>
 8024b22:	a201      	add	r2, pc, #4	; (adr r2, 8024b28 <nmea_to_speed+0x1c>)
 8024b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024b28:	08024b65 	.word	0x08024b65
 8024b2c:	08024b73 	.word	0x08024b73
 8024b30:	08024b81 	.word	0x08024b81
 8024b34:	08024b8f 	.word	0x08024b8f
 8024b38:	08024b9d 	.word	0x08024b9d
 8024b3c:	08024bab 	.word	0x08024bab
 8024b40:	08024bb9 	.word	0x08024bb9
 8024b44:	08024bc7 	.word	0x08024bc7
 8024b48:	08024bd5 	.word	0x08024bd5
 8024b4c:	08024be3 	.word	0x08024be3
 8024b50:	08024bf1 	.word	0x08024bf1
 8024b54:	08024bff 	.word	0x08024bff
 8024b58:	08024c0d 	.word	0x08024c0d
 8024b5c:	08024c1b 	.word	0x08024c1b
 8024b60:	08024c29 	.word	0x08024c29
        case nmea_speed_kps:
            return FLT(sik * FLT(0.000514));
 8024b64:	edd7 7a01 	vldr	s15, [r7, #4]
 8024b68:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8024c40 <nmea_to_speed+0x134>
 8024b6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024b70:	e05f      	b.n	8024c32 <nmea_to_speed+0x126>
        case nmea_speed_kph:
            return FLT(sik * FLT(1.852));
 8024b72:	edd7 7a01 	vldr	s15, [r7, #4]
 8024b76:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8024c44 <nmea_to_speed+0x138>
 8024b7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024b7e:	e058      	b.n	8024c32 <nmea_to_speed+0x126>
        case nmea_speed_mps:
            return FLT(sik * FLT(0.5144));
 8024b80:	edd7 7a01 	vldr	s15, [r7, #4]
 8024b84:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8024c48 <nmea_to_speed+0x13c>
 8024b88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024b8c:	e051      	b.n	8024c32 <nmea_to_speed+0x126>
        case nmea_speed_mpm:
            return FLT(sik * FLT(30.87));
 8024b8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8024b92:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8024c4c <nmea_to_speed+0x140>
 8024b96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024b9a:	e04a      	b.n	8024c32 <nmea_to_speed+0x126>

        case nmea_speed_mips:
            return FLT(sik * FLT(0.0003197));
 8024b9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8024ba0:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8024c50 <nmea_to_speed+0x144>
 8024ba4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024ba8:	e043      	b.n	8024c32 <nmea_to_speed+0x126>
        case nmea_speed_mph:
            return FLT(sik * FLT(1.151));
 8024baa:	edd7 7a01 	vldr	s15, [r7, #4]
 8024bae:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8024c54 <nmea_to_speed+0x148>
 8024bb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024bb6:	e03c      	b.n	8024c32 <nmea_to_speed+0x126>
        case nmea_speed_fps:
            return FLT(sik * FLT(1.688));
 8024bb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8024bbc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8024c58 <nmea_to_speed+0x14c>
 8024bc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024bc4:	e035      	b.n	8024c32 <nmea_to_speed+0x126>
        case nmea_speed_fpm:
            return FLT(sik * FLT(101.3));
 8024bc6:	edd7 7a01 	vldr	s15, [r7, #4]
 8024bca:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8024c5c <nmea_to_speed+0x150>
 8024bce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024bd2:	e02e      	b.n	8024c32 <nmea_to_speed+0x126>

        case nmea_speed_mpk:
            return FLT(sik * FLT(32.4));
 8024bd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8024bd8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8024c60 <nmea_to_speed+0x154>
 8024bdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024be0:	e027      	b.n	8024c32 <nmea_to_speed+0x126>
        case nmea_speed_spk:
            return FLT(sik * FLT(1944.0));
 8024be2:	edd7 7a01 	vldr	s15, [r7, #4]
 8024be6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8024c64 <nmea_to_speed+0x158>
 8024bea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024bee:	e020      	b.n	8024c32 <nmea_to_speed+0x126>
        case nmea_speed_sp100m:
            return FLT(sik * FLT(194.4));
 8024bf0:	edd7 7a01 	vldr	s15, [r7, #4]
 8024bf4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8024c68 <nmea_to_speed+0x15c>
 8024bf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024bfc:	e019      	b.n	8024c32 <nmea_to_speed+0x126>
        case nmea_speed_mipm:
            return FLT(sik * FLT(52.14));
 8024bfe:	edd7 7a01 	vldr	s15, [r7, #4]
 8024c02:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8024c6c <nmea_to_speed+0x160>
 8024c06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024c0a:	e012      	b.n	8024c32 <nmea_to_speed+0x126>
        case nmea_speed_spm:
            return FLT(sik * FLT(3128.0));
 8024c0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8024c10:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8024c70 <nmea_to_speed+0x164>
 8024c14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024c18:	e00b      	b.n	8024c32 <nmea_to_speed+0x126>
        case nmea_speed_sp100y:
            return FLT(sik * FLT(177.7));
 8024c1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8024c1e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8024c74 <nmea_to_speed+0x168>
 8024c22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024c26:	e004      	b.n	8024c32 <nmea_to_speed+0x126>

        case nmea_speed_smph:
            return FLT(sik * FLT(1.0));
 8024c28:	edd7 7a01 	vldr	s15, [r7, #4]
 8024c2c:	e001      	b.n	8024c32 <nmea_to_speed+0x126>
        default:
            return 0;
 8024c2e:	eddf 7a12 	vldr	s15, [pc, #72]	; 8024c78 <nmea_to_speed+0x16c>
    }
}
 8024c32:	eeb0 0a67 	vmov.f32	s0, s15
 8024c36:	370c      	adds	r7, #12
 8024c38:	46bd      	mov	sp, r7
 8024c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024c3e:	4770      	bx	lr
 8024c40:	3a06bdf5 	.word	0x3a06bdf5
 8024c44:	3fed0e56 	.word	0x3fed0e56
 8024c48:	3f03afb8 	.word	0x3f03afb8
 8024c4c:	41f6f5c3 	.word	0x41f6f5c3
 8024c50:	39a79d68 	.word	0x39a79d68
 8024c54:	3f9353f8 	.word	0x3f9353f8
 8024c58:	3fd81062 	.word	0x3fd81062
 8024c5c:	42ca999a 	.word	0x42ca999a
 8024c60:	4201999a 	.word	0x4201999a
 8024c64:	44f30000 	.word	0x44f30000
 8024c68:	43426666 	.word	0x43426666
 8024c6c:	42508f5c 	.word	0x42508f5c
 8024c70:	45438000 	.word	0x45438000
 8024c74:	4331b333 	.word	0x4331b333
 8024c78:	00000000 	.word	0x00000000

08024c7c <parse_number>:
 * @brief           Parse number as integer
 * @param[in]       gh: NMEA handle
 * @param[in]       t: Text to parse. Set to `NULL` to parse current NMEA term
 * @return          Parsed integer
 */
static int32_t parse_number(nmea_t *nh, const char *t) {
 8024c7c:	b480      	push	{r7}
 8024c7e:	b085      	sub	sp, #20
 8024c80:	af00      	add	r7, sp, #0
 8024c82:	6078      	str	r0, [r7, #4]
 8024c84:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 8024c86:	2300      	movs	r3, #0
 8024c88:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 8024c8a:	683b      	ldr	r3, [r7, #0]
 8024c8c:	2b00      	cmp	r3, #0
 8024c8e:	d106      	bne.n	8024c9e <parse_number+0x22>
        t = nh->p.term_str;
 8024c90:	687b      	ldr	r3, [r7, #4]
 8024c92:	3345      	adds	r3, #69	; 0x45
 8024c94:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; t++) {
 8024c96:	e002      	b.n	8024c9e <parse_number+0x22>
 8024c98:	683b      	ldr	r3, [r7, #0]
 8024c9a:	3301      	adds	r3, #1
 8024c9c:	603b      	str	r3, [r7, #0]
 8024c9e:	683b      	ldr	r3, [r7, #0]
 8024ca0:	2b00      	cmp	r3, #0
 8024ca2:	d003      	beq.n	8024cac <parse_number+0x30>
 8024ca4:	683b      	ldr	r3, [r7, #0]
 8024ca6:	781b      	ldrb	r3, [r3, #0]
 8024ca8:	2b20      	cmp	r3, #32
 8024caa:	d0f5      	beq.n	8024c98 <parse_number+0x1c>
    } /* Strip leading spaces */

    minus = (*t == '-' ? (t++, 1) : 0);
 8024cac:	683b      	ldr	r3, [r7, #0]
 8024cae:	781b      	ldrb	r3, [r3, #0]
 8024cb0:	2b2d      	cmp	r3, #45	; 0x2d
 8024cb2:	d104      	bne.n	8024cbe <parse_number+0x42>
 8024cb4:	683b      	ldr	r3, [r7, #0]
 8024cb6:	3301      	adds	r3, #1
 8024cb8:	603b      	str	r3, [r7, #0]
 8024cba:	2301      	movs	r3, #1
 8024cbc:	e000      	b.n	8024cc0 <parse_number+0x44>
 8024cbe:	2300      	movs	r3, #0
 8024cc0:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); t++) {
 8024cc2:	e00d      	b.n	8024ce0 <parse_number+0x64>
        res = 10 * res + CTN(*t);
 8024cc4:	68fa      	ldr	r2, [r7, #12]
 8024cc6:	4613      	mov	r3, r2
 8024cc8:	009b      	lsls	r3, r3, #2
 8024cca:	4413      	add	r3, r2
 8024ccc:	005b      	lsls	r3, r3, #1
 8024cce:	461a      	mov	r2, r3
 8024cd0:	683b      	ldr	r3, [r7, #0]
 8024cd2:	781b      	ldrb	r3, [r3, #0]
 8024cd4:	3b30      	subs	r3, #48	; 0x30
 8024cd6:	4413      	add	r3, r2
 8024cd8:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); t++) {
 8024cda:	683b      	ldr	r3, [r7, #0]
 8024cdc:	3301      	adds	r3, #1
 8024cde:	603b      	str	r3, [r7, #0]
 8024ce0:	683b      	ldr	r3, [r7, #0]
 8024ce2:	2b00      	cmp	r3, #0
 8024ce4:	d007      	beq.n	8024cf6 <parse_number+0x7a>
 8024ce6:	683b      	ldr	r3, [r7, #0]
 8024ce8:	781b      	ldrb	r3, [r3, #0]
 8024cea:	2b2f      	cmp	r3, #47	; 0x2f
 8024cec:	d903      	bls.n	8024cf6 <parse_number+0x7a>
 8024cee:	683b      	ldr	r3, [r7, #0]
 8024cf0:	781b      	ldrb	r3, [r3, #0]
 8024cf2:	2b39      	cmp	r3, #57	; 0x39
 8024cf4:	d9e6      	bls.n	8024cc4 <parse_number+0x48>
    }
    return minus ? -res : res;
 8024cf6:	7afb      	ldrb	r3, [r7, #11]
 8024cf8:	2b00      	cmp	r3, #0
 8024cfa:	d002      	beq.n	8024d02 <parse_number+0x86>
 8024cfc:	68fb      	ldr	r3, [r7, #12]
 8024cfe:	425b      	negs	r3, r3
 8024d00:	e000      	b.n	8024d04 <parse_number+0x88>
 8024d02:	68fb      	ldr	r3, [r7, #12]
}
 8024d04:	4618      	mov	r0, r3
 8024d06:	3714      	adds	r7, #20
 8024d08:	46bd      	mov	sp, r7
 8024d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d0e:	4770      	bx	lr

08024d10 <parse_float_number>:
 * @brief           Parse number as double and convert it to \ref nmea_float_t
 * @param[in]       gh: NMEA handle
 * @param[in]       t: Text to parse. Set to `NULL` to parse current NMEA term
 * @return          Parsed double in \ref nmea_float_t format
 */
static nmea_float_t parse_float_number(nmea_t *nh, const char *t) {
 8024d10:	b580      	push	{r7, lr}
 8024d12:	b084      	sub	sp, #16
 8024d14:	af00      	add	r7, sp, #0
 8024d16:	6078      	str	r0, [r7, #4]
 8024d18:	6039      	str	r1, [r7, #0]
    nmea_float_t res;

    if (t == NULL) {
 8024d1a:	683b      	ldr	r3, [r7, #0]
 8024d1c:	2b00      	cmp	r3, #0
 8024d1e:	d106      	bne.n	8024d2e <parse_float_number+0x1e>
        t = nh->p.term_str;
 8024d20:	687b      	ldr	r3, [r7, #4]
 8024d22:	3345      	adds	r3, #69	; 0x45
 8024d24:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; t++) {
 8024d26:	e002      	b.n	8024d2e <parse_float_number+0x1e>
 8024d28:	683b      	ldr	r3, [r7, #0]
 8024d2a:	3301      	adds	r3, #1
 8024d2c:	603b      	str	r3, [r7, #0]
 8024d2e:	683b      	ldr	r3, [r7, #0]
 8024d30:	2b00      	cmp	r3, #0
 8024d32:	d003      	beq.n	8024d3c <parse_float_number+0x2c>
 8024d34:	683b      	ldr	r3, [r7, #0]
 8024d36:	781b      	ldrb	r3, [r3, #0]
 8024d38:	2b20      	cmp	r3, #32
 8024d3a:	d0f5      	beq.n	8024d28 <parse_float_number+0x18>
    } /* Strip leading spaces */

#if NMEA_CFG_DOUBLE
	res = strtod(t, NULL);                      /* Parse string to double */
#else /* NMEA_CFG_DOUBLE */
    res = strtof(t, NULL); /* Parse string to float */
 8024d3c:	2100      	movs	r1, #0
 8024d3e:	6838      	ldr	r0, [r7, #0]
 8024d40:	f01b fcce 	bl	80406e0 <strtof>
 8024d44:	ed87 0a03 	vstr	s0, [r7, #12]
#endif /* !NMEA_CFG_DOUBLE */

    return FLT(res); /* Return casted value, based on float size */
 8024d48:	68fb      	ldr	r3, [r7, #12]
 8024d4a:	ee07 3a90 	vmov	s15, r3
}
 8024d4e:	eeb0 0a67 	vmov.f32	s0, s15
 8024d52:	3710      	adds	r7, #16
 8024d54:	46bd      	mov	sp, r7
 8024d56:	bd80      	pop	{r7, pc}

08024d58 <parse_lat_long>:
 *
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * @param[in]       gh: NMEA handle
 * @return          Latitude/Longitude value in degrees
 */
static nmea_float_t parse_lat_long(nmea_t *nh) {
 8024d58:	b580      	push	{r7, lr}
 8024d5a:	b086      	sub	sp, #24
 8024d5c:	af00      	add	r7, sp, #0
 8024d5e:	6078      	str	r0, [r7, #4]
    nmea_float_t ll, deg, min;

    ll = parse_float_number(nh, NULL); /* Parse value as double */
 8024d60:	2100      	movs	r1, #0
 8024d62:	6878      	ldr	r0, [r7, #4]
 8024d64:	f7ff ffd4 	bl	8024d10 <parse_float_number>
 8024d68:	ed87 0a05 	vstr	s0, [r7, #20]
    deg = FLT((int )((int )ll / 100)); /* Get absolute degrees value, interested in integer part only */
 8024d6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8024d70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8024d74:	ee17 1a90 	vmov	r1, s15
 8024d78:	4b15      	ldr	r3, [pc, #84]	; (8024dd0 <parse_lat_long+0x78>)
 8024d7a:	fb83 2301 	smull	r2, r3, r3, r1
 8024d7e:	115a      	asrs	r2, r3, #5
 8024d80:	17cb      	asrs	r3, r1, #31
 8024d82:	1ad3      	subs	r3, r2, r3
 8024d84:	ee07 3a90 	vmov	s15, r3
 8024d88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8024d8c:	edc7 7a04 	vstr	s15, [r7, #16]
    min = ll - (deg * FLT(100)); /* Get remaining part from full number, minutes */
 8024d90:	edd7 7a04 	vldr	s15, [r7, #16]
 8024d94:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8024dd4 <parse_lat_long+0x7c>
 8024d98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024d9c:	ed97 7a05 	vldr	s14, [r7, #20]
 8024da0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8024da4:	edc7 7a03 	vstr	s15, [r7, #12]
    ll = deg + (min / FLT(60)); /* Calculate latitude/longitude */
 8024da8:	ed97 7a03 	vldr	s14, [r7, #12]
 8024dac:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8024dd8 <parse_lat_long+0x80>
 8024db0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8024db4:	ed97 7a04 	vldr	s14, [r7, #16]
 8024db8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8024dbc:	edc7 7a05 	vstr	s15, [r7, #20]

    return ll;
 8024dc0:	697b      	ldr	r3, [r7, #20]
 8024dc2:	ee07 3a90 	vmov	s15, r3
}
 8024dc6:	eeb0 0a67 	vmov.f32	s0, s15
 8024dca:	3718      	adds	r7, #24
 8024dcc:	46bd      	mov	sp, r7
 8024dce:	bd80      	pop	{r7, pc}
 8024dd0:	51eb851f 	.word	0x51eb851f
 8024dd4:	42c80000 	.word	0x42c80000
 8024dd8:	42700000 	.word	0x42700000

08024ddc <parse_term>:
/**
 * @brief           Parse received term
 * @param[in]       gh: NMEA handle
 * @return          `1` on success, `0` otherwise
 */
static uint8_t parse_term(nmea_t *nh) {
 8024ddc:	b580      	push	{r7, lr}
 8024dde:	b082      	sub	sp, #8
 8024de0:	af00      	add	r7, sp, #0
 8024de2:	6078      	str	r0, [r7, #4]
    if (nh->p.term_num == 0) { /* Check string type */
 8024de4:	687b      	ldr	r3, [r7, #4]
 8024de6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8024dea:	2b00      	cmp	r3, #0
 8024dec:	d169      	bne.n	8024ec2 <parse_term+0xe6>
        if (0) {
#if NMEA_CFG_STATEMENT_GPGGA
        } else if (!strncmp(nh->p.term_str, "$GPGGA", 6) || !strncmp(nh->p.term_str, "$GNGGA", 6)) {
 8024dee:	687b      	ldr	r3, [r7, #4]
 8024df0:	3345      	adds	r3, #69	; 0x45
 8024df2:	2206      	movs	r2, #6
 8024df4:	49c4      	ldr	r1, [pc, #784]	; (8025108 <parse_term+0x32c>)
 8024df6:	4618      	mov	r0, r3
 8024df8:	f01a fe34 	bl	803fa64 <strncmp>
 8024dfc:	4603      	mov	r3, r0
 8024dfe:	2b00      	cmp	r3, #0
 8024e00:	d009      	beq.n	8024e16 <parse_term+0x3a>
 8024e02:	687b      	ldr	r3, [r7, #4]
 8024e04:	3345      	adds	r3, #69	; 0x45
 8024e06:	2206      	movs	r2, #6
 8024e08:	49c0      	ldr	r1, [pc, #768]	; (802510c <parse_term+0x330>)
 8024e0a:	4618      	mov	r0, r3
 8024e0c:	f01a fe2a 	bl	803fa64 <strncmp>
 8024e10:	4603      	mov	r3, r0
 8024e12:	2b00      	cmp	r3, #0
 8024e14:	d104      	bne.n	8024e20 <parse_term+0x44>
            nh->p.stat = STAT_GGA;
 8024e16:	687b      	ldr	r3, [r7, #4]
 8024e18:	2201      	movs	r2, #1
 8024e1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8024e1e:	e04e      	b.n	8024ebe <parse_term+0xe2>
#endif /* NMEA_CFG_STATEMENT_GPGGA */
#if NMEA_CFG_STATEMENT_GPGSA
        } else if (!strncmp(nh->p.term_str, "$GPGSA", 6) || !strncmp(nh->p.term_str, "$GNGSA", 6)) {
 8024e20:	687b      	ldr	r3, [r7, #4]
 8024e22:	3345      	adds	r3, #69	; 0x45
 8024e24:	2206      	movs	r2, #6
 8024e26:	49ba      	ldr	r1, [pc, #744]	; (8025110 <parse_term+0x334>)
 8024e28:	4618      	mov	r0, r3
 8024e2a:	f01a fe1b 	bl	803fa64 <strncmp>
 8024e2e:	4603      	mov	r3, r0
 8024e30:	2b00      	cmp	r3, #0
 8024e32:	d009      	beq.n	8024e48 <parse_term+0x6c>
 8024e34:	687b      	ldr	r3, [r7, #4]
 8024e36:	3345      	adds	r3, #69	; 0x45
 8024e38:	2206      	movs	r2, #6
 8024e3a:	49b6      	ldr	r1, [pc, #728]	; (8025114 <parse_term+0x338>)
 8024e3c:	4618      	mov	r0, r3
 8024e3e:	f01a fe11 	bl	803fa64 <strncmp>
 8024e42:	4603      	mov	r3, r0
 8024e44:	2b00      	cmp	r3, #0
 8024e46:	d104      	bne.n	8024e52 <parse_term+0x76>
            nh->p.stat = STAT_GSA;
 8024e48:	687b      	ldr	r3, [r7, #4]
 8024e4a:	2202      	movs	r2, #2
 8024e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8024e50:	e035      	b.n	8024ebe <parse_term+0xe2>
#endif /* NMEA_CFG_STATEMENT_GPGSA */
#if NMEA_CFG_STATEMENT_GPGSV
        } else if (!strncmp(nh->p.term_str, "$GPGSV", 6) || !strncmp(nh->p.term_str, "$GNGSV", 6)) {
 8024e52:	687b      	ldr	r3, [r7, #4]
 8024e54:	3345      	adds	r3, #69	; 0x45
 8024e56:	2206      	movs	r2, #6
 8024e58:	49af      	ldr	r1, [pc, #700]	; (8025118 <parse_term+0x33c>)
 8024e5a:	4618      	mov	r0, r3
 8024e5c:	f01a fe02 	bl	803fa64 <strncmp>
 8024e60:	4603      	mov	r3, r0
 8024e62:	2b00      	cmp	r3, #0
 8024e64:	d009      	beq.n	8024e7a <parse_term+0x9e>
 8024e66:	687b      	ldr	r3, [r7, #4]
 8024e68:	3345      	adds	r3, #69	; 0x45
 8024e6a:	2206      	movs	r2, #6
 8024e6c:	49ab      	ldr	r1, [pc, #684]	; (802511c <parse_term+0x340>)
 8024e6e:	4618      	mov	r0, r3
 8024e70:	f01a fdf8 	bl	803fa64 <strncmp>
 8024e74:	4603      	mov	r3, r0
 8024e76:	2b00      	cmp	r3, #0
 8024e78:	d104      	bne.n	8024e84 <parse_term+0xa8>
            nh->p.stat = STAT_GSV;
 8024e7a:	687b      	ldr	r3, [r7, #4]
 8024e7c:	2203      	movs	r2, #3
 8024e7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8024e82:	e01c      	b.n	8024ebe <parse_term+0xe2>
#endif /* NMEA_CFG_STATEMENT_GPGSV */
#if NMEA_CFG_STATEMENT_GPRMC
        } else if (!strncmp(nh->p.term_str, "$GPRMC", 6) || !strncmp(nh->p.term_str, "$GNRMC", 6)) {
 8024e84:	687b      	ldr	r3, [r7, #4]
 8024e86:	3345      	adds	r3, #69	; 0x45
 8024e88:	2206      	movs	r2, #6
 8024e8a:	49a5      	ldr	r1, [pc, #660]	; (8025120 <parse_term+0x344>)
 8024e8c:	4618      	mov	r0, r3
 8024e8e:	f01a fde9 	bl	803fa64 <strncmp>
 8024e92:	4603      	mov	r3, r0
 8024e94:	2b00      	cmp	r3, #0
 8024e96:	d009      	beq.n	8024eac <parse_term+0xd0>
 8024e98:	687b      	ldr	r3, [r7, #4]
 8024e9a:	3345      	adds	r3, #69	; 0x45
 8024e9c:	2206      	movs	r2, #6
 8024e9e:	49a1      	ldr	r1, [pc, #644]	; (8025124 <parse_term+0x348>)
 8024ea0:	4618      	mov	r0, r3
 8024ea2:	f01a fddf 	bl	803fa64 <strncmp>
 8024ea6:	4603      	mov	r3, r0
 8024ea8:	2b00      	cmp	r3, #0
 8024eaa:	d104      	bne.n	8024eb6 <parse_term+0xda>
            nh->p.stat = STAT_RMC;
 8024eac:	687b      	ldr	r3, [r7, #4]
 8024eae:	2204      	movs	r2, #4
 8024eb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8024eb4:	e003      	b.n	8024ebe <parse_term+0xe2>
#endif /* NMEA_CFG_STATEMENT_GPRMC */
        } else {
            nh->p.stat = STAT_UNKNOWN; /* Invalid statement for library */
 8024eb6:	687b      	ldr	r3, [r7, #4]
 8024eb8:	2200      	movs	r2, #0
 8024eba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        }
        return 1;
 8024ebe:	2301      	movs	r3, #1
 8024ec0:	e21d      	b.n	80252fe <parse_term+0x522>
    }

    /* Start parsing terms */
    if (nh->p.stat == STAT_UNKNOWN) {
 8024ec2:	687b      	ldr	r3, [r7, #4]
 8024ec4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8024ec8:	2b00      	cmp	r3, #0
 8024eca:	f000 8217 	beq.w	80252fc <parse_term+0x520>
#if NMEA_CFG_STATEMENT_GPGGA
    } else if (nh->p.stat == STAT_GGA) { /* Process GPGGA statement */
 8024ece:	687b      	ldr	r3, [r7, #4]
 8024ed0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8024ed4:	2b01      	cmp	r3, #1
 8024ed6:	f040 80c0 	bne.w	802505a <parse_term+0x27e>
        switch (nh->p.term_num) {
 8024eda:	687b      	ldr	r3, [r7, #4]
 8024edc:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8024ee0:	3b01      	subs	r3, #1
 8024ee2:	2b0a      	cmp	r3, #10
 8024ee4:	f200 81fd 	bhi.w	80252e2 <parse_term+0x506>
 8024ee8:	a201      	add	r2, pc, #4	; (adr r2, 8024ef0 <parse_term+0x114>)
 8024eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024eee:	bf00      	nop
 8024ef0:	08024f1d 	.word	0x08024f1d
 8024ef4:	08024f97 	.word	0x08024f97
 8024ef8:	08024fa9 	.word	0x08024fa9
 8024efc:	08024fd1 	.word	0x08024fd1
 8024f00:	08024fe3 	.word	0x08024fe3
 8024f04:	0802500b 	.word	0x0802500b
 8024f08:	0802501f 	.word	0x0802501f
 8024f0c:	080252e3 	.word	0x080252e3
 8024f10:	08025033 	.word	0x08025033
 8024f14:	080252e3 	.word	0x080252e3
 8024f18:	08025047 	.word	0x08025047
            case 1: /* Process UTC time */
                nh->p.data.gga.hours = 10 * CTN(nh->p.term_str[0]) + CTN(nh->p.term_str[1]);
 8024f1c:	687b      	ldr	r3, [r7, #4]
 8024f1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8024f22:	3b30      	subs	r3, #48	; 0x30
 8024f24:	b2db      	uxtb	r3, r3
 8024f26:	461a      	mov	r2, r3
 8024f28:	0092      	lsls	r2, r2, #2
 8024f2a:	4413      	add	r3, r2
 8024f2c:	005b      	lsls	r3, r3, #1
 8024f2e:	b2da      	uxtb	r2, r3
 8024f30:	687b      	ldr	r3, [r7, #4]
 8024f32:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8024f36:	4413      	add	r3, r2
 8024f38:	b2db      	uxtb	r3, r3
 8024f3a:	3b30      	subs	r3, #48	; 0x30
 8024f3c:	b2da      	uxtb	r2, r3
 8024f3e:	687b      	ldr	r3, [r7, #4]
 8024f40:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                nh->p.data.gga.minutes = 10 * CTN(nh->p.term_str[2]) + CTN(nh->p.term_str[3]);
 8024f44:	687b      	ldr	r3, [r7, #4]
 8024f46:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8024f4a:	3b30      	subs	r3, #48	; 0x30
 8024f4c:	b2db      	uxtb	r3, r3
 8024f4e:	461a      	mov	r2, r3
 8024f50:	0092      	lsls	r2, r2, #2
 8024f52:	4413      	add	r3, r2
 8024f54:	005b      	lsls	r3, r3, #1
 8024f56:	b2da      	uxtb	r2, r3
 8024f58:	687b      	ldr	r3, [r7, #4]
 8024f5a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8024f5e:	4413      	add	r3, r2
 8024f60:	b2db      	uxtb	r3, r3
 8024f62:	3b30      	subs	r3, #48	; 0x30
 8024f64:	b2da      	uxtb	r2, r3
 8024f66:	687b      	ldr	r3, [r7, #4]
 8024f68:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
                nh->p.data.gga.seconds = 10 * CTN(nh->p.term_str[4]) + CTN(nh->p.term_str[5]);
 8024f6c:	687b      	ldr	r3, [r7, #4]
 8024f6e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8024f72:	3b30      	subs	r3, #48	; 0x30
 8024f74:	b2db      	uxtb	r3, r3
 8024f76:	461a      	mov	r2, r3
 8024f78:	0092      	lsls	r2, r2, #2
 8024f7a:	4413      	add	r3, r2
 8024f7c:	005b      	lsls	r3, r3, #1
 8024f7e:	b2da      	uxtb	r2, r3
 8024f80:	687b      	ldr	r3, [r7, #4]
 8024f82:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8024f86:	4413      	add	r3, r2
 8024f88:	b2db      	uxtb	r3, r3
 8024f8a:	3b30      	subs	r3, #48	; 0x30
 8024f8c:	b2da      	uxtb	r2, r3
 8024f8e:	687b      	ldr	r3, [r7, #4]
 8024f90:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                break;
 8024f94:	e1b2      	b.n	80252fc <parse_term+0x520>
            case 2: /* Latitude */
                nh->p.data.gga.latitude = parse_lat_long(nh); /* Parse latitude */
 8024f96:	6878      	ldr	r0, [r7, #4]
 8024f98:	f7ff fede 	bl	8024d58 <parse_lat_long>
 8024f9c:	eef0 7a40 	vmov.f32	s15, s0
 8024fa0:	687b      	ldr	r3, [r7, #4]
 8024fa2:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
                break;
 8024fa6:	e1a9      	b.n	80252fc <parse_term+0x520>
            case 3: /* Latitude north/south information */
                if (nh->p.term_str[0] == 'S' || nh->p.term_str[0] == 's') {
 8024fa8:	687b      	ldr	r3, [r7, #4]
 8024faa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8024fae:	2b53      	cmp	r3, #83	; 0x53
 8024fb0:	d005      	beq.n	8024fbe <parse_term+0x1e2>
 8024fb2:	687b      	ldr	r3, [r7, #4]
 8024fb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8024fb8:	2b73      	cmp	r3, #115	; 0x73
 8024fba:	f040 8194 	bne.w	80252e6 <parse_term+0x50a>
                    nh->p.data.gga.latitude = -nh->p.data.gga.latitude;
 8024fbe:	687b      	ldr	r3, [r7, #4]
 8024fc0:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8024fc4:	eef1 7a67 	vneg.f32	s15, s15
 8024fc8:	687b      	ldr	r3, [r7, #4]
 8024fca:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
                }
                break;
 8024fce:	e18a      	b.n	80252e6 <parse_term+0x50a>
            case 4: /* Longitude */
                nh->p.data.gga.longitude = parse_lat_long(nh); /* Parse longitude */
 8024fd0:	6878      	ldr	r0, [r7, #4]
 8024fd2:	f7ff fec1 	bl	8024d58 <parse_lat_long>
 8024fd6:	eef0 7a40 	vmov.f32	s15, s0
 8024fda:	687b      	ldr	r3, [r7, #4]
 8024fdc:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
                break;
 8024fe0:	e18c      	b.n	80252fc <parse_term+0x520>
            case 5: /* Longitude east/west information */
                if (nh->p.term_str[0] == 'W' || nh->p.term_str[0] == 'w') {
 8024fe2:	687b      	ldr	r3, [r7, #4]
 8024fe4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8024fe8:	2b57      	cmp	r3, #87	; 0x57
 8024fea:	d005      	beq.n	8024ff8 <parse_term+0x21c>
 8024fec:	687b      	ldr	r3, [r7, #4]
 8024fee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8024ff2:	2b77      	cmp	r3, #119	; 0x77
 8024ff4:	f040 8179 	bne.w	80252ea <parse_term+0x50e>
                    nh->p.data.gga.longitude = -nh->p.data.gga.longitude;
 8024ff8:	687b      	ldr	r3, [r7, #4]
 8024ffa:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8024ffe:	eef1 7a67 	vneg.f32	s15, s15
 8025002:	687b      	ldr	r3, [r7, #4]
 8025004:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
                }
                break;
 8025008:	e16f      	b.n	80252ea <parse_term+0x50e>
            case 6: /* Fix status */
                nh->p.data.gga.fix = (uint8_t) parse_number(nh, NULL);
 802500a:	2100      	movs	r1, #0
 802500c:	6878      	ldr	r0, [r7, #4]
 802500e:	f7ff fe35 	bl	8024c7c <parse_number>
 8025012:	4603      	mov	r3, r0
 8025014:	b2da      	uxtb	r2, r3
 8025016:	687b      	ldr	r3, [r7, #4]
 8025018:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                break;
 802501c:	e16e      	b.n	80252fc <parse_term+0x520>
            case 7: /* Satellites in use */
                nh->p.data.gga.sats_in_use = (uint8_t) parse_number(nh, NULL);
 802501e:	2100      	movs	r1, #0
 8025020:	6878      	ldr	r0, [r7, #4]
 8025022:	f7ff fe2b 	bl	8024c7c <parse_number>
 8025026:	4603      	mov	r3, r0
 8025028:	b2da      	uxtb	r2, r3
 802502a:	687b      	ldr	r3, [r7, #4]
 802502c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                break;
 8025030:	e164      	b.n	80252fc <parse_term+0x520>
            case 9: /* Altitude */
                nh->p.data.gga.altitude = parse_float_number(nh, NULL);
 8025032:	2100      	movs	r1, #0
 8025034:	6878      	ldr	r0, [r7, #4]
 8025036:	f7ff fe6b 	bl	8024d10 <parse_float_number>
 802503a:	eef0 7a40 	vmov.f32	s15, s0
 802503e:	687b      	ldr	r3, [r7, #4]
 8025040:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
                break;
 8025044:	e15a      	b.n	80252fc <parse_term+0x520>
            case 11: /* Altitude above ellipsoid */
                nh->p.data.gga.geo_sep = parse_float_number(nh, NULL);
 8025046:	2100      	movs	r1, #0
 8025048:	6878      	ldr	r0, [r7, #4]
 802504a:	f7ff fe61 	bl	8024d10 <parse_float_number>
 802504e:	eef0 7a40 	vmov.f32	s15, s0
 8025052:	687b      	ldr	r3, [r7, #4]
 8025054:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
                break;
 8025058:	e150      	b.n	80252fc <parse_term+0x520>
            default:
                break;
        }
#endif /* NMEA_CFG_STATEMENT_GPGGA */
#if NMEA_CFG_STATEMENT_GPGSA
    } else if (nh->p.stat == STAT_GSA) { /* Process GPGSA statement */
 802505a:	687b      	ldr	r3, [r7, #4]
 802505c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8025060:	2b02      	cmp	r3, #2
 8025062:	d17e      	bne.n	8025162 <parse_term+0x386>
        switch (nh->p.term_num) {
 8025064:	687b      	ldr	r3, [r7, #4]
 8025066:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 802506a:	3b02      	subs	r3, #2
 802506c:	2b0f      	cmp	r3, #15
 802506e:	d85b      	bhi.n	8025128 <parse_term+0x34c>
 8025070:	a201      	add	r2, pc, #4	; (adr r2, 8025078 <parse_term+0x29c>)
 8025072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025076:	bf00      	nop
 8025078:	080250b9 	.word	0x080250b9
 802507c:	08025129 	.word	0x08025129
 8025080:	08025129 	.word	0x08025129
 8025084:	08025129 	.word	0x08025129
 8025088:	08025129 	.word	0x08025129
 802508c:	08025129 	.word	0x08025129
 8025090:	08025129 	.word	0x08025129
 8025094:	08025129 	.word	0x08025129
 8025098:	08025129 	.word	0x08025129
 802509c:	08025129 	.word	0x08025129
 80250a0:	08025129 	.word	0x08025129
 80250a4:	08025129 	.word	0x08025129
 80250a8:	08025129 	.word	0x08025129
 80250ac:	080250cd 	.word	0x080250cd
 80250b0:	080250e1 	.word	0x080250e1
 80250b4:	080250f5 	.word	0x080250f5
            case 2: /* Process fix mode */
                nh->p.data.gsa.fix_mode = (uint8_t) parse_number(nh, NULL);
 80250b8:	2100      	movs	r1, #0
 80250ba:	6878      	ldr	r0, [r7, #4]
 80250bc:	f7ff fdde 	bl	8024c7c <parse_number>
 80250c0:	4603      	mov	r3, r0
 80250c2:	b2da      	uxtb	r2, r3
 80250c4:	687b      	ldr	r3, [r7, #4]
 80250c6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
                break;
 80250ca:	e117      	b.n	80252fc <parse_term+0x520>
            case 15: /* Process PDOP */
                nh->p.data.gsa.dop_p = parse_float_number(nh, NULL);
 80250cc:	2100      	movs	r1, #0
 80250ce:	6878      	ldr	r0, [r7, #4]
 80250d0:	f7ff fe1e 	bl	8024d10 <parse_float_number>
 80250d4:	eef0 7a40 	vmov.f32	s15, s0
 80250d8:	687b      	ldr	r3, [r7, #4]
 80250da:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
                break;
 80250de:	e10d      	b.n	80252fc <parse_term+0x520>
            case 16: /* Process HDOP */
                nh->p.data.gsa.dop_h = parse_float_number(nh, NULL);
 80250e0:	2100      	movs	r1, #0
 80250e2:	6878      	ldr	r0, [r7, #4]
 80250e4:	f7ff fe14 	bl	8024d10 <parse_float_number>
 80250e8:	eef0 7a40 	vmov.f32	s15, s0
 80250ec:	687b      	ldr	r3, [r7, #4]
 80250ee:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
                break;
 80250f2:	e103      	b.n	80252fc <parse_term+0x520>
            case 17: /* Process VDOP */
                nh->p.data.gsa.dop_v = parse_float_number(nh, NULL);
 80250f4:	2100      	movs	r1, #0
 80250f6:	6878      	ldr	r0, [r7, #4]
 80250f8:	f7ff fe0a 	bl	8024d10 <parse_float_number>
 80250fc:	eef0 7a40 	vmov.f32	s15, s0
 8025100:	687b      	ldr	r3, [r7, #4]
 8025102:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
                break;
 8025106:	e0f9      	b.n	80252fc <parse_term+0x520>
 8025108:	08043514 	.word	0x08043514
 802510c:	0804351c 	.word	0x0804351c
 8025110:	08043524 	.word	0x08043524
 8025114:	0804352c 	.word	0x0804352c
 8025118:	08043534 	.word	0x08043534
 802511c:	0804353c 	.word	0x0804353c
 8025120:	08043544 	.word	0x08043544
 8025124:	0804354c 	.word	0x0804354c
            default:
                /* Parse satellite IDs */
                if (nh->p.term_num >= 3 && nh->p.term_num <= 14) {
 8025128:	687b      	ldr	r3, [r7, #4]
 802512a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 802512e:	2b02      	cmp	r3, #2
 8025130:	f240 80dd 	bls.w	80252ee <parse_term+0x512>
 8025134:	687b      	ldr	r3, [r7, #4]
 8025136:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 802513a:	2b0e      	cmp	r3, #14
 802513c:	f200 80d7 	bhi.w	80252ee <parse_term+0x512>
                    nh->p.data.gsa.satellites_ids[nh->p.term_num - 3] = (uint8_t) parse_number(nh, NULL);
 8025140:	2100      	movs	r1, #0
 8025142:	6878      	ldr	r0, [r7, #4]
 8025144:	f7ff fd9a 	bl	8024c7c <parse_number>
 8025148:	4602      	mov	r2, r0
 802514a:	687b      	ldr	r3, [r7, #4]
 802514c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8025150:	3b03      	subs	r3, #3
 8025152:	b2d1      	uxtb	r1, r2
 8025154:	687a      	ldr	r2, [r7, #4]
 8025156:	4413      	add	r3, r2
 8025158:	460a      	mov	r2, r1
 802515a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
                }
                break;
 802515e:	bf00      	nop
 8025160:	e0c5      	b.n	80252ee <parse_term+0x512>
        }
#endif /* NMEA_CFG_STATEMENT_GPGSA */
#if NMEA_CFG_STATEMENT_GPGSV
    } else if (nh->p.stat == STAT_GSV) { /* Process GPGSV statement */
 8025162:	687b      	ldr	r3, [r7, #4]
 8025164:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8025168:	2b03      	cmp	r3, #3
 802516a:	d11b      	bne.n	80251a4 <parse_term+0x3c8>
        switch (nh->p.term_num) {
 802516c:	687b      	ldr	r3, [r7, #4]
 802516e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8025172:	2b02      	cmp	r3, #2
 8025174:	d002      	beq.n	802517c <parse_term+0x3a0>
 8025176:	2b03      	cmp	r3, #3
 8025178:	d00a      	beq.n	8025190 <parse_term+0x3b4>
					default: break;
					}
				}
			}
#endif /* NMEA_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 802517a:	e0bf      	b.n	80252fc <parse_term+0x520>
                nh->p.data.gsv.stat_num = (uint8_t) parse_number(nh, NULL);
 802517c:	2100      	movs	r1, #0
 802517e:	6878      	ldr	r0, [r7, #4]
 8025180:	f7ff fd7c 	bl	8024c7c <parse_number>
 8025184:	4603      	mov	r3, r0
 8025186:	b2da      	uxtb	r2, r3
 8025188:	687b      	ldr	r3, [r7, #4]
 802518a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
                break;
 802518e:	e0b5      	b.n	80252fc <parse_term+0x520>
                nh->p.data.gsv.sats_in_view = (uint8_t) parse_number(nh, NULL);
 8025190:	2100      	movs	r1, #0
 8025192:	6878      	ldr	r0, [r7, #4]
 8025194:	f7ff fd72 	bl	8024c7c <parse_number>
 8025198:	4603      	mov	r3, r0
 802519a:	b2da      	uxtb	r2, r3
 802519c:	687b      	ldr	r3, [r7, #4]
 802519e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
                break;
 80251a2:	e0ab      	b.n	80252fc <parse_term+0x520>
        }
#endif /* NMEA_CFG_STATEMENT_GPGSV */
#if NMEA_CFG_STATEMENT_GPRMC
    } else if (nh->p.stat == STAT_RMC) { /* Process GPRMC statement */
 80251a4:	687b      	ldr	r3, [r7, #4]
 80251a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80251aa:	2b04      	cmp	r3, #4
 80251ac:	f040 80a1 	bne.w	80252f2 <parse_term+0x516>
        switch (nh->p.term_num) {
 80251b0:	687b      	ldr	r3, [r7, #4]
 80251b2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80251b6:	3b02      	subs	r3, #2
 80251b8:	2b09      	cmp	r3, #9
 80251ba:	f200 809c 	bhi.w	80252f6 <parse_term+0x51a>
 80251be:	a201      	add	r2, pc, #4	; (adr r2, 80251c4 <parse_term+0x3e8>)
 80251c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80251c4:	080251ed 	.word	0x080251ed
 80251c8:	080252f7 	.word	0x080252f7
 80251cc:	080252f7 	.word	0x080252f7
 80251d0:	080252f7 	.word	0x080252f7
 80251d4:	080252f7 	.word	0x080252f7
 80251d8:	08025207 	.word	0x08025207
 80251dc:	0802521b 	.word	0x0802521b
 80251e0:	0802522f 	.word	0x0802522f
 80251e4:	080252a9 	.word	0x080252a9
 80251e8:	080252bd 	.word	0x080252bd
            case 2: /* Process valid status */
                nh->p.data.rmc.is_valid = (nh->p.term_str[0] == 'A');
 80251ec:	687b      	ldr	r3, [r7, #4]
 80251ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80251f2:	2b41      	cmp	r3, #65	; 0x41
 80251f4:	bf0c      	ite	eq
 80251f6:	2301      	moveq	r3, #1
 80251f8:	2300      	movne	r3, #0
 80251fa:	b2db      	uxtb	r3, r3
 80251fc:	461a      	mov	r2, r3
 80251fe:	687b      	ldr	r3, [r7, #4]
 8025200:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
                break;
 8025204:	e07a      	b.n	80252fc <parse_term+0x520>
            case 7: /* Process ground speed in knots */
                nh->p.data.rmc.speed = parse_float_number(nh, NULL);
 8025206:	2100      	movs	r1, #0
 8025208:	6878      	ldr	r0, [r7, #4]
 802520a:	f7ff fd81 	bl	8024d10 <parse_float_number>
 802520e:	eef0 7a40 	vmov.f32	s15, s0
 8025212:	687b      	ldr	r3, [r7, #4]
 8025214:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
                break;
 8025218:	e070      	b.n	80252fc <parse_term+0x520>
            case 8: /* Process true ground coarse */
                nh->p.data.rmc.coarse = parse_float_number(nh, NULL);
 802521a:	2100      	movs	r1, #0
 802521c:	6878      	ldr	r0, [r7, #4]
 802521e:	f7ff fd77 	bl	8024d10 <parse_float_number>
 8025222:	eef0 7a40 	vmov.f32	s15, s0
 8025226:	687b      	ldr	r3, [r7, #4]
 8025228:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
                break;
 802522c:	e066      	b.n	80252fc <parse_term+0x520>
            case 9: /* Process date */
                nh->p.data.rmc.date = (uint8_t) (10 * CTN(nh->p.term_str[0]) + CTN(nh->p.term_str[1]));
 802522e:	687b      	ldr	r3, [r7, #4]
 8025230:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8025234:	3b30      	subs	r3, #48	; 0x30
 8025236:	b2db      	uxtb	r3, r3
 8025238:	461a      	mov	r2, r3
 802523a:	0092      	lsls	r2, r2, #2
 802523c:	4413      	add	r3, r2
 802523e:	005b      	lsls	r3, r3, #1
 8025240:	b2da      	uxtb	r2, r3
 8025242:	687b      	ldr	r3, [r7, #4]
 8025244:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8025248:	4413      	add	r3, r2
 802524a:	b2db      	uxtb	r3, r3
 802524c:	3b30      	subs	r3, #48	; 0x30
 802524e:	b2da      	uxtb	r2, r3
 8025250:	687b      	ldr	r3, [r7, #4]
 8025252:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
                nh->p.data.rmc.month = (uint8_t) (10 * CTN(nh->p.term_str[2]) + CTN(nh->p.term_str[3]));
 8025256:	687b      	ldr	r3, [r7, #4]
 8025258:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 802525c:	3b30      	subs	r3, #48	; 0x30
 802525e:	b2db      	uxtb	r3, r3
 8025260:	461a      	mov	r2, r3
 8025262:	0092      	lsls	r2, r2, #2
 8025264:	4413      	add	r3, r2
 8025266:	005b      	lsls	r3, r3, #1
 8025268:	b2da      	uxtb	r2, r3
 802526a:	687b      	ldr	r3, [r7, #4]
 802526c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8025270:	4413      	add	r3, r2
 8025272:	b2db      	uxtb	r3, r3
 8025274:	3b30      	subs	r3, #48	; 0x30
 8025276:	b2da      	uxtb	r2, r3
 8025278:	687b      	ldr	r3, [r7, #4]
 802527a:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
                nh->p.data.rmc.year = (uint8_t) (10 * CTN(nh->p.term_str[4]) + CTN(nh->p.term_str[5]));
 802527e:	687b      	ldr	r3, [r7, #4]
 8025280:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8025284:	3b30      	subs	r3, #48	; 0x30
 8025286:	b2db      	uxtb	r3, r3
 8025288:	461a      	mov	r2, r3
 802528a:	0092      	lsls	r2, r2, #2
 802528c:	4413      	add	r3, r2
 802528e:	005b      	lsls	r3, r3, #1
 8025290:	b2da      	uxtb	r2, r3
 8025292:	687b      	ldr	r3, [r7, #4]
 8025294:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8025298:	4413      	add	r3, r2
 802529a:	b2db      	uxtb	r3, r3
 802529c:	3b30      	subs	r3, #48	; 0x30
 802529e:	b2da      	uxtb	r2, r3
 80252a0:	687b      	ldr	r3, [r7, #4]
 80252a2:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
                break;
 80252a6:	e029      	b.n	80252fc <parse_term+0x520>
            case 10: /* Process magnetic variation */
                nh->p.data.rmc.variation = parse_float_number(nh, NULL);
 80252a8:	2100      	movs	r1, #0
 80252aa:	6878      	ldr	r0, [r7, #4]
 80252ac:	f7ff fd30 	bl	8024d10 <parse_float_number>
 80252b0:	eef0 7a40 	vmov.f32	s15, s0
 80252b4:	687b      	ldr	r3, [r7, #4]
 80252b6:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
                break;
 80252ba:	e01f      	b.n	80252fc <parse_term+0x520>
            case 11: /* Process magnetic variation east/west */
                if (nh->p.term_str[0] == 'W' || nh->p.term_str[0] == 'w') {
 80252bc:	687b      	ldr	r3, [r7, #4]
 80252be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80252c2:	2b57      	cmp	r3, #87	; 0x57
 80252c4:	d004      	beq.n	80252d0 <parse_term+0x4f4>
 80252c6:	687b      	ldr	r3, [r7, #4]
 80252c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80252cc:	2b77      	cmp	r3, #119	; 0x77
 80252ce:	d114      	bne.n	80252fa <parse_term+0x51e>
                    nh->p.data.rmc.variation = -nh->p.data.rmc.variation;
 80252d0:	687b      	ldr	r3, [r7, #4]
 80252d2:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80252d6:	eef1 7a67 	vneg.f32	s15, s15
 80252da:	687b      	ldr	r3, [r7, #4]
 80252dc:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
                }
                break;
 80252e0:	e00b      	b.n	80252fa <parse_term+0x51e>
                break;
 80252e2:	bf00      	nop
 80252e4:	e00a      	b.n	80252fc <parse_term+0x520>
                break;
 80252e6:	bf00      	nop
 80252e8:	e008      	b.n	80252fc <parse_term+0x520>
                break;
 80252ea:	bf00      	nop
 80252ec:	e006      	b.n	80252fc <parse_term+0x520>
                break;
 80252ee:	bf00      	nop
 80252f0:	e004      	b.n	80252fc <parse_term+0x520>
            default:
                break;
        }
#endif /* NMEA_CFG_STATEMENT_GPRMC */
    }
 80252f2:	bf00      	nop
 80252f4:	e002      	b.n	80252fc <parse_term+0x520>
                break;
 80252f6:	bf00      	nop
 80252f8:	e000      	b.n	80252fc <parse_term+0x520>
                break;
 80252fa:	bf00      	nop
    return 1;
 80252fc:	2301      	movs	r3, #1
}
 80252fe:	4618      	mov	r0, r3
 8025300:	3708      	adds	r7, #8
 8025302:	46bd      	mov	sp, r7
 8025304:	bd80      	pop	{r7, pc}
 8025306:	bf00      	nop

08025308 <check_crc>:
/**
 * @brief           Compare calculated CRC with received CRC
 * @param[in]       gh: NMEA handle
 * @return          `1` on success, `0` otherwise
 */
static uint8_t check_crc(nmea_t *nh) {
 8025308:	b480      	push	{r7}
 802530a:	b085      	sub	sp, #20
 802530c:	af00      	add	r7, sp, #0
 802530e:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t) ((CHTN(nh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(nh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 8025310:	687b      	ldr	r3, [r7, #4]
 8025312:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8025316:	2b2f      	cmp	r3, #47	; 0x2f
 8025318:	d90b      	bls.n	8025332 <check_crc+0x2a>
 802531a:	687b      	ldr	r3, [r7, #4]
 802531c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8025320:	2b39      	cmp	r3, #57	; 0x39
 8025322:	d806      	bhi.n	8025332 <check_crc+0x2a>
 8025324:	687b      	ldr	r3, [r7, #4]
 8025326:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802532a:	011b      	lsls	r3, r3, #4
 802532c:	b2db      	uxtb	r3, r3
 802532e:	b25a      	sxtb	r2, r3
 8025330:	e026      	b.n	8025380 <check_crc+0x78>
 8025332:	687b      	ldr	r3, [r7, #4]
 8025334:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8025338:	2b60      	cmp	r3, #96	; 0x60
 802533a:	d90d      	bls.n	8025358 <check_crc+0x50>
 802533c:	687b      	ldr	r3, [r7, #4]
 802533e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8025342:	2b7a      	cmp	r3, #122	; 0x7a
 8025344:	d808      	bhi.n	8025358 <check_crc+0x50>
 8025346:	687b      	ldr	r3, [r7, #4]
 8025348:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802534c:	3b57      	subs	r3, #87	; 0x57
 802534e:	b2db      	uxtb	r3, r3
 8025350:	011b      	lsls	r3, r3, #4
 8025352:	b2db      	uxtb	r3, r3
 8025354:	b25a      	sxtb	r2, r3
 8025356:	e013      	b.n	8025380 <check_crc+0x78>
 8025358:	687b      	ldr	r3, [r7, #4]
 802535a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802535e:	2b40      	cmp	r3, #64	; 0x40
 8025360:	d90d      	bls.n	802537e <check_crc+0x76>
 8025362:	687b      	ldr	r3, [r7, #4]
 8025364:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8025368:	2b5a      	cmp	r3, #90	; 0x5a
 802536a:	d808      	bhi.n	802537e <check_crc+0x76>
 802536c:	687b      	ldr	r3, [r7, #4]
 802536e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8025372:	3b37      	subs	r3, #55	; 0x37
 8025374:	b2db      	uxtb	r3, r3
 8025376:	011b      	lsls	r3, r3, #4
 8025378:	b2db      	uxtb	r3, r3
 802537a:	b25a      	sxtb	r2, r3
 802537c:	e000      	b.n	8025380 <check_crc+0x78>
 802537e:	2200      	movs	r2, #0
 8025380:	687b      	ldr	r3, [r7, #4]
 8025382:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8025386:	2b2f      	cmp	r3, #47	; 0x2f
 8025388:	d90c      	bls.n	80253a4 <check_crc+0x9c>
 802538a:	687b      	ldr	r3, [r7, #4]
 802538c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8025390:	2b39      	cmp	r3, #57	; 0x39
 8025392:	d807      	bhi.n	80253a4 <check_crc+0x9c>
 8025394:	687b      	ldr	r3, [r7, #4]
 8025396:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 802539a:	b25b      	sxtb	r3, r3
 802539c:	f003 030f 	and.w	r3, r3, #15
 80253a0:	b25b      	sxtb	r3, r3
 80253a2:	e028      	b.n	80253f6 <check_crc+0xee>
 80253a4:	687b      	ldr	r3, [r7, #4]
 80253a6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80253aa:	2b60      	cmp	r3, #96	; 0x60
 80253ac:	d90e      	bls.n	80253cc <check_crc+0xc4>
 80253ae:	687b      	ldr	r3, [r7, #4]
 80253b0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80253b4:	2b7a      	cmp	r3, #122	; 0x7a
 80253b6:	d809      	bhi.n	80253cc <check_crc+0xc4>
 80253b8:	687b      	ldr	r3, [r7, #4]
 80253ba:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80253be:	3b57      	subs	r3, #87	; 0x57
 80253c0:	b2db      	uxtb	r3, r3
 80253c2:	b25b      	sxtb	r3, r3
 80253c4:	f003 030f 	and.w	r3, r3, #15
 80253c8:	b25b      	sxtb	r3, r3
 80253ca:	e014      	b.n	80253f6 <check_crc+0xee>
 80253cc:	687b      	ldr	r3, [r7, #4]
 80253ce:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80253d2:	2b40      	cmp	r3, #64	; 0x40
 80253d4:	d90e      	bls.n	80253f4 <check_crc+0xec>
 80253d6:	687b      	ldr	r3, [r7, #4]
 80253d8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80253dc:	2b5a      	cmp	r3, #90	; 0x5a
 80253de:	d809      	bhi.n	80253f4 <check_crc+0xec>
 80253e0:	687b      	ldr	r3, [r7, #4]
 80253e2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80253e6:	3b37      	subs	r3, #55	; 0x37
 80253e8:	b2db      	uxtb	r3, r3
 80253ea:	b25b      	sxtb	r3, r3
 80253ec:	f003 030f 	and.w	r3, r3, #15
 80253f0:	b25b      	sxtb	r3, r3
 80253f2:	e000      	b.n	80253f6 <check_crc+0xee>
 80253f4:	2300      	movs	r3, #0
 80253f6:	4313      	orrs	r3, r2
 80253f8:	b25b      	sxtb	r3, r3
 80253fa:	73fb      	strb	r3, [r7, #15]
    return nh->p.crc_calc == crc; /* They must match! */
 80253fc:	687b      	ldr	r3, [r7, #4]
 80253fe:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8025402:	7bfa      	ldrb	r2, [r7, #15]
 8025404:	429a      	cmp	r2, r3
 8025406:	bf0c      	ite	eq
 8025408:	2301      	moveq	r3, #1
 802540a:	2300      	movne	r3, #0
 802540c:	b2db      	uxtb	r3, r3
}
 802540e:	4618      	mov	r0, r3
 8025410:	3714      	adds	r7, #20
 8025412:	46bd      	mov	sp, r7
 8025414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025418:	4770      	bx	lr

0802541a <copy_from_tmp_memory>:
/**
 * @brief           Copy temporary memory to user memory
 * @param[in]       gh: NMEA handle
 * @return          `1` on success, `0` otherwise
 */
static uint8_t copy_from_tmp_memory(nmea_t *nh) {
 802541a:	b580      	push	{r7, lr}
 802541c:	b082      	sub	sp, #8
 802541e:	af00      	add	r7, sp, #0
 8025420:	6078      	str	r0, [r7, #4]
    if (0) {
#if NMEA_CFG_STATEMENT_GPGGA
    } else if (nh->p.stat == STAT_GGA) {
 8025422:	687b      	ldr	r3, [r7, #4]
 8025424:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8025428:	2b01      	cmp	r3, #1
 802542a:	d129      	bne.n	8025480 <copy_from_tmp_memory+0x66>
        nh->latitude = nh->p.data.gga.latitude;
 802542c:	687b      	ldr	r3, [r7, #4]
 802542e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8025430:	687b      	ldr	r3, [r7, #4]
 8025432:	601a      	str	r2, [r3, #0]
        nh->longitude = nh->p.data.gga.longitude;
 8025434:	687b      	ldr	r3, [r7, #4]
 8025436:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8025438:	687b      	ldr	r3, [r7, #4]
 802543a:	605a      	str	r2, [r3, #4]
        nh->altitude = nh->p.data.gga.altitude;
 802543c:	687b      	ldr	r3, [r7, #4]
 802543e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8025440:	687b      	ldr	r3, [r7, #4]
 8025442:	609a      	str	r2, [r3, #8]
        nh->geo_sep = nh->p.data.gga.geo_sep;
 8025444:	687b      	ldr	r3, [r7, #4]
 8025446:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8025448:	687b      	ldr	r3, [r7, #4]
 802544a:	60da      	str	r2, [r3, #12]
        nh->sats_in_use = nh->p.data.gga.sats_in_use;
 802544c:	687b      	ldr	r3, [r7, #4]
 802544e:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8025452:	687b      	ldr	r3, [r7, #4]
 8025454:	741a      	strb	r2, [r3, #16]
        nh->fix = nh->p.data.gga.fix;
 8025456:	687b      	ldr	r3, [r7, #4]
 8025458:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 802545c:	687b      	ldr	r3, [r7, #4]
 802545e:	745a      	strb	r2, [r3, #17]
        nh->hours = nh->p.data.gga.hours;
 8025460:	687b      	ldr	r3, [r7, #4]
 8025462:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
 8025466:	687b      	ldr	r3, [r7, #4]
 8025468:	749a      	strb	r2, [r3, #18]
        nh->minutes = nh->p.data.gga.minutes;
 802546a:	687b      	ldr	r3, [r7, #4]
 802546c:	f893 206b 	ldrb.w	r2, [r3, #107]	; 0x6b
 8025470:	687b      	ldr	r3, [r7, #4]
 8025472:	74da      	strb	r2, [r3, #19]
        nh->seconds = nh->p.data.gga.seconds;
 8025474:	687b      	ldr	r3, [r7, #4]
 8025476:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
 802547a:	687b      	ldr	r3, [r7, #4]
 802547c:	751a      	strb	r2, [r3, #20]
 802547e:	e055      	b.n	802552c <copy_from_tmp_memory+0x112>
#endif /* NMEA_CFG_STATEMENT_GPGGA */
#if NMEA_CFG_STATEMENT_GPGSA
    } else if (nh->p.stat == STAT_GSA) {
 8025480:	687b      	ldr	r3, [r7, #4]
 8025482:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8025486:	2b02      	cmp	r3, #2
 8025488:	d11b      	bne.n	80254c2 <copy_from_tmp_memory+0xa8>
        nh->dop_h = nh->p.data.gsa.dop_h;
 802548a:	687b      	ldr	r3, [r7, #4]
 802548c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 802548e:	687b      	ldr	r3, [r7, #4]
 8025490:	619a      	str	r2, [r3, #24]
        nh->dop_p = nh->p.data.gsa.dop_p;
 8025492:	687b      	ldr	r3, [r7, #4]
 8025494:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8025496:	687b      	ldr	r3, [r7, #4]
 8025498:	621a      	str	r2, [r3, #32]
        nh->dop_v = nh->p.data.gsa.dop_v;
 802549a:	687b      	ldr	r3, [r7, #4]
 802549c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 802549e:	687b      	ldr	r3, [r7, #4]
 80254a0:	61da      	str	r2, [r3, #28]
        nh->fix_mode = nh->p.data.gsa.fix_mode;
 80254a2:	687b      	ldr	r3, [r7, #4]
 80254a4:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 80254a8:	687b      	ldr	r3, [r7, #4]
 80254aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        memcpy(nh->satellites_ids, nh->p.data.gsa.satellites_ids, sizeof(nh->satellites_ids));
 80254ae:	687b      	ldr	r3, [r7, #4]
 80254b0:	f103 0025 	add.w	r0, r3, #37	; 0x25
 80254b4:	687b      	ldr	r3, [r7, #4]
 80254b6:	3365      	adds	r3, #101	; 0x65
 80254b8:	220c      	movs	r2, #12
 80254ba:	4619      	mov	r1, r3
 80254bc:	f01a fa9f 	bl	803f9fe <memcpy>
 80254c0:	e034      	b.n	802552c <copy_from_tmp_memory+0x112>
#endif /* NMEA_CFG_STATEMENT_GPGSA */
#if NMEA_CFG_STATEMENT_GPGSV
    } else if (nh->p.stat == STAT_GSV) {
 80254c2:	687b      	ldr	r3, [r7, #4]
 80254c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80254c8:	2b03      	cmp	r3, #3
 80254ca:	d106      	bne.n	80254da <copy_from_tmp_memory+0xc0>
        nh->sats_in_view = nh->p.data.gsv.sats_in_view;
 80254cc:	687b      	ldr	r3, [r7, #4]
 80254ce:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80254d2:	687b      	ldr	r3, [r7, #4]
 80254d4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80254d8:	e028      	b.n	802552c <copy_from_tmp_memory+0x112>
#endif /* NMEA_CFG_STATEMENT_GPGSV */
#if NMEA_CFG_STATEMENT_GPRMC
    } else if (nh->p.stat == STAT_RMC) {
 80254da:	687b      	ldr	r3, [r7, #4]
 80254dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80254e0:	2b04      	cmp	r3, #4
 80254e2:	d123      	bne.n	802552c <copy_from_tmp_memory+0x112>
        nh->coarse = nh->p.data.rmc.coarse;
 80254e4:	687b      	ldr	r3, [r7, #4]
 80254e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80254e8:	687b      	ldr	r3, [r7, #4]
 80254ea:	639a      	str	r2, [r3, #56]	; 0x38
        nh->is_valid = nh->p.data.rmc.is_valid;
 80254ec:	687b      	ldr	r3, [r7, #4]
 80254ee:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80254f2:	687b      	ldr	r3, [r7, #4]
 80254f4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
        nh->speed = nh->p.data.rmc.speed;
 80254f8:	687b      	ldr	r3, [r7, #4]
 80254fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80254fc:	687b      	ldr	r3, [r7, #4]
 80254fe:	635a      	str	r2, [r3, #52]	; 0x34
        nh->variation = nh->p.data.rmc.variation;
 8025500:	687b      	ldr	r3, [r7, #4]
 8025502:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8025504:	687b      	ldr	r3, [r7, #4]
 8025506:	63da      	str	r2, [r3, #60]	; 0x3c
        nh->date = nh->p.data.rmc.date;
 8025508:	687b      	ldr	r3, [r7, #4]
 802550a:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
 802550e:	687b      	ldr	r3, [r7, #4]
 8025510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        nh->month = nh->p.data.rmc.month;
 8025514:	687b      	ldr	r3, [r7, #4]
 8025516:	f893 205a 	ldrb.w	r2, [r3, #90]	; 0x5a
 802551a:	687b      	ldr	r3, [r7, #4]
 802551c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        nh->year = nh->p.data.rmc.year;
 8025520:	687b      	ldr	r3, [r7, #4]
 8025522:	f893 205b 	ldrb.w	r2, [r3, #91]	; 0x5b
 8025526:	687b      	ldr	r3, [r7, #4]
 8025528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
#endif /* NMEA_CFG_STATEMENT_GPRMC */
    }
    return 1;
 802552c:	2301      	movs	r3, #1
}
 802552e:	4618      	mov	r0, r3
 8025530:	3708      	adds	r7, #8
 8025532:	46bd      	mov	sp, r7
 8025534:	bd80      	pop	{r7, pc}

08025536 <ce_set>:
/* Private functions prototype ------------------------------------------------*/
static void csn_set(nrf24l01 *dev);
static void csn_reset(nrf24l01 *dev);

/* Public functions implementation ---------------------------------------------*/
void ce_set(nrf24l01 *dev) {
 8025536:	b580      	push	{r7, lr}
 8025538:	b082      	sub	sp, #8
 802553a:	af00      	add	r7, sp, #0
 802553c:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(dev->config.ce_port, dev->config.ce_pin, GPIO_PIN_SET);
 802553e:	687b      	ldr	r3, [r7, #4]
 8025540:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8025542:	687b      	ldr	r3, [r7, #4]
 8025544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8025546:	2201      	movs	r2, #1
 8025548:	4619      	mov	r1, r3
 802554a:	f00a fd6f 	bl	803002c <HAL_GPIO_WritePin>
}
 802554e:	bf00      	nop
 8025550:	3708      	adds	r7, #8
 8025552:	46bd      	mov	sp, r7
 8025554:	bd80      	pop	{r7, pc}

08025556 <ce_reset>:

void ce_reset(nrf24l01 *dev) {
 8025556:	b580      	push	{r7, lr}
 8025558:	b082      	sub	sp, #8
 802555a:	af00      	add	r7, sp, #0
 802555c:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(dev->config.ce_port, dev->config.ce_pin, GPIO_PIN_RESET);
 802555e:	687b      	ldr	r3, [r7, #4]
 8025560:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8025562:	687b      	ldr	r3, [r7, #4]
 8025564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8025566:	2200      	movs	r2, #0
 8025568:	4619      	mov	r1, r3
 802556a:	f00a fd5f 	bl	803002c <HAL_GPIO_WritePin>
}
 802556e:	bf00      	nop
 8025570:	3708      	adds	r7, #8
 8025572:	46bd      	mov	sp, r7
 8025574:	bd80      	pop	{r7, pc}
	...

08025578 <nrf_init>:
    config->irq_pin = INT_KEYLESS_IRQ_Pin;

    return NRF_OK;
}

NRF_RESULT nrf_init(nrf24l01 *dev, nrf24l01_config *config) {
 8025578:	b5b0      	push	{r4, r5, r7, lr}
 802557a:	b084      	sub	sp, #16
 802557c:	af00      	add	r7, sp, #0
 802557e:	6078      	str	r0, [r7, #4]
 8025580:	6039      	str	r1, [r7, #0]
    dev->config = *config;
 8025582:	687a      	ldr	r2, [r7, #4]
 8025584:	683b      	ldr	r3, [r7, #0]
 8025586:	4614      	mov	r4, r2
 8025588:	461d      	mov	r5, r3
 802558a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802558c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802558e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025590:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025592:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025594:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025596:	682b      	ldr	r3, [r5, #0]
 8025598:	6023      	str	r3, [r4, #0]
    uint8_t config_reg = 0;
 802559a:	2300      	movs	r3, #0
 802559c:	73bb      	strb	r3, [r7, #14]

    // check hardware
    NRF_RESULT result = NRF_OK;
 802559e:	2300      	movs	r3, #0
 80255a0:	73fb      	strb	r3, [r7, #15]
    do {
        LOG_StrLn("NRF:Init");
 80255a2:	4850      	ldr	r0, [pc, #320]	; (80256e4 <nrf_init+0x16c>)
 80255a4:	f018 ff3e 	bl	803e424 <LOG_StrLn>

        // turn on the mosfet
        HAL_GPIO_WritePin(INT_KEYLESS_PWR_GPIO_Port, INT_KEYLESS_PWR_Pin, 0);
 80255a8:	2200      	movs	r2, #0
 80255aa:	2120      	movs	r1, #32
 80255ac:	484e      	ldr	r0, [pc, #312]	; (80256e8 <nrf_init+0x170>)
 80255ae:	f00a fd3d 	bl	803002c <HAL_GPIO_WritePin>
        _DelayMS(500);
 80255b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80255b6:	f01a f903 	bl	803f7c0 <_DelayMS>
        HAL_GPIO_WritePin(INT_KEYLESS_PWR_GPIO_Port, INT_KEYLESS_PWR_Pin, 1);
 80255ba:	2201      	movs	r2, #1
 80255bc:	2120      	movs	r1, #32
 80255be:	484a      	ldr	r0, [pc, #296]	; (80256e8 <nrf_init+0x170>)
 80255c0:	f00a fd34 	bl	803002c <HAL_GPIO_WritePin>
        _DelayMS(500);
 80255c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80255c8:	f01a f8fa 	bl	803f7c0 <_DelayMS>

        result = nrf_check(&nrf);
 80255cc:	4847      	ldr	r0, [pc, #284]	; (80256ec <nrf_init+0x174>)
 80255ce:	f000 f88f 	bl	80256f0 <nrf_check>
 80255d2:	4603      	mov	r3, r0
 80255d4:	73fb      	strb	r3, [r7, #15]

        if (result == NRF_ERROR) {
 80255d6:	7bfb      	ldrb	r3, [r7, #15]
 80255d8:	2b01      	cmp	r3, #1
 80255da:	d103      	bne.n	80255e4 <nrf_init+0x6c>
            _DelayMS(1000);
 80255dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80255e0:	f01a f8ee 	bl	803f7c0 <_DelayMS>
        }
    } while (result == NRF_ERROR);
 80255e4:	7bfb      	ldrb	r3, [r7, #15]
 80255e6:	2b01      	cmp	r3, #1
 80255e8:	d0db      	beq.n	80255a2 <nrf_init+0x2a>

    // enter standby I mode
    ce_reset(dev);
 80255ea:	6878      	ldr	r0, [r7, #4]
 80255ec:	f7ff ffb3 	bl	8025556 <ce_reset>
    nrf_power_up(dev, 1);
 80255f0:	2101      	movs	r1, #1
 80255f2:	6878      	ldr	r0, [r7, #4]
 80255f4:	f000 fcf9 	bl	8025fea <nrf_power_up>

    // wait for powerup
    while ((config_reg & 2) == 0) {
 80255f8:	e006      	b.n	8025608 <nrf_init+0x90>
        nrf_read_register(dev, NRF_CONFIG, &config_reg);
 80255fa:	f107 030e 	add.w	r3, r7, #14
 80255fe:	461a      	mov	r2, r3
 8025600:	2100      	movs	r1, #0
 8025602:	6878      	ldr	r0, [r7, #4]
 8025604:	f000 f980 	bl	8025908 <nrf_read_register>
    while ((config_reg & 2) == 0) {
 8025608:	7bbb      	ldrb	r3, [r7, #14]
 802560a:	f003 0302 	and.w	r3, r3, #2
 802560e:	2b00      	cmp	r3, #0
 8025610:	d0f3      	beq.n	80255fa <nrf_init+0x82>
    }

    // address width
    nrf_set_address_width(dev, dev->config.addr_width);
 8025612:	687b      	ldr	r3, [r7, #4]
 8025614:	78db      	ldrb	r3, [r3, #3]
 8025616:	4619      	mov	r1, r3
 8025618:	6878      	ldr	r0, [r7, #4]
 802561a:	f000 fc05 	bl	8025e28 <nrf_set_address_width>
    // openWritingPipe
    nrf_set_tx_address(dev, dev->config.tx_address);
 802561e:	687b      	ldr	r3, [r7, #4]
 8025620:	68db      	ldr	r3, [r3, #12]
 8025622:	4619      	mov	r1, r3
 8025624:	6878      	ldr	r0, [r7, #4]
 8025626:	f000 fdfb 	bl	8026220 <nrf_set_tx_address>
    // openReadingPipe
    nrf_set_rx_payload_width_p0(dev, dev->config.payload_length);
 802562a:	687b      	ldr	r3, [r7, #4]
 802562c:	791b      	ldrb	r3, [r3, #4]
 802562e:	4619      	mov	r1, r3
 8025630:	6878      	ldr	r0, [r7, #4]
 8025632:	f000 fe11 	bl	8026258 <nrf_set_rx_payload_width_p0>
    nrf_set_rx_address_p0(dev, dev->config.rx_address);
 8025636:	687b      	ldr	r3, [r7, #4]
 8025638:	689b      	ldr	r3, [r3, #8]
 802563a:	4619      	mov	r1, r3
 802563c:	6878      	ldr	r0, [r7, #4]
 802563e:	f000 fdd3 	bl	80261e8 <nrf_set_rx_address_p0>
    // enable data pipe0
    nrf_set_rx_pipes(dev, 0x01);
 8025642:	2101      	movs	r1, #1
 8025644:	6878      	ldr	r0, [r7, #4]
 8025646:	f000 fc21 	bl	8025e8c <nrf_set_rx_pipes>

    // CRC
    nrf_enable_crc(dev, 1);
 802564a:	2101      	movs	r1, #1
 802564c:	6878      	ldr	r0, [r7, #4]
 802564e:	f000 fc63 	bl	8025f18 <nrf_enable_crc>
    nrf_set_crc_width(dev, dev->config.crc_width);
 8025652:	687b      	ldr	r3, [r7, #4]
 8025654:	789b      	ldrb	r3, [r3, #2]
 8025656:	4619      	mov	r1, r3
 8025658:	6878      	ldr	r0, [r7, #4]
 802565a:	f000 fc90 	bl	8025f7e <nrf_set_crc_width>
    // channel
    nrf_set_rf_channel(dev, dev->config.rf_channel);
 802565e:	687b      	ldr	r3, [r7, #4]
 8025660:	79db      	ldrb	r3, [r3, #7]
 8025662:	4619      	mov	r1, r3
 8025664:	6878      	ldr	r0, [r7, #4]
 8025666:	f000 fb3e 	bl	8025ce6 <nrf_set_rf_channel>
    // data rate
    nrf_set_data_rate(dev, dev->config.data_rate);
 802566a:	687b      	ldr	r3, [r7, #4]
 802566c:	781b      	ldrb	r3, [r3, #0]
 802566e:	4619      	mov	r1, r3
 8025670:	6878      	ldr	r0, [r7, #4]
 8025672:	f000 fa92 	bl	8025b9a <nrf_set_data_rate>
    // tx power
    nrf_set_tx_power(dev, dev->config.tx_power);
 8025676:	687b      	ldr	r3, [r7, #4]
 8025678:	785b      	ldrb	r3, [r3, #1]
 802567a:	4619      	mov	r1, r3
 802567c:	6878      	ldr	r0, [r7, #4]
 802567e:	f000 fad4 	bl	8025c2a <nrf_set_tx_power>

    // retransmission (auto-ack ON)
    nrf_set_retransmittion_count(dev, dev->config.retransmit_count);
 8025682:	687b      	ldr	r3, [r7, #4]
 8025684:	795b      	ldrb	r3, [r3, #5]
 8025686:	4619      	mov	r1, r3
 8025688:	6878      	ldr	r0, [r7, #4]
 802568a:	f000 fb5d 	bl	8025d48 <nrf_set_retransmittion_count>
    nrf_set_retransmittion_delay(dev, dev->config.retransmit_delay);
 802568e:	687b      	ldr	r3, [r7, #4]
 8025690:	799b      	ldrb	r3, [r3, #6]
 8025692:	4619      	mov	r1, r3
 8025694:	6878      	ldr	r0, [r7, #4]
 8025696:	f000 fb8d 	bl	8025db4 <nrf_set_retransmittion_delay>
    // auto ack (Enhanced ShockBurst) on pipe0
    nrf_enable_auto_ack(dev, 0x00);
 802569a:	2100      	movs	r1, #0
 802569c:	6878      	ldr	r0, [r7, #4]
 802569e:	f000 fc0b 	bl	8025eb8 <nrf_enable_auto_ack>
    //	nrf_disable_auto_ack(dev);

    // clear interrupt
    nrf_clear_interrupts(dev);
 80256a2:	6878      	ldr	r0, [r7, #4]
 80256a4:	f000 faf7 	bl	8025c96 <nrf_clear_interrupts>
    // set interrupt
    nrf_enable_rx_data_ready_irq(dev, 1);
 80256a8:	2101      	movs	r1, #1
 80256aa:	6878      	ldr	r0, [r7, #4]
 80256ac:	f000 fd03 	bl	80260b6 <nrf_enable_rx_data_ready_irq>
    nrf_enable_tx_data_sent_irq(dev, 1);
 80256b0:	2101      	movs	r1, #1
 80256b2:	6878      	ldr	r0, [r7, #4]
 80256b4:	f000 fd32 	bl	802611c <nrf_enable_tx_data_sent_irq>
    nrf_enable_max_retransmit_irq(dev, 1);
 80256b8:	2101      	movs	r1, #1
 80256ba:	6878      	ldr	r0, [r7, #4]
 80256bc:	f000 fd61 	bl	8026182 <nrf_enable_max_retransmit_irq>

    // set as PRX
    nrf_rx_tx_control(dev, NRF_STATE_RX);
 80256c0:	2101      	movs	r1, #1
 80256c2:	6878      	ldr	r0, [r7, #4]
 80256c4:	f000 fcc4 	bl	8026050 <nrf_rx_tx_control>
    // clear FIFO
    nrf_flush_tx(dev);
 80256c8:	6878      	ldr	r0, [r7, #4]
 80256ca:	f000 fa2c 	bl	8025b26 <nrf_flush_tx>
    nrf_flush_rx(dev);
 80256ce:	6878      	ldr	r0, [r7, #4]
 80256d0:	f000 fa46 	bl	8025b60 <nrf_flush_rx>
    // exit standby mode, now become RX MODE
    ce_set(dev);
 80256d4:	6878      	ldr	r0, [r7, #4]
 80256d6:	f7ff ff2e 	bl	8025536 <ce_set>

    return NRF_OK;
 80256da:	2300      	movs	r3, #0
}
 80256dc:	4618      	mov	r0, r3
 80256de:	3710      	adds	r7, #16
 80256e0:	46bd      	mov	sp, r7
 80256e2:	bdb0      	pop	{r4, r5, r7, pc}
 80256e4:	08043554 	.word	0x08043554
 80256e8:	40020400 	.word	0x40020400
 80256ec:	200083cc 	.word	0x200083cc

080256f0 <nrf_check>:

// Checks the presence of the nRF24L01
NRF_RESULT nrf_check(nrf24l01 *dev) {
 80256f0:	b580      	push	{r7, lr}
 80256f2:	b086      	sub	sp, #24
 80256f4:	af00      	add	r7, sp, #0
 80256f6:	6078      	str	r0, [r7, #4]
    char *nRF24_TEST_ADDR = "nRF24";
 80256f8:	4b16      	ldr	r3, [pc, #88]	; (8025754 <nrf_check+0x64>)
 80256fa:	60fb      	str	r3, [r7, #12]
    uint8_t rxbuf[sizeof(nRF24_TEST_ADDR) - 1U];
    uint8_t *ptr = (uint8_t*) nRF24_TEST_ADDR;
 80256fc:	68fb      	ldr	r3, [r7, #12]
 80256fe:	617b      	str	r3, [r7, #20]
    uint8_t idx;

    // Write the test address to the TX_ADDR register
    nrf_write_register_mb(dev, NRF_TX_ADDR, ptr, sizeof(nRF24_TEST_ADDR) - 1U);
 8025700:	2303      	movs	r3, #3
 8025702:	697a      	ldr	r2, [r7, #20]
 8025704:	2110      	movs	r1, #16
 8025706:	6878      	ldr	r0, [r7, #4]
 8025708:	f000 f963 	bl	80259d2 <nrf_write_register_mb>
    // Read it back to the buffer
    nrf_read_register_mb(dev, NRF_TX_ADDR, rxbuf, sizeof(nRF24_TEST_ADDR) - 1U);
 802570c:	f107 0208 	add.w	r2, r7, #8
 8025710:	2303      	movs	r3, #3
 8025712:	2110      	movs	r1, #16
 8025714:	6878      	ldr	r0, [r7, #4]
 8025716:	f000 f913 	bl	8025940 <nrf_read_register_mb>

    // Compare transmitted and received data...
    for (idx = 0U; idx < sizeof(nRF24_TEST_ADDR) - 1U; idx++) {
 802571a:	2300      	movs	r3, #0
 802571c:	74fb      	strb	r3, [r7, #19]
 802571e:	e010      	b.n	8025742 <nrf_check+0x52>
        if (rxbuf[idx] != *ptr++) {
 8025720:	7cfb      	ldrb	r3, [r7, #19]
 8025722:	f107 0218 	add.w	r2, r7, #24
 8025726:	4413      	add	r3, r2
 8025728:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 802572c:	697b      	ldr	r3, [r7, #20]
 802572e:	1c59      	adds	r1, r3, #1
 8025730:	6179      	str	r1, [r7, #20]
 8025732:	781b      	ldrb	r3, [r3, #0]
 8025734:	429a      	cmp	r2, r3
 8025736:	d001      	beq.n	802573c <nrf_check+0x4c>
            // The transceiver is absent
            return NRF_ERROR;
 8025738:	2301      	movs	r3, #1
 802573a:	e006      	b.n	802574a <nrf_check+0x5a>
    for (idx = 0U; idx < sizeof(nRF24_TEST_ADDR) - 1U; idx++) {
 802573c:	7cfb      	ldrb	r3, [r7, #19]
 802573e:	3301      	adds	r3, #1
 8025740:	74fb      	strb	r3, [r7, #19]
 8025742:	7cfb      	ldrb	r3, [r7, #19]
 8025744:	2b02      	cmp	r3, #2
 8025746:	d9eb      	bls.n	8025720 <nrf_check+0x30>
        }
    }

    // The transceiver is present
    return NRF_OK;
 8025748:	2300      	movs	r3, #0
}
 802574a:	4618      	mov	r0, r3
 802574c:	3718      	adds	r7, #24
 802574e:	46bd      	mov	sp, r7
 8025750:	bd80      	pop	{r7, pc}
 8025752:	bf00      	nop
 8025754:	08043560 	.word	0x08043560

08025758 <nrf_send_command>:

NRF_RESULT nrf_send_command(nrf24l01 *dev, NRF_COMMAND cmd, const uint8_t *tx,
        uint8_t *rx, uint8_t len) {
 8025758:	b5b0      	push	{r4, r5, r7, lr}
 802575a:	b08c      	sub	sp, #48	; 0x30
 802575c:	af02      	add	r7, sp, #8
 802575e:	60f8      	str	r0, [r7, #12]
 8025760:	607a      	str	r2, [r7, #4]
 8025762:	603b      	str	r3, [r7, #0]
 8025764:	460b      	mov	r3, r1
 8025766:	72fb      	strb	r3, [r7, #11]
 8025768:	466b      	mov	r3, sp
 802576a:	461d      	mov	r5, r3
    uint8_t myTX[len + 1];
 802576c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8025770:	1c58      	adds	r0, r3, #1
 8025772:	1e43      	subs	r3, r0, #1
 8025774:	623b      	str	r3, [r7, #32]
 8025776:	4603      	mov	r3, r0
 8025778:	4619      	mov	r1, r3
 802577a:	f04f 0200 	mov.w	r2, #0
 802577e:	f04f 0300 	mov.w	r3, #0
 8025782:	f04f 0400 	mov.w	r4, #0
 8025786:	00d4      	lsls	r4, r2, #3
 8025788:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 802578c:	00cb      	lsls	r3, r1, #3
 802578e:	4603      	mov	r3, r0
 8025790:	4619      	mov	r1, r3
 8025792:	f04f 0200 	mov.w	r2, #0
 8025796:	f04f 0300 	mov.w	r3, #0
 802579a:	f04f 0400 	mov.w	r4, #0
 802579e:	00d4      	lsls	r4, r2, #3
 80257a0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80257a4:	00cb      	lsls	r3, r1, #3
 80257a6:	4603      	mov	r3, r0
 80257a8:	3307      	adds	r3, #7
 80257aa:	08db      	lsrs	r3, r3, #3
 80257ac:	00db      	lsls	r3, r3, #3
 80257ae:	ebad 0d03 	sub.w	sp, sp, r3
 80257b2:	ab02      	add	r3, sp, #8
 80257b4:	3300      	adds	r3, #0
 80257b6:	61fb      	str	r3, [r7, #28]
    uint8_t myRX[len + 1];
 80257b8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80257bc:	1c58      	adds	r0, r3, #1
 80257be:	1e43      	subs	r3, r0, #1
 80257c0:	61bb      	str	r3, [r7, #24]
 80257c2:	4603      	mov	r3, r0
 80257c4:	4619      	mov	r1, r3
 80257c6:	f04f 0200 	mov.w	r2, #0
 80257ca:	f04f 0300 	mov.w	r3, #0
 80257ce:	f04f 0400 	mov.w	r4, #0
 80257d2:	00d4      	lsls	r4, r2, #3
 80257d4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80257d8:	00cb      	lsls	r3, r1, #3
 80257da:	4603      	mov	r3, r0
 80257dc:	4619      	mov	r1, r3
 80257de:	f04f 0200 	mov.w	r2, #0
 80257e2:	f04f 0300 	mov.w	r3, #0
 80257e6:	f04f 0400 	mov.w	r4, #0
 80257ea:	00d4      	lsls	r4, r2, #3
 80257ec:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80257f0:	00cb      	lsls	r3, r1, #3
 80257f2:	4603      	mov	r3, r0
 80257f4:	3307      	adds	r3, #7
 80257f6:	08db      	lsrs	r3, r3, #3
 80257f8:	00db      	lsls	r3, r3, #3
 80257fa:	ebad 0d03 	sub.w	sp, sp, r3
 80257fe:	ab02      	add	r3, sp, #8
 8025800:	3300      	adds	r3, #0
 8025802:	617b      	str	r3, [r7, #20]
    myTX[0] = cmd;
 8025804:	69fb      	ldr	r3, [r7, #28]
 8025806:	7afa      	ldrb	r2, [r7, #11]
 8025808:	701a      	strb	r2, [r3, #0]

    int i = 0;
 802580a:	2300      	movs	r3, #0
 802580c:	627b      	str	r3, [r7, #36]	; 0x24
    for (i = 0; i < len; i++) {
 802580e:	2300      	movs	r3, #0
 8025810:	627b      	str	r3, [r7, #36]	; 0x24
 8025812:	e00f      	b.n	8025834 <nrf_send_command+0xdc>
        myTX[1 + i] = tx[i];
 8025814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025816:	687a      	ldr	r2, [r7, #4]
 8025818:	441a      	add	r2, r3
 802581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802581c:	3301      	adds	r3, #1
 802581e:	7811      	ldrb	r1, [r2, #0]
 8025820:	69fa      	ldr	r2, [r7, #28]
 8025822:	54d1      	strb	r1, [r2, r3]
        myRX[i] = 0;
 8025824:	697a      	ldr	r2, [r7, #20]
 8025826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025828:	4413      	add	r3, r2
 802582a:	2200      	movs	r2, #0
 802582c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < len; i++) {
 802582e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025830:	3301      	adds	r3, #1
 8025832:	627b      	str	r3, [r7, #36]	; 0x24
 8025834:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8025838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802583a:	429a      	cmp	r2, r3
 802583c:	dbea      	blt.n	8025814 <nrf_send_command+0xbc>
    }

    csn_reset(dev);
 802583e:	68f8      	ldr	r0, [r7, #12]
 8025840:	f000 fe07 	bl	8026452 <csn_reset>

    /* Wait for SPIx Busy flag */
    while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_BSY))
 8025844:	bf00      	nop
 8025846:	4b1b      	ldr	r3, [pc, #108]	; (80258b4 <nrf_send_command+0x15c>)
 8025848:	681b      	ldr	r3, [r3, #0]
 802584a:	689b      	ldr	r3, [r3, #8]
 802584c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8025850:	2b80      	cmp	r3, #128	; 0x80
 8025852:	d0f8      	beq.n	8025846 <nrf_send_command+0xee>
        ;

    if (HAL_SPI_TransmitReceive(dev->config.spi, myTX, myRX, 1 + len,
 8025854:	68fb      	ldr	r3, [r7, #12]
 8025856:	6958      	ldr	r0, [r3, #20]
 8025858:	69f9      	ldr	r1, [r7, #28]
 802585a:	697a      	ldr	r2, [r7, #20]
 802585c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8025860:	b29b      	uxth	r3, r3
 8025862:	3301      	adds	r3, #1
 8025864:	b29c      	uxth	r4, r3
 8025866:	68fb      	ldr	r3, [r7, #12]
 8025868:	699b      	ldr	r3, [r3, #24]
 802586a:	9300      	str	r3, [sp, #0]
 802586c:	4623      	mov	r3, r4
 802586e:	f00f fe2a 	bl	80354c6 <HAL_SPI_TransmitReceive>
 8025872:	4603      	mov	r3, r0
 8025874:	2b00      	cmp	r3, #0
 8025876:	d001      	beq.n	802587c <nrf_send_command+0x124>
            dev->config.spi_timeout) != HAL_OK) {
        return NRF_ERROR;
 8025878:	2301      	movs	r3, #1
 802587a:	e016      	b.n	80258aa <nrf_send_command+0x152>
    }

    for (i = 0; i < len; i++) {
 802587c:	2300      	movs	r3, #0
 802587e:	627b      	str	r3, [r7, #36]	; 0x24
 8025880:	e00a      	b.n	8025898 <nrf_send_command+0x140>
        rx[i] = myRX[1 + i];
 8025882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025884:	1c5a      	adds	r2, r3, #1
 8025886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025888:	6839      	ldr	r1, [r7, #0]
 802588a:	440b      	add	r3, r1
 802588c:	6979      	ldr	r1, [r7, #20]
 802588e:	5c8a      	ldrb	r2, [r1, r2]
 8025890:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < len; i++) {
 8025892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025894:	3301      	adds	r3, #1
 8025896:	627b      	str	r3, [r7, #36]	; 0x24
 8025898:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 802589c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802589e:	429a      	cmp	r2, r3
 80258a0:	dbef      	blt.n	8025882 <nrf_send_command+0x12a>
    }

    csn_set(dev);
 80258a2:	68f8      	ldr	r0, [r7, #12]
 80258a4:	f000 fdc5 	bl	8026432 <csn_set>

    return NRF_OK;
 80258a8:	2300      	movs	r3, #0
 80258aa:	46ad      	mov	sp, r5
}
 80258ac:	4618      	mov	r0, r3
 80258ae:	3728      	adds	r7, #40	; 0x28
 80258b0:	46bd      	mov	sp, r7
 80258b2:	bdb0      	pop	{r4, r5, r7, pc}
 80258b4:	20008890 	.word	0x20008890

080258b8 <nrf_send_command_single>:

uint8_t nrf_send_command_single(nrf24l01 *dev, uint8_t data) {
 80258b8:	b580      	push	{r7, lr}
 80258ba:	b086      	sub	sp, #24
 80258bc:	af02      	add	r7, sp, #8
 80258be:	6078      	str	r0, [r7, #4]
 80258c0:	460b      	mov	r3, r1
 80258c2:	70fb      	strb	r3, [r7, #3]
    uint8_t rx;
    /* Wait for SPIx Busy flag */
    while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_BSY) != RESET)
 80258c4:	bf00      	nop
 80258c6:	4b0f      	ldr	r3, [pc, #60]	; (8025904 <nrf_send_command_single+0x4c>)
 80258c8:	681b      	ldr	r3, [r3, #0]
 80258ca:	689b      	ldr	r3, [r3, #8]
 80258cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80258d0:	2b80      	cmp	r3, #128	; 0x80
 80258d2:	d0f8      	beq.n	80258c6 <nrf_send_command_single+0xe>
        ;
    //	Tx buffer empty flag
    while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 80258d4:	bf00      	nop
 80258d6:	4b0b      	ldr	r3, [pc, #44]	; (8025904 <nrf_send_command_single+0x4c>)
 80258d8:	681b      	ldr	r3, [r3, #0]
 80258da:	689b      	ldr	r3, [r3, #8]
 80258dc:	f003 0302 	and.w	r3, r3, #2
 80258e0:	2b02      	cmp	r3, #2
 80258e2:	d1f8      	bne.n	80258d6 <nrf_send_command_single+0x1e>
        ;

    HAL_SPI_TransmitReceive(dev->config.spi, &data, &rx, 1,
 80258e4:	687b      	ldr	r3, [r7, #4]
 80258e6:	6958      	ldr	r0, [r3, #20]
 80258e8:	687b      	ldr	r3, [r7, #4]
 80258ea:	699b      	ldr	r3, [r3, #24]
 80258ec:	f107 020f 	add.w	r2, r7, #15
 80258f0:	1cf9      	adds	r1, r7, #3
 80258f2:	9300      	str	r3, [sp, #0]
 80258f4:	2301      	movs	r3, #1
 80258f6:	f00f fde6 	bl	80354c6 <HAL_SPI_TransmitReceive>
            dev->config.spi_timeout);

    return rx;
 80258fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80258fc:	4618      	mov	r0, r3
 80258fe:	3710      	adds	r7, #16
 8025900:	46bd      	mov	sp, r7
 8025902:	bd80      	pop	{r7, pc}
 8025904:	20008890 	.word	0x20008890

08025908 <nrf_read_register>:

NRF_RESULT nrf_read_register(nrf24l01 *dev, uint8_t reg, uint8_t *data) {
 8025908:	b580      	push	{r7, lr}
 802590a:	b088      	sub	sp, #32
 802590c:	af02      	add	r7, sp, #8
 802590e:	60f8      	str	r0, [r7, #12]
 8025910:	460b      	mov	r3, r1
 8025912:	607a      	str	r2, [r7, #4]
 8025914:	72fb      	strb	r3, [r7, #11]
    uint8_t tx = 0;
 8025916:	2300      	movs	r3, #0
 8025918:	75fb      	strb	r3, [r7, #23]
    if (nrf_send_command(dev, NRF_CMD_R_REGISTER | reg, &tx, data, 1)
 802591a:	f107 0217 	add.w	r2, r7, #23
 802591e:	7af9      	ldrb	r1, [r7, #11]
 8025920:	2301      	movs	r3, #1
 8025922:	9300      	str	r3, [sp, #0]
 8025924:	687b      	ldr	r3, [r7, #4]
 8025926:	68f8      	ldr	r0, [r7, #12]
 8025928:	f7ff ff16 	bl	8025758 <nrf_send_command>
 802592c:	4603      	mov	r3, r0
 802592e:	2b00      	cmp	r3, #0
 8025930:	d001      	beq.n	8025936 <nrf_read_register+0x2e>
            != NRF_OK) {
        return NRF_ERROR;
 8025932:	2301      	movs	r3, #1
 8025934:	e000      	b.n	8025938 <nrf_read_register+0x30>
    }
    return NRF_OK;
 8025936:	2300      	movs	r3, #0
}
 8025938:	4618      	mov	r0, r3
 802593a:	3718      	adds	r7, #24
 802593c:	46bd      	mov	sp, r7
 802593e:	bd80      	pop	{r7, pc}

08025940 <nrf_read_register_mb>:

NRF_RESULT nrf_read_register_mb(nrf24l01 *dev, uint8_t reg, uint8_t *data,
        uint8_t count) {
 8025940:	b590      	push	{r4, r7, lr}
 8025942:	b085      	sub	sp, #20
 8025944:	af00      	add	r7, sp, #0
 8025946:	60f8      	str	r0, [r7, #12]
 8025948:	607a      	str	r2, [r7, #4]
 802594a:	461a      	mov	r2, r3
 802594c:	460b      	mov	r3, r1
 802594e:	72fb      	strb	r3, [r7, #11]
 8025950:	4613      	mov	r3, r2
 8025952:	72bb      	strb	r3, [r7, #10]
    csn_reset(dev);
 8025954:	68f8      	ldr	r0, [r7, #12]
 8025956:	f000 fd7c 	bl	8026452 <csn_reset>
    nrf_send_command_single(dev, NRF_CMD_R_REGISTER | reg);
 802595a:	7afb      	ldrb	r3, [r7, #11]
 802595c:	4619      	mov	r1, r3
 802595e:	68f8      	ldr	r0, [r7, #12]
 8025960:	f7ff ffaa 	bl	80258b8 <nrf_send_command_single>
    while (count--) {
 8025964:	e008      	b.n	8025978 <nrf_read_register_mb+0x38>
        *data++ = nrf_send_command_single(dev, NRF_CMD_NOP);
 8025966:	687c      	ldr	r4, [r7, #4]
 8025968:	1c63      	adds	r3, r4, #1
 802596a:	607b      	str	r3, [r7, #4]
 802596c:	21ff      	movs	r1, #255	; 0xff
 802596e:	68f8      	ldr	r0, [r7, #12]
 8025970:	f7ff ffa2 	bl	80258b8 <nrf_send_command_single>
 8025974:	4603      	mov	r3, r0
 8025976:	7023      	strb	r3, [r4, #0]
    while (count--) {
 8025978:	7abb      	ldrb	r3, [r7, #10]
 802597a:	1e5a      	subs	r2, r3, #1
 802597c:	72ba      	strb	r2, [r7, #10]
 802597e:	2b00      	cmp	r3, #0
 8025980:	d1f1      	bne.n	8025966 <nrf_read_register_mb+0x26>
    }
    csn_set(dev);
 8025982:	68f8      	ldr	r0, [r7, #12]
 8025984:	f000 fd55 	bl	8026432 <csn_set>
    return NRF_OK;
 8025988:	2300      	movs	r3, #0
}
 802598a:	4618      	mov	r0, r3
 802598c:	3714      	adds	r7, #20
 802598e:	46bd      	mov	sp, r7
 8025990:	bd90      	pop	{r4, r7, pc}

08025992 <nrf_write_register>:

NRF_RESULT nrf_write_register(nrf24l01 *dev, uint8_t reg, uint8_t *data) {
 8025992:	b580      	push	{r7, lr}
 8025994:	b088      	sub	sp, #32
 8025996:	af02      	add	r7, sp, #8
 8025998:	60f8      	str	r0, [r7, #12]
 802599a:	460b      	mov	r3, r1
 802599c:	607a      	str	r2, [r7, #4]
 802599e:	72fb      	strb	r3, [r7, #11]
    uint8_t rx = 0;
 80259a0:	2300      	movs	r3, #0
 80259a2:	75fb      	strb	r3, [r7, #23]
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | reg, data, &rx, 1)
 80259a4:	7afb      	ldrb	r3, [r7, #11]
 80259a6:	f043 0320 	orr.w	r3, r3, #32
 80259aa:	b2d9      	uxtb	r1, r3
 80259ac:	f107 0217 	add.w	r2, r7, #23
 80259b0:	2301      	movs	r3, #1
 80259b2:	9300      	str	r3, [sp, #0]
 80259b4:	4613      	mov	r3, r2
 80259b6:	687a      	ldr	r2, [r7, #4]
 80259b8:	68f8      	ldr	r0, [r7, #12]
 80259ba:	f7ff fecd 	bl	8025758 <nrf_send_command>
 80259be:	4603      	mov	r3, r0
 80259c0:	2b00      	cmp	r3, #0
 80259c2:	d001      	beq.n	80259c8 <nrf_write_register+0x36>
            != NRF_OK) {
        return NRF_ERROR;
 80259c4:	2301      	movs	r3, #1
 80259c6:	e000      	b.n	80259ca <nrf_write_register+0x38>
    }
    return NRF_OK;
 80259c8:	2300      	movs	r3, #0
}
 80259ca:	4618      	mov	r0, r3
 80259cc:	3718      	adds	r7, #24
 80259ce:	46bd      	mov	sp, r7
 80259d0:	bd80      	pop	{r7, pc}

080259d2 <nrf_write_register_mb>:

NRF_RESULT nrf_write_register_mb(nrf24l01 *dev, uint8_t reg, uint8_t *data,
        uint8_t count) {
 80259d2:	b580      	push	{r7, lr}
 80259d4:	b084      	sub	sp, #16
 80259d6:	af00      	add	r7, sp, #0
 80259d8:	60f8      	str	r0, [r7, #12]
 80259da:	607a      	str	r2, [r7, #4]
 80259dc:	461a      	mov	r2, r3
 80259de:	460b      	mov	r3, r1
 80259e0:	72fb      	strb	r3, [r7, #11]
 80259e2:	4613      	mov	r3, r2
 80259e4:	72bb      	strb	r3, [r7, #10]
    csn_reset(dev);
 80259e6:	68f8      	ldr	r0, [r7, #12]
 80259e8:	f000 fd33 	bl	8026452 <csn_reset>
    nrf_send_command_single(dev, NRF_CMD_W_REGISTER | reg);
 80259ec:	7afb      	ldrb	r3, [r7, #11]
 80259ee:	f043 0320 	orr.w	r3, r3, #32
 80259f2:	b2db      	uxtb	r3, r3
 80259f4:	4619      	mov	r1, r3
 80259f6:	68f8      	ldr	r0, [r7, #12]
 80259f8:	f7ff ff5e 	bl	80258b8 <nrf_send_command_single>
    while (count--) {
 80259fc:	e007      	b.n	8025a0e <nrf_write_register_mb+0x3c>
        nrf_send_command_single(dev, *data++);
 80259fe:	687b      	ldr	r3, [r7, #4]
 8025a00:	1c5a      	adds	r2, r3, #1
 8025a02:	607a      	str	r2, [r7, #4]
 8025a04:	781b      	ldrb	r3, [r3, #0]
 8025a06:	4619      	mov	r1, r3
 8025a08:	68f8      	ldr	r0, [r7, #12]
 8025a0a:	f7ff ff55 	bl	80258b8 <nrf_send_command_single>
    while (count--) {
 8025a0e:	7abb      	ldrb	r3, [r7, #10]
 8025a10:	1e5a      	subs	r2, r3, #1
 8025a12:	72ba      	strb	r2, [r7, #10]
 8025a14:	2b00      	cmp	r3, #0
 8025a16:	d1f2      	bne.n	80259fe <nrf_write_register_mb+0x2c>
    }
    csn_set(dev);
 8025a18:	68f8      	ldr	r0, [r7, #12]
 8025a1a:	f000 fd0a 	bl	8026432 <csn_set>
    return NRF_OK;
 8025a1e:	2300      	movs	r3, #0
}
 8025a20:	4618      	mov	r0, r3
 8025a22:	3710      	adds	r7, #16
 8025a24:	46bd      	mov	sp, r7
 8025a26:	bd80      	pop	{r7, pc}

08025a28 <nrf_read_rx_payload>:

NRF_RESULT nrf_read_rx_payload(nrf24l01 *dev, uint8_t *data) {
 8025a28:	b5b0      	push	{r4, r5, r7, lr}
 8025a2a:	b086      	sub	sp, #24
 8025a2c:	af02      	add	r7, sp, #8
 8025a2e:	6078      	str	r0, [r7, #4]
 8025a30:	6039      	str	r1, [r7, #0]
 8025a32:	466b      	mov	r3, sp
 8025a34:	461d      	mov	r5, r3
    uint8_t tx[dev->config.payload_length];
 8025a36:	687b      	ldr	r3, [r7, #4]
 8025a38:	7918      	ldrb	r0, [r3, #4]
 8025a3a:	4603      	mov	r3, r0
 8025a3c:	3b01      	subs	r3, #1
 8025a3e:	60fb      	str	r3, [r7, #12]
 8025a40:	b2c1      	uxtb	r1, r0
 8025a42:	f04f 0200 	mov.w	r2, #0
 8025a46:	f04f 0300 	mov.w	r3, #0
 8025a4a:	f04f 0400 	mov.w	r4, #0
 8025a4e:	00d4      	lsls	r4, r2, #3
 8025a50:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8025a54:	00cb      	lsls	r3, r1, #3
 8025a56:	b2c1      	uxtb	r1, r0
 8025a58:	f04f 0200 	mov.w	r2, #0
 8025a5c:	f04f 0300 	mov.w	r3, #0
 8025a60:	f04f 0400 	mov.w	r4, #0
 8025a64:	00d4      	lsls	r4, r2, #3
 8025a66:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8025a6a:	00cb      	lsls	r3, r1, #3
 8025a6c:	4603      	mov	r3, r0
 8025a6e:	3307      	adds	r3, #7
 8025a70:	08db      	lsrs	r3, r3, #3
 8025a72:	00db      	lsls	r3, r3, #3
 8025a74:	ebad 0d03 	sub.w	sp, sp, r3
 8025a78:	ab02      	add	r3, sp, #8
 8025a7a:	3300      	adds	r3, #0
 8025a7c:	60bb      	str	r3, [r7, #8]
    if (nrf_send_command(dev, NRF_CMD_R_RX_PAYLOAD, tx, data,
 8025a7e:	68ba      	ldr	r2, [r7, #8]
 8025a80:	687b      	ldr	r3, [r7, #4]
 8025a82:	791b      	ldrb	r3, [r3, #4]
 8025a84:	9300      	str	r3, [sp, #0]
 8025a86:	683b      	ldr	r3, [r7, #0]
 8025a88:	2161      	movs	r1, #97	; 0x61
 8025a8a:	6878      	ldr	r0, [r7, #4]
 8025a8c:	f7ff fe64 	bl	8025758 <nrf_send_command>
 8025a90:	4603      	mov	r3, r0
 8025a92:	2b00      	cmp	r3, #0
 8025a94:	d001      	beq.n	8025a9a <nrf_read_rx_payload+0x72>
            dev->config.payload_length) != NRF_OK) {
        return NRF_ERROR;
 8025a96:	2301      	movs	r3, #1
 8025a98:	e000      	b.n	8025a9c <nrf_read_rx_payload+0x74>
    }
    return NRF_OK;
 8025a9a:	2300      	movs	r3, #0
 8025a9c:	46ad      	mov	sp, r5
}
 8025a9e:	4618      	mov	r0, r3
 8025aa0:	3710      	adds	r7, #16
 8025aa2:	46bd      	mov	sp, r7
 8025aa4:	bdb0      	pop	{r4, r5, r7, pc}

08025aa6 <nrf_write_tx_payload>:

NRF_RESULT nrf_write_tx_payload(nrf24l01 *dev, const uint8_t *data) {
 8025aa6:	b5b0      	push	{r4, r5, r7, lr}
 8025aa8:	b086      	sub	sp, #24
 8025aaa:	af02      	add	r7, sp, #8
 8025aac:	6078      	str	r0, [r7, #4]
 8025aae:	6039      	str	r1, [r7, #0]
 8025ab0:	466b      	mov	r3, sp
 8025ab2:	461d      	mov	r5, r3
    uint8_t rx[dev->config.payload_length];
 8025ab4:	687b      	ldr	r3, [r7, #4]
 8025ab6:	7918      	ldrb	r0, [r3, #4]
 8025ab8:	4603      	mov	r3, r0
 8025aba:	3b01      	subs	r3, #1
 8025abc:	60fb      	str	r3, [r7, #12]
 8025abe:	b2c1      	uxtb	r1, r0
 8025ac0:	f04f 0200 	mov.w	r2, #0
 8025ac4:	f04f 0300 	mov.w	r3, #0
 8025ac8:	f04f 0400 	mov.w	r4, #0
 8025acc:	00d4      	lsls	r4, r2, #3
 8025ace:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8025ad2:	00cb      	lsls	r3, r1, #3
 8025ad4:	b2c1      	uxtb	r1, r0
 8025ad6:	f04f 0200 	mov.w	r2, #0
 8025ada:	f04f 0300 	mov.w	r3, #0
 8025ade:	f04f 0400 	mov.w	r4, #0
 8025ae2:	00d4      	lsls	r4, r2, #3
 8025ae4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8025ae8:	00cb      	lsls	r3, r1, #3
 8025aea:	4603      	mov	r3, r0
 8025aec:	3307      	adds	r3, #7
 8025aee:	08db      	lsrs	r3, r3, #3
 8025af0:	00db      	lsls	r3, r3, #3
 8025af2:	ebad 0d03 	sub.w	sp, sp, r3
 8025af6:	ab02      	add	r3, sp, #8
 8025af8:	3300      	adds	r3, #0
 8025afa:	60bb      	str	r3, [r7, #8]
    if (nrf_send_command(dev, NRF_CMD_W_TX_PAYLOAD, data, rx,
 8025afc:	68ba      	ldr	r2, [r7, #8]
 8025afe:	687b      	ldr	r3, [r7, #4]
 8025b00:	791b      	ldrb	r3, [r3, #4]
 8025b02:	9300      	str	r3, [sp, #0]
 8025b04:	4613      	mov	r3, r2
 8025b06:	683a      	ldr	r2, [r7, #0]
 8025b08:	21a0      	movs	r1, #160	; 0xa0
 8025b0a:	6878      	ldr	r0, [r7, #4]
 8025b0c:	f7ff fe24 	bl	8025758 <nrf_send_command>
 8025b10:	4603      	mov	r3, r0
 8025b12:	2b00      	cmp	r3, #0
 8025b14:	d001      	beq.n	8025b1a <nrf_write_tx_payload+0x74>
            dev->config.payload_length) != NRF_OK) {
        return NRF_ERROR;
 8025b16:	2301      	movs	r3, #1
 8025b18:	e000      	b.n	8025b1c <nrf_write_tx_payload+0x76>
    }
    return NRF_OK;
 8025b1a:	2300      	movs	r3, #0
 8025b1c:	46ad      	mov	sp, r5
}
 8025b1e:	4618      	mov	r0, r3
 8025b20:	3710      	adds	r7, #16
 8025b22:	46bd      	mov	sp, r7
 8025b24:	bdb0      	pop	{r4, r5, r7, pc}

08025b26 <nrf_flush_tx>:
        return NRF_ERROR;
    }
    return NRF_OK;
}

NRF_RESULT nrf_flush_tx(nrf24l01 *dev) {
 8025b26:	b580      	push	{r7, lr}
 8025b28:	b086      	sub	sp, #24
 8025b2a:	af02      	add	r7, sp, #8
 8025b2c:	6078      	str	r0, [r7, #4]
    uint8_t rx = 0;
 8025b2e:	2300      	movs	r3, #0
 8025b30:	73fb      	strb	r3, [r7, #15]
    uint8_t tx = 0;
 8025b32:	2300      	movs	r3, #0
 8025b34:	73bb      	strb	r3, [r7, #14]
    if (nrf_send_command(dev, NRF_CMD_FLUSH_TX, &tx, &rx, 0) != NRF_OK) {
 8025b36:	f107 010f 	add.w	r1, r7, #15
 8025b3a:	f107 020e 	add.w	r2, r7, #14
 8025b3e:	2300      	movs	r3, #0
 8025b40:	9300      	str	r3, [sp, #0]
 8025b42:	460b      	mov	r3, r1
 8025b44:	21e1      	movs	r1, #225	; 0xe1
 8025b46:	6878      	ldr	r0, [r7, #4]
 8025b48:	f7ff fe06 	bl	8025758 <nrf_send_command>
 8025b4c:	4603      	mov	r3, r0
 8025b4e:	2b00      	cmp	r3, #0
 8025b50:	d001      	beq.n	8025b56 <nrf_flush_tx+0x30>
        return NRF_ERROR;
 8025b52:	2301      	movs	r3, #1
 8025b54:	e000      	b.n	8025b58 <nrf_flush_tx+0x32>
    }
    return NRF_OK;
 8025b56:	2300      	movs	r3, #0
}
 8025b58:	4618      	mov	r0, r3
 8025b5a:	3710      	adds	r7, #16
 8025b5c:	46bd      	mov	sp, r7
 8025b5e:	bd80      	pop	{r7, pc}

08025b60 <nrf_flush_rx>:

NRF_RESULT nrf_flush_rx(nrf24l01 *dev) {
 8025b60:	b580      	push	{r7, lr}
 8025b62:	b086      	sub	sp, #24
 8025b64:	af02      	add	r7, sp, #8
 8025b66:	6078      	str	r0, [r7, #4]
    uint8_t rx = 0;
 8025b68:	2300      	movs	r3, #0
 8025b6a:	73fb      	strb	r3, [r7, #15]
    uint8_t tx = 0;
 8025b6c:	2300      	movs	r3, #0
 8025b6e:	73bb      	strb	r3, [r7, #14]
    if (nrf_send_command(dev, NRF_CMD_FLUSH_RX, &tx, &rx, 0) != NRF_OK) {
 8025b70:	f107 010f 	add.w	r1, r7, #15
 8025b74:	f107 020e 	add.w	r2, r7, #14
 8025b78:	2300      	movs	r3, #0
 8025b7a:	9300      	str	r3, [sp, #0]
 8025b7c:	460b      	mov	r3, r1
 8025b7e:	21e2      	movs	r1, #226	; 0xe2
 8025b80:	6878      	ldr	r0, [r7, #4]
 8025b82:	f7ff fde9 	bl	8025758 <nrf_send_command>
 8025b86:	4603      	mov	r3, r0
 8025b88:	2b00      	cmp	r3, #0
 8025b8a:	d001      	beq.n	8025b90 <nrf_flush_rx+0x30>
        return NRF_ERROR;
 8025b8c:	2301      	movs	r3, #1
 8025b8e:	e000      	b.n	8025b92 <nrf_flush_rx+0x32>
    }
    return NRF_OK;
 8025b90:	2300      	movs	r3, #0
}
 8025b92:	4618      	mov	r0, r3
 8025b94:	3710      	adds	r7, #16
 8025b96:	46bd      	mov	sp, r7
 8025b98:	bd80      	pop	{r7, pc}

08025b9a <nrf_set_data_rate>:

NRF_RESULT nrf_set_data_rate(nrf24l01 *dev, NRF_DATA_RATE rate) {
 8025b9a:	b580      	push	{r7, lr}
 8025b9c:	b084      	sub	sp, #16
 8025b9e:	af00      	add	r7, sp, #0
 8025ba0:	6078      	str	r0, [r7, #4]
 8025ba2:	460b      	mov	r3, r1
 8025ba4:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 8025ba6:	2300      	movs	r3, #0
 8025ba8:	73fb      	strb	r3, [r7, #15]
    if (nrf_read_register(dev, NRF_RF_SETUP, &reg) != NRF_OK) {
 8025baa:	f107 030f 	add.w	r3, r7, #15
 8025bae:	461a      	mov	r2, r3
 8025bb0:	2106      	movs	r1, #6
 8025bb2:	6878      	ldr	r0, [r7, #4]
 8025bb4:	f7ff fea8 	bl	8025908 <nrf_read_register>
 8025bb8:	4603      	mov	r3, r0
 8025bba:	2b00      	cmp	r3, #0
 8025bbc:	d001      	beq.n	8025bc2 <nrf_set_data_rate+0x28>
        return NRF_ERROR;
 8025bbe:	2301      	movs	r3, #1
 8025bc0:	e02f      	b.n	8025c22 <nrf_set_data_rate+0x88>
    }
    if (rate & 1) { // low bit set
 8025bc2:	78fb      	ldrb	r3, [r7, #3]
 8025bc4:	f003 0301 	and.w	r3, r3, #1
 8025bc8:	2b00      	cmp	r3, #0
 8025bca:	d005      	beq.n	8025bd8 <nrf_set_data_rate+0x3e>
        reg |= 1 << 5;
 8025bcc:	7bfb      	ldrb	r3, [r7, #15]
 8025bce:	f043 0320 	orr.w	r3, r3, #32
 8025bd2:	b2db      	uxtb	r3, r3
 8025bd4:	73fb      	strb	r3, [r7, #15]
 8025bd6:	e004      	b.n	8025be2 <nrf_set_data_rate+0x48>
    } else { // low bit clear
        reg &= ~(1 << 5);
 8025bd8:	7bfb      	ldrb	r3, [r7, #15]
 8025bda:	f023 0320 	bic.w	r3, r3, #32
 8025bde:	b2db      	uxtb	r3, r3
 8025be0:	73fb      	strb	r3, [r7, #15]
    }

    if (rate & 2) { // high bit set
 8025be2:	78fb      	ldrb	r3, [r7, #3]
 8025be4:	f003 0302 	and.w	r3, r3, #2
 8025be8:	2b00      	cmp	r3, #0
 8025bea:	d005      	beq.n	8025bf8 <nrf_set_data_rate+0x5e>
        reg |= 1 << 3;
 8025bec:	7bfb      	ldrb	r3, [r7, #15]
 8025bee:	f043 0308 	orr.w	r3, r3, #8
 8025bf2:	b2db      	uxtb	r3, r3
 8025bf4:	73fb      	strb	r3, [r7, #15]
 8025bf6:	e004      	b.n	8025c02 <nrf_set_data_rate+0x68>
    } else { // high bit clear
        reg &= ~(1 << 3);
 8025bf8:	7bfb      	ldrb	r3, [r7, #15]
 8025bfa:	f023 0308 	bic.w	r3, r3, #8
 8025bfe:	b2db      	uxtb	r3, r3
 8025c00:	73fb      	strb	r3, [r7, #15]
    }
    if (nrf_write_register(dev, NRF_RF_SETUP, &reg) != NRF_OK) {
 8025c02:	f107 030f 	add.w	r3, r7, #15
 8025c06:	461a      	mov	r2, r3
 8025c08:	2106      	movs	r1, #6
 8025c0a:	6878      	ldr	r0, [r7, #4]
 8025c0c:	f7ff fec1 	bl	8025992 <nrf_write_register>
 8025c10:	4603      	mov	r3, r0
 8025c12:	2b00      	cmp	r3, #0
 8025c14:	d001      	beq.n	8025c1a <nrf_set_data_rate+0x80>
        return NRF_ERROR;
 8025c16:	2301      	movs	r3, #1
 8025c18:	e003      	b.n	8025c22 <nrf_set_data_rate+0x88>
    }
    dev->config.data_rate = rate;
 8025c1a:	687b      	ldr	r3, [r7, #4]
 8025c1c:	78fa      	ldrb	r2, [r7, #3]
 8025c1e:	701a      	strb	r2, [r3, #0]
    return NRF_OK;
 8025c20:	2300      	movs	r3, #0
}
 8025c22:	4618      	mov	r0, r3
 8025c24:	3710      	adds	r7, #16
 8025c26:	46bd      	mov	sp, r7
 8025c28:	bd80      	pop	{r7, pc}

08025c2a <nrf_set_tx_power>:

NRF_RESULT nrf_set_tx_power(nrf24l01 *dev, NRF_TX_PWR pwr) {
 8025c2a:	b580      	push	{r7, lr}
 8025c2c:	b084      	sub	sp, #16
 8025c2e:	af00      	add	r7, sp, #0
 8025c30:	6078      	str	r0, [r7, #4]
 8025c32:	460b      	mov	r3, r1
 8025c34:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 8025c36:	2300      	movs	r3, #0
 8025c38:	73fb      	strb	r3, [r7, #15]
    if (nrf_read_register(dev, NRF_RF_SETUP, &reg) != NRF_OK) {
 8025c3a:	f107 030f 	add.w	r3, r7, #15
 8025c3e:	461a      	mov	r2, r3
 8025c40:	2106      	movs	r1, #6
 8025c42:	6878      	ldr	r0, [r7, #4]
 8025c44:	f7ff fe60 	bl	8025908 <nrf_read_register>
 8025c48:	4603      	mov	r3, r0
 8025c4a:	2b00      	cmp	r3, #0
 8025c4c:	d001      	beq.n	8025c52 <nrf_set_tx_power+0x28>
        return NRF_ERROR;
 8025c4e:	2301      	movs	r3, #1
 8025c50:	e01d      	b.n	8025c8e <nrf_set_tx_power+0x64>
    }
    reg &= 0xF9;     // clear bits 1,2
 8025c52:	7bfb      	ldrb	r3, [r7, #15]
 8025c54:	f023 0306 	bic.w	r3, r3, #6
 8025c58:	b2db      	uxtb	r3, r3
 8025c5a:	73fb      	strb	r3, [r7, #15]
    reg |= pwr << 1; // set bits 1,2
 8025c5c:	78fb      	ldrb	r3, [r7, #3]
 8025c5e:	005b      	lsls	r3, r3, #1
 8025c60:	b25a      	sxtb	r2, r3
 8025c62:	7bfb      	ldrb	r3, [r7, #15]
 8025c64:	b25b      	sxtb	r3, r3
 8025c66:	4313      	orrs	r3, r2
 8025c68:	b25b      	sxtb	r3, r3
 8025c6a:	b2db      	uxtb	r3, r3
 8025c6c:	73fb      	strb	r3, [r7, #15]
    if (nrf_write_register(dev, NRF_RF_SETUP, &reg) != NRF_OK) {
 8025c6e:	f107 030f 	add.w	r3, r7, #15
 8025c72:	461a      	mov	r2, r3
 8025c74:	2106      	movs	r1, #6
 8025c76:	6878      	ldr	r0, [r7, #4]
 8025c78:	f7ff fe8b 	bl	8025992 <nrf_write_register>
 8025c7c:	4603      	mov	r3, r0
 8025c7e:	2b00      	cmp	r3, #0
 8025c80:	d001      	beq.n	8025c86 <nrf_set_tx_power+0x5c>
        return NRF_ERROR;
 8025c82:	2301      	movs	r3, #1
 8025c84:	e003      	b.n	8025c8e <nrf_set_tx_power+0x64>
    }
    dev->config.tx_power = pwr;
 8025c86:	687b      	ldr	r3, [r7, #4]
 8025c88:	78fa      	ldrb	r2, [r7, #3]
 8025c8a:	705a      	strb	r2, [r3, #1]
    return NRF_OK;
 8025c8c:	2300      	movs	r3, #0
}
 8025c8e:	4618      	mov	r0, r3
 8025c90:	3710      	adds	r7, #16
 8025c92:	46bd      	mov	sp, r7
 8025c94:	bd80      	pop	{r7, pc}

08025c96 <nrf_clear_interrupts>:
        return NRF_ERROR;
    }
    return NRF_OK;
}

NRF_RESULT nrf_clear_interrupts(nrf24l01 *dev) {
 8025c96:	b580      	push	{r7, lr}
 8025c98:	b084      	sub	sp, #16
 8025c9a:	af00      	add	r7, sp, #0
 8025c9c:	6078      	str	r0, [r7, #4]
    uint8_t reg = 0;
 8025c9e:	2300      	movs	r3, #0
 8025ca0:	73fb      	strb	r3, [r7, #15]
    if (nrf_read_register(dev, NRF_STATUS, &reg) != NRF_OK) {
 8025ca2:	f107 030f 	add.w	r3, r7, #15
 8025ca6:	461a      	mov	r2, r3
 8025ca8:	2107      	movs	r1, #7
 8025caa:	6878      	ldr	r0, [r7, #4]
 8025cac:	f7ff fe2c 	bl	8025908 <nrf_read_register>
 8025cb0:	4603      	mov	r3, r0
 8025cb2:	2b00      	cmp	r3, #0
 8025cb4:	d001      	beq.n	8025cba <nrf_clear_interrupts+0x24>
        return NRF_ERROR;
 8025cb6:	2301      	movs	r3, #1
 8025cb8:	e011      	b.n	8025cde <nrf_clear_interrupts+0x48>
    }

    reg |= 7 << 4; // setting bits 4,5,6
 8025cba:	7bfb      	ldrb	r3, [r7, #15]
 8025cbc:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8025cc0:	b2db      	uxtb	r3, r3
 8025cc2:	73fb      	strb	r3, [r7, #15]

    if (nrf_write_register(dev, NRF_STATUS, &reg) != NRF_OK) {
 8025cc4:	f107 030f 	add.w	r3, r7, #15
 8025cc8:	461a      	mov	r2, r3
 8025cca:	2107      	movs	r1, #7
 8025ccc:	6878      	ldr	r0, [r7, #4]
 8025cce:	f7ff fe60 	bl	8025992 <nrf_write_register>
 8025cd2:	4603      	mov	r3, r0
 8025cd4:	2b00      	cmp	r3, #0
 8025cd6:	d001      	beq.n	8025cdc <nrf_clear_interrupts+0x46>
        return NRF_ERROR;
 8025cd8:	2301      	movs	r3, #1
 8025cda:	e000      	b.n	8025cde <nrf_clear_interrupts+0x48>
    }
    return NRF_OK;
 8025cdc:	2300      	movs	r3, #0
}
 8025cde:	4618      	mov	r0, r3
 8025ce0:	3710      	adds	r7, #16
 8025ce2:	46bd      	mov	sp, r7
 8025ce4:	bd80      	pop	{r7, pc}

08025ce6 <nrf_set_rf_channel>:

NRF_RESULT nrf_set_rf_channel(nrf24l01 *dev, uint8_t ch) {
 8025ce6:	b580      	push	{r7, lr}
 8025ce8:	b084      	sub	sp, #16
 8025cea:	af00      	add	r7, sp, #0
 8025cec:	6078      	str	r0, [r7, #4]
 8025cee:	460b      	mov	r3, r1
 8025cf0:	70fb      	strb	r3, [r7, #3]
    ch &= 0x7F;
 8025cf2:	78fb      	ldrb	r3, [r7, #3]
 8025cf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8025cf8:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 8025cfa:	2300      	movs	r3, #0
 8025cfc:	73fb      	strb	r3, [r7, #15]
    if (nrf_read_register(dev, NRF_RF_CH, &reg) != NRF_OK) {
 8025cfe:	f107 030f 	add.w	r3, r7, #15
 8025d02:	461a      	mov	r2, r3
 8025d04:	2105      	movs	r1, #5
 8025d06:	6878      	ldr	r0, [r7, #4]
 8025d08:	f7ff fdfe 	bl	8025908 <nrf_read_register>
 8025d0c:	4603      	mov	r3, r0
 8025d0e:	2b00      	cmp	r3, #0
 8025d10:	d001      	beq.n	8025d16 <nrf_set_rf_channel+0x30>
        return NRF_ERROR;
 8025d12:	2301      	movs	r3, #1
 8025d14:	e014      	b.n	8025d40 <nrf_set_rf_channel+0x5a>
    }

    reg |= ch; // setting channel
 8025d16:	7bfa      	ldrb	r2, [r7, #15]
 8025d18:	78fb      	ldrb	r3, [r7, #3]
 8025d1a:	4313      	orrs	r3, r2
 8025d1c:	b2db      	uxtb	r3, r3
 8025d1e:	73fb      	strb	r3, [r7, #15]

    if (nrf_write_register(dev, NRF_RF_CH, &reg) != NRF_OK) {
 8025d20:	f107 030f 	add.w	r3, r7, #15
 8025d24:	461a      	mov	r2, r3
 8025d26:	2105      	movs	r1, #5
 8025d28:	6878      	ldr	r0, [r7, #4]
 8025d2a:	f7ff fe32 	bl	8025992 <nrf_write_register>
 8025d2e:	4603      	mov	r3, r0
 8025d30:	2b00      	cmp	r3, #0
 8025d32:	d001      	beq.n	8025d38 <nrf_set_rf_channel+0x52>
        return NRF_ERROR;
 8025d34:	2301      	movs	r3, #1
 8025d36:	e003      	b.n	8025d40 <nrf_set_rf_channel+0x5a>
    }
    dev->config.rf_channel = ch;
 8025d38:	687b      	ldr	r3, [r7, #4]
 8025d3a:	78fa      	ldrb	r2, [r7, #3]
 8025d3c:	71da      	strb	r2, [r3, #7]
    return NRF_OK;
 8025d3e:	2300      	movs	r3, #0
}
 8025d40:	4618      	mov	r0, r3
 8025d42:	3710      	adds	r7, #16
 8025d44:	46bd      	mov	sp, r7
 8025d46:	bd80      	pop	{r7, pc}

08025d48 <nrf_set_retransmittion_count>:

NRF_RESULT nrf_set_retransmittion_count(nrf24l01 *dev, uint8_t count) {
 8025d48:	b580      	push	{r7, lr}
 8025d4a:	b084      	sub	sp, #16
 8025d4c:	af00      	add	r7, sp, #0
 8025d4e:	6078      	str	r0, [r7, #4]
 8025d50:	460b      	mov	r3, r1
 8025d52:	70fb      	strb	r3, [r7, #3]
    count &= 0x0F;
 8025d54:	78fb      	ldrb	r3, [r7, #3]
 8025d56:	f003 030f 	and.w	r3, r3, #15
 8025d5a:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 8025d5c:	2300      	movs	r3, #0
 8025d5e:	73fb      	strb	r3, [r7, #15]
    if (nrf_read_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8025d60:	f107 030f 	add.w	r3, r7, #15
 8025d64:	461a      	mov	r2, r3
 8025d66:	2104      	movs	r1, #4
 8025d68:	6878      	ldr	r0, [r7, #4]
 8025d6a:	f7ff fdcd 	bl	8025908 <nrf_read_register>
 8025d6e:	4603      	mov	r3, r0
 8025d70:	2b00      	cmp	r3, #0
 8025d72:	d001      	beq.n	8025d78 <nrf_set_retransmittion_count+0x30>
        return NRF_ERROR;
 8025d74:	2301      	movs	r3, #1
 8025d76:	e019      	b.n	8025dac <nrf_set_retransmittion_count+0x64>
    }

    reg &= 0xF0;  // clearing bits 0,1,2,3
 8025d78:	7bfb      	ldrb	r3, [r7, #15]
 8025d7a:	f023 030f 	bic.w	r3, r3, #15
 8025d7e:	b2db      	uxtb	r3, r3
 8025d80:	73fb      	strb	r3, [r7, #15]
    reg |= count; // setting count
 8025d82:	7bfa      	ldrb	r2, [r7, #15]
 8025d84:	78fb      	ldrb	r3, [r7, #3]
 8025d86:	4313      	orrs	r3, r2
 8025d88:	b2db      	uxtb	r3, r3
 8025d8a:	73fb      	strb	r3, [r7, #15]

    if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8025d8c:	f107 030f 	add.w	r3, r7, #15
 8025d90:	461a      	mov	r2, r3
 8025d92:	2104      	movs	r1, #4
 8025d94:	6878      	ldr	r0, [r7, #4]
 8025d96:	f7ff fdfc 	bl	8025992 <nrf_write_register>
 8025d9a:	4603      	mov	r3, r0
 8025d9c:	2b00      	cmp	r3, #0
 8025d9e:	d001      	beq.n	8025da4 <nrf_set_retransmittion_count+0x5c>
        return NRF_ERROR;
 8025da0:	2301      	movs	r3, #1
 8025da2:	e003      	b.n	8025dac <nrf_set_retransmittion_count+0x64>
    }
    dev->config.retransmit_count = count;
 8025da4:	687b      	ldr	r3, [r7, #4]
 8025da6:	78fa      	ldrb	r2, [r7, #3]
 8025da8:	715a      	strb	r2, [r3, #5]
    return NRF_OK;
 8025daa:	2300      	movs	r3, #0
}
 8025dac:	4618      	mov	r0, r3
 8025dae:	3710      	adds	r7, #16
 8025db0:	46bd      	mov	sp, r7
 8025db2:	bd80      	pop	{r7, pc}

08025db4 <nrf_set_retransmittion_delay>:

NRF_RESULT nrf_set_retransmittion_delay(nrf24l01 *dev, uint8_t delay) {
 8025db4:	b580      	push	{r7, lr}
 8025db6:	b084      	sub	sp, #16
 8025db8:	af00      	add	r7, sp, #0
 8025dba:	6078      	str	r0, [r7, #4]
 8025dbc:	460b      	mov	r3, r1
 8025dbe:	70fb      	strb	r3, [r7, #3]
    delay &= 0x0F;
 8025dc0:	78fb      	ldrb	r3, [r7, #3]
 8025dc2:	f003 030f 	and.w	r3, r3, #15
 8025dc6:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 8025dc8:	2300      	movs	r3, #0
 8025dca:	73fb      	strb	r3, [r7, #15]
    if (nrf_read_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8025dcc:	f107 030f 	add.w	r3, r7, #15
 8025dd0:	461a      	mov	r2, r3
 8025dd2:	2104      	movs	r1, #4
 8025dd4:	6878      	ldr	r0, [r7, #4]
 8025dd6:	f7ff fd97 	bl	8025908 <nrf_read_register>
 8025dda:	4603      	mov	r3, r0
 8025ddc:	2b00      	cmp	r3, #0
 8025dde:	d001      	beq.n	8025de4 <nrf_set_retransmittion_delay+0x30>
        return NRF_ERROR;
 8025de0:	2301      	movs	r3, #1
 8025de2:	e01d      	b.n	8025e20 <nrf_set_retransmittion_delay+0x6c>
    }

    reg &= 0x0F;       // clearing bits 1,2,6,7
 8025de4:	7bfb      	ldrb	r3, [r7, #15]
 8025de6:	f003 030f 	and.w	r3, r3, #15
 8025dea:	b2db      	uxtb	r3, r3
 8025dec:	73fb      	strb	r3, [r7, #15]
    reg |= delay << 4; // setting delay
 8025dee:	78fb      	ldrb	r3, [r7, #3]
 8025df0:	011b      	lsls	r3, r3, #4
 8025df2:	b25a      	sxtb	r2, r3
 8025df4:	7bfb      	ldrb	r3, [r7, #15]
 8025df6:	b25b      	sxtb	r3, r3
 8025df8:	4313      	orrs	r3, r2
 8025dfa:	b25b      	sxtb	r3, r3
 8025dfc:	b2db      	uxtb	r3, r3
 8025dfe:	73fb      	strb	r3, [r7, #15]

    if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8025e00:	f107 030f 	add.w	r3, r7, #15
 8025e04:	461a      	mov	r2, r3
 8025e06:	2104      	movs	r1, #4
 8025e08:	6878      	ldr	r0, [r7, #4]
 8025e0a:	f7ff fdc2 	bl	8025992 <nrf_write_register>
 8025e0e:	4603      	mov	r3, r0
 8025e10:	2b00      	cmp	r3, #0
 8025e12:	d001      	beq.n	8025e18 <nrf_set_retransmittion_delay+0x64>
        return NRF_ERROR;
 8025e14:	2301      	movs	r3, #1
 8025e16:	e003      	b.n	8025e20 <nrf_set_retransmittion_delay+0x6c>
    }
    dev->config.retransmit_delay = delay;
 8025e18:	687b      	ldr	r3, [r7, #4]
 8025e1a:	78fa      	ldrb	r2, [r7, #3]
 8025e1c:	719a      	strb	r2, [r3, #6]
    return NRF_OK;
 8025e1e:	2300      	movs	r3, #0
}
 8025e20:	4618      	mov	r0, r3
 8025e22:	3710      	adds	r7, #16
 8025e24:	46bd      	mov	sp, r7
 8025e26:	bd80      	pop	{r7, pc}

08025e28 <nrf_set_address_width>:

NRF_RESULT nrf_set_address_width(nrf24l01 *dev, NRF_ADDR_WIDTH width) {
 8025e28:	b580      	push	{r7, lr}
 8025e2a:	b084      	sub	sp, #16
 8025e2c:	af00      	add	r7, sp, #0
 8025e2e:	6078      	str	r0, [r7, #4]
 8025e30:	460b      	mov	r3, r1
 8025e32:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 8025e34:	2300      	movs	r3, #0
 8025e36:	73fb      	strb	r3, [r7, #15]
    if (nrf_read_register(dev, NRF_SETUP_AW, &reg) != NRF_OK) {
 8025e38:	f107 030f 	add.w	r3, r7, #15
 8025e3c:	461a      	mov	r2, r3
 8025e3e:	2103      	movs	r1, #3
 8025e40:	6878      	ldr	r0, [r7, #4]
 8025e42:	f7ff fd61 	bl	8025908 <nrf_read_register>
 8025e46:	4603      	mov	r3, r0
 8025e48:	2b00      	cmp	r3, #0
 8025e4a:	d001      	beq.n	8025e50 <nrf_set_address_width+0x28>
        return NRF_ERROR;
 8025e4c:	2301      	movs	r3, #1
 8025e4e:	e019      	b.n	8025e84 <nrf_set_address_width+0x5c>
    }

    reg &= 0x03;  // clearing bits 0,1
 8025e50:	7bfb      	ldrb	r3, [r7, #15]
 8025e52:	f003 0303 	and.w	r3, r3, #3
 8025e56:	b2db      	uxtb	r3, r3
 8025e58:	73fb      	strb	r3, [r7, #15]
    reg |= width; // setting delay
 8025e5a:	7bfa      	ldrb	r2, [r7, #15]
 8025e5c:	78fb      	ldrb	r3, [r7, #3]
 8025e5e:	4313      	orrs	r3, r2
 8025e60:	b2db      	uxtb	r3, r3
 8025e62:	73fb      	strb	r3, [r7, #15]

    if (nrf_write_register(dev, NRF_SETUP_AW, &reg) != NRF_OK) {
 8025e64:	f107 030f 	add.w	r3, r7, #15
 8025e68:	461a      	mov	r2, r3
 8025e6a:	2103      	movs	r1, #3
 8025e6c:	6878      	ldr	r0, [r7, #4]
 8025e6e:	f7ff fd90 	bl	8025992 <nrf_write_register>
 8025e72:	4603      	mov	r3, r0
 8025e74:	2b00      	cmp	r3, #0
 8025e76:	d001      	beq.n	8025e7c <nrf_set_address_width+0x54>
        return NRF_ERROR;
 8025e78:	2301      	movs	r3, #1
 8025e7a:	e003      	b.n	8025e84 <nrf_set_address_width+0x5c>
    }
    dev->config.addr_width = width;
 8025e7c:	687b      	ldr	r3, [r7, #4]
 8025e7e:	78fa      	ldrb	r2, [r7, #3]
 8025e80:	70da      	strb	r2, [r3, #3]
    return NRF_OK;
 8025e82:	2300      	movs	r3, #0
}
 8025e84:	4618      	mov	r0, r3
 8025e86:	3710      	adds	r7, #16
 8025e88:	46bd      	mov	sp, r7
 8025e8a:	bd80      	pop	{r7, pc}

08025e8c <nrf_set_rx_pipes>:

NRF_RESULT nrf_set_rx_pipes(nrf24l01 *dev, uint8_t pipes) {
 8025e8c:	b580      	push	{r7, lr}
 8025e8e:	b082      	sub	sp, #8
 8025e90:	af00      	add	r7, sp, #0
 8025e92:	6078      	str	r0, [r7, #4]
 8025e94:	460b      	mov	r3, r1
 8025e96:	70fb      	strb	r3, [r7, #3]
    if (nrf_write_register(dev, NRF_EN_RXADDR, &pipes) != NRF_OK) {
 8025e98:	1cfb      	adds	r3, r7, #3
 8025e9a:	461a      	mov	r2, r3
 8025e9c:	2102      	movs	r1, #2
 8025e9e:	6878      	ldr	r0, [r7, #4]
 8025ea0:	f7ff fd77 	bl	8025992 <nrf_write_register>
 8025ea4:	4603      	mov	r3, r0
 8025ea6:	2b00      	cmp	r3, #0
 8025ea8:	d001      	beq.n	8025eae <nrf_set_rx_pipes+0x22>
        return NRF_ERROR;
 8025eaa:	2301      	movs	r3, #1
 8025eac:	e000      	b.n	8025eb0 <nrf_set_rx_pipes+0x24>
    }
    return NRF_OK;
 8025eae:	2300      	movs	r3, #0
}
 8025eb0:	4618      	mov	r0, r3
 8025eb2:	3708      	adds	r7, #8
 8025eb4:	46bd      	mov	sp, r7
 8025eb6:	bd80      	pop	{r7, pc}

08025eb8 <nrf_enable_auto_ack>:
        return NRF_ERROR;
    }
    return NRF_OK;
}

NRF_RESULT nrf_enable_auto_ack(nrf24l01 *dev, uint8_t pipe) {
 8025eb8:	b580      	push	{r7, lr}
 8025eba:	b084      	sub	sp, #16
 8025ebc:	af00      	add	r7, sp, #0
 8025ebe:	6078      	str	r0, [r7, #4]
 8025ec0:	460b      	mov	r3, r1
 8025ec2:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 8025ec4:	2300      	movs	r3, #0
 8025ec6:	73fb      	strb	r3, [r7, #15]
    if (nrf_read_register(dev, NRF_EN_AA, &reg) != NRF_OK) {
 8025ec8:	f107 030f 	add.w	r3, r7, #15
 8025ecc:	461a      	mov	r2, r3
 8025ece:	2101      	movs	r1, #1
 8025ed0:	6878      	ldr	r0, [r7, #4]
 8025ed2:	f7ff fd19 	bl	8025908 <nrf_read_register>
 8025ed6:	4603      	mov	r3, r0
 8025ed8:	2b00      	cmp	r3, #0
 8025eda:	d001      	beq.n	8025ee0 <nrf_enable_auto_ack+0x28>
        return NRF_ERROR;
 8025edc:	2301      	movs	r3, #1
 8025ede:	e017      	b.n	8025f10 <nrf_enable_auto_ack+0x58>
    }

    reg |= 1 << pipe;
 8025ee0:	78fb      	ldrb	r3, [r7, #3]
 8025ee2:	2201      	movs	r2, #1
 8025ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8025ee8:	b25a      	sxtb	r2, r3
 8025eea:	7bfb      	ldrb	r3, [r7, #15]
 8025eec:	b25b      	sxtb	r3, r3
 8025eee:	4313      	orrs	r3, r2
 8025ef0:	b25b      	sxtb	r3, r3
 8025ef2:	b2db      	uxtb	r3, r3
 8025ef4:	73fb      	strb	r3, [r7, #15]

    if (nrf_write_register(dev, NRF_EN_AA, &reg) != NRF_OK) {
 8025ef6:	f107 030f 	add.w	r3, r7, #15
 8025efa:	461a      	mov	r2, r3
 8025efc:	2101      	movs	r1, #1
 8025efe:	6878      	ldr	r0, [r7, #4]
 8025f00:	f7ff fd47 	bl	8025992 <nrf_write_register>
 8025f04:	4603      	mov	r3, r0
 8025f06:	2b00      	cmp	r3, #0
 8025f08:	d001      	beq.n	8025f0e <nrf_enable_auto_ack+0x56>
        return NRF_ERROR;
 8025f0a:	2301      	movs	r3, #1
 8025f0c:	e000      	b.n	8025f10 <nrf_enable_auto_ack+0x58>
    }
    return NRF_OK;
 8025f0e:	2300      	movs	r3, #0
}
 8025f10:	4618      	mov	r0, r3
 8025f12:	3710      	adds	r7, #16
 8025f14:	46bd      	mov	sp, r7
 8025f16:	bd80      	pop	{r7, pc}

08025f18 <nrf_enable_crc>:

NRF_RESULT nrf_enable_crc(nrf24l01 *dev, uint8_t activate) {
 8025f18:	b580      	push	{r7, lr}
 8025f1a:	b084      	sub	sp, #16
 8025f1c:	af00      	add	r7, sp, #0
 8025f1e:	6078      	str	r0, [r7, #4]
 8025f20:	460b      	mov	r3, r1
 8025f22:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 8025f24:	2300      	movs	r3, #0
 8025f26:	73fb      	strb	r3, [r7, #15]
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8025f28:	f107 030f 	add.w	r3, r7, #15
 8025f2c:	461a      	mov	r2, r3
 8025f2e:	2100      	movs	r1, #0
 8025f30:	6878      	ldr	r0, [r7, #4]
 8025f32:	f7ff fce9 	bl	8025908 <nrf_read_register>
 8025f36:	4603      	mov	r3, r0
 8025f38:	2b00      	cmp	r3, #0
 8025f3a:	d001      	beq.n	8025f40 <nrf_enable_crc+0x28>
        return NRF_ERROR;
 8025f3c:	2301      	movs	r3, #1
 8025f3e:	e01a      	b.n	8025f76 <nrf_enable_crc+0x5e>
    }

    if (activate) {
 8025f40:	78fb      	ldrb	r3, [r7, #3]
 8025f42:	2b00      	cmp	r3, #0
 8025f44:	d005      	beq.n	8025f52 <nrf_enable_crc+0x3a>
        reg |= 1 << 3;
 8025f46:	7bfb      	ldrb	r3, [r7, #15]
 8025f48:	f043 0308 	orr.w	r3, r3, #8
 8025f4c:	b2db      	uxtb	r3, r3
 8025f4e:	73fb      	strb	r3, [r7, #15]
 8025f50:	e004      	b.n	8025f5c <nrf_enable_crc+0x44>
    } else {
        reg &= ~(1 << 3);
 8025f52:	7bfb      	ldrb	r3, [r7, #15]
 8025f54:	f023 0308 	bic.w	r3, r3, #8
 8025f58:	b2db      	uxtb	r3, r3
 8025f5a:	73fb      	strb	r3, [r7, #15]
    }

    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8025f5c:	f107 030f 	add.w	r3, r7, #15
 8025f60:	461a      	mov	r2, r3
 8025f62:	2100      	movs	r1, #0
 8025f64:	6878      	ldr	r0, [r7, #4]
 8025f66:	f7ff fd14 	bl	8025992 <nrf_write_register>
 8025f6a:	4603      	mov	r3, r0
 8025f6c:	2b00      	cmp	r3, #0
 8025f6e:	d001      	beq.n	8025f74 <nrf_enable_crc+0x5c>
        return NRF_ERROR;
 8025f70:	2301      	movs	r3, #1
 8025f72:	e000      	b.n	8025f76 <nrf_enable_crc+0x5e>
    }
    return NRF_OK;
 8025f74:	2300      	movs	r3, #0
}
 8025f76:	4618      	mov	r0, r3
 8025f78:	3710      	adds	r7, #16
 8025f7a:	46bd      	mov	sp, r7
 8025f7c:	bd80      	pop	{r7, pc}

08025f7e <nrf_set_crc_width>:

NRF_RESULT nrf_set_crc_width(nrf24l01 *dev, NRF_CRC_WIDTH width) {
 8025f7e:	b580      	push	{r7, lr}
 8025f80:	b084      	sub	sp, #16
 8025f82:	af00      	add	r7, sp, #0
 8025f84:	6078      	str	r0, [r7, #4]
 8025f86:	460b      	mov	r3, r1
 8025f88:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 8025f8a:	2300      	movs	r3, #0
 8025f8c:	73fb      	strb	r3, [r7, #15]
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8025f8e:	f107 030f 	add.w	r3, r7, #15
 8025f92:	461a      	mov	r2, r3
 8025f94:	2100      	movs	r1, #0
 8025f96:	6878      	ldr	r0, [r7, #4]
 8025f98:	f7ff fcb6 	bl	8025908 <nrf_read_register>
 8025f9c:	4603      	mov	r3, r0
 8025f9e:	2b00      	cmp	r3, #0
 8025fa0:	d001      	beq.n	8025fa6 <nrf_set_crc_width+0x28>
        return NRF_ERROR;
 8025fa2:	2301      	movs	r3, #1
 8025fa4:	e01d      	b.n	8025fe2 <nrf_set_crc_width+0x64>
    }

    if (width == NRF_CRC_WIDTH_2B) {
 8025fa6:	78fb      	ldrb	r3, [r7, #3]
 8025fa8:	2b01      	cmp	r3, #1
 8025faa:	d105      	bne.n	8025fb8 <nrf_set_crc_width+0x3a>
        reg |= 1 << 2;
 8025fac:	7bfb      	ldrb	r3, [r7, #15]
 8025fae:	f043 0304 	orr.w	r3, r3, #4
 8025fb2:	b2db      	uxtb	r3, r3
 8025fb4:	73fb      	strb	r3, [r7, #15]
 8025fb6:	e004      	b.n	8025fc2 <nrf_set_crc_width+0x44>
    } else {
        reg &= ~(1 << 3);
 8025fb8:	7bfb      	ldrb	r3, [r7, #15]
 8025fba:	f023 0308 	bic.w	r3, r3, #8
 8025fbe:	b2db      	uxtb	r3, r3
 8025fc0:	73fb      	strb	r3, [r7, #15]
    }

    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8025fc2:	f107 030f 	add.w	r3, r7, #15
 8025fc6:	461a      	mov	r2, r3
 8025fc8:	2100      	movs	r1, #0
 8025fca:	6878      	ldr	r0, [r7, #4]
 8025fcc:	f7ff fce1 	bl	8025992 <nrf_write_register>
 8025fd0:	4603      	mov	r3, r0
 8025fd2:	2b00      	cmp	r3, #0
 8025fd4:	d001      	beq.n	8025fda <nrf_set_crc_width+0x5c>
        return NRF_ERROR;
 8025fd6:	2301      	movs	r3, #1
 8025fd8:	e003      	b.n	8025fe2 <nrf_set_crc_width+0x64>
    }
    dev->config.crc_width = width;
 8025fda:	687b      	ldr	r3, [r7, #4]
 8025fdc:	78fa      	ldrb	r2, [r7, #3]
 8025fde:	709a      	strb	r2, [r3, #2]
    return NRF_OK;
 8025fe0:	2300      	movs	r3, #0
}
 8025fe2:	4618      	mov	r0, r3
 8025fe4:	3710      	adds	r7, #16
 8025fe6:	46bd      	mov	sp, r7
 8025fe8:	bd80      	pop	{r7, pc}

08025fea <nrf_power_up>:

NRF_RESULT nrf_power_up(nrf24l01 *dev, uint8_t power_up) {
 8025fea:	b580      	push	{r7, lr}
 8025fec:	b084      	sub	sp, #16
 8025fee:	af00      	add	r7, sp, #0
 8025ff0:	6078      	str	r0, [r7, #4]
 8025ff2:	460b      	mov	r3, r1
 8025ff4:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 8025ff6:	2300      	movs	r3, #0
 8025ff8:	73fb      	strb	r3, [r7, #15]
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8025ffa:	f107 030f 	add.w	r3, r7, #15
 8025ffe:	461a      	mov	r2, r3
 8026000:	2100      	movs	r1, #0
 8026002:	6878      	ldr	r0, [r7, #4]
 8026004:	f7ff fc80 	bl	8025908 <nrf_read_register>
 8026008:	4603      	mov	r3, r0
 802600a:	2b00      	cmp	r3, #0
 802600c:	d001      	beq.n	8026012 <nrf_power_up+0x28>
        return NRF_ERROR;
 802600e:	2301      	movs	r3, #1
 8026010:	e01a      	b.n	8026048 <nrf_power_up+0x5e>
    }

    if (power_up) {
 8026012:	78fb      	ldrb	r3, [r7, #3]
 8026014:	2b00      	cmp	r3, #0
 8026016:	d005      	beq.n	8026024 <nrf_power_up+0x3a>
        reg |= 1 << 1;
 8026018:	7bfb      	ldrb	r3, [r7, #15]
 802601a:	f043 0302 	orr.w	r3, r3, #2
 802601e:	b2db      	uxtb	r3, r3
 8026020:	73fb      	strb	r3, [r7, #15]
 8026022:	e004      	b.n	802602e <nrf_power_up+0x44>
    } else {
        reg &= ~(1 << 1);
 8026024:	7bfb      	ldrb	r3, [r7, #15]
 8026026:	f023 0302 	bic.w	r3, r3, #2
 802602a:	b2db      	uxtb	r3, r3
 802602c:	73fb      	strb	r3, [r7, #15]
    }

    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 802602e:	f107 030f 	add.w	r3, r7, #15
 8026032:	461a      	mov	r2, r3
 8026034:	2100      	movs	r1, #0
 8026036:	6878      	ldr	r0, [r7, #4]
 8026038:	f7ff fcab 	bl	8025992 <nrf_write_register>
 802603c:	4603      	mov	r3, r0
 802603e:	2b00      	cmp	r3, #0
 8026040:	d001      	beq.n	8026046 <nrf_power_up+0x5c>
        return NRF_ERROR;
 8026042:	2301      	movs	r3, #1
 8026044:	e000      	b.n	8026048 <nrf_power_up+0x5e>
    }
    return NRF_OK;
 8026046:	2300      	movs	r3, #0
}
 8026048:	4618      	mov	r0, r3
 802604a:	3710      	adds	r7, #16
 802604c:	46bd      	mov	sp, r7
 802604e:	bd80      	pop	{r7, pc}

08026050 <nrf_rx_tx_control>:

NRF_RESULT nrf_rx_tx_control(nrf24l01 *dev, NRF_TXRX_STATE rx) {
 8026050:	b580      	push	{r7, lr}
 8026052:	b084      	sub	sp, #16
 8026054:	af00      	add	r7, sp, #0
 8026056:	6078      	str	r0, [r7, #4]
 8026058:	460b      	mov	r3, r1
 802605a:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 802605c:	2300      	movs	r3, #0
 802605e:	73fb      	strb	r3, [r7, #15]
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8026060:	f107 030f 	add.w	r3, r7, #15
 8026064:	461a      	mov	r2, r3
 8026066:	2100      	movs	r1, #0
 8026068:	6878      	ldr	r0, [r7, #4]
 802606a:	f7ff fc4d 	bl	8025908 <nrf_read_register>
 802606e:	4603      	mov	r3, r0
 8026070:	2b00      	cmp	r3, #0
 8026072:	d001      	beq.n	8026078 <nrf_rx_tx_control+0x28>
        return NRF_ERROR;
 8026074:	2301      	movs	r3, #1
 8026076:	e01a      	b.n	80260ae <nrf_rx_tx_control+0x5e>
    }

    if (rx) {
 8026078:	78fb      	ldrb	r3, [r7, #3]
 802607a:	2b00      	cmp	r3, #0
 802607c:	d005      	beq.n	802608a <nrf_rx_tx_control+0x3a>
        reg |= 1;
 802607e:	7bfb      	ldrb	r3, [r7, #15]
 8026080:	f043 0301 	orr.w	r3, r3, #1
 8026084:	b2db      	uxtb	r3, r3
 8026086:	73fb      	strb	r3, [r7, #15]
 8026088:	e004      	b.n	8026094 <nrf_rx_tx_control+0x44>
    } else {
        reg &= ~(1);
 802608a:	7bfb      	ldrb	r3, [r7, #15]
 802608c:	f023 0301 	bic.w	r3, r3, #1
 8026090:	b2db      	uxtb	r3, r3
 8026092:	73fb      	strb	r3, [r7, #15]
    }

    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8026094:	f107 030f 	add.w	r3, r7, #15
 8026098:	461a      	mov	r2, r3
 802609a:	2100      	movs	r1, #0
 802609c:	6878      	ldr	r0, [r7, #4]
 802609e:	f7ff fc78 	bl	8025992 <nrf_write_register>
 80260a2:	4603      	mov	r3, r0
 80260a4:	2b00      	cmp	r3, #0
 80260a6:	d001      	beq.n	80260ac <nrf_rx_tx_control+0x5c>
        return NRF_ERROR;
 80260a8:	2301      	movs	r3, #1
 80260aa:	e000      	b.n	80260ae <nrf_rx_tx_control+0x5e>
    }
    return NRF_OK;
 80260ac:	2300      	movs	r3, #0
}
 80260ae:	4618      	mov	r0, r3
 80260b0:	3710      	adds	r7, #16
 80260b2:	46bd      	mov	sp, r7
 80260b4:	bd80      	pop	{r7, pc}

080260b6 <nrf_enable_rx_data_ready_irq>:

NRF_RESULT nrf_enable_rx_data_ready_irq(nrf24l01 *dev, uint8_t activate) {
 80260b6:	b580      	push	{r7, lr}
 80260b8:	b084      	sub	sp, #16
 80260ba:	af00      	add	r7, sp, #0
 80260bc:	6078      	str	r0, [r7, #4]
 80260be:	460b      	mov	r3, r1
 80260c0:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 80260c2:	2300      	movs	r3, #0
 80260c4:	73fb      	strb	r3, [r7, #15]
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 80260c6:	f107 030f 	add.w	r3, r7, #15
 80260ca:	461a      	mov	r2, r3
 80260cc:	2100      	movs	r1, #0
 80260ce:	6878      	ldr	r0, [r7, #4]
 80260d0:	f7ff fc1a 	bl	8025908 <nrf_read_register>
 80260d4:	4603      	mov	r3, r0
 80260d6:	2b00      	cmp	r3, #0
 80260d8:	d001      	beq.n	80260de <nrf_enable_rx_data_ready_irq+0x28>
        return NRF_ERROR;
 80260da:	2301      	movs	r3, #1
 80260dc:	e01a      	b.n	8026114 <nrf_enable_rx_data_ready_irq+0x5e>
    }

    if (!activate) {
 80260de:	78fb      	ldrb	r3, [r7, #3]
 80260e0:	2b00      	cmp	r3, #0
 80260e2:	d105      	bne.n	80260f0 <nrf_enable_rx_data_ready_irq+0x3a>
        reg |= 1 << 6;
 80260e4:	7bfb      	ldrb	r3, [r7, #15]
 80260e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80260ea:	b2db      	uxtb	r3, r3
 80260ec:	73fb      	strb	r3, [r7, #15]
 80260ee:	e004      	b.n	80260fa <nrf_enable_rx_data_ready_irq+0x44>
    } else {
        reg &= ~(1 << 6);
 80260f0:	7bfb      	ldrb	r3, [r7, #15]
 80260f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80260f6:	b2db      	uxtb	r3, r3
 80260f8:	73fb      	strb	r3, [r7, #15]
    }

    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 80260fa:	f107 030f 	add.w	r3, r7, #15
 80260fe:	461a      	mov	r2, r3
 8026100:	2100      	movs	r1, #0
 8026102:	6878      	ldr	r0, [r7, #4]
 8026104:	f7ff fc45 	bl	8025992 <nrf_write_register>
 8026108:	4603      	mov	r3, r0
 802610a:	2b00      	cmp	r3, #0
 802610c:	d001      	beq.n	8026112 <nrf_enable_rx_data_ready_irq+0x5c>
        return NRF_ERROR;
 802610e:	2301      	movs	r3, #1
 8026110:	e000      	b.n	8026114 <nrf_enable_rx_data_ready_irq+0x5e>
    }
    return NRF_OK;
 8026112:	2300      	movs	r3, #0
}
 8026114:	4618      	mov	r0, r3
 8026116:	3710      	adds	r7, #16
 8026118:	46bd      	mov	sp, r7
 802611a:	bd80      	pop	{r7, pc}

0802611c <nrf_enable_tx_data_sent_irq>:

NRF_RESULT nrf_enable_tx_data_sent_irq(nrf24l01 *dev, uint8_t activate) {
 802611c:	b580      	push	{r7, lr}
 802611e:	b084      	sub	sp, #16
 8026120:	af00      	add	r7, sp, #0
 8026122:	6078      	str	r0, [r7, #4]
 8026124:	460b      	mov	r3, r1
 8026126:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 8026128:	2300      	movs	r3, #0
 802612a:	73fb      	strb	r3, [r7, #15]
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 802612c:	f107 030f 	add.w	r3, r7, #15
 8026130:	461a      	mov	r2, r3
 8026132:	2100      	movs	r1, #0
 8026134:	6878      	ldr	r0, [r7, #4]
 8026136:	f7ff fbe7 	bl	8025908 <nrf_read_register>
 802613a:	4603      	mov	r3, r0
 802613c:	2b00      	cmp	r3, #0
 802613e:	d001      	beq.n	8026144 <nrf_enable_tx_data_sent_irq+0x28>
        return NRF_ERROR;
 8026140:	2301      	movs	r3, #1
 8026142:	e01a      	b.n	802617a <nrf_enable_tx_data_sent_irq+0x5e>
    }
    if (!activate) {
 8026144:	78fb      	ldrb	r3, [r7, #3]
 8026146:	2b00      	cmp	r3, #0
 8026148:	d105      	bne.n	8026156 <nrf_enable_tx_data_sent_irq+0x3a>
        reg |= 1 << 5;
 802614a:	7bfb      	ldrb	r3, [r7, #15]
 802614c:	f043 0320 	orr.w	r3, r3, #32
 8026150:	b2db      	uxtb	r3, r3
 8026152:	73fb      	strb	r3, [r7, #15]
 8026154:	e004      	b.n	8026160 <nrf_enable_tx_data_sent_irq+0x44>
    } else {
        reg &= ~(1 << 5);
 8026156:	7bfb      	ldrb	r3, [r7, #15]
 8026158:	f023 0320 	bic.w	r3, r3, #32
 802615c:	b2db      	uxtb	r3, r3
 802615e:	73fb      	strb	r3, [r7, #15]
    }
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8026160:	f107 030f 	add.w	r3, r7, #15
 8026164:	461a      	mov	r2, r3
 8026166:	2100      	movs	r1, #0
 8026168:	6878      	ldr	r0, [r7, #4]
 802616a:	f7ff fc12 	bl	8025992 <nrf_write_register>
 802616e:	4603      	mov	r3, r0
 8026170:	2b00      	cmp	r3, #0
 8026172:	d001      	beq.n	8026178 <nrf_enable_tx_data_sent_irq+0x5c>
        return NRF_ERROR;
 8026174:	2301      	movs	r3, #1
 8026176:	e000      	b.n	802617a <nrf_enable_tx_data_sent_irq+0x5e>
    }
    return NRF_OK;
 8026178:	2300      	movs	r3, #0
}
 802617a:	4618      	mov	r0, r3
 802617c:	3710      	adds	r7, #16
 802617e:	46bd      	mov	sp, r7
 8026180:	bd80      	pop	{r7, pc}

08026182 <nrf_enable_max_retransmit_irq>:

NRF_RESULT nrf_enable_max_retransmit_irq(nrf24l01 *dev, uint8_t activate) {
 8026182:	b580      	push	{r7, lr}
 8026184:	b084      	sub	sp, #16
 8026186:	af00      	add	r7, sp, #0
 8026188:	6078      	str	r0, [r7, #4]
 802618a:	460b      	mov	r3, r1
 802618c:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 802618e:	2300      	movs	r3, #0
 8026190:	73fb      	strb	r3, [r7, #15]
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8026192:	f107 030f 	add.w	r3, r7, #15
 8026196:	461a      	mov	r2, r3
 8026198:	2100      	movs	r1, #0
 802619a:	6878      	ldr	r0, [r7, #4]
 802619c:	f7ff fbb4 	bl	8025908 <nrf_read_register>
 80261a0:	4603      	mov	r3, r0
 80261a2:	2b00      	cmp	r3, #0
 80261a4:	d001      	beq.n	80261aa <nrf_enable_max_retransmit_irq+0x28>
        return NRF_ERROR;
 80261a6:	2301      	movs	r3, #1
 80261a8:	e01a      	b.n	80261e0 <nrf_enable_max_retransmit_irq+0x5e>
    }
    if (!activate) {
 80261aa:	78fb      	ldrb	r3, [r7, #3]
 80261ac:	2b00      	cmp	r3, #0
 80261ae:	d105      	bne.n	80261bc <nrf_enable_max_retransmit_irq+0x3a>
        reg |= 1 << 4;
 80261b0:	7bfb      	ldrb	r3, [r7, #15]
 80261b2:	f043 0310 	orr.w	r3, r3, #16
 80261b6:	b2db      	uxtb	r3, r3
 80261b8:	73fb      	strb	r3, [r7, #15]
 80261ba:	e004      	b.n	80261c6 <nrf_enable_max_retransmit_irq+0x44>
    } else {
        reg &= ~(1 << 4);
 80261bc:	7bfb      	ldrb	r3, [r7, #15]
 80261be:	f023 0310 	bic.w	r3, r3, #16
 80261c2:	b2db      	uxtb	r3, r3
 80261c4:	73fb      	strb	r3, [r7, #15]
    }
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 80261c6:	f107 030f 	add.w	r3, r7, #15
 80261ca:	461a      	mov	r2, r3
 80261cc:	2100      	movs	r1, #0
 80261ce:	6878      	ldr	r0, [r7, #4]
 80261d0:	f7ff fbdf 	bl	8025992 <nrf_write_register>
 80261d4:	4603      	mov	r3, r0
 80261d6:	2b00      	cmp	r3, #0
 80261d8:	d001      	beq.n	80261de <nrf_enable_max_retransmit_irq+0x5c>
        return NRF_ERROR;
 80261da:	2301      	movs	r3, #1
 80261dc:	e000      	b.n	80261e0 <nrf_enable_max_retransmit_irq+0x5e>
    }
    return NRF_OK;
 80261de:	2300      	movs	r3, #0
}
 80261e0:	4618      	mov	r0, r3
 80261e2:	3710      	adds	r7, #16
 80261e4:	46bd      	mov	sp, r7
 80261e6:	bd80      	pop	{r7, pc}

080261e8 <nrf_set_rx_address_p0>:

NRF_RESULT nrf_set_rx_address_p0(nrf24l01 *dev, const uint8_t *address) {
 80261e8:	b580      	push	{r7, lr}
 80261ea:	b086      	sub	sp, #24
 80261ec:	af02      	add	r7, sp, #8
 80261ee:	6078      	str	r0, [r7, #4]
 80261f0:	6039      	str	r1, [r7, #0]
    uint8_t rx[5];
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_RX_ADDR_P0, address, rx,
 80261f2:	f107 0208 	add.w	r2, r7, #8
 80261f6:	2305      	movs	r3, #5
 80261f8:	9300      	str	r3, [sp, #0]
 80261fa:	4613      	mov	r3, r2
 80261fc:	683a      	ldr	r2, [r7, #0]
 80261fe:	212a      	movs	r1, #42	; 0x2a
 8026200:	6878      	ldr	r0, [r7, #4]
 8026202:	f7ff faa9 	bl	8025758 <nrf_send_command>
 8026206:	4603      	mov	r3, r0
 8026208:	2b00      	cmp	r3, #0
 802620a:	d001      	beq.n	8026210 <nrf_set_rx_address_p0+0x28>
            5) != NRF_OK) {
        return NRF_ERROR;
 802620c:	2301      	movs	r3, #1
 802620e:	e003      	b.n	8026218 <nrf_set_rx_address_p0+0x30>
    }
    dev->config.rx_address = address;
 8026210:	687b      	ldr	r3, [r7, #4]
 8026212:	683a      	ldr	r2, [r7, #0]
 8026214:	609a      	str	r2, [r3, #8]
    return NRF_OK;
 8026216:	2300      	movs	r3, #0
}
 8026218:	4618      	mov	r0, r3
 802621a:	3710      	adds	r7, #16
 802621c:	46bd      	mov	sp, r7
 802621e:	bd80      	pop	{r7, pc}

08026220 <nrf_set_tx_address>:
    }
    dev->config.rx_address = address;
    return NRF_OK;
}

NRF_RESULT nrf_set_tx_address(nrf24l01 *dev, const uint8_t *address) {
 8026220:	b580      	push	{r7, lr}
 8026222:	b086      	sub	sp, #24
 8026224:	af02      	add	r7, sp, #8
 8026226:	6078      	str	r0, [r7, #4]
 8026228:	6039      	str	r1, [r7, #0]
    uint8_t rx[5];
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_TX_ADDR, address, rx, 5)
 802622a:	f107 0208 	add.w	r2, r7, #8
 802622e:	2305      	movs	r3, #5
 8026230:	9300      	str	r3, [sp, #0]
 8026232:	4613      	mov	r3, r2
 8026234:	683a      	ldr	r2, [r7, #0]
 8026236:	2130      	movs	r1, #48	; 0x30
 8026238:	6878      	ldr	r0, [r7, #4]
 802623a:	f7ff fa8d 	bl	8025758 <nrf_send_command>
 802623e:	4603      	mov	r3, r0
 8026240:	2b00      	cmp	r3, #0
 8026242:	d001      	beq.n	8026248 <nrf_set_tx_address+0x28>
            != NRF_OK) {
        return NRF_ERROR;
 8026244:	2301      	movs	r3, #1
 8026246:	e003      	b.n	8026250 <nrf_set_tx_address+0x30>
    }
    dev->config.tx_address = address;
 8026248:	687b      	ldr	r3, [r7, #4]
 802624a:	683a      	ldr	r2, [r7, #0]
 802624c:	60da      	str	r2, [r3, #12]
    return NRF_OK;
 802624e:	2300      	movs	r3, #0
}
 8026250:	4618      	mov	r0, r3
 8026252:	3710      	adds	r7, #16
 8026254:	46bd      	mov	sp, r7
 8026256:	bd80      	pop	{r7, pc}

08026258 <nrf_set_rx_payload_width_p0>:

NRF_RESULT nrf_set_rx_payload_width_p0(nrf24l01 *dev, uint8_t width) {
 8026258:	b580      	push	{r7, lr}
 802625a:	b082      	sub	sp, #8
 802625c:	af00      	add	r7, sp, #0
 802625e:	6078      	str	r0, [r7, #4]
 8026260:	460b      	mov	r3, r1
 8026262:	70fb      	strb	r3, [r7, #3]
    width &= 0x3F;
 8026264:	78fb      	ldrb	r3, [r7, #3]
 8026266:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802626a:	b2db      	uxtb	r3, r3
 802626c:	70fb      	strb	r3, [r7, #3]
    if (nrf_write_register(dev, NRF_RX_PW_P0, &width) != NRF_OK) {
 802626e:	1cfb      	adds	r3, r7, #3
 8026270:	461a      	mov	r2, r3
 8026272:	2111      	movs	r1, #17
 8026274:	6878      	ldr	r0, [r7, #4]
 8026276:	f7ff fb8c 	bl	8025992 <nrf_write_register>
 802627a:	4603      	mov	r3, r0
 802627c:	2b00      	cmp	r3, #0
 802627e:	d004      	beq.n	802628a <nrf_set_rx_payload_width_p0+0x32>
        dev->config.payload_length = 0;
 8026280:	687b      	ldr	r3, [r7, #4]
 8026282:	2200      	movs	r2, #0
 8026284:	711a      	strb	r2, [r3, #4]
        return NRF_ERROR;
 8026286:	2301      	movs	r3, #1
 8026288:	e003      	b.n	8026292 <nrf_set_rx_payload_width_p0+0x3a>
    }
    dev->config.payload_length = width;
 802628a:	78fa      	ldrb	r2, [r7, #3]
 802628c:	687b      	ldr	r3, [r7, #4]
 802628e:	711a      	strb	r2, [r3, #4]
    return NRF_OK;
 8026290:	2300      	movs	r3, #0
}
 8026292:	4618      	mov	r0, r3
 8026294:	3708      	adds	r7, #8
 8026296:	46bd      	mov	sp, r7
 8026298:	bd80      	pop	{r7, pc}

0802629a <nrf_send_packet>:
    }
    dev->config.payload_length = width;
    return NRF_OK;
}

NRF_RESULT nrf_send_packet(nrf24l01 *dev, const uint8_t *data) {
 802629a:	b580      	push	{r7, lr}
 802629c:	b082      	sub	sp, #8
 802629e:	af00      	add	r7, sp, #0
 80262a0:	6078      	str	r0, [r7, #4]
 80262a2:	6039      	str	r1, [r7, #0]
    dev->tx_busy = 1;
 80262a4:	687b      	ldr	r3, [r7, #4]
 80262a6:	2201      	movs	r2, #1
 80262a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    ce_reset(dev);
 80262ac:	6878      	ldr	r0, [r7, #4]
 80262ae:	f7ff f952 	bl	8025556 <ce_reset>
    nrf_rx_tx_control(dev, NRF_STATE_TX);
 80262b2:	2100      	movs	r1, #0
 80262b4:	6878      	ldr	r0, [r7, #4]
 80262b6:	f7ff fecb 	bl	8026050 <nrf_rx_tx_control>
    nrf_write_tx_payload(dev, data);
 80262ba:	6839      	ldr	r1, [r7, #0]
 80262bc:	6878      	ldr	r0, [r7, #4]
 80262be:	f7ff fbf2 	bl	8025aa6 <nrf_write_tx_payload>
    ce_set(dev);
 80262c2:	6878      	ldr	r0, [r7, #4]
 80262c4:	f7ff f937 	bl	8025536 <ce_set>

    while (dev->tx_busy == 1) {
 80262c8:	bf00      	nop
 80262ca:	687b      	ldr	r3, [r7, #4]
 80262cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80262d0:	b2db      	uxtb	r3, r3
 80262d2:	2b01      	cmp	r3, #1
 80262d4:	d0f9      	beq.n	80262ca <nrf_send_packet+0x30>
    } // wait for end of transmition

    _DelayMS(100);
 80262d6:	2064      	movs	r0, #100	; 0x64
 80262d8:	f019 fa72 	bl	803f7c0 <_DelayMS>
    ce_reset(dev);
 80262dc:	6878      	ldr	r0, [r7, #4]
 80262de:	f7ff f93a 	bl	8025556 <ce_reset>
    nrf_rx_tx_control(dev, NRF_STATE_RX);
 80262e2:	2101      	movs	r1, #1
 80262e4:	6878      	ldr	r0, [r7, #4]
 80262e6:	f7ff feb3 	bl	8026050 <nrf_rx_tx_control>
    ce_set(dev);
 80262ea:	6878      	ldr	r0, [r7, #4]
 80262ec:	f7ff f923 	bl	8025536 <ce_set>

    return dev->tx_result;
 80262f0:	687b      	ldr	r3, [r7, #4]
 80262f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80262f6:	b2db      	uxtb	r3, r3
}
 80262f8:	4618      	mov	r0, r3
 80262fa:	3708      	adds	r7, #8
 80262fc:	46bd      	mov	sp, r7
 80262fe:	bd80      	pop	{r7, pc}

08026300 <nrf_irq_handler>:
    ce_set(dev);

    return NRF_OK;
}

void nrf_irq_handler(nrf24l01 *dev) {
 8026300:	b580      	push	{r7, lr}
 8026302:	b084      	sub	sp, #16
 8026304:	af00      	add	r7, sp, #0
 8026306:	6078      	str	r0, [r7, #4]
    uint8_t status = 0;
 8026308:	2300      	movs	r3, #0
 802630a:	72fb      	strb	r3, [r7, #11]

    // read interrupt register
    if (nrf_read_register(dev, NRF_STATUS, &status) != NRF_OK) {
 802630c:	f107 030b 	add.w	r3, r7, #11
 8026310:	461a      	mov	r2, r3
 8026312:	2107      	movs	r1, #7
 8026314:	6878      	ldr	r0, [r7, #4]
 8026316:	f7ff faf7 	bl	8025908 <nrf_read_register>
 802631a:	4603      	mov	r3, r0
 802631c:	2b00      	cmp	r3, #0
 802631e:	f040 8084 	bne.w	802642a <nrf_irq_handler+0x12a>
        return;
    }

    if ((status & (1 << 6))) { // RX FIFO Interrupt
 8026322:	7afb      	ldrb	r3, [r7, #11]
 8026324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8026328:	2b00      	cmp	r3, #0
 802632a:	d034      	beq.n	8026396 <nrf_irq_handler+0x96>
        uint8_t fifo_status = 0;
 802632c:	2300      	movs	r3, #0
 802632e:	72bb      	strb	r3, [r7, #10]

        ce_reset(dev);
 8026330:	6878      	ldr	r0, [r7, #4]
 8026332:	f7ff f910 	bl	8025556 <ce_reset>
        nrf_write_register(dev, NRF_STATUS, &status);
 8026336:	f107 030b 	add.w	r3, r7, #11
 802633a:	461a      	mov	r2, r3
 802633c:	2107      	movs	r1, #7
 802633e:	6878      	ldr	r0, [r7, #4]
 8026340:	f7ff fb27 	bl	8025992 <nrf_write_register>
        nrf_read_register(dev, NRF_FIFO_STATUS, &fifo_status);
 8026344:	f107 030a 	add.w	r3, r7, #10
 8026348:	461a      	mov	r2, r3
 802634a:	2117      	movs	r1, #23
 802634c:	6878      	ldr	r0, [r7, #4]
 802634e:	f7ff fadb 	bl	8025908 <nrf_read_register>

        if ((fifo_status & 1) == 0) {
 8026352:	7abb      	ldrb	r3, [r7, #10]
 8026354:	f003 0301 	and.w	r3, r3, #1
 8026358:	2b00      	cmp	r3, #0
 802635a:	d119      	bne.n	8026390 <nrf_irq_handler+0x90>
            uint8_t *rx_buffer = dev->config.rx_buffer;
 802635c:	687b      	ldr	r3, [r7, #4]
 802635e:	691b      	ldr	r3, [r3, #16]
 8026360:	60fb      	str	r3, [r7, #12]
            nrf_read_rx_payload(dev, rx_buffer);
 8026362:	68f9      	ldr	r1, [r7, #12]
 8026364:	6878      	ldr	r0, [r7, #4]
 8026366:	f7ff fb5f 	bl	8025a28 <nrf_read_rx_payload>

            status |= 1 << 6;
 802636a:	7afb      	ldrb	r3, [r7, #11]
 802636c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026370:	b2db      	uxtb	r3, r3
 8026372:	72fb      	strb	r3, [r7, #11]
            nrf_write_register(dev, NRF_STATUS, &status);
 8026374:	f107 030b 	add.w	r3, r7, #11
 8026378:	461a      	mov	r2, r3
 802637a:	2107      	movs	r1, #7
 802637c:	6878      	ldr	r0, [r7, #4]
 802637e:	f7ff fb08 	bl	8025992 <nrf_write_register>
            nrf_flush_rx(dev);
 8026382:	6878      	ldr	r0, [r7, #4]
 8026384:	f7ff fbec 	bl	8025b60 <nrf_flush_rx>
            nrf_packet_received_callback(dev, rx_buffer);
 8026388:	68f9      	ldr	r1, [r7, #12]
 802638a:	6878      	ldr	r0, [r7, #4]
 802638c:	f001 fe0c 	bl	8027fa8 <nrf_packet_received_callback>
        }
        ce_set(dev);
 8026390:	6878      	ldr	r0, [r7, #4]
 8026392:	f7ff f8d0 	bl	8025536 <ce_set>

    }
    if ((status & (1 << 5))) { // TX Data Sent Interrupt
 8026396:	7afb      	ldrb	r3, [r7, #11]
 8026398:	f003 0320 	and.w	r3, r3, #32
 802639c:	2b00      	cmp	r3, #0
 802639e:	d019      	beq.n	80263d4 <nrf_irq_handler+0xd4>
        status |= 1 << 5;      // clear the interrupt flag
 80263a0:	7afb      	ldrb	r3, [r7, #11]
 80263a2:	f043 0320 	orr.w	r3, r3, #32
 80263a6:	b2db      	uxtb	r3, r3
 80263a8:	72fb      	strb	r3, [r7, #11]

        ce_reset(dev);
 80263aa:	6878      	ldr	r0, [r7, #4]
 80263ac:	f7ff f8d3 	bl	8025556 <ce_reset>
        //        nrf_rx_tx_control(dev, NRF_STATE_RX);
        //        dev->state = NRF_STATE_RX;
        nrf_write_register(dev, NRF_STATUS, &status);
 80263b0:	f107 030b 	add.w	r3, r7, #11
 80263b4:	461a      	mov	r2, r3
 80263b6:	2107      	movs	r1, #7
 80263b8:	6878      	ldr	r0, [r7, #4]
 80263ba:	f7ff faea 	bl	8025992 <nrf_write_register>
        ce_set(dev);
 80263be:	6878      	ldr	r0, [r7, #4]
 80263c0:	f7ff f8b9 	bl	8025536 <ce_set>

        dev->tx_result = NRF_OK;
 80263c4:	687b      	ldr	r3, [r7, #4]
 80263c6:	2200      	movs	r2, #0
 80263c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        dev->tx_busy = 0;
 80263cc:	687b      	ldr	r3, [r7, #4]
 80263ce:	2200      	movs	r2, #0
 80263d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    if ((status & (1 << 4))) { // MaxRetransmits reached
 80263d4:	7afb      	ldrb	r3, [r7, #11]
 80263d6:	f003 0310 	and.w	r3, r3, #16
 80263da:	2b00      	cmp	r3, #0
 80263dc:	d026      	beq.n	802642c <nrf_irq_handler+0x12c>
        status |= 1 << 4;      // clear the interrupt flag
 80263de:	7afb      	ldrb	r3, [r7, #11]
 80263e0:	f043 0310 	orr.w	r3, r3, #16
 80263e4:	b2db      	uxtb	r3, r3
 80263e6:	72fb      	strb	r3, [r7, #11]

        ce_reset(dev);
 80263e8:	6878      	ldr	r0, [r7, #4]
 80263ea:	f7ff f8b4 	bl	8025556 <ce_reset>
        nrf_flush_tx(dev);
 80263ee:	6878      	ldr	r0, [r7, #4]
 80263f0:	f7ff fb99 	bl	8025b26 <nrf_flush_tx>
        nrf_power_up(dev, 0); // power down
 80263f4:	2100      	movs	r1, #0
 80263f6:	6878      	ldr	r0, [r7, #4]
 80263f8:	f7ff fdf7 	bl	8025fea <nrf_power_up>
        nrf_power_up(dev, 1); // power up
 80263fc:	2101      	movs	r1, #1
 80263fe:	6878      	ldr	r0, [r7, #4]
 8026400:	f7ff fdf3 	bl	8025fea <nrf_power_up>

        //        nrf_rx_tx_control(dev, NRF_STATE_RX);
        //        dev->state = NRF_STATE_RX;
        nrf_write_register(dev, NRF_STATUS, &status);
 8026404:	f107 030b 	add.w	r3, r7, #11
 8026408:	461a      	mov	r2, r3
 802640a:	2107      	movs	r1, #7
 802640c:	6878      	ldr	r0, [r7, #4]
 802640e:	f7ff fac0 	bl	8025992 <nrf_write_register>
        ce_set(dev);
 8026412:	6878      	ldr	r0, [r7, #4]
 8026414:	f7ff f88f 	bl	8025536 <ce_set>

        dev->tx_result = NRF_ERROR;
 8026418:	687b      	ldr	r3, [r7, #4]
 802641a:	2201      	movs	r2, #1
 802641c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        dev->tx_busy = 0;
 8026420:	687b      	ldr	r3, [r7, #4]
 8026422:	2200      	movs	r2, #0
 8026424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8026428:	e000      	b.n	802642c <nrf_irq_handler+0x12c>
        return;
 802642a:	bf00      	nop
    }
}
 802642c:	3710      	adds	r7, #16
 802642e:	46bd      	mov	sp, r7
 8026430:	bd80      	pop	{r7, pc}

08026432 <csn_set>:
    // default implementation (__weak) is used in favor of nrf_receive_packet
    dev->rx_busy = 0;
}

/* Private functions implementation --------------------------------------------*/
static void csn_set(nrf24l01 *dev) {
 8026432:	b580      	push	{r7, lr}
 8026434:	b082      	sub	sp, #8
 8026436:	af00      	add	r7, sp, #0
 8026438:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(dev->config.csn_port, dev->config.csn_pin, GPIO_PIN_SET);
 802643a:	687b      	ldr	r3, [r7, #4]
 802643c:	69d8      	ldr	r0, [r3, #28]
 802643e:	687b      	ldr	r3, [r7, #4]
 8026440:	8c1b      	ldrh	r3, [r3, #32]
 8026442:	2201      	movs	r2, #1
 8026444:	4619      	mov	r1, r3
 8026446:	f009 fdf1 	bl	803002c <HAL_GPIO_WritePin>
}
 802644a:	bf00      	nop
 802644c:	3708      	adds	r7, #8
 802644e:	46bd      	mov	sp, r7
 8026450:	bd80      	pop	{r7, pc}

08026452 <csn_reset>:

static void csn_reset(nrf24l01 *dev) {
 8026452:	b580      	push	{r7, lr}
 8026454:	b082      	sub	sp, #8
 8026456:	af00      	add	r7, sp, #0
 8026458:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(dev->config.csn_port, dev->config.csn_pin,
 802645a:	687b      	ldr	r3, [r7, #4]
 802645c:	69d8      	ldr	r0, [r3, #28]
 802645e:	687b      	ldr	r3, [r7, #4]
 8026460:	8c1b      	ldrh	r3, [r3, #32]
 8026462:	2200      	movs	r2, #0
 8026464:	4619      	mov	r1, r3
 8026466:	f009 fde1 	bl	803002c <HAL_GPIO_WritePin>
            GPIO_PIN_RESET);
}
 802646a:	bf00      	nop
 802646c:	3708      	adds	r7, #8
 802646e:	46bd      	mov	sp, r7
 8026470:	bd80      	pop	{r7, pc}
 8026472:	0000      	movs	r0, r0
 8026474:	0000      	movs	r0, r0
	...

08026478 <RTC_Decode>:
/* Private functions declaration ----------------------------------------------*/
static void lock(void);
static void unlock(void);

/* Public functions implementation --------------------------------------------*/
timestamp_t RTC_Decode(uint64_t dateTime) {
 8026478:	b5f0      	push	{r4, r5, r6, r7, lr}
 802647a:	b093      	sub	sp, #76	; 0x4c
 802647c:	af00      	add	r7, sp, #0
 802647e:	60f8      	str	r0, [r7, #12]
 8026480:	e9c7 2300 	strd	r2, r3, [r7]
    // format dateTime: YYMMDDHHmmssE
    uint8_t dt[7];
    timestamp_t timestamp;
    uint64_t tot = 0, mul;
 8026484:	f04f 0300 	mov.w	r3, #0
 8026488:	f04f 0400 	mov.w	r4, #0
 802648c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

    // parsing to timestamp
    for (int i = 0; i <= 6; i++) {
 8026490:	2300      	movs	r3, #0
 8026492:	637b      	str	r3, [r7, #52]	; 0x34
 8026494:	e056      	b.n	8026544 <RTC_Decode+0xcc>
        if (i < 6) {
 8026496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026498:	2b05      	cmp	r3, #5
 802649a:	dc19      	bgt.n	80264d0 <RTC_Decode+0x58>
            mul = pow(10, (11 - (2 * i)));
 802649c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802649e:	005b      	lsls	r3, r3, #1
 80264a0:	f1c3 030b 	rsb	r3, r3, #11
 80264a4:	4618      	mov	r0, r3
 80264a6:	f7fa f875 	bl	8020594 <__aeabi_i2d>
 80264aa:	4603      	mov	r3, r0
 80264ac:	460c      	mov	r4, r1
 80264ae:	ec44 3b11 	vmov	d1, r3, r4
 80264b2:	ed9f 0b39 	vldr	d0, [pc, #228]	; 8026598 <RTC_Decode+0x120>
 80264b6:	f01b fd27 	bl	8041f08 <pow>
 80264ba:	ec54 3b10 	vmov	r3, r4, d0
 80264be:	4618      	mov	r0, r3
 80264c0:	4621      	mov	r1, r4
 80264c2:	f7fa fc31 	bl	8020d28 <__aeabi_d2ulz>
 80264c6:	4603      	mov	r3, r0
 80264c8:	460c      	mov	r4, r1
 80264ca:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
 80264ce:	e005      	b.n	80264dc <RTC_Decode+0x64>
        } else {
            mul = 1;
 80264d0:	f04f 0301 	mov.w	r3, #1
 80264d4:	f04f 0400 	mov.w	r4, #0
 80264d8:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
        }

        dt[i] = (dateTime - tot) / mul;
 80264dc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80264e0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80264e4:	1ac9      	subs	r1, r1, r3
 80264e6:	eb62 0204 	sbc.w	r2, r2, r4
 80264ea:	4608      	mov	r0, r1
 80264ec:	4611      	mov	r1, r2
 80264ee:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80264f2:	f7fa fc01 	bl	8020cf8 <__aeabi_uldivmod>
 80264f6:	4603      	mov	r3, r0
 80264f8:	460c      	mov	r4, r1
 80264fa:	b2d9      	uxtb	r1, r3
 80264fc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8026500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026502:	4413      	add	r3, r2
 8026504:	460a      	mov	r2, r1
 8026506:	701a      	strb	r2, [r3, #0]
        tot += (dt[i] * mul);
 8026508:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 802650c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802650e:	4413      	add	r3, r2
 8026510:	781b      	ldrb	r3, [r3, #0]
 8026512:	b2db      	uxtb	r3, r3
 8026514:	f04f 0400 	mov.w	r4, #0
 8026518:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802651a:	fb04 f102 	mul.w	r1, r4, r2
 802651e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8026520:	fb03 f202 	mul.w	r2, r3, r2
 8026524:	440a      	add	r2, r1
 8026526:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8026528:	fba1 5603 	umull	r5, r6, r1, r3
 802652c:	4432      	add	r2, r6
 802652e:	4616      	mov	r6, r2
 8026530:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8026534:	186b      	adds	r3, r5, r1
 8026536:	eb46 0402 	adc.w	r4, r6, r2
 802653a:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    for (int i = 0; i <= 6; i++) {
 802653e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026540:	3301      	adds	r3, #1
 8026542:	637b      	str	r3, [r7, #52]	; 0x34
 8026544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026546:	2b06      	cmp	r3, #6
 8026548:	dda5      	ble.n	8026496 <RTC_Decode+0x1e>
    }

    // fill to timestamp
    timestamp.date.Year = dt[0];
 802654a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802654e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    timestamp.date.Month = dt[1];
 8026552:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8026556:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    timestamp.date.Date = dt[2];
 802655a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 802655e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    timestamp.time.Hours = dt[3];
 8026562:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8026566:	743b      	strb	r3, [r7, #16]
    timestamp.time.Minutes = dt[4];
 8026568:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 802656c:	747b      	strb	r3, [r7, #17]
    timestamp.time.Seconds = dt[5];
 802656e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8026572:	74bb      	strb	r3, [r7, #18]
    timestamp.date.WeekDay = dt[6];
 8026574:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8026578:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

    return timestamp;
 802657c:	68fb      	ldr	r3, [r7, #12]
 802657e:	461d      	mov	r5, r3
 8026580:	f107 0410 	add.w	r4, r7, #16
 8026584:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8026586:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8026588:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 802658c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8026590:	68f8      	ldr	r0, [r7, #12]
 8026592:	374c      	adds	r7, #76	; 0x4c
 8026594:	46bd      	mov	sp, r7
 8026596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026598:	00000000 	.word	0x00000000
 802659c:	40240000 	.word	0x40240000

080265a0 <RTC_Encode>:

uint64_t RTC_Encode(timestamp_t timestamp) {
 80265a0:	b084      	sub	sp, #16
 80265a2:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80265a6:	b088      	sub	sp, #32
 80265a8:	af00      	add	r7, sp, #0
 80265aa:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80265ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint8_t dt[7];
    uint64_t tot = 0, mul;
 80265b2:	f04f 0300 	mov.w	r3, #0
 80265b6:	f04f 0400 	mov.w	r4, #0
 80265ba:	e9c7 3406 	strd	r3, r4, [r7, #24]

    // get from timestamp
    dt[0] = timestamp.date.Year;
 80265be:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80265c2:	713b      	strb	r3, [r7, #4]
    dt[1] = timestamp.date.Month;
 80265c4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80265c8:	717b      	strb	r3, [r7, #5]
    dt[2] = timestamp.date.Date;
 80265ca:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80265ce:	71bb      	strb	r3, [r7, #6]
    dt[3] = timestamp.time.Hours;
 80265d0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80265d4:	71fb      	strb	r3, [r7, #7]
    dt[4] = timestamp.time.Minutes;
 80265d6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80265da:	723b      	strb	r3, [r7, #8]
    dt[5] = timestamp.time.Seconds;
 80265dc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80265e0:	727b      	strb	r3, [r7, #9]
    dt[6] = timestamp.date.WeekDay;
 80265e2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80265e6:	72bb      	strb	r3, [r7, #10]

    // parsing to datetime
    for (int i = 0; i <= 6; i++) {
 80265e8:	2300      	movs	r3, #0
 80265ea:	60fb      	str	r3, [r7, #12]
 80265ec:	e040      	b.n	8026670 <RTC_Encode+0xd0>
        if (i < 6) {
 80265ee:	68fb      	ldr	r3, [r7, #12]
 80265f0:	2b05      	cmp	r3, #5
 80265f2:	dc19      	bgt.n	8026628 <RTC_Encode+0x88>
            mul = pow(10, (11 - (2 * i)));
 80265f4:	68fb      	ldr	r3, [r7, #12]
 80265f6:	005b      	lsls	r3, r3, #1
 80265f8:	f1c3 030b 	rsb	r3, r3, #11
 80265fc:	4618      	mov	r0, r3
 80265fe:	f7f9 ffc9 	bl	8020594 <__aeabi_i2d>
 8026602:	4603      	mov	r3, r0
 8026604:	460c      	mov	r4, r1
 8026606:	ec44 3b11 	vmov	d1, r3, r4
 802660a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8026690 <RTC_Encode+0xf0>
 802660e:	f01b fc7b 	bl	8041f08 <pow>
 8026612:	ec54 3b10 	vmov	r3, r4, d0
 8026616:	4618      	mov	r0, r3
 8026618:	4621      	mov	r1, r4
 802661a:	f7fa fb85 	bl	8020d28 <__aeabi_d2ulz>
 802661e:	4603      	mov	r3, r0
 8026620:	460c      	mov	r4, r1
 8026622:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8026626:	e005      	b.n	8026634 <RTC_Encode+0x94>
        } else {
            mul = 1;
 8026628:	f04f 0301 	mov.w	r3, #1
 802662c:	f04f 0400 	mov.w	r4, #0
 8026630:	e9c7 3404 	strd	r3, r4, [r7, #16]
        }
        tot += dt[i] * mul;
 8026634:	1d3a      	adds	r2, r7, #4
 8026636:	68fb      	ldr	r3, [r7, #12]
 8026638:	4413      	add	r3, r2
 802663a:	781b      	ldrb	r3, [r3, #0]
 802663c:	b2db      	uxtb	r3, r3
 802663e:	f04f 0400 	mov.w	r4, #0
 8026642:	693a      	ldr	r2, [r7, #16]
 8026644:	fb04 f102 	mul.w	r1, r4, r2
 8026648:	697a      	ldr	r2, [r7, #20]
 802664a:	fb03 f202 	mul.w	r2, r3, r2
 802664e:	440a      	add	r2, r1
 8026650:	6939      	ldr	r1, [r7, #16]
 8026652:	fba1 bc03 	umull	fp, ip, r1, r3
 8026656:	4462      	add	r2, ip
 8026658:	4694      	mov	ip, r2
 802665a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 802665e:	eb1b 0301 	adds.w	r3, fp, r1
 8026662:	eb4c 0402 	adc.w	r4, ip, r2
 8026666:	e9c7 3406 	strd	r3, r4, [r7, #24]
    for (int i = 0; i <= 6; i++) {
 802666a:	68fb      	ldr	r3, [r7, #12]
 802666c:	3301      	adds	r3, #1
 802666e:	60fb      	str	r3, [r7, #12]
 8026670:	68fb      	ldr	r3, [r7, #12]
 8026672:	2b06      	cmp	r3, #6
 8026674:	ddbb      	ble.n	80265ee <RTC_Encode+0x4e>
    }

    return tot;
 8026676:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
}
 802667a:	4618      	mov	r0, r3
 802667c:	4621      	mov	r1, r4
 802667e:	3720      	adds	r7, #32
 8026680:	46bd      	mov	sp, r7
 8026682:	e8bd 4890 	ldmia.w	sp!, {r4, r7, fp, lr}
 8026686:	b004      	add	sp, #16
 8026688:	4770      	bx	lr
 802668a:	bf00      	nop
 802668c:	f3af 8000 	nop.w
 8026690:	00000000 	.word	0x00000000
 8026694:	40240000 	.word	0x40240000

08026698 <RTC_Read>:

uint64_t RTC_Read(void) {
 8026698:	b590      	push	{r4, r7, lr}
 802669a:	b08d      	sub	sp, #52	; 0x34
 802669c:	af04      	add	r7, sp, #16
    timestamp_t timestamp;

    // get the RTC
    RTC_ReadRaw(&timestamp);
 802669e:	1d3b      	adds	r3, r7, #4
 80266a0:	4618      	mov	r0, r3
 80266a2:	f000 f813 	bl	80266cc <RTC_ReadRaw>

    // encode timestamp to datetime
    return RTC_Encode(timestamp);
 80266a6:	466c      	mov	r4, sp
 80266a8:	f107 0314 	add.w	r3, r7, #20
 80266ac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80266b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80266b4:	1d3b      	adds	r3, r7, #4
 80266b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80266b8:	f7ff ff72 	bl	80265a0 <RTC_Encode>
 80266bc:	4603      	mov	r3, r0
 80266be:	460c      	mov	r4, r1
}
 80266c0:	4618      	mov	r0, r3
 80266c2:	4621      	mov	r1, r4
 80266c4:	3724      	adds	r7, #36	; 0x24
 80266c6:	46bd      	mov	sp, r7
 80266c8:	bd90      	pop	{r4, r7, pc}
	...

080266cc <RTC_ReadRaw>:

void RTC_ReadRaw(timestamp_t *timestamp) {
 80266cc:	b580      	push	{r7, lr}
 80266ce:	b082      	sub	sp, #8
 80266d0:	af00      	add	r7, sp, #0
 80266d2:	6078      	str	r0, [r7, #4]
    // get the RTC
    lock();
 80266d4:	f000 f8c0 	bl	8026858 <lock>
    HAL_RTC_GetTime(&hrtc, &timestamp->time, RTC_FORMAT_BIN);
 80266d8:	687b      	ldr	r3, [r7, #4]
 80266da:	2200      	movs	r2, #0
 80266dc:	4619      	mov	r1, r3
 80266de:	4809      	ldr	r0, [pc, #36]	; (8026704 <RTC_ReadRaw+0x38>)
 80266e0:	f00e fca9 	bl	8035036 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &timestamp->date, RTC_FORMAT_BIN);
 80266e4:	687b      	ldr	r3, [r7, #4]
 80266e6:	3314      	adds	r3, #20
 80266e8:	2200      	movs	r2, #0
 80266ea:	4619      	mov	r1, r3
 80266ec:	4805      	ldr	r0, [pc, #20]	; (8026704 <RTC_ReadRaw+0x38>)
 80266ee:	f00e fda7 	bl	8035240 <HAL_RTC_GetDate>
    timestamp->tzQuarterHour = 0;
 80266f2:	687b      	ldr	r3, [r7, #4]
 80266f4:	2200      	movs	r2, #0
 80266f6:	761a      	strb	r2, [r3, #24]
    unlock();
 80266f8:	f000 f8bc 	bl	8026874 <unlock>
}
 80266fc:	bf00      	nop
 80266fe:	3708      	adds	r7, #8
 8026700:	46bd      	mov	sp, r7
 8026702:	bd80      	pop	{r7, pc}
 8026704:	2000880c 	.word	0x2000880c

08026708 <RTC_Write>:

void RTC_Write(uint64_t dateTime, rtc_t *rtc) {
 8026708:	b5b0      	push	{r4, r5, r7, lr}
 802670a:	b094      	sub	sp, #80	; 0x50
 802670c:	af00      	add	r7, sp, #0
 802670e:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8026712:	627a      	str	r2, [r7, #36]	; 0x24
    timestamp_t timestamp;

    // decode datetime to timestamp
    timestamp = RTC_Decode(dateTime);
 8026714:	4639      	mov	r1, r7
 8026716:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 802671a:	4608      	mov	r0, r1
 802671c:	f7ff feac 	bl	8026478 <RTC_Decode>
 8026720:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8026724:	463d      	mov	r5, r7
 8026726:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026728:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802672a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 802672e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    // set the RTC
    RTC_WriteRaw(&timestamp, rtc);
 8026732:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8026736:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8026738:	4618      	mov	r0, r3
 802673a:	f000 f805 	bl	8026748 <RTC_WriteRaw>
}
 802673e:	bf00      	nop
 8026740:	3750      	adds	r7, #80	; 0x50
 8026742:	46bd      	mov	sp, r7
 8026744:	bdb0      	pop	{r4, r5, r7, pc}
	...

08026748 <RTC_WriteRaw>:

void RTC_WriteRaw(timestamp_t *timestamp, rtc_t *rtc) {
 8026748:	b5b0      	push	{r4, r5, r7, lr}
 802674a:	b082      	sub	sp, #8
 802674c:	af00      	add	r7, sp, #0
 802674e:	6078      	str	r0, [r7, #4]
 8026750:	6039      	str	r1, [r7, #0]
    // add extra property
    timestamp->time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8026752:	687b      	ldr	r3, [r7, #4]
 8026754:	2200      	movs	r2, #0
 8026756:	60da      	str	r2, [r3, #12]
    timestamp->time.StoreOperation = RTC_STOREOPERATION_RESET;
 8026758:	687b      	ldr	r3, [r7, #4]
 802675a:	2200      	movs	r2, #0
 802675c:	611a      	str	r2, [r3, #16]

    // set the RTC
    lock();
 802675e:	f000 f87b 	bl	8026858 <lock>
    HAL_RTC_SetTime(&hrtc, &timestamp->time, RTC_FORMAT_BIN);
 8026762:	687b      	ldr	r3, [r7, #4]
 8026764:	2200      	movs	r2, #0
 8026766:	4619      	mov	r1, r3
 8026768:	480e      	ldr	r0, [pc, #56]	; (80267a4 <RTC_WriteRaw+0x5c>)
 802676a:	f00e fba7 	bl	8034ebc <HAL_RTC_SetTime>
    HAL_RTC_SetDate(&hrtc, &timestamp->date, RTC_FORMAT_BIN);
 802676e:	687b      	ldr	r3, [r7, #4]
 8026770:	3314      	adds	r3, #20
 8026772:	2200      	movs	r2, #0
 8026774:	4619      	mov	r1, r3
 8026776:	480b      	ldr	r0, [pc, #44]	; (80267a4 <RTC_WriteRaw+0x5c>)
 8026778:	f00e fcbb 	bl	80350f2 <HAL_RTC_SetDate>
    unlock();
 802677c:	f000 f87a 	bl	8026874 <unlock>

    // save calibration date
    // source from server is always considered as valid
    rtc->calibration = timestamp->date;
 8026780:	683b      	ldr	r3, [r7, #0]
 8026782:	687a      	ldr	r2, [r7, #4]
 8026784:	6952      	ldr	r2, [r2, #20]
 8026786:	61da      	str	r2, [r3, #28]
    // update time
    rtc->timestamp = *timestamp;
 8026788:	683a      	ldr	r2, [r7, #0]
 802678a:	687b      	ldr	r3, [r7, #4]
 802678c:	4614      	mov	r4, r2
 802678e:	461d      	mov	r5, r3
 8026790:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026792:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026794:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8026798:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 802679c:	bf00      	nop
 802679e:	3708      	adds	r7, #8
 80267a0:	46bd      	mov	sp, r7
 80267a2:	bdb0      	pop	{r4, r5, r7, pc}
 80267a4:	2000880c 	.word	0x2000880c

080267a8 <RTC_IsDaylight>:

uint8_t RTC_IsDaylight(timestamp_t timestamp) {
 80267a8:	b084      	sub	sp, #16
 80267aa:	b490      	push	{r4, r7}
 80267ac:	af00      	add	r7, sp, #0
 80267ae:	f107 0408 	add.w	r4, r7, #8
 80267b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return (timestamp.time.Hours >= 5 && timestamp.time.Hours <= 16);
 80267b6:	7a3b      	ldrb	r3, [r7, #8]
 80267b8:	2b04      	cmp	r3, #4
 80267ba:	d904      	bls.n	80267c6 <RTC_IsDaylight+0x1e>
 80267bc:	7a3b      	ldrb	r3, [r7, #8]
 80267be:	2b10      	cmp	r3, #16
 80267c0:	d801      	bhi.n	80267c6 <RTC_IsDaylight+0x1e>
 80267c2:	2301      	movs	r3, #1
 80267c4:	e000      	b.n	80267c8 <RTC_IsDaylight+0x20>
 80267c6:	2300      	movs	r3, #0
 80267c8:	b2db      	uxtb	r3, r3
}
 80267ca:	4618      	mov	r0, r3
 80267cc:	46bd      	mov	sp, r7
 80267ce:	bc90      	pop	{r4, r7}
 80267d0:	b004      	add	sp, #16
 80267d2:	4770      	bx	lr

080267d4 <RTC_NeedCalibration>:

uint8_t RTC_NeedCalibration(void) {
 80267d4:	b580      	push	{r7, lr}
 80267d6:	af00      	add	r7, sp, #0
    // Retrieve RTC time
    RTC_ReadRaw(&(VCU.d.rtc.timestamp));
 80267d8:	4810      	ldr	r0, [pc, #64]	; (802681c <RTC_NeedCalibration+0x48>)
 80267da:	f7ff ff77 	bl	80266cc <RTC_ReadRaw>

    // Compare
    return (VCU.d.rtc.calibration.Year != VCU.d.rtc.timestamp.date.Year ||
 80267de:	4b10      	ldr	r3, [pc, #64]	; (8026820 <RTC_NeedCalibration+0x4c>)
 80267e0:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80267e4:	4b0e      	ldr	r3, [pc, #56]	; (8026820 <RTC_NeedCalibration+0x4c>)
 80267e6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
            VCU.d.rtc.calibration.Month != VCU.d.rtc.timestamp.date.Month ||
 80267ea:	429a      	cmp	r2, r3
 80267ec:	d10f      	bne.n	802680e <RTC_NeedCalibration+0x3a>
 80267ee:	4b0c      	ldr	r3, [pc, #48]	; (8026820 <RTC_NeedCalibration+0x4c>)
 80267f0:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80267f4:	4b0a      	ldr	r3, [pc, #40]	; (8026820 <RTC_NeedCalibration+0x4c>)
 80267f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    return (VCU.d.rtc.calibration.Year != VCU.d.rtc.timestamp.date.Year ||
 80267fa:	429a      	cmp	r2, r3
 80267fc:	d107      	bne.n	802680e <RTC_NeedCalibration+0x3a>
            VCU.d.rtc.calibration.Date != VCU.d.rtc.timestamp.date.Date);
 80267fe:	4b08      	ldr	r3, [pc, #32]	; (8026820 <RTC_NeedCalibration+0x4c>)
 8026800:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8026804:	4b06      	ldr	r3, [pc, #24]	; (8026820 <RTC_NeedCalibration+0x4c>)
 8026806:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
            VCU.d.rtc.calibration.Month != VCU.d.rtc.timestamp.date.Month ||
 802680a:	429a      	cmp	r2, r3
 802680c:	d001      	beq.n	8026812 <RTC_NeedCalibration+0x3e>
 802680e:	2301      	movs	r3, #1
 8026810:	e000      	b.n	8026814 <RTC_NeedCalibration+0x40>
 8026812:	2300      	movs	r3, #0
 8026814:	b2db      	uxtb	r3, r3
}
 8026816:	4618      	mov	r0, r3
 8026818:	bd80      	pop	{r7, pc}
 802681a:	bf00      	nop
 802681c:	20000238 	.word	0x20000238
 8026820:	20000228 	.word	0x20000228

08026824 <RTC_CalibrateWithSimcom>:

void RTC_CalibrateWithSimcom(void) {
 8026824:	b580      	push	{r7, lr}
 8026826:	b088      	sub	sp, #32
 8026828:	af00      	add	r7, sp, #0
    timestamp_t timestamp;

    if (AT_Clock(ATR, &timestamp)) {
 802682a:	1d3b      	adds	r3, r7, #4
 802682c:	4619      	mov	r1, r3
 802682e:	2001      	movs	r0, #1
 8026830:	f017 f87e 	bl	803d930 <AT_Clock>
 8026834:	4603      	mov	r3, r0
 8026836:	2b00      	cmp	r3, #0
 8026838:	d007      	beq.n	802684a <RTC_CalibrateWithSimcom+0x26>
        if (timestamp.date.Year >= VCU_BUILD_YEAR) {
 802683a:	7efb      	ldrb	r3, [r7, #27]
 802683c:	2b13      	cmp	r3, #19
 802683e:	d904      	bls.n	802684a <RTC_CalibrateWithSimcom+0x26>
            // Calibrate time
            RTC_WriteRaw(&timestamp, &(VCU.d.rtc));
 8026840:	1d3b      	adds	r3, r7, #4
 8026842:	4904      	ldr	r1, [pc, #16]	; (8026854 <RTC_CalibrateWithSimcom+0x30>)
 8026844:	4618      	mov	r0, r3
 8026846:	f7ff ff7f 	bl	8026748 <RTC_WriteRaw>
        }
    }
}
 802684a:	bf00      	nop
 802684c:	3720      	adds	r7, #32
 802684e:	46bd      	mov	sp, r7
 8026850:	bd80      	pop	{r7, pc}
 8026852:	bf00      	nop
 8026854:	20000238 	.word	0x20000238

08026858 <lock>:

/* Private functions implementation --------------------------------------------*/
static void lock(void) {
 8026858:	b580      	push	{r7, lr}
 802685a:	af00      	add	r7, sp, #0
    osMutexAcquire(RtcMutexHandle, osWaitForever);
 802685c:	4b04      	ldr	r3, [pc, #16]	; (8026870 <lock+0x18>)
 802685e:	681b      	ldr	r3, [r3, #0]
 8026860:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8026864:	4618      	mov	r0, r3
 8026866:	f011 fa5f 	bl	8037d28 <osMutexAcquire>
}
 802686a:	bf00      	nop
 802686c:	bd80      	pop	{r7, pc}
 802686e:	bf00      	nop
 8026870:	2000858c 	.word	0x2000858c

08026874 <unlock>:

static void unlock(void) {
 8026874:	b580      	push	{r7, lr}
 8026876:	af00      	add	r7, sp, #0
    osMutexRelease(RtcMutexHandle);
 8026878:	4b03      	ldr	r3, [pc, #12]	; (8026888 <unlock+0x14>)
 802687a:	681b      	ldr	r3, [r3, #0]
 802687c:	4618      	mov	r0, r3
 802687e:	f011 fab1 	bl	8037de4 <osMutexRelease>
}
 8026882:	bf00      	nop
 8026884:	bd80      	pop	{r7, pc}
 8026886:	bf00      	nop
 8026888:	2000858c 	.word	0x2000858c

0802688c <AUDIO_Init>:
static uint8_t AUDIO_OUT_Play(uint16_t *pBuffer, uint32_t Size);
static void lock(void);
static void unlock(void);

/* Public functions implementation ---------------------------------------------*/
void AUDIO_Init(void) {
 802688c:	b580      	push	{r7, lr}
 802688e:	b082      	sub	sp, #8
 8026890:	af00      	add	r7, sp, #0
    uint8_t ret;

    do {
        LOG_StrLn("Audio:Init");
 8026892:	4816      	ldr	r0, [pc, #88]	; (80268ec <AUDIO_Init+0x60>)
 8026894:	f017 fdc6 	bl	803e424 <LOG_StrLn>

        // Mosftet control
        HAL_GPIO_WritePin(INT_AUDIO_PWR_GPIO_Port, INT_AUDIO_PWR_Pin, 0);
 8026898:	2200      	movs	r2, #0
 802689a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 802689e:	4814      	ldr	r0, [pc, #80]	; (80268f0 <AUDIO_Init+0x64>)
 80268a0:	f009 fbc4 	bl	803002c <HAL_GPIO_WritePin>
        _DelayMS(500);
 80268a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80268a8:	f018 ff8a 	bl	803f7c0 <_DelayMS>
        HAL_GPIO_WritePin(INT_AUDIO_PWR_GPIO_Port, INT_AUDIO_PWR_Pin, 1);
 80268ac:	2201      	movs	r2, #1
 80268ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80268b2:	480f      	ldr	r0, [pc, #60]	; (80268f0 <AUDIO_Init+0x64>)
 80268b4:	f009 fbba 	bl	803002c <HAL_GPIO_WritePin>
        _DelayMS(1000);
 80268b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80268bc:	f018 ff80 	bl	803f7c0 <_DelayMS>

        /* Initialize Wave player (Codec, DMA, I2C) */
        ret = AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE, AudioVolume, AUDIO_SAMPLE_FREQ);
 80268c0:	4b0c      	ldr	r3, [pc, #48]	; (80268f4 <AUDIO_Init+0x68>)
 80268c2:	7819      	ldrb	r1, [r3, #0]
 80268c4:	4b0c      	ldr	r3, [pc, #48]	; (80268f8 <AUDIO_Init+0x6c>)
 80268c6:	681b      	ldr	r3, [r3, #0]
 80268c8:	461a      	mov	r2, r3
 80268ca:	2002      	movs	r0, #2
 80268cc:	f000 f99a 	bl	8026c04 <AUDIO_OUT_Init>
 80268d0:	4603      	mov	r3, r0
 80268d2:	71fb      	strb	r3, [r7, #7]

        _DelayMS(500);
 80268d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80268d8:	f018 ff72 	bl	803f7c0 <_DelayMS>
    } while (ret != AUDIO_OK);
 80268dc:	79fb      	ldrb	r3, [r7, #7]
 80268de:	2b00      	cmp	r3, #0
 80268e0:	d1d7      	bne.n	8026892 <AUDIO_Init+0x6>
}
 80268e2:	bf00      	nop
 80268e4:	3708      	adds	r7, #8
 80268e6:	46bd      	mov	sp, r7
 80268e8:	bd80      	pop	{r7, pc}
 80268ea:	bf00      	nop
 80268ec:	08043568 	.word	0x08043568
 80268f0:	40020800 	.word	0x40020800
 80268f4:	20000002 	.word	0x20000002
 80268f8:	08044024 	.word	0x08044024

080268fc <AUDIO_Play>:

void AUDIO_Play(void) {
 80268fc:	b580      	push	{r7, lr}
 80268fe:	af00      	add	r7, sp, #0
    /* Get data size from audio file */
    AudioRemSize = AUDIO_SAMPLE_SIZE;
 8026900:	4b0d      	ldr	r3, [pc, #52]	; (8026938 <AUDIO_Play+0x3c>)
 8026902:	681b      	ldr	r3, [r3, #0]
 8026904:	4a0d      	ldr	r2, [pc, #52]	; (802693c <AUDIO_Play+0x40>)
 8026906:	6013      	str	r3, [r2, #0]
    /* Get total data to be played */
    if (AUDIO_SAMPLE_SIZE > AUDIO_BUFFER_SIZE) {
 8026908:	4b0b      	ldr	r3, [pc, #44]	; (8026938 <AUDIO_Play+0x3c>)
 802690a:	681b      	ldr	r3, [r3, #0]
 802690c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8026910:	d904      	bls.n	802691c <AUDIO_Play+0x20>
        AudioPlaySize = AUDIO_BUFFER_SIZE;
 8026912:	4b0b      	ldr	r3, [pc, #44]	; (8026940 <AUDIO_Play+0x44>)
 8026914:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8026918:	801a      	strh	r2, [r3, #0]
 802691a:	e004      	b.n	8026926 <AUDIO_Play+0x2a>
    } else {
        AudioPlaySize = AUDIO_SAMPLE_SIZE;
 802691c:	4b06      	ldr	r3, [pc, #24]	; (8026938 <AUDIO_Play+0x3c>)
 802691e:	681b      	ldr	r3, [r3, #0]
 8026920:	b29a      	uxth	r2, r3
 8026922:	4b07      	ldr	r3, [pc, #28]	; (8026940 <AUDIO_Play+0x44>)
 8026924:	801a      	strh	r2, [r3, #0]
    }

    /* Start playing Wave */
    AUDIO_OUT_Play((uint16_t*) AUDIO_SAMPLE, AudioPlaySize);
 8026926:	4b06      	ldr	r3, [pc, #24]	; (8026940 <AUDIO_Play+0x44>)
 8026928:	881b      	ldrh	r3, [r3, #0]
 802692a:	4619      	mov	r1, r3
 802692c:	4805      	ldr	r0, [pc, #20]	; (8026944 <AUDIO_Play+0x48>)
 802692e:	f000 f9a5 	bl	8026c7c <AUDIO_OUT_Play>
}
 8026932:	bf00      	nop
 8026934:	bd80      	pop	{r7, pc}
 8026936:	bf00      	nop
 8026938:	08044028 	.word	0x08044028
 802693c:	20000e38 	.word	0x20000e38
 8026940:	20000e36 	.word	0x20000e36
 8026944:	0804402c 	.word	0x0804402c

08026948 <AUDIO_BeepPlay>:

void AUDIO_BeepPlay(uint8_t Frequency, uint16_t TimeMS) {
 8026948:	b580      	push	{r7, lr}
 802694a:	b082      	sub	sp, #8
 802694c:	af00      	add	r7, sp, #0
 802694e:	4603      	mov	r3, r0
 8026950:	460a      	mov	r2, r1
 8026952:	71fb      	strb	r3, [r7, #7]
 8026954:	4613      	mov	r3, r2
 8026956:	80bb      	strh	r3, [r7, #4]
    lock();
 8026958:	f000 f9ea 	bl	8026d30 <lock>

    cs43l22_SetBeep(AUDIO_I2C_ADDRESS, Frequency, 0, 0);
 802695c:	79f9      	ldrb	r1, [r7, #7]
 802695e:	2300      	movs	r3, #0
 8026960:	2200      	movs	r2, #0
 8026962:	2094      	movs	r0, #148	; 0x94
 8026964:	f7fd fa3c 	bl	8023de0 <cs43l22_SetBeep>
    cs43l22_Beep(AUDIO_I2C_ADDRESS, BEEP_MODE_CONTINUOUS, BEEP_MIX_ON);
 8026968:	2200      	movs	r2, #0
 802696a:	2103      	movs	r1, #3
 802696c:	2094      	movs	r0, #148	; 0x94
 802696e:	f7fd fa72 	bl	8023e56 <cs43l22_Beep>

    if (TimeMS > 0) {
 8026972:	88bb      	ldrh	r3, [r7, #4]
 8026974:	2b00      	cmp	r3, #0
 8026976:	d008      	beq.n	802698a <AUDIO_BeepPlay+0x42>
        // delay with RTOS
        _DelayMS(TimeMS);
 8026978:	88bb      	ldrh	r3, [r7, #4]
 802697a:	4618      	mov	r0, r3
 802697c:	f018 ff20 	bl	803f7c0 <_DelayMS>
        // than stop
        cs43l22_Beep(AUDIO_I2C_ADDRESS, BEEP_MODE_OFF, BEEP_MIX_ON);
 8026980:	2200      	movs	r2, #0
 8026982:	2100      	movs	r1, #0
 8026984:	2094      	movs	r0, #148	; 0x94
 8026986:	f7fd fa66 	bl	8023e56 <cs43l22_Beep>
    }

    unlock();
 802698a:	f000 f9df 	bl	8026d4c <unlock>
}
 802698e:	bf00      	nop
 8026990:	3708      	adds	r7, #8
 8026992:	46bd      	mov	sp, r7
 8026994:	bd80      	pop	{r7, pc}

08026996 <AUDIO_BeepStop>:

void AUDIO_BeepStop(void) {
 8026996:	b580      	push	{r7, lr}
 8026998:	af00      	add	r7, sp, #0
    lock();
 802699a:	f000 f9c9 	bl	8026d30 <lock>

    cs43l22_Beep(AUDIO_I2C_ADDRESS, BEEP_MODE_OFF, BEEP_MIX_ON);
 802699e:	2200      	movs	r2, #0
 80269a0:	2100      	movs	r1, #0
 80269a2:	2094      	movs	r0, #148	; 0x94
 80269a4:	f7fd fa57 	bl	8023e56 <cs43l22_Beep>

    unlock();
 80269a8:	f000 f9d0 	bl	8026d4c <unlock>
}
 80269ac:	bf00      	nop
 80269ae:	bd80      	pop	{r7, pc}

080269b0 <AUDIO_OUT_ChangeBuffer>:
/**
 * @brief  Sends n-Bytes on the I2S interface.
 * @param  pData: Pointer to data address
 * @param  Size: Number of data to be written
 */
void AUDIO_OUT_ChangeBuffer(uint16_t *pData, uint16_t Size) {
 80269b0:	b580      	push	{r7, lr}
 80269b2:	b082      	sub	sp, #8
 80269b4:	af00      	add	r7, sp, #0
 80269b6:	6078      	str	r0, [r7, #4]
 80269b8:	460b      	mov	r3, r1
 80269ba:	807b      	strh	r3, [r7, #2]
    HAL_I2S_Transmit_DMA(&hi2s3, pData, DMA_MAX(Size/AUDIODATA_SIZE));
 80269bc:	887b      	ldrh	r3, [r7, #2]
 80269be:	085b      	lsrs	r3, r3, #1
 80269c0:	b29b      	uxth	r3, r3
 80269c2:	461a      	mov	r2, r3
 80269c4:	6879      	ldr	r1, [r7, #4]
 80269c6:	4803      	ldr	r0, [pc, #12]	; (80269d4 <AUDIO_OUT_ChangeBuffer+0x24>)
 80269c8:	f00c fbc6 	bl	8033158 <HAL_I2S_Transmit_DMA>
}
 80269cc:	bf00      	nop
 80269ce:	3708      	adds	r7, #8
 80269d0:	46bd      	mov	sp, r7
 80269d2:	bd80      	pop	{r7, pc}
 80269d4:	200089c0 	.word	0x200089c0

080269d8 <AUDIO_OUT_SetVolume>:
 * @brief  Controls the current audio volume level.
 * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for
 *         Mute and 100 for Max volume level).
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t AUDIO_OUT_SetVolume(uint8_t Volume) {
 80269d8:	b580      	push	{r7, lr}
 80269da:	b082      	sub	sp, #8
 80269dc:	af00      	add	r7, sp, #0
 80269de:	4603      	mov	r3, r0
 80269e0:	71fb      	strb	r3, [r7, #7]
    /* Call the codec volume control function with converted volume value */
    if (cs43l22_SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0) {
 80269e2:	79fb      	ldrb	r3, [r7, #7]
 80269e4:	4619      	mov	r1, r3
 80269e6:	2094      	movs	r0, #148	; 0x94
 80269e8:	f7fd f930 	bl	8023c4c <cs43l22_SetVolume>
 80269ec:	4603      	mov	r3, r0
 80269ee:	2b00      	cmp	r3, #0
 80269f0:	d001      	beq.n	80269f6 <AUDIO_OUT_SetVolume+0x1e>
        return AUDIO_ERROR;
 80269f2:	2301      	movs	r3, #1
 80269f4:	e000      	b.n	80269f8 <AUDIO_OUT_SetVolume+0x20>
    } else {
        /* Return AUDIO_OK when all operations are correctly done */
        return AUDIO_OK;
 80269f6:	2300      	movs	r3, #0
    }
}
 80269f8:	4618      	mov	r0, r3
 80269fa:	3708      	adds	r7, #8
 80269fc:	46bd      	mov	sp, r7
 80269fe:	bd80      	pop	{r7, pc}

08026a00 <AUDIO_OUT_SetMute>:
 * @brief  Enables or disables the MUTE mode by software
 * @param  Cmd: could be AUDIO_MUTE_ON to mute sound or AUDIO_MUTE_OFF to
 *         unmute the codec and restore previous volume level.
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t AUDIO_OUT_SetMute(uint32_t Cmd) {
 8026a00:	b580      	push	{r7, lr}
 8026a02:	b082      	sub	sp, #8
 8026a04:	af00      	add	r7, sp, #0
 8026a06:	6078      	str	r0, [r7, #4]
    /* Call the Codec Mute function */
    if (cs43l22_SetMute(AUDIO_I2C_ADDRESS, Cmd) != 0) {
 8026a08:	6879      	ldr	r1, [r7, #4]
 8026a0a:	2094      	movs	r0, #148	; 0x94
 8026a0c:	f7fd f968 	bl	8023ce0 <cs43l22_SetMute>
 8026a10:	4603      	mov	r3, r0
 8026a12:	2b00      	cmp	r3, #0
 8026a14:	d001      	beq.n	8026a1a <AUDIO_OUT_SetMute+0x1a>
        return AUDIO_ERROR;
 8026a16:	2301      	movs	r3, #1
 8026a18:	e000      	b.n	8026a1c <AUDIO_OUT_SetMute+0x1c>
    } else {
        /* Return AUDIO_OK when all operations are correctly done */
        return AUDIO_OK;
 8026a1a:	2300      	movs	r3, #0
    }
}
 8026a1c:	4618      	mov	r0, r3
 8026a1e:	3708      	adds	r7, #8
 8026a20:	46bd      	mov	sp, r7
 8026a22:	bd80      	pop	{r7, pc}

08026a24 <AUDIO_OUT_ClockConfig>:
 * @param  AudioFreq: Audio frequency used to play the audio stream.
 * @note   This API is called by AUDIO_OUT_Init() and AUDIO_OUT_SetFrequency()
 *         Being __weak it can be overwritten by the application
 * @param  Params : pointer on additional configuration parameters, can be NULL.
 */
__weak void AUDIO_OUT_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params) {
 8026a24:	b580      	push	{r7, lr}
 8026a26:	b09c      	sub	sp, #112	; 0x70
 8026a28:	af00      	add	r7, sp, #0
 8026a2a:	60f8      	str	r0, [r7, #12]
 8026a2c:	60b9      	str	r1, [r7, #8]
 8026a2e:	607a      	str	r2, [r7, #4]
    RCC_PeriphCLKInitTypeDef rccclkinit;
    uint8_t index = 0, freqindex = 0xFF;
 8026a30:	2300      	movs	r3, #0
 8026a32:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8026a36:	23ff      	movs	r3, #255	; 0xff
 8026a38:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

    for (index = 0; index < 7; index++) {
 8026a3c:	2300      	movs	r3, #0
 8026a3e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8026a42:	e011      	b.n	8026a68 <AUDIO_OUT_ClockConfig+0x44>
        if (I2SFreq[index] == AudioFreq) {
 8026a44:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8026a48:	4a1c      	ldr	r2, [pc, #112]	; (8026abc <AUDIO_OUT_ClockConfig+0x98>)
 8026a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8026a4e:	68ba      	ldr	r2, [r7, #8]
 8026a50:	429a      	cmp	r2, r3
 8026a52:	d104      	bne.n	8026a5e <AUDIO_OUT_ClockConfig+0x3a>
            freqindex = index;
 8026a54:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8026a58:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
            break;
 8026a5c:	e008      	b.n	8026a70 <AUDIO_OUT_ClockConfig+0x4c>
    for (index = 0; index < 7; index++) {
 8026a5e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8026a62:	3301      	adds	r3, #1
 8026a64:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8026a68:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8026a6c:	2b06      	cmp	r3, #6
 8026a6e:	d9e9      	bls.n	8026a44 <AUDIO_OUT_ClockConfig+0x20>
        }
    }

    /* Enable PLLI2S clock */
    HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8026a70:	f107 0314 	add.w	r3, r7, #20
 8026a74:	4618      	mov	r0, r3
 8026a76:	f00d fcd5 	bl	8034424 <HAL_RCCEx_GetPeriphCLKConfig>
    // FIXME: not consistent CubeMX for F407 & F423
    /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    if (freqindex != 0xFF) {
 8026a7a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8026a7e:	2bff      	cmp	r3, #255	; 0xff
 8026a80:	d00c      	beq.n	8026a9c <AUDIO_OUT_ClockConfig+0x78>
        /* I2S clock config
         PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) � (PLLI2SN/PLLM)
         I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
        rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8026a82:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8026a86:	4a0e      	ldr	r2, [pc, #56]	; (8026ac0 <AUDIO_OUT_ClockConfig+0x9c>)
 8026a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8026a8c:	61fb      	str	r3, [r7, #28]
        rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8026a8e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8026a92:	4a0c      	ldr	r2, [pc, #48]	; (8026ac4 <AUDIO_OUT_ClockConfig+0xa0>)
 8026a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8026a98:	627b      	str	r3, [r7, #36]	; 0x24
 8026a9a:	e004      	b.n	8026aa6 <AUDIO_OUT_ClockConfig+0x82>
    } else {
        /* I2S clock config
         PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) � (PLLI2SN/PLLM)
         I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
        rccclkinit.PLLI2S.PLLI2SN = 258;
 8026a9c:	f44f 7381 	mov.w	r3, #258	; 0x102
 8026aa0:	61fb      	str	r3, [r7, #28]
        rccclkinit.PLLI2S.PLLI2SR = 3;
 8026aa2:	2303      	movs	r3, #3
 8026aa4:	627b      	str	r3, [r7, #36]	; 0x24
    }
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1;
 8026aa6:	2301      	movs	r3, #1
 8026aa8:	617b      	str	r3, [r7, #20]

    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8026aaa:	f107 0314 	add.w	r3, r7, #20
 8026aae:	4618      	mov	r0, r3
 8026ab0:	f00d fa2c 	bl	8033f0c <HAL_RCCEx_PeriphCLKConfig>
}
 8026ab4:	bf00      	nop
 8026ab6:	3770      	adds	r7, #112	; 0x70
 8026ab8:	46bd      	mov	sp, r7
 8026aba:	bd80      	pop	{r7, pc}
 8026abc:	08055fe4 	.word	0x08055fe4
 8026ac0:	08056000 	.word	0x08056000
 8026ac4:	0805601c 	.word	0x0805601c

08026ac8 <AUDIO_OUT_MspInit>:
/**
 * @brief  AUDIO OUT I2S MSP Init.
 * @param  hi2s: might be required to set audio peripheral predivider if any.
 * @param  Params : pointer on additional configuration parameters, can be NULL.
 */
void AUDIO_OUT_MspInit(I2S_HandleTypeDef *hi2s, void *Params) {
 8026ac8:	b580      	push	{r7, lr}
 8026aca:	b082      	sub	sp, #8
 8026acc:	af00      	add	r7, sp, #0
 8026ace:	6078      	str	r0, [r7, #4]
 8026ad0:	6039      	str	r1, [r7, #0]
    HAL_I2S_MspInit(hi2s);
 8026ad2:	6878      	ldr	r0, [r7, #4]
 8026ad4:	f004 fec0 	bl	802b858 <HAL_I2S_MspInit>
}
 8026ad8:	bf00      	nop
 8026ada:	3708      	adds	r7, #8
 8026adc:	46bd      	mov	sp, r7
 8026ade:	bd80      	pop	{r7, pc}

08026ae0 <AUDIO_OUT_TransferComplete_CallBack>:
}

/**
 * @brief  Manages the DMA full Transfer complete event.
 */
__weak void AUDIO_OUT_TransferComplete_CallBack(void) {
 8026ae0:	b580      	push	{r7, lr}
 8026ae2:	af00      	add	r7, sp, #0
    if (!AudioPlayDone) {
 8026ae4:	4b1d      	ldr	r3, [pc, #116]	; (8026b5c <AUDIO_OUT_TransferComplete_CallBack+0x7c>)
 8026ae6:	781b      	ldrb	r3, [r3, #0]
 8026ae8:	2b00      	cmp	r3, #0
 8026aea:	d10f      	bne.n	8026b0c <AUDIO_OUT_TransferComplete_CallBack+0x2c>
        AUDIO_OUT_ChangeBuffer((uint16_t*) (AUDIO_SAMPLE + ((AUDIO_SAMPLE_SIZE - AudioRemSize) / AUDIODATA_SIZE)), AudioPlaySize);
 8026aec:	4b1c      	ldr	r3, [pc, #112]	; (8026b60 <AUDIO_OUT_TransferComplete_CallBack+0x80>)
 8026aee:	681a      	ldr	r2, [r3, #0]
 8026af0:	4b1c      	ldr	r3, [pc, #112]	; (8026b64 <AUDIO_OUT_TransferComplete_CallBack+0x84>)
 8026af2:	681b      	ldr	r3, [r3, #0]
 8026af4:	1ad3      	subs	r3, r2, r3
 8026af6:	f023 0301 	bic.w	r3, r3, #1
 8026afa:	4a1b      	ldr	r2, [pc, #108]	; (8026b68 <AUDIO_OUT_TransferComplete_CallBack+0x88>)
 8026afc:	441a      	add	r2, r3
 8026afe:	4b1b      	ldr	r3, [pc, #108]	; (8026b6c <AUDIO_OUT_TransferComplete_CallBack+0x8c>)
 8026b00:	881b      	ldrh	r3, [r3, #0]
 8026b02:	4619      	mov	r1, r3
 8026b04:	4610      	mov	r0, r2
 8026b06:	f7ff ff53 	bl	80269b0 <AUDIO_OUT_ChangeBuffer>
 8026b0a:	e018      	b.n	8026b3e <AUDIO_OUT_TransferComplete_CallBack+0x5e>
    } else {
        /* Get data size from audio file */
        AudioRemSize = AUDIO_SAMPLE_SIZE;
 8026b0c:	4b14      	ldr	r3, [pc, #80]	; (8026b60 <AUDIO_OUT_TransferComplete_CallBack+0x80>)
 8026b0e:	681b      	ldr	r3, [r3, #0]
 8026b10:	4a14      	ldr	r2, [pc, #80]	; (8026b64 <AUDIO_OUT_TransferComplete_CallBack+0x84>)
 8026b12:	6013      	str	r3, [r2, #0]
        /* Get total data to be played */
        if (AUDIO_SAMPLE_SIZE > AUDIO_BUFFER_SIZE) {
 8026b14:	4b12      	ldr	r3, [pc, #72]	; (8026b60 <AUDIO_OUT_TransferComplete_CallBack+0x80>)
 8026b16:	681b      	ldr	r3, [r3, #0]
 8026b18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8026b1c:	d904      	bls.n	8026b28 <AUDIO_OUT_TransferComplete_CallBack+0x48>
            AudioPlaySize = AUDIO_BUFFER_SIZE;
 8026b1e:	4b13      	ldr	r3, [pc, #76]	; (8026b6c <AUDIO_OUT_TransferComplete_CallBack+0x8c>)
 8026b20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8026b24:	801a      	strh	r2, [r3, #0]
 8026b26:	e004      	b.n	8026b32 <AUDIO_OUT_TransferComplete_CallBack+0x52>
        } else {
            AudioPlaySize = AUDIO_SAMPLE_SIZE;
 8026b28:	4b0d      	ldr	r3, [pc, #52]	; (8026b60 <AUDIO_OUT_TransferComplete_CallBack+0x80>)
 8026b2a:	681b      	ldr	r3, [r3, #0]
 8026b2c:	b29a      	uxth	r2, r3
 8026b2e:	4b0f      	ldr	r3, [pc, #60]	; (8026b6c <AUDIO_OUT_TransferComplete_CallBack+0x8c>)
 8026b30:	801a      	strh	r2, [r3, #0]
        }

        /* Start playing Wave again*/
        AUDIO_OUT_ChangeBuffer((uint16_t*) AUDIO_SAMPLE, AudioPlaySize);
 8026b32:	4b0e      	ldr	r3, [pc, #56]	; (8026b6c <AUDIO_OUT_TransferComplete_CallBack+0x8c>)
 8026b34:	881b      	ldrh	r3, [r3, #0]
 8026b36:	4619      	mov	r1, r3
 8026b38:	480b      	ldr	r0, [pc, #44]	; (8026b68 <AUDIO_OUT_TransferComplete_CallBack+0x88>)
 8026b3a:	f7ff ff39 	bl	80269b0 <AUDIO_OUT_ChangeBuffer>
    }

    AudioPlayDone = (AudioPlaySize == AudioRemSize);
 8026b3e:	4b0b      	ldr	r3, [pc, #44]	; (8026b6c <AUDIO_OUT_TransferComplete_CallBack+0x8c>)
 8026b40:	881b      	ldrh	r3, [r3, #0]
 8026b42:	461a      	mov	r2, r3
 8026b44:	4b07      	ldr	r3, [pc, #28]	; (8026b64 <AUDIO_OUT_TransferComplete_CallBack+0x84>)
 8026b46:	681b      	ldr	r3, [r3, #0]
 8026b48:	429a      	cmp	r2, r3
 8026b4a:	bf0c      	ite	eq
 8026b4c:	2301      	moveq	r3, #1
 8026b4e:	2300      	movne	r3, #0
 8026b50:	b2db      	uxtb	r3, r3
 8026b52:	461a      	mov	r2, r3
 8026b54:	4b01      	ldr	r3, [pc, #4]	; (8026b5c <AUDIO_OUT_TransferComplete_CallBack+0x7c>)
 8026b56:	701a      	strb	r2, [r3, #0]
}
 8026b58:	bf00      	nop
 8026b5a:	bd80      	pop	{r7, pc}
 8026b5c:	20000e35 	.word	0x20000e35
 8026b60:	08044028 	.word	0x08044028
 8026b64:	20000e38 	.word	0x20000e38
 8026b68:	0804402c 	.word	0x0804402c
 8026b6c:	20000e36 	.word	0x20000e36

08026b70 <AUDIO_OUT_HalfTransfer_CallBack>:

/**
 * @brief  Manages the DMA Half Transfer complete event.
 */
__weak void AUDIO_OUT_HalfTransfer_CallBack(void) {
 8026b70:	b480      	push	{r7}
 8026b72:	af00      	add	r7, sp, #0
    // check remaining data
    if (AudioRemSize > AUDIO_BUFFER_SIZE) {
 8026b74:	4b0e      	ldr	r3, [pc, #56]	; (8026bb0 <AUDIO_OUT_HalfTransfer_CallBack+0x40>)
 8026b76:	681b      	ldr	r3, [r3, #0]
 8026b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8026b7c:	d90a      	bls.n	8026b94 <AUDIO_OUT_HalfTransfer_CallBack+0x24>
        /* Get total data to be played */
        AudioPlaySize = AUDIO_BUFFER_SIZE;
 8026b7e:	4b0d      	ldr	r3, [pc, #52]	; (8026bb4 <AUDIO_OUT_HalfTransfer_CallBack+0x44>)
 8026b80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8026b84:	801a      	strh	r2, [r3, #0]
        /* Get remaining data */
        AudioRemSize -= AUDIO_BUFFER_SIZE;
 8026b86:	4b0a      	ldr	r3, [pc, #40]	; (8026bb0 <AUDIO_OUT_HalfTransfer_CallBack+0x40>)
 8026b88:	681b      	ldr	r3, [r3, #0]
 8026b8a:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8026b8e:	4a08      	ldr	r2, [pc, #32]	; (8026bb0 <AUDIO_OUT_HalfTransfer_CallBack+0x40>)
 8026b90:	6013      	str	r3, [r2, #0]
        /* Get total data to be played */
        if (!AudioPlayDone) {
            AudioPlaySize = AudioRemSize;
        }
    }
}
 8026b92:	e008      	b.n	8026ba6 <AUDIO_OUT_HalfTransfer_CallBack+0x36>
        if (!AudioPlayDone) {
 8026b94:	4b08      	ldr	r3, [pc, #32]	; (8026bb8 <AUDIO_OUT_HalfTransfer_CallBack+0x48>)
 8026b96:	781b      	ldrb	r3, [r3, #0]
 8026b98:	2b00      	cmp	r3, #0
 8026b9a:	d104      	bne.n	8026ba6 <AUDIO_OUT_HalfTransfer_CallBack+0x36>
            AudioPlaySize = AudioRemSize;
 8026b9c:	4b04      	ldr	r3, [pc, #16]	; (8026bb0 <AUDIO_OUT_HalfTransfer_CallBack+0x40>)
 8026b9e:	681b      	ldr	r3, [r3, #0]
 8026ba0:	b29a      	uxth	r2, r3
 8026ba2:	4b04      	ldr	r3, [pc, #16]	; (8026bb4 <AUDIO_OUT_HalfTransfer_CallBack+0x44>)
 8026ba4:	801a      	strh	r2, [r3, #0]
}
 8026ba6:	bf00      	nop
 8026ba8:	46bd      	mov	sp, r7
 8026baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026bae:	4770      	bx	lr
 8026bb0:	20000e38 	.word	0x20000e38
 8026bb4:	20000e36 	.word	0x20000e36
 8026bb8:	20000e35 	.word	0x20000e35

08026bbc <HAL_I2S_TxCpltCallback>:

/**
 * @brief  Tx Transfer completed callbacks.
 * @param  hi2s: I2S handle
 */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8026bbc:	b580      	push	{r7, lr}
 8026bbe:	b082      	sub	sp, #8
 8026bc0:	af00      	add	r7, sp, #0
 8026bc2:	6078      	str	r0, [r7, #4]
    if (hi2s->Instance == I2S) {
 8026bc4:	687b      	ldr	r3, [r7, #4]
 8026bc6:	681b      	ldr	r3, [r3, #0]
 8026bc8:	4a04      	ldr	r2, [pc, #16]	; (8026bdc <HAL_I2S_TxCpltCallback+0x20>)
 8026bca:	4293      	cmp	r3, r2
 8026bcc:	d101      	bne.n	8026bd2 <HAL_I2S_TxCpltCallback+0x16>
        /* Call the user function which will manage directly transfer complete */
        AUDIO_OUT_TransferComplete_CallBack();
 8026bce:	f7ff ff87 	bl	8026ae0 <AUDIO_OUT_TransferComplete_CallBack>
    }
}
 8026bd2:	bf00      	nop
 8026bd4:	3708      	adds	r7, #8
 8026bd6:	46bd      	mov	sp, r7
 8026bd8:	bd80      	pop	{r7, pc}
 8026bda:	bf00      	nop
 8026bdc:	40003c00 	.word	0x40003c00

08026be0 <HAL_I2S_TxHalfCpltCallback>:

/**
 * @brief  Tx Half Transfer completed callbacks.
 * @param  hi2s: I2S handle
 */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8026be0:	b580      	push	{r7, lr}
 8026be2:	b082      	sub	sp, #8
 8026be4:	af00      	add	r7, sp, #0
 8026be6:	6078      	str	r0, [r7, #4]
    if (hi2s->Instance == I2S) {
 8026be8:	687b      	ldr	r3, [r7, #4]
 8026bea:	681b      	ldr	r3, [r3, #0]
 8026bec:	4a04      	ldr	r2, [pc, #16]	; (8026c00 <HAL_I2S_TxHalfCpltCallback+0x20>)
 8026bee:	4293      	cmp	r3, r2
 8026bf0:	d101      	bne.n	8026bf6 <HAL_I2S_TxHalfCpltCallback+0x16>
        /* Manage the remaining file size and new address offset: This function should
         be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */
        AUDIO_OUT_HalfTransfer_CallBack();
 8026bf2:	f7ff ffbd 	bl	8026b70 <AUDIO_OUT_HalfTransfer_CallBack>
    }
}
 8026bf6:	bf00      	nop
 8026bf8:	3708      	adds	r7, #8
 8026bfa:	46bd      	mov	sp, r7
 8026bfc:	bd80      	pop	{r7, pc}
 8026bfe:	bf00      	nop
 8026c00:	40003c00 	.word	0x40003c00

08026c04 <AUDIO_OUT_Init>:
 *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
 * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
 * @param  AudioFreq: Audio frequency used to play the audio stream.
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
static uint8_t AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq) {
 8026c04:	b580      	push	{r7, lr}
 8026c06:	b084      	sub	sp, #16
 8026c08:	af00      	add	r7, sp, #0
 8026c0a:	4603      	mov	r3, r0
 8026c0c:	603a      	str	r2, [r7, #0]
 8026c0e:	80fb      	strh	r3, [r7, #6]
 8026c10:	460b      	mov	r3, r1
 8026c12:	717b      	strb	r3, [r7, #5]
    uint8_t ret = AUDIO_OK;
 8026c14:	2300      	movs	r3, #0
 8026c16:	73fb      	strb	r3, [r7, #15]

    /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
    AUDIO_OUT_ClockConfig(&hi2s3, AudioFreq, NULL);
 8026c18:	2200      	movs	r2, #0
 8026c1a:	6839      	ldr	r1, [r7, #0]
 8026c1c:	4816      	ldr	r0, [pc, #88]	; (8026c78 <AUDIO_OUT_Init+0x74>)
 8026c1e:	f7ff ff01 	bl	8026a24 <AUDIO_OUT_ClockConfig>

    /* I2S data transfer preparation:
     Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
    if (HAL_I2S_GetState(&hi2s3) == HAL_I2S_STATE_RESET) {
 8026c22:	4815      	ldr	r0, [pc, #84]	; (8026c78 <AUDIO_OUT_Init+0x74>)
 8026c24:	f00c fb60 	bl	80332e8 <HAL_I2S_GetState>
 8026c28:	4603      	mov	r3, r0
 8026c2a:	2b00      	cmp	r3, #0
 8026c2c:	d103      	bne.n	8026c36 <AUDIO_OUT_Init+0x32>
        /* Init the I2S MSP: this __weak function can be redefined by the application*/
        AUDIO_OUT_MspInit(&hi2s3, NULL);
 8026c2e:	2100      	movs	r1, #0
 8026c30:	4811      	ldr	r0, [pc, #68]	; (8026c78 <AUDIO_OUT_Init+0x74>)
 8026c32:	f7ff ff49 	bl	8026ac8 <AUDIO_OUT_MspInit>
    }

    /* I2S data transfer preparation:
     Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
    /* Configure the I2S peripheral */
    if (I2S3_Init(AudioFreq) != AUDIO_OK) {
 8026c36:	6838      	ldr	r0, [r7, #0]
 8026c38:	f000 f848 	bl	8026ccc <I2S3_Init>
 8026c3c:	4603      	mov	r3, r0
 8026c3e:	2b00      	cmp	r3, #0
 8026c40:	d001      	beq.n	8026c46 <AUDIO_OUT_Init+0x42>
        ret = AUDIO_ERROR;
 8026c42:	2301      	movs	r3, #1
 8026c44:	73fb      	strb	r3, [r7, #15]
    }

    if (ret == AUDIO_OK) {
 8026c46:	7bfb      	ldrb	r3, [r7, #15]
 8026c48:	2b00      	cmp	r3, #0
 8026c4a:	d110      	bne.n	8026c6e <AUDIO_OUT_Init+0x6a>
        /* Retieve audio codec identifier */
        if (((cs43l22_ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID) {
 8026c4c:	2094      	movs	r0, #148	; 0x94
 8026c4e:	f7fc ffab 	bl	8023ba8 <cs43l22_ReadID>
 8026c52:	4603      	mov	r3, r0
 8026c54:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8026c58:	2be0      	cmp	r3, #224	; 0xe0
 8026c5a:	d106      	bne.n	8026c6a <AUDIO_OUT_Init+0x66>
            /* Initialize the audio */
            cs43l22_Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8026c5c:	797a      	ldrb	r2, [r7, #5]
 8026c5e:	88f9      	ldrh	r1, [r7, #6]
 8026c60:	683b      	ldr	r3, [r7, #0]
 8026c62:	2094      	movs	r0, #148	; 0x94
 8026c64:	f7fc feb8 	bl	80239d8 <cs43l22_Init>
 8026c68:	e001      	b.n	8026c6e <AUDIO_OUT_Init+0x6a>
        } else {
            ret = AUDIO_ERROR;
 8026c6a:	2301      	movs	r3, #1
 8026c6c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return ret;
 8026c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8026c70:	4618      	mov	r0, r3
 8026c72:	3710      	adds	r7, #16
 8026c74:	46bd      	mov	sp, r7
 8026c76:	bd80      	pop	{r7, pc}
 8026c78:	200089c0 	.word	0x200089c0

08026c7c <AUDIO_OUT_Play>:
 * @brief  Starts playing audio stream from a data buffer for a determined size.
 * @param  pBuffer: Pointer to the buffer
 * @param  Size: Number of audio data BYTES.
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
static uint8_t AUDIO_OUT_Play(uint16_t *pBuffer, uint32_t Size) {
 8026c7c:	b580      	push	{r7, lr}
 8026c7e:	b082      	sub	sp, #8
 8026c80:	af00      	add	r7, sp, #0
 8026c82:	6078      	str	r0, [r7, #4]
 8026c84:	6039      	str	r1, [r7, #0]
    /* Call the audio Codec Play function */
    if (cs43l22_Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0) {
 8026c86:	683b      	ldr	r3, [r7, #0]
 8026c88:	b29b      	uxth	r3, r3
 8026c8a:	461a      	mov	r2, r3
 8026c8c:	6879      	ldr	r1, [r7, #4]
 8026c8e:	2094      	movs	r0, #148	; 0x94
 8026c90:	f7fc ffa2 	bl	8023bd8 <cs43l22_Play>
 8026c94:	4603      	mov	r3, r0
 8026c96:	2b00      	cmp	r3, #0
 8026c98:	d001      	beq.n	8026c9e <AUDIO_OUT_Play+0x22>
        return AUDIO_ERROR;
 8026c9a:	2301      	movs	r3, #1
 8026c9c:	e00f      	b.n	8026cbe <AUDIO_OUT_Play+0x42>
    } else {
        /* Update the Media layer and enable it for play */

        HAL_I2S_Transmit_DMA(&hi2s3, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE));
 8026c9e:	683b      	ldr	r3, [r7, #0]
 8026ca0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8026ca4:	d203      	bcs.n	8026cae <AUDIO_OUT_Play+0x32>
 8026ca6:	683b      	ldr	r3, [r7, #0]
 8026ca8:	085b      	lsrs	r3, r3, #1
 8026caa:	b29b      	uxth	r3, r3
 8026cac:	e001      	b.n	8026cb2 <AUDIO_OUT_Play+0x36>
 8026cae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8026cb2:	461a      	mov	r2, r3
 8026cb4:	6879      	ldr	r1, [r7, #4]
 8026cb6:	4804      	ldr	r0, [pc, #16]	; (8026cc8 <AUDIO_OUT_Play+0x4c>)
 8026cb8:	f00c fa4e 	bl	8033158 <HAL_I2S_Transmit_DMA>
        /* Return AUDIO_OK when all operations are correctly done */
        return AUDIO_OK;
 8026cbc:	2300      	movs	r3, #0
    }
}
 8026cbe:	4618      	mov	r0, r3
 8026cc0:	3708      	adds	r7, #8
 8026cc2:	46bd      	mov	sp, r7
 8026cc4:	bd80      	pop	{r7, pc}
 8026cc6:	bf00      	nop
 8026cc8:	200089c0 	.word	0x200089c0

08026ccc <I2S3_Init>:

/**
 * @brief  Initializes the Audio Codec audio interface (I2S).
 * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral.
 */
static uint8_t I2S3_Init(uint32_t AudioFreq) {
 8026ccc:	b580      	push	{r7, lr}
 8026cce:	b082      	sub	sp, #8
 8026cd0:	af00      	add	r7, sp, #0
 8026cd2:	6078      	str	r0, [r7, #4]
    /* Disable I2S block */
    __HAL_I2S_DISABLE(&hi2s3);
 8026cd4:	4b15      	ldr	r3, [pc, #84]	; (8026d2c <I2S3_Init+0x60>)
 8026cd6:	681b      	ldr	r3, [r3, #0]
 8026cd8:	69da      	ldr	r2, [r3, #28]
 8026cda:	4b14      	ldr	r3, [pc, #80]	; (8026d2c <I2S3_Init+0x60>)
 8026cdc:	681b      	ldr	r3, [r3, #0]
 8026cde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8026ce2:	61da      	str	r2, [r3, #28]

    /* I2S3 peripheral configuration */
    hi2s3.Init.AudioFreq = AudioFreq;
 8026ce4:	4a11      	ldr	r2, [pc, #68]	; (8026d2c <I2S3_Init+0x60>)
 8026ce6:	687b      	ldr	r3, [r7, #4]
 8026ce8:	6153      	str	r3, [r2, #20]
    hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8026cea:	4b10      	ldr	r3, [pc, #64]	; (8026d2c <I2S3_Init+0x60>)
 8026cec:	2200      	movs	r2, #0
 8026cee:	61da      	str	r2, [r3, #28]
    hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8026cf0:	4b0e      	ldr	r3, [pc, #56]	; (8026d2c <I2S3_Init+0x60>)
 8026cf2:	2200      	movs	r2, #0
 8026cf4:	619a      	str	r2, [r3, #24]
    // FIXME: Why it works on I2S_DATAFORMAT_32B? It should be I2S_DATAFORMAT_16B
    //	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
    hi2s3.Init.DataFormat = I2S_DATAFORMAT_32B;
 8026cf6:	4b0d      	ldr	r3, [pc, #52]	; (8026d2c <I2S3_Init+0x60>)
 8026cf8:	2205      	movs	r2, #5
 8026cfa:	60da      	str	r2, [r3, #12]
    hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8026cfc:	4b0b      	ldr	r3, [pc, #44]	; (8026d2c <I2S3_Init+0x60>)
 8026cfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8026d02:	611a      	str	r2, [r3, #16]
    hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8026d04:	4b09      	ldr	r3, [pc, #36]	; (8026d2c <I2S3_Init+0x60>)
 8026d06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8026d0a:	605a      	str	r2, [r3, #4]
    hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8026d0c:	4b07      	ldr	r3, [pc, #28]	; (8026d2c <I2S3_Init+0x60>)
 8026d0e:	2200      	movs	r2, #0
 8026d10:	609a      	str	r2, [r3, #8]
    /* Initialize the I2S peripheral with the structure above */
    if (HAL_I2S_Init(&hi2s3) != HAL_OK) {
 8026d12:	4806      	ldr	r0, [pc, #24]	; (8026d2c <I2S3_Init+0x60>)
 8026d14:	f00c f8be 	bl	8032e94 <HAL_I2S_Init>
 8026d18:	4603      	mov	r3, r0
 8026d1a:	2b00      	cmp	r3, #0
 8026d1c:	d001      	beq.n	8026d22 <I2S3_Init+0x56>
        return AUDIO_ERROR;
 8026d1e:	2301      	movs	r3, #1
 8026d20:	e000      	b.n	8026d24 <I2S3_Init+0x58>
    } else {
        return AUDIO_OK;
 8026d22:	2300      	movs	r3, #0
    }
}
 8026d24:	4618      	mov	r0, r3
 8026d26:	3708      	adds	r7, #8
 8026d28:	46bd      	mov	sp, r7
 8026d2a:	bd80      	pop	{r7, pc}
 8026d2c:	200089c0 	.word	0x200089c0

08026d30 <lock>:

static void lock(void) {
 8026d30:	b580      	push	{r7, lr}
 8026d32:	af00      	add	r7, sp, #0
    osMutexAcquire(AudioMutexHandle, osWaitForever);
 8026d34:	4b04      	ldr	r3, [pc, #16]	; (8026d48 <lock+0x18>)
 8026d36:	681b      	ldr	r3, [r3, #0]
 8026d38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8026d3c:	4618      	mov	r0, r3
 8026d3e:	f010 fff3 	bl	8037d28 <osMutexAcquire>
}
 8026d42:	bf00      	nop
 8026d44:	bd80      	pop	{r7, pc}
 8026d46:	bf00      	nop
 8026d48:	20008a14 	.word	0x20008a14

08026d4c <unlock>:

static void unlock(void) {
 8026d4c:	b580      	push	{r7, lr}
 8026d4e:	af00      	add	r7, sp, #0
    osMutexRelease(AudioMutexHandle);
 8026d50:	4b03      	ldr	r3, [pc, #12]	; (8026d60 <unlock+0x14>)
 8026d52:	681b      	ldr	r3, [r3, #0]
 8026d54:	4618      	mov	r0, r3
 8026d56:	f011 f845 	bl	8037de4 <osMutexRelease>
}
 8026d5a:	bf00      	nop
 8026d5c:	bd80      	pop	{r7, pc}
 8026d5e:	bf00      	nop
 8026d60:	20008a14 	.word	0x20008a14

08026d64 <Finger_Init>:
/* Private functions ----------------------------------------------------------*/
static void lock(void);
static void unlock(void);

/* Public functions implementation --------------------------------------------*/
void Finger_Init(void) {
 8026d64:	b580      	push	{r7, lr}
 8026d66:	b082      	sub	sp, #8
 8026d68:	af00      	add	r7, sp, #0
    uint8_t verified = 0;
 8026d6a:	2300      	movs	r3, #0
 8026d6c:	71fb      	strb	r3, [r7, #7]

    // Inititalize Module
    do {
        LOG_StrLn("Finger:Init");
 8026d6e:	4813      	ldr	r0, [pc, #76]	; (8026dbc <Finger_Init+0x58>)
 8026d70:	f017 fb58 	bl	803e424 <LOG_StrLn>

        // mosfet control
        HAL_GPIO_WritePin(EXT_FINGER_SENSING_PWR_GPIO_Port, EXT_FINGER_SENSING_PWR_Pin, 0);
 8026d74:	2200      	movs	r2, #0
 8026d76:	2108      	movs	r1, #8
 8026d78:	4811      	ldr	r0, [pc, #68]	; (8026dc0 <Finger_Init+0x5c>)
 8026d7a:	f009 f957 	bl	803002c <HAL_GPIO_WritePin>
        _DelayMS(100);
 8026d7e:	2064      	movs	r0, #100	; 0x64
 8026d80:	f018 fd1e 	bl	803f7c0 <_DelayMS>
        HAL_GPIO_WritePin(EXT_FINGER_SENSING_PWR_GPIO_Port, EXT_FINGER_SENSING_PWR_Pin, 1);
 8026d84:	2201      	movs	r2, #1
 8026d86:	2108      	movs	r1, #8
 8026d88:	480d      	ldr	r0, [pc, #52]	; (8026dc0 <Finger_Init+0x5c>)
 8026d8a:	f009 f94f 	bl	803002c <HAL_GPIO_WritePin>
        _DelayMS(500);
 8026d8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8026d92:	f018 fd15 	bl	803f7c0 <_DelayMS>

        // verify password and check hardware
        lock();
 8026d96:	f000 fa3f 	bl	8027218 <lock>
        verified = FZ3387_verifyPassword();
 8026d9a:	f7fd fb05 	bl	80243a8 <FZ3387_verifyPassword>
 8026d9e:	4603      	mov	r3, r0
 8026da0:	71fb      	strb	r3, [r7, #7]
        unlock();
 8026da2:	f000 fa49 	bl	8027238 <unlock>

        _DelayMS(500);
 8026da6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8026daa:	f018 fd09 	bl	803f7c0 <_DelayMS>
    } while (!verified);
 8026dae:	79fb      	ldrb	r3, [r7, #7]
 8026db0:	2b00      	cmp	r3, #0
 8026db2:	d0dc      	beq.n	8026d6e <Finger_Init+0xa>
}
 8026db4:	bf00      	nop
 8026db6:	3708      	adds	r7, #8
 8026db8:	46bd      	mov	sp, r7
 8026dba:	bd80      	pop	{r7, pc}
 8026dbc:	08043574 	.word	0x08043574
 8026dc0:	40020800 	.word	0x40020800

08026dc4 <Finger_Enroll>:

uint8_t Finger_Enroll(uint8_t id) {
 8026dc4:	b580      	push	{r7, lr}
 8026dc6:	b088      	sub	sp, #32
 8026dc8:	af00      	add	r7, sp, #0
 8026dca:	4603      	mov	r3, r0
 8026dcc:	71fb      	strb	r3, [r7, #7]
    const TickType_t scan_time = (FINGER_SCAN_TIMEOUT);
 8026dce:	f242 7310 	movw	r3, #10000	; 0x2710
 8026dd2:	61bb      	str	r3, [r7, #24]
    TickType_t tick;
    int p;
    uint8_t timeout, error = 0;
 8026dd4:	2300      	movs	r3, #0
 8026dd6:	77fb      	strb	r3, [r7, #31]

    lock();
 8026dd8:	f000 fa1e 	bl	8027218 <lock>
    if (!error) {
 8026ddc:	7ffb      	ldrb	r3, [r7, #31]
 8026dde:	2b00      	cmp	r3, #0
 8026de0:	d12a      	bne.n	8026e38 <Finger_Enroll+0x74>
        // check number of stored id
        p = FZ3387_getTemplateCount();
 8026de2:	f7fd fbd5 	bl	8024590 <FZ3387_getTemplateCount>
 8026de6:	4603      	mov	r3, r0
 8026de8:	617b      	str	r3, [r7, #20]
        // check response
        switch (p) {
 8026dea:	697b      	ldr	r3, [r7, #20]
 8026dec:	2b00      	cmp	r3, #0
 8026dee:	d002      	beq.n	8026df6 <Finger_Enroll+0x32>
 8026df0:	2b01      	cmp	r3, #1
 8026df2:	d004      	beq.n	8026dfe <Finger_Enroll+0x3a>
 8026df4:	e007      	b.n	8026e06 <Finger_Enroll+0x42>
            case FINGERPRINT_OK:
                LOG_StrLn("Retrieve OK");
 8026df6:	48a9      	ldr	r0, [pc, #676]	; (802709c <Finger_Enroll+0x2d8>)
 8026df8:	f017 fb14 	bl	803e424 <LOG_StrLn>
                break;
 8026dfc:	e007      	b.n	8026e0e <Finger_Enroll+0x4a>
            case FINGERPRINT_PACKETRECIEVEERR:
                LOG_StrLn("Communication error");
 8026dfe:	48a8      	ldr	r0, [pc, #672]	; (80270a0 <Finger_Enroll+0x2dc>)
 8026e00:	f017 fb10 	bl	803e424 <LOG_StrLn>
                break;
 8026e04:	e003      	b.n	8026e0e <Finger_Enroll+0x4a>
            default:
                LOG_StrLn("Unknown error");
 8026e06:	48a7      	ldr	r0, [pc, #668]	; (80270a4 <Finger_Enroll+0x2e0>)
 8026e08:	f017 fb0c 	bl	803e424 <LOG_StrLn>
                break;
 8026e0c:	bf00      	nop
        }

        LOG_Str("TemplateCount = ");
 8026e0e:	48a6      	ldr	r0, [pc, #664]	; (80270a8 <Finger_Enroll+0x2e4>)
 8026e10:	f017 faf0 	bl	803e3f4 <LOG_Str>
        LOG_Int(finger.templateCount);
 8026e14:	4ba5      	ldr	r3, [pc, #660]	; (80270ac <Finger_Enroll+0x2e8>)
 8026e16:	889b      	ldrh	r3, [r3, #4]
 8026e18:	4618      	mov	r0, r3
 8026e1a:	f017 fa7d 	bl	803e318 <LOG_Int>
        LOG_Enter();
 8026e1e:	f017 fa6f 	bl	803e300 <LOG_Enter>

        error = (p != FINGERPRINT_OK) || (finger.templateCount >= FINGER_USER_MAX);
 8026e22:	697b      	ldr	r3, [r7, #20]
 8026e24:	2b00      	cmp	r3, #0
 8026e26:	d103      	bne.n	8026e30 <Finger_Enroll+0x6c>
 8026e28:	4ba0      	ldr	r3, [pc, #640]	; (80270ac <Finger_Enroll+0x2e8>)
 8026e2a:	889b      	ldrh	r3, [r3, #4]
 8026e2c:	2b04      	cmp	r3, #4
 8026e2e:	d901      	bls.n	8026e34 <Finger_Enroll+0x70>
 8026e30:	2301      	movs	r3, #1
 8026e32:	e000      	b.n	8026e36 <Finger_Enroll+0x72>
 8026e34:	2300      	movs	r3, #0
 8026e36:	77fb      	strb	r3, [r7, #31]
    }

    if (!error) {
 8026e38:	7ffb      	ldrb	r3, [r7, #31]
 8026e3a:	2b00      	cmp	r3, #0
 8026e3c:	d15a      	bne.n	8026ef4 <Finger_Enroll+0x130>
        //  Take Image
        LOG_Str("\nWaiting for valid finger to enroll as #");
 8026e3e:	489c      	ldr	r0, [pc, #624]	; (80270b0 <Finger_Enroll+0x2ec>)
 8026e40:	f017 fad8 	bl	803e3f4 <LOG_Str>
        LOG_Int(id);
 8026e44:	79fb      	ldrb	r3, [r7, #7]
 8026e46:	4618      	mov	r0, r3
 8026e48:	f017 fa66 	bl	803e318 <LOG_Int>
        LOG_Enter();
 8026e4c:	f017 fa58 	bl	803e300 <LOG_Enter>

        // set timeout guard
        tick = _GetTickMS();
 8026e50:	f018 fcc1 	bl	803f7d6 <_GetTickMS>
 8026e54:	6138      	str	r0, [r7, #16]
        do {
            // handle timeout
            timeout = ((_GetTickMS() - tick) > scan_time);
 8026e56:	f018 fcbe 	bl	803f7d6 <_GetTickMS>
 8026e5a:	4602      	mov	r2, r0
 8026e5c:	693b      	ldr	r3, [r7, #16]
 8026e5e:	1ad3      	subs	r3, r2, r3
 8026e60:	69ba      	ldr	r2, [r7, #24]
 8026e62:	429a      	cmp	r2, r3
 8026e64:	bf34      	ite	cc
 8026e66:	2301      	movcc	r3, #1
 8026e68:	2300      	movcs	r3, #0
 8026e6a:	b2db      	uxtb	r3, r3
 8026e6c:	73fb      	strb	r3, [r7, #15]

            // send command
            _LedToggle();
 8026e6e:	f018 fccb 	bl	803f808 <_LedToggle>
            HMI1.d.status.finger = !HMI1.d.status.finger;
 8026e72:	4b90      	ldr	r3, [pc, #576]	; (80270b4 <Finger_Enroll+0x2f0>)
 8026e74:	791b      	ldrb	r3, [r3, #4]
 8026e76:	2b00      	cmp	r3, #0
 8026e78:	bf0c      	ite	eq
 8026e7a:	2301      	moveq	r3, #1
 8026e7c:	2300      	movne	r3, #0
 8026e7e:	b2db      	uxtb	r3, r3
 8026e80:	461a      	mov	r2, r3
 8026e82:	4b8c      	ldr	r3, [pc, #560]	; (80270b4 <Finger_Enroll+0x2f0>)
 8026e84:	711a      	strb	r2, [r3, #4]
            p = FZ3387_getImage();
 8026e86:	f7fd fabb 	bl	8024400 <FZ3387_getImage>
 8026e8a:	4603      	mov	r3, r0
 8026e8c:	617b      	str	r3, [r7, #20]

            // check response
            switch (p) {
 8026e8e:	697b      	ldr	r3, [r7, #20]
 8026e90:	2b03      	cmp	r3, #3
 8026e92:	d81b      	bhi.n	8026ecc <Finger_Enroll+0x108>
 8026e94:	a201      	add	r2, pc, #4	; (adr r2, 8026e9c <Finger_Enroll+0xd8>)
 8026e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8026e9a:	bf00      	nop
 8026e9c:	08026ead 	.word	0x08026ead
 8026ea0:	08026ebd 	.word	0x08026ebd
 8026ea4:	08026eb5 	.word	0x08026eb5
 8026ea8:	08026ec5 	.word	0x08026ec5
                case FINGERPRINT_OK:
                    LOG_StrLn("Image taken");
 8026eac:	4882      	ldr	r0, [pc, #520]	; (80270b8 <Finger_Enroll+0x2f4>)
 8026eae:	f017 fab9 	bl	803e424 <LOG_StrLn>
                    break;
 8026eb2:	e00f      	b.n	8026ed4 <Finger_Enroll+0x110>
                case FINGERPRINT_NOFINGER:
                    LOG_StrLn(".");
 8026eb4:	4881      	ldr	r0, [pc, #516]	; (80270bc <Finger_Enroll+0x2f8>)
 8026eb6:	f017 fab5 	bl	803e424 <LOG_StrLn>
                    break;
 8026eba:	e00b      	b.n	8026ed4 <Finger_Enroll+0x110>
                case FINGERPRINT_PACKETRECIEVEERR:
                    LOG_StrLn("Communication error");
 8026ebc:	4878      	ldr	r0, [pc, #480]	; (80270a0 <Finger_Enroll+0x2dc>)
 8026ebe:	f017 fab1 	bl	803e424 <LOG_StrLn>
                    break;
 8026ec2:	e007      	b.n	8026ed4 <Finger_Enroll+0x110>
                case FINGERPRINT_IMAGEFAIL:
                    LOG_StrLn("Imaging error");
 8026ec4:	487e      	ldr	r0, [pc, #504]	; (80270c0 <Finger_Enroll+0x2fc>)
 8026ec6:	f017 faad 	bl	803e424 <LOG_StrLn>
                    break;
 8026eca:	e003      	b.n	8026ed4 <Finger_Enroll+0x110>
                default:
                    LOG_StrLn("Unknown error");
 8026ecc:	4875      	ldr	r0, [pc, #468]	; (80270a4 <Finger_Enroll+0x2e0>)
 8026ece:	f017 faa9 	bl	803e424 <LOG_StrLn>
                    break;
 8026ed2:	bf00      	nop
            }
        } while (p != FINGERPRINT_OK && !timeout);
 8026ed4:	697b      	ldr	r3, [r7, #20]
 8026ed6:	2b00      	cmp	r3, #0
 8026ed8:	d002      	beq.n	8026ee0 <Finger_Enroll+0x11c>
 8026eda:	7bfb      	ldrb	r3, [r7, #15]
 8026edc:	2b00      	cmp	r3, #0
 8026ede:	d0ba      	beq.n	8026e56 <Finger_Enroll+0x92>

        error = (p != FINGERPRINT_OK) || timeout;
 8026ee0:	697b      	ldr	r3, [r7, #20]
 8026ee2:	2b00      	cmp	r3, #0
 8026ee4:	d102      	bne.n	8026eec <Finger_Enroll+0x128>
 8026ee6:	7bfb      	ldrb	r3, [r7, #15]
 8026ee8:	2b00      	cmp	r3, #0
 8026eea:	d001      	beq.n	8026ef0 <Finger_Enroll+0x12c>
 8026eec:	2301      	movs	r3, #1
 8026eee:	e000      	b.n	8026ef2 <Finger_Enroll+0x12e>
 8026ef0:	2300      	movs	r3, #0
 8026ef2:	77fb      	strb	r3, [r7, #31]
    }

    if (!error) {
 8026ef4:	7ffb      	ldrb	r3, [r7, #31]
 8026ef6:	2b00      	cmp	r3, #0
 8026ef8:	d155      	bne.n	8026fa6 <Finger_Enroll+0x1e2>
        //	put image to buffer 1
        p = FZ3387_image2Tz(1);
 8026efa:	2001      	movs	r0, #1
 8026efc:	f7fd fa8f 	bl	802441e <FZ3387_image2Tz>
 8026f00:	4603      	mov	r3, r0
 8026f02:	617b      	str	r3, [r7, #20]
        switch (p) {
 8026f04:	697b      	ldr	r3, [r7, #20]
 8026f06:	2b15      	cmp	r3, #21
 8026f08:	d842      	bhi.n	8026f90 <Finger_Enroll+0x1cc>
 8026f0a:	a201      	add	r2, pc, #4	; (adr r2, 8026f10 <Finger_Enroll+0x14c>)
 8026f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8026f10:	08026f69 	.word	0x08026f69
 8026f14:	08026f79 	.word	0x08026f79
 8026f18:	08026f91 	.word	0x08026f91
 8026f1c:	08026f91 	.word	0x08026f91
 8026f20:	08026f91 	.word	0x08026f91
 8026f24:	08026f91 	.word	0x08026f91
 8026f28:	08026f71 	.word	0x08026f71
 8026f2c:	08026f81 	.word	0x08026f81
 8026f30:	08026f91 	.word	0x08026f91
 8026f34:	08026f91 	.word	0x08026f91
 8026f38:	08026f91 	.word	0x08026f91
 8026f3c:	08026f91 	.word	0x08026f91
 8026f40:	08026f91 	.word	0x08026f91
 8026f44:	08026f91 	.word	0x08026f91
 8026f48:	08026f91 	.word	0x08026f91
 8026f4c:	08026f91 	.word	0x08026f91
 8026f50:	08026f91 	.word	0x08026f91
 8026f54:	08026f91 	.word	0x08026f91
 8026f58:	08026f91 	.word	0x08026f91
 8026f5c:	08026f91 	.word	0x08026f91
 8026f60:	08026f91 	.word	0x08026f91
 8026f64:	08026f89 	.word	0x08026f89
            case FINGERPRINT_OK:
                LOG_StrLn("Image converted");
 8026f68:	4856      	ldr	r0, [pc, #344]	; (80270c4 <Finger_Enroll+0x300>)
 8026f6a:	f017 fa5b 	bl	803e424 <LOG_StrLn>
                break;
 8026f6e:	e013      	b.n	8026f98 <Finger_Enroll+0x1d4>
            case FINGERPRINT_IMAGEMESS:
                LOG_StrLn("Image too messy");
 8026f70:	4855      	ldr	r0, [pc, #340]	; (80270c8 <Finger_Enroll+0x304>)
 8026f72:	f017 fa57 	bl	803e424 <LOG_StrLn>
                break;
 8026f76:	e00f      	b.n	8026f98 <Finger_Enroll+0x1d4>
            case FINGERPRINT_PACKETRECIEVEERR:
                LOG_StrLn("Communication error");
 8026f78:	4849      	ldr	r0, [pc, #292]	; (80270a0 <Finger_Enroll+0x2dc>)
 8026f7a:	f017 fa53 	bl	803e424 <LOG_StrLn>
                break;
 8026f7e:	e00b      	b.n	8026f98 <Finger_Enroll+0x1d4>
            case FINGERPRINT_FEATUREFAIL:
                LOG_StrLn("Could not find finger print features");
 8026f80:	4852      	ldr	r0, [pc, #328]	; (80270cc <Finger_Enroll+0x308>)
 8026f82:	f017 fa4f 	bl	803e424 <LOG_StrLn>
                break;
 8026f86:	e007      	b.n	8026f98 <Finger_Enroll+0x1d4>
            case FINGERPRINT_INVALIDIMAGE:
                LOG_StrLn("Could not find finger print features");
 8026f88:	4850      	ldr	r0, [pc, #320]	; (80270cc <Finger_Enroll+0x308>)
 8026f8a:	f017 fa4b 	bl	803e424 <LOG_StrLn>
                break;
 8026f8e:	e003      	b.n	8026f98 <Finger_Enroll+0x1d4>
            default:
                LOG_StrLn("Unknown error");
 8026f90:	4844      	ldr	r0, [pc, #272]	; (80270a4 <Finger_Enroll+0x2e0>)
 8026f92:	f017 fa47 	bl	803e424 <LOG_StrLn>
                break;
 8026f96:	bf00      	nop
        }

        error = (p != FINGERPRINT_OK);
 8026f98:	697b      	ldr	r3, [r7, #20]
 8026f9a:	2b00      	cmp	r3, #0
 8026f9c:	bf14      	ite	ne
 8026f9e:	2301      	movne	r3, #1
 8026fa0:	2300      	moveq	r3, #0
 8026fa2:	b2db      	uxtb	r3, r3
 8026fa4:	77fb      	strb	r3, [r7, #31]
//            _DelayMS(100);
//            p = FZ3387_getImage();
//        } while (p != FINGERPRINT_NOFINGER);
//    }

    if (!error) {
 8026fa6:	7ffb      	ldrb	r3, [r7, #31]
 8026fa8:	2b00      	cmp	r3, #0
 8026faa:	d12b      	bne.n	8027004 <Finger_Enroll+0x240>
        //	Create Register model
        LOG_Str("\nCreating model for #");
 8026fac:	4848      	ldr	r0, [pc, #288]	; (80270d0 <Finger_Enroll+0x30c>)
 8026fae:	f017 fa21 	bl	803e3f4 <LOG_Str>
        LOG_Int(id);
 8026fb2:	79fb      	ldrb	r3, [r7, #7]
 8026fb4:	4618      	mov	r0, r3
 8026fb6:	f017 f9af 	bl	803e318 <LOG_Int>
        LOG_Enter();
 8026fba:	f017 f9a1 	bl	803e300 <LOG_Enter>

        // Compare model from buffer 1 & 2
        p = FZ3387_createModel();
 8026fbe:	f7fd fa42 	bl	8024446 <FZ3387_createModel>
 8026fc2:	4603      	mov	r3, r0
 8026fc4:	617b      	str	r3, [r7, #20]
        if (p == FINGERPRINT_OK) {
 8026fc6:	697b      	ldr	r3, [r7, #20]
 8026fc8:	2b00      	cmp	r3, #0
 8026fca:	d103      	bne.n	8026fd4 <Finger_Enroll+0x210>
            LOG_StrLn("Prints matched!");
 8026fcc:	4841      	ldr	r0, [pc, #260]	; (80270d4 <Finger_Enroll+0x310>)
 8026fce:	f017 fa29 	bl	803e424 <LOG_StrLn>
 8026fd2:	e010      	b.n	8026ff6 <Finger_Enroll+0x232>
        } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
 8026fd4:	697b      	ldr	r3, [r7, #20]
 8026fd6:	2b01      	cmp	r3, #1
 8026fd8:	d103      	bne.n	8026fe2 <Finger_Enroll+0x21e>
            LOG_StrLn("Communication error");
 8026fda:	4831      	ldr	r0, [pc, #196]	; (80270a0 <Finger_Enroll+0x2dc>)
 8026fdc:	f017 fa22 	bl	803e424 <LOG_StrLn>
 8026fe0:	e009      	b.n	8026ff6 <Finger_Enroll+0x232>
        } else if (p == FINGERPRINT_ENROLLMISMATCH) {
 8026fe2:	697b      	ldr	r3, [r7, #20]
 8026fe4:	2b0a      	cmp	r3, #10
 8026fe6:	d103      	bne.n	8026ff0 <Finger_Enroll+0x22c>
            LOG_StrLn("Fingerprints did not match");
 8026fe8:	483b      	ldr	r0, [pc, #236]	; (80270d8 <Finger_Enroll+0x314>)
 8026fea:	f017 fa1b 	bl	803e424 <LOG_StrLn>
 8026fee:	e002      	b.n	8026ff6 <Finger_Enroll+0x232>
        } else {
            LOG_StrLn("Unknown error");
 8026ff0:	482c      	ldr	r0, [pc, #176]	; (80270a4 <Finger_Enroll+0x2e0>)
 8026ff2:	f017 fa17 	bl	803e424 <LOG_StrLn>
        }

        error = (p != FINGERPRINT_OK);
 8026ff6:	697b      	ldr	r3, [r7, #20]
 8026ff8:	2b00      	cmp	r3, #0
 8026ffa:	bf14      	ite	ne
 8026ffc:	2301      	movne	r3, #1
 8026ffe:	2300      	moveq	r3, #0
 8027000:	b2db      	uxtb	r3, r3
 8027002:	77fb      	strb	r3, [r7, #31]
    }

    if (!error) {
 8027004:	7ffb      	ldrb	r3, [r7, #31]
 8027006:	2b00      	cmp	r3, #0
 8027008:	d135      	bne.n	8027076 <Finger_Enroll+0x2b2>
        // debug
        LOG_Str("\nID #");
 802700a:	4834      	ldr	r0, [pc, #208]	; (80270dc <Finger_Enroll+0x318>)
 802700c:	f017 f9f2 	bl	803e3f4 <LOG_Str>
        LOG_Int(id);
 8027010:	79fb      	ldrb	r3, [r7, #7]
 8027012:	4618      	mov	r0, r3
 8027014:	f017 f980 	bl	803e318 <LOG_Int>
        LOG_Enter();
 8027018:	f017 f972 	bl	803e300 <LOG_Enter>

        //	Store in memory
        p = FZ3387_storeModel(id);
 802701c:	79fb      	ldrb	r3, [r7, #7]
 802701e:	b29b      	uxth	r3, r3
 8027020:	4618      	mov	r0, r3
 8027022:	f7fd fa1f 	bl	8024464 <FZ3387_storeModel>
 8027026:	4603      	mov	r3, r0
 8027028:	617b      	str	r3, [r7, #20]
        if (p == FINGERPRINT_OK) {
 802702a:	697b      	ldr	r3, [r7, #20]
 802702c:	2b00      	cmp	r3, #0
 802702e:	d103      	bne.n	8027038 <Finger_Enroll+0x274>
            LOG_StrLn("Stored!");
 8027030:	482b      	ldr	r0, [pc, #172]	; (80270e0 <Finger_Enroll+0x31c>)
 8027032:	f017 f9f7 	bl	803e424 <LOG_StrLn>
 8027036:	e017      	b.n	8027068 <Finger_Enroll+0x2a4>
        } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
 8027038:	697b      	ldr	r3, [r7, #20]
 802703a:	2b01      	cmp	r3, #1
 802703c:	d103      	bne.n	8027046 <Finger_Enroll+0x282>
            LOG_StrLn("Communication error");
 802703e:	4818      	ldr	r0, [pc, #96]	; (80270a0 <Finger_Enroll+0x2dc>)
 8027040:	f017 f9f0 	bl	803e424 <LOG_StrLn>
 8027044:	e010      	b.n	8027068 <Finger_Enroll+0x2a4>
        } else if (p == FINGERPRINT_BADLOCATION) {
 8027046:	697b      	ldr	r3, [r7, #20]
 8027048:	2b0b      	cmp	r3, #11
 802704a:	d103      	bne.n	8027054 <Finger_Enroll+0x290>
            LOG_StrLn("Could not store in that location");
 802704c:	4825      	ldr	r0, [pc, #148]	; (80270e4 <Finger_Enroll+0x320>)
 802704e:	f017 f9e9 	bl	803e424 <LOG_StrLn>
 8027052:	e009      	b.n	8027068 <Finger_Enroll+0x2a4>
        } else if (p == FINGERPRINT_FLASHERR) {
 8027054:	697b      	ldr	r3, [r7, #20]
 8027056:	2b18      	cmp	r3, #24
 8027058:	d103      	bne.n	8027062 <Finger_Enroll+0x29e>
            LOG_StrLn("Error writing to flash");
 802705a:	4823      	ldr	r0, [pc, #140]	; (80270e8 <Finger_Enroll+0x324>)
 802705c:	f017 f9e2 	bl	803e424 <LOG_StrLn>
 8027060:	e002      	b.n	8027068 <Finger_Enroll+0x2a4>
        } else {
            LOG_StrLn("Unknown error");
 8027062:	4810      	ldr	r0, [pc, #64]	; (80270a4 <Finger_Enroll+0x2e0>)
 8027064:	f017 f9de 	bl	803e424 <LOG_StrLn>
        }

        error = (p != FINGERPRINT_OK);
 8027068:	697b      	ldr	r3, [r7, #20]
 802706a:	2b00      	cmp	r3, #0
 802706c:	bf14      	ite	ne
 802706e:	2301      	movne	r3, #1
 8027070:	2300      	moveq	r3, #0
 8027072:	b2db      	uxtb	r3, r3
 8027074:	77fb      	strb	r3, [r7, #31]
    }

    // reset indicator
    _LedWrite(0);
 8027076:	2000      	movs	r0, #0
 8027078:	f018 fbb4 	bl	803f7e4 <_LedWrite>
    HMI1.d.status.finger = 0;
 802707c:	4b0d      	ldr	r3, [pc, #52]	; (80270b4 <Finger_Enroll+0x2f0>)
 802707e:	2200      	movs	r2, #0
 8027080:	711a      	strb	r2, [r3, #4]
    unlock();
 8027082:	f000 f8d9 	bl	8027238 <unlock>

    return !error;
 8027086:	7ffb      	ldrb	r3, [r7, #31]
 8027088:	2b00      	cmp	r3, #0
 802708a:	bf0c      	ite	eq
 802708c:	2301      	moveq	r3, #1
 802708e:	2300      	movne	r3, #0
 8027090:	b2db      	uxtb	r3, r3
}
 8027092:	4618      	mov	r0, r3
 8027094:	3720      	adds	r7, #32
 8027096:	46bd      	mov	sp, r7
 8027098:	bd80      	pop	{r7, pc}
 802709a:	bf00      	nop
 802709c:	08043580 	.word	0x08043580
 80270a0:	0804358c 	.word	0x0804358c
 80270a4:	080435a0 	.word	0x080435a0
 80270a8:	080435b0 	.word	0x080435b0
 80270ac:	200083c4 	.word	0x200083c4
 80270b0:	080435c4 	.word	0x080435c4
 80270b4:	200001e4 	.word	0x200001e4
 80270b8:	080435f0 	.word	0x080435f0
 80270bc:	080435fc 	.word	0x080435fc
 80270c0:	08043600 	.word	0x08043600
 80270c4:	08043610 	.word	0x08043610
 80270c8:	08043620 	.word	0x08043620
 80270cc:	08043630 	.word	0x08043630
 80270d0:	08043658 	.word	0x08043658
 80270d4:	08043670 	.word	0x08043670
 80270d8:	08043680 	.word	0x08043680
 80270dc:	0804369c 	.word	0x0804369c
 80270e0:	080436a4 	.word	0x080436a4
 80270e4:	080436ac 	.word	0x080436ac
 80270e8:	080436d0 	.word	0x080436d0

080270ec <Finger_DeleteID>:

uint8_t Finger_DeleteID(uint8_t id) {
 80270ec:	b580      	push	{r7, lr}
 80270ee:	b084      	sub	sp, #16
 80270f0:	af00      	add	r7, sp, #0
 80270f2:	4603      	mov	r3, r0
 80270f4:	71fb      	strb	r3, [r7, #7]
    int8_t p;

    lock();
 80270f6:	f000 f88f 	bl	8027218 <lock>
    // delete the modle
    p = FZ3387_deleteModel(id);
 80270fa:	79fb      	ldrb	r3, [r7, #7]
 80270fc:	b29b      	uxth	r3, r3
 80270fe:	4618      	mov	r0, r3
 8027100:	f7fd f9cc 	bl	802449c <FZ3387_deleteModel>
 8027104:	4603      	mov	r3, r0
 8027106:	73fb      	strb	r3, [r7, #15]
    if (p == FINGERPRINT_OK) {
 8027108:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802710c:	2b00      	cmp	r3, #0
 802710e:	d103      	bne.n	8027118 <Finger_DeleteID+0x2c>
        LOG_StrLn("Deleted!");
 8027110:	4818      	ldr	r0, [pc, #96]	; (8027174 <Finger_DeleteID+0x88>)
 8027112:	f017 f987 	bl	803e424 <LOG_StrLn>
 8027116:	e020      	b.n	802715a <Finger_DeleteID+0x6e>
    } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
 8027118:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802711c:	2b01      	cmp	r3, #1
 802711e:	d103      	bne.n	8027128 <Finger_DeleteID+0x3c>
        LOG_StrLn("Communication error");
 8027120:	4815      	ldr	r0, [pc, #84]	; (8027178 <Finger_DeleteID+0x8c>)
 8027122:	f017 f97f 	bl	803e424 <LOG_StrLn>
 8027126:	e018      	b.n	802715a <Finger_DeleteID+0x6e>
    } else if (p == FINGERPRINT_BADLOCATION) {
 8027128:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802712c:	2b0b      	cmp	r3, #11
 802712e:	d103      	bne.n	8027138 <Finger_DeleteID+0x4c>
        LOG_StrLn("Could not delete in that location");
 8027130:	4812      	ldr	r0, [pc, #72]	; (802717c <Finger_DeleteID+0x90>)
 8027132:	f017 f977 	bl	803e424 <LOG_StrLn>
 8027136:	e010      	b.n	802715a <Finger_DeleteID+0x6e>
    } else if (p == FINGERPRINT_FLASHERR) {
 8027138:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802713c:	2b18      	cmp	r3, #24
 802713e:	d103      	bne.n	8027148 <Finger_DeleteID+0x5c>
        LOG_StrLn("Error writing to flash");
 8027140:	480f      	ldr	r0, [pc, #60]	; (8027180 <Finger_DeleteID+0x94>)
 8027142:	f017 f96f 	bl	803e424 <LOG_StrLn>
 8027146:	e008      	b.n	802715a <Finger_DeleteID+0x6e>
    } else {
        LOG_Str("\nUnknown error: 0x");
 8027148:	480e      	ldr	r0, [pc, #56]	; (8027184 <Finger_DeleteID+0x98>)
 802714a:	f017 f953 	bl	803e3f4 <LOG_Str>
        LOG_Hex8(p);
 802714e:	7bfb      	ldrb	r3, [r7, #15]
 8027150:	4618      	mov	r0, r3
 8027152:	f017 f92f 	bl	803e3b4 <LOG_Hex8>
        LOG_Enter();
 8027156:	f017 f8d3 	bl	803e300 <LOG_Enter>
    }
    unlock();
 802715a:	f000 f86d 	bl	8027238 <unlock>

    return (p == FINGERPRINT_OK);
 802715e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8027162:	2b00      	cmp	r3, #0
 8027164:	bf0c      	ite	eq
 8027166:	2301      	moveq	r3, #1
 8027168:	2300      	movne	r3, #0
 802716a:	b2db      	uxtb	r3, r3
}
 802716c:	4618      	mov	r0, r3
 802716e:	3710      	adds	r7, #16
 8027170:	46bd      	mov	sp, r7
 8027172:	bd80      	pop	{r7, pc}
 8027174:	080436e8 	.word	0x080436e8
 8027178:	0804358c 	.word	0x0804358c
 802717c:	080436f4 	.word	0x080436f4
 8027180:	080436d0 	.word	0x080436d0
 8027184:	08043718 	.word	0x08043718

08027188 <Finger_EmptyDatabase>:

uint8_t Finger_EmptyDatabase(void) {
 8027188:	b580      	push	{r7, lr}
 802718a:	b082      	sub	sp, #8
 802718c:	af00      	add	r7, sp, #0
    int8_t p;

    lock();
 802718e:	f000 f843 	bl	8027218 <lock>
    // reset database
    p = FZ3387_emptyDatabase();
 8027192:	f7fd f9a1 	bl	80244d8 <FZ3387_emptyDatabase>
 8027196:	4603      	mov	r3, r0
 8027198:	71fb      	strb	r3, [r7, #7]
    unlock();
 802719a:	f000 f84d 	bl	8027238 <unlock>

    return (p == FINGERPRINT_OK);
 802719e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80271a2:	2b00      	cmp	r3, #0
 80271a4:	bf0c      	ite	eq
 80271a6:	2301      	moveq	r3, #1
 80271a8:	2300      	movne	r3, #0
 80271aa:	b2db      	uxtb	r3, r3
}
 80271ac:	4618      	mov	r0, r3
 80271ae:	3708      	adds	r7, #8
 80271b0:	46bd      	mov	sp, r7
 80271b2:	bd80      	pop	{r7, pc}

080271b4 <Finger_AuthFast>:
    unlock();

    return id;
}

int8_t Finger_AuthFast(void) {
 80271b4:	b580      	push	{r7, lr}
 80271b6:	b082      	sub	sp, #8
 80271b8:	af00      	add	r7, sp, #0
    int8_t p, id = -1;
 80271ba:	23ff      	movs	r3, #255	; 0xff
 80271bc:	71bb      	strb	r3, [r7, #6]

    lock();
 80271be:	f000 f82b 	bl	8027218 <lock>

    // scan the finger print
    p = FZ3387_getImage();
 80271c2:	f7fd f91d 	bl	8024400 <FZ3387_getImage>
 80271c6:	4603      	mov	r3, r0
 80271c8:	71fb      	strb	r3, [r7, #7]

    // OK success!, convert the image taken
    if (p == FINGERPRINT_OK) {
 80271ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80271ce:	2b00      	cmp	r3, #0
 80271d0:	d104      	bne.n	80271dc <Finger_AuthFast+0x28>
        p = FZ3387_image2Tz(1);
 80271d2:	2001      	movs	r0, #1
 80271d4:	f7fd f923 	bl	802441e <FZ3387_image2Tz>
 80271d8:	4603      	mov	r3, r0
 80271da:	71fb      	strb	r3, [r7, #7]
    }

    // Find in the model
    if (p == FINGERPRINT_OK) {
 80271dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80271e0:	2b00      	cmp	r3, #0
 80271e2:	d103      	bne.n	80271ec <Finger_AuthFast+0x38>
        p = FZ3387_fingerFastSearch();
 80271e4:	f7fd f988 	bl	80244f8 <FZ3387_fingerFastSearch>
 80271e8:	4603      	mov	r3, r0
 80271ea:	71fb      	strb	r3, [r7, #7]
    }

    // found a match!
    if (p == FINGERPRINT_OK) {
 80271ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80271f0:	2b00      	cmp	r3, #0
 80271f2:	d106      	bne.n	8027202 <Finger_AuthFast+0x4e>
        if (finger.confidence > FINGER_CONFIDENCE_MIN) {
 80271f4:	4b07      	ldr	r3, [pc, #28]	; (8027214 <Finger_AuthFast+0x60>)
 80271f6:	885b      	ldrh	r3, [r3, #2]
 80271f8:	2b32      	cmp	r3, #50	; 0x32
 80271fa:	d902      	bls.n	8027202 <Finger_AuthFast+0x4e>
            id = finger.id;
 80271fc:	4b05      	ldr	r3, [pc, #20]	; (8027214 <Finger_AuthFast+0x60>)
 80271fe:	881b      	ldrh	r3, [r3, #0]
 8027200:	71bb      	strb	r3, [r7, #6]
        }
    }
    unlock();
 8027202:	f000 f819 	bl	8027238 <unlock>

    return id;
 8027206:	f997 3006 	ldrsb.w	r3, [r7, #6]
}
 802720a:	4618      	mov	r0, r3
 802720c:	3708      	adds	r7, #8
 802720e:	46bd      	mov	sp, r7
 8027210:	bd80      	pop	{r7, pc}
 8027212:	bf00      	nop
 8027214:	200083c4 	.word	0x200083c4

08027218 <lock>:

/* Private functions implementation --------------------------------------------*/
static void lock(void) {
 8027218:	b580      	push	{r7, lr}
 802721a:	af00      	add	r7, sp, #0
    osMutexAcquire(FingerRecMutexHandle, osWaitForever);
 802721c:	4b05      	ldr	r3, [pc, #20]	; (8027234 <lock+0x1c>)
 802721e:	681b      	ldr	r3, [r3, #0]
 8027220:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8027224:	4618      	mov	r0, r3
 8027226:	f010 fd7f 	bl	8037d28 <osMutexAcquire>
    FZ3387_SET_POWER(1);
 802722a:	2001      	movs	r0, #1
 802722c:	f7fc ff3e 	bl	80240ac <FZ3387_SET_POWER>
}
 8027230:	bf00      	nop
 8027232:	bd80      	pop	{r7, pc}
 8027234:	20008a0c 	.word	0x20008a0c

08027238 <unlock>:

static void unlock(void) {
 8027238:	b580      	push	{r7, lr}
 802723a:	af00      	add	r7, sp, #0
    FZ3387_SET_POWER(0);
 802723c:	2000      	movs	r0, #0
 802723e:	f7fc ff35 	bl	80240ac <FZ3387_SET_POWER>
    _DelayMS(50);
 8027242:	2032      	movs	r0, #50	; 0x32
 8027244:	f018 fabc 	bl	803f7c0 <_DelayMS>
    osMutexRelease(FingerRecMutexHandle);
 8027248:	4b03      	ldr	r3, [pc, #12]	; (8027258 <unlock+0x20>)
 802724a:	681b      	ldr	r3, [r3, #0]
 802724c:	4618      	mov	r0, r3
 802724e:	f010 fdc9 	bl	8037de4 <osMutexRelease>
}
 8027252:	bf00      	nop
 8027254:	bd80      	pop	{r7, pc}
 8027256:	bf00      	nop
 8027258:	20008a0c 	.word	0x20008a0c

0802725c <GPS_Init>:

/* Private variables ----------------------------------------------------------*/
static nmea_t nmea;

/* Public functions implementation --------------------------------------------*/
void GPS_Init(void) {
 802725c:	b580      	push	{r7, lr}
 802725e:	b082      	sub	sp, #8
 8027260:	af00      	add	r7, sp, #0
    uint32_t tick;

    // Inititalize Module
    _LedWrite(1);
 8027262:	2001      	movs	r0, #1
 8027264:	f018 fabe 	bl	803f7e4 <_LedWrite>
    do {
        LOG_StrLn("GPS:Init");
 8027268:	481c      	ldr	r0, [pc, #112]	; (80272dc <GPS_Init+0x80>)
 802726a:	f017 f8db 	bl	803e424 <LOG_StrLn>

        HAL_GPIO_WritePin(INT_GPS_PWR_GPIO_Port, INT_GPS_PWR_Pin, 0);
 802726e:	2200      	movs	r2, #0
 8027270:	2102      	movs	r1, #2
 8027272:	481b      	ldr	r0, [pc, #108]	; (80272e0 <GPS_Init+0x84>)
 8027274:	f008 feda 	bl	803002c <HAL_GPIO_WritePin>
        _DelayMS(500);
 8027278:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 802727c:	f018 faa0 	bl	803f7c0 <_DelayMS>
        HAL_GPIO_WritePin(INT_GPS_PWR_GPIO_Port, INT_GPS_PWR_Pin, 1);
 8027280:	2201      	movs	r2, #1
 8027282:	2102      	movs	r1, #2
 8027284:	4816      	ldr	r0, [pc, #88]	; (80272e0 <GPS_Init+0x84>)
 8027286:	f008 fed1 	bl	803002c <HAL_GPIO_WritePin>

        // set timeout guard
        tick = _GetTickMS();
 802728a:	f018 faa4 	bl	803f7d6 <_GetTickMS>
 802728e:	6078      	str	r0, [r7, #4]
        while ((_GetTickMS() - tick) < 5000) {
 8027290:	e008      	b.n	80272a4 <GPS_Init+0x48>
            if (strlen(UBLOX_UART_RX) > 50) {
 8027292:	4814      	ldr	r0, [pc, #80]	; (80272e4 <GPS_Init+0x88>)
 8027294:	f7f8 ffce 	bl	8020234 <strlen>
 8027298:	4603      	mov	r3, r0
 802729a:	2b32      	cmp	r3, #50	; 0x32
 802729c:	d80c      	bhi.n	80272b8 <GPS_Init+0x5c>
                break;
            }
            _DelayMS(10);
 802729e:	200a      	movs	r0, #10
 80272a0:	f018 fa8e 	bl	803f7c0 <_DelayMS>
        while ((_GetTickMS() - tick) < 5000) {
 80272a4:	f018 fa97 	bl	803f7d6 <_GetTickMS>
 80272a8:	4602      	mov	r2, r0
 80272aa:	687b      	ldr	r3, [r7, #4]
 80272ac:	1ad3      	subs	r3, r2, r3
 80272ae:	f241 3287 	movw	r2, #4999	; 0x1387
 80272b2:	4293      	cmp	r3, r2
 80272b4:	d9ed      	bls.n	8027292 <GPS_Init+0x36>
 80272b6:	e000      	b.n	80272ba <GPS_Init+0x5e>
                break;
 80272b8:	bf00      	nop
        }
    } while (strlen(UBLOX_UART_RX) <= 50);
 80272ba:	480a      	ldr	r0, [pc, #40]	; (80272e4 <GPS_Init+0x88>)
 80272bc:	f7f8 ffba 	bl	8020234 <strlen>
 80272c0:	4603      	mov	r3, r0
 80272c2:	2b32      	cmp	r3, #50	; 0x32
 80272c4:	d9d0      	bls.n	8027268 <GPS_Init+0xc>
    _LedWrite(0);
 80272c6:	2000      	movs	r0, #0
 80272c8:	f018 fa8c 	bl	803f7e4 <_LedWrite>

    nmea_init(&nmea);
 80272cc:	4806      	ldr	r0, [pc, #24]	; (80272e8 <GPS_Init+0x8c>)
 80272ce:	f7fd fb55 	bl	802497c <nmea_init>
}
 80272d2:	bf00      	nop
 80272d4:	3708      	adds	r7, #8
 80272d6:	46bd      	mov	sp, r7
 80272d8:	bd80      	pop	{r7, pc}
 80272da:	bf00      	nop
 80272dc:	08043794 	.word	0x08043794
 80272e0:	40020800 	.word	0x40020800
 80272e4:	20008168 	.word	0x20008168
 80272e8:	20000e3c 	.word	0x20000e3c

080272ec <GPS_Capture>:

uint8_t GPS_Capture(void) {
 80272ec:	b580      	push	{r7, lr}
 80272ee:	af00      	add	r7, sp, #0
    nmea_process(&nmea, UBLOX_UART_RX, strlen(UBLOX_UART_RX));
 80272f0:	481d      	ldr	r0, [pc, #116]	; (8027368 <GPS_Capture+0x7c>)
 80272f2:	f7f8 ff9f 	bl	8020234 <strlen>
 80272f6:	4603      	mov	r3, r0
 80272f8:	461a      	mov	r2, r3
 80272fa:	491b      	ldr	r1, [pc, #108]	; (8027368 <GPS_Capture+0x7c>)
 80272fc:	481b      	ldr	r0, [pc, #108]	; (802736c <GPS_Capture+0x80>)
 80272fe:	f7fd fb4b 	bl	8024998 <nmea_process>

    // copy only necessary part
    GPS.dop_h = nmea.dop_h;
 8027302:	4b1a      	ldr	r3, [pc, #104]	; (802736c <GPS_Capture+0x80>)
 8027304:	699b      	ldr	r3, [r3, #24]
 8027306:	4a1a      	ldr	r2, [pc, #104]	; (8027370 <GPS_Capture+0x84>)
 8027308:	6013      	str	r3, [r2, #0]
    GPS.latitude = nmea.latitude;
 802730a:	4b18      	ldr	r3, [pc, #96]	; (802736c <GPS_Capture+0x80>)
 802730c:	681b      	ldr	r3, [r3, #0]
 802730e:	4a18      	ldr	r2, [pc, #96]	; (8027370 <GPS_Capture+0x84>)
 8027310:	6053      	str	r3, [r2, #4]
    GPS.longitude = nmea.longitude;
 8027312:	4b16      	ldr	r3, [pc, #88]	; (802736c <GPS_Capture+0x80>)
 8027314:	685b      	ldr	r3, [r3, #4]
 8027316:	4a16      	ldr	r2, [pc, #88]	; (8027370 <GPS_Capture+0x84>)
 8027318:	6093      	str	r3, [r2, #8]
    GPS.heading = nmea.coarse;
 802731a:	4b14      	ldr	r3, [pc, #80]	; (802736c <GPS_Capture+0x80>)
 802731c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802731e:	4a14      	ldr	r2, [pc, #80]	; (8027370 <GPS_Capture+0x84>)
 8027320:	60d3      	str	r3, [r2, #12]
    GPS.speed_kph = nmea_to_speed(nmea.speed, nmea_speed_kph);
 8027322:	4b12      	ldr	r3, [pc, #72]	; (802736c <GPS_Capture+0x80>)
 8027324:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8027328:	2001      	movs	r0, #1
 802732a:	eeb0 0a67 	vmov.f32	s0, s15
 802732e:	f7fd fbed 	bl	8024b0c <nmea_to_speed>
 8027332:	eef0 7a40 	vmov.f32	s15, s0
 8027336:	4b0e      	ldr	r3, [pc, #56]	; (8027370 <GPS_Capture+0x84>)
 8027338:	edc3 7a04 	vstr	s15, [r3, #16]
    GPS.speed_mps = nmea_to_speed(nmea.speed, nmea_speed_mps);
 802733c:	4b0b      	ldr	r3, [pc, #44]	; (802736c <GPS_Capture+0x80>)
 802733e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8027342:	2002      	movs	r0, #2
 8027344:	eeb0 0a67 	vmov.f32	s0, s15
 8027348:	f7fd fbe0 	bl	8024b0c <nmea_to_speed>
 802734c:	eef0 7a40 	vmov.f32	s15, s0
 8027350:	4b07      	ldr	r3, [pc, #28]	; (8027370 <GPS_Capture+0x84>)
 8027352:	edc3 7a05 	vstr	s15, [r3, #20]

    return nmea.fix > 0;
 8027356:	4b05      	ldr	r3, [pc, #20]	; (802736c <GPS_Capture+0x80>)
 8027358:	7c5b      	ldrb	r3, [r3, #17]
 802735a:	2b00      	cmp	r3, #0
 802735c:	bf14      	ite	ne
 802735e:	2301      	movne	r3, #1
 8027360:	2300      	moveq	r3, #0
 8027362:	b2db      	uxtb	r3, r3
}
 8027364:	4618      	mov	r0, r3
 8027366:	bd80      	pop	{r7, pc}
 8027368:	20008168 	.word	0x20008168
 802736c:	20000e3c 	.word	0x20000e3c
 8027370:	20008404 	.word	0x20008404

08027374 <GPS_CalculateOdometer>:
    LOG_StrLn("GPS:Buffer = ");
    LOG_Buf(UBLOX_UART_RX, sizeof(UBLOX_UART_RX));
    LOG_Enter();
}

void GPS_CalculateOdometer(void) {
 8027374:	b580      	push	{r7, lr}
 8027376:	b082      	sub	sp, #8
 8027378:	af00      	add	r7, sp, #0
    static uint16_t odometer_mps = 0;

    // dummy odometer
    if (GPS.speed_mps > 5) {
 802737a:	4b2a      	ldr	r3, [pc, #168]	; (8027424 <GPS_CalculateOdometer+0xb0>)
 802737c:	edd3 7a05 	vldr	s15, [r3, #20]
 8027380:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8027384:	eef4 7ac7 	vcmpe.f32	s15, s14
 8027388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802738c:	dd19      	ble.n	80273c2 <GPS_CalculateOdometer+0x4e>
        odometer_mps += (GPS.speed_mps * GPS_INTERVAL_MS) / 1000;
 802738e:	4b26      	ldr	r3, [pc, #152]	; (8027428 <GPS_CalculateOdometer+0xb4>)
 8027390:	881b      	ldrh	r3, [r3, #0]
 8027392:	ee07 3a90 	vmov	s15, r3
 8027396:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802739a:	4b22      	ldr	r3, [pc, #136]	; (8027424 <GPS_CalculateOdometer+0xb0>)
 802739c:	edd3 7a05 	vldr	s15, [r3, #20]
 80273a0:	eddf 6a22 	vldr	s13, [pc, #136]	; 802742c <GPS_CalculateOdometer+0xb8>
 80273a4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80273a8:	ed9f 6a21 	vldr	s12, [pc, #132]	; 8027430 <GPS_CalculateOdometer+0xbc>
 80273ac:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80273b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80273b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80273b8:	ee17 3a90 	vmov	r3, s15
 80273bc:	b29a      	uxth	r2, r3
 80273be:	4b1a      	ldr	r3, [pc, #104]	; (8027428 <GPS_CalculateOdometer+0xb4>)
 80273c0:	801a      	strh	r2, [r3, #0]
    }
    // check if already > 1km
    if (odometer_mps >= 1000) {
 80273c2:	4b19      	ldr	r3, [pc, #100]	; (8027428 <GPS_CalculateOdometer+0xb4>)
 80273c4:	881b      	ldrh	r3, [r3, #0]
 80273c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80273ca:	d30b      	bcc.n	80273e4 <GPS_CalculateOdometer+0x70>
        odometer_mps = 0;
 80273cc:	4b16      	ldr	r3, [pc, #88]	; (8027428 <GPS_CalculateOdometer+0xb4>)
 80273ce:	2200      	movs	r2, #0
 80273d0:	801a      	strh	r2, [r3, #0]

        // Accumulate Odometer (Save permanently)
        EEPROM_Odometer(EE_CMD_W, VCU.d.odometer + 1);
 80273d2:	4b18      	ldr	r3, [pc, #96]	; (8027434 <GPS_CalculateOdometer+0xc0>)
 80273d4:	68db      	ldr	r3, [r3, #12]
 80273d6:	3301      	adds	r3, #1
 80273d8:	4619      	mov	r1, r3
 80273da:	2001      	movs	r0, #1
 80273dc:	f017 f97c 	bl	803e6d8 <EEPROM_Odometer>

        // Accumulate Sub-Trip (Reset on Start)
        HBAR_AccumulateSubTrip();
 80273e0:	f000 fb2c 	bl	8027a3c <HBAR_AccumulateSubTrip>
    }

    // FIXME: use real data
    // update data
    VCU.d.speed = GPS.speed_kph;
 80273e4:	4b0f      	ldr	r3, [pc, #60]	; (8027424 <GPS_CalculateOdometer+0xb0>)
 80273e6:	edd3 7a04 	vldr	s15, [r3, #16]
 80273ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80273ee:	edc7 7a01 	vstr	s15, [r7, #4]
 80273f2:	793b      	ldrb	r3, [r7, #4]
 80273f4:	b2da      	uxtb	r2, r3
 80273f6:	4b0f      	ldr	r3, [pc, #60]	; (8027434 <GPS_CalculateOdometer+0xc0>)
 80273f8:	725a      	strb	r2, [r3, #9]
    VCU.d.volume = VCU.d.speed * 100 / MCU_SPEED_MAX;
 80273fa:	4b0e      	ldr	r3, [pc, #56]	; (8027434 <GPS_CalculateOdometer+0xc0>)
 80273fc:	7a5b      	ldrb	r3, [r3, #9]
 80273fe:	461a      	mov	r2, r3
 8027400:	2364      	movs	r3, #100	; 0x64
 8027402:	fb03 f302 	mul.w	r3, r3, r2
 8027406:	4a0c      	ldr	r2, [pc, #48]	; (8027438 <GPS_CalculateOdometer+0xc4>)
 8027408:	fb82 1203 	smull	r1, r2, r2, r3
 802740c:	441a      	add	r2, r3
 802740e:	11d2      	asrs	r2, r2, #7
 8027410:	17db      	asrs	r3, r3, #31
 8027412:	1ad3      	subs	r3, r2, r3
 8027414:	b2da      	uxtb	r2, r3
 8027416:	4b07      	ldr	r3, [pc, #28]	; (8027434 <GPS_CalculateOdometer+0xc0>)
 8027418:	721a      	strb	r2, [r3, #8]
}
 802741a:	bf00      	nop
 802741c:	3708      	adds	r7, #8
 802741e:	46bd      	mov	sp, r7
 8027420:	bd80      	pop	{r7, pc}
 8027422:	bf00      	nop
 8027424:	20008404 	.word	0x20008404
 8027428:	20000eb0 	.word	0x20000eb0
 802742c:	451c4000 	.word	0x451c4000
 8027430:	447a0000 	.word	0x447a0000
 8027434:	20000228 	.word	0x20000228
 8027438:	80808081 	.word	0x80808081

0802743c <GYRO_Init>:
static mems_t mems, calibrator;
static uint8_t calibrated;
static mems_decision_t decider;

/* Public functions implementation --------------------------------------------*/
void GYRO_Init(void) {
 802743c:	b5b0      	push	{r4, r5, r7, lr}
 802743e:	b08a      	sub	sp, #40	; 0x28
 8027440:	af02      	add	r7, sp, #8
    MPU6050_Result result;
    calibrated = 0;
 8027442:	4b1f      	ldr	r3, [pc, #124]	; (80274c0 <GYRO_Init+0x84>)
 8027444:	2200      	movs	r2, #0
 8027446:	701a      	strb	r2, [r3, #0]

    do {
        LOG_StrLn("Gyro:Init");
 8027448:	481e      	ldr	r0, [pc, #120]	; (80274c4 <GYRO_Init+0x88>)
 802744a:	f016 ffeb 	bl	803e424 <LOG_StrLn>

        // MOSFET Control
        HAL_GPIO_WritePin(INT_GYRO_PWR_GPIO_Port, INT_GYRO_PWR_Pin, 0);
 802744e:	2200      	movs	r2, #0
 8027450:	2110      	movs	r1, #16
 8027452:	481d      	ldr	r0, [pc, #116]	; (80274c8 <GYRO_Init+0x8c>)
 8027454:	f008 fdea 	bl	803002c <HAL_GPIO_WritePin>
        _DelayMS(500);
 8027458:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 802745c:	f018 f9b0 	bl	803f7c0 <_DelayMS>
        HAL_GPIO_WritePin(INT_GYRO_PWR_GPIO_Port, INT_GYRO_PWR_Pin, 1);
 8027460:	2201      	movs	r2, #1
 8027462:	2110      	movs	r1, #16
 8027464:	4818      	ldr	r0, [pc, #96]	; (80274c8 <GYRO_Init+0x8c>)
 8027466:	f008 fde1 	bl	803002c <HAL_GPIO_WritePin>
        _DelayMS(1000);
 802746a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 802746e:	f018 f9a7 	bl	803f7c0 <_DelayMS>

        // module initialization
        result = MPU6050_Init(&hi2c3, &mpu, MPU6050_Device_0, MPU6050_Accelerometer_16G, MPU6050_Gyroscope_2000s);
 8027472:	2303      	movs	r3, #3
 8027474:	9300      	str	r3, [sp, #0]
 8027476:	2303      	movs	r3, #3
 8027478:	2200      	movs	r2, #0
 802747a:	4914      	ldr	r1, [pc, #80]	; (80274cc <GYRO_Init+0x90>)
 802747c:	4814      	ldr	r0, [pc, #80]	; (80274d0 <GYRO_Init+0x94>)
 802747e:	f7fd f8af 	bl	80245e0 <MPU6050_Init>
 8027482:	4603      	mov	r3, r0
 8027484:	77fb      	strb	r3, [r7, #31]

    } while (result != MPU6050_Result_Ok);
 8027486:	7ffb      	ldrb	r3, [r7, #31]
 8027488:	2b00      	cmp	r3, #0
 802748a:	d1dd      	bne.n	8027448 <GYRO_Init+0xc>

    // Set calibrator
    calibrator = GYRO_Average(500);
 802748c:	4c11      	ldr	r4, [pc, #68]	; (80274d4 <GYRO_Init+0x98>)
 802748e:	463b      	mov	r3, r7
 8027490:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8027494:	4618      	mov	r0, r3
 8027496:	f000 f821 	bl	80274dc <GYRO_Average>
 802749a:	4625      	mov	r5, r4
 802749c:	463c      	mov	r4, r7
 802749e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80274a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80274a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80274a6:	e885 0003 	stmia.w	r5, {r0, r1}
    calibrated = 1;
 80274aa:	4b05      	ldr	r3, [pc, #20]	; (80274c0 <GYRO_Init+0x84>)
 80274ac:	2201      	movs	r2, #1
 80274ae:	701a      	strb	r2, [r3, #0]
    LOG_StrLn("Gyro:Calibrated");
 80274b0:	4809      	ldr	r0, [pc, #36]	; (80274d8 <GYRO_Init+0x9c>)
 80274b2:	f016 ffb7 	bl	803e424 <LOG_StrLn>
}
 80274b6:	bf00      	nop
 80274b8:	3720      	adds	r7, #32
 80274ba:	46bd      	mov	sp, r7
 80274bc:	bdb0      	pop	{r4, r5, r7, pc}
 80274be:	bf00      	nop
 80274c0:	20000f00 	.word	0x20000f00
 80274c4:	080437b0 	.word	0x080437b0
 80274c8:	40020400 	.word	0x40020400
 80274cc:	20000eb4 	.word	0x20000eb4
 80274d0:	200084dc 	.word	0x200084dc
 80274d4:	20000ee8 	.word	0x20000ee8
 80274d8:	080437bc 	.word	0x080437bc

080274dc <GYRO_Average>:

mems_t GYRO_Average(uint16_t sample) {
 80274dc:	b5b0      	push	{r4, r5, r7, lr}
 80274de:	b084      	sub	sp, #16
 80274e0:	af00      	add	r7, sp, #0
 80274e2:	6078      	str	r0, [r7, #4]
 80274e4:	460b      	mov	r3, r1
 80274e6:	807b      	strh	r3, [r7, #2]
    uint16_t i;

    // reset value
    mems.accelerometer.x = 0;
 80274e8:	4b5a      	ldr	r3, [pc, #360]	; (8027654 <GYRO_Average+0x178>)
 80274ea:	2200      	movs	r2, #0
 80274ec:	601a      	str	r2, [r3, #0]
    mems.accelerometer.y = 0;
 80274ee:	4b59      	ldr	r3, [pc, #356]	; (8027654 <GYRO_Average+0x178>)
 80274f0:	2200      	movs	r2, #0
 80274f2:	605a      	str	r2, [r3, #4]
    mems.accelerometer.z = 0;
 80274f4:	4b57      	ldr	r3, [pc, #348]	; (8027654 <GYRO_Average+0x178>)
 80274f6:	2200      	movs	r2, #0
 80274f8:	609a      	str	r2, [r3, #8]
    mems.gyroscope.x = 0;
 80274fa:	4b56      	ldr	r3, [pc, #344]	; (8027654 <GYRO_Average+0x178>)
 80274fc:	2200      	movs	r2, #0
 80274fe:	60da      	str	r2, [r3, #12]
    mems.gyroscope.y = 0;
 8027500:	4b54      	ldr	r3, [pc, #336]	; (8027654 <GYRO_Average+0x178>)
 8027502:	2200      	movs	r2, #0
 8027504:	611a      	str	r2, [r3, #16]
    mems.gyroscope.z = 0;
 8027506:	4b53      	ldr	r3, [pc, #332]	; (8027654 <GYRO_Average+0x178>)
 8027508:	2200      	movs	r2, #0
 802750a:	615a      	str	r2, [r3, #20]

    // sampling
    for (i = 0; i < sample; i++) {
 802750c:	2300      	movs	r3, #0
 802750e:	81fb      	strh	r3, [r7, #14]
 8027510:	e036      	b.n	8027580 <GYRO_Average+0xa4>
        // read sensor
        MPU6050_ReadAll(&hi2c3, &mpu);
 8027512:	4951      	ldr	r1, [pc, #324]	; (8027658 <GYRO_Average+0x17c>)
 8027514:	4851      	ldr	r0, [pc, #324]	; (802765c <GYRO_Average+0x180>)
 8027516:	f7fd f9bd 	bl	8024894 <MPU6050_ReadAll>
        // sum all value
        mems.accelerometer.x += mpu.Gyroscope_X;
 802751a:	4b4e      	ldr	r3, [pc, #312]	; (8027654 <GYRO_Average+0x178>)
 802751c:	681b      	ldr	r3, [r3, #0]
 802751e:	4a4e      	ldr	r2, [pc, #312]	; (8027658 <GYRO_Average+0x17c>)
 8027520:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8027524:	4413      	add	r3, r2
 8027526:	4a4b      	ldr	r2, [pc, #300]	; (8027654 <GYRO_Average+0x178>)
 8027528:	6013      	str	r3, [r2, #0]
        mems.accelerometer.y += mpu.Gyroscope_Y;
 802752a:	4b4a      	ldr	r3, [pc, #296]	; (8027654 <GYRO_Average+0x178>)
 802752c:	685b      	ldr	r3, [r3, #4]
 802752e:	4a4a      	ldr	r2, [pc, #296]	; (8027658 <GYRO_Average+0x17c>)
 8027530:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 8027534:	4413      	add	r3, r2
 8027536:	4a47      	ldr	r2, [pc, #284]	; (8027654 <GYRO_Average+0x178>)
 8027538:	6053      	str	r3, [r2, #4]
        mems.accelerometer.z += mpu.Gyroscope_Z;
 802753a:	4b46      	ldr	r3, [pc, #280]	; (8027654 <GYRO_Average+0x178>)
 802753c:	689b      	ldr	r3, [r3, #8]
 802753e:	4a46      	ldr	r2, [pc, #280]	; (8027658 <GYRO_Average+0x17c>)
 8027540:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 8027544:	4413      	add	r3, r2
 8027546:	4a43      	ldr	r2, [pc, #268]	; (8027654 <GYRO_Average+0x178>)
 8027548:	6093      	str	r3, [r2, #8]
        mems.gyroscope.x += mpu.Accelerometer_X;
 802754a:	4b42      	ldr	r3, [pc, #264]	; (8027654 <GYRO_Average+0x178>)
 802754c:	68db      	ldr	r3, [r3, #12]
 802754e:	4a42      	ldr	r2, [pc, #264]	; (8027658 <GYRO_Average+0x17c>)
 8027550:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8027554:	4413      	add	r3, r2
 8027556:	4a3f      	ldr	r2, [pc, #252]	; (8027654 <GYRO_Average+0x178>)
 8027558:	60d3      	str	r3, [r2, #12]
        mems.gyroscope.y += mpu.Accelerometer_Y;
 802755a:	4b3e      	ldr	r3, [pc, #248]	; (8027654 <GYRO_Average+0x178>)
 802755c:	691b      	ldr	r3, [r3, #16]
 802755e:	4a3e      	ldr	r2, [pc, #248]	; (8027658 <GYRO_Average+0x17c>)
 8027560:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8027564:	4413      	add	r3, r2
 8027566:	4a3b      	ldr	r2, [pc, #236]	; (8027654 <GYRO_Average+0x178>)
 8027568:	6113      	str	r3, [r2, #16]
        mems.gyroscope.z += mpu.Accelerometer_Z;
 802756a:	4b3a      	ldr	r3, [pc, #232]	; (8027654 <GYRO_Average+0x178>)
 802756c:	695b      	ldr	r3, [r3, #20]
 802756e:	4a3a      	ldr	r2, [pc, #232]	; (8027658 <GYRO_Average+0x17c>)
 8027570:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8027574:	4413      	add	r3, r2
 8027576:	4a37      	ldr	r2, [pc, #220]	; (8027654 <GYRO_Average+0x178>)
 8027578:	6153      	str	r3, [r2, #20]
    for (i = 0; i < sample; i++) {
 802757a:	89fb      	ldrh	r3, [r7, #14]
 802757c:	3301      	adds	r3, #1
 802757e:	81fb      	strh	r3, [r7, #14]
 8027580:	89fa      	ldrh	r2, [r7, #14]
 8027582:	887b      	ldrh	r3, [r7, #2]
 8027584:	429a      	cmp	r2, r3
 8027586:	d3c4      	bcc.n	8027512 <GYRO_Average+0x36>
    }

    // calculate the average
    mems.accelerometer.x = mems.accelerometer.x / sample;
 8027588:	4b32      	ldr	r3, [pc, #200]	; (8027654 <GYRO_Average+0x178>)
 802758a:	681a      	ldr	r2, [r3, #0]
 802758c:	887b      	ldrh	r3, [r7, #2]
 802758e:	fb92 f3f3 	sdiv	r3, r2, r3
 8027592:	4a30      	ldr	r2, [pc, #192]	; (8027654 <GYRO_Average+0x178>)
 8027594:	6013      	str	r3, [r2, #0]
    mems.accelerometer.y = mems.accelerometer.y / sample;
 8027596:	4b2f      	ldr	r3, [pc, #188]	; (8027654 <GYRO_Average+0x178>)
 8027598:	685a      	ldr	r2, [r3, #4]
 802759a:	887b      	ldrh	r3, [r7, #2]
 802759c:	fb92 f3f3 	sdiv	r3, r2, r3
 80275a0:	4a2c      	ldr	r2, [pc, #176]	; (8027654 <GYRO_Average+0x178>)
 80275a2:	6053      	str	r3, [r2, #4]
    mems.accelerometer.z = mems.accelerometer.z / sample;
 80275a4:	4b2b      	ldr	r3, [pc, #172]	; (8027654 <GYRO_Average+0x178>)
 80275a6:	689a      	ldr	r2, [r3, #8]
 80275a8:	887b      	ldrh	r3, [r7, #2]
 80275aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80275ae:	4a29      	ldr	r2, [pc, #164]	; (8027654 <GYRO_Average+0x178>)
 80275b0:	6093      	str	r3, [r2, #8]
    mems.gyroscope.x = mems.gyroscope.x / sample;
 80275b2:	4b28      	ldr	r3, [pc, #160]	; (8027654 <GYRO_Average+0x178>)
 80275b4:	68da      	ldr	r2, [r3, #12]
 80275b6:	887b      	ldrh	r3, [r7, #2]
 80275b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80275bc:	4a25      	ldr	r2, [pc, #148]	; (8027654 <GYRO_Average+0x178>)
 80275be:	60d3      	str	r3, [r2, #12]
    mems.gyroscope.y = mems.gyroscope.y / sample;
 80275c0:	4b24      	ldr	r3, [pc, #144]	; (8027654 <GYRO_Average+0x178>)
 80275c2:	691a      	ldr	r2, [r3, #16]
 80275c4:	887b      	ldrh	r3, [r7, #2]
 80275c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80275ca:	4a22      	ldr	r2, [pc, #136]	; (8027654 <GYRO_Average+0x178>)
 80275cc:	6113      	str	r3, [r2, #16]
    mems.gyroscope.z = mems.gyroscope.z / sample;
 80275ce:	4b21      	ldr	r3, [pc, #132]	; (8027654 <GYRO_Average+0x178>)
 80275d0:	695a      	ldr	r2, [r3, #20]
 80275d2:	887b      	ldrh	r3, [r7, #2]
 80275d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80275d8:	4a1e      	ldr	r2, [pc, #120]	; (8027654 <GYRO_Average+0x178>)
 80275da:	6153      	str	r3, [r2, #20]

    // set for calibration
    if (calibrated) {
 80275dc:	4b20      	ldr	r3, [pc, #128]	; (8027660 <GYRO_Average+0x184>)
 80275de:	781b      	ldrb	r3, [r3, #0]
 80275e0:	2b00      	cmp	r3, #0
 80275e2:	d029      	beq.n	8027638 <GYRO_Average+0x15c>
        mems.accelerometer.x -= calibrator.accelerometer.x;
 80275e4:	4b1b      	ldr	r3, [pc, #108]	; (8027654 <GYRO_Average+0x178>)
 80275e6:	681a      	ldr	r2, [r3, #0]
 80275e8:	4b1e      	ldr	r3, [pc, #120]	; (8027664 <GYRO_Average+0x188>)
 80275ea:	681b      	ldr	r3, [r3, #0]
 80275ec:	1ad3      	subs	r3, r2, r3
 80275ee:	4a19      	ldr	r2, [pc, #100]	; (8027654 <GYRO_Average+0x178>)
 80275f0:	6013      	str	r3, [r2, #0]
        mems.accelerometer.y -= calibrator.accelerometer.y;
 80275f2:	4b18      	ldr	r3, [pc, #96]	; (8027654 <GYRO_Average+0x178>)
 80275f4:	685a      	ldr	r2, [r3, #4]
 80275f6:	4b1b      	ldr	r3, [pc, #108]	; (8027664 <GYRO_Average+0x188>)
 80275f8:	685b      	ldr	r3, [r3, #4]
 80275fa:	1ad3      	subs	r3, r2, r3
 80275fc:	4a15      	ldr	r2, [pc, #84]	; (8027654 <GYRO_Average+0x178>)
 80275fe:	6053      	str	r3, [r2, #4]
        mems.accelerometer.z -= calibrator.accelerometer.z;
 8027600:	4b14      	ldr	r3, [pc, #80]	; (8027654 <GYRO_Average+0x178>)
 8027602:	689a      	ldr	r2, [r3, #8]
 8027604:	4b17      	ldr	r3, [pc, #92]	; (8027664 <GYRO_Average+0x188>)
 8027606:	689b      	ldr	r3, [r3, #8]
 8027608:	1ad3      	subs	r3, r2, r3
 802760a:	4a12      	ldr	r2, [pc, #72]	; (8027654 <GYRO_Average+0x178>)
 802760c:	6093      	str	r3, [r2, #8]
        mems.gyroscope.x -= calibrator.gyroscope.x;
 802760e:	4b11      	ldr	r3, [pc, #68]	; (8027654 <GYRO_Average+0x178>)
 8027610:	68da      	ldr	r2, [r3, #12]
 8027612:	4b14      	ldr	r3, [pc, #80]	; (8027664 <GYRO_Average+0x188>)
 8027614:	68db      	ldr	r3, [r3, #12]
 8027616:	1ad3      	subs	r3, r2, r3
 8027618:	4a0e      	ldr	r2, [pc, #56]	; (8027654 <GYRO_Average+0x178>)
 802761a:	60d3      	str	r3, [r2, #12]
        mems.gyroscope.y -= calibrator.gyroscope.y;
 802761c:	4b0d      	ldr	r3, [pc, #52]	; (8027654 <GYRO_Average+0x178>)
 802761e:	691a      	ldr	r2, [r3, #16]
 8027620:	4b10      	ldr	r3, [pc, #64]	; (8027664 <GYRO_Average+0x188>)
 8027622:	691b      	ldr	r3, [r3, #16]
 8027624:	1ad3      	subs	r3, r2, r3
 8027626:	4a0b      	ldr	r2, [pc, #44]	; (8027654 <GYRO_Average+0x178>)
 8027628:	6113      	str	r3, [r2, #16]
        mems.gyroscope.z -= calibrator.gyroscope.z;
 802762a:	4b0a      	ldr	r3, [pc, #40]	; (8027654 <GYRO_Average+0x178>)
 802762c:	695a      	ldr	r2, [r3, #20]
 802762e:	4b0d      	ldr	r3, [pc, #52]	; (8027664 <GYRO_Average+0x188>)
 8027630:	695b      	ldr	r3, [r3, #20]
 8027632:	1ad3      	subs	r3, r2, r3
 8027634:	4a07      	ldr	r2, [pc, #28]	; (8027654 <GYRO_Average+0x178>)
 8027636:	6153      	str	r3, [r2, #20]
    }

    return mems;
 8027638:	687b      	ldr	r3, [r7, #4]
 802763a:	4a06      	ldr	r2, [pc, #24]	; (8027654 <GYRO_Average+0x178>)
 802763c:	461c      	mov	r4, r3
 802763e:	4615      	mov	r5, r2
 8027640:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8027642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8027644:	e895 0003 	ldmia.w	r5, {r0, r1}
 8027648:	e884 0003 	stmia.w	r4, {r0, r1}
}
 802764c:	6878      	ldr	r0, [r7, #4]
 802764e:	3710      	adds	r7, #16
 8027650:	46bd      	mov	sp, r7
 8027652:	bdb0      	pop	{r4, r5, r7, pc}
 8027654:	20000ed0 	.word	0x20000ed0
 8027658:	20000eb4 	.word	0x20000eb4
 802765c:	200084dc 	.word	0x200084dc
 8027660:	20000f00 	.word	0x20000f00
 8027664:	20000ee8 	.word	0x20000ee8

08027668 <GYRO_Decision>:

mems_decision_t GYRO_Decision(uint16_t sample) {
 8027668:	b5b0      	push	{r4, r5, r7, lr}
 802766a:	b088      	sub	sp, #32
 802766c:	af00      	add	r7, sp, #0
 802766e:	61f8      	str	r0, [r7, #28]
 8027670:	460b      	mov	r3, r1
 8027672:	837b      	strh	r3, [r7, #26]
    // get mems data
    mems = GYRO_Average(sample);
 8027674:	4c44      	ldr	r4, [pc, #272]	; (8027788 <GYRO_Decision+0x120>)
 8027676:	463b      	mov	r3, r7
 8027678:	8b7a      	ldrh	r2, [r7, #26]
 802767a:	4611      	mov	r1, r2
 802767c:	4618      	mov	r0, r3
 802767e:	f7ff ff2d 	bl	80274dc <GYRO_Average>
 8027682:	4625      	mov	r5, r4
 8027684:	463c      	mov	r4, r7
 8027686:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8027688:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802768a:	e894 0003 	ldmia.w	r4, {r0, r1}
 802768e:	e885 0003 	stmia.w	r5, {r0, r1}

    // calculate g-force
    decider.crash.value = sqrt(pow(mems.accelerometer.x, 2) +
 8027692:	4b3d      	ldr	r3, [pc, #244]	; (8027788 <GYRO_Decision+0x120>)
 8027694:	681b      	ldr	r3, [r3, #0]
 8027696:	4618      	mov	r0, r3
 8027698:	f7f8 ff7c 	bl	8020594 <__aeabi_i2d>
 802769c:	4603      	mov	r3, r0
 802769e:	460c      	mov	r4, r1
 80276a0:	ed9f 1b37 	vldr	d1, [pc, #220]	; 8027780 <GYRO_Decision+0x118>
 80276a4:	ec44 3b10 	vmov	d0, r3, r4
 80276a8:	f01a fc2e 	bl	8041f08 <pow>
 80276ac:	ec55 4b10 	vmov	r4, r5, d0
            pow(mems.accelerometer.y, 2) +
 80276b0:	4b35      	ldr	r3, [pc, #212]	; (8027788 <GYRO_Decision+0x120>)
 80276b2:	685b      	ldr	r3, [r3, #4]
 80276b4:	4618      	mov	r0, r3
 80276b6:	f7f8 ff6d 	bl	8020594 <__aeabi_i2d>
 80276ba:	4602      	mov	r2, r0
 80276bc:	460b      	mov	r3, r1
 80276be:	ed9f 1b30 	vldr	d1, [pc, #192]	; 8027780 <GYRO_Decision+0x118>
 80276c2:	ec43 2b10 	vmov	d0, r2, r3
 80276c6:	f01a fc1f 	bl	8041f08 <pow>
 80276ca:	ec53 2b10 	vmov	r2, r3, d0
    decider.crash.value = sqrt(pow(mems.accelerometer.x, 2) +
 80276ce:	4620      	mov	r0, r4
 80276d0:	4629      	mov	r1, r5
 80276d2:	f7f8 fe13 	bl	80202fc <__adddf3>
 80276d6:	4603      	mov	r3, r0
 80276d8:	460c      	mov	r4, r1
 80276da:	4625      	mov	r5, r4
 80276dc:	461c      	mov	r4, r3
            pow(mems.accelerometer.z, 2));
 80276de:	4b2a      	ldr	r3, [pc, #168]	; (8027788 <GYRO_Decision+0x120>)
 80276e0:	689b      	ldr	r3, [r3, #8]
 80276e2:	4618      	mov	r0, r3
 80276e4:	f7f8 ff56 	bl	8020594 <__aeabi_i2d>
 80276e8:	4602      	mov	r2, r0
 80276ea:	460b      	mov	r3, r1
 80276ec:	ed9f 1b24 	vldr	d1, [pc, #144]	; 8027780 <GYRO_Decision+0x118>
 80276f0:	ec43 2b10 	vmov	d0, r2, r3
 80276f4:	f01a fc08 	bl	8041f08 <pow>
 80276f8:	ec53 2b10 	vmov	r2, r3, d0
    decider.crash.value = sqrt(pow(mems.accelerometer.x, 2) +
 80276fc:	4620      	mov	r0, r4
 80276fe:	4629      	mov	r1, r5
 8027700:	f7f8 fdfc 	bl	80202fc <__adddf3>
 8027704:	4603      	mov	r3, r0
 8027706:	460c      	mov	r4, r1
 8027708:	ec44 3b17 	vmov	d7, r3, r4
 802770c:	eeb0 0a47 	vmov.f32	s0, s14
 8027710:	eef0 0a67 	vmov.f32	s1, s15
 8027714:	f01a fd68 	bl	80421e8 <sqrt>
 8027718:	ec54 3b10 	vmov	r3, r4, d0
 802771c:	4618      	mov	r0, r3
 802771e:	4621      	mov	r1, r4
 8027720:	f7f9 fa52 	bl	8020bc8 <__aeabi_d2iz>
 8027724:	4602      	mov	r2, r0
 8027726:	4b19      	ldr	r3, [pc, #100]	; (802778c <GYRO_Decision+0x124>)
 8027728:	60da      	str	r2, [r3, #12]
    decider.crash.state = (decider.crash.value > ACCELEROMETER_LIMIT);
 802772a:	4b18      	ldr	r3, [pc, #96]	; (802778c <GYRO_Decision+0x124>)
 802772c:	68db      	ldr	r3, [r3, #12]
 802772e:	461a      	mov	r2, r3
 8027730:	f643 33e5 	movw	r3, #15333	; 0x3be5
 8027734:	429a      	cmp	r2, r3
 8027736:	bf8c      	ite	hi
 8027738:	2301      	movhi	r3, #1
 802773a:	2300      	movls	r3, #0
 802773c:	b2db      	uxtb	r3, r3
 802773e:	461a      	mov	r2, r3
 8027740:	4b12      	ldr	r3, [pc, #72]	; (802778c <GYRO_Decision+0x124>)
 8027742:	721a      	strb	r2, [r3, #8]

    // calculate movement change
    decider.fall.value = (abs(mems.gyroscope.z));
 8027744:	4b10      	ldr	r3, [pc, #64]	; (8027788 <GYRO_Decision+0x120>)
 8027746:	695b      	ldr	r3, [r3, #20]
 8027748:	2b00      	cmp	r3, #0
 802774a:	bfb8      	it	lt
 802774c:	425b      	neglt	r3, r3
 802774e:	461a      	mov	r2, r3
 8027750:	4b0e      	ldr	r3, [pc, #56]	; (802778c <GYRO_Decision+0x124>)
 8027752:	605a      	str	r2, [r3, #4]
    decider.fall.state = decider.fall.value > GYROSCOPE_LIMIT;
 8027754:	4b0d      	ldr	r3, [pc, #52]	; (802778c <GYRO_Decision+0x124>)
 8027756:	685b      	ldr	r3, [r3, #4]
 8027758:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802775c:	bf8c      	ite	hi
 802775e:	2301      	movhi	r3, #1
 8027760:	2300      	movls	r3, #0
 8027762:	b2db      	uxtb	r3, r3
 8027764:	461a      	mov	r2, r3
 8027766:	4b09      	ldr	r3, [pc, #36]	; (802778c <GYRO_Decision+0x124>)
 8027768:	701a      	strb	r2, [r3, #0]

    // debugger
//	Gyro_RawDebugger();

    return decider;
 802776a:	69fb      	ldr	r3, [r7, #28]
 802776c:	4a07      	ldr	r2, [pc, #28]	; (802778c <GYRO_Decision+0x124>)
 802776e:	461c      	mov	r4, r3
 8027770:	4613      	mov	r3, r2
 8027772:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8027774:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8027778:	69f8      	ldr	r0, [r7, #28]
 802777a:	3720      	adds	r7, #32
 802777c:	46bd      	mov	sp, r7
 802777e:	bdb0      	pop	{r4, r5, r7, pc}
 8027780:	00000000 	.word	0x00000000
 8027784:	40000000 	.word	0x40000000
 8027788:	20000ed0 	.word	0x20000ed0
 802778c:	20000f04 	.word	0x20000f04

08027790 <HBAR_ReadStates>:

/* Private variables ----------------------------------------------------------*/
static uint8_t mode;

/* Public functions implementation --------------------------------------------*/
void HBAR_ReadStates(void) {
 8027790:	b590      	push	{r4, r7, lr}
 8027792:	b083      	sub	sp, #12
 8027794:	af00      	add	r7, sp, #0
    // Read all EXTI state
    for (uint8_t i = 0; i < SW_TOTAL_LIST; i++) {
 8027796:	2300      	movs	r3, #0
 8027798:	71fb      	strb	r3, [r7, #7]
 802779a:	e01a      	b.n	80277d2 <HBAR_ReadStates+0x42>
        SW.list[i].state = HAL_GPIO_ReadPin(SW.list[i].port, SW.list[i].pin);
 802779c:	79fb      	ldrb	r3, [r7, #7]
 802779e:	4a11      	ldr	r2, [pc, #68]	; (80277e4 <HBAR_ReadStates+0x54>)
 80277a0:	015b      	lsls	r3, r3, #5
 80277a2:	4413      	add	r3, r2
 80277a4:	3318      	adds	r3, #24
 80277a6:	6818      	ldr	r0, [r3, #0]
 80277a8:	79fb      	ldrb	r3, [r7, #7]
 80277aa:	4a0e      	ldr	r2, [pc, #56]	; (80277e4 <HBAR_ReadStates+0x54>)
 80277ac:	015b      	lsls	r3, r3, #5
 80277ae:	4413      	add	r3, r2
 80277b0:	3314      	adds	r3, #20
 80277b2:	881b      	ldrh	r3, [r3, #0]
 80277b4:	79fc      	ldrb	r4, [r7, #7]
 80277b6:	4619      	mov	r1, r3
 80277b8:	f008 fc20 	bl	802fffc <HAL_GPIO_ReadPin>
 80277bc:	4603      	mov	r3, r0
 80277be:	4619      	mov	r1, r3
 80277c0:	4a08      	ldr	r2, [pc, #32]	; (80277e4 <HBAR_ReadStates+0x54>)
 80277c2:	0163      	lsls	r3, r4, #5
 80277c4:	4413      	add	r3, r2
 80277c6:	331c      	adds	r3, #28
 80277c8:	460a      	mov	r2, r1
 80277ca:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < SW_TOTAL_LIST; i++) {
 80277cc:	79fb      	ldrb	r3, [r7, #7]
 80277ce:	3301      	adds	r3, #1
 80277d0:	71fb      	strb	r3, [r7, #7]
 80277d2:	79fb      	ldrb	r3, [r7, #7]
 80277d4:	2b06      	cmp	r3, #6
 80277d6:	d9e1      	bls.n	802779c <HBAR_ReadStates+0xc>
    }

    // check is reverse mode active
    HBAR_CheckReverse();
 80277d8:	f000 f81c 	bl	8027814 <HBAR_CheckReverse>
}
 80277dc:	bf00      	nop
 80277de:	370c      	adds	r7, #12
 80277e0:	46bd      	mov	sp, r7
 80277e2:	bd90      	pop	{r4, r7, pc}
 80277e4:	20000004 	.word	0x20000004

080277e8 <HBAR_RestoreMode>:

void HBAR_RestoreMode(void) {
 80277e8:	b480      	push	{r7}
 80277ea:	af00      	add	r7, sp, #0
    if (SW.runner.mode.sub.val[SW_M_DRIVE] == SW_M_DRIVE_R) {
 80277ec:	4b07      	ldr	r3, [pc, #28]	; (802780c <HBAR_RestoreMode+0x24>)
 80277ee:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 80277f2:	2b03      	cmp	r3, #3
 80277f4:	d104      	bne.n	8027800 <HBAR_RestoreMode+0x18>
        SW.runner.mode.sub.val[SW_M_DRIVE] = mode;
 80277f6:	4b06      	ldr	r3, [pc, #24]	; (8027810 <HBAR_RestoreMode+0x28>)
 80277f8:	781a      	ldrb	r2, [r3, #0]
 80277fa:	4b04      	ldr	r3, [pc, #16]	; (802780c <HBAR_RestoreMode+0x24>)
 80277fc:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
    }
}
 8027800:	bf00      	nop
 8027802:	46bd      	mov	sp, r7
 8027804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027808:	4770      	bx	lr
 802780a:	bf00      	nop
 802780c:	20000004 	.word	0x20000004
 8027810:	20000f14 	.word	0x20000f14

08027814 <HBAR_CheckReverse>:

void HBAR_CheckReverse(void) {
 8027814:	b480      	push	{r7}
 8027816:	af00      	add	r7, sp, #0
    if (SW.list[SW_K_REVERSE].state) {
 8027818:	4b0e      	ldr	r3, [pc, #56]	; (8027854 <HBAR_CheckReverse+0x40>)
 802781a:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 802781e:	2b00      	cmp	r3, #0
 8027820:	d00d      	beq.n	802783e <HBAR_CheckReverse+0x2a>
        // save previous Drive Mode state
        if (SW.runner.mode.sub.val[SW_M_DRIVE] != SW_M_DRIVE_R) {
 8027822:	4b0c      	ldr	r3, [pc, #48]	; (8027854 <HBAR_CheckReverse+0x40>)
 8027824:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 8027828:	2b03      	cmp	r3, #3
 802782a:	d004      	beq.n	8027836 <HBAR_CheckReverse+0x22>
            mode = SW.runner.mode.sub.val[SW_M_DRIVE];
 802782c:	4b09      	ldr	r3, [pc, #36]	; (8027854 <HBAR_CheckReverse+0x40>)
 802782e:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
 8027832:	4b09      	ldr	r3, [pc, #36]	; (8027858 <HBAR_CheckReverse+0x44>)
 8027834:	701a      	strb	r2, [r3, #0]
        }
        // force state
        SW.runner.mode.sub.val[SW_M_DRIVE] = SW_M_DRIVE_R;
 8027836:	4b07      	ldr	r3, [pc, #28]	; (8027854 <HBAR_CheckReverse+0x40>)
 8027838:	2203      	movs	r2, #3
 802783a:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
    }

    // set hazard
    SW.runner.hazard = SW.list[SW_K_REVERSE].state;
 802783e:	4b05      	ldr	r3, [pc, #20]	; (8027854 <HBAR_CheckReverse+0x40>)
 8027840:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8027844:	4b03      	ldr	r3, [pc, #12]	; (8027854 <HBAR_CheckReverse+0x40>)
 8027846:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
}
 802784a:	bf00      	nop
 802784c:	46bd      	mov	sp, r7
 802784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027852:	4770      	bx	lr
 8027854:	20000004 	.word	0x20000004
 8027858:	20000f14 	.word	0x20000f14

0802785c <HBAR_TimerSelectSet>:

void HBAR_TimerSelectSet(void) {
 802785c:	b590      	push	{r4, r7, lr}
 802785e:	b083      	sub	sp, #12
 8027860:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < SW_TOTAL_LIST; i++) {
 8027862:	2300      	movs	r3, #0
 8027864:	71fb      	strb	r3, [r7, #7]
 8027866:	e06d      	b.n	8027944 <HBAR_TimerSelectSet+0xe8>
        if (i == SW_K_SELECT || i == SW_K_SET) {
 8027868:	79fb      	ldrb	r3, [r7, #7]
 802786a:	2b00      	cmp	r3, #0
 802786c:	d002      	beq.n	8027874 <HBAR_TimerSelectSet+0x18>
 802786e:	79fb      	ldrb	r3, [r7, #7]
 8027870:	2b01      	cmp	r3, #1
 8027872:	d164      	bne.n	802793e <HBAR_TimerSelectSet+0xe2>
            // reset SET timer
            SW.timer[i].time = 0;
 8027874:	79fb      	ldrb	r3, [r7, #7]
 8027876:	4a37      	ldr	r2, [pc, #220]	; (8027954 <HBAR_TimerSelectSet+0xf8>)
 8027878:	331c      	adds	r3, #28
 802787a:	00db      	lsls	r3, r3, #3
 802787c:	4413      	add	r3, r2
 802787e:	2200      	movs	r2, #0
 8027880:	715a      	strb	r2, [r3, #5]

            // next job
            if (SW.list[i].state) {
 8027882:	79fb      	ldrb	r3, [r7, #7]
 8027884:	4a33      	ldr	r2, [pc, #204]	; (8027954 <HBAR_TimerSelectSet+0xf8>)
 8027886:	015b      	lsls	r3, r3, #5
 8027888:	4413      	add	r3, r2
 802788a:	331c      	adds	r3, #28
 802788c:	781b      	ldrb	r3, [r3, #0]
 802788e:	2b00      	cmp	r3, #0
 8027890:	d02a      	beq.n	80278e8 <HBAR_TimerSelectSet+0x8c>
                if (i == SW_K_SELECT || (i == SW_K_SET && SW.runner.listening)) {
 8027892:	79fb      	ldrb	r3, [r7, #7]
 8027894:	2b00      	cmp	r3, #0
 8027896:	d007      	beq.n	80278a8 <HBAR_TimerSelectSet+0x4c>
 8027898:	79fb      	ldrb	r3, [r7, #7]
 802789a:	2b01      	cmp	r3, #1
 802789c:	d11c      	bne.n	80278d8 <HBAR_TimerSelectSet+0x7c>
 802789e:	4b2d      	ldr	r3, [pc, #180]	; (8027954 <HBAR_TimerSelectSet+0xf8>)
 80278a0:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80278a4:	2b00      	cmp	r3, #0
 80278a6:	d017      	beq.n	80278d8 <HBAR_TimerSelectSet+0x7c>
                    // start timer if not running
                    if (!SW.timer[i].running) {
 80278a8:	79fb      	ldrb	r3, [r7, #7]
 80278aa:	4a2a      	ldr	r2, [pc, #168]	; (8027954 <HBAR_TimerSelectSet+0xf8>)
 80278ac:	331c      	adds	r3, #28
 80278ae:	00db      	lsls	r3, r3, #3
 80278b0:	4413      	add	r3, r2
 80278b2:	791b      	ldrb	r3, [r3, #4]
 80278b4:	2b00      	cmp	r3, #0
 80278b6:	d10f      	bne.n	80278d8 <HBAR_TimerSelectSet+0x7c>
                        // set flag
                        SW.timer[i].running = 1;
 80278b8:	79fb      	ldrb	r3, [r7, #7]
 80278ba:	4a26      	ldr	r2, [pc, #152]	; (8027954 <HBAR_TimerSelectSet+0xf8>)
 80278bc:	331c      	adds	r3, #28
 80278be:	00db      	lsls	r3, r3, #3
 80278c0:	4413      	add	r3, r2
 80278c2:	2201      	movs	r2, #1
 80278c4:	711a      	strb	r2, [r3, #4]
                        // start timer for SET
                        SW.timer[i].start = _GetTickMS();
 80278c6:	79fc      	ldrb	r4, [r7, #7]
 80278c8:	f017 ff85 	bl	803f7d6 <_GetTickMS>
 80278cc:	4601      	mov	r1, r0
 80278ce:	4a21      	ldr	r2, [pc, #132]	; (8027954 <HBAR_TimerSelectSet+0xf8>)
 80278d0:	f104 031c 	add.w	r3, r4, #28
 80278d4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
                    }
                }
                // reverse it
                SW.list[i].state = 0;
 80278d8:	79fb      	ldrb	r3, [r7, #7]
 80278da:	4a1e      	ldr	r2, [pc, #120]	; (8027954 <HBAR_TimerSelectSet+0xf8>)
 80278dc:	015b      	lsls	r3, r3, #5
 80278de:	4413      	add	r3, r2
 80278e0:	331c      	adds	r3, #28
 80278e2:	2200      	movs	r2, #0
 80278e4:	701a      	strb	r2, [r3, #0]
 80278e6:	e02a      	b.n	802793e <HBAR_TimerSelectSet+0xe2>
            } else {
                // stop timer if running
                if (SW.timer[i].running) {
 80278e8:	79fb      	ldrb	r3, [r7, #7]
 80278ea:	4a1a      	ldr	r2, [pc, #104]	; (8027954 <HBAR_TimerSelectSet+0xf8>)
 80278ec:	331c      	adds	r3, #28
 80278ee:	00db      	lsls	r3, r3, #3
 80278f0:	4413      	add	r3, r2
 80278f2:	791b      	ldrb	r3, [r3, #4]
 80278f4:	2b00      	cmp	r3, #0
 80278f6:	d022      	beq.n	802793e <HBAR_TimerSelectSet+0xe2>
                    // set flag
                    SW.timer[i].running = 0;
 80278f8:	79fb      	ldrb	r3, [r7, #7]
 80278fa:	4a16      	ldr	r2, [pc, #88]	; (8027954 <HBAR_TimerSelectSet+0xf8>)
 80278fc:	331c      	adds	r3, #28
 80278fe:	00db      	lsls	r3, r3, #3
 8027900:	4413      	add	r3, r2
 8027902:	2200      	movs	r2, #0
 8027904:	711a      	strb	r2, [r3, #4]
                    // stop SET
                    SW.timer[i].time = (_GetTickMS() - SW.timer[i].start) / 1000;
 8027906:	f017 ff66 	bl	803f7d6 <_GetTickMS>
 802790a:	4601      	mov	r1, r0
 802790c:	79fb      	ldrb	r3, [r7, #7]
 802790e:	4a11      	ldr	r2, [pc, #68]	; (8027954 <HBAR_TimerSelectSet+0xf8>)
 8027910:	331c      	adds	r3, #28
 8027912:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8027916:	1acb      	subs	r3, r1, r3
 8027918:	4a0f      	ldr	r2, [pc, #60]	; (8027958 <HBAR_TimerSelectSet+0xfc>)
 802791a:	fba2 2303 	umull	r2, r3, r2, r3
 802791e:	099a      	lsrs	r2, r3, #6
 8027920:	79fb      	ldrb	r3, [r7, #7]
 8027922:	b2d1      	uxtb	r1, r2
 8027924:	4a0b      	ldr	r2, [pc, #44]	; (8027954 <HBAR_TimerSelectSet+0xf8>)
 8027926:	331c      	adds	r3, #28
 8027928:	00db      	lsls	r3, r3, #3
 802792a:	4413      	add	r3, r2
 802792c:	460a      	mov	r2, r1
 802792e:	715a      	strb	r2, [r3, #5]
                    // reverse it
                    SW.list[i].state = 1;
 8027930:	79fb      	ldrb	r3, [r7, #7]
 8027932:	4a08      	ldr	r2, [pc, #32]	; (8027954 <HBAR_TimerSelectSet+0xf8>)
 8027934:	015b      	lsls	r3, r3, #5
 8027936:	4413      	add	r3, r2
 8027938:	331c      	adds	r3, #28
 802793a:	2201      	movs	r2, #1
 802793c:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < SW_TOTAL_LIST; i++) {
 802793e:	79fb      	ldrb	r3, [r7, #7]
 8027940:	3301      	adds	r3, #1
 8027942:	71fb      	strb	r3, [r7, #7]
 8027944:	79fb      	ldrb	r3, [r7, #7]
 8027946:	2b06      	cmp	r3, #6
 8027948:	d98e      	bls.n	8027868 <HBAR_TimerSelectSet+0xc>
                }
            }
        }
    }
}
 802794a:	bf00      	nop
 802794c:	370c      	adds	r7, #12
 802794e:	46bd      	mov	sp, r7
 8027950:	bd90      	pop	{r4, r7, pc}
 8027952:	bf00      	nop
 8027954:	20000004 	.word	0x20000004
 8027958:	10624dd3 	.word	0x10624dd3

0802795c <HBAR_RunSelect>:

void HBAR_RunSelect(void) {
 802795c:	b480      	push	{r7}
 802795e:	af00      	add	r7, sp, #0
    if (SW.runner.listening) {
 8027960:	4b0f      	ldr	r3, [pc, #60]	; (80279a0 <HBAR_RunSelect+0x44>)
 8027962:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8027966:	2b00      	cmp	r3, #0
 8027968:	d011      	beq.n	802798e <HBAR_RunSelect+0x32>
        // change mode position
        if (SW.runner.mode.val == SW_M_MAX) {
 802796a:	4b0d      	ldr	r3, [pc, #52]	; (80279a0 <HBAR_RunSelect+0x44>)
 802796c:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8027970:	2b02      	cmp	r3, #2
 8027972:	d104      	bne.n	802797e <HBAR_RunSelect+0x22>
            SW.runner.mode.val = 0;
 8027974:	4b0a      	ldr	r3, [pc, #40]	; (80279a0 <HBAR_RunSelect+0x44>)
 8027976:	2200      	movs	r2, #0
 8027978:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
 802797c:	e007      	b.n	802798e <HBAR_RunSelect+0x32>
        } else {
            SW.runner.mode.val++;
 802797e:	4b08      	ldr	r3, [pc, #32]	; (80279a0 <HBAR_RunSelect+0x44>)
 8027980:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8027984:	3301      	adds	r3, #1
 8027986:	b2da      	uxtb	r2, r3
 8027988:	4b05      	ldr	r3, [pc, #20]	; (80279a0 <HBAR_RunSelect+0x44>)
 802798a:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
        }
    }
    // Listening on option
    SW.runner.listening = 1;
 802798e:	4b04      	ldr	r3, [pc, #16]	; (80279a0 <HBAR_RunSelect+0x44>)
 8027990:	2201      	movs	r2, #1
 8027992:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 8027996:	bf00      	nop
 8027998:	46bd      	mov	sp, r7
 802799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802799e:	4770      	bx	lr
 80279a0:	20000004 	.word	0x20000004

080279a4 <HBAR_RunSet>:

void HBAR_RunSet(void) {
 80279a4:	b480      	push	{r7}
 80279a6:	b083      	sub	sp, #12
 80279a8:	af00      	add	r7, sp, #0
    SW_MODE sMode = SW.runner.mode.val;
 80279aa:	4b23      	ldr	r3, [pc, #140]	; (8027a38 <HBAR_RunSet+0x94>)
 80279ac:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 80279b0:	71fb      	strb	r3, [r7, #7]

    if (SW.runner.listening ||
 80279b2:	4b21      	ldr	r3, [pc, #132]	; (8027a38 <HBAR_RunSet+0x94>)
 80279b4:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80279b8:	2b00      	cmp	r3, #0
 80279ba:	d107      	bne.n	80279cc <HBAR_RunSet+0x28>
            (SW.timer[SW_K_SET].time >= 3 && sMode == SW_M_TRIP)) {
 80279bc:	4b1e      	ldr	r3, [pc, #120]	; (8027a38 <HBAR_RunSet+0x94>)
 80279be:	f893 30ed 	ldrb.w	r3, [r3, #237]	; 0xed
    if (SW.runner.listening ||
 80279c2:	2b02      	cmp	r3, #2
 80279c4:	d932      	bls.n	8027a2c <HBAR_RunSet+0x88>
            (SW.timer[SW_K_SET].time >= 3 && sMode == SW_M_TRIP)) {
 80279c6:	79fb      	ldrb	r3, [r7, #7]
 80279c8:	2b01      	cmp	r3, #1
 80279ca:	d12f      	bne.n	8027a2c <HBAR_RunSet+0x88>
        // handle reset only if push more than n sec, and in trip mode
        if (!SW.runner.listening) {
 80279cc:	4b1a      	ldr	r3, [pc, #104]	; (8027a38 <HBAR_RunSet+0x94>)
 80279ce:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80279d2:	2b00      	cmp	r3, #0
 80279d4:	d10b      	bne.n	80279ee <HBAR_RunSet+0x4a>
            // reset value
            SW.runner.mode.sub.trip[SW.runner.mode.sub.val[sMode]] = 0;
 80279d6:	79fb      	ldrb	r3, [r7, #7]
 80279d8:	4a17      	ldr	r2, [pc, #92]	; (8027a38 <HBAR_RunSet+0x94>)
 80279da:	4413      	add	r3, r2
 80279dc:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 80279e0:	4a15      	ldr	r2, [pc, #84]	; (8027a38 <HBAR_RunSet+0x94>)
 80279e2:	333e      	adds	r3, #62	; 0x3e
 80279e4:	009b      	lsls	r3, r3, #2
 80279e6:	4413      	add	r3, r2
 80279e8:	2200      	movs	r2, #0
 80279ea:	609a      	str	r2, [r3, #8]
            } else {
                SW.runner.mode.sub.val[sMode]++;
            }
        }
    }
}
 80279ec:	e01e      	b.n	8027a2c <HBAR_RunSet+0x88>
            if (SW.runner.mode.sub.val[sMode] == SW.runner.mode.sub.max[sMode]) {
 80279ee:	79fb      	ldrb	r3, [r7, #7]
 80279f0:	4a11      	ldr	r2, [pc, #68]	; (8027a38 <HBAR_RunSet+0x94>)
 80279f2:	4413      	add	r3, r2
 80279f4:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
 80279f8:	79fb      	ldrb	r3, [r7, #7]
 80279fa:	490f      	ldr	r1, [pc, #60]	; (8027a38 <HBAR_RunSet+0x94>)
 80279fc:	440b      	add	r3, r1
 80279fe:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8027a02:	429a      	cmp	r2, r3
 8027a04:	d106      	bne.n	8027a14 <HBAR_RunSet+0x70>
                SW.runner.mode.sub.val[sMode] = 0;
 8027a06:	79fb      	ldrb	r3, [r7, #7]
 8027a08:	4a0b      	ldr	r2, [pc, #44]	; (8027a38 <HBAR_RunSet+0x94>)
 8027a0a:	4413      	add	r3, r2
 8027a0c:	2200      	movs	r2, #0
 8027a0e:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
}
 8027a12:	e00b      	b.n	8027a2c <HBAR_RunSet+0x88>
                SW.runner.mode.sub.val[sMode]++;
 8027a14:	79fb      	ldrb	r3, [r7, #7]
 8027a16:	4a08      	ldr	r2, [pc, #32]	; (8027a38 <HBAR_RunSet+0x94>)
 8027a18:	441a      	add	r2, r3
 8027a1a:	f892 20f8 	ldrb.w	r2, [r2, #248]	; 0xf8
 8027a1e:	3201      	adds	r2, #1
 8027a20:	b2d1      	uxtb	r1, r2
 8027a22:	4a05      	ldr	r2, [pc, #20]	; (8027a38 <HBAR_RunSet+0x94>)
 8027a24:	4413      	add	r3, r2
 8027a26:	460a      	mov	r2, r1
 8027a28:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
}
 8027a2c:	bf00      	nop
 8027a2e:	370c      	adds	r7, #12
 8027a30:	46bd      	mov	sp, r7
 8027a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027a36:	4770      	bx	lr
 8027a38:	20000004 	.word	0x20000004

08027a3c <HBAR_AccumulateSubTrip>:

void HBAR_AccumulateSubTrip(void) {
 8027a3c:	b480      	push	{r7}
 8027a3e:	b083      	sub	sp, #12
 8027a40:	af00      	add	r7, sp, #0
    SW_MODE_TRIP mTrip = SW.runner.mode.sub.val[SW_M_TRIP];
 8027a42:	4b14      	ldr	r3, [pc, #80]	; (8027a94 <HBAR_AccumulateSubTrip+0x58>)
 8027a44:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 8027a48:	71fb      	strb	r3, [r7, #7]

    if (SW.runner.mode.sub.trip[mTrip] >= VCU_ODOMETER_MAX) {
 8027a4a:	79fb      	ldrb	r3, [r7, #7]
 8027a4c:	4a11      	ldr	r2, [pc, #68]	; (8027a94 <HBAR_AccumulateSubTrip+0x58>)
 8027a4e:	333e      	adds	r3, #62	; 0x3e
 8027a50:	009b      	lsls	r3, r3, #2
 8027a52:	4413      	add	r3, r2
 8027a54:	689b      	ldr	r3, [r3, #8]
 8027a56:	4a10      	ldr	r2, [pc, #64]	; (8027a98 <HBAR_AccumulateSubTrip+0x5c>)
 8027a58:	4293      	cmp	r3, r2
 8027a5a:	d907      	bls.n	8027a6c <HBAR_AccumulateSubTrip+0x30>
        SW.runner.mode.sub.trip[mTrip] = 0;
 8027a5c:	79fb      	ldrb	r3, [r7, #7]
 8027a5e:	4a0d      	ldr	r2, [pc, #52]	; (8027a94 <HBAR_AccumulateSubTrip+0x58>)
 8027a60:	333e      	adds	r3, #62	; 0x3e
 8027a62:	009b      	lsls	r3, r3, #2
 8027a64:	4413      	add	r3, r2
 8027a66:	2200      	movs	r2, #0
 8027a68:	609a      	str	r2, [r3, #8]
    } else {
        SW.runner.mode.sub.trip[mTrip]++;
    }
}
 8027a6a:	e00d      	b.n	8027a88 <HBAR_AccumulateSubTrip+0x4c>
        SW.runner.mode.sub.trip[mTrip]++;
 8027a6c:	79fa      	ldrb	r2, [r7, #7]
 8027a6e:	4909      	ldr	r1, [pc, #36]	; (8027a94 <HBAR_AccumulateSubTrip+0x58>)
 8027a70:	f102 033e 	add.w	r3, r2, #62	; 0x3e
 8027a74:	009b      	lsls	r3, r3, #2
 8027a76:	440b      	add	r3, r1
 8027a78:	689b      	ldr	r3, [r3, #8]
 8027a7a:	1c59      	adds	r1, r3, #1
 8027a7c:	4805      	ldr	r0, [pc, #20]	; (8027a94 <HBAR_AccumulateSubTrip+0x58>)
 8027a7e:	f102 033e 	add.w	r3, r2, #62	; 0x3e
 8027a82:	009b      	lsls	r3, r3, #2
 8027a84:	4403      	add	r3, r0
 8027a86:	6099      	str	r1, [r3, #8]
}
 8027a88:	bf00      	nop
 8027a8a:	370c      	adds	r7, #12
 8027a8c:	46bd      	mov	sp, r7
 8027a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027a92:	4770      	bx	lr
 8027a94:	20000004 	.word	0x20000004
 8027a98:	0001869e 	.word	0x0001869e

08027a9c <HBAR_SeinController>:

sein_state_t HBAR_SeinController(sw_t *sw) {
 8027a9c:	b580      	push	{r7, lr}
 8027a9e:	b084      	sub	sp, #16
 8027aa0:	af00      	add	r7, sp, #0
 8027aa2:	6078      	str	r0, [r7, #4]
    static sein_state_t sein = {
            .left = 0,
            .right = 0
    };

    if ((_GetTickMS() - tickSein) >= 500) {
 8027aa4:	f017 fe97 	bl	803f7d6 <_GetTickMS>
 8027aa8:	4602      	mov	r2, r0
 8027aaa:	4b34      	ldr	r3, [pc, #208]	; (8027b7c <HBAR_SeinController+0xe0>)
 8027aac:	681b      	ldr	r3, [r3, #0]
 8027aae:	1ad3      	subs	r3, r2, r3
 8027ab0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8027ab4:	d354      	bcc.n	8027b60 <HBAR_SeinController+0xc4>
        if (sw->runner.hazard) {
 8027ab6:	687b      	ldr	r3, [r7, #4]
 8027ab8:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
 8027abc:	2b00      	cmp	r3, #0
 8027abe:	d019      	beq.n	8027af4 <HBAR_SeinController+0x58>
            // hazard
            tickSein = _GetTickMS();
 8027ac0:	f017 fe89 	bl	803f7d6 <_GetTickMS>
 8027ac4:	4602      	mov	r2, r0
 8027ac6:	4b2d      	ldr	r3, [pc, #180]	; (8027b7c <HBAR_SeinController+0xe0>)
 8027ac8:	601a      	str	r2, [r3, #0]
            sein.left = !sein.left;
 8027aca:	4b2d      	ldr	r3, [pc, #180]	; (8027b80 <HBAR_SeinController+0xe4>)
 8027acc:	781b      	ldrb	r3, [r3, #0]
 8027ace:	2b00      	cmp	r3, #0
 8027ad0:	bf0c      	ite	eq
 8027ad2:	2301      	moveq	r3, #1
 8027ad4:	2300      	movne	r3, #0
 8027ad6:	b2db      	uxtb	r3, r3
 8027ad8:	461a      	mov	r2, r3
 8027ada:	4b29      	ldr	r3, [pc, #164]	; (8027b80 <HBAR_SeinController+0xe4>)
 8027adc:	701a      	strb	r2, [r3, #0]
            sein.right = !sein.right;
 8027ade:	4b28      	ldr	r3, [pc, #160]	; (8027b80 <HBAR_SeinController+0xe4>)
 8027ae0:	785b      	ldrb	r3, [r3, #1]
 8027ae2:	2b00      	cmp	r3, #0
 8027ae4:	bf0c      	ite	eq
 8027ae6:	2301      	moveq	r3, #1
 8027ae8:	2300      	movne	r3, #0
 8027aea:	b2db      	uxtb	r3, r3
 8027aec:	461a      	mov	r2, r3
 8027aee:	4b24      	ldr	r3, [pc, #144]	; (8027b80 <HBAR_SeinController+0xe4>)
 8027af0:	705a      	strb	r2, [r3, #1]
 8027af2:	e035      	b.n	8027b60 <HBAR_SeinController+0xc4>
        } else if (sw->list[SW_K_SEIN_LEFT].state) {
 8027af4:	687b      	ldr	r3, [r7, #4]
 8027af6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8027afa:	2b00      	cmp	r3, #0
 8027afc:	d012      	beq.n	8027b24 <HBAR_SeinController+0x88>
            // left sein
            tickSein = _GetTickMS();
 8027afe:	f017 fe6a 	bl	803f7d6 <_GetTickMS>
 8027b02:	4602      	mov	r2, r0
 8027b04:	4b1d      	ldr	r3, [pc, #116]	; (8027b7c <HBAR_SeinController+0xe0>)
 8027b06:	601a      	str	r2, [r3, #0]
            sein.left = !sein.left;
 8027b08:	4b1d      	ldr	r3, [pc, #116]	; (8027b80 <HBAR_SeinController+0xe4>)
 8027b0a:	781b      	ldrb	r3, [r3, #0]
 8027b0c:	2b00      	cmp	r3, #0
 8027b0e:	bf0c      	ite	eq
 8027b10:	2301      	moveq	r3, #1
 8027b12:	2300      	movne	r3, #0
 8027b14:	b2db      	uxtb	r3, r3
 8027b16:	461a      	mov	r2, r3
 8027b18:	4b19      	ldr	r3, [pc, #100]	; (8027b80 <HBAR_SeinController+0xe4>)
 8027b1a:	701a      	strb	r2, [r3, #0]
            sein.right = 0;
 8027b1c:	4b18      	ldr	r3, [pc, #96]	; (8027b80 <HBAR_SeinController+0xe4>)
 8027b1e:	2200      	movs	r2, #0
 8027b20:	705a      	strb	r2, [r3, #1]
 8027b22:	e01d      	b.n	8027b60 <HBAR_SeinController+0xc4>
        } else if (sw->list[SW_K_SEIN_RIGHT].state) {
 8027b24:	687b      	ldr	r3, [r7, #4]
 8027b26:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8027b2a:	2b00      	cmp	r3, #0
 8027b2c:	d012      	beq.n	8027b54 <HBAR_SeinController+0xb8>
            // right sein
            tickSein = _GetTickMS();
 8027b2e:	f017 fe52 	bl	803f7d6 <_GetTickMS>
 8027b32:	4602      	mov	r2, r0
 8027b34:	4b11      	ldr	r3, [pc, #68]	; (8027b7c <HBAR_SeinController+0xe0>)
 8027b36:	601a      	str	r2, [r3, #0]
            sein.left = 0;
 8027b38:	4b11      	ldr	r3, [pc, #68]	; (8027b80 <HBAR_SeinController+0xe4>)
 8027b3a:	2200      	movs	r2, #0
 8027b3c:	701a      	strb	r2, [r3, #0]
            sein.right = !sein.right;
 8027b3e:	4b10      	ldr	r3, [pc, #64]	; (8027b80 <HBAR_SeinController+0xe4>)
 8027b40:	785b      	ldrb	r3, [r3, #1]
 8027b42:	2b00      	cmp	r3, #0
 8027b44:	bf0c      	ite	eq
 8027b46:	2301      	moveq	r3, #1
 8027b48:	2300      	movne	r3, #0
 8027b4a:	b2db      	uxtb	r3, r3
 8027b4c:	461a      	mov	r2, r3
 8027b4e:	4b0c      	ldr	r3, [pc, #48]	; (8027b80 <HBAR_SeinController+0xe4>)
 8027b50:	705a      	strb	r2, [r3, #1]
 8027b52:	e005      	b.n	8027b60 <HBAR_SeinController+0xc4>
        } else {
            sein.left = 0;
 8027b54:	4b0a      	ldr	r3, [pc, #40]	; (8027b80 <HBAR_SeinController+0xe4>)
 8027b56:	2200      	movs	r2, #0
 8027b58:	701a      	strb	r2, [r3, #0]
            sein.right = 0;
 8027b5a:	4b09      	ldr	r3, [pc, #36]	; (8027b80 <HBAR_SeinController+0xe4>)
 8027b5c:	2200      	movs	r2, #0
 8027b5e:	705a      	strb	r2, [r3, #1]
        }
    }

    return sein;
 8027b60:	4b07      	ldr	r3, [pc, #28]	; (8027b80 <HBAR_SeinController+0xe4>)
 8027b62:	881b      	ldrh	r3, [r3, #0]
 8027b64:	81bb      	strh	r3, [r7, #12]
 8027b66:	2300      	movs	r3, #0
 8027b68:	7b3a      	ldrb	r2, [r7, #12]
 8027b6a:	f362 0307 	bfi	r3, r2, #0, #8
 8027b6e:	7b7a      	ldrb	r2, [r7, #13]
 8027b70:	f362 230f 	bfi	r3, r2, #8, #8
}
 8027b74:	4618      	mov	r0, r3
 8027b76:	3710      	adds	r7, #16
 8027b78:	46bd      	mov	sp, r7
 8027b7a:	bd80      	pop	{r7, pc}
 8027b7c:	20000f18 	.word	0x20000f18
 8027b80:	20000f1c 	.word	0x20000f1c

08027b84 <HBAR_ModeController>:

uint8_t HBAR_ModeController(sw_runner_t *runner) {
 8027b84:	b580      	push	{r7, lr}
 8027b86:	b082      	sub	sp, #8
 8027b88:	af00      	add	r7, sp, #0
 8027b8a:	6078      	str	r0, [r7, #4]
    static TickType_t tick, tickPeriod;
    static uint8_t iHide = 0;
    static int8_t iName = -1, iValue = -1;

    // MODE Show/Hide Manipulator
    if (runner->listening) {
 8027b8c:	687b      	ldr	r3, [r7, #4]
 8027b8e:	781b      	ldrb	r3, [r3, #0]
 8027b90:	2b00      	cmp	r3, #0
 8027b92:	d05f      	beq.n	8027c54 <HBAR_ModeController+0xd0>
        // if mode same
        if (iName != runner->mode.val) {
 8027b94:	4b34      	ldr	r3, [pc, #208]	; (8027c68 <HBAR_ModeController+0xe4>)
 8027b96:	f993 3000 	ldrsb.w	r3, [r3]
 8027b9a:	461a      	mov	r2, r3
 8027b9c:	687b      	ldr	r3, [r7, #4]
 8027b9e:	791b      	ldrb	r3, [r3, #4]
 8027ba0:	429a      	cmp	r2, r3
 8027ba2:	d00a      	beq.n	8027bba <HBAR_ModeController+0x36>
            iName = runner->mode.val;
 8027ba4:	687b      	ldr	r3, [r7, #4]
 8027ba6:	791b      	ldrb	r3, [r3, #4]
 8027ba8:	b25a      	sxtb	r2, r3
 8027baa:	4b2f      	ldr	r3, [pc, #188]	; (8027c68 <HBAR_ModeController+0xe4>)
 8027bac:	701a      	strb	r2, [r3, #0]
            // reset period tick
            tickPeriod = _GetTickMS();
 8027bae:	f017 fe12 	bl	803f7d6 <_GetTickMS>
 8027bb2:	4602      	mov	r2, r0
 8027bb4:	4b2d      	ldr	r3, [pc, #180]	; (8027c6c <HBAR_ModeController+0xe8>)
 8027bb6:	601a      	str	r2, [r3, #0]
 8027bb8:	e019      	b.n	8027bee <HBAR_ModeController+0x6a>

        } else if (iValue != runner->mode.sub.val[runner->mode.val]) {
 8027bba:	4b2d      	ldr	r3, [pc, #180]	; (8027c70 <HBAR_ModeController+0xec>)
 8027bbc:	f993 3000 	ldrsb.w	r3, [r3]
 8027bc0:	461a      	mov	r2, r3
 8027bc2:	687b      	ldr	r3, [r7, #4]
 8027bc4:	791b      	ldrb	r3, [r3, #4]
 8027bc6:	4619      	mov	r1, r3
 8027bc8:	687b      	ldr	r3, [r7, #4]
 8027bca:	440b      	add	r3, r1
 8027bcc:	7a1b      	ldrb	r3, [r3, #8]
 8027bce:	429a      	cmp	r2, r3
 8027bd0:	d00d      	beq.n	8027bee <HBAR_ModeController+0x6a>
            iValue = runner->mode.sub.val[runner->mode.val];
 8027bd2:	687b      	ldr	r3, [r7, #4]
 8027bd4:	791b      	ldrb	r3, [r3, #4]
 8027bd6:	461a      	mov	r2, r3
 8027bd8:	687b      	ldr	r3, [r7, #4]
 8027bda:	4413      	add	r3, r2
 8027bdc:	7a1b      	ldrb	r3, [r3, #8]
 8027bde:	b25a      	sxtb	r2, r3
 8027be0:	4b23      	ldr	r3, [pc, #140]	; (8027c70 <HBAR_ModeController+0xec>)
 8027be2:	701a      	strb	r2, [r3, #0]
            // reset period tick
            tickPeriod = _GetTickMS();
 8027be4:	f017 fdf7 	bl	803f7d6 <_GetTickMS>
 8027be8:	4602      	mov	r2, r0
 8027bea:	4b20      	ldr	r3, [pc, #128]	; (8027c6c <HBAR_ModeController+0xe8>)
 8027bec:	601a      	str	r2, [r3, #0]
        }

        if ((_GetTickMS() - tickPeriod) >= 5000 ||
 8027bee:	f017 fdf2 	bl	803f7d6 <_GetTickMS>
 8027bf2:	4602      	mov	r2, r0
 8027bf4:	4b1d      	ldr	r3, [pc, #116]	; (8027c6c <HBAR_ModeController+0xe8>)
 8027bf6:	681b      	ldr	r3, [r3, #0]
 8027bf8:	1ad3      	subs	r3, r2, r3
 8027bfa:	f241 3287 	movw	r2, #4999	; 0x1387
 8027bfe:	4293      	cmp	r3, r2
 8027c00:	d803      	bhi.n	8027c0a <HBAR_ModeController+0x86>
                (runner->mode.sub.val[SW_M_DRIVE] == SW_M_DRIVE_R)) {
 8027c02:	687b      	ldr	r3, [r7, #4]
 8027c04:	7a1b      	ldrb	r3, [r3, #8]
        if ((_GetTickMS() - tickPeriod) >= 5000 ||
 8027c06:	2b03      	cmp	r3, #3
 8027c08:	d10c      	bne.n	8027c24 <HBAR_ModeController+0xa0>
            // stop listening
            runner->listening = 0;
 8027c0a:	687b      	ldr	r3, [r7, #4]
 8027c0c:	2200      	movs	r2, #0
 8027c0e:	701a      	strb	r2, [r3, #0]
            iHide = 0;
 8027c10:	4b18      	ldr	r3, [pc, #96]	; (8027c74 <HBAR_ModeController+0xf0>)
 8027c12:	2200      	movs	r2, #0
 8027c14:	701a      	strb	r2, [r3, #0]
            iName = -1;
 8027c16:	4b14      	ldr	r3, [pc, #80]	; (8027c68 <HBAR_ModeController+0xe4>)
 8027c18:	22ff      	movs	r2, #255	; 0xff
 8027c1a:	701a      	strb	r2, [r3, #0]
            iValue = -1;
 8027c1c:	4b14      	ldr	r3, [pc, #80]	; (8027c70 <HBAR_ModeController+0xec>)
 8027c1e:	22ff      	movs	r2, #255	; 0xff
 8027c20:	701a      	strb	r2, [r3, #0]
 8027c22:	e01a      	b.n	8027c5a <HBAR_ModeController+0xd6>
        } else {
            // blink
            if ((_GetTickMS() - tick) >= 250) {
 8027c24:	f017 fdd7 	bl	803f7d6 <_GetTickMS>
 8027c28:	4602      	mov	r2, r0
 8027c2a:	4b13      	ldr	r3, [pc, #76]	; (8027c78 <HBAR_ModeController+0xf4>)
 8027c2c:	681b      	ldr	r3, [r3, #0]
 8027c2e:	1ad3      	subs	r3, r2, r3
 8027c30:	2bf9      	cmp	r3, #249	; 0xf9
 8027c32:	d912      	bls.n	8027c5a <HBAR_ModeController+0xd6>
                tick = _GetTickMS();
 8027c34:	f017 fdcf 	bl	803f7d6 <_GetTickMS>
 8027c38:	4602      	mov	r2, r0
 8027c3a:	4b0f      	ldr	r3, [pc, #60]	; (8027c78 <HBAR_ModeController+0xf4>)
 8027c3c:	601a      	str	r2, [r3, #0]
                iHide = !iHide;
 8027c3e:	4b0d      	ldr	r3, [pc, #52]	; (8027c74 <HBAR_ModeController+0xf0>)
 8027c40:	781b      	ldrb	r3, [r3, #0]
 8027c42:	2b00      	cmp	r3, #0
 8027c44:	bf0c      	ite	eq
 8027c46:	2301      	moveq	r3, #1
 8027c48:	2300      	movne	r3, #0
 8027c4a:	b2db      	uxtb	r3, r3
 8027c4c:	461a      	mov	r2, r3
 8027c4e:	4b09      	ldr	r3, [pc, #36]	; (8027c74 <HBAR_ModeController+0xf0>)
 8027c50:	701a      	strb	r2, [r3, #0]
 8027c52:	e002      	b.n	8027c5a <HBAR_ModeController+0xd6>
            }
        }
    } else {
        iHide = 0;
 8027c54:	4b07      	ldr	r3, [pc, #28]	; (8027c74 <HBAR_ModeController+0xf0>)
 8027c56:	2200      	movs	r2, #0
 8027c58:	701a      	strb	r2, [r3, #0]
    }

    return iHide;
 8027c5a:	4b06      	ldr	r3, [pc, #24]	; (8027c74 <HBAR_ModeController+0xf0>)
 8027c5c:	781b      	ldrb	r3, [r3, #0]
}
 8027c5e:	4618      	mov	r0, r3
 8027c60:	3708      	adds	r7, #8
 8027c62:	46bd      	mov	sp, r7
 8027c64:	bd80      	pop	{r7, pc}
 8027c66:	bf00      	nop
 8027c68:	2000010c 	.word	0x2000010c
 8027c6c:	20000f20 	.word	0x20000f20
 8027c70:	2000010d 	.word	0x2000010d
 8027c74:	20000f24 	.word	0x20000f24
 8027c78:	20000f28 	.word	0x20000f28

08027c7c <KLESS_Init>:
/* Private functions declaration ---------------------------------------------*/
static void lock(void);
static void unlock(void);

/* Public functions implementation --------------------------------------------*/
void KLESS_Init(void) {
 8027c7c:	b580      	push	{r7, lr}
 8027c7e:	b082      	sub	sp, #8
 8027c80:	af00      	add	r7, sp, #0
    nrf24l01_config *config = &(KLESS.config);
 8027c82:	4b24      	ldr	r3, [pc, #144]	; (8027d14 <KLESS_Init+0x98>)
 8027c84:	607b      	str	r3, [r7, #4]

    // use VCU_ID as address
    memcpy(KLESS.tx.address, &(VCU.d.unit_id), sizeof(VCU.d.unit_id));
 8027c86:	4b24      	ldr	r3, [pc, #144]	; (8027d18 <KLESS_Init+0x9c>)
 8027c88:	681b      	ldr	r3, [r3, #0]
 8027c8a:	4a22      	ldr	r2, [pc, #136]	; (8027d14 <KLESS_Init+0x98>)
 8027c8c:	6353      	str	r3, [r2, #52]	; 0x34
    memcpy(KLESS.rx.address, &(VCU.d.unit_id), sizeof(VCU.d.unit_id));
 8027c8e:	4b22      	ldr	r3, [pc, #136]	; (8027d18 <KLESS_Init+0x9c>)
 8027c90:	681b      	ldr	r3, [r3, #0]
 8027c92:	4a20      	ldr	r2, [pc, #128]	; (8027d14 <KLESS_Init+0x98>)
 8027c94:	f8c2 304e 	str.w	r3, [r2, #78]	; 0x4e

    // set configuration
    config->tx_address = KLESS.tx.address;
 8027c98:	687b      	ldr	r3, [r7, #4]
 8027c9a:	4a20      	ldr	r2, [pc, #128]	; (8027d1c <KLESS_Init+0xa0>)
 8027c9c:	60da      	str	r2, [r3, #12]
    config->rx_address = KLESS.rx.address;
 8027c9e:	687b      	ldr	r3, [r7, #4]
 8027ca0:	4a1f      	ldr	r2, [pc, #124]	; (8027d20 <KLESS_Init+0xa4>)
 8027ca2:	609a      	str	r2, [r3, #8]
    config->rx_buffer = KLESS.rx.payload;
 8027ca4:	687b      	ldr	r3, [r7, #4]
 8027ca6:	4a1f      	ldr	r2, [pc, #124]	; (8027d24 <KLESS_Init+0xa8>)
 8027ca8:	611a      	str	r2, [r3, #16]

    config->data_rate = NRF_DATA_RATE_250KBPS;
 8027caa:	687b      	ldr	r3, [r7, #4]
 8027cac:	2201      	movs	r2, #1
 8027cae:	701a      	strb	r2, [r3, #0]
    config->tx_power = NRF_TX_PWR_0dBm;
 8027cb0:	687b      	ldr	r3, [r7, #4]
 8027cb2:	2203      	movs	r2, #3
 8027cb4:	705a      	strb	r2, [r3, #1]
    config->crc_width = NRF_CRC_WIDTH_1B;
 8027cb6:	687b      	ldr	r3, [r7, #4]
 8027cb8:	2200      	movs	r2, #0
 8027cba:	709a      	strb	r2, [r3, #2]
    config->retransmit_count = 0x0F;   // maximum is 15 times
 8027cbc:	687b      	ldr	r3, [r7, #4]
 8027cbe:	220f      	movs	r2, #15
 8027cc0:	715a      	strb	r2, [r3, #5]
    config->retransmit_delay = 0x0F; // 4000us, LSB:250us
 8027cc2:	687b      	ldr	r3, [r7, #4]
 8027cc4:	220f      	movs	r2, #15
 8027cc6:	719a      	strb	r2, [r3, #6]
    config->rf_channel = 110;
 8027cc8:	687b      	ldr	r3, [r7, #4]
 8027cca:	226e      	movs	r2, #110	; 0x6e
 8027ccc:	71da      	strb	r2, [r3, #7]

    config->spi = &hspi1;
 8027cce:	687b      	ldr	r3, [r7, #4]
 8027cd0:	4a15      	ldr	r2, [pc, #84]	; (8027d28 <KLESS_Init+0xac>)
 8027cd2:	615a      	str	r2, [r3, #20]
    config->spi_timeout = 100; // milliseconds
 8027cd4:	687b      	ldr	r3, [r7, #4]
 8027cd6:	2264      	movs	r2, #100	; 0x64
 8027cd8:	619a      	str	r2, [r3, #24]
    config->csn_port = INT_KEYLESS_CSN_GPIO_Port;
 8027cda:	687b      	ldr	r3, [r7, #4]
 8027cdc:	4a13      	ldr	r2, [pc, #76]	; (8027d2c <KLESS_Init+0xb0>)
 8027cde:	61da      	str	r2, [r3, #28]
    config->csn_pin = INT_KEYLESS_CSN_Pin;
 8027ce0:	687b      	ldr	r3, [r7, #4]
 8027ce2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8027ce6:	841a      	strh	r2, [r3, #32]
    config->ce_port = INT_KEYLESS_CE_GPIO_Port;
 8027ce8:	687b      	ldr	r3, [r7, #4]
 8027cea:	4a11      	ldr	r2, [pc, #68]	; (8027d30 <KLESS_Init+0xb4>)
 8027cec:	625a      	str	r2, [r3, #36]	; 0x24
    config->ce_pin = INT_KEYLESS_CE_Pin;
 8027cee:	687b      	ldr	r3, [r7, #4]
 8027cf0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8027cf4:	851a      	strh	r2, [r3, #40]	; 0x28
    config->irq_port = INT_KEYLESS_IRQ_GPIO_Port;
 8027cf6:	687b      	ldr	r3, [r7, #4]
 8027cf8:	4a0e      	ldr	r2, [pc, #56]	; (8027d34 <KLESS_Init+0xb8>)
 8027cfa:	62da      	str	r2, [r3, #44]	; 0x2c
    config->irq_pin = INT_KEYLESS_IRQ_Pin;
 8027cfc:	687b      	ldr	r3, [r7, #4]
 8027cfe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8027d02:	861a      	strh	r2, [r3, #48]	; 0x30

    // initialization
    nrf_init(&nrf, config);
 8027d04:	6879      	ldr	r1, [r7, #4]
 8027d06:	480c      	ldr	r0, [pc, #48]	; (8027d38 <KLESS_Init+0xbc>)
 8027d08:	f7fd fc36 	bl	8025578 <nrf_init>
}
 8027d0c:	bf00      	nop
 8027d0e:	3708      	adds	r7, #8
 8027d10:	46bd      	mov	sp, r7
 8027d12:	bd80      	pop	{r7, pc}
 8027d14:	20000110 	.word	0x20000110
 8027d18:	20000228 	.word	0x20000228
 8027d1c:	20000144 	.word	0x20000144
 8027d20:	2000015e 	.word	0x2000015e
 8027d24:	20000163 	.word	0x20000163
 8027d28:	20008890 	.word	0x20008890
 8027d2c:	40020000 	.word	0x40020000
 8027d30:	40020800 	.word	0x40020800
 8027d34:	40021000 	.word	0x40021000
 8027d38:	200083cc 	.word	0x200083cc

08027d3c <KLESS_ValidateCommand>:

uint8_t KLESS_ValidateCommand(KLESS_CMD *cmd) {
 8027d3c:	b580      	push	{r7, lr}
 8027d3e:	b088      	sub	sp, #32
 8027d40:	af00      	add	r7, sp, #0
 8027d42:	6078      	str	r0, [r7, #4]
    uint8_t valid, payload_dec[NRF_DATA_LENGTH];

    lock();
 8027d44:	f000 f946 	bl	8027fd4 <lock>
    // Read Payload
    valid = KLESS_Payload(KLESS_R, payload_dec);
 8027d48:	f107 030c 	add.w	r3, r7, #12
 8027d4c:	4619      	mov	r1, r3
 8027d4e:	2000      	movs	r0, #0
 8027d50:	f000 f82c 	bl	8027dac <KLESS_Payload>
 8027d54:	4603      	mov	r3, r0
 8027d56:	77fb      	strb	r3, [r7, #31]

    // Get Payload position
    if (valid) {
 8027d58:	7ffb      	ldrb	r3, [r7, #31]
 8027d5a:	2b00      	cmp	r3, #0
 8027d5c:	d01d      	beq.n	8027d9a <KLESS_ValidateCommand+0x5e>
        valid = 0;
 8027d5e:	2300      	movs	r3, #0
 8027d60:	77fb      	strb	r3, [r7, #31]
        // Check Payload Command
        for (uint8_t i = 0; i < 3; i++) {
 8027d62:	2300      	movs	r3, #0
 8027d64:	77bb      	strb	r3, [r7, #30]
 8027d66:	e015      	b.n	8027d94 <KLESS_ValidateCommand+0x58>
            // check command
            if (memcmp(payload_dec, &commands[i], 8) == 0) {
 8027d68:	7fbb      	ldrb	r3, [r7, #30]
 8027d6a:	00db      	lsls	r3, r3, #3
 8027d6c:	4a0e      	ldr	r2, [pc, #56]	; (8027da8 <KLESS_ValidateCommand+0x6c>)
 8027d6e:	1899      	adds	r1, r3, r2
 8027d70:	f107 030c 	add.w	r3, r7, #12
 8027d74:	2208      	movs	r2, #8
 8027d76:	4618      	mov	r0, r3
 8027d78:	f017 fe32 	bl	803f9e0 <memcmp>
 8027d7c:	4603      	mov	r3, r0
 8027d7e:	2b00      	cmp	r3, #0
 8027d80:	d105      	bne.n	8027d8e <KLESS_ValidateCommand+0x52>
                *cmd = i;
 8027d82:	687b      	ldr	r3, [r7, #4]
 8027d84:	7fba      	ldrb	r2, [r7, #30]
 8027d86:	701a      	strb	r2, [r3, #0]
                valid = 1;
 8027d88:	2301      	movs	r3, #1
 8027d8a:	77fb      	strb	r3, [r7, #31]
                break;
 8027d8c:	e005      	b.n	8027d9a <KLESS_ValidateCommand+0x5e>
        for (uint8_t i = 0; i < 3; i++) {
 8027d8e:	7fbb      	ldrb	r3, [r7, #30]
 8027d90:	3301      	adds	r3, #1
 8027d92:	77bb      	strb	r3, [r7, #30]
 8027d94:	7fbb      	ldrb	r3, [r7, #30]
 8027d96:	2b02      	cmp	r3, #2
 8027d98:	d9e6      	bls.n	8027d68 <KLESS_ValidateCommand+0x2c>
            }
        }

    }
    unlock();
 8027d9a:	f000 f929 	bl	8027ff0 <unlock>

    return valid;
 8027d9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8027da0:	4618      	mov	r0, r3
 8027da2:	3720      	adds	r7, #32
 8027da4:	46bd      	mov	sp, r7
 8027da6:	bd80      	pop	{r7, pc}
 8027da8:	08056038 	.word	0x08056038

08027dac <KLESS_Payload>:

uint8_t KLESS_Payload(KLESS_MODE mode, uint8_t *payload) {
 8027dac:	b580      	push	{r7, lr}
 8027dae:	b084      	sub	sp, #16
 8027db0:	af00      	add	r7, sp, #0
 8027db2:	4603      	mov	r3, r0
 8027db4:	6039      	str	r1, [r7, #0]
 8027db6:	71fb      	strb	r3, [r7, #7]
    uint8_t ret = 0;
 8027db8:	2300      	movs	r3, #0
 8027dba:	73fb      	strb	r3, [r7, #15]

    lock();
 8027dbc:	f000 f90a 	bl	8027fd4 <lock>
    // Process Payload
    if (mode == KLESS_R) {
 8027dc0:	79fb      	ldrb	r3, [r7, #7]
 8027dc2:	2b00      	cmp	r3, #0
 8027dc4:	d10a      	bne.n	8027ddc <KLESS_Payload+0x30>
        // Decrypt
        if (AES_Decrypt(payload, KLESS.rx.payload, NRF_DATA_LENGTH)) {
 8027dc6:	2210      	movs	r2, #16
 8027dc8:	490d      	ldr	r1, [pc, #52]	; (8027e00 <KLESS_Payload+0x54>)
 8027dca:	6838      	ldr	r0, [r7, #0]
 8027dcc:	f7fb fdc8 	bl	8023960 <AES_Decrypt>
 8027dd0:	4603      	mov	r3, r0
 8027dd2:	2b00      	cmp	r3, #0
 8027dd4:	d00c      	beq.n	8027df0 <KLESS_Payload+0x44>
            ret = 1;
 8027dd6:	2301      	movs	r3, #1
 8027dd8:	73fb      	strb	r3, [r7, #15]
 8027dda:	e009      	b.n	8027df0 <KLESS_Payload+0x44>
        }
    } else {
        // Encrypt
        if (AES_Encrypt(KLESS.tx.payload, payload, NRF_DATA_LENGTH)) {
 8027ddc:	2210      	movs	r2, #16
 8027dde:	6839      	ldr	r1, [r7, #0]
 8027de0:	4808      	ldr	r0, [pc, #32]	; (8027e04 <KLESS_Payload+0x58>)
 8027de2:	f7fb fd9b 	bl	802391c <AES_Encrypt>
 8027de6:	4603      	mov	r3, r0
 8027de8:	2b00      	cmp	r3, #0
 8027dea:	d001      	beq.n	8027df0 <KLESS_Payload+0x44>
            ret = 1;
 8027dec:	2301      	movs	r3, #1
 8027dee:	73fb      	strb	r3, [r7, #15]
        }
    }
    unlock();
 8027df0:	f000 f8fe 	bl	8027ff0 <unlock>

    return ret;
 8027df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8027df6:	4618      	mov	r0, r3
 8027df8:	3710      	adds	r7, #16
 8027dfa:	46bd      	mov	sp, r7
 8027dfc:	bd80      	pop	{r7, pc}
 8027dfe:	bf00      	nop
 8027e00:	20000163 	.word	0x20000163
 8027e04:	20000149 	.word	0x20000149

08027e08 <KLESS_GenerateAesKey>:

void KLESS_GenerateAesKey(uint32_t *payload) {
 8027e08:	b580      	push	{r7, lr}
 8027e0a:	b084      	sub	sp, #16
 8027e0c:	af00      	add	r7, sp, #0
 8027e0e:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < (NRF_DATA_LENGTH / sizeof(uint32_t)); i++) {
 8027e10:	2300      	movs	r3, #0
 8027e12:	73fb      	strb	r3, [r7, #15]
 8027e14:	e009      	b.n	8027e2a <KLESS_GenerateAesKey+0x22>
        HAL_RNG_GenerateRandomNumber(&hrng, payload++);
 8027e16:	687b      	ldr	r3, [r7, #4]
 8027e18:	1d1a      	adds	r2, r3, #4
 8027e1a:	607a      	str	r2, [r7, #4]
 8027e1c:	4619      	mov	r1, r3
 8027e1e:	4806      	ldr	r0, [pc, #24]	; (8027e38 <KLESS_GenerateAesKey+0x30>)
 8027e20:	f00c ff6c 	bl	8034cfc <HAL_RNG_GenerateRandomNumber>
    for (uint8_t i = 0; i < (NRF_DATA_LENGTH / sizeof(uint32_t)); i++) {
 8027e24:	7bfb      	ldrb	r3, [r7, #15]
 8027e26:	3301      	adds	r3, #1
 8027e28:	73fb      	strb	r3, [r7, #15]
 8027e2a:	7bfb      	ldrb	r3, [r7, #15]
 8027e2c:	2b03      	cmp	r3, #3
 8027e2e:	d9f2      	bls.n	8027e16 <KLESS_GenerateAesKey+0xe>
    }
}
 8027e30:	bf00      	nop
 8027e32:	3710      	adds	r7, #16
 8027e34:	46bd      	mov	sp, r7
 8027e36:	bd80      	pop	{r7, pc}
 8027e38:	20008830 	.word	0x20008830

08027e3c <KLESS_Pairing>:

uint8_t KLESS_Pairing(void) {
 8027e3c:	b580      	push	{r7, lr}
 8027e3e:	b088      	sub	sp, #32
 8027e40:	af00      	add	r7, sp, #0
    uint8_t *payload = KLESS.tx.payload;
 8027e42:	4b36      	ldr	r3, [pc, #216]	; (8027f1c <KLESS_Pairing+0xe0>)
 8027e44:	61bb      	str	r3, [r7, #24]
    uint32_t aes[4], swapped;
    NRF_RESULT p = NRF_ERROR;
 8027e46:	2301      	movs	r3, #1
 8027e48:	75fb      	strb	r3, [r7, #23]

    // Insert AES Key
    KLESS_GenerateAesKey(aes);
 8027e4a:	1d3b      	adds	r3, r7, #4
 8027e4c:	4618      	mov	r0, r3
 8027e4e:	f7ff ffdb 	bl	8027e08 <KLESS_GenerateAesKey>
    // swap byte order
    for (uint8_t i = 0; i < 4; i++) {
 8027e52:	2300      	movs	r3, #0
 8027e54:	77fb      	strb	r3, [r7, #31]
 8027e56:	e015      	b.n	8027e84 <KLESS_Pairing+0x48>
        swapped = _ByteSwap32(aes[i]);
 8027e58:	7ffb      	ldrb	r3, [r7, #31]
 8027e5a:	009b      	lsls	r3, r3, #2
 8027e5c:	f107 0220 	add.w	r2, r7, #32
 8027e60:	4413      	add	r3, r2
 8027e62:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8027e66:	4618      	mov	r0, r3
 8027e68:	f017 fcec 	bl	803f844 <_ByteSwap32>
 8027e6c:	4603      	mov	r3, r0
 8027e6e:	603b      	str	r3, [r7, #0]
        memcpy(&payload[i * 4], &swapped, sizeof(swapped));
 8027e70:	7ffb      	ldrb	r3, [r7, #31]
 8027e72:	009b      	lsls	r3, r3, #2
 8027e74:	461a      	mov	r2, r3
 8027e76:	69bb      	ldr	r3, [r7, #24]
 8027e78:	4413      	add	r3, r2
 8027e7a:	683a      	ldr	r2, [r7, #0]
 8027e7c:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++) {
 8027e7e:	7ffb      	ldrb	r3, [r7, #31]
 8027e80:	3301      	adds	r3, #1
 8027e82:	77fb      	strb	r3, [r7, #31]
 8027e84:	7ffb      	ldrb	r3, [r7, #31]
 8027e86:	2b03      	cmp	r3, #3
 8027e88:	d9e6      	bls.n	8027e58 <KLESS_Pairing+0x1c>
    }
    // Insert VCU_ID
    memcpy(&payload[NRF_DATA_LENGTH], KLESS.tx.address, NRF_ADDR_LENGTH);
 8027e8a:	69bb      	ldr	r3, [r7, #24]
 8027e8c:	f103 0210 	add.w	r2, r3, #16
 8027e90:	4b23      	ldr	r3, [pc, #140]	; (8027f20 <KLESS_Pairing+0xe4>)
 8027e92:	3334      	adds	r3, #52	; 0x34
 8027e94:	6818      	ldr	r0, [r3, #0]
 8027e96:	6010      	str	r0, [r2, #0]
 8027e98:	791b      	ldrb	r3, [r3, #4]
 8027e9a:	7113      	strb	r3, [r2, #4]

    // Set Address (pairing mode)
    memset(KLESS.tx.address, 0x00, sizeof(VCU.d.unit_id));
 8027e9c:	2204      	movs	r2, #4
 8027e9e:	2100      	movs	r1, #0
 8027ea0:	4820      	ldr	r0, [pc, #128]	; (8027f24 <KLESS_Pairing+0xe8>)
 8027ea2:	f017 fdb7 	bl	803fa14 <memset>
    memset(KLESS.rx.address, 0x00, sizeof(VCU.d.unit_id));
 8027ea6:	2204      	movs	r2, #4
 8027ea8:	2100      	movs	r1, #0
 8027eaa:	481f      	ldr	r0, [pc, #124]	; (8027f28 <KLESS_Pairing+0xec>)
 8027eac:	f017 fdb2 	bl	803fa14 <memset>

    // Set NRF Config (pairing mode)
    ce_reset(&nrf);
 8027eb0:	481e      	ldr	r0, [pc, #120]	; (8027f2c <KLESS_Pairing+0xf0>)
 8027eb2:	f7fd fb50 	bl	8025556 <ce_reset>
    nrf_set_tx_address(&nrf, KLESS.tx.address);
 8027eb6:	491b      	ldr	r1, [pc, #108]	; (8027f24 <KLESS_Pairing+0xe8>)
 8027eb8:	481c      	ldr	r0, [pc, #112]	; (8027f2c <KLESS_Pairing+0xf0>)
 8027eba:	f7fe f9b1 	bl	8026220 <nrf_set_tx_address>
    nrf_set_rx_address_p0(&nrf, KLESS.rx.address);
 8027ebe:	491a      	ldr	r1, [pc, #104]	; (8027f28 <KLESS_Pairing+0xec>)
 8027ec0:	481a      	ldr	r0, [pc, #104]	; (8027f2c <KLESS_Pairing+0xf0>)
 8027ec2:	f7fe f991 	bl	80261e8 <nrf_set_rx_address_p0>
    nrf_set_rx_payload_width_p0(&nrf, NRF_DATA_PAIR_LENGTH);
 8027ec6:	2115      	movs	r1, #21
 8027ec8:	4818      	ldr	r0, [pc, #96]	; (8027f2c <KLESS_Pairing+0xf0>)
 8027eca:	f7fe f9c5 	bl	8026258 <nrf_set_rx_payload_width_p0>
    ce_set(&nrf);
 8027ece:	4817      	ldr	r0, [pc, #92]	; (8027f2c <KLESS_Pairing+0xf0>)
 8027ed0:	f7fd fb31 	bl	8025536 <ce_set>

    // Send Payload
    p = nrf_send_packet(&nrf, payload);
 8027ed4:	69b9      	ldr	r1, [r7, #24]
 8027ed6:	4815      	ldr	r0, [pc, #84]	; (8027f2c <KLESS_Pairing+0xf0>)
 8027ed8:	f7fe f9df 	bl	802629a <nrf_send_packet>
 8027edc:	4603      	mov	r3, r0
 8027ede:	75fb      	strb	r3, [r7, #23]
    _DelayMS(100);
 8027ee0:	2064      	movs	r0, #100	; 0x64
 8027ee2:	f017 fc6d 	bl	803f7c0 <_DelayMS>

    // Set Address (normal mode)
    memcpy(KLESS.tx.address, &(VCU.d.unit_id), sizeof(VCU.d.unit_id));
 8027ee6:	4b12      	ldr	r3, [pc, #72]	; (8027f30 <KLESS_Pairing+0xf4>)
 8027ee8:	681b      	ldr	r3, [r3, #0]
 8027eea:	4a0d      	ldr	r2, [pc, #52]	; (8027f20 <KLESS_Pairing+0xe4>)
 8027eec:	6353      	str	r3, [r2, #52]	; 0x34
    memcpy(KLESS.rx.address, &(VCU.d.unit_id), sizeof(VCU.d.unit_id));
 8027eee:	4b10      	ldr	r3, [pc, #64]	; (8027f30 <KLESS_Pairing+0xf4>)
 8027ef0:	681b      	ldr	r3, [r3, #0]
 8027ef2:	4a0b      	ldr	r2, [pc, #44]	; (8027f20 <KLESS_Pairing+0xe4>)
 8027ef4:	f8c2 304e 	str.w	r3, [r2, #78]	; 0x4e
    // Set Aes Key (new)
    EEPROM_AesKey(EE_CMD_W, aes);
 8027ef8:	1d3b      	adds	r3, r7, #4
 8027efa:	4619      	mov	r1, r3
 8027efc:	2001      	movs	r0, #1
 8027efe:	f016 fc53 	bl	803e7a8 <EEPROM_AesKey>

    // Set NRF Config (normal mode)
    KLESS_Init();
 8027f02:	f7ff febb 	bl	8027c7c <KLESS_Init>

    return (p == NRF_OK);
 8027f06:	7dfb      	ldrb	r3, [r7, #23]
 8027f08:	2b00      	cmp	r3, #0
 8027f0a:	bf0c      	ite	eq
 8027f0c:	2301      	moveq	r3, #1
 8027f0e:	2300      	movne	r3, #0
 8027f10:	b2db      	uxtb	r3, r3
}
 8027f12:	4618      	mov	r0, r3
 8027f14:	3720      	adds	r7, #32
 8027f16:	46bd      	mov	sp, r7
 8027f18:	bd80      	pop	{r7, pc}
 8027f1a:	bf00      	nop
 8027f1c:	20000149 	.word	0x20000149
 8027f20:	20000110 	.word	0x20000110
 8027f24:	20000144 	.word	0x20000144
 8027f28:	2000015e 	.word	0x2000015e
 8027f2c:	200083cc 	.word	0x200083cc
 8027f30:	20000228 	.word	0x20000228

08027f34 <KLESS_Debugger>:
    LOG_Enter();

    return (p == NRF_OK);
}

void KLESS_Debugger(void) {
 8027f34:	b580      	push	{r7, lr}
 8027f36:	af00      	add	r7, sp, #0
    lock();
 8027f38:	f000 f84c 	bl	8027fd4 <lock>
    LOG_Str("NRF:Receive = ");
 8027f3c:	4806      	ldr	r0, [pc, #24]	; (8027f58 <KLESS_Debugger+0x24>)
 8027f3e:	f016 fa59 	bl	803e3f4 <LOG_Str>
    LOG_BufHex((char*) KLESS.rx.payload, NRF_DATA_LENGTH);
 8027f42:	2110      	movs	r1, #16
 8027f44:	4805      	ldr	r0, [pc, #20]	; (8027f5c <KLESS_Debugger+0x28>)
 8027f46:	f016 faa7 	bl	803e498 <LOG_BufHex>
    LOG_Enter();
 8027f4a:	f016 f9d9 	bl	803e300 <LOG_Enter>
    unlock();
 8027f4e:	f000 f84f 	bl	8027ff0 <unlock>
}
 8027f52:	bf00      	nop
 8027f54:	bd80      	pop	{r7, pc}
 8027f56:	bf00      	nop
 8027f58:	08043854 	.word	0x08043854
 8027f5c:	20000163 	.word	0x20000163

08027f60 <KLESS_Refresh>:

void KLESS_Refresh(void) {
 8027f60:	b580      	push	{r7, lr}
 8027f62:	af00      	add	r7, sp, #0
    if ((_GetTickMS() - VCU.d.tick.keyless) < KEYLESS_TIMEOUT) {
 8027f64:	f017 fc37 	bl	803f7d6 <_GetTickMS>
 8027f68:	4602      	mov	r2, r0
 8027f6a:	4b08      	ldr	r3, [pc, #32]	; (8027f8c <KLESS_Refresh+0x2c>)
 8027f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8027f6e:	1ad3      	subs	r3, r2, r3
 8027f70:	f241 3287 	movw	r2, #4999	; 0x1387
 8027f74:	4293      	cmp	r3, r2
 8027f76:	d803      	bhi.n	8027f80 <KLESS_Refresh+0x20>
        HMI1.d.status.keyless = 1;
 8027f78:	4b05      	ldr	r3, [pc, #20]	; (8027f90 <KLESS_Refresh+0x30>)
 8027f7a:	2201      	movs	r2, #1
 8027f7c:	715a      	strb	r2, [r3, #5]
    } else {
        HMI1.d.status.keyless = 0;
    }
}
 8027f7e:	e002      	b.n	8027f86 <KLESS_Refresh+0x26>
        HMI1.d.status.keyless = 0;
 8027f80:	4b03      	ldr	r3, [pc, #12]	; (8027f90 <KLESS_Refresh+0x30>)
 8027f82:	2200      	movs	r2, #0
 8027f84:	715a      	strb	r2, [r3, #5]
}
 8027f86:	bf00      	nop
 8027f88:	bd80      	pop	{r7, pc}
 8027f8a:	bf00      	nop
 8027f8c:	20000228 	.word	0x20000228
 8027f90:	200001e4 	.word	0x200001e4

08027f94 <KLESS_IrqHandler>:

void KLESS_IrqHandler(void) {
 8027f94:	b580      	push	{r7, lr}
 8027f96:	af00      	add	r7, sp, #0
    nrf_irq_handler(&nrf);
 8027f98:	4802      	ldr	r0, [pc, #8]	; (8027fa4 <KLESS_IrqHandler+0x10>)
 8027f9a:	f7fe f9b1 	bl	8026300 <nrf_irq_handler>
}
 8027f9e:	bf00      	nop
 8027fa0:	bd80      	pop	{r7, pc}
 8027fa2:	bf00      	nop
 8027fa4:	200083cc 	.word	0x200083cc

08027fa8 <nrf_packet_received_callback>:

void nrf_packet_received_callback(nrf24l01 *dev, uint8_t *data) {
 8027fa8:	b580      	push	{r7, lr}
 8027faa:	b082      	sub	sp, #8
 8027fac:	af00      	add	r7, sp, #0
 8027fae:	6078      	str	r0, [r7, #4]
 8027fb0:	6039      	str	r1, [r7, #0]
    // used in favor of nrf_receive_packet
    dev->rx_busy = 0;
 8027fb2:	687b      	ldr	r3, [r7, #4]
 8027fb4:	2200      	movs	r2, #0
 8027fb6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

    osThreadFlagsSet(KeylessTaskHandle, EVT_KEYLESS_RX_IT);
 8027fba:	4b05      	ldr	r3, [pc, #20]	; (8027fd0 <nrf_packet_received_callback+0x28>)
 8027fbc:	681b      	ldr	r3, [r3, #0]
 8027fbe:	2101      	movs	r1, #1
 8027fc0:	4618      	mov	r0, r3
 8027fc2:	f00f fb43 	bl	803764c <osThreadFlagsSet>
}
 8027fc6:	bf00      	nop
 8027fc8:	3708      	adds	r7, #8
 8027fca:	46bd      	mov	sp, r7
 8027fcc:	bd80      	pop	{r7, pc}
 8027fce:	bf00      	nop
 8027fd0:	20008638 	.word	0x20008638

08027fd4 <lock>:

/* Private functions implementation --------------------------------------------*/
static void lock(void) {
 8027fd4:	b580      	push	{r7, lr}
 8027fd6:	af00      	add	r7, sp, #0
    osMutexAcquire(KlessRecMutexHandle, osWaitForever);
 8027fd8:	4b04      	ldr	r3, [pc, #16]	; (8027fec <lock+0x18>)
 8027fda:	681b      	ldr	r3, [r3, #0]
 8027fdc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8027fe0:	4618      	mov	r0, r3
 8027fe2:	f00f fea1 	bl	8037d28 <osMutexAcquire>
}
 8027fe6:	bf00      	nop
 8027fe8:	bd80      	pop	{r7, pc}
 8027fea:	bf00      	nop
 8027fec:	200086b4 	.word	0x200086b4

08027ff0 <unlock>:

static void unlock(void) {
 8027ff0:	b580      	push	{r7, lr}
 8027ff2:	af00      	add	r7, sp, #0
    osMutexRelease(KlessRecMutexHandle);
 8027ff4:	4b03      	ldr	r3, [pc, #12]	; (8028004 <unlock+0x14>)
 8027ff6:	681b      	ldr	r3, [r3, #0]
 8027ff8:	4618      	mov	r0, r3
 8027ffa:	f00f fef3 	bl	8037de4 <osMutexRelease>
}
 8027ffe:	bf00      	nop
 8028000:	bd80      	pop	{r7, pc}
 8028002:	bf00      	nop
 8028004:	200086b4 	.word	0x200086b4

08028008 <Report_Init>:
extern sw_t SW;
extern sim_t SIM;
extern uint16_t BACKUP_VOLTAGE;

/* Public functions implementation --------------------------------------------*/
void Report_Init(FRAME_TYPE frame, report_t *report) {
 8028008:	b580      	push	{r7, lr}
 802800a:	b082      	sub	sp, #8
 802800c:	af00      	add	r7, sp, #0
 802800e:	4603      	mov	r3, r0
 8028010:	6039      	str	r1, [r7, #0]
 8028012:	71fb      	strb	r3, [r7, #7]
    // set default data
    LOG_StrLn("Reporter:ReportInit");
 8028014:	4808      	ldr	r0, [pc, #32]	; (8028038 <Report_Init+0x30>)
 8028016:	f016 fa05 	bl	803e424 <LOG_StrLn>
    // =============== REPORT ==============
    // header report
    report->header.prefix[0] = PREFIX_REPORT[1];
 802801a:	2252      	movs	r2, #82	; 0x52
 802801c:	683b      	ldr	r3, [r7, #0]
 802801e:	701a      	strb	r2, [r3, #0]
    report->header.prefix[1] = PREFIX_REPORT[0];
 8028020:	2240      	movs	r2, #64	; 0x40
 8028022:	683b      	ldr	r3, [r7, #0]
 8028024:	705a      	strb	r2, [r3, #1]
    report->header.seq_id = VCU.d.seq_id.report;
 8028026:	4b05      	ldr	r3, [pc, #20]	; (802803c <Report_Init+0x34>)
 8028028:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 802802c:	683b      	ldr	r3, [r7, #0]
 802802e:	819a      	strh	r2, [r3, #12]
    // (already set)
    // body required
    // body optional
}
 8028030:	bf00      	nop
 8028032:	3708      	adds	r7, #8
 8028034:	46bd      	mov	sp, r7
 8028036:	bd80      	pop	{r7, pc}
 8028038:	08043864 	.word	0x08043864
 802803c:	20000228 	.word	0x20000228

08028040 <Response_Init>:

void Response_Init(response_t *response) {
 8028040:	b580      	push	{r7, lr}
 8028042:	b082      	sub	sp, #8
 8028044:	af00      	add	r7, sp, #0
 8028046:	6078      	str	r0, [r7, #4]
    // set default data
    LOG_StrLn("Reporter:ResponseInit");
 8028048:	4808      	ldr	r0, [pc, #32]	; (802806c <Response_Init+0x2c>)
 802804a:	f016 f9eb 	bl	803e424 <LOG_StrLn>
    // =============== REPORT ==============
    // header report
    response->header.prefix[0] = PREFIX_REPORT[1];
 802804e:	2252      	movs	r2, #82	; 0x52
 8028050:	687b      	ldr	r3, [r7, #4]
 8028052:	701a      	strb	r2, [r3, #0]
    response->header.prefix[1] = PREFIX_REPORT[0];
 8028054:	2240      	movs	r2, #64	; 0x40
 8028056:	687b      	ldr	r3, [r7, #4]
 8028058:	705a      	strb	r2, [r3, #1]
    response->header.seq_id = VCU.d.seq_id.response;
 802805a:	4b05      	ldr	r3, [pc, #20]	; (8028070 <Response_Init+0x30>)
 802805c:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8028060:	687b      	ldr	r3, [r7, #4]
 8028062:	819a      	strh	r2, [r3, #12]
}
 8028064:	bf00      	nop
 8028066:	3708      	adds	r7, #8
 8028068:	46bd      	mov	sp, r7
 802806a:	bd80      	pop	{r7, pc}
 802806c:	08043878 	.word	0x08043878
 8028070:	20000228 	.word	0x20000228

08028074 <Report_Capture>:

void Report_Capture(FRAME_TYPE frame, report_t *report) {
 8028074:	b590      	push	{r4, r7, lr}
 8028076:	b087      	sub	sp, #28
 8028078:	af00      	add	r7, sp, #0
 802807a:	4603      	mov	r3, r0
 802807c:	60b9      	str	r1, [r7, #8]
 802807e:	73fb      	strb	r3, [r7, #15]
    sw_sub_t *pSub = &(SW.runner.mode.sub);
 8028080:	4b9a      	ldr	r3, [pc, #616]	; (80282ec <Report_Capture+0x278>)
 8028082:	613b      	str	r3, [r7, #16]

    // Reconstruct the header
    report->header.seq_id++;
 8028084:	68bb      	ldr	r3, [r7, #8]
 8028086:	899b      	ldrh	r3, [r3, #12]
 8028088:	b29b      	uxth	r3, r3
 802808a:	3301      	adds	r3, #1
 802808c:	b29a      	uxth	r2, r3
 802808e:	68bb      	ldr	r3, [r7, #8]
 8028090:	819a      	strh	r2, [r3, #12]
    report->header.unit_id = VCU.d.unit_id;
 8028092:	4b97      	ldr	r3, [pc, #604]	; (80282f0 <Report_Capture+0x27c>)
 8028094:	681a      	ldr	r2, [r3, #0]
 8028096:	68bb      	ldr	r3, [r7, #8]
 8028098:	609a      	str	r2, [r3, #8]
    report->header.frame_id = frame;
 802809a:	68bb      	ldr	r3, [r7, #8]
 802809c:	7bfa      	ldrb	r2, [r7, #15]
 802809e:	71da      	strb	r2, [r3, #7]
    report->header.size = sizeof(report->header.frame_id) +
 80280a0:	68bb      	ldr	r3, [r7, #8]
 80280a2:	2230      	movs	r2, #48	; 0x30
 80280a4:	719a      	strb	r2, [r3, #6]
            sizeof(report->header.unit_id) +
            sizeof(report->header.seq_id) +
            sizeof(report->data.req);

    // Reconstruct the body
    report->data.req.vcu.driver_id = VCU.d.driver_id;
 80280a6:	4b92      	ldr	r3, [pc, #584]	; (80282f0 <Report_Capture+0x27c>)
 80280a8:	791a      	ldrb	r2, [r3, #4]
 80280aa:	68bb      	ldr	r3, [r7, #8]
 80280ac:	779a      	strb	r2, [r3, #30]
    report->data.req.vcu.events_group = VCU.d.events;
 80280ae:	4b90      	ldr	r3, [pc, #576]	; (80282f0 <Report_Capture+0x27c>)
 80280b0:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 80280b4:	68ba      	ldr	r2, [r7, #8]
 80280b6:	321f      	adds	r2, #31
 80280b8:	6013      	str	r3, [r2, #0]
 80280ba:	6054      	str	r4, [r2, #4]
    report->data.req.vcu.rtc.log = RTC_Read();
 80280bc:	f7fe faec 	bl	8026698 <RTC_Read>
 80280c0:	4603      	mov	r3, r0
 80280c2:	460c      	mov	r4, r1
 80280c4:	68ba      	ldr	r2, [r7, #8]
 80280c6:	3216      	adds	r2, #22
 80280c8:	6013      	str	r3, [r2, #0]
 80280ca:	6054      	str	r4, [r2, #4]
    // BMS data
    for (uint8_t i = 0; i < BMS_COUNT; i++) {
 80280cc:	2300      	movs	r3, #0
 80280ce:	75fb      	strb	r3, [r7, #23]
 80280d0:	e04c      	b.n	802816c <Report_Capture+0xf8>
        report->data.req.bms.pack[i].id = BMS.d.pack[i].id;
 80280d2:	7dfa      	ldrb	r2, [r7, #23]
 80280d4:	7df8      	ldrb	r0, [r7, #23]
 80280d6:	4987      	ldr	r1, [pc, #540]	; (80282f4 <Report_Capture+0x280>)
 80280d8:	4613      	mov	r3, r2
 80280da:	00db      	lsls	r3, r3, #3
 80280dc:	1a9b      	subs	r3, r3, r2
 80280de:	009b      	lsls	r3, r3, #2
 80280e0:	440b      	add	r3, r1
 80280e2:	3304      	adds	r3, #4
 80280e4:	681a      	ldr	r2, [r3, #0]
 80280e6:	68b9      	ldr	r1, [r7, #8]
 80280e8:	1d03      	adds	r3, r0, #4
 80280ea:	00db      	lsls	r3, r3, #3
 80280ec:	440b      	add	r3, r1
 80280ee:	f8c3 2007 	str.w	r2, [r3, #7]
        report->data.req.bms.pack[i].voltage = BMS.d.pack[i].voltage * 100;
 80280f2:	7dfa      	ldrb	r2, [r7, #23]
 80280f4:	497f      	ldr	r1, [pc, #508]	; (80282f4 <Report_Capture+0x280>)
 80280f6:	4613      	mov	r3, r2
 80280f8:	00db      	lsls	r3, r3, #3
 80280fa:	1a9b      	subs	r3, r3, r2
 80280fc:	009b      	lsls	r3, r3, #2
 80280fe:	440b      	add	r3, r1
 8028100:	3308      	adds	r3, #8
 8028102:	edd3 7a00 	vldr	s15, [r3]
 8028106:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 80282f8 <Report_Capture+0x284>
 802810a:	ee67 7a87 	vmul.f32	s15, s15, s14
 802810e:	7dfb      	ldrb	r3, [r7, #23]
 8028110:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8028114:	ee17 2a90 	vmov	r2, s15
 8028118:	b291      	uxth	r1, r2
 802811a:	68ba      	ldr	r2, [r7, #8]
 802811c:	3304      	adds	r3, #4
 802811e:	00db      	lsls	r3, r3, #3
 8028120:	4413      	add	r3, r2
 8028122:	460a      	mov	r2, r1
 8028124:	f8a3 200b 	strh.w	r2, [r3, #11]
        report->data.req.bms.pack[i].current = (BMS.d.pack[i].current + 50) * 100;
 8028128:	7dfa      	ldrb	r2, [r7, #23]
 802812a:	4972      	ldr	r1, [pc, #456]	; (80282f4 <Report_Capture+0x280>)
 802812c:	4613      	mov	r3, r2
 802812e:	00db      	lsls	r3, r3, #3
 8028130:	1a9b      	subs	r3, r3, r2
 8028132:	009b      	lsls	r3, r3, #2
 8028134:	440b      	add	r3, r1
 8028136:	330c      	adds	r3, #12
 8028138:	edd3 7a00 	vldr	s15, [r3]
 802813c:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80282fc <Report_Capture+0x288>
 8028140:	ee77 7a87 	vadd.f32	s15, s15, s14
 8028144:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80282f8 <Report_Capture+0x284>
 8028148:	ee67 7a87 	vmul.f32	s15, s15, s14
 802814c:	7dfb      	ldrb	r3, [r7, #23]
 802814e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8028152:	ee17 2a90 	vmov	r2, s15
 8028156:	b291      	uxth	r1, r2
 8028158:	68ba      	ldr	r2, [r7, #8]
 802815a:	3304      	adds	r3, #4
 802815c:	00db      	lsls	r3, r3, #3
 802815e:	4413      	add	r3, r2
 8028160:	460a      	mov	r2, r1
 8028162:	f8a3 200d 	strh.w	r2, [r3, #13]
    for (uint8_t i = 0; i < BMS_COUNT; i++) {
 8028166:	7dfb      	ldrb	r3, [r7, #23]
 8028168:	3301      	adds	r3, #1
 802816a:	75fb      	strb	r3, [r7, #23]
 802816c:	7dfb      	ldrb	r3, [r7, #23]
 802816e:	2b01      	cmp	r3, #1
 8028170:	d9af      	bls.n	80280d2 <Report_Capture+0x5e>
    }

    // Add more (if full frame)
    if (frame == FR_FULL) {
 8028172:	7bfb      	ldrb	r3, [r7, #15]
 8028174:	2b02      	cmp	r3, #2
 8028176:	f040 80b4 	bne.w	80282e2 <Report_Capture+0x26e>
        report->header.size += sizeof(report->data.opt);
 802817a:	68bb      	ldr	r3, [r7, #8]
 802817c:	799b      	ldrb	r3, [r3, #6]
 802817e:	3323      	adds	r3, #35	; 0x23
 8028180:	b2da      	uxtb	r2, r3
 8028182:	68bb      	ldr	r3, [r7, #8]
 8028184:	719a      	strb	r2, [r3, #6]
        // set parameter
        report->data.opt.vcu.gps.latitude = (int32_t) (GPS.latitude * 10000000);
 8028186:	4b5e      	ldr	r3, [pc, #376]	; (8028300 <Report_Capture+0x28c>)
 8028188:	edd3 7a01 	vldr	s15, [r3, #4]
 802818c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8028304 <Report_Capture+0x290>
 8028190:	ee67 7a87 	vmul.f32	s15, s15, s14
 8028194:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8028198:	ee17 2a90 	vmov	r2, s15
 802819c:	68bb      	ldr	r3, [r7, #8]
 802819e:	f8c3 203b 	str.w	r2, [r3, #59]	; 0x3b
        report->data.opt.vcu.gps.longitude = (int32_t) (GPS.longitude * 10000000);
 80281a2:	4b57      	ldr	r3, [pc, #348]	; (8028300 <Report_Capture+0x28c>)
 80281a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80281a8:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8028304 <Report_Capture+0x290>
 80281ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80281b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80281b4:	ee17 2a90 	vmov	r2, s15
 80281b8:	68bb      	ldr	r3, [r7, #8]
 80281ba:	f8c3 2037 	str.w	r2, [r3, #55]	; 0x37
        report->data.opt.vcu.gps.hdop = (uint8_t) (GPS.dop_h * 10);
 80281be:	4b50      	ldr	r3, [pc, #320]	; (8028300 <Report_Capture+0x28c>)
 80281c0:	edd3 7a00 	vldr	s15, [r3]
 80281c4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80281c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80281cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80281d0:	edc7 7a01 	vstr	s15, [r7, #4]
 80281d4:	793b      	ldrb	r3, [r7, #4]
 80281d6:	b2da      	uxtb	r2, r3
 80281d8:	68bb      	ldr	r3, [r7, #8]
 80281da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
        report->data.opt.vcu.gps.heading = (uint8_t) (GPS.heading / 2);
 80281de:	4b48      	ldr	r3, [pc, #288]	; (8028300 <Report_Capture+0x28c>)
 80281e0:	ed93 7a03 	vldr	s14, [r3, #12]
 80281e4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80281e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80281ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80281f0:	edc7 7a01 	vstr	s15, [r7, #4]
 80281f4:	793b      	ldrb	r3, [r7, #4]
 80281f6:	b2da      	uxtb	r2, r3
 80281f8:	68bb      	ldr	r3, [r7, #8]
 80281fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        report->data.opt.vcu.speed = GPS.speed_kph;
 80281fe:	4b40      	ldr	r3, [pc, #256]	; (8028300 <Report_Capture+0x28c>)
 8028200:	edd3 7a04 	vldr	s15, [r3, #16]
 8028204:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8028208:	edc7 7a01 	vstr	s15, [r7, #4]
 802820c:	793b      	ldrb	r3, [r7, #4]
 802820e:	b2da      	uxtb	r2, r3
 8028210:	68bb      	ldr	r3, [r7, #8]
 8028212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        report->data.opt.vcu.odometer = VCU.d.odometer;
 8028216:	4b36      	ldr	r3, [pc, #216]	; (80282f0 <Report_Capture+0x27c>)
 8028218:	68da      	ldr	r2, [r3, #12]
 802821a:	68bb      	ldr	r3, [r7, #8]
 802821c:	f8c3 2042 	str.w	r2, [r3, #66]	; 0x42

        report->data.opt.vcu.trip.a = pSub->trip[SW_M_TRIP_A];
 8028220:	693b      	ldr	r3, [r7, #16]
 8028222:	689a      	ldr	r2, [r3, #8]
 8028224:	68bb      	ldr	r3, [r7, #8]
 8028226:	f8c3 204a 	str.w	r2, [r3, #74]	; 0x4a
        report->data.opt.vcu.trip.b = pSub->trip[SW_M_TRIP_B];
 802822a:	693b      	ldr	r3, [r7, #16]
 802822c:	68da      	ldr	r2, [r3, #12]
 802822e:	68bb      	ldr	r3, [r7, #8]
 8028230:	f8c3 204e 	str.w	r2, [r3, #78]	; 0x4e
        report->data.opt.vcu.report.range = pSub->report[SW_M_REPORT_RANGE];
 8028234:	693b      	ldr	r3, [r7, #16]
 8028236:	799a      	ldrb	r2, [r3, #6]
 8028238:	68bb      	ldr	r3, [r7, #8]
 802823a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        report->data.opt.vcu.report.efficiency = pSub->report[SW_M_REPORT_EFFICIENCY];
 802823e:	693b      	ldr	r3, [r7, #16]
 8028240:	79da      	ldrb	r2, [r3, #7]
 8028242:	68bb      	ldr	r3, [r7, #8]
 8028244:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        report->data.opt.vcu.signal = SIM.signal;
 8028248:	4b2f      	ldr	r3, [pc, #188]	; (8028308 <Report_Capture+0x294>)
 802824a:	7c1a      	ldrb	r2, [r3, #16]
 802824c:	68bb      	ldr	r3, [r7, #8]
 802824e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        report->data.opt.vcu.backup_voltage = BACKUP_VOLTAGE / 18;
 8028252:	4b2e      	ldr	r3, [pc, #184]	; (802830c <Report_Capture+0x298>)
 8028254:	881b      	ldrh	r3, [r3, #0]
 8028256:	4a2e      	ldr	r2, [pc, #184]	; (8028310 <Report_Capture+0x29c>)
 8028258:	fba2 2303 	umull	r2, r3, r2, r3
 802825c:	089b      	lsrs	r3, r3, #2
 802825e:	b29b      	uxth	r3, r3
 8028260:	b2da      	uxtb	r2, r3
 8028262:	68bb      	ldr	r3, [r7, #8]
 8028264:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

        // BMS data
        for (uint8_t i = 0; i < BMS_COUNT; i++) {
 8028268:	2300      	movs	r3, #0
 802826a:	75bb      	strb	r3, [r7, #22]
 802826c:	e036      	b.n	80282dc <Report_Capture+0x268>
            report->data.opt.bms.pack[i].soc = BMS.d.pack[i].soc;
 802826e:	7dba      	ldrb	r2, [r7, #22]
 8028270:	4920      	ldr	r1, [pc, #128]	; (80282f4 <Report_Capture+0x280>)
 8028272:	4613      	mov	r3, r2
 8028274:	00db      	lsls	r3, r3, #3
 8028276:	1a9b      	subs	r3, r3, r2
 8028278:	009b      	lsls	r3, r3, #2
 802827a:	440b      	add	r3, r1
 802827c:	3310      	adds	r3, #16
 802827e:	edd3 7a00 	vldr	s15, [r3]
 8028282:	7dbb      	ldrb	r3, [r7, #22]
 8028284:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8028288:	ee17 2a90 	vmov	r2, s15
 802828c:	b291      	uxth	r1, r2
 802828e:	68ba      	ldr	r2, [r7, #8]
 8028290:	3312      	adds	r3, #18
 8028292:	009b      	lsls	r3, r3, #2
 8028294:	4413      	add	r3, r2
 8028296:	460a      	mov	r2, r1
 8028298:	815a      	strh	r2, [r3, #10]
            report->data.opt.bms.pack[i].temperature = (BMS.d.pack[i].temperature + 40) * 10;
 802829a:	7dba      	ldrb	r2, [r7, #22]
 802829c:	4915      	ldr	r1, [pc, #84]	; (80282f4 <Report_Capture+0x280>)
 802829e:	4613      	mov	r3, r2
 80282a0:	00db      	lsls	r3, r3, #3
 80282a2:	1a9b      	subs	r3, r3, r2
 80282a4:	009b      	lsls	r3, r3, #2
 80282a6:	440b      	add	r3, r1
 80282a8:	3314      	adds	r3, #20
 80282aa:	edd3 7a00 	vldr	s15, [r3]
 80282ae:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8028314 <Report_Capture+0x2a0>
 80282b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80282b6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80282ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80282be:	7dbb      	ldrb	r3, [r7, #22]
 80282c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80282c4:	ee17 2a90 	vmov	r2, s15
 80282c8:	b291      	uxth	r1, r2
 80282ca:	68ba      	ldr	r2, [r7, #8]
 80282cc:	3312      	adds	r3, #18
 80282ce:	009b      	lsls	r3, r3, #2
 80282d0:	4413      	add	r3, r2
 80282d2:	460a      	mov	r2, r1
 80282d4:	819a      	strh	r2, [r3, #12]
        for (uint8_t i = 0; i < BMS_COUNT; i++) {
 80282d6:	7dbb      	ldrb	r3, [r7, #22]
 80282d8:	3301      	adds	r3, #1
 80282da:	75bb      	strb	r3, [r7, #22]
 80282dc:	7dbb      	ldrb	r3, [r7, #22]
 80282de:	2b01      	cmp	r3, #1
 80282e0:	d9c5      	bls.n	802826e <Report_Capture+0x1fa>
        }
    }
}
 80282e2:	bf00      	nop
 80282e4:	371c      	adds	r7, #28
 80282e6:	46bd      	mov	sp, r7
 80282e8:	bd90      	pop	{r4, r7, pc}
 80282ea:	bf00      	nop
 80282ec:	200000fc 	.word	0x200000fc
 80282f0:	20000228 	.word	0x20000228
 80282f4:	20000178 	.word	0x20000178
 80282f8:	42c80000 	.word	0x42c80000
 80282fc:	42480000 	.word	0x42480000
 8028300:	20008404 	.word	0x20008404
 8028304:	4b189680 	.word	0x4b189680
 8028308:	200002a8 	.word	0x200002a8
 802830c:	200004b4 	.word	0x200004b4
 8028310:	38e38e39 	.word	0x38e38e39
 8028314:	42200000 	.word	0x42200000

08028318 <Response_Capture>:

void Response_Capture(response_t *response) {
 8028318:	b580      	push	{r7, lr}
 802831a:	b082      	sub	sp, #8
 802831c:	af00      	add	r7, sp, #0
 802831e:	6078      	str	r0, [r7, #4]
    //Reconstruct the header
    response->header.seq_id++;
 8028320:	687b      	ldr	r3, [r7, #4]
 8028322:	899b      	ldrh	r3, [r3, #12]
 8028324:	b29b      	uxth	r3, r3
 8028326:	3301      	adds	r3, #1
 8028328:	b29a      	uxth	r2, r3
 802832a:	687b      	ldr	r3, [r7, #4]
 802832c:	819a      	strh	r2, [r3, #12]
    response->header.unit_id = VCU.d.unit_id;
 802832e:	4b0b      	ldr	r3, [pc, #44]	; (802835c <Response_Capture+0x44>)
 8028330:	681a      	ldr	r2, [r3, #0]
 8028332:	687b      	ldr	r3, [r7, #4]
 8028334:	609a      	str	r2, [r3, #8]
    response->header.frame_id = FR_RESPONSE;
 8028336:	687b      	ldr	r3, [r7, #4]
 8028338:	2200      	movs	r2, #0
 802833a:	71da      	strb	r2, [r3, #7]
    response->header.size = sizeof(response->header.frame_id) +
            sizeof(response->header.unit_id) +
            sizeof(response->header.seq_id) +
            sizeof(response->data.code) +
            strlen(response->data.message);
 802833c:	687b      	ldr	r3, [r7, #4]
 802833e:	330f      	adds	r3, #15
 8028340:	4618      	mov	r0, r3
 8028342:	f7f7 ff77 	bl	8020234 <strlen>
 8028346:	4603      	mov	r3, r0
            sizeof(response->data.code) +
 8028348:	b2db      	uxtb	r3, r3
 802834a:	3308      	adds	r3, #8
 802834c:	b2da      	uxtb	r2, r3
    response->header.size = sizeof(response->header.frame_id) +
 802834e:	687b      	ldr	r3, [r7, #4]
 8028350:	719a      	strb	r2, [r3, #6]
}
 8028352:	bf00      	nop
 8028354:	3708      	adds	r7, #8
 8028356:	46bd      	mov	sp, r7
 8028358:	bd80      	pop	{r7, pc}
 802835a:	bf00      	nop
 802835c:	20000228 	.word	0x20000228

08028360 <Report_SetCRC>:

void Report_SetCRC(report_t *report) {
 8028360:	b590      	push	{r4, r7, lr}
 8028362:	b083      	sub	sp, #12
 8028364:	af00      	add	r7, sp, #0
 8028366:	6078      	str	r0, [r7, #4]
    // get current sending date-time
    report->data.req.vcu.rtc.send = RTC_Read();
 8028368:	f7fe f996 	bl	8026698 <RTC_Read>
 802836c:	4603      	mov	r3, r0
 802836e:	460c      	mov	r4, r1
 8028370:	687a      	ldr	r2, [r7, #4]
 8028372:	320e      	adds	r2, #14
 8028374:	6013      	str	r3, [r2, #0]
 8028376:	6054      	str	r4, [r2, #4]
    // recalculate the CRC
    report->header.crc = CRC_Calculate8(
 8028378:	687b      	ldr	r3, [r7, #4]
 802837a:	1d98      	adds	r0, r3, #6
            (uint8_t*) &(report->header.size),
            report->header.size + sizeof(report->header.size),
 802837c:	687b      	ldr	r3, [r7, #4]
 802837e:	799b      	ldrb	r3, [r3, #6]
 8028380:	3301      	adds	r3, #1
    report->header.crc = CRC_Calculate8(
 8028382:	2200      	movs	r2, #0
 8028384:	4619      	mov	r1, r3
 8028386:	f015 fe9d 	bl	803e0c4 <CRC_Calculate8>
 802838a:	4602      	mov	r2, r0
 802838c:	687b      	ldr	r3, [r7, #4]
 802838e:	f8c3 2002 	str.w	r2, [r3, #2]
            0);
}
 8028392:	bf00      	nop
 8028394:	370c      	adds	r7, #12
 8028396:	46bd      	mov	sp, r7
 8028398:	bd90      	pop	{r4, r7, pc}

0802839a <Response_SetCRC>:

void Response_SetCRC(response_t *response) {
 802839a:	b580      	push	{r7, lr}
 802839c:	b082      	sub	sp, #8
 802839e:	af00      	add	r7, sp, #0
 80283a0:	6078      	str	r0, [r7, #4]
    response->header.crc = CRC_Calculate8(
 80283a2:	687b      	ldr	r3, [r7, #4]
 80283a4:	1d98      	adds	r0, r3, #6
            (uint8_t*) &(response->header.size),
            response->header.size + sizeof(response->header.size),
 80283a6:	687b      	ldr	r3, [r7, #4]
 80283a8:	799b      	ldrb	r3, [r3, #6]
 80283aa:	3301      	adds	r3, #1
    response->header.crc = CRC_Calculate8(
 80283ac:	2200      	movs	r2, #0
 80283ae:	4619      	mov	r1, r3
 80283b0:	f015 fe88 	bl	803e0c4 <CRC_Calculate8>
 80283b4:	4602      	mov	r2, r0
 80283b6:	687b      	ldr	r3, [r7, #4]
 80283b8:	f8c3 2002 	str.w	r2, [r3, #2]
            0);
}
 80283bc:	bf00      	nop
 80283be:	3708      	adds	r7, #8
 80283c0:	46bd      	mov	sp, r7
 80283c2:	bd80      	pop	{r7, pc}

080283c4 <Command_Debugger>:

void Command_Debugger(command_t *cmd) {
 80283c4:	b580      	push	{r7, lr}
 80283c6:	b082      	sub	sp, #8
 80283c8:	af00      	add	r7, sp, #0
 80283ca:	6078      	str	r0, [r7, #4]
    LOG_Str("\nCommand:Payload [");
 80283cc:	480f      	ldr	r0, [pc, #60]	; (802840c <Command_Debugger+0x48>)
 80283ce:	f016 f811 	bl	803e3f4 <LOG_Str>
    LOG_Int(cmd->data.code);
 80283d2:	687b      	ldr	r3, [r7, #4]
 80283d4:	79db      	ldrb	r3, [r3, #7]
 80283d6:	4618      	mov	r0, r3
 80283d8:	f015 ff9e 	bl	803e318 <LOG_Int>
    LOG_Str("-");
 80283dc:	480c      	ldr	r0, [pc, #48]	; (8028410 <Command_Debugger+0x4c>)
 80283de:	f016 f809 	bl	803e3f4 <LOG_Str>
    LOG_Int(cmd->data.sub_code);
 80283e2:	687b      	ldr	r3, [r7, #4]
 80283e4:	7a1b      	ldrb	r3, [r3, #8]
 80283e6:	4618      	mov	r0, r3
 80283e8:	f015 ff96 	bl	803e318 <LOG_Int>
    LOG_Str("] = ");
 80283ec:	4809      	ldr	r0, [pc, #36]	; (8028414 <Command_Debugger+0x50>)
 80283ee:	f016 f801 	bl	803e3f4 <LOG_Str>
    LOG_BufHex((char*) &(cmd->data.value), sizeof(cmd->data.value));
 80283f2:	687b      	ldr	r3, [r7, #4]
 80283f4:	3309      	adds	r3, #9
 80283f6:	2108      	movs	r1, #8
 80283f8:	4618      	mov	r0, r3
 80283fa:	f016 f84d 	bl	803e498 <LOG_BufHex>
    LOG_Enter();
 80283fe:	f015 ff7f 	bl	803e300 <LOG_Enter>
}
 8028402:	bf00      	nop
 8028404:	3708      	adds	r7, #8
 8028406:	46bd      	mov	sp, r7
 8028408:	bd80      	pop	{r7, pc}
 802840a:	bf00      	nop
 802840c:	08043890 	.word	0x08043890
 8028410:	080438a4 	.word	0x080438a4
 8028414:	080438a8 	.word	0x080438a8

08028418 <BMS_Init>:
        BMS_CheckState,
        BMS_MergeData,
};

/* Public functions implementation --------------------------------------------*/
void BMS_Init(void) {
 8028418:	b580      	push	{r7, lr}
 802841a:	b082      	sub	sp, #8
 802841c:	af00      	add	r7, sp, #0
    BMS.d.started = 0;
 802841e:	4b0e      	ldr	r3, [pc, #56]	; (8028458 <BMS_Init+0x40>)
 8028420:	2200      	movs	r2, #0
 8028422:	701a      	strb	r2, [r3, #0]
    BMS.d.soc = 0;
 8028424:	4b0c      	ldr	r3, [pc, #48]	; (8028458 <BMS_Init+0x40>)
 8028426:	2200      	movs	r2, #0
 8028428:	705a      	strb	r2, [r3, #1]
    BMS.d.overheat = 0;
 802842a:	4b0b      	ldr	r3, [pc, #44]	; (8028458 <BMS_Init+0x40>)
 802842c:	2200      	movs	r2, #0
 802842e:	709a      	strb	r2, [r3, #2]
    BMS.d.warning = 0;
 8028430:	4b09      	ldr	r3, [pc, #36]	; (8028458 <BMS_Init+0x40>)
 8028432:	2200      	movs	r2, #0
 8028434:	70da      	strb	r2, [r3, #3]
    // set each BMS
    for (uint8_t i = 0; i < BMS_COUNT; i++) {
 8028436:	2300      	movs	r3, #0
 8028438:	71fb      	strb	r3, [r7, #7]
 802843a:	e006      	b.n	802844a <BMS_Init+0x32>
        BMS_ResetIndex(i);
 802843c:	79fb      	ldrb	r3, [r7, #7]
 802843e:	4618      	mov	r0, r3
 8028440:	f000 f852 	bl	80284e8 <BMS_ResetIndex>
    for (uint8_t i = 0; i < BMS_COUNT; i++) {
 8028444:	79fb      	ldrb	r3, [r7, #7]
 8028446:	3301      	adds	r3, #1
 8028448:	71fb      	strb	r3, [r7, #7]
 802844a:	79fb      	ldrb	r3, [r7, #7]
 802844c:	2b01      	cmp	r3, #1
 802844e:	d9f5      	bls.n	802843c <BMS_Init+0x24>
    }
}
 8028450:	bf00      	nop
 8028452:	3708      	adds	r7, #8
 8028454:	46bd      	mov	sp, r7
 8028456:	bd80      	pop	{r7, pc}
 8028458:	20000178 	.word	0x20000178

0802845c <BMS_PowerOverCan>:

void BMS_PowerOverCan(uint8_t on) {
 802845c:	b580      	push	{r7, lr}
 802845e:	b082      	sub	sp, #8
 8028460:	af00      	add	r7, sp, #0
 8028462:	4603      	mov	r3, r0
 8028464:	71fb      	strb	r3, [r7, #7]
    if (on) {
 8028466:	79fb      	ldrb	r3, [r7, #7]
 8028468:	2b00      	cmp	r3, #0
 802846a:	d016      	beq.n	802849a <BMS_PowerOverCan+0x3e>
        if (!BMS.CheckRun(1) && !BMS.CheckState(BMS_STATE_DISCHARGE)) {
 802846c:	4b1d      	ldr	r3, [pc, #116]	; (80284e4 <BMS_PowerOverCan+0x88>)
 802846e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8028470:	2001      	movs	r0, #1
 8028472:	4798      	blx	r3
 8028474:	4603      	mov	r3, r0
 8028476:	2b00      	cmp	r3, #0
 8028478:	d10b      	bne.n	8028492 <BMS_PowerOverCan+0x36>
 802847a:	4b1a      	ldr	r3, [pc, #104]	; (80284e4 <BMS_PowerOverCan+0x88>)
 802847c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802847e:	2001      	movs	r0, #1
 8028480:	4798      	blx	r3
 8028482:	4603      	mov	r3, r0
 8028484:	2b00      	cmp	r3, #0
 8028486:	d104      	bne.n	8028492 <BMS_PowerOverCan+0x36>
            BMS_CAN_TX_Setting(1, BMS_STATE_DISCHARGE);
 8028488:	2101      	movs	r1, #1
 802848a:	2001      	movs	r0, #1
 802848c:	f000 fbee 	bl	8028c6c <BMS_CAN_TX_Setting>
 8028490:	e023      	b.n	80284da <BMS_PowerOverCan+0x7e>
        } else {
            // completely ON
            BMS.d.started = 1;
 8028492:	4b14      	ldr	r3, [pc, #80]	; (80284e4 <BMS_PowerOverCan+0x88>)
 8028494:	2201      	movs	r2, #1
 8028496:	701a      	strb	r2, [r3, #0]
            // other parameters
            BMS.d.overheat = 0;
            BMS.d.warning = 1;
        }
    }
}
 8028498:	e01f      	b.n	80284da <BMS_PowerOverCan+0x7e>
        if (!BMS.CheckRun(0) || !BMS.CheckState(BMS_STATE_IDLE)) {
 802849a:	4b12      	ldr	r3, [pc, #72]	; (80284e4 <BMS_PowerOverCan+0x88>)
 802849c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802849e:	2000      	movs	r0, #0
 80284a0:	4798      	blx	r3
 80284a2:	4603      	mov	r3, r0
 80284a4:	2b00      	cmp	r3, #0
 80284a6:	d006      	beq.n	80284b6 <BMS_PowerOverCan+0x5a>
 80284a8:	4b0e      	ldr	r3, [pc, #56]	; (80284e4 <BMS_PowerOverCan+0x88>)
 80284aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80284ac:	2000      	movs	r0, #0
 80284ae:	4798      	blx	r3
 80284b0:	4603      	mov	r3, r0
 80284b2:	2b00      	cmp	r3, #0
 80284b4:	d104      	bne.n	80284c0 <BMS_PowerOverCan+0x64>
            BMS_CAN_TX_Setting(0, BMS_STATE_IDLE);
 80284b6:	2100      	movs	r1, #0
 80284b8:	2000      	movs	r0, #0
 80284ba:	f000 fbd7 	bl	8028c6c <BMS_CAN_TX_Setting>
 80284be:	e00c      	b.n	80284da <BMS_PowerOverCan+0x7e>
            BMS.d.started = 0;
 80284c0:	4b08      	ldr	r3, [pc, #32]	; (80284e4 <BMS_PowerOverCan+0x88>)
 80284c2:	2200      	movs	r2, #0
 80284c4:	701a      	strb	r2, [r3, #0]
            BMS.d.soc = 0;
 80284c6:	4b07      	ldr	r3, [pc, #28]	; (80284e4 <BMS_PowerOverCan+0x88>)
 80284c8:	2200      	movs	r2, #0
 80284ca:	705a      	strb	r2, [r3, #1]
            BMS.d.overheat = 0;
 80284cc:	4b05      	ldr	r3, [pc, #20]	; (80284e4 <BMS_PowerOverCan+0x88>)
 80284ce:	2200      	movs	r2, #0
 80284d0:	709a      	strb	r2, [r3, #2]
            BMS.d.warning = 1;
 80284d2:	4b04      	ldr	r3, [pc, #16]	; (80284e4 <BMS_PowerOverCan+0x88>)
 80284d4:	2201      	movs	r2, #1
 80284d6:	70da      	strb	r2, [r3, #3]
}
 80284d8:	e7ff      	b.n	80284da <BMS_PowerOverCan+0x7e>
 80284da:	bf00      	nop
 80284dc:	3708      	adds	r7, #8
 80284de:	46bd      	mov	sp, r7
 80284e0:	bd80      	pop	{r7, pc}
 80284e2:	bf00      	nop
 80284e4:	20000178 	.word	0x20000178

080284e8 <BMS_ResetIndex>:

void BMS_ResetIndex(uint8_t i) {
 80284e8:	b480      	push	{r7}
 80284ea:	b083      	sub	sp, #12
 80284ec:	af00      	add	r7, sp, #0
 80284ee:	4603      	mov	r3, r0
 80284f0:	71fb      	strb	r3, [r7, #7]
    BMS.d.pack[i].id = BMS_ID_NONE;
 80284f2:	79fa      	ldrb	r2, [r7, #7]
 80284f4:	4931      	ldr	r1, [pc, #196]	; (80285bc <BMS_ResetIndex+0xd4>)
 80284f6:	4613      	mov	r3, r2
 80284f8:	00db      	lsls	r3, r3, #3
 80284fa:	1a9b      	subs	r3, r3, r2
 80284fc:	009b      	lsls	r3, r3, #2
 80284fe:	440b      	add	r3, r1
 8028500:	3304      	adds	r3, #4
 8028502:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8028506:	601a      	str	r2, [r3, #0]
    BMS.d.pack[i].voltage = 0;
 8028508:	79fa      	ldrb	r2, [r7, #7]
 802850a:	492c      	ldr	r1, [pc, #176]	; (80285bc <BMS_ResetIndex+0xd4>)
 802850c:	4613      	mov	r3, r2
 802850e:	00db      	lsls	r3, r3, #3
 8028510:	1a9b      	subs	r3, r3, r2
 8028512:	009b      	lsls	r3, r3, #2
 8028514:	440b      	add	r3, r1
 8028516:	3308      	adds	r3, #8
 8028518:	f04f 0200 	mov.w	r2, #0
 802851c:	601a      	str	r2, [r3, #0]
    BMS.d.pack[i].current = 0;
 802851e:	79fa      	ldrb	r2, [r7, #7]
 8028520:	4926      	ldr	r1, [pc, #152]	; (80285bc <BMS_ResetIndex+0xd4>)
 8028522:	4613      	mov	r3, r2
 8028524:	00db      	lsls	r3, r3, #3
 8028526:	1a9b      	subs	r3, r3, r2
 8028528:	009b      	lsls	r3, r3, #2
 802852a:	440b      	add	r3, r1
 802852c:	330c      	adds	r3, #12
 802852e:	f04f 0200 	mov.w	r2, #0
 8028532:	601a      	str	r2, [r3, #0]
    BMS.d.pack[i].soc = 0;
 8028534:	79fa      	ldrb	r2, [r7, #7]
 8028536:	4921      	ldr	r1, [pc, #132]	; (80285bc <BMS_ResetIndex+0xd4>)
 8028538:	4613      	mov	r3, r2
 802853a:	00db      	lsls	r3, r3, #3
 802853c:	1a9b      	subs	r3, r3, r2
 802853e:	009b      	lsls	r3, r3, #2
 8028540:	440b      	add	r3, r1
 8028542:	3310      	adds	r3, #16
 8028544:	f04f 0200 	mov.w	r2, #0
 8028548:	601a      	str	r2, [r3, #0]
    BMS.d.pack[i].temperature = 0;
 802854a:	79fa      	ldrb	r2, [r7, #7]
 802854c:	491b      	ldr	r1, [pc, #108]	; (80285bc <BMS_ResetIndex+0xd4>)
 802854e:	4613      	mov	r3, r2
 8028550:	00db      	lsls	r3, r3, #3
 8028552:	1a9b      	subs	r3, r3, r2
 8028554:	009b      	lsls	r3, r3, #2
 8028556:	440b      	add	r3, r1
 8028558:	3314      	adds	r3, #20
 802855a:	f04f 0200 	mov.w	r2, #0
 802855e:	601a      	str	r2, [r3, #0]
    BMS.d.pack[i].state = BMS_STATE_IDLE;
 8028560:	79fa      	ldrb	r2, [r7, #7]
 8028562:	4916      	ldr	r1, [pc, #88]	; (80285bc <BMS_ResetIndex+0xd4>)
 8028564:	4613      	mov	r3, r2
 8028566:	00db      	lsls	r3, r3, #3
 8028568:	1a9b      	subs	r3, r3, r2
 802856a:	009b      	lsls	r3, r3, #2
 802856c:	440b      	add	r3, r1
 802856e:	331a      	adds	r3, #26
 8028570:	2200      	movs	r2, #0
 8028572:	701a      	strb	r2, [r3, #0]
    BMS.d.pack[i].started = 0;
 8028574:	79fa      	ldrb	r2, [r7, #7]
 8028576:	4911      	ldr	r1, [pc, #68]	; (80285bc <BMS_ResetIndex+0xd4>)
 8028578:	4613      	mov	r3, r2
 802857a:	00db      	lsls	r3, r3, #3
 802857c:	1a9b      	subs	r3, r3, r2
 802857e:	009b      	lsls	r3, r3, #2
 8028580:	440b      	add	r3, r1
 8028582:	331b      	adds	r3, #27
 8028584:	2200      	movs	r2, #0
 8028586:	701a      	strb	r2, [r3, #0]
    BMS.d.pack[i].flag = 0;
 8028588:	79fa      	ldrb	r2, [r7, #7]
 802858a:	490c      	ldr	r1, [pc, #48]	; (80285bc <BMS_ResetIndex+0xd4>)
 802858c:	4613      	mov	r3, r2
 802858e:	00db      	lsls	r3, r3, #3
 8028590:	1a9b      	subs	r3, r3, r2
 8028592:	009b      	lsls	r3, r3, #2
 8028594:	440b      	add	r3, r1
 8028596:	3318      	adds	r3, #24
 8028598:	2200      	movs	r2, #0
 802859a:	801a      	strh	r2, [r3, #0]
    BMS.d.pack[i].tick = 0;
 802859c:	79fa      	ldrb	r2, [r7, #7]
 802859e:	4907      	ldr	r1, [pc, #28]	; (80285bc <BMS_ResetIndex+0xd4>)
 80285a0:	4613      	mov	r3, r2
 80285a2:	00db      	lsls	r3, r3, #3
 80285a4:	1a9b      	subs	r3, r3, r2
 80285a6:	009b      	lsls	r3, r3, #2
 80285a8:	440b      	add	r3, r1
 80285aa:	331c      	adds	r3, #28
 80285ac:	2200      	movs	r2, #0
 80285ae:	601a      	str	r2, [r3, #0]
}
 80285b0:	bf00      	nop
 80285b2:	370c      	adds	r7, #12
 80285b4:	46bd      	mov	sp, r7
 80285b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80285ba:	4770      	bx	lr
 80285bc:	20000178 	.word	0x20000178

080285c0 <BMS_RefreshIndex>:

void BMS_RefreshIndex(void) {
 80285c0:	b580      	push	{r7, lr}
 80285c2:	b082      	sub	sp, #8
 80285c4:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < BMS_COUNT; i++) {
 80285c6:	2300      	movs	r3, #0
 80285c8:	71fb      	strb	r3, [r7, #7]
 80285ca:	e015      	b.n	80285f8 <BMS_RefreshIndex+0x38>
        if ((_GetTickMS() - BMS.d.pack[i].tick) > 500) {
 80285cc:	f017 f903 	bl	803f7d6 <_GetTickMS>
 80285d0:	79fa      	ldrb	r2, [r7, #7]
 80285d2:	490e      	ldr	r1, [pc, #56]	; (802860c <BMS_RefreshIndex+0x4c>)
 80285d4:	4613      	mov	r3, r2
 80285d6:	00db      	lsls	r3, r3, #3
 80285d8:	1a9b      	subs	r3, r3, r2
 80285da:	009b      	lsls	r3, r3, #2
 80285dc:	440b      	add	r3, r1
 80285de:	331c      	adds	r3, #28
 80285e0:	681b      	ldr	r3, [r3, #0]
 80285e2:	1ac3      	subs	r3, r0, r3
 80285e4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80285e8:	d903      	bls.n	80285f2 <BMS_RefreshIndex+0x32>
            BMS_ResetIndex(i);
 80285ea:	79fb      	ldrb	r3, [r7, #7]
 80285ec:	4618      	mov	r0, r3
 80285ee:	f7ff ff7b 	bl	80284e8 <BMS_ResetIndex>
    for (uint8_t i = 0; i < BMS_COUNT; i++) {
 80285f2:	79fb      	ldrb	r3, [r7, #7]
 80285f4:	3301      	adds	r3, #1
 80285f6:	71fb      	strb	r3, [r7, #7]
 80285f8:	79fb      	ldrb	r3, [r7, #7]
 80285fa:	2b01      	cmp	r3, #1
 80285fc:	d9e6      	bls.n	80285cc <BMS_RefreshIndex+0xc>
        }
    }
    // update data
    BMS_MergeData();
 80285fe:	f000 f9cf 	bl	80289a0 <BMS_MergeData>
}
 8028602:	bf00      	nop
 8028604:	3708      	adds	r7, #8
 8028606:	46bd      	mov	sp, r7
 8028608:	bd80      	pop	{r7, pc}
 802860a:	bf00      	nop
 802860c:	20000178 	.word	0x20000178

08028610 <BMS_GetIndex>:

uint8_t BMS_GetIndex(uint32_t id) {
 8028610:	b480      	push	{r7}
 8028612:	b085      	sub	sp, #20
 8028614:	af00      	add	r7, sp, #0
 8028616:	6078      	str	r0, [r7, #4]
    uint8_t i;

    // find index (if already exist)
    for (i = 0; i < BMS_COUNT; i++) {
 8028618:	2300      	movs	r3, #0
 802861a:	73fb      	strb	r3, [r7, #15]
 802861c:	e010      	b.n	8028640 <BMS_GetIndex+0x30>
        if (BMS.d.pack[i].id == id) {
 802861e:	7bfa      	ldrb	r2, [r7, #15]
 8028620:	4918      	ldr	r1, [pc, #96]	; (8028684 <BMS_GetIndex+0x74>)
 8028622:	4613      	mov	r3, r2
 8028624:	00db      	lsls	r3, r3, #3
 8028626:	1a9b      	subs	r3, r3, r2
 8028628:	009b      	lsls	r3, r3, #2
 802862a:	440b      	add	r3, r1
 802862c:	3304      	adds	r3, #4
 802862e:	681b      	ldr	r3, [r3, #0]
 8028630:	687a      	ldr	r2, [r7, #4]
 8028632:	429a      	cmp	r2, r3
 8028634:	d101      	bne.n	802863a <BMS_GetIndex+0x2a>
            return i;
 8028636:	7bfb      	ldrb	r3, [r7, #15]
 8028638:	e01d      	b.n	8028676 <BMS_GetIndex+0x66>
    for (i = 0; i < BMS_COUNT; i++) {
 802863a:	7bfb      	ldrb	r3, [r7, #15]
 802863c:	3301      	adds	r3, #1
 802863e:	73fb      	strb	r3, [r7, #15]
 8028640:	7bfb      	ldrb	r3, [r7, #15]
 8028642:	2b01      	cmp	r3, #1
 8028644:	d9eb      	bls.n	802861e <BMS_GetIndex+0xe>
        }
    }

    // finx index (if not exist)
    for (i = 0; i < BMS_COUNT; i++) {
 8028646:	2300      	movs	r3, #0
 8028648:	73fb      	strb	r3, [r7, #15]
 802864a:	e010      	b.n	802866e <BMS_GetIndex+0x5e>
        if (BMS.d.pack[i].id == BMS_ID_NONE) {
 802864c:	7bfa      	ldrb	r2, [r7, #15]
 802864e:	490d      	ldr	r1, [pc, #52]	; (8028684 <BMS_GetIndex+0x74>)
 8028650:	4613      	mov	r3, r2
 8028652:	00db      	lsls	r3, r3, #3
 8028654:	1a9b      	subs	r3, r3, r2
 8028656:	009b      	lsls	r3, r3, #2
 8028658:	440b      	add	r3, r1
 802865a:	3304      	adds	r3, #4
 802865c:	681b      	ldr	r3, [r3, #0]
 802865e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8028662:	d101      	bne.n	8028668 <BMS_GetIndex+0x58>
            return i;
 8028664:	7bfb      	ldrb	r3, [r7, #15]
 8028666:	e006      	b.n	8028676 <BMS_GetIndex+0x66>
    for (i = 0; i < BMS_COUNT; i++) {
 8028668:	7bfb      	ldrb	r3, [r7, #15]
 802866a:	3301      	adds	r3, #1
 802866c:	73fb      	strb	r3, [r7, #15]
 802866e:	7bfb      	ldrb	r3, [r7, #15]
 8028670:	2b01      	cmp	r3, #1
 8028672:	d9eb      	bls.n	802864c <BMS_GetIndex+0x3c>
        }
    }

    // force replace first index (if already full)
    return 0;
 8028674:	2300      	movs	r3, #0
}
 8028676:	4618      	mov	r0, r3
 8028678:	3714      	adds	r7, #20
 802867a:	46bd      	mov	sp, r7
 802867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028680:	4770      	bx	lr
 8028682:	bf00      	nop
 8028684:	20000178 	.word	0x20000178

08028688 <BMS_SetEvents>:

void BMS_SetEvents(uint16_t flag) {
 8028688:	b580      	push	{r7, lr}
 802868a:	b082      	sub	sp, #8
 802868c:	af00      	add	r7, sp, #0
 802868e:	4603      	mov	r3, r0
 8028690:	80fb      	strh	r3, [r7, #6]
    // Set events
    VCU.SetEvent(EV_BMS_SHORT_CIRCUIT, _R1(flag, 0));
 8028692:	4b9a      	ldr	r3, [pc, #616]	; (80288fc <BMS_SetEvents+0x274>)
 8028694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8028696:	88fa      	ldrh	r2, [r7, #6]
 8028698:	b2d2      	uxtb	r2, r2
 802869a:	f002 0201 	and.w	r2, r2, #1
 802869e:	b2d2      	uxtb	r2, r2
 80286a0:	f04f 0000 	mov.w	r0, #0
 80286a4:	f04f 0101 	mov.w	r1, #1
 80286a8:	4798      	blx	r3
    VCU.SetEvent(EV_BMS_DISCHARGE_OVER_CURRENT, _R1(flag, 1));
 80286aa:	4b94      	ldr	r3, [pc, #592]	; (80288fc <BMS_SetEvents+0x274>)
 80286ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80286ae:	88fa      	ldrh	r2, [r7, #6]
 80286b0:	0852      	lsrs	r2, r2, #1
 80286b2:	b292      	uxth	r2, r2
 80286b4:	b2d2      	uxtb	r2, r2
 80286b6:	f002 0201 	and.w	r2, r2, #1
 80286ba:	b2d2      	uxtb	r2, r2
 80286bc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80286c0:	f04f 0100 	mov.w	r1, #0
 80286c4:	4798      	blx	r3
    VCU.SetEvent(EV_BMS_CHARGE_OVER_CURRENT, _R1(flag, 2));
 80286c6:	4b8d      	ldr	r3, [pc, #564]	; (80288fc <BMS_SetEvents+0x274>)
 80286c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80286ca:	88fa      	ldrh	r2, [r7, #6]
 80286cc:	0892      	lsrs	r2, r2, #2
 80286ce:	b292      	uxth	r2, r2
 80286d0:	b2d2      	uxtb	r2, r2
 80286d2:	f002 0201 	and.w	r2, r2, #1
 80286d6:	b2d2      	uxtb	r2, r2
 80286d8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80286dc:	f04f 0100 	mov.w	r1, #0
 80286e0:	4798      	blx	r3
    VCU.SetEvent(EV_BMS_DISCHARGE_OVER_TEMPERATURE, _R1(flag, 3));
 80286e2:	4b86      	ldr	r3, [pc, #536]	; (80288fc <BMS_SetEvents+0x274>)
 80286e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80286e6:	88fa      	ldrh	r2, [r7, #6]
 80286e8:	08d2      	lsrs	r2, r2, #3
 80286ea:	b292      	uxth	r2, r2
 80286ec:	b2d2      	uxtb	r2, r2
 80286ee:	f002 0201 	and.w	r2, r2, #1
 80286f2:	b2d2      	uxtb	r2, r2
 80286f4:	f04f 0000 	mov.w	r0, #0
 80286f8:	f04f 0102 	mov.w	r1, #2
 80286fc:	4798      	blx	r3
    VCU.SetEvent(EV_BMS_DISCHARGE_UNDER_TEMPERATURE, _R1(flag, 4));
 80286fe:	4b7f      	ldr	r3, [pc, #508]	; (80288fc <BMS_SetEvents+0x274>)
 8028700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8028702:	88fa      	ldrh	r2, [r7, #6]
 8028704:	0912      	lsrs	r2, r2, #4
 8028706:	b292      	uxth	r2, r2
 8028708:	b2d2      	uxtb	r2, r2
 802870a:	f002 0201 	and.w	r2, r2, #1
 802870e:	b2d2      	uxtb	r2, r2
 8028710:	f04f 0000 	mov.w	r0, #0
 8028714:	f04f 0104 	mov.w	r1, #4
 8028718:	4798      	blx	r3
    VCU.SetEvent(EV_BMS_CHARGE_OVER_TEMPERATURE, _R1(flag, 5));
 802871a:	4b78      	ldr	r3, [pc, #480]	; (80288fc <BMS_SetEvents+0x274>)
 802871c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802871e:	88fa      	ldrh	r2, [r7, #6]
 8028720:	0952      	lsrs	r2, r2, #5
 8028722:	b292      	uxth	r2, r2
 8028724:	b2d2      	uxtb	r2, r2
 8028726:	f002 0201 	and.w	r2, r2, #1
 802872a:	b2d2      	uxtb	r2, r2
 802872c:	f04f 0000 	mov.w	r0, #0
 8028730:	f04f 0108 	mov.w	r1, #8
 8028734:	4798      	blx	r3
    VCU.SetEvent(EV_BMS_CHARGE_UNDER_TEMPERATURE, _R1(flag, 6));
 8028736:	4b71      	ldr	r3, [pc, #452]	; (80288fc <BMS_SetEvents+0x274>)
 8028738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802873a:	88fa      	ldrh	r2, [r7, #6]
 802873c:	0992      	lsrs	r2, r2, #6
 802873e:	b292      	uxth	r2, r2
 8028740:	b2d2      	uxtb	r2, r2
 8028742:	f002 0201 	and.w	r2, r2, #1
 8028746:	b2d2      	uxtb	r2, r2
 8028748:	f04f 0000 	mov.w	r0, #0
 802874c:	f04f 0110 	mov.w	r1, #16
 8028750:	4798      	blx	r3
    VCU.SetEvent(EV_BMS_UNBALANCE, _R1(flag, 7));
 8028752:	4b6a      	ldr	r3, [pc, #424]	; (80288fc <BMS_SetEvents+0x274>)
 8028754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8028756:	88fa      	ldrh	r2, [r7, #6]
 8028758:	09d2      	lsrs	r2, r2, #7
 802875a:	b292      	uxth	r2, r2
 802875c:	b2d2      	uxtb	r2, r2
 802875e:	f002 0201 	and.w	r2, r2, #1
 8028762:	b2d2      	uxtb	r2, r2
 8028764:	f04f 0000 	mov.w	r0, #0
 8028768:	f44f 7180 	mov.w	r1, #256	; 0x100
 802876c:	4798      	blx	r3
    VCU.SetEvent(EV_BMS_UNDER_VOLTAGE, _R1(flag, 8));
 802876e:	4b63      	ldr	r3, [pc, #396]	; (80288fc <BMS_SetEvents+0x274>)
 8028770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8028772:	88fa      	ldrh	r2, [r7, #6]
 8028774:	0a12      	lsrs	r2, r2, #8
 8028776:	b292      	uxth	r2, r2
 8028778:	b2d2      	uxtb	r2, r2
 802877a:	f002 0201 	and.w	r2, r2, #1
 802877e:	b2d2      	uxtb	r2, r2
 8028780:	f04f 0000 	mov.w	r0, #0
 8028784:	f04f 0120 	mov.w	r1, #32
 8028788:	4798      	blx	r3
    VCU.SetEvent(EV_BMS_OVER_VOLTAGE, _R1(flag, 9));
 802878a:	4b5c      	ldr	r3, [pc, #368]	; (80288fc <BMS_SetEvents+0x274>)
 802878c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802878e:	88fa      	ldrh	r2, [r7, #6]
 8028790:	0a52      	lsrs	r2, r2, #9
 8028792:	b292      	uxth	r2, r2
 8028794:	b2d2      	uxtb	r2, r2
 8028796:	f002 0201 	and.w	r2, r2, #1
 802879a:	b2d2      	uxtb	r2, r2
 802879c:	f04f 0000 	mov.w	r0, #0
 80287a0:	f04f 0140 	mov.w	r1, #64	; 0x40
 80287a4:	4798      	blx	r3
    VCU.SetEvent(EV_BMS_OVER_DISCHARGE_CAPACITY, _R1(flag, 10));
 80287a6:	4b55      	ldr	r3, [pc, #340]	; (80288fc <BMS_SetEvents+0x274>)
 80287a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80287aa:	88fa      	ldrh	r2, [r7, #6]
 80287ac:	0a92      	lsrs	r2, r2, #10
 80287ae:	b292      	uxth	r2, r2
 80287b0:	b2d2      	uxtb	r2, r2
 80287b2:	f002 0201 	and.w	r2, r2, #1
 80287b6:	b2d2      	uxtb	r2, r2
 80287b8:	f04f 0000 	mov.w	r0, #0
 80287bc:	f04f 0180 	mov.w	r1, #128	; 0x80
 80287c0:	4798      	blx	r3
    VCU.SetEvent(EV_BMS_SYSTEM_FAILURE, _R1(flag, 11));
 80287c2:	4b4e      	ldr	r3, [pc, #312]	; (80288fc <BMS_SetEvents+0x274>)
 80287c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80287c6:	88fa      	ldrh	r2, [r7, #6]
 80287c8:	0ad2      	lsrs	r2, r2, #11
 80287ca:	b292      	uxth	r2, r2
 80287cc:	b2d2      	uxtb	r2, r2
 80287ce:	f002 0201 	and.w	r2, r2, #1
 80287d2:	b2d2      	uxtb	r2, r2
 80287d4:	f04f 0000 	mov.w	r0, #0
 80287d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80287dc:	4798      	blx	r3

    // Parse event for indicator
    BMS.d.overheat = VCU.ReadEvent(EV_BMS_DISCHARGE_OVER_TEMPERATURE) ||
 80287de:	4b47      	ldr	r3, [pc, #284]	; (80288fc <BMS_SetEvents+0x274>)
 80287e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80287e2:	f04f 0000 	mov.w	r0, #0
 80287e6:	f04f 0102 	mov.w	r1, #2
 80287ea:	4798      	blx	r3
 80287ec:	4603      	mov	r3, r0
            VCU.ReadEvent(EV_BMS_DISCHARGE_UNDER_TEMPERATURE) ||
            VCU.ReadEvent(EV_BMS_CHARGE_OVER_TEMPERATURE) ||
 80287ee:	2b00      	cmp	r3, #0
 80287f0:	d11d      	bne.n	802882e <BMS_SetEvents+0x1a6>
            VCU.ReadEvent(EV_BMS_DISCHARGE_UNDER_TEMPERATURE) ||
 80287f2:	4b42      	ldr	r3, [pc, #264]	; (80288fc <BMS_SetEvents+0x274>)
 80287f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80287f6:	f04f 0000 	mov.w	r0, #0
 80287fa:	f04f 0104 	mov.w	r1, #4
 80287fe:	4798      	blx	r3
 8028800:	4603      	mov	r3, r0
    BMS.d.overheat = VCU.ReadEvent(EV_BMS_DISCHARGE_OVER_TEMPERATURE) ||
 8028802:	2b00      	cmp	r3, #0
 8028804:	d113      	bne.n	802882e <BMS_SetEvents+0x1a6>
            VCU.ReadEvent(EV_BMS_CHARGE_OVER_TEMPERATURE) ||
 8028806:	4b3d      	ldr	r3, [pc, #244]	; (80288fc <BMS_SetEvents+0x274>)
 8028808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802880a:	f04f 0000 	mov.w	r0, #0
 802880e:	f04f 0108 	mov.w	r1, #8
 8028812:	4798      	blx	r3
 8028814:	4603      	mov	r3, r0
            VCU.ReadEvent(EV_BMS_DISCHARGE_UNDER_TEMPERATURE) ||
 8028816:	2b00      	cmp	r3, #0
 8028818:	d109      	bne.n	802882e <BMS_SetEvents+0x1a6>
            VCU.ReadEvent(EV_BMS_CHARGE_UNDER_TEMPERATURE);
 802881a:	4b38      	ldr	r3, [pc, #224]	; (80288fc <BMS_SetEvents+0x274>)
 802881c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802881e:	f04f 0000 	mov.w	r0, #0
 8028822:	f04f 0110 	mov.w	r1, #16
 8028826:	4798      	blx	r3
 8028828:	4603      	mov	r3, r0
            VCU.ReadEvent(EV_BMS_CHARGE_OVER_TEMPERATURE) ||
 802882a:	2b00      	cmp	r3, #0
 802882c:	d001      	beq.n	8028832 <BMS_SetEvents+0x1aa>
 802882e:	2301      	movs	r3, #1
 8028830:	e000      	b.n	8028834 <BMS_SetEvents+0x1ac>
 8028832:	2300      	movs	r3, #0
    BMS.d.overheat = VCU.ReadEvent(EV_BMS_DISCHARGE_OVER_TEMPERATURE) ||
 8028834:	b2da      	uxtb	r2, r3
 8028836:	4b32      	ldr	r3, [pc, #200]	; (8028900 <BMS_SetEvents+0x278>)
 8028838:	709a      	strb	r2, [r3, #2]
    BMS.d.warning = VCU.ReadEvent(EV_BMS_SHORT_CIRCUIT) ||
 802883a:	4b30      	ldr	r3, [pc, #192]	; (80288fc <BMS_SetEvents+0x274>)
 802883c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802883e:	f04f 0000 	mov.w	r0, #0
 8028842:	f04f 0101 	mov.w	r1, #1
 8028846:	4798      	blx	r3
 8028848:	4603      	mov	r3, r0
            VCU.ReadEvent(EV_BMS_DISCHARGE_OVER_CURRENT) ||
            VCU.ReadEvent(EV_BMS_CHARGE_OVER_CURRENT) ||
            VCU.ReadEvent(EV_BMS_UNBALANCE) ||
            VCU.ReadEvent(EV_BMS_UNDER_VOLTAGE) ||
            VCU.ReadEvent(EV_BMS_OVER_VOLTAGE) ||
            VCU.ReadEvent(EV_BMS_OVER_DISCHARGE_CAPACITY) ||
 802884a:	2b00      	cmp	r3, #0
 802884c:	d145      	bne.n	80288da <BMS_SetEvents+0x252>
            VCU.ReadEvent(EV_BMS_DISCHARGE_OVER_CURRENT) ||
 802884e:	4b2b      	ldr	r3, [pc, #172]	; (80288fc <BMS_SetEvents+0x274>)
 8028850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8028852:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8028856:	f04f 0100 	mov.w	r1, #0
 802885a:	4798      	blx	r3
 802885c:	4603      	mov	r3, r0
    BMS.d.warning = VCU.ReadEvent(EV_BMS_SHORT_CIRCUIT) ||
 802885e:	2b00      	cmp	r3, #0
 8028860:	d13b      	bne.n	80288da <BMS_SetEvents+0x252>
            VCU.ReadEvent(EV_BMS_CHARGE_OVER_CURRENT) ||
 8028862:	4b26      	ldr	r3, [pc, #152]	; (80288fc <BMS_SetEvents+0x274>)
 8028864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8028866:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 802886a:	f04f 0100 	mov.w	r1, #0
 802886e:	4798      	blx	r3
 8028870:	4603      	mov	r3, r0
            VCU.ReadEvent(EV_BMS_DISCHARGE_OVER_CURRENT) ||
 8028872:	2b00      	cmp	r3, #0
 8028874:	d131      	bne.n	80288da <BMS_SetEvents+0x252>
            VCU.ReadEvent(EV_BMS_UNBALANCE) ||
 8028876:	4b21      	ldr	r3, [pc, #132]	; (80288fc <BMS_SetEvents+0x274>)
 8028878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802887a:	f04f 0000 	mov.w	r0, #0
 802887e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8028882:	4798      	blx	r3
 8028884:	4603      	mov	r3, r0
            VCU.ReadEvent(EV_BMS_CHARGE_OVER_CURRENT) ||
 8028886:	2b00      	cmp	r3, #0
 8028888:	d127      	bne.n	80288da <BMS_SetEvents+0x252>
            VCU.ReadEvent(EV_BMS_UNDER_VOLTAGE) ||
 802888a:	4b1c      	ldr	r3, [pc, #112]	; (80288fc <BMS_SetEvents+0x274>)
 802888c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802888e:	f04f 0000 	mov.w	r0, #0
 8028892:	f04f 0120 	mov.w	r1, #32
 8028896:	4798      	blx	r3
 8028898:	4603      	mov	r3, r0
            VCU.ReadEvent(EV_BMS_UNBALANCE) ||
 802889a:	2b00      	cmp	r3, #0
 802889c:	d11d      	bne.n	80288da <BMS_SetEvents+0x252>
            VCU.ReadEvent(EV_BMS_OVER_VOLTAGE) ||
 802889e:	4b17      	ldr	r3, [pc, #92]	; (80288fc <BMS_SetEvents+0x274>)
 80288a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80288a2:	f04f 0000 	mov.w	r0, #0
 80288a6:	f04f 0140 	mov.w	r1, #64	; 0x40
 80288aa:	4798      	blx	r3
 80288ac:	4603      	mov	r3, r0
            VCU.ReadEvent(EV_BMS_UNDER_VOLTAGE) ||
 80288ae:	2b00      	cmp	r3, #0
 80288b0:	d113      	bne.n	80288da <BMS_SetEvents+0x252>
            VCU.ReadEvent(EV_BMS_OVER_DISCHARGE_CAPACITY) ||
 80288b2:	4b12      	ldr	r3, [pc, #72]	; (80288fc <BMS_SetEvents+0x274>)
 80288b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80288b6:	f04f 0000 	mov.w	r0, #0
 80288ba:	f04f 0180 	mov.w	r1, #128	; 0x80
 80288be:	4798      	blx	r3
 80288c0:	4603      	mov	r3, r0
            VCU.ReadEvent(EV_BMS_OVER_VOLTAGE) ||
 80288c2:	2b00      	cmp	r3, #0
 80288c4:	d109      	bne.n	80288da <BMS_SetEvents+0x252>
            VCU.ReadEvent(EV_BMS_SYSTEM_FAILURE);
 80288c6:	4b0d      	ldr	r3, [pc, #52]	; (80288fc <BMS_SetEvents+0x274>)
 80288c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80288ca:	f04f 0000 	mov.w	r0, #0
 80288ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80288d2:	4798      	blx	r3
 80288d4:	4603      	mov	r3, r0
            VCU.ReadEvent(EV_BMS_OVER_DISCHARGE_CAPACITY) ||
 80288d6:	2b00      	cmp	r3, #0
 80288d8:	d001      	beq.n	80288de <BMS_SetEvents+0x256>
 80288da:	2301      	movs	r3, #1
 80288dc:	e000      	b.n	80288e0 <BMS_SetEvents+0x258>
 80288de:	2300      	movs	r3, #0
    BMS.d.warning = VCU.ReadEvent(EV_BMS_SHORT_CIRCUIT) ||
 80288e0:	b2da      	uxtb	r2, r3
 80288e2:	4b07      	ldr	r3, [pc, #28]	; (8028900 <BMS_SetEvents+0x278>)
 80288e4:	70da      	strb	r2, [r3, #3]

    // Handle overheat
    HAL_GPIO_WritePin(EXT_BMS_FAN_PWR_GPIO_Port, EXT_BMS_FAN_PWR_Pin, BMS.d.overheat);
 80288e6:	4b06      	ldr	r3, [pc, #24]	; (8028900 <BMS_SetEvents+0x278>)
 80288e8:	789b      	ldrb	r3, [r3, #2]
 80288ea:	461a      	mov	r2, r3
 80288ec:	2140      	movs	r1, #64	; 0x40
 80288ee:	4805      	ldr	r0, [pc, #20]	; (8028904 <BMS_SetEvents+0x27c>)
 80288f0:	f007 fb9c 	bl	803002c <HAL_GPIO_WritePin>
}
 80288f4:	bf00      	nop
 80288f6:	3708      	adds	r7, #8
 80288f8:	46bd      	mov	sp, r7
 80288fa:	bd80      	pop	{r7, pc}
 80288fc:	20000228 	.word	0x20000228
 8028900:	20000178 	.word	0x20000178
 8028904:	40020c00 	.word	0x40020c00

08028908 <BMS_CheckRun>:

uint8_t BMS_CheckRun(uint8_t state) {
 8028908:	b480      	push	{r7}
 802890a:	b085      	sub	sp, #20
 802890c:	af00      	add	r7, sp, #0
 802890e:	4603      	mov	r3, r0
 8028910:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < BMS_COUNT; i++) {
 8028912:	2300      	movs	r3, #0
 8028914:	73fb      	strb	r3, [r7, #15]
 8028916:	e010      	b.n	802893a <BMS_CheckRun+0x32>
        if (BMS.d.pack[i].started != state) {
 8028918:	7bfa      	ldrb	r2, [r7, #15]
 802891a:	490d      	ldr	r1, [pc, #52]	; (8028950 <BMS_CheckRun+0x48>)
 802891c:	4613      	mov	r3, r2
 802891e:	00db      	lsls	r3, r3, #3
 8028920:	1a9b      	subs	r3, r3, r2
 8028922:	009b      	lsls	r3, r3, #2
 8028924:	440b      	add	r3, r1
 8028926:	331b      	adds	r3, #27
 8028928:	781b      	ldrb	r3, [r3, #0]
 802892a:	79fa      	ldrb	r2, [r7, #7]
 802892c:	429a      	cmp	r2, r3
 802892e:	d001      	beq.n	8028934 <BMS_CheckRun+0x2c>
            return 0;
 8028930:	2300      	movs	r3, #0
 8028932:	e006      	b.n	8028942 <BMS_CheckRun+0x3a>
    for (uint8_t i = 0; i < BMS_COUNT; i++) {
 8028934:	7bfb      	ldrb	r3, [r7, #15]
 8028936:	3301      	adds	r3, #1
 8028938:	73fb      	strb	r3, [r7, #15]
 802893a:	7bfb      	ldrb	r3, [r7, #15]
 802893c:	2b01      	cmp	r3, #1
 802893e:	d9eb      	bls.n	8028918 <BMS_CheckRun+0x10>
        }
    }
    return 1;
 8028940:	2301      	movs	r3, #1
}
 8028942:	4618      	mov	r0, r3
 8028944:	3714      	adds	r7, #20
 8028946:	46bd      	mov	sp, r7
 8028948:	f85d 7b04 	ldr.w	r7, [sp], #4
 802894c:	4770      	bx	lr
 802894e:	bf00      	nop
 8028950:	20000178 	.word	0x20000178

08028954 <BMS_CheckState>:

uint8_t BMS_CheckState(BMS_STATE state) {
 8028954:	b480      	push	{r7}
 8028956:	b085      	sub	sp, #20
 8028958:	af00      	add	r7, sp, #0
 802895a:	4603      	mov	r3, r0
 802895c:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < BMS_COUNT; i++) {
 802895e:	2300      	movs	r3, #0
 8028960:	73fb      	strb	r3, [r7, #15]
 8028962:	e010      	b.n	8028986 <BMS_CheckState+0x32>
        if (BMS.d.pack[i].state != state) {
 8028964:	7bfa      	ldrb	r2, [r7, #15]
 8028966:	490d      	ldr	r1, [pc, #52]	; (802899c <BMS_CheckState+0x48>)
 8028968:	4613      	mov	r3, r2
 802896a:	00db      	lsls	r3, r3, #3
 802896c:	1a9b      	subs	r3, r3, r2
 802896e:	009b      	lsls	r3, r3, #2
 8028970:	440b      	add	r3, r1
 8028972:	331a      	adds	r3, #26
 8028974:	781b      	ldrb	r3, [r3, #0]
 8028976:	79fa      	ldrb	r2, [r7, #7]
 8028978:	429a      	cmp	r2, r3
 802897a:	d001      	beq.n	8028980 <BMS_CheckState+0x2c>
            return 0;
 802897c:	2300      	movs	r3, #0
 802897e:	e006      	b.n	802898e <BMS_CheckState+0x3a>
    for (uint8_t i = 0; i < BMS_COUNT; i++) {
 8028980:	7bfb      	ldrb	r3, [r7, #15]
 8028982:	3301      	adds	r3, #1
 8028984:	73fb      	strb	r3, [r7, #15]
 8028986:	7bfb      	ldrb	r3, [r7, #15]
 8028988:	2b01      	cmp	r3, #1
 802898a:	d9eb      	bls.n	8028964 <BMS_CheckState+0x10>
        }
    }
    return 1;
 802898c:	2301      	movs	r3, #1
}
 802898e:	4618      	mov	r0, r3
 8028990:	3714      	adds	r7, #20
 8028992:	46bd      	mov	sp, r7
 8028994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028998:	4770      	bx	lr
 802899a:	bf00      	nop
 802899c:	20000178 	.word	0x20000178

080289a0 <BMS_MergeData>:

void BMS_MergeData(void) {
 80289a0:	b580      	push	{r7, lr}
 80289a2:	b084      	sub	sp, #16
 80289a4:	af00      	add	r7, sp, #0
    uint16_t flags = 0;
 80289a6:	2300      	movs	r3, #0
 80289a8:	81fb      	strh	r3, [r7, #14]
    uint8_t soc = 0, device = 0;
 80289aa:	2300      	movs	r3, #0
 80289ac:	737b      	strb	r3, [r7, #13]
 80289ae:	2300      	movs	r3, #0
 80289b0:	733b      	strb	r3, [r7, #12]

    // Merge flags (OR-ed)
    for (uint8_t i = 0; i < BMS_COUNT; i++) {
 80289b2:	2300      	movs	r3, #0
 80289b4:	72fb      	strb	r3, [r7, #11]
 80289b6:	e00e      	b.n	80289d6 <BMS_MergeData+0x36>
        flags |= BMS.d.pack[i].flag;
 80289b8:	7afa      	ldrb	r2, [r7, #11]
 80289ba:	4929      	ldr	r1, [pc, #164]	; (8028a60 <BMS_MergeData+0xc0>)
 80289bc:	4613      	mov	r3, r2
 80289be:	00db      	lsls	r3, r3, #3
 80289c0:	1a9b      	subs	r3, r3, r2
 80289c2:	009b      	lsls	r3, r3, #2
 80289c4:	440b      	add	r3, r1
 80289c6:	3318      	adds	r3, #24
 80289c8:	881a      	ldrh	r2, [r3, #0]
 80289ca:	89fb      	ldrh	r3, [r7, #14]
 80289cc:	4313      	orrs	r3, r2
 80289ce:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < BMS_COUNT; i++) {
 80289d0:	7afb      	ldrb	r3, [r7, #11]
 80289d2:	3301      	adds	r3, #1
 80289d4:	72fb      	strb	r3, [r7, #11]
 80289d6:	7afb      	ldrb	r3, [r7, #11]
 80289d8:	2b01      	cmp	r3, #1
 80289da:	d9ed      	bls.n	80289b8 <BMS_MergeData+0x18>
    }
    BMS_SetEvents(flags);
 80289dc:	89fb      	ldrh	r3, [r7, #14]
 80289de:	4618      	mov	r0, r3
 80289e0:	f7ff fe52 	bl	8028688 <BMS_SetEvents>

    // Average SOC
    for (uint8_t i = 0; i < BMS_COUNT; i++) {
 80289e4:	2300      	movs	r3, #0
 80289e6:	72bb      	strb	r3, [r7, #10]
 80289e8:	e027      	b.n	8028a3a <BMS_MergeData+0x9a>
        if (BMS.d.pack[i].started == 1) {
 80289ea:	7aba      	ldrb	r2, [r7, #10]
 80289ec:	491c      	ldr	r1, [pc, #112]	; (8028a60 <BMS_MergeData+0xc0>)
 80289ee:	4613      	mov	r3, r2
 80289f0:	00db      	lsls	r3, r3, #3
 80289f2:	1a9b      	subs	r3, r3, r2
 80289f4:	009b      	lsls	r3, r3, #2
 80289f6:	440b      	add	r3, r1
 80289f8:	331b      	adds	r3, #27
 80289fa:	781b      	ldrb	r3, [r3, #0]
 80289fc:	2b01      	cmp	r3, #1
 80289fe:	d119      	bne.n	8028a34 <BMS_MergeData+0x94>
            soc += BMS.d.pack[i].soc;
 8028a00:	7b7b      	ldrb	r3, [r7, #13]
 8028a02:	ee07 3a90 	vmov	s15, r3
 8028a06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8028a0a:	7aba      	ldrb	r2, [r7, #10]
 8028a0c:	4914      	ldr	r1, [pc, #80]	; (8028a60 <BMS_MergeData+0xc0>)
 8028a0e:	4613      	mov	r3, r2
 8028a10:	00db      	lsls	r3, r3, #3
 8028a12:	1a9b      	subs	r3, r3, r2
 8028a14:	009b      	lsls	r3, r3, #2
 8028a16:	440b      	add	r3, r1
 8028a18:	3310      	adds	r3, #16
 8028a1a:	edd3 7a00 	vldr	s15, [r3]
 8028a1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8028a22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8028a26:	edc7 7a01 	vstr	s15, [r7, #4]
 8028a2a:	793b      	ldrb	r3, [r7, #4]
 8028a2c:	737b      	strb	r3, [r7, #13]
            device++;
 8028a2e:	7b3b      	ldrb	r3, [r7, #12]
 8028a30:	3301      	adds	r3, #1
 8028a32:	733b      	strb	r3, [r7, #12]
    for (uint8_t i = 0; i < BMS_COUNT; i++) {
 8028a34:	7abb      	ldrb	r3, [r7, #10]
 8028a36:	3301      	adds	r3, #1
 8028a38:	72bb      	strb	r3, [r7, #10]
 8028a3a:	7abb      	ldrb	r3, [r7, #10]
 8028a3c:	2b01      	cmp	r3, #1
 8028a3e:	d9d4      	bls.n	80289ea <BMS_MergeData+0x4a>
        }
    }
    BMS.d.soc = device ? (soc / device) : soc;
 8028a40:	7b3b      	ldrb	r3, [r7, #12]
 8028a42:	2b00      	cmp	r3, #0
 8028a44:	d005      	beq.n	8028a52 <BMS_MergeData+0xb2>
 8028a46:	7b7a      	ldrb	r2, [r7, #13]
 8028a48:	7b3b      	ldrb	r3, [r7, #12]
 8028a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8028a4e:	b2db      	uxtb	r3, r3
 8028a50:	e000      	b.n	8028a54 <BMS_MergeData+0xb4>
 8028a52:	7b7b      	ldrb	r3, [r7, #13]
 8028a54:	4a02      	ldr	r2, [pc, #8]	; (8028a60 <BMS_MergeData+0xc0>)
 8028a56:	7053      	strb	r3, [r2, #1]
}
 8028a58:	bf00      	nop
 8028a5a:	3710      	adds	r7, #16
 8028a5c:	46bd      	mov	sp, r7
 8028a5e:	bd80      	pop	{r7, pc}
 8028a60:	20000178 	.word	0x20000178
 8028a64:	00000000 	.word	0x00000000

08028a68 <BMS_CAN_RX_Param1>:

/* ====================================== CAN RX =================================== */
void BMS_CAN_RX_Param1(void) {
 8028a68:	b590      	push	{r4, r7, lr}
 8028a6a:	b083      	sub	sp, #12
 8028a6c:	af00      	add	r7, sp, #0
    CAN_DATA *data = &(CB.rx.data);
 8028a6e:	4b58      	ldr	r3, [pc, #352]	; (8028bd0 <BMS_CAN_RX_Param1+0x168>)
 8028a70:	607b      	str	r3, [r7, #4]
    uint8_t index = BMS.GetIndex(CB.rx.header.ExtId & BMS_ID_MASK);
 8028a72:	4b58      	ldr	r3, [pc, #352]	; (8028bd4 <BMS_CAN_RX_Param1+0x16c>)
 8028a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8028a76:	4a58      	ldr	r2, [pc, #352]	; (8028bd8 <BMS_CAN_RX_Param1+0x170>)
 8028a78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8028a7a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8028a7e:	4610      	mov	r0, r2
 8028a80:	4798      	blx	r3
 8028a82:	4603      	mov	r3, r0
 8028a84:	70fb      	strb	r3, [r7, #3]

    // read the content
    BMS.d.pack[index].voltage = data->u16[0] * 0.01;
 8028a86:	687b      	ldr	r3, [r7, #4]
 8028a88:	881b      	ldrh	r3, [r3, #0]
 8028a8a:	4618      	mov	r0, r3
 8028a8c:	f7f7 fd82 	bl	8020594 <__aeabi_i2d>
 8028a90:	a34b      	add	r3, pc, #300	; (adr r3, 8028bc0 <BMS_CAN_RX_Param1+0x158>)
 8028a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028a96:	f7f7 fde7 	bl	8020668 <__aeabi_dmul>
 8028a9a:	4603      	mov	r3, r0
 8028a9c:	460c      	mov	r4, r1
 8028a9e:	461a      	mov	r2, r3
 8028aa0:	4623      	mov	r3, r4
 8028aa2:	78fc      	ldrb	r4, [r7, #3]
 8028aa4:	4610      	mov	r0, r2
 8028aa6:	4619      	mov	r1, r3
 8028aa8:	f7f8 f8d6 	bl	8020c58 <__aeabi_d2f>
 8028aac:	4601      	mov	r1, r0
 8028aae:	4a49      	ldr	r2, [pc, #292]	; (8028bd4 <BMS_CAN_RX_Param1+0x16c>)
 8028ab0:	4623      	mov	r3, r4
 8028ab2:	00db      	lsls	r3, r3, #3
 8028ab4:	1b1b      	subs	r3, r3, r4
 8028ab6:	009b      	lsls	r3, r3, #2
 8028ab8:	4413      	add	r3, r2
 8028aba:	3308      	adds	r3, #8
 8028abc:	6019      	str	r1, [r3, #0]
    BMS.d.pack[index].current = (data->u16[1] * 0.01) - 50;
 8028abe:	687b      	ldr	r3, [r7, #4]
 8028ac0:	885b      	ldrh	r3, [r3, #2]
 8028ac2:	4618      	mov	r0, r3
 8028ac4:	f7f7 fd66 	bl	8020594 <__aeabi_i2d>
 8028ac8:	a33d      	add	r3, pc, #244	; (adr r3, 8028bc0 <BMS_CAN_RX_Param1+0x158>)
 8028aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028ace:	f7f7 fdcb 	bl	8020668 <__aeabi_dmul>
 8028ad2:	4603      	mov	r3, r0
 8028ad4:	460c      	mov	r4, r1
 8028ad6:	4618      	mov	r0, r3
 8028ad8:	4621      	mov	r1, r4
 8028ada:	f04f 0200 	mov.w	r2, #0
 8028ade:	4b3f      	ldr	r3, [pc, #252]	; (8028bdc <BMS_CAN_RX_Param1+0x174>)
 8028ae0:	f7f7 fc0a 	bl	80202f8 <__aeabi_dsub>
 8028ae4:	4603      	mov	r3, r0
 8028ae6:	460c      	mov	r4, r1
 8028ae8:	461a      	mov	r2, r3
 8028aea:	4623      	mov	r3, r4
 8028aec:	78fc      	ldrb	r4, [r7, #3]
 8028aee:	4610      	mov	r0, r2
 8028af0:	4619      	mov	r1, r3
 8028af2:	f7f8 f8b1 	bl	8020c58 <__aeabi_d2f>
 8028af6:	4601      	mov	r1, r0
 8028af8:	4a36      	ldr	r2, [pc, #216]	; (8028bd4 <BMS_CAN_RX_Param1+0x16c>)
 8028afa:	4623      	mov	r3, r4
 8028afc:	00db      	lsls	r3, r3, #3
 8028afe:	1b1b      	subs	r3, r3, r4
 8028b00:	009b      	lsls	r3, r3, #2
 8028b02:	4413      	add	r3, r2
 8028b04:	330c      	adds	r3, #12
 8028b06:	6019      	str	r1, [r3, #0]
    BMS.d.pack[index].soc = data->u16[2];
 8028b08:	687b      	ldr	r3, [r7, #4]
 8028b0a:	889b      	ldrh	r3, [r3, #4]
 8028b0c:	78fa      	ldrb	r2, [r7, #3]
 8028b0e:	ee07 3a90 	vmov	s15, r3
 8028b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8028b16:	492f      	ldr	r1, [pc, #188]	; (8028bd4 <BMS_CAN_RX_Param1+0x16c>)
 8028b18:	4613      	mov	r3, r2
 8028b1a:	00db      	lsls	r3, r3, #3
 8028b1c:	1a9b      	subs	r3, r3, r2
 8028b1e:	009b      	lsls	r3, r3, #2
 8028b20:	440b      	add	r3, r1
 8028b22:	3310      	adds	r3, #16
 8028b24:	edc3 7a00 	vstr	s15, [r3]
    BMS.d.pack[index].temperature = (data->u16[3] * 0.1) - 40;
 8028b28:	687b      	ldr	r3, [r7, #4]
 8028b2a:	88db      	ldrh	r3, [r3, #6]
 8028b2c:	4618      	mov	r0, r3
 8028b2e:	f7f7 fd31 	bl	8020594 <__aeabi_i2d>
 8028b32:	a325      	add	r3, pc, #148	; (adr r3, 8028bc8 <BMS_CAN_RX_Param1+0x160>)
 8028b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028b38:	f7f7 fd96 	bl	8020668 <__aeabi_dmul>
 8028b3c:	4603      	mov	r3, r0
 8028b3e:	460c      	mov	r4, r1
 8028b40:	4618      	mov	r0, r3
 8028b42:	4621      	mov	r1, r4
 8028b44:	f04f 0200 	mov.w	r2, #0
 8028b48:	4b25      	ldr	r3, [pc, #148]	; (8028be0 <BMS_CAN_RX_Param1+0x178>)
 8028b4a:	f7f7 fbd5 	bl	80202f8 <__aeabi_dsub>
 8028b4e:	4603      	mov	r3, r0
 8028b50:	460c      	mov	r4, r1
 8028b52:	461a      	mov	r2, r3
 8028b54:	4623      	mov	r3, r4
 8028b56:	78fc      	ldrb	r4, [r7, #3]
 8028b58:	4610      	mov	r0, r2
 8028b5a:	4619      	mov	r1, r3
 8028b5c:	f7f8 f87c 	bl	8020c58 <__aeabi_d2f>
 8028b60:	4601      	mov	r1, r0
 8028b62:	4a1c      	ldr	r2, [pc, #112]	; (8028bd4 <BMS_CAN_RX_Param1+0x16c>)
 8028b64:	4623      	mov	r3, r4
 8028b66:	00db      	lsls	r3, r3, #3
 8028b68:	1b1b      	subs	r3, r3, r4
 8028b6a:	009b      	lsls	r3, r3, #2
 8028b6c:	4413      	add	r3, r2
 8028b6e:	3314      	adds	r3, #20
 8028b70:	6019      	str	r1, [r3, #0]

    // read the id
    BMS.d.pack[index].id = CB.rx.header.ExtId & BMS_ID_MASK;
 8028b72:	4b19      	ldr	r3, [pc, #100]	; (8028bd8 <BMS_CAN_RX_Param1+0x170>)
 8028b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028b76:	78fa      	ldrb	r2, [r7, #3]
 8028b78:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8028b7c:	4815      	ldr	r0, [pc, #84]	; (8028bd4 <BMS_CAN_RX_Param1+0x16c>)
 8028b7e:	4613      	mov	r3, r2
 8028b80:	00db      	lsls	r3, r3, #3
 8028b82:	1a9b      	subs	r3, r3, r2
 8028b84:	009b      	lsls	r3, r3, #2
 8028b86:	4403      	add	r3, r0
 8028b88:	3304      	adds	r3, #4
 8028b8a:	6019      	str	r1, [r3, #0]
    BMS.d.pack[index].started = 1;
 8028b8c:	78fa      	ldrb	r2, [r7, #3]
 8028b8e:	4911      	ldr	r1, [pc, #68]	; (8028bd4 <BMS_CAN_RX_Param1+0x16c>)
 8028b90:	4613      	mov	r3, r2
 8028b92:	00db      	lsls	r3, r3, #3
 8028b94:	1a9b      	subs	r3, r3, r2
 8028b96:	009b      	lsls	r3, r3, #2
 8028b98:	440b      	add	r3, r1
 8028b9a:	331b      	adds	r3, #27
 8028b9c:	2201      	movs	r2, #1
 8028b9e:	701a      	strb	r2, [r3, #0]
    BMS.d.pack[index].tick = _GetTickMS();
 8028ba0:	78fc      	ldrb	r4, [r7, #3]
 8028ba2:	f016 fe18 	bl	803f7d6 <_GetTickMS>
 8028ba6:	4601      	mov	r1, r0
 8028ba8:	4a0a      	ldr	r2, [pc, #40]	; (8028bd4 <BMS_CAN_RX_Param1+0x16c>)
 8028baa:	4623      	mov	r3, r4
 8028bac:	00db      	lsls	r3, r3, #3
 8028bae:	1b1b      	subs	r3, r3, r4
 8028bb0:	009b      	lsls	r3, r3, #2
 8028bb2:	4413      	add	r3, r2
 8028bb4:	331c      	adds	r3, #28
 8028bb6:	6019      	str	r1, [r3, #0]
}
 8028bb8:	bf00      	nop
 8028bba:	370c      	adds	r7, #12
 8028bbc:	46bd      	mov	sp, r7
 8028bbe:	bd90      	pop	{r4, r7, pc}
 8028bc0:	47ae147b 	.word	0x47ae147b
 8028bc4:	3f847ae1 	.word	0x3f847ae1
 8028bc8:	9999999a 	.word	0x9999999a
 8028bcc:	3fb99999 	.word	0x3fb99999
 8028bd0:	200090e0 	.word	0x200090e0
 8028bd4:	20000178 	.word	0x20000178
 8028bd8:	200090a0 	.word	0x200090a0
 8028bdc:	40490000 	.word	0x40490000
 8028be0:	40440000 	.word	0x40440000

08028be4 <BMS_CAN_RX_Param2>:

void BMS_CAN_RX_Param2(void) {
 8028be4:	b580      	push	{r7, lr}
 8028be6:	b082      	sub	sp, #8
 8028be8:	af00      	add	r7, sp, #0
    CAN_DATA *data = &(CB.rx.data);
 8028bea:	4b1d      	ldr	r3, [pc, #116]	; (8028c60 <BMS_CAN_RX_Param2+0x7c>)
 8028bec:	607b      	str	r3, [r7, #4]
    uint8_t index = BMS.GetIndex(CB.rx.header.ExtId & BMS_ID_MASK);
 8028bee:	4b1d      	ldr	r3, [pc, #116]	; (8028c64 <BMS_CAN_RX_Param2+0x80>)
 8028bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8028bf2:	4a1d      	ldr	r2, [pc, #116]	; (8028c68 <BMS_CAN_RX_Param2+0x84>)
 8028bf4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8028bf6:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8028bfa:	4610      	mov	r0, r2
 8028bfc:	4798      	blx	r3
 8028bfe:	4603      	mov	r3, r0
 8028c00:	70fb      	strb	r3, [r7, #3]

    // save flag
    BMS.d.pack[index].flag = data->u16[3];
 8028c02:	78fa      	ldrb	r2, [r7, #3]
 8028c04:	687b      	ldr	r3, [r7, #4]
 8028c06:	88d8      	ldrh	r0, [r3, #6]
 8028c08:	4916      	ldr	r1, [pc, #88]	; (8028c64 <BMS_CAN_RX_Param2+0x80>)
 8028c0a:	4613      	mov	r3, r2
 8028c0c:	00db      	lsls	r3, r3, #3
 8028c0e:	1a9b      	subs	r3, r3, r2
 8028c10:	009b      	lsls	r3, r3, #2
 8028c12:	440b      	add	r3, r1
 8028c14:	3318      	adds	r3, #24
 8028c16:	4602      	mov	r2, r0
 8028c18:	801a      	strh	r2, [r3, #0]

    // save state
    BMS.d.pack[index].state = _L(_R1(data->u8[7], 4), 1) | _R1(data->u8[7], 5);
 8028c1a:	687b      	ldr	r3, [r7, #4]
 8028c1c:	79db      	ldrb	r3, [r3, #7]
 8028c1e:	091b      	lsrs	r3, r3, #4
 8028c20:	b2db      	uxtb	r3, r3
 8028c22:	005b      	lsls	r3, r3, #1
 8028c24:	b25b      	sxtb	r3, r3
 8028c26:	f003 0302 	and.w	r3, r3, #2
 8028c2a:	b25a      	sxtb	r2, r3
 8028c2c:	687b      	ldr	r3, [r7, #4]
 8028c2e:	79db      	ldrb	r3, [r3, #7]
 8028c30:	095b      	lsrs	r3, r3, #5
 8028c32:	b2db      	uxtb	r3, r3
 8028c34:	b25b      	sxtb	r3, r3
 8028c36:	f003 0301 	and.w	r3, r3, #1
 8028c3a:	b25b      	sxtb	r3, r3
 8028c3c:	4313      	orrs	r3, r2
 8028c3e:	b25b      	sxtb	r3, r3
 8028c40:	78fa      	ldrb	r2, [r7, #3]
 8028c42:	b2d8      	uxtb	r0, r3
 8028c44:	4907      	ldr	r1, [pc, #28]	; (8028c64 <BMS_CAN_RX_Param2+0x80>)
 8028c46:	4613      	mov	r3, r2
 8028c48:	00db      	lsls	r3, r3, #3
 8028c4a:	1a9b      	subs	r3, r3, r2
 8028c4c:	009b      	lsls	r3, r3, #2
 8028c4e:	440b      	add	r3, r1
 8028c50:	331a      	adds	r3, #26
 8028c52:	4602      	mov	r2, r0
 8028c54:	701a      	strb	r2, [r3, #0]
}
 8028c56:	bf00      	nop
 8028c58:	3708      	adds	r7, #8
 8028c5a:	46bd      	mov	sp, r7
 8028c5c:	bd80      	pop	{r7, pc}
 8028c5e:	bf00      	nop
 8028c60:	200090e0 	.word	0x200090e0
 8028c64:	20000178 	.word	0x20000178
 8028c68:	200090a0 	.word	0x200090a0

08028c6c <BMS_CAN_TX_Setting>:

/* ====================================== CAN TX =================================== */
uint8_t BMS_CAN_TX_Setting(uint8_t start, BMS_STATE state) {
 8028c6c:	b580      	push	{r7, lr}
 8028c6e:	b084      	sub	sp, #16
 8028c70:	af00      	add	r7, sp, #0
 8028c72:	4603      	mov	r3, r0
 8028c74:	460a      	mov	r2, r1
 8028c76:	71fb      	strb	r3, [r7, #7]
 8028c78:	4613      	mov	r3, r2
 8028c7a:	71bb      	strb	r3, [r7, #6]
    CAN_DATA *data = &(CB.tx.data);
 8028c7c:	4b0e      	ldr	r3, [pc, #56]	; (8028cb8 <BMS_CAN_TX_Setting+0x4c>)
 8028c7e:	60fb      	str	r3, [r7, #12]

    // set message
    data->u8[0] = start;
 8028c80:	68fb      	ldr	r3, [r7, #12]
 8028c82:	79fa      	ldrb	r2, [r7, #7]
 8028c84:	701a      	strb	r2, [r3, #0]
    data->u8[0] |= _L(state, 1);
 8028c86:	68fb      	ldr	r3, [r7, #12]
 8028c88:	781b      	ldrb	r3, [r3, #0]
 8028c8a:	b25a      	sxtb	r2, r3
 8028c8c:	79bb      	ldrb	r3, [r7, #6]
 8028c8e:	005b      	lsls	r3, r3, #1
 8028c90:	b25b      	sxtb	r3, r3
 8028c92:	4313      	orrs	r3, r2
 8028c94:	b25b      	sxtb	r3, r3
 8028c96:	b2da      	uxtb	r2, r3
 8028c98:	68fb      	ldr	r3, [r7, #12]
 8028c9a:	701a      	strb	r2, [r3, #0]

    // set default header
    CANBUS_Header(&(CB.tx.header), CAND_BMS_SETTING, 1);
 8028c9c:	2201      	movs	r2, #1
 8028c9e:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 8028ca2:	4806      	ldr	r0, [pc, #24]	; (8028cbc <BMS_CAN_TX_Setting+0x50>)
 8028ca4:	f015 f93c 	bl	803df20 <CANBUS_Header>
    // send message
    return CANBUS_Write(&(CB.tx));
 8028ca8:	4804      	ldr	r0, [pc, #16]	; (8028cbc <BMS_CAN_TX_Setting+0x50>)
 8028caa:	f015 f97b 	bl	803dfa4 <CANBUS_Write>
 8028cae:	4603      	mov	r3, r0
}
 8028cb0:	4618      	mov	r0, r3
 8028cb2:	3710      	adds	r7, #16
 8028cb4:	46bd      	mov	sp, r7
 8028cb6:	bd80      	pop	{r7, pc}
 8028cb8:	200090b8 	.word	0x200090b8
 8028cbc:	200090a0 	.word	0x200090a0

08028cc0 <HMI1_Init>:
        HMI1_RefreshIndex,
        HMI1_Power
};

/* Public functions implementation --------------------------------------------*/
void HMI1_Init(void) {
 8028cc0:	b480      	push	{r7}
 8028cc2:	b083      	sub	sp, #12
 8028cc4:	af00      	add	r7, sp, #0
    // reset HMI1 data
    HMI1.d.started = 0;
 8028cc6:	4b18      	ldr	r3, [pc, #96]	; (8028d28 <HMI1_Init+0x68>)
 8028cc8:	2200      	movs	r2, #0
 8028cca:	701a      	strb	r2, [r3, #0]
    HMI1.d.status.mirroring = 0;
 8028ccc:	4b16      	ldr	r3, [pc, #88]	; (8028d28 <HMI1_Init+0x68>)
 8028cce:	2200      	movs	r2, #0
 8028cd0:	705a      	strb	r2, [r3, #1]
    HMI1.d.status.warning = 0;
 8028cd2:	4b15      	ldr	r3, [pc, #84]	; (8028d28 <HMI1_Init+0x68>)
 8028cd4:	2200      	movs	r2, #0
 8028cd6:	709a      	strb	r2, [r3, #2]
    HMI1.d.status.overheat = 0;
 8028cd8:	4b13      	ldr	r3, [pc, #76]	; (8028d28 <HMI1_Init+0x68>)
 8028cda:	2200      	movs	r2, #0
 8028cdc:	70da      	strb	r2, [r3, #3]
    HMI1.d.status.finger = 0;
 8028cde:	4b12      	ldr	r3, [pc, #72]	; (8028d28 <HMI1_Init+0x68>)
 8028ce0:	2200      	movs	r2, #0
 8028ce2:	711a      	strb	r2, [r3, #4]
    HMI1.d.status.keyless = 0;
 8028ce4:	4b10      	ldr	r3, [pc, #64]	; (8028d28 <HMI1_Init+0x68>)
 8028ce6:	2200      	movs	r2, #0
 8028ce8:	715a      	strb	r2, [r3, #5]
    HMI1.d.status.daylight = 0;
 8028cea:	4b0f      	ldr	r3, [pc, #60]	; (8028d28 <HMI1_Init+0x68>)
 8028cec:	2200      	movs	r2, #0
 8028cee:	719a      	strb	r2, [r3, #6]
    // each HMIs
    for (uint8_t i = 0; i < HMI1_DEV_MAX; i++) {
 8028cf0:	2300      	movs	r3, #0
 8028cf2:	71fb      	strb	r3, [r7, #7]
 8028cf4:	e00f      	b.n	8028d16 <HMI1_Init+0x56>
        HMI1.d.device[i].started = 0;
 8028cf6:	79fb      	ldrb	r3, [r7, #7]
 8028cf8:	4a0b      	ldr	r2, [pc, #44]	; (8028d28 <HMI1_Init+0x68>)
 8028cfa:	3301      	adds	r3, #1
 8028cfc:	2100      	movs	r1, #0
 8028cfe:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
        HMI1.d.device[i].tick = 0;
 8028d02:	79fb      	ldrb	r3, [r7, #7]
 8028d04:	4a08      	ldr	r2, [pc, #32]	; (8028d28 <HMI1_Init+0x68>)
 8028d06:	3301      	adds	r3, #1
 8028d08:	00db      	lsls	r3, r3, #3
 8028d0a:	4413      	add	r3, r2
 8028d0c:	2200      	movs	r2, #0
 8028d0e:	605a      	str	r2, [r3, #4]
    for (uint8_t i = 0; i < HMI1_DEV_MAX; i++) {
 8028d10:	79fb      	ldrb	r3, [r7, #7]
 8028d12:	3301      	adds	r3, #1
 8028d14:	71fb      	strb	r3, [r7, #7]
 8028d16:	79fb      	ldrb	r3, [r7, #7]
 8028d18:	2b00      	cmp	r3, #0
 8028d1a:	d0ec      	beq.n	8028cf6 <HMI1_Init+0x36>
    }
}
 8028d1c:	bf00      	nop
 8028d1e:	370c      	adds	r7, #12
 8028d20:	46bd      	mov	sp, r7
 8028d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028d26:	4770      	bx	lr
 8028d28:	200001e4 	.word	0x200001e4

08028d2c <HMI1_RefreshIndex>:

void HMI1_RefreshIndex(void) {
 8028d2c:	b580      	push	{r7, lr}
 8028d2e:	b082      	sub	sp, #8
 8028d30:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < HMI1_DEV_MAX; i++) {
 8028d32:	2300      	movs	r3, #0
 8028d34:	71fb      	strb	r3, [r7, #7]
 8028d36:	e015      	b.n	8028d64 <HMI1_RefreshIndex+0x38>
        if ((_GetTickMS() - HMI1.d.device[i].tick) > 1000) {
 8028d38:	f016 fd4d 	bl	803f7d6 <_GetTickMS>
 8028d3c:	4601      	mov	r1, r0
 8028d3e:	79fb      	ldrb	r3, [r7, #7]
 8028d40:	4a0c      	ldr	r2, [pc, #48]	; (8028d74 <HMI1_RefreshIndex+0x48>)
 8028d42:	3301      	adds	r3, #1
 8028d44:	00db      	lsls	r3, r3, #3
 8028d46:	4413      	add	r3, r2
 8028d48:	685b      	ldr	r3, [r3, #4]
 8028d4a:	1acb      	subs	r3, r1, r3
 8028d4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8028d50:	d905      	bls.n	8028d5e <HMI1_RefreshIndex+0x32>
            HMI1.d.device[i].started = 0;
 8028d52:	79fb      	ldrb	r3, [r7, #7]
 8028d54:	4a07      	ldr	r2, [pc, #28]	; (8028d74 <HMI1_RefreshIndex+0x48>)
 8028d56:	3301      	adds	r3, #1
 8028d58:	2100      	movs	r1, #0
 8028d5a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    for (uint8_t i = 0; i < HMI1_DEV_MAX; i++) {
 8028d5e:	79fb      	ldrb	r3, [r7, #7]
 8028d60:	3301      	adds	r3, #1
 8028d62:	71fb      	strb	r3, [r7, #7]
 8028d64:	79fb      	ldrb	r3, [r7, #7]
 8028d66:	2b00      	cmp	r3, #0
 8028d68:	d0e6      	beq.n	8028d38 <HMI1_RefreshIndex+0xc>
        }
    }
}
 8028d6a:	bf00      	nop
 8028d6c:	3708      	adds	r7, #8
 8028d6e:	46bd      	mov	sp, r7
 8028d70:	bd80      	pop	{r7, pc}
 8028d72:	bf00      	nop
 8028d74:	200001e4 	.word	0x200001e4

08028d78 <HMI1_Power>:

void HMI1_Power(uint8_t state) {
 8028d78:	b580      	push	{r7, lr}
 8028d7a:	b082      	sub	sp, #8
 8028d7c:	af00      	add	r7, sp, #0
 8028d7e:	4603      	mov	r3, r0
 8028d80:	71fb      	strb	r3, [r7, #7]
    // PNP transistor is Active Low
    HAL_GPIO_WritePin(EXT_HMI1_PWR_GPIO_Port, EXT_HMI1_PWR_Pin, state);
 8028d82:	79fb      	ldrb	r3, [r7, #7]
 8028d84:	461a      	mov	r2, r3
 8028d86:	2110      	movs	r1, #16
 8028d88:	4803      	ldr	r0, [pc, #12]	; (8028d98 <HMI1_Power+0x20>)
 8028d8a:	f007 f94f 	bl	803002c <HAL_GPIO_WritePin>
}
 8028d8e:	bf00      	nop
 8028d90:	3708      	adds	r7, #8
 8028d92:	46bd      	mov	sp, r7
 8028d94:	bd80      	pop	{r7, pc}
 8028d96:	bf00      	nop
 8028d98:	40020800 	.word	0x40020800

08028d9c <HMI1_CAN_RX_LeftState>:

/* ====================================== CAN RX =================================== */
void HMI1_CAN_RX_LeftState(void) {
 8028d9c:	b580      	push	{r7, lr}
 8028d9e:	af00      	add	r7, sp, #0
    // save state
    HMI1.d.device[HMI1_DEV_LEFT].started = 1;
 8028da0:	4b04      	ldr	r3, [pc, #16]	; (8028db4 <HMI1_CAN_RX_LeftState+0x18>)
 8028da2:	2201      	movs	r2, #1
 8028da4:	721a      	strb	r2, [r3, #8]
    HMI1.d.device[HMI1_DEV_LEFT].tick = _GetTickMS();
 8028da6:	f016 fd16 	bl	803f7d6 <_GetTickMS>
 8028daa:	4602      	mov	r2, r0
 8028dac:	4b01      	ldr	r3, [pc, #4]	; (8028db4 <HMI1_CAN_RX_LeftState+0x18>)
 8028dae:	60da      	str	r2, [r3, #12]
}
 8028db0:	bf00      	nop
 8028db2:	bd80      	pop	{r7, pc}
 8028db4:	200001e4 	.word	0x200001e4

08028db8 <HMI1_CAN_RX_RightState>:

void HMI1_CAN_RX_RightState(void) {
 8028db8:	b580      	push	{r7, lr}
 8028dba:	af00      	add	r7, sp, #0
    // save state
    HMI1.d.device[HMI1_DEV_RIGHT].started = 1;
 8028dbc:	4b04      	ldr	r3, [pc, #16]	; (8028dd0 <HMI1_CAN_RX_RightState+0x18>)
 8028dbe:	2201      	movs	r2, #1
 8028dc0:	741a      	strb	r2, [r3, #16]
    HMI1.d.device[HMI1_DEV_RIGHT].tick = _GetTickMS();
 8028dc2:	f016 fd08 	bl	803f7d6 <_GetTickMS>
 8028dc6:	4602      	mov	r2, r0
 8028dc8:	4b01      	ldr	r3, [pc, #4]	; (8028dd0 <HMI1_CAN_RX_RightState+0x18>)
 8028dca:	615a      	str	r2, [r3, #20]
}
 8028dcc:	bf00      	nop
 8028dce:	bd80      	pop	{r7, pc}
 8028dd0:	200001e4 	.word	0x200001e4

08028dd4 <HMI2_Init>:
        HMI2_Refresh,
        HMI2_PowerOverCan
};

/* Public functions implementation --------------------------------------------*/
void HMI2_Init(void) {
 8028dd4:	b480      	push	{r7}
 8028dd6:	af00      	add	r7, sp, #0
    HMI2.d.started = 0;
 8028dd8:	4b05      	ldr	r3, [pc, #20]	; (8028df0 <HMI2_Init+0x1c>)
 8028dda:	2200      	movs	r2, #0
 8028ddc:	705a      	strb	r2, [r3, #1]
    HMI2.d.tick = 0;
 8028dde:	4b04      	ldr	r3, [pc, #16]	; (8028df0 <HMI2_Init+0x1c>)
 8028de0:	2200      	movs	r2, #0
 8028de2:	605a      	str	r2, [r3, #4]
}
 8028de4:	bf00      	nop
 8028de6:	46bd      	mov	sp, r7
 8028de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028dec:	4770      	bx	lr
 8028dee:	bf00      	nop
 8028df0:	20000210 	.word	0x20000210

08028df4 <HMI2_Refresh>:

void HMI2_Refresh(void) {
 8028df4:	b580      	push	{r7, lr}
 8028df6:	af00      	add	r7, sp, #0
    if ((_GetTickMS() - HMI2.d.tick) > 10000) {
 8028df8:	f016 fced 	bl	803f7d6 <_GetTickMS>
 8028dfc:	4602      	mov	r2, r0
 8028dfe:	4b06      	ldr	r3, [pc, #24]	; (8028e18 <HMI2_Refresh+0x24>)
 8028e00:	685b      	ldr	r3, [r3, #4]
 8028e02:	1ad3      	subs	r3, r2, r3
 8028e04:	f242 7210 	movw	r2, #10000	; 0x2710
 8028e08:	4293      	cmp	r3, r2
 8028e0a:	d902      	bls.n	8028e12 <HMI2_Refresh+0x1e>
        HMI2.d.started = 0;
 8028e0c:	4b02      	ldr	r3, [pc, #8]	; (8028e18 <HMI2_Refresh+0x24>)
 8028e0e:	2200      	movs	r2, #0
 8028e10:	705a      	strb	r2, [r3, #1]
    }
}
 8028e12:	bf00      	nop
 8028e14:	bd80      	pop	{r7, pc}
 8028e16:	bf00      	nop
 8028e18:	20000210 	.word	0x20000210

08028e1c <HMI2_PowerOverCan>:

void HMI2_PowerOverCan(uint8_t state) {
 8028e1c:	b580      	push	{r7, lr}
 8028e1e:	b082      	sub	sp, #8
 8028e20:	af00      	add	r7, sp, #0
 8028e22:	4603      	mov	r3, r0
 8028e24:	71fb      	strb	r3, [r7, #7]
    // past to thread handler
    HMI2.d.power = state;
 8028e26:	4a06      	ldr	r2, [pc, #24]	; (8028e40 <HMI2_PowerOverCan+0x24>)
 8028e28:	79fb      	ldrb	r3, [r7, #7]
 8028e2a:	7013      	strb	r3, [r2, #0]
    osThreadFlagsSet(Hmi2PowerTaskHandle, EVT_HMI2POWER_CHANGED);
 8028e2c:	4b05      	ldr	r3, [pc, #20]	; (8028e44 <HMI2_PowerOverCan+0x28>)
 8028e2e:	681b      	ldr	r3, [r3, #0]
 8028e30:	2101      	movs	r1, #1
 8028e32:	4618      	mov	r0, r3
 8028e34:	f00e fc0a 	bl	803764c <osThreadFlagsSet>
}
 8028e38:	bf00      	nop
 8028e3a:	3708      	adds	r7, #8
 8028e3c:	46bd      	mov	sp, r7
 8028e3e:	bd80      	pop	{r7, pc}
 8028e40:	20000210 	.word	0x20000210
 8028e44:	2000882c 	.word	0x2000882c

08028e48 <StartHmi2PowerTask>:

/* ====================================== THREAD =================================== */
void StartHmi2PowerTask(void *argument) {
 8028e48:	b580      	push	{r7, lr}
 8028e4a:	b086      	sub	sp, #24
 8028e4c:	af00      	add	r7, sp, #0
 8028e4e:	6078      	str	r0, [r7, #4]
    TickType_t tick;
    uint32_t notif;
    uint8_t activeHigh = 0;
 8028e50:	2300      	movs	r3, #0
 8028e52:	75fb      	strb	r3, [r7, #23]

    /* Infinite loop */
    for (;;) {
        // wait forever until triggered
        notif = osThreadFlagsWait(EVT_HMI2POWER_CHANGED, osFlagsWaitAny, osWaitForever);
 8028e54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8028e58:	2100      	movs	r1, #0
 8028e5a:	2001      	movs	r0, #1
 8028e5c:	f00e fca8 	bl	80377b0 <osThreadFlagsWait>
 8028e60:	6138      	str	r0, [r7, #16]
        if (_RTOS_ValidThreadFlag(notif)) {
 8028e62:	6938      	ldr	r0, [r7, #16]
 8028e64:	f016 fd10 	bl	803f888 <_RTOS_ValidThreadFlag>
 8028e68:	4603      	mov	r3, r0
 8028e6a:	2b00      	cmp	r3, #0
 8028e6c:	d0f2      	beq.n	8028e54 <StartHmi2PowerTask+0xc>
            // Handle power control
            if (HMI2.d.power) {
 8028e6e:	4b29      	ldr	r3, [pc, #164]	; (8028f14 <StartHmi2PowerTask+0xcc>)
 8028e70:	781b      	ldrb	r3, [r3, #0]
 8028e72:	2b00      	cmp	r3, #0
 8028e74:	d048      	beq.n	8028f08 <StartHmi2PowerTask+0xc0>
                while (!HMI2.d.started) {
 8028e76:	e024      	b.n	8028ec2 <StartHmi2PowerTask+0x7a>
                    // turn ON
                    HAL_GPIO_WritePin(EXT_HMI2_PWR_GPIO_Port, EXT_HMI2_PWR_Pin, !activeHigh);
 8028e78:	7dfb      	ldrb	r3, [r7, #23]
 8028e7a:	2b00      	cmp	r3, #0
 8028e7c:	bf0c      	ite	eq
 8028e7e:	2301      	moveq	r3, #1
 8028e80:	2300      	movne	r3, #0
 8028e82:	b2db      	uxtb	r3, r3
 8028e84:	461a      	mov	r2, r3
 8028e86:	2120      	movs	r1, #32
 8028e88:	4823      	ldr	r0, [pc, #140]	; (8028f18 <StartHmi2PowerTask+0xd0>)
 8028e8a:	f007 f8cf 	bl	803002c <HAL_GPIO_WritePin>
                    _DelayMS(100);
 8028e8e:	2064      	movs	r0, #100	; 0x64
 8028e90:	f016 fc96 	bl	803f7c0 <_DelayMS>
                    HAL_GPIO_WritePin(EXT_HMI2_PWR_GPIO_Port, EXT_HMI2_PWR_Pin, activeHigh);
 8028e94:	7dfb      	ldrb	r3, [r7, #23]
 8028e96:	461a      	mov	r2, r3
 8028e98:	2120      	movs	r1, #32
 8028e9a:	481f      	ldr	r0, [pc, #124]	; (8028f18 <StartHmi2PowerTask+0xd0>)
 8028e9c:	f007 f8c6 	bl	803002c <HAL_GPIO_WritePin>

                    // wait until turned ON
                    tick = _GetTickMS();
 8028ea0:	f016 fc99 	bl	803f7d6 <_GetTickMS>
 8028ea4:	60f8      	str	r0, [r7, #12]
                    while (_GetTickMS() - tick < (90 * 1000)) {
 8028ea6:	e004      	b.n	8028eb2 <StartHmi2PowerTask+0x6a>
                        // already ON
                        if (HMI2.d.started) {
 8028ea8:	4b1a      	ldr	r3, [pc, #104]	; (8028f14 <StartHmi2PowerTask+0xcc>)
 8028eaa:	785b      	ldrb	r3, [r3, #1]
 8028eac:	2b00      	cmp	r3, #0
 8028eae:	d000      	beq.n	8028eb2 <StartHmi2PowerTask+0x6a>
                            break;
 8028eb0:	e007      	b.n	8028ec2 <StartHmi2PowerTask+0x7a>
                    while (_GetTickMS() - tick < (90 * 1000)) {
 8028eb2:	f016 fc90 	bl	803f7d6 <_GetTickMS>
 8028eb6:	4602      	mov	r2, r0
 8028eb8:	68fb      	ldr	r3, [r7, #12]
 8028eba:	1ad3      	subs	r3, r2, r3
 8028ebc:	4a17      	ldr	r2, [pc, #92]	; (8028f1c <StartHmi2PowerTask+0xd4>)
 8028ebe:	4293      	cmp	r3, r2
 8028ec0:	d9f2      	bls.n	8028ea8 <StartHmi2PowerTask+0x60>
                while (!HMI2.d.started) {
 8028ec2:	4b14      	ldr	r3, [pc, #80]	; (8028f14 <StartHmi2PowerTask+0xcc>)
 8028ec4:	785b      	ldrb	r3, [r3, #1]
 8028ec6:	2b00      	cmp	r3, #0
 8028ec8:	d0d6      	beq.n	8028e78 <StartHmi2PowerTask+0x30>
 8028eca:	e7c3      	b.n	8028e54 <StartHmi2PowerTask+0xc>
                    }
                }
            } else {
                while (HMI2.d.started) {
                    // wait until turned OFF by CAN
                    tick = _GetTickMS();
 8028ecc:	f016 fc83 	bl	803f7d6 <_GetTickMS>
 8028ed0:	60f8      	str	r0, [r7, #12]
                    while (_GetTickMS() - tick < (30 * 1000)) {
 8028ed2:	e003      	b.n	8028edc <StartHmi2PowerTask+0x94>
                        // already OFF
                        if (!HMI2.d.started) {
 8028ed4:	4b0f      	ldr	r3, [pc, #60]	; (8028f14 <StartHmi2PowerTask+0xcc>)
 8028ed6:	785b      	ldrb	r3, [r3, #1]
 8028ed8:	2b00      	cmp	r3, #0
 8028eda:	d009      	beq.n	8028ef0 <StartHmi2PowerTask+0xa8>
                    while (_GetTickMS() - tick < (30 * 1000)) {
 8028edc:	f016 fc7b 	bl	803f7d6 <_GetTickMS>
 8028ee0:	4602      	mov	r2, r0
 8028ee2:	68fb      	ldr	r3, [r7, #12]
 8028ee4:	1ad3      	subs	r3, r2, r3
 8028ee6:	f247 522f 	movw	r2, #29999	; 0x752f
 8028eea:	4293      	cmp	r3, r2
 8028eec:	d9f2      	bls.n	8028ed4 <StartHmi2PowerTask+0x8c>
 8028eee:	e000      	b.n	8028ef2 <StartHmi2PowerTask+0xaa>
                            break;
 8028ef0:	bf00      	nop
                        }
                    }

                    // force turn OFF
                    HAL_GPIO_WritePin(EXT_HMI2_PWR_GPIO_Port, EXT_HMI2_PWR_Pin, !activeHigh);
 8028ef2:	7dfb      	ldrb	r3, [r7, #23]
 8028ef4:	2b00      	cmp	r3, #0
 8028ef6:	bf0c      	ite	eq
 8028ef8:	2301      	moveq	r3, #1
 8028efa:	2300      	movne	r3, #0
 8028efc:	b2db      	uxtb	r3, r3
 8028efe:	461a      	mov	r2, r3
 8028f00:	2120      	movs	r1, #32
 8028f02:	4805      	ldr	r0, [pc, #20]	; (8028f18 <StartHmi2PowerTask+0xd0>)
 8028f04:	f007 f892 	bl	803002c <HAL_GPIO_WritePin>
                while (HMI2.d.started) {
 8028f08:	4b02      	ldr	r3, [pc, #8]	; (8028f14 <StartHmi2PowerTask+0xcc>)
 8028f0a:	785b      	ldrb	r3, [r3, #1]
 8028f0c:	2b00      	cmp	r3, #0
 8028f0e:	d1dd      	bne.n	8028ecc <StartHmi2PowerTask+0x84>
        notif = osThreadFlagsWait(EVT_HMI2POWER_CHANGED, osFlagsWaitAny, osWaitForever);
 8028f10:	e7a0      	b.n	8028e54 <StartHmi2PowerTask+0xc>
 8028f12:	bf00      	nop
 8028f14:	20000210 	.word	0x20000210
 8028f18:	40020800 	.word	0x40020800
 8028f1c:	00015f8f 	.word	0x00015f8f

08028f20 <HMI2_CAN_RX_State>:
        }
    }
}

/* ====================================== CAN RX =================================== */
void HMI2_CAN_RX_State(void) {
 8028f20:	b580      	push	{r7, lr}
 8028f22:	b082      	sub	sp, #8
 8028f24:	af00      	add	r7, sp, #0
    CAN_DATA *data = &(CB.rx.data);
 8028f26:	4b0a      	ldr	r3, [pc, #40]	; (8028f50 <HMI2_CAN_RX_State+0x30>)
 8028f28:	607b      	str	r3, [r7, #4]

    // read message
    HMI1.d.status.mirroring = _R1(data->u8[0], 0);
 8028f2a:	687b      	ldr	r3, [r7, #4]
 8028f2c:	781b      	ldrb	r3, [r3, #0]
 8028f2e:	f003 0301 	and.w	r3, r3, #1
 8028f32:	b2da      	uxtb	r2, r3
 8028f34:	4b07      	ldr	r3, [pc, #28]	; (8028f54 <HMI2_CAN_RX_State+0x34>)
 8028f36:	705a      	strb	r2, [r3, #1]

    // save state
    HMI2.d.started = 1;
 8028f38:	4b07      	ldr	r3, [pc, #28]	; (8028f58 <HMI2_CAN_RX_State+0x38>)
 8028f3a:	2201      	movs	r2, #1
 8028f3c:	705a      	strb	r2, [r3, #1]
    HMI2.d.tick = _GetTickMS();
 8028f3e:	f016 fc4a 	bl	803f7d6 <_GetTickMS>
 8028f42:	4602      	mov	r2, r0
 8028f44:	4b04      	ldr	r3, [pc, #16]	; (8028f58 <HMI2_CAN_RX_State+0x38>)
 8028f46:	605a      	str	r2, [r3, #4]
}
 8028f48:	bf00      	nop
 8028f4a:	3708      	adds	r7, #8
 8028f4c:	46bd      	mov	sp, r7
 8028f4e:	bd80      	pop	{r7, pc}
 8028f50:	200090e0 	.word	0x200090e0
 8028f54:	200001e4 	.word	0x200001e4
 8028f58:	20000210 	.word	0x20000210

08028f5c <VCU_Init>:
        VCU_ReadEvent,
        VCU_CheckMainPower,
};

/* Public functions implementation --------------------------------------------*/
void VCU_Init(void) {
 8028f5c:	b490      	push	{r4, r7}
 8028f5e:	af00      	add	r7, sp, #0
    // reset VCU data
    VCU.d.state.vehicle = VEHICLE_INDEPENDENT;
 8028f60:	4b1a      	ldr	r3, [pc, #104]	; (8028fcc <VCU_Init+0x70>)
 8028f62:	2200      	movs	r2, #0
 8028f64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    VCU.d.state.starter = 0;
 8028f68:	4b18      	ldr	r3, [pc, #96]	; (8028fcc <VCU_Init+0x70>)
 8028f6a:	2200      	movs	r2, #0
 8028f6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    VCU.d.state.knob = 0;
 8028f70:	4b16      	ldr	r3, [pc, #88]	; (8028fcc <VCU_Init+0x70>)
 8028f72:	2200      	movs	r2, #0
 8028f74:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    VCU.d.state.independent = 1;
 8028f78:	4b14      	ldr	r3, [pc, #80]	; (8028fcc <VCU_Init+0x70>)
 8028f7a:	2201      	movs	r2, #1
 8028f7c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

    VCU.d.interval = RPT_INTERVAL_SIMPLE;
 8028f80:	4b12      	ldr	r3, [pc, #72]	; (8028fcc <VCU_Init+0x70>)
 8028f82:	2205      	movs	r2, #5
 8028f84:	80da      	strh	r2, [r3, #6]
    VCU.d.driver_id = DRIVER_ID_NONE;
 8028f86:	4b11      	ldr	r3, [pc, #68]	; (8028fcc <VCU_Init+0x70>)
 8028f88:	22ff      	movs	r2, #255	; 0xff
 8028f8a:	711a      	strb	r2, [r3, #4]
    VCU.d.volume = 0;
 8028f8c:	4b0f      	ldr	r3, [pc, #60]	; (8028fcc <VCU_Init+0x70>)
 8028f8e:	2200      	movs	r2, #0
 8028f90:	721a      	strb	r2, [r3, #8]
    VCU.d.speed = 0;
 8028f92:	4b0e      	ldr	r3, [pc, #56]	; (8028fcc <VCU_Init+0x70>)
 8028f94:	2200      	movs	r2, #0
 8028f96:	725a      	strb	r2, [r3, #9]
    VCU.d.odometer = 0;
 8028f98:	4b0c      	ldr	r3, [pc, #48]	; (8028fcc <VCU_Init+0x70>)
 8028f9a:	2200      	movs	r2, #0
 8028f9c:	60da      	str	r2, [r3, #12]
    VCU.d.events = 0;
 8028f9e:	4a0b      	ldr	r2, [pc, #44]	; (8028fcc <VCU_Init+0x70>)
 8028fa0:	f04f 0300 	mov.w	r3, #0
 8028fa4:	f04f 0400 	mov.w	r4, #0
 8028fa8:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

    VCU.d.tick.keyless = 0;
 8028fac:	4b07      	ldr	r3, [pc, #28]	; (8028fcc <VCU_Init+0x70>)
 8028fae:	2200      	movs	r2, #0
 8028fb0:	63da      	str	r2, [r3, #60]	; 0x3c
    //  VCU.d.tick.finger = 0;

    VCU.d.seq_id.report = 0;
 8028fb2:	4b06      	ldr	r3, [pc, #24]	; (8028fcc <VCU_Init+0x70>)
 8028fb4:	2200      	movs	r2, #0
 8028fb6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    VCU.d.seq_id.response = 0;
 8028fba:	4b04      	ldr	r3, [pc, #16]	; (8028fcc <VCU_Init+0x70>)
 8028fbc:	2200      	movs	r2, #0
 8028fbe:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
}
 8028fc2:	bf00      	nop
 8028fc4:	46bd      	mov	sp, r7
 8028fc6:	bc90      	pop	{r4, r7}
 8028fc8:	4770      	bx	lr
 8028fca:	bf00      	nop
 8028fcc:	20000228 	.word	0x20000228

08028fd0 <VCU_SetEvent>:

void VCU_SetEvent(uint64_t event_id, uint8_t value) {
 8028fd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8028fd4:	b085      	sub	sp, #20
 8028fd6:	af00      	add	r7, sp, #0
 8028fd8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8028fdc:	4613      	mov	r3, r2
 8028fde:	71fb      	strb	r3, [r7, #7]
    if (value & 1) {
 8028fe0:	79fb      	ldrb	r3, [r7, #7]
 8028fe2:	f003 0301 	and.w	r3, r3, #1
 8028fe6:	2b00      	cmp	r3, #0
 8028fe8:	d024      	beq.n	8029034 <VCU_SetEvent+0x64>
        BV(VCU.d.events, _BitPosition(event_id));
 8028fea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8028fee:	f016 fc91 	bl	803f914 <_BitPosition>
 8028ff2:	4603      	mov	r3, r0
 8028ff4:	461a      	mov	r2, r3
 8028ff6:	f04f 0301 	mov.w	r3, #1
 8028ffa:	f04f 0400 	mov.w	r4, #0
 8028ffe:	f1a2 0020 	sub.w	r0, r2, #32
 8029002:	f1c2 0120 	rsb	r1, r2, #32
 8029006:	fa04 f902 	lsl.w	r9, r4, r2
 802900a:	fa03 f000 	lsl.w	r0, r3, r0
 802900e:	ea49 0900 	orr.w	r9, r9, r0
 8029012:	fa23 f101 	lsr.w	r1, r3, r1
 8029016:	ea49 0901 	orr.w	r9, r9, r1
 802901a:	fa03 f802 	lsl.w	r8, r3, r2
 802901e:	4b1b      	ldr	r3, [pc, #108]	; (802908c <VCU_SetEvent+0xbc>)
 8029020:	e9d3 120c 	ldrd	r1, r2, [r3, #48]	; 0x30
 8029024:	ea41 0308 	orr.w	r3, r1, r8
 8029028:	ea42 0409 	orr.w	r4, r2, r9
 802902c:	4a17      	ldr	r2, [pc, #92]	; (802908c <VCU_SetEvent+0xbc>)
 802902e:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    } else {
        BC(VCU.d.events, _BitPosition(event_id));
    }
}
 8029032:	e025      	b.n	8029080 <VCU_SetEvent+0xb0>
        BC(VCU.d.events, _BitPosition(event_id));
 8029034:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8029038:	f016 fc6c 	bl	803f914 <_BitPosition>
 802903c:	4603      	mov	r3, r0
 802903e:	4619      	mov	r1, r3
 8029040:	f04f 0201 	mov.w	r2, #1
 8029044:	f04f 0300 	mov.w	r3, #0
 8029048:	f1a1 0620 	sub.w	r6, r1, #32
 802904c:	f1c1 0020 	rsb	r0, r1, #32
 8029050:	fa03 f501 	lsl.w	r5, r3, r1
 8029054:	fa02 f606 	lsl.w	r6, r2, r6
 8029058:	4335      	orrs	r5, r6
 802905a:	fa22 f000 	lsr.w	r0, r2, r0
 802905e:	4305      	orrs	r5, r0
 8029060:	fa02 f401 	lsl.w	r4, r2, r1
 8029064:	ea6f 0104 	mvn.w	r1, r4
 8029068:	ea6f 0205 	mvn.w	r2, r5
 802906c:	4b07      	ldr	r3, [pc, #28]	; (802908c <VCU_SetEvent+0xbc>)
 802906e:	e9d3 560c 	ldrd	r5, r6, [r3, #48]	; 0x30
 8029072:	ea05 0301 	and.w	r3, r5, r1
 8029076:	ea06 0402 	and.w	r4, r6, r2
 802907a:	4a04      	ldr	r2, [pc, #16]	; (802908c <VCU_SetEvent+0xbc>)
 802907c:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
}
 8029080:	bf00      	nop
 8029082:	3714      	adds	r7, #20
 8029084:	46bd      	mov	sp, r7
 8029086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802908a:	bf00      	nop
 802908c:	20000228 	.word	0x20000228

08029090 <VCU_ReadEvent>:

uint8_t VCU_ReadEvent(uint64_t event_id) {
 8029090:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8029094:	b083      	sub	sp, #12
 8029096:	af00      	add	r7, sp, #0
 8029098:	e9c7 0100 	strd	r0, r1, [r7]
    return (VCU.d.events & event_id) == event_id;
 802909c:	4b0b      	ldr	r3, [pc, #44]	; (80290cc <VCU_ReadEvent+0x3c>)
 802909e:	e9d3 120c 	ldrd	r1, r2, [r3, #48]	; 0x30
 80290a2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80290a6:	ea03 0b01 	and.w	fp, r3, r1
 80290aa:	ea04 0c02 	and.w	ip, r4, r2
 80290ae:	e9d7 1200 	ldrd	r1, r2, [r7]
 80290b2:	4562      	cmp	r2, ip
 80290b4:	bf06      	itte	eq
 80290b6:	4559      	cmpeq	r1, fp
 80290b8:	2301      	moveq	r3, #1
 80290ba:	2300      	movne	r3, #0
 80290bc:	b2db      	uxtb	r3, r3
}
 80290be:	4618      	mov	r0, r3
 80290c0:	370c      	adds	r7, #12
 80290c2:	46bd      	mov	sp, r7
 80290c4:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 80290c8:	4770      	bx	lr
 80290ca:	bf00      	nop
 80290cc:	20000228 	.word	0x20000228

080290d0 <VCU_CheckMainPower>:

void VCU_CheckMainPower(void) {
 80290d0:	b580      	push	{r7, lr}
 80290d2:	b082      	sub	sp, #8
 80290d4:	af00      	add	r7, sp, #0
    static TickType_t tick;
    static int8_t lastState = -1;
    uint8_t currentState;

    // read state
    currentState = HAL_GPIO_ReadPin(EXT_REG_5V_IRQ_GPIO_Port, EXT_REG_5V_IRQ_Pin);
 80290d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80290da:	4831      	ldr	r0, [pc, #196]	; (80291a0 <VCU_CheckMainPower+0xd0>)
 80290dc:	f006 ff8e 	bl	802fffc <HAL_GPIO_ReadPin>
 80290e0:	4603      	mov	r3, r0
 80290e2:	71fb      	strb	r3, [r7, #7]
    // handle only when changed
    if (lastState != currentState) {
 80290e4:	4b2f      	ldr	r3, [pc, #188]	; (80291a4 <VCU_CheckMainPower+0xd4>)
 80290e6:	f993 3000 	ldrsb.w	r3, [r3]
 80290ea:	461a      	mov	r2, r3
 80290ec:	79fb      	ldrb	r3, [r7, #7]
 80290ee:	429a      	cmp	r2, r3
 80290f0:	d008      	beq.n	8029104 <VCU_CheckMainPower+0x34>
        lastState = currentState;
 80290f2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80290f6:	4b2b      	ldr	r3, [pc, #172]	; (80291a4 <VCU_CheckMainPower+0xd4>)
 80290f8:	701a      	strb	r2, [r3, #0]
        // update tick
        tick = _GetTickMS();
 80290fa:	f016 fb6c 	bl	803f7d6 <_GetTickMS>
 80290fe:	4602      	mov	r2, r0
 8029100:	4b29      	ldr	r3, [pc, #164]	; (80291a8 <VCU_CheckMainPower+0xd8>)
 8029102:	601a      	str	r2, [r3, #0]
    }

    // set things
    VCU.d.state.independent = !currentState;
 8029104:	79fb      	ldrb	r3, [r7, #7]
 8029106:	2b00      	cmp	r3, #0
 8029108:	bf0c      	ite	eq
 802910a:	2301      	moveq	r3, #1
 802910c:	2300      	movne	r3, #0
 802910e:	b2db      	uxtb	r3, r3
 8029110:	461a      	mov	r2, r3
 8029112:	4b26      	ldr	r3, [pc, #152]	; (80291ac <VCU_CheckMainPower+0xdc>)
 8029114:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

    // handle when REG_5V is OFF
    if (currentState == 0) {
 8029118:	79fb      	ldrb	r3, [r7, #7]
 802911a:	2b00      	cmp	r3, #0
 802911c:	d128      	bne.n	8029170 <VCU_CheckMainPower+0xa0>
        VCU.SetEvent(EV_VCU_INDEPENDENT, 1);
 802911e:	4b23      	ldr	r3, [pc, #140]	; (80291ac <VCU_CheckMainPower+0xdc>)
 8029120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8029122:	2201      	movs	r2, #1
 8029124:	f04f 0010 	mov.w	r0, #16
 8029128:	f04f 0100 	mov.w	r1, #0
 802912c:	4798      	blx	r3
        if (_GetTickMS() - tick > (VCU_ACTIVATE_LOST_MODE * 1000)) {
 802912e:	f016 fb52 	bl	803f7d6 <_GetTickMS>
 8029132:	4602      	mov	r2, r0
 8029134:	4b1c      	ldr	r3, [pc, #112]	; (80291a8 <VCU_CheckMainPower+0xd8>)
 8029136:	681b      	ldr	r3, [r3, #0]
 8029138:	1ad3      	subs	r3, r2, r3
 802913a:	4a1d      	ldr	r2, [pc, #116]	; (80291b0 <VCU_CheckMainPower+0xe0>)
 802913c:	4293      	cmp	r3, r2
 802913e:	d90b      	bls.n	8029158 <VCU_CheckMainPower+0x88>
            VCU.d.interval = RPT_INTERVAL_LOST;
 8029140:	4b1a      	ldr	r3, [pc, #104]	; (80291ac <VCU_CheckMainPower+0xdc>)
 8029142:	223c      	movs	r2, #60	; 0x3c
 8029144:	80da      	strh	r2, [r3, #6]
            VCU.SetEvent(EV_VCU_UNAUTHORIZE_REMOVAL, 1);
 8029146:	4b19      	ldr	r3, [pc, #100]	; (80291ac <VCU_CheckMainPower+0xdc>)
 8029148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802914a:	2201      	movs	r2, #1
 802914c:	f04f 0020 	mov.w	r0, #32
 8029150:	f04f 0100 	mov.w	r1, #0
 8029154:	4798      	blx	r3
    } else {
        VCU.d.interval = RPT_INTERVAL_SIMPLE;
        VCU.SetEvent(EV_VCU_INDEPENDENT, 0);
        VCU.SetEvent(EV_VCU_UNAUTHORIZE_REMOVAL, 0);
    }
}
 8029156:	e01e      	b.n	8029196 <VCU_CheckMainPower+0xc6>
            VCU.d.interval = RPT_INTERVAL_INDEPENDENT;
 8029158:	4b14      	ldr	r3, [pc, #80]	; (80291ac <VCU_CheckMainPower+0xdc>)
 802915a:	220a      	movs	r2, #10
 802915c:	80da      	strh	r2, [r3, #6]
            VCU.SetEvent(EV_VCU_UNAUTHORIZE_REMOVAL, 0);
 802915e:	4b13      	ldr	r3, [pc, #76]	; (80291ac <VCU_CheckMainPower+0xdc>)
 8029160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8029162:	2200      	movs	r2, #0
 8029164:	f04f 0020 	mov.w	r0, #32
 8029168:	f04f 0100 	mov.w	r1, #0
 802916c:	4798      	blx	r3
}
 802916e:	e012      	b.n	8029196 <VCU_CheckMainPower+0xc6>
        VCU.d.interval = RPT_INTERVAL_SIMPLE;
 8029170:	4b0e      	ldr	r3, [pc, #56]	; (80291ac <VCU_CheckMainPower+0xdc>)
 8029172:	2205      	movs	r2, #5
 8029174:	80da      	strh	r2, [r3, #6]
        VCU.SetEvent(EV_VCU_INDEPENDENT, 0);
 8029176:	4b0d      	ldr	r3, [pc, #52]	; (80291ac <VCU_CheckMainPower+0xdc>)
 8029178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802917a:	2200      	movs	r2, #0
 802917c:	f04f 0010 	mov.w	r0, #16
 8029180:	f04f 0100 	mov.w	r1, #0
 8029184:	4798      	blx	r3
        VCU.SetEvent(EV_VCU_UNAUTHORIZE_REMOVAL, 0);
 8029186:	4b09      	ldr	r3, [pc, #36]	; (80291ac <VCU_CheckMainPower+0xdc>)
 8029188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802918a:	2200      	movs	r2, #0
 802918c:	f04f 0020 	mov.w	r0, #32
 8029190:	f04f 0100 	mov.w	r1, #0
 8029194:	4798      	blx	r3
}
 8029196:	bf00      	nop
 8029198:	3708      	adds	r7, #8
 802919a:	46bd      	mov	sp, r7
 802919c:	bd80      	pop	{r7, pc}
 802919e:	bf00      	nop
 80291a0:	40021000 	.word	0x40021000
 80291a4:	20000290 	.word	0x20000290
 80291a8:	20000f2c 	.word	0x20000f2c
 80291ac:	20000228 	.word	0x20000228
 80291b0:	0001d4c0 	.word	0x0001d4c0

080291b4 <VCU_CAN_TX_SwitchModeControl>:

/* ====================================== CAN TX =================================== */
uint8_t VCU_CAN_TX_SwitchModeControl(sw_t *sw) {
 80291b4:	b580      	push	{r7, lr}
 80291b6:	b084      	sub	sp, #16
 80291b8:	af00      	add	r7, sp, #0
 80291ba:	6078      	str	r0, [r7, #4]
    CAN_DATA *data = &(CB.tx.data);
 80291bc:	4b5d      	ldr	r3, [pc, #372]	; (8029334 <VCU_CAN_TX_SwitchModeControl+0x180>)
 80291be:	60fb      	str	r3, [r7, #12]
    sein_state_t sein = HBAR_SeinController(sw);
 80291c0:	6878      	ldr	r0, [r7, #4]
 80291c2:	f7fe fc6b 	bl	8027a9c <HBAR_SeinController>
 80291c6:	4603      	mov	r3, r0
 80291c8:	813b      	strh	r3, [r7, #8]

    // set message
    data->u8[0] = sw->list[SW_K_ABS].state;
 80291ca:	687b      	ldr	r3, [r7, #4]
 80291cc:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
 80291d0:	68fb      	ldr	r3, [r7, #12]
 80291d2:	701a      	strb	r2, [r3, #0]
    data->u8[0] |= _L(HMI1.d.status.mirroring, 1);
 80291d4:	68fb      	ldr	r3, [r7, #12]
 80291d6:	781b      	ldrb	r3, [r3, #0]
 80291d8:	b25a      	sxtb	r2, r3
 80291da:	4b57      	ldr	r3, [pc, #348]	; (8029338 <VCU_CAN_TX_SwitchModeControl+0x184>)
 80291dc:	785b      	ldrb	r3, [r3, #1]
 80291de:	005b      	lsls	r3, r3, #1
 80291e0:	b25b      	sxtb	r3, r3
 80291e2:	4313      	orrs	r3, r2
 80291e4:	b25b      	sxtb	r3, r3
 80291e6:	b2da      	uxtb	r2, r3
 80291e8:	68fb      	ldr	r3, [r7, #12]
 80291ea:	701a      	strb	r2, [r3, #0]
    data->u8[0] |= _L(sw->list[SW_K_LAMP].state, 2);
 80291ec:	68fb      	ldr	r3, [r7, #12]
 80291ee:	781b      	ldrb	r3, [r3, #0]
 80291f0:	b25a      	sxtb	r2, r3
 80291f2:	687b      	ldr	r3, [r7, #4]
 80291f4:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80291f8:	009b      	lsls	r3, r3, #2
 80291fa:	b25b      	sxtb	r3, r3
 80291fc:	4313      	orrs	r3, r2
 80291fe:	b25b      	sxtb	r3, r3
 8029200:	b2da      	uxtb	r2, r3
 8029202:	68fb      	ldr	r3, [r7, #12]
 8029204:	701a      	strb	r2, [r3, #0]
    data->u8[0] |= _L(HMI1.d.status.warning, 3);
 8029206:	68fb      	ldr	r3, [r7, #12]
 8029208:	781b      	ldrb	r3, [r3, #0]
 802920a:	b25a      	sxtb	r2, r3
 802920c:	4b4a      	ldr	r3, [pc, #296]	; (8029338 <VCU_CAN_TX_SwitchModeControl+0x184>)
 802920e:	789b      	ldrb	r3, [r3, #2]
 8029210:	00db      	lsls	r3, r3, #3
 8029212:	b25b      	sxtb	r3, r3
 8029214:	4313      	orrs	r3, r2
 8029216:	b25b      	sxtb	r3, r3
 8029218:	b2da      	uxtb	r2, r3
 802921a:	68fb      	ldr	r3, [r7, #12]
 802921c:	701a      	strb	r2, [r3, #0]
    data->u8[0] |= _L(HMI1.d.status.overheat, 4);
 802921e:	68fb      	ldr	r3, [r7, #12]
 8029220:	781b      	ldrb	r3, [r3, #0]
 8029222:	b25a      	sxtb	r2, r3
 8029224:	4b44      	ldr	r3, [pc, #272]	; (8029338 <VCU_CAN_TX_SwitchModeControl+0x184>)
 8029226:	78db      	ldrb	r3, [r3, #3]
 8029228:	011b      	lsls	r3, r3, #4
 802922a:	b25b      	sxtb	r3, r3
 802922c:	4313      	orrs	r3, r2
 802922e:	b25b      	sxtb	r3, r3
 8029230:	b2da      	uxtb	r2, r3
 8029232:	68fb      	ldr	r3, [r7, #12]
 8029234:	701a      	strb	r2, [r3, #0]
    data->u8[0] |= _L(HMI1.d.status.finger, 5);
 8029236:	68fb      	ldr	r3, [r7, #12]
 8029238:	781b      	ldrb	r3, [r3, #0]
 802923a:	b25a      	sxtb	r2, r3
 802923c:	4b3e      	ldr	r3, [pc, #248]	; (8029338 <VCU_CAN_TX_SwitchModeControl+0x184>)
 802923e:	791b      	ldrb	r3, [r3, #4]
 8029240:	015b      	lsls	r3, r3, #5
 8029242:	b25b      	sxtb	r3, r3
 8029244:	4313      	orrs	r3, r2
 8029246:	b25b      	sxtb	r3, r3
 8029248:	b2da      	uxtb	r2, r3
 802924a:	68fb      	ldr	r3, [r7, #12]
 802924c:	701a      	strb	r2, [r3, #0]
    data->u8[0] |= _L(HMI1.d.status.keyless, 6);
 802924e:	68fb      	ldr	r3, [r7, #12]
 8029250:	781b      	ldrb	r3, [r3, #0]
 8029252:	b25a      	sxtb	r2, r3
 8029254:	4b38      	ldr	r3, [pc, #224]	; (8029338 <VCU_CAN_TX_SwitchModeControl+0x184>)
 8029256:	795b      	ldrb	r3, [r3, #5]
 8029258:	019b      	lsls	r3, r3, #6
 802925a:	b25b      	sxtb	r3, r3
 802925c:	4313      	orrs	r3, r2
 802925e:	b25b      	sxtb	r3, r3
 8029260:	b2da      	uxtb	r2, r3
 8029262:	68fb      	ldr	r3, [r7, #12]
 8029264:	701a      	strb	r2, [r3, #0]
    data->u8[0] |= _L(HMI1.d.status.daylight, 7);
 8029266:	68fb      	ldr	r3, [r7, #12]
 8029268:	781b      	ldrb	r3, [r3, #0]
 802926a:	b25a      	sxtb	r2, r3
 802926c:	4b32      	ldr	r3, [pc, #200]	; (8029338 <VCU_CAN_TX_SwitchModeControl+0x184>)
 802926e:	799b      	ldrb	r3, [r3, #6]
 8029270:	01db      	lsls	r3, r3, #7
 8029272:	b25b      	sxtb	r3, r3
 8029274:	4313      	orrs	r3, r2
 8029276:	b25b      	sxtb	r3, r3
 8029278:	b2da      	uxtb	r2, r3
 802927a:	68fb      	ldr	r3, [r7, #12]
 802927c:	701a      	strb	r2, [r3, #0]

    // sein value
    data->u8[1] = sein.left;
 802927e:	7a3a      	ldrb	r2, [r7, #8]
 8029280:	68fb      	ldr	r3, [r7, #12]
 8029282:	705a      	strb	r2, [r3, #1]
    data->u8[1] |= _L(sein.right, 1);
 8029284:	68fb      	ldr	r3, [r7, #12]
 8029286:	785b      	ldrb	r3, [r3, #1]
 8029288:	b25a      	sxtb	r2, r3
 802928a:	7a7b      	ldrb	r3, [r7, #9]
 802928c:	005b      	lsls	r3, r3, #1
 802928e:	b25b      	sxtb	r3, r3
 8029290:	4313      	orrs	r3, r2
 8029292:	b25b      	sxtb	r3, r3
 8029294:	b2da      	uxtb	r2, r3
 8029296:	68fb      	ldr	r3, [r7, #12]
 8029298:	705a      	strb	r2, [r3, #1]

    // mode
    data->u8[2] = sw->runner.mode.sub.val[SW_M_DRIVE];
 802929a:	687b      	ldr	r3, [r7, #4]
 802929c:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
 80292a0:	68fb      	ldr	r3, [r7, #12]
 80292a2:	709a      	strb	r2, [r3, #2]
    data->u8[2] |= _L(sw->runner.mode.sub.val[SW_M_TRIP], 2);
 80292a4:	68fb      	ldr	r3, [r7, #12]
 80292a6:	789b      	ldrb	r3, [r3, #2]
 80292a8:	b25a      	sxtb	r2, r3
 80292aa:	687b      	ldr	r3, [r7, #4]
 80292ac:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 80292b0:	009b      	lsls	r3, r3, #2
 80292b2:	b25b      	sxtb	r3, r3
 80292b4:	4313      	orrs	r3, r2
 80292b6:	b25b      	sxtb	r3, r3
 80292b8:	b2da      	uxtb	r2, r3
 80292ba:	68fb      	ldr	r3, [r7, #12]
 80292bc:	709a      	strb	r2, [r3, #2]
    data->u8[2] |= _L(sw->runner.mode.sub.val[SW_M_REPORT], 3);
 80292be:	68fb      	ldr	r3, [r7, #12]
 80292c0:	789b      	ldrb	r3, [r3, #2]
 80292c2:	b25a      	sxtb	r2, r3
 80292c4:	687b      	ldr	r3, [r7, #4]
 80292c6:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80292ca:	00db      	lsls	r3, r3, #3
 80292cc:	b25b      	sxtb	r3, r3
 80292ce:	4313      	orrs	r3, r2
 80292d0:	b25b      	sxtb	r3, r3
 80292d2:	b2da      	uxtb	r2, r3
 80292d4:	68fb      	ldr	r3, [r7, #12]
 80292d6:	709a      	strb	r2, [r3, #2]
    data->u8[2] |= _L(sw->runner.mode.val, 4);
 80292d8:	68fb      	ldr	r3, [r7, #12]
 80292da:	789b      	ldrb	r3, [r3, #2]
 80292dc:	b25a      	sxtb	r2, r3
 80292de:	687b      	ldr	r3, [r7, #4]
 80292e0:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 80292e4:	011b      	lsls	r3, r3, #4
 80292e6:	b25b      	sxtb	r3, r3
 80292e8:	4313      	orrs	r3, r2
 80292ea:	b25b      	sxtb	r3, r3
 80292ec:	b2da      	uxtb	r2, r3
 80292ee:	68fb      	ldr	r3, [r7, #12]
 80292f0:	709a      	strb	r2, [r3, #2]
    data->u8[2] |= _L(HBAR_ModeController(&(sw->runner)), 6);
 80292f2:	687b      	ldr	r3, [r7, #4]
 80292f4:	33f0      	adds	r3, #240	; 0xf0
 80292f6:	4618      	mov	r0, r3
 80292f8:	f7fe fc44 	bl	8027b84 <HBAR_ModeController>
 80292fc:	4603      	mov	r3, r0
 80292fe:	0199      	lsls	r1, r3, #6
 8029300:	68fb      	ldr	r3, [r7, #12]
 8029302:	789b      	ldrb	r3, [r3, #2]
 8029304:	b25a      	sxtb	r2, r3
 8029306:	b24b      	sxtb	r3, r1
 8029308:	4313      	orrs	r3, r2
 802930a:	b25b      	sxtb	r3, r3
 802930c:	b2da      	uxtb	r2, r3
 802930e:	68fb      	ldr	r3, [r7, #12]
 8029310:	709a      	strb	r2, [r3, #2]

    // others
    data->u8[3] = VCU.d.speed;
 8029312:	4b0a      	ldr	r3, [pc, #40]	; (802933c <VCU_CAN_TX_SwitchModeControl+0x188>)
 8029314:	7a5a      	ldrb	r2, [r3, #9]
 8029316:	68fb      	ldr	r3, [r7, #12]
 8029318:	70da      	strb	r2, [r3, #3]

    // set default header
    CANBUS_Header(&(CB.tx.header), CAND_VCU_SWITCH, 4);
 802931a:	2204      	movs	r2, #4
 802931c:	2100      	movs	r1, #0
 802931e:	4808      	ldr	r0, [pc, #32]	; (8029340 <VCU_CAN_TX_SwitchModeControl+0x18c>)
 8029320:	f014 fdfe 	bl	803df20 <CANBUS_Header>
    // send message
    return CANBUS_Write(&(CB.tx));
 8029324:	4806      	ldr	r0, [pc, #24]	; (8029340 <VCU_CAN_TX_SwitchModeControl+0x18c>)
 8029326:	f014 fe3d 	bl	803dfa4 <CANBUS_Write>
 802932a:	4603      	mov	r3, r0
}
 802932c:	4618      	mov	r0, r3
 802932e:	3710      	adds	r7, #16
 8029330:	46bd      	mov	sp, r7
 8029332:	bd80      	pop	{r7, pc}
 8029334:	200090b8 	.word	0x200090b8
 8029338:	200001e4 	.word	0x200001e4
 802933c:	20000228 	.word	0x20000228
 8029340:	200090a0 	.word	0x200090a0

08029344 <VCU_CAN_TX_Datetime>:

uint8_t VCU_CAN_TX_Datetime(timestamp_t *timestamp) {
 8029344:	b580      	push	{r7, lr}
 8029346:	b084      	sub	sp, #16
 8029348:	af00      	add	r7, sp, #0
 802934a:	6078      	str	r0, [r7, #4]
    CAN_DATA *data = &(CB.tx.data);
 802934c:	4b1a      	ldr	r3, [pc, #104]	; (80293b8 <VCU_CAN_TX_Datetime+0x74>)
 802934e:	60fb      	str	r3, [r7, #12]

    // set message
    data->u8[0] = timestamp->time.Seconds;
 8029350:	687b      	ldr	r3, [r7, #4]
 8029352:	789a      	ldrb	r2, [r3, #2]
 8029354:	68fb      	ldr	r3, [r7, #12]
 8029356:	701a      	strb	r2, [r3, #0]
    data->u8[1] = timestamp->time.Minutes;
 8029358:	687b      	ldr	r3, [r7, #4]
 802935a:	785a      	ldrb	r2, [r3, #1]
 802935c:	68fb      	ldr	r3, [r7, #12]
 802935e:	705a      	strb	r2, [r3, #1]
    data->u8[2] = timestamp->time.Hours;
 8029360:	687b      	ldr	r3, [r7, #4]
 8029362:	781a      	ldrb	r2, [r3, #0]
 8029364:	68fb      	ldr	r3, [r7, #12]
 8029366:	709a      	strb	r2, [r3, #2]
    data->u8[3] = timestamp->date.Date;
 8029368:	687b      	ldr	r3, [r7, #4]
 802936a:	7d9a      	ldrb	r2, [r3, #22]
 802936c:	68fb      	ldr	r3, [r7, #12]
 802936e:	70da      	strb	r2, [r3, #3]
    data->u8[4] = timestamp->date.Month;
 8029370:	687b      	ldr	r3, [r7, #4]
 8029372:	7d5a      	ldrb	r2, [r3, #21]
 8029374:	68fb      	ldr	r3, [r7, #12]
 8029376:	711a      	strb	r2, [r3, #4]
    data->u8[5] = timestamp->date.Year;
 8029378:	687b      	ldr	r3, [r7, #4]
 802937a:	7dda      	ldrb	r2, [r3, #23]
 802937c:	68fb      	ldr	r3, [r7, #12]
 802937e:	715a      	strb	r2, [r3, #5]
    data->u8[6] = timestamp->date.WeekDay;
 8029380:	687b      	ldr	r3, [r7, #4]
 8029382:	7d1a      	ldrb	r2, [r3, #20]
 8029384:	68fb      	ldr	r3, [r7, #12]
 8029386:	719a      	strb	r2, [r3, #6]
    // HMI2 shutdown request
    data->u8[7] = !VCU.d.state.knob;
 8029388:	4b0c      	ldr	r3, [pc, #48]	; (80293bc <VCU_CAN_TX_Datetime+0x78>)
 802938a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 802938e:	2b00      	cmp	r3, #0
 8029390:	bf0c      	ite	eq
 8029392:	2301      	moveq	r3, #1
 8029394:	2300      	movne	r3, #0
 8029396:	b2db      	uxtb	r3, r3
 8029398:	461a      	mov	r2, r3
 802939a:	68fb      	ldr	r3, [r7, #12]
 802939c:	71da      	strb	r2, [r3, #7]

    // set default header
    CANBUS_Header(&(CB.tx.header), CAND_VCU_DATETIME, 8);
 802939e:	2208      	movs	r2, #8
 80293a0:	2101      	movs	r1, #1
 80293a2:	4807      	ldr	r0, [pc, #28]	; (80293c0 <VCU_CAN_TX_Datetime+0x7c>)
 80293a4:	f014 fdbc 	bl	803df20 <CANBUS_Header>
    // send message
    return CANBUS_Write(&(CB.tx));
 80293a8:	4805      	ldr	r0, [pc, #20]	; (80293c0 <VCU_CAN_TX_Datetime+0x7c>)
 80293aa:	f014 fdfb 	bl	803dfa4 <CANBUS_Write>
 80293ae:	4603      	mov	r3, r0
}
 80293b0:	4618      	mov	r0, r3
 80293b2:	3710      	adds	r7, #16
 80293b4:	46bd      	mov	sp, r7
 80293b6:	bd80      	pop	{r7, pc}
 80293b8:	200090b8 	.word	0x200090b8
 80293bc:	20000228 	.word	0x20000228
 80293c0:	200090a0 	.word	0x200090a0

080293c4 <VCU_CAN_TX_MixedData>:

uint8_t VCU_CAN_TX_MixedData(sw_runner_t *runner) {
 80293c4:	b580      	push	{r7, lr}
 80293c6:	b084      	sub	sp, #16
 80293c8:	af00      	add	r7, sp, #0
 80293ca:	6078      	str	r0, [r7, #4]
    CAN_DATA *data = &(CB.tx.data);
 80293cc:	4b11      	ldr	r3, [pc, #68]	; (8029414 <VCU_CAN_TX_MixedData+0x50>)
 80293ce:	60fb      	str	r3, [r7, #12]

    // set message
    data->u8[0] = SIM.signal;
 80293d0:	4b11      	ldr	r3, [pc, #68]	; (8029418 <VCU_CAN_TX_MixedData+0x54>)
 80293d2:	7c1a      	ldrb	r2, [r3, #16]
 80293d4:	68fb      	ldr	r3, [r7, #12]
 80293d6:	701a      	strb	r2, [r3, #0]
    data->u8[1] = BMS.d.soc;
 80293d8:	4b10      	ldr	r3, [pc, #64]	; (802941c <VCU_CAN_TX_MixedData+0x58>)
 80293da:	785a      	ldrb	r2, [r3, #1]
 80293dc:	68fb      	ldr	r3, [r7, #12]
 80293de:	705a      	strb	r2, [r3, #1]
    data->u8[2] = runner->mode.sub.report[SW_M_REPORT_RANGE];
 80293e0:	687b      	ldr	r3, [r7, #4]
 80293e2:	7b9a      	ldrb	r2, [r3, #14]
 80293e4:	68fb      	ldr	r3, [r7, #12]
 80293e6:	709a      	strb	r2, [r3, #2]
    data->u8[3] = runner->mode.sub.report[SW_M_REPORT_EFFICIENCY];
 80293e8:	687b      	ldr	r3, [r7, #4]
 80293ea:	7bda      	ldrb	r2, [r3, #15]
 80293ec:	68fb      	ldr	r3, [r7, #12]
 80293ee:	70da      	strb	r2, [r3, #3]
    data->u32[1] = VCU.d.odometer;
 80293f0:	4b0b      	ldr	r3, [pc, #44]	; (8029420 <VCU_CAN_TX_MixedData+0x5c>)
 80293f2:	68da      	ldr	r2, [r3, #12]
 80293f4:	68fb      	ldr	r3, [r7, #12]
 80293f6:	605a      	str	r2, [r3, #4]

    // set default header
    CANBUS_Header(&(CB.tx.header), CAND_VCU_SELECT_SET, 8);
 80293f8:	2208      	movs	r2, #8
 80293fa:	2102      	movs	r1, #2
 80293fc:	4809      	ldr	r0, [pc, #36]	; (8029424 <VCU_CAN_TX_MixedData+0x60>)
 80293fe:	f014 fd8f 	bl	803df20 <CANBUS_Header>
    // send message
    return CANBUS_Write(&(CB.tx));
 8029402:	4808      	ldr	r0, [pc, #32]	; (8029424 <VCU_CAN_TX_MixedData+0x60>)
 8029404:	f014 fdce 	bl	803dfa4 <CANBUS_Write>
 8029408:	4603      	mov	r3, r0
}
 802940a:	4618      	mov	r0, r3
 802940c:	3710      	adds	r7, #16
 802940e:	46bd      	mov	sp, r7
 8029410:	bd80      	pop	{r7, pc}
 8029412:	bf00      	nop
 8029414:	200090b8 	.word	0x200090b8
 8029418:	200002a8 	.word	0x200002a8
 802941c:	20000178 	.word	0x20000178
 8029420:	20000228 	.word	0x20000228
 8029424:	200090a0 	.word	0x200090a0

08029428 <VCU_CAN_TX_SubTripData>:

uint8_t VCU_CAN_TX_SubTripData(uint32_t *trip) {
 8029428:	b580      	push	{r7, lr}
 802942a:	b084      	sub	sp, #16
 802942c:	af00      	add	r7, sp, #0
 802942e:	6078      	str	r0, [r7, #4]
    CAN_DATA *data = &(CB.tx.data);
 8029430:	4b0b      	ldr	r3, [pc, #44]	; (8029460 <VCU_CAN_TX_SubTripData+0x38>)
 8029432:	60fb      	str	r3, [r7, #12]

    // set message
    data->u32[0] = trip[SW_M_TRIP_A];
 8029434:	687b      	ldr	r3, [r7, #4]
 8029436:	681a      	ldr	r2, [r3, #0]
 8029438:	68fb      	ldr	r3, [r7, #12]
 802943a:	601a      	str	r2, [r3, #0]
    data->u32[1] = trip[SW_M_TRIP_B];
 802943c:	687b      	ldr	r3, [r7, #4]
 802943e:	685a      	ldr	r2, [r3, #4]
 8029440:	68fb      	ldr	r3, [r7, #12]
 8029442:	605a      	str	r2, [r3, #4]

    // set default header
    CANBUS_Header(&(CB.tx.header), CAND_VCU_TRIP_MODE, 8);
 8029444:	2208      	movs	r2, #8
 8029446:	2103      	movs	r1, #3
 8029448:	4806      	ldr	r0, [pc, #24]	; (8029464 <VCU_CAN_TX_SubTripData+0x3c>)
 802944a:	f014 fd69 	bl	803df20 <CANBUS_Header>
    // send message
    return CANBUS_Write(&(CB.tx));
 802944e:	4805      	ldr	r0, [pc, #20]	; (8029464 <VCU_CAN_TX_SubTripData+0x3c>)
 8029450:	f014 fda8 	bl	803dfa4 <CANBUS_Write>
 8029454:	4603      	mov	r3, r0
}
 8029456:	4618      	mov	r0, r3
 8029458:	3710      	adds	r7, #16
 802945a:	46bd      	mov	sp, r7
 802945c:	bd80      	pop	{r7, pc}
 802945e:	bf00      	nop
 8029460:	200090b8 	.word	0x200090b8
 8029464:	200090a0 	.word	0x200090a0

08029468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8029468:	b580      	push	{r7, lr}
 802946a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 802946c:	f002 feb6 	bl	802c1dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8029470:	f000 f98a 	bl	8029788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8029474:	f000 fdb0 	bl	8029fd8 <MX_GPIO_Init>
  MX_DMA_Init();
 8029478:	f000 fd60 	bl	8029f3c <MX_DMA_Init>
  MX_ADC1_Init();
 802947c:	f000 fa20 	bl	80298c0 <MX_ADC1_Init>
  MX_AES_Init();
 8029480:	f000 fa70 	bl	8029964 <MX_AES_Init>
  MX_CAN1_Init();
 8029484:	f000 fa96 	bl	80299b4 <MX_CAN1_Init>
  MX_CRC_Init();
 8029488:	f000 faca 	bl	8029a20 <MX_CRC_Init>
  MX_I2C1_Init();
 802948c:	f000 fadc 	bl	8029a48 <MX_I2C1_Init>
  MX_I2C2_Init();
 8029490:	f000 fb1a 	bl	8029ac8 <MX_I2C2_Init>
  MX_I2C3_Init();
 8029494:	f000 fb58 	bl	8029b48 <MX_I2C3_Init>
  MX_I2S3_Init();
 8029498:	f000 fb96 	bl	8029bc8 <MX_I2S3_Init>
  MX_IWDG_Init();
 802949c:	f000 fbc2 	bl	8029c24 <MX_IWDG_Init>
  MX_RTC_Init();
 80294a0:	f000 fbee 	bl	8029c80 <MX_RTC_Init>
  MX_SPI1_Init();
 80294a4:	f000 fc46 	bl	8029d34 <MX_SPI1_Init>
  MX_UART4_Init();
 80294a8:	f000 fcca 	bl	8029e40 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80294ac:	f000 fcf2 	bl	8029e94 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80294b0:	f000 fd1a 	bl	8029ee8 <MX_USART2_UART_Init>
  MX_RNG_Init();
 80294b4:	f000 fbd0 	bl	8029c58 <MX_RNG_Init>
  MX_TIM10_Init();
 80294b8:	f000 fc72 	bl	8029da0 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
    CANBUS_Init();
 80294bc:	f014 fd12 	bl	803dee4 <CANBUS_Init>
    BAT_DMA_Init();
 80294c0:	f7f7 fdbc 	bl	802103c <BAT_DMA_Init>
    SIMCOM_DMA_Init();
 80294c4:	f013 fc3c 	bl	803cd40 <SIMCOM_DMA_Init>
    UBLOX_DMA_Init();
 80294c8:	f7fa f962 	bl	8023790 <UBLOX_DMA_Init>
    FINGER_DMA_Init();
 80294cc:	f7f8 ff9a 	bl	8022404 <FINGER_DMA_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80294d0:	f00d ff62 	bl	8037398 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of AudioMutex */
  AudioMutexHandle = osMutexNew(&AudioMutex_attributes);
 80294d4:	4868      	ldr	r0, [pc, #416]	; (8029678 <main+0x210>)
 80294d6:	f00e fb8d 	bl	8037bf4 <osMutexNew>
 80294da:	4602      	mov	r2, r0
 80294dc:	4b67      	ldr	r3, [pc, #412]	; (802967c <main+0x214>)
 80294de:	601a      	str	r2, [r3, #0]

  /* creation of LogMutex */
  LogMutexHandle = osMutexNew(&LogMutex_attributes);
 80294e0:	4867      	ldr	r0, [pc, #412]	; (8029680 <main+0x218>)
 80294e2:	f00e fb87 	bl	8037bf4 <osMutexNew>
 80294e6:	4602      	mov	r2, r0
 80294e8:	4b66      	ldr	r3, [pc, #408]	; (8029684 <main+0x21c>)
 80294ea:	601a      	str	r2, [r3, #0]

  /* creation of CanTxMutex */
  CanTxMutexHandle = osMutexNew(&CanTxMutex_attributes);
 80294ec:	4866      	ldr	r0, [pc, #408]	; (8029688 <main+0x220>)
 80294ee:	f00e fb81 	bl	8037bf4 <osMutexNew>
 80294f2:	4602      	mov	r2, r0
 80294f4:	4b65      	ldr	r3, [pc, #404]	; (802968c <main+0x224>)
 80294f6:	601a      	str	r2, [r3, #0]

  /* creation of EepromMutex */
  EepromMutexHandle = osMutexNew(&EepromMutex_attributes);
 80294f8:	4865      	ldr	r0, [pc, #404]	; (8029690 <main+0x228>)
 80294fa:	f00e fb7b 	bl	8037bf4 <osMutexNew>
 80294fe:	4602      	mov	r2, r0
 8029500:	4b64      	ldr	r3, [pc, #400]	; (8029694 <main+0x22c>)
 8029502:	601a      	str	r2, [r3, #0]

  /* creation of RtcMutex */
  RtcMutexHandle = osMutexNew(&RtcMutex_attributes);
 8029504:	4864      	ldr	r0, [pc, #400]	; (8029698 <main+0x230>)
 8029506:	f00e fb75 	bl	8037bf4 <osMutexNew>
 802950a:	4602      	mov	r2, r0
 802950c:	4b63      	ldr	r3, [pc, #396]	; (802969c <main+0x234>)
 802950e:	601a      	str	r2, [r3, #0]

  /* creation of CrcMutex */
  CrcMutexHandle = osMutexNew(&CrcMutex_attributes);
 8029510:	4863      	ldr	r0, [pc, #396]	; (80296a0 <main+0x238>)
 8029512:	f00e fb6f 	bl	8037bf4 <osMutexNew>
 8029516:	4602      	mov	r2, r0
 8029518:	4b62      	ldr	r3, [pc, #392]	; (80296a4 <main+0x23c>)
 802951a:	601a      	str	r2, [r3, #0]

  /* creation of AesMutex */
  AesMutexHandle = osMutexNew(&AesMutex_attributes);
 802951c:	4862      	ldr	r0, [pc, #392]	; (80296a8 <main+0x240>)
 802951e:	f00e fb69 	bl	8037bf4 <osMutexNew>
 8029522:	4602      	mov	r2, r0
 8029524:	4b61      	ldr	r3, [pc, #388]	; (80296ac <main+0x244>)
 8029526:	601a      	str	r2, [r3, #0]

  /* Create the recursive mutex(es) */
  /* creation of SimcomRecMutex */
  SimcomRecMutexHandle = osMutexNew(&SimcomRecMutex_attributes);
 8029528:	4861      	ldr	r0, [pc, #388]	; (80296b0 <main+0x248>)
 802952a:	f00e fb63 	bl	8037bf4 <osMutexNew>
 802952e:	4602      	mov	r2, r0
 8029530:	4b60      	ldr	r3, [pc, #384]	; (80296b4 <main+0x24c>)
 8029532:	601a      	str	r2, [r3, #0]

  /* creation of FingerRecMutex */
  FingerRecMutexHandle = osMutexNew(&FingerRecMutex_attributes);
 8029534:	4860      	ldr	r0, [pc, #384]	; (80296b8 <main+0x250>)
 8029536:	f00e fb5d 	bl	8037bf4 <osMutexNew>
 802953a:	4602      	mov	r2, r0
 802953c:	4b5f      	ldr	r3, [pc, #380]	; (80296bc <main+0x254>)
 802953e:	601a      	str	r2, [r3, #0]

  /* creation of KlessRecMutex */
  KlessRecMutexHandle = osMutexNew(&KlessRecMutex_attributes);
 8029540:	485f      	ldr	r0, [pc, #380]	; (80296c0 <main+0x258>)
 8029542:	f00e fb57 	bl	8037bf4 <osMutexNew>
 8029546:	4602      	mov	r2, r0
 8029548:	4b5e      	ldr	r3, [pc, #376]	; (80296c4 <main+0x25c>)
 802954a:	601a      	str	r2, [r3, #0]
    /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of CommandQueue */
  CommandQueueHandle = osMessageQueueNew (1, sizeof(command_t), &CommandQueue_attributes);
 802954c:	4a5e      	ldr	r2, [pc, #376]	; (80296c8 <main+0x260>)
 802954e:	2111      	movs	r1, #17
 8029550:	2001      	movs	r0, #1
 8029552:	f00e fc97 	bl	8037e84 <osMessageQueueNew>
 8029556:	4602      	mov	r2, r0
 8029558:	4b5c      	ldr	r3, [pc, #368]	; (80296cc <main+0x264>)
 802955a:	601a      	str	r2, [r3, #0]

  /* creation of ResponseQueue */
  ResponseQueueHandle = osMessageQueueNew (1, sizeof(response_t), &ResponseQueue_attributes);
 802955c:	4a5c      	ldr	r2, [pc, #368]	; (80296d0 <main+0x268>)
 802955e:	2141      	movs	r1, #65	; 0x41
 8029560:	2001      	movs	r0, #1
 8029562:	f00e fc8f 	bl	8037e84 <osMessageQueueNew>
 8029566:	4602      	mov	r2, r0
 8029568:	4b5a      	ldr	r3, [pc, #360]	; (80296d4 <main+0x26c>)
 802956a:	601a      	str	r2, [r3, #0]

  /* creation of ReportQueue */
  ReportQueueHandle = osMessageQueueNew (100, sizeof(report_t), &ReportQueue_attributes);
 802956c:	4a5a      	ldr	r2, [pc, #360]	; (80296d8 <main+0x270>)
 802956e:	215a      	movs	r1, #90	; 0x5a
 8029570:	2064      	movs	r0, #100	; 0x64
 8029572:	f00e fc87 	bl	8037e84 <osMessageQueueNew>
 8029576:	4602      	mov	r2, r0
 8029578:	4b58      	ldr	r3, [pc, #352]	; (80296dc <main+0x274>)
 802957a:	601a      	str	r2, [r3, #0]

  /* creation of DriverQueue */
  DriverQueueHandle = osMessageQueueNew (1, sizeof(uint8_t), &DriverQueue_attributes);
 802957c:	4a58      	ldr	r2, [pc, #352]	; (80296e0 <main+0x278>)
 802957e:	2101      	movs	r1, #1
 8029580:	2001      	movs	r0, #1
 8029582:	f00e fc7f 	bl	8037e84 <osMessageQueueNew>
 8029586:	4602      	mov	r2, r0
 8029588:	4b56      	ldr	r3, [pc, #344]	; (80296e4 <main+0x27c>)
 802958a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
    /* add queues, ... */
    GlobalEventHandle = osEventFlagsNew(NULL);
 802958c:	2000      	movs	r0, #0
 802958e:	f00e fa11 	bl	80379b4 <osEventFlagsNew>
 8029592:	4602      	mov	r2, r0
 8029594:	4b54      	ldr	r3, [pc, #336]	; (80296e8 <main+0x280>)
 8029596:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ManagerTask */
  ManagerTaskHandle = osThreadNew(StartManagerTask, NULL, &ManagerTask_attributes);
 8029598:	4a54      	ldr	r2, [pc, #336]	; (80296ec <main+0x284>)
 802959a:	2100      	movs	r1, #0
 802959c:	4854      	ldr	r0, [pc, #336]	; (80296f0 <main+0x288>)
 802959e:	f00d ffaf 	bl	8037500 <osThreadNew>
 80295a2:	4602      	mov	r2, r0
 80295a4:	4b53      	ldr	r3, [pc, #332]	; (80296f4 <main+0x28c>)
 80295a6:	601a      	str	r2, [r3, #0]

  /* creation of IotTask */
  IotTaskHandle = osThreadNew(StartIotTask, NULL, &IotTask_attributes);
 80295a8:	4a53      	ldr	r2, [pc, #332]	; (80296f8 <main+0x290>)
 80295aa:	2100      	movs	r1, #0
 80295ac:	4853      	ldr	r0, [pc, #332]	; (80296fc <main+0x294>)
 80295ae:	f00d ffa7 	bl	8037500 <osThreadNew>
 80295b2:	4602      	mov	r2, r0
 80295b4:	4b52      	ldr	r3, [pc, #328]	; (8029700 <main+0x298>)
 80295b6:	601a      	str	r2, [r3, #0]

  /* creation of ReporterTask */
  ReporterTaskHandle = osThreadNew(StartReporterTask, NULL, &ReporterTask_attributes);
 80295b8:	4a52      	ldr	r2, [pc, #328]	; (8029704 <main+0x29c>)
 80295ba:	2100      	movs	r1, #0
 80295bc:	4852      	ldr	r0, [pc, #328]	; (8029708 <main+0x2a0>)
 80295be:	f00d ff9f 	bl	8037500 <osThreadNew>
 80295c2:	4602      	mov	r2, r0
 80295c4:	4b51      	ldr	r3, [pc, #324]	; (802970c <main+0x2a4>)
 80295c6:	601a      	str	r2, [r3, #0]

  /* creation of CommandTask */
  CommandTaskHandle = osThreadNew(StartCommandTask, NULL, &CommandTask_attributes);
 80295c8:	4a51      	ldr	r2, [pc, #324]	; (8029710 <main+0x2a8>)
 80295ca:	2100      	movs	r1, #0
 80295cc:	4851      	ldr	r0, [pc, #324]	; (8029714 <main+0x2ac>)
 80295ce:	f00d ff97 	bl	8037500 <osThreadNew>
 80295d2:	4602      	mov	r2, r0
 80295d4:	4b50      	ldr	r3, [pc, #320]	; (8029718 <main+0x2b0>)
 80295d6:	601a      	str	r2, [r3, #0]

  /* creation of GpsTask */
  GpsTaskHandle = osThreadNew(StartGpsTask, NULL, &GpsTask_attributes);
 80295d8:	4a50      	ldr	r2, [pc, #320]	; (802971c <main+0x2b4>)
 80295da:	2100      	movs	r1, #0
 80295dc:	4850      	ldr	r0, [pc, #320]	; (8029720 <main+0x2b8>)
 80295de:	f00d ff8f 	bl	8037500 <osThreadNew>
 80295e2:	4602      	mov	r2, r0
 80295e4:	4b4f      	ldr	r3, [pc, #316]	; (8029724 <main+0x2bc>)
 80295e6:	601a      	str	r2, [r3, #0]

  /* creation of GyroTask */
  GyroTaskHandle = osThreadNew(StartGyroTask, NULL, &GyroTask_attributes);
 80295e8:	4a4f      	ldr	r2, [pc, #316]	; (8029728 <main+0x2c0>)
 80295ea:	2100      	movs	r1, #0
 80295ec:	484f      	ldr	r0, [pc, #316]	; (802972c <main+0x2c4>)
 80295ee:	f00d ff87 	bl	8037500 <osThreadNew>
 80295f2:	4602      	mov	r2, r0
 80295f4:	4b4e      	ldr	r3, [pc, #312]	; (8029730 <main+0x2c8>)
 80295f6:	601a      	str	r2, [r3, #0]

  /* creation of KeylessTask */
  KeylessTaskHandle = osThreadNew(StartKeylessTask, NULL, &KeylessTask_attributes);
 80295f8:	4a4e      	ldr	r2, [pc, #312]	; (8029734 <main+0x2cc>)
 80295fa:	2100      	movs	r1, #0
 80295fc:	484e      	ldr	r0, [pc, #312]	; (8029738 <main+0x2d0>)
 80295fe:	f00d ff7f 	bl	8037500 <osThreadNew>
 8029602:	4602      	mov	r2, r0
 8029604:	4b4d      	ldr	r3, [pc, #308]	; (802973c <main+0x2d4>)
 8029606:	601a      	str	r2, [r3, #0]

  /* creation of FingerTask */
  FingerTaskHandle = osThreadNew(StartFingerTask, NULL, &FingerTask_attributes);
 8029608:	4a4d      	ldr	r2, [pc, #308]	; (8029740 <main+0x2d8>)
 802960a:	2100      	movs	r1, #0
 802960c:	484d      	ldr	r0, [pc, #308]	; (8029744 <main+0x2dc>)
 802960e:	f00d ff77 	bl	8037500 <osThreadNew>
 8029612:	4602      	mov	r2, r0
 8029614:	4b4c      	ldr	r3, [pc, #304]	; (8029748 <main+0x2e0>)
 8029616:	601a      	str	r2, [r3, #0]

  /* creation of AudioTask */
  AudioTaskHandle = osThreadNew(StartAudioTask, NULL, &AudioTask_attributes);
 8029618:	4a4c      	ldr	r2, [pc, #304]	; (802974c <main+0x2e4>)
 802961a:	2100      	movs	r1, #0
 802961c:	484c      	ldr	r0, [pc, #304]	; (8029750 <main+0x2e8>)
 802961e:	f00d ff6f 	bl	8037500 <osThreadNew>
 8029622:	4602      	mov	r2, r0
 8029624:	4b4b      	ldr	r3, [pc, #300]	; (8029754 <main+0x2ec>)
 8029626:	601a      	str	r2, [r3, #0]

  /* creation of SwitchTask */
  SwitchTaskHandle = osThreadNew(StartSwitchTask, NULL, &SwitchTask_attributes);
 8029628:	4a4b      	ldr	r2, [pc, #300]	; (8029758 <main+0x2f0>)
 802962a:	2100      	movs	r1, #0
 802962c:	484b      	ldr	r0, [pc, #300]	; (802975c <main+0x2f4>)
 802962e:	f00d ff67 	bl	8037500 <osThreadNew>
 8029632:	4602      	mov	r2, r0
 8029634:	4b4a      	ldr	r3, [pc, #296]	; (8029760 <main+0x2f8>)
 8029636:	601a      	str	r2, [r3, #0]

  /* creation of CanRxTask */
  CanRxTaskHandle = osThreadNew(StartCanRxTask, NULL, &CanRxTask_attributes);
 8029638:	4a4a      	ldr	r2, [pc, #296]	; (8029764 <main+0x2fc>)
 802963a:	2100      	movs	r1, #0
 802963c:	484a      	ldr	r0, [pc, #296]	; (8029768 <main+0x300>)
 802963e:	f00d ff5f 	bl	8037500 <osThreadNew>
 8029642:	4602      	mov	r2, r0
 8029644:	4b49      	ldr	r3, [pc, #292]	; (802976c <main+0x304>)
 8029646:	601a      	str	r2, [r3, #0]

  /* creation of CanTxTask */
  CanTxTaskHandle = osThreadNew(StartCanTxTask, NULL, &CanTxTask_attributes);
 8029648:	4a49      	ldr	r2, [pc, #292]	; (8029770 <main+0x308>)
 802964a:	2100      	movs	r1, #0
 802964c:	4849      	ldr	r0, [pc, #292]	; (8029774 <main+0x30c>)
 802964e:	f00d ff57 	bl	8037500 <osThreadNew>
 8029652:	4602      	mov	r2, r0
 8029654:	4b48      	ldr	r3, [pc, #288]	; (8029778 <main+0x310>)
 8029656:	601a      	str	r2, [r3, #0]

  /* creation of Hmi2PowerTask */
  Hmi2PowerTaskHandle = osThreadNew(StartHmi2PowerTask, NULL, &Hmi2PowerTask_attributes);
 8029658:	4a48      	ldr	r2, [pc, #288]	; (802977c <main+0x314>)
 802965a:	2100      	movs	r1, #0
 802965c:	4848      	ldr	r0, [pc, #288]	; (8029780 <main+0x318>)
 802965e:	f00d ff4f 	bl	8037500 <osThreadNew>
 8029662:	4602      	mov	r2, r0
 8029664:	4b47      	ldr	r3, [pc, #284]	; (8029784 <main+0x31c>)
 8029666:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
    /* add threads, ... */
    HAL_Delay(1000);
 8029668:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 802966c:	f002 fdf8 	bl	802c260 <HAL_Delay>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8029670:	f00d fee8 	bl	8037444 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {
 8029674:	e7fe      	b.n	8029674 <main+0x20c>
 8029676:	bf00      	nop
 8029678:	08056294 	.word	0x08056294
 802967c:	20008a14 	.word	0x20008a14
 8029680:	080562a4 	.word	0x080562a4
 8029684:	2000863c 	.word	0x2000863c
 8029688:	080562b4 	.word	0x080562b4
 802968c:	20008588 	.word	0x20008588
 8029690:	080562c4 	.word	0x080562c4
 8029694:	20008930 	.word	0x20008930
 8029698:	080562d4 	.word	0x080562d4
 802969c:	2000858c 	.word	0x2000858c
 80296a0:	080562e4 	.word	0x080562e4
 80296a4:	20008648 	.word	0x20008648
 80296a8:	080562f4 	.word	0x080562f4
 80296ac:	20008848 	.word	0x20008848
 80296b0:	08056304 	.word	0x08056304
 80296b4:	20008a10 	.word	0x20008a10
 80296b8:	08056314 	.word	0x08056314
 80296bc:	20008a0c 	.word	0x20008a0c
 80296c0:	08056324 	.word	0x08056324
 80296c4:	200086b4 	.word	0x200086b4
 80296c8:	08056234 	.word	0x08056234
 80296cc:	2000895c 	.word	0x2000895c
 80296d0:	0805624c 	.word	0x0805624c
 80296d4:	20008530 	.word	0x20008530
 80296d8:	08056264 	.word	0x08056264
 80296dc:	20008640 	.word	0x20008640
 80296e0:	0805627c 	.word	0x0805627c
 80296e4:	20008760 	.word	0x20008760
 80296e8:	20008644 	.word	0x20008644
 80296ec:	08056060 	.word	0x08056060
 80296f0:	0802a411 	.word	0x0802a411
 80296f4:	20008960 	.word	0x20008960
 80296f8:	08056084 	.word	0x08056084
 80296fc:	0802a4a9 	.word	0x0802a4a9
 8029700:	200088ec 	.word	0x200088ec
 8029704:	080560a8 	.word	0x080560a8
 8029708:	0802a6ad 	.word	0x0802a6ad
 802970c:	200086b0 	.word	0x200086b0
 8029710:	080560cc 	.word	0x080560cc
 8029714:	0802a795 	.word	0x0802a795
 8029718:	2000884c 	.word	0x2000884c
 802971c:	080560f0 	.word	0x080560f0
 8029720:	0802ab59 	.word	0x0802ab59
 8029724:	20008844 	.word	0x20008844
 8029728:	08056114 	.word	0x08056114
 802972c:	0802ab95 	.word	0x0802ab95
 8029730:	20008804 	.word	0x20008804
 8029734:	08056138 	.word	0x08056138
 8029738:	0802ac49 	.word	0x0802ac49
 802973c:	20008638 	.word	0x20008638
 8029740:	0805615c 	.word	0x0805615c
 8029744:	0802ae2d 	.word	0x0802ae2d
 8029748:	2000864c 	.word	0x2000864c
 802974c:	08056180 	.word	0x08056180
 8029750:	0802afa5 	.word	0x0802afa5
 8029754:	20008a08 	.word	0x20008a08
 8029758:	080561a4 	.word	0x080561a4
 802975c:	0802b0b1 	.word	0x0802b0b1
 8029760:	200088e8 	.word	0x200088e8
 8029764:	080561c8 	.word	0x080561c8
 8029768:	0802b1a9 	.word	0x0802b1a9
 802976c:	20008808 	.word	0x20008808
 8029770:	080561ec 	.word	0x080561ec
 8029774:	0802b245 	.word	0x0802b245
 8029778:	20008840 	.word	0x20008840
 802977c:	08056210 	.word	0x08056210
 8029780:	08028e49 	.word	0x08028e49
 8029784:	2000882c 	.word	0x2000882c

08029788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8029788:	b580      	push	{r7, lr}
 802978a:	b0aa      	sub	sp, #168	; 0xa8
 802978c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 802978e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8029792:	2234      	movs	r2, #52	; 0x34
 8029794:	2100      	movs	r1, #0
 8029796:	4618      	mov	r0, r3
 8029798:	f016 f93c 	bl	803fa14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 802979c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80297a0:	2200      	movs	r2, #0
 80297a2:	601a      	str	r2, [r3, #0]
 80297a4:	605a      	str	r2, [r3, #4]
 80297a6:	609a      	str	r2, [r3, #8]
 80297a8:	60da      	str	r2, [r3, #12]
 80297aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80297ac:	f107 0308 	add.w	r3, r7, #8
 80297b0:	2258      	movs	r2, #88	; 0x58
 80297b2:	2100      	movs	r1, #0
 80297b4:	4618      	mov	r0, r3
 80297b6:	f016 f92d 	bl	803fa14 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80297ba:	2300      	movs	r3, #0
 80297bc:	607b      	str	r3, [r7, #4]
 80297be:	4b3e      	ldr	r3, [pc, #248]	; (80298b8 <SystemClock_Config+0x130>)
 80297c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80297c2:	4a3d      	ldr	r2, [pc, #244]	; (80298b8 <SystemClock_Config+0x130>)
 80297c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80297c8:	6413      	str	r3, [r2, #64]	; 0x40
 80297ca:	4b3b      	ldr	r3, [pc, #236]	; (80298b8 <SystemClock_Config+0x130>)
 80297cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80297ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80297d2:	607b      	str	r3, [r7, #4]
 80297d4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80297d6:	2300      	movs	r3, #0
 80297d8:	603b      	str	r3, [r7, #0]
 80297da:	4b38      	ldr	r3, [pc, #224]	; (80298bc <SystemClock_Config+0x134>)
 80297dc:	681b      	ldr	r3, [r3, #0]
 80297de:	4a37      	ldr	r2, [pc, #220]	; (80298bc <SystemClock_Config+0x134>)
 80297e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80297e4:	6013      	str	r3, [r2, #0]
 80297e6:	4b35      	ldr	r3, [pc, #212]	; (80298bc <SystemClock_Config+0x134>)
 80297e8:	681b      	ldr	r3, [r3, #0]
 80297ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80297ee:	603b      	str	r3, [r7, #0]
 80297f0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 80297f2:	230d      	movs	r3, #13
 80297f4:	677b      	str	r3, [r7, #116]	; 0x74
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80297f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80297fa:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80297fc:	2301      	movs	r3, #1
 80297fe:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8029800:	2301      	movs	r3, #1
 8029802:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8029806:	2302      	movs	r3, #2
 8029808:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 802980c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8029810:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 4;
 8029814:	2304      	movs	r3, #4
 8029816:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 100;
 802981a:	2364      	movs	r3, #100	; 0x64
 802981c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8029820:	2302      	movs	r3, #2
 8029822:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8029826:	2304      	movs	r3, #4
 8029828:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 802982c:	2302      	movs	r3, #2
 802982e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8029832:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8029836:	4618      	mov	r0, r3
 8029838:	f00a fff4 	bl	8034824 <HAL_RCC_OscConfig>
 802983c:	4603      	mov	r3, r0
 802983e:	2b00      	cmp	r3, #0
 8029840:	d001      	beq.n	8029846 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8029842:	f001 fd7f 	bl	802b344 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8029846:	230f      	movs	r3, #15
 8029848:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 802984a:	2302      	movs	r3, #2
 802984c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 802984e:	2300      	movs	r3, #0
 8029850:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8029852:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8029856:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8029858:	2300      	movs	r3, #0
 802985a:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 802985c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8029860:	2103      	movs	r1, #3
 8029862:	4618      	mov	r0, r3
 8029864:	f00a f92e 	bl	8033ac4 <HAL_RCC_ClockConfig>
 8029868:	4603      	mov	r3, r0
 802986a:	2b00      	cmp	r3, #0
 802986c:	d001      	beq.n	8029872 <SystemClock_Config+0xea>
  {
    Error_Handler();
 802986e:	f001 fd69 	bl	802b344 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_RTC
 8029872:	2329      	movs	r3, #41	; 0x29
 8029874:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 256;
 8029876:	f44f 7380 	mov.w	r3, #256	; 0x100
 802987a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 802987c:	2308      	movs	r3, #8
 802987e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 5;
 8029880:	2305      	movs	r3, #5
 8029882:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8029884:	2302      	movs	r3, #2
 8029886:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8029888:	f44f 7380 	mov.w	r3, #256	; 0x100
 802988c:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 802988e:	2300      	movs	r3, #0
 8029890:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 8029892:	2300      	movs	r3, #0
 8029894:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8029896:	2300      	movs	r3, #0
 8029898:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802989a:	f107 0308 	add.w	r3, r7, #8
 802989e:	4618      	mov	r0, r3
 80298a0:	f00a fb34 	bl	8033f0c <HAL_RCCEx_PeriphCLKConfig>
 80298a4:	4603      	mov	r3, r0
 80298a6:	2b00      	cmp	r3, #0
 80298a8:	d001      	beq.n	80298ae <SystemClock_Config+0x126>
  {
    Error_Handler();
 80298aa:	f001 fd4b 	bl	802b344 <Error_Handler>
  }
}
 80298ae:	bf00      	nop
 80298b0:	37a8      	adds	r7, #168	; 0xa8
 80298b2:	46bd      	mov	sp, r7
 80298b4:	bd80      	pop	{r7, pc}
 80298b6:	bf00      	nop
 80298b8:	40023800 	.word	0x40023800
 80298bc:	40007000 	.word	0x40007000

080298c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80298c0:	b580      	push	{r7, lr}
 80298c2:	b084      	sub	sp, #16
 80298c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80298c6:	463b      	mov	r3, r7
 80298c8:	2200      	movs	r2, #0
 80298ca:	601a      	str	r2, [r3, #0]
 80298cc:	605a      	str	r2, [r3, #4]
 80298ce:	609a      	str	r2, [r3, #8]
 80298d0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80298d2:	4b21      	ldr	r3, [pc, #132]	; (8029958 <MX_ADC1_Init+0x98>)
 80298d4:	4a21      	ldr	r2, [pc, #132]	; (802995c <MX_ADC1_Init+0x9c>)
 80298d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80298d8:	4b1f      	ldr	r3, [pc, #124]	; (8029958 <MX_ADC1_Init+0x98>)
 80298da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80298de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80298e0:	4b1d      	ldr	r3, [pc, #116]	; (8029958 <MX_ADC1_Init+0x98>)
 80298e2:	2200      	movs	r2, #0
 80298e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80298e6:	4b1c      	ldr	r3, [pc, #112]	; (8029958 <MX_ADC1_Init+0x98>)
 80298e8:	2200      	movs	r2, #0
 80298ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80298ec:	4b1a      	ldr	r3, [pc, #104]	; (8029958 <MX_ADC1_Init+0x98>)
 80298ee:	2201      	movs	r2, #1
 80298f0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80298f2:	4b19      	ldr	r3, [pc, #100]	; (8029958 <MX_ADC1_Init+0x98>)
 80298f4:	2200      	movs	r2, #0
 80298f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80298fa:	4b17      	ldr	r3, [pc, #92]	; (8029958 <MX_ADC1_Init+0x98>)
 80298fc:	2200      	movs	r2, #0
 80298fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8029900:	4b15      	ldr	r3, [pc, #84]	; (8029958 <MX_ADC1_Init+0x98>)
 8029902:	4a17      	ldr	r2, [pc, #92]	; (8029960 <MX_ADC1_Init+0xa0>)
 8029904:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8029906:	4b14      	ldr	r3, [pc, #80]	; (8029958 <MX_ADC1_Init+0x98>)
 8029908:	2200      	movs	r2, #0
 802990a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 802990c:	4b12      	ldr	r3, [pc, #72]	; (8029958 <MX_ADC1_Init+0x98>)
 802990e:	2201      	movs	r2, #1
 8029910:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8029912:	4b11      	ldr	r3, [pc, #68]	; (8029958 <MX_ADC1_Init+0x98>)
 8029914:	2201      	movs	r2, #1
 8029916:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 802991a:	4b0f      	ldr	r3, [pc, #60]	; (8029958 <MX_ADC1_Init+0x98>)
 802991c:	2200      	movs	r2, #0
 802991e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8029920:	480d      	ldr	r0, [pc, #52]	; (8029958 <MX_ADC1_Init+0x98>)
 8029922:	f002 fcbf 	bl	802c2a4 <HAL_ADC_Init>
 8029926:	4603      	mov	r3, r0
 8029928:	2b00      	cmp	r3, #0
 802992a:	d001      	beq.n	8029930 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 802992c:	f001 fd0a 	bl	802b344 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8029930:	2309      	movs	r3, #9
 8029932:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8029934:	2301      	movs	r3, #1
 8029936:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8029938:	2301      	movs	r3, #1
 802993a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 802993c:	463b      	mov	r3, r7
 802993e:	4619      	mov	r1, r3
 8029940:	4805      	ldr	r0, [pc, #20]	; (8029958 <MX_ADC1_Init+0x98>)
 8029942:	f002 fdd1 	bl	802c4e8 <HAL_ADC_ConfigChannel>
 8029946:	4603      	mov	r3, r0
 8029948:	2b00      	cmp	r3, #0
 802994a:	d001      	beq.n	8029950 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 802994c:	f001 fcfa 	bl	802b344 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8029950:	bf00      	nop
 8029952:	3710      	adds	r7, #16
 8029954:	46bd      	mov	sp, r7
 8029956:	bd80      	pop	{r7, pc}
 8029958:	200086b8 	.word	0x200086b8
 802995c:	40012000 	.word	0x40012000
 8029960:	0f000001 	.word	0x0f000001

08029964 <MX_AES_Init>:
  * @brief AES Initialization Function
  * @param None
  * @retval None
  */
static void MX_AES_Init(void)
{
 8029964:	b580      	push	{r7, lr}
 8029966:	af00      	add	r7, sp, #0
  /* USER CODE END AES_Init 0 */

  /* USER CODE BEGIN AES_Init 1 */

  /* USER CODE END AES_Init 1 */
  hcryp.Instance = AES;
 8029968:	4b0f      	ldr	r3, [pc, #60]	; (80299a8 <MX_AES_Init+0x44>)
 802996a:	4a10      	ldr	r2, [pc, #64]	; (80299ac <MX_AES_Init+0x48>)
 802996c:	601a      	str	r2, [r3, #0]
  hcryp.Init.DataType = CRYP_DATATYPE_8B;
 802996e:	4b0e      	ldr	r3, [pc, #56]	; (80299a8 <MX_AES_Init+0x44>)
 8029970:	2204      	movs	r2, #4
 8029972:	605a      	str	r2, [r3, #4]
  hcryp.Init.KeySize = CRYP_KEYSIZE_128B;
 8029974:	4b0c      	ldr	r3, [pc, #48]	; (80299a8 <MX_AES_Init+0x44>)
 8029976:	2200      	movs	r2, #0
 8029978:	609a      	str	r2, [r3, #8]
  hcryp.Init.pKey = (uint32_t *)pKeyAES;
 802997a:	4b0b      	ldr	r3, [pc, #44]	; (80299a8 <MX_AES_Init+0x44>)
 802997c:	4a0c      	ldr	r2, [pc, #48]	; (80299b0 <MX_AES_Init+0x4c>)
 802997e:	60da      	str	r2, [r3, #12]
  hcryp.Init.Algorithm = CRYP_AES_ECB;
 8029980:	4b09      	ldr	r3, [pc, #36]	; (80299a8 <MX_AES_Init+0x44>)
 8029982:	2200      	movs	r2, #0
 8029984:	615a      	str	r2, [r3, #20]
  hcryp.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_BYTE;
 8029986:	4b08      	ldr	r3, [pc, #32]	; (80299a8 <MX_AES_Init+0x44>)
 8029988:	2201      	movs	r2, #1
 802998a:	625a      	str	r2, [r3, #36]	; 0x24
  hcryp.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ALWAYS;
 802998c:	4b06      	ldr	r3, [pc, #24]	; (80299a8 <MX_AES_Init+0x44>)
 802998e:	2200      	movs	r2, #0
 8029990:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_CRYP_Init(&hcryp) != HAL_OK)
 8029992:	4805      	ldr	r0, [pc, #20]	; (80299a8 <MX_AES_Init+0x44>)
 8029994:	f004 f83d 	bl	802da12 <HAL_CRYP_Init>
 8029998:	4603      	mov	r3, r0
 802999a:	2b00      	cmp	r3, #0
 802999c:	d001      	beq.n	80299a2 <MX_AES_Init+0x3e>
  {
    Error_Handler();
 802999e:	f001 fcd1 	bl	802b344 <Error_Handler>
  }
  /* USER CODE BEGIN AES_Init 2 */

  /* USER CODE END AES_Init 2 */

}
 80299a2:	bf00      	nop
 80299a4:	bd80      	pop	{r7, pc}
 80299a6:	bf00      	nop
 80299a8:	20008964 	.word	0x20008964
 80299ac:	50060000 	.word	0x50060000
 80299b0:	08056050 	.word	0x08056050

080299b4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80299b4:	b580      	push	{r7, lr}
 80299b6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80299b8:	4b17      	ldr	r3, [pc, #92]	; (8029a18 <MX_CAN1_Init+0x64>)
 80299ba:	4a18      	ldr	r2, [pc, #96]	; (8029a1c <MX_CAN1_Init+0x68>)
 80299bc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 80299be:	4b16      	ldr	r3, [pc, #88]	; (8029a18 <MX_CAN1_Init+0x64>)
 80299c0:	220a      	movs	r2, #10
 80299c2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80299c4:	4b14      	ldr	r3, [pc, #80]	; (8029a18 <MX_CAN1_Init+0x64>)
 80299c6:	2200      	movs	r2, #0
 80299c8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80299ca:	4b13      	ldr	r3, [pc, #76]	; (8029a18 <MX_CAN1_Init+0x64>)
 80299cc:	2200      	movs	r2, #0
 80299ce:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 80299d0:	4b11      	ldr	r3, [pc, #68]	; (8029a18 <MX_CAN1_Init+0x64>)
 80299d2:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80299d6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80299d8:	4b0f      	ldr	r3, [pc, #60]	; (8029a18 <MX_CAN1_Init+0x64>)
 80299da:	2200      	movs	r2, #0
 80299dc:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80299de:	4b0e      	ldr	r3, [pc, #56]	; (8029a18 <MX_CAN1_Init+0x64>)
 80299e0:	2200      	movs	r2, #0
 80299e2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80299e4:	4b0c      	ldr	r3, [pc, #48]	; (8029a18 <MX_CAN1_Init+0x64>)
 80299e6:	2201      	movs	r2, #1
 80299e8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80299ea:	4b0b      	ldr	r3, [pc, #44]	; (8029a18 <MX_CAN1_Init+0x64>)
 80299ec:	2200      	movs	r2, #0
 80299ee:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80299f0:	4b09      	ldr	r3, [pc, #36]	; (8029a18 <MX_CAN1_Init+0x64>)
 80299f2:	2200      	movs	r2, #0
 80299f4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80299f6:	4b08      	ldr	r3, [pc, #32]	; (8029a18 <MX_CAN1_Init+0x64>)
 80299f8:	2200      	movs	r2, #0
 80299fa:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80299fc:	4b06      	ldr	r3, [pc, #24]	; (8029a18 <MX_CAN1_Init+0x64>)
 80299fe:	2200      	movs	r2, #0
 8029a00:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8029a02:	4805      	ldr	r0, [pc, #20]	; (8029a18 <MX_CAN1_Init+0x64>)
 8029a04:	f003 f820 	bl	802ca48 <HAL_CAN_Init>
 8029a08:	4603      	mov	r3, r0
 8029a0a:	2b00      	cmp	r3, #0
 8029a0c:	d001      	beq.n	8029a12 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8029a0e:	f001 fc99 	bl	802b344 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8029a12:	bf00      	nop
 8029a14:	bd80      	pop	{r7, pc}
 8029a16:	bf00      	nop
 8029a18:	20008934 	.word	0x20008934
 8029a1c:	40006400 	.word	0x40006400

08029a20 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8029a20:	b580      	push	{r7, lr}
 8029a22:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8029a24:	4b06      	ldr	r3, [pc, #24]	; (8029a40 <MX_CRC_Init+0x20>)
 8029a26:	4a07      	ldr	r2, [pc, #28]	; (8029a44 <MX_CRC_Init+0x24>)
 8029a28:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8029a2a:	4805      	ldr	r0, [pc, #20]	; (8029a40 <MX_CRC_Init+0x20>)
 8029a2c:	f003 ffd5 	bl	802d9da <HAL_CRC_Init>
 8029a30:	4603      	mov	r3, r0
 8029a32:	2b00      	cmp	r3, #0
 8029a34:	d001      	beq.n	8029a3a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8029a36:	f001 fc85 	bl	802b344 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8029a3a:	bf00      	nop
 8029a3c:	bd80      	pop	{r7, pc}
 8029a3e:	bf00      	nop
 8029a40:	200085dc 	.word	0x200085dc
 8029a44:	40023000 	.word	0x40023000

08029a48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8029a48:	b580      	push	{r7, lr}
 8029a4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8029a4c:	4b1b      	ldr	r3, [pc, #108]	; (8029abc <MX_I2C1_Init+0x74>)
 8029a4e:	4a1c      	ldr	r2, [pc, #112]	; (8029ac0 <MX_I2C1_Init+0x78>)
 8029a50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8029a52:	4b1a      	ldr	r3, [pc, #104]	; (8029abc <MX_I2C1_Init+0x74>)
 8029a54:	4a1b      	ldr	r2, [pc, #108]	; (8029ac4 <MX_I2C1_Init+0x7c>)
 8029a56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8029a58:	4b18      	ldr	r3, [pc, #96]	; (8029abc <MX_I2C1_Init+0x74>)
 8029a5a:	2200      	movs	r2, #0
 8029a5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8029a5e:	4b17      	ldr	r3, [pc, #92]	; (8029abc <MX_I2C1_Init+0x74>)
 8029a60:	2200      	movs	r2, #0
 8029a62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8029a64:	4b15      	ldr	r3, [pc, #84]	; (8029abc <MX_I2C1_Init+0x74>)
 8029a66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8029a6a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8029a6c:	4b13      	ldr	r3, [pc, #76]	; (8029abc <MX_I2C1_Init+0x74>)
 8029a6e:	2200      	movs	r2, #0
 8029a70:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8029a72:	4b12      	ldr	r3, [pc, #72]	; (8029abc <MX_I2C1_Init+0x74>)
 8029a74:	2200      	movs	r2, #0
 8029a76:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8029a78:	4b10      	ldr	r3, [pc, #64]	; (8029abc <MX_I2C1_Init+0x74>)
 8029a7a:	2200      	movs	r2, #0
 8029a7c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8029a7e:	4b0f      	ldr	r3, [pc, #60]	; (8029abc <MX_I2C1_Init+0x74>)
 8029a80:	2200      	movs	r2, #0
 8029a82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8029a84:	480d      	ldr	r0, [pc, #52]	; (8029abc <MX_I2C1_Init+0x74>)
 8029a86:	f006 fb1d 	bl	80300c4 <HAL_I2C_Init>
 8029a8a:	4603      	mov	r3, r0
 8029a8c:	2b00      	cmp	r3, #0
 8029a8e:	d001      	beq.n	8029a94 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8029a90:	f001 fc58 	bl	802b344 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8029a94:	2100      	movs	r1, #0
 8029a96:	4809      	ldr	r0, [pc, #36]	; (8029abc <MX_I2C1_Init+0x74>)
 8029a98:	f009 f981 	bl	8032d9e <HAL_I2CEx_ConfigAnalogFilter>
 8029a9c:	4603      	mov	r3, r0
 8029a9e:	2b00      	cmp	r3, #0
 8029aa0:	d001      	beq.n	8029aa6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8029aa2:	f001 fc4f 	bl	802b344 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8029aa6:	2100      	movs	r1, #0
 8029aa8:	4804      	ldr	r0, [pc, #16]	; (8029abc <MX_I2C1_Init+0x74>)
 8029aaa:	f009 f9b4 	bl	8032e16 <HAL_I2CEx_ConfigDigitalFilter>
 8029aae:	4603      	mov	r3, r0
 8029ab0:	2b00      	cmp	r3, #0
 8029ab2:	d001      	beq.n	8029ab8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8029ab4:	f001 fc46 	bl	802b344 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8029ab8:	bf00      	nop
 8029aba:	bd80      	pop	{r7, pc}
 8029abc:	20008534 	.word	0x20008534
 8029ac0:	40005400 	.word	0x40005400
 8029ac4:	000186a0 	.word	0x000186a0

08029ac8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8029ac8:	b580      	push	{r7, lr}
 8029aca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8029acc:	4b1b      	ldr	r3, [pc, #108]	; (8029b3c <MX_I2C2_Init+0x74>)
 8029ace:	4a1c      	ldr	r2, [pc, #112]	; (8029b40 <MX_I2C2_Init+0x78>)
 8029ad0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8029ad2:	4b1a      	ldr	r3, [pc, #104]	; (8029b3c <MX_I2C2_Init+0x74>)
 8029ad4:	4a1b      	ldr	r2, [pc, #108]	; (8029b44 <MX_I2C2_Init+0x7c>)
 8029ad6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8029ad8:	4b18      	ldr	r3, [pc, #96]	; (8029b3c <MX_I2C2_Init+0x74>)
 8029ada:	2200      	movs	r2, #0
 8029adc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8029ade:	4b17      	ldr	r3, [pc, #92]	; (8029b3c <MX_I2C2_Init+0x74>)
 8029ae0:	2200      	movs	r2, #0
 8029ae2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8029ae4:	4b15      	ldr	r3, [pc, #84]	; (8029b3c <MX_I2C2_Init+0x74>)
 8029ae6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8029aea:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8029aec:	4b13      	ldr	r3, [pc, #76]	; (8029b3c <MX_I2C2_Init+0x74>)
 8029aee:	2200      	movs	r2, #0
 8029af0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8029af2:	4b12      	ldr	r3, [pc, #72]	; (8029b3c <MX_I2C2_Init+0x74>)
 8029af4:	2200      	movs	r2, #0
 8029af6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8029af8:	4b10      	ldr	r3, [pc, #64]	; (8029b3c <MX_I2C2_Init+0x74>)
 8029afa:	2200      	movs	r2, #0
 8029afc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8029afe:	4b0f      	ldr	r3, [pc, #60]	; (8029b3c <MX_I2C2_Init+0x74>)
 8029b00:	2200      	movs	r2, #0
 8029b02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8029b04:	480d      	ldr	r0, [pc, #52]	; (8029b3c <MX_I2C2_Init+0x74>)
 8029b06:	f006 fadd 	bl	80300c4 <HAL_I2C_Init>
 8029b0a:	4603      	mov	r3, r0
 8029b0c:	2b00      	cmp	r3, #0
 8029b0e:	d001      	beq.n	8029b14 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8029b10:	f001 fc18 	bl	802b344 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8029b14:	2100      	movs	r1, #0
 8029b16:	4809      	ldr	r0, [pc, #36]	; (8029b3c <MX_I2C2_Init+0x74>)
 8029b18:	f009 f941 	bl	8032d9e <HAL_I2CEx_ConfigAnalogFilter>
 8029b1c:	4603      	mov	r3, r0
 8029b1e:	2b00      	cmp	r3, #0
 8029b20:	d001      	beq.n	8029b26 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8029b22:	f001 fc0f 	bl	802b344 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8029b26:	2100      	movs	r1, #0
 8029b28:	4804      	ldr	r0, [pc, #16]	; (8029b3c <MX_I2C2_Init+0x74>)
 8029b2a:	f009 f974 	bl	8032e16 <HAL_I2CEx_ConfigDigitalFilter>
 8029b2e:	4603      	mov	r3, r0
 8029b30:	2b00      	cmp	r3, #0
 8029b32:	d001      	beq.n	8029b38 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8029b34:	f001 fc06 	bl	802b344 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8029b38:	bf00      	nop
 8029b3a:	bd80      	pop	{r7, pc}
 8029b3c:	200085e4 	.word	0x200085e4
 8029b40:	40005800 	.word	0x40005800
 8029b44:	000186a0 	.word	0x000186a0

08029b48 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8029b48:	b580      	push	{r7, lr}
 8029b4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8029b4c:	4b1b      	ldr	r3, [pc, #108]	; (8029bbc <MX_I2C3_Init+0x74>)
 8029b4e:	4a1c      	ldr	r2, [pc, #112]	; (8029bc0 <MX_I2C3_Init+0x78>)
 8029b50:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8029b52:	4b1a      	ldr	r3, [pc, #104]	; (8029bbc <MX_I2C3_Init+0x74>)
 8029b54:	4a1b      	ldr	r2, [pc, #108]	; (8029bc4 <MX_I2C3_Init+0x7c>)
 8029b56:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8029b58:	4b18      	ldr	r3, [pc, #96]	; (8029bbc <MX_I2C3_Init+0x74>)
 8029b5a:	2200      	movs	r2, #0
 8029b5c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8029b5e:	4b17      	ldr	r3, [pc, #92]	; (8029bbc <MX_I2C3_Init+0x74>)
 8029b60:	2200      	movs	r2, #0
 8029b62:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8029b64:	4b15      	ldr	r3, [pc, #84]	; (8029bbc <MX_I2C3_Init+0x74>)
 8029b66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8029b6a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8029b6c:	4b13      	ldr	r3, [pc, #76]	; (8029bbc <MX_I2C3_Init+0x74>)
 8029b6e:	2200      	movs	r2, #0
 8029b70:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8029b72:	4b12      	ldr	r3, [pc, #72]	; (8029bbc <MX_I2C3_Init+0x74>)
 8029b74:	2200      	movs	r2, #0
 8029b76:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8029b78:	4b10      	ldr	r3, [pc, #64]	; (8029bbc <MX_I2C3_Init+0x74>)
 8029b7a:	2200      	movs	r2, #0
 8029b7c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8029b7e:	4b0f      	ldr	r3, [pc, #60]	; (8029bbc <MX_I2C3_Init+0x74>)
 8029b80:	2200      	movs	r2, #0
 8029b82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8029b84:	480d      	ldr	r0, [pc, #52]	; (8029bbc <MX_I2C3_Init+0x74>)
 8029b86:	f006 fa9d 	bl	80300c4 <HAL_I2C_Init>
 8029b8a:	4603      	mov	r3, r0
 8029b8c:	2b00      	cmp	r3, #0
 8029b8e:	d001      	beq.n	8029b94 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8029b90:	f001 fbd8 	bl	802b344 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8029b94:	2100      	movs	r1, #0
 8029b96:	4809      	ldr	r0, [pc, #36]	; (8029bbc <MX_I2C3_Init+0x74>)
 8029b98:	f009 f901 	bl	8032d9e <HAL_I2CEx_ConfigAnalogFilter>
 8029b9c:	4603      	mov	r3, r0
 8029b9e:	2b00      	cmp	r3, #0
 8029ba0:	d001      	beq.n	8029ba6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8029ba2:	f001 fbcf 	bl	802b344 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8029ba6:	2100      	movs	r1, #0
 8029ba8:	4804      	ldr	r0, [pc, #16]	; (8029bbc <MX_I2C3_Init+0x74>)
 8029baa:	f009 f934 	bl	8032e16 <HAL_I2CEx_ConfigDigitalFilter>
 8029bae:	4603      	mov	r3, r0
 8029bb0:	2b00      	cmp	r3, #0
 8029bb2:	d001      	beq.n	8029bb8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8029bb4:	f001 fbc6 	bl	802b344 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8029bb8:	bf00      	nop
 8029bba:	bd80      	pop	{r7, pc}
 8029bbc:	200084dc 	.word	0x200084dc
 8029bc0:	40005c00 	.word	0x40005c00
 8029bc4:	000186a0 	.word	0x000186a0

08029bc8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8029bc8:	b580      	push	{r7, lr}
 8029bca:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8029bcc:	4b13      	ldr	r3, [pc, #76]	; (8029c1c <MX_I2S3_Init+0x54>)
 8029bce:	4a14      	ldr	r2, [pc, #80]	; (8029c20 <MX_I2S3_Init+0x58>)
 8029bd0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8029bd2:	4b12      	ldr	r3, [pc, #72]	; (8029c1c <MX_I2S3_Init+0x54>)
 8029bd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8029bd8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8029bda:	4b10      	ldr	r3, [pc, #64]	; (8029c1c <MX_I2S3_Init+0x54>)
 8029bdc:	2200      	movs	r2, #0
 8029bde:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8029be0:	4b0e      	ldr	r3, [pc, #56]	; (8029c1c <MX_I2S3_Init+0x54>)
 8029be2:	2200      	movs	r2, #0
 8029be4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8029be6:	4b0d      	ldr	r3, [pc, #52]	; (8029c1c <MX_I2S3_Init+0x54>)
 8029be8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8029bec:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8029bee:	4b0b      	ldr	r3, [pc, #44]	; (8029c1c <MX_I2S3_Init+0x54>)
 8029bf0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8029bf4:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8029bf6:	4b09      	ldr	r3, [pc, #36]	; (8029c1c <MX_I2S3_Init+0x54>)
 8029bf8:	2200      	movs	r2, #0
 8029bfa:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8029bfc:	4b07      	ldr	r3, [pc, #28]	; (8029c1c <MX_I2S3_Init+0x54>)
 8029bfe:	2200      	movs	r2, #0
 8029c00:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8029c02:	4b06      	ldr	r3, [pc, #24]	; (8029c1c <MX_I2S3_Init+0x54>)
 8029c04:	2200      	movs	r2, #0
 8029c06:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8029c08:	4804      	ldr	r0, [pc, #16]	; (8029c1c <MX_I2S3_Init+0x54>)
 8029c0a:	f009 f943 	bl	8032e94 <HAL_I2S_Init>
 8029c0e:	4603      	mov	r3, r0
 8029c10:	2b00      	cmp	r3, #0
 8029c12:	d001      	beq.n	8029c18 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8029c14:	f001 fb96 	bl	802b344 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8029c18:	bf00      	nop
 8029c1a:	bd80      	pop	{r7, pc}
 8029c1c:	200089c0 	.word	0x200089c0
 8029c20:	40003c00 	.word	0x40003c00

08029c24 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8029c24:	b580      	push	{r7, lr}
 8029c26:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8029c28:	4b09      	ldr	r3, [pc, #36]	; (8029c50 <MX_IWDG_Init+0x2c>)
 8029c2a:	4a0a      	ldr	r2, [pc, #40]	; (8029c54 <MX_IWDG_Init+0x30>)
 8029c2c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8029c2e:	4b08      	ldr	r3, [pc, #32]	; (8029c50 <MX_IWDG_Init+0x2c>)
 8029c30:	2203      	movs	r2, #3
 8029c32:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8029c34:	4b06      	ldr	r3, [pc, #24]	; (8029c50 <MX_IWDG_Init+0x2c>)
 8029c36:	f640 72ff 	movw	r2, #4095	; 0xfff
 8029c3a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8029c3c:	4804      	ldr	r0, [pc, #16]	; (8029c50 <MX_IWDG_Init+0x2c>)
 8029c3e:	f009 fef7 	bl	8033a30 <HAL_IWDG_Init>
 8029c42:	4603      	mov	r3, r0
 8029c44:	2b00      	cmp	r3, #0
 8029c46:	d001      	beq.n	8029c4c <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8029c48:	f001 fb7c 	bl	802b344 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8029c4c:	bf00      	nop
 8029c4e:	bd80      	pop	{r7, pc}
 8029c50:	200085d0 	.word	0x200085d0
 8029c54:	40003000 	.word	0x40003000

08029c58 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8029c58:	b580      	push	{r7, lr}
 8029c5a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8029c5c:	4b06      	ldr	r3, [pc, #24]	; (8029c78 <MX_RNG_Init+0x20>)
 8029c5e:	4a07      	ldr	r2, [pc, #28]	; (8029c7c <MX_RNG_Init+0x24>)
 8029c60:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8029c62:	4805      	ldr	r0, [pc, #20]	; (8029c78 <MX_RNG_Init+0x20>)
 8029c64:	f00b f820 	bl	8034ca8 <HAL_RNG_Init>
 8029c68:	4603      	mov	r3, r0
 8029c6a:	2b00      	cmp	r3, #0
 8029c6c:	d001      	beq.n	8029c72 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8029c6e:	f001 fb69 	bl	802b344 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8029c72:	bf00      	nop
 8029c74:	bd80      	pop	{r7, pc}
 8029c76:	bf00      	nop
 8029c78:	20008830 	.word	0x20008830
 8029c7c:	50060800 	.word	0x50060800

08029c80 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8029c80:	b580      	push	{r7, lr}
 8029c82:	b086      	sub	sp, #24
 8029c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8029c86:	1d3b      	adds	r3, r7, #4
 8029c88:	2200      	movs	r2, #0
 8029c8a:	601a      	str	r2, [r3, #0]
 8029c8c:	605a      	str	r2, [r3, #4]
 8029c8e:	609a      	str	r2, [r3, #8]
 8029c90:	60da      	str	r2, [r3, #12]
 8029c92:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8029c94:	2300      	movs	r3, #0
 8029c96:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8029c98:	4b24      	ldr	r3, [pc, #144]	; (8029d2c <MX_RTC_Init+0xac>)
 8029c9a:	4a25      	ldr	r2, [pc, #148]	; (8029d30 <MX_RTC_Init+0xb0>)
 8029c9c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8029c9e:	4b23      	ldr	r3, [pc, #140]	; (8029d2c <MX_RTC_Init+0xac>)
 8029ca0:	2200      	movs	r2, #0
 8029ca2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8029ca4:	4b21      	ldr	r3, [pc, #132]	; (8029d2c <MX_RTC_Init+0xac>)
 8029ca6:	227f      	movs	r2, #127	; 0x7f
 8029ca8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8029caa:	4b20      	ldr	r3, [pc, #128]	; (8029d2c <MX_RTC_Init+0xac>)
 8029cac:	22ff      	movs	r2, #255	; 0xff
 8029cae:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8029cb0:	4b1e      	ldr	r3, [pc, #120]	; (8029d2c <MX_RTC_Init+0xac>)
 8029cb2:	2200      	movs	r2, #0
 8029cb4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8029cb6:	4b1d      	ldr	r3, [pc, #116]	; (8029d2c <MX_RTC_Init+0xac>)
 8029cb8:	2200      	movs	r2, #0
 8029cba:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8029cbc:	4b1b      	ldr	r3, [pc, #108]	; (8029d2c <MX_RTC_Init+0xac>)
 8029cbe:	2200      	movs	r2, #0
 8029cc0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8029cc2:	481a      	ldr	r0, [pc, #104]	; (8029d2c <MX_RTC_Init+0xac>)
 8029cc4:	f00b f869 	bl	8034d9a <HAL_RTC_Init>
 8029cc8:	4603      	mov	r3, r0
 8029cca:	2b00      	cmp	r3, #0
 8029ccc:	d001      	beq.n	8029cd2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8029cce:	f001 fb39 	bl	802b344 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8029cd2:	2300      	movs	r3, #0
 8029cd4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8029cd6:	2300      	movs	r3, #0
 8029cd8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8029cda:	2300      	movs	r3, #0
 8029cdc:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8029cde:	2300      	movs	r3, #0
 8029ce0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8029ce2:	2300      	movs	r3, #0
 8029ce4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8029ce6:	1d3b      	adds	r3, r7, #4
 8029ce8:	2201      	movs	r2, #1
 8029cea:	4619      	mov	r1, r3
 8029cec:	480f      	ldr	r0, [pc, #60]	; (8029d2c <MX_RTC_Init+0xac>)
 8029cee:	f00b f8e5 	bl	8034ebc <HAL_RTC_SetTime>
 8029cf2:	4603      	mov	r3, r0
 8029cf4:	2b00      	cmp	r3, #0
 8029cf6:	d001      	beq.n	8029cfc <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8029cf8:	f001 fb24 	bl	802b344 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8029cfc:	2303      	movs	r3, #3
 8029cfe:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8029d00:	2301      	movs	r3, #1
 8029d02:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8029d04:	2301      	movs	r3, #1
 8029d06:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x20;
 8029d08:	2320      	movs	r3, #32
 8029d0a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8029d0c:	463b      	mov	r3, r7
 8029d0e:	2201      	movs	r2, #1
 8029d10:	4619      	mov	r1, r3
 8029d12:	4806      	ldr	r0, [pc, #24]	; (8029d2c <MX_RTC_Init+0xac>)
 8029d14:	f00b f9ed 	bl	80350f2 <HAL_RTC_SetDate>
 8029d18:	4603      	mov	r3, r0
 8029d1a:	2b00      	cmp	r3, #0
 8029d1c:	d001      	beq.n	8029d22 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8029d1e:	f001 fb11 	bl	802b344 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8029d22:	bf00      	nop
 8029d24:	3718      	adds	r7, #24
 8029d26:	46bd      	mov	sp, r7
 8029d28:	bd80      	pop	{r7, pc}
 8029d2a:	bf00      	nop
 8029d2c:	2000880c 	.word	0x2000880c
 8029d30:	40002800 	.word	0x40002800

08029d34 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8029d34:	b580      	push	{r7, lr}
 8029d36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8029d38:	4b17      	ldr	r3, [pc, #92]	; (8029d98 <MX_SPI1_Init+0x64>)
 8029d3a:	4a18      	ldr	r2, [pc, #96]	; (8029d9c <MX_SPI1_Init+0x68>)
 8029d3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8029d3e:	4b16      	ldr	r3, [pc, #88]	; (8029d98 <MX_SPI1_Init+0x64>)
 8029d40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8029d44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8029d46:	4b14      	ldr	r3, [pc, #80]	; (8029d98 <MX_SPI1_Init+0x64>)
 8029d48:	2200      	movs	r2, #0
 8029d4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8029d4c:	4b12      	ldr	r3, [pc, #72]	; (8029d98 <MX_SPI1_Init+0x64>)
 8029d4e:	2200      	movs	r2, #0
 8029d50:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8029d52:	4b11      	ldr	r3, [pc, #68]	; (8029d98 <MX_SPI1_Init+0x64>)
 8029d54:	2200      	movs	r2, #0
 8029d56:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8029d58:	4b0f      	ldr	r3, [pc, #60]	; (8029d98 <MX_SPI1_Init+0x64>)
 8029d5a:	2200      	movs	r2, #0
 8029d5c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8029d5e:	4b0e      	ldr	r3, [pc, #56]	; (8029d98 <MX_SPI1_Init+0x64>)
 8029d60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8029d64:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8029d66:	4b0c      	ldr	r3, [pc, #48]	; (8029d98 <MX_SPI1_Init+0x64>)
 8029d68:	2228      	movs	r2, #40	; 0x28
 8029d6a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8029d6c:	4b0a      	ldr	r3, [pc, #40]	; (8029d98 <MX_SPI1_Init+0x64>)
 8029d6e:	2200      	movs	r2, #0
 8029d70:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8029d72:	4b09      	ldr	r3, [pc, #36]	; (8029d98 <MX_SPI1_Init+0x64>)
 8029d74:	2200      	movs	r2, #0
 8029d76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8029d78:	4b07      	ldr	r3, [pc, #28]	; (8029d98 <MX_SPI1_Init+0x64>)
 8029d7a:	2200      	movs	r2, #0
 8029d7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8029d7e:	4b06      	ldr	r3, [pc, #24]	; (8029d98 <MX_SPI1_Init+0x64>)
 8029d80:	220a      	movs	r2, #10
 8029d82:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8029d84:	4804      	ldr	r0, [pc, #16]	; (8029d98 <MX_SPI1_Init+0x64>)
 8029d86:	f00b fb3a 	bl	80353fe <HAL_SPI_Init>
 8029d8a:	4603      	mov	r3, r0
 8029d8c:	2b00      	cmp	r3, #0
 8029d8e:	d001      	beq.n	8029d94 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8029d90:	f001 fad8 	bl	802b344 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8029d94:	bf00      	nop
 8029d96:	bd80      	pop	{r7, pc}
 8029d98:	20008890 	.word	0x20008890
 8029d9c:	40013000 	.word	0x40013000

08029da0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8029da0:	b580      	push	{r7, lr}
 8029da2:	b088      	sub	sp, #32
 8029da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8029da6:	1d3b      	adds	r3, r7, #4
 8029da8:	2200      	movs	r2, #0
 8029daa:	601a      	str	r2, [r3, #0]
 8029dac:	605a      	str	r2, [r3, #4]
 8029dae:	609a      	str	r2, [r3, #8]
 8029db0:	60da      	str	r2, [r3, #12]
 8029db2:	611a      	str	r2, [r3, #16]
 8029db4:	615a      	str	r2, [r3, #20]
 8029db6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8029db8:	4b1f      	ldr	r3, [pc, #124]	; (8029e38 <MX_TIM10_Init+0x98>)
 8029dba:	4a20      	ldr	r2, [pc, #128]	; (8029e3c <MX_TIM10_Init+0x9c>)
 8029dbc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 36630-1;
 8029dbe:	4b1e      	ldr	r3, [pc, #120]	; (8029e38 <MX_TIM10_Init+0x98>)
 8029dc0:	f648 7215 	movw	r2, #36629	; 0x8f15
 8029dc4:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8029dc6:	4b1c      	ldr	r3, [pc, #112]	; (8029e38 <MX_TIM10_Init+0x98>)
 8029dc8:	2200      	movs	r2, #0
 8029dca:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 36630-1;
 8029dcc:	4b1a      	ldr	r3, [pc, #104]	; (8029e38 <MX_TIM10_Init+0x98>)
 8029dce:	f648 7215 	movw	r2, #36629	; 0x8f15
 8029dd2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8029dd4:	4b18      	ldr	r3, [pc, #96]	; (8029e38 <MX_TIM10_Init+0x98>)
 8029dd6:	2200      	movs	r2, #0
 8029dd8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8029dda:	4b17      	ldr	r3, [pc, #92]	; (8029e38 <MX_TIM10_Init+0x98>)
 8029ddc:	2280      	movs	r2, #128	; 0x80
 8029dde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8029de0:	4815      	ldr	r0, [pc, #84]	; (8029e38 <MX_TIM10_Init+0x98>)
 8029de2:	f00b fdbf 	bl	8035964 <HAL_TIM_Base_Init>
 8029de6:	4603      	mov	r3, r0
 8029de8:	2b00      	cmp	r3, #0
 8029dea:	d001      	beq.n	8029df0 <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 8029dec:	f001 faaa 	bl	802b344 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8029df0:	4811      	ldr	r0, [pc, #68]	; (8029e38 <MX_TIM10_Init+0x98>)
 8029df2:	f00b fe06 	bl	8035a02 <HAL_TIM_PWM_Init>
 8029df6:	4603      	mov	r3, r0
 8029df8:	2b00      	cmp	r3, #0
 8029dfa:	d001      	beq.n	8029e00 <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 8029dfc:	f001 faa2 	bl	802b344 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8029e00:	2370      	movs	r3, #112	; 0x70
 8029e02:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 36630/2;
 8029e04:	f244 738b 	movw	r3, #18315	; 0x478b
 8029e08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8029e0a:	2300      	movs	r3, #0
 8029e0c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8029e0e:	2300      	movs	r3, #0
 8029e10:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8029e12:	1d3b      	adds	r3, r7, #4
 8029e14:	2200      	movs	r2, #0
 8029e16:	4619      	mov	r1, r3
 8029e18:	4807      	ldr	r0, [pc, #28]	; (8029e38 <MX_TIM10_Init+0x98>)
 8029e1a:	f00b ff2f 	bl	8035c7c <HAL_TIM_PWM_ConfigChannel>
 8029e1e:	4603      	mov	r3, r0
 8029e20:	2b00      	cmp	r3, #0
 8029e22:	d001      	beq.n	8029e28 <MX_TIM10_Init+0x88>
  {
    Error_Handler();
 8029e24:	f001 fa8e 	bl	802b344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8029e28:	4803      	ldr	r0, [pc, #12]	; (8029e38 <MX_TIM10_Init+0x98>)
 8029e2a:	f001 fe69 	bl	802bb00 <HAL_TIM_MspPostInit>

}
 8029e2e:	bf00      	nop
 8029e30:	3720      	adds	r7, #32
 8029e32:	46bd      	mov	sp, r7
 8029e34:	bd80      	pop	{r7, pc}
 8029e36:	bf00      	nop
 8029e38:	20008590 	.word	0x20008590
 8029e3c:	40014400 	.word	0x40014400

08029e40 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8029e40:	b580      	push	{r7, lr}
 8029e42:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8029e44:	4b11      	ldr	r3, [pc, #68]	; (8029e8c <MX_UART4_Init+0x4c>)
 8029e46:	4a12      	ldr	r2, [pc, #72]	; (8029e90 <MX_UART4_Init+0x50>)
 8029e48:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 57600;
 8029e4a:	4b10      	ldr	r3, [pc, #64]	; (8029e8c <MX_UART4_Init+0x4c>)
 8029e4c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8029e50:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8029e52:	4b0e      	ldr	r3, [pc, #56]	; (8029e8c <MX_UART4_Init+0x4c>)
 8029e54:	2200      	movs	r2, #0
 8029e56:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8029e58:	4b0c      	ldr	r3, [pc, #48]	; (8029e8c <MX_UART4_Init+0x4c>)
 8029e5a:	2200      	movs	r2, #0
 8029e5c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8029e5e:	4b0b      	ldr	r3, [pc, #44]	; (8029e8c <MX_UART4_Init+0x4c>)
 8029e60:	2200      	movs	r2, #0
 8029e62:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8029e64:	4b09      	ldr	r3, [pc, #36]	; (8029e8c <MX_UART4_Init+0x4c>)
 8029e66:	220c      	movs	r2, #12
 8029e68:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8029e6a:	4b08      	ldr	r3, [pc, #32]	; (8029e8c <MX_UART4_Init+0x4c>)
 8029e6c:	2200      	movs	r2, #0
 8029e6e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8029e70:	4b06      	ldr	r3, [pc, #24]	; (8029e8c <MX_UART4_Init+0x4c>)
 8029e72:	2200      	movs	r2, #0
 8029e74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8029e76:	4805      	ldr	r0, [pc, #20]	; (8029e8c <MX_UART4_Init+0x4c>)
 8029e78:	f00c fa52 	bl	8036320 <HAL_UART_Init>
 8029e7c:	4603      	mov	r3, r0
 8029e7e:	2b00      	cmp	r3, #0
 8029e80:	d001      	beq.n	8029e86 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8029e82:	f001 fa5f 	bl	802b344 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8029e86:	bf00      	nop
 8029e88:	bd80      	pop	{r7, pc}
 8029e8a:	bf00      	nop
 8029e8c:	20008850 	.word	0x20008850
 8029e90:	40004c00 	.word	0x40004c00

08029e94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8029e94:	b580      	push	{r7, lr}
 8029e96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8029e98:	4b11      	ldr	r3, [pc, #68]	; (8029ee0 <MX_USART1_UART_Init+0x4c>)
 8029e9a:	4a12      	ldr	r2, [pc, #72]	; (8029ee4 <MX_USART1_UART_Init+0x50>)
 8029e9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8029e9e:	4b10      	ldr	r3, [pc, #64]	; (8029ee0 <MX_USART1_UART_Init+0x4c>)
 8029ea0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8029ea4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8029ea6:	4b0e      	ldr	r3, [pc, #56]	; (8029ee0 <MX_USART1_UART_Init+0x4c>)
 8029ea8:	2200      	movs	r2, #0
 8029eaa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8029eac:	4b0c      	ldr	r3, [pc, #48]	; (8029ee0 <MX_USART1_UART_Init+0x4c>)
 8029eae:	2200      	movs	r2, #0
 8029eb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8029eb2:	4b0b      	ldr	r3, [pc, #44]	; (8029ee0 <MX_USART1_UART_Init+0x4c>)
 8029eb4:	2200      	movs	r2, #0
 8029eb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8029eb8:	4b09      	ldr	r3, [pc, #36]	; (8029ee0 <MX_USART1_UART_Init+0x4c>)
 8029eba:	220c      	movs	r2, #12
 8029ebc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8029ebe:	4b08      	ldr	r3, [pc, #32]	; (8029ee0 <MX_USART1_UART_Init+0x4c>)
 8029ec0:	2200      	movs	r2, #0
 8029ec2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8029ec4:	4b06      	ldr	r3, [pc, #24]	; (8029ee0 <MX_USART1_UART_Init+0x4c>)
 8029ec6:	2200      	movs	r2, #0
 8029ec8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8029eca:	4805      	ldr	r0, [pc, #20]	; (8029ee0 <MX_USART1_UART_Init+0x4c>)
 8029ecc:	f00c fa28 	bl	8036320 <HAL_UART_Init>
 8029ed0:	4603      	mov	r3, r0
 8029ed2:	2b00      	cmp	r3, #0
 8029ed4:	d001      	beq.n	8029eda <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8029ed6:	f001 fa35 	bl	802b344 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8029eda:	bf00      	nop
 8029edc:	bd80      	pop	{r7, pc}
 8029ede:	bf00      	nop
 8029ee0:	20008764 	.word	0x20008764
 8029ee4:	40011000 	.word	0x40011000

08029ee8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8029ee8:	b580      	push	{r7, lr}
 8029eea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8029eec:	4b11      	ldr	r3, [pc, #68]	; (8029f34 <MX_USART2_UART_Init+0x4c>)
 8029eee:	4a12      	ldr	r2, [pc, #72]	; (8029f38 <MX_USART2_UART_Init+0x50>)
 8029ef0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8029ef2:	4b10      	ldr	r3, [pc, #64]	; (8029f34 <MX_USART2_UART_Init+0x4c>)
 8029ef4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8029ef8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8029efa:	4b0e      	ldr	r3, [pc, #56]	; (8029f34 <MX_USART2_UART_Init+0x4c>)
 8029efc:	2200      	movs	r2, #0
 8029efe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8029f00:	4b0c      	ldr	r3, [pc, #48]	; (8029f34 <MX_USART2_UART_Init+0x4c>)
 8029f02:	2200      	movs	r2, #0
 8029f04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8029f06:	4b0b      	ldr	r3, [pc, #44]	; (8029f34 <MX_USART2_UART_Init+0x4c>)
 8029f08:	2200      	movs	r2, #0
 8029f0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8029f0c:	4b09      	ldr	r3, [pc, #36]	; (8029f34 <MX_USART2_UART_Init+0x4c>)
 8029f0e:	2204      	movs	r2, #4
 8029f10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8029f12:	4b08      	ldr	r3, [pc, #32]	; (8029f34 <MX_USART2_UART_Init+0x4c>)
 8029f14:	2200      	movs	r2, #0
 8029f16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8029f18:	4b06      	ldr	r3, [pc, #24]	; (8029f34 <MX_USART2_UART_Init+0x4c>)
 8029f1a:	2200      	movs	r2, #0
 8029f1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8029f1e:	4805      	ldr	r0, [pc, #20]	; (8029f34 <MX_USART2_UART_Init+0x4c>)
 8029f20:	f00c f9fe 	bl	8036320 <HAL_UART_Init>
 8029f24:	4603      	mov	r3, r0
 8029f26:	2b00      	cmp	r3, #0
 8029f28:	d001      	beq.n	8029f2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8029f2a:	f001 fa0b 	bl	802b344 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8029f2e:	bf00      	nop
 8029f30:	bd80      	pop	{r7, pc}
 8029f32:	bf00      	nop
 8029f34:	200088f0 	.word	0x200088f0
 8029f38:	40004400 	.word	0x40004400

08029f3c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8029f3c:	b580      	push	{r7, lr}
 8029f3e:	b082      	sub	sp, #8
 8029f40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8029f42:	2300      	movs	r3, #0
 8029f44:	607b      	str	r3, [r7, #4]
 8029f46:	4b23      	ldr	r3, [pc, #140]	; (8029fd4 <MX_DMA_Init+0x98>)
 8029f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029f4a:	4a22      	ldr	r2, [pc, #136]	; (8029fd4 <MX_DMA_Init+0x98>)
 8029f4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8029f50:	6313      	str	r3, [r2, #48]	; 0x30
 8029f52:	4b20      	ldr	r3, [pc, #128]	; (8029fd4 <MX_DMA_Init+0x98>)
 8029f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8029f5a:	607b      	str	r3, [r7, #4]
 8029f5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8029f5e:	2300      	movs	r3, #0
 8029f60:	603b      	str	r3, [r7, #0]
 8029f62:	4b1c      	ldr	r3, [pc, #112]	; (8029fd4 <MX_DMA_Init+0x98>)
 8029f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029f66:	4a1b      	ldr	r2, [pc, #108]	; (8029fd4 <MX_DMA_Init+0x98>)
 8029f68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8029f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8029f6e:	4b19      	ldr	r3, [pc, #100]	; (8029fd4 <MX_DMA_Init+0x98>)
 8029f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029f72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8029f76:	603b      	str	r3, [r7, #0]
 8029f78:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8029f7a:	2200      	movs	r2, #0
 8029f7c:	2105      	movs	r1, #5
 8029f7e:	200d      	movs	r0, #13
 8029f80:	f003 fcef 	bl	802d962 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8029f84:	200d      	movs	r0, #13
 8029f86:	f003 fd08 	bl	802d99a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8029f8a:	2200      	movs	r2, #0
 8029f8c:	2105      	movs	r1, #5
 8029f8e:	2010      	movs	r0, #16
 8029f90:	f003 fce7 	bl	802d962 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8029f94:	2010      	movs	r0, #16
 8029f96:	f003 fd00 	bl	802d99a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8029f9a:	2200      	movs	r2, #0
 8029f9c:	2105      	movs	r1, #5
 8029f9e:	202f      	movs	r0, #47	; 0x2f
 8029fa0:	f003 fcdf 	bl	802d962 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8029fa4:	202f      	movs	r0, #47	; 0x2f
 8029fa6:	f003 fcf8 	bl	802d99a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8029faa:	2200      	movs	r2, #0
 8029fac:	2105      	movs	r1, #5
 8029fae:	2038      	movs	r0, #56	; 0x38
 8029fb0:	f003 fcd7 	bl	802d962 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8029fb4:	2038      	movs	r0, #56	; 0x38
 8029fb6:	f003 fcf0 	bl	802d99a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8029fba:	2200      	movs	r2, #0
 8029fbc:	2105      	movs	r1, #5
 8029fbe:	203a      	movs	r0, #58	; 0x3a
 8029fc0:	f003 fccf 	bl	802d962 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8029fc4:	203a      	movs	r0, #58	; 0x3a
 8029fc6:	f003 fce8 	bl	802d99a <HAL_NVIC_EnableIRQ>

}
 8029fca:	bf00      	nop
 8029fcc:	3708      	adds	r7, #8
 8029fce:	46bd      	mov	sp, r7
 8029fd0:	bd80      	pop	{r7, pc}
 8029fd2:	bf00      	nop
 8029fd4:	40023800 	.word	0x40023800

08029fd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8029fd8:	b580      	push	{r7, lr}
 8029fda:	b08c      	sub	sp, #48	; 0x30
 8029fdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8029fde:	f107 031c 	add.w	r3, r7, #28
 8029fe2:	2200      	movs	r2, #0
 8029fe4:	601a      	str	r2, [r3, #0]
 8029fe6:	605a      	str	r2, [r3, #4]
 8029fe8:	609a      	str	r2, [r3, #8]
 8029fea:	60da      	str	r2, [r3, #12]
 8029fec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8029fee:	2300      	movs	r3, #0
 8029ff0:	61bb      	str	r3, [r7, #24]
 8029ff2:	4bb6      	ldr	r3, [pc, #728]	; (802a2cc <MX_GPIO_Init+0x2f4>)
 8029ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029ff6:	4ab5      	ldr	r2, [pc, #724]	; (802a2cc <MX_GPIO_Init+0x2f4>)
 8029ff8:	f043 0310 	orr.w	r3, r3, #16
 8029ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8029ffe:	4bb3      	ldr	r3, [pc, #716]	; (802a2cc <MX_GPIO_Init+0x2f4>)
 802a000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a002:	f003 0310 	and.w	r3, r3, #16
 802a006:	61bb      	str	r3, [r7, #24]
 802a008:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 802a00a:	2300      	movs	r3, #0
 802a00c:	617b      	str	r3, [r7, #20]
 802a00e:	4baf      	ldr	r3, [pc, #700]	; (802a2cc <MX_GPIO_Init+0x2f4>)
 802a010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a012:	4aae      	ldr	r2, [pc, #696]	; (802a2cc <MX_GPIO_Init+0x2f4>)
 802a014:	f043 0304 	orr.w	r3, r3, #4
 802a018:	6313      	str	r3, [r2, #48]	; 0x30
 802a01a:	4bac      	ldr	r3, [pc, #688]	; (802a2cc <MX_GPIO_Init+0x2f4>)
 802a01c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a01e:	f003 0304 	and.w	r3, r3, #4
 802a022:	617b      	str	r3, [r7, #20]
 802a024:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 802a026:	2300      	movs	r3, #0
 802a028:	613b      	str	r3, [r7, #16]
 802a02a:	4ba8      	ldr	r3, [pc, #672]	; (802a2cc <MX_GPIO_Init+0x2f4>)
 802a02c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a02e:	4aa7      	ldr	r2, [pc, #668]	; (802a2cc <MX_GPIO_Init+0x2f4>)
 802a030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802a034:	6313      	str	r3, [r2, #48]	; 0x30
 802a036:	4ba5      	ldr	r3, [pc, #660]	; (802a2cc <MX_GPIO_Init+0x2f4>)
 802a038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a03a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802a03e:	613b      	str	r3, [r7, #16]
 802a040:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 802a042:	2300      	movs	r3, #0
 802a044:	60fb      	str	r3, [r7, #12]
 802a046:	4ba1      	ldr	r3, [pc, #644]	; (802a2cc <MX_GPIO_Init+0x2f4>)
 802a048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a04a:	4aa0      	ldr	r2, [pc, #640]	; (802a2cc <MX_GPIO_Init+0x2f4>)
 802a04c:	f043 0301 	orr.w	r3, r3, #1
 802a050:	6313      	str	r3, [r2, #48]	; 0x30
 802a052:	4b9e      	ldr	r3, [pc, #632]	; (802a2cc <MX_GPIO_Init+0x2f4>)
 802a054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a056:	f003 0301 	and.w	r3, r3, #1
 802a05a:	60fb      	str	r3, [r7, #12]
 802a05c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 802a05e:	2300      	movs	r3, #0
 802a060:	60bb      	str	r3, [r7, #8]
 802a062:	4b9a      	ldr	r3, [pc, #616]	; (802a2cc <MX_GPIO_Init+0x2f4>)
 802a064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a066:	4a99      	ldr	r2, [pc, #612]	; (802a2cc <MX_GPIO_Init+0x2f4>)
 802a068:	f043 0302 	orr.w	r3, r3, #2
 802a06c:	6313      	str	r3, [r2, #48]	; 0x30
 802a06e:	4b97      	ldr	r3, [pc, #604]	; (802a2cc <MX_GPIO_Init+0x2f4>)
 802a070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a072:	f003 0302 	and.w	r3, r3, #2
 802a076:	60bb      	str	r3, [r7, #8]
 802a078:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 802a07a:	2300      	movs	r3, #0
 802a07c:	607b      	str	r3, [r7, #4]
 802a07e:	4b93      	ldr	r3, [pc, #588]	; (802a2cc <MX_GPIO_Init+0x2f4>)
 802a080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a082:	4a92      	ldr	r2, [pc, #584]	; (802a2cc <MX_GPIO_Init+0x2f4>)
 802a084:	f043 0308 	orr.w	r3, r3, #8
 802a088:	6313      	str	r3, [r2, #48]	; 0x30
 802a08a:	4b90      	ldr	r3, [pc, #576]	; (802a2cc <MX_GPIO_Init+0x2f4>)
 802a08c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a08e:	f003 0308 	and.w	r3, r3, #8
 802a092:	607b      	str	r3, [r7, #4]
 802a094:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, INT_KEYLESS_CE_Pin|INT_NET_PWR_Pin|INT_GPS_PWR_Pin|EXT_FINGER_SENSING_PWR_Pin 
 802a096:	2200      	movs	r2, #0
 802a098:	f642 115b 	movw	r1, #10587	; 0x295b
 802a09c:	488c      	ldr	r0, [pc, #560]	; (802a2d0 <MX_GPIO_Init+0x2f8>)
 802a09e:	f005 ffc5 	bl	803002c <HAL_GPIO_WritePin>
                          |EXT_HMI1_PWR_Pin|INT_GPS_SLEEP_Pin|EXT_HORN_PWR_Pin|INT_AUDIO_PWR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EXT_FINGER_MCU_PWR_Pin|EXT_HMI2_PWR_Pin, GPIO_PIN_SET);
 802a0a2:	2201      	movs	r2, #1
 802a0a4:	2124      	movs	r1, #36	; 0x24
 802a0a6:	488a      	ldr	r0, [pc, #552]	; (802a2d0 <MX_GPIO_Init+0x2f8>)
 802a0a8:	f005 ffc0 	bl	803002c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EXT_SOLENOID_PWR_Pin|INT_NET_RST_Pin|INT_NET_DTR_Pin|INT_GYRO_PWR_Pin 
 802a0ac:	2200      	movs	r2, #0
 802a0ae:	f24c 0131 	movw	r1, #49201	; 0xc031
 802a0b2:	4888      	ldr	r0, [pc, #544]	; (802a2d4 <MX_GPIO_Init+0x2fc>)
 802a0b4:	f005 ffba 	bl	803002c <HAL_GPIO_WritePin>
                          |INT_KEYLESS_PWR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, EXT_GPIO_OUT1_Pin|SYS_LED_Pin|INT_CAN_PWR_Pin|INT_AUDIO_RST_Pin, GPIO_PIN_RESET);
 802a0b8:	2200      	movs	r2, #0
 802a0ba:	f242 1118 	movw	r1, #8472	; 0x2118
 802a0be:	4886      	ldr	r0, [pc, #536]	; (802a2d8 <MX_GPIO_Init+0x300>)
 802a0c0:	f005 ffb4 	bl	803002c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INT_KEYLESS_CSN_GPIO_Port, INT_KEYLESS_CSN_Pin, GPIO_PIN_SET);
 802a0c4:	2201      	movs	r2, #1
 802a0c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802a0ca:	4884      	ldr	r0, [pc, #528]	; (802a2dc <MX_GPIO_Init+0x304>)
 802a0cc:	f005 ffae 	bl	803002c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, EXT_BMS_WAKEUP_Pin|EXT_BMS_FAN_PWR_Pin, GPIO_PIN_SET);
 802a0d0:	2201      	movs	r2, #1
 802a0d2:	2160      	movs	r1, #96	; 0x60
 802a0d4:	4880      	ldr	r0, [pc, #512]	; (802a2d8 <MX_GPIO_Init+0x300>)
 802a0d6:	f005 ffa9 	bl	803002c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EXT_HBAR_SELECT_Pin EXT_HBAR_SET_Pin EXT_HBAR_REVERSE_Pin EXT_ABS_IRQ_Pin 
                           EXT_KNOB_IRQ_Pin EXT_HBAR_LAMP_Pin EXT_REG_5V_IRQ_Pin EXT_HBAR_SEIN_L_Pin 
                           EXT_HBAR_SEIN_R_Pin */
  GPIO_InitStruct.Pin = EXT_HBAR_SELECT_Pin|EXT_HBAR_SET_Pin|EXT_HBAR_REVERSE_Pin|EXT_ABS_IRQ_Pin 
 802a0da:	f246 136f 	movw	r3, #24943	; 0x616f
 802a0de:	61fb      	str	r3, [r7, #28]
                          |EXT_KNOB_IRQ_Pin|EXT_HBAR_LAMP_Pin|EXT_REG_5V_IRQ_Pin|EXT_HBAR_SEIN_L_Pin 
                          |EXT_HBAR_SEIN_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 802a0e0:	4b7f      	ldr	r3, [pc, #508]	; (802a2e0 <MX_GPIO_Init+0x308>)
 802a0e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 802a0e4:	2302      	movs	r3, #2
 802a0e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802a0e8:	f107 031c 	add.w	r3, r7, #28
 802a0ec:	4619      	mov	r1, r3
 802a0ee:	487d      	ldr	r0, [pc, #500]	; (802a2e4 <MX_GPIO_Init+0x30c>)
 802a0f0:	f005 fd00 	bl	802faf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE10 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_10|GPIO_PIN_12;
 802a0f4:	f241 4310 	movw	r3, #5136	; 0x1410
 802a0f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 802a0fa:	2303      	movs	r3, #3
 802a0fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802a0fe:	2300      	movs	r3, #0
 802a100:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802a102:	f107 031c 	add.w	r3, r7, #28
 802a106:	4619      	mov	r1, r3
 802a108:	4876      	ldr	r0, [pc, #472]	; (802a2e4 <MX_GPIO_Init+0x30c>)
 802a10a:	f005 fcf3 	bl	802faf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_KEYLESS_CE_Pin INT_NET_PWR_Pin INT_GPS_PWR_Pin EXT_FINGER_SENSING_PWR_Pin 
                           EXT_HMI1_PWR_Pin INT_AUDIO_PWR_Pin */
  GPIO_InitStruct.Pin = INT_KEYLESS_CE_Pin|INT_NET_PWR_Pin|INT_GPS_PWR_Pin|EXT_FINGER_SENSING_PWR_Pin 
 802a10e:	f642 031b 	movw	r3, #10267	; 0x281b
 802a112:	61fb      	str	r3, [r7, #28]
                          |EXT_HMI1_PWR_Pin|INT_AUDIO_PWR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802a114:	2301      	movs	r3, #1
 802a116:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 802a118:	2302      	movs	r3, #2
 802a11a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802a11c:	2300      	movs	r3, #0
 802a11e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802a120:	f107 031c 	add.w	r3, r7, #28
 802a124:	4619      	mov	r1, r3
 802a126:	486a      	ldr	r0, [pc, #424]	; (802a2d0 <MX_GPIO_Init+0x2f8>)
 802a128:	f005 fce4 	bl	802faf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_FINGER_MCU_PWR_Pin EXT_HMI2_PWR_Pin */
  GPIO_InitStruct.Pin = EXT_FINGER_MCU_PWR_Pin|EXT_HMI2_PWR_Pin;
 802a12c:	2324      	movs	r3, #36	; 0x24
 802a12e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802a130:	2301      	movs	r3, #1
 802a132:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 802a134:	2301      	movs	r3, #1
 802a136:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802a138:	2300      	movs	r3, #0
 802a13a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802a13c:	f107 031c 	add.w	r3, r7, #28
 802a140:	4619      	mov	r1, r3
 802a142:	4863      	ldr	r0, [pc, #396]	; (802a2d0 <MX_GPIO_Init+0x2f8>)
 802a144:	f005 fcd6 	bl	802faf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_SOLENOID_PWR_Pin */
  GPIO_InitStruct.Pin = EXT_SOLENOID_PWR_Pin;
 802a148:	2301      	movs	r3, #1
 802a14a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802a14c:	2301      	movs	r3, #1
 802a14e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802a150:	2300      	movs	r3, #0
 802a152:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802a154:	2300      	movs	r3, #0
 802a156:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(EXT_SOLENOID_PWR_GPIO_Port, &GPIO_InitStruct);
 802a158:	f107 031c 	add.w	r3, r7, #28
 802a15c:	4619      	mov	r1, r3
 802a15e:	485d      	ldr	r0, [pc, #372]	; (802a2d4 <MX_GPIO_Init+0x2fc>)
 802a160:	f005 fcc8 	bl	802faf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 802a164:	2304      	movs	r3, #4
 802a166:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 802a168:	2300      	movs	r3, #0
 802a16a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802a16c:	2300      	movs	r3, #0
 802a16e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 802a170:	f107 031c 	add.w	r3, r7, #28
 802a174:	4619      	mov	r1, r3
 802a176:	4857      	ldr	r0, [pc, #348]	; (802a2d4 <MX_GPIO_Init+0x2fc>)
 802a178:	f005 fcbc 	bl	802faf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_FINGER_IRQ_Pin EXT_STARTER_IRQ_Pin */
  GPIO_InitStruct.Pin = EXT_FINGER_IRQ_Pin|EXT_STARTER_IRQ_Pin;
 802a17c:	f44f 7320 	mov.w	r3, #640	; 0x280
 802a180:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 802a182:	4b59      	ldr	r3, [pc, #356]	; (802a2e8 <MX_GPIO_Init+0x310>)
 802a184:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 802a186:	2302      	movs	r3, #2
 802a188:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802a18a:	f107 031c 	add.w	r3, r7, #28
 802a18e:	4619      	mov	r1, r3
 802a190:	4854      	ldr	r0, [pc, #336]	; (802a2e4 <MX_GPIO_Init+0x30c>)
 802a192:	f005 fcaf 	bl	802faf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_GYRO_IRQ_Pin */
  GPIO_InitStruct.Pin = INT_GYRO_IRQ_Pin;
 802a196:	f44f 6300 	mov.w	r3, #2048	; 0x800
 802a19a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 802a19c:	4b52      	ldr	r3, [pc, #328]	; (802a2e8 <MX_GPIO_Init+0x310>)
 802a19e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802a1a0:	2300      	movs	r3, #0
 802a1a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(INT_GYRO_IRQ_GPIO_Port, &GPIO_InitStruct);
 802a1a4:	f107 031c 	add.w	r3, r7, #28
 802a1a8:	4619      	mov	r1, r3
 802a1aa:	484e      	ldr	r0, [pc, #312]	; (802a2e4 <MX_GPIO_Init+0x30c>)
 802a1ac:	f005 fca2 	bl	802faf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_KEYLESS_IRQ_Pin */
  GPIO_InitStruct.Pin = INT_KEYLESS_IRQ_Pin;
 802a1b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802a1b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 802a1b6:	4b4d      	ldr	r3, [pc, #308]	; (802a2ec <MX_GPIO_Init+0x314>)
 802a1b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 802a1ba:	2301      	movs	r3, #1
 802a1bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(INT_KEYLESS_IRQ_GPIO_Port, &GPIO_InitStruct);
 802a1be:	f107 031c 	add.w	r3, r7, #28
 802a1c2:	4619      	mov	r1, r3
 802a1c4:	4847      	ldr	r0, [pc, #284]	; (802a2e4 <MX_GPIO_Init+0x30c>)
 802a1c6:	f005 fc95 	bl	802faf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 802a1ca:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 802a1ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 802a1d0:	2303      	movs	r3, #3
 802a1d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802a1d4:	2300      	movs	r3, #0
 802a1d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802a1d8:	f107 031c 	add.w	r3, r7, #28
 802a1dc:	4619      	mov	r1, r3
 802a1de:	483d      	ldr	r0, [pc, #244]	; (802a2d4 <MX_GPIO_Init+0x2fc>)
 802a1e0:	f005 fc88 	bl	802faf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_NET_RST_Pin INT_NET_DTR_Pin INT_GYRO_PWR_Pin INT_KEYLESS_PWR_Pin */
  GPIO_InitStruct.Pin = INT_NET_RST_Pin|INT_NET_DTR_Pin|INT_GYRO_PWR_Pin|INT_KEYLESS_PWR_Pin;
 802a1e4:	f24c 0330 	movw	r3, #49200	; 0xc030
 802a1e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802a1ea:	2301      	movs	r3, #1
 802a1ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 802a1ee:	2302      	movs	r3, #2
 802a1f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802a1f2:	2300      	movs	r3, #0
 802a1f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802a1f6:	f107 031c 	add.w	r3, r7, #28
 802a1fa:	4619      	mov	r1, r3
 802a1fc:	4835      	ldr	r0, [pc, #212]	; (802a2d4 <MX_GPIO_Init+0x2fc>)
 802a1fe:	f005 fc79 	bl	802faf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_GPIO_OUT1_Pin SYS_LED_Pin INT_AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = EXT_GPIO_OUT1_Pin|SYS_LED_Pin|INT_AUDIO_RST_Pin;
 802a202:	f242 1310 	movw	r3, #8464	; 0x2110
 802a206:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802a208:	2301      	movs	r3, #1
 802a20a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 802a20c:	2302      	movs	r3, #2
 802a20e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802a210:	2300      	movs	r3, #0
 802a212:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 802a214:	f107 031c 	add.w	r3, r7, #28
 802a218:	4619      	mov	r1, r3
 802a21a:	482f      	ldr	r0, [pc, #188]	; (802a2d8 <MX_GPIO_Init+0x300>)
 802a21c:	f005 fc6a 	bl	802faf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 PD11 PD12 
                           PD14 PD15 PD2 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
 802a220:	f64d 6384 	movw	r3, #56964	; 0xde84
 802a224:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 802a226:	2303      	movs	r3, #3
 802a228:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802a22a:	2300      	movs	r3, #0
 802a22c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 802a22e:	f107 031c 	add.w	r3, r7, #28
 802a232:	4619      	mov	r1, r3
 802a234:	4828      	ldr	r0, [pc, #160]	; (802a2d8 <MX_GPIO_Init+0x300>)
 802a236:	f005 fc5d 	bl	802faf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_GPS_SLEEP_Pin EXT_HORN_PWR_Pin */
  GPIO_InitStruct.Pin = INT_GPS_SLEEP_Pin|EXT_HORN_PWR_Pin;
 802a23a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 802a23e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802a240:	2301      	movs	r3, #1
 802a242:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802a244:	2300      	movs	r3, #0
 802a246:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802a248:	2300      	movs	r3, #0
 802a24a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802a24c:	f107 031c 	add.w	r3, r7, #28
 802a250:	4619      	mov	r1, r3
 802a252:	481f      	ldr	r0, [pc, #124]	; (802a2d0 <MX_GPIO_Init+0x2f8>)
 802a254:	f005 fc4e 	bl	802faf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 802a258:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 802a25c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 802a25e:	2303      	movs	r3, #3
 802a260:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802a262:	2300      	movs	r3, #0
 802a264:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802a266:	f107 031c 	add.w	r3, r7, #28
 802a26a:	4619      	mov	r1, r3
 802a26c:	481b      	ldr	r0, [pc, #108]	; (802a2dc <MX_GPIO_Init+0x304>)
 802a26e:	f005 fc41 	bl	802faf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_KEYLESS_CSN_Pin */
  GPIO_InitStruct.Pin = INT_KEYLESS_CSN_Pin;
 802a272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802a276:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802a278:	2301      	movs	r3, #1
 802a27a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 802a27c:	2301      	movs	r3, #1
 802a27e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802a280:	2303      	movs	r3, #3
 802a282:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(INT_KEYLESS_CSN_GPIO_Port, &GPIO_InitStruct);
 802a284:	f107 031c 	add.w	r3, r7, #28
 802a288:	4619      	mov	r1, r3
 802a28a:	4814      	ldr	r0, [pc, #80]	; (802a2dc <MX_GPIO_Init+0x304>)
 802a28c:	f005 fc32 	bl	802faf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_CAN_PWR_Pin */
  GPIO_InitStruct.Pin = INT_CAN_PWR_Pin;
 802a290:	2308      	movs	r3, #8
 802a292:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802a294:	2301      	movs	r3, #1
 802a296:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802a298:	2300      	movs	r3, #0
 802a29a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802a29c:	2300      	movs	r3, #0
 802a29e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(INT_CAN_PWR_GPIO_Port, &GPIO_InitStruct);
 802a2a0:	f107 031c 	add.w	r3, r7, #28
 802a2a4:	4619      	mov	r1, r3
 802a2a6:	480c      	ldr	r0, [pc, #48]	; (802a2d8 <MX_GPIO_Init+0x300>)
 802a2a8:	f005 fc24 	bl	802faf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_BMS_WAKEUP_Pin EXT_BMS_FAN_PWR_Pin */
  GPIO_InitStruct.Pin = EXT_BMS_WAKEUP_Pin|EXT_BMS_FAN_PWR_Pin;
 802a2ac:	2360      	movs	r3, #96	; 0x60
 802a2ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802a2b0:	2301      	movs	r3, #1
 802a2b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 802a2b4:	2301      	movs	r3, #1
 802a2b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802a2b8:	2300      	movs	r3, #0
 802a2ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 802a2bc:	f107 031c 	add.w	r3, r7, #28
 802a2c0:	4619      	mov	r1, r3
 802a2c2:	4805      	ldr	r0, [pc, #20]	; (802a2d8 <MX_GPIO_Init+0x300>)
 802a2c4:	f005 fc16 	bl	802faf4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 802a2c8:	2200      	movs	r2, #0
 802a2ca:	e011      	b.n	802a2f0 <MX_GPIO_Init+0x318>
 802a2cc:	40023800 	.word	0x40023800
 802a2d0:	40020800 	.word	0x40020800
 802a2d4:	40020400 	.word	0x40020400
 802a2d8:	40020c00 	.word	0x40020c00
 802a2dc:	40020000 	.word	0x40020000
 802a2e0:	10310000 	.word	0x10310000
 802a2e4:	40021000 	.word	0x40021000
 802a2e8:	10110000 	.word	0x10110000
 802a2ec:	10210000 	.word	0x10210000
 802a2f0:	2105      	movs	r1, #5
 802a2f2:	2006      	movs	r0, #6
 802a2f4:	f003 fb35 	bl	802d962 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 802a2f8:	2006      	movs	r0, #6
 802a2fa:	f003 fb4e 	bl	802d99a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 802a2fe:	2200      	movs	r2, #0
 802a300:	2105      	movs	r1, #5
 802a302:	2007      	movs	r0, #7
 802a304:	f003 fb2d 	bl	802d962 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 802a308:	2007      	movs	r0, #7
 802a30a:	f003 fb46 	bl	802d99a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 802a30e:	2200      	movs	r2, #0
 802a310:	2105      	movs	r1, #5
 802a312:	2008      	movs	r0, #8
 802a314:	f003 fb25 	bl	802d962 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 802a318:	2008      	movs	r0, #8
 802a31a:	f003 fb3e 	bl	802d99a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 802a31e:	2200      	movs	r2, #0
 802a320:	2105      	movs	r1, #5
 802a322:	2009      	movs	r0, #9
 802a324:	f003 fb1d 	bl	802d962 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 802a328:	2009      	movs	r0, #9
 802a32a:	f003 fb36 	bl	802d99a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 802a32e:	2200      	movs	r2, #0
 802a330:	2105      	movs	r1, #5
 802a332:	2017      	movs	r0, #23
 802a334:	f003 fb15 	bl	802d962 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 802a338:	2017      	movs	r0, #23
 802a33a:	f003 fb2e 	bl	802d99a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 802a33e:	2200      	movs	r2, #0
 802a340:	2105      	movs	r1, #5
 802a342:	2028      	movs	r0, #40	; 0x28
 802a344:	f003 fb0d 	bl	802d962 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 802a348:	2028      	movs	r0, #40	; 0x28
 802a34a:	f003 fb26 	bl	802d99a <HAL_NVIC_EnableIRQ>

}
 802a34e:	bf00      	nop
 802a350:	3730      	adds	r7, #48	; 0x30
 802a352:	46bd      	mov	sp, r7
 802a354:	bd80      	pop	{r7, pc}
 802a356:	bf00      	nop

0802a358 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 802a358:	b580      	push	{r7, lr}
 802a35a:	b084      	sub	sp, #16
 802a35c:	af00      	add	r7, sp, #0
 802a35e:	4603      	mov	r3, r0
 802a360:	80fb      	strh	r3, [r7, #6]
    if (osKernelGetState() == osKernelRunning) {
 802a362:	f00d f84d 	bl	8037400 <osKernelGetState>
 802a366:	4603      	mov	r3, r0
 802a368:	2b02      	cmp	r3, #2
 802a36a:	d146      	bne.n	802a3fa <HAL_GPIO_EXTI_Callback+0xa2>
        // handle BMS_IRQ (is 5v exist?)
        if (GPIO_Pin == EXT_REG_5V_IRQ_Pin) {
 802a36c:	88fb      	ldrh	r3, [r7, #6]
 802a36e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802a372:	d105      	bne.n	802a380 <HAL_GPIO_EXTI_Callback+0x28>
            osThreadFlagsSet(SwitchTaskHandle, EVT_SWITCH_REG_5V_IRQ);
 802a374:	4b23      	ldr	r3, [pc, #140]	; (802a404 <HAL_GPIO_EXTI_Callback+0xac>)
 802a376:	681b      	ldr	r3, [r3, #0]
 802a378:	2102      	movs	r1, #2
 802a37a:	4618      	mov	r0, r3
 802a37c:	f00d f966 	bl	803764c <osThreadFlagsSet>
        }
        // handle Starter Button
        if (GPIO_Pin == EXT_STARTER_IRQ_Pin) {
 802a380:	88fb      	ldrh	r3, [r7, #6]
 802a382:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802a386:	d105      	bne.n	802a394 <HAL_GPIO_EXTI_Callback+0x3c>
            osThreadFlagsSet(SwitchTaskHandle, EVT_SWITCH_STARTER_IRQ);
 802a388:	4b1e      	ldr	r3, [pc, #120]	; (802a404 <HAL_GPIO_EXTI_Callback+0xac>)
 802a38a:	681b      	ldr	r3, [r3, #0]
 802a38c:	2104      	movs	r1, #4
 802a38e:	4618      	mov	r0, r3
 802a390:	f00d f95c 	bl	803764c <osThreadFlagsSet>
        }
        // handle KNOB IRQ (Power control for HMI1 & HMI2)
        if (GPIO_Pin == EXT_KNOB_IRQ_Pin) {
 802a394:	88fb      	ldrh	r3, [r7, #6]
 802a396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802a39a:	d105      	bne.n	802a3a8 <HAL_GPIO_EXTI_Callback+0x50>
            osThreadFlagsSet(SwitchTaskHandle, EVT_SWITCH_KNOB_IRQ);
 802a39c:	4b19      	ldr	r3, [pc, #100]	; (802a404 <HAL_GPIO_EXTI_Callback+0xac>)
 802a39e:	681b      	ldr	r3, [r3, #0]
 802a3a0:	2104      	movs	r1, #4
 802a3a2:	4618      	mov	r0, r3
 802a3a4:	f00d f952 	bl	803764c <osThreadFlagsSet>
        }
        // handle Finger IRQ
        if (GPIO_Pin == EXT_FINGER_IRQ_Pin) {
 802a3a8:	88fb      	ldrh	r3, [r7, #6]
 802a3aa:	2b80      	cmp	r3, #128	; 0x80
 802a3ac:	d105      	bne.n	802a3ba <HAL_GPIO_EXTI_Callback+0x62>
            osThreadFlagsSet(FingerTaskHandle, EVT_FINGER_PLACED);
 802a3ae:	4b16      	ldr	r3, [pc, #88]	; (802a408 <HAL_GPIO_EXTI_Callback+0xb0>)
 802a3b0:	681b      	ldr	r3, [r3, #0]
 802a3b2:	2101      	movs	r1, #1
 802a3b4:	4618      	mov	r0, r3
 802a3b6:	f00d f949 	bl	803764c <osThreadFlagsSet>
        }
        // handle NRF24 IRQ
        if (GPIO_Pin == INT_KEYLESS_IRQ_Pin) {
 802a3ba:	88fb      	ldrh	r3, [r7, #6]
 802a3bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802a3c0:	d101      	bne.n	802a3c6 <HAL_GPIO_EXTI_Callback+0x6e>
            KLESS_IrqHandler();
 802a3c2:	f7fd fde7 	bl	8027f94 <KLESS_IrqHandler>
        }
        // handle Switches EXTI
        for (uint8_t i = 0; i < SW_TOTAL_LIST; i++) {
 802a3c6:	2300      	movs	r3, #0
 802a3c8:	73fb      	strb	r3, [r7, #15]
 802a3ca:	e013      	b.n	802a3f4 <HAL_GPIO_EXTI_Callback+0x9c>
            if (GPIO_Pin == SW.list[i].pin) {
 802a3cc:	7bfb      	ldrb	r3, [r7, #15]
 802a3ce:	4a0f      	ldr	r2, [pc, #60]	; (802a40c <HAL_GPIO_EXTI_Callback+0xb4>)
 802a3d0:	015b      	lsls	r3, r3, #5
 802a3d2:	4413      	add	r3, r2
 802a3d4:	3314      	adds	r3, #20
 802a3d6:	881b      	ldrh	r3, [r3, #0]
 802a3d8:	88fa      	ldrh	r2, [r7, #6]
 802a3da:	429a      	cmp	r2, r3
 802a3dc:	d107      	bne.n	802a3ee <HAL_GPIO_EXTI_Callback+0x96>
                osThreadFlagsSet(SwitchTaskHandle, EVT_SWITCH_TRIGGERED);
 802a3de:	4b09      	ldr	r3, [pc, #36]	; (802a404 <HAL_GPIO_EXTI_Callback+0xac>)
 802a3e0:	681b      	ldr	r3, [r3, #0]
 802a3e2:	2101      	movs	r1, #1
 802a3e4:	4618      	mov	r0, r3
 802a3e6:	f00d f931 	bl	803764c <osThreadFlagsSet>

                break;
 802a3ea:	bf00      	nop
            }
        }
    }
}
 802a3ec:	e005      	b.n	802a3fa <HAL_GPIO_EXTI_Callback+0xa2>
        for (uint8_t i = 0; i < SW_TOTAL_LIST; i++) {
 802a3ee:	7bfb      	ldrb	r3, [r7, #15]
 802a3f0:	3301      	adds	r3, #1
 802a3f2:	73fb      	strb	r3, [r7, #15]
 802a3f4:	7bfb      	ldrb	r3, [r7, #15]
 802a3f6:	2b06      	cmp	r3, #6
 802a3f8:	d9e8      	bls.n	802a3cc <HAL_GPIO_EXTI_Callback+0x74>
}
 802a3fa:	bf00      	nop
 802a3fc:	3710      	adds	r7, #16
 802a3fe:	46bd      	mov	sp, r7
 802a400:	bd80      	pop	{r7, pc}
 802a402:	bf00      	nop
 802a404:	200088e8 	.word	0x200088e8
 802a408:	2000864c 	.word	0x2000864c
 802a40c:	20000004 	.word	0x20000004

0802a410 <StartManagerTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartManagerTask */
void StartManagerTask(void *argument)
{
 802a410:	b5b0      	push	{r4, r5, r7, lr}
 802a412:	b088      	sub	sp, #32
 802a414:	af04      	add	r7, sp, #16
 802a416:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
    TickType_t lastWake;

    // Initialization, this task get executed first!
    VCU.Init();
 802a418:	4b1d      	ldr	r3, [pc, #116]	; (802a490 <StartManagerTask+0x80>)
 802a41a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802a41c:	4798      	blx	r3
    BMS.Init();
 802a41e:	4b1d      	ldr	r3, [pc, #116]	; (802a494 <StartManagerTask+0x84>)
 802a420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802a422:	4798      	blx	r3
    HMI1.Init();
 802a424:	4b1c      	ldr	r3, [pc, #112]	; (802a498 <StartManagerTask+0x88>)
 802a426:	6a1b      	ldr	r3, [r3, #32]
 802a428:	4798      	blx	r3
    HMI2.Init();
 802a42a:	4b1c      	ldr	r3, [pc, #112]	; (802a49c <StartManagerTask+0x8c>)
 802a42c:	68db      	ldr	r3, [r3, #12]
 802a42e:	4798      	blx	r3

    // Initialize EEPROM
    EEPROM_Init();
 802a430:	f014 f87c 	bl	803e52c <EEPROM_Init>
    //    osThreadSuspend(CanRxTaskHandle);
    //    osThreadSuspend(CanTxTaskHandle);
    //    osThreadSuspend(Hmi2PowerTaskHandle);

    // Release threads
    osEventFlagsSet(GlobalEventHandle, EVENT_READY);
 802a434:	4b1a      	ldr	r3, [pc, #104]	; (802a4a0 <StartManagerTask+0x90>)
 802a436:	681b      	ldr	r3, [r3, #0]
 802a438:	2101      	movs	r1, #1
 802a43a:	4618      	mov	r0, r3
 802a43c:	f00d fb0c 	bl	8037a58 <osEventFlagsSet>
    //    osThreadFlagsSet(KeylessTaskHandle, EVT_KEYLESS_PAIRING);

    /* Infinite loop */
    for (;;) {
        lastWake = _GetTickMS();
 802a440:	f015 f9c9 	bl	803f7d6 <_GetTickMS>
 802a444:	60f8      	str	r0, [r7, #12]

        // Feed the dog
        HAL_IWDG_Refresh(&hiwdg);
 802a446:	4817      	ldr	r0, [pc, #92]	; (802a4a4 <StartManagerTask+0x94>)
 802a448:	f009 fb2b 	bl	8033aa2 <HAL_IWDG_Refresh>

        // Dummy data generator
        _DummyGenerator();
 802a44c:	f015 fa34 	bl	803f8b8 <_DummyGenerator>

        // Battery Monitor
        // BAT_Debugger();

        // Other stuffs
        HMI1.d.status.daylight = RTC_IsDaylight(VCU.d.rtc.timestamp);
 802a450:	4c0f      	ldr	r4, [pc, #60]	; (802a490 <StartManagerTask+0x80>)
 802a452:	466d      	mov	r5, sp
 802a454:	f104 0320 	add.w	r3, r4, #32
 802a458:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802a45c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 802a460:	f104 0310 	add.w	r3, r4, #16
 802a464:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802a466:	f7fc f99f 	bl	80267a8 <RTC_IsDaylight>
 802a46a:	4603      	mov	r3, r0
 802a46c:	461a      	mov	r2, r3
 802a46e:	4b0a      	ldr	r3, [pc, #40]	; (802a498 <StartManagerTask+0x88>)
 802a470:	719a      	strb	r2, [r3, #6]
        HMI1.d.status.warning = BMS.d.warning;
 802a472:	4b08      	ldr	r3, [pc, #32]	; (802a494 <StartManagerTask+0x84>)
 802a474:	78da      	ldrb	r2, [r3, #3]
 802a476:	4b08      	ldr	r3, [pc, #32]	; (802a498 <StartManagerTask+0x88>)
 802a478:	709a      	strb	r2, [r3, #2]
        HMI1.d.status.overheat = BMS.d.overheat;
 802a47a:	4b06      	ldr	r3, [pc, #24]	; (802a494 <StartManagerTask+0x84>)
 802a47c:	789a      	ldrb	r2, [r3, #2]
 802a47e:	4b06      	ldr	r3, [pc, #24]	; (802a498 <StartManagerTask+0x88>)
 802a480:	70da      	strb	r2, [r3, #3]

        // Periodic interval
        osDelayUntil(lastWake + 1000);
 802a482:	68fb      	ldr	r3, [r7, #12]
 802a484:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 802a488:	4618      	mov	r0, r3
 802a48a:	f00d fa53 	bl	8037934 <osDelayUntil>
        lastWake = _GetTickMS();
 802a48e:	e7d7      	b.n	802a440 <StartManagerTask+0x30>
 802a490:	20000228 	.word	0x20000228
 802a494:	20000178 	.word	0x20000178
 802a498:	200001e4 	.word	0x200001e4
 802a49c:	20000210 	.word	0x20000210
 802a4a0:	20008644 	.word	0x20008644
 802a4a4:	200085d0 	.word	0x200085d0

0802a4a8 <StartIotTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartIotTask */
void StartIotTask(void *argument)
{
 802a4a8:	b580      	push	{r7, lr}
 802a4aa:	b0b4      	sub	sp, #208	; 0xd0
 802a4ac:	af00      	add	r7, sp, #0
 802a4ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIotTask */
    TickType_t lastWake;
    osStatus_t status;
    report_t report;
    response_t response;
    uint8_t retry[2], pending[2] = { 0 };
 802a4b0:	2300      	movs	r3, #0
 802a4b2:	813b      	strh	r3, [r7, #8]
    PAYLOAD_TYPE type;

    osMessageQueueId_t *pQueue;
    header_t *pHeader;
    void *pPayload;
    const uint8_t size = sizeof(report.header.prefix)
 802a4b4:	2307      	movs	r3, #7
 802a4b6:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
            + sizeof(report.header.crc)
            + sizeof(report.header.size);

    // wait until ManagerTask done
    osEventFlagsWait(GlobalEventHandle, EVENT_READY, osFlagsNoClear, osWaitForever);
 802a4ba:	4b79      	ldr	r3, [pc, #484]	; (802a6a0 <StartIotTask+0x1f8>)
 802a4bc:	6818      	ldr	r0, [r3, #0]
 802a4be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802a4c2:	2202      	movs	r2, #2
 802a4c4:	2101      	movs	r1, #1
 802a4c6:	f00d fb1f 	bl	8037b08 <osEventFlagsWait>

    // Start simcom module
    Simcom_SetState(SIM_STATE_READY, 0);
 802a4ca:	2100      	movs	r1, #0
 802a4cc:	2000      	movs	r0, #0
 802a4ce:	f014 fa29 	bl	803e924 <Simcom_SetState>

    /* Infinite loop */
    for (;;) {
        lastWake = _GetTickMS();
 802a4d2:	f015 f980 	bl	803f7d6 <_GetTickMS>
 802a4d6:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc

        // Upload Report & Response Payload
        if (Simcom_SetState(SIM_STATE_SERVER_ON, 0)) {
 802a4da:	2100      	movs	r1, #0
 802a4dc:	2006      	movs	r0, #6
 802a4de:	f014 fa21 	bl	803e924 <Simcom_SetState>
 802a4e2:	4603      	mov	r3, r0
 802a4e4:	2b00      	cmp	r3, #0
 802a4e6:	f000 80c1 	beq.w	802a66c <StartIotTask+0x1c4>
            // Iterate between REPORT & RESPONSE
            for (type = 0; type <= PAYLOAD_MAX; type++) {
 802a4ea:	2300      	movs	r3, #0
 802a4ec:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
 802a4f0:	e0b7      	b.n	802a662 <StartIotTask+0x1ba>
                // decide the payload
                if (type == PAYLOAD_REPORT) {
 802a4f2:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 802a4f6:	2b01      	cmp	r3, #1
 802a4f8:	d107      	bne.n	802a50a <StartIotTask+0x62>
                    pQueue = &ReportQueueHandle;
 802a4fa:	4b6a      	ldr	r3, [pc, #424]	; (802a6a4 <StartIotTask+0x1fc>)
 802a4fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
                    pPayload = &report;
 802a500:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802a504:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 802a508:	e006      	b.n	802a518 <StartIotTask+0x70>
                } else {
                    pQueue = &ResponseQueueHandle;
 802a50a:	4b67      	ldr	r3, [pc, #412]	; (802a6a8 <StartIotTask+0x200>)
 802a50c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
                    pPayload = &response;
 802a510:	f107 0310 	add.w	r3, r7, #16
 802a514:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                }
                pHeader = (header_t*) pPayload;
 802a518:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 802a51c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

                // Handle Full Buffer
                if (type == PAYLOAD_REPORT) {
 802a520:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 802a524:	2b01      	cmp	r3, #1
 802a526:	d115      	bne.n	802a554 <StartIotTask+0xac>
                    notif = osThreadFlagsWait(EVT_IOT_DISCARD, osFlagsWaitAny, 0);
 802a528:	2200      	movs	r2, #0
 802a52a:	2100      	movs	r1, #0
 802a52c:	2001      	movs	r0, #1
 802a52e:	f00d f93f 	bl	80377b0 <osThreadFlagsWait>
 802a532:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
                    if (_RTOS_ValidThreadFlag(notif)) {
 802a536:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 802a53a:	f015 f9a5 	bl	803f888 <_RTOS_ValidThreadFlag>
 802a53e:	4603      	mov	r3, r0
 802a540:	2b00      	cmp	r3, #0
 802a542:	d007      	beq.n	802a554 <StartIotTask+0xac>
                        pending[type] = 0;
 802a544:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 802a548:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 802a54c:	4413      	add	r3, r2
 802a54e:	2200      	movs	r2, #0
 802a550:	f803 2cc8 	strb.w	r2, [r3, #-200]
                    }
                }

                // Check logs
                if (!pending[type]) {
 802a554:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 802a558:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 802a55c:	4413      	add	r3, r2
 802a55e:	f813 3cc8 	ldrb.w	r3, [r3, #-200]
 802a562:	2b00      	cmp	r3, #0
 802a564:	d11e      	bne.n	802a5a4 <StartIotTask+0xfc>
                    status = osMessageQueueGet(*pQueue, pPayload, NULL, 0);
 802a566:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 802a56a:	6818      	ldr	r0, [r3, #0]
 802a56c:	2300      	movs	r3, #0
 802a56e:	2200      	movs	r2, #0
 802a570:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 802a574:	f00d fd80 	bl	8038078 <osMessageQueueGet>
 802a578:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
                    // check is mail ready
                    if (status == osOK) {
 802a57c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 802a580:	2b00      	cmp	r3, #0
 802a582:	d10f      	bne.n	802a5a4 <StartIotTask+0xfc>
                        pending[type] = 1;
 802a584:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 802a588:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 802a58c:	4413      	add	r3, r2
 802a58e:	2201      	movs	r2, #1
 802a590:	f803 2cc8 	strb.w	r2, [r3, #-200]
                        retry[type] = SIMCOM_MAX_UPLOAD_RETRY;
 802a594:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 802a598:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 802a59c:	4413      	add	r3, r2
 802a59e:	2203      	movs	r2, #3
 802a5a0:	f803 2cc4 	strb.w	r2, [r3, #-196]
                    }
                }

                // Check is payload ready
                if (pending[type]) {
 802a5a4:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 802a5a8:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 802a5ac:	4413      	add	r3, r2
 802a5ae:	f813 3cc8 	ldrb.w	r3, [r3, #-200]
 802a5b2:	2b00      	cmp	r3, #0
 802a5b4:	d050      	beq.n	802a658 <StartIotTask+0x1b0>
                    // Re-calculate CRC
                    if (type == PAYLOAD_REPORT) {
 802a5b6:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 802a5ba:	2b01      	cmp	r3, #1
 802a5bc:	d104      	bne.n	802a5c8 <StartIotTask+0x120>
                        Report_SetCRC((report_t*) pPayload);
 802a5be:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 802a5c2:	f7fd fecd 	bl	8028360 <Report_SetCRC>
 802a5c6:	e003      	b.n	802a5d0 <StartIotTask+0x128>
                    } else {
                        Response_SetCRC((response_t*) pPayload);
 802a5c8:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 802a5cc:	f7fd fee5 	bl	802839a <Response_SetCRC>
                    }

                    // Send to server
                    p = Simcom_Upload(pPayload, size + pHeader->size);
 802a5d0:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 802a5d4:	b29a      	uxth	r2, r3
 802a5d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 802a5da:	799b      	ldrb	r3, [r3, #6]
 802a5dc:	b29b      	uxth	r3, r3
 802a5de:	4413      	add	r3, r2
 802a5e0:	b29b      	uxth	r3, r3
 802a5e2:	4619      	mov	r1, r3
 802a5e4:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 802a5e8:	f014 fdb6 	bl	803f158 <Simcom_Upload>
 802a5ec:	4603      	mov	r3, r0
 802a5ee:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf

                    // Handle looping NACK
                    if (p == SIM_RESULT_NACK) {
 802a5f2:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 802a5f6:	f113 0f04 	cmn.w	r3, #4
 802a5fa:	d117      	bne.n	802a62c <StartIotTask+0x184>
                        // Probably  CRC not valid, cancel but force as success
                        if (!--retry[type]) {
 802a5fc:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 802a600:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 802a604:	441a      	add	r2, r3
 802a606:	f812 2cc4 	ldrb.w	r2, [r2, #-196]
 802a60a:	3a01      	subs	r2, #1
 802a60c:	b2d1      	uxtb	r1, r2
 802a60e:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 802a612:	441a      	add	r2, r3
 802a614:	f802 1cc4 	strb.w	r1, [r2, #-196]
 802a618:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 802a61c:	4413      	add	r3, r2
 802a61e:	f813 3cc4 	ldrb.w	r3, [r3, #-196]
 802a622:	2b00      	cmp	r3, #0
 802a624:	d102      	bne.n	802a62c <StartIotTask+0x184>
                            p = SIM_RESULT_OK;
 802a626:	2301      	movs	r3, #1
 802a628:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
                        }
                    }

                    // Release back
                    if (p == SIM_RESULT_OK) {
 802a62c:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 802a630:	2b01      	cmp	r3, #1
 802a632:	d111      	bne.n	802a658 <StartIotTask+0x1b0>
                        EEPROM_SequentialID(EE_CMD_W, pHeader->seq_id, type);
 802a634:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 802a638:	899b      	ldrh	r3, [r3, #12]
 802a63a:	b29b      	uxth	r3, r3
 802a63c:	f897 20ce 	ldrb.w	r2, [r7, #206]	; 0xce
 802a640:	4619      	mov	r1, r3
 802a642:	2001      	movs	r0, #1
 802a644:	f014 f888 	bl	803e758 <EEPROM_SequentialID>
                        pending[type] = 0;
 802a648:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 802a64c:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 802a650:	4413      	add	r3, r2
 802a652:	2200      	movs	r2, #0
 802a654:	f803 2cc8 	strb.w	r2, [r3, #-200]
            for (type = 0; type <= PAYLOAD_MAX; type++) {
 802a658:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 802a65c:	3301      	adds	r3, #1
 802a65e:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
 802a662:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 802a666:	2b01      	cmp	r3, #1
 802a668:	f67f af43 	bls.w	802a4f2 <StartIotTask+0x4a>
                }
            }
        }

        // ================= SIMCOM Related Routines ================
        if (Simcom_SetState(SIM_STATE_READY, 0)) {
 802a66c:	2100      	movs	r1, #0
 802a66e:	2000      	movs	r0, #0
 802a670:	f014 f958 	bl	803e924 <Simcom_SetState>
 802a674:	4603      	mov	r3, r0
 802a676:	2b00      	cmp	r3, #0
 802a678:	d009      	beq.n	802a68e <StartIotTask+0x1e6>
            Simcom_IdleJob(NULL);
 802a67a:	2000      	movs	r0, #0
 802a67c:	f014 fe80 	bl	803f380 <Simcom_IdleJob>

            if (RTC_NeedCalibration()) {
 802a680:	f7fc f8a8 	bl	80267d4 <RTC_NeedCalibration>
 802a684:	4603      	mov	r3, r0
 802a686:	2b00      	cmp	r3, #0
 802a688:	d001      	beq.n	802a68e <StartIotTask+0x1e6>
                RTC_CalibrateWithSimcom();
 802a68a:	f7fc f8cb 	bl	8026824 <RTC_CalibrateWithSimcom>
            }
        }

        // Periodic interval
        osDelayUntil(lastWake + 1000);
 802a68e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 802a692:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 802a696:	4618      	mov	r0, r3
 802a698:	f00d f94c 	bl	8037934 <osDelayUntil>
        lastWake = _GetTickMS();
 802a69c:	e719      	b.n	802a4d2 <StartIotTask+0x2a>
 802a69e:	bf00      	nop
 802a6a0:	20008644 	.word	0x20008644
 802a6a4:	20008640 	.word	0x20008640
 802a6a8:	20008530 	.word	0x20008530

0802a6ac <StartReporterTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartReporterTask */
void StartReporterTask(void *argument)
{
 802a6ac:	b580      	push	{r7, lr}
 802a6ae:	b09c      	sub	sp, #112	; 0x70
 802a6b0:	af00      	add	r7, sp, #0
 802a6b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReporterTask */
    TickType_t lastWake;
    report_t report;
    osStatus_t status;
    FRAME_TYPE frame;
    uint8_t frameDecider = 0;
 802a6b4:	2300      	movs	r3, #0
 802a6b6:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

    // wait until ManagerTask done
    osEventFlagsWait(GlobalEventHandle, EVENT_READY, osFlagsNoClear, osWaitForever);
 802a6ba:	4b32      	ldr	r3, [pc, #200]	; (802a784 <StartReporterTask+0xd8>)
 802a6bc:	6818      	ldr	r0, [r3, #0]
 802a6be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802a6c2:	2202      	movs	r2, #2
 802a6c4:	2101      	movs	r1, #1
 802a6c6:	f00d fa1f 	bl	8037b08 <osEventFlagsWait>

    // Initialize
    Report_Init(FR_SIMPLE, &report);
 802a6ca:	f107 0308 	add.w	r3, r7, #8
 802a6ce:	4619      	mov	r1, r3
 802a6d0:	2001      	movs	r0, #1
 802a6d2:	f7fd fc99 	bl	8028008 <Report_Init>

    /* Infinite loop */
    for (;;) {
        lastWake = _GetTickMS();
 802a6d6:	f015 f87e 	bl	803f7d6 <_GetTickMS>
 802a6da:	66b8      	str	r0, [r7, #104]	; 0x68

        // Frame type decider
        if (!VCU.d.state.independent) {
 802a6dc:	4b2a      	ldr	r3, [pc, #168]	; (802a788 <StartReporterTask+0xdc>)
 802a6de:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 802a6e2:	2b00      	cmp	r3, #0
 802a6e4:	d113      	bne.n	802a70e <StartReporterTask+0x62>
            if (++frameDecider == (RPT_INTERVAL_FULL / RPT_INTERVAL_SIMPLE )) {
 802a6e6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 802a6ea:	3301      	adds	r3, #1
 802a6ec:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 802a6f0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 802a6f4:	2b04      	cmp	r3, #4
 802a6f6:	d106      	bne.n	802a706 <StartReporterTask+0x5a>
                frame = FR_FULL;
 802a6f8:	2302      	movs	r3, #2
 802a6fa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                frameDecider = 0;
 802a6fe:	2300      	movs	r3, #0
 802a700:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 802a704:	e009      	b.n	802a71a <StartReporterTask+0x6e>
            } else {
                frame = FR_SIMPLE;
 802a706:	2301      	movs	r3, #1
 802a708:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 802a70c:	e005      	b.n	802a71a <StartReporterTask+0x6e>
            }
        }
        else {
            frame = FR_FULL;
 802a70e:	2302      	movs	r3, #2
 802a710:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            frameDecider = 0;
 802a714:	2300      	movs	r3, #0
 802a716:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
        }

        // Get current snapshot
        Report_Capture(frame, &report);
 802a71a:	f107 0208 	add.w	r2, r7, #8
 802a71e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 802a722:	4611      	mov	r1, r2
 802a724:	4618      	mov	r0, r3
 802a726:	f7fd fca5 	bl	8028074 <Report_Capture>

        // Put report to log
        do {
            status = osMessageQueuePut(ReportQueueHandle, &report, 0U, 0U);
 802a72a:	4b18      	ldr	r3, [pc, #96]	; (802a78c <StartReporterTask+0xe0>)
 802a72c:	6818      	ldr	r0, [r3, #0]
 802a72e:	f107 0108 	add.w	r1, r7, #8
 802a732:	2300      	movs	r3, #0
 802a734:	2200      	movs	r2, #0
 802a736:	f00d fc2b 	bl	8037f90 <osMessageQueuePut>
 802a73a:	6678      	str	r0, [r7, #100]	; 0x64
            // already full, remove oldest
            if (status == osErrorResource) {
 802a73c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802a73e:	f113 0f03 	cmn.w	r3, #3
 802a742:	d105      	bne.n	802a750 <StartReporterTask+0xa4>
                osThreadFlagsSet(IotTaskHandle, EVT_IOT_DISCARD);
 802a744:	4b12      	ldr	r3, [pc, #72]	; (802a790 <StartReporterTask+0xe4>)
 802a746:	681b      	ldr	r3, [r3, #0]
 802a748:	2101      	movs	r1, #1
 802a74a:	4618      	mov	r0, r3
 802a74c:	f00c ff7e 	bl	803764c <osThreadFlagsSet>
            }
        } while (status != osOK);
 802a750:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802a752:	2b00      	cmp	r3, #0
 802a754:	d1e9      	bne.n	802a72a <StartReporterTask+0x7e>

        // reset some events group
        VCU.SetEvent(EV_VCU_NETWORK_RESTART, 0);
 802a756:	4b0c      	ldr	r3, [pc, #48]	; (802a788 <StartReporterTask+0xdc>)
 802a758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802a75a:	2200      	movs	r2, #0
 802a75c:	f04f 0001 	mov.w	r0, #1
 802a760:	f04f 0100 	mov.w	r1, #0
 802a764:	4798      	blx	r3

        // Report interval
        osDelayUntil(lastWake + (VCU.d.interval * 1000));
 802a766:	4b08      	ldr	r3, [pc, #32]	; (802a788 <StartReporterTask+0xdc>)
 802a768:	88db      	ldrh	r3, [r3, #6]
 802a76a:	461a      	mov	r2, r3
 802a76c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802a770:	fb03 f302 	mul.w	r3, r3, r2
 802a774:	461a      	mov	r2, r3
 802a776:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802a778:	4413      	add	r3, r2
 802a77a:	4618      	mov	r0, r3
 802a77c:	f00d f8da 	bl	8037934 <osDelayUntil>
        lastWake = _GetTickMS();
 802a780:	e7a9      	b.n	802a6d6 <StartReporterTask+0x2a>
 802a782:	bf00      	nop
 802a784:	20008644 	.word	0x20008644
 802a788:	20000228 	.word	0x20000228
 802a78c:	20008640 	.word	0x20008640
 802a790:	200088ec 	.word	0x200088ec

0802a794 <StartCommandTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCommandTask */
void StartCommandTask(void *argument)
{
 802a794:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 802a798:	b09e      	sub	sp, #120	; 0x78
 802a79a:	af02      	add	r7, sp, #8
 802a79c:	6078      	str	r0, [r7, #4]
    osStatus_t status;
    uint32_t notif;
    uint8_t driver;

    // wait until ManagerTask done
    osEventFlagsWait(GlobalEventHandle, EVENT_READY, osFlagsNoClear, osWaitForever);
 802a79e:	4bb8      	ldr	r3, [pc, #736]	; (802aa80 <StartCommandTask+0x2ec>)
 802a7a0:	6818      	ldr	r0, [r3, #0]
 802a7a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802a7a6:	2202      	movs	r2, #2
 802a7a8:	2101      	movs	r1, #1
 802a7aa:	f00d f9ad 	bl	8037b08 <osEventFlagsWait>

    // Initialize
    Response_Init(&response);
 802a7ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802a7b2:	4618      	mov	r0, r3
 802a7b4:	f7fd fc44 	bl	8028040 <Response_Init>

    // Handle Post-FOTA
    if (FIRMWARE_VERSION) {
 802a7b8:	4bb2      	ldr	r3, [pc, #712]	; (802aa84 <StartCommandTask+0x2f0>)
 802a7ba:	881b      	ldrh	r3, [r3, #0]
 802a7bc:	2b00      	cmp	r3, #0
 802a7be:	d03a      	beq.n	802a836 <StartCommandTask+0xa2>
        /* Success or Failed*/
        if (FIRMWARE_VERSION != VCU_VERSION) {
 802a7c0:	4bb0      	ldr	r3, [pc, #704]	; (802aa84 <StartCommandTask+0x2f0>)
 802a7c2:	881b      	ldrh	r3, [r3, #0]
 802a7c4:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 802a7c8:	d017      	beq.n	802a7fa <StartCommandTask+0x66>
            sprintf(response.data.message,
 802a7ca:	4bae      	ldr	r3, [pc, #696]	; (802aa84 <StartCommandTask+0x2f0>)
 802a7cc:	881b      	ldrh	r3, [r3, #0]
 802a7ce:	0a1b      	lsrs	r3, r3, #8
 802a7d0:	b29b      	uxth	r3, r3
 802a7d2:	b2da      	uxtb	r2, r3
                    "FW upgraded v%d.%d to v%d.%d",
                    _R8(FIRMWARE_VERSION, 8),
                    _R8(FIRMWARE_VERSION, 0),
 802a7d4:	4bab      	ldr	r3, [pc, #684]	; (802aa84 <StartCommandTask+0x2f0>)
 802a7d6:	881b      	ldrh	r3, [r3, #0]
            sprintf(response.data.message,
 802a7d8:	b2d9      	uxtb	r1, r3
 802a7da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802a7de:	f103 000f 	add.w	r0, r3, #15
 802a7e2:	2308      	movs	r3, #8
 802a7e4:	9301      	str	r3, [sp, #4]
 802a7e6:	2301      	movs	r3, #1
 802a7e8:	9300      	str	r3, [sp, #0]
 802a7ea:	460b      	mov	r3, r1
 802a7ec:	49a6      	ldr	r1, [pc, #664]	; (802aa88 <StartCommandTask+0x2f4>)
 802a7ee:	f015 f919 	bl	803fa24 <siprintf>
                    _R8(VCU_VERSION, 8),
                    _R8(VCU_VERSION, 0));
            response.data.code = RESPONSE_STATUS_OK;
 802a7f2:	2301      	movs	r3, #1
 802a7f4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 802a7f8:	e00c      	b.n	802a814 <StartCommandTask+0x80>
        } else {
            strcpy(response.data.message, "FOTA failed");
 802a7fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802a7fe:	330f      	adds	r3, #15
 802a800:	4aa2      	ldr	r2, [pc, #648]	; (802aa8c <StartCommandTask+0x2f8>)
 802a802:	461c      	mov	r4, r3
 802a804:	4613      	mov	r3, r2
 802a806:	cb07      	ldmia	r3!, {r0, r1, r2}
 802a808:	6020      	str	r0, [r4, #0]
 802a80a:	6061      	str	r1, [r4, #4]
 802a80c:	60a2      	str	r2, [r4, #8]
            response.data.code = RESPONSE_STATUS_ERROR;
 802a80e:	2300      	movs	r3, #0
 802a810:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        }

        /* Send Response */
        Response_Capture(&response);
 802a814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802a818:	4618      	mov	r0, r3
 802a81a:	f7fd fd7d 	bl	8028318 <Response_Capture>
        osMessageQueuePut(ResponseQueueHandle, &response, 0U, 0U);
 802a81e:	4b9c      	ldr	r3, [pc, #624]	; (802aa90 <StartCommandTask+0x2fc>)
 802a820:	6818      	ldr	r0, [r3, #0]
 802a822:	f107 0124 	add.w	r1, r7, #36	; 0x24
 802a826:	2300      	movs	r3, #0
 802a828:	2200      	movs	r2, #0
 802a82a:	f00d fbb1 	bl	8037f90 <osMessageQueuePut>

        /* Reset after FOTA */
        EEPROM_FirmwareVersion(EE_CMD_W, 0);
 802a82e:	2100      	movs	r1, #0
 802a830:	2001      	movs	r0, #1
 802a832:	f013 ffe3 	bl	803e7fc <EEPROM_FirmwareVersion>
    }

    /* Infinite loop */
    for (;;) {
        // get command in queue
        status = osMessageQueueGet(CommandQueueHandle, &command, NULL, osWaitForever);
 802a836:	4b97      	ldr	r3, [pc, #604]	; (802aa94 <StartCommandTask+0x300>)
 802a838:	6818      	ldr	r0, [r3, #0]
 802a83a:	f107 0110 	add.w	r1, r7, #16
 802a83e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802a842:	2200      	movs	r2, #0
 802a844:	f00d fc18 	bl	8038078 <osMessageQueueGet>
 802a848:	66f8      	str	r0, [r7, #108]	; 0x6c

        if (status == osOK) {
 802a84a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802a84c:	2b00      	cmp	r3, #0
 802a84e:	d1f2      	bne.n	802a836 <StartCommandTask+0xa2>
            Command_Debugger(&command);
 802a850:	f107 0310 	add.w	r3, r7, #16
 802a854:	4618      	mov	r0, r3
 802a856:	f7fd fdb5 	bl	80283c4 <Command_Debugger>

            // default command response
            response.data.code = RESPONSE_STATUS_OK;
 802a85a:	2301      	movs	r3, #1
 802a85c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
            strcpy(response.data.message, "");
 802a860:	2300      	movs	r3, #0
 802a862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

            // handle the command
            switch (command.data.code) {
 802a866:	7dfb      	ldrb	r3, [r7, #23]
 802a868:	2b04      	cmp	r3, #4
 802a86a:	f200 815e 	bhi.w	802ab2a <StartCommandTask+0x396>
 802a86e:	a201      	add	r2, pc, #4	; (adr r2, 802a874 <StartCommandTask+0xe0>)
 802a870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a874:	0802a889 	.word	0x0802a889
 802a878:	0802a92d 	.word	0x0802a92d
 802a87c:	0802a97d 	.word	0x0802a97d
 802a880:	0802a9dd 	.word	0x0802a9dd
 802a884:	0802aac5 	.word	0x0802aac5
                case CMD_CODE_GEN :
                    switch (command.data.sub_code) {
 802a888:	7e3b      	ldrb	r3, [r7, #24]
 802a88a:	2b03      	cmp	r3, #3
 802a88c:	d849      	bhi.n	802a922 <StartCommandTask+0x18e>
 802a88e:	a201      	add	r2, pc, #4	; (adr r2, 802a894 <StartCommandTask+0x100>)
 802a890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a894:	0802a8a5 	.word	0x0802a8a5
 802a898:	0802a8bd 	.word	0x0802a8bd
 802a89c:	0802a8cf 	.word	0x0802a8cf
 802a8a0:	0802a8e1 	.word	0x0802a8e1
                        case CMD_GEN_INFO :
                            sprintf(response.data.message,
 802a8a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802a8a8:	f103 000f 	add.w	r0, r3, #15
 802a8ac:	2314      	movs	r3, #20
 802a8ae:	9300      	str	r3, [sp, #0]
 802a8b0:	2308      	movs	r3, #8
 802a8b2:	2201      	movs	r2, #1
 802a8b4:	4978      	ldr	r1, [pc, #480]	; (802aa98 <StartCommandTask+0x304>)
 802a8b6:	f015 f8b5 	bl	803fa24 <siprintf>
                                    "VCU v%d.%d, "VCU_VENDOR" @ 20%d",
                                    _R8(VCU_VERSION, 8),
                                    _R8(VCU_VERSION, 0),
                                    VCU_BUILD_YEAR);
                            break;
 802a8ba:	e036      	b.n	802a92a <StartCommandTask+0x196>

                        case CMD_GEN_LED :
                            _LedWrite((uint8_t) command.data.value);
 802a8bc:	f8d7 3019 	ldr.w	r3, [r7, #25]
 802a8c0:	f8d7 401d 	ldr.w	r4, [r7, #29]
 802a8c4:	b2db      	uxtb	r3, r3
 802a8c6:	4618      	mov	r0, r3
 802a8c8:	f014 ff8c 	bl	803f7e4 <_LedWrite>
                            break;
 802a8cc:	e02d      	b.n	802a92a <StartCommandTask+0x196>

                        case CMD_GEN_KNOB :
                            VCU.d.state.knob = (uint8_t) command.data.value;
 802a8ce:	f8d7 3019 	ldr.w	r3, [r7, #25]
 802a8d2:	f8d7 401d 	ldr.w	r4, [r7, #29]
 802a8d6:	b2da      	uxtb	r2, r3
 802a8d8:	4b70      	ldr	r3, [pc, #448]	; (802aa9c <StartCommandTask+0x308>)
 802a8da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                            break;
 802a8de:	e024      	b.n	802a92a <StartCommandTask+0x196>

                        case CMD_GEN_FOTA :
                            if (BACKUP_VOLTAGE > 3600) {
 802a8e0:	4b6f      	ldr	r3, [pc, #444]	; (802aaa0 <StartCommandTask+0x30c>)
 802a8e2:	881b      	ldrh	r3, [r3, #0]
 802a8e4:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 802a8e8:	d90d      	bls.n	802a906 <StartCommandTask+0x172>
                                EEPROM_FirmwareVersion(EE_CMD_W, VCU_VERSION);
 802a8ea:	f44f 7184 	mov.w	r1, #264	; 0x108
 802a8ee:	2001      	movs	r0, #1
 802a8f0:	f013 ff84 	bl	803e7fc <EEPROM_FirmwareVersion>
                                /* Set flag to SRAM */
                                *(uint32_t*) IAP_FLAG_ADDR = IAP_FLAG;
 802a8f4:	4b6b      	ldr	r3, [pc, #428]	; (802aaa4 <StartCommandTask+0x310>)
 802a8f6:	4a6c      	ldr	r2, [pc, #432]	; (802aaa8 <StartCommandTask+0x314>)
 802a8f8:	601a      	str	r2, [r3, #0]
                                *(uint32_t*) IAP_RETRY_ADDR = IAP_RETRY;
 802a8fa:	4b6c      	ldr	r3, [pc, #432]	; (802aaac <StartCommandTask+0x318>)
 802a8fc:	2201      	movs	r2, #1
 802a8fe:	601a      	str	r2, [r3, #0]
                                /* Reset */
                                HAL_NVIC_SystemReset();
 802a900:	f003 f867 	bl	802d9d2 <HAL_NVIC_SystemReset>
 802a904:	e009      	b.n	802a91a <StartCommandTask+0x186>
                            } else {
                                sprintf(response.data.message, "Battery low at %u mV", BACKUP_VOLTAGE);
 802a906:	4b66      	ldr	r3, [pc, #408]	; (802aaa0 <StartCommandTask+0x30c>)
 802a908:	881b      	ldrh	r3, [r3, #0]
 802a90a:	461a      	mov	r2, r3
 802a90c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802a910:	330f      	adds	r3, #15
 802a912:	4967      	ldr	r1, [pc, #412]	; (802aab0 <StartCommandTask+0x31c>)
 802a914:	4618      	mov	r0, r3
 802a916:	f015 f885 	bl	803fa24 <siprintf>
                            }
                            /* This line is never reached when FOTA activated */
                            response.data.code = RESPONSE_STATUS_ERROR;
 802a91a:	2300      	movs	r3, #0
 802a91c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

                            break;
 802a920:	e003      	b.n	802a92a <StartCommandTask+0x196>

                        default:
                            response.data.code = RESPONSE_STATUS_INVALID;
 802a922:	2302      	movs	r3, #2
 802a924:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
                            break;
 802a928:	bf00      	nop
                    }
                    break;
 802a92a:	e103      	b.n	802ab34 <StartCommandTask+0x3a0>

                case CMD_CODE_REPORT :
                    switch (command.data.sub_code) {
 802a92c:	7e3b      	ldrb	r3, [r7, #24]
 802a92e:	2b01      	cmp	r3, #1
 802a930:	d00d      	beq.n	802a94e <StartCommandTask+0x1ba>
 802a932:	2b02      	cmp	r3, #2
 802a934:	d014      	beq.n	802a960 <StartCommandTask+0x1cc>
 802a936:	2b00      	cmp	r3, #0
 802a938:	d11b      	bne.n	802a972 <StartCommandTask+0x1de>
                        case CMD_REPORT_RTC :
                            RTC_Write((uint64_t) command.data.value, &(VCU.d.rtc));
 802a93a:	f8d7 3019 	ldr.w	r3, [r7, #25]
 802a93e:	f8d7 401d 	ldr.w	r4, [r7, #29]
 802a942:	4a5c      	ldr	r2, [pc, #368]	; (802aab4 <StartCommandTask+0x320>)
 802a944:	4618      	mov	r0, r3
 802a946:	4621      	mov	r1, r4
 802a948:	f7fb fede 	bl	8026708 <RTC_Write>
                            break;
 802a94c:	e015      	b.n	802a97a <StartCommandTask+0x1e6>

                        case CMD_REPORT_ODOM :
                            EEPROM_Odometer(EE_CMD_W, (uint32_t) command.data.value);
 802a94e:	f8d7 3019 	ldr.w	r3, [r7, #25]
 802a952:	f8d7 401d 	ldr.w	r4, [r7, #29]
 802a956:	4619      	mov	r1, r3
 802a958:	2001      	movs	r0, #1
 802a95a:	f013 febd 	bl	803e6d8 <EEPROM_Odometer>
                            break;
 802a95e:	e00c      	b.n	802a97a <StartCommandTask+0x1e6>

                        case CMD_REPORT_UNITID :
                            EEPROM_UnitID(EE_CMD_W, (uint32_t) command.data.value);
 802a960:	f8d7 3019 	ldr.w	r3, [r7, #25]
 802a964:	f8d7 401d 	ldr.w	r4, [r7, #29]
 802a968:	4619      	mov	r1, r3
 802a96a:	2001      	movs	r0, #1
 802a96c:	f013 fed2 	bl	803e714 <EEPROM_UnitID>
                            break;
 802a970:	e003      	b.n	802a97a <StartCommandTask+0x1e6>

                        default:
                            response.data.code = RESPONSE_STATUS_INVALID;
 802a972:	2302      	movs	r3, #2
 802a974:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
                            break;
 802a978:	bf00      	nop
                    }
                    break;
 802a97a:	e0db      	b.n	802ab34 <StartCommandTask+0x3a0>

                case CMD_CODE_AUDIO :
                    switch (command.data.sub_code) {
 802a97c:	7e3b      	ldrb	r3, [r7, #24]
 802a97e:	2b01      	cmp	r3, #1
 802a980:	d00a      	beq.n	802a998 <StartCommandTask+0x204>
 802a982:	2b02      	cmp	r3, #2
 802a984:	d01d      	beq.n	802a9c2 <StartCommandTask+0x22e>
 802a986:	2b00      	cmp	r3, #0
 802a988:	d123      	bne.n	802a9d2 <StartCommandTask+0x23e>
                        case CMD_AUDIO_BEEP :
                            osThreadFlagsSet(AudioTaskHandle, EVT_AUDIO_BEEP);
 802a98a:	4b4b      	ldr	r3, [pc, #300]	; (802aab8 <StartCommandTask+0x324>)
 802a98c:	681b      	ldr	r3, [r3, #0]
 802a98e:	2101      	movs	r1, #1
 802a990:	4618      	mov	r0, r3
 802a992:	f00c fe5b 	bl	803764c <osThreadFlagsSet>
                            break;
 802a996:	e020      	b.n	802a9da <StartCommandTask+0x246>

                        case CMD_AUDIO_MUTE :
                            if ((uint8_t) command.data.value) {
 802a998:	f8d7 3019 	ldr.w	r3, [r7, #25]
 802a99c:	f8d7 401d 	ldr.w	r4, [r7, #29]
 802a9a0:	b2db      	uxtb	r3, r3
 802a9a2:	2b00      	cmp	r3, #0
 802a9a4:	d006      	beq.n	802a9b4 <StartCommandTask+0x220>
                                osThreadFlagsSet(AudioTaskHandle, EVT_AUDIO_MUTE_ON);
 802a9a6:	4b44      	ldr	r3, [pc, #272]	; (802aab8 <StartCommandTask+0x324>)
 802a9a8:	681b      	ldr	r3, [r3, #0]
 802a9aa:	2108      	movs	r1, #8
 802a9ac:	4618      	mov	r0, r3
 802a9ae:	f00c fe4d 	bl	803764c <osThreadFlagsSet>
                            } else {
                                osThreadFlagsSet(AudioTaskHandle, EVT_AUDIO_MUTE_OFF);
                            }

                            break;
 802a9b2:	e012      	b.n	802a9da <StartCommandTask+0x246>
                                osThreadFlagsSet(AudioTaskHandle, EVT_AUDIO_MUTE_OFF);
 802a9b4:	4b40      	ldr	r3, [pc, #256]	; (802aab8 <StartCommandTask+0x324>)
 802a9b6:	681b      	ldr	r3, [r3, #0]
 802a9b8:	2110      	movs	r1, #16
 802a9ba:	4618      	mov	r0, r3
 802a9bc:	f00c fe46 	bl	803764c <osThreadFlagsSet>
                            break;
 802a9c0:	e00b      	b.n	802a9da <StartCommandTask+0x246>

                        case CMD_AUDIO_VOL :
                            VCU.d.volume = (uint8_t) command.data.value;
 802a9c2:	f8d7 3019 	ldr.w	r3, [r7, #25]
 802a9c6:	f8d7 401d 	ldr.w	r4, [r7, #29]
 802a9ca:	b2da      	uxtb	r2, r3
 802a9cc:	4b33      	ldr	r3, [pc, #204]	; (802aa9c <StartCommandTask+0x308>)
 802a9ce:	721a      	strb	r2, [r3, #8]
                            break;
 802a9d0:	e003      	b.n	802a9da <StartCommandTask+0x246>

                        default:
                            response.data.code = RESPONSE_STATUS_INVALID;
 802a9d2:	2302      	movs	r3, #2
 802a9d4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
                            break;
 802a9d8:	bf00      	nop
                    }
                    break;
 802a9da:	e0ab      	b.n	802ab34 <StartCommandTask+0x3a0>

                case CMD_CODE_FINGER :
                    // put finger index to queue
                    driver = command.data.value;
 802a9dc:	f8d7 3019 	ldr.w	r3, [r7, #25]
 802a9e0:	f8d7 401d 	ldr.w	r4, [r7, #29]
 802a9e4:	b2db      	uxtb	r3, r3
 802a9e6:	73fb      	strb	r3, [r7, #15]
                    osMessageQueuePut(DriverQueueHandle, &driver, 0U, 0U);
 802a9e8:	4b34      	ldr	r3, [pc, #208]	; (802aabc <StartCommandTask+0x328>)
 802a9ea:	6818      	ldr	r0, [r3, #0]
 802a9ec:	f107 010f 	add.w	r1, r7, #15
 802a9f0:	2300      	movs	r3, #0
 802a9f2:	2200      	movs	r2, #0
 802a9f4:	f00d facc 	bl	8037f90 <osMessageQueuePut>

                    switch (command.data.sub_code) {
 802a9f8:	7e3b      	ldrb	r3, [r7, #24]
 802a9fa:	2b01      	cmp	r3, #1
 802a9fc:	d00a      	beq.n	802aa14 <StartCommandTask+0x280>
 802a9fe:	2b02      	cmp	r3, #2
 802aa00:	d00f      	beq.n	802aa22 <StartCommandTask+0x28e>
 802aa02:	2b00      	cmp	r3, #0
 802aa04:	d114      	bne.n	802aa30 <StartCommandTask+0x29c>
                        case CMD_FINGER_ADD :
                            osThreadFlagsSet(FingerTaskHandle, EVT_FINGER_ADD);
 802aa06:	4b2e      	ldr	r3, [pc, #184]	; (802aac0 <StartCommandTask+0x32c>)
 802aa08:	681b      	ldr	r3, [r3, #0]
 802aa0a:	2102      	movs	r1, #2
 802aa0c:	4618      	mov	r0, r3
 802aa0e:	f00c fe1d 	bl	803764c <osThreadFlagsSet>
                            break;
 802aa12:	e011      	b.n	802aa38 <StartCommandTask+0x2a4>

                        case CMD_FINGER_DEL :
                            osThreadFlagsSet(FingerTaskHandle, EVT_FINGER_DEL);
 802aa14:	4b2a      	ldr	r3, [pc, #168]	; (802aac0 <StartCommandTask+0x32c>)
 802aa16:	681b      	ldr	r3, [r3, #0]
 802aa18:	2104      	movs	r1, #4
 802aa1a:	4618      	mov	r0, r3
 802aa1c:	f00c fe16 	bl	803764c <osThreadFlagsSet>
                            break;
 802aa20:	e00a      	b.n	802aa38 <StartCommandTask+0x2a4>

                        case CMD_FINGER_RST :
                            osThreadFlagsSet(FingerTaskHandle, EVT_FINGER_RST);
 802aa22:	4b27      	ldr	r3, [pc, #156]	; (802aac0 <StartCommandTask+0x32c>)
 802aa24:	681b      	ldr	r3, [r3, #0]
 802aa26:	2108      	movs	r1, #8
 802aa28:	4618      	mov	r0, r3
 802aa2a:	f00c fe0f 	bl	803764c <osThreadFlagsSet>
                            break;
 802aa2e:	e003      	b.n	802aa38 <StartCommandTask+0x2a4>

                        default:
                            response.data.code = RESPONSE_STATUS_INVALID;
 802aa30:	2302      	movs	r3, #2
 802aa32:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
                            break;
 802aa36:	bf00      	nop
                    }

                    // wait response until timeout
                    if (response.data.code == RESPONSE_STATUS_OK) {
 802aa38:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 802aa3c:	2b01      	cmp	r3, #1
 802aa3e:	d178      	bne.n	802ab32 <StartCommandTask+0x39e>
                        notif = osThreadFlagsWait(EVT_MASK, osFlagsWaitAny, 20000);
 802aa40:	f644 6220 	movw	r2, #20000	; 0x4e20
 802aa44:	2100      	movs	r1, #0
 802aa46:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 802aa4a:	f00c feb1 	bl	80377b0 <osThreadFlagsWait>
 802aa4e:	66b8      	str	r0, [r7, #104]	; 0x68
                        if (_RTOS_ValidThreadFlag(notif)) {
 802aa50:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 802aa52:	f014 ff19 	bl	803f888 <_RTOS_ValidThreadFlag>
 802aa56:	4603      	mov	r3, r0
 802aa58:	2b00      	cmp	r3, #0
 802aa5a:	d06a      	beq.n	802ab32 <StartCommandTask+0x39e>
                            if (notif & EVT_COMMAND_ERROR) {
 802aa5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802aa5e:	469b      	mov	fp, r3
 802aa60:	f04f 0c00 	mov.w	ip, #0
 802aa64:	f04f 0101 	mov.w	r1, #1
 802aa68:	f04f 0200 	mov.w	r2, #0
 802aa6c:	ea0b 0301 	and.w	r3, fp, r1
 802aa70:	ea0c 0402 	and.w	r4, ip, r2
 802aa74:	4323      	orrs	r3, r4
 802aa76:	d05c      	beq.n	802ab32 <StartCommandTask+0x39e>
                                response.data.code = RESPONSE_STATUS_ERROR;
 802aa78:	2300      	movs	r3, #0
 802aa7a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
                            }
                        }
                    }
                    break;
 802aa7e:	e058      	b.n	802ab32 <StartCommandTask+0x39e>
 802aa80:	20008644 	.word	0x20008644
 802aa84:	2000805c 	.word	0x2000805c
 802aa88:	08043a08 	.word	0x08043a08
 802aa8c:	08043a28 	.word	0x08043a28
 802aa90:	20008530 	.word	0x20008530
 802aa94:	2000895c 	.word	0x2000895c
 802aa98:	08043a34 	.word	0x08043a34
 802aa9c:	20000228 	.word	0x20000228
 802aaa0:	200004b4 	.word	0x200004b4
 802aaa4:	2004fffc 	.word	0x2004fffc
 802aaa8:	aabbccdd 	.word	0xaabbccdd
 802aaac:	2004fff8 	.word	0x2004fff8
 802aab0:	08043a4c 	.word	0x08043a4c
 802aab4:	20000238 	.word	0x20000238
 802aab8:	20008a08 	.word	0x20008a08
 802aabc:	20008760 	.word	0x20008760
 802aac0:	2000864c 	.word	0x2000864c

                case CMD_CODE_KEYLESS :
                    switch (command.data.sub_code) {
 802aac4:	7e3b      	ldrb	r3, [r7, #24]
 802aac6:	2b00      	cmp	r3, #0
 802aac8:	d129      	bne.n	802ab1e <StartCommandTask+0x38a>
                        case CMD_KEYLESS_PAIRING :
                            osThreadFlagsSet(KeylessTaskHandle, EVT_KEYLESS_PAIRING);
 802aaca:	4b21      	ldr	r3, [pc, #132]	; (802ab50 <StartCommandTask+0x3bc>)
 802aacc:	681b      	ldr	r3, [r3, #0]
 802aace:	2102      	movs	r1, #2
 802aad0:	4618      	mov	r0, r3
 802aad2:	f00c fdbb 	bl	803764c <osThreadFlagsSet>

                            // wait response until timeout
                            if (response.data.code == RESPONSE_STATUS_OK) {
 802aad6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 802aada:	2b01      	cmp	r3, #1
 802aadc:	d123      	bne.n	802ab26 <StartCommandTask+0x392>
                                notif = osThreadFlagsWait(EVT_MASK, osFlagsWaitAny, COMMAND_TIMEOUT);
 802aade:	f644 6220 	movw	r2, #20000	; 0x4e20
 802aae2:	2100      	movs	r1, #0
 802aae4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 802aae8:	f00c fe62 	bl	80377b0 <osThreadFlagsWait>
 802aaec:	66b8      	str	r0, [r7, #104]	; 0x68
                                if (_RTOS_ValidThreadFlag(notif)) {
 802aaee:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 802aaf0:	f014 feca 	bl	803f888 <_RTOS_ValidThreadFlag>
 802aaf4:	4603      	mov	r3, r0
 802aaf6:	2b00      	cmp	r3, #0
 802aaf8:	d015      	beq.n	802ab26 <StartCommandTask+0x392>
                                    if (notif & EVT_COMMAND_ERROR) {
 802aafa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802aafc:	469b      	mov	fp, r3
 802aafe:	f04f 0c00 	mov.w	ip, #0
 802ab02:	f04f 0101 	mov.w	r1, #1
 802ab06:	f04f 0200 	mov.w	r2, #0
 802ab0a:	ea0b 0301 	and.w	r3, fp, r1
 802ab0e:	ea0c 0402 	and.w	r4, ip, r2
 802ab12:	4323      	orrs	r3, r4
 802ab14:	d007      	beq.n	802ab26 <StartCommandTask+0x392>
                                        response.data.code = RESPONSE_STATUS_ERROR;
 802ab16:	2300      	movs	r3, #0
 802ab18:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
                                    }
                                }
                            }

                            break;
 802ab1c:	e003      	b.n	802ab26 <StartCommandTask+0x392>

                        default:
                            response.data.code = RESPONSE_STATUS_INVALID;
 802ab1e:	2302      	movs	r3, #2
 802ab20:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
                            break;
 802ab24:	e000      	b.n	802ab28 <StartCommandTask+0x394>
                            break;
 802ab26:	bf00      	nop
                    }
                    break;
 802ab28:	e004      	b.n	802ab34 <StartCommandTask+0x3a0>

                default:
                    response.data.code = RESPONSE_STATUS_INVALID;
 802ab2a:	2302      	movs	r3, #2
 802ab2c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
                    break;
 802ab30:	e000      	b.n	802ab34 <StartCommandTask+0x3a0>
                    break;
 802ab32:	bf00      	nop
            }

            // Get current snapshot
            Response_Capture(&response);
 802ab34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802ab38:	4618      	mov	r0, r3
 802ab3a:	f7fd fbed 	bl	8028318 <Response_Capture>
            // Send to Queue
            osMessageQueuePut(ResponseQueueHandle, &response, 0U, 0U);
 802ab3e:	4b05      	ldr	r3, [pc, #20]	; (802ab54 <StartCommandTask+0x3c0>)
 802ab40:	6818      	ldr	r0, [r3, #0]
 802ab42:	f107 0124 	add.w	r1, r7, #36	; 0x24
 802ab46:	2300      	movs	r3, #0
 802ab48:	2200      	movs	r2, #0
 802ab4a:	f00d fa21 	bl	8037f90 <osMessageQueuePut>
        status = osMessageQueueGet(CommandQueueHandle, &command, NULL, osWaitForever);
 802ab4e:	e672      	b.n	802a836 <StartCommandTask+0xa2>
 802ab50:	20008638 	.word	0x20008638
 802ab54:	20008530 	.word	0x20008530

0802ab58 <StartGpsTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartGpsTask */
void StartGpsTask(void *argument)
{
 802ab58:	b580      	push	{r7, lr}
 802ab5a:	b084      	sub	sp, #16
 802ab5c:	af00      	add	r7, sp, #0
 802ab5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGpsTask */
    TickType_t lastWake;

    // wait until ManagerTask done
    osEventFlagsWait(GlobalEventHandle, EVENT_READY, osFlagsNoClear, osWaitForever);
 802ab60:	4b0b      	ldr	r3, [pc, #44]	; (802ab90 <StartGpsTask+0x38>)
 802ab62:	6818      	ldr	r0, [r3, #0]
 802ab64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802ab68:	2202      	movs	r2, #2
 802ab6a:	2101      	movs	r1, #1
 802ab6c:	f00c ffcc 	bl	8037b08 <osEventFlagsWait>

    // Initialize
    GPS_Init();
 802ab70:	f7fc fb74 	bl	802725c <GPS_Init>

    /* Infinite loop */
    for (;;) {
        lastWake = _GetTickMS();
 802ab74:	f014 fe2f 	bl	803f7d6 <_GetTickMS>
 802ab78:	60f8      	str	r0, [r7, #12]

        GPS_Capture();
 802ab7a:	f7fc fbb7 	bl	80272ec <GPS_Capture>
        GPS_CalculateOdometer();
 802ab7e:	f7fc fbf9 	bl	8027374 <GPS_CalculateOdometer>
        // GPS_Debugger();

        // Periodic interval
        osDelayUntil(lastWake + GPS_INTERVAL_MS);
 802ab82:	68fb      	ldr	r3, [r7, #12]
 802ab84:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 802ab88:	4618      	mov	r0, r3
 802ab8a:	f00c fed3 	bl	8037934 <osDelayUntil>
        lastWake = _GetTickMS();
 802ab8e:	e7f1      	b.n	802ab74 <StartGpsTask+0x1c>
 802ab90:	20008644 	.word	0x20008644

0802ab94 <StartGyroTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartGyroTask */
void StartGyroTask(void *argument)
{
 802ab94:	b580      	push	{r7, lr}
 802ab96:	b08c      	sub	sp, #48	; 0x30
 802ab98:	af00      	add	r7, sp, #0
 802ab9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGyroTask */
    TickType_t lastWake;
    mems_decision_t decider, tmp;

    // wait until ManagerTask done
    osEventFlagsWait(GlobalEventHandle, EVENT_READY, osFlagsNoClear, osWaitForever);
 802ab9c:	4b27      	ldr	r3, [pc, #156]	; (802ac3c <StartGyroTask+0xa8>)
 802ab9e:	6818      	ldr	r0, [r3, #0]
 802aba0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802aba4:	2202      	movs	r2, #2
 802aba6:	2101      	movs	r1, #1
 802aba8:	f00c ffae 	bl	8037b08 <osEventFlagsWait>

    /* MPU6050 Initialization*/
    GYRO_Init();
 802abac:	f7fc fc46 	bl	802743c <GYRO_Init>

    /* Infinite loop */
    for (;;) {
        lastWake = _GetTickMS();
 802abb0:	f014 fe11 	bl	803f7d6 <_GetTickMS>
 802abb4:	62f8      	str	r0, [r7, #44]	; 0x2c

        // Read all accelerometer, gyroscope (average)
        decider = GYRO_Decision(25);
 802abb6:	f107 031c 	add.w	r3, r7, #28
 802abba:	2119      	movs	r1, #25
 802abbc:	4618      	mov	r0, r3
 802abbe:	f7fc fd53 	bl	8027668 <GYRO_Decision>
        //		Gyro_Debugger(&decider);

        // Check accelerometer, happens when impact detected
        if (tmp.crash.state != decider.crash.state) {
 802abc2:	7d3a      	ldrb	r2, [r7, #20]
 802abc4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 802abc8:	429a      	cmp	r2, r3
 802abca:	d00b      	beq.n	802abe4 <StartGyroTask+0x50>
            tmp.crash.state = decider.crash.state;
 802abcc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 802abd0:	753b      	strb	r3, [r7, #20]

            VCU.SetEvent(EV_VCU_BIKE_CRASHED, decider.crash.state);
 802abd2:	4b1b      	ldr	r3, [pc, #108]	; (802ac40 <StartGyroTask+0xac>)
 802abd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802abd6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 802abda:	f04f 0004 	mov.w	r0, #4
 802abde:	f04f 0100 	mov.w	r1, #0
 802abe2:	4798      	blx	r3
        }

        // Check gyroscope, happens when fall detected
        if (tmp.fall.state != decider.fall.state) {
 802abe4:	7b3a      	ldrb	r2, [r7, #12]
 802abe6:	7f3b      	ldrb	r3, [r7, #28]
 802abe8:	429a      	cmp	r2, r3
 802abea:	d01d      	beq.n	802ac28 <StartGyroTask+0x94>
            tmp.fall.state = decider.fall.state;
 802abec:	7f3b      	ldrb	r3, [r7, #28]
 802abee:	733b      	strb	r3, [r7, #12]

            if (decider.fall.state) {
 802abf0:	7f3b      	ldrb	r3, [r7, #28]
 802abf2:	2b00      	cmp	r3, #0
 802abf4:	d006      	beq.n	802ac04 <StartGyroTask+0x70>
                osThreadFlagsSet(AudioTaskHandle, EVT_AUDIO_BEEP_START);
 802abf6:	4b13      	ldr	r3, [pc, #76]	; (802ac44 <StartGyroTask+0xb0>)
 802abf8:	681b      	ldr	r3, [r3, #0]
 802abfa:	2102      	movs	r1, #2
 802abfc:	4618      	mov	r0, r3
 802abfe:	f00c fd25 	bl	803764c <osThreadFlagsSet>
 802ac02:	e005      	b.n	802ac10 <StartGyroTask+0x7c>
            } else {
                osThreadFlagsSet(AudioTaskHandle, EVT_AUDIO_BEEP_STOP);
 802ac04:	4b0f      	ldr	r3, [pc, #60]	; (802ac44 <StartGyroTask+0xb0>)
 802ac06:	681b      	ldr	r3, [r3, #0]
 802ac08:	2104      	movs	r1, #4
 802ac0a:	4618      	mov	r0, r3
 802ac0c:	f00c fd1e 	bl	803764c <osThreadFlagsSet>
            }
            VCU.SetEvent(EV_VCU_BIKE_FALLING, decider.fall.state);
 802ac10:	4b0b      	ldr	r3, [pc, #44]	; (802ac40 <StartGyroTask+0xac>)
 802ac12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802ac14:	7f3a      	ldrb	r2, [r7, #28]
 802ac16:	f04f 0002 	mov.w	r0, #2
 802ac1a:	f04f 0100 	mov.w	r1, #0
 802ac1e:	4798      	blx	r3
            _LedWrite(decider.fall.state);
 802ac20:	7f3b      	ldrb	r3, [r7, #28]
 802ac22:	4618      	mov	r0, r3
 802ac24:	f014 fdde 	bl	803f7e4 <_LedWrite>
        }

        // Handle for both event
        if (decider.crash.state || decider.fall.state) {
 802ac28:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 802ac2c:	2b00      	cmp	r3, #0
            // Turn OFF BMS (+ MCU)

        }

        // Periodic interval
        osDelayUntil(lastWake + 100);
 802ac2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802ac30:	3364      	adds	r3, #100	; 0x64
 802ac32:	4618      	mov	r0, r3
 802ac34:	f00c fe7e 	bl	8037934 <osDelayUntil>
        lastWake = _GetTickMS();
 802ac38:	e7ba      	b.n	802abb0 <StartGyroTask+0x1c>
 802ac3a:	bf00      	nop
 802ac3c:	20008644 	.word	0x20008644
 802ac40:	20000228 	.word	0x20000228
 802ac44:	20008a08 	.word	0x20008a08

0802ac48 <StartKeylessTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartKeylessTask */
void StartKeylessTask(void *argument)
{
 802ac48:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 802ac4c:	b086      	sub	sp, #24
 802ac4e:	af00      	add	r7, sp, #0
 802ac50:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartKeylessTask */
    uint32_t notif;
    KLESS_CMD command;

    // wait until ManagerTask done
    osEventFlagsWait(GlobalEventHandle, EVENT_READY, osFlagsNoClear, osWaitForever);
 802ac52:	4b6c      	ldr	r3, [pc, #432]	; (802ae04 <StartKeylessTask+0x1bc>)
 802ac54:	6818      	ldr	r0, [r3, #0]
 802ac56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802ac5a:	2202      	movs	r2, #2
 802ac5c:	2101      	movs	r1, #1
 802ac5e:	f00c ff53 	bl	8037b08 <osEventFlagsWait>

    // initialization
    AES_Init();
 802ac62:	f7f8 fe41 	bl	80238e8 <AES_Init>
    KLESS_Init();
 802ac66:	f7fd f809 	bl	8027c7c <KLESS_Init>

    /* Infinite loop */
    for (;;) {
        // check if has new can message
        notif = osThreadFlagsWait(EVT_MASK, osFlagsWaitAny, 100);
 802ac6a:	2264      	movs	r2, #100	; 0x64
 802ac6c:	2100      	movs	r1, #0
 802ac6e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 802ac72:	f00c fd9d 	bl	80377b0 <osThreadFlagsWait>
 802ac76:	6138      	str	r0, [r7, #16]
        // proceed event
        if (_RTOS_ValidThreadFlag(notif)) {
 802ac78:	6938      	ldr	r0, [r7, #16]
 802ac7a:	f014 fe05 	bl	803f888 <_RTOS_ValidThreadFlag>
 802ac7e:	4603      	mov	r3, r0
 802ac80:	2b00      	cmp	r3, #0
 802ac82:	f000 80bb 	beq.w	802adfc <StartKeylessTask+0x1b4>
            // handle reset key & id
            if (notif & EVT_KEYLESS_RESET) {
 802ac86:	693b      	ldr	r3, [r7, #16]
 802ac88:	469b      	mov	fp, r3
 802ac8a:	f04f 0c00 	mov.w	ip, #0
 802ac8e:	f04f 0104 	mov.w	r1, #4
 802ac92:	f04f 0200 	mov.w	r2, #0
 802ac96:	ea0b 0301 	and.w	r3, fp, r1
 802ac9a:	ea0c 0402 	and.w	r4, ip, r2
 802ac9e:	4323      	orrs	r3, r4
 802aca0:	d003      	beq.n	802acaa <StartKeylessTask+0x62>
                AES_Init();
 802aca2:	f7f8 fe21 	bl	80238e8 <AES_Init>
                KLESS_Init();
 802aca6:	f7fc ffe9 	bl	8027c7c <KLESS_Init>
            }

            // handle incoming payload
            if (notif & EVT_KEYLESS_RX_IT) {
 802acaa:	693b      	ldr	r3, [r7, #16]
 802acac:	469b      	mov	fp, r3
 802acae:	f04f 0c00 	mov.w	ip, #0
 802acb2:	f04f 0101 	mov.w	r1, #1
 802acb6:	f04f 0200 	mov.w	r2, #0
 802acba:	ea0b 0301 	and.w	r3, fp, r1
 802acbe:	ea0c 0402 	and.w	r4, ip, r2
 802acc2:	4323      	orrs	r3, r4
 802acc4:	d07a      	beq.n	802adbc <StartKeylessTask+0x174>
                KLESS_Debugger();
 802acc6:	f7fd f935 	bl	8027f34 <KLESS_Debugger>

                // process
                if (KLESS_ValidateCommand(&command)) {
 802acca:	f107 030f 	add.w	r3, r7, #15
 802acce:	4618      	mov	r0, r3
 802acd0:	f7fd f834 	bl	8027d3c <KLESS_ValidateCommand>
 802acd4:	4603      	mov	r3, r0
 802acd6:	2b00      	cmp	r3, #0
 802acd8:	d06c      	beq.n	802adb4 <StartKeylessTask+0x16c>
                    // handle command
                    switch (command) {
 802acda:	7bfb      	ldrb	r3, [r7, #15]
 802acdc:	2b01      	cmp	r3, #1
 802acde:	d00d      	beq.n	802acfc <StartKeylessTask+0xb4>
 802ace0:	2b02      	cmp	r3, #2
 802ace2:	d032      	beq.n	802ad4a <StartKeylessTask+0x102>
 802ace4:	2b00      	cmp	r3, #0
 802ace6:	d000      	beq.n	802acea <StartKeylessTask+0xa2>
                            _DelayMS(100);
                            HAL_GPIO_WritePin(EXT_SOLENOID_PWR_GPIO_Port, EXT_SOLENOID_PWR_Pin, 0);

                            break;
                        default:
                            break;
 802ace8:	e040      	b.n	802ad6c <StartKeylessTask+0x124>
                            LOG_StrLn("NRF:Command = PING");
 802acea:	4847      	ldr	r0, [pc, #284]	; (802ae08 <StartKeylessTask+0x1c0>)
 802acec:	f013 fb9a 	bl	803e424 <LOG_StrLn>
                            VCU.d.tick.keyless = _GetTickMS();
 802acf0:	f014 fd71 	bl	803f7d6 <_GetTickMS>
 802acf4:	4602      	mov	r2, r0
 802acf6:	4b45      	ldr	r3, [pc, #276]	; (802ae0c <StartKeylessTask+0x1c4>)
 802acf8:	63da      	str	r2, [r3, #60]	; 0x3c
                            break;
 802acfa:	e037      	b.n	802ad6c <StartKeylessTask+0x124>
                            LOG_StrLn("NRF:Command = ALARM");
 802acfc:	4844      	ldr	r0, [pc, #272]	; (802ae10 <StartKeylessTask+0x1c8>)
 802acfe:	f013 fb91 	bl	803e424 <LOG_StrLn>
                            for (uint8_t i = 0; i < 2; i++) {
 802ad02:	2300      	movs	r3, #0
 802ad04:	75fb      	strb	r3, [r7, #23]
 802ad06:	e01c      	b.n	802ad42 <StartKeylessTask+0xfa>
                                SW.runner.hazard = 1;
 802ad08:	4b42      	ldr	r3, [pc, #264]	; (802ae14 <StartKeylessTask+0x1cc>)
 802ad0a:	2201      	movs	r2, #1
 802ad0c:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
                                HAL_GPIO_WritePin(EXT_HORN_PWR_GPIO_Port, EXT_HORN_PWR_Pin, 1);
 802ad10:	2201      	movs	r2, #1
 802ad12:	f44f 7180 	mov.w	r1, #256	; 0x100
 802ad16:	4840      	ldr	r0, [pc, #256]	; (802ae18 <StartKeylessTask+0x1d0>)
 802ad18:	f005 f988 	bl	803002c <HAL_GPIO_WritePin>
                                _DelayMS(200);
 802ad1c:	20c8      	movs	r0, #200	; 0xc8
 802ad1e:	f014 fd4f 	bl	803f7c0 <_DelayMS>
                                SW.runner.hazard = 0;
 802ad22:	4b3c      	ldr	r3, [pc, #240]	; (802ae14 <StartKeylessTask+0x1cc>)
 802ad24:	2200      	movs	r2, #0
 802ad26:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
                                HAL_GPIO_WritePin(EXT_HORN_PWR_GPIO_Port, EXT_HORN_PWR_Pin, 0);
 802ad2a:	2200      	movs	r2, #0
 802ad2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 802ad30:	4839      	ldr	r0, [pc, #228]	; (802ae18 <StartKeylessTask+0x1d0>)
 802ad32:	f005 f97b 	bl	803002c <HAL_GPIO_WritePin>
                                _DelayMS(100);
 802ad36:	2064      	movs	r0, #100	; 0x64
 802ad38:	f014 fd42 	bl	803f7c0 <_DelayMS>
                            for (uint8_t i = 0; i < 2; i++) {
 802ad3c:	7dfb      	ldrb	r3, [r7, #23]
 802ad3e:	3301      	adds	r3, #1
 802ad40:	75fb      	strb	r3, [r7, #23]
 802ad42:	7dfb      	ldrb	r3, [r7, #23]
 802ad44:	2b01      	cmp	r3, #1
 802ad46:	d9df      	bls.n	802ad08 <StartKeylessTask+0xc0>
                            break;
 802ad48:	e010      	b.n	802ad6c <StartKeylessTask+0x124>
                            LOG_StrLn("NRF:Command = SEAT");
 802ad4a:	4834      	ldr	r0, [pc, #208]	; (802ae1c <StartKeylessTask+0x1d4>)
 802ad4c:	f013 fb6a 	bl	803e424 <LOG_StrLn>
                            HAL_GPIO_WritePin(EXT_SOLENOID_PWR_GPIO_Port, EXT_SOLENOID_PWR_Pin, 1);
 802ad50:	2201      	movs	r2, #1
 802ad52:	2101      	movs	r1, #1
 802ad54:	4832      	ldr	r0, [pc, #200]	; (802ae20 <StartKeylessTask+0x1d8>)
 802ad56:	f005 f969 	bl	803002c <HAL_GPIO_WritePin>
                            _DelayMS(100);
 802ad5a:	2064      	movs	r0, #100	; 0x64
 802ad5c:	f014 fd30 	bl	803f7c0 <_DelayMS>
                            HAL_GPIO_WritePin(EXT_SOLENOID_PWR_GPIO_Port, EXT_SOLENOID_PWR_Pin, 0);
 802ad60:	2200      	movs	r2, #0
 802ad62:	2101      	movs	r1, #1
 802ad64:	482e      	ldr	r0, [pc, #184]	; (802ae20 <StartKeylessTask+0x1d8>)
 802ad66:	f005 f961 	bl	803002c <HAL_GPIO_WritePin>
                            break;
 802ad6a:	bf00      	nop
                    }

                    // valid command indicator
                    osThreadFlagsSet(AudioTaskHandle, EVT_AUDIO_BEEP_START);
 802ad6c:	4b2d      	ldr	r3, [pc, #180]	; (802ae24 <StartKeylessTask+0x1dc>)
 802ad6e:	681b      	ldr	r3, [r3, #0]
 802ad70:	2102      	movs	r1, #2
 802ad72:	4618      	mov	r0, r3
 802ad74:	f00c fc6a 	bl	803764c <osThreadFlagsSet>
                    for (uint8_t i = 0; i < (command + 1); i++) {
 802ad78:	2300      	movs	r3, #0
 802ad7a:	75bb      	strb	r3, [r7, #22]
 802ad7c:	e00c      	b.n	802ad98 <StartKeylessTask+0x150>
                        _LedToggle();
 802ad7e:	f014 fd43 	bl	803f808 <_LedToggle>

                        _DelayMS((command + 1) * 50);
 802ad82:	7bfb      	ldrb	r3, [r7, #15]
 802ad84:	3301      	adds	r3, #1
 802ad86:	2232      	movs	r2, #50	; 0x32
 802ad88:	fb02 f303 	mul.w	r3, r2, r3
 802ad8c:	4618      	mov	r0, r3
 802ad8e:	f014 fd17 	bl	803f7c0 <_DelayMS>
                    for (uint8_t i = 0; i < (command + 1); i++) {
 802ad92:	7dbb      	ldrb	r3, [r7, #22]
 802ad94:	3301      	adds	r3, #1
 802ad96:	75bb      	strb	r3, [r7, #22]
 802ad98:	7dba      	ldrb	r2, [r7, #22]
 802ad9a:	7bfb      	ldrb	r3, [r7, #15]
 802ad9c:	3301      	adds	r3, #1
 802ad9e:	429a      	cmp	r2, r3
 802ada0:	dbed      	blt.n	802ad7e <StartKeylessTask+0x136>
                    }
                    _LedWrite(0);
 802ada2:	2000      	movs	r0, #0
 802ada4:	f014 fd1e 	bl	803f7e4 <_LedWrite>
                    osThreadFlagsSet(AudioTaskHandle, EVT_AUDIO_BEEP_STOP);
 802ada8:	4b1e      	ldr	r3, [pc, #120]	; (802ae24 <StartKeylessTask+0x1dc>)
 802adaa:	681b      	ldr	r3, [r3, #0]
 802adac:	2104      	movs	r1, #4
 802adae:	4618      	mov	r0, r3
 802adb0:	f00c fc4c 	bl	803764c <osThreadFlagsSet>
                }

                // reset pending flag
                osThreadFlagsClear(EVT_MASK);
 802adb4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 802adb8:	f00c fcaa 	bl	8037710 <osThreadFlagsClear>
            }

            // handle Pairing
            if (notif & EVT_KEYLESS_PAIRING) {
 802adbc:	693b      	ldr	r3, [r7, #16]
 802adbe:	469b      	mov	fp, r3
 802adc0:	f04f 0c00 	mov.w	ip, #0
 802adc4:	f04f 0102 	mov.w	r1, #2
 802adc8:	f04f 0200 	mov.w	r2, #0
 802adcc:	ea0b 0301 	and.w	r3, fp, r1
 802add0:	ea0c 0402 	and.w	r4, ip, r2
 802add4:	4323      	orrs	r3, r4
 802add6:	d011      	beq.n	802adfc <StartKeylessTask+0x1b4>
                if (KLESS_Pairing()) {
 802add8:	f7fd f830 	bl	8027e3c <KLESS_Pairing>
 802addc:	4603      	mov	r3, r0
 802adde:	2b00      	cmp	r3, #0
 802ade0:	d006      	beq.n	802adf0 <StartKeylessTask+0x1a8>
                    osThreadFlagsSet(CommandTaskHandle, EVT_COMMAND_OK);
 802ade2:	4b11      	ldr	r3, [pc, #68]	; (802ae28 <StartKeylessTask+0x1e0>)
 802ade4:	681b      	ldr	r3, [r3, #0]
 802ade6:	2102      	movs	r1, #2
 802ade8:	4618      	mov	r0, r3
 802adea:	f00c fc2f 	bl	803764c <osThreadFlagsSet>
 802adee:	e005      	b.n	802adfc <StartKeylessTask+0x1b4>
                } else {
                    osThreadFlagsSet(CommandTaskHandle, EVT_COMMAND_ERROR);
 802adf0:	4b0d      	ldr	r3, [pc, #52]	; (802ae28 <StartKeylessTask+0x1e0>)
 802adf2:	681b      	ldr	r3, [r3, #0]
 802adf4:	2101      	movs	r1, #1
 802adf6:	4618      	mov	r0, r3
 802adf8:	f00c fc28 	bl	803764c <osThreadFlagsSet>
                }
            }
        }

        // update state
        KLESS_Refresh();
 802adfc:	f7fd f8b0 	bl	8027f60 <KLESS_Refresh>
        notif = osThreadFlagsWait(EVT_MASK, osFlagsWaitAny, 100);
 802ae00:	e733      	b.n	802ac6a <StartKeylessTask+0x22>
 802ae02:	bf00      	nop
 802ae04:	20008644 	.word	0x20008644
 802ae08:	08043a64 	.word	0x08043a64
 802ae0c:	20000228 	.word	0x20000228
 802ae10:	08043a78 	.word	0x08043a78
 802ae14:	20000004 	.word	0x20000004
 802ae18:	40020800 	.word	0x40020800
 802ae1c:	08043a8c 	.word	0x08043a8c
 802ae20:	40020400 	.word	0x40020400
 802ae24:	20008a08 	.word	0x20008a08
 802ae28:	2000884c 	.word	0x2000884c

0802ae2c <StartFingerTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartFingerTask */
void StartFingerTask(void *argument)
{
 802ae2c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 802ae30:	b086      	sub	sp, #24
 802ae32:	af00      	add	r7, sp, #0
 802ae34:	6078      	str	r0, [r7, #4]
    uint32_t notif;
    uint8_t driver, p;
    int8_t id;

    // wait until ManagerTask done
    osEventFlagsWait(GlobalEventHandle, EVENT_READY, osFlagsNoClear, osWaitForever);
 802ae36:	4b57      	ldr	r3, [pc, #348]	; (802af94 <StartFingerTask+0x168>)
 802ae38:	6818      	ldr	r0, [r3, #0]
 802ae3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802ae3e:	2202      	movs	r2, #2
 802ae40:	2101      	movs	r1, #1
 802ae42:	f00c fe61 	bl	8037b08 <osEventFlagsWait>

    // Initialisation
    Finger_Init();
 802ae46:	f7fb ff8d 	bl	8026d64 <Finger_Init>

    /* Infinite loop */
    for (;;) {
        // check if user put finger
        notif = osThreadFlagsWait(EVT_MASK, osFlagsWaitAny, 100);
 802ae4a:	2264      	movs	r2, #100	; 0x64
 802ae4c:	2100      	movs	r1, #0
 802ae4e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 802ae52:	f00c fcad 	bl	80377b0 <osThreadFlagsWait>
 802ae56:	6138      	str	r0, [r7, #16]
        // proceed event
        if (_RTOS_ValidThreadFlag(notif)) {
 802ae58:	6938      	ldr	r0, [r7, #16]
 802ae5a:	f014 fd15 	bl	803f888 <_RTOS_ValidThreadFlag>
 802ae5e:	4603      	mov	r3, r0
 802ae60:	2b00      	cmp	r3, #0
 802ae62:	d0f2      	beq.n	802ae4a <StartFingerTask+0x1e>
            // Scan existing finger
            if (notif & EVT_FINGER_PLACED) {
 802ae64:	693b      	ldr	r3, [r7, #16]
 802ae66:	469b      	mov	fp, r3
 802ae68:	f04f 0c00 	mov.w	ip, #0
 802ae6c:	f04f 0101 	mov.w	r1, #1
 802ae70:	f04f 0200 	mov.w	r2, #0
 802ae74:	ea0b 0301 	and.w	r3, fp, r1
 802ae78:	ea0c 0402 	and.w	r4, ip, r2
 802ae7c:	4323      	orrs	r3, r4
 802ae7e:	d021      	beq.n	802aec4 <StartFingerTask+0x98>
                id = Finger_AuthFast();
 802ae80:	f7fc f998 	bl	80271b4 <Finger_AuthFast>
 802ae84:	4603      	mov	r3, r0
 802ae86:	75bb      	strb	r3, [r7, #22]
                // Finger is registered
                if (id >= 0) {
 802ae88:	f997 3016 	ldrsb.w	r3, [r7, #22]
 802ae8c:	2b00      	cmp	r3, #0
 802ae8e:	db19      	blt.n	802aec4 <StartFingerTask+0x98>
                    // FIXME: use vehicle_state
                    VCU.d.state.knob = !VCU.d.state.knob;
 802ae90:	4b41      	ldr	r3, [pc, #260]	; (802af98 <StartFingerTask+0x16c>)
 802ae92:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 802ae96:	2b00      	cmp	r3, #0
 802ae98:	bf0c      	ite	eq
 802ae9a:	2301      	moveq	r3, #1
 802ae9c:	2300      	movne	r3, #0
 802ae9e:	b2db      	uxtb	r3, r3
 802aea0:	461a      	mov	r2, r3
 802aea2:	4b3d      	ldr	r3, [pc, #244]	; (802af98 <StartFingerTask+0x16c>)
 802aea4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

                    // Finger Heart-Beat
                    if (!VCU.d.state.knob) {
 802aea8:	4b3b      	ldr	r3, [pc, #236]	; (802af98 <StartFingerTask+0x16c>)
 802aeaa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 802aeae:	2b00      	cmp	r3, #0
 802aeb0:	d101      	bne.n	802aeb6 <StartFingerTask+0x8a>
                        id = DRIVER_ID_NONE;
 802aeb2:	23ff      	movs	r3, #255	; 0xff
 802aeb4:	75bb      	strb	r3, [r7, #22]
                    }
                    VCU.d.driver_id = id;
 802aeb6:	7dba      	ldrb	r2, [r7, #22]
 802aeb8:	4b37      	ldr	r3, [pc, #220]	; (802af98 <StartFingerTask+0x16c>)
 802aeba:	711a      	strb	r2, [r3, #4]

                    // Handle bounce effect
                    _DelayMS(5000);
 802aebc:	f241 3088 	movw	r0, #5000	; 0x1388
 802aec0:	f014 fc7e 	bl	803f7c0 <_DelayMS>
                }
            }

            if (notif & (EVT_FINGER_ADD | EVT_FINGER_DEL | EVT_FINGER_RST)) {
 802aec4:	693b      	ldr	r3, [r7, #16]
 802aec6:	469b      	mov	fp, r3
 802aec8:	f04f 0c00 	mov.w	ip, #0
 802aecc:	f04f 010e 	mov.w	r1, #14
 802aed0:	f04f 0200 	mov.w	r2, #0
 802aed4:	ea0b 0301 	and.w	r3, fp, r1
 802aed8:	ea0c 0402 	and.w	r4, ip, r2
 802aedc:	4323      	orrs	r3, r4
 802aede:	d053      	beq.n	802af88 <StartFingerTask+0x15c>
                // get driver value
                status = osMessageQueueGet(DriverQueueHandle, &driver, NULL, 0U);
 802aee0:	4b2e      	ldr	r3, [pc, #184]	; (802af9c <StartFingerTask+0x170>)
 802aee2:	6818      	ldr	r0, [r3, #0]
 802aee4:	f107 010b 	add.w	r1, r7, #11
 802aee8:	2300      	movs	r3, #0
 802aeea:	2200      	movs	r2, #0
 802aeec:	f00d f8c4 	bl	8038078 <osMessageQueueGet>
 802aef0:	60f8      	str	r0, [r7, #12]

                if (status == osOK) {
 802aef2:	68fb      	ldr	r3, [r7, #12]
 802aef4:	2b00      	cmp	r3, #0
 802aef6:	d147      	bne.n	802af88 <StartFingerTask+0x15c>
                    if (notif & EVT_FINGER_ADD) {
 802aef8:	693b      	ldr	r3, [r7, #16]
 802aefa:	469b      	mov	fp, r3
 802aefc:	f04f 0c00 	mov.w	ip, #0
 802af00:	f04f 0102 	mov.w	r1, #2
 802af04:	f04f 0200 	mov.w	r2, #0
 802af08:	ea0b 0301 	and.w	r3, fp, r1
 802af0c:	ea0c 0402 	and.w	r4, ip, r2
 802af10:	4323      	orrs	r3, r4
 802af12:	d006      	beq.n	802af22 <StartFingerTask+0xf6>
                        // Add new finger
                        p = Finger_Enroll(driver);
 802af14:	7afb      	ldrb	r3, [r7, #11]
 802af16:	4618      	mov	r0, r3
 802af18:	f7fb ff54 	bl	8026dc4 <Finger_Enroll>
 802af1c:	4603      	mov	r3, r0
 802af1e:	75fb      	strb	r3, [r7, #23]
 802af20:	e026      	b.n	802af70 <StartFingerTask+0x144>
                    } else if (notif & EVT_FINGER_DEL) {
 802af22:	693b      	ldr	r3, [r7, #16]
 802af24:	469b      	mov	fp, r3
 802af26:	f04f 0c00 	mov.w	ip, #0
 802af2a:	f04f 0104 	mov.w	r1, #4
 802af2e:	f04f 0200 	mov.w	r2, #0
 802af32:	ea0b 0301 	and.w	r3, fp, r1
 802af36:	ea0c 0402 	and.w	r4, ip, r2
 802af3a:	4323      	orrs	r3, r4
 802af3c:	d006      	beq.n	802af4c <StartFingerTask+0x120>
                        // Delete existing finger
                        p = Finger_DeleteID(driver);
 802af3e:	7afb      	ldrb	r3, [r7, #11]
 802af40:	4618      	mov	r0, r3
 802af42:	f7fc f8d3 	bl	80270ec <Finger_DeleteID>
 802af46:	4603      	mov	r3, r0
 802af48:	75fb      	strb	r3, [r7, #23]
 802af4a:	e011      	b.n	802af70 <StartFingerTask+0x144>
                    } else if (notif & EVT_FINGER_RST) {
 802af4c:	693b      	ldr	r3, [r7, #16]
 802af4e:	469b      	mov	fp, r3
 802af50:	f04f 0c00 	mov.w	ip, #0
 802af54:	f04f 0108 	mov.w	r1, #8
 802af58:	f04f 0200 	mov.w	r2, #0
 802af5c:	ea0b 0301 	and.w	r3, fp, r1
 802af60:	ea0c 0402 	and.w	r4, ip, r2
 802af64:	4323      	orrs	r3, r4
 802af66:	d003      	beq.n	802af70 <StartFingerTask+0x144>
                        // Reset all finger database
                        p = Finger_EmptyDatabase();
 802af68:	f7fc f90e 	bl	8027188 <Finger_EmptyDatabase>
 802af6c:	4603      	mov	r3, r0
 802af6e:	75fb      	strb	r3, [r7, #23]
                    }

                    // handle response
                    osThreadFlagsSet(CommandTaskHandle, p ? EVT_COMMAND_OK : EVT_COMMAND_ERROR);
 802af70:	4b0b      	ldr	r3, [pc, #44]	; (802afa0 <StartFingerTask+0x174>)
 802af72:	681a      	ldr	r2, [r3, #0]
 802af74:	7dfb      	ldrb	r3, [r7, #23]
 802af76:	2b00      	cmp	r3, #0
 802af78:	d001      	beq.n	802af7e <StartFingerTask+0x152>
 802af7a:	2302      	movs	r3, #2
 802af7c:	e000      	b.n	802af80 <StartFingerTask+0x154>
 802af7e:	2301      	movs	r3, #1
 802af80:	4619      	mov	r1, r3
 802af82:	4610      	mov	r0, r2
 802af84:	f00c fb62 	bl	803764c <osThreadFlagsSet>
                }
            }

            // reset pending flag
            osThreadFlagsClear(EVT_MASK);
 802af88:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 802af8c:	f00c fbc0 	bl	8037710 <osThreadFlagsClear>
        notif = osThreadFlagsWait(EVT_MASK, osFlagsWaitAny, 100);
 802af90:	e75b      	b.n	802ae4a <StartFingerTask+0x1e>
 802af92:	bf00      	nop
 802af94:	20008644 	.word	0x20008644
 802af98:	20000228 	.word	0x20000228
 802af9c:	20008760 	.word	0x20008760
 802afa0:	2000884c 	.word	0x2000884c

0802afa4 <StartAudioTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartAudioTask */
void StartAudioTask(void *argument)
{
 802afa4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 802afa8:	b084      	sub	sp, #16
 802afaa:	af00      	add	r7, sp, #0
 802afac:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAudioTask */
    uint32_t notif;

    // wait until ManagerTask done
    osEventFlagsWait(GlobalEventHandle, EVENT_READY, osFlagsNoClear, osWaitForever);
 802afae:	4b3e      	ldr	r3, [pc, #248]	; (802b0a8 <StartAudioTask+0x104>)
 802afb0:	6818      	ldr	r0, [r3, #0]
 802afb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802afb6:	2202      	movs	r2, #2
 802afb8:	2101      	movs	r1, #1
 802afba:	f00c fda5 	bl	8037b08 <osEventFlagsWait>

    /* Initialize Wave player (Codec, DMA, I2C) */
    AUDIO_Init();
 802afbe:	f7fb fc65 	bl	802688c <AUDIO_Init>
    // Play wave loop forever, hand-over to DMA, so CPU is free
    AUDIO_Play();
 802afc2:	f7fb fc9b 	bl	80268fc <AUDIO_Play>

    /* Infinite loop */
    for (;;) {
        // wait with timeout
        notif = osThreadFlagsWait(EVT_MASK, osFlagsWaitAny, 100);
 802afc6:	2264      	movs	r2, #100	; 0x64
 802afc8:	2100      	movs	r1, #0
 802afca:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 802afce:	f00c fbef 	bl	80377b0 <osThreadFlagsWait>
 802afd2:	60f8      	str	r0, [r7, #12]
        if (_RTOS_ValidThreadFlag(notif)) {
 802afd4:	68f8      	ldr	r0, [r7, #12]
 802afd6:	f014 fc57 	bl	803f888 <_RTOS_ValidThreadFlag>
 802afda:	4603      	mov	r3, r0
 802afdc:	2b00      	cmp	r3, #0
 802afde:	d05c      	beq.n	802b09a <StartAudioTask+0xf6>
            // Beep command
            if (notif & EVT_AUDIO_BEEP) {
 802afe0:	68fb      	ldr	r3, [r7, #12]
 802afe2:	469b      	mov	fp, r3
 802afe4:	f04f 0c00 	mov.w	ip, #0
 802afe8:	f04f 0101 	mov.w	r1, #1
 802afec:	f04f 0200 	mov.w	r2, #0
 802aff0:	ea0b 0301 	and.w	r3, fp, r1
 802aff4:	ea0c 0402 	and.w	r4, ip, r2
 802aff8:	4323      	orrs	r3, r4
 802affa:	d00a      	beq.n	802b012 <StartAudioTask+0x6e>
                // Beep
                AUDIO_BeepPlay(BEEP_FREQ_2000_HZ, 250);
 802affc:	21fa      	movs	r1, #250	; 0xfa
 802affe:	200e      	movs	r0, #14
 802b000:	f7fb fca2 	bl	8026948 <AUDIO_BeepPlay>
                _DelayMS(250);
 802b004:	20fa      	movs	r0, #250	; 0xfa
 802b006:	f014 fbdb 	bl	803f7c0 <_DelayMS>
                AUDIO_BeepPlay(BEEP_FREQ_2000_HZ, 250);
 802b00a:	21fa      	movs	r1, #250	; 0xfa
 802b00c:	200e      	movs	r0, #14
 802b00e:	f7fb fc9b 	bl	8026948 <AUDIO_BeepPlay>
            }
            // Long-Beep Command
            if (notif & EVT_AUDIO_BEEP_START) {
 802b012:	68fb      	ldr	r3, [r7, #12]
 802b014:	469b      	mov	fp, r3
 802b016:	f04f 0c00 	mov.w	ip, #0
 802b01a:	f04f 0102 	mov.w	r1, #2
 802b01e:	f04f 0200 	mov.w	r2, #0
 802b022:	ea0b 0301 	and.w	r3, fp, r1
 802b026:	ea0c 0402 	and.w	r4, ip, r2
 802b02a:	4323      	orrs	r3, r4
 802b02c:	d003      	beq.n	802b036 <StartAudioTask+0x92>
                AUDIO_BeepPlay(BEEP_FREQ_2000_HZ, 0);
 802b02e:	2100      	movs	r1, #0
 802b030:	200e      	movs	r0, #14
 802b032:	f7fb fc89 	bl	8026948 <AUDIO_BeepPlay>
            }
            if (notif & EVT_AUDIO_BEEP_STOP) {
 802b036:	68fb      	ldr	r3, [r7, #12]
 802b038:	469b      	mov	fp, r3
 802b03a:	f04f 0c00 	mov.w	ip, #0
 802b03e:	f04f 0104 	mov.w	r1, #4
 802b042:	f04f 0200 	mov.w	r2, #0
 802b046:	ea0b 0301 	and.w	r3, fp, r1
 802b04a:	ea0c 0402 	and.w	r4, ip, r2
 802b04e:	4323      	orrs	r3, r4
 802b050:	d001      	beq.n	802b056 <StartAudioTask+0xb2>
                AUDIO_BeepStop();
 802b052:	f7fb fca0 	bl	8026996 <AUDIO_BeepStop>
            }
            // Mute command
            if (notif & EVT_AUDIO_MUTE_ON) {
 802b056:	68fb      	ldr	r3, [r7, #12]
 802b058:	469b      	mov	fp, r3
 802b05a:	f04f 0c00 	mov.w	ip, #0
 802b05e:	f04f 0108 	mov.w	r1, #8
 802b062:	f04f 0200 	mov.w	r2, #0
 802b066:	ea0b 0301 	and.w	r3, fp, r1
 802b06a:	ea0c 0402 	and.w	r4, ip, r2
 802b06e:	4323      	orrs	r3, r4
 802b070:	d002      	beq.n	802b078 <StartAudioTask+0xd4>
                AUDIO_OUT_SetMute(AUDIO_MUTE_ON);
 802b072:	2001      	movs	r0, #1
 802b074:	f7fb fcc4 	bl	8026a00 <AUDIO_OUT_SetMute>
            }
            if (notif & EVT_AUDIO_MUTE_OFF) {
 802b078:	68fb      	ldr	r3, [r7, #12]
 802b07a:	469b      	mov	fp, r3
 802b07c:	f04f 0c00 	mov.w	ip, #0
 802b080:	f04f 0110 	mov.w	r1, #16
 802b084:	f04f 0200 	mov.w	r2, #0
 802b088:	ea0b 0301 	and.w	r3, fp, r1
 802b08c:	ea0c 0402 	and.w	r4, ip, r2
 802b090:	4323      	orrs	r3, r4
 802b092:	d002      	beq.n	802b09a <StartAudioTask+0xf6>
                AUDIO_OUT_SetMute(AUDIO_MUTE_OFF);
 802b094:	2000      	movs	r0, #0
 802b096:	f7fb fcb3 	bl	8026a00 <AUDIO_OUT_SetMute>
            }
        }

        // update volume
        AUDIO_OUT_SetVolume(VCU.d.volume);
 802b09a:	4b04      	ldr	r3, [pc, #16]	; (802b0ac <StartAudioTask+0x108>)
 802b09c:	7a1b      	ldrb	r3, [r3, #8]
 802b09e:	4618      	mov	r0, r3
 802b0a0:	f7fb fc9a 	bl	80269d8 <AUDIO_OUT_SetVolume>
        notif = osThreadFlagsWait(EVT_MASK, osFlagsWaitAny, 100);
 802b0a4:	e78f      	b.n	802afc6 <StartAudioTask+0x22>
 802b0a6:	bf00      	nop
 802b0a8:	20008644 	.word	0x20008644
 802b0ac:	20000228 	.word	0x20000228

0802b0b0 <StartSwitchTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSwitchTask */
void StartSwitchTask(void *argument)
{
 802b0b0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 802b0b4:	b084      	sub	sp, #16
 802b0b6:	af00      	add	r7, sp, #0
 802b0b8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSwitchTask */
    uint32_t notif;

    // wait until ManagerTask done
    osEventFlagsWait(GlobalEventHandle, EVENT_READY, osFlagsNoClear, osWaitForever);
 802b0ba:	4b37      	ldr	r3, [pc, #220]	; (802b198 <StartSwitchTask+0xe8>)
 802b0bc:	6818      	ldr	r0, [r3, #0]
 802b0be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802b0c2:	2202      	movs	r2, #2
 802b0c4:	2101      	movs	r1, #1
 802b0c6:	f00c fd1f 	bl	8037b08 <osEventFlagsWait>

    // Initialise
    HBAR_ReadStates();
 802b0ca:	f7fc fb61 	bl	8027790 <HBAR_ReadStates>
    // Check GPIOs state
    VCU.CheckMainPower();
 802b0ce:	4b33      	ldr	r3, [pc, #204]	; (802b19c <StartSwitchTask+0xec>)
 802b0d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802b0d2:	4798      	blx	r3
    VCU.d.state.knob = HAL_GPIO_ReadPin(EXT_KNOB_IRQ_GPIO_Port, EXT_KNOB_IRQ_Pin);
 802b0d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 802b0d8:	4831      	ldr	r0, [pc, #196]	; (802b1a0 <StartSwitchTask+0xf0>)
 802b0da:	f004 ff8f 	bl	802fffc <HAL_GPIO_ReadPin>
 802b0de:	4603      	mov	r3, r0
 802b0e0:	461a      	mov	r2, r3
 802b0e2:	4b2e      	ldr	r3, [pc, #184]	; (802b19c <StartSwitchTask+0xec>)
 802b0e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Infinite loop */
    for (;;) {
        // wait forever
        notif = osThreadFlagsWait(EVT_MASK, osFlagsWaitAny | osFlagsNoClear, 500);
 802b0e8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 802b0ec:	2102      	movs	r1, #2
 802b0ee:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 802b0f2:	f00c fb5d 	bl	80377b0 <osThreadFlagsWait>
 802b0f6:	60f8      	str	r0, [r7, #12]
        if (_RTOS_ValidThreadFlag(notif)) {
 802b0f8:	68f8      	ldr	r0, [r7, #12]
 802b0fa:	f014 fbc5 	bl	803f888 <_RTOS_ValidThreadFlag>
 802b0fe:	4603      	mov	r3, r0
 802b100:	2b00      	cmp	r3, #0
 802b102:	d045      	beq.n	802b190 <StartSwitchTask+0xe0>
            // handle bounce effect
            _DelayMS(50);
 802b104:	2032      	movs	r0, #50	; 0x32
 802b106:	f014 fb5b 	bl	803f7c0 <_DelayMS>
            osThreadFlagsClear(EVT_MASK);
 802b10a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 802b10e:	f00c faff 	bl	8037710 <osThreadFlagsClear>

            // Handle switch EXTI interrupt
            if (notif & EVT_SWITCH_TRIGGERED) {
 802b112:	68fb      	ldr	r3, [r7, #12]
 802b114:	469b      	mov	fp, r3
 802b116:	f04f 0c00 	mov.w	ip, #0
 802b11a:	f04f 0101 	mov.w	r1, #1
 802b11e:	f04f 0200 	mov.w	r2, #0
 802b122:	ea0b 0301 	and.w	r3, fp, r1
 802b126:	ea0c 0402 	and.w	r4, ip, r2
 802b12a:	4323      	orrs	r3, r4
 802b12c:	d018      	beq.n	802b160 <StartSwitchTask+0xb0>
                // Read all (to handle multiple switch change at the same time)
                HBAR_ReadStates();
 802b12e:	f7fc fb2f 	bl	8027790 <HBAR_ReadStates>

                // handle select & set: timer
                HBAR_TimerSelectSet();
 802b132:	f7fc fb93 	bl	802785c <HBAR_TimerSelectSet>

                // Only handle Select & Set when in non-reverse
                if (!SW.list[SW_K_REVERSE].state) {
 802b136:	4b1b      	ldr	r3, [pc, #108]	; (802b1a4 <StartSwitchTask+0xf4>)
 802b138:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 802b13c:	2b00      	cmp	r3, #0
 802b13e:	d10f      	bne.n	802b160 <StartSwitchTask+0xb0>
                    // restore previous Mode
                    HBAR_RestoreMode();
 802b140:	f7fc fb52 	bl	80277e8 <HBAR_RestoreMode>

                    // handle Select & Set
                    if (SW.list[SW_K_SELECT].state) {
 802b144:	4b17      	ldr	r3, [pc, #92]	; (802b1a4 <StartSwitchTask+0xf4>)
 802b146:	7f1b      	ldrb	r3, [r3, #28]
 802b148:	2b00      	cmp	r3, #0
 802b14a:	d002      	beq.n	802b152 <StartSwitchTask+0xa2>
                        // handle select key
                        HBAR_RunSelect();
 802b14c:	f7fc fc06 	bl	802795c <HBAR_RunSelect>
 802b150:	e006      	b.n	802b160 <StartSwitchTask+0xb0>
                    } else if (SW.list[SW_K_SET].state) {
 802b152:	4b14      	ldr	r3, [pc, #80]	; (802b1a4 <StartSwitchTask+0xf4>)
 802b154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802b158:	2b00      	cmp	r3, #0
 802b15a:	d001      	beq.n	802b160 <StartSwitchTask+0xb0>
                        // handle set key
                        HBAR_RunSet();
 802b15c:	f7fc fc22 	bl	80279a4 <HBAR_RunSet>
            if (notif & EVT_SWITCH_STARTER_IRQ) {
                // check KNOB, KickStand, Keyless, Fingerprint

            }
            // KNOB IRQ
            if (notif & EVT_SWITCH_KNOB_IRQ) {
 802b160:	68fb      	ldr	r3, [r7, #12]
 802b162:	469b      	mov	fp, r3
 802b164:	f04f 0c00 	mov.w	ip, #0
 802b168:	f04f 0104 	mov.w	r1, #4
 802b16c:	f04f 0200 	mov.w	r2, #0
 802b170:	ea0b 0301 	and.w	r3, fp, r1
 802b174:	ea0c 0402 	and.w	r4, ip, r2
 802b178:	4323      	orrs	r3, r4
 802b17a:	d009      	beq.n	802b190 <StartSwitchTask+0xe0>
                // get current state
                VCU.d.state.knob = HAL_GPIO_ReadPin(EXT_KNOB_IRQ_GPIO_Port, EXT_KNOB_IRQ_Pin);
 802b17c:	f44f 7180 	mov.w	r1, #256	; 0x100
 802b180:	4807      	ldr	r0, [pc, #28]	; (802b1a0 <StartSwitchTask+0xf0>)
 802b182:	f004 ff3b 	bl	802fffc <HAL_GPIO_ReadPin>
 802b186:	4603      	mov	r3, r0
 802b188:	461a      	mov	r2, r3
 802b18a:	4b04      	ldr	r3, [pc, #16]	; (802b19c <StartSwitchTask+0xec>)
 802b18c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            }
        }

        // Check REG_5V power state
        VCU.CheckMainPower();
 802b190:	4b02      	ldr	r3, [pc, #8]	; (802b19c <StartSwitchTask+0xec>)
 802b192:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802b194:	4798      	blx	r3
        notif = osThreadFlagsWait(EVT_MASK, osFlagsWaitAny | osFlagsNoClear, 500);
 802b196:	e7a7      	b.n	802b0e8 <StartSwitchTask+0x38>
 802b198:	20008644 	.word	0x20008644
 802b19c:	20000228 	.word	0x20000228
 802b1a0:	40021000 	.word	0x40021000
 802b1a4:	20000004 	.word	0x20000004

0802b1a8 <StartCanRxTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCanRxTask */
void StartCanRxTask(void *argument)
{
 802b1a8:	b580      	push	{r7, lr}
 802b1aa:	b084      	sub	sp, #16
 802b1ac:	af00      	add	r7, sp, #0
 802b1ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCanRxTask */
    uint32_t notif;

    // wait until ManagerTask done
    osEventFlagsWait(GlobalEventHandle, EVENT_READY, osFlagsNoClear, osWaitForever);
 802b1b0:	4b20      	ldr	r3, [pc, #128]	; (802b234 <StartCanRxTask+0x8c>)
 802b1b2:	6818      	ldr	r0, [r3, #0]
 802b1b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802b1b8:	2202      	movs	r2, #2
 802b1ba:	2101      	movs	r1, #1
 802b1bc:	f00c fca4 	bl	8037b08 <osEventFlagsWait>

    /* Infinite loop */
    for (;;) {
        // wait forever
        notif = osThreadFlagsWait(EVT_CAN_RX_IT, osFlagsWaitAny, osWaitForever);
 802b1c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802b1c4:	2100      	movs	r1, #0
 802b1c6:	2001      	movs	r0, #1
 802b1c8:	f00c faf2 	bl	80377b0 <osThreadFlagsWait>
 802b1cc:	60f8      	str	r0, [r7, #12]
        if (_RTOS_ValidThreadFlag(notif)) {
 802b1ce:	68f8      	ldr	r0, [r7, #12]
 802b1d0:	f014 fb5a 	bl	803f888 <_RTOS_ValidThreadFlag>
 802b1d4:	4603      	mov	r3, r0
 802b1d6:	2b00      	cmp	r3, #0
 802b1d8:	d029      	beq.n	802b22e <StartCanRxTask+0x86>
            //			CANBUS_RxDebugger();

            // handle STD message
            switch (CANBUS_ReadID()) {
 802b1da:	f012 ff27 	bl	803e02c <CANBUS_ReadID>
 802b1de:	4603      	mov	r3, r0
 802b1e0:	f5b3 6ff8 	cmp.w	r3, #1984	; 0x7c0
 802b1e4:	d013      	beq.n	802b20e <StartCanRxTask+0x66>
 802b1e6:	f5b3 6ff8 	cmp.w	r3, #1984	; 0x7c0
 802b1ea:	d804      	bhi.n	802b1f6 <StartCanRxTask+0x4e>
 802b1ec:	2bb0      	cmp	r3, #176	; 0xb0
 802b1ee:	d016      	beq.n	802b21e <StartCanRxTask+0x76>
 802b1f0:	2bb1      	cmp	r3, #177	; 0xb1
 802b1f2:	d018      	beq.n	802b226 <StartCanRxTask+0x7e>
                case CAND_BMS_PARAM_2 :
                    BMS.can.r.Param2();
                    break;
                default:

                    break;
 802b1f4:	e01c      	b.n	802b230 <StartCanRxTask+0x88>
            switch (CANBUS_ReadID()) {
 802b1f6:	f240 72c1 	movw	r2, #1985	; 0x7c1
 802b1fa:	4293      	cmp	r3, r2
 802b1fc:	d00b      	beq.n	802b216 <StartCanRxTask+0x6e>
 802b1fe:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 802b202:	d000      	beq.n	802b206 <StartCanRxTask+0x5e>
                    break;
 802b204:	e014      	b.n	802b230 <StartCanRxTask+0x88>
                    HMI2.can.r.State();
 802b206:	4b0c      	ldr	r3, [pc, #48]	; (802b238 <StartCanRxTask+0x90>)
 802b208:	689b      	ldr	r3, [r3, #8]
 802b20a:	4798      	blx	r3
                    break;
 802b20c:	e010      	b.n	802b230 <StartCanRxTask+0x88>
                    HMI1.can.r.LeftState();
 802b20e:	4b0b      	ldr	r3, [pc, #44]	; (802b23c <StartCanRxTask+0x94>)
 802b210:	699b      	ldr	r3, [r3, #24]
 802b212:	4798      	blx	r3
                    break;
 802b214:	e00c      	b.n	802b230 <StartCanRxTask+0x88>
                    HMI1.can.r.RightState();
 802b216:	4b09      	ldr	r3, [pc, #36]	; (802b23c <StartCanRxTask+0x94>)
 802b218:	69db      	ldr	r3, [r3, #28]
 802b21a:	4798      	blx	r3
                    break;
 802b21c:	e008      	b.n	802b230 <StartCanRxTask+0x88>
                    BMS.can.r.Param1();
 802b21e:	4b08      	ldr	r3, [pc, #32]	; (802b240 <StartCanRxTask+0x98>)
 802b220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802b222:	4798      	blx	r3
                    break;
 802b224:	e004      	b.n	802b230 <StartCanRxTask+0x88>
                    BMS.can.r.Param2();
 802b226:	4b06      	ldr	r3, [pc, #24]	; (802b240 <StartCanRxTask+0x98>)
 802b228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b22a:	4798      	blx	r3
                    break;
 802b22c:	e000      	b.n	802b230 <StartCanRxTask+0x88>
            }
        }
 802b22e:	bf00      	nop
        notif = osThreadFlagsWait(EVT_CAN_RX_IT, osFlagsWaitAny, osWaitForever);
 802b230:	e7c6      	b.n	802b1c0 <StartCanRxTask+0x18>
 802b232:	bf00      	nop
 802b234:	20008644 	.word	0x20008644
 802b238:	20000210 	.word	0x20000210
 802b23c:	200001e4 	.word	0x200001e4
 802b240:	20000178 	.word	0x20000178

0802b244 <StartCanTxTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCanTxTask */
void StartCanTxTask(void *argument)
{
 802b244:	b580      	push	{r7, lr}
 802b246:	b086      	sub	sp, #24
 802b248:	af00      	add	r7, sp, #0
 802b24a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCanTxTask */
    TickType_t lastWake, last500ms, last1000ms;

    // wait until ManagerTask done
    osEventFlagsWait(GlobalEventHandle, EVENT_READY, osFlagsNoClear, osWaitForever);
 802b24c:	4b2b      	ldr	r3, [pc, #172]	; (802b2fc <StartCanTxTask+0xb8>)
 802b24e:	6818      	ldr	r0, [r3, #0]
 802b250:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802b254:	2202      	movs	r2, #2
 802b256:	2101      	movs	r1, #1
 802b258:	f00c fc56 	bl	8037b08 <osEventFlagsWait>

    /* Infinite loop */
    last500ms = _GetTickMS();
 802b25c:	f014 fabb 	bl	803f7d6 <_GetTickMS>
 802b260:	6178      	str	r0, [r7, #20]
    last1000ms = _GetTickMS();
 802b262:	f014 fab8 	bl	803f7d6 <_GetTickMS>
 802b266:	6138      	str	r0, [r7, #16]
    for (;;) {
        lastWake = _GetTickMS();
 802b268:	f014 fab5 	bl	803f7d6 <_GetTickMS>
 802b26c:	60f8      	str	r0, [r7, #12]

        // Send CAN data
        // send every 20m
        VCU.can.t.SwitchModeControl(&SW);
 802b26e:	4b24      	ldr	r3, [pc, #144]	; (802b300 <StartCanTxTask+0xbc>)
 802b270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802b272:	4824      	ldr	r0, [pc, #144]	; (802b304 <StartCanTxTask+0xc0>)
 802b274:	4798      	blx	r3

        // send every 500ms
        if (lastWake - last500ms > 500) {
 802b276:	68fa      	ldr	r2, [r7, #12]
 802b278:	697b      	ldr	r3, [r7, #20]
 802b27a:	1ad3      	subs	r3, r2, r3
 802b27c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 802b280:	d906      	bls.n	802b290 <StartCanTxTask+0x4c>
            last500ms = _GetTickMS();
 802b282:	f014 faa8 	bl	803f7d6 <_GetTickMS>
 802b286:	6178      	str	r0, [r7, #20]

            VCU.can.t.MixedData(&(SW.runner));
 802b288:	4b1d      	ldr	r3, [pc, #116]	; (802b300 <StartCanTxTask+0xbc>)
 802b28a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802b28c:	481e      	ldr	r0, [pc, #120]	; (802b308 <StartCanTxTask+0xc4>)
 802b28e:	4798      	blx	r3
        }
        // send every 1000ms
        if (lastWake - last1000ms > 1000) {
 802b290:	68fa      	ldr	r2, [r7, #12]
 802b292:	693b      	ldr	r3, [r7, #16]
 802b294:	1ad3      	subs	r3, r2, r3
 802b296:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802b29a:	d90a      	bls.n	802b2b2 <StartCanTxTask+0x6e>
            last1000ms = _GetTickMS();
 802b29c:	f014 fa9b 	bl	803f7d6 <_GetTickMS>
 802b2a0:	6138      	str	r0, [r7, #16]

            VCU.can.t.Datetime(&(VCU.d.rtc.timestamp));
 802b2a2:	4b17      	ldr	r3, [pc, #92]	; (802b300 <StartCanTxTask+0xbc>)
 802b2a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802b2a6:	4819      	ldr	r0, [pc, #100]	; (802b30c <StartCanTxTask+0xc8>)
 802b2a8:	4798      	blx	r3
            VCU.can.t.SubTripData(&(SW.runner.mode.sub.trip[0]));
 802b2aa:	4b15      	ldr	r3, [pc, #84]	; (802b300 <StartCanTxTask+0xbc>)
 802b2ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802b2ae:	4818      	ldr	r0, [pc, #96]	; (802b310 <StartCanTxTask+0xcc>)
 802b2b0:	4798      	blx	r3
        }

        // Handle Knob Changes
        BMS.PowerOverCan(VCU.d.state.knob);
 802b2b2:	4b18      	ldr	r3, [pc, #96]	; (802b314 <StartCanTxTask+0xd0>)
 802b2b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802b2b6:	4a12      	ldr	r2, [pc, #72]	; (802b300 <StartCanTxTask+0xbc>)
 802b2b8:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 802b2bc:	4610      	mov	r0, r2
 802b2be:	4798      	blx	r3
        HMI1.Power(VCU.d.state.knob);
 802b2c0:	4b15      	ldr	r3, [pc, #84]	; (802b318 <StartCanTxTask+0xd4>)
 802b2c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802b2c4:	4a0e      	ldr	r2, [pc, #56]	; (802b300 <StartCanTxTask+0xbc>)
 802b2c6:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 802b2ca:	4610      	mov	r0, r2
 802b2cc:	4798      	blx	r3
        HMI2.PowerOverCan(VCU.d.state.knob);
 802b2ce:	4b13      	ldr	r3, [pc, #76]	; (802b31c <StartCanTxTask+0xd8>)
 802b2d0:	695b      	ldr	r3, [r3, #20]
 802b2d2:	4a0b      	ldr	r2, [pc, #44]	; (802b300 <StartCanTxTask+0xbc>)
 802b2d4:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 802b2d8:	4610      	mov	r0, r2
 802b2da:	4798      	blx	r3

        // Refresh state
        BMS.RefreshIndex();
 802b2dc:	4b0d      	ldr	r3, [pc, #52]	; (802b314 <StartCanTxTask+0xd0>)
 802b2de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802b2e0:	4798      	blx	r3
        HMI1.RefreshIndex();
 802b2e2:	4b0d      	ldr	r3, [pc, #52]	; (802b318 <StartCanTxTask+0xd4>)
 802b2e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b2e6:	4798      	blx	r3
        HMI2.Refresh();
 802b2e8:	4b0c      	ldr	r3, [pc, #48]	; (802b31c <StartCanTxTask+0xd8>)
 802b2ea:	691b      	ldr	r3, [r3, #16]
 802b2ec:	4798      	blx	r3

        // Periodic interval
        osDelayUntil(lastWake + 20);
 802b2ee:	68fb      	ldr	r3, [r7, #12]
 802b2f0:	3314      	adds	r3, #20
 802b2f2:	4618      	mov	r0, r3
 802b2f4:	f00c fb1e 	bl	8037934 <osDelayUntil>
        lastWake = _GetTickMS();
 802b2f8:	e7b6      	b.n	802b268 <StartCanTxTask+0x24>
 802b2fa:	bf00      	nop
 802b2fc:	20008644 	.word	0x20008644
 802b300:	20000228 	.word	0x20000228
 802b304:	20000004 	.word	0x20000004
 802b308:	200000f4 	.word	0x200000f4
 802b30c:	20000238 	.word	0x20000238
 802b310:	20000104 	.word	0x20000104
 802b314:	20000178 	.word	0x20000178
 802b318:	200001e4 	.word	0x200001e4
 802b31c:	20000210 	.word	0x20000210

0802b320 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 802b320:	b580      	push	{r7, lr}
 802b322:	b082      	sub	sp, #8
 802b324:	af00      	add	r7, sp, #0
 802b326:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 802b328:	687b      	ldr	r3, [r7, #4]
 802b32a:	681b      	ldr	r3, [r3, #0]
 802b32c:	4a04      	ldr	r2, [pc, #16]	; (802b340 <HAL_TIM_PeriodElapsedCallback+0x20>)
 802b32e:	4293      	cmp	r3, r2
 802b330:	d101      	bne.n	802b336 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 802b332:	f000 ff75 	bl	802c220 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 802b336:	bf00      	nop
 802b338:	3708      	adds	r7, #8
 802b33a:	46bd      	mov	sp, r7
 802b33c:	bd80      	pop	{r7, pc}
 802b33e:	bf00      	nop
 802b340:	40010000 	.word	0x40010000

0802b344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 802b344:	b580      	push	{r7, lr}
 802b346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    _Error("Error Handler fired.");
 802b348:	4802      	ldr	r0, [pc, #8]	; (802b354 <Error_Handler+0x10>)
 802b34a:	f014 fa69 	bl	803f820 <_Error>
  /* USER CODE END Error_Handler_Debug */
}
 802b34e:	bf00      	nop
 802b350:	bd80      	pop	{r7, pc}
 802b352:	bf00      	nop
 802b354:	08043aa0 	.word	0x08043aa0

0802b358 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 802b358:	b580      	push	{r7, lr}
 802b35a:	b082      	sub	sp, #8
 802b35c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 802b35e:	2300      	movs	r3, #0
 802b360:	607b      	str	r3, [r7, #4]
 802b362:	4b12      	ldr	r3, [pc, #72]	; (802b3ac <HAL_MspInit+0x54>)
 802b364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802b366:	4a11      	ldr	r2, [pc, #68]	; (802b3ac <HAL_MspInit+0x54>)
 802b368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802b36c:	6453      	str	r3, [r2, #68]	; 0x44
 802b36e:	4b0f      	ldr	r3, [pc, #60]	; (802b3ac <HAL_MspInit+0x54>)
 802b370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802b372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802b376:	607b      	str	r3, [r7, #4]
 802b378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 802b37a:	2300      	movs	r3, #0
 802b37c:	603b      	str	r3, [r7, #0]
 802b37e:	4b0b      	ldr	r3, [pc, #44]	; (802b3ac <HAL_MspInit+0x54>)
 802b380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b382:	4a0a      	ldr	r2, [pc, #40]	; (802b3ac <HAL_MspInit+0x54>)
 802b384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802b388:	6413      	str	r3, [r2, #64]	; 0x40
 802b38a:	4b08      	ldr	r3, [pc, #32]	; (802b3ac <HAL_MspInit+0x54>)
 802b38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b38e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802b392:	603b      	str	r3, [r7, #0]
 802b394:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 802b396:	2200      	movs	r2, #0
 802b398:	210f      	movs	r1, #15
 802b39a:	f06f 0001 	mvn.w	r0, #1
 802b39e:	f002 fae0 	bl	802d962 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 802b3a2:	bf00      	nop
 802b3a4:	3708      	adds	r7, #8
 802b3a6:	46bd      	mov	sp, r7
 802b3a8:	bd80      	pop	{r7, pc}
 802b3aa:	bf00      	nop
 802b3ac:	40023800 	.word	0x40023800

0802b3b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 802b3b0:	b580      	push	{r7, lr}
 802b3b2:	b08a      	sub	sp, #40	; 0x28
 802b3b4:	af00      	add	r7, sp, #0
 802b3b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802b3b8:	f107 0314 	add.w	r3, r7, #20
 802b3bc:	2200      	movs	r2, #0
 802b3be:	601a      	str	r2, [r3, #0]
 802b3c0:	605a      	str	r2, [r3, #4]
 802b3c2:	609a      	str	r2, [r3, #8]
 802b3c4:	60da      	str	r2, [r3, #12]
 802b3c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 802b3c8:	687b      	ldr	r3, [r7, #4]
 802b3ca:	681b      	ldr	r3, [r3, #0]
 802b3cc:	4a2f      	ldr	r2, [pc, #188]	; (802b48c <HAL_ADC_MspInit+0xdc>)
 802b3ce:	4293      	cmp	r3, r2
 802b3d0:	d158      	bne.n	802b484 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 802b3d2:	2300      	movs	r3, #0
 802b3d4:	613b      	str	r3, [r7, #16]
 802b3d6:	4b2e      	ldr	r3, [pc, #184]	; (802b490 <HAL_ADC_MspInit+0xe0>)
 802b3d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802b3da:	4a2d      	ldr	r2, [pc, #180]	; (802b490 <HAL_ADC_MspInit+0xe0>)
 802b3dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802b3e0:	6453      	str	r3, [r2, #68]	; 0x44
 802b3e2:	4b2b      	ldr	r3, [pc, #172]	; (802b490 <HAL_ADC_MspInit+0xe0>)
 802b3e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802b3e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802b3ea:	613b      	str	r3, [r7, #16]
 802b3ec:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 802b3ee:	2300      	movs	r3, #0
 802b3f0:	60fb      	str	r3, [r7, #12]
 802b3f2:	4b27      	ldr	r3, [pc, #156]	; (802b490 <HAL_ADC_MspInit+0xe0>)
 802b3f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b3f6:	4a26      	ldr	r2, [pc, #152]	; (802b490 <HAL_ADC_MspInit+0xe0>)
 802b3f8:	f043 0302 	orr.w	r3, r3, #2
 802b3fc:	6313      	str	r3, [r2, #48]	; 0x30
 802b3fe:	4b24      	ldr	r3, [pc, #144]	; (802b490 <HAL_ADC_MspInit+0xe0>)
 802b400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b402:	f003 0302 	and.w	r3, r3, #2
 802b406:	60fb      	str	r3, [r7, #12]
 802b408:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = INT_ADC_VBAT_Pin;
 802b40a:	2302      	movs	r3, #2
 802b40c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 802b40e:	2303      	movs	r3, #3
 802b410:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802b412:	2300      	movs	r3, #0
 802b414:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(INT_ADC_VBAT_GPIO_Port, &GPIO_InitStruct);
 802b416:	f107 0314 	add.w	r3, r7, #20
 802b41a:	4619      	mov	r1, r3
 802b41c:	481d      	ldr	r0, [pc, #116]	; (802b494 <HAL_ADC_MspInit+0xe4>)
 802b41e:	f004 fb69 	bl	802faf4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 802b422:	4b1d      	ldr	r3, [pc, #116]	; (802b498 <HAL_ADC_MspInit+0xe8>)
 802b424:	4a1d      	ldr	r2, [pc, #116]	; (802b49c <HAL_ADC_MspInit+0xec>)
 802b426:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 802b428:	4b1b      	ldr	r3, [pc, #108]	; (802b498 <HAL_ADC_MspInit+0xe8>)
 802b42a:	2200      	movs	r2, #0
 802b42c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 802b42e:	4b1a      	ldr	r3, [pc, #104]	; (802b498 <HAL_ADC_MspInit+0xe8>)
 802b430:	2200      	movs	r2, #0
 802b432:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 802b434:	4b18      	ldr	r3, [pc, #96]	; (802b498 <HAL_ADC_MspInit+0xe8>)
 802b436:	2200      	movs	r2, #0
 802b438:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 802b43a:	4b17      	ldr	r3, [pc, #92]	; (802b498 <HAL_ADC_MspInit+0xe8>)
 802b43c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802b440:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 802b442:	4b15      	ldr	r3, [pc, #84]	; (802b498 <HAL_ADC_MspInit+0xe8>)
 802b444:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802b448:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 802b44a:	4b13      	ldr	r3, [pc, #76]	; (802b498 <HAL_ADC_MspInit+0xe8>)
 802b44c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802b450:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 802b452:	4b11      	ldr	r3, [pc, #68]	; (802b498 <HAL_ADC_MspInit+0xe8>)
 802b454:	f44f 7280 	mov.w	r2, #256	; 0x100
 802b458:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 802b45a:	4b0f      	ldr	r3, [pc, #60]	; (802b498 <HAL_ADC_MspInit+0xe8>)
 802b45c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 802b460:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 802b462:	4b0d      	ldr	r3, [pc, #52]	; (802b498 <HAL_ADC_MspInit+0xe8>)
 802b464:	2200      	movs	r2, #0
 802b466:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 802b468:	480b      	ldr	r0, [pc, #44]	; (802b498 <HAL_ADC_MspInit+0xe8>)
 802b46a:	f003 ffa5 	bl	802f3b8 <HAL_DMA_Init>
 802b46e:	4603      	mov	r3, r0
 802b470:	2b00      	cmp	r3, #0
 802b472:	d001      	beq.n	802b478 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 802b474:	f7ff ff66 	bl	802b344 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 802b478:	687b      	ldr	r3, [r7, #4]
 802b47a:	4a07      	ldr	r2, [pc, #28]	; (802b498 <HAL_ADC_MspInit+0xe8>)
 802b47c:	639a      	str	r2, [r3, #56]	; 0x38
 802b47e:	4a06      	ldr	r2, [pc, #24]	; (802b498 <HAL_ADC_MspInit+0xe8>)
 802b480:	687b      	ldr	r3, [r7, #4]
 802b482:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 802b484:	bf00      	nop
 802b486:	3728      	adds	r7, #40	; 0x28
 802b488:	46bd      	mov	sp, r7
 802b48a:	bd80      	pop	{r7, pc}
 802b48c:	40012000 	.word	0x40012000
 802b490:	40023800 	.word	0x40023800
 802b494:	40020400 	.word	0x40020400
 802b498:	200087a4 	.word	0x200087a4
 802b49c:	40026410 	.word	0x40026410

0802b4a0 <HAL_CRYP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcryp: CRYP handle pointer
* @retval None
*/
void HAL_CRYP_MspInit(CRYP_HandleTypeDef* hcryp)
{
 802b4a0:	b480      	push	{r7}
 802b4a2:	b085      	sub	sp, #20
 802b4a4:	af00      	add	r7, sp, #0
 802b4a6:	6078      	str	r0, [r7, #4]
  if(hcryp->Instance==AES)
 802b4a8:	687b      	ldr	r3, [r7, #4]
 802b4aa:	681b      	ldr	r3, [r3, #0]
 802b4ac:	4a0b      	ldr	r2, [pc, #44]	; (802b4dc <HAL_CRYP_MspInit+0x3c>)
 802b4ae:	4293      	cmp	r3, r2
 802b4b0:	d10d      	bne.n	802b4ce <HAL_CRYP_MspInit+0x2e>
  {
  /* USER CODE BEGIN AES_MspInit 0 */

  /* USER CODE END AES_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_AES_CLK_ENABLE();
 802b4b2:	2300      	movs	r3, #0
 802b4b4:	60fb      	str	r3, [r7, #12]
 802b4b6:	4b0a      	ldr	r3, [pc, #40]	; (802b4e0 <HAL_CRYP_MspInit+0x40>)
 802b4b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802b4ba:	4a09      	ldr	r2, [pc, #36]	; (802b4e0 <HAL_CRYP_MspInit+0x40>)
 802b4bc:	f043 0310 	orr.w	r3, r3, #16
 802b4c0:	6353      	str	r3, [r2, #52]	; 0x34
 802b4c2:	4b07      	ldr	r3, [pc, #28]	; (802b4e0 <HAL_CRYP_MspInit+0x40>)
 802b4c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802b4c6:	f003 0310 	and.w	r3, r3, #16
 802b4ca:	60fb      	str	r3, [r7, #12]
 802b4cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN AES_MspInit 1 */

  /* USER CODE END AES_MspInit 1 */
  }

}
 802b4ce:	bf00      	nop
 802b4d0:	3714      	adds	r7, #20
 802b4d2:	46bd      	mov	sp, r7
 802b4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b4d8:	4770      	bx	lr
 802b4da:	bf00      	nop
 802b4dc:	50060000 	.word	0x50060000
 802b4e0:	40023800 	.word	0x40023800

0802b4e4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 802b4e4:	b580      	push	{r7, lr}
 802b4e6:	b08a      	sub	sp, #40	; 0x28
 802b4e8:	af00      	add	r7, sp, #0
 802b4ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802b4ec:	f107 0314 	add.w	r3, r7, #20
 802b4f0:	2200      	movs	r2, #0
 802b4f2:	601a      	str	r2, [r3, #0]
 802b4f4:	605a      	str	r2, [r3, #4]
 802b4f6:	609a      	str	r2, [r3, #8]
 802b4f8:	60da      	str	r2, [r3, #12]
 802b4fa:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 802b4fc:	687b      	ldr	r3, [r7, #4]
 802b4fe:	681b      	ldr	r3, [r3, #0]
 802b500:	4a1d      	ldr	r2, [pc, #116]	; (802b578 <HAL_CAN_MspInit+0x94>)
 802b502:	4293      	cmp	r3, r2
 802b504:	d133      	bne.n	802b56e <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 802b506:	2300      	movs	r3, #0
 802b508:	613b      	str	r3, [r7, #16]
 802b50a:	4b1c      	ldr	r3, [pc, #112]	; (802b57c <HAL_CAN_MspInit+0x98>)
 802b50c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b50e:	4a1b      	ldr	r2, [pc, #108]	; (802b57c <HAL_CAN_MspInit+0x98>)
 802b510:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 802b514:	6413      	str	r3, [r2, #64]	; 0x40
 802b516:	4b19      	ldr	r3, [pc, #100]	; (802b57c <HAL_CAN_MspInit+0x98>)
 802b518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b51a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802b51e:	613b      	str	r3, [r7, #16]
 802b520:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 802b522:	2300      	movs	r3, #0
 802b524:	60fb      	str	r3, [r7, #12]
 802b526:	4b15      	ldr	r3, [pc, #84]	; (802b57c <HAL_CAN_MspInit+0x98>)
 802b528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b52a:	4a14      	ldr	r2, [pc, #80]	; (802b57c <HAL_CAN_MspInit+0x98>)
 802b52c:	f043 0308 	orr.w	r3, r3, #8
 802b530:	6313      	str	r3, [r2, #48]	; 0x30
 802b532:	4b12      	ldr	r3, [pc, #72]	; (802b57c <HAL_CAN_MspInit+0x98>)
 802b534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b536:	f003 0308 	and.w	r3, r3, #8
 802b53a:	60fb      	str	r3, [r7, #12]
 802b53c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = INT_CAN_RX_Pin|INT_CAN_TX_Pin;
 802b53e:	2303      	movs	r3, #3
 802b540:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802b542:	2302      	movs	r3, #2
 802b544:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802b546:	2300      	movs	r3, #0
 802b548:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802b54a:	2303      	movs	r3, #3
 802b54c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 802b54e:	2309      	movs	r3, #9
 802b550:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 802b552:	f107 0314 	add.w	r3, r7, #20
 802b556:	4619      	mov	r1, r3
 802b558:	4809      	ldr	r0, [pc, #36]	; (802b580 <HAL_CAN_MspInit+0x9c>)
 802b55a:	f004 facb 	bl	802faf4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 802b55e:	2200      	movs	r2, #0
 802b560:	2105      	movs	r1, #5
 802b562:	2014      	movs	r0, #20
 802b564:	f002 f9fd 	bl	802d962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 802b568:	2014      	movs	r0, #20
 802b56a:	f002 fa16 	bl	802d99a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 802b56e:	bf00      	nop
 802b570:	3728      	adds	r7, #40	; 0x28
 802b572:	46bd      	mov	sp, r7
 802b574:	bd80      	pop	{r7, pc}
 802b576:	bf00      	nop
 802b578:	40006400 	.word	0x40006400
 802b57c:	40023800 	.word	0x40023800
 802b580:	40020c00 	.word	0x40020c00

0802b584 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 802b584:	b480      	push	{r7}
 802b586:	b085      	sub	sp, #20
 802b588:	af00      	add	r7, sp, #0
 802b58a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 802b58c:	687b      	ldr	r3, [r7, #4]
 802b58e:	681b      	ldr	r3, [r3, #0]
 802b590:	4a0b      	ldr	r2, [pc, #44]	; (802b5c0 <HAL_CRC_MspInit+0x3c>)
 802b592:	4293      	cmp	r3, r2
 802b594:	d10d      	bne.n	802b5b2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 802b596:	2300      	movs	r3, #0
 802b598:	60fb      	str	r3, [r7, #12]
 802b59a:	4b0a      	ldr	r3, [pc, #40]	; (802b5c4 <HAL_CRC_MspInit+0x40>)
 802b59c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b59e:	4a09      	ldr	r2, [pc, #36]	; (802b5c4 <HAL_CRC_MspInit+0x40>)
 802b5a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802b5a4:	6313      	str	r3, [r2, #48]	; 0x30
 802b5a6:	4b07      	ldr	r3, [pc, #28]	; (802b5c4 <HAL_CRC_MspInit+0x40>)
 802b5a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b5aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802b5ae:	60fb      	str	r3, [r7, #12]
 802b5b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 802b5b2:	bf00      	nop
 802b5b4:	3714      	adds	r7, #20
 802b5b6:	46bd      	mov	sp, r7
 802b5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b5bc:	4770      	bx	lr
 802b5be:	bf00      	nop
 802b5c0:	40023000 	.word	0x40023000
 802b5c4:	40023800 	.word	0x40023800

0802b5c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 802b5c8:	b580      	push	{r7, lr}
 802b5ca:	b08e      	sub	sp, #56	; 0x38
 802b5cc:	af00      	add	r7, sp, #0
 802b5ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802b5d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802b5d4:	2200      	movs	r2, #0
 802b5d6:	601a      	str	r2, [r3, #0]
 802b5d8:	605a      	str	r2, [r3, #4]
 802b5da:	609a      	str	r2, [r3, #8]
 802b5dc:	60da      	str	r2, [r3, #12]
 802b5de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 802b5e0:	687b      	ldr	r3, [r7, #4]
 802b5e2:	681b      	ldr	r3, [r3, #0]
 802b5e4:	4a6c      	ldr	r2, [pc, #432]	; (802b798 <HAL_I2C_MspInit+0x1d0>)
 802b5e6:	4293      	cmp	r3, r2
 802b5e8:	d13c      	bne.n	802b664 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 802b5ea:	2300      	movs	r3, #0
 802b5ec:	623b      	str	r3, [r7, #32]
 802b5ee:	4b6b      	ldr	r3, [pc, #428]	; (802b79c <HAL_I2C_MspInit+0x1d4>)
 802b5f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b5f2:	4a6a      	ldr	r2, [pc, #424]	; (802b79c <HAL_I2C_MspInit+0x1d4>)
 802b5f4:	f043 0302 	orr.w	r3, r3, #2
 802b5f8:	6313      	str	r3, [r2, #48]	; 0x30
 802b5fa:	4b68      	ldr	r3, [pc, #416]	; (802b79c <HAL_I2C_MspInit+0x1d4>)
 802b5fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b5fe:	f003 0302 	and.w	r3, r3, #2
 802b602:	623b      	str	r3, [r7, #32]
 802b604:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = INT_AUDIO_SCL_Pin|INT_AUDIO_SDA_Pin;
 802b606:	23c0      	movs	r3, #192	; 0xc0
 802b608:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 802b60a:	2312      	movs	r3, #18
 802b60c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 802b60e:	2301      	movs	r3, #1
 802b610:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802b612:	2303      	movs	r3, #3
 802b614:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 802b616:	2304      	movs	r3, #4
 802b618:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802b61a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802b61e:	4619      	mov	r1, r3
 802b620:	485f      	ldr	r0, [pc, #380]	; (802b7a0 <HAL_I2C_MspInit+0x1d8>)
 802b622:	f004 fa67 	bl	802faf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 802b626:	2300      	movs	r3, #0
 802b628:	61fb      	str	r3, [r7, #28]
 802b62a:	4b5c      	ldr	r3, [pc, #368]	; (802b79c <HAL_I2C_MspInit+0x1d4>)
 802b62c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b62e:	4a5b      	ldr	r2, [pc, #364]	; (802b79c <HAL_I2C_MspInit+0x1d4>)
 802b630:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 802b634:	6413      	str	r3, [r2, #64]	; 0x40
 802b636:	4b59      	ldr	r3, [pc, #356]	; (802b79c <HAL_I2C_MspInit+0x1d4>)
 802b638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b63a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 802b63e:	61fb      	str	r3, [r7, #28]
 802b640:	69fb      	ldr	r3, [r7, #28]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 802b642:	2200      	movs	r2, #0
 802b644:	2105      	movs	r1, #5
 802b646:	201f      	movs	r0, #31
 802b648:	f002 f98b 	bl	802d962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 802b64c:	201f      	movs	r0, #31
 802b64e:	f002 f9a4 	bl	802d99a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 802b652:	2200      	movs	r2, #0
 802b654:	2105      	movs	r1, #5
 802b656:	2020      	movs	r0, #32
 802b658:	f002 f983 	bl	802d962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 802b65c:	2020      	movs	r0, #32
 802b65e:	f002 f99c 	bl	802d99a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 802b662:	e094      	b.n	802b78e <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C2)
 802b664:	687b      	ldr	r3, [r7, #4]
 802b666:	681b      	ldr	r3, [r3, #0]
 802b668:	4a4e      	ldr	r2, [pc, #312]	; (802b7a4 <HAL_I2C_MspInit+0x1dc>)
 802b66a:	4293      	cmp	r3, r2
 802b66c:	d13e      	bne.n	802b6ec <HAL_I2C_MspInit+0x124>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 802b66e:	2300      	movs	r3, #0
 802b670:	61bb      	str	r3, [r7, #24]
 802b672:	4b4a      	ldr	r3, [pc, #296]	; (802b79c <HAL_I2C_MspInit+0x1d4>)
 802b674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b676:	4a49      	ldr	r2, [pc, #292]	; (802b79c <HAL_I2C_MspInit+0x1d4>)
 802b678:	f043 0302 	orr.w	r3, r3, #2
 802b67c:	6313      	str	r3, [r2, #48]	; 0x30
 802b67e:	4b47      	ldr	r3, [pc, #284]	; (802b79c <HAL_I2C_MspInit+0x1d4>)
 802b680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b682:	f003 0302 	and.w	r3, r3, #2
 802b686:	61bb      	str	r3, [r7, #24]
 802b688:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = INT_EEPROM_SCL_Pin;
 802b68a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802b68e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 802b690:	2312      	movs	r3, #18
 802b692:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 802b694:	2301      	movs	r3, #1
 802b696:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802b698:	2303      	movs	r3, #3
 802b69a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 802b69c:	2304      	movs	r3, #4
 802b69e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(INT_EEPROM_SCL_GPIO_Port, &GPIO_InitStruct);
 802b6a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802b6a4:	4619      	mov	r1, r3
 802b6a6:	483e      	ldr	r0, [pc, #248]	; (802b7a0 <HAL_I2C_MspInit+0x1d8>)
 802b6a8:	f004 fa24 	bl	802faf4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = INT_EEPROM_SDA_Pin;
 802b6ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 802b6b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 802b6b2:	2312      	movs	r3, #18
 802b6b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 802b6b6:	2301      	movs	r3, #1
 802b6b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802b6ba:	2303      	movs	r3, #3
 802b6bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 802b6be:	2309      	movs	r3, #9
 802b6c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(INT_EEPROM_SDA_GPIO_Port, &GPIO_InitStruct);
 802b6c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802b6c6:	4619      	mov	r1, r3
 802b6c8:	4835      	ldr	r0, [pc, #212]	; (802b7a0 <HAL_I2C_MspInit+0x1d8>)
 802b6ca:	f004 fa13 	bl	802faf4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 802b6ce:	2300      	movs	r3, #0
 802b6d0:	617b      	str	r3, [r7, #20]
 802b6d2:	4b32      	ldr	r3, [pc, #200]	; (802b79c <HAL_I2C_MspInit+0x1d4>)
 802b6d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b6d6:	4a31      	ldr	r2, [pc, #196]	; (802b79c <HAL_I2C_MspInit+0x1d4>)
 802b6d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 802b6dc:	6413      	str	r3, [r2, #64]	; 0x40
 802b6de:	4b2f      	ldr	r3, [pc, #188]	; (802b79c <HAL_I2C_MspInit+0x1d4>)
 802b6e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b6e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802b6e6:	617b      	str	r3, [r7, #20]
 802b6e8:	697b      	ldr	r3, [r7, #20]
}
 802b6ea:	e050      	b.n	802b78e <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C3)
 802b6ec:	687b      	ldr	r3, [r7, #4]
 802b6ee:	681b      	ldr	r3, [r3, #0]
 802b6f0:	4a2d      	ldr	r2, [pc, #180]	; (802b7a8 <HAL_I2C_MspInit+0x1e0>)
 802b6f2:	4293      	cmp	r3, r2
 802b6f4:	d14b      	bne.n	802b78e <HAL_I2C_MspInit+0x1c6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 802b6f6:	2300      	movs	r3, #0
 802b6f8:	613b      	str	r3, [r7, #16]
 802b6fa:	4b28      	ldr	r3, [pc, #160]	; (802b79c <HAL_I2C_MspInit+0x1d4>)
 802b6fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b6fe:	4a27      	ldr	r2, [pc, #156]	; (802b79c <HAL_I2C_MspInit+0x1d4>)
 802b700:	f043 0304 	orr.w	r3, r3, #4
 802b704:	6313      	str	r3, [r2, #48]	; 0x30
 802b706:	4b25      	ldr	r3, [pc, #148]	; (802b79c <HAL_I2C_MspInit+0x1d4>)
 802b708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b70a:	f003 0304 	and.w	r3, r3, #4
 802b70e:	613b      	str	r3, [r7, #16]
 802b710:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802b712:	2300      	movs	r3, #0
 802b714:	60fb      	str	r3, [r7, #12]
 802b716:	4b21      	ldr	r3, [pc, #132]	; (802b79c <HAL_I2C_MspInit+0x1d4>)
 802b718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b71a:	4a20      	ldr	r2, [pc, #128]	; (802b79c <HAL_I2C_MspInit+0x1d4>)
 802b71c:	f043 0301 	orr.w	r3, r3, #1
 802b720:	6313      	str	r3, [r2, #48]	; 0x30
 802b722:	4b1e      	ldr	r3, [pc, #120]	; (802b79c <HAL_I2C_MspInit+0x1d4>)
 802b724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b726:	f003 0301 	and.w	r3, r3, #1
 802b72a:	60fb      	str	r3, [r7, #12]
 802b72c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INT_GYRO_SDA_Pin;
 802b72e:	f44f 7300 	mov.w	r3, #512	; 0x200
 802b732:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 802b734:	2312      	movs	r3, #18
 802b736:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 802b738:	2301      	movs	r3, #1
 802b73a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802b73c:	2303      	movs	r3, #3
 802b73e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 802b740:	2304      	movs	r3, #4
 802b742:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(INT_GYRO_SDA_GPIO_Port, &GPIO_InitStruct);
 802b744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802b748:	4619      	mov	r1, r3
 802b74a:	4818      	ldr	r0, [pc, #96]	; (802b7ac <HAL_I2C_MspInit+0x1e4>)
 802b74c:	f004 f9d2 	bl	802faf4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = INT_GYRO_SCL_Pin;
 802b750:	f44f 7380 	mov.w	r3, #256	; 0x100
 802b754:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 802b756:	2312      	movs	r3, #18
 802b758:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 802b75a:	2301      	movs	r3, #1
 802b75c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802b75e:	2303      	movs	r3, #3
 802b760:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 802b762:	2304      	movs	r3, #4
 802b764:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(INT_GYRO_SCL_GPIO_Port, &GPIO_InitStruct);
 802b766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802b76a:	4619      	mov	r1, r3
 802b76c:	4810      	ldr	r0, [pc, #64]	; (802b7b0 <HAL_I2C_MspInit+0x1e8>)
 802b76e:	f004 f9c1 	bl	802faf4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 802b772:	2300      	movs	r3, #0
 802b774:	60bb      	str	r3, [r7, #8]
 802b776:	4b09      	ldr	r3, [pc, #36]	; (802b79c <HAL_I2C_MspInit+0x1d4>)
 802b778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b77a:	4a08      	ldr	r2, [pc, #32]	; (802b79c <HAL_I2C_MspInit+0x1d4>)
 802b77c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 802b780:	6413      	str	r3, [r2, #64]	; 0x40
 802b782:	4b06      	ldr	r3, [pc, #24]	; (802b79c <HAL_I2C_MspInit+0x1d4>)
 802b784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b786:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 802b78a:	60bb      	str	r3, [r7, #8]
 802b78c:	68bb      	ldr	r3, [r7, #8]
}
 802b78e:	bf00      	nop
 802b790:	3738      	adds	r7, #56	; 0x38
 802b792:	46bd      	mov	sp, r7
 802b794:	bd80      	pop	{r7, pc}
 802b796:	bf00      	nop
 802b798:	40005400 	.word	0x40005400
 802b79c:	40023800 	.word	0x40023800
 802b7a0:	40020400 	.word	0x40020400
 802b7a4:	40005800 	.word	0x40005800
 802b7a8:	40005c00 	.word	0x40005c00
 802b7ac:	40020800 	.word	0x40020800
 802b7b0:	40020000 	.word	0x40020000

0802b7b4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 802b7b4:	b580      	push	{r7, lr}
 802b7b6:	b082      	sub	sp, #8
 802b7b8:	af00      	add	r7, sp, #0
 802b7ba:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 802b7bc:	687b      	ldr	r3, [r7, #4]
 802b7be:	681b      	ldr	r3, [r3, #0]
 802b7c0:	4a1e      	ldr	r2, [pc, #120]	; (802b83c <HAL_I2C_MspDeInit+0x88>)
 802b7c2:	4293      	cmp	r3, r2
 802b7c4:	d110      	bne.n	802b7e8 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 802b7c6:	4b1e      	ldr	r3, [pc, #120]	; (802b840 <HAL_I2C_MspDeInit+0x8c>)
 802b7c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b7ca:	4a1d      	ldr	r2, [pc, #116]	; (802b840 <HAL_I2C_MspDeInit+0x8c>)
 802b7cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 802b7d0:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, INT_AUDIO_SCL_Pin|INT_AUDIO_SDA_Pin);
 802b7d2:	21c0      	movs	r1, #192	; 0xc0
 802b7d4:	481b      	ldr	r0, [pc, #108]	; (802b844 <HAL_I2C_MspDeInit+0x90>)
 802b7d6:	f004 fb1f 	bl	802fe18 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 802b7da:	201f      	movs	r0, #31
 802b7dc:	f002 f8eb 	bl	802d9b6 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 802b7e0:	2020      	movs	r0, #32
 802b7e2:	f002 f8e8 	bl	802d9b6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 802b7e6:	e025      	b.n	802b834 <HAL_I2C_MspDeInit+0x80>
  else if(hi2c->Instance==I2C2)
 802b7e8:	687b      	ldr	r3, [r7, #4]
 802b7ea:	681b      	ldr	r3, [r3, #0]
 802b7ec:	4a16      	ldr	r2, [pc, #88]	; (802b848 <HAL_I2C_MspDeInit+0x94>)
 802b7ee:	4293      	cmp	r3, r2
 802b7f0:	d10b      	bne.n	802b80a <HAL_I2C_MspDeInit+0x56>
    __HAL_RCC_I2C2_CLK_DISABLE();
 802b7f2:	4b13      	ldr	r3, [pc, #76]	; (802b840 <HAL_I2C_MspDeInit+0x8c>)
 802b7f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b7f6:	4a12      	ldr	r2, [pc, #72]	; (802b840 <HAL_I2C_MspDeInit+0x8c>)
 802b7f8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 802b7fc:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, INT_EEPROM_SCL_Pin|INT_EEPROM_SDA_Pin);
 802b7fe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 802b802:	4810      	ldr	r0, [pc, #64]	; (802b844 <HAL_I2C_MspDeInit+0x90>)
 802b804:	f004 fb08 	bl	802fe18 <HAL_GPIO_DeInit>
}
 802b808:	e014      	b.n	802b834 <HAL_I2C_MspDeInit+0x80>
  else if(hi2c->Instance==I2C3)
 802b80a:	687b      	ldr	r3, [r7, #4]
 802b80c:	681b      	ldr	r3, [r3, #0]
 802b80e:	4a0f      	ldr	r2, [pc, #60]	; (802b84c <HAL_I2C_MspDeInit+0x98>)
 802b810:	4293      	cmp	r3, r2
 802b812:	d10f      	bne.n	802b834 <HAL_I2C_MspDeInit+0x80>
    __HAL_RCC_I2C3_CLK_DISABLE();
 802b814:	4b0a      	ldr	r3, [pc, #40]	; (802b840 <HAL_I2C_MspDeInit+0x8c>)
 802b816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b818:	4a09      	ldr	r2, [pc, #36]	; (802b840 <HAL_I2C_MspDeInit+0x8c>)
 802b81a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 802b81e:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(INT_GYRO_SDA_GPIO_Port, INT_GYRO_SDA_Pin);
 802b820:	f44f 7100 	mov.w	r1, #512	; 0x200
 802b824:	480a      	ldr	r0, [pc, #40]	; (802b850 <HAL_I2C_MspDeInit+0x9c>)
 802b826:	f004 faf7 	bl	802fe18 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(INT_GYRO_SCL_GPIO_Port, INT_GYRO_SCL_Pin);
 802b82a:	f44f 7180 	mov.w	r1, #256	; 0x100
 802b82e:	4809      	ldr	r0, [pc, #36]	; (802b854 <HAL_I2C_MspDeInit+0xa0>)
 802b830:	f004 faf2 	bl	802fe18 <HAL_GPIO_DeInit>
}
 802b834:	bf00      	nop
 802b836:	3708      	adds	r7, #8
 802b838:	46bd      	mov	sp, r7
 802b83a:	bd80      	pop	{r7, pc}
 802b83c:	40005400 	.word	0x40005400
 802b840:	40023800 	.word	0x40023800
 802b844:	40020400 	.word	0x40020400
 802b848:	40005800 	.word	0x40005800
 802b84c:	40005c00 	.word	0x40005c00
 802b850:	40020800 	.word	0x40020800
 802b854:	40020000 	.word	0x40020000

0802b858 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 802b858:	b580      	push	{r7, lr}
 802b85a:	b08a      	sub	sp, #40	; 0x28
 802b85c:	af00      	add	r7, sp, #0
 802b85e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802b860:	f107 0314 	add.w	r3, r7, #20
 802b864:	2200      	movs	r2, #0
 802b866:	601a      	str	r2, [r3, #0]
 802b868:	605a      	str	r2, [r3, #4]
 802b86a:	609a      	str	r2, [r3, #8]
 802b86c:	60da      	str	r2, [r3, #12]
 802b86e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 802b870:	687b      	ldr	r3, [r7, #4]
 802b872:	681b      	ldr	r3, [r3, #0]
 802b874:	4a48      	ldr	r2, [pc, #288]	; (802b998 <HAL_I2S_MspInit+0x140>)
 802b876:	4293      	cmp	r3, r2
 802b878:	f040 808a 	bne.w	802b990 <HAL_I2S_MspInit+0x138>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 802b87c:	2300      	movs	r3, #0
 802b87e:	613b      	str	r3, [r7, #16]
 802b880:	4b46      	ldr	r3, [pc, #280]	; (802b99c <HAL_I2S_MspInit+0x144>)
 802b882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b884:	4a45      	ldr	r2, [pc, #276]	; (802b99c <HAL_I2S_MspInit+0x144>)
 802b886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802b88a:	6413      	str	r3, [r2, #64]	; 0x40
 802b88c:	4b43      	ldr	r3, [pc, #268]	; (802b99c <HAL_I2S_MspInit+0x144>)
 802b88e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b890:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802b894:	613b      	str	r3, [r7, #16]
 802b896:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802b898:	2300      	movs	r3, #0
 802b89a:	60fb      	str	r3, [r7, #12]
 802b89c:	4b3f      	ldr	r3, [pc, #252]	; (802b99c <HAL_I2S_MspInit+0x144>)
 802b89e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b8a0:	4a3e      	ldr	r2, [pc, #248]	; (802b99c <HAL_I2S_MspInit+0x144>)
 802b8a2:	f043 0301 	orr.w	r3, r3, #1
 802b8a6:	6313      	str	r3, [r2, #48]	; 0x30
 802b8a8:	4b3c      	ldr	r3, [pc, #240]	; (802b99c <HAL_I2S_MspInit+0x144>)
 802b8aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b8ac:	f003 0301 	and.w	r3, r3, #1
 802b8b0:	60fb      	str	r3, [r7, #12]
 802b8b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 802b8b4:	2300      	movs	r3, #0
 802b8b6:	60bb      	str	r3, [r7, #8]
 802b8b8:	4b38      	ldr	r3, [pc, #224]	; (802b99c <HAL_I2S_MspInit+0x144>)
 802b8ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b8bc:	4a37      	ldr	r2, [pc, #220]	; (802b99c <HAL_I2S_MspInit+0x144>)
 802b8be:	f043 0304 	orr.w	r3, r3, #4
 802b8c2:	6313      	str	r3, [r2, #48]	; 0x30
 802b8c4:	4b35      	ldr	r3, [pc, #212]	; (802b99c <HAL_I2S_MspInit+0x144>)
 802b8c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b8c8:	f003 0304 	and.w	r3, r3, #4
 802b8cc:	60bb      	str	r3, [r7, #8]
 802b8ce:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = INT_AUDIO_LRCK_Pin;
 802b8d0:	2310      	movs	r3, #16
 802b8d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802b8d4:	2302      	movs	r3, #2
 802b8d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802b8d8:	2300      	movs	r3, #0
 802b8da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802b8dc:	2300      	movs	r3, #0
 802b8de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 802b8e0:	2306      	movs	r3, #6
 802b8e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(INT_AUDIO_LRCK_GPIO_Port, &GPIO_InitStruct);
 802b8e4:	f107 0314 	add.w	r3, r7, #20
 802b8e8:	4619      	mov	r1, r3
 802b8ea:	482d      	ldr	r0, [pc, #180]	; (802b9a0 <HAL_I2S_MspInit+0x148>)
 802b8ec:	f004 f902 	bl	802faf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = INT_AUDIO_MCLK_Pin|INT_AUDIO_SCLK_Pin|INT_AUDIO_SDIN_Pin;
 802b8f0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 802b8f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802b8f6:	2302      	movs	r3, #2
 802b8f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802b8fa:	2300      	movs	r3, #0
 802b8fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802b8fe:	2300      	movs	r3, #0
 802b900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 802b902:	2306      	movs	r3, #6
 802b904:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802b906:	f107 0314 	add.w	r3, r7, #20
 802b90a:	4619      	mov	r1, r3
 802b90c:	4825      	ldr	r0, [pc, #148]	; (802b9a4 <HAL_I2S_MspInit+0x14c>)
 802b90e:	f004 f8f1 	bl	802faf4 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream7;
 802b912:	4b25      	ldr	r3, [pc, #148]	; (802b9a8 <HAL_I2S_MspInit+0x150>)
 802b914:	4a25      	ldr	r2, [pc, #148]	; (802b9ac <HAL_I2S_MspInit+0x154>)
 802b916:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 802b918:	4b23      	ldr	r3, [pc, #140]	; (802b9a8 <HAL_I2S_MspInit+0x150>)
 802b91a:	2200      	movs	r2, #0
 802b91c:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 802b91e:	4b22      	ldr	r3, [pc, #136]	; (802b9a8 <HAL_I2S_MspInit+0x150>)
 802b920:	2240      	movs	r2, #64	; 0x40
 802b922:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 802b924:	4b20      	ldr	r3, [pc, #128]	; (802b9a8 <HAL_I2S_MspInit+0x150>)
 802b926:	2200      	movs	r2, #0
 802b928:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 802b92a:	4b1f      	ldr	r3, [pc, #124]	; (802b9a8 <HAL_I2S_MspInit+0x150>)
 802b92c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802b930:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 802b932:	4b1d      	ldr	r3, [pc, #116]	; (802b9a8 <HAL_I2S_MspInit+0x150>)
 802b934:	2200      	movs	r2, #0
 802b936:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 802b938:	4b1b      	ldr	r3, [pc, #108]	; (802b9a8 <HAL_I2S_MspInit+0x150>)
 802b93a:	2200      	movs	r2, #0
 802b93c:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 802b93e:	4b1a      	ldr	r3, [pc, #104]	; (802b9a8 <HAL_I2S_MspInit+0x150>)
 802b940:	2200      	movs	r2, #0
 802b942:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 802b944:	4b18      	ldr	r3, [pc, #96]	; (802b9a8 <HAL_I2S_MspInit+0x150>)
 802b946:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 802b94a:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 802b94c:	4b16      	ldr	r3, [pc, #88]	; (802b9a8 <HAL_I2S_MspInit+0x150>)
 802b94e:	2204      	movs	r2, #4
 802b950:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 802b952:	4b15      	ldr	r3, [pc, #84]	; (802b9a8 <HAL_I2S_MspInit+0x150>)
 802b954:	2203      	movs	r2, #3
 802b956:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 802b958:	4b13      	ldr	r3, [pc, #76]	; (802b9a8 <HAL_I2S_MspInit+0x150>)
 802b95a:	2200      	movs	r2, #0
 802b95c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 802b95e:	4b12      	ldr	r3, [pc, #72]	; (802b9a8 <HAL_I2S_MspInit+0x150>)
 802b960:	2200      	movs	r2, #0
 802b962:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 802b964:	4810      	ldr	r0, [pc, #64]	; (802b9a8 <HAL_I2S_MspInit+0x150>)
 802b966:	f003 fd27 	bl	802f3b8 <HAL_DMA_Init>
 802b96a:	4603      	mov	r3, r0
 802b96c:	2b00      	cmp	r3, #0
 802b96e:	d001      	beq.n	802b974 <HAL_I2S_MspInit+0x11c>
    {
      Error_Handler();
 802b970:	f7ff fce8 	bl	802b344 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 802b974:	687b      	ldr	r3, [r7, #4]
 802b976:	4a0c      	ldr	r2, [pc, #48]	; (802b9a8 <HAL_I2S_MspInit+0x150>)
 802b978:	639a      	str	r2, [r3, #56]	; 0x38
 802b97a:	4a0b      	ldr	r2, [pc, #44]	; (802b9a8 <HAL_I2S_MspInit+0x150>)
 802b97c:	687b      	ldr	r3, [r7, #4]
 802b97e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 802b980:	2200      	movs	r2, #0
 802b982:	2105      	movs	r1, #5
 802b984:	2033      	movs	r0, #51	; 0x33
 802b986:	f001 ffec 	bl	802d962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 802b98a:	2033      	movs	r0, #51	; 0x33
 802b98c:	f002 f805 	bl	802d99a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 802b990:	bf00      	nop
 802b992:	3728      	adds	r7, #40	; 0x28
 802b994:	46bd      	mov	sp, r7
 802b996:	bd80      	pop	{r7, pc}
 802b998:	40003c00 	.word	0x40003c00
 802b99c:	40023800 	.word	0x40023800
 802b9a0:	40020000 	.word	0x40020000
 802b9a4:	40020800 	.word	0x40020800
 802b9a8:	20008650 	.word	0x20008650
 802b9ac:	400260b8 	.word	0x400260b8

0802b9b0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 802b9b0:	b480      	push	{r7}
 802b9b2:	b085      	sub	sp, #20
 802b9b4:	af00      	add	r7, sp, #0
 802b9b6:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 802b9b8:	687b      	ldr	r3, [r7, #4]
 802b9ba:	681b      	ldr	r3, [r3, #0]
 802b9bc:	4a0b      	ldr	r2, [pc, #44]	; (802b9ec <HAL_RNG_MspInit+0x3c>)
 802b9be:	4293      	cmp	r3, r2
 802b9c0:	d10d      	bne.n	802b9de <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 802b9c2:	2300      	movs	r3, #0
 802b9c4:	60fb      	str	r3, [r7, #12]
 802b9c6:	4b0a      	ldr	r3, [pc, #40]	; (802b9f0 <HAL_RNG_MspInit+0x40>)
 802b9c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802b9ca:	4a09      	ldr	r2, [pc, #36]	; (802b9f0 <HAL_RNG_MspInit+0x40>)
 802b9cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b9d0:	6353      	str	r3, [r2, #52]	; 0x34
 802b9d2:	4b07      	ldr	r3, [pc, #28]	; (802b9f0 <HAL_RNG_MspInit+0x40>)
 802b9d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802b9d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b9da:	60fb      	str	r3, [r7, #12]
 802b9dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 802b9de:	bf00      	nop
 802b9e0:	3714      	adds	r7, #20
 802b9e2:	46bd      	mov	sp, r7
 802b9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b9e8:	4770      	bx	lr
 802b9ea:	bf00      	nop
 802b9ec:	50060800 	.word	0x50060800
 802b9f0:	40023800 	.word	0x40023800

0802b9f4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 802b9f4:	b480      	push	{r7}
 802b9f6:	b083      	sub	sp, #12
 802b9f8:	af00      	add	r7, sp, #0
 802b9fa:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 802b9fc:	687b      	ldr	r3, [r7, #4]
 802b9fe:	681b      	ldr	r3, [r3, #0]
 802ba00:	4a05      	ldr	r2, [pc, #20]	; (802ba18 <HAL_RTC_MspInit+0x24>)
 802ba02:	4293      	cmp	r3, r2
 802ba04:	d102      	bne.n	802ba0c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 802ba06:	4b05      	ldr	r3, [pc, #20]	; (802ba1c <HAL_RTC_MspInit+0x28>)
 802ba08:	2201      	movs	r2, #1
 802ba0a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 802ba0c:	bf00      	nop
 802ba0e:	370c      	adds	r7, #12
 802ba10:	46bd      	mov	sp, r7
 802ba12:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ba16:	4770      	bx	lr
 802ba18:	40002800 	.word	0x40002800
 802ba1c:	42470e3c 	.word	0x42470e3c

0802ba20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 802ba20:	b580      	push	{r7, lr}
 802ba22:	b08a      	sub	sp, #40	; 0x28
 802ba24:	af00      	add	r7, sp, #0
 802ba26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802ba28:	f107 0314 	add.w	r3, r7, #20
 802ba2c:	2200      	movs	r2, #0
 802ba2e:	601a      	str	r2, [r3, #0]
 802ba30:	605a      	str	r2, [r3, #4]
 802ba32:	609a      	str	r2, [r3, #8]
 802ba34:	60da      	str	r2, [r3, #12]
 802ba36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 802ba38:	687b      	ldr	r3, [r7, #4]
 802ba3a:	681b      	ldr	r3, [r3, #0]
 802ba3c:	4a19      	ldr	r2, [pc, #100]	; (802baa4 <HAL_SPI_MspInit+0x84>)
 802ba3e:	4293      	cmp	r3, r2
 802ba40:	d12b      	bne.n	802ba9a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 802ba42:	2300      	movs	r3, #0
 802ba44:	613b      	str	r3, [r7, #16]
 802ba46:	4b18      	ldr	r3, [pc, #96]	; (802baa8 <HAL_SPI_MspInit+0x88>)
 802ba48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802ba4a:	4a17      	ldr	r2, [pc, #92]	; (802baa8 <HAL_SPI_MspInit+0x88>)
 802ba4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802ba50:	6453      	str	r3, [r2, #68]	; 0x44
 802ba52:	4b15      	ldr	r3, [pc, #84]	; (802baa8 <HAL_SPI_MspInit+0x88>)
 802ba54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802ba56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802ba5a:	613b      	str	r3, [r7, #16]
 802ba5c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802ba5e:	2300      	movs	r3, #0
 802ba60:	60fb      	str	r3, [r7, #12]
 802ba62:	4b11      	ldr	r3, [pc, #68]	; (802baa8 <HAL_SPI_MspInit+0x88>)
 802ba64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802ba66:	4a10      	ldr	r2, [pc, #64]	; (802baa8 <HAL_SPI_MspInit+0x88>)
 802ba68:	f043 0301 	orr.w	r3, r3, #1
 802ba6c:	6313      	str	r3, [r2, #48]	; 0x30
 802ba6e:	4b0e      	ldr	r3, [pc, #56]	; (802baa8 <HAL_SPI_MspInit+0x88>)
 802ba70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802ba72:	f003 0301 	and.w	r3, r3, #1
 802ba76:	60fb      	str	r3, [r7, #12]
 802ba78:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = INT_KEYLESS_SCK_Pin|INT_KEYLESS_MISO_Pin|INT_KEYLESS_MOSI_Pin;
 802ba7a:	23e0      	movs	r3, #224	; 0xe0
 802ba7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802ba7e:	2302      	movs	r3, #2
 802ba80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802ba82:	2300      	movs	r3, #0
 802ba84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802ba86:	2303      	movs	r3, #3
 802ba88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 802ba8a:	2305      	movs	r3, #5
 802ba8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802ba8e:	f107 0314 	add.w	r3, r7, #20
 802ba92:	4619      	mov	r1, r3
 802ba94:	4805      	ldr	r0, [pc, #20]	; (802baac <HAL_SPI_MspInit+0x8c>)
 802ba96:	f004 f82d 	bl	802faf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 802ba9a:	bf00      	nop
 802ba9c:	3728      	adds	r7, #40	; 0x28
 802ba9e:	46bd      	mov	sp, r7
 802baa0:	bd80      	pop	{r7, pc}
 802baa2:	bf00      	nop
 802baa4:	40013000 	.word	0x40013000
 802baa8:	40023800 	.word	0x40023800
 802baac:	40020000 	.word	0x40020000

0802bab0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 802bab0:	b580      	push	{r7, lr}
 802bab2:	b084      	sub	sp, #16
 802bab4:	af00      	add	r7, sp, #0
 802bab6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 802bab8:	687b      	ldr	r3, [r7, #4]
 802baba:	681b      	ldr	r3, [r3, #0]
 802babc:	4a0e      	ldr	r2, [pc, #56]	; (802baf8 <HAL_TIM_Base_MspInit+0x48>)
 802babe:	4293      	cmp	r3, r2
 802bac0:	d115      	bne.n	802baee <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 802bac2:	2300      	movs	r3, #0
 802bac4:	60fb      	str	r3, [r7, #12]
 802bac6:	4b0d      	ldr	r3, [pc, #52]	; (802bafc <HAL_TIM_Base_MspInit+0x4c>)
 802bac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802baca:	4a0c      	ldr	r2, [pc, #48]	; (802bafc <HAL_TIM_Base_MspInit+0x4c>)
 802bacc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802bad0:	6453      	str	r3, [r2, #68]	; 0x44
 802bad2:	4b0a      	ldr	r3, [pc, #40]	; (802bafc <HAL_TIM_Base_MspInit+0x4c>)
 802bad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802bad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802bada:	60fb      	str	r3, [r7, #12]
 802badc:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 802bade:	2200      	movs	r2, #0
 802bae0:	2100      	movs	r1, #0
 802bae2:	2019      	movs	r0, #25
 802bae4:	f001 ff3d 	bl	802d962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 802bae8:	2019      	movs	r0, #25
 802baea:	f001 ff56 	bl	802d99a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 802baee:	bf00      	nop
 802baf0:	3710      	adds	r7, #16
 802baf2:	46bd      	mov	sp, r7
 802baf4:	bd80      	pop	{r7, pc}
 802baf6:	bf00      	nop
 802baf8:	40014400 	.word	0x40014400
 802bafc:	40023800 	.word	0x40023800

0802bb00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 802bb00:	b580      	push	{r7, lr}
 802bb02:	b088      	sub	sp, #32
 802bb04:	af00      	add	r7, sp, #0
 802bb06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802bb08:	f107 030c 	add.w	r3, r7, #12
 802bb0c:	2200      	movs	r2, #0
 802bb0e:	601a      	str	r2, [r3, #0]
 802bb10:	605a      	str	r2, [r3, #4]
 802bb12:	609a      	str	r2, [r3, #8]
 802bb14:	60da      	str	r2, [r3, #12]
 802bb16:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM10)
 802bb18:	687b      	ldr	r3, [r7, #4]
 802bb1a:	681b      	ldr	r3, [r3, #0]
 802bb1c:	4a12      	ldr	r2, [pc, #72]	; (802bb68 <HAL_TIM_MspPostInit+0x68>)
 802bb1e:	4293      	cmp	r3, r2
 802bb20:	d11e      	bne.n	802bb60 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM10_MspPostInit 0 */

  /* USER CODE END TIM10_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 802bb22:	2300      	movs	r3, #0
 802bb24:	60bb      	str	r3, [r7, #8]
 802bb26:	4b11      	ldr	r3, [pc, #68]	; (802bb6c <HAL_TIM_MspPostInit+0x6c>)
 802bb28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802bb2a:	4a10      	ldr	r2, [pc, #64]	; (802bb6c <HAL_TIM_MspPostInit+0x6c>)
 802bb2c:	f043 0302 	orr.w	r3, r3, #2
 802bb30:	6313      	str	r3, [r2, #48]	; 0x30
 802bb32:	4b0e      	ldr	r3, [pc, #56]	; (802bb6c <HAL_TIM_MspPostInit+0x6c>)
 802bb34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802bb36:	f003 0302 	and.w	r3, r3, #2
 802bb3a:	60bb      	str	r3, [r7, #8]
 802bb3c:	68bb      	ldr	r3, [r7, #8]
    /**TIM10 GPIO Configuration    
    PB8     ------> TIM10_CH1 
    */
    GPIO_InitStruct.Pin = INT_BUZZER_PWM_Pin;
 802bb3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 802bb42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802bb44:	2302      	movs	r3, #2
 802bb46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802bb48:	2300      	movs	r3, #0
 802bb4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802bb4c:	2300      	movs	r3, #0
 802bb4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 802bb50:	2303      	movs	r3, #3
 802bb52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(INT_BUZZER_PWM_GPIO_Port, &GPIO_InitStruct);
 802bb54:	f107 030c 	add.w	r3, r7, #12
 802bb58:	4619      	mov	r1, r3
 802bb5a:	4805      	ldr	r0, [pc, #20]	; (802bb70 <HAL_TIM_MspPostInit+0x70>)
 802bb5c:	f003 ffca 	bl	802faf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 802bb60:	bf00      	nop
 802bb62:	3720      	adds	r7, #32
 802bb64:	46bd      	mov	sp, r7
 802bb66:	bd80      	pop	{r7, pc}
 802bb68:	40014400 	.word	0x40014400
 802bb6c:	40023800 	.word	0x40023800
 802bb70:	40020400 	.word	0x40020400

0802bb74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 802bb74:	b580      	push	{r7, lr}
 802bb76:	b08e      	sub	sp, #56	; 0x38
 802bb78:	af00      	add	r7, sp, #0
 802bb7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802bb7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802bb80:	2200      	movs	r2, #0
 802bb82:	601a      	str	r2, [r3, #0]
 802bb84:	605a      	str	r2, [r3, #4]
 802bb86:	609a      	str	r2, [r3, #8]
 802bb88:	60da      	str	r2, [r3, #12]
 802bb8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 802bb8c:	687b      	ldr	r3, [r7, #4]
 802bb8e:	681b      	ldr	r3, [r3, #0]
 802bb90:	4a9f      	ldr	r2, [pc, #636]	; (802be10 <HAL_UART_MspInit+0x29c>)
 802bb92:	4293      	cmp	r3, r2
 802bb94:	d164      	bne.n	802bc60 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 802bb96:	2300      	movs	r3, #0
 802bb98:	623b      	str	r3, [r7, #32]
 802bb9a:	4b9e      	ldr	r3, [pc, #632]	; (802be14 <HAL_UART_MspInit+0x2a0>)
 802bb9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802bb9e:	4a9d      	ldr	r2, [pc, #628]	; (802be14 <HAL_UART_MspInit+0x2a0>)
 802bba0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802bba4:	6413      	str	r3, [r2, #64]	; 0x40
 802bba6:	4b9b      	ldr	r3, [pc, #620]	; (802be14 <HAL_UART_MspInit+0x2a0>)
 802bba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802bbaa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802bbae:	623b      	str	r3, [r7, #32]
 802bbb0:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802bbb2:	2300      	movs	r3, #0
 802bbb4:	61fb      	str	r3, [r7, #28]
 802bbb6:	4b97      	ldr	r3, [pc, #604]	; (802be14 <HAL_UART_MspInit+0x2a0>)
 802bbb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802bbba:	4a96      	ldr	r2, [pc, #600]	; (802be14 <HAL_UART_MspInit+0x2a0>)
 802bbbc:	f043 0301 	orr.w	r3, r3, #1
 802bbc0:	6313      	str	r3, [r2, #48]	; 0x30
 802bbc2:	4b94      	ldr	r3, [pc, #592]	; (802be14 <HAL_UART_MspInit+0x2a0>)
 802bbc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802bbc6:	f003 0301 	and.w	r3, r3, #1
 802bbca:	61fb      	str	r3, [r7, #28]
 802bbcc:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration    
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = EXT_FINGER_TX_Pin|EXT_FINGER_RX_Pin;
 802bbce:	2303      	movs	r3, #3
 802bbd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802bbd2:	2302      	movs	r3, #2
 802bbd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 802bbd6:	2301      	movs	r3, #1
 802bbd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802bbda:	2303      	movs	r3, #3
 802bbdc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 802bbde:	2308      	movs	r3, #8
 802bbe0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802bbe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802bbe6:	4619      	mov	r1, r3
 802bbe8:	488b      	ldr	r0, [pc, #556]	; (802be18 <HAL_UART_MspInit+0x2a4>)
 802bbea:	f003 ff83 	bl	802faf4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 802bbee:	4b8b      	ldr	r3, [pc, #556]	; (802be1c <HAL_UART_MspInit+0x2a8>)
 802bbf0:	4a8b      	ldr	r2, [pc, #556]	; (802be20 <HAL_UART_MspInit+0x2ac>)
 802bbf2:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 802bbf4:	4b89      	ldr	r3, [pc, #548]	; (802be1c <HAL_UART_MspInit+0x2a8>)
 802bbf6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 802bbfa:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 802bbfc:	4b87      	ldr	r3, [pc, #540]	; (802be1c <HAL_UART_MspInit+0x2a8>)
 802bbfe:	2200      	movs	r2, #0
 802bc00:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 802bc02:	4b86      	ldr	r3, [pc, #536]	; (802be1c <HAL_UART_MspInit+0x2a8>)
 802bc04:	2200      	movs	r2, #0
 802bc06:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 802bc08:	4b84      	ldr	r3, [pc, #528]	; (802be1c <HAL_UART_MspInit+0x2a8>)
 802bc0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802bc0e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 802bc10:	4b82      	ldr	r3, [pc, #520]	; (802be1c <HAL_UART_MspInit+0x2a8>)
 802bc12:	2200      	movs	r2, #0
 802bc14:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 802bc16:	4b81      	ldr	r3, [pc, #516]	; (802be1c <HAL_UART_MspInit+0x2a8>)
 802bc18:	2200      	movs	r2, #0
 802bc1a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 802bc1c:	4b7f      	ldr	r3, [pc, #508]	; (802be1c <HAL_UART_MspInit+0x2a8>)
 802bc1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 802bc22:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 802bc24:	4b7d      	ldr	r3, [pc, #500]	; (802be1c <HAL_UART_MspInit+0x2a8>)
 802bc26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 802bc2a:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 802bc2c:	4b7b      	ldr	r3, [pc, #492]	; (802be1c <HAL_UART_MspInit+0x2a8>)
 802bc2e:	2200      	movs	r2, #0
 802bc30:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 802bc32:	487a      	ldr	r0, [pc, #488]	; (802be1c <HAL_UART_MspInit+0x2a8>)
 802bc34:	f003 fbc0 	bl	802f3b8 <HAL_DMA_Init>
 802bc38:	4603      	mov	r3, r0
 802bc3a:	2b00      	cmp	r3, #0
 802bc3c:	d001      	beq.n	802bc42 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 802bc3e:	f7ff fb81 	bl	802b344 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 802bc42:	687b      	ldr	r3, [r7, #4]
 802bc44:	4a75      	ldr	r2, [pc, #468]	; (802be1c <HAL_UART_MspInit+0x2a8>)
 802bc46:	635a      	str	r2, [r3, #52]	; 0x34
 802bc48:	4a74      	ldr	r2, [pc, #464]	; (802be1c <HAL_UART_MspInit+0x2a8>)
 802bc4a:	687b      	ldr	r3, [r7, #4]
 802bc4c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 802bc4e:	2200      	movs	r2, #0
 802bc50:	2105      	movs	r1, #5
 802bc52:	2034      	movs	r0, #52	; 0x34
 802bc54:	f001 fe85 	bl	802d962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 802bc58:	2034      	movs	r0, #52	; 0x34
 802bc5a:	f001 fe9e 	bl	802d99a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 802bc5e:	e0d3      	b.n	802be08 <HAL_UART_MspInit+0x294>
  else if(huart->Instance==USART1)
 802bc60:	687b      	ldr	r3, [r7, #4]
 802bc62:	681b      	ldr	r3, [r3, #0]
 802bc64:	4a6f      	ldr	r2, [pc, #444]	; (802be24 <HAL_UART_MspInit+0x2b0>)
 802bc66:	4293      	cmp	r3, r2
 802bc68:	d165      	bne.n	802bd36 <HAL_UART_MspInit+0x1c2>
    __HAL_RCC_USART1_CLK_ENABLE();
 802bc6a:	2300      	movs	r3, #0
 802bc6c:	61bb      	str	r3, [r7, #24]
 802bc6e:	4b69      	ldr	r3, [pc, #420]	; (802be14 <HAL_UART_MspInit+0x2a0>)
 802bc70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802bc72:	4a68      	ldr	r2, [pc, #416]	; (802be14 <HAL_UART_MspInit+0x2a0>)
 802bc74:	f043 0310 	orr.w	r3, r3, #16
 802bc78:	6453      	str	r3, [r2, #68]	; 0x44
 802bc7a:	4b66      	ldr	r3, [pc, #408]	; (802be14 <HAL_UART_MspInit+0x2a0>)
 802bc7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802bc7e:	f003 0310 	and.w	r3, r3, #16
 802bc82:	61bb      	str	r3, [r7, #24]
 802bc84:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802bc86:	2300      	movs	r3, #0
 802bc88:	617b      	str	r3, [r7, #20]
 802bc8a:	4b62      	ldr	r3, [pc, #392]	; (802be14 <HAL_UART_MspInit+0x2a0>)
 802bc8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802bc8e:	4a61      	ldr	r2, [pc, #388]	; (802be14 <HAL_UART_MspInit+0x2a0>)
 802bc90:	f043 0301 	orr.w	r3, r3, #1
 802bc94:	6313      	str	r3, [r2, #48]	; 0x30
 802bc96:	4b5f      	ldr	r3, [pc, #380]	; (802be14 <HAL_UART_MspInit+0x2a0>)
 802bc98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802bc9a:	f003 0301 	and.w	r3, r3, #1
 802bc9e:	617b      	str	r3, [r7, #20]
 802bca0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = INT_NET_TX_Pin|INT_NET_RX_Pin;
 802bca2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 802bca6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802bca8:	2302      	movs	r3, #2
 802bcaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802bcac:	2300      	movs	r3, #0
 802bcae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802bcb0:	2303      	movs	r3, #3
 802bcb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 802bcb4:	2307      	movs	r3, #7
 802bcb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802bcb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802bcbc:	4619      	mov	r1, r3
 802bcbe:	4856      	ldr	r0, [pc, #344]	; (802be18 <HAL_UART_MspInit+0x2a4>)
 802bcc0:	f003 ff18 	bl	802faf4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 802bcc4:	4b58      	ldr	r3, [pc, #352]	; (802be28 <HAL_UART_MspInit+0x2b4>)
 802bcc6:	4a59      	ldr	r2, [pc, #356]	; (802be2c <HAL_UART_MspInit+0x2b8>)
 802bcc8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 802bcca:	4b57      	ldr	r3, [pc, #348]	; (802be28 <HAL_UART_MspInit+0x2b4>)
 802bccc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 802bcd0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 802bcd2:	4b55      	ldr	r3, [pc, #340]	; (802be28 <HAL_UART_MspInit+0x2b4>)
 802bcd4:	2200      	movs	r2, #0
 802bcd6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 802bcd8:	4b53      	ldr	r3, [pc, #332]	; (802be28 <HAL_UART_MspInit+0x2b4>)
 802bcda:	2200      	movs	r2, #0
 802bcdc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 802bcde:	4b52      	ldr	r3, [pc, #328]	; (802be28 <HAL_UART_MspInit+0x2b4>)
 802bce0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802bce4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 802bce6:	4b50      	ldr	r3, [pc, #320]	; (802be28 <HAL_UART_MspInit+0x2b4>)
 802bce8:	2200      	movs	r2, #0
 802bcea:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 802bcec:	4b4e      	ldr	r3, [pc, #312]	; (802be28 <HAL_UART_MspInit+0x2b4>)
 802bcee:	2200      	movs	r2, #0
 802bcf0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 802bcf2:	4b4d      	ldr	r3, [pc, #308]	; (802be28 <HAL_UART_MspInit+0x2b4>)
 802bcf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 802bcf8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 802bcfa:	4b4b      	ldr	r3, [pc, #300]	; (802be28 <HAL_UART_MspInit+0x2b4>)
 802bcfc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 802bd00:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 802bd02:	4b49      	ldr	r3, [pc, #292]	; (802be28 <HAL_UART_MspInit+0x2b4>)
 802bd04:	2200      	movs	r2, #0
 802bd06:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 802bd08:	4847      	ldr	r0, [pc, #284]	; (802be28 <HAL_UART_MspInit+0x2b4>)
 802bd0a:	f003 fb55 	bl	802f3b8 <HAL_DMA_Init>
 802bd0e:	4603      	mov	r3, r0
 802bd10:	2b00      	cmp	r3, #0
 802bd12:	d001      	beq.n	802bd18 <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 802bd14:	f7ff fb16 	bl	802b344 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 802bd18:	687b      	ldr	r3, [r7, #4]
 802bd1a:	4a43      	ldr	r2, [pc, #268]	; (802be28 <HAL_UART_MspInit+0x2b4>)
 802bd1c:	635a      	str	r2, [r3, #52]	; 0x34
 802bd1e:	4a42      	ldr	r2, [pc, #264]	; (802be28 <HAL_UART_MspInit+0x2b4>)
 802bd20:	687b      	ldr	r3, [r7, #4]
 802bd22:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 802bd24:	2200      	movs	r2, #0
 802bd26:	2105      	movs	r1, #5
 802bd28:	2025      	movs	r0, #37	; 0x25
 802bd2a:	f001 fe1a 	bl	802d962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 802bd2e:	2025      	movs	r0, #37	; 0x25
 802bd30:	f001 fe33 	bl	802d99a <HAL_NVIC_EnableIRQ>
}
 802bd34:	e068      	b.n	802be08 <HAL_UART_MspInit+0x294>
  else if(huart->Instance==USART2)
 802bd36:	687b      	ldr	r3, [r7, #4]
 802bd38:	681b      	ldr	r3, [r3, #0]
 802bd3a:	4a3d      	ldr	r2, [pc, #244]	; (802be30 <HAL_UART_MspInit+0x2bc>)
 802bd3c:	4293      	cmp	r3, r2
 802bd3e:	d163      	bne.n	802be08 <HAL_UART_MspInit+0x294>
    __HAL_RCC_USART2_CLK_ENABLE();
 802bd40:	2300      	movs	r3, #0
 802bd42:	613b      	str	r3, [r7, #16]
 802bd44:	4b33      	ldr	r3, [pc, #204]	; (802be14 <HAL_UART_MspInit+0x2a0>)
 802bd46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802bd48:	4a32      	ldr	r2, [pc, #200]	; (802be14 <HAL_UART_MspInit+0x2a0>)
 802bd4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802bd4e:	6413      	str	r3, [r2, #64]	; 0x40
 802bd50:	4b30      	ldr	r3, [pc, #192]	; (802be14 <HAL_UART_MspInit+0x2a0>)
 802bd52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802bd54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802bd58:	613b      	str	r3, [r7, #16]
 802bd5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802bd5c:	2300      	movs	r3, #0
 802bd5e:	60fb      	str	r3, [r7, #12]
 802bd60:	4b2c      	ldr	r3, [pc, #176]	; (802be14 <HAL_UART_MspInit+0x2a0>)
 802bd62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802bd64:	4a2b      	ldr	r2, [pc, #172]	; (802be14 <HAL_UART_MspInit+0x2a0>)
 802bd66:	f043 0301 	orr.w	r3, r3, #1
 802bd6a:	6313      	str	r3, [r2, #48]	; 0x30
 802bd6c:	4b29      	ldr	r3, [pc, #164]	; (802be14 <HAL_UART_MspInit+0x2a0>)
 802bd6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802bd70:	f003 0301 	and.w	r3, r3, #1
 802bd74:	60fb      	str	r3, [r7, #12]
 802bd76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INT_GPS_TX_Pin|INT_GPS_RX_Pin;
 802bd78:	230c      	movs	r3, #12
 802bd7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802bd7c:	2302      	movs	r3, #2
 802bd7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802bd80:	2300      	movs	r3, #0
 802bd82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802bd84:	2303      	movs	r3, #3
 802bd86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 802bd88:	2307      	movs	r3, #7
 802bd8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802bd8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802bd90:	4619      	mov	r1, r3
 802bd92:	4821      	ldr	r0, [pc, #132]	; (802be18 <HAL_UART_MspInit+0x2a4>)
 802bd94:	f003 feae 	bl	802faf4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 802bd98:	4b26      	ldr	r3, [pc, #152]	; (802be34 <HAL_UART_MspInit+0x2c0>)
 802bd9a:	4a27      	ldr	r2, [pc, #156]	; (802be38 <HAL_UART_MspInit+0x2c4>)
 802bd9c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 802bd9e:	4b25      	ldr	r3, [pc, #148]	; (802be34 <HAL_UART_MspInit+0x2c0>)
 802bda0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 802bda4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 802bda6:	4b23      	ldr	r3, [pc, #140]	; (802be34 <HAL_UART_MspInit+0x2c0>)
 802bda8:	2200      	movs	r2, #0
 802bdaa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 802bdac:	4b21      	ldr	r3, [pc, #132]	; (802be34 <HAL_UART_MspInit+0x2c0>)
 802bdae:	2200      	movs	r2, #0
 802bdb0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 802bdb2:	4b20      	ldr	r3, [pc, #128]	; (802be34 <HAL_UART_MspInit+0x2c0>)
 802bdb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802bdb8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 802bdba:	4b1e      	ldr	r3, [pc, #120]	; (802be34 <HAL_UART_MspInit+0x2c0>)
 802bdbc:	2200      	movs	r2, #0
 802bdbe:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 802bdc0:	4b1c      	ldr	r3, [pc, #112]	; (802be34 <HAL_UART_MspInit+0x2c0>)
 802bdc2:	2200      	movs	r2, #0
 802bdc4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 802bdc6:	4b1b      	ldr	r3, [pc, #108]	; (802be34 <HAL_UART_MspInit+0x2c0>)
 802bdc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 802bdcc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 802bdce:	4b19      	ldr	r3, [pc, #100]	; (802be34 <HAL_UART_MspInit+0x2c0>)
 802bdd0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 802bdd4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 802bdd6:	4b17      	ldr	r3, [pc, #92]	; (802be34 <HAL_UART_MspInit+0x2c0>)
 802bdd8:	2200      	movs	r2, #0
 802bdda:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 802bddc:	4815      	ldr	r0, [pc, #84]	; (802be34 <HAL_UART_MspInit+0x2c0>)
 802bdde:	f003 faeb 	bl	802f3b8 <HAL_DMA_Init>
 802bde2:	4603      	mov	r3, r0
 802bde4:	2b00      	cmp	r3, #0
 802bde6:	d001      	beq.n	802bdec <HAL_UART_MspInit+0x278>
      Error_Handler();
 802bde8:	f7ff faac 	bl	802b344 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 802bdec:	687b      	ldr	r3, [r7, #4]
 802bdee:	4a11      	ldr	r2, [pc, #68]	; (802be34 <HAL_UART_MspInit+0x2c0>)
 802bdf0:	635a      	str	r2, [r3, #52]	; 0x34
 802bdf2:	4a10      	ldr	r2, [pc, #64]	; (802be34 <HAL_UART_MspInit+0x2c0>)
 802bdf4:	687b      	ldr	r3, [r7, #4]
 802bdf6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 802bdf8:	2200      	movs	r2, #0
 802bdfa:	2105      	movs	r1, #5
 802bdfc:	2026      	movs	r0, #38	; 0x26
 802bdfe:	f001 fdb0 	bl	802d962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 802be02:	2026      	movs	r0, #38	; 0x26
 802be04:	f001 fdc9 	bl	802d99a <HAL_NVIC_EnableIRQ>
}
 802be08:	bf00      	nop
 802be0a:	3738      	adds	r7, #56	; 0x38
 802be0c:	46bd      	mov	sp, r7
 802be0e:	bd80      	pop	{r7, pc}
 802be10:	40004c00 	.word	0x40004c00
 802be14:	40023800 	.word	0x40023800
 802be18:	40020000 	.word	0x40020000
 802be1c:	2000841c 	.word	0x2000841c
 802be20:	40026040 	.word	0x40026040
 802be24:	40011000 	.word	0x40011000
 802be28:	20008700 	.word	0x20008700
 802be2c:	40026440 	.word	0x40026440
 802be30:	40004400 	.word	0x40004400
 802be34:	2000847c 	.word	0x2000847c
 802be38:	40026088 	.word	0x40026088

0802be3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 802be3c:	b580      	push	{r7, lr}
 802be3e:	b08c      	sub	sp, #48	; 0x30
 802be40:	af00      	add	r7, sp, #0
 802be42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 802be44:	2300      	movs	r3, #0
 802be46:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 802be48:	2300      	movs	r3, #0
 802be4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 802be4c:	2200      	movs	r2, #0
 802be4e:	6879      	ldr	r1, [r7, #4]
 802be50:	2019      	movs	r0, #25
 802be52:	f001 fd86 	bl	802d962 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 802be56:	2019      	movs	r0, #25
 802be58:	f001 fd9f 	bl	802d99a <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 802be5c:	2300      	movs	r3, #0
 802be5e:	60fb      	str	r3, [r7, #12]
 802be60:	4b1e      	ldr	r3, [pc, #120]	; (802bedc <HAL_InitTick+0xa0>)
 802be62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802be64:	4a1d      	ldr	r2, [pc, #116]	; (802bedc <HAL_InitTick+0xa0>)
 802be66:	f043 0301 	orr.w	r3, r3, #1
 802be6a:	6453      	str	r3, [r2, #68]	; 0x44
 802be6c:	4b1b      	ldr	r3, [pc, #108]	; (802bedc <HAL_InitTick+0xa0>)
 802be6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802be70:	f003 0301 	and.w	r3, r3, #1
 802be74:	60fb      	str	r3, [r7, #12]
 802be76:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 802be78:	f107 0210 	add.w	r2, r7, #16
 802be7c:	f107 0314 	add.w	r3, r7, #20
 802be80:	4611      	mov	r1, r2
 802be82:	4618      	mov	r0, r3
 802be84:	f008 f810 	bl	8033ea8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 802be88:	f007 fffa 	bl	8033e80 <HAL_RCC_GetPCLK2Freq>
 802be8c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 802be8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802be90:	4a13      	ldr	r2, [pc, #76]	; (802bee0 <HAL_InitTick+0xa4>)
 802be92:	fba2 2303 	umull	r2, r3, r2, r3
 802be96:	0c9b      	lsrs	r3, r3, #18
 802be98:	3b01      	subs	r3, #1
 802be9a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 802be9c:	4b11      	ldr	r3, [pc, #68]	; (802bee4 <HAL_InitTick+0xa8>)
 802be9e:	4a12      	ldr	r2, [pc, #72]	; (802bee8 <HAL_InitTick+0xac>)
 802bea0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 802bea2:	4b10      	ldr	r3, [pc, #64]	; (802bee4 <HAL_InitTick+0xa8>)
 802bea4:	f240 32e7 	movw	r2, #999	; 0x3e7
 802bea8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 802beaa:	4a0e      	ldr	r2, [pc, #56]	; (802bee4 <HAL_InitTick+0xa8>)
 802beac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802beae:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 802beb0:	4b0c      	ldr	r3, [pc, #48]	; (802bee4 <HAL_InitTick+0xa8>)
 802beb2:	2200      	movs	r2, #0
 802beb4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 802beb6:	4b0b      	ldr	r3, [pc, #44]	; (802bee4 <HAL_InitTick+0xa8>)
 802beb8:	2200      	movs	r2, #0
 802beba:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 802bebc:	4809      	ldr	r0, [pc, #36]	; (802bee4 <HAL_InitTick+0xa8>)
 802bebe:	f009 fd51 	bl	8035964 <HAL_TIM_Base_Init>
 802bec2:	4603      	mov	r3, r0
 802bec4:	2b00      	cmp	r3, #0
 802bec6:	d104      	bne.n	802bed2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 802bec8:	4806      	ldr	r0, [pc, #24]	; (802bee4 <HAL_InitTick+0xa8>)
 802beca:	f009 fd76 	bl	80359ba <HAL_TIM_Base_Start_IT>
 802bece:	4603      	mov	r3, r0
 802bed0:	e000      	b.n	802bed4 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 802bed2:	2301      	movs	r3, #1
}
 802bed4:	4618      	mov	r0, r3
 802bed6:	3730      	adds	r7, #48	; 0x30
 802bed8:	46bd      	mov	sp, r7
 802beda:	bd80      	pop	{r7, pc}
 802bedc:	40023800 	.word	0x40023800
 802bee0:	431bde83 	.word	0x431bde83
 802bee4:	20008a18 	.word	0x20008a18
 802bee8:	40010000 	.word	0x40010000

0802beec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 802beec:	b580      	push	{r7, lr}
 802beee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	_Error("NMI_Handler.");
 802bef0:	4802      	ldr	r0, [pc, #8]	; (802befc <NMI_Handler+0x10>)
 802bef2:	f013 fc95 	bl	803f820 <_Error>

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 802bef6:	bf00      	nop
 802bef8:	bd80      	pop	{r7, pc}
 802befa:	bf00      	nop
 802befc:	08043ab8 	.word	0x08043ab8

0802bf00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 802bf00:	b580      	push	{r7, lr}
 802bf02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	_Error("Hard fault interrupt.");
 802bf04:	4801      	ldr	r0, [pc, #4]	; (802bf0c <HardFault_Handler+0xc>)
 802bf06:	f013 fc8b 	bl	803f820 <_Error>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 802bf0a:	e7fe      	b.n	802bf0a <HardFault_Handler+0xa>
 802bf0c:	08043ac8 	.word	0x08043ac8

0802bf10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 802bf10:	b580      	push	{r7, lr}
 802bf12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	_Error("Memory management fault.");
 802bf14:	4801      	ldr	r0, [pc, #4]	; (802bf1c <MemManage_Handler+0xc>)
 802bf16:	f013 fc83 	bl	803f820 <_Error>

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 802bf1a:	e7fe      	b.n	802bf1a <MemManage_Handler+0xa>
 802bf1c:	08043ae0 	.word	0x08043ae0

0802bf20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 802bf20:	b580      	push	{r7, lr}
 802bf22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	_Error("Pre-fetch fault, memory access fault.");
 802bf24:	4801      	ldr	r0, [pc, #4]	; (802bf2c <BusFault_Handler+0xc>)
 802bf26:	f013 fc7b 	bl	803f820 <_Error>

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 802bf2a:	e7fe      	b.n	802bf2a <BusFault_Handler+0xa>
 802bf2c:	08043afc 	.word	0x08043afc

0802bf30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 802bf30:	b580      	push	{r7, lr}
 802bf32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	_Error("Undefined instruction or illegal state.");
 802bf34:	4801      	ldr	r0, [pc, #4]	; (802bf3c <UsageFault_Handler+0xc>)
 802bf36:	f013 fc73 	bl	803f820 <_Error>

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 802bf3a:	e7fe      	b.n	802bf3a <UsageFault_Handler+0xa>
 802bf3c:	08043b24 	.word	0x08043b24

0802bf40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 802bf40:	b580      	push	{r7, lr}
 802bf42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
	_Error("Debug monitor error.");
 802bf44:	4802      	ldr	r0, [pc, #8]	; (802bf50 <DebugMon_Handler+0x10>)
 802bf46:	f013 fc6b 	bl	803f820 <_Error>

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 802bf4a:	bf00      	nop
 802bf4c:	bd80      	pop	{r7, pc}
 802bf4e:	bf00      	nop
 802bf50:	08043b4c 	.word	0x08043b4c

0802bf54 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 802bf54:	b580      	push	{r7, lr}
 802bf56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 802bf58:	2001      	movs	r0, #1
 802bf5a:	f004 f89b 	bl	8030094 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 802bf5e:	bf00      	nop
 802bf60:	bd80      	pop	{r7, pc}

0802bf62 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 802bf62:	b580      	push	{r7, lr}
 802bf64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 802bf66:	2002      	movs	r0, #2
 802bf68:	f004 f894 	bl	8030094 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 802bf6c:	bf00      	nop
 802bf6e:	bd80      	pop	{r7, pc}

0802bf70 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 802bf70:	b580      	push	{r7, lr}
 802bf72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 802bf74:	2004      	movs	r0, #4
 802bf76:	f004 f88d 	bl	8030094 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 802bf7a:	bf00      	nop
 802bf7c:	bd80      	pop	{r7, pc}

0802bf7e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 802bf7e:	b580      	push	{r7, lr}
 802bf80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 802bf82:	2008      	movs	r0, #8
 802bf84:	f004 f886 	bl	8030094 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 802bf88:	bf00      	nop
 802bf8a:	bd80      	pop	{r7, pc}

0802bf8c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 802bf8c:	b580      	push	{r7, lr}
 802bf8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 802bf90:	4803      	ldr	r0, [pc, #12]	; (802bfa0 <DMA1_Stream2_IRQHandler+0x14>)
 802bf92:	f003 fb39 	bl	802f608 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */
	FINGER_DMA_IrqHandler();
 802bf96:	f7f5 f941 	bl	802121c <FINGER_DMA_IrqHandler>

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 802bf9a:	bf00      	nop
 802bf9c:	bd80      	pop	{r7, pc}
 802bf9e:	bf00      	nop
 802bfa0:	2000841c 	.word	0x2000841c

0802bfa4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 802bfa4:	b580      	push	{r7, lr}
 802bfa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 802bfa8:	4803      	ldr	r0, [pc, #12]	; (802bfb8 <DMA1_Stream5_IRQHandler+0x14>)
 802bfaa:	f003 fb2d 	bl	802f608 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */
	UBLOX_DMA_IrqHandler();
 802bfae:	f7f6 fafb 	bl	80225a8 <UBLOX_DMA_IrqHandler>

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 802bfb2:	bf00      	nop
 802bfb4:	bd80      	pop	{r7, pc}
 802bfb6:	bf00      	nop
 802bfb8:	2000847c 	.word	0x2000847c

0802bfbc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 802bfbc:	b580      	push	{r7, lr}
 802bfbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 802bfc0:	4802      	ldr	r0, [pc, #8]	; (802bfcc <CAN1_RX0_IRQHandler+0x10>)
 802bfc2:	f001 f9b5 	bl	802d330 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 802bfc6:	bf00      	nop
 802bfc8:	bd80      	pop	{r7, pc}
 802bfca:	bf00      	nop
 802bfcc:	20008934 	.word	0x20008934

0802bfd0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 802bfd0:	b580      	push	{r7, lr}
 802bfd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 802bfd4:	2020      	movs	r0, #32
 802bfd6:	f004 f85d 	bl	8030094 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 802bfda:	2040      	movs	r0, #64	; 0x40
 802bfdc:	f004 f85a 	bl	8030094 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 802bfe0:	2080      	movs	r0, #128	; 0x80
 802bfe2:	f004 f857 	bl	8030094 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 802bfe6:	f44f 7080 	mov.w	r0, #256	; 0x100
 802bfea:	f004 f853 	bl	8030094 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 802bfee:	f44f 7000 	mov.w	r0, #512	; 0x200
 802bff2:	f004 f84f 	bl	8030094 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 802bff6:	bf00      	nop
 802bff8:	bd80      	pop	{r7, pc}
	...

0802bffc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 802bffc:	b580      	push	{r7, lr}
 802bffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 802c000:	4803      	ldr	r0, [pc, #12]	; (802c010 <TIM1_UP_TIM10_IRQHandler+0x14>)
 802c002:	f009 fd33 	bl	8035a6c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 802c006:	4803      	ldr	r0, [pc, #12]	; (802c014 <TIM1_UP_TIM10_IRQHandler+0x18>)
 802c008:	f009 fd30 	bl	8035a6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 802c00c:	bf00      	nop
 802c00e:	bd80      	pop	{r7, pc}
 802c010:	20008a18 	.word	0x20008a18
 802c014:	20008590 	.word	0x20008590

0802c018 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 802c018:	b580      	push	{r7, lr}
 802c01a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 802c01c:	4802      	ldr	r0, [pc, #8]	; (802c028 <I2C1_EV_IRQHandler+0x10>)
 802c01e:	f004 fed5 	bl	8030dcc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 802c022:	bf00      	nop
 802c024:	bd80      	pop	{r7, pc}
 802c026:	bf00      	nop
 802c028:	20008534 	.word	0x20008534

0802c02c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 802c02c:	b580      	push	{r7, lr}
 802c02e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 802c030:	4802      	ldr	r0, [pc, #8]	; (802c03c <I2C1_ER_IRQHandler+0x10>)
 802c032:	f005 f831 	bl	8031098 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 802c036:	bf00      	nop
 802c038:	bd80      	pop	{r7, pc}
 802c03a:	bf00      	nop
 802c03c:	20008534 	.word	0x20008534

0802c040 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 802c040:	b580      	push	{r7, lr}
 802c042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 802c044:	4803      	ldr	r0, [pc, #12]	; (802c054 <USART1_IRQHandler+0x14>)
 802c046:	f00a fad1 	bl	80365ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
	SIMCOM_USART_IrqHandler();
 802c04a:	f00f fd67 	bl	803bb1c <SIMCOM_USART_IrqHandler>

  /* USER CODE END USART1_IRQn 1 */
}
 802c04e:	bf00      	nop
 802c050:	bd80      	pop	{r7, pc}
 802c052:	bf00      	nop
 802c054:	20008764 	.word	0x20008764

0802c058 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 802c058:	b580      	push	{r7, lr}
 802c05a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 802c05c:	4803      	ldr	r0, [pc, #12]	; (802c06c <USART2_IRQHandler+0x14>)
 802c05e:	f00a fac5 	bl	80365ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
	UBLOX_USART_IrqHandler();
 802c062:	f7f6 fa83 	bl	802256c <UBLOX_USART_IrqHandler>

  /* USER CODE END USART2_IRQn 1 */
}
 802c066:	bf00      	nop
 802c068:	bd80      	pop	{r7, pc}
 802c06a:	bf00      	nop
 802c06c:	200088f0 	.word	0x200088f0

0802c070 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 802c070:	b580      	push	{r7, lr}
 802c072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 802c074:	f44f 6000 	mov.w	r0, #2048	; 0x800
 802c078:	f004 f80c 	bl	8030094 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 802c07c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 802c080:	f004 f808 	bl	8030094 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 802c084:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 802c088:	f004 f804 	bl	8030094 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 802c08c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 802c090:	f004 f800 	bl	8030094 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 802c094:	bf00      	nop
 802c096:	bd80      	pop	{r7, pc}

0802c098 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 802c098:	b580      	push	{r7, lr}
 802c09a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 802c09c:	4802      	ldr	r0, [pc, #8]	; (802c0a8 <DMA1_Stream7_IRQHandler+0x10>)
 802c09e:	f003 fab3 	bl	802f608 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 802c0a2:	bf00      	nop
 802c0a4:	bd80      	pop	{r7, pc}
 802c0a6:	bf00      	nop
 802c0a8:	20008650 	.word	0x20008650

0802c0ac <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 802c0ac:	b580      	push	{r7, lr}
 802c0ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 802c0b0:	4802      	ldr	r0, [pc, #8]	; (802c0bc <SPI3_IRQHandler+0x10>)
 802c0b2:	f007 f8f9 	bl	80332a8 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 802c0b6:	bf00      	nop
 802c0b8:	bd80      	pop	{r7, pc}
 802c0ba:	bf00      	nop
 802c0bc:	200089c0 	.word	0x200089c0

0802c0c0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 802c0c0:	b580      	push	{r7, lr}
 802c0c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 802c0c4:	4803      	ldr	r0, [pc, #12]	; (802c0d4 <UART4_IRQHandler+0x14>)
 802c0c6:	f00a fa91 	bl	80365ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
	FINGER_USART_IrqHandler();
 802c0ca:	f7f5 f889 	bl	80211e0 <FINGER_USART_IrqHandler>

  /* USER CODE END UART4_IRQn 1 */
}
 802c0ce:	bf00      	nop
 802c0d0:	bd80      	pop	{r7, pc}
 802c0d2:	bf00      	nop
 802c0d4:	20008850 	.word	0x20008850

0802c0d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 802c0d8:	b580      	push	{r7, lr}
 802c0da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 802c0dc:	4802      	ldr	r0, [pc, #8]	; (802c0e8 <DMA2_Stream0_IRQHandler+0x10>)
 802c0de:	f003 fa93 	bl	802f608 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 802c0e2:	bf00      	nop
 802c0e4:	bd80      	pop	{r7, pc}
 802c0e6:	bf00      	nop
 802c0e8:	200087a4 	.word	0x200087a4

0802c0ec <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 802c0ec:	b580      	push	{r7, lr}
 802c0ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 802c0f0:	4803      	ldr	r0, [pc, #12]	; (802c100 <DMA2_Stream2_IRQHandler+0x14>)
 802c0f2:	f003 fa89 	bl	802f608 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */
	SIMCOM_DMA_IrqHandler();
 802c0f6:	f00f fd2f 	bl	803bb58 <SIMCOM_DMA_IrqHandler>

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 802c0fa:	bf00      	nop
 802c0fc:	bd80      	pop	{r7, pc}
 802c0fe:	bf00      	nop
 802c100:	20008700 	.word	0x20008700

0802c104 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 802c104:	b580      	push	{r7, lr}
 802c106:	b084      	sub	sp, #16
 802c108:	af00      	add	r7, sp, #0
 802c10a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 802c10c:	4b11      	ldr	r3, [pc, #68]	; (802c154 <_sbrk+0x50>)
 802c10e:	681b      	ldr	r3, [r3, #0]
 802c110:	2b00      	cmp	r3, #0
 802c112:	d102      	bne.n	802c11a <_sbrk+0x16>
		heap_end = &end;
 802c114:	4b0f      	ldr	r3, [pc, #60]	; (802c154 <_sbrk+0x50>)
 802c116:	4a10      	ldr	r2, [pc, #64]	; (802c158 <_sbrk+0x54>)
 802c118:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 802c11a:	4b0e      	ldr	r3, [pc, #56]	; (802c154 <_sbrk+0x50>)
 802c11c:	681b      	ldr	r3, [r3, #0]
 802c11e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 802c120:	4b0c      	ldr	r3, [pc, #48]	; (802c154 <_sbrk+0x50>)
 802c122:	681a      	ldr	r2, [r3, #0]
 802c124:	687b      	ldr	r3, [r7, #4]
 802c126:	4413      	add	r3, r2
 802c128:	466a      	mov	r2, sp
 802c12a:	4293      	cmp	r3, r2
 802c12c:	d907      	bls.n	802c13e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 802c12e:	f013 fc2d 	bl	803f98c <__errno>
 802c132:	4602      	mov	r2, r0
 802c134:	230c      	movs	r3, #12
 802c136:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 802c138:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802c13c:	e006      	b.n	802c14c <_sbrk+0x48>
	}

	heap_end += incr;
 802c13e:	4b05      	ldr	r3, [pc, #20]	; (802c154 <_sbrk+0x50>)
 802c140:	681a      	ldr	r2, [r3, #0]
 802c142:	687b      	ldr	r3, [r7, #4]
 802c144:	4413      	add	r3, r2
 802c146:	4a03      	ldr	r2, [pc, #12]	; (802c154 <_sbrk+0x50>)
 802c148:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 802c14a:	68fb      	ldr	r3, [r7, #12]
}
 802c14c:	4618      	mov	r0, r3
 802c14e:	3710      	adds	r7, #16
 802c150:	46bd      	mov	sp, r7
 802c152:	bd80      	pop	{r7, pc}
 802c154:	20000f30 	.word	0x20000f30
 802c158:	200090f0 	.word	0x200090f0

0802c15c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 802c15c:	b480      	push	{r7}
 802c15e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 802c160:	4b07      	ldr	r3, [pc, #28]	; (802c180 <SystemInit+0x24>)
 802c162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802c166:	4a06      	ldr	r2, [pc, #24]	; (802c180 <SystemInit+0x24>)
 802c168:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 802c16c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 802c170:	4b03      	ldr	r3, [pc, #12]	; (802c180 <SystemInit+0x24>)
 802c172:	4a04      	ldr	r2, [pc, #16]	; (802c184 <SystemInit+0x28>)
 802c174:	609a      	str	r2, [r3, #8]
#endif
}
 802c176:	bf00      	nop
 802c178:	46bd      	mov	sp, r7
 802c17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c17e:	4770      	bx	lr
 802c180:	e000ed00 	.word	0xe000ed00
 802c184:	08020000 	.word	0x08020000

0802c188 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 802c188:	f8df d034 	ldr.w	sp, [pc, #52]	; 802c1c0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 802c18c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 802c18e:	e003      	b.n	802c198 <LoopCopyDataInit>

0802c190 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 802c190:	4b0c      	ldr	r3, [pc, #48]	; (802c1c4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 802c192:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 802c194:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 802c196:	3104      	adds	r1, #4

0802c198 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 802c198:	480b      	ldr	r0, [pc, #44]	; (802c1c8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 802c19a:	4b0c      	ldr	r3, [pc, #48]	; (802c1cc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 802c19c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 802c19e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 802c1a0:	d3f6      	bcc.n	802c190 <CopyDataInit>
  ldr  r2, =_sbss
 802c1a2:	4a0b      	ldr	r2, [pc, #44]	; (802c1d0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 802c1a4:	e002      	b.n	802c1ac <LoopFillZerobss>

0802c1a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 802c1a6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 802c1a8:	f842 3b04 	str.w	r3, [r2], #4

0802c1ac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 802c1ac:	4b09      	ldr	r3, [pc, #36]	; (802c1d4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 802c1ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 802c1b0:	d3f9      	bcc.n	802c1a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 802c1b2:	f7ff ffd3 	bl	802c15c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 802c1b6:	f013 fbef 	bl	803f998 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 802c1ba:	f7fd f955 	bl	8029468 <main>
  bx  lr    
 802c1be:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 802c1c0:	2004fff8 	.word	0x2004fff8
  ldr  r3, =_sidata
 802c1c4:	08056650 	.word	0x08056650
  ldr  r0, =_sdata
 802c1c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 802c1cc:	20000498 	.word	0x20000498
  ldr  r2, =_sbss
 802c1d0:	20000498 	.word	0x20000498
  ldr  r3, = _ebss
 802c1d4:	200090ec 	.word	0x200090ec

0802c1d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 802c1d8:	e7fe      	b.n	802c1d8 <ADC_IRQHandler>
	...

0802c1dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 802c1dc:	b580      	push	{r7, lr}
 802c1de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 802c1e0:	4b0e      	ldr	r3, [pc, #56]	; (802c21c <HAL_Init+0x40>)
 802c1e2:	681b      	ldr	r3, [r3, #0]
 802c1e4:	4a0d      	ldr	r2, [pc, #52]	; (802c21c <HAL_Init+0x40>)
 802c1e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 802c1ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 802c1ec:	4b0b      	ldr	r3, [pc, #44]	; (802c21c <HAL_Init+0x40>)
 802c1ee:	681b      	ldr	r3, [r3, #0]
 802c1f0:	4a0a      	ldr	r2, [pc, #40]	; (802c21c <HAL_Init+0x40>)
 802c1f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 802c1f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 802c1f8:	4b08      	ldr	r3, [pc, #32]	; (802c21c <HAL_Init+0x40>)
 802c1fa:	681b      	ldr	r3, [r3, #0]
 802c1fc:	4a07      	ldr	r2, [pc, #28]	; (802c21c <HAL_Init+0x40>)
 802c1fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802c202:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 802c204:	2003      	movs	r0, #3
 802c206:	f001 fba1 	bl	802d94c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 802c20a:	2000      	movs	r0, #0
 802c20c:	f7ff fe16 	bl	802be3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 802c210:	f7ff f8a2 	bl	802b358 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 802c214:	2300      	movs	r3, #0
}
 802c216:	4618      	mov	r0, r3
 802c218:	bd80      	pop	{r7, pc}
 802c21a:	bf00      	nop
 802c21c:	40023c00 	.word	0x40023c00

0802c220 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 802c220:	b480      	push	{r7}
 802c222:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 802c224:	4b06      	ldr	r3, [pc, #24]	; (802c240 <HAL_IncTick+0x20>)
 802c226:	781b      	ldrb	r3, [r3, #0]
 802c228:	461a      	mov	r2, r3
 802c22a:	4b06      	ldr	r3, [pc, #24]	; (802c244 <HAL_IncTick+0x24>)
 802c22c:	681b      	ldr	r3, [r3, #0]
 802c22e:	4413      	add	r3, r2
 802c230:	4a04      	ldr	r2, [pc, #16]	; (802c244 <HAL_IncTick+0x24>)
 802c232:	6013      	str	r3, [r2, #0]
}
 802c234:	bf00      	nop
 802c236:	46bd      	mov	sp, r7
 802c238:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c23c:	4770      	bx	lr
 802c23e:	bf00      	nop
 802c240:	2000029c 	.word	0x2000029c
 802c244:	20008a58 	.word	0x20008a58

0802c248 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 802c248:	b480      	push	{r7}
 802c24a:	af00      	add	r7, sp, #0
  return uwTick;
 802c24c:	4b03      	ldr	r3, [pc, #12]	; (802c25c <HAL_GetTick+0x14>)
 802c24e:	681b      	ldr	r3, [r3, #0]
}
 802c250:	4618      	mov	r0, r3
 802c252:	46bd      	mov	sp, r7
 802c254:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c258:	4770      	bx	lr
 802c25a:	bf00      	nop
 802c25c:	20008a58 	.word	0x20008a58

0802c260 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 802c260:	b580      	push	{r7, lr}
 802c262:	b084      	sub	sp, #16
 802c264:	af00      	add	r7, sp, #0
 802c266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 802c268:	f7ff ffee 	bl	802c248 <HAL_GetTick>
 802c26c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 802c26e:	687b      	ldr	r3, [r7, #4]
 802c270:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 802c272:	68fb      	ldr	r3, [r7, #12]
 802c274:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 802c278:	d005      	beq.n	802c286 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 802c27a:	4b09      	ldr	r3, [pc, #36]	; (802c2a0 <HAL_Delay+0x40>)
 802c27c:	781b      	ldrb	r3, [r3, #0]
 802c27e:	461a      	mov	r2, r3
 802c280:	68fb      	ldr	r3, [r7, #12]
 802c282:	4413      	add	r3, r2
 802c284:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 802c286:	bf00      	nop
 802c288:	f7ff ffde 	bl	802c248 <HAL_GetTick>
 802c28c:	4602      	mov	r2, r0
 802c28e:	68bb      	ldr	r3, [r7, #8]
 802c290:	1ad3      	subs	r3, r2, r3
 802c292:	68fa      	ldr	r2, [r7, #12]
 802c294:	429a      	cmp	r2, r3
 802c296:	d8f7      	bhi.n	802c288 <HAL_Delay+0x28>
  {
  }
}
 802c298:	bf00      	nop
 802c29a:	3710      	adds	r7, #16
 802c29c:	46bd      	mov	sp, r7
 802c29e:	bd80      	pop	{r7, pc}
 802c2a0:	2000029c 	.word	0x2000029c

0802c2a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 802c2a4:	b580      	push	{r7, lr}
 802c2a6:	b084      	sub	sp, #16
 802c2a8:	af00      	add	r7, sp, #0
 802c2aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 802c2ac:	2300      	movs	r3, #0
 802c2ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 802c2b0:	687b      	ldr	r3, [r7, #4]
 802c2b2:	2b00      	cmp	r3, #0
 802c2b4:	d101      	bne.n	802c2ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 802c2b6:	2301      	movs	r3, #1
 802c2b8:	e033      	b.n	802c322 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 802c2ba:	687b      	ldr	r3, [r7, #4]
 802c2bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802c2be:	2b00      	cmp	r3, #0
 802c2c0:	d109      	bne.n	802c2d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 802c2c2:	6878      	ldr	r0, [r7, #4]
 802c2c4:	f7ff f874 	bl	802b3b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 802c2c8:	687b      	ldr	r3, [r7, #4]
 802c2ca:	2200      	movs	r2, #0
 802c2cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 802c2ce:	687b      	ldr	r3, [r7, #4]
 802c2d0:	2200      	movs	r2, #0
 802c2d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 802c2d6:	687b      	ldr	r3, [r7, #4]
 802c2d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802c2da:	f003 0310 	and.w	r3, r3, #16
 802c2de:	2b00      	cmp	r3, #0
 802c2e0:	d118      	bne.n	802c314 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 802c2e2:	687b      	ldr	r3, [r7, #4]
 802c2e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802c2e6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 802c2ea:	f023 0302 	bic.w	r3, r3, #2
 802c2ee:	f043 0202 	orr.w	r2, r3, #2
 802c2f2:	687b      	ldr	r3, [r7, #4]
 802c2f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 802c2f6:	6878      	ldr	r0, [r7, #4]
 802c2f8:	f000 fa28 	bl	802c74c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 802c2fc:	687b      	ldr	r3, [r7, #4]
 802c2fe:	2200      	movs	r2, #0
 802c300:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 802c302:	687b      	ldr	r3, [r7, #4]
 802c304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802c306:	f023 0303 	bic.w	r3, r3, #3
 802c30a:	f043 0201 	orr.w	r2, r3, #1
 802c30e:	687b      	ldr	r3, [r7, #4]
 802c310:	641a      	str	r2, [r3, #64]	; 0x40
 802c312:	e001      	b.n	802c318 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 802c314:	2301      	movs	r3, #1
 802c316:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 802c318:	687b      	ldr	r3, [r7, #4]
 802c31a:	2200      	movs	r2, #0
 802c31c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 802c320:	7bfb      	ldrb	r3, [r7, #15]
}
 802c322:	4618      	mov	r0, r3
 802c324:	3710      	adds	r7, #16
 802c326:	46bd      	mov	sp, r7
 802c328:	bd80      	pop	{r7, pc}
	...

0802c32c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 802c32c:	b580      	push	{r7, lr}
 802c32e:	b086      	sub	sp, #24
 802c330:	af00      	add	r7, sp, #0
 802c332:	60f8      	str	r0, [r7, #12]
 802c334:	60b9      	str	r1, [r7, #8]
 802c336:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 802c338:	2300      	movs	r3, #0
 802c33a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 802c33c:	68fb      	ldr	r3, [r7, #12]
 802c33e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802c342:	2b01      	cmp	r3, #1
 802c344:	d101      	bne.n	802c34a <HAL_ADC_Start_DMA+0x1e>
 802c346:	2302      	movs	r3, #2
 802c348:	e0b1      	b.n	802c4ae <HAL_ADC_Start_DMA+0x182>
 802c34a:	68fb      	ldr	r3, [r7, #12]
 802c34c:	2201      	movs	r2, #1
 802c34e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 802c352:	68fb      	ldr	r3, [r7, #12]
 802c354:	681b      	ldr	r3, [r3, #0]
 802c356:	689b      	ldr	r3, [r3, #8]
 802c358:	f003 0301 	and.w	r3, r3, #1
 802c35c:	2b01      	cmp	r3, #1
 802c35e:	d018      	beq.n	802c392 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 802c360:	68fb      	ldr	r3, [r7, #12]
 802c362:	681b      	ldr	r3, [r3, #0]
 802c364:	689a      	ldr	r2, [r3, #8]
 802c366:	68fb      	ldr	r3, [r7, #12]
 802c368:	681b      	ldr	r3, [r3, #0]
 802c36a:	f042 0201 	orr.w	r2, r2, #1
 802c36e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 802c370:	4b51      	ldr	r3, [pc, #324]	; (802c4b8 <HAL_ADC_Start_DMA+0x18c>)
 802c372:	681b      	ldr	r3, [r3, #0]
 802c374:	4a51      	ldr	r2, [pc, #324]	; (802c4bc <HAL_ADC_Start_DMA+0x190>)
 802c376:	fba2 2303 	umull	r2, r3, r2, r3
 802c37a:	0c9a      	lsrs	r2, r3, #18
 802c37c:	4613      	mov	r3, r2
 802c37e:	005b      	lsls	r3, r3, #1
 802c380:	4413      	add	r3, r2
 802c382:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 802c384:	e002      	b.n	802c38c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 802c386:	693b      	ldr	r3, [r7, #16]
 802c388:	3b01      	subs	r3, #1
 802c38a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 802c38c:	693b      	ldr	r3, [r7, #16]
 802c38e:	2b00      	cmp	r3, #0
 802c390:	d1f9      	bne.n	802c386 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 802c392:	68fb      	ldr	r3, [r7, #12]
 802c394:	681b      	ldr	r3, [r3, #0]
 802c396:	689b      	ldr	r3, [r3, #8]
 802c398:	f003 0301 	and.w	r3, r3, #1
 802c39c:	2b01      	cmp	r3, #1
 802c39e:	f040 8085 	bne.w	802c4ac <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 802c3a2:	68fb      	ldr	r3, [r7, #12]
 802c3a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802c3a6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 802c3aa:	f023 0301 	bic.w	r3, r3, #1
 802c3ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 802c3b2:	68fb      	ldr	r3, [r7, #12]
 802c3b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 802c3b6:	68fb      	ldr	r3, [r7, #12]
 802c3b8:	681b      	ldr	r3, [r3, #0]
 802c3ba:	685b      	ldr	r3, [r3, #4]
 802c3bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802c3c0:	2b00      	cmp	r3, #0
 802c3c2:	d007      	beq.n	802c3d4 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 802c3c4:	68fb      	ldr	r3, [r7, #12]
 802c3c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802c3c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 802c3cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 802c3d0:	68fb      	ldr	r3, [r7, #12]
 802c3d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 802c3d4:	68fb      	ldr	r3, [r7, #12]
 802c3d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802c3d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802c3dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802c3e0:	d106      	bne.n	802c3f0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 802c3e2:	68fb      	ldr	r3, [r7, #12]
 802c3e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802c3e6:	f023 0206 	bic.w	r2, r3, #6
 802c3ea:	68fb      	ldr	r3, [r7, #12]
 802c3ec:	645a      	str	r2, [r3, #68]	; 0x44
 802c3ee:	e002      	b.n	802c3f6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 802c3f0:	68fb      	ldr	r3, [r7, #12]
 802c3f2:	2200      	movs	r2, #0
 802c3f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 802c3f6:	68fb      	ldr	r3, [r7, #12]
 802c3f8:	2200      	movs	r2, #0
 802c3fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 802c3fe:	4b30      	ldr	r3, [pc, #192]	; (802c4c0 <HAL_ADC_Start_DMA+0x194>)
 802c400:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 802c402:	68fb      	ldr	r3, [r7, #12]
 802c404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c406:	4a2f      	ldr	r2, [pc, #188]	; (802c4c4 <HAL_ADC_Start_DMA+0x198>)
 802c408:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 802c40a:	68fb      	ldr	r3, [r7, #12]
 802c40c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c40e:	4a2e      	ldr	r2, [pc, #184]	; (802c4c8 <HAL_ADC_Start_DMA+0x19c>)
 802c410:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 802c412:	68fb      	ldr	r3, [r7, #12]
 802c414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c416:	4a2d      	ldr	r2, [pc, #180]	; (802c4cc <HAL_ADC_Start_DMA+0x1a0>)
 802c418:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 802c41a:	68fb      	ldr	r3, [r7, #12]
 802c41c:	681b      	ldr	r3, [r3, #0]
 802c41e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 802c422:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 802c424:	68fb      	ldr	r3, [r7, #12]
 802c426:	681b      	ldr	r3, [r3, #0]
 802c428:	685a      	ldr	r2, [r3, #4]
 802c42a:	68fb      	ldr	r3, [r7, #12]
 802c42c:	681b      	ldr	r3, [r3, #0]
 802c42e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 802c432:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 802c434:	68fb      	ldr	r3, [r7, #12]
 802c436:	681b      	ldr	r3, [r3, #0]
 802c438:	689a      	ldr	r2, [r3, #8]
 802c43a:	68fb      	ldr	r3, [r7, #12]
 802c43c:	681b      	ldr	r3, [r3, #0]
 802c43e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802c442:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 802c444:	68fb      	ldr	r3, [r7, #12]
 802c446:	6b98      	ldr	r0, [r3, #56]	; 0x38
 802c448:	68fb      	ldr	r3, [r7, #12]
 802c44a:	681b      	ldr	r3, [r3, #0]
 802c44c:	334c      	adds	r3, #76	; 0x4c
 802c44e:	4619      	mov	r1, r3
 802c450:	68ba      	ldr	r2, [r7, #8]
 802c452:	687b      	ldr	r3, [r7, #4]
 802c454:	f003 f85e 	bl	802f514 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 802c458:	697b      	ldr	r3, [r7, #20]
 802c45a:	685b      	ldr	r3, [r3, #4]
 802c45c:	f003 031f 	and.w	r3, r3, #31
 802c460:	2b00      	cmp	r3, #0
 802c462:	d10f      	bne.n	802c484 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 802c464:	68fb      	ldr	r3, [r7, #12]
 802c466:	681b      	ldr	r3, [r3, #0]
 802c468:	689b      	ldr	r3, [r3, #8]
 802c46a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 802c46e:	2b00      	cmp	r3, #0
 802c470:	d11c      	bne.n	802c4ac <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 802c472:	68fb      	ldr	r3, [r7, #12]
 802c474:	681b      	ldr	r3, [r3, #0]
 802c476:	689a      	ldr	r2, [r3, #8]
 802c478:	68fb      	ldr	r3, [r7, #12]
 802c47a:	681b      	ldr	r3, [r3, #0]
 802c47c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 802c480:	609a      	str	r2, [r3, #8]
 802c482:	e013      	b.n	802c4ac <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 802c484:	68fb      	ldr	r3, [r7, #12]
 802c486:	681b      	ldr	r3, [r3, #0]
 802c488:	4a11      	ldr	r2, [pc, #68]	; (802c4d0 <HAL_ADC_Start_DMA+0x1a4>)
 802c48a:	4293      	cmp	r3, r2
 802c48c:	d10e      	bne.n	802c4ac <HAL_ADC_Start_DMA+0x180>
 802c48e:	68fb      	ldr	r3, [r7, #12]
 802c490:	681b      	ldr	r3, [r3, #0]
 802c492:	689b      	ldr	r3, [r3, #8]
 802c494:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 802c498:	2b00      	cmp	r3, #0
 802c49a:	d107      	bne.n	802c4ac <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 802c49c:	68fb      	ldr	r3, [r7, #12]
 802c49e:	681b      	ldr	r3, [r3, #0]
 802c4a0:	689a      	ldr	r2, [r3, #8]
 802c4a2:	68fb      	ldr	r3, [r7, #12]
 802c4a4:	681b      	ldr	r3, [r3, #0]
 802c4a6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 802c4aa:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 802c4ac:	2300      	movs	r3, #0
}
 802c4ae:	4618      	mov	r0, r3
 802c4b0:	3718      	adds	r7, #24
 802c4b2:	46bd      	mov	sp, r7
 802c4b4:	bd80      	pop	{r7, pc}
 802c4b6:	bf00      	nop
 802c4b8:	20000294 	.word	0x20000294
 802c4bc:	431bde83 	.word	0x431bde83
 802c4c0:	40012300 	.word	0x40012300
 802c4c4:	0802c945 	.word	0x0802c945
 802c4c8:	0802c9ff 	.word	0x0802c9ff
 802c4cc:	0802ca1b 	.word	0x0802ca1b
 802c4d0:	40012000 	.word	0x40012000

0802c4d4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 802c4d4:	b480      	push	{r7}
 802c4d6:	b083      	sub	sp, #12
 802c4d8:	af00      	add	r7, sp, #0
 802c4da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 802c4dc:	bf00      	nop
 802c4de:	370c      	adds	r7, #12
 802c4e0:	46bd      	mov	sp, r7
 802c4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c4e6:	4770      	bx	lr

0802c4e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 802c4e8:	b480      	push	{r7}
 802c4ea:	b085      	sub	sp, #20
 802c4ec:	af00      	add	r7, sp, #0
 802c4ee:	6078      	str	r0, [r7, #4]
 802c4f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 802c4f2:	2300      	movs	r3, #0
 802c4f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 802c4f6:	687b      	ldr	r3, [r7, #4]
 802c4f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802c4fc:	2b01      	cmp	r3, #1
 802c4fe:	d101      	bne.n	802c504 <HAL_ADC_ConfigChannel+0x1c>
 802c500:	2302      	movs	r3, #2
 802c502:	e113      	b.n	802c72c <HAL_ADC_ConfigChannel+0x244>
 802c504:	687b      	ldr	r3, [r7, #4]
 802c506:	2201      	movs	r2, #1
 802c508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 802c50c:	683b      	ldr	r3, [r7, #0]
 802c50e:	681b      	ldr	r3, [r3, #0]
 802c510:	2b09      	cmp	r3, #9
 802c512:	d925      	bls.n	802c560 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 802c514:	687b      	ldr	r3, [r7, #4]
 802c516:	681b      	ldr	r3, [r3, #0]
 802c518:	68d9      	ldr	r1, [r3, #12]
 802c51a:	683b      	ldr	r3, [r7, #0]
 802c51c:	681b      	ldr	r3, [r3, #0]
 802c51e:	b29b      	uxth	r3, r3
 802c520:	461a      	mov	r2, r3
 802c522:	4613      	mov	r3, r2
 802c524:	005b      	lsls	r3, r3, #1
 802c526:	4413      	add	r3, r2
 802c528:	3b1e      	subs	r3, #30
 802c52a:	2207      	movs	r2, #7
 802c52c:	fa02 f303 	lsl.w	r3, r2, r3
 802c530:	43da      	mvns	r2, r3
 802c532:	687b      	ldr	r3, [r7, #4]
 802c534:	681b      	ldr	r3, [r3, #0]
 802c536:	400a      	ands	r2, r1
 802c538:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 802c53a:	687b      	ldr	r3, [r7, #4]
 802c53c:	681b      	ldr	r3, [r3, #0]
 802c53e:	68d9      	ldr	r1, [r3, #12]
 802c540:	683b      	ldr	r3, [r7, #0]
 802c542:	689a      	ldr	r2, [r3, #8]
 802c544:	683b      	ldr	r3, [r7, #0]
 802c546:	681b      	ldr	r3, [r3, #0]
 802c548:	b29b      	uxth	r3, r3
 802c54a:	4618      	mov	r0, r3
 802c54c:	4603      	mov	r3, r0
 802c54e:	005b      	lsls	r3, r3, #1
 802c550:	4403      	add	r3, r0
 802c552:	3b1e      	subs	r3, #30
 802c554:	409a      	lsls	r2, r3
 802c556:	687b      	ldr	r3, [r7, #4]
 802c558:	681b      	ldr	r3, [r3, #0]
 802c55a:	430a      	orrs	r2, r1
 802c55c:	60da      	str	r2, [r3, #12]
 802c55e:	e022      	b.n	802c5a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 802c560:	687b      	ldr	r3, [r7, #4]
 802c562:	681b      	ldr	r3, [r3, #0]
 802c564:	6919      	ldr	r1, [r3, #16]
 802c566:	683b      	ldr	r3, [r7, #0]
 802c568:	681b      	ldr	r3, [r3, #0]
 802c56a:	b29b      	uxth	r3, r3
 802c56c:	461a      	mov	r2, r3
 802c56e:	4613      	mov	r3, r2
 802c570:	005b      	lsls	r3, r3, #1
 802c572:	4413      	add	r3, r2
 802c574:	2207      	movs	r2, #7
 802c576:	fa02 f303 	lsl.w	r3, r2, r3
 802c57a:	43da      	mvns	r2, r3
 802c57c:	687b      	ldr	r3, [r7, #4]
 802c57e:	681b      	ldr	r3, [r3, #0]
 802c580:	400a      	ands	r2, r1
 802c582:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 802c584:	687b      	ldr	r3, [r7, #4]
 802c586:	681b      	ldr	r3, [r3, #0]
 802c588:	6919      	ldr	r1, [r3, #16]
 802c58a:	683b      	ldr	r3, [r7, #0]
 802c58c:	689a      	ldr	r2, [r3, #8]
 802c58e:	683b      	ldr	r3, [r7, #0]
 802c590:	681b      	ldr	r3, [r3, #0]
 802c592:	b29b      	uxth	r3, r3
 802c594:	4618      	mov	r0, r3
 802c596:	4603      	mov	r3, r0
 802c598:	005b      	lsls	r3, r3, #1
 802c59a:	4403      	add	r3, r0
 802c59c:	409a      	lsls	r2, r3
 802c59e:	687b      	ldr	r3, [r7, #4]
 802c5a0:	681b      	ldr	r3, [r3, #0]
 802c5a2:	430a      	orrs	r2, r1
 802c5a4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 802c5a6:	683b      	ldr	r3, [r7, #0]
 802c5a8:	685b      	ldr	r3, [r3, #4]
 802c5aa:	2b06      	cmp	r3, #6
 802c5ac:	d824      	bhi.n	802c5f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 802c5ae:	687b      	ldr	r3, [r7, #4]
 802c5b0:	681b      	ldr	r3, [r3, #0]
 802c5b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 802c5b4:	683b      	ldr	r3, [r7, #0]
 802c5b6:	685a      	ldr	r2, [r3, #4]
 802c5b8:	4613      	mov	r3, r2
 802c5ba:	009b      	lsls	r3, r3, #2
 802c5bc:	4413      	add	r3, r2
 802c5be:	3b05      	subs	r3, #5
 802c5c0:	221f      	movs	r2, #31
 802c5c2:	fa02 f303 	lsl.w	r3, r2, r3
 802c5c6:	43da      	mvns	r2, r3
 802c5c8:	687b      	ldr	r3, [r7, #4]
 802c5ca:	681b      	ldr	r3, [r3, #0]
 802c5cc:	400a      	ands	r2, r1
 802c5ce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 802c5d0:	687b      	ldr	r3, [r7, #4]
 802c5d2:	681b      	ldr	r3, [r3, #0]
 802c5d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 802c5d6:	683b      	ldr	r3, [r7, #0]
 802c5d8:	681b      	ldr	r3, [r3, #0]
 802c5da:	b29b      	uxth	r3, r3
 802c5dc:	4618      	mov	r0, r3
 802c5de:	683b      	ldr	r3, [r7, #0]
 802c5e0:	685a      	ldr	r2, [r3, #4]
 802c5e2:	4613      	mov	r3, r2
 802c5e4:	009b      	lsls	r3, r3, #2
 802c5e6:	4413      	add	r3, r2
 802c5e8:	3b05      	subs	r3, #5
 802c5ea:	fa00 f203 	lsl.w	r2, r0, r3
 802c5ee:	687b      	ldr	r3, [r7, #4]
 802c5f0:	681b      	ldr	r3, [r3, #0]
 802c5f2:	430a      	orrs	r2, r1
 802c5f4:	635a      	str	r2, [r3, #52]	; 0x34
 802c5f6:	e04c      	b.n	802c692 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 802c5f8:	683b      	ldr	r3, [r7, #0]
 802c5fa:	685b      	ldr	r3, [r3, #4]
 802c5fc:	2b0c      	cmp	r3, #12
 802c5fe:	d824      	bhi.n	802c64a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 802c600:	687b      	ldr	r3, [r7, #4]
 802c602:	681b      	ldr	r3, [r3, #0]
 802c604:	6b19      	ldr	r1, [r3, #48]	; 0x30
 802c606:	683b      	ldr	r3, [r7, #0]
 802c608:	685a      	ldr	r2, [r3, #4]
 802c60a:	4613      	mov	r3, r2
 802c60c:	009b      	lsls	r3, r3, #2
 802c60e:	4413      	add	r3, r2
 802c610:	3b23      	subs	r3, #35	; 0x23
 802c612:	221f      	movs	r2, #31
 802c614:	fa02 f303 	lsl.w	r3, r2, r3
 802c618:	43da      	mvns	r2, r3
 802c61a:	687b      	ldr	r3, [r7, #4]
 802c61c:	681b      	ldr	r3, [r3, #0]
 802c61e:	400a      	ands	r2, r1
 802c620:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 802c622:	687b      	ldr	r3, [r7, #4]
 802c624:	681b      	ldr	r3, [r3, #0]
 802c626:	6b19      	ldr	r1, [r3, #48]	; 0x30
 802c628:	683b      	ldr	r3, [r7, #0]
 802c62a:	681b      	ldr	r3, [r3, #0]
 802c62c:	b29b      	uxth	r3, r3
 802c62e:	4618      	mov	r0, r3
 802c630:	683b      	ldr	r3, [r7, #0]
 802c632:	685a      	ldr	r2, [r3, #4]
 802c634:	4613      	mov	r3, r2
 802c636:	009b      	lsls	r3, r3, #2
 802c638:	4413      	add	r3, r2
 802c63a:	3b23      	subs	r3, #35	; 0x23
 802c63c:	fa00 f203 	lsl.w	r2, r0, r3
 802c640:	687b      	ldr	r3, [r7, #4]
 802c642:	681b      	ldr	r3, [r3, #0]
 802c644:	430a      	orrs	r2, r1
 802c646:	631a      	str	r2, [r3, #48]	; 0x30
 802c648:	e023      	b.n	802c692 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 802c64a:	687b      	ldr	r3, [r7, #4]
 802c64c:	681b      	ldr	r3, [r3, #0]
 802c64e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 802c650:	683b      	ldr	r3, [r7, #0]
 802c652:	685a      	ldr	r2, [r3, #4]
 802c654:	4613      	mov	r3, r2
 802c656:	009b      	lsls	r3, r3, #2
 802c658:	4413      	add	r3, r2
 802c65a:	3b41      	subs	r3, #65	; 0x41
 802c65c:	221f      	movs	r2, #31
 802c65e:	fa02 f303 	lsl.w	r3, r2, r3
 802c662:	43da      	mvns	r2, r3
 802c664:	687b      	ldr	r3, [r7, #4]
 802c666:	681b      	ldr	r3, [r3, #0]
 802c668:	400a      	ands	r2, r1
 802c66a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 802c66c:	687b      	ldr	r3, [r7, #4]
 802c66e:	681b      	ldr	r3, [r3, #0]
 802c670:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 802c672:	683b      	ldr	r3, [r7, #0]
 802c674:	681b      	ldr	r3, [r3, #0]
 802c676:	b29b      	uxth	r3, r3
 802c678:	4618      	mov	r0, r3
 802c67a:	683b      	ldr	r3, [r7, #0]
 802c67c:	685a      	ldr	r2, [r3, #4]
 802c67e:	4613      	mov	r3, r2
 802c680:	009b      	lsls	r3, r3, #2
 802c682:	4413      	add	r3, r2
 802c684:	3b41      	subs	r3, #65	; 0x41
 802c686:	fa00 f203 	lsl.w	r2, r0, r3
 802c68a:	687b      	ldr	r3, [r7, #4]
 802c68c:	681b      	ldr	r3, [r3, #0]
 802c68e:	430a      	orrs	r2, r1
 802c690:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 802c692:	4b29      	ldr	r3, [pc, #164]	; (802c738 <HAL_ADC_ConfigChannel+0x250>)
 802c694:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 802c696:	687b      	ldr	r3, [r7, #4]
 802c698:	681b      	ldr	r3, [r3, #0]
 802c69a:	4a28      	ldr	r2, [pc, #160]	; (802c73c <HAL_ADC_ConfigChannel+0x254>)
 802c69c:	4293      	cmp	r3, r2
 802c69e:	d10f      	bne.n	802c6c0 <HAL_ADC_ConfigChannel+0x1d8>
 802c6a0:	683b      	ldr	r3, [r7, #0]
 802c6a2:	681b      	ldr	r3, [r3, #0]
 802c6a4:	2b12      	cmp	r3, #18
 802c6a6:	d10b      	bne.n	802c6c0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 802c6a8:	68fb      	ldr	r3, [r7, #12]
 802c6aa:	685b      	ldr	r3, [r3, #4]
 802c6ac:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 802c6b0:	68fb      	ldr	r3, [r7, #12]
 802c6b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 802c6b4:	68fb      	ldr	r3, [r7, #12]
 802c6b6:	685b      	ldr	r3, [r3, #4]
 802c6b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 802c6bc:	68fb      	ldr	r3, [r7, #12]
 802c6be:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 802c6c0:	687b      	ldr	r3, [r7, #4]
 802c6c2:	681b      	ldr	r3, [r3, #0]
 802c6c4:	4a1d      	ldr	r2, [pc, #116]	; (802c73c <HAL_ADC_ConfigChannel+0x254>)
 802c6c6:	4293      	cmp	r3, r2
 802c6c8:	d12b      	bne.n	802c722 <HAL_ADC_ConfigChannel+0x23a>
 802c6ca:	683b      	ldr	r3, [r7, #0]
 802c6cc:	681b      	ldr	r3, [r3, #0]
 802c6ce:	4a1c      	ldr	r2, [pc, #112]	; (802c740 <HAL_ADC_ConfigChannel+0x258>)
 802c6d0:	4293      	cmp	r3, r2
 802c6d2:	d003      	beq.n	802c6dc <HAL_ADC_ConfigChannel+0x1f4>
 802c6d4:	683b      	ldr	r3, [r7, #0]
 802c6d6:	681b      	ldr	r3, [r3, #0]
 802c6d8:	2b11      	cmp	r3, #17
 802c6da:	d122      	bne.n	802c722 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 802c6dc:	68fb      	ldr	r3, [r7, #12]
 802c6de:	685b      	ldr	r3, [r3, #4]
 802c6e0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 802c6e4:	68fb      	ldr	r3, [r7, #12]
 802c6e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 802c6e8:	68fb      	ldr	r3, [r7, #12]
 802c6ea:	685b      	ldr	r3, [r3, #4]
 802c6ec:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 802c6f0:	68fb      	ldr	r3, [r7, #12]
 802c6f2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 802c6f4:	683b      	ldr	r3, [r7, #0]
 802c6f6:	681b      	ldr	r3, [r3, #0]
 802c6f8:	4a11      	ldr	r2, [pc, #68]	; (802c740 <HAL_ADC_ConfigChannel+0x258>)
 802c6fa:	4293      	cmp	r3, r2
 802c6fc:	d111      	bne.n	802c722 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 802c6fe:	4b11      	ldr	r3, [pc, #68]	; (802c744 <HAL_ADC_ConfigChannel+0x25c>)
 802c700:	681b      	ldr	r3, [r3, #0]
 802c702:	4a11      	ldr	r2, [pc, #68]	; (802c748 <HAL_ADC_ConfigChannel+0x260>)
 802c704:	fba2 2303 	umull	r2, r3, r2, r3
 802c708:	0c9a      	lsrs	r2, r3, #18
 802c70a:	4613      	mov	r3, r2
 802c70c:	009b      	lsls	r3, r3, #2
 802c70e:	4413      	add	r3, r2
 802c710:	005b      	lsls	r3, r3, #1
 802c712:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 802c714:	e002      	b.n	802c71c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 802c716:	68bb      	ldr	r3, [r7, #8]
 802c718:	3b01      	subs	r3, #1
 802c71a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 802c71c:	68bb      	ldr	r3, [r7, #8]
 802c71e:	2b00      	cmp	r3, #0
 802c720:	d1f9      	bne.n	802c716 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 802c722:	687b      	ldr	r3, [r7, #4]
 802c724:	2200      	movs	r2, #0
 802c726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 802c72a:	2300      	movs	r3, #0
}
 802c72c:	4618      	mov	r0, r3
 802c72e:	3714      	adds	r7, #20
 802c730:	46bd      	mov	sp, r7
 802c732:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c736:	4770      	bx	lr
 802c738:	40012300 	.word	0x40012300
 802c73c:	40012000 	.word	0x40012000
 802c740:	10000012 	.word	0x10000012
 802c744:	20000294 	.word	0x20000294
 802c748:	431bde83 	.word	0x431bde83

0802c74c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 802c74c:	b480      	push	{r7}
 802c74e:	b085      	sub	sp, #20
 802c750:	af00      	add	r7, sp, #0
 802c752:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 802c754:	4b79      	ldr	r3, [pc, #484]	; (802c93c <ADC_Init+0x1f0>)
 802c756:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 802c758:	68fb      	ldr	r3, [r7, #12]
 802c75a:	685b      	ldr	r3, [r3, #4]
 802c75c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 802c760:	68fb      	ldr	r3, [r7, #12]
 802c762:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 802c764:	68fb      	ldr	r3, [r7, #12]
 802c766:	685a      	ldr	r2, [r3, #4]
 802c768:	687b      	ldr	r3, [r7, #4]
 802c76a:	685b      	ldr	r3, [r3, #4]
 802c76c:	431a      	orrs	r2, r3
 802c76e:	68fb      	ldr	r3, [r7, #12]
 802c770:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 802c772:	687b      	ldr	r3, [r7, #4]
 802c774:	681b      	ldr	r3, [r3, #0]
 802c776:	685a      	ldr	r2, [r3, #4]
 802c778:	687b      	ldr	r3, [r7, #4]
 802c77a:	681b      	ldr	r3, [r3, #0]
 802c77c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802c780:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 802c782:	687b      	ldr	r3, [r7, #4]
 802c784:	681b      	ldr	r3, [r3, #0]
 802c786:	6859      	ldr	r1, [r3, #4]
 802c788:	687b      	ldr	r3, [r7, #4]
 802c78a:	691b      	ldr	r3, [r3, #16]
 802c78c:	021a      	lsls	r2, r3, #8
 802c78e:	687b      	ldr	r3, [r7, #4]
 802c790:	681b      	ldr	r3, [r3, #0]
 802c792:	430a      	orrs	r2, r1
 802c794:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 802c796:	687b      	ldr	r3, [r7, #4]
 802c798:	681b      	ldr	r3, [r3, #0]
 802c79a:	685a      	ldr	r2, [r3, #4]
 802c79c:	687b      	ldr	r3, [r7, #4]
 802c79e:	681b      	ldr	r3, [r3, #0]
 802c7a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 802c7a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 802c7a6:	687b      	ldr	r3, [r7, #4]
 802c7a8:	681b      	ldr	r3, [r3, #0]
 802c7aa:	6859      	ldr	r1, [r3, #4]
 802c7ac:	687b      	ldr	r3, [r7, #4]
 802c7ae:	689a      	ldr	r2, [r3, #8]
 802c7b0:	687b      	ldr	r3, [r7, #4]
 802c7b2:	681b      	ldr	r3, [r3, #0]
 802c7b4:	430a      	orrs	r2, r1
 802c7b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 802c7b8:	687b      	ldr	r3, [r7, #4]
 802c7ba:	681b      	ldr	r3, [r3, #0]
 802c7bc:	689a      	ldr	r2, [r3, #8]
 802c7be:	687b      	ldr	r3, [r7, #4]
 802c7c0:	681b      	ldr	r3, [r3, #0]
 802c7c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802c7c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 802c7c8:	687b      	ldr	r3, [r7, #4]
 802c7ca:	681b      	ldr	r3, [r3, #0]
 802c7cc:	6899      	ldr	r1, [r3, #8]
 802c7ce:	687b      	ldr	r3, [r7, #4]
 802c7d0:	68da      	ldr	r2, [r3, #12]
 802c7d2:	687b      	ldr	r3, [r7, #4]
 802c7d4:	681b      	ldr	r3, [r3, #0]
 802c7d6:	430a      	orrs	r2, r1
 802c7d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 802c7da:	687b      	ldr	r3, [r7, #4]
 802c7dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802c7de:	4a58      	ldr	r2, [pc, #352]	; (802c940 <ADC_Init+0x1f4>)
 802c7e0:	4293      	cmp	r3, r2
 802c7e2:	d022      	beq.n	802c82a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 802c7e4:	687b      	ldr	r3, [r7, #4]
 802c7e6:	681b      	ldr	r3, [r3, #0]
 802c7e8:	689a      	ldr	r2, [r3, #8]
 802c7ea:	687b      	ldr	r3, [r7, #4]
 802c7ec:	681b      	ldr	r3, [r3, #0]
 802c7ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 802c7f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 802c7f4:	687b      	ldr	r3, [r7, #4]
 802c7f6:	681b      	ldr	r3, [r3, #0]
 802c7f8:	6899      	ldr	r1, [r3, #8]
 802c7fa:	687b      	ldr	r3, [r7, #4]
 802c7fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802c7fe:	687b      	ldr	r3, [r7, #4]
 802c800:	681b      	ldr	r3, [r3, #0]
 802c802:	430a      	orrs	r2, r1
 802c804:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 802c806:	687b      	ldr	r3, [r7, #4]
 802c808:	681b      	ldr	r3, [r3, #0]
 802c80a:	689a      	ldr	r2, [r3, #8]
 802c80c:	687b      	ldr	r3, [r7, #4]
 802c80e:	681b      	ldr	r3, [r3, #0]
 802c810:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 802c814:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 802c816:	687b      	ldr	r3, [r7, #4]
 802c818:	681b      	ldr	r3, [r3, #0]
 802c81a:	6899      	ldr	r1, [r3, #8]
 802c81c:	687b      	ldr	r3, [r7, #4]
 802c81e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802c820:	687b      	ldr	r3, [r7, #4]
 802c822:	681b      	ldr	r3, [r3, #0]
 802c824:	430a      	orrs	r2, r1
 802c826:	609a      	str	r2, [r3, #8]
 802c828:	e00f      	b.n	802c84a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 802c82a:	687b      	ldr	r3, [r7, #4]
 802c82c:	681b      	ldr	r3, [r3, #0]
 802c82e:	689a      	ldr	r2, [r3, #8]
 802c830:	687b      	ldr	r3, [r7, #4]
 802c832:	681b      	ldr	r3, [r3, #0]
 802c834:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 802c838:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 802c83a:	687b      	ldr	r3, [r7, #4]
 802c83c:	681b      	ldr	r3, [r3, #0]
 802c83e:	689a      	ldr	r2, [r3, #8]
 802c840:	687b      	ldr	r3, [r7, #4]
 802c842:	681b      	ldr	r3, [r3, #0]
 802c844:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 802c848:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 802c84a:	687b      	ldr	r3, [r7, #4]
 802c84c:	681b      	ldr	r3, [r3, #0]
 802c84e:	689a      	ldr	r2, [r3, #8]
 802c850:	687b      	ldr	r3, [r7, #4]
 802c852:	681b      	ldr	r3, [r3, #0]
 802c854:	f022 0202 	bic.w	r2, r2, #2
 802c858:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 802c85a:	687b      	ldr	r3, [r7, #4]
 802c85c:	681b      	ldr	r3, [r3, #0]
 802c85e:	6899      	ldr	r1, [r3, #8]
 802c860:	687b      	ldr	r3, [r7, #4]
 802c862:	7e1b      	ldrb	r3, [r3, #24]
 802c864:	005a      	lsls	r2, r3, #1
 802c866:	687b      	ldr	r3, [r7, #4]
 802c868:	681b      	ldr	r3, [r3, #0]
 802c86a:	430a      	orrs	r2, r1
 802c86c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 802c86e:	687b      	ldr	r3, [r7, #4]
 802c870:	f893 3020 	ldrb.w	r3, [r3, #32]
 802c874:	2b00      	cmp	r3, #0
 802c876:	d01b      	beq.n	802c8b0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 802c878:	687b      	ldr	r3, [r7, #4]
 802c87a:	681b      	ldr	r3, [r3, #0]
 802c87c:	685a      	ldr	r2, [r3, #4]
 802c87e:	687b      	ldr	r3, [r7, #4]
 802c880:	681b      	ldr	r3, [r3, #0]
 802c882:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802c886:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 802c888:	687b      	ldr	r3, [r7, #4]
 802c88a:	681b      	ldr	r3, [r3, #0]
 802c88c:	685a      	ldr	r2, [r3, #4]
 802c88e:	687b      	ldr	r3, [r7, #4]
 802c890:	681b      	ldr	r3, [r3, #0]
 802c892:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 802c896:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 802c898:	687b      	ldr	r3, [r7, #4]
 802c89a:	681b      	ldr	r3, [r3, #0]
 802c89c:	6859      	ldr	r1, [r3, #4]
 802c89e:	687b      	ldr	r3, [r7, #4]
 802c8a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802c8a2:	3b01      	subs	r3, #1
 802c8a4:	035a      	lsls	r2, r3, #13
 802c8a6:	687b      	ldr	r3, [r7, #4]
 802c8a8:	681b      	ldr	r3, [r3, #0]
 802c8aa:	430a      	orrs	r2, r1
 802c8ac:	605a      	str	r2, [r3, #4]
 802c8ae:	e007      	b.n	802c8c0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 802c8b0:	687b      	ldr	r3, [r7, #4]
 802c8b2:	681b      	ldr	r3, [r3, #0]
 802c8b4:	685a      	ldr	r2, [r3, #4]
 802c8b6:	687b      	ldr	r3, [r7, #4]
 802c8b8:	681b      	ldr	r3, [r3, #0]
 802c8ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802c8be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 802c8c0:	687b      	ldr	r3, [r7, #4]
 802c8c2:	681b      	ldr	r3, [r3, #0]
 802c8c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802c8c6:	687b      	ldr	r3, [r7, #4]
 802c8c8:	681b      	ldr	r3, [r3, #0]
 802c8ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 802c8ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 802c8d0:	687b      	ldr	r3, [r7, #4]
 802c8d2:	681b      	ldr	r3, [r3, #0]
 802c8d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 802c8d6:	687b      	ldr	r3, [r7, #4]
 802c8d8:	69db      	ldr	r3, [r3, #28]
 802c8da:	3b01      	subs	r3, #1
 802c8dc:	051a      	lsls	r2, r3, #20
 802c8de:	687b      	ldr	r3, [r7, #4]
 802c8e0:	681b      	ldr	r3, [r3, #0]
 802c8e2:	430a      	orrs	r2, r1
 802c8e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 802c8e6:	687b      	ldr	r3, [r7, #4]
 802c8e8:	681b      	ldr	r3, [r3, #0]
 802c8ea:	689a      	ldr	r2, [r3, #8]
 802c8ec:	687b      	ldr	r3, [r7, #4]
 802c8ee:	681b      	ldr	r3, [r3, #0]
 802c8f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 802c8f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 802c8f6:	687b      	ldr	r3, [r7, #4]
 802c8f8:	681b      	ldr	r3, [r3, #0]
 802c8fa:	6899      	ldr	r1, [r3, #8]
 802c8fc:	687b      	ldr	r3, [r7, #4]
 802c8fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 802c902:	025a      	lsls	r2, r3, #9
 802c904:	687b      	ldr	r3, [r7, #4]
 802c906:	681b      	ldr	r3, [r3, #0]
 802c908:	430a      	orrs	r2, r1
 802c90a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 802c90c:	687b      	ldr	r3, [r7, #4]
 802c90e:	681b      	ldr	r3, [r3, #0]
 802c910:	689a      	ldr	r2, [r3, #8]
 802c912:	687b      	ldr	r3, [r7, #4]
 802c914:	681b      	ldr	r3, [r3, #0]
 802c916:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802c91a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 802c91c:	687b      	ldr	r3, [r7, #4]
 802c91e:	681b      	ldr	r3, [r3, #0]
 802c920:	6899      	ldr	r1, [r3, #8]
 802c922:	687b      	ldr	r3, [r7, #4]
 802c924:	695b      	ldr	r3, [r3, #20]
 802c926:	029a      	lsls	r2, r3, #10
 802c928:	687b      	ldr	r3, [r7, #4]
 802c92a:	681b      	ldr	r3, [r3, #0]
 802c92c:	430a      	orrs	r2, r1
 802c92e:	609a      	str	r2, [r3, #8]
}
 802c930:	bf00      	nop
 802c932:	3714      	adds	r7, #20
 802c934:	46bd      	mov	sp, r7
 802c936:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c93a:	4770      	bx	lr
 802c93c:	40012300 	.word	0x40012300
 802c940:	0f000001 	.word	0x0f000001

0802c944 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 802c944:	b580      	push	{r7, lr}
 802c946:	b084      	sub	sp, #16
 802c948:	af00      	add	r7, sp, #0
 802c94a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 802c94c:	687b      	ldr	r3, [r7, #4]
 802c94e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c950:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 802c952:	68fb      	ldr	r3, [r7, #12]
 802c954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802c956:	f003 0350 	and.w	r3, r3, #80	; 0x50
 802c95a:	2b00      	cmp	r3, #0
 802c95c:	d13c      	bne.n	802c9d8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 802c95e:	68fb      	ldr	r3, [r7, #12]
 802c960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802c962:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 802c966:	68fb      	ldr	r3, [r7, #12]
 802c968:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 802c96a:	68fb      	ldr	r3, [r7, #12]
 802c96c:	681b      	ldr	r3, [r3, #0]
 802c96e:	689b      	ldr	r3, [r3, #8]
 802c970:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 802c974:	2b00      	cmp	r3, #0
 802c976:	d12b      	bne.n	802c9d0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 802c978:	68fb      	ldr	r3, [r7, #12]
 802c97a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 802c97c:	2b00      	cmp	r3, #0
 802c97e:	d127      	bne.n	802c9d0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 802c980:	68fb      	ldr	r3, [r7, #12]
 802c982:	681b      	ldr	r3, [r3, #0]
 802c984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802c986:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 802c98a:	2b00      	cmp	r3, #0
 802c98c:	d006      	beq.n	802c99c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 802c98e:	68fb      	ldr	r3, [r7, #12]
 802c990:	681b      	ldr	r3, [r3, #0]
 802c992:	689b      	ldr	r3, [r3, #8]
 802c994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 802c998:	2b00      	cmp	r3, #0
 802c99a:	d119      	bne.n	802c9d0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 802c99c:	68fb      	ldr	r3, [r7, #12]
 802c99e:	681b      	ldr	r3, [r3, #0]
 802c9a0:	685a      	ldr	r2, [r3, #4]
 802c9a2:	68fb      	ldr	r3, [r7, #12]
 802c9a4:	681b      	ldr	r3, [r3, #0]
 802c9a6:	f022 0220 	bic.w	r2, r2, #32
 802c9aa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 802c9ac:	68fb      	ldr	r3, [r7, #12]
 802c9ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802c9b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 802c9b4:	68fb      	ldr	r3, [r7, #12]
 802c9b6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 802c9b8:	68fb      	ldr	r3, [r7, #12]
 802c9ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802c9bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802c9c0:	2b00      	cmp	r3, #0
 802c9c2:	d105      	bne.n	802c9d0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 802c9c4:	68fb      	ldr	r3, [r7, #12]
 802c9c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802c9c8:	f043 0201 	orr.w	r2, r3, #1
 802c9cc:	68fb      	ldr	r3, [r7, #12]
 802c9ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 802c9d0:	68f8      	ldr	r0, [r7, #12]
 802c9d2:	f7f4 fb71 	bl	80210b8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 802c9d6:	e00e      	b.n	802c9f6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 802c9d8:	68fb      	ldr	r3, [r7, #12]
 802c9da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802c9dc:	f003 0310 	and.w	r3, r3, #16
 802c9e0:	2b00      	cmp	r3, #0
 802c9e2:	d003      	beq.n	802c9ec <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 802c9e4:	68f8      	ldr	r0, [r7, #12]
 802c9e6:	f7ff fd75 	bl	802c4d4 <HAL_ADC_ErrorCallback>
}
 802c9ea:	e004      	b.n	802c9f6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 802c9ec:	68fb      	ldr	r3, [r7, #12]
 802c9ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c9f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802c9f2:	6878      	ldr	r0, [r7, #4]
 802c9f4:	4798      	blx	r3
}
 802c9f6:	bf00      	nop
 802c9f8:	3710      	adds	r7, #16
 802c9fa:	46bd      	mov	sp, r7
 802c9fc:	bd80      	pop	{r7, pc}

0802c9fe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 802c9fe:	b580      	push	{r7, lr}
 802ca00:	b084      	sub	sp, #16
 802ca02:	af00      	add	r7, sp, #0
 802ca04:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 802ca06:	687b      	ldr	r3, [r7, #4]
 802ca08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ca0a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 802ca0c:	68f8      	ldr	r0, [r7, #12]
 802ca0e:	f7f4 fb23 	bl	8021058 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 802ca12:	bf00      	nop
 802ca14:	3710      	adds	r7, #16
 802ca16:	46bd      	mov	sp, r7
 802ca18:	bd80      	pop	{r7, pc}

0802ca1a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 802ca1a:	b580      	push	{r7, lr}
 802ca1c:	b084      	sub	sp, #16
 802ca1e:	af00      	add	r7, sp, #0
 802ca20:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 802ca22:	687b      	ldr	r3, [r7, #4]
 802ca24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ca26:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 802ca28:	68fb      	ldr	r3, [r7, #12]
 802ca2a:	2240      	movs	r2, #64	; 0x40
 802ca2c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 802ca2e:	68fb      	ldr	r3, [r7, #12]
 802ca30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802ca32:	f043 0204 	orr.w	r2, r3, #4
 802ca36:	68fb      	ldr	r3, [r7, #12]
 802ca38:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 802ca3a:	68f8      	ldr	r0, [r7, #12]
 802ca3c:	f7ff fd4a 	bl	802c4d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 802ca40:	bf00      	nop
 802ca42:	3710      	adds	r7, #16
 802ca44:	46bd      	mov	sp, r7
 802ca46:	bd80      	pop	{r7, pc}

0802ca48 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 802ca48:	b580      	push	{r7, lr}
 802ca4a:	b084      	sub	sp, #16
 802ca4c:	af00      	add	r7, sp, #0
 802ca4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 802ca50:	687b      	ldr	r3, [r7, #4]
 802ca52:	2b00      	cmp	r3, #0
 802ca54:	d101      	bne.n	802ca5a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 802ca56:	2301      	movs	r3, #1
 802ca58:	e0ed      	b.n	802cc36 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 802ca5a:	687b      	ldr	r3, [r7, #4]
 802ca5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 802ca60:	b2db      	uxtb	r3, r3
 802ca62:	2b00      	cmp	r3, #0
 802ca64:	d102      	bne.n	802ca6c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 802ca66:	6878      	ldr	r0, [r7, #4]
 802ca68:	f7fe fd3c 	bl	802b4e4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 802ca6c:	687b      	ldr	r3, [r7, #4]
 802ca6e:	681b      	ldr	r3, [r3, #0]
 802ca70:	681a      	ldr	r2, [r3, #0]
 802ca72:	687b      	ldr	r3, [r7, #4]
 802ca74:	681b      	ldr	r3, [r3, #0]
 802ca76:	f022 0202 	bic.w	r2, r2, #2
 802ca7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 802ca7c:	f7ff fbe4 	bl	802c248 <HAL_GetTick>
 802ca80:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 802ca82:	e012      	b.n	802caaa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 802ca84:	f7ff fbe0 	bl	802c248 <HAL_GetTick>
 802ca88:	4602      	mov	r2, r0
 802ca8a:	68fb      	ldr	r3, [r7, #12]
 802ca8c:	1ad3      	subs	r3, r2, r3
 802ca8e:	2b0a      	cmp	r3, #10
 802ca90:	d90b      	bls.n	802caaa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 802ca92:	687b      	ldr	r3, [r7, #4]
 802ca94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ca96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 802ca9a:	687b      	ldr	r3, [r7, #4]
 802ca9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 802ca9e:	687b      	ldr	r3, [r7, #4]
 802caa0:	2205      	movs	r2, #5
 802caa2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 802caa6:	2301      	movs	r3, #1
 802caa8:	e0c5      	b.n	802cc36 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 802caaa:	687b      	ldr	r3, [r7, #4]
 802caac:	681b      	ldr	r3, [r3, #0]
 802caae:	685b      	ldr	r3, [r3, #4]
 802cab0:	f003 0302 	and.w	r3, r3, #2
 802cab4:	2b00      	cmp	r3, #0
 802cab6:	d1e5      	bne.n	802ca84 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 802cab8:	687b      	ldr	r3, [r7, #4]
 802caba:	681b      	ldr	r3, [r3, #0]
 802cabc:	681a      	ldr	r2, [r3, #0]
 802cabe:	687b      	ldr	r3, [r7, #4]
 802cac0:	681b      	ldr	r3, [r3, #0]
 802cac2:	f042 0201 	orr.w	r2, r2, #1
 802cac6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 802cac8:	f7ff fbbe 	bl	802c248 <HAL_GetTick>
 802cacc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 802cace:	e012      	b.n	802caf6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 802cad0:	f7ff fbba 	bl	802c248 <HAL_GetTick>
 802cad4:	4602      	mov	r2, r0
 802cad6:	68fb      	ldr	r3, [r7, #12]
 802cad8:	1ad3      	subs	r3, r2, r3
 802cada:	2b0a      	cmp	r3, #10
 802cadc:	d90b      	bls.n	802caf6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 802cade:	687b      	ldr	r3, [r7, #4]
 802cae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802cae2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 802cae6:	687b      	ldr	r3, [r7, #4]
 802cae8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 802caea:	687b      	ldr	r3, [r7, #4]
 802caec:	2205      	movs	r2, #5
 802caee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 802caf2:	2301      	movs	r3, #1
 802caf4:	e09f      	b.n	802cc36 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 802caf6:	687b      	ldr	r3, [r7, #4]
 802caf8:	681b      	ldr	r3, [r3, #0]
 802cafa:	685b      	ldr	r3, [r3, #4]
 802cafc:	f003 0301 	and.w	r3, r3, #1
 802cb00:	2b00      	cmp	r3, #0
 802cb02:	d0e5      	beq.n	802cad0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 802cb04:	687b      	ldr	r3, [r7, #4]
 802cb06:	7e1b      	ldrb	r3, [r3, #24]
 802cb08:	2b01      	cmp	r3, #1
 802cb0a:	d108      	bne.n	802cb1e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 802cb0c:	687b      	ldr	r3, [r7, #4]
 802cb0e:	681b      	ldr	r3, [r3, #0]
 802cb10:	681a      	ldr	r2, [r3, #0]
 802cb12:	687b      	ldr	r3, [r7, #4]
 802cb14:	681b      	ldr	r3, [r3, #0]
 802cb16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802cb1a:	601a      	str	r2, [r3, #0]
 802cb1c:	e007      	b.n	802cb2e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 802cb1e:	687b      	ldr	r3, [r7, #4]
 802cb20:	681b      	ldr	r3, [r3, #0]
 802cb22:	681a      	ldr	r2, [r3, #0]
 802cb24:	687b      	ldr	r3, [r7, #4]
 802cb26:	681b      	ldr	r3, [r3, #0]
 802cb28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802cb2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 802cb2e:	687b      	ldr	r3, [r7, #4]
 802cb30:	7e5b      	ldrb	r3, [r3, #25]
 802cb32:	2b01      	cmp	r3, #1
 802cb34:	d108      	bne.n	802cb48 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 802cb36:	687b      	ldr	r3, [r7, #4]
 802cb38:	681b      	ldr	r3, [r3, #0]
 802cb3a:	681a      	ldr	r2, [r3, #0]
 802cb3c:	687b      	ldr	r3, [r7, #4]
 802cb3e:	681b      	ldr	r3, [r3, #0]
 802cb40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802cb44:	601a      	str	r2, [r3, #0]
 802cb46:	e007      	b.n	802cb58 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 802cb48:	687b      	ldr	r3, [r7, #4]
 802cb4a:	681b      	ldr	r3, [r3, #0]
 802cb4c:	681a      	ldr	r2, [r3, #0]
 802cb4e:	687b      	ldr	r3, [r7, #4]
 802cb50:	681b      	ldr	r3, [r3, #0]
 802cb52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802cb56:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 802cb58:	687b      	ldr	r3, [r7, #4]
 802cb5a:	7e9b      	ldrb	r3, [r3, #26]
 802cb5c:	2b01      	cmp	r3, #1
 802cb5e:	d108      	bne.n	802cb72 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 802cb60:	687b      	ldr	r3, [r7, #4]
 802cb62:	681b      	ldr	r3, [r3, #0]
 802cb64:	681a      	ldr	r2, [r3, #0]
 802cb66:	687b      	ldr	r3, [r7, #4]
 802cb68:	681b      	ldr	r3, [r3, #0]
 802cb6a:	f042 0220 	orr.w	r2, r2, #32
 802cb6e:	601a      	str	r2, [r3, #0]
 802cb70:	e007      	b.n	802cb82 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 802cb72:	687b      	ldr	r3, [r7, #4]
 802cb74:	681b      	ldr	r3, [r3, #0]
 802cb76:	681a      	ldr	r2, [r3, #0]
 802cb78:	687b      	ldr	r3, [r7, #4]
 802cb7a:	681b      	ldr	r3, [r3, #0]
 802cb7c:	f022 0220 	bic.w	r2, r2, #32
 802cb80:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 802cb82:	687b      	ldr	r3, [r7, #4]
 802cb84:	7edb      	ldrb	r3, [r3, #27]
 802cb86:	2b01      	cmp	r3, #1
 802cb88:	d108      	bne.n	802cb9c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 802cb8a:	687b      	ldr	r3, [r7, #4]
 802cb8c:	681b      	ldr	r3, [r3, #0]
 802cb8e:	681a      	ldr	r2, [r3, #0]
 802cb90:	687b      	ldr	r3, [r7, #4]
 802cb92:	681b      	ldr	r3, [r3, #0]
 802cb94:	f022 0210 	bic.w	r2, r2, #16
 802cb98:	601a      	str	r2, [r3, #0]
 802cb9a:	e007      	b.n	802cbac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 802cb9c:	687b      	ldr	r3, [r7, #4]
 802cb9e:	681b      	ldr	r3, [r3, #0]
 802cba0:	681a      	ldr	r2, [r3, #0]
 802cba2:	687b      	ldr	r3, [r7, #4]
 802cba4:	681b      	ldr	r3, [r3, #0]
 802cba6:	f042 0210 	orr.w	r2, r2, #16
 802cbaa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 802cbac:	687b      	ldr	r3, [r7, #4]
 802cbae:	7f1b      	ldrb	r3, [r3, #28]
 802cbb0:	2b01      	cmp	r3, #1
 802cbb2:	d108      	bne.n	802cbc6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 802cbb4:	687b      	ldr	r3, [r7, #4]
 802cbb6:	681b      	ldr	r3, [r3, #0]
 802cbb8:	681a      	ldr	r2, [r3, #0]
 802cbba:	687b      	ldr	r3, [r7, #4]
 802cbbc:	681b      	ldr	r3, [r3, #0]
 802cbbe:	f042 0208 	orr.w	r2, r2, #8
 802cbc2:	601a      	str	r2, [r3, #0]
 802cbc4:	e007      	b.n	802cbd6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 802cbc6:	687b      	ldr	r3, [r7, #4]
 802cbc8:	681b      	ldr	r3, [r3, #0]
 802cbca:	681a      	ldr	r2, [r3, #0]
 802cbcc:	687b      	ldr	r3, [r7, #4]
 802cbce:	681b      	ldr	r3, [r3, #0]
 802cbd0:	f022 0208 	bic.w	r2, r2, #8
 802cbd4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 802cbd6:	687b      	ldr	r3, [r7, #4]
 802cbd8:	7f5b      	ldrb	r3, [r3, #29]
 802cbda:	2b01      	cmp	r3, #1
 802cbdc:	d108      	bne.n	802cbf0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 802cbde:	687b      	ldr	r3, [r7, #4]
 802cbe0:	681b      	ldr	r3, [r3, #0]
 802cbe2:	681a      	ldr	r2, [r3, #0]
 802cbe4:	687b      	ldr	r3, [r7, #4]
 802cbe6:	681b      	ldr	r3, [r3, #0]
 802cbe8:	f042 0204 	orr.w	r2, r2, #4
 802cbec:	601a      	str	r2, [r3, #0]
 802cbee:	e007      	b.n	802cc00 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 802cbf0:	687b      	ldr	r3, [r7, #4]
 802cbf2:	681b      	ldr	r3, [r3, #0]
 802cbf4:	681a      	ldr	r2, [r3, #0]
 802cbf6:	687b      	ldr	r3, [r7, #4]
 802cbf8:	681b      	ldr	r3, [r3, #0]
 802cbfa:	f022 0204 	bic.w	r2, r2, #4
 802cbfe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 802cc00:	687b      	ldr	r3, [r7, #4]
 802cc02:	689a      	ldr	r2, [r3, #8]
 802cc04:	687b      	ldr	r3, [r7, #4]
 802cc06:	68db      	ldr	r3, [r3, #12]
 802cc08:	431a      	orrs	r2, r3
 802cc0a:	687b      	ldr	r3, [r7, #4]
 802cc0c:	691b      	ldr	r3, [r3, #16]
 802cc0e:	431a      	orrs	r2, r3
 802cc10:	687b      	ldr	r3, [r7, #4]
 802cc12:	695b      	ldr	r3, [r3, #20]
 802cc14:	ea42 0103 	orr.w	r1, r2, r3
 802cc18:	687b      	ldr	r3, [r7, #4]
 802cc1a:	685b      	ldr	r3, [r3, #4]
 802cc1c:	1e5a      	subs	r2, r3, #1
 802cc1e:	687b      	ldr	r3, [r7, #4]
 802cc20:	681b      	ldr	r3, [r3, #0]
 802cc22:	430a      	orrs	r2, r1
 802cc24:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 802cc26:	687b      	ldr	r3, [r7, #4]
 802cc28:	2200      	movs	r2, #0
 802cc2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 802cc2c:	687b      	ldr	r3, [r7, #4]
 802cc2e:	2201      	movs	r2, #1
 802cc30:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 802cc34:	2300      	movs	r3, #0
}
 802cc36:	4618      	mov	r0, r3
 802cc38:	3710      	adds	r7, #16
 802cc3a:	46bd      	mov	sp, r7
 802cc3c:	bd80      	pop	{r7, pc}
	...

0802cc40 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 802cc40:	b480      	push	{r7}
 802cc42:	b087      	sub	sp, #28
 802cc44:	af00      	add	r7, sp, #0
 802cc46:	6078      	str	r0, [r7, #4]
 802cc48:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 802cc4a:	687b      	ldr	r3, [r7, #4]
 802cc4c:	681b      	ldr	r3, [r3, #0]
 802cc4e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 802cc50:	687b      	ldr	r3, [r7, #4]
 802cc52:	f893 3020 	ldrb.w	r3, [r3, #32]
 802cc56:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 802cc58:	7cfb      	ldrb	r3, [r7, #19]
 802cc5a:	2b01      	cmp	r3, #1
 802cc5c:	d003      	beq.n	802cc66 <HAL_CAN_ConfigFilter+0x26>
 802cc5e:	7cfb      	ldrb	r3, [r7, #19]
 802cc60:	2b02      	cmp	r3, #2
 802cc62:	f040 80c7 	bne.w	802cdf4 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 802cc66:	687b      	ldr	r3, [r7, #4]
 802cc68:	681b      	ldr	r3, [r3, #0]
 802cc6a:	4a69      	ldr	r2, [pc, #420]	; (802ce10 <HAL_CAN_ConfigFilter+0x1d0>)
 802cc6c:	4293      	cmp	r3, r2
 802cc6e:	d001      	beq.n	802cc74 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 802cc70:	4b68      	ldr	r3, [pc, #416]	; (802ce14 <HAL_CAN_ConfigFilter+0x1d4>)
 802cc72:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 802cc74:	697b      	ldr	r3, [r7, #20]
 802cc76:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 802cc7a:	f043 0201 	orr.w	r2, r3, #1
 802cc7e:	697b      	ldr	r3, [r7, #20]
 802cc80:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 802cc84:	697b      	ldr	r3, [r7, #20]
 802cc86:	4a63      	ldr	r2, [pc, #396]	; (802ce14 <HAL_CAN_ConfigFilter+0x1d4>)
 802cc88:	4293      	cmp	r3, r2
 802cc8a:	d111      	bne.n	802ccb0 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 802cc8c:	697b      	ldr	r3, [r7, #20]
 802cc8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 802cc92:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 802cc96:	697b      	ldr	r3, [r7, #20]
 802cc98:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 802cc9c:	697b      	ldr	r3, [r7, #20]
 802cc9e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 802cca2:	683b      	ldr	r3, [r7, #0]
 802cca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802cca6:	021b      	lsls	r3, r3, #8
 802cca8:	431a      	orrs	r2, r3
 802ccaa:	697b      	ldr	r3, [r7, #20]
 802ccac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 802ccb0:	683b      	ldr	r3, [r7, #0]
 802ccb2:	695b      	ldr	r3, [r3, #20]
 802ccb4:	f003 031f 	and.w	r3, r3, #31
 802ccb8:	2201      	movs	r2, #1
 802ccba:	fa02 f303 	lsl.w	r3, r2, r3
 802ccbe:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 802ccc0:	697b      	ldr	r3, [r7, #20]
 802ccc2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 802ccc6:	68fb      	ldr	r3, [r7, #12]
 802ccc8:	43db      	mvns	r3, r3
 802ccca:	401a      	ands	r2, r3
 802cccc:	697b      	ldr	r3, [r7, #20]
 802ccce:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 802ccd2:	683b      	ldr	r3, [r7, #0]
 802ccd4:	69db      	ldr	r3, [r3, #28]
 802ccd6:	2b00      	cmp	r3, #0
 802ccd8:	d123      	bne.n	802cd22 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 802ccda:	697b      	ldr	r3, [r7, #20]
 802ccdc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 802cce0:	68fb      	ldr	r3, [r7, #12]
 802cce2:	43db      	mvns	r3, r3
 802cce4:	401a      	ands	r2, r3
 802cce6:	697b      	ldr	r3, [r7, #20]
 802cce8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 802ccec:	683b      	ldr	r3, [r7, #0]
 802ccee:	68db      	ldr	r3, [r3, #12]
 802ccf0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 802ccf2:	683b      	ldr	r3, [r7, #0]
 802ccf4:	685b      	ldr	r3, [r3, #4]
 802ccf6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 802ccf8:	683a      	ldr	r2, [r7, #0]
 802ccfa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 802ccfc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 802ccfe:	697b      	ldr	r3, [r7, #20]
 802cd00:	3248      	adds	r2, #72	; 0x48
 802cd02:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 802cd06:	683b      	ldr	r3, [r7, #0]
 802cd08:	689b      	ldr	r3, [r3, #8]
 802cd0a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 802cd0c:	683b      	ldr	r3, [r7, #0]
 802cd0e:	681b      	ldr	r3, [r3, #0]
 802cd10:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 802cd12:	683b      	ldr	r3, [r7, #0]
 802cd14:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 802cd16:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 802cd18:	6979      	ldr	r1, [r7, #20]
 802cd1a:	3348      	adds	r3, #72	; 0x48
 802cd1c:	00db      	lsls	r3, r3, #3
 802cd1e:	440b      	add	r3, r1
 802cd20:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 802cd22:	683b      	ldr	r3, [r7, #0]
 802cd24:	69db      	ldr	r3, [r3, #28]
 802cd26:	2b01      	cmp	r3, #1
 802cd28:	d122      	bne.n	802cd70 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 802cd2a:	697b      	ldr	r3, [r7, #20]
 802cd2c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 802cd30:	68fb      	ldr	r3, [r7, #12]
 802cd32:	431a      	orrs	r2, r3
 802cd34:	697b      	ldr	r3, [r7, #20]
 802cd36:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 802cd3a:	683b      	ldr	r3, [r7, #0]
 802cd3c:	681b      	ldr	r3, [r3, #0]
 802cd3e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 802cd40:	683b      	ldr	r3, [r7, #0]
 802cd42:	685b      	ldr	r3, [r3, #4]
 802cd44:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 802cd46:	683a      	ldr	r2, [r7, #0]
 802cd48:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 802cd4a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 802cd4c:	697b      	ldr	r3, [r7, #20]
 802cd4e:	3248      	adds	r2, #72	; 0x48
 802cd50:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 802cd54:	683b      	ldr	r3, [r7, #0]
 802cd56:	689b      	ldr	r3, [r3, #8]
 802cd58:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 802cd5a:	683b      	ldr	r3, [r7, #0]
 802cd5c:	68db      	ldr	r3, [r3, #12]
 802cd5e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 802cd60:	683b      	ldr	r3, [r7, #0]
 802cd62:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 802cd64:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 802cd66:	6979      	ldr	r1, [r7, #20]
 802cd68:	3348      	adds	r3, #72	; 0x48
 802cd6a:	00db      	lsls	r3, r3, #3
 802cd6c:	440b      	add	r3, r1
 802cd6e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 802cd70:	683b      	ldr	r3, [r7, #0]
 802cd72:	699b      	ldr	r3, [r3, #24]
 802cd74:	2b00      	cmp	r3, #0
 802cd76:	d109      	bne.n	802cd8c <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 802cd78:	697b      	ldr	r3, [r7, #20]
 802cd7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 802cd7e:	68fb      	ldr	r3, [r7, #12]
 802cd80:	43db      	mvns	r3, r3
 802cd82:	401a      	ands	r2, r3
 802cd84:	697b      	ldr	r3, [r7, #20]
 802cd86:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 802cd8a:	e007      	b.n	802cd9c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 802cd8c:	697b      	ldr	r3, [r7, #20]
 802cd8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 802cd92:	68fb      	ldr	r3, [r7, #12]
 802cd94:	431a      	orrs	r2, r3
 802cd96:	697b      	ldr	r3, [r7, #20]
 802cd98:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 802cd9c:	683b      	ldr	r3, [r7, #0]
 802cd9e:	691b      	ldr	r3, [r3, #16]
 802cda0:	2b00      	cmp	r3, #0
 802cda2:	d109      	bne.n	802cdb8 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 802cda4:	697b      	ldr	r3, [r7, #20]
 802cda6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 802cdaa:	68fb      	ldr	r3, [r7, #12]
 802cdac:	43db      	mvns	r3, r3
 802cdae:	401a      	ands	r2, r3
 802cdb0:	697b      	ldr	r3, [r7, #20]
 802cdb2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 802cdb6:	e007      	b.n	802cdc8 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 802cdb8:	697b      	ldr	r3, [r7, #20]
 802cdba:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 802cdbe:	68fb      	ldr	r3, [r7, #12]
 802cdc0:	431a      	orrs	r2, r3
 802cdc2:	697b      	ldr	r3, [r7, #20]
 802cdc4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 802cdc8:	683b      	ldr	r3, [r7, #0]
 802cdca:	6a1b      	ldr	r3, [r3, #32]
 802cdcc:	2b01      	cmp	r3, #1
 802cdce:	d107      	bne.n	802cde0 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 802cdd0:	697b      	ldr	r3, [r7, #20]
 802cdd2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 802cdd6:	68fb      	ldr	r3, [r7, #12]
 802cdd8:	431a      	orrs	r2, r3
 802cdda:	697b      	ldr	r3, [r7, #20]
 802cddc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 802cde0:	697b      	ldr	r3, [r7, #20]
 802cde2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 802cde6:	f023 0201 	bic.w	r2, r3, #1
 802cdea:	697b      	ldr	r3, [r7, #20]
 802cdec:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 802cdf0:	2300      	movs	r3, #0
 802cdf2:	e006      	b.n	802ce02 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 802cdf4:	687b      	ldr	r3, [r7, #4]
 802cdf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802cdf8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 802cdfc:	687b      	ldr	r3, [r7, #4]
 802cdfe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 802ce00:	2301      	movs	r3, #1
  }
}
 802ce02:	4618      	mov	r0, r3
 802ce04:	371c      	adds	r7, #28
 802ce06:	46bd      	mov	sp, r7
 802ce08:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ce0c:	4770      	bx	lr
 802ce0e:	bf00      	nop
 802ce10:	40006c00 	.word	0x40006c00
 802ce14:	40006400 	.word	0x40006400

0802ce18 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 802ce18:	b580      	push	{r7, lr}
 802ce1a:	b084      	sub	sp, #16
 802ce1c:	af00      	add	r7, sp, #0
 802ce1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 802ce20:	687b      	ldr	r3, [r7, #4]
 802ce22:	f893 3020 	ldrb.w	r3, [r3, #32]
 802ce26:	b2db      	uxtb	r3, r3
 802ce28:	2b01      	cmp	r3, #1
 802ce2a:	d12e      	bne.n	802ce8a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 802ce2c:	687b      	ldr	r3, [r7, #4]
 802ce2e:	2202      	movs	r2, #2
 802ce30:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 802ce34:	687b      	ldr	r3, [r7, #4]
 802ce36:	681b      	ldr	r3, [r3, #0]
 802ce38:	681a      	ldr	r2, [r3, #0]
 802ce3a:	687b      	ldr	r3, [r7, #4]
 802ce3c:	681b      	ldr	r3, [r3, #0]
 802ce3e:	f022 0201 	bic.w	r2, r2, #1
 802ce42:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 802ce44:	f7ff fa00 	bl	802c248 <HAL_GetTick>
 802ce48:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 802ce4a:	e012      	b.n	802ce72 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 802ce4c:	f7ff f9fc 	bl	802c248 <HAL_GetTick>
 802ce50:	4602      	mov	r2, r0
 802ce52:	68fb      	ldr	r3, [r7, #12]
 802ce54:	1ad3      	subs	r3, r2, r3
 802ce56:	2b0a      	cmp	r3, #10
 802ce58:	d90b      	bls.n	802ce72 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 802ce5a:	687b      	ldr	r3, [r7, #4]
 802ce5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ce5e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 802ce62:	687b      	ldr	r3, [r7, #4]
 802ce64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 802ce66:	687b      	ldr	r3, [r7, #4]
 802ce68:	2205      	movs	r2, #5
 802ce6a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 802ce6e:	2301      	movs	r3, #1
 802ce70:	e012      	b.n	802ce98 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 802ce72:	687b      	ldr	r3, [r7, #4]
 802ce74:	681b      	ldr	r3, [r3, #0]
 802ce76:	685b      	ldr	r3, [r3, #4]
 802ce78:	f003 0301 	and.w	r3, r3, #1
 802ce7c:	2b00      	cmp	r3, #0
 802ce7e:	d1e5      	bne.n	802ce4c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 802ce80:	687b      	ldr	r3, [r7, #4]
 802ce82:	2200      	movs	r2, #0
 802ce84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 802ce86:	2300      	movs	r3, #0
 802ce88:	e006      	b.n	802ce98 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 802ce8a:	687b      	ldr	r3, [r7, #4]
 802ce8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ce8e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 802ce92:	687b      	ldr	r3, [r7, #4]
 802ce94:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 802ce96:	2301      	movs	r3, #1
  }
}
 802ce98:	4618      	mov	r0, r3
 802ce9a:	3710      	adds	r7, #16
 802ce9c:	46bd      	mov	sp, r7
 802ce9e:	bd80      	pop	{r7, pc}

0802cea0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 802cea0:	b480      	push	{r7}
 802cea2:	b089      	sub	sp, #36	; 0x24
 802cea4:	af00      	add	r7, sp, #0
 802cea6:	60f8      	str	r0, [r7, #12]
 802cea8:	60b9      	str	r1, [r7, #8]
 802ceaa:	607a      	str	r2, [r7, #4]
 802ceac:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 802ceae:	68fb      	ldr	r3, [r7, #12]
 802ceb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 802ceb4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 802ceb6:	68fb      	ldr	r3, [r7, #12]
 802ceb8:	681b      	ldr	r3, [r3, #0]
 802ceba:	689b      	ldr	r3, [r3, #8]
 802cebc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 802cebe:	7ffb      	ldrb	r3, [r7, #31]
 802cec0:	2b01      	cmp	r3, #1
 802cec2:	d003      	beq.n	802cecc <HAL_CAN_AddTxMessage+0x2c>
 802cec4:	7ffb      	ldrb	r3, [r7, #31]
 802cec6:	2b02      	cmp	r3, #2
 802cec8:	f040 80b8 	bne.w	802d03c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 802cecc:	69bb      	ldr	r3, [r7, #24]
 802cece:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 802ced2:	2b00      	cmp	r3, #0
 802ced4:	d10a      	bne.n	802ceec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 802ced6:	69bb      	ldr	r3, [r7, #24]
 802ced8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 802cedc:	2b00      	cmp	r3, #0
 802cede:	d105      	bne.n	802ceec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 802cee0:	69bb      	ldr	r3, [r7, #24]
 802cee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 802cee6:	2b00      	cmp	r3, #0
 802cee8:	f000 80a0 	beq.w	802d02c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 802ceec:	69bb      	ldr	r3, [r7, #24]
 802ceee:	0e1b      	lsrs	r3, r3, #24
 802cef0:	f003 0303 	and.w	r3, r3, #3
 802cef4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 802cef6:	697b      	ldr	r3, [r7, #20]
 802cef8:	2b02      	cmp	r3, #2
 802cefa:	d907      	bls.n	802cf0c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 802cefc:	68fb      	ldr	r3, [r7, #12]
 802cefe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802cf00:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 802cf04:	68fb      	ldr	r3, [r7, #12]
 802cf06:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 802cf08:	2301      	movs	r3, #1
 802cf0a:	e09e      	b.n	802d04a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 802cf0c:	2201      	movs	r2, #1
 802cf0e:	697b      	ldr	r3, [r7, #20]
 802cf10:	409a      	lsls	r2, r3
 802cf12:	683b      	ldr	r3, [r7, #0]
 802cf14:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 802cf16:	68bb      	ldr	r3, [r7, #8]
 802cf18:	689b      	ldr	r3, [r3, #8]
 802cf1a:	2b00      	cmp	r3, #0
 802cf1c:	d10d      	bne.n	802cf3a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 802cf1e:	68bb      	ldr	r3, [r7, #8]
 802cf20:	681b      	ldr	r3, [r3, #0]
 802cf22:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 802cf24:	68bb      	ldr	r3, [r7, #8]
 802cf26:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 802cf28:	68f9      	ldr	r1, [r7, #12]
 802cf2a:	6809      	ldr	r1, [r1, #0]
 802cf2c:	431a      	orrs	r2, r3
 802cf2e:	697b      	ldr	r3, [r7, #20]
 802cf30:	3318      	adds	r3, #24
 802cf32:	011b      	lsls	r3, r3, #4
 802cf34:	440b      	add	r3, r1
 802cf36:	601a      	str	r2, [r3, #0]
 802cf38:	e00f      	b.n	802cf5a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 802cf3a:	68bb      	ldr	r3, [r7, #8]
 802cf3c:	685b      	ldr	r3, [r3, #4]
 802cf3e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 802cf40:	68bb      	ldr	r3, [r7, #8]
 802cf42:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 802cf44:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 802cf46:	68bb      	ldr	r3, [r7, #8]
 802cf48:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 802cf4a:	68f9      	ldr	r1, [r7, #12]
 802cf4c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 802cf4e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 802cf50:	697b      	ldr	r3, [r7, #20]
 802cf52:	3318      	adds	r3, #24
 802cf54:	011b      	lsls	r3, r3, #4
 802cf56:	440b      	add	r3, r1
 802cf58:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 802cf5a:	68fb      	ldr	r3, [r7, #12]
 802cf5c:	6819      	ldr	r1, [r3, #0]
 802cf5e:	68bb      	ldr	r3, [r7, #8]
 802cf60:	691a      	ldr	r2, [r3, #16]
 802cf62:	697b      	ldr	r3, [r7, #20]
 802cf64:	3318      	adds	r3, #24
 802cf66:	011b      	lsls	r3, r3, #4
 802cf68:	440b      	add	r3, r1
 802cf6a:	3304      	adds	r3, #4
 802cf6c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 802cf6e:	68bb      	ldr	r3, [r7, #8]
 802cf70:	7d1b      	ldrb	r3, [r3, #20]
 802cf72:	2b01      	cmp	r3, #1
 802cf74:	d111      	bne.n	802cf9a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 802cf76:	68fb      	ldr	r3, [r7, #12]
 802cf78:	681a      	ldr	r2, [r3, #0]
 802cf7a:	697b      	ldr	r3, [r7, #20]
 802cf7c:	3318      	adds	r3, #24
 802cf7e:	011b      	lsls	r3, r3, #4
 802cf80:	4413      	add	r3, r2
 802cf82:	3304      	adds	r3, #4
 802cf84:	681b      	ldr	r3, [r3, #0]
 802cf86:	68fa      	ldr	r2, [r7, #12]
 802cf88:	6811      	ldr	r1, [r2, #0]
 802cf8a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 802cf8e:	697b      	ldr	r3, [r7, #20]
 802cf90:	3318      	adds	r3, #24
 802cf92:	011b      	lsls	r3, r3, #4
 802cf94:	440b      	add	r3, r1
 802cf96:	3304      	adds	r3, #4
 802cf98:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 802cf9a:	687b      	ldr	r3, [r7, #4]
 802cf9c:	3307      	adds	r3, #7
 802cf9e:	781b      	ldrb	r3, [r3, #0]
 802cfa0:	061a      	lsls	r2, r3, #24
 802cfa2:	687b      	ldr	r3, [r7, #4]
 802cfa4:	3306      	adds	r3, #6
 802cfa6:	781b      	ldrb	r3, [r3, #0]
 802cfa8:	041b      	lsls	r3, r3, #16
 802cfaa:	431a      	orrs	r2, r3
 802cfac:	687b      	ldr	r3, [r7, #4]
 802cfae:	3305      	adds	r3, #5
 802cfb0:	781b      	ldrb	r3, [r3, #0]
 802cfb2:	021b      	lsls	r3, r3, #8
 802cfb4:	4313      	orrs	r3, r2
 802cfb6:	687a      	ldr	r2, [r7, #4]
 802cfb8:	3204      	adds	r2, #4
 802cfba:	7812      	ldrb	r2, [r2, #0]
 802cfbc:	4610      	mov	r0, r2
 802cfbe:	68fa      	ldr	r2, [r7, #12]
 802cfc0:	6811      	ldr	r1, [r2, #0]
 802cfc2:	ea43 0200 	orr.w	r2, r3, r0
 802cfc6:	697b      	ldr	r3, [r7, #20]
 802cfc8:	011b      	lsls	r3, r3, #4
 802cfca:	440b      	add	r3, r1
 802cfcc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 802cfd0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 802cfd2:	687b      	ldr	r3, [r7, #4]
 802cfd4:	3303      	adds	r3, #3
 802cfd6:	781b      	ldrb	r3, [r3, #0]
 802cfd8:	061a      	lsls	r2, r3, #24
 802cfda:	687b      	ldr	r3, [r7, #4]
 802cfdc:	3302      	adds	r3, #2
 802cfde:	781b      	ldrb	r3, [r3, #0]
 802cfe0:	041b      	lsls	r3, r3, #16
 802cfe2:	431a      	orrs	r2, r3
 802cfe4:	687b      	ldr	r3, [r7, #4]
 802cfe6:	3301      	adds	r3, #1
 802cfe8:	781b      	ldrb	r3, [r3, #0]
 802cfea:	021b      	lsls	r3, r3, #8
 802cfec:	4313      	orrs	r3, r2
 802cfee:	687a      	ldr	r2, [r7, #4]
 802cff0:	7812      	ldrb	r2, [r2, #0]
 802cff2:	4610      	mov	r0, r2
 802cff4:	68fa      	ldr	r2, [r7, #12]
 802cff6:	6811      	ldr	r1, [r2, #0]
 802cff8:	ea43 0200 	orr.w	r2, r3, r0
 802cffc:	697b      	ldr	r3, [r7, #20]
 802cffe:	011b      	lsls	r3, r3, #4
 802d000:	440b      	add	r3, r1
 802d002:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 802d006:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 802d008:	68fb      	ldr	r3, [r7, #12]
 802d00a:	681a      	ldr	r2, [r3, #0]
 802d00c:	697b      	ldr	r3, [r7, #20]
 802d00e:	3318      	adds	r3, #24
 802d010:	011b      	lsls	r3, r3, #4
 802d012:	4413      	add	r3, r2
 802d014:	681b      	ldr	r3, [r3, #0]
 802d016:	68fa      	ldr	r2, [r7, #12]
 802d018:	6811      	ldr	r1, [r2, #0]
 802d01a:	f043 0201 	orr.w	r2, r3, #1
 802d01e:	697b      	ldr	r3, [r7, #20]
 802d020:	3318      	adds	r3, #24
 802d022:	011b      	lsls	r3, r3, #4
 802d024:	440b      	add	r3, r1
 802d026:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 802d028:	2300      	movs	r3, #0
 802d02a:	e00e      	b.n	802d04a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 802d02c:	68fb      	ldr	r3, [r7, #12]
 802d02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802d030:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 802d034:	68fb      	ldr	r3, [r7, #12]
 802d036:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 802d038:	2301      	movs	r3, #1
 802d03a:	e006      	b.n	802d04a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 802d03c:	68fb      	ldr	r3, [r7, #12]
 802d03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802d040:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 802d044:	68fb      	ldr	r3, [r7, #12]
 802d046:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 802d048:	2301      	movs	r3, #1
  }
}
 802d04a:	4618      	mov	r0, r3
 802d04c:	3724      	adds	r7, #36	; 0x24
 802d04e:	46bd      	mov	sp, r7
 802d050:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d054:	4770      	bx	lr

0802d056 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 802d056:	b480      	push	{r7}
 802d058:	b085      	sub	sp, #20
 802d05a:	af00      	add	r7, sp, #0
 802d05c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 802d05e:	2300      	movs	r3, #0
 802d060:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 802d062:	687b      	ldr	r3, [r7, #4]
 802d064:	f893 3020 	ldrb.w	r3, [r3, #32]
 802d068:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 802d06a:	7afb      	ldrb	r3, [r7, #11]
 802d06c:	2b01      	cmp	r3, #1
 802d06e:	d002      	beq.n	802d076 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 802d070:	7afb      	ldrb	r3, [r7, #11]
 802d072:	2b02      	cmp	r3, #2
 802d074:	d11d      	bne.n	802d0b2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 802d076:	687b      	ldr	r3, [r7, #4]
 802d078:	681b      	ldr	r3, [r3, #0]
 802d07a:	689b      	ldr	r3, [r3, #8]
 802d07c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 802d080:	2b00      	cmp	r3, #0
 802d082:	d002      	beq.n	802d08a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 802d084:	68fb      	ldr	r3, [r7, #12]
 802d086:	3301      	adds	r3, #1
 802d088:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 802d08a:	687b      	ldr	r3, [r7, #4]
 802d08c:	681b      	ldr	r3, [r3, #0]
 802d08e:	689b      	ldr	r3, [r3, #8]
 802d090:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802d094:	2b00      	cmp	r3, #0
 802d096:	d002      	beq.n	802d09e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 802d098:	68fb      	ldr	r3, [r7, #12]
 802d09a:	3301      	adds	r3, #1
 802d09c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 802d09e:	687b      	ldr	r3, [r7, #4]
 802d0a0:	681b      	ldr	r3, [r3, #0]
 802d0a2:	689b      	ldr	r3, [r3, #8]
 802d0a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802d0a8:	2b00      	cmp	r3, #0
 802d0aa:	d002      	beq.n	802d0b2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 802d0ac:	68fb      	ldr	r3, [r7, #12]
 802d0ae:	3301      	adds	r3, #1
 802d0b0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 802d0b2:	68fb      	ldr	r3, [r7, #12]
}
 802d0b4:	4618      	mov	r0, r3
 802d0b6:	3714      	adds	r7, #20
 802d0b8:	46bd      	mov	sp, r7
 802d0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d0be:	4770      	bx	lr

0802d0c0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 802d0c0:	b480      	push	{r7}
 802d0c2:	b087      	sub	sp, #28
 802d0c4:	af00      	add	r7, sp, #0
 802d0c6:	60f8      	str	r0, [r7, #12]
 802d0c8:	60b9      	str	r1, [r7, #8]
 802d0ca:	607a      	str	r2, [r7, #4]
 802d0cc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 802d0ce:	68fb      	ldr	r3, [r7, #12]
 802d0d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 802d0d4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 802d0d6:	7dfb      	ldrb	r3, [r7, #23]
 802d0d8:	2b01      	cmp	r3, #1
 802d0da:	d003      	beq.n	802d0e4 <HAL_CAN_GetRxMessage+0x24>
 802d0dc:	7dfb      	ldrb	r3, [r7, #23]
 802d0de:	2b02      	cmp	r3, #2
 802d0e0:	f040 80f3 	bne.w	802d2ca <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 802d0e4:	68bb      	ldr	r3, [r7, #8]
 802d0e6:	2b00      	cmp	r3, #0
 802d0e8:	d10e      	bne.n	802d108 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 802d0ea:	68fb      	ldr	r3, [r7, #12]
 802d0ec:	681b      	ldr	r3, [r3, #0]
 802d0ee:	68db      	ldr	r3, [r3, #12]
 802d0f0:	f003 0303 	and.w	r3, r3, #3
 802d0f4:	2b00      	cmp	r3, #0
 802d0f6:	d116      	bne.n	802d126 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 802d0f8:	68fb      	ldr	r3, [r7, #12]
 802d0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802d0fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 802d100:	68fb      	ldr	r3, [r7, #12]
 802d102:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 802d104:	2301      	movs	r3, #1
 802d106:	e0e7      	b.n	802d2d8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 802d108:	68fb      	ldr	r3, [r7, #12]
 802d10a:	681b      	ldr	r3, [r3, #0]
 802d10c:	691b      	ldr	r3, [r3, #16]
 802d10e:	f003 0303 	and.w	r3, r3, #3
 802d112:	2b00      	cmp	r3, #0
 802d114:	d107      	bne.n	802d126 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 802d116:	68fb      	ldr	r3, [r7, #12]
 802d118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802d11a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 802d11e:	68fb      	ldr	r3, [r7, #12]
 802d120:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 802d122:	2301      	movs	r3, #1
 802d124:	e0d8      	b.n	802d2d8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 802d126:	68fb      	ldr	r3, [r7, #12]
 802d128:	681a      	ldr	r2, [r3, #0]
 802d12a:	68bb      	ldr	r3, [r7, #8]
 802d12c:	331b      	adds	r3, #27
 802d12e:	011b      	lsls	r3, r3, #4
 802d130:	4413      	add	r3, r2
 802d132:	681b      	ldr	r3, [r3, #0]
 802d134:	f003 0204 	and.w	r2, r3, #4
 802d138:	687b      	ldr	r3, [r7, #4]
 802d13a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 802d13c:	687b      	ldr	r3, [r7, #4]
 802d13e:	689b      	ldr	r3, [r3, #8]
 802d140:	2b00      	cmp	r3, #0
 802d142:	d10c      	bne.n	802d15e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 802d144:	68fb      	ldr	r3, [r7, #12]
 802d146:	681a      	ldr	r2, [r3, #0]
 802d148:	68bb      	ldr	r3, [r7, #8]
 802d14a:	331b      	adds	r3, #27
 802d14c:	011b      	lsls	r3, r3, #4
 802d14e:	4413      	add	r3, r2
 802d150:	681b      	ldr	r3, [r3, #0]
 802d152:	0d5b      	lsrs	r3, r3, #21
 802d154:	f3c3 020a 	ubfx	r2, r3, #0, #11
 802d158:	687b      	ldr	r3, [r7, #4]
 802d15a:	601a      	str	r2, [r3, #0]
 802d15c:	e00b      	b.n	802d176 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 802d15e:	68fb      	ldr	r3, [r7, #12]
 802d160:	681a      	ldr	r2, [r3, #0]
 802d162:	68bb      	ldr	r3, [r7, #8]
 802d164:	331b      	adds	r3, #27
 802d166:	011b      	lsls	r3, r3, #4
 802d168:	4413      	add	r3, r2
 802d16a:	681b      	ldr	r3, [r3, #0]
 802d16c:	08db      	lsrs	r3, r3, #3
 802d16e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 802d172:	687b      	ldr	r3, [r7, #4]
 802d174:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 802d176:	68fb      	ldr	r3, [r7, #12]
 802d178:	681a      	ldr	r2, [r3, #0]
 802d17a:	68bb      	ldr	r3, [r7, #8]
 802d17c:	331b      	adds	r3, #27
 802d17e:	011b      	lsls	r3, r3, #4
 802d180:	4413      	add	r3, r2
 802d182:	681b      	ldr	r3, [r3, #0]
 802d184:	f003 0202 	and.w	r2, r3, #2
 802d188:	687b      	ldr	r3, [r7, #4]
 802d18a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 802d18c:	68fb      	ldr	r3, [r7, #12]
 802d18e:	681a      	ldr	r2, [r3, #0]
 802d190:	68bb      	ldr	r3, [r7, #8]
 802d192:	331b      	adds	r3, #27
 802d194:	011b      	lsls	r3, r3, #4
 802d196:	4413      	add	r3, r2
 802d198:	3304      	adds	r3, #4
 802d19a:	681b      	ldr	r3, [r3, #0]
 802d19c:	f003 020f 	and.w	r2, r3, #15
 802d1a0:	687b      	ldr	r3, [r7, #4]
 802d1a2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 802d1a4:	68fb      	ldr	r3, [r7, #12]
 802d1a6:	681a      	ldr	r2, [r3, #0]
 802d1a8:	68bb      	ldr	r3, [r7, #8]
 802d1aa:	331b      	adds	r3, #27
 802d1ac:	011b      	lsls	r3, r3, #4
 802d1ae:	4413      	add	r3, r2
 802d1b0:	3304      	adds	r3, #4
 802d1b2:	681b      	ldr	r3, [r3, #0]
 802d1b4:	0a1b      	lsrs	r3, r3, #8
 802d1b6:	b2da      	uxtb	r2, r3
 802d1b8:	687b      	ldr	r3, [r7, #4]
 802d1ba:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 802d1bc:	68fb      	ldr	r3, [r7, #12]
 802d1be:	681a      	ldr	r2, [r3, #0]
 802d1c0:	68bb      	ldr	r3, [r7, #8]
 802d1c2:	331b      	adds	r3, #27
 802d1c4:	011b      	lsls	r3, r3, #4
 802d1c6:	4413      	add	r3, r2
 802d1c8:	3304      	adds	r3, #4
 802d1ca:	681b      	ldr	r3, [r3, #0]
 802d1cc:	0c1b      	lsrs	r3, r3, #16
 802d1ce:	b29a      	uxth	r2, r3
 802d1d0:	687b      	ldr	r3, [r7, #4]
 802d1d2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 802d1d4:	68fb      	ldr	r3, [r7, #12]
 802d1d6:	681a      	ldr	r2, [r3, #0]
 802d1d8:	68bb      	ldr	r3, [r7, #8]
 802d1da:	011b      	lsls	r3, r3, #4
 802d1dc:	4413      	add	r3, r2
 802d1de:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 802d1e2:	681b      	ldr	r3, [r3, #0]
 802d1e4:	b2da      	uxtb	r2, r3
 802d1e6:	683b      	ldr	r3, [r7, #0]
 802d1e8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 802d1ea:	68fb      	ldr	r3, [r7, #12]
 802d1ec:	681a      	ldr	r2, [r3, #0]
 802d1ee:	68bb      	ldr	r3, [r7, #8]
 802d1f0:	011b      	lsls	r3, r3, #4
 802d1f2:	4413      	add	r3, r2
 802d1f4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 802d1f8:	681b      	ldr	r3, [r3, #0]
 802d1fa:	0a1a      	lsrs	r2, r3, #8
 802d1fc:	683b      	ldr	r3, [r7, #0]
 802d1fe:	3301      	adds	r3, #1
 802d200:	b2d2      	uxtb	r2, r2
 802d202:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 802d204:	68fb      	ldr	r3, [r7, #12]
 802d206:	681a      	ldr	r2, [r3, #0]
 802d208:	68bb      	ldr	r3, [r7, #8]
 802d20a:	011b      	lsls	r3, r3, #4
 802d20c:	4413      	add	r3, r2
 802d20e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 802d212:	681b      	ldr	r3, [r3, #0]
 802d214:	0c1a      	lsrs	r2, r3, #16
 802d216:	683b      	ldr	r3, [r7, #0]
 802d218:	3302      	adds	r3, #2
 802d21a:	b2d2      	uxtb	r2, r2
 802d21c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 802d21e:	68fb      	ldr	r3, [r7, #12]
 802d220:	681a      	ldr	r2, [r3, #0]
 802d222:	68bb      	ldr	r3, [r7, #8]
 802d224:	011b      	lsls	r3, r3, #4
 802d226:	4413      	add	r3, r2
 802d228:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 802d22c:	681b      	ldr	r3, [r3, #0]
 802d22e:	0e1a      	lsrs	r2, r3, #24
 802d230:	683b      	ldr	r3, [r7, #0]
 802d232:	3303      	adds	r3, #3
 802d234:	b2d2      	uxtb	r2, r2
 802d236:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 802d238:	68fb      	ldr	r3, [r7, #12]
 802d23a:	681a      	ldr	r2, [r3, #0]
 802d23c:	68bb      	ldr	r3, [r7, #8]
 802d23e:	011b      	lsls	r3, r3, #4
 802d240:	4413      	add	r3, r2
 802d242:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 802d246:	681a      	ldr	r2, [r3, #0]
 802d248:	683b      	ldr	r3, [r7, #0]
 802d24a:	3304      	adds	r3, #4
 802d24c:	b2d2      	uxtb	r2, r2
 802d24e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 802d250:	68fb      	ldr	r3, [r7, #12]
 802d252:	681a      	ldr	r2, [r3, #0]
 802d254:	68bb      	ldr	r3, [r7, #8]
 802d256:	011b      	lsls	r3, r3, #4
 802d258:	4413      	add	r3, r2
 802d25a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 802d25e:	681b      	ldr	r3, [r3, #0]
 802d260:	0a1a      	lsrs	r2, r3, #8
 802d262:	683b      	ldr	r3, [r7, #0]
 802d264:	3305      	adds	r3, #5
 802d266:	b2d2      	uxtb	r2, r2
 802d268:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 802d26a:	68fb      	ldr	r3, [r7, #12]
 802d26c:	681a      	ldr	r2, [r3, #0]
 802d26e:	68bb      	ldr	r3, [r7, #8]
 802d270:	011b      	lsls	r3, r3, #4
 802d272:	4413      	add	r3, r2
 802d274:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 802d278:	681b      	ldr	r3, [r3, #0]
 802d27a:	0c1a      	lsrs	r2, r3, #16
 802d27c:	683b      	ldr	r3, [r7, #0]
 802d27e:	3306      	adds	r3, #6
 802d280:	b2d2      	uxtb	r2, r2
 802d282:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 802d284:	68fb      	ldr	r3, [r7, #12]
 802d286:	681a      	ldr	r2, [r3, #0]
 802d288:	68bb      	ldr	r3, [r7, #8]
 802d28a:	011b      	lsls	r3, r3, #4
 802d28c:	4413      	add	r3, r2
 802d28e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 802d292:	681b      	ldr	r3, [r3, #0]
 802d294:	0e1a      	lsrs	r2, r3, #24
 802d296:	683b      	ldr	r3, [r7, #0]
 802d298:	3307      	adds	r3, #7
 802d29a:	b2d2      	uxtb	r2, r2
 802d29c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 802d29e:	68bb      	ldr	r3, [r7, #8]
 802d2a0:	2b00      	cmp	r3, #0
 802d2a2:	d108      	bne.n	802d2b6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 802d2a4:	68fb      	ldr	r3, [r7, #12]
 802d2a6:	681b      	ldr	r3, [r3, #0]
 802d2a8:	68da      	ldr	r2, [r3, #12]
 802d2aa:	68fb      	ldr	r3, [r7, #12]
 802d2ac:	681b      	ldr	r3, [r3, #0]
 802d2ae:	f042 0220 	orr.w	r2, r2, #32
 802d2b2:	60da      	str	r2, [r3, #12]
 802d2b4:	e007      	b.n	802d2c6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 802d2b6:	68fb      	ldr	r3, [r7, #12]
 802d2b8:	681b      	ldr	r3, [r3, #0]
 802d2ba:	691a      	ldr	r2, [r3, #16]
 802d2bc:	68fb      	ldr	r3, [r7, #12]
 802d2be:	681b      	ldr	r3, [r3, #0]
 802d2c0:	f042 0220 	orr.w	r2, r2, #32
 802d2c4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 802d2c6:	2300      	movs	r3, #0
 802d2c8:	e006      	b.n	802d2d8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 802d2ca:	68fb      	ldr	r3, [r7, #12]
 802d2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802d2ce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 802d2d2:	68fb      	ldr	r3, [r7, #12]
 802d2d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 802d2d6:	2301      	movs	r3, #1
  }
}
 802d2d8:	4618      	mov	r0, r3
 802d2da:	371c      	adds	r7, #28
 802d2dc:	46bd      	mov	sp, r7
 802d2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d2e2:	4770      	bx	lr

0802d2e4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 802d2e4:	b480      	push	{r7}
 802d2e6:	b085      	sub	sp, #20
 802d2e8:	af00      	add	r7, sp, #0
 802d2ea:	6078      	str	r0, [r7, #4]
 802d2ec:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 802d2ee:	687b      	ldr	r3, [r7, #4]
 802d2f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 802d2f4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 802d2f6:	7bfb      	ldrb	r3, [r7, #15]
 802d2f8:	2b01      	cmp	r3, #1
 802d2fa:	d002      	beq.n	802d302 <HAL_CAN_ActivateNotification+0x1e>
 802d2fc:	7bfb      	ldrb	r3, [r7, #15]
 802d2fe:	2b02      	cmp	r3, #2
 802d300:	d109      	bne.n	802d316 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 802d302:	687b      	ldr	r3, [r7, #4]
 802d304:	681b      	ldr	r3, [r3, #0]
 802d306:	6959      	ldr	r1, [r3, #20]
 802d308:	687b      	ldr	r3, [r7, #4]
 802d30a:	681b      	ldr	r3, [r3, #0]
 802d30c:	683a      	ldr	r2, [r7, #0]
 802d30e:	430a      	orrs	r2, r1
 802d310:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 802d312:	2300      	movs	r3, #0
 802d314:	e006      	b.n	802d324 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 802d316:	687b      	ldr	r3, [r7, #4]
 802d318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802d31a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 802d31e:	687b      	ldr	r3, [r7, #4]
 802d320:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 802d322:	2301      	movs	r3, #1
  }
}
 802d324:	4618      	mov	r0, r3
 802d326:	3714      	adds	r7, #20
 802d328:	46bd      	mov	sp, r7
 802d32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d32e:	4770      	bx	lr

0802d330 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 802d330:	b580      	push	{r7, lr}
 802d332:	b08a      	sub	sp, #40	; 0x28
 802d334:	af00      	add	r7, sp, #0
 802d336:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 802d338:	2300      	movs	r3, #0
 802d33a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 802d33c:	687b      	ldr	r3, [r7, #4]
 802d33e:	681b      	ldr	r3, [r3, #0]
 802d340:	695b      	ldr	r3, [r3, #20]
 802d342:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 802d344:	687b      	ldr	r3, [r7, #4]
 802d346:	681b      	ldr	r3, [r3, #0]
 802d348:	685b      	ldr	r3, [r3, #4]
 802d34a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 802d34c:	687b      	ldr	r3, [r7, #4]
 802d34e:	681b      	ldr	r3, [r3, #0]
 802d350:	689b      	ldr	r3, [r3, #8]
 802d352:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 802d354:	687b      	ldr	r3, [r7, #4]
 802d356:	681b      	ldr	r3, [r3, #0]
 802d358:	68db      	ldr	r3, [r3, #12]
 802d35a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 802d35c:	687b      	ldr	r3, [r7, #4]
 802d35e:	681b      	ldr	r3, [r3, #0]
 802d360:	691b      	ldr	r3, [r3, #16]
 802d362:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 802d364:	687b      	ldr	r3, [r7, #4]
 802d366:	681b      	ldr	r3, [r3, #0]
 802d368:	699b      	ldr	r3, [r3, #24]
 802d36a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 802d36c:	6a3b      	ldr	r3, [r7, #32]
 802d36e:	f003 0301 	and.w	r3, r3, #1
 802d372:	2b00      	cmp	r3, #0
 802d374:	d07c      	beq.n	802d470 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 802d376:	69bb      	ldr	r3, [r7, #24]
 802d378:	f003 0301 	and.w	r3, r3, #1
 802d37c:	2b00      	cmp	r3, #0
 802d37e:	d023      	beq.n	802d3c8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 802d380:	687b      	ldr	r3, [r7, #4]
 802d382:	681b      	ldr	r3, [r3, #0]
 802d384:	2201      	movs	r2, #1
 802d386:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 802d388:	69bb      	ldr	r3, [r7, #24]
 802d38a:	f003 0302 	and.w	r3, r3, #2
 802d38e:	2b00      	cmp	r3, #0
 802d390:	d003      	beq.n	802d39a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 802d392:	6878      	ldr	r0, [r7, #4]
 802d394:	f000 f97d 	bl	802d692 <HAL_CAN_TxMailbox0CompleteCallback>
 802d398:	e016      	b.n	802d3c8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 802d39a:	69bb      	ldr	r3, [r7, #24]
 802d39c:	f003 0304 	and.w	r3, r3, #4
 802d3a0:	2b00      	cmp	r3, #0
 802d3a2:	d004      	beq.n	802d3ae <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 802d3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d3a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 802d3aa:	627b      	str	r3, [r7, #36]	; 0x24
 802d3ac:	e00c      	b.n	802d3c8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 802d3ae:	69bb      	ldr	r3, [r7, #24]
 802d3b0:	f003 0308 	and.w	r3, r3, #8
 802d3b4:	2b00      	cmp	r3, #0
 802d3b6:	d004      	beq.n	802d3c2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 802d3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d3ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802d3be:	627b      	str	r3, [r7, #36]	; 0x24
 802d3c0:	e002      	b.n	802d3c8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 802d3c2:	6878      	ldr	r0, [r7, #4]
 802d3c4:	f000 f983 	bl	802d6ce <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 802d3c8:	69bb      	ldr	r3, [r7, #24]
 802d3ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802d3ce:	2b00      	cmp	r3, #0
 802d3d0:	d024      	beq.n	802d41c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 802d3d2:	687b      	ldr	r3, [r7, #4]
 802d3d4:	681b      	ldr	r3, [r3, #0]
 802d3d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 802d3da:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 802d3dc:	69bb      	ldr	r3, [r7, #24]
 802d3de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802d3e2:	2b00      	cmp	r3, #0
 802d3e4:	d003      	beq.n	802d3ee <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 802d3e6:	6878      	ldr	r0, [r7, #4]
 802d3e8:	f000 f95d 	bl	802d6a6 <HAL_CAN_TxMailbox1CompleteCallback>
 802d3ec:	e016      	b.n	802d41c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 802d3ee:	69bb      	ldr	r3, [r7, #24]
 802d3f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802d3f4:	2b00      	cmp	r3, #0
 802d3f6:	d004      	beq.n	802d402 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 802d3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d3fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 802d3fe:	627b      	str	r3, [r7, #36]	; 0x24
 802d400:	e00c      	b.n	802d41c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 802d402:	69bb      	ldr	r3, [r7, #24]
 802d404:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802d408:	2b00      	cmp	r3, #0
 802d40a:	d004      	beq.n	802d416 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 802d40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d40e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802d412:	627b      	str	r3, [r7, #36]	; 0x24
 802d414:	e002      	b.n	802d41c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 802d416:	6878      	ldr	r0, [r7, #4]
 802d418:	f000 f963 	bl	802d6e2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 802d41c:	69bb      	ldr	r3, [r7, #24]
 802d41e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802d422:	2b00      	cmp	r3, #0
 802d424:	d024      	beq.n	802d470 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 802d426:	687b      	ldr	r3, [r7, #4]
 802d428:	681b      	ldr	r3, [r3, #0]
 802d42a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 802d42e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 802d430:	69bb      	ldr	r3, [r7, #24]
 802d432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802d436:	2b00      	cmp	r3, #0
 802d438:	d003      	beq.n	802d442 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 802d43a:	6878      	ldr	r0, [r7, #4]
 802d43c:	f000 f93d 	bl	802d6ba <HAL_CAN_TxMailbox2CompleteCallback>
 802d440:	e016      	b.n	802d470 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 802d442:	69bb      	ldr	r3, [r7, #24]
 802d444:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802d448:	2b00      	cmp	r3, #0
 802d44a:	d004      	beq.n	802d456 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 802d44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d44e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802d452:	627b      	str	r3, [r7, #36]	; 0x24
 802d454:	e00c      	b.n	802d470 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 802d456:	69bb      	ldr	r3, [r7, #24]
 802d458:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802d45c:	2b00      	cmp	r3, #0
 802d45e:	d004      	beq.n	802d46a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 802d460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d462:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802d466:	627b      	str	r3, [r7, #36]	; 0x24
 802d468:	e002      	b.n	802d470 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 802d46a:	6878      	ldr	r0, [r7, #4]
 802d46c:	f000 f943 	bl	802d6f6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 802d470:	6a3b      	ldr	r3, [r7, #32]
 802d472:	f003 0308 	and.w	r3, r3, #8
 802d476:	2b00      	cmp	r3, #0
 802d478:	d00c      	beq.n	802d494 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 802d47a:	697b      	ldr	r3, [r7, #20]
 802d47c:	f003 0310 	and.w	r3, r3, #16
 802d480:	2b00      	cmp	r3, #0
 802d482:	d007      	beq.n	802d494 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 802d484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d486:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 802d48a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 802d48c:	687b      	ldr	r3, [r7, #4]
 802d48e:	681b      	ldr	r3, [r3, #0]
 802d490:	2210      	movs	r2, #16
 802d492:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 802d494:	6a3b      	ldr	r3, [r7, #32]
 802d496:	f003 0304 	and.w	r3, r3, #4
 802d49a:	2b00      	cmp	r3, #0
 802d49c:	d00b      	beq.n	802d4b6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 802d49e:	697b      	ldr	r3, [r7, #20]
 802d4a0:	f003 0308 	and.w	r3, r3, #8
 802d4a4:	2b00      	cmp	r3, #0
 802d4a6:	d006      	beq.n	802d4b6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 802d4a8:	687b      	ldr	r3, [r7, #4]
 802d4aa:	681b      	ldr	r3, [r3, #0]
 802d4ac:	2208      	movs	r2, #8
 802d4ae:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 802d4b0:	6878      	ldr	r0, [r7, #4]
 802d4b2:	f000 f92a 	bl	802d70a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 802d4b6:	6a3b      	ldr	r3, [r7, #32]
 802d4b8:	f003 0302 	and.w	r3, r3, #2
 802d4bc:	2b00      	cmp	r3, #0
 802d4be:	d009      	beq.n	802d4d4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 802d4c0:	687b      	ldr	r3, [r7, #4]
 802d4c2:	681b      	ldr	r3, [r3, #0]
 802d4c4:	68db      	ldr	r3, [r3, #12]
 802d4c6:	f003 0303 	and.w	r3, r3, #3
 802d4ca:	2b00      	cmp	r3, #0
 802d4cc:	d002      	beq.n	802d4d4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 802d4ce:	6878      	ldr	r0, [r7, #4]
 802d4d0:	f010 fdc0 	bl	803e054 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 802d4d4:	6a3b      	ldr	r3, [r7, #32]
 802d4d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802d4da:	2b00      	cmp	r3, #0
 802d4dc:	d00c      	beq.n	802d4f8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 802d4de:	693b      	ldr	r3, [r7, #16]
 802d4e0:	f003 0310 	and.w	r3, r3, #16
 802d4e4:	2b00      	cmp	r3, #0
 802d4e6:	d007      	beq.n	802d4f8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 802d4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d4ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 802d4ee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 802d4f0:	687b      	ldr	r3, [r7, #4]
 802d4f2:	681b      	ldr	r3, [r3, #0]
 802d4f4:	2210      	movs	r2, #16
 802d4f6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 802d4f8:	6a3b      	ldr	r3, [r7, #32]
 802d4fa:	f003 0320 	and.w	r3, r3, #32
 802d4fe:	2b00      	cmp	r3, #0
 802d500:	d00b      	beq.n	802d51a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 802d502:	693b      	ldr	r3, [r7, #16]
 802d504:	f003 0308 	and.w	r3, r3, #8
 802d508:	2b00      	cmp	r3, #0
 802d50a:	d006      	beq.n	802d51a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 802d50c:	687b      	ldr	r3, [r7, #4]
 802d50e:	681b      	ldr	r3, [r3, #0]
 802d510:	2208      	movs	r2, #8
 802d512:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 802d514:	6878      	ldr	r0, [r7, #4]
 802d516:	f000 f90c 	bl	802d732 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 802d51a:	6a3b      	ldr	r3, [r7, #32]
 802d51c:	f003 0310 	and.w	r3, r3, #16
 802d520:	2b00      	cmp	r3, #0
 802d522:	d009      	beq.n	802d538 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 802d524:	687b      	ldr	r3, [r7, #4]
 802d526:	681b      	ldr	r3, [r3, #0]
 802d528:	691b      	ldr	r3, [r3, #16]
 802d52a:	f003 0303 	and.w	r3, r3, #3
 802d52e:	2b00      	cmp	r3, #0
 802d530:	d002      	beq.n	802d538 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 802d532:	6878      	ldr	r0, [r7, #4]
 802d534:	f000 f8f3 	bl	802d71e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 802d538:	6a3b      	ldr	r3, [r7, #32]
 802d53a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802d53e:	2b00      	cmp	r3, #0
 802d540:	d00b      	beq.n	802d55a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 802d542:	69fb      	ldr	r3, [r7, #28]
 802d544:	f003 0310 	and.w	r3, r3, #16
 802d548:	2b00      	cmp	r3, #0
 802d54a:	d006      	beq.n	802d55a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 802d54c:	687b      	ldr	r3, [r7, #4]
 802d54e:	681b      	ldr	r3, [r3, #0]
 802d550:	2210      	movs	r2, #16
 802d552:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 802d554:	6878      	ldr	r0, [r7, #4]
 802d556:	f000 f8f6 	bl	802d746 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 802d55a:	6a3b      	ldr	r3, [r7, #32]
 802d55c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802d560:	2b00      	cmp	r3, #0
 802d562:	d00b      	beq.n	802d57c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 802d564:	69fb      	ldr	r3, [r7, #28]
 802d566:	f003 0308 	and.w	r3, r3, #8
 802d56a:	2b00      	cmp	r3, #0
 802d56c:	d006      	beq.n	802d57c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 802d56e:	687b      	ldr	r3, [r7, #4]
 802d570:	681b      	ldr	r3, [r3, #0]
 802d572:	2208      	movs	r2, #8
 802d574:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 802d576:	6878      	ldr	r0, [r7, #4]
 802d578:	f000 f8ef 	bl	802d75a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 802d57c:	6a3b      	ldr	r3, [r7, #32]
 802d57e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802d582:	2b00      	cmp	r3, #0
 802d584:	d075      	beq.n	802d672 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 802d586:	69fb      	ldr	r3, [r7, #28]
 802d588:	f003 0304 	and.w	r3, r3, #4
 802d58c:	2b00      	cmp	r3, #0
 802d58e:	d06c      	beq.n	802d66a <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 802d590:	6a3b      	ldr	r3, [r7, #32]
 802d592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802d596:	2b00      	cmp	r3, #0
 802d598:	d008      	beq.n	802d5ac <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 802d59a:	68fb      	ldr	r3, [r7, #12]
 802d59c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 802d5a0:	2b00      	cmp	r3, #0
 802d5a2:	d003      	beq.n	802d5ac <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 802d5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d5a6:	f043 0301 	orr.w	r3, r3, #1
 802d5aa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 802d5ac:	6a3b      	ldr	r3, [r7, #32]
 802d5ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802d5b2:	2b00      	cmp	r3, #0
 802d5b4:	d008      	beq.n	802d5c8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 802d5b6:	68fb      	ldr	r3, [r7, #12]
 802d5b8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 802d5bc:	2b00      	cmp	r3, #0
 802d5be:	d003      	beq.n	802d5c8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 802d5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d5c2:	f043 0302 	orr.w	r3, r3, #2
 802d5c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 802d5c8:	6a3b      	ldr	r3, [r7, #32]
 802d5ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802d5ce:	2b00      	cmp	r3, #0
 802d5d0:	d008      	beq.n	802d5e4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 802d5d2:	68fb      	ldr	r3, [r7, #12]
 802d5d4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 802d5d8:	2b00      	cmp	r3, #0
 802d5da:	d003      	beq.n	802d5e4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 802d5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d5de:	f043 0304 	orr.w	r3, r3, #4
 802d5e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 802d5e4:	6a3b      	ldr	r3, [r7, #32]
 802d5e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802d5ea:	2b00      	cmp	r3, #0
 802d5ec:	d03d      	beq.n	802d66a <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 802d5ee:	68fb      	ldr	r3, [r7, #12]
 802d5f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 802d5f4:	2b00      	cmp	r3, #0
 802d5f6:	d038      	beq.n	802d66a <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 802d5f8:	68fb      	ldr	r3, [r7, #12]
 802d5fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 802d5fe:	2b30      	cmp	r3, #48	; 0x30
 802d600:	d017      	beq.n	802d632 <HAL_CAN_IRQHandler+0x302>
 802d602:	2b30      	cmp	r3, #48	; 0x30
 802d604:	d804      	bhi.n	802d610 <HAL_CAN_IRQHandler+0x2e0>
 802d606:	2b10      	cmp	r3, #16
 802d608:	d009      	beq.n	802d61e <HAL_CAN_IRQHandler+0x2ee>
 802d60a:	2b20      	cmp	r3, #32
 802d60c:	d00c      	beq.n	802d628 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 802d60e:	e024      	b.n	802d65a <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 802d610:	2b50      	cmp	r3, #80	; 0x50
 802d612:	d018      	beq.n	802d646 <HAL_CAN_IRQHandler+0x316>
 802d614:	2b60      	cmp	r3, #96	; 0x60
 802d616:	d01b      	beq.n	802d650 <HAL_CAN_IRQHandler+0x320>
 802d618:	2b40      	cmp	r3, #64	; 0x40
 802d61a:	d00f      	beq.n	802d63c <HAL_CAN_IRQHandler+0x30c>
            break;
 802d61c:	e01d      	b.n	802d65a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 802d61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d620:	f043 0308 	orr.w	r3, r3, #8
 802d624:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 802d626:	e018      	b.n	802d65a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 802d628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d62a:	f043 0310 	orr.w	r3, r3, #16
 802d62e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 802d630:	e013      	b.n	802d65a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 802d632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d634:	f043 0320 	orr.w	r3, r3, #32
 802d638:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 802d63a:	e00e      	b.n	802d65a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 802d63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d63e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802d642:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 802d644:	e009      	b.n	802d65a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 802d646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802d64c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 802d64e:	e004      	b.n	802d65a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 802d650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802d656:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 802d658:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 802d65a:	687b      	ldr	r3, [r7, #4]
 802d65c:	681b      	ldr	r3, [r3, #0]
 802d65e:	699a      	ldr	r2, [r3, #24]
 802d660:	687b      	ldr	r3, [r7, #4]
 802d662:	681b      	ldr	r3, [r3, #0]
 802d664:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 802d668:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 802d66a:	687b      	ldr	r3, [r7, #4]
 802d66c:	681b      	ldr	r3, [r3, #0]
 802d66e:	2204      	movs	r2, #4
 802d670:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 802d672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d674:	2b00      	cmp	r3, #0
 802d676:	d008      	beq.n	802d68a <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 802d678:	687b      	ldr	r3, [r7, #4]
 802d67a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802d67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d67e:	431a      	orrs	r2, r3
 802d680:	687b      	ldr	r3, [r7, #4]
 802d682:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 802d684:	6878      	ldr	r0, [r7, #4]
 802d686:	f000 f872 	bl	802d76e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 802d68a:	bf00      	nop
 802d68c:	3728      	adds	r7, #40	; 0x28
 802d68e:	46bd      	mov	sp, r7
 802d690:	bd80      	pop	{r7, pc}

0802d692 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 802d692:	b480      	push	{r7}
 802d694:	b083      	sub	sp, #12
 802d696:	af00      	add	r7, sp, #0
 802d698:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 802d69a:	bf00      	nop
 802d69c:	370c      	adds	r7, #12
 802d69e:	46bd      	mov	sp, r7
 802d6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d6a4:	4770      	bx	lr

0802d6a6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 802d6a6:	b480      	push	{r7}
 802d6a8:	b083      	sub	sp, #12
 802d6aa:	af00      	add	r7, sp, #0
 802d6ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 802d6ae:	bf00      	nop
 802d6b0:	370c      	adds	r7, #12
 802d6b2:	46bd      	mov	sp, r7
 802d6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d6b8:	4770      	bx	lr

0802d6ba <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 802d6ba:	b480      	push	{r7}
 802d6bc:	b083      	sub	sp, #12
 802d6be:	af00      	add	r7, sp, #0
 802d6c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 802d6c2:	bf00      	nop
 802d6c4:	370c      	adds	r7, #12
 802d6c6:	46bd      	mov	sp, r7
 802d6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d6cc:	4770      	bx	lr

0802d6ce <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 802d6ce:	b480      	push	{r7}
 802d6d0:	b083      	sub	sp, #12
 802d6d2:	af00      	add	r7, sp, #0
 802d6d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 802d6d6:	bf00      	nop
 802d6d8:	370c      	adds	r7, #12
 802d6da:	46bd      	mov	sp, r7
 802d6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d6e0:	4770      	bx	lr

0802d6e2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 802d6e2:	b480      	push	{r7}
 802d6e4:	b083      	sub	sp, #12
 802d6e6:	af00      	add	r7, sp, #0
 802d6e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 802d6ea:	bf00      	nop
 802d6ec:	370c      	adds	r7, #12
 802d6ee:	46bd      	mov	sp, r7
 802d6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d6f4:	4770      	bx	lr

0802d6f6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 802d6f6:	b480      	push	{r7}
 802d6f8:	b083      	sub	sp, #12
 802d6fa:	af00      	add	r7, sp, #0
 802d6fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 802d6fe:	bf00      	nop
 802d700:	370c      	adds	r7, #12
 802d702:	46bd      	mov	sp, r7
 802d704:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d708:	4770      	bx	lr

0802d70a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 802d70a:	b480      	push	{r7}
 802d70c:	b083      	sub	sp, #12
 802d70e:	af00      	add	r7, sp, #0
 802d710:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 802d712:	bf00      	nop
 802d714:	370c      	adds	r7, #12
 802d716:	46bd      	mov	sp, r7
 802d718:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d71c:	4770      	bx	lr

0802d71e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 802d71e:	b480      	push	{r7}
 802d720:	b083      	sub	sp, #12
 802d722:	af00      	add	r7, sp, #0
 802d724:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 802d726:	bf00      	nop
 802d728:	370c      	adds	r7, #12
 802d72a:	46bd      	mov	sp, r7
 802d72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d730:	4770      	bx	lr

0802d732 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 802d732:	b480      	push	{r7}
 802d734:	b083      	sub	sp, #12
 802d736:	af00      	add	r7, sp, #0
 802d738:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 802d73a:	bf00      	nop
 802d73c:	370c      	adds	r7, #12
 802d73e:	46bd      	mov	sp, r7
 802d740:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d744:	4770      	bx	lr

0802d746 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 802d746:	b480      	push	{r7}
 802d748:	b083      	sub	sp, #12
 802d74a:	af00      	add	r7, sp, #0
 802d74c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 802d74e:	bf00      	nop
 802d750:	370c      	adds	r7, #12
 802d752:	46bd      	mov	sp, r7
 802d754:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d758:	4770      	bx	lr

0802d75a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 802d75a:	b480      	push	{r7}
 802d75c:	b083      	sub	sp, #12
 802d75e:	af00      	add	r7, sp, #0
 802d760:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 802d762:	bf00      	nop
 802d764:	370c      	adds	r7, #12
 802d766:	46bd      	mov	sp, r7
 802d768:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d76c:	4770      	bx	lr

0802d76e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 802d76e:	b480      	push	{r7}
 802d770:	b083      	sub	sp, #12
 802d772:	af00      	add	r7, sp, #0
 802d774:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 802d776:	bf00      	nop
 802d778:	370c      	adds	r7, #12
 802d77a:	46bd      	mov	sp, r7
 802d77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d780:	4770      	bx	lr
	...

0802d784 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802d784:	b480      	push	{r7}
 802d786:	b085      	sub	sp, #20
 802d788:	af00      	add	r7, sp, #0
 802d78a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 802d78c:	687b      	ldr	r3, [r7, #4]
 802d78e:	f003 0307 	and.w	r3, r3, #7
 802d792:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 802d794:	4b0c      	ldr	r3, [pc, #48]	; (802d7c8 <__NVIC_SetPriorityGrouping+0x44>)
 802d796:	68db      	ldr	r3, [r3, #12]
 802d798:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 802d79a:	68ba      	ldr	r2, [r7, #8]
 802d79c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 802d7a0:	4013      	ands	r3, r2
 802d7a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 802d7a4:	68fb      	ldr	r3, [r7, #12]
 802d7a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 802d7a8:	68bb      	ldr	r3, [r7, #8]
 802d7aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 802d7ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 802d7b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802d7b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 802d7b6:	4a04      	ldr	r2, [pc, #16]	; (802d7c8 <__NVIC_SetPriorityGrouping+0x44>)
 802d7b8:	68bb      	ldr	r3, [r7, #8]
 802d7ba:	60d3      	str	r3, [r2, #12]
}
 802d7bc:	bf00      	nop
 802d7be:	3714      	adds	r7, #20
 802d7c0:	46bd      	mov	sp, r7
 802d7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d7c6:	4770      	bx	lr
 802d7c8:	e000ed00 	.word	0xe000ed00

0802d7cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 802d7cc:	b480      	push	{r7}
 802d7ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 802d7d0:	4b04      	ldr	r3, [pc, #16]	; (802d7e4 <__NVIC_GetPriorityGrouping+0x18>)
 802d7d2:	68db      	ldr	r3, [r3, #12]
 802d7d4:	0a1b      	lsrs	r3, r3, #8
 802d7d6:	f003 0307 	and.w	r3, r3, #7
}
 802d7da:	4618      	mov	r0, r3
 802d7dc:	46bd      	mov	sp, r7
 802d7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d7e2:	4770      	bx	lr
 802d7e4:	e000ed00 	.word	0xe000ed00

0802d7e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 802d7e8:	b480      	push	{r7}
 802d7ea:	b083      	sub	sp, #12
 802d7ec:	af00      	add	r7, sp, #0
 802d7ee:	4603      	mov	r3, r0
 802d7f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 802d7f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802d7f6:	2b00      	cmp	r3, #0
 802d7f8:	db0b      	blt.n	802d812 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802d7fa:	79fb      	ldrb	r3, [r7, #7]
 802d7fc:	f003 021f 	and.w	r2, r3, #31
 802d800:	4907      	ldr	r1, [pc, #28]	; (802d820 <__NVIC_EnableIRQ+0x38>)
 802d802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802d806:	095b      	lsrs	r3, r3, #5
 802d808:	2001      	movs	r0, #1
 802d80a:	fa00 f202 	lsl.w	r2, r0, r2
 802d80e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 802d812:	bf00      	nop
 802d814:	370c      	adds	r7, #12
 802d816:	46bd      	mov	sp, r7
 802d818:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d81c:	4770      	bx	lr
 802d81e:	bf00      	nop
 802d820:	e000e100 	.word	0xe000e100

0802d824 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 802d824:	b480      	push	{r7}
 802d826:	b083      	sub	sp, #12
 802d828:	af00      	add	r7, sp, #0
 802d82a:	4603      	mov	r3, r0
 802d82c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 802d82e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802d832:	2b00      	cmp	r3, #0
 802d834:	db10      	blt.n	802d858 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802d836:	79fb      	ldrb	r3, [r7, #7]
 802d838:	f003 021f 	and.w	r2, r3, #31
 802d83c:	4909      	ldr	r1, [pc, #36]	; (802d864 <__NVIC_DisableIRQ+0x40>)
 802d83e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802d842:	095b      	lsrs	r3, r3, #5
 802d844:	2001      	movs	r0, #1
 802d846:	fa00 f202 	lsl.w	r2, r0, r2
 802d84a:	3320      	adds	r3, #32
 802d84c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 802d850:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 802d854:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 802d858:	bf00      	nop
 802d85a:	370c      	adds	r7, #12
 802d85c:	46bd      	mov	sp, r7
 802d85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d862:	4770      	bx	lr
 802d864:	e000e100 	.word	0xe000e100

0802d868 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 802d868:	b480      	push	{r7}
 802d86a:	b083      	sub	sp, #12
 802d86c:	af00      	add	r7, sp, #0
 802d86e:	4603      	mov	r3, r0
 802d870:	6039      	str	r1, [r7, #0]
 802d872:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 802d874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802d878:	2b00      	cmp	r3, #0
 802d87a:	db0a      	blt.n	802d892 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802d87c:	683b      	ldr	r3, [r7, #0]
 802d87e:	b2da      	uxtb	r2, r3
 802d880:	490c      	ldr	r1, [pc, #48]	; (802d8b4 <__NVIC_SetPriority+0x4c>)
 802d882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802d886:	0112      	lsls	r2, r2, #4
 802d888:	b2d2      	uxtb	r2, r2
 802d88a:	440b      	add	r3, r1
 802d88c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 802d890:	e00a      	b.n	802d8a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802d892:	683b      	ldr	r3, [r7, #0]
 802d894:	b2da      	uxtb	r2, r3
 802d896:	4908      	ldr	r1, [pc, #32]	; (802d8b8 <__NVIC_SetPriority+0x50>)
 802d898:	79fb      	ldrb	r3, [r7, #7]
 802d89a:	f003 030f 	and.w	r3, r3, #15
 802d89e:	3b04      	subs	r3, #4
 802d8a0:	0112      	lsls	r2, r2, #4
 802d8a2:	b2d2      	uxtb	r2, r2
 802d8a4:	440b      	add	r3, r1
 802d8a6:	761a      	strb	r2, [r3, #24]
}
 802d8a8:	bf00      	nop
 802d8aa:	370c      	adds	r7, #12
 802d8ac:	46bd      	mov	sp, r7
 802d8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d8b2:	4770      	bx	lr
 802d8b4:	e000e100 	.word	0xe000e100
 802d8b8:	e000ed00 	.word	0xe000ed00

0802d8bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 802d8bc:	b480      	push	{r7}
 802d8be:	b089      	sub	sp, #36	; 0x24
 802d8c0:	af00      	add	r7, sp, #0
 802d8c2:	60f8      	str	r0, [r7, #12]
 802d8c4:	60b9      	str	r1, [r7, #8]
 802d8c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 802d8c8:	68fb      	ldr	r3, [r7, #12]
 802d8ca:	f003 0307 	and.w	r3, r3, #7
 802d8ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 802d8d0:	69fb      	ldr	r3, [r7, #28]
 802d8d2:	f1c3 0307 	rsb	r3, r3, #7
 802d8d6:	2b04      	cmp	r3, #4
 802d8d8:	bf28      	it	cs
 802d8da:	2304      	movcs	r3, #4
 802d8dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 802d8de:	69fb      	ldr	r3, [r7, #28]
 802d8e0:	3304      	adds	r3, #4
 802d8e2:	2b06      	cmp	r3, #6
 802d8e4:	d902      	bls.n	802d8ec <NVIC_EncodePriority+0x30>
 802d8e6:	69fb      	ldr	r3, [r7, #28]
 802d8e8:	3b03      	subs	r3, #3
 802d8ea:	e000      	b.n	802d8ee <NVIC_EncodePriority+0x32>
 802d8ec:	2300      	movs	r3, #0
 802d8ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802d8f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802d8f4:	69bb      	ldr	r3, [r7, #24]
 802d8f6:	fa02 f303 	lsl.w	r3, r2, r3
 802d8fa:	43da      	mvns	r2, r3
 802d8fc:	68bb      	ldr	r3, [r7, #8]
 802d8fe:	401a      	ands	r2, r3
 802d900:	697b      	ldr	r3, [r7, #20]
 802d902:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 802d904:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 802d908:	697b      	ldr	r3, [r7, #20]
 802d90a:	fa01 f303 	lsl.w	r3, r1, r3
 802d90e:	43d9      	mvns	r1, r3
 802d910:	687b      	ldr	r3, [r7, #4]
 802d912:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802d914:	4313      	orrs	r3, r2
         );
}
 802d916:	4618      	mov	r0, r3
 802d918:	3724      	adds	r7, #36	; 0x24
 802d91a:	46bd      	mov	sp, r7
 802d91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d920:	4770      	bx	lr
	...

0802d924 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 802d924:	b480      	push	{r7}
 802d926:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 802d928:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 802d92c:	4b05      	ldr	r3, [pc, #20]	; (802d944 <__NVIC_SystemReset+0x20>)
 802d92e:	68db      	ldr	r3, [r3, #12]
 802d930:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 802d934:	4903      	ldr	r1, [pc, #12]	; (802d944 <__NVIC_SystemReset+0x20>)
 802d936:	4b04      	ldr	r3, [pc, #16]	; (802d948 <__NVIC_SystemReset+0x24>)
 802d938:	4313      	orrs	r3, r2
 802d93a:	60cb      	str	r3, [r1, #12]
 802d93c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 802d940:	bf00      	nop
 802d942:	e7fd      	b.n	802d940 <__NVIC_SystemReset+0x1c>
 802d944:	e000ed00 	.word	0xe000ed00
 802d948:	05fa0004 	.word	0x05fa0004

0802d94c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802d94c:	b580      	push	{r7, lr}
 802d94e:	b082      	sub	sp, #8
 802d950:	af00      	add	r7, sp, #0
 802d952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 802d954:	6878      	ldr	r0, [r7, #4]
 802d956:	f7ff ff15 	bl	802d784 <__NVIC_SetPriorityGrouping>
}
 802d95a:	bf00      	nop
 802d95c:	3708      	adds	r7, #8
 802d95e:	46bd      	mov	sp, r7
 802d960:	bd80      	pop	{r7, pc}

0802d962 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 802d962:	b580      	push	{r7, lr}
 802d964:	b086      	sub	sp, #24
 802d966:	af00      	add	r7, sp, #0
 802d968:	4603      	mov	r3, r0
 802d96a:	60b9      	str	r1, [r7, #8]
 802d96c:	607a      	str	r2, [r7, #4]
 802d96e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 802d970:	2300      	movs	r3, #0
 802d972:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 802d974:	f7ff ff2a 	bl	802d7cc <__NVIC_GetPriorityGrouping>
 802d978:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 802d97a:	687a      	ldr	r2, [r7, #4]
 802d97c:	68b9      	ldr	r1, [r7, #8]
 802d97e:	6978      	ldr	r0, [r7, #20]
 802d980:	f7ff ff9c 	bl	802d8bc <NVIC_EncodePriority>
 802d984:	4602      	mov	r2, r0
 802d986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802d98a:	4611      	mov	r1, r2
 802d98c:	4618      	mov	r0, r3
 802d98e:	f7ff ff6b 	bl	802d868 <__NVIC_SetPriority>
}
 802d992:	bf00      	nop
 802d994:	3718      	adds	r7, #24
 802d996:	46bd      	mov	sp, r7
 802d998:	bd80      	pop	{r7, pc}

0802d99a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 802d99a:	b580      	push	{r7, lr}
 802d99c:	b082      	sub	sp, #8
 802d99e:	af00      	add	r7, sp, #0
 802d9a0:	4603      	mov	r3, r0
 802d9a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 802d9a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802d9a8:	4618      	mov	r0, r3
 802d9aa:	f7ff ff1d 	bl	802d7e8 <__NVIC_EnableIRQ>
}
 802d9ae:	bf00      	nop
 802d9b0:	3708      	adds	r7, #8
 802d9b2:	46bd      	mov	sp, r7
 802d9b4:	bd80      	pop	{r7, pc}

0802d9b6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 802d9b6:	b580      	push	{r7, lr}
 802d9b8:	b082      	sub	sp, #8
 802d9ba:	af00      	add	r7, sp, #0
 802d9bc:	4603      	mov	r3, r0
 802d9be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 802d9c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802d9c4:	4618      	mov	r0, r3
 802d9c6:	f7ff ff2d 	bl	802d824 <__NVIC_DisableIRQ>
}
 802d9ca:	bf00      	nop
 802d9cc:	3708      	adds	r7, #8
 802d9ce:	46bd      	mov	sp, r7
 802d9d0:	bd80      	pop	{r7, pc}

0802d9d2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 802d9d2:	b580      	push	{r7, lr}
 802d9d4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 802d9d6:	f7ff ffa5 	bl	802d924 <__NVIC_SystemReset>

0802d9da <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 802d9da:	b580      	push	{r7, lr}
 802d9dc:	b082      	sub	sp, #8
 802d9de:	af00      	add	r7, sp, #0
 802d9e0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 802d9e2:	687b      	ldr	r3, [r7, #4]
 802d9e4:	2b00      	cmp	r3, #0
 802d9e6:	d101      	bne.n	802d9ec <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 802d9e8:	2301      	movs	r3, #1
 802d9ea:	e00e      	b.n	802da0a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 802d9ec:	687b      	ldr	r3, [r7, #4]
 802d9ee:	795b      	ldrb	r3, [r3, #5]
 802d9f0:	b2db      	uxtb	r3, r3
 802d9f2:	2b00      	cmp	r3, #0
 802d9f4:	d105      	bne.n	802da02 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 802d9f6:	687b      	ldr	r3, [r7, #4]
 802d9f8:	2200      	movs	r2, #0
 802d9fa:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 802d9fc:	6878      	ldr	r0, [r7, #4]
 802d9fe:	f7fd fdc1 	bl	802b584 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 802da02:	687b      	ldr	r3, [r7, #4]
 802da04:	2201      	movs	r2, #1
 802da06:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 802da08:	2300      	movs	r3, #0
}
 802da0a:	4618      	mov	r0, r3
 802da0c:	3708      	adds	r7, #8
 802da0e:	46bd      	mov	sp, r7
 802da10:	bd80      	pop	{r7, pc}

0802da12 <HAL_CRYP_Init>:
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Init(CRYP_HandleTypeDef *hcryp)
{
 802da12:	b580      	push	{r7, lr}
 802da14:	b082      	sub	sp, #8
 802da16:	af00      	add	r7, sp, #0
 802da18:	6078      	str	r0, [r7, #4]
  /* Check the CRYP handle allocation */
  if (hcryp == NULL)
 802da1a:	687b      	ldr	r3, [r7, #4]
 802da1c:	2b00      	cmp	r3, #0
 802da1e:	d101      	bne.n	802da24 <HAL_CRYP_Init+0x12>
  {
    return HAL_ERROR;
 802da20:	2301      	movs	r3, #1
 802da22:	e02a      	b.n	802da7a <HAL_CRYP_Init+0x68>

    /* Init the low level hardware */
    hcryp->MspInitCallback(hcryp);
  }
#else
  if (hcryp->State == HAL_CRYP_STATE_RESET)
 802da24:	687b      	ldr	r3, [r7, #4]
 802da26:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 802da2a:	b2db      	uxtb	r3, r3
 802da2c:	2b00      	cmp	r3, #0
 802da2e:	d106      	bne.n	802da3e <HAL_CRYP_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcryp->Lock = HAL_UNLOCKED;
 802da30:	687b      	ldr	r3, [r7, #4]
 802da32:	2200      	movs	r2, #0
 802da34:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware */
    HAL_CRYP_MspInit(hcryp);
 802da38:	6878      	ldr	r0, [r7, #4]
 802da3a:	f7fd fd31 	bl	802b4a0 <HAL_CRYP_MspInit>
  MODIFY_REG(hcryp->Instance->CR, CRYP_CR_DATATYPE | CRYP_CR_KEYSIZE | CRYP_CR_ALGOMODE,
             hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm);

#else /*AES*/

  MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD,
 802da3e:	687b      	ldr	r3, [r7, #4]
 802da40:	681b      	ldr	r3, [r3, #0]
 802da42:	681b      	ldr	r3, [r3, #0]
 802da44:	f423 23a0 	bic.w	r3, r3, #327680	; 0x50000
 802da48:	f023 0366 	bic.w	r3, r3, #102	; 0x66
 802da4c:	687a      	ldr	r2, [r7, #4]
 802da4e:	6851      	ldr	r1, [r2, #4]
 802da50:	687a      	ldr	r2, [r7, #4]
 802da52:	6892      	ldr	r2, [r2, #8]
 802da54:	4311      	orrs	r1, r2
 802da56:	687a      	ldr	r2, [r7, #4]
 802da58:	6952      	ldr	r2, [r2, #20]
 802da5a:	4311      	orrs	r1, r2
 802da5c:	687a      	ldr	r2, [r7, #4]
 802da5e:	6812      	ldr	r2, [r2, #0]
 802da60:	430b      	orrs	r3, r1
 802da62:	6013      	str	r3, [r2, #0]
             hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm);

#endif  /* End AES or CRYP*/

  /* Reset Error Code field */
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 802da64:	687b      	ldr	r3, [r7, #4]
 802da66:	2200      	movs	r2, #0
 802da68:	651a      	str	r2, [r3, #80]	; 0x50

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 802da6a:	687b      	ldr	r3, [r7, #4]
 802da6c:	2201      	movs	r2, #1
 802da6e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Set the default CRYP phase */
  hcryp->Phase = CRYP_PHASE_READY;
 802da72:	687b      	ldr	r3, [r7, #4]
 802da74:	2201      	movs	r2, #1
 802da76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Return function status */
  return HAL_OK;
 802da78:	2300      	movs	r3, #0
}
 802da7a:	4618      	mov	r0, r3
 802da7c:	3708      	adds	r7, #8
 802da7e:	46bd      	mov	sp, r7
 802da80:	bd80      	pop	{r7, pc}

0802da82 <HAL_CRYP_SetConfig>:
  * @param  pConf: pointer to a CRYP_ConfigTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_SetConfig(CRYP_HandleTypeDef *hcryp, CRYP_ConfigTypeDef *pConf)
{
 802da82:	b480      	push	{r7}
 802da84:	b083      	sub	sp, #12
 802da86:	af00      	add	r7, sp, #0
 802da88:	6078      	str	r0, [r7, #4]
 802da8a:	6039      	str	r1, [r7, #0]
  /* Check the CRYP handle allocation */
  if ((hcryp == NULL) || (pConf == NULL))
 802da8c:	687b      	ldr	r3, [r7, #4]
 802da8e:	2b00      	cmp	r3, #0
 802da90:	d002      	beq.n	802da98 <HAL_CRYP_SetConfig+0x16>
 802da92:	683b      	ldr	r3, [r7, #0]
 802da94:	2b00      	cmp	r3, #0
 802da96:	d101      	bne.n	802da9c <HAL_CRYP_SetConfig+0x1a>
  {
    return HAL_ERROR;
 802da98:	2301      	movs	r3, #1
 802da9a:	e06e      	b.n	802db7a <HAL_CRYP_SetConfig+0xf8>
  /* Check parameters */
  assert_param(IS_CRYP_KEYSIZE(pConf->KeySize));
  assert_param(IS_CRYP_DATATYPE(pConf->DataType));
  assert_param(IS_CRYP_ALGORITHM(pConf->Algorithm));

  if (hcryp->State == HAL_CRYP_STATE_READY)
 802da9c:	687b      	ldr	r3, [r7, #4]
 802da9e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 802daa2:	b2db      	uxtb	r3, r3
 802daa4:	2b01      	cmp	r3, #1
 802daa6:	d15d      	bne.n	802db64 <HAL_CRYP_SetConfig+0xe2>
  {
    /* Change the CRYP state */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 802daa8:	687b      	ldr	r3, [r7, #4]
 802daaa:	2202      	movs	r2, #2
 802daac:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /* Process locked */
    __HAL_LOCK(hcryp);
 802dab0:	687b      	ldr	r3, [r7, #4]
 802dab2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 802dab6:	2b01      	cmp	r3, #1
 802dab8:	d101      	bne.n	802dabe <HAL_CRYP_SetConfig+0x3c>
 802daba:	2302      	movs	r3, #2
 802dabc:	e05d      	b.n	802db7a <HAL_CRYP_SetConfig+0xf8>
 802dabe:	687b      	ldr	r3, [r7, #4]
 802dac0:	2201      	movs	r2, #1
 802dac2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Set  CRYP parameters  */
    hcryp->Init.DataType   = pConf->DataType;
 802dac6:	683b      	ldr	r3, [r7, #0]
 802dac8:	681a      	ldr	r2, [r3, #0]
 802daca:	687b      	ldr	r3, [r7, #4]
 802dacc:	605a      	str	r2, [r3, #4]
    hcryp->Init.pKey       = pConf->pKey;
 802dace:	683b      	ldr	r3, [r7, #0]
 802dad0:	689a      	ldr	r2, [r3, #8]
 802dad2:	687b      	ldr	r3, [r7, #4]
 802dad4:	60da      	str	r2, [r3, #12]
    hcryp->Init.Algorithm  = pConf->Algorithm;
 802dad6:	683b      	ldr	r3, [r7, #0]
 802dad8:	691a      	ldr	r2, [r3, #16]
 802dada:	687b      	ldr	r3, [r7, #4]
 802dadc:	615a      	str	r2, [r3, #20]
    hcryp->Init.KeySize    = pConf->KeySize;
 802dade:	683b      	ldr	r3, [r7, #0]
 802dae0:	685a      	ldr	r2, [r3, #4]
 802dae2:	687b      	ldr	r3, [r7, #4]
 802dae4:	609a      	str	r2, [r3, #8]
    hcryp->Init.pInitVect  = pConf->pInitVect;
 802dae6:	683b      	ldr	r3, [r7, #0]
 802dae8:	68da      	ldr	r2, [r3, #12]
 802daea:	687b      	ldr	r3, [r7, #4]
 802daec:	611a      	str	r2, [r3, #16]
    hcryp->Init.Header     = pConf->Header;
 802daee:	683b      	ldr	r3, [r7, #0]
 802daf0:	695a      	ldr	r2, [r3, #20]
 802daf2:	687b      	ldr	r3, [r7, #4]
 802daf4:	619a      	str	r2, [r3, #24]
    hcryp->Init.HeaderSize = pConf->HeaderSize;
 802daf6:	683b      	ldr	r3, [r7, #0]
 802daf8:	699a      	ldr	r2, [r3, #24]
 802dafa:	687b      	ldr	r3, [r7, #4]
 802dafc:	61da      	str	r2, [r3, #28]
    hcryp->Init.B0         = pConf->B0;
 802dafe:	683b      	ldr	r3, [r7, #0]
 802db00:	69da      	ldr	r2, [r3, #28]
 802db02:	687b      	ldr	r3, [r7, #4]
 802db04:	621a      	str	r2, [r3, #32]
    hcryp->Init.DataWidthUnit = pConf->DataWidthUnit;
 802db06:	683b      	ldr	r3, [r7, #0]
 802db08:	6a1a      	ldr	r2, [r3, #32]
 802db0a:	687b      	ldr	r3, [r7, #4]
 802db0c:	625a      	str	r2, [r3, #36]	; 0x24

    MODIFY_REG(hcryp->Instance->CR, CRYP_CR_DATATYPE | CRYP_CR_KEYSIZE | CRYP_CR_ALGOMODE,
               hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm);

#else /*AES*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD,
 802db0e:	687b      	ldr	r3, [r7, #4]
 802db10:	681b      	ldr	r3, [r3, #0]
 802db12:	681b      	ldr	r3, [r3, #0]
 802db14:	f423 23a0 	bic.w	r3, r3, #327680	; 0x50000
 802db18:	f023 0366 	bic.w	r3, r3, #102	; 0x66
 802db1c:	687a      	ldr	r2, [r7, #4]
 802db1e:	6851      	ldr	r1, [r2, #4]
 802db20:	687a      	ldr	r2, [r7, #4]
 802db22:	6892      	ldr	r2, [r2, #8]
 802db24:	4311      	orrs	r1, r2
 802db26:	687a      	ldr	r2, [r7, #4]
 802db28:	6952      	ldr	r2, [r2, #20]
 802db2a:	4311      	orrs	r1, r2
 802db2c:	687a      	ldr	r2, [r7, #4]
 802db2e:	6812      	ldr	r2, [r2, #0]
 802db30:	430b      	orrs	r3, r1
 802db32:	6013      	str	r3, [r2, #0]
               hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm);

    /*clear error flags*/
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_ERR_CLEAR);
 802db34:	687b      	ldr	r3, [r7, #4]
 802db36:	681b      	ldr	r3, [r3, #0]
 802db38:	681a      	ldr	r2, [r3, #0]
 802db3a:	687b      	ldr	r3, [r7, #4]
 802db3c:	681b      	ldr	r3, [r3, #0]
 802db3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802db42:	601a      	str	r2, [r3, #0]

#endif  /* End AES or CRYP */

    /* Process Unlocked */
    __HAL_UNLOCK(hcryp);
 802db44:	687b      	ldr	r3, [r7, #4]
 802db46:	2200      	movs	r2, #0
 802db48:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Reset Error Code field */
    hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 802db4c:	687b      	ldr	r3, [r7, #4]
 802db4e:	2200      	movs	r2, #0
 802db50:	651a      	str	r2, [r3, #80]	; 0x50

    /* Change the CRYP state */
    hcryp->State = HAL_CRYP_STATE_READY;
 802db52:	687b      	ldr	r3, [r7, #4]
 802db54:	2201      	movs	r2, #1
 802db56:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /* Set the default CRYP phase */
    hcryp->Phase = CRYP_PHASE_READY;
 802db5a:	687b      	ldr	r3, [r7, #4]
 802db5c:	2201      	movs	r2, #1
 802db5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return function status */
    return HAL_OK;
 802db60:	2300      	movs	r3, #0
 802db62:	e00a      	b.n	802db7a <HAL_CRYP_SetConfig+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hcryp);
 802db64:	687b      	ldr	r3, [r7, #4]
 802db66:	2200      	movs	r2, #0
 802db68:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 802db6c:	687b      	ldr	r3, [r7, #4]
 802db6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802db70:	f043 0208 	orr.w	r2, r3, #8
 802db74:	687b      	ldr	r3, [r7, #4]
 802db76:	651a      	str	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 802db78:	2301      	movs	r3, #1
  }
}
 802db7a:	4618      	mov	r0, r3
 802db7c:	370c      	adds	r7, #12
 802db7e:	46bd      	mov	sp, r7
 802db80:	f85d 7b04 	ldr.w	r7, [sp], #4
 802db84:	4770      	bx	lr

0802db86 <HAL_CRYP_GetConfig>:
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_GetConfig(CRYP_HandleTypeDef *hcryp, CRYP_ConfigTypeDef *pConf)
{
 802db86:	b480      	push	{r7}
 802db88:	b083      	sub	sp, #12
 802db8a:	af00      	add	r7, sp, #0
 802db8c:	6078      	str	r0, [r7, #4]
 802db8e:	6039      	str	r1, [r7, #0]
  /* Check the CRYP handle allocation */
  if ((hcryp == NULL) || (pConf == NULL))
 802db90:	687b      	ldr	r3, [r7, #4]
 802db92:	2b00      	cmp	r3, #0
 802db94:	d002      	beq.n	802db9c <HAL_CRYP_GetConfig+0x16>
 802db96:	683b      	ldr	r3, [r7, #0]
 802db98:	2b00      	cmp	r3, #0
 802db9a:	d101      	bne.n	802dba0 <HAL_CRYP_GetConfig+0x1a>
  {
    return HAL_ERROR;
 802db9c:	2301      	movs	r3, #1
 802db9e:	e04d      	b.n	802dc3c <HAL_CRYP_GetConfig+0xb6>
  }

  if (hcryp->State == HAL_CRYP_STATE_READY)
 802dba0:	687b      	ldr	r3, [r7, #4]
 802dba2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 802dba6:	b2db      	uxtb	r3, r3
 802dba8:	2b01      	cmp	r3, #1
 802dbaa:	d13c      	bne.n	802dc26 <HAL_CRYP_GetConfig+0xa0>
  {
    /* Change the CRYP state */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 802dbac:	687b      	ldr	r3, [r7, #4]
 802dbae:	2202      	movs	r2, #2
 802dbb0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /* Process locked */
    __HAL_LOCK(hcryp);
 802dbb4:	687b      	ldr	r3, [r7, #4]
 802dbb6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 802dbba:	2b01      	cmp	r3, #1
 802dbbc:	d101      	bne.n	802dbc2 <HAL_CRYP_GetConfig+0x3c>
 802dbbe:	2302      	movs	r3, #2
 802dbc0:	e03c      	b.n	802dc3c <HAL_CRYP_GetConfig+0xb6>
 802dbc2:	687b      	ldr	r3, [r7, #4]
 802dbc4:	2201      	movs	r2, #1
 802dbc6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Get  CRYP parameters  */
    pConf->DataType        = hcryp->Init.DataType;
 802dbca:	687b      	ldr	r3, [r7, #4]
 802dbcc:	685a      	ldr	r2, [r3, #4]
 802dbce:	683b      	ldr	r3, [r7, #0]
 802dbd0:	601a      	str	r2, [r3, #0]
    pConf->pKey            = hcryp->Init.pKey;
 802dbd2:	687b      	ldr	r3, [r7, #4]
 802dbd4:	68da      	ldr	r2, [r3, #12]
 802dbd6:	683b      	ldr	r3, [r7, #0]
 802dbd8:	609a      	str	r2, [r3, #8]
    pConf->Algorithm       = hcryp->Init.Algorithm;
 802dbda:	687b      	ldr	r3, [r7, #4]
 802dbdc:	695a      	ldr	r2, [r3, #20]
 802dbde:	683b      	ldr	r3, [r7, #0]
 802dbe0:	611a      	str	r2, [r3, #16]
    pConf->KeySize         = hcryp->Init.KeySize ;
 802dbe2:	687b      	ldr	r3, [r7, #4]
 802dbe4:	689a      	ldr	r2, [r3, #8]
 802dbe6:	683b      	ldr	r3, [r7, #0]
 802dbe8:	605a      	str	r2, [r3, #4]
    pConf->pInitVect       = hcryp->Init.pInitVect;
 802dbea:	687b      	ldr	r3, [r7, #4]
 802dbec:	691a      	ldr	r2, [r3, #16]
 802dbee:	683b      	ldr	r3, [r7, #0]
 802dbf0:	60da      	str	r2, [r3, #12]
    pConf->Header          = hcryp->Init.Header ;
 802dbf2:	687b      	ldr	r3, [r7, #4]
 802dbf4:	699a      	ldr	r2, [r3, #24]
 802dbf6:	683b      	ldr	r3, [r7, #0]
 802dbf8:	615a      	str	r2, [r3, #20]
    pConf->HeaderSize      = hcryp->Init.HeaderSize;
 802dbfa:	687b      	ldr	r3, [r7, #4]
 802dbfc:	69da      	ldr	r2, [r3, #28]
 802dbfe:	683b      	ldr	r3, [r7, #0]
 802dc00:	619a      	str	r2, [r3, #24]
    pConf->B0              = hcryp->Init.B0;
 802dc02:	687b      	ldr	r3, [r7, #4]
 802dc04:	6a1a      	ldr	r2, [r3, #32]
 802dc06:	683b      	ldr	r3, [r7, #0]
 802dc08:	61da      	str	r2, [r3, #28]
    pConf->DataWidthUnit    = hcryp->Init.DataWidthUnit;
 802dc0a:	687b      	ldr	r3, [r7, #4]
 802dc0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802dc0e:	683b      	ldr	r3, [r7, #0]
 802dc10:	621a      	str	r2, [r3, #32]

    /* Process Unlocked */
    __HAL_UNLOCK(hcryp);
 802dc12:	687b      	ldr	r3, [r7, #4]
 802dc14:	2200      	movs	r2, #0
 802dc16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Change the CRYP state */
    hcryp->State = HAL_CRYP_STATE_READY;
 802dc1a:	687b      	ldr	r3, [r7, #4]
 802dc1c:	2201      	movs	r2, #1
 802dc1e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /* Return function status */
    return HAL_OK;
 802dc22:	2300      	movs	r3, #0
 802dc24:	e00a      	b.n	802dc3c <HAL_CRYP_GetConfig+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hcryp);
 802dc26:	687b      	ldr	r3, [r7, #4]
 802dc28:	2200      	movs	r2, #0
 802dc2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 802dc2e:	687b      	ldr	r3, [r7, #4]
 802dc30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802dc32:	f043 0208 	orr.w	r2, r3, #8
 802dc36:	687b      	ldr	r3, [r7, #4]
 802dc38:	651a      	str	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 802dc3a:	2301      	movs	r3, #1
  }
}
 802dc3c:	4618      	mov	r0, r3
 802dc3e:	370c      	adds	r7, #12
 802dc40:	46bd      	mov	sp, r7
 802dc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 802dc46:	4770      	bx	lr

0802dc48 <HAL_CRYP_Encrypt>:
  * @param  Timeout: Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Encrypt(CRYP_HandleTypeDef *hcryp, uint32_t *Input, uint16_t Size, uint32_t *Output,
                                   uint32_t Timeout)
{
 802dc48:	b580      	push	{r7, lr}
 802dc4a:	b086      	sub	sp, #24
 802dc4c:	af00      	add	r7, sp, #0
 802dc4e:	60f8      	str	r0, [r7, #12]
 802dc50:	60b9      	str	r1, [r7, #8]
 802dc52:	603b      	str	r3, [r7, #0]
 802dc54:	4613      	mov	r3, r2
 802dc56:	80fb      	strh	r3, [r7, #6]
  uint32_t algo;
  HAL_StatusTypeDef status;

  if (hcryp->State == HAL_CRYP_STATE_READY)
 802dc58:	68fb      	ldr	r3, [r7, #12]
 802dc5a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 802dc5e:	b2db      	uxtb	r3, r3
 802dc60:	2b01      	cmp	r3, #1
 802dc62:	d176      	bne.n	802dd52 <HAL_CRYP_Encrypt+0x10a>
  {
    /* Change state Busy */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 802dc64:	68fb      	ldr	r3, [r7, #12]
 802dc66:	2202      	movs	r2, #2
 802dc68:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /* Process locked */
    __HAL_LOCK(hcryp);
 802dc6c:	68fb      	ldr	r3, [r7, #12]
 802dc6e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 802dc72:	2b01      	cmp	r3, #1
 802dc74:	d101      	bne.n	802dc7a <HAL_CRYP_Encrypt+0x32>
 802dc76:	2302      	movs	r3, #2
 802dc78:	e074      	b.n	802dd64 <HAL_CRYP_Encrypt+0x11c>
 802dc7a:	68fb      	ldr	r3, [r7, #12]
 802dc7c:	2201      	movs	r2, #1
 802dc7e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /*  Reset CrypInCount, CrypOutCount and Initialize pCrypInBuffPtr and pCrypOutBuffPtr parameters*/
    hcryp->CrypInCount = 0U;
 802dc82:	68fb      	ldr	r3, [r7, #12]
 802dc84:	2200      	movs	r2, #0
 802dc86:	875a      	strh	r2, [r3, #58]	; 0x3a
    hcryp->CrypOutCount = 0U;
 802dc88:	68fb      	ldr	r3, [r7, #12]
 802dc8a:	2200      	movs	r2, #0
 802dc8c:	879a      	strh	r2, [r3, #60]	; 0x3c
    hcryp->pCrypInBuffPtr = Input;
 802dc8e:	68fb      	ldr	r3, [r7, #12]
 802dc90:	68ba      	ldr	r2, [r7, #8]
 802dc92:	631a      	str	r2, [r3, #48]	; 0x30
    hcryp->pCrypOutBuffPtr = Output;
 802dc94:	68fb      	ldr	r3, [r7, #12]
 802dc96:	683a      	ldr	r2, [r7, #0]
 802dc98:	635a      	str	r2, [r3, #52]	; 0x34

    /*  Calculate Size parameter in Byte*/
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 802dc9a:	68fb      	ldr	r3, [r7, #12]
 802dc9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802dc9e:	2b00      	cmp	r3, #0
 802dca0:	d105      	bne.n	802dcae <HAL_CRYP_Encrypt+0x66>
    {
      hcryp->Size = Size * 4U;
 802dca2:	88fb      	ldrh	r3, [r7, #6]
 802dca4:	009b      	lsls	r3, r3, #2
 802dca6:	b29a      	uxth	r2, r3
 802dca8:	68fb      	ldr	r3, [r7, #12]
 802dcaa:	87da      	strh	r2, [r3, #62]	; 0x3e
 802dcac:	e002      	b.n	802dcb4 <HAL_CRYP_Encrypt+0x6c>
    }
    else
    {
      hcryp->Size = Size;
 802dcae:	68fb      	ldr	r3, [r7, #12]
 802dcb0:	88fa      	ldrh	r2, [r7, #6]
 802dcb2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }

#else /*AES*/

    /* Set the operating mode*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_ENCRYPT);
 802dcb4:	68fb      	ldr	r3, [r7, #12]
 802dcb6:	681b      	ldr	r3, [r3, #0]
 802dcb8:	681a      	ldr	r2, [r3, #0]
 802dcba:	68fb      	ldr	r3, [r7, #12]
 802dcbc:	681b      	ldr	r3, [r3, #0]
 802dcbe:	f022 0218 	bic.w	r2, r2, #24
 802dcc2:	601a      	str	r2, [r3, #0]

    /* algo get algorithm selected */
    algo = hcryp->Instance->CR & AES_CR_CHMOD;
 802dcc4:	68fb      	ldr	r3, [r7, #12]
 802dcc6:	681b      	ldr	r3, [r3, #0]
 802dcc8:	681a      	ldr	r2, [r3, #0]
 802dcca:	4b28      	ldr	r3, [pc, #160]	; (802dd6c <HAL_CRYP_Encrypt+0x124>)
 802dccc:	4013      	ands	r3, r2
 802dcce:	613b      	str	r3, [r7, #16]

    switch (algo)
 802dcd0:	693b      	ldr	r3, [r7, #16]
 802dcd2:	2b40      	cmp	r3, #64	; 0x40
 802dcd4:	d00c      	beq.n	802dcf0 <HAL_CRYP_Encrypt+0xa8>
 802dcd6:	2b40      	cmp	r3, #64	; 0x40
 802dcd8:	d804      	bhi.n	802dce4 <HAL_CRYP_Encrypt+0x9c>
 802dcda:	2b00      	cmp	r3, #0
 802dcdc:	d008      	beq.n	802dcf0 <HAL_CRYP_Encrypt+0xa8>
 802dcde:	2b20      	cmp	r3, #32
 802dce0:	d006      	beq.n	802dcf0 <HAL_CRYP_Encrypt+0xa8>
 802dce2:	e01a      	b.n	802dd1a <HAL_CRYP_Encrypt+0xd2>
 802dce4:	2b60      	cmp	r3, #96	; 0x60
 802dce6:	d00a      	beq.n	802dcfe <HAL_CRYP_Encrypt+0xb6>
 802dce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802dcec:	d00e      	beq.n	802dd0c <HAL_CRYP_Encrypt+0xc4>
 802dcee:	e014      	b.n	802dd1a <HAL_CRYP_Encrypt+0xd2>
      case CRYP_AES_ECB:
      case CRYP_AES_CBC:
      case CRYP_AES_CTR:

        /* AES encryption */
        status = CRYP_AES_Encrypt(hcryp, Timeout);
 802dcf0:	6a39      	ldr	r1, [r7, #32]
 802dcf2:	68f8      	ldr	r0, [r7, #12]
 802dcf4:	f000 f8dc 	bl	802deb0 <CRYP_AES_Encrypt>
 802dcf8:	4603      	mov	r3, r0
 802dcfa:	75fb      	strb	r3, [r7, #23]
        break;
 802dcfc:	e01d      	b.n	802dd3a <HAL_CRYP_Encrypt+0xf2>

      case CRYP_AES_GCM_GMAC:

        /* AES GCM encryption */
        status = CRYP_AESGCM_Process(hcryp, Timeout) ;
 802dcfe:	6a39      	ldr	r1, [r7, #32]
 802dd00:	68f8      	ldr	r0, [r7, #12]
 802dd02:	f000 fb2b 	bl	802e35c <CRYP_AESGCM_Process>
 802dd06:	4603      	mov	r3, r0
 802dd08:	75fb      	strb	r3, [r7, #23]
        break;
 802dd0a:	e016      	b.n	802dd3a <HAL_CRYP_Encrypt+0xf2>

      case CRYP_AES_CCM:

        /* AES CCM encryption */
        status = CRYP_AESCCM_Process(hcryp, Timeout);
 802dd0c:	6a39      	ldr	r1, [r7, #32]
 802dd0e:	68f8      	ldr	r0, [r7, #12]
 802dd10:	f000 fc28 	bl	802e564 <CRYP_AESCCM_Process>
 802dd14:	4603      	mov	r3, r0
 802dd16:	75fb      	strb	r3, [r7, #23]
        break;
 802dd18:	e00f      	b.n	802dd3a <HAL_CRYP_Encrypt+0xf2>

      default:
        hcryp->ErrorCode |= HAL_CRYP_ERROR_NOT_SUPPORTED;
 802dd1a:	68fb      	ldr	r3, [r7, #12]
 802dd1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802dd1e:	f043 0220 	orr.w	r2, r3, #32
 802dd22:	68fb      	ldr	r3, [r7, #12]
 802dd24:	651a      	str	r2, [r3, #80]	; 0x50
        /* Change the CRYP peripheral state */
        hcryp->State = HAL_CRYP_STATE_READY;
 802dd26:	68fb      	ldr	r3, [r7, #12]
 802dd28:	2201      	movs	r2, #1
 802dd2a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 802dd2e:	68fb      	ldr	r3, [r7, #12]
 802dd30:	2200      	movs	r2, #0
 802dd32:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        return HAL_ERROR;
 802dd36:	2301      	movs	r3, #1
 802dd38:	e014      	b.n	802dd64 <HAL_CRYP_Encrypt+0x11c>
    }
#endif /*end AES or CRYP */

    if (status == HAL_OK)
 802dd3a:	7dfb      	ldrb	r3, [r7, #23]
 802dd3c:	2b00      	cmp	r3, #0
 802dd3e:	d110      	bne.n	802dd62 <HAL_CRYP_Encrypt+0x11a>
    {
      /* Change the CRYP peripheral state */
      hcryp->State = HAL_CRYP_STATE_READY;
 802dd40:	68fb      	ldr	r3, [r7, #12]
 802dd42:	2201      	movs	r2, #1
 802dd44:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

      /* Process unlocked */
      __HAL_UNLOCK(hcryp);
 802dd48:	68fb      	ldr	r3, [r7, #12]
 802dd4a:	2200      	movs	r2, #0
 802dd4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 802dd50:	e007      	b.n	802dd62 <HAL_CRYP_Encrypt+0x11a>
    }
  }
  else
  {
    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 802dd52:	68fb      	ldr	r3, [r7, #12]
 802dd54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802dd56:	f043 0208 	orr.w	r2, r3, #8
 802dd5a:	68fb      	ldr	r3, [r7, #12]
 802dd5c:	651a      	str	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 802dd5e:	2301      	movs	r3, #1
 802dd60:	e000      	b.n	802dd64 <HAL_CRYP_Encrypt+0x11c>
  }

  /* Return function status */
  return HAL_OK;
 802dd62:	2300      	movs	r3, #0
}
 802dd64:	4618      	mov	r0, r3
 802dd66:	3718      	adds	r7, #24
 802dd68:	46bd      	mov	sp, r7
 802dd6a:	bd80      	pop	{r7, pc}
 802dd6c:	00010060 	.word	0x00010060

0802dd70 <HAL_CRYP_Decrypt>:
  * @param  Timeout: Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Decrypt(CRYP_HandleTypeDef *hcryp, uint32_t *Input, uint16_t Size, uint32_t *Output,
                                   uint32_t Timeout)
{
 802dd70:	b580      	push	{r7, lr}
 802dd72:	b086      	sub	sp, #24
 802dd74:	af00      	add	r7, sp, #0
 802dd76:	60f8      	str	r0, [r7, #12]
 802dd78:	60b9      	str	r1, [r7, #8]
 802dd7a:	603b      	str	r3, [r7, #0]
 802dd7c:	4613      	mov	r3, r2
 802dd7e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint32_t algo;

  if (hcryp->State == HAL_CRYP_STATE_READY)
 802dd80:	68fb      	ldr	r3, [r7, #12]
 802dd82:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 802dd86:	b2db      	uxtb	r3, r3
 802dd88:	2b01      	cmp	r3, #1
 802dd8a:	d178      	bne.n	802de7e <HAL_CRYP_Decrypt+0x10e>
  {
    /* Change state Busy */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 802dd8c:	68fb      	ldr	r3, [r7, #12]
 802dd8e:	2202      	movs	r2, #2
 802dd90:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /* Process locked */
    __HAL_LOCK(hcryp);
 802dd94:	68fb      	ldr	r3, [r7, #12]
 802dd96:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 802dd9a:	2b01      	cmp	r3, #1
 802dd9c:	d101      	bne.n	802dda2 <HAL_CRYP_Decrypt+0x32>
 802dd9e:	2302      	movs	r3, #2
 802dda0:	e076      	b.n	802de90 <HAL_CRYP_Decrypt+0x120>
 802dda2:	68fb      	ldr	r3, [r7, #12]
 802dda4:	2201      	movs	r2, #1
 802dda6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /*  Reset CrypInCount, CrypOutCount and Initialize pCrypInBuffPtr and pCrypOutBuffPtr  parameters*/
    hcryp->CrypInCount = 0U;
 802ddaa:	68fb      	ldr	r3, [r7, #12]
 802ddac:	2200      	movs	r2, #0
 802ddae:	875a      	strh	r2, [r3, #58]	; 0x3a
    hcryp->CrypOutCount = 0U;
 802ddb0:	68fb      	ldr	r3, [r7, #12]
 802ddb2:	2200      	movs	r2, #0
 802ddb4:	879a      	strh	r2, [r3, #60]	; 0x3c
    hcryp->pCrypInBuffPtr = Input;
 802ddb6:	68fb      	ldr	r3, [r7, #12]
 802ddb8:	68ba      	ldr	r2, [r7, #8]
 802ddba:	631a      	str	r2, [r3, #48]	; 0x30
    hcryp->pCrypOutBuffPtr = Output;
 802ddbc:	68fb      	ldr	r3, [r7, #12]
 802ddbe:	683a      	ldr	r2, [r7, #0]
 802ddc0:	635a      	str	r2, [r3, #52]	; 0x34

    /*  Calculate Size parameter in Byte*/
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 802ddc2:	68fb      	ldr	r3, [r7, #12]
 802ddc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ddc6:	2b00      	cmp	r3, #0
 802ddc8:	d105      	bne.n	802ddd6 <HAL_CRYP_Decrypt+0x66>
    {
      hcryp->Size = Size * 4U;
 802ddca:	88fb      	ldrh	r3, [r7, #6]
 802ddcc:	009b      	lsls	r3, r3, #2
 802ddce:	b29a      	uxth	r2, r3
 802ddd0:	68fb      	ldr	r3, [r7, #12]
 802ddd2:	87da      	strh	r2, [r3, #62]	; 0x3e
 802ddd4:	e002      	b.n	802dddc <HAL_CRYP_Decrypt+0x6c>
    }
    else
    {
      hcryp->Size = Size;
 802ddd6:	68fb      	ldr	r3, [r7, #12]
 802ddd8:	88fa      	ldrh	r2, [r7, #6]
 802ddda:	87da      	strh	r2, [r3, #62]	; 0x3e
    }

#else /*AES*/

    /* Set Decryption operating mode*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 802dddc:	68fb      	ldr	r3, [r7, #12]
 802ddde:	681b      	ldr	r3, [r3, #0]
 802dde0:	681b      	ldr	r3, [r3, #0]
 802dde2:	f023 0218 	bic.w	r2, r3, #24
 802dde6:	68fb      	ldr	r3, [r7, #12]
 802dde8:	681b      	ldr	r3, [r3, #0]
 802ddea:	f042 0210 	orr.w	r2, r2, #16
 802ddee:	601a      	str	r2, [r3, #0]

    /* algo get algorithm selected */
    algo = hcryp->Instance->CR & AES_CR_CHMOD;
 802ddf0:	68fb      	ldr	r3, [r7, #12]
 802ddf2:	681b      	ldr	r3, [r3, #0]
 802ddf4:	681a      	ldr	r2, [r3, #0]
 802ddf6:	4b28      	ldr	r3, [pc, #160]	; (802de98 <HAL_CRYP_Decrypt+0x128>)
 802ddf8:	4013      	ands	r3, r2
 802ddfa:	613b      	str	r3, [r7, #16]

    switch (algo)
 802ddfc:	693b      	ldr	r3, [r7, #16]
 802ddfe:	2b40      	cmp	r3, #64	; 0x40
 802de00:	d00c      	beq.n	802de1c <HAL_CRYP_Decrypt+0xac>
 802de02:	2b40      	cmp	r3, #64	; 0x40
 802de04:	d804      	bhi.n	802de10 <HAL_CRYP_Decrypt+0xa0>
 802de06:	2b00      	cmp	r3, #0
 802de08:	d008      	beq.n	802de1c <HAL_CRYP_Decrypt+0xac>
 802de0a:	2b20      	cmp	r3, #32
 802de0c:	d006      	beq.n	802de1c <HAL_CRYP_Decrypt+0xac>
 802de0e:	e01a      	b.n	802de46 <HAL_CRYP_Decrypt+0xd6>
 802de10:	2b60      	cmp	r3, #96	; 0x60
 802de12:	d00a      	beq.n	802de2a <HAL_CRYP_Decrypt+0xba>
 802de14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802de18:	d00e      	beq.n	802de38 <HAL_CRYP_Decrypt+0xc8>
 802de1a:	e014      	b.n	802de46 <HAL_CRYP_Decrypt+0xd6>
      case CRYP_AES_ECB:
      case CRYP_AES_CBC:
      case CRYP_AES_CTR:

        /* AES decryption */
        status = CRYP_AES_Decrypt(hcryp, Timeout);
 802de1c:	6a39      	ldr	r1, [r7, #32]
 802de1e:	68f8      	ldr	r0, [r7, #12]
 802de20:	f000 f8b7 	bl	802df92 <CRYP_AES_Decrypt>
 802de24:	4603      	mov	r3, r0
 802de26:	75fb      	strb	r3, [r7, #23]
        break;
 802de28:	e01d      	b.n	802de66 <HAL_CRYP_Decrypt+0xf6>

      case CRYP_AES_GCM_GMAC:

        /* AES GCM decryption */
        status = CRYP_AESGCM_Process(hcryp, Timeout) ;
 802de2a:	6a39      	ldr	r1, [r7, #32]
 802de2c:	68f8      	ldr	r0, [r7, #12]
 802de2e:	f000 fa95 	bl	802e35c <CRYP_AESGCM_Process>
 802de32:	4603      	mov	r3, r0
 802de34:	75fb      	strb	r3, [r7, #23]
        break;
 802de36:	e016      	b.n	802de66 <HAL_CRYP_Decrypt+0xf6>

      case CRYP_AES_CCM:

        /* AES CCM decryption */
        status = CRYP_AESCCM_Process(hcryp, Timeout);
 802de38:	6a39      	ldr	r1, [r7, #32]
 802de3a:	68f8      	ldr	r0, [r7, #12]
 802de3c:	f000 fb92 	bl	802e564 <CRYP_AESCCM_Process>
 802de40:	4603      	mov	r3, r0
 802de42:	75fb      	strb	r3, [r7, #23]
        break;
 802de44:	e00f      	b.n	802de66 <HAL_CRYP_Decrypt+0xf6>

      default:
        hcryp->ErrorCode |= HAL_CRYP_ERROR_NOT_SUPPORTED;
 802de46:	68fb      	ldr	r3, [r7, #12]
 802de48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802de4a:	f043 0220 	orr.w	r2, r3, #32
 802de4e:	68fb      	ldr	r3, [r7, #12]
 802de50:	651a      	str	r2, [r3, #80]	; 0x50
        /* Change the CRYP peripheral state */
        hcryp->State = HAL_CRYP_STATE_READY;
 802de52:	68fb      	ldr	r3, [r7, #12]
 802de54:	2201      	movs	r2, #1
 802de56:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 802de5a:	68fb      	ldr	r3, [r7, #12]
 802de5c:	2200      	movs	r2, #0
 802de5e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        return HAL_ERROR;
 802de62:	2301      	movs	r3, #1
 802de64:	e014      	b.n	802de90 <HAL_CRYP_Decrypt+0x120>
    }
#endif /* End AES or CRYP */

    if (status == HAL_OK)
 802de66:	7dfb      	ldrb	r3, [r7, #23]
 802de68:	2b00      	cmp	r3, #0
 802de6a:	d110      	bne.n	802de8e <HAL_CRYP_Decrypt+0x11e>
    {
      /* Change the CRYP peripheral state */
      hcryp->State = HAL_CRYP_STATE_READY;
 802de6c:	68fb      	ldr	r3, [r7, #12]
 802de6e:	2201      	movs	r2, #1
 802de70:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

      /* Process unlocked */
      __HAL_UNLOCK(hcryp);
 802de74:	68fb      	ldr	r3, [r7, #12]
 802de76:	2200      	movs	r2, #0
 802de78:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 802de7c:	e007      	b.n	802de8e <HAL_CRYP_Decrypt+0x11e>
    }
  }
  else
  {
    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 802de7e:	68fb      	ldr	r3, [r7, #12]
 802de80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802de82:	f043 0208 	orr.w	r2, r3, #8
 802de86:	68fb      	ldr	r3, [r7, #12]
 802de88:	651a      	str	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 802de8a:	2301      	movs	r3, #1
 802de8c:	e000      	b.n	802de90 <HAL_CRYP_Decrypt+0x120>
  }

  /* Return function status */
  return HAL_OK;
 802de8e:	2300      	movs	r3, #0
}
 802de90:	4618      	mov	r0, r3
 802de92:	3718      	adds	r7, #24
 802de94:	46bd      	mov	sp, r7
 802de96:	bd80      	pop	{r7, pc}
 802de98:	00010060 	.word	0x00010060

0802de9c <HAL_CRYP_ErrorCallback>:
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module.
  * @retval None
  */
__weak void HAL_CRYP_ErrorCallback(CRYP_HandleTypeDef *hcryp)
{
 802de9c:	b480      	push	{r7}
 802de9e:	b083      	sub	sp, #12
 802dea0:	af00      	add	r7, sp, #0
 802dea2:	6078      	str	r0, [r7, #4]
  UNUSED(hcryp);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CRYP_ErrorCallback could be implemented in the user file
   */
}
 802dea4:	bf00      	nop
 802dea6:	370c      	adds	r7, #12
 802dea8:	46bd      	mov	sp, r7
 802deaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 802deae:	4770      	bx	lr

0802deb0 <CRYP_AES_Encrypt>:
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure
  * @param  Timeout: specify Timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AES_Encrypt(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 802deb0:	b580      	push	{r7, lr}
 802deb2:	b084      	sub	sp, #16
 802deb4:	af00      	add	r7, sp, #0
 802deb6:	6078      	str	r0, [r7, #4]
 802deb8:	6039      	str	r1, [r7, #0]
  uint16_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 802deba:	2301      	movs	r3, #1
 802debc:	60bb      	str	r3, [r7, #8]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 802debe:	687b      	ldr	r3, [r7, #4]
 802dec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802dec2:	2b01      	cmp	r3, #1
 802dec4:	d109      	bne.n	802deda <CRYP_AES_Encrypt+0x2a>
  {
    if (hcryp->KeyIVConfig == 1U)
 802dec6:	687b      	ldr	r3, [r7, #4]
 802dec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802deca:	2b01      	cmp	r3, #1
 802decc:	d102      	bne.n	802ded4 <CRYP_AES_Encrypt+0x24>
    {
      /* If the Key and IV configuration has to be done only once
      and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 802dece:	2300      	movs	r3, #0
 802ded0:	60bb      	str	r3, [r7, #8]
 802ded2:	e002      	b.n	802deda <CRYP_AES_Encrypt+0x2a>
    else
    {
      /* If the Key and IV configuration has to be done only once
      and if it has not been done already, do it and set KeyIVConfig
      to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 802ded4:	687b      	ldr	r3, [r7, #4]
 802ded6:	2201      	movs	r2, #1
 802ded8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  if (DoKeyIVConfig == 1U)
 802deda:	68bb      	ldr	r3, [r7, #8]
 802dedc:	2b01      	cmp	r3, #1
 802dede:	d121      	bne.n	802df24 <CRYP_AES_Encrypt+0x74>
  {

    /*  Set the Key*/
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 802dee0:	687b      	ldr	r3, [r7, #4]
 802dee2:	689b      	ldr	r3, [r3, #8]
 802dee4:	4619      	mov	r1, r3
 802dee6:	6878      	ldr	r0, [r7, #4]
 802dee8:	f000 f9dc 	bl	802e2a4 <CRYP_SetKey>

    if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 802deec:	687b      	ldr	r3, [r7, #4]
 802deee:	695b      	ldr	r3, [r3, #20]
 802def0:	2b00      	cmp	r3, #0
 802def2:	d017      	beq.n	802df24 <CRYP_AES_Encrypt+0x74>
    {
      /* Set the Initialization Vector*/
#if defined (AES)
      hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 802def4:	687b      	ldr	r3, [r7, #4]
 802def6:	691a      	ldr	r2, [r3, #16]
 802def8:	687b      	ldr	r3, [r7, #4]
 802defa:	681b      	ldr	r3, [r3, #0]
 802defc:	6812      	ldr	r2, [r2, #0]
 802defe:	62da      	str	r2, [r3, #44]	; 0x2c
      hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1);
 802df00:	687b      	ldr	r3, [r7, #4]
 802df02:	691a      	ldr	r2, [r3, #16]
 802df04:	687b      	ldr	r3, [r7, #4]
 802df06:	681b      	ldr	r3, [r3, #0]
 802df08:	6852      	ldr	r2, [r2, #4]
 802df0a:	629a      	str	r2, [r3, #40]	; 0x28
      hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2);
 802df0c:	687b      	ldr	r3, [r7, #4]
 802df0e:	691a      	ldr	r2, [r3, #16]
 802df10:	687b      	ldr	r3, [r7, #4]
 802df12:	681b      	ldr	r3, [r3, #0]
 802df14:	6892      	ldr	r2, [r2, #8]
 802df16:	625a      	str	r2, [r3, #36]	; 0x24
      hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3);
 802df18:	687b      	ldr	r3, [r7, #4]
 802df1a:	691a      	ldr	r2, [r3, #16]
 802df1c:	687b      	ldr	r3, [r7, #4]
 802df1e:	681b      	ldr	r3, [r3, #0]
 802df20:	68d2      	ldr	r2, [r2, #12]
 802df22:	621a      	str	r2, [r3, #32]
#endif /* End AES or CRYP */
    }
  } /* if (DoKeyIVConfig == 1U) */

  /* Set the phase */
  hcryp->Phase = CRYP_PHASE_PROCESS;
 802df24:	687b      	ldr	r3, [r7, #4]
 802df26:	2202      	movs	r2, #2
 802df28:	641a      	str	r2, [r3, #64]	; 0x40

  /* Enable CRYP */
  __HAL_CRYP_ENABLE(hcryp);
 802df2a:	687b      	ldr	r3, [r7, #4]
 802df2c:	681b      	ldr	r3, [r3, #0]
 802df2e:	681a      	ldr	r2, [r3, #0]
 802df30:	687b      	ldr	r3, [r7, #4]
 802df32:	681b      	ldr	r3, [r3, #0]
 802df34:	f042 0201 	orr.w	r2, r2, #1
 802df38:	601a      	str	r2, [r3, #0]

  /*Temporary CrypOutCount Value*/
  outcount = hcryp->CrypOutCount;
 802df3a:	687b      	ldr	r3, [r7, #4]
 802df3c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 802df3e:	81fb      	strh	r3, [r7, #14]

  while ((hcryp->CrypInCount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 802df40:	e006      	b.n	802df50 <CRYP_AES_Encrypt+0xa0>
  {
    /* Write plain Ddta and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 802df42:	6839      	ldr	r1, [r7, #0]
 802df44:	6878      	ldr	r0, [r7, #4]
 802df46:	f000 f8f8 	bl	802e13a <CRYP_AES_ProcessData>
    /*Temporary CrypOutCount Value*/
    outcount = hcryp->CrypOutCount;
 802df4a:	687b      	ldr	r3, [r7, #4]
 802df4c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 802df4e:	81fb      	strh	r3, [r7, #14]
  while ((hcryp->CrypInCount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 802df50:	687b      	ldr	r3, [r7, #4]
 802df52:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 802df54:	b29a      	uxth	r2, r3
 802df56:	687b      	ldr	r3, [r7, #4]
 802df58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802df5a:	089b      	lsrs	r3, r3, #2
 802df5c:	b29b      	uxth	r3, r3
 802df5e:	429a      	cmp	r2, r3
 802df60:	d206      	bcs.n	802df70 <CRYP_AES_Encrypt+0xc0>
 802df62:	687b      	ldr	r3, [r7, #4]
 802df64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802df66:	089b      	lsrs	r3, r3, #2
 802df68:	b29b      	uxth	r3, r3
 802df6a:	89fa      	ldrh	r2, [r7, #14]
 802df6c:	429a      	cmp	r2, r3
 802df6e:	d3e8      	bcc.n	802df42 <CRYP_AES_Encrypt+0x92>
  }

  /* Disable CRYP */
  __HAL_CRYP_DISABLE(hcryp);
 802df70:	687b      	ldr	r3, [r7, #4]
 802df72:	681b      	ldr	r3, [r3, #0]
 802df74:	681a      	ldr	r2, [r3, #0]
 802df76:	687b      	ldr	r3, [r7, #4]
 802df78:	681b      	ldr	r3, [r3, #0]
 802df7a:	f022 0201 	bic.w	r2, r2, #1
 802df7e:	601a      	str	r2, [r3, #0]

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 802df80:	687b      	ldr	r3, [r7, #4]
 802df82:	2201      	movs	r2, #1
 802df84:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Return function status */
  return HAL_OK;
 802df88:	2300      	movs	r3, #0
}
 802df8a:	4618      	mov	r0, r3
 802df8c:	3710      	adds	r7, #16
 802df8e:	46bd      	mov	sp, r7
 802df90:	bd80      	pop	{r7, pc}

0802df92 <CRYP_AES_Decrypt>:
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure
  * @param  Timeout: Specify Timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AES_Decrypt(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 802df92:	b580      	push	{r7, lr}
 802df94:	b084      	sub	sp, #16
 802df96:	af00      	add	r7, sp, #0
 802df98:	6078      	str	r0, [r7, #4]
 802df9a:	6039      	str	r1, [r7, #0]
  uint16_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 802df9c:	2301      	movs	r3, #1
 802df9e:	60bb      	str	r3, [r7, #8]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 802dfa0:	687b      	ldr	r3, [r7, #4]
 802dfa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802dfa4:	2b01      	cmp	r3, #1
 802dfa6:	d109      	bne.n	802dfbc <CRYP_AES_Decrypt+0x2a>
  {
    if (hcryp->KeyIVConfig == 1U)
 802dfa8:	687b      	ldr	r3, [r7, #4]
 802dfaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802dfac:	2b01      	cmp	r3, #1
 802dfae:	d102      	bne.n	802dfb6 <CRYP_AES_Decrypt+0x24>
    {
      /* If the Key and IV configuration has to be done only once
      and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 802dfb0:	2300      	movs	r3, #0
 802dfb2:	60bb      	str	r3, [r7, #8]
 802dfb4:	e002      	b.n	802dfbc <CRYP_AES_Decrypt+0x2a>
    else
    {
      /* If the Key and IV configuration has to be done only once
      and if it has not been done already, do it and set KeyIVConfig
      to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 802dfb6:	687b      	ldr	r3, [r7, #4]
 802dfb8:	2201      	movs	r2, #1
 802dfba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  if (DoKeyIVConfig == 1U)
 802dfbc:	68bb      	ldr	r3, [r7, #8]
 802dfbe:	2b01      	cmp	r3, #1
 802dfc0:	f040 8084 	bne.w	802e0cc <CRYP_AES_Decrypt+0x13a>
  {
    /*  Key preparation for ECB/CBC */
    if (hcryp->Init.Algorithm != CRYP_AES_CTR)
 802dfc4:	687b      	ldr	r3, [r7, #4]
 802dfc6:	695b      	ldr	r3, [r3, #20]
 802dfc8:	2b40      	cmp	r3, #64	; 0x40
 802dfca:	d05d      	beq.n	802e088 <CRYP_AES_Decrypt+0xf6>
    {
#if defined (AES)
      if (hcryp->AutoKeyDerivation == DISABLE)/*Mode 2 Key preparation*/
 802dfcc:	687b      	ldr	r3, [r7, #4]
 802dfce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 802dfd2:	2b00      	cmp	r3, #0
 802dfd4:	d149      	bne.n	802e06a <CRYP_AES_Decrypt+0xd8>
      {
        /* Set key preparation for decryption operating mode*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION);
 802dfd6:	687b      	ldr	r3, [r7, #4]
 802dfd8:	681b      	ldr	r3, [r3, #0]
 802dfda:	681b      	ldr	r3, [r3, #0]
 802dfdc:	f023 0218 	bic.w	r2, r3, #24
 802dfe0:	687b      	ldr	r3, [r7, #4]
 802dfe2:	681b      	ldr	r3, [r3, #0]
 802dfe4:	f042 0208 	orr.w	r2, r2, #8
 802dfe8:	601a      	str	r2, [r3, #0]

        /*  Set the Key*/
        CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 802dfea:	687b      	ldr	r3, [r7, #4]
 802dfec:	689b      	ldr	r3, [r3, #8]
 802dfee:	4619      	mov	r1, r3
 802dff0:	6878      	ldr	r0, [r7, #4]
 802dff2:	f000 f957 	bl	802e2a4 <CRYP_SetKey>

        /* Enable CRYP */
        __HAL_CRYP_ENABLE(hcryp);
 802dff6:	687b      	ldr	r3, [r7, #4]
 802dff8:	681b      	ldr	r3, [r3, #0]
 802dffa:	681a      	ldr	r2, [r3, #0]
 802dffc:	687b      	ldr	r3, [r7, #4]
 802dffe:	681b      	ldr	r3, [r3, #0]
 802e000:	f042 0201 	orr.w	r2, r2, #1
 802e004:	601a      	str	r2, [r3, #0]

        /* Wait for CCF flag to be raised */
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 802e006:	6839      	ldr	r1, [r7, #0]
 802e008:	6878      	ldr	r0, [r7, #4]
 802e00a:	f001 f9af 	bl	802f36c <CRYP_WaitOnCCFlag>
 802e00e:	4603      	mov	r3, r0
 802e010:	2b00      	cmp	r3, #0
 802e012:	d017      	beq.n	802e044 <CRYP_AES_Decrypt+0xb2>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 802e014:	687b      	ldr	r3, [r7, #4]
 802e016:	681b      	ldr	r3, [r3, #0]
 802e018:	681a      	ldr	r2, [r3, #0]
 802e01a:	687b      	ldr	r3, [r7, #4]
 802e01c:	681b      	ldr	r3, [r3, #0]
 802e01e:	f022 0201 	bic.w	r2, r2, #1
 802e022:	601a      	str	r2, [r3, #0]

          /* Change state & error code*/
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 802e024:	687b      	ldr	r3, [r7, #4]
 802e026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802e028:	f043 0210 	orr.w	r2, r3, #16
 802e02c:	687b      	ldr	r3, [r7, #4]
 802e02e:	651a      	str	r2, [r3, #80]	; 0x50
          hcryp->State = HAL_CRYP_STATE_READY;
 802e030:	687b      	ldr	r3, [r7, #4]
 802e032:	2201      	movs	r2, #1
 802e034:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 802e038:	687b      	ldr	r3, [r7, #4]
 802e03a:	2200      	movs	r2, #0
 802e03c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
          return HAL_ERROR;
 802e040:	2301      	movs	r3, #1
 802e042:	e076      	b.n	802e132 <CRYP_AES_Decrypt+0x1a0>
        }
        /* Clear CCF Flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 802e044:	687b      	ldr	r3, [r7, #4]
 802e046:	681b      	ldr	r3, [r3, #0]
 802e048:	681a      	ldr	r2, [r3, #0]
 802e04a:	687b      	ldr	r3, [r7, #4]
 802e04c:	681b      	ldr	r3, [r3, #0]
 802e04e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802e052:	601a      	str	r2, [r3, #0]

        /* Return to decryption operating mode(Mode 3)*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 802e054:	687b      	ldr	r3, [r7, #4]
 802e056:	681b      	ldr	r3, [r3, #0]
 802e058:	681b      	ldr	r3, [r3, #0]
 802e05a:	f023 0218 	bic.w	r2, r3, #24
 802e05e:	687b      	ldr	r3, [r7, #4]
 802e060:	681b      	ldr	r3, [r3, #0]
 802e062:	f042 0210 	orr.w	r2, r2, #16
 802e066:	601a      	str	r2, [r3, #0]
 802e068:	e014      	b.n	802e094 <CRYP_AES_Decrypt+0x102>
      }
      else /*Mode 4 : decryption & Key preparation*/
      {
        /*  Set the Key*/
        CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 802e06a:	687b      	ldr	r3, [r7, #4]
 802e06c:	689b      	ldr	r3, [r3, #8]
 802e06e:	4619      	mov	r1, r3
 802e070:	6878      	ldr	r0, [r7, #4]
 802e072:	f000 f917 	bl	802e2a4 <CRYP_SetKey>

        /* Set decryption & Key preparation operating mode*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION_DECRYPT);
 802e076:	687b      	ldr	r3, [r7, #4]
 802e078:	681b      	ldr	r3, [r3, #0]
 802e07a:	681a      	ldr	r2, [r3, #0]
 802e07c:	687b      	ldr	r3, [r7, #4]
 802e07e:	681b      	ldr	r3, [r3, #0]
 802e080:	f042 0218 	orr.w	r2, r2, #24
 802e084:	601a      	str	r2, [r3, #0]
 802e086:	e005      	b.n	802e094 <CRYP_AES_Decrypt+0x102>
#endif /* End AES or CRYP  */
    }
    else  /*Algorithm CTR */
    {
      /*  Set the Key*/
      CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 802e088:	687b      	ldr	r3, [r7, #4]
 802e08a:	689b      	ldr	r3, [r3, #8]
 802e08c:	4619      	mov	r1, r3
 802e08e:	6878      	ldr	r0, [r7, #4]
 802e090:	f000 f908 	bl	802e2a4 <CRYP_SetKey>
    }

    /* Set IV */
    if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 802e094:	687b      	ldr	r3, [r7, #4]
 802e096:	695b      	ldr	r3, [r3, #20]
 802e098:	2b00      	cmp	r3, #0
 802e09a:	d017      	beq.n	802e0cc <CRYP_AES_Decrypt+0x13a>
    {
      /* Set the Initialization Vector*/
#if defined (AES)
      hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 802e09c:	687b      	ldr	r3, [r7, #4]
 802e09e:	691a      	ldr	r2, [r3, #16]
 802e0a0:	687b      	ldr	r3, [r7, #4]
 802e0a2:	681b      	ldr	r3, [r3, #0]
 802e0a4:	6812      	ldr	r2, [r2, #0]
 802e0a6:	62da      	str	r2, [r3, #44]	; 0x2c
      hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1);
 802e0a8:	687b      	ldr	r3, [r7, #4]
 802e0aa:	691a      	ldr	r2, [r3, #16]
 802e0ac:	687b      	ldr	r3, [r7, #4]
 802e0ae:	681b      	ldr	r3, [r3, #0]
 802e0b0:	6852      	ldr	r2, [r2, #4]
 802e0b2:	629a      	str	r2, [r3, #40]	; 0x28
      hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2);
 802e0b4:	687b      	ldr	r3, [r7, #4]
 802e0b6:	691a      	ldr	r2, [r3, #16]
 802e0b8:	687b      	ldr	r3, [r7, #4]
 802e0ba:	681b      	ldr	r3, [r3, #0]
 802e0bc:	6892      	ldr	r2, [r2, #8]
 802e0be:	625a      	str	r2, [r3, #36]	; 0x24
      hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3);
 802e0c0:	687b      	ldr	r3, [r7, #4]
 802e0c2:	691a      	ldr	r2, [r3, #16]
 802e0c4:	687b      	ldr	r3, [r7, #4]
 802e0c6:	681b      	ldr	r3, [r3, #0]
 802e0c8:	68d2      	ldr	r2, [r2, #12]
 802e0ca:	621a      	str	r2, [r3, #32]
      hcryp->Instance->IV1RR = *(uint32_t *)(hcryp->Init.pInitVect + 3);
#endif /* End AES or CRYP */
    }
  } /* if (DoKeyIVConfig == 1U) */
  /* Set the phase */
  hcryp->Phase = CRYP_PHASE_PROCESS;
 802e0cc:	687b      	ldr	r3, [r7, #4]
 802e0ce:	2202      	movs	r2, #2
 802e0d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Enable CRYP */
  __HAL_CRYP_ENABLE(hcryp);
 802e0d2:	687b      	ldr	r3, [r7, #4]
 802e0d4:	681b      	ldr	r3, [r3, #0]
 802e0d6:	681a      	ldr	r2, [r3, #0]
 802e0d8:	687b      	ldr	r3, [r7, #4]
 802e0da:	681b      	ldr	r3, [r3, #0]
 802e0dc:	f042 0201 	orr.w	r2, r2, #1
 802e0e0:	601a      	str	r2, [r3, #0]

  /*Temporary CrypOutCount Value*/
  outcount = hcryp->CrypOutCount;
 802e0e2:	687b      	ldr	r3, [r7, #4]
 802e0e4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 802e0e6:	81fb      	strh	r3, [r7, #14]

  while ((hcryp->CrypInCount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 802e0e8:	e006      	b.n	802e0f8 <CRYP_AES_Decrypt+0x166>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 802e0ea:	6839      	ldr	r1, [r7, #0]
 802e0ec:	6878      	ldr	r0, [r7, #4]
 802e0ee:	f000 f824 	bl	802e13a <CRYP_AES_ProcessData>
    /*Temporary CrypOutCount Value*/
    outcount = hcryp->CrypOutCount;
 802e0f2:	687b      	ldr	r3, [r7, #4]
 802e0f4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 802e0f6:	81fb      	strh	r3, [r7, #14]
  while ((hcryp->CrypInCount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 802e0f8:	687b      	ldr	r3, [r7, #4]
 802e0fa:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 802e0fc:	b29a      	uxth	r2, r3
 802e0fe:	687b      	ldr	r3, [r7, #4]
 802e100:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802e102:	089b      	lsrs	r3, r3, #2
 802e104:	b29b      	uxth	r3, r3
 802e106:	429a      	cmp	r2, r3
 802e108:	d206      	bcs.n	802e118 <CRYP_AES_Decrypt+0x186>
 802e10a:	687b      	ldr	r3, [r7, #4]
 802e10c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802e10e:	089b      	lsrs	r3, r3, #2
 802e110:	b29b      	uxth	r3, r3
 802e112:	89fa      	ldrh	r2, [r7, #14]
 802e114:	429a      	cmp	r2, r3
 802e116:	d3e8      	bcc.n	802e0ea <CRYP_AES_Decrypt+0x158>
  }

  /* Disable CRYP */
  __HAL_CRYP_DISABLE(hcryp);
 802e118:	687b      	ldr	r3, [r7, #4]
 802e11a:	681b      	ldr	r3, [r3, #0]
 802e11c:	681a      	ldr	r2, [r3, #0]
 802e11e:	687b      	ldr	r3, [r7, #4]
 802e120:	681b      	ldr	r3, [r3, #0]
 802e122:	f022 0201 	bic.w	r2, r2, #1
 802e126:	601a      	str	r2, [r3, #0]

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 802e128:	687b      	ldr	r3, [r7, #4]
 802e12a:	2201      	movs	r2, #1
 802e12c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Return function status */
  return HAL_OK;
 802e130:	2300      	movs	r3, #0
}
 802e132:	4618      	mov	r0, r3
 802e134:	3710      	adds	r7, #16
 802e136:	46bd      	mov	sp, r7
 802e138:	bd80      	pop	{r7, pc}

0802e13a <CRYP_AES_ProcessData>:
  *         the configuration information for CRYP module
  * @param  Timeout: Specify Timeout value
  * @retval None
  */
static void CRYP_AES_ProcessData(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 802e13a:	b580      	push	{r7, lr}
 802e13c:	b088      	sub	sp, #32
 802e13e:	af00      	add	r7, sp, #0
 802e140:	6078      	str	r0, [r7, #4]
 802e142:	6039      	str	r1, [r7, #0]
  }

#else /* AES */

  /* Write the input block in the IN FIFO */
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 802e144:	687b      	ldr	r3, [r7, #4]
 802e146:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802e148:	687b      	ldr	r3, [r7, #4]
 802e14a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 802e14c:	b29b      	uxth	r3, r3
 802e14e:	009b      	lsls	r3, r3, #2
 802e150:	441a      	add	r2, r3
 802e152:	687b      	ldr	r3, [r7, #4]
 802e154:	681b      	ldr	r3, [r3, #0]
 802e156:	6812      	ldr	r2, [r2, #0]
 802e158:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 802e15a:	687b      	ldr	r3, [r7, #4]
 802e15c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 802e15e:	b29b      	uxth	r3, r3
 802e160:	3301      	adds	r3, #1
 802e162:	b29a      	uxth	r2, r3
 802e164:	687b      	ldr	r3, [r7, #4]
 802e166:	875a      	strh	r2, [r3, #58]	; 0x3a
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 802e168:	687b      	ldr	r3, [r7, #4]
 802e16a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802e16c:	687b      	ldr	r3, [r7, #4]
 802e16e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 802e170:	b29b      	uxth	r3, r3
 802e172:	009b      	lsls	r3, r3, #2
 802e174:	441a      	add	r2, r3
 802e176:	687b      	ldr	r3, [r7, #4]
 802e178:	681b      	ldr	r3, [r3, #0]
 802e17a:	6812      	ldr	r2, [r2, #0]
 802e17c:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 802e17e:	687b      	ldr	r3, [r7, #4]
 802e180:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 802e182:	b29b      	uxth	r3, r3
 802e184:	3301      	adds	r3, #1
 802e186:	b29a      	uxth	r2, r3
 802e188:	687b      	ldr	r3, [r7, #4]
 802e18a:	875a      	strh	r2, [r3, #58]	; 0x3a
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 802e18c:	687b      	ldr	r3, [r7, #4]
 802e18e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802e190:	687b      	ldr	r3, [r7, #4]
 802e192:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 802e194:	b29b      	uxth	r3, r3
 802e196:	009b      	lsls	r3, r3, #2
 802e198:	441a      	add	r2, r3
 802e19a:	687b      	ldr	r3, [r7, #4]
 802e19c:	681b      	ldr	r3, [r3, #0]
 802e19e:	6812      	ldr	r2, [r2, #0]
 802e1a0:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 802e1a2:	687b      	ldr	r3, [r7, #4]
 802e1a4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 802e1a6:	b29b      	uxth	r3, r3
 802e1a8:	3301      	adds	r3, #1
 802e1aa:	b29a      	uxth	r2, r3
 802e1ac:	687b      	ldr	r3, [r7, #4]
 802e1ae:	875a      	strh	r2, [r3, #58]	; 0x3a
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 802e1b0:	687b      	ldr	r3, [r7, #4]
 802e1b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802e1b4:	687b      	ldr	r3, [r7, #4]
 802e1b6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 802e1b8:	b29b      	uxth	r3, r3
 802e1ba:	009b      	lsls	r3, r3, #2
 802e1bc:	441a      	add	r2, r3
 802e1be:	687b      	ldr	r3, [r7, #4]
 802e1c0:	681b      	ldr	r3, [r3, #0]
 802e1c2:	6812      	ldr	r2, [r2, #0]
 802e1c4:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 802e1c6:	687b      	ldr	r3, [r7, #4]
 802e1c8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 802e1ca:	b29b      	uxth	r3, r3
 802e1cc:	3301      	adds	r3, #1
 802e1ce:	b29a      	uxth	r2, r3
 802e1d0:	687b      	ldr	r3, [r7, #4]
 802e1d2:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Wait for CCF flag to be raised */
  if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 802e1d4:	6839      	ldr	r1, [r7, #0]
 802e1d6:	6878      	ldr	r0, [r7, #4]
 802e1d8:	f001 f8c8 	bl	802f36c <CRYP_WaitOnCCFlag>
 802e1dc:	4603      	mov	r3, r0
 802e1de:	2b00      	cmp	r3, #0
 802e1e0:	d018      	beq.n	802e214 <CRYP_AES_ProcessData+0xda>
  {
    /* Disable the CRYP peripheral clock */
    __HAL_CRYP_DISABLE(hcryp);
 802e1e2:	687b      	ldr	r3, [r7, #4]
 802e1e4:	681b      	ldr	r3, [r3, #0]
 802e1e6:	681a      	ldr	r2, [r3, #0]
 802e1e8:	687b      	ldr	r3, [r7, #4]
 802e1ea:	681b      	ldr	r3, [r3, #0]
 802e1ec:	f022 0201 	bic.w	r2, r2, #1
 802e1f0:	601a      	str	r2, [r3, #0]

    /* Change state */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 802e1f2:	687b      	ldr	r3, [r7, #4]
 802e1f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802e1f6:	f043 0210 	orr.w	r2, r3, #16
 802e1fa:	687b      	ldr	r3, [r7, #4]
 802e1fc:	651a      	str	r2, [r3, #80]	; 0x50
    hcryp->State = HAL_CRYP_STATE_READY;
 802e1fe:	687b      	ldr	r3, [r7, #4]
 802e200:	2201      	movs	r2, #1
 802e202:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /* Process unlocked */
    __HAL_UNLOCK(hcryp);
 802e206:	687b      	ldr	r3, [r7, #4]
 802e208:	2200      	movs	r2, #0
 802e20a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hcryp->ErrorCallback(hcryp);
#else
    /*Call legacy weak error callback*/
    HAL_CRYP_ErrorCallback(hcryp);
 802e20e:	6878      	ldr	r0, [r7, #4]
 802e210:	f7ff fe44 	bl	802de9c <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
  }

  /* Clear CCF Flag */
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 802e214:	687b      	ldr	r3, [r7, #4]
 802e216:	681b      	ldr	r3, [r3, #0]
 802e218:	681a      	ldr	r2, [r3, #0]
 802e21a:	687b      	ldr	r3, [r7, #4]
 802e21c:	681b      	ldr	r3, [r3, #0]
 802e21e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802e222:	601a      	str	r2, [r3, #0]

  /* Read the output block from the output FIFO and put them in temporary buffer then get CrypOutBuff from temporary buffer*/
  for (i = 0U; i < 4U; i++)
 802e224:	2300      	movs	r3, #0
 802e226:	61fb      	str	r3, [r7, #28]
 802e228:	e00c      	b.n	802e244 <CRYP_AES_ProcessData+0x10a>
  {
    temp[i] = hcryp->Instance->DOUTR;
 802e22a:	687b      	ldr	r3, [r7, #4]
 802e22c:	681b      	ldr	r3, [r3, #0]
 802e22e:	68da      	ldr	r2, [r3, #12]
 802e230:	69fb      	ldr	r3, [r7, #28]
 802e232:	009b      	lsls	r3, r3, #2
 802e234:	f107 0120 	add.w	r1, r7, #32
 802e238:	440b      	add	r3, r1
 802e23a:	f843 2c14 	str.w	r2, [r3, #-20]
  for (i = 0U; i < 4U; i++)
 802e23e:	69fb      	ldr	r3, [r7, #28]
 802e240:	3301      	adds	r3, #1
 802e242:	61fb      	str	r3, [r7, #28]
 802e244:	69fb      	ldr	r3, [r7, #28]
 802e246:	2b03      	cmp	r3, #3
 802e248:	d9ef      	bls.n	802e22a <CRYP_AES_ProcessData+0xf0>
  }
  i = 0U;
 802e24a:	2300      	movs	r3, #0
 802e24c:	61fb      	str	r3, [r7, #28]
  while ((hcryp->CrypOutCount < ((hcryp->Size + 3U) / 4U)) && (i < 4U))
 802e24e:	e018      	b.n	802e282 <CRYP_AES_ProcessData+0x148>
  {
    *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[i];
 802e250:	687b      	ldr	r3, [r7, #4]
 802e252:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802e254:	687b      	ldr	r3, [r7, #4]
 802e256:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 802e258:	b29b      	uxth	r3, r3
 802e25a:	009b      	lsls	r3, r3, #2
 802e25c:	441a      	add	r2, r3
 802e25e:	69fb      	ldr	r3, [r7, #28]
 802e260:	009b      	lsls	r3, r3, #2
 802e262:	f107 0120 	add.w	r1, r7, #32
 802e266:	440b      	add	r3, r1
 802e268:	f853 3c14 	ldr.w	r3, [r3, #-20]
 802e26c:	6013      	str	r3, [r2, #0]
    hcryp->CrypOutCount++;
 802e26e:	687b      	ldr	r3, [r7, #4]
 802e270:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 802e272:	b29b      	uxth	r3, r3
 802e274:	3301      	adds	r3, #1
 802e276:	b29a      	uxth	r2, r3
 802e278:	687b      	ldr	r3, [r7, #4]
 802e27a:	879a      	strh	r2, [r3, #60]	; 0x3c
    i++;
 802e27c:	69fb      	ldr	r3, [r7, #28]
 802e27e:	3301      	adds	r3, #1
 802e280:	61fb      	str	r3, [r7, #28]
  while ((hcryp->CrypOutCount < ((hcryp->Size + 3U) / 4U)) && (i < 4U))
 802e282:	687b      	ldr	r3, [r7, #4]
 802e284:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 802e286:	b29b      	uxth	r3, r3
 802e288:	461a      	mov	r2, r3
 802e28a:	687b      	ldr	r3, [r7, #4]
 802e28c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802e28e:	3303      	adds	r3, #3
 802e290:	089b      	lsrs	r3, r3, #2
 802e292:	429a      	cmp	r2, r3
 802e294:	d202      	bcs.n	802e29c <CRYP_AES_ProcessData+0x162>
 802e296:	69fb      	ldr	r3, [r7, #28]
 802e298:	2b03      	cmp	r3, #3
 802e29a:	d9d9      	bls.n	802e250 <CRYP_AES_ProcessData+0x116>
  }
#endif /* End AES or CRYP */
}
 802e29c:	bf00      	nop
 802e29e:	3720      	adds	r7, #32
 802e2a0:	46bd      	mov	sp, r7
 802e2a2:	bd80      	pop	{r7, pc}

0802e2a4 <CRYP_SetKey>:
  *         the configuration information for CRYP module
  * @param  KeySize: Size of Key
  * @retval None
  */
static void CRYP_SetKey(CRYP_HandleTypeDef *hcryp, uint32_t KeySize)
{
 802e2a4:	b480      	push	{r7}
 802e2a6:	b083      	sub	sp, #12
 802e2a8:	af00      	add	r7, sp, #0
 802e2aa:	6078      	str	r0, [r7, #4]
 802e2ac:	6039      	str	r1, [r7, #0]
      break;
    default:
      break;
  }
#else /*AES*/
  switch (KeySize)
 802e2ae:	683b      	ldr	r3, [r7, #0]
 802e2b0:	2b00      	cmp	r3, #0
 802e2b2:	d034      	beq.n	802e31e <CRYP_SetKey+0x7a>
 802e2b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 802e2b8:	d000      	beq.n	802e2bc <CRYP_SetKey+0x18>
      hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 2);
      hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 3);

      break;
    default:
      break;
 802e2ba:	e049      	b.n	802e350 <CRYP_SetKey+0xac>
      hcryp->Instance->KEYR7 = *(uint32_t *)(hcryp->Init.pKey);
 802e2bc:	687b      	ldr	r3, [r7, #4]
 802e2be:	68da      	ldr	r2, [r3, #12]
 802e2c0:	687b      	ldr	r3, [r7, #4]
 802e2c2:	681b      	ldr	r3, [r3, #0]
 802e2c4:	6812      	ldr	r2, [r2, #0]
 802e2c6:	63da      	str	r2, [r3, #60]	; 0x3c
      hcryp->Instance->KEYR6 = *(uint32_t *)(hcryp->Init.pKey + 1);
 802e2c8:	687b      	ldr	r3, [r7, #4]
 802e2ca:	68da      	ldr	r2, [r3, #12]
 802e2cc:	687b      	ldr	r3, [r7, #4]
 802e2ce:	681b      	ldr	r3, [r3, #0]
 802e2d0:	6852      	ldr	r2, [r2, #4]
 802e2d2:	639a      	str	r2, [r3, #56]	; 0x38
      hcryp->Instance->KEYR5 = *(uint32_t *)(hcryp->Init.pKey + 2);
 802e2d4:	687b      	ldr	r3, [r7, #4]
 802e2d6:	68da      	ldr	r2, [r3, #12]
 802e2d8:	687b      	ldr	r3, [r7, #4]
 802e2da:	681b      	ldr	r3, [r3, #0]
 802e2dc:	6892      	ldr	r2, [r2, #8]
 802e2de:	635a      	str	r2, [r3, #52]	; 0x34
      hcryp->Instance->KEYR4 = *(uint32_t *)(hcryp->Init.pKey + 3);
 802e2e0:	687b      	ldr	r3, [r7, #4]
 802e2e2:	68da      	ldr	r2, [r3, #12]
 802e2e4:	687b      	ldr	r3, [r7, #4]
 802e2e6:	681b      	ldr	r3, [r3, #0]
 802e2e8:	68d2      	ldr	r2, [r2, #12]
 802e2ea:	631a      	str	r2, [r3, #48]	; 0x30
      hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey + 4);
 802e2ec:	687b      	ldr	r3, [r7, #4]
 802e2ee:	68da      	ldr	r2, [r3, #12]
 802e2f0:	687b      	ldr	r3, [r7, #4]
 802e2f2:	681b      	ldr	r3, [r3, #0]
 802e2f4:	6912      	ldr	r2, [r2, #16]
 802e2f6:	61da      	str	r2, [r3, #28]
      hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 5);
 802e2f8:	687b      	ldr	r3, [r7, #4]
 802e2fa:	68da      	ldr	r2, [r3, #12]
 802e2fc:	687b      	ldr	r3, [r7, #4]
 802e2fe:	681b      	ldr	r3, [r3, #0]
 802e300:	6952      	ldr	r2, [r2, #20]
 802e302:	619a      	str	r2, [r3, #24]
      hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 6);
 802e304:	687b      	ldr	r3, [r7, #4]
 802e306:	68da      	ldr	r2, [r3, #12]
 802e308:	687b      	ldr	r3, [r7, #4]
 802e30a:	681b      	ldr	r3, [r3, #0]
 802e30c:	6992      	ldr	r2, [r2, #24]
 802e30e:	615a      	str	r2, [r3, #20]
      hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 7);
 802e310:	687b      	ldr	r3, [r7, #4]
 802e312:	68da      	ldr	r2, [r3, #12]
 802e314:	687b      	ldr	r3, [r7, #4]
 802e316:	681b      	ldr	r3, [r3, #0]
 802e318:	69d2      	ldr	r2, [r2, #28]
 802e31a:	611a      	str	r2, [r3, #16]
      break;
 802e31c:	e018      	b.n	802e350 <CRYP_SetKey+0xac>
      hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey);
 802e31e:	687b      	ldr	r3, [r7, #4]
 802e320:	68da      	ldr	r2, [r3, #12]
 802e322:	687b      	ldr	r3, [r7, #4]
 802e324:	681b      	ldr	r3, [r3, #0]
 802e326:	6812      	ldr	r2, [r2, #0]
 802e328:	61da      	str	r2, [r3, #28]
      hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 1);
 802e32a:	687b      	ldr	r3, [r7, #4]
 802e32c:	68da      	ldr	r2, [r3, #12]
 802e32e:	687b      	ldr	r3, [r7, #4]
 802e330:	681b      	ldr	r3, [r3, #0]
 802e332:	6852      	ldr	r2, [r2, #4]
 802e334:	619a      	str	r2, [r3, #24]
      hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 2);
 802e336:	687b      	ldr	r3, [r7, #4]
 802e338:	68da      	ldr	r2, [r3, #12]
 802e33a:	687b      	ldr	r3, [r7, #4]
 802e33c:	681b      	ldr	r3, [r3, #0]
 802e33e:	6892      	ldr	r2, [r2, #8]
 802e340:	615a      	str	r2, [r3, #20]
      hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 3);
 802e342:	687b      	ldr	r3, [r7, #4]
 802e344:	68da      	ldr	r2, [r3, #12]
 802e346:	687b      	ldr	r3, [r7, #4]
 802e348:	681b      	ldr	r3, [r3, #0]
 802e34a:	68d2      	ldr	r2, [r2, #12]
 802e34c:	611a      	str	r2, [r3, #16]
      break;
 802e34e:	bf00      	nop
  }
#endif /* End AES or CRYP  */
}
 802e350:	bf00      	nop
 802e352:	370c      	adds	r7, #12
 802e354:	46bd      	mov	sp, r7
 802e356:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e35a:	4770      	bx	lr

0802e35c <CRYP_AESGCM_Process>:
  *         the configuration information for CRYP module
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AESGCM_Process(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 802e35c:	b580      	push	{r7, lr}
 802e35e:	b086      	sub	sp, #24
 802e360:	af00      	add	r7, sp, #0
 802e362:	6078      	str	r0, [r7, #4]
 802e364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t wordsize = (uint32_t)(hcryp->Size) / 4U ;
 802e366:	687b      	ldr	r3, [r7, #4]
 802e368:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802e36a:	089b      	lsrs	r3, r3, #2
 802e36c:	b29b      	uxth	r3, r3
 802e36e:	617b      	str	r3, [r7, #20]
  uint16_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 802e370:	2301      	movs	r3, #1
 802e372:	60fb      	str	r3, [r7, #12]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 802e374:	687b      	ldr	r3, [r7, #4]
 802e376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802e378:	2b01      	cmp	r3, #1
 802e37a:	d116      	bne.n	802e3aa <CRYP_AESGCM_Process+0x4e>
  {
    if (hcryp->KeyIVConfig == 1U)
 802e37c:	687b      	ldr	r3, [r7, #4]
 802e37e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802e380:	2b01      	cmp	r3, #1
 802e382:	d109      	bne.n	802e398 <CRYP_AESGCM_Process+0x3c>
    {
      /* If the Key and IV configuration has to be done only once
      and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 802e384:	2300      	movs	r3, #0
 802e386:	60fb      	str	r3, [r7, #12]
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 802e388:	687b      	ldr	r3, [r7, #4]
 802e38a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802e38c:	687a      	ldr	r2, [r7, #4]
 802e38e:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
 802e390:	441a      	add	r2, r3
 802e392:	687b      	ldr	r3, [r7, #4]
 802e394:	659a      	str	r2, [r3, #88]	; 0x58
 802e396:	e00d      	b.n	802e3b4 <CRYP_AESGCM_Process+0x58>
    else
    {
      /* If the Key and IV configuration has to be done only once
      and if it has not been done already, do it and set KeyIVConfig
      to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 802e398:	687b      	ldr	r3, [r7, #4]
 802e39a:	2201      	movs	r2, #1
 802e39c:	655a      	str	r2, [r3, #84]	; 0x54
      hcryp->SizesSum = hcryp->Size; /* Merely store payload length */
 802e39e:	687b      	ldr	r3, [r7, #4]
 802e3a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802e3a2:	461a      	mov	r2, r3
 802e3a4:	687b      	ldr	r3, [r7, #4]
 802e3a6:	659a      	str	r2, [r3, #88]	; 0x58
 802e3a8:	e004      	b.n	802e3b4 <CRYP_AESGCM_Process+0x58>
    }
  }
  else
  {
    hcryp->SizesSum = hcryp->Size;
 802e3aa:	687b      	ldr	r3, [r7, #4]
 802e3ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802e3ae:	461a      	mov	r2, r3
 802e3b0:	687b      	ldr	r3, [r7, #4]
 802e3b2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  if (DoKeyIVConfig == 1U)
 802e3b4:	68fb      	ldr	r3, [r7, #12]
 802e3b6:	2b01      	cmp	r3, #1
 802e3b8:	d179      	bne.n	802e4ae <CRYP_AESGCM_Process+0x152>
  {
    /*  Reset CrypHeaderCount */
    hcryp->CrypHeaderCount = 0U;
 802e3ba:	687b      	ldr	r3, [r7, #4]
 802e3bc:	2200      	movs	r2, #0
 802e3be:	871a      	strh	r2, [r3, #56]	; 0x38

    /****************************** Init phase **********************************/

    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 802e3c0:	687b      	ldr	r3, [r7, #4]
 802e3c2:	681b      	ldr	r3, [r3, #0]
 802e3c4:	681a      	ldr	r2, [r3, #0]
 802e3c6:	687b      	ldr	r3, [r7, #4]
 802e3c8:	681b      	ldr	r3, [r3, #0]
 802e3ca:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 802e3ce:	601a      	str	r2, [r3, #0]
 802e3d0:	687b      	ldr	r3, [r7, #4]
 802e3d2:	681a      	ldr	r2, [r3, #0]
 802e3d4:	687b      	ldr	r3, [r7, #4]
 802e3d6:	681b      	ldr	r3, [r3, #0]
 802e3d8:	6812      	ldr	r2, [r2, #0]
 802e3da:	601a      	str	r2, [r3, #0]

    /* Set the key */
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 802e3dc:	687b      	ldr	r3, [r7, #4]
 802e3de:	689b      	ldr	r3, [r3, #8]
 802e3e0:	4619      	mov	r1, r3
 802e3e2:	6878      	ldr	r0, [r7, #4]
 802e3e4:	f7ff ff5e 	bl	802e2a4 <CRYP_SetKey>
#else /* AES */
    /* Workaround 1 : only AES.
    Datatype configuration must be 32 bits during Init phase. Only, after Init, and before re
    enabling the IP, datatype different from 32 bits can be configured.*/
    /* Select DATATYPE 32  */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE, CRYP_DATATYPE_32B);
 802e3e8:	687b      	ldr	r3, [r7, #4]
 802e3ea:	681b      	ldr	r3, [r3, #0]
 802e3ec:	681a      	ldr	r2, [r3, #0]
 802e3ee:	687b      	ldr	r3, [r7, #4]
 802e3f0:	681b      	ldr	r3, [r3, #0]
 802e3f2:	f022 0206 	bic.w	r2, r2, #6
 802e3f6:	601a      	str	r2, [r3, #0]

    /* Set the initialization vector and the counter : Initial Counter Block (ICB)*/
    hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 802e3f8:	687b      	ldr	r3, [r7, #4]
 802e3fa:	691a      	ldr	r2, [r3, #16]
 802e3fc:	687b      	ldr	r3, [r7, #4]
 802e3fe:	681b      	ldr	r3, [r3, #0]
 802e400:	6812      	ldr	r2, [r2, #0]
 802e402:	62da      	str	r2, [r3, #44]	; 0x2c
    hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1);
 802e404:	687b      	ldr	r3, [r7, #4]
 802e406:	691a      	ldr	r2, [r3, #16]
 802e408:	687b      	ldr	r3, [r7, #4]
 802e40a:	681b      	ldr	r3, [r3, #0]
 802e40c:	6852      	ldr	r2, [r2, #4]
 802e40e:	629a      	str	r2, [r3, #40]	; 0x28
    hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2);
 802e410:	687b      	ldr	r3, [r7, #4]
 802e412:	691a      	ldr	r2, [r3, #16]
 802e414:	687b      	ldr	r3, [r7, #4]
 802e416:	681b      	ldr	r3, [r3, #0]
 802e418:	6892      	ldr	r2, [r2, #8]
 802e41a:	625a      	str	r2, [r3, #36]	; 0x24
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3);
 802e41c:	687b      	ldr	r3, [r7, #4]
 802e41e:	691a      	ldr	r2, [r3, #16]
 802e420:	687b      	ldr	r3, [r7, #4]
 802e422:	681b      	ldr	r3, [r3, #0]
 802e424:	68d2      	ldr	r2, [r2, #12]
 802e426:	621a      	str	r2, [r3, #32]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 802e428:	687b      	ldr	r3, [r7, #4]
 802e42a:	681b      	ldr	r3, [r3, #0]
 802e42c:	681a      	ldr	r2, [r3, #0]
 802e42e:	687b      	ldr	r3, [r7, #4]
 802e430:	681b      	ldr	r3, [r3, #0]
 802e432:	f042 0201 	orr.w	r2, r2, #1
 802e436:	601a      	str	r2, [r3, #0]

    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 802e438:	6839      	ldr	r1, [r7, #0]
 802e43a:	6878      	ldr	r0, [r7, #4]
 802e43c:	f000 ff96 	bl	802f36c <CRYP_WaitOnCCFlag>
 802e440:	4603      	mov	r3, r0
 802e442:	2b00      	cmp	r3, #0
 802e444:	d00f      	beq.n	802e466 <CRYP_AESGCM_Process+0x10a>
    {
      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 802e446:	687b      	ldr	r3, [r7, #4]
 802e448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802e44a:	f043 0210 	orr.w	r2, r3, #16
 802e44e:	687b      	ldr	r3, [r7, #4]
 802e450:	651a      	str	r2, [r3, #80]	; 0x50
      hcryp->State = HAL_CRYP_STATE_READY;
 802e452:	687b      	ldr	r3, [r7, #4]
 802e454:	2201      	movs	r2, #1
 802e456:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

      /* Process unlocked & return error */
      __HAL_UNLOCK(hcryp);
 802e45a:	687b      	ldr	r3, [r7, #4]
 802e45c:	2200      	movs	r2, #0
 802e45e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      return HAL_ERROR;
 802e462:	2301      	movs	r3, #1
 802e464:	e07a      	b.n	802e55c <CRYP_AESGCM_Process+0x200>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 802e466:	687b      	ldr	r3, [r7, #4]
 802e468:	681b      	ldr	r3, [r3, #0]
 802e46a:	681a      	ldr	r2, [r3, #0]
 802e46c:	687b      	ldr	r3, [r7, #4]
 802e46e:	681b      	ldr	r3, [r3, #0]
 802e470:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802e474:	601a      	str	r2, [r3, #0]

#endif /* End AES or CRYP  */

    /************************ Header phase *************************************/

    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 802e476:	6839      	ldr	r1, [r7, #0]
 802e478:	6878      	ldr	r0, [r7, #4]
 802e47a:	f000 fb2e 	bl	802eada <CRYP_GCMCCM_SetHeaderPhase>
 802e47e:	4603      	mov	r3, r0
 802e480:	2b00      	cmp	r3, #0
 802e482:	d001      	beq.n	802e488 <CRYP_AESGCM_Process+0x12c>
    {
      return HAL_ERROR;
 802e484:	2301      	movs	r3, #1
 802e486:	e069      	b.n	802e55c <CRYP_AESGCM_Process+0x200>
    }

    /*************************Payload phase ************************************/

    /* Set the phase */
    hcryp->Phase = CRYP_PHASE_PROCESS;
 802e488:	687b      	ldr	r3, [r7, #4]
 802e48a:	2202      	movs	r2, #2
 802e48c:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_CRYP_ENABLE(hcryp);

#else /* AES */

    /* Select payload phase once the header phase is performed */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_PAYLOAD);
 802e48e:	687b      	ldr	r3, [r7, #4]
 802e490:	681b      	ldr	r3, [r3, #0]
 802e492:	681a      	ldr	r2, [r3, #0]
 802e494:	687b      	ldr	r3, [r7, #4]
 802e496:	681b      	ldr	r3, [r3, #0]
 802e498:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 802e49c:	601a      	str	r2, [r3, #0]
 802e49e:	687b      	ldr	r3, [r7, #4]
 802e4a0:	681b      	ldr	r3, [r3, #0]
 802e4a2:	681a      	ldr	r2, [r3, #0]
 802e4a4:	687b      	ldr	r3, [r7, #4]
 802e4a6:	681b      	ldr	r3, [r3, #0]
 802e4a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 802e4ac:	601a      	str	r2, [r3, #0]

#endif /* End AES or CRYP  */
  } /* if (DoKeyIVConfig == 1U) */

  if ((hcryp->Size % 16U) != 0U)
 802e4ae:	687b      	ldr	r3, [r7, #4]
 802e4b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802e4b2:	f003 030f 	and.w	r3, r3, #15
 802e4b6:	b29b      	uxth	r3, r3
 802e4b8:	2b00      	cmp	r3, #0
 802e4ba:	d003      	beq.n	802e4c4 <CRYP_AESGCM_Process+0x168>
  {
    /* recalculate  wordsize */
    wordsize = ((wordsize / 4U) * 4U) ;
 802e4bc:	697b      	ldr	r3, [r7, #20]
 802e4be:	f023 0303 	bic.w	r3, r3, #3
 802e4c2:	617b      	str	r3, [r7, #20]
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 802e4c4:	f7fd fec0 	bl	802c248 <HAL_GetTick>
 802e4c8:	60b8      	str	r0, [r7, #8]
  /*Temporary CrypOutCount Value*/
  outcount = hcryp->CrypOutCount;
 802e4ca:	687b      	ldr	r3, [r7, #4]
 802e4cc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 802e4ce:	827b      	strh	r3, [r7, #18]

  /* Write input data and get output Data */
  while ((hcryp->CrypInCount < wordsize) && (outcount < wordsize))
 802e4d0:	e02d      	b.n	802e52e <CRYP_AESGCM_Process+0x1d2>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 802e4d2:	6839      	ldr	r1, [r7, #0]
 802e4d4:	6878      	ldr	r0, [r7, #4]
 802e4d6:	f7ff fe30 	bl	802e13a <CRYP_AES_ProcessData>

    /*Temporary CrypOutCount Value*/
    outcount = hcryp->CrypOutCount;
 802e4da:	687b      	ldr	r3, [r7, #4]
 802e4dc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 802e4de:	827b      	strh	r3, [r7, #18]

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802e4e0:	683b      	ldr	r3, [r7, #0]
 802e4e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 802e4e6:	d022      	beq.n	802e52e <CRYP_AESGCM_Process+0x1d2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 802e4e8:	f7fd feae 	bl	802c248 <HAL_GetTick>
 802e4ec:	4602      	mov	r2, r0
 802e4ee:	68bb      	ldr	r3, [r7, #8]
 802e4f0:	1ad3      	subs	r3, r2, r3
 802e4f2:	683a      	ldr	r2, [r7, #0]
 802e4f4:	429a      	cmp	r2, r3
 802e4f6:	d302      	bcc.n	802e4fe <CRYP_AESGCM_Process+0x1a2>
 802e4f8:	683b      	ldr	r3, [r7, #0]
 802e4fa:	2b00      	cmp	r3, #0
 802e4fc:	d117      	bne.n	802e52e <CRYP_AESGCM_Process+0x1d2>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 802e4fe:	687b      	ldr	r3, [r7, #4]
 802e500:	681b      	ldr	r3, [r3, #0]
 802e502:	681a      	ldr	r2, [r3, #0]
 802e504:	687b      	ldr	r3, [r7, #4]
 802e506:	681b      	ldr	r3, [r3, #0]
 802e508:	f022 0201 	bic.w	r2, r2, #1
 802e50c:	601a      	str	r2, [r3, #0]

        /* Change state & error code */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 802e50e:	687b      	ldr	r3, [r7, #4]
 802e510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802e512:	f043 0210 	orr.w	r2, r3, #16
 802e516:	687b      	ldr	r3, [r7, #4]
 802e518:	651a      	str	r2, [r3, #80]	; 0x50
        hcryp->State = HAL_CRYP_STATE_READY;
 802e51a:	687b      	ldr	r3, [r7, #4]
 802e51c:	2201      	movs	r2, #1
 802e51e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 802e522:	687b      	ldr	r3, [r7, #4]
 802e524:	2200      	movs	r2, #0
 802e526:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        return HAL_ERROR;
 802e52a:	2301      	movs	r3, #1
 802e52c:	e016      	b.n	802e55c <CRYP_AESGCM_Process+0x200>
  while ((hcryp->CrypInCount < wordsize) && (outcount < wordsize))
 802e52e:	687b      	ldr	r3, [r7, #4]
 802e530:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 802e532:	b29b      	uxth	r3, r3
 802e534:	461a      	mov	r2, r3
 802e536:	697b      	ldr	r3, [r7, #20]
 802e538:	4293      	cmp	r3, r2
 802e53a:	d903      	bls.n	802e544 <CRYP_AESGCM_Process+0x1e8>
 802e53c:	8a7b      	ldrh	r3, [r7, #18]
 802e53e:	697a      	ldr	r2, [r7, #20]
 802e540:	429a      	cmp	r2, r3
 802e542:	d8c6      	bhi.n	802e4d2 <CRYP_AESGCM_Process+0x176>
      }
    }
  }

  if ((hcryp->Size % 16U) != 0U)
 802e544:	687b      	ldr	r3, [r7, #4]
 802e546:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802e548:	f003 030f 	and.w	r3, r3, #15
 802e54c:	b29b      	uxth	r3, r3
 802e54e:	2b00      	cmp	r3, #0
 802e550:	d003      	beq.n	802e55a <CRYP_AESGCM_Process+0x1fe>
  {
    /*  Workaround 2 :  CRYP1 & AES generates correct TAG for GCM mode only when input block size is multiple of
    128 bits. If lthe size of the last block of payload is inferior to 128 bits, when GCM encryption
    is selected, then the TAG message will be wrong.*/
    CRYP_Workaround(hcryp, Timeout);
 802e552:	6839      	ldr	r1, [r7, #0]
 802e554:	6878      	ldr	r0, [r7, #4]
 802e556:	f000 fc6d 	bl	802ee34 <CRYP_Workaround>
  }

  /* Return function status */
  return HAL_OK;
 802e55a:	2300      	movs	r3, #0
}
 802e55c:	4618      	mov	r0, r3
 802e55e:	3718      	adds	r7, #24
 802e560:	46bd      	mov	sp, r7
 802e562:	bd80      	pop	{r7, pc}

0802e564 <CRYP_AESCCM_Process>:
  *         the configuration information for CRYP module
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AESCCM_Process(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 802e564:	b580      	push	{r7, lr}
 802e566:	b08a      	sub	sp, #40	; 0x28
 802e568:	af00      	add	r7, sp, #0
 802e56a:	6078      	str	r0, [r7, #4]
 802e56c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t wordsize = (uint32_t)(hcryp->Size) / 4U;
 802e56e:	687b      	ldr	r3, [r7, #4]
 802e570:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802e572:	089b      	lsrs	r3, r3, #2
 802e574:	b29b      	uxth	r3, r3
 802e576:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 802e578:	2301      	movs	r3, #1
 802e57a:	61fb      	str	r3, [r7, #28]
  uint32_t loopcounter;
  uint32_t npblb;
  uint32_t lastwordsize;
#endif /* AES */

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 802e57c:	687b      	ldr	r3, [r7, #4]
 802e57e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802e580:	2b01      	cmp	r3, #1
 802e582:	d116      	bne.n	802e5b2 <CRYP_AESCCM_Process+0x4e>
  {
    if (hcryp->KeyIVConfig == 1U)
 802e584:	687b      	ldr	r3, [r7, #4]
 802e586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802e588:	2b01      	cmp	r3, #1
 802e58a:	d109      	bne.n	802e5a0 <CRYP_AESCCM_Process+0x3c>
    {
      /* If the Key and IV configuration has to be done only once
      and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 802e58c:	2300      	movs	r3, #0
 802e58e:	61fb      	str	r3, [r7, #28]
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 802e590:	687b      	ldr	r3, [r7, #4]
 802e592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802e594:	687a      	ldr	r2, [r7, #4]
 802e596:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
 802e598:	441a      	add	r2, r3
 802e59a:	687b      	ldr	r3, [r7, #4]
 802e59c:	659a      	str	r2, [r3, #88]	; 0x58
 802e59e:	e00d      	b.n	802e5bc <CRYP_AESCCM_Process+0x58>
    else
    {
      /* If the Key and IV configuration has to be done only once
      and if it has not been done already, do it and set KeyIVConfig
      to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 802e5a0:	687b      	ldr	r3, [r7, #4]
 802e5a2:	2201      	movs	r2, #1
 802e5a4:	655a      	str	r2, [r3, #84]	; 0x54
      hcryp->SizesSum = hcryp->Size; /* Merely store payload length */
 802e5a6:	687b      	ldr	r3, [r7, #4]
 802e5a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802e5aa:	461a      	mov	r2, r3
 802e5ac:	687b      	ldr	r3, [r7, #4]
 802e5ae:	659a      	str	r2, [r3, #88]	; 0x58
 802e5b0:	e004      	b.n	802e5bc <CRYP_AESCCM_Process+0x58>
    }
  }
  else
  {
    hcryp->SizesSum = hcryp->Size;
 802e5b2:	687b      	ldr	r3, [r7, #4]
 802e5b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802e5b6:	461a      	mov	r2, r3
 802e5b8:	687b      	ldr	r3, [r7, #4]
 802e5ba:	659a      	str	r2, [r3, #88]	; 0x58
  }

  if (DoKeyIVConfig == 1U)
 802e5bc:	69fb      	ldr	r3, [r7, #28]
 802e5be:	2b01      	cmp	r3, #1
 802e5c0:	f040 81c6 	bne.w	802e950 <CRYP_AESCCM_Process+0x3ec>
  {

    /*  Reset CrypHeaderCount */
    hcryp->CrypHeaderCount = 0U;
 802e5c4:	687b      	ldr	r3, [r7, #4]
 802e5c6:	2200      	movs	r2, #0
 802e5c8:	871a      	strh	r2, [r3, #56]	; 0x38
      }
    }
#else /* AES */
    /*AES2v1.1.1 : CCM authentication : no init phase, only header and final phase */
    /* Select header phase */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 802e5ca:	687b      	ldr	r3, [r7, #4]
 802e5cc:	681b      	ldr	r3, [r3, #0]
 802e5ce:	681a      	ldr	r2, [r3, #0]
 802e5d0:	687b      	ldr	r3, [r7, #4]
 802e5d2:	681b      	ldr	r3, [r3, #0]
 802e5d4:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 802e5d8:	601a      	str	r2, [r3, #0]
 802e5da:	687b      	ldr	r3, [r7, #4]
 802e5dc:	681b      	ldr	r3, [r3, #0]
 802e5de:	681a      	ldr	r2, [r3, #0]
 802e5e0:	687b      	ldr	r3, [r7, #4]
 802e5e2:	681b      	ldr	r3, [r3, #0]
 802e5e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 802e5e8:	601a      	str	r2, [r3, #0]

    /* configured encryption mode */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_ENCRYPT);
 802e5ea:	687b      	ldr	r3, [r7, #4]
 802e5ec:	681b      	ldr	r3, [r3, #0]
 802e5ee:	681a      	ldr	r2, [r3, #0]
 802e5f0:	687b      	ldr	r3, [r7, #4]
 802e5f2:	681b      	ldr	r3, [r3, #0]
 802e5f4:	f022 0218 	bic.w	r2, r2, #24
 802e5f8:	601a      	str	r2, [r3, #0]

    /* Set the key */
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 802e5fa:	687b      	ldr	r3, [r7, #4]
 802e5fc:	689b      	ldr	r3, [r3, #8]
 802e5fe:	4619      	mov	r1, r3
 802e600:	6878      	ldr	r0, [r7, #4]
 802e602:	f7ff fe4f 	bl	802e2a4 <CRYP_SetKey>

    /* Set the initialization vector with zero values*/
    hcryp->Instance->IVR3 = 0U;
 802e606:	687b      	ldr	r3, [r7, #4]
 802e608:	681b      	ldr	r3, [r3, #0]
 802e60a:	2200      	movs	r2, #0
 802e60c:	62da      	str	r2, [r3, #44]	; 0x2c
    hcryp->Instance->IVR2 = 0U;
 802e60e:	687b      	ldr	r3, [r7, #4]
 802e610:	681b      	ldr	r3, [r3, #0]
 802e612:	2200      	movs	r2, #0
 802e614:	629a      	str	r2, [r3, #40]	; 0x28
    hcryp->Instance->IVR1 = 0U;
 802e616:	687b      	ldr	r3, [r7, #4]
 802e618:	681b      	ldr	r3, [r3, #0]
 802e61a:	2200      	movs	r2, #0
 802e61c:	625a      	str	r2, [r3, #36]	; 0x24
    hcryp->Instance->IVR0 = 0U;
 802e61e:	687b      	ldr	r3, [r7, #4]
 802e620:	681b      	ldr	r3, [r3, #0]
 802e622:	2200      	movs	r2, #0
 802e624:	621a      	str	r2, [r3, #32]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 802e626:	687b      	ldr	r3, [r7, #4]
 802e628:	681b      	ldr	r3, [r3, #0]
 802e62a:	681a      	ldr	r2, [r3, #0]
 802e62c:	687b      	ldr	r3, [r7, #4]
 802e62e:	681b      	ldr	r3, [r3, #0]
 802e630:	f042 0201 	orr.w	r2, r2, #1
 802e634:	601a      	str	r2, [r3, #0]

    /*Write the B0 packet into CRYP_DIN*/
    hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.B0);
 802e636:	687b      	ldr	r3, [r7, #4]
 802e638:	6a1a      	ldr	r2, [r3, #32]
 802e63a:	687b      	ldr	r3, [r7, #4]
 802e63c:	681b      	ldr	r3, [r3, #0]
 802e63e:	6812      	ldr	r2, [r2, #0]
 802e640:	609a      	str	r2, [r3, #8]
    hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.B0 + 1);
 802e642:	687b      	ldr	r3, [r7, #4]
 802e644:	6a1a      	ldr	r2, [r3, #32]
 802e646:	687b      	ldr	r3, [r7, #4]
 802e648:	681b      	ldr	r3, [r3, #0]
 802e64a:	6852      	ldr	r2, [r2, #4]
 802e64c:	609a      	str	r2, [r3, #8]
    hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.B0 + 2);
 802e64e:	687b      	ldr	r3, [r7, #4]
 802e650:	6a1a      	ldr	r2, [r3, #32]
 802e652:	687b      	ldr	r3, [r7, #4]
 802e654:	681b      	ldr	r3, [r3, #0]
 802e656:	6892      	ldr	r2, [r2, #8]
 802e658:	609a      	str	r2, [r3, #8]
    hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.B0 + 3);
 802e65a:	687b      	ldr	r3, [r7, #4]
 802e65c:	6a1a      	ldr	r2, [r3, #32]
 802e65e:	687b      	ldr	r3, [r7, #4]
 802e660:	681b      	ldr	r3, [r3, #0]
 802e662:	68d2      	ldr	r2, [r2, #12]
 802e664:	609a      	str	r2, [r3, #8]

    /*  wait until the end of computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 802e666:	6839      	ldr	r1, [r7, #0]
 802e668:	6878      	ldr	r0, [r7, #4]
 802e66a:	f000 fe7f 	bl	802f36c <CRYP_WaitOnCCFlag>
 802e66e:	4603      	mov	r3, r0
 802e670:	2b00      	cmp	r3, #0
 802e672:	d00f      	beq.n	802e694 <CRYP_AESCCM_Process+0x130>
    {
      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 802e674:	687b      	ldr	r3, [r7, #4]
 802e676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802e678:	f043 0210 	orr.w	r2, r3, #16
 802e67c:	687b      	ldr	r3, [r7, #4]
 802e67e:	651a      	str	r2, [r3, #80]	; 0x50
      hcryp->State = HAL_CRYP_STATE_READY;
 802e680:	687b      	ldr	r3, [r7, #4]
 802e682:	2201      	movs	r2, #1
 802e684:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

      /* Process unlocked & return error */
      __HAL_UNLOCK(hcryp);
 802e688:	687b      	ldr	r3, [r7, #4]
 802e68a:	2200      	movs	r2, #0
 802e68c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      return HAL_ERROR;
 802e690:	2301      	movs	r3, #1
 802e692:	e21e      	b.n	802ead2 <CRYP_AESCCM_Process+0x56e>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 802e694:	687b      	ldr	r3, [r7, #4]
 802e696:	681b      	ldr	r3, [r3, #0]
 802e698:	681a      	ldr	r2, [r3, #0]
 802e69a:	687b      	ldr	r3, [r7, #4]
 802e69c:	681b      	ldr	r3, [r3, #0]
 802e69e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802e6a2:	601a      	str	r2, [r3, #0]

    /* Set the phase */
    hcryp->Phase = CRYP_PHASE_PROCESS;
 802e6a4:	687b      	ldr	r3, [r7, #4]
 802e6a6:	2202      	movs	r2, #2
 802e6a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* From that point the whole message must be processed, first the Header then the payload.
    First the  Header block(B1) : associated data length expressed in bytes concatenated with Associated Data (A)*/

    if (hcryp->Init.HeaderSize != 0U)
 802e6aa:	687b      	ldr	r3, [r7, #4]
 802e6ac:	69db      	ldr	r3, [r3, #28]
 802e6ae:	2b00      	cmp	r3, #0
 802e6b0:	f000 814e 	beq.w	802e950 <CRYP_AESCCM_Process+0x3ec>
    {
      if ((hcryp->Init.HeaderSize % 4U) == 0U)
 802e6b4:	687b      	ldr	r3, [r7, #4]
 802e6b6:	69db      	ldr	r3, [r3, #28]
 802e6b8:	f003 0303 	and.w	r3, r3, #3
 802e6bc:	2b00      	cmp	r3, #0
 802e6be:	d17a      	bne.n	802e7b6 <CRYP_AESCCM_Process+0x252>
      {
        /* HeaderSize %4, no padding */
        for (loopcounter = 0U; (loopcounter < hcryp->Init.HeaderSize); loopcounter += 4U)
 802e6c0:	2300      	movs	r3, #0
 802e6c2:	61bb      	str	r3, [r7, #24]
 802e6c4:	e071      	b.n	802e7aa <CRYP_AESCCM_Process+0x246>
        {
          /* Write the Input block in the Data Input register */
          hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 802e6c6:	687b      	ldr	r3, [r7, #4]
 802e6c8:	699a      	ldr	r2, [r3, #24]
 802e6ca:	687b      	ldr	r3, [r7, #4]
 802e6cc:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802e6ce:	b29b      	uxth	r3, r3
 802e6d0:	009b      	lsls	r3, r3, #2
 802e6d2:	441a      	add	r2, r3
 802e6d4:	687b      	ldr	r3, [r7, #4]
 802e6d6:	681b      	ldr	r3, [r3, #0]
 802e6d8:	6812      	ldr	r2, [r2, #0]
 802e6da:	609a      	str	r2, [r3, #8]
          hcryp->CrypHeaderCount++ ;
 802e6dc:	687b      	ldr	r3, [r7, #4]
 802e6de:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802e6e0:	b29b      	uxth	r3, r3
 802e6e2:	3301      	adds	r3, #1
 802e6e4:	b29a      	uxth	r2, r3
 802e6e6:	687b      	ldr	r3, [r7, #4]
 802e6e8:	871a      	strh	r2, [r3, #56]	; 0x38
          hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 802e6ea:	687b      	ldr	r3, [r7, #4]
 802e6ec:	699a      	ldr	r2, [r3, #24]
 802e6ee:	687b      	ldr	r3, [r7, #4]
 802e6f0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802e6f2:	b29b      	uxth	r3, r3
 802e6f4:	009b      	lsls	r3, r3, #2
 802e6f6:	441a      	add	r2, r3
 802e6f8:	687b      	ldr	r3, [r7, #4]
 802e6fa:	681b      	ldr	r3, [r3, #0]
 802e6fc:	6812      	ldr	r2, [r2, #0]
 802e6fe:	609a      	str	r2, [r3, #8]
          hcryp->CrypHeaderCount++ ;
 802e700:	687b      	ldr	r3, [r7, #4]
 802e702:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802e704:	b29b      	uxth	r3, r3
 802e706:	3301      	adds	r3, #1
 802e708:	b29a      	uxth	r2, r3
 802e70a:	687b      	ldr	r3, [r7, #4]
 802e70c:	871a      	strh	r2, [r3, #56]	; 0x38
          hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 802e70e:	687b      	ldr	r3, [r7, #4]
 802e710:	699a      	ldr	r2, [r3, #24]
 802e712:	687b      	ldr	r3, [r7, #4]
 802e714:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802e716:	b29b      	uxth	r3, r3
 802e718:	009b      	lsls	r3, r3, #2
 802e71a:	441a      	add	r2, r3
 802e71c:	687b      	ldr	r3, [r7, #4]
 802e71e:	681b      	ldr	r3, [r3, #0]
 802e720:	6812      	ldr	r2, [r2, #0]
 802e722:	609a      	str	r2, [r3, #8]
          hcryp->CrypHeaderCount++ ;
 802e724:	687b      	ldr	r3, [r7, #4]
 802e726:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802e728:	b29b      	uxth	r3, r3
 802e72a:	3301      	adds	r3, #1
 802e72c:	b29a      	uxth	r2, r3
 802e72e:	687b      	ldr	r3, [r7, #4]
 802e730:	871a      	strh	r2, [r3, #56]	; 0x38
          hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 802e732:	687b      	ldr	r3, [r7, #4]
 802e734:	699a      	ldr	r2, [r3, #24]
 802e736:	687b      	ldr	r3, [r7, #4]
 802e738:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802e73a:	b29b      	uxth	r3, r3
 802e73c:	009b      	lsls	r3, r3, #2
 802e73e:	441a      	add	r2, r3
 802e740:	687b      	ldr	r3, [r7, #4]
 802e742:	681b      	ldr	r3, [r3, #0]
 802e744:	6812      	ldr	r2, [r2, #0]
 802e746:	609a      	str	r2, [r3, #8]
          hcryp->CrypHeaderCount++ ;
 802e748:	687b      	ldr	r3, [r7, #4]
 802e74a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802e74c:	b29b      	uxth	r3, r3
 802e74e:	3301      	adds	r3, #1
 802e750:	b29a      	uxth	r2, r3
 802e752:	687b      	ldr	r3, [r7, #4]
 802e754:	871a      	strh	r2, [r3, #56]	; 0x38

          if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 802e756:	6839      	ldr	r1, [r7, #0]
 802e758:	6878      	ldr	r0, [r7, #4]
 802e75a:	f000 fe07 	bl	802f36c <CRYP_WaitOnCCFlag>
 802e75e:	4603      	mov	r3, r0
 802e760:	2b00      	cmp	r3, #0
 802e762:	d017      	beq.n	802e794 <CRYP_AESCCM_Process+0x230>
          {
            /* Disable the CRYP peripheral clock */
            __HAL_CRYP_DISABLE(hcryp);
 802e764:	687b      	ldr	r3, [r7, #4]
 802e766:	681b      	ldr	r3, [r3, #0]
 802e768:	681a      	ldr	r2, [r3, #0]
 802e76a:	687b      	ldr	r3, [r7, #4]
 802e76c:	681b      	ldr	r3, [r3, #0]
 802e76e:	f022 0201 	bic.w	r2, r2, #1
 802e772:	601a      	str	r2, [r3, #0]

            /* Change state */
            hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 802e774:	687b      	ldr	r3, [r7, #4]
 802e776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802e778:	f043 0210 	orr.w	r2, r3, #16
 802e77c:	687b      	ldr	r3, [r7, #4]
 802e77e:	651a      	str	r2, [r3, #80]	; 0x50
            hcryp->State = HAL_CRYP_STATE_READY;
 802e780:	687b      	ldr	r3, [r7, #4]
 802e782:	2201      	movs	r2, #1
 802e784:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

            /* Process unlocked */
            __HAL_UNLOCK(hcryp);
 802e788:	687b      	ldr	r3, [r7, #4]
 802e78a:	2200      	movs	r2, #0
 802e78c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            return HAL_ERROR;
 802e790:	2301      	movs	r3, #1
 802e792:	e19e      	b.n	802ead2 <CRYP_AESCCM_Process+0x56e>
          }
          /* Clear CCF Flag */
          __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 802e794:	687b      	ldr	r3, [r7, #4]
 802e796:	681b      	ldr	r3, [r3, #0]
 802e798:	681a      	ldr	r2, [r3, #0]
 802e79a:	687b      	ldr	r3, [r7, #4]
 802e79c:	681b      	ldr	r3, [r3, #0]
 802e79e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802e7a2:	601a      	str	r2, [r3, #0]
        for (loopcounter = 0U; (loopcounter < hcryp->Init.HeaderSize); loopcounter += 4U)
 802e7a4:	69bb      	ldr	r3, [r7, #24]
 802e7a6:	3304      	adds	r3, #4
 802e7a8:	61bb      	str	r3, [r7, #24]
 802e7aa:	687b      	ldr	r3, [r7, #4]
 802e7ac:	69db      	ldr	r3, [r3, #28]
 802e7ae:	69ba      	ldr	r2, [r7, #24]
 802e7b0:	429a      	cmp	r2, r3
 802e7b2:	d388      	bcc.n	802e6c6 <CRYP_AESCCM_Process+0x162>
 802e7b4:	e0cc      	b.n	802e950 <CRYP_AESCCM_Process+0x3ec>
        }
      }
      else
      {
        /*Write Header block in the IN FIFO without last block */
        for (loopcounter = 0U; (loopcounter < ((hcryp->Init.HeaderSize) - (hcryp->Init.HeaderSize % 4U))); loopcounter += 4U)
 802e7b6:	2300      	movs	r3, #0
 802e7b8:	61bb      	str	r3, [r7, #24]
 802e7ba:	e071      	b.n	802e8a0 <CRYP_AESCCM_Process+0x33c>
        {
          /* Write the input block in the data input register */
          hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 802e7bc:	687b      	ldr	r3, [r7, #4]
 802e7be:	699a      	ldr	r2, [r3, #24]
 802e7c0:	687b      	ldr	r3, [r7, #4]
 802e7c2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802e7c4:	b29b      	uxth	r3, r3
 802e7c6:	009b      	lsls	r3, r3, #2
 802e7c8:	441a      	add	r2, r3
 802e7ca:	687b      	ldr	r3, [r7, #4]
 802e7cc:	681b      	ldr	r3, [r3, #0]
 802e7ce:	6812      	ldr	r2, [r2, #0]
 802e7d0:	609a      	str	r2, [r3, #8]
          hcryp->CrypHeaderCount++ ;
 802e7d2:	687b      	ldr	r3, [r7, #4]
 802e7d4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802e7d6:	b29b      	uxth	r3, r3
 802e7d8:	3301      	adds	r3, #1
 802e7da:	b29a      	uxth	r2, r3
 802e7dc:	687b      	ldr	r3, [r7, #4]
 802e7de:	871a      	strh	r2, [r3, #56]	; 0x38
          hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 802e7e0:	687b      	ldr	r3, [r7, #4]
 802e7e2:	699a      	ldr	r2, [r3, #24]
 802e7e4:	687b      	ldr	r3, [r7, #4]
 802e7e6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802e7e8:	b29b      	uxth	r3, r3
 802e7ea:	009b      	lsls	r3, r3, #2
 802e7ec:	441a      	add	r2, r3
 802e7ee:	687b      	ldr	r3, [r7, #4]
 802e7f0:	681b      	ldr	r3, [r3, #0]
 802e7f2:	6812      	ldr	r2, [r2, #0]
 802e7f4:	609a      	str	r2, [r3, #8]
          hcryp->CrypHeaderCount++ ;
 802e7f6:	687b      	ldr	r3, [r7, #4]
 802e7f8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802e7fa:	b29b      	uxth	r3, r3
 802e7fc:	3301      	adds	r3, #1
 802e7fe:	b29a      	uxth	r2, r3
 802e800:	687b      	ldr	r3, [r7, #4]
 802e802:	871a      	strh	r2, [r3, #56]	; 0x38
          hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 802e804:	687b      	ldr	r3, [r7, #4]
 802e806:	699a      	ldr	r2, [r3, #24]
 802e808:	687b      	ldr	r3, [r7, #4]
 802e80a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802e80c:	b29b      	uxth	r3, r3
 802e80e:	009b      	lsls	r3, r3, #2
 802e810:	441a      	add	r2, r3
 802e812:	687b      	ldr	r3, [r7, #4]
 802e814:	681b      	ldr	r3, [r3, #0]
 802e816:	6812      	ldr	r2, [r2, #0]
 802e818:	609a      	str	r2, [r3, #8]
          hcryp->CrypHeaderCount++ ;
 802e81a:	687b      	ldr	r3, [r7, #4]
 802e81c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802e81e:	b29b      	uxth	r3, r3
 802e820:	3301      	adds	r3, #1
 802e822:	b29a      	uxth	r2, r3
 802e824:	687b      	ldr	r3, [r7, #4]
 802e826:	871a      	strh	r2, [r3, #56]	; 0x38
          hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 802e828:	687b      	ldr	r3, [r7, #4]
 802e82a:	699a      	ldr	r2, [r3, #24]
 802e82c:	687b      	ldr	r3, [r7, #4]
 802e82e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802e830:	b29b      	uxth	r3, r3
 802e832:	009b      	lsls	r3, r3, #2
 802e834:	441a      	add	r2, r3
 802e836:	687b      	ldr	r3, [r7, #4]
 802e838:	681b      	ldr	r3, [r3, #0]
 802e83a:	6812      	ldr	r2, [r2, #0]
 802e83c:	609a      	str	r2, [r3, #8]
          hcryp->CrypHeaderCount++ ;
 802e83e:	687b      	ldr	r3, [r7, #4]
 802e840:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802e842:	b29b      	uxth	r3, r3
 802e844:	3301      	adds	r3, #1
 802e846:	b29a      	uxth	r2, r3
 802e848:	687b      	ldr	r3, [r7, #4]
 802e84a:	871a      	strh	r2, [r3, #56]	; 0x38

          if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 802e84c:	6839      	ldr	r1, [r7, #0]
 802e84e:	6878      	ldr	r0, [r7, #4]
 802e850:	f000 fd8c 	bl	802f36c <CRYP_WaitOnCCFlag>
 802e854:	4603      	mov	r3, r0
 802e856:	2b00      	cmp	r3, #0
 802e858:	d017      	beq.n	802e88a <CRYP_AESCCM_Process+0x326>
          {
            /* Disable the CRYP peripheral clock */
            __HAL_CRYP_DISABLE(hcryp);
 802e85a:	687b      	ldr	r3, [r7, #4]
 802e85c:	681b      	ldr	r3, [r3, #0]
 802e85e:	681a      	ldr	r2, [r3, #0]
 802e860:	687b      	ldr	r3, [r7, #4]
 802e862:	681b      	ldr	r3, [r3, #0]
 802e864:	f022 0201 	bic.w	r2, r2, #1
 802e868:	601a      	str	r2, [r3, #0]

            /* Change state */
            hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 802e86a:	687b      	ldr	r3, [r7, #4]
 802e86c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802e86e:	f043 0210 	orr.w	r2, r3, #16
 802e872:	687b      	ldr	r3, [r7, #4]
 802e874:	651a      	str	r2, [r3, #80]	; 0x50
            hcryp->State = HAL_CRYP_STATE_READY;
 802e876:	687b      	ldr	r3, [r7, #4]
 802e878:	2201      	movs	r2, #1
 802e87a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

            /* Process unlocked */
            __HAL_UNLOCK(hcryp);
 802e87e:	687b      	ldr	r3, [r7, #4]
 802e880:	2200      	movs	r2, #0
 802e882:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            return HAL_ERROR;
 802e886:	2301      	movs	r3, #1
 802e888:	e123      	b.n	802ead2 <CRYP_AESCCM_Process+0x56e>
          }
          /* Clear CCF Flag */
          __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 802e88a:	687b      	ldr	r3, [r7, #4]
 802e88c:	681b      	ldr	r3, [r3, #0]
 802e88e:	681a      	ldr	r2, [r3, #0]
 802e890:	687b      	ldr	r3, [r7, #4]
 802e892:	681b      	ldr	r3, [r3, #0]
 802e894:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802e898:	601a      	str	r2, [r3, #0]
        for (loopcounter = 0U; (loopcounter < ((hcryp->Init.HeaderSize) - (hcryp->Init.HeaderSize % 4U))); loopcounter += 4U)
 802e89a:	69bb      	ldr	r3, [r7, #24]
 802e89c:	3304      	adds	r3, #4
 802e89e:	61bb      	str	r3, [r7, #24]
 802e8a0:	687b      	ldr	r3, [r7, #4]
 802e8a2:	69db      	ldr	r3, [r3, #28]
 802e8a4:	f023 0303 	bic.w	r3, r3, #3
 802e8a8:	69ba      	ldr	r2, [r7, #24]
 802e8aa:	429a      	cmp	r2, r3
 802e8ac:	d386      	bcc.n	802e7bc <CRYP_AESCCM_Process+0x258>
        }
        /*  Last block optionally pad the data with zeros*/
        for (loopcounter = 0U; (loopcounter < (hcryp->Init.HeaderSize % 4U)); loopcounter++)
 802e8ae:	2300      	movs	r3, #0
 802e8b0:	61bb      	str	r3, [r7, #24]
 802e8b2:	e014      	b.n	802e8de <CRYP_AESCCM_Process+0x37a>
        {
          hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 802e8b4:	687b      	ldr	r3, [r7, #4]
 802e8b6:	699a      	ldr	r2, [r3, #24]
 802e8b8:	687b      	ldr	r3, [r7, #4]
 802e8ba:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802e8bc:	b29b      	uxth	r3, r3
 802e8be:	009b      	lsls	r3, r3, #2
 802e8c0:	441a      	add	r2, r3
 802e8c2:	687b      	ldr	r3, [r7, #4]
 802e8c4:	681b      	ldr	r3, [r3, #0]
 802e8c6:	6812      	ldr	r2, [r2, #0]
 802e8c8:	609a      	str	r2, [r3, #8]
          hcryp->CrypHeaderCount++ ;
 802e8ca:	687b      	ldr	r3, [r7, #4]
 802e8cc:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802e8ce:	b29b      	uxth	r3, r3
 802e8d0:	3301      	adds	r3, #1
 802e8d2:	b29a      	uxth	r2, r3
 802e8d4:	687b      	ldr	r3, [r7, #4]
 802e8d6:	871a      	strh	r2, [r3, #56]	; 0x38
        for (loopcounter = 0U; (loopcounter < (hcryp->Init.HeaderSize % 4U)); loopcounter++)
 802e8d8:	69bb      	ldr	r3, [r7, #24]
 802e8da:	3301      	adds	r3, #1
 802e8dc:	61bb      	str	r3, [r7, #24]
 802e8de:	687b      	ldr	r3, [r7, #4]
 802e8e0:	69db      	ldr	r3, [r3, #28]
 802e8e2:	f003 0303 	and.w	r3, r3, #3
 802e8e6:	69ba      	ldr	r2, [r7, #24]
 802e8e8:	429a      	cmp	r2, r3
 802e8ea:	d3e3      	bcc.n	802e8b4 <CRYP_AESCCM_Process+0x350>
        }
        while (loopcounter < 4U)
 802e8ec:	e006      	b.n	802e8fc <CRYP_AESCCM_Process+0x398>
        {
          /* Pad the data with zeros to have a complete block */
          hcryp->Instance->DINR = 0x0U;
 802e8ee:	687b      	ldr	r3, [r7, #4]
 802e8f0:	681b      	ldr	r3, [r3, #0]
 802e8f2:	2200      	movs	r2, #0
 802e8f4:	609a      	str	r2, [r3, #8]
          loopcounter++;
 802e8f6:	69bb      	ldr	r3, [r7, #24]
 802e8f8:	3301      	adds	r3, #1
 802e8fa:	61bb      	str	r3, [r7, #24]
        while (loopcounter < 4U)
 802e8fc:	69bb      	ldr	r3, [r7, #24]
 802e8fe:	2b03      	cmp	r3, #3
 802e900:	d9f5      	bls.n	802e8ee <CRYP_AESCCM_Process+0x38a>
        }

        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 802e902:	6839      	ldr	r1, [r7, #0]
 802e904:	6878      	ldr	r0, [r7, #4]
 802e906:	f000 fd31 	bl	802f36c <CRYP_WaitOnCCFlag>
 802e90a:	4603      	mov	r3, r0
 802e90c:	2b00      	cmp	r3, #0
 802e90e:	d017      	beq.n	802e940 <CRYP_AESCCM_Process+0x3dc>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 802e910:	687b      	ldr	r3, [r7, #4]
 802e912:	681b      	ldr	r3, [r3, #0]
 802e914:	681a      	ldr	r2, [r3, #0]
 802e916:	687b      	ldr	r3, [r7, #4]
 802e918:	681b      	ldr	r3, [r3, #0]
 802e91a:	f022 0201 	bic.w	r2, r2, #1
 802e91e:	601a      	str	r2, [r3, #0]

          /* Change state */
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 802e920:	687b      	ldr	r3, [r7, #4]
 802e922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802e924:	f043 0210 	orr.w	r2, r3, #16
 802e928:	687b      	ldr	r3, [r7, #4]
 802e92a:	651a      	str	r2, [r3, #80]	; 0x50
          hcryp->State = HAL_CRYP_STATE_READY;
 802e92c:	687b      	ldr	r3, [r7, #4]
 802e92e:	2201      	movs	r2, #1
 802e930:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 802e934:	687b      	ldr	r3, [r7, #4]
 802e936:	2200      	movs	r2, #0
 802e938:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
          return HAL_ERROR;
 802e93c:	2301      	movs	r3, #1
 802e93e:	e0c8      	b.n	802ead2 <CRYP_AESCCM_Process+0x56e>
        }
        /* Clear CCF flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 802e940:	687b      	ldr	r3, [r7, #4]
 802e942:	681b      	ldr	r3, [r3, #0]
 802e944:	681a      	ldr	r2, [r3, #0]
 802e946:	687b      	ldr	r3, [r7, #4]
 802e948:	681b      	ldr	r3, [r3, #0]
 802e94a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802e94e:	601a      	str	r2, [r3, #0]
      }
    }
  } /* if (DoKeyIVConfig == 1U) */
  /* Then the payload: cleartext payload (not the ciphertext payload).
  Write input Data, no output Data to get */
  if (hcryp->Size != 0U)
 802e950:	687b      	ldr	r3, [r7, #4]
 802e952:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802e954:	2b00      	cmp	r3, #0
 802e956:	f000 80bb 	beq.w	802ead0 <CRYP_AESCCM_Process+0x56c>
  {
    if ((hcryp->Size % 16U) != 0U)
 802e95a:	687b      	ldr	r3, [r7, #4]
 802e95c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802e95e:	f003 030f 	and.w	r3, r3, #15
 802e962:	b29b      	uxth	r3, r3
 802e964:	2b00      	cmp	r3, #0
 802e966:	d003      	beq.n	802e970 <CRYP_AESCCM_Process+0x40c>
    {
      /* recalculate  wordsize */
      wordsize = ((wordsize / 4U) * 4U) ;
 802e968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e96a:	f023 0303 	bic.w	r3, r3, #3
 802e96e:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 802e970:	f7fd fc6a 	bl	802c248 <HAL_GetTick>
 802e974:	6138      	str	r0, [r7, #16]
    /*Temporary CrypOutCount Value*/
    outcount = hcryp->CrypOutCount;
 802e976:	687b      	ldr	r3, [r7, #4]
 802e978:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 802e97a:	847b      	strh	r3, [r7, #34]	; 0x22

    while ((hcryp->CrypInCount < wordsize) && (outcount < wordsize))
 802e97c:	e02d      	b.n	802e9da <CRYP_AESCCM_Process+0x476>
    {
      /* Write plain data and get cipher data */
      CRYP_AES_ProcessData(hcryp, Timeout);
 802e97e:	6839      	ldr	r1, [r7, #0]
 802e980:	6878      	ldr	r0, [r7, #4]
 802e982:	f7ff fbda 	bl	802e13a <CRYP_AES_ProcessData>

      /*Temporary CrypOutCount Value*/
      outcount = hcryp->CrypOutCount;
 802e986:	687b      	ldr	r3, [r7, #4]
 802e988:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 802e98a:	847b      	strh	r3, [r7, #34]	; 0x22

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 802e98c:	683b      	ldr	r3, [r7, #0]
 802e98e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 802e992:	d022      	beq.n	802e9da <CRYP_AESCCM_Process+0x476>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 802e994:	f7fd fc58 	bl	802c248 <HAL_GetTick>
 802e998:	4602      	mov	r2, r0
 802e99a:	693b      	ldr	r3, [r7, #16]
 802e99c:	1ad3      	subs	r3, r2, r3
 802e99e:	683a      	ldr	r2, [r7, #0]
 802e9a0:	429a      	cmp	r2, r3
 802e9a2:	d302      	bcc.n	802e9aa <CRYP_AESCCM_Process+0x446>
 802e9a4:	683b      	ldr	r3, [r7, #0]
 802e9a6:	2b00      	cmp	r3, #0
 802e9a8:	d117      	bne.n	802e9da <CRYP_AESCCM_Process+0x476>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 802e9aa:	687b      	ldr	r3, [r7, #4]
 802e9ac:	681b      	ldr	r3, [r3, #0]
 802e9ae:	681a      	ldr	r2, [r3, #0]
 802e9b0:	687b      	ldr	r3, [r7, #4]
 802e9b2:	681b      	ldr	r3, [r3, #0]
 802e9b4:	f022 0201 	bic.w	r2, r2, #1
 802e9b8:	601a      	str	r2, [r3, #0]

          /* Change state */
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 802e9ba:	687b      	ldr	r3, [r7, #4]
 802e9bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802e9be:	f043 0210 	orr.w	r2, r3, #16
 802e9c2:	687b      	ldr	r3, [r7, #4]
 802e9c4:	651a      	str	r2, [r3, #80]	; 0x50
          hcryp->State = HAL_CRYP_STATE_READY;
 802e9c6:	687b      	ldr	r3, [r7, #4]
 802e9c8:	2201      	movs	r2, #1
 802e9ca:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 802e9ce:	687b      	ldr	r3, [r7, #4]
 802e9d0:	2200      	movs	r2, #0
 802e9d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
          return HAL_ERROR;
 802e9d6:	2301      	movs	r3, #1
 802e9d8:	e07b      	b.n	802ead2 <CRYP_AESCCM_Process+0x56e>
    while ((hcryp->CrypInCount < wordsize) && (outcount < wordsize))
 802e9da:	687b      	ldr	r3, [r7, #4]
 802e9dc:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 802e9de:	b29b      	uxth	r3, r3
 802e9e0:	461a      	mov	r2, r3
 802e9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e9e4:	4293      	cmp	r3, r2
 802e9e6:	d903      	bls.n	802e9f0 <CRYP_AESCCM_Process+0x48c>
 802e9e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802e9ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802e9ec:	429a      	cmp	r2, r3
 802e9ee:	d8c6      	bhi.n	802e97e <CRYP_AESCCM_Process+0x41a>
        }
      }
    }

    if ((hcryp->Size % 16U) != 0U)
 802e9f0:	687b      	ldr	r3, [r7, #4]
 802e9f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802e9f4:	f003 030f 	and.w	r3, r3, #15
 802e9f8:	b29b      	uxth	r3, r3
 802e9fa:	2b00      	cmp	r3, #0
 802e9fc:	d068      	beq.n	802ead0 <CRYP_AESCCM_Process+0x56c>
    {
      /* Compute the number of padding bytes in last block of payload */
      npblb = ((((uint32_t)(hcryp->Size) / 16U) + 1U) * 16U) - (uint32_t)(hcryp->Size);
 802e9fe:	687b      	ldr	r3, [r7, #4]
 802ea00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802ea02:	091b      	lsrs	r3, r3, #4
 802ea04:	b29b      	uxth	r3, r3
 802ea06:	3301      	adds	r3, #1
 802ea08:	011b      	lsls	r3, r3, #4
 802ea0a:	687a      	ldr	r2, [r7, #4]
 802ea0c:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
 802ea0e:	1a9b      	subs	r3, r3, r2
 802ea10:	60fb      	str	r3, [r7, #12]

      /* Number of valid words (lastwordsize) in last block */
      if ((npblb % 4U) == 0U)
 802ea12:	68fb      	ldr	r3, [r7, #12]
 802ea14:	f003 0303 	and.w	r3, r3, #3
 802ea18:	2b00      	cmp	r3, #0
 802ea1a:	d105      	bne.n	802ea28 <CRYP_AESCCM_Process+0x4c4>
      {
        lastwordsize = (16U - npblb) / 4U;
 802ea1c:	68fb      	ldr	r3, [r7, #12]
 802ea1e:	f1c3 0310 	rsb	r3, r3, #16
 802ea22:	089b      	lsrs	r3, r3, #2
 802ea24:	617b      	str	r3, [r7, #20]
 802ea26:	e005      	b.n	802ea34 <CRYP_AESCCM_Process+0x4d0>
      }
      else
      {
        lastwordsize = ((16U - npblb) / 4U) + 1U;
 802ea28:	68fb      	ldr	r3, [r7, #12]
 802ea2a:	f1c3 0310 	rsb	r3, r3, #16
 802ea2e:	089b      	lsrs	r3, r3, #2
 802ea30:	3301      	adds	r3, #1
 802ea32:	617b      	str	r3, [r7, #20]
      }
      /*  Last block optionally pad the data with zeros*/
      for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 802ea34:	2300      	movs	r3, #0
 802ea36:	61bb      	str	r3, [r7, #24]
 802ea38:	e014      	b.n	802ea64 <CRYP_AESCCM_Process+0x500>
      {
        /* Write the last input block in the IN FIFO */
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 802ea3a:	687b      	ldr	r3, [r7, #4]
 802ea3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802ea3e:	687b      	ldr	r3, [r7, #4]
 802ea40:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 802ea42:	b29b      	uxth	r3, r3
 802ea44:	009b      	lsls	r3, r3, #2
 802ea46:	441a      	add	r2, r3
 802ea48:	687b      	ldr	r3, [r7, #4]
 802ea4a:	681b      	ldr	r3, [r3, #0]
 802ea4c:	6812      	ldr	r2, [r2, #0]
 802ea4e:	609a      	str	r2, [r3, #8]
        hcryp->CrypInCount++;
 802ea50:	687b      	ldr	r3, [r7, #4]
 802ea52:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 802ea54:	b29b      	uxth	r3, r3
 802ea56:	3301      	adds	r3, #1
 802ea58:	b29a      	uxth	r2, r3
 802ea5a:	687b      	ldr	r3, [r7, #4]
 802ea5c:	875a      	strh	r2, [r3, #58]	; 0x3a
      for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 802ea5e:	69bb      	ldr	r3, [r7, #24]
 802ea60:	3301      	adds	r3, #1
 802ea62:	61bb      	str	r3, [r7, #24]
 802ea64:	69ba      	ldr	r2, [r7, #24]
 802ea66:	697b      	ldr	r3, [r7, #20]
 802ea68:	429a      	cmp	r2, r3
 802ea6a:	d3e6      	bcc.n	802ea3a <CRYP_AESCCM_Process+0x4d6>
      }
      while (loopcounter < 4U)
 802ea6c:	e006      	b.n	802ea7c <CRYP_AESCCM_Process+0x518>
      {
        /* Pad the data with zeros to have a complete block */
        hcryp->Instance->DINR  = 0U;
 802ea6e:	687b      	ldr	r3, [r7, #4]
 802ea70:	681b      	ldr	r3, [r3, #0]
 802ea72:	2200      	movs	r2, #0
 802ea74:	609a      	str	r2, [r3, #8]
        loopcounter++;
 802ea76:	69bb      	ldr	r3, [r7, #24]
 802ea78:	3301      	adds	r3, #1
 802ea7a:	61bb      	str	r3, [r7, #24]
      while (loopcounter < 4U)
 802ea7c:	69bb      	ldr	r3, [r7, #24]
 802ea7e:	2b03      	cmp	r3, #3
 802ea80:	d9f5      	bls.n	802ea6e <CRYP_AESCCM_Process+0x50a>
      }
      /* Wait for CCF flag to be raised */
      if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 802ea82:	6839      	ldr	r1, [r7, #0]
 802ea84:	6878      	ldr	r0, [r7, #4]
 802ea86:	f000 fc71 	bl	802f36c <CRYP_WaitOnCCFlag>
 802ea8a:	4603      	mov	r3, r0
 802ea8c:	2b00      	cmp	r3, #0
 802ea8e:	d017      	beq.n	802eac0 <CRYP_AESCCM_Process+0x55c>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 802ea90:	687b      	ldr	r3, [r7, #4]
 802ea92:	681b      	ldr	r3, [r3, #0]
 802ea94:	681a      	ldr	r2, [r3, #0]
 802ea96:	687b      	ldr	r3, [r7, #4]
 802ea98:	681b      	ldr	r3, [r3, #0]
 802ea9a:	f022 0201 	bic.w	r2, r2, #1
 802ea9e:	601a      	str	r2, [r3, #0]

        /* Change state */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 802eaa0:	687b      	ldr	r3, [r7, #4]
 802eaa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802eaa4:	f043 0210 	orr.w	r2, r3, #16
 802eaa8:	687b      	ldr	r3, [r7, #4]
 802eaaa:	651a      	str	r2, [r3, #80]	; 0x50
        hcryp->State = HAL_CRYP_STATE_READY;
 802eaac:	687b      	ldr	r3, [r7, #4]
 802eaae:	2201      	movs	r2, #1
 802eab0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 802eab4:	687b      	ldr	r3, [r7, #4]
 802eab6:	2200      	movs	r2, #0
 802eab8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        return HAL_ERROR;
 802eabc:	2301      	movs	r3, #1
 802eabe:	e008      	b.n	802ead2 <CRYP_AESCCM_Process+0x56e>
      }
      /* Clear CCF flag */
      __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 802eac0:	687b      	ldr	r3, [r7, #4]
 802eac2:	681b      	ldr	r3, [r3, #0]
 802eac4:	681a      	ldr	r2, [r3, #0]
 802eac6:	687b      	ldr	r3, [r7, #4]
 802eac8:	681b      	ldr	r3, [r3, #0]
 802eaca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802eace:	601a      	str	r2, [r3, #0]
    CRYP_Workaround(hcryp, Timeout);
  }
#endif /* CRYP */

  /* Return function status */
  return HAL_OK;
 802ead0:	2300      	movs	r3, #0
}
 802ead2:	4618      	mov	r0, r3
 802ead4:	3728      	adds	r7, #40	; 0x28
 802ead6:	46bd      	mov	sp, r7
 802ead8:	bd80      	pop	{r7, pc}

0802eada <CRYP_GCMCCM_SetHeaderPhase>:
  *         the configuration information for CRYP module(Header & HeaderSize)
  * @param  Timeout: Timeout value
  * @retval state
  */
static HAL_StatusTypeDef CRYP_GCMCCM_SetHeaderPhase(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 802eada:	b580      	push	{r7, lr}
 802eadc:	b084      	sub	sp, #16
 802eade:	af00      	add	r7, sp, #0
 802eae0:	6078      	str	r0, [r7, #4]
 802eae2:	6039      	str	r1, [r7, #0]
  uint32_t loopcounter;

  /***************************** Header phase for GCM/GMAC or CCM *********************************/

  if ((hcryp->Init.HeaderSize != 0U))
 802eae4:	687b      	ldr	r3, [r7, #4]
 802eae6:	69db      	ldr	r3, [r3, #28]
 802eae8:	2b00      	cmp	r3, #0
 802eaea:	f000 8176 	beq.w	802edda <CRYP_GCMCCM_SetHeaderPhase+0x300>
      return HAL_ERROR;
    }

#else /* AES */

    if (hcryp->Init.Algorithm == CRYP_AES_GCM_GMAC)
 802eaee:	687b      	ldr	r3, [r7, #4]
 802eaf0:	695b      	ldr	r3, [r3, #20]
 802eaf2:	2b60      	cmp	r3, #96	; 0x60
 802eaf4:	d122      	bne.n	802eb3c <CRYP_GCMCCM_SetHeaderPhase+0x62>
    {
      /* Workaround 1 :only AES before re-enabling the IP, datatype can be configured.*/
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE, hcryp->Init.DataType);
 802eaf6:	687b      	ldr	r3, [r7, #4]
 802eaf8:	681b      	ldr	r3, [r3, #0]
 802eafa:	681b      	ldr	r3, [r3, #0]
 802eafc:	f023 0106 	bic.w	r1, r3, #6
 802eb00:	687b      	ldr	r3, [r7, #4]
 802eb02:	685a      	ldr	r2, [r3, #4]
 802eb04:	687b      	ldr	r3, [r7, #4]
 802eb06:	681b      	ldr	r3, [r3, #0]
 802eb08:	430a      	orrs	r2, r1
 802eb0a:	601a      	str	r2, [r3, #0]

      /* Select header phase */
      CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 802eb0c:	687b      	ldr	r3, [r7, #4]
 802eb0e:	681b      	ldr	r3, [r3, #0]
 802eb10:	681a      	ldr	r2, [r3, #0]
 802eb12:	687b      	ldr	r3, [r7, #4]
 802eb14:	681b      	ldr	r3, [r3, #0]
 802eb16:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 802eb1a:	601a      	str	r2, [r3, #0]
 802eb1c:	687b      	ldr	r3, [r7, #4]
 802eb1e:	681b      	ldr	r3, [r3, #0]
 802eb20:	681a      	ldr	r2, [r3, #0]
 802eb22:	687b      	ldr	r3, [r7, #4]
 802eb24:	681b      	ldr	r3, [r3, #0]
 802eb26:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 802eb2a:	601a      	str	r2, [r3, #0]

      /* Enable the CRYP peripheral */
      __HAL_CRYP_ENABLE(hcryp);
 802eb2c:	687b      	ldr	r3, [r7, #4]
 802eb2e:	681b      	ldr	r3, [r3, #0]
 802eb30:	681a      	ldr	r2, [r3, #0]
 802eb32:	687b      	ldr	r3, [r7, #4]
 802eb34:	681b      	ldr	r3, [r3, #0]
 802eb36:	f042 0201 	orr.w	r2, r2, #1
 802eb3a:	601a      	str	r2, [r3, #0]

    }
    if ((hcryp->Init.HeaderSize % 4U) == 0U)
 802eb3c:	687b      	ldr	r3, [r7, #4]
 802eb3e:	69db      	ldr	r3, [r3, #28]
 802eb40:	f003 0303 	and.w	r3, r3, #3
 802eb44:	2b00      	cmp	r3, #0
 802eb46:	d17a      	bne.n	802ec3e <CRYP_GCMCCM_SetHeaderPhase+0x164>
    {
      /* HeaderSize %4, no padding */
      for (loopcounter = 0U; (loopcounter < hcryp->Init.HeaderSize); loopcounter += 4U)
 802eb48:	2300      	movs	r3, #0
 802eb4a:	60fb      	str	r3, [r7, #12]
 802eb4c:	e071      	b.n	802ec32 <CRYP_GCMCCM_SetHeaderPhase+0x158>
      {
        /* Write the input block in the data input register */
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 802eb4e:	687b      	ldr	r3, [r7, #4]
 802eb50:	699a      	ldr	r2, [r3, #24]
 802eb52:	687b      	ldr	r3, [r7, #4]
 802eb54:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802eb56:	b29b      	uxth	r3, r3
 802eb58:	009b      	lsls	r3, r3, #2
 802eb5a:	441a      	add	r2, r3
 802eb5c:	687b      	ldr	r3, [r7, #4]
 802eb5e:	681b      	ldr	r3, [r3, #0]
 802eb60:	6812      	ldr	r2, [r2, #0]
 802eb62:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 802eb64:	687b      	ldr	r3, [r7, #4]
 802eb66:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802eb68:	b29b      	uxth	r3, r3
 802eb6a:	3301      	adds	r3, #1
 802eb6c:	b29a      	uxth	r2, r3
 802eb6e:	687b      	ldr	r3, [r7, #4]
 802eb70:	871a      	strh	r2, [r3, #56]	; 0x38
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 802eb72:	687b      	ldr	r3, [r7, #4]
 802eb74:	699a      	ldr	r2, [r3, #24]
 802eb76:	687b      	ldr	r3, [r7, #4]
 802eb78:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802eb7a:	b29b      	uxth	r3, r3
 802eb7c:	009b      	lsls	r3, r3, #2
 802eb7e:	441a      	add	r2, r3
 802eb80:	687b      	ldr	r3, [r7, #4]
 802eb82:	681b      	ldr	r3, [r3, #0]
 802eb84:	6812      	ldr	r2, [r2, #0]
 802eb86:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 802eb88:	687b      	ldr	r3, [r7, #4]
 802eb8a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802eb8c:	b29b      	uxth	r3, r3
 802eb8e:	3301      	adds	r3, #1
 802eb90:	b29a      	uxth	r2, r3
 802eb92:	687b      	ldr	r3, [r7, #4]
 802eb94:	871a      	strh	r2, [r3, #56]	; 0x38
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 802eb96:	687b      	ldr	r3, [r7, #4]
 802eb98:	699a      	ldr	r2, [r3, #24]
 802eb9a:	687b      	ldr	r3, [r7, #4]
 802eb9c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802eb9e:	b29b      	uxth	r3, r3
 802eba0:	009b      	lsls	r3, r3, #2
 802eba2:	441a      	add	r2, r3
 802eba4:	687b      	ldr	r3, [r7, #4]
 802eba6:	681b      	ldr	r3, [r3, #0]
 802eba8:	6812      	ldr	r2, [r2, #0]
 802ebaa:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 802ebac:	687b      	ldr	r3, [r7, #4]
 802ebae:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802ebb0:	b29b      	uxth	r3, r3
 802ebb2:	3301      	adds	r3, #1
 802ebb4:	b29a      	uxth	r2, r3
 802ebb6:	687b      	ldr	r3, [r7, #4]
 802ebb8:	871a      	strh	r2, [r3, #56]	; 0x38
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 802ebba:	687b      	ldr	r3, [r7, #4]
 802ebbc:	699a      	ldr	r2, [r3, #24]
 802ebbe:	687b      	ldr	r3, [r7, #4]
 802ebc0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802ebc2:	b29b      	uxth	r3, r3
 802ebc4:	009b      	lsls	r3, r3, #2
 802ebc6:	441a      	add	r2, r3
 802ebc8:	687b      	ldr	r3, [r7, #4]
 802ebca:	681b      	ldr	r3, [r3, #0]
 802ebcc:	6812      	ldr	r2, [r2, #0]
 802ebce:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 802ebd0:	687b      	ldr	r3, [r7, #4]
 802ebd2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802ebd4:	b29b      	uxth	r3, r3
 802ebd6:	3301      	adds	r3, #1
 802ebd8:	b29a      	uxth	r2, r3
 802ebda:	687b      	ldr	r3, [r7, #4]
 802ebdc:	871a      	strh	r2, [r3, #56]	; 0x38

        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 802ebde:	6839      	ldr	r1, [r7, #0]
 802ebe0:	6878      	ldr	r0, [r7, #4]
 802ebe2:	f000 fbc3 	bl	802f36c <CRYP_WaitOnCCFlag>
 802ebe6:	4603      	mov	r3, r0
 802ebe8:	2b00      	cmp	r3, #0
 802ebea:	d017      	beq.n	802ec1c <CRYP_GCMCCM_SetHeaderPhase+0x142>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 802ebec:	687b      	ldr	r3, [r7, #4]
 802ebee:	681b      	ldr	r3, [r3, #0]
 802ebf0:	681a      	ldr	r2, [r3, #0]
 802ebf2:	687b      	ldr	r3, [r7, #4]
 802ebf4:	681b      	ldr	r3, [r3, #0]
 802ebf6:	f022 0201 	bic.w	r2, r2, #1
 802ebfa:	601a      	str	r2, [r3, #0]

          /* Change state */
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 802ebfc:	687b      	ldr	r3, [r7, #4]
 802ebfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802ec00:	f043 0210 	orr.w	r2, r3, #16
 802ec04:	687b      	ldr	r3, [r7, #4]
 802ec06:	651a      	str	r2, [r3, #80]	; 0x50
          hcryp->State = HAL_CRYP_STATE_READY;
 802ec08:	687b      	ldr	r3, [r7, #4]
 802ec0a:	2201      	movs	r2, #1
 802ec0c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 802ec10:	687b      	ldr	r3, [r7, #4]
 802ec12:	2200      	movs	r2, #0
 802ec14:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
          return HAL_ERROR;
 802ec18:	2301      	movs	r3, #1
 802ec1a:	e106      	b.n	802ee2a <CRYP_GCMCCM_SetHeaderPhase+0x350>
        }
        /* Clear CCF flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 802ec1c:	687b      	ldr	r3, [r7, #4]
 802ec1e:	681b      	ldr	r3, [r3, #0]
 802ec20:	681a      	ldr	r2, [r3, #0]
 802ec22:	687b      	ldr	r3, [r7, #4]
 802ec24:	681b      	ldr	r3, [r3, #0]
 802ec26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802ec2a:	601a      	str	r2, [r3, #0]
      for (loopcounter = 0U; (loopcounter < hcryp->Init.HeaderSize); loopcounter += 4U)
 802ec2c:	68fb      	ldr	r3, [r7, #12]
 802ec2e:	3304      	adds	r3, #4
 802ec30:	60fb      	str	r3, [r7, #12]
 802ec32:	687b      	ldr	r3, [r7, #4]
 802ec34:	69db      	ldr	r3, [r3, #28]
 802ec36:	68fa      	ldr	r2, [r7, #12]
 802ec38:	429a      	cmp	r2, r3
 802ec3a:	d388      	bcc.n	802eb4e <CRYP_GCMCCM_SetHeaderPhase+0x74>
 802ec3c:	e0f4      	b.n	802ee28 <CRYP_GCMCCM_SetHeaderPhase+0x34e>
      }
    }
    else
    {
      /*Write header block in the IN FIFO without last block */
      for (loopcounter = 0U; (loopcounter < ((hcryp->Init.HeaderSize) - (hcryp->Init.HeaderSize % 4U))); loopcounter += 4U)
 802ec3e:	2300      	movs	r3, #0
 802ec40:	60fb      	str	r3, [r7, #12]
 802ec42:	e071      	b.n	802ed28 <CRYP_GCMCCM_SetHeaderPhase+0x24e>
      {
        /* Write the input block in the data input register */
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 802ec44:	687b      	ldr	r3, [r7, #4]
 802ec46:	699a      	ldr	r2, [r3, #24]
 802ec48:	687b      	ldr	r3, [r7, #4]
 802ec4a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802ec4c:	b29b      	uxth	r3, r3
 802ec4e:	009b      	lsls	r3, r3, #2
 802ec50:	441a      	add	r2, r3
 802ec52:	687b      	ldr	r3, [r7, #4]
 802ec54:	681b      	ldr	r3, [r3, #0]
 802ec56:	6812      	ldr	r2, [r2, #0]
 802ec58:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 802ec5a:	687b      	ldr	r3, [r7, #4]
 802ec5c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802ec5e:	b29b      	uxth	r3, r3
 802ec60:	3301      	adds	r3, #1
 802ec62:	b29a      	uxth	r2, r3
 802ec64:	687b      	ldr	r3, [r7, #4]
 802ec66:	871a      	strh	r2, [r3, #56]	; 0x38
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 802ec68:	687b      	ldr	r3, [r7, #4]
 802ec6a:	699a      	ldr	r2, [r3, #24]
 802ec6c:	687b      	ldr	r3, [r7, #4]
 802ec6e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802ec70:	b29b      	uxth	r3, r3
 802ec72:	009b      	lsls	r3, r3, #2
 802ec74:	441a      	add	r2, r3
 802ec76:	687b      	ldr	r3, [r7, #4]
 802ec78:	681b      	ldr	r3, [r3, #0]
 802ec7a:	6812      	ldr	r2, [r2, #0]
 802ec7c:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 802ec7e:	687b      	ldr	r3, [r7, #4]
 802ec80:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802ec82:	b29b      	uxth	r3, r3
 802ec84:	3301      	adds	r3, #1
 802ec86:	b29a      	uxth	r2, r3
 802ec88:	687b      	ldr	r3, [r7, #4]
 802ec8a:	871a      	strh	r2, [r3, #56]	; 0x38
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 802ec8c:	687b      	ldr	r3, [r7, #4]
 802ec8e:	699a      	ldr	r2, [r3, #24]
 802ec90:	687b      	ldr	r3, [r7, #4]
 802ec92:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802ec94:	b29b      	uxth	r3, r3
 802ec96:	009b      	lsls	r3, r3, #2
 802ec98:	441a      	add	r2, r3
 802ec9a:	687b      	ldr	r3, [r7, #4]
 802ec9c:	681b      	ldr	r3, [r3, #0]
 802ec9e:	6812      	ldr	r2, [r2, #0]
 802eca0:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 802eca2:	687b      	ldr	r3, [r7, #4]
 802eca4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802eca6:	b29b      	uxth	r3, r3
 802eca8:	3301      	adds	r3, #1
 802ecaa:	b29a      	uxth	r2, r3
 802ecac:	687b      	ldr	r3, [r7, #4]
 802ecae:	871a      	strh	r2, [r3, #56]	; 0x38
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 802ecb0:	687b      	ldr	r3, [r7, #4]
 802ecb2:	699a      	ldr	r2, [r3, #24]
 802ecb4:	687b      	ldr	r3, [r7, #4]
 802ecb6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802ecb8:	b29b      	uxth	r3, r3
 802ecba:	009b      	lsls	r3, r3, #2
 802ecbc:	441a      	add	r2, r3
 802ecbe:	687b      	ldr	r3, [r7, #4]
 802ecc0:	681b      	ldr	r3, [r3, #0]
 802ecc2:	6812      	ldr	r2, [r2, #0]
 802ecc4:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 802ecc6:	687b      	ldr	r3, [r7, #4]
 802ecc8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802ecca:	b29b      	uxth	r3, r3
 802eccc:	3301      	adds	r3, #1
 802ecce:	b29a      	uxth	r2, r3
 802ecd0:	687b      	ldr	r3, [r7, #4]
 802ecd2:	871a      	strh	r2, [r3, #56]	; 0x38

        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 802ecd4:	6839      	ldr	r1, [r7, #0]
 802ecd6:	6878      	ldr	r0, [r7, #4]
 802ecd8:	f000 fb48 	bl	802f36c <CRYP_WaitOnCCFlag>
 802ecdc:	4603      	mov	r3, r0
 802ecde:	2b00      	cmp	r3, #0
 802ece0:	d017      	beq.n	802ed12 <CRYP_GCMCCM_SetHeaderPhase+0x238>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 802ece2:	687b      	ldr	r3, [r7, #4]
 802ece4:	681b      	ldr	r3, [r3, #0]
 802ece6:	681a      	ldr	r2, [r3, #0]
 802ece8:	687b      	ldr	r3, [r7, #4]
 802ecea:	681b      	ldr	r3, [r3, #0]
 802ecec:	f022 0201 	bic.w	r2, r2, #1
 802ecf0:	601a      	str	r2, [r3, #0]

          /* Change state */
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 802ecf2:	687b      	ldr	r3, [r7, #4]
 802ecf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802ecf6:	f043 0210 	orr.w	r2, r3, #16
 802ecfa:	687b      	ldr	r3, [r7, #4]
 802ecfc:	651a      	str	r2, [r3, #80]	; 0x50
          hcryp->State = HAL_CRYP_STATE_READY;
 802ecfe:	687b      	ldr	r3, [r7, #4]
 802ed00:	2201      	movs	r2, #1
 802ed02:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 802ed06:	687b      	ldr	r3, [r7, #4]
 802ed08:	2200      	movs	r2, #0
 802ed0a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
          return HAL_ERROR;
 802ed0e:	2301      	movs	r3, #1
 802ed10:	e08b      	b.n	802ee2a <CRYP_GCMCCM_SetHeaderPhase+0x350>
        }
        /* Clear CCF flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 802ed12:	687b      	ldr	r3, [r7, #4]
 802ed14:	681b      	ldr	r3, [r3, #0]
 802ed16:	681a      	ldr	r2, [r3, #0]
 802ed18:	687b      	ldr	r3, [r7, #4]
 802ed1a:	681b      	ldr	r3, [r3, #0]
 802ed1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802ed20:	601a      	str	r2, [r3, #0]
      for (loopcounter = 0U; (loopcounter < ((hcryp->Init.HeaderSize) - (hcryp->Init.HeaderSize % 4U))); loopcounter += 4U)
 802ed22:	68fb      	ldr	r3, [r7, #12]
 802ed24:	3304      	adds	r3, #4
 802ed26:	60fb      	str	r3, [r7, #12]
 802ed28:	687b      	ldr	r3, [r7, #4]
 802ed2a:	69db      	ldr	r3, [r3, #28]
 802ed2c:	f023 0303 	bic.w	r3, r3, #3
 802ed30:	68fa      	ldr	r2, [r7, #12]
 802ed32:	429a      	cmp	r2, r3
 802ed34:	d386      	bcc.n	802ec44 <CRYP_GCMCCM_SetHeaderPhase+0x16a>
      }
      /*  Last block optionally pad the data with zeros*/
      for (loopcounter = 0U; (loopcounter < (hcryp->Init.HeaderSize % 4U)); loopcounter++)
 802ed36:	2300      	movs	r3, #0
 802ed38:	60fb      	str	r3, [r7, #12]
 802ed3a:	e014      	b.n	802ed66 <CRYP_GCMCCM_SetHeaderPhase+0x28c>
      {
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 802ed3c:	687b      	ldr	r3, [r7, #4]
 802ed3e:	699a      	ldr	r2, [r3, #24]
 802ed40:	687b      	ldr	r3, [r7, #4]
 802ed42:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802ed44:	b29b      	uxth	r3, r3
 802ed46:	009b      	lsls	r3, r3, #2
 802ed48:	441a      	add	r2, r3
 802ed4a:	687b      	ldr	r3, [r7, #4]
 802ed4c:	681b      	ldr	r3, [r3, #0]
 802ed4e:	6812      	ldr	r2, [r2, #0]
 802ed50:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 802ed52:	687b      	ldr	r3, [r7, #4]
 802ed54:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802ed56:	b29b      	uxth	r3, r3
 802ed58:	3301      	adds	r3, #1
 802ed5a:	b29a      	uxth	r2, r3
 802ed5c:	687b      	ldr	r3, [r7, #4]
 802ed5e:	871a      	strh	r2, [r3, #56]	; 0x38
      for (loopcounter = 0U; (loopcounter < (hcryp->Init.HeaderSize % 4U)); loopcounter++)
 802ed60:	68fb      	ldr	r3, [r7, #12]
 802ed62:	3301      	adds	r3, #1
 802ed64:	60fb      	str	r3, [r7, #12]
 802ed66:	687b      	ldr	r3, [r7, #4]
 802ed68:	69db      	ldr	r3, [r3, #28]
 802ed6a:	f003 0303 	and.w	r3, r3, #3
 802ed6e:	68fa      	ldr	r2, [r7, #12]
 802ed70:	429a      	cmp	r2, r3
 802ed72:	d3e3      	bcc.n	802ed3c <CRYP_GCMCCM_SetHeaderPhase+0x262>
      }
      while (loopcounter < 4U)
 802ed74:	e006      	b.n	802ed84 <CRYP_GCMCCM_SetHeaderPhase+0x2aa>
      {
        /*Pad the data with zeros to have a complete block */
        hcryp->Instance->DINR = 0x0U;
 802ed76:	687b      	ldr	r3, [r7, #4]
 802ed78:	681b      	ldr	r3, [r3, #0]
 802ed7a:	2200      	movs	r2, #0
 802ed7c:	609a      	str	r2, [r3, #8]
        loopcounter++;
 802ed7e:	68fb      	ldr	r3, [r7, #12]
 802ed80:	3301      	adds	r3, #1
 802ed82:	60fb      	str	r3, [r7, #12]
      while (loopcounter < 4U)
 802ed84:	68fb      	ldr	r3, [r7, #12]
 802ed86:	2b03      	cmp	r3, #3
 802ed88:	d9f5      	bls.n	802ed76 <CRYP_GCMCCM_SetHeaderPhase+0x29c>
      }

      if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 802ed8a:	6839      	ldr	r1, [r7, #0]
 802ed8c:	6878      	ldr	r0, [r7, #4]
 802ed8e:	f000 faed 	bl	802f36c <CRYP_WaitOnCCFlag>
 802ed92:	4603      	mov	r3, r0
 802ed94:	2b00      	cmp	r3, #0
 802ed96:	d017      	beq.n	802edc8 <CRYP_GCMCCM_SetHeaderPhase+0x2ee>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 802ed98:	687b      	ldr	r3, [r7, #4]
 802ed9a:	681b      	ldr	r3, [r3, #0]
 802ed9c:	681a      	ldr	r2, [r3, #0]
 802ed9e:	687b      	ldr	r3, [r7, #4]
 802eda0:	681b      	ldr	r3, [r3, #0]
 802eda2:	f022 0201 	bic.w	r2, r2, #1
 802eda6:	601a      	str	r2, [r3, #0]

        /* Change state */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 802eda8:	687b      	ldr	r3, [r7, #4]
 802edaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802edac:	f043 0210 	orr.w	r2, r3, #16
 802edb0:	687b      	ldr	r3, [r7, #4]
 802edb2:	651a      	str	r2, [r3, #80]	; 0x50
        hcryp->State = HAL_CRYP_STATE_READY;
 802edb4:	687b      	ldr	r3, [r7, #4]
 802edb6:	2201      	movs	r2, #1
 802edb8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 802edbc:	687b      	ldr	r3, [r7, #4]
 802edbe:	2200      	movs	r2, #0
 802edc0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        return HAL_ERROR;
 802edc4:	2301      	movs	r3, #1
 802edc6:	e030      	b.n	802ee2a <CRYP_GCMCCM_SetHeaderPhase+0x350>
      }
      /* Clear CCF flag */
      __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 802edc8:	687b      	ldr	r3, [r7, #4]
 802edca:	681b      	ldr	r3, [r3, #0]
 802edcc:	681a      	ldr	r2, [r3, #0]
 802edce:	687b      	ldr	r3, [r7, #4]
 802edd0:	681b      	ldr	r3, [r3, #0]
 802edd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802edd6:	601a      	str	r2, [r3, #0]
 802edd8:	e026      	b.n	802ee28 <CRYP_GCMCCM_SetHeaderPhase+0x34e>
#endif /* End AES or CRYP */
  }
  else
  {
#if defined(AES)
    if (hcryp->Init.Algorithm == CRYP_AES_GCM_GMAC)
 802edda:	687b      	ldr	r3, [r7, #4]
 802eddc:	695b      	ldr	r3, [r3, #20]
 802edde:	2b60      	cmp	r3, #96	; 0x60
 802ede0:	d122      	bne.n	802ee28 <CRYP_GCMCCM_SetHeaderPhase+0x34e>
    {
      /*Workaround 1: only AES, before re-enabling the IP, datatype can be configured.*/
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE, hcryp->Init.DataType);
 802ede2:	687b      	ldr	r3, [r7, #4]
 802ede4:	681b      	ldr	r3, [r3, #0]
 802ede6:	681b      	ldr	r3, [r3, #0]
 802ede8:	f023 0106 	bic.w	r1, r3, #6
 802edec:	687b      	ldr	r3, [r7, #4]
 802edee:	685a      	ldr	r2, [r3, #4]
 802edf0:	687b      	ldr	r3, [r7, #4]
 802edf2:	681b      	ldr	r3, [r3, #0]
 802edf4:	430a      	orrs	r2, r1
 802edf6:	601a      	str	r2, [r3, #0]

      /* Select header phase */
      CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 802edf8:	687b      	ldr	r3, [r7, #4]
 802edfa:	681b      	ldr	r3, [r3, #0]
 802edfc:	681a      	ldr	r2, [r3, #0]
 802edfe:	687b      	ldr	r3, [r7, #4]
 802ee00:	681b      	ldr	r3, [r3, #0]
 802ee02:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 802ee06:	601a      	str	r2, [r3, #0]
 802ee08:	687b      	ldr	r3, [r7, #4]
 802ee0a:	681b      	ldr	r3, [r3, #0]
 802ee0c:	681a      	ldr	r2, [r3, #0]
 802ee0e:	687b      	ldr	r3, [r7, #4]
 802ee10:	681b      	ldr	r3, [r3, #0]
 802ee12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 802ee16:	601a      	str	r2, [r3, #0]

      /* Enable the CRYP peripheral */
      __HAL_CRYP_ENABLE(hcryp);
 802ee18:	687b      	ldr	r3, [r7, #4]
 802ee1a:	681b      	ldr	r3, [r3, #0]
 802ee1c:	681a      	ldr	r2, [r3, #0]
 802ee1e:	687b      	ldr	r3, [r7, #4]
 802ee20:	681b      	ldr	r3, [r3, #0]
 802ee22:	f042 0201 	orr.w	r2, r2, #1
 802ee26:	601a      	str	r2, [r3, #0]
    }
#endif /* AES */
  }
  /* Return function status */
  return HAL_OK;
 802ee28:	2300      	movs	r3, #0
}
 802ee2a:	4618      	mov	r0, r3
 802ee2c:	3710      	adds	r7, #16
 802ee2e:	46bd      	mov	sp, r7
 802ee30:	bd80      	pop	{r7, pc}
	...

0802ee34 <CRYP_Workaround>:
  *         the configuration information for CRYP module
  * @param  Timeout: specify Timeout value
  * @retval None
  */
static void CRYP_Workaround(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 802ee34:	b580      	push	{r7, lr}
 802ee36:	b098      	sub	sp, #96	; 0x60
 802ee38:	af00      	add	r7, sp, #0
 802ee3a:	6078      	str	r0, [r7, #4]
 802ee3c:	6039      	str	r1, [r7, #0]
#if defined(CRYP)
  uint32_t  iv1temp;
  uint32_t  temp[4] = {0};
  uint32_t  temp2[4] = {0};
#endif /* CRYP */
  uint32_t intermediate_data[4] = {0};
 802ee3e:	f107 0308 	add.w	r3, r7, #8
 802ee42:	2200      	movs	r2, #0
 802ee44:	601a      	str	r2, [r3, #0]
 802ee46:	605a      	str	r2, [r3, #4]
 802ee48:	609a      	str	r2, [r3, #8]
 802ee4a:	60da      	str	r2, [r3, #12]
  uint32_t index;

  /* Compute the number of padding bytes in last block of payload */
  npblb = ((((uint32_t)(hcryp->Size) / 16U) + 1U) * 16U) - (uint32_t)(hcryp->Size);
 802ee4c:	687b      	ldr	r3, [r7, #4]
 802ee4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802ee50:	091b      	lsrs	r3, r3, #4
 802ee52:	b29b      	uxth	r3, r3
 802ee54:	3301      	adds	r3, #1
 802ee56:	011b      	lsls	r3, r3, #4
 802ee58:	687a      	ldr	r2, [r7, #4]
 802ee5a:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
 802ee5c:	1a9b      	subs	r3, r3, r2
 802ee5e:	657b      	str	r3, [r7, #84]	; 0x54

  /* Number of valid words (lastwordsize) in last block */
  if ((npblb % 4U) == 0U)
 802ee60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ee62:	f003 0303 	and.w	r3, r3, #3
 802ee66:	2b00      	cmp	r3, #0
 802ee68:	d105      	bne.n	802ee76 <CRYP_Workaround+0x42>
  {
    lastwordsize = (16U - npblb) / 4U;
 802ee6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ee6c:	f1c3 0310 	rsb	r3, r3, #16
 802ee70:	089b      	lsrs	r3, r3, #2
 802ee72:	65fb      	str	r3, [r7, #92]	; 0x5c
 802ee74:	e005      	b.n	802ee82 <CRYP_Workaround+0x4e>
  }
  else
  {
    lastwordsize = ((16U - npblb) / 4U) + 1U;
 802ee76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ee78:	f1c3 0310 	rsb	r3, r3, #16
 802ee7c:	089b      	lsrs	r3, r3, #2
 802ee7e:	3301      	adds	r3, #1
 802ee80:	65fb      	str	r3, [r7, #92]	; 0x5c
#else /* AES */

  /*Workaround 2: case GCM encryption, during payload phase and before inserting
  the last block of paylaod, which size is inferior to  128 bits  */

  if ((hcryp->Instance->CR & AES_CR_MODE) == CRYP_OPERATINGMODE_ENCRYPT)
 802ee82:	687b      	ldr	r3, [r7, #4]
 802ee84:	681b      	ldr	r3, [r3, #0]
 802ee86:	681b      	ldr	r3, [r3, #0]
 802ee88:	f003 0318 	and.w	r3, r3, #24
 802ee8c:	2b00      	cmp	r3, #0
 802ee8e:	d10b      	bne.n	802eea8 <CRYP_Workaround+0x74>
  {
    /* configured  CHMOD CTR   */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_CHMOD, CRYP_AES_CTR);
 802ee90:	687b      	ldr	r3, [r7, #4]
 802ee92:	681b      	ldr	r3, [r3, #0]
 802ee94:	681b      	ldr	r3, [r3, #0]
 802ee96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802ee9a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 802ee9e:	687a      	ldr	r2, [r7, #4]
 802eea0:	6812      	ldr	r2, [r2, #0]
 802eea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802eea6:	6013      	str	r3, [r2, #0]
  }
  /*  last block optionally pad the data with zeros*/
  for (index = 0U; index < lastwordsize; index ++)
 802eea8:	2300      	movs	r3, #0
 802eeaa:	65bb      	str	r3, [r7, #88]	; 0x58
 802eeac:	e014      	b.n	802eed8 <CRYP_Workaround+0xa4>
  {
    /* Write the last Input block in the IN FIFO */
    hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 802eeae:	687b      	ldr	r3, [r7, #4]
 802eeb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802eeb2:	687b      	ldr	r3, [r7, #4]
 802eeb4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 802eeb6:	b29b      	uxth	r3, r3
 802eeb8:	009b      	lsls	r3, r3, #2
 802eeba:	441a      	add	r2, r3
 802eebc:	687b      	ldr	r3, [r7, #4]
 802eebe:	681b      	ldr	r3, [r3, #0]
 802eec0:	6812      	ldr	r2, [r2, #0]
 802eec2:	609a      	str	r2, [r3, #8]
    hcryp->CrypInCount++;
 802eec4:	687b      	ldr	r3, [r7, #4]
 802eec6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 802eec8:	b29b      	uxth	r3, r3
 802eeca:	3301      	adds	r3, #1
 802eecc:	b29a      	uxth	r2, r3
 802eece:	687b      	ldr	r3, [r7, #4]
 802eed0:	875a      	strh	r2, [r3, #58]	; 0x3a
  for (index = 0U; index < lastwordsize; index ++)
 802eed2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802eed4:	3301      	adds	r3, #1
 802eed6:	65bb      	str	r3, [r7, #88]	; 0x58
 802eed8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 802eeda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802eedc:	429a      	cmp	r2, r3
 802eede:	d3e6      	bcc.n	802eeae <CRYP_Workaround+0x7a>
  }
  while (index < 4U)
 802eee0:	e006      	b.n	802eef0 <CRYP_Workaround+0xbc>
  {
    /* pad the data with zeros to have a complete block */
    hcryp->Instance->DINR  = 0U;
 802eee2:	687b      	ldr	r3, [r7, #4]
 802eee4:	681b      	ldr	r3, [r3, #0]
 802eee6:	2200      	movs	r2, #0
 802eee8:	609a      	str	r2, [r3, #8]
    index++;
 802eeea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802eeec:	3301      	adds	r3, #1
 802eeee:	65bb      	str	r3, [r7, #88]	; 0x58
  while (index < 4U)
 802eef0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802eef2:	2b03      	cmp	r3, #3
 802eef4:	d9f5      	bls.n	802eee2 <CRYP_Workaround+0xae>
  }
  /* Wait for CCF flag to be raised */
  if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 802eef6:	6839      	ldr	r1, [r7, #0]
 802eef8:	6878      	ldr	r0, [r7, #4]
 802eefa:	f000 fa37 	bl	802f36c <CRYP_WaitOnCCFlag>
 802eefe:	4603      	mov	r3, r0
 802ef00:	2b00      	cmp	r3, #0
 802ef02:	d00a      	beq.n	802ef1a <CRYP_Workaround+0xe6>
  {
    hcryp->State = HAL_CRYP_STATE_READY;
 802ef04:	687b      	ldr	r3, [r7, #4]
 802ef06:	2201      	movs	r2, #1
 802ef08:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    __HAL_UNLOCK(hcryp);
 802ef0c:	687b      	ldr	r3, [r7, #4]
 802ef0e:	2200      	movs	r2, #0
 802ef10:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1U)
    /*Call registered error callback*/
    hcryp->ErrorCallback(hcryp);
#else
    /*Call legacy weak error callback*/
    HAL_CRYP_ErrorCallback(hcryp);
 802ef14:	6878      	ldr	r0, [r7, #4]
 802ef16:	f7fe ffc1 	bl	802de9c <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
  }

  /* Clear CCF Flag */
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 802ef1a:	687b      	ldr	r3, [r7, #4]
 802ef1c:	681b      	ldr	r3, [r3, #0]
 802ef1e:	681a      	ldr	r2, [r3, #0]
 802ef20:	687b      	ldr	r3, [r7, #4]
 802ef22:	681b      	ldr	r3, [r3, #0]
 802ef24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802ef28:	601a      	str	r2, [r3, #0]

  for (index = 0U; index < 4U; index++)
 802ef2a:	2300      	movs	r3, #0
 802ef2c:	65bb      	str	r3, [r7, #88]	; 0x58
 802ef2e:	e022      	b.n	802ef76 <CRYP_Workaround+0x142>
  {
    /* Read the Output block from the Output FIFO */
    intermediate_data[index] = hcryp->Instance->DOUTR;
 802ef30:	687b      	ldr	r3, [r7, #4]
 802ef32:	681b      	ldr	r3, [r3, #0]
 802ef34:	68da      	ldr	r2, [r3, #12]
 802ef36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802ef38:	009b      	lsls	r3, r3, #2
 802ef3a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 802ef3e:	440b      	add	r3, r1
 802ef40:	f843 2c58 	str.w	r2, [r3, #-88]

    /*intermediate data buffer to be used in  the workaround*/
    *(uint32_t *)(hcryp->pCrypOutBuffPtr + (hcryp->CrypOutCount)) = intermediate_data[index];
 802ef44:	687b      	ldr	r3, [r7, #4]
 802ef46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802ef48:	687b      	ldr	r3, [r7, #4]
 802ef4a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 802ef4c:	b29b      	uxth	r3, r3
 802ef4e:	009b      	lsls	r3, r3, #2
 802ef50:	441a      	add	r2, r3
 802ef52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802ef54:	009b      	lsls	r3, r3, #2
 802ef56:	f107 0160 	add.w	r1, r7, #96	; 0x60
 802ef5a:	440b      	add	r3, r1
 802ef5c:	f853 3c58 	ldr.w	r3, [r3, #-88]
 802ef60:	6013      	str	r3, [r2, #0]
    hcryp->CrypOutCount++;
 802ef62:	687b      	ldr	r3, [r7, #4]
 802ef64:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 802ef66:	b29b      	uxth	r3, r3
 802ef68:	3301      	adds	r3, #1
 802ef6a:	b29a      	uxth	r2, r3
 802ef6c:	687b      	ldr	r3, [r7, #4]
 802ef6e:	879a      	strh	r2, [r3, #60]	; 0x3c
  for (index = 0U; index < 4U; index++)
 802ef70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802ef72:	3301      	adds	r3, #1
 802ef74:	65bb      	str	r3, [r7, #88]	; 0x58
 802ef76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802ef78:	2b03      	cmp	r3, #3
 802ef7a:	d9d9      	bls.n	802ef30 <CRYP_Workaround+0xfc>
  }

  if ((hcryp->Instance->CR & AES_CR_MODE) == CRYP_OPERATINGMODE_ENCRYPT)
 802ef7c:	687b      	ldr	r3, [r7, #4]
 802ef7e:	681b      	ldr	r3, [r3, #0]
 802ef80:	681b      	ldr	r3, [r3, #0]
 802ef82:	f003 0318 	and.w	r3, r3, #24
 802ef86:	2b00      	cmp	r3, #0
 802ef88:	f040 81ea 	bne.w	802f360 <CRYP_Workaround+0x52c>
  {
    /* configured  CHMOD GCM   */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_CHMOD, CRYP_AES_GCM_GMAC);
 802ef8c:	687b      	ldr	r3, [r7, #4]
 802ef8e:	681b      	ldr	r3, [r3, #0]
 802ef90:	681b      	ldr	r3, [r3, #0]
 802ef92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802ef96:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 802ef9a:	687a      	ldr	r2, [r7, #4]
 802ef9c:	6812      	ldr	r2, [r2, #0]
 802ef9e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 802efa2:	6013      	str	r3, [r2, #0]

    /* Select final phase */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, CRYP_PHASE_FINAL);
 802efa4:	687b      	ldr	r3, [r7, #4]
 802efa6:	681b      	ldr	r3, [r3, #0]
 802efa8:	681a      	ldr	r2, [r3, #0]
 802efaa:	687b      	ldr	r3, [r7, #4]
 802efac:	681b      	ldr	r3, [r3, #0]
 802efae:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 802efb2:	601a      	str	r2, [r3, #0]

    if ((hcryp->Instance->CR & AES_CR_DATATYPE) == CRYP_DATATYPE_32B)
 802efb4:	687b      	ldr	r3, [r7, #4]
 802efb6:	681b      	ldr	r3, [r3, #0]
 802efb8:	681b      	ldr	r3, [r3, #0]
 802efba:	f003 0306 	and.w	r3, r3, #6
 802efbe:	2b00      	cmp	r3, #0
 802efc0:	d146      	bne.n	802f050 <CRYP_Workaround+0x21c>
    {
      if ((npblb % 4U) == 1U)
 802efc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802efc4:	f003 0303 	and.w	r3, r3, #3
 802efc8:	2b01      	cmp	r3, #1
 802efca:	d111      	bne.n	802eff0 <CRYP_Workaround+0x1bc>
      {
        intermediate_data[lastwordsize - 1U] &= 0xFFFFFF00U;
 802efcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802efce:	3b01      	subs	r3, #1
 802efd0:	009b      	lsls	r3, r3, #2
 802efd2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 802efd6:	4413      	add	r3, r2
 802efd8:	f853 2c58 	ldr.w	r2, [r3, #-88]
 802efdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802efde:	3b01      	subs	r3, #1
 802efe0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 802efe4:	009b      	lsls	r3, r3, #2
 802efe6:	f107 0160 	add.w	r1, r7, #96	; 0x60
 802efea:	440b      	add	r3, r1
 802efec:	f843 2c58 	str.w	r2, [r3, #-88]
      }
      if ((npblb % 4U) == 2U)
 802eff0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802eff2:	f003 0303 	and.w	r3, r3, #3
 802eff6:	2b02      	cmp	r3, #2
 802eff8:	d111      	bne.n	802f01e <CRYP_Workaround+0x1ea>
      {
        intermediate_data[lastwordsize - 1U] &= 0xFFFF0000U;
 802effa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802effc:	3b01      	subs	r3, #1
 802effe:	009b      	lsls	r3, r3, #2
 802f000:	f107 0260 	add.w	r2, r7, #96	; 0x60
 802f004:	4413      	add	r3, r2
 802f006:	f853 2c58 	ldr.w	r2, [r3, #-88]
 802f00a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f00c:	3b01      	subs	r3, #1
 802f00e:	0c12      	lsrs	r2, r2, #16
 802f010:	0412      	lsls	r2, r2, #16
 802f012:	009b      	lsls	r3, r3, #2
 802f014:	f107 0160 	add.w	r1, r7, #96	; 0x60
 802f018:	440b      	add	r3, r1
 802f01a:	f843 2c58 	str.w	r2, [r3, #-88]
      }
      if ((npblb % 4U) == 3U)
 802f01e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802f020:	f003 0303 	and.w	r3, r3, #3
 802f024:	2b03      	cmp	r3, #3
 802f026:	f040 8141 	bne.w	802f2ac <CRYP_Workaround+0x478>
      {
        intermediate_data[lastwordsize - 1U] &= 0xFF000000U;
 802f02a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f02c:	3b01      	subs	r3, #1
 802f02e:	009b      	lsls	r3, r3, #2
 802f030:	f107 0260 	add.w	r2, r7, #96	; 0x60
 802f034:	4413      	add	r3, r2
 802f036:	f853 2c58 	ldr.w	r2, [r3, #-88]
 802f03a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f03c:	3b01      	subs	r3, #1
 802f03e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 802f042:	009b      	lsls	r3, r3, #2
 802f044:	f107 0160 	add.w	r1, r7, #96	; 0x60
 802f048:	440b      	add	r3, r1
 802f04a:	f843 2c58 	str.w	r2, [r3, #-88]
 802f04e:	e12d      	b.n	802f2ac <CRYP_Workaround+0x478>
      }
    }
    else if ((hcryp->Instance->CR & AES_CR_DATATYPE) == CRYP_DATATYPE_8B)
 802f050:	687b      	ldr	r3, [r7, #4]
 802f052:	681b      	ldr	r3, [r3, #0]
 802f054:	681b      	ldr	r3, [r3, #0]
 802f056:	f003 0306 	and.w	r3, r3, #6
 802f05a:	2b04      	cmp	r3, #4
 802f05c:	d151      	bne.n	802f102 <CRYP_Workaround+0x2ce>
    {
      if ((npblb % 4U) == 1U)
 802f05e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802f060:	f003 0303 	and.w	r3, r3, #3
 802f064:	2b01      	cmp	r3, #1
 802f066:	d115      	bne.n	802f094 <CRYP_Workaround+0x260>
 802f068:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 802f06c:	653b      	str	r3, [r7, #80]	; 0x50
  \return               Reversed value
 */
__STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
  return __builtin_bswap32(value);
 802f06e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802f070:	ba19      	rev	r1, r3
      {
        intermediate_data[lastwordsize - 1U] &= __REV(0xFFFFFF00U);
 802f072:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f074:	3b01      	subs	r3, #1
 802f076:	009b      	lsls	r3, r3, #2
 802f078:	f107 0260 	add.w	r2, r7, #96	; 0x60
 802f07c:	4413      	add	r3, r2
 802f07e:	f853 2c58 	ldr.w	r2, [r3, #-88]
 802f082:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f084:	3b01      	subs	r3, #1
 802f086:	400a      	ands	r2, r1
 802f088:	009b      	lsls	r3, r3, #2
 802f08a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 802f08e:	440b      	add	r3, r1
 802f090:	f843 2c58 	str.w	r2, [r3, #-88]
      }
      if ((npblb % 4U) == 2U)
 802f094:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802f096:	f003 0303 	and.w	r3, r3, #3
 802f09a:	2b02      	cmp	r3, #2
 802f09c:	d114      	bne.n	802f0c8 <CRYP_Workaround+0x294>
 802f09e:	4bb2      	ldr	r3, [pc, #712]	; (802f368 <CRYP_Workaround+0x534>)
 802f0a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 802f0a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802f0a4:	ba19      	rev	r1, r3
      {
        intermediate_data[lastwordsize - 1U] &= __REV(0xFFFF0000U);
 802f0a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f0a8:	3b01      	subs	r3, #1
 802f0aa:	009b      	lsls	r3, r3, #2
 802f0ac:	f107 0260 	add.w	r2, r7, #96	; 0x60
 802f0b0:	4413      	add	r3, r2
 802f0b2:	f853 2c58 	ldr.w	r2, [r3, #-88]
 802f0b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f0b8:	3b01      	subs	r3, #1
 802f0ba:	400a      	ands	r2, r1
 802f0bc:	009b      	lsls	r3, r3, #2
 802f0be:	f107 0160 	add.w	r1, r7, #96	; 0x60
 802f0c2:	440b      	add	r3, r1
 802f0c4:	f843 2c58 	str.w	r2, [r3, #-88]
      }
      if ((npblb % 4U) == 3U)
 802f0c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802f0ca:	f003 0303 	and.w	r3, r3, #3
 802f0ce:	2b03      	cmp	r3, #3
 802f0d0:	f040 80ec 	bne.w	802f2ac <CRYP_Workaround+0x478>
 802f0d4:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 802f0d8:	64bb      	str	r3, [r7, #72]	; 0x48
 802f0da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802f0dc:	ba19      	rev	r1, r3
      {
        intermediate_data[lastwordsize - 1U] &= __REV(0xFF000000U);
 802f0de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f0e0:	3b01      	subs	r3, #1
 802f0e2:	009b      	lsls	r3, r3, #2
 802f0e4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 802f0e8:	4413      	add	r3, r2
 802f0ea:	f853 2c58 	ldr.w	r2, [r3, #-88]
 802f0ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f0f0:	3b01      	subs	r3, #1
 802f0f2:	400a      	ands	r2, r1
 802f0f4:	009b      	lsls	r3, r3, #2
 802f0f6:	f107 0160 	add.w	r1, r7, #96	; 0x60
 802f0fa:	440b      	add	r3, r1
 802f0fc:	f843 2c58 	str.w	r2, [r3, #-88]
 802f100:	e0d4      	b.n	802f2ac <CRYP_Workaround+0x478>
      }
    }
    else if ((hcryp->Instance->CR & AES_CR_DATATYPE) == CRYP_DATATYPE_16B)
 802f102:	687b      	ldr	r3, [r7, #4]
 802f104:	681b      	ldr	r3, [r3, #0]
 802f106:	681b      	ldr	r3, [r3, #0]
 802f108:	f003 0306 	and.w	r3, r3, #6
 802f10c:	2b02      	cmp	r3, #2
 802f10e:	d174      	bne.n	802f1fa <CRYP_Workaround+0x3c6>
    {
      if ((npblb % 4U) == 1U)
 802f110:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802f112:	f003 0303 	and.w	r3, r3, #3
 802f116:	2b01      	cmp	r3, #1
 802f118:	d121      	bne.n	802f15e <CRYP_Workaround+0x32a>
 802f11a:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 802f11e:	647b      	str	r3, [r7, #68]	; 0x44
 802f120:	2310      	movs	r3, #16
 802f122:	643b      	str	r3, [r7, #64]	; 0x40
  \param [in]    op2  Number of Bits to rotate
  \return               Rotated value
 */
__STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
{
  op2 %= 32U;
 802f124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802f126:	f003 031f 	and.w	r3, r3, #31
 802f12a:	643b      	str	r3, [r7, #64]	; 0x40
  if (op2 == 0U)
 802f12c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802f12e:	2b00      	cmp	r3, #0
 802f130:	d101      	bne.n	802f136 <CRYP_Workaround+0x302>
  {
    return op1;
 802f132:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802f134:	e002      	b.n	802f13c <CRYP_Workaround+0x308>
  }
  return (op1 >> op2) | (op1 << (32U - op2));
 802f136:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802f138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802f13a:	41da      	rors	r2, r3
      {
        intermediate_data[lastwordsize - 1U] &= __ROR((0xFFFFFF00U), 16);
 802f13c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f13e:	3b01      	subs	r3, #1
 802f140:	009b      	lsls	r3, r3, #2
 802f142:	f107 0160 	add.w	r1, r7, #96	; 0x60
 802f146:	440b      	add	r3, r1
 802f148:	f853 1c58 	ldr.w	r1, [r3, #-88]
 802f14c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f14e:	3b01      	subs	r3, #1
 802f150:	400a      	ands	r2, r1
 802f152:	009b      	lsls	r3, r3, #2
 802f154:	f107 0160 	add.w	r1, r7, #96	; 0x60
 802f158:	440b      	add	r3, r1
 802f15a:	f843 2c58 	str.w	r2, [r3, #-88]
      }
      if ((npblb % 4U) == 2U)
 802f15e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802f160:	f003 0303 	and.w	r3, r3, #3
 802f164:	2b02      	cmp	r3, #2
 802f166:	d120      	bne.n	802f1aa <CRYP_Workaround+0x376>
 802f168:	4b7f      	ldr	r3, [pc, #508]	; (802f368 <CRYP_Workaround+0x534>)
 802f16a:	63fb      	str	r3, [r7, #60]	; 0x3c
 802f16c:	2310      	movs	r3, #16
 802f16e:	63bb      	str	r3, [r7, #56]	; 0x38
  op2 %= 32U;
 802f170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802f172:	f003 031f 	and.w	r3, r3, #31
 802f176:	63bb      	str	r3, [r7, #56]	; 0x38
  if (op2 == 0U)
 802f178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802f17a:	2b00      	cmp	r3, #0
 802f17c:	d101      	bne.n	802f182 <CRYP_Workaround+0x34e>
    return op1;
 802f17e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802f180:	e002      	b.n	802f188 <CRYP_Workaround+0x354>
  return (op1 >> op2) | (op1 << (32U - op2));
 802f182:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802f184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802f186:	41da      	rors	r2, r3
      {
        intermediate_data[lastwordsize - 1U] &= __ROR((0xFFFF0000U), 16);
 802f188:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f18a:	3b01      	subs	r3, #1
 802f18c:	009b      	lsls	r3, r3, #2
 802f18e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 802f192:	440b      	add	r3, r1
 802f194:	f853 1c58 	ldr.w	r1, [r3, #-88]
 802f198:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f19a:	3b01      	subs	r3, #1
 802f19c:	400a      	ands	r2, r1
 802f19e:	009b      	lsls	r3, r3, #2
 802f1a0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 802f1a4:	440b      	add	r3, r1
 802f1a6:	f843 2c58 	str.w	r2, [r3, #-88]
      }
      if ((npblb % 4U) == 3U)
 802f1aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802f1ac:	f003 0303 	and.w	r3, r3, #3
 802f1b0:	2b03      	cmp	r3, #3
 802f1b2:	d17b      	bne.n	802f2ac <CRYP_Workaround+0x478>
 802f1b4:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 802f1b8:	637b      	str	r3, [r7, #52]	; 0x34
 802f1ba:	2310      	movs	r3, #16
 802f1bc:	633b      	str	r3, [r7, #48]	; 0x30
  op2 %= 32U;
 802f1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802f1c0:	f003 031f 	and.w	r3, r3, #31
 802f1c4:	633b      	str	r3, [r7, #48]	; 0x30
  if (op2 == 0U)
 802f1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802f1c8:	2b00      	cmp	r3, #0
 802f1ca:	d101      	bne.n	802f1d0 <CRYP_Workaround+0x39c>
    return op1;
 802f1cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802f1ce:	e002      	b.n	802f1d6 <CRYP_Workaround+0x3a2>
  return (op1 >> op2) | (op1 << (32U - op2));
 802f1d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802f1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802f1d4:	41da      	rors	r2, r3
      {
        intermediate_data[lastwordsize - 1U] &= __ROR((0xFF000000U), 16);
 802f1d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f1d8:	3b01      	subs	r3, #1
 802f1da:	009b      	lsls	r3, r3, #2
 802f1dc:	f107 0160 	add.w	r1, r7, #96	; 0x60
 802f1e0:	440b      	add	r3, r1
 802f1e2:	f853 1c58 	ldr.w	r1, [r3, #-88]
 802f1e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f1e8:	3b01      	subs	r3, #1
 802f1ea:	400a      	ands	r2, r1
 802f1ec:	009b      	lsls	r3, r3, #2
 802f1ee:	f107 0160 	add.w	r1, r7, #96	; 0x60
 802f1f2:	440b      	add	r3, r1
 802f1f4:	f843 2c58 	str.w	r2, [r3, #-88]
 802f1f8:	e058      	b.n	802f2ac <CRYP_Workaround+0x478>
      }
    }
    else /*CRYP_DATATYPE_1B*/
    {
      if ((npblb % 4U) == 1U)
 802f1fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802f1fc:	f003 0303 	and.w	r3, r3, #3
 802f200:	2b01      	cmp	r3, #1
 802f202:	d118      	bne.n	802f236 <CRYP_Workaround+0x402>
 802f204:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 802f208:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 802f20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f20c:	fa93 f3a3 	rbit	r3, r3
 802f210:	62bb      	str	r3, [r7, #40]	; 0x28
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 802f212:	6ab9      	ldr	r1, [r7, #40]	; 0x28
      {
        intermediate_data[lastwordsize - 1U] &= __RBIT(0xFFFFFF00U);
 802f214:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f216:	3b01      	subs	r3, #1
 802f218:	009b      	lsls	r3, r3, #2
 802f21a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 802f21e:	4413      	add	r3, r2
 802f220:	f853 2c58 	ldr.w	r2, [r3, #-88]
 802f224:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f226:	3b01      	subs	r3, #1
 802f228:	400a      	ands	r2, r1
 802f22a:	009b      	lsls	r3, r3, #2
 802f22c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 802f230:	440b      	add	r3, r1
 802f232:	f843 2c58 	str.w	r2, [r3, #-88]
      }
      if ((npblb % 4U) == 2U)
 802f236:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802f238:	f003 0303 	and.w	r3, r3, #3
 802f23c:	2b02      	cmp	r3, #2
 802f23e:	d117      	bne.n	802f270 <CRYP_Workaround+0x43c>
 802f240:	4b49      	ldr	r3, [pc, #292]	; (802f368 <CRYP_Workaround+0x534>)
 802f242:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 802f244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802f246:	fa93 f3a3 	rbit	r3, r3
 802f24a:	623b      	str	r3, [r7, #32]
  return result;
 802f24c:	6a39      	ldr	r1, [r7, #32]
      {
        intermediate_data[lastwordsize - 1U] &= __RBIT(0xFFFF0000U);
 802f24e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f250:	3b01      	subs	r3, #1
 802f252:	009b      	lsls	r3, r3, #2
 802f254:	f107 0260 	add.w	r2, r7, #96	; 0x60
 802f258:	4413      	add	r3, r2
 802f25a:	f853 2c58 	ldr.w	r2, [r3, #-88]
 802f25e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f260:	3b01      	subs	r3, #1
 802f262:	400a      	ands	r2, r1
 802f264:	009b      	lsls	r3, r3, #2
 802f266:	f107 0160 	add.w	r1, r7, #96	; 0x60
 802f26a:	440b      	add	r3, r1
 802f26c:	f843 2c58 	str.w	r2, [r3, #-88]
      }
      if ((npblb % 4U) == 3U)
 802f270:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802f272:	f003 0303 	and.w	r3, r3, #3
 802f276:	2b03      	cmp	r3, #3
 802f278:	d118      	bne.n	802f2ac <CRYP_Workaround+0x478>
 802f27a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 802f27e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 802f280:	69fb      	ldr	r3, [r7, #28]
 802f282:	fa93 f3a3 	rbit	r3, r3
 802f286:	61bb      	str	r3, [r7, #24]
  return result;
 802f288:	69b9      	ldr	r1, [r7, #24]
      {
        intermediate_data[lastwordsize - 1U] &= __RBIT(0xFF000000U);
 802f28a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f28c:	3b01      	subs	r3, #1
 802f28e:	009b      	lsls	r3, r3, #2
 802f290:	f107 0260 	add.w	r2, r7, #96	; 0x60
 802f294:	4413      	add	r3, r2
 802f296:	f853 2c58 	ldr.w	r2, [r3, #-88]
 802f29a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f29c:	3b01      	subs	r3, #1
 802f29e:	400a      	ands	r2, r1
 802f2a0:	009b      	lsls	r3, r3, #2
 802f2a2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 802f2a6:	440b      	add	r3, r1
 802f2a8:	f843 2c58 	str.w	r2, [r3, #-88]
      }
    }

    /*Write the intermediate_data in the IN FIFO */
    for (index = 0U; index < lastwordsize; index ++)
 802f2ac:	2300      	movs	r3, #0
 802f2ae:	65bb      	str	r3, [r7, #88]	; 0x58
 802f2b0:	e00c      	b.n	802f2cc <CRYP_Workaround+0x498>
    {
      hcryp->Instance->DINR  = intermediate_data[index];
 802f2b2:	687b      	ldr	r3, [r7, #4]
 802f2b4:	681a      	ldr	r2, [r3, #0]
 802f2b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802f2b8:	009b      	lsls	r3, r3, #2
 802f2ba:	f107 0160 	add.w	r1, r7, #96	; 0x60
 802f2be:	440b      	add	r3, r1
 802f2c0:	f853 3c58 	ldr.w	r3, [r3, #-88]
 802f2c4:	6093      	str	r3, [r2, #8]
    for (index = 0U; index < lastwordsize; index ++)
 802f2c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802f2c8:	3301      	adds	r3, #1
 802f2ca:	65bb      	str	r3, [r7, #88]	; 0x58
 802f2cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 802f2ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802f2d0:	429a      	cmp	r2, r3
 802f2d2:	d3ee      	bcc.n	802f2b2 <CRYP_Workaround+0x47e>
    }
    while (index < 4U)
 802f2d4:	e006      	b.n	802f2e4 <CRYP_Workaround+0x4b0>
    {
      /* pad the data with zeros to have a complete block */
      hcryp->Instance->DINR = 0U;
 802f2d6:	687b      	ldr	r3, [r7, #4]
 802f2d8:	681b      	ldr	r3, [r3, #0]
 802f2da:	2200      	movs	r2, #0
 802f2dc:	609a      	str	r2, [r3, #8]
      index++;
 802f2de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802f2e0:	3301      	adds	r3, #1
 802f2e2:	65bb      	str	r3, [r7, #88]	; 0x58
    while (index < 4U)
 802f2e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802f2e6:	2b03      	cmp	r3, #3
 802f2e8:	d9f5      	bls.n	802f2d6 <CRYP_Workaround+0x4a2>
    }
    /* Wait for CCF flag to be raised */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 802f2ea:	6839      	ldr	r1, [r7, #0]
 802f2ec:	6878      	ldr	r0, [r7, #4]
 802f2ee:	f000 f83d 	bl	802f36c <CRYP_WaitOnCCFlag>
 802f2f2:	4603      	mov	r3, r0
 802f2f4:	2b00      	cmp	r3, #0
 802f2f6:	d018      	beq.n	802f32a <CRYP_Workaround+0x4f6>
    {
      /* Disable the CRYP peripheral clock */
      __HAL_CRYP_DISABLE(hcryp);
 802f2f8:	687b      	ldr	r3, [r7, #4]
 802f2fa:	681b      	ldr	r3, [r3, #0]
 802f2fc:	681a      	ldr	r2, [r3, #0]
 802f2fe:	687b      	ldr	r3, [r7, #4]
 802f300:	681b      	ldr	r3, [r3, #0]
 802f302:	f022 0201 	bic.w	r2, r2, #1
 802f306:	601a      	str	r2, [r3, #0]

      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 802f308:	687b      	ldr	r3, [r7, #4]
 802f30a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802f30c:	f043 0210 	orr.w	r2, r3, #16
 802f310:	687b      	ldr	r3, [r7, #4]
 802f312:	651a      	str	r2, [r3, #80]	; 0x50
      hcryp->State = HAL_CRYP_STATE_READY;
 802f314:	687b      	ldr	r3, [r7, #4]
 802f316:	2201      	movs	r2, #1
 802f318:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

      /* Process Unlocked */
      __HAL_UNLOCK(hcryp);
 802f31c:	687b      	ldr	r3, [r7, #4]
 802f31e:	2200      	movs	r2, #0
 802f320:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1U)
      /*Call registered error callback*/
      hcryp->ErrorCallback(hcryp);
#else
      /*Call legacy weak error callback*/
      HAL_CRYP_ErrorCallback(hcryp);
 802f324:	6878      	ldr	r0, [r7, #4]
 802f326:	f7fe fdb9 	bl	802de9c <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
    }
    /* Clear CCF Flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 802f32a:	687b      	ldr	r3, [r7, #4]
 802f32c:	681b      	ldr	r3, [r3, #0]
 802f32e:	681a      	ldr	r2, [r3, #0]
 802f330:	687b      	ldr	r3, [r7, #4]
 802f332:	681b      	ldr	r3, [r3, #0]
 802f334:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802f338:	601a      	str	r2, [r3, #0]

    for (index = 0U; index < 4U; index++)
 802f33a:	2300      	movs	r3, #0
 802f33c:	65bb      	str	r3, [r7, #88]	; 0x58
 802f33e:	e00c      	b.n	802f35a <CRYP_Workaround+0x526>
    {
      intermediate_data[index] = hcryp->Instance->DOUTR;
 802f340:	687b      	ldr	r3, [r7, #4]
 802f342:	681b      	ldr	r3, [r3, #0]
 802f344:	68da      	ldr	r2, [r3, #12]
 802f346:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802f348:	009b      	lsls	r3, r3, #2
 802f34a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 802f34e:	440b      	add	r3, r1
 802f350:	f843 2c58 	str.w	r2, [r3, #-88]
    for (index = 0U; index < 4U; index++)
 802f354:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802f356:	3301      	adds	r3, #1
 802f358:	65bb      	str	r3, [r7, #88]	; 0x58
 802f35a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802f35c:	2b03      	cmp	r3, #3
 802f35e:	d9ef      	bls.n	802f340 <CRYP_Workaround+0x50c>
    }
  }/*End of Workaround 2*/
#endif /* End AES or CRYP */
}
 802f360:	bf00      	nop
 802f362:	3760      	adds	r7, #96	; 0x60
 802f364:	46bd      	mov	sp, r7
 802f366:	bd80      	pop	{r7, pc}
 802f368:	ffff0000 	.word	0xffff0000

0802f36c <CRYP_WaitOnCCFlag>:
  *         the configuration information for CRYP module.
  * @param  Timeout: Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_WaitOnCCFlag(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 802f36c:	b580      	push	{r7, lr}
 802f36e:	b084      	sub	sp, #16
 802f370:	af00      	add	r7, sp, #0
 802f372:	6078      	str	r0, [r7, #4]
 802f374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 802f376:	f7fc ff67 	bl	802c248 <HAL_GetTick>
 802f37a:	60f8      	str	r0, [r7, #12]

  while (HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 802f37c:	e010      	b.n	802f3a0 <CRYP_WaitOnCCFlag+0x34>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802f37e:	683b      	ldr	r3, [r7, #0]
 802f380:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 802f384:	d00c      	beq.n	802f3a0 <CRYP_WaitOnCCFlag+0x34>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 802f386:	f7fc ff5f 	bl	802c248 <HAL_GetTick>
 802f38a:	4602      	mov	r2, r0
 802f38c:	68fb      	ldr	r3, [r7, #12]
 802f38e:	1ad3      	subs	r3, r2, r3
 802f390:	683a      	ldr	r2, [r7, #0]
 802f392:	429a      	cmp	r2, r3
 802f394:	d302      	bcc.n	802f39c <CRYP_WaitOnCCFlag+0x30>
 802f396:	683b      	ldr	r3, [r7, #0]
 802f398:	2b00      	cmp	r3, #0
 802f39a:	d101      	bne.n	802f3a0 <CRYP_WaitOnCCFlag+0x34>
      {
        return HAL_ERROR;
 802f39c:	2301      	movs	r3, #1
 802f39e:	e007      	b.n	802f3b0 <CRYP_WaitOnCCFlag+0x44>
  while (HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 802f3a0:	687b      	ldr	r3, [r7, #4]
 802f3a2:	681b      	ldr	r3, [r3, #0]
 802f3a4:	685b      	ldr	r3, [r3, #4]
 802f3a6:	f003 0301 	and.w	r3, r3, #1
 802f3aa:	2b00      	cmp	r3, #0
 802f3ac:	d0e7      	beq.n	802f37e <CRYP_WaitOnCCFlag+0x12>
      }
    }
  }
  return HAL_OK;
 802f3ae:	2300      	movs	r3, #0
}
 802f3b0:	4618      	mov	r0, r3
 802f3b2:	3710      	adds	r7, #16
 802f3b4:	46bd      	mov	sp, r7
 802f3b6:	bd80      	pop	{r7, pc}

0802f3b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 802f3b8:	b580      	push	{r7, lr}
 802f3ba:	b086      	sub	sp, #24
 802f3bc:	af00      	add	r7, sp, #0
 802f3be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 802f3c0:	2300      	movs	r3, #0
 802f3c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 802f3c4:	f7fc ff40 	bl	802c248 <HAL_GetTick>
 802f3c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 802f3ca:	687b      	ldr	r3, [r7, #4]
 802f3cc:	2b00      	cmp	r3, #0
 802f3ce:	d101      	bne.n	802f3d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 802f3d0:	2301      	movs	r3, #1
 802f3d2:	e099      	b.n	802f508 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 802f3d4:	687b      	ldr	r3, [r7, #4]
 802f3d6:	2200      	movs	r2, #0
 802f3d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 802f3dc:	687b      	ldr	r3, [r7, #4]
 802f3de:	2202      	movs	r2, #2
 802f3e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 802f3e4:	687b      	ldr	r3, [r7, #4]
 802f3e6:	681b      	ldr	r3, [r3, #0]
 802f3e8:	681a      	ldr	r2, [r3, #0]
 802f3ea:	687b      	ldr	r3, [r7, #4]
 802f3ec:	681b      	ldr	r3, [r3, #0]
 802f3ee:	f022 0201 	bic.w	r2, r2, #1
 802f3f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 802f3f4:	e00f      	b.n	802f416 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 802f3f6:	f7fc ff27 	bl	802c248 <HAL_GetTick>
 802f3fa:	4602      	mov	r2, r0
 802f3fc:	693b      	ldr	r3, [r7, #16]
 802f3fe:	1ad3      	subs	r3, r2, r3
 802f400:	2b05      	cmp	r3, #5
 802f402:	d908      	bls.n	802f416 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 802f404:	687b      	ldr	r3, [r7, #4]
 802f406:	2220      	movs	r2, #32
 802f408:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 802f40a:	687b      	ldr	r3, [r7, #4]
 802f40c:	2203      	movs	r2, #3
 802f40e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 802f412:	2303      	movs	r3, #3
 802f414:	e078      	b.n	802f508 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 802f416:	687b      	ldr	r3, [r7, #4]
 802f418:	681b      	ldr	r3, [r3, #0]
 802f41a:	681b      	ldr	r3, [r3, #0]
 802f41c:	f003 0301 	and.w	r3, r3, #1
 802f420:	2b00      	cmp	r3, #0
 802f422:	d1e8      	bne.n	802f3f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 802f424:	687b      	ldr	r3, [r7, #4]
 802f426:	681b      	ldr	r3, [r3, #0]
 802f428:	681b      	ldr	r3, [r3, #0]
 802f42a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 802f42c:	697a      	ldr	r2, [r7, #20]
 802f42e:	4b38      	ldr	r3, [pc, #224]	; (802f510 <HAL_DMA_Init+0x158>)
 802f430:	4013      	ands	r3, r2
 802f432:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 802f434:	687b      	ldr	r3, [r7, #4]
 802f436:	685a      	ldr	r2, [r3, #4]
 802f438:	687b      	ldr	r3, [r7, #4]
 802f43a:	689b      	ldr	r3, [r3, #8]
 802f43c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802f43e:	687b      	ldr	r3, [r7, #4]
 802f440:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 802f442:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802f444:	687b      	ldr	r3, [r7, #4]
 802f446:	691b      	ldr	r3, [r3, #16]
 802f448:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802f44a:	687b      	ldr	r3, [r7, #4]
 802f44c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802f44e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802f450:	687b      	ldr	r3, [r7, #4]
 802f452:	699b      	ldr	r3, [r3, #24]
 802f454:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 802f456:	687b      	ldr	r3, [r7, #4]
 802f458:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802f45a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 802f45c:	687b      	ldr	r3, [r7, #4]
 802f45e:	6a1b      	ldr	r3, [r3, #32]
 802f460:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 802f462:	697a      	ldr	r2, [r7, #20]
 802f464:	4313      	orrs	r3, r2
 802f466:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 802f468:	687b      	ldr	r3, [r7, #4]
 802f46a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802f46c:	2b04      	cmp	r3, #4
 802f46e:	d107      	bne.n	802f480 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 802f470:	687b      	ldr	r3, [r7, #4]
 802f472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802f474:	687b      	ldr	r3, [r7, #4]
 802f476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802f478:	4313      	orrs	r3, r2
 802f47a:	697a      	ldr	r2, [r7, #20]
 802f47c:	4313      	orrs	r3, r2
 802f47e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 802f480:	687b      	ldr	r3, [r7, #4]
 802f482:	681b      	ldr	r3, [r3, #0]
 802f484:	697a      	ldr	r2, [r7, #20]
 802f486:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 802f488:	687b      	ldr	r3, [r7, #4]
 802f48a:	681b      	ldr	r3, [r3, #0]
 802f48c:	695b      	ldr	r3, [r3, #20]
 802f48e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 802f490:	697b      	ldr	r3, [r7, #20]
 802f492:	f023 0307 	bic.w	r3, r3, #7
 802f496:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 802f498:	687b      	ldr	r3, [r7, #4]
 802f49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802f49c:	697a      	ldr	r2, [r7, #20]
 802f49e:	4313      	orrs	r3, r2
 802f4a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 802f4a2:	687b      	ldr	r3, [r7, #4]
 802f4a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802f4a6:	2b04      	cmp	r3, #4
 802f4a8:	d117      	bne.n	802f4da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 802f4aa:	687b      	ldr	r3, [r7, #4]
 802f4ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802f4ae:	697a      	ldr	r2, [r7, #20]
 802f4b0:	4313      	orrs	r3, r2
 802f4b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 802f4b4:	687b      	ldr	r3, [r7, #4]
 802f4b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802f4b8:	2b00      	cmp	r3, #0
 802f4ba:	d00e      	beq.n	802f4da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 802f4bc:	6878      	ldr	r0, [r7, #4]
 802f4be:	f000 fa9f 	bl	802fa00 <DMA_CheckFifoParam>
 802f4c2:	4603      	mov	r3, r0
 802f4c4:	2b00      	cmp	r3, #0
 802f4c6:	d008      	beq.n	802f4da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 802f4c8:	687b      	ldr	r3, [r7, #4]
 802f4ca:	2240      	movs	r2, #64	; 0x40
 802f4cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 802f4ce:	687b      	ldr	r3, [r7, #4]
 802f4d0:	2201      	movs	r2, #1
 802f4d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 802f4d6:	2301      	movs	r3, #1
 802f4d8:	e016      	b.n	802f508 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 802f4da:	687b      	ldr	r3, [r7, #4]
 802f4dc:	681b      	ldr	r3, [r3, #0]
 802f4de:	697a      	ldr	r2, [r7, #20]
 802f4e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 802f4e2:	6878      	ldr	r0, [r7, #4]
 802f4e4:	f000 fa56 	bl	802f994 <DMA_CalcBaseAndBitshift>
 802f4e8:	4603      	mov	r3, r0
 802f4ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 802f4ec:	687b      	ldr	r3, [r7, #4]
 802f4ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802f4f0:	223f      	movs	r2, #63	; 0x3f
 802f4f2:	409a      	lsls	r2, r3
 802f4f4:	68fb      	ldr	r3, [r7, #12]
 802f4f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802f4f8:	687b      	ldr	r3, [r7, #4]
 802f4fa:	2200      	movs	r2, #0
 802f4fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 802f4fe:	687b      	ldr	r3, [r7, #4]
 802f500:	2201      	movs	r2, #1
 802f502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 802f506:	2300      	movs	r3, #0
}
 802f508:	4618      	mov	r0, r3
 802f50a:	3718      	adds	r7, #24
 802f50c:	46bd      	mov	sp, r7
 802f50e:	bd80      	pop	{r7, pc}
 802f510:	e010803f 	.word	0xe010803f

0802f514 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 802f514:	b580      	push	{r7, lr}
 802f516:	b086      	sub	sp, #24
 802f518:	af00      	add	r7, sp, #0
 802f51a:	60f8      	str	r0, [r7, #12]
 802f51c:	60b9      	str	r1, [r7, #8]
 802f51e:	607a      	str	r2, [r7, #4]
 802f520:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 802f522:	2300      	movs	r3, #0
 802f524:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802f526:	68fb      	ldr	r3, [r7, #12]
 802f528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802f52a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 802f52c:	68fb      	ldr	r3, [r7, #12]
 802f52e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 802f532:	2b01      	cmp	r3, #1
 802f534:	d101      	bne.n	802f53a <HAL_DMA_Start_IT+0x26>
 802f536:	2302      	movs	r3, #2
 802f538:	e040      	b.n	802f5bc <HAL_DMA_Start_IT+0xa8>
 802f53a:	68fb      	ldr	r3, [r7, #12]
 802f53c:	2201      	movs	r2, #1
 802f53e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 802f542:	68fb      	ldr	r3, [r7, #12]
 802f544:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802f548:	b2db      	uxtb	r3, r3
 802f54a:	2b01      	cmp	r3, #1
 802f54c:	d12f      	bne.n	802f5ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 802f54e:	68fb      	ldr	r3, [r7, #12]
 802f550:	2202      	movs	r2, #2
 802f552:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802f556:	68fb      	ldr	r3, [r7, #12]
 802f558:	2200      	movs	r2, #0
 802f55a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 802f55c:	683b      	ldr	r3, [r7, #0]
 802f55e:	687a      	ldr	r2, [r7, #4]
 802f560:	68b9      	ldr	r1, [r7, #8]
 802f562:	68f8      	ldr	r0, [r7, #12]
 802f564:	f000 f9e8 	bl	802f938 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 802f568:	68fb      	ldr	r3, [r7, #12]
 802f56a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802f56c:	223f      	movs	r2, #63	; 0x3f
 802f56e:	409a      	lsls	r2, r3
 802f570:	693b      	ldr	r3, [r7, #16]
 802f572:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 802f574:	68fb      	ldr	r3, [r7, #12]
 802f576:	681b      	ldr	r3, [r3, #0]
 802f578:	681a      	ldr	r2, [r3, #0]
 802f57a:	68fb      	ldr	r3, [r7, #12]
 802f57c:	681b      	ldr	r3, [r3, #0]
 802f57e:	f042 0216 	orr.w	r2, r2, #22
 802f582:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 802f584:	68fb      	ldr	r3, [r7, #12]
 802f586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802f588:	2b00      	cmp	r3, #0
 802f58a:	d007      	beq.n	802f59c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 802f58c:	68fb      	ldr	r3, [r7, #12]
 802f58e:	681b      	ldr	r3, [r3, #0]
 802f590:	681a      	ldr	r2, [r3, #0]
 802f592:	68fb      	ldr	r3, [r7, #12]
 802f594:	681b      	ldr	r3, [r3, #0]
 802f596:	f042 0208 	orr.w	r2, r2, #8
 802f59a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 802f59c:	68fb      	ldr	r3, [r7, #12]
 802f59e:	681b      	ldr	r3, [r3, #0]
 802f5a0:	681a      	ldr	r2, [r3, #0]
 802f5a2:	68fb      	ldr	r3, [r7, #12]
 802f5a4:	681b      	ldr	r3, [r3, #0]
 802f5a6:	f042 0201 	orr.w	r2, r2, #1
 802f5aa:	601a      	str	r2, [r3, #0]
 802f5ac:	e005      	b.n	802f5ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 802f5ae:	68fb      	ldr	r3, [r7, #12]
 802f5b0:	2200      	movs	r2, #0
 802f5b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 802f5b6:	2302      	movs	r3, #2
 802f5b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 802f5ba:	7dfb      	ldrb	r3, [r7, #23]
}
 802f5bc:	4618      	mov	r0, r3
 802f5be:	3718      	adds	r7, #24
 802f5c0:	46bd      	mov	sp, r7
 802f5c2:	bd80      	pop	{r7, pc}

0802f5c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 802f5c4:	b480      	push	{r7}
 802f5c6:	b083      	sub	sp, #12
 802f5c8:	af00      	add	r7, sp, #0
 802f5ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 802f5cc:	687b      	ldr	r3, [r7, #4]
 802f5ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802f5d2:	b2db      	uxtb	r3, r3
 802f5d4:	2b02      	cmp	r3, #2
 802f5d6:	d004      	beq.n	802f5e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 802f5d8:	687b      	ldr	r3, [r7, #4]
 802f5da:	2280      	movs	r2, #128	; 0x80
 802f5dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 802f5de:	2301      	movs	r3, #1
 802f5e0:	e00c      	b.n	802f5fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 802f5e2:	687b      	ldr	r3, [r7, #4]
 802f5e4:	2205      	movs	r2, #5
 802f5e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 802f5ea:	687b      	ldr	r3, [r7, #4]
 802f5ec:	681b      	ldr	r3, [r3, #0]
 802f5ee:	681a      	ldr	r2, [r3, #0]
 802f5f0:	687b      	ldr	r3, [r7, #4]
 802f5f2:	681b      	ldr	r3, [r3, #0]
 802f5f4:	f022 0201 	bic.w	r2, r2, #1
 802f5f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 802f5fa:	2300      	movs	r3, #0
}
 802f5fc:	4618      	mov	r0, r3
 802f5fe:	370c      	adds	r7, #12
 802f600:	46bd      	mov	sp, r7
 802f602:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f606:	4770      	bx	lr

0802f608 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 802f608:	b580      	push	{r7, lr}
 802f60a:	b086      	sub	sp, #24
 802f60c:	af00      	add	r7, sp, #0
 802f60e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 802f610:	2300      	movs	r3, #0
 802f612:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 802f614:	4b92      	ldr	r3, [pc, #584]	; (802f860 <HAL_DMA_IRQHandler+0x258>)
 802f616:	681b      	ldr	r3, [r3, #0]
 802f618:	4a92      	ldr	r2, [pc, #584]	; (802f864 <HAL_DMA_IRQHandler+0x25c>)
 802f61a:	fba2 2303 	umull	r2, r3, r2, r3
 802f61e:	0a9b      	lsrs	r3, r3, #10
 802f620:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802f622:	687b      	ldr	r3, [r7, #4]
 802f624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802f626:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 802f628:	693b      	ldr	r3, [r7, #16]
 802f62a:	681b      	ldr	r3, [r3, #0]
 802f62c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 802f62e:	687b      	ldr	r3, [r7, #4]
 802f630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802f632:	2208      	movs	r2, #8
 802f634:	409a      	lsls	r2, r3
 802f636:	68fb      	ldr	r3, [r7, #12]
 802f638:	4013      	ands	r3, r2
 802f63a:	2b00      	cmp	r3, #0
 802f63c:	d01a      	beq.n	802f674 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 802f63e:	687b      	ldr	r3, [r7, #4]
 802f640:	681b      	ldr	r3, [r3, #0]
 802f642:	681b      	ldr	r3, [r3, #0]
 802f644:	f003 0304 	and.w	r3, r3, #4
 802f648:	2b00      	cmp	r3, #0
 802f64a:	d013      	beq.n	802f674 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 802f64c:	687b      	ldr	r3, [r7, #4]
 802f64e:	681b      	ldr	r3, [r3, #0]
 802f650:	681a      	ldr	r2, [r3, #0]
 802f652:	687b      	ldr	r3, [r7, #4]
 802f654:	681b      	ldr	r3, [r3, #0]
 802f656:	f022 0204 	bic.w	r2, r2, #4
 802f65a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 802f65c:	687b      	ldr	r3, [r7, #4]
 802f65e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802f660:	2208      	movs	r2, #8
 802f662:	409a      	lsls	r2, r3
 802f664:	693b      	ldr	r3, [r7, #16]
 802f666:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 802f668:	687b      	ldr	r3, [r7, #4]
 802f66a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802f66c:	f043 0201 	orr.w	r2, r3, #1
 802f670:	687b      	ldr	r3, [r7, #4]
 802f672:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 802f674:	687b      	ldr	r3, [r7, #4]
 802f676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802f678:	2201      	movs	r2, #1
 802f67a:	409a      	lsls	r2, r3
 802f67c:	68fb      	ldr	r3, [r7, #12]
 802f67e:	4013      	ands	r3, r2
 802f680:	2b00      	cmp	r3, #0
 802f682:	d012      	beq.n	802f6aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 802f684:	687b      	ldr	r3, [r7, #4]
 802f686:	681b      	ldr	r3, [r3, #0]
 802f688:	695b      	ldr	r3, [r3, #20]
 802f68a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802f68e:	2b00      	cmp	r3, #0
 802f690:	d00b      	beq.n	802f6aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 802f692:	687b      	ldr	r3, [r7, #4]
 802f694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802f696:	2201      	movs	r2, #1
 802f698:	409a      	lsls	r2, r3
 802f69a:	693b      	ldr	r3, [r7, #16]
 802f69c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 802f69e:	687b      	ldr	r3, [r7, #4]
 802f6a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802f6a2:	f043 0202 	orr.w	r2, r3, #2
 802f6a6:	687b      	ldr	r3, [r7, #4]
 802f6a8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 802f6aa:	687b      	ldr	r3, [r7, #4]
 802f6ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802f6ae:	2204      	movs	r2, #4
 802f6b0:	409a      	lsls	r2, r3
 802f6b2:	68fb      	ldr	r3, [r7, #12]
 802f6b4:	4013      	ands	r3, r2
 802f6b6:	2b00      	cmp	r3, #0
 802f6b8:	d012      	beq.n	802f6e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 802f6ba:	687b      	ldr	r3, [r7, #4]
 802f6bc:	681b      	ldr	r3, [r3, #0]
 802f6be:	681b      	ldr	r3, [r3, #0]
 802f6c0:	f003 0302 	and.w	r3, r3, #2
 802f6c4:	2b00      	cmp	r3, #0
 802f6c6:	d00b      	beq.n	802f6e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 802f6c8:	687b      	ldr	r3, [r7, #4]
 802f6ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802f6cc:	2204      	movs	r2, #4
 802f6ce:	409a      	lsls	r2, r3
 802f6d0:	693b      	ldr	r3, [r7, #16]
 802f6d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 802f6d4:	687b      	ldr	r3, [r7, #4]
 802f6d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802f6d8:	f043 0204 	orr.w	r2, r3, #4
 802f6dc:	687b      	ldr	r3, [r7, #4]
 802f6de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 802f6e0:	687b      	ldr	r3, [r7, #4]
 802f6e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802f6e4:	2210      	movs	r2, #16
 802f6e6:	409a      	lsls	r2, r3
 802f6e8:	68fb      	ldr	r3, [r7, #12]
 802f6ea:	4013      	ands	r3, r2
 802f6ec:	2b00      	cmp	r3, #0
 802f6ee:	d043      	beq.n	802f778 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 802f6f0:	687b      	ldr	r3, [r7, #4]
 802f6f2:	681b      	ldr	r3, [r3, #0]
 802f6f4:	681b      	ldr	r3, [r3, #0]
 802f6f6:	f003 0308 	and.w	r3, r3, #8
 802f6fa:	2b00      	cmp	r3, #0
 802f6fc:	d03c      	beq.n	802f778 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 802f6fe:	687b      	ldr	r3, [r7, #4]
 802f700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802f702:	2210      	movs	r2, #16
 802f704:	409a      	lsls	r2, r3
 802f706:	693b      	ldr	r3, [r7, #16]
 802f708:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 802f70a:	687b      	ldr	r3, [r7, #4]
 802f70c:	681b      	ldr	r3, [r3, #0]
 802f70e:	681b      	ldr	r3, [r3, #0]
 802f710:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802f714:	2b00      	cmp	r3, #0
 802f716:	d018      	beq.n	802f74a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 802f718:	687b      	ldr	r3, [r7, #4]
 802f71a:	681b      	ldr	r3, [r3, #0]
 802f71c:	681b      	ldr	r3, [r3, #0]
 802f71e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802f722:	2b00      	cmp	r3, #0
 802f724:	d108      	bne.n	802f738 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 802f726:	687b      	ldr	r3, [r7, #4]
 802f728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802f72a:	2b00      	cmp	r3, #0
 802f72c:	d024      	beq.n	802f778 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 802f72e:	687b      	ldr	r3, [r7, #4]
 802f730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802f732:	6878      	ldr	r0, [r7, #4]
 802f734:	4798      	blx	r3
 802f736:	e01f      	b.n	802f778 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 802f738:	687b      	ldr	r3, [r7, #4]
 802f73a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802f73c:	2b00      	cmp	r3, #0
 802f73e:	d01b      	beq.n	802f778 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 802f740:	687b      	ldr	r3, [r7, #4]
 802f742:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802f744:	6878      	ldr	r0, [r7, #4]
 802f746:	4798      	blx	r3
 802f748:	e016      	b.n	802f778 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 802f74a:	687b      	ldr	r3, [r7, #4]
 802f74c:	681b      	ldr	r3, [r3, #0]
 802f74e:	681b      	ldr	r3, [r3, #0]
 802f750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802f754:	2b00      	cmp	r3, #0
 802f756:	d107      	bne.n	802f768 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 802f758:	687b      	ldr	r3, [r7, #4]
 802f75a:	681b      	ldr	r3, [r3, #0]
 802f75c:	681a      	ldr	r2, [r3, #0]
 802f75e:	687b      	ldr	r3, [r7, #4]
 802f760:	681b      	ldr	r3, [r3, #0]
 802f762:	f022 0208 	bic.w	r2, r2, #8
 802f766:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 802f768:	687b      	ldr	r3, [r7, #4]
 802f76a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802f76c:	2b00      	cmp	r3, #0
 802f76e:	d003      	beq.n	802f778 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 802f770:	687b      	ldr	r3, [r7, #4]
 802f772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802f774:	6878      	ldr	r0, [r7, #4]
 802f776:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 802f778:	687b      	ldr	r3, [r7, #4]
 802f77a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802f77c:	2220      	movs	r2, #32
 802f77e:	409a      	lsls	r2, r3
 802f780:	68fb      	ldr	r3, [r7, #12]
 802f782:	4013      	ands	r3, r2
 802f784:	2b00      	cmp	r3, #0
 802f786:	f000 808e 	beq.w	802f8a6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 802f78a:	687b      	ldr	r3, [r7, #4]
 802f78c:	681b      	ldr	r3, [r3, #0]
 802f78e:	681b      	ldr	r3, [r3, #0]
 802f790:	f003 0310 	and.w	r3, r3, #16
 802f794:	2b00      	cmp	r3, #0
 802f796:	f000 8086 	beq.w	802f8a6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 802f79a:	687b      	ldr	r3, [r7, #4]
 802f79c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802f79e:	2220      	movs	r2, #32
 802f7a0:	409a      	lsls	r2, r3
 802f7a2:	693b      	ldr	r3, [r7, #16]
 802f7a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 802f7a6:	687b      	ldr	r3, [r7, #4]
 802f7a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802f7ac:	b2db      	uxtb	r3, r3
 802f7ae:	2b05      	cmp	r3, #5
 802f7b0:	d136      	bne.n	802f820 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 802f7b2:	687b      	ldr	r3, [r7, #4]
 802f7b4:	681b      	ldr	r3, [r3, #0]
 802f7b6:	681a      	ldr	r2, [r3, #0]
 802f7b8:	687b      	ldr	r3, [r7, #4]
 802f7ba:	681b      	ldr	r3, [r3, #0]
 802f7bc:	f022 0216 	bic.w	r2, r2, #22
 802f7c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 802f7c2:	687b      	ldr	r3, [r7, #4]
 802f7c4:	681b      	ldr	r3, [r3, #0]
 802f7c6:	695a      	ldr	r2, [r3, #20]
 802f7c8:	687b      	ldr	r3, [r7, #4]
 802f7ca:	681b      	ldr	r3, [r3, #0]
 802f7cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802f7d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 802f7d2:	687b      	ldr	r3, [r7, #4]
 802f7d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802f7d6:	2b00      	cmp	r3, #0
 802f7d8:	d103      	bne.n	802f7e2 <HAL_DMA_IRQHandler+0x1da>
 802f7da:	687b      	ldr	r3, [r7, #4]
 802f7dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802f7de:	2b00      	cmp	r3, #0
 802f7e0:	d007      	beq.n	802f7f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 802f7e2:	687b      	ldr	r3, [r7, #4]
 802f7e4:	681b      	ldr	r3, [r3, #0]
 802f7e6:	681a      	ldr	r2, [r3, #0]
 802f7e8:	687b      	ldr	r3, [r7, #4]
 802f7ea:	681b      	ldr	r3, [r3, #0]
 802f7ec:	f022 0208 	bic.w	r2, r2, #8
 802f7f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 802f7f2:	687b      	ldr	r3, [r7, #4]
 802f7f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802f7f6:	223f      	movs	r2, #63	; 0x3f
 802f7f8:	409a      	lsls	r2, r3
 802f7fa:	693b      	ldr	r3, [r7, #16]
 802f7fc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 802f7fe:	687b      	ldr	r3, [r7, #4]
 802f800:	2200      	movs	r2, #0
 802f802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 802f806:	687b      	ldr	r3, [r7, #4]
 802f808:	2201      	movs	r2, #1
 802f80a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 802f80e:	687b      	ldr	r3, [r7, #4]
 802f810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802f812:	2b00      	cmp	r3, #0
 802f814:	d07d      	beq.n	802f912 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 802f816:	687b      	ldr	r3, [r7, #4]
 802f818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802f81a:	6878      	ldr	r0, [r7, #4]
 802f81c:	4798      	blx	r3
        }
        return;
 802f81e:	e078      	b.n	802f912 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 802f820:	687b      	ldr	r3, [r7, #4]
 802f822:	681b      	ldr	r3, [r3, #0]
 802f824:	681b      	ldr	r3, [r3, #0]
 802f826:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802f82a:	2b00      	cmp	r3, #0
 802f82c:	d01c      	beq.n	802f868 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 802f82e:	687b      	ldr	r3, [r7, #4]
 802f830:	681b      	ldr	r3, [r3, #0]
 802f832:	681b      	ldr	r3, [r3, #0]
 802f834:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802f838:	2b00      	cmp	r3, #0
 802f83a:	d108      	bne.n	802f84e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 802f83c:	687b      	ldr	r3, [r7, #4]
 802f83e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802f840:	2b00      	cmp	r3, #0
 802f842:	d030      	beq.n	802f8a6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 802f844:	687b      	ldr	r3, [r7, #4]
 802f846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802f848:	6878      	ldr	r0, [r7, #4]
 802f84a:	4798      	blx	r3
 802f84c:	e02b      	b.n	802f8a6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 802f84e:	687b      	ldr	r3, [r7, #4]
 802f850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f852:	2b00      	cmp	r3, #0
 802f854:	d027      	beq.n	802f8a6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 802f856:	687b      	ldr	r3, [r7, #4]
 802f858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f85a:	6878      	ldr	r0, [r7, #4]
 802f85c:	4798      	blx	r3
 802f85e:	e022      	b.n	802f8a6 <HAL_DMA_IRQHandler+0x29e>
 802f860:	20000294 	.word	0x20000294
 802f864:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 802f868:	687b      	ldr	r3, [r7, #4]
 802f86a:	681b      	ldr	r3, [r3, #0]
 802f86c:	681b      	ldr	r3, [r3, #0]
 802f86e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802f872:	2b00      	cmp	r3, #0
 802f874:	d10f      	bne.n	802f896 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 802f876:	687b      	ldr	r3, [r7, #4]
 802f878:	681b      	ldr	r3, [r3, #0]
 802f87a:	681a      	ldr	r2, [r3, #0]
 802f87c:	687b      	ldr	r3, [r7, #4]
 802f87e:	681b      	ldr	r3, [r3, #0]
 802f880:	f022 0210 	bic.w	r2, r2, #16
 802f884:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 802f886:	687b      	ldr	r3, [r7, #4]
 802f888:	2200      	movs	r2, #0
 802f88a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 802f88e:	687b      	ldr	r3, [r7, #4]
 802f890:	2201      	movs	r2, #1
 802f892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 802f896:	687b      	ldr	r3, [r7, #4]
 802f898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f89a:	2b00      	cmp	r3, #0
 802f89c:	d003      	beq.n	802f8a6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 802f89e:	687b      	ldr	r3, [r7, #4]
 802f8a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f8a2:	6878      	ldr	r0, [r7, #4]
 802f8a4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 802f8a6:	687b      	ldr	r3, [r7, #4]
 802f8a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802f8aa:	2b00      	cmp	r3, #0
 802f8ac:	d032      	beq.n	802f914 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 802f8ae:	687b      	ldr	r3, [r7, #4]
 802f8b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802f8b2:	f003 0301 	and.w	r3, r3, #1
 802f8b6:	2b00      	cmp	r3, #0
 802f8b8:	d022      	beq.n	802f900 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 802f8ba:	687b      	ldr	r3, [r7, #4]
 802f8bc:	2205      	movs	r2, #5
 802f8be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 802f8c2:	687b      	ldr	r3, [r7, #4]
 802f8c4:	681b      	ldr	r3, [r3, #0]
 802f8c6:	681a      	ldr	r2, [r3, #0]
 802f8c8:	687b      	ldr	r3, [r7, #4]
 802f8ca:	681b      	ldr	r3, [r3, #0]
 802f8cc:	f022 0201 	bic.w	r2, r2, #1
 802f8d0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 802f8d2:	68bb      	ldr	r3, [r7, #8]
 802f8d4:	3301      	adds	r3, #1
 802f8d6:	60bb      	str	r3, [r7, #8]
 802f8d8:	697a      	ldr	r2, [r7, #20]
 802f8da:	429a      	cmp	r2, r3
 802f8dc:	d307      	bcc.n	802f8ee <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 802f8de:	687b      	ldr	r3, [r7, #4]
 802f8e0:	681b      	ldr	r3, [r3, #0]
 802f8e2:	681b      	ldr	r3, [r3, #0]
 802f8e4:	f003 0301 	and.w	r3, r3, #1
 802f8e8:	2b00      	cmp	r3, #0
 802f8ea:	d1f2      	bne.n	802f8d2 <HAL_DMA_IRQHandler+0x2ca>
 802f8ec:	e000      	b.n	802f8f0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 802f8ee:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 802f8f0:	687b      	ldr	r3, [r7, #4]
 802f8f2:	2200      	movs	r2, #0
 802f8f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 802f8f8:	687b      	ldr	r3, [r7, #4]
 802f8fa:	2201      	movs	r2, #1
 802f8fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 802f900:	687b      	ldr	r3, [r7, #4]
 802f902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802f904:	2b00      	cmp	r3, #0
 802f906:	d005      	beq.n	802f914 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 802f908:	687b      	ldr	r3, [r7, #4]
 802f90a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802f90c:	6878      	ldr	r0, [r7, #4]
 802f90e:	4798      	blx	r3
 802f910:	e000      	b.n	802f914 <HAL_DMA_IRQHandler+0x30c>
        return;
 802f912:	bf00      	nop
    }
  }
}
 802f914:	3718      	adds	r7, #24
 802f916:	46bd      	mov	sp, r7
 802f918:	bd80      	pop	{r7, pc}
 802f91a:	bf00      	nop

0802f91c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 802f91c:	b480      	push	{r7}
 802f91e:	b083      	sub	sp, #12
 802f920:	af00      	add	r7, sp, #0
 802f922:	6078      	str	r0, [r7, #4]
  return hdma->State;
 802f924:	687b      	ldr	r3, [r7, #4]
 802f926:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802f92a:	b2db      	uxtb	r3, r3
}
 802f92c:	4618      	mov	r0, r3
 802f92e:	370c      	adds	r7, #12
 802f930:	46bd      	mov	sp, r7
 802f932:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f936:	4770      	bx	lr

0802f938 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 802f938:	b480      	push	{r7}
 802f93a:	b085      	sub	sp, #20
 802f93c:	af00      	add	r7, sp, #0
 802f93e:	60f8      	str	r0, [r7, #12]
 802f940:	60b9      	str	r1, [r7, #8]
 802f942:	607a      	str	r2, [r7, #4]
 802f944:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 802f946:	68fb      	ldr	r3, [r7, #12]
 802f948:	681b      	ldr	r3, [r3, #0]
 802f94a:	681a      	ldr	r2, [r3, #0]
 802f94c:	68fb      	ldr	r3, [r7, #12]
 802f94e:	681b      	ldr	r3, [r3, #0]
 802f950:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 802f954:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 802f956:	68fb      	ldr	r3, [r7, #12]
 802f958:	681b      	ldr	r3, [r3, #0]
 802f95a:	683a      	ldr	r2, [r7, #0]
 802f95c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 802f95e:	68fb      	ldr	r3, [r7, #12]
 802f960:	689b      	ldr	r3, [r3, #8]
 802f962:	2b40      	cmp	r3, #64	; 0x40
 802f964:	d108      	bne.n	802f978 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 802f966:	68fb      	ldr	r3, [r7, #12]
 802f968:	681b      	ldr	r3, [r3, #0]
 802f96a:	687a      	ldr	r2, [r7, #4]
 802f96c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 802f96e:	68fb      	ldr	r3, [r7, #12]
 802f970:	681b      	ldr	r3, [r3, #0]
 802f972:	68ba      	ldr	r2, [r7, #8]
 802f974:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 802f976:	e007      	b.n	802f988 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 802f978:	68fb      	ldr	r3, [r7, #12]
 802f97a:	681b      	ldr	r3, [r3, #0]
 802f97c:	68ba      	ldr	r2, [r7, #8]
 802f97e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 802f980:	68fb      	ldr	r3, [r7, #12]
 802f982:	681b      	ldr	r3, [r3, #0]
 802f984:	687a      	ldr	r2, [r7, #4]
 802f986:	60da      	str	r2, [r3, #12]
}
 802f988:	bf00      	nop
 802f98a:	3714      	adds	r7, #20
 802f98c:	46bd      	mov	sp, r7
 802f98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f992:	4770      	bx	lr

0802f994 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 802f994:	b480      	push	{r7}
 802f996:	b085      	sub	sp, #20
 802f998:	af00      	add	r7, sp, #0
 802f99a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 802f99c:	687b      	ldr	r3, [r7, #4]
 802f99e:	681b      	ldr	r3, [r3, #0]
 802f9a0:	b2db      	uxtb	r3, r3
 802f9a2:	3b10      	subs	r3, #16
 802f9a4:	4a14      	ldr	r2, [pc, #80]	; (802f9f8 <DMA_CalcBaseAndBitshift+0x64>)
 802f9a6:	fba2 2303 	umull	r2, r3, r2, r3
 802f9aa:	091b      	lsrs	r3, r3, #4
 802f9ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 802f9ae:	4a13      	ldr	r2, [pc, #76]	; (802f9fc <DMA_CalcBaseAndBitshift+0x68>)
 802f9b0:	68fb      	ldr	r3, [r7, #12]
 802f9b2:	4413      	add	r3, r2
 802f9b4:	781b      	ldrb	r3, [r3, #0]
 802f9b6:	461a      	mov	r2, r3
 802f9b8:	687b      	ldr	r3, [r7, #4]
 802f9ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 802f9bc:	68fb      	ldr	r3, [r7, #12]
 802f9be:	2b03      	cmp	r3, #3
 802f9c0:	d909      	bls.n	802f9d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 802f9c2:	687b      	ldr	r3, [r7, #4]
 802f9c4:	681b      	ldr	r3, [r3, #0]
 802f9c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 802f9ca:	f023 0303 	bic.w	r3, r3, #3
 802f9ce:	1d1a      	adds	r2, r3, #4
 802f9d0:	687b      	ldr	r3, [r7, #4]
 802f9d2:	659a      	str	r2, [r3, #88]	; 0x58
 802f9d4:	e007      	b.n	802f9e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 802f9d6:	687b      	ldr	r3, [r7, #4]
 802f9d8:	681b      	ldr	r3, [r3, #0]
 802f9da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 802f9de:	f023 0303 	bic.w	r3, r3, #3
 802f9e2:	687a      	ldr	r2, [r7, #4]
 802f9e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 802f9e6:	687b      	ldr	r3, [r7, #4]
 802f9e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 802f9ea:	4618      	mov	r0, r3
 802f9ec:	3714      	adds	r7, #20
 802f9ee:	46bd      	mov	sp, r7
 802f9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f9f4:	4770      	bx	lr
 802f9f6:	bf00      	nop
 802f9f8:	aaaaaaab 	.word	0xaaaaaaab
 802f9fc:	0805634c 	.word	0x0805634c

0802fa00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 802fa00:	b480      	push	{r7}
 802fa02:	b085      	sub	sp, #20
 802fa04:	af00      	add	r7, sp, #0
 802fa06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 802fa08:	2300      	movs	r3, #0
 802fa0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 802fa0c:	687b      	ldr	r3, [r7, #4]
 802fa0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802fa10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 802fa12:	687b      	ldr	r3, [r7, #4]
 802fa14:	699b      	ldr	r3, [r3, #24]
 802fa16:	2b00      	cmp	r3, #0
 802fa18:	d11f      	bne.n	802fa5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 802fa1a:	68bb      	ldr	r3, [r7, #8]
 802fa1c:	2b03      	cmp	r3, #3
 802fa1e:	d855      	bhi.n	802facc <DMA_CheckFifoParam+0xcc>
 802fa20:	a201      	add	r2, pc, #4	; (adr r2, 802fa28 <DMA_CheckFifoParam+0x28>)
 802fa22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802fa26:	bf00      	nop
 802fa28:	0802fa39 	.word	0x0802fa39
 802fa2c:	0802fa4b 	.word	0x0802fa4b
 802fa30:	0802fa39 	.word	0x0802fa39
 802fa34:	0802facd 	.word	0x0802facd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802fa38:	687b      	ldr	r3, [r7, #4]
 802fa3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802fa3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802fa40:	2b00      	cmp	r3, #0
 802fa42:	d045      	beq.n	802fad0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 802fa44:	2301      	movs	r3, #1
 802fa46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 802fa48:	e042      	b.n	802fad0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 802fa4a:	687b      	ldr	r3, [r7, #4]
 802fa4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802fa4e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 802fa52:	d13f      	bne.n	802fad4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 802fa54:	2301      	movs	r3, #1
 802fa56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 802fa58:	e03c      	b.n	802fad4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 802fa5a:	687b      	ldr	r3, [r7, #4]
 802fa5c:	699b      	ldr	r3, [r3, #24]
 802fa5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802fa62:	d121      	bne.n	802faa8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 802fa64:	68bb      	ldr	r3, [r7, #8]
 802fa66:	2b03      	cmp	r3, #3
 802fa68:	d836      	bhi.n	802fad8 <DMA_CheckFifoParam+0xd8>
 802fa6a:	a201      	add	r2, pc, #4	; (adr r2, 802fa70 <DMA_CheckFifoParam+0x70>)
 802fa6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802fa70:	0802fa81 	.word	0x0802fa81
 802fa74:	0802fa87 	.word	0x0802fa87
 802fa78:	0802fa81 	.word	0x0802fa81
 802fa7c:	0802fa99 	.word	0x0802fa99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 802fa80:	2301      	movs	r3, #1
 802fa82:	73fb      	strb	r3, [r7, #15]
      break;
 802fa84:	e02f      	b.n	802fae6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802fa86:	687b      	ldr	r3, [r7, #4]
 802fa88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802fa8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802fa8e:	2b00      	cmp	r3, #0
 802fa90:	d024      	beq.n	802fadc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 802fa92:	2301      	movs	r3, #1
 802fa94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 802fa96:	e021      	b.n	802fadc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 802fa98:	687b      	ldr	r3, [r7, #4]
 802fa9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802fa9c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 802faa0:	d11e      	bne.n	802fae0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 802faa2:	2301      	movs	r3, #1
 802faa4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 802faa6:	e01b      	b.n	802fae0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 802faa8:	68bb      	ldr	r3, [r7, #8]
 802faaa:	2b02      	cmp	r3, #2
 802faac:	d902      	bls.n	802fab4 <DMA_CheckFifoParam+0xb4>
 802faae:	2b03      	cmp	r3, #3
 802fab0:	d003      	beq.n	802faba <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 802fab2:	e018      	b.n	802fae6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 802fab4:	2301      	movs	r3, #1
 802fab6:	73fb      	strb	r3, [r7, #15]
      break;
 802fab8:	e015      	b.n	802fae6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802faba:	687b      	ldr	r3, [r7, #4]
 802fabc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802fabe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802fac2:	2b00      	cmp	r3, #0
 802fac4:	d00e      	beq.n	802fae4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 802fac6:	2301      	movs	r3, #1
 802fac8:	73fb      	strb	r3, [r7, #15]
      break;
 802faca:	e00b      	b.n	802fae4 <DMA_CheckFifoParam+0xe4>
      break;
 802facc:	bf00      	nop
 802face:	e00a      	b.n	802fae6 <DMA_CheckFifoParam+0xe6>
      break;
 802fad0:	bf00      	nop
 802fad2:	e008      	b.n	802fae6 <DMA_CheckFifoParam+0xe6>
      break;
 802fad4:	bf00      	nop
 802fad6:	e006      	b.n	802fae6 <DMA_CheckFifoParam+0xe6>
      break;
 802fad8:	bf00      	nop
 802fada:	e004      	b.n	802fae6 <DMA_CheckFifoParam+0xe6>
      break;
 802fadc:	bf00      	nop
 802fade:	e002      	b.n	802fae6 <DMA_CheckFifoParam+0xe6>
      break;   
 802fae0:	bf00      	nop
 802fae2:	e000      	b.n	802fae6 <DMA_CheckFifoParam+0xe6>
      break;
 802fae4:	bf00      	nop
    }
  } 
  
  return status; 
 802fae6:	7bfb      	ldrb	r3, [r7, #15]
}
 802fae8:	4618      	mov	r0, r3
 802faea:	3714      	adds	r7, #20
 802faec:	46bd      	mov	sp, r7
 802faee:	f85d 7b04 	ldr.w	r7, [sp], #4
 802faf2:	4770      	bx	lr

0802faf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 802faf4:	b480      	push	{r7}
 802faf6:	b089      	sub	sp, #36	; 0x24
 802faf8:	af00      	add	r7, sp, #0
 802fafa:	6078      	str	r0, [r7, #4]
 802fafc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 802fafe:	2300      	movs	r3, #0
 802fb00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 802fb02:	2300      	movs	r3, #0
 802fb04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 802fb06:	2300      	movs	r3, #0
 802fb08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 802fb0a:	2300      	movs	r3, #0
 802fb0c:	61fb      	str	r3, [r7, #28]
 802fb0e:	e165      	b.n	802fddc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 802fb10:	2201      	movs	r2, #1
 802fb12:	69fb      	ldr	r3, [r7, #28]
 802fb14:	fa02 f303 	lsl.w	r3, r2, r3
 802fb18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 802fb1a:	683b      	ldr	r3, [r7, #0]
 802fb1c:	681b      	ldr	r3, [r3, #0]
 802fb1e:	697a      	ldr	r2, [r7, #20]
 802fb20:	4013      	ands	r3, r2
 802fb22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 802fb24:	693a      	ldr	r2, [r7, #16]
 802fb26:	697b      	ldr	r3, [r7, #20]
 802fb28:	429a      	cmp	r2, r3
 802fb2a:	f040 8154 	bne.w	802fdd6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 802fb2e:	683b      	ldr	r3, [r7, #0]
 802fb30:	685b      	ldr	r3, [r3, #4]
 802fb32:	2b01      	cmp	r3, #1
 802fb34:	d00b      	beq.n	802fb4e <HAL_GPIO_Init+0x5a>
 802fb36:	683b      	ldr	r3, [r7, #0]
 802fb38:	685b      	ldr	r3, [r3, #4]
 802fb3a:	2b02      	cmp	r3, #2
 802fb3c:	d007      	beq.n	802fb4e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 802fb3e:	683b      	ldr	r3, [r7, #0]
 802fb40:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 802fb42:	2b11      	cmp	r3, #17
 802fb44:	d003      	beq.n	802fb4e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 802fb46:	683b      	ldr	r3, [r7, #0]
 802fb48:	685b      	ldr	r3, [r3, #4]
 802fb4a:	2b12      	cmp	r3, #18
 802fb4c:	d130      	bne.n	802fbb0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 802fb4e:	687b      	ldr	r3, [r7, #4]
 802fb50:	689b      	ldr	r3, [r3, #8]
 802fb52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 802fb54:	69fb      	ldr	r3, [r7, #28]
 802fb56:	005b      	lsls	r3, r3, #1
 802fb58:	2203      	movs	r2, #3
 802fb5a:	fa02 f303 	lsl.w	r3, r2, r3
 802fb5e:	43db      	mvns	r3, r3
 802fb60:	69ba      	ldr	r2, [r7, #24]
 802fb62:	4013      	ands	r3, r2
 802fb64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 802fb66:	683b      	ldr	r3, [r7, #0]
 802fb68:	68da      	ldr	r2, [r3, #12]
 802fb6a:	69fb      	ldr	r3, [r7, #28]
 802fb6c:	005b      	lsls	r3, r3, #1
 802fb6e:	fa02 f303 	lsl.w	r3, r2, r3
 802fb72:	69ba      	ldr	r2, [r7, #24]
 802fb74:	4313      	orrs	r3, r2
 802fb76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 802fb78:	687b      	ldr	r3, [r7, #4]
 802fb7a:	69ba      	ldr	r2, [r7, #24]
 802fb7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 802fb7e:	687b      	ldr	r3, [r7, #4]
 802fb80:	685b      	ldr	r3, [r3, #4]
 802fb82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 802fb84:	2201      	movs	r2, #1
 802fb86:	69fb      	ldr	r3, [r7, #28]
 802fb88:	fa02 f303 	lsl.w	r3, r2, r3
 802fb8c:	43db      	mvns	r3, r3
 802fb8e:	69ba      	ldr	r2, [r7, #24]
 802fb90:	4013      	ands	r3, r2
 802fb92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 802fb94:	683b      	ldr	r3, [r7, #0]
 802fb96:	685b      	ldr	r3, [r3, #4]
 802fb98:	091b      	lsrs	r3, r3, #4
 802fb9a:	f003 0201 	and.w	r2, r3, #1
 802fb9e:	69fb      	ldr	r3, [r7, #28]
 802fba0:	fa02 f303 	lsl.w	r3, r2, r3
 802fba4:	69ba      	ldr	r2, [r7, #24]
 802fba6:	4313      	orrs	r3, r2
 802fba8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 802fbaa:	687b      	ldr	r3, [r7, #4]
 802fbac:	69ba      	ldr	r2, [r7, #24]
 802fbae:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 802fbb0:	687b      	ldr	r3, [r7, #4]
 802fbb2:	68db      	ldr	r3, [r3, #12]
 802fbb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 802fbb6:	69fb      	ldr	r3, [r7, #28]
 802fbb8:	005b      	lsls	r3, r3, #1
 802fbba:	2203      	movs	r2, #3
 802fbbc:	fa02 f303 	lsl.w	r3, r2, r3
 802fbc0:	43db      	mvns	r3, r3
 802fbc2:	69ba      	ldr	r2, [r7, #24]
 802fbc4:	4013      	ands	r3, r2
 802fbc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 802fbc8:	683b      	ldr	r3, [r7, #0]
 802fbca:	689a      	ldr	r2, [r3, #8]
 802fbcc:	69fb      	ldr	r3, [r7, #28]
 802fbce:	005b      	lsls	r3, r3, #1
 802fbd0:	fa02 f303 	lsl.w	r3, r2, r3
 802fbd4:	69ba      	ldr	r2, [r7, #24]
 802fbd6:	4313      	orrs	r3, r2
 802fbd8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 802fbda:	687b      	ldr	r3, [r7, #4]
 802fbdc:	69ba      	ldr	r2, [r7, #24]
 802fbde:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 802fbe0:	683b      	ldr	r3, [r7, #0]
 802fbe2:	685b      	ldr	r3, [r3, #4]
 802fbe4:	2b02      	cmp	r3, #2
 802fbe6:	d003      	beq.n	802fbf0 <HAL_GPIO_Init+0xfc>
 802fbe8:	683b      	ldr	r3, [r7, #0]
 802fbea:	685b      	ldr	r3, [r3, #4]
 802fbec:	2b12      	cmp	r3, #18
 802fbee:	d123      	bne.n	802fc38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 802fbf0:	69fb      	ldr	r3, [r7, #28]
 802fbf2:	08da      	lsrs	r2, r3, #3
 802fbf4:	687b      	ldr	r3, [r7, #4]
 802fbf6:	3208      	adds	r2, #8
 802fbf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802fbfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 802fbfe:	69fb      	ldr	r3, [r7, #28]
 802fc00:	f003 0307 	and.w	r3, r3, #7
 802fc04:	009b      	lsls	r3, r3, #2
 802fc06:	220f      	movs	r2, #15
 802fc08:	fa02 f303 	lsl.w	r3, r2, r3
 802fc0c:	43db      	mvns	r3, r3
 802fc0e:	69ba      	ldr	r2, [r7, #24]
 802fc10:	4013      	ands	r3, r2
 802fc12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 802fc14:	683b      	ldr	r3, [r7, #0]
 802fc16:	691a      	ldr	r2, [r3, #16]
 802fc18:	69fb      	ldr	r3, [r7, #28]
 802fc1a:	f003 0307 	and.w	r3, r3, #7
 802fc1e:	009b      	lsls	r3, r3, #2
 802fc20:	fa02 f303 	lsl.w	r3, r2, r3
 802fc24:	69ba      	ldr	r2, [r7, #24]
 802fc26:	4313      	orrs	r3, r2
 802fc28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 802fc2a:	69fb      	ldr	r3, [r7, #28]
 802fc2c:	08da      	lsrs	r2, r3, #3
 802fc2e:	687b      	ldr	r3, [r7, #4]
 802fc30:	3208      	adds	r2, #8
 802fc32:	69b9      	ldr	r1, [r7, #24]
 802fc34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 802fc38:	687b      	ldr	r3, [r7, #4]
 802fc3a:	681b      	ldr	r3, [r3, #0]
 802fc3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 802fc3e:	69fb      	ldr	r3, [r7, #28]
 802fc40:	005b      	lsls	r3, r3, #1
 802fc42:	2203      	movs	r2, #3
 802fc44:	fa02 f303 	lsl.w	r3, r2, r3
 802fc48:	43db      	mvns	r3, r3
 802fc4a:	69ba      	ldr	r2, [r7, #24]
 802fc4c:	4013      	ands	r3, r2
 802fc4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 802fc50:	683b      	ldr	r3, [r7, #0]
 802fc52:	685b      	ldr	r3, [r3, #4]
 802fc54:	f003 0203 	and.w	r2, r3, #3
 802fc58:	69fb      	ldr	r3, [r7, #28]
 802fc5a:	005b      	lsls	r3, r3, #1
 802fc5c:	fa02 f303 	lsl.w	r3, r2, r3
 802fc60:	69ba      	ldr	r2, [r7, #24]
 802fc62:	4313      	orrs	r3, r2
 802fc64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 802fc66:	687b      	ldr	r3, [r7, #4]
 802fc68:	69ba      	ldr	r2, [r7, #24]
 802fc6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 802fc6c:	683b      	ldr	r3, [r7, #0]
 802fc6e:	685b      	ldr	r3, [r3, #4]
 802fc70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802fc74:	2b00      	cmp	r3, #0
 802fc76:	f000 80ae 	beq.w	802fdd6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 802fc7a:	2300      	movs	r3, #0
 802fc7c:	60fb      	str	r3, [r7, #12]
 802fc7e:	4b5c      	ldr	r3, [pc, #368]	; (802fdf0 <HAL_GPIO_Init+0x2fc>)
 802fc80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802fc82:	4a5b      	ldr	r2, [pc, #364]	; (802fdf0 <HAL_GPIO_Init+0x2fc>)
 802fc84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802fc88:	6453      	str	r3, [r2, #68]	; 0x44
 802fc8a:	4b59      	ldr	r3, [pc, #356]	; (802fdf0 <HAL_GPIO_Init+0x2fc>)
 802fc8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802fc8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802fc92:	60fb      	str	r3, [r7, #12]
 802fc94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 802fc96:	4a57      	ldr	r2, [pc, #348]	; (802fdf4 <HAL_GPIO_Init+0x300>)
 802fc98:	69fb      	ldr	r3, [r7, #28]
 802fc9a:	089b      	lsrs	r3, r3, #2
 802fc9c:	3302      	adds	r3, #2
 802fc9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802fca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 802fca4:	69fb      	ldr	r3, [r7, #28]
 802fca6:	f003 0303 	and.w	r3, r3, #3
 802fcaa:	009b      	lsls	r3, r3, #2
 802fcac:	220f      	movs	r2, #15
 802fcae:	fa02 f303 	lsl.w	r3, r2, r3
 802fcb2:	43db      	mvns	r3, r3
 802fcb4:	69ba      	ldr	r2, [r7, #24]
 802fcb6:	4013      	ands	r3, r2
 802fcb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 802fcba:	687b      	ldr	r3, [r7, #4]
 802fcbc:	4a4e      	ldr	r2, [pc, #312]	; (802fdf8 <HAL_GPIO_Init+0x304>)
 802fcbe:	4293      	cmp	r3, r2
 802fcc0:	d025      	beq.n	802fd0e <HAL_GPIO_Init+0x21a>
 802fcc2:	687b      	ldr	r3, [r7, #4]
 802fcc4:	4a4d      	ldr	r2, [pc, #308]	; (802fdfc <HAL_GPIO_Init+0x308>)
 802fcc6:	4293      	cmp	r3, r2
 802fcc8:	d01f      	beq.n	802fd0a <HAL_GPIO_Init+0x216>
 802fcca:	687b      	ldr	r3, [r7, #4]
 802fccc:	4a4c      	ldr	r2, [pc, #304]	; (802fe00 <HAL_GPIO_Init+0x30c>)
 802fcce:	4293      	cmp	r3, r2
 802fcd0:	d019      	beq.n	802fd06 <HAL_GPIO_Init+0x212>
 802fcd2:	687b      	ldr	r3, [r7, #4]
 802fcd4:	4a4b      	ldr	r2, [pc, #300]	; (802fe04 <HAL_GPIO_Init+0x310>)
 802fcd6:	4293      	cmp	r3, r2
 802fcd8:	d013      	beq.n	802fd02 <HAL_GPIO_Init+0x20e>
 802fcda:	687b      	ldr	r3, [r7, #4]
 802fcdc:	4a4a      	ldr	r2, [pc, #296]	; (802fe08 <HAL_GPIO_Init+0x314>)
 802fcde:	4293      	cmp	r3, r2
 802fce0:	d00d      	beq.n	802fcfe <HAL_GPIO_Init+0x20a>
 802fce2:	687b      	ldr	r3, [r7, #4]
 802fce4:	4a49      	ldr	r2, [pc, #292]	; (802fe0c <HAL_GPIO_Init+0x318>)
 802fce6:	4293      	cmp	r3, r2
 802fce8:	d007      	beq.n	802fcfa <HAL_GPIO_Init+0x206>
 802fcea:	687b      	ldr	r3, [r7, #4]
 802fcec:	4a48      	ldr	r2, [pc, #288]	; (802fe10 <HAL_GPIO_Init+0x31c>)
 802fcee:	4293      	cmp	r3, r2
 802fcf0:	d101      	bne.n	802fcf6 <HAL_GPIO_Init+0x202>
 802fcf2:	2306      	movs	r3, #6
 802fcf4:	e00c      	b.n	802fd10 <HAL_GPIO_Init+0x21c>
 802fcf6:	2307      	movs	r3, #7
 802fcf8:	e00a      	b.n	802fd10 <HAL_GPIO_Init+0x21c>
 802fcfa:	2305      	movs	r3, #5
 802fcfc:	e008      	b.n	802fd10 <HAL_GPIO_Init+0x21c>
 802fcfe:	2304      	movs	r3, #4
 802fd00:	e006      	b.n	802fd10 <HAL_GPIO_Init+0x21c>
 802fd02:	2303      	movs	r3, #3
 802fd04:	e004      	b.n	802fd10 <HAL_GPIO_Init+0x21c>
 802fd06:	2302      	movs	r3, #2
 802fd08:	e002      	b.n	802fd10 <HAL_GPIO_Init+0x21c>
 802fd0a:	2301      	movs	r3, #1
 802fd0c:	e000      	b.n	802fd10 <HAL_GPIO_Init+0x21c>
 802fd0e:	2300      	movs	r3, #0
 802fd10:	69fa      	ldr	r2, [r7, #28]
 802fd12:	f002 0203 	and.w	r2, r2, #3
 802fd16:	0092      	lsls	r2, r2, #2
 802fd18:	4093      	lsls	r3, r2
 802fd1a:	69ba      	ldr	r2, [r7, #24]
 802fd1c:	4313      	orrs	r3, r2
 802fd1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 802fd20:	4934      	ldr	r1, [pc, #208]	; (802fdf4 <HAL_GPIO_Init+0x300>)
 802fd22:	69fb      	ldr	r3, [r7, #28]
 802fd24:	089b      	lsrs	r3, r3, #2
 802fd26:	3302      	adds	r3, #2
 802fd28:	69ba      	ldr	r2, [r7, #24]
 802fd2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 802fd2e:	4b39      	ldr	r3, [pc, #228]	; (802fe14 <HAL_GPIO_Init+0x320>)
 802fd30:	681b      	ldr	r3, [r3, #0]
 802fd32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802fd34:	693b      	ldr	r3, [r7, #16]
 802fd36:	43db      	mvns	r3, r3
 802fd38:	69ba      	ldr	r2, [r7, #24]
 802fd3a:	4013      	ands	r3, r2
 802fd3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 802fd3e:	683b      	ldr	r3, [r7, #0]
 802fd40:	685b      	ldr	r3, [r3, #4]
 802fd42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802fd46:	2b00      	cmp	r3, #0
 802fd48:	d003      	beq.n	802fd52 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 802fd4a:	69ba      	ldr	r2, [r7, #24]
 802fd4c:	693b      	ldr	r3, [r7, #16]
 802fd4e:	4313      	orrs	r3, r2
 802fd50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 802fd52:	4a30      	ldr	r2, [pc, #192]	; (802fe14 <HAL_GPIO_Init+0x320>)
 802fd54:	69bb      	ldr	r3, [r7, #24]
 802fd56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 802fd58:	4b2e      	ldr	r3, [pc, #184]	; (802fe14 <HAL_GPIO_Init+0x320>)
 802fd5a:	685b      	ldr	r3, [r3, #4]
 802fd5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802fd5e:	693b      	ldr	r3, [r7, #16]
 802fd60:	43db      	mvns	r3, r3
 802fd62:	69ba      	ldr	r2, [r7, #24]
 802fd64:	4013      	ands	r3, r2
 802fd66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 802fd68:	683b      	ldr	r3, [r7, #0]
 802fd6a:	685b      	ldr	r3, [r3, #4]
 802fd6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802fd70:	2b00      	cmp	r3, #0
 802fd72:	d003      	beq.n	802fd7c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 802fd74:	69ba      	ldr	r2, [r7, #24]
 802fd76:	693b      	ldr	r3, [r7, #16]
 802fd78:	4313      	orrs	r3, r2
 802fd7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 802fd7c:	4a25      	ldr	r2, [pc, #148]	; (802fe14 <HAL_GPIO_Init+0x320>)
 802fd7e:	69bb      	ldr	r3, [r7, #24]
 802fd80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 802fd82:	4b24      	ldr	r3, [pc, #144]	; (802fe14 <HAL_GPIO_Init+0x320>)
 802fd84:	689b      	ldr	r3, [r3, #8]
 802fd86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802fd88:	693b      	ldr	r3, [r7, #16]
 802fd8a:	43db      	mvns	r3, r3
 802fd8c:	69ba      	ldr	r2, [r7, #24]
 802fd8e:	4013      	ands	r3, r2
 802fd90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 802fd92:	683b      	ldr	r3, [r7, #0]
 802fd94:	685b      	ldr	r3, [r3, #4]
 802fd96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802fd9a:	2b00      	cmp	r3, #0
 802fd9c:	d003      	beq.n	802fda6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 802fd9e:	69ba      	ldr	r2, [r7, #24]
 802fda0:	693b      	ldr	r3, [r7, #16]
 802fda2:	4313      	orrs	r3, r2
 802fda4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 802fda6:	4a1b      	ldr	r2, [pc, #108]	; (802fe14 <HAL_GPIO_Init+0x320>)
 802fda8:	69bb      	ldr	r3, [r7, #24]
 802fdaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 802fdac:	4b19      	ldr	r3, [pc, #100]	; (802fe14 <HAL_GPIO_Init+0x320>)
 802fdae:	68db      	ldr	r3, [r3, #12]
 802fdb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802fdb2:	693b      	ldr	r3, [r7, #16]
 802fdb4:	43db      	mvns	r3, r3
 802fdb6:	69ba      	ldr	r2, [r7, #24]
 802fdb8:	4013      	ands	r3, r2
 802fdba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 802fdbc:	683b      	ldr	r3, [r7, #0]
 802fdbe:	685b      	ldr	r3, [r3, #4]
 802fdc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 802fdc4:	2b00      	cmp	r3, #0
 802fdc6:	d003      	beq.n	802fdd0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 802fdc8:	69ba      	ldr	r2, [r7, #24]
 802fdca:	693b      	ldr	r3, [r7, #16]
 802fdcc:	4313      	orrs	r3, r2
 802fdce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 802fdd0:	4a10      	ldr	r2, [pc, #64]	; (802fe14 <HAL_GPIO_Init+0x320>)
 802fdd2:	69bb      	ldr	r3, [r7, #24]
 802fdd4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 802fdd6:	69fb      	ldr	r3, [r7, #28]
 802fdd8:	3301      	adds	r3, #1
 802fdda:	61fb      	str	r3, [r7, #28]
 802fddc:	69fb      	ldr	r3, [r7, #28]
 802fdde:	2b0f      	cmp	r3, #15
 802fde0:	f67f ae96 	bls.w	802fb10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 802fde4:	bf00      	nop
 802fde6:	3724      	adds	r7, #36	; 0x24
 802fde8:	46bd      	mov	sp, r7
 802fdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 802fdee:	4770      	bx	lr
 802fdf0:	40023800 	.word	0x40023800
 802fdf4:	40013800 	.word	0x40013800
 802fdf8:	40020000 	.word	0x40020000
 802fdfc:	40020400 	.word	0x40020400
 802fe00:	40020800 	.word	0x40020800
 802fe04:	40020c00 	.word	0x40020c00
 802fe08:	40021000 	.word	0x40021000
 802fe0c:	40021400 	.word	0x40021400
 802fe10:	40021800 	.word	0x40021800
 802fe14:	40013c00 	.word	0x40013c00

0802fe18 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 802fe18:	b480      	push	{r7}
 802fe1a:	b087      	sub	sp, #28
 802fe1c:	af00      	add	r7, sp, #0
 802fe1e:	6078      	str	r0, [r7, #4]
 802fe20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 802fe22:	2300      	movs	r3, #0
 802fe24:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 802fe26:	2300      	movs	r3, #0
 802fe28:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 802fe2a:	2300      	movs	r3, #0
 802fe2c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 802fe2e:	2300      	movs	r3, #0
 802fe30:	617b      	str	r3, [r7, #20]
 802fe32:	e0c7      	b.n	802ffc4 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 802fe34:	2201      	movs	r2, #1
 802fe36:	697b      	ldr	r3, [r7, #20]
 802fe38:	fa02 f303 	lsl.w	r3, r2, r3
 802fe3c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 802fe3e:	683a      	ldr	r2, [r7, #0]
 802fe40:	693b      	ldr	r3, [r7, #16]
 802fe42:	4013      	ands	r3, r2
 802fe44:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 802fe46:	68fa      	ldr	r2, [r7, #12]
 802fe48:	693b      	ldr	r3, [r7, #16]
 802fe4a:	429a      	cmp	r2, r3
 802fe4c:	f040 80b7 	bne.w	802ffbe <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 802fe50:	4a61      	ldr	r2, [pc, #388]	; (802ffd8 <HAL_GPIO_DeInit+0x1c0>)
 802fe52:	697b      	ldr	r3, [r7, #20]
 802fe54:	089b      	lsrs	r3, r3, #2
 802fe56:	3302      	adds	r3, #2
 802fe58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802fe5c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 802fe5e:	697b      	ldr	r3, [r7, #20]
 802fe60:	f003 0303 	and.w	r3, r3, #3
 802fe64:	009b      	lsls	r3, r3, #2
 802fe66:	220f      	movs	r2, #15
 802fe68:	fa02 f303 	lsl.w	r3, r2, r3
 802fe6c:	68ba      	ldr	r2, [r7, #8]
 802fe6e:	4013      	ands	r3, r2
 802fe70:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 802fe72:	687b      	ldr	r3, [r7, #4]
 802fe74:	4a59      	ldr	r2, [pc, #356]	; (802ffdc <HAL_GPIO_DeInit+0x1c4>)
 802fe76:	4293      	cmp	r3, r2
 802fe78:	d025      	beq.n	802fec6 <HAL_GPIO_DeInit+0xae>
 802fe7a:	687b      	ldr	r3, [r7, #4]
 802fe7c:	4a58      	ldr	r2, [pc, #352]	; (802ffe0 <HAL_GPIO_DeInit+0x1c8>)
 802fe7e:	4293      	cmp	r3, r2
 802fe80:	d01f      	beq.n	802fec2 <HAL_GPIO_DeInit+0xaa>
 802fe82:	687b      	ldr	r3, [r7, #4]
 802fe84:	4a57      	ldr	r2, [pc, #348]	; (802ffe4 <HAL_GPIO_DeInit+0x1cc>)
 802fe86:	4293      	cmp	r3, r2
 802fe88:	d019      	beq.n	802febe <HAL_GPIO_DeInit+0xa6>
 802fe8a:	687b      	ldr	r3, [r7, #4]
 802fe8c:	4a56      	ldr	r2, [pc, #344]	; (802ffe8 <HAL_GPIO_DeInit+0x1d0>)
 802fe8e:	4293      	cmp	r3, r2
 802fe90:	d013      	beq.n	802feba <HAL_GPIO_DeInit+0xa2>
 802fe92:	687b      	ldr	r3, [r7, #4]
 802fe94:	4a55      	ldr	r2, [pc, #340]	; (802ffec <HAL_GPIO_DeInit+0x1d4>)
 802fe96:	4293      	cmp	r3, r2
 802fe98:	d00d      	beq.n	802feb6 <HAL_GPIO_DeInit+0x9e>
 802fe9a:	687b      	ldr	r3, [r7, #4]
 802fe9c:	4a54      	ldr	r2, [pc, #336]	; (802fff0 <HAL_GPIO_DeInit+0x1d8>)
 802fe9e:	4293      	cmp	r3, r2
 802fea0:	d007      	beq.n	802feb2 <HAL_GPIO_DeInit+0x9a>
 802fea2:	687b      	ldr	r3, [r7, #4]
 802fea4:	4a53      	ldr	r2, [pc, #332]	; (802fff4 <HAL_GPIO_DeInit+0x1dc>)
 802fea6:	4293      	cmp	r3, r2
 802fea8:	d101      	bne.n	802feae <HAL_GPIO_DeInit+0x96>
 802feaa:	2306      	movs	r3, #6
 802feac:	e00c      	b.n	802fec8 <HAL_GPIO_DeInit+0xb0>
 802feae:	2307      	movs	r3, #7
 802feb0:	e00a      	b.n	802fec8 <HAL_GPIO_DeInit+0xb0>
 802feb2:	2305      	movs	r3, #5
 802feb4:	e008      	b.n	802fec8 <HAL_GPIO_DeInit+0xb0>
 802feb6:	2304      	movs	r3, #4
 802feb8:	e006      	b.n	802fec8 <HAL_GPIO_DeInit+0xb0>
 802feba:	2303      	movs	r3, #3
 802febc:	e004      	b.n	802fec8 <HAL_GPIO_DeInit+0xb0>
 802febe:	2302      	movs	r3, #2
 802fec0:	e002      	b.n	802fec8 <HAL_GPIO_DeInit+0xb0>
 802fec2:	2301      	movs	r3, #1
 802fec4:	e000      	b.n	802fec8 <HAL_GPIO_DeInit+0xb0>
 802fec6:	2300      	movs	r3, #0
 802fec8:	697a      	ldr	r2, [r7, #20]
 802feca:	f002 0203 	and.w	r2, r2, #3
 802fece:	0092      	lsls	r2, r2, #2
 802fed0:	4093      	lsls	r3, r2
 802fed2:	68ba      	ldr	r2, [r7, #8]
 802fed4:	429a      	cmp	r2, r3
 802fed6:	d132      	bne.n	802ff3e <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 802fed8:	4b47      	ldr	r3, [pc, #284]	; (802fff8 <HAL_GPIO_DeInit+0x1e0>)
 802feda:	681a      	ldr	r2, [r3, #0]
 802fedc:	68fb      	ldr	r3, [r7, #12]
 802fede:	43db      	mvns	r3, r3
 802fee0:	4945      	ldr	r1, [pc, #276]	; (802fff8 <HAL_GPIO_DeInit+0x1e0>)
 802fee2:	4013      	ands	r3, r2
 802fee4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 802fee6:	4b44      	ldr	r3, [pc, #272]	; (802fff8 <HAL_GPIO_DeInit+0x1e0>)
 802fee8:	685a      	ldr	r2, [r3, #4]
 802feea:	68fb      	ldr	r3, [r7, #12]
 802feec:	43db      	mvns	r3, r3
 802feee:	4942      	ldr	r1, [pc, #264]	; (802fff8 <HAL_GPIO_DeInit+0x1e0>)
 802fef0:	4013      	ands	r3, r2
 802fef2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 802fef4:	4b40      	ldr	r3, [pc, #256]	; (802fff8 <HAL_GPIO_DeInit+0x1e0>)
 802fef6:	689a      	ldr	r2, [r3, #8]
 802fef8:	68fb      	ldr	r3, [r7, #12]
 802fefa:	43db      	mvns	r3, r3
 802fefc:	493e      	ldr	r1, [pc, #248]	; (802fff8 <HAL_GPIO_DeInit+0x1e0>)
 802fefe:	4013      	ands	r3, r2
 802ff00:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 802ff02:	4b3d      	ldr	r3, [pc, #244]	; (802fff8 <HAL_GPIO_DeInit+0x1e0>)
 802ff04:	68da      	ldr	r2, [r3, #12]
 802ff06:	68fb      	ldr	r3, [r7, #12]
 802ff08:	43db      	mvns	r3, r3
 802ff0a:	493b      	ldr	r1, [pc, #236]	; (802fff8 <HAL_GPIO_DeInit+0x1e0>)
 802ff0c:	4013      	ands	r3, r2
 802ff0e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 802ff10:	697b      	ldr	r3, [r7, #20]
 802ff12:	f003 0303 	and.w	r3, r3, #3
 802ff16:	009b      	lsls	r3, r3, #2
 802ff18:	220f      	movs	r2, #15
 802ff1a:	fa02 f303 	lsl.w	r3, r2, r3
 802ff1e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 802ff20:	4a2d      	ldr	r2, [pc, #180]	; (802ffd8 <HAL_GPIO_DeInit+0x1c0>)
 802ff22:	697b      	ldr	r3, [r7, #20]
 802ff24:	089b      	lsrs	r3, r3, #2
 802ff26:	3302      	adds	r3, #2
 802ff28:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 802ff2c:	68bb      	ldr	r3, [r7, #8]
 802ff2e:	43da      	mvns	r2, r3
 802ff30:	4829      	ldr	r0, [pc, #164]	; (802ffd8 <HAL_GPIO_DeInit+0x1c0>)
 802ff32:	697b      	ldr	r3, [r7, #20]
 802ff34:	089b      	lsrs	r3, r3, #2
 802ff36:	400a      	ands	r2, r1
 802ff38:	3302      	adds	r3, #2
 802ff3a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 802ff3e:	687b      	ldr	r3, [r7, #4]
 802ff40:	681a      	ldr	r2, [r3, #0]
 802ff42:	697b      	ldr	r3, [r7, #20]
 802ff44:	005b      	lsls	r3, r3, #1
 802ff46:	2103      	movs	r1, #3
 802ff48:	fa01 f303 	lsl.w	r3, r1, r3
 802ff4c:	43db      	mvns	r3, r3
 802ff4e:	401a      	ands	r2, r3
 802ff50:	687b      	ldr	r3, [r7, #4]
 802ff52:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 802ff54:	697b      	ldr	r3, [r7, #20]
 802ff56:	08da      	lsrs	r2, r3, #3
 802ff58:	687b      	ldr	r3, [r7, #4]
 802ff5a:	3208      	adds	r2, #8
 802ff5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802ff60:	697b      	ldr	r3, [r7, #20]
 802ff62:	f003 0307 	and.w	r3, r3, #7
 802ff66:	009b      	lsls	r3, r3, #2
 802ff68:	220f      	movs	r2, #15
 802ff6a:	fa02 f303 	lsl.w	r3, r2, r3
 802ff6e:	43db      	mvns	r3, r3
 802ff70:	697a      	ldr	r2, [r7, #20]
 802ff72:	08d2      	lsrs	r2, r2, #3
 802ff74:	4019      	ands	r1, r3
 802ff76:	687b      	ldr	r3, [r7, #4]
 802ff78:	3208      	adds	r2, #8
 802ff7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 802ff7e:	687b      	ldr	r3, [r7, #4]
 802ff80:	68da      	ldr	r2, [r3, #12]
 802ff82:	697b      	ldr	r3, [r7, #20]
 802ff84:	005b      	lsls	r3, r3, #1
 802ff86:	2103      	movs	r1, #3
 802ff88:	fa01 f303 	lsl.w	r3, r1, r3
 802ff8c:	43db      	mvns	r3, r3
 802ff8e:	401a      	ands	r2, r3
 802ff90:	687b      	ldr	r3, [r7, #4]
 802ff92:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 802ff94:	687b      	ldr	r3, [r7, #4]
 802ff96:	685a      	ldr	r2, [r3, #4]
 802ff98:	2101      	movs	r1, #1
 802ff9a:	697b      	ldr	r3, [r7, #20]
 802ff9c:	fa01 f303 	lsl.w	r3, r1, r3
 802ffa0:	43db      	mvns	r3, r3
 802ffa2:	401a      	ands	r2, r3
 802ffa4:	687b      	ldr	r3, [r7, #4]
 802ffa6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 802ffa8:	687b      	ldr	r3, [r7, #4]
 802ffaa:	689a      	ldr	r2, [r3, #8]
 802ffac:	697b      	ldr	r3, [r7, #20]
 802ffae:	005b      	lsls	r3, r3, #1
 802ffb0:	2103      	movs	r1, #3
 802ffb2:	fa01 f303 	lsl.w	r3, r1, r3
 802ffb6:	43db      	mvns	r3, r3
 802ffb8:	401a      	ands	r2, r3
 802ffba:	687b      	ldr	r3, [r7, #4]
 802ffbc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 802ffbe:	697b      	ldr	r3, [r7, #20]
 802ffc0:	3301      	adds	r3, #1
 802ffc2:	617b      	str	r3, [r7, #20]
 802ffc4:	697b      	ldr	r3, [r7, #20]
 802ffc6:	2b0f      	cmp	r3, #15
 802ffc8:	f67f af34 	bls.w	802fe34 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 802ffcc:	bf00      	nop
 802ffce:	371c      	adds	r7, #28
 802ffd0:	46bd      	mov	sp, r7
 802ffd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ffd6:	4770      	bx	lr
 802ffd8:	40013800 	.word	0x40013800
 802ffdc:	40020000 	.word	0x40020000
 802ffe0:	40020400 	.word	0x40020400
 802ffe4:	40020800 	.word	0x40020800
 802ffe8:	40020c00 	.word	0x40020c00
 802ffec:	40021000 	.word	0x40021000
 802fff0:	40021400 	.word	0x40021400
 802fff4:	40021800 	.word	0x40021800
 802fff8:	40013c00 	.word	0x40013c00

0802fffc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 802fffc:	b480      	push	{r7}
 802fffe:	b085      	sub	sp, #20
 8030000:	af00      	add	r7, sp, #0
 8030002:	6078      	str	r0, [r7, #4]
 8030004:	460b      	mov	r3, r1
 8030006:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8030008:	687b      	ldr	r3, [r7, #4]
 803000a:	691a      	ldr	r2, [r3, #16]
 803000c:	887b      	ldrh	r3, [r7, #2]
 803000e:	4013      	ands	r3, r2
 8030010:	2b00      	cmp	r3, #0
 8030012:	d002      	beq.n	803001a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8030014:	2301      	movs	r3, #1
 8030016:	73fb      	strb	r3, [r7, #15]
 8030018:	e001      	b.n	803001e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 803001a:	2300      	movs	r3, #0
 803001c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 803001e:	7bfb      	ldrb	r3, [r7, #15]
}
 8030020:	4618      	mov	r0, r3
 8030022:	3714      	adds	r7, #20
 8030024:	46bd      	mov	sp, r7
 8030026:	f85d 7b04 	ldr.w	r7, [sp], #4
 803002a:	4770      	bx	lr

0803002c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 803002c:	b480      	push	{r7}
 803002e:	b083      	sub	sp, #12
 8030030:	af00      	add	r7, sp, #0
 8030032:	6078      	str	r0, [r7, #4]
 8030034:	460b      	mov	r3, r1
 8030036:	807b      	strh	r3, [r7, #2]
 8030038:	4613      	mov	r3, r2
 803003a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 803003c:	787b      	ldrb	r3, [r7, #1]
 803003e:	2b00      	cmp	r3, #0
 8030040:	d003      	beq.n	803004a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8030042:	887a      	ldrh	r2, [r7, #2]
 8030044:	687b      	ldr	r3, [r7, #4]
 8030046:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8030048:	e003      	b.n	8030052 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 803004a:	887b      	ldrh	r3, [r7, #2]
 803004c:	041a      	lsls	r2, r3, #16
 803004e:	687b      	ldr	r3, [r7, #4]
 8030050:	619a      	str	r2, [r3, #24]
}
 8030052:	bf00      	nop
 8030054:	370c      	adds	r7, #12
 8030056:	46bd      	mov	sp, r7
 8030058:	f85d 7b04 	ldr.w	r7, [sp], #4
 803005c:	4770      	bx	lr

0803005e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 803005e:	b480      	push	{r7}
 8030060:	b083      	sub	sp, #12
 8030062:	af00      	add	r7, sp, #0
 8030064:	6078      	str	r0, [r7, #4]
 8030066:	460b      	mov	r3, r1
 8030068:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 803006a:	687b      	ldr	r3, [r7, #4]
 803006c:	695a      	ldr	r2, [r3, #20]
 803006e:	887b      	ldrh	r3, [r7, #2]
 8030070:	401a      	ands	r2, r3
 8030072:	887b      	ldrh	r3, [r7, #2]
 8030074:	429a      	cmp	r2, r3
 8030076:	d104      	bne.n	8030082 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8030078:	887b      	ldrh	r3, [r7, #2]
 803007a:	041a      	lsls	r2, r3, #16
 803007c:	687b      	ldr	r3, [r7, #4]
 803007e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8030080:	e002      	b.n	8030088 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8030082:	887a      	ldrh	r2, [r7, #2]
 8030084:	687b      	ldr	r3, [r7, #4]
 8030086:	619a      	str	r2, [r3, #24]
}
 8030088:	bf00      	nop
 803008a:	370c      	adds	r7, #12
 803008c:	46bd      	mov	sp, r7
 803008e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030092:	4770      	bx	lr

08030094 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8030094:	b580      	push	{r7, lr}
 8030096:	b082      	sub	sp, #8
 8030098:	af00      	add	r7, sp, #0
 803009a:	4603      	mov	r3, r0
 803009c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 803009e:	4b08      	ldr	r3, [pc, #32]	; (80300c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80300a0:	695a      	ldr	r2, [r3, #20]
 80300a2:	88fb      	ldrh	r3, [r7, #6]
 80300a4:	4013      	ands	r3, r2
 80300a6:	2b00      	cmp	r3, #0
 80300a8:	d006      	beq.n	80300b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80300aa:	4a05      	ldr	r2, [pc, #20]	; (80300c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80300ac:	88fb      	ldrh	r3, [r7, #6]
 80300ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80300b0:	88fb      	ldrh	r3, [r7, #6]
 80300b2:	4618      	mov	r0, r3
 80300b4:	f7fa f950 	bl	802a358 <HAL_GPIO_EXTI_Callback>
  }
}
 80300b8:	bf00      	nop
 80300ba:	3708      	adds	r7, #8
 80300bc:	46bd      	mov	sp, r7
 80300be:	bd80      	pop	{r7, pc}
 80300c0:	40013c00 	.word	0x40013c00

080300c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80300c4:	b580      	push	{r7, lr}
 80300c6:	b084      	sub	sp, #16
 80300c8:	af00      	add	r7, sp, #0
 80300ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80300cc:	687b      	ldr	r3, [r7, #4]
 80300ce:	2b00      	cmp	r3, #0
 80300d0:	d101      	bne.n	80300d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80300d2:	2301      	movs	r3, #1
 80300d4:	e11f      	b.n	8030316 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80300d6:	687b      	ldr	r3, [r7, #4]
 80300d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80300dc:	b2db      	uxtb	r3, r3
 80300de:	2b00      	cmp	r3, #0
 80300e0:	d106      	bne.n	80300f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80300e2:	687b      	ldr	r3, [r7, #4]
 80300e4:	2200      	movs	r2, #0
 80300e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80300ea:	6878      	ldr	r0, [r7, #4]
 80300ec:	f7fb fa6c 	bl	802b5c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80300f0:	687b      	ldr	r3, [r7, #4]
 80300f2:	2224      	movs	r2, #36	; 0x24
 80300f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80300f8:	687b      	ldr	r3, [r7, #4]
 80300fa:	681b      	ldr	r3, [r3, #0]
 80300fc:	681a      	ldr	r2, [r3, #0]
 80300fe:	687b      	ldr	r3, [r7, #4]
 8030100:	681b      	ldr	r3, [r3, #0]
 8030102:	f022 0201 	bic.w	r2, r2, #1
 8030106:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8030108:	687b      	ldr	r3, [r7, #4]
 803010a:	681b      	ldr	r3, [r3, #0]
 803010c:	681a      	ldr	r2, [r3, #0]
 803010e:	687b      	ldr	r3, [r7, #4]
 8030110:	681b      	ldr	r3, [r3, #0]
 8030112:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8030116:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8030118:	687b      	ldr	r3, [r7, #4]
 803011a:	681b      	ldr	r3, [r3, #0]
 803011c:	681a      	ldr	r2, [r3, #0]
 803011e:	687b      	ldr	r3, [r7, #4]
 8030120:	681b      	ldr	r3, [r3, #0]
 8030122:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8030126:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8030128:	f003 fe96 	bl	8033e58 <HAL_RCC_GetPCLK1Freq>
 803012c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 803012e:	687b      	ldr	r3, [r7, #4]
 8030130:	685b      	ldr	r3, [r3, #4]
 8030132:	4a7b      	ldr	r2, [pc, #492]	; (8030320 <HAL_I2C_Init+0x25c>)
 8030134:	4293      	cmp	r3, r2
 8030136:	d807      	bhi.n	8030148 <HAL_I2C_Init+0x84>
 8030138:	68fb      	ldr	r3, [r7, #12]
 803013a:	4a7a      	ldr	r2, [pc, #488]	; (8030324 <HAL_I2C_Init+0x260>)
 803013c:	4293      	cmp	r3, r2
 803013e:	bf94      	ite	ls
 8030140:	2301      	movls	r3, #1
 8030142:	2300      	movhi	r3, #0
 8030144:	b2db      	uxtb	r3, r3
 8030146:	e006      	b.n	8030156 <HAL_I2C_Init+0x92>
 8030148:	68fb      	ldr	r3, [r7, #12]
 803014a:	4a77      	ldr	r2, [pc, #476]	; (8030328 <HAL_I2C_Init+0x264>)
 803014c:	4293      	cmp	r3, r2
 803014e:	bf94      	ite	ls
 8030150:	2301      	movls	r3, #1
 8030152:	2300      	movhi	r3, #0
 8030154:	b2db      	uxtb	r3, r3
 8030156:	2b00      	cmp	r3, #0
 8030158:	d001      	beq.n	803015e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 803015a:	2301      	movs	r3, #1
 803015c:	e0db      	b.n	8030316 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 803015e:	68fb      	ldr	r3, [r7, #12]
 8030160:	4a72      	ldr	r2, [pc, #456]	; (803032c <HAL_I2C_Init+0x268>)
 8030162:	fba2 2303 	umull	r2, r3, r2, r3
 8030166:	0c9b      	lsrs	r3, r3, #18
 8030168:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 803016a:	687b      	ldr	r3, [r7, #4]
 803016c:	681b      	ldr	r3, [r3, #0]
 803016e:	685b      	ldr	r3, [r3, #4]
 8030170:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8030174:	687b      	ldr	r3, [r7, #4]
 8030176:	681b      	ldr	r3, [r3, #0]
 8030178:	68ba      	ldr	r2, [r7, #8]
 803017a:	430a      	orrs	r2, r1
 803017c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 803017e:	687b      	ldr	r3, [r7, #4]
 8030180:	681b      	ldr	r3, [r3, #0]
 8030182:	6a1b      	ldr	r3, [r3, #32]
 8030184:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8030188:	687b      	ldr	r3, [r7, #4]
 803018a:	685b      	ldr	r3, [r3, #4]
 803018c:	4a64      	ldr	r2, [pc, #400]	; (8030320 <HAL_I2C_Init+0x25c>)
 803018e:	4293      	cmp	r3, r2
 8030190:	d802      	bhi.n	8030198 <HAL_I2C_Init+0xd4>
 8030192:	68bb      	ldr	r3, [r7, #8]
 8030194:	3301      	adds	r3, #1
 8030196:	e009      	b.n	80301ac <HAL_I2C_Init+0xe8>
 8030198:	68bb      	ldr	r3, [r7, #8]
 803019a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 803019e:	fb02 f303 	mul.w	r3, r2, r3
 80301a2:	4a63      	ldr	r2, [pc, #396]	; (8030330 <HAL_I2C_Init+0x26c>)
 80301a4:	fba2 2303 	umull	r2, r3, r2, r3
 80301a8:	099b      	lsrs	r3, r3, #6
 80301aa:	3301      	adds	r3, #1
 80301ac:	687a      	ldr	r2, [r7, #4]
 80301ae:	6812      	ldr	r2, [r2, #0]
 80301b0:	430b      	orrs	r3, r1
 80301b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80301b4:	687b      	ldr	r3, [r7, #4]
 80301b6:	681b      	ldr	r3, [r3, #0]
 80301b8:	69db      	ldr	r3, [r3, #28]
 80301ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80301be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80301c2:	687b      	ldr	r3, [r7, #4]
 80301c4:	685b      	ldr	r3, [r3, #4]
 80301c6:	4956      	ldr	r1, [pc, #344]	; (8030320 <HAL_I2C_Init+0x25c>)
 80301c8:	428b      	cmp	r3, r1
 80301ca:	d80d      	bhi.n	80301e8 <HAL_I2C_Init+0x124>
 80301cc:	68fb      	ldr	r3, [r7, #12]
 80301ce:	1e59      	subs	r1, r3, #1
 80301d0:	687b      	ldr	r3, [r7, #4]
 80301d2:	685b      	ldr	r3, [r3, #4]
 80301d4:	005b      	lsls	r3, r3, #1
 80301d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80301da:	3301      	adds	r3, #1
 80301dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80301e0:	2b04      	cmp	r3, #4
 80301e2:	bf38      	it	cc
 80301e4:	2304      	movcc	r3, #4
 80301e6:	e04f      	b.n	8030288 <HAL_I2C_Init+0x1c4>
 80301e8:	687b      	ldr	r3, [r7, #4]
 80301ea:	689b      	ldr	r3, [r3, #8]
 80301ec:	2b00      	cmp	r3, #0
 80301ee:	d111      	bne.n	8030214 <HAL_I2C_Init+0x150>
 80301f0:	68fb      	ldr	r3, [r7, #12]
 80301f2:	1e58      	subs	r0, r3, #1
 80301f4:	687b      	ldr	r3, [r7, #4]
 80301f6:	6859      	ldr	r1, [r3, #4]
 80301f8:	460b      	mov	r3, r1
 80301fa:	005b      	lsls	r3, r3, #1
 80301fc:	440b      	add	r3, r1
 80301fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8030202:	3301      	adds	r3, #1
 8030204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8030208:	2b00      	cmp	r3, #0
 803020a:	bf0c      	ite	eq
 803020c:	2301      	moveq	r3, #1
 803020e:	2300      	movne	r3, #0
 8030210:	b2db      	uxtb	r3, r3
 8030212:	e012      	b.n	803023a <HAL_I2C_Init+0x176>
 8030214:	68fb      	ldr	r3, [r7, #12]
 8030216:	1e58      	subs	r0, r3, #1
 8030218:	687b      	ldr	r3, [r7, #4]
 803021a:	6859      	ldr	r1, [r3, #4]
 803021c:	460b      	mov	r3, r1
 803021e:	009b      	lsls	r3, r3, #2
 8030220:	440b      	add	r3, r1
 8030222:	0099      	lsls	r1, r3, #2
 8030224:	440b      	add	r3, r1
 8030226:	fbb0 f3f3 	udiv	r3, r0, r3
 803022a:	3301      	adds	r3, #1
 803022c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8030230:	2b00      	cmp	r3, #0
 8030232:	bf0c      	ite	eq
 8030234:	2301      	moveq	r3, #1
 8030236:	2300      	movne	r3, #0
 8030238:	b2db      	uxtb	r3, r3
 803023a:	2b00      	cmp	r3, #0
 803023c:	d001      	beq.n	8030242 <HAL_I2C_Init+0x17e>
 803023e:	2301      	movs	r3, #1
 8030240:	e022      	b.n	8030288 <HAL_I2C_Init+0x1c4>
 8030242:	687b      	ldr	r3, [r7, #4]
 8030244:	689b      	ldr	r3, [r3, #8]
 8030246:	2b00      	cmp	r3, #0
 8030248:	d10e      	bne.n	8030268 <HAL_I2C_Init+0x1a4>
 803024a:	68fb      	ldr	r3, [r7, #12]
 803024c:	1e58      	subs	r0, r3, #1
 803024e:	687b      	ldr	r3, [r7, #4]
 8030250:	6859      	ldr	r1, [r3, #4]
 8030252:	460b      	mov	r3, r1
 8030254:	005b      	lsls	r3, r3, #1
 8030256:	440b      	add	r3, r1
 8030258:	fbb0 f3f3 	udiv	r3, r0, r3
 803025c:	3301      	adds	r3, #1
 803025e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8030262:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8030266:	e00f      	b.n	8030288 <HAL_I2C_Init+0x1c4>
 8030268:	68fb      	ldr	r3, [r7, #12]
 803026a:	1e58      	subs	r0, r3, #1
 803026c:	687b      	ldr	r3, [r7, #4]
 803026e:	6859      	ldr	r1, [r3, #4]
 8030270:	460b      	mov	r3, r1
 8030272:	009b      	lsls	r3, r3, #2
 8030274:	440b      	add	r3, r1
 8030276:	0099      	lsls	r1, r3, #2
 8030278:	440b      	add	r3, r1
 803027a:	fbb0 f3f3 	udiv	r3, r0, r3
 803027e:	3301      	adds	r3, #1
 8030280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8030284:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8030288:	6879      	ldr	r1, [r7, #4]
 803028a:	6809      	ldr	r1, [r1, #0]
 803028c:	4313      	orrs	r3, r2
 803028e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8030290:	687b      	ldr	r3, [r7, #4]
 8030292:	681b      	ldr	r3, [r3, #0]
 8030294:	681b      	ldr	r3, [r3, #0]
 8030296:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 803029a:	687b      	ldr	r3, [r7, #4]
 803029c:	69da      	ldr	r2, [r3, #28]
 803029e:	687b      	ldr	r3, [r7, #4]
 80302a0:	6a1b      	ldr	r3, [r3, #32]
 80302a2:	431a      	orrs	r2, r3
 80302a4:	687b      	ldr	r3, [r7, #4]
 80302a6:	681b      	ldr	r3, [r3, #0]
 80302a8:	430a      	orrs	r2, r1
 80302aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80302ac:	687b      	ldr	r3, [r7, #4]
 80302ae:	681b      	ldr	r3, [r3, #0]
 80302b0:	689b      	ldr	r3, [r3, #8]
 80302b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80302b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80302ba:	687a      	ldr	r2, [r7, #4]
 80302bc:	6911      	ldr	r1, [r2, #16]
 80302be:	687a      	ldr	r2, [r7, #4]
 80302c0:	68d2      	ldr	r2, [r2, #12]
 80302c2:	4311      	orrs	r1, r2
 80302c4:	687a      	ldr	r2, [r7, #4]
 80302c6:	6812      	ldr	r2, [r2, #0]
 80302c8:	430b      	orrs	r3, r1
 80302ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80302cc:	687b      	ldr	r3, [r7, #4]
 80302ce:	681b      	ldr	r3, [r3, #0]
 80302d0:	68db      	ldr	r3, [r3, #12]
 80302d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80302d6:	687b      	ldr	r3, [r7, #4]
 80302d8:	695a      	ldr	r2, [r3, #20]
 80302da:	687b      	ldr	r3, [r7, #4]
 80302dc:	699b      	ldr	r3, [r3, #24]
 80302de:	431a      	orrs	r2, r3
 80302e0:	687b      	ldr	r3, [r7, #4]
 80302e2:	681b      	ldr	r3, [r3, #0]
 80302e4:	430a      	orrs	r2, r1
 80302e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80302e8:	687b      	ldr	r3, [r7, #4]
 80302ea:	681b      	ldr	r3, [r3, #0]
 80302ec:	681a      	ldr	r2, [r3, #0]
 80302ee:	687b      	ldr	r3, [r7, #4]
 80302f0:	681b      	ldr	r3, [r3, #0]
 80302f2:	f042 0201 	orr.w	r2, r2, #1
 80302f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80302f8:	687b      	ldr	r3, [r7, #4]
 80302fa:	2200      	movs	r2, #0
 80302fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80302fe:	687b      	ldr	r3, [r7, #4]
 8030300:	2220      	movs	r2, #32
 8030302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8030306:	687b      	ldr	r3, [r7, #4]
 8030308:	2200      	movs	r2, #0
 803030a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 803030c:	687b      	ldr	r3, [r7, #4]
 803030e:	2200      	movs	r2, #0
 8030310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8030314:	2300      	movs	r3, #0
}
 8030316:	4618      	mov	r0, r3
 8030318:	3710      	adds	r7, #16
 803031a:	46bd      	mov	sp, r7
 803031c:	bd80      	pop	{r7, pc}
 803031e:	bf00      	nop
 8030320:	000186a0 	.word	0x000186a0
 8030324:	001e847f 	.word	0x001e847f
 8030328:	003d08ff 	.word	0x003d08ff
 803032c:	431bde83 	.word	0x431bde83
 8030330:	10624dd3 	.word	0x10624dd3

08030334 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8030334:	b580      	push	{r7, lr}
 8030336:	b088      	sub	sp, #32
 8030338:	af02      	add	r7, sp, #8
 803033a:	60f8      	str	r0, [r7, #12]
 803033c:	607a      	str	r2, [r7, #4]
 803033e:	461a      	mov	r2, r3
 8030340:	460b      	mov	r3, r1
 8030342:	817b      	strh	r3, [r7, #10]
 8030344:	4613      	mov	r3, r2
 8030346:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8030348:	f7fb ff7e 	bl	802c248 <HAL_GetTick>
 803034c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 803034e:	68fb      	ldr	r3, [r7, #12]
 8030350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8030354:	b2db      	uxtb	r3, r3
 8030356:	2b20      	cmp	r3, #32
 8030358:	f040 80e0 	bne.w	803051c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 803035c:	697b      	ldr	r3, [r7, #20]
 803035e:	9300      	str	r3, [sp, #0]
 8030360:	2319      	movs	r3, #25
 8030362:	2201      	movs	r2, #1
 8030364:	4970      	ldr	r1, [pc, #448]	; (8030528 <HAL_I2C_Master_Transmit+0x1f4>)
 8030366:	68f8      	ldr	r0, [r7, #12]
 8030368:	f002 fb21 	bl	80329ae <I2C_WaitOnFlagUntilTimeout>
 803036c:	4603      	mov	r3, r0
 803036e:	2b00      	cmp	r3, #0
 8030370:	d001      	beq.n	8030376 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8030372:	2302      	movs	r3, #2
 8030374:	e0d3      	b.n	803051e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8030376:	68fb      	ldr	r3, [r7, #12]
 8030378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 803037c:	2b01      	cmp	r3, #1
 803037e:	d101      	bne.n	8030384 <HAL_I2C_Master_Transmit+0x50>
 8030380:	2302      	movs	r3, #2
 8030382:	e0cc      	b.n	803051e <HAL_I2C_Master_Transmit+0x1ea>
 8030384:	68fb      	ldr	r3, [r7, #12]
 8030386:	2201      	movs	r2, #1
 8030388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 803038c:	68fb      	ldr	r3, [r7, #12]
 803038e:	681b      	ldr	r3, [r3, #0]
 8030390:	681b      	ldr	r3, [r3, #0]
 8030392:	f003 0301 	and.w	r3, r3, #1
 8030396:	2b01      	cmp	r3, #1
 8030398:	d007      	beq.n	80303aa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 803039a:	68fb      	ldr	r3, [r7, #12]
 803039c:	681b      	ldr	r3, [r3, #0]
 803039e:	681a      	ldr	r2, [r3, #0]
 80303a0:	68fb      	ldr	r3, [r7, #12]
 80303a2:	681b      	ldr	r3, [r3, #0]
 80303a4:	f042 0201 	orr.w	r2, r2, #1
 80303a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80303aa:	68fb      	ldr	r3, [r7, #12]
 80303ac:	681b      	ldr	r3, [r3, #0]
 80303ae:	681a      	ldr	r2, [r3, #0]
 80303b0:	68fb      	ldr	r3, [r7, #12]
 80303b2:	681b      	ldr	r3, [r3, #0]
 80303b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80303b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80303ba:	68fb      	ldr	r3, [r7, #12]
 80303bc:	2221      	movs	r2, #33	; 0x21
 80303be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80303c2:	68fb      	ldr	r3, [r7, #12]
 80303c4:	2210      	movs	r2, #16
 80303c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80303ca:	68fb      	ldr	r3, [r7, #12]
 80303cc:	2200      	movs	r2, #0
 80303ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80303d0:	68fb      	ldr	r3, [r7, #12]
 80303d2:	687a      	ldr	r2, [r7, #4]
 80303d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80303d6:	68fb      	ldr	r3, [r7, #12]
 80303d8:	893a      	ldrh	r2, [r7, #8]
 80303da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80303dc:	68fb      	ldr	r3, [r7, #12]
 80303de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80303e0:	b29a      	uxth	r2, r3
 80303e2:	68fb      	ldr	r3, [r7, #12]
 80303e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80303e6:	68fb      	ldr	r3, [r7, #12]
 80303e8:	4a50      	ldr	r2, [pc, #320]	; (803052c <HAL_I2C_Master_Transmit+0x1f8>)
 80303ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80303ec:	8979      	ldrh	r1, [r7, #10]
 80303ee:	697b      	ldr	r3, [r7, #20]
 80303f0:	6a3a      	ldr	r2, [r7, #32]
 80303f2:	68f8      	ldr	r0, [r7, #12]
 80303f4:	f002 f860 	bl	80324b8 <I2C_MasterRequestWrite>
 80303f8:	4603      	mov	r3, r0
 80303fa:	2b00      	cmp	r3, #0
 80303fc:	d001      	beq.n	8030402 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80303fe:	2301      	movs	r3, #1
 8030400:	e08d      	b.n	803051e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8030402:	2300      	movs	r3, #0
 8030404:	613b      	str	r3, [r7, #16]
 8030406:	68fb      	ldr	r3, [r7, #12]
 8030408:	681b      	ldr	r3, [r3, #0]
 803040a:	695b      	ldr	r3, [r3, #20]
 803040c:	613b      	str	r3, [r7, #16]
 803040e:	68fb      	ldr	r3, [r7, #12]
 8030410:	681b      	ldr	r3, [r3, #0]
 8030412:	699b      	ldr	r3, [r3, #24]
 8030414:	613b      	str	r3, [r7, #16]
 8030416:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8030418:	e066      	b.n	80304e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 803041a:	697a      	ldr	r2, [r7, #20]
 803041c:	6a39      	ldr	r1, [r7, #32]
 803041e:	68f8      	ldr	r0, [r7, #12]
 8030420:	f002 fb9b 	bl	8032b5a <I2C_WaitOnTXEFlagUntilTimeout>
 8030424:	4603      	mov	r3, r0
 8030426:	2b00      	cmp	r3, #0
 8030428:	d00d      	beq.n	8030446 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 803042a:	68fb      	ldr	r3, [r7, #12]
 803042c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803042e:	2b04      	cmp	r3, #4
 8030430:	d107      	bne.n	8030442 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8030432:	68fb      	ldr	r3, [r7, #12]
 8030434:	681b      	ldr	r3, [r3, #0]
 8030436:	681a      	ldr	r2, [r3, #0]
 8030438:	68fb      	ldr	r3, [r7, #12]
 803043a:	681b      	ldr	r3, [r3, #0]
 803043c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8030440:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8030442:	2301      	movs	r3, #1
 8030444:	e06b      	b.n	803051e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8030446:	68fb      	ldr	r3, [r7, #12]
 8030448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803044a:	781a      	ldrb	r2, [r3, #0]
 803044c:	68fb      	ldr	r3, [r7, #12]
 803044e:	681b      	ldr	r3, [r3, #0]
 8030450:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8030452:	68fb      	ldr	r3, [r7, #12]
 8030454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030456:	1c5a      	adds	r2, r3, #1
 8030458:	68fb      	ldr	r3, [r7, #12]
 803045a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 803045c:	68fb      	ldr	r3, [r7, #12]
 803045e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8030460:	b29b      	uxth	r3, r3
 8030462:	3b01      	subs	r3, #1
 8030464:	b29a      	uxth	r2, r3
 8030466:	68fb      	ldr	r3, [r7, #12]
 8030468:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 803046a:	68fb      	ldr	r3, [r7, #12]
 803046c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 803046e:	3b01      	subs	r3, #1
 8030470:	b29a      	uxth	r2, r3
 8030472:	68fb      	ldr	r3, [r7, #12]
 8030474:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8030476:	68fb      	ldr	r3, [r7, #12]
 8030478:	681b      	ldr	r3, [r3, #0]
 803047a:	695b      	ldr	r3, [r3, #20]
 803047c:	f003 0304 	and.w	r3, r3, #4
 8030480:	2b04      	cmp	r3, #4
 8030482:	d11b      	bne.n	80304bc <HAL_I2C_Master_Transmit+0x188>
 8030484:	68fb      	ldr	r3, [r7, #12]
 8030486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8030488:	2b00      	cmp	r3, #0
 803048a:	d017      	beq.n	80304bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 803048c:	68fb      	ldr	r3, [r7, #12]
 803048e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030490:	781a      	ldrb	r2, [r3, #0]
 8030492:	68fb      	ldr	r3, [r7, #12]
 8030494:	681b      	ldr	r3, [r3, #0]
 8030496:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8030498:	68fb      	ldr	r3, [r7, #12]
 803049a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803049c:	1c5a      	adds	r2, r3, #1
 803049e:	68fb      	ldr	r3, [r7, #12]
 80304a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80304a2:	68fb      	ldr	r3, [r7, #12]
 80304a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80304a6:	b29b      	uxth	r3, r3
 80304a8:	3b01      	subs	r3, #1
 80304aa:	b29a      	uxth	r2, r3
 80304ac:	68fb      	ldr	r3, [r7, #12]
 80304ae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80304b0:	68fb      	ldr	r3, [r7, #12]
 80304b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80304b4:	3b01      	subs	r3, #1
 80304b6:	b29a      	uxth	r2, r3
 80304b8:	68fb      	ldr	r3, [r7, #12]
 80304ba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80304bc:	697a      	ldr	r2, [r7, #20]
 80304be:	6a39      	ldr	r1, [r7, #32]
 80304c0:	68f8      	ldr	r0, [r7, #12]
 80304c2:	f002 fb8b 	bl	8032bdc <I2C_WaitOnBTFFlagUntilTimeout>
 80304c6:	4603      	mov	r3, r0
 80304c8:	2b00      	cmp	r3, #0
 80304ca:	d00d      	beq.n	80304e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80304cc:	68fb      	ldr	r3, [r7, #12]
 80304ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80304d0:	2b04      	cmp	r3, #4
 80304d2:	d107      	bne.n	80304e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80304d4:	68fb      	ldr	r3, [r7, #12]
 80304d6:	681b      	ldr	r3, [r3, #0]
 80304d8:	681a      	ldr	r2, [r3, #0]
 80304da:	68fb      	ldr	r3, [r7, #12]
 80304dc:	681b      	ldr	r3, [r3, #0]
 80304de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80304e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80304e4:	2301      	movs	r3, #1
 80304e6:	e01a      	b.n	803051e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80304e8:	68fb      	ldr	r3, [r7, #12]
 80304ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80304ec:	2b00      	cmp	r3, #0
 80304ee:	d194      	bne.n	803041a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80304f0:	68fb      	ldr	r3, [r7, #12]
 80304f2:	681b      	ldr	r3, [r3, #0]
 80304f4:	681a      	ldr	r2, [r3, #0]
 80304f6:	68fb      	ldr	r3, [r7, #12]
 80304f8:	681b      	ldr	r3, [r3, #0]
 80304fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80304fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8030500:	68fb      	ldr	r3, [r7, #12]
 8030502:	2220      	movs	r2, #32
 8030504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8030508:	68fb      	ldr	r3, [r7, #12]
 803050a:	2200      	movs	r2, #0
 803050c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8030510:	68fb      	ldr	r3, [r7, #12]
 8030512:	2200      	movs	r2, #0
 8030514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8030518:	2300      	movs	r3, #0
 803051a:	e000      	b.n	803051e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 803051c:	2302      	movs	r3, #2
  }
}
 803051e:	4618      	mov	r0, r3
 8030520:	3718      	adds	r7, #24
 8030522:	46bd      	mov	sp, r7
 8030524:	bd80      	pop	{r7, pc}
 8030526:	bf00      	nop
 8030528:	00100002 	.word	0x00100002
 803052c:	ffff0000 	.word	0xffff0000

08030530 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8030530:	b580      	push	{r7, lr}
 8030532:	b088      	sub	sp, #32
 8030534:	af02      	add	r7, sp, #8
 8030536:	60f8      	str	r0, [r7, #12]
 8030538:	4608      	mov	r0, r1
 803053a:	4611      	mov	r1, r2
 803053c:	461a      	mov	r2, r3
 803053e:	4603      	mov	r3, r0
 8030540:	817b      	strh	r3, [r7, #10]
 8030542:	460b      	mov	r3, r1
 8030544:	813b      	strh	r3, [r7, #8]
 8030546:	4613      	mov	r3, r2
 8030548:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 803054a:	f7fb fe7d 	bl	802c248 <HAL_GetTick>
 803054e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8030550:	68fb      	ldr	r3, [r7, #12]
 8030552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8030556:	b2db      	uxtb	r3, r3
 8030558:	2b20      	cmp	r3, #32
 803055a:	f040 80d9 	bne.w	8030710 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 803055e:	697b      	ldr	r3, [r7, #20]
 8030560:	9300      	str	r3, [sp, #0]
 8030562:	2319      	movs	r3, #25
 8030564:	2201      	movs	r2, #1
 8030566:	496d      	ldr	r1, [pc, #436]	; (803071c <HAL_I2C_Mem_Write+0x1ec>)
 8030568:	68f8      	ldr	r0, [r7, #12]
 803056a:	f002 fa20 	bl	80329ae <I2C_WaitOnFlagUntilTimeout>
 803056e:	4603      	mov	r3, r0
 8030570:	2b00      	cmp	r3, #0
 8030572:	d001      	beq.n	8030578 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8030574:	2302      	movs	r3, #2
 8030576:	e0cc      	b.n	8030712 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8030578:	68fb      	ldr	r3, [r7, #12]
 803057a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 803057e:	2b01      	cmp	r3, #1
 8030580:	d101      	bne.n	8030586 <HAL_I2C_Mem_Write+0x56>
 8030582:	2302      	movs	r3, #2
 8030584:	e0c5      	b.n	8030712 <HAL_I2C_Mem_Write+0x1e2>
 8030586:	68fb      	ldr	r3, [r7, #12]
 8030588:	2201      	movs	r2, #1
 803058a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 803058e:	68fb      	ldr	r3, [r7, #12]
 8030590:	681b      	ldr	r3, [r3, #0]
 8030592:	681b      	ldr	r3, [r3, #0]
 8030594:	f003 0301 	and.w	r3, r3, #1
 8030598:	2b01      	cmp	r3, #1
 803059a:	d007      	beq.n	80305ac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 803059c:	68fb      	ldr	r3, [r7, #12]
 803059e:	681b      	ldr	r3, [r3, #0]
 80305a0:	681a      	ldr	r2, [r3, #0]
 80305a2:	68fb      	ldr	r3, [r7, #12]
 80305a4:	681b      	ldr	r3, [r3, #0]
 80305a6:	f042 0201 	orr.w	r2, r2, #1
 80305aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80305ac:	68fb      	ldr	r3, [r7, #12]
 80305ae:	681b      	ldr	r3, [r3, #0]
 80305b0:	681a      	ldr	r2, [r3, #0]
 80305b2:	68fb      	ldr	r3, [r7, #12]
 80305b4:	681b      	ldr	r3, [r3, #0]
 80305b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80305ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80305bc:	68fb      	ldr	r3, [r7, #12]
 80305be:	2221      	movs	r2, #33	; 0x21
 80305c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80305c4:	68fb      	ldr	r3, [r7, #12]
 80305c6:	2240      	movs	r2, #64	; 0x40
 80305c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80305cc:	68fb      	ldr	r3, [r7, #12]
 80305ce:	2200      	movs	r2, #0
 80305d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80305d2:	68fb      	ldr	r3, [r7, #12]
 80305d4:	6a3a      	ldr	r2, [r7, #32]
 80305d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80305d8:	68fb      	ldr	r3, [r7, #12]
 80305da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80305dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80305de:	68fb      	ldr	r3, [r7, #12]
 80305e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80305e2:	b29a      	uxth	r2, r3
 80305e4:	68fb      	ldr	r3, [r7, #12]
 80305e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80305e8:	68fb      	ldr	r3, [r7, #12]
 80305ea:	4a4d      	ldr	r2, [pc, #308]	; (8030720 <HAL_I2C_Mem_Write+0x1f0>)
 80305ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80305ee:	88f8      	ldrh	r0, [r7, #6]
 80305f0:	893a      	ldrh	r2, [r7, #8]
 80305f2:	8979      	ldrh	r1, [r7, #10]
 80305f4:	697b      	ldr	r3, [r7, #20]
 80305f6:	9301      	str	r3, [sp, #4]
 80305f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80305fa:	9300      	str	r3, [sp, #0]
 80305fc:	4603      	mov	r3, r0
 80305fe:	68f8      	ldr	r0, [r7, #12]
 8030600:	f001 ffdc 	bl	80325bc <I2C_RequestMemoryWrite>
 8030604:	4603      	mov	r3, r0
 8030606:	2b00      	cmp	r3, #0
 8030608:	d052      	beq.n	80306b0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 803060a:	2301      	movs	r3, #1
 803060c:	e081      	b.n	8030712 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 803060e:	697a      	ldr	r2, [r7, #20]
 8030610:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8030612:	68f8      	ldr	r0, [r7, #12]
 8030614:	f002 faa1 	bl	8032b5a <I2C_WaitOnTXEFlagUntilTimeout>
 8030618:	4603      	mov	r3, r0
 803061a:	2b00      	cmp	r3, #0
 803061c:	d00d      	beq.n	803063a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 803061e:	68fb      	ldr	r3, [r7, #12]
 8030620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8030622:	2b04      	cmp	r3, #4
 8030624:	d107      	bne.n	8030636 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8030626:	68fb      	ldr	r3, [r7, #12]
 8030628:	681b      	ldr	r3, [r3, #0]
 803062a:	681a      	ldr	r2, [r3, #0]
 803062c:	68fb      	ldr	r3, [r7, #12]
 803062e:	681b      	ldr	r3, [r3, #0]
 8030630:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8030634:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8030636:	2301      	movs	r3, #1
 8030638:	e06b      	b.n	8030712 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 803063a:	68fb      	ldr	r3, [r7, #12]
 803063c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803063e:	781a      	ldrb	r2, [r3, #0]
 8030640:	68fb      	ldr	r3, [r7, #12]
 8030642:	681b      	ldr	r3, [r3, #0]
 8030644:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8030646:	68fb      	ldr	r3, [r7, #12]
 8030648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803064a:	1c5a      	adds	r2, r3, #1
 803064c:	68fb      	ldr	r3, [r7, #12]
 803064e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8030650:	68fb      	ldr	r3, [r7, #12]
 8030652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8030654:	3b01      	subs	r3, #1
 8030656:	b29a      	uxth	r2, r3
 8030658:	68fb      	ldr	r3, [r7, #12]
 803065a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 803065c:	68fb      	ldr	r3, [r7, #12]
 803065e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8030660:	b29b      	uxth	r3, r3
 8030662:	3b01      	subs	r3, #1
 8030664:	b29a      	uxth	r2, r3
 8030666:	68fb      	ldr	r3, [r7, #12]
 8030668:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 803066a:	68fb      	ldr	r3, [r7, #12]
 803066c:	681b      	ldr	r3, [r3, #0]
 803066e:	695b      	ldr	r3, [r3, #20]
 8030670:	f003 0304 	and.w	r3, r3, #4
 8030674:	2b04      	cmp	r3, #4
 8030676:	d11b      	bne.n	80306b0 <HAL_I2C_Mem_Write+0x180>
 8030678:	68fb      	ldr	r3, [r7, #12]
 803067a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 803067c:	2b00      	cmp	r3, #0
 803067e:	d017      	beq.n	80306b0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8030680:	68fb      	ldr	r3, [r7, #12]
 8030682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030684:	781a      	ldrb	r2, [r3, #0]
 8030686:	68fb      	ldr	r3, [r7, #12]
 8030688:	681b      	ldr	r3, [r3, #0]
 803068a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 803068c:	68fb      	ldr	r3, [r7, #12]
 803068e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030690:	1c5a      	adds	r2, r3, #1
 8030692:	68fb      	ldr	r3, [r7, #12]
 8030694:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8030696:	68fb      	ldr	r3, [r7, #12]
 8030698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 803069a:	3b01      	subs	r3, #1
 803069c:	b29a      	uxth	r2, r3
 803069e:	68fb      	ldr	r3, [r7, #12]
 80306a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80306a2:	68fb      	ldr	r3, [r7, #12]
 80306a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80306a6:	b29b      	uxth	r3, r3
 80306a8:	3b01      	subs	r3, #1
 80306aa:	b29a      	uxth	r2, r3
 80306ac:	68fb      	ldr	r3, [r7, #12]
 80306ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80306b0:	68fb      	ldr	r3, [r7, #12]
 80306b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80306b4:	2b00      	cmp	r3, #0
 80306b6:	d1aa      	bne.n	803060e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80306b8:	697a      	ldr	r2, [r7, #20]
 80306ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80306bc:	68f8      	ldr	r0, [r7, #12]
 80306be:	f002 fa8d 	bl	8032bdc <I2C_WaitOnBTFFlagUntilTimeout>
 80306c2:	4603      	mov	r3, r0
 80306c4:	2b00      	cmp	r3, #0
 80306c6:	d00d      	beq.n	80306e4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80306c8:	68fb      	ldr	r3, [r7, #12]
 80306ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80306cc:	2b04      	cmp	r3, #4
 80306ce:	d107      	bne.n	80306e0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80306d0:	68fb      	ldr	r3, [r7, #12]
 80306d2:	681b      	ldr	r3, [r3, #0]
 80306d4:	681a      	ldr	r2, [r3, #0]
 80306d6:	68fb      	ldr	r3, [r7, #12]
 80306d8:	681b      	ldr	r3, [r3, #0]
 80306da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80306de:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80306e0:	2301      	movs	r3, #1
 80306e2:	e016      	b.n	8030712 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80306e4:	68fb      	ldr	r3, [r7, #12]
 80306e6:	681b      	ldr	r3, [r3, #0]
 80306e8:	681a      	ldr	r2, [r3, #0]
 80306ea:	68fb      	ldr	r3, [r7, #12]
 80306ec:	681b      	ldr	r3, [r3, #0]
 80306ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80306f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80306f4:	68fb      	ldr	r3, [r7, #12]
 80306f6:	2220      	movs	r2, #32
 80306f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80306fc:	68fb      	ldr	r3, [r7, #12]
 80306fe:	2200      	movs	r2, #0
 8030700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8030704:	68fb      	ldr	r3, [r7, #12]
 8030706:	2200      	movs	r2, #0
 8030708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 803070c:	2300      	movs	r3, #0
 803070e:	e000      	b.n	8030712 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8030710:	2302      	movs	r3, #2
  }
}
 8030712:	4618      	mov	r0, r3
 8030714:	3718      	adds	r7, #24
 8030716:	46bd      	mov	sp, r7
 8030718:	bd80      	pop	{r7, pc}
 803071a:	bf00      	nop
 803071c:	00100002 	.word	0x00100002
 8030720:	ffff0000 	.word	0xffff0000

08030724 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8030724:	b580      	push	{r7, lr}
 8030726:	b08c      	sub	sp, #48	; 0x30
 8030728:	af02      	add	r7, sp, #8
 803072a:	60f8      	str	r0, [r7, #12]
 803072c:	4608      	mov	r0, r1
 803072e:	4611      	mov	r1, r2
 8030730:	461a      	mov	r2, r3
 8030732:	4603      	mov	r3, r0
 8030734:	817b      	strh	r3, [r7, #10]
 8030736:	460b      	mov	r3, r1
 8030738:	813b      	strh	r3, [r7, #8]
 803073a:	4613      	mov	r3, r2
 803073c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 803073e:	f7fb fd83 	bl	802c248 <HAL_GetTick>
 8030742:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8030744:	68fb      	ldr	r3, [r7, #12]
 8030746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 803074a:	b2db      	uxtb	r3, r3
 803074c:	2b20      	cmp	r3, #32
 803074e:	f040 8208 	bne.w	8030b62 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8030752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030754:	9300      	str	r3, [sp, #0]
 8030756:	2319      	movs	r3, #25
 8030758:	2201      	movs	r2, #1
 803075a:	497b      	ldr	r1, [pc, #492]	; (8030948 <HAL_I2C_Mem_Read+0x224>)
 803075c:	68f8      	ldr	r0, [r7, #12]
 803075e:	f002 f926 	bl	80329ae <I2C_WaitOnFlagUntilTimeout>
 8030762:	4603      	mov	r3, r0
 8030764:	2b00      	cmp	r3, #0
 8030766:	d001      	beq.n	803076c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8030768:	2302      	movs	r3, #2
 803076a:	e1fb      	b.n	8030b64 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 803076c:	68fb      	ldr	r3, [r7, #12]
 803076e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8030772:	2b01      	cmp	r3, #1
 8030774:	d101      	bne.n	803077a <HAL_I2C_Mem_Read+0x56>
 8030776:	2302      	movs	r3, #2
 8030778:	e1f4      	b.n	8030b64 <HAL_I2C_Mem_Read+0x440>
 803077a:	68fb      	ldr	r3, [r7, #12]
 803077c:	2201      	movs	r2, #1
 803077e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8030782:	68fb      	ldr	r3, [r7, #12]
 8030784:	681b      	ldr	r3, [r3, #0]
 8030786:	681b      	ldr	r3, [r3, #0]
 8030788:	f003 0301 	and.w	r3, r3, #1
 803078c:	2b01      	cmp	r3, #1
 803078e:	d007      	beq.n	80307a0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8030790:	68fb      	ldr	r3, [r7, #12]
 8030792:	681b      	ldr	r3, [r3, #0]
 8030794:	681a      	ldr	r2, [r3, #0]
 8030796:	68fb      	ldr	r3, [r7, #12]
 8030798:	681b      	ldr	r3, [r3, #0]
 803079a:	f042 0201 	orr.w	r2, r2, #1
 803079e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80307a0:	68fb      	ldr	r3, [r7, #12]
 80307a2:	681b      	ldr	r3, [r3, #0]
 80307a4:	681a      	ldr	r2, [r3, #0]
 80307a6:	68fb      	ldr	r3, [r7, #12]
 80307a8:	681b      	ldr	r3, [r3, #0]
 80307aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80307ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80307b0:	68fb      	ldr	r3, [r7, #12]
 80307b2:	2222      	movs	r2, #34	; 0x22
 80307b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80307b8:	68fb      	ldr	r3, [r7, #12]
 80307ba:	2240      	movs	r2, #64	; 0x40
 80307bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80307c0:	68fb      	ldr	r3, [r7, #12]
 80307c2:	2200      	movs	r2, #0
 80307c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80307c6:	68fb      	ldr	r3, [r7, #12]
 80307c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80307ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80307cc:	68fb      	ldr	r3, [r7, #12]
 80307ce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80307d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80307d2:	68fb      	ldr	r3, [r7, #12]
 80307d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80307d6:	b29a      	uxth	r2, r3
 80307d8:	68fb      	ldr	r3, [r7, #12]
 80307da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80307dc:	68fb      	ldr	r3, [r7, #12]
 80307de:	4a5b      	ldr	r2, [pc, #364]	; (803094c <HAL_I2C_Mem_Read+0x228>)
 80307e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80307e2:	88f8      	ldrh	r0, [r7, #6]
 80307e4:	893a      	ldrh	r2, [r7, #8]
 80307e6:	8979      	ldrh	r1, [r7, #10]
 80307e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80307ea:	9301      	str	r3, [sp, #4]
 80307ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80307ee:	9300      	str	r3, [sp, #0]
 80307f0:	4603      	mov	r3, r0
 80307f2:	68f8      	ldr	r0, [r7, #12]
 80307f4:	f001 ff76 	bl	80326e4 <I2C_RequestMemoryRead>
 80307f8:	4603      	mov	r3, r0
 80307fa:	2b00      	cmp	r3, #0
 80307fc:	d001      	beq.n	8030802 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80307fe:	2301      	movs	r3, #1
 8030800:	e1b0      	b.n	8030b64 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8030802:	68fb      	ldr	r3, [r7, #12]
 8030804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8030806:	2b00      	cmp	r3, #0
 8030808:	d113      	bne.n	8030832 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 803080a:	2300      	movs	r3, #0
 803080c:	623b      	str	r3, [r7, #32]
 803080e:	68fb      	ldr	r3, [r7, #12]
 8030810:	681b      	ldr	r3, [r3, #0]
 8030812:	695b      	ldr	r3, [r3, #20]
 8030814:	623b      	str	r3, [r7, #32]
 8030816:	68fb      	ldr	r3, [r7, #12]
 8030818:	681b      	ldr	r3, [r3, #0]
 803081a:	699b      	ldr	r3, [r3, #24]
 803081c:	623b      	str	r3, [r7, #32]
 803081e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8030820:	68fb      	ldr	r3, [r7, #12]
 8030822:	681b      	ldr	r3, [r3, #0]
 8030824:	681a      	ldr	r2, [r3, #0]
 8030826:	68fb      	ldr	r3, [r7, #12]
 8030828:	681b      	ldr	r3, [r3, #0]
 803082a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 803082e:	601a      	str	r2, [r3, #0]
 8030830:	e184      	b.n	8030b3c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8030832:	68fb      	ldr	r3, [r7, #12]
 8030834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8030836:	2b01      	cmp	r3, #1
 8030838:	d11b      	bne.n	8030872 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 803083a:	68fb      	ldr	r3, [r7, #12]
 803083c:	681b      	ldr	r3, [r3, #0]
 803083e:	681a      	ldr	r2, [r3, #0]
 8030840:	68fb      	ldr	r3, [r7, #12]
 8030842:	681b      	ldr	r3, [r3, #0]
 8030844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8030848:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 803084a:	2300      	movs	r3, #0
 803084c:	61fb      	str	r3, [r7, #28]
 803084e:	68fb      	ldr	r3, [r7, #12]
 8030850:	681b      	ldr	r3, [r3, #0]
 8030852:	695b      	ldr	r3, [r3, #20]
 8030854:	61fb      	str	r3, [r7, #28]
 8030856:	68fb      	ldr	r3, [r7, #12]
 8030858:	681b      	ldr	r3, [r3, #0]
 803085a:	699b      	ldr	r3, [r3, #24]
 803085c:	61fb      	str	r3, [r7, #28]
 803085e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8030860:	68fb      	ldr	r3, [r7, #12]
 8030862:	681b      	ldr	r3, [r3, #0]
 8030864:	681a      	ldr	r2, [r3, #0]
 8030866:	68fb      	ldr	r3, [r7, #12]
 8030868:	681b      	ldr	r3, [r3, #0]
 803086a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 803086e:	601a      	str	r2, [r3, #0]
 8030870:	e164      	b.n	8030b3c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8030872:	68fb      	ldr	r3, [r7, #12]
 8030874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8030876:	2b02      	cmp	r3, #2
 8030878:	d11b      	bne.n	80308b2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 803087a:	68fb      	ldr	r3, [r7, #12]
 803087c:	681b      	ldr	r3, [r3, #0]
 803087e:	681a      	ldr	r2, [r3, #0]
 8030880:	68fb      	ldr	r3, [r7, #12]
 8030882:	681b      	ldr	r3, [r3, #0]
 8030884:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8030888:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 803088a:	68fb      	ldr	r3, [r7, #12]
 803088c:	681b      	ldr	r3, [r3, #0]
 803088e:	681a      	ldr	r2, [r3, #0]
 8030890:	68fb      	ldr	r3, [r7, #12]
 8030892:	681b      	ldr	r3, [r3, #0]
 8030894:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8030898:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 803089a:	2300      	movs	r3, #0
 803089c:	61bb      	str	r3, [r7, #24]
 803089e:	68fb      	ldr	r3, [r7, #12]
 80308a0:	681b      	ldr	r3, [r3, #0]
 80308a2:	695b      	ldr	r3, [r3, #20]
 80308a4:	61bb      	str	r3, [r7, #24]
 80308a6:	68fb      	ldr	r3, [r7, #12]
 80308a8:	681b      	ldr	r3, [r3, #0]
 80308aa:	699b      	ldr	r3, [r3, #24]
 80308ac:	61bb      	str	r3, [r7, #24]
 80308ae:	69bb      	ldr	r3, [r7, #24]
 80308b0:	e144      	b.n	8030b3c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80308b2:	2300      	movs	r3, #0
 80308b4:	617b      	str	r3, [r7, #20]
 80308b6:	68fb      	ldr	r3, [r7, #12]
 80308b8:	681b      	ldr	r3, [r3, #0]
 80308ba:	695b      	ldr	r3, [r3, #20]
 80308bc:	617b      	str	r3, [r7, #20]
 80308be:	68fb      	ldr	r3, [r7, #12]
 80308c0:	681b      	ldr	r3, [r3, #0]
 80308c2:	699b      	ldr	r3, [r3, #24]
 80308c4:	617b      	str	r3, [r7, #20]
 80308c6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80308c8:	e138      	b.n	8030b3c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80308ca:	68fb      	ldr	r3, [r7, #12]
 80308cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80308ce:	2b03      	cmp	r3, #3
 80308d0:	f200 80f1 	bhi.w	8030ab6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80308d4:	68fb      	ldr	r3, [r7, #12]
 80308d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80308d8:	2b01      	cmp	r3, #1
 80308da:	d123      	bne.n	8030924 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80308dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80308de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80308e0:	68f8      	ldr	r0, [r7, #12]
 80308e2:	f002 f9bc 	bl	8032c5e <I2C_WaitOnRXNEFlagUntilTimeout>
 80308e6:	4603      	mov	r3, r0
 80308e8:	2b00      	cmp	r3, #0
 80308ea:	d001      	beq.n	80308f0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80308ec:	2301      	movs	r3, #1
 80308ee:	e139      	b.n	8030b64 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80308f0:	68fb      	ldr	r3, [r7, #12]
 80308f2:	681b      	ldr	r3, [r3, #0]
 80308f4:	691a      	ldr	r2, [r3, #16]
 80308f6:	68fb      	ldr	r3, [r7, #12]
 80308f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80308fa:	b2d2      	uxtb	r2, r2
 80308fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80308fe:	68fb      	ldr	r3, [r7, #12]
 8030900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030902:	1c5a      	adds	r2, r3, #1
 8030904:	68fb      	ldr	r3, [r7, #12]
 8030906:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8030908:	68fb      	ldr	r3, [r7, #12]
 803090a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 803090c:	3b01      	subs	r3, #1
 803090e:	b29a      	uxth	r2, r3
 8030910:	68fb      	ldr	r3, [r7, #12]
 8030912:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8030914:	68fb      	ldr	r3, [r7, #12]
 8030916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8030918:	b29b      	uxth	r3, r3
 803091a:	3b01      	subs	r3, #1
 803091c:	b29a      	uxth	r2, r3
 803091e:	68fb      	ldr	r3, [r7, #12]
 8030920:	855a      	strh	r2, [r3, #42]	; 0x2a
 8030922:	e10b      	b.n	8030b3c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8030924:	68fb      	ldr	r3, [r7, #12]
 8030926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8030928:	2b02      	cmp	r3, #2
 803092a:	d14e      	bne.n	80309ca <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 803092c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803092e:	9300      	str	r3, [sp, #0]
 8030930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8030932:	2200      	movs	r2, #0
 8030934:	4906      	ldr	r1, [pc, #24]	; (8030950 <HAL_I2C_Mem_Read+0x22c>)
 8030936:	68f8      	ldr	r0, [r7, #12]
 8030938:	f002 f839 	bl	80329ae <I2C_WaitOnFlagUntilTimeout>
 803093c:	4603      	mov	r3, r0
 803093e:	2b00      	cmp	r3, #0
 8030940:	d008      	beq.n	8030954 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8030942:	2301      	movs	r3, #1
 8030944:	e10e      	b.n	8030b64 <HAL_I2C_Mem_Read+0x440>
 8030946:	bf00      	nop
 8030948:	00100002 	.word	0x00100002
 803094c:	ffff0000 	.word	0xffff0000
 8030950:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8030954:	68fb      	ldr	r3, [r7, #12]
 8030956:	681b      	ldr	r3, [r3, #0]
 8030958:	681a      	ldr	r2, [r3, #0]
 803095a:	68fb      	ldr	r3, [r7, #12]
 803095c:	681b      	ldr	r3, [r3, #0]
 803095e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8030962:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8030964:	68fb      	ldr	r3, [r7, #12]
 8030966:	681b      	ldr	r3, [r3, #0]
 8030968:	691a      	ldr	r2, [r3, #16]
 803096a:	68fb      	ldr	r3, [r7, #12]
 803096c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803096e:	b2d2      	uxtb	r2, r2
 8030970:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8030972:	68fb      	ldr	r3, [r7, #12]
 8030974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030976:	1c5a      	adds	r2, r3, #1
 8030978:	68fb      	ldr	r3, [r7, #12]
 803097a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 803097c:	68fb      	ldr	r3, [r7, #12]
 803097e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8030980:	3b01      	subs	r3, #1
 8030982:	b29a      	uxth	r2, r3
 8030984:	68fb      	ldr	r3, [r7, #12]
 8030986:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8030988:	68fb      	ldr	r3, [r7, #12]
 803098a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 803098c:	b29b      	uxth	r3, r3
 803098e:	3b01      	subs	r3, #1
 8030990:	b29a      	uxth	r2, r3
 8030992:	68fb      	ldr	r3, [r7, #12]
 8030994:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8030996:	68fb      	ldr	r3, [r7, #12]
 8030998:	681b      	ldr	r3, [r3, #0]
 803099a:	691a      	ldr	r2, [r3, #16]
 803099c:	68fb      	ldr	r3, [r7, #12]
 803099e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80309a0:	b2d2      	uxtb	r2, r2
 80309a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80309a4:	68fb      	ldr	r3, [r7, #12]
 80309a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80309a8:	1c5a      	adds	r2, r3, #1
 80309aa:	68fb      	ldr	r3, [r7, #12]
 80309ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80309ae:	68fb      	ldr	r3, [r7, #12]
 80309b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80309b2:	3b01      	subs	r3, #1
 80309b4:	b29a      	uxth	r2, r3
 80309b6:	68fb      	ldr	r3, [r7, #12]
 80309b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80309ba:	68fb      	ldr	r3, [r7, #12]
 80309bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80309be:	b29b      	uxth	r3, r3
 80309c0:	3b01      	subs	r3, #1
 80309c2:	b29a      	uxth	r2, r3
 80309c4:	68fb      	ldr	r3, [r7, #12]
 80309c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80309c8:	e0b8      	b.n	8030b3c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80309ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80309cc:	9300      	str	r3, [sp, #0]
 80309ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80309d0:	2200      	movs	r2, #0
 80309d2:	4966      	ldr	r1, [pc, #408]	; (8030b6c <HAL_I2C_Mem_Read+0x448>)
 80309d4:	68f8      	ldr	r0, [r7, #12]
 80309d6:	f001 ffea 	bl	80329ae <I2C_WaitOnFlagUntilTimeout>
 80309da:	4603      	mov	r3, r0
 80309dc:	2b00      	cmp	r3, #0
 80309de:	d001      	beq.n	80309e4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80309e0:	2301      	movs	r3, #1
 80309e2:	e0bf      	b.n	8030b64 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80309e4:	68fb      	ldr	r3, [r7, #12]
 80309e6:	681b      	ldr	r3, [r3, #0]
 80309e8:	681a      	ldr	r2, [r3, #0]
 80309ea:	68fb      	ldr	r3, [r7, #12]
 80309ec:	681b      	ldr	r3, [r3, #0]
 80309ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80309f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80309f4:	68fb      	ldr	r3, [r7, #12]
 80309f6:	681b      	ldr	r3, [r3, #0]
 80309f8:	691a      	ldr	r2, [r3, #16]
 80309fa:	68fb      	ldr	r3, [r7, #12]
 80309fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80309fe:	b2d2      	uxtb	r2, r2
 8030a00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8030a02:	68fb      	ldr	r3, [r7, #12]
 8030a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030a06:	1c5a      	adds	r2, r3, #1
 8030a08:	68fb      	ldr	r3, [r7, #12]
 8030a0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8030a0c:	68fb      	ldr	r3, [r7, #12]
 8030a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8030a10:	3b01      	subs	r3, #1
 8030a12:	b29a      	uxth	r2, r3
 8030a14:	68fb      	ldr	r3, [r7, #12]
 8030a16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8030a18:	68fb      	ldr	r3, [r7, #12]
 8030a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8030a1c:	b29b      	uxth	r3, r3
 8030a1e:	3b01      	subs	r3, #1
 8030a20:	b29a      	uxth	r2, r3
 8030a22:	68fb      	ldr	r3, [r7, #12]
 8030a24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8030a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030a28:	9300      	str	r3, [sp, #0]
 8030a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8030a2c:	2200      	movs	r2, #0
 8030a2e:	494f      	ldr	r1, [pc, #316]	; (8030b6c <HAL_I2C_Mem_Read+0x448>)
 8030a30:	68f8      	ldr	r0, [r7, #12]
 8030a32:	f001 ffbc 	bl	80329ae <I2C_WaitOnFlagUntilTimeout>
 8030a36:	4603      	mov	r3, r0
 8030a38:	2b00      	cmp	r3, #0
 8030a3a:	d001      	beq.n	8030a40 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8030a3c:	2301      	movs	r3, #1
 8030a3e:	e091      	b.n	8030b64 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8030a40:	68fb      	ldr	r3, [r7, #12]
 8030a42:	681b      	ldr	r3, [r3, #0]
 8030a44:	681a      	ldr	r2, [r3, #0]
 8030a46:	68fb      	ldr	r3, [r7, #12]
 8030a48:	681b      	ldr	r3, [r3, #0]
 8030a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8030a4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8030a50:	68fb      	ldr	r3, [r7, #12]
 8030a52:	681b      	ldr	r3, [r3, #0]
 8030a54:	691a      	ldr	r2, [r3, #16]
 8030a56:	68fb      	ldr	r3, [r7, #12]
 8030a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030a5a:	b2d2      	uxtb	r2, r2
 8030a5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8030a5e:	68fb      	ldr	r3, [r7, #12]
 8030a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030a62:	1c5a      	adds	r2, r3, #1
 8030a64:	68fb      	ldr	r3, [r7, #12]
 8030a66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8030a68:	68fb      	ldr	r3, [r7, #12]
 8030a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8030a6c:	3b01      	subs	r3, #1
 8030a6e:	b29a      	uxth	r2, r3
 8030a70:	68fb      	ldr	r3, [r7, #12]
 8030a72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8030a74:	68fb      	ldr	r3, [r7, #12]
 8030a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8030a78:	b29b      	uxth	r3, r3
 8030a7a:	3b01      	subs	r3, #1
 8030a7c:	b29a      	uxth	r2, r3
 8030a7e:	68fb      	ldr	r3, [r7, #12]
 8030a80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8030a82:	68fb      	ldr	r3, [r7, #12]
 8030a84:	681b      	ldr	r3, [r3, #0]
 8030a86:	691a      	ldr	r2, [r3, #16]
 8030a88:	68fb      	ldr	r3, [r7, #12]
 8030a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030a8c:	b2d2      	uxtb	r2, r2
 8030a8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8030a90:	68fb      	ldr	r3, [r7, #12]
 8030a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030a94:	1c5a      	adds	r2, r3, #1
 8030a96:	68fb      	ldr	r3, [r7, #12]
 8030a98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8030a9a:	68fb      	ldr	r3, [r7, #12]
 8030a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8030a9e:	3b01      	subs	r3, #1
 8030aa0:	b29a      	uxth	r2, r3
 8030aa2:	68fb      	ldr	r3, [r7, #12]
 8030aa4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8030aa6:	68fb      	ldr	r3, [r7, #12]
 8030aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8030aaa:	b29b      	uxth	r3, r3
 8030aac:	3b01      	subs	r3, #1
 8030aae:	b29a      	uxth	r2, r3
 8030ab0:	68fb      	ldr	r3, [r7, #12]
 8030ab2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8030ab4:	e042      	b.n	8030b3c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8030ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8030ab8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8030aba:	68f8      	ldr	r0, [r7, #12]
 8030abc:	f002 f8cf 	bl	8032c5e <I2C_WaitOnRXNEFlagUntilTimeout>
 8030ac0:	4603      	mov	r3, r0
 8030ac2:	2b00      	cmp	r3, #0
 8030ac4:	d001      	beq.n	8030aca <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8030ac6:	2301      	movs	r3, #1
 8030ac8:	e04c      	b.n	8030b64 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8030aca:	68fb      	ldr	r3, [r7, #12]
 8030acc:	681b      	ldr	r3, [r3, #0]
 8030ace:	691a      	ldr	r2, [r3, #16]
 8030ad0:	68fb      	ldr	r3, [r7, #12]
 8030ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030ad4:	b2d2      	uxtb	r2, r2
 8030ad6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8030ad8:	68fb      	ldr	r3, [r7, #12]
 8030ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030adc:	1c5a      	adds	r2, r3, #1
 8030ade:	68fb      	ldr	r3, [r7, #12]
 8030ae0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8030ae2:	68fb      	ldr	r3, [r7, #12]
 8030ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8030ae6:	3b01      	subs	r3, #1
 8030ae8:	b29a      	uxth	r2, r3
 8030aea:	68fb      	ldr	r3, [r7, #12]
 8030aec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8030aee:	68fb      	ldr	r3, [r7, #12]
 8030af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8030af2:	b29b      	uxth	r3, r3
 8030af4:	3b01      	subs	r3, #1
 8030af6:	b29a      	uxth	r2, r3
 8030af8:	68fb      	ldr	r3, [r7, #12]
 8030afa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8030afc:	68fb      	ldr	r3, [r7, #12]
 8030afe:	681b      	ldr	r3, [r3, #0]
 8030b00:	695b      	ldr	r3, [r3, #20]
 8030b02:	f003 0304 	and.w	r3, r3, #4
 8030b06:	2b04      	cmp	r3, #4
 8030b08:	d118      	bne.n	8030b3c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8030b0a:	68fb      	ldr	r3, [r7, #12]
 8030b0c:	681b      	ldr	r3, [r3, #0]
 8030b0e:	691a      	ldr	r2, [r3, #16]
 8030b10:	68fb      	ldr	r3, [r7, #12]
 8030b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030b14:	b2d2      	uxtb	r2, r2
 8030b16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8030b18:	68fb      	ldr	r3, [r7, #12]
 8030b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030b1c:	1c5a      	adds	r2, r3, #1
 8030b1e:	68fb      	ldr	r3, [r7, #12]
 8030b20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8030b22:	68fb      	ldr	r3, [r7, #12]
 8030b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8030b26:	3b01      	subs	r3, #1
 8030b28:	b29a      	uxth	r2, r3
 8030b2a:	68fb      	ldr	r3, [r7, #12]
 8030b2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8030b2e:	68fb      	ldr	r3, [r7, #12]
 8030b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8030b32:	b29b      	uxth	r3, r3
 8030b34:	3b01      	subs	r3, #1
 8030b36:	b29a      	uxth	r2, r3
 8030b38:	68fb      	ldr	r3, [r7, #12]
 8030b3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8030b3c:	68fb      	ldr	r3, [r7, #12]
 8030b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8030b40:	2b00      	cmp	r3, #0
 8030b42:	f47f aec2 	bne.w	80308ca <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8030b46:	68fb      	ldr	r3, [r7, #12]
 8030b48:	2220      	movs	r2, #32
 8030b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8030b4e:	68fb      	ldr	r3, [r7, #12]
 8030b50:	2200      	movs	r2, #0
 8030b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8030b56:	68fb      	ldr	r3, [r7, #12]
 8030b58:	2200      	movs	r2, #0
 8030b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8030b5e:	2300      	movs	r3, #0
 8030b60:	e000      	b.n	8030b64 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8030b62:	2302      	movs	r3, #2
  }
}
 8030b64:	4618      	mov	r0, r3
 8030b66:	3728      	adds	r7, #40	; 0x28
 8030b68:	46bd      	mov	sp, r7
 8030b6a:	bd80      	pop	{r7, pc}
 8030b6c:	00010004 	.word	0x00010004

08030b70 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8030b70:	b580      	push	{r7, lr}
 8030b72:	b08a      	sub	sp, #40	; 0x28
 8030b74:	af02      	add	r7, sp, #8
 8030b76:	60f8      	str	r0, [r7, #12]
 8030b78:	607a      	str	r2, [r7, #4]
 8030b7a:	603b      	str	r3, [r7, #0]
 8030b7c:	460b      	mov	r3, r1
 8030b7e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8030b80:	f7fb fb62 	bl	802c248 <HAL_GetTick>
 8030b84:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8030b86:	2301      	movs	r3, #1
 8030b88:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8030b8a:	68fb      	ldr	r3, [r7, #12]
 8030b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8030b90:	b2db      	uxtb	r3, r3
 8030b92:	2b20      	cmp	r3, #32
 8030b94:	f040 8110 	bne.w	8030db8 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8030b98:	69fb      	ldr	r3, [r7, #28]
 8030b9a:	9300      	str	r3, [sp, #0]
 8030b9c:	2319      	movs	r3, #25
 8030b9e:	2201      	movs	r2, #1
 8030ba0:	4988      	ldr	r1, [pc, #544]	; (8030dc4 <HAL_I2C_IsDeviceReady+0x254>)
 8030ba2:	68f8      	ldr	r0, [r7, #12]
 8030ba4:	f001 ff03 	bl	80329ae <I2C_WaitOnFlagUntilTimeout>
 8030ba8:	4603      	mov	r3, r0
 8030baa:	2b00      	cmp	r3, #0
 8030bac:	d001      	beq.n	8030bb2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8030bae:	2302      	movs	r3, #2
 8030bb0:	e103      	b.n	8030dba <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8030bb2:	68fb      	ldr	r3, [r7, #12]
 8030bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8030bb8:	2b01      	cmp	r3, #1
 8030bba:	d101      	bne.n	8030bc0 <HAL_I2C_IsDeviceReady+0x50>
 8030bbc:	2302      	movs	r3, #2
 8030bbe:	e0fc      	b.n	8030dba <HAL_I2C_IsDeviceReady+0x24a>
 8030bc0:	68fb      	ldr	r3, [r7, #12]
 8030bc2:	2201      	movs	r2, #1
 8030bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8030bc8:	68fb      	ldr	r3, [r7, #12]
 8030bca:	681b      	ldr	r3, [r3, #0]
 8030bcc:	681b      	ldr	r3, [r3, #0]
 8030bce:	f003 0301 	and.w	r3, r3, #1
 8030bd2:	2b01      	cmp	r3, #1
 8030bd4:	d007      	beq.n	8030be6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8030bd6:	68fb      	ldr	r3, [r7, #12]
 8030bd8:	681b      	ldr	r3, [r3, #0]
 8030bda:	681a      	ldr	r2, [r3, #0]
 8030bdc:	68fb      	ldr	r3, [r7, #12]
 8030bde:	681b      	ldr	r3, [r3, #0]
 8030be0:	f042 0201 	orr.w	r2, r2, #1
 8030be4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8030be6:	68fb      	ldr	r3, [r7, #12]
 8030be8:	681b      	ldr	r3, [r3, #0]
 8030bea:	681a      	ldr	r2, [r3, #0]
 8030bec:	68fb      	ldr	r3, [r7, #12]
 8030bee:	681b      	ldr	r3, [r3, #0]
 8030bf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8030bf4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8030bf6:	68fb      	ldr	r3, [r7, #12]
 8030bf8:	2224      	movs	r2, #36	; 0x24
 8030bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8030bfe:	68fb      	ldr	r3, [r7, #12]
 8030c00:	2200      	movs	r2, #0
 8030c02:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8030c04:	68fb      	ldr	r3, [r7, #12]
 8030c06:	4a70      	ldr	r2, [pc, #448]	; (8030dc8 <HAL_I2C_IsDeviceReady+0x258>)
 8030c08:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8030c0a:	68fb      	ldr	r3, [r7, #12]
 8030c0c:	681b      	ldr	r3, [r3, #0]
 8030c0e:	681a      	ldr	r2, [r3, #0]
 8030c10:	68fb      	ldr	r3, [r7, #12]
 8030c12:	681b      	ldr	r3, [r3, #0]
 8030c14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8030c18:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8030c1a:	69fb      	ldr	r3, [r7, #28]
 8030c1c:	9300      	str	r3, [sp, #0]
 8030c1e:	683b      	ldr	r3, [r7, #0]
 8030c20:	2200      	movs	r2, #0
 8030c22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8030c26:	68f8      	ldr	r0, [r7, #12]
 8030c28:	f001 fec1 	bl	80329ae <I2C_WaitOnFlagUntilTimeout>
 8030c2c:	4603      	mov	r3, r0
 8030c2e:	2b00      	cmp	r3, #0
 8030c30:	d00c      	beq.n	8030c4c <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 8030c32:	68fb      	ldr	r3, [r7, #12]
 8030c34:	681b      	ldr	r3, [r3, #0]
 8030c36:	681b      	ldr	r3, [r3, #0]
 8030c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8030c3c:	2b00      	cmp	r3, #0
 8030c3e:	d003      	beq.n	8030c48 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8030c40:	68fb      	ldr	r3, [r7, #12]
 8030c42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8030c46:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8030c48:	2303      	movs	r3, #3
 8030c4a:	e0b6      	b.n	8030dba <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8030c4c:	897b      	ldrh	r3, [r7, #10]
 8030c4e:	b2db      	uxtb	r3, r3
 8030c50:	461a      	mov	r2, r3
 8030c52:	68fb      	ldr	r3, [r7, #12]
 8030c54:	681b      	ldr	r3, [r3, #0]
 8030c56:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8030c5a:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8030c5c:	f7fb faf4 	bl	802c248 <HAL_GetTick>
 8030c60:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8030c62:	68fb      	ldr	r3, [r7, #12]
 8030c64:	681b      	ldr	r3, [r3, #0]
 8030c66:	695b      	ldr	r3, [r3, #20]
 8030c68:	f003 0302 	and.w	r3, r3, #2
 8030c6c:	2b02      	cmp	r3, #2
 8030c6e:	bf0c      	ite	eq
 8030c70:	2301      	moveq	r3, #1
 8030c72:	2300      	movne	r3, #0
 8030c74:	b2db      	uxtb	r3, r3
 8030c76:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8030c78:	68fb      	ldr	r3, [r7, #12]
 8030c7a:	681b      	ldr	r3, [r3, #0]
 8030c7c:	695b      	ldr	r3, [r3, #20]
 8030c7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8030c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8030c86:	bf0c      	ite	eq
 8030c88:	2301      	moveq	r3, #1
 8030c8a:	2300      	movne	r3, #0
 8030c8c:	b2db      	uxtb	r3, r3
 8030c8e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8030c90:	e025      	b.n	8030cde <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8030c92:	f7fb fad9 	bl	802c248 <HAL_GetTick>
 8030c96:	4602      	mov	r2, r0
 8030c98:	69fb      	ldr	r3, [r7, #28]
 8030c9a:	1ad3      	subs	r3, r2, r3
 8030c9c:	683a      	ldr	r2, [r7, #0]
 8030c9e:	429a      	cmp	r2, r3
 8030ca0:	d302      	bcc.n	8030ca8 <HAL_I2C_IsDeviceReady+0x138>
 8030ca2:	683b      	ldr	r3, [r7, #0]
 8030ca4:	2b00      	cmp	r3, #0
 8030ca6:	d103      	bne.n	8030cb0 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8030ca8:	68fb      	ldr	r3, [r7, #12]
 8030caa:	22a0      	movs	r2, #160	; 0xa0
 8030cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8030cb0:	68fb      	ldr	r3, [r7, #12]
 8030cb2:	681b      	ldr	r3, [r3, #0]
 8030cb4:	695b      	ldr	r3, [r3, #20]
 8030cb6:	f003 0302 	and.w	r3, r3, #2
 8030cba:	2b02      	cmp	r3, #2
 8030cbc:	bf0c      	ite	eq
 8030cbe:	2301      	moveq	r3, #1
 8030cc0:	2300      	movne	r3, #0
 8030cc2:	b2db      	uxtb	r3, r3
 8030cc4:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8030cc6:	68fb      	ldr	r3, [r7, #12]
 8030cc8:	681b      	ldr	r3, [r3, #0]
 8030cca:	695b      	ldr	r3, [r3, #20]
 8030ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8030cd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8030cd4:	bf0c      	ite	eq
 8030cd6:	2301      	moveq	r3, #1
 8030cd8:	2300      	movne	r3, #0
 8030cda:	b2db      	uxtb	r3, r3
 8030cdc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8030cde:	68fb      	ldr	r3, [r7, #12]
 8030ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8030ce4:	b2db      	uxtb	r3, r3
 8030ce6:	2ba0      	cmp	r3, #160	; 0xa0
 8030ce8:	d005      	beq.n	8030cf6 <HAL_I2C_IsDeviceReady+0x186>
 8030cea:	7dfb      	ldrb	r3, [r7, #23]
 8030cec:	2b00      	cmp	r3, #0
 8030cee:	d102      	bne.n	8030cf6 <HAL_I2C_IsDeviceReady+0x186>
 8030cf0:	7dbb      	ldrb	r3, [r7, #22]
 8030cf2:	2b00      	cmp	r3, #0
 8030cf4:	d0cd      	beq.n	8030c92 <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8030cf6:	68fb      	ldr	r3, [r7, #12]
 8030cf8:	2220      	movs	r2, #32
 8030cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8030cfe:	68fb      	ldr	r3, [r7, #12]
 8030d00:	681b      	ldr	r3, [r3, #0]
 8030d02:	695b      	ldr	r3, [r3, #20]
 8030d04:	f003 0302 	and.w	r3, r3, #2
 8030d08:	2b02      	cmp	r3, #2
 8030d0a:	d129      	bne.n	8030d60 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8030d0c:	68fb      	ldr	r3, [r7, #12]
 8030d0e:	681b      	ldr	r3, [r3, #0]
 8030d10:	681a      	ldr	r2, [r3, #0]
 8030d12:	68fb      	ldr	r3, [r7, #12]
 8030d14:	681b      	ldr	r3, [r3, #0]
 8030d16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8030d1a:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8030d1c:	2300      	movs	r3, #0
 8030d1e:	613b      	str	r3, [r7, #16]
 8030d20:	68fb      	ldr	r3, [r7, #12]
 8030d22:	681b      	ldr	r3, [r3, #0]
 8030d24:	695b      	ldr	r3, [r3, #20]
 8030d26:	613b      	str	r3, [r7, #16]
 8030d28:	68fb      	ldr	r3, [r7, #12]
 8030d2a:	681b      	ldr	r3, [r3, #0]
 8030d2c:	699b      	ldr	r3, [r3, #24]
 8030d2e:	613b      	str	r3, [r7, #16]
 8030d30:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8030d32:	69fb      	ldr	r3, [r7, #28]
 8030d34:	9300      	str	r3, [sp, #0]
 8030d36:	2319      	movs	r3, #25
 8030d38:	2201      	movs	r2, #1
 8030d3a:	4922      	ldr	r1, [pc, #136]	; (8030dc4 <HAL_I2C_IsDeviceReady+0x254>)
 8030d3c:	68f8      	ldr	r0, [r7, #12]
 8030d3e:	f001 fe36 	bl	80329ae <I2C_WaitOnFlagUntilTimeout>
 8030d42:	4603      	mov	r3, r0
 8030d44:	2b00      	cmp	r3, #0
 8030d46:	d001      	beq.n	8030d4c <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8030d48:	2301      	movs	r3, #1
 8030d4a:	e036      	b.n	8030dba <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8030d4c:	68fb      	ldr	r3, [r7, #12]
 8030d4e:	2220      	movs	r2, #32
 8030d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8030d54:	68fb      	ldr	r3, [r7, #12]
 8030d56:	2200      	movs	r2, #0
 8030d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8030d5c:	2300      	movs	r3, #0
 8030d5e:	e02c      	b.n	8030dba <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8030d60:	68fb      	ldr	r3, [r7, #12]
 8030d62:	681b      	ldr	r3, [r3, #0]
 8030d64:	681a      	ldr	r2, [r3, #0]
 8030d66:	68fb      	ldr	r3, [r7, #12]
 8030d68:	681b      	ldr	r3, [r3, #0]
 8030d6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8030d6e:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8030d70:	68fb      	ldr	r3, [r7, #12]
 8030d72:	681b      	ldr	r3, [r3, #0]
 8030d74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8030d78:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8030d7a:	69fb      	ldr	r3, [r7, #28]
 8030d7c:	9300      	str	r3, [sp, #0]
 8030d7e:	2319      	movs	r3, #25
 8030d80:	2201      	movs	r2, #1
 8030d82:	4910      	ldr	r1, [pc, #64]	; (8030dc4 <HAL_I2C_IsDeviceReady+0x254>)
 8030d84:	68f8      	ldr	r0, [r7, #12]
 8030d86:	f001 fe12 	bl	80329ae <I2C_WaitOnFlagUntilTimeout>
 8030d8a:	4603      	mov	r3, r0
 8030d8c:	2b00      	cmp	r3, #0
 8030d8e:	d001      	beq.n	8030d94 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8030d90:	2301      	movs	r3, #1
 8030d92:	e012      	b.n	8030dba <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8030d94:	69bb      	ldr	r3, [r7, #24]
 8030d96:	3301      	adds	r3, #1
 8030d98:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8030d9a:	69ba      	ldr	r2, [r7, #24]
 8030d9c:	687b      	ldr	r3, [r7, #4]
 8030d9e:	429a      	cmp	r2, r3
 8030da0:	f4ff af33 	bcc.w	8030c0a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8030da4:	68fb      	ldr	r3, [r7, #12]
 8030da6:	2220      	movs	r2, #32
 8030da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8030dac:	68fb      	ldr	r3, [r7, #12]
 8030dae:	2200      	movs	r2, #0
 8030db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8030db4:	2301      	movs	r3, #1
 8030db6:	e000      	b.n	8030dba <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8030db8:	2302      	movs	r3, #2
  }
}
 8030dba:	4618      	mov	r0, r3
 8030dbc:	3720      	adds	r7, #32
 8030dbe:	46bd      	mov	sp, r7
 8030dc0:	bd80      	pop	{r7, pc}
 8030dc2:	bf00      	nop
 8030dc4:	00100002 	.word	0x00100002
 8030dc8:	ffff0000 	.word	0xffff0000

08030dcc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8030dcc:	b580      	push	{r7, lr}
 8030dce:	b088      	sub	sp, #32
 8030dd0:	af00      	add	r7, sp, #0
 8030dd2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8030dd4:	2300      	movs	r3, #0
 8030dd6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8030dd8:	687b      	ldr	r3, [r7, #4]
 8030dda:	681b      	ldr	r3, [r3, #0]
 8030ddc:	685b      	ldr	r3, [r3, #4]
 8030dde:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8030de0:	687b      	ldr	r3, [r7, #4]
 8030de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8030de4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8030de6:	687b      	ldr	r3, [r7, #4]
 8030de8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8030dec:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8030dee:	687b      	ldr	r3, [r7, #4]
 8030df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8030df4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8030df6:	7bfb      	ldrb	r3, [r7, #15]
 8030df8:	2b10      	cmp	r3, #16
 8030dfa:	d003      	beq.n	8030e04 <HAL_I2C_EV_IRQHandler+0x38>
 8030dfc:	7bfb      	ldrb	r3, [r7, #15]
 8030dfe:	2b40      	cmp	r3, #64	; 0x40
 8030e00:	f040 80b6 	bne.w	8030f70 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8030e04:	687b      	ldr	r3, [r7, #4]
 8030e06:	681b      	ldr	r3, [r3, #0]
 8030e08:	699b      	ldr	r3, [r3, #24]
 8030e0a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8030e0c:	687b      	ldr	r3, [r7, #4]
 8030e0e:	681b      	ldr	r3, [r3, #0]
 8030e10:	695b      	ldr	r3, [r3, #20]
 8030e12:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8030e14:	69fb      	ldr	r3, [r7, #28]
 8030e16:	f003 0301 	and.w	r3, r3, #1
 8030e1a:	2b00      	cmp	r3, #0
 8030e1c:	d10d      	bne.n	8030e3a <HAL_I2C_EV_IRQHandler+0x6e>
 8030e1e:	693b      	ldr	r3, [r7, #16]
 8030e20:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8030e24:	d003      	beq.n	8030e2e <HAL_I2C_EV_IRQHandler+0x62>
 8030e26:	693b      	ldr	r3, [r7, #16]
 8030e28:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8030e2c:	d101      	bne.n	8030e32 <HAL_I2C_EV_IRQHandler+0x66>
 8030e2e:	2301      	movs	r3, #1
 8030e30:	e000      	b.n	8030e34 <HAL_I2C_EV_IRQHandler+0x68>
 8030e32:	2300      	movs	r3, #0
 8030e34:	2b01      	cmp	r3, #1
 8030e36:	f000 8127 	beq.w	8031088 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8030e3a:	69fb      	ldr	r3, [r7, #28]
 8030e3c:	f003 0301 	and.w	r3, r3, #1
 8030e40:	2b00      	cmp	r3, #0
 8030e42:	d00c      	beq.n	8030e5e <HAL_I2C_EV_IRQHandler+0x92>
 8030e44:	697b      	ldr	r3, [r7, #20]
 8030e46:	0a5b      	lsrs	r3, r3, #9
 8030e48:	f003 0301 	and.w	r3, r3, #1
 8030e4c:	2b00      	cmp	r3, #0
 8030e4e:	d006      	beq.n	8030e5e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8030e50:	6878      	ldr	r0, [r7, #4]
 8030e52:	f001 ff89 	bl	8032d68 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8030e56:	6878      	ldr	r0, [r7, #4]
 8030e58:	f000 fd1c 	bl	8031894 <I2C_Master_SB>
 8030e5c:	e087      	b.n	8030f6e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8030e5e:	69fb      	ldr	r3, [r7, #28]
 8030e60:	08db      	lsrs	r3, r3, #3
 8030e62:	f003 0301 	and.w	r3, r3, #1
 8030e66:	2b00      	cmp	r3, #0
 8030e68:	d009      	beq.n	8030e7e <HAL_I2C_EV_IRQHandler+0xb2>
 8030e6a:	697b      	ldr	r3, [r7, #20]
 8030e6c:	0a5b      	lsrs	r3, r3, #9
 8030e6e:	f003 0301 	and.w	r3, r3, #1
 8030e72:	2b00      	cmp	r3, #0
 8030e74:	d003      	beq.n	8030e7e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8030e76:	6878      	ldr	r0, [r7, #4]
 8030e78:	f000 fd92 	bl	80319a0 <I2C_Master_ADD10>
 8030e7c:	e077      	b.n	8030f6e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8030e7e:	69fb      	ldr	r3, [r7, #28]
 8030e80:	085b      	lsrs	r3, r3, #1
 8030e82:	f003 0301 	and.w	r3, r3, #1
 8030e86:	2b00      	cmp	r3, #0
 8030e88:	d009      	beq.n	8030e9e <HAL_I2C_EV_IRQHandler+0xd2>
 8030e8a:	697b      	ldr	r3, [r7, #20]
 8030e8c:	0a5b      	lsrs	r3, r3, #9
 8030e8e:	f003 0301 	and.w	r3, r3, #1
 8030e92:	2b00      	cmp	r3, #0
 8030e94:	d003      	beq.n	8030e9e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8030e96:	6878      	ldr	r0, [r7, #4]
 8030e98:	f000 fdac 	bl	80319f4 <I2C_Master_ADDR>
 8030e9c:	e067      	b.n	8030f6e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8030e9e:	69bb      	ldr	r3, [r7, #24]
 8030ea0:	089b      	lsrs	r3, r3, #2
 8030ea2:	f003 0301 	and.w	r3, r3, #1
 8030ea6:	2b00      	cmp	r3, #0
 8030ea8:	d030      	beq.n	8030f0c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8030eaa:	687b      	ldr	r3, [r7, #4]
 8030eac:	681b      	ldr	r3, [r3, #0]
 8030eae:	685b      	ldr	r3, [r3, #4]
 8030eb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8030eb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8030eb8:	f000 80e8 	beq.w	803108c <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8030ebc:	69fb      	ldr	r3, [r7, #28]
 8030ebe:	09db      	lsrs	r3, r3, #7
 8030ec0:	f003 0301 	and.w	r3, r3, #1
 8030ec4:	2b00      	cmp	r3, #0
 8030ec6:	d00f      	beq.n	8030ee8 <HAL_I2C_EV_IRQHandler+0x11c>
 8030ec8:	697b      	ldr	r3, [r7, #20]
 8030eca:	0a9b      	lsrs	r3, r3, #10
 8030ecc:	f003 0301 	and.w	r3, r3, #1
 8030ed0:	2b00      	cmp	r3, #0
 8030ed2:	d009      	beq.n	8030ee8 <HAL_I2C_EV_IRQHandler+0x11c>
 8030ed4:	69fb      	ldr	r3, [r7, #28]
 8030ed6:	089b      	lsrs	r3, r3, #2
 8030ed8:	f003 0301 	and.w	r3, r3, #1
 8030edc:	2b00      	cmp	r3, #0
 8030ede:	d103      	bne.n	8030ee8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8030ee0:	6878      	ldr	r0, [r7, #4]
 8030ee2:	f000 f9e8 	bl	80312b6 <I2C_MasterTransmit_TXE>
 8030ee6:	e042      	b.n	8030f6e <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8030ee8:	69fb      	ldr	r3, [r7, #28]
 8030eea:	089b      	lsrs	r3, r3, #2
 8030eec:	f003 0301 	and.w	r3, r3, #1
 8030ef0:	2b00      	cmp	r3, #0
 8030ef2:	f000 80cb 	beq.w	803108c <HAL_I2C_EV_IRQHandler+0x2c0>
 8030ef6:	697b      	ldr	r3, [r7, #20]
 8030ef8:	0a5b      	lsrs	r3, r3, #9
 8030efa:	f003 0301 	and.w	r3, r3, #1
 8030efe:	2b00      	cmp	r3, #0
 8030f00:	f000 80c4 	beq.w	803108c <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8030f04:	6878      	ldr	r0, [r7, #4]
 8030f06:	f000 fa72 	bl	80313ee <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8030f0a:	e0bf      	b.n	803108c <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8030f0c:	687b      	ldr	r3, [r7, #4]
 8030f0e:	681b      	ldr	r3, [r3, #0]
 8030f10:	685b      	ldr	r3, [r3, #4]
 8030f12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8030f16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8030f1a:	f000 80b7 	beq.w	803108c <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8030f1e:	69fb      	ldr	r3, [r7, #28]
 8030f20:	099b      	lsrs	r3, r3, #6
 8030f22:	f003 0301 	and.w	r3, r3, #1
 8030f26:	2b00      	cmp	r3, #0
 8030f28:	d00f      	beq.n	8030f4a <HAL_I2C_EV_IRQHandler+0x17e>
 8030f2a:	697b      	ldr	r3, [r7, #20]
 8030f2c:	0a9b      	lsrs	r3, r3, #10
 8030f2e:	f003 0301 	and.w	r3, r3, #1
 8030f32:	2b00      	cmp	r3, #0
 8030f34:	d009      	beq.n	8030f4a <HAL_I2C_EV_IRQHandler+0x17e>
 8030f36:	69fb      	ldr	r3, [r7, #28]
 8030f38:	089b      	lsrs	r3, r3, #2
 8030f3a:	f003 0301 	and.w	r3, r3, #1
 8030f3e:	2b00      	cmp	r3, #0
 8030f40:	d103      	bne.n	8030f4a <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8030f42:	6878      	ldr	r0, [r7, #4]
 8030f44:	f000 fb3a 	bl	80315bc <I2C_MasterReceive_RXNE>
 8030f48:	e011      	b.n	8030f6e <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8030f4a:	69fb      	ldr	r3, [r7, #28]
 8030f4c:	089b      	lsrs	r3, r3, #2
 8030f4e:	f003 0301 	and.w	r3, r3, #1
 8030f52:	2b00      	cmp	r3, #0
 8030f54:	f000 809a 	beq.w	803108c <HAL_I2C_EV_IRQHandler+0x2c0>
 8030f58:	697b      	ldr	r3, [r7, #20]
 8030f5a:	0a5b      	lsrs	r3, r3, #9
 8030f5c:	f003 0301 	and.w	r3, r3, #1
 8030f60:	2b00      	cmp	r3, #0
 8030f62:	f000 8093 	beq.w	803108c <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8030f66:	6878      	ldr	r0, [r7, #4]
 8030f68:	f000 fbaa 	bl	80316c0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8030f6c:	e08e      	b.n	803108c <HAL_I2C_EV_IRQHandler+0x2c0>
 8030f6e:	e08d      	b.n	803108c <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8030f70:	687b      	ldr	r3, [r7, #4]
 8030f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8030f74:	2b00      	cmp	r3, #0
 8030f76:	d004      	beq.n	8030f82 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8030f78:	687b      	ldr	r3, [r7, #4]
 8030f7a:	681b      	ldr	r3, [r3, #0]
 8030f7c:	695b      	ldr	r3, [r3, #20]
 8030f7e:	61fb      	str	r3, [r7, #28]
 8030f80:	e007      	b.n	8030f92 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8030f82:	687b      	ldr	r3, [r7, #4]
 8030f84:	681b      	ldr	r3, [r3, #0]
 8030f86:	699b      	ldr	r3, [r3, #24]
 8030f88:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8030f8a:	687b      	ldr	r3, [r7, #4]
 8030f8c:	681b      	ldr	r3, [r3, #0]
 8030f8e:	695b      	ldr	r3, [r3, #20]
 8030f90:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8030f92:	69fb      	ldr	r3, [r7, #28]
 8030f94:	085b      	lsrs	r3, r3, #1
 8030f96:	f003 0301 	and.w	r3, r3, #1
 8030f9a:	2b00      	cmp	r3, #0
 8030f9c:	d012      	beq.n	8030fc4 <HAL_I2C_EV_IRQHandler+0x1f8>
 8030f9e:	697b      	ldr	r3, [r7, #20]
 8030fa0:	0a5b      	lsrs	r3, r3, #9
 8030fa2:	f003 0301 	and.w	r3, r3, #1
 8030fa6:	2b00      	cmp	r3, #0
 8030fa8:	d00c      	beq.n	8030fc4 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8030faa:	687b      	ldr	r3, [r7, #4]
 8030fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8030fae:	2b00      	cmp	r3, #0
 8030fb0:	d003      	beq.n	8030fba <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8030fb2:	687b      	ldr	r3, [r7, #4]
 8030fb4:	681b      	ldr	r3, [r3, #0]
 8030fb6:	699b      	ldr	r3, [r3, #24]
 8030fb8:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8030fba:	69b9      	ldr	r1, [r7, #24]
 8030fbc:	6878      	ldr	r0, [r7, #4]
 8030fbe:	f000 ff68 	bl	8031e92 <I2C_Slave_ADDR>
 8030fc2:	e066      	b.n	8031092 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8030fc4:	69fb      	ldr	r3, [r7, #28]
 8030fc6:	091b      	lsrs	r3, r3, #4
 8030fc8:	f003 0301 	and.w	r3, r3, #1
 8030fcc:	2b00      	cmp	r3, #0
 8030fce:	d009      	beq.n	8030fe4 <HAL_I2C_EV_IRQHandler+0x218>
 8030fd0:	697b      	ldr	r3, [r7, #20]
 8030fd2:	0a5b      	lsrs	r3, r3, #9
 8030fd4:	f003 0301 	and.w	r3, r3, #1
 8030fd8:	2b00      	cmp	r3, #0
 8030fda:	d003      	beq.n	8030fe4 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8030fdc:	6878      	ldr	r0, [r7, #4]
 8030fde:	f000 ff9d 	bl	8031f1c <I2C_Slave_STOPF>
 8030fe2:	e056      	b.n	8031092 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8030fe4:	7bbb      	ldrb	r3, [r7, #14]
 8030fe6:	2b21      	cmp	r3, #33	; 0x21
 8030fe8:	d002      	beq.n	8030ff0 <HAL_I2C_EV_IRQHandler+0x224>
 8030fea:	7bbb      	ldrb	r3, [r7, #14]
 8030fec:	2b29      	cmp	r3, #41	; 0x29
 8030fee:	d125      	bne.n	803103c <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8030ff0:	69fb      	ldr	r3, [r7, #28]
 8030ff2:	09db      	lsrs	r3, r3, #7
 8030ff4:	f003 0301 	and.w	r3, r3, #1
 8030ff8:	2b00      	cmp	r3, #0
 8030ffa:	d00f      	beq.n	803101c <HAL_I2C_EV_IRQHandler+0x250>
 8030ffc:	697b      	ldr	r3, [r7, #20]
 8030ffe:	0a9b      	lsrs	r3, r3, #10
 8031000:	f003 0301 	and.w	r3, r3, #1
 8031004:	2b00      	cmp	r3, #0
 8031006:	d009      	beq.n	803101c <HAL_I2C_EV_IRQHandler+0x250>
 8031008:	69fb      	ldr	r3, [r7, #28]
 803100a:	089b      	lsrs	r3, r3, #2
 803100c:	f003 0301 	and.w	r3, r3, #1
 8031010:	2b00      	cmp	r3, #0
 8031012:	d103      	bne.n	803101c <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8031014:	6878      	ldr	r0, [r7, #4]
 8031016:	f000 fe7e 	bl	8031d16 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 803101a:	e039      	b.n	8031090 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 803101c:	69fb      	ldr	r3, [r7, #28]
 803101e:	089b      	lsrs	r3, r3, #2
 8031020:	f003 0301 	and.w	r3, r3, #1
 8031024:	2b00      	cmp	r3, #0
 8031026:	d033      	beq.n	8031090 <HAL_I2C_EV_IRQHandler+0x2c4>
 8031028:	697b      	ldr	r3, [r7, #20]
 803102a:	0a5b      	lsrs	r3, r3, #9
 803102c:	f003 0301 	and.w	r3, r3, #1
 8031030:	2b00      	cmp	r3, #0
 8031032:	d02d      	beq.n	8031090 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8031034:	6878      	ldr	r0, [r7, #4]
 8031036:	f000 feab 	bl	8031d90 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 803103a:	e029      	b.n	8031090 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 803103c:	69fb      	ldr	r3, [r7, #28]
 803103e:	099b      	lsrs	r3, r3, #6
 8031040:	f003 0301 	and.w	r3, r3, #1
 8031044:	2b00      	cmp	r3, #0
 8031046:	d00f      	beq.n	8031068 <HAL_I2C_EV_IRQHandler+0x29c>
 8031048:	697b      	ldr	r3, [r7, #20]
 803104a:	0a9b      	lsrs	r3, r3, #10
 803104c:	f003 0301 	and.w	r3, r3, #1
 8031050:	2b00      	cmp	r3, #0
 8031052:	d009      	beq.n	8031068 <HAL_I2C_EV_IRQHandler+0x29c>
 8031054:	69fb      	ldr	r3, [r7, #28]
 8031056:	089b      	lsrs	r3, r3, #2
 8031058:	f003 0301 	and.w	r3, r3, #1
 803105c:	2b00      	cmp	r3, #0
 803105e:	d103      	bne.n	8031068 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8031060:	6878      	ldr	r0, [r7, #4]
 8031062:	f000 feb6 	bl	8031dd2 <I2C_SlaveReceive_RXNE>
 8031066:	e014      	b.n	8031092 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8031068:	69fb      	ldr	r3, [r7, #28]
 803106a:	089b      	lsrs	r3, r3, #2
 803106c:	f003 0301 	and.w	r3, r3, #1
 8031070:	2b00      	cmp	r3, #0
 8031072:	d00e      	beq.n	8031092 <HAL_I2C_EV_IRQHandler+0x2c6>
 8031074:	697b      	ldr	r3, [r7, #20]
 8031076:	0a5b      	lsrs	r3, r3, #9
 8031078:	f003 0301 	and.w	r3, r3, #1
 803107c:	2b00      	cmp	r3, #0
 803107e:	d008      	beq.n	8031092 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8031080:	6878      	ldr	r0, [r7, #4]
 8031082:	f000 fee4 	bl	8031e4e <I2C_SlaveReceive_BTF>
 8031086:	e004      	b.n	8031092 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8031088:	bf00      	nop
 803108a:	e002      	b.n	8031092 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 803108c:	bf00      	nop
 803108e:	e000      	b.n	8031092 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8031090:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8031092:	3720      	adds	r7, #32
 8031094:	46bd      	mov	sp, r7
 8031096:	bd80      	pop	{r7, pc}

08031098 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8031098:	b580      	push	{r7, lr}
 803109a:	b08a      	sub	sp, #40	; 0x28
 803109c:	af00      	add	r7, sp, #0
 803109e:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80310a0:	687b      	ldr	r3, [r7, #4]
 80310a2:	681b      	ldr	r3, [r3, #0]
 80310a4:	695b      	ldr	r3, [r3, #20]
 80310a6:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80310a8:	687b      	ldr	r3, [r7, #4]
 80310aa:	681b      	ldr	r3, [r3, #0]
 80310ac:	685b      	ldr	r3, [r3, #4]
 80310ae:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80310b0:	2300      	movs	r3, #0
 80310b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80310b4:	687b      	ldr	r3, [r7, #4]
 80310b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80310ba:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80310bc:	6a3b      	ldr	r3, [r7, #32]
 80310be:	0a1b      	lsrs	r3, r3, #8
 80310c0:	f003 0301 	and.w	r3, r3, #1
 80310c4:	2b00      	cmp	r3, #0
 80310c6:	d00e      	beq.n	80310e6 <HAL_I2C_ER_IRQHandler+0x4e>
 80310c8:	69fb      	ldr	r3, [r7, #28]
 80310ca:	0a1b      	lsrs	r3, r3, #8
 80310cc:	f003 0301 	and.w	r3, r3, #1
 80310d0:	2b00      	cmp	r3, #0
 80310d2:	d008      	beq.n	80310e6 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80310d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80310d6:	f043 0301 	orr.w	r3, r3, #1
 80310da:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80310dc:	687b      	ldr	r3, [r7, #4]
 80310de:	681b      	ldr	r3, [r3, #0]
 80310e0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80310e4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80310e6:	6a3b      	ldr	r3, [r7, #32]
 80310e8:	0a5b      	lsrs	r3, r3, #9
 80310ea:	f003 0301 	and.w	r3, r3, #1
 80310ee:	2b00      	cmp	r3, #0
 80310f0:	d00e      	beq.n	8031110 <HAL_I2C_ER_IRQHandler+0x78>
 80310f2:	69fb      	ldr	r3, [r7, #28]
 80310f4:	0a1b      	lsrs	r3, r3, #8
 80310f6:	f003 0301 	and.w	r3, r3, #1
 80310fa:	2b00      	cmp	r3, #0
 80310fc:	d008      	beq.n	8031110 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80310fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031100:	f043 0302 	orr.w	r3, r3, #2
 8031104:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8031106:	687b      	ldr	r3, [r7, #4]
 8031108:	681b      	ldr	r3, [r3, #0]
 803110a:	f46f 7200 	mvn.w	r2, #512	; 0x200
 803110e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8031110:	6a3b      	ldr	r3, [r7, #32]
 8031112:	0a9b      	lsrs	r3, r3, #10
 8031114:	f003 0301 	and.w	r3, r3, #1
 8031118:	2b00      	cmp	r3, #0
 803111a:	d03f      	beq.n	803119c <HAL_I2C_ER_IRQHandler+0x104>
 803111c:	69fb      	ldr	r3, [r7, #28]
 803111e:	0a1b      	lsrs	r3, r3, #8
 8031120:	f003 0301 	and.w	r3, r3, #1
 8031124:	2b00      	cmp	r3, #0
 8031126:	d039      	beq.n	803119c <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8031128:	7efb      	ldrb	r3, [r7, #27]
 803112a:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 803112c:	687b      	ldr	r3, [r7, #4]
 803112e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031130:	b29b      	uxth	r3, r3
 8031132:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8031134:	687b      	ldr	r3, [r7, #4]
 8031136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 803113a:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 803113c:	687b      	ldr	r3, [r7, #4]
 803113e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8031140:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8031142:	7ebb      	ldrb	r3, [r7, #26]
 8031144:	2b20      	cmp	r3, #32
 8031146:	d112      	bne.n	803116e <HAL_I2C_ER_IRQHandler+0xd6>
 8031148:	697b      	ldr	r3, [r7, #20]
 803114a:	2b00      	cmp	r3, #0
 803114c:	d10f      	bne.n	803116e <HAL_I2C_ER_IRQHandler+0xd6>
 803114e:	7cfb      	ldrb	r3, [r7, #19]
 8031150:	2b21      	cmp	r3, #33	; 0x21
 8031152:	d008      	beq.n	8031166 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8031154:	7cfb      	ldrb	r3, [r7, #19]
 8031156:	2b29      	cmp	r3, #41	; 0x29
 8031158:	d005      	beq.n	8031166 <HAL_I2C_ER_IRQHandler+0xce>
 803115a:	7cfb      	ldrb	r3, [r7, #19]
 803115c:	2b28      	cmp	r3, #40	; 0x28
 803115e:	d106      	bne.n	803116e <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8031160:	68fb      	ldr	r3, [r7, #12]
 8031162:	2b21      	cmp	r3, #33	; 0x21
 8031164:	d103      	bne.n	803116e <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8031166:	6878      	ldr	r0, [r7, #4]
 8031168:	f001 f808 	bl	803217c <I2C_Slave_AF>
 803116c:	e016      	b.n	803119c <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 803116e:	687b      	ldr	r3, [r7, #4]
 8031170:	681b      	ldr	r3, [r3, #0]
 8031172:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8031176:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8031178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803117a:	f043 0304 	orr.w	r3, r3, #4
 803117e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8031180:	7efb      	ldrb	r3, [r7, #27]
 8031182:	2b10      	cmp	r3, #16
 8031184:	d002      	beq.n	803118c <HAL_I2C_ER_IRQHandler+0xf4>
 8031186:	7efb      	ldrb	r3, [r7, #27]
 8031188:	2b40      	cmp	r3, #64	; 0x40
 803118a:	d107      	bne.n	803119c <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 803118c:	687b      	ldr	r3, [r7, #4]
 803118e:	681b      	ldr	r3, [r3, #0]
 8031190:	681a      	ldr	r2, [r3, #0]
 8031192:	687b      	ldr	r3, [r7, #4]
 8031194:	681b      	ldr	r3, [r3, #0]
 8031196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 803119a:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 803119c:	6a3b      	ldr	r3, [r7, #32]
 803119e:	0adb      	lsrs	r3, r3, #11
 80311a0:	f003 0301 	and.w	r3, r3, #1
 80311a4:	2b00      	cmp	r3, #0
 80311a6:	d00e      	beq.n	80311c6 <HAL_I2C_ER_IRQHandler+0x12e>
 80311a8:	69fb      	ldr	r3, [r7, #28]
 80311aa:	0a1b      	lsrs	r3, r3, #8
 80311ac:	f003 0301 	and.w	r3, r3, #1
 80311b0:	2b00      	cmp	r3, #0
 80311b2:	d008      	beq.n	80311c6 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80311b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80311b6:	f043 0308 	orr.w	r3, r3, #8
 80311ba:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80311bc:	687b      	ldr	r3, [r7, #4]
 80311be:	681b      	ldr	r3, [r3, #0]
 80311c0:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80311c4:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80311c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80311c8:	2b00      	cmp	r3, #0
 80311ca:	d008      	beq.n	80311de <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80311cc:	687b      	ldr	r3, [r7, #4]
 80311ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80311d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80311d2:	431a      	orrs	r2, r3
 80311d4:	687b      	ldr	r3, [r7, #4]
 80311d6:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80311d8:	6878      	ldr	r0, [r7, #4]
 80311da:	f001 f83f 	bl	803225c <I2C_ITError>
  }
}
 80311de:	bf00      	nop
 80311e0:	3728      	adds	r7, #40	; 0x28
 80311e2:	46bd      	mov	sp, r7
 80311e4:	bd80      	pop	{r7, pc}

080311e6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80311e6:	b480      	push	{r7}
 80311e8:	b083      	sub	sp, #12
 80311ea:	af00      	add	r7, sp, #0
 80311ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80311ee:	bf00      	nop
 80311f0:	370c      	adds	r7, #12
 80311f2:	46bd      	mov	sp, r7
 80311f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80311f8:	4770      	bx	lr

080311fa <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80311fa:	b480      	push	{r7}
 80311fc:	b083      	sub	sp, #12
 80311fe:	af00      	add	r7, sp, #0
 8031200:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8031202:	bf00      	nop
 8031204:	370c      	adds	r7, #12
 8031206:	46bd      	mov	sp, r7
 8031208:	f85d 7b04 	ldr.w	r7, [sp], #4
 803120c:	4770      	bx	lr

0803120e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 803120e:	b480      	push	{r7}
 8031210:	b083      	sub	sp, #12
 8031212:	af00      	add	r7, sp, #0
 8031214:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8031216:	bf00      	nop
 8031218:	370c      	adds	r7, #12
 803121a:	46bd      	mov	sp, r7
 803121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031220:	4770      	bx	lr

08031222 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8031222:	b480      	push	{r7}
 8031224:	b083      	sub	sp, #12
 8031226:	af00      	add	r7, sp, #0
 8031228:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 803122a:	bf00      	nop
 803122c:	370c      	adds	r7, #12
 803122e:	46bd      	mov	sp, r7
 8031230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031234:	4770      	bx	lr

08031236 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8031236:	b480      	push	{r7}
 8031238:	b083      	sub	sp, #12
 803123a:	af00      	add	r7, sp, #0
 803123c:	6078      	str	r0, [r7, #4]
 803123e:	460b      	mov	r3, r1
 8031240:	70fb      	strb	r3, [r7, #3]
 8031242:	4613      	mov	r3, r2
 8031244:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8031246:	bf00      	nop
 8031248:	370c      	adds	r7, #12
 803124a:	46bd      	mov	sp, r7
 803124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031250:	4770      	bx	lr

08031252 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8031252:	b480      	push	{r7}
 8031254:	b083      	sub	sp, #12
 8031256:	af00      	add	r7, sp, #0
 8031258:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 803125a:	bf00      	nop
 803125c:	370c      	adds	r7, #12
 803125e:	46bd      	mov	sp, r7
 8031260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031264:	4770      	bx	lr

08031266 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8031266:	b480      	push	{r7}
 8031268:	b083      	sub	sp, #12
 803126a:	af00      	add	r7, sp, #0
 803126c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 803126e:	bf00      	nop
 8031270:	370c      	adds	r7, #12
 8031272:	46bd      	mov	sp, r7
 8031274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031278:	4770      	bx	lr

0803127a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 803127a:	b480      	push	{r7}
 803127c:	b083      	sub	sp, #12
 803127e:	af00      	add	r7, sp, #0
 8031280:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8031282:	bf00      	nop
 8031284:	370c      	adds	r7, #12
 8031286:	46bd      	mov	sp, r7
 8031288:	f85d 7b04 	ldr.w	r7, [sp], #4
 803128c:	4770      	bx	lr

0803128e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 803128e:	b480      	push	{r7}
 8031290:	b083      	sub	sp, #12
 8031292:	af00      	add	r7, sp, #0
 8031294:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8031296:	bf00      	nop
 8031298:	370c      	adds	r7, #12
 803129a:	46bd      	mov	sp, r7
 803129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80312a0:	4770      	bx	lr

080312a2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80312a2:	b480      	push	{r7}
 80312a4:	b083      	sub	sp, #12
 80312a6:	af00      	add	r7, sp, #0
 80312a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80312aa:	bf00      	nop
 80312ac:	370c      	adds	r7, #12
 80312ae:	46bd      	mov	sp, r7
 80312b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80312b4:	4770      	bx	lr

080312b6 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80312b6:	b580      	push	{r7, lr}
 80312b8:	b084      	sub	sp, #16
 80312ba:	af00      	add	r7, sp, #0
 80312bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80312be:	687b      	ldr	r3, [r7, #4]
 80312c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80312c4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80312c6:	687b      	ldr	r3, [r7, #4]
 80312c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80312cc:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80312ce:	687b      	ldr	r3, [r7, #4]
 80312d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80312d2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80312d4:	687b      	ldr	r3, [r7, #4]
 80312d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80312d8:	2b00      	cmp	r3, #0
 80312da:	d150      	bne.n	803137e <I2C_MasterTransmit_TXE+0xc8>
 80312dc:	7bfb      	ldrb	r3, [r7, #15]
 80312de:	2b21      	cmp	r3, #33	; 0x21
 80312e0:	d14d      	bne.n	803137e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80312e2:	68bb      	ldr	r3, [r7, #8]
 80312e4:	2b08      	cmp	r3, #8
 80312e6:	d01d      	beq.n	8031324 <I2C_MasterTransmit_TXE+0x6e>
 80312e8:	68bb      	ldr	r3, [r7, #8]
 80312ea:	2b20      	cmp	r3, #32
 80312ec:	d01a      	beq.n	8031324 <I2C_MasterTransmit_TXE+0x6e>
 80312ee:	68bb      	ldr	r3, [r7, #8]
 80312f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80312f4:	d016      	beq.n	8031324 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80312f6:	687b      	ldr	r3, [r7, #4]
 80312f8:	681b      	ldr	r3, [r3, #0]
 80312fa:	685a      	ldr	r2, [r3, #4]
 80312fc:	687b      	ldr	r3, [r7, #4]
 80312fe:	681b      	ldr	r3, [r3, #0]
 8031300:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8031304:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8031306:	687b      	ldr	r3, [r7, #4]
 8031308:	2211      	movs	r2, #17
 803130a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 803130c:	687b      	ldr	r3, [r7, #4]
 803130e:	2200      	movs	r2, #0
 8031310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8031314:	687b      	ldr	r3, [r7, #4]
 8031316:	2220      	movs	r2, #32
 8031318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 803131c:	6878      	ldr	r0, [r7, #4]
 803131e:	f7ff ff62 	bl	80311e6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8031322:	e060      	b.n	80313e6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8031324:	687b      	ldr	r3, [r7, #4]
 8031326:	681b      	ldr	r3, [r3, #0]
 8031328:	685a      	ldr	r2, [r3, #4]
 803132a:	687b      	ldr	r3, [r7, #4]
 803132c:	681b      	ldr	r3, [r3, #0]
 803132e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8031332:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8031334:	687b      	ldr	r3, [r7, #4]
 8031336:	681b      	ldr	r3, [r3, #0]
 8031338:	681a      	ldr	r2, [r3, #0]
 803133a:	687b      	ldr	r3, [r7, #4]
 803133c:	681b      	ldr	r3, [r3, #0]
 803133e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8031342:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8031344:	687b      	ldr	r3, [r7, #4]
 8031346:	2200      	movs	r2, #0
 8031348:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 803134a:	687b      	ldr	r3, [r7, #4]
 803134c:	2220      	movs	r2, #32
 803134e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8031352:	687b      	ldr	r3, [r7, #4]
 8031354:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8031358:	b2db      	uxtb	r3, r3
 803135a:	2b40      	cmp	r3, #64	; 0x40
 803135c:	d107      	bne.n	803136e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 803135e:	687b      	ldr	r3, [r7, #4]
 8031360:	2200      	movs	r2, #0
 8031362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8031366:	6878      	ldr	r0, [r7, #4]
 8031368:	f7ff ff7d 	bl	8031266 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 803136c:	e03b      	b.n	80313e6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 803136e:	687b      	ldr	r3, [r7, #4]
 8031370:	2200      	movs	r2, #0
 8031372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8031376:	6878      	ldr	r0, [r7, #4]
 8031378:	f7ff ff35 	bl	80311e6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 803137c:	e033      	b.n	80313e6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 803137e:	7bfb      	ldrb	r3, [r7, #15]
 8031380:	2b21      	cmp	r3, #33	; 0x21
 8031382:	d005      	beq.n	8031390 <I2C_MasterTransmit_TXE+0xda>
 8031384:	7bbb      	ldrb	r3, [r7, #14]
 8031386:	2b40      	cmp	r3, #64	; 0x40
 8031388:	d12d      	bne.n	80313e6 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 803138a:	7bfb      	ldrb	r3, [r7, #15]
 803138c:	2b22      	cmp	r3, #34	; 0x22
 803138e:	d12a      	bne.n	80313e6 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8031390:	687b      	ldr	r3, [r7, #4]
 8031392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031394:	b29b      	uxth	r3, r3
 8031396:	2b00      	cmp	r3, #0
 8031398:	d108      	bne.n	80313ac <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 803139a:	687b      	ldr	r3, [r7, #4]
 803139c:	681b      	ldr	r3, [r3, #0]
 803139e:	685a      	ldr	r2, [r3, #4]
 80313a0:	687b      	ldr	r3, [r7, #4]
 80313a2:	681b      	ldr	r3, [r3, #0]
 80313a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80313a8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80313aa:	e01c      	b.n	80313e6 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80313ac:	687b      	ldr	r3, [r7, #4]
 80313ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80313b2:	b2db      	uxtb	r3, r3
 80313b4:	2b40      	cmp	r3, #64	; 0x40
 80313b6:	d103      	bne.n	80313c0 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80313b8:	6878      	ldr	r0, [r7, #4]
 80313ba:	f000 f898 	bl	80314ee <I2C_MemoryTransmit_TXE_BTF>
}
 80313be:	e012      	b.n	80313e6 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80313c0:	687b      	ldr	r3, [r7, #4]
 80313c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80313c4:	781a      	ldrb	r2, [r3, #0]
 80313c6:	687b      	ldr	r3, [r7, #4]
 80313c8:	681b      	ldr	r3, [r3, #0]
 80313ca:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80313cc:	687b      	ldr	r3, [r7, #4]
 80313ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80313d0:	1c5a      	adds	r2, r3, #1
 80313d2:	687b      	ldr	r3, [r7, #4]
 80313d4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80313d6:	687b      	ldr	r3, [r7, #4]
 80313d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80313da:	b29b      	uxth	r3, r3
 80313dc:	3b01      	subs	r3, #1
 80313de:	b29a      	uxth	r2, r3
 80313e0:	687b      	ldr	r3, [r7, #4]
 80313e2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80313e4:	e7ff      	b.n	80313e6 <I2C_MasterTransmit_TXE+0x130>
 80313e6:	bf00      	nop
 80313e8:	3710      	adds	r7, #16
 80313ea:	46bd      	mov	sp, r7
 80313ec:	bd80      	pop	{r7, pc}

080313ee <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80313ee:	b580      	push	{r7, lr}
 80313f0:	b084      	sub	sp, #16
 80313f2:	af00      	add	r7, sp, #0
 80313f4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80313f6:	687b      	ldr	r3, [r7, #4]
 80313f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80313fa:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80313fc:	687b      	ldr	r3, [r7, #4]
 80313fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8031402:	b2db      	uxtb	r3, r3
 8031404:	2b21      	cmp	r3, #33	; 0x21
 8031406:	d165      	bne.n	80314d4 <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 8031408:	687b      	ldr	r3, [r7, #4]
 803140a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 803140c:	b29b      	uxth	r3, r3
 803140e:	2b00      	cmp	r3, #0
 8031410:	d012      	beq.n	8031438 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8031412:	687b      	ldr	r3, [r7, #4]
 8031414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031416:	781a      	ldrb	r2, [r3, #0]
 8031418:	687b      	ldr	r3, [r7, #4]
 803141a:	681b      	ldr	r3, [r3, #0]
 803141c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 803141e:	687b      	ldr	r3, [r7, #4]
 8031420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031422:	1c5a      	adds	r2, r3, #1
 8031424:	687b      	ldr	r3, [r7, #4]
 8031426:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8031428:	687b      	ldr	r3, [r7, #4]
 803142a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 803142c:	b29b      	uxth	r3, r3
 803142e:	3b01      	subs	r3, #1
 8031430:	b29a      	uxth	r2, r3
 8031432:	687b      	ldr	r3, [r7, #4]
 8031434:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8031436:	e056      	b.n	80314e6 <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8031438:	68fb      	ldr	r3, [r7, #12]
 803143a:	2b08      	cmp	r3, #8
 803143c:	d01d      	beq.n	803147a <I2C_MasterTransmit_BTF+0x8c>
 803143e:	68fb      	ldr	r3, [r7, #12]
 8031440:	2b20      	cmp	r3, #32
 8031442:	d01a      	beq.n	803147a <I2C_MasterTransmit_BTF+0x8c>
 8031444:	68fb      	ldr	r3, [r7, #12]
 8031446:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 803144a:	d016      	beq.n	803147a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 803144c:	687b      	ldr	r3, [r7, #4]
 803144e:	681b      	ldr	r3, [r3, #0]
 8031450:	685a      	ldr	r2, [r3, #4]
 8031452:	687b      	ldr	r3, [r7, #4]
 8031454:	681b      	ldr	r3, [r3, #0]
 8031456:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 803145a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 803145c:	687b      	ldr	r3, [r7, #4]
 803145e:	2211      	movs	r2, #17
 8031460:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8031462:	687b      	ldr	r3, [r7, #4]
 8031464:	2200      	movs	r2, #0
 8031466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 803146a:	687b      	ldr	r3, [r7, #4]
 803146c:	2220      	movs	r2, #32
 803146e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8031472:	6878      	ldr	r0, [r7, #4]
 8031474:	f7ff feb7 	bl	80311e6 <HAL_I2C_MasterTxCpltCallback>
}
 8031478:	e035      	b.n	80314e6 <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 803147a:	687b      	ldr	r3, [r7, #4]
 803147c:	681b      	ldr	r3, [r3, #0]
 803147e:	685a      	ldr	r2, [r3, #4]
 8031480:	687b      	ldr	r3, [r7, #4]
 8031482:	681b      	ldr	r3, [r3, #0]
 8031484:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8031488:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 803148a:	687b      	ldr	r3, [r7, #4]
 803148c:	681b      	ldr	r3, [r3, #0]
 803148e:	681a      	ldr	r2, [r3, #0]
 8031490:	687b      	ldr	r3, [r7, #4]
 8031492:	681b      	ldr	r3, [r3, #0]
 8031494:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8031498:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 803149a:	687b      	ldr	r3, [r7, #4]
 803149c:	2200      	movs	r2, #0
 803149e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80314a0:	687b      	ldr	r3, [r7, #4]
 80314a2:	2220      	movs	r2, #32
 80314a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80314a8:	687b      	ldr	r3, [r7, #4]
 80314aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80314ae:	b2db      	uxtb	r3, r3
 80314b0:	2b40      	cmp	r3, #64	; 0x40
 80314b2:	d107      	bne.n	80314c4 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80314b4:	687b      	ldr	r3, [r7, #4]
 80314b6:	2200      	movs	r2, #0
 80314b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80314bc:	6878      	ldr	r0, [r7, #4]
 80314be:	f7ff fed2 	bl	8031266 <HAL_I2C_MemTxCpltCallback>
}
 80314c2:	e010      	b.n	80314e6 <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80314c4:	687b      	ldr	r3, [r7, #4]
 80314c6:	2200      	movs	r2, #0
 80314c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80314cc:	6878      	ldr	r0, [r7, #4]
 80314ce:	f7ff fe8a 	bl	80311e6 <HAL_I2C_MasterTxCpltCallback>
}
 80314d2:	e008      	b.n	80314e6 <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80314d4:	687b      	ldr	r3, [r7, #4]
 80314d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80314da:	b2db      	uxtb	r3, r3
 80314dc:	2b40      	cmp	r3, #64	; 0x40
 80314de:	d102      	bne.n	80314e6 <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 80314e0:	6878      	ldr	r0, [r7, #4]
 80314e2:	f000 f804 	bl	80314ee <I2C_MemoryTransmit_TXE_BTF>
}
 80314e6:	bf00      	nop
 80314e8:	3710      	adds	r7, #16
 80314ea:	46bd      	mov	sp, r7
 80314ec:	bd80      	pop	{r7, pc}

080314ee <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80314ee:	b480      	push	{r7}
 80314f0:	b083      	sub	sp, #12
 80314f2:	af00      	add	r7, sp, #0
 80314f4:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 80314f6:	687b      	ldr	r3, [r7, #4]
 80314f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80314fa:	2b00      	cmp	r3, #0
 80314fc:	d11d      	bne.n	803153a <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80314fe:	687b      	ldr	r3, [r7, #4]
 8031500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8031502:	2b01      	cmp	r3, #1
 8031504:	d10b      	bne.n	803151e <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8031506:	687b      	ldr	r3, [r7, #4]
 8031508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 803150a:	b2da      	uxtb	r2, r3
 803150c:	687b      	ldr	r3, [r7, #4]
 803150e:	681b      	ldr	r3, [r3, #0]
 8031510:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8031512:	687b      	ldr	r3, [r7, #4]
 8031514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8031516:	1c9a      	adds	r2, r3, #2
 8031518:	687b      	ldr	r3, [r7, #4]
 803151a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 803151c:	e048      	b.n	80315b0 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 803151e:	687b      	ldr	r3, [r7, #4]
 8031520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8031522:	b29b      	uxth	r3, r3
 8031524:	121b      	asrs	r3, r3, #8
 8031526:	b2da      	uxtb	r2, r3
 8031528:	687b      	ldr	r3, [r7, #4]
 803152a:	681b      	ldr	r3, [r3, #0]
 803152c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 803152e:	687b      	ldr	r3, [r7, #4]
 8031530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8031532:	1c5a      	adds	r2, r3, #1
 8031534:	687b      	ldr	r3, [r7, #4]
 8031536:	651a      	str	r2, [r3, #80]	; 0x50
}
 8031538:	e03a      	b.n	80315b0 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 803153a:	687b      	ldr	r3, [r7, #4]
 803153c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803153e:	2b01      	cmp	r3, #1
 8031540:	d10b      	bne.n	803155a <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8031542:	687b      	ldr	r3, [r7, #4]
 8031544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8031546:	b2da      	uxtb	r2, r3
 8031548:	687b      	ldr	r3, [r7, #4]
 803154a:	681b      	ldr	r3, [r3, #0]
 803154c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 803154e:	687b      	ldr	r3, [r7, #4]
 8031550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8031552:	1c5a      	adds	r2, r3, #1
 8031554:	687b      	ldr	r3, [r7, #4]
 8031556:	651a      	str	r2, [r3, #80]	; 0x50
}
 8031558:	e02a      	b.n	80315b0 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 803155a:	687b      	ldr	r3, [r7, #4]
 803155c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803155e:	2b02      	cmp	r3, #2
 8031560:	d126      	bne.n	80315b0 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8031562:	687b      	ldr	r3, [r7, #4]
 8031564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8031568:	b2db      	uxtb	r3, r3
 803156a:	2b22      	cmp	r3, #34	; 0x22
 803156c:	d108      	bne.n	8031580 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 803156e:	687b      	ldr	r3, [r7, #4]
 8031570:	681b      	ldr	r3, [r3, #0]
 8031572:	681a      	ldr	r2, [r3, #0]
 8031574:	687b      	ldr	r3, [r7, #4]
 8031576:	681b      	ldr	r3, [r3, #0]
 8031578:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 803157c:	601a      	str	r2, [r3, #0]
}
 803157e:	e017      	b.n	80315b0 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8031580:	687b      	ldr	r3, [r7, #4]
 8031582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8031586:	b2db      	uxtb	r3, r3
 8031588:	2b21      	cmp	r3, #33	; 0x21
 803158a:	d111      	bne.n	80315b0 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 803158c:	687b      	ldr	r3, [r7, #4]
 803158e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031590:	781a      	ldrb	r2, [r3, #0]
 8031592:	687b      	ldr	r3, [r7, #4]
 8031594:	681b      	ldr	r3, [r3, #0]
 8031596:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8031598:	687b      	ldr	r3, [r7, #4]
 803159a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803159c:	1c5a      	adds	r2, r3, #1
 803159e:	687b      	ldr	r3, [r7, #4]
 80315a0:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80315a2:	687b      	ldr	r3, [r7, #4]
 80315a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80315a6:	b29b      	uxth	r3, r3
 80315a8:	3b01      	subs	r3, #1
 80315aa:	b29a      	uxth	r2, r3
 80315ac:	687b      	ldr	r3, [r7, #4]
 80315ae:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80315b0:	bf00      	nop
 80315b2:	370c      	adds	r7, #12
 80315b4:	46bd      	mov	sp, r7
 80315b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80315ba:	4770      	bx	lr

080315bc <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80315bc:	b580      	push	{r7, lr}
 80315be:	b084      	sub	sp, #16
 80315c0:	af00      	add	r7, sp, #0
 80315c2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80315c4:	687b      	ldr	r3, [r7, #4]
 80315c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80315ca:	b2db      	uxtb	r3, r3
 80315cc:	2b22      	cmp	r3, #34	; 0x22
 80315ce:	d173      	bne.n	80316b8 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80315d0:	687b      	ldr	r3, [r7, #4]
 80315d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80315d4:	b29b      	uxth	r3, r3
 80315d6:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80315d8:	68fb      	ldr	r3, [r7, #12]
 80315da:	2b03      	cmp	r3, #3
 80315dc:	d920      	bls.n	8031620 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80315de:	687b      	ldr	r3, [r7, #4]
 80315e0:	681b      	ldr	r3, [r3, #0]
 80315e2:	691a      	ldr	r2, [r3, #16]
 80315e4:	687b      	ldr	r3, [r7, #4]
 80315e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80315e8:	b2d2      	uxtb	r2, r2
 80315ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80315ec:	687b      	ldr	r3, [r7, #4]
 80315ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80315f0:	1c5a      	adds	r2, r3, #1
 80315f2:	687b      	ldr	r3, [r7, #4]
 80315f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80315f6:	687b      	ldr	r3, [r7, #4]
 80315f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80315fa:	b29b      	uxth	r3, r3
 80315fc:	3b01      	subs	r3, #1
 80315fe:	b29a      	uxth	r2, r3
 8031600:	687b      	ldr	r3, [r7, #4]
 8031602:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8031604:	687b      	ldr	r3, [r7, #4]
 8031606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031608:	b29b      	uxth	r3, r3
 803160a:	2b03      	cmp	r3, #3
 803160c:	d154      	bne.n	80316b8 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 803160e:	687b      	ldr	r3, [r7, #4]
 8031610:	681b      	ldr	r3, [r3, #0]
 8031612:	685a      	ldr	r2, [r3, #4]
 8031614:	687b      	ldr	r3, [r7, #4]
 8031616:	681b      	ldr	r3, [r3, #0]
 8031618:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 803161c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 803161e:	e04b      	b.n	80316b8 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8031620:	687b      	ldr	r3, [r7, #4]
 8031622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031624:	2b02      	cmp	r3, #2
 8031626:	d047      	beq.n	80316b8 <I2C_MasterReceive_RXNE+0xfc>
 8031628:	68fb      	ldr	r3, [r7, #12]
 803162a:	2b01      	cmp	r3, #1
 803162c:	d002      	beq.n	8031634 <I2C_MasterReceive_RXNE+0x78>
 803162e:	68fb      	ldr	r3, [r7, #12]
 8031630:	2b00      	cmp	r3, #0
 8031632:	d141      	bne.n	80316b8 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8031634:	687b      	ldr	r3, [r7, #4]
 8031636:	681b      	ldr	r3, [r3, #0]
 8031638:	681a      	ldr	r2, [r3, #0]
 803163a:	687b      	ldr	r3, [r7, #4]
 803163c:	681b      	ldr	r3, [r3, #0]
 803163e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8031642:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8031644:	687b      	ldr	r3, [r7, #4]
 8031646:	681b      	ldr	r3, [r3, #0]
 8031648:	685a      	ldr	r2, [r3, #4]
 803164a:	687b      	ldr	r3, [r7, #4]
 803164c:	681b      	ldr	r3, [r3, #0]
 803164e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8031652:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8031654:	687b      	ldr	r3, [r7, #4]
 8031656:	681b      	ldr	r3, [r3, #0]
 8031658:	691a      	ldr	r2, [r3, #16]
 803165a:	687b      	ldr	r3, [r7, #4]
 803165c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803165e:	b2d2      	uxtb	r2, r2
 8031660:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8031662:	687b      	ldr	r3, [r7, #4]
 8031664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031666:	1c5a      	adds	r2, r3, #1
 8031668:	687b      	ldr	r3, [r7, #4]
 803166a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 803166c:	687b      	ldr	r3, [r7, #4]
 803166e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031670:	b29b      	uxth	r3, r3
 8031672:	3b01      	subs	r3, #1
 8031674:	b29a      	uxth	r2, r3
 8031676:	687b      	ldr	r3, [r7, #4]
 8031678:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 803167a:	687b      	ldr	r3, [r7, #4]
 803167c:	2220      	movs	r2, #32
 803167e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8031682:	687b      	ldr	r3, [r7, #4]
 8031684:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8031688:	b2db      	uxtb	r3, r3
 803168a:	2b40      	cmp	r3, #64	; 0x40
 803168c:	d10a      	bne.n	80316a4 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 803168e:	687b      	ldr	r3, [r7, #4]
 8031690:	2200      	movs	r2, #0
 8031692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8031696:	687b      	ldr	r3, [r7, #4]
 8031698:	2200      	movs	r2, #0
 803169a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 803169c:	6878      	ldr	r0, [r7, #4]
 803169e:	f7ff fdec 	bl	803127a <HAL_I2C_MemRxCpltCallback>
}
 80316a2:	e009      	b.n	80316b8 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80316a4:	687b      	ldr	r3, [r7, #4]
 80316a6:	2200      	movs	r2, #0
 80316a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80316ac:	687b      	ldr	r3, [r7, #4]
 80316ae:	2212      	movs	r2, #18
 80316b0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80316b2:	6878      	ldr	r0, [r7, #4]
 80316b4:	f7ff fda1 	bl	80311fa <HAL_I2C_MasterRxCpltCallback>
}
 80316b8:	bf00      	nop
 80316ba:	3710      	adds	r7, #16
 80316bc:	46bd      	mov	sp, r7
 80316be:	bd80      	pop	{r7, pc}

080316c0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80316c0:	b580      	push	{r7, lr}
 80316c2:	b084      	sub	sp, #16
 80316c4:	af00      	add	r7, sp, #0
 80316c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80316c8:	687b      	ldr	r3, [r7, #4]
 80316ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80316cc:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80316ce:	687b      	ldr	r3, [r7, #4]
 80316d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80316d2:	b29b      	uxth	r3, r3
 80316d4:	2b04      	cmp	r3, #4
 80316d6:	d11b      	bne.n	8031710 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80316d8:	687b      	ldr	r3, [r7, #4]
 80316da:	681b      	ldr	r3, [r3, #0]
 80316dc:	685a      	ldr	r2, [r3, #4]
 80316de:	687b      	ldr	r3, [r7, #4]
 80316e0:	681b      	ldr	r3, [r3, #0]
 80316e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80316e6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80316e8:	687b      	ldr	r3, [r7, #4]
 80316ea:	681b      	ldr	r3, [r3, #0]
 80316ec:	691a      	ldr	r2, [r3, #16]
 80316ee:	687b      	ldr	r3, [r7, #4]
 80316f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80316f2:	b2d2      	uxtb	r2, r2
 80316f4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80316f6:	687b      	ldr	r3, [r7, #4]
 80316f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80316fa:	1c5a      	adds	r2, r3, #1
 80316fc:	687b      	ldr	r3, [r7, #4]
 80316fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8031700:	687b      	ldr	r3, [r7, #4]
 8031702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031704:	b29b      	uxth	r3, r3
 8031706:	3b01      	subs	r3, #1
 8031708:	b29a      	uxth	r2, r3
 803170a:	687b      	ldr	r3, [r7, #4]
 803170c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 803170e:	e0bd      	b.n	803188c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8031710:	687b      	ldr	r3, [r7, #4]
 8031712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031714:	b29b      	uxth	r3, r3
 8031716:	2b03      	cmp	r3, #3
 8031718:	d129      	bne.n	803176e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 803171a:	687b      	ldr	r3, [r7, #4]
 803171c:	681b      	ldr	r3, [r3, #0]
 803171e:	685a      	ldr	r2, [r3, #4]
 8031720:	687b      	ldr	r3, [r7, #4]
 8031722:	681b      	ldr	r3, [r3, #0]
 8031724:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8031728:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 803172a:	68fb      	ldr	r3, [r7, #12]
 803172c:	2b04      	cmp	r3, #4
 803172e:	d00a      	beq.n	8031746 <I2C_MasterReceive_BTF+0x86>
 8031730:	68fb      	ldr	r3, [r7, #12]
 8031732:	2b02      	cmp	r3, #2
 8031734:	d007      	beq.n	8031746 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8031736:	687b      	ldr	r3, [r7, #4]
 8031738:	681b      	ldr	r3, [r3, #0]
 803173a:	681a      	ldr	r2, [r3, #0]
 803173c:	687b      	ldr	r3, [r7, #4]
 803173e:	681b      	ldr	r3, [r3, #0]
 8031740:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8031744:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8031746:	687b      	ldr	r3, [r7, #4]
 8031748:	681b      	ldr	r3, [r3, #0]
 803174a:	691a      	ldr	r2, [r3, #16]
 803174c:	687b      	ldr	r3, [r7, #4]
 803174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031750:	b2d2      	uxtb	r2, r2
 8031752:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8031754:	687b      	ldr	r3, [r7, #4]
 8031756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031758:	1c5a      	adds	r2, r3, #1
 803175a:	687b      	ldr	r3, [r7, #4]
 803175c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 803175e:	687b      	ldr	r3, [r7, #4]
 8031760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031762:	b29b      	uxth	r3, r3
 8031764:	3b01      	subs	r3, #1
 8031766:	b29a      	uxth	r2, r3
 8031768:	687b      	ldr	r3, [r7, #4]
 803176a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 803176c:	e08e      	b.n	803188c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 803176e:	687b      	ldr	r3, [r7, #4]
 8031770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031772:	b29b      	uxth	r3, r3
 8031774:	2b02      	cmp	r3, #2
 8031776:	d176      	bne.n	8031866 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8031778:	68fb      	ldr	r3, [r7, #12]
 803177a:	2b01      	cmp	r3, #1
 803177c:	d002      	beq.n	8031784 <I2C_MasterReceive_BTF+0xc4>
 803177e:	68fb      	ldr	r3, [r7, #12]
 8031780:	2b10      	cmp	r3, #16
 8031782:	d108      	bne.n	8031796 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8031784:	687b      	ldr	r3, [r7, #4]
 8031786:	681b      	ldr	r3, [r3, #0]
 8031788:	681a      	ldr	r2, [r3, #0]
 803178a:	687b      	ldr	r3, [r7, #4]
 803178c:	681b      	ldr	r3, [r3, #0]
 803178e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8031792:	601a      	str	r2, [r3, #0]
 8031794:	e019      	b.n	80317ca <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8031796:	68fb      	ldr	r3, [r7, #12]
 8031798:	2b04      	cmp	r3, #4
 803179a:	d002      	beq.n	80317a2 <I2C_MasterReceive_BTF+0xe2>
 803179c:	68fb      	ldr	r3, [r7, #12]
 803179e:	2b02      	cmp	r3, #2
 80317a0:	d108      	bne.n	80317b4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80317a2:	687b      	ldr	r3, [r7, #4]
 80317a4:	681b      	ldr	r3, [r3, #0]
 80317a6:	681a      	ldr	r2, [r3, #0]
 80317a8:	687b      	ldr	r3, [r7, #4]
 80317aa:	681b      	ldr	r3, [r3, #0]
 80317ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80317b0:	601a      	str	r2, [r3, #0]
 80317b2:	e00a      	b.n	80317ca <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80317b4:	68fb      	ldr	r3, [r7, #12]
 80317b6:	2b10      	cmp	r3, #16
 80317b8:	d007      	beq.n	80317ca <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80317ba:	687b      	ldr	r3, [r7, #4]
 80317bc:	681b      	ldr	r3, [r3, #0]
 80317be:	681a      	ldr	r2, [r3, #0]
 80317c0:	687b      	ldr	r3, [r7, #4]
 80317c2:	681b      	ldr	r3, [r3, #0]
 80317c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80317c8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80317ca:	687b      	ldr	r3, [r7, #4]
 80317cc:	681b      	ldr	r3, [r3, #0]
 80317ce:	691a      	ldr	r2, [r3, #16]
 80317d0:	687b      	ldr	r3, [r7, #4]
 80317d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80317d4:	b2d2      	uxtb	r2, r2
 80317d6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80317d8:	687b      	ldr	r3, [r7, #4]
 80317da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80317dc:	1c5a      	adds	r2, r3, #1
 80317de:	687b      	ldr	r3, [r7, #4]
 80317e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80317e2:	687b      	ldr	r3, [r7, #4]
 80317e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80317e6:	b29b      	uxth	r3, r3
 80317e8:	3b01      	subs	r3, #1
 80317ea:	b29a      	uxth	r2, r3
 80317ec:	687b      	ldr	r3, [r7, #4]
 80317ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80317f0:	687b      	ldr	r3, [r7, #4]
 80317f2:	681b      	ldr	r3, [r3, #0]
 80317f4:	691a      	ldr	r2, [r3, #16]
 80317f6:	687b      	ldr	r3, [r7, #4]
 80317f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80317fa:	b2d2      	uxtb	r2, r2
 80317fc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80317fe:	687b      	ldr	r3, [r7, #4]
 8031800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031802:	1c5a      	adds	r2, r3, #1
 8031804:	687b      	ldr	r3, [r7, #4]
 8031806:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8031808:	687b      	ldr	r3, [r7, #4]
 803180a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 803180c:	b29b      	uxth	r3, r3
 803180e:	3b01      	subs	r3, #1
 8031810:	b29a      	uxth	r2, r3
 8031812:	687b      	ldr	r3, [r7, #4]
 8031814:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8031816:	687b      	ldr	r3, [r7, #4]
 8031818:	681b      	ldr	r3, [r3, #0]
 803181a:	685a      	ldr	r2, [r3, #4]
 803181c:	687b      	ldr	r3, [r7, #4]
 803181e:	681b      	ldr	r3, [r3, #0]
 8031820:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8031824:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8031826:	687b      	ldr	r3, [r7, #4]
 8031828:	2220      	movs	r2, #32
 803182a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 803182e:	687b      	ldr	r3, [r7, #4]
 8031830:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8031834:	b2db      	uxtb	r3, r3
 8031836:	2b40      	cmp	r3, #64	; 0x40
 8031838:	d10a      	bne.n	8031850 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 803183a:	687b      	ldr	r3, [r7, #4]
 803183c:	2200      	movs	r2, #0
 803183e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8031842:	687b      	ldr	r3, [r7, #4]
 8031844:	2200      	movs	r2, #0
 8031846:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8031848:	6878      	ldr	r0, [r7, #4]
 803184a:	f7ff fd16 	bl	803127a <HAL_I2C_MemRxCpltCallback>
}
 803184e:	e01d      	b.n	803188c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8031850:	687b      	ldr	r3, [r7, #4]
 8031852:	2200      	movs	r2, #0
 8031854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8031858:	687b      	ldr	r3, [r7, #4]
 803185a:	2212      	movs	r2, #18
 803185c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 803185e:	6878      	ldr	r0, [r7, #4]
 8031860:	f7ff fccb 	bl	80311fa <HAL_I2C_MasterRxCpltCallback>
}
 8031864:	e012      	b.n	803188c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8031866:	687b      	ldr	r3, [r7, #4]
 8031868:	681b      	ldr	r3, [r3, #0]
 803186a:	691a      	ldr	r2, [r3, #16]
 803186c:	687b      	ldr	r3, [r7, #4]
 803186e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031870:	b2d2      	uxtb	r2, r2
 8031872:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8031874:	687b      	ldr	r3, [r7, #4]
 8031876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031878:	1c5a      	adds	r2, r3, #1
 803187a:	687b      	ldr	r3, [r7, #4]
 803187c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 803187e:	687b      	ldr	r3, [r7, #4]
 8031880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031882:	b29b      	uxth	r3, r3
 8031884:	3b01      	subs	r3, #1
 8031886:	b29a      	uxth	r2, r3
 8031888:	687b      	ldr	r3, [r7, #4]
 803188a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 803188c:	bf00      	nop
 803188e:	3710      	adds	r7, #16
 8031890:	46bd      	mov	sp, r7
 8031892:	bd80      	pop	{r7, pc}

08031894 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8031894:	b480      	push	{r7}
 8031896:	b083      	sub	sp, #12
 8031898:	af00      	add	r7, sp, #0
 803189a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 803189c:	687b      	ldr	r3, [r7, #4]
 803189e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80318a2:	b2db      	uxtb	r3, r3
 80318a4:	2b40      	cmp	r3, #64	; 0x40
 80318a6:	d117      	bne.n	80318d8 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80318a8:	687b      	ldr	r3, [r7, #4]
 80318aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80318ac:	2b00      	cmp	r3, #0
 80318ae:	d109      	bne.n	80318c4 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80318b0:	687b      	ldr	r3, [r7, #4]
 80318b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80318b4:	b2db      	uxtb	r3, r3
 80318b6:	461a      	mov	r2, r3
 80318b8:	687b      	ldr	r3, [r7, #4]
 80318ba:	681b      	ldr	r3, [r3, #0]
 80318bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80318c0:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80318c2:	e067      	b.n	8031994 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80318c4:	687b      	ldr	r3, [r7, #4]
 80318c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80318c8:	b2db      	uxtb	r3, r3
 80318ca:	f043 0301 	orr.w	r3, r3, #1
 80318ce:	b2da      	uxtb	r2, r3
 80318d0:	687b      	ldr	r3, [r7, #4]
 80318d2:	681b      	ldr	r3, [r3, #0]
 80318d4:	611a      	str	r2, [r3, #16]
}
 80318d6:	e05d      	b.n	8031994 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80318d8:	687b      	ldr	r3, [r7, #4]
 80318da:	691b      	ldr	r3, [r3, #16]
 80318dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80318e0:	d133      	bne.n	803194a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80318e2:	687b      	ldr	r3, [r7, #4]
 80318e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80318e8:	b2db      	uxtb	r3, r3
 80318ea:	2b21      	cmp	r3, #33	; 0x21
 80318ec:	d109      	bne.n	8031902 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80318ee:	687b      	ldr	r3, [r7, #4]
 80318f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80318f2:	b2db      	uxtb	r3, r3
 80318f4:	461a      	mov	r2, r3
 80318f6:	687b      	ldr	r3, [r7, #4]
 80318f8:	681b      	ldr	r3, [r3, #0]
 80318fa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80318fe:	611a      	str	r2, [r3, #16]
 8031900:	e008      	b.n	8031914 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8031902:	687b      	ldr	r3, [r7, #4]
 8031904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8031906:	b2db      	uxtb	r3, r3
 8031908:	f043 0301 	orr.w	r3, r3, #1
 803190c:	b2da      	uxtb	r2, r3
 803190e:	687b      	ldr	r3, [r7, #4]
 8031910:	681b      	ldr	r3, [r3, #0]
 8031912:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8031914:	687b      	ldr	r3, [r7, #4]
 8031916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8031918:	2b00      	cmp	r3, #0
 803191a:	d004      	beq.n	8031926 <I2C_Master_SB+0x92>
 803191c:	687b      	ldr	r3, [r7, #4]
 803191e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8031920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8031922:	2b00      	cmp	r3, #0
 8031924:	d108      	bne.n	8031938 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8031926:	687b      	ldr	r3, [r7, #4]
 8031928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803192a:	2b00      	cmp	r3, #0
 803192c:	d032      	beq.n	8031994 <I2C_Master_SB+0x100>
 803192e:	687b      	ldr	r3, [r7, #4]
 8031930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8031932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8031934:	2b00      	cmp	r3, #0
 8031936:	d02d      	beq.n	8031994 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8031938:	687b      	ldr	r3, [r7, #4]
 803193a:	681b      	ldr	r3, [r3, #0]
 803193c:	685a      	ldr	r2, [r3, #4]
 803193e:	687b      	ldr	r3, [r7, #4]
 8031940:	681b      	ldr	r3, [r3, #0]
 8031942:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8031946:	605a      	str	r2, [r3, #4]
}
 8031948:	e024      	b.n	8031994 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 803194a:	687b      	ldr	r3, [r7, #4]
 803194c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803194e:	2b00      	cmp	r3, #0
 8031950:	d10e      	bne.n	8031970 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8031952:	687b      	ldr	r3, [r7, #4]
 8031954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8031956:	b29b      	uxth	r3, r3
 8031958:	11db      	asrs	r3, r3, #7
 803195a:	b2db      	uxtb	r3, r3
 803195c:	f003 0306 	and.w	r3, r3, #6
 8031960:	b2db      	uxtb	r3, r3
 8031962:	f063 030f 	orn	r3, r3, #15
 8031966:	b2da      	uxtb	r2, r3
 8031968:	687b      	ldr	r3, [r7, #4]
 803196a:	681b      	ldr	r3, [r3, #0]
 803196c:	611a      	str	r2, [r3, #16]
}
 803196e:	e011      	b.n	8031994 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8031970:	687b      	ldr	r3, [r7, #4]
 8031972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8031974:	2b01      	cmp	r3, #1
 8031976:	d10d      	bne.n	8031994 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8031978:	687b      	ldr	r3, [r7, #4]
 803197a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 803197c:	b29b      	uxth	r3, r3
 803197e:	11db      	asrs	r3, r3, #7
 8031980:	b2db      	uxtb	r3, r3
 8031982:	f003 0306 	and.w	r3, r3, #6
 8031986:	b2db      	uxtb	r3, r3
 8031988:	f063 030e 	orn	r3, r3, #14
 803198c:	b2da      	uxtb	r2, r3
 803198e:	687b      	ldr	r3, [r7, #4]
 8031990:	681b      	ldr	r3, [r3, #0]
 8031992:	611a      	str	r2, [r3, #16]
}
 8031994:	bf00      	nop
 8031996:	370c      	adds	r7, #12
 8031998:	46bd      	mov	sp, r7
 803199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803199e:	4770      	bx	lr

080319a0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80319a0:	b480      	push	{r7}
 80319a2:	b083      	sub	sp, #12
 80319a4:	af00      	add	r7, sp, #0
 80319a6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80319a8:	687b      	ldr	r3, [r7, #4]
 80319aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80319ac:	b2da      	uxtb	r2, r3
 80319ae:	687b      	ldr	r3, [r7, #4]
 80319b0:	681b      	ldr	r3, [r3, #0]
 80319b2:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80319b4:	687b      	ldr	r3, [r7, #4]
 80319b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80319b8:	2b00      	cmp	r3, #0
 80319ba:	d103      	bne.n	80319c4 <I2C_Master_ADD10+0x24>
 80319bc:	687b      	ldr	r3, [r7, #4]
 80319be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80319c0:	2b00      	cmp	r3, #0
 80319c2:	d011      	beq.n	80319e8 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80319c4:	687b      	ldr	r3, [r7, #4]
 80319c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80319c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80319ca:	2b00      	cmp	r3, #0
 80319cc:	d104      	bne.n	80319d8 <I2C_Master_ADD10+0x38>
 80319ce:	687b      	ldr	r3, [r7, #4]
 80319d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80319d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80319d4:	2b00      	cmp	r3, #0
 80319d6:	d007      	beq.n	80319e8 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80319d8:	687b      	ldr	r3, [r7, #4]
 80319da:	681b      	ldr	r3, [r3, #0]
 80319dc:	685a      	ldr	r2, [r3, #4]
 80319de:	687b      	ldr	r3, [r7, #4]
 80319e0:	681b      	ldr	r3, [r3, #0]
 80319e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80319e6:	605a      	str	r2, [r3, #4]
    }
  }
}
 80319e8:	bf00      	nop
 80319ea:	370c      	adds	r7, #12
 80319ec:	46bd      	mov	sp, r7
 80319ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80319f2:	4770      	bx	lr

080319f4 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80319f4:	b480      	push	{r7}
 80319f6:	b091      	sub	sp, #68	; 0x44
 80319f8:	af00      	add	r7, sp, #0
 80319fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80319fc:	687b      	ldr	r3, [r7, #4]
 80319fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8031a02:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8031a06:	687b      	ldr	r3, [r7, #4]
 8031a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031a0a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8031a0c:	687b      	ldr	r3, [r7, #4]
 8031a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8031a10:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8031a12:	687b      	ldr	r3, [r7, #4]
 8031a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8031a18:	b2db      	uxtb	r3, r3
 8031a1a:	2b22      	cmp	r3, #34	; 0x22
 8031a1c:	f040 8169 	bne.w	8031cf2 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8031a20:	687b      	ldr	r3, [r7, #4]
 8031a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8031a24:	2b00      	cmp	r3, #0
 8031a26:	d10f      	bne.n	8031a48 <I2C_Master_ADDR+0x54>
 8031a28:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8031a2c:	2b40      	cmp	r3, #64	; 0x40
 8031a2e:	d10b      	bne.n	8031a48 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8031a30:	2300      	movs	r3, #0
 8031a32:	633b      	str	r3, [r7, #48]	; 0x30
 8031a34:	687b      	ldr	r3, [r7, #4]
 8031a36:	681b      	ldr	r3, [r3, #0]
 8031a38:	695b      	ldr	r3, [r3, #20]
 8031a3a:	633b      	str	r3, [r7, #48]	; 0x30
 8031a3c:	687b      	ldr	r3, [r7, #4]
 8031a3e:	681b      	ldr	r3, [r3, #0]
 8031a40:	699b      	ldr	r3, [r3, #24]
 8031a42:	633b      	str	r3, [r7, #48]	; 0x30
 8031a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8031a46:	e160      	b.n	8031d0a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8031a48:	687b      	ldr	r3, [r7, #4]
 8031a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8031a4c:	2b00      	cmp	r3, #0
 8031a4e:	d11d      	bne.n	8031a8c <I2C_Master_ADDR+0x98>
 8031a50:	687b      	ldr	r3, [r7, #4]
 8031a52:	691b      	ldr	r3, [r3, #16]
 8031a54:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8031a58:	d118      	bne.n	8031a8c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8031a5a:	2300      	movs	r3, #0
 8031a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8031a5e:	687b      	ldr	r3, [r7, #4]
 8031a60:	681b      	ldr	r3, [r3, #0]
 8031a62:	695b      	ldr	r3, [r3, #20]
 8031a64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8031a66:	687b      	ldr	r3, [r7, #4]
 8031a68:	681b      	ldr	r3, [r3, #0]
 8031a6a:	699b      	ldr	r3, [r3, #24]
 8031a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8031a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8031a70:	687b      	ldr	r3, [r7, #4]
 8031a72:	681b      	ldr	r3, [r3, #0]
 8031a74:	681a      	ldr	r2, [r3, #0]
 8031a76:	687b      	ldr	r3, [r7, #4]
 8031a78:	681b      	ldr	r3, [r3, #0]
 8031a7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8031a7e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8031a80:	687b      	ldr	r3, [r7, #4]
 8031a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8031a84:	1c5a      	adds	r2, r3, #1
 8031a86:	687b      	ldr	r3, [r7, #4]
 8031a88:	651a      	str	r2, [r3, #80]	; 0x50
 8031a8a:	e13e      	b.n	8031d0a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8031a8c:	687b      	ldr	r3, [r7, #4]
 8031a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031a90:	b29b      	uxth	r3, r3
 8031a92:	2b00      	cmp	r3, #0
 8031a94:	d113      	bne.n	8031abe <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8031a96:	2300      	movs	r3, #0
 8031a98:	62bb      	str	r3, [r7, #40]	; 0x28
 8031a9a:	687b      	ldr	r3, [r7, #4]
 8031a9c:	681b      	ldr	r3, [r3, #0]
 8031a9e:	695b      	ldr	r3, [r3, #20]
 8031aa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8031aa2:	687b      	ldr	r3, [r7, #4]
 8031aa4:	681b      	ldr	r3, [r3, #0]
 8031aa6:	699b      	ldr	r3, [r3, #24]
 8031aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8031aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8031aac:	687b      	ldr	r3, [r7, #4]
 8031aae:	681b      	ldr	r3, [r3, #0]
 8031ab0:	681a      	ldr	r2, [r3, #0]
 8031ab2:	687b      	ldr	r3, [r7, #4]
 8031ab4:	681b      	ldr	r3, [r3, #0]
 8031ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8031aba:	601a      	str	r2, [r3, #0]
 8031abc:	e115      	b.n	8031cea <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8031abe:	687b      	ldr	r3, [r7, #4]
 8031ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031ac2:	b29b      	uxth	r3, r3
 8031ac4:	2b01      	cmp	r3, #1
 8031ac6:	f040 808a 	bne.w	8031bde <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8031aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8031acc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8031ad0:	d137      	bne.n	8031b42 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8031ad2:	687b      	ldr	r3, [r7, #4]
 8031ad4:	681b      	ldr	r3, [r3, #0]
 8031ad6:	681a      	ldr	r2, [r3, #0]
 8031ad8:	687b      	ldr	r3, [r7, #4]
 8031ada:	681b      	ldr	r3, [r3, #0]
 8031adc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8031ae0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8031ae2:	687b      	ldr	r3, [r7, #4]
 8031ae4:	681b      	ldr	r3, [r3, #0]
 8031ae6:	685b      	ldr	r3, [r3, #4]
 8031ae8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8031aec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8031af0:	d113      	bne.n	8031b1a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8031af2:	687b      	ldr	r3, [r7, #4]
 8031af4:	681b      	ldr	r3, [r3, #0]
 8031af6:	681a      	ldr	r2, [r3, #0]
 8031af8:	687b      	ldr	r3, [r7, #4]
 8031afa:	681b      	ldr	r3, [r3, #0]
 8031afc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8031b00:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8031b02:	2300      	movs	r3, #0
 8031b04:	627b      	str	r3, [r7, #36]	; 0x24
 8031b06:	687b      	ldr	r3, [r7, #4]
 8031b08:	681b      	ldr	r3, [r3, #0]
 8031b0a:	695b      	ldr	r3, [r3, #20]
 8031b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8031b0e:	687b      	ldr	r3, [r7, #4]
 8031b10:	681b      	ldr	r3, [r3, #0]
 8031b12:	699b      	ldr	r3, [r3, #24]
 8031b14:	627b      	str	r3, [r7, #36]	; 0x24
 8031b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031b18:	e0e7      	b.n	8031cea <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8031b1a:	2300      	movs	r3, #0
 8031b1c:	623b      	str	r3, [r7, #32]
 8031b1e:	687b      	ldr	r3, [r7, #4]
 8031b20:	681b      	ldr	r3, [r3, #0]
 8031b22:	695b      	ldr	r3, [r3, #20]
 8031b24:	623b      	str	r3, [r7, #32]
 8031b26:	687b      	ldr	r3, [r7, #4]
 8031b28:	681b      	ldr	r3, [r3, #0]
 8031b2a:	699b      	ldr	r3, [r3, #24]
 8031b2c:	623b      	str	r3, [r7, #32]
 8031b2e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8031b30:	687b      	ldr	r3, [r7, #4]
 8031b32:	681b      	ldr	r3, [r3, #0]
 8031b34:	681a      	ldr	r2, [r3, #0]
 8031b36:	687b      	ldr	r3, [r7, #4]
 8031b38:	681b      	ldr	r3, [r3, #0]
 8031b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8031b3e:	601a      	str	r2, [r3, #0]
 8031b40:	e0d3      	b.n	8031cea <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8031b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8031b44:	2b08      	cmp	r3, #8
 8031b46:	d02e      	beq.n	8031ba6 <I2C_Master_ADDR+0x1b2>
 8031b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8031b4a:	2b20      	cmp	r3, #32
 8031b4c:	d02b      	beq.n	8031ba6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8031b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8031b50:	2b12      	cmp	r3, #18
 8031b52:	d102      	bne.n	8031b5a <I2C_Master_ADDR+0x166>
 8031b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8031b56:	2b01      	cmp	r3, #1
 8031b58:	d125      	bne.n	8031ba6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8031b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8031b5c:	2b04      	cmp	r3, #4
 8031b5e:	d00e      	beq.n	8031b7e <I2C_Master_ADDR+0x18a>
 8031b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8031b62:	2b02      	cmp	r3, #2
 8031b64:	d00b      	beq.n	8031b7e <I2C_Master_ADDR+0x18a>
 8031b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8031b68:	2b10      	cmp	r3, #16
 8031b6a:	d008      	beq.n	8031b7e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8031b6c:	687b      	ldr	r3, [r7, #4]
 8031b6e:	681b      	ldr	r3, [r3, #0]
 8031b70:	681a      	ldr	r2, [r3, #0]
 8031b72:	687b      	ldr	r3, [r7, #4]
 8031b74:	681b      	ldr	r3, [r3, #0]
 8031b76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8031b7a:	601a      	str	r2, [r3, #0]
 8031b7c:	e007      	b.n	8031b8e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8031b7e:	687b      	ldr	r3, [r7, #4]
 8031b80:	681b      	ldr	r3, [r3, #0]
 8031b82:	681a      	ldr	r2, [r3, #0]
 8031b84:	687b      	ldr	r3, [r7, #4]
 8031b86:	681b      	ldr	r3, [r3, #0]
 8031b88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8031b8c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8031b8e:	2300      	movs	r3, #0
 8031b90:	61fb      	str	r3, [r7, #28]
 8031b92:	687b      	ldr	r3, [r7, #4]
 8031b94:	681b      	ldr	r3, [r3, #0]
 8031b96:	695b      	ldr	r3, [r3, #20]
 8031b98:	61fb      	str	r3, [r7, #28]
 8031b9a:	687b      	ldr	r3, [r7, #4]
 8031b9c:	681b      	ldr	r3, [r3, #0]
 8031b9e:	699b      	ldr	r3, [r3, #24]
 8031ba0:	61fb      	str	r3, [r7, #28]
 8031ba2:	69fb      	ldr	r3, [r7, #28]
 8031ba4:	e0a1      	b.n	8031cea <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8031ba6:	687b      	ldr	r3, [r7, #4]
 8031ba8:	681b      	ldr	r3, [r3, #0]
 8031baa:	681a      	ldr	r2, [r3, #0]
 8031bac:	687b      	ldr	r3, [r7, #4]
 8031bae:	681b      	ldr	r3, [r3, #0]
 8031bb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8031bb4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8031bb6:	2300      	movs	r3, #0
 8031bb8:	61bb      	str	r3, [r7, #24]
 8031bba:	687b      	ldr	r3, [r7, #4]
 8031bbc:	681b      	ldr	r3, [r3, #0]
 8031bbe:	695b      	ldr	r3, [r3, #20]
 8031bc0:	61bb      	str	r3, [r7, #24]
 8031bc2:	687b      	ldr	r3, [r7, #4]
 8031bc4:	681b      	ldr	r3, [r3, #0]
 8031bc6:	699b      	ldr	r3, [r3, #24]
 8031bc8:	61bb      	str	r3, [r7, #24]
 8031bca:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8031bcc:	687b      	ldr	r3, [r7, #4]
 8031bce:	681b      	ldr	r3, [r3, #0]
 8031bd0:	681a      	ldr	r2, [r3, #0]
 8031bd2:	687b      	ldr	r3, [r7, #4]
 8031bd4:	681b      	ldr	r3, [r3, #0]
 8031bd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8031bda:	601a      	str	r2, [r3, #0]
 8031bdc:	e085      	b.n	8031cea <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8031bde:	687b      	ldr	r3, [r7, #4]
 8031be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031be2:	b29b      	uxth	r3, r3
 8031be4:	2b02      	cmp	r3, #2
 8031be6:	d14d      	bne.n	8031c84 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8031be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8031bea:	2b04      	cmp	r3, #4
 8031bec:	d016      	beq.n	8031c1c <I2C_Master_ADDR+0x228>
 8031bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8031bf0:	2b02      	cmp	r3, #2
 8031bf2:	d013      	beq.n	8031c1c <I2C_Master_ADDR+0x228>
 8031bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8031bf6:	2b10      	cmp	r3, #16
 8031bf8:	d010      	beq.n	8031c1c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8031bfa:	687b      	ldr	r3, [r7, #4]
 8031bfc:	681b      	ldr	r3, [r3, #0]
 8031bfe:	681a      	ldr	r2, [r3, #0]
 8031c00:	687b      	ldr	r3, [r7, #4]
 8031c02:	681b      	ldr	r3, [r3, #0]
 8031c04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8031c08:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8031c0a:	687b      	ldr	r3, [r7, #4]
 8031c0c:	681b      	ldr	r3, [r3, #0]
 8031c0e:	681a      	ldr	r2, [r3, #0]
 8031c10:	687b      	ldr	r3, [r7, #4]
 8031c12:	681b      	ldr	r3, [r3, #0]
 8031c14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8031c18:	601a      	str	r2, [r3, #0]
 8031c1a:	e007      	b.n	8031c2c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8031c1c:	687b      	ldr	r3, [r7, #4]
 8031c1e:	681b      	ldr	r3, [r3, #0]
 8031c20:	681a      	ldr	r2, [r3, #0]
 8031c22:	687b      	ldr	r3, [r7, #4]
 8031c24:	681b      	ldr	r3, [r3, #0]
 8031c26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8031c2a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8031c2c:	687b      	ldr	r3, [r7, #4]
 8031c2e:	681b      	ldr	r3, [r3, #0]
 8031c30:	685b      	ldr	r3, [r3, #4]
 8031c32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8031c36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8031c3a:	d117      	bne.n	8031c6c <I2C_Master_ADDR+0x278>
 8031c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8031c3e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8031c42:	d00b      	beq.n	8031c5c <I2C_Master_ADDR+0x268>
 8031c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8031c46:	2b01      	cmp	r3, #1
 8031c48:	d008      	beq.n	8031c5c <I2C_Master_ADDR+0x268>
 8031c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8031c4c:	2b08      	cmp	r3, #8
 8031c4e:	d005      	beq.n	8031c5c <I2C_Master_ADDR+0x268>
 8031c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8031c52:	2b10      	cmp	r3, #16
 8031c54:	d002      	beq.n	8031c5c <I2C_Master_ADDR+0x268>
 8031c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8031c58:	2b20      	cmp	r3, #32
 8031c5a:	d107      	bne.n	8031c6c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8031c5c:	687b      	ldr	r3, [r7, #4]
 8031c5e:	681b      	ldr	r3, [r3, #0]
 8031c60:	685a      	ldr	r2, [r3, #4]
 8031c62:	687b      	ldr	r3, [r7, #4]
 8031c64:	681b      	ldr	r3, [r3, #0]
 8031c66:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8031c6a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8031c6c:	2300      	movs	r3, #0
 8031c6e:	617b      	str	r3, [r7, #20]
 8031c70:	687b      	ldr	r3, [r7, #4]
 8031c72:	681b      	ldr	r3, [r3, #0]
 8031c74:	695b      	ldr	r3, [r3, #20]
 8031c76:	617b      	str	r3, [r7, #20]
 8031c78:	687b      	ldr	r3, [r7, #4]
 8031c7a:	681b      	ldr	r3, [r3, #0]
 8031c7c:	699b      	ldr	r3, [r3, #24]
 8031c7e:	617b      	str	r3, [r7, #20]
 8031c80:	697b      	ldr	r3, [r7, #20]
 8031c82:	e032      	b.n	8031cea <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8031c84:	687b      	ldr	r3, [r7, #4]
 8031c86:	681b      	ldr	r3, [r3, #0]
 8031c88:	681a      	ldr	r2, [r3, #0]
 8031c8a:	687b      	ldr	r3, [r7, #4]
 8031c8c:	681b      	ldr	r3, [r3, #0]
 8031c8e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8031c92:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8031c94:	687b      	ldr	r3, [r7, #4]
 8031c96:	681b      	ldr	r3, [r3, #0]
 8031c98:	685b      	ldr	r3, [r3, #4]
 8031c9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8031c9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8031ca2:	d117      	bne.n	8031cd4 <I2C_Master_ADDR+0x2e0>
 8031ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8031ca6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8031caa:	d00b      	beq.n	8031cc4 <I2C_Master_ADDR+0x2d0>
 8031cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8031cae:	2b01      	cmp	r3, #1
 8031cb0:	d008      	beq.n	8031cc4 <I2C_Master_ADDR+0x2d0>
 8031cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8031cb4:	2b08      	cmp	r3, #8
 8031cb6:	d005      	beq.n	8031cc4 <I2C_Master_ADDR+0x2d0>
 8031cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8031cba:	2b10      	cmp	r3, #16
 8031cbc:	d002      	beq.n	8031cc4 <I2C_Master_ADDR+0x2d0>
 8031cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8031cc0:	2b20      	cmp	r3, #32
 8031cc2:	d107      	bne.n	8031cd4 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8031cc4:	687b      	ldr	r3, [r7, #4]
 8031cc6:	681b      	ldr	r3, [r3, #0]
 8031cc8:	685a      	ldr	r2, [r3, #4]
 8031cca:	687b      	ldr	r3, [r7, #4]
 8031ccc:	681b      	ldr	r3, [r3, #0]
 8031cce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8031cd2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8031cd4:	2300      	movs	r3, #0
 8031cd6:	613b      	str	r3, [r7, #16]
 8031cd8:	687b      	ldr	r3, [r7, #4]
 8031cda:	681b      	ldr	r3, [r3, #0]
 8031cdc:	695b      	ldr	r3, [r3, #20]
 8031cde:	613b      	str	r3, [r7, #16]
 8031ce0:	687b      	ldr	r3, [r7, #4]
 8031ce2:	681b      	ldr	r3, [r3, #0]
 8031ce4:	699b      	ldr	r3, [r3, #24]
 8031ce6:	613b      	str	r3, [r7, #16]
 8031ce8:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8031cea:	687b      	ldr	r3, [r7, #4]
 8031cec:	2200      	movs	r2, #0
 8031cee:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8031cf0:	e00b      	b.n	8031d0a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8031cf2:	2300      	movs	r3, #0
 8031cf4:	60fb      	str	r3, [r7, #12]
 8031cf6:	687b      	ldr	r3, [r7, #4]
 8031cf8:	681b      	ldr	r3, [r3, #0]
 8031cfa:	695b      	ldr	r3, [r3, #20]
 8031cfc:	60fb      	str	r3, [r7, #12]
 8031cfe:	687b      	ldr	r3, [r7, #4]
 8031d00:	681b      	ldr	r3, [r3, #0]
 8031d02:	699b      	ldr	r3, [r3, #24]
 8031d04:	60fb      	str	r3, [r7, #12]
 8031d06:	68fb      	ldr	r3, [r7, #12]
}
 8031d08:	e7ff      	b.n	8031d0a <I2C_Master_ADDR+0x316>
 8031d0a:	bf00      	nop
 8031d0c:	3744      	adds	r7, #68	; 0x44
 8031d0e:	46bd      	mov	sp, r7
 8031d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031d14:	4770      	bx	lr

08031d16 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8031d16:	b580      	push	{r7, lr}
 8031d18:	b084      	sub	sp, #16
 8031d1a:	af00      	add	r7, sp, #0
 8031d1c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8031d1e:	687b      	ldr	r3, [r7, #4]
 8031d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8031d24:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8031d26:	687b      	ldr	r3, [r7, #4]
 8031d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031d2a:	b29b      	uxth	r3, r3
 8031d2c:	2b00      	cmp	r3, #0
 8031d2e:	d02b      	beq.n	8031d88 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8031d30:	687b      	ldr	r3, [r7, #4]
 8031d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031d34:	781a      	ldrb	r2, [r3, #0]
 8031d36:	687b      	ldr	r3, [r7, #4]
 8031d38:	681b      	ldr	r3, [r3, #0]
 8031d3a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8031d3c:	687b      	ldr	r3, [r7, #4]
 8031d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031d40:	1c5a      	adds	r2, r3, #1
 8031d42:	687b      	ldr	r3, [r7, #4]
 8031d44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8031d46:	687b      	ldr	r3, [r7, #4]
 8031d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031d4a:	b29b      	uxth	r3, r3
 8031d4c:	3b01      	subs	r3, #1
 8031d4e:	b29a      	uxth	r2, r3
 8031d50:	687b      	ldr	r3, [r7, #4]
 8031d52:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8031d54:	687b      	ldr	r3, [r7, #4]
 8031d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031d58:	b29b      	uxth	r3, r3
 8031d5a:	2b00      	cmp	r3, #0
 8031d5c:	d114      	bne.n	8031d88 <I2C_SlaveTransmit_TXE+0x72>
 8031d5e:	7bfb      	ldrb	r3, [r7, #15]
 8031d60:	2b29      	cmp	r3, #41	; 0x29
 8031d62:	d111      	bne.n	8031d88 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8031d64:	687b      	ldr	r3, [r7, #4]
 8031d66:	681b      	ldr	r3, [r3, #0]
 8031d68:	685a      	ldr	r2, [r3, #4]
 8031d6a:	687b      	ldr	r3, [r7, #4]
 8031d6c:	681b      	ldr	r3, [r3, #0]
 8031d6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8031d72:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8031d74:	687b      	ldr	r3, [r7, #4]
 8031d76:	2221      	movs	r2, #33	; 0x21
 8031d78:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8031d7a:	687b      	ldr	r3, [r7, #4]
 8031d7c:	2228      	movs	r2, #40	; 0x28
 8031d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8031d82:	6878      	ldr	r0, [r7, #4]
 8031d84:	f7ff fa43 	bl	803120e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8031d88:	bf00      	nop
 8031d8a:	3710      	adds	r7, #16
 8031d8c:	46bd      	mov	sp, r7
 8031d8e:	bd80      	pop	{r7, pc}

08031d90 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8031d90:	b480      	push	{r7}
 8031d92:	b083      	sub	sp, #12
 8031d94:	af00      	add	r7, sp, #0
 8031d96:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8031d98:	687b      	ldr	r3, [r7, #4]
 8031d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031d9c:	b29b      	uxth	r3, r3
 8031d9e:	2b00      	cmp	r3, #0
 8031da0:	d011      	beq.n	8031dc6 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8031da2:	687b      	ldr	r3, [r7, #4]
 8031da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031da6:	781a      	ldrb	r2, [r3, #0]
 8031da8:	687b      	ldr	r3, [r7, #4]
 8031daa:	681b      	ldr	r3, [r3, #0]
 8031dac:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8031dae:	687b      	ldr	r3, [r7, #4]
 8031db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031db2:	1c5a      	adds	r2, r3, #1
 8031db4:	687b      	ldr	r3, [r7, #4]
 8031db6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8031db8:	687b      	ldr	r3, [r7, #4]
 8031dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031dbc:	b29b      	uxth	r3, r3
 8031dbe:	3b01      	subs	r3, #1
 8031dc0:	b29a      	uxth	r2, r3
 8031dc2:	687b      	ldr	r3, [r7, #4]
 8031dc4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8031dc6:	bf00      	nop
 8031dc8:	370c      	adds	r7, #12
 8031dca:	46bd      	mov	sp, r7
 8031dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031dd0:	4770      	bx	lr

08031dd2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8031dd2:	b580      	push	{r7, lr}
 8031dd4:	b084      	sub	sp, #16
 8031dd6:	af00      	add	r7, sp, #0
 8031dd8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8031dda:	687b      	ldr	r3, [r7, #4]
 8031ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8031de0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8031de2:	687b      	ldr	r3, [r7, #4]
 8031de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031de6:	b29b      	uxth	r3, r3
 8031de8:	2b00      	cmp	r3, #0
 8031dea:	d02c      	beq.n	8031e46 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8031dec:	687b      	ldr	r3, [r7, #4]
 8031dee:	681b      	ldr	r3, [r3, #0]
 8031df0:	691a      	ldr	r2, [r3, #16]
 8031df2:	687b      	ldr	r3, [r7, #4]
 8031df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031df6:	b2d2      	uxtb	r2, r2
 8031df8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8031dfa:	687b      	ldr	r3, [r7, #4]
 8031dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031dfe:	1c5a      	adds	r2, r3, #1
 8031e00:	687b      	ldr	r3, [r7, #4]
 8031e02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8031e04:	687b      	ldr	r3, [r7, #4]
 8031e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031e08:	b29b      	uxth	r3, r3
 8031e0a:	3b01      	subs	r3, #1
 8031e0c:	b29a      	uxth	r2, r3
 8031e0e:	687b      	ldr	r3, [r7, #4]
 8031e10:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8031e12:	687b      	ldr	r3, [r7, #4]
 8031e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031e16:	b29b      	uxth	r3, r3
 8031e18:	2b00      	cmp	r3, #0
 8031e1a:	d114      	bne.n	8031e46 <I2C_SlaveReceive_RXNE+0x74>
 8031e1c:	7bfb      	ldrb	r3, [r7, #15]
 8031e1e:	2b2a      	cmp	r3, #42	; 0x2a
 8031e20:	d111      	bne.n	8031e46 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8031e22:	687b      	ldr	r3, [r7, #4]
 8031e24:	681b      	ldr	r3, [r3, #0]
 8031e26:	685a      	ldr	r2, [r3, #4]
 8031e28:	687b      	ldr	r3, [r7, #4]
 8031e2a:	681b      	ldr	r3, [r3, #0]
 8031e2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8031e30:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8031e32:	687b      	ldr	r3, [r7, #4]
 8031e34:	2222      	movs	r2, #34	; 0x22
 8031e36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8031e38:	687b      	ldr	r3, [r7, #4]
 8031e3a:	2228      	movs	r2, #40	; 0x28
 8031e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8031e40:	6878      	ldr	r0, [r7, #4]
 8031e42:	f7ff f9ee 	bl	8031222 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8031e46:	bf00      	nop
 8031e48:	3710      	adds	r7, #16
 8031e4a:	46bd      	mov	sp, r7
 8031e4c:	bd80      	pop	{r7, pc}

08031e4e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8031e4e:	b480      	push	{r7}
 8031e50:	b083      	sub	sp, #12
 8031e52:	af00      	add	r7, sp, #0
 8031e54:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8031e56:	687b      	ldr	r3, [r7, #4]
 8031e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031e5a:	b29b      	uxth	r3, r3
 8031e5c:	2b00      	cmp	r3, #0
 8031e5e:	d012      	beq.n	8031e86 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8031e60:	687b      	ldr	r3, [r7, #4]
 8031e62:	681b      	ldr	r3, [r3, #0]
 8031e64:	691a      	ldr	r2, [r3, #16]
 8031e66:	687b      	ldr	r3, [r7, #4]
 8031e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031e6a:	b2d2      	uxtb	r2, r2
 8031e6c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8031e6e:	687b      	ldr	r3, [r7, #4]
 8031e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031e72:	1c5a      	adds	r2, r3, #1
 8031e74:	687b      	ldr	r3, [r7, #4]
 8031e76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8031e78:	687b      	ldr	r3, [r7, #4]
 8031e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031e7c:	b29b      	uxth	r3, r3
 8031e7e:	3b01      	subs	r3, #1
 8031e80:	b29a      	uxth	r2, r3
 8031e82:	687b      	ldr	r3, [r7, #4]
 8031e84:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8031e86:	bf00      	nop
 8031e88:	370c      	adds	r7, #12
 8031e8a:	46bd      	mov	sp, r7
 8031e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031e90:	4770      	bx	lr

08031e92 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8031e92:	b580      	push	{r7, lr}
 8031e94:	b084      	sub	sp, #16
 8031e96:	af00      	add	r7, sp, #0
 8031e98:	6078      	str	r0, [r7, #4]
 8031e9a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8031e9c:	2300      	movs	r3, #0
 8031e9e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8031ea0:	687b      	ldr	r3, [r7, #4]
 8031ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8031ea6:	b2db      	uxtb	r3, r3
 8031ea8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8031eac:	2b28      	cmp	r3, #40	; 0x28
 8031eae:	d127      	bne.n	8031f00 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8031eb0:	687b      	ldr	r3, [r7, #4]
 8031eb2:	681b      	ldr	r3, [r3, #0]
 8031eb4:	685a      	ldr	r2, [r3, #4]
 8031eb6:	687b      	ldr	r3, [r7, #4]
 8031eb8:	681b      	ldr	r3, [r3, #0]
 8031eba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8031ebe:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8031ec0:	683b      	ldr	r3, [r7, #0]
 8031ec2:	089b      	lsrs	r3, r3, #2
 8031ec4:	f003 0301 	and.w	r3, r3, #1
 8031ec8:	2b00      	cmp	r3, #0
 8031eca:	d101      	bne.n	8031ed0 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8031ecc:	2301      	movs	r3, #1
 8031ece:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8031ed0:	683b      	ldr	r3, [r7, #0]
 8031ed2:	09db      	lsrs	r3, r3, #7
 8031ed4:	f003 0301 	and.w	r3, r3, #1
 8031ed8:	2b00      	cmp	r3, #0
 8031eda:	d103      	bne.n	8031ee4 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8031edc:	687b      	ldr	r3, [r7, #4]
 8031ede:	68db      	ldr	r3, [r3, #12]
 8031ee0:	81bb      	strh	r3, [r7, #12]
 8031ee2:	e002      	b.n	8031eea <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8031ee4:	687b      	ldr	r3, [r7, #4]
 8031ee6:	699b      	ldr	r3, [r3, #24]
 8031ee8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8031eea:	687b      	ldr	r3, [r7, #4]
 8031eec:	2200      	movs	r2, #0
 8031eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8031ef2:	89ba      	ldrh	r2, [r7, #12]
 8031ef4:	7bfb      	ldrb	r3, [r7, #15]
 8031ef6:	4619      	mov	r1, r3
 8031ef8:	6878      	ldr	r0, [r7, #4]
 8031efa:	f7ff f99c 	bl	8031236 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8031efe:	e008      	b.n	8031f12 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8031f00:	687b      	ldr	r3, [r7, #4]
 8031f02:	681b      	ldr	r3, [r3, #0]
 8031f04:	f06f 0202 	mvn.w	r2, #2
 8031f08:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8031f0a:	687b      	ldr	r3, [r7, #4]
 8031f0c:	2200      	movs	r2, #0
 8031f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8031f12:	bf00      	nop
 8031f14:	3710      	adds	r7, #16
 8031f16:	46bd      	mov	sp, r7
 8031f18:	bd80      	pop	{r7, pc}
	...

08031f1c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8031f1c:	b580      	push	{r7, lr}
 8031f1e:	b084      	sub	sp, #16
 8031f20:	af00      	add	r7, sp, #0
 8031f22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8031f24:	687b      	ldr	r3, [r7, #4]
 8031f26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8031f2a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8031f2c:	687b      	ldr	r3, [r7, #4]
 8031f2e:	681b      	ldr	r3, [r3, #0]
 8031f30:	685a      	ldr	r2, [r3, #4]
 8031f32:	687b      	ldr	r3, [r7, #4]
 8031f34:	681b      	ldr	r3, [r3, #0]
 8031f36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8031f3a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8031f3c:	2300      	movs	r3, #0
 8031f3e:	60bb      	str	r3, [r7, #8]
 8031f40:	687b      	ldr	r3, [r7, #4]
 8031f42:	681b      	ldr	r3, [r3, #0]
 8031f44:	695b      	ldr	r3, [r3, #20]
 8031f46:	60bb      	str	r3, [r7, #8]
 8031f48:	687b      	ldr	r3, [r7, #4]
 8031f4a:	681b      	ldr	r3, [r3, #0]
 8031f4c:	681a      	ldr	r2, [r3, #0]
 8031f4e:	687b      	ldr	r3, [r7, #4]
 8031f50:	681b      	ldr	r3, [r3, #0]
 8031f52:	f042 0201 	orr.w	r2, r2, #1
 8031f56:	601a      	str	r2, [r3, #0]
 8031f58:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8031f5a:	687b      	ldr	r3, [r7, #4]
 8031f5c:	681b      	ldr	r3, [r3, #0]
 8031f5e:	681a      	ldr	r2, [r3, #0]
 8031f60:	687b      	ldr	r3, [r7, #4]
 8031f62:	681b      	ldr	r3, [r3, #0]
 8031f64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8031f68:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8031f6a:	687b      	ldr	r3, [r7, #4]
 8031f6c:	681b      	ldr	r3, [r3, #0]
 8031f6e:	685b      	ldr	r3, [r3, #4]
 8031f70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8031f74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8031f78:	d172      	bne.n	8032060 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8031f7a:	7bfb      	ldrb	r3, [r7, #15]
 8031f7c:	2b22      	cmp	r3, #34	; 0x22
 8031f7e:	d002      	beq.n	8031f86 <I2C_Slave_STOPF+0x6a>
 8031f80:	7bfb      	ldrb	r3, [r7, #15]
 8031f82:	2b2a      	cmp	r3, #42	; 0x2a
 8031f84:	d135      	bne.n	8031ff2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8031f86:	687b      	ldr	r3, [r7, #4]
 8031f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8031f8a:	681b      	ldr	r3, [r3, #0]
 8031f8c:	685b      	ldr	r3, [r3, #4]
 8031f8e:	b29a      	uxth	r2, r3
 8031f90:	687b      	ldr	r3, [r7, #4]
 8031f92:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8031f94:	687b      	ldr	r3, [r7, #4]
 8031f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031f98:	b29b      	uxth	r3, r3
 8031f9a:	2b00      	cmp	r3, #0
 8031f9c:	d005      	beq.n	8031faa <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8031f9e:	687b      	ldr	r3, [r7, #4]
 8031fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8031fa2:	f043 0204 	orr.w	r2, r3, #4
 8031fa6:	687b      	ldr	r3, [r7, #4]
 8031fa8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8031faa:	687b      	ldr	r3, [r7, #4]
 8031fac:	681b      	ldr	r3, [r3, #0]
 8031fae:	685a      	ldr	r2, [r3, #4]
 8031fb0:	687b      	ldr	r3, [r7, #4]
 8031fb2:	681b      	ldr	r3, [r3, #0]
 8031fb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8031fb8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8031fba:	687b      	ldr	r3, [r7, #4]
 8031fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8031fbe:	4618      	mov	r0, r3
 8031fc0:	f7fd fcac 	bl	802f91c <HAL_DMA_GetState>
 8031fc4:	4603      	mov	r3, r0
 8031fc6:	2b01      	cmp	r3, #1
 8031fc8:	d049      	beq.n	803205e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8031fca:	687b      	ldr	r3, [r7, #4]
 8031fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8031fce:	4a69      	ldr	r2, [pc, #420]	; (8032174 <I2C_Slave_STOPF+0x258>)
 8031fd0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8031fd2:	687b      	ldr	r3, [r7, #4]
 8031fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8031fd6:	4618      	mov	r0, r3
 8031fd8:	f7fd faf4 	bl	802f5c4 <HAL_DMA_Abort_IT>
 8031fdc:	4603      	mov	r3, r0
 8031fde:	2b00      	cmp	r3, #0
 8031fe0:	d03d      	beq.n	803205e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8031fe2:	687b      	ldr	r3, [r7, #4]
 8031fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8031fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8031fe8:	687a      	ldr	r2, [r7, #4]
 8031fea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8031fec:	4610      	mov	r0, r2
 8031fee:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8031ff0:	e035      	b.n	803205e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8031ff2:	687b      	ldr	r3, [r7, #4]
 8031ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8031ff6:	681b      	ldr	r3, [r3, #0]
 8031ff8:	685b      	ldr	r3, [r3, #4]
 8031ffa:	b29a      	uxth	r2, r3
 8031ffc:	687b      	ldr	r3, [r7, #4]
 8031ffe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8032000:	687b      	ldr	r3, [r7, #4]
 8032002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8032004:	b29b      	uxth	r3, r3
 8032006:	2b00      	cmp	r3, #0
 8032008:	d005      	beq.n	8032016 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 803200a:	687b      	ldr	r3, [r7, #4]
 803200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803200e:	f043 0204 	orr.w	r2, r3, #4
 8032012:	687b      	ldr	r3, [r7, #4]
 8032014:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8032016:	687b      	ldr	r3, [r7, #4]
 8032018:	681b      	ldr	r3, [r3, #0]
 803201a:	685a      	ldr	r2, [r3, #4]
 803201c:	687b      	ldr	r3, [r7, #4]
 803201e:	681b      	ldr	r3, [r3, #0]
 8032020:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8032024:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8032026:	687b      	ldr	r3, [r7, #4]
 8032028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803202a:	4618      	mov	r0, r3
 803202c:	f7fd fc76 	bl	802f91c <HAL_DMA_GetState>
 8032030:	4603      	mov	r3, r0
 8032032:	2b01      	cmp	r3, #1
 8032034:	d014      	beq.n	8032060 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8032036:	687b      	ldr	r3, [r7, #4]
 8032038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803203a:	4a4e      	ldr	r2, [pc, #312]	; (8032174 <I2C_Slave_STOPF+0x258>)
 803203c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 803203e:	687b      	ldr	r3, [r7, #4]
 8032040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8032042:	4618      	mov	r0, r3
 8032044:	f7fd fabe 	bl	802f5c4 <HAL_DMA_Abort_IT>
 8032048:	4603      	mov	r3, r0
 803204a:	2b00      	cmp	r3, #0
 803204c:	d008      	beq.n	8032060 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 803204e:	687b      	ldr	r3, [r7, #4]
 8032050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8032052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8032054:	687a      	ldr	r2, [r7, #4]
 8032056:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8032058:	4610      	mov	r0, r2
 803205a:	4798      	blx	r3
 803205c:	e000      	b.n	8032060 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 803205e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8032060:	687b      	ldr	r3, [r7, #4]
 8032062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8032064:	b29b      	uxth	r3, r3
 8032066:	2b00      	cmp	r3, #0
 8032068:	d03e      	beq.n	80320e8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 803206a:	687b      	ldr	r3, [r7, #4]
 803206c:	681b      	ldr	r3, [r3, #0]
 803206e:	695b      	ldr	r3, [r3, #20]
 8032070:	f003 0304 	and.w	r3, r3, #4
 8032074:	2b04      	cmp	r3, #4
 8032076:	d112      	bne.n	803209e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8032078:	687b      	ldr	r3, [r7, #4]
 803207a:	681b      	ldr	r3, [r3, #0]
 803207c:	691a      	ldr	r2, [r3, #16]
 803207e:	687b      	ldr	r3, [r7, #4]
 8032080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8032082:	b2d2      	uxtb	r2, r2
 8032084:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8032086:	687b      	ldr	r3, [r7, #4]
 8032088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803208a:	1c5a      	adds	r2, r3, #1
 803208c:	687b      	ldr	r3, [r7, #4]
 803208e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8032090:	687b      	ldr	r3, [r7, #4]
 8032092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8032094:	b29b      	uxth	r3, r3
 8032096:	3b01      	subs	r3, #1
 8032098:	b29a      	uxth	r2, r3
 803209a:	687b      	ldr	r3, [r7, #4]
 803209c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 803209e:	687b      	ldr	r3, [r7, #4]
 80320a0:	681b      	ldr	r3, [r3, #0]
 80320a2:	695b      	ldr	r3, [r3, #20]
 80320a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80320a8:	2b40      	cmp	r3, #64	; 0x40
 80320aa:	d112      	bne.n	80320d2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80320ac:	687b      	ldr	r3, [r7, #4]
 80320ae:	681b      	ldr	r3, [r3, #0]
 80320b0:	691a      	ldr	r2, [r3, #16]
 80320b2:	687b      	ldr	r3, [r7, #4]
 80320b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80320b6:	b2d2      	uxtb	r2, r2
 80320b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80320ba:	687b      	ldr	r3, [r7, #4]
 80320bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80320be:	1c5a      	adds	r2, r3, #1
 80320c0:	687b      	ldr	r3, [r7, #4]
 80320c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80320c4:	687b      	ldr	r3, [r7, #4]
 80320c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80320c8:	b29b      	uxth	r3, r3
 80320ca:	3b01      	subs	r3, #1
 80320cc:	b29a      	uxth	r2, r3
 80320ce:	687b      	ldr	r3, [r7, #4]
 80320d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80320d2:	687b      	ldr	r3, [r7, #4]
 80320d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80320d6:	b29b      	uxth	r3, r3
 80320d8:	2b00      	cmp	r3, #0
 80320da:	d005      	beq.n	80320e8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80320dc:	687b      	ldr	r3, [r7, #4]
 80320de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80320e0:	f043 0204 	orr.w	r2, r3, #4
 80320e4:	687b      	ldr	r3, [r7, #4]
 80320e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80320e8:	687b      	ldr	r3, [r7, #4]
 80320ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80320ec:	2b00      	cmp	r3, #0
 80320ee:	d003      	beq.n	80320f8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80320f0:	6878      	ldr	r0, [r7, #4]
 80320f2:	f000 f8b3 	bl	803225c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80320f6:	e039      	b.n	803216c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80320f8:	7bfb      	ldrb	r3, [r7, #15]
 80320fa:	2b2a      	cmp	r3, #42	; 0x2a
 80320fc:	d109      	bne.n	8032112 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80320fe:	687b      	ldr	r3, [r7, #4]
 8032100:	2200      	movs	r2, #0
 8032102:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8032104:	687b      	ldr	r3, [r7, #4]
 8032106:	2228      	movs	r2, #40	; 0x28
 8032108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 803210c:	6878      	ldr	r0, [r7, #4]
 803210e:	f7ff f888 	bl	8031222 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8032112:	687b      	ldr	r3, [r7, #4]
 8032114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8032118:	b2db      	uxtb	r3, r3
 803211a:	2b28      	cmp	r3, #40	; 0x28
 803211c:	d111      	bne.n	8032142 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 803211e:	687b      	ldr	r3, [r7, #4]
 8032120:	4a15      	ldr	r2, [pc, #84]	; (8032178 <I2C_Slave_STOPF+0x25c>)
 8032122:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8032124:	687b      	ldr	r3, [r7, #4]
 8032126:	2200      	movs	r2, #0
 8032128:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 803212a:	687b      	ldr	r3, [r7, #4]
 803212c:	2220      	movs	r2, #32
 803212e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8032132:	687b      	ldr	r3, [r7, #4]
 8032134:	2200      	movs	r2, #0
 8032136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 803213a:	6878      	ldr	r0, [r7, #4]
 803213c:	f7ff f889 	bl	8031252 <HAL_I2C_ListenCpltCallback>
}
 8032140:	e014      	b.n	803216c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8032142:	687b      	ldr	r3, [r7, #4]
 8032144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8032146:	2b22      	cmp	r3, #34	; 0x22
 8032148:	d002      	beq.n	8032150 <I2C_Slave_STOPF+0x234>
 803214a:	7bfb      	ldrb	r3, [r7, #15]
 803214c:	2b22      	cmp	r3, #34	; 0x22
 803214e:	d10d      	bne.n	803216c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8032150:	687b      	ldr	r3, [r7, #4]
 8032152:	2200      	movs	r2, #0
 8032154:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8032156:	687b      	ldr	r3, [r7, #4]
 8032158:	2220      	movs	r2, #32
 803215a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 803215e:	687b      	ldr	r3, [r7, #4]
 8032160:	2200      	movs	r2, #0
 8032162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8032166:	6878      	ldr	r0, [r7, #4]
 8032168:	f7ff f85b 	bl	8031222 <HAL_I2C_SlaveRxCpltCallback>
}
 803216c:	bf00      	nop
 803216e:	3710      	adds	r7, #16
 8032170:	46bd      	mov	sp, r7
 8032172:	bd80      	pop	{r7, pc}
 8032174:	080328b1 	.word	0x080328b1
 8032178:	ffff0000 	.word	0xffff0000

0803217c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 803217c:	b580      	push	{r7, lr}
 803217e:	b084      	sub	sp, #16
 8032180:	af00      	add	r7, sp, #0
 8032182:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8032184:	687b      	ldr	r3, [r7, #4]
 8032186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 803218a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 803218c:	687b      	ldr	r3, [r7, #4]
 803218e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032190:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8032192:	68bb      	ldr	r3, [r7, #8]
 8032194:	2b08      	cmp	r3, #8
 8032196:	d002      	beq.n	803219e <I2C_Slave_AF+0x22>
 8032198:	68bb      	ldr	r3, [r7, #8]
 803219a:	2b20      	cmp	r3, #32
 803219c:	d129      	bne.n	80321f2 <I2C_Slave_AF+0x76>
 803219e:	7bfb      	ldrb	r3, [r7, #15]
 80321a0:	2b28      	cmp	r3, #40	; 0x28
 80321a2:	d126      	bne.n	80321f2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80321a4:	687b      	ldr	r3, [r7, #4]
 80321a6:	4a2c      	ldr	r2, [pc, #176]	; (8032258 <I2C_Slave_AF+0xdc>)
 80321a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80321aa:	687b      	ldr	r3, [r7, #4]
 80321ac:	681b      	ldr	r3, [r3, #0]
 80321ae:	685a      	ldr	r2, [r3, #4]
 80321b0:	687b      	ldr	r3, [r7, #4]
 80321b2:	681b      	ldr	r3, [r3, #0]
 80321b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80321b8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80321ba:	687b      	ldr	r3, [r7, #4]
 80321bc:	681b      	ldr	r3, [r3, #0]
 80321be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80321c2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80321c4:	687b      	ldr	r3, [r7, #4]
 80321c6:	681b      	ldr	r3, [r3, #0]
 80321c8:	681a      	ldr	r2, [r3, #0]
 80321ca:	687b      	ldr	r3, [r7, #4]
 80321cc:	681b      	ldr	r3, [r3, #0]
 80321ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80321d2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80321d4:	687b      	ldr	r3, [r7, #4]
 80321d6:	2200      	movs	r2, #0
 80321d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80321da:	687b      	ldr	r3, [r7, #4]
 80321dc:	2220      	movs	r2, #32
 80321de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80321e2:	687b      	ldr	r3, [r7, #4]
 80321e4:	2200      	movs	r2, #0
 80321e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80321ea:	6878      	ldr	r0, [r7, #4]
 80321ec:	f7ff f831 	bl	8031252 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80321f0:	e02e      	b.n	8032250 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80321f2:	7bfb      	ldrb	r3, [r7, #15]
 80321f4:	2b21      	cmp	r3, #33	; 0x21
 80321f6:	d126      	bne.n	8032246 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80321f8:	687b      	ldr	r3, [r7, #4]
 80321fa:	4a17      	ldr	r2, [pc, #92]	; (8032258 <I2C_Slave_AF+0xdc>)
 80321fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80321fe:	687b      	ldr	r3, [r7, #4]
 8032200:	2221      	movs	r2, #33	; 0x21
 8032202:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8032204:	687b      	ldr	r3, [r7, #4]
 8032206:	2220      	movs	r2, #32
 8032208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 803220c:	687b      	ldr	r3, [r7, #4]
 803220e:	2200      	movs	r2, #0
 8032210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8032214:	687b      	ldr	r3, [r7, #4]
 8032216:	681b      	ldr	r3, [r3, #0]
 8032218:	685a      	ldr	r2, [r3, #4]
 803221a:	687b      	ldr	r3, [r7, #4]
 803221c:	681b      	ldr	r3, [r3, #0]
 803221e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8032222:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8032224:	687b      	ldr	r3, [r7, #4]
 8032226:	681b      	ldr	r3, [r3, #0]
 8032228:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 803222c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 803222e:	687b      	ldr	r3, [r7, #4]
 8032230:	681b      	ldr	r3, [r3, #0]
 8032232:	681a      	ldr	r2, [r3, #0]
 8032234:	687b      	ldr	r3, [r7, #4]
 8032236:	681b      	ldr	r3, [r3, #0]
 8032238:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 803223c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 803223e:	6878      	ldr	r0, [r7, #4]
 8032240:	f7fe ffe5 	bl	803120e <HAL_I2C_SlaveTxCpltCallback>
}
 8032244:	e004      	b.n	8032250 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8032246:	687b      	ldr	r3, [r7, #4]
 8032248:	681b      	ldr	r3, [r3, #0]
 803224a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 803224e:	615a      	str	r2, [r3, #20]
}
 8032250:	bf00      	nop
 8032252:	3710      	adds	r7, #16
 8032254:	46bd      	mov	sp, r7
 8032256:	bd80      	pop	{r7, pc}
 8032258:	ffff0000 	.word	0xffff0000

0803225c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 803225c:	b580      	push	{r7, lr}
 803225e:	b084      	sub	sp, #16
 8032260:	af00      	add	r7, sp, #0
 8032262:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8032264:	687b      	ldr	r3, [r7, #4]
 8032266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 803226a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 803226c:	687b      	ldr	r3, [r7, #4]
 803226e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8032272:	b2db      	uxtb	r3, r3
 8032274:	2b10      	cmp	r3, #16
 8032276:	d10a      	bne.n	803228e <I2C_ITError+0x32>
 8032278:	7bfb      	ldrb	r3, [r7, #15]
 803227a:	2b22      	cmp	r3, #34	; 0x22
 803227c:	d107      	bne.n	803228e <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 803227e:	687b      	ldr	r3, [r7, #4]
 8032280:	681b      	ldr	r3, [r3, #0]
 8032282:	681a      	ldr	r2, [r3, #0]
 8032284:	687b      	ldr	r3, [r7, #4]
 8032286:	681b      	ldr	r3, [r3, #0]
 8032288:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 803228c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 803228e:	7bfb      	ldrb	r3, [r7, #15]
 8032290:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8032294:	2b28      	cmp	r3, #40	; 0x28
 8032296:	d107      	bne.n	80322a8 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8032298:	687b      	ldr	r3, [r7, #4]
 803229a:	2200      	movs	r2, #0
 803229c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 803229e:	687b      	ldr	r3, [r7, #4]
 80322a0:	2228      	movs	r2, #40	; 0x28
 80322a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80322a6:	e015      	b.n	80322d4 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80322a8:	687b      	ldr	r3, [r7, #4]
 80322aa:	681b      	ldr	r3, [r3, #0]
 80322ac:	685b      	ldr	r3, [r3, #4]
 80322ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80322b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80322b6:	d006      	beq.n	80322c6 <I2C_ITError+0x6a>
 80322b8:	7bfb      	ldrb	r3, [r7, #15]
 80322ba:	2b60      	cmp	r3, #96	; 0x60
 80322bc:	d003      	beq.n	80322c6 <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80322be:	687b      	ldr	r3, [r7, #4]
 80322c0:	2220      	movs	r2, #32
 80322c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80322c6:	687b      	ldr	r3, [r7, #4]
 80322c8:	2200      	movs	r2, #0
 80322ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80322cc:	687b      	ldr	r3, [r7, #4]
 80322ce:	2200      	movs	r2, #0
 80322d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80322d4:	687b      	ldr	r3, [r7, #4]
 80322d6:	681b      	ldr	r3, [r3, #0]
 80322d8:	685b      	ldr	r3, [r3, #4]
 80322da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80322de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80322e2:	d162      	bne.n	80323aa <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80322e4:	687b      	ldr	r3, [r7, #4]
 80322e6:	681b      	ldr	r3, [r3, #0]
 80322e8:	685a      	ldr	r2, [r3, #4]
 80322ea:	687b      	ldr	r3, [r7, #4]
 80322ec:	681b      	ldr	r3, [r3, #0]
 80322ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80322f2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80322f4:	687b      	ldr	r3, [r7, #4]
 80322f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80322f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80322fc:	b2db      	uxtb	r3, r3
 80322fe:	2b01      	cmp	r3, #1
 8032300:	d020      	beq.n	8032344 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8032302:	687b      	ldr	r3, [r7, #4]
 8032304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8032306:	4a6a      	ldr	r2, [pc, #424]	; (80324b0 <I2C_ITError+0x254>)
 8032308:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 803230a:	687b      	ldr	r3, [r7, #4]
 803230c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803230e:	4618      	mov	r0, r3
 8032310:	f7fd f958 	bl	802f5c4 <HAL_DMA_Abort_IT>
 8032314:	4603      	mov	r3, r0
 8032316:	2b00      	cmp	r3, #0
 8032318:	f000 8089 	beq.w	803242e <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 803231c:	687b      	ldr	r3, [r7, #4]
 803231e:	681b      	ldr	r3, [r3, #0]
 8032320:	681a      	ldr	r2, [r3, #0]
 8032322:	687b      	ldr	r3, [r7, #4]
 8032324:	681b      	ldr	r3, [r3, #0]
 8032326:	f022 0201 	bic.w	r2, r2, #1
 803232a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 803232c:	687b      	ldr	r3, [r7, #4]
 803232e:	2220      	movs	r2, #32
 8032330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8032334:	687b      	ldr	r3, [r7, #4]
 8032336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8032338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803233a:	687a      	ldr	r2, [r7, #4]
 803233c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 803233e:	4610      	mov	r0, r2
 8032340:	4798      	blx	r3
 8032342:	e074      	b.n	803242e <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8032344:	687b      	ldr	r3, [r7, #4]
 8032346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032348:	4a59      	ldr	r2, [pc, #356]	; (80324b0 <I2C_ITError+0x254>)
 803234a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 803234c:	687b      	ldr	r3, [r7, #4]
 803234e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032350:	4618      	mov	r0, r3
 8032352:	f7fd f937 	bl	802f5c4 <HAL_DMA_Abort_IT>
 8032356:	4603      	mov	r3, r0
 8032358:	2b00      	cmp	r3, #0
 803235a:	d068      	beq.n	803242e <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 803235c:	687b      	ldr	r3, [r7, #4]
 803235e:	681b      	ldr	r3, [r3, #0]
 8032360:	695b      	ldr	r3, [r3, #20]
 8032362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8032366:	2b40      	cmp	r3, #64	; 0x40
 8032368:	d10b      	bne.n	8032382 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 803236a:	687b      	ldr	r3, [r7, #4]
 803236c:	681b      	ldr	r3, [r3, #0]
 803236e:	691a      	ldr	r2, [r3, #16]
 8032370:	687b      	ldr	r3, [r7, #4]
 8032372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8032374:	b2d2      	uxtb	r2, r2
 8032376:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8032378:	687b      	ldr	r3, [r7, #4]
 803237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803237c:	1c5a      	adds	r2, r3, #1
 803237e:	687b      	ldr	r3, [r7, #4]
 8032380:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8032382:	687b      	ldr	r3, [r7, #4]
 8032384:	681b      	ldr	r3, [r3, #0]
 8032386:	681a      	ldr	r2, [r3, #0]
 8032388:	687b      	ldr	r3, [r7, #4]
 803238a:	681b      	ldr	r3, [r3, #0]
 803238c:	f022 0201 	bic.w	r2, r2, #1
 8032390:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8032392:	687b      	ldr	r3, [r7, #4]
 8032394:	2220      	movs	r2, #32
 8032396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 803239a:	687b      	ldr	r3, [r7, #4]
 803239c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803239e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80323a0:	687a      	ldr	r2, [r7, #4]
 80323a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80323a4:	4610      	mov	r0, r2
 80323a6:	4798      	blx	r3
 80323a8:	e041      	b.n	803242e <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80323aa:	687b      	ldr	r3, [r7, #4]
 80323ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80323b0:	b2db      	uxtb	r3, r3
 80323b2:	2b60      	cmp	r3, #96	; 0x60
 80323b4:	d125      	bne.n	8032402 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80323b6:	687b      	ldr	r3, [r7, #4]
 80323b8:	2220      	movs	r2, #32
 80323ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80323be:	687b      	ldr	r3, [r7, #4]
 80323c0:	2200      	movs	r2, #0
 80323c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80323c4:	687b      	ldr	r3, [r7, #4]
 80323c6:	681b      	ldr	r3, [r3, #0]
 80323c8:	695b      	ldr	r3, [r3, #20]
 80323ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80323ce:	2b40      	cmp	r3, #64	; 0x40
 80323d0:	d10b      	bne.n	80323ea <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80323d2:	687b      	ldr	r3, [r7, #4]
 80323d4:	681b      	ldr	r3, [r3, #0]
 80323d6:	691a      	ldr	r2, [r3, #16]
 80323d8:	687b      	ldr	r3, [r7, #4]
 80323da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80323dc:	b2d2      	uxtb	r2, r2
 80323de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80323e0:	687b      	ldr	r3, [r7, #4]
 80323e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80323e4:	1c5a      	adds	r2, r3, #1
 80323e6:	687b      	ldr	r3, [r7, #4]
 80323e8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80323ea:	687b      	ldr	r3, [r7, #4]
 80323ec:	681b      	ldr	r3, [r3, #0]
 80323ee:	681a      	ldr	r2, [r3, #0]
 80323f0:	687b      	ldr	r3, [r7, #4]
 80323f2:	681b      	ldr	r3, [r3, #0]
 80323f4:	f022 0201 	bic.w	r2, r2, #1
 80323f8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80323fa:	6878      	ldr	r0, [r7, #4]
 80323fc:	f7fe ff51 	bl	80312a2 <HAL_I2C_AbortCpltCallback>
 8032400:	e015      	b.n	803242e <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8032402:	687b      	ldr	r3, [r7, #4]
 8032404:	681b      	ldr	r3, [r3, #0]
 8032406:	695b      	ldr	r3, [r3, #20]
 8032408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 803240c:	2b40      	cmp	r3, #64	; 0x40
 803240e:	d10b      	bne.n	8032428 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8032410:	687b      	ldr	r3, [r7, #4]
 8032412:	681b      	ldr	r3, [r3, #0]
 8032414:	691a      	ldr	r2, [r3, #16]
 8032416:	687b      	ldr	r3, [r7, #4]
 8032418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803241a:	b2d2      	uxtb	r2, r2
 803241c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 803241e:	687b      	ldr	r3, [r7, #4]
 8032420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8032422:	1c5a      	adds	r2, r3, #1
 8032424:	687b      	ldr	r3, [r7, #4]
 8032426:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8032428:	6878      	ldr	r0, [r7, #4]
 803242a:	f7fe ff30 	bl	803128e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 803242e:	687b      	ldr	r3, [r7, #4]
 8032430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032432:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8032434:	68bb      	ldr	r3, [r7, #8]
 8032436:	f003 0301 	and.w	r3, r3, #1
 803243a:	2b00      	cmp	r3, #0
 803243c:	d10e      	bne.n	803245c <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 803243e:	68bb      	ldr	r3, [r7, #8]
 8032440:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8032444:	2b00      	cmp	r3, #0
 8032446:	d109      	bne.n	803245c <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8032448:	68bb      	ldr	r3, [r7, #8]
 803244a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 803244e:	2b00      	cmp	r3, #0
 8032450:	d104      	bne.n	803245c <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8032452:	68bb      	ldr	r3, [r7, #8]
 8032454:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8032458:	2b00      	cmp	r3, #0
 803245a:	d007      	beq.n	803246c <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 803245c:	687b      	ldr	r3, [r7, #4]
 803245e:	681b      	ldr	r3, [r3, #0]
 8032460:	685a      	ldr	r2, [r3, #4]
 8032462:	687b      	ldr	r3, [r7, #4]
 8032464:	681b      	ldr	r3, [r3, #0]
 8032466:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 803246a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 803246c:	687b      	ldr	r3, [r7, #4]
 803246e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8032472:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8032474:	687b      	ldr	r3, [r7, #4]
 8032476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032478:	f003 0304 	and.w	r3, r3, #4
 803247c:	2b04      	cmp	r3, #4
 803247e:	d113      	bne.n	80324a8 <I2C_ITError+0x24c>
 8032480:	7bfb      	ldrb	r3, [r7, #15]
 8032482:	2b28      	cmp	r3, #40	; 0x28
 8032484:	d110      	bne.n	80324a8 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8032486:	687b      	ldr	r3, [r7, #4]
 8032488:	4a0a      	ldr	r2, [pc, #40]	; (80324b4 <I2C_ITError+0x258>)
 803248a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 803248c:	687b      	ldr	r3, [r7, #4]
 803248e:	2200      	movs	r2, #0
 8032490:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8032492:	687b      	ldr	r3, [r7, #4]
 8032494:	2220      	movs	r2, #32
 8032496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 803249a:	687b      	ldr	r3, [r7, #4]
 803249c:	2200      	movs	r2, #0
 803249e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80324a2:	6878      	ldr	r0, [r7, #4]
 80324a4:	f7fe fed5 	bl	8031252 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80324a8:	bf00      	nop
 80324aa:	3710      	adds	r7, #16
 80324ac:	46bd      	mov	sp, r7
 80324ae:	bd80      	pop	{r7, pc}
 80324b0:	080328b1 	.word	0x080328b1
 80324b4:	ffff0000 	.word	0xffff0000

080324b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80324b8:	b580      	push	{r7, lr}
 80324ba:	b088      	sub	sp, #32
 80324bc:	af02      	add	r7, sp, #8
 80324be:	60f8      	str	r0, [r7, #12]
 80324c0:	607a      	str	r2, [r7, #4]
 80324c2:	603b      	str	r3, [r7, #0]
 80324c4:	460b      	mov	r3, r1
 80324c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80324c8:	68fb      	ldr	r3, [r7, #12]
 80324ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80324cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80324ce:	697b      	ldr	r3, [r7, #20]
 80324d0:	2b08      	cmp	r3, #8
 80324d2:	d006      	beq.n	80324e2 <I2C_MasterRequestWrite+0x2a>
 80324d4:	697b      	ldr	r3, [r7, #20]
 80324d6:	2b01      	cmp	r3, #1
 80324d8:	d003      	beq.n	80324e2 <I2C_MasterRequestWrite+0x2a>
 80324da:	697b      	ldr	r3, [r7, #20]
 80324dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80324e0:	d108      	bne.n	80324f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80324e2:	68fb      	ldr	r3, [r7, #12]
 80324e4:	681b      	ldr	r3, [r3, #0]
 80324e6:	681a      	ldr	r2, [r3, #0]
 80324e8:	68fb      	ldr	r3, [r7, #12]
 80324ea:	681b      	ldr	r3, [r3, #0]
 80324ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80324f0:	601a      	str	r2, [r3, #0]
 80324f2:	e00b      	b.n	803250c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80324f4:	68fb      	ldr	r3, [r7, #12]
 80324f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80324f8:	2b12      	cmp	r3, #18
 80324fa:	d107      	bne.n	803250c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80324fc:	68fb      	ldr	r3, [r7, #12]
 80324fe:	681b      	ldr	r3, [r3, #0]
 8032500:	681a      	ldr	r2, [r3, #0]
 8032502:	68fb      	ldr	r3, [r7, #12]
 8032504:	681b      	ldr	r3, [r3, #0]
 8032506:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 803250a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 803250c:	683b      	ldr	r3, [r7, #0]
 803250e:	9300      	str	r3, [sp, #0]
 8032510:	687b      	ldr	r3, [r7, #4]
 8032512:	2200      	movs	r2, #0
 8032514:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8032518:	68f8      	ldr	r0, [r7, #12]
 803251a:	f000 fa48 	bl	80329ae <I2C_WaitOnFlagUntilTimeout>
 803251e:	4603      	mov	r3, r0
 8032520:	2b00      	cmp	r3, #0
 8032522:	d00c      	beq.n	803253e <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8032524:	68fb      	ldr	r3, [r7, #12]
 8032526:	681b      	ldr	r3, [r3, #0]
 8032528:	681b      	ldr	r3, [r3, #0]
 803252a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803252e:	2b00      	cmp	r3, #0
 8032530:	d003      	beq.n	803253a <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8032532:	68fb      	ldr	r3, [r7, #12]
 8032534:	f44f 7200 	mov.w	r2, #512	; 0x200
 8032538:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 803253a:	2303      	movs	r3, #3
 803253c:	e035      	b.n	80325aa <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 803253e:	68fb      	ldr	r3, [r7, #12]
 8032540:	691b      	ldr	r3, [r3, #16]
 8032542:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8032546:	d108      	bne.n	803255a <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8032548:	897b      	ldrh	r3, [r7, #10]
 803254a:	b2db      	uxtb	r3, r3
 803254c:	461a      	mov	r2, r3
 803254e:	68fb      	ldr	r3, [r7, #12]
 8032550:	681b      	ldr	r3, [r3, #0]
 8032552:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8032556:	611a      	str	r2, [r3, #16]
 8032558:	e01b      	b.n	8032592 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 803255a:	897b      	ldrh	r3, [r7, #10]
 803255c:	11db      	asrs	r3, r3, #7
 803255e:	b2db      	uxtb	r3, r3
 8032560:	f003 0306 	and.w	r3, r3, #6
 8032564:	b2db      	uxtb	r3, r3
 8032566:	f063 030f 	orn	r3, r3, #15
 803256a:	b2da      	uxtb	r2, r3
 803256c:	68fb      	ldr	r3, [r7, #12]
 803256e:	681b      	ldr	r3, [r3, #0]
 8032570:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8032572:	683b      	ldr	r3, [r7, #0]
 8032574:	687a      	ldr	r2, [r7, #4]
 8032576:	490f      	ldr	r1, [pc, #60]	; (80325b4 <I2C_MasterRequestWrite+0xfc>)
 8032578:	68f8      	ldr	r0, [r7, #12]
 803257a:	f000 fa6f 	bl	8032a5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 803257e:	4603      	mov	r3, r0
 8032580:	2b00      	cmp	r3, #0
 8032582:	d001      	beq.n	8032588 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8032584:	2301      	movs	r3, #1
 8032586:	e010      	b.n	80325aa <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8032588:	897b      	ldrh	r3, [r7, #10]
 803258a:	b2da      	uxtb	r2, r3
 803258c:	68fb      	ldr	r3, [r7, #12]
 803258e:	681b      	ldr	r3, [r3, #0]
 8032590:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8032592:	683b      	ldr	r3, [r7, #0]
 8032594:	687a      	ldr	r2, [r7, #4]
 8032596:	4908      	ldr	r1, [pc, #32]	; (80325b8 <I2C_MasterRequestWrite+0x100>)
 8032598:	68f8      	ldr	r0, [r7, #12]
 803259a:	f000 fa5f 	bl	8032a5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 803259e:	4603      	mov	r3, r0
 80325a0:	2b00      	cmp	r3, #0
 80325a2:	d001      	beq.n	80325a8 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80325a4:	2301      	movs	r3, #1
 80325a6:	e000      	b.n	80325aa <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 80325a8:	2300      	movs	r3, #0
}
 80325aa:	4618      	mov	r0, r3
 80325ac:	3718      	adds	r7, #24
 80325ae:	46bd      	mov	sp, r7
 80325b0:	bd80      	pop	{r7, pc}
 80325b2:	bf00      	nop
 80325b4:	00010008 	.word	0x00010008
 80325b8:	00010002 	.word	0x00010002

080325bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80325bc:	b580      	push	{r7, lr}
 80325be:	b088      	sub	sp, #32
 80325c0:	af02      	add	r7, sp, #8
 80325c2:	60f8      	str	r0, [r7, #12]
 80325c4:	4608      	mov	r0, r1
 80325c6:	4611      	mov	r1, r2
 80325c8:	461a      	mov	r2, r3
 80325ca:	4603      	mov	r3, r0
 80325cc:	817b      	strh	r3, [r7, #10]
 80325ce:	460b      	mov	r3, r1
 80325d0:	813b      	strh	r3, [r7, #8]
 80325d2:	4613      	mov	r3, r2
 80325d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80325d6:	68fb      	ldr	r3, [r7, #12]
 80325d8:	681b      	ldr	r3, [r3, #0]
 80325da:	681a      	ldr	r2, [r3, #0]
 80325dc:	68fb      	ldr	r3, [r7, #12]
 80325de:	681b      	ldr	r3, [r3, #0]
 80325e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80325e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80325e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80325e8:	9300      	str	r3, [sp, #0]
 80325ea:	6a3b      	ldr	r3, [r7, #32]
 80325ec:	2200      	movs	r2, #0
 80325ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80325f2:	68f8      	ldr	r0, [r7, #12]
 80325f4:	f000 f9db 	bl	80329ae <I2C_WaitOnFlagUntilTimeout>
 80325f8:	4603      	mov	r3, r0
 80325fa:	2b00      	cmp	r3, #0
 80325fc:	d00c      	beq.n	8032618 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80325fe:	68fb      	ldr	r3, [r7, #12]
 8032600:	681b      	ldr	r3, [r3, #0]
 8032602:	681b      	ldr	r3, [r3, #0]
 8032604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8032608:	2b00      	cmp	r3, #0
 803260a:	d003      	beq.n	8032614 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 803260c:	68fb      	ldr	r3, [r7, #12]
 803260e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8032612:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8032614:	2303      	movs	r3, #3
 8032616:	e05f      	b.n	80326d8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8032618:	897b      	ldrh	r3, [r7, #10]
 803261a:	b2db      	uxtb	r3, r3
 803261c:	461a      	mov	r2, r3
 803261e:	68fb      	ldr	r3, [r7, #12]
 8032620:	681b      	ldr	r3, [r3, #0]
 8032622:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8032626:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8032628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803262a:	6a3a      	ldr	r2, [r7, #32]
 803262c:	492c      	ldr	r1, [pc, #176]	; (80326e0 <I2C_RequestMemoryWrite+0x124>)
 803262e:	68f8      	ldr	r0, [r7, #12]
 8032630:	f000 fa14 	bl	8032a5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8032634:	4603      	mov	r3, r0
 8032636:	2b00      	cmp	r3, #0
 8032638:	d001      	beq.n	803263e <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 803263a:	2301      	movs	r3, #1
 803263c:	e04c      	b.n	80326d8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 803263e:	2300      	movs	r3, #0
 8032640:	617b      	str	r3, [r7, #20]
 8032642:	68fb      	ldr	r3, [r7, #12]
 8032644:	681b      	ldr	r3, [r3, #0]
 8032646:	695b      	ldr	r3, [r3, #20]
 8032648:	617b      	str	r3, [r7, #20]
 803264a:	68fb      	ldr	r3, [r7, #12]
 803264c:	681b      	ldr	r3, [r3, #0]
 803264e:	699b      	ldr	r3, [r3, #24]
 8032650:	617b      	str	r3, [r7, #20]
 8032652:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8032654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8032656:	6a39      	ldr	r1, [r7, #32]
 8032658:	68f8      	ldr	r0, [r7, #12]
 803265a:	f000 fa7e 	bl	8032b5a <I2C_WaitOnTXEFlagUntilTimeout>
 803265e:	4603      	mov	r3, r0
 8032660:	2b00      	cmp	r3, #0
 8032662:	d00d      	beq.n	8032680 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8032664:	68fb      	ldr	r3, [r7, #12]
 8032666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032668:	2b04      	cmp	r3, #4
 803266a:	d107      	bne.n	803267c <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 803266c:	68fb      	ldr	r3, [r7, #12]
 803266e:	681b      	ldr	r3, [r3, #0]
 8032670:	681a      	ldr	r2, [r3, #0]
 8032672:	68fb      	ldr	r3, [r7, #12]
 8032674:	681b      	ldr	r3, [r3, #0]
 8032676:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 803267a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 803267c:	2301      	movs	r3, #1
 803267e:	e02b      	b.n	80326d8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8032680:	88fb      	ldrh	r3, [r7, #6]
 8032682:	2b01      	cmp	r3, #1
 8032684:	d105      	bne.n	8032692 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8032686:	893b      	ldrh	r3, [r7, #8]
 8032688:	b2da      	uxtb	r2, r3
 803268a:	68fb      	ldr	r3, [r7, #12]
 803268c:	681b      	ldr	r3, [r3, #0]
 803268e:	611a      	str	r2, [r3, #16]
 8032690:	e021      	b.n	80326d6 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8032692:	893b      	ldrh	r3, [r7, #8]
 8032694:	0a1b      	lsrs	r3, r3, #8
 8032696:	b29b      	uxth	r3, r3
 8032698:	b2da      	uxtb	r2, r3
 803269a:	68fb      	ldr	r3, [r7, #12]
 803269c:	681b      	ldr	r3, [r3, #0]
 803269e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80326a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80326a2:	6a39      	ldr	r1, [r7, #32]
 80326a4:	68f8      	ldr	r0, [r7, #12]
 80326a6:	f000 fa58 	bl	8032b5a <I2C_WaitOnTXEFlagUntilTimeout>
 80326aa:	4603      	mov	r3, r0
 80326ac:	2b00      	cmp	r3, #0
 80326ae:	d00d      	beq.n	80326cc <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80326b0:	68fb      	ldr	r3, [r7, #12]
 80326b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80326b4:	2b04      	cmp	r3, #4
 80326b6:	d107      	bne.n	80326c8 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80326b8:	68fb      	ldr	r3, [r7, #12]
 80326ba:	681b      	ldr	r3, [r3, #0]
 80326bc:	681a      	ldr	r2, [r3, #0]
 80326be:	68fb      	ldr	r3, [r7, #12]
 80326c0:	681b      	ldr	r3, [r3, #0]
 80326c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80326c6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80326c8:	2301      	movs	r3, #1
 80326ca:	e005      	b.n	80326d8 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80326cc:	893b      	ldrh	r3, [r7, #8]
 80326ce:	b2da      	uxtb	r2, r3
 80326d0:	68fb      	ldr	r3, [r7, #12]
 80326d2:	681b      	ldr	r3, [r3, #0]
 80326d4:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80326d6:	2300      	movs	r3, #0
}
 80326d8:	4618      	mov	r0, r3
 80326da:	3718      	adds	r7, #24
 80326dc:	46bd      	mov	sp, r7
 80326de:	bd80      	pop	{r7, pc}
 80326e0:	00010002 	.word	0x00010002

080326e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80326e4:	b580      	push	{r7, lr}
 80326e6:	b088      	sub	sp, #32
 80326e8:	af02      	add	r7, sp, #8
 80326ea:	60f8      	str	r0, [r7, #12]
 80326ec:	4608      	mov	r0, r1
 80326ee:	4611      	mov	r1, r2
 80326f0:	461a      	mov	r2, r3
 80326f2:	4603      	mov	r3, r0
 80326f4:	817b      	strh	r3, [r7, #10]
 80326f6:	460b      	mov	r3, r1
 80326f8:	813b      	strh	r3, [r7, #8]
 80326fa:	4613      	mov	r3, r2
 80326fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80326fe:	68fb      	ldr	r3, [r7, #12]
 8032700:	681b      	ldr	r3, [r3, #0]
 8032702:	681a      	ldr	r2, [r3, #0]
 8032704:	68fb      	ldr	r3, [r7, #12]
 8032706:	681b      	ldr	r3, [r3, #0]
 8032708:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 803270c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 803270e:	68fb      	ldr	r3, [r7, #12]
 8032710:	681b      	ldr	r3, [r3, #0]
 8032712:	681a      	ldr	r2, [r3, #0]
 8032714:	68fb      	ldr	r3, [r7, #12]
 8032716:	681b      	ldr	r3, [r3, #0]
 8032718:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 803271c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 803271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032720:	9300      	str	r3, [sp, #0]
 8032722:	6a3b      	ldr	r3, [r7, #32]
 8032724:	2200      	movs	r2, #0
 8032726:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 803272a:	68f8      	ldr	r0, [r7, #12]
 803272c:	f000 f93f 	bl	80329ae <I2C_WaitOnFlagUntilTimeout>
 8032730:	4603      	mov	r3, r0
 8032732:	2b00      	cmp	r3, #0
 8032734:	d00c      	beq.n	8032750 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8032736:	68fb      	ldr	r3, [r7, #12]
 8032738:	681b      	ldr	r3, [r3, #0]
 803273a:	681b      	ldr	r3, [r3, #0]
 803273c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8032740:	2b00      	cmp	r3, #0
 8032742:	d003      	beq.n	803274c <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8032744:	68fb      	ldr	r3, [r7, #12]
 8032746:	f44f 7200 	mov.w	r2, #512	; 0x200
 803274a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 803274c:	2303      	movs	r3, #3
 803274e:	e0a9      	b.n	80328a4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8032750:	897b      	ldrh	r3, [r7, #10]
 8032752:	b2db      	uxtb	r3, r3
 8032754:	461a      	mov	r2, r3
 8032756:	68fb      	ldr	r3, [r7, #12]
 8032758:	681b      	ldr	r3, [r3, #0]
 803275a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 803275e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8032760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032762:	6a3a      	ldr	r2, [r7, #32]
 8032764:	4951      	ldr	r1, [pc, #324]	; (80328ac <I2C_RequestMemoryRead+0x1c8>)
 8032766:	68f8      	ldr	r0, [r7, #12]
 8032768:	f000 f978 	bl	8032a5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 803276c:	4603      	mov	r3, r0
 803276e:	2b00      	cmp	r3, #0
 8032770:	d001      	beq.n	8032776 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8032772:	2301      	movs	r3, #1
 8032774:	e096      	b.n	80328a4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8032776:	2300      	movs	r3, #0
 8032778:	617b      	str	r3, [r7, #20]
 803277a:	68fb      	ldr	r3, [r7, #12]
 803277c:	681b      	ldr	r3, [r3, #0]
 803277e:	695b      	ldr	r3, [r3, #20]
 8032780:	617b      	str	r3, [r7, #20]
 8032782:	68fb      	ldr	r3, [r7, #12]
 8032784:	681b      	ldr	r3, [r3, #0]
 8032786:	699b      	ldr	r3, [r3, #24]
 8032788:	617b      	str	r3, [r7, #20]
 803278a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 803278c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 803278e:	6a39      	ldr	r1, [r7, #32]
 8032790:	68f8      	ldr	r0, [r7, #12]
 8032792:	f000 f9e2 	bl	8032b5a <I2C_WaitOnTXEFlagUntilTimeout>
 8032796:	4603      	mov	r3, r0
 8032798:	2b00      	cmp	r3, #0
 803279a:	d00d      	beq.n	80327b8 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 803279c:	68fb      	ldr	r3, [r7, #12]
 803279e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80327a0:	2b04      	cmp	r3, #4
 80327a2:	d107      	bne.n	80327b4 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80327a4:	68fb      	ldr	r3, [r7, #12]
 80327a6:	681b      	ldr	r3, [r3, #0]
 80327a8:	681a      	ldr	r2, [r3, #0]
 80327aa:	68fb      	ldr	r3, [r7, #12]
 80327ac:	681b      	ldr	r3, [r3, #0]
 80327ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80327b2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80327b4:	2301      	movs	r3, #1
 80327b6:	e075      	b.n	80328a4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80327b8:	88fb      	ldrh	r3, [r7, #6]
 80327ba:	2b01      	cmp	r3, #1
 80327bc:	d105      	bne.n	80327ca <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80327be:	893b      	ldrh	r3, [r7, #8]
 80327c0:	b2da      	uxtb	r2, r3
 80327c2:	68fb      	ldr	r3, [r7, #12]
 80327c4:	681b      	ldr	r3, [r3, #0]
 80327c6:	611a      	str	r2, [r3, #16]
 80327c8:	e021      	b.n	803280e <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80327ca:	893b      	ldrh	r3, [r7, #8]
 80327cc:	0a1b      	lsrs	r3, r3, #8
 80327ce:	b29b      	uxth	r3, r3
 80327d0:	b2da      	uxtb	r2, r3
 80327d2:	68fb      	ldr	r3, [r7, #12]
 80327d4:	681b      	ldr	r3, [r3, #0]
 80327d6:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80327d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80327da:	6a39      	ldr	r1, [r7, #32]
 80327dc:	68f8      	ldr	r0, [r7, #12]
 80327de:	f000 f9bc 	bl	8032b5a <I2C_WaitOnTXEFlagUntilTimeout>
 80327e2:	4603      	mov	r3, r0
 80327e4:	2b00      	cmp	r3, #0
 80327e6:	d00d      	beq.n	8032804 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80327e8:	68fb      	ldr	r3, [r7, #12]
 80327ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80327ec:	2b04      	cmp	r3, #4
 80327ee:	d107      	bne.n	8032800 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80327f0:	68fb      	ldr	r3, [r7, #12]
 80327f2:	681b      	ldr	r3, [r3, #0]
 80327f4:	681a      	ldr	r2, [r3, #0]
 80327f6:	68fb      	ldr	r3, [r7, #12]
 80327f8:	681b      	ldr	r3, [r3, #0]
 80327fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80327fe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8032800:	2301      	movs	r3, #1
 8032802:	e04f      	b.n	80328a4 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8032804:	893b      	ldrh	r3, [r7, #8]
 8032806:	b2da      	uxtb	r2, r3
 8032808:	68fb      	ldr	r3, [r7, #12]
 803280a:	681b      	ldr	r3, [r3, #0]
 803280c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 803280e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8032810:	6a39      	ldr	r1, [r7, #32]
 8032812:	68f8      	ldr	r0, [r7, #12]
 8032814:	f000 f9a1 	bl	8032b5a <I2C_WaitOnTXEFlagUntilTimeout>
 8032818:	4603      	mov	r3, r0
 803281a:	2b00      	cmp	r3, #0
 803281c:	d00d      	beq.n	803283a <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 803281e:	68fb      	ldr	r3, [r7, #12]
 8032820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032822:	2b04      	cmp	r3, #4
 8032824:	d107      	bne.n	8032836 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8032826:	68fb      	ldr	r3, [r7, #12]
 8032828:	681b      	ldr	r3, [r3, #0]
 803282a:	681a      	ldr	r2, [r3, #0]
 803282c:	68fb      	ldr	r3, [r7, #12]
 803282e:	681b      	ldr	r3, [r3, #0]
 8032830:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8032834:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8032836:	2301      	movs	r3, #1
 8032838:	e034      	b.n	80328a4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 803283a:	68fb      	ldr	r3, [r7, #12]
 803283c:	681b      	ldr	r3, [r3, #0]
 803283e:	681a      	ldr	r2, [r3, #0]
 8032840:	68fb      	ldr	r3, [r7, #12]
 8032842:	681b      	ldr	r3, [r3, #0]
 8032844:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8032848:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 803284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803284c:	9300      	str	r3, [sp, #0]
 803284e:	6a3b      	ldr	r3, [r7, #32]
 8032850:	2200      	movs	r2, #0
 8032852:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8032856:	68f8      	ldr	r0, [r7, #12]
 8032858:	f000 f8a9 	bl	80329ae <I2C_WaitOnFlagUntilTimeout>
 803285c:	4603      	mov	r3, r0
 803285e:	2b00      	cmp	r3, #0
 8032860:	d00c      	beq.n	803287c <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8032862:	68fb      	ldr	r3, [r7, #12]
 8032864:	681b      	ldr	r3, [r3, #0]
 8032866:	681b      	ldr	r3, [r3, #0]
 8032868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803286c:	2b00      	cmp	r3, #0
 803286e:	d003      	beq.n	8032878 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8032870:	68fb      	ldr	r3, [r7, #12]
 8032872:	f44f 7200 	mov.w	r2, #512	; 0x200
 8032876:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8032878:	2303      	movs	r3, #3
 803287a:	e013      	b.n	80328a4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 803287c:	897b      	ldrh	r3, [r7, #10]
 803287e:	b2db      	uxtb	r3, r3
 8032880:	f043 0301 	orr.w	r3, r3, #1
 8032884:	b2da      	uxtb	r2, r3
 8032886:	68fb      	ldr	r3, [r7, #12]
 8032888:	681b      	ldr	r3, [r3, #0]
 803288a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 803288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803288e:	6a3a      	ldr	r2, [r7, #32]
 8032890:	4906      	ldr	r1, [pc, #24]	; (80328ac <I2C_RequestMemoryRead+0x1c8>)
 8032892:	68f8      	ldr	r0, [r7, #12]
 8032894:	f000 f8e2 	bl	8032a5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8032898:	4603      	mov	r3, r0
 803289a:	2b00      	cmp	r3, #0
 803289c:	d001      	beq.n	80328a2 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 803289e:	2301      	movs	r3, #1
 80328a0:	e000      	b.n	80328a4 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 80328a2:	2300      	movs	r3, #0
}
 80328a4:	4618      	mov	r0, r3
 80328a6:	3718      	adds	r7, #24
 80328a8:	46bd      	mov	sp, r7
 80328aa:	bd80      	pop	{r7, pc}
 80328ac:	00010002 	.word	0x00010002

080328b0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80328b0:	b580      	push	{r7, lr}
 80328b2:	b084      	sub	sp, #16
 80328b4:	af00      	add	r7, sp, #0
 80328b6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80328b8:	687b      	ldr	r3, [r7, #4]
 80328ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80328bc:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80328be:	68fb      	ldr	r3, [r7, #12]
 80328c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80328c4:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80328c6:	68fb      	ldr	r3, [r7, #12]
 80328c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80328ca:	2b00      	cmp	r3, #0
 80328cc:	d003      	beq.n	80328d6 <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80328ce:	68fb      	ldr	r3, [r7, #12]
 80328d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80328d2:	2200      	movs	r2, #0
 80328d4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80328d6:	68fb      	ldr	r3, [r7, #12]
 80328d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80328da:	2b00      	cmp	r3, #0
 80328dc:	d003      	beq.n	80328e6 <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80328de:	68fb      	ldr	r3, [r7, #12]
 80328e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80328e2:	2200      	movs	r2, #0
 80328e4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80328e6:	68fb      	ldr	r3, [r7, #12]
 80328e8:	681b      	ldr	r3, [r3, #0]
 80328ea:	681a      	ldr	r2, [r3, #0]
 80328ec:	68fb      	ldr	r3, [r7, #12]
 80328ee:	681b      	ldr	r3, [r3, #0]
 80328f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80328f4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80328f6:	68fb      	ldr	r3, [r7, #12]
 80328f8:	2200      	movs	r2, #0
 80328fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80328fc:	68fb      	ldr	r3, [r7, #12]
 80328fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8032900:	2b00      	cmp	r3, #0
 8032902:	d003      	beq.n	803290c <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8032904:	68fb      	ldr	r3, [r7, #12]
 8032906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8032908:	2200      	movs	r2, #0
 803290a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 803290c:	68fb      	ldr	r3, [r7, #12]
 803290e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032910:	2b00      	cmp	r3, #0
 8032912:	d003      	beq.n	803291c <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8032914:	68fb      	ldr	r3, [r7, #12]
 8032916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032918:	2200      	movs	r2, #0
 803291a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 803291c:	68fb      	ldr	r3, [r7, #12]
 803291e:	681b      	ldr	r3, [r3, #0]
 8032920:	681a      	ldr	r2, [r3, #0]
 8032922:	68fb      	ldr	r3, [r7, #12]
 8032924:	681b      	ldr	r3, [r3, #0]
 8032926:	f022 0201 	bic.w	r2, r2, #1
 803292a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 803292c:	68fb      	ldr	r3, [r7, #12]
 803292e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8032932:	b2db      	uxtb	r3, r3
 8032934:	2b60      	cmp	r3, #96	; 0x60
 8032936:	d10e      	bne.n	8032956 <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8032938:	68fb      	ldr	r3, [r7, #12]
 803293a:	2220      	movs	r2, #32
 803293c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8032940:	68fb      	ldr	r3, [r7, #12]
 8032942:	2200      	movs	r2, #0
 8032944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8032948:	68fb      	ldr	r3, [r7, #12]
 803294a:	2200      	movs	r2, #0
 803294c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 803294e:	68f8      	ldr	r0, [r7, #12]
 8032950:	f7fe fca7 	bl	80312a2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8032954:	e027      	b.n	80329a6 <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8032956:	7afb      	ldrb	r3, [r7, #11]
 8032958:	f003 0328 	and.w	r3, r3, #40	; 0x28
 803295c:	2b28      	cmp	r3, #40	; 0x28
 803295e:	d117      	bne.n	8032990 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8032960:	68fb      	ldr	r3, [r7, #12]
 8032962:	681b      	ldr	r3, [r3, #0]
 8032964:	681a      	ldr	r2, [r3, #0]
 8032966:	68fb      	ldr	r3, [r7, #12]
 8032968:	681b      	ldr	r3, [r3, #0]
 803296a:	f042 0201 	orr.w	r2, r2, #1
 803296e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8032970:	68fb      	ldr	r3, [r7, #12]
 8032972:	681b      	ldr	r3, [r3, #0]
 8032974:	681a      	ldr	r2, [r3, #0]
 8032976:	68fb      	ldr	r3, [r7, #12]
 8032978:	681b      	ldr	r3, [r3, #0]
 803297a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 803297e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8032980:	68fb      	ldr	r3, [r7, #12]
 8032982:	2200      	movs	r2, #0
 8032984:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8032986:	68fb      	ldr	r3, [r7, #12]
 8032988:	2228      	movs	r2, #40	; 0x28
 803298a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 803298e:	e007      	b.n	80329a0 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8032990:	68fb      	ldr	r3, [r7, #12]
 8032992:	2220      	movs	r2, #32
 8032994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8032998:	68fb      	ldr	r3, [r7, #12]
 803299a:	2200      	movs	r2, #0
 803299c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80329a0:	68f8      	ldr	r0, [r7, #12]
 80329a2:	f7fe fc74 	bl	803128e <HAL_I2C_ErrorCallback>
}
 80329a6:	bf00      	nop
 80329a8:	3710      	adds	r7, #16
 80329aa:	46bd      	mov	sp, r7
 80329ac:	bd80      	pop	{r7, pc}

080329ae <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80329ae:	b580      	push	{r7, lr}
 80329b0:	b084      	sub	sp, #16
 80329b2:	af00      	add	r7, sp, #0
 80329b4:	60f8      	str	r0, [r7, #12]
 80329b6:	60b9      	str	r1, [r7, #8]
 80329b8:	603b      	str	r3, [r7, #0]
 80329ba:	4613      	mov	r3, r2
 80329bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80329be:	e025      	b.n	8032a0c <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80329c0:	683b      	ldr	r3, [r7, #0]
 80329c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80329c6:	d021      	beq.n	8032a0c <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80329c8:	f7f9 fc3e 	bl	802c248 <HAL_GetTick>
 80329cc:	4602      	mov	r2, r0
 80329ce:	69bb      	ldr	r3, [r7, #24]
 80329d0:	1ad3      	subs	r3, r2, r3
 80329d2:	683a      	ldr	r2, [r7, #0]
 80329d4:	429a      	cmp	r2, r3
 80329d6:	d302      	bcc.n	80329de <I2C_WaitOnFlagUntilTimeout+0x30>
 80329d8:	683b      	ldr	r3, [r7, #0]
 80329da:	2b00      	cmp	r3, #0
 80329dc:	d116      	bne.n	8032a0c <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80329de:	68fb      	ldr	r3, [r7, #12]
 80329e0:	2200      	movs	r2, #0
 80329e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80329e4:	68fb      	ldr	r3, [r7, #12]
 80329e6:	2220      	movs	r2, #32
 80329e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80329ec:	68fb      	ldr	r3, [r7, #12]
 80329ee:	2200      	movs	r2, #0
 80329f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80329f4:	68fb      	ldr	r3, [r7, #12]
 80329f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80329f8:	f043 0220 	orr.w	r2, r3, #32
 80329fc:	68fb      	ldr	r3, [r7, #12]
 80329fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8032a00:	68fb      	ldr	r3, [r7, #12]
 8032a02:	2200      	movs	r2, #0
 8032a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8032a08:	2301      	movs	r3, #1
 8032a0a:	e023      	b.n	8032a54 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8032a0c:	68bb      	ldr	r3, [r7, #8]
 8032a0e:	0c1b      	lsrs	r3, r3, #16
 8032a10:	b2db      	uxtb	r3, r3
 8032a12:	2b01      	cmp	r3, #1
 8032a14:	d10d      	bne.n	8032a32 <I2C_WaitOnFlagUntilTimeout+0x84>
 8032a16:	68fb      	ldr	r3, [r7, #12]
 8032a18:	681b      	ldr	r3, [r3, #0]
 8032a1a:	695b      	ldr	r3, [r3, #20]
 8032a1c:	43da      	mvns	r2, r3
 8032a1e:	68bb      	ldr	r3, [r7, #8]
 8032a20:	4013      	ands	r3, r2
 8032a22:	b29b      	uxth	r3, r3
 8032a24:	2b00      	cmp	r3, #0
 8032a26:	bf0c      	ite	eq
 8032a28:	2301      	moveq	r3, #1
 8032a2a:	2300      	movne	r3, #0
 8032a2c:	b2db      	uxtb	r3, r3
 8032a2e:	461a      	mov	r2, r3
 8032a30:	e00c      	b.n	8032a4c <I2C_WaitOnFlagUntilTimeout+0x9e>
 8032a32:	68fb      	ldr	r3, [r7, #12]
 8032a34:	681b      	ldr	r3, [r3, #0]
 8032a36:	699b      	ldr	r3, [r3, #24]
 8032a38:	43da      	mvns	r2, r3
 8032a3a:	68bb      	ldr	r3, [r7, #8]
 8032a3c:	4013      	ands	r3, r2
 8032a3e:	b29b      	uxth	r3, r3
 8032a40:	2b00      	cmp	r3, #0
 8032a42:	bf0c      	ite	eq
 8032a44:	2301      	moveq	r3, #1
 8032a46:	2300      	movne	r3, #0
 8032a48:	b2db      	uxtb	r3, r3
 8032a4a:	461a      	mov	r2, r3
 8032a4c:	79fb      	ldrb	r3, [r7, #7]
 8032a4e:	429a      	cmp	r2, r3
 8032a50:	d0b6      	beq.n	80329c0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8032a52:	2300      	movs	r3, #0
}
 8032a54:	4618      	mov	r0, r3
 8032a56:	3710      	adds	r7, #16
 8032a58:	46bd      	mov	sp, r7
 8032a5a:	bd80      	pop	{r7, pc}

08032a5c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8032a5c:	b580      	push	{r7, lr}
 8032a5e:	b084      	sub	sp, #16
 8032a60:	af00      	add	r7, sp, #0
 8032a62:	60f8      	str	r0, [r7, #12]
 8032a64:	60b9      	str	r1, [r7, #8]
 8032a66:	607a      	str	r2, [r7, #4]
 8032a68:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8032a6a:	e051      	b.n	8032b10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8032a6c:	68fb      	ldr	r3, [r7, #12]
 8032a6e:	681b      	ldr	r3, [r3, #0]
 8032a70:	695b      	ldr	r3, [r3, #20]
 8032a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8032a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8032a7a:	d123      	bne.n	8032ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8032a7c:	68fb      	ldr	r3, [r7, #12]
 8032a7e:	681b      	ldr	r3, [r3, #0]
 8032a80:	681a      	ldr	r2, [r3, #0]
 8032a82:	68fb      	ldr	r3, [r7, #12]
 8032a84:	681b      	ldr	r3, [r3, #0]
 8032a86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8032a8a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8032a8c:	68fb      	ldr	r3, [r7, #12]
 8032a8e:	681b      	ldr	r3, [r3, #0]
 8032a90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8032a94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8032a96:	68fb      	ldr	r3, [r7, #12]
 8032a98:	2200      	movs	r2, #0
 8032a9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8032a9c:	68fb      	ldr	r3, [r7, #12]
 8032a9e:	2220      	movs	r2, #32
 8032aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8032aa4:	68fb      	ldr	r3, [r7, #12]
 8032aa6:	2200      	movs	r2, #0
 8032aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8032aac:	68fb      	ldr	r3, [r7, #12]
 8032aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032ab0:	f043 0204 	orr.w	r2, r3, #4
 8032ab4:	68fb      	ldr	r3, [r7, #12]
 8032ab6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8032ab8:	68fb      	ldr	r3, [r7, #12]
 8032aba:	2200      	movs	r2, #0
 8032abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8032ac0:	2301      	movs	r3, #1
 8032ac2:	e046      	b.n	8032b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8032ac4:	687b      	ldr	r3, [r7, #4]
 8032ac6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8032aca:	d021      	beq.n	8032b10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8032acc:	f7f9 fbbc 	bl	802c248 <HAL_GetTick>
 8032ad0:	4602      	mov	r2, r0
 8032ad2:	683b      	ldr	r3, [r7, #0]
 8032ad4:	1ad3      	subs	r3, r2, r3
 8032ad6:	687a      	ldr	r2, [r7, #4]
 8032ad8:	429a      	cmp	r2, r3
 8032ada:	d302      	bcc.n	8032ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8032adc:	687b      	ldr	r3, [r7, #4]
 8032ade:	2b00      	cmp	r3, #0
 8032ae0:	d116      	bne.n	8032b10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8032ae2:	68fb      	ldr	r3, [r7, #12]
 8032ae4:	2200      	movs	r2, #0
 8032ae6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8032ae8:	68fb      	ldr	r3, [r7, #12]
 8032aea:	2220      	movs	r2, #32
 8032aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8032af0:	68fb      	ldr	r3, [r7, #12]
 8032af2:	2200      	movs	r2, #0
 8032af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8032af8:	68fb      	ldr	r3, [r7, #12]
 8032afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032afc:	f043 0220 	orr.w	r2, r3, #32
 8032b00:	68fb      	ldr	r3, [r7, #12]
 8032b02:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8032b04:	68fb      	ldr	r3, [r7, #12]
 8032b06:	2200      	movs	r2, #0
 8032b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8032b0c:	2301      	movs	r3, #1
 8032b0e:	e020      	b.n	8032b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8032b10:	68bb      	ldr	r3, [r7, #8]
 8032b12:	0c1b      	lsrs	r3, r3, #16
 8032b14:	b2db      	uxtb	r3, r3
 8032b16:	2b01      	cmp	r3, #1
 8032b18:	d10c      	bne.n	8032b34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8032b1a:	68fb      	ldr	r3, [r7, #12]
 8032b1c:	681b      	ldr	r3, [r3, #0]
 8032b1e:	695b      	ldr	r3, [r3, #20]
 8032b20:	43da      	mvns	r2, r3
 8032b22:	68bb      	ldr	r3, [r7, #8]
 8032b24:	4013      	ands	r3, r2
 8032b26:	b29b      	uxth	r3, r3
 8032b28:	2b00      	cmp	r3, #0
 8032b2a:	bf14      	ite	ne
 8032b2c:	2301      	movne	r3, #1
 8032b2e:	2300      	moveq	r3, #0
 8032b30:	b2db      	uxtb	r3, r3
 8032b32:	e00b      	b.n	8032b4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8032b34:	68fb      	ldr	r3, [r7, #12]
 8032b36:	681b      	ldr	r3, [r3, #0]
 8032b38:	699b      	ldr	r3, [r3, #24]
 8032b3a:	43da      	mvns	r2, r3
 8032b3c:	68bb      	ldr	r3, [r7, #8]
 8032b3e:	4013      	ands	r3, r2
 8032b40:	b29b      	uxth	r3, r3
 8032b42:	2b00      	cmp	r3, #0
 8032b44:	bf14      	ite	ne
 8032b46:	2301      	movne	r3, #1
 8032b48:	2300      	moveq	r3, #0
 8032b4a:	b2db      	uxtb	r3, r3
 8032b4c:	2b00      	cmp	r3, #0
 8032b4e:	d18d      	bne.n	8032a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8032b50:	2300      	movs	r3, #0
}
 8032b52:	4618      	mov	r0, r3
 8032b54:	3710      	adds	r7, #16
 8032b56:	46bd      	mov	sp, r7
 8032b58:	bd80      	pop	{r7, pc}

08032b5a <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8032b5a:	b580      	push	{r7, lr}
 8032b5c:	b084      	sub	sp, #16
 8032b5e:	af00      	add	r7, sp, #0
 8032b60:	60f8      	str	r0, [r7, #12]
 8032b62:	60b9      	str	r1, [r7, #8]
 8032b64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8032b66:	e02d      	b.n	8032bc4 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8032b68:	68f8      	ldr	r0, [r7, #12]
 8032b6a:	f000 f8ce 	bl	8032d0a <I2C_IsAcknowledgeFailed>
 8032b6e:	4603      	mov	r3, r0
 8032b70:	2b00      	cmp	r3, #0
 8032b72:	d001      	beq.n	8032b78 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8032b74:	2301      	movs	r3, #1
 8032b76:	e02d      	b.n	8032bd4 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8032b78:	68bb      	ldr	r3, [r7, #8]
 8032b7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8032b7e:	d021      	beq.n	8032bc4 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8032b80:	f7f9 fb62 	bl	802c248 <HAL_GetTick>
 8032b84:	4602      	mov	r2, r0
 8032b86:	687b      	ldr	r3, [r7, #4]
 8032b88:	1ad3      	subs	r3, r2, r3
 8032b8a:	68ba      	ldr	r2, [r7, #8]
 8032b8c:	429a      	cmp	r2, r3
 8032b8e:	d302      	bcc.n	8032b96 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8032b90:	68bb      	ldr	r3, [r7, #8]
 8032b92:	2b00      	cmp	r3, #0
 8032b94:	d116      	bne.n	8032bc4 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8032b96:	68fb      	ldr	r3, [r7, #12]
 8032b98:	2200      	movs	r2, #0
 8032b9a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8032b9c:	68fb      	ldr	r3, [r7, #12]
 8032b9e:	2220      	movs	r2, #32
 8032ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8032ba4:	68fb      	ldr	r3, [r7, #12]
 8032ba6:	2200      	movs	r2, #0
 8032ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8032bac:	68fb      	ldr	r3, [r7, #12]
 8032bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032bb0:	f043 0220 	orr.w	r2, r3, #32
 8032bb4:	68fb      	ldr	r3, [r7, #12]
 8032bb6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8032bb8:	68fb      	ldr	r3, [r7, #12]
 8032bba:	2200      	movs	r2, #0
 8032bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8032bc0:	2301      	movs	r3, #1
 8032bc2:	e007      	b.n	8032bd4 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8032bc4:	68fb      	ldr	r3, [r7, #12]
 8032bc6:	681b      	ldr	r3, [r3, #0]
 8032bc8:	695b      	ldr	r3, [r3, #20]
 8032bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8032bce:	2b80      	cmp	r3, #128	; 0x80
 8032bd0:	d1ca      	bne.n	8032b68 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8032bd2:	2300      	movs	r3, #0
}
 8032bd4:	4618      	mov	r0, r3
 8032bd6:	3710      	adds	r7, #16
 8032bd8:	46bd      	mov	sp, r7
 8032bda:	bd80      	pop	{r7, pc}

08032bdc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8032bdc:	b580      	push	{r7, lr}
 8032bde:	b084      	sub	sp, #16
 8032be0:	af00      	add	r7, sp, #0
 8032be2:	60f8      	str	r0, [r7, #12]
 8032be4:	60b9      	str	r1, [r7, #8]
 8032be6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8032be8:	e02d      	b.n	8032c46 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8032bea:	68f8      	ldr	r0, [r7, #12]
 8032bec:	f000 f88d 	bl	8032d0a <I2C_IsAcknowledgeFailed>
 8032bf0:	4603      	mov	r3, r0
 8032bf2:	2b00      	cmp	r3, #0
 8032bf4:	d001      	beq.n	8032bfa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8032bf6:	2301      	movs	r3, #1
 8032bf8:	e02d      	b.n	8032c56 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8032bfa:	68bb      	ldr	r3, [r7, #8]
 8032bfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8032c00:	d021      	beq.n	8032c46 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8032c02:	f7f9 fb21 	bl	802c248 <HAL_GetTick>
 8032c06:	4602      	mov	r2, r0
 8032c08:	687b      	ldr	r3, [r7, #4]
 8032c0a:	1ad3      	subs	r3, r2, r3
 8032c0c:	68ba      	ldr	r2, [r7, #8]
 8032c0e:	429a      	cmp	r2, r3
 8032c10:	d302      	bcc.n	8032c18 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8032c12:	68bb      	ldr	r3, [r7, #8]
 8032c14:	2b00      	cmp	r3, #0
 8032c16:	d116      	bne.n	8032c46 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8032c18:	68fb      	ldr	r3, [r7, #12]
 8032c1a:	2200      	movs	r2, #0
 8032c1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8032c1e:	68fb      	ldr	r3, [r7, #12]
 8032c20:	2220      	movs	r2, #32
 8032c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8032c26:	68fb      	ldr	r3, [r7, #12]
 8032c28:	2200      	movs	r2, #0
 8032c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8032c2e:	68fb      	ldr	r3, [r7, #12]
 8032c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032c32:	f043 0220 	orr.w	r2, r3, #32
 8032c36:	68fb      	ldr	r3, [r7, #12]
 8032c38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8032c3a:	68fb      	ldr	r3, [r7, #12]
 8032c3c:	2200      	movs	r2, #0
 8032c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8032c42:	2301      	movs	r3, #1
 8032c44:	e007      	b.n	8032c56 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8032c46:	68fb      	ldr	r3, [r7, #12]
 8032c48:	681b      	ldr	r3, [r3, #0]
 8032c4a:	695b      	ldr	r3, [r3, #20]
 8032c4c:	f003 0304 	and.w	r3, r3, #4
 8032c50:	2b04      	cmp	r3, #4
 8032c52:	d1ca      	bne.n	8032bea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8032c54:	2300      	movs	r3, #0
}
 8032c56:	4618      	mov	r0, r3
 8032c58:	3710      	adds	r7, #16
 8032c5a:	46bd      	mov	sp, r7
 8032c5c:	bd80      	pop	{r7, pc}

08032c5e <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8032c5e:	b580      	push	{r7, lr}
 8032c60:	b084      	sub	sp, #16
 8032c62:	af00      	add	r7, sp, #0
 8032c64:	60f8      	str	r0, [r7, #12]
 8032c66:	60b9      	str	r1, [r7, #8]
 8032c68:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8032c6a:	e042      	b.n	8032cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8032c6c:	68fb      	ldr	r3, [r7, #12]
 8032c6e:	681b      	ldr	r3, [r3, #0]
 8032c70:	695b      	ldr	r3, [r3, #20]
 8032c72:	f003 0310 	and.w	r3, r3, #16
 8032c76:	2b10      	cmp	r3, #16
 8032c78:	d119      	bne.n	8032cae <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8032c7a:	68fb      	ldr	r3, [r7, #12]
 8032c7c:	681b      	ldr	r3, [r3, #0]
 8032c7e:	f06f 0210 	mvn.w	r2, #16
 8032c82:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8032c84:	68fb      	ldr	r3, [r7, #12]
 8032c86:	2200      	movs	r2, #0
 8032c88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8032c8a:	68fb      	ldr	r3, [r7, #12]
 8032c8c:	2220      	movs	r2, #32
 8032c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8032c92:	68fb      	ldr	r3, [r7, #12]
 8032c94:	2200      	movs	r2, #0
 8032c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8032c9a:	68fb      	ldr	r3, [r7, #12]
 8032c9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8032c9e:	68fb      	ldr	r3, [r7, #12]
 8032ca0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8032ca2:	68fb      	ldr	r3, [r7, #12]
 8032ca4:	2200      	movs	r2, #0
 8032ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8032caa:	2301      	movs	r3, #1
 8032cac:	e029      	b.n	8032d02 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8032cae:	f7f9 facb 	bl	802c248 <HAL_GetTick>
 8032cb2:	4602      	mov	r2, r0
 8032cb4:	687b      	ldr	r3, [r7, #4]
 8032cb6:	1ad3      	subs	r3, r2, r3
 8032cb8:	68ba      	ldr	r2, [r7, #8]
 8032cba:	429a      	cmp	r2, r3
 8032cbc:	d302      	bcc.n	8032cc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8032cbe:	68bb      	ldr	r3, [r7, #8]
 8032cc0:	2b00      	cmp	r3, #0
 8032cc2:	d116      	bne.n	8032cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8032cc4:	68fb      	ldr	r3, [r7, #12]
 8032cc6:	2200      	movs	r2, #0
 8032cc8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8032cca:	68fb      	ldr	r3, [r7, #12]
 8032ccc:	2220      	movs	r2, #32
 8032cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8032cd2:	68fb      	ldr	r3, [r7, #12]
 8032cd4:	2200      	movs	r2, #0
 8032cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8032cda:	68fb      	ldr	r3, [r7, #12]
 8032cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032cde:	f043 0220 	orr.w	r2, r3, #32
 8032ce2:	68fb      	ldr	r3, [r7, #12]
 8032ce4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8032ce6:	68fb      	ldr	r3, [r7, #12]
 8032ce8:	2200      	movs	r2, #0
 8032cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8032cee:	2301      	movs	r3, #1
 8032cf0:	e007      	b.n	8032d02 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8032cf2:	68fb      	ldr	r3, [r7, #12]
 8032cf4:	681b      	ldr	r3, [r3, #0]
 8032cf6:	695b      	ldr	r3, [r3, #20]
 8032cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8032cfc:	2b40      	cmp	r3, #64	; 0x40
 8032cfe:	d1b5      	bne.n	8032c6c <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8032d00:	2300      	movs	r3, #0
}
 8032d02:	4618      	mov	r0, r3
 8032d04:	3710      	adds	r7, #16
 8032d06:	46bd      	mov	sp, r7
 8032d08:	bd80      	pop	{r7, pc}

08032d0a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8032d0a:	b480      	push	{r7}
 8032d0c:	b083      	sub	sp, #12
 8032d0e:	af00      	add	r7, sp, #0
 8032d10:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8032d12:	687b      	ldr	r3, [r7, #4]
 8032d14:	681b      	ldr	r3, [r3, #0]
 8032d16:	695b      	ldr	r3, [r3, #20]
 8032d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8032d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8032d20:	d11b      	bne.n	8032d5a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8032d22:	687b      	ldr	r3, [r7, #4]
 8032d24:	681b      	ldr	r3, [r3, #0]
 8032d26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8032d2a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8032d2c:	687b      	ldr	r3, [r7, #4]
 8032d2e:	2200      	movs	r2, #0
 8032d30:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8032d32:	687b      	ldr	r3, [r7, #4]
 8032d34:	2220      	movs	r2, #32
 8032d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8032d3a:	687b      	ldr	r3, [r7, #4]
 8032d3c:	2200      	movs	r2, #0
 8032d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8032d42:	687b      	ldr	r3, [r7, #4]
 8032d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032d46:	f043 0204 	orr.w	r2, r3, #4
 8032d4a:	687b      	ldr	r3, [r7, #4]
 8032d4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8032d4e:	687b      	ldr	r3, [r7, #4]
 8032d50:	2200      	movs	r2, #0
 8032d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8032d56:	2301      	movs	r3, #1
 8032d58:	e000      	b.n	8032d5c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8032d5a:	2300      	movs	r3, #0
}
 8032d5c:	4618      	mov	r0, r3
 8032d5e:	370c      	adds	r7, #12
 8032d60:	46bd      	mov	sp, r7
 8032d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032d66:	4770      	bx	lr

08032d68 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8032d68:	b480      	push	{r7}
 8032d6a:	b083      	sub	sp, #12
 8032d6c:	af00      	add	r7, sp, #0
 8032d6e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8032d70:	687b      	ldr	r3, [r7, #4]
 8032d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032d74:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8032d78:	d103      	bne.n	8032d82 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8032d7a:	687b      	ldr	r3, [r7, #4]
 8032d7c:	2201      	movs	r2, #1
 8032d7e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8032d80:	e007      	b.n	8032d92 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8032d82:	687b      	ldr	r3, [r7, #4]
 8032d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032d86:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8032d8a:	d102      	bne.n	8032d92 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8032d8c:	687b      	ldr	r3, [r7, #4]
 8032d8e:	2208      	movs	r2, #8
 8032d90:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8032d92:	bf00      	nop
 8032d94:	370c      	adds	r7, #12
 8032d96:	46bd      	mov	sp, r7
 8032d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032d9c:	4770      	bx	lr

08032d9e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8032d9e:	b480      	push	{r7}
 8032da0:	b083      	sub	sp, #12
 8032da2:	af00      	add	r7, sp, #0
 8032da4:	6078      	str	r0, [r7, #4]
 8032da6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8032da8:	687b      	ldr	r3, [r7, #4]
 8032daa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8032dae:	b2db      	uxtb	r3, r3
 8032db0:	2b20      	cmp	r3, #32
 8032db2:	d129      	bne.n	8032e08 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8032db4:	687b      	ldr	r3, [r7, #4]
 8032db6:	2224      	movs	r2, #36	; 0x24
 8032db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8032dbc:	687b      	ldr	r3, [r7, #4]
 8032dbe:	681b      	ldr	r3, [r3, #0]
 8032dc0:	681a      	ldr	r2, [r3, #0]
 8032dc2:	687b      	ldr	r3, [r7, #4]
 8032dc4:	681b      	ldr	r3, [r3, #0]
 8032dc6:	f022 0201 	bic.w	r2, r2, #1
 8032dca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8032dcc:	687b      	ldr	r3, [r7, #4]
 8032dce:	681b      	ldr	r3, [r3, #0]
 8032dd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8032dd2:	687b      	ldr	r3, [r7, #4]
 8032dd4:	681b      	ldr	r3, [r3, #0]
 8032dd6:	f022 0210 	bic.w	r2, r2, #16
 8032dda:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8032ddc:	687b      	ldr	r3, [r7, #4]
 8032dde:	681b      	ldr	r3, [r3, #0]
 8032de0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8032de2:	687b      	ldr	r3, [r7, #4]
 8032de4:	681b      	ldr	r3, [r3, #0]
 8032de6:	683a      	ldr	r2, [r7, #0]
 8032de8:	430a      	orrs	r2, r1
 8032dea:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8032dec:	687b      	ldr	r3, [r7, #4]
 8032dee:	681b      	ldr	r3, [r3, #0]
 8032df0:	681a      	ldr	r2, [r3, #0]
 8032df2:	687b      	ldr	r3, [r7, #4]
 8032df4:	681b      	ldr	r3, [r3, #0]
 8032df6:	f042 0201 	orr.w	r2, r2, #1
 8032dfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8032dfc:	687b      	ldr	r3, [r7, #4]
 8032dfe:	2220      	movs	r2, #32
 8032e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8032e04:	2300      	movs	r3, #0
 8032e06:	e000      	b.n	8032e0a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8032e08:	2302      	movs	r3, #2
  }
}
 8032e0a:	4618      	mov	r0, r3
 8032e0c:	370c      	adds	r7, #12
 8032e0e:	46bd      	mov	sp, r7
 8032e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032e14:	4770      	bx	lr

08032e16 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8032e16:	b480      	push	{r7}
 8032e18:	b085      	sub	sp, #20
 8032e1a:	af00      	add	r7, sp, #0
 8032e1c:	6078      	str	r0, [r7, #4]
 8032e1e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8032e20:	2300      	movs	r3, #0
 8032e22:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8032e24:	687b      	ldr	r3, [r7, #4]
 8032e26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8032e2a:	b2db      	uxtb	r3, r3
 8032e2c:	2b20      	cmp	r3, #32
 8032e2e:	d12a      	bne.n	8032e86 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8032e30:	687b      	ldr	r3, [r7, #4]
 8032e32:	2224      	movs	r2, #36	; 0x24
 8032e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8032e38:	687b      	ldr	r3, [r7, #4]
 8032e3a:	681b      	ldr	r3, [r3, #0]
 8032e3c:	681a      	ldr	r2, [r3, #0]
 8032e3e:	687b      	ldr	r3, [r7, #4]
 8032e40:	681b      	ldr	r3, [r3, #0]
 8032e42:	f022 0201 	bic.w	r2, r2, #1
 8032e46:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8032e48:	687b      	ldr	r3, [r7, #4]
 8032e4a:	681b      	ldr	r3, [r3, #0]
 8032e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8032e4e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8032e50:	89fb      	ldrh	r3, [r7, #14]
 8032e52:	f023 030f 	bic.w	r3, r3, #15
 8032e56:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8032e58:	683b      	ldr	r3, [r7, #0]
 8032e5a:	b29a      	uxth	r2, r3
 8032e5c:	89fb      	ldrh	r3, [r7, #14]
 8032e5e:	4313      	orrs	r3, r2
 8032e60:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8032e62:	687b      	ldr	r3, [r7, #4]
 8032e64:	681b      	ldr	r3, [r3, #0]
 8032e66:	89fa      	ldrh	r2, [r7, #14]
 8032e68:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8032e6a:	687b      	ldr	r3, [r7, #4]
 8032e6c:	681b      	ldr	r3, [r3, #0]
 8032e6e:	681a      	ldr	r2, [r3, #0]
 8032e70:	687b      	ldr	r3, [r7, #4]
 8032e72:	681b      	ldr	r3, [r3, #0]
 8032e74:	f042 0201 	orr.w	r2, r2, #1
 8032e78:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8032e7a:	687b      	ldr	r3, [r7, #4]
 8032e7c:	2220      	movs	r2, #32
 8032e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8032e82:	2300      	movs	r3, #0
 8032e84:	e000      	b.n	8032e88 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8032e86:	2302      	movs	r3, #2
  }
}
 8032e88:	4618      	mov	r0, r3
 8032e8a:	3714      	adds	r7, #20
 8032e8c:	46bd      	mov	sp, r7
 8032e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032e92:	4770      	bx	lr

08032e94 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8032e94:	b580      	push	{r7, lr}
 8032e96:	b088      	sub	sp, #32
 8032e98:	af00      	add	r7, sp, #0
 8032e9a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8032e9c:	687b      	ldr	r3, [r7, #4]
 8032e9e:	2b00      	cmp	r3, #0
 8032ea0:	d101      	bne.n	8032ea6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8032ea2:	2301      	movs	r3, #1
 8032ea4:	e154      	b.n	8033150 <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8032ea6:	687b      	ldr	r3, [r7, #4]
 8032ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8032eac:	b2db      	uxtb	r3, r3
 8032eae:	2b00      	cmp	r3, #0
 8032eb0:	d109      	bne.n	8032ec6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8032eb2:	687b      	ldr	r3, [r7, #4]
 8032eb4:	2200      	movs	r2, #0
 8032eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8032eba:	687b      	ldr	r3, [r7, #4]
 8032ebc:	4a98      	ldr	r2, [pc, #608]	; (8033120 <HAL_I2S_Init+0x28c>)
 8032ebe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8032ec0:	6878      	ldr	r0, [r7, #4]
 8032ec2:	f7f8 fcc9 	bl	802b858 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8032ec6:	687b      	ldr	r3, [r7, #4]
 8032ec8:	2202      	movs	r2, #2
 8032eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8032ece:	687b      	ldr	r3, [r7, #4]
 8032ed0:	681b      	ldr	r3, [r3, #0]
 8032ed2:	69db      	ldr	r3, [r3, #28]
 8032ed4:	687a      	ldr	r2, [r7, #4]
 8032ed6:	6812      	ldr	r2, [r2, #0]
 8032ed8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8032edc:	f023 030f 	bic.w	r3, r3, #15
 8032ee0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8032ee2:	687b      	ldr	r3, [r7, #4]
 8032ee4:	681b      	ldr	r3, [r3, #0]
 8032ee6:	2202      	movs	r2, #2
 8032ee8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8032eea:	687b      	ldr	r3, [r7, #4]
 8032eec:	695b      	ldr	r3, [r3, #20]
 8032eee:	2b02      	cmp	r3, #2
 8032ef0:	d06f      	beq.n	8032fd2 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8032ef2:	687b      	ldr	r3, [r7, #4]
 8032ef4:	68db      	ldr	r3, [r3, #12]
 8032ef6:	2b00      	cmp	r3, #0
 8032ef8:	d102      	bne.n	8032f00 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8032efa:	2310      	movs	r3, #16
 8032efc:	617b      	str	r3, [r7, #20]
 8032efe:	e001      	b.n	8032f04 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8032f00:	2320      	movs	r3, #32
 8032f02:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8032f04:	687b      	ldr	r3, [r7, #4]
 8032f06:	689b      	ldr	r3, [r3, #8]
 8032f08:	2b20      	cmp	r3, #32
 8032f0a:	d802      	bhi.n	8032f12 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8032f0c:	697b      	ldr	r3, [r7, #20]
 8032f0e:	005b      	lsls	r3, r3, #1
 8032f10:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8032f12:	687b      	ldr	r3, [r7, #4]
 8032f14:	681b      	ldr	r3, [r3, #0]
 8032f16:	4a83      	ldr	r2, [pc, #524]	; (8033124 <HAL_I2S_Init+0x290>)
 8032f18:	4293      	cmp	r3, r2
 8032f1a:	d004      	beq.n	8032f26 <HAL_I2S_Init+0x92>
 8032f1c:	687b      	ldr	r3, [r7, #4]
 8032f1e:	681b      	ldr	r3, [r3, #0]
 8032f20:	4a81      	ldr	r2, [pc, #516]	; (8033128 <HAL_I2S_Init+0x294>)
 8032f22:	4293      	cmp	r3, r2
 8032f24:	d104      	bne.n	8032f30 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8032f26:	2001      	movs	r0, #1
 8032f28:	f001 fb2c 	bl	8034584 <HAL_RCCEx_GetPeriphCLKFreq>
 8032f2c:	60f8      	str	r0, [r7, #12]
 8032f2e:	e003      	b.n	8032f38 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8032f30:	2002      	movs	r0, #2
 8032f32:	f001 fb27 	bl	8034584 <HAL_RCCEx_GetPeriphCLKFreq>
 8032f36:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8032f38:	687b      	ldr	r3, [r7, #4]
 8032f3a:	691b      	ldr	r3, [r3, #16]
 8032f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8032f40:	d125      	bne.n	8032f8e <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8032f42:	687b      	ldr	r3, [r7, #4]
 8032f44:	68db      	ldr	r3, [r3, #12]
 8032f46:	2b00      	cmp	r3, #0
 8032f48:	d010      	beq.n	8032f6c <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8032f4a:	697b      	ldr	r3, [r7, #20]
 8032f4c:	009b      	lsls	r3, r3, #2
 8032f4e:	68fa      	ldr	r2, [r7, #12]
 8032f50:	fbb2 f2f3 	udiv	r2, r2, r3
 8032f54:	4613      	mov	r3, r2
 8032f56:	009b      	lsls	r3, r3, #2
 8032f58:	4413      	add	r3, r2
 8032f5a:	005b      	lsls	r3, r3, #1
 8032f5c:	461a      	mov	r2, r3
 8032f5e:	687b      	ldr	r3, [r7, #4]
 8032f60:	695b      	ldr	r3, [r3, #20]
 8032f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8032f66:	3305      	adds	r3, #5
 8032f68:	613b      	str	r3, [r7, #16]
 8032f6a:	e01f      	b.n	8032fac <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8032f6c:	697b      	ldr	r3, [r7, #20]
 8032f6e:	00db      	lsls	r3, r3, #3
 8032f70:	68fa      	ldr	r2, [r7, #12]
 8032f72:	fbb2 f2f3 	udiv	r2, r2, r3
 8032f76:	4613      	mov	r3, r2
 8032f78:	009b      	lsls	r3, r3, #2
 8032f7a:	4413      	add	r3, r2
 8032f7c:	005b      	lsls	r3, r3, #1
 8032f7e:	461a      	mov	r2, r3
 8032f80:	687b      	ldr	r3, [r7, #4]
 8032f82:	695b      	ldr	r3, [r3, #20]
 8032f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8032f88:	3305      	adds	r3, #5
 8032f8a:	613b      	str	r3, [r7, #16]
 8032f8c:	e00e      	b.n	8032fac <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8032f8e:	68fa      	ldr	r2, [r7, #12]
 8032f90:	697b      	ldr	r3, [r7, #20]
 8032f92:	fbb2 f2f3 	udiv	r2, r2, r3
 8032f96:	4613      	mov	r3, r2
 8032f98:	009b      	lsls	r3, r3, #2
 8032f9a:	4413      	add	r3, r2
 8032f9c:	005b      	lsls	r3, r3, #1
 8032f9e:	461a      	mov	r2, r3
 8032fa0:	687b      	ldr	r3, [r7, #4]
 8032fa2:	695b      	ldr	r3, [r3, #20]
 8032fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8032fa8:	3305      	adds	r3, #5
 8032faa:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8032fac:	693b      	ldr	r3, [r7, #16]
 8032fae:	4a5f      	ldr	r2, [pc, #380]	; (803312c <HAL_I2S_Init+0x298>)
 8032fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8032fb4:	08db      	lsrs	r3, r3, #3
 8032fb6:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8032fb8:	693b      	ldr	r3, [r7, #16]
 8032fba:	f003 0301 	and.w	r3, r3, #1
 8032fbe:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8032fc0:	693a      	ldr	r2, [r7, #16]
 8032fc2:	69bb      	ldr	r3, [r7, #24]
 8032fc4:	1ad3      	subs	r3, r2, r3
 8032fc6:	085b      	lsrs	r3, r3, #1
 8032fc8:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8032fca:	69bb      	ldr	r3, [r7, #24]
 8032fcc:	021b      	lsls	r3, r3, #8
 8032fce:	61bb      	str	r3, [r7, #24]
 8032fd0:	e003      	b.n	8032fda <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8032fd2:	2302      	movs	r3, #2
 8032fd4:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8032fd6:	2300      	movs	r3, #0
 8032fd8:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8032fda:	69fb      	ldr	r3, [r7, #28]
 8032fdc:	2b01      	cmp	r3, #1
 8032fde:	d902      	bls.n	8032fe6 <HAL_I2S_Init+0x152>
 8032fe0:	69fb      	ldr	r3, [r7, #28]
 8032fe2:	2bff      	cmp	r3, #255	; 0xff
 8032fe4:	d907      	bls.n	8032ff6 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8032fe6:	687b      	ldr	r3, [r7, #4]
 8032fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8032fea:	f043 0210 	orr.w	r2, r3, #16
 8032fee:	687b      	ldr	r3, [r7, #4]
 8032ff0:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8032ff2:	2301      	movs	r3, #1
 8032ff4:	e0ac      	b.n	8033150 <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8032ff6:	687b      	ldr	r3, [r7, #4]
 8032ff8:	691a      	ldr	r2, [r3, #16]
 8032ffa:	69bb      	ldr	r3, [r7, #24]
 8032ffc:	ea42 0103 	orr.w	r1, r2, r3
 8033000:	687b      	ldr	r3, [r7, #4]
 8033002:	681b      	ldr	r3, [r3, #0]
 8033004:	69fa      	ldr	r2, [r7, #28]
 8033006:	430a      	orrs	r2, r1
 8033008:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 803300a:	687b      	ldr	r3, [r7, #4]
 803300c:	681b      	ldr	r3, [r3, #0]
 803300e:	69db      	ldr	r3, [r3, #28]
 8033010:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8033014:	f023 030f 	bic.w	r3, r3, #15
 8033018:	687a      	ldr	r2, [r7, #4]
 803301a:	6851      	ldr	r1, [r2, #4]
 803301c:	687a      	ldr	r2, [r7, #4]
 803301e:	6892      	ldr	r2, [r2, #8]
 8033020:	4311      	orrs	r1, r2
 8033022:	687a      	ldr	r2, [r7, #4]
 8033024:	68d2      	ldr	r2, [r2, #12]
 8033026:	4311      	orrs	r1, r2
 8033028:	687a      	ldr	r2, [r7, #4]
 803302a:	6992      	ldr	r2, [r2, #24]
 803302c:	430a      	orrs	r2, r1
 803302e:	431a      	orrs	r2, r3
 8033030:	687b      	ldr	r3, [r7, #4]
 8033032:	681b      	ldr	r3, [r3, #0]
 8033034:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8033038:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 803303a:	687b      	ldr	r3, [r7, #4]
 803303c:	689b      	ldr	r3, [r3, #8]
 803303e:	2b30      	cmp	r3, #48	; 0x30
 8033040:	d003      	beq.n	803304a <HAL_I2S_Init+0x1b6>
 8033042:	687b      	ldr	r3, [r7, #4]
 8033044:	689b      	ldr	r3, [r3, #8]
 8033046:	2bb0      	cmp	r3, #176	; 0xb0
 8033048:	d107      	bne.n	803305a <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 803304a:	687b      	ldr	r3, [r7, #4]
 803304c:	681b      	ldr	r3, [r3, #0]
 803304e:	69da      	ldr	r2, [r3, #28]
 8033050:	687b      	ldr	r3, [r7, #4]
 8033052:	681b      	ldr	r3, [r3, #0]
 8033054:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8033058:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 803305a:	687b      	ldr	r3, [r7, #4]
 803305c:	6a1b      	ldr	r3, [r3, #32]
 803305e:	2b01      	cmp	r3, #1
 8033060:	d16e      	bne.n	8033140 <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8033062:	687b      	ldr	r3, [r7, #4]
 8033064:	4a32      	ldr	r2, [pc, #200]	; (8033130 <HAL_I2S_Init+0x29c>)
 8033066:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8033068:	687b      	ldr	r3, [r7, #4]
 803306a:	681b      	ldr	r3, [r3, #0]
 803306c:	4a2d      	ldr	r2, [pc, #180]	; (8033124 <HAL_I2S_Init+0x290>)
 803306e:	4293      	cmp	r3, r2
 8033070:	d101      	bne.n	8033076 <HAL_I2S_Init+0x1e2>
 8033072:	4b30      	ldr	r3, [pc, #192]	; (8033134 <HAL_I2S_Init+0x2a0>)
 8033074:	e001      	b.n	803307a <HAL_I2S_Init+0x1e6>
 8033076:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 803307a:	69db      	ldr	r3, [r3, #28]
 803307c:	687a      	ldr	r2, [r7, #4]
 803307e:	6812      	ldr	r2, [r2, #0]
 8033080:	4928      	ldr	r1, [pc, #160]	; (8033124 <HAL_I2S_Init+0x290>)
 8033082:	428a      	cmp	r2, r1
 8033084:	d101      	bne.n	803308a <HAL_I2S_Init+0x1f6>
 8033086:	4a2b      	ldr	r2, [pc, #172]	; (8033134 <HAL_I2S_Init+0x2a0>)
 8033088:	e001      	b.n	803308e <HAL_I2S_Init+0x1fa>
 803308a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 803308e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8033092:	f023 030f 	bic.w	r3, r3, #15
 8033096:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8033098:	687b      	ldr	r3, [r7, #4]
 803309a:	681b      	ldr	r3, [r3, #0]
 803309c:	4a21      	ldr	r2, [pc, #132]	; (8033124 <HAL_I2S_Init+0x290>)
 803309e:	4293      	cmp	r3, r2
 80330a0:	d101      	bne.n	80330a6 <HAL_I2S_Init+0x212>
 80330a2:	4b24      	ldr	r3, [pc, #144]	; (8033134 <HAL_I2S_Init+0x2a0>)
 80330a4:	e001      	b.n	80330aa <HAL_I2S_Init+0x216>
 80330a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80330aa:	2202      	movs	r2, #2
 80330ac:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80330ae:	687b      	ldr	r3, [r7, #4]
 80330b0:	681b      	ldr	r3, [r3, #0]
 80330b2:	4a1c      	ldr	r2, [pc, #112]	; (8033124 <HAL_I2S_Init+0x290>)
 80330b4:	4293      	cmp	r3, r2
 80330b6:	d101      	bne.n	80330bc <HAL_I2S_Init+0x228>
 80330b8:	4b1e      	ldr	r3, [pc, #120]	; (8033134 <HAL_I2S_Init+0x2a0>)
 80330ba:	e001      	b.n	80330c0 <HAL_I2S_Init+0x22c>
 80330bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80330c0:	69db      	ldr	r3, [r3, #28]
 80330c2:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80330c4:	687b      	ldr	r3, [r7, #4]
 80330c6:	685b      	ldr	r3, [r3, #4]
 80330c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80330cc:	d003      	beq.n	80330d6 <HAL_I2S_Init+0x242>
 80330ce:	687b      	ldr	r3, [r7, #4]
 80330d0:	685b      	ldr	r3, [r3, #4]
 80330d2:	2b00      	cmp	r3, #0
 80330d4:	d103      	bne.n	80330de <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80330d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80330da:	613b      	str	r3, [r7, #16]
 80330dc:	e001      	b.n	80330e2 <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80330de:	2300      	movs	r3, #0
 80330e0:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80330e2:	693b      	ldr	r3, [r7, #16]
 80330e4:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80330e6:	687b      	ldr	r3, [r7, #4]
 80330e8:	689b      	ldr	r3, [r3, #8]
 80330ea:	b299      	uxth	r1, r3
 80330ec:	687b      	ldr	r3, [r7, #4]
 80330ee:	68db      	ldr	r3, [r3, #12]
 80330f0:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80330f2:	687b      	ldr	r3, [r7, #4]
 80330f4:	699b      	ldr	r3, [r3, #24]
 80330f6:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80330f8:	4303      	orrs	r3, r0
 80330fa:	b29b      	uxth	r3, r3
 80330fc:	430b      	orrs	r3, r1
 80330fe:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8033100:	4313      	orrs	r3, r2
 8033102:	b29a      	uxth	r2, r3
 8033104:	897b      	ldrh	r3, [r7, #10]
 8033106:	4313      	orrs	r3, r2
 8033108:	b29b      	uxth	r3, r3
 803310a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 803310e:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8033110:	687b      	ldr	r3, [r7, #4]
 8033112:	681b      	ldr	r3, [r3, #0]
 8033114:	4a03      	ldr	r2, [pc, #12]	; (8033124 <HAL_I2S_Init+0x290>)
 8033116:	4293      	cmp	r3, r2
 8033118:	d10e      	bne.n	8033138 <HAL_I2S_Init+0x2a4>
 803311a:	4b06      	ldr	r3, [pc, #24]	; (8033134 <HAL_I2S_Init+0x2a0>)
 803311c:	e00e      	b.n	803313c <HAL_I2S_Init+0x2a8>
 803311e:	bf00      	nop
 8033120:	08033469 	.word	0x08033469
 8033124:	40003800 	.word	0x40003800
 8033128:	40003c00 	.word	0x40003c00
 803312c:	cccccccd 	.word	0xcccccccd
 8033130:	0803357d 	.word	0x0803357d
 8033134:	40003400 	.word	0x40003400
 8033138:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 803313c:	897a      	ldrh	r2, [r7, #10]
 803313e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8033140:	687b      	ldr	r3, [r7, #4]
 8033142:	2200      	movs	r2, #0
 8033144:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8033146:	687b      	ldr	r3, [r7, #4]
 8033148:	2201      	movs	r2, #1
 803314a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 803314e:	2300      	movs	r3, #0
}
 8033150:	4618      	mov	r0, r3
 8033152:	3720      	adds	r7, #32
 8033154:	46bd      	mov	sp, r7
 8033156:	bd80      	pop	{r7, pc}

08033158 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8033158:	b580      	push	{r7, lr}
 803315a:	b086      	sub	sp, #24
 803315c:	af00      	add	r7, sp, #0
 803315e:	60f8      	str	r0, [r7, #12]
 8033160:	60b9      	str	r1, [r7, #8]
 8033162:	4613      	mov	r3, r2
 8033164:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8033166:	68bb      	ldr	r3, [r7, #8]
 8033168:	2b00      	cmp	r3, #0
 803316a:	d002      	beq.n	8033172 <HAL_I2S_Transmit_DMA+0x1a>
 803316c:	88fb      	ldrh	r3, [r7, #6]
 803316e:	2b00      	cmp	r3, #0
 8033170:	d101      	bne.n	8033176 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8033172:	2301      	movs	r3, #1
 8033174:	e08e      	b.n	8033294 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8033176:	68fb      	ldr	r3, [r7, #12]
 8033178:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 803317c:	b2db      	uxtb	r3, r3
 803317e:	2b01      	cmp	r3, #1
 8033180:	d101      	bne.n	8033186 <HAL_I2S_Transmit_DMA+0x2e>
 8033182:	2302      	movs	r3, #2
 8033184:	e086      	b.n	8033294 <HAL_I2S_Transmit_DMA+0x13c>
 8033186:	68fb      	ldr	r3, [r7, #12]
 8033188:	2201      	movs	r2, #1
 803318a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 803318e:	68fb      	ldr	r3, [r7, #12]
 8033190:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8033194:	b2db      	uxtb	r3, r3
 8033196:	2b01      	cmp	r3, #1
 8033198:	d005      	beq.n	80331a6 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 803319a:	68fb      	ldr	r3, [r7, #12]
 803319c:	2200      	movs	r2, #0
 803319e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80331a2:	2302      	movs	r3, #2
 80331a4:	e076      	b.n	8033294 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80331a6:	68fb      	ldr	r3, [r7, #12]
 80331a8:	2203      	movs	r2, #3
 80331aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80331ae:	68fb      	ldr	r3, [r7, #12]
 80331b0:	2200      	movs	r2, #0
 80331b2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 80331b4:	68fb      	ldr	r3, [r7, #12]
 80331b6:	68ba      	ldr	r2, [r7, #8]
 80331b8:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80331ba:	68fb      	ldr	r3, [r7, #12]
 80331bc:	681b      	ldr	r3, [r3, #0]
 80331be:	69db      	ldr	r3, [r3, #28]
 80331c0:	f003 0307 	and.w	r3, r3, #7
 80331c4:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80331c6:	697b      	ldr	r3, [r7, #20]
 80331c8:	2b03      	cmp	r3, #3
 80331ca:	d002      	beq.n	80331d2 <HAL_I2S_Transmit_DMA+0x7a>
 80331cc:	697b      	ldr	r3, [r7, #20]
 80331ce:	2b05      	cmp	r3, #5
 80331d0:	d10a      	bne.n	80331e8 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 80331d2:	88fb      	ldrh	r3, [r7, #6]
 80331d4:	005b      	lsls	r3, r3, #1
 80331d6:	b29a      	uxth	r2, r3
 80331d8:	68fb      	ldr	r3, [r7, #12]
 80331da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80331dc:	88fb      	ldrh	r3, [r7, #6]
 80331de:	005b      	lsls	r3, r3, #1
 80331e0:	b29a      	uxth	r2, r3
 80331e2:	68fb      	ldr	r3, [r7, #12]
 80331e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80331e6:	e005      	b.n	80331f4 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80331e8:	68fb      	ldr	r3, [r7, #12]
 80331ea:	88fa      	ldrh	r2, [r7, #6]
 80331ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80331ee:	68fb      	ldr	r3, [r7, #12]
 80331f0:	88fa      	ldrh	r2, [r7, #6]
 80331f2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80331f4:	68fb      	ldr	r3, [r7, #12]
 80331f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80331f8:	4a28      	ldr	r2, [pc, #160]	; (803329c <HAL_I2S_Transmit_DMA+0x144>)
 80331fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80331fc:	68fb      	ldr	r3, [r7, #12]
 80331fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8033200:	4a27      	ldr	r2, [pc, #156]	; (80332a0 <HAL_I2S_Transmit_DMA+0x148>)
 8033202:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8033204:	68fb      	ldr	r3, [r7, #12]
 8033206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8033208:	4a26      	ldr	r2, [pc, #152]	; (80332a4 <HAL_I2S_Transmit_DMA+0x14c>)
 803320a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 803320c:	68fb      	ldr	r3, [r7, #12]
 803320e:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8033210:	68fb      	ldr	r3, [r7, #12]
 8033212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8033214:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8033216:	68fb      	ldr	r3, [r7, #12]
 8033218:	681b      	ldr	r3, [r3, #0]
 803321a:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 803321c:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 803321e:	68fb      	ldr	r3, [r7, #12]
 8033220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8033222:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8033224:	f7fc f976 	bl	802f514 <HAL_DMA_Start_IT>
 8033228:	4603      	mov	r3, r0
 803322a:	2b00      	cmp	r3, #0
 803322c:	d00f      	beq.n	803324e <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 803322e:	68fb      	ldr	r3, [r7, #12]
 8033230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8033232:	f043 0208 	orr.w	r2, r3, #8
 8033236:	68fb      	ldr	r3, [r7, #12]
 8033238:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 803323a:	68fb      	ldr	r3, [r7, #12]
 803323c:	2201      	movs	r2, #1
 803323e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8033242:	68fb      	ldr	r3, [r7, #12]
 8033244:	2200      	movs	r2, #0
 8033246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 803324a:	2301      	movs	r3, #1
 803324c:	e022      	b.n	8033294 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 803324e:	68fb      	ldr	r3, [r7, #12]
 8033250:	681b      	ldr	r3, [r3, #0]
 8033252:	69db      	ldr	r3, [r3, #28]
 8033254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8033258:	2b00      	cmp	r3, #0
 803325a:	d107      	bne.n	803326c <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 803325c:	68fb      	ldr	r3, [r7, #12]
 803325e:	681b      	ldr	r3, [r3, #0]
 8033260:	69da      	ldr	r2, [r3, #28]
 8033262:	68fb      	ldr	r3, [r7, #12]
 8033264:	681b      	ldr	r3, [r3, #0]
 8033266:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 803326a:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 803326c:	68fb      	ldr	r3, [r7, #12]
 803326e:	681b      	ldr	r3, [r3, #0]
 8033270:	685b      	ldr	r3, [r3, #4]
 8033272:	f003 0302 	and.w	r3, r3, #2
 8033276:	2b00      	cmp	r3, #0
 8033278:	d107      	bne.n	803328a <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 803327a:	68fb      	ldr	r3, [r7, #12]
 803327c:	681b      	ldr	r3, [r3, #0]
 803327e:	685a      	ldr	r2, [r3, #4]
 8033280:	68fb      	ldr	r3, [r7, #12]
 8033282:	681b      	ldr	r3, [r3, #0]
 8033284:	f042 0202 	orr.w	r2, r2, #2
 8033288:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 803328a:	68fb      	ldr	r3, [r7, #12]
 803328c:	2200      	movs	r2, #0
 803328e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8033292:	2300      	movs	r3, #0
}
 8033294:	4618      	mov	r0, r3
 8033296:	3718      	adds	r7, #24
 8033298:	46bd      	mov	sp, r7
 803329a:	bd80      	pop	{r7, pc}
 803329c:	08033347 	.word	0x08033347
 80332a0:	08033305 	.word	0x08033305
 80332a4:	08033363 	.word	0x08033363

080332a8 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80332a8:	b580      	push	{r7, lr}
 80332aa:	b082      	sub	sp, #8
 80332ac:	af00      	add	r7, sp, #0
 80332ae:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 80332b0:	687b      	ldr	r3, [r7, #4]
 80332b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80332b4:	6878      	ldr	r0, [r7, #4]
 80332b6:	4798      	blx	r3
}
 80332b8:	bf00      	nop
 80332ba:	3708      	adds	r7, #8
 80332bc:	46bd      	mov	sp, r7
 80332be:	bd80      	pop	{r7, pc}

080332c0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80332c0:	b480      	push	{r7}
 80332c2:	b083      	sub	sp, #12
 80332c4:	af00      	add	r7, sp, #0
 80332c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80332c8:	bf00      	nop
 80332ca:	370c      	adds	r7, #12
 80332cc:	46bd      	mov	sp, r7
 80332ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80332d2:	4770      	bx	lr

080332d4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80332d4:	b480      	push	{r7}
 80332d6:	b083      	sub	sp, #12
 80332d8:	af00      	add	r7, sp, #0
 80332da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80332dc:	bf00      	nop
 80332de:	370c      	adds	r7, #12
 80332e0:	46bd      	mov	sp, r7
 80332e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80332e6:	4770      	bx	lr

080332e8 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 80332e8:	b480      	push	{r7}
 80332ea:	b083      	sub	sp, #12
 80332ec:	af00      	add	r7, sp, #0
 80332ee:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 80332f0:	687b      	ldr	r3, [r7, #4]
 80332f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80332f6:	b2db      	uxtb	r3, r3
}
 80332f8:	4618      	mov	r0, r3
 80332fa:	370c      	adds	r7, #12
 80332fc:	46bd      	mov	sp, r7
 80332fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033302:	4770      	bx	lr

08033304 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8033304:	b580      	push	{r7, lr}
 8033306:	b084      	sub	sp, #16
 8033308:	af00      	add	r7, sp, #0
 803330a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 803330c:	687b      	ldr	r3, [r7, #4]
 803330e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8033310:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8033312:	687b      	ldr	r3, [r7, #4]
 8033314:	69db      	ldr	r3, [r3, #28]
 8033316:	2b00      	cmp	r3, #0
 8033318:	d10e      	bne.n	8033338 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 803331a:	68fb      	ldr	r3, [r7, #12]
 803331c:	681b      	ldr	r3, [r3, #0]
 803331e:	685a      	ldr	r2, [r3, #4]
 8033320:	68fb      	ldr	r3, [r7, #12]
 8033322:	681b      	ldr	r3, [r3, #0]
 8033324:	f022 0202 	bic.w	r2, r2, #2
 8033328:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 803332a:	68fb      	ldr	r3, [r7, #12]
 803332c:	2200      	movs	r2, #0
 803332e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8033330:	68fb      	ldr	r3, [r7, #12]
 8033332:	2201      	movs	r2, #1
 8033334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8033338:	68f8      	ldr	r0, [r7, #12]
 803333a:	f7f3 fc3f 	bl	8026bbc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 803333e:	bf00      	nop
 8033340:	3710      	adds	r7, #16
 8033342:	46bd      	mov	sp, r7
 8033344:	bd80      	pop	{r7, pc}

08033346 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8033346:	b580      	push	{r7, lr}
 8033348:	b084      	sub	sp, #16
 803334a:	af00      	add	r7, sp, #0
 803334c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 803334e:	687b      	ldr	r3, [r7, #4]
 8033350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8033352:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8033354:	68f8      	ldr	r0, [r7, #12]
 8033356:	f7f3 fc43 	bl	8026be0 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 803335a:	bf00      	nop
 803335c:	3710      	adds	r7, #16
 803335e:	46bd      	mov	sp, r7
 8033360:	bd80      	pop	{r7, pc}

08033362 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8033362:	b580      	push	{r7, lr}
 8033364:	b084      	sub	sp, #16
 8033366:	af00      	add	r7, sp, #0
 8033368:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 803336a:	687b      	ldr	r3, [r7, #4]
 803336c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803336e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8033370:	68fb      	ldr	r3, [r7, #12]
 8033372:	681b      	ldr	r3, [r3, #0]
 8033374:	685a      	ldr	r2, [r3, #4]
 8033376:	68fb      	ldr	r3, [r7, #12]
 8033378:	681b      	ldr	r3, [r3, #0]
 803337a:	f022 0203 	bic.w	r2, r2, #3
 803337e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8033380:	68fb      	ldr	r3, [r7, #12]
 8033382:	2200      	movs	r2, #0
 8033384:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8033386:	68fb      	ldr	r3, [r7, #12]
 8033388:	2200      	movs	r2, #0
 803338a:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 803338c:	68fb      	ldr	r3, [r7, #12]
 803338e:	2201      	movs	r2, #1
 8033390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8033394:	68fb      	ldr	r3, [r7, #12]
 8033396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8033398:	f043 0208 	orr.w	r2, r3, #8
 803339c:	68fb      	ldr	r3, [r7, #12]
 803339e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80333a0:	68f8      	ldr	r0, [r7, #12]
 80333a2:	f7ff ff97 	bl	80332d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80333a6:	bf00      	nop
 80333a8:	3710      	adds	r7, #16
 80333aa:	46bd      	mov	sp, r7
 80333ac:	bd80      	pop	{r7, pc}

080333ae <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80333ae:	b580      	push	{r7, lr}
 80333b0:	b082      	sub	sp, #8
 80333b2:	af00      	add	r7, sp, #0
 80333b4:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80333b6:	687b      	ldr	r3, [r7, #4]
 80333b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80333ba:	881a      	ldrh	r2, [r3, #0]
 80333bc:	687b      	ldr	r3, [r7, #4]
 80333be:	681b      	ldr	r3, [r3, #0]
 80333c0:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80333c2:	687b      	ldr	r3, [r7, #4]
 80333c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80333c6:	1c9a      	adds	r2, r3, #2
 80333c8:	687b      	ldr	r3, [r7, #4]
 80333ca:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80333cc:	687b      	ldr	r3, [r7, #4]
 80333ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80333d0:	b29b      	uxth	r3, r3
 80333d2:	3b01      	subs	r3, #1
 80333d4:	b29a      	uxth	r2, r3
 80333d6:	687b      	ldr	r3, [r7, #4]
 80333d8:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80333da:	687b      	ldr	r3, [r7, #4]
 80333dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80333de:	b29b      	uxth	r3, r3
 80333e0:	2b00      	cmp	r3, #0
 80333e2:	d10e      	bne.n	8033402 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80333e4:	687b      	ldr	r3, [r7, #4]
 80333e6:	681b      	ldr	r3, [r3, #0]
 80333e8:	685a      	ldr	r2, [r3, #4]
 80333ea:	687b      	ldr	r3, [r7, #4]
 80333ec:	681b      	ldr	r3, [r3, #0]
 80333ee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80333f2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80333f4:	687b      	ldr	r3, [r7, #4]
 80333f6:	2201      	movs	r2, #1
 80333f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80333fc:	6878      	ldr	r0, [r7, #4]
 80333fe:	f7f3 fbdd 	bl	8026bbc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8033402:	bf00      	nop
 8033404:	3708      	adds	r7, #8
 8033406:	46bd      	mov	sp, r7
 8033408:	bd80      	pop	{r7, pc}

0803340a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 803340a:	b580      	push	{r7, lr}
 803340c:	b082      	sub	sp, #8
 803340e:	af00      	add	r7, sp, #0
 8033410:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8033412:	687b      	ldr	r3, [r7, #4]
 8033414:	681b      	ldr	r3, [r3, #0]
 8033416:	68da      	ldr	r2, [r3, #12]
 8033418:	687b      	ldr	r3, [r7, #4]
 803341a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803341c:	b292      	uxth	r2, r2
 803341e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8033420:	687b      	ldr	r3, [r7, #4]
 8033422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8033424:	1c9a      	adds	r2, r3, #2
 8033426:	687b      	ldr	r3, [r7, #4]
 8033428:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 803342a:	687b      	ldr	r3, [r7, #4]
 803342c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 803342e:	b29b      	uxth	r3, r3
 8033430:	3b01      	subs	r3, #1
 8033432:	b29a      	uxth	r2, r3
 8033434:	687b      	ldr	r3, [r7, #4]
 8033436:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8033438:	687b      	ldr	r3, [r7, #4]
 803343a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 803343c:	b29b      	uxth	r3, r3
 803343e:	2b00      	cmp	r3, #0
 8033440:	d10e      	bne.n	8033460 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8033442:	687b      	ldr	r3, [r7, #4]
 8033444:	681b      	ldr	r3, [r3, #0]
 8033446:	685a      	ldr	r2, [r3, #4]
 8033448:	687b      	ldr	r3, [r7, #4]
 803344a:	681b      	ldr	r3, [r3, #0]
 803344c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8033450:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8033452:	687b      	ldr	r3, [r7, #4]
 8033454:	2201      	movs	r2, #1
 8033456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 803345a:	6878      	ldr	r0, [r7, #4]
 803345c:	f7ff ff30 	bl	80332c0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8033460:	bf00      	nop
 8033462:	3708      	adds	r7, #8
 8033464:	46bd      	mov	sp, r7
 8033466:	bd80      	pop	{r7, pc}

08033468 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8033468:	b580      	push	{r7, lr}
 803346a:	b086      	sub	sp, #24
 803346c:	af00      	add	r7, sp, #0
 803346e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8033470:	687b      	ldr	r3, [r7, #4]
 8033472:	681b      	ldr	r3, [r3, #0]
 8033474:	689b      	ldr	r3, [r3, #8]
 8033476:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8033478:	687b      	ldr	r3, [r7, #4]
 803347a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 803347e:	b2db      	uxtb	r3, r3
 8033480:	2b04      	cmp	r3, #4
 8033482:	d13a      	bne.n	80334fa <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8033484:	697b      	ldr	r3, [r7, #20]
 8033486:	f003 0301 	and.w	r3, r3, #1
 803348a:	2b01      	cmp	r3, #1
 803348c:	d109      	bne.n	80334a2 <I2S_IRQHandler+0x3a>
 803348e:	687b      	ldr	r3, [r7, #4]
 8033490:	681b      	ldr	r3, [r3, #0]
 8033492:	685b      	ldr	r3, [r3, #4]
 8033494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8033498:	2b40      	cmp	r3, #64	; 0x40
 803349a:	d102      	bne.n	80334a2 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 803349c:	6878      	ldr	r0, [r7, #4]
 803349e:	f7ff ffb4 	bl	803340a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80334a2:	697b      	ldr	r3, [r7, #20]
 80334a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80334a8:	2b40      	cmp	r3, #64	; 0x40
 80334aa:	d126      	bne.n	80334fa <I2S_IRQHandler+0x92>
 80334ac:	687b      	ldr	r3, [r7, #4]
 80334ae:	681b      	ldr	r3, [r3, #0]
 80334b0:	685b      	ldr	r3, [r3, #4]
 80334b2:	f003 0320 	and.w	r3, r3, #32
 80334b6:	2b20      	cmp	r3, #32
 80334b8:	d11f      	bne.n	80334fa <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80334ba:	687b      	ldr	r3, [r7, #4]
 80334bc:	681b      	ldr	r3, [r3, #0]
 80334be:	685a      	ldr	r2, [r3, #4]
 80334c0:	687b      	ldr	r3, [r7, #4]
 80334c2:	681b      	ldr	r3, [r3, #0]
 80334c4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80334c8:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80334ca:	2300      	movs	r3, #0
 80334cc:	613b      	str	r3, [r7, #16]
 80334ce:	687b      	ldr	r3, [r7, #4]
 80334d0:	681b      	ldr	r3, [r3, #0]
 80334d2:	68db      	ldr	r3, [r3, #12]
 80334d4:	613b      	str	r3, [r7, #16]
 80334d6:	687b      	ldr	r3, [r7, #4]
 80334d8:	681b      	ldr	r3, [r3, #0]
 80334da:	689b      	ldr	r3, [r3, #8]
 80334dc:	613b      	str	r3, [r7, #16]
 80334de:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80334e0:	687b      	ldr	r3, [r7, #4]
 80334e2:	2201      	movs	r2, #1
 80334e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80334e8:	687b      	ldr	r3, [r7, #4]
 80334ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80334ec:	f043 0202 	orr.w	r2, r3, #2
 80334f0:	687b      	ldr	r3, [r7, #4]
 80334f2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80334f4:	6878      	ldr	r0, [r7, #4]
 80334f6:	f7ff feed 	bl	80332d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80334fa:	687b      	ldr	r3, [r7, #4]
 80334fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8033500:	b2db      	uxtb	r3, r3
 8033502:	2b03      	cmp	r3, #3
 8033504:	d136      	bne.n	8033574 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8033506:	697b      	ldr	r3, [r7, #20]
 8033508:	f003 0302 	and.w	r3, r3, #2
 803350c:	2b02      	cmp	r3, #2
 803350e:	d109      	bne.n	8033524 <I2S_IRQHandler+0xbc>
 8033510:	687b      	ldr	r3, [r7, #4]
 8033512:	681b      	ldr	r3, [r3, #0]
 8033514:	685b      	ldr	r3, [r3, #4]
 8033516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 803351a:	2b80      	cmp	r3, #128	; 0x80
 803351c:	d102      	bne.n	8033524 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 803351e:	6878      	ldr	r0, [r7, #4]
 8033520:	f7ff ff45 	bl	80333ae <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8033524:	697b      	ldr	r3, [r7, #20]
 8033526:	f003 0308 	and.w	r3, r3, #8
 803352a:	2b08      	cmp	r3, #8
 803352c:	d122      	bne.n	8033574 <I2S_IRQHandler+0x10c>
 803352e:	687b      	ldr	r3, [r7, #4]
 8033530:	681b      	ldr	r3, [r3, #0]
 8033532:	685b      	ldr	r3, [r3, #4]
 8033534:	f003 0320 	and.w	r3, r3, #32
 8033538:	2b20      	cmp	r3, #32
 803353a:	d11b      	bne.n	8033574 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 803353c:	687b      	ldr	r3, [r7, #4]
 803353e:	681b      	ldr	r3, [r3, #0]
 8033540:	685a      	ldr	r2, [r3, #4]
 8033542:	687b      	ldr	r3, [r7, #4]
 8033544:	681b      	ldr	r3, [r3, #0]
 8033546:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 803354a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 803354c:	2300      	movs	r3, #0
 803354e:	60fb      	str	r3, [r7, #12]
 8033550:	687b      	ldr	r3, [r7, #4]
 8033552:	681b      	ldr	r3, [r3, #0]
 8033554:	689b      	ldr	r3, [r3, #8]
 8033556:	60fb      	str	r3, [r7, #12]
 8033558:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 803355a:	687b      	ldr	r3, [r7, #4]
 803355c:	2201      	movs	r2, #1
 803355e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8033562:	687b      	ldr	r3, [r7, #4]
 8033564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8033566:	f043 0204 	orr.w	r2, r3, #4
 803356a:	687b      	ldr	r3, [r7, #4]
 803356c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 803356e:	6878      	ldr	r0, [r7, #4]
 8033570:	f7ff feb0 	bl	80332d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8033574:	bf00      	nop
 8033576:	3718      	adds	r7, #24
 8033578:	46bd      	mov	sp, r7
 803357a:	bd80      	pop	{r7, pc}

0803357c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 803357c:	b580      	push	{r7, lr}
 803357e:	b088      	sub	sp, #32
 8033580:	af00      	add	r7, sp, #0
 8033582:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8033584:	687b      	ldr	r3, [r7, #4]
 8033586:	681b      	ldr	r3, [r3, #0]
 8033588:	689b      	ldr	r3, [r3, #8]
 803358a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 803358c:	687b      	ldr	r3, [r7, #4]
 803358e:	681b      	ldr	r3, [r3, #0]
 8033590:	4aa2      	ldr	r2, [pc, #648]	; (803381c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8033592:	4293      	cmp	r3, r2
 8033594:	d101      	bne.n	803359a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8033596:	4ba2      	ldr	r3, [pc, #648]	; (8033820 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8033598:	e001      	b.n	803359e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 803359a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 803359e:	689b      	ldr	r3, [r3, #8]
 80335a0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80335a2:	687b      	ldr	r3, [r7, #4]
 80335a4:	681b      	ldr	r3, [r3, #0]
 80335a6:	685b      	ldr	r3, [r3, #4]
 80335a8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80335aa:	687b      	ldr	r3, [r7, #4]
 80335ac:	681b      	ldr	r3, [r3, #0]
 80335ae:	4a9b      	ldr	r2, [pc, #620]	; (803381c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80335b0:	4293      	cmp	r3, r2
 80335b2:	d101      	bne.n	80335b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80335b4:	4b9a      	ldr	r3, [pc, #616]	; (8033820 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80335b6:	e001      	b.n	80335bc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80335b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80335bc:	685b      	ldr	r3, [r3, #4]
 80335be:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80335c0:	687b      	ldr	r3, [r7, #4]
 80335c2:	685b      	ldr	r3, [r3, #4]
 80335c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80335c8:	d004      	beq.n	80335d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80335ca:	687b      	ldr	r3, [r7, #4]
 80335cc:	685b      	ldr	r3, [r3, #4]
 80335ce:	2b00      	cmp	r3, #0
 80335d0:	f040 8099 	bne.w	8033706 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80335d4:	69fb      	ldr	r3, [r7, #28]
 80335d6:	f003 0302 	and.w	r3, r3, #2
 80335da:	2b02      	cmp	r3, #2
 80335dc:	d107      	bne.n	80335ee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80335de:	697b      	ldr	r3, [r7, #20]
 80335e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80335e4:	2b00      	cmp	r3, #0
 80335e6:	d002      	beq.n	80335ee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80335e8:	6878      	ldr	r0, [r7, #4]
 80335ea:	f000 f925 	bl	8033838 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80335ee:	69bb      	ldr	r3, [r7, #24]
 80335f0:	f003 0301 	and.w	r3, r3, #1
 80335f4:	2b01      	cmp	r3, #1
 80335f6:	d107      	bne.n	8033608 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80335f8:	693b      	ldr	r3, [r7, #16]
 80335fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80335fe:	2b00      	cmp	r3, #0
 8033600:	d002      	beq.n	8033608 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8033602:	6878      	ldr	r0, [r7, #4]
 8033604:	f000 f9c8 	bl	8033998 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8033608:	69bb      	ldr	r3, [r7, #24]
 803360a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 803360e:	2b40      	cmp	r3, #64	; 0x40
 8033610:	d13a      	bne.n	8033688 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8033612:	693b      	ldr	r3, [r7, #16]
 8033614:	f003 0320 	and.w	r3, r3, #32
 8033618:	2b00      	cmp	r3, #0
 803361a:	d035      	beq.n	8033688 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 803361c:	687b      	ldr	r3, [r7, #4]
 803361e:	681b      	ldr	r3, [r3, #0]
 8033620:	4a7e      	ldr	r2, [pc, #504]	; (803381c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8033622:	4293      	cmp	r3, r2
 8033624:	d101      	bne.n	803362a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8033626:	4b7e      	ldr	r3, [pc, #504]	; (8033820 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8033628:	e001      	b.n	803362e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 803362a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 803362e:	685a      	ldr	r2, [r3, #4]
 8033630:	687b      	ldr	r3, [r7, #4]
 8033632:	681b      	ldr	r3, [r3, #0]
 8033634:	4979      	ldr	r1, [pc, #484]	; (803381c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8033636:	428b      	cmp	r3, r1
 8033638:	d101      	bne.n	803363e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 803363a:	4b79      	ldr	r3, [pc, #484]	; (8033820 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 803363c:	e001      	b.n	8033642 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 803363e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8033642:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8033646:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8033648:	687b      	ldr	r3, [r7, #4]
 803364a:	681b      	ldr	r3, [r3, #0]
 803364c:	685a      	ldr	r2, [r3, #4]
 803364e:	687b      	ldr	r3, [r7, #4]
 8033650:	681b      	ldr	r3, [r3, #0]
 8033652:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8033656:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8033658:	2300      	movs	r3, #0
 803365a:	60fb      	str	r3, [r7, #12]
 803365c:	687b      	ldr	r3, [r7, #4]
 803365e:	681b      	ldr	r3, [r3, #0]
 8033660:	68db      	ldr	r3, [r3, #12]
 8033662:	60fb      	str	r3, [r7, #12]
 8033664:	687b      	ldr	r3, [r7, #4]
 8033666:	681b      	ldr	r3, [r3, #0]
 8033668:	689b      	ldr	r3, [r3, #8]
 803366a:	60fb      	str	r3, [r7, #12]
 803366c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 803366e:	687b      	ldr	r3, [r7, #4]
 8033670:	2201      	movs	r2, #1
 8033672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8033676:	687b      	ldr	r3, [r7, #4]
 8033678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 803367a:	f043 0202 	orr.w	r2, r3, #2
 803367e:	687b      	ldr	r3, [r7, #4]
 8033680:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8033682:	6878      	ldr	r0, [r7, #4]
 8033684:	f7ff fe26 	bl	80332d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8033688:	69fb      	ldr	r3, [r7, #28]
 803368a:	f003 0308 	and.w	r3, r3, #8
 803368e:	2b08      	cmp	r3, #8
 8033690:	f040 80be 	bne.w	8033810 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8033694:	697b      	ldr	r3, [r7, #20]
 8033696:	f003 0320 	and.w	r3, r3, #32
 803369a:	2b00      	cmp	r3, #0
 803369c:	f000 80b8 	beq.w	8033810 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80336a0:	687b      	ldr	r3, [r7, #4]
 80336a2:	681b      	ldr	r3, [r3, #0]
 80336a4:	685a      	ldr	r2, [r3, #4]
 80336a6:	687b      	ldr	r3, [r7, #4]
 80336a8:	681b      	ldr	r3, [r3, #0]
 80336aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80336ae:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80336b0:	687b      	ldr	r3, [r7, #4]
 80336b2:	681b      	ldr	r3, [r3, #0]
 80336b4:	4a59      	ldr	r2, [pc, #356]	; (803381c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80336b6:	4293      	cmp	r3, r2
 80336b8:	d101      	bne.n	80336be <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80336ba:	4b59      	ldr	r3, [pc, #356]	; (8033820 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80336bc:	e001      	b.n	80336c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80336be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80336c2:	685a      	ldr	r2, [r3, #4]
 80336c4:	687b      	ldr	r3, [r7, #4]
 80336c6:	681b      	ldr	r3, [r3, #0]
 80336c8:	4954      	ldr	r1, [pc, #336]	; (803381c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80336ca:	428b      	cmp	r3, r1
 80336cc:	d101      	bne.n	80336d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80336ce:	4b54      	ldr	r3, [pc, #336]	; (8033820 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80336d0:	e001      	b.n	80336d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80336d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80336d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80336da:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80336dc:	2300      	movs	r3, #0
 80336de:	60bb      	str	r3, [r7, #8]
 80336e0:	687b      	ldr	r3, [r7, #4]
 80336e2:	681b      	ldr	r3, [r3, #0]
 80336e4:	689b      	ldr	r3, [r3, #8]
 80336e6:	60bb      	str	r3, [r7, #8]
 80336e8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80336ea:	687b      	ldr	r3, [r7, #4]
 80336ec:	2201      	movs	r2, #1
 80336ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80336f2:	687b      	ldr	r3, [r7, #4]
 80336f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80336f6:	f043 0204 	orr.w	r2, r3, #4
 80336fa:	687b      	ldr	r3, [r7, #4]
 80336fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80336fe:	6878      	ldr	r0, [r7, #4]
 8033700:	f7ff fde8 	bl	80332d4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8033704:	e084      	b.n	8033810 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8033706:	69bb      	ldr	r3, [r7, #24]
 8033708:	f003 0302 	and.w	r3, r3, #2
 803370c:	2b02      	cmp	r3, #2
 803370e:	d107      	bne.n	8033720 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8033710:	693b      	ldr	r3, [r7, #16]
 8033712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8033716:	2b00      	cmp	r3, #0
 8033718:	d002      	beq.n	8033720 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 803371a:	6878      	ldr	r0, [r7, #4]
 803371c:	f000 f8be 	bl	803389c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8033720:	69fb      	ldr	r3, [r7, #28]
 8033722:	f003 0301 	and.w	r3, r3, #1
 8033726:	2b01      	cmp	r3, #1
 8033728:	d107      	bne.n	803373a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 803372a:	697b      	ldr	r3, [r7, #20]
 803372c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8033730:	2b00      	cmp	r3, #0
 8033732:	d002      	beq.n	803373a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8033734:	6878      	ldr	r0, [r7, #4]
 8033736:	f000 f8fd 	bl	8033934 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 803373a:	69fb      	ldr	r3, [r7, #28]
 803373c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8033740:	2b40      	cmp	r3, #64	; 0x40
 8033742:	d12f      	bne.n	80337a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8033744:	697b      	ldr	r3, [r7, #20]
 8033746:	f003 0320 	and.w	r3, r3, #32
 803374a:	2b00      	cmp	r3, #0
 803374c:	d02a      	beq.n	80337a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 803374e:	687b      	ldr	r3, [r7, #4]
 8033750:	681b      	ldr	r3, [r3, #0]
 8033752:	685a      	ldr	r2, [r3, #4]
 8033754:	687b      	ldr	r3, [r7, #4]
 8033756:	681b      	ldr	r3, [r3, #0]
 8033758:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 803375c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 803375e:	687b      	ldr	r3, [r7, #4]
 8033760:	681b      	ldr	r3, [r3, #0]
 8033762:	4a2e      	ldr	r2, [pc, #184]	; (803381c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8033764:	4293      	cmp	r3, r2
 8033766:	d101      	bne.n	803376c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8033768:	4b2d      	ldr	r3, [pc, #180]	; (8033820 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 803376a:	e001      	b.n	8033770 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 803376c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8033770:	685a      	ldr	r2, [r3, #4]
 8033772:	687b      	ldr	r3, [r7, #4]
 8033774:	681b      	ldr	r3, [r3, #0]
 8033776:	4929      	ldr	r1, [pc, #164]	; (803381c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8033778:	428b      	cmp	r3, r1
 803377a:	d101      	bne.n	8033780 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 803377c:	4b28      	ldr	r3, [pc, #160]	; (8033820 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 803377e:	e001      	b.n	8033784 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8033780:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8033784:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8033788:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 803378a:	687b      	ldr	r3, [r7, #4]
 803378c:	2201      	movs	r2, #1
 803378e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8033792:	687b      	ldr	r3, [r7, #4]
 8033794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8033796:	f043 0202 	orr.w	r2, r3, #2
 803379a:	687b      	ldr	r3, [r7, #4]
 803379c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 803379e:	6878      	ldr	r0, [r7, #4]
 80337a0:	f7ff fd98 	bl	80332d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80337a4:	69bb      	ldr	r3, [r7, #24]
 80337a6:	f003 0308 	and.w	r3, r3, #8
 80337aa:	2b08      	cmp	r3, #8
 80337ac:	d131      	bne.n	8033812 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80337ae:	693b      	ldr	r3, [r7, #16]
 80337b0:	f003 0320 	and.w	r3, r3, #32
 80337b4:	2b00      	cmp	r3, #0
 80337b6:	d02c      	beq.n	8033812 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80337b8:	687b      	ldr	r3, [r7, #4]
 80337ba:	681b      	ldr	r3, [r3, #0]
 80337bc:	4a17      	ldr	r2, [pc, #92]	; (803381c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80337be:	4293      	cmp	r3, r2
 80337c0:	d101      	bne.n	80337c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80337c2:	4b17      	ldr	r3, [pc, #92]	; (8033820 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80337c4:	e001      	b.n	80337ca <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80337c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80337ca:	685a      	ldr	r2, [r3, #4]
 80337cc:	687b      	ldr	r3, [r7, #4]
 80337ce:	681b      	ldr	r3, [r3, #0]
 80337d0:	4912      	ldr	r1, [pc, #72]	; (803381c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80337d2:	428b      	cmp	r3, r1
 80337d4:	d101      	bne.n	80337da <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80337d6:	4b12      	ldr	r3, [pc, #72]	; (8033820 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80337d8:	e001      	b.n	80337de <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80337da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80337de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80337e2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80337e4:	687b      	ldr	r3, [r7, #4]
 80337e6:	681b      	ldr	r3, [r3, #0]
 80337e8:	685a      	ldr	r2, [r3, #4]
 80337ea:	687b      	ldr	r3, [r7, #4]
 80337ec:	681b      	ldr	r3, [r3, #0]
 80337ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80337f2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80337f4:	687b      	ldr	r3, [r7, #4]
 80337f6:	2201      	movs	r2, #1
 80337f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80337fc:	687b      	ldr	r3, [r7, #4]
 80337fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8033800:	f043 0204 	orr.w	r2, r3, #4
 8033804:	687b      	ldr	r3, [r7, #4]
 8033806:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8033808:	6878      	ldr	r0, [r7, #4]
 803380a:	f7ff fd63 	bl	80332d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 803380e:	e000      	b.n	8033812 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8033810:	bf00      	nop
}
 8033812:	bf00      	nop
 8033814:	3720      	adds	r7, #32
 8033816:	46bd      	mov	sp, r7
 8033818:	bd80      	pop	{r7, pc}
 803381a:	bf00      	nop
 803381c:	40003800 	.word	0x40003800
 8033820:	40003400 	.word	0x40003400

08033824 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8033824:	b480      	push	{r7}
 8033826:	b083      	sub	sp, #12
 8033828:	af00      	add	r7, sp, #0
 803382a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 803382c:	bf00      	nop
 803382e:	370c      	adds	r7, #12
 8033830:	46bd      	mov	sp, r7
 8033832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033836:	4770      	bx	lr

08033838 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8033838:	b580      	push	{r7, lr}
 803383a:	b082      	sub	sp, #8
 803383c:	af00      	add	r7, sp, #0
 803383e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8033840:	687b      	ldr	r3, [r7, #4]
 8033842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8033844:	1c99      	adds	r1, r3, #2
 8033846:	687a      	ldr	r2, [r7, #4]
 8033848:	6251      	str	r1, [r2, #36]	; 0x24
 803384a:	881a      	ldrh	r2, [r3, #0]
 803384c:	687b      	ldr	r3, [r7, #4]
 803384e:	681b      	ldr	r3, [r3, #0]
 8033850:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8033852:	687b      	ldr	r3, [r7, #4]
 8033854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8033856:	b29b      	uxth	r3, r3
 8033858:	3b01      	subs	r3, #1
 803385a:	b29a      	uxth	r2, r3
 803385c:	687b      	ldr	r3, [r7, #4]
 803385e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8033860:	687b      	ldr	r3, [r7, #4]
 8033862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8033864:	b29b      	uxth	r3, r3
 8033866:	2b00      	cmp	r3, #0
 8033868:	d113      	bne.n	8033892 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 803386a:	687b      	ldr	r3, [r7, #4]
 803386c:	681b      	ldr	r3, [r3, #0]
 803386e:	685a      	ldr	r2, [r3, #4]
 8033870:	687b      	ldr	r3, [r7, #4]
 8033872:	681b      	ldr	r3, [r3, #0]
 8033874:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8033878:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 803387a:	687b      	ldr	r3, [r7, #4]
 803387c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 803387e:	b29b      	uxth	r3, r3
 8033880:	2b00      	cmp	r3, #0
 8033882:	d106      	bne.n	8033892 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8033884:	687b      	ldr	r3, [r7, #4]
 8033886:	2201      	movs	r2, #1
 8033888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 803388c:	6878      	ldr	r0, [r7, #4]
 803388e:	f7ff ffc9 	bl	8033824 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8033892:	bf00      	nop
 8033894:	3708      	adds	r7, #8
 8033896:	46bd      	mov	sp, r7
 8033898:	bd80      	pop	{r7, pc}
	...

0803389c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 803389c:	b580      	push	{r7, lr}
 803389e:	b082      	sub	sp, #8
 80338a0:	af00      	add	r7, sp, #0
 80338a2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80338a4:	687b      	ldr	r3, [r7, #4]
 80338a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80338a8:	1c99      	adds	r1, r3, #2
 80338aa:	687a      	ldr	r2, [r7, #4]
 80338ac:	6251      	str	r1, [r2, #36]	; 0x24
 80338ae:	8819      	ldrh	r1, [r3, #0]
 80338b0:	687b      	ldr	r3, [r7, #4]
 80338b2:	681b      	ldr	r3, [r3, #0]
 80338b4:	4a1d      	ldr	r2, [pc, #116]	; (803392c <I2SEx_TxISR_I2SExt+0x90>)
 80338b6:	4293      	cmp	r3, r2
 80338b8:	d101      	bne.n	80338be <I2SEx_TxISR_I2SExt+0x22>
 80338ba:	4b1d      	ldr	r3, [pc, #116]	; (8033930 <I2SEx_TxISR_I2SExt+0x94>)
 80338bc:	e001      	b.n	80338c2 <I2SEx_TxISR_I2SExt+0x26>
 80338be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80338c2:	460a      	mov	r2, r1
 80338c4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80338c6:	687b      	ldr	r3, [r7, #4]
 80338c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80338ca:	b29b      	uxth	r3, r3
 80338cc:	3b01      	subs	r3, #1
 80338ce:	b29a      	uxth	r2, r3
 80338d0:	687b      	ldr	r3, [r7, #4]
 80338d2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80338d4:	687b      	ldr	r3, [r7, #4]
 80338d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80338d8:	b29b      	uxth	r3, r3
 80338da:	2b00      	cmp	r3, #0
 80338dc:	d121      	bne.n	8033922 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80338de:	687b      	ldr	r3, [r7, #4]
 80338e0:	681b      	ldr	r3, [r3, #0]
 80338e2:	4a12      	ldr	r2, [pc, #72]	; (803392c <I2SEx_TxISR_I2SExt+0x90>)
 80338e4:	4293      	cmp	r3, r2
 80338e6:	d101      	bne.n	80338ec <I2SEx_TxISR_I2SExt+0x50>
 80338e8:	4b11      	ldr	r3, [pc, #68]	; (8033930 <I2SEx_TxISR_I2SExt+0x94>)
 80338ea:	e001      	b.n	80338f0 <I2SEx_TxISR_I2SExt+0x54>
 80338ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80338f0:	685a      	ldr	r2, [r3, #4]
 80338f2:	687b      	ldr	r3, [r7, #4]
 80338f4:	681b      	ldr	r3, [r3, #0]
 80338f6:	490d      	ldr	r1, [pc, #52]	; (803392c <I2SEx_TxISR_I2SExt+0x90>)
 80338f8:	428b      	cmp	r3, r1
 80338fa:	d101      	bne.n	8033900 <I2SEx_TxISR_I2SExt+0x64>
 80338fc:	4b0c      	ldr	r3, [pc, #48]	; (8033930 <I2SEx_TxISR_I2SExt+0x94>)
 80338fe:	e001      	b.n	8033904 <I2SEx_TxISR_I2SExt+0x68>
 8033900:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8033904:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8033908:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 803390a:	687b      	ldr	r3, [r7, #4]
 803390c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 803390e:	b29b      	uxth	r3, r3
 8033910:	2b00      	cmp	r3, #0
 8033912:	d106      	bne.n	8033922 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8033914:	687b      	ldr	r3, [r7, #4]
 8033916:	2201      	movs	r2, #1
 8033918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 803391c:	6878      	ldr	r0, [r7, #4]
 803391e:	f7ff ff81 	bl	8033824 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8033922:	bf00      	nop
 8033924:	3708      	adds	r7, #8
 8033926:	46bd      	mov	sp, r7
 8033928:	bd80      	pop	{r7, pc}
 803392a:	bf00      	nop
 803392c:	40003800 	.word	0x40003800
 8033930:	40003400 	.word	0x40003400

08033934 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8033934:	b580      	push	{r7, lr}
 8033936:	b082      	sub	sp, #8
 8033938:	af00      	add	r7, sp, #0
 803393a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 803393c:	687b      	ldr	r3, [r7, #4]
 803393e:	681b      	ldr	r3, [r3, #0]
 8033940:	68d8      	ldr	r0, [r3, #12]
 8033942:	687b      	ldr	r3, [r7, #4]
 8033944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8033946:	1c99      	adds	r1, r3, #2
 8033948:	687a      	ldr	r2, [r7, #4]
 803394a:	62d1      	str	r1, [r2, #44]	; 0x2c
 803394c:	b282      	uxth	r2, r0
 803394e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8033950:	687b      	ldr	r3, [r7, #4]
 8033952:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8033954:	b29b      	uxth	r3, r3
 8033956:	3b01      	subs	r3, #1
 8033958:	b29a      	uxth	r2, r3
 803395a:	687b      	ldr	r3, [r7, #4]
 803395c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 803395e:	687b      	ldr	r3, [r7, #4]
 8033960:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8033962:	b29b      	uxth	r3, r3
 8033964:	2b00      	cmp	r3, #0
 8033966:	d113      	bne.n	8033990 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8033968:	687b      	ldr	r3, [r7, #4]
 803396a:	681b      	ldr	r3, [r3, #0]
 803396c:	685a      	ldr	r2, [r3, #4]
 803396e:	687b      	ldr	r3, [r7, #4]
 8033970:	681b      	ldr	r3, [r3, #0]
 8033972:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8033976:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8033978:	687b      	ldr	r3, [r7, #4]
 803397a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 803397c:	b29b      	uxth	r3, r3
 803397e:	2b00      	cmp	r3, #0
 8033980:	d106      	bne.n	8033990 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8033982:	687b      	ldr	r3, [r7, #4]
 8033984:	2201      	movs	r2, #1
 8033986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 803398a:	6878      	ldr	r0, [r7, #4]
 803398c:	f7ff ff4a 	bl	8033824 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8033990:	bf00      	nop
 8033992:	3708      	adds	r7, #8
 8033994:	46bd      	mov	sp, r7
 8033996:	bd80      	pop	{r7, pc}

08033998 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8033998:	b580      	push	{r7, lr}
 803399a:	b082      	sub	sp, #8
 803399c:	af00      	add	r7, sp, #0
 803399e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80339a0:	687b      	ldr	r3, [r7, #4]
 80339a2:	681b      	ldr	r3, [r3, #0]
 80339a4:	4a20      	ldr	r2, [pc, #128]	; (8033a28 <I2SEx_RxISR_I2SExt+0x90>)
 80339a6:	4293      	cmp	r3, r2
 80339a8:	d101      	bne.n	80339ae <I2SEx_RxISR_I2SExt+0x16>
 80339aa:	4b20      	ldr	r3, [pc, #128]	; (8033a2c <I2SEx_RxISR_I2SExt+0x94>)
 80339ac:	e001      	b.n	80339b2 <I2SEx_RxISR_I2SExt+0x1a>
 80339ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80339b2:	68d8      	ldr	r0, [r3, #12]
 80339b4:	687b      	ldr	r3, [r7, #4]
 80339b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80339b8:	1c99      	adds	r1, r3, #2
 80339ba:	687a      	ldr	r2, [r7, #4]
 80339bc:	62d1      	str	r1, [r2, #44]	; 0x2c
 80339be:	b282      	uxth	r2, r0
 80339c0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80339c2:	687b      	ldr	r3, [r7, #4]
 80339c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80339c6:	b29b      	uxth	r3, r3
 80339c8:	3b01      	subs	r3, #1
 80339ca:	b29a      	uxth	r2, r3
 80339cc:	687b      	ldr	r3, [r7, #4]
 80339ce:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80339d0:	687b      	ldr	r3, [r7, #4]
 80339d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80339d4:	b29b      	uxth	r3, r3
 80339d6:	2b00      	cmp	r3, #0
 80339d8:	d121      	bne.n	8033a1e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80339da:	687b      	ldr	r3, [r7, #4]
 80339dc:	681b      	ldr	r3, [r3, #0]
 80339de:	4a12      	ldr	r2, [pc, #72]	; (8033a28 <I2SEx_RxISR_I2SExt+0x90>)
 80339e0:	4293      	cmp	r3, r2
 80339e2:	d101      	bne.n	80339e8 <I2SEx_RxISR_I2SExt+0x50>
 80339e4:	4b11      	ldr	r3, [pc, #68]	; (8033a2c <I2SEx_RxISR_I2SExt+0x94>)
 80339e6:	e001      	b.n	80339ec <I2SEx_RxISR_I2SExt+0x54>
 80339e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80339ec:	685a      	ldr	r2, [r3, #4]
 80339ee:	687b      	ldr	r3, [r7, #4]
 80339f0:	681b      	ldr	r3, [r3, #0]
 80339f2:	490d      	ldr	r1, [pc, #52]	; (8033a28 <I2SEx_RxISR_I2SExt+0x90>)
 80339f4:	428b      	cmp	r3, r1
 80339f6:	d101      	bne.n	80339fc <I2SEx_RxISR_I2SExt+0x64>
 80339f8:	4b0c      	ldr	r3, [pc, #48]	; (8033a2c <I2SEx_RxISR_I2SExt+0x94>)
 80339fa:	e001      	b.n	8033a00 <I2SEx_RxISR_I2SExt+0x68>
 80339fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8033a00:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8033a04:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8033a06:	687b      	ldr	r3, [r7, #4]
 8033a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8033a0a:	b29b      	uxth	r3, r3
 8033a0c:	2b00      	cmp	r3, #0
 8033a0e:	d106      	bne.n	8033a1e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8033a10:	687b      	ldr	r3, [r7, #4]
 8033a12:	2201      	movs	r2, #1
 8033a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8033a18:	6878      	ldr	r0, [r7, #4]
 8033a1a:	f7ff ff03 	bl	8033824 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8033a1e:	bf00      	nop
 8033a20:	3708      	adds	r7, #8
 8033a22:	46bd      	mov	sp, r7
 8033a24:	bd80      	pop	{r7, pc}
 8033a26:	bf00      	nop
 8033a28:	40003800 	.word	0x40003800
 8033a2c:	40003400 	.word	0x40003400

08033a30 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8033a30:	b580      	push	{r7, lr}
 8033a32:	b084      	sub	sp, #16
 8033a34:	af00      	add	r7, sp, #0
 8033a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8033a38:	687b      	ldr	r3, [r7, #4]
 8033a3a:	2b00      	cmp	r3, #0
 8033a3c:	d101      	bne.n	8033a42 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8033a3e:	2301      	movs	r3, #1
 8033a40:	e02b      	b.n	8033a9a <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8033a42:	687b      	ldr	r3, [r7, #4]
 8033a44:	681b      	ldr	r3, [r3, #0]
 8033a46:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8033a4a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8033a4c:	687b      	ldr	r3, [r7, #4]
 8033a4e:	681b      	ldr	r3, [r3, #0]
 8033a50:	f245 5255 	movw	r2, #21845	; 0x5555
 8033a54:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8033a56:	687b      	ldr	r3, [r7, #4]
 8033a58:	681b      	ldr	r3, [r3, #0]
 8033a5a:	687a      	ldr	r2, [r7, #4]
 8033a5c:	6852      	ldr	r2, [r2, #4]
 8033a5e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8033a60:	687b      	ldr	r3, [r7, #4]
 8033a62:	681b      	ldr	r3, [r3, #0]
 8033a64:	687a      	ldr	r2, [r7, #4]
 8033a66:	6892      	ldr	r2, [r2, #8]
 8033a68:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8033a6a:	f7f8 fbed 	bl	802c248 <HAL_GetTick>
 8033a6e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8033a70:	e008      	b.n	8033a84 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8033a72:	f7f8 fbe9 	bl	802c248 <HAL_GetTick>
 8033a76:	4602      	mov	r2, r0
 8033a78:	68fb      	ldr	r3, [r7, #12]
 8033a7a:	1ad3      	subs	r3, r2, r3
 8033a7c:	2b30      	cmp	r3, #48	; 0x30
 8033a7e:	d901      	bls.n	8033a84 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8033a80:	2303      	movs	r3, #3
 8033a82:	e00a      	b.n	8033a9a <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
 8033a84:	687b      	ldr	r3, [r7, #4]
 8033a86:	681b      	ldr	r3, [r3, #0]
 8033a88:	68db      	ldr	r3, [r3, #12]
 8033a8a:	2b00      	cmp	r3, #0
 8033a8c:	d1f1      	bne.n	8033a72 <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8033a8e:	687b      	ldr	r3, [r7, #4]
 8033a90:	681b      	ldr	r3, [r3, #0]
 8033a92:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8033a96:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8033a98:	2300      	movs	r3, #0
}
 8033a9a:	4618      	mov	r0, r3
 8033a9c:	3710      	adds	r7, #16
 8033a9e:	46bd      	mov	sp, r7
 8033aa0:	bd80      	pop	{r7, pc}

08033aa2 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8033aa2:	b480      	push	{r7}
 8033aa4:	b083      	sub	sp, #12
 8033aa6:	af00      	add	r7, sp, #0
 8033aa8:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8033aaa:	687b      	ldr	r3, [r7, #4]
 8033aac:	681b      	ldr	r3, [r3, #0]
 8033aae:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8033ab2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8033ab4:	2300      	movs	r3, #0
}
 8033ab6:	4618      	mov	r0, r3
 8033ab8:	370c      	adds	r7, #12
 8033aba:	46bd      	mov	sp, r7
 8033abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033ac0:	4770      	bx	lr
	...

08033ac4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8033ac4:	b580      	push	{r7, lr}
 8033ac6:	b084      	sub	sp, #16
 8033ac8:	af00      	add	r7, sp, #0
 8033aca:	6078      	str	r0, [r7, #4]
 8033acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8033ace:	687b      	ldr	r3, [r7, #4]
 8033ad0:	2b00      	cmp	r3, #0
 8033ad2:	d101      	bne.n	8033ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8033ad4:	2301      	movs	r3, #1
 8033ad6:	e0cc      	b.n	8033c72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8033ad8:	4b68      	ldr	r3, [pc, #416]	; (8033c7c <HAL_RCC_ClockConfig+0x1b8>)
 8033ada:	681b      	ldr	r3, [r3, #0]
 8033adc:	f003 030f 	and.w	r3, r3, #15
 8033ae0:	683a      	ldr	r2, [r7, #0]
 8033ae2:	429a      	cmp	r2, r3
 8033ae4:	d90c      	bls.n	8033b00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8033ae6:	4b65      	ldr	r3, [pc, #404]	; (8033c7c <HAL_RCC_ClockConfig+0x1b8>)
 8033ae8:	683a      	ldr	r2, [r7, #0]
 8033aea:	b2d2      	uxtb	r2, r2
 8033aec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8033aee:	4b63      	ldr	r3, [pc, #396]	; (8033c7c <HAL_RCC_ClockConfig+0x1b8>)
 8033af0:	681b      	ldr	r3, [r3, #0]
 8033af2:	f003 030f 	and.w	r3, r3, #15
 8033af6:	683a      	ldr	r2, [r7, #0]
 8033af8:	429a      	cmp	r2, r3
 8033afa:	d001      	beq.n	8033b00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8033afc:	2301      	movs	r3, #1
 8033afe:	e0b8      	b.n	8033c72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8033b00:	687b      	ldr	r3, [r7, #4]
 8033b02:	681b      	ldr	r3, [r3, #0]
 8033b04:	f003 0302 	and.w	r3, r3, #2
 8033b08:	2b00      	cmp	r3, #0
 8033b0a:	d020      	beq.n	8033b4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8033b0c:	687b      	ldr	r3, [r7, #4]
 8033b0e:	681b      	ldr	r3, [r3, #0]
 8033b10:	f003 0304 	and.w	r3, r3, #4
 8033b14:	2b00      	cmp	r3, #0
 8033b16:	d005      	beq.n	8033b24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8033b18:	4b59      	ldr	r3, [pc, #356]	; (8033c80 <HAL_RCC_ClockConfig+0x1bc>)
 8033b1a:	689b      	ldr	r3, [r3, #8]
 8033b1c:	4a58      	ldr	r2, [pc, #352]	; (8033c80 <HAL_RCC_ClockConfig+0x1bc>)
 8033b1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8033b22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8033b24:	687b      	ldr	r3, [r7, #4]
 8033b26:	681b      	ldr	r3, [r3, #0]
 8033b28:	f003 0308 	and.w	r3, r3, #8
 8033b2c:	2b00      	cmp	r3, #0
 8033b2e:	d005      	beq.n	8033b3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8033b30:	4b53      	ldr	r3, [pc, #332]	; (8033c80 <HAL_RCC_ClockConfig+0x1bc>)
 8033b32:	689b      	ldr	r3, [r3, #8]
 8033b34:	4a52      	ldr	r2, [pc, #328]	; (8033c80 <HAL_RCC_ClockConfig+0x1bc>)
 8033b36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8033b3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8033b3c:	4b50      	ldr	r3, [pc, #320]	; (8033c80 <HAL_RCC_ClockConfig+0x1bc>)
 8033b3e:	689b      	ldr	r3, [r3, #8]
 8033b40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8033b44:	687b      	ldr	r3, [r7, #4]
 8033b46:	689b      	ldr	r3, [r3, #8]
 8033b48:	494d      	ldr	r1, [pc, #308]	; (8033c80 <HAL_RCC_ClockConfig+0x1bc>)
 8033b4a:	4313      	orrs	r3, r2
 8033b4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8033b4e:	687b      	ldr	r3, [r7, #4]
 8033b50:	681b      	ldr	r3, [r3, #0]
 8033b52:	f003 0301 	and.w	r3, r3, #1
 8033b56:	2b00      	cmp	r3, #0
 8033b58:	d044      	beq.n	8033be4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8033b5a:	687b      	ldr	r3, [r7, #4]
 8033b5c:	685b      	ldr	r3, [r3, #4]
 8033b5e:	2b01      	cmp	r3, #1
 8033b60:	d107      	bne.n	8033b72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8033b62:	4b47      	ldr	r3, [pc, #284]	; (8033c80 <HAL_RCC_ClockConfig+0x1bc>)
 8033b64:	681b      	ldr	r3, [r3, #0]
 8033b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8033b6a:	2b00      	cmp	r3, #0
 8033b6c:	d119      	bne.n	8033ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8033b6e:	2301      	movs	r3, #1
 8033b70:	e07f      	b.n	8033c72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8033b72:	687b      	ldr	r3, [r7, #4]
 8033b74:	685b      	ldr	r3, [r3, #4]
 8033b76:	2b02      	cmp	r3, #2
 8033b78:	d003      	beq.n	8033b82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8033b7a:	687b      	ldr	r3, [r7, #4]
 8033b7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8033b7e:	2b03      	cmp	r3, #3
 8033b80:	d107      	bne.n	8033b92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8033b82:	4b3f      	ldr	r3, [pc, #252]	; (8033c80 <HAL_RCC_ClockConfig+0x1bc>)
 8033b84:	681b      	ldr	r3, [r3, #0]
 8033b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8033b8a:	2b00      	cmp	r3, #0
 8033b8c:	d109      	bne.n	8033ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8033b8e:	2301      	movs	r3, #1
 8033b90:	e06f      	b.n	8033c72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8033b92:	4b3b      	ldr	r3, [pc, #236]	; (8033c80 <HAL_RCC_ClockConfig+0x1bc>)
 8033b94:	681b      	ldr	r3, [r3, #0]
 8033b96:	f003 0302 	and.w	r3, r3, #2
 8033b9a:	2b00      	cmp	r3, #0
 8033b9c:	d101      	bne.n	8033ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8033b9e:	2301      	movs	r3, #1
 8033ba0:	e067      	b.n	8033c72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8033ba2:	4b37      	ldr	r3, [pc, #220]	; (8033c80 <HAL_RCC_ClockConfig+0x1bc>)
 8033ba4:	689b      	ldr	r3, [r3, #8]
 8033ba6:	f023 0203 	bic.w	r2, r3, #3
 8033baa:	687b      	ldr	r3, [r7, #4]
 8033bac:	685b      	ldr	r3, [r3, #4]
 8033bae:	4934      	ldr	r1, [pc, #208]	; (8033c80 <HAL_RCC_ClockConfig+0x1bc>)
 8033bb0:	4313      	orrs	r3, r2
 8033bb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8033bb4:	f7f8 fb48 	bl	802c248 <HAL_GetTick>
 8033bb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8033bba:	e00a      	b.n	8033bd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8033bbc:	f7f8 fb44 	bl	802c248 <HAL_GetTick>
 8033bc0:	4602      	mov	r2, r0
 8033bc2:	68fb      	ldr	r3, [r7, #12]
 8033bc4:	1ad3      	subs	r3, r2, r3
 8033bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8033bca:	4293      	cmp	r3, r2
 8033bcc:	d901      	bls.n	8033bd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8033bce:	2303      	movs	r3, #3
 8033bd0:	e04f      	b.n	8033c72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8033bd2:	4b2b      	ldr	r3, [pc, #172]	; (8033c80 <HAL_RCC_ClockConfig+0x1bc>)
 8033bd4:	689b      	ldr	r3, [r3, #8]
 8033bd6:	f003 020c 	and.w	r2, r3, #12
 8033bda:	687b      	ldr	r3, [r7, #4]
 8033bdc:	685b      	ldr	r3, [r3, #4]
 8033bde:	009b      	lsls	r3, r3, #2
 8033be0:	429a      	cmp	r2, r3
 8033be2:	d1eb      	bne.n	8033bbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8033be4:	4b25      	ldr	r3, [pc, #148]	; (8033c7c <HAL_RCC_ClockConfig+0x1b8>)
 8033be6:	681b      	ldr	r3, [r3, #0]
 8033be8:	f003 030f 	and.w	r3, r3, #15
 8033bec:	683a      	ldr	r2, [r7, #0]
 8033bee:	429a      	cmp	r2, r3
 8033bf0:	d20c      	bcs.n	8033c0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8033bf2:	4b22      	ldr	r3, [pc, #136]	; (8033c7c <HAL_RCC_ClockConfig+0x1b8>)
 8033bf4:	683a      	ldr	r2, [r7, #0]
 8033bf6:	b2d2      	uxtb	r2, r2
 8033bf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8033bfa:	4b20      	ldr	r3, [pc, #128]	; (8033c7c <HAL_RCC_ClockConfig+0x1b8>)
 8033bfc:	681b      	ldr	r3, [r3, #0]
 8033bfe:	f003 030f 	and.w	r3, r3, #15
 8033c02:	683a      	ldr	r2, [r7, #0]
 8033c04:	429a      	cmp	r2, r3
 8033c06:	d001      	beq.n	8033c0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8033c08:	2301      	movs	r3, #1
 8033c0a:	e032      	b.n	8033c72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8033c0c:	687b      	ldr	r3, [r7, #4]
 8033c0e:	681b      	ldr	r3, [r3, #0]
 8033c10:	f003 0304 	and.w	r3, r3, #4
 8033c14:	2b00      	cmp	r3, #0
 8033c16:	d008      	beq.n	8033c2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8033c18:	4b19      	ldr	r3, [pc, #100]	; (8033c80 <HAL_RCC_ClockConfig+0x1bc>)
 8033c1a:	689b      	ldr	r3, [r3, #8]
 8033c1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8033c20:	687b      	ldr	r3, [r7, #4]
 8033c22:	68db      	ldr	r3, [r3, #12]
 8033c24:	4916      	ldr	r1, [pc, #88]	; (8033c80 <HAL_RCC_ClockConfig+0x1bc>)
 8033c26:	4313      	orrs	r3, r2
 8033c28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8033c2a:	687b      	ldr	r3, [r7, #4]
 8033c2c:	681b      	ldr	r3, [r3, #0]
 8033c2e:	f003 0308 	and.w	r3, r3, #8
 8033c32:	2b00      	cmp	r3, #0
 8033c34:	d009      	beq.n	8033c4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8033c36:	4b12      	ldr	r3, [pc, #72]	; (8033c80 <HAL_RCC_ClockConfig+0x1bc>)
 8033c38:	689b      	ldr	r3, [r3, #8]
 8033c3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8033c3e:	687b      	ldr	r3, [r7, #4]
 8033c40:	691b      	ldr	r3, [r3, #16]
 8033c42:	00db      	lsls	r3, r3, #3
 8033c44:	490e      	ldr	r1, [pc, #56]	; (8033c80 <HAL_RCC_ClockConfig+0x1bc>)
 8033c46:	4313      	orrs	r3, r2
 8033c48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8033c4a:	f000 f821 	bl	8033c90 <HAL_RCC_GetSysClockFreq>
 8033c4e:	4601      	mov	r1, r0
 8033c50:	4b0b      	ldr	r3, [pc, #44]	; (8033c80 <HAL_RCC_ClockConfig+0x1bc>)
 8033c52:	689b      	ldr	r3, [r3, #8]
 8033c54:	091b      	lsrs	r3, r3, #4
 8033c56:	f003 030f 	and.w	r3, r3, #15
 8033c5a:	4a0a      	ldr	r2, [pc, #40]	; (8033c84 <HAL_RCC_ClockConfig+0x1c0>)
 8033c5c:	5cd3      	ldrb	r3, [r2, r3]
 8033c5e:	fa21 f303 	lsr.w	r3, r1, r3
 8033c62:	4a09      	ldr	r2, [pc, #36]	; (8033c88 <HAL_RCC_ClockConfig+0x1c4>)
 8033c64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8033c66:	4b09      	ldr	r3, [pc, #36]	; (8033c8c <HAL_RCC_ClockConfig+0x1c8>)
 8033c68:	681b      	ldr	r3, [r3, #0]
 8033c6a:	4618      	mov	r0, r3
 8033c6c:	f7f8 f8e6 	bl	802be3c <HAL_InitTick>

  return HAL_OK;
 8033c70:	2300      	movs	r3, #0
}
 8033c72:	4618      	mov	r0, r3
 8033c74:	3710      	adds	r7, #16
 8033c76:	46bd      	mov	sp, r7
 8033c78:	bd80      	pop	{r7, pc}
 8033c7a:	bf00      	nop
 8033c7c:	40023c00 	.word	0x40023c00
 8033c80:	40023800 	.word	0x40023800
 8033c84:	08056334 	.word	0x08056334
 8033c88:	20000294 	.word	0x20000294
 8033c8c:	20000298 	.word	0x20000298

08033c90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8033c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8033c92:	b085      	sub	sp, #20
 8033c94:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8033c96:	2300      	movs	r3, #0
 8033c98:	607b      	str	r3, [r7, #4]
 8033c9a:	2300      	movs	r3, #0
 8033c9c:	60fb      	str	r3, [r7, #12]
 8033c9e:	2300      	movs	r3, #0
 8033ca0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8033ca2:	2300      	movs	r3, #0
 8033ca4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8033ca6:	4b63      	ldr	r3, [pc, #396]	; (8033e34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8033ca8:	689b      	ldr	r3, [r3, #8]
 8033caa:	f003 030c 	and.w	r3, r3, #12
 8033cae:	2b04      	cmp	r3, #4
 8033cb0:	d007      	beq.n	8033cc2 <HAL_RCC_GetSysClockFreq+0x32>
 8033cb2:	2b08      	cmp	r3, #8
 8033cb4:	d008      	beq.n	8033cc8 <HAL_RCC_GetSysClockFreq+0x38>
 8033cb6:	2b00      	cmp	r3, #0
 8033cb8:	f040 80b4 	bne.w	8033e24 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8033cbc:	4b5e      	ldr	r3, [pc, #376]	; (8033e38 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8033cbe:	60bb      	str	r3, [r7, #8]
       break;
 8033cc0:	e0b3      	b.n	8033e2a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8033cc2:	4b5e      	ldr	r3, [pc, #376]	; (8033e3c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8033cc4:	60bb      	str	r3, [r7, #8]
      break;
 8033cc6:	e0b0      	b.n	8033e2a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8033cc8:	4b5a      	ldr	r3, [pc, #360]	; (8033e34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8033cca:	685b      	ldr	r3, [r3, #4]
 8033ccc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8033cd0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8033cd2:	4b58      	ldr	r3, [pc, #352]	; (8033e34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8033cd4:	685b      	ldr	r3, [r3, #4]
 8033cd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8033cda:	2b00      	cmp	r3, #0
 8033cdc:	d04a      	beq.n	8033d74 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8033cde:	4b55      	ldr	r3, [pc, #340]	; (8033e34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8033ce0:	685b      	ldr	r3, [r3, #4]
 8033ce2:	099b      	lsrs	r3, r3, #6
 8033ce4:	f04f 0400 	mov.w	r4, #0
 8033ce8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8033cec:	f04f 0200 	mov.w	r2, #0
 8033cf0:	ea03 0501 	and.w	r5, r3, r1
 8033cf4:	ea04 0602 	and.w	r6, r4, r2
 8033cf8:	4629      	mov	r1, r5
 8033cfa:	4632      	mov	r2, r6
 8033cfc:	f04f 0300 	mov.w	r3, #0
 8033d00:	f04f 0400 	mov.w	r4, #0
 8033d04:	0154      	lsls	r4, r2, #5
 8033d06:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8033d0a:	014b      	lsls	r3, r1, #5
 8033d0c:	4619      	mov	r1, r3
 8033d0e:	4622      	mov	r2, r4
 8033d10:	1b49      	subs	r1, r1, r5
 8033d12:	eb62 0206 	sbc.w	r2, r2, r6
 8033d16:	f04f 0300 	mov.w	r3, #0
 8033d1a:	f04f 0400 	mov.w	r4, #0
 8033d1e:	0194      	lsls	r4, r2, #6
 8033d20:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8033d24:	018b      	lsls	r3, r1, #6
 8033d26:	1a5b      	subs	r3, r3, r1
 8033d28:	eb64 0402 	sbc.w	r4, r4, r2
 8033d2c:	f04f 0100 	mov.w	r1, #0
 8033d30:	f04f 0200 	mov.w	r2, #0
 8033d34:	00e2      	lsls	r2, r4, #3
 8033d36:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8033d3a:	00d9      	lsls	r1, r3, #3
 8033d3c:	460b      	mov	r3, r1
 8033d3e:	4614      	mov	r4, r2
 8033d40:	195b      	adds	r3, r3, r5
 8033d42:	eb44 0406 	adc.w	r4, r4, r6
 8033d46:	f04f 0100 	mov.w	r1, #0
 8033d4a:	f04f 0200 	mov.w	r2, #0
 8033d4e:	0262      	lsls	r2, r4, #9
 8033d50:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8033d54:	0259      	lsls	r1, r3, #9
 8033d56:	460b      	mov	r3, r1
 8033d58:	4614      	mov	r4, r2
 8033d5a:	4618      	mov	r0, r3
 8033d5c:	4621      	mov	r1, r4
 8033d5e:	687b      	ldr	r3, [r7, #4]
 8033d60:	f04f 0400 	mov.w	r4, #0
 8033d64:	461a      	mov	r2, r3
 8033d66:	4623      	mov	r3, r4
 8033d68:	f7ec ffc6 	bl	8020cf8 <__aeabi_uldivmod>
 8033d6c:	4603      	mov	r3, r0
 8033d6e:	460c      	mov	r4, r1
 8033d70:	60fb      	str	r3, [r7, #12]
 8033d72:	e049      	b.n	8033e08 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8033d74:	4b2f      	ldr	r3, [pc, #188]	; (8033e34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8033d76:	685b      	ldr	r3, [r3, #4]
 8033d78:	099b      	lsrs	r3, r3, #6
 8033d7a:	f04f 0400 	mov.w	r4, #0
 8033d7e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8033d82:	f04f 0200 	mov.w	r2, #0
 8033d86:	ea03 0501 	and.w	r5, r3, r1
 8033d8a:	ea04 0602 	and.w	r6, r4, r2
 8033d8e:	4629      	mov	r1, r5
 8033d90:	4632      	mov	r2, r6
 8033d92:	f04f 0300 	mov.w	r3, #0
 8033d96:	f04f 0400 	mov.w	r4, #0
 8033d9a:	0154      	lsls	r4, r2, #5
 8033d9c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8033da0:	014b      	lsls	r3, r1, #5
 8033da2:	4619      	mov	r1, r3
 8033da4:	4622      	mov	r2, r4
 8033da6:	1b49      	subs	r1, r1, r5
 8033da8:	eb62 0206 	sbc.w	r2, r2, r6
 8033dac:	f04f 0300 	mov.w	r3, #0
 8033db0:	f04f 0400 	mov.w	r4, #0
 8033db4:	0194      	lsls	r4, r2, #6
 8033db6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8033dba:	018b      	lsls	r3, r1, #6
 8033dbc:	1a5b      	subs	r3, r3, r1
 8033dbe:	eb64 0402 	sbc.w	r4, r4, r2
 8033dc2:	f04f 0100 	mov.w	r1, #0
 8033dc6:	f04f 0200 	mov.w	r2, #0
 8033dca:	00e2      	lsls	r2, r4, #3
 8033dcc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8033dd0:	00d9      	lsls	r1, r3, #3
 8033dd2:	460b      	mov	r3, r1
 8033dd4:	4614      	mov	r4, r2
 8033dd6:	195b      	adds	r3, r3, r5
 8033dd8:	eb44 0406 	adc.w	r4, r4, r6
 8033ddc:	f04f 0100 	mov.w	r1, #0
 8033de0:	f04f 0200 	mov.w	r2, #0
 8033de4:	02a2      	lsls	r2, r4, #10
 8033de6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8033dea:	0299      	lsls	r1, r3, #10
 8033dec:	460b      	mov	r3, r1
 8033dee:	4614      	mov	r4, r2
 8033df0:	4618      	mov	r0, r3
 8033df2:	4621      	mov	r1, r4
 8033df4:	687b      	ldr	r3, [r7, #4]
 8033df6:	f04f 0400 	mov.w	r4, #0
 8033dfa:	461a      	mov	r2, r3
 8033dfc:	4623      	mov	r3, r4
 8033dfe:	f7ec ff7b 	bl	8020cf8 <__aeabi_uldivmod>
 8033e02:	4603      	mov	r3, r0
 8033e04:	460c      	mov	r4, r1
 8033e06:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8033e08:	4b0a      	ldr	r3, [pc, #40]	; (8033e34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8033e0a:	685b      	ldr	r3, [r3, #4]
 8033e0c:	0c1b      	lsrs	r3, r3, #16
 8033e0e:	f003 0303 	and.w	r3, r3, #3
 8033e12:	3301      	adds	r3, #1
 8033e14:	005b      	lsls	r3, r3, #1
 8033e16:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8033e18:	68fa      	ldr	r2, [r7, #12]
 8033e1a:	683b      	ldr	r3, [r7, #0]
 8033e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8033e20:	60bb      	str	r3, [r7, #8]
      break;
 8033e22:	e002      	b.n	8033e2a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8033e24:	4b04      	ldr	r3, [pc, #16]	; (8033e38 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8033e26:	60bb      	str	r3, [r7, #8]
      break;
 8033e28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8033e2a:	68bb      	ldr	r3, [r7, #8]
}
 8033e2c:	4618      	mov	r0, r3
 8033e2e:	3714      	adds	r7, #20
 8033e30:	46bd      	mov	sp, r7
 8033e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8033e34:	40023800 	.word	0x40023800
 8033e38:	00f42400 	.word	0x00f42400
 8033e3c:	007a1200 	.word	0x007a1200

08033e40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8033e40:	b480      	push	{r7}
 8033e42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8033e44:	4b03      	ldr	r3, [pc, #12]	; (8033e54 <HAL_RCC_GetHCLKFreq+0x14>)
 8033e46:	681b      	ldr	r3, [r3, #0]
}
 8033e48:	4618      	mov	r0, r3
 8033e4a:	46bd      	mov	sp, r7
 8033e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033e50:	4770      	bx	lr
 8033e52:	bf00      	nop
 8033e54:	20000294 	.word	0x20000294

08033e58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8033e58:	b580      	push	{r7, lr}
 8033e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8033e5c:	f7ff fff0 	bl	8033e40 <HAL_RCC_GetHCLKFreq>
 8033e60:	4601      	mov	r1, r0
 8033e62:	4b05      	ldr	r3, [pc, #20]	; (8033e78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8033e64:	689b      	ldr	r3, [r3, #8]
 8033e66:	0a9b      	lsrs	r3, r3, #10
 8033e68:	f003 0307 	and.w	r3, r3, #7
 8033e6c:	4a03      	ldr	r2, [pc, #12]	; (8033e7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8033e6e:	5cd3      	ldrb	r3, [r2, r3]
 8033e70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8033e74:	4618      	mov	r0, r3
 8033e76:	bd80      	pop	{r7, pc}
 8033e78:	40023800 	.word	0x40023800
 8033e7c:	08056344 	.word	0x08056344

08033e80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8033e80:	b580      	push	{r7, lr}
 8033e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8033e84:	f7ff ffdc 	bl	8033e40 <HAL_RCC_GetHCLKFreq>
 8033e88:	4601      	mov	r1, r0
 8033e8a:	4b05      	ldr	r3, [pc, #20]	; (8033ea0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8033e8c:	689b      	ldr	r3, [r3, #8]
 8033e8e:	0b5b      	lsrs	r3, r3, #13
 8033e90:	f003 0307 	and.w	r3, r3, #7
 8033e94:	4a03      	ldr	r2, [pc, #12]	; (8033ea4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8033e96:	5cd3      	ldrb	r3, [r2, r3]
 8033e98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8033e9c:	4618      	mov	r0, r3
 8033e9e:	bd80      	pop	{r7, pc}
 8033ea0:	40023800 	.word	0x40023800
 8033ea4:	08056344 	.word	0x08056344

08033ea8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8033ea8:	b480      	push	{r7}
 8033eaa:	b083      	sub	sp, #12
 8033eac:	af00      	add	r7, sp, #0
 8033eae:	6078      	str	r0, [r7, #4]
 8033eb0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8033eb2:	687b      	ldr	r3, [r7, #4]
 8033eb4:	220f      	movs	r2, #15
 8033eb6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8033eb8:	4b12      	ldr	r3, [pc, #72]	; (8033f04 <HAL_RCC_GetClockConfig+0x5c>)
 8033eba:	689b      	ldr	r3, [r3, #8]
 8033ebc:	f003 0203 	and.w	r2, r3, #3
 8033ec0:	687b      	ldr	r3, [r7, #4]
 8033ec2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8033ec4:	4b0f      	ldr	r3, [pc, #60]	; (8033f04 <HAL_RCC_GetClockConfig+0x5c>)
 8033ec6:	689b      	ldr	r3, [r3, #8]
 8033ec8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8033ecc:	687b      	ldr	r3, [r7, #4]
 8033ece:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8033ed0:	4b0c      	ldr	r3, [pc, #48]	; (8033f04 <HAL_RCC_GetClockConfig+0x5c>)
 8033ed2:	689b      	ldr	r3, [r3, #8]
 8033ed4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8033ed8:	687b      	ldr	r3, [r7, #4]
 8033eda:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8033edc:	4b09      	ldr	r3, [pc, #36]	; (8033f04 <HAL_RCC_GetClockConfig+0x5c>)
 8033ede:	689b      	ldr	r3, [r3, #8]
 8033ee0:	08db      	lsrs	r3, r3, #3
 8033ee2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8033ee6:	687b      	ldr	r3, [r7, #4]
 8033ee8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8033eea:	4b07      	ldr	r3, [pc, #28]	; (8033f08 <HAL_RCC_GetClockConfig+0x60>)
 8033eec:	681b      	ldr	r3, [r3, #0]
 8033eee:	f003 020f 	and.w	r2, r3, #15
 8033ef2:	683b      	ldr	r3, [r7, #0]
 8033ef4:	601a      	str	r2, [r3, #0]
}
 8033ef6:	bf00      	nop
 8033ef8:	370c      	adds	r7, #12
 8033efa:	46bd      	mov	sp, r7
 8033efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033f00:	4770      	bx	lr
 8033f02:	bf00      	nop
 8033f04:	40023800 	.word	0x40023800
 8033f08:	40023c00 	.word	0x40023c00

08033f0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8033f0c:	b580      	push	{r7, lr}
 8033f0e:	b088      	sub	sp, #32
 8033f10:	af00      	add	r7, sp, #0
 8033f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8033f14:	2300      	movs	r3, #0
 8033f16:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8033f18:	2300      	movs	r3, #0
 8033f1a:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8033f1c:	2300      	movs	r3, #0
 8033f1e:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8033f20:	2300      	movs	r3, #0
 8033f22:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8033f24:	687b      	ldr	r3, [r7, #4]
 8033f26:	681b      	ldr	r3, [r3, #0]
 8033f28:	f003 0301 	and.w	r3, r3, #1
 8033f2c:	2b00      	cmp	r3, #0
 8033f2e:	d010      	beq.n	8033f52 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8033f30:	4b7a      	ldr	r3, [pc, #488]	; (803411c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8033f32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8033f36:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8033f3a:	687b      	ldr	r3, [r7, #4]
 8033f3c:	69db      	ldr	r3, [r3, #28]
 8033f3e:	4977      	ldr	r1, [pc, #476]	; (803411c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8033f40:	4313      	orrs	r3, r2
 8033f42:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8033f46:	687b      	ldr	r3, [r7, #4]
 8033f48:	69db      	ldr	r3, [r3, #28]
 8033f4a:	2b00      	cmp	r3, #0
 8033f4c:	d101      	bne.n	8033f52 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8033f4e:	2301      	movs	r3, #1
 8033f50:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8033f52:	687b      	ldr	r3, [r7, #4]
 8033f54:	681b      	ldr	r3, [r3, #0]
 8033f56:	f003 0302 	and.w	r3, r3, #2
 8033f5a:	2b00      	cmp	r3, #0
 8033f5c:	d010      	beq.n	8033f80 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8033f5e:	4b6f      	ldr	r3, [pc, #444]	; (803411c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8033f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8033f64:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8033f68:	687b      	ldr	r3, [r7, #4]
 8033f6a:	6a1b      	ldr	r3, [r3, #32]
 8033f6c:	496b      	ldr	r1, [pc, #428]	; (803411c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8033f6e:	4313      	orrs	r3, r2
 8033f70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8033f74:	687b      	ldr	r3, [r7, #4]
 8033f76:	6a1b      	ldr	r3, [r3, #32]
 8033f78:	2b00      	cmp	r3, #0
 8033f7a:	d101      	bne.n	8033f80 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8033f7c:	2301      	movs	r3, #1
 8033f7e:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8033f80:	687b      	ldr	r3, [r7, #4]
 8033f82:	681b      	ldr	r3, [r3, #0]
 8033f84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8033f88:	2b00      	cmp	r3, #0
 8033f8a:	d022      	beq.n	8033fd2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8033f8c:	4b63      	ldr	r3, [pc, #396]	; (803411c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8033f8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8033f92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8033f96:	687b      	ldr	r3, [r7, #4]
 8033f98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8033f9a:	4960      	ldr	r1, [pc, #384]	; (803411c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8033f9c:	4313      	orrs	r3, r2
 8033f9e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8033fa2:	687b      	ldr	r3, [r7, #4]
 8033fa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8033fa6:	2b00      	cmp	r3, #0
 8033fa8:	d101      	bne.n	8033fae <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8033faa:	2301      	movs	r3, #1
 8033fac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8033fae:	687b      	ldr	r3, [r7, #4]
 8033fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8033fb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8033fb6:	d10c      	bne.n	8033fd2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8033fb8:	4b58      	ldr	r3, [pc, #352]	; (803411c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8033fba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8033fbe:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8033fc2:	687b      	ldr	r3, [r7, #4]
 8033fc4:	695b      	ldr	r3, [r3, #20]
 8033fc6:	3b01      	subs	r3, #1
 8033fc8:	021b      	lsls	r3, r3, #8
 8033fca:	4954      	ldr	r1, [pc, #336]	; (803411c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8033fcc:	4313      	orrs	r3, r2
 8033fce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8033fd2:	687b      	ldr	r3, [r7, #4]
 8033fd4:	681b      	ldr	r3, [r3, #0]
 8033fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8033fda:	2b00      	cmp	r3, #0
 8033fdc:	d022      	beq.n	8034024 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8033fde:	4b4f      	ldr	r3, [pc, #316]	; (803411c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8033fe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8033fe4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8033fe8:	687b      	ldr	r3, [r7, #4]
 8033fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8033fec:	494b      	ldr	r1, [pc, #300]	; (803411c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8033fee:	4313      	orrs	r3, r2
 8033ff0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8033ff4:	687b      	ldr	r3, [r7, #4]
 8033ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8033ff8:	2b00      	cmp	r3, #0
 8033ffa:	d101      	bne.n	8034000 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8033ffc:	2301      	movs	r3, #1
 8033ffe:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8034000:	687b      	ldr	r3, [r7, #4]
 8034002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8034004:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8034008:	d10c      	bne.n	8034024 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 803400a:	4b44      	ldr	r3, [pc, #272]	; (803411c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 803400c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8034010:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8034014:	687b      	ldr	r3, [r7, #4]
 8034016:	695b      	ldr	r3, [r3, #20]
 8034018:	3b01      	subs	r3, #1
 803401a:	021b      	lsls	r3, r3, #8
 803401c:	493f      	ldr	r1, [pc, #252]	; (803411c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 803401e:	4313      	orrs	r3, r2
 8034020:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8034024:	687b      	ldr	r3, [r7, #4]
 8034026:	681b      	ldr	r3, [r3, #0]
 8034028:	f003 0308 	and.w	r3, r3, #8
 803402c:	2b00      	cmp	r3, #0
 803402e:	f000 808a 	beq.w	8034146 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8034032:	2300      	movs	r3, #0
 8034034:	60fb      	str	r3, [r7, #12]
 8034036:	4b39      	ldr	r3, [pc, #228]	; (803411c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8034038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803403a:	4a38      	ldr	r2, [pc, #224]	; (803411c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 803403c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8034040:	6413      	str	r3, [r2, #64]	; 0x40
 8034042:	4b36      	ldr	r3, [pc, #216]	; (803411c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8034044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8034046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 803404a:	60fb      	str	r3, [r7, #12]
 803404c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 803404e:	4b34      	ldr	r3, [pc, #208]	; (8034120 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8034050:	681b      	ldr	r3, [r3, #0]
 8034052:	4a33      	ldr	r2, [pc, #204]	; (8034120 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8034054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8034058:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 803405a:	f7f8 f8f5 	bl	802c248 <HAL_GetTick>
 803405e:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8034060:	e008      	b.n	8034074 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8034062:	f7f8 f8f1 	bl	802c248 <HAL_GetTick>
 8034066:	4602      	mov	r2, r0
 8034068:	69bb      	ldr	r3, [r7, #24]
 803406a:	1ad3      	subs	r3, r2, r3
 803406c:	2b02      	cmp	r3, #2
 803406e:	d901      	bls.n	8034074 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8034070:	2303      	movs	r3, #3
 8034072:	e1d1      	b.n	8034418 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8034074:	4b2a      	ldr	r3, [pc, #168]	; (8034120 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8034076:	681b      	ldr	r3, [r3, #0]
 8034078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803407c:	2b00      	cmp	r3, #0
 803407e:	d0f0      	beq.n	8034062 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8034080:	4b26      	ldr	r3, [pc, #152]	; (803411c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8034082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8034084:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8034088:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 803408a:	697b      	ldr	r3, [r7, #20]
 803408c:	2b00      	cmp	r3, #0
 803408e:	d02f      	beq.n	80340f0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8034090:	687b      	ldr	r3, [r7, #4]
 8034092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8034094:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8034098:	697a      	ldr	r2, [r7, #20]
 803409a:	429a      	cmp	r2, r3
 803409c:	d028      	beq.n	80340f0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 803409e:	4b1f      	ldr	r3, [pc, #124]	; (803411c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80340a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80340a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80340a6:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80340a8:	4b1e      	ldr	r3, [pc, #120]	; (8034124 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80340aa:	2201      	movs	r2, #1
 80340ac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80340ae:	4b1d      	ldr	r3, [pc, #116]	; (8034124 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80340b0:	2200      	movs	r2, #0
 80340b2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80340b4:	4a19      	ldr	r2, [pc, #100]	; (803411c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80340b6:	697b      	ldr	r3, [r7, #20]
 80340b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80340ba:	4b18      	ldr	r3, [pc, #96]	; (803411c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80340bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80340be:	f003 0301 	and.w	r3, r3, #1
 80340c2:	2b01      	cmp	r3, #1
 80340c4:	d114      	bne.n	80340f0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80340c6:	f7f8 f8bf 	bl	802c248 <HAL_GetTick>
 80340ca:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80340cc:	e00a      	b.n	80340e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80340ce:	f7f8 f8bb 	bl	802c248 <HAL_GetTick>
 80340d2:	4602      	mov	r2, r0
 80340d4:	69bb      	ldr	r3, [r7, #24]
 80340d6:	1ad3      	subs	r3, r2, r3
 80340d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80340dc:	4293      	cmp	r3, r2
 80340de:	d901      	bls.n	80340e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 80340e0:	2303      	movs	r3, #3
 80340e2:	e199      	b.n	8034418 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80340e4:	4b0d      	ldr	r3, [pc, #52]	; (803411c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80340e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80340e8:	f003 0302 	and.w	r3, r3, #2
 80340ec:	2b00      	cmp	r3, #0
 80340ee:	d0ee      	beq.n	80340ce <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80340f0:	687b      	ldr	r3, [r7, #4]
 80340f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80340f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80340f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80340fc:	d114      	bne.n	8034128 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80340fe:	4b07      	ldr	r3, [pc, #28]	; (803411c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8034100:	689b      	ldr	r3, [r3, #8]
 8034102:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8034106:	687b      	ldr	r3, [r7, #4]
 8034108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803410a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 803410e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8034112:	4902      	ldr	r1, [pc, #8]	; (803411c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8034114:	4313      	orrs	r3, r2
 8034116:	608b      	str	r3, [r1, #8]
 8034118:	e00c      	b.n	8034134 <HAL_RCCEx_PeriphCLKConfig+0x228>
 803411a:	bf00      	nop
 803411c:	40023800 	.word	0x40023800
 8034120:	40007000 	.word	0x40007000
 8034124:	42470e40 	.word	0x42470e40
 8034128:	4b89      	ldr	r3, [pc, #548]	; (8034350 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 803412a:	689b      	ldr	r3, [r3, #8]
 803412c:	4a88      	ldr	r2, [pc, #544]	; (8034350 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 803412e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8034132:	6093      	str	r3, [r2, #8]
 8034134:	4b86      	ldr	r3, [pc, #536]	; (8034350 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8034136:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8034138:	687b      	ldr	r3, [r7, #4]
 803413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803413c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8034140:	4983      	ldr	r1, [pc, #524]	; (8034350 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8034142:	4313      	orrs	r3, r2
 8034144:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8034146:	687b      	ldr	r3, [r7, #4]
 8034148:	681b      	ldr	r3, [r3, #0]
 803414a:	f003 0304 	and.w	r3, r3, #4
 803414e:	2b00      	cmp	r3, #0
 8034150:	d004      	beq.n	803415c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8034152:	687b      	ldr	r3, [r7, #4]
 8034154:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8034158:	4b7e      	ldr	r3, [pc, #504]	; (8034354 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 803415a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 803415c:	687b      	ldr	r3, [r7, #4]
 803415e:	681b      	ldr	r3, [r3, #0]
 8034160:	f003 0310 	and.w	r3, r3, #16
 8034164:	2b00      	cmp	r3, #0
 8034166:	d00a      	beq.n	803417e <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8034168:	4b79      	ldr	r3, [pc, #484]	; (8034350 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 803416a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 803416e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8034172:	687b      	ldr	r3, [r7, #4]
 8034174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8034176:	4976      	ldr	r1, [pc, #472]	; (8034350 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8034178:	4313      	orrs	r3, r2
 803417a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 803417e:	687b      	ldr	r3, [r7, #4]
 8034180:	681b      	ldr	r3, [r3, #0]
 8034182:	f003 0320 	and.w	r3, r3, #32
 8034186:	2b00      	cmp	r3, #0
 8034188:	d011      	beq.n	80341ae <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 803418a:	4b71      	ldr	r3, [pc, #452]	; (8034350 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 803418c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8034190:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8034194:	687b      	ldr	r3, [r7, #4]
 8034196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8034198:	496d      	ldr	r1, [pc, #436]	; (8034350 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 803419a:	4313      	orrs	r3, r2
 803419c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 80341a0:	687b      	ldr	r3, [r7, #4]
 80341a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80341a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80341a8:	d101      	bne.n	80341ae <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 80341aa:	2301      	movs	r3, #1
 80341ac:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80341ae:	687b      	ldr	r3, [r7, #4]
 80341b0:	681b      	ldr	r3, [r3, #0]
 80341b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80341b6:	2b00      	cmp	r3, #0
 80341b8:	d00a      	beq.n	80341d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80341ba:	4b65      	ldr	r3, [pc, #404]	; (8034350 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80341bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80341c0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80341c4:	687b      	ldr	r3, [r7, #4]
 80341c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80341c8:	4961      	ldr	r1, [pc, #388]	; (8034350 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80341ca:	4313      	orrs	r3, r2
 80341cc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80341d0:	69fb      	ldr	r3, [r7, #28]
 80341d2:	2b01      	cmp	r3, #1
 80341d4:	d004      	beq.n	80341e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80341d6:	687b      	ldr	r3, [r7, #4]
 80341d8:	681b      	ldr	r3, [r3, #0]
 80341da:	2b80      	cmp	r3, #128	; 0x80
 80341dc:	f040 80c6 	bne.w	803436c <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80341e0:	4b5d      	ldr	r3, [pc, #372]	; (8034358 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80341e2:	2200      	movs	r2, #0
 80341e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80341e6:	f7f8 f82f 	bl	802c248 <HAL_GetTick>
 80341ea:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80341ec:	e008      	b.n	8034200 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80341ee:	f7f8 f82b 	bl	802c248 <HAL_GetTick>
 80341f2:	4602      	mov	r2, r0
 80341f4:	69bb      	ldr	r3, [r7, #24]
 80341f6:	1ad3      	subs	r3, r2, r3
 80341f8:	2b02      	cmp	r3, #2
 80341fa:	d901      	bls.n	8034200 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80341fc:	2303      	movs	r3, #3
 80341fe:	e10b      	b.n	8034418 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8034200:	4b53      	ldr	r3, [pc, #332]	; (8034350 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8034202:	681b      	ldr	r3, [r3, #0]
 8034204:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8034208:	2b00      	cmp	r3, #0
 803420a:	d1f0      	bne.n	80341ee <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 803420c:	4a53      	ldr	r2, [pc, #332]	; (803435c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 803420e:	687b      	ldr	r3, [r7, #4]
 8034210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8034212:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8034214:	687b      	ldr	r3, [r7, #4]
 8034216:	681b      	ldr	r3, [r3, #0]
 8034218:	f003 0301 	and.w	r3, r3, #1
 803421c:	2b00      	cmp	r3, #0
 803421e:	d003      	beq.n	8034228 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8034220:	687b      	ldr	r3, [r7, #4]
 8034222:	69db      	ldr	r3, [r3, #28]
 8034224:	2b00      	cmp	r3, #0
 8034226:	d023      	beq.n	8034270 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8034228:	687b      	ldr	r3, [r7, #4]
 803422a:	681b      	ldr	r3, [r3, #0]
 803422c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8034230:	2b00      	cmp	r3, #0
 8034232:	d003      	beq.n	803423c <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8034234:	687b      	ldr	r3, [r7, #4]
 8034236:	6a1b      	ldr	r3, [r3, #32]
 8034238:	2b00      	cmp	r3, #0
 803423a:	d019      	beq.n	8034270 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 803423c:	687b      	ldr	r3, [r7, #4]
 803423e:	681b      	ldr	r3, [r3, #0]
 8034240:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8034244:	2b00      	cmp	r3, #0
 8034246:	d004      	beq.n	8034252 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8034248:	687b      	ldr	r3, [r7, #4]
 803424a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803424c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8034250:	d00e      	beq.n	8034270 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8034252:	687b      	ldr	r3, [r7, #4]
 8034254:	681b      	ldr	r3, [r3, #0]
 8034256:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 803425a:	2b00      	cmp	r3, #0
 803425c:	d019      	beq.n	8034292 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 803425e:	687b      	ldr	r3, [r7, #4]
 8034260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8034262:	2b00      	cmp	r3, #0
 8034264:	d115      	bne.n	8034292 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8034266:	687b      	ldr	r3, [r7, #4]
 8034268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803426a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 803426e:	d110      	bne.n	8034292 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8034270:	687b      	ldr	r3, [r7, #4]
 8034272:	685a      	ldr	r2, [r3, #4]
 8034274:	687b      	ldr	r3, [r7, #4]
 8034276:	689b      	ldr	r3, [r3, #8]
 8034278:	019b      	lsls	r3, r3, #6
 803427a:	431a      	orrs	r2, r3
 803427c:	687b      	ldr	r3, [r7, #4]
 803427e:	68db      	ldr	r3, [r3, #12]
 8034280:	061b      	lsls	r3, r3, #24
 8034282:	431a      	orrs	r2, r3
 8034284:	687b      	ldr	r3, [r7, #4]
 8034286:	691b      	ldr	r3, [r3, #16]
 8034288:	071b      	lsls	r3, r3, #28
 803428a:	4931      	ldr	r1, [pc, #196]	; (8034350 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 803428c:	4313      	orrs	r3, r2
 803428e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8034292:	687b      	ldr	r3, [r7, #4]
 8034294:	681b      	ldr	r3, [r3, #0]
 8034296:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 803429a:	2b00      	cmp	r3, #0
 803429c:	d003      	beq.n	80342a6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 803429e:	687b      	ldr	r3, [r7, #4]
 80342a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80342a2:	2b00      	cmp	r3, #0
 80342a4:	d009      	beq.n	80342ba <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80342a6:	687b      	ldr	r3, [r7, #4]
 80342a8:	681b      	ldr	r3, [r3, #0]
 80342aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80342ae:	2b00      	cmp	r3, #0
 80342b0:	d026      	beq.n	8034300 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80342b2:	687b      	ldr	r3, [r7, #4]
 80342b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80342b6:	2b00      	cmp	r3, #0
 80342b8:	d122      	bne.n	8034300 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80342ba:	4b25      	ldr	r3, [pc, #148]	; (8034350 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80342bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80342c0:	0e1b      	lsrs	r3, r3, #24
 80342c2:	f003 030f 	and.w	r3, r3, #15
 80342c6:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80342c8:	687b      	ldr	r3, [r7, #4]
 80342ca:	685a      	ldr	r2, [r3, #4]
 80342cc:	687b      	ldr	r3, [r7, #4]
 80342ce:	689b      	ldr	r3, [r3, #8]
 80342d0:	019b      	lsls	r3, r3, #6
 80342d2:	431a      	orrs	r2, r3
 80342d4:	693b      	ldr	r3, [r7, #16]
 80342d6:	061b      	lsls	r3, r3, #24
 80342d8:	431a      	orrs	r2, r3
 80342da:	687b      	ldr	r3, [r7, #4]
 80342dc:	691b      	ldr	r3, [r3, #16]
 80342de:	071b      	lsls	r3, r3, #28
 80342e0:	491b      	ldr	r1, [pc, #108]	; (8034350 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80342e2:	4313      	orrs	r3, r2
 80342e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 80342e8:	4b19      	ldr	r3, [pc, #100]	; (8034350 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80342ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80342ee:	f023 021f 	bic.w	r2, r3, #31
 80342f2:	687b      	ldr	r3, [r7, #4]
 80342f4:	699b      	ldr	r3, [r3, #24]
 80342f6:	3b01      	subs	r3, #1
 80342f8:	4915      	ldr	r1, [pc, #84]	; (8034350 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80342fa:	4313      	orrs	r3, r2
 80342fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8034300:	687b      	ldr	r3, [r7, #4]
 8034302:	681b      	ldr	r3, [r3, #0]
 8034304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8034308:	2b00      	cmp	r3, #0
 803430a:	d010      	beq.n	803432e <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 803430c:	687b      	ldr	r3, [r7, #4]
 803430e:	685a      	ldr	r2, [r3, #4]
 8034310:	687b      	ldr	r3, [r7, #4]
 8034312:	689b      	ldr	r3, [r3, #8]
 8034314:	019b      	lsls	r3, r3, #6
 8034316:	431a      	orrs	r2, r3
 8034318:	687b      	ldr	r3, [r7, #4]
 803431a:	68db      	ldr	r3, [r3, #12]
 803431c:	061b      	lsls	r3, r3, #24
 803431e:	431a      	orrs	r2, r3
 8034320:	687b      	ldr	r3, [r7, #4]
 8034322:	691b      	ldr	r3, [r3, #16]
 8034324:	071b      	lsls	r3, r3, #28
 8034326:	490a      	ldr	r1, [pc, #40]	; (8034350 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8034328:	4313      	orrs	r3, r2
 803432a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 803432e:	4b0a      	ldr	r3, [pc, #40]	; (8034358 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8034330:	2201      	movs	r2, #1
 8034332:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8034334:	f7f7 ff88 	bl	802c248 <HAL_GetTick>
 8034338:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 803433a:	e011      	b.n	8034360 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 803433c:	f7f7 ff84 	bl	802c248 <HAL_GetTick>
 8034340:	4602      	mov	r2, r0
 8034342:	69bb      	ldr	r3, [r7, #24]
 8034344:	1ad3      	subs	r3, r2, r3
 8034346:	2b02      	cmp	r3, #2
 8034348:	d90a      	bls.n	8034360 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 803434a:	2303      	movs	r3, #3
 803434c:	e064      	b.n	8034418 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 803434e:	bf00      	nop
 8034350:	40023800 	.word	0x40023800
 8034354:	424711e0 	.word	0x424711e0
 8034358:	42470068 	.word	0x42470068
 803435c:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8034360:	4b2f      	ldr	r3, [pc, #188]	; (8034420 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8034362:	681b      	ldr	r3, [r3, #0]
 8034364:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8034368:	2b00      	cmp	r3, #0
 803436a:	d0e7      	beq.n	803433c <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 803436c:	687b      	ldr	r3, [r7, #4]
 803436e:	681b      	ldr	r3, [r3, #0]
 8034370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8034374:	2b00      	cmp	r3, #0
 8034376:	d00a      	beq.n	803438e <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8034378:	4b29      	ldr	r3, [pc, #164]	; (8034420 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 803437a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803437e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8034382:	687b      	ldr	r3, [r7, #4]
 8034384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8034386:	4926      	ldr	r1, [pc, #152]	; (8034420 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8034388:	4313      	orrs	r3, r2
 803438a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 803438e:	687b      	ldr	r3, [r7, #4]
 8034390:	681b      	ldr	r3, [r3, #0]
 8034392:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8034396:	2b00      	cmp	r3, #0
 8034398:	d00a      	beq.n	80343b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 803439a:	4b21      	ldr	r3, [pc, #132]	; (8034420 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 803439c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80343a0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80343a4:	687b      	ldr	r3, [r7, #4]
 80343a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80343a8:	491d      	ldr	r1, [pc, #116]	; (8034420 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80343aa:	4313      	orrs	r3, r2
 80343ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80343b0:	687b      	ldr	r3, [r7, #4]
 80343b2:	681b      	ldr	r3, [r3, #0]
 80343b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80343b8:	2b00      	cmp	r3, #0
 80343ba:	d00a      	beq.n	80343d2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80343bc:	4b18      	ldr	r3, [pc, #96]	; (8034420 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80343be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80343c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80343c6:	687b      	ldr	r3, [r7, #4]
 80343c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80343ca:	4915      	ldr	r1, [pc, #84]	; (8034420 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80343cc:	4313      	orrs	r3, r2
 80343ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 80343d2:	687b      	ldr	r3, [r7, #4]
 80343d4:	681b      	ldr	r3, [r3, #0]
 80343d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80343da:	2b00      	cmp	r3, #0
 80343dc:	d00a      	beq.n	80343f4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 80343de:	4b10      	ldr	r3, [pc, #64]	; (8034420 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80343e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80343e4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80343e8:	687b      	ldr	r3, [r7, #4]
 80343ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80343ec:	490c      	ldr	r1, [pc, #48]	; (8034420 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80343ee:	4313      	orrs	r3, r2
 80343f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80343f4:	687b      	ldr	r3, [r7, #4]
 80343f6:	681b      	ldr	r3, [r3, #0]
 80343f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80343fc:	2b00      	cmp	r3, #0
 80343fe:	d00a      	beq.n	8034416 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8034400:	4b07      	ldr	r3, [pc, #28]	; (8034420 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8034402:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8034406:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 803440a:	687b      	ldr	r3, [r7, #4]
 803440c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 803440e:	4904      	ldr	r1, [pc, #16]	; (8034420 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8034410:	4313      	orrs	r3, r2
 8034412:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8034416:	2300      	movs	r3, #0
}
 8034418:	4618      	mov	r0, r3
 803441a:	3720      	adds	r7, #32
 803441c:	46bd      	mov	sp, r7
 803441e:	bd80      	pop	{r7, pc}
 8034420:	40023800 	.word	0x40023800

08034424 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  *         will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8034424:	b480      	push	{r7}
 8034426:	b085      	sub	sp, #20
 8034428:	af00      	add	r7, sp, #0
 803442a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
#if defined(STM32F413xx) || defined(STM32F423xx)
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1     | RCC_PERIPHCLK_I2S_APB2 |\
 803442c:	687b      	ldr	r3, [r7, #4]
 803442e:	f647 727f 	movw	r2, #32639	; 0x7f7f
 8034432:	601a      	str	r2, [r3, #0]
#endif /* STM32F413xx || STM32F423xx */



  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM) >> RCC_PLLI2SCFGR_PLLI2SM_Pos);
 8034434:	4b52      	ldr	r3, [pc, #328]	; (8034580 <HAL_RCCEx_GetPeriphCLKConfig+0x15c>)
 8034436:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803443a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 803443e:	687b      	ldr	r3, [r7, #4]
 8034440:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8034442:	4b4f      	ldr	r3, [pc, #316]	; (8034580 <HAL_RCCEx_GetPeriphCLKConfig+0x15c>)
 8034444:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034448:	099b      	lsrs	r3, r3, #6
 803444a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 803444e:	687b      	ldr	r3, [r7, #4]
 8034450:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8034452:	4b4b      	ldr	r3, [pc, #300]	; (8034580 <HAL_RCCEx_GetPeriphCLKConfig+0x15c>)
 8034454:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034458:	0e1b      	lsrs	r3, r3, #24
 803445a:	f003 020f 	and.w	r2, r3, #15
 803445e:	687b      	ldr	r3, [r7, #4]
 8034460:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8034462:	4b47      	ldr	r3, [pc, #284]	; (8034580 <HAL_RCCEx_GetPeriphCLKConfig+0x15c>)
 8034464:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034468:	0f1b      	lsrs	r3, r3, #28
 803446a:	f003 0207 	and.w	r2, r3, #7
 803446e:	687b      	ldr	r3, [r7, #4]
 8034470:	611a      	str	r2, [r3, #16]
#if defined(STM32F413xx) || defined(STM32F423xx)
  /* Get the PLL/PLLI2S division factors -------------------------------------*/
  PeriphClkInit->PLLI2SDivR = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVR) >> RCC_DCKCFGR_PLLI2SDIVR_Pos);
 8034472:	4b43      	ldr	r3, [pc, #268]	; (8034580 <HAL_RCCEx_GetPeriphCLKConfig+0x15c>)
 8034474:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8034478:	f003 021f 	and.w	r2, r3, #31
 803447c:	687b      	ldr	r3, [r7, #4]
 803447e:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLDivR = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLDIVR) >> RCC_DCKCFGR_PLLDIVR_Pos);
 8034480:	4b3f      	ldr	r3, [pc, #252]	; (8034580 <HAL_RCCEx_GetPeriphCLKConfig+0x15c>)
 8034482:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8034486:	0a1b      	lsrs	r3, r3, #8
 8034488:	f003 021f 	and.w	r2, r3, #31
 803448c:	687b      	ldr	r3, [r7, #4]
 803448e:	615a      	str	r2, [r3, #20]
#endif /* STM32F413xx || STM32F423xx */

  /* Get the I2S APB1 clock configuration ------------------------------------*/
  PeriphClkInit->I2sApb1ClockSelection = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8034490:	4b3b      	ldr	r3, [pc, #236]	; (8034580 <HAL_RCCEx_GetPeriphCLKConfig+0x15c>)
 8034492:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8034496:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 803449a:	687b      	ldr	r3, [r7, #4]
 803449c:	61da      	str	r2, [r3, #28]

  /* Get the I2S APB2 clock configuration ------------------------------------*/
  PeriphClkInit->I2sApb2ClockSelection = __HAL_RCC_GET_I2S_APB2_SOURCE();
 803449e:	4b38      	ldr	r3, [pc, #224]	; (8034580 <HAL_RCCEx_GetPeriphCLKConfig+0x15c>)
 80344a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80344a4:	f003 52c0 	and.w	r2, r3, #402653184	; 0x18000000
 80344a8:	687b      	ldr	r3, [r7, #4]
 80344aa:	621a      	str	r2, [r3, #32]

  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80344ac:	4b34      	ldr	r3, [pc, #208]	; (8034580 <HAL_RCCEx_GetPeriphCLKConfig+0x15c>)
 80344ae:	689b      	ldr	r3, [r3, #8]
 80344b0:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80344b4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80344b6:	4b32      	ldr	r3, [pc, #200]	; (8034580 <HAL_RCCEx_GetPeriphCLKConfig+0x15c>)
 80344b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80344ba:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80344be:	68fb      	ldr	r3, [r7, #12]
 80344c0:	431a      	orrs	r2, r3
 80344c2:	687b      	ldr	r3, [r7, #4]
 80344c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Get the FMPI2C1 clock configuration -------------------------------------*/
  PeriphClkInit->Fmpi2c1ClockSelection = __HAL_RCC_GET_FMPI2C1_SOURCE();
 80344c6:	4b2e      	ldr	r3, [pc, #184]	; (8034580 <HAL_RCCEx_GetPeriphCLKConfig+0x15c>)
 80344c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80344cc:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80344d0:	687b      	ldr	r3, [r7, #4]
 80344d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Get the CLK48 clock configuration ---------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 80344d4:	4b2a      	ldr	r3, [pc, #168]	; (8034580 <HAL_RCCEx_GetPeriphCLKConfig+0x15c>)
 80344d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80344da:	f003 6200 	and.w	r2, r3, #134217728	; 0x8000000
 80344de:	687b      	ldr	r3, [r7, #4]
 80344e0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Get the SDIO clock configuration ----------------------------------------*/
  PeriphClkInit->SdioClockSelection = __HAL_RCC_GET_SDIO_SOURCE();
 80344e2:	4b27      	ldr	r3, [pc, #156]	; (8034580 <HAL_RCCEx_GetPeriphCLKConfig+0x15c>)
 80344e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80344e8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80344ec:	687b      	ldr	r3, [r7, #4]
 80344ee:	629a      	str	r2, [r3, #40]	; 0x28

  /* Get the DFSDM1 clock configuration --------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection = __HAL_RCC_GET_DFSDM1_SOURCE();
 80344f0:	4b23      	ldr	r3, [pc, #140]	; (8034580 <HAL_RCCEx_GetPeriphCLKConfig+0x15c>)
 80344f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80344f6:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80344fa:	687b      	ldr	r3, [r7, #4]
 80344fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Get the DFSDM1 Audio clock configuration --------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 80344fe:	4b20      	ldr	r3, [pc, #128]	; (8034580 <HAL_RCCEx_GetPeriphCLKConfig+0x15c>)
 8034500:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8034504:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8034508:	687b      	ldr	r3, [r7, #4]
 803450a:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(STM32F413xx) || defined(STM32F423xx)
  /* Get the DFSDM2 clock configuration --------------------------------------*/
  PeriphClkInit->Dfsdm2ClockSelection = __HAL_RCC_GET_DFSDM2_SOURCE();
 803450c:	4b1c      	ldr	r3, [pc, #112]	; (8034580 <HAL_RCCEx_GetPeriphCLKConfig+0x15c>)
 803450e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8034512:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8034516:	687b      	ldr	r3, [r7, #4]
 8034518:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the DFSDM2 Audio clock configuration --------------------------------*/
  PeriphClkInit->Dfsdm2AudioClockSelection = __HAL_RCC_GET_DFSDM2AUDIO_SOURCE();
 803451a:	4b19      	ldr	r3, [pc, #100]	; (8034580 <HAL_RCCEx_GetPeriphCLKConfig+0x15c>)
 803451c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8034520:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8034524:	687b      	ldr	r3, [r7, #4]
 8034526:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get the LPTIM1 clock configuration --------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 8034528:	4b15      	ldr	r3, [pc, #84]	; (8034580 <HAL_RCCEx_GetPeriphCLKConfig+0x15c>)
 803452a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 803452e:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
 8034532:	687b      	ldr	r3, [r7, #4]
 8034534:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get the SAI1 Block Aclock configuration ---------------------------------*/
  PeriphClkInit->SaiAClockSelection = __HAL_RCC_GET_SAI_BLOCKA_SOURCE();
 8034536:	4b12      	ldr	r3, [pc, #72]	; (8034580 <HAL_RCCEx_GetPeriphCLKConfig+0x15c>)
 8034538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803453c:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8034540:	687b      	ldr	r3, [r7, #4]
 8034542:	649a      	str	r2, [r3, #72]	; 0x48

  /* Get the SAI1 Block B clock configuration --------------------------------*/
  PeriphClkInit->SaiBClockSelection = __HAL_RCC_GET_SAI_BLOCKB_SOURCE();
 8034544:	4b0e      	ldr	r3, [pc, #56]	; (8034580 <HAL_RCCEx_GetPeriphCLKConfig+0x15c>)
 8034546:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803454a:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 803454e:	687b      	ldr	r3, [r7, #4]
 8034550:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* STM32F413xx || STM32F423xx */

  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 8034552:	4b0b      	ldr	r3, [pc, #44]	; (8034580 <HAL_RCCEx_GetPeriphCLKConfig+0x15c>)
 8034554:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8034558:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 803455c:	2b00      	cmp	r3, #0
 803455e:	d104      	bne.n	803456a <HAL_RCCEx_GetPeriphCLKConfig+0x146>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 8034560:	687b      	ldr	r3, [r7, #4]
 8034562:	2200      	movs	r2, #0
 8034564:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 8034568:	e003      	b.n	8034572 <HAL_RCCEx_GetPeriphCLKConfig+0x14e>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 803456a:	687b      	ldr	r3, [r7, #4]
 803456c:	2201      	movs	r2, #1
 803456e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
}
 8034572:	bf00      	nop
 8034574:	3714      	adds	r7, #20
 8034576:	46bd      	mov	sp, r7
 8034578:	f85d 7b04 	ldr.w	r7, [sp], #4
 803457c:	4770      	bx	lr
 803457e:	bf00      	nop
 8034580:	40023800 	.word	0x40023800

08034584 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8034584:	b480      	push	{r7}
 8034586:	b087      	sub	sp, #28
 8034588:	af00      	add	r7, sp, #0
 803458a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 803458c:	2300      	movs	r3, #0
 803458e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8034590:	2300      	movs	r3, #0
 8034592:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8034594:	2300      	movs	r3, #0
 8034596:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8034598:	2300      	movs	r3, #0
 803459a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 803459c:	687b      	ldr	r3, [r7, #4]
 803459e:	2b01      	cmp	r3, #1
 80345a0:	d003      	beq.n	80345aa <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 80345a2:	2b02      	cmp	r3, #2
 80345a4:	f000 8098 	beq.w	80346d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80345a8:	e12d      	b.n	8034806 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 80345aa:	4b9a      	ldr	r3, [pc, #616]	; (8034814 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80345ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80345b0:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80345b4:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80345b6:	68fb      	ldr	r3, [r7, #12]
 80345b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80345bc:	d00c      	beq.n	80345d8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 80345be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80345c2:	d802      	bhi.n	80345ca <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80345c4:	2b00      	cmp	r3, #0
 80345c6:	d00a      	beq.n	80345de <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80345c8:	e082      	b.n	80346d0 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80345ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80345ce:	d047      	beq.n	8034660 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80345d0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80345d4:	d06f      	beq.n	80346b6 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
 80345d6:	e07b      	b.n	80346d0 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80345d8:	4b8f      	ldr	r3, [pc, #572]	; (8034818 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80345da:	617b      	str	r3, [r7, #20]
          break;
 80345dc:	e07b      	b.n	80346d6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 80345de:	4b8d      	ldr	r3, [pc, #564]	; (8034814 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80345e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80345e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80345e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80345ec:	d109      	bne.n	8034602 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80345ee:	4b89      	ldr	r3, [pc, #548]	; (8034814 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80345f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80345f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80345f8:	4a87      	ldr	r2, [pc, #540]	; (8034818 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80345fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80345fe:	613b      	str	r3, [r7, #16]
 8034600:	e019      	b.n	8034636 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8034602:	4b84      	ldr	r3, [pc, #528]	; (8034814 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8034604:	685b      	ldr	r3, [r3, #4]
 8034606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 803460a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 803460e:	d109      	bne.n	8034624 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8034610:	4b80      	ldr	r3, [pc, #512]	; (8034814 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8034612:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034616:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 803461a:	4a80      	ldr	r2, [pc, #512]	; (803481c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 803461c:	fbb2 f3f3 	udiv	r3, r2, r3
 8034620:	613b      	str	r3, [r7, #16]
 8034622:	e008      	b.n	8034636 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8034624:	4b7b      	ldr	r3, [pc, #492]	; (8034814 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8034626:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803462a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 803462e:	4a7c      	ldr	r2, [pc, #496]	; (8034820 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8034630:	fbb2 f3f3 	udiv	r3, r2, r3
 8034634:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8034636:	4b77      	ldr	r3, [pc, #476]	; (8034814 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8034638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803463c:	099b      	lsrs	r3, r3, #6
 803463e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8034642:	693b      	ldr	r3, [r7, #16]
 8034644:	fb02 f303 	mul.w	r3, r2, r3
 8034648:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 803464a:	4b72      	ldr	r3, [pc, #456]	; (8034814 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 803464c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034650:	0f1b      	lsrs	r3, r3, #28
 8034652:	f003 0307 	and.w	r3, r3, #7
 8034656:	68ba      	ldr	r2, [r7, #8]
 8034658:	fbb2 f3f3 	udiv	r3, r2, r3
 803465c:	617b      	str	r3, [r7, #20]
          break;
 803465e:	e03a      	b.n	80346d6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8034660:	4b6c      	ldr	r3, [pc, #432]	; (8034814 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8034662:	685b      	ldr	r3, [r3, #4]
 8034664:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8034668:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 803466c:	d108      	bne.n	8034680 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 803466e:	4b69      	ldr	r3, [pc, #420]	; (8034814 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8034670:	685b      	ldr	r3, [r3, #4]
 8034672:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8034676:	4a69      	ldr	r2, [pc, #420]	; (803481c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8034678:	fbb2 f3f3 	udiv	r3, r2, r3
 803467c:	613b      	str	r3, [r7, #16]
 803467e:	e007      	b.n	8034690 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8034680:	4b64      	ldr	r3, [pc, #400]	; (8034814 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8034682:	685b      	ldr	r3, [r3, #4]
 8034684:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8034688:	4a65      	ldr	r2, [pc, #404]	; (8034820 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 803468a:	fbb2 f3f3 	udiv	r3, r2, r3
 803468e:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8034690:	4b60      	ldr	r3, [pc, #384]	; (8034814 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8034692:	685b      	ldr	r3, [r3, #4]
 8034694:	099b      	lsrs	r3, r3, #6
 8034696:	f3c3 0208 	ubfx	r2, r3, #0, #9
 803469a:	693b      	ldr	r3, [r7, #16]
 803469c:	fb02 f303 	mul.w	r3, r2, r3
 80346a0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80346a2:	4b5c      	ldr	r3, [pc, #368]	; (8034814 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80346a4:	685b      	ldr	r3, [r3, #4]
 80346a6:	0f1b      	lsrs	r3, r3, #28
 80346a8:	f003 0307 	and.w	r3, r3, #7
 80346ac:	68ba      	ldr	r2, [r7, #8]
 80346ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80346b2:	617b      	str	r3, [r7, #20]
          break;
 80346b4:	e00f      	b.n	80346d6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80346b6:	4b57      	ldr	r3, [pc, #348]	; (8034814 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80346b8:	685b      	ldr	r3, [r3, #4]
 80346ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80346be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80346c2:	d102      	bne.n	80346ca <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          {
            frequency = HSE_VALUE;
 80346c4:	4b55      	ldr	r3, [pc, #340]	; (803481c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80346c6:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80346c8:	e005      	b.n	80346d6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
            frequency = HSI_VALUE;
 80346ca:	4b55      	ldr	r3, [pc, #340]	; (8034820 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80346cc:	617b      	str	r3, [r7, #20]
          break;
 80346ce:	e002      	b.n	80346d6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80346d0:	2300      	movs	r3, #0
 80346d2:	617b      	str	r3, [r7, #20]
          break;
 80346d4:	bf00      	nop
        }
      }
      break;
 80346d6:	e096      	b.n	8034806 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 80346d8:	4b4e      	ldr	r3, [pc, #312]	; (8034814 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80346da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80346de:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 80346e2:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80346e4:	68fb      	ldr	r3, [r7, #12]
 80346e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80346ea:	d00c      	beq.n	8034706 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 80346ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80346f0:	d802      	bhi.n	80346f8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 80346f2:	2b00      	cmp	r3, #0
 80346f4:	d00a      	beq.n	803470c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80346f6:	e082      	b.n	80347fe <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80346f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80346fc:	d047      	beq.n	803478e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 80346fe:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8034702:	d06f      	beq.n	80347e4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8034704:	e07b      	b.n	80347fe <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8034706:	4b44      	ldr	r3, [pc, #272]	; (8034818 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8034708:	617b      	str	r3, [r7, #20]
          break;
 803470a:	e07b      	b.n	8034804 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 803470c:	4b41      	ldr	r3, [pc, #260]	; (8034814 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 803470e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8034716:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 803471a:	d109      	bne.n	8034730 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 803471c:	4b3d      	ldr	r3, [pc, #244]	; (8034814 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 803471e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034722:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8034726:	4a3c      	ldr	r2, [pc, #240]	; (8034818 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8034728:	fbb2 f3f3 	udiv	r3, r2, r3
 803472c:	613b      	str	r3, [r7, #16]
 803472e:	e019      	b.n	8034764 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8034730:	4b38      	ldr	r3, [pc, #224]	; (8034814 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8034732:	685b      	ldr	r3, [r3, #4]
 8034734:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8034738:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 803473c:	d109      	bne.n	8034752 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 803473e:	4b35      	ldr	r3, [pc, #212]	; (8034814 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8034740:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034744:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8034748:	4a34      	ldr	r2, [pc, #208]	; (803481c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 803474a:	fbb2 f3f3 	udiv	r3, r2, r3
 803474e:	613b      	str	r3, [r7, #16]
 8034750:	e008      	b.n	8034764 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8034752:	4b30      	ldr	r3, [pc, #192]	; (8034814 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8034754:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034758:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 803475c:	4a30      	ldr	r2, [pc, #192]	; (8034820 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 803475e:	fbb2 f3f3 	udiv	r3, r2, r3
 8034762:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8034764:	4b2b      	ldr	r3, [pc, #172]	; (8034814 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8034766:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803476a:	099b      	lsrs	r3, r3, #6
 803476c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8034770:	693b      	ldr	r3, [r7, #16]
 8034772:	fb02 f303 	mul.w	r3, r2, r3
 8034776:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8034778:	4b26      	ldr	r3, [pc, #152]	; (8034814 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 803477a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803477e:	0f1b      	lsrs	r3, r3, #28
 8034780:	f003 0307 	and.w	r3, r3, #7
 8034784:	68ba      	ldr	r2, [r7, #8]
 8034786:	fbb2 f3f3 	udiv	r3, r2, r3
 803478a:	617b      	str	r3, [r7, #20]
          break;
 803478c:	e03a      	b.n	8034804 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 803478e:	4b21      	ldr	r3, [pc, #132]	; (8034814 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8034790:	685b      	ldr	r3, [r3, #4]
 8034792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8034796:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 803479a:	d108      	bne.n	80347ae <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 803479c:	4b1d      	ldr	r3, [pc, #116]	; (8034814 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 803479e:	685b      	ldr	r3, [r3, #4]
 80347a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80347a4:	4a1d      	ldr	r2, [pc, #116]	; (803481c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80347a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80347aa:	613b      	str	r3, [r7, #16]
 80347ac:	e007      	b.n	80347be <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80347ae:	4b19      	ldr	r3, [pc, #100]	; (8034814 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80347b0:	685b      	ldr	r3, [r3, #4]
 80347b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80347b6:	4a1a      	ldr	r2, [pc, #104]	; (8034820 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80347b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80347bc:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80347be:	4b15      	ldr	r3, [pc, #84]	; (8034814 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80347c0:	685b      	ldr	r3, [r3, #4]
 80347c2:	099b      	lsrs	r3, r3, #6
 80347c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80347c8:	693b      	ldr	r3, [r7, #16]
 80347ca:	fb02 f303 	mul.w	r3, r2, r3
 80347ce:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80347d0:	4b10      	ldr	r3, [pc, #64]	; (8034814 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80347d2:	685b      	ldr	r3, [r3, #4]
 80347d4:	0f1b      	lsrs	r3, r3, #28
 80347d6:	f003 0307 	and.w	r3, r3, #7
 80347da:	68ba      	ldr	r2, [r7, #8]
 80347dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80347e0:	617b      	str	r3, [r7, #20]
          break;
 80347e2:	e00f      	b.n	8034804 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80347e4:	4b0b      	ldr	r3, [pc, #44]	; (8034814 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80347e6:	685b      	ldr	r3, [r3, #4]
 80347e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80347ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80347f0:	d102      	bne.n	80347f8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          {
            frequency = HSE_VALUE;
 80347f2:	4b0a      	ldr	r3, [pc, #40]	; (803481c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80347f4:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80347f6:	e005      	b.n	8034804 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
            frequency = HSI_VALUE;
 80347f8:	4b09      	ldr	r3, [pc, #36]	; (8034820 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80347fa:	617b      	str	r3, [r7, #20]
          break;
 80347fc:	e002      	b.n	8034804 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80347fe:	2300      	movs	r3, #0
 8034800:	617b      	str	r3, [r7, #20]
          break;
 8034802:	bf00      	nop
        }
      }
      break;
 8034804:	bf00      	nop
    }
  }
  return frequency;
 8034806:	697b      	ldr	r3, [r7, #20]
}
 8034808:	4618      	mov	r0, r3
 803480a:	371c      	adds	r7, #28
 803480c:	46bd      	mov	sp, r7
 803480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034812:	4770      	bx	lr
 8034814:	40023800 	.word	0x40023800
 8034818:	00bb8000 	.word	0x00bb8000
 803481c:	007a1200 	.word	0x007a1200
 8034820:	00f42400 	.word	0x00f42400

08034824 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8034824:	b580      	push	{r7, lr}
 8034826:	b086      	sub	sp, #24
 8034828:	af00      	add	r7, sp, #0
 803482a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 803482c:	2300      	movs	r3, #0
 803482e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8034830:	687b      	ldr	r3, [r7, #4]
 8034832:	681b      	ldr	r3, [r3, #0]
 8034834:	f003 0301 	and.w	r3, r3, #1
 8034838:	2b00      	cmp	r3, #0
 803483a:	d075      	beq.n	8034928 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 803483c:	4ba2      	ldr	r3, [pc, #648]	; (8034ac8 <HAL_RCC_OscConfig+0x2a4>)
 803483e:	689b      	ldr	r3, [r3, #8]
 8034840:	f003 030c 	and.w	r3, r3, #12
 8034844:	2b04      	cmp	r3, #4
 8034846:	d00c      	beq.n	8034862 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8034848:	4b9f      	ldr	r3, [pc, #636]	; (8034ac8 <HAL_RCC_OscConfig+0x2a4>)
 803484a:	689b      	ldr	r3, [r3, #8]
 803484c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8034850:	2b08      	cmp	r3, #8
 8034852:	d112      	bne.n	803487a <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8034854:	4b9c      	ldr	r3, [pc, #624]	; (8034ac8 <HAL_RCC_OscConfig+0x2a4>)
 8034856:	685b      	ldr	r3, [r3, #4]
 8034858:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 803485c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8034860:	d10b      	bne.n	803487a <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8034862:	4b99      	ldr	r3, [pc, #612]	; (8034ac8 <HAL_RCC_OscConfig+0x2a4>)
 8034864:	681b      	ldr	r3, [r3, #0]
 8034866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 803486a:	2b00      	cmp	r3, #0
 803486c:	d05b      	beq.n	8034926 <HAL_RCC_OscConfig+0x102>
 803486e:	687b      	ldr	r3, [r7, #4]
 8034870:	685b      	ldr	r3, [r3, #4]
 8034872:	2b00      	cmp	r3, #0
 8034874:	d157      	bne.n	8034926 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8034876:	2301      	movs	r3, #1
 8034878:	e20b      	b.n	8034c92 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 803487a:	687b      	ldr	r3, [r7, #4]
 803487c:	685b      	ldr	r3, [r3, #4]
 803487e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8034882:	d106      	bne.n	8034892 <HAL_RCC_OscConfig+0x6e>
 8034884:	4b90      	ldr	r3, [pc, #576]	; (8034ac8 <HAL_RCC_OscConfig+0x2a4>)
 8034886:	681b      	ldr	r3, [r3, #0]
 8034888:	4a8f      	ldr	r2, [pc, #572]	; (8034ac8 <HAL_RCC_OscConfig+0x2a4>)
 803488a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 803488e:	6013      	str	r3, [r2, #0]
 8034890:	e01d      	b.n	80348ce <HAL_RCC_OscConfig+0xaa>
 8034892:	687b      	ldr	r3, [r7, #4]
 8034894:	685b      	ldr	r3, [r3, #4]
 8034896:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 803489a:	d10c      	bne.n	80348b6 <HAL_RCC_OscConfig+0x92>
 803489c:	4b8a      	ldr	r3, [pc, #552]	; (8034ac8 <HAL_RCC_OscConfig+0x2a4>)
 803489e:	681b      	ldr	r3, [r3, #0]
 80348a0:	4a89      	ldr	r2, [pc, #548]	; (8034ac8 <HAL_RCC_OscConfig+0x2a4>)
 80348a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80348a6:	6013      	str	r3, [r2, #0]
 80348a8:	4b87      	ldr	r3, [pc, #540]	; (8034ac8 <HAL_RCC_OscConfig+0x2a4>)
 80348aa:	681b      	ldr	r3, [r3, #0]
 80348ac:	4a86      	ldr	r2, [pc, #536]	; (8034ac8 <HAL_RCC_OscConfig+0x2a4>)
 80348ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80348b2:	6013      	str	r3, [r2, #0]
 80348b4:	e00b      	b.n	80348ce <HAL_RCC_OscConfig+0xaa>
 80348b6:	4b84      	ldr	r3, [pc, #528]	; (8034ac8 <HAL_RCC_OscConfig+0x2a4>)
 80348b8:	681b      	ldr	r3, [r3, #0]
 80348ba:	4a83      	ldr	r2, [pc, #524]	; (8034ac8 <HAL_RCC_OscConfig+0x2a4>)
 80348bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80348c0:	6013      	str	r3, [r2, #0]
 80348c2:	4b81      	ldr	r3, [pc, #516]	; (8034ac8 <HAL_RCC_OscConfig+0x2a4>)
 80348c4:	681b      	ldr	r3, [r3, #0]
 80348c6:	4a80      	ldr	r2, [pc, #512]	; (8034ac8 <HAL_RCC_OscConfig+0x2a4>)
 80348c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80348cc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80348ce:	687b      	ldr	r3, [r7, #4]
 80348d0:	685b      	ldr	r3, [r3, #4]
 80348d2:	2b00      	cmp	r3, #0
 80348d4:	d013      	beq.n	80348fe <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80348d6:	f7f7 fcb7 	bl	802c248 <HAL_GetTick>
 80348da:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80348dc:	e008      	b.n	80348f0 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80348de:	f7f7 fcb3 	bl	802c248 <HAL_GetTick>
 80348e2:	4602      	mov	r2, r0
 80348e4:	693b      	ldr	r3, [r7, #16]
 80348e6:	1ad3      	subs	r3, r2, r3
 80348e8:	2b64      	cmp	r3, #100	; 0x64
 80348ea:	d901      	bls.n	80348f0 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 80348ec:	2303      	movs	r3, #3
 80348ee:	e1d0      	b.n	8034c92 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80348f0:	4b75      	ldr	r3, [pc, #468]	; (8034ac8 <HAL_RCC_OscConfig+0x2a4>)
 80348f2:	681b      	ldr	r3, [r3, #0]
 80348f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80348f8:	2b00      	cmp	r3, #0
 80348fa:	d0f0      	beq.n	80348de <HAL_RCC_OscConfig+0xba>
 80348fc:	e014      	b.n	8034928 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80348fe:	f7f7 fca3 	bl	802c248 <HAL_GetTick>
 8034902:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8034904:	e008      	b.n	8034918 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8034906:	f7f7 fc9f 	bl	802c248 <HAL_GetTick>
 803490a:	4602      	mov	r2, r0
 803490c:	693b      	ldr	r3, [r7, #16]
 803490e:	1ad3      	subs	r3, r2, r3
 8034910:	2b64      	cmp	r3, #100	; 0x64
 8034912:	d901      	bls.n	8034918 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8034914:	2303      	movs	r3, #3
 8034916:	e1bc      	b.n	8034c92 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8034918:	4b6b      	ldr	r3, [pc, #428]	; (8034ac8 <HAL_RCC_OscConfig+0x2a4>)
 803491a:	681b      	ldr	r3, [r3, #0]
 803491c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8034920:	2b00      	cmp	r3, #0
 8034922:	d1f0      	bne.n	8034906 <HAL_RCC_OscConfig+0xe2>
 8034924:	e000      	b.n	8034928 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8034926:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8034928:	687b      	ldr	r3, [r7, #4]
 803492a:	681b      	ldr	r3, [r3, #0]
 803492c:	f003 0302 	and.w	r3, r3, #2
 8034930:	2b00      	cmp	r3, #0
 8034932:	d063      	beq.n	80349fc <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8034934:	4b64      	ldr	r3, [pc, #400]	; (8034ac8 <HAL_RCC_OscConfig+0x2a4>)
 8034936:	689b      	ldr	r3, [r3, #8]
 8034938:	f003 030c 	and.w	r3, r3, #12
 803493c:	2b00      	cmp	r3, #0
 803493e:	d00b      	beq.n	8034958 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8034940:	4b61      	ldr	r3, [pc, #388]	; (8034ac8 <HAL_RCC_OscConfig+0x2a4>)
 8034942:	689b      	ldr	r3, [r3, #8]
 8034944:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8034948:	2b08      	cmp	r3, #8
 803494a:	d11c      	bne.n	8034986 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 803494c:	4b5e      	ldr	r3, [pc, #376]	; (8034ac8 <HAL_RCC_OscConfig+0x2a4>)
 803494e:	685b      	ldr	r3, [r3, #4]
 8034950:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8034954:	2b00      	cmp	r3, #0
 8034956:	d116      	bne.n	8034986 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8034958:	4b5b      	ldr	r3, [pc, #364]	; (8034ac8 <HAL_RCC_OscConfig+0x2a4>)
 803495a:	681b      	ldr	r3, [r3, #0]
 803495c:	f003 0302 	and.w	r3, r3, #2
 8034960:	2b00      	cmp	r3, #0
 8034962:	d005      	beq.n	8034970 <HAL_RCC_OscConfig+0x14c>
 8034964:	687b      	ldr	r3, [r7, #4]
 8034966:	68db      	ldr	r3, [r3, #12]
 8034968:	2b01      	cmp	r3, #1
 803496a:	d001      	beq.n	8034970 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 803496c:	2301      	movs	r3, #1
 803496e:	e190      	b.n	8034c92 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8034970:	4b55      	ldr	r3, [pc, #340]	; (8034ac8 <HAL_RCC_OscConfig+0x2a4>)
 8034972:	681b      	ldr	r3, [r3, #0]
 8034974:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8034978:	687b      	ldr	r3, [r7, #4]
 803497a:	691b      	ldr	r3, [r3, #16]
 803497c:	00db      	lsls	r3, r3, #3
 803497e:	4952      	ldr	r1, [pc, #328]	; (8034ac8 <HAL_RCC_OscConfig+0x2a4>)
 8034980:	4313      	orrs	r3, r2
 8034982:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8034984:	e03a      	b.n	80349fc <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8034986:	687b      	ldr	r3, [r7, #4]
 8034988:	68db      	ldr	r3, [r3, #12]
 803498a:	2b00      	cmp	r3, #0
 803498c:	d020      	beq.n	80349d0 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 803498e:	4b4f      	ldr	r3, [pc, #316]	; (8034acc <HAL_RCC_OscConfig+0x2a8>)
 8034990:	2201      	movs	r2, #1
 8034992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8034994:	f7f7 fc58 	bl	802c248 <HAL_GetTick>
 8034998:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 803499a:	e008      	b.n	80349ae <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 803499c:	f7f7 fc54 	bl	802c248 <HAL_GetTick>
 80349a0:	4602      	mov	r2, r0
 80349a2:	693b      	ldr	r3, [r7, #16]
 80349a4:	1ad3      	subs	r3, r2, r3
 80349a6:	2b02      	cmp	r3, #2
 80349a8:	d901      	bls.n	80349ae <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80349aa:	2303      	movs	r3, #3
 80349ac:	e171      	b.n	8034c92 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80349ae:	4b46      	ldr	r3, [pc, #280]	; (8034ac8 <HAL_RCC_OscConfig+0x2a4>)
 80349b0:	681b      	ldr	r3, [r3, #0]
 80349b2:	f003 0302 	and.w	r3, r3, #2
 80349b6:	2b00      	cmp	r3, #0
 80349b8:	d0f0      	beq.n	803499c <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80349ba:	4b43      	ldr	r3, [pc, #268]	; (8034ac8 <HAL_RCC_OscConfig+0x2a4>)
 80349bc:	681b      	ldr	r3, [r3, #0]
 80349be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80349c2:	687b      	ldr	r3, [r7, #4]
 80349c4:	691b      	ldr	r3, [r3, #16]
 80349c6:	00db      	lsls	r3, r3, #3
 80349c8:	493f      	ldr	r1, [pc, #252]	; (8034ac8 <HAL_RCC_OscConfig+0x2a4>)
 80349ca:	4313      	orrs	r3, r2
 80349cc:	600b      	str	r3, [r1, #0]
 80349ce:	e015      	b.n	80349fc <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80349d0:	4b3e      	ldr	r3, [pc, #248]	; (8034acc <HAL_RCC_OscConfig+0x2a8>)
 80349d2:	2200      	movs	r2, #0
 80349d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80349d6:	f7f7 fc37 	bl	802c248 <HAL_GetTick>
 80349da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80349dc:	e008      	b.n	80349f0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80349de:	f7f7 fc33 	bl	802c248 <HAL_GetTick>
 80349e2:	4602      	mov	r2, r0
 80349e4:	693b      	ldr	r3, [r7, #16]
 80349e6:	1ad3      	subs	r3, r2, r3
 80349e8:	2b02      	cmp	r3, #2
 80349ea:	d901      	bls.n	80349f0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80349ec:	2303      	movs	r3, #3
 80349ee:	e150      	b.n	8034c92 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80349f0:	4b35      	ldr	r3, [pc, #212]	; (8034ac8 <HAL_RCC_OscConfig+0x2a4>)
 80349f2:	681b      	ldr	r3, [r3, #0]
 80349f4:	f003 0302 	and.w	r3, r3, #2
 80349f8:	2b00      	cmp	r3, #0
 80349fa:	d1f0      	bne.n	80349de <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80349fc:	687b      	ldr	r3, [r7, #4]
 80349fe:	681b      	ldr	r3, [r3, #0]
 8034a00:	f003 0308 	and.w	r3, r3, #8
 8034a04:	2b00      	cmp	r3, #0
 8034a06:	d030      	beq.n	8034a6a <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8034a08:	687b      	ldr	r3, [r7, #4]
 8034a0a:	695b      	ldr	r3, [r3, #20]
 8034a0c:	2b00      	cmp	r3, #0
 8034a0e:	d016      	beq.n	8034a3e <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8034a10:	4b2f      	ldr	r3, [pc, #188]	; (8034ad0 <HAL_RCC_OscConfig+0x2ac>)
 8034a12:	2201      	movs	r2, #1
 8034a14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8034a16:	f7f7 fc17 	bl	802c248 <HAL_GetTick>
 8034a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8034a1c:	e008      	b.n	8034a30 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8034a1e:	f7f7 fc13 	bl	802c248 <HAL_GetTick>
 8034a22:	4602      	mov	r2, r0
 8034a24:	693b      	ldr	r3, [r7, #16]
 8034a26:	1ad3      	subs	r3, r2, r3
 8034a28:	2b02      	cmp	r3, #2
 8034a2a:	d901      	bls.n	8034a30 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8034a2c:	2303      	movs	r3, #3
 8034a2e:	e130      	b.n	8034c92 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8034a30:	4b25      	ldr	r3, [pc, #148]	; (8034ac8 <HAL_RCC_OscConfig+0x2a4>)
 8034a32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8034a34:	f003 0302 	and.w	r3, r3, #2
 8034a38:	2b00      	cmp	r3, #0
 8034a3a:	d0f0      	beq.n	8034a1e <HAL_RCC_OscConfig+0x1fa>
 8034a3c:	e015      	b.n	8034a6a <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8034a3e:	4b24      	ldr	r3, [pc, #144]	; (8034ad0 <HAL_RCC_OscConfig+0x2ac>)
 8034a40:	2200      	movs	r2, #0
 8034a42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8034a44:	f7f7 fc00 	bl	802c248 <HAL_GetTick>
 8034a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8034a4a:	e008      	b.n	8034a5e <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8034a4c:	f7f7 fbfc 	bl	802c248 <HAL_GetTick>
 8034a50:	4602      	mov	r2, r0
 8034a52:	693b      	ldr	r3, [r7, #16]
 8034a54:	1ad3      	subs	r3, r2, r3
 8034a56:	2b02      	cmp	r3, #2
 8034a58:	d901      	bls.n	8034a5e <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8034a5a:	2303      	movs	r3, #3
 8034a5c:	e119      	b.n	8034c92 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8034a5e:	4b1a      	ldr	r3, [pc, #104]	; (8034ac8 <HAL_RCC_OscConfig+0x2a4>)
 8034a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8034a62:	f003 0302 	and.w	r3, r3, #2
 8034a66:	2b00      	cmp	r3, #0
 8034a68:	d1f0      	bne.n	8034a4c <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8034a6a:	687b      	ldr	r3, [r7, #4]
 8034a6c:	681b      	ldr	r3, [r3, #0]
 8034a6e:	f003 0304 	and.w	r3, r3, #4
 8034a72:	2b00      	cmp	r3, #0
 8034a74:	f000 809f 	beq.w	8034bb6 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8034a78:	2300      	movs	r3, #0
 8034a7a:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8034a7c:	4b12      	ldr	r3, [pc, #72]	; (8034ac8 <HAL_RCC_OscConfig+0x2a4>)
 8034a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8034a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8034a84:	2b00      	cmp	r3, #0
 8034a86:	d10f      	bne.n	8034aa8 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8034a88:	2300      	movs	r3, #0
 8034a8a:	60fb      	str	r3, [r7, #12]
 8034a8c:	4b0e      	ldr	r3, [pc, #56]	; (8034ac8 <HAL_RCC_OscConfig+0x2a4>)
 8034a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8034a90:	4a0d      	ldr	r2, [pc, #52]	; (8034ac8 <HAL_RCC_OscConfig+0x2a4>)
 8034a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8034a96:	6413      	str	r3, [r2, #64]	; 0x40
 8034a98:	4b0b      	ldr	r3, [pc, #44]	; (8034ac8 <HAL_RCC_OscConfig+0x2a4>)
 8034a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8034a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8034aa0:	60fb      	str	r3, [r7, #12]
 8034aa2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8034aa4:	2301      	movs	r3, #1
 8034aa6:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8034aa8:	4b0a      	ldr	r3, [pc, #40]	; (8034ad4 <HAL_RCC_OscConfig+0x2b0>)
 8034aaa:	681b      	ldr	r3, [r3, #0]
 8034aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8034ab0:	2b00      	cmp	r3, #0
 8034ab2:	d120      	bne.n	8034af6 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8034ab4:	4b07      	ldr	r3, [pc, #28]	; (8034ad4 <HAL_RCC_OscConfig+0x2b0>)
 8034ab6:	681b      	ldr	r3, [r3, #0]
 8034ab8:	4a06      	ldr	r2, [pc, #24]	; (8034ad4 <HAL_RCC_OscConfig+0x2b0>)
 8034aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8034abe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8034ac0:	f7f7 fbc2 	bl	802c248 <HAL_GetTick>
 8034ac4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8034ac6:	e010      	b.n	8034aea <HAL_RCC_OscConfig+0x2c6>
 8034ac8:	40023800 	.word	0x40023800
 8034acc:	42470000 	.word	0x42470000
 8034ad0:	42470e80 	.word	0x42470e80
 8034ad4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8034ad8:	f7f7 fbb6 	bl	802c248 <HAL_GetTick>
 8034adc:	4602      	mov	r2, r0
 8034ade:	693b      	ldr	r3, [r7, #16]
 8034ae0:	1ad3      	subs	r3, r2, r3
 8034ae2:	2b02      	cmp	r3, #2
 8034ae4:	d901      	bls.n	8034aea <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8034ae6:	2303      	movs	r3, #3
 8034ae8:	e0d3      	b.n	8034c92 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8034aea:	4b6c      	ldr	r3, [pc, #432]	; (8034c9c <HAL_RCC_OscConfig+0x478>)
 8034aec:	681b      	ldr	r3, [r3, #0]
 8034aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8034af2:	2b00      	cmp	r3, #0
 8034af4:	d0f0      	beq.n	8034ad8 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8034af6:	687b      	ldr	r3, [r7, #4]
 8034af8:	689b      	ldr	r3, [r3, #8]
 8034afa:	2b01      	cmp	r3, #1
 8034afc:	d106      	bne.n	8034b0c <HAL_RCC_OscConfig+0x2e8>
 8034afe:	4b68      	ldr	r3, [pc, #416]	; (8034ca0 <HAL_RCC_OscConfig+0x47c>)
 8034b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8034b02:	4a67      	ldr	r2, [pc, #412]	; (8034ca0 <HAL_RCC_OscConfig+0x47c>)
 8034b04:	f043 0301 	orr.w	r3, r3, #1
 8034b08:	6713      	str	r3, [r2, #112]	; 0x70
 8034b0a:	e01c      	b.n	8034b46 <HAL_RCC_OscConfig+0x322>
 8034b0c:	687b      	ldr	r3, [r7, #4]
 8034b0e:	689b      	ldr	r3, [r3, #8]
 8034b10:	2b05      	cmp	r3, #5
 8034b12:	d10c      	bne.n	8034b2e <HAL_RCC_OscConfig+0x30a>
 8034b14:	4b62      	ldr	r3, [pc, #392]	; (8034ca0 <HAL_RCC_OscConfig+0x47c>)
 8034b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8034b18:	4a61      	ldr	r2, [pc, #388]	; (8034ca0 <HAL_RCC_OscConfig+0x47c>)
 8034b1a:	f043 0304 	orr.w	r3, r3, #4
 8034b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8034b20:	4b5f      	ldr	r3, [pc, #380]	; (8034ca0 <HAL_RCC_OscConfig+0x47c>)
 8034b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8034b24:	4a5e      	ldr	r2, [pc, #376]	; (8034ca0 <HAL_RCC_OscConfig+0x47c>)
 8034b26:	f043 0301 	orr.w	r3, r3, #1
 8034b2a:	6713      	str	r3, [r2, #112]	; 0x70
 8034b2c:	e00b      	b.n	8034b46 <HAL_RCC_OscConfig+0x322>
 8034b2e:	4b5c      	ldr	r3, [pc, #368]	; (8034ca0 <HAL_RCC_OscConfig+0x47c>)
 8034b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8034b32:	4a5b      	ldr	r2, [pc, #364]	; (8034ca0 <HAL_RCC_OscConfig+0x47c>)
 8034b34:	f023 0301 	bic.w	r3, r3, #1
 8034b38:	6713      	str	r3, [r2, #112]	; 0x70
 8034b3a:	4b59      	ldr	r3, [pc, #356]	; (8034ca0 <HAL_RCC_OscConfig+0x47c>)
 8034b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8034b3e:	4a58      	ldr	r2, [pc, #352]	; (8034ca0 <HAL_RCC_OscConfig+0x47c>)
 8034b40:	f023 0304 	bic.w	r3, r3, #4
 8034b44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8034b46:	687b      	ldr	r3, [r7, #4]
 8034b48:	689b      	ldr	r3, [r3, #8]
 8034b4a:	2b00      	cmp	r3, #0
 8034b4c:	d015      	beq.n	8034b7a <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8034b4e:	f7f7 fb7b 	bl	802c248 <HAL_GetTick>
 8034b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8034b54:	e00a      	b.n	8034b6c <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8034b56:	f7f7 fb77 	bl	802c248 <HAL_GetTick>
 8034b5a:	4602      	mov	r2, r0
 8034b5c:	693b      	ldr	r3, [r7, #16]
 8034b5e:	1ad3      	subs	r3, r2, r3
 8034b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8034b64:	4293      	cmp	r3, r2
 8034b66:	d901      	bls.n	8034b6c <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8034b68:	2303      	movs	r3, #3
 8034b6a:	e092      	b.n	8034c92 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8034b6c:	4b4c      	ldr	r3, [pc, #304]	; (8034ca0 <HAL_RCC_OscConfig+0x47c>)
 8034b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8034b70:	f003 0302 	and.w	r3, r3, #2
 8034b74:	2b00      	cmp	r3, #0
 8034b76:	d0ee      	beq.n	8034b56 <HAL_RCC_OscConfig+0x332>
 8034b78:	e014      	b.n	8034ba4 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8034b7a:	f7f7 fb65 	bl	802c248 <HAL_GetTick>
 8034b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8034b80:	e00a      	b.n	8034b98 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8034b82:	f7f7 fb61 	bl	802c248 <HAL_GetTick>
 8034b86:	4602      	mov	r2, r0
 8034b88:	693b      	ldr	r3, [r7, #16]
 8034b8a:	1ad3      	subs	r3, r2, r3
 8034b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8034b90:	4293      	cmp	r3, r2
 8034b92:	d901      	bls.n	8034b98 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8034b94:	2303      	movs	r3, #3
 8034b96:	e07c      	b.n	8034c92 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8034b98:	4b41      	ldr	r3, [pc, #260]	; (8034ca0 <HAL_RCC_OscConfig+0x47c>)
 8034b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8034b9c:	f003 0302 	and.w	r3, r3, #2
 8034ba0:	2b00      	cmp	r3, #0
 8034ba2:	d1ee      	bne.n	8034b82 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8034ba4:	7dfb      	ldrb	r3, [r7, #23]
 8034ba6:	2b01      	cmp	r3, #1
 8034ba8:	d105      	bne.n	8034bb6 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8034baa:	4b3d      	ldr	r3, [pc, #244]	; (8034ca0 <HAL_RCC_OscConfig+0x47c>)
 8034bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8034bae:	4a3c      	ldr	r2, [pc, #240]	; (8034ca0 <HAL_RCC_OscConfig+0x47c>)
 8034bb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8034bb4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8034bb6:	687b      	ldr	r3, [r7, #4]
 8034bb8:	699b      	ldr	r3, [r3, #24]
 8034bba:	2b00      	cmp	r3, #0
 8034bbc:	d068      	beq.n	8034c90 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8034bbe:	4b38      	ldr	r3, [pc, #224]	; (8034ca0 <HAL_RCC_OscConfig+0x47c>)
 8034bc0:	689b      	ldr	r3, [r3, #8]
 8034bc2:	f003 030c 	and.w	r3, r3, #12
 8034bc6:	2b08      	cmp	r3, #8
 8034bc8:	d060      	beq.n	8034c8c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8034bca:	687b      	ldr	r3, [r7, #4]
 8034bcc:	699b      	ldr	r3, [r3, #24]
 8034bce:	2b02      	cmp	r3, #2
 8034bd0:	d145      	bne.n	8034c5e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8034bd2:	4b34      	ldr	r3, [pc, #208]	; (8034ca4 <HAL_RCC_OscConfig+0x480>)
 8034bd4:	2200      	movs	r2, #0
 8034bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8034bd8:	f7f7 fb36 	bl	802c248 <HAL_GetTick>
 8034bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8034bde:	e008      	b.n	8034bf2 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8034be0:	f7f7 fb32 	bl	802c248 <HAL_GetTick>
 8034be4:	4602      	mov	r2, r0
 8034be6:	693b      	ldr	r3, [r7, #16]
 8034be8:	1ad3      	subs	r3, r2, r3
 8034bea:	2b02      	cmp	r3, #2
 8034bec:	d901      	bls.n	8034bf2 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8034bee:	2303      	movs	r3, #3
 8034bf0:	e04f      	b.n	8034c92 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8034bf2:	4b2b      	ldr	r3, [pc, #172]	; (8034ca0 <HAL_RCC_OscConfig+0x47c>)
 8034bf4:	681b      	ldr	r3, [r3, #0]
 8034bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8034bfa:	2b00      	cmp	r3, #0
 8034bfc:	d1f0      	bne.n	8034be0 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8034bfe:	687b      	ldr	r3, [r7, #4]
 8034c00:	69da      	ldr	r2, [r3, #28]
 8034c02:	687b      	ldr	r3, [r7, #4]
 8034c04:	6a1b      	ldr	r3, [r3, #32]
 8034c06:	431a      	orrs	r2, r3
 8034c08:	687b      	ldr	r3, [r7, #4]
 8034c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8034c0c:	019b      	lsls	r3, r3, #6
 8034c0e:	431a      	orrs	r2, r3
 8034c10:	687b      	ldr	r3, [r7, #4]
 8034c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8034c14:	085b      	lsrs	r3, r3, #1
 8034c16:	3b01      	subs	r3, #1
 8034c18:	041b      	lsls	r3, r3, #16
 8034c1a:	431a      	orrs	r2, r3
 8034c1c:	687b      	ldr	r3, [r7, #4]
 8034c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8034c20:	061b      	lsls	r3, r3, #24
 8034c22:	431a      	orrs	r2, r3
 8034c24:	687b      	ldr	r3, [r7, #4]
 8034c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8034c28:	071b      	lsls	r3, r3, #28
 8034c2a:	491d      	ldr	r1, [pc, #116]	; (8034ca0 <HAL_RCC_OscConfig+0x47c>)
 8034c2c:	4313      	orrs	r3, r2
 8034c2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8034c30:	4b1c      	ldr	r3, [pc, #112]	; (8034ca4 <HAL_RCC_OscConfig+0x480>)
 8034c32:	2201      	movs	r2, #1
 8034c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8034c36:	f7f7 fb07 	bl	802c248 <HAL_GetTick>
 8034c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8034c3c:	e008      	b.n	8034c50 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8034c3e:	f7f7 fb03 	bl	802c248 <HAL_GetTick>
 8034c42:	4602      	mov	r2, r0
 8034c44:	693b      	ldr	r3, [r7, #16]
 8034c46:	1ad3      	subs	r3, r2, r3
 8034c48:	2b02      	cmp	r3, #2
 8034c4a:	d901      	bls.n	8034c50 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8034c4c:	2303      	movs	r3, #3
 8034c4e:	e020      	b.n	8034c92 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8034c50:	4b13      	ldr	r3, [pc, #76]	; (8034ca0 <HAL_RCC_OscConfig+0x47c>)
 8034c52:	681b      	ldr	r3, [r3, #0]
 8034c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8034c58:	2b00      	cmp	r3, #0
 8034c5a:	d0f0      	beq.n	8034c3e <HAL_RCC_OscConfig+0x41a>
 8034c5c:	e018      	b.n	8034c90 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8034c5e:	4b11      	ldr	r3, [pc, #68]	; (8034ca4 <HAL_RCC_OscConfig+0x480>)
 8034c60:	2200      	movs	r2, #0
 8034c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8034c64:	f7f7 faf0 	bl	802c248 <HAL_GetTick>
 8034c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8034c6a:	e008      	b.n	8034c7e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8034c6c:	f7f7 faec 	bl	802c248 <HAL_GetTick>
 8034c70:	4602      	mov	r2, r0
 8034c72:	693b      	ldr	r3, [r7, #16]
 8034c74:	1ad3      	subs	r3, r2, r3
 8034c76:	2b02      	cmp	r3, #2
 8034c78:	d901      	bls.n	8034c7e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8034c7a:	2303      	movs	r3, #3
 8034c7c:	e009      	b.n	8034c92 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8034c7e:	4b08      	ldr	r3, [pc, #32]	; (8034ca0 <HAL_RCC_OscConfig+0x47c>)
 8034c80:	681b      	ldr	r3, [r3, #0]
 8034c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8034c86:	2b00      	cmp	r3, #0
 8034c88:	d1f0      	bne.n	8034c6c <HAL_RCC_OscConfig+0x448>
 8034c8a:	e001      	b.n	8034c90 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8034c8c:	2301      	movs	r3, #1
 8034c8e:	e000      	b.n	8034c92 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8034c90:	2300      	movs	r3, #0
}
 8034c92:	4618      	mov	r0, r3
 8034c94:	3718      	adds	r7, #24
 8034c96:	46bd      	mov	sp, r7
 8034c98:	bd80      	pop	{r7, pc}
 8034c9a:	bf00      	nop
 8034c9c:	40007000 	.word	0x40007000
 8034ca0:	40023800 	.word	0x40023800
 8034ca4:	42470060 	.word	0x42470060

08034ca8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8034ca8:	b580      	push	{r7, lr}
 8034caa:	b082      	sub	sp, #8
 8034cac:	af00      	add	r7, sp, #0
 8034cae:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8034cb0:	687b      	ldr	r3, [r7, #4]
 8034cb2:	2b00      	cmp	r3, #0
 8034cb4:	d101      	bne.n	8034cba <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8034cb6:	2301      	movs	r3, #1
 8034cb8:	e01c      	b.n	8034cf4 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8034cba:	687b      	ldr	r3, [r7, #4]
 8034cbc:	795b      	ldrb	r3, [r3, #5]
 8034cbe:	b2db      	uxtb	r3, r3
 8034cc0:	2b00      	cmp	r3, #0
 8034cc2:	d105      	bne.n	8034cd0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8034cc4:	687b      	ldr	r3, [r7, #4]
 8034cc6:	2200      	movs	r2, #0
 8034cc8:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8034cca:	6878      	ldr	r0, [r7, #4]
 8034ccc:	f7f6 fe70 	bl	802b9b0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8034cd0:	687b      	ldr	r3, [r7, #4]
 8034cd2:	2202      	movs	r2, #2
 8034cd4:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8034cd6:	687b      	ldr	r3, [r7, #4]
 8034cd8:	681b      	ldr	r3, [r3, #0]
 8034cda:	681a      	ldr	r2, [r3, #0]
 8034cdc:	687b      	ldr	r3, [r7, #4]
 8034cde:	681b      	ldr	r3, [r3, #0]
 8034ce0:	f042 0204 	orr.w	r2, r2, #4
 8034ce4:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8034ce6:	687b      	ldr	r3, [r7, #4]
 8034ce8:	2201      	movs	r2, #1
 8034cea:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8034cec:	687b      	ldr	r3, [r7, #4]
 8034cee:	2200      	movs	r2, #0
 8034cf0:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8034cf2:	2300      	movs	r3, #0
}
 8034cf4:	4618      	mov	r0, r3
 8034cf6:	3708      	adds	r7, #8
 8034cf8:	46bd      	mov	sp, r7
 8034cfa:	bd80      	pop	{r7, pc}

08034cfc <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8034cfc:	b580      	push	{r7, lr}
 8034cfe:	b084      	sub	sp, #16
 8034d00:	af00      	add	r7, sp, #0
 8034d02:	6078      	str	r0, [r7, #4]
 8034d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8034d06:	2300      	movs	r3, #0
 8034d08:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8034d0a:	687b      	ldr	r3, [r7, #4]
 8034d0c:	791b      	ldrb	r3, [r3, #4]
 8034d0e:	2b01      	cmp	r3, #1
 8034d10:	d101      	bne.n	8034d16 <HAL_RNG_GenerateRandomNumber+0x1a>
 8034d12:	2302      	movs	r3, #2
 8034d14:	e03d      	b.n	8034d92 <HAL_RNG_GenerateRandomNumber+0x96>
 8034d16:	687b      	ldr	r3, [r7, #4]
 8034d18:	2201      	movs	r2, #1
 8034d1a:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8034d1c:	687b      	ldr	r3, [r7, #4]
 8034d1e:	795b      	ldrb	r3, [r3, #5]
 8034d20:	b2db      	uxtb	r3, r3
 8034d22:	2b01      	cmp	r3, #1
 8034d24:	d12c      	bne.n	8034d80 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8034d26:	687b      	ldr	r3, [r7, #4]
 8034d28:	2202      	movs	r2, #2
 8034d2a:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8034d2c:	f7f7 fa8c 	bl	802c248 <HAL_GetTick>
 8034d30:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8034d32:	e011      	b.n	8034d58 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8034d34:	f7f7 fa88 	bl	802c248 <HAL_GetTick>
 8034d38:	4602      	mov	r2, r0
 8034d3a:	68bb      	ldr	r3, [r7, #8]
 8034d3c:	1ad3      	subs	r3, r2, r3
 8034d3e:	2b02      	cmp	r3, #2
 8034d40:	d90a      	bls.n	8034d58 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8034d42:	687b      	ldr	r3, [r7, #4]
 8034d44:	2201      	movs	r2, #1
 8034d46:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8034d48:	687b      	ldr	r3, [r7, #4]
 8034d4a:	2202      	movs	r2, #2
 8034d4c:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8034d4e:	687b      	ldr	r3, [r7, #4]
 8034d50:	2200      	movs	r2, #0
 8034d52:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 8034d54:	2301      	movs	r3, #1
 8034d56:	e01c      	b.n	8034d92 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8034d58:	687b      	ldr	r3, [r7, #4]
 8034d5a:	681b      	ldr	r3, [r3, #0]
 8034d5c:	685b      	ldr	r3, [r3, #4]
 8034d5e:	f003 0301 	and.w	r3, r3, #1
 8034d62:	2b01      	cmp	r3, #1
 8034d64:	d1e6      	bne.n	8034d34 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8034d66:	687b      	ldr	r3, [r7, #4]
 8034d68:	681b      	ldr	r3, [r3, #0]
 8034d6a:	689a      	ldr	r2, [r3, #8]
 8034d6c:	687b      	ldr	r3, [r7, #4]
 8034d6e:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8034d70:	687b      	ldr	r3, [r7, #4]
 8034d72:	68da      	ldr	r2, [r3, #12]
 8034d74:	683b      	ldr	r3, [r7, #0]
 8034d76:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8034d78:	687b      	ldr	r3, [r7, #4]
 8034d7a:	2201      	movs	r2, #1
 8034d7c:	715a      	strb	r2, [r3, #5]
 8034d7e:	e004      	b.n	8034d8a <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8034d80:	687b      	ldr	r3, [r7, #4]
 8034d82:	2204      	movs	r2, #4
 8034d84:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8034d86:	2301      	movs	r3, #1
 8034d88:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8034d8a:	687b      	ldr	r3, [r7, #4]
 8034d8c:	2200      	movs	r2, #0
 8034d8e:	711a      	strb	r2, [r3, #4]

  return status;
 8034d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8034d92:	4618      	mov	r0, r3
 8034d94:	3710      	adds	r7, #16
 8034d96:	46bd      	mov	sp, r7
 8034d98:	bd80      	pop	{r7, pc}

08034d9a <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8034d9a:	b580      	push	{r7, lr}
 8034d9c:	b082      	sub	sp, #8
 8034d9e:	af00      	add	r7, sp, #0
 8034da0:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8034da2:	687b      	ldr	r3, [r7, #4]
 8034da4:	2b00      	cmp	r3, #0
 8034da6:	d101      	bne.n	8034dac <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8034da8:	2301      	movs	r3, #1
 8034daa:	e083      	b.n	8034eb4 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8034dac:	687b      	ldr	r3, [r7, #4]
 8034dae:	7f5b      	ldrb	r3, [r3, #29]
 8034db0:	b2db      	uxtb	r3, r3
 8034db2:	2b00      	cmp	r3, #0
 8034db4:	d105      	bne.n	8034dc2 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8034db6:	687b      	ldr	r3, [r7, #4]
 8034db8:	2200      	movs	r2, #0
 8034dba:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8034dbc:	6878      	ldr	r0, [r7, #4]
 8034dbe:	f7f6 fe19 	bl	802b9f4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8034dc2:	687b      	ldr	r3, [r7, #4]
 8034dc4:	2202      	movs	r2, #2
 8034dc6:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8034dc8:	687b      	ldr	r3, [r7, #4]
 8034dca:	681b      	ldr	r3, [r3, #0]
 8034dcc:	22ca      	movs	r2, #202	; 0xca
 8034dce:	625a      	str	r2, [r3, #36]	; 0x24
 8034dd0:	687b      	ldr	r3, [r7, #4]
 8034dd2:	681b      	ldr	r3, [r3, #0]
 8034dd4:	2253      	movs	r2, #83	; 0x53
 8034dd6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8034dd8:	6878      	ldr	r0, [r7, #4]
 8034dda:	f000 faa8 	bl	803532e <RTC_EnterInitMode>
 8034dde:	4603      	mov	r3, r0
 8034de0:	2b00      	cmp	r3, #0
 8034de2:	d008      	beq.n	8034df6 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8034de4:	687b      	ldr	r3, [r7, #4]
 8034de6:	681b      	ldr	r3, [r3, #0]
 8034de8:	22ff      	movs	r2, #255	; 0xff
 8034dea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8034dec:	687b      	ldr	r3, [r7, #4]
 8034dee:	2204      	movs	r2, #4
 8034df0:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8034df2:	2301      	movs	r3, #1
 8034df4:	e05e      	b.n	8034eb4 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8034df6:	687b      	ldr	r3, [r7, #4]
 8034df8:	681b      	ldr	r3, [r3, #0]
 8034dfa:	689b      	ldr	r3, [r3, #8]
 8034dfc:	687a      	ldr	r2, [r7, #4]
 8034dfe:	6812      	ldr	r2, [r2, #0]
 8034e00:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8034e04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8034e08:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8034e0a:	687b      	ldr	r3, [r7, #4]
 8034e0c:	681b      	ldr	r3, [r3, #0]
 8034e0e:	6899      	ldr	r1, [r3, #8]
 8034e10:	687b      	ldr	r3, [r7, #4]
 8034e12:	685a      	ldr	r2, [r3, #4]
 8034e14:	687b      	ldr	r3, [r7, #4]
 8034e16:	691b      	ldr	r3, [r3, #16]
 8034e18:	431a      	orrs	r2, r3
 8034e1a:	687b      	ldr	r3, [r7, #4]
 8034e1c:	695b      	ldr	r3, [r3, #20]
 8034e1e:	431a      	orrs	r2, r3
 8034e20:	687b      	ldr	r3, [r7, #4]
 8034e22:	681b      	ldr	r3, [r3, #0]
 8034e24:	430a      	orrs	r2, r1
 8034e26:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8034e28:	687b      	ldr	r3, [r7, #4]
 8034e2a:	681b      	ldr	r3, [r3, #0]
 8034e2c:	687a      	ldr	r2, [r7, #4]
 8034e2e:	68d2      	ldr	r2, [r2, #12]
 8034e30:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8034e32:	687b      	ldr	r3, [r7, #4]
 8034e34:	681b      	ldr	r3, [r3, #0]
 8034e36:	6919      	ldr	r1, [r3, #16]
 8034e38:	687b      	ldr	r3, [r7, #4]
 8034e3a:	689b      	ldr	r3, [r3, #8]
 8034e3c:	041a      	lsls	r2, r3, #16
 8034e3e:	687b      	ldr	r3, [r7, #4]
 8034e40:	681b      	ldr	r3, [r3, #0]
 8034e42:	430a      	orrs	r2, r1
 8034e44:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8034e46:	687b      	ldr	r3, [r7, #4]
 8034e48:	681b      	ldr	r3, [r3, #0]
 8034e4a:	68da      	ldr	r2, [r3, #12]
 8034e4c:	687b      	ldr	r3, [r7, #4]
 8034e4e:	681b      	ldr	r3, [r3, #0]
 8034e50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8034e54:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8034e56:	687b      	ldr	r3, [r7, #4]
 8034e58:	681b      	ldr	r3, [r3, #0]
 8034e5a:	689b      	ldr	r3, [r3, #8]
 8034e5c:	f003 0320 	and.w	r3, r3, #32
 8034e60:	2b00      	cmp	r3, #0
 8034e62:	d10e      	bne.n	8034e82 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8034e64:	6878      	ldr	r0, [r7, #4]
 8034e66:	f000 fa3a 	bl	80352de <HAL_RTC_WaitForSynchro>
 8034e6a:	4603      	mov	r3, r0
 8034e6c:	2b00      	cmp	r3, #0
 8034e6e:	d008      	beq.n	8034e82 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8034e70:	687b      	ldr	r3, [r7, #4]
 8034e72:	681b      	ldr	r3, [r3, #0]
 8034e74:	22ff      	movs	r2, #255	; 0xff
 8034e76:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8034e78:	687b      	ldr	r3, [r7, #4]
 8034e7a:	2204      	movs	r2, #4
 8034e7c:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8034e7e:	2301      	movs	r3, #1
 8034e80:	e018      	b.n	8034eb4 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8034e82:	687b      	ldr	r3, [r7, #4]
 8034e84:	681b      	ldr	r3, [r3, #0]
 8034e86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8034e88:	687b      	ldr	r3, [r7, #4]
 8034e8a:	681b      	ldr	r3, [r3, #0]
 8034e8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8034e90:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8034e92:	687b      	ldr	r3, [r7, #4]
 8034e94:	681b      	ldr	r3, [r3, #0]
 8034e96:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8034e98:	687b      	ldr	r3, [r7, #4]
 8034e9a:	699a      	ldr	r2, [r3, #24]
 8034e9c:	687b      	ldr	r3, [r7, #4]
 8034e9e:	681b      	ldr	r3, [r3, #0]
 8034ea0:	430a      	orrs	r2, r1
 8034ea2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8034ea4:	687b      	ldr	r3, [r7, #4]
 8034ea6:	681b      	ldr	r3, [r3, #0]
 8034ea8:	22ff      	movs	r2, #255	; 0xff
 8034eaa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8034eac:	687b      	ldr	r3, [r7, #4]
 8034eae:	2201      	movs	r2, #1
 8034eb0:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8034eb2:	2300      	movs	r3, #0
  }
}
 8034eb4:	4618      	mov	r0, r3
 8034eb6:	3708      	adds	r7, #8
 8034eb8:	46bd      	mov	sp, r7
 8034eba:	bd80      	pop	{r7, pc}

08034ebc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8034ebc:	b590      	push	{r4, r7, lr}
 8034ebe:	b087      	sub	sp, #28
 8034ec0:	af00      	add	r7, sp, #0
 8034ec2:	60f8      	str	r0, [r7, #12]
 8034ec4:	60b9      	str	r1, [r7, #8]
 8034ec6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8034ec8:	2300      	movs	r3, #0
 8034eca:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8034ecc:	68fb      	ldr	r3, [r7, #12]
 8034ece:	7f1b      	ldrb	r3, [r3, #28]
 8034ed0:	2b01      	cmp	r3, #1
 8034ed2:	d101      	bne.n	8034ed8 <HAL_RTC_SetTime+0x1c>
 8034ed4:	2302      	movs	r3, #2
 8034ed6:	e0aa      	b.n	803502e <HAL_RTC_SetTime+0x172>
 8034ed8:	68fb      	ldr	r3, [r7, #12]
 8034eda:	2201      	movs	r2, #1
 8034edc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8034ede:	68fb      	ldr	r3, [r7, #12]
 8034ee0:	2202      	movs	r2, #2
 8034ee2:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8034ee4:	687b      	ldr	r3, [r7, #4]
 8034ee6:	2b00      	cmp	r3, #0
 8034ee8:	d126      	bne.n	8034f38 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8034eea:	68fb      	ldr	r3, [r7, #12]
 8034eec:	681b      	ldr	r3, [r3, #0]
 8034eee:	689b      	ldr	r3, [r3, #8]
 8034ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8034ef4:	2b00      	cmp	r3, #0
 8034ef6:	d102      	bne.n	8034efe <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8034ef8:	68bb      	ldr	r3, [r7, #8]
 8034efa:	2200      	movs	r2, #0
 8034efc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8034efe:	68bb      	ldr	r3, [r7, #8]
 8034f00:	781b      	ldrb	r3, [r3, #0]
 8034f02:	4618      	mov	r0, r3
 8034f04:	f000 fa3f 	bl	8035386 <RTC_ByteToBcd2>
 8034f08:	4603      	mov	r3, r0
 8034f0a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8034f0c:	68bb      	ldr	r3, [r7, #8]
 8034f0e:	785b      	ldrb	r3, [r3, #1]
 8034f10:	4618      	mov	r0, r3
 8034f12:	f000 fa38 	bl	8035386 <RTC_ByteToBcd2>
 8034f16:	4603      	mov	r3, r0
 8034f18:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8034f1a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8034f1c:	68bb      	ldr	r3, [r7, #8]
 8034f1e:	789b      	ldrb	r3, [r3, #2]
 8034f20:	4618      	mov	r0, r3
 8034f22:	f000 fa30 	bl	8035386 <RTC_ByteToBcd2>
 8034f26:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8034f28:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8034f2c:	68bb      	ldr	r3, [r7, #8]
 8034f2e:	78db      	ldrb	r3, [r3, #3]
 8034f30:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8034f32:	4313      	orrs	r3, r2
 8034f34:	617b      	str	r3, [r7, #20]
 8034f36:	e018      	b.n	8034f6a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8034f38:	68fb      	ldr	r3, [r7, #12]
 8034f3a:	681b      	ldr	r3, [r3, #0]
 8034f3c:	689b      	ldr	r3, [r3, #8]
 8034f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8034f42:	2b00      	cmp	r3, #0
 8034f44:	d102      	bne.n	8034f4c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8034f46:	68bb      	ldr	r3, [r7, #8]
 8034f48:	2200      	movs	r2, #0
 8034f4a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8034f4c:	68bb      	ldr	r3, [r7, #8]
 8034f4e:	781b      	ldrb	r3, [r3, #0]
 8034f50:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8034f52:	68bb      	ldr	r3, [r7, #8]
 8034f54:	785b      	ldrb	r3, [r3, #1]
 8034f56:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8034f58:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8034f5a:	68ba      	ldr	r2, [r7, #8]
 8034f5c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8034f5e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8034f60:	68bb      	ldr	r3, [r7, #8]
 8034f62:	78db      	ldrb	r3, [r3, #3]
 8034f64:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8034f66:	4313      	orrs	r3, r2
 8034f68:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8034f6a:	68fb      	ldr	r3, [r7, #12]
 8034f6c:	681b      	ldr	r3, [r3, #0]
 8034f6e:	22ca      	movs	r2, #202	; 0xca
 8034f70:	625a      	str	r2, [r3, #36]	; 0x24
 8034f72:	68fb      	ldr	r3, [r7, #12]
 8034f74:	681b      	ldr	r3, [r3, #0]
 8034f76:	2253      	movs	r2, #83	; 0x53
 8034f78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8034f7a:	68f8      	ldr	r0, [r7, #12]
 8034f7c:	f000 f9d7 	bl	803532e <RTC_EnterInitMode>
 8034f80:	4603      	mov	r3, r0
 8034f82:	2b00      	cmp	r3, #0
 8034f84:	d00b      	beq.n	8034f9e <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8034f86:	68fb      	ldr	r3, [r7, #12]
 8034f88:	681b      	ldr	r3, [r3, #0]
 8034f8a:	22ff      	movs	r2, #255	; 0xff
 8034f8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8034f8e:	68fb      	ldr	r3, [r7, #12]
 8034f90:	2204      	movs	r2, #4
 8034f92:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8034f94:	68fb      	ldr	r3, [r7, #12]
 8034f96:	2200      	movs	r2, #0
 8034f98:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8034f9a:	2301      	movs	r3, #1
 8034f9c:	e047      	b.n	803502e <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8034f9e:	68fb      	ldr	r3, [r7, #12]
 8034fa0:	681a      	ldr	r2, [r3, #0]
 8034fa2:	697b      	ldr	r3, [r7, #20]
 8034fa4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8034fa8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8034fac:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8034fae:	68fb      	ldr	r3, [r7, #12]
 8034fb0:	681b      	ldr	r3, [r3, #0]
 8034fb2:	689a      	ldr	r2, [r3, #8]
 8034fb4:	68fb      	ldr	r3, [r7, #12]
 8034fb6:	681b      	ldr	r3, [r3, #0]
 8034fb8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8034fbc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8034fbe:	68fb      	ldr	r3, [r7, #12]
 8034fc0:	681b      	ldr	r3, [r3, #0]
 8034fc2:	6899      	ldr	r1, [r3, #8]
 8034fc4:	68bb      	ldr	r3, [r7, #8]
 8034fc6:	68da      	ldr	r2, [r3, #12]
 8034fc8:	68bb      	ldr	r3, [r7, #8]
 8034fca:	691b      	ldr	r3, [r3, #16]
 8034fcc:	431a      	orrs	r2, r3
 8034fce:	68fb      	ldr	r3, [r7, #12]
 8034fd0:	681b      	ldr	r3, [r3, #0]
 8034fd2:	430a      	orrs	r2, r1
 8034fd4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8034fd6:	68fb      	ldr	r3, [r7, #12]
 8034fd8:	681b      	ldr	r3, [r3, #0]
 8034fda:	68da      	ldr	r2, [r3, #12]
 8034fdc:	68fb      	ldr	r3, [r7, #12]
 8034fde:	681b      	ldr	r3, [r3, #0]
 8034fe0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8034fe4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8034fe6:	68fb      	ldr	r3, [r7, #12]
 8034fe8:	681b      	ldr	r3, [r3, #0]
 8034fea:	689b      	ldr	r3, [r3, #8]
 8034fec:	f003 0320 	and.w	r3, r3, #32
 8034ff0:	2b00      	cmp	r3, #0
 8034ff2:	d111      	bne.n	8035018 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8034ff4:	68f8      	ldr	r0, [r7, #12]
 8034ff6:	f000 f972 	bl	80352de <HAL_RTC_WaitForSynchro>
 8034ffa:	4603      	mov	r3, r0
 8034ffc:	2b00      	cmp	r3, #0
 8034ffe:	d00b      	beq.n	8035018 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8035000:	68fb      	ldr	r3, [r7, #12]
 8035002:	681b      	ldr	r3, [r3, #0]
 8035004:	22ff      	movs	r2, #255	; 0xff
 8035006:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8035008:	68fb      	ldr	r3, [r7, #12]
 803500a:	2204      	movs	r2, #4
 803500c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 803500e:	68fb      	ldr	r3, [r7, #12]
 8035010:	2200      	movs	r2, #0
 8035012:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8035014:	2301      	movs	r3, #1
 8035016:	e00a      	b.n	803502e <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8035018:	68fb      	ldr	r3, [r7, #12]
 803501a:	681b      	ldr	r3, [r3, #0]
 803501c:	22ff      	movs	r2, #255	; 0xff
 803501e:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8035020:	68fb      	ldr	r3, [r7, #12]
 8035022:	2201      	movs	r2, #1
 8035024:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8035026:	68fb      	ldr	r3, [r7, #12]
 8035028:	2200      	movs	r2, #0
 803502a:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 803502c:	2300      	movs	r3, #0
  }
}
 803502e:	4618      	mov	r0, r3
 8035030:	371c      	adds	r7, #28
 8035032:	46bd      	mov	sp, r7
 8035034:	bd90      	pop	{r4, r7, pc}

08035036 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8035036:	b580      	push	{r7, lr}
 8035038:	b086      	sub	sp, #24
 803503a:	af00      	add	r7, sp, #0
 803503c:	60f8      	str	r0, [r7, #12]
 803503e:	60b9      	str	r1, [r7, #8]
 8035040:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8035042:	2300      	movs	r3, #0
 8035044:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8035046:	68fb      	ldr	r3, [r7, #12]
 8035048:	681b      	ldr	r3, [r3, #0]
 803504a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 803504c:	68bb      	ldr	r3, [r7, #8]
 803504e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8035050:	68fb      	ldr	r3, [r7, #12]
 8035052:	681b      	ldr	r3, [r3, #0]
 8035054:	691b      	ldr	r3, [r3, #16]
 8035056:	f3c3 020e 	ubfx	r2, r3, #0, #15
 803505a:	68bb      	ldr	r3, [r7, #8]
 803505c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 803505e:	68fb      	ldr	r3, [r7, #12]
 8035060:	681b      	ldr	r3, [r3, #0]
 8035062:	681b      	ldr	r3, [r3, #0]
 8035064:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8035068:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 803506c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 803506e:	697b      	ldr	r3, [r7, #20]
 8035070:	0c1b      	lsrs	r3, r3, #16
 8035072:	b2db      	uxtb	r3, r3
 8035074:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8035078:	b2da      	uxtb	r2, r3
 803507a:	68bb      	ldr	r3, [r7, #8]
 803507c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 803507e:	697b      	ldr	r3, [r7, #20]
 8035080:	0a1b      	lsrs	r3, r3, #8
 8035082:	b2db      	uxtb	r3, r3
 8035084:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8035088:	b2da      	uxtb	r2, r3
 803508a:	68bb      	ldr	r3, [r7, #8]
 803508c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 803508e:	697b      	ldr	r3, [r7, #20]
 8035090:	b2db      	uxtb	r3, r3
 8035092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8035096:	b2da      	uxtb	r2, r3
 8035098:	68bb      	ldr	r3, [r7, #8]
 803509a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 803509c:	697b      	ldr	r3, [r7, #20]
 803509e:	0c1b      	lsrs	r3, r3, #16
 80350a0:	b2db      	uxtb	r3, r3
 80350a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80350a6:	b2da      	uxtb	r2, r3
 80350a8:	68bb      	ldr	r3, [r7, #8]
 80350aa:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80350ac:	687b      	ldr	r3, [r7, #4]
 80350ae:	2b00      	cmp	r3, #0
 80350b0:	d11a      	bne.n	80350e8 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80350b2:	68bb      	ldr	r3, [r7, #8]
 80350b4:	781b      	ldrb	r3, [r3, #0]
 80350b6:	4618      	mov	r0, r3
 80350b8:	f000 f983 	bl	80353c2 <RTC_Bcd2ToByte>
 80350bc:	4603      	mov	r3, r0
 80350be:	461a      	mov	r2, r3
 80350c0:	68bb      	ldr	r3, [r7, #8]
 80350c2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80350c4:	68bb      	ldr	r3, [r7, #8]
 80350c6:	785b      	ldrb	r3, [r3, #1]
 80350c8:	4618      	mov	r0, r3
 80350ca:	f000 f97a 	bl	80353c2 <RTC_Bcd2ToByte>
 80350ce:	4603      	mov	r3, r0
 80350d0:	461a      	mov	r2, r3
 80350d2:	68bb      	ldr	r3, [r7, #8]
 80350d4:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80350d6:	68bb      	ldr	r3, [r7, #8]
 80350d8:	789b      	ldrb	r3, [r3, #2]
 80350da:	4618      	mov	r0, r3
 80350dc:	f000 f971 	bl	80353c2 <RTC_Bcd2ToByte>
 80350e0:	4603      	mov	r3, r0
 80350e2:	461a      	mov	r2, r3
 80350e4:	68bb      	ldr	r3, [r7, #8]
 80350e6:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80350e8:	2300      	movs	r3, #0
}
 80350ea:	4618      	mov	r0, r3
 80350ec:	3718      	adds	r7, #24
 80350ee:	46bd      	mov	sp, r7
 80350f0:	bd80      	pop	{r7, pc}

080350f2 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80350f2:	b590      	push	{r4, r7, lr}
 80350f4:	b087      	sub	sp, #28
 80350f6:	af00      	add	r7, sp, #0
 80350f8:	60f8      	str	r0, [r7, #12]
 80350fa:	60b9      	str	r1, [r7, #8]
 80350fc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80350fe:	2300      	movs	r3, #0
 8035100:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8035102:	68fb      	ldr	r3, [r7, #12]
 8035104:	7f1b      	ldrb	r3, [r3, #28]
 8035106:	2b01      	cmp	r3, #1
 8035108:	d101      	bne.n	803510e <HAL_RTC_SetDate+0x1c>
 803510a:	2302      	movs	r3, #2
 803510c:	e094      	b.n	8035238 <HAL_RTC_SetDate+0x146>
 803510e:	68fb      	ldr	r3, [r7, #12]
 8035110:	2201      	movs	r2, #1
 8035112:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8035114:	68fb      	ldr	r3, [r7, #12]
 8035116:	2202      	movs	r2, #2
 8035118:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 803511a:	687b      	ldr	r3, [r7, #4]
 803511c:	2b00      	cmp	r3, #0
 803511e:	d10e      	bne.n	803513e <HAL_RTC_SetDate+0x4c>
 8035120:	68bb      	ldr	r3, [r7, #8]
 8035122:	785b      	ldrb	r3, [r3, #1]
 8035124:	f003 0310 	and.w	r3, r3, #16
 8035128:	2b00      	cmp	r3, #0
 803512a:	d008      	beq.n	803513e <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 803512c:	68bb      	ldr	r3, [r7, #8]
 803512e:	785b      	ldrb	r3, [r3, #1]
 8035130:	f023 0310 	bic.w	r3, r3, #16
 8035134:	b2db      	uxtb	r3, r3
 8035136:	330a      	adds	r3, #10
 8035138:	b2da      	uxtb	r2, r3
 803513a:	68bb      	ldr	r3, [r7, #8]
 803513c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 803513e:	687b      	ldr	r3, [r7, #4]
 8035140:	2b00      	cmp	r3, #0
 8035142:	d11c      	bne.n	803517e <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8035144:	68bb      	ldr	r3, [r7, #8]
 8035146:	78db      	ldrb	r3, [r3, #3]
 8035148:	4618      	mov	r0, r3
 803514a:	f000 f91c 	bl	8035386 <RTC_ByteToBcd2>
 803514e:	4603      	mov	r3, r0
 8035150:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8035152:	68bb      	ldr	r3, [r7, #8]
 8035154:	785b      	ldrb	r3, [r3, #1]
 8035156:	4618      	mov	r0, r3
 8035158:	f000 f915 	bl	8035386 <RTC_ByteToBcd2>
 803515c:	4603      	mov	r3, r0
 803515e:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8035160:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8035162:	68bb      	ldr	r3, [r7, #8]
 8035164:	789b      	ldrb	r3, [r3, #2]
 8035166:	4618      	mov	r0, r3
 8035168:	f000 f90d 	bl	8035386 <RTC_ByteToBcd2>
 803516c:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 803516e:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8035172:	68bb      	ldr	r3, [r7, #8]
 8035174:	781b      	ldrb	r3, [r3, #0]
 8035176:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8035178:	4313      	orrs	r3, r2
 803517a:	617b      	str	r3, [r7, #20]
 803517c:	e00e      	b.n	803519c <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 803517e:	68bb      	ldr	r3, [r7, #8]
 8035180:	78db      	ldrb	r3, [r3, #3]
 8035182:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8035184:	68bb      	ldr	r3, [r7, #8]
 8035186:	785b      	ldrb	r3, [r3, #1]
 8035188:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 803518a:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 803518c:	68ba      	ldr	r2, [r7, #8]
 803518e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8035190:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8035192:	68bb      	ldr	r3, [r7, #8]
 8035194:	781b      	ldrb	r3, [r3, #0]
 8035196:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8035198:	4313      	orrs	r3, r2
 803519a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 803519c:	68fb      	ldr	r3, [r7, #12]
 803519e:	681b      	ldr	r3, [r3, #0]
 80351a0:	22ca      	movs	r2, #202	; 0xca
 80351a2:	625a      	str	r2, [r3, #36]	; 0x24
 80351a4:	68fb      	ldr	r3, [r7, #12]
 80351a6:	681b      	ldr	r3, [r3, #0]
 80351a8:	2253      	movs	r2, #83	; 0x53
 80351aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80351ac:	68f8      	ldr	r0, [r7, #12]
 80351ae:	f000 f8be 	bl	803532e <RTC_EnterInitMode>
 80351b2:	4603      	mov	r3, r0
 80351b4:	2b00      	cmp	r3, #0
 80351b6:	d00b      	beq.n	80351d0 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80351b8:	68fb      	ldr	r3, [r7, #12]
 80351ba:	681b      	ldr	r3, [r3, #0]
 80351bc:	22ff      	movs	r2, #255	; 0xff
 80351be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80351c0:	68fb      	ldr	r3, [r7, #12]
 80351c2:	2204      	movs	r2, #4
 80351c4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80351c6:	68fb      	ldr	r3, [r7, #12]
 80351c8:	2200      	movs	r2, #0
 80351ca:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80351cc:	2301      	movs	r3, #1
 80351ce:	e033      	b.n	8035238 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80351d0:	68fb      	ldr	r3, [r7, #12]
 80351d2:	681a      	ldr	r2, [r3, #0]
 80351d4:	697b      	ldr	r3, [r7, #20]
 80351d6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80351da:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80351de:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80351e0:	68fb      	ldr	r3, [r7, #12]
 80351e2:	681b      	ldr	r3, [r3, #0]
 80351e4:	68da      	ldr	r2, [r3, #12]
 80351e6:	68fb      	ldr	r3, [r7, #12]
 80351e8:	681b      	ldr	r3, [r3, #0]
 80351ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80351ee:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80351f0:	68fb      	ldr	r3, [r7, #12]
 80351f2:	681b      	ldr	r3, [r3, #0]
 80351f4:	689b      	ldr	r3, [r3, #8]
 80351f6:	f003 0320 	and.w	r3, r3, #32
 80351fa:	2b00      	cmp	r3, #0
 80351fc:	d111      	bne.n	8035222 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80351fe:	68f8      	ldr	r0, [r7, #12]
 8035200:	f000 f86d 	bl	80352de <HAL_RTC_WaitForSynchro>
 8035204:	4603      	mov	r3, r0
 8035206:	2b00      	cmp	r3, #0
 8035208:	d00b      	beq.n	8035222 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 803520a:	68fb      	ldr	r3, [r7, #12]
 803520c:	681b      	ldr	r3, [r3, #0]
 803520e:	22ff      	movs	r2, #255	; 0xff
 8035210:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8035212:	68fb      	ldr	r3, [r7, #12]
 8035214:	2204      	movs	r2, #4
 8035216:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8035218:	68fb      	ldr	r3, [r7, #12]
 803521a:	2200      	movs	r2, #0
 803521c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 803521e:	2301      	movs	r3, #1
 8035220:	e00a      	b.n	8035238 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8035222:	68fb      	ldr	r3, [r7, #12]
 8035224:	681b      	ldr	r3, [r3, #0]
 8035226:	22ff      	movs	r2, #255	; 0xff
 8035228:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 803522a:	68fb      	ldr	r3, [r7, #12]
 803522c:	2201      	movs	r2, #1
 803522e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8035230:	68fb      	ldr	r3, [r7, #12]
 8035232:	2200      	movs	r2, #0
 8035234:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8035236:	2300      	movs	r3, #0
  }
}
 8035238:	4618      	mov	r0, r3
 803523a:	371c      	adds	r7, #28
 803523c:	46bd      	mov	sp, r7
 803523e:	bd90      	pop	{r4, r7, pc}

08035240 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8035240:	b580      	push	{r7, lr}
 8035242:	b086      	sub	sp, #24
 8035244:	af00      	add	r7, sp, #0
 8035246:	60f8      	str	r0, [r7, #12]
 8035248:	60b9      	str	r1, [r7, #8]
 803524a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 803524c:	2300      	movs	r3, #0
 803524e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8035250:	68fb      	ldr	r3, [r7, #12]
 8035252:	681b      	ldr	r3, [r3, #0]
 8035254:	685b      	ldr	r3, [r3, #4]
 8035256:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 803525a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 803525e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8035260:	697b      	ldr	r3, [r7, #20]
 8035262:	0c1b      	lsrs	r3, r3, #16
 8035264:	b2da      	uxtb	r2, r3
 8035266:	68bb      	ldr	r3, [r7, #8]
 8035268:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 803526a:	697b      	ldr	r3, [r7, #20]
 803526c:	0a1b      	lsrs	r3, r3, #8
 803526e:	b2db      	uxtb	r3, r3
 8035270:	f003 031f 	and.w	r3, r3, #31
 8035274:	b2da      	uxtb	r2, r3
 8035276:	68bb      	ldr	r3, [r7, #8]
 8035278:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 803527a:	697b      	ldr	r3, [r7, #20]
 803527c:	b2db      	uxtb	r3, r3
 803527e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8035282:	b2da      	uxtb	r2, r3
 8035284:	68bb      	ldr	r3, [r7, #8]
 8035286:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8035288:	697b      	ldr	r3, [r7, #20]
 803528a:	0b5b      	lsrs	r3, r3, #13
 803528c:	b2db      	uxtb	r3, r3
 803528e:	f003 0307 	and.w	r3, r3, #7
 8035292:	b2da      	uxtb	r2, r3
 8035294:	68bb      	ldr	r3, [r7, #8]
 8035296:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8035298:	687b      	ldr	r3, [r7, #4]
 803529a:	2b00      	cmp	r3, #0
 803529c:	d11a      	bne.n	80352d4 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 803529e:	68bb      	ldr	r3, [r7, #8]
 80352a0:	78db      	ldrb	r3, [r3, #3]
 80352a2:	4618      	mov	r0, r3
 80352a4:	f000 f88d 	bl	80353c2 <RTC_Bcd2ToByte>
 80352a8:	4603      	mov	r3, r0
 80352aa:	461a      	mov	r2, r3
 80352ac:	68bb      	ldr	r3, [r7, #8]
 80352ae:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80352b0:	68bb      	ldr	r3, [r7, #8]
 80352b2:	785b      	ldrb	r3, [r3, #1]
 80352b4:	4618      	mov	r0, r3
 80352b6:	f000 f884 	bl	80353c2 <RTC_Bcd2ToByte>
 80352ba:	4603      	mov	r3, r0
 80352bc:	461a      	mov	r2, r3
 80352be:	68bb      	ldr	r3, [r7, #8]
 80352c0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80352c2:	68bb      	ldr	r3, [r7, #8]
 80352c4:	789b      	ldrb	r3, [r3, #2]
 80352c6:	4618      	mov	r0, r3
 80352c8:	f000 f87b 	bl	80353c2 <RTC_Bcd2ToByte>
 80352cc:	4603      	mov	r3, r0
 80352ce:	461a      	mov	r2, r3
 80352d0:	68bb      	ldr	r3, [r7, #8]
 80352d2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80352d4:	2300      	movs	r3, #0
}
 80352d6:	4618      	mov	r0, r3
 80352d8:	3718      	adds	r7, #24
 80352da:	46bd      	mov	sp, r7
 80352dc:	bd80      	pop	{r7, pc}

080352de <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80352de:	b580      	push	{r7, lr}
 80352e0:	b084      	sub	sp, #16
 80352e2:	af00      	add	r7, sp, #0
 80352e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80352e6:	2300      	movs	r3, #0
 80352e8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80352ea:	687b      	ldr	r3, [r7, #4]
 80352ec:	681b      	ldr	r3, [r3, #0]
 80352ee:	68da      	ldr	r2, [r3, #12]
 80352f0:	687b      	ldr	r3, [r7, #4]
 80352f2:	681b      	ldr	r3, [r3, #0]
 80352f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80352f8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80352fa:	f7f6 ffa5 	bl	802c248 <HAL_GetTick>
 80352fe:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8035300:	e009      	b.n	8035316 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8035302:	f7f6 ffa1 	bl	802c248 <HAL_GetTick>
 8035306:	4602      	mov	r2, r0
 8035308:	68fb      	ldr	r3, [r7, #12]
 803530a:	1ad3      	subs	r3, r2, r3
 803530c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8035310:	d901      	bls.n	8035316 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8035312:	2303      	movs	r3, #3
 8035314:	e007      	b.n	8035326 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8035316:	687b      	ldr	r3, [r7, #4]
 8035318:	681b      	ldr	r3, [r3, #0]
 803531a:	68db      	ldr	r3, [r3, #12]
 803531c:	f003 0320 	and.w	r3, r3, #32
 8035320:	2b00      	cmp	r3, #0
 8035322:	d0ee      	beq.n	8035302 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8035324:	2300      	movs	r3, #0
}
 8035326:	4618      	mov	r0, r3
 8035328:	3710      	adds	r7, #16
 803532a:	46bd      	mov	sp, r7
 803532c:	bd80      	pop	{r7, pc}

0803532e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 803532e:	b580      	push	{r7, lr}
 8035330:	b084      	sub	sp, #16
 8035332:	af00      	add	r7, sp, #0
 8035334:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8035336:	2300      	movs	r3, #0
 8035338:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 803533a:	687b      	ldr	r3, [r7, #4]
 803533c:	681b      	ldr	r3, [r3, #0]
 803533e:	68db      	ldr	r3, [r3, #12]
 8035340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8035344:	2b00      	cmp	r3, #0
 8035346:	d119      	bne.n	803537c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8035348:	687b      	ldr	r3, [r7, #4]
 803534a:	681b      	ldr	r3, [r3, #0]
 803534c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8035350:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8035352:	f7f6 ff79 	bl	802c248 <HAL_GetTick>
 8035356:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8035358:	e009      	b.n	803536e <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 803535a:	f7f6 ff75 	bl	802c248 <HAL_GetTick>
 803535e:	4602      	mov	r2, r0
 8035360:	68fb      	ldr	r3, [r7, #12]
 8035362:	1ad3      	subs	r3, r2, r3
 8035364:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8035368:	d901      	bls.n	803536e <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 803536a:	2303      	movs	r3, #3
 803536c:	e007      	b.n	803537e <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 803536e:	687b      	ldr	r3, [r7, #4]
 8035370:	681b      	ldr	r3, [r3, #0]
 8035372:	68db      	ldr	r3, [r3, #12]
 8035374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8035378:	2b00      	cmp	r3, #0
 803537a:	d0ee      	beq.n	803535a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 803537c:	2300      	movs	r3, #0
}
 803537e:	4618      	mov	r0, r3
 8035380:	3710      	adds	r7, #16
 8035382:	46bd      	mov	sp, r7
 8035384:	bd80      	pop	{r7, pc}

08035386 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8035386:	b480      	push	{r7}
 8035388:	b085      	sub	sp, #20
 803538a:	af00      	add	r7, sp, #0
 803538c:	4603      	mov	r3, r0
 803538e:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8035390:	2300      	movs	r3, #0
 8035392:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8035394:	e005      	b.n	80353a2 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8035396:	68fb      	ldr	r3, [r7, #12]
 8035398:	3301      	adds	r3, #1
 803539a:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 803539c:	79fb      	ldrb	r3, [r7, #7]
 803539e:	3b0a      	subs	r3, #10
 80353a0:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80353a2:	79fb      	ldrb	r3, [r7, #7]
 80353a4:	2b09      	cmp	r3, #9
 80353a6:	d8f6      	bhi.n	8035396 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80353a8:	68fb      	ldr	r3, [r7, #12]
 80353aa:	b2db      	uxtb	r3, r3
 80353ac:	011b      	lsls	r3, r3, #4
 80353ae:	b2da      	uxtb	r2, r3
 80353b0:	79fb      	ldrb	r3, [r7, #7]
 80353b2:	4313      	orrs	r3, r2
 80353b4:	b2db      	uxtb	r3, r3
}
 80353b6:	4618      	mov	r0, r3
 80353b8:	3714      	adds	r7, #20
 80353ba:	46bd      	mov	sp, r7
 80353bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80353c0:	4770      	bx	lr

080353c2 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80353c2:	b480      	push	{r7}
 80353c4:	b085      	sub	sp, #20
 80353c6:	af00      	add	r7, sp, #0
 80353c8:	4603      	mov	r3, r0
 80353ca:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80353cc:	2300      	movs	r3, #0
 80353ce:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80353d0:	79fb      	ldrb	r3, [r7, #7]
 80353d2:	091b      	lsrs	r3, r3, #4
 80353d4:	b2db      	uxtb	r3, r3
 80353d6:	461a      	mov	r2, r3
 80353d8:	4613      	mov	r3, r2
 80353da:	009b      	lsls	r3, r3, #2
 80353dc:	4413      	add	r3, r2
 80353de:	005b      	lsls	r3, r3, #1
 80353e0:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80353e2:	79fb      	ldrb	r3, [r7, #7]
 80353e4:	f003 030f 	and.w	r3, r3, #15
 80353e8:	b2da      	uxtb	r2, r3
 80353ea:	68fb      	ldr	r3, [r7, #12]
 80353ec:	b2db      	uxtb	r3, r3
 80353ee:	4413      	add	r3, r2
 80353f0:	b2db      	uxtb	r3, r3
}
 80353f2:	4618      	mov	r0, r3
 80353f4:	3714      	adds	r7, #20
 80353f6:	46bd      	mov	sp, r7
 80353f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80353fc:	4770      	bx	lr

080353fe <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80353fe:	b580      	push	{r7, lr}
 8035400:	b082      	sub	sp, #8
 8035402:	af00      	add	r7, sp, #0
 8035404:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8035406:	687b      	ldr	r3, [r7, #4]
 8035408:	2b00      	cmp	r3, #0
 803540a:	d101      	bne.n	8035410 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 803540c:	2301      	movs	r3, #1
 803540e:	e056      	b.n	80354be <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8035410:	687b      	ldr	r3, [r7, #4]
 8035412:	2200      	movs	r2, #0
 8035414:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8035416:	687b      	ldr	r3, [r7, #4]
 8035418:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 803541c:	b2db      	uxtb	r3, r3
 803541e:	2b00      	cmp	r3, #0
 8035420:	d106      	bne.n	8035430 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8035422:	687b      	ldr	r3, [r7, #4]
 8035424:	2200      	movs	r2, #0
 8035426:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 803542a:	6878      	ldr	r0, [r7, #4]
 803542c:	f7f6 faf8 	bl	802ba20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8035430:	687b      	ldr	r3, [r7, #4]
 8035432:	2202      	movs	r2, #2
 8035434:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8035438:	687b      	ldr	r3, [r7, #4]
 803543a:	681b      	ldr	r3, [r3, #0]
 803543c:	681a      	ldr	r2, [r3, #0]
 803543e:	687b      	ldr	r3, [r7, #4]
 8035440:	681b      	ldr	r3, [r3, #0]
 8035442:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8035446:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8035448:	687b      	ldr	r3, [r7, #4]
 803544a:	685a      	ldr	r2, [r3, #4]
 803544c:	687b      	ldr	r3, [r7, #4]
 803544e:	689b      	ldr	r3, [r3, #8]
 8035450:	431a      	orrs	r2, r3
 8035452:	687b      	ldr	r3, [r7, #4]
 8035454:	68db      	ldr	r3, [r3, #12]
 8035456:	431a      	orrs	r2, r3
 8035458:	687b      	ldr	r3, [r7, #4]
 803545a:	691b      	ldr	r3, [r3, #16]
 803545c:	431a      	orrs	r2, r3
 803545e:	687b      	ldr	r3, [r7, #4]
 8035460:	695b      	ldr	r3, [r3, #20]
 8035462:	431a      	orrs	r2, r3
 8035464:	687b      	ldr	r3, [r7, #4]
 8035466:	699b      	ldr	r3, [r3, #24]
 8035468:	f403 7300 	and.w	r3, r3, #512	; 0x200
 803546c:	431a      	orrs	r2, r3
 803546e:	687b      	ldr	r3, [r7, #4]
 8035470:	69db      	ldr	r3, [r3, #28]
 8035472:	431a      	orrs	r2, r3
 8035474:	687b      	ldr	r3, [r7, #4]
 8035476:	6a1b      	ldr	r3, [r3, #32]
 8035478:	ea42 0103 	orr.w	r1, r2, r3
 803547c:	687b      	ldr	r3, [r7, #4]
 803547e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8035480:	687b      	ldr	r3, [r7, #4]
 8035482:	681b      	ldr	r3, [r3, #0]
 8035484:	430a      	orrs	r2, r1
 8035486:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8035488:	687b      	ldr	r3, [r7, #4]
 803548a:	699b      	ldr	r3, [r3, #24]
 803548c:	0c1b      	lsrs	r3, r3, #16
 803548e:	f003 0104 	and.w	r1, r3, #4
 8035492:	687b      	ldr	r3, [r7, #4]
 8035494:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8035496:	687b      	ldr	r3, [r7, #4]
 8035498:	681b      	ldr	r3, [r3, #0]
 803549a:	430a      	orrs	r2, r1
 803549c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 803549e:	687b      	ldr	r3, [r7, #4]
 80354a0:	681b      	ldr	r3, [r3, #0]
 80354a2:	69da      	ldr	r2, [r3, #28]
 80354a4:	687b      	ldr	r3, [r7, #4]
 80354a6:	681b      	ldr	r3, [r3, #0]
 80354a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80354ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80354ae:	687b      	ldr	r3, [r7, #4]
 80354b0:	2200      	movs	r2, #0
 80354b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80354b4:	687b      	ldr	r3, [r7, #4]
 80354b6:	2201      	movs	r2, #1
 80354b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80354bc:	2300      	movs	r3, #0
}
 80354be:	4618      	mov	r0, r3
 80354c0:	3708      	adds	r7, #8
 80354c2:	46bd      	mov	sp, r7
 80354c4:	bd80      	pop	{r7, pc}

080354c6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80354c6:	b580      	push	{r7, lr}
 80354c8:	b08c      	sub	sp, #48	; 0x30
 80354ca:	af00      	add	r7, sp, #0
 80354cc:	60f8      	str	r0, [r7, #12]
 80354ce:	60b9      	str	r1, [r7, #8]
 80354d0:	607a      	str	r2, [r7, #4]
 80354d2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80354d4:	2301      	movs	r3, #1
 80354d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80354d8:	2300      	movs	r3, #0
 80354da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80354de:	68fb      	ldr	r3, [r7, #12]
 80354e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80354e4:	2b01      	cmp	r3, #1
 80354e6:	d101      	bne.n	80354ec <HAL_SPI_TransmitReceive+0x26>
 80354e8:	2302      	movs	r3, #2
 80354ea:	e18a      	b.n	8035802 <HAL_SPI_TransmitReceive+0x33c>
 80354ec:	68fb      	ldr	r3, [r7, #12]
 80354ee:	2201      	movs	r2, #1
 80354f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80354f4:	f7f6 fea8 	bl	802c248 <HAL_GetTick>
 80354f8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80354fa:	68fb      	ldr	r3, [r7, #12]
 80354fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8035500:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8035504:	68fb      	ldr	r3, [r7, #12]
 8035506:	685b      	ldr	r3, [r3, #4]
 8035508:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 803550a:	887b      	ldrh	r3, [r7, #2]
 803550c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 803550e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8035512:	2b01      	cmp	r3, #1
 8035514:	d00f      	beq.n	8035536 <HAL_SPI_TransmitReceive+0x70>
 8035516:	69fb      	ldr	r3, [r7, #28]
 8035518:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 803551c:	d107      	bne.n	803552e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 803551e:	68fb      	ldr	r3, [r7, #12]
 8035520:	689b      	ldr	r3, [r3, #8]
 8035522:	2b00      	cmp	r3, #0
 8035524:	d103      	bne.n	803552e <HAL_SPI_TransmitReceive+0x68>
 8035526:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 803552a:	2b04      	cmp	r3, #4
 803552c:	d003      	beq.n	8035536 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 803552e:	2302      	movs	r3, #2
 8035530:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8035534:	e15b      	b.n	80357ee <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8035536:	68bb      	ldr	r3, [r7, #8]
 8035538:	2b00      	cmp	r3, #0
 803553a:	d005      	beq.n	8035548 <HAL_SPI_TransmitReceive+0x82>
 803553c:	687b      	ldr	r3, [r7, #4]
 803553e:	2b00      	cmp	r3, #0
 8035540:	d002      	beq.n	8035548 <HAL_SPI_TransmitReceive+0x82>
 8035542:	887b      	ldrh	r3, [r7, #2]
 8035544:	2b00      	cmp	r3, #0
 8035546:	d103      	bne.n	8035550 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8035548:	2301      	movs	r3, #1
 803554a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 803554e:	e14e      	b.n	80357ee <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8035550:	68fb      	ldr	r3, [r7, #12]
 8035552:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8035556:	b2db      	uxtb	r3, r3
 8035558:	2b04      	cmp	r3, #4
 803555a:	d003      	beq.n	8035564 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 803555c:	68fb      	ldr	r3, [r7, #12]
 803555e:	2205      	movs	r2, #5
 8035560:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8035564:	68fb      	ldr	r3, [r7, #12]
 8035566:	2200      	movs	r2, #0
 8035568:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 803556a:	68fb      	ldr	r3, [r7, #12]
 803556c:	687a      	ldr	r2, [r7, #4]
 803556e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8035570:	68fb      	ldr	r3, [r7, #12]
 8035572:	887a      	ldrh	r2, [r7, #2]
 8035574:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8035576:	68fb      	ldr	r3, [r7, #12]
 8035578:	887a      	ldrh	r2, [r7, #2]
 803557a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 803557c:	68fb      	ldr	r3, [r7, #12]
 803557e:	68ba      	ldr	r2, [r7, #8]
 8035580:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8035582:	68fb      	ldr	r3, [r7, #12]
 8035584:	887a      	ldrh	r2, [r7, #2]
 8035586:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8035588:	68fb      	ldr	r3, [r7, #12]
 803558a:	887a      	ldrh	r2, [r7, #2]
 803558c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 803558e:	68fb      	ldr	r3, [r7, #12]
 8035590:	2200      	movs	r2, #0
 8035592:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8035594:	68fb      	ldr	r3, [r7, #12]
 8035596:	2200      	movs	r2, #0
 8035598:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 803559a:	68fb      	ldr	r3, [r7, #12]
 803559c:	681b      	ldr	r3, [r3, #0]
 803559e:	681b      	ldr	r3, [r3, #0]
 80355a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80355a4:	2b40      	cmp	r3, #64	; 0x40
 80355a6:	d007      	beq.n	80355b8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80355a8:	68fb      	ldr	r3, [r7, #12]
 80355aa:	681b      	ldr	r3, [r3, #0]
 80355ac:	681a      	ldr	r2, [r3, #0]
 80355ae:	68fb      	ldr	r3, [r7, #12]
 80355b0:	681b      	ldr	r3, [r3, #0]
 80355b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80355b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80355b8:	68fb      	ldr	r3, [r7, #12]
 80355ba:	68db      	ldr	r3, [r3, #12]
 80355bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80355c0:	d178      	bne.n	80356b4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80355c2:	68fb      	ldr	r3, [r7, #12]
 80355c4:	685b      	ldr	r3, [r3, #4]
 80355c6:	2b00      	cmp	r3, #0
 80355c8:	d002      	beq.n	80355d0 <HAL_SPI_TransmitReceive+0x10a>
 80355ca:	8b7b      	ldrh	r3, [r7, #26]
 80355cc:	2b01      	cmp	r3, #1
 80355ce:	d166      	bne.n	803569e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80355d0:	68fb      	ldr	r3, [r7, #12]
 80355d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80355d4:	881a      	ldrh	r2, [r3, #0]
 80355d6:	68fb      	ldr	r3, [r7, #12]
 80355d8:	681b      	ldr	r3, [r3, #0]
 80355da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80355dc:	68fb      	ldr	r3, [r7, #12]
 80355de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80355e0:	1c9a      	adds	r2, r3, #2
 80355e2:	68fb      	ldr	r3, [r7, #12]
 80355e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80355e6:	68fb      	ldr	r3, [r7, #12]
 80355e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80355ea:	b29b      	uxth	r3, r3
 80355ec:	3b01      	subs	r3, #1
 80355ee:	b29a      	uxth	r2, r3
 80355f0:	68fb      	ldr	r3, [r7, #12]
 80355f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80355f4:	e053      	b.n	803569e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80355f6:	68fb      	ldr	r3, [r7, #12]
 80355f8:	681b      	ldr	r3, [r3, #0]
 80355fa:	689b      	ldr	r3, [r3, #8]
 80355fc:	f003 0302 	and.w	r3, r3, #2
 8035600:	2b02      	cmp	r3, #2
 8035602:	d11b      	bne.n	803563c <HAL_SPI_TransmitReceive+0x176>
 8035604:	68fb      	ldr	r3, [r7, #12]
 8035606:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8035608:	b29b      	uxth	r3, r3
 803560a:	2b00      	cmp	r3, #0
 803560c:	d016      	beq.n	803563c <HAL_SPI_TransmitReceive+0x176>
 803560e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8035610:	2b01      	cmp	r3, #1
 8035612:	d113      	bne.n	803563c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8035614:	68fb      	ldr	r3, [r7, #12]
 8035616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8035618:	881a      	ldrh	r2, [r3, #0]
 803561a:	68fb      	ldr	r3, [r7, #12]
 803561c:	681b      	ldr	r3, [r3, #0]
 803561e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8035620:	68fb      	ldr	r3, [r7, #12]
 8035622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8035624:	1c9a      	adds	r2, r3, #2
 8035626:	68fb      	ldr	r3, [r7, #12]
 8035628:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 803562a:	68fb      	ldr	r3, [r7, #12]
 803562c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 803562e:	b29b      	uxth	r3, r3
 8035630:	3b01      	subs	r3, #1
 8035632:	b29a      	uxth	r2, r3
 8035634:	68fb      	ldr	r3, [r7, #12]
 8035636:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8035638:	2300      	movs	r3, #0
 803563a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 803563c:	68fb      	ldr	r3, [r7, #12]
 803563e:	681b      	ldr	r3, [r3, #0]
 8035640:	689b      	ldr	r3, [r3, #8]
 8035642:	f003 0301 	and.w	r3, r3, #1
 8035646:	2b01      	cmp	r3, #1
 8035648:	d119      	bne.n	803567e <HAL_SPI_TransmitReceive+0x1b8>
 803564a:	68fb      	ldr	r3, [r7, #12]
 803564c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 803564e:	b29b      	uxth	r3, r3
 8035650:	2b00      	cmp	r3, #0
 8035652:	d014      	beq.n	803567e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8035654:	68fb      	ldr	r3, [r7, #12]
 8035656:	681b      	ldr	r3, [r3, #0]
 8035658:	68da      	ldr	r2, [r3, #12]
 803565a:	68fb      	ldr	r3, [r7, #12]
 803565c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803565e:	b292      	uxth	r2, r2
 8035660:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8035662:	68fb      	ldr	r3, [r7, #12]
 8035664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8035666:	1c9a      	adds	r2, r3, #2
 8035668:	68fb      	ldr	r3, [r7, #12]
 803566a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 803566c:	68fb      	ldr	r3, [r7, #12]
 803566e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8035670:	b29b      	uxth	r3, r3
 8035672:	3b01      	subs	r3, #1
 8035674:	b29a      	uxth	r2, r3
 8035676:	68fb      	ldr	r3, [r7, #12]
 8035678:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 803567a:	2301      	movs	r3, #1
 803567c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 803567e:	f7f6 fde3 	bl	802c248 <HAL_GetTick>
 8035682:	4602      	mov	r2, r0
 8035684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8035686:	1ad3      	subs	r3, r2, r3
 8035688:	6bba      	ldr	r2, [r7, #56]	; 0x38
 803568a:	429a      	cmp	r2, r3
 803568c:	d807      	bhi.n	803569e <HAL_SPI_TransmitReceive+0x1d8>
 803568e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8035690:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8035694:	d003      	beq.n	803569e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8035696:	2303      	movs	r3, #3
 8035698:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 803569c:	e0a7      	b.n	80357ee <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 803569e:	68fb      	ldr	r3, [r7, #12]
 80356a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80356a2:	b29b      	uxth	r3, r3
 80356a4:	2b00      	cmp	r3, #0
 80356a6:	d1a6      	bne.n	80355f6 <HAL_SPI_TransmitReceive+0x130>
 80356a8:	68fb      	ldr	r3, [r7, #12]
 80356aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80356ac:	b29b      	uxth	r3, r3
 80356ae:	2b00      	cmp	r3, #0
 80356b0:	d1a1      	bne.n	80355f6 <HAL_SPI_TransmitReceive+0x130>
 80356b2:	e07c      	b.n	80357ae <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80356b4:	68fb      	ldr	r3, [r7, #12]
 80356b6:	685b      	ldr	r3, [r3, #4]
 80356b8:	2b00      	cmp	r3, #0
 80356ba:	d002      	beq.n	80356c2 <HAL_SPI_TransmitReceive+0x1fc>
 80356bc:	8b7b      	ldrh	r3, [r7, #26]
 80356be:	2b01      	cmp	r3, #1
 80356c0:	d16b      	bne.n	803579a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80356c2:	68fb      	ldr	r3, [r7, #12]
 80356c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80356c6:	68fb      	ldr	r3, [r7, #12]
 80356c8:	681b      	ldr	r3, [r3, #0]
 80356ca:	330c      	adds	r3, #12
 80356cc:	7812      	ldrb	r2, [r2, #0]
 80356ce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80356d0:	68fb      	ldr	r3, [r7, #12]
 80356d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80356d4:	1c5a      	adds	r2, r3, #1
 80356d6:	68fb      	ldr	r3, [r7, #12]
 80356d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80356da:	68fb      	ldr	r3, [r7, #12]
 80356dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80356de:	b29b      	uxth	r3, r3
 80356e0:	3b01      	subs	r3, #1
 80356e2:	b29a      	uxth	r2, r3
 80356e4:	68fb      	ldr	r3, [r7, #12]
 80356e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80356e8:	e057      	b.n	803579a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80356ea:	68fb      	ldr	r3, [r7, #12]
 80356ec:	681b      	ldr	r3, [r3, #0]
 80356ee:	689b      	ldr	r3, [r3, #8]
 80356f0:	f003 0302 	and.w	r3, r3, #2
 80356f4:	2b02      	cmp	r3, #2
 80356f6:	d11c      	bne.n	8035732 <HAL_SPI_TransmitReceive+0x26c>
 80356f8:	68fb      	ldr	r3, [r7, #12]
 80356fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80356fc:	b29b      	uxth	r3, r3
 80356fe:	2b00      	cmp	r3, #0
 8035700:	d017      	beq.n	8035732 <HAL_SPI_TransmitReceive+0x26c>
 8035702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8035704:	2b01      	cmp	r3, #1
 8035706:	d114      	bne.n	8035732 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8035708:	68fb      	ldr	r3, [r7, #12]
 803570a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 803570c:	68fb      	ldr	r3, [r7, #12]
 803570e:	681b      	ldr	r3, [r3, #0]
 8035710:	330c      	adds	r3, #12
 8035712:	7812      	ldrb	r2, [r2, #0]
 8035714:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8035716:	68fb      	ldr	r3, [r7, #12]
 8035718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803571a:	1c5a      	adds	r2, r3, #1
 803571c:	68fb      	ldr	r3, [r7, #12]
 803571e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8035720:	68fb      	ldr	r3, [r7, #12]
 8035722:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8035724:	b29b      	uxth	r3, r3
 8035726:	3b01      	subs	r3, #1
 8035728:	b29a      	uxth	r2, r3
 803572a:	68fb      	ldr	r3, [r7, #12]
 803572c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 803572e:	2300      	movs	r3, #0
 8035730:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8035732:	68fb      	ldr	r3, [r7, #12]
 8035734:	681b      	ldr	r3, [r3, #0]
 8035736:	689b      	ldr	r3, [r3, #8]
 8035738:	f003 0301 	and.w	r3, r3, #1
 803573c:	2b01      	cmp	r3, #1
 803573e:	d119      	bne.n	8035774 <HAL_SPI_TransmitReceive+0x2ae>
 8035740:	68fb      	ldr	r3, [r7, #12]
 8035742:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8035744:	b29b      	uxth	r3, r3
 8035746:	2b00      	cmp	r3, #0
 8035748:	d014      	beq.n	8035774 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 803574a:	68fb      	ldr	r3, [r7, #12]
 803574c:	681b      	ldr	r3, [r3, #0]
 803574e:	68da      	ldr	r2, [r3, #12]
 8035750:	68fb      	ldr	r3, [r7, #12]
 8035752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8035754:	b2d2      	uxtb	r2, r2
 8035756:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8035758:	68fb      	ldr	r3, [r7, #12]
 803575a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803575c:	1c5a      	adds	r2, r3, #1
 803575e:	68fb      	ldr	r3, [r7, #12]
 8035760:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8035762:	68fb      	ldr	r3, [r7, #12]
 8035764:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8035766:	b29b      	uxth	r3, r3
 8035768:	3b01      	subs	r3, #1
 803576a:	b29a      	uxth	r2, r3
 803576c:	68fb      	ldr	r3, [r7, #12]
 803576e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8035770:	2301      	movs	r3, #1
 8035772:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8035774:	f7f6 fd68 	bl	802c248 <HAL_GetTick>
 8035778:	4602      	mov	r2, r0
 803577a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803577c:	1ad3      	subs	r3, r2, r3
 803577e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8035780:	429a      	cmp	r2, r3
 8035782:	d803      	bhi.n	803578c <HAL_SPI_TransmitReceive+0x2c6>
 8035784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8035786:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 803578a:	d102      	bne.n	8035792 <HAL_SPI_TransmitReceive+0x2cc>
 803578c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803578e:	2b00      	cmp	r3, #0
 8035790:	d103      	bne.n	803579a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8035792:	2303      	movs	r3, #3
 8035794:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8035798:	e029      	b.n	80357ee <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 803579a:	68fb      	ldr	r3, [r7, #12]
 803579c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 803579e:	b29b      	uxth	r3, r3
 80357a0:	2b00      	cmp	r3, #0
 80357a2:	d1a2      	bne.n	80356ea <HAL_SPI_TransmitReceive+0x224>
 80357a4:	68fb      	ldr	r3, [r7, #12]
 80357a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80357a8:	b29b      	uxth	r3, r3
 80357aa:	2b00      	cmp	r3, #0
 80357ac:	d19d      	bne.n	80356ea <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80357ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80357b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80357b2:	68f8      	ldr	r0, [r7, #12]
 80357b4:	f000 f894 	bl	80358e0 <SPI_EndRxTxTransaction>
 80357b8:	4603      	mov	r3, r0
 80357ba:	2b00      	cmp	r3, #0
 80357bc:	d006      	beq.n	80357cc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80357be:	2301      	movs	r3, #1
 80357c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80357c4:	68fb      	ldr	r3, [r7, #12]
 80357c6:	2220      	movs	r2, #32
 80357c8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80357ca:	e010      	b.n	80357ee <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80357cc:	68fb      	ldr	r3, [r7, #12]
 80357ce:	689b      	ldr	r3, [r3, #8]
 80357d0:	2b00      	cmp	r3, #0
 80357d2:	d10b      	bne.n	80357ec <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80357d4:	2300      	movs	r3, #0
 80357d6:	617b      	str	r3, [r7, #20]
 80357d8:	68fb      	ldr	r3, [r7, #12]
 80357da:	681b      	ldr	r3, [r3, #0]
 80357dc:	68db      	ldr	r3, [r3, #12]
 80357de:	617b      	str	r3, [r7, #20]
 80357e0:	68fb      	ldr	r3, [r7, #12]
 80357e2:	681b      	ldr	r3, [r3, #0]
 80357e4:	689b      	ldr	r3, [r3, #8]
 80357e6:	617b      	str	r3, [r7, #20]
 80357e8:	697b      	ldr	r3, [r7, #20]
 80357ea:	e000      	b.n	80357ee <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80357ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80357ee:	68fb      	ldr	r3, [r7, #12]
 80357f0:	2201      	movs	r2, #1
 80357f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80357f6:	68fb      	ldr	r3, [r7, #12]
 80357f8:	2200      	movs	r2, #0
 80357fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80357fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8035802:	4618      	mov	r0, r3
 8035804:	3730      	adds	r7, #48	; 0x30
 8035806:	46bd      	mov	sp, r7
 8035808:	bd80      	pop	{r7, pc}

0803580a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 803580a:	b580      	push	{r7, lr}
 803580c:	b084      	sub	sp, #16
 803580e:	af00      	add	r7, sp, #0
 8035810:	60f8      	str	r0, [r7, #12]
 8035812:	60b9      	str	r1, [r7, #8]
 8035814:	603b      	str	r3, [r7, #0]
 8035816:	4613      	mov	r3, r2
 8035818:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 803581a:	e04c      	b.n	80358b6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 803581c:	683b      	ldr	r3, [r7, #0]
 803581e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8035822:	d048      	beq.n	80358b6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8035824:	f7f6 fd10 	bl	802c248 <HAL_GetTick>
 8035828:	4602      	mov	r2, r0
 803582a:	69bb      	ldr	r3, [r7, #24]
 803582c:	1ad3      	subs	r3, r2, r3
 803582e:	683a      	ldr	r2, [r7, #0]
 8035830:	429a      	cmp	r2, r3
 8035832:	d902      	bls.n	803583a <SPI_WaitFlagStateUntilTimeout+0x30>
 8035834:	683b      	ldr	r3, [r7, #0]
 8035836:	2b00      	cmp	r3, #0
 8035838:	d13d      	bne.n	80358b6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 803583a:	68fb      	ldr	r3, [r7, #12]
 803583c:	681b      	ldr	r3, [r3, #0]
 803583e:	685a      	ldr	r2, [r3, #4]
 8035840:	68fb      	ldr	r3, [r7, #12]
 8035842:	681b      	ldr	r3, [r3, #0]
 8035844:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8035848:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 803584a:	68fb      	ldr	r3, [r7, #12]
 803584c:	685b      	ldr	r3, [r3, #4]
 803584e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8035852:	d111      	bne.n	8035878 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8035854:	68fb      	ldr	r3, [r7, #12]
 8035856:	689b      	ldr	r3, [r3, #8]
 8035858:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 803585c:	d004      	beq.n	8035868 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 803585e:	68fb      	ldr	r3, [r7, #12]
 8035860:	689b      	ldr	r3, [r3, #8]
 8035862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8035866:	d107      	bne.n	8035878 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8035868:	68fb      	ldr	r3, [r7, #12]
 803586a:	681b      	ldr	r3, [r3, #0]
 803586c:	681a      	ldr	r2, [r3, #0]
 803586e:	68fb      	ldr	r3, [r7, #12]
 8035870:	681b      	ldr	r3, [r3, #0]
 8035872:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8035876:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8035878:	68fb      	ldr	r3, [r7, #12]
 803587a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803587c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8035880:	d10f      	bne.n	80358a2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8035882:	68fb      	ldr	r3, [r7, #12]
 8035884:	681b      	ldr	r3, [r3, #0]
 8035886:	681a      	ldr	r2, [r3, #0]
 8035888:	68fb      	ldr	r3, [r7, #12]
 803588a:	681b      	ldr	r3, [r3, #0]
 803588c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8035890:	601a      	str	r2, [r3, #0]
 8035892:	68fb      	ldr	r3, [r7, #12]
 8035894:	681b      	ldr	r3, [r3, #0]
 8035896:	681a      	ldr	r2, [r3, #0]
 8035898:	68fb      	ldr	r3, [r7, #12]
 803589a:	681b      	ldr	r3, [r3, #0]
 803589c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80358a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80358a2:	68fb      	ldr	r3, [r7, #12]
 80358a4:	2201      	movs	r2, #1
 80358a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80358aa:	68fb      	ldr	r3, [r7, #12]
 80358ac:	2200      	movs	r2, #0
 80358ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80358b2:	2303      	movs	r3, #3
 80358b4:	e00f      	b.n	80358d6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80358b6:	68fb      	ldr	r3, [r7, #12]
 80358b8:	681b      	ldr	r3, [r3, #0]
 80358ba:	689a      	ldr	r2, [r3, #8]
 80358bc:	68bb      	ldr	r3, [r7, #8]
 80358be:	4013      	ands	r3, r2
 80358c0:	68ba      	ldr	r2, [r7, #8]
 80358c2:	429a      	cmp	r2, r3
 80358c4:	bf0c      	ite	eq
 80358c6:	2301      	moveq	r3, #1
 80358c8:	2300      	movne	r3, #0
 80358ca:	b2db      	uxtb	r3, r3
 80358cc:	461a      	mov	r2, r3
 80358ce:	79fb      	ldrb	r3, [r7, #7]
 80358d0:	429a      	cmp	r2, r3
 80358d2:	d1a3      	bne.n	803581c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80358d4:	2300      	movs	r3, #0
}
 80358d6:	4618      	mov	r0, r3
 80358d8:	3710      	adds	r7, #16
 80358da:	46bd      	mov	sp, r7
 80358dc:	bd80      	pop	{r7, pc}
	...

080358e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80358e0:	b580      	push	{r7, lr}
 80358e2:	b088      	sub	sp, #32
 80358e4:	af02      	add	r7, sp, #8
 80358e6:	60f8      	str	r0, [r7, #12]
 80358e8:	60b9      	str	r1, [r7, #8]
 80358ea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80358ec:	4b1b      	ldr	r3, [pc, #108]	; (803595c <SPI_EndRxTxTransaction+0x7c>)
 80358ee:	681b      	ldr	r3, [r3, #0]
 80358f0:	4a1b      	ldr	r2, [pc, #108]	; (8035960 <SPI_EndRxTxTransaction+0x80>)
 80358f2:	fba2 2303 	umull	r2, r3, r2, r3
 80358f6:	0d5b      	lsrs	r3, r3, #21
 80358f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80358fc:	fb02 f303 	mul.w	r3, r2, r3
 8035900:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8035902:	68fb      	ldr	r3, [r7, #12]
 8035904:	685b      	ldr	r3, [r3, #4]
 8035906:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 803590a:	d112      	bne.n	8035932 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 803590c:	687b      	ldr	r3, [r7, #4]
 803590e:	9300      	str	r3, [sp, #0]
 8035910:	68bb      	ldr	r3, [r7, #8]
 8035912:	2200      	movs	r2, #0
 8035914:	2180      	movs	r1, #128	; 0x80
 8035916:	68f8      	ldr	r0, [r7, #12]
 8035918:	f7ff ff77 	bl	803580a <SPI_WaitFlagStateUntilTimeout>
 803591c:	4603      	mov	r3, r0
 803591e:	2b00      	cmp	r3, #0
 8035920:	d016      	beq.n	8035950 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8035922:	68fb      	ldr	r3, [r7, #12]
 8035924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035926:	f043 0220 	orr.w	r2, r3, #32
 803592a:	68fb      	ldr	r3, [r7, #12]
 803592c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 803592e:	2303      	movs	r3, #3
 8035930:	e00f      	b.n	8035952 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8035932:	697b      	ldr	r3, [r7, #20]
 8035934:	2b00      	cmp	r3, #0
 8035936:	d00a      	beq.n	803594e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8035938:	697b      	ldr	r3, [r7, #20]
 803593a:	3b01      	subs	r3, #1
 803593c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 803593e:	68fb      	ldr	r3, [r7, #12]
 8035940:	681b      	ldr	r3, [r3, #0]
 8035942:	689b      	ldr	r3, [r3, #8]
 8035944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8035948:	2b80      	cmp	r3, #128	; 0x80
 803594a:	d0f2      	beq.n	8035932 <SPI_EndRxTxTransaction+0x52>
 803594c:	e000      	b.n	8035950 <SPI_EndRxTxTransaction+0x70>
        break;
 803594e:	bf00      	nop
  }

  return HAL_OK;
 8035950:	2300      	movs	r3, #0
}
 8035952:	4618      	mov	r0, r3
 8035954:	3718      	adds	r7, #24
 8035956:	46bd      	mov	sp, r7
 8035958:	bd80      	pop	{r7, pc}
 803595a:	bf00      	nop
 803595c:	20000294 	.word	0x20000294
 8035960:	165e9f81 	.word	0x165e9f81

08035964 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8035964:	b580      	push	{r7, lr}
 8035966:	b082      	sub	sp, #8
 8035968:	af00      	add	r7, sp, #0
 803596a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 803596c:	687b      	ldr	r3, [r7, #4]
 803596e:	2b00      	cmp	r3, #0
 8035970:	d101      	bne.n	8035976 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8035972:	2301      	movs	r3, #1
 8035974:	e01d      	b.n	80359b2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8035976:	687b      	ldr	r3, [r7, #4]
 8035978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 803597c:	b2db      	uxtb	r3, r3
 803597e:	2b00      	cmp	r3, #0
 8035980:	d106      	bne.n	8035990 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8035982:	687b      	ldr	r3, [r7, #4]
 8035984:	2200      	movs	r2, #0
 8035986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 803598a:	6878      	ldr	r0, [r7, #4]
 803598c:	f7f6 f890 	bl	802bab0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8035990:	687b      	ldr	r3, [r7, #4]
 8035992:	2202      	movs	r2, #2
 8035994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8035998:	687b      	ldr	r3, [r7, #4]
 803599a:	681a      	ldr	r2, [r3, #0]
 803599c:	687b      	ldr	r3, [r7, #4]
 803599e:	3304      	adds	r3, #4
 80359a0:	4619      	mov	r1, r3
 80359a2:	4610      	mov	r0, r2
 80359a4:	f000 fa58 	bl	8035e58 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80359a8:	687b      	ldr	r3, [r7, #4]
 80359aa:	2201      	movs	r2, #1
 80359ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80359b0:	2300      	movs	r3, #0
}
 80359b2:	4618      	mov	r0, r3
 80359b4:	3708      	adds	r7, #8
 80359b6:	46bd      	mov	sp, r7
 80359b8:	bd80      	pop	{r7, pc}

080359ba <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80359ba:	b480      	push	{r7}
 80359bc:	b085      	sub	sp, #20
 80359be:	af00      	add	r7, sp, #0
 80359c0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80359c2:	687b      	ldr	r3, [r7, #4]
 80359c4:	681b      	ldr	r3, [r3, #0]
 80359c6:	68da      	ldr	r2, [r3, #12]
 80359c8:	687b      	ldr	r3, [r7, #4]
 80359ca:	681b      	ldr	r3, [r3, #0]
 80359cc:	f042 0201 	orr.w	r2, r2, #1
 80359d0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80359d2:	687b      	ldr	r3, [r7, #4]
 80359d4:	681b      	ldr	r3, [r3, #0]
 80359d6:	689b      	ldr	r3, [r3, #8]
 80359d8:	f003 0307 	and.w	r3, r3, #7
 80359dc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80359de:	68fb      	ldr	r3, [r7, #12]
 80359e0:	2b06      	cmp	r3, #6
 80359e2:	d007      	beq.n	80359f4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80359e4:	687b      	ldr	r3, [r7, #4]
 80359e6:	681b      	ldr	r3, [r3, #0]
 80359e8:	681a      	ldr	r2, [r3, #0]
 80359ea:	687b      	ldr	r3, [r7, #4]
 80359ec:	681b      	ldr	r3, [r3, #0]
 80359ee:	f042 0201 	orr.w	r2, r2, #1
 80359f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80359f4:	2300      	movs	r3, #0
}
 80359f6:	4618      	mov	r0, r3
 80359f8:	3714      	adds	r7, #20
 80359fa:	46bd      	mov	sp, r7
 80359fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035a00:	4770      	bx	lr

08035a02 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8035a02:	b580      	push	{r7, lr}
 8035a04:	b082      	sub	sp, #8
 8035a06:	af00      	add	r7, sp, #0
 8035a08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8035a0a:	687b      	ldr	r3, [r7, #4]
 8035a0c:	2b00      	cmp	r3, #0
 8035a0e:	d101      	bne.n	8035a14 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8035a10:	2301      	movs	r3, #1
 8035a12:	e01d      	b.n	8035a50 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8035a14:	687b      	ldr	r3, [r7, #4]
 8035a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8035a1a:	b2db      	uxtb	r3, r3
 8035a1c:	2b00      	cmp	r3, #0
 8035a1e:	d106      	bne.n	8035a2e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8035a20:	687b      	ldr	r3, [r7, #4]
 8035a22:	2200      	movs	r2, #0
 8035a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8035a28:	6878      	ldr	r0, [r7, #4]
 8035a2a:	f000 f815 	bl	8035a58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8035a2e:	687b      	ldr	r3, [r7, #4]
 8035a30:	2202      	movs	r2, #2
 8035a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8035a36:	687b      	ldr	r3, [r7, #4]
 8035a38:	681a      	ldr	r2, [r3, #0]
 8035a3a:	687b      	ldr	r3, [r7, #4]
 8035a3c:	3304      	adds	r3, #4
 8035a3e:	4619      	mov	r1, r3
 8035a40:	4610      	mov	r0, r2
 8035a42:	f000 fa09 	bl	8035e58 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8035a46:	687b      	ldr	r3, [r7, #4]
 8035a48:	2201      	movs	r2, #1
 8035a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8035a4e:	2300      	movs	r3, #0
}
 8035a50:	4618      	mov	r0, r3
 8035a52:	3708      	adds	r7, #8
 8035a54:	46bd      	mov	sp, r7
 8035a56:	bd80      	pop	{r7, pc}

08035a58 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8035a58:	b480      	push	{r7}
 8035a5a:	b083      	sub	sp, #12
 8035a5c:	af00      	add	r7, sp, #0
 8035a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8035a60:	bf00      	nop
 8035a62:	370c      	adds	r7, #12
 8035a64:	46bd      	mov	sp, r7
 8035a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035a6a:	4770      	bx	lr

08035a6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8035a6c:	b580      	push	{r7, lr}
 8035a6e:	b082      	sub	sp, #8
 8035a70:	af00      	add	r7, sp, #0
 8035a72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8035a74:	687b      	ldr	r3, [r7, #4]
 8035a76:	681b      	ldr	r3, [r3, #0]
 8035a78:	691b      	ldr	r3, [r3, #16]
 8035a7a:	f003 0302 	and.w	r3, r3, #2
 8035a7e:	2b02      	cmp	r3, #2
 8035a80:	d122      	bne.n	8035ac8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8035a82:	687b      	ldr	r3, [r7, #4]
 8035a84:	681b      	ldr	r3, [r3, #0]
 8035a86:	68db      	ldr	r3, [r3, #12]
 8035a88:	f003 0302 	and.w	r3, r3, #2
 8035a8c:	2b02      	cmp	r3, #2
 8035a8e:	d11b      	bne.n	8035ac8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8035a90:	687b      	ldr	r3, [r7, #4]
 8035a92:	681b      	ldr	r3, [r3, #0]
 8035a94:	f06f 0202 	mvn.w	r2, #2
 8035a98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8035a9a:	687b      	ldr	r3, [r7, #4]
 8035a9c:	2201      	movs	r2, #1
 8035a9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8035aa0:	687b      	ldr	r3, [r7, #4]
 8035aa2:	681b      	ldr	r3, [r3, #0]
 8035aa4:	699b      	ldr	r3, [r3, #24]
 8035aa6:	f003 0303 	and.w	r3, r3, #3
 8035aaa:	2b00      	cmp	r3, #0
 8035aac:	d003      	beq.n	8035ab6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8035aae:	6878      	ldr	r0, [r7, #4]
 8035ab0:	f000 f9b4 	bl	8035e1c <HAL_TIM_IC_CaptureCallback>
 8035ab4:	e005      	b.n	8035ac2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8035ab6:	6878      	ldr	r0, [r7, #4]
 8035ab8:	f000 f9a6 	bl	8035e08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8035abc:	6878      	ldr	r0, [r7, #4]
 8035abe:	f000 f9b7 	bl	8035e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8035ac2:	687b      	ldr	r3, [r7, #4]
 8035ac4:	2200      	movs	r2, #0
 8035ac6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8035ac8:	687b      	ldr	r3, [r7, #4]
 8035aca:	681b      	ldr	r3, [r3, #0]
 8035acc:	691b      	ldr	r3, [r3, #16]
 8035ace:	f003 0304 	and.w	r3, r3, #4
 8035ad2:	2b04      	cmp	r3, #4
 8035ad4:	d122      	bne.n	8035b1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8035ad6:	687b      	ldr	r3, [r7, #4]
 8035ad8:	681b      	ldr	r3, [r3, #0]
 8035ada:	68db      	ldr	r3, [r3, #12]
 8035adc:	f003 0304 	and.w	r3, r3, #4
 8035ae0:	2b04      	cmp	r3, #4
 8035ae2:	d11b      	bne.n	8035b1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8035ae4:	687b      	ldr	r3, [r7, #4]
 8035ae6:	681b      	ldr	r3, [r3, #0]
 8035ae8:	f06f 0204 	mvn.w	r2, #4
 8035aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8035aee:	687b      	ldr	r3, [r7, #4]
 8035af0:	2202      	movs	r2, #2
 8035af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8035af4:	687b      	ldr	r3, [r7, #4]
 8035af6:	681b      	ldr	r3, [r3, #0]
 8035af8:	699b      	ldr	r3, [r3, #24]
 8035afa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8035afe:	2b00      	cmp	r3, #0
 8035b00:	d003      	beq.n	8035b0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8035b02:	6878      	ldr	r0, [r7, #4]
 8035b04:	f000 f98a 	bl	8035e1c <HAL_TIM_IC_CaptureCallback>
 8035b08:	e005      	b.n	8035b16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8035b0a:	6878      	ldr	r0, [r7, #4]
 8035b0c:	f000 f97c 	bl	8035e08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8035b10:	6878      	ldr	r0, [r7, #4]
 8035b12:	f000 f98d 	bl	8035e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8035b16:	687b      	ldr	r3, [r7, #4]
 8035b18:	2200      	movs	r2, #0
 8035b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8035b1c:	687b      	ldr	r3, [r7, #4]
 8035b1e:	681b      	ldr	r3, [r3, #0]
 8035b20:	691b      	ldr	r3, [r3, #16]
 8035b22:	f003 0308 	and.w	r3, r3, #8
 8035b26:	2b08      	cmp	r3, #8
 8035b28:	d122      	bne.n	8035b70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8035b2a:	687b      	ldr	r3, [r7, #4]
 8035b2c:	681b      	ldr	r3, [r3, #0]
 8035b2e:	68db      	ldr	r3, [r3, #12]
 8035b30:	f003 0308 	and.w	r3, r3, #8
 8035b34:	2b08      	cmp	r3, #8
 8035b36:	d11b      	bne.n	8035b70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8035b38:	687b      	ldr	r3, [r7, #4]
 8035b3a:	681b      	ldr	r3, [r3, #0]
 8035b3c:	f06f 0208 	mvn.w	r2, #8
 8035b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8035b42:	687b      	ldr	r3, [r7, #4]
 8035b44:	2204      	movs	r2, #4
 8035b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8035b48:	687b      	ldr	r3, [r7, #4]
 8035b4a:	681b      	ldr	r3, [r3, #0]
 8035b4c:	69db      	ldr	r3, [r3, #28]
 8035b4e:	f003 0303 	and.w	r3, r3, #3
 8035b52:	2b00      	cmp	r3, #0
 8035b54:	d003      	beq.n	8035b5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8035b56:	6878      	ldr	r0, [r7, #4]
 8035b58:	f000 f960 	bl	8035e1c <HAL_TIM_IC_CaptureCallback>
 8035b5c:	e005      	b.n	8035b6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8035b5e:	6878      	ldr	r0, [r7, #4]
 8035b60:	f000 f952 	bl	8035e08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8035b64:	6878      	ldr	r0, [r7, #4]
 8035b66:	f000 f963 	bl	8035e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8035b6a:	687b      	ldr	r3, [r7, #4]
 8035b6c:	2200      	movs	r2, #0
 8035b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8035b70:	687b      	ldr	r3, [r7, #4]
 8035b72:	681b      	ldr	r3, [r3, #0]
 8035b74:	691b      	ldr	r3, [r3, #16]
 8035b76:	f003 0310 	and.w	r3, r3, #16
 8035b7a:	2b10      	cmp	r3, #16
 8035b7c:	d122      	bne.n	8035bc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8035b7e:	687b      	ldr	r3, [r7, #4]
 8035b80:	681b      	ldr	r3, [r3, #0]
 8035b82:	68db      	ldr	r3, [r3, #12]
 8035b84:	f003 0310 	and.w	r3, r3, #16
 8035b88:	2b10      	cmp	r3, #16
 8035b8a:	d11b      	bne.n	8035bc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8035b8c:	687b      	ldr	r3, [r7, #4]
 8035b8e:	681b      	ldr	r3, [r3, #0]
 8035b90:	f06f 0210 	mvn.w	r2, #16
 8035b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8035b96:	687b      	ldr	r3, [r7, #4]
 8035b98:	2208      	movs	r2, #8
 8035b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8035b9c:	687b      	ldr	r3, [r7, #4]
 8035b9e:	681b      	ldr	r3, [r3, #0]
 8035ba0:	69db      	ldr	r3, [r3, #28]
 8035ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8035ba6:	2b00      	cmp	r3, #0
 8035ba8:	d003      	beq.n	8035bb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8035baa:	6878      	ldr	r0, [r7, #4]
 8035bac:	f000 f936 	bl	8035e1c <HAL_TIM_IC_CaptureCallback>
 8035bb0:	e005      	b.n	8035bbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8035bb2:	6878      	ldr	r0, [r7, #4]
 8035bb4:	f000 f928 	bl	8035e08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8035bb8:	6878      	ldr	r0, [r7, #4]
 8035bba:	f000 f939 	bl	8035e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8035bbe:	687b      	ldr	r3, [r7, #4]
 8035bc0:	2200      	movs	r2, #0
 8035bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8035bc4:	687b      	ldr	r3, [r7, #4]
 8035bc6:	681b      	ldr	r3, [r3, #0]
 8035bc8:	691b      	ldr	r3, [r3, #16]
 8035bca:	f003 0301 	and.w	r3, r3, #1
 8035bce:	2b01      	cmp	r3, #1
 8035bd0:	d10e      	bne.n	8035bf0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8035bd2:	687b      	ldr	r3, [r7, #4]
 8035bd4:	681b      	ldr	r3, [r3, #0]
 8035bd6:	68db      	ldr	r3, [r3, #12]
 8035bd8:	f003 0301 	and.w	r3, r3, #1
 8035bdc:	2b01      	cmp	r3, #1
 8035bde:	d107      	bne.n	8035bf0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8035be0:	687b      	ldr	r3, [r7, #4]
 8035be2:	681b      	ldr	r3, [r3, #0]
 8035be4:	f06f 0201 	mvn.w	r2, #1
 8035be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8035bea:	6878      	ldr	r0, [r7, #4]
 8035bec:	f7f5 fb98 	bl	802b320 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8035bf0:	687b      	ldr	r3, [r7, #4]
 8035bf2:	681b      	ldr	r3, [r3, #0]
 8035bf4:	691b      	ldr	r3, [r3, #16]
 8035bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8035bfa:	2b80      	cmp	r3, #128	; 0x80
 8035bfc:	d10e      	bne.n	8035c1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8035bfe:	687b      	ldr	r3, [r7, #4]
 8035c00:	681b      	ldr	r3, [r3, #0]
 8035c02:	68db      	ldr	r3, [r3, #12]
 8035c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8035c08:	2b80      	cmp	r3, #128	; 0x80
 8035c0a:	d107      	bne.n	8035c1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8035c0c:	687b      	ldr	r3, [r7, #4]
 8035c0e:	681b      	ldr	r3, [r3, #0]
 8035c10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8035c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8035c16:	6878      	ldr	r0, [r7, #4]
 8035c18:	f000 fb78 	bl	803630c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8035c1c:	687b      	ldr	r3, [r7, #4]
 8035c1e:	681b      	ldr	r3, [r3, #0]
 8035c20:	691b      	ldr	r3, [r3, #16]
 8035c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8035c26:	2b40      	cmp	r3, #64	; 0x40
 8035c28:	d10e      	bne.n	8035c48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8035c2a:	687b      	ldr	r3, [r7, #4]
 8035c2c:	681b      	ldr	r3, [r3, #0]
 8035c2e:	68db      	ldr	r3, [r3, #12]
 8035c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8035c34:	2b40      	cmp	r3, #64	; 0x40
 8035c36:	d107      	bne.n	8035c48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8035c38:	687b      	ldr	r3, [r7, #4]
 8035c3a:	681b      	ldr	r3, [r3, #0]
 8035c3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8035c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8035c42:	6878      	ldr	r0, [r7, #4]
 8035c44:	f000 f8fe 	bl	8035e44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8035c48:	687b      	ldr	r3, [r7, #4]
 8035c4a:	681b      	ldr	r3, [r3, #0]
 8035c4c:	691b      	ldr	r3, [r3, #16]
 8035c4e:	f003 0320 	and.w	r3, r3, #32
 8035c52:	2b20      	cmp	r3, #32
 8035c54:	d10e      	bne.n	8035c74 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8035c56:	687b      	ldr	r3, [r7, #4]
 8035c58:	681b      	ldr	r3, [r3, #0]
 8035c5a:	68db      	ldr	r3, [r3, #12]
 8035c5c:	f003 0320 	and.w	r3, r3, #32
 8035c60:	2b20      	cmp	r3, #32
 8035c62:	d107      	bne.n	8035c74 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8035c64:	687b      	ldr	r3, [r7, #4]
 8035c66:	681b      	ldr	r3, [r3, #0]
 8035c68:	f06f 0220 	mvn.w	r2, #32
 8035c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8035c6e:	6878      	ldr	r0, [r7, #4]
 8035c70:	f000 fb42 	bl	80362f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8035c74:	bf00      	nop
 8035c76:	3708      	adds	r7, #8
 8035c78:	46bd      	mov	sp, r7
 8035c7a:	bd80      	pop	{r7, pc}

08035c7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8035c7c:	b580      	push	{r7, lr}
 8035c7e:	b084      	sub	sp, #16
 8035c80:	af00      	add	r7, sp, #0
 8035c82:	60f8      	str	r0, [r7, #12]
 8035c84:	60b9      	str	r1, [r7, #8]
 8035c86:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8035c88:	68fb      	ldr	r3, [r7, #12]
 8035c8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8035c8e:	2b01      	cmp	r3, #1
 8035c90:	d101      	bne.n	8035c96 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8035c92:	2302      	movs	r3, #2
 8035c94:	e0b4      	b.n	8035e00 <HAL_TIM_PWM_ConfigChannel+0x184>
 8035c96:	68fb      	ldr	r3, [r7, #12]
 8035c98:	2201      	movs	r2, #1
 8035c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8035c9e:	68fb      	ldr	r3, [r7, #12]
 8035ca0:	2202      	movs	r2, #2
 8035ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8035ca6:	687b      	ldr	r3, [r7, #4]
 8035ca8:	2b0c      	cmp	r3, #12
 8035caa:	f200 809f 	bhi.w	8035dec <HAL_TIM_PWM_ConfigChannel+0x170>
 8035cae:	a201      	add	r2, pc, #4	; (adr r2, 8035cb4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8035cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035cb4:	08035ce9 	.word	0x08035ce9
 8035cb8:	08035ded 	.word	0x08035ded
 8035cbc:	08035ded 	.word	0x08035ded
 8035cc0:	08035ded 	.word	0x08035ded
 8035cc4:	08035d29 	.word	0x08035d29
 8035cc8:	08035ded 	.word	0x08035ded
 8035ccc:	08035ded 	.word	0x08035ded
 8035cd0:	08035ded 	.word	0x08035ded
 8035cd4:	08035d6b 	.word	0x08035d6b
 8035cd8:	08035ded 	.word	0x08035ded
 8035cdc:	08035ded 	.word	0x08035ded
 8035ce0:	08035ded 	.word	0x08035ded
 8035ce4:	08035dab 	.word	0x08035dab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8035ce8:	68fb      	ldr	r3, [r7, #12]
 8035cea:	681b      	ldr	r3, [r3, #0]
 8035cec:	68b9      	ldr	r1, [r7, #8]
 8035cee:	4618      	mov	r0, r3
 8035cf0:	f000 f952 	bl	8035f98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8035cf4:	68fb      	ldr	r3, [r7, #12]
 8035cf6:	681b      	ldr	r3, [r3, #0]
 8035cf8:	699a      	ldr	r2, [r3, #24]
 8035cfa:	68fb      	ldr	r3, [r7, #12]
 8035cfc:	681b      	ldr	r3, [r3, #0]
 8035cfe:	f042 0208 	orr.w	r2, r2, #8
 8035d02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8035d04:	68fb      	ldr	r3, [r7, #12]
 8035d06:	681b      	ldr	r3, [r3, #0]
 8035d08:	699a      	ldr	r2, [r3, #24]
 8035d0a:	68fb      	ldr	r3, [r7, #12]
 8035d0c:	681b      	ldr	r3, [r3, #0]
 8035d0e:	f022 0204 	bic.w	r2, r2, #4
 8035d12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8035d14:	68fb      	ldr	r3, [r7, #12]
 8035d16:	681b      	ldr	r3, [r3, #0]
 8035d18:	6999      	ldr	r1, [r3, #24]
 8035d1a:	68bb      	ldr	r3, [r7, #8]
 8035d1c:	691a      	ldr	r2, [r3, #16]
 8035d1e:	68fb      	ldr	r3, [r7, #12]
 8035d20:	681b      	ldr	r3, [r3, #0]
 8035d22:	430a      	orrs	r2, r1
 8035d24:	619a      	str	r2, [r3, #24]
      break;
 8035d26:	e062      	b.n	8035dee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8035d28:	68fb      	ldr	r3, [r7, #12]
 8035d2a:	681b      	ldr	r3, [r3, #0]
 8035d2c:	68b9      	ldr	r1, [r7, #8]
 8035d2e:	4618      	mov	r0, r3
 8035d30:	f000 f9a2 	bl	8036078 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8035d34:	68fb      	ldr	r3, [r7, #12]
 8035d36:	681b      	ldr	r3, [r3, #0]
 8035d38:	699a      	ldr	r2, [r3, #24]
 8035d3a:	68fb      	ldr	r3, [r7, #12]
 8035d3c:	681b      	ldr	r3, [r3, #0]
 8035d3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8035d42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8035d44:	68fb      	ldr	r3, [r7, #12]
 8035d46:	681b      	ldr	r3, [r3, #0]
 8035d48:	699a      	ldr	r2, [r3, #24]
 8035d4a:	68fb      	ldr	r3, [r7, #12]
 8035d4c:	681b      	ldr	r3, [r3, #0]
 8035d4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8035d52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8035d54:	68fb      	ldr	r3, [r7, #12]
 8035d56:	681b      	ldr	r3, [r3, #0]
 8035d58:	6999      	ldr	r1, [r3, #24]
 8035d5a:	68bb      	ldr	r3, [r7, #8]
 8035d5c:	691b      	ldr	r3, [r3, #16]
 8035d5e:	021a      	lsls	r2, r3, #8
 8035d60:	68fb      	ldr	r3, [r7, #12]
 8035d62:	681b      	ldr	r3, [r3, #0]
 8035d64:	430a      	orrs	r2, r1
 8035d66:	619a      	str	r2, [r3, #24]
      break;
 8035d68:	e041      	b.n	8035dee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8035d6a:	68fb      	ldr	r3, [r7, #12]
 8035d6c:	681b      	ldr	r3, [r3, #0]
 8035d6e:	68b9      	ldr	r1, [r7, #8]
 8035d70:	4618      	mov	r0, r3
 8035d72:	f000 f9f7 	bl	8036164 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8035d76:	68fb      	ldr	r3, [r7, #12]
 8035d78:	681b      	ldr	r3, [r3, #0]
 8035d7a:	69da      	ldr	r2, [r3, #28]
 8035d7c:	68fb      	ldr	r3, [r7, #12]
 8035d7e:	681b      	ldr	r3, [r3, #0]
 8035d80:	f042 0208 	orr.w	r2, r2, #8
 8035d84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8035d86:	68fb      	ldr	r3, [r7, #12]
 8035d88:	681b      	ldr	r3, [r3, #0]
 8035d8a:	69da      	ldr	r2, [r3, #28]
 8035d8c:	68fb      	ldr	r3, [r7, #12]
 8035d8e:	681b      	ldr	r3, [r3, #0]
 8035d90:	f022 0204 	bic.w	r2, r2, #4
 8035d94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8035d96:	68fb      	ldr	r3, [r7, #12]
 8035d98:	681b      	ldr	r3, [r3, #0]
 8035d9a:	69d9      	ldr	r1, [r3, #28]
 8035d9c:	68bb      	ldr	r3, [r7, #8]
 8035d9e:	691a      	ldr	r2, [r3, #16]
 8035da0:	68fb      	ldr	r3, [r7, #12]
 8035da2:	681b      	ldr	r3, [r3, #0]
 8035da4:	430a      	orrs	r2, r1
 8035da6:	61da      	str	r2, [r3, #28]
      break;
 8035da8:	e021      	b.n	8035dee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8035daa:	68fb      	ldr	r3, [r7, #12]
 8035dac:	681b      	ldr	r3, [r3, #0]
 8035dae:	68b9      	ldr	r1, [r7, #8]
 8035db0:	4618      	mov	r0, r3
 8035db2:	f000 fa4b 	bl	803624c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8035db6:	68fb      	ldr	r3, [r7, #12]
 8035db8:	681b      	ldr	r3, [r3, #0]
 8035dba:	69da      	ldr	r2, [r3, #28]
 8035dbc:	68fb      	ldr	r3, [r7, #12]
 8035dbe:	681b      	ldr	r3, [r3, #0]
 8035dc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8035dc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8035dc6:	68fb      	ldr	r3, [r7, #12]
 8035dc8:	681b      	ldr	r3, [r3, #0]
 8035dca:	69da      	ldr	r2, [r3, #28]
 8035dcc:	68fb      	ldr	r3, [r7, #12]
 8035dce:	681b      	ldr	r3, [r3, #0]
 8035dd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8035dd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8035dd6:	68fb      	ldr	r3, [r7, #12]
 8035dd8:	681b      	ldr	r3, [r3, #0]
 8035dda:	69d9      	ldr	r1, [r3, #28]
 8035ddc:	68bb      	ldr	r3, [r7, #8]
 8035dde:	691b      	ldr	r3, [r3, #16]
 8035de0:	021a      	lsls	r2, r3, #8
 8035de2:	68fb      	ldr	r3, [r7, #12]
 8035de4:	681b      	ldr	r3, [r3, #0]
 8035de6:	430a      	orrs	r2, r1
 8035de8:	61da      	str	r2, [r3, #28]
      break;
 8035dea:	e000      	b.n	8035dee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8035dec:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8035dee:	68fb      	ldr	r3, [r7, #12]
 8035df0:	2201      	movs	r2, #1
 8035df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8035df6:	68fb      	ldr	r3, [r7, #12]
 8035df8:	2200      	movs	r2, #0
 8035dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8035dfe:	2300      	movs	r3, #0
}
 8035e00:	4618      	mov	r0, r3
 8035e02:	3710      	adds	r7, #16
 8035e04:	46bd      	mov	sp, r7
 8035e06:	bd80      	pop	{r7, pc}

08035e08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8035e08:	b480      	push	{r7}
 8035e0a:	b083      	sub	sp, #12
 8035e0c:	af00      	add	r7, sp, #0
 8035e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8035e10:	bf00      	nop
 8035e12:	370c      	adds	r7, #12
 8035e14:	46bd      	mov	sp, r7
 8035e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035e1a:	4770      	bx	lr

08035e1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8035e1c:	b480      	push	{r7}
 8035e1e:	b083      	sub	sp, #12
 8035e20:	af00      	add	r7, sp, #0
 8035e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8035e24:	bf00      	nop
 8035e26:	370c      	adds	r7, #12
 8035e28:	46bd      	mov	sp, r7
 8035e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035e2e:	4770      	bx	lr

08035e30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8035e30:	b480      	push	{r7}
 8035e32:	b083      	sub	sp, #12
 8035e34:	af00      	add	r7, sp, #0
 8035e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8035e38:	bf00      	nop
 8035e3a:	370c      	adds	r7, #12
 8035e3c:	46bd      	mov	sp, r7
 8035e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035e42:	4770      	bx	lr

08035e44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8035e44:	b480      	push	{r7}
 8035e46:	b083      	sub	sp, #12
 8035e48:	af00      	add	r7, sp, #0
 8035e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8035e4c:	bf00      	nop
 8035e4e:	370c      	adds	r7, #12
 8035e50:	46bd      	mov	sp, r7
 8035e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035e56:	4770      	bx	lr

08035e58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8035e58:	b480      	push	{r7}
 8035e5a:	b085      	sub	sp, #20
 8035e5c:	af00      	add	r7, sp, #0
 8035e5e:	6078      	str	r0, [r7, #4]
 8035e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8035e62:	687b      	ldr	r3, [r7, #4]
 8035e64:	681b      	ldr	r3, [r3, #0]
 8035e66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8035e68:	687b      	ldr	r3, [r7, #4]
 8035e6a:	4a40      	ldr	r2, [pc, #256]	; (8035f6c <TIM_Base_SetConfig+0x114>)
 8035e6c:	4293      	cmp	r3, r2
 8035e6e:	d013      	beq.n	8035e98 <TIM_Base_SetConfig+0x40>
 8035e70:	687b      	ldr	r3, [r7, #4]
 8035e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8035e76:	d00f      	beq.n	8035e98 <TIM_Base_SetConfig+0x40>
 8035e78:	687b      	ldr	r3, [r7, #4]
 8035e7a:	4a3d      	ldr	r2, [pc, #244]	; (8035f70 <TIM_Base_SetConfig+0x118>)
 8035e7c:	4293      	cmp	r3, r2
 8035e7e:	d00b      	beq.n	8035e98 <TIM_Base_SetConfig+0x40>
 8035e80:	687b      	ldr	r3, [r7, #4]
 8035e82:	4a3c      	ldr	r2, [pc, #240]	; (8035f74 <TIM_Base_SetConfig+0x11c>)
 8035e84:	4293      	cmp	r3, r2
 8035e86:	d007      	beq.n	8035e98 <TIM_Base_SetConfig+0x40>
 8035e88:	687b      	ldr	r3, [r7, #4]
 8035e8a:	4a3b      	ldr	r2, [pc, #236]	; (8035f78 <TIM_Base_SetConfig+0x120>)
 8035e8c:	4293      	cmp	r3, r2
 8035e8e:	d003      	beq.n	8035e98 <TIM_Base_SetConfig+0x40>
 8035e90:	687b      	ldr	r3, [r7, #4]
 8035e92:	4a3a      	ldr	r2, [pc, #232]	; (8035f7c <TIM_Base_SetConfig+0x124>)
 8035e94:	4293      	cmp	r3, r2
 8035e96:	d108      	bne.n	8035eaa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8035e98:	68fb      	ldr	r3, [r7, #12]
 8035e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8035e9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8035ea0:	683b      	ldr	r3, [r7, #0]
 8035ea2:	685b      	ldr	r3, [r3, #4]
 8035ea4:	68fa      	ldr	r2, [r7, #12]
 8035ea6:	4313      	orrs	r3, r2
 8035ea8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8035eaa:	687b      	ldr	r3, [r7, #4]
 8035eac:	4a2f      	ldr	r2, [pc, #188]	; (8035f6c <TIM_Base_SetConfig+0x114>)
 8035eae:	4293      	cmp	r3, r2
 8035eb0:	d02b      	beq.n	8035f0a <TIM_Base_SetConfig+0xb2>
 8035eb2:	687b      	ldr	r3, [r7, #4]
 8035eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8035eb8:	d027      	beq.n	8035f0a <TIM_Base_SetConfig+0xb2>
 8035eba:	687b      	ldr	r3, [r7, #4]
 8035ebc:	4a2c      	ldr	r2, [pc, #176]	; (8035f70 <TIM_Base_SetConfig+0x118>)
 8035ebe:	4293      	cmp	r3, r2
 8035ec0:	d023      	beq.n	8035f0a <TIM_Base_SetConfig+0xb2>
 8035ec2:	687b      	ldr	r3, [r7, #4]
 8035ec4:	4a2b      	ldr	r2, [pc, #172]	; (8035f74 <TIM_Base_SetConfig+0x11c>)
 8035ec6:	4293      	cmp	r3, r2
 8035ec8:	d01f      	beq.n	8035f0a <TIM_Base_SetConfig+0xb2>
 8035eca:	687b      	ldr	r3, [r7, #4]
 8035ecc:	4a2a      	ldr	r2, [pc, #168]	; (8035f78 <TIM_Base_SetConfig+0x120>)
 8035ece:	4293      	cmp	r3, r2
 8035ed0:	d01b      	beq.n	8035f0a <TIM_Base_SetConfig+0xb2>
 8035ed2:	687b      	ldr	r3, [r7, #4]
 8035ed4:	4a29      	ldr	r2, [pc, #164]	; (8035f7c <TIM_Base_SetConfig+0x124>)
 8035ed6:	4293      	cmp	r3, r2
 8035ed8:	d017      	beq.n	8035f0a <TIM_Base_SetConfig+0xb2>
 8035eda:	687b      	ldr	r3, [r7, #4]
 8035edc:	4a28      	ldr	r2, [pc, #160]	; (8035f80 <TIM_Base_SetConfig+0x128>)
 8035ede:	4293      	cmp	r3, r2
 8035ee0:	d013      	beq.n	8035f0a <TIM_Base_SetConfig+0xb2>
 8035ee2:	687b      	ldr	r3, [r7, #4]
 8035ee4:	4a27      	ldr	r2, [pc, #156]	; (8035f84 <TIM_Base_SetConfig+0x12c>)
 8035ee6:	4293      	cmp	r3, r2
 8035ee8:	d00f      	beq.n	8035f0a <TIM_Base_SetConfig+0xb2>
 8035eea:	687b      	ldr	r3, [r7, #4]
 8035eec:	4a26      	ldr	r2, [pc, #152]	; (8035f88 <TIM_Base_SetConfig+0x130>)
 8035eee:	4293      	cmp	r3, r2
 8035ef0:	d00b      	beq.n	8035f0a <TIM_Base_SetConfig+0xb2>
 8035ef2:	687b      	ldr	r3, [r7, #4]
 8035ef4:	4a25      	ldr	r2, [pc, #148]	; (8035f8c <TIM_Base_SetConfig+0x134>)
 8035ef6:	4293      	cmp	r3, r2
 8035ef8:	d007      	beq.n	8035f0a <TIM_Base_SetConfig+0xb2>
 8035efa:	687b      	ldr	r3, [r7, #4]
 8035efc:	4a24      	ldr	r2, [pc, #144]	; (8035f90 <TIM_Base_SetConfig+0x138>)
 8035efe:	4293      	cmp	r3, r2
 8035f00:	d003      	beq.n	8035f0a <TIM_Base_SetConfig+0xb2>
 8035f02:	687b      	ldr	r3, [r7, #4]
 8035f04:	4a23      	ldr	r2, [pc, #140]	; (8035f94 <TIM_Base_SetConfig+0x13c>)
 8035f06:	4293      	cmp	r3, r2
 8035f08:	d108      	bne.n	8035f1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8035f0a:	68fb      	ldr	r3, [r7, #12]
 8035f0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8035f10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8035f12:	683b      	ldr	r3, [r7, #0]
 8035f14:	68db      	ldr	r3, [r3, #12]
 8035f16:	68fa      	ldr	r2, [r7, #12]
 8035f18:	4313      	orrs	r3, r2
 8035f1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8035f1c:	68fb      	ldr	r3, [r7, #12]
 8035f1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8035f22:	683b      	ldr	r3, [r7, #0]
 8035f24:	695b      	ldr	r3, [r3, #20]
 8035f26:	4313      	orrs	r3, r2
 8035f28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8035f2a:	687b      	ldr	r3, [r7, #4]
 8035f2c:	68fa      	ldr	r2, [r7, #12]
 8035f2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8035f30:	683b      	ldr	r3, [r7, #0]
 8035f32:	689a      	ldr	r2, [r3, #8]
 8035f34:	687b      	ldr	r3, [r7, #4]
 8035f36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8035f38:	683b      	ldr	r3, [r7, #0]
 8035f3a:	681a      	ldr	r2, [r3, #0]
 8035f3c:	687b      	ldr	r3, [r7, #4]
 8035f3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8035f40:	687b      	ldr	r3, [r7, #4]
 8035f42:	4a0a      	ldr	r2, [pc, #40]	; (8035f6c <TIM_Base_SetConfig+0x114>)
 8035f44:	4293      	cmp	r3, r2
 8035f46:	d003      	beq.n	8035f50 <TIM_Base_SetConfig+0xf8>
 8035f48:	687b      	ldr	r3, [r7, #4]
 8035f4a:	4a0c      	ldr	r2, [pc, #48]	; (8035f7c <TIM_Base_SetConfig+0x124>)
 8035f4c:	4293      	cmp	r3, r2
 8035f4e:	d103      	bne.n	8035f58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8035f50:	683b      	ldr	r3, [r7, #0]
 8035f52:	691a      	ldr	r2, [r3, #16]
 8035f54:	687b      	ldr	r3, [r7, #4]
 8035f56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8035f58:	687b      	ldr	r3, [r7, #4]
 8035f5a:	2201      	movs	r2, #1
 8035f5c:	615a      	str	r2, [r3, #20]
}
 8035f5e:	bf00      	nop
 8035f60:	3714      	adds	r7, #20
 8035f62:	46bd      	mov	sp, r7
 8035f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035f68:	4770      	bx	lr
 8035f6a:	bf00      	nop
 8035f6c:	40010000 	.word	0x40010000
 8035f70:	40000400 	.word	0x40000400
 8035f74:	40000800 	.word	0x40000800
 8035f78:	40000c00 	.word	0x40000c00
 8035f7c:	40010400 	.word	0x40010400
 8035f80:	40014000 	.word	0x40014000
 8035f84:	40014400 	.word	0x40014400
 8035f88:	40014800 	.word	0x40014800
 8035f8c:	40001800 	.word	0x40001800
 8035f90:	40001c00 	.word	0x40001c00
 8035f94:	40002000 	.word	0x40002000

08035f98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8035f98:	b480      	push	{r7}
 8035f9a:	b087      	sub	sp, #28
 8035f9c:	af00      	add	r7, sp, #0
 8035f9e:	6078      	str	r0, [r7, #4]
 8035fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8035fa2:	687b      	ldr	r3, [r7, #4]
 8035fa4:	6a1b      	ldr	r3, [r3, #32]
 8035fa6:	f023 0201 	bic.w	r2, r3, #1
 8035faa:	687b      	ldr	r3, [r7, #4]
 8035fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8035fae:	687b      	ldr	r3, [r7, #4]
 8035fb0:	6a1b      	ldr	r3, [r3, #32]
 8035fb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8035fb4:	687b      	ldr	r3, [r7, #4]
 8035fb6:	685b      	ldr	r3, [r3, #4]
 8035fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8035fba:	687b      	ldr	r3, [r7, #4]
 8035fbc:	699b      	ldr	r3, [r3, #24]
 8035fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8035fc0:	68fb      	ldr	r3, [r7, #12]
 8035fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8035fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8035fc8:	68fb      	ldr	r3, [r7, #12]
 8035fca:	f023 0303 	bic.w	r3, r3, #3
 8035fce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8035fd0:	683b      	ldr	r3, [r7, #0]
 8035fd2:	681b      	ldr	r3, [r3, #0]
 8035fd4:	68fa      	ldr	r2, [r7, #12]
 8035fd6:	4313      	orrs	r3, r2
 8035fd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8035fda:	697b      	ldr	r3, [r7, #20]
 8035fdc:	f023 0302 	bic.w	r3, r3, #2
 8035fe0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8035fe2:	683b      	ldr	r3, [r7, #0]
 8035fe4:	689b      	ldr	r3, [r3, #8]
 8035fe6:	697a      	ldr	r2, [r7, #20]
 8035fe8:	4313      	orrs	r3, r2
 8035fea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8035fec:	687b      	ldr	r3, [r7, #4]
 8035fee:	4a20      	ldr	r2, [pc, #128]	; (8036070 <TIM_OC1_SetConfig+0xd8>)
 8035ff0:	4293      	cmp	r3, r2
 8035ff2:	d003      	beq.n	8035ffc <TIM_OC1_SetConfig+0x64>
 8035ff4:	687b      	ldr	r3, [r7, #4]
 8035ff6:	4a1f      	ldr	r2, [pc, #124]	; (8036074 <TIM_OC1_SetConfig+0xdc>)
 8035ff8:	4293      	cmp	r3, r2
 8035ffa:	d10c      	bne.n	8036016 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8035ffc:	697b      	ldr	r3, [r7, #20]
 8035ffe:	f023 0308 	bic.w	r3, r3, #8
 8036002:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8036004:	683b      	ldr	r3, [r7, #0]
 8036006:	68db      	ldr	r3, [r3, #12]
 8036008:	697a      	ldr	r2, [r7, #20]
 803600a:	4313      	orrs	r3, r2
 803600c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 803600e:	697b      	ldr	r3, [r7, #20]
 8036010:	f023 0304 	bic.w	r3, r3, #4
 8036014:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8036016:	687b      	ldr	r3, [r7, #4]
 8036018:	4a15      	ldr	r2, [pc, #84]	; (8036070 <TIM_OC1_SetConfig+0xd8>)
 803601a:	4293      	cmp	r3, r2
 803601c:	d003      	beq.n	8036026 <TIM_OC1_SetConfig+0x8e>
 803601e:	687b      	ldr	r3, [r7, #4]
 8036020:	4a14      	ldr	r2, [pc, #80]	; (8036074 <TIM_OC1_SetConfig+0xdc>)
 8036022:	4293      	cmp	r3, r2
 8036024:	d111      	bne.n	803604a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8036026:	693b      	ldr	r3, [r7, #16]
 8036028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 803602c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 803602e:	693b      	ldr	r3, [r7, #16]
 8036030:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8036034:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8036036:	683b      	ldr	r3, [r7, #0]
 8036038:	695b      	ldr	r3, [r3, #20]
 803603a:	693a      	ldr	r2, [r7, #16]
 803603c:	4313      	orrs	r3, r2
 803603e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8036040:	683b      	ldr	r3, [r7, #0]
 8036042:	699b      	ldr	r3, [r3, #24]
 8036044:	693a      	ldr	r2, [r7, #16]
 8036046:	4313      	orrs	r3, r2
 8036048:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 803604a:	687b      	ldr	r3, [r7, #4]
 803604c:	693a      	ldr	r2, [r7, #16]
 803604e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8036050:	687b      	ldr	r3, [r7, #4]
 8036052:	68fa      	ldr	r2, [r7, #12]
 8036054:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8036056:	683b      	ldr	r3, [r7, #0]
 8036058:	685a      	ldr	r2, [r3, #4]
 803605a:	687b      	ldr	r3, [r7, #4]
 803605c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 803605e:	687b      	ldr	r3, [r7, #4]
 8036060:	697a      	ldr	r2, [r7, #20]
 8036062:	621a      	str	r2, [r3, #32]
}
 8036064:	bf00      	nop
 8036066:	371c      	adds	r7, #28
 8036068:	46bd      	mov	sp, r7
 803606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803606e:	4770      	bx	lr
 8036070:	40010000 	.word	0x40010000
 8036074:	40010400 	.word	0x40010400

08036078 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8036078:	b480      	push	{r7}
 803607a:	b087      	sub	sp, #28
 803607c:	af00      	add	r7, sp, #0
 803607e:	6078      	str	r0, [r7, #4]
 8036080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8036082:	687b      	ldr	r3, [r7, #4]
 8036084:	6a1b      	ldr	r3, [r3, #32]
 8036086:	f023 0210 	bic.w	r2, r3, #16
 803608a:	687b      	ldr	r3, [r7, #4]
 803608c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 803608e:	687b      	ldr	r3, [r7, #4]
 8036090:	6a1b      	ldr	r3, [r3, #32]
 8036092:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8036094:	687b      	ldr	r3, [r7, #4]
 8036096:	685b      	ldr	r3, [r3, #4]
 8036098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 803609a:	687b      	ldr	r3, [r7, #4]
 803609c:	699b      	ldr	r3, [r3, #24]
 803609e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80360a0:	68fb      	ldr	r3, [r7, #12]
 80360a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80360a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80360a8:	68fb      	ldr	r3, [r7, #12]
 80360aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80360ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80360b0:	683b      	ldr	r3, [r7, #0]
 80360b2:	681b      	ldr	r3, [r3, #0]
 80360b4:	021b      	lsls	r3, r3, #8
 80360b6:	68fa      	ldr	r2, [r7, #12]
 80360b8:	4313      	orrs	r3, r2
 80360ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80360bc:	697b      	ldr	r3, [r7, #20]
 80360be:	f023 0320 	bic.w	r3, r3, #32
 80360c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80360c4:	683b      	ldr	r3, [r7, #0]
 80360c6:	689b      	ldr	r3, [r3, #8]
 80360c8:	011b      	lsls	r3, r3, #4
 80360ca:	697a      	ldr	r2, [r7, #20]
 80360cc:	4313      	orrs	r3, r2
 80360ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80360d0:	687b      	ldr	r3, [r7, #4]
 80360d2:	4a22      	ldr	r2, [pc, #136]	; (803615c <TIM_OC2_SetConfig+0xe4>)
 80360d4:	4293      	cmp	r3, r2
 80360d6:	d003      	beq.n	80360e0 <TIM_OC2_SetConfig+0x68>
 80360d8:	687b      	ldr	r3, [r7, #4]
 80360da:	4a21      	ldr	r2, [pc, #132]	; (8036160 <TIM_OC2_SetConfig+0xe8>)
 80360dc:	4293      	cmp	r3, r2
 80360de:	d10d      	bne.n	80360fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80360e0:	697b      	ldr	r3, [r7, #20]
 80360e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80360e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80360e8:	683b      	ldr	r3, [r7, #0]
 80360ea:	68db      	ldr	r3, [r3, #12]
 80360ec:	011b      	lsls	r3, r3, #4
 80360ee:	697a      	ldr	r2, [r7, #20]
 80360f0:	4313      	orrs	r3, r2
 80360f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80360f4:	697b      	ldr	r3, [r7, #20]
 80360f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80360fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80360fc:	687b      	ldr	r3, [r7, #4]
 80360fe:	4a17      	ldr	r2, [pc, #92]	; (803615c <TIM_OC2_SetConfig+0xe4>)
 8036100:	4293      	cmp	r3, r2
 8036102:	d003      	beq.n	803610c <TIM_OC2_SetConfig+0x94>
 8036104:	687b      	ldr	r3, [r7, #4]
 8036106:	4a16      	ldr	r2, [pc, #88]	; (8036160 <TIM_OC2_SetConfig+0xe8>)
 8036108:	4293      	cmp	r3, r2
 803610a:	d113      	bne.n	8036134 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 803610c:	693b      	ldr	r3, [r7, #16]
 803610e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8036112:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8036114:	693b      	ldr	r3, [r7, #16]
 8036116:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 803611a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 803611c:	683b      	ldr	r3, [r7, #0]
 803611e:	695b      	ldr	r3, [r3, #20]
 8036120:	009b      	lsls	r3, r3, #2
 8036122:	693a      	ldr	r2, [r7, #16]
 8036124:	4313      	orrs	r3, r2
 8036126:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8036128:	683b      	ldr	r3, [r7, #0]
 803612a:	699b      	ldr	r3, [r3, #24]
 803612c:	009b      	lsls	r3, r3, #2
 803612e:	693a      	ldr	r2, [r7, #16]
 8036130:	4313      	orrs	r3, r2
 8036132:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8036134:	687b      	ldr	r3, [r7, #4]
 8036136:	693a      	ldr	r2, [r7, #16]
 8036138:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 803613a:	687b      	ldr	r3, [r7, #4]
 803613c:	68fa      	ldr	r2, [r7, #12]
 803613e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8036140:	683b      	ldr	r3, [r7, #0]
 8036142:	685a      	ldr	r2, [r3, #4]
 8036144:	687b      	ldr	r3, [r7, #4]
 8036146:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8036148:	687b      	ldr	r3, [r7, #4]
 803614a:	697a      	ldr	r2, [r7, #20]
 803614c:	621a      	str	r2, [r3, #32]
}
 803614e:	bf00      	nop
 8036150:	371c      	adds	r7, #28
 8036152:	46bd      	mov	sp, r7
 8036154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036158:	4770      	bx	lr
 803615a:	bf00      	nop
 803615c:	40010000 	.word	0x40010000
 8036160:	40010400 	.word	0x40010400

08036164 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8036164:	b480      	push	{r7}
 8036166:	b087      	sub	sp, #28
 8036168:	af00      	add	r7, sp, #0
 803616a:	6078      	str	r0, [r7, #4]
 803616c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 803616e:	687b      	ldr	r3, [r7, #4]
 8036170:	6a1b      	ldr	r3, [r3, #32]
 8036172:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8036176:	687b      	ldr	r3, [r7, #4]
 8036178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 803617a:	687b      	ldr	r3, [r7, #4]
 803617c:	6a1b      	ldr	r3, [r3, #32]
 803617e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8036180:	687b      	ldr	r3, [r7, #4]
 8036182:	685b      	ldr	r3, [r3, #4]
 8036184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8036186:	687b      	ldr	r3, [r7, #4]
 8036188:	69db      	ldr	r3, [r3, #28]
 803618a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 803618c:	68fb      	ldr	r3, [r7, #12]
 803618e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8036192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8036194:	68fb      	ldr	r3, [r7, #12]
 8036196:	f023 0303 	bic.w	r3, r3, #3
 803619a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 803619c:	683b      	ldr	r3, [r7, #0]
 803619e:	681b      	ldr	r3, [r3, #0]
 80361a0:	68fa      	ldr	r2, [r7, #12]
 80361a2:	4313      	orrs	r3, r2
 80361a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80361a6:	697b      	ldr	r3, [r7, #20]
 80361a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80361ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80361ae:	683b      	ldr	r3, [r7, #0]
 80361b0:	689b      	ldr	r3, [r3, #8]
 80361b2:	021b      	lsls	r3, r3, #8
 80361b4:	697a      	ldr	r2, [r7, #20]
 80361b6:	4313      	orrs	r3, r2
 80361b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80361ba:	687b      	ldr	r3, [r7, #4]
 80361bc:	4a21      	ldr	r2, [pc, #132]	; (8036244 <TIM_OC3_SetConfig+0xe0>)
 80361be:	4293      	cmp	r3, r2
 80361c0:	d003      	beq.n	80361ca <TIM_OC3_SetConfig+0x66>
 80361c2:	687b      	ldr	r3, [r7, #4]
 80361c4:	4a20      	ldr	r2, [pc, #128]	; (8036248 <TIM_OC3_SetConfig+0xe4>)
 80361c6:	4293      	cmp	r3, r2
 80361c8:	d10d      	bne.n	80361e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80361ca:	697b      	ldr	r3, [r7, #20]
 80361cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80361d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80361d2:	683b      	ldr	r3, [r7, #0]
 80361d4:	68db      	ldr	r3, [r3, #12]
 80361d6:	021b      	lsls	r3, r3, #8
 80361d8:	697a      	ldr	r2, [r7, #20]
 80361da:	4313      	orrs	r3, r2
 80361dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80361de:	697b      	ldr	r3, [r7, #20]
 80361e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80361e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80361e6:	687b      	ldr	r3, [r7, #4]
 80361e8:	4a16      	ldr	r2, [pc, #88]	; (8036244 <TIM_OC3_SetConfig+0xe0>)
 80361ea:	4293      	cmp	r3, r2
 80361ec:	d003      	beq.n	80361f6 <TIM_OC3_SetConfig+0x92>
 80361ee:	687b      	ldr	r3, [r7, #4]
 80361f0:	4a15      	ldr	r2, [pc, #84]	; (8036248 <TIM_OC3_SetConfig+0xe4>)
 80361f2:	4293      	cmp	r3, r2
 80361f4:	d113      	bne.n	803621e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80361f6:	693b      	ldr	r3, [r7, #16]
 80361f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80361fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80361fe:	693b      	ldr	r3, [r7, #16]
 8036200:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8036204:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8036206:	683b      	ldr	r3, [r7, #0]
 8036208:	695b      	ldr	r3, [r3, #20]
 803620a:	011b      	lsls	r3, r3, #4
 803620c:	693a      	ldr	r2, [r7, #16]
 803620e:	4313      	orrs	r3, r2
 8036210:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8036212:	683b      	ldr	r3, [r7, #0]
 8036214:	699b      	ldr	r3, [r3, #24]
 8036216:	011b      	lsls	r3, r3, #4
 8036218:	693a      	ldr	r2, [r7, #16]
 803621a:	4313      	orrs	r3, r2
 803621c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 803621e:	687b      	ldr	r3, [r7, #4]
 8036220:	693a      	ldr	r2, [r7, #16]
 8036222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8036224:	687b      	ldr	r3, [r7, #4]
 8036226:	68fa      	ldr	r2, [r7, #12]
 8036228:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 803622a:	683b      	ldr	r3, [r7, #0]
 803622c:	685a      	ldr	r2, [r3, #4]
 803622e:	687b      	ldr	r3, [r7, #4]
 8036230:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8036232:	687b      	ldr	r3, [r7, #4]
 8036234:	697a      	ldr	r2, [r7, #20]
 8036236:	621a      	str	r2, [r3, #32]
}
 8036238:	bf00      	nop
 803623a:	371c      	adds	r7, #28
 803623c:	46bd      	mov	sp, r7
 803623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036242:	4770      	bx	lr
 8036244:	40010000 	.word	0x40010000
 8036248:	40010400 	.word	0x40010400

0803624c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 803624c:	b480      	push	{r7}
 803624e:	b087      	sub	sp, #28
 8036250:	af00      	add	r7, sp, #0
 8036252:	6078      	str	r0, [r7, #4]
 8036254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8036256:	687b      	ldr	r3, [r7, #4]
 8036258:	6a1b      	ldr	r3, [r3, #32]
 803625a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 803625e:	687b      	ldr	r3, [r7, #4]
 8036260:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8036262:	687b      	ldr	r3, [r7, #4]
 8036264:	6a1b      	ldr	r3, [r3, #32]
 8036266:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8036268:	687b      	ldr	r3, [r7, #4]
 803626a:	685b      	ldr	r3, [r3, #4]
 803626c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 803626e:	687b      	ldr	r3, [r7, #4]
 8036270:	69db      	ldr	r3, [r3, #28]
 8036272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8036274:	68fb      	ldr	r3, [r7, #12]
 8036276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 803627a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 803627c:	68fb      	ldr	r3, [r7, #12]
 803627e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8036282:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8036284:	683b      	ldr	r3, [r7, #0]
 8036286:	681b      	ldr	r3, [r3, #0]
 8036288:	021b      	lsls	r3, r3, #8
 803628a:	68fa      	ldr	r2, [r7, #12]
 803628c:	4313      	orrs	r3, r2
 803628e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8036290:	693b      	ldr	r3, [r7, #16]
 8036292:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8036296:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8036298:	683b      	ldr	r3, [r7, #0]
 803629a:	689b      	ldr	r3, [r3, #8]
 803629c:	031b      	lsls	r3, r3, #12
 803629e:	693a      	ldr	r2, [r7, #16]
 80362a0:	4313      	orrs	r3, r2
 80362a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80362a4:	687b      	ldr	r3, [r7, #4]
 80362a6:	4a12      	ldr	r2, [pc, #72]	; (80362f0 <TIM_OC4_SetConfig+0xa4>)
 80362a8:	4293      	cmp	r3, r2
 80362aa:	d003      	beq.n	80362b4 <TIM_OC4_SetConfig+0x68>
 80362ac:	687b      	ldr	r3, [r7, #4]
 80362ae:	4a11      	ldr	r2, [pc, #68]	; (80362f4 <TIM_OC4_SetConfig+0xa8>)
 80362b0:	4293      	cmp	r3, r2
 80362b2:	d109      	bne.n	80362c8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80362b4:	697b      	ldr	r3, [r7, #20]
 80362b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80362ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80362bc:	683b      	ldr	r3, [r7, #0]
 80362be:	695b      	ldr	r3, [r3, #20]
 80362c0:	019b      	lsls	r3, r3, #6
 80362c2:	697a      	ldr	r2, [r7, #20]
 80362c4:	4313      	orrs	r3, r2
 80362c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80362c8:	687b      	ldr	r3, [r7, #4]
 80362ca:	697a      	ldr	r2, [r7, #20]
 80362cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80362ce:	687b      	ldr	r3, [r7, #4]
 80362d0:	68fa      	ldr	r2, [r7, #12]
 80362d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80362d4:	683b      	ldr	r3, [r7, #0]
 80362d6:	685a      	ldr	r2, [r3, #4]
 80362d8:	687b      	ldr	r3, [r7, #4]
 80362da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80362dc:	687b      	ldr	r3, [r7, #4]
 80362de:	693a      	ldr	r2, [r7, #16]
 80362e0:	621a      	str	r2, [r3, #32]
}
 80362e2:	bf00      	nop
 80362e4:	371c      	adds	r7, #28
 80362e6:	46bd      	mov	sp, r7
 80362e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80362ec:	4770      	bx	lr
 80362ee:	bf00      	nop
 80362f0:	40010000 	.word	0x40010000
 80362f4:	40010400 	.word	0x40010400

080362f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80362f8:	b480      	push	{r7}
 80362fa:	b083      	sub	sp, #12
 80362fc:	af00      	add	r7, sp, #0
 80362fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8036300:	bf00      	nop
 8036302:	370c      	adds	r7, #12
 8036304:	46bd      	mov	sp, r7
 8036306:	f85d 7b04 	ldr.w	r7, [sp], #4
 803630a:	4770      	bx	lr

0803630c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 803630c:	b480      	push	{r7}
 803630e:	b083      	sub	sp, #12
 8036310:	af00      	add	r7, sp, #0
 8036312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8036314:	bf00      	nop
 8036316:	370c      	adds	r7, #12
 8036318:	46bd      	mov	sp, r7
 803631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803631e:	4770      	bx	lr

08036320 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8036320:	b580      	push	{r7, lr}
 8036322:	b082      	sub	sp, #8
 8036324:	af00      	add	r7, sp, #0
 8036326:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8036328:	687b      	ldr	r3, [r7, #4]
 803632a:	2b00      	cmp	r3, #0
 803632c:	d101      	bne.n	8036332 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 803632e:	2301      	movs	r3, #1
 8036330:	e03f      	b.n	80363b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8036332:	687b      	ldr	r3, [r7, #4]
 8036334:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8036338:	b2db      	uxtb	r3, r3
 803633a:	2b00      	cmp	r3, #0
 803633c:	d106      	bne.n	803634c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 803633e:	687b      	ldr	r3, [r7, #4]
 8036340:	2200      	movs	r2, #0
 8036342:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8036346:	6878      	ldr	r0, [r7, #4]
 8036348:	f7f5 fc14 	bl	802bb74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 803634c:	687b      	ldr	r3, [r7, #4]
 803634e:	2224      	movs	r2, #36	; 0x24
 8036350:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8036354:	687b      	ldr	r3, [r7, #4]
 8036356:	681b      	ldr	r3, [r3, #0]
 8036358:	68da      	ldr	r2, [r3, #12]
 803635a:	687b      	ldr	r3, [r7, #4]
 803635c:	681b      	ldr	r3, [r3, #0]
 803635e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8036362:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8036364:	6878      	ldr	r0, [r7, #4]
 8036366:	f000 fc77 	bl	8036c58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 803636a:	687b      	ldr	r3, [r7, #4]
 803636c:	681b      	ldr	r3, [r3, #0]
 803636e:	691a      	ldr	r2, [r3, #16]
 8036370:	687b      	ldr	r3, [r7, #4]
 8036372:	681b      	ldr	r3, [r3, #0]
 8036374:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8036378:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 803637a:	687b      	ldr	r3, [r7, #4]
 803637c:	681b      	ldr	r3, [r3, #0]
 803637e:	695a      	ldr	r2, [r3, #20]
 8036380:	687b      	ldr	r3, [r7, #4]
 8036382:	681b      	ldr	r3, [r3, #0]
 8036384:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8036388:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 803638a:	687b      	ldr	r3, [r7, #4]
 803638c:	681b      	ldr	r3, [r3, #0]
 803638e:	68da      	ldr	r2, [r3, #12]
 8036390:	687b      	ldr	r3, [r7, #4]
 8036392:	681b      	ldr	r3, [r3, #0]
 8036394:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8036398:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 803639a:	687b      	ldr	r3, [r7, #4]
 803639c:	2200      	movs	r2, #0
 803639e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80363a0:	687b      	ldr	r3, [r7, #4]
 80363a2:	2220      	movs	r2, #32
 80363a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80363a8:	687b      	ldr	r3, [r7, #4]
 80363aa:	2220      	movs	r2, #32
 80363ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80363b0:	2300      	movs	r3, #0
}
 80363b2:	4618      	mov	r0, r3
 80363b4:	3708      	adds	r7, #8
 80363b6:	46bd      	mov	sp, r7
 80363b8:	bd80      	pop	{r7, pc}

080363ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80363ba:	b580      	push	{r7, lr}
 80363bc:	b088      	sub	sp, #32
 80363be:	af02      	add	r7, sp, #8
 80363c0:	60f8      	str	r0, [r7, #12]
 80363c2:	60b9      	str	r1, [r7, #8]
 80363c4:	603b      	str	r3, [r7, #0]
 80363c6:	4613      	mov	r3, r2
 80363c8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80363ca:	2300      	movs	r3, #0
 80363cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80363ce:	68fb      	ldr	r3, [r7, #12]
 80363d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80363d4:	b2db      	uxtb	r3, r3
 80363d6:	2b20      	cmp	r3, #32
 80363d8:	f040 8083 	bne.w	80364e2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80363dc:	68bb      	ldr	r3, [r7, #8]
 80363de:	2b00      	cmp	r3, #0
 80363e0:	d002      	beq.n	80363e8 <HAL_UART_Transmit+0x2e>
 80363e2:	88fb      	ldrh	r3, [r7, #6]
 80363e4:	2b00      	cmp	r3, #0
 80363e6:	d101      	bne.n	80363ec <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80363e8:	2301      	movs	r3, #1
 80363ea:	e07b      	b.n	80364e4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80363ec:	68fb      	ldr	r3, [r7, #12]
 80363ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80363f2:	2b01      	cmp	r3, #1
 80363f4:	d101      	bne.n	80363fa <HAL_UART_Transmit+0x40>
 80363f6:	2302      	movs	r3, #2
 80363f8:	e074      	b.n	80364e4 <HAL_UART_Transmit+0x12a>
 80363fa:	68fb      	ldr	r3, [r7, #12]
 80363fc:	2201      	movs	r2, #1
 80363fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8036402:	68fb      	ldr	r3, [r7, #12]
 8036404:	2200      	movs	r2, #0
 8036406:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8036408:	68fb      	ldr	r3, [r7, #12]
 803640a:	2221      	movs	r2, #33	; 0x21
 803640c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8036410:	f7f5 ff1a 	bl	802c248 <HAL_GetTick>
 8036414:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8036416:	68fb      	ldr	r3, [r7, #12]
 8036418:	88fa      	ldrh	r2, [r7, #6]
 803641a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 803641c:	68fb      	ldr	r3, [r7, #12]
 803641e:	88fa      	ldrh	r2, [r7, #6]
 8036420:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8036422:	68fb      	ldr	r3, [r7, #12]
 8036424:	2200      	movs	r2, #0
 8036426:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 803642a:	e042      	b.n	80364b2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 803642c:	68fb      	ldr	r3, [r7, #12]
 803642e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8036430:	b29b      	uxth	r3, r3
 8036432:	3b01      	subs	r3, #1
 8036434:	b29a      	uxth	r2, r3
 8036436:	68fb      	ldr	r3, [r7, #12]
 8036438:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 803643a:	68fb      	ldr	r3, [r7, #12]
 803643c:	689b      	ldr	r3, [r3, #8]
 803643e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8036442:	d122      	bne.n	803648a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8036444:	683b      	ldr	r3, [r7, #0]
 8036446:	9300      	str	r3, [sp, #0]
 8036448:	697b      	ldr	r3, [r7, #20]
 803644a:	2200      	movs	r2, #0
 803644c:	2180      	movs	r1, #128	; 0x80
 803644e:	68f8      	ldr	r0, [r7, #12]
 8036450:	f000 fa80 	bl	8036954 <UART_WaitOnFlagUntilTimeout>
 8036454:	4603      	mov	r3, r0
 8036456:	2b00      	cmp	r3, #0
 8036458:	d001      	beq.n	803645e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 803645a:	2303      	movs	r3, #3
 803645c:	e042      	b.n	80364e4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 803645e:	68bb      	ldr	r3, [r7, #8]
 8036460:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8036462:	693b      	ldr	r3, [r7, #16]
 8036464:	881b      	ldrh	r3, [r3, #0]
 8036466:	461a      	mov	r2, r3
 8036468:	68fb      	ldr	r3, [r7, #12]
 803646a:	681b      	ldr	r3, [r3, #0]
 803646c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8036470:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8036472:	68fb      	ldr	r3, [r7, #12]
 8036474:	691b      	ldr	r3, [r3, #16]
 8036476:	2b00      	cmp	r3, #0
 8036478:	d103      	bne.n	8036482 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 803647a:	68bb      	ldr	r3, [r7, #8]
 803647c:	3302      	adds	r3, #2
 803647e:	60bb      	str	r3, [r7, #8]
 8036480:	e017      	b.n	80364b2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8036482:	68bb      	ldr	r3, [r7, #8]
 8036484:	3301      	adds	r3, #1
 8036486:	60bb      	str	r3, [r7, #8]
 8036488:	e013      	b.n	80364b2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 803648a:	683b      	ldr	r3, [r7, #0]
 803648c:	9300      	str	r3, [sp, #0]
 803648e:	697b      	ldr	r3, [r7, #20]
 8036490:	2200      	movs	r2, #0
 8036492:	2180      	movs	r1, #128	; 0x80
 8036494:	68f8      	ldr	r0, [r7, #12]
 8036496:	f000 fa5d 	bl	8036954 <UART_WaitOnFlagUntilTimeout>
 803649a:	4603      	mov	r3, r0
 803649c:	2b00      	cmp	r3, #0
 803649e:	d001      	beq.n	80364a4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80364a0:	2303      	movs	r3, #3
 80364a2:	e01f      	b.n	80364e4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80364a4:	68bb      	ldr	r3, [r7, #8]
 80364a6:	1c5a      	adds	r2, r3, #1
 80364a8:	60ba      	str	r2, [r7, #8]
 80364aa:	781a      	ldrb	r2, [r3, #0]
 80364ac:	68fb      	ldr	r3, [r7, #12]
 80364ae:	681b      	ldr	r3, [r3, #0]
 80364b0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80364b2:	68fb      	ldr	r3, [r7, #12]
 80364b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80364b6:	b29b      	uxth	r3, r3
 80364b8:	2b00      	cmp	r3, #0
 80364ba:	d1b7      	bne.n	803642c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80364bc:	683b      	ldr	r3, [r7, #0]
 80364be:	9300      	str	r3, [sp, #0]
 80364c0:	697b      	ldr	r3, [r7, #20]
 80364c2:	2200      	movs	r2, #0
 80364c4:	2140      	movs	r1, #64	; 0x40
 80364c6:	68f8      	ldr	r0, [r7, #12]
 80364c8:	f000 fa44 	bl	8036954 <UART_WaitOnFlagUntilTimeout>
 80364cc:	4603      	mov	r3, r0
 80364ce:	2b00      	cmp	r3, #0
 80364d0:	d001      	beq.n	80364d6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80364d2:	2303      	movs	r3, #3
 80364d4:	e006      	b.n	80364e4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80364d6:	68fb      	ldr	r3, [r7, #12]
 80364d8:	2220      	movs	r2, #32
 80364da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80364de:	2300      	movs	r3, #0
 80364e0:	e000      	b.n	80364e4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80364e2:	2302      	movs	r3, #2
  }
}
 80364e4:	4618      	mov	r0, r3
 80364e6:	3718      	adds	r7, #24
 80364e8:	46bd      	mov	sp, r7
 80364ea:	bd80      	pop	{r7, pc}

080364ec <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80364ec:	b580      	push	{r7, lr}
 80364ee:	b086      	sub	sp, #24
 80364f0:	af00      	add	r7, sp, #0
 80364f2:	60f8      	str	r0, [r7, #12]
 80364f4:	60b9      	str	r1, [r7, #8]
 80364f6:	4613      	mov	r3, r2
 80364f8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80364fa:	68fb      	ldr	r3, [r7, #12]
 80364fc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8036500:	b2db      	uxtb	r3, r3
 8036502:	2b20      	cmp	r3, #32
 8036504:	d166      	bne.n	80365d4 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8036506:	68bb      	ldr	r3, [r7, #8]
 8036508:	2b00      	cmp	r3, #0
 803650a:	d002      	beq.n	8036512 <HAL_UART_Receive_DMA+0x26>
 803650c:	88fb      	ldrh	r3, [r7, #6]
 803650e:	2b00      	cmp	r3, #0
 8036510:	d101      	bne.n	8036516 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8036512:	2301      	movs	r3, #1
 8036514:	e05f      	b.n	80365d6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8036516:	68fb      	ldr	r3, [r7, #12]
 8036518:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 803651c:	2b01      	cmp	r3, #1
 803651e:	d101      	bne.n	8036524 <HAL_UART_Receive_DMA+0x38>
 8036520:	2302      	movs	r3, #2
 8036522:	e058      	b.n	80365d6 <HAL_UART_Receive_DMA+0xea>
 8036524:	68fb      	ldr	r3, [r7, #12]
 8036526:	2201      	movs	r2, #1
 8036528:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 803652c:	68ba      	ldr	r2, [r7, #8]
 803652e:	68fb      	ldr	r3, [r7, #12]
 8036530:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8036532:	68fb      	ldr	r3, [r7, #12]
 8036534:	88fa      	ldrh	r2, [r7, #6]
 8036536:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8036538:	68fb      	ldr	r3, [r7, #12]
 803653a:	2200      	movs	r2, #0
 803653c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 803653e:	68fb      	ldr	r3, [r7, #12]
 8036540:	2222      	movs	r2, #34	; 0x22
 8036542:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8036546:	68fb      	ldr	r3, [r7, #12]
 8036548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803654a:	4a25      	ldr	r2, [pc, #148]	; (80365e0 <HAL_UART_Receive_DMA+0xf4>)
 803654c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 803654e:	68fb      	ldr	r3, [r7, #12]
 8036550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8036552:	4a24      	ldr	r2, [pc, #144]	; (80365e4 <HAL_UART_Receive_DMA+0xf8>)
 8036554:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8036556:	68fb      	ldr	r3, [r7, #12]
 8036558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803655a:	4a23      	ldr	r2, [pc, #140]	; (80365e8 <HAL_UART_Receive_DMA+0xfc>)
 803655c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 803655e:	68fb      	ldr	r3, [r7, #12]
 8036560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8036562:	2200      	movs	r2, #0
 8036564:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8036566:	f107 0308 	add.w	r3, r7, #8
 803656a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 803656c:	68fb      	ldr	r3, [r7, #12]
 803656e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8036570:	68fb      	ldr	r3, [r7, #12]
 8036572:	681b      	ldr	r3, [r3, #0]
 8036574:	3304      	adds	r3, #4
 8036576:	4619      	mov	r1, r3
 8036578:	697b      	ldr	r3, [r7, #20]
 803657a:	681a      	ldr	r2, [r3, #0]
 803657c:	88fb      	ldrh	r3, [r7, #6]
 803657e:	f7f8 ffc9 	bl	802f514 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8036582:	2300      	movs	r3, #0
 8036584:	613b      	str	r3, [r7, #16]
 8036586:	68fb      	ldr	r3, [r7, #12]
 8036588:	681b      	ldr	r3, [r3, #0]
 803658a:	681b      	ldr	r3, [r3, #0]
 803658c:	613b      	str	r3, [r7, #16]
 803658e:	68fb      	ldr	r3, [r7, #12]
 8036590:	681b      	ldr	r3, [r3, #0]
 8036592:	685b      	ldr	r3, [r3, #4]
 8036594:	613b      	str	r3, [r7, #16]
 8036596:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8036598:	68fb      	ldr	r3, [r7, #12]
 803659a:	2200      	movs	r2, #0
 803659c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80365a0:	68fb      	ldr	r3, [r7, #12]
 80365a2:	681b      	ldr	r3, [r3, #0]
 80365a4:	68da      	ldr	r2, [r3, #12]
 80365a6:	68fb      	ldr	r3, [r7, #12]
 80365a8:	681b      	ldr	r3, [r3, #0]
 80365aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80365ae:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80365b0:	68fb      	ldr	r3, [r7, #12]
 80365b2:	681b      	ldr	r3, [r3, #0]
 80365b4:	695a      	ldr	r2, [r3, #20]
 80365b6:	68fb      	ldr	r3, [r7, #12]
 80365b8:	681b      	ldr	r3, [r3, #0]
 80365ba:	f042 0201 	orr.w	r2, r2, #1
 80365be:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80365c0:	68fb      	ldr	r3, [r7, #12]
 80365c2:	681b      	ldr	r3, [r3, #0]
 80365c4:	695a      	ldr	r2, [r3, #20]
 80365c6:	68fb      	ldr	r3, [r7, #12]
 80365c8:	681b      	ldr	r3, [r3, #0]
 80365ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80365ce:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80365d0:	2300      	movs	r3, #0
 80365d2:	e000      	b.n	80365d6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80365d4:	2302      	movs	r3, #2
  }
}
 80365d6:	4618      	mov	r0, r3
 80365d8:	3718      	adds	r7, #24
 80365da:	46bd      	mov	sp, r7
 80365dc:	bd80      	pop	{r7, pc}
 80365de:	bf00      	nop
 80365e0:	0803683d 	.word	0x0803683d
 80365e4:	080368a5 	.word	0x080368a5
 80365e8:	080368c1 	.word	0x080368c1

080365ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80365ec:	b580      	push	{r7, lr}
 80365ee:	b088      	sub	sp, #32
 80365f0:	af00      	add	r7, sp, #0
 80365f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80365f4:	687b      	ldr	r3, [r7, #4]
 80365f6:	681b      	ldr	r3, [r3, #0]
 80365f8:	681b      	ldr	r3, [r3, #0]
 80365fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80365fc:	687b      	ldr	r3, [r7, #4]
 80365fe:	681b      	ldr	r3, [r3, #0]
 8036600:	68db      	ldr	r3, [r3, #12]
 8036602:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8036604:	687b      	ldr	r3, [r7, #4]
 8036606:	681b      	ldr	r3, [r3, #0]
 8036608:	695b      	ldr	r3, [r3, #20]
 803660a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 803660c:	2300      	movs	r3, #0
 803660e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8036610:	2300      	movs	r3, #0
 8036612:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8036614:	69fb      	ldr	r3, [r7, #28]
 8036616:	f003 030f 	and.w	r3, r3, #15
 803661a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 803661c:	693b      	ldr	r3, [r7, #16]
 803661e:	2b00      	cmp	r3, #0
 8036620:	d10d      	bne.n	803663e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8036622:	69fb      	ldr	r3, [r7, #28]
 8036624:	f003 0320 	and.w	r3, r3, #32
 8036628:	2b00      	cmp	r3, #0
 803662a:	d008      	beq.n	803663e <HAL_UART_IRQHandler+0x52>
 803662c:	69bb      	ldr	r3, [r7, #24]
 803662e:	f003 0320 	and.w	r3, r3, #32
 8036632:	2b00      	cmp	r3, #0
 8036634:	d003      	beq.n	803663e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8036636:	6878      	ldr	r0, [r7, #4]
 8036638:	f000 fa8c 	bl	8036b54 <UART_Receive_IT>
      return;
 803663c:	e0d1      	b.n	80367e2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 803663e:	693b      	ldr	r3, [r7, #16]
 8036640:	2b00      	cmp	r3, #0
 8036642:	f000 80b0 	beq.w	80367a6 <HAL_UART_IRQHandler+0x1ba>
 8036646:	697b      	ldr	r3, [r7, #20]
 8036648:	f003 0301 	and.w	r3, r3, #1
 803664c:	2b00      	cmp	r3, #0
 803664e:	d105      	bne.n	803665c <HAL_UART_IRQHandler+0x70>
 8036650:	69bb      	ldr	r3, [r7, #24]
 8036652:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8036656:	2b00      	cmp	r3, #0
 8036658:	f000 80a5 	beq.w	80367a6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 803665c:	69fb      	ldr	r3, [r7, #28]
 803665e:	f003 0301 	and.w	r3, r3, #1
 8036662:	2b00      	cmp	r3, #0
 8036664:	d00a      	beq.n	803667c <HAL_UART_IRQHandler+0x90>
 8036666:	69bb      	ldr	r3, [r7, #24]
 8036668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803666c:	2b00      	cmp	r3, #0
 803666e:	d005      	beq.n	803667c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8036670:	687b      	ldr	r3, [r7, #4]
 8036672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8036674:	f043 0201 	orr.w	r2, r3, #1
 8036678:	687b      	ldr	r3, [r7, #4]
 803667a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 803667c:	69fb      	ldr	r3, [r7, #28]
 803667e:	f003 0304 	and.w	r3, r3, #4
 8036682:	2b00      	cmp	r3, #0
 8036684:	d00a      	beq.n	803669c <HAL_UART_IRQHandler+0xb0>
 8036686:	697b      	ldr	r3, [r7, #20]
 8036688:	f003 0301 	and.w	r3, r3, #1
 803668c:	2b00      	cmp	r3, #0
 803668e:	d005      	beq.n	803669c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8036690:	687b      	ldr	r3, [r7, #4]
 8036692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8036694:	f043 0202 	orr.w	r2, r3, #2
 8036698:	687b      	ldr	r3, [r7, #4]
 803669a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 803669c:	69fb      	ldr	r3, [r7, #28]
 803669e:	f003 0302 	and.w	r3, r3, #2
 80366a2:	2b00      	cmp	r3, #0
 80366a4:	d00a      	beq.n	80366bc <HAL_UART_IRQHandler+0xd0>
 80366a6:	697b      	ldr	r3, [r7, #20]
 80366a8:	f003 0301 	and.w	r3, r3, #1
 80366ac:	2b00      	cmp	r3, #0
 80366ae:	d005      	beq.n	80366bc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80366b0:	687b      	ldr	r3, [r7, #4]
 80366b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80366b4:	f043 0204 	orr.w	r2, r3, #4
 80366b8:	687b      	ldr	r3, [r7, #4]
 80366ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80366bc:	69fb      	ldr	r3, [r7, #28]
 80366be:	f003 0308 	and.w	r3, r3, #8
 80366c2:	2b00      	cmp	r3, #0
 80366c4:	d00f      	beq.n	80366e6 <HAL_UART_IRQHandler+0xfa>
 80366c6:	69bb      	ldr	r3, [r7, #24]
 80366c8:	f003 0320 	and.w	r3, r3, #32
 80366cc:	2b00      	cmp	r3, #0
 80366ce:	d104      	bne.n	80366da <HAL_UART_IRQHandler+0xee>
 80366d0:	697b      	ldr	r3, [r7, #20]
 80366d2:	f003 0301 	and.w	r3, r3, #1
 80366d6:	2b00      	cmp	r3, #0
 80366d8:	d005      	beq.n	80366e6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80366da:	687b      	ldr	r3, [r7, #4]
 80366dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80366de:	f043 0208 	orr.w	r2, r3, #8
 80366e2:	687b      	ldr	r3, [r7, #4]
 80366e4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80366e6:	687b      	ldr	r3, [r7, #4]
 80366e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80366ea:	2b00      	cmp	r3, #0
 80366ec:	d078      	beq.n	80367e0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80366ee:	69fb      	ldr	r3, [r7, #28]
 80366f0:	f003 0320 	and.w	r3, r3, #32
 80366f4:	2b00      	cmp	r3, #0
 80366f6:	d007      	beq.n	8036708 <HAL_UART_IRQHandler+0x11c>
 80366f8:	69bb      	ldr	r3, [r7, #24]
 80366fa:	f003 0320 	and.w	r3, r3, #32
 80366fe:	2b00      	cmp	r3, #0
 8036700:	d002      	beq.n	8036708 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8036702:	6878      	ldr	r0, [r7, #4]
 8036704:	f000 fa26 	bl	8036b54 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8036708:	687b      	ldr	r3, [r7, #4]
 803670a:	681b      	ldr	r3, [r3, #0]
 803670c:	695b      	ldr	r3, [r3, #20]
 803670e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8036712:	2b40      	cmp	r3, #64	; 0x40
 8036714:	bf0c      	ite	eq
 8036716:	2301      	moveq	r3, #1
 8036718:	2300      	movne	r3, #0
 803671a:	b2db      	uxtb	r3, r3
 803671c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 803671e:	687b      	ldr	r3, [r7, #4]
 8036720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8036722:	f003 0308 	and.w	r3, r3, #8
 8036726:	2b00      	cmp	r3, #0
 8036728:	d102      	bne.n	8036730 <HAL_UART_IRQHandler+0x144>
 803672a:	68fb      	ldr	r3, [r7, #12]
 803672c:	2b00      	cmp	r3, #0
 803672e:	d031      	beq.n	8036794 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8036730:	6878      	ldr	r0, [r7, #4]
 8036732:	f000 f96f 	bl	8036a14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8036736:	687b      	ldr	r3, [r7, #4]
 8036738:	681b      	ldr	r3, [r3, #0]
 803673a:	695b      	ldr	r3, [r3, #20]
 803673c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8036740:	2b40      	cmp	r3, #64	; 0x40
 8036742:	d123      	bne.n	803678c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8036744:	687b      	ldr	r3, [r7, #4]
 8036746:	681b      	ldr	r3, [r3, #0]
 8036748:	695a      	ldr	r2, [r3, #20]
 803674a:	687b      	ldr	r3, [r7, #4]
 803674c:	681b      	ldr	r3, [r3, #0]
 803674e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8036752:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8036754:	687b      	ldr	r3, [r7, #4]
 8036756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8036758:	2b00      	cmp	r3, #0
 803675a:	d013      	beq.n	8036784 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 803675c:	687b      	ldr	r3, [r7, #4]
 803675e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8036760:	4a21      	ldr	r2, [pc, #132]	; (80367e8 <HAL_UART_IRQHandler+0x1fc>)
 8036762:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8036764:	687b      	ldr	r3, [r7, #4]
 8036766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8036768:	4618      	mov	r0, r3
 803676a:	f7f8 ff2b 	bl	802f5c4 <HAL_DMA_Abort_IT>
 803676e:	4603      	mov	r3, r0
 8036770:	2b00      	cmp	r3, #0
 8036772:	d016      	beq.n	80367a2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8036774:	687b      	ldr	r3, [r7, #4]
 8036776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8036778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803677a:	687a      	ldr	r2, [r7, #4]
 803677c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 803677e:	4610      	mov	r0, r2
 8036780:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8036782:	e00e      	b.n	80367a2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8036784:	6878      	ldr	r0, [r7, #4]
 8036786:	f000 f84f 	bl	8036828 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 803678a:	e00a      	b.n	80367a2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 803678c:	6878      	ldr	r0, [r7, #4]
 803678e:	f000 f84b 	bl	8036828 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8036792:	e006      	b.n	80367a2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8036794:	6878      	ldr	r0, [r7, #4]
 8036796:	f000 f847 	bl	8036828 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 803679a:	687b      	ldr	r3, [r7, #4]
 803679c:	2200      	movs	r2, #0
 803679e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80367a0:	e01e      	b.n	80367e0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80367a2:	bf00      	nop
    return;
 80367a4:	e01c      	b.n	80367e0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80367a6:	69fb      	ldr	r3, [r7, #28]
 80367a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80367ac:	2b00      	cmp	r3, #0
 80367ae:	d008      	beq.n	80367c2 <HAL_UART_IRQHandler+0x1d6>
 80367b0:	69bb      	ldr	r3, [r7, #24]
 80367b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80367b6:	2b00      	cmp	r3, #0
 80367b8:	d003      	beq.n	80367c2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80367ba:	6878      	ldr	r0, [r7, #4]
 80367bc:	f000 f95c 	bl	8036a78 <UART_Transmit_IT>
    return;
 80367c0:	e00f      	b.n	80367e2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80367c2:	69fb      	ldr	r3, [r7, #28]
 80367c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80367c8:	2b00      	cmp	r3, #0
 80367ca:	d00a      	beq.n	80367e2 <HAL_UART_IRQHandler+0x1f6>
 80367cc:	69bb      	ldr	r3, [r7, #24]
 80367ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80367d2:	2b00      	cmp	r3, #0
 80367d4:	d005      	beq.n	80367e2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80367d6:	6878      	ldr	r0, [r7, #4]
 80367d8:	f000 f9a4 	bl	8036b24 <UART_EndTransmit_IT>
    return;
 80367dc:	bf00      	nop
 80367de:	e000      	b.n	80367e2 <HAL_UART_IRQHandler+0x1f6>
    return;
 80367e0:	bf00      	nop
  }
}
 80367e2:	3720      	adds	r7, #32
 80367e4:	46bd      	mov	sp, r7
 80367e6:	bd80      	pop	{r7, pc}
 80367e8:	08036a51 	.word	0x08036a51

080367ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80367ec:	b480      	push	{r7}
 80367ee:	b083      	sub	sp, #12
 80367f0:	af00      	add	r7, sp, #0
 80367f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80367f4:	bf00      	nop
 80367f6:	370c      	adds	r7, #12
 80367f8:	46bd      	mov	sp, r7
 80367fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80367fe:	4770      	bx	lr

08036800 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8036800:	b480      	push	{r7}
 8036802:	b083      	sub	sp, #12
 8036804:	af00      	add	r7, sp, #0
 8036806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8036808:	bf00      	nop
 803680a:	370c      	adds	r7, #12
 803680c:	46bd      	mov	sp, r7
 803680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036812:	4770      	bx	lr

08036814 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8036814:	b480      	push	{r7}
 8036816:	b083      	sub	sp, #12
 8036818:	af00      	add	r7, sp, #0
 803681a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 803681c:	bf00      	nop
 803681e:	370c      	adds	r7, #12
 8036820:	46bd      	mov	sp, r7
 8036822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036826:	4770      	bx	lr

08036828 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8036828:	b480      	push	{r7}
 803682a:	b083      	sub	sp, #12
 803682c:	af00      	add	r7, sp, #0
 803682e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8036830:	bf00      	nop
 8036832:	370c      	adds	r7, #12
 8036834:	46bd      	mov	sp, r7
 8036836:	f85d 7b04 	ldr.w	r7, [sp], #4
 803683a:	4770      	bx	lr

0803683c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 803683c:	b580      	push	{r7, lr}
 803683e:	b084      	sub	sp, #16
 8036840:	af00      	add	r7, sp, #0
 8036842:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8036844:	687b      	ldr	r3, [r7, #4]
 8036846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8036848:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 803684a:	687b      	ldr	r3, [r7, #4]
 803684c:	681b      	ldr	r3, [r3, #0]
 803684e:	681b      	ldr	r3, [r3, #0]
 8036850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8036854:	2b00      	cmp	r3, #0
 8036856:	d11e      	bne.n	8036896 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8036858:	68fb      	ldr	r3, [r7, #12]
 803685a:	2200      	movs	r2, #0
 803685c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 803685e:	68fb      	ldr	r3, [r7, #12]
 8036860:	681b      	ldr	r3, [r3, #0]
 8036862:	68da      	ldr	r2, [r3, #12]
 8036864:	68fb      	ldr	r3, [r7, #12]
 8036866:	681b      	ldr	r3, [r3, #0]
 8036868:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 803686c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 803686e:	68fb      	ldr	r3, [r7, #12]
 8036870:	681b      	ldr	r3, [r3, #0]
 8036872:	695a      	ldr	r2, [r3, #20]
 8036874:	68fb      	ldr	r3, [r7, #12]
 8036876:	681b      	ldr	r3, [r3, #0]
 8036878:	f022 0201 	bic.w	r2, r2, #1
 803687c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 803687e:	68fb      	ldr	r3, [r7, #12]
 8036880:	681b      	ldr	r3, [r3, #0]
 8036882:	695a      	ldr	r2, [r3, #20]
 8036884:	68fb      	ldr	r3, [r7, #12]
 8036886:	681b      	ldr	r3, [r3, #0]
 8036888:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 803688c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 803688e:	68fb      	ldr	r3, [r7, #12]
 8036890:	2220      	movs	r2, #32
 8036892:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8036896:	68f8      	ldr	r0, [r7, #12]
 8036898:	f7ff ffb2 	bl	8036800 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 803689c:	bf00      	nop
 803689e:	3710      	adds	r7, #16
 80368a0:	46bd      	mov	sp, r7
 80368a2:	bd80      	pop	{r7, pc}

080368a4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80368a4:	b580      	push	{r7, lr}
 80368a6:	b084      	sub	sp, #16
 80368a8:	af00      	add	r7, sp, #0
 80368aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80368ac:	687b      	ldr	r3, [r7, #4]
 80368ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80368b0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80368b2:	68f8      	ldr	r0, [r7, #12]
 80368b4:	f7ff ffae 	bl	8036814 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80368b8:	bf00      	nop
 80368ba:	3710      	adds	r7, #16
 80368bc:	46bd      	mov	sp, r7
 80368be:	bd80      	pop	{r7, pc}

080368c0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80368c0:	b580      	push	{r7, lr}
 80368c2:	b084      	sub	sp, #16
 80368c4:	af00      	add	r7, sp, #0
 80368c6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80368c8:	2300      	movs	r3, #0
 80368ca:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80368cc:	687b      	ldr	r3, [r7, #4]
 80368ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80368d0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80368d2:	68bb      	ldr	r3, [r7, #8]
 80368d4:	681b      	ldr	r3, [r3, #0]
 80368d6:	695b      	ldr	r3, [r3, #20]
 80368d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80368dc:	2b80      	cmp	r3, #128	; 0x80
 80368de:	bf0c      	ite	eq
 80368e0:	2301      	moveq	r3, #1
 80368e2:	2300      	movne	r3, #0
 80368e4:	b2db      	uxtb	r3, r3
 80368e6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80368e8:	68bb      	ldr	r3, [r7, #8]
 80368ea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80368ee:	b2db      	uxtb	r3, r3
 80368f0:	2b21      	cmp	r3, #33	; 0x21
 80368f2:	d108      	bne.n	8036906 <UART_DMAError+0x46>
 80368f4:	68fb      	ldr	r3, [r7, #12]
 80368f6:	2b00      	cmp	r3, #0
 80368f8:	d005      	beq.n	8036906 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80368fa:	68bb      	ldr	r3, [r7, #8]
 80368fc:	2200      	movs	r2, #0
 80368fe:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8036900:	68b8      	ldr	r0, [r7, #8]
 8036902:	f000 f871 	bl	80369e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8036906:	68bb      	ldr	r3, [r7, #8]
 8036908:	681b      	ldr	r3, [r3, #0]
 803690a:	695b      	ldr	r3, [r3, #20]
 803690c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8036910:	2b40      	cmp	r3, #64	; 0x40
 8036912:	bf0c      	ite	eq
 8036914:	2301      	moveq	r3, #1
 8036916:	2300      	movne	r3, #0
 8036918:	b2db      	uxtb	r3, r3
 803691a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 803691c:	68bb      	ldr	r3, [r7, #8]
 803691e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8036922:	b2db      	uxtb	r3, r3
 8036924:	2b22      	cmp	r3, #34	; 0x22
 8036926:	d108      	bne.n	803693a <UART_DMAError+0x7a>
 8036928:	68fb      	ldr	r3, [r7, #12]
 803692a:	2b00      	cmp	r3, #0
 803692c:	d005      	beq.n	803693a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 803692e:	68bb      	ldr	r3, [r7, #8]
 8036930:	2200      	movs	r2, #0
 8036932:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8036934:	68b8      	ldr	r0, [r7, #8]
 8036936:	f000 f86d 	bl	8036a14 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 803693a:	68bb      	ldr	r3, [r7, #8]
 803693c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803693e:	f043 0210 	orr.w	r2, r3, #16
 8036942:	68bb      	ldr	r3, [r7, #8]
 8036944:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8036946:	68b8      	ldr	r0, [r7, #8]
 8036948:	f7ff ff6e 	bl	8036828 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 803694c:	bf00      	nop
 803694e:	3710      	adds	r7, #16
 8036950:	46bd      	mov	sp, r7
 8036952:	bd80      	pop	{r7, pc}

08036954 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8036954:	b580      	push	{r7, lr}
 8036956:	b084      	sub	sp, #16
 8036958:	af00      	add	r7, sp, #0
 803695a:	60f8      	str	r0, [r7, #12]
 803695c:	60b9      	str	r1, [r7, #8]
 803695e:	603b      	str	r3, [r7, #0]
 8036960:	4613      	mov	r3, r2
 8036962:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8036964:	e02c      	b.n	80369c0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8036966:	69bb      	ldr	r3, [r7, #24]
 8036968:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 803696c:	d028      	beq.n	80369c0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 803696e:	69bb      	ldr	r3, [r7, #24]
 8036970:	2b00      	cmp	r3, #0
 8036972:	d007      	beq.n	8036984 <UART_WaitOnFlagUntilTimeout+0x30>
 8036974:	f7f5 fc68 	bl	802c248 <HAL_GetTick>
 8036978:	4602      	mov	r2, r0
 803697a:	683b      	ldr	r3, [r7, #0]
 803697c:	1ad3      	subs	r3, r2, r3
 803697e:	69ba      	ldr	r2, [r7, #24]
 8036980:	429a      	cmp	r2, r3
 8036982:	d21d      	bcs.n	80369c0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8036984:	68fb      	ldr	r3, [r7, #12]
 8036986:	681b      	ldr	r3, [r3, #0]
 8036988:	68da      	ldr	r2, [r3, #12]
 803698a:	68fb      	ldr	r3, [r7, #12]
 803698c:	681b      	ldr	r3, [r3, #0]
 803698e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8036992:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8036994:	68fb      	ldr	r3, [r7, #12]
 8036996:	681b      	ldr	r3, [r3, #0]
 8036998:	695a      	ldr	r2, [r3, #20]
 803699a:	68fb      	ldr	r3, [r7, #12]
 803699c:	681b      	ldr	r3, [r3, #0]
 803699e:	f022 0201 	bic.w	r2, r2, #1
 80369a2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80369a4:	68fb      	ldr	r3, [r7, #12]
 80369a6:	2220      	movs	r2, #32
 80369a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80369ac:	68fb      	ldr	r3, [r7, #12]
 80369ae:	2220      	movs	r2, #32
 80369b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80369b4:	68fb      	ldr	r3, [r7, #12]
 80369b6:	2200      	movs	r2, #0
 80369b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80369bc:	2303      	movs	r3, #3
 80369be:	e00f      	b.n	80369e0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80369c0:	68fb      	ldr	r3, [r7, #12]
 80369c2:	681b      	ldr	r3, [r3, #0]
 80369c4:	681a      	ldr	r2, [r3, #0]
 80369c6:	68bb      	ldr	r3, [r7, #8]
 80369c8:	4013      	ands	r3, r2
 80369ca:	68ba      	ldr	r2, [r7, #8]
 80369cc:	429a      	cmp	r2, r3
 80369ce:	bf0c      	ite	eq
 80369d0:	2301      	moveq	r3, #1
 80369d2:	2300      	movne	r3, #0
 80369d4:	b2db      	uxtb	r3, r3
 80369d6:	461a      	mov	r2, r3
 80369d8:	79fb      	ldrb	r3, [r7, #7]
 80369da:	429a      	cmp	r2, r3
 80369dc:	d0c3      	beq.n	8036966 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80369de:	2300      	movs	r3, #0
}
 80369e0:	4618      	mov	r0, r3
 80369e2:	3710      	adds	r7, #16
 80369e4:	46bd      	mov	sp, r7
 80369e6:	bd80      	pop	{r7, pc}

080369e8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80369e8:	b480      	push	{r7}
 80369ea:	b083      	sub	sp, #12
 80369ec:	af00      	add	r7, sp, #0
 80369ee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80369f0:	687b      	ldr	r3, [r7, #4]
 80369f2:	681b      	ldr	r3, [r3, #0]
 80369f4:	68da      	ldr	r2, [r3, #12]
 80369f6:	687b      	ldr	r3, [r7, #4]
 80369f8:	681b      	ldr	r3, [r3, #0]
 80369fa:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80369fe:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8036a00:	687b      	ldr	r3, [r7, #4]
 8036a02:	2220      	movs	r2, #32
 8036a04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8036a08:	bf00      	nop
 8036a0a:	370c      	adds	r7, #12
 8036a0c:	46bd      	mov	sp, r7
 8036a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036a12:	4770      	bx	lr

08036a14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8036a14:	b480      	push	{r7}
 8036a16:	b083      	sub	sp, #12
 8036a18:	af00      	add	r7, sp, #0
 8036a1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8036a1c:	687b      	ldr	r3, [r7, #4]
 8036a1e:	681b      	ldr	r3, [r3, #0]
 8036a20:	68da      	ldr	r2, [r3, #12]
 8036a22:	687b      	ldr	r3, [r7, #4]
 8036a24:	681b      	ldr	r3, [r3, #0]
 8036a26:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8036a2a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8036a2c:	687b      	ldr	r3, [r7, #4]
 8036a2e:	681b      	ldr	r3, [r3, #0]
 8036a30:	695a      	ldr	r2, [r3, #20]
 8036a32:	687b      	ldr	r3, [r7, #4]
 8036a34:	681b      	ldr	r3, [r3, #0]
 8036a36:	f022 0201 	bic.w	r2, r2, #1
 8036a3a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8036a3c:	687b      	ldr	r3, [r7, #4]
 8036a3e:	2220      	movs	r2, #32
 8036a40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8036a44:	bf00      	nop
 8036a46:	370c      	adds	r7, #12
 8036a48:	46bd      	mov	sp, r7
 8036a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036a4e:	4770      	bx	lr

08036a50 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8036a50:	b580      	push	{r7, lr}
 8036a52:	b084      	sub	sp, #16
 8036a54:	af00      	add	r7, sp, #0
 8036a56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8036a58:	687b      	ldr	r3, [r7, #4]
 8036a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8036a5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8036a5e:	68fb      	ldr	r3, [r7, #12]
 8036a60:	2200      	movs	r2, #0
 8036a62:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8036a64:	68fb      	ldr	r3, [r7, #12]
 8036a66:	2200      	movs	r2, #0
 8036a68:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8036a6a:	68f8      	ldr	r0, [r7, #12]
 8036a6c:	f7ff fedc 	bl	8036828 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8036a70:	bf00      	nop
 8036a72:	3710      	adds	r7, #16
 8036a74:	46bd      	mov	sp, r7
 8036a76:	bd80      	pop	{r7, pc}

08036a78 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8036a78:	b480      	push	{r7}
 8036a7a:	b085      	sub	sp, #20
 8036a7c:	af00      	add	r7, sp, #0
 8036a7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8036a80:	687b      	ldr	r3, [r7, #4]
 8036a82:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8036a86:	b2db      	uxtb	r3, r3
 8036a88:	2b21      	cmp	r3, #33	; 0x21
 8036a8a:	d144      	bne.n	8036b16 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8036a8c:	687b      	ldr	r3, [r7, #4]
 8036a8e:	689b      	ldr	r3, [r3, #8]
 8036a90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8036a94:	d11a      	bne.n	8036acc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8036a96:	687b      	ldr	r3, [r7, #4]
 8036a98:	6a1b      	ldr	r3, [r3, #32]
 8036a9a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8036a9c:	68fb      	ldr	r3, [r7, #12]
 8036a9e:	881b      	ldrh	r3, [r3, #0]
 8036aa0:	461a      	mov	r2, r3
 8036aa2:	687b      	ldr	r3, [r7, #4]
 8036aa4:	681b      	ldr	r3, [r3, #0]
 8036aa6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8036aaa:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8036aac:	687b      	ldr	r3, [r7, #4]
 8036aae:	691b      	ldr	r3, [r3, #16]
 8036ab0:	2b00      	cmp	r3, #0
 8036ab2:	d105      	bne.n	8036ac0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8036ab4:	687b      	ldr	r3, [r7, #4]
 8036ab6:	6a1b      	ldr	r3, [r3, #32]
 8036ab8:	1c9a      	adds	r2, r3, #2
 8036aba:	687b      	ldr	r3, [r7, #4]
 8036abc:	621a      	str	r2, [r3, #32]
 8036abe:	e00e      	b.n	8036ade <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8036ac0:	687b      	ldr	r3, [r7, #4]
 8036ac2:	6a1b      	ldr	r3, [r3, #32]
 8036ac4:	1c5a      	adds	r2, r3, #1
 8036ac6:	687b      	ldr	r3, [r7, #4]
 8036ac8:	621a      	str	r2, [r3, #32]
 8036aca:	e008      	b.n	8036ade <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8036acc:	687b      	ldr	r3, [r7, #4]
 8036ace:	6a1b      	ldr	r3, [r3, #32]
 8036ad0:	1c59      	adds	r1, r3, #1
 8036ad2:	687a      	ldr	r2, [r7, #4]
 8036ad4:	6211      	str	r1, [r2, #32]
 8036ad6:	781a      	ldrb	r2, [r3, #0]
 8036ad8:	687b      	ldr	r3, [r7, #4]
 8036ada:	681b      	ldr	r3, [r3, #0]
 8036adc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8036ade:	687b      	ldr	r3, [r7, #4]
 8036ae0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8036ae2:	b29b      	uxth	r3, r3
 8036ae4:	3b01      	subs	r3, #1
 8036ae6:	b29b      	uxth	r3, r3
 8036ae8:	687a      	ldr	r2, [r7, #4]
 8036aea:	4619      	mov	r1, r3
 8036aec:	84d1      	strh	r1, [r2, #38]	; 0x26
 8036aee:	2b00      	cmp	r3, #0
 8036af0:	d10f      	bne.n	8036b12 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8036af2:	687b      	ldr	r3, [r7, #4]
 8036af4:	681b      	ldr	r3, [r3, #0]
 8036af6:	68da      	ldr	r2, [r3, #12]
 8036af8:	687b      	ldr	r3, [r7, #4]
 8036afa:	681b      	ldr	r3, [r3, #0]
 8036afc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8036b00:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8036b02:	687b      	ldr	r3, [r7, #4]
 8036b04:	681b      	ldr	r3, [r3, #0]
 8036b06:	68da      	ldr	r2, [r3, #12]
 8036b08:	687b      	ldr	r3, [r7, #4]
 8036b0a:	681b      	ldr	r3, [r3, #0]
 8036b0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8036b10:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8036b12:	2300      	movs	r3, #0
 8036b14:	e000      	b.n	8036b18 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8036b16:	2302      	movs	r3, #2
  }
}
 8036b18:	4618      	mov	r0, r3
 8036b1a:	3714      	adds	r7, #20
 8036b1c:	46bd      	mov	sp, r7
 8036b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036b22:	4770      	bx	lr

08036b24 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8036b24:	b580      	push	{r7, lr}
 8036b26:	b082      	sub	sp, #8
 8036b28:	af00      	add	r7, sp, #0
 8036b2a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8036b2c:	687b      	ldr	r3, [r7, #4]
 8036b2e:	681b      	ldr	r3, [r3, #0]
 8036b30:	68da      	ldr	r2, [r3, #12]
 8036b32:	687b      	ldr	r3, [r7, #4]
 8036b34:	681b      	ldr	r3, [r3, #0]
 8036b36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8036b3a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8036b3c:	687b      	ldr	r3, [r7, #4]
 8036b3e:	2220      	movs	r2, #32
 8036b40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8036b44:	6878      	ldr	r0, [r7, #4]
 8036b46:	f7ff fe51 	bl	80367ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8036b4a:	2300      	movs	r3, #0
}
 8036b4c:	4618      	mov	r0, r3
 8036b4e:	3708      	adds	r7, #8
 8036b50:	46bd      	mov	sp, r7
 8036b52:	bd80      	pop	{r7, pc}

08036b54 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8036b54:	b580      	push	{r7, lr}
 8036b56:	b084      	sub	sp, #16
 8036b58:	af00      	add	r7, sp, #0
 8036b5a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8036b5c:	687b      	ldr	r3, [r7, #4]
 8036b5e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8036b62:	b2db      	uxtb	r3, r3
 8036b64:	2b22      	cmp	r3, #34	; 0x22
 8036b66:	d171      	bne.n	8036c4c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8036b68:	687b      	ldr	r3, [r7, #4]
 8036b6a:	689b      	ldr	r3, [r3, #8]
 8036b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8036b70:	d123      	bne.n	8036bba <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8036b72:	687b      	ldr	r3, [r7, #4]
 8036b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8036b76:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8036b78:	687b      	ldr	r3, [r7, #4]
 8036b7a:	691b      	ldr	r3, [r3, #16]
 8036b7c:	2b00      	cmp	r3, #0
 8036b7e:	d10e      	bne.n	8036b9e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8036b80:	687b      	ldr	r3, [r7, #4]
 8036b82:	681b      	ldr	r3, [r3, #0]
 8036b84:	685b      	ldr	r3, [r3, #4]
 8036b86:	b29b      	uxth	r3, r3
 8036b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8036b8c:	b29a      	uxth	r2, r3
 8036b8e:	68fb      	ldr	r3, [r7, #12]
 8036b90:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8036b92:	687b      	ldr	r3, [r7, #4]
 8036b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8036b96:	1c9a      	adds	r2, r3, #2
 8036b98:	687b      	ldr	r3, [r7, #4]
 8036b9a:	629a      	str	r2, [r3, #40]	; 0x28
 8036b9c:	e029      	b.n	8036bf2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8036b9e:	687b      	ldr	r3, [r7, #4]
 8036ba0:	681b      	ldr	r3, [r3, #0]
 8036ba2:	685b      	ldr	r3, [r3, #4]
 8036ba4:	b29b      	uxth	r3, r3
 8036ba6:	b2db      	uxtb	r3, r3
 8036ba8:	b29a      	uxth	r2, r3
 8036baa:	68fb      	ldr	r3, [r7, #12]
 8036bac:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8036bae:	687b      	ldr	r3, [r7, #4]
 8036bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8036bb2:	1c5a      	adds	r2, r3, #1
 8036bb4:	687b      	ldr	r3, [r7, #4]
 8036bb6:	629a      	str	r2, [r3, #40]	; 0x28
 8036bb8:	e01b      	b.n	8036bf2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8036bba:	687b      	ldr	r3, [r7, #4]
 8036bbc:	691b      	ldr	r3, [r3, #16]
 8036bbe:	2b00      	cmp	r3, #0
 8036bc0:	d10a      	bne.n	8036bd8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8036bc2:	687b      	ldr	r3, [r7, #4]
 8036bc4:	681b      	ldr	r3, [r3, #0]
 8036bc6:	6858      	ldr	r0, [r3, #4]
 8036bc8:	687b      	ldr	r3, [r7, #4]
 8036bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8036bcc:	1c59      	adds	r1, r3, #1
 8036bce:	687a      	ldr	r2, [r7, #4]
 8036bd0:	6291      	str	r1, [r2, #40]	; 0x28
 8036bd2:	b2c2      	uxtb	r2, r0
 8036bd4:	701a      	strb	r2, [r3, #0]
 8036bd6:	e00c      	b.n	8036bf2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8036bd8:	687b      	ldr	r3, [r7, #4]
 8036bda:	681b      	ldr	r3, [r3, #0]
 8036bdc:	685b      	ldr	r3, [r3, #4]
 8036bde:	b2da      	uxtb	r2, r3
 8036be0:	687b      	ldr	r3, [r7, #4]
 8036be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8036be4:	1c58      	adds	r0, r3, #1
 8036be6:	6879      	ldr	r1, [r7, #4]
 8036be8:	6288      	str	r0, [r1, #40]	; 0x28
 8036bea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8036bee:	b2d2      	uxtb	r2, r2
 8036bf0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8036bf2:	687b      	ldr	r3, [r7, #4]
 8036bf4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8036bf6:	b29b      	uxth	r3, r3
 8036bf8:	3b01      	subs	r3, #1
 8036bfa:	b29b      	uxth	r3, r3
 8036bfc:	687a      	ldr	r2, [r7, #4]
 8036bfe:	4619      	mov	r1, r3
 8036c00:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8036c02:	2b00      	cmp	r3, #0
 8036c04:	d120      	bne.n	8036c48 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8036c06:	687b      	ldr	r3, [r7, #4]
 8036c08:	681b      	ldr	r3, [r3, #0]
 8036c0a:	68da      	ldr	r2, [r3, #12]
 8036c0c:	687b      	ldr	r3, [r7, #4]
 8036c0e:	681b      	ldr	r3, [r3, #0]
 8036c10:	f022 0220 	bic.w	r2, r2, #32
 8036c14:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8036c16:	687b      	ldr	r3, [r7, #4]
 8036c18:	681b      	ldr	r3, [r3, #0]
 8036c1a:	68da      	ldr	r2, [r3, #12]
 8036c1c:	687b      	ldr	r3, [r7, #4]
 8036c1e:	681b      	ldr	r3, [r3, #0]
 8036c20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8036c24:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8036c26:	687b      	ldr	r3, [r7, #4]
 8036c28:	681b      	ldr	r3, [r3, #0]
 8036c2a:	695a      	ldr	r2, [r3, #20]
 8036c2c:	687b      	ldr	r3, [r7, #4]
 8036c2e:	681b      	ldr	r3, [r3, #0]
 8036c30:	f022 0201 	bic.w	r2, r2, #1
 8036c34:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8036c36:	687b      	ldr	r3, [r7, #4]
 8036c38:	2220      	movs	r2, #32
 8036c3a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8036c3e:	6878      	ldr	r0, [r7, #4]
 8036c40:	f7ff fdde 	bl	8036800 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8036c44:	2300      	movs	r3, #0
 8036c46:	e002      	b.n	8036c4e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8036c48:	2300      	movs	r3, #0
 8036c4a:	e000      	b.n	8036c4e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8036c4c:	2302      	movs	r3, #2
  }
}
 8036c4e:	4618      	mov	r0, r3
 8036c50:	3710      	adds	r7, #16
 8036c52:	46bd      	mov	sp, r7
 8036c54:	bd80      	pop	{r7, pc}
	...

08036c58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8036c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8036c5c:	b085      	sub	sp, #20
 8036c5e:	af00      	add	r7, sp, #0
 8036c60:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8036c62:	687b      	ldr	r3, [r7, #4]
 8036c64:	681b      	ldr	r3, [r3, #0]
 8036c66:	691b      	ldr	r3, [r3, #16]
 8036c68:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8036c6c:	687b      	ldr	r3, [r7, #4]
 8036c6e:	68da      	ldr	r2, [r3, #12]
 8036c70:	687b      	ldr	r3, [r7, #4]
 8036c72:	681b      	ldr	r3, [r3, #0]
 8036c74:	430a      	orrs	r2, r1
 8036c76:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8036c78:	687b      	ldr	r3, [r7, #4]
 8036c7a:	689a      	ldr	r2, [r3, #8]
 8036c7c:	687b      	ldr	r3, [r7, #4]
 8036c7e:	691b      	ldr	r3, [r3, #16]
 8036c80:	431a      	orrs	r2, r3
 8036c82:	687b      	ldr	r3, [r7, #4]
 8036c84:	695b      	ldr	r3, [r3, #20]
 8036c86:	431a      	orrs	r2, r3
 8036c88:	687b      	ldr	r3, [r7, #4]
 8036c8a:	69db      	ldr	r3, [r3, #28]
 8036c8c:	4313      	orrs	r3, r2
 8036c8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8036c90:	687b      	ldr	r3, [r7, #4]
 8036c92:	681b      	ldr	r3, [r3, #0]
 8036c94:	68db      	ldr	r3, [r3, #12]
 8036c96:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8036c9a:	f023 030c 	bic.w	r3, r3, #12
 8036c9e:	687a      	ldr	r2, [r7, #4]
 8036ca0:	6812      	ldr	r2, [r2, #0]
 8036ca2:	68f9      	ldr	r1, [r7, #12]
 8036ca4:	430b      	orrs	r3, r1
 8036ca6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8036ca8:	687b      	ldr	r3, [r7, #4]
 8036caa:	681b      	ldr	r3, [r3, #0]
 8036cac:	695b      	ldr	r3, [r3, #20]
 8036cae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8036cb2:	687b      	ldr	r3, [r7, #4]
 8036cb4:	699a      	ldr	r2, [r3, #24]
 8036cb6:	687b      	ldr	r3, [r7, #4]
 8036cb8:	681b      	ldr	r3, [r3, #0]
 8036cba:	430a      	orrs	r2, r1
 8036cbc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8036cbe:	687b      	ldr	r3, [r7, #4]
 8036cc0:	69db      	ldr	r3, [r3, #28]
 8036cc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8036cc6:	f040 8199 	bne.w	8036ffc <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8036cca:	687b      	ldr	r3, [r7, #4]
 8036ccc:	681b      	ldr	r3, [r3, #0]
 8036cce:	4ac6      	ldr	r2, [pc, #792]	; (8036fe8 <UART_SetConfig+0x390>)
 8036cd0:	4293      	cmp	r3, r2
 8036cd2:	d00f      	beq.n	8036cf4 <UART_SetConfig+0x9c>
 8036cd4:	687b      	ldr	r3, [r7, #4]
 8036cd6:	681b      	ldr	r3, [r3, #0]
 8036cd8:	4ac4      	ldr	r2, [pc, #784]	; (8036fec <UART_SetConfig+0x394>)
 8036cda:	4293      	cmp	r3, r2
 8036cdc:	d00a      	beq.n	8036cf4 <UART_SetConfig+0x9c>
 8036cde:	687b      	ldr	r3, [r7, #4]
 8036ce0:	681b      	ldr	r3, [r3, #0]
 8036ce2:	4ac3      	ldr	r2, [pc, #780]	; (8036ff0 <UART_SetConfig+0x398>)
 8036ce4:	4293      	cmp	r3, r2
 8036ce6:	d005      	beq.n	8036cf4 <UART_SetConfig+0x9c>
 8036ce8:	687b      	ldr	r3, [r7, #4]
 8036cea:	681b      	ldr	r3, [r3, #0]
 8036cec:	4ac1      	ldr	r2, [pc, #772]	; (8036ff4 <UART_SetConfig+0x39c>)
 8036cee:	4293      	cmp	r3, r2
 8036cf0:	f040 80bd 	bne.w	8036e6e <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8036cf4:	f7fd f8c4 	bl	8033e80 <HAL_RCC_GetPCLK2Freq>
 8036cf8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8036cfa:	68bb      	ldr	r3, [r7, #8]
 8036cfc:	461d      	mov	r5, r3
 8036cfe:	f04f 0600 	mov.w	r6, #0
 8036d02:	46a8      	mov	r8, r5
 8036d04:	46b1      	mov	r9, r6
 8036d06:	eb18 0308 	adds.w	r3, r8, r8
 8036d0a:	eb49 0409 	adc.w	r4, r9, r9
 8036d0e:	4698      	mov	r8, r3
 8036d10:	46a1      	mov	r9, r4
 8036d12:	eb18 0805 	adds.w	r8, r8, r5
 8036d16:	eb49 0906 	adc.w	r9, r9, r6
 8036d1a:	f04f 0100 	mov.w	r1, #0
 8036d1e:	f04f 0200 	mov.w	r2, #0
 8036d22:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8036d26:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8036d2a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8036d2e:	4688      	mov	r8, r1
 8036d30:	4691      	mov	r9, r2
 8036d32:	eb18 0005 	adds.w	r0, r8, r5
 8036d36:	eb49 0106 	adc.w	r1, r9, r6
 8036d3a:	687b      	ldr	r3, [r7, #4]
 8036d3c:	685b      	ldr	r3, [r3, #4]
 8036d3e:	461d      	mov	r5, r3
 8036d40:	f04f 0600 	mov.w	r6, #0
 8036d44:	196b      	adds	r3, r5, r5
 8036d46:	eb46 0406 	adc.w	r4, r6, r6
 8036d4a:	461a      	mov	r2, r3
 8036d4c:	4623      	mov	r3, r4
 8036d4e:	f7e9 ffd3 	bl	8020cf8 <__aeabi_uldivmod>
 8036d52:	4603      	mov	r3, r0
 8036d54:	460c      	mov	r4, r1
 8036d56:	461a      	mov	r2, r3
 8036d58:	4ba7      	ldr	r3, [pc, #668]	; (8036ff8 <UART_SetConfig+0x3a0>)
 8036d5a:	fba3 2302 	umull	r2, r3, r3, r2
 8036d5e:	095b      	lsrs	r3, r3, #5
 8036d60:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8036d64:	68bb      	ldr	r3, [r7, #8]
 8036d66:	461d      	mov	r5, r3
 8036d68:	f04f 0600 	mov.w	r6, #0
 8036d6c:	46a9      	mov	r9, r5
 8036d6e:	46b2      	mov	sl, r6
 8036d70:	eb19 0309 	adds.w	r3, r9, r9
 8036d74:	eb4a 040a 	adc.w	r4, sl, sl
 8036d78:	4699      	mov	r9, r3
 8036d7a:	46a2      	mov	sl, r4
 8036d7c:	eb19 0905 	adds.w	r9, r9, r5
 8036d80:	eb4a 0a06 	adc.w	sl, sl, r6
 8036d84:	f04f 0100 	mov.w	r1, #0
 8036d88:	f04f 0200 	mov.w	r2, #0
 8036d8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8036d90:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8036d94:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8036d98:	4689      	mov	r9, r1
 8036d9a:	4692      	mov	sl, r2
 8036d9c:	eb19 0005 	adds.w	r0, r9, r5
 8036da0:	eb4a 0106 	adc.w	r1, sl, r6
 8036da4:	687b      	ldr	r3, [r7, #4]
 8036da6:	685b      	ldr	r3, [r3, #4]
 8036da8:	461d      	mov	r5, r3
 8036daa:	f04f 0600 	mov.w	r6, #0
 8036dae:	196b      	adds	r3, r5, r5
 8036db0:	eb46 0406 	adc.w	r4, r6, r6
 8036db4:	461a      	mov	r2, r3
 8036db6:	4623      	mov	r3, r4
 8036db8:	f7e9 ff9e 	bl	8020cf8 <__aeabi_uldivmod>
 8036dbc:	4603      	mov	r3, r0
 8036dbe:	460c      	mov	r4, r1
 8036dc0:	461a      	mov	r2, r3
 8036dc2:	4b8d      	ldr	r3, [pc, #564]	; (8036ff8 <UART_SetConfig+0x3a0>)
 8036dc4:	fba3 1302 	umull	r1, r3, r3, r2
 8036dc8:	095b      	lsrs	r3, r3, #5
 8036dca:	2164      	movs	r1, #100	; 0x64
 8036dcc:	fb01 f303 	mul.w	r3, r1, r3
 8036dd0:	1ad3      	subs	r3, r2, r3
 8036dd2:	00db      	lsls	r3, r3, #3
 8036dd4:	3332      	adds	r3, #50	; 0x32
 8036dd6:	4a88      	ldr	r2, [pc, #544]	; (8036ff8 <UART_SetConfig+0x3a0>)
 8036dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8036ddc:	095b      	lsrs	r3, r3, #5
 8036dde:	005b      	lsls	r3, r3, #1
 8036de0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8036de4:	4498      	add	r8, r3
 8036de6:	68bb      	ldr	r3, [r7, #8]
 8036de8:	461d      	mov	r5, r3
 8036dea:	f04f 0600 	mov.w	r6, #0
 8036dee:	46a9      	mov	r9, r5
 8036df0:	46b2      	mov	sl, r6
 8036df2:	eb19 0309 	adds.w	r3, r9, r9
 8036df6:	eb4a 040a 	adc.w	r4, sl, sl
 8036dfa:	4699      	mov	r9, r3
 8036dfc:	46a2      	mov	sl, r4
 8036dfe:	eb19 0905 	adds.w	r9, r9, r5
 8036e02:	eb4a 0a06 	adc.w	sl, sl, r6
 8036e06:	f04f 0100 	mov.w	r1, #0
 8036e0a:	f04f 0200 	mov.w	r2, #0
 8036e0e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8036e12:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8036e16:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8036e1a:	4689      	mov	r9, r1
 8036e1c:	4692      	mov	sl, r2
 8036e1e:	eb19 0005 	adds.w	r0, r9, r5
 8036e22:	eb4a 0106 	adc.w	r1, sl, r6
 8036e26:	687b      	ldr	r3, [r7, #4]
 8036e28:	685b      	ldr	r3, [r3, #4]
 8036e2a:	461d      	mov	r5, r3
 8036e2c:	f04f 0600 	mov.w	r6, #0
 8036e30:	196b      	adds	r3, r5, r5
 8036e32:	eb46 0406 	adc.w	r4, r6, r6
 8036e36:	461a      	mov	r2, r3
 8036e38:	4623      	mov	r3, r4
 8036e3a:	f7e9 ff5d 	bl	8020cf8 <__aeabi_uldivmod>
 8036e3e:	4603      	mov	r3, r0
 8036e40:	460c      	mov	r4, r1
 8036e42:	461a      	mov	r2, r3
 8036e44:	4b6c      	ldr	r3, [pc, #432]	; (8036ff8 <UART_SetConfig+0x3a0>)
 8036e46:	fba3 1302 	umull	r1, r3, r3, r2
 8036e4a:	095b      	lsrs	r3, r3, #5
 8036e4c:	2164      	movs	r1, #100	; 0x64
 8036e4e:	fb01 f303 	mul.w	r3, r1, r3
 8036e52:	1ad3      	subs	r3, r2, r3
 8036e54:	00db      	lsls	r3, r3, #3
 8036e56:	3332      	adds	r3, #50	; 0x32
 8036e58:	4a67      	ldr	r2, [pc, #412]	; (8036ff8 <UART_SetConfig+0x3a0>)
 8036e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8036e5e:	095b      	lsrs	r3, r3, #5
 8036e60:	f003 0207 	and.w	r2, r3, #7
 8036e64:	687b      	ldr	r3, [r7, #4]
 8036e66:	681b      	ldr	r3, [r3, #0]
 8036e68:	4442      	add	r2, r8
 8036e6a:	609a      	str	r2, [r3, #8]
 8036e6c:	e27d      	b.n	803736a <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8036e6e:	f7fc fff3 	bl	8033e58 <HAL_RCC_GetPCLK1Freq>
 8036e72:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8036e74:	68bb      	ldr	r3, [r7, #8]
 8036e76:	461d      	mov	r5, r3
 8036e78:	f04f 0600 	mov.w	r6, #0
 8036e7c:	46a8      	mov	r8, r5
 8036e7e:	46b1      	mov	r9, r6
 8036e80:	eb18 0308 	adds.w	r3, r8, r8
 8036e84:	eb49 0409 	adc.w	r4, r9, r9
 8036e88:	4698      	mov	r8, r3
 8036e8a:	46a1      	mov	r9, r4
 8036e8c:	eb18 0805 	adds.w	r8, r8, r5
 8036e90:	eb49 0906 	adc.w	r9, r9, r6
 8036e94:	f04f 0100 	mov.w	r1, #0
 8036e98:	f04f 0200 	mov.w	r2, #0
 8036e9c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8036ea0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8036ea4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8036ea8:	4688      	mov	r8, r1
 8036eaa:	4691      	mov	r9, r2
 8036eac:	eb18 0005 	adds.w	r0, r8, r5
 8036eb0:	eb49 0106 	adc.w	r1, r9, r6
 8036eb4:	687b      	ldr	r3, [r7, #4]
 8036eb6:	685b      	ldr	r3, [r3, #4]
 8036eb8:	461d      	mov	r5, r3
 8036eba:	f04f 0600 	mov.w	r6, #0
 8036ebe:	196b      	adds	r3, r5, r5
 8036ec0:	eb46 0406 	adc.w	r4, r6, r6
 8036ec4:	461a      	mov	r2, r3
 8036ec6:	4623      	mov	r3, r4
 8036ec8:	f7e9 ff16 	bl	8020cf8 <__aeabi_uldivmod>
 8036ecc:	4603      	mov	r3, r0
 8036ece:	460c      	mov	r4, r1
 8036ed0:	461a      	mov	r2, r3
 8036ed2:	4b49      	ldr	r3, [pc, #292]	; (8036ff8 <UART_SetConfig+0x3a0>)
 8036ed4:	fba3 2302 	umull	r2, r3, r3, r2
 8036ed8:	095b      	lsrs	r3, r3, #5
 8036eda:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8036ede:	68bb      	ldr	r3, [r7, #8]
 8036ee0:	461d      	mov	r5, r3
 8036ee2:	f04f 0600 	mov.w	r6, #0
 8036ee6:	46a9      	mov	r9, r5
 8036ee8:	46b2      	mov	sl, r6
 8036eea:	eb19 0309 	adds.w	r3, r9, r9
 8036eee:	eb4a 040a 	adc.w	r4, sl, sl
 8036ef2:	4699      	mov	r9, r3
 8036ef4:	46a2      	mov	sl, r4
 8036ef6:	eb19 0905 	adds.w	r9, r9, r5
 8036efa:	eb4a 0a06 	adc.w	sl, sl, r6
 8036efe:	f04f 0100 	mov.w	r1, #0
 8036f02:	f04f 0200 	mov.w	r2, #0
 8036f06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8036f0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8036f0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8036f12:	4689      	mov	r9, r1
 8036f14:	4692      	mov	sl, r2
 8036f16:	eb19 0005 	adds.w	r0, r9, r5
 8036f1a:	eb4a 0106 	adc.w	r1, sl, r6
 8036f1e:	687b      	ldr	r3, [r7, #4]
 8036f20:	685b      	ldr	r3, [r3, #4]
 8036f22:	461d      	mov	r5, r3
 8036f24:	f04f 0600 	mov.w	r6, #0
 8036f28:	196b      	adds	r3, r5, r5
 8036f2a:	eb46 0406 	adc.w	r4, r6, r6
 8036f2e:	461a      	mov	r2, r3
 8036f30:	4623      	mov	r3, r4
 8036f32:	f7e9 fee1 	bl	8020cf8 <__aeabi_uldivmod>
 8036f36:	4603      	mov	r3, r0
 8036f38:	460c      	mov	r4, r1
 8036f3a:	461a      	mov	r2, r3
 8036f3c:	4b2e      	ldr	r3, [pc, #184]	; (8036ff8 <UART_SetConfig+0x3a0>)
 8036f3e:	fba3 1302 	umull	r1, r3, r3, r2
 8036f42:	095b      	lsrs	r3, r3, #5
 8036f44:	2164      	movs	r1, #100	; 0x64
 8036f46:	fb01 f303 	mul.w	r3, r1, r3
 8036f4a:	1ad3      	subs	r3, r2, r3
 8036f4c:	00db      	lsls	r3, r3, #3
 8036f4e:	3332      	adds	r3, #50	; 0x32
 8036f50:	4a29      	ldr	r2, [pc, #164]	; (8036ff8 <UART_SetConfig+0x3a0>)
 8036f52:	fba2 2303 	umull	r2, r3, r2, r3
 8036f56:	095b      	lsrs	r3, r3, #5
 8036f58:	005b      	lsls	r3, r3, #1
 8036f5a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8036f5e:	4498      	add	r8, r3
 8036f60:	68bb      	ldr	r3, [r7, #8]
 8036f62:	461d      	mov	r5, r3
 8036f64:	f04f 0600 	mov.w	r6, #0
 8036f68:	46a9      	mov	r9, r5
 8036f6a:	46b2      	mov	sl, r6
 8036f6c:	eb19 0309 	adds.w	r3, r9, r9
 8036f70:	eb4a 040a 	adc.w	r4, sl, sl
 8036f74:	4699      	mov	r9, r3
 8036f76:	46a2      	mov	sl, r4
 8036f78:	eb19 0905 	adds.w	r9, r9, r5
 8036f7c:	eb4a 0a06 	adc.w	sl, sl, r6
 8036f80:	f04f 0100 	mov.w	r1, #0
 8036f84:	f04f 0200 	mov.w	r2, #0
 8036f88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8036f8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8036f90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8036f94:	4689      	mov	r9, r1
 8036f96:	4692      	mov	sl, r2
 8036f98:	eb19 0005 	adds.w	r0, r9, r5
 8036f9c:	eb4a 0106 	adc.w	r1, sl, r6
 8036fa0:	687b      	ldr	r3, [r7, #4]
 8036fa2:	685b      	ldr	r3, [r3, #4]
 8036fa4:	461d      	mov	r5, r3
 8036fa6:	f04f 0600 	mov.w	r6, #0
 8036faa:	196b      	adds	r3, r5, r5
 8036fac:	eb46 0406 	adc.w	r4, r6, r6
 8036fb0:	461a      	mov	r2, r3
 8036fb2:	4623      	mov	r3, r4
 8036fb4:	f7e9 fea0 	bl	8020cf8 <__aeabi_uldivmod>
 8036fb8:	4603      	mov	r3, r0
 8036fba:	460c      	mov	r4, r1
 8036fbc:	461a      	mov	r2, r3
 8036fbe:	4b0e      	ldr	r3, [pc, #56]	; (8036ff8 <UART_SetConfig+0x3a0>)
 8036fc0:	fba3 1302 	umull	r1, r3, r3, r2
 8036fc4:	095b      	lsrs	r3, r3, #5
 8036fc6:	2164      	movs	r1, #100	; 0x64
 8036fc8:	fb01 f303 	mul.w	r3, r1, r3
 8036fcc:	1ad3      	subs	r3, r2, r3
 8036fce:	00db      	lsls	r3, r3, #3
 8036fd0:	3332      	adds	r3, #50	; 0x32
 8036fd2:	4a09      	ldr	r2, [pc, #36]	; (8036ff8 <UART_SetConfig+0x3a0>)
 8036fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8036fd8:	095b      	lsrs	r3, r3, #5
 8036fda:	f003 0207 	and.w	r2, r3, #7
 8036fde:	687b      	ldr	r3, [r7, #4]
 8036fe0:	681b      	ldr	r3, [r3, #0]
 8036fe2:	4442      	add	r2, r8
 8036fe4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8036fe6:	e1c0      	b.n	803736a <UART_SetConfig+0x712>
 8036fe8:	40011000 	.word	0x40011000
 8036fec:	40011400 	.word	0x40011400
 8036ff0:	40011800 	.word	0x40011800
 8036ff4:	40011c00 	.word	0x40011c00
 8036ff8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8036ffc:	687b      	ldr	r3, [r7, #4]
 8036ffe:	681b      	ldr	r3, [r3, #0]
 8037000:	4adc      	ldr	r2, [pc, #880]	; (8037374 <UART_SetConfig+0x71c>)
 8037002:	4293      	cmp	r3, r2
 8037004:	d00f      	beq.n	8037026 <UART_SetConfig+0x3ce>
 8037006:	687b      	ldr	r3, [r7, #4]
 8037008:	681b      	ldr	r3, [r3, #0]
 803700a:	4adb      	ldr	r2, [pc, #876]	; (8037378 <UART_SetConfig+0x720>)
 803700c:	4293      	cmp	r3, r2
 803700e:	d00a      	beq.n	8037026 <UART_SetConfig+0x3ce>
 8037010:	687b      	ldr	r3, [r7, #4]
 8037012:	681b      	ldr	r3, [r3, #0]
 8037014:	4ad9      	ldr	r2, [pc, #868]	; (803737c <UART_SetConfig+0x724>)
 8037016:	4293      	cmp	r3, r2
 8037018:	d005      	beq.n	8037026 <UART_SetConfig+0x3ce>
 803701a:	687b      	ldr	r3, [r7, #4]
 803701c:	681b      	ldr	r3, [r3, #0]
 803701e:	4ad8      	ldr	r2, [pc, #864]	; (8037380 <UART_SetConfig+0x728>)
 8037020:	4293      	cmp	r3, r2
 8037022:	f040 80d1 	bne.w	80371c8 <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 8037026:	f7fc ff2b 	bl	8033e80 <HAL_RCC_GetPCLK2Freq>
 803702a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 803702c:	68bb      	ldr	r3, [r7, #8]
 803702e:	469a      	mov	sl, r3
 8037030:	f04f 0b00 	mov.w	fp, #0
 8037034:	46d0      	mov	r8, sl
 8037036:	46d9      	mov	r9, fp
 8037038:	eb18 0308 	adds.w	r3, r8, r8
 803703c:	eb49 0409 	adc.w	r4, r9, r9
 8037040:	4698      	mov	r8, r3
 8037042:	46a1      	mov	r9, r4
 8037044:	eb18 080a 	adds.w	r8, r8, sl
 8037048:	eb49 090b 	adc.w	r9, r9, fp
 803704c:	f04f 0100 	mov.w	r1, #0
 8037050:	f04f 0200 	mov.w	r2, #0
 8037054:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8037058:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 803705c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8037060:	4688      	mov	r8, r1
 8037062:	4691      	mov	r9, r2
 8037064:	eb1a 0508 	adds.w	r5, sl, r8
 8037068:	eb4b 0609 	adc.w	r6, fp, r9
 803706c:	687b      	ldr	r3, [r7, #4]
 803706e:	685b      	ldr	r3, [r3, #4]
 8037070:	4619      	mov	r1, r3
 8037072:	f04f 0200 	mov.w	r2, #0
 8037076:	f04f 0300 	mov.w	r3, #0
 803707a:	f04f 0400 	mov.w	r4, #0
 803707e:	0094      	lsls	r4, r2, #2
 8037080:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8037084:	008b      	lsls	r3, r1, #2
 8037086:	461a      	mov	r2, r3
 8037088:	4623      	mov	r3, r4
 803708a:	4628      	mov	r0, r5
 803708c:	4631      	mov	r1, r6
 803708e:	f7e9 fe33 	bl	8020cf8 <__aeabi_uldivmod>
 8037092:	4603      	mov	r3, r0
 8037094:	460c      	mov	r4, r1
 8037096:	461a      	mov	r2, r3
 8037098:	4bba      	ldr	r3, [pc, #744]	; (8037384 <UART_SetConfig+0x72c>)
 803709a:	fba3 2302 	umull	r2, r3, r3, r2
 803709e:	095b      	lsrs	r3, r3, #5
 80370a0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80370a4:	68bb      	ldr	r3, [r7, #8]
 80370a6:	469b      	mov	fp, r3
 80370a8:	f04f 0c00 	mov.w	ip, #0
 80370ac:	46d9      	mov	r9, fp
 80370ae:	46e2      	mov	sl, ip
 80370b0:	eb19 0309 	adds.w	r3, r9, r9
 80370b4:	eb4a 040a 	adc.w	r4, sl, sl
 80370b8:	4699      	mov	r9, r3
 80370ba:	46a2      	mov	sl, r4
 80370bc:	eb19 090b 	adds.w	r9, r9, fp
 80370c0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80370c4:	f04f 0100 	mov.w	r1, #0
 80370c8:	f04f 0200 	mov.w	r2, #0
 80370cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80370d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80370d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80370d8:	4689      	mov	r9, r1
 80370da:	4692      	mov	sl, r2
 80370dc:	eb1b 0509 	adds.w	r5, fp, r9
 80370e0:	eb4c 060a 	adc.w	r6, ip, sl
 80370e4:	687b      	ldr	r3, [r7, #4]
 80370e6:	685b      	ldr	r3, [r3, #4]
 80370e8:	4619      	mov	r1, r3
 80370ea:	f04f 0200 	mov.w	r2, #0
 80370ee:	f04f 0300 	mov.w	r3, #0
 80370f2:	f04f 0400 	mov.w	r4, #0
 80370f6:	0094      	lsls	r4, r2, #2
 80370f8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80370fc:	008b      	lsls	r3, r1, #2
 80370fe:	461a      	mov	r2, r3
 8037100:	4623      	mov	r3, r4
 8037102:	4628      	mov	r0, r5
 8037104:	4631      	mov	r1, r6
 8037106:	f7e9 fdf7 	bl	8020cf8 <__aeabi_uldivmod>
 803710a:	4603      	mov	r3, r0
 803710c:	460c      	mov	r4, r1
 803710e:	461a      	mov	r2, r3
 8037110:	4b9c      	ldr	r3, [pc, #624]	; (8037384 <UART_SetConfig+0x72c>)
 8037112:	fba3 1302 	umull	r1, r3, r3, r2
 8037116:	095b      	lsrs	r3, r3, #5
 8037118:	2164      	movs	r1, #100	; 0x64
 803711a:	fb01 f303 	mul.w	r3, r1, r3
 803711e:	1ad3      	subs	r3, r2, r3
 8037120:	011b      	lsls	r3, r3, #4
 8037122:	3332      	adds	r3, #50	; 0x32
 8037124:	4a97      	ldr	r2, [pc, #604]	; (8037384 <UART_SetConfig+0x72c>)
 8037126:	fba2 2303 	umull	r2, r3, r2, r3
 803712a:	095b      	lsrs	r3, r3, #5
 803712c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8037130:	4498      	add	r8, r3
 8037132:	68bb      	ldr	r3, [r7, #8]
 8037134:	469b      	mov	fp, r3
 8037136:	f04f 0c00 	mov.w	ip, #0
 803713a:	46d9      	mov	r9, fp
 803713c:	46e2      	mov	sl, ip
 803713e:	eb19 0309 	adds.w	r3, r9, r9
 8037142:	eb4a 040a 	adc.w	r4, sl, sl
 8037146:	4699      	mov	r9, r3
 8037148:	46a2      	mov	sl, r4
 803714a:	eb19 090b 	adds.w	r9, r9, fp
 803714e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8037152:	f04f 0100 	mov.w	r1, #0
 8037156:	f04f 0200 	mov.w	r2, #0
 803715a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 803715e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8037162:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8037166:	4689      	mov	r9, r1
 8037168:	4692      	mov	sl, r2
 803716a:	eb1b 0509 	adds.w	r5, fp, r9
 803716e:	eb4c 060a 	adc.w	r6, ip, sl
 8037172:	687b      	ldr	r3, [r7, #4]
 8037174:	685b      	ldr	r3, [r3, #4]
 8037176:	4619      	mov	r1, r3
 8037178:	f04f 0200 	mov.w	r2, #0
 803717c:	f04f 0300 	mov.w	r3, #0
 8037180:	f04f 0400 	mov.w	r4, #0
 8037184:	0094      	lsls	r4, r2, #2
 8037186:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 803718a:	008b      	lsls	r3, r1, #2
 803718c:	461a      	mov	r2, r3
 803718e:	4623      	mov	r3, r4
 8037190:	4628      	mov	r0, r5
 8037192:	4631      	mov	r1, r6
 8037194:	f7e9 fdb0 	bl	8020cf8 <__aeabi_uldivmod>
 8037198:	4603      	mov	r3, r0
 803719a:	460c      	mov	r4, r1
 803719c:	461a      	mov	r2, r3
 803719e:	4b79      	ldr	r3, [pc, #484]	; (8037384 <UART_SetConfig+0x72c>)
 80371a0:	fba3 1302 	umull	r1, r3, r3, r2
 80371a4:	095b      	lsrs	r3, r3, #5
 80371a6:	2164      	movs	r1, #100	; 0x64
 80371a8:	fb01 f303 	mul.w	r3, r1, r3
 80371ac:	1ad3      	subs	r3, r2, r3
 80371ae:	011b      	lsls	r3, r3, #4
 80371b0:	3332      	adds	r3, #50	; 0x32
 80371b2:	4a74      	ldr	r2, [pc, #464]	; (8037384 <UART_SetConfig+0x72c>)
 80371b4:	fba2 2303 	umull	r2, r3, r2, r3
 80371b8:	095b      	lsrs	r3, r3, #5
 80371ba:	f003 020f 	and.w	r2, r3, #15
 80371be:	687b      	ldr	r3, [r7, #4]
 80371c0:	681b      	ldr	r3, [r3, #0]
 80371c2:	4442      	add	r2, r8
 80371c4:	609a      	str	r2, [r3, #8]
 80371c6:	e0d0      	b.n	803736a <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 80371c8:	f7fc fe46 	bl	8033e58 <HAL_RCC_GetPCLK1Freq>
 80371cc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80371ce:	68bb      	ldr	r3, [r7, #8]
 80371d0:	469a      	mov	sl, r3
 80371d2:	f04f 0b00 	mov.w	fp, #0
 80371d6:	46d0      	mov	r8, sl
 80371d8:	46d9      	mov	r9, fp
 80371da:	eb18 0308 	adds.w	r3, r8, r8
 80371de:	eb49 0409 	adc.w	r4, r9, r9
 80371e2:	4698      	mov	r8, r3
 80371e4:	46a1      	mov	r9, r4
 80371e6:	eb18 080a 	adds.w	r8, r8, sl
 80371ea:	eb49 090b 	adc.w	r9, r9, fp
 80371ee:	f04f 0100 	mov.w	r1, #0
 80371f2:	f04f 0200 	mov.w	r2, #0
 80371f6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80371fa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80371fe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8037202:	4688      	mov	r8, r1
 8037204:	4691      	mov	r9, r2
 8037206:	eb1a 0508 	adds.w	r5, sl, r8
 803720a:	eb4b 0609 	adc.w	r6, fp, r9
 803720e:	687b      	ldr	r3, [r7, #4]
 8037210:	685b      	ldr	r3, [r3, #4]
 8037212:	4619      	mov	r1, r3
 8037214:	f04f 0200 	mov.w	r2, #0
 8037218:	f04f 0300 	mov.w	r3, #0
 803721c:	f04f 0400 	mov.w	r4, #0
 8037220:	0094      	lsls	r4, r2, #2
 8037222:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8037226:	008b      	lsls	r3, r1, #2
 8037228:	461a      	mov	r2, r3
 803722a:	4623      	mov	r3, r4
 803722c:	4628      	mov	r0, r5
 803722e:	4631      	mov	r1, r6
 8037230:	f7e9 fd62 	bl	8020cf8 <__aeabi_uldivmod>
 8037234:	4603      	mov	r3, r0
 8037236:	460c      	mov	r4, r1
 8037238:	461a      	mov	r2, r3
 803723a:	4b52      	ldr	r3, [pc, #328]	; (8037384 <UART_SetConfig+0x72c>)
 803723c:	fba3 2302 	umull	r2, r3, r3, r2
 8037240:	095b      	lsrs	r3, r3, #5
 8037242:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8037246:	68bb      	ldr	r3, [r7, #8]
 8037248:	469b      	mov	fp, r3
 803724a:	f04f 0c00 	mov.w	ip, #0
 803724e:	46d9      	mov	r9, fp
 8037250:	46e2      	mov	sl, ip
 8037252:	eb19 0309 	adds.w	r3, r9, r9
 8037256:	eb4a 040a 	adc.w	r4, sl, sl
 803725a:	4699      	mov	r9, r3
 803725c:	46a2      	mov	sl, r4
 803725e:	eb19 090b 	adds.w	r9, r9, fp
 8037262:	eb4a 0a0c 	adc.w	sl, sl, ip
 8037266:	f04f 0100 	mov.w	r1, #0
 803726a:	f04f 0200 	mov.w	r2, #0
 803726e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8037272:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8037276:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 803727a:	4689      	mov	r9, r1
 803727c:	4692      	mov	sl, r2
 803727e:	eb1b 0509 	adds.w	r5, fp, r9
 8037282:	eb4c 060a 	adc.w	r6, ip, sl
 8037286:	687b      	ldr	r3, [r7, #4]
 8037288:	685b      	ldr	r3, [r3, #4]
 803728a:	4619      	mov	r1, r3
 803728c:	f04f 0200 	mov.w	r2, #0
 8037290:	f04f 0300 	mov.w	r3, #0
 8037294:	f04f 0400 	mov.w	r4, #0
 8037298:	0094      	lsls	r4, r2, #2
 803729a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 803729e:	008b      	lsls	r3, r1, #2
 80372a0:	461a      	mov	r2, r3
 80372a2:	4623      	mov	r3, r4
 80372a4:	4628      	mov	r0, r5
 80372a6:	4631      	mov	r1, r6
 80372a8:	f7e9 fd26 	bl	8020cf8 <__aeabi_uldivmod>
 80372ac:	4603      	mov	r3, r0
 80372ae:	460c      	mov	r4, r1
 80372b0:	461a      	mov	r2, r3
 80372b2:	4b34      	ldr	r3, [pc, #208]	; (8037384 <UART_SetConfig+0x72c>)
 80372b4:	fba3 1302 	umull	r1, r3, r3, r2
 80372b8:	095b      	lsrs	r3, r3, #5
 80372ba:	2164      	movs	r1, #100	; 0x64
 80372bc:	fb01 f303 	mul.w	r3, r1, r3
 80372c0:	1ad3      	subs	r3, r2, r3
 80372c2:	011b      	lsls	r3, r3, #4
 80372c4:	3332      	adds	r3, #50	; 0x32
 80372c6:	4a2f      	ldr	r2, [pc, #188]	; (8037384 <UART_SetConfig+0x72c>)
 80372c8:	fba2 2303 	umull	r2, r3, r2, r3
 80372cc:	095b      	lsrs	r3, r3, #5
 80372ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80372d2:	4498      	add	r8, r3
 80372d4:	68bb      	ldr	r3, [r7, #8]
 80372d6:	469b      	mov	fp, r3
 80372d8:	f04f 0c00 	mov.w	ip, #0
 80372dc:	46d9      	mov	r9, fp
 80372de:	46e2      	mov	sl, ip
 80372e0:	eb19 0309 	adds.w	r3, r9, r9
 80372e4:	eb4a 040a 	adc.w	r4, sl, sl
 80372e8:	4699      	mov	r9, r3
 80372ea:	46a2      	mov	sl, r4
 80372ec:	eb19 090b 	adds.w	r9, r9, fp
 80372f0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80372f4:	f04f 0100 	mov.w	r1, #0
 80372f8:	f04f 0200 	mov.w	r2, #0
 80372fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8037300:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8037304:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8037308:	4689      	mov	r9, r1
 803730a:	4692      	mov	sl, r2
 803730c:	eb1b 0509 	adds.w	r5, fp, r9
 8037310:	eb4c 060a 	adc.w	r6, ip, sl
 8037314:	687b      	ldr	r3, [r7, #4]
 8037316:	685b      	ldr	r3, [r3, #4]
 8037318:	4619      	mov	r1, r3
 803731a:	f04f 0200 	mov.w	r2, #0
 803731e:	f04f 0300 	mov.w	r3, #0
 8037322:	f04f 0400 	mov.w	r4, #0
 8037326:	0094      	lsls	r4, r2, #2
 8037328:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 803732c:	008b      	lsls	r3, r1, #2
 803732e:	461a      	mov	r2, r3
 8037330:	4623      	mov	r3, r4
 8037332:	4628      	mov	r0, r5
 8037334:	4631      	mov	r1, r6
 8037336:	f7e9 fcdf 	bl	8020cf8 <__aeabi_uldivmod>
 803733a:	4603      	mov	r3, r0
 803733c:	460c      	mov	r4, r1
 803733e:	461a      	mov	r2, r3
 8037340:	4b10      	ldr	r3, [pc, #64]	; (8037384 <UART_SetConfig+0x72c>)
 8037342:	fba3 1302 	umull	r1, r3, r3, r2
 8037346:	095b      	lsrs	r3, r3, #5
 8037348:	2164      	movs	r1, #100	; 0x64
 803734a:	fb01 f303 	mul.w	r3, r1, r3
 803734e:	1ad3      	subs	r3, r2, r3
 8037350:	011b      	lsls	r3, r3, #4
 8037352:	3332      	adds	r3, #50	; 0x32
 8037354:	4a0b      	ldr	r2, [pc, #44]	; (8037384 <UART_SetConfig+0x72c>)
 8037356:	fba2 2303 	umull	r2, r3, r2, r3
 803735a:	095b      	lsrs	r3, r3, #5
 803735c:	f003 020f 	and.w	r2, r3, #15
 8037360:	687b      	ldr	r3, [r7, #4]
 8037362:	681b      	ldr	r3, [r3, #0]
 8037364:	4442      	add	r2, r8
 8037366:	609a      	str	r2, [r3, #8]
}
 8037368:	e7ff      	b.n	803736a <UART_SetConfig+0x712>
 803736a:	bf00      	nop
 803736c:	3714      	adds	r7, #20
 803736e:	46bd      	mov	sp, r7
 8037370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8037374:	40011000 	.word	0x40011000
 8037378:	40011400 	.word	0x40011400
 803737c:	40011800 	.word	0x40011800
 8037380:	40011c00 	.word	0x40011c00
 8037384:	51eb851f 	.word	0x51eb851f

08037388 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8037388:	b480      	push	{r7}
 803738a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 803738c:	bf00      	nop
 803738e:	46bd      	mov	sp, r7
 8037390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037394:	4770      	bx	lr
	...

08037398 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8037398:	b480      	push	{r7}
 803739a:	b085      	sub	sp, #20
 803739c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 803739e:	f3ef 8305 	mrs	r3, IPSR
 80373a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80373a4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80373a6:	2b00      	cmp	r3, #0
 80373a8:	d10f      	bne.n	80373ca <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80373aa:	f3ef 8310 	mrs	r3, PRIMASK
 80373ae:	607b      	str	r3, [r7, #4]
  return(result);
 80373b0:	687b      	ldr	r3, [r7, #4]
 80373b2:	2b00      	cmp	r3, #0
 80373b4:	d105      	bne.n	80373c2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80373b6:	f3ef 8311 	mrs	r3, BASEPRI
 80373ba:	603b      	str	r3, [r7, #0]
  return(result);
 80373bc:	683b      	ldr	r3, [r7, #0]
 80373be:	2b00      	cmp	r3, #0
 80373c0:	d007      	beq.n	80373d2 <osKernelInitialize+0x3a>
 80373c2:	4b0e      	ldr	r3, [pc, #56]	; (80373fc <osKernelInitialize+0x64>)
 80373c4:	681b      	ldr	r3, [r3, #0]
 80373c6:	2b02      	cmp	r3, #2
 80373c8:	d103      	bne.n	80373d2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80373ca:	f06f 0305 	mvn.w	r3, #5
 80373ce:	60fb      	str	r3, [r7, #12]
 80373d0:	e00c      	b.n	80373ec <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80373d2:	4b0a      	ldr	r3, [pc, #40]	; (80373fc <osKernelInitialize+0x64>)
 80373d4:	681b      	ldr	r3, [r3, #0]
 80373d6:	2b00      	cmp	r3, #0
 80373d8:	d105      	bne.n	80373e6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80373da:	4b08      	ldr	r3, [pc, #32]	; (80373fc <osKernelInitialize+0x64>)
 80373dc:	2201      	movs	r2, #1
 80373de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80373e0:	2300      	movs	r3, #0
 80373e2:	60fb      	str	r3, [r7, #12]
 80373e4:	e002      	b.n	80373ec <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80373e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80373ea:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80373ec:	68fb      	ldr	r3, [r7, #12]
}
 80373ee:	4618      	mov	r0, r3
 80373f0:	3714      	adds	r7, #20
 80373f2:	46bd      	mov	sp, r7
 80373f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80373f8:	4770      	bx	lr
 80373fa:	bf00      	nop
 80373fc:	20000f34 	.word	0x20000f34

08037400 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8037400:	b580      	push	{r7, lr}
 8037402:	b082      	sub	sp, #8
 8037404:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8037406:	f003 f831 	bl	803a46c <xTaskGetSchedulerState>
 803740a:	4603      	mov	r3, r0
 803740c:	2b00      	cmp	r3, #0
 803740e:	d004      	beq.n	803741a <osKernelGetState+0x1a>
 8037410:	2b02      	cmp	r3, #2
 8037412:	d105      	bne.n	8037420 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8037414:	2302      	movs	r3, #2
 8037416:	607b      	str	r3, [r7, #4]
      break;
 8037418:	e00c      	b.n	8037434 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 803741a:	2303      	movs	r3, #3
 803741c:	607b      	str	r3, [r7, #4]
      break;
 803741e:	e009      	b.n	8037434 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8037420:	4b07      	ldr	r3, [pc, #28]	; (8037440 <osKernelGetState+0x40>)
 8037422:	681b      	ldr	r3, [r3, #0]
 8037424:	2b01      	cmp	r3, #1
 8037426:	d102      	bne.n	803742e <osKernelGetState+0x2e>
        state = osKernelReady;
 8037428:	2301      	movs	r3, #1
 803742a:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 803742c:	e001      	b.n	8037432 <osKernelGetState+0x32>
        state = osKernelInactive;
 803742e:	2300      	movs	r3, #0
 8037430:	607b      	str	r3, [r7, #4]
      break;
 8037432:	bf00      	nop
  }

  return (state);
 8037434:	687b      	ldr	r3, [r7, #4]
}
 8037436:	4618      	mov	r0, r3
 8037438:	3708      	adds	r7, #8
 803743a:	46bd      	mov	sp, r7
 803743c:	bd80      	pop	{r7, pc}
 803743e:	bf00      	nop
 8037440:	20000f34 	.word	0x20000f34

08037444 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8037444:	b580      	push	{r7, lr}
 8037446:	b084      	sub	sp, #16
 8037448:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 803744a:	f3ef 8305 	mrs	r3, IPSR
 803744e:	60bb      	str	r3, [r7, #8]
  return(result);
 8037450:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8037452:	2b00      	cmp	r3, #0
 8037454:	d10f      	bne.n	8037476 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8037456:	f3ef 8310 	mrs	r3, PRIMASK
 803745a:	607b      	str	r3, [r7, #4]
  return(result);
 803745c:	687b      	ldr	r3, [r7, #4]
 803745e:	2b00      	cmp	r3, #0
 8037460:	d105      	bne.n	803746e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8037462:	f3ef 8311 	mrs	r3, BASEPRI
 8037466:	603b      	str	r3, [r7, #0]
  return(result);
 8037468:	683b      	ldr	r3, [r7, #0]
 803746a:	2b00      	cmp	r3, #0
 803746c:	d007      	beq.n	803747e <osKernelStart+0x3a>
 803746e:	4b0f      	ldr	r3, [pc, #60]	; (80374ac <osKernelStart+0x68>)
 8037470:	681b      	ldr	r3, [r3, #0]
 8037472:	2b02      	cmp	r3, #2
 8037474:	d103      	bne.n	803747e <osKernelStart+0x3a>
    stat = osErrorISR;
 8037476:	f06f 0305 	mvn.w	r3, #5
 803747a:	60fb      	str	r3, [r7, #12]
 803747c:	e010      	b.n	80374a0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 803747e:	4b0b      	ldr	r3, [pc, #44]	; (80374ac <osKernelStart+0x68>)
 8037480:	681b      	ldr	r3, [r3, #0]
 8037482:	2b01      	cmp	r3, #1
 8037484:	d109      	bne.n	803749a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8037486:	f7ff ff7f 	bl	8037388 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 803748a:	4b08      	ldr	r3, [pc, #32]	; (80374ac <osKernelStart+0x68>)
 803748c:	2202      	movs	r2, #2
 803748e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8037490:	f002 faea 	bl	8039a68 <vTaskStartScheduler>
      stat = osOK;
 8037494:	2300      	movs	r3, #0
 8037496:	60fb      	str	r3, [r7, #12]
 8037498:	e002      	b.n	80374a0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 803749a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 803749e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80374a0:	68fb      	ldr	r3, [r7, #12]
}
 80374a2:	4618      	mov	r0, r3
 80374a4:	3710      	adds	r7, #16
 80374a6:	46bd      	mov	sp, r7
 80374a8:	bd80      	pop	{r7, pc}
 80374aa:	bf00      	nop
 80374ac:	20000f34 	.word	0x20000f34

080374b0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80374b0:	b580      	push	{r7, lr}
 80374b2:	b084      	sub	sp, #16
 80374b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80374b6:	f3ef 8305 	mrs	r3, IPSR
 80374ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80374bc:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 80374be:	2b00      	cmp	r3, #0
 80374c0:	d10f      	bne.n	80374e2 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80374c2:	f3ef 8310 	mrs	r3, PRIMASK
 80374c6:	607b      	str	r3, [r7, #4]
  return(result);
 80374c8:	687b      	ldr	r3, [r7, #4]
 80374ca:	2b00      	cmp	r3, #0
 80374cc:	d105      	bne.n	80374da <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80374ce:	f3ef 8311 	mrs	r3, BASEPRI
 80374d2:	603b      	str	r3, [r7, #0]
  return(result);
 80374d4:	683b      	ldr	r3, [r7, #0]
 80374d6:	2b00      	cmp	r3, #0
 80374d8:	d007      	beq.n	80374ea <osKernelGetTickCount+0x3a>
 80374da:	4b08      	ldr	r3, [pc, #32]	; (80374fc <osKernelGetTickCount+0x4c>)
 80374dc:	681b      	ldr	r3, [r3, #0]
 80374de:	2b02      	cmp	r3, #2
 80374e0:	d103      	bne.n	80374ea <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 80374e2:	f002 fbdf 	bl	8039ca4 <xTaskGetTickCountFromISR>
 80374e6:	60f8      	str	r0, [r7, #12]
 80374e8:	e002      	b.n	80374f0 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 80374ea:	f002 fbcb 	bl	8039c84 <xTaskGetTickCount>
 80374ee:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 80374f0:	68fb      	ldr	r3, [r7, #12]
}
 80374f2:	4618      	mov	r0, r3
 80374f4:	3710      	adds	r7, #16
 80374f6:	46bd      	mov	sp, r7
 80374f8:	bd80      	pop	{r7, pc}
 80374fa:	bf00      	nop
 80374fc:	20000f34 	.word	0x20000f34

08037500 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8037500:	b580      	push	{r7, lr}
 8037502:	b090      	sub	sp, #64	; 0x40
 8037504:	af04      	add	r7, sp, #16
 8037506:	60f8      	str	r0, [r7, #12]
 8037508:	60b9      	str	r1, [r7, #8]
 803750a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 803750c:	2300      	movs	r3, #0
 803750e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8037510:	f3ef 8305 	mrs	r3, IPSR
 8037514:	61fb      	str	r3, [r7, #28]
  return(result);
 8037516:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8037518:	2b00      	cmp	r3, #0
 803751a:	f040 808f 	bne.w	803763c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 803751e:	f3ef 8310 	mrs	r3, PRIMASK
 8037522:	61bb      	str	r3, [r7, #24]
  return(result);
 8037524:	69bb      	ldr	r3, [r7, #24]
 8037526:	2b00      	cmp	r3, #0
 8037528:	d105      	bne.n	8037536 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 803752a:	f3ef 8311 	mrs	r3, BASEPRI
 803752e:	617b      	str	r3, [r7, #20]
  return(result);
 8037530:	697b      	ldr	r3, [r7, #20]
 8037532:	2b00      	cmp	r3, #0
 8037534:	d003      	beq.n	803753e <osThreadNew+0x3e>
 8037536:	4b44      	ldr	r3, [pc, #272]	; (8037648 <osThreadNew+0x148>)
 8037538:	681b      	ldr	r3, [r3, #0]
 803753a:	2b02      	cmp	r3, #2
 803753c:	d07e      	beq.n	803763c <osThreadNew+0x13c>
 803753e:	68fb      	ldr	r3, [r7, #12]
 8037540:	2b00      	cmp	r3, #0
 8037542:	d07b      	beq.n	803763c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8037544:	2380      	movs	r3, #128	; 0x80
 8037546:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8037548:	2318      	movs	r3, #24
 803754a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 803754c:	2300      	movs	r3, #0
 803754e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8037550:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8037554:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8037556:	687b      	ldr	r3, [r7, #4]
 8037558:	2b00      	cmp	r3, #0
 803755a:	d045      	beq.n	80375e8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 803755c:	687b      	ldr	r3, [r7, #4]
 803755e:	681b      	ldr	r3, [r3, #0]
 8037560:	2b00      	cmp	r3, #0
 8037562:	d002      	beq.n	803756a <osThreadNew+0x6a>
        name = attr->name;
 8037564:	687b      	ldr	r3, [r7, #4]
 8037566:	681b      	ldr	r3, [r3, #0]
 8037568:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 803756a:	687b      	ldr	r3, [r7, #4]
 803756c:	699b      	ldr	r3, [r3, #24]
 803756e:	2b00      	cmp	r3, #0
 8037570:	d002      	beq.n	8037578 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8037572:	687b      	ldr	r3, [r7, #4]
 8037574:	699b      	ldr	r3, [r3, #24]
 8037576:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8037578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803757a:	2b00      	cmp	r3, #0
 803757c:	d008      	beq.n	8037590 <osThreadNew+0x90>
 803757e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037580:	2b38      	cmp	r3, #56	; 0x38
 8037582:	d805      	bhi.n	8037590 <osThreadNew+0x90>
 8037584:	687b      	ldr	r3, [r7, #4]
 8037586:	685b      	ldr	r3, [r3, #4]
 8037588:	f003 0301 	and.w	r3, r3, #1
 803758c:	2b00      	cmp	r3, #0
 803758e:	d001      	beq.n	8037594 <osThreadNew+0x94>
        return (NULL);
 8037590:	2300      	movs	r3, #0
 8037592:	e054      	b.n	803763e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8037594:	687b      	ldr	r3, [r7, #4]
 8037596:	695b      	ldr	r3, [r3, #20]
 8037598:	2b00      	cmp	r3, #0
 803759a:	d003      	beq.n	80375a4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 803759c:	687b      	ldr	r3, [r7, #4]
 803759e:	695b      	ldr	r3, [r3, #20]
 80375a0:	089b      	lsrs	r3, r3, #2
 80375a2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80375a4:	687b      	ldr	r3, [r7, #4]
 80375a6:	689b      	ldr	r3, [r3, #8]
 80375a8:	2b00      	cmp	r3, #0
 80375aa:	d00e      	beq.n	80375ca <osThreadNew+0xca>
 80375ac:	687b      	ldr	r3, [r7, #4]
 80375ae:	68db      	ldr	r3, [r3, #12]
 80375b0:	2b5f      	cmp	r3, #95	; 0x5f
 80375b2:	d90a      	bls.n	80375ca <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80375b4:	687b      	ldr	r3, [r7, #4]
 80375b6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80375b8:	2b00      	cmp	r3, #0
 80375ba:	d006      	beq.n	80375ca <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80375bc:	687b      	ldr	r3, [r7, #4]
 80375be:	695b      	ldr	r3, [r3, #20]
 80375c0:	2b00      	cmp	r3, #0
 80375c2:	d002      	beq.n	80375ca <osThreadNew+0xca>
        mem = 1;
 80375c4:	2301      	movs	r3, #1
 80375c6:	623b      	str	r3, [r7, #32]
 80375c8:	e010      	b.n	80375ec <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80375ca:	687b      	ldr	r3, [r7, #4]
 80375cc:	689b      	ldr	r3, [r3, #8]
 80375ce:	2b00      	cmp	r3, #0
 80375d0:	d10c      	bne.n	80375ec <osThreadNew+0xec>
 80375d2:	687b      	ldr	r3, [r7, #4]
 80375d4:	68db      	ldr	r3, [r3, #12]
 80375d6:	2b00      	cmp	r3, #0
 80375d8:	d108      	bne.n	80375ec <osThreadNew+0xec>
 80375da:	687b      	ldr	r3, [r7, #4]
 80375dc:	691b      	ldr	r3, [r3, #16]
 80375de:	2b00      	cmp	r3, #0
 80375e0:	d104      	bne.n	80375ec <osThreadNew+0xec>
          mem = 0;
 80375e2:	2300      	movs	r3, #0
 80375e4:	623b      	str	r3, [r7, #32]
 80375e6:	e001      	b.n	80375ec <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80375e8:	2300      	movs	r3, #0
 80375ea:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80375ec:	6a3b      	ldr	r3, [r7, #32]
 80375ee:	2b01      	cmp	r3, #1
 80375f0:	d110      	bne.n	8037614 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80375f2:	687b      	ldr	r3, [r7, #4]
 80375f4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80375f6:	687a      	ldr	r2, [r7, #4]
 80375f8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80375fa:	9202      	str	r2, [sp, #8]
 80375fc:	9301      	str	r3, [sp, #4]
 80375fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037600:	9300      	str	r3, [sp, #0]
 8037602:	68bb      	ldr	r3, [r7, #8]
 8037604:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8037606:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8037608:	68f8      	ldr	r0, [r7, #12]
 803760a:	f001 ffdb 	bl	80395c4 <xTaskCreateStatic>
 803760e:	4603      	mov	r3, r0
 8037610:	613b      	str	r3, [r7, #16]
 8037612:	e013      	b.n	803763c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8037614:	6a3b      	ldr	r3, [r7, #32]
 8037616:	2b00      	cmp	r3, #0
 8037618:	d110      	bne.n	803763c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 803761a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803761c:	b29a      	uxth	r2, r3
 803761e:	f107 0310 	add.w	r3, r7, #16
 8037622:	9301      	str	r3, [sp, #4]
 8037624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037626:	9300      	str	r3, [sp, #0]
 8037628:	68bb      	ldr	r3, [r7, #8]
 803762a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 803762c:	68f8      	ldr	r0, [r7, #12]
 803762e:	f002 f823 	bl	8039678 <xTaskCreate>
 8037632:	4603      	mov	r3, r0
 8037634:	2b01      	cmp	r3, #1
 8037636:	d001      	beq.n	803763c <osThreadNew+0x13c>
          hTask = NULL;
 8037638:	2300      	movs	r3, #0
 803763a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 803763c:	693b      	ldr	r3, [r7, #16]
}
 803763e:	4618      	mov	r0, r3
 8037640:	3730      	adds	r7, #48	; 0x30
 8037642:	46bd      	mov	sp, r7
 8037644:	bd80      	pop	{r7, pc}
 8037646:	bf00      	nop
 8037648:	20000f34 	.word	0x20000f34

0803764c <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 803764c:	b580      	push	{r7, lr}
 803764e:	b08a      	sub	sp, #40	; 0x28
 8037650:	af02      	add	r7, sp, #8
 8037652:	6078      	str	r0, [r7, #4]
 8037654:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8037656:	687b      	ldr	r3, [r7, #4]
 8037658:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 803765a:	69fb      	ldr	r3, [r7, #28]
 803765c:	2b00      	cmp	r3, #0
 803765e:	d002      	beq.n	8037666 <osThreadFlagsSet+0x1a>
 8037660:	683b      	ldr	r3, [r7, #0]
 8037662:	2b00      	cmp	r3, #0
 8037664:	da03      	bge.n	803766e <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8037666:	f06f 0303 	mvn.w	r3, #3
 803766a:	60fb      	str	r3, [r7, #12]
 803766c:	e046      	b.n	80376fc <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 803766e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8037672:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8037674:	f3ef 8305 	mrs	r3, IPSR
 8037678:	61bb      	str	r3, [r7, #24]
  return(result);
 803767a:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 803767c:	2b00      	cmp	r3, #0
 803767e:	d10f      	bne.n	80376a0 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8037680:	f3ef 8310 	mrs	r3, PRIMASK
 8037684:	617b      	str	r3, [r7, #20]
  return(result);
 8037686:	697b      	ldr	r3, [r7, #20]
 8037688:	2b00      	cmp	r3, #0
 803768a:	d105      	bne.n	8037698 <osThreadFlagsSet+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 803768c:	f3ef 8311 	mrs	r3, BASEPRI
 8037690:	613b      	str	r3, [r7, #16]
  return(result);
 8037692:	693b      	ldr	r3, [r7, #16]
 8037694:	2b00      	cmp	r3, #0
 8037696:	d024      	beq.n	80376e2 <osThreadFlagsSet+0x96>
 8037698:	4b1b      	ldr	r3, [pc, #108]	; (8037708 <osThreadFlagsSet+0xbc>)
 803769a:	681b      	ldr	r3, [r3, #0]
 803769c:	2b02      	cmp	r3, #2
 803769e:	d120      	bne.n	80376e2 <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 80376a0:	2300      	movs	r3, #0
 80376a2:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 80376a4:	f107 0308 	add.w	r3, r7, #8
 80376a8:	9300      	str	r3, [sp, #0]
 80376aa:	2300      	movs	r3, #0
 80376ac:	2201      	movs	r2, #1
 80376ae:	6839      	ldr	r1, [r7, #0]
 80376b0:	69f8      	ldr	r0, [r7, #28]
 80376b2:	f003 f987 	bl	803a9c4 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 80376b6:	f107 020c 	add.w	r2, r7, #12
 80376ba:	2300      	movs	r3, #0
 80376bc:	9300      	str	r3, [sp, #0]
 80376be:	4613      	mov	r3, r2
 80376c0:	2200      	movs	r2, #0
 80376c2:	2100      	movs	r1, #0
 80376c4:	69f8      	ldr	r0, [r7, #28]
 80376c6:	f003 f97d 	bl	803a9c4 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 80376ca:	68bb      	ldr	r3, [r7, #8]
 80376cc:	2b00      	cmp	r3, #0
 80376ce:	d015      	beq.n	80376fc <osThreadFlagsSet+0xb0>
 80376d0:	4b0e      	ldr	r3, [pc, #56]	; (803770c <osThreadFlagsSet+0xc0>)
 80376d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80376d6:	601a      	str	r2, [r3, #0]
 80376d8:	f3bf 8f4f 	dsb	sy
 80376dc:	f3bf 8f6f 	isb	sy
 80376e0:	e00c      	b.n	80376fc <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 80376e2:	2300      	movs	r3, #0
 80376e4:	2201      	movs	r2, #1
 80376e6:	6839      	ldr	r1, [r7, #0]
 80376e8:	69f8      	ldr	r0, [r7, #28]
 80376ea:	f003 f8b7 	bl	803a85c <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 80376ee:	f107 030c 	add.w	r3, r7, #12
 80376f2:	2200      	movs	r2, #0
 80376f4:	2100      	movs	r1, #0
 80376f6:	69f8      	ldr	r0, [r7, #28]
 80376f8:	f003 f8b0 	bl	803a85c <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 80376fc:	68fb      	ldr	r3, [r7, #12]
}
 80376fe:	4618      	mov	r0, r3
 8037700:	3720      	adds	r7, #32
 8037702:	46bd      	mov	sp, r7
 8037704:	bd80      	pop	{r7, pc}
 8037706:	bf00      	nop
 8037708:	20000f34 	.word	0x20000f34
 803770c:	e000ed04 	.word	0xe000ed04

08037710 <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 8037710:	b580      	push	{r7, lr}
 8037712:	b088      	sub	sp, #32
 8037714:	af00      	add	r7, sp, #0
 8037716:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8037718:	f3ef 8305 	mrs	r3, IPSR
 803771c:	617b      	str	r3, [r7, #20]
  return(result);
 803771e:	697b      	ldr	r3, [r7, #20]
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 8037720:	2b00      	cmp	r3, #0
 8037722:	d10f      	bne.n	8037744 <osThreadFlagsClear+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8037724:	f3ef 8310 	mrs	r3, PRIMASK
 8037728:	613b      	str	r3, [r7, #16]
  return(result);
 803772a:	693b      	ldr	r3, [r7, #16]
 803772c:	2b00      	cmp	r3, #0
 803772e:	d105      	bne.n	803773c <osThreadFlagsClear+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8037730:	f3ef 8311 	mrs	r3, BASEPRI
 8037734:	60fb      	str	r3, [r7, #12]
  return(result);
 8037736:	68fb      	ldr	r3, [r7, #12]
 8037738:	2b00      	cmp	r3, #0
 803773a:	d007      	beq.n	803774c <osThreadFlagsClear+0x3c>
 803773c:	4b1b      	ldr	r3, [pc, #108]	; (80377ac <osThreadFlagsClear+0x9c>)
 803773e:	681b      	ldr	r3, [r3, #0]
 8037740:	2b02      	cmp	r3, #2
 8037742:	d103      	bne.n	803774c <osThreadFlagsClear+0x3c>
    rflags = (uint32_t)osErrorISR;
 8037744:	f06f 0305 	mvn.w	r3, #5
 8037748:	61fb      	str	r3, [r7, #28]
 803774a:	e02a      	b.n	80377a2 <osThreadFlagsClear+0x92>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 803774c:	687b      	ldr	r3, [r7, #4]
 803774e:	2b00      	cmp	r3, #0
 8037750:	da03      	bge.n	803775a <osThreadFlagsClear+0x4a>
    rflags = (uint32_t)osErrorParameter;
 8037752:	f06f 0303 	mvn.w	r3, #3
 8037756:	61fb      	str	r3, [r7, #28]
 8037758:	e023      	b.n	80377a2 <osThreadFlagsClear+0x92>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 803775a:	f002 fe77 	bl	803a44c <xTaskGetCurrentTaskHandle>
 803775e:	61b8      	str	r0, [r7, #24]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 8037760:	f107 0308 	add.w	r3, r7, #8
 8037764:	2200      	movs	r2, #0
 8037766:	2100      	movs	r1, #0
 8037768:	69b8      	ldr	r0, [r7, #24]
 803776a:	f003 f877 	bl	803a85c <xTaskGenericNotify>
 803776e:	4603      	mov	r3, r0
 8037770:	2b01      	cmp	r3, #1
 8037772:	d113      	bne.n	803779c <osThreadFlagsClear+0x8c>
      rflags = cflags;
 8037774:	68bb      	ldr	r3, [r7, #8]
 8037776:	61fb      	str	r3, [r7, #28]
      cflags &= ~flags;
 8037778:	687b      	ldr	r3, [r7, #4]
 803777a:	43da      	mvns	r2, r3
 803777c:	68bb      	ldr	r3, [r7, #8]
 803777e:	4013      	ands	r3, r2
 8037780:	60bb      	str	r3, [r7, #8]

      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 8037782:	68b9      	ldr	r1, [r7, #8]
 8037784:	2300      	movs	r3, #0
 8037786:	2203      	movs	r2, #3
 8037788:	69b8      	ldr	r0, [r7, #24]
 803778a:	f003 f867 	bl	803a85c <xTaskGenericNotify>
 803778e:	4603      	mov	r3, r0
 8037790:	2b01      	cmp	r3, #1
 8037792:	d006      	beq.n	80377a2 <osThreadFlagsClear+0x92>
        rflags = (uint32_t)osError;
 8037794:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8037798:	61fb      	str	r3, [r7, #28]
 803779a:	e002      	b.n	80377a2 <osThreadFlagsClear+0x92>
      }
    }
    else {
      rflags = (uint32_t)osError;
 803779c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80377a0:	61fb      	str	r3, [r7, #28]
    }
  }

  /* Return flags before clearing */
  return (rflags);
 80377a2:	69fb      	ldr	r3, [r7, #28]
}
 80377a4:	4618      	mov	r0, r3
 80377a6:	3720      	adds	r7, #32
 80377a8:	46bd      	mov	sp, r7
 80377aa:	bd80      	pop	{r7, pc}
 80377ac:	20000f34 	.word	0x20000f34

080377b0 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 80377b0:	b580      	push	{r7, lr}
 80377b2:	b08e      	sub	sp, #56	; 0x38
 80377b4:	af00      	add	r7, sp, #0
 80377b6:	60f8      	str	r0, [r7, #12]
 80377b8:	60b9      	str	r1, [r7, #8]
 80377ba:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80377bc:	f3ef 8305 	mrs	r3, IPSR
 80377c0:	61fb      	str	r3, [r7, #28]
  return(result);
 80377c2:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 80377c4:	2b00      	cmp	r3, #0
 80377c6:	d10f      	bne.n	80377e8 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80377c8:	f3ef 8310 	mrs	r3, PRIMASK
 80377cc:	61bb      	str	r3, [r7, #24]
  return(result);
 80377ce:	69bb      	ldr	r3, [r7, #24]
 80377d0:	2b00      	cmp	r3, #0
 80377d2:	d105      	bne.n	80377e0 <osThreadFlagsWait+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80377d4:	f3ef 8311 	mrs	r3, BASEPRI
 80377d8:	617b      	str	r3, [r7, #20]
  return(result);
 80377da:	697b      	ldr	r3, [r7, #20]
 80377dc:	2b00      	cmp	r3, #0
 80377de:	d007      	beq.n	80377f0 <osThreadFlagsWait+0x40>
 80377e0:	4b3c      	ldr	r3, [pc, #240]	; (80378d4 <osThreadFlagsWait+0x124>)
 80377e2:	681b      	ldr	r3, [r3, #0]
 80377e4:	2b02      	cmp	r3, #2
 80377e6:	d103      	bne.n	80377f0 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 80377e8:	f06f 0305 	mvn.w	r3, #5
 80377ec:	637b      	str	r3, [r7, #52]	; 0x34
 80377ee:	e06b      	b.n	80378c8 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80377f0:	68fb      	ldr	r3, [r7, #12]
 80377f2:	2b00      	cmp	r3, #0
 80377f4:	da03      	bge.n	80377fe <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 80377f6:	f06f 0303 	mvn.w	r3, #3
 80377fa:	637b      	str	r3, [r7, #52]	; 0x34
 80377fc:	e064      	b.n	80378c8 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 80377fe:	68bb      	ldr	r3, [r7, #8]
 8037800:	f003 0302 	and.w	r3, r3, #2
 8037804:	2b00      	cmp	r3, #0
 8037806:	d002      	beq.n	803780e <osThreadFlagsWait+0x5e>
      clear = 0U;
 8037808:	2300      	movs	r3, #0
 803780a:	633b      	str	r3, [r7, #48]	; 0x30
 803780c:	e001      	b.n	8037812 <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 803780e:	68fb      	ldr	r3, [r7, #12]
 8037810:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 8037812:	2300      	movs	r3, #0
 8037814:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 8037816:	687b      	ldr	r3, [r7, #4]
 8037818:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 803781a:	f002 fa33 	bl	8039c84 <xTaskGetTickCount>
 803781e:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8037820:	f107 0210 	add.w	r2, r7, #16
 8037824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8037826:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8037828:	2000      	movs	r0, #0
 803782a:	f002 ffbd 	bl	803a7a8 <xTaskNotifyWait>
 803782e:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 8037830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037832:	2b01      	cmp	r3, #1
 8037834:	d137      	bne.n	80378a6 <osThreadFlagsWait+0xf6>
        rflags &= flags;
 8037836:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8037838:	68fb      	ldr	r3, [r7, #12]
 803783a:	4013      	ands	r3, r2
 803783c:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 803783e:	693b      	ldr	r3, [r7, #16]
 8037840:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8037842:	4313      	orrs	r3, r2
 8037844:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8037846:	68bb      	ldr	r3, [r7, #8]
 8037848:	f003 0301 	and.w	r3, r3, #1
 803784c:	2b00      	cmp	r3, #0
 803784e:	d00c      	beq.n	803786a <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 8037850:	68fa      	ldr	r2, [r7, #12]
 8037852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8037854:	4013      	ands	r3, r2
 8037856:	68fa      	ldr	r2, [r7, #12]
 8037858:	429a      	cmp	r2, r3
 803785a:	d032      	beq.n	80378c2 <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 803785c:	687b      	ldr	r3, [r7, #4]
 803785e:	2b00      	cmp	r3, #0
 8037860:	d10f      	bne.n	8037882 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 8037862:	f06f 0302 	mvn.w	r3, #2
 8037866:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8037868:	e02e      	b.n	80378c8 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 803786a:	68fa      	ldr	r2, [r7, #12]
 803786c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803786e:	4013      	ands	r3, r2
 8037870:	2b00      	cmp	r3, #0
 8037872:	d128      	bne.n	80378c6 <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 8037874:	687b      	ldr	r3, [r7, #4]
 8037876:	2b00      	cmp	r3, #0
 8037878:	d103      	bne.n	8037882 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 803787a:	f06f 0302 	mvn.w	r3, #2
 803787e:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8037880:	e022      	b.n	80378c8 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8037882:	f002 f9ff 	bl	8039c84 <xTaskGetTickCount>
 8037886:	4602      	mov	r2, r0
 8037888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803788a:	1ad3      	subs	r3, r2, r3
 803788c:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 803788e:	6a3a      	ldr	r2, [r7, #32]
 8037890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8037892:	429a      	cmp	r2, r3
 8037894:	d902      	bls.n	803789c <osThreadFlagsWait+0xec>
          tout  = 0;
 8037896:	2300      	movs	r3, #0
 8037898:	62fb      	str	r3, [r7, #44]	; 0x2c
 803789a:	e00e      	b.n	80378ba <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 803789c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 803789e:	6a3b      	ldr	r3, [r7, #32]
 80378a0:	1ad3      	subs	r3, r2, r3
 80378a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80378a4:	e009      	b.n	80378ba <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 80378a6:	687b      	ldr	r3, [r7, #4]
 80378a8:	2b00      	cmp	r3, #0
 80378aa:	d103      	bne.n	80378b4 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 80378ac:	f06f 0302 	mvn.w	r3, #2
 80378b0:	637b      	str	r3, [r7, #52]	; 0x34
 80378b2:	e002      	b.n	80378ba <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 80378b4:	f06f 0301 	mvn.w	r3, #1
 80378b8:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 80378ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80378bc:	2b00      	cmp	r3, #0
 80378be:	d1af      	bne.n	8037820 <osThreadFlagsWait+0x70>
 80378c0:	e002      	b.n	80378c8 <osThreadFlagsWait+0x118>
            break;
 80378c2:	bf00      	nop
 80378c4:	e000      	b.n	80378c8 <osThreadFlagsWait+0x118>
            break;
 80378c6:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 80378c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80378ca:	4618      	mov	r0, r3
 80378cc:	3738      	adds	r7, #56	; 0x38
 80378ce:	46bd      	mov	sp, r7
 80378d0:	bd80      	pop	{r7, pc}
 80378d2:	bf00      	nop
 80378d4:	20000f34 	.word	0x20000f34

080378d8 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 80378d8:	b580      	push	{r7, lr}
 80378da:	b086      	sub	sp, #24
 80378dc:	af00      	add	r7, sp, #0
 80378de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80378e0:	f3ef 8305 	mrs	r3, IPSR
 80378e4:	613b      	str	r3, [r7, #16]
  return(result);
 80378e6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80378e8:	2b00      	cmp	r3, #0
 80378ea:	d10f      	bne.n	803790c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80378ec:	f3ef 8310 	mrs	r3, PRIMASK
 80378f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80378f2:	68fb      	ldr	r3, [r7, #12]
 80378f4:	2b00      	cmp	r3, #0
 80378f6:	d105      	bne.n	8037904 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80378f8:	f3ef 8311 	mrs	r3, BASEPRI
 80378fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80378fe:	68bb      	ldr	r3, [r7, #8]
 8037900:	2b00      	cmp	r3, #0
 8037902:	d007      	beq.n	8037914 <osDelay+0x3c>
 8037904:	4b0a      	ldr	r3, [pc, #40]	; (8037930 <osDelay+0x58>)
 8037906:	681b      	ldr	r3, [r3, #0]
 8037908:	2b02      	cmp	r3, #2
 803790a:	d103      	bne.n	8037914 <osDelay+0x3c>
    stat = osErrorISR;
 803790c:	f06f 0305 	mvn.w	r3, #5
 8037910:	617b      	str	r3, [r7, #20]
 8037912:	e007      	b.n	8037924 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8037914:	2300      	movs	r3, #0
 8037916:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8037918:	687b      	ldr	r3, [r7, #4]
 803791a:	2b00      	cmp	r3, #0
 803791c:	d002      	beq.n	8037924 <osDelay+0x4c>
      vTaskDelay(ticks);
 803791e:	6878      	ldr	r0, [r7, #4]
 8037920:	f002 f86e 	bl	8039a00 <vTaskDelay>
    }
  }

  return (stat);
 8037924:	697b      	ldr	r3, [r7, #20]
}
 8037926:	4618      	mov	r0, r3
 8037928:	3718      	adds	r7, #24
 803792a:	46bd      	mov	sp, r7
 803792c:	bd80      	pop	{r7, pc}
 803792e:	bf00      	nop
 8037930:	20000f34 	.word	0x20000f34

08037934 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8037934:	b580      	push	{r7, lr}
 8037936:	b088      	sub	sp, #32
 8037938:	af00      	add	r7, sp, #0
 803793a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 803793c:	f3ef 8305 	mrs	r3, IPSR
 8037940:	617b      	str	r3, [r7, #20]
  return(result);
 8037942:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8037944:	2b00      	cmp	r3, #0
 8037946:	d10f      	bne.n	8037968 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8037948:	f3ef 8310 	mrs	r3, PRIMASK
 803794c:	613b      	str	r3, [r7, #16]
  return(result);
 803794e:	693b      	ldr	r3, [r7, #16]
 8037950:	2b00      	cmp	r3, #0
 8037952:	d105      	bne.n	8037960 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8037954:	f3ef 8311 	mrs	r3, BASEPRI
 8037958:	60fb      	str	r3, [r7, #12]
  return(result);
 803795a:	68fb      	ldr	r3, [r7, #12]
 803795c:	2b00      	cmp	r3, #0
 803795e:	d007      	beq.n	8037970 <osDelayUntil+0x3c>
 8037960:	4b13      	ldr	r3, [pc, #76]	; (80379b0 <osDelayUntil+0x7c>)
 8037962:	681b      	ldr	r3, [r3, #0]
 8037964:	2b02      	cmp	r3, #2
 8037966:	d103      	bne.n	8037970 <osDelayUntil+0x3c>
    stat = osErrorISR;
 8037968:	f06f 0305 	mvn.w	r3, #5
 803796c:	61fb      	str	r3, [r7, #28]
 803796e:	e019      	b.n	80379a4 <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 8037970:	2300      	movs	r3, #0
 8037972:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8037974:	f002 f986 	bl	8039c84 <xTaskGetTickCount>
 8037978:	4603      	mov	r3, r0
 803797a:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 803797c:	68bb      	ldr	r3, [r7, #8]
 803797e:	687a      	ldr	r2, [r7, #4]
 8037980:	1ad3      	subs	r3, r2, r3
 8037982:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8037984:	69bb      	ldr	r3, [r7, #24]
 8037986:	2b00      	cmp	r3, #0
 8037988:	d009      	beq.n	803799e <osDelayUntil+0x6a>
 803798a:	69bb      	ldr	r3, [r7, #24]
 803798c:	2b00      	cmp	r3, #0
 803798e:	db06      	blt.n	803799e <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 8037990:	f107 0308 	add.w	r3, r7, #8
 8037994:	69b9      	ldr	r1, [r7, #24]
 8037996:	4618      	mov	r0, r3
 8037998:	f001 ffb8 	bl	803990c <vTaskDelayUntil>
 803799c:	e002      	b.n	80379a4 <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 803799e:	f06f 0303 	mvn.w	r3, #3
 80379a2:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 80379a4:	69fb      	ldr	r3, [r7, #28]
}
 80379a6:	4618      	mov	r0, r3
 80379a8:	3720      	adds	r7, #32
 80379aa:	46bd      	mov	sp, r7
 80379ac:	bd80      	pop	{r7, pc}
 80379ae:	bf00      	nop
 80379b0:	20000f34 	.word	0x20000f34

080379b4 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80379b4:	b580      	push	{r7, lr}
 80379b6:	b088      	sub	sp, #32
 80379b8:	af00      	add	r7, sp, #0
 80379ba:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80379bc:	2300      	movs	r3, #0
 80379be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80379c0:	f3ef 8305 	mrs	r3, IPSR
 80379c4:	617b      	str	r3, [r7, #20]
  return(result);
 80379c6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 80379c8:	2b00      	cmp	r3, #0
 80379ca:	d13d      	bne.n	8037a48 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80379cc:	f3ef 8310 	mrs	r3, PRIMASK
 80379d0:	613b      	str	r3, [r7, #16]
  return(result);
 80379d2:	693b      	ldr	r3, [r7, #16]
 80379d4:	2b00      	cmp	r3, #0
 80379d6:	d105      	bne.n	80379e4 <osEventFlagsNew+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80379d8:	f3ef 8311 	mrs	r3, BASEPRI
 80379dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80379de:	68fb      	ldr	r3, [r7, #12]
 80379e0:	2b00      	cmp	r3, #0
 80379e2:	d003      	beq.n	80379ec <osEventFlagsNew+0x38>
 80379e4:	4b1b      	ldr	r3, [pc, #108]	; (8037a54 <osEventFlagsNew+0xa0>)
 80379e6:	681b      	ldr	r3, [r3, #0]
 80379e8:	2b02      	cmp	r3, #2
 80379ea:	d02d      	beq.n	8037a48 <osEventFlagsNew+0x94>
    mem = -1;
 80379ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80379f0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80379f2:	687b      	ldr	r3, [r7, #4]
 80379f4:	2b00      	cmp	r3, #0
 80379f6:	d015      	beq.n	8037a24 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80379f8:	687b      	ldr	r3, [r7, #4]
 80379fa:	689b      	ldr	r3, [r3, #8]
 80379fc:	2b00      	cmp	r3, #0
 80379fe:	d006      	beq.n	8037a0e <osEventFlagsNew+0x5a>
 8037a00:	687b      	ldr	r3, [r7, #4]
 8037a02:	68db      	ldr	r3, [r3, #12]
 8037a04:	2b1f      	cmp	r3, #31
 8037a06:	d902      	bls.n	8037a0e <osEventFlagsNew+0x5a>
        mem = 1;
 8037a08:	2301      	movs	r3, #1
 8037a0a:	61bb      	str	r3, [r7, #24]
 8037a0c:	e00c      	b.n	8037a28 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8037a0e:	687b      	ldr	r3, [r7, #4]
 8037a10:	689b      	ldr	r3, [r3, #8]
 8037a12:	2b00      	cmp	r3, #0
 8037a14:	d108      	bne.n	8037a28 <osEventFlagsNew+0x74>
 8037a16:	687b      	ldr	r3, [r7, #4]
 8037a18:	68db      	ldr	r3, [r3, #12]
 8037a1a:	2b00      	cmp	r3, #0
 8037a1c:	d104      	bne.n	8037a28 <osEventFlagsNew+0x74>
          mem = 0;
 8037a1e:	2300      	movs	r3, #0
 8037a20:	61bb      	str	r3, [r7, #24]
 8037a22:	e001      	b.n	8037a28 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 8037a24:	2300      	movs	r3, #0
 8037a26:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8037a28:	69bb      	ldr	r3, [r7, #24]
 8037a2a:	2b01      	cmp	r3, #1
 8037a2c:	d106      	bne.n	8037a3c <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8037a2e:	687b      	ldr	r3, [r7, #4]
 8037a30:	689b      	ldr	r3, [r3, #8]
 8037a32:	4618      	mov	r0, r3
 8037a34:	f000 fbc6 	bl	80381c4 <xEventGroupCreateStatic>
 8037a38:	61f8      	str	r0, [r7, #28]
 8037a3a:	e005      	b.n	8037a48 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 8037a3c:	69bb      	ldr	r3, [r7, #24]
 8037a3e:	2b00      	cmp	r3, #0
 8037a40:	d102      	bne.n	8037a48 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 8037a42:	f000 fbf4 	bl	803822e <xEventGroupCreate>
 8037a46:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8037a48:	69fb      	ldr	r3, [r7, #28]
}
 8037a4a:	4618      	mov	r0, r3
 8037a4c:	3720      	adds	r7, #32
 8037a4e:	46bd      	mov	sp, r7
 8037a50:	bd80      	pop	{r7, pc}
 8037a52:	bf00      	nop
 8037a54:	20000f34 	.word	0x20000f34

08037a58 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8037a58:	b580      	push	{r7, lr}
 8037a5a:	b088      	sub	sp, #32
 8037a5c:	af00      	add	r7, sp, #0
 8037a5e:	6078      	str	r0, [r7, #4]
 8037a60:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8037a62:	687b      	ldr	r3, [r7, #4]
 8037a64:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8037a66:	69bb      	ldr	r3, [r7, #24]
 8037a68:	2b00      	cmp	r3, #0
 8037a6a:	d004      	beq.n	8037a76 <osEventFlagsSet+0x1e>
 8037a6c:	683b      	ldr	r3, [r7, #0]
 8037a6e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8037a72:	2b00      	cmp	r3, #0
 8037a74:	d003      	beq.n	8037a7e <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8037a76:	f06f 0303 	mvn.w	r3, #3
 8037a7a:	61fb      	str	r3, [r7, #28]
 8037a7c:	e03a      	b.n	8037af4 <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8037a7e:	f3ef 8305 	mrs	r3, IPSR
 8037a82:	617b      	str	r3, [r7, #20]
  return(result);
 8037a84:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8037a86:	2b00      	cmp	r3, #0
 8037a88:	d10f      	bne.n	8037aaa <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8037a8a:	f3ef 8310 	mrs	r3, PRIMASK
 8037a8e:	613b      	str	r3, [r7, #16]
  return(result);
 8037a90:	693b      	ldr	r3, [r7, #16]
 8037a92:	2b00      	cmp	r3, #0
 8037a94:	d105      	bne.n	8037aa2 <osEventFlagsSet+0x4a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8037a96:	f3ef 8311 	mrs	r3, BASEPRI
 8037a9a:	60fb      	str	r3, [r7, #12]
  return(result);
 8037a9c:	68fb      	ldr	r3, [r7, #12]
 8037a9e:	2b00      	cmp	r3, #0
 8037aa0:	d021      	beq.n	8037ae6 <osEventFlagsSet+0x8e>
 8037aa2:	4b17      	ldr	r3, [pc, #92]	; (8037b00 <osEventFlagsSet+0xa8>)
 8037aa4:	681b      	ldr	r3, [r3, #0]
 8037aa6:	2b02      	cmp	r3, #2
 8037aa8:	d11d      	bne.n	8037ae6 <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 8037aaa:	2300      	movs	r3, #0
 8037aac:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8037aae:	f107 0308 	add.w	r3, r7, #8
 8037ab2:	461a      	mov	r2, r3
 8037ab4:	6839      	ldr	r1, [r7, #0]
 8037ab6:	69b8      	ldr	r0, [r7, #24]
 8037ab8:	f000 fd56 	bl	8038568 <xEventGroupSetBitsFromISR>
 8037abc:	4603      	mov	r3, r0
 8037abe:	2b00      	cmp	r3, #0
 8037ac0:	d103      	bne.n	8037aca <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 8037ac2:	f06f 0302 	mvn.w	r3, #2
 8037ac6:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8037ac8:	e013      	b.n	8037af2 <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 8037aca:	683b      	ldr	r3, [r7, #0]
 8037acc:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 8037ace:	68bb      	ldr	r3, [r7, #8]
 8037ad0:	2b00      	cmp	r3, #0
 8037ad2:	d00e      	beq.n	8037af2 <osEventFlagsSet+0x9a>
 8037ad4:	4b0b      	ldr	r3, [pc, #44]	; (8037b04 <osEventFlagsSet+0xac>)
 8037ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8037ada:	601a      	str	r2, [r3, #0]
 8037adc:	f3bf 8f4f 	dsb	sy
 8037ae0:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8037ae4:	e005      	b.n	8037af2 <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8037ae6:	6839      	ldr	r1, [r7, #0]
 8037ae8:	69b8      	ldr	r0, [r7, #24]
 8037aea:	f000 fc85 	bl	80383f8 <xEventGroupSetBits>
 8037aee:	61f8      	str	r0, [r7, #28]
 8037af0:	e000      	b.n	8037af4 <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8037af2:	bf00      	nop
  }

  return (rflags);
 8037af4:	69fb      	ldr	r3, [r7, #28]
}
 8037af6:	4618      	mov	r0, r3
 8037af8:	3720      	adds	r7, #32
 8037afa:	46bd      	mov	sp, r7
 8037afc:	bd80      	pop	{r7, pc}
 8037afe:	bf00      	nop
 8037b00:	20000f34 	.word	0x20000f34
 8037b04:	e000ed04 	.word	0xe000ed04

08037b08 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8037b08:	b580      	push	{r7, lr}
 8037b0a:	b08e      	sub	sp, #56	; 0x38
 8037b0c:	af02      	add	r7, sp, #8
 8037b0e:	60f8      	str	r0, [r7, #12]
 8037b10:	60b9      	str	r1, [r7, #8]
 8037b12:	607a      	str	r2, [r7, #4]
 8037b14:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8037b16:	68fb      	ldr	r3, [r7, #12]
 8037b18:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8037b1a:	6a3b      	ldr	r3, [r7, #32]
 8037b1c:	2b00      	cmp	r3, #0
 8037b1e:	d004      	beq.n	8037b2a <osEventFlagsWait+0x22>
 8037b20:	68bb      	ldr	r3, [r7, #8]
 8037b22:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8037b26:	2b00      	cmp	r3, #0
 8037b28:	d003      	beq.n	8037b32 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8037b2a:	f06f 0303 	mvn.w	r3, #3
 8037b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8037b30:	e059      	b.n	8037be6 <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8037b32:	f3ef 8305 	mrs	r3, IPSR
 8037b36:	61fb      	str	r3, [r7, #28]
  return(result);
 8037b38:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 8037b3a:	2b00      	cmp	r3, #0
 8037b3c:	d10f      	bne.n	8037b5e <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8037b3e:	f3ef 8310 	mrs	r3, PRIMASK
 8037b42:	61bb      	str	r3, [r7, #24]
  return(result);
 8037b44:	69bb      	ldr	r3, [r7, #24]
 8037b46:	2b00      	cmp	r3, #0
 8037b48:	d105      	bne.n	8037b56 <osEventFlagsWait+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8037b4a:	f3ef 8311 	mrs	r3, BASEPRI
 8037b4e:	617b      	str	r3, [r7, #20]
  return(result);
 8037b50:	697b      	ldr	r3, [r7, #20]
 8037b52:	2b00      	cmp	r3, #0
 8037b54:	d007      	beq.n	8037b66 <osEventFlagsWait+0x5e>
 8037b56:	4b26      	ldr	r3, [pc, #152]	; (8037bf0 <osEventFlagsWait+0xe8>)
 8037b58:	681b      	ldr	r3, [r3, #0]
 8037b5a:	2b02      	cmp	r3, #2
 8037b5c:	d103      	bne.n	8037b66 <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 8037b5e:	f06f 0305 	mvn.w	r3, #5
 8037b62:	627b      	str	r3, [r7, #36]	; 0x24
 8037b64:	e03f      	b.n	8037be6 <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 8037b66:	687b      	ldr	r3, [r7, #4]
 8037b68:	f003 0301 	and.w	r3, r3, #1
 8037b6c:	2b00      	cmp	r3, #0
 8037b6e:	d002      	beq.n	8037b76 <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 8037b70:	2301      	movs	r3, #1
 8037b72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8037b74:	e001      	b.n	8037b7a <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 8037b76:	2300      	movs	r3, #0
 8037b78:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 8037b7a:	687b      	ldr	r3, [r7, #4]
 8037b7c:	f003 0302 	and.w	r3, r3, #2
 8037b80:	2b00      	cmp	r3, #0
 8037b82:	d002      	beq.n	8037b8a <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 8037b84:	2300      	movs	r3, #0
 8037b86:	62bb      	str	r3, [r7, #40]	; 0x28
 8037b88:	e001      	b.n	8037b8e <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 8037b8a:	2301      	movs	r3, #1
 8037b8c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8037b8e:	683b      	ldr	r3, [r7, #0]
 8037b90:	9300      	str	r3, [sp, #0]
 8037b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8037b94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8037b96:	68b9      	ldr	r1, [r7, #8]
 8037b98:	6a38      	ldr	r0, [r7, #32]
 8037b9a:	f000 fb63 	bl	8038264 <xEventGroupWaitBits>
 8037b9e:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 8037ba0:	687b      	ldr	r3, [r7, #4]
 8037ba2:	f003 0301 	and.w	r3, r3, #1
 8037ba6:	2b00      	cmp	r3, #0
 8037ba8:	d00e      	beq.n	8037bc8 <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 8037baa:	68ba      	ldr	r2, [r7, #8]
 8037bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037bae:	429a      	cmp	r2, r3
 8037bb0:	d019      	beq.n	8037be6 <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 8037bb2:	683b      	ldr	r3, [r7, #0]
 8037bb4:	2b00      	cmp	r3, #0
 8037bb6:	d003      	beq.n	8037bc0 <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 8037bb8:	f06f 0301 	mvn.w	r3, #1
 8037bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8037bbe:	e012      	b.n	8037be6 <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8037bc0:	f06f 0302 	mvn.w	r3, #2
 8037bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8037bc6:	e00e      	b.n	8037be6 <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8037bc8:	68ba      	ldr	r2, [r7, #8]
 8037bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037bcc:	4013      	ands	r3, r2
 8037bce:	2b00      	cmp	r3, #0
 8037bd0:	d109      	bne.n	8037be6 <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 8037bd2:	683b      	ldr	r3, [r7, #0]
 8037bd4:	2b00      	cmp	r3, #0
 8037bd6:	d003      	beq.n	8037be0 <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 8037bd8:	f06f 0301 	mvn.w	r3, #1
 8037bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8037bde:	e002      	b.n	8037be6 <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8037be0:	f06f 0302 	mvn.w	r3, #2
 8037be4:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 8037be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8037be8:	4618      	mov	r0, r3
 8037bea:	3730      	adds	r7, #48	; 0x30
 8037bec:	46bd      	mov	sp, r7
 8037bee:	bd80      	pop	{r7, pc}
 8037bf0:	20000f34 	.word	0x20000f34

08037bf4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8037bf4:	b580      	push	{r7, lr}
 8037bf6:	b08a      	sub	sp, #40	; 0x28
 8037bf8:	af00      	add	r7, sp, #0
 8037bfa:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8037bfc:	2300      	movs	r3, #0
 8037bfe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8037c00:	f3ef 8305 	mrs	r3, IPSR
 8037c04:	613b      	str	r3, [r7, #16]
  return(result);
 8037c06:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8037c08:	2b00      	cmp	r3, #0
 8037c0a:	f040 8085 	bne.w	8037d18 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8037c0e:	f3ef 8310 	mrs	r3, PRIMASK
 8037c12:	60fb      	str	r3, [r7, #12]
  return(result);
 8037c14:	68fb      	ldr	r3, [r7, #12]
 8037c16:	2b00      	cmp	r3, #0
 8037c18:	d105      	bne.n	8037c26 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8037c1a:	f3ef 8311 	mrs	r3, BASEPRI
 8037c1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8037c20:	68bb      	ldr	r3, [r7, #8]
 8037c22:	2b00      	cmp	r3, #0
 8037c24:	d003      	beq.n	8037c2e <osMutexNew+0x3a>
 8037c26:	4b3f      	ldr	r3, [pc, #252]	; (8037d24 <osMutexNew+0x130>)
 8037c28:	681b      	ldr	r3, [r3, #0]
 8037c2a:	2b02      	cmp	r3, #2
 8037c2c:	d074      	beq.n	8037d18 <osMutexNew+0x124>
    if (attr != NULL) {
 8037c2e:	687b      	ldr	r3, [r7, #4]
 8037c30:	2b00      	cmp	r3, #0
 8037c32:	d003      	beq.n	8037c3c <osMutexNew+0x48>
      type = attr->attr_bits;
 8037c34:	687b      	ldr	r3, [r7, #4]
 8037c36:	685b      	ldr	r3, [r3, #4]
 8037c38:	623b      	str	r3, [r7, #32]
 8037c3a:	e001      	b.n	8037c40 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8037c3c:	2300      	movs	r3, #0
 8037c3e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8037c40:	6a3b      	ldr	r3, [r7, #32]
 8037c42:	f003 0301 	and.w	r3, r3, #1
 8037c46:	2b00      	cmp	r3, #0
 8037c48:	d002      	beq.n	8037c50 <osMutexNew+0x5c>
      rmtx = 1U;
 8037c4a:	2301      	movs	r3, #1
 8037c4c:	61fb      	str	r3, [r7, #28]
 8037c4e:	e001      	b.n	8037c54 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8037c50:	2300      	movs	r3, #0
 8037c52:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8037c54:	6a3b      	ldr	r3, [r7, #32]
 8037c56:	f003 0308 	and.w	r3, r3, #8
 8037c5a:	2b00      	cmp	r3, #0
 8037c5c:	d15c      	bne.n	8037d18 <osMutexNew+0x124>
      mem = -1;
 8037c5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8037c62:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8037c64:	687b      	ldr	r3, [r7, #4]
 8037c66:	2b00      	cmp	r3, #0
 8037c68:	d015      	beq.n	8037c96 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8037c6a:	687b      	ldr	r3, [r7, #4]
 8037c6c:	689b      	ldr	r3, [r3, #8]
 8037c6e:	2b00      	cmp	r3, #0
 8037c70:	d006      	beq.n	8037c80 <osMutexNew+0x8c>
 8037c72:	687b      	ldr	r3, [r7, #4]
 8037c74:	68db      	ldr	r3, [r3, #12]
 8037c76:	2b4f      	cmp	r3, #79	; 0x4f
 8037c78:	d902      	bls.n	8037c80 <osMutexNew+0x8c>
          mem = 1;
 8037c7a:	2301      	movs	r3, #1
 8037c7c:	61bb      	str	r3, [r7, #24]
 8037c7e:	e00c      	b.n	8037c9a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8037c80:	687b      	ldr	r3, [r7, #4]
 8037c82:	689b      	ldr	r3, [r3, #8]
 8037c84:	2b00      	cmp	r3, #0
 8037c86:	d108      	bne.n	8037c9a <osMutexNew+0xa6>
 8037c88:	687b      	ldr	r3, [r7, #4]
 8037c8a:	68db      	ldr	r3, [r3, #12]
 8037c8c:	2b00      	cmp	r3, #0
 8037c8e:	d104      	bne.n	8037c9a <osMutexNew+0xa6>
            mem = 0;
 8037c90:	2300      	movs	r3, #0
 8037c92:	61bb      	str	r3, [r7, #24]
 8037c94:	e001      	b.n	8037c9a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8037c96:	2300      	movs	r3, #0
 8037c98:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8037c9a:	69bb      	ldr	r3, [r7, #24]
 8037c9c:	2b01      	cmp	r3, #1
 8037c9e:	d112      	bne.n	8037cc6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8037ca0:	69fb      	ldr	r3, [r7, #28]
 8037ca2:	2b00      	cmp	r3, #0
 8037ca4:	d007      	beq.n	8037cb6 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8037ca6:	687b      	ldr	r3, [r7, #4]
 8037ca8:	689b      	ldr	r3, [r3, #8]
 8037caa:	4619      	mov	r1, r3
 8037cac:	2004      	movs	r0, #4
 8037cae:	f000 fe92 	bl	80389d6 <xQueueCreateMutexStatic>
 8037cb2:	6278      	str	r0, [r7, #36]	; 0x24
 8037cb4:	e016      	b.n	8037ce4 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8037cb6:	687b      	ldr	r3, [r7, #4]
 8037cb8:	689b      	ldr	r3, [r3, #8]
 8037cba:	4619      	mov	r1, r3
 8037cbc:	2001      	movs	r0, #1
 8037cbe:	f000 fe8a 	bl	80389d6 <xQueueCreateMutexStatic>
 8037cc2:	6278      	str	r0, [r7, #36]	; 0x24
 8037cc4:	e00e      	b.n	8037ce4 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8037cc6:	69bb      	ldr	r3, [r7, #24]
 8037cc8:	2b00      	cmp	r3, #0
 8037cca:	d10b      	bne.n	8037ce4 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8037ccc:	69fb      	ldr	r3, [r7, #28]
 8037cce:	2b00      	cmp	r3, #0
 8037cd0:	d004      	beq.n	8037cdc <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8037cd2:	2004      	movs	r0, #4
 8037cd4:	f000 fe67 	bl	80389a6 <xQueueCreateMutex>
 8037cd8:	6278      	str	r0, [r7, #36]	; 0x24
 8037cda:	e003      	b.n	8037ce4 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8037cdc:	2001      	movs	r0, #1
 8037cde:	f000 fe62 	bl	80389a6 <xQueueCreateMutex>
 8037ce2:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8037ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037ce6:	2b00      	cmp	r3, #0
 8037ce8:	d00c      	beq.n	8037d04 <osMutexNew+0x110>
        if (attr != NULL) {
 8037cea:	687b      	ldr	r3, [r7, #4]
 8037cec:	2b00      	cmp	r3, #0
 8037cee:	d003      	beq.n	8037cf8 <osMutexNew+0x104>
          name = attr->name;
 8037cf0:	687b      	ldr	r3, [r7, #4]
 8037cf2:	681b      	ldr	r3, [r3, #0]
 8037cf4:	617b      	str	r3, [r7, #20]
 8037cf6:	e001      	b.n	8037cfc <osMutexNew+0x108>
        } else {
          name = NULL;
 8037cf8:	2300      	movs	r3, #0
 8037cfa:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8037cfc:	6979      	ldr	r1, [r7, #20]
 8037cfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8037d00:	f001 fc04 	bl	803950c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8037d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037d06:	2b00      	cmp	r3, #0
 8037d08:	d006      	beq.n	8037d18 <osMutexNew+0x124>
 8037d0a:	69fb      	ldr	r3, [r7, #28]
 8037d0c:	2b00      	cmp	r3, #0
 8037d0e:	d003      	beq.n	8037d18 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8037d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037d12:	f043 0301 	orr.w	r3, r3, #1
 8037d16:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8037d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8037d1a:	4618      	mov	r0, r3
 8037d1c:	3728      	adds	r7, #40	; 0x28
 8037d1e:	46bd      	mov	sp, r7
 8037d20:	bd80      	pop	{r7, pc}
 8037d22:	bf00      	nop
 8037d24:	20000f34 	.word	0x20000f34

08037d28 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8037d28:	b580      	push	{r7, lr}
 8037d2a:	b088      	sub	sp, #32
 8037d2c:	af00      	add	r7, sp, #0
 8037d2e:	6078      	str	r0, [r7, #4]
 8037d30:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8037d32:	687b      	ldr	r3, [r7, #4]
 8037d34:	f023 0301 	bic.w	r3, r3, #1
 8037d38:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8037d3a:	687b      	ldr	r3, [r7, #4]
 8037d3c:	f003 0301 	and.w	r3, r3, #1
 8037d40:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8037d42:	2300      	movs	r3, #0
 8037d44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8037d46:	f3ef 8305 	mrs	r3, IPSR
 8037d4a:	613b      	str	r3, [r7, #16]
  return(result);
 8037d4c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8037d4e:	2b00      	cmp	r3, #0
 8037d50:	d10f      	bne.n	8037d72 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8037d52:	f3ef 8310 	mrs	r3, PRIMASK
 8037d56:	60fb      	str	r3, [r7, #12]
  return(result);
 8037d58:	68fb      	ldr	r3, [r7, #12]
 8037d5a:	2b00      	cmp	r3, #0
 8037d5c:	d105      	bne.n	8037d6a <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8037d5e:	f3ef 8311 	mrs	r3, BASEPRI
 8037d62:	60bb      	str	r3, [r7, #8]
  return(result);
 8037d64:	68bb      	ldr	r3, [r7, #8]
 8037d66:	2b00      	cmp	r3, #0
 8037d68:	d007      	beq.n	8037d7a <osMutexAcquire+0x52>
 8037d6a:	4b1d      	ldr	r3, [pc, #116]	; (8037de0 <osMutexAcquire+0xb8>)
 8037d6c:	681b      	ldr	r3, [r3, #0]
 8037d6e:	2b02      	cmp	r3, #2
 8037d70:	d103      	bne.n	8037d7a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8037d72:	f06f 0305 	mvn.w	r3, #5
 8037d76:	61fb      	str	r3, [r7, #28]
 8037d78:	e02c      	b.n	8037dd4 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8037d7a:	69bb      	ldr	r3, [r7, #24]
 8037d7c:	2b00      	cmp	r3, #0
 8037d7e:	d103      	bne.n	8037d88 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8037d80:	f06f 0303 	mvn.w	r3, #3
 8037d84:	61fb      	str	r3, [r7, #28]
 8037d86:	e025      	b.n	8037dd4 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8037d88:	697b      	ldr	r3, [r7, #20]
 8037d8a:	2b00      	cmp	r3, #0
 8037d8c:	d011      	beq.n	8037db2 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8037d8e:	6839      	ldr	r1, [r7, #0]
 8037d90:	69b8      	ldr	r0, [r7, #24]
 8037d92:	f000 fe6e 	bl	8038a72 <xQueueTakeMutexRecursive>
 8037d96:	4603      	mov	r3, r0
 8037d98:	2b01      	cmp	r3, #1
 8037d9a:	d01b      	beq.n	8037dd4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8037d9c:	683b      	ldr	r3, [r7, #0]
 8037d9e:	2b00      	cmp	r3, #0
 8037da0:	d003      	beq.n	8037daa <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8037da2:	f06f 0301 	mvn.w	r3, #1
 8037da6:	61fb      	str	r3, [r7, #28]
 8037da8:	e014      	b.n	8037dd4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8037daa:	f06f 0302 	mvn.w	r3, #2
 8037dae:	61fb      	str	r3, [r7, #28]
 8037db0:	e010      	b.n	8037dd4 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8037db2:	6839      	ldr	r1, [r7, #0]
 8037db4:	69b8      	ldr	r0, [r7, #24]
 8037db6:	f001 f8fb 	bl	8038fb0 <xQueueSemaphoreTake>
 8037dba:	4603      	mov	r3, r0
 8037dbc:	2b01      	cmp	r3, #1
 8037dbe:	d009      	beq.n	8037dd4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8037dc0:	683b      	ldr	r3, [r7, #0]
 8037dc2:	2b00      	cmp	r3, #0
 8037dc4:	d003      	beq.n	8037dce <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8037dc6:	f06f 0301 	mvn.w	r3, #1
 8037dca:	61fb      	str	r3, [r7, #28]
 8037dcc:	e002      	b.n	8037dd4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8037dce:	f06f 0302 	mvn.w	r3, #2
 8037dd2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8037dd4:	69fb      	ldr	r3, [r7, #28]
}
 8037dd6:	4618      	mov	r0, r3
 8037dd8:	3720      	adds	r7, #32
 8037dda:	46bd      	mov	sp, r7
 8037ddc:	bd80      	pop	{r7, pc}
 8037dde:	bf00      	nop
 8037de0:	20000f34 	.word	0x20000f34

08037de4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8037de4:	b580      	push	{r7, lr}
 8037de6:	b088      	sub	sp, #32
 8037de8:	af00      	add	r7, sp, #0
 8037dea:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8037dec:	687b      	ldr	r3, [r7, #4]
 8037dee:	f023 0301 	bic.w	r3, r3, #1
 8037df2:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8037df4:	687b      	ldr	r3, [r7, #4]
 8037df6:	f003 0301 	and.w	r3, r3, #1
 8037dfa:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8037dfc:	2300      	movs	r3, #0
 8037dfe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8037e00:	f3ef 8305 	mrs	r3, IPSR
 8037e04:	613b      	str	r3, [r7, #16]
  return(result);
 8037e06:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8037e08:	2b00      	cmp	r3, #0
 8037e0a:	d10f      	bne.n	8037e2c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8037e0c:	f3ef 8310 	mrs	r3, PRIMASK
 8037e10:	60fb      	str	r3, [r7, #12]
  return(result);
 8037e12:	68fb      	ldr	r3, [r7, #12]
 8037e14:	2b00      	cmp	r3, #0
 8037e16:	d105      	bne.n	8037e24 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8037e18:	f3ef 8311 	mrs	r3, BASEPRI
 8037e1c:	60bb      	str	r3, [r7, #8]
  return(result);
 8037e1e:	68bb      	ldr	r3, [r7, #8]
 8037e20:	2b00      	cmp	r3, #0
 8037e22:	d007      	beq.n	8037e34 <osMutexRelease+0x50>
 8037e24:	4b16      	ldr	r3, [pc, #88]	; (8037e80 <osMutexRelease+0x9c>)
 8037e26:	681b      	ldr	r3, [r3, #0]
 8037e28:	2b02      	cmp	r3, #2
 8037e2a:	d103      	bne.n	8037e34 <osMutexRelease+0x50>
    stat = osErrorISR;
 8037e2c:	f06f 0305 	mvn.w	r3, #5
 8037e30:	61fb      	str	r3, [r7, #28]
 8037e32:	e01f      	b.n	8037e74 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8037e34:	69bb      	ldr	r3, [r7, #24]
 8037e36:	2b00      	cmp	r3, #0
 8037e38:	d103      	bne.n	8037e42 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8037e3a:	f06f 0303 	mvn.w	r3, #3
 8037e3e:	61fb      	str	r3, [r7, #28]
 8037e40:	e018      	b.n	8037e74 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8037e42:	697b      	ldr	r3, [r7, #20]
 8037e44:	2b00      	cmp	r3, #0
 8037e46:	d009      	beq.n	8037e5c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8037e48:	69b8      	ldr	r0, [r7, #24]
 8037e4a:	f000 fddf 	bl	8038a0c <xQueueGiveMutexRecursive>
 8037e4e:	4603      	mov	r3, r0
 8037e50:	2b01      	cmp	r3, #1
 8037e52:	d00f      	beq.n	8037e74 <osMutexRelease+0x90>
        stat = osErrorResource;
 8037e54:	f06f 0302 	mvn.w	r3, #2
 8037e58:	61fb      	str	r3, [r7, #28]
 8037e5a:	e00b      	b.n	8037e74 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8037e5c:	2300      	movs	r3, #0
 8037e5e:	2200      	movs	r2, #0
 8037e60:	2100      	movs	r1, #0
 8037e62:	69b8      	ldr	r0, [r7, #24]
 8037e64:	f000 fe3a 	bl	8038adc <xQueueGenericSend>
 8037e68:	4603      	mov	r3, r0
 8037e6a:	2b01      	cmp	r3, #1
 8037e6c:	d002      	beq.n	8037e74 <osMutexRelease+0x90>
        stat = osErrorResource;
 8037e6e:	f06f 0302 	mvn.w	r3, #2
 8037e72:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8037e74:	69fb      	ldr	r3, [r7, #28]
}
 8037e76:	4618      	mov	r0, r3
 8037e78:	3720      	adds	r7, #32
 8037e7a:	46bd      	mov	sp, r7
 8037e7c:	bd80      	pop	{r7, pc}
 8037e7e:	bf00      	nop
 8037e80:	20000f34 	.word	0x20000f34

08037e84 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8037e84:	b580      	push	{r7, lr}
 8037e86:	b08c      	sub	sp, #48	; 0x30
 8037e88:	af02      	add	r7, sp, #8
 8037e8a:	60f8      	str	r0, [r7, #12]
 8037e8c:	60b9      	str	r1, [r7, #8]
 8037e8e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8037e90:	2300      	movs	r3, #0
 8037e92:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8037e94:	f3ef 8305 	mrs	r3, IPSR
 8037e98:	61bb      	str	r3, [r7, #24]
  return(result);
 8037e9a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8037e9c:	2b00      	cmp	r3, #0
 8037e9e:	d170      	bne.n	8037f82 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8037ea0:	f3ef 8310 	mrs	r3, PRIMASK
 8037ea4:	617b      	str	r3, [r7, #20]
  return(result);
 8037ea6:	697b      	ldr	r3, [r7, #20]
 8037ea8:	2b00      	cmp	r3, #0
 8037eaa:	d105      	bne.n	8037eb8 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8037eac:	f3ef 8311 	mrs	r3, BASEPRI
 8037eb0:	613b      	str	r3, [r7, #16]
  return(result);
 8037eb2:	693b      	ldr	r3, [r7, #16]
 8037eb4:	2b00      	cmp	r3, #0
 8037eb6:	d003      	beq.n	8037ec0 <osMessageQueueNew+0x3c>
 8037eb8:	4b34      	ldr	r3, [pc, #208]	; (8037f8c <osMessageQueueNew+0x108>)
 8037eba:	681b      	ldr	r3, [r3, #0]
 8037ebc:	2b02      	cmp	r3, #2
 8037ebe:	d060      	beq.n	8037f82 <osMessageQueueNew+0xfe>
 8037ec0:	68fb      	ldr	r3, [r7, #12]
 8037ec2:	2b00      	cmp	r3, #0
 8037ec4:	d05d      	beq.n	8037f82 <osMessageQueueNew+0xfe>
 8037ec6:	68bb      	ldr	r3, [r7, #8]
 8037ec8:	2b00      	cmp	r3, #0
 8037eca:	d05a      	beq.n	8037f82 <osMessageQueueNew+0xfe>
    mem = -1;
 8037ecc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8037ed0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8037ed2:	687b      	ldr	r3, [r7, #4]
 8037ed4:	2b00      	cmp	r3, #0
 8037ed6:	d029      	beq.n	8037f2c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8037ed8:	687b      	ldr	r3, [r7, #4]
 8037eda:	689b      	ldr	r3, [r3, #8]
 8037edc:	2b00      	cmp	r3, #0
 8037ede:	d012      	beq.n	8037f06 <osMessageQueueNew+0x82>
 8037ee0:	687b      	ldr	r3, [r7, #4]
 8037ee2:	68db      	ldr	r3, [r3, #12]
 8037ee4:	2b4f      	cmp	r3, #79	; 0x4f
 8037ee6:	d90e      	bls.n	8037f06 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8037ee8:	687b      	ldr	r3, [r7, #4]
 8037eea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8037eec:	2b00      	cmp	r3, #0
 8037eee:	d00a      	beq.n	8037f06 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8037ef0:	687b      	ldr	r3, [r7, #4]
 8037ef2:	695a      	ldr	r2, [r3, #20]
 8037ef4:	68fb      	ldr	r3, [r7, #12]
 8037ef6:	68b9      	ldr	r1, [r7, #8]
 8037ef8:	fb01 f303 	mul.w	r3, r1, r3
 8037efc:	429a      	cmp	r2, r3
 8037efe:	d302      	bcc.n	8037f06 <osMessageQueueNew+0x82>
        mem = 1;
 8037f00:	2301      	movs	r3, #1
 8037f02:	623b      	str	r3, [r7, #32]
 8037f04:	e014      	b.n	8037f30 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8037f06:	687b      	ldr	r3, [r7, #4]
 8037f08:	689b      	ldr	r3, [r3, #8]
 8037f0a:	2b00      	cmp	r3, #0
 8037f0c:	d110      	bne.n	8037f30 <osMessageQueueNew+0xac>
 8037f0e:	687b      	ldr	r3, [r7, #4]
 8037f10:	68db      	ldr	r3, [r3, #12]
 8037f12:	2b00      	cmp	r3, #0
 8037f14:	d10c      	bne.n	8037f30 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8037f16:	687b      	ldr	r3, [r7, #4]
 8037f18:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8037f1a:	2b00      	cmp	r3, #0
 8037f1c:	d108      	bne.n	8037f30 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8037f1e:	687b      	ldr	r3, [r7, #4]
 8037f20:	695b      	ldr	r3, [r3, #20]
 8037f22:	2b00      	cmp	r3, #0
 8037f24:	d104      	bne.n	8037f30 <osMessageQueueNew+0xac>
          mem = 0;
 8037f26:	2300      	movs	r3, #0
 8037f28:	623b      	str	r3, [r7, #32]
 8037f2a:	e001      	b.n	8037f30 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8037f2c:	2300      	movs	r3, #0
 8037f2e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8037f30:	6a3b      	ldr	r3, [r7, #32]
 8037f32:	2b01      	cmp	r3, #1
 8037f34:	d10c      	bne.n	8037f50 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8037f36:	687b      	ldr	r3, [r7, #4]
 8037f38:	691a      	ldr	r2, [r3, #16]
 8037f3a:	687b      	ldr	r3, [r7, #4]
 8037f3c:	6899      	ldr	r1, [r3, #8]
 8037f3e:	2300      	movs	r3, #0
 8037f40:	9300      	str	r3, [sp, #0]
 8037f42:	460b      	mov	r3, r1
 8037f44:	68b9      	ldr	r1, [r7, #8]
 8037f46:	68f8      	ldr	r0, [r7, #12]
 8037f48:	f000 fc3e 	bl	80387c8 <xQueueGenericCreateStatic>
 8037f4c:	6278      	str	r0, [r7, #36]	; 0x24
 8037f4e:	e008      	b.n	8037f62 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8037f50:	6a3b      	ldr	r3, [r7, #32]
 8037f52:	2b00      	cmp	r3, #0
 8037f54:	d105      	bne.n	8037f62 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8037f56:	2200      	movs	r2, #0
 8037f58:	68b9      	ldr	r1, [r7, #8]
 8037f5a:	68f8      	ldr	r0, [r7, #12]
 8037f5c:	f000 fca7 	bl	80388ae <xQueueGenericCreate>
 8037f60:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8037f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037f64:	2b00      	cmp	r3, #0
 8037f66:	d00c      	beq.n	8037f82 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8037f68:	687b      	ldr	r3, [r7, #4]
 8037f6a:	2b00      	cmp	r3, #0
 8037f6c:	d003      	beq.n	8037f76 <osMessageQueueNew+0xf2>
        name = attr->name;
 8037f6e:	687b      	ldr	r3, [r7, #4]
 8037f70:	681b      	ldr	r3, [r3, #0]
 8037f72:	61fb      	str	r3, [r7, #28]
 8037f74:	e001      	b.n	8037f7a <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8037f76:	2300      	movs	r3, #0
 8037f78:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8037f7a:	69f9      	ldr	r1, [r7, #28]
 8037f7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8037f7e:	f001 fac5 	bl	803950c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8037f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8037f84:	4618      	mov	r0, r3
 8037f86:	3728      	adds	r7, #40	; 0x28
 8037f88:	46bd      	mov	sp, r7
 8037f8a:	bd80      	pop	{r7, pc}
 8037f8c:	20000f34 	.word	0x20000f34

08037f90 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8037f90:	b580      	push	{r7, lr}
 8037f92:	b08a      	sub	sp, #40	; 0x28
 8037f94:	af00      	add	r7, sp, #0
 8037f96:	60f8      	str	r0, [r7, #12]
 8037f98:	60b9      	str	r1, [r7, #8]
 8037f9a:	603b      	str	r3, [r7, #0]
 8037f9c:	4613      	mov	r3, r2
 8037f9e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8037fa0:	68fb      	ldr	r3, [r7, #12]
 8037fa2:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8037fa4:	2300      	movs	r3, #0
 8037fa6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8037fa8:	f3ef 8305 	mrs	r3, IPSR
 8037fac:	61fb      	str	r3, [r7, #28]
  return(result);
 8037fae:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8037fb0:	2b00      	cmp	r3, #0
 8037fb2:	d10f      	bne.n	8037fd4 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8037fb4:	f3ef 8310 	mrs	r3, PRIMASK
 8037fb8:	61bb      	str	r3, [r7, #24]
  return(result);
 8037fba:	69bb      	ldr	r3, [r7, #24]
 8037fbc:	2b00      	cmp	r3, #0
 8037fbe:	d105      	bne.n	8037fcc <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8037fc0:	f3ef 8311 	mrs	r3, BASEPRI
 8037fc4:	617b      	str	r3, [r7, #20]
  return(result);
 8037fc6:	697b      	ldr	r3, [r7, #20]
 8037fc8:	2b00      	cmp	r3, #0
 8037fca:	d02c      	beq.n	8038026 <osMessageQueuePut+0x96>
 8037fcc:	4b28      	ldr	r3, [pc, #160]	; (8038070 <osMessageQueuePut+0xe0>)
 8037fce:	681b      	ldr	r3, [r3, #0]
 8037fd0:	2b02      	cmp	r3, #2
 8037fd2:	d128      	bne.n	8038026 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8037fd4:	6a3b      	ldr	r3, [r7, #32]
 8037fd6:	2b00      	cmp	r3, #0
 8037fd8:	d005      	beq.n	8037fe6 <osMessageQueuePut+0x56>
 8037fda:	68bb      	ldr	r3, [r7, #8]
 8037fdc:	2b00      	cmp	r3, #0
 8037fde:	d002      	beq.n	8037fe6 <osMessageQueuePut+0x56>
 8037fe0:	683b      	ldr	r3, [r7, #0]
 8037fe2:	2b00      	cmp	r3, #0
 8037fe4:	d003      	beq.n	8037fee <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8037fe6:	f06f 0303 	mvn.w	r3, #3
 8037fea:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8037fec:	e039      	b.n	8038062 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8037fee:	2300      	movs	r3, #0
 8037ff0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8037ff2:	f107 0210 	add.w	r2, r7, #16
 8037ff6:	2300      	movs	r3, #0
 8037ff8:	68b9      	ldr	r1, [r7, #8]
 8037ffa:	6a38      	ldr	r0, [r7, #32]
 8037ffc:	f000 fe68 	bl	8038cd0 <xQueueGenericSendFromISR>
 8038000:	4603      	mov	r3, r0
 8038002:	2b01      	cmp	r3, #1
 8038004:	d003      	beq.n	803800e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8038006:	f06f 0302 	mvn.w	r3, #2
 803800a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 803800c:	e029      	b.n	8038062 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 803800e:	693b      	ldr	r3, [r7, #16]
 8038010:	2b00      	cmp	r3, #0
 8038012:	d026      	beq.n	8038062 <osMessageQueuePut+0xd2>
 8038014:	4b17      	ldr	r3, [pc, #92]	; (8038074 <osMessageQueuePut+0xe4>)
 8038016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 803801a:	601a      	str	r2, [r3, #0]
 803801c:	f3bf 8f4f 	dsb	sy
 8038020:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8038024:	e01d      	b.n	8038062 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8038026:	6a3b      	ldr	r3, [r7, #32]
 8038028:	2b00      	cmp	r3, #0
 803802a:	d002      	beq.n	8038032 <osMessageQueuePut+0xa2>
 803802c:	68bb      	ldr	r3, [r7, #8]
 803802e:	2b00      	cmp	r3, #0
 8038030:	d103      	bne.n	803803a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8038032:	f06f 0303 	mvn.w	r3, #3
 8038036:	627b      	str	r3, [r7, #36]	; 0x24
 8038038:	e014      	b.n	8038064 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 803803a:	2300      	movs	r3, #0
 803803c:	683a      	ldr	r2, [r7, #0]
 803803e:	68b9      	ldr	r1, [r7, #8]
 8038040:	6a38      	ldr	r0, [r7, #32]
 8038042:	f000 fd4b 	bl	8038adc <xQueueGenericSend>
 8038046:	4603      	mov	r3, r0
 8038048:	2b01      	cmp	r3, #1
 803804a:	d00b      	beq.n	8038064 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 803804c:	683b      	ldr	r3, [r7, #0]
 803804e:	2b00      	cmp	r3, #0
 8038050:	d003      	beq.n	803805a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8038052:	f06f 0301 	mvn.w	r3, #1
 8038056:	627b      	str	r3, [r7, #36]	; 0x24
 8038058:	e004      	b.n	8038064 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 803805a:	f06f 0302 	mvn.w	r3, #2
 803805e:	627b      	str	r3, [r7, #36]	; 0x24
 8038060:	e000      	b.n	8038064 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8038062:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8038064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8038066:	4618      	mov	r0, r3
 8038068:	3728      	adds	r7, #40	; 0x28
 803806a:	46bd      	mov	sp, r7
 803806c:	bd80      	pop	{r7, pc}
 803806e:	bf00      	nop
 8038070:	20000f34 	.word	0x20000f34
 8038074:	e000ed04 	.word	0xe000ed04

08038078 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8038078:	b580      	push	{r7, lr}
 803807a:	b08a      	sub	sp, #40	; 0x28
 803807c:	af00      	add	r7, sp, #0
 803807e:	60f8      	str	r0, [r7, #12]
 8038080:	60b9      	str	r1, [r7, #8]
 8038082:	607a      	str	r2, [r7, #4]
 8038084:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8038086:	68fb      	ldr	r3, [r7, #12]
 8038088:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 803808a:	2300      	movs	r3, #0
 803808c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 803808e:	f3ef 8305 	mrs	r3, IPSR
 8038092:	61fb      	str	r3, [r7, #28]
  return(result);
 8038094:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8038096:	2b00      	cmp	r3, #0
 8038098:	d10f      	bne.n	80380ba <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 803809a:	f3ef 8310 	mrs	r3, PRIMASK
 803809e:	61bb      	str	r3, [r7, #24]
  return(result);
 80380a0:	69bb      	ldr	r3, [r7, #24]
 80380a2:	2b00      	cmp	r3, #0
 80380a4:	d105      	bne.n	80380b2 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80380a6:	f3ef 8311 	mrs	r3, BASEPRI
 80380aa:	617b      	str	r3, [r7, #20]
  return(result);
 80380ac:	697b      	ldr	r3, [r7, #20]
 80380ae:	2b00      	cmp	r3, #0
 80380b0:	d02c      	beq.n	803810c <osMessageQueueGet+0x94>
 80380b2:	4b28      	ldr	r3, [pc, #160]	; (8038154 <osMessageQueueGet+0xdc>)
 80380b4:	681b      	ldr	r3, [r3, #0]
 80380b6:	2b02      	cmp	r3, #2
 80380b8:	d128      	bne.n	803810c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80380ba:	6a3b      	ldr	r3, [r7, #32]
 80380bc:	2b00      	cmp	r3, #0
 80380be:	d005      	beq.n	80380cc <osMessageQueueGet+0x54>
 80380c0:	68bb      	ldr	r3, [r7, #8]
 80380c2:	2b00      	cmp	r3, #0
 80380c4:	d002      	beq.n	80380cc <osMessageQueueGet+0x54>
 80380c6:	683b      	ldr	r3, [r7, #0]
 80380c8:	2b00      	cmp	r3, #0
 80380ca:	d003      	beq.n	80380d4 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80380cc:	f06f 0303 	mvn.w	r3, #3
 80380d0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80380d2:	e038      	b.n	8038146 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80380d4:	2300      	movs	r3, #0
 80380d6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80380d8:	f107 0310 	add.w	r3, r7, #16
 80380dc:	461a      	mov	r2, r3
 80380de:	68b9      	ldr	r1, [r7, #8]
 80380e0:	6a38      	ldr	r0, [r7, #32]
 80380e2:	f001 f86d 	bl	80391c0 <xQueueReceiveFromISR>
 80380e6:	4603      	mov	r3, r0
 80380e8:	2b01      	cmp	r3, #1
 80380ea:	d003      	beq.n	80380f4 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80380ec:	f06f 0302 	mvn.w	r3, #2
 80380f0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80380f2:	e028      	b.n	8038146 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80380f4:	693b      	ldr	r3, [r7, #16]
 80380f6:	2b00      	cmp	r3, #0
 80380f8:	d025      	beq.n	8038146 <osMessageQueueGet+0xce>
 80380fa:	4b17      	ldr	r3, [pc, #92]	; (8038158 <osMessageQueueGet+0xe0>)
 80380fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8038100:	601a      	str	r2, [r3, #0]
 8038102:	f3bf 8f4f 	dsb	sy
 8038106:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 803810a:	e01c      	b.n	8038146 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 803810c:	6a3b      	ldr	r3, [r7, #32]
 803810e:	2b00      	cmp	r3, #0
 8038110:	d002      	beq.n	8038118 <osMessageQueueGet+0xa0>
 8038112:	68bb      	ldr	r3, [r7, #8]
 8038114:	2b00      	cmp	r3, #0
 8038116:	d103      	bne.n	8038120 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8038118:	f06f 0303 	mvn.w	r3, #3
 803811c:	627b      	str	r3, [r7, #36]	; 0x24
 803811e:	e013      	b.n	8038148 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8038120:	683a      	ldr	r2, [r7, #0]
 8038122:	68b9      	ldr	r1, [r7, #8]
 8038124:	6a38      	ldr	r0, [r7, #32]
 8038126:	f000 fe67 	bl	8038df8 <xQueueReceive>
 803812a:	4603      	mov	r3, r0
 803812c:	2b01      	cmp	r3, #1
 803812e:	d00b      	beq.n	8038148 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8038130:	683b      	ldr	r3, [r7, #0]
 8038132:	2b00      	cmp	r3, #0
 8038134:	d003      	beq.n	803813e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8038136:	f06f 0301 	mvn.w	r3, #1
 803813a:	627b      	str	r3, [r7, #36]	; 0x24
 803813c:	e004      	b.n	8038148 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 803813e:	f06f 0302 	mvn.w	r3, #2
 8038142:	627b      	str	r3, [r7, #36]	; 0x24
 8038144:	e000      	b.n	8038148 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8038146:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8038148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 803814a:	4618      	mov	r0, r3
 803814c:	3728      	adds	r7, #40	; 0x28
 803814e:	46bd      	mov	sp, r7
 8038150:	bd80      	pop	{r7, pc}
 8038152:	bf00      	nop
 8038154:	20000f34 	.word	0x20000f34
 8038158:	e000ed04 	.word	0xe000ed04

0803815c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 803815c:	b480      	push	{r7}
 803815e:	b085      	sub	sp, #20
 8038160:	af00      	add	r7, sp, #0
 8038162:	60f8      	str	r0, [r7, #12]
 8038164:	60b9      	str	r1, [r7, #8]
 8038166:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8038168:	68fb      	ldr	r3, [r7, #12]
 803816a:	4a07      	ldr	r2, [pc, #28]	; (8038188 <vApplicationGetIdleTaskMemory+0x2c>)
 803816c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 803816e:	68bb      	ldr	r3, [r7, #8]
 8038170:	4a06      	ldr	r2, [pc, #24]	; (803818c <vApplicationGetIdleTaskMemory+0x30>)
 8038172:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8038174:	687b      	ldr	r3, [r7, #4]
 8038176:	2280      	movs	r2, #128	; 0x80
 8038178:	601a      	str	r2, [r3, #0]
}
 803817a:	bf00      	nop
 803817c:	3714      	adds	r7, #20
 803817e:	46bd      	mov	sp, r7
 8038180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038184:	4770      	bx	lr
 8038186:	bf00      	nop
 8038188:	20000f38 	.word	0x20000f38
 803818c:	20000f98 	.word	0x20000f98

08038190 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8038190:	b480      	push	{r7}
 8038192:	b085      	sub	sp, #20
 8038194:	af00      	add	r7, sp, #0
 8038196:	60f8      	str	r0, [r7, #12]
 8038198:	60b9      	str	r1, [r7, #8]
 803819a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 803819c:	68fb      	ldr	r3, [r7, #12]
 803819e:	4a07      	ldr	r2, [pc, #28]	; (80381bc <vApplicationGetTimerTaskMemory+0x2c>)
 80381a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80381a2:	68bb      	ldr	r3, [r7, #8]
 80381a4:	4a06      	ldr	r2, [pc, #24]	; (80381c0 <vApplicationGetTimerTaskMemory+0x30>)
 80381a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80381a8:	687b      	ldr	r3, [r7, #4]
 80381aa:	2280      	movs	r2, #128	; 0x80
 80381ac:	601a      	str	r2, [r3, #0]
}
 80381ae:	bf00      	nop
 80381b0:	3714      	adds	r7, #20
 80381b2:	46bd      	mov	sp, r7
 80381b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80381b8:	4770      	bx	lr
 80381ba:	bf00      	nop
 80381bc:	20001198 	.word	0x20001198
 80381c0:	200011f8 	.word	0x200011f8

080381c4 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80381c4:	b580      	push	{r7, lr}
 80381c6:	b086      	sub	sp, #24
 80381c8:	af00      	add	r7, sp, #0
 80381ca:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80381cc:	687b      	ldr	r3, [r7, #4]
 80381ce:	2b00      	cmp	r3, #0
 80381d0:	d109      	bne.n	80381e6 <xEventGroupCreateStatic+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80381d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80381d6:	f383 8811 	msr	BASEPRI, r3
 80381da:	f3bf 8f6f 	isb	sy
 80381de:	f3bf 8f4f 	dsb	sy
 80381e2:	613b      	str	r3, [r7, #16]
 80381e4:	e7fe      	b.n	80381e4 <xEventGroupCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80381e6:	2320      	movs	r3, #32
 80381e8:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80381ea:	68bb      	ldr	r3, [r7, #8]
 80381ec:	2b20      	cmp	r3, #32
 80381ee:	d009      	beq.n	8038204 <xEventGroupCreateStatic+0x40>
 80381f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80381f4:	f383 8811 	msr	BASEPRI, r3
 80381f8:	f3bf 8f6f 	isb	sy
 80381fc:	f3bf 8f4f 	dsb	sy
 8038200:	60fb      	str	r3, [r7, #12]
 8038202:	e7fe      	b.n	8038202 <xEventGroupCreateStatic+0x3e>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8038204:	687b      	ldr	r3, [r7, #4]
 8038206:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8038208:	697b      	ldr	r3, [r7, #20]
 803820a:	2b00      	cmp	r3, #0
 803820c:	d00a      	beq.n	8038224 <xEventGroupCreateStatic+0x60>
		{
			pxEventBits->uxEventBits = 0;
 803820e:	697b      	ldr	r3, [r7, #20]
 8038210:	2200      	movs	r2, #0
 8038212:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8038214:	697b      	ldr	r3, [r7, #20]
 8038216:	3304      	adds	r3, #4
 8038218:	4618      	mov	r0, r3
 803821a:	f000 f9b9 	bl	8038590 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 803821e:	697b      	ldr	r3, [r7, #20]
 8038220:	2201      	movs	r2, #1
 8038222:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8038224:	697b      	ldr	r3, [r7, #20]
	}
 8038226:	4618      	mov	r0, r3
 8038228:	3718      	adds	r7, #24
 803822a:	46bd      	mov	sp, r7
 803822c:	bd80      	pop	{r7, pc}

0803822e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 803822e:	b580      	push	{r7, lr}
 8038230:	b082      	sub	sp, #8
 8038232:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8038234:	2020      	movs	r0, #32
 8038236:	f003 fa9b 	bl	803b770 <pvPortMalloc>
 803823a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 803823c:	687b      	ldr	r3, [r7, #4]
 803823e:	2b00      	cmp	r3, #0
 8038240:	d00a      	beq.n	8038258 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8038242:	687b      	ldr	r3, [r7, #4]
 8038244:	2200      	movs	r2, #0
 8038246:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8038248:	687b      	ldr	r3, [r7, #4]
 803824a:	3304      	adds	r3, #4
 803824c:	4618      	mov	r0, r3
 803824e:	f000 f99f 	bl	8038590 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8038252:	687b      	ldr	r3, [r7, #4]
 8038254:	2200      	movs	r2, #0
 8038256:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8038258:	687b      	ldr	r3, [r7, #4]
	}
 803825a:	4618      	mov	r0, r3
 803825c:	3708      	adds	r7, #8
 803825e:	46bd      	mov	sp, r7
 8038260:	bd80      	pop	{r7, pc}
	...

08038264 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8038264:	b580      	push	{r7, lr}
 8038266:	b090      	sub	sp, #64	; 0x40
 8038268:	af00      	add	r7, sp, #0
 803826a:	60f8      	str	r0, [r7, #12]
 803826c:	60b9      	str	r1, [r7, #8]
 803826e:	607a      	str	r2, [r7, #4]
 8038270:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8038272:	68fb      	ldr	r3, [r7, #12]
 8038274:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8038276:	2300      	movs	r3, #0
 8038278:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 803827a:	2300      	movs	r3, #0
 803827c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 803827e:	68fb      	ldr	r3, [r7, #12]
 8038280:	2b00      	cmp	r3, #0
 8038282:	d109      	bne.n	8038298 <xEventGroupWaitBits+0x34>
 8038284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038288:	f383 8811 	msr	BASEPRI, r3
 803828c:	f3bf 8f6f 	isb	sy
 8038290:	f3bf 8f4f 	dsb	sy
 8038294:	623b      	str	r3, [r7, #32]
 8038296:	e7fe      	b.n	8038296 <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8038298:	68bb      	ldr	r3, [r7, #8]
 803829a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 803829e:	2b00      	cmp	r3, #0
 80382a0:	d009      	beq.n	80382b6 <xEventGroupWaitBits+0x52>
 80382a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80382a6:	f383 8811 	msr	BASEPRI, r3
 80382aa:	f3bf 8f6f 	isb	sy
 80382ae:	f3bf 8f4f 	dsb	sy
 80382b2:	61fb      	str	r3, [r7, #28]
 80382b4:	e7fe      	b.n	80382b4 <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 80382b6:	68bb      	ldr	r3, [r7, #8]
 80382b8:	2b00      	cmp	r3, #0
 80382ba:	d109      	bne.n	80382d0 <xEventGroupWaitBits+0x6c>
 80382bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80382c0:	f383 8811 	msr	BASEPRI, r3
 80382c4:	f3bf 8f6f 	isb	sy
 80382c8:	f3bf 8f4f 	dsb	sy
 80382cc:	61bb      	str	r3, [r7, #24]
 80382ce:	e7fe      	b.n	80382ce <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80382d0:	f002 f8cc 	bl	803a46c <xTaskGetSchedulerState>
 80382d4:	4603      	mov	r3, r0
 80382d6:	2b00      	cmp	r3, #0
 80382d8:	d102      	bne.n	80382e0 <xEventGroupWaitBits+0x7c>
 80382da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80382dc:	2b00      	cmp	r3, #0
 80382de:	d101      	bne.n	80382e4 <xEventGroupWaitBits+0x80>
 80382e0:	2301      	movs	r3, #1
 80382e2:	e000      	b.n	80382e6 <xEventGroupWaitBits+0x82>
 80382e4:	2300      	movs	r3, #0
 80382e6:	2b00      	cmp	r3, #0
 80382e8:	d109      	bne.n	80382fe <xEventGroupWaitBits+0x9a>
 80382ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80382ee:	f383 8811 	msr	BASEPRI, r3
 80382f2:	f3bf 8f6f 	isb	sy
 80382f6:	f3bf 8f4f 	dsb	sy
 80382fa:	617b      	str	r3, [r7, #20]
 80382fc:	e7fe      	b.n	80382fc <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 80382fe:	f001 fc17 	bl	8039b30 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8038302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8038304:	681b      	ldr	r3, [r3, #0]
 8038306:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8038308:	683a      	ldr	r2, [r7, #0]
 803830a:	68b9      	ldr	r1, [r7, #8]
 803830c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 803830e:	f000 f909 	bl	8038524 <prvTestWaitCondition>
 8038312:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8038314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038316:	2b00      	cmp	r3, #0
 8038318:	d00e      	beq.n	8038338 <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 803831a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803831c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 803831e:	2300      	movs	r3, #0
 8038320:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8038322:	687b      	ldr	r3, [r7, #4]
 8038324:	2b00      	cmp	r3, #0
 8038326:	d028      	beq.n	803837a <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8038328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803832a:	681a      	ldr	r2, [r3, #0]
 803832c:	68bb      	ldr	r3, [r7, #8]
 803832e:	43db      	mvns	r3, r3
 8038330:	401a      	ands	r2, r3
 8038332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8038334:	601a      	str	r2, [r3, #0]
 8038336:	e020      	b.n	803837a <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8038338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 803833a:	2b00      	cmp	r3, #0
 803833c:	d104      	bne.n	8038348 <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 803833e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8038340:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8038342:	2301      	movs	r3, #1
 8038344:	633b      	str	r3, [r7, #48]	; 0x30
 8038346:	e018      	b.n	803837a <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8038348:	687b      	ldr	r3, [r7, #4]
 803834a:	2b00      	cmp	r3, #0
 803834c:	d003      	beq.n	8038356 <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 803834e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8038350:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8038354:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8038356:	683b      	ldr	r3, [r7, #0]
 8038358:	2b00      	cmp	r3, #0
 803835a:	d003      	beq.n	8038364 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 803835c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803835e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8038362:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8038364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8038366:	1d18      	adds	r0, r3, #4
 8038368:	68ba      	ldr	r2, [r7, #8]
 803836a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803836c:	4313      	orrs	r3, r2
 803836e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8038370:	4619      	mov	r1, r3
 8038372:	f001 fde1 	bl	8039f38 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8038376:	2300      	movs	r3, #0
 8038378:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 803837a:	f001 fbe7 	bl	8039b4c <xTaskResumeAll>
 803837e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8038380:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8038382:	2b00      	cmp	r3, #0
 8038384:	d031      	beq.n	80383ea <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 8038386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038388:	2b00      	cmp	r3, #0
 803838a:	d107      	bne.n	803839c <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 803838c:	4b19      	ldr	r3, [pc, #100]	; (80383f4 <xEventGroupWaitBits+0x190>)
 803838e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8038392:	601a      	str	r2, [r3, #0]
 8038394:	f3bf 8f4f 	dsb	sy
 8038398:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 803839c:	f002 f9d8 	bl	803a750 <uxTaskResetEventItemValue>
 80383a0:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80383a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80383a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80383a8:	2b00      	cmp	r3, #0
 80383aa:	d11a      	bne.n	80383e2 <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 80383ac:	f003 f8c6 	bl	803b53c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80383b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80383b2:	681b      	ldr	r3, [r3, #0]
 80383b4:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80383b6:	683a      	ldr	r2, [r7, #0]
 80383b8:	68b9      	ldr	r1, [r7, #8]
 80383ba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80383bc:	f000 f8b2 	bl	8038524 <prvTestWaitCondition>
 80383c0:	4603      	mov	r3, r0
 80383c2:	2b00      	cmp	r3, #0
 80383c4:	d009      	beq.n	80383da <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 80383c6:	687b      	ldr	r3, [r7, #4]
 80383c8:	2b00      	cmp	r3, #0
 80383ca:	d006      	beq.n	80383da <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80383cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80383ce:	681a      	ldr	r2, [r3, #0]
 80383d0:	68bb      	ldr	r3, [r7, #8]
 80383d2:	43db      	mvns	r3, r3
 80383d4:	401a      	ands	r2, r3
 80383d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80383d8:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80383da:	2301      	movs	r3, #1
 80383dc:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80383de:	f003 f8db 	bl	803b598 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80383e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80383e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80383e8:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80383ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80383ec:	4618      	mov	r0, r3
 80383ee:	3740      	adds	r7, #64	; 0x40
 80383f0:	46bd      	mov	sp, r7
 80383f2:	bd80      	pop	{r7, pc}
 80383f4:	e000ed04 	.word	0xe000ed04

080383f8 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80383f8:	b580      	push	{r7, lr}
 80383fa:	b08e      	sub	sp, #56	; 0x38
 80383fc:	af00      	add	r7, sp, #0
 80383fe:	6078      	str	r0, [r7, #4]
 8038400:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8038402:	2300      	movs	r3, #0
 8038404:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8038406:	687b      	ldr	r3, [r7, #4]
 8038408:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 803840a:	2300      	movs	r3, #0
 803840c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 803840e:	687b      	ldr	r3, [r7, #4]
 8038410:	2b00      	cmp	r3, #0
 8038412:	d109      	bne.n	8038428 <xEventGroupSetBits+0x30>
 8038414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038418:	f383 8811 	msr	BASEPRI, r3
 803841c:	f3bf 8f6f 	isb	sy
 8038420:	f3bf 8f4f 	dsb	sy
 8038424:	613b      	str	r3, [r7, #16]
 8038426:	e7fe      	b.n	8038426 <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8038428:	683b      	ldr	r3, [r7, #0]
 803842a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 803842e:	2b00      	cmp	r3, #0
 8038430:	d009      	beq.n	8038446 <xEventGroupSetBits+0x4e>
 8038432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038436:	f383 8811 	msr	BASEPRI, r3
 803843a:	f3bf 8f6f 	isb	sy
 803843e:	f3bf 8f4f 	dsb	sy
 8038442:	60fb      	str	r3, [r7, #12]
 8038444:	e7fe      	b.n	8038444 <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8038446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038448:	3304      	adds	r3, #4
 803844a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 803844c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803844e:	3308      	adds	r3, #8
 8038450:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8038452:	f001 fb6d 	bl	8039b30 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8038456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038458:	68db      	ldr	r3, [r3, #12]
 803845a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 803845c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803845e:	681a      	ldr	r2, [r3, #0]
 8038460:	683b      	ldr	r3, [r7, #0]
 8038462:	431a      	orrs	r2, r3
 8038464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038466:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8038468:	e03c      	b.n	80384e4 <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 803846a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803846c:	685b      	ldr	r3, [r3, #4]
 803846e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8038470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8038472:	681b      	ldr	r3, [r3, #0]
 8038474:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8038476:	2300      	movs	r3, #0
 8038478:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 803847a:	69bb      	ldr	r3, [r7, #24]
 803847c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8038480:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8038482:	69bb      	ldr	r3, [r7, #24]
 8038484:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8038488:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 803848a:	697b      	ldr	r3, [r7, #20]
 803848c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8038490:	2b00      	cmp	r3, #0
 8038492:	d108      	bne.n	80384a6 <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8038494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038496:	681a      	ldr	r2, [r3, #0]
 8038498:	69bb      	ldr	r3, [r7, #24]
 803849a:	4013      	ands	r3, r2
 803849c:	2b00      	cmp	r3, #0
 803849e:	d00b      	beq.n	80384b8 <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 80384a0:	2301      	movs	r3, #1
 80384a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80384a4:	e008      	b.n	80384b8 <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80384a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80384a8:	681a      	ldr	r2, [r3, #0]
 80384aa:	69bb      	ldr	r3, [r7, #24]
 80384ac:	4013      	ands	r3, r2
 80384ae:	69ba      	ldr	r2, [r7, #24]
 80384b0:	429a      	cmp	r2, r3
 80384b2:	d101      	bne.n	80384b8 <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80384b4:	2301      	movs	r3, #1
 80384b6:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80384b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80384ba:	2b00      	cmp	r3, #0
 80384bc:	d010      	beq.n	80384e0 <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80384be:	697b      	ldr	r3, [r7, #20]
 80384c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80384c4:	2b00      	cmp	r3, #0
 80384c6:	d003      	beq.n	80384d0 <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80384c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80384ca:	69bb      	ldr	r3, [r7, #24]
 80384cc:	4313      	orrs	r3, r2
 80384ce:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80384d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80384d2:	681b      	ldr	r3, [r3, #0]
 80384d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80384d8:	4619      	mov	r1, r3
 80384da:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80384dc:	f001 fdf2 	bl	803a0c4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80384e0:	69fb      	ldr	r3, [r7, #28]
 80384e2:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80384e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80384e6:	6a3b      	ldr	r3, [r7, #32]
 80384e8:	429a      	cmp	r2, r3
 80384ea:	d1be      	bne.n	803846a <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80384ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80384ee:	681a      	ldr	r2, [r3, #0]
 80384f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80384f2:	43db      	mvns	r3, r3
 80384f4:	401a      	ands	r2, r3
 80384f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80384f8:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80384fa:	f001 fb27 	bl	8039b4c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80384fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038500:	681b      	ldr	r3, [r3, #0]
}
 8038502:	4618      	mov	r0, r3
 8038504:	3738      	adds	r7, #56	; 0x38
 8038506:	46bd      	mov	sp, r7
 8038508:	bd80      	pop	{r7, pc}

0803850a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 803850a:	b580      	push	{r7, lr}
 803850c:	b082      	sub	sp, #8
 803850e:	af00      	add	r7, sp, #0
 8038510:	6078      	str	r0, [r7, #4]
 8038512:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8038514:	6839      	ldr	r1, [r7, #0]
 8038516:	6878      	ldr	r0, [r7, #4]
 8038518:	f7ff ff6e 	bl	80383f8 <xEventGroupSetBits>
}
 803851c:	bf00      	nop
 803851e:	3708      	adds	r7, #8
 8038520:	46bd      	mov	sp, r7
 8038522:	bd80      	pop	{r7, pc}

08038524 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8038524:	b480      	push	{r7}
 8038526:	b087      	sub	sp, #28
 8038528:	af00      	add	r7, sp, #0
 803852a:	60f8      	str	r0, [r7, #12]
 803852c:	60b9      	str	r1, [r7, #8]
 803852e:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8038530:	2300      	movs	r3, #0
 8038532:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8038534:	687b      	ldr	r3, [r7, #4]
 8038536:	2b00      	cmp	r3, #0
 8038538:	d107      	bne.n	803854a <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 803853a:	68fa      	ldr	r2, [r7, #12]
 803853c:	68bb      	ldr	r3, [r7, #8]
 803853e:	4013      	ands	r3, r2
 8038540:	2b00      	cmp	r3, #0
 8038542:	d00a      	beq.n	803855a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8038544:	2301      	movs	r3, #1
 8038546:	617b      	str	r3, [r7, #20]
 8038548:	e007      	b.n	803855a <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 803854a:	68fa      	ldr	r2, [r7, #12]
 803854c:	68bb      	ldr	r3, [r7, #8]
 803854e:	4013      	ands	r3, r2
 8038550:	68ba      	ldr	r2, [r7, #8]
 8038552:	429a      	cmp	r2, r3
 8038554:	d101      	bne.n	803855a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8038556:	2301      	movs	r3, #1
 8038558:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 803855a:	697b      	ldr	r3, [r7, #20]
}
 803855c:	4618      	mov	r0, r3
 803855e:	371c      	adds	r7, #28
 8038560:	46bd      	mov	sp, r7
 8038562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038566:	4770      	bx	lr

08038568 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8038568:	b580      	push	{r7, lr}
 803856a:	b086      	sub	sp, #24
 803856c:	af00      	add	r7, sp, #0
 803856e:	60f8      	str	r0, [r7, #12]
 8038570:	60b9      	str	r1, [r7, #8]
 8038572:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8038574:	687b      	ldr	r3, [r7, #4]
 8038576:	68ba      	ldr	r2, [r7, #8]
 8038578:	68f9      	ldr	r1, [r7, #12]
 803857a:	4804      	ldr	r0, [pc, #16]	; (803858c <xEventGroupSetBitsFromISR+0x24>)
 803857c:	f002 fe9a 	bl	803b2b4 <xTimerPendFunctionCallFromISR>
 8038580:	6178      	str	r0, [r7, #20]

		return xReturn;
 8038582:	697b      	ldr	r3, [r7, #20]
	}
 8038584:	4618      	mov	r0, r3
 8038586:	3718      	adds	r7, #24
 8038588:	46bd      	mov	sp, r7
 803858a:	bd80      	pop	{r7, pc}
 803858c:	0803850b 	.word	0x0803850b

08038590 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8038590:	b480      	push	{r7}
 8038592:	b083      	sub	sp, #12
 8038594:	af00      	add	r7, sp, #0
 8038596:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8038598:	687b      	ldr	r3, [r7, #4]
 803859a:	f103 0208 	add.w	r2, r3, #8
 803859e:	687b      	ldr	r3, [r7, #4]
 80385a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80385a2:	687b      	ldr	r3, [r7, #4]
 80385a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80385a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80385aa:	687b      	ldr	r3, [r7, #4]
 80385ac:	f103 0208 	add.w	r2, r3, #8
 80385b0:	687b      	ldr	r3, [r7, #4]
 80385b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80385b4:	687b      	ldr	r3, [r7, #4]
 80385b6:	f103 0208 	add.w	r2, r3, #8
 80385ba:	687b      	ldr	r3, [r7, #4]
 80385bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80385be:	687b      	ldr	r3, [r7, #4]
 80385c0:	2200      	movs	r2, #0
 80385c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80385c4:	bf00      	nop
 80385c6:	370c      	adds	r7, #12
 80385c8:	46bd      	mov	sp, r7
 80385ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80385ce:	4770      	bx	lr

080385d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80385d0:	b480      	push	{r7}
 80385d2:	b083      	sub	sp, #12
 80385d4:	af00      	add	r7, sp, #0
 80385d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80385d8:	687b      	ldr	r3, [r7, #4]
 80385da:	2200      	movs	r2, #0
 80385dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80385de:	bf00      	nop
 80385e0:	370c      	adds	r7, #12
 80385e2:	46bd      	mov	sp, r7
 80385e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80385e8:	4770      	bx	lr

080385ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80385ea:	b480      	push	{r7}
 80385ec:	b085      	sub	sp, #20
 80385ee:	af00      	add	r7, sp, #0
 80385f0:	6078      	str	r0, [r7, #4]
 80385f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80385f4:	687b      	ldr	r3, [r7, #4]
 80385f6:	685b      	ldr	r3, [r3, #4]
 80385f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80385fa:	683b      	ldr	r3, [r7, #0]
 80385fc:	68fa      	ldr	r2, [r7, #12]
 80385fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8038600:	68fb      	ldr	r3, [r7, #12]
 8038602:	689a      	ldr	r2, [r3, #8]
 8038604:	683b      	ldr	r3, [r7, #0]
 8038606:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8038608:	68fb      	ldr	r3, [r7, #12]
 803860a:	689b      	ldr	r3, [r3, #8]
 803860c:	683a      	ldr	r2, [r7, #0]
 803860e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8038610:	68fb      	ldr	r3, [r7, #12]
 8038612:	683a      	ldr	r2, [r7, #0]
 8038614:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8038616:	683b      	ldr	r3, [r7, #0]
 8038618:	687a      	ldr	r2, [r7, #4]
 803861a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 803861c:	687b      	ldr	r3, [r7, #4]
 803861e:	681b      	ldr	r3, [r3, #0]
 8038620:	1c5a      	adds	r2, r3, #1
 8038622:	687b      	ldr	r3, [r7, #4]
 8038624:	601a      	str	r2, [r3, #0]
}
 8038626:	bf00      	nop
 8038628:	3714      	adds	r7, #20
 803862a:	46bd      	mov	sp, r7
 803862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038630:	4770      	bx	lr

08038632 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8038632:	b480      	push	{r7}
 8038634:	b085      	sub	sp, #20
 8038636:	af00      	add	r7, sp, #0
 8038638:	6078      	str	r0, [r7, #4]
 803863a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 803863c:	683b      	ldr	r3, [r7, #0]
 803863e:	681b      	ldr	r3, [r3, #0]
 8038640:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8038642:	68bb      	ldr	r3, [r7, #8]
 8038644:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8038648:	d103      	bne.n	8038652 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 803864a:	687b      	ldr	r3, [r7, #4]
 803864c:	691b      	ldr	r3, [r3, #16]
 803864e:	60fb      	str	r3, [r7, #12]
 8038650:	e00c      	b.n	803866c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8038652:	687b      	ldr	r3, [r7, #4]
 8038654:	3308      	adds	r3, #8
 8038656:	60fb      	str	r3, [r7, #12]
 8038658:	e002      	b.n	8038660 <vListInsert+0x2e>
 803865a:	68fb      	ldr	r3, [r7, #12]
 803865c:	685b      	ldr	r3, [r3, #4]
 803865e:	60fb      	str	r3, [r7, #12]
 8038660:	68fb      	ldr	r3, [r7, #12]
 8038662:	685b      	ldr	r3, [r3, #4]
 8038664:	681b      	ldr	r3, [r3, #0]
 8038666:	68ba      	ldr	r2, [r7, #8]
 8038668:	429a      	cmp	r2, r3
 803866a:	d2f6      	bcs.n	803865a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 803866c:	68fb      	ldr	r3, [r7, #12]
 803866e:	685a      	ldr	r2, [r3, #4]
 8038670:	683b      	ldr	r3, [r7, #0]
 8038672:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8038674:	683b      	ldr	r3, [r7, #0]
 8038676:	685b      	ldr	r3, [r3, #4]
 8038678:	683a      	ldr	r2, [r7, #0]
 803867a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 803867c:	683b      	ldr	r3, [r7, #0]
 803867e:	68fa      	ldr	r2, [r7, #12]
 8038680:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8038682:	68fb      	ldr	r3, [r7, #12]
 8038684:	683a      	ldr	r2, [r7, #0]
 8038686:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8038688:	683b      	ldr	r3, [r7, #0]
 803868a:	687a      	ldr	r2, [r7, #4]
 803868c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 803868e:	687b      	ldr	r3, [r7, #4]
 8038690:	681b      	ldr	r3, [r3, #0]
 8038692:	1c5a      	adds	r2, r3, #1
 8038694:	687b      	ldr	r3, [r7, #4]
 8038696:	601a      	str	r2, [r3, #0]
}
 8038698:	bf00      	nop
 803869a:	3714      	adds	r7, #20
 803869c:	46bd      	mov	sp, r7
 803869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80386a2:	4770      	bx	lr

080386a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80386a4:	b480      	push	{r7}
 80386a6:	b085      	sub	sp, #20
 80386a8:	af00      	add	r7, sp, #0
 80386aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80386ac:	687b      	ldr	r3, [r7, #4]
 80386ae:	691b      	ldr	r3, [r3, #16]
 80386b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80386b2:	687b      	ldr	r3, [r7, #4]
 80386b4:	685b      	ldr	r3, [r3, #4]
 80386b6:	687a      	ldr	r2, [r7, #4]
 80386b8:	6892      	ldr	r2, [r2, #8]
 80386ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80386bc:	687b      	ldr	r3, [r7, #4]
 80386be:	689b      	ldr	r3, [r3, #8]
 80386c0:	687a      	ldr	r2, [r7, #4]
 80386c2:	6852      	ldr	r2, [r2, #4]
 80386c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80386c6:	68fb      	ldr	r3, [r7, #12]
 80386c8:	685b      	ldr	r3, [r3, #4]
 80386ca:	687a      	ldr	r2, [r7, #4]
 80386cc:	429a      	cmp	r2, r3
 80386ce:	d103      	bne.n	80386d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80386d0:	687b      	ldr	r3, [r7, #4]
 80386d2:	689a      	ldr	r2, [r3, #8]
 80386d4:	68fb      	ldr	r3, [r7, #12]
 80386d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80386d8:	687b      	ldr	r3, [r7, #4]
 80386da:	2200      	movs	r2, #0
 80386dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80386de:	68fb      	ldr	r3, [r7, #12]
 80386e0:	681b      	ldr	r3, [r3, #0]
 80386e2:	1e5a      	subs	r2, r3, #1
 80386e4:	68fb      	ldr	r3, [r7, #12]
 80386e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80386e8:	68fb      	ldr	r3, [r7, #12]
 80386ea:	681b      	ldr	r3, [r3, #0]
}
 80386ec:	4618      	mov	r0, r3
 80386ee:	3714      	adds	r7, #20
 80386f0:	46bd      	mov	sp, r7
 80386f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80386f6:	4770      	bx	lr

080386f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80386f8:	b580      	push	{r7, lr}
 80386fa:	b084      	sub	sp, #16
 80386fc:	af00      	add	r7, sp, #0
 80386fe:	6078      	str	r0, [r7, #4]
 8038700:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8038702:	687b      	ldr	r3, [r7, #4]
 8038704:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8038706:	68fb      	ldr	r3, [r7, #12]
 8038708:	2b00      	cmp	r3, #0
 803870a:	d109      	bne.n	8038720 <xQueueGenericReset+0x28>
 803870c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038710:	f383 8811 	msr	BASEPRI, r3
 8038714:	f3bf 8f6f 	isb	sy
 8038718:	f3bf 8f4f 	dsb	sy
 803871c:	60bb      	str	r3, [r7, #8]
 803871e:	e7fe      	b.n	803871e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8038720:	f002 ff0c 	bl	803b53c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8038724:	68fb      	ldr	r3, [r7, #12]
 8038726:	681a      	ldr	r2, [r3, #0]
 8038728:	68fb      	ldr	r3, [r7, #12]
 803872a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803872c:	68f9      	ldr	r1, [r7, #12]
 803872e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8038730:	fb01 f303 	mul.w	r3, r1, r3
 8038734:	441a      	add	r2, r3
 8038736:	68fb      	ldr	r3, [r7, #12]
 8038738:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 803873a:	68fb      	ldr	r3, [r7, #12]
 803873c:	2200      	movs	r2, #0
 803873e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8038740:	68fb      	ldr	r3, [r7, #12]
 8038742:	681a      	ldr	r2, [r3, #0]
 8038744:	68fb      	ldr	r3, [r7, #12]
 8038746:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8038748:	68fb      	ldr	r3, [r7, #12]
 803874a:	681a      	ldr	r2, [r3, #0]
 803874c:	68fb      	ldr	r3, [r7, #12]
 803874e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8038750:	3b01      	subs	r3, #1
 8038752:	68f9      	ldr	r1, [r7, #12]
 8038754:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8038756:	fb01 f303 	mul.w	r3, r1, r3
 803875a:	441a      	add	r2, r3
 803875c:	68fb      	ldr	r3, [r7, #12]
 803875e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8038760:	68fb      	ldr	r3, [r7, #12]
 8038762:	22ff      	movs	r2, #255	; 0xff
 8038764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8038768:	68fb      	ldr	r3, [r7, #12]
 803876a:	22ff      	movs	r2, #255	; 0xff
 803876c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8038770:	683b      	ldr	r3, [r7, #0]
 8038772:	2b00      	cmp	r3, #0
 8038774:	d114      	bne.n	80387a0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8038776:	68fb      	ldr	r3, [r7, #12]
 8038778:	691b      	ldr	r3, [r3, #16]
 803877a:	2b00      	cmp	r3, #0
 803877c:	d01a      	beq.n	80387b4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 803877e:	68fb      	ldr	r3, [r7, #12]
 8038780:	3310      	adds	r3, #16
 8038782:	4618      	mov	r0, r3
 8038784:	f001 fc3c 	bl	803a000 <xTaskRemoveFromEventList>
 8038788:	4603      	mov	r3, r0
 803878a:	2b00      	cmp	r3, #0
 803878c:	d012      	beq.n	80387b4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 803878e:	4b0d      	ldr	r3, [pc, #52]	; (80387c4 <xQueueGenericReset+0xcc>)
 8038790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8038794:	601a      	str	r2, [r3, #0]
 8038796:	f3bf 8f4f 	dsb	sy
 803879a:	f3bf 8f6f 	isb	sy
 803879e:	e009      	b.n	80387b4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80387a0:	68fb      	ldr	r3, [r7, #12]
 80387a2:	3310      	adds	r3, #16
 80387a4:	4618      	mov	r0, r3
 80387a6:	f7ff fef3 	bl	8038590 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80387aa:	68fb      	ldr	r3, [r7, #12]
 80387ac:	3324      	adds	r3, #36	; 0x24
 80387ae:	4618      	mov	r0, r3
 80387b0:	f7ff feee 	bl	8038590 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80387b4:	f002 fef0 	bl	803b598 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80387b8:	2301      	movs	r3, #1
}
 80387ba:	4618      	mov	r0, r3
 80387bc:	3710      	adds	r7, #16
 80387be:	46bd      	mov	sp, r7
 80387c0:	bd80      	pop	{r7, pc}
 80387c2:	bf00      	nop
 80387c4:	e000ed04 	.word	0xe000ed04

080387c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80387c8:	b580      	push	{r7, lr}
 80387ca:	b08e      	sub	sp, #56	; 0x38
 80387cc:	af02      	add	r7, sp, #8
 80387ce:	60f8      	str	r0, [r7, #12]
 80387d0:	60b9      	str	r1, [r7, #8]
 80387d2:	607a      	str	r2, [r7, #4]
 80387d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80387d6:	68fb      	ldr	r3, [r7, #12]
 80387d8:	2b00      	cmp	r3, #0
 80387da:	d109      	bne.n	80387f0 <xQueueGenericCreateStatic+0x28>
 80387dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80387e0:	f383 8811 	msr	BASEPRI, r3
 80387e4:	f3bf 8f6f 	isb	sy
 80387e8:	f3bf 8f4f 	dsb	sy
 80387ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80387ee:	e7fe      	b.n	80387ee <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80387f0:	683b      	ldr	r3, [r7, #0]
 80387f2:	2b00      	cmp	r3, #0
 80387f4:	d109      	bne.n	803880a <xQueueGenericCreateStatic+0x42>
 80387f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80387fa:	f383 8811 	msr	BASEPRI, r3
 80387fe:	f3bf 8f6f 	isb	sy
 8038802:	f3bf 8f4f 	dsb	sy
 8038806:	627b      	str	r3, [r7, #36]	; 0x24
 8038808:	e7fe      	b.n	8038808 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 803880a:	687b      	ldr	r3, [r7, #4]
 803880c:	2b00      	cmp	r3, #0
 803880e:	d002      	beq.n	8038816 <xQueueGenericCreateStatic+0x4e>
 8038810:	68bb      	ldr	r3, [r7, #8]
 8038812:	2b00      	cmp	r3, #0
 8038814:	d001      	beq.n	803881a <xQueueGenericCreateStatic+0x52>
 8038816:	2301      	movs	r3, #1
 8038818:	e000      	b.n	803881c <xQueueGenericCreateStatic+0x54>
 803881a:	2300      	movs	r3, #0
 803881c:	2b00      	cmp	r3, #0
 803881e:	d109      	bne.n	8038834 <xQueueGenericCreateStatic+0x6c>
 8038820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038824:	f383 8811 	msr	BASEPRI, r3
 8038828:	f3bf 8f6f 	isb	sy
 803882c:	f3bf 8f4f 	dsb	sy
 8038830:	623b      	str	r3, [r7, #32]
 8038832:	e7fe      	b.n	8038832 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8038834:	687b      	ldr	r3, [r7, #4]
 8038836:	2b00      	cmp	r3, #0
 8038838:	d102      	bne.n	8038840 <xQueueGenericCreateStatic+0x78>
 803883a:	68bb      	ldr	r3, [r7, #8]
 803883c:	2b00      	cmp	r3, #0
 803883e:	d101      	bne.n	8038844 <xQueueGenericCreateStatic+0x7c>
 8038840:	2301      	movs	r3, #1
 8038842:	e000      	b.n	8038846 <xQueueGenericCreateStatic+0x7e>
 8038844:	2300      	movs	r3, #0
 8038846:	2b00      	cmp	r3, #0
 8038848:	d109      	bne.n	803885e <xQueueGenericCreateStatic+0x96>
 803884a:	f04f 0350 	mov.w	r3, #80	; 0x50
 803884e:	f383 8811 	msr	BASEPRI, r3
 8038852:	f3bf 8f6f 	isb	sy
 8038856:	f3bf 8f4f 	dsb	sy
 803885a:	61fb      	str	r3, [r7, #28]
 803885c:	e7fe      	b.n	803885c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 803885e:	2350      	movs	r3, #80	; 0x50
 8038860:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8038862:	697b      	ldr	r3, [r7, #20]
 8038864:	2b50      	cmp	r3, #80	; 0x50
 8038866:	d009      	beq.n	803887c <xQueueGenericCreateStatic+0xb4>
 8038868:	f04f 0350 	mov.w	r3, #80	; 0x50
 803886c:	f383 8811 	msr	BASEPRI, r3
 8038870:	f3bf 8f6f 	isb	sy
 8038874:	f3bf 8f4f 	dsb	sy
 8038878:	61bb      	str	r3, [r7, #24]
 803887a:	e7fe      	b.n	803887a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 803887c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 803887e:	683b      	ldr	r3, [r7, #0]
 8038880:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8038882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8038884:	2b00      	cmp	r3, #0
 8038886:	d00d      	beq.n	80388a4 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8038888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803888a:	2201      	movs	r2, #1
 803888c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8038890:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8038894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8038896:	9300      	str	r3, [sp, #0]
 8038898:	4613      	mov	r3, r2
 803889a:	687a      	ldr	r2, [r7, #4]
 803889c:	68b9      	ldr	r1, [r7, #8]
 803889e:	68f8      	ldr	r0, [r7, #12]
 80388a0:	f000 f844 	bl	803892c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80388a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80388a6:	4618      	mov	r0, r3
 80388a8:	3730      	adds	r7, #48	; 0x30
 80388aa:	46bd      	mov	sp, r7
 80388ac:	bd80      	pop	{r7, pc}

080388ae <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80388ae:	b580      	push	{r7, lr}
 80388b0:	b08a      	sub	sp, #40	; 0x28
 80388b2:	af02      	add	r7, sp, #8
 80388b4:	60f8      	str	r0, [r7, #12]
 80388b6:	60b9      	str	r1, [r7, #8]
 80388b8:	4613      	mov	r3, r2
 80388ba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80388bc:	68fb      	ldr	r3, [r7, #12]
 80388be:	2b00      	cmp	r3, #0
 80388c0:	d109      	bne.n	80388d6 <xQueueGenericCreate+0x28>
 80388c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80388c6:	f383 8811 	msr	BASEPRI, r3
 80388ca:	f3bf 8f6f 	isb	sy
 80388ce:	f3bf 8f4f 	dsb	sy
 80388d2:	613b      	str	r3, [r7, #16]
 80388d4:	e7fe      	b.n	80388d4 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80388d6:	68bb      	ldr	r3, [r7, #8]
 80388d8:	2b00      	cmp	r3, #0
 80388da:	d102      	bne.n	80388e2 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80388dc:	2300      	movs	r3, #0
 80388de:	61fb      	str	r3, [r7, #28]
 80388e0:	e004      	b.n	80388ec <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80388e2:	68fb      	ldr	r3, [r7, #12]
 80388e4:	68ba      	ldr	r2, [r7, #8]
 80388e6:	fb02 f303 	mul.w	r3, r2, r3
 80388ea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80388ec:	69fb      	ldr	r3, [r7, #28]
 80388ee:	3350      	adds	r3, #80	; 0x50
 80388f0:	4618      	mov	r0, r3
 80388f2:	f002 ff3d 	bl	803b770 <pvPortMalloc>
 80388f6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80388f8:	69bb      	ldr	r3, [r7, #24]
 80388fa:	2b00      	cmp	r3, #0
 80388fc:	d011      	beq.n	8038922 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80388fe:	69bb      	ldr	r3, [r7, #24]
 8038900:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8038902:	697b      	ldr	r3, [r7, #20]
 8038904:	3350      	adds	r3, #80	; 0x50
 8038906:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8038908:	69bb      	ldr	r3, [r7, #24]
 803890a:	2200      	movs	r2, #0
 803890c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8038910:	79fa      	ldrb	r2, [r7, #7]
 8038912:	69bb      	ldr	r3, [r7, #24]
 8038914:	9300      	str	r3, [sp, #0]
 8038916:	4613      	mov	r3, r2
 8038918:	697a      	ldr	r2, [r7, #20]
 803891a:	68b9      	ldr	r1, [r7, #8]
 803891c:	68f8      	ldr	r0, [r7, #12]
 803891e:	f000 f805 	bl	803892c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8038922:	69bb      	ldr	r3, [r7, #24]
	}
 8038924:	4618      	mov	r0, r3
 8038926:	3720      	adds	r7, #32
 8038928:	46bd      	mov	sp, r7
 803892a:	bd80      	pop	{r7, pc}

0803892c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 803892c:	b580      	push	{r7, lr}
 803892e:	b084      	sub	sp, #16
 8038930:	af00      	add	r7, sp, #0
 8038932:	60f8      	str	r0, [r7, #12]
 8038934:	60b9      	str	r1, [r7, #8]
 8038936:	607a      	str	r2, [r7, #4]
 8038938:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 803893a:	68bb      	ldr	r3, [r7, #8]
 803893c:	2b00      	cmp	r3, #0
 803893e:	d103      	bne.n	8038948 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8038940:	69bb      	ldr	r3, [r7, #24]
 8038942:	69ba      	ldr	r2, [r7, #24]
 8038944:	601a      	str	r2, [r3, #0]
 8038946:	e002      	b.n	803894e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8038948:	69bb      	ldr	r3, [r7, #24]
 803894a:	687a      	ldr	r2, [r7, #4]
 803894c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 803894e:	69bb      	ldr	r3, [r7, #24]
 8038950:	68fa      	ldr	r2, [r7, #12]
 8038952:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8038954:	69bb      	ldr	r3, [r7, #24]
 8038956:	68ba      	ldr	r2, [r7, #8]
 8038958:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 803895a:	2101      	movs	r1, #1
 803895c:	69b8      	ldr	r0, [r7, #24]
 803895e:	f7ff fecb 	bl	80386f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8038962:	69bb      	ldr	r3, [r7, #24]
 8038964:	78fa      	ldrb	r2, [r7, #3]
 8038966:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 803896a:	bf00      	nop
 803896c:	3710      	adds	r7, #16
 803896e:	46bd      	mov	sp, r7
 8038970:	bd80      	pop	{r7, pc}

08038972 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8038972:	b580      	push	{r7, lr}
 8038974:	b082      	sub	sp, #8
 8038976:	af00      	add	r7, sp, #0
 8038978:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 803897a:	687b      	ldr	r3, [r7, #4]
 803897c:	2b00      	cmp	r3, #0
 803897e:	d00e      	beq.n	803899e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8038980:	687b      	ldr	r3, [r7, #4]
 8038982:	2200      	movs	r2, #0
 8038984:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8038986:	687b      	ldr	r3, [r7, #4]
 8038988:	2200      	movs	r2, #0
 803898a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 803898c:	687b      	ldr	r3, [r7, #4]
 803898e:	2200      	movs	r2, #0
 8038990:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8038992:	2300      	movs	r3, #0
 8038994:	2200      	movs	r2, #0
 8038996:	2100      	movs	r1, #0
 8038998:	6878      	ldr	r0, [r7, #4]
 803899a:	f000 f89f 	bl	8038adc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 803899e:	bf00      	nop
 80389a0:	3708      	adds	r7, #8
 80389a2:	46bd      	mov	sp, r7
 80389a4:	bd80      	pop	{r7, pc}

080389a6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80389a6:	b580      	push	{r7, lr}
 80389a8:	b086      	sub	sp, #24
 80389aa:	af00      	add	r7, sp, #0
 80389ac:	4603      	mov	r3, r0
 80389ae:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80389b0:	2301      	movs	r3, #1
 80389b2:	617b      	str	r3, [r7, #20]
 80389b4:	2300      	movs	r3, #0
 80389b6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80389b8:	79fb      	ldrb	r3, [r7, #7]
 80389ba:	461a      	mov	r2, r3
 80389bc:	6939      	ldr	r1, [r7, #16]
 80389be:	6978      	ldr	r0, [r7, #20]
 80389c0:	f7ff ff75 	bl	80388ae <xQueueGenericCreate>
 80389c4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80389c6:	68f8      	ldr	r0, [r7, #12]
 80389c8:	f7ff ffd3 	bl	8038972 <prvInitialiseMutex>

		return xNewQueue;
 80389cc:	68fb      	ldr	r3, [r7, #12]
	}
 80389ce:	4618      	mov	r0, r3
 80389d0:	3718      	adds	r7, #24
 80389d2:	46bd      	mov	sp, r7
 80389d4:	bd80      	pop	{r7, pc}

080389d6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80389d6:	b580      	push	{r7, lr}
 80389d8:	b088      	sub	sp, #32
 80389da:	af02      	add	r7, sp, #8
 80389dc:	4603      	mov	r3, r0
 80389de:	6039      	str	r1, [r7, #0]
 80389e0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80389e2:	2301      	movs	r3, #1
 80389e4:	617b      	str	r3, [r7, #20]
 80389e6:	2300      	movs	r3, #0
 80389e8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80389ea:	79fb      	ldrb	r3, [r7, #7]
 80389ec:	9300      	str	r3, [sp, #0]
 80389ee:	683b      	ldr	r3, [r7, #0]
 80389f0:	2200      	movs	r2, #0
 80389f2:	6939      	ldr	r1, [r7, #16]
 80389f4:	6978      	ldr	r0, [r7, #20]
 80389f6:	f7ff fee7 	bl	80387c8 <xQueueGenericCreateStatic>
 80389fa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80389fc:	68f8      	ldr	r0, [r7, #12]
 80389fe:	f7ff ffb8 	bl	8038972 <prvInitialiseMutex>

		return xNewQueue;
 8038a02:	68fb      	ldr	r3, [r7, #12]
	}
 8038a04:	4618      	mov	r0, r3
 8038a06:	3718      	adds	r7, #24
 8038a08:	46bd      	mov	sp, r7
 8038a0a:	bd80      	pop	{r7, pc}

08038a0c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8038a0c:	b590      	push	{r4, r7, lr}
 8038a0e:	b087      	sub	sp, #28
 8038a10:	af00      	add	r7, sp, #0
 8038a12:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8038a14:	687b      	ldr	r3, [r7, #4]
 8038a16:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8038a18:	693b      	ldr	r3, [r7, #16]
 8038a1a:	2b00      	cmp	r3, #0
 8038a1c:	d109      	bne.n	8038a32 <xQueueGiveMutexRecursive+0x26>
 8038a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038a22:	f383 8811 	msr	BASEPRI, r3
 8038a26:	f3bf 8f6f 	isb	sy
 8038a2a:	f3bf 8f4f 	dsb	sy
 8038a2e:	60fb      	str	r3, [r7, #12]
 8038a30:	e7fe      	b.n	8038a30 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8038a32:	693b      	ldr	r3, [r7, #16]
 8038a34:	689c      	ldr	r4, [r3, #8]
 8038a36:	f001 fd09 	bl	803a44c <xTaskGetCurrentTaskHandle>
 8038a3a:	4603      	mov	r3, r0
 8038a3c:	429c      	cmp	r4, r3
 8038a3e:	d111      	bne.n	8038a64 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8038a40:	693b      	ldr	r3, [r7, #16]
 8038a42:	68db      	ldr	r3, [r3, #12]
 8038a44:	1e5a      	subs	r2, r3, #1
 8038a46:	693b      	ldr	r3, [r7, #16]
 8038a48:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8038a4a:	693b      	ldr	r3, [r7, #16]
 8038a4c:	68db      	ldr	r3, [r3, #12]
 8038a4e:	2b00      	cmp	r3, #0
 8038a50:	d105      	bne.n	8038a5e <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8038a52:	2300      	movs	r3, #0
 8038a54:	2200      	movs	r2, #0
 8038a56:	2100      	movs	r1, #0
 8038a58:	6938      	ldr	r0, [r7, #16]
 8038a5a:	f000 f83f 	bl	8038adc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8038a5e:	2301      	movs	r3, #1
 8038a60:	617b      	str	r3, [r7, #20]
 8038a62:	e001      	b.n	8038a68 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8038a64:	2300      	movs	r3, #0
 8038a66:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8038a68:	697b      	ldr	r3, [r7, #20]
	}
 8038a6a:	4618      	mov	r0, r3
 8038a6c:	371c      	adds	r7, #28
 8038a6e:	46bd      	mov	sp, r7
 8038a70:	bd90      	pop	{r4, r7, pc}

08038a72 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8038a72:	b590      	push	{r4, r7, lr}
 8038a74:	b087      	sub	sp, #28
 8038a76:	af00      	add	r7, sp, #0
 8038a78:	6078      	str	r0, [r7, #4]
 8038a7a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8038a7c:	687b      	ldr	r3, [r7, #4]
 8038a7e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8038a80:	693b      	ldr	r3, [r7, #16]
 8038a82:	2b00      	cmp	r3, #0
 8038a84:	d109      	bne.n	8038a9a <xQueueTakeMutexRecursive+0x28>
 8038a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038a8a:	f383 8811 	msr	BASEPRI, r3
 8038a8e:	f3bf 8f6f 	isb	sy
 8038a92:	f3bf 8f4f 	dsb	sy
 8038a96:	60fb      	str	r3, [r7, #12]
 8038a98:	e7fe      	b.n	8038a98 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8038a9a:	693b      	ldr	r3, [r7, #16]
 8038a9c:	689c      	ldr	r4, [r3, #8]
 8038a9e:	f001 fcd5 	bl	803a44c <xTaskGetCurrentTaskHandle>
 8038aa2:	4603      	mov	r3, r0
 8038aa4:	429c      	cmp	r4, r3
 8038aa6:	d107      	bne.n	8038ab8 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8038aa8:	693b      	ldr	r3, [r7, #16]
 8038aaa:	68db      	ldr	r3, [r3, #12]
 8038aac:	1c5a      	adds	r2, r3, #1
 8038aae:	693b      	ldr	r3, [r7, #16]
 8038ab0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8038ab2:	2301      	movs	r3, #1
 8038ab4:	617b      	str	r3, [r7, #20]
 8038ab6:	e00c      	b.n	8038ad2 <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8038ab8:	6839      	ldr	r1, [r7, #0]
 8038aba:	6938      	ldr	r0, [r7, #16]
 8038abc:	f000 fa78 	bl	8038fb0 <xQueueSemaphoreTake>
 8038ac0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8038ac2:	697b      	ldr	r3, [r7, #20]
 8038ac4:	2b00      	cmp	r3, #0
 8038ac6:	d004      	beq.n	8038ad2 <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8038ac8:	693b      	ldr	r3, [r7, #16]
 8038aca:	68db      	ldr	r3, [r3, #12]
 8038acc:	1c5a      	adds	r2, r3, #1
 8038ace:	693b      	ldr	r3, [r7, #16]
 8038ad0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8038ad2:	697b      	ldr	r3, [r7, #20]
	}
 8038ad4:	4618      	mov	r0, r3
 8038ad6:	371c      	adds	r7, #28
 8038ad8:	46bd      	mov	sp, r7
 8038ada:	bd90      	pop	{r4, r7, pc}

08038adc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8038adc:	b580      	push	{r7, lr}
 8038ade:	b08e      	sub	sp, #56	; 0x38
 8038ae0:	af00      	add	r7, sp, #0
 8038ae2:	60f8      	str	r0, [r7, #12]
 8038ae4:	60b9      	str	r1, [r7, #8]
 8038ae6:	607a      	str	r2, [r7, #4]
 8038ae8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8038aea:	2300      	movs	r3, #0
 8038aec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8038aee:	68fb      	ldr	r3, [r7, #12]
 8038af0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8038af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038af4:	2b00      	cmp	r3, #0
 8038af6:	d109      	bne.n	8038b0c <xQueueGenericSend+0x30>
 8038af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038afc:	f383 8811 	msr	BASEPRI, r3
 8038b00:	f3bf 8f6f 	isb	sy
 8038b04:	f3bf 8f4f 	dsb	sy
 8038b08:	62bb      	str	r3, [r7, #40]	; 0x28
 8038b0a:	e7fe      	b.n	8038b0a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8038b0c:	68bb      	ldr	r3, [r7, #8]
 8038b0e:	2b00      	cmp	r3, #0
 8038b10:	d103      	bne.n	8038b1a <xQueueGenericSend+0x3e>
 8038b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8038b16:	2b00      	cmp	r3, #0
 8038b18:	d101      	bne.n	8038b1e <xQueueGenericSend+0x42>
 8038b1a:	2301      	movs	r3, #1
 8038b1c:	e000      	b.n	8038b20 <xQueueGenericSend+0x44>
 8038b1e:	2300      	movs	r3, #0
 8038b20:	2b00      	cmp	r3, #0
 8038b22:	d109      	bne.n	8038b38 <xQueueGenericSend+0x5c>
 8038b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038b28:	f383 8811 	msr	BASEPRI, r3
 8038b2c:	f3bf 8f6f 	isb	sy
 8038b30:	f3bf 8f4f 	dsb	sy
 8038b34:	627b      	str	r3, [r7, #36]	; 0x24
 8038b36:	e7fe      	b.n	8038b36 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8038b38:	683b      	ldr	r3, [r7, #0]
 8038b3a:	2b02      	cmp	r3, #2
 8038b3c:	d103      	bne.n	8038b46 <xQueueGenericSend+0x6a>
 8038b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8038b42:	2b01      	cmp	r3, #1
 8038b44:	d101      	bne.n	8038b4a <xQueueGenericSend+0x6e>
 8038b46:	2301      	movs	r3, #1
 8038b48:	e000      	b.n	8038b4c <xQueueGenericSend+0x70>
 8038b4a:	2300      	movs	r3, #0
 8038b4c:	2b00      	cmp	r3, #0
 8038b4e:	d109      	bne.n	8038b64 <xQueueGenericSend+0x88>
 8038b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038b54:	f383 8811 	msr	BASEPRI, r3
 8038b58:	f3bf 8f6f 	isb	sy
 8038b5c:	f3bf 8f4f 	dsb	sy
 8038b60:	623b      	str	r3, [r7, #32]
 8038b62:	e7fe      	b.n	8038b62 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8038b64:	f001 fc82 	bl	803a46c <xTaskGetSchedulerState>
 8038b68:	4603      	mov	r3, r0
 8038b6a:	2b00      	cmp	r3, #0
 8038b6c:	d102      	bne.n	8038b74 <xQueueGenericSend+0x98>
 8038b6e:	687b      	ldr	r3, [r7, #4]
 8038b70:	2b00      	cmp	r3, #0
 8038b72:	d101      	bne.n	8038b78 <xQueueGenericSend+0x9c>
 8038b74:	2301      	movs	r3, #1
 8038b76:	e000      	b.n	8038b7a <xQueueGenericSend+0x9e>
 8038b78:	2300      	movs	r3, #0
 8038b7a:	2b00      	cmp	r3, #0
 8038b7c:	d109      	bne.n	8038b92 <xQueueGenericSend+0xb6>
 8038b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038b82:	f383 8811 	msr	BASEPRI, r3
 8038b86:	f3bf 8f6f 	isb	sy
 8038b8a:	f3bf 8f4f 	dsb	sy
 8038b8e:	61fb      	str	r3, [r7, #28]
 8038b90:	e7fe      	b.n	8038b90 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8038b92:	f002 fcd3 	bl	803b53c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8038b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038b98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8038b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8038b9e:	429a      	cmp	r2, r3
 8038ba0:	d302      	bcc.n	8038ba8 <xQueueGenericSend+0xcc>
 8038ba2:	683b      	ldr	r3, [r7, #0]
 8038ba4:	2b02      	cmp	r3, #2
 8038ba6:	d129      	bne.n	8038bfc <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8038ba8:	683a      	ldr	r2, [r7, #0]
 8038baa:	68b9      	ldr	r1, [r7, #8]
 8038bac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8038bae:	f000 fb9c 	bl	80392ea <prvCopyDataToQueue>
 8038bb2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8038bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8038bb8:	2b00      	cmp	r3, #0
 8038bba:	d010      	beq.n	8038bde <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8038bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038bbe:	3324      	adds	r3, #36	; 0x24
 8038bc0:	4618      	mov	r0, r3
 8038bc2:	f001 fa1d 	bl	803a000 <xTaskRemoveFromEventList>
 8038bc6:	4603      	mov	r3, r0
 8038bc8:	2b00      	cmp	r3, #0
 8038bca:	d013      	beq.n	8038bf4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8038bcc:	4b3f      	ldr	r3, [pc, #252]	; (8038ccc <xQueueGenericSend+0x1f0>)
 8038bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8038bd2:	601a      	str	r2, [r3, #0]
 8038bd4:	f3bf 8f4f 	dsb	sy
 8038bd8:	f3bf 8f6f 	isb	sy
 8038bdc:	e00a      	b.n	8038bf4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8038bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8038be0:	2b00      	cmp	r3, #0
 8038be2:	d007      	beq.n	8038bf4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8038be4:	4b39      	ldr	r3, [pc, #228]	; (8038ccc <xQueueGenericSend+0x1f0>)
 8038be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8038bea:	601a      	str	r2, [r3, #0]
 8038bec:	f3bf 8f4f 	dsb	sy
 8038bf0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8038bf4:	f002 fcd0 	bl	803b598 <vPortExitCritical>
				return pdPASS;
 8038bf8:	2301      	movs	r3, #1
 8038bfa:	e063      	b.n	8038cc4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8038bfc:	687b      	ldr	r3, [r7, #4]
 8038bfe:	2b00      	cmp	r3, #0
 8038c00:	d103      	bne.n	8038c0a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8038c02:	f002 fcc9 	bl	803b598 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8038c06:	2300      	movs	r3, #0
 8038c08:	e05c      	b.n	8038cc4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8038c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8038c0c:	2b00      	cmp	r3, #0
 8038c0e:	d106      	bne.n	8038c1e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8038c10:	f107 0314 	add.w	r3, r7, #20
 8038c14:	4618      	mov	r0, r3
 8038c16:	f001 fab5 	bl	803a184 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8038c1a:	2301      	movs	r3, #1
 8038c1c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8038c1e:	f002 fcbb 	bl	803b598 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8038c22:	f000 ff85 	bl	8039b30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8038c26:	f002 fc89 	bl	803b53c <vPortEnterCritical>
 8038c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038c2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8038c30:	b25b      	sxtb	r3, r3
 8038c32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8038c36:	d103      	bne.n	8038c40 <xQueueGenericSend+0x164>
 8038c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038c3a:	2200      	movs	r2, #0
 8038c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8038c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038c42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8038c46:	b25b      	sxtb	r3, r3
 8038c48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8038c4c:	d103      	bne.n	8038c56 <xQueueGenericSend+0x17a>
 8038c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038c50:	2200      	movs	r2, #0
 8038c52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8038c56:	f002 fc9f 	bl	803b598 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8038c5a:	1d3a      	adds	r2, r7, #4
 8038c5c:	f107 0314 	add.w	r3, r7, #20
 8038c60:	4611      	mov	r1, r2
 8038c62:	4618      	mov	r0, r3
 8038c64:	f001 faa4 	bl	803a1b0 <xTaskCheckForTimeOut>
 8038c68:	4603      	mov	r3, r0
 8038c6a:	2b00      	cmp	r3, #0
 8038c6c:	d124      	bne.n	8038cb8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8038c6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8038c70:	f000 fc33 	bl	80394da <prvIsQueueFull>
 8038c74:	4603      	mov	r3, r0
 8038c76:	2b00      	cmp	r3, #0
 8038c78:	d018      	beq.n	8038cac <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8038c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038c7c:	3310      	adds	r3, #16
 8038c7e:	687a      	ldr	r2, [r7, #4]
 8038c80:	4611      	mov	r1, r2
 8038c82:	4618      	mov	r0, r3
 8038c84:	f001 f934 	bl	8039ef0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8038c88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8038c8a:	f000 fbbe 	bl	803940a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8038c8e:	f000 ff5d 	bl	8039b4c <xTaskResumeAll>
 8038c92:	4603      	mov	r3, r0
 8038c94:	2b00      	cmp	r3, #0
 8038c96:	f47f af7c 	bne.w	8038b92 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8038c9a:	4b0c      	ldr	r3, [pc, #48]	; (8038ccc <xQueueGenericSend+0x1f0>)
 8038c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8038ca0:	601a      	str	r2, [r3, #0]
 8038ca2:	f3bf 8f4f 	dsb	sy
 8038ca6:	f3bf 8f6f 	isb	sy
 8038caa:	e772      	b.n	8038b92 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8038cac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8038cae:	f000 fbac 	bl	803940a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8038cb2:	f000 ff4b 	bl	8039b4c <xTaskResumeAll>
 8038cb6:	e76c      	b.n	8038b92 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8038cb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8038cba:	f000 fba6 	bl	803940a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8038cbe:	f000 ff45 	bl	8039b4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8038cc2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8038cc4:	4618      	mov	r0, r3
 8038cc6:	3738      	adds	r7, #56	; 0x38
 8038cc8:	46bd      	mov	sp, r7
 8038cca:	bd80      	pop	{r7, pc}
 8038ccc:	e000ed04 	.word	0xe000ed04

08038cd0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8038cd0:	b580      	push	{r7, lr}
 8038cd2:	b08e      	sub	sp, #56	; 0x38
 8038cd4:	af00      	add	r7, sp, #0
 8038cd6:	60f8      	str	r0, [r7, #12]
 8038cd8:	60b9      	str	r1, [r7, #8]
 8038cda:	607a      	str	r2, [r7, #4]
 8038cdc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8038cde:	68fb      	ldr	r3, [r7, #12]
 8038ce0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8038ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038ce4:	2b00      	cmp	r3, #0
 8038ce6:	d109      	bne.n	8038cfc <xQueueGenericSendFromISR+0x2c>
 8038ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038cec:	f383 8811 	msr	BASEPRI, r3
 8038cf0:	f3bf 8f6f 	isb	sy
 8038cf4:	f3bf 8f4f 	dsb	sy
 8038cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8038cfa:	e7fe      	b.n	8038cfa <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8038cfc:	68bb      	ldr	r3, [r7, #8]
 8038cfe:	2b00      	cmp	r3, #0
 8038d00:	d103      	bne.n	8038d0a <xQueueGenericSendFromISR+0x3a>
 8038d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8038d06:	2b00      	cmp	r3, #0
 8038d08:	d101      	bne.n	8038d0e <xQueueGenericSendFromISR+0x3e>
 8038d0a:	2301      	movs	r3, #1
 8038d0c:	e000      	b.n	8038d10 <xQueueGenericSendFromISR+0x40>
 8038d0e:	2300      	movs	r3, #0
 8038d10:	2b00      	cmp	r3, #0
 8038d12:	d109      	bne.n	8038d28 <xQueueGenericSendFromISR+0x58>
 8038d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038d18:	f383 8811 	msr	BASEPRI, r3
 8038d1c:	f3bf 8f6f 	isb	sy
 8038d20:	f3bf 8f4f 	dsb	sy
 8038d24:	623b      	str	r3, [r7, #32]
 8038d26:	e7fe      	b.n	8038d26 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8038d28:	683b      	ldr	r3, [r7, #0]
 8038d2a:	2b02      	cmp	r3, #2
 8038d2c:	d103      	bne.n	8038d36 <xQueueGenericSendFromISR+0x66>
 8038d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8038d32:	2b01      	cmp	r3, #1
 8038d34:	d101      	bne.n	8038d3a <xQueueGenericSendFromISR+0x6a>
 8038d36:	2301      	movs	r3, #1
 8038d38:	e000      	b.n	8038d3c <xQueueGenericSendFromISR+0x6c>
 8038d3a:	2300      	movs	r3, #0
 8038d3c:	2b00      	cmp	r3, #0
 8038d3e:	d109      	bne.n	8038d54 <xQueueGenericSendFromISR+0x84>
 8038d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038d44:	f383 8811 	msr	BASEPRI, r3
 8038d48:	f3bf 8f6f 	isb	sy
 8038d4c:	f3bf 8f4f 	dsb	sy
 8038d50:	61fb      	str	r3, [r7, #28]
 8038d52:	e7fe      	b.n	8038d52 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8038d54:	f002 fcce 	bl	803b6f4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8038d58:	f3ef 8211 	mrs	r2, BASEPRI
 8038d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038d60:	f383 8811 	msr	BASEPRI, r3
 8038d64:	f3bf 8f6f 	isb	sy
 8038d68:	f3bf 8f4f 	dsb	sy
 8038d6c:	61ba      	str	r2, [r7, #24]
 8038d6e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8038d70:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8038d72:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8038d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038d76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8038d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8038d7c:	429a      	cmp	r2, r3
 8038d7e:	d302      	bcc.n	8038d86 <xQueueGenericSendFromISR+0xb6>
 8038d80:	683b      	ldr	r3, [r7, #0]
 8038d82:	2b02      	cmp	r3, #2
 8038d84:	d12c      	bne.n	8038de0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8038d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038d88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8038d8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8038d90:	683a      	ldr	r2, [r7, #0]
 8038d92:	68b9      	ldr	r1, [r7, #8]
 8038d94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8038d96:	f000 faa8 	bl	80392ea <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8038d9a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8038d9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8038da2:	d112      	bne.n	8038dca <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8038da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8038da8:	2b00      	cmp	r3, #0
 8038daa:	d016      	beq.n	8038dda <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8038dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038dae:	3324      	adds	r3, #36	; 0x24
 8038db0:	4618      	mov	r0, r3
 8038db2:	f001 f925 	bl	803a000 <xTaskRemoveFromEventList>
 8038db6:	4603      	mov	r3, r0
 8038db8:	2b00      	cmp	r3, #0
 8038dba:	d00e      	beq.n	8038dda <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8038dbc:	687b      	ldr	r3, [r7, #4]
 8038dbe:	2b00      	cmp	r3, #0
 8038dc0:	d00b      	beq.n	8038dda <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8038dc2:	687b      	ldr	r3, [r7, #4]
 8038dc4:	2201      	movs	r2, #1
 8038dc6:	601a      	str	r2, [r3, #0]
 8038dc8:	e007      	b.n	8038dda <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8038dca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8038dce:	3301      	adds	r3, #1
 8038dd0:	b2db      	uxtb	r3, r3
 8038dd2:	b25a      	sxtb	r2, r3
 8038dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038dd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8038dda:	2301      	movs	r3, #1
 8038ddc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8038dde:	e001      	b.n	8038de4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8038de0:	2300      	movs	r3, #0
 8038de2:	637b      	str	r3, [r7, #52]	; 0x34
 8038de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8038de6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8038de8:	693b      	ldr	r3, [r7, #16]
 8038dea:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8038dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8038df0:	4618      	mov	r0, r3
 8038df2:	3738      	adds	r7, #56	; 0x38
 8038df4:	46bd      	mov	sp, r7
 8038df6:	bd80      	pop	{r7, pc}

08038df8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8038df8:	b580      	push	{r7, lr}
 8038dfa:	b08c      	sub	sp, #48	; 0x30
 8038dfc:	af00      	add	r7, sp, #0
 8038dfe:	60f8      	str	r0, [r7, #12]
 8038e00:	60b9      	str	r1, [r7, #8]
 8038e02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8038e04:	2300      	movs	r3, #0
 8038e06:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8038e08:	68fb      	ldr	r3, [r7, #12]
 8038e0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8038e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038e0e:	2b00      	cmp	r3, #0
 8038e10:	d109      	bne.n	8038e26 <xQueueReceive+0x2e>
	__asm volatile
 8038e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038e16:	f383 8811 	msr	BASEPRI, r3
 8038e1a:	f3bf 8f6f 	isb	sy
 8038e1e:	f3bf 8f4f 	dsb	sy
 8038e22:	623b      	str	r3, [r7, #32]
 8038e24:	e7fe      	b.n	8038e24 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8038e26:	68bb      	ldr	r3, [r7, #8]
 8038e28:	2b00      	cmp	r3, #0
 8038e2a:	d103      	bne.n	8038e34 <xQueueReceive+0x3c>
 8038e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8038e30:	2b00      	cmp	r3, #0
 8038e32:	d101      	bne.n	8038e38 <xQueueReceive+0x40>
 8038e34:	2301      	movs	r3, #1
 8038e36:	e000      	b.n	8038e3a <xQueueReceive+0x42>
 8038e38:	2300      	movs	r3, #0
 8038e3a:	2b00      	cmp	r3, #0
 8038e3c:	d109      	bne.n	8038e52 <xQueueReceive+0x5a>
 8038e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038e42:	f383 8811 	msr	BASEPRI, r3
 8038e46:	f3bf 8f6f 	isb	sy
 8038e4a:	f3bf 8f4f 	dsb	sy
 8038e4e:	61fb      	str	r3, [r7, #28]
 8038e50:	e7fe      	b.n	8038e50 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8038e52:	f001 fb0b 	bl	803a46c <xTaskGetSchedulerState>
 8038e56:	4603      	mov	r3, r0
 8038e58:	2b00      	cmp	r3, #0
 8038e5a:	d102      	bne.n	8038e62 <xQueueReceive+0x6a>
 8038e5c:	687b      	ldr	r3, [r7, #4]
 8038e5e:	2b00      	cmp	r3, #0
 8038e60:	d101      	bne.n	8038e66 <xQueueReceive+0x6e>
 8038e62:	2301      	movs	r3, #1
 8038e64:	e000      	b.n	8038e68 <xQueueReceive+0x70>
 8038e66:	2300      	movs	r3, #0
 8038e68:	2b00      	cmp	r3, #0
 8038e6a:	d109      	bne.n	8038e80 <xQueueReceive+0x88>
 8038e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038e70:	f383 8811 	msr	BASEPRI, r3
 8038e74:	f3bf 8f6f 	isb	sy
 8038e78:	f3bf 8f4f 	dsb	sy
 8038e7c:	61bb      	str	r3, [r7, #24]
 8038e7e:	e7fe      	b.n	8038e7e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8038e80:	f002 fb5c 	bl	803b53c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8038e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8038e88:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8038e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038e8c:	2b00      	cmp	r3, #0
 8038e8e:	d01f      	beq.n	8038ed0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8038e90:	68b9      	ldr	r1, [r7, #8]
 8038e92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8038e94:	f000 fa93 	bl	80393be <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8038e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038e9a:	1e5a      	subs	r2, r3, #1
 8038e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038e9e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8038ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038ea2:	691b      	ldr	r3, [r3, #16]
 8038ea4:	2b00      	cmp	r3, #0
 8038ea6:	d00f      	beq.n	8038ec8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8038ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038eaa:	3310      	adds	r3, #16
 8038eac:	4618      	mov	r0, r3
 8038eae:	f001 f8a7 	bl	803a000 <xTaskRemoveFromEventList>
 8038eb2:	4603      	mov	r3, r0
 8038eb4:	2b00      	cmp	r3, #0
 8038eb6:	d007      	beq.n	8038ec8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8038eb8:	4b3c      	ldr	r3, [pc, #240]	; (8038fac <xQueueReceive+0x1b4>)
 8038eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8038ebe:	601a      	str	r2, [r3, #0]
 8038ec0:	f3bf 8f4f 	dsb	sy
 8038ec4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8038ec8:	f002 fb66 	bl	803b598 <vPortExitCritical>
				return pdPASS;
 8038ecc:	2301      	movs	r3, #1
 8038ece:	e069      	b.n	8038fa4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8038ed0:	687b      	ldr	r3, [r7, #4]
 8038ed2:	2b00      	cmp	r3, #0
 8038ed4:	d103      	bne.n	8038ede <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8038ed6:	f002 fb5f 	bl	803b598 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8038eda:	2300      	movs	r3, #0
 8038edc:	e062      	b.n	8038fa4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8038ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8038ee0:	2b00      	cmp	r3, #0
 8038ee2:	d106      	bne.n	8038ef2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8038ee4:	f107 0310 	add.w	r3, r7, #16
 8038ee8:	4618      	mov	r0, r3
 8038eea:	f001 f94b 	bl	803a184 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8038eee:	2301      	movs	r3, #1
 8038ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8038ef2:	f002 fb51 	bl	803b598 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8038ef6:	f000 fe1b 	bl	8039b30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8038efa:	f002 fb1f 	bl	803b53c <vPortEnterCritical>
 8038efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038f00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8038f04:	b25b      	sxtb	r3, r3
 8038f06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8038f0a:	d103      	bne.n	8038f14 <xQueueReceive+0x11c>
 8038f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038f0e:	2200      	movs	r2, #0
 8038f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8038f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038f16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8038f1a:	b25b      	sxtb	r3, r3
 8038f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8038f20:	d103      	bne.n	8038f2a <xQueueReceive+0x132>
 8038f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038f24:	2200      	movs	r2, #0
 8038f26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8038f2a:	f002 fb35 	bl	803b598 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8038f2e:	1d3a      	adds	r2, r7, #4
 8038f30:	f107 0310 	add.w	r3, r7, #16
 8038f34:	4611      	mov	r1, r2
 8038f36:	4618      	mov	r0, r3
 8038f38:	f001 f93a 	bl	803a1b0 <xTaskCheckForTimeOut>
 8038f3c:	4603      	mov	r3, r0
 8038f3e:	2b00      	cmp	r3, #0
 8038f40:	d123      	bne.n	8038f8a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8038f42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8038f44:	f000 fab3 	bl	80394ae <prvIsQueueEmpty>
 8038f48:	4603      	mov	r3, r0
 8038f4a:	2b00      	cmp	r3, #0
 8038f4c:	d017      	beq.n	8038f7e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8038f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038f50:	3324      	adds	r3, #36	; 0x24
 8038f52:	687a      	ldr	r2, [r7, #4]
 8038f54:	4611      	mov	r1, r2
 8038f56:	4618      	mov	r0, r3
 8038f58:	f000 ffca 	bl	8039ef0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8038f5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8038f5e:	f000 fa54 	bl	803940a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8038f62:	f000 fdf3 	bl	8039b4c <xTaskResumeAll>
 8038f66:	4603      	mov	r3, r0
 8038f68:	2b00      	cmp	r3, #0
 8038f6a:	d189      	bne.n	8038e80 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8038f6c:	4b0f      	ldr	r3, [pc, #60]	; (8038fac <xQueueReceive+0x1b4>)
 8038f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8038f72:	601a      	str	r2, [r3, #0]
 8038f74:	f3bf 8f4f 	dsb	sy
 8038f78:	f3bf 8f6f 	isb	sy
 8038f7c:	e780      	b.n	8038e80 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8038f7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8038f80:	f000 fa43 	bl	803940a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8038f84:	f000 fde2 	bl	8039b4c <xTaskResumeAll>
 8038f88:	e77a      	b.n	8038e80 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8038f8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8038f8c:	f000 fa3d 	bl	803940a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8038f90:	f000 fddc 	bl	8039b4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8038f94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8038f96:	f000 fa8a 	bl	80394ae <prvIsQueueEmpty>
 8038f9a:	4603      	mov	r3, r0
 8038f9c:	2b00      	cmp	r3, #0
 8038f9e:	f43f af6f 	beq.w	8038e80 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8038fa2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8038fa4:	4618      	mov	r0, r3
 8038fa6:	3730      	adds	r7, #48	; 0x30
 8038fa8:	46bd      	mov	sp, r7
 8038faa:	bd80      	pop	{r7, pc}
 8038fac:	e000ed04 	.word	0xe000ed04

08038fb0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8038fb0:	b580      	push	{r7, lr}
 8038fb2:	b08e      	sub	sp, #56	; 0x38
 8038fb4:	af00      	add	r7, sp, #0
 8038fb6:	6078      	str	r0, [r7, #4]
 8038fb8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8038fba:	2300      	movs	r3, #0
 8038fbc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8038fbe:	687b      	ldr	r3, [r7, #4]
 8038fc0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8038fc2:	2300      	movs	r3, #0
 8038fc4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8038fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8038fc8:	2b00      	cmp	r3, #0
 8038fca:	d109      	bne.n	8038fe0 <xQueueSemaphoreTake+0x30>
 8038fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038fd0:	f383 8811 	msr	BASEPRI, r3
 8038fd4:	f3bf 8f6f 	isb	sy
 8038fd8:	f3bf 8f4f 	dsb	sy
 8038fdc:	623b      	str	r3, [r7, #32]
 8038fde:	e7fe      	b.n	8038fde <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8038fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8038fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8038fe4:	2b00      	cmp	r3, #0
 8038fe6:	d009      	beq.n	8038ffc <xQueueSemaphoreTake+0x4c>
 8038fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8038fec:	f383 8811 	msr	BASEPRI, r3
 8038ff0:	f3bf 8f6f 	isb	sy
 8038ff4:	f3bf 8f4f 	dsb	sy
 8038ff8:	61fb      	str	r3, [r7, #28]
 8038ffa:	e7fe      	b.n	8038ffa <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8038ffc:	f001 fa36 	bl	803a46c <xTaskGetSchedulerState>
 8039000:	4603      	mov	r3, r0
 8039002:	2b00      	cmp	r3, #0
 8039004:	d102      	bne.n	803900c <xQueueSemaphoreTake+0x5c>
 8039006:	683b      	ldr	r3, [r7, #0]
 8039008:	2b00      	cmp	r3, #0
 803900a:	d101      	bne.n	8039010 <xQueueSemaphoreTake+0x60>
 803900c:	2301      	movs	r3, #1
 803900e:	e000      	b.n	8039012 <xQueueSemaphoreTake+0x62>
 8039010:	2300      	movs	r3, #0
 8039012:	2b00      	cmp	r3, #0
 8039014:	d109      	bne.n	803902a <xQueueSemaphoreTake+0x7a>
 8039016:	f04f 0350 	mov.w	r3, #80	; 0x50
 803901a:	f383 8811 	msr	BASEPRI, r3
 803901e:	f3bf 8f6f 	isb	sy
 8039022:	f3bf 8f4f 	dsb	sy
 8039026:	61bb      	str	r3, [r7, #24]
 8039028:	e7fe      	b.n	8039028 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 803902a:	f002 fa87 	bl	803b53c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 803902e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8039030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8039032:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8039034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8039036:	2b00      	cmp	r3, #0
 8039038:	d024      	beq.n	8039084 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 803903a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803903c:	1e5a      	subs	r2, r3, #1
 803903e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8039040:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8039042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8039044:	681b      	ldr	r3, [r3, #0]
 8039046:	2b00      	cmp	r3, #0
 8039048:	d104      	bne.n	8039054 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 803904a:	f001 fb99 	bl	803a780 <pvTaskIncrementMutexHeldCount>
 803904e:	4602      	mov	r2, r0
 8039050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8039052:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8039054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8039056:	691b      	ldr	r3, [r3, #16]
 8039058:	2b00      	cmp	r3, #0
 803905a:	d00f      	beq.n	803907c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 803905c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803905e:	3310      	adds	r3, #16
 8039060:	4618      	mov	r0, r3
 8039062:	f000 ffcd 	bl	803a000 <xTaskRemoveFromEventList>
 8039066:	4603      	mov	r3, r0
 8039068:	2b00      	cmp	r3, #0
 803906a:	d007      	beq.n	803907c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 803906c:	4b53      	ldr	r3, [pc, #332]	; (80391bc <xQueueSemaphoreTake+0x20c>)
 803906e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8039072:	601a      	str	r2, [r3, #0]
 8039074:	f3bf 8f4f 	dsb	sy
 8039078:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 803907c:	f002 fa8c 	bl	803b598 <vPortExitCritical>
				return pdPASS;
 8039080:	2301      	movs	r3, #1
 8039082:	e096      	b.n	80391b2 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8039084:	683b      	ldr	r3, [r7, #0]
 8039086:	2b00      	cmp	r3, #0
 8039088:	d110      	bne.n	80390ac <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 803908a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803908c:	2b00      	cmp	r3, #0
 803908e:	d009      	beq.n	80390a4 <xQueueSemaphoreTake+0xf4>
 8039090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8039094:	f383 8811 	msr	BASEPRI, r3
 8039098:	f3bf 8f6f 	isb	sy
 803909c:	f3bf 8f4f 	dsb	sy
 80390a0:	617b      	str	r3, [r7, #20]
 80390a2:	e7fe      	b.n	80390a2 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80390a4:	f002 fa78 	bl	803b598 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80390a8:	2300      	movs	r3, #0
 80390aa:	e082      	b.n	80391b2 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80390ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80390ae:	2b00      	cmp	r3, #0
 80390b0:	d106      	bne.n	80390c0 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80390b2:	f107 030c 	add.w	r3, r7, #12
 80390b6:	4618      	mov	r0, r3
 80390b8:	f001 f864 	bl	803a184 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80390bc:	2301      	movs	r3, #1
 80390be:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80390c0:	f002 fa6a 	bl	803b598 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80390c4:	f000 fd34 	bl	8039b30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80390c8:	f002 fa38 	bl	803b53c <vPortEnterCritical>
 80390cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80390ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80390d2:	b25b      	sxtb	r3, r3
 80390d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80390d8:	d103      	bne.n	80390e2 <xQueueSemaphoreTake+0x132>
 80390da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80390dc:	2200      	movs	r2, #0
 80390de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80390e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80390e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80390e8:	b25b      	sxtb	r3, r3
 80390ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80390ee:	d103      	bne.n	80390f8 <xQueueSemaphoreTake+0x148>
 80390f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80390f2:	2200      	movs	r2, #0
 80390f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80390f8:	f002 fa4e 	bl	803b598 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80390fc:	463a      	mov	r2, r7
 80390fe:	f107 030c 	add.w	r3, r7, #12
 8039102:	4611      	mov	r1, r2
 8039104:	4618      	mov	r0, r3
 8039106:	f001 f853 	bl	803a1b0 <xTaskCheckForTimeOut>
 803910a:	4603      	mov	r3, r0
 803910c:	2b00      	cmp	r3, #0
 803910e:	d132      	bne.n	8039176 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8039110:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8039112:	f000 f9cc 	bl	80394ae <prvIsQueueEmpty>
 8039116:	4603      	mov	r3, r0
 8039118:	2b00      	cmp	r3, #0
 803911a:	d026      	beq.n	803916a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 803911c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803911e:	681b      	ldr	r3, [r3, #0]
 8039120:	2b00      	cmp	r3, #0
 8039122:	d109      	bne.n	8039138 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8039124:	f002 fa0a 	bl	803b53c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8039128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803912a:	689b      	ldr	r3, [r3, #8]
 803912c:	4618      	mov	r0, r3
 803912e:	f001 f9bb 	bl	803a4a8 <xTaskPriorityInherit>
 8039132:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8039134:	f002 fa30 	bl	803b598 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8039138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803913a:	3324      	adds	r3, #36	; 0x24
 803913c:	683a      	ldr	r2, [r7, #0]
 803913e:	4611      	mov	r1, r2
 8039140:	4618      	mov	r0, r3
 8039142:	f000 fed5 	bl	8039ef0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8039146:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8039148:	f000 f95f 	bl	803940a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 803914c:	f000 fcfe 	bl	8039b4c <xTaskResumeAll>
 8039150:	4603      	mov	r3, r0
 8039152:	2b00      	cmp	r3, #0
 8039154:	f47f af69 	bne.w	803902a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8039158:	4b18      	ldr	r3, [pc, #96]	; (80391bc <xQueueSemaphoreTake+0x20c>)
 803915a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 803915e:	601a      	str	r2, [r3, #0]
 8039160:	f3bf 8f4f 	dsb	sy
 8039164:	f3bf 8f6f 	isb	sy
 8039168:	e75f      	b.n	803902a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 803916a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 803916c:	f000 f94d 	bl	803940a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8039170:	f000 fcec 	bl	8039b4c <xTaskResumeAll>
 8039174:	e759      	b.n	803902a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8039176:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8039178:	f000 f947 	bl	803940a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 803917c:	f000 fce6 	bl	8039b4c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8039180:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8039182:	f000 f994 	bl	80394ae <prvIsQueueEmpty>
 8039186:	4603      	mov	r3, r0
 8039188:	2b00      	cmp	r3, #0
 803918a:	f43f af4e 	beq.w	803902a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 803918e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8039190:	2b00      	cmp	r3, #0
 8039192:	d00d      	beq.n	80391b0 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8039194:	f002 f9d2 	bl	803b53c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8039198:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 803919a:	f000 f88e 	bl	80392ba <prvGetDisinheritPriorityAfterTimeout>
 803919e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80391a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80391a2:	689b      	ldr	r3, [r3, #8]
 80391a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80391a6:	4618      	mov	r0, r3
 80391a8:	f001 fa52 	bl	803a650 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80391ac:	f002 f9f4 	bl	803b598 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80391b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80391b2:	4618      	mov	r0, r3
 80391b4:	3738      	adds	r7, #56	; 0x38
 80391b6:	46bd      	mov	sp, r7
 80391b8:	bd80      	pop	{r7, pc}
 80391ba:	bf00      	nop
 80391bc:	e000ed04 	.word	0xe000ed04

080391c0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80391c0:	b580      	push	{r7, lr}
 80391c2:	b08e      	sub	sp, #56	; 0x38
 80391c4:	af00      	add	r7, sp, #0
 80391c6:	60f8      	str	r0, [r7, #12]
 80391c8:	60b9      	str	r1, [r7, #8]
 80391ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80391cc:	68fb      	ldr	r3, [r7, #12]
 80391ce:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80391d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80391d2:	2b00      	cmp	r3, #0
 80391d4:	d109      	bne.n	80391ea <xQueueReceiveFromISR+0x2a>
 80391d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80391da:	f383 8811 	msr	BASEPRI, r3
 80391de:	f3bf 8f6f 	isb	sy
 80391e2:	f3bf 8f4f 	dsb	sy
 80391e6:	623b      	str	r3, [r7, #32]
 80391e8:	e7fe      	b.n	80391e8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80391ea:	68bb      	ldr	r3, [r7, #8]
 80391ec:	2b00      	cmp	r3, #0
 80391ee:	d103      	bne.n	80391f8 <xQueueReceiveFromISR+0x38>
 80391f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80391f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80391f4:	2b00      	cmp	r3, #0
 80391f6:	d101      	bne.n	80391fc <xQueueReceiveFromISR+0x3c>
 80391f8:	2301      	movs	r3, #1
 80391fa:	e000      	b.n	80391fe <xQueueReceiveFromISR+0x3e>
 80391fc:	2300      	movs	r3, #0
 80391fe:	2b00      	cmp	r3, #0
 8039200:	d109      	bne.n	8039216 <xQueueReceiveFromISR+0x56>
 8039202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8039206:	f383 8811 	msr	BASEPRI, r3
 803920a:	f3bf 8f6f 	isb	sy
 803920e:	f3bf 8f4f 	dsb	sy
 8039212:	61fb      	str	r3, [r7, #28]
 8039214:	e7fe      	b.n	8039214 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8039216:	f002 fa6d 	bl	803b6f4 <vPortValidateInterruptPriority>
	__asm volatile
 803921a:	f3ef 8211 	mrs	r2, BASEPRI
 803921e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8039222:	f383 8811 	msr	BASEPRI, r3
 8039226:	f3bf 8f6f 	isb	sy
 803922a:	f3bf 8f4f 	dsb	sy
 803922e:	61ba      	str	r2, [r7, #24]
 8039230:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8039232:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8039234:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8039236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8039238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803923a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 803923c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803923e:	2b00      	cmp	r3, #0
 8039240:	d02f      	beq.n	80392a2 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8039242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8039244:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8039248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 803924c:	68b9      	ldr	r1, [r7, #8]
 803924e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8039250:	f000 f8b5 	bl	80393be <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8039254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8039256:	1e5a      	subs	r2, r3, #1
 8039258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803925a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 803925c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8039260:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8039264:	d112      	bne.n	803928c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8039266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8039268:	691b      	ldr	r3, [r3, #16]
 803926a:	2b00      	cmp	r3, #0
 803926c:	d016      	beq.n	803929c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 803926e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8039270:	3310      	adds	r3, #16
 8039272:	4618      	mov	r0, r3
 8039274:	f000 fec4 	bl	803a000 <xTaskRemoveFromEventList>
 8039278:	4603      	mov	r3, r0
 803927a:	2b00      	cmp	r3, #0
 803927c:	d00e      	beq.n	803929c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 803927e:	687b      	ldr	r3, [r7, #4]
 8039280:	2b00      	cmp	r3, #0
 8039282:	d00b      	beq.n	803929c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8039284:	687b      	ldr	r3, [r7, #4]
 8039286:	2201      	movs	r2, #1
 8039288:	601a      	str	r2, [r3, #0]
 803928a:	e007      	b.n	803929c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 803928c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8039290:	3301      	adds	r3, #1
 8039292:	b2db      	uxtb	r3, r3
 8039294:	b25a      	sxtb	r2, r3
 8039296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8039298:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 803929c:	2301      	movs	r3, #1
 803929e:	637b      	str	r3, [r7, #52]	; 0x34
 80392a0:	e001      	b.n	80392a6 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80392a2:	2300      	movs	r3, #0
 80392a4:	637b      	str	r3, [r7, #52]	; 0x34
 80392a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80392a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80392aa:	693b      	ldr	r3, [r7, #16]
 80392ac:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80392b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80392b2:	4618      	mov	r0, r3
 80392b4:	3738      	adds	r7, #56	; 0x38
 80392b6:	46bd      	mov	sp, r7
 80392b8:	bd80      	pop	{r7, pc}

080392ba <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80392ba:	b480      	push	{r7}
 80392bc:	b085      	sub	sp, #20
 80392be:	af00      	add	r7, sp, #0
 80392c0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80392c2:	687b      	ldr	r3, [r7, #4]
 80392c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80392c6:	2b00      	cmp	r3, #0
 80392c8:	d006      	beq.n	80392d8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80392ca:	687b      	ldr	r3, [r7, #4]
 80392cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80392ce:	681b      	ldr	r3, [r3, #0]
 80392d0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80392d4:	60fb      	str	r3, [r7, #12]
 80392d6:	e001      	b.n	80392dc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80392d8:	2300      	movs	r3, #0
 80392da:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80392dc:	68fb      	ldr	r3, [r7, #12]
	}
 80392de:	4618      	mov	r0, r3
 80392e0:	3714      	adds	r7, #20
 80392e2:	46bd      	mov	sp, r7
 80392e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80392e8:	4770      	bx	lr

080392ea <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80392ea:	b580      	push	{r7, lr}
 80392ec:	b086      	sub	sp, #24
 80392ee:	af00      	add	r7, sp, #0
 80392f0:	60f8      	str	r0, [r7, #12]
 80392f2:	60b9      	str	r1, [r7, #8]
 80392f4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80392f6:	2300      	movs	r3, #0
 80392f8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80392fa:	68fb      	ldr	r3, [r7, #12]
 80392fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80392fe:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8039300:	68fb      	ldr	r3, [r7, #12]
 8039302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8039304:	2b00      	cmp	r3, #0
 8039306:	d10d      	bne.n	8039324 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8039308:	68fb      	ldr	r3, [r7, #12]
 803930a:	681b      	ldr	r3, [r3, #0]
 803930c:	2b00      	cmp	r3, #0
 803930e:	d14d      	bne.n	80393ac <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8039310:	68fb      	ldr	r3, [r7, #12]
 8039312:	689b      	ldr	r3, [r3, #8]
 8039314:	4618      	mov	r0, r3
 8039316:	f001 f92f 	bl	803a578 <xTaskPriorityDisinherit>
 803931a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 803931c:	68fb      	ldr	r3, [r7, #12]
 803931e:	2200      	movs	r2, #0
 8039320:	609a      	str	r2, [r3, #8]
 8039322:	e043      	b.n	80393ac <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8039324:	687b      	ldr	r3, [r7, #4]
 8039326:	2b00      	cmp	r3, #0
 8039328:	d119      	bne.n	803935e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 803932a:	68fb      	ldr	r3, [r7, #12]
 803932c:	6858      	ldr	r0, [r3, #4]
 803932e:	68fb      	ldr	r3, [r7, #12]
 8039330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8039332:	461a      	mov	r2, r3
 8039334:	68b9      	ldr	r1, [r7, #8]
 8039336:	f006 fb62 	bl	803f9fe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 803933a:	68fb      	ldr	r3, [r7, #12]
 803933c:	685a      	ldr	r2, [r3, #4]
 803933e:	68fb      	ldr	r3, [r7, #12]
 8039340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8039342:	441a      	add	r2, r3
 8039344:	68fb      	ldr	r3, [r7, #12]
 8039346:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8039348:	68fb      	ldr	r3, [r7, #12]
 803934a:	685a      	ldr	r2, [r3, #4]
 803934c:	68fb      	ldr	r3, [r7, #12]
 803934e:	689b      	ldr	r3, [r3, #8]
 8039350:	429a      	cmp	r2, r3
 8039352:	d32b      	bcc.n	80393ac <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8039354:	68fb      	ldr	r3, [r7, #12]
 8039356:	681a      	ldr	r2, [r3, #0]
 8039358:	68fb      	ldr	r3, [r7, #12]
 803935a:	605a      	str	r2, [r3, #4]
 803935c:	e026      	b.n	80393ac <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 803935e:	68fb      	ldr	r3, [r7, #12]
 8039360:	68d8      	ldr	r0, [r3, #12]
 8039362:	68fb      	ldr	r3, [r7, #12]
 8039364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8039366:	461a      	mov	r2, r3
 8039368:	68b9      	ldr	r1, [r7, #8]
 803936a:	f006 fb48 	bl	803f9fe <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 803936e:	68fb      	ldr	r3, [r7, #12]
 8039370:	68da      	ldr	r2, [r3, #12]
 8039372:	68fb      	ldr	r3, [r7, #12]
 8039374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8039376:	425b      	negs	r3, r3
 8039378:	441a      	add	r2, r3
 803937a:	68fb      	ldr	r3, [r7, #12]
 803937c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 803937e:	68fb      	ldr	r3, [r7, #12]
 8039380:	68da      	ldr	r2, [r3, #12]
 8039382:	68fb      	ldr	r3, [r7, #12]
 8039384:	681b      	ldr	r3, [r3, #0]
 8039386:	429a      	cmp	r2, r3
 8039388:	d207      	bcs.n	803939a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 803938a:	68fb      	ldr	r3, [r7, #12]
 803938c:	689a      	ldr	r2, [r3, #8]
 803938e:	68fb      	ldr	r3, [r7, #12]
 8039390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8039392:	425b      	negs	r3, r3
 8039394:	441a      	add	r2, r3
 8039396:	68fb      	ldr	r3, [r7, #12]
 8039398:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 803939a:	687b      	ldr	r3, [r7, #4]
 803939c:	2b02      	cmp	r3, #2
 803939e:	d105      	bne.n	80393ac <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80393a0:	693b      	ldr	r3, [r7, #16]
 80393a2:	2b00      	cmp	r3, #0
 80393a4:	d002      	beq.n	80393ac <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80393a6:	693b      	ldr	r3, [r7, #16]
 80393a8:	3b01      	subs	r3, #1
 80393aa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80393ac:	693b      	ldr	r3, [r7, #16]
 80393ae:	1c5a      	adds	r2, r3, #1
 80393b0:	68fb      	ldr	r3, [r7, #12]
 80393b2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80393b4:	697b      	ldr	r3, [r7, #20]
}
 80393b6:	4618      	mov	r0, r3
 80393b8:	3718      	adds	r7, #24
 80393ba:	46bd      	mov	sp, r7
 80393bc:	bd80      	pop	{r7, pc}

080393be <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80393be:	b580      	push	{r7, lr}
 80393c0:	b082      	sub	sp, #8
 80393c2:	af00      	add	r7, sp, #0
 80393c4:	6078      	str	r0, [r7, #4]
 80393c6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80393c8:	687b      	ldr	r3, [r7, #4]
 80393ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80393cc:	2b00      	cmp	r3, #0
 80393ce:	d018      	beq.n	8039402 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80393d0:	687b      	ldr	r3, [r7, #4]
 80393d2:	68da      	ldr	r2, [r3, #12]
 80393d4:	687b      	ldr	r3, [r7, #4]
 80393d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80393d8:	441a      	add	r2, r3
 80393da:	687b      	ldr	r3, [r7, #4]
 80393dc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80393de:	687b      	ldr	r3, [r7, #4]
 80393e0:	68da      	ldr	r2, [r3, #12]
 80393e2:	687b      	ldr	r3, [r7, #4]
 80393e4:	689b      	ldr	r3, [r3, #8]
 80393e6:	429a      	cmp	r2, r3
 80393e8:	d303      	bcc.n	80393f2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80393ea:	687b      	ldr	r3, [r7, #4]
 80393ec:	681a      	ldr	r2, [r3, #0]
 80393ee:	687b      	ldr	r3, [r7, #4]
 80393f0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80393f2:	687b      	ldr	r3, [r7, #4]
 80393f4:	68d9      	ldr	r1, [r3, #12]
 80393f6:	687b      	ldr	r3, [r7, #4]
 80393f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80393fa:	461a      	mov	r2, r3
 80393fc:	6838      	ldr	r0, [r7, #0]
 80393fe:	f006 fafe 	bl	803f9fe <memcpy>
	}
}
 8039402:	bf00      	nop
 8039404:	3708      	adds	r7, #8
 8039406:	46bd      	mov	sp, r7
 8039408:	bd80      	pop	{r7, pc}

0803940a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 803940a:	b580      	push	{r7, lr}
 803940c:	b084      	sub	sp, #16
 803940e:	af00      	add	r7, sp, #0
 8039410:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8039412:	f002 f893 	bl	803b53c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8039416:	687b      	ldr	r3, [r7, #4]
 8039418:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 803941c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 803941e:	e011      	b.n	8039444 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8039420:	687b      	ldr	r3, [r7, #4]
 8039422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8039424:	2b00      	cmp	r3, #0
 8039426:	d012      	beq.n	803944e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8039428:	687b      	ldr	r3, [r7, #4]
 803942a:	3324      	adds	r3, #36	; 0x24
 803942c:	4618      	mov	r0, r3
 803942e:	f000 fde7 	bl	803a000 <xTaskRemoveFromEventList>
 8039432:	4603      	mov	r3, r0
 8039434:	2b00      	cmp	r3, #0
 8039436:	d001      	beq.n	803943c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8039438:	f000 ff2a 	bl	803a290 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 803943c:	7bfb      	ldrb	r3, [r7, #15]
 803943e:	3b01      	subs	r3, #1
 8039440:	b2db      	uxtb	r3, r3
 8039442:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8039444:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8039448:	2b00      	cmp	r3, #0
 803944a:	dce9      	bgt.n	8039420 <prvUnlockQueue+0x16>
 803944c:	e000      	b.n	8039450 <prvUnlockQueue+0x46>
					break;
 803944e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8039450:	687b      	ldr	r3, [r7, #4]
 8039452:	22ff      	movs	r2, #255	; 0xff
 8039454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8039458:	f002 f89e 	bl	803b598 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 803945c:	f002 f86e 	bl	803b53c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8039460:	687b      	ldr	r3, [r7, #4]
 8039462:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8039466:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8039468:	e011      	b.n	803948e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 803946a:	687b      	ldr	r3, [r7, #4]
 803946c:	691b      	ldr	r3, [r3, #16]
 803946e:	2b00      	cmp	r3, #0
 8039470:	d012      	beq.n	8039498 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8039472:	687b      	ldr	r3, [r7, #4]
 8039474:	3310      	adds	r3, #16
 8039476:	4618      	mov	r0, r3
 8039478:	f000 fdc2 	bl	803a000 <xTaskRemoveFromEventList>
 803947c:	4603      	mov	r3, r0
 803947e:	2b00      	cmp	r3, #0
 8039480:	d001      	beq.n	8039486 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8039482:	f000 ff05 	bl	803a290 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8039486:	7bbb      	ldrb	r3, [r7, #14]
 8039488:	3b01      	subs	r3, #1
 803948a:	b2db      	uxtb	r3, r3
 803948c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 803948e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8039492:	2b00      	cmp	r3, #0
 8039494:	dce9      	bgt.n	803946a <prvUnlockQueue+0x60>
 8039496:	e000      	b.n	803949a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8039498:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 803949a:	687b      	ldr	r3, [r7, #4]
 803949c:	22ff      	movs	r2, #255	; 0xff
 803949e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80394a2:	f002 f879 	bl	803b598 <vPortExitCritical>
}
 80394a6:	bf00      	nop
 80394a8:	3710      	adds	r7, #16
 80394aa:	46bd      	mov	sp, r7
 80394ac:	bd80      	pop	{r7, pc}

080394ae <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80394ae:	b580      	push	{r7, lr}
 80394b0:	b084      	sub	sp, #16
 80394b2:	af00      	add	r7, sp, #0
 80394b4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80394b6:	f002 f841 	bl	803b53c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80394ba:	687b      	ldr	r3, [r7, #4]
 80394bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80394be:	2b00      	cmp	r3, #0
 80394c0:	d102      	bne.n	80394c8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80394c2:	2301      	movs	r3, #1
 80394c4:	60fb      	str	r3, [r7, #12]
 80394c6:	e001      	b.n	80394cc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80394c8:	2300      	movs	r3, #0
 80394ca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80394cc:	f002 f864 	bl	803b598 <vPortExitCritical>

	return xReturn;
 80394d0:	68fb      	ldr	r3, [r7, #12]
}
 80394d2:	4618      	mov	r0, r3
 80394d4:	3710      	adds	r7, #16
 80394d6:	46bd      	mov	sp, r7
 80394d8:	bd80      	pop	{r7, pc}

080394da <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80394da:	b580      	push	{r7, lr}
 80394dc:	b084      	sub	sp, #16
 80394de:	af00      	add	r7, sp, #0
 80394e0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80394e2:	f002 f82b 	bl	803b53c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80394e6:	687b      	ldr	r3, [r7, #4]
 80394e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80394ea:	687b      	ldr	r3, [r7, #4]
 80394ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80394ee:	429a      	cmp	r2, r3
 80394f0:	d102      	bne.n	80394f8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80394f2:	2301      	movs	r3, #1
 80394f4:	60fb      	str	r3, [r7, #12]
 80394f6:	e001      	b.n	80394fc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80394f8:	2300      	movs	r3, #0
 80394fa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80394fc:	f002 f84c 	bl	803b598 <vPortExitCritical>

	return xReturn;
 8039500:	68fb      	ldr	r3, [r7, #12]
}
 8039502:	4618      	mov	r0, r3
 8039504:	3710      	adds	r7, #16
 8039506:	46bd      	mov	sp, r7
 8039508:	bd80      	pop	{r7, pc}
	...

0803950c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 803950c:	b480      	push	{r7}
 803950e:	b085      	sub	sp, #20
 8039510:	af00      	add	r7, sp, #0
 8039512:	6078      	str	r0, [r7, #4]
 8039514:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8039516:	2300      	movs	r3, #0
 8039518:	60fb      	str	r3, [r7, #12]
 803951a:	e014      	b.n	8039546 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 803951c:	4a0e      	ldr	r2, [pc, #56]	; (8039558 <vQueueAddToRegistry+0x4c>)
 803951e:	68fb      	ldr	r3, [r7, #12]
 8039520:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8039524:	2b00      	cmp	r3, #0
 8039526:	d10b      	bne.n	8039540 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8039528:	490b      	ldr	r1, [pc, #44]	; (8039558 <vQueueAddToRegistry+0x4c>)
 803952a:	68fb      	ldr	r3, [r7, #12]
 803952c:	683a      	ldr	r2, [r7, #0]
 803952e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8039532:	4a09      	ldr	r2, [pc, #36]	; (8039558 <vQueueAddToRegistry+0x4c>)
 8039534:	68fb      	ldr	r3, [r7, #12]
 8039536:	00db      	lsls	r3, r3, #3
 8039538:	4413      	add	r3, r2
 803953a:	687a      	ldr	r2, [r7, #4]
 803953c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 803953e:	e005      	b.n	803954c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8039540:	68fb      	ldr	r3, [r7, #12]
 8039542:	3301      	adds	r3, #1
 8039544:	60fb      	str	r3, [r7, #12]
 8039546:	68fb      	ldr	r3, [r7, #12]
 8039548:	2b07      	cmp	r3, #7
 803954a:	d9e7      	bls.n	803951c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 803954c:	bf00      	nop
 803954e:	3714      	adds	r7, #20
 8039550:	46bd      	mov	sp, r7
 8039552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039556:	4770      	bx	lr
 8039558:	20008a5c 	.word	0x20008a5c

0803955c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 803955c:	b580      	push	{r7, lr}
 803955e:	b086      	sub	sp, #24
 8039560:	af00      	add	r7, sp, #0
 8039562:	60f8      	str	r0, [r7, #12]
 8039564:	60b9      	str	r1, [r7, #8]
 8039566:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8039568:	68fb      	ldr	r3, [r7, #12]
 803956a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 803956c:	f001 ffe6 	bl	803b53c <vPortEnterCritical>
 8039570:	697b      	ldr	r3, [r7, #20]
 8039572:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8039576:	b25b      	sxtb	r3, r3
 8039578:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 803957c:	d103      	bne.n	8039586 <vQueueWaitForMessageRestricted+0x2a>
 803957e:	697b      	ldr	r3, [r7, #20]
 8039580:	2200      	movs	r2, #0
 8039582:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8039586:	697b      	ldr	r3, [r7, #20]
 8039588:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 803958c:	b25b      	sxtb	r3, r3
 803958e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8039592:	d103      	bne.n	803959c <vQueueWaitForMessageRestricted+0x40>
 8039594:	697b      	ldr	r3, [r7, #20]
 8039596:	2200      	movs	r2, #0
 8039598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 803959c:	f001 fffc 	bl	803b598 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80395a0:	697b      	ldr	r3, [r7, #20]
 80395a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80395a4:	2b00      	cmp	r3, #0
 80395a6:	d106      	bne.n	80395b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80395a8:	697b      	ldr	r3, [r7, #20]
 80395aa:	3324      	adds	r3, #36	; 0x24
 80395ac:	687a      	ldr	r2, [r7, #4]
 80395ae:	68b9      	ldr	r1, [r7, #8]
 80395b0:	4618      	mov	r0, r3
 80395b2:	f000 fcfb 	bl	8039fac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80395b6:	6978      	ldr	r0, [r7, #20]
 80395b8:	f7ff ff27 	bl	803940a <prvUnlockQueue>
	}
 80395bc:	bf00      	nop
 80395be:	3718      	adds	r7, #24
 80395c0:	46bd      	mov	sp, r7
 80395c2:	bd80      	pop	{r7, pc}

080395c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80395c4:	b580      	push	{r7, lr}
 80395c6:	b08e      	sub	sp, #56	; 0x38
 80395c8:	af04      	add	r7, sp, #16
 80395ca:	60f8      	str	r0, [r7, #12]
 80395cc:	60b9      	str	r1, [r7, #8]
 80395ce:	607a      	str	r2, [r7, #4]
 80395d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80395d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80395d4:	2b00      	cmp	r3, #0
 80395d6:	d109      	bne.n	80395ec <xTaskCreateStatic+0x28>
	__asm volatile
 80395d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80395dc:	f383 8811 	msr	BASEPRI, r3
 80395e0:	f3bf 8f6f 	isb	sy
 80395e4:	f3bf 8f4f 	dsb	sy
 80395e8:	623b      	str	r3, [r7, #32]
 80395ea:	e7fe      	b.n	80395ea <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80395ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80395ee:	2b00      	cmp	r3, #0
 80395f0:	d109      	bne.n	8039606 <xTaskCreateStatic+0x42>
 80395f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80395f6:	f383 8811 	msr	BASEPRI, r3
 80395fa:	f3bf 8f6f 	isb	sy
 80395fe:	f3bf 8f4f 	dsb	sy
 8039602:	61fb      	str	r3, [r7, #28]
 8039604:	e7fe      	b.n	8039604 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8039606:	2360      	movs	r3, #96	; 0x60
 8039608:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 803960a:	693b      	ldr	r3, [r7, #16]
 803960c:	2b60      	cmp	r3, #96	; 0x60
 803960e:	d009      	beq.n	8039624 <xTaskCreateStatic+0x60>
 8039610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8039614:	f383 8811 	msr	BASEPRI, r3
 8039618:	f3bf 8f6f 	isb	sy
 803961c:	f3bf 8f4f 	dsb	sy
 8039620:	61bb      	str	r3, [r7, #24]
 8039622:	e7fe      	b.n	8039622 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8039624:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8039626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039628:	2b00      	cmp	r3, #0
 803962a:	d01e      	beq.n	803966a <xTaskCreateStatic+0xa6>
 803962c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803962e:	2b00      	cmp	r3, #0
 8039630:	d01b      	beq.n	803966a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8039632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039634:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8039636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8039638:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 803963a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 803963c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803963e:	2202      	movs	r2, #2
 8039640:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8039644:	2300      	movs	r3, #0
 8039646:	9303      	str	r3, [sp, #12]
 8039648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803964a:	9302      	str	r3, [sp, #8]
 803964c:	f107 0314 	add.w	r3, r7, #20
 8039650:	9301      	str	r3, [sp, #4]
 8039652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8039654:	9300      	str	r3, [sp, #0]
 8039656:	683b      	ldr	r3, [r7, #0]
 8039658:	687a      	ldr	r2, [r7, #4]
 803965a:	68b9      	ldr	r1, [r7, #8]
 803965c:	68f8      	ldr	r0, [r7, #12]
 803965e:	f000 f850 	bl	8039702 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8039662:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8039664:	f000 f8e2 	bl	803982c <prvAddNewTaskToReadyList>
 8039668:	e001      	b.n	803966e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 803966a:	2300      	movs	r3, #0
 803966c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 803966e:	697b      	ldr	r3, [r7, #20]
	}
 8039670:	4618      	mov	r0, r3
 8039672:	3728      	adds	r7, #40	; 0x28
 8039674:	46bd      	mov	sp, r7
 8039676:	bd80      	pop	{r7, pc}

08039678 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8039678:	b580      	push	{r7, lr}
 803967a:	b08c      	sub	sp, #48	; 0x30
 803967c:	af04      	add	r7, sp, #16
 803967e:	60f8      	str	r0, [r7, #12]
 8039680:	60b9      	str	r1, [r7, #8]
 8039682:	603b      	str	r3, [r7, #0]
 8039684:	4613      	mov	r3, r2
 8039686:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8039688:	88fb      	ldrh	r3, [r7, #6]
 803968a:	009b      	lsls	r3, r3, #2
 803968c:	4618      	mov	r0, r3
 803968e:	f002 f86f 	bl	803b770 <pvPortMalloc>
 8039692:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8039694:	697b      	ldr	r3, [r7, #20]
 8039696:	2b00      	cmp	r3, #0
 8039698:	d00e      	beq.n	80396b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 803969a:	2060      	movs	r0, #96	; 0x60
 803969c:	f002 f868 	bl	803b770 <pvPortMalloc>
 80396a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80396a2:	69fb      	ldr	r3, [r7, #28]
 80396a4:	2b00      	cmp	r3, #0
 80396a6:	d003      	beq.n	80396b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80396a8:	69fb      	ldr	r3, [r7, #28]
 80396aa:	697a      	ldr	r2, [r7, #20]
 80396ac:	631a      	str	r2, [r3, #48]	; 0x30
 80396ae:	e005      	b.n	80396bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80396b0:	6978      	ldr	r0, [r7, #20]
 80396b2:	f002 f91f 	bl	803b8f4 <vPortFree>
 80396b6:	e001      	b.n	80396bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80396b8:	2300      	movs	r3, #0
 80396ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80396bc:	69fb      	ldr	r3, [r7, #28]
 80396be:	2b00      	cmp	r3, #0
 80396c0:	d017      	beq.n	80396f2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80396c2:	69fb      	ldr	r3, [r7, #28]
 80396c4:	2200      	movs	r2, #0
 80396c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80396ca:	88fa      	ldrh	r2, [r7, #6]
 80396cc:	2300      	movs	r3, #0
 80396ce:	9303      	str	r3, [sp, #12]
 80396d0:	69fb      	ldr	r3, [r7, #28]
 80396d2:	9302      	str	r3, [sp, #8]
 80396d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80396d6:	9301      	str	r3, [sp, #4]
 80396d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80396da:	9300      	str	r3, [sp, #0]
 80396dc:	683b      	ldr	r3, [r7, #0]
 80396de:	68b9      	ldr	r1, [r7, #8]
 80396e0:	68f8      	ldr	r0, [r7, #12]
 80396e2:	f000 f80e 	bl	8039702 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80396e6:	69f8      	ldr	r0, [r7, #28]
 80396e8:	f000 f8a0 	bl	803982c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80396ec:	2301      	movs	r3, #1
 80396ee:	61bb      	str	r3, [r7, #24]
 80396f0:	e002      	b.n	80396f8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80396f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80396f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80396f8:	69bb      	ldr	r3, [r7, #24]
	}
 80396fa:	4618      	mov	r0, r3
 80396fc:	3720      	adds	r7, #32
 80396fe:	46bd      	mov	sp, r7
 8039700:	bd80      	pop	{r7, pc}

08039702 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8039702:	b580      	push	{r7, lr}
 8039704:	b088      	sub	sp, #32
 8039706:	af00      	add	r7, sp, #0
 8039708:	60f8      	str	r0, [r7, #12]
 803970a:	60b9      	str	r1, [r7, #8]
 803970c:	607a      	str	r2, [r7, #4]
 803970e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8039710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8039712:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8039714:	687b      	ldr	r3, [r7, #4]
 8039716:	009b      	lsls	r3, r3, #2
 8039718:	461a      	mov	r2, r3
 803971a:	21a5      	movs	r1, #165	; 0xa5
 803971c:	f006 f97a 	bl	803fa14 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8039720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8039722:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8039724:	687b      	ldr	r3, [r7, #4]
 8039726:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 803972a:	3b01      	subs	r3, #1
 803972c:	009b      	lsls	r3, r3, #2
 803972e:	4413      	add	r3, r2
 8039730:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8039732:	69bb      	ldr	r3, [r7, #24]
 8039734:	f023 0307 	bic.w	r3, r3, #7
 8039738:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 803973a:	69bb      	ldr	r3, [r7, #24]
 803973c:	f003 0307 	and.w	r3, r3, #7
 8039740:	2b00      	cmp	r3, #0
 8039742:	d009      	beq.n	8039758 <prvInitialiseNewTask+0x56>
 8039744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8039748:	f383 8811 	msr	BASEPRI, r3
 803974c:	f3bf 8f6f 	isb	sy
 8039750:	f3bf 8f4f 	dsb	sy
 8039754:	617b      	str	r3, [r7, #20]
 8039756:	e7fe      	b.n	8039756 <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8039758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803975a:	69ba      	ldr	r2, [r7, #24]
 803975c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 803975e:	68bb      	ldr	r3, [r7, #8]
 8039760:	2b00      	cmp	r3, #0
 8039762:	d01f      	beq.n	80397a4 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8039764:	2300      	movs	r3, #0
 8039766:	61fb      	str	r3, [r7, #28]
 8039768:	e012      	b.n	8039790 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 803976a:	68ba      	ldr	r2, [r7, #8]
 803976c:	69fb      	ldr	r3, [r7, #28]
 803976e:	4413      	add	r3, r2
 8039770:	7819      	ldrb	r1, [r3, #0]
 8039772:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8039774:	69fb      	ldr	r3, [r7, #28]
 8039776:	4413      	add	r3, r2
 8039778:	3334      	adds	r3, #52	; 0x34
 803977a:	460a      	mov	r2, r1
 803977c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 803977e:	68ba      	ldr	r2, [r7, #8]
 8039780:	69fb      	ldr	r3, [r7, #28]
 8039782:	4413      	add	r3, r2
 8039784:	781b      	ldrb	r3, [r3, #0]
 8039786:	2b00      	cmp	r3, #0
 8039788:	d006      	beq.n	8039798 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 803978a:	69fb      	ldr	r3, [r7, #28]
 803978c:	3301      	adds	r3, #1
 803978e:	61fb      	str	r3, [r7, #28]
 8039790:	69fb      	ldr	r3, [r7, #28]
 8039792:	2b0f      	cmp	r3, #15
 8039794:	d9e9      	bls.n	803976a <prvInitialiseNewTask+0x68>
 8039796:	e000      	b.n	803979a <prvInitialiseNewTask+0x98>
			{
				break;
 8039798:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 803979a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803979c:	2200      	movs	r2, #0
 803979e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80397a2:	e003      	b.n	80397ac <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80397a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80397a6:	2200      	movs	r2, #0
 80397a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80397ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80397ae:	2b37      	cmp	r3, #55	; 0x37
 80397b0:	d901      	bls.n	80397b6 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80397b2:	2337      	movs	r3, #55	; 0x37
 80397b4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80397b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80397b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80397ba:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80397bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80397be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80397c0:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 80397c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80397c4:	2200      	movs	r2, #0
 80397c6:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80397c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80397ca:	3304      	adds	r3, #4
 80397cc:	4618      	mov	r0, r3
 80397ce:	f7fe feff 	bl	80385d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80397d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80397d4:	3318      	adds	r3, #24
 80397d6:	4618      	mov	r0, r3
 80397d8:	f7fe fefa 	bl	80385d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80397dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80397de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80397e0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80397e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80397e4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80397e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80397ea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80397ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80397ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80397f0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80397f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80397f4:	2200      	movs	r2, #0
 80397f6:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80397f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80397fa:	2200      	movs	r2, #0
 80397fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 8039800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8039802:	2200      	movs	r2, #0
 8039804:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8039808:	683a      	ldr	r2, [r7, #0]
 803980a:	68f9      	ldr	r1, [r7, #12]
 803980c:	69b8      	ldr	r0, [r7, #24]
 803980e:	f001 fd71 	bl	803b2f4 <pxPortInitialiseStack>
 8039812:	4602      	mov	r2, r0
 8039814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8039816:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8039818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803981a:	2b00      	cmp	r3, #0
 803981c:	d002      	beq.n	8039824 <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 803981e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8039820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8039822:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8039824:	bf00      	nop
 8039826:	3720      	adds	r7, #32
 8039828:	46bd      	mov	sp, r7
 803982a:	bd80      	pop	{r7, pc}

0803982c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 803982c:	b580      	push	{r7, lr}
 803982e:	b082      	sub	sp, #8
 8039830:	af00      	add	r7, sp, #0
 8039832:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8039834:	f001 fe82 	bl	803b53c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8039838:	4b2d      	ldr	r3, [pc, #180]	; (80398f0 <prvAddNewTaskToReadyList+0xc4>)
 803983a:	681b      	ldr	r3, [r3, #0]
 803983c:	3301      	adds	r3, #1
 803983e:	4a2c      	ldr	r2, [pc, #176]	; (80398f0 <prvAddNewTaskToReadyList+0xc4>)
 8039840:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8039842:	4b2c      	ldr	r3, [pc, #176]	; (80398f4 <prvAddNewTaskToReadyList+0xc8>)
 8039844:	681b      	ldr	r3, [r3, #0]
 8039846:	2b00      	cmp	r3, #0
 8039848:	d109      	bne.n	803985e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 803984a:	4a2a      	ldr	r2, [pc, #168]	; (80398f4 <prvAddNewTaskToReadyList+0xc8>)
 803984c:	687b      	ldr	r3, [r7, #4]
 803984e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8039850:	4b27      	ldr	r3, [pc, #156]	; (80398f0 <prvAddNewTaskToReadyList+0xc4>)
 8039852:	681b      	ldr	r3, [r3, #0]
 8039854:	2b01      	cmp	r3, #1
 8039856:	d110      	bne.n	803987a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8039858:	f000 fd3e 	bl	803a2d8 <prvInitialiseTaskLists>
 803985c:	e00d      	b.n	803987a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 803985e:	4b26      	ldr	r3, [pc, #152]	; (80398f8 <prvAddNewTaskToReadyList+0xcc>)
 8039860:	681b      	ldr	r3, [r3, #0]
 8039862:	2b00      	cmp	r3, #0
 8039864:	d109      	bne.n	803987a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8039866:	4b23      	ldr	r3, [pc, #140]	; (80398f4 <prvAddNewTaskToReadyList+0xc8>)
 8039868:	681b      	ldr	r3, [r3, #0]
 803986a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803986c:	687b      	ldr	r3, [r7, #4]
 803986e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8039870:	429a      	cmp	r2, r3
 8039872:	d802      	bhi.n	803987a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8039874:	4a1f      	ldr	r2, [pc, #124]	; (80398f4 <prvAddNewTaskToReadyList+0xc8>)
 8039876:	687b      	ldr	r3, [r7, #4]
 8039878:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 803987a:	4b20      	ldr	r3, [pc, #128]	; (80398fc <prvAddNewTaskToReadyList+0xd0>)
 803987c:	681b      	ldr	r3, [r3, #0]
 803987e:	3301      	adds	r3, #1
 8039880:	4a1e      	ldr	r2, [pc, #120]	; (80398fc <prvAddNewTaskToReadyList+0xd0>)
 8039882:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8039884:	4b1d      	ldr	r3, [pc, #116]	; (80398fc <prvAddNewTaskToReadyList+0xd0>)
 8039886:	681a      	ldr	r2, [r3, #0]
 8039888:	687b      	ldr	r3, [r7, #4]
 803988a:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 803988c:	687b      	ldr	r3, [r7, #4]
 803988e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8039890:	4b1b      	ldr	r3, [pc, #108]	; (8039900 <prvAddNewTaskToReadyList+0xd4>)
 8039892:	681b      	ldr	r3, [r3, #0]
 8039894:	429a      	cmp	r2, r3
 8039896:	d903      	bls.n	80398a0 <prvAddNewTaskToReadyList+0x74>
 8039898:	687b      	ldr	r3, [r7, #4]
 803989a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803989c:	4a18      	ldr	r2, [pc, #96]	; (8039900 <prvAddNewTaskToReadyList+0xd4>)
 803989e:	6013      	str	r3, [r2, #0]
 80398a0:	687b      	ldr	r3, [r7, #4]
 80398a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80398a4:	4613      	mov	r3, r2
 80398a6:	009b      	lsls	r3, r3, #2
 80398a8:	4413      	add	r3, r2
 80398aa:	009b      	lsls	r3, r3, #2
 80398ac:	4a15      	ldr	r2, [pc, #84]	; (8039904 <prvAddNewTaskToReadyList+0xd8>)
 80398ae:	441a      	add	r2, r3
 80398b0:	687b      	ldr	r3, [r7, #4]
 80398b2:	3304      	adds	r3, #4
 80398b4:	4619      	mov	r1, r3
 80398b6:	4610      	mov	r0, r2
 80398b8:	f7fe fe97 	bl	80385ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80398bc:	f001 fe6c 	bl	803b598 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80398c0:	4b0d      	ldr	r3, [pc, #52]	; (80398f8 <prvAddNewTaskToReadyList+0xcc>)
 80398c2:	681b      	ldr	r3, [r3, #0]
 80398c4:	2b00      	cmp	r3, #0
 80398c6:	d00e      	beq.n	80398e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80398c8:	4b0a      	ldr	r3, [pc, #40]	; (80398f4 <prvAddNewTaskToReadyList+0xc8>)
 80398ca:	681b      	ldr	r3, [r3, #0]
 80398cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80398ce:	687b      	ldr	r3, [r7, #4]
 80398d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80398d2:	429a      	cmp	r2, r3
 80398d4:	d207      	bcs.n	80398e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80398d6:	4b0c      	ldr	r3, [pc, #48]	; (8039908 <prvAddNewTaskToReadyList+0xdc>)
 80398d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80398dc:	601a      	str	r2, [r3, #0]
 80398de:	f3bf 8f4f 	dsb	sy
 80398e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80398e6:	bf00      	nop
 80398e8:	3708      	adds	r7, #8
 80398ea:	46bd      	mov	sp, r7
 80398ec:	bd80      	pop	{r7, pc}
 80398ee:	bf00      	nop
 80398f0:	200018cc 	.word	0x200018cc
 80398f4:	200013f8 	.word	0x200013f8
 80398f8:	200018d8 	.word	0x200018d8
 80398fc:	200018e8 	.word	0x200018e8
 8039900:	200018d4 	.word	0x200018d4
 8039904:	200013fc 	.word	0x200013fc
 8039908:	e000ed04 	.word	0xe000ed04

0803990c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 803990c:	b580      	push	{r7, lr}
 803990e:	b08a      	sub	sp, #40	; 0x28
 8039910:	af00      	add	r7, sp, #0
 8039912:	6078      	str	r0, [r7, #4]
 8039914:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8039916:	2300      	movs	r3, #0
 8039918:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 803991a:	687b      	ldr	r3, [r7, #4]
 803991c:	2b00      	cmp	r3, #0
 803991e:	d109      	bne.n	8039934 <vTaskDelayUntil+0x28>
 8039920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8039924:	f383 8811 	msr	BASEPRI, r3
 8039928:	f3bf 8f6f 	isb	sy
 803992c:	f3bf 8f4f 	dsb	sy
 8039930:	617b      	str	r3, [r7, #20]
 8039932:	e7fe      	b.n	8039932 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8039934:	683b      	ldr	r3, [r7, #0]
 8039936:	2b00      	cmp	r3, #0
 8039938:	d109      	bne.n	803994e <vTaskDelayUntil+0x42>
 803993a:	f04f 0350 	mov.w	r3, #80	; 0x50
 803993e:	f383 8811 	msr	BASEPRI, r3
 8039942:	f3bf 8f6f 	isb	sy
 8039946:	f3bf 8f4f 	dsb	sy
 803994a:	613b      	str	r3, [r7, #16]
 803994c:	e7fe      	b.n	803994c <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 803994e:	4b29      	ldr	r3, [pc, #164]	; (80399f4 <vTaskDelayUntil+0xe8>)
 8039950:	681b      	ldr	r3, [r3, #0]
 8039952:	2b00      	cmp	r3, #0
 8039954:	d009      	beq.n	803996a <vTaskDelayUntil+0x5e>
 8039956:	f04f 0350 	mov.w	r3, #80	; 0x50
 803995a:	f383 8811 	msr	BASEPRI, r3
 803995e:	f3bf 8f6f 	isb	sy
 8039962:	f3bf 8f4f 	dsb	sy
 8039966:	60fb      	str	r3, [r7, #12]
 8039968:	e7fe      	b.n	8039968 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 803996a:	f000 f8e1 	bl	8039b30 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 803996e:	4b22      	ldr	r3, [pc, #136]	; (80399f8 <vTaskDelayUntil+0xec>)
 8039970:	681b      	ldr	r3, [r3, #0]
 8039972:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8039974:	687b      	ldr	r3, [r7, #4]
 8039976:	681b      	ldr	r3, [r3, #0]
 8039978:	683a      	ldr	r2, [r7, #0]
 803997a:	4413      	add	r3, r2
 803997c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 803997e:	687b      	ldr	r3, [r7, #4]
 8039980:	681b      	ldr	r3, [r3, #0]
 8039982:	6a3a      	ldr	r2, [r7, #32]
 8039984:	429a      	cmp	r2, r3
 8039986:	d20b      	bcs.n	80399a0 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8039988:	687b      	ldr	r3, [r7, #4]
 803998a:	681b      	ldr	r3, [r3, #0]
 803998c:	69fa      	ldr	r2, [r7, #28]
 803998e:	429a      	cmp	r2, r3
 8039990:	d211      	bcs.n	80399b6 <vTaskDelayUntil+0xaa>
 8039992:	69fa      	ldr	r2, [r7, #28]
 8039994:	6a3b      	ldr	r3, [r7, #32]
 8039996:	429a      	cmp	r2, r3
 8039998:	d90d      	bls.n	80399b6 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 803999a:	2301      	movs	r3, #1
 803999c:	627b      	str	r3, [r7, #36]	; 0x24
 803999e:	e00a      	b.n	80399b6 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80399a0:	687b      	ldr	r3, [r7, #4]
 80399a2:	681b      	ldr	r3, [r3, #0]
 80399a4:	69fa      	ldr	r2, [r7, #28]
 80399a6:	429a      	cmp	r2, r3
 80399a8:	d303      	bcc.n	80399b2 <vTaskDelayUntil+0xa6>
 80399aa:	69fa      	ldr	r2, [r7, #28]
 80399ac:	6a3b      	ldr	r3, [r7, #32]
 80399ae:	429a      	cmp	r2, r3
 80399b0:	d901      	bls.n	80399b6 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 80399b2:	2301      	movs	r3, #1
 80399b4:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80399b6:	687b      	ldr	r3, [r7, #4]
 80399b8:	69fa      	ldr	r2, [r7, #28]
 80399ba:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80399bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80399be:	2b00      	cmp	r3, #0
 80399c0:	d006      	beq.n	80399d0 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80399c2:	69fa      	ldr	r2, [r7, #28]
 80399c4:	6a3b      	ldr	r3, [r7, #32]
 80399c6:	1ad3      	subs	r3, r2, r3
 80399c8:	2100      	movs	r1, #0
 80399ca:	4618      	mov	r0, r3
 80399cc:	f001 f8d2 	bl	803ab74 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80399d0:	f000 f8bc 	bl	8039b4c <xTaskResumeAll>
 80399d4:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80399d6:	69bb      	ldr	r3, [r7, #24]
 80399d8:	2b00      	cmp	r3, #0
 80399da:	d107      	bne.n	80399ec <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 80399dc:	4b07      	ldr	r3, [pc, #28]	; (80399fc <vTaskDelayUntil+0xf0>)
 80399de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80399e2:	601a      	str	r2, [r3, #0]
 80399e4:	f3bf 8f4f 	dsb	sy
 80399e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80399ec:	bf00      	nop
 80399ee:	3728      	adds	r7, #40	; 0x28
 80399f0:	46bd      	mov	sp, r7
 80399f2:	bd80      	pop	{r7, pc}
 80399f4:	200018f4 	.word	0x200018f4
 80399f8:	200018d0 	.word	0x200018d0
 80399fc:	e000ed04 	.word	0xe000ed04

08039a00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8039a00:	b580      	push	{r7, lr}
 8039a02:	b084      	sub	sp, #16
 8039a04:	af00      	add	r7, sp, #0
 8039a06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8039a08:	2300      	movs	r3, #0
 8039a0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8039a0c:	687b      	ldr	r3, [r7, #4]
 8039a0e:	2b00      	cmp	r3, #0
 8039a10:	d016      	beq.n	8039a40 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8039a12:	4b13      	ldr	r3, [pc, #76]	; (8039a60 <vTaskDelay+0x60>)
 8039a14:	681b      	ldr	r3, [r3, #0]
 8039a16:	2b00      	cmp	r3, #0
 8039a18:	d009      	beq.n	8039a2e <vTaskDelay+0x2e>
 8039a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8039a1e:	f383 8811 	msr	BASEPRI, r3
 8039a22:	f3bf 8f6f 	isb	sy
 8039a26:	f3bf 8f4f 	dsb	sy
 8039a2a:	60bb      	str	r3, [r7, #8]
 8039a2c:	e7fe      	b.n	8039a2c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8039a2e:	f000 f87f 	bl	8039b30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8039a32:	2100      	movs	r1, #0
 8039a34:	6878      	ldr	r0, [r7, #4]
 8039a36:	f001 f89d 	bl	803ab74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8039a3a:	f000 f887 	bl	8039b4c <xTaskResumeAll>
 8039a3e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8039a40:	68fb      	ldr	r3, [r7, #12]
 8039a42:	2b00      	cmp	r3, #0
 8039a44:	d107      	bne.n	8039a56 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8039a46:	4b07      	ldr	r3, [pc, #28]	; (8039a64 <vTaskDelay+0x64>)
 8039a48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8039a4c:	601a      	str	r2, [r3, #0]
 8039a4e:	f3bf 8f4f 	dsb	sy
 8039a52:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8039a56:	bf00      	nop
 8039a58:	3710      	adds	r7, #16
 8039a5a:	46bd      	mov	sp, r7
 8039a5c:	bd80      	pop	{r7, pc}
 8039a5e:	bf00      	nop
 8039a60:	200018f4 	.word	0x200018f4
 8039a64:	e000ed04 	.word	0xe000ed04

08039a68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8039a68:	b580      	push	{r7, lr}
 8039a6a:	b08a      	sub	sp, #40	; 0x28
 8039a6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8039a6e:	2300      	movs	r3, #0
 8039a70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8039a72:	2300      	movs	r3, #0
 8039a74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8039a76:	463a      	mov	r2, r7
 8039a78:	1d39      	adds	r1, r7, #4
 8039a7a:	f107 0308 	add.w	r3, r7, #8
 8039a7e:	4618      	mov	r0, r3
 8039a80:	f7fe fb6c 	bl	803815c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8039a84:	6839      	ldr	r1, [r7, #0]
 8039a86:	687b      	ldr	r3, [r7, #4]
 8039a88:	68ba      	ldr	r2, [r7, #8]
 8039a8a:	9202      	str	r2, [sp, #8]
 8039a8c:	9301      	str	r3, [sp, #4]
 8039a8e:	2300      	movs	r3, #0
 8039a90:	9300      	str	r3, [sp, #0]
 8039a92:	2300      	movs	r3, #0
 8039a94:	460a      	mov	r2, r1
 8039a96:	4920      	ldr	r1, [pc, #128]	; (8039b18 <vTaskStartScheduler+0xb0>)
 8039a98:	4820      	ldr	r0, [pc, #128]	; (8039b1c <vTaskStartScheduler+0xb4>)
 8039a9a:	f7ff fd93 	bl	80395c4 <xTaskCreateStatic>
 8039a9e:	4602      	mov	r2, r0
 8039aa0:	4b1f      	ldr	r3, [pc, #124]	; (8039b20 <vTaskStartScheduler+0xb8>)
 8039aa2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8039aa4:	4b1e      	ldr	r3, [pc, #120]	; (8039b20 <vTaskStartScheduler+0xb8>)
 8039aa6:	681b      	ldr	r3, [r3, #0]
 8039aa8:	2b00      	cmp	r3, #0
 8039aaa:	d002      	beq.n	8039ab2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8039aac:	2301      	movs	r3, #1
 8039aae:	617b      	str	r3, [r7, #20]
 8039ab0:	e001      	b.n	8039ab6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8039ab2:	2300      	movs	r3, #0
 8039ab4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8039ab6:	697b      	ldr	r3, [r7, #20]
 8039ab8:	2b01      	cmp	r3, #1
 8039aba:	d102      	bne.n	8039ac2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8039abc:	f001 f8b4 	bl	803ac28 <xTimerCreateTimerTask>
 8039ac0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8039ac2:	697b      	ldr	r3, [r7, #20]
 8039ac4:	2b01      	cmp	r3, #1
 8039ac6:	d115      	bne.n	8039af4 <vTaskStartScheduler+0x8c>
 8039ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8039acc:	f383 8811 	msr	BASEPRI, r3
 8039ad0:	f3bf 8f6f 	isb	sy
 8039ad4:	f3bf 8f4f 	dsb	sy
 8039ad8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8039ada:	4b12      	ldr	r3, [pc, #72]	; (8039b24 <vTaskStartScheduler+0xbc>)
 8039adc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8039ae0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8039ae2:	4b11      	ldr	r3, [pc, #68]	; (8039b28 <vTaskStartScheduler+0xc0>)
 8039ae4:	2201      	movs	r2, #1
 8039ae6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8039ae8:	4b10      	ldr	r3, [pc, #64]	; (8039b2c <vTaskStartScheduler+0xc4>)
 8039aea:	2200      	movs	r2, #0
 8039aec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8039aee:	f001 fc87 	bl	803b400 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8039af2:	e00d      	b.n	8039b10 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8039af4:	697b      	ldr	r3, [r7, #20]
 8039af6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8039afa:	d109      	bne.n	8039b10 <vTaskStartScheduler+0xa8>
 8039afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8039b00:	f383 8811 	msr	BASEPRI, r3
 8039b04:	f3bf 8f6f 	isb	sy
 8039b08:	f3bf 8f4f 	dsb	sy
 8039b0c:	60fb      	str	r3, [r7, #12]
 8039b0e:	e7fe      	b.n	8039b0e <vTaskStartScheduler+0xa6>
}
 8039b10:	bf00      	nop
 8039b12:	3718      	adds	r7, #24
 8039b14:	46bd      	mov	sp, r7
 8039b16:	bd80      	pop	{r7, pc}
 8039b18:	08043b64 	.word	0x08043b64
 8039b1c:	0803a2a9 	.word	0x0803a2a9
 8039b20:	200018f0 	.word	0x200018f0
 8039b24:	200018ec 	.word	0x200018ec
 8039b28:	200018d8 	.word	0x200018d8
 8039b2c:	200018d0 	.word	0x200018d0

08039b30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8039b30:	b480      	push	{r7}
 8039b32:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8039b34:	4b04      	ldr	r3, [pc, #16]	; (8039b48 <vTaskSuspendAll+0x18>)
 8039b36:	681b      	ldr	r3, [r3, #0]
 8039b38:	3301      	adds	r3, #1
 8039b3a:	4a03      	ldr	r2, [pc, #12]	; (8039b48 <vTaskSuspendAll+0x18>)
 8039b3c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8039b3e:	bf00      	nop
 8039b40:	46bd      	mov	sp, r7
 8039b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039b46:	4770      	bx	lr
 8039b48:	200018f4 	.word	0x200018f4

08039b4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8039b4c:	b580      	push	{r7, lr}
 8039b4e:	b084      	sub	sp, #16
 8039b50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8039b52:	2300      	movs	r3, #0
 8039b54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8039b56:	2300      	movs	r3, #0
 8039b58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8039b5a:	4b41      	ldr	r3, [pc, #260]	; (8039c60 <xTaskResumeAll+0x114>)
 8039b5c:	681b      	ldr	r3, [r3, #0]
 8039b5e:	2b00      	cmp	r3, #0
 8039b60:	d109      	bne.n	8039b76 <xTaskResumeAll+0x2a>
 8039b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8039b66:	f383 8811 	msr	BASEPRI, r3
 8039b6a:	f3bf 8f6f 	isb	sy
 8039b6e:	f3bf 8f4f 	dsb	sy
 8039b72:	603b      	str	r3, [r7, #0]
 8039b74:	e7fe      	b.n	8039b74 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8039b76:	f001 fce1 	bl	803b53c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8039b7a:	4b39      	ldr	r3, [pc, #228]	; (8039c60 <xTaskResumeAll+0x114>)
 8039b7c:	681b      	ldr	r3, [r3, #0]
 8039b7e:	3b01      	subs	r3, #1
 8039b80:	4a37      	ldr	r2, [pc, #220]	; (8039c60 <xTaskResumeAll+0x114>)
 8039b82:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8039b84:	4b36      	ldr	r3, [pc, #216]	; (8039c60 <xTaskResumeAll+0x114>)
 8039b86:	681b      	ldr	r3, [r3, #0]
 8039b88:	2b00      	cmp	r3, #0
 8039b8a:	d162      	bne.n	8039c52 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8039b8c:	4b35      	ldr	r3, [pc, #212]	; (8039c64 <xTaskResumeAll+0x118>)
 8039b8e:	681b      	ldr	r3, [r3, #0]
 8039b90:	2b00      	cmp	r3, #0
 8039b92:	d05e      	beq.n	8039c52 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8039b94:	e02f      	b.n	8039bf6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8039b96:	4b34      	ldr	r3, [pc, #208]	; (8039c68 <xTaskResumeAll+0x11c>)
 8039b98:	68db      	ldr	r3, [r3, #12]
 8039b9a:	68db      	ldr	r3, [r3, #12]
 8039b9c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8039b9e:	68fb      	ldr	r3, [r7, #12]
 8039ba0:	3318      	adds	r3, #24
 8039ba2:	4618      	mov	r0, r3
 8039ba4:	f7fe fd7e 	bl	80386a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8039ba8:	68fb      	ldr	r3, [r7, #12]
 8039baa:	3304      	adds	r3, #4
 8039bac:	4618      	mov	r0, r3
 8039bae:	f7fe fd79 	bl	80386a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8039bb2:	68fb      	ldr	r3, [r7, #12]
 8039bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8039bb6:	4b2d      	ldr	r3, [pc, #180]	; (8039c6c <xTaskResumeAll+0x120>)
 8039bb8:	681b      	ldr	r3, [r3, #0]
 8039bba:	429a      	cmp	r2, r3
 8039bbc:	d903      	bls.n	8039bc6 <xTaskResumeAll+0x7a>
 8039bbe:	68fb      	ldr	r3, [r7, #12]
 8039bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8039bc2:	4a2a      	ldr	r2, [pc, #168]	; (8039c6c <xTaskResumeAll+0x120>)
 8039bc4:	6013      	str	r3, [r2, #0]
 8039bc6:	68fb      	ldr	r3, [r7, #12]
 8039bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8039bca:	4613      	mov	r3, r2
 8039bcc:	009b      	lsls	r3, r3, #2
 8039bce:	4413      	add	r3, r2
 8039bd0:	009b      	lsls	r3, r3, #2
 8039bd2:	4a27      	ldr	r2, [pc, #156]	; (8039c70 <xTaskResumeAll+0x124>)
 8039bd4:	441a      	add	r2, r3
 8039bd6:	68fb      	ldr	r3, [r7, #12]
 8039bd8:	3304      	adds	r3, #4
 8039bda:	4619      	mov	r1, r3
 8039bdc:	4610      	mov	r0, r2
 8039bde:	f7fe fd04 	bl	80385ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8039be2:	68fb      	ldr	r3, [r7, #12]
 8039be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8039be6:	4b23      	ldr	r3, [pc, #140]	; (8039c74 <xTaskResumeAll+0x128>)
 8039be8:	681b      	ldr	r3, [r3, #0]
 8039bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8039bec:	429a      	cmp	r2, r3
 8039bee:	d302      	bcc.n	8039bf6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8039bf0:	4b21      	ldr	r3, [pc, #132]	; (8039c78 <xTaskResumeAll+0x12c>)
 8039bf2:	2201      	movs	r2, #1
 8039bf4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8039bf6:	4b1c      	ldr	r3, [pc, #112]	; (8039c68 <xTaskResumeAll+0x11c>)
 8039bf8:	681b      	ldr	r3, [r3, #0]
 8039bfa:	2b00      	cmp	r3, #0
 8039bfc:	d1cb      	bne.n	8039b96 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8039bfe:	68fb      	ldr	r3, [r7, #12]
 8039c00:	2b00      	cmp	r3, #0
 8039c02:	d001      	beq.n	8039c08 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8039c04:	f000 fc02 	bl	803a40c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8039c08:	4b1c      	ldr	r3, [pc, #112]	; (8039c7c <xTaskResumeAll+0x130>)
 8039c0a:	681b      	ldr	r3, [r3, #0]
 8039c0c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8039c0e:	687b      	ldr	r3, [r7, #4]
 8039c10:	2b00      	cmp	r3, #0
 8039c12:	d010      	beq.n	8039c36 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8039c14:	f000 f858 	bl	8039cc8 <xTaskIncrementTick>
 8039c18:	4603      	mov	r3, r0
 8039c1a:	2b00      	cmp	r3, #0
 8039c1c:	d002      	beq.n	8039c24 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8039c1e:	4b16      	ldr	r3, [pc, #88]	; (8039c78 <xTaskResumeAll+0x12c>)
 8039c20:	2201      	movs	r2, #1
 8039c22:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8039c24:	687b      	ldr	r3, [r7, #4]
 8039c26:	3b01      	subs	r3, #1
 8039c28:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8039c2a:	687b      	ldr	r3, [r7, #4]
 8039c2c:	2b00      	cmp	r3, #0
 8039c2e:	d1f1      	bne.n	8039c14 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8039c30:	4b12      	ldr	r3, [pc, #72]	; (8039c7c <xTaskResumeAll+0x130>)
 8039c32:	2200      	movs	r2, #0
 8039c34:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8039c36:	4b10      	ldr	r3, [pc, #64]	; (8039c78 <xTaskResumeAll+0x12c>)
 8039c38:	681b      	ldr	r3, [r3, #0]
 8039c3a:	2b00      	cmp	r3, #0
 8039c3c:	d009      	beq.n	8039c52 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8039c3e:	2301      	movs	r3, #1
 8039c40:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8039c42:	4b0f      	ldr	r3, [pc, #60]	; (8039c80 <xTaskResumeAll+0x134>)
 8039c44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8039c48:	601a      	str	r2, [r3, #0]
 8039c4a:	f3bf 8f4f 	dsb	sy
 8039c4e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8039c52:	f001 fca1 	bl	803b598 <vPortExitCritical>

	return xAlreadyYielded;
 8039c56:	68bb      	ldr	r3, [r7, #8]
}
 8039c58:	4618      	mov	r0, r3
 8039c5a:	3710      	adds	r7, #16
 8039c5c:	46bd      	mov	sp, r7
 8039c5e:	bd80      	pop	{r7, pc}
 8039c60:	200018f4 	.word	0x200018f4
 8039c64:	200018cc 	.word	0x200018cc
 8039c68:	2000188c 	.word	0x2000188c
 8039c6c:	200018d4 	.word	0x200018d4
 8039c70:	200013fc 	.word	0x200013fc
 8039c74:	200013f8 	.word	0x200013f8
 8039c78:	200018e0 	.word	0x200018e0
 8039c7c:	200018dc 	.word	0x200018dc
 8039c80:	e000ed04 	.word	0xe000ed04

08039c84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8039c84:	b480      	push	{r7}
 8039c86:	b083      	sub	sp, #12
 8039c88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8039c8a:	4b05      	ldr	r3, [pc, #20]	; (8039ca0 <xTaskGetTickCount+0x1c>)
 8039c8c:	681b      	ldr	r3, [r3, #0]
 8039c8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8039c90:	687b      	ldr	r3, [r7, #4]
}
 8039c92:	4618      	mov	r0, r3
 8039c94:	370c      	adds	r7, #12
 8039c96:	46bd      	mov	sp, r7
 8039c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039c9c:	4770      	bx	lr
 8039c9e:	bf00      	nop
 8039ca0:	200018d0 	.word	0x200018d0

08039ca4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8039ca4:	b580      	push	{r7, lr}
 8039ca6:	b082      	sub	sp, #8
 8039ca8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8039caa:	f001 fd23 	bl	803b6f4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8039cae:	2300      	movs	r3, #0
 8039cb0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8039cb2:	4b04      	ldr	r3, [pc, #16]	; (8039cc4 <xTaskGetTickCountFromISR+0x20>)
 8039cb4:	681b      	ldr	r3, [r3, #0]
 8039cb6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8039cb8:	683b      	ldr	r3, [r7, #0]
}
 8039cba:	4618      	mov	r0, r3
 8039cbc:	3708      	adds	r7, #8
 8039cbe:	46bd      	mov	sp, r7
 8039cc0:	bd80      	pop	{r7, pc}
 8039cc2:	bf00      	nop
 8039cc4:	200018d0 	.word	0x200018d0

08039cc8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8039cc8:	b580      	push	{r7, lr}
 8039cca:	b086      	sub	sp, #24
 8039ccc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8039cce:	2300      	movs	r3, #0
 8039cd0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8039cd2:	4b4e      	ldr	r3, [pc, #312]	; (8039e0c <xTaskIncrementTick+0x144>)
 8039cd4:	681b      	ldr	r3, [r3, #0]
 8039cd6:	2b00      	cmp	r3, #0
 8039cd8:	f040 8088 	bne.w	8039dec <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8039cdc:	4b4c      	ldr	r3, [pc, #304]	; (8039e10 <xTaskIncrementTick+0x148>)
 8039cde:	681b      	ldr	r3, [r3, #0]
 8039ce0:	3301      	adds	r3, #1
 8039ce2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8039ce4:	4a4a      	ldr	r2, [pc, #296]	; (8039e10 <xTaskIncrementTick+0x148>)
 8039ce6:	693b      	ldr	r3, [r7, #16]
 8039ce8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8039cea:	693b      	ldr	r3, [r7, #16]
 8039cec:	2b00      	cmp	r3, #0
 8039cee:	d11f      	bne.n	8039d30 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8039cf0:	4b48      	ldr	r3, [pc, #288]	; (8039e14 <xTaskIncrementTick+0x14c>)
 8039cf2:	681b      	ldr	r3, [r3, #0]
 8039cf4:	681b      	ldr	r3, [r3, #0]
 8039cf6:	2b00      	cmp	r3, #0
 8039cf8:	d009      	beq.n	8039d0e <xTaskIncrementTick+0x46>
 8039cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8039cfe:	f383 8811 	msr	BASEPRI, r3
 8039d02:	f3bf 8f6f 	isb	sy
 8039d06:	f3bf 8f4f 	dsb	sy
 8039d0a:	603b      	str	r3, [r7, #0]
 8039d0c:	e7fe      	b.n	8039d0c <xTaskIncrementTick+0x44>
 8039d0e:	4b41      	ldr	r3, [pc, #260]	; (8039e14 <xTaskIncrementTick+0x14c>)
 8039d10:	681b      	ldr	r3, [r3, #0]
 8039d12:	60fb      	str	r3, [r7, #12]
 8039d14:	4b40      	ldr	r3, [pc, #256]	; (8039e18 <xTaskIncrementTick+0x150>)
 8039d16:	681b      	ldr	r3, [r3, #0]
 8039d18:	4a3e      	ldr	r2, [pc, #248]	; (8039e14 <xTaskIncrementTick+0x14c>)
 8039d1a:	6013      	str	r3, [r2, #0]
 8039d1c:	4a3e      	ldr	r2, [pc, #248]	; (8039e18 <xTaskIncrementTick+0x150>)
 8039d1e:	68fb      	ldr	r3, [r7, #12]
 8039d20:	6013      	str	r3, [r2, #0]
 8039d22:	4b3e      	ldr	r3, [pc, #248]	; (8039e1c <xTaskIncrementTick+0x154>)
 8039d24:	681b      	ldr	r3, [r3, #0]
 8039d26:	3301      	adds	r3, #1
 8039d28:	4a3c      	ldr	r2, [pc, #240]	; (8039e1c <xTaskIncrementTick+0x154>)
 8039d2a:	6013      	str	r3, [r2, #0]
 8039d2c:	f000 fb6e 	bl	803a40c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8039d30:	4b3b      	ldr	r3, [pc, #236]	; (8039e20 <xTaskIncrementTick+0x158>)
 8039d32:	681b      	ldr	r3, [r3, #0]
 8039d34:	693a      	ldr	r2, [r7, #16]
 8039d36:	429a      	cmp	r2, r3
 8039d38:	d349      	bcc.n	8039dce <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8039d3a:	4b36      	ldr	r3, [pc, #216]	; (8039e14 <xTaskIncrementTick+0x14c>)
 8039d3c:	681b      	ldr	r3, [r3, #0]
 8039d3e:	681b      	ldr	r3, [r3, #0]
 8039d40:	2b00      	cmp	r3, #0
 8039d42:	d104      	bne.n	8039d4e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8039d44:	4b36      	ldr	r3, [pc, #216]	; (8039e20 <xTaskIncrementTick+0x158>)
 8039d46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8039d4a:	601a      	str	r2, [r3, #0]
					break;
 8039d4c:	e03f      	b.n	8039dce <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8039d4e:	4b31      	ldr	r3, [pc, #196]	; (8039e14 <xTaskIncrementTick+0x14c>)
 8039d50:	681b      	ldr	r3, [r3, #0]
 8039d52:	68db      	ldr	r3, [r3, #12]
 8039d54:	68db      	ldr	r3, [r3, #12]
 8039d56:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8039d58:	68bb      	ldr	r3, [r7, #8]
 8039d5a:	685b      	ldr	r3, [r3, #4]
 8039d5c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8039d5e:	693a      	ldr	r2, [r7, #16]
 8039d60:	687b      	ldr	r3, [r7, #4]
 8039d62:	429a      	cmp	r2, r3
 8039d64:	d203      	bcs.n	8039d6e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8039d66:	4a2e      	ldr	r2, [pc, #184]	; (8039e20 <xTaskIncrementTick+0x158>)
 8039d68:	687b      	ldr	r3, [r7, #4]
 8039d6a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8039d6c:	e02f      	b.n	8039dce <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8039d6e:	68bb      	ldr	r3, [r7, #8]
 8039d70:	3304      	adds	r3, #4
 8039d72:	4618      	mov	r0, r3
 8039d74:	f7fe fc96 	bl	80386a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8039d78:	68bb      	ldr	r3, [r7, #8]
 8039d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8039d7c:	2b00      	cmp	r3, #0
 8039d7e:	d004      	beq.n	8039d8a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8039d80:	68bb      	ldr	r3, [r7, #8]
 8039d82:	3318      	adds	r3, #24
 8039d84:	4618      	mov	r0, r3
 8039d86:	f7fe fc8d 	bl	80386a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8039d8a:	68bb      	ldr	r3, [r7, #8]
 8039d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8039d8e:	4b25      	ldr	r3, [pc, #148]	; (8039e24 <xTaskIncrementTick+0x15c>)
 8039d90:	681b      	ldr	r3, [r3, #0]
 8039d92:	429a      	cmp	r2, r3
 8039d94:	d903      	bls.n	8039d9e <xTaskIncrementTick+0xd6>
 8039d96:	68bb      	ldr	r3, [r7, #8]
 8039d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8039d9a:	4a22      	ldr	r2, [pc, #136]	; (8039e24 <xTaskIncrementTick+0x15c>)
 8039d9c:	6013      	str	r3, [r2, #0]
 8039d9e:	68bb      	ldr	r3, [r7, #8]
 8039da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8039da2:	4613      	mov	r3, r2
 8039da4:	009b      	lsls	r3, r3, #2
 8039da6:	4413      	add	r3, r2
 8039da8:	009b      	lsls	r3, r3, #2
 8039daa:	4a1f      	ldr	r2, [pc, #124]	; (8039e28 <xTaskIncrementTick+0x160>)
 8039dac:	441a      	add	r2, r3
 8039dae:	68bb      	ldr	r3, [r7, #8]
 8039db0:	3304      	adds	r3, #4
 8039db2:	4619      	mov	r1, r3
 8039db4:	4610      	mov	r0, r2
 8039db6:	f7fe fc18 	bl	80385ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8039dba:	68bb      	ldr	r3, [r7, #8]
 8039dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8039dbe:	4b1b      	ldr	r3, [pc, #108]	; (8039e2c <xTaskIncrementTick+0x164>)
 8039dc0:	681b      	ldr	r3, [r3, #0]
 8039dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8039dc4:	429a      	cmp	r2, r3
 8039dc6:	d3b8      	bcc.n	8039d3a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8039dc8:	2301      	movs	r3, #1
 8039dca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8039dcc:	e7b5      	b.n	8039d3a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8039dce:	4b17      	ldr	r3, [pc, #92]	; (8039e2c <xTaskIncrementTick+0x164>)
 8039dd0:	681b      	ldr	r3, [r3, #0]
 8039dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8039dd4:	4914      	ldr	r1, [pc, #80]	; (8039e28 <xTaskIncrementTick+0x160>)
 8039dd6:	4613      	mov	r3, r2
 8039dd8:	009b      	lsls	r3, r3, #2
 8039dda:	4413      	add	r3, r2
 8039ddc:	009b      	lsls	r3, r3, #2
 8039dde:	440b      	add	r3, r1
 8039de0:	681b      	ldr	r3, [r3, #0]
 8039de2:	2b01      	cmp	r3, #1
 8039de4:	d907      	bls.n	8039df6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8039de6:	2301      	movs	r3, #1
 8039de8:	617b      	str	r3, [r7, #20]
 8039dea:	e004      	b.n	8039df6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8039dec:	4b10      	ldr	r3, [pc, #64]	; (8039e30 <xTaskIncrementTick+0x168>)
 8039dee:	681b      	ldr	r3, [r3, #0]
 8039df0:	3301      	adds	r3, #1
 8039df2:	4a0f      	ldr	r2, [pc, #60]	; (8039e30 <xTaskIncrementTick+0x168>)
 8039df4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8039df6:	4b0f      	ldr	r3, [pc, #60]	; (8039e34 <xTaskIncrementTick+0x16c>)
 8039df8:	681b      	ldr	r3, [r3, #0]
 8039dfa:	2b00      	cmp	r3, #0
 8039dfc:	d001      	beq.n	8039e02 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8039dfe:	2301      	movs	r3, #1
 8039e00:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8039e02:	697b      	ldr	r3, [r7, #20]
}
 8039e04:	4618      	mov	r0, r3
 8039e06:	3718      	adds	r7, #24
 8039e08:	46bd      	mov	sp, r7
 8039e0a:	bd80      	pop	{r7, pc}
 8039e0c:	200018f4 	.word	0x200018f4
 8039e10:	200018d0 	.word	0x200018d0
 8039e14:	20001884 	.word	0x20001884
 8039e18:	20001888 	.word	0x20001888
 8039e1c:	200018e4 	.word	0x200018e4
 8039e20:	200018ec 	.word	0x200018ec
 8039e24:	200018d4 	.word	0x200018d4
 8039e28:	200013fc 	.word	0x200013fc
 8039e2c:	200013f8 	.word	0x200013f8
 8039e30:	200018dc 	.word	0x200018dc
 8039e34:	200018e0 	.word	0x200018e0

08039e38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8039e38:	b480      	push	{r7}
 8039e3a:	b085      	sub	sp, #20
 8039e3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8039e3e:	4b27      	ldr	r3, [pc, #156]	; (8039edc <vTaskSwitchContext+0xa4>)
 8039e40:	681b      	ldr	r3, [r3, #0]
 8039e42:	2b00      	cmp	r3, #0
 8039e44:	d003      	beq.n	8039e4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8039e46:	4b26      	ldr	r3, [pc, #152]	; (8039ee0 <vTaskSwitchContext+0xa8>)
 8039e48:	2201      	movs	r2, #1
 8039e4a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8039e4c:	e040      	b.n	8039ed0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8039e4e:	4b24      	ldr	r3, [pc, #144]	; (8039ee0 <vTaskSwitchContext+0xa8>)
 8039e50:	2200      	movs	r2, #0
 8039e52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8039e54:	4b23      	ldr	r3, [pc, #140]	; (8039ee4 <vTaskSwitchContext+0xac>)
 8039e56:	681b      	ldr	r3, [r3, #0]
 8039e58:	60fb      	str	r3, [r7, #12]
 8039e5a:	e00f      	b.n	8039e7c <vTaskSwitchContext+0x44>
 8039e5c:	68fb      	ldr	r3, [r7, #12]
 8039e5e:	2b00      	cmp	r3, #0
 8039e60:	d109      	bne.n	8039e76 <vTaskSwitchContext+0x3e>
 8039e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8039e66:	f383 8811 	msr	BASEPRI, r3
 8039e6a:	f3bf 8f6f 	isb	sy
 8039e6e:	f3bf 8f4f 	dsb	sy
 8039e72:	607b      	str	r3, [r7, #4]
 8039e74:	e7fe      	b.n	8039e74 <vTaskSwitchContext+0x3c>
 8039e76:	68fb      	ldr	r3, [r7, #12]
 8039e78:	3b01      	subs	r3, #1
 8039e7a:	60fb      	str	r3, [r7, #12]
 8039e7c:	491a      	ldr	r1, [pc, #104]	; (8039ee8 <vTaskSwitchContext+0xb0>)
 8039e7e:	68fa      	ldr	r2, [r7, #12]
 8039e80:	4613      	mov	r3, r2
 8039e82:	009b      	lsls	r3, r3, #2
 8039e84:	4413      	add	r3, r2
 8039e86:	009b      	lsls	r3, r3, #2
 8039e88:	440b      	add	r3, r1
 8039e8a:	681b      	ldr	r3, [r3, #0]
 8039e8c:	2b00      	cmp	r3, #0
 8039e8e:	d0e5      	beq.n	8039e5c <vTaskSwitchContext+0x24>
 8039e90:	68fa      	ldr	r2, [r7, #12]
 8039e92:	4613      	mov	r3, r2
 8039e94:	009b      	lsls	r3, r3, #2
 8039e96:	4413      	add	r3, r2
 8039e98:	009b      	lsls	r3, r3, #2
 8039e9a:	4a13      	ldr	r2, [pc, #76]	; (8039ee8 <vTaskSwitchContext+0xb0>)
 8039e9c:	4413      	add	r3, r2
 8039e9e:	60bb      	str	r3, [r7, #8]
 8039ea0:	68bb      	ldr	r3, [r7, #8]
 8039ea2:	685b      	ldr	r3, [r3, #4]
 8039ea4:	685a      	ldr	r2, [r3, #4]
 8039ea6:	68bb      	ldr	r3, [r7, #8]
 8039ea8:	605a      	str	r2, [r3, #4]
 8039eaa:	68bb      	ldr	r3, [r7, #8]
 8039eac:	685a      	ldr	r2, [r3, #4]
 8039eae:	68bb      	ldr	r3, [r7, #8]
 8039eb0:	3308      	adds	r3, #8
 8039eb2:	429a      	cmp	r2, r3
 8039eb4:	d104      	bne.n	8039ec0 <vTaskSwitchContext+0x88>
 8039eb6:	68bb      	ldr	r3, [r7, #8]
 8039eb8:	685b      	ldr	r3, [r3, #4]
 8039eba:	685a      	ldr	r2, [r3, #4]
 8039ebc:	68bb      	ldr	r3, [r7, #8]
 8039ebe:	605a      	str	r2, [r3, #4]
 8039ec0:	68bb      	ldr	r3, [r7, #8]
 8039ec2:	685b      	ldr	r3, [r3, #4]
 8039ec4:	68db      	ldr	r3, [r3, #12]
 8039ec6:	4a09      	ldr	r2, [pc, #36]	; (8039eec <vTaskSwitchContext+0xb4>)
 8039ec8:	6013      	str	r3, [r2, #0]
 8039eca:	4a06      	ldr	r2, [pc, #24]	; (8039ee4 <vTaskSwitchContext+0xac>)
 8039ecc:	68fb      	ldr	r3, [r7, #12]
 8039ece:	6013      	str	r3, [r2, #0]
}
 8039ed0:	bf00      	nop
 8039ed2:	3714      	adds	r7, #20
 8039ed4:	46bd      	mov	sp, r7
 8039ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039eda:	4770      	bx	lr
 8039edc:	200018f4 	.word	0x200018f4
 8039ee0:	200018e0 	.word	0x200018e0
 8039ee4:	200018d4 	.word	0x200018d4
 8039ee8:	200013fc 	.word	0x200013fc
 8039eec:	200013f8 	.word	0x200013f8

08039ef0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8039ef0:	b580      	push	{r7, lr}
 8039ef2:	b084      	sub	sp, #16
 8039ef4:	af00      	add	r7, sp, #0
 8039ef6:	6078      	str	r0, [r7, #4]
 8039ef8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8039efa:	687b      	ldr	r3, [r7, #4]
 8039efc:	2b00      	cmp	r3, #0
 8039efe:	d109      	bne.n	8039f14 <vTaskPlaceOnEventList+0x24>
 8039f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8039f04:	f383 8811 	msr	BASEPRI, r3
 8039f08:	f3bf 8f6f 	isb	sy
 8039f0c:	f3bf 8f4f 	dsb	sy
 8039f10:	60fb      	str	r3, [r7, #12]
 8039f12:	e7fe      	b.n	8039f12 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8039f14:	4b07      	ldr	r3, [pc, #28]	; (8039f34 <vTaskPlaceOnEventList+0x44>)
 8039f16:	681b      	ldr	r3, [r3, #0]
 8039f18:	3318      	adds	r3, #24
 8039f1a:	4619      	mov	r1, r3
 8039f1c:	6878      	ldr	r0, [r7, #4]
 8039f1e:	f7fe fb88 	bl	8038632 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8039f22:	2101      	movs	r1, #1
 8039f24:	6838      	ldr	r0, [r7, #0]
 8039f26:	f000 fe25 	bl	803ab74 <prvAddCurrentTaskToDelayedList>
}
 8039f2a:	bf00      	nop
 8039f2c:	3710      	adds	r7, #16
 8039f2e:	46bd      	mov	sp, r7
 8039f30:	bd80      	pop	{r7, pc}
 8039f32:	bf00      	nop
 8039f34:	200013f8 	.word	0x200013f8

08039f38 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8039f38:	b580      	push	{r7, lr}
 8039f3a:	b086      	sub	sp, #24
 8039f3c:	af00      	add	r7, sp, #0
 8039f3e:	60f8      	str	r0, [r7, #12]
 8039f40:	60b9      	str	r1, [r7, #8]
 8039f42:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8039f44:	68fb      	ldr	r3, [r7, #12]
 8039f46:	2b00      	cmp	r3, #0
 8039f48:	d109      	bne.n	8039f5e <vTaskPlaceOnUnorderedEventList+0x26>
 8039f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8039f4e:	f383 8811 	msr	BASEPRI, r3
 8039f52:	f3bf 8f6f 	isb	sy
 8039f56:	f3bf 8f4f 	dsb	sy
 8039f5a:	617b      	str	r3, [r7, #20]
 8039f5c:	e7fe      	b.n	8039f5c <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8039f5e:	4b11      	ldr	r3, [pc, #68]	; (8039fa4 <vTaskPlaceOnUnorderedEventList+0x6c>)
 8039f60:	681b      	ldr	r3, [r3, #0]
 8039f62:	2b00      	cmp	r3, #0
 8039f64:	d109      	bne.n	8039f7a <vTaskPlaceOnUnorderedEventList+0x42>
 8039f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8039f6a:	f383 8811 	msr	BASEPRI, r3
 8039f6e:	f3bf 8f6f 	isb	sy
 8039f72:	f3bf 8f4f 	dsb	sy
 8039f76:	613b      	str	r3, [r7, #16]
 8039f78:	e7fe      	b.n	8039f78 <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8039f7a:	4b0b      	ldr	r3, [pc, #44]	; (8039fa8 <vTaskPlaceOnUnorderedEventList+0x70>)
 8039f7c:	681b      	ldr	r3, [r3, #0]
 8039f7e:	68ba      	ldr	r2, [r7, #8]
 8039f80:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8039f84:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8039f86:	4b08      	ldr	r3, [pc, #32]	; (8039fa8 <vTaskPlaceOnUnorderedEventList+0x70>)
 8039f88:	681b      	ldr	r3, [r3, #0]
 8039f8a:	3318      	adds	r3, #24
 8039f8c:	4619      	mov	r1, r3
 8039f8e:	68f8      	ldr	r0, [r7, #12]
 8039f90:	f7fe fb2b 	bl	80385ea <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8039f94:	2101      	movs	r1, #1
 8039f96:	6878      	ldr	r0, [r7, #4]
 8039f98:	f000 fdec 	bl	803ab74 <prvAddCurrentTaskToDelayedList>
}
 8039f9c:	bf00      	nop
 8039f9e:	3718      	adds	r7, #24
 8039fa0:	46bd      	mov	sp, r7
 8039fa2:	bd80      	pop	{r7, pc}
 8039fa4:	200018f4 	.word	0x200018f4
 8039fa8:	200013f8 	.word	0x200013f8

08039fac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8039fac:	b580      	push	{r7, lr}
 8039fae:	b086      	sub	sp, #24
 8039fb0:	af00      	add	r7, sp, #0
 8039fb2:	60f8      	str	r0, [r7, #12]
 8039fb4:	60b9      	str	r1, [r7, #8]
 8039fb6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8039fb8:	68fb      	ldr	r3, [r7, #12]
 8039fba:	2b00      	cmp	r3, #0
 8039fbc:	d109      	bne.n	8039fd2 <vTaskPlaceOnEventListRestricted+0x26>
 8039fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8039fc2:	f383 8811 	msr	BASEPRI, r3
 8039fc6:	f3bf 8f6f 	isb	sy
 8039fca:	f3bf 8f4f 	dsb	sy
 8039fce:	617b      	str	r3, [r7, #20]
 8039fd0:	e7fe      	b.n	8039fd0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8039fd2:	4b0a      	ldr	r3, [pc, #40]	; (8039ffc <vTaskPlaceOnEventListRestricted+0x50>)
 8039fd4:	681b      	ldr	r3, [r3, #0]
 8039fd6:	3318      	adds	r3, #24
 8039fd8:	4619      	mov	r1, r3
 8039fda:	68f8      	ldr	r0, [r7, #12]
 8039fdc:	f7fe fb05 	bl	80385ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8039fe0:	687b      	ldr	r3, [r7, #4]
 8039fe2:	2b00      	cmp	r3, #0
 8039fe4:	d002      	beq.n	8039fec <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8039fe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8039fea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8039fec:	6879      	ldr	r1, [r7, #4]
 8039fee:	68b8      	ldr	r0, [r7, #8]
 8039ff0:	f000 fdc0 	bl	803ab74 <prvAddCurrentTaskToDelayedList>
	}
 8039ff4:	bf00      	nop
 8039ff6:	3718      	adds	r7, #24
 8039ff8:	46bd      	mov	sp, r7
 8039ffa:	bd80      	pop	{r7, pc}
 8039ffc:	200013f8 	.word	0x200013f8

0803a000 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 803a000:	b580      	push	{r7, lr}
 803a002:	b086      	sub	sp, #24
 803a004:	af00      	add	r7, sp, #0
 803a006:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 803a008:	687b      	ldr	r3, [r7, #4]
 803a00a:	68db      	ldr	r3, [r3, #12]
 803a00c:	68db      	ldr	r3, [r3, #12]
 803a00e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 803a010:	693b      	ldr	r3, [r7, #16]
 803a012:	2b00      	cmp	r3, #0
 803a014:	d109      	bne.n	803a02a <xTaskRemoveFromEventList+0x2a>
 803a016:	f04f 0350 	mov.w	r3, #80	; 0x50
 803a01a:	f383 8811 	msr	BASEPRI, r3
 803a01e:	f3bf 8f6f 	isb	sy
 803a022:	f3bf 8f4f 	dsb	sy
 803a026:	60fb      	str	r3, [r7, #12]
 803a028:	e7fe      	b.n	803a028 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 803a02a:	693b      	ldr	r3, [r7, #16]
 803a02c:	3318      	adds	r3, #24
 803a02e:	4618      	mov	r0, r3
 803a030:	f7fe fb38 	bl	80386a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 803a034:	4b1d      	ldr	r3, [pc, #116]	; (803a0ac <xTaskRemoveFromEventList+0xac>)
 803a036:	681b      	ldr	r3, [r3, #0]
 803a038:	2b00      	cmp	r3, #0
 803a03a:	d11d      	bne.n	803a078 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 803a03c:	693b      	ldr	r3, [r7, #16]
 803a03e:	3304      	adds	r3, #4
 803a040:	4618      	mov	r0, r3
 803a042:	f7fe fb2f 	bl	80386a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 803a046:	693b      	ldr	r3, [r7, #16]
 803a048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803a04a:	4b19      	ldr	r3, [pc, #100]	; (803a0b0 <xTaskRemoveFromEventList+0xb0>)
 803a04c:	681b      	ldr	r3, [r3, #0]
 803a04e:	429a      	cmp	r2, r3
 803a050:	d903      	bls.n	803a05a <xTaskRemoveFromEventList+0x5a>
 803a052:	693b      	ldr	r3, [r7, #16]
 803a054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803a056:	4a16      	ldr	r2, [pc, #88]	; (803a0b0 <xTaskRemoveFromEventList+0xb0>)
 803a058:	6013      	str	r3, [r2, #0]
 803a05a:	693b      	ldr	r3, [r7, #16]
 803a05c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803a05e:	4613      	mov	r3, r2
 803a060:	009b      	lsls	r3, r3, #2
 803a062:	4413      	add	r3, r2
 803a064:	009b      	lsls	r3, r3, #2
 803a066:	4a13      	ldr	r2, [pc, #76]	; (803a0b4 <xTaskRemoveFromEventList+0xb4>)
 803a068:	441a      	add	r2, r3
 803a06a:	693b      	ldr	r3, [r7, #16]
 803a06c:	3304      	adds	r3, #4
 803a06e:	4619      	mov	r1, r3
 803a070:	4610      	mov	r0, r2
 803a072:	f7fe faba 	bl	80385ea <vListInsertEnd>
 803a076:	e005      	b.n	803a084 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 803a078:	693b      	ldr	r3, [r7, #16]
 803a07a:	3318      	adds	r3, #24
 803a07c:	4619      	mov	r1, r3
 803a07e:	480e      	ldr	r0, [pc, #56]	; (803a0b8 <xTaskRemoveFromEventList+0xb8>)
 803a080:	f7fe fab3 	bl	80385ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 803a084:	693b      	ldr	r3, [r7, #16]
 803a086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803a088:	4b0c      	ldr	r3, [pc, #48]	; (803a0bc <xTaskRemoveFromEventList+0xbc>)
 803a08a:	681b      	ldr	r3, [r3, #0]
 803a08c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803a08e:	429a      	cmp	r2, r3
 803a090:	d905      	bls.n	803a09e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 803a092:	2301      	movs	r3, #1
 803a094:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 803a096:	4b0a      	ldr	r3, [pc, #40]	; (803a0c0 <xTaskRemoveFromEventList+0xc0>)
 803a098:	2201      	movs	r2, #1
 803a09a:	601a      	str	r2, [r3, #0]
 803a09c:	e001      	b.n	803a0a2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 803a09e:	2300      	movs	r3, #0
 803a0a0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 803a0a2:	697b      	ldr	r3, [r7, #20]
}
 803a0a4:	4618      	mov	r0, r3
 803a0a6:	3718      	adds	r7, #24
 803a0a8:	46bd      	mov	sp, r7
 803a0aa:	bd80      	pop	{r7, pc}
 803a0ac:	200018f4 	.word	0x200018f4
 803a0b0:	200018d4 	.word	0x200018d4
 803a0b4:	200013fc 	.word	0x200013fc
 803a0b8:	2000188c 	.word	0x2000188c
 803a0bc:	200013f8 	.word	0x200013f8
 803a0c0:	200018e0 	.word	0x200018e0

0803a0c4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 803a0c4:	b580      	push	{r7, lr}
 803a0c6:	b086      	sub	sp, #24
 803a0c8:	af00      	add	r7, sp, #0
 803a0ca:	6078      	str	r0, [r7, #4]
 803a0cc:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 803a0ce:	4b28      	ldr	r3, [pc, #160]	; (803a170 <vTaskRemoveFromUnorderedEventList+0xac>)
 803a0d0:	681b      	ldr	r3, [r3, #0]
 803a0d2:	2b00      	cmp	r3, #0
 803a0d4:	d109      	bne.n	803a0ea <vTaskRemoveFromUnorderedEventList+0x26>
 803a0d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 803a0da:	f383 8811 	msr	BASEPRI, r3
 803a0de:	f3bf 8f6f 	isb	sy
 803a0e2:	f3bf 8f4f 	dsb	sy
 803a0e6:	613b      	str	r3, [r7, #16]
 803a0e8:	e7fe      	b.n	803a0e8 <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 803a0ea:	683b      	ldr	r3, [r7, #0]
 803a0ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 803a0f0:	687b      	ldr	r3, [r7, #4]
 803a0f2:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 803a0f4:	687b      	ldr	r3, [r7, #4]
 803a0f6:	68db      	ldr	r3, [r3, #12]
 803a0f8:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 803a0fa:	697b      	ldr	r3, [r7, #20]
 803a0fc:	2b00      	cmp	r3, #0
 803a0fe:	d109      	bne.n	803a114 <vTaskRemoveFromUnorderedEventList+0x50>
 803a100:	f04f 0350 	mov.w	r3, #80	; 0x50
 803a104:	f383 8811 	msr	BASEPRI, r3
 803a108:	f3bf 8f6f 	isb	sy
 803a10c:	f3bf 8f4f 	dsb	sy
 803a110:	60fb      	str	r3, [r7, #12]
 803a112:	e7fe      	b.n	803a112 <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 803a114:	6878      	ldr	r0, [r7, #4]
 803a116:	f7fe fac5 	bl	80386a4 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 803a11a:	697b      	ldr	r3, [r7, #20]
 803a11c:	3304      	adds	r3, #4
 803a11e:	4618      	mov	r0, r3
 803a120:	f7fe fac0 	bl	80386a4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 803a124:	697b      	ldr	r3, [r7, #20]
 803a126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803a128:	4b12      	ldr	r3, [pc, #72]	; (803a174 <vTaskRemoveFromUnorderedEventList+0xb0>)
 803a12a:	681b      	ldr	r3, [r3, #0]
 803a12c:	429a      	cmp	r2, r3
 803a12e:	d903      	bls.n	803a138 <vTaskRemoveFromUnorderedEventList+0x74>
 803a130:	697b      	ldr	r3, [r7, #20]
 803a132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803a134:	4a0f      	ldr	r2, [pc, #60]	; (803a174 <vTaskRemoveFromUnorderedEventList+0xb0>)
 803a136:	6013      	str	r3, [r2, #0]
 803a138:	697b      	ldr	r3, [r7, #20]
 803a13a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803a13c:	4613      	mov	r3, r2
 803a13e:	009b      	lsls	r3, r3, #2
 803a140:	4413      	add	r3, r2
 803a142:	009b      	lsls	r3, r3, #2
 803a144:	4a0c      	ldr	r2, [pc, #48]	; (803a178 <vTaskRemoveFromUnorderedEventList+0xb4>)
 803a146:	441a      	add	r2, r3
 803a148:	697b      	ldr	r3, [r7, #20]
 803a14a:	3304      	adds	r3, #4
 803a14c:	4619      	mov	r1, r3
 803a14e:	4610      	mov	r0, r2
 803a150:	f7fe fa4b 	bl	80385ea <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 803a154:	697b      	ldr	r3, [r7, #20]
 803a156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803a158:	4b08      	ldr	r3, [pc, #32]	; (803a17c <vTaskRemoveFromUnorderedEventList+0xb8>)
 803a15a:	681b      	ldr	r3, [r3, #0]
 803a15c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803a15e:	429a      	cmp	r2, r3
 803a160:	d902      	bls.n	803a168 <vTaskRemoveFromUnorderedEventList+0xa4>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 803a162:	4b07      	ldr	r3, [pc, #28]	; (803a180 <vTaskRemoveFromUnorderedEventList+0xbc>)
 803a164:	2201      	movs	r2, #1
 803a166:	601a      	str	r2, [r3, #0]
	}
}
 803a168:	bf00      	nop
 803a16a:	3718      	adds	r7, #24
 803a16c:	46bd      	mov	sp, r7
 803a16e:	bd80      	pop	{r7, pc}
 803a170:	200018f4 	.word	0x200018f4
 803a174:	200018d4 	.word	0x200018d4
 803a178:	200013fc 	.word	0x200013fc
 803a17c:	200013f8 	.word	0x200013f8
 803a180:	200018e0 	.word	0x200018e0

0803a184 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 803a184:	b480      	push	{r7}
 803a186:	b083      	sub	sp, #12
 803a188:	af00      	add	r7, sp, #0
 803a18a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 803a18c:	4b06      	ldr	r3, [pc, #24]	; (803a1a8 <vTaskInternalSetTimeOutState+0x24>)
 803a18e:	681a      	ldr	r2, [r3, #0]
 803a190:	687b      	ldr	r3, [r7, #4]
 803a192:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 803a194:	4b05      	ldr	r3, [pc, #20]	; (803a1ac <vTaskInternalSetTimeOutState+0x28>)
 803a196:	681a      	ldr	r2, [r3, #0]
 803a198:	687b      	ldr	r3, [r7, #4]
 803a19a:	605a      	str	r2, [r3, #4]
}
 803a19c:	bf00      	nop
 803a19e:	370c      	adds	r7, #12
 803a1a0:	46bd      	mov	sp, r7
 803a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a1a6:	4770      	bx	lr
 803a1a8:	200018e4 	.word	0x200018e4
 803a1ac:	200018d0 	.word	0x200018d0

0803a1b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 803a1b0:	b580      	push	{r7, lr}
 803a1b2:	b088      	sub	sp, #32
 803a1b4:	af00      	add	r7, sp, #0
 803a1b6:	6078      	str	r0, [r7, #4]
 803a1b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 803a1ba:	687b      	ldr	r3, [r7, #4]
 803a1bc:	2b00      	cmp	r3, #0
 803a1be:	d109      	bne.n	803a1d4 <xTaskCheckForTimeOut+0x24>
 803a1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 803a1c4:	f383 8811 	msr	BASEPRI, r3
 803a1c8:	f3bf 8f6f 	isb	sy
 803a1cc:	f3bf 8f4f 	dsb	sy
 803a1d0:	613b      	str	r3, [r7, #16]
 803a1d2:	e7fe      	b.n	803a1d2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 803a1d4:	683b      	ldr	r3, [r7, #0]
 803a1d6:	2b00      	cmp	r3, #0
 803a1d8:	d109      	bne.n	803a1ee <xTaskCheckForTimeOut+0x3e>
 803a1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 803a1de:	f383 8811 	msr	BASEPRI, r3
 803a1e2:	f3bf 8f6f 	isb	sy
 803a1e6:	f3bf 8f4f 	dsb	sy
 803a1ea:	60fb      	str	r3, [r7, #12]
 803a1ec:	e7fe      	b.n	803a1ec <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 803a1ee:	f001 f9a5 	bl	803b53c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 803a1f2:	4b24      	ldr	r3, [pc, #144]	; (803a284 <xTaskCheckForTimeOut+0xd4>)
 803a1f4:	681b      	ldr	r3, [r3, #0]
 803a1f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 803a1f8:	687b      	ldr	r3, [r7, #4]
 803a1fa:	685b      	ldr	r3, [r3, #4]
 803a1fc:	69ba      	ldr	r2, [r7, #24]
 803a1fe:	1ad3      	subs	r3, r2, r3
 803a200:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 803a202:	4b21      	ldr	r3, [pc, #132]	; (803a288 <xTaskCheckForTimeOut+0xd8>)
 803a204:	681b      	ldr	r3, [r3, #0]
 803a206:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 803a20a:	2b00      	cmp	r3, #0
 803a20c:	d007      	beq.n	803a21e <xTaskCheckForTimeOut+0x6e>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 803a20e:	4b1e      	ldr	r3, [pc, #120]	; (803a288 <xTaskCheckForTimeOut+0xd8>)
 803a210:	681b      	ldr	r3, [r3, #0]
 803a212:	2200      	movs	r2, #0
 803a214:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
				xReturn = pdTRUE;
 803a218:	2301      	movs	r3, #1
 803a21a:	61fb      	str	r3, [r7, #28]
 803a21c:	e02b      	b.n	803a276 <xTaskCheckForTimeOut+0xc6>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 803a21e:	683b      	ldr	r3, [r7, #0]
 803a220:	681b      	ldr	r3, [r3, #0]
 803a222:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 803a226:	d102      	bne.n	803a22e <xTaskCheckForTimeOut+0x7e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 803a228:	2300      	movs	r3, #0
 803a22a:	61fb      	str	r3, [r7, #28]
 803a22c:	e023      	b.n	803a276 <xTaskCheckForTimeOut+0xc6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 803a22e:	687b      	ldr	r3, [r7, #4]
 803a230:	681a      	ldr	r2, [r3, #0]
 803a232:	4b16      	ldr	r3, [pc, #88]	; (803a28c <xTaskCheckForTimeOut+0xdc>)
 803a234:	681b      	ldr	r3, [r3, #0]
 803a236:	429a      	cmp	r2, r3
 803a238:	d007      	beq.n	803a24a <xTaskCheckForTimeOut+0x9a>
 803a23a:	687b      	ldr	r3, [r7, #4]
 803a23c:	685b      	ldr	r3, [r3, #4]
 803a23e:	69ba      	ldr	r2, [r7, #24]
 803a240:	429a      	cmp	r2, r3
 803a242:	d302      	bcc.n	803a24a <xTaskCheckForTimeOut+0x9a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 803a244:	2301      	movs	r3, #1
 803a246:	61fb      	str	r3, [r7, #28]
 803a248:	e015      	b.n	803a276 <xTaskCheckForTimeOut+0xc6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 803a24a:	683b      	ldr	r3, [r7, #0]
 803a24c:	681b      	ldr	r3, [r3, #0]
 803a24e:	697a      	ldr	r2, [r7, #20]
 803a250:	429a      	cmp	r2, r3
 803a252:	d20b      	bcs.n	803a26c <xTaskCheckForTimeOut+0xbc>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 803a254:	683b      	ldr	r3, [r7, #0]
 803a256:	681a      	ldr	r2, [r3, #0]
 803a258:	697b      	ldr	r3, [r7, #20]
 803a25a:	1ad2      	subs	r2, r2, r3
 803a25c:	683b      	ldr	r3, [r7, #0]
 803a25e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 803a260:	6878      	ldr	r0, [r7, #4]
 803a262:	f7ff ff8f 	bl	803a184 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 803a266:	2300      	movs	r3, #0
 803a268:	61fb      	str	r3, [r7, #28]
 803a26a:	e004      	b.n	803a276 <xTaskCheckForTimeOut+0xc6>
		}
		else
		{
			*pxTicksToWait = 0;
 803a26c:	683b      	ldr	r3, [r7, #0]
 803a26e:	2200      	movs	r2, #0
 803a270:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 803a272:	2301      	movs	r3, #1
 803a274:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 803a276:	f001 f98f 	bl	803b598 <vPortExitCritical>

	return xReturn;
 803a27a:	69fb      	ldr	r3, [r7, #28]
}
 803a27c:	4618      	mov	r0, r3
 803a27e:	3720      	adds	r7, #32
 803a280:	46bd      	mov	sp, r7
 803a282:	bd80      	pop	{r7, pc}
 803a284:	200018d0 	.word	0x200018d0
 803a288:	200013f8 	.word	0x200013f8
 803a28c:	200018e4 	.word	0x200018e4

0803a290 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 803a290:	b480      	push	{r7}
 803a292:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 803a294:	4b03      	ldr	r3, [pc, #12]	; (803a2a4 <vTaskMissedYield+0x14>)
 803a296:	2201      	movs	r2, #1
 803a298:	601a      	str	r2, [r3, #0]
}
 803a29a:	bf00      	nop
 803a29c:	46bd      	mov	sp, r7
 803a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a2a2:	4770      	bx	lr
 803a2a4:	200018e0 	.word	0x200018e0

0803a2a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 803a2a8:	b580      	push	{r7, lr}
 803a2aa:	b082      	sub	sp, #8
 803a2ac:	af00      	add	r7, sp, #0
 803a2ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 803a2b0:	f000 f852 	bl	803a358 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 803a2b4:	4b06      	ldr	r3, [pc, #24]	; (803a2d0 <prvIdleTask+0x28>)
 803a2b6:	681b      	ldr	r3, [r3, #0]
 803a2b8:	2b01      	cmp	r3, #1
 803a2ba:	d9f9      	bls.n	803a2b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 803a2bc:	4b05      	ldr	r3, [pc, #20]	; (803a2d4 <prvIdleTask+0x2c>)
 803a2be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 803a2c2:	601a      	str	r2, [r3, #0]
 803a2c4:	f3bf 8f4f 	dsb	sy
 803a2c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 803a2cc:	e7f0      	b.n	803a2b0 <prvIdleTask+0x8>
 803a2ce:	bf00      	nop
 803a2d0:	200013fc 	.word	0x200013fc
 803a2d4:	e000ed04 	.word	0xe000ed04

0803a2d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 803a2d8:	b580      	push	{r7, lr}
 803a2da:	b082      	sub	sp, #8
 803a2dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 803a2de:	2300      	movs	r3, #0
 803a2e0:	607b      	str	r3, [r7, #4]
 803a2e2:	e00c      	b.n	803a2fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 803a2e4:	687a      	ldr	r2, [r7, #4]
 803a2e6:	4613      	mov	r3, r2
 803a2e8:	009b      	lsls	r3, r3, #2
 803a2ea:	4413      	add	r3, r2
 803a2ec:	009b      	lsls	r3, r3, #2
 803a2ee:	4a12      	ldr	r2, [pc, #72]	; (803a338 <prvInitialiseTaskLists+0x60>)
 803a2f0:	4413      	add	r3, r2
 803a2f2:	4618      	mov	r0, r3
 803a2f4:	f7fe f94c 	bl	8038590 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 803a2f8:	687b      	ldr	r3, [r7, #4]
 803a2fa:	3301      	adds	r3, #1
 803a2fc:	607b      	str	r3, [r7, #4]
 803a2fe:	687b      	ldr	r3, [r7, #4]
 803a300:	2b37      	cmp	r3, #55	; 0x37
 803a302:	d9ef      	bls.n	803a2e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 803a304:	480d      	ldr	r0, [pc, #52]	; (803a33c <prvInitialiseTaskLists+0x64>)
 803a306:	f7fe f943 	bl	8038590 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 803a30a:	480d      	ldr	r0, [pc, #52]	; (803a340 <prvInitialiseTaskLists+0x68>)
 803a30c:	f7fe f940 	bl	8038590 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 803a310:	480c      	ldr	r0, [pc, #48]	; (803a344 <prvInitialiseTaskLists+0x6c>)
 803a312:	f7fe f93d 	bl	8038590 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 803a316:	480c      	ldr	r0, [pc, #48]	; (803a348 <prvInitialiseTaskLists+0x70>)
 803a318:	f7fe f93a 	bl	8038590 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 803a31c:	480b      	ldr	r0, [pc, #44]	; (803a34c <prvInitialiseTaskLists+0x74>)
 803a31e:	f7fe f937 	bl	8038590 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 803a322:	4b0b      	ldr	r3, [pc, #44]	; (803a350 <prvInitialiseTaskLists+0x78>)
 803a324:	4a05      	ldr	r2, [pc, #20]	; (803a33c <prvInitialiseTaskLists+0x64>)
 803a326:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 803a328:	4b0a      	ldr	r3, [pc, #40]	; (803a354 <prvInitialiseTaskLists+0x7c>)
 803a32a:	4a05      	ldr	r2, [pc, #20]	; (803a340 <prvInitialiseTaskLists+0x68>)
 803a32c:	601a      	str	r2, [r3, #0]
}
 803a32e:	bf00      	nop
 803a330:	3708      	adds	r7, #8
 803a332:	46bd      	mov	sp, r7
 803a334:	bd80      	pop	{r7, pc}
 803a336:	bf00      	nop
 803a338:	200013fc 	.word	0x200013fc
 803a33c:	2000185c 	.word	0x2000185c
 803a340:	20001870 	.word	0x20001870
 803a344:	2000188c 	.word	0x2000188c
 803a348:	200018a0 	.word	0x200018a0
 803a34c:	200018b8 	.word	0x200018b8
 803a350:	20001884 	.word	0x20001884
 803a354:	20001888 	.word	0x20001888

0803a358 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 803a358:	b580      	push	{r7, lr}
 803a35a:	b082      	sub	sp, #8
 803a35c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 803a35e:	e019      	b.n	803a394 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 803a360:	f001 f8ec 	bl	803b53c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 803a364:	4b0f      	ldr	r3, [pc, #60]	; (803a3a4 <prvCheckTasksWaitingTermination+0x4c>)
 803a366:	68db      	ldr	r3, [r3, #12]
 803a368:	68db      	ldr	r3, [r3, #12]
 803a36a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 803a36c:	687b      	ldr	r3, [r7, #4]
 803a36e:	3304      	adds	r3, #4
 803a370:	4618      	mov	r0, r3
 803a372:	f7fe f997 	bl	80386a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 803a376:	4b0c      	ldr	r3, [pc, #48]	; (803a3a8 <prvCheckTasksWaitingTermination+0x50>)
 803a378:	681b      	ldr	r3, [r3, #0]
 803a37a:	3b01      	subs	r3, #1
 803a37c:	4a0a      	ldr	r2, [pc, #40]	; (803a3a8 <prvCheckTasksWaitingTermination+0x50>)
 803a37e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 803a380:	4b0a      	ldr	r3, [pc, #40]	; (803a3ac <prvCheckTasksWaitingTermination+0x54>)
 803a382:	681b      	ldr	r3, [r3, #0]
 803a384:	3b01      	subs	r3, #1
 803a386:	4a09      	ldr	r2, [pc, #36]	; (803a3ac <prvCheckTasksWaitingTermination+0x54>)
 803a388:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 803a38a:	f001 f905 	bl	803b598 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 803a38e:	6878      	ldr	r0, [r7, #4]
 803a390:	f000 f80e 	bl	803a3b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 803a394:	4b05      	ldr	r3, [pc, #20]	; (803a3ac <prvCheckTasksWaitingTermination+0x54>)
 803a396:	681b      	ldr	r3, [r3, #0]
 803a398:	2b00      	cmp	r3, #0
 803a39a:	d1e1      	bne.n	803a360 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 803a39c:	bf00      	nop
 803a39e:	3708      	adds	r7, #8
 803a3a0:	46bd      	mov	sp, r7
 803a3a2:	bd80      	pop	{r7, pc}
 803a3a4:	200018a0 	.word	0x200018a0
 803a3a8:	200018cc 	.word	0x200018cc
 803a3ac:	200018b4 	.word	0x200018b4

0803a3b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 803a3b0:	b580      	push	{r7, lr}
 803a3b2:	b084      	sub	sp, #16
 803a3b4:	af00      	add	r7, sp, #0
 803a3b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 803a3b8:	687b      	ldr	r3, [r7, #4]
 803a3ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 803a3be:	2b00      	cmp	r3, #0
 803a3c0:	d108      	bne.n	803a3d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 803a3c2:	687b      	ldr	r3, [r7, #4]
 803a3c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803a3c6:	4618      	mov	r0, r3
 803a3c8:	f001 fa94 	bl	803b8f4 <vPortFree>
				vPortFree( pxTCB );
 803a3cc:	6878      	ldr	r0, [r7, #4]
 803a3ce:	f001 fa91 	bl	803b8f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 803a3d2:	e017      	b.n	803a404 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 803a3d4:	687b      	ldr	r3, [r7, #4]
 803a3d6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 803a3da:	2b01      	cmp	r3, #1
 803a3dc:	d103      	bne.n	803a3e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 803a3de:	6878      	ldr	r0, [r7, #4]
 803a3e0:	f001 fa88 	bl	803b8f4 <vPortFree>
	}
 803a3e4:	e00e      	b.n	803a404 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 803a3e6:	687b      	ldr	r3, [r7, #4]
 803a3e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 803a3ec:	2b02      	cmp	r3, #2
 803a3ee:	d009      	beq.n	803a404 <prvDeleteTCB+0x54>
 803a3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 803a3f4:	f383 8811 	msr	BASEPRI, r3
 803a3f8:	f3bf 8f6f 	isb	sy
 803a3fc:	f3bf 8f4f 	dsb	sy
 803a400:	60fb      	str	r3, [r7, #12]
 803a402:	e7fe      	b.n	803a402 <prvDeleteTCB+0x52>
	}
 803a404:	bf00      	nop
 803a406:	3710      	adds	r7, #16
 803a408:	46bd      	mov	sp, r7
 803a40a:	bd80      	pop	{r7, pc}

0803a40c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 803a40c:	b480      	push	{r7}
 803a40e:	b083      	sub	sp, #12
 803a410:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 803a412:	4b0c      	ldr	r3, [pc, #48]	; (803a444 <prvResetNextTaskUnblockTime+0x38>)
 803a414:	681b      	ldr	r3, [r3, #0]
 803a416:	681b      	ldr	r3, [r3, #0]
 803a418:	2b00      	cmp	r3, #0
 803a41a:	d104      	bne.n	803a426 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 803a41c:	4b0a      	ldr	r3, [pc, #40]	; (803a448 <prvResetNextTaskUnblockTime+0x3c>)
 803a41e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 803a422:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 803a424:	e008      	b.n	803a438 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 803a426:	4b07      	ldr	r3, [pc, #28]	; (803a444 <prvResetNextTaskUnblockTime+0x38>)
 803a428:	681b      	ldr	r3, [r3, #0]
 803a42a:	68db      	ldr	r3, [r3, #12]
 803a42c:	68db      	ldr	r3, [r3, #12]
 803a42e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 803a430:	687b      	ldr	r3, [r7, #4]
 803a432:	685b      	ldr	r3, [r3, #4]
 803a434:	4a04      	ldr	r2, [pc, #16]	; (803a448 <prvResetNextTaskUnblockTime+0x3c>)
 803a436:	6013      	str	r3, [r2, #0]
}
 803a438:	bf00      	nop
 803a43a:	370c      	adds	r7, #12
 803a43c:	46bd      	mov	sp, r7
 803a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a442:	4770      	bx	lr
 803a444:	20001884 	.word	0x20001884
 803a448:	200018ec 	.word	0x200018ec

0803a44c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 803a44c:	b480      	push	{r7}
 803a44e:	b083      	sub	sp, #12
 803a450:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 803a452:	4b05      	ldr	r3, [pc, #20]	; (803a468 <xTaskGetCurrentTaskHandle+0x1c>)
 803a454:	681b      	ldr	r3, [r3, #0]
 803a456:	607b      	str	r3, [r7, #4]

		return xReturn;
 803a458:	687b      	ldr	r3, [r7, #4]
	}
 803a45a:	4618      	mov	r0, r3
 803a45c:	370c      	adds	r7, #12
 803a45e:	46bd      	mov	sp, r7
 803a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a464:	4770      	bx	lr
 803a466:	bf00      	nop
 803a468:	200013f8 	.word	0x200013f8

0803a46c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 803a46c:	b480      	push	{r7}
 803a46e:	b083      	sub	sp, #12
 803a470:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 803a472:	4b0b      	ldr	r3, [pc, #44]	; (803a4a0 <xTaskGetSchedulerState+0x34>)
 803a474:	681b      	ldr	r3, [r3, #0]
 803a476:	2b00      	cmp	r3, #0
 803a478:	d102      	bne.n	803a480 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 803a47a:	2301      	movs	r3, #1
 803a47c:	607b      	str	r3, [r7, #4]
 803a47e:	e008      	b.n	803a492 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 803a480:	4b08      	ldr	r3, [pc, #32]	; (803a4a4 <xTaskGetSchedulerState+0x38>)
 803a482:	681b      	ldr	r3, [r3, #0]
 803a484:	2b00      	cmp	r3, #0
 803a486:	d102      	bne.n	803a48e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 803a488:	2302      	movs	r3, #2
 803a48a:	607b      	str	r3, [r7, #4]
 803a48c:	e001      	b.n	803a492 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 803a48e:	2300      	movs	r3, #0
 803a490:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 803a492:	687b      	ldr	r3, [r7, #4]
	}
 803a494:	4618      	mov	r0, r3
 803a496:	370c      	adds	r7, #12
 803a498:	46bd      	mov	sp, r7
 803a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a49e:	4770      	bx	lr
 803a4a0:	200018d8 	.word	0x200018d8
 803a4a4:	200018f4 	.word	0x200018f4

0803a4a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 803a4a8:	b580      	push	{r7, lr}
 803a4aa:	b084      	sub	sp, #16
 803a4ac:	af00      	add	r7, sp, #0
 803a4ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 803a4b0:	687b      	ldr	r3, [r7, #4]
 803a4b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 803a4b4:	2300      	movs	r3, #0
 803a4b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 803a4b8:	687b      	ldr	r3, [r7, #4]
 803a4ba:	2b00      	cmp	r3, #0
 803a4bc:	d051      	beq.n	803a562 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 803a4be:	68bb      	ldr	r3, [r7, #8]
 803a4c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803a4c2:	4b2a      	ldr	r3, [pc, #168]	; (803a56c <xTaskPriorityInherit+0xc4>)
 803a4c4:	681b      	ldr	r3, [r3, #0]
 803a4c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803a4c8:	429a      	cmp	r2, r3
 803a4ca:	d241      	bcs.n	803a550 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 803a4cc:	68bb      	ldr	r3, [r7, #8]
 803a4ce:	699b      	ldr	r3, [r3, #24]
 803a4d0:	2b00      	cmp	r3, #0
 803a4d2:	db06      	blt.n	803a4e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 803a4d4:	4b25      	ldr	r3, [pc, #148]	; (803a56c <xTaskPriorityInherit+0xc4>)
 803a4d6:	681b      	ldr	r3, [r3, #0]
 803a4d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803a4da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 803a4de:	68bb      	ldr	r3, [r7, #8]
 803a4e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 803a4e2:	68bb      	ldr	r3, [r7, #8]
 803a4e4:	6959      	ldr	r1, [r3, #20]
 803a4e6:	68bb      	ldr	r3, [r7, #8]
 803a4e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803a4ea:	4613      	mov	r3, r2
 803a4ec:	009b      	lsls	r3, r3, #2
 803a4ee:	4413      	add	r3, r2
 803a4f0:	009b      	lsls	r3, r3, #2
 803a4f2:	4a1f      	ldr	r2, [pc, #124]	; (803a570 <xTaskPriorityInherit+0xc8>)
 803a4f4:	4413      	add	r3, r2
 803a4f6:	4299      	cmp	r1, r3
 803a4f8:	d122      	bne.n	803a540 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 803a4fa:	68bb      	ldr	r3, [r7, #8]
 803a4fc:	3304      	adds	r3, #4
 803a4fe:	4618      	mov	r0, r3
 803a500:	f7fe f8d0 	bl	80386a4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 803a504:	4b19      	ldr	r3, [pc, #100]	; (803a56c <xTaskPriorityInherit+0xc4>)
 803a506:	681b      	ldr	r3, [r3, #0]
 803a508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803a50a:	68bb      	ldr	r3, [r7, #8]
 803a50c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 803a50e:	68bb      	ldr	r3, [r7, #8]
 803a510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803a512:	4b18      	ldr	r3, [pc, #96]	; (803a574 <xTaskPriorityInherit+0xcc>)
 803a514:	681b      	ldr	r3, [r3, #0]
 803a516:	429a      	cmp	r2, r3
 803a518:	d903      	bls.n	803a522 <xTaskPriorityInherit+0x7a>
 803a51a:	68bb      	ldr	r3, [r7, #8]
 803a51c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803a51e:	4a15      	ldr	r2, [pc, #84]	; (803a574 <xTaskPriorityInherit+0xcc>)
 803a520:	6013      	str	r3, [r2, #0]
 803a522:	68bb      	ldr	r3, [r7, #8]
 803a524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803a526:	4613      	mov	r3, r2
 803a528:	009b      	lsls	r3, r3, #2
 803a52a:	4413      	add	r3, r2
 803a52c:	009b      	lsls	r3, r3, #2
 803a52e:	4a10      	ldr	r2, [pc, #64]	; (803a570 <xTaskPriorityInherit+0xc8>)
 803a530:	441a      	add	r2, r3
 803a532:	68bb      	ldr	r3, [r7, #8]
 803a534:	3304      	adds	r3, #4
 803a536:	4619      	mov	r1, r3
 803a538:	4610      	mov	r0, r2
 803a53a:	f7fe f856 	bl	80385ea <vListInsertEnd>
 803a53e:	e004      	b.n	803a54a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 803a540:	4b0a      	ldr	r3, [pc, #40]	; (803a56c <xTaskPriorityInherit+0xc4>)
 803a542:	681b      	ldr	r3, [r3, #0]
 803a544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803a546:	68bb      	ldr	r3, [r7, #8]
 803a548:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 803a54a:	2301      	movs	r3, #1
 803a54c:	60fb      	str	r3, [r7, #12]
 803a54e:	e008      	b.n	803a562 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 803a550:	68bb      	ldr	r3, [r7, #8]
 803a552:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 803a554:	4b05      	ldr	r3, [pc, #20]	; (803a56c <xTaskPriorityInherit+0xc4>)
 803a556:	681b      	ldr	r3, [r3, #0]
 803a558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803a55a:	429a      	cmp	r2, r3
 803a55c:	d201      	bcs.n	803a562 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 803a55e:	2301      	movs	r3, #1
 803a560:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 803a562:	68fb      	ldr	r3, [r7, #12]
	}
 803a564:	4618      	mov	r0, r3
 803a566:	3710      	adds	r7, #16
 803a568:	46bd      	mov	sp, r7
 803a56a:	bd80      	pop	{r7, pc}
 803a56c:	200013f8 	.word	0x200013f8
 803a570:	200013fc 	.word	0x200013fc
 803a574:	200018d4 	.word	0x200018d4

0803a578 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 803a578:	b580      	push	{r7, lr}
 803a57a:	b086      	sub	sp, #24
 803a57c:	af00      	add	r7, sp, #0
 803a57e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 803a580:	687b      	ldr	r3, [r7, #4]
 803a582:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 803a584:	2300      	movs	r3, #0
 803a586:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 803a588:	687b      	ldr	r3, [r7, #4]
 803a58a:	2b00      	cmp	r3, #0
 803a58c:	d054      	beq.n	803a638 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 803a58e:	4b2d      	ldr	r3, [pc, #180]	; (803a644 <xTaskPriorityDisinherit+0xcc>)
 803a590:	681b      	ldr	r3, [r3, #0]
 803a592:	693a      	ldr	r2, [r7, #16]
 803a594:	429a      	cmp	r2, r3
 803a596:	d009      	beq.n	803a5ac <xTaskPriorityDisinherit+0x34>
 803a598:	f04f 0350 	mov.w	r3, #80	; 0x50
 803a59c:	f383 8811 	msr	BASEPRI, r3
 803a5a0:	f3bf 8f6f 	isb	sy
 803a5a4:	f3bf 8f4f 	dsb	sy
 803a5a8:	60fb      	str	r3, [r7, #12]
 803a5aa:	e7fe      	b.n	803a5aa <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 803a5ac:	693b      	ldr	r3, [r7, #16]
 803a5ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 803a5b0:	2b00      	cmp	r3, #0
 803a5b2:	d109      	bne.n	803a5c8 <xTaskPriorityDisinherit+0x50>
 803a5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 803a5b8:	f383 8811 	msr	BASEPRI, r3
 803a5bc:	f3bf 8f6f 	isb	sy
 803a5c0:	f3bf 8f4f 	dsb	sy
 803a5c4:	60bb      	str	r3, [r7, #8]
 803a5c6:	e7fe      	b.n	803a5c6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 803a5c8:	693b      	ldr	r3, [r7, #16]
 803a5ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 803a5cc:	1e5a      	subs	r2, r3, #1
 803a5ce:	693b      	ldr	r3, [r7, #16]
 803a5d0:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 803a5d2:	693b      	ldr	r3, [r7, #16]
 803a5d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803a5d6:	693b      	ldr	r3, [r7, #16]
 803a5d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803a5da:	429a      	cmp	r2, r3
 803a5dc:	d02c      	beq.n	803a638 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 803a5de:	693b      	ldr	r3, [r7, #16]
 803a5e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 803a5e2:	2b00      	cmp	r3, #0
 803a5e4:	d128      	bne.n	803a638 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 803a5e6:	693b      	ldr	r3, [r7, #16]
 803a5e8:	3304      	adds	r3, #4
 803a5ea:	4618      	mov	r0, r3
 803a5ec:	f7fe f85a 	bl	80386a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 803a5f0:	693b      	ldr	r3, [r7, #16]
 803a5f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 803a5f4:	693b      	ldr	r3, [r7, #16]
 803a5f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 803a5f8:	693b      	ldr	r3, [r7, #16]
 803a5fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803a5fc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 803a600:	693b      	ldr	r3, [r7, #16]
 803a602:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 803a604:	693b      	ldr	r3, [r7, #16]
 803a606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803a608:	4b0f      	ldr	r3, [pc, #60]	; (803a648 <xTaskPriorityDisinherit+0xd0>)
 803a60a:	681b      	ldr	r3, [r3, #0]
 803a60c:	429a      	cmp	r2, r3
 803a60e:	d903      	bls.n	803a618 <xTaskPriorityDisinherit+0xa0>
 803a610:	693b      	ldr	r3, [r7, #16]
 803a612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803a614:	4a0c      	ldr	r2, [pc, #48]	; (803a648 <xTaskPriorityDisinherit+0xd0>)
 803a616:	6013      	str	r3, [r2, #0]
 803a618:	693b      	ldr	r3, [r7, #16]
 803a61a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803a61c:	4613      	mov	r3, r2
 803a61e:	009b      	lsls	r3, r3, #2
 803a620:	4413      	add	r3, r2
 803a622:	009b      	lsls	r3, r3, #2
 803a624:	4a09      	ldr	r2, [pc, #36]	; (803a64c <xTaskPriorityDisinherit+0xd4>)
 803a626:	441a      	add	r2, r3
 803a628:	693b      	ldr	r3, [r7, #16]
 803a62a:	3304      	adds	r3, #4
 803a62c:	4619      	mov	r1, r3
 803a62e:	4610      	mov	r0, r2
 803a630:	f7fd ffdb 	bl	80385ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 803a634:	2301      	movs	r3, #1
 803a636:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 803a638:	697b      	ldr	r3, [r7, #20]
	}
 803a63a:	4618      	mov	r0, r3
 803a63c:	3718      	adds	r7, #24
 803a63e:	46bd      	mov	sp, r7
 803a640:	bd80      	pop	{r7, pc}
 803a642:	bf00      	nop
 803a644:	200013f8 	.word	0x200013f8
 803a648:	200018d4 	.word	0x200018d4
 803a64c:	200013fc 	.word	0x200013fc

0803a650 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 803a650:	b580      	push	{r7, lr}
 803a652:	b088      	sub	sp, #32
 803a654:	af00      	add	r7, sp, #0
 803a656:	6078      	str	r0, [r7, #4]
 803a658:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 803a65a:	687b      	ldr	r3, [r7, #4]
 803a65c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 803a65e:	2301      	movs	r3, #1
 803a660:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 803a662:	687b      	ldr	r3, [r7, #4]
 803a664:	2b00      	cmp	r3, #0
 803a666:	d068      	beq.n	803a73a <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 803a668:	69bb      	ldr	r3, [r7, #24]
 803a66a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 803a66c:	2b00      	cmp	r3, #0
 803a66e:	d109      	bne.n	803a684 <vTaskPriorityDisinheritAfterTimeout+0x34>
 803a670:	f04f 0350 	mov.w	r3, #80	; 0x50
 803a674:	f383 8811 	msr	BASEPRI, r3
 803a678:	f3bf 8f6f 	isb	sy
 803a67c:	f3bf 8f4f 	dsb	sy
 803a680:	60fb      	str	r3, [r7, #12]
 803a682:	e7fe      	b.n	803a682 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 803a684:	69bb      	ldr	r3, [r7, #24]
 803a686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803a688:	683a      	ldr	r2, [r7, #0]
 803a68a:	429a      	cmp	r2, r3
 803a68c:	d902      	bls.n	803a694 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 803a68e:	683b      	ldr	r3, [r7, #0]
 803a690:	61fb      	str	r3, [r7, #28]
 803a692:	e002      	b.n	803a69a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 803a694:	69bb      	ldr	r3, [r7, #24]
 803a696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803a698:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 803a69a:	69bb      	ldr	r3, [r7, #24]
 803a69c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803a69e:	69fa      	ldr	r2, [r7, #28]
 803a6a0:	429a      	cmp	r2, r3
 803a6a2:	d04a      	beq.n	803a73a <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 803a6a4:	69bb      	ldr	r3, [r7, #24]
 803a6a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 803a6a8:	697a      	ldr	r2, [r7, #20]
 803a6aa:	429a      	cmp	r2, r3
 803a6ac:	d145      	bne.n	803a73a <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 803a6ae:	4b25      	ldr	r3, [pc, #148]	; (803a744 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 803a6b0:	681b      	ldr	r3, [r3, #0]
 803a6b2:	69ba      	ldr	r2, [r7, #24]
 803a6b4:	429a      	cmp	r2, r3
 803a6b6:	d109      	bne.n	803a6cc <vTaskPriorityDisinheritAfterTimeout+0x7c>
 803a6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 803a6bc:	f383 8811 	msr	BASEPRI, r3
 803a6c0:	f3bf 8f6f 	isb	sy
 803a6c4:	f3bf 8f4f 	dsb	sy
 803a6c8:	60bb      	str	r3, [r7, #8]
 803a6ca:	e7fe      	b.n	803a6ca <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 803a6cc:	69bb      	ldr	r3, [r7, #24]
 803a6ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803a6d0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 803a6d2:	69bb      	ldr	r3, [r7, #24]
 803a6d4:	69fa      	ldr	r2, [r7, #28]
 803a6d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 803a6d8:	69bb      	ldr	r3, [r7, #24]
 803a6da:	699b      	ldr	r3, [r3, #24]
 803a6dc:	2b00      	cmp	r3, #0
 803a6de:	db04      	blt.n	803a6ea <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 803a6e0:	69fb      	ldr	r3, [r7, #28]
 803a6e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 803a6e6:	69bb      	ldr	r3, [r7, #24]
 803a6e8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 803a6ea:	69bb      	ldr	r3, [r7, #24]
 803a6ec:	6959      	ldr	r1, [r3, #20]
 803a6ee:	693a      	ldr	r2, [r7, #16]
 803a6f0:	4613      	mov	r3, r2
 803a6f2:	009b      	lsls	r3, r3, #2
 803a6f4:	4413      	add	r3, r2
 803a6f6:	009b      	lsls	r3, r3, #2
 803a6f8:	4a13      	ldr	r2, [pc, #76]	; (803a748 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 803a6fa:	4413      	add	r3, r2
 803a6fc:	4299      	cmp	r1, r3
 803a6fe:	d11c      	bne.n	803a73a <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 803a700:	69bb      	ldr	r3, [r7, #24]
 803a702:	3304      	adds	r3, #4
 803a704:	4618      	mov	r0, r3
 803a706:	f7fd ffcd 	bl	80386a4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 803a70a:	69bb      	ldr	r3, [r7, #24]
 803a70c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803a70e:	4b0f      	ldr	r3, [pc, #60]	; (803a74c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 803a710:	681b      	ldr	r3, [r3, #0]
 803a712:	429a      	cmp	r2, r3
 803a714:	d903      	bls.n	803a71e <vTaskPriorityDisinheritAfterTimeout+0xce>
 803a716:	69bb      	ldr	r3, [r7, #24]
 803a718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803a71a:	4a0c      	ldr	r2, [pc, #48]	; (803a74c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 803a71c:	6013      	str	r3, [r2, #0]
 803a71e:	69bb      	ldr	r3, [r7, #24]
 803a720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803a722:	4613      	mov	r3, r2
 803a724:	009b      	lsls	r3, r3, #2
 803a726:	4413      	add	r3, r2
 803a728:	009b      	lsls	r3, r3, #2
 803a72a:	4a07      	ldr	r2, [pc, #28]	; (803a748 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 803a72c:	441a      	add	r2, r3
 803a72e:	69bb      	ldr	r3, [r7, #24]
 803a730:	3304      	adds	r3, #4
 803a732:	4619      	mov	r1, r3
 803a734:	4610      	mov	r0, r2
 803a736:	f7fd ff58 	bl	80385ea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 803a73a:	bf00      	nop
 803a73c:	3720      	adds	r7, #32
 803a73e:	46bd      	mov	sp, r7
 803a740:	bd80      	pop	{r7, pc}
 803a742:	bf00      	nop
 803a744:	200013f8 	.word	0x200013f8
 803a748:	200013fc 	.word	0x200013fc
 803a74c:	200018d4 	.word	0x200018d4

0803a750 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 803a750:	b480      	push	{r7}
 803a752:	b083      	sub	sp, #12
 803a754:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 803a756:	4b09      	ldr	r3, [pc, #36]	; (803a77c <uxTaskResetEventItemValue+0x2c>)
 803a758:	681b      	ldr	r3, [r3, #0]
 803a75a:	699b      	ldr	r3, [r3, #24]
 803a75c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 803a75e:	4b07      	ldr	r3, [pc, #28]	; (803a77c <uxTaskResetEventItemValue+0x2c>)
 803a760:	681b      	ldr	r3, [r3, #0]
 803a762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803a764:	4b05      	ldr	r3, [pc, #20]	; (803a77c <uxTaskResetEventItemValue+0x2c>)
 803a766:	681b      	ldr	r3, [r3, #0]
 803a768:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 803a76c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 803a76e:	687b      	ldr	r3, [r7, #4]
}
 803a770:	4618      	mov	r0, r3
 803a772:	370c      	adds	r7, #12
 803a774:	46bd      	mov	sp, r7
 803a776:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a77a:	4770      	bx	lr
 803a77c:	200013f8 	.word	0x200013f8

0803a780 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 803a780:	b480      	push	{r7}
 803a782:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 803a784:	4b07      	ldr	r3, [pc, #28]	; (803a7a4 <pvTaskIncrementMutexHeldCount+0x24>)
 803a786:	681b      	ldr	r3, [r3, #0]
 803a788:	2b00      	cmp	r3, #0
 803a78a:	d004      	beq.n	803a796 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 803a78c:	4b05      	ldr	r3, [pc, #20]	; (803a7a4 <pvTaskIncrementMutexHeldCount+0x24>)
 803a78e:	681b      	ldr	r3, [r3, #0]
 803a790:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 803a792:	3201      	adds	r2, #1
 803a794:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 803a796:	4b03      	ldr	r3, [pc, #12]	; (803a7a4 <pvTaskIncrementMutexHeldCount+0x24>)
 803a798:	681b      	ldr	r3, [r3, #0]
	}
 803a79a:	4618      	mov	r0, r3
 803a79c:	46bd      	mov	sp, r7
 803a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a7a2:	4770      	bx	lr
 803a7a4:	200013f8 	.word	0x200013f8

0803a7a8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 803a7a8:	b580      	push	{r7, lr}
 803a7aa:	b086      	sub	sp, #24
 803a7ac:	af00      	add	r7, sp, #0
 803a7ae:	60f8      	str	r0, [r7, #12]
 803a7b0:	60b9      	str	r1, [r7, #8]
 803a7b2:	607a      	str	r2, [r7, #4]
 803a7b4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 803a7b6:	f000 fec1 	bl	803b53c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 803a7ba:	4b26      	ldr	r3, [pc, #152]	; (803a854 <xTaskNotifyWait+0xac>)
 803a7bc:	681b      	ldr	r3, [r3, #0]
 803a7be:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 803a7c2:	b2db      	uxtb	r3, r3
 803a7c4:	2b02      	cmp	r3, #2
 803a7c6:	d01a      	beq.n	803a7fe <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 803a7c8:	4b22      	ldr	r3, [pc, #136]	; (803a854 <xTaskNotifyWait+0xac>)
 803a7ca:	681b      	ldr	r3, [r3, #0]
 803a7cc:	6d99      	ldr	r1, [r3, #88]	; 0x58
 803a7ce:	68fa      	ldr	r2, [r7, #12]
 803a7d0:	43d2      	mvns	r2, r2
 803a7d2:	400a      	ands	r2, r1
 803a7d4:	659a      	str	r2, [r3, #88]	; 0x58

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 803a7d6:	4b1f      	ldr	r3, [pc, #124]	; (803a854 <xTaskNotifyWait+0xac>)
 803a7d8:	681b      	ldr	r3, [r3, #0]
 803a7da:	2201      	movs	r2, #1
 803a7dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

				if( xTicksToWait > ( TickType_t ) 0 )
 803a7e0:	683b      	ldr	r3, [r7, #0]
 803a7e2:	2b00      	cmp	r3, #0
 803a7e4:	d00b      	beq.n	803a7fe <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 803a7e6:	2101      	movs	r1, #1
 803a7e8:	6838      	ldr	r0, [r7, #0]
 803a7ea:	f000 f9c3 	bl	803ab74 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 803a7ee:	4b1a      	ldr	r3, [pc, #104]	; (803a858 <xTaskNotifyWait+0xb0>)
 803a7f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 803a7f4:	601a      	str	r2, [r3, #0]
 803a7f6:	f3bf 8f4f 	dsb	sy
 803a7fa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 803a7fe:	f000 fecb 	bl	803b598 <vPortExitCritical>

		taskENTER_CRITICAL();
 803a802:	f000 fe9b 	bl	803b53c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 803a806:	687b      	ldr	r3, [r7, #4]
 803a808:	2b00      	cmp	r3, #0
 803a80a:	d004      	beq.n	803a816 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 803a80c:	4b11      	ldr	r3, [pc, #68]	; (803a854 <xTaskNotifyWait+0xac>)
 803a80e:	681b      	ldr	r3, [r3, #0]
 803a810:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 803a812:	687b      	ldr	r3, [r7, #4]
 803a814:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 803a816:	4b0f      	ldr	r3, [pc, #60]	; (803a854 <xTaskNotifyWait+0xac>)
 803a818:	681b      	ldr	r3, [r3, #0]
 803a81a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 803a81e:	b2db      	uxtb	r3, r3
 803a820:	2b02      	cmp	r3, #2
 803a822:	d002      	beq.n	803a82a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 803a824:	2300      	movs	r3, #0
 803a826:	617b      	str	r3, [r7, #20]
 803a828:	e008      	b.n	803a83c <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 803a82a:	4b0a      	ldr	r3, [pc, #40]	; (803a854 <xTaskNotifyWait+0xac>)
 803a82c:	681b      	ldr	r3, [r3, #0]
 803a82e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 803a830:	68ba      	ldr	r2, [r7, #8]
 803a832:	43d2      	mvns	r2, r2
 803a834:	400a      	ands	r2, r1
 803a836:	659a      	str	r2, [r3, #88]	; 0x58
				xReturn = pdTRUE;
 803a838:	2301      	movs	r3, #1
 803a83a:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 803a83c:	4b05      	ldr	r3, [pc, #20]	; (803a854 <xTaskNotifyWait+0xac>)
 803a83e:	681b      	ldr	r3, [r3, #0]
 803a840:	2200      	movs	r2, #0
 803a842:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		}
		taskEXIT_CRITICAL();
 803a846:	f000 fea7 	bl	803b598 <vPortExitCritical>

		return xReturn;
 803a84a:	697b      	ldr	r3, [r7, #20]
	}
 803a84c:	4618      	mov	r0, r3
 803a84e:	3718      	adds	r7, #24
 803a850:	46bd      	mov	sp, r7
 803a852:	bd80      	pop	{r7, pc}
 803a854:	200013f8 	.word	0x200013f8
 803a858:	e000ed04 	.word	0xe000ed04

0803a85c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 803a85c:	b580      	push	{r7, lr}
 803a85e:	b08a      	sub	sp, #40	; 0x28
 803a860:	af00      	add	r7, sp, #0
 803a862:	60f8      	str	r0, [r7, #12]
 803a864:	60b9      	str	r1, [r7, #8]
 803a866:	603b      	str	r3, [r7, #0]
 803a868:	4613      	mov	r3, r2
 803a86a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 803a86c:	2301      	movs	r3, #1
 803a86e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 803a870:	68fb      	ldr	r3, [r7, #12]
 803a872:	2b00      	cmp	r3, #0
 803a874:	d109      	bne.n	803a88a <xTaskGenericNotify+0x2e>
 803a876:	f04f 0350 	mov.w	r3, #80	; 0x50
 803a87a:	f383 8811 	msr	BASEPRI, r3
 803a87e:	f3bf 8f6f 	isb	sy
 803a882:	f3bf 8f4f 	dsb	sy
 803a886:	61bb      	str	r3, [r7, #24]
 803a888:	e7fe      	b.n	803a888 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 803a88a:	68fb      	ldr	r3, [r7, #12]
 803a88c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 803a88e:	f000 fe55 	bl	803b53c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 803a892:	683b      	ldr	r3, [r7, #0]
 803a894:	2b00      	cmp	r3, #0
 803a896:	d003      	beq.n	803a8a0 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 803a898:	6a3b      	ldr	r3, [r7, #32]
 803a89a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 803a89c:	683b      	ldr	r3, [r7, #0]
 803a89e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 803a8a0:	6a3b      	ldr	r3, [r7, #32]
 803a8a2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 803a8a6:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 803a8a8:	6a3b      	ldr	r3, [r7, #32]
 803a8aa:	2202      	movs	r2, #2
 803a8ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

			switch( eAction )
 803a8b0:	79fb      	ldrb	r3, [r7, #7]
 803a8b2:	2b04      	cmp	r3, #4
 803a8b4:	d827      	bhi.n	803a906 <xTaskGenericNotify+0xaa>
 803a8b6:	a201      	add	r2, pc, #4	; (adr r2, 803a8bc <xTaskGenericNotify+0x60>)
 803a8b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803a8bc:	0803a925 	.word	0x0803a925
 803a8c0:	0803a8d1 	.word	0x0803a8d1
 803a8c4:	0803a8df 	.word	0x0803a8df
 803a8c8:	0803a8eb 	.word	0x0803a8eb
 803a8cc:	0803a8f3 	.word	0x0803a8f3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 803a8d0:	6a3b      	ldr	r3, [r7, #32]
 803a8d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 803a8d4:	68bb      	ldr	r3, [r7, #8]
 803a8d6:	431a      	orrs	r2, r3
 803a8d8:	6a3b      	ldr	r3, [r7, #32]
 803a8da:	659a      	str	r2, [r3, #88]	; 0x58
					break;
 803a8dc:	e025      	b.n	803a92a <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 803a8de:	6a3b      	ldr	r3, [r7, #32]
 803a8e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803a8e2:	1c5a      	adds	r2, r3, #1
 803a8e4:	6a3b      	ldr	r3, [r7, #32]
 803a8e6:	659a      	str	r2, [r3, #88]	; 0x58
					break;
 803a8e8:	e01f      	b.n	803a92a <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 803a8ea:	6a3b      	ldr	r3, [r7, #32]
 803a8ec:	68ba      	ldr	r2, [r7, #8]
 803a8ee:	659a      	str	r2, [r3, #88]	; 0x58
					break;
 803a8f0:	e01b      	b.n	803a92a <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 803a8f2:	7ffb      	ldrb	r3, [r7, #31]
 803a8f4:	2b02      	cmp	r3, #2
 803a8f6:	d003      	beq.n	803a900 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 803a8f8:	6a3b      	ldr	r3, [r7, #32]
 803a8fa:	68ba      	ldr	r2, [r7, #8]
 803a8fc:	659a      	str	r2, [r3, #88]	; 0x58
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 803a8fe:	e014      	b.n	803a92a <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 803a900:	2300      	movs	r3, #0
 803a902:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 803a904:	e011      	b.n	803a92a <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 803a906:	6a3b      	ldr	r3, [r7, #32]
 803a908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803a90a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 803a90e:	d00b      	beq.n	803a928 <xTaskGenericNotify+0xcc>
 803a910:	f04f 0350 	mov.w	r3, #80	; 0x50
 803a914:	f383 8811 	msr	BASEPRI, r3
 803a918:	f3bf 8f6f 	isb	sy
 803a91c:	f3bf 8f4f 	dsb	sy
 803a920:	617b      	str	r3, [r7, #20]
 803a922:	e7fe      	b.n	803a922 <xTaskGenericNotify+0xc6>
					break;
 803a924:	bf00      	nop
 803a926:	e000      	b.n	803a92a <xTaskGenericNotify+0xce>

					break;
 803a928:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 803a92a:	7ffb      	ldrb	r3, [r7, #31]
 803a92c:	2b01      	cmp	r3, #1
 803a92e:	d139      	bne.n	803a9a4 <xTaskGenericNotify+0x148>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 803a930:	6a3b      	ldr	r3, [r7, #32]
 803a932:	3304      	adds	r3, #4
 803a934:	4618      	mov	r0, r3
 803a936:	f7fd feb5 	bl	80386a4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 803a93a:	6a3b      	ldr	r3, [r7, #32]
 803a93c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803a93e:	4b1d      	ldr	r3, [pc, #116]	; (803a9b4 <xTaskGenericNotify+0x158>)
 803a940:	681b      	ldr	r3, [r3, #0]
 803a942:	429a      	cmp	r2, r3
 803a944:	d903      	bls.n	803a94e <xTaskGenericNotify+0xf2>
 803a946:	6a3b      	ldr	r3, [r7, #32]
 803a948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803a94a:	4a1a      	ldr	r2, [pc, #104]	; (803a9b4 <xTaskGenericNotify+0x158>)
 803a94c:	6013      	str	r3, [r2, #0]
 803a94e:	6a3b      	ldr	r3, [r7, #32]
 803a950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803a952:	4613      	mov	r3, r2
 803a954:	009b      	lsls	r3, r3, #2
 803a956:	4413      	add	r3, r2
 803a958:	009b      	lsls	r3, r3, #2
 803a95a:	4a17      	ldr	r2, [pc, #92]	; (803a9b8 <xTaskGenericNotify+0x15c>)
 803a95c:	441a      	add	r2, r3
 803a95e:	6a3b      	ldr	r3, [r7, #32]
 803a960:	3304      	adds	r3, #4
 803a962:	4619      	mov	r1, r3
 803a964:	4610      	mov	r0, r2
 803a966:	f7fd fe40 	bl	80385ea <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 803a96a:	6a3b      	ldr	r3, [r7, #32]
 803a96c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803a96e:	2b00      	cmp	r3, #0
 803a970:	d009      	beq.n	803a986 <xTaskGenericNotify+0x12a>
 803a972:	f04f 0350 	mov.w	r3, #80	; 0x50
 803a976:	f383 8811 	msr	BASEPRI, r3
 803a97a:	f3bf 8f6f 	isb	sy
 803a97e:	f3bf 8f4f 	dsb	sy
 803a982:	613b      	str	r3, [r7, #16]
 803a984:	e7fe      	b.n	803a984 <xTaskGenericNotify+0x128>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 803a986:	6a3b      	ldr	r3, [r7, #32]
 803a988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803a98a:	4b0c      	ldr	r3, [pc, #48]	; (803a9bc <xTaskGenericNotify+0x160>)
 803a98c:	681b      	ldr	r3, [r3, #0]
 803a98e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803a990:	429a      	cmp	r2, r3
 803a992:	d907      	bls.n	803a9a4 <xTaskGenericNotify+0x148>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 803a994:	4b0a      	ldr	r3, [pc, #40]	; (803a9c0 <xTaskGenericNotify+0x164>)
 803a996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 803a99a:	601a      	str	r2, [r3, #0]
 803a99c:	f3bf 8f4f 	dsb	sy
 803a9a0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 803a9a4:	f000 fdf8 	bl	803b598 <vPortExitCritical>

		return xReturn;
 803a9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 803a9aa:	4618      	mov	r0, r3
 803a9ac:	3728      	adds	r7, #40	; 0x28
 803a9ae:	46bd      	mov	sp, r7
 803a9b0:	bd80      	pop	{r7, pc}
 803a9b2:	bf00      	nop
 803a9b4:	200018d4 	.word	0x200018d4
 803a9b8:	200013fc 	.word	0x200013fc
 803a9bc:	200013f8 	.word	0x200013f8
 803a9c0:	e000ed04 	.word	0xe000ed04

0803a9c4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 803a9c4:	b580      	push	{r7, lr}
 803a9c6:	b08e      	sub	sp, #56	; 0x38
 803a9c8:	af00      	add	r7, sp, #0
 803a9ca:	60f8      	str	r0, [r7, #12]
 803a9cc:	60b9      	str	r1, [r7, #8]
 803a9ce:	603b      	str	r3, [r7, #0]
 803a9d0:	4613      	mov	r3, r2
 803a9d2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 803a9d4:	2301      	movs	r3, #1
 803a9d6:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 803a9d8:	68fb      	ldr	r3, [r7, #12]
 803a9da:	2b00      	cmp	r3, #0
 803a9dc:	d109      	bne.n	803a9f2 <xTaskGenericNotifyFromISR+0x2e>
 803a9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 803a9e2:	f383 8811 	msr	BASEPRI, r3
 803a9e6:	f3bf 8f6f 	isb	sy
 803a9ea:	f3bf 8f4f 	dsb	sy
 803a9ee:	627b      	str	r3, [r7, #36]	; 0x24
 803a9f0:	e7fe      	b.n	803a9f0 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 803a9f2:	f000 fe7f 	bl	803b6f4 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 803a9f6:	68fb      	ldr	r3, [r7, #12]
 803a9f8:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 803a9fa:	f3ef 8211 	mrs	r2, BASEPRI
 803a9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 803aa02:	f383 8811 	msr	BASEPRI, r3
 803aa06:	f3bf 8f6f 	isb	sy
 803aa0a:	f3bf 8f4f 	dsb	sy
 803aa0e:	623a      	str	r2, [r7, #32]
 803aa10:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 803aa12:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 803aa14:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 803aa16:	683b      	ldr	r3, [r7, #0]
 803aa18:	2b00      	cmp	r3, #0
 803aa1a:	d003      	beq.n	803aa24 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 803aa1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803aa1e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 803aa20:	683b      	ldr	r3, [r7, #0]
 803aa22:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 803aa24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803aa26:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 803aa2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 803aa2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803aa30:	2202      	movs	r2, #2
 803aa32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

			switch( eAction )
 803aa36:	79fb      	ldrb	r3, [r7, #7]
 803aa38:	2b04      	cmp	r3, #4
 803aa3a:	d829      	bhi.n	803aa90 <xTaskGenericNotifyFromISR+0xcc>
 803aa3c:	a201      	add	r2, pc, #4	; (adr r2, 803aa44 <xTaskGenericNotifyFromISR+0x80>)
 803aa3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803aa42:	bf00      	nop
 803aa44:	0803aaaf 	.word	0x0803aaaf
 803aa48:	0803aa59 	.word	0x0803aa59
 803aa4c:	0803aa67 	.word	0x0803aa67
 803aa50:	0803aa73 	.word	0x0803aa73
 803aa54:	0803aa7b 	.word	0x0803aa7b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 803aa58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803aa5a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 803aa5c:	68bb      	ldr	r3, [r7, #8]
 803aa5e:	431a      	orrs	r2, r3
 803aa60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803aa62:	659a      	str	r2, [r3, #88]	; 0x58
					break;
 803aa64:	e026      	b.n	803aab4 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 803aa66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803aa68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803aa6a:	1c5a      	adds	r2, r3, #1
 803aa6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803aa6e:	659a      	str	r2, [r3, #88]	; 0x58
					break;
 803aa70:	e020      	b.n	803aab4 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 803aa72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803aa74:	68ba      	ldr	r2, [r7, #8]
 803aa76:	659a      	str	r2, [r3, #88]	; 0x58
					break;
 803aa78:	e01c      	b.n	803aab4 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 803aa7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 803aa7e:	2b02      	cmp	r3, #2
 803aa80:	d003      	beq.n	803aa8a <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 803aa82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803aa84:	68ba      	ldr	r2, [r7, #8]
 803aa86:	659a      	str	r2, [r3, #88]	; 0x58
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 803aa88:	e014      	b.n	803aab4 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 803aa8a:	2300      	movs	r3, #0
 803aa8c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 803aa8e:	e011      	b.n	803aab4 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 803aa90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803aa92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803aa94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 803aa98:	d00b      	beq.n	803aab2 <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 803aa9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 803aa9e:	f383 8811 	msr	BASEPRI, r3
 803aaa2:	f3bf 8f6f 	isb	sy
 803aaa6:	f3bf 8f4f 	dsb	sy
 803aaaa:	61bb      	str	r3, [r7, #24]
 803aaac:	e7fe      	b.n	803aaac <xTaskGenericNotifyFromISR+0xe8>
					break;
 803aaae:	bf00      	nop
 803aab0:	e000      	b.n	803aab4 <xTaskGenericNotifyFromISR+0xf0>
					break;
 803aab2:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 803aab4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 803aab8:	2b01      	cmp	r3, #1
 803aaba:	d145      	bne.n	803ab48 <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 803aabc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803aabe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803aac0:	2b00      	cmp	r3, #0
 803aac2:	d009      	beq.n	803aad8 <xTaskGenericNotifyFromISR+0x114>
 803aac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 803aac8:	f383 8811 	msr	BASEPRI, r3
 803aacc:	f3bf 8f6f 	isb	sy
 803aad0:	f3bf 8f4f 	dsb	sy
 803aad4:	617b      	str	r3, [r7, #20]
 803aad6:	e7fe      	b.n	803aad6 <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 803aad8:	4b20      	ldr	r3, [pc, #128]	; (803ab5c <xTaskGenericNotifyFromISR+0x198>)
 803aada:	681b      	ldr	r3, [r3, #0]
 803aadc:	2b00      	cmp	r3, #0
 803aade:	d11d      	bne.n	803ab1c <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 803aae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803aae2:	3304      	adds	r3, #4
 803aae4:	4618      	mov	r0, r3
 803aae6:	f7fd fddd 	bl	80386a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 803aaea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803aaec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803aaee:	4b1c      	ldr	r3, [pc, #112]	; (803ab60 <xTaskGenericNotifyFromISR+0x19c>)
 803aaf0:	681b      	ldr	r3, [r3, #0]
 803aaf2:	429a      	cmp	r2, r3
 803aaf4:	d903      	bls.n	803aafe <xTaskGenericNotifyFromISR+0x13a>
 803aaf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803aaf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803aafa:	4a19      	ldr	r2, [pc, #100]	; (803ab60 <xTaskGenericNotifyFromISR+0x19c>)
 803aafc:	6013      	str	r3, [r2, #0]
 803aafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803ab00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803ab02:	4613      	mov	r3, r2
 803ab04:	009b      	lsls	r3, r3, #2
 803ab06:	4413      	add	r3, r2
 803ab08:	009b      	lsls	r3, r3, #2
 803ab0a:	4a16      	ldr	r2, [pc, #88]	; (803ab64 <xTaskGenericNotifyFromISR+0x1a0>)
 803ab0c:	441a      	add	r2, r3
 803ab0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803ab10:	3304      	adds	r3, #4
 803ab12:	4619      	mov	r1, r3
 803ab14:	4610      	mov	r0, r2
 803ab16:	f7fd fd68 	bl	80385ea <vListInsertEnd>
 803ab1a:	e005      	b.n	803ab28 <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 803ab1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803ab1e:	3318      	adds	r3, #24
 803ab20:	4619      	mov	r1, r3
 803ab22:	4811      	ldr	r0, [pc, #68]	; (803ab68 <xTaskGenericNotifyFromISR+0x1a4>)
 803ab24:	f7fd fd61 	bl	80385ea <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 803ab28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803ab2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803ab2c:	4b0f      	ldr	r3, [pc, #60]	; (803ab6c <xTaskGenericNotifyFromISR+0x1a8>)
 803ab2e:	681b      	ldr	r3, [r3, #0]
 803ab30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803ab32:	429a      	cmp	r2, r3
 803ab34:	d908      	bls.n	803ab48 <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 803ab36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 803ab38:	2b00      	cmp	r3, #0
 803ab3a:	d002      	beq.n	803ab42 <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 803ab3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 803ab3e:	2201      	movs	r2, #1
 803ab40:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 803ab42:	4b0b      	ldr	r3, [pc, #44]	; (803ab70 <xTaskGenericNotifyFromISR+0x1ac>)
 803ab44:	2201      	movs	r2, #1
 803ab46:	601a      	str	r2, [r3, #0]
 803ab48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803ab4a:	613b      	str	r3, [r7, #16]
	__asm volatile
 803ab4c:	693b      	ldr	r3, [r7, #16]
 803ab4e:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 803ab52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 803ab54:	4618      	mov	r0, r3
 803ab56:	3738      	adds	r7, #56	; 0x38
 803ab58:	46bd      	mov	sp, r7
 803ab5a:	bd80      	pop	{r7, pc}
 803ab5c:	200018f4 	.word	0x200018f4
 803ab60:	200018d4 	.word	0x200018d4
 803ab64:	200013fc 	.word	0x200013fc
 803ab68:	2000188c 	.word	0x2000188c
 803ab6c:	200013f8 	.word	0x200013f8
 803ab70:	200018e0 	.word	0x200018e0

0803ab74 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 803ab74:	b580      	push	{r7, lr}
 803ab76:	b084      	sub	sp, #16
 803ab78:	af00      	add	r7, sp, #0
 803ab7a:	6078      	str	r0, [r7, #4]
 803ab7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 803ab7e:	4b24      	ldr	r3, [pc, #144]	; (803ac10 <prvAddCurrentTaskToDelayedList+0x9c>)
 803ab80:	681b      	ldr	r3, [r3, #0]
 803ab82:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 803ab84:	4b23      	ldr	r3, [pc, #140]	; (803ac14 <prvAddCurrentTaskToDelayedList+0xa0>)
 803ab86:	681b      	ldr	r3, [r3, #0]
 803ab88:	2200      	movs	r2, #0
 803ab8a:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 803ab8e:	4b21      	ldr	r3, [pc, #132]	; (803ac14 <prvAddCurrentTaskToDelayedList+0xa0>)
 803ab90:	681b      	ldr	r3, [r3, #0]
 803ab92:	3304      	adds	r3, #4
 803ab94:	4618      	mov	r0, r3
 803ab96:	f7fd fd85 	bl	80386a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 803ab9a:	687b      	ldr	r3, [r7, #4]
 803ab9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 803aba0:	d10a      	bne.n	803abb8 <prvAddCurrentTaskToDelayedList+0x44>
 803aba2:	683b      	ldr	r3, [r7, #0]
 803aba4:	2b00      	cmp	r3, #0
 803aba6:	d007      	beq.n	803abb8 <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 803aba8:	4b1a      	ldr	r3, [pc, #104]	; (803ac14 <prvAddCurrentTaskToDelayedList+0xa0>)
 803abaa:	681b      	ldr	r3, [r3, #0]
 803abac:	3304      	adds	r3, #4
 803abae:	4619      	mov	r1, r3
 803abb0:	4819      	ldr	r0, [pc, #100]	; (803ac18 <prvAddCurrentTaskToDelayedList+0xa4>)
 803abb2:	f7fd fd1a 	bl	80385ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 803abb6:	e026      	b.n	803ac06 <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 803abb8:	68fa      	ldr	r2, [r7, #12]
 803abba:	687b      	ldr	r3, [r7, #4]
 803abbc:	4413      	add	r3, r2
 803abbe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 803abc0:	4b14      	ldr	r3, [pc, #80]	; (803ac14 <prvAddCurrentTaskToDelayedList+0xa0>)
 803abc2:	681b      	ldr	r3, [r3, #0]
 803abc4:	68ba      	ldr	r2, [r7, #8]
 803abc6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 803abc8:	68ba      	ldr	r2, [r7, #8]
 803abca:	68fb      	ldr	r3, [r7, #12]
 803abcc:	429a      	cmp	r2, r3
 803abce:	d209      	bcs.n	803abe4 <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 803abd0:	4b12      	ldr	r3, [pc, #72]	; (803ac1c <prvAddCurrentTaskToDelayedList+0xa8>)
 803abd2:	681a      	ldr	r2, [r3, #0]
 803abd4:	4b0f      	ldr	r3, [pc, #60]	; (803ac14 <prvAddCurrentTaskToDelayedList+0xa0>)
 803abd6:	681b      	ldr	r3, [r3, #0]
 803abd8:	3304      	adds	r3, #4
 803abda:	4619      	mov	r1, r3
 803abdc:	4610      	mov	r0, r2
 803abde:	f7fd fd28 	bl	8038632 <vListInsert>
}
 803abe2:	e010      	b.n	803ac06 <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 803abe4:	4b0e      	ldr	r3, [pc, #56]	; (803ac20 <prvAddCurrentTaskToDelayedList+0xac>)
 803abe6:	681a      	ldr	r2, [r3, #0]
 803abe8:	4b0a      	ldr	r3, [pc, #40]	; (803ac14 <prvAddCurrentTaskToDelayedList+0xa0>)
 803abea:	681b      	ldr	r3, [r3, #0]
 803abec:	3304      	adds	r3, #4
 803abee:	4619      	mov	r1, r3
 803abf0:	4610      	mov	r0, r2
 803abf2:	f7fd fd1e 	bl	8038632 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 803abf6:	4b0b      	ldr	r3, [pc, #44]	; (803ac24 <prvAddCurrentTaskToDelayedList+0xb0>)
 803abf8:	681b      	ldr	r3, [r3, #0]
 803abfa:	68ba      	ldr	r2, [r7, #8]
 803abfc:	429a      	cmp	r2, r3
 803abfe:	d202      	bcs.n	803ac06 <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 803ac00:	4a08      	ldr	r2, [pc, #32]	; (803ac24 <prvAddCurrentTaskToDelayedList+0xb0>)
 803ac02:	68bb      	ldr	r3, [r7, #8]
 803ac04:	6013      	str	r3, [r2, #0]
}
 803ac06:	bf00      	nop
 803ac08:	3710      	adds	r7, #16
 803ac0a:	46bd      	mov	sp, r7
 803ac0c:	bd80      	pop	{r7, pc}
 803ac0e:	bf00      	nop
 803ac10:	200018d0 	.word	0x200018d0
 803ac14:	200013f8 	.word	0x200013f8
 803ac18:	200018b8 	.word	0x200018b8
 803ac1c:	20001888 	.word	0x20001888
 803ac20:	20001884 	.word	0x20001884
 803ac24:	200018ec 	.word	0x200018ec

0803ac28 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 803ac28:	b580      	push	{r7, lr}
 803ac2a:	b08a      	sub	sp, #40	; 0x28
 803ac2c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 803ac2e:	2300      	movs	r3, #0
 803ac30:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 803ac32:	f000 faff 	bl	803b234 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 803ac36:	4b1c      	ldr	r3, [pc, #112]	; (803aca8 <xTimerCreateTimerTask+0x80>)
 803ac38:	681b      	ldr	r3, [r3, #0]
 803ac3a:	2b00      	cmp	r3, #0
 803ac3c:	d021      	beq.n	803ac82 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 803ac3e:	2300      	movs	r3, #0
 803ac40:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 803ac42:	2300      	movs	r3, #0
 803ac44:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 803ac46:	1d3a      	adds	r2, r7, #4
 803ac48:	f107 0108 	add.w	r1, r7, #8
 803ac4c:	f107 030c 	add.w	r3, r7, #12
 803ac50:	4618      	mov	r0, r3
 803ac52:	f7fd fa9d 	bl	8038190 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 803ac56:	6879      	ldr	r1, [r7, #4]
 803ac58:	68bb      	ldr	r3, [r7, #8]
 803ac5a:	68fa      	ldr	r2, [r7, #12]
 803ac5c:	9202      	str	r2, [sp, #8]
 803ac5e:	9301      	str	r3, [sp, #4]
 803ac60:	2302      	movs	r3, #2
 803ac62:	9300      	str	r3, [sp, #0]
 803ac64:	2300      	movs	r3, #0
 803ac66:	460a      	mov	r2, r1
 803ac68:	4910      	ldr	r1, [pc, #64]	; (803acac <xTimerCreateTimerTask+0x84>)
 803ac6a:	4811      	ldr	r0, [pc, #68]	; (803acb0 <xTimerCreateTimerTask+0x88>)
 803ac6c:	f7fe fcaa 	bl	80395c4 <xTaskCreateStatic>
 803ac70:	4602      	mov	r2, r0
 803ac72:	4b10      	ldr	r3, [pc, #64]	; (803acb4 <xTimerCreateTimerTask+0x8c>)
 803ac74:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 803ac76:	4b0f      	ldr	r3, [pc, #60]	; (803acb4 <xTimerCreateTimerTask+0x8c>)
 803ac78:	681b      	ldr	r3, [r3, #0]
 803ac7a:	2b00      	cmp	r3, #0
 803ac7c:	d001      	beq.n	803ac82 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 803ac7e:	2301      	movs	r3, #1
 803ac80:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 803ac82:	697b      	ldr	r3, [r7, #20]
 803ac84:	2b00      	cmp	r3, #0
 803ac86:	d109      	bne.n	803ac9c <xTimerCreateTimerTask+0x74>
	__asm volatile
 803ac88:	f04f 0350 	mov.w	r3, #80	; 0x50
 803ac8c:	f383 8811 	msr	BASEPRI, r3
 803ac90:	f3bf 8f6f 	isb	sy
 803ac94:	f3bf 8f4f 	dsb	sy
 803ac98:	613b      	str	r3, [r7, #16]
 803ac9a:	e7fe      	b.n	803ac9a <xTimerCreateTimerTask+0x72>
	return xReturn;
 803ac9c:	697b      	ldr	r3, [r7, #20]
}
 803ac9e:	4618      	mov	r0, r3
 803aca0:	3718      	adds	r7, #24
 803aca2:	46bd      	mov	sp, r7
 803aca4:	bd80      	pop	{r7, pc}
 803aca6:	bf00      	nop
 803aca8:	20001928 	.word	0x20001928
 803acac:	08043b6c 	.word	0x08043b6c
 803acb0:	0803ade9 	.word	0x0803ade9
 803acb4:	2000192c 	.word	0x2000192c

0803acb8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 803acb8:	b580      	push	{r7, lr}
 803acba:	b08a      	sub	sp, #40	; 0x28
 803acbc:	af00      	add	r7, sp, #0
 803acbe:	60f8      	str	r0, [r7, #12]
 803acc0:	60b9      	str	r1, [r7, #8]
 803acc2:	607a      	str	r2, [r7, #4]
 803acc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 803acc6:	2300      	movs	r3, #0
 803acc8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 803acca:	68fb      	ldr	r3, [r7, #12]
 803accc:	2b00      	cmp	r3, #0
 803acce:	d109      	bne.n	803ace4 <xTimerGenericCommand+0x2c>
 803acd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 803acd4:	f383 8811 	msr	BASEPRI, r3
 803acd8:	f3bf 8f6f 	isb	sy
 803acdc:	f3bf 8f4f 	dsb	sy
 803ace0:	623b      	str	r3, [r7, #32]
 803ace2:	e7fe      	b.n	803ace2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 803ace4:	4b19      	ldr	r3, [pc, #100]	; (803ad4c <xTimerGenericCommand+0x94>)
 803ace6:	681b      	ldr	r3, [r3, #0]
 803ace8:	2b00      	cmp	r3, #0
 803acea:	d02a      	beq.n	803ad42 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 803acec:	68bb      	ldr	r3, [r7, #8]
 803acee:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 803acf0:	687b      	ldr	r3, [r7, #4]
 803acf2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 803acf4:	68fb      	ldr	r3, [r7, #12]
 803acf6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 803acf8:	68bb      	ldr	r3, [r7, #8]
 803acfa:	2b05      	cmp	r3, #5
 803acfc:	dc18      	bgt.n	803ad30 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 803acfe:	f7ff fbb5 	bl	803a46c <xTaskGetSchedulerState>
 803ad02:	4603      	mov	r3, r0
 803ad04:	2b02      	cmp	r3, #2
 803ad06:	d109      	bne.n	803ad1c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 803ad08:	4b10      	ldr	r3, [pc, #64]	; (803ad4c <xTimerGenericCommand+0x94>)
 803ad0a:	6818      	ldr	r0, [r3, #0]
 803ad0c:	f107 0110 	add.w	r1, r7, #16
 803ad10:	2300      	movs	r3, #0
 803ad12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 803ad14:	f7fd fee2 	bl	8038adc <xQueueGenericSend>
 803ad18:	6278      	str	r0, [r7, #36]	; 0x24
 803ad1a:	e012      	b.n	803ad42 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 803ad1c:	4b0b      	ldr	r3, [pc, #44]	; (803ad4c <xTimerGenericCommand+0x94>)
 803ad1e:	6818      	ldr	r0, [r3, #0]
 803ad20:	f107 0110 	add.w	r1, r7, #16
 803ad24:	2300      	movs	r3, #0
 803ad26:	2200      	movs	r2, #0
 803ad28:	f7fd fed8 	bl	8038adc <xQueueGenericSend>
 803ad2c:	6278      	str	r0, [r7, #36]	; 0x24
 803ad2e:	e008      	b.n	803ad42 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 803ad30:	4b06      	ldr	r3, [pc, #24]	; (803ad4c <xTimerGenericCommand+0x94>)
 803ad32:	6818      	ldr	r0, [r3, #0]
 803ad34:	f107 0110 	add.w	r1, r7, #16
 803ad38:	2300      	movs	r3, #0
 803ad3a:	683a      	ldr	r2, [r7, #0]
 803ad3c:	f7fd ffc8 	bl	8038cd0 <xQueueGenericSendFromISR>
 803ad40:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 803ad42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 803ad44:	4618      	mov	r0, r3
 803ad46:	3728      	adds	r7, #40	; 0x28
 803ad48:	46bd      	mov	sp, r7
 803ad4a:	bd80      	pop	{r7, pc}
 803ad4c:	20001928 	.word	0x20001928

0803ad50 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 803ad50:	b580      	push	{r7, lr}
 803ad52:	b088      	sub	sp, #32
 803ad54:	af02      	add	r7, sp, #8
 803ad56:	6078      	str	r0, [r7, #4]
 803ad58:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 803ad5a:	4b22      	ldr	r3, [pc, #136]	; (803ade4 <prvProcessExpiredTimer+0x94>)
 803ad5c:	681b      	ldr	r3, [r3, #0]
 803ad5e:	68db      	ldr	r3, [r3, #12]
 803ad60:	68db      	ldr	r3, [r3, #12]
 803ad62:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 803ad64:	697b      	ldr	r3, [r7, #20]
 803ad66:	3304      	adds	r3, #4
 803ad68:	4618      	mov	r0, r3
 803ad6a:	f7fd fc9b 	bl	80386a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 803ad6e:	697b      	ldr	r3, [r7, #20]
 803ad70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 803ad74:	f003 0304 	and.w	r3, r3, #4
 803ad78:	2b00      	cmp	r3, #0
 803ad7a:	d021      	beq.n	803adc0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 803ad7c:	697b      	ldr	r3, [r7, #20]
 803ad7e:	699a      	ldr	r2, [r3, #24]
 803ad80:	687b      	ldr	r3, [r7, #4]
 803ad82:	18d1      	adds	r1, r2, r3
 803ad84:	687b      	ldr	r3, [r7, #4]
 803ad86:	683a      	ldr	r2, [r7, #0]
 803ad88:	6978      	ldr	r0, [r7, #20]
 803ad8a:	f000 f8d1 	bl	803af30 <prvInsertTimerInActiveList>
 803ad8e:	4603      	mov	r3, r0
 803ad90:	2b00      	cmp	r3, #0
 803ad92:	d01e      	beq.n	803add2 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 803ad94:	2300      	movs	r3, #0
 803ad96:	9300      	str	r3, [sp, #0]
 803ad98:	2300      	movs	r3, #0
 803ad9a:	687a      	ldr	r2, [r7, #4]
 803ad9c:	2100      	movs	r1, #0
 803ad9e:	6978      	ldr	r0, [r7, #20]
 803ada0:	f7ff ff8a 	bl	803acb8 <xTimerGenericCommand>
 803ada4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 803ada6:	693b      	ldr	r3, [r7, #16]
 803ada8:	2b00      	cmp	r3, #0
 803adaa:	d112      	bne.n	803add2 <prvProcessExpiredTimer+0x82>
 803adac:	f04f 0350 	mov.w	r3, #80	; 0x50
 803adb0:	f383 8811 	msr	BASEPRI, r3
 803adb4:	f3bf 8f6f 	isb	sy
 803adb8:	f3bf 8f4f 	dsb	sy
 803adbc:	60fb      	str	r3, [r7, #12]
 803adbe:	e7fe      	b.n	803adbe <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 803adc0:	697b      	ldr	r3, [r7, #20]
 803adc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 803adc6:	f023 0301 	bic.w	r3, r3, #1
 803adca:	b2da      	uxtb	r2, r3
 803adcc:	697b      	ldr	r3, [r7, #20]
 803adce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 803add2:	697b      	ldr	r3, [r7, #20]
 803add4:	6a1b      	ldr	r3, [r3, #32]
 803add6:	6978      	ldr	r0, [r7, #20]
 803add8:	4798      	blx	r3
}
 803adda:	bf00      	nop
 803addc:	3718      	adds	r7, #24
 803adde:	46bd      	mov	sp, r7
 803ade0:	bd80      	pop	{r7, pc}
 803ade2:	bf00      	nop
 803ade4:	20001920 	.word	0x20001920

0803ade8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 803ade8:	b580      	push	{r7, lr}
 803adea:	b084      	sub	sp, #16
 803adec:	af00      	add	r7, sp, #0
 803adee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 803adf0:	f107 0308 	add.w	r3, r7, #8
 803adf4:	4618      	mov	r0, r3
 803adf6:	f000 f857 	bl	803aea8 <prvGetNextExpireTime>
 803adfa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 803adfc:	68bb      	ldr	r3, [r7, #8]
 803adfe:	4619      	mov	r1, r3
 803ae00:	68f8      	ldr	r0, [r7, #12]
 803ae02:	f000 f803 	bl	803ae0c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 803ae06:	f000 f8d5 	bl	803afb4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 803ae0a:	e7f1      	b.n	803adf0 <prvTimerTask+0x8>

0803ae0c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 803ae0c:	b580      	push	{r7, lr}
 803ae0e:	b084      	sub	sp, #16
 803ae10:	af00      	add	r7, sp, #0
 803ae12:	6078      	str	r0, [r7, #4]
 803ae14:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 803ae16:	f7fe fe8b 	bl	8039b30 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 803ae1a:	f107 0308 	add.w	r3, r7, #8
 803ae1e:	4618      	mov	r0, r3
 803ae20:	f000 f866 	bl	803aef0 <prvSampleTimeNow>
 803ae24:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 803ae26:	68bb      	ldr	r3, [r7, #8]
 803ae28:	2b00      	cmp	r3, #0
 803ae2a:	d130      	bne.n	803ae8e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 803ae2c:	683b      	ldr	r3, [r7, #0]
 803ae2e:	2b00      	cmp	r3, #0
 803ae30:	d10a      	bne.n	803ae48 <prvProcessTimerOrBlockTask+0x3c>
 803ae32:	687a      	ldr	r2, [r7, #4]
 803ae34:	68fb      	ldr	r3, [r7, #12]
 803ae36:	429a      	cmp	r2, r3
 803ae38:	d806      	bhi.n	803ae48 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 803ae3a:	f7fe fe87 	bl	8039b4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 803ae3e:	68f9      	ldr	r1, [r7, #12]
 803ae40:	6878      	ldr	r0, [r7, #4]
 803ae42:	f7ff ff85 	bl	803ad50 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 803ae46:	e024      	b.n	803ae92 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 803ae48:	683b      	ldr	r3, [r7, #0]
 803ae4a:	2b00      	cmp	r3, #0
 803ae4c:	d008      	beq.n	803ae60 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 803ae4e:	4b13      	ldr	r3, [pc, #76]	; (803ae9c <prvProcessTimerOrBlockTask+0x90>)
 803ae50:	681b      	ldr	r3, [r3, #0]
 803ae52:	681b      	ldr	r3, [r3, #0]
 803ae54:	2b00      	cmp	r3, #0
 803ae56:	d101      	bne.n	803ae5c <prvProcessTimerOrBlockTask+0x50>
 803ae58:	2301      	movs	r3, #1
 803ae5a:	e000      	b.n	803ae5e <prvProcessTimerOrBlockTask+0x52>
 803ae5c:	2300      	movs	r3, #0
 803ae5e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 803ae60:	4b0f      	ldr	r3, [pc, #60]	; (803aea0 <prvProcessTimerOrBlockTask+0x94>)
 803ae62:	6818      	ldr	r0, [r3, #0]
 803ae64:	687a      	ldr	r2, [r7, #4]
 803ae66:	68fb      	ldr	r3, [r7, #12]
 803ae68:	1ad3      	subs	r3, r2, r3
 803ae6a:	683a      	ldr	r2, [r7, #0]
 803ae6c:	4619      	mov	r1, r3
 803ae6e:	f7fe fb75 	bl	803955c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 803ae72:	f7fe fe6b 	bl	8039b4c <xTaskResumeAll>
 803ae76:	4603      	mov	r3, r0
 803ae78:	2b00      	cmp	r3, #0
 803ae7a:	d10a      	bne.n	803ae92 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 803ae7c:	4b09      	ldr	r3, [pc, #36]	; (803aea4 <prvProcessTimerOrBlockTask+0x98>)
 803ae7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 803ae82:	601a      	str	r2, [r3, #0]
 803ae84:	f3bf 8f4f 	dsb	sy
 803ae88:	f3bf 8f6f 	isb	sy
}
 803ae8c:	e001      	b.n	803ae92 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 803ae8e:	f7fe fe5d 	bl	8039b4c <xTaskResumeAll>
}
 803ae92:	bf00      	nop
 803ae94:	3710      	adds	r7, #16
 803ae96:	46bd      	mov	sp, r7
 803ae98:	bd80      	pop	{r7, pc}
 803ae9a:	bf00      	nop
 803ae9c:	20001924 	.word	0x20001924
 803aea0:	20001928 	.word	0x20001928
 803aea4:	e000ed04 	.word	0xe000ed04

0803aea8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 803aea8:	b480      	push	{r7}
 803aeaa:	b085      	sub	sp, #20
 803aeac:	af00      	add	r7, sp, #0
 803aeae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 803aeb0:	4b0e      	ldr	r3, [pc, #56]	; (803aeec <prvGetNextExpireTime+0x44>)
 803aeb2:	681b      	ldr	r3, [r3, #0]
 803aeb4:	681b      	ldr	r3, [r3, #0]
 803aeb6:	2b00      	cmp	r3, #0
 803aeb8:	d101      	bne.n	803aebe <prvGetNextExpireTime+0x16>
 803aeba:	2201      	movs	r2, #1
 803aebc:	e000      	b.n	803aec0 <prvGetNextExpireTime+0x18>
 803aebe:	2200      	movs	r2, #0
 803aec0:	687b      	ldr	r3, [r7, #4]
 803aec2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 803aec4:	687b      	ldr	r3, [r7, #4]
 803aec6:	681b      	ldr	r3, [r3, #0]
 803aec8:	2b00      	cmp	r3, #0
 803aeca:	d105      	bne.n	803aed8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 803aecc:	4b07      	ldr	r3, [pc, #28]	; (803aeec <prvGetNextExpireTime+0x44>)
 803aece:	681b      	ldr	r3, [r3, #0]
 803aed0:	68db      	ldr	r3, [r3, #12]
 803aed2:	681b      	ldr	r3, [r3, #0]
 803aed4:	60fb      	str	r3, [r7, #12]
 803aed6:	e001      	b.n	803aedc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 803aed8:	2300      	movs	r3, #0
 803aeda:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 803aedc:	68fb      	ldr	r3, [r7, #12]
}
 803aede:	4618      	mov	r0, r3
 803aee0:	3714      	adds	r7, #20
 803aee2:	46bd      	mov	sp, r7
 803aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 803aee8:	4770      	bx	lr
 803aeea:	bf00      	nop
 803aeec:	20001920 	.word	0x20001920

0803aef0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 803aef0:	b580      	push	{r7, lr}
 803aef2:	b084      	sub	sp, #16
 803aef4:	af00      	add	r7, sp, #0
 803aef6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 803aef8:	f7fe fec4 	bl	8039c84 <xTaskGetTickCount>
 803aefc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 803aefe:	4b0b      	ldr	r3, [pc, #44]	; (803af2c <prvSampleTimeNow+0x3c>)
 803af00:	681b      	ldr	r3, [r3, #0]
 803af02:	68fa      	ldr	r2, [r7, #12]
 803af04:	429a      	cmp	r2, r3
 803af06:	d205      	bcs.n	803af14 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 803af08:	f000 f930 	bl	803b16c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 803af0c:	687b      	ldr	r3, [r7, #4]
 803af0e:	2201      	movs	r2, #1
 803af10:	601a      	str	r2, [r3, #0]
 803af12:	e002      	b.n	803af1a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 803af14:	687b      	ldr	r3, [r7, #4]
 803af16:	2200      	movs	r2, #0
 803af18:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 803af1a:	4a04      	ldr	r2, [pc, #16]	; (803af2c <prvSampleTimeNow+0x3c>)
 803af1c:	68fb      	ldr	r3, [r7, #12]
 803af1e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 803af20:	68fb      	ldr	r3, [r7, #12]
}
 803af22:	4618      	mov	r0, r3
 803af24:	3710      	adds	r7, #16
 803af26:	46bd      	mov	sp, r7
 803af28:	bd80      	pop	{r7, pc}
 803af2a:	bf00      	nop
 803af2c:	20001930 	.word	0x20001930

0803af30 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 803af30:	b580      	push	{r7, lr}
 803af32:	b086      	sub	sp, #24
 803af34:	af00      	add	r7, sp, #0
 803af36:	60f8      	str	r0, [r7, #12]
 803af38:	60b9      	str	r1, [r7, #8]
 803af3a:	607a      	str	r2, [r7, #4]
 803af3c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 803af3e:	2300      	movs	r3, #0
 803af40:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 803af42:	68fb      	ldr	r3, [r7, #12]
 803af44:	68ba      	ldr	r2, [r7, #8]
 803af46:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 803af48:	68fb      	ldr	r3, [r7, #12]
 803af4a:	68fa      	ldr	r2, [r7, #12]
 803af4c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 803af4e:	68ba      	ldr	r2, [r7, #8]
 803af50:	687b      	ldr	r3, [r7, #4]
 803af52:	429a      	cmp	r2, r3
 803af54:	d812      	bhi.n	803af7c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 803af56:	687a      	ldr	r2, [r7, #4]
 803af58:	683b      	ldr	r3, [r7, #0]
 803af5a:	1ad2      	subs	r2, r2, r3
 803af5c:	68fb      	ldr	r3, [r7, #12]
 803af5e:	699b      	ldr	r3, [r3, #24]
 803af60:	429a      	cmp	r2, r3
 803af62:	d302      	bcc.n	803af6a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 803af64:	2301      	movs	r3, #1
 803af66:	617b      	str	r3, [r7, #20]
 803af68:	e01b      	b.n	803afa2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 803af6a:	4b10      	ldr	r3, [pc, #64]	; (803afac <prvInsertTimerInActiveList+0x7c>)
 803af6c:	681a      	ldr	r2, [r3, #0]
 803af6e:	68fb      	ldr	r3, [r7, #12]
 803af70:	3304      	adds	r3, #4
 803af72:	4619      	mov	r1, r3
 803af74:	4610      	mov	r0, r2
 803af76:	f7fd fb5c 	bl	8038632 <vListInsert>
 803af7a:	e012      	b.n	803afa2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 803af7c:	687a      	ldr	r2, [r7, #4]
 803af7e:	683b      	ldr	r3, [r7, #0]
 803af80:	429a      	cmp	r2, r3
 803af82:	d206      	bcs.n	803af92 <prvInsertTimerInActiveList+0x62>
 803af84:	68ba      	ldr	r2, [r7, #8]
 803af86:	683b      	ldr	r3, [r7, #0]
 803af88:	429a      	cmp	r2, r3
 803af8a:	d302      	bcc.n	803af92 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 803af8c:	2301      	movs	r3, #1
 803af8e:	617b      	str	r3, [r7, #20]
 803af90:	e007      	b.n	803afa2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 803af92:	4b07      	ldr	r3, [pc, #28]	; (803afb0 <prvInsertTimerInActiveList+0x80>)
 803af94:	681a      	ldr	r2, [r3, #0]
 803af96:	68fb      	ldr	r3, [r7, #12]
 803af98:	3304      	adds	r3, #4
 803af9a:	4619      	mov	r1, r3
 803af9c:	4610      	mov	r0, r2
 803af9e:	f7fd fb48 	bl	8038632 <vListInsert>
		}
	}

	return xProcessTimerNow;
 803afa2:	697b      	ldr	r3, [r7, #20]
}
 803afa4:	4618      	mov	r0, r3
 803afa6:	3718      	adds	r7, #24
 803afa8:	46bd      	mov	sp, r7
 803afaa:	bd80      	pop	{r7, pc}
 803afac:	20001924 	.word	0x20001924
 803afb0:	20001920 	.word	0x20001920

0803afb4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 803afb4:	b580      	push	{r7, lr}
 803afb6:	b08e      	sub	sp, #56	; 0x38
 803afb8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 803afba:	e0c6      	b.n	803b14a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 803afbc:	687b      	ldr	r3, [r7, #4]
 803afbe:	2b00      	cmp	r3, #0
 803afc0:	da17      	bge.n	803aff2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 803afc2:	1d3b      	adds	r3, r7, #4
 803afc4:	3304      	adds	r3, #4
 803afc6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 803afc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803afca:	2b00      	cmp	r3, #0
 803afcc:	d109      	bne.n	803afe2 <prvProcessReceivedCommands+0x2e>
 803afce:	f04f 0350 	mov.w	r3, #80	; 0x50
 803afd2:	f383 8811 	msr	BASEPRI, r3
 803afd6:	f3bf 8f6f 	isb	sy
 803afda:	f3bf 8f4f 	dsb	sy
 803afde:	61fb      	str	r3, [r7, #28]
 803afe0:	e7fe      	b.n	803afe0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 803afe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803afe4:	681b      	ldr	r3, [r3, #0]
 803afe6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 803afe8:	6850      	ldr	r0, [r2, #4]
 803afea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 803afec:	6892      	ldr	r2, [r2, #8]
 803afee:	4611      	mov	r1, r2
 803aff0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 803aff2:	687b      	ldr	r3, [r7, #4]
 803aff4:	2b00      	cmp	r3, #0
 803aff6:	f2c0 80a7 	blt.w	803b148 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 803affa:	68fb      	ldr	r3, [r7, #12]
 803affc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 803affe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803b000:	695b      	ldr	r3, [r3, #20]
 803b002:	2b00      	cmp	r3, #0
 803b004:	d004      	beq.n	803b010 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 803b006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803b008:	3304      	adds	r3, #4
 803b00a:	4618      	mov	r0, r3
 803b00c:	f7fd fb4a 	bl	80386a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 803b010:	463b      	mov	r3, r7
 803b012:	4618      	mov	r0, r3
 803b014:	f7ff ff6c 	bl	803aef0 <prvSampleTimeNow>
 803b018:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 803b01a:	687b      	ldr	r3, [r7, #4]
 803b01c:	2b09      	cmp	r3, #9
 803b01e:	f200 8094 	bhi.w	803b14a <prvProcessReceivedCommands+0x196>
 803b022:	a201      	add	r2, pc, #4	; (adr r2, 803b028 <prvProcessReceivedCommands+0x74>)
 803b024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803b028:	0803b051 	.word	0x0803b051
 803b02c:	0803b051 	.word	0x0803b051
 803b030:	0803b051 	.word	0x0803b051
 803b034:	0803b0c3 	.word	0x0803b0c3
 803b038:	0803b0d7 	.word	0x0803b0d7
 803b03c:	0803b11f 	.word	0x0803b11f
 803b040:	0803b051 	.word	0x0803b051
 803b044:	0803b051 	.word	0x0803b051
 803b048:	0803b0c3 	.word	0x0803b0c3
 803b04c:	0803b0d7 	.word	0x0803b0d7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 803b050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803b052:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 803b056:	f043 0301 	orr.w	r3, r3, #1
 803b05a:	b2da      	uxtb	r2, r3
 803b05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803b05e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 803b062:	68ba      	ldr	r2, [r7, #8]
 803b064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803b066:	699b      	ldr	r3, [r3, #24]
 803b068:	18d1      	adds	r1, r2, r3
 803b06a:	68bb      	ldr	r3, [r7, #8]
 803b06c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 803b06e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 803b070:	f7ff ff5e 	bl	803af30 <prvInsertTimerInActiveList>
 803b074:	4603      	mov	r3, r0
 803b076:	2b00      	cmp	r3, #0
 803b078:	d067      	beq.n	803b14a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 803b07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803b07c:	6a1b      	ldr	r3, [r3, #32]
 803b07e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 803b080:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 803b082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803b084:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 803b088:	f003 0304 	and.w	r3, r3, #4
 803b08c:	2b00      	cmp	r3, #0
 803b08e:	d05c      	beq.n	803b14a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 803b090:	68ba      	ldr	r2, [r7, #8]
 803b092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803b094:	699b      	ldr	r3, [r3, #24]
 803b096:	441a      	add	r2, r3
 803b098:	2300      	movs	r3, #0
 803b09a:	9300      	str	r3, [sp, #0]
 803b09c:	2300      	movs	r3, #0
 803b09e:	2100      	movs	r1, #0
 803b0a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 803b0a2:	f7ff fe09 	bl	803acb8 <xTimerGenericCommand>
 803b0a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 803b0a8:	6a3b      	ldr	r3, [r7, #32]
 803b0aa:	2b00      	cmp	r3, #0
 803b0ac:	d14d      	bne.n	803b14a <prvProcessReceivedCommands+0x196>
 803b0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 803b0b2:	f383 8811 	msr	BASEPRI, r3
 803b0b6:	f3bf 8f6f 	isb	sy
 803b0ba:	f3bf 8f4f 	dsb	sy
 803b0be:	61bb      	str	r3, [r7, #24]
 803b0c0:	e7fe      	b.n	803b0c0 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 803b0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803b0c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 803b0c8:	f023 0301 	bic.w	r3, r3, #1
 803b0cc:	b2da      	uxtb	r2, r3
 803b0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803b0d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 803b0d4:	e039      	b.n	803b14a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 803b0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803b0d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 803b0dc:	f043 0301 	orr.w	r3, r3, #1
 803b0e0:	b2da      	uxtb	r2, r3
 803b0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803b0e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 803b0e8:	68ba      	ldr	r2, [r7, #8]
 803b0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803b0ec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 803b0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803b0f0:	699b      	ldr	r3, [r3, #24]
 803b0f2:	2b00      	cmp	r3, #0
 803b0f4:	d109      	bne.n	803b10a <prvProcessReceivedCommands+0x156>
 803b0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 803b0fa:	f383 8811 	msr	BASEPRI, r3
 803b0fe:	f3bf 8f6f 	isb	sy
 803b102:	f3bf 8f4f 	dsb	sy
 803b106:	617b      	str	r3, [r7, #20]
 803b108:	e7fe      	b.n	803b108 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 803b10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803b10c:	699a      	ldr	r2, [r3, #24]
 803b10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803b110:	18d1      	adds	r1, r2, r3
 803b112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803b114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 803b116:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 803b118:	f7ff ff0a 	bl	803af30 <prvInsertTimerInActiveList>
					break;
 803b11c:	e015      	b.n	803b14a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 803b11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803b120:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 803b124:	f003 0302 	and.w	r3, r3, #2
 803b128:	2b00      	cmp	r3, #0
 803b12a:	d103      	bne.n	803b134 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 803b12c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 803b12e:	f000 fbe1 	bl	803b8f4 <vPortFree>
 803b132:	e00a      	b.n	803b14a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 803b134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803b136:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 803b13a:	f023 0301 	bic.w	r3, r3, #1
 803b13e:	b2da      	uxtb	r2, r3
 803b140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803b142:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 803b146:	e000      	b.n	803b14a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 803b148:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 803b14a:	4b07      	ldr	r3, [pc, #28]	; (803b168 <prvProcessReceivedCommands+0x1b4>)
 803b14c:	681b      	ldr	r3, [r3, #0]
 803b14e:	1d39      	adds	r1, r7, #4
 803b150:	2200      	movs	r2, #0
 803b152:	4618      	mov	r0, r3
 803b154:	f7fd fe50 	bl	8038df8 <xQueueReceive>
 803b158:	4603      	mov	r3, r0
 803b15a:	2b00      	cmp	r3, #0
 803b15c:	f47f af2e 	bne.w	803afbc <prvProcessReceivedCommands+0x8>
	}
}
 803b160:	bf00      	nop
 803b162:	3730      	adds	r7, #48	; 0x30
 803b164:	46bd      	mov	sp, r7
 803b166:	bd80      	pop	{r7, pc}
 803b168:	20001928 	.word	0x20001928

0803b16c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 803b16c:	b580      	push	{r7, lr}
 803b16e:	b088      	sub	sp, #32
 803b170:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 803b172:	e047      	b.n	803b204 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 803b174:	4b2d      	ldr	r3, [pc, #180]	; (803b22c <prvSwitchTimerLists+0xc0>)
 803b176:	681b      	ldr	r3, [r3, #0]
 803b178:	68db      	ldr	r3, [r3, #12]
 803b17a:	681b      	ldr	r3, [r3, #0]
 803b17c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 803b17e:	4b2b      	ldr	r3, [pc, #172]	; (803b22c <prvSwitchTimerLists+0xc0>)
 803b180:	681b      	ldr	r3, [r3, #0]
 803b182:	68db      	ldr	r3, [r3, #12]
 803b184:	68db      	ldr	r3, [r3, #12]
 803b186:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 803b188:	68fb      	ldr	r3, [r7, #12]
 803b18a:	3304      	adds	r3, #4
 803b18c:	4618      	mov	r0, r3
 803b18e:	f7fd fa89 	bl	80386a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 803b192:	68fb      	ldr	r3, [r7, #12]
 803b194:	6a1b      	ldr	r3, [r3, #32]
 803b196:	68f8      	ldr	r0, [r7, #12]
 803b198:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 803b19a:	68fb      	ldr	r3, [r7, #12]
 803b19c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 803b1a0:	f003 0304 	and.w	r3, r3, #4
 803b1a4:	2b00      	cmp	r3, #0
 803b1a6:	d02d      	beq.n	803b204 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 803b1a8:	68fb      	ldr	r3, [r7, #12]
 803b1aa:	699b      	ldr	r3, [r3, #24]
 803b1ac:	693a      	ldr	r2, [r7, #16]
 803b1ae:	4413      	add	r3, r2
 803b1b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 803b1b2:	68ba      	ldr	r2, [r7, #8]
 803b1b4:	693b      	ldr	r3, [r7, #16]
 803b1b6:	429a      	cmp	r2, r3
 803b1b8:	d90e      	bls.n	803b1d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 803b1ba:	68fb      	ldr	r3, [r7, #12]
 803b1bc:	68ba      	ldr	r2, [r7, #8]
 803b1be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 803b1c0:	68fb      	ldr	r3, [r7, #12]
 803b1c2:	68fa      	ldr	r2, [r7, #12]
 803b1c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 803b1c6:	4b19      	ldr	r3, [pc, #100]	; (803b22c <prvSwitchTimerLists+0xc0>)
 803b1c8:	681a      	ldr	r2, [r3, #0]
 803b1ca:	68fb      	ldr	r3, [r7, #12]
 803b1cc:	3304      	adds	r3, #4
 803b1ce:	4619      	mov	r1, r3
 803b1d0:	4610      	mov	r0, r2
 803b1d2:	f7fd fa2e 	bl	8038632 <vListInsert>
 803b1d6:	e015      	b.n	803b204 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 803b1d8:	2300      	movs	r3, #0
 803b1da:	9300      	str	r3, [sp, #0]
 803b1dc:	2300      	movs	r3, #0
 803b1de:	693a      	ldr	r2, [r7, #16]
 803b1e0:	2100      	movs	r1, #0
 803b1e2:	68f8      	ldr	r0, [r7, #12]
 803b1e4:	f7ff fd68 	bl	803acb8 <xTimerGenericCommand>
 803b1e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 803b1ea:	687b      	ldr	r3, [r7, #4]
 803b1ec:	2b00      	cmp	r3, #0
 803b1ee:	d109      	bne.n	803b204 <prvSwitchTimerLists+0x98>
 803b1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 803b1f4:	f383 8811 	msr	BASEPRI, r3
 803b1f8:	f3bf 8f6f 	isb	sy
 803b1fc:	f3bf 8f4f 	dsb	sy
 803b200:	603b      	str	r3, [r7, #0]
 803b202:	e7fe      	b.n	803b202 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 803b204:	4b09      	ldr	r3, [pc, #36]	; (803b22c <prvSwitchTimerLists+0xc0>)
 803b206:	681b      	ldr	r3, [r3, #0]
 803b208:	681b      	ldr	r3, [r3, #0]
 803b20a:	2b00      	cmp	r3, #0
 803b20c:	d1b2      	bne.n	803b174 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 803b20e:	4b07      	ldr	r3, [pc, #28]	; (803b22c <prvSwitchTimerLists+0xc0>)
 803b210:	681b      	ldr	r3, [r3, #0]
 803b212:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 803b214:	4b06      	ldr	r3, [pc, #24]	; (803b230 <prvSwitchTimerLists+0xc4>)
 803b216:	681b      	ldr	r3, [r3, #0]
 803b218:	4a04      	ldr	r2, [pc, #16]	; (803b22c <prvSwitchTimerLists+0xc0>)
 803b21a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 803b21c:	4a04      	ldr	r2, [pc, #16]	; (803b230 <prvSwitchTimerLists+0xc4>)
 803b21e:	697b      	ldr	r3, [r7, #20]
 803b220:	6013      	str	r3, [r2, #0]
}
 803b222:	bf00      	nop
 803b224:	3718      	adds	r7, #24
 803b226:	46bd      	mov	sp, r7
 803b228:	bd80      	pop	{r7, pc}
 803b22a:	bf00      	nop
 803b22c:	20001920 	.word	0x20001920
 803b230:	20001924 	.word	0x20001924

0803b234 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 803b234:	b580      	push	{r7, lr}
 803b236:	b082      	sub	sp, #8
 803b238:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 803b23a:	f000 f97f 	bl	803b53c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 803b23e:	4b15      	ldr	r3, [pc, #84]	; (803b294 <prvCheckForValidListAndQueue+0x60>)
 803b240:	681b      	ldr	r3, [r3, #0]
 803b242:	2b00      	cmp	r3, #0
 803b244:	d120      	bne.n	803b288 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 803b246:	4814      	ldr	r0, [pc, #80]	; (803b298 <prvCheckForValidListAndQueue+0x64>)
 803b248:	f7fd f9a2 	bl	8038590 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 803b24c:	4813      	ldr	r0, [pc, #76]	; (803b29c <prvCheckForValidListAndQueue+0x68>)
 803b24e:	f7fd f99f 	bl	8038590 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 803b252:	4b13      	ldr	r3, [pc, #76]	; (803b2a0 <prvCheckForValidListAndQueue+0x6c>)
 803b254:	4a10      	ldr	r2, [pc, #64]	; (803b298 <prvCheckForValidListAndQueue+0x64>)
 803b256:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 803b258:	4b12      	ldr	r3, [pc, #72]	; (803b2a4 <prvCheckForValidListAndQueue+0x70>)
 803b25a:	4a10      	ldr	r2, [pc, #64]	; (803b29c <prvCheckForValidListAndQueue+0x68>)
 803b25c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 803b25e:	2300      	movs	r3, #0
 803b260:	9300      	str	r3, [sp, #0]
 803b262:	4b11      	ldr	r3, [pc, #68]	; (803b2a8 <prvCheckForValidListAndQueue+0x74>)
 803b264:	4a11      	ldr	r2, [pc, #68]	; (803b2ac <prvCheckForValidListAndQueue+0x78>)
 803b266:	2110      	movs	r1, #16
 803b268:	200a      	movs	r0, #10
 803b26a:	f7fd faad 	bl	80387c8 <xQueueGenericCreateStatic>
 803b26e:	4602      	mov	r2, r0
 803b270:	4b08      	ldr	r3, [pc, #32]	; (803b294 <prvCheckForValidListAndQueue+0x60>)
 803b272:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 803b274:	4b07      	ldr	r3, [pc, #28]	; (803b294 <prvCheckForValidListAndQueue+0x60>)
 803b276:	681b      	ldr	r3, [r3, #0]
 803b278:	2b00      	cmp	r3, #0
 803b27a:	d005      	beq.n	803b288 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 803b27c:	4b05      	ldr	r3, [pc, #20]	; (803b294 <prvCheckForValidListAndQueue+0x60>)
 803b27e:	681b      	ldr	r3, [r3, #0]
 803b280:	490b      	ldr	r1, [pc, #44]	; (803b2b0 <prvCheckForValidListAndQueue+0x7c>)
 803b282:	4618      	mov	r0, r3
 803b284:	f7fe f942 	bl	803950c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 803b288:	f000 f986 	bl	803b598 <vPortExitCritical>
}
 803b28c:	bf00      	nop
 803b28e:	46bd      	mov	sp, r7
 803b290:	bd80      	pop	{r7, pc}
 803b292:	bf00      	nop
 803b294:	20001928 	.word	0x20001928
 803b298:	200018f8 	.word	0x200018f8
 803b29c:	2000190c 	.word	0x2000190c
 803b2a0:	20001920 	.word	0x20001920
 803b2a4:	20001924 	.word	0x20001924
 803b2a8:	200019d4 	.word	0x200019d4
 803b2ac:	20001934 	.word	0x20001934
 803b2b0:	08043b74 	.word	0x08043b74

0803b2b4 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 803b2b4:	b580      	push	{r7, lr}
 803b2b6:	b08a      	sub	sp, #40	; 0x28
 803b2b8:	af00      	add	r7, sp, #0
 803b2ba:	60f8      	str	r0, [r7, #12]
 803b2bc:	60b9      	str	r1, [r7, #8]
 803b2be:	607a      	str	r2, [r7, #4]
 803b2c0:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 803b2c2:	f06f 0301 	mvn.w	r3, #1
 803b2c6:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 803b2c8:	68fb      	ldr	r3, [r7, #12]
 803b2ca:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 803b2cc:	68bb      	ldr	r3, [r7, #8]
 803b2ce:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 803b2d0:	687b      	ldr	r3, [r7, #4]
 803b2d2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 803b2d4:	4b06      	ldr	r3, [pc, #24]	; (803b2f0 <xTimerPendFunctionCallFromISR+0x3c>)
 803b2d6:	6818      	ldr	r0, [r3, #0]
 803b2d8:	f107 0114 	add.w	r1, r7, #20
 803b2dc:	2300      	movs	r3, #0
 803b2de:	683a      	ldr	r2, [r7, #0]
 803b2e0:	f7fd fcf6 	bl	8038cd0 <xQueueGenericSendFromISR>
 803b2e4:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 803b2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 803b2e8:	4618      	mov	r0, r3
 803b2ea:	3728      	adds	r7, #40	; 0x28
 803b2ec:	46bd      	mov	sp, r7
 803b2ee:	bd80      	pop	{r7, pc}
 803b2f0:	20001928 	.word	0x20001928

0803b2f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 803b2f4:	b480      	push	{r7}
 803b2f6:	b085      	sub	sp, #20
 803b2f8:	af00      	add	r7, sp, #0
 803b2fa:	60f8      	str	r0, [r7, #12]
 803b2fc:	60b9      	str	r1, [r7, #8]
 803b2fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 803b300:	68fb      	ldr	r3, [r7, #12]
 803b302:	3b04      	subs	r3, #4
 803b304:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 803b306:	68fb      	ldr	r3, [r7, #12]
 803b308:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 803b30c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 803b30e:	68fb      	ldr	r3, [r7, #12]
 803b310:	3b04      	subs	r3, #4
 803b312:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 803b314:	68bb      	ldr	r3, [r7, #8]
 803b316:	f023 0201 	bic.w	r2, r3, #1
 803b31a:	68fb      	ldr	r3, [r7, #12]
 803b31c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 803b31e:	68fb      	ldr	r3, [r7, #12]
 803b320:	3b04      	subs	r3, #4
 803b322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 803b324:	4a0c      	ldr	r2, [pc, #48]	; (803b358 <pxPortInitialiseStack+0x64>)
 803b326:	68fb      	ldr	r3, [r7, #12]
 803b328:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 803b32a:	68fb      	ldr	r3, [r7, #12]
 803b32c:	3b14      	subs	r3, #20
 803b32e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 803b330:	687a      	ldr	r2, [r7, #4]
 803b332:	68fb      	ldr	r3, [r7, #12]
 803b334:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 803b336:	68fb      	ldr	r3, [r7, #12]
 803b338:	3b04      	subs	r3, #4
 803b33a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 803b33c:	68fb      	ldr	r3, [r7, #12]
 803b33e:	f06f 0202 	mvn.w	r2, #2
 803b342:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 803b344:	68fb      	ldr	r3, [r7, #12]
 803b346:	3b20      	subs	r3, #32
 803b348:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 803b34a:	68fb      	ldr	r3, [r7, #12]
}
 803b34c:	4618      	mov	r0, r3
 803b34e:	3714      	adds	r7, #20
 803b350:	46bd      	mov	sp, r7
 803b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b356:	4770      	bx	lr
 803b358:	0803b35d 	.word	0x0803b35d

0803b35c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 803b35c:	b480      	push	{r7}
 803b35e:	b085      	sub	sp, #20
 803b360:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 803b362:	2300      	movs	r3, #0
 803b364:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 803b366:	4b11      	ldr	r3, [pc, #68]	; (803b3ac <prvTaskExitError+0x50>)
 803b368:	681b      	ldr	r3, [r3, #0]
 803b36a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 803b36e:	d009      	beq.n	803b384 <prvTaskExitError+0x28>
 803b370:	f04f 0350 	mov.w	r3, #80	; 0x50
 803b374:	f383 8811 	msr	BASEPRI, r3
 803b378:	f3bf 8f6f 	isb	sy
 803b37c:	f3bf 8f4f 	dsb	sy
 803b380:	60fb      	str	r3, [r7, #12]
 803b382:	e7fe      	b.n	803b382 <prvTaskExitError+0x26>
 803b384:	f04f 0350 	mov.w	r3, #80	; 0x50
 803b388:	f383 8811 	msr	BASEPRI, r3
 803b38c:	f3bf 8f6f 	isb	sy
 803b390:	f3bf 8f4f 	dsb	sy
 803b394:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 803b396:	bf00      	nop
 803b398:	687b      	ldr	r3, [r7, #4]
 803b39a:	2b00      	cmp	r3, #0
 803b39c:	d0fc      	beq.n	803b398 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 803b39e:	bf00      	nop
 803b3a0:	3714      	adds	r7, #20
 803b3a2:	46bd      	mov	sp, r7
 803b3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b3a8:	4770      	bx	lr
 803b3aa:	bf00      	nop
 803b3ac:	200002a0 	.word	0x200002a0

0803b3b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 803b3b0:	4b07      	ldr	r3, [pc, #28]	; (803b3d0 <pxCurrentTCBConst2>)
 803b3b2:	6819      	ldr	r1, [r3, #0]
 803b3b4:	6808      	ldr	r0, [r1, #0]
 803b3b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803b3ba:	f380 8809 	msr	PSP, r0
 803b3be:	f3bf 8f6f 	isb	sy
 803b3c2:	f04f 0000 	mov.w	r0, #0
 803b3c6:	f380 8811 	msr	BASEPRI, r0
 803b3ca:	4770      	bx	lr
 803b3cc:	f3af 8000 	nop.w

0803b3d0 <pxCurrentTCBConst2>:
 803b3d0:	200013f8 	.word	0x200013f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 803b3d4:	bf00      	nop
 803b3d6:	bf00      	nop

0803b3d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 803b3d8:	4808      	ldr	r0, [pc, #32]	; (803b3fc <prvPortStartFirstTask+0x24>)
 803b3da:	6800      	ldr	r0, [r0, #0]
 803b3dc:	6800      	ldr	r0, [r0, #0]
 803b3de:	f380 8808 	msr	MSP, r0
 803b3e2:	f04f 0000 	mov.w	r0, #0
 803b3e6:	f380 8814 	msr	CONTROL, r0
 803b3ea:	b662      	cpsie	i
 803b3ec:	b661      	cpsie	f
 803b3ee:	f3bf 8f4f 	dsb	sy
 803b3f2:	f3bf 8f6f 	isb	sy
 803b3f6:	df00      	svc	0
 803b3f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 803b3fa:	bf00      	nop
 803b3fc:	e000ed08 	.word	0xe000ed08

0803b400 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 803b400:	b580      	push	{r7, lr}
 803b402:	b086      	sub	sp, #24
 803b404:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 803b406:	4b44      	ldr	r3, [pc, #272]	; (803b518 <xPortStartScheduler+0x118>)
 803b408:	681b      	ldr	r3, [r3, #0]
 803b40a:	4a44      	ldr	r2, [pc, #272]	; (803b51c <xPortStartScheduler+0x11c>)
 803b40c:	4293      	cmp	r3, r2
 803b40e:	d109      	bne.n	803b424 <xPortStartScheduler+0x24>
 803b410:	f04f 0350 	mov.w	r3, #80	; 0x50
 803b414:	f383 8811 	msr	BASEPRI, r3
 803b418:	f3bf 8f6f 	isb	sy
 803b41c:	f3bf 8f4f 	dsb	sy
 803b420:	613b      	str	r3, [r7, #16]
 803b422:	e7fe      	b.n	803b422 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 803b424:	4b3c      	ldr	r3, [pc, #240]	; (803b518 <xPortStartScheduler+0x118>)
 803b426:	681b      	ldr	r3, [r3, #0]
 803b428:	4a3d      	ldr	r2, [pc, #244]	; (803b520 <xPortStartScheduler+0x120>)
 803b42a:	4293      	cmp	r3, r2
 803b42c:	d109      	bne.n	803b442 <xPortStartScheduler+0x42>
 803b42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 803b432:	f383 8811 	msr	BASEPRI, r3
 803b436:	f3bf 8f6f 	isb	sy
 803b43a:	f3bf 8f4f 	dsb	sy
 803b43e:	60fb      	str	r3, [r7, #12]
 803b440:	e7fe      	b.n	803b440 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 803b442:	4b38      	ldr	r3, [pc, #224]	; (803b524 <xPortStartScheduler+0x124>)
 803b444:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 803b446:	697b      	ldr	r3, [r7, #20]
 803b448:	781b      	ldrb	r3, [r3, #0]
 803b44a:	b2db      	uxtb	r3, r3
 803b44c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 803b44e:	697b      	ldr	r3, [r7, #20]
 803b450:	22ff      	movs	r2, #255	; 0xff
 803b452:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 803b454:	697b      	ldr	r3, [r7, #20]
 803b456:	781b      	ldrb	r3, [r3, #0]
 803b458:	b2db      	uxtb	r3, r3
 803b45a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 803b45c:	78fb      	ldrb	r3, [r7, #3]
 803b45e:	b2db      	uxtb	r3, r3
 803b460:	f003 0350 	and.w	r3, r3, #80	; 0x50
 803b464:	b2da      	uxtb	r2, r3
 803b466:	4b30      	ldr	r3, [pc, #192]	; (803b528 <xPortStartScheduler+0x128>)
 803b468:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 803b46a:	4b30      	ldr	r3, [pc, #192]	; (803b52c <xPortStartScheduler+0x12c>)
 803b46c:	2207      	movs	r2, #7
 803b46e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 803b470:	e009      	b.n	803b486 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 803b472:	4b2e      	ldr	r3, [pc, #184]	; (803b52c <xPortStartScheduler+0x12c>)
 803b474:	681b      	ldr	r3, [r3, #0]
 803b476:	3b01      	subs	r3, #1
 803b478:	4a2c      	ldr	r2, [pc, #176]	; (803b52c <xPortStartScheduler+0x12c>)
 803b47a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 803b47c:	78fb      	ldrb	r3, [r7, #3]
 803b47e:	b2db      	uxtb	r3, r3
 803b480:	005b      	lsls	r3, r3, #1
 803b482:	b2db      	uxtb	r3, r3
 803b484:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 803b486:	78fb      	ldrb	r3, [r7, #3]
 803b488:	b2db      	uxtb	r3, r3
 803b48a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 803b48e:	2b80      	cmp	r3, #128	; 0x80
 803b490:	d0ef      	beq.n	803b472 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 803b492:	4b26      	ldr	r3, [pc, #152]	; (803b52c <xPortStartScheduler+0x12c>)
 803b494:	681b      	ldr	r3, [r3, #0]
 803b496:	f1c3 0307 	rsb	r3, r3, #7
 803b49a:	2b04      	cmp	r3, #4
 803b49c:	d009      	beq.n	803b4b2 <xPortStartScheduler+0xb2>
 803b49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 803b4a2:	f383 8811 	msr	BASEPRI, r3
 803b4a6:	f3bf 8f6f 	isb	sy
 803b4aa:	f3bf 8f4f 	dsb	sy
 803b4ae:	60bb      	str	r3, [r7, #8]
 803b4b0:	e7fe      	b.n	803b4b0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 803b4b2:	4b1e      	ldr	r3, [pc, #120]	; (803b52c <xPortStartScheduler+0x12c>)
 803b4b4:	681b      	ldr	r3, [r3, #0]
 803b4b6:	021b      	lsls	r3, r3, #8
 803b4b8:	4a1c      	ldr	r2, [pc, #112]	; (803b52c <xPortStartScheduler+0x12c>)
 803b4ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 803b4bc:	4b1b      	ldr	r3, [pc, #108]	; (803b52c <xPortStartScheduler+0x12c>)
 803b4be:	681b      	ldr	r3, [r3, #0]
 803b4c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 803b4c4:	4a19      	ldr	r2, [pc, #100]	; (803b52c <xPortStartScheduler+0x12c>)
 803b4c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 803b4c8:	687b      	ldr	r3, [r7, #4]
 803b4ca:	b2da      	uxtb	r2, r3
 803b4cc:	697b      	ldr	r3, [r7, #20]
 803b4ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 803b4d0:	4b17      	ldr	r3, [pc, #92]	; (803b530 <xPortStartScheduler+0x130>)
 803b4d2:	681b      	ldr	r3, [r3, #0]
 803b4d4:	4a16      	ldr	r2, [pc, #88]	; (803b530 <xPortStartScheduler+0x130>)
 803b4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 803b4da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 803b4dc:	4b14      	ldr	r3, [pc, #80]	; (803b530 <xPortStartScheduler+0x130>)
 803b4de:	681b      	ldr	r3, [r3, #0]
 803b4e0:	4a13      	ldr	r2, [pc, #76]	; (803b530 <xPortStartScheduler+0x130>)
 803b4e2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 803b4e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 803b4e8:	f000 f8d6 	bl	803b698 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 803b4ec:	4b11      	ldr	r3, [pc, #68]	; (803b534 <xPortStartScheduler+0x134>)
 803b4ee:	2200      	movs	r2, #0
 803b4f0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 803b4f2:	f000 f8f5 	bl	803b6e0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 803b4f6:	4b10      	ldr	r3, [pc, #64]	; (803b538 <xPortStartScheduler+0x138>)
 803b4f8:	681b      	ldr	r3, [r3, #0]
 803b4fa:	4a0f      	ldr	r2, [pc, #60]	; (803b538 <xPortStartScheduler+0x138>)
 803b4fc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 803b500:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 803b502:	f7ff ff69 	bl	803b3d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 803b506:	f7fe fc97 	bl	8039e38 <vTaskSwitchContext>
	prvTaskExitError();
 803b50a:	f7ff ff27 	bl	803b35c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 803b50e:	2300      	movs	r3, #0
}
 803b510:	4618      	mov	r0, r3
 803b512:	3718      	adds	r7, #24
 803b514:	46bd      	mov	sp, r7
 803b516:	bd80      	pop	{r7, pc}
 803b518:	e000ed00 	.word	0xe000ed00
 803b51c:	410fc271 	.word	0x410fc271
 803b520:	410fc270 	.word	0x410fc270
 803b524:	e000e400 	.word	0xe000e400
 803b528:	20001a24 	.word	0x20001a24
 803b52c:	20001a28 	.word	0x20001a28
 803b530:	e000ed20 	.word	0xe000ed20
 803b534:	200002a0 	.word	0x200002a0
 803b538:	e000ef34 	.word	0xe000ef34

0803b53c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 803b53c:	b480      	push	{r7}
 803b53e:	b083      	sub	sp, #12
 803b540:	af00      	add	r7, sp, #0
 803b542:	f04f 0350 	mov.w	r3, #80	; 0x50
 803b546:	f383 8811 	msr	BASEPRI, r3
 803b54a:	f3bf 8f6f 	isb	sy
 803b54e:	f3bf 8f4f 	dsb	sy
 803b552:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 803b554:	4b0e      	ldr	r3, [pc, #56]	; (803b590 <vPortEnterCritical+0x54>)
 803b556:	681b      	ldr	r3, [r3, #0]
 803b558:	3301      	adds	r3, #1
 803b55a:	4a0d      	ldr	r2, [pc, #52]	; (803b590 <vPortEnterCritical+0x54>)
 803b55c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 803b55e:	4b0c      	ldr	r3, [pc, #48]	; (803b590 <vPortEnterCritical+0x54>)
 803b560:	681b      	ldr	r3, [r3, #0]
 803b562:	2b01      	cmp	r3, #1
 803b564:	d10e      	bne.n	803b584 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 803b566:	4b0b      	ldr	r3, [pc, #44]	; (803b594 <vPortEnterCritical+0x58>)
 803b568:	681b      	ldr	r3, [r3, #0]
 803b56a:	b2db      	uxtb	r3, r3
 803b56c:	2b00      	cmp	r3, #0
 803b56e:	d009      	beq.n	803b584 <vPortEnterCritical+0x48>
 803b570:	f04f 0350 	mov.w	r3, #80	; 0x50
 803b574:	f383 8811 	msr	BASEPRI, r3
 803b578:	f3bf 8f6f 	isb	sy
 803b57c:	f3bf 8f4f 	dsb	sy
 803b580:	603b      	str	r3, [r7, #0]
 803b582:	e7fe      	b.n	803b582 <vPortEnterCritical+0x46>
	}
}
 803b584:	bf00      	nop
 803b586:	370c      	adds	r7, #12
 803b588:	46bd      	mov	sp, r7
 803b58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b58e:	4770      	bx	lr
 803b590:	200002a0 	.word	0x200002a0
 803b594:	e000ed04 	.word	0xe000ed04

0803b598 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 803b598:	b480      	push	{r7}
 803b59a:	b083      	sub	sp, #12
 803b59c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 803b59e:	4b11      	ldr	r3, [pc, #68]	; (803b5e4 <vPortExitCritical+0x4c>)
 803b5a0:	681b      	ldr	r3, [r3, #0]
 803b5a2:	2b00      	cmp	r3, #0
 803b5a4:	d109      	bne.n	803b5ba <vPortExitCritical+0x22>
 803b5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 803b5aa:	f383 8811 	msr	BASEPRI, r3
 803b5ae:	f3bf 8f6f 	isb	sy
 803b5b2:	f3bf 8f4f 	dsb	sy
 803b5b6:	607b      	str	r3, [r7, #4]
 803b5b8:	e7fe      	b.n	803b5b8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 803b5ba:	4b0a      	ldr	r3, [pc, #40]	; (803b5e4 <vPortExitCritical+0x4c>)
 803b5bc:	681b      	ldr	r3, [r3, #0]
 803b5be:	3b01      	subs	r3, #1
 803b5c0:	4a08      	ldr	r2, [pc, #32]	; (803b5e4 <vPortExitCritical+0x4c>)
 803b5c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 803b5c4:	4b07      	ldr	r3, [pc, #28]	; (803b5e4 <vPortExitCritical+0x4c>)
 803b5c6:	681b      	ldr	r3, [r3, #0]
 803b5c8:	2b00      	cmp	r3, #0
 803b5ca:	d104      	bne.n	803b5d6 <vPortExitCritical+0x3e>
 803b5cc:	2300      	movs	r3, #0
 803b5ce:	603b      	str	r3, [r7, #0]
	__asm volatile
 803b5d0:	683b      	ldr	r3, [r7, #0]
 803b5d2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 803b5d6:	bf00      	nop
 803b5d8:	370c      	adds	r7, #12
 803b5da:	46bd      	mov	sp, r7
 803b5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b5e0:	4770      	bx	lr
 803b5e2:	bf00      	nop
 803b5e4:	200002a0 	.word	0x200002a0
	...

0803b5f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 803b5f0:	f3ef 8009 	mrs	r0, PSP
 803b5f4:	f3bf 8f6f 	isb	sy
 803b5f8:	4b15      	ldr	r3, [pc, #84]	; (803b650 <pxCurrentTCBConst>)
 803b5fa:	681a      	ldr	r2, [r3, #0]
 803b5fc:	f01e 0f10 	tst.w	lr, #16
 803b600:	bf08      	it	eq
 803b602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 803b606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803b60a:	6010      	str	r0, [r2, #0]
 803b60c:	e92d 0009 	stmdb	sp!, {r0, r3}
 803b610:	f04f 0050 	mov.w	r0, #80	; 0x50
 803b614:	f380 8811 	msr	BASEPRI, r0
 803b618:	f3bf 8f4f 	dsb	sy
 803b61c:	f3bf 8f6f 	isb	sy
 803b620:	f7fe fc0a 	bl	8039e38 <vTaskSwitchContext>
 803b624:	f04f 0000 	mov.w	r0, #0
 803b628:	f380 8811 	msr	BASEPRI, r0
 803b62c:	bc09      	pop	{r0, r3}
 803b62e:	6819      	ldr	r1, [r3, #0]
 803b630:	6808      	ldr	r0, [r1, #0]
 803b632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803b636:	f01e 0f10 	tst.w	lr, #16
 803b63a:	bf08      	it	eq
 803b63c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 803b640:	f380 8809 	msr	PSP, r0
 803b644:	f3bf 8f6f 	isb	sy
 803b648:	4770      	bx	lr
 803b64a:	bf00      	nop
 803b64c:	f3af 8000 	nop.w

0803b650 <pxCurrentTCBConst>:
 803b650:	200013f8 	.word	0x200013f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 803b654:	bf00      	nop
 803b656:	bf00      	nop

0803b658 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 803b658:	b580      	push	{r7, lr}
 803b65a:	b082      	sub	sp, #8
 803b65c:	af00      	add	r7, sp, #0
	__asm volatile
 803b65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 803b662:	f383 8811 	msr	BASEPRI, r3
 803b666:	f3bf 8f6f 	isb	sy
 803b66a:	f3bf 8f4f 	dsb	sy
 803b66e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 803b670:	f7fe fb2a 	bl	8039cc8 <xTaskIncrementTick>
 803b674:	4603      	mov	r3, r0
 803b676:	2b00      	cmp	r3, #0
 803b678:	d003      	beq.n	803b682 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 803b67a:	4b06      	ldr	r3, [pc, #24]	; (803b694 <SysTick_Handler+0x3c>)
 803b67c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 803b680:	601a      	str	r2, [r3, #0]
 803b682:	2300      	movs	r3, #0
 803b684:	603b      	str	r3, [r7, #0]
	__asm volatile
 803b686:	683b      	ldr	r3, [r7, #0]
 803b688:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 803b68c:	bf00      	nop
 803b68e:	3708      	adds	r7, #8
 803b690:	46bd      	mov	sp, r7
 803b692:	bd80      	pop	{r7, pc}
 803b694:	e000ed04 	.word	0xe000ed04

0803b698 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 803b698:	b480      	push	{r7}
 803b69a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 803b69c:	4b0b      	ldr	r3, [pc, #44]	; (803b6cc <vPortSetupTimerInterrupt+0x34>)
 803b69e:	2200      	movs	r2, #0
 803b6a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 803b6a2:	4b0b      	ldr	r3, [pc, #44]	; (803b6d0 <vPortSetupTimerInterrupt+0x38>)
 803b6a4:	2200      	movs	r2, #0
 803b6a6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 803b6a8:	4b0a      	ldr	r3, [pc, #40]	; (803b6d4 <vPortSetupTimerInterrupt+0x3c>)
 803b6aa:	681b      	ldr	r3, [r3, #0]
 803b6ac:	4a0a      	ldr	r2, [pc, #40]	; (803b6d8 <vPortSetupTimerInterrupt+0x40>)
 803b6ae:	fba2 2303 	umull	r2, r3, r2, r3
 803b6b2:	099b      	lsrs	r3, r3, #6
 803b6b4:	4a09      	ldr	r2, [pc, #36]	; (803b6dc <vPortSetupTimerInterrupt+0x44>)
 803b6b6:	3b01      	subs	r3, #1
 803b6b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 803b6ba:	4b04      	ldr	r3, [pc, #16]	; (803b6cc <vPortSetupTimerInterrupt+0x34>)
 803b6bc:	2207      	movs	r2, #7
 803b6be:	601a      	str	r2, [r3, #0]
}
 803b6c0:	bf00      	nop
 803b6c2:	46bd      	mov	sp, r7
 803b6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b6c8:	4770      	bx	lr
 803b6ca:	bf00      	nop
 803b6cc:	e000e010 	.word	0xe000e010
 803b6d0:	e000e018 	.word	0xe000e018
 803b6d4:	20000294 	.word	0x20000294
 803b6d8:	10624dd3 	.word	0x10624dd3
 803b6dc:	e000e014 	.word	0xe000e014

0803b6e0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 803b6e0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 803b6f0 <vPortEnableVFP+0x10>
 803b6e4:	6801      	ldr	r1, [r0, #0]
 803b6e6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 803b6ea:	6001      	str	r1, [r0, #0]
 803b6ec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 803b6ee:	bf00      	nop
 803b6f0:	e000ed88 	.word	0xe000ed88

0803b6f4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 803b6f4:	b480      	push	{r7}
 803b6f6:	b085      	sub	sp, #20
 803b6f8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 803b6fa:	f3ef 8305 	mrs	r3, IPSR
 803b6fe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 803b700:	68fb      	ldr	r3, [r7, #12]
 803b702:	2b0f      	cmp	r3, #15
 803b704:	d913      	bls.n	803b72e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 803b706:	4a16      	ldr	r2, [pc, #88]	; (803b760 <vPortValidateInterruptPriority+0x6c>)
 803b708:	68fb      	ldr	r3, [r7, #12]
 803b70a:	4413      	add	r3, r2
 803b70c:	781b      	ldrb	r3, [r3, #0]
 803b70e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 803b710:	4b14      	ldr	r3, [pc, #80]	; (803b764 <vPortValidateInterruptPriority+0x70>)
 803b712:	781b      	ldrb	r3, [r3, #0]
 803b714:	7afa      	ldrb	r2, [r7, #11]
 803b716:	429a      	cmp	r2, r3
 803b718:	d209      	bcs.n	803b72e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 803b71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 803b71e:	f383 8811 	msr	BASEPRI, r3
 803b722:	f3bf 8f6f 	isb	sy
 803b726:	f3bf 8f4f 	dsb	sy
 803b72a:	607b      	str	r3, [r7, #4]
 803b72c:	e7fe      	b.n	803b72c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 803b72e:	4b0e      	ldr	r3, [pc, #56]	; (803b768 <vPortValidateInterruptPriority+0x74>)
 803b730:	681b      	ldr	r3, [r3, #0]
 803b732:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 803b736:	4b0d      	ldr	r3, [pc, #52]	; (803b76c <vPortValidateInterruptPriority+0x78>)
 803b738:	681b      	ldr	r3, [r3, #0]
 803b73a:	429a      	cmp	r2, r3
 803b73c:	d909      	bls.n	803b752 <vPortValidateInterruptPriority+0x5e>
 803b73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 803b742:	f383 8811 	msr	BASEPRI, r3
 803b746:	f3bf 8f6f 	isb	sy
 803b74a:	f3bf 8f4f 	dsb	sy
 803b74e:	603b      	str	r3, [r7, #0]
 803b750:	e7fe      	b.n	803b750 <vPortValidateInterruptPriority+0x5c>
	}
 803b752:	bf00      	nop
 803b754:	3714      	adds	r7, #20
 803b756:	46bd      	mov	sp, r7
 803b758:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b75c:	4770      	bx	lr
 803b75e:	bf00      	nop
 803b760:	e000e3f0 	.word	0xe000e3f0
 803b764:	20001a24 	.word	0x20001a24
 803b768:	e000ed0c 	.word	0xe000ed0c
 803b76c:	20001a28 	.word	0x20001a28

0803b770 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 803b770:	b580      	push	{r7, lr}
 803b772:	b08a      	sub	sp, #40	; 0x28
 803b774:	af00      	add	r7, sp, #0
 803b776:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 803b778:	2300      	movs	r3, #0
 803b77a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 803b77c:	f7fe f9d8 	bl	8039b30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 803b780:	4b57      	ldr	r3, [pc, #348]	; (803b8e0 <pvPortMalloc+0x170>)
 803b782:	681b      	ldr	r3, [r3, #0]
 803b784:	2b00      	cmp	r3, #0
 803b786:	d101      	bne.n	803b78c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 803b788:	f000 f90c 	bl	803b9a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 803b78c:	4b55      	ldr	r3, [pc, #340]	; (803b8e4 <pvPortMalloc+0x174>)
 803b78e:	681a      	ldr	r2, [r3, #0]
 803b790:	687b      	ldr	r3, [r7, #4]
 803b792:	4013      	ands	r3, r2
 803b794:	2b00      	cmp	r3, #0
 803b796:	f040 808c 	bne.w	803b8b2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 803b79a:	687b      	ldr	r3, [r7, #4]
 803b79c:	2b00      	cmp	r3, #0
 803b79e:	d01c      	beq.n	803b7da <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 803b7a0:	2208      	movs	r2, #8
 803b7a2:	687b      	ldr	r3, [r7, #4]
 803b7a4:	4413      	add	r3, r2
 803b7a6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 803b7a8:	687b      	ldr	r3, [r7, #4]
 803b7aa:	f003 0307 	and.w	r3, r3, #7
 803b7ae:	2b00      	cmp	r3, #0
 803b7b0:	d013      	beq.n	803b7da <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 803b7b2:	687b      	ldr	r3, [r7, #4]
 803b7b4:	f023 0307 	bic.w	r3, r3, #7
 803b7b8:	3308      	adds	r3, #8
 803b7ba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 803b7bc:	687b      	ldr	r3, [r7, #4]
 803b7be:	f003 0307 	and.w	r3, r3, #7
 803b7c2:	2b00      	cmp	r3, #0
 803b7c4:	d009      	beq.n	803b7da <pvPortMalloc+0x6a>
 803b7c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 803b7ca:	f383 8811 	msr	BASEPRI, r3
 803b7ce:	f3bf 8f6f 	isb	sy
 803b7d2:	f3bf 8f4f 	dsb	sy
 803b7d6:	617b      	str	r3, [r7, #20]
 803b7d8:	e7fe      	b.n	803b7d8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 803b7da:	687b      	ldr	r3, [r7, #4]
 803b7dc:	2b00      	cmp	r3, #0
 803b7de:	d068      	beq.n	803b8b2 <pvPortMalloc+0x142>
 803b7e0:	4b41      	ldr	r3, [pc, #260]	; (803b8e8 <pvPortMalloc+0x178>)
 803b7e2:	681b      	ldr	r3, [r3, #0]
 803b7e4:	687a      	ldr	r2, [r7, #4]
 803b7e6:	429a      	cmp	r2, r3
 803b7e8:	d863      	bhi.n	803b8b2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 803b7ea:	4b40      	ldr	r3, [pc, #256]	; (803b8ec <pvPortMalloc+0x17c>)
 803b7ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 803b7ee:	4b3f      	ldr	r3, [pc, #252]	; (803b8ec <pvPortMalloc+0x17c>)
 803b7f0:	681b      	ldr	r3, [r3, #0]
 803b7f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 803b7f4:	e004      	b.n	803b800 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 803b7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803b7f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 803b7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803b7fc:	681b      	ldr	r3, [r3, #0]
 803b7fe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 803b800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803b802:	685b      	ldr	r3, [r3, #4]
 803b804:	687a      	ldr	r2, [r7, #4]
 803b806:	429a      	cmp	r2, r3
 803b808:	d903      	bls.n	803b812 <pvPortMalloc+0xa2>
 803b80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803b80c:	681b      	ldr	r3, [r3, #0]
 803b80e:	2b00      	cmp	r3, #0
 803b810:	d1f1      	bne.n	803b7f6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 803b812:	4b33      	ldr	r3, [pc, #204]	; (803b8e0 <pvPortMalloc+0x170>)
 803b814:	681b      	ldr	r3, [r3, #0]
 803b816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 803b818:	429a      	cmp	r2, r3
 803b81a:	d04a      	beq.n	803b8b2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 803b81c:	6a3b      	ldr	r3, [r7, #32]
 803b81e:	681b      	ldr	r3, [r3, #0]
 803b820:	2208      	movs	r2, #8
 803b822:	4413      	add	r3, r2
 803b824:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 803b826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803b828:	681a      	ldr	r2, [r3, #0]
 803b82a:	6a3b      	ldr	r3, [r7, #32]
 803b82c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 803b82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803b830:	685a      	ldr	r2, [r3, #4]
 803b832:	687b      	ldr	r3, [r7, #4]
 803b834:	1ad2      	subs	r2, r2, r3
 803b836:	2308      	movs	r3, #8
 803b838:	005b      	lsls	r3, r3, #1
 803b83a:	429a      	cmp	r2, r3
 803b83c:	d91e      	bls.n	803b87c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 803b83e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 803b840:	687b      	ldr	r3, [r7, #4]
 803b842:	4413      	add	r3, r2
 803b844:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 803b846:	69bb      	ldr	r3, [r7, #24]
 803b848:	f003 0307 	and.w	r3, r3, #7
 803b84c:	2b00      	cmp	r3, #0
 803b84e:	d009      	beq.n	803b864 <pvPortMalloc+0xf4>
 803b850:	f04f 0350 	mov.w	r3, #80	; 0x50
 803b854:	f383 8811 	msr	BASEPRI, r3
 803b858:	f3bf 8f6f 	isb	sy
 803b85c:	f3bf 8f4f 	dsb	sy
 803b860:	613b      	str	r3, [r7, #16]
 803b862:	e7fe      	b.n	803b862 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 803b864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803b866:	685a      	ldr	r2, [r3, #4]
 803b868:	687b      	ldr	r3, [r7, #4]
 803b86a:	1ad2      	subs	r2, r2, r3
 803b86c:	69bb      	ldr	r3, [r7, #24]
 803b86e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 803b870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803b872:	687a      	ldr	r2, [r7, #4]
 803b874:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 803b876:	69b8      	ldr	r0, [r7, #24]
 803b878:	f000 f8f6 	bl	803ba68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 803b87c:	4b1a      	ldr	r3, [pc, #104]	; (803b8e8 <pvPortMalloc+0x178>)
 803b87e:	681a      	ldr	r2, [r3, #0]
 803b880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803b882:	685b      	ldr	r3, [r3, #4]
 803b884:	1ad3      	subs	r3, r2, r3
 803b886:	4a18      	ldr	r2, [pc, #96]	; (803b8e8 <pvPortMalloc+0x178>)
 803b888:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 803b88a:	4b17      	ldr	r3, [pc, #92]	; (803b8e8 <pvPortMalloc+0x178>)
 803b88c:	681a      	ldr	r2, [r3, #0]
 803b88e:	4b18      	ldr	r3, [pc, #96]	; (803b8f0 <pvPortMalloc+0x180>)
 803b890:	681b      	ldr	r3, [r3, #0]
 803b892:	429a      	cmp	r2, r3
 803b894:	d203      	bcs.n	803b89e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 803b896:	4b14      	ldr	r3, [pc, #80]	; (803b8e8 <pvPortMalloc+0x178>)
 803b898:	681b      	ldr	r3, [r3, #0]
 803b89a:	4a15      	ldr	r2, [pc, #84]	; (803b8f0 <pvPortMalloc+0x180>)
 803b89c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 803b89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803b8a0:	685a      	ldr	r2, [r3, #4]
 803b8a2:	4b10      	ldr	r3, [pc, #64]	; (803b8e4 <pvPortMalloc+0x174>)
 803b8a4:	681b      	ldr	r3, [r3, #0]
 803b8a6:	431a      	orrs	r2, r3
 803b8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803b8aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 803b8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803b8ae:	2200      	movs	r2, #0
 803b8b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 803b8b2:	f7fe f94b 	bl	8039b4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 803b8b6:	69fb      	ldr	r3, [r7, #28]
 803b8b8:	f003 0307 	and.w	r3, r3, #7
 803b8bc:	2b00      	cmp	r3, #0
 803b8be:	d009      	beq.n	803b8d4 <pvPortMalloc+0x164>
 803b8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 803b8c4:	f383 8811 	msr	BASEPRI, r3
 803b8c8:	f3bf 8f6f 	isb	sy
 803b8cc:	f3bf 8f4f 	dsb	sy
 803b8d0:	60fb      	str	r3, [r7, #12]
 803b8d2:	e7fe      	b.n	803b8d2 <pvPortMalloc+0x162>
	return pvReturn;
 803b8d4:	69fb      	ldr	r3, [r7, #28]
}
 803b8d6:	4618      	mov	r0, r3
 803b8d8:	3728      	adds	r7, #40	; 0x28
 803b8da:	46bd      	mov	sp, r7
 803b8dc:	bd80      	pop	{r7, pc}
 803b8de:	bf00      	nop
 803b8e0:	20007fc4 	.word	0x20007fc4
 803b8e4:	20007fd0 	.word	0x20007fd0
 803b8e8:	20007fc8 	.word	0x20007fc8
 803b8ec:	20007fbc 	.word	0x20007fbc
 803b8f0:	20007fcc 	.word	0x20007fcc

0803b8f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 803b8f4:	b580      	push	{r7, lr}
 803b8f6:	b086      	sub	sp, #24
 803b8f8:	af00      	add	r7, sp, #0
 803b8fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 803b8fc:	687b      	ldr	r3, [r7, #4]
 803b8fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 803b900:	687b      	ldr	r3, [r7, #4]
 803b902:	2b00      	cmp	r3, #0
 803b904:	d046      	beq.n	803b994 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 803b906:	2308      	movs	r3, #8
 803b908:	425b      	negs	r3, r3
 803b90a:	697a      	ldr	r2, [r7, #20]
 803b90c:	4413      	add	r3, r2
 803b90e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 803b910:	697b      	ldr	r3, [r7, #20]
 803b912:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 803b914:	693b      	ldr	r3, [r7, #16]
 803b916:	685a      	ldr	r2, [r3, #4]
 803b918:	4b20      	ldr	r3, [pc, #128]	; (803b99c <vPortFree+0xa8>)
 803b91a:	681b      	ldr	r3, [r3, #0]
 803b91c:	4013      	ands	r3, r2
 803b91e:	2b00      	cmp	r3, #0
 803b920:	d109      	bne.n	803b936 <vPortFree+0x42>
 803b922:	f04f 0350 	mov.w	r3, #80	; 0x50
 803b926:	f383 8811 	msr	BASEPRI, r3
 803b92a:	f3bf 8f6f 	isb	sy
 803b92e:	f3bf 8f4f 	dsb	sy
 803b932:	60fb      	str	r3, [r7, #12]
 803b934:	e7fe      	b.n	803b934 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 803b936:	693b      	ldr	r3, [r7, #16]
 803b938:	681b      	ldr	r3, [r3, #0]
 803b93a:	2b00      	cmp	r3, #0
 803b93c:	d009      	beq.n	803b952 <vPortFree+0x5e>
 803b93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 803b942:	f383 8811 	msr	BASEPRI, r3
 803b946:	f3bf 8f6f 	isb	sy
 803b94a:	f3bf 8f4f 	dsb	sy
 803b94e:	60bb      	str	r3, [r7, #8]
 803b950:	e7fe      	b.n	803b950 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 803b952:	693b      	ldr	r3, [r7, #16]
 803b954:	685a      	ldr	r2, [r3, #4]
 803b956:	4b11      	ldr	r3, [pc, #68]	; (803b99c <vPortFree+0xa8>)
 803b958:	681b      	ldr	r3, [r3, #0]
 803b95a:	4013      	ands	r3, r2
 803b95c:	2b00      	cmp	r3, #0
 803b95e:	d019      	beq.n	803b994 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 803b960:	693b      	ldr	r3, [r7, #16]
 803b962:	681b      	ldr	r3, [r3, #0]
 803b964:	2b00      	cmp	r3, #0
 803b966:	d115      	bne.n	803b994 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 803b968:	693b      	ldr	r3, [r7, #16]
 803b96a:	685a      	ldr	r2, [r3, #4]
 803b96c:	4b0b      	ldr	r3, [pc, #44]	; (803b99c <vPortFree+0xa8>)
 803b96e:	681b      	ldr	r3, [r3, #0]
 803b970:	43db      	mvns	r3, r3
 803b972:	401a      	ands	r2, r3
 803b974:	693b      	ldr	r3, [r7, #16]
 803b976:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 803b978:	f7fe f8da 	bl	8039b30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 803b97c:	693b      	ldr	r3, [r7, #16]
 803b97e:	685a      	ldr	r2, [r3, #4]
 803b980:	4b07      	ldr	r3, [pc, #28]	; (803b9a0 <vPortFree+0xac>)
 803b982:	681b      	ldr	r3, [r3, #0]
 803b984:	4413      	add	r3, r2
 803b986:	4a06      	ldr	r2, [pc, #24]	; (803b9a0 <vPortFree+0xac>)
 803b988:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 803b98a:	6938      	ldr	r0, [r7, #16]
 803b98c:	f000 f86c 	bl	803ba68 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 803b990:	f7fe f8dc 	bl	8039b4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 803b994:	bf00      	nop
 803b996:	3718      	adds	r7, #24
 803b998:	46bd      	mov	sp, r7
 803b99a:	bd80      	pop	{r7, pc}
 803b99c:	20007fd0 	.word	0x20007fd0
 803b9a0:	20007fc8 	.word	0x20007fc8

0803b9a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 803b9a4:	b480      	push	{r7}
 803b9a6:	b085      	sub	sp, #20
 803b9a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 803b9aa:	f246 5390 	movw	r3, #26000	; 0x6590
 803b9ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 803b9b0:	4b27      	ldr	r3, [pc, #156]	; (803ba50 <prvHeapInit+0xac>)
 803b9b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 803b9b4:	68fb      	ldr	r3, [r7, #12]
 803b9b6:	f003 0307 	and.w	r3, r3, #7
 803b9ba:	2b00      	cmp	r3, #0
 803b9bc:	d00c      	beq.n	803b9d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 803b9be:	68fb      	ldr	r3, [r7, #12]
 803b9c0:	3307      	adds	r3, #7
 803b9c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 803b9c4:	68fb      	ldr	r3, [r7, #12]
 803b9c6:	f023 0307 	bic.w	r3, r3, #7
 803b9ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 803b9cc:	68ba      	ldr	r2, [r7, #8]
 803b9ce:	68fb      	ldr	r3, [r7, #12]
 803b9d0:	1ad3      	subs	r3, r2, r3
 803b9d2:	4a1f      	ldr	r2, [pc, #124]	; (803ba50 <prvHeapInit+0xac>)
 803b9d4:	4413      	add	r3, r2
 803b9d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 803b9d8:	68fb      	ldr	r3, [r7, #12]
 803b9da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 803b9dc:	4a1d      	ldr	r2, [pc, #116]	; (803ba54 <prvHeapInit+0xb0>)
 803b9de:	687b      	ldr	r3, [r7, #4]
 803b9e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 803b9e2:	4b1c      	ldr	r3, [pc, #112]	; (803ba54 <prvHeapInit+0xb0>)
 803b9e4:	2200      	movs	r2, #0
 803b9e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 803b9e8:	687b      	ldr	r3, [r7, #4]
 803b9ea:	68ba      	ldr	r2, [r7, #8]
 803b9ec:	4413      	add	r3, r2
 803b9ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 803b9f0:	2208      	movs	r2, #8
 803b9f2:	68fb      	ldr	r3, [r7, #12]
 803b9f4:	1a9b      	subs	r3, r3, r2
 803b9f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 803b9f8:	68fb      	ldr	r3, [r7, #12]
 803b9fa:	f023 0307 	bic.w	r3, r3, #7
 803b9fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 803ba00:	68fb      	ldr	r3, [r7, #12]
 803ba02:	4a15      	ldr	r2, [pc, #84]	; (803ba58 <prvHeapInit+0xb4>)
 803ba04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 803ba06:	4b14      	ldr	r3, [pc, #80]	; (803ba58 <prvHeapInit+0xb4>)
 803ba08:	681b      	ldr	r3, [r3, #0]
 803ba0a:	2200      	movs	r2, #0
 803ba0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 803ba0e:	4b12      	ldr	r3, [pc, #72]	; (803ba58 <prvHeapInit+0xb4>)
 803ba10:	681b      	ldr	r3, [r3, #0]
 803ba12:	2200      	movs	r2, #0
 803ba14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 803ba16:	687b      	ldr	r3, [r7, #4]
 803ba18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 803ba1a:	683b      	ldr	r3, [r7, #0]
 803ba1c:	68fa      	ldr	r2, [r7, #12]
 803ba1e:	1ad2      	subs	r2, r2, r3
 803ba20:	683b      	ldr	r3, [r7, #0]
 803ba22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 803ba24:	4b0c      	ldr	r3, [pc, #48]	; (803ba58 <prvHeapInit+0xb4>)
 803ba26:	681a      	ldr	r2, [r3, #0]
 803ba28:	683b      	ldr	r3, [r7, #0]
 803ba2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 803ba2c:	683b      	ldr	r3, [r7, #0]
 803ba2e:	685b      	ldr	r3, [r3, #4]
 803ba30:	4a0a      	ldr	r2, [pc, #40]	; (803ba5c <prvHeapInit+0xb8>)
 803ba32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 803ba34:	683b      	ldr	r3, [r7, #0]
 803ba36:	685b      	ldr	r3, [r3, #4]
 803ba38:	4a09      	ldr	r2, [pc, #36]	; (803ba60 <prvHeapInit+0xbc>)
 803ba3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 803ba3c:	4b09      	ldr	r3, [pc, #36]	; (803ba64 <prvHeapInit+0xc0>)
 803ba3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 803ba42:	601a      	str	r2, [r3, #0]
}
 803ba44:	bf00      	nop
 803ba46:	3714      	adds	r7, #20
 803ba48:	46bd      	mov	sp, r7
 803ba4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803ba4e:	4770      	bx	lr
 803ba50:	20001a2c 	.word	0x20001a2c
 803ba54:	20007fbc 	.word	0x20007fbc
 803ba58:	20007fc4 	.word	0x20007fc4
 803ba5c:	20007fcc 	.word	0x20007fcc
 803ba60:	20007fc8 	.word	0x20007fc8
 803ba64:	20007fd0 	.word	0x20007fd0

0803ba68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 803ba68:	b480      	push	{r7}
 803ba6a:	b085      	sub	sp, #20
 803ba6c:	af00      	add	r7, sp, #0
 803ba6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 803ba70:	4b28      	ldr	r3, [pc, #160]	; (803bb14 <prvInsertBlockIntoFreeList+0xac>)
 803ba72:	60fb      	str	r3, [r7, #12]
 803ba74:	e002      	b.n	803ba7c <prvInsertBlockIntoFreeList+0x14>
 803ba76:	68fb      	ldr	r3, [r7, #12]
 803ba78:	681b      	ldr	r3, [r3, #0]
 803ba7a:	60fb      	str	r3, [r7, #12]
 803ba7c:	68fb      	ldr	r3, [r7, #12]
 803ba7e:	681b      	ldr	r3, [r3, #0]
 803ba80:	687a      	ldr	r2, [r7, #4]
 803ba82:	429a      	cmp	r2, r3
 803ba84:	d8f7      	bhi.n	803ba76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 803ba86:	68fb      	ldr	r3, [r7, #12]
 803ba88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 803ba8a:	68fb      	ldr	r3, [r7, #12]
 803ba8c:	685b      	ldr	r3, [r3, #4]
 803ba8e:	68ba      	ldr	r2, [r7, #8]
 803ba90:	4413      	add	r3, r2
 803ba92:	687a      	ldr	r2, [r7, #4]
 803ba94:	429a      	cmp	r2, r3
 803ba96:	d108      	bne.n	803baaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 803ba98:	68fb      	ldr	r3, [r7, #12]
 803ba9a:	685a      	ldr	r2, [r3, #4]
 803ba9c:	687b      	ldr	r3, [r7, #4]
 803ba9e:	685b      	ldr	r3, [r3, #4]
 803baa0:	441a      	add	r2, r3
 803baa2:	68fb      	ldr	r3, [r7, #12]
 803baa4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 803baa6:	68fb      	ldr	r3, [r7, #12]
 803baa8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 803baaa:	687b      	ldr	r3, [r7, #4]
 803baac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 803baae:	687b      	ldr	r3, [r7, #4]
 803bab0:	685b      	ldr	r3, [r3, #4]
 803bab2:	68ba      	ldr	r2, [r7, #8]
 803bab4:	441a      	add	r2, r3
 803bab6:	68fb      	ldr	r3, [r7, #12]
 803bab8:	681b      	ldr	r3, [r3, #0]
 803baba:	429a      	cmp	r2, r3
 803babc:	d118      	bne.n	803baf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 803babe:	68fb      	ldr	r3, [r7, #12]
 803bac0:	681a      	ldr	r2, [r3, #0]
 803bac2:	4b15      	ldr	r3, [pc, #84]	; (803bb18 <prvInsertBlockIntoFreeList+0xb0>)
 803bac4:	681b      	ldr	r3, [r3, #0]
 803bac6:	429a      	cmp	r2, r3
 803bac8:	d00d      	beq.n	803bae6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 803baca:	687b      	ldr	r3, [r7, #4]
 803bacc:	685a      	ldr	r2, [r3, #4]
 803bace:	68fb      	ldr	r3, [r7, #12]
 803bad0:	681b      	ldr	r3, [r3, #0]
 803bad2:	685b      	ldr	r3, [r3, #4]
 803bad4:	441a      	add	r2, r3
 803bad6:	687b      	ldr	r3, [r7, #4]
 803bad8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 803bada:	68fb      	ldr	r3, [r7, #12]
 803badc:	681b      	ldr	r3, [r3, #0]
 803bade:	681a      	ldr	r2, [r3, #0]
 803bae0:	687b      	ldr	r3, [r7, #4]
 803bae2:	601a      	str	r2, [r3, #0]
 803bae4:	e008      	b.n	803baf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 803bae6:	4b0c      	ldr	r3, [pc, #48]	; (803bb18 <prvInsertBlockIntoFreeList+0xb0>)
 803bae8:	681a      	ldr	r2, [r3, #0]
 803baea:	687b      	ldr	r3, [r7, #4]
 803baec:	601a      	str	r2, [r3, #0]
 803baee:	e003      	b.n	803baf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 803baf0:	68fb      	ldr	r3, [r7, #12]
 803baf2:	681a      	ldr	r2, [r3, #0]
 803baf4:	687b      	ldr	r3, [r7, #4]
 803baf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 803baf8:	68fa      	ldr	r2, [r7, #12]
 803bafa:	687b      	ldr	r3, [r7, #4]
 803bafc:	429a      	cmp	r2, r3
 803bafe:	d002      	beq.n	803bb06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 803bb00:	68fb      	ldr	r3, [r7, #12]
 803bb02:	687a      	ldr	r2, [r7, #4]
 803bb04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 803bb06:	bf00      	nop
 803bb08:	3714      	adds	r7, #20
 803bb0a:	46bd      	mov	sp, r7
 803bb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 803bb10:	4770      	bx	lr
 803bb12:	bf00      	nop
 803bb14:	20007fbc 	.word	0x20007fbc
 803bb18:	20007fc4 	.word	0x20007fc4

0803bb1c <SIMCOM_USART_IrqHandler>:
/* Private functions implementation -------------------------------------------*/
static void SIMCOM_Check_Buffer(void);
static void SIMCOM_Fill_Buffer(const void *data, size_t len);

/* Public functions implementation ---------------------------------------------*/
void SIMCOM_USART_IrqHandler(void) {
 803bb1c:	b580      	push	{r7, lr}
 803bb1e:	b082      	sub	sp, #8
 803bb20:	af00      	add	r7, sp, #0
    /* if Idle flag is set */
    if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)) {
 803bb22:	4b0c      	ldr	r3, [pc, #48]	; (803bb54 <SIMCOM_USART_IrqHandler+0x38>)
 803bb24:	681b      	ldr	r3, [r3, #0]
 803bb26:	681b      	ldr	r3, [r3, #0]
 803bb28:	f003 0310 	and.w	r3, r3, #16
 803bb2c:	2b10      	cmp	r3, #16
 803bb2e:	d10c      	bne.n	803bb4a <SIMCOM_USART_IrqHandler+0x2e>
        /* Clear idle flag */
        __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 803bb30:	2300      	movs	r3, #0
 803bb32:	607b      	str	r3, [r7, #4]
 803bb34:	4b07      	ldr	r3, [pc, #28]	; (803bb54 <SIMCOM_USART_IrqHandler+0x38>)
 803bb36:	681b      	ldr	r3, [r3, #0]
 803bb38:	681b      	ldr	r3, [r3, #0]
 803bb3a:	607b      	str	r3, [r7, #4]
 803bb3c:	4b05      	ldr	r3, [pc, #20]	; (803bb54 <SIMCOM_USART_IrqHandler+0x38>)
 803bb3e:	681b      	ldr	r3, [r3, #0]
 803bb40:	685b      	ldr	r3, [r3, #4]
 803bb42:	607b      	str	r3, [r7, #4]
 803bb44:	687b      	ldr	r3, [r7, #4]

        SIMCOM_Check_Buffer();
 803bb46:	f001 f923 	bl	803cd90 <SIMCOM_Check_Buffer>
    }
}
 803bb4a:	bf00      	nop
 803bb4c:	3708      	adds	r7, #8
 803bb4e:	46bd      	mov	sp, r7
 803bb50:	bd80      	pop	{r7, pc}
 803bb52:	bf00      	nop
 803bb54:	20008764 	.word	0x20008764

0803bb58 <SIMCOM_DMA_IrqHandler>:

void SIMCOM_DMA_IrqHandler(void) {
 803bb58:	b580      	push	{r7, lr}
 803bb5a:	af00      	add	r7, sp, #0
    // if the source is HT
    if (__HAL_DMA_GET_IT_SOURCE(&hdma_usart1_rx, DMA_IT_HT)) {
 803bb5c:	4b9a      	ldr	r3, [pc, #616]	; (803bdc8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bb5e:	681b      	ldr	r3, [r3, #0]
 803bb60:	681b      	ldr	r3, [r3, #0]
 803bb62:	f003 0308 	and.w	r3, r3, #8
 803bb66:	2b00      	cmp	r3, #0
 803bb68:	f000 81bc 	beq.w	803bee4 <SIMCOM_DMA_IrqHandler+0x38c>
        /* Clear HT flag */
        __HAL_DMA_CLEAR_FLAG(&hdma_usart1_rx, __HAL_DMA_GET_HT_FLAG_INDEX(&hdma_usart1_rx));
 803bb6c:	4b96      	ldr	r3, [pc, #600]	; (803bdc8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bb6e:	681b      	ldr	r3, [r3, #0]
 803bb70:	461a      	mov	r2, r3
 803bb72:	4b96      	ldr	r3, [pc, #600]	; (803bdcc <SIMCOM_DMA_IrqHandler+0x274>)
 803bb74:	429a      	cmp	r2, r3
 803bb76:	d960      	bls.n	803bc3a <SIMCOM_DMA_IrqHandler+0xe2>
 803bb78:	4b93      	ldr	r3, [pc, #588]	; (803bdc8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bb7a:	681b      	ldr	r3, [r3, #0]
 803bb7c:	4a94      	ldr	r2, [pc, #592]	; (803bdd0 <SIMCOM_DMA_IrqHandler+0x278>)
 803bb7e:	4293      	cmp	r3, r2
 803bb80:	d057      	beq.n	803bc32 <SIMCOM_DMA_IrqHandler+0xda>
 803bb82:	4b91      	ldr	r3, [pc, #580]	; (803bdc8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bb84:	681b      	ldr	r3, [r3, #0]
 803bb86:	4a93      	ldr	r2, [pc, #588]	; (803bdd4 <SIMCOM_DMA_IrqHandler+0x27c>)
 803bb88:	4293      	cmp	r3, r2
 803bb8a:	d050      	beq.n	803bc2e <SIMCOM_DMA_IrqHandler+0xd6>
 803bb8c:	4b8e      	ldr	r3, [pc, #568]	; (803bdc8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bb8e:	681b      	ldr	r3, [r3, #0]
 803bb90:	4a91      	ldr	r2, [pc, #580]	; (803bdd8 <SIMCOM_DMA_IrqHandler+0x280>)
 803bb92:	4293      	cmp	r3, r2
 803bb94:	d049      	beq.n	803bc2a <SIMCOM_DMA_IrqHandler+0xd2>
 803bb96:	4b8c      	ldr	r3, [pc, #560]	; (803bdc8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bb98:	681b      	ldr	r3, [r3, #0]
 803bb9a:	4a90      	ldr	r2, [pc, #576]	; (803bddc <SIMCOM_DMA_IrqHandler+0x284>)
 803bb9c:	4293      	cmp	r3, r2
 803bb9e:	d042      	beq.n	803bc26 <SIMCOM_DMA_IrqHandler+0xce>
 803bba0:	4b89      	ldr	r3, [pc, #548]	; (803bdc8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bba2:	681b      	ldr	r3, [r3, #0]
 803bba4:	4a8e      	ldr	r2, [pc, #568]	; (803bde0 <SIMCOM_DMA_IrqHandler+0x288>)
 803bba6:	4293      	cmp	r3, r2
 803bba8:	d03a      	beq.n	803bc20 <SIMCOM_DMA_IrqHandler+0xc8>
 803bbaa:	4b87      	ldr	r3, [pc, #540]	; (803bdc8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bbac:	681b      	ldr	r3, [r3, #0]
 803bbae:	4a8d      	ldr	r2, [pc, #564]	; (803bde4 <SIMCOM_DMA_IrqHandler+0x28c>)
 803bbb0:	4293      	cmp	r3, r2
 803bbb2:	d032      	beq.n	803bc1a <SIMCOM_DMA_IrqHandler+0xc2>
 803bbb4:	4b84      	ldr	r3, [pc, #528]	; (803bdc8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bbb6:	681b      	ldr	r3, [r3, #0]
 803bbb8:	4a8b      	ldr	r2, [pc, #556]	; (803bde8 <SIMCOM_DMA_IrqHandler+0x290>)
 803bbba:	4293      	cmp	r3, r2
 803bbbc:	d02a      	beq.n	803bc14 <SIMCOM_DMA_IrqHandler+0xbc>
 803bbbe:	4b82      	ldr	r3, [pc, #520]	; (803bdc8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bbc0:	681b      	ldr	r3, [r3, #0]
 803bbc2:	4a8a      	ldr	r2, [pc, #552]	; (803bdec <SIMCOM_DMA_IrqHandler+0x294>)
 803bbc4:	4293      	cmp	r3, r2
 803bbc6:	d022      	beq.n	803bc0e <SIMCOM_DMA_IrqHandler+0xb6>
 803bbc8:	4b7f      	ldr	r3, [pc, #508]	; (803bdc8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bbca:	681b      	ldr	r3, [r3, #0]
 803bbcc:	4a88      	ldr	r2, [pc, #544]	; (803bdf0 <SIMCOM_DMA_IrqHandler+0x298>)
 803bbce:	4293      	cmp	r3, r2
 803bbd0:	d01a      	beq.n	803bc08 <SIMCOM_DMA_IrqHandler+0xb0>
 803bbd2:	4b7d      	ldr	r3, [pc, #500]	; (803bdc8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bbd4:	681b      	ldr	r3, [r3, #0]
 803bbd6:	4a87      	ldr	r2, [pc, #540]	; (803bdf4 <SIMCOM_DMA_IrqHandler+0x29c>)
 803bbd8:	4293      	cmp	r3, r2
 803bbda:	d012      	beq.n	803bc02 <SIMCOM_DMA_IrqHandler+0xaa>
 803bbdc:	4b7a      	ldr	r3, [pc, #488]	; (803bdc8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bbde:	681b      	ldr	r3, [r3, #0]
 803bbe0:	4a85      	ldr	r2, [pc, #532]	; (803bdf8 <SIMCOM_DMA_IrqHandler+0x2a0>)
 803bbe2:	4293      	cmp	r3, r2
 803bbe4:	d00a      	beq.n	803bbfc <SIMCOM_DMA_IrqHandler+0xa4>
 803bbe6:	4b78      	ldr	r3, [pc, #480]	; (803bdc8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bbe8:	681b      	ldr	r3, [r3, #0]
 803bbea:	4a84      	ldr	r2, [pc, #528]	; (803bdfc <SIMCOM_DMA_IrqHandler+0x2a4>)
 803bbec:	4293      	cmp	r3, r2
 803bbee:	d102      	bne.n	803bbf6 <SIMCOM_DMA_IrqHandler+0x9e>
 803bbf0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 803bbf4:	e01e      	b.n	803bc34 <SIMCOM_DMA_IrqHandler+0xdc>
 803bbf6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 803bbfa:	e01b      	b.n	803bc34 <SIMCOM_DMA_IrqHandler+0xdc>
 803bbfc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 803bc00:	e018      	b.n	803bc34 <SIMCOM_DMA_IrqHandler+0xdc>
 803bc02:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 803bc06:	e015      	b.n	803bc34 <SIMCOM_DMA_IrqHandler+0xdc>
 803bc08:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 803bc0c:	e012      	b.n	803bc34 <SIMCOM_DMA_IrqHandler+0xdc>
 803bc0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803bc12:	e00f      	b.n	803bc34 <SIMCOM_DMA_IrqHandler+0xdc>
 803bc14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803bc18:	e00c      	b.n	803bc34 <SIMCOM_DMA_IrqHandler+0xdc>
 803bc1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803bc1e:	e009      	b.n	803bc34 <SIMCOM_DMA_IrqHandler+0xdc>
 803bc20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803bc24:	e006      	b.n	803bc34 <SIMCOM_DMA_IrqHandler+0xdc>
 803bc26:	2310      	movs	r3, #16
 803bc28:	e004      	b.n	803bc34 <SIMCOM_DMA_IrqHandler+0xdc>
 803bc2a:	2310      	movs	r3, #16
 803bc2c:	e002      	b.n	803bc34 <SIMCOM_DMA_IrqHandler+0xdc>
 803bc2e:	2310      	movs	r3, #16
 803bc30:	e000      	b.n	803bc34 <SIMCOM_DMA_IrqHandler+0xdc>
 803bc32:	2310      	movs	r3, #16
 803bc34:	4a72      	ldr	r2, [pc, #456]	; (803be00 <SIMCOM_DMA_IrqHandler+0x2a8>)
 803bc36:	60d3      	str	r3, [r2, #12]
 803bc38:	e150      	b.n	803bedc <SIMCOM_DMA_IrqHandler+0x384>
 803bc3a:	4b63      	ldr	r3, [pc, #396]	; (803bdc8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bc3c:	681b      	ldr	r3, [r3, #0]
 803bc3e:	461a      	mov	r2, r3
 803bc40:	4b70      	ldr	r3, [pc, #448]	; (803be04 <SIMCOM_DMA_IrqHandler+0x2ac>)
 803bc42:	429a      	cmp	r2, r3
 803bc44:	d960      	bls.n	803bd08 <SIMCOM_DMA_IrqHandler+0x1b0>
 803bc46:	4b60      	ldr	r3, [pc, #384]	; (803bdc8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bc48:	681b      	ldr	r3, [r3, #0]
 803bc4a:	4a61      	ldr	r2, [pc, #388]	; (803bdd0 <SIMCOM_DMA_IrqHandler+0x278>)
 803bc4c:	4293      	cmp	r3, r2
 803bc4e:	d057      	beq.n	803bd00 <SIMCOM_DMA_IrqHandler+0x1a8>
 803bc50:	4b5d      	ldr	r3, [pc, #372]	; (803bdc8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bc52:	681b      	ldr	r3, [r3, #0]
 803bc54:	4a5f      	ldr	r2, [pc, #380]	; (803bdd4 <SIMCOM_DMA_IrqHandler+0x27c>)
 803bc56:	4293      	cmp	r3, r2
 803bc58:	d050      	beq.n	803bcfc <SIMCOM_DMA_IrqHandler+0x1a4>
 803bc5a:	4b5b      	ldr	r3, [pc, #364]	; (803bdc8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bc5c:	681b      	ldr	r3, [r3, #0]
 803bc5e:	4a5e      	ldr	r2, [pc, #376]	; (803bdd8 <SIMCOM_DMA_IrqHandler+0x280>)
 803bc60:	4293      	cmp	r3, r2
 803bc62:	d049      	beq.n	803bcf8 <SIMCOM_DMA_IrqHandler+0x1a0>
 803bc64:	4b58      	ldr	r3, [pc, #352]	; (803bdc8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bc66:	681b      	ldr	r3, [r3, #0]
 803bc68:	4a5c      	ldr	r2, [pc, #368]	; (803bddc <SIMCOM_DMA_IrqHandler+0x284>)
 803bc6a:	4293      	cmp	r3, r2
 803bc6c:	d042      	beq.n	803bcf4 <SIMCOM_DMA_IrqHandler+0x19c>
 803bc6e:	4b56      	ldr	r3, [pc, #344]	; (803bdc8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bc70:	681b      	ldr	r3, [r3, #0]
 803bc72:	4a5b      	ldr	r2, [pc, #364]	; (803bde0 <SIMCOM_DMA_IrqHandler+0x288>)
 803bc74:	4293      	cmp	r3, r2
 803bc76:	d03a      	beq.n	803bcee <SIMCOM_DMA_IrqHandler+0x196>
 803bc78:	4b53      	ldr	r3, [pc, #332]	; (803bdc8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bc7a:	681b      	ldr	r3, [r3, #0]
 803bc7c:	4a59      	ldr	r2, [pc, #356]	; (803bde4 <SIMCOM_DMA_IrqHandler+0x28c>)
 803bc7e:	4293      	cmp	r3, r2
 803bc80:	d032      	beq.n	803bce8 <SIMCOM_DMA_IrqHandler+0x190>
 803bc82:	4b51      	ldr	r3, [pc, #324]	; (803bdc8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bc84:	681b      	ldr	r3, [r3, #0]
 803bc86:	4a58      	ldr	r2, [pc, #352]	; (803bde8 <SIMCOM_DMA_IrqHandler+0x290>)
 803bc88:	4293      	cmp	r3, r2
 803bc8a:	d02a      	beq.n	803bce2 <SIMCOM_DMA_IrqHandler+0x18a>
 803bc8c:	4b4e      	ldr	r3, [pc, #312]	; (803bdc8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bc8e:	681b      	ldr	r3, [r3, #0]
 803bc90:	4a56      	ldr	r2, [pc, #344]	; (803bdec <SIMCOM_DMA_IrqHandler+0x294>)
 803bc92:	4293      	cmp	r3, r2
 803bc94:	d022      	beq.n	803bcdc <SIMCOM_DMA_IrqHandler+0x184>
 803bc96:	4b4c      	ldr	r3, [pc, #304]	; (803bdc8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bc98:	681b      	ldr	r3, [r3, #0]
 803bc9a:	4a55      	ldr	r2, [pc, #340]	; (803bdf0 <SIMCOM_DMA_IrqHandler+0x298>)
 803bc9c:	4293      	cmp	r3, r2
 803bc9e:	d01a      	beq.n	803bcd6 <SIMCOM_DMA_IrqHandler+0x17e>
 803bca0:	4b49      	ldr	r3, [pc, #292]	; (803bdc8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bca2:	681b      	ldr	r3, [r3, #0]
 803bca4:	4a53      	ldr	r2, [pc, #332]	; (803bdf4 <SIMCOM_DMA_IrqHandler+0x29c>)
 803bca6:	4293      	cmp	r3, r2
 803bca8:	d012      	beq.n	803bcd0 <SIMCOM_DMA_IrqHandler+0x178>
 803bcaa:	4b47      	ldr	r3, [pc, #284]	; (803bdc8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bcac:	681b      	ldr	r3, [r3, #0]
 803bcae:	4a52      	ldr	r2, [pc, #328]	; (803bdf8 <SIMCOM_DMA_IrqHandler+0x2a0>)
 803bcb0:	4293      	cmp	r3, r2
 803bcb2:	d00a      	beq.n	803bcca <SIMCOM_DMA_IrqHandler+0x172>
 803bcb4:	4b44      	ldr	r3, [pc, #272]	; (803bdc8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bcb6:	681b      	ldr	r3, [r3, #0]
 803bcb8:	4a50      	ldr	r2, [pc, #320]	; (803bdfc <SIMCOM_DMA_IrqHandler+0x2a4>)
 803bcba:	4293      	cmp	r3, r2
 803bcbc:	d102      	bne.n	803bcc4 <SIMCOM_DMA_IrqHandler+0x16c>
 803bcbe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 803bcc2:	e01e      	b.n	803bd02 <SIMCOM_DMA_IrqHandler+0x1aa>
 803bcc4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 803bcc8:	e01b      	b.n	803bd02 <SIMCOM_DMA_IrqHandler+0x1aa>
 803bcca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 803bcce:	e018      	b.n	803bd02 <SIMCOM_DMA_IrqHandler+0x1aa>
 803bcd0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 803bcd4:	e015      	b.n	803bd02 <SIMCOM_DMA_IrqHandler+0x1aa>
 803bcd6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 803bcda:	e012      	b.n	803bd02 <SIMCOM_DMA_IrqHandler+0x1aa>
 803bcdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803bce0:	e00f      	b.n	803bd02 <SIMCOM_DMA_IrqHandler+0x1aa>
 803bce2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803bce6:	e00c      	b.n	803bd02 <SIMCOM_DMA_IrqHandler+0x1aa>
 803bce8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803bcec:	e009      	b.n	803bd02 <SIMCOM_DMA_IrqHandler+0x1aa>
 803bcee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803bcf2:	e006      	b.n	803bd02 <SIMCOM_DMA_IrqHandler+0x1aa>
 803bcf4:	2310      	movs	r3, #16
 803bcf6:	e004      	b.n	803bd02 <SIMCOM_DMA_IrqHandler+0x1aa>
 803bcf8:	2310      	movs	r3, #16
 803bcfa:	e002      	b.n	803bd02 <SIMCOM_DMA_IrqHandler+0x1aa>
 803bcfc:	2310      	movs	r3, #16
 803bcfe:	e000      	b.n	803bd02 <SIMCOM_DMA_IrqHandler+0x1aa>
 803bd00:	2310      	movs	r3, #16
 803bd02:	4a3f      	ldr	r2, [pc, #252]	; (803be00 <SIMCOM_DMA_IrqHandler+0x2a8>)
 803bd04:	6093      	str	r3, [r2, #8]
 803bd06:	e0e9      	b.n	803bedc <SIMCOM_DMA_IrqHandler+0x384>
 803bd08:	4b2f      	ldr	r3, [pc, #188]	; (803bdc8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bd0a:	681b      	ldr	r3, [r3, #0]
 803bd0c:	461a      	mov	r2, r3
 803bd0e:	4b3e      	ldr	r3, [pc, #248]	; (803be08 <SIMCOM_DMA_IrqHandler+0x2b0>)
 803bd10:	429a      	cmp	r2, r3
 803bd12:	f240 8083 	bls.w	803be1c <SIMCOM_DMA_IrqHandler+0x2c4>
 803bd16:	4b2c      	ldr	r3, [pc, #176]	; (803bdc8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bd18:	681b      	ldr	r3, [r3, #0]
 803bd1a:	4a2d      	ldr	r2, [pc, #180]	; (803bdd0 <SIMCOM_DMA_IrqHandler+0x278>)
 803bd1c:	4293      	cmp	r3, r2
 803bd1e:	d079      	beq.n	803be14 <SIMCOM_DMA_IrqHandler+0x2bc>
 803bd20:	4b29      	ldr	r3, [pc, #164]	; (803bdc8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bd22:	681b      	ldr	r3, [r3, #0]
 803bd24:	4a2b      	ldr	r2, [pc, #172]	; (803bdd4 <SIMCOM_DMA_IrqHandler+0x27c>)
 803bd26:	4293      	cmp	r3, r2
 803bd28:	d072      	beq.n	803be10 <SIMCOM_DMA_IrqHandler+0x2b8>
 803bd2a:	4b27      	ldr	r3, [pc, #156]	; (803bdc8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bd2c:	681b      	ldr	r3, [r3, #0]
 803bd2e:	4a2a      	ldr	r2, [pc, #168]	; (803bdd8 <SIMCOM_DMA_IrqHandler+0x280>)
 803bd30:	4293      	cmp	r3, r2
 803bd32:	d06b      	beq.n	803be0c <SIMCOM_DMA_IrqHandler+0x2b4>
 803bd34:	4b24      	ldr	r3, [pc, #144]	; (803bdc8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bd36:	681b      	ldr	r3, [r3, #0]
 803bd38:	4a28      	ldr	r2, [pc, #160]	; (803bddc <SIMCOM_DMA_IrqHandler+0x284>)
 803bd3a:	4293      	cmp	r3, r2
 803bd3c:	d042      	beq.n	803bdc4 <SIMCOM_DMA_IrqHandler+0x26c>
 803bd3e:	4b22      	ldr	r3, [pc, #136]	; (803bdc8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bd40:	681b      	ldr	r3, [r3, #0]
 803bd42:	4a27      	ldr	r2, [pc, #156]	; (803bde0 <SIMCOM_DMA_IrqHandler+0x288>)
 803bd44:	4293      	cmp	r3, r2
 803bd46:	d03a      	beq.n	803bdbe <SIMCOM_DMA_IrqHandler+0x266>
 803bd48:	4b1f      	ldr	r3, [pc, #124]	; (803bdc8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bd4a:	681b      	ldr	r3, [r3, #0]
 803bd4c:	4a25      	ldr	r2, [pc, #148]	; (803bde4 <SIMCOM_DMA_IrqHandler+0x28c>)
 803bd4e:	4293      	cmp	r3, r2
 803bd50:	d032      	beq.n	803bdb8 <SIMCOM_DMA_IrqHandler+0x260>
 803bd52:	4b1d      	ldr	r3, [pc, #116]	; (803bdc8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bd54:	681b      	ldr	r3, [r3, #0]
 803bd56:	4a24      	ldr	r2, [pc, #144]	; (803bde8 <SIMCOM_DMA_IrqHandler+0x290>)
 803bd58:	4293      	cmp	r3, r2
 803bd5a:	d02a      	beq.n	803bdb2 <SIMCOM_DMA_IrqHandler+0x25a>
 803bd5c:	4b1a      	ldr	r3, [pc, #104]	; (803bdc8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bd5e:	681b      	ldr	r3, [r3, #0]
 803bd60:	4a22      	ldr	r2, [pc, #136]	; (803bdec <SIMCOM_DMA_IrqHandler+0x294>)
 803bd62:	4293      	cmp	r3, r2
 803bd64:	d022      	beq.n	803bdac <SIMCOM_DMA_IrqHandler+0x254>
 803bd66:	4b18      	ldr	r3, [pc, #96]	; (803bdc8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bd68:	681b      	ldr	r3, [r3, #0]
 803bd6a:	4a21      	ldr	r2, [pc, #132]	; (803bdf0 <SIMCOM_DMA_IrqHandler+0x298>)
 803bd6c:	4293      	cmp	r3, r2
 803bd6e:	d01a      	beq.n	803bda6 <SIMCOM_DMA_IrqHandler+0x24e>
 803bd70:	4b15      	ldr	r3, [pc, #84]	; (803bdc8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bd72:	681b      	ldr	r3, [r3, #0]
 803bd74:	4a1f      	ldr	r2, [pc, #124]	; (803bdf4 <SIMCOM_DMA_IrqHandler+0x29c>)
 803bd76:	4293      	cmp	r3, r2
 803bd78:	d012      	beq.n	803bda0 <SIMCOM_DMA_IrqHandler+0x248>
 803bd7a:	4b13      	ldr	r3, [pc, #76]	; (803bdc8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bd7c:	681b      	ldr	r3, [r3, #0]
 803bd7e:	4a1e      	ldr	r2, [pc, #120]	; (803bdf8 <SIMCOM_DMA_IrqHandler+0x2a0>)
 803bd80:	4293      	cmp	r3, r2
 803bd82:	d00a      	beq.n	803bd9a <SIMCOM_DMA_IrqHandler+0x242>
 803bd84:	4b10      	ldr	r3, [pc, #64]	; (803bdc8 <SIMCOM_DMA_IrqHandler+0x270>)
 803bd86:	681b      	ldr	r3, [r3, #0]
 803bd88:	4a1c      	ldr	r2, [pc, #112]	; (803bdfc <SIMCOM_DMA_IrqHandler+0x2a4>)
 803bd8a:	4293      	cmp	r3, r2
 803bd8c:	d102      	bne.n	803bd94 <SIMCOM_DMA_IrqHandler+0x23c>
 803bd8e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 803bd92:	e040      	b.n	803be16 <SIMCOM_DMA_IrqHandler+0x2be>
 803bd94:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 803bd98:	e03d      	b.n	803be16 <SIMCOM_DMA_IrqHandler+0x2be>
 803bd9a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 803bd9e:	e03a      	b.n	803be16 <SIMCOM_DMA_IrqHandler+0x2be>
 803bda0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 803bda4:	e037      	b.n	803be16 <SIMCOM_DMA_IrqHandler+0x2be>
 803bda6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 803bdaa:	e034      	b.n	803be16 <SIMCOM_DMA_IrqHandler+0x2be>
 803bdac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803bdb0:	e031      	b.n	803be16 <SIMCOM_DMA_IrqHandler+0x2be>
 803bdb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803bdb6:	e02e      	b.n	803be16 <SIMCOM_DMA_IrqHandler+0x2be>
 803bdb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803bdbc:	e02b      	b.n	803be16 <SIMCOM_DMA_IrqHandler+0x2be>
 803bdbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803bdc2:	e028      	b.n	803be16 <SIMCOM_DMA_IrqHandler+0x2be>
 803bdc4:	2310      	movs	r3, #16
 803bdc6:	e026      	b.n	803be16 <SIMCOM_DMA_IrqHandler+0x2be>
 803bdc8:	20008700 	.word	0x20008700
 803bdcc:	40026458 	.word	0x40026458
 803bdd0:	40026010 	.word	0x40026010
 803bdd4:	40026410 	.word	0x40026410
 803bdd8:	40026070 	.word	0x40026070
 803bddc:	40026470 	.word	0x40026470
 803bde0:	40026028 	.word	0x40026028
 803bde4:	40026428 	.word	0x40026428
 803bde8:	40026088 	.word	0x40026088
 803bdec:	40026488 	.word	0x40026488
 803bdf0:	40026040 	.word	0x40026040
 803bdf4:	40026440 	.word	0x40026440
 803bdf8:	400260a0 	.word	0x400260a0
 803bdfc:	400264a0 	.word	0x400264a0
 803be00:	40026400 	.word	0x40026400
 803be04:	400260b8 	.word	0x400260b8
 803be08:	40026058 	.word	0x40026058
 803be0c:	2310      	movs	r3, #16
 803be0e:	e002      	b.n	803be16 <SIMCOM_DMA_IrqHandler+0x2be>
 803be10:	2310      	movs	r3, #16
 803be12:	e000      	b.n	803be16 <SIMCOM_DMA_IrqHandler+0x2be>
 803be14:	2310      	movs	r3, #16
 803be16:	4a9b      	ldr	r2, [pc, #620]	; (803c084 <SIMCOM_DMA_IrqHandler+0x52c>)
 803be18:	60d3      	str	r3, [r2, #12]
 803be1a:	e05f      	b.n	803bedc <SIMCOM_DMA_IrqHandler+0x384>
 803be1c:	4b9a      	ldr	r3, [pc, #616]	; (803c088 <SIMCOM_DMA_IrqHandler+0x530>)
 803be1e:	681b      	ldr	r3, [r3, #0]
 803be20:	4a9a      	ldr	r2, [pc, #616]	; (803c08c <SIMCOM_DMA_IrqHandler+0x534>)
 803be22:	4293      	cmp	r3, r2
 803be24:	d057      	beq.n	803bed6 <SIMCOM_DMA_IrqHandler+0x37e>
 803be26:	4b98      	ldr	r3, [pc, #608]	; (803c088 <SIMCOM_DMA_IrqHandler+0x530>)
 803be28:	681b      	ldr	r3, [r3, #0]
 803be2a:	4a99      	ldr	r2, [pc, #612]	; (803c090 <SIMCOM_DMA_IrqHandler+0x538>)
 803be2c:	4293      	cmp	r3, r2
 803be2e:	d050      	beq.n	803bed2 <SIMCOM_DMA_IrqHandler+0x37a>
 803be30:	4b95      	ldr	r3, [pc, #596]	; (803c088 <SIMCOM_DMA_IrqHandler+0x530>)
 803be32:	681b      	ldr	r3, [r3, #0]
 803be34:	4a97      	ldr	r2, [pc, #604]	; (803c094 <SIMCOM_DMA_IrqHandler+0x53c>)
 803be36:	4293      	cmp	r3, r2
 803be38:	d049      	beq.n	803bece <SIMCOM_DMA_IrqHandler+0x376>
 803be3a:	4b93      	ldr	r3, [pc, #588]	; (803c088 <SIMCOM_DMA_IrqHandler+0x530>)
 803be3c:	681b      	ldr	r3, [r3, #0]
 803be3e:	4a96      	ldr	r2, [pc, #600]	; (803c098 <SIMCOM_DMA_IrqHandler+0x540>)
 803be40:	4293      	cmp	r3, r2
 803be42:	d042      	beq.n	803beca <SIMCOM_DMA_IrqHandler+0x372>
 803be44:	4b90      	ldr	r3, [pc, #576]	; (803c088 <SIMCOM_DMA_IrqHandler+0x530>)
 803be46:	681b      	ldr	r3, [r3, #0]
 803be48:	4a94      	ldr	r2, [pc, #592]	; (803c09c <SIMCOM_DMA_IrqHandler+0x544>)
 803be4a:	4293      	cmp	r3, r2
 803be4c:	d03a      	beq.n	803bec4 <SIMCOM_DMA_IrqHandler+0x36c>
 803be4e:	4b8e      	ldr	r3, [pc, #568]	; (803c088 <SIMCOM_DMA_IrqHandler+0x530>)
 803be50:	681b      	ldr	r3, [r3, #0]
 803be52:	4a93      	ldr	r2, [pc, #588]	; (803c0a0 <SIMCOM_DMA_IrqHandler+0x548>)
 803be54:	4293      	cmp	r3, r2
 803be56:	d032      	beq.n	803bebe <SIMCOM_DMA_IrqHandler+0x366>
 803be58:	4b8b      	ldr	r3, [pc, #556]	; (803c088 <SIMCOM_DMA_IrqHandler+0x530>)
 803be5a:	681b      	ldr	r3, [r3, #0]
 803be5c:	4a91      	ldr	r2, [pc, #580]	; (803c0a4 <SIMCOM_DMA_IrqHandler+0x54c>)
 803be5e:	4293      	cmp	r3, r2
 803be60:	d02a      	beq.n	803beb8 <SIMCOM_DMA_IrqHandler+0x360>
 803be62:	4b89      	ldr	r3, [pc, #548]	; (803c088 <SIMCOM_DMA_IrqHandler+0x530>)
 803be64:	681b      	ldr	r3, [r3, #0]
 803be66:	4a90      	ldr	r2, [pc, #576]	; (803c0a8 <SIMCOM_DMA_IrqHandler+0x550>)
 803be68:	4293      	cmp	r3, r2
 803be6a:	d022      	beq.n	803beb2 <SIMCOM_DMA_IrqHandler+0x35a>
 803be6c:	4b86      	ldr	r3, [pc, #536]	; (803c088 <SIMCOM_DMA_IrqHandler+0x530>)
 803be6e:	681b      	ldr	r3, [r3, #0]
 803be70:	4a8e      	ldr	r2, [pc, #568]	; (803c0ac <SIMCOM_DMA_IrqHandler+0x554>)
 803be72:	4293      	cmp	r3, r2
 803be74:	d01a      	beq.n	803beac <SIMCOM_DMA_IrqHandler+0x354>
 803be76:	4b84      	ldr	r3, [pc, #528]	; (803c088 <SIMCOM_DMA_IrqHandler+0x530>)
 803be78:	681b      	ldr	r3, [r3, #0]
 803be7a:	4a8d      	ldr	r2, [pc, #564]	; (803c0b0 <SIMCOM_DMA_IrqHandler+0x558>)
 803be7c:	4293      	cmp	r3, r2
 803be7e:	d012      	beq.n	803bea6 <SIMCOM_DMA_IrqHandler+0x34e>
 803be80:	4b81      	ldr	r3, [pc, #516]	; (803c088 <SIMCOM_DMA_IrqHandler+0x530>)
 803be82:	681b      	ldr	r3, [r3, #0]
 803be84:	4a8b      	ldr	r2, [pc, #556]	; (803c0b4 <SIMCOM_DMA_IrqHandler+0x55c>)
 803be86:	4293      	cmp	r3, r2
 803be88:	d00a      	beq.n	803bea0 <SIMCOM_DMA_IrqHandler+0x348>
 803be8a:	4b7f      	ldr	r3, [pc, #508]	; (803c088 <SIMCOM_DMA_IrqHandler+0x530>)
 803be8c:	681b      	ldr	r3, [r3, #0]
 803be8e:	4a8a      	ldr	r2, [pc, #552]	; (803c0b8 <SIMCOM_DMA_IrqHandler+0x560>)
 803be90:	4293      	cmp	r3, r2
 803be92:	d102      	bne.n	803be9a <SIMCOM_DMA_IrqHandler+0x342>
 803be94:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 803be98:	e01e      	b.n	803bed8 <SIMCOM_DMA_IrqHandler+0x380>
 803be9a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 803be9e:	e01b      	b.n	803bed8 <SIMCOM_DMA_IrqHandler+0x380>
 803bea0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 803bea4:	e018      	b.n	803bed8 <SIMCOM_DMA_IrqHandler+0x380>
 803bea6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 803beaa:	e015      	b.n	803bed8 <SIMCOM_DMA_IrqHandler+0x380>
 803beac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 803beb0:	e012      	b.n	803bed8 <SIMCOM_DMA_IrqHandler+0x380>
 803beb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803beb6:	e00f      	b.n	803bed8 <SIMCOM_DMA_IrqHandler+0x380>
 803beb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803bebc:	e00c      	b.n	803bed8 <SIMCOM_DMA_IrqHandler+0x380>
 803bebe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803bec2:	e009      	b.n	803bed8 <SIMCOM_DMA_IrqHandler+0x380>
 803bec4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803bec8:	e006      	b.n	803bed8 <SIMCOM_DMA_IrqHandler+0x380>
 803beca:	2310      	movs	r3, #16
 803becc:	e004      	b.n	803bed8 <SIMCOM_DMA_IrqHandler+0x380>
 803bece:	2310      	movs	r3, #16
 803bed0:	e002      	b.n	803bed8 <SIMCOM_DMA_IrqHandler+0x380>
 803bed2:	2310      	movs	r3, #16
 803bed4:	e000      	b.n	803bed8 <SIMCOM_DMA_IrqHandler+0x380>
 803bed6:	2310      	movs	r3, #16
 803bed8:	4a6a      	ldr	r2, [pc, #424]	; (803c084 <SIMCOM_DMA_IrqHandler+0x52c>)
 803beda:	6093      	str	r3, [r2, #8]

        SIMCOM_Check_Buffer();
 803bedc:	f000 ff58 	bl	803cd90 <SIMCOM_Check_Buffer>
        __HAL_DMA_CLEAR_FLAG(&hdma_usart1_rx, __HAL_DMA_GET_DME_FLAG_INDEX(&hdma_usart1_rx));

        /* Start DMA transfer */
        HAL_UART_Receive_DMA(&huart1, (uint8_t*) SIMCOM_DMA_RX, SIMCOM_DMA_RX_SZ);
    }
}
 803bee0:	f000 bf0a 	b.w	803ccf8 <SIMCOM_DMA_IrqHandler+0x11a0>
    else if (__HAL_DMA_GET_IT_SOURCE(&hdma_usart1_rx, DMA_IT_TC)) {
 803bee4:	4b68      	ldr	r3, [pc, #416]	; (803c088 <SIMCOM_DMA_IrqHandler+0x530>)
 803bee6:	681b      	ldr	r3, [r3, #0]
 803bee8:	681b      	ldr	r3, [r3, #0]
 803beea:	f003 0310 	and.w	r3, r3, #16
 803beee:	2b00      	cmp	r3, #0
 803bef0:	f000 81bd 	beq.w	803c26e <SIMCOM_DMA_IrqHandler+0x716>
        __HAL_DMA_CLEAR_FLAG(&hdma_usart1_rx, __HAL_DMA_GET_TC_FLAG_INDEX(&hdma_usart1_rx));
 803bef4:	4b64      	ldr	r3, [pc, #400]	; (803c088 <SIMCOM_DMA_IrqHandler+0x530>)
 803bef6:	681b      	ldr	r3, [r3, #0]
 803bef8:	461a      	mov	r2, r3
 803befa:	4b70      	ldr	r3, [pc, #448]	; (803c0bc <SIMCOM_DMA_IrqHandler+0x564>)
 803befc:	429a      	cmp	r2, r3
 803befe:	d960      	bls.n	803bfc2 <SIMCOM_DMA_IrqHandler+0x46a>
 803bf00:	4b61      	ldr	r3, [pc, #388]	; (803c088 <SIMCOM_DMA_IrqHandler+0x530>)
 803bf02:	681b      	ldr	r3, [r3, #0]
 803bf04:	4a61      	ldr	r2, [pc, #388]	; (803c08c <SIMCOM_DMA_IrqHandler+0x534>)
 803bf06:	4293      	cmp	r3, r2
 803bf08:	d057      	beq.n	803bfba <SIMCOM_DMA_IrqHandler+0x462>
 803bf0a:	4b5f      	ldr	r3, [pc, #380]	; (803c088 <SIMCOM_DMA_IrqHandler+0x530>)
 803bf0c:	681b      	ldr	r3, [r3, #0]
 803bf0e:	4a60      	ldr	r2, [pc, #384]	; (803c090 <SIMCOM_DMA_IrqHandler+0x538>)
 803bf10:	4293      	cmp	r3, r2
 803bf12:	d050      	beq.n	803bfb6 <SIMCOM_DMA_IrqHandler+0x45e>
 803bf14:	4b5c      	ldr	r3, [pc, #368]	; (803c088 <SIMCOM_DMA_IrqHandler+0x530>)
 803bf16:	681b      	ldr	r3, [r3, #0]
 803bf18:	4a5e      	ldr	r2, [pc, #376]	; (803c094 <SIMCOM_DMA_IrqHandler+0x53c>)
 803bf1a:	4293      	cmp	r3, r2
 803bf1c:	d049      	beq.n	803bfb2 <SIMCOM_DMA_IrqHandler+0x45a>
 803bf1e:	4b5a      	ldr	r3, [pc, #360]	; (803c088 <SIMCOM_DMA_IrqHandler+0x530>)
 803bf20:	681b      	ldr	r3, [r3, #0]
 803bf22:	4a5d      	ldr	r2, [pc, #372]	; (803c098 <SIMCOM_DMA_IrqHandler+0x540>)
 803bf24:	4293      	cmp	r3, r2
 803bf26:	d042      	beq.n	803bfae <SIMCOM_DMA_IrqHandler+0x456>
 803bf28:	4b57      	ldr	r3, [pc, #348]	; (803c088 <SIMCOM_DMA_IrqHandler+0x530>)
 803bf2a:	681b      	ldr	r3, [r3, #0]
 803bf2c:	4a5b      	ldr	r2, [pc, #364]	; (803c09c <SIMCOM_DMA_IrqHandler+0x544>)
 803bf2e:	4293      	cmp	r3, r2
 803bf30:	d03a      	beq.n	803bfa8 <SIMCOM_DMA_IrqHandler+0x450>
 803bf32:	4b55      	ldr	r3, [pc, #340]	; (803c088 <SIMCOM_DMA_IrqHandler+0x530>)
 803bf34:	681b      	ldr	r3, [r3, #0]
 803bf36:	4a5a      	ldr	r2, [pc, #360]	; (803c0a0 <SIMCOM_DMA_IrqHandler+0x548>)
 803bf38:	4293      	cmp	r3, r2
 803bf3a:	d032      	beq.n	803bfa2 <SIMCOM_DMA_IrqHandler+0x44a>
 803bf3c:	4b52      	ldr	r3, [pc, #328]	; (803c088 <SIMCOM_DMA_IrqHandler+0x530>)
 803bf3e:	681b      	ldr	r3, [r3, #0]
 803bf40:	4a58      	ldr	r2, [pc, #352]	; (803c0a4 <SIMCOM_DMA_IrqHandler+0x54c>)
 803bf42:	4293      	cmp	r3, r2
 803bf44:	d02a      	beq.n	803bf9c <SIMCOM_DMA_IrqHandler+0x444>
 803bf46:	4b50      	ldr	r3, [pc, #320]	; (803c088 <SIMCOM_DMA_IrqHandler+0x530>)
 803bf48:	681b      	ldr	r3, [r3, #0]
 803bf4a:	4a57      	ldr	r2, [pc, #348]	; (803c0a8 <SIMCOM_DMA_IrqHandler+0x550>)
 803bf4c:	4293      	cmp	r3, r2
 803bf4e:	d022      	beq.n	803bf96 <SIMCOM_DMA_IrqHandler+0x43e>
 803bf50:	4b4d      	ldr	r3, [pc, #308]	; (803c088 <SIMCOM_DMA_IrqHandler+0x530>)
 803bf52:	681b      	ldr	r3, [r3, #0]
 803bf54:	4a55      	ldr	r2, [pc, #340]	; (803c0ac <SIMCOM_DMA_IrqHandler+0x554>)
 803bf56:	4293      	cmp	r3, r2
 803bf58:	d01a      	beq.n	803bf90 <SIMCOM_DMA_IrqHandler+0x438>
 803bf5a:	4b4b      	ldr	r3, [pc, #300]	; (803c088 <SIMCOM_DMA_IrqHandler+0x530>)
 803bf5c:	681b      	ldr	r3, [r3, #0]
 803bf5e:	4a54      	ldr	r2, [pc, #336]	; (803c0b0 <SIMCOM_DMA_IrqHandler+0x558>)
 803bf60:	4293      	cmp	r3, r2
 803bf62:	d012      	beq.n	803bf8a <SIMCOM_DMA_IrqHandler+0x432>
 803bf64:	4b48      	ldr	r3, [pc, #288]	; (803c088 <SIMCOM_DMA_IrqHandler+0x530>)
 803bf66:	681b      	ldr	r3, [r3, #0]
 803bf68:	4a52      	ldr	r2, [pc, #328]	; (803c0b4 <SIMCOM_DMA_IrqHandler+0x55c>)
 803bf6a:	4293      	cmp	r3, r2
 803bf6c:	d00a      	beq.n	803bf84 <SIMCOM_DMA_IrqHandler+0x42c>
 803bf6e:	4b46      	ldr	r3, [pc, #280]	; (803c088 <SIMCOM_DMA_IrqHandler+0x530>)
 803bf70:	681b      	ldr	r3, [r3, #0]
 803bf72:	4a51      	ldr	r2, [pc, #324]	; (803c0b8 <SIMCOM_DMA_IrqHandler+0x560>)
 803bf74:	4293      	cmp	r3, r2
 803bf76:	d102      	bne.n	803bf7e <SIMCOM_DMA_IrqHandler+0x426>
 803bf78:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 803bf7c:	e01e      	b.n	803bfbc <SIMCOM_DMA_IrqHandler+0x464>
 803bf7e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 803bf82:	e01b      	b.n	803bfbc <SIMCOM_DMA_IrqHandler+0x464>
 803bf84:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 803bf88:	e018      	b.n	803bfbc <SIMCOM_DMA_IrqHandler+0x464>
 803bf8a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 803bf8e:	e015      	b.n	803bfbc <SIMCOM_DMA_IrqHandler+0x464>
 803bf90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 803bf94:	e012      	b.n	803bfbc <SIMCOM_DMA_IrqHandler+0x464>
 803bf96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 803bf9a:	e00f      	b.n	803bfbc <SIMCOM_DMA_IrqHandler+0x464>
 803bf9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 803bfa0:	e00c      	b.n	803bfbc <SIMCOM_DMA_IrqHandler+0x464>
 803bfa2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 803bfa6:	e009      	b.n	803bfbc <SIMCOM_DMA_IrqHandler+0x464>
 803bfa8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 803bfac:	e006      	b.n	803bfbc <SIMCOM_DMA_IrqHandler+0x464>
 803bfae:	2320      	movs	r3, #32
 803bfb0:	e004      	b.n	803bfbc <SIMCOM_DMA_IrqHandler+0x464>
 803bfb2:	2320      	movs	r3, #32
 803bfb4:	e002      	b.n	803bfbc <SIMCOM_DMA_IrqHandler+0x464>
 803bfb6:	2320      	movs	r3, #32
 803bfb8:	e000      	b.n	803bfbc <SIMCOM_DMA_IrqHandler+0x464>
 803bfba:	2320      	movs	r3, #32
 803bfbc:	4a40      	ldr	r2, [pc, #256]	; (803c0c0 <SIMCOM_DMA_IrqHandler+0x568>)
 803bfbe:	60d3      	str	r3, [r2, #12]
 803bfc0:	e151      	b.n	803c266 <SIMCOM_DMA_IrqHandler+0x70e>
 803bfc2:	4b31      	ldr	r3, [pc, #196]	; (803c088 <SIMCOM_DMA_IrqHandler+0x530>)
 803bfc4:	681b      	ldr	r3, [r3, #0]
 803bfc6:	461a      	mov	r2, r3
 803bfc8:	4b3e      	ldr	r3, [pc, #248]	; (803c0c4 <SIMCOM_DMA_IrqHandler+0x56c>)
 803bfca:	429a      	cmp	r2, r3
 803bfcc:	f240 8084 	bls.w	803c0d8 <SIMCOM_DMA_IrqHandler+0x580>
 803bfd0:	4b2d      	ldr	r3, [pc, #180]	; (803c088 <SIMCOM_DMA_IrqHandler+0x530>)
 803bfd2:	681b      	ldr	r3, [r3, #0]
 803bfd4:	4a2d      	ldr	r2, [pc, #180]	; (803c08c <SIMCOM_DMA_IrqHandler+0x534>)
 803bfd6:	4293      	cmp	r3, r2
 803bfd8:	d07a      	beq.n	803c0d0 <SIMCOM_DMA_IrqHandler+0x578>
 803bfda:	4b2b      	ldr	r3, [pc, #172]	; (803c088 <SIMCOM_DMA_IrqHandler+0x530>)
 803bfdc:	681b      	ldr	r3, [r3, #0]
 803bfde:	4a2c      	ldr	r2, [pc, #176]	; (803c090 <SIMCOM_DMA_IrqHandler+0x538>)
 803bfe0:	4293      	cmp	r3, r2
 803bfe2:	d073      	beq.n	803c0cc <SIMCOM_DMA_IrqHandler+0x574>
 803bfe4:	4b28      	ldr	r3, [pc, #160]	; (803c088 <SIMCOM_DMA_IrqHandler+0x530>)
 803bfe6:	681b      	ldr	r3, [r3, #0]
 803bfe8:	4a2a      	ldr	r2, [pc, #168]	; (803c094 <SIMCOM_DMA_IrqHandler+0x53c>)
 803bfea:	4293      	cmp	r3, r2
 803bfec:	d06c      	beq.n	803c0c8 <SIMCOM_DMA_IrqHandler+0x570>
 803bfee:	4b26      	ldr	r3, [pc, #152]	; (803c088 <SIMCOM_DMA_IrqHandler+0x530>)
 803bff0:	681b      	ldr	r3, [r3, #0]
 803bff2:	4a29      	ldr	r2, [pc, #164]	; (803c098 <SIMCOM_DMA_IrqHandler+0x540>)
 803bff4:	4293      	cmp	r3, r2
 803bff6:	d042      	beq.n	803c07e <SIMCOM_DMA_IrqHandler+0x526>
 803bff8:	4b23      	ldr	r3, [pc, #140]	; (803c088 <SIMCOM_DMA_IrqHandler+0x530>)
 803bffa:	681b      	ldr	r3, [r3, #0]
 803bffc:	4a27      	ldr	r2, [pc, #156]	; (803c09c <SIMCOM_DMA_IrqHandler+0x544>)
 803bffe:	4293      	cmp	r3, r2
 803c000:	d03a      	beq.n	803c078 <SIMCOM_DMA_IrqHandler+0x520>
 803c002:	4b21      	ldr	r3, [pc, #132]	; (803c088 <SIMCOM_DMA_IrqHandler+0x530>)
 803c004:	681b      	ldr	r3, [r3, #0]
 803c006:	4a26      	ldr	r2, [pc, #152]	; (803c0a0 <SIMCOM_DMA_IrqHandler+0x548>)
 803c008:	4293      	cmp	r3, r2
 803c00a:	d032      	beq.n	803c072 <SIMCOM_DMA_IrqHandler+0x51a>
 803c00c:	4b1e      	ldr	r3, [pc, #120]	; (803c088 <SIMCOM_DMA_IrqHandler+0x530>)
 803c00e:	681b      	ldr	r3, [r3, #0]
 803c010:	4a24      	ldr	r2, [pc, #144]	; (803c0a4 <SIMCOM_DMA_IrqHandler+0x54c>)
 803c012:	4293      	cmp	r3, r2
 803c014:	d02a      	beq.n	803c06c <SIMCOM_DMA_IrqHandler+0x514>
 803c016:	4b1c      	ldr	r3, [pc, #112]	; (803c088 <SIMCOM_DMA_IrqHandler+0x530>)
 803c018:	681b      	ldr	r3, [r3, #0]
 803c01a:	4a23      	ldr	r2, [pc, #140]	; (803c0a8 <SIMCOM_DMA_IrqHandler+0x550>)
 803c01c:	4293      	cmp	r3, r2
 803c01e:	d022      	beq.n	803c066 <SIMCOM_DMA_IrqHandler+0x50e>
 803c020:	4b19      	ldr	r3, [pc, #100]	; (803c088 <SIMCOM_DMA_IrqHandler+0x530>)
 803c022:	681b      	ldr	r3, [r3, #0]
 803c024:	4a21      	ldr	r2, [pc, #132]	; (803c0ac <SIMCOM_DMA_IrqHandler+0x554>)
 803c026:	4293      	cmp	r3, r2
 803c028:	d01a      	beq.n	803c060 <SIMCOM_DMA_IrqHandler+0x508>
 803c02a:	4b17      	ldr	r3, [pc, #92]	; (803c088 <SIMCOM_DMA_IrqHandler+0x530>)
 803c02c:	681b      	ldr	r3, [r3, #0]
 803c02e:	4a20      	ldr	r2, [pc, #128]	; (803c0b0 <SIMCOM_DMA_IrqHandler+0x558>)
 803c030:	4293      	cmp	r3, r2
 803c032:	d012      	beq.n	803c05a <SIMCOM_DMA_IrqHandler+0x502>
 803c034:	4b14      	ldr	r3, [pc, #80]	; (803c088 <SIMCOM_DMA_IrqHandler+0x530>)
 803c036:	681b      	ldr	r3, [r3, #0]
 803c038:	4a1e      	ldr	r2, [pc, #120]	; (803c0b4 <SIMCOM_DMA_IrqHandler+0x55c>)
 803c03a:	4293      	cmp	r3, r2
 803c03c:	d00a      	beq.n	803c054 <SIMCOM_DMA_IrqHandler+0x4fc>
 803c03e:	4b12      	ldr	r3, [pc, #72]	; (803c088 <SIMCOM_DMA_IrqHandler+0x530>)
 803c040:	681b      	ldr	r3, [r3, #0]
 803c042:	4a1d      	ldr	r2, [pc, #116]	; (803c0b8 <SIMCOM_DMA_IrqHandler+0x560>)
 803c044:	4293      	cmp	r3, r2
 803c046:	d102      	bne.n	803c04e <SIMCOM_DMA_IrqHandler+0x4f6>
 803c048:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 803c04c:	e041      	b.n	803c0d2 <SIMCOM_DMA_IrqHandler+0x57a>
 803c04e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 803c052:	e03e      	b.n	803c0d2 <SIMCOM_DMA_IrqHandler+0x57a>
 803c054:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 803c058:	e03b      	b.n	803c0d2 <SIMCOM_DMA_IrqHandler+0x57a>
 803c05a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 803c05e:	e038      	b.n	803c0d2 <SIMCOM_DMA_IrqHandler+0x57a>
 803c060:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 803c064:	e035      	b.n	803c0d2 <SIMCOM_DMA_IrqHandler+0x57a>
 803c066:	f44f 6300 	mov.w	r3, #2048	; 0x800
 803c06a:	e032      	b.n	803c0d2 <SIMCOM_DMA_IrqHandler+0x57a>
 803c06c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 803c070:	e02f      	b.n	803c0d2 <SIMCOM_DMA_IrqHandler+0x57a>
 803c072:	f44f 6300 	mov.w	r3, #2048	; 0x800
 803c076:	e02c      	b.n	803c0d2 <SIMCOM_DMA_IrqHandler+0x57a>
 803c078:	f44f 6300 	mov.w	r3, #2048	; 0x800
 803c07c:	e029      	b.n	803c0d2 <SIMCOM_DMA_IrqHandler+0x57a>
 803c07e:	2320      	movs	r3, #32
 803c080:	e027      	b.n	803c0d2 <SIMCOM_DMA_IrqHandler+0x57a>
 803c082:	bf00      	nop
 803c084:	40026000 	.word	0x40026000
 803c088:	20008700 	.word	0x20008700
 803c08c:	40026010 	.word	0x40026010
 803c090:	40026410 	.word	0x40026410
 803c094:	40026070 	.word	0x40026070
 803c098:	40026470 	.word	0x40026470
 803c09c:	40026028 	.word	0x40026028
 803c0a0:	40026428 	.word	0x40026428
 803c0a4:	40026088 	.word	0x40026088
 803c0a8:	40026488 	.word	0x40026488
 803c0ac:	40026040 	.word	0x40026040
 803c0b0:	40026440 	.word	0x40026440
 803c0b4:	400260a0 	.word	0x400260a0
 803c0b8:	400264a0 	.word	0x400264a0
 803c0bc:	40026458 	.word	0x40026458
 803c0c0:	40026400 	.word	0x40026400
 803c0c4:	400260b8 	.word	0x400260b8
 803c0c8:	2320      	movs	r3, #32
 803c0ca:	e002      	b.n	803c0d2 <SIMCOM_DMA_IrqHandler+0x57a>
 803c0cc:	2320      	movs	r3, #32
 803c0ce:	e000      	b.n	803c0d2 <SIMCOM_DMA_IrqHandler+0x57a>
 803c0d0:	2320      	movs	r3, #32
 803c0d2:	4a9b      	ldr	r2, [pc, #620]	; (803c340 <SIMCOM_DMA_IrqHandler+0x7e8>)
 803c0d4:	6093      	str	r3, [r2, #8]
 803c0d6:	e0c6      	b.n	803c266 <SIMCOM_DMA_IrqHandler+0x70e>
 803c0d8:	4b9a      	ldr	r3, [pc, #616]	; (803c344 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c0da:	681b      	ldr	r3, [r3, #0]
 803c0dc:	461a      	mov	r2, r3
 803c0de:	4b9a      	ldr	r3, [pc, #616]	; (803c348 <SIMCOM_DMA_IrqHandler+0x7f0>)
 803c0e0:	429a      	cmp	r2, r3
 803c0e2:	d960      	bls.n	803c1a6 <SIMCOM_DMA_IrqHandler+0x64e>
 803c0e4:	4b97      	ldr	r3, [pc, #604]	; (803c344 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c0e6:	681b      	ldr	r3, [r3, #0]
 803c0e8:	4a98      	ldr	r2, [pc, #608]	; (803c34c <SIMCOM_DMA_IrqHandler+0x7f4>)
 803c0ea:	4293      	cmp	r3, r2
 803c0ec:	d057      	beq.n	803c19e <SIMCOM_DMA_IrqHandler+0x646>
 803c0ee:	4b95      	ldr	r3, [pc, #596]	; (803c344 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c0f0:	681b      	ldr	r3, [r3, #0]
 803c0f2:	4a97      	ldr	r2, [pc, #604]	; (803c350 <SIMCOM_DMA_IrqHandler+0x7f8>)
 803c0f4:	4293      	cmp	r3, r2
 803c0f6:	d050      	beq.n	803c19a <SIMCOM_DMA_IrqHandler+0x642>
 803c0f8:	4b92      	ldr	r3, [pc, #584]	; (803c344 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c0fa:	681b      	ldr	r3, [r3, #0]
 803c0fc:	4a95      	ldr	r2, [pc, #596]	; (803c354 <SIMCOM_DMA_IrqHandler+0x7fc>)
 803c0fe:	4293      	cmp	r3, r2
 803c100:	d049      	beq.n	803c196 <SIMCOM_DMA_IrqHandler+0x63e>
 803c102:	4b90      	ldr	r3, [pc, #576]	; (803c344 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c104:	681b      	ldr	r3, [r3, #0]
 803c106:	4a94      	ldr	r2, [pc, #592]	; (803c358 <SIMCOM_DMA_IrqHandler+0x800>)
 803c108:	4293      	cmp	r3, r2
 803c10a:	d042      	beq.n	803c192 <SIMCOM_DMA_IrqHandler+0x63a>
 803c10c:	4b8d      	ldr	r3, [pc, #564]	; (803c344 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c10e:	681b      	ldr	r3, [r3, #0]
 803c110:	4a92      	ldr	r2, [pc, #584]	; (803c35c <SIMCOM_DMA_IrqHandler+0x804>)
 803c112:	4293      	cmp	r3, r2
 803c114:	d03a      	beq.n	803c18c <SIMCOM_DMA_IrqHandler+0x634>
 803c116:	4b8b      	ldr	r3, [pc, #556]	; (803c344 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c118:	681b      	ldr	r3, [r3, #0]
 803c11a:	4a91      	ldr	r2, [pc, #580]	; (803c360 <SIMCOM_DMA_IrqHandler+0x808>)
 803c11c:	4293      	cmp	r3, r2
 803c11e:	d032      	beq.n	803c186 <SIMCOM_DMA_IrqHandler+0x62e>
 803c120:	4b88      	ldr	r3, [pc, #544]	; (803c344 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c122:	681b      	ldr	r3, [r3, #0]
 803c124:	4a8f      	ldr	r2, [pc, #572]	; (803c364 <SIMCOM_DMA_IrqHandler+0x80c>)
 803c126:	4293      	cmp	r3, r2
 803c128:	d02a      	beq.n	803c180 <SIMCOM_DMA_IrqHandler+0x628>
 803c12a:	4b86      	ldr	r3, [pc, #536]	; (803c344 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c12c:	681b      	ldr	r3, [r3, #0]
 803c12e:	4a8e      	ldr	r2, [pc, #568]	; (803c368 <SIMCOM_DMA_IrqHandler+0x810>)
 803c130:	4293      	cmp	r3, r2
 803c132:	d022      	beq.n	803c17a <SIMCOM_DMA_IrqHandler+0x622>
 803c134:	4b83      	ldr	r3, [pc, #524]	; (803c344 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c136:	681b      	ldr	r3, [r3, #0]
 803c138:	4a8c      	ldr	r2, [pc, #560]	; (803c36c <SIMCOM_DMA_IrqHandler+0x814>)
 803c13a:	4293      	cmp	r3, r2
 803c13c:	d01a      	beq.n	803c174 <SIMCOM_DMA_IrqHandler+0x61c>
 803c13e:	4b81      	ldr	r3, [pc, #516]	; (803c344 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c140:	681b      	ldr	r3, [r3, #0]
 803c142:	4a8b      	ldr	r2, [pc, #556]	; (803c370 <SIMCOM_DMA_IrqHandler+0x818>)
 803c144:	4293      	cmp	r3, r2
 803c146:	d012      	beq.n	803c16e <SIMCOM_DMA_IrqHandler+0x616>
 803c148:	4b7e      	ldr	r3, [pc, #504]	; (803c344 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c14a:	681b      	ldr	r3, [r3, #0]
 803c14c:	4a89      	ldr	r2, [pc, #548]	; (803c374 <SIMCOM_DMA_IrqHandler+0x81c>)
 803c14e:	4293      	cmp	r3, r2
 803c150:	d00a      	beq.n	803c168 <SIMCOM_DMA_IrqHandler+0x610>
 803c152:	4b7c      	ldr	r3, [pc, #496]	; (803c344 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c154:	681b      	ldr	r3, [r3, #0]
 803c156:	4a88      	ldr	r2, [pc, #544]	; (803c378 <SIMCOM_DMA_IrqHandler+0x820>)
 803c158:	4293      	cmp	r3, r2
 803c15a:	d102      	bne.n	803c162 <SIMCOM_DMA_IrqHandler+0x60a>
 803c15c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 803c160:	e01e      	b.n	803c1a0 <SIMCOM_DMA_IrqHandler+0x648>
 803c162:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 803c166:	e01b      	b.n	803c1a0 <SIMCOM_DMA_IrqHandler+0x648>
 803c168:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 803c16c:	e018      	b.n	803c1a0 <SIMCOM_DMA_IrqHandler+0x648>
 803c16e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 803c172:	e015      	b.n	803c1a0 <SIMCOM_DMA_IrqHandler+0x648>
 803c174:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 803c178:	e012      	b.n	803c1a0 <SIMCOM_DMA_IrqHandler+0x648>
 803c17a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 803c17e:	e00f      	b.n	803c1a0 <SIMCOM_DMA_IrqHandler+0x648>
 803c180:	f44f 6300 	mov.w	r3, #2048	; 0x800
 803c184:	e00c      	b.n	803c1a0 <SIMCOM_DMA_IrqHandler+0x648>
 803c186:	f44f 6300 	mov.w	r3, #2048	; 0x800
 803c18a:	e009      	b.n	803c1a0 <SIMCOM_DMA_IrqHandler+0x648>
 803c18c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 803c190:	e006      	b.n	803c1a0 <SIMCOM_DMA_IrqHandler+0x648>
 803c192:	2320      	movs	r3, #32
 803c194:	e004      	b.n	803c1a0 <SIMCOM_DMA_IrqHandler+0x648>
 803c196:	2320      	movs	r3, #32
 803c198:	e002      	b.n	803c1a0 <SIMCOM_DMA_IrqHandler+0x648>
 803c19a:	2320      	movs	r3, #32
 803c19c:	e000      	b.n	803c1a0 <SIMCOM_DMA_IrqHandler+0x648>
 803c19e:	2320      	movs	r3, #32
 803c1a0:	4a76      	ldr	r2, [pc, #472]	; (803c37c <SIMCOM_DMA_IrqHandler+0x824>)
 803c1a2:	60d3      	str	r3, [r2, #12]
 803c1a4:	e05f      	b.n	803c266 <SIMCOM_DMA_IrqHandler+0x70e>
 803c1a6:	4b67      	ldr	r3, [pc, #412]	; (803c344 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c1a8:	681b      	ldr	r3, [r3, #0]
 803c1aa:	4a68      	ldr	r2, [pc, #416]	; (803c34c <SIMCOM_DMA_IrqHandler+0x7f4>)
 803c1ac:	4293      	cmp	r3, r2
 803c1ae:	d057      	beq.n	803c260 <SIMCOM_DMA_IrqHandler+0x708>
 803c1b0:	4b64      	ldr	r3, [pc, #400]	; (803c344 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c1b2:	681b      	ldr	r3, [r3, #0]
 803c1b4:	4a66      	ldr	r2, [pc, #408]	; (803c350 <SIMCOM_DMA_IrqHandler+0x7f8>)
 803c1b6:	4293      	cmp	r3, r2
 803c1b8:	d050      	beq.n	803c25c <SIMCOM_DMA_IrqHandler+0x704>
 803c1ba:	4b62      	ldr	r3, [pc, #392]	; (803c344 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c1bc:	681b      	ldr	r3, [r3, #0]
 803c1be:	4a65      	ldr	r2, [pc, #404]	; (803c354 <SIMCOM_DMA_IrqHandler+0x7fc>)
 803c1c0:	4293      	cmp	r3, r2
 803c1c2:	d049      	beq.n	803c258 <SIMCOM_DMA_IrqHandler+0x700>
 803c1c4:	4b5f      	ldr	r3, [pc, #380]	; (803c344 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c1c6:	681b      	ldr	r3, [r3, #0]
 803c1c8:	4a63      	ldr	r2, [pc, #396]	; (803c358 <SIMCOM_DMA_IrqHandler+0x800>)
 803c1ca:	4293      	cmp	r3, r2
 803c1cc:	d042      	beq.n	803c254 <SIMCOM_DMA_IrqHandler+0x6fc>
 803c1ce:	4b5d      	ldr	r3, [pc, #372]	; (803c344 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c1d0:	681b      	ldr	r3, [r3, #0]
 803c1d2:	4a62      	ldr	r2, [pc, #392]	; (803c35c <SIMCOM_DMA_IrqHandler+0x804>)
 803c1d4:	4293      	cmp	r3, r2
 803c1d6:	d03a      	beq.n	803c24e <SIMCOM_DMA_IrqHandler+0x6f6>
 803c1d8:	4b5a      	ldr	r3, [pc, #360]	; (803c344 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c1da:	681b      	ldr	r3, [r3, #0]
 803c1dc:	4a60      	ldr	r2, [pc, #384]	; (803c360 <SIMCOM_DMA_IrqHandler+0x808>)
 803c1de:	4293      	cmp	r3, r2
 803c1e0:	d032      	beq.n	803c248 <SIMCOM_DMA_IrqHandler+0x6f0>
 803c1e2:	4b58      	ldr	r3, [pc, #352]	; (803c344 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c1e4:	681b      	ldr	r3, [r3, #0]
 803c1e6:	4a5f      	ldr	r2, [pc, #380]	; (803c364 <SIMCOM_DMA_IrqHandler+0x80c>)
 803c1e8:	4293      	cmp	r3, r2
 803c1ea:	d02a      	beq.n	803c242 <SIMCOM_DMA_IrqHandler+0x6ea>
 803c1ec:	4b55      	ldr	r3, [pc, #340]	; (803c344 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c1ee:	681b      	ldr	r3, [r3, #0]
 803c1f0:	4a5d      	ldr	r2, [pc, #372]	; (803c368 <SIMCOM_DMA_IrqHandler+0x810>)
 803c1f2:	4293      	cmp	r3, r2
 803c1f4:	d022      	beq.n	803c23c <SIMCOM_DMA_IrqHandler+0x6e4>
 803c1f6:	4b53      	ldr	r3, [pc, #332]	; (803c344 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c1f8:	681b      	ldr	r3, [r3, #0]
 803c1fa:	4a5c      	ldr	r2, [pc, #368]	; (803c36c <SIMCOM_DMA_IrqHandler+0x814>)
 803c1fc:	4293      	cmp	r3, r2
 803c1fe:	d01a      	beq.n	803c236 <SIMCOM_DMA_IrqHandler+0x6de>
 803c200:	4b50      	ldr	r3, [pc, #320]	; (803c344 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c202:	681b      	ldr	r3, [r3, #0]
 803c204:	4a5a      	ldr	r2, [pc, #360]	; (803c370 <SIMCOM_DMA_IrqHandler+0x818>)
 803c206:	4293      	cmp	r3, r2
 803c208:	d012      	beq.n	803c230 <SIMCOM_DMA_IrqHandler+0x6d8>
 803c20a:	4b4e      	ldr	r3, [pc, #312]	; (803c344 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c20c:	681b      	ldr	r3, [r3, #0]
 803c20e:	4a59      	ldr	r2, [pc, #356]	; (803c374 <SIMCOM_DMA_IrqHandler+0x81c>)
 803c210:	4293      	cmp	r3, r2
 803c212:	d00a      	beq.n	803c22a <SIMCOM_DMA_IrqHandler+0x6d2>
 803c214:	4b4b      	ldr	r3, [pc, #300]	; (803c344 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c216:	681b      	ldr	r3, [r3, #0]
 803c218:	4a57      	ldr	r2, [pc, #348]	; (803c378 <SIMCOM_DMA_IrqHandler+0x820>)
 803c21a:	4293      	cmp	r3, r2
 803c21c:	d102      	bne.n	803c224 <SIMCOM_DMA_IrqHandler+0x6cc>
 803c21e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 803c222:	e01e      	b.n	803c262 <SIMCOM_DMA_IrqHandler+0x70a>
 803c224:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 803c228:	e01b      	b.n	803c262 <SIMCOM_DMA_IrqHandler+0x70a>
 803c22a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 803c22e:	e018      	b.n	803c262 <SIMCOM_DMA_IrqHandler+0x70a>
 803c230:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 803c234:	e015      	b.n	803c262 <SIMCOM_DMA_IrqHandler+0x70a>
 803c236:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 803c23a:	e012      	b.n	803c262 <SIMCOM_DMA_IrqHandler+0x70a>
 803c23c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 803c240:	e00f      	b.n	803c262 <SIMCOM_DMA_IrqHandler+0x70a>
 803c242:	f44f 6300 	mov.w	r3, #2048	; 0x800
 803c246:	e00c      	b.n	803c262 <SIMCOM_DMA_IrqHandler+0x70a>
 803c248:	f44f 6300 	mov.w	r3, #2048	; 0x800
 803c24c:	e009      	b.n	803c262 <SIMCOM_DMA_IrqHandler+0x70a>
 803c24e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 803c252:	e006      	b.n	803c262 <SIMCOM_DMA_IrqHandler+0x70a>
 803c254:	2320      	movs	r3, #32
 803c256:	e004      	b.n	803c262 <SIMCOM_DMA_IrqHandler+0x70a>
 803c258:	2320      	movs	r3, #32
 803c25a:	e002      	b.n	803c262 <SIMCOM_DMA_IrqHandler+0x70a>
 803c25c:	2320      	movs	r3, #32
 803c25e:	e000      	b.n	803c262 <SIMCOM_DMA_IrqHandler+0x70a>
 803c260:	2320      	movs	r3, #32
 803c262:	4a46      	ldr	r2, [pc, #280]	; (803c37c <SIMCOM_DMA_IrqHandler+0x824>)
 803c264:	6093      	str	r3, [r2, #8]
        SIMCOM_Check_Buffer();
 803c266:	f000 fd93 	bl	803cd90 <SIMCOM_Check_Buffer>
}
 803c26a:	f000 bd45 	b.w	803ccf8 <SIMCOM_DMA_IrqHandler+0x11a0>
        __HAL_DMA_CLEAR_FLAG(&hdma_usart1_rx, __HAL_DMA_GET_TE_FLAG_INDEX(&hdma_usart1_rx));
 803c26e:	4b35      	ldr	r3, [pc, #212]	; (803c344 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c270:	681b      	ldr	r3, [r3, #0]
 803c272:	461a      	mov	r2, r3
 803c274:	4b42      	ldr	r3, [pc, #264]	; (803c380 <SIMCOM_DMA_IrqHandler+0x828>)
 803c276:	429a      	cmp	r2, r3
 803c278:	f240 8084 	bls.w	803c384 <SIMCOM_DMA_IrqHandler+0x82c>
 803c27c:	4b31      	ldr	r3, [pc, #196]	; (803c344 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c27e:	681b      	ldr	r3, [r3, #0]
 803c280:	4a32      	ldr	r2, [pc, #200]	; (803c34c <SIMCOM_DMA_IrqHandler+0x7f4>)
 803c282:	4293      	cmp	r3, r2
 803c284:	d057      	beq.n	803c336 <SIMCOM_DMA_IrqHandler+0x7de>
 803c286:	4b2f      	ldr	r3, [pc, #188]	; (803c344 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c288:	681b      	ldr	r3, [r3, #0]
 803c28a:	4a31      	ldr	r2, [pc, #196]	; (803c350 <SIMCOM_DMA_IrqHandler+0x7f8>)
 803c28c:	4293      	cmp	r3, r2
 803c28e:	d050      	beq.n	803c332 <SIMCOM_DMA_IrqHandler+0x7da>
 803c290:	4b2c      	ldr	r3, [pc, #176]	; (803c344 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c292:	681b      	ldr	r3, [r3, #0]
 803c294:	4a2f      	ldr	r2, [pc, #188]	; (803c354 <SIMCOM_DMA_IrqHandler+0x7fc>)
 803c296:	4293      	cmp	r3, r2
 803c298:	d049      	beq.n	803c32e <SIMCOM_DMA_IrqHandler+0x7d6>
 803c29a:	4b2a      	ldr	r3, [pc, #168]	; (803c344 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c29c:	681b      	ldr	r3, [r3, #0]
 803c29e:	4a2e      	ldr	r2, [pc, #184]	; (803c358 <SIMCOM_DMA_IrqHandler+0x800>)
 803c2a0:	4293      	cmp	r3, r2
 803c2a2:	d042      	beq.n	803c32a <SIMCOM_DMA_IrqHandler+0x7d2>
 803c2a4:	4b27      	ldr	r3, [pc, #156]	; (803c344 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c2a6:	681b      	ldr	r3, [r3, #0]
 803c2a8:	4a2c      	ldr	r2, [pc, #176]	; (803c35c <SIMCOM_DMA_IrqHandler+0x804>)
 803c2aa:	4293      	cmp	r3, r2
 803c2ac:	d03a      	beq.n	803c324 <SIMCOM_DMA_IrqHandler+0x7cc>
 803c2ae:	4b25      	ldr	r3, [pc, #148]	; (803c344 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c2b0:	681b      	ldr	r3, [r3, #0]
 803c2b2:	4a2b      	ldr	r2, [pc, #172]	; (803c360 <SIMCOM_DMA_IrqHandler+0x808>)
 803c2b4:	4293      	cmp	r3, r2
 803c2b6:	d032      	beq.n	803c31e <SIMCOM_DMA_IrqHandler+0x7c6>
 803c2b8:	4b22      	ldr	r3, [pc, #136]	; (803c344 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c2ba:	681b      	ldr	r3, [r3, #0]
 803c2bc:	4a29      	ldr	r2, [pc, #164]	; (803c364 <SIMCOM_DMA_IrqHandler+0x80c>)
 803c2be:	4293      	cmp	r3, r2
 803c2c0:	d02a      	beq.n	803c318 <SIMCOM_DMA_IrqHandler+0x7c0>
 803c2c2:	4b20      	ldr	r3, [pc, #128]	; (803c344 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c2c4:	681b      	ldr	r3, [r3, #0]
 803c2c6:	4a28      	ldr	r2, [pc, #160]	; (803c368 <SIMCOM_DMA_IrqHandler+0x810>)
 803c2c8:	4293      	cmp	r3, r2
 803c2ca:	d022      	beq.n	803c312 <SIMCOM_DMA_IrqHandler+0x7ba>
 803c2cc:	4b1d      	ldr	r3, [pc, #116]	; (803c344 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c2ce:	681b      	ldr	r3, [r3, #0]
 803c2d0:	4a26      	ldr	r2, [pc, #152]	; (803c36c <SIMCOM_DMA_IrqHandler+0x814>)
 803c2d2:	4293      	cmp	r3, r2
 803c2d4:	d01a      	beq.n	803c30c <SIMCOM_DMA_IrqHandler+0x7b4>
 803c2d6:	4b1b      	ldr	r3, [pc, #108]	; (803c344 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c2d8:	681b      	ldr	r3, [r3, #0]
 803c2da:	4a25      	ldr	r2, [pc, #148]	; (803c370 <SIMCOM_DMA_IrqHandler+0x818>)
 803c2dc:	4293      	cmp	r3, r2
 803c2de:	d012      	beq.n	803c306 <SIMCOM_DMA_IrqHandler+0x7ae>
 803c2e0:	4b18      	ldr	r3, [pc, #96]	; (803c344 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c2e2:	681b      	ldr	r3, [r3, #0]
 803c2e4:	4a23      	ldr	r2, [pc, #140]	; (803c374 <SIMCOM_DMA_IrqHandler+0x81c>)
 803c2e6:	4293      	cmp	r3, r2
 803c2e8:	d00a      	beq.n	803c300 <SIMCOM_DMA_IrqHandler+0x7a8>
 803c2ea:	4b16      	ldr	r3, [pc, #88]	; (803c344 <SIMCOM_DMA_IrqHandler+0x7ec>)
 803c2ec:	681b      	ldr	r3, [r3, #0]
 803c2ee:	4a22      	ldr	r2, [pc, #136]	; (803c378 <SIMCOM_DMA_IrqHandler+0x820>)
 803c2f0:	4293      	cmp	r3, r2
 803c2f2:	d102      	bne.n	803c2fa <SIMCOM_DMA_IrqHandler+0x7a2>
 803c2f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 803c2f8:	e01e      	b.n	803c338 <SIMCOM_DMA_IrqHandler+0x7e0>
 803c2fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 803c2fe:	e01b      	b.n	803c338 <SIMCOM_DMA_IrqHandler+0x7e0>
 803c300:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 803c304:	e018      	b.n	803c338 <SIMCOM_DMA_IrqHandler+0x7e0>
 803c306:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 803c30a:	e015      	b.n	803c338 <SIMCOM_DMA_IrqHandler+0x7e0>
 803c30c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 803c310:	e012      	b.n	803c338 <SIMCOM_DMA_IrqHandler+0x7e0>
 803c312:	f44f 7300 	mov.w	r3, #512	; 0x200
 803c316:	e00f      	b.n	803c338 <SIMCOM_DMA_IrqHandler+0x7e0>
 803c318:	f44f 7300 	mov.w	r3, #512	; 0x200
 803c31c:	e00c      	b.n	803c338 <SIMCOM_DMA_IrqHandler+0x7e0>
 803c31e:	f44f 7300 	mov.w	r3, #512	; 0x200
 803c322:	e009      	b.n	803c338 <SIMCOM_DMA_IrqHandler+0x7e0>
 803c324:	f44f 7300 	mov.w	r3, #512	; 0x200
 803c328:	e006      	b.n	803c338 <SIMCOM_DMA_IrqHandler+0x7e0>
 803c32a:	2308      	movs	r3, #8
 803c32c:	e004      	b.n	803c338 <SIMCOM_DMA_IrqHandler+0x7e0>
 803c32e:	2308      	movs	r3, #8
 803c330:	e002      	b.n	803c338 <SIMCOM_DMA_IrqHandler+0x7e0>
 803c332:	2308      	movs	r3, #8
 803c334:	e000      	b.n	803c338 <SIMCOM_DMA_IrqHandler+0x7e0>
 803c336:	2308      	movs	r3, #8
 803c338:	4a01      	ldr	r2, [pc, #4]	; (803c340 <SIMCOM_DMA_IrqHandler+0x7e8>)
 803c33a:	60d3      	str	r3, [r2, #12]
 803c33c:	e173      	b.n	803c626 <SIMCOM_DMA_IrqHandler+0xace>
 803c33e:	bf00      	nop
 803c340:	40026400 	.word	0x40026400
 803c344:	20008700 	.word	0x20008700
 803c348:	40026058 	.word	0x40026058
 803c34c:	40026010 	.word	0x40026010
 803c350:	40026410 	.word	0x40026410
 803c354:	40026070 	.word	0x40026070
 803c358:	40026470 	.word	0x40026470
 803c35c:	40026028 	.word	0x40026028
 803c360:	40026428 	.word	0x40026428
 803c364:	40026088 	.word	0x40026088
 803c368:	40026488 	.word	0x40026488
 803c36c:	40026040 	.word	0x40026040
 803c370:	40026440 	.word	0x40026440
 803c374:	400260a0 	.word	0x400260a0
 803c378:	400264a0 	.word	0x400264a0
 803c37c:	40026000 	.word	0x40026000
 803c380:	40026458 	.word	0x40026458
 803c384:	4b95      	ldr	r3, [pc, #596]	; (803c5dc <SIMCOM_DMA_IrqHandler+0xa84>)
 803c386:	681b      	ldr	r3, [r3, #0]
 803c388:	461a      	mov	r2, r3
 803c38a:	4b95      	ldr	r3, [pc, #596]	; (803c5e0 <SIMCOM_DMA_IrqHandler+0xa88>)
 803c38c:	429a      	cmp	r2, r3
 803c38e:	d960      	bls.n	803c452 <SIMCOM_DMA_IrqHandler+0x8fa>
 803c390:	4b92      	ldr	r3, [pc, #584]	; (803c5dc <SIMCOM_DMA_IrqHandler+0xa84>)
 803c392:	681b      	ldr	r3, [r3, #0]
 803c394:	4a93      	ldr	r2, [pc, #588]	; (803c5e4 <SIMCOM_DMA_IrqHandler+0xa8c>)
 803c396:	4293      	cmp	r3, r2
 803c398:	d057      	beq.n	803c44a <SIMCOM_DMA_IrqHandler+0x8f2>
 803c39a:	4b90      	ldr	r3, [pc, #576]	; (803c5dc <SIMCOM_DMA_IrqHandler+0xa84>)
 803c39c:	681b      	ldr	r3, [r3, #0]
 803c39e:	4a92      	ldr	r2, [pc, #584]	; (803c5e8 <SIMCOM_DMA_IrqHandler+0xa90>)
 803c3a0:	4293      	cmp	r3, r2
 803c3a2:	d050      	beq.n	803c446 <SIMCOM_DMA_IrqHandler+0x8ee>
 803c3a4:	4b8d      	ldr	r3, [pc, #564]	; (803c5dc <SIMCOM_DMA_IrqHandler+0xa84>)
 803c3a6:	681b      	ldr	r3, [r3, #0]
 803c3a8:	4a90      	ldr	r2, [pc, #576]	; (803c5ec <SIMCOM_DMA_IrqHandler+0xa94>)
 803c3aa:	4293      	cmp	r3, r2
 803c3ac:	d049      	beq.n	803c442 <SIMCOM_DMA_IrqHandler+0x8ea>
 803c3ae:	4b8b      	ldr	r3, [pc, #556]	; (803c5dc <SIMCOM_DMA_IrqHandler+0xa84>)
 803c3b0:	681b      	ldr	r3, [r3, #0]
 803c3b2:	4a8f      	ldr	r2, [pc, #572]	; (803c5f0 <SIMCOM_DMA_IrqHandler+0xa98>)
 803c3b4:	4293      	cmp	r3, r2
 803c3b6:	d042      	beq.n	803c43e <SIMCOM_DMA_IrqHandler+0x8e6>
 803c3b8:	4b88      	ldr	r3, [pc, #544]	; (803c5dc <SIMCOM_DMA_IrqHandler+0xa84>)
 803c3ba:	681b      	ldr	r3, [r3, #0]
 803c3bc:	4a8d      	ldr	r2, [pc, #564]	; (803c5f4 <SIMCOM_DMA_IrqHandler+0xa9c>)
 803c3be:	4293      	cmp	r3, r2
 803c3c0:	d03a      	beq.n	803c438 <SIMCOM_DMA_IrqHandler+0x8e0>
 803c3c2:	4b86      	ldr	r3, [pc, #536]	; (803c5dc <SIMCOM_DMA_IrqHandler+0xa84>)
 803c3c4:	681b      	ldr	r3, [r3, #0]
 803c3c6:	4a8c      	ldr	r2, [pc, #560]	; (803c5f8 <SIMCOM_DMA_IrqHandler+0xaa0>)
 803c3c8:	4293      	cmp	r3, r2
 803c3ca:	d032      	beq.n	803c432 <SIMCOM_DMA_IrqHandler+0x8da>
 803c3cc:	4b83      	ldr	r3, [pc, #524]	; (803c5dc <SIMCOM_DMA_IrqHandler+0xa84>)
 803c3ce:	681b      	ldr	r3, [r3, #0]
 803c3d0:	4a8a      	ldr	r2, [pc, #552]	; (803c5fc <SIMCOM_DMA_IrqHandler+0xaa4>)
 803c3d2:	4293      	cmp	r3, r2
 803c3d4:	d02a      	beq.n	803c42c <SIMCOM_DMA_IrqHandler+0x8d4>
 803c3d6:	4b81      	ldr	r3, [pc, #516]	; (803c5dc <SIMCOM_DMA_IrqHandler+0xa84>)
 803c3d8:	681b      	ldr	r3, [r3, #0]
 803c3da:	4a89      	ldr	r2, [pc, #548]	; (803c600 <SIMCOM_DMA_IrqHandler+0xaa8>)
 803c3dc:	4293      	cmp	r3, r2
 803c3de:	d022      	beq.n	803c426 <SIMCOM_DMA_IrqHandler+0x8ce>
 803c3e0:	4b7e      	ldr	r3, [pc, #504]	; (803c5dc <SIMCOM_DMA_IrqHandler+0xa84>)
 803c3e2:	681b      	ldr	r3, [r3, #0]
 803c3e4:	4a87      	ldr	r2, [pc, #540]	; (803c604 <SIMCOM_DMA_IrqHandler+0xaac>)
 803c3e6:	4293      	cmp	r3, r2
 803c3e8:	d01a      	beq.n	803c420 <SIMCOM_DMA_IrqHandler+0x8c8>
 803c3ea:	4b7c      	ldr	r3, [pc, #496]	; (803c5dc <SIMCOM_DMA_IrqHandler+0xa84>)
 803c3ec:	681b      	ldr	r3, [r3, #0]
 803c3ee:	4a86      	ldr	r2, [pc, #536]	; (803c608 <SIMCOM_DMA_IrqHandler+0xab0>)
 803c3f0:	4293      	cmp	r3, r2
 803c3f2:	d012      	beq.n	803c41a <SIMCOM_DMA_IrqHandler+0x8c2>
 803c3f4:	4b79      	ldr	r3, [pc, #484]	; (803c5dc <SIMCOM_DMA_IrqHandler+0xa84>)
 803c3f6:	681b      	ldr	r3, [r3, #0]
 803c3f8:	4a84      	ldr	r2, [pc, #528]	; (803c60c <SIMCOM_DMA_IrqHandler+0xab4>)
 803c3fa:	4293      	cmp	r3, r2
 803c3fc:	d00a      	beq.n	803c414 <SIMCOM_DMA_IrqHandler+0x8bc>
 803c3fe:	4b77      	ldr	r3, [pc, #476]	; (803c5dc <SIMCOM_DMA_IrqHandler+0xa84>)
 803c400:	681b      	ldr	r3, [r3, #0]
 803c402:	4a83      	ldr	r2, [pc, #524]	; (803c610 <SIMCOM_DMA_IrqHandler+0xab8>)
 803c404:	4293      	cmp	r3, r2
 803c406:	d102      	bne.n	803c40e <SIMCOM_DMA_IrqHandler+0x8b6>
 803c408:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 803c40c:	e01e      	b.n	803c44c <SIMCOM_DMA_IrqHandler+0x8f4>
 803c40e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 803c412:	e01b      	b.n	803c44c <SIMCOM_DMA_IrqHandler+0x8f4>
 803c414:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 803c418:	e018      	b.n	803c44c <SIMCOM_DMA_IrqHandler+0x8f4>
 803c41a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 803c41e:	e015      	b.n	803c44c <SIMCOM_DMA_IrqHandler+0x8f4>
 803c420:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 803c424:	e012      	b.n	803c44c <SIMCOM_DMA_IrqHandler+0x8f4>
 803c426:	f44f 7300 	mov.w	r3, #512	; 0x200
 803c42a:	e00f      	b.n	803c44c <SIMCOM_DMA_IrqHandler+0x8f4>
 803c42c:	f44f 7300 	mov.w	r3, #512	; 0x200
 803c430:	e00c      	b.n	803c44c <SIMCOM_DMA_IrqHandler+0x8f4>
 803c432:	f44f 7300 	mov.w	r3, #512	; 0x200
 803c436:	e009      	b.n	803c44c <SIMCOM_DMA_IrqHandler+0x8f4>
 803c438:	f44f 7300 	mov.w	r3, #512	; 0x200
 803c43c:	e006      	b.n	803c44c <SIMCOM_DMA_IrqHandler+0x8f4>
 803c43e:	2308      	movs	r3, #8
 803c440:	e004      	b.n	803c44c <SIMCOM_DMA_IrqHandler+0x8f4>
 803c442:	2308      	movs	r3, #8
 803c444:	e002      	b.n	803c44c <SIMCOM_DMA_IrqHandler+0x8f4>
 803c446:	2308      	movs	r3, #8
 803c448:	e000      	b.n	803c44c <SIMCOM_DMA_IrqHandler+0x8f4>
 803c44a:	2308      	movs	r3, #8
 803c44c:	4a71      	ldr	r2, [pc, #452]	; (803c614 <SIMCOM_DMA_IrqHandler+0xabc>)
 803c44e:	6093      	str	r3, [r2, #8]
 803c450:	e0e9      	b.n	803c626 <SIMCOM_DMA_IrqHandler+0xace>
 803c452:	4b62      	ldr	r3, [pc, #392]	; (803c5dc <SIMCOM_DMA_IrqHandler+0xa84>)
 803c454:	681b      	ldr	r3, [r3, #0]
 803c456:	461a      	mov	r2, r3
 803c458:	4b6f      	ldr	r3, [pc, #444]	; (803c618 <SIMCOM_DMA_IrqHandler+0xac0>)
 803c45a:	429a      	cmp	r2, r3
 803c45c:	d960      	bls.n	803c520 <SIMCOM_DMA_IrqHandler+0x9c8>
 803c45e:	4b5f      	ldr	r3, [pc, #380]	; (803c5dc <SIMCOM_DMA_IrqHandler+0xa84>)
 803c460:	681b      	ldr	r3, [r3, #0]
 803c462:	4a60      	ldr	r2, [pc, #384]	; (803c5e4 <SIMCOM_DMA_IrqHandler+0xa8c>)
 803c464:	4293      	cmp	r3, r2
 803c466:	d057      	beq.n	803c518 <SIMCOM_DMA_IrqHandler+0x9c0>
 803c468:	4b5c      	ldr	r3, [pc, #368]	; (803c5dc <SIMCOM_DMA_IrqHandler+0xa84>)
 803c46a:	681b      	ldr	r3, [r3, #0]
 803c46c:	4a5e      	ldr	r2, [pc, #376]	; (803c5e8 <SIMCOM_DMA_IrqHandler+0xa90>)
 803c46e:	4293      	cmp	r3, r2
 803c470:	d050      	beq.n	803c514 <SIMCOM_DMA_IrqHandler+0x9bc>
 803c472:	4b5a      	ldr	r3, [pc, #360]	; (803c5dc <SIMCOM_DMA_IrqHandler+0xa84>)
 803c474:	681b      	ldr	r3, [r3, #0]
 803c476:	4a5d      	ldr	r2, [pc, #372]	; (803c5ec <SIMCOM_DMA_IrqHandler+0xa94>)
 803c478:	4293      	cmp	r3, r2
 803c47a:	d049      	beq.n	803c510 <SIMCOM_DMA_IrqHandler+0x9b8>
 803c47c:	4b57      	ldr	r3, [pc, #348]	; (803c5dc <SIMCOM_DMA_IrqHandler+0xa84>)
 803c47e:	681b      	ldr	r3, [r3, #0]
 803c480:	4a5b      	ldr	r2, [pc, #364]	; (803c5f0 <SIMCOM_DMA_IrqHandler+0xa98>)
 803c482:	4293      	cmp	r3, r2
 803c484:	d042      	beq.n	803c50c <SIMCOM_DMA_IrqHandler+0x9b4>
 803c486:	4b55      	ldr	r3, [pc, #340]	; (803c5dc <SIMCOM_DMA_IrqHandler+0xa84>)
 803c488:	681b      	ldr	r3, [r3, #0]
 803c48a:	4a5a      	ldr	r2, [pc, #360]	; (803c5f4 <SIMCOM_DMA_IrqHandler+0xa9c>)
 803c48c:	4293      	cmp	r3, r2
 803c48e:	d03a      	beq.n	803c506 <SIMCOM_DMA_IrqHandler+0x9ae>
 803c490:	4b52      	ldr	r3, [pc, #328]	; (803c5dc <SIMCOM_DMA_IrqHandler+0xa84>)
 803c492:	681b      	ldr	r3, [r3, #0]
 803c494:	4a58      	ldr	r2, [pc, #352]	; (803c5f8 <SIMCOM_DMA_IrqHandler+0xaa0>)
 803c496:	4293      	cmp	r3, r2
 803c498:	d032      	beq.n	803c500 <SIMCOM_DMA_IrqHandler+0x9a8>
 803c49a:	4b50      	ldr	r3, [pc, #320]	; (803c5dc <SIMCOM_DMA_IrqHandler+0xa84>)
 803c49c:	681b      	ldr	r3, [r3, #0]
 803c49e:	4a57      	ldr	r2, [pc, #348]	; (803c5fc <SIMCOM_DMA_IrqHandler+0xaa4>)
 803c4a0:	4293      	cmp	r3, r2
 803c4a2:	d02a      	beq.n	803c4fa <SIMCOM_DMA_IrqHandler+0x9a2>
 803c4a4:	4b4d      	ldr	r3, [pc, #308]	; (803c5dc <SIMCOM_DMA_IrqHandler+0xa84>)
 803c4a6:	681b      	ldr	r3, [r3, #0]
 803c4a8:	4a55      	ldr	r2, [pc, #340]	; (803c600 <SIMCOM_DMA_IrqHandler+0xaa8>)
 803c4aa:	4293      	cmp	r3, r2
 803c4ac:	d022      	beq.n	803c4f4 <SIMCOM_DMA_IrqHandler+0x99c>
 803c4ae:	4b4b      	ldr	r3, [pc, #300]	; (803c5dc <SIMCOM_DMA_IrqHandler+0xa84>)
 803c4b0:	681b      	ldr	r3, [r3, #0]
 803c4b2:	4a54      	ldr	r2, [pc, #336]	; (803c604 <SIMCOM_DMA_IrqHandler+0xaac>)
 803c4b4:	4293      	cmp	r3, r2
 803c4b6:	d01a      	beq.n	803c4ee <SIMCOM_DMA_IrqHandler+0x996>
 803c4b8:	4b48      	ldr	r3, [pc, #288]	; (803c5dc <SIMCOM_DMA_IrqHandler+0xa84>)
 803c4ba:	681b      	ldr	r3, [r3, #0]
 803c4bc:	4a52      	ldr	r2, [pc, #328]	; (803c608 <SIMCOM_DMA_IrqHandler+0xab0>)
 803c4be:	4293      	cmp	r3, r2
 803c4c0:	d012      	beq.n	803c4e8 <SIMCOM_DMA_IrqHandler+0x990>
 803c4c2:	4b46      	ldr	r3, [pc, #280]	; (803c5dc <SIMCOM_DMA_IrqHandler+0xa84>)
 803c4c4:	681b      	ldr	r3, [r3, #0]
 803c4c6:	4a51      	ldr	r2, [pc, #324]	; (803c60c <SIMCOM_DMA_IrqHandler+0xab4>)
 803c4c8:	4293      	cmp	r3, r2
 803c4ca:	d00a      	beq.n	803c4e2 <SIMCOM_DMA_IrqHandler+0x98a>
 803c4cc:	4b43      	ldr	r3, [pc, #268]	; (803c5dc <SIMCOM_DMA_IrqHandler+0xa84>)
 803c4ce:	681b      	ldr	r3, [r3, #0]
 803c4d0:	4a4f      	ldr	r2, [pc, #316]	; (803c610 <SIMCOM_DMA_IrqHandler+0xab8>)
 803c4d2:	4293      	cmp	r3, r2
 803c4d4:	d102      	bne.n	803c4dc <SIMCOM_DMA_IrqHandler+0x984>
 803c4d6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 803c4da:	e01e      	b.n	803c51a <SIMCOM_DMA_IrqHandler+0x9c2>
 803c4dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 803c4e0:	e01b      	b.n	803c51a <SIMCOM_DMA_IrqHandler+0x9c2>
 803c4e2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 803c4e6:	e018      	b.n	803c51a <SIMCOM_DMA_IrqHandler+0x9c2>
 803c4e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 803c4ec:	e015      	b.n	803c51a <SIMCOM_DMA_IrqHandler+0x9c2>
 803c4ee:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 803c4f2:	e012      	b.n	803c51a <SIMCOM_DMA_IrqHandler+0x9c2>
 803c4f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 803c4f8:	e00f      	b.n	803c51a <SIMCOM_DMA_IrqHandler+0x9c2>
 803c4fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 803c4fe:	e00c      	b.n	803c51a <SIMCOM_DMA_IrqHandler+0x9c2>
 803c500:	f44f 7300 	mov.w	r3, #512	; 0x200
 803c504:	e009      	b.n	803c51a <SIMCOM_DMA_IrqHandler+0x9c2>
 803c506:	f44f 7300 	mov.w	r3, #512	; 0x200
 803c50a:	e006      	b.n	803c51a <SIMCOM_DMA_IrqHandler+0x9c2>
 803c50c:	2308      	movs	r3, #8
 803c50e:	e004      	b.n	803c51a <SIMCOM_DMA_IrqHandler+0x9c2>
 803c510:	2308      	movs	r3, #8
 803c512:	e002      	b.n	803c51a <SIMCOM_DMA_IrqHandler+0x9c2>
 803c514:	2308      	movs	r3, #8
 803c516:	e000      	b.n	803c51a <SIMCOM_DMA_IrqHandler+0x9c2>
 803c518:	2308      	movs	r3, #8
 803c51a:	4a40      	ldr	r2, [pc, #256]	; (803c61c <SIMCOM_DMA_IrqHandler+0xac4>)
 803c51c:	60d3      	str	r3, [r2, #12]
 803c51e:	e082      	b.n	803c626 <SIMCOM_DMA_IrqHandler+0xace>
 803c520:	4b2e      	ldr	r3, [pc, #184]	; (803c5dc <SIMCOM_DMA_IrqHandler+0xa84>)
 803c522:	681b      	ldr	r3, [r3, #0]
 803c524:	4a2f      	ldr	r2, [pc, #188]	; (803c5e4 <SIMCOM_DMA_IrqHandler+0xa8c>)
 803c526:	4293      	cmp	r3, r2
 803c528:	d07a      	beq.n	803c620 <SIMCOM_DMA_IrqHandler+0xac8>
 803c52a:	4b2c      	ldr	r3, [pc, #176]	; (803c5dc <SIMCOM_DMA_IrqHandler+0xa84>)
 803c52c:	681b      	ldr	r3, [r3, #0]
 803c52e:	4a2e      	ldr	r2, [pc, #184]	; (803c5e8 <SIMCOM_DMA_IrqHandler+0xa90>)
 803c530:	4293      	cmp	r3, r2
 803c532:	d050      	beq.n	803c5d6 <SIMCOM_DMA_IrqHandler+0xa7e>
 803c534:	4b29      	ldr	r3, [pc, #164]	; (803c5dc <SIMCOM_DMA_IrqHandler+0xa84>)
 803c536:	681b      	ldr	r3, [r3, #0]
 803c538:	4a2c      	ldr	r2, [pc, #176]	; (803c5ec <SIMCOM_DMA_IrqHandler+0xa94>)
 803c53a:	4293      	cmp	r3, r2
 803c53c:	d049      	beq.n	803c5d2 <SIMCOM_DMA_IrqHandler+0xa7a>
 803c53e:	4b27      	ldr	r3, [pc, #156]	; (803c5dc <SIMCOM_DMA_IrqHandler+0xa84>)
 803c540:	681b      	ldr	r3, [r3, #0]
 803c542:	4a2b      	ldr	r2, [pc, #172]	; (803c5f0 <SIMCOM_DMA_IrqHandler+0xa98>)
 803c544:	4293      	cmp	r3, r2
 803c546:	d042      	beq.n	803c5ce <SIMCOM_DMA_IrqHandler+0xa76>
 803c548:	4b24      	ldr	r3, [pc, #144]	; (803c5dc <SIMCOM_DMA_IrqHandler+0xa84>)
 803c54a:	681b      	ldr	r3, [r3, #0]
 803c54c:	4a29      	ldr	r2, [pc, #164]	; (803c5f4 <SIMCOM_DMA_IrqHandler+0xa9c>)
 803c54e:	4293      	cmp	r3, r2
 803c550:	d03a      	beq.n	803c5c8 <SIMCOM_DMA_IrqHandler+0xa70>
 803c552:	4b22      	ldr	r3, [pc, #136]	; (803c5dc <SIMCOM_DMA_IrqHandler+0xa84>)
 803c554:	681b      	ldr	r3, [r3, #0]
 803c556:	4a28      	ldr	r2, [pc, #160]	; (803c5f8 <SIMCOM_DMA_IrqHandler+0xaa0>)
 803c558:	4293      	cmp	r3, r2
 803c55a:	d032      	beq.n	803c5c2 <SIMCOM_DMA_IrqHandler+0xa6a>
 803c55c:	4b1f      	ldr	r3, [pc, #124]	; (803c5dc <SIMCOM_DMA_IrqHandler+0xa84>)
 803c55e:	681b      	ldr	r3, [r3, #0]
 803c560:	4a26      	ldr	r2, [pc, #152]	; (803c5fc <SIMCOM_DMA_IrqHandler+0xaa4>)
 803c562:	4293      	cmp	r3, r2
 803c564:	d02a      	beq.n	803c5bc <SIMCOM_DMA_IrqHandler+0xa64>
 803c566:	4b1d      	ldr	r3, [pc, #116]	; (803c5dc <SIMCOM_DMA_IrqHandler+0xa84>)
 803c568:	681b      	ldr	r3, [r3, #0]
 803c56a:	4a25      	ldr	r2, [pc, #148]	; (803c600 <SIMCOM_DMA_IrqHandler+0xaa8>)
 803c56c:	4293      	cmp	r3, r2
 803c56e:	d022      	beq.n	803c5b6 <SIMCOM_DMA_IrqHandler+0xa5e>
 803c570:	4b1a      	ldr	r3, [pc, #104]	; (803c5dc <SIMCOM_DMA_IrqHandler+0xa84>)
 803c572:	681b      	ldr	r3, [r3, #0]
 803c574:	4a23      	ldr	r2, [pc, #140]	; (803c604 <SIMCOM_DMA_IrqHandler+0xaac>)
 803c576:	4293      	cmp	r3, r2
 803c578:	d01a      	beq.n	803c5b0 <SIMCOM_DMA_IrqHandler+0xa58>
 803c57a:	4b18      	ldr	r3, [pc, #96]	; (803c5dc <SIMCOM_DMA_IrqHandler+0xa84>)
 803c57c:	681b      	ldr	r3, [r3, #0]
 803c57e:	4a22      	ldr	r2, [pc, #136]	; (803c608 <SIMCOM_DMA_IrqHandler+0xab0>)
 803c580:	4293      	cmp	r3, r2
 803c582:	d012      	beq.n	803c5aa <SIMCOM_DMA_IrqHandler+0xa52>
 803c584:	4b15      	ldr	r3, [pc, #84]	; (803c5dc <SIMCOM_DMA_IrqHandler+0xa84>)
 803c586:	681b      	ldr	r3, [r3, #0]
 803c588:	4a20      	ldr	r2, [pc, #128]	; (803c60c <SIMCOM_DMA_IrqHandler+0xab4>)
 803c58a:	4293      	cmp	r3, r2
 803c58c:	d00a      	beq.n	803c5a4 <SIMCOM_DMA_IrqHandler+0xa4c>
 803c58e:	4b13      	ldr	r3, [pc, #76]	; (803c5dc <SIMCOM_DMA_IrqHandler+0xa84>)
 803c590:	681b      	ldr	r3, [r3, #0]
 803c592:	4a1f      	ldr	r2, [pc, #124]	; (803c610 <SIMCOM_DMA_IrqHandler+0xab8>)
 803c594:	4293      	cmp	r3, r2
 803c596:	d102      	bne.n	803c59e <SIMCOM_DMA_IrqHandler+0xa46>
 803c598:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 803c59c:	e041      	b.n	803c622 <SIMCOM_DMA_IrqHandler+0xaca>
 803c59e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 803c5a2:	e03e      	b.n	803c622 <SIMCOM_DMA_IrqHandler+0xaca>
 803c5a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 803c5a8:	e03b      	b.n	803c622 <SIMCOM_DMA_IrqHandler+0xaca>
 803c5aa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 803c5ae:	e038      	b.n	803c622 <SIMCOM_DMA_IrqHandler+0xaca>
 803c5b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 803c5b4:	e035      	b.n	803c622 <SIMCOM_DMA_IrqHandler+0xaca>
 803c5b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 803c5ba:	e032      	b.n	803c622 <SIMCOM_DMA_IrqHandler+0xaca>
 803c5bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 803c5c0:	e02f      	b.n	803c622 <SIMCOM_DMA_IrqHandler+0xaca>
 803c5c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 803c5c6:	e02c      	b.n	803c622 <SIMCOM_DMA_IrqHandler+0xaca>
 803c5c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 803c5cc:	e029      	b.n	803c622 <SIMCOM_DMA_IrqHandler+0xaca>
 803c5ce:	2308      	movs	r3, #8
 803c5d0:	e027      	b.n	803c622 <SIMCOM_DMA_IrqHandler+0xaca>
 803c5d2:	2308      	movs	r3, #8
 803c5d4:	e025      	b.n	803c622 <SIMCOM_DMA_IrqHandler+0xaca>
 803c5d6:	2308      	movs	r3, #8
 803c5d8:	e023      	b.n	803c622 <SIMCOM_DMA_IrqHandler+0xaca>
 803c5da:	bf00      	nop
 803c5dc:	20008700 	.word	0x20008700
 803c5e0:	400260b8 	.word	0x400260b8
 803c5e4:	40026010 	.word	0x40026010
 803c5e8:	40026410 	.word	0x40026410
 803c5ec:	40026070 	.word	0x40026070
 803c5f0:	40026470 	.word	0x40026470
 803c5f4:	40026028 	.word	0x40026028
 803c5f8:	40026428 	.word	0x40026428
 803c5fc:	40026088 	.word	0x40026088
 803c600:	40026488 	.word	0x40026488
 803c604:	40026040 	.word	0x40026040
 803c608:	40026440 	.word	0x40026440
 803c60c:	400260a0 	.word	0x400260a0
 803c610:	400264a0 	.word	0x400264a0
 803c614:	40026400 	.word	0x40026400
 803c618:	40026058 	.word	0x40026058
 803c61c:	40026000 	.word	0x40026000
 803c620:	2308      	movs	r3, #8
 803c622:	4a96      	ldr	r2, [pc, #600]	; (803c87c <SIMCOM_DMA_IrqHandler+0xd24>)
 803c624:	6093      	str	r3, [r2, #8]
        __HAL_DMA_CLEAR_FLAG(&hdma_usart1_rx, __HAL_DMA_GET_FE_FLAG_INDEX(&hdma_usart1_rx));
 803c626:	4b96      	ldr	r3, [pc, #600]	; (803c880 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c628:	681b      	ldr	r3, [r3, #0]
 803c62a:	461a      	mov	r2, r3
 803c62c:	4b95      	ldr	r3, [pc, #596]	; (803c884 <SIMCOM_DMA_IrqHandler+0xd2c>)
 803c62e:	429a      	cmp	r2, r3
 803c630:	d95c      	bls.n	803c6ec <SIMCOM_DMA_IrqHandler+0xb94>
 803c632:	4b93      	ldr	r3, [pc, #588]	; (803c880 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c634:	681b      	ldr	r3, [r3, #0]
 803c636:	4a94      	ldr	r2, [pc, #592]	; (803c888 <SIMCOM_DMA_IrqHandler+0xd30>)
 803c638:	4293      	cmp	r3, r2
 803c63a:	d053      	beq.n	803c6e4 <SIMCOM_DMA_IrqHandler+0xb8c>
 803c63c:	4b90      	ldr	r3, [pc, #576]	; (803c880 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c63e:	681b      	ldr	r3, [r3, #0]
 803c640:	4a92      	ldr	r2, [pc, #584]	; (803c88c <SIMCOM_DMA_IrqHandler+0xd34>)
 803c642:	4293      	cmp	r3, r2
 803c644:	d04c      	beq.n	803c6e0 <SIMCOM_DMA_IrqHandler+0xb88>
 803c646:	4b8e      	ldr	r3, [pc, #568]	; (803c880 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c648:	681b      	ldr	r3, [r3, #0]
 803c64a:	4a91      	ldr	r2, [pc, #580]	; (803c890 <SIMCOM_DMA_IrqHandler+0xd38>)
 803c64c:	4293      	cmp	r3, r2
 803c64e:	d045      	beq.n	803c6dc <SIMCOM_DMA_IrqHandler+0xb84>
 803c650:	4b8b      	ldr	r3, [pc, #556]	; (803c880 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c652:	681b      	ldr	r3, [r3, #0]
 803c654:	4a8f      	ldr	r2, [pc, #572]	; (803c894 <SIMCOM_DMA_IrqHandler+0xd3c>)
 803c656:	4293      	cmp	r3, r2
 803c658:	d03e      	beq.n	803c6d8 <SIMCOM_DMA_IrqHandler+0xb80>
 803c65a:	4b89      	ldr	r3, [pc, #548]	; (803c880 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c65c:	681b      	ldr	r3, [r3, #0]
 803c65e:	4a8e      	ldr	r2, [pc, #568]	; (803c898 <SIMCOM_DMA_IrqHandler+0xd40>)
 803c660:	4293      	cmp	r3, r2
 803c662:	d037      	beq.n	803c6d4 <SIMCOM_DMA_IrqHandler+0xb7c>
 803c664:	4b86      	ldr	r3, [pc, #536]	; (803c880 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c666:	681b      	ldr	r3, [r3, #0]
 803c668:	4a8c      	ldr	r2, [pc, #560]	; (803c89c <SIMCOM_DMA_IrqHandler+0xd44>)
 803c66a:	4293      	cmp	r3, r2
 803c66c:	d030      	beq.n	803c6d0 <SIMCOM_DMA_IrqHandler+0xb78>
 803c66e:	4b84      	ldr	r3, [pc, #528]	; (803c880 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c670:	681b      	ldr	r3, [r3, #0]
 803c672:	4a8b      	ldr	r2, [pc, #556]	; (803c8a0 <SIMCOM_DMA_IrqHandler+0xd48>)
 803c674:	4293      	cmp	r3, r2
 803c676:	d029      	beq.n	803c6cc <SIMCOM_DMA_IrqHandler+0xb74>
 803c678:	4b81      	ldr	r3, [pc, #516]	; (803c880 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c67a:	681b      	ldr	r3, [r3, #0]
 803c67c:	4a89      	ldr	r2, [pc, #548]	; (803c8a4 <SIMCOM_DMA_IrqHandler+0xd4c>)
 803c67e:	4293      	cmp	r3, r2
 803c680:	d022      	beq.n	803c6c8 <SIMCOM_DMA_IrqHandler+0xb70>
 803c682:	4b7f      	ldr	r3, [pc, #508]	; (803c880 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c684:	681b      	ldr	r3, [r3, #0]
 803c686:	4a88      	ldr	r2, [pc, #544]	; (803c8a8 <SIMCOM_DMA_IrqHandler+0xd50>)
 803c688:	4293      	cmp	r3, r2
 803c68a:	d01a      	beq.n	803c6c2 <SIMCOM_DMA_IrqHandler+0xb6a>
 803c68c:	4b7c      	ldr	r3, [pc, #496]	; (803c880 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c68e:	681b      	ldr	r3, [r3, #0]
 803c690:	4a86      	ldr	r2, [pc, #536]	; (803c8ac <SIMCOM_DMA_IrqHandler+0xd54>)
 803c692:	4293      	cmp	r3, r2
 803c694:	d012      	beq.n	803c6bc <SIMCOM_DMA_IrqHandler+0xb64>
 803c696:	4b7a      	ldr	r3, [pc, #488]	; (803c880 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c698:	681b      	ldr	r3, [r3, #0]
 803c69a:	4a85      	ldr	r2, [pc, #532]	; (803c8b0 <SIMCOM_DMA_IrqHandler+0xd58>)
 803c69c:	4293      	cmp	r3, r2
 803c69e:	d00a      	beq.n	803c6b6 <SIMCOM_DMA_IrqHandler+0xb5e>
 803c6a0:	4b77      	ldr	r3, [pc, #476]	; (803c880 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c6a2:	681b      	ldr	r3, [r3, #0]
 803c6a4:	4a83      	ldr	r2, [pc, #524]	; (803c8b4 <SIMCOM_DMA_IrqHandler+0xd5c>)
 803c6a6:	4293      	cmp	r3, r2
 803c6a8:	d102      	bne.n	803c6b0 <SIMCOM_DMA_IrqHandler+0xb58>
 803c6aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 803c6ae:	e01a      	b.n	803c6e6 <SIMCOM_DMA_IrqHandler+0xb8e>
 803c6b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 803c6b4:	e017      	b.n	803c6e6 <SIMCOM_DMA_IrqHandler+0xb8e>
 803c6b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 803c6ba:	e014      	b.n	803c6e6 <SIMCOM_DMA_IrqHandler+0xb8e>
 803c6bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 803c6c0:	e011      	b.n	803c6e6 <SIMCOM_DMA_IrqHandler+0xb8e>
 803c6c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 803c6c6:	e00e      	b.n	803c6e6 <SIMCOM_DMA_IrqHandler+0xb8e>
 803c6c8:	2340      	movs	r3, #64	; 0x40
 803c6ca:	e00c      	b.n	803c6e6 <SIMCOM_DMA_IrqHandler+0xb8e>
 803c6cc:	2340      	movs	r3, #64	; 0x40
 803c6ce:	e00a      	b.n	803c6e6 <SIMCOM_DMA_IrqHandler+0xb8e>
 803c6d0:	2340      	movs	r3, #64	; 0x40
 803c6d2:	e008      	b.n	803c6e6 <SIMCOM_DMA_IrqHandler+0xb8e>
 803c6d4:	2340      	movs	r3, #64	; 0x40
 803c6d6:	e006      	b.n	803c6e6 <SIMCOM_DMA_IrqHandler+0xb8e>
 803c6d8:	2301      	movs	r3, #1
 803c6da:	e004      	b.n	803c6e6 <SIMCOM_DMA_IrqHandler+0xb8e>
 803c6dc:	2301      	movs	r3, #1
 803c6de:	e002      	b.n	803c6e6 <SIMCOM_DMA_IrqHandler+0xb8e>
 803c6e0:	2301      	movs	r3, #1
 803c6e2:	e000      	b.n	803c6e6 <SIMCOM_DMA_IrqHandler+0xb8e>
 803c6e4:	2301      	movs	r3, #1
 803c6e6:	4a74      	ldr	r2, [pc, #464]	; (803c8b8 <SIMCOM_DMA_IrqHandler+0xd60>)
 803c6e8:	60d3      	str	r3, [r2, #12]
 803c6ea:	e147      	b.n	803c97c <SIMCOM_DMA_IrqHandler+0xe24>
 803c6ec:	4b64      	ldr	r3, [pc, #400]	; (803c880 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c6ee:	681b      	ldr	r3, [r3, #0]
 803c6f0:	461a      	mov	r2, r3
 803c6f2:	4b72      	ldr	r3, [pc, #456]	; (803c8bc <SIMCOM_DMA_IrqHandler+0xd64>)
 803c6f4:	429a      	cmp	r2, r3
 803c6f6:	d95c      	bls.n	803c7b2 <SIMCOM_DMA_IrqHandler+0xc5a>
 803c6f8:	4b61      	ldr	r3, [pc, #388]	; (803c880 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c6fa:	681b      	ldr	r3, [r3, #0]
 803c6fc:	4a62      	ldr	r2, [pc, #392]	; (803c888 <SIMCOM_DMA_IrqHandler+0xd30>)
 803c6fe:	4293      	cmp	r3, r2
 803c700:	d053      	beq.n	803c7aa <SIMCOM_DMA_IrqHandler+0xc52>
 803c702:	4b5f      	ldr	r3, [pc, #380]	; (803c880 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c704:	681b      	ldr	r3, [r3, #0]
 803c706:	4a61      	ldr	r2, [pc, #388]	; (803c88c <SIMCOM_DMA_IrqHandler+0xd34>)
 803c708:	4293      	cmp	r3, r2
 803c70a:	d04c      	beq.n	803c7a6 <SIMCOM_DMA_IrqHandler+0xc4e>
 803c70c:	4b5c      	ldr	r3, [pc, #368]	; (803c880 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c70e:	681b      	ldr	r3, [r3, #0]
 803c710:	4a5f      	ldr	r2, [pc, #380]	; (803c890 <SIMCOM_DMA_IrqHandler+0xd38>)
 803c712:	4293      	cmp	r3, r2
 803c714:	d045      	beq.n	803c7a2 <SIMCOM_DMA_IrqHandler+0xc4a>
 803c716:	4b5a      	ldr	r3, [pc, #360]	; (803c880 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c718:	681b      	ldr	r3, [r3, #0]
 803c71a:	4a5e      	ldr	r2, [pc, #376]	; (803c894 <SIMCOM_DMA_IrqHandler+0xd3c>)
 803c71c:	4293      	cmp	r3, r2
 803c71e:	d03e      	beq.n	803c79e <SIMCOM_DMA_IrqHandler+0xc46>
 803c720:	4b57      	ldr	r3, [pc, #348]	; (803c880 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c722:	681b      	ldr	r3, [r3, #0]
 803c724:	4a5c      	ldr	r2, [pc, #368]	; (803c898 <SIMCOM_DMA_IrqHandler+0xd40>)
 803c726:	4293      	cmp	r3, r2
 803c728:	d037      	beq.n	803c79a <SIMCOM_DMA_IrqHandler+0xc42>
 803c72a:	4b55      	ldr	r3, [pc, #340]	; (803c880 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c72c:	681b      	ldr	r3, [r3, #0]
 803c72e:	4a5b      	ldr	r2, [pc, #364]	; (803c89c <SIMCOM_DMA_IrqHandler+0xd44>)
 803c730:	4293      	cmp	r3, r2
 803c732:	d030      	beq.n	803c796 <SIMCOM_DMA_IrqHandler+0xc3e>
 803c734:	4b52      	ldr	r3, [pc, #328]	; (803c880 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c736:	681b      	ldr	r3, [r3, #0]
 803c738:	4a59      	ldr	r2, [pc, #356]	; (803c8a0 <SIMCOM_DMA_IrqHandler+0xd48>)
 803c73a:	4293      	cmp	r3, r2
 803c73c:	d029      	beq.n	803c792 <SIMCOM_DMA_IrqHandler+0xc3a>
 803c73e:	4b50      	ldr	r3, [pc, #320]	; (803c880 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c740:	681b      	ldr	r3, [r3, #0]
 803c742:	4a58      	ldr	r2, [pc, #352]	; (803c8a4 <SIMCOM_DMA_IrqHandler+0xd4c>)
 803c744:	4293      	cmp	r3, r2
 803c746:	d022      	beq.n	803c78e <SIMCOM_DMA_IrqHandler+0xc36>
 803c748:	4b4d      	ldr	r3, [pc, #308]	; (803c880 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c74a:	681b      	ldr	r3, [r3, #0]
 803c74c:	4a56      	ldr	r2, [pc, #344]	; (803c8a8 <SIMCOM_DMA_IrqHandler+0xd50>)
 803c74e:	4293      	cmp	r3, r2
 803c750:	d01a      	beq.n	803c788 <SIMCOM_DMA_IrqHandler+0xc30>
 803c752:	4b4b      	ldr	r3, [pc, #300]	; (803c880 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c754:	681b      	ldr	r3, [r3, #0]
 803c756:	4a55      	ldr	r2, [pc, #340]	; (803c8ac <SIMCOM_DMA_IrqHandler+0xd54>)
 803c758:	4293      	cmp	r3, r2
 803c75a:	d012      	beq.n	803c782 <SIMCOM_DMA_IrqHandler+0xc2a>
 803c75c:	4b48      	ldr	r3, [pc, #288]	; (803c880 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c75e:	681b      	ldr	r3, [r3, #0]
 803c760:	4a53      	ldr	r2, [pc, #332]	; (803c8b0 <SIMCOM_DMA_IrqHandler+0xd58>)
 803c762:	4293      	cmp	r3, r2
 803c764:	d00a      	beq.n	803c77c <SIMCOM_DMA_IrqHandler+0xc24>
 803c766:	4b46      	ldr	r3, [pc, #280]	; (803c880 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c768:	681b      	ldr	r3, [r3, #0]
 803c76a:	4a52      	ldr	r2, [pc, #328]	; (803c8b4 <SIMCOM_DMA_IrqHandler+0xd5c>)
 803c76c:	4293      	cmp	r3, r2
 803c76e:	d102      	bne.n	803c776 <SIMCOM_DMA_IrqHandler+0xc1e>
 803c770:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 803c774:	e01a      	b.n	803c7ac <SIMCOM_DMA_IrqHandler+0xc54>
 803c776:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 803c77a:	e017      	b.n	803c7ac <SIMCOM_DMA_IrqHandler+0xc54>
 803c77c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 803c780:	e014      	b.n	803c7ac <SIMCOM_DMA_IrqHandler+0xc54>
 803c782:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 803c786:	e011      	b.n	803c7ac <SIMCOM_DMA_IrqHandler+0xc54>
 803c788:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 803c78c:	e00e      	b.n	803c7ac <SIMCOM_DMA_IrqHandler+0xc54>
 803c78e:	2340      	movs	r3, #64	; 0x40
 803c790:	e00c      	b.n	803c7ac <SIMCOM_DMA_IrqHandler+0xc54>
 803c792:	2340      	movs	r3, #64	; 0x40
 803c794:	e00a      	b.n	803c7ac <SIMCOM_DMA_IrqHandler+0xc54>
 803c796:	2340      	movs	r3, #64	; 0x40
 803c798:	e008      	b.n	803c7ac <SIMCOM_DMA_IrqHandler+0xc54>
 803c79a:	2340      	movs	r3, #64	; 0x40
 803c79c:	e006      	b.n	803c7ac <SIMCOM_DMA_IrqHandler+0xc54>
 803c79e:	2301      	movs	r3, #1
 803c7a0:	e004      	b.n	803c7ac <SIMCOM_DMA_IrqHandler+0xc54>
 803c7a2:	2301      	movs	r3, #1
 803c7a4:	e002      	b.n	803c7ac <SIMCOM_DMA_IrqHandler+0xc54>
 803c7a6:	2301      	movs	r3, #1
 803c7a8:	e000      	b.n	803c7ac <SIMCOM_DMA_IrqHandler+0xc54>
 803c7aa:	2301      	movs	r3, #1
 803c7ac:	4a42      	ldr	r2, [pc, #264]	; (803c8b8 <SIMCOM_DMA_IrqHandler+0xd60>)
 803c7ae:	6093      	str	r3, [r2, #8]
 803c7b0:	e0e4      	b.n	803c97c <SIMCOM_DMA_IrqHandler+0xe24>
 803c7b2:	4b33      	ldr	r3, [pc, #204]	; (803c880 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c7b4:	681b      	ldr	r3, [r3, #0]
 803c7b6:	461a      	mov	r2, r3
 803c7b8:	4b41      	ldr	r3, [pc, #260]	; (803c8c0 <SIMCOM_DMA_IrqHandler+0xd68>)
 803c7ba:	429a      	cmp	r2, r3
 803c7bc:	f240 8082 	bls.w	803c8c4 <SIMCOM_DMA_IrqHandler+0xd6c>
 803c7c0:	4b2f      	ldr	r3, [pc, #188]	; (803c880 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c7c2:	681b      	ldr	r3, [r3, #0]
 803c7c4:	4a30      	ldr	r2, [pc, #192]	; (803c888 <SIMCOM_DMA_IrqHandler+0xd30>)
 803c7c6:	4293      	cmp	r3, r2
 803c7c8:	d053      	beq.n	803c872 <SIMCOM_DMA_IrqHandler+0xd1a>
 803c7ca:	4b2d      	ldr	r3, [pc, #180]	; (803c880 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c7cc:	681b      	ldr	r3, [r3, #0]
 803c7ce:	4a2f      	ldr	r2, [pc, #188]	; (803c88c <SIMCOM_DMA_IrqHandler+0xd34>)
 803c7d0:	4293      	cmp	r3, r2
 803c7d2:	d04c      	beq.n	803c86e <SIMCOM_DMA_IrqHandler+0xd16>
 803c7d4:	4b2a      	ldr	r3, [pc, #168]	; (803c880 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c7d6:	681b      	ldr	r3, [r3, #0]
 803c7d8:	4a2d      	ldr	r2, [pc, #180]	; (803c890 <SIMCOM_DMA_IrqHandler+0xd38>)
 803c7da:	4293      	cmp	r3, r2
 803c7dc:	d045      	beq.n	803c86a <SIMCOM_DMA_IrqHandler+0xd12>
 803c7de:	4b28      	ldr	r3, [pc, #160]	; (803c880 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c7e0:	681b      	ldr	r3, [r3, #0]
 803c7e2:	4a2c      	ldr	r2, [pc, #176]	; (803c894 <SIMCOM_DMA_IrqHandler+0xd3c>)
 803c7e4:	4293      	cmp	r3, r2
 803c7e6:	d03e      	beq.n	803c866 <SIMCOM_DMA_IrqHandler+0xd0e>
 803c7e8:	4b25      	ldr	r3, [pc, #148]	; (803c880 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c7ea:	681b      	ldr	r3, [r3, #0]
 803c7ec:	4a2a      	ldr	r2, [pc, #168]	; (803c898 <SIMCOM_DMA_IrqHandler+0xd40>)
 803c7ee:	4293      	cmp	r3, r2
 803c7f0:	d037      	beq.n	803c862 <SIMCOM_DMA_IrqHandler+0xd0a>
 803c7f2:	4b23      	ldr	r3, [pc, #140]	; (803c880 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c7f4:	681b      	ldr	r3, [r3, #0]
 803c7f6:	4a29      	ldr	r2, [pc, #164]	; (803c89c <SIMCOM_DMA_IrqHandler+0xd44>)
 803c7f8:	4293      	cmp	r3, r2
 803c7fa:	d030      	beq.n	803c85e <SIMCOM_DMA_IrqHandler+0xd06>
 803c7fc:	4b20      	ldr	r3, [pc, #128]	; (803c880 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c7fe:	681b      	ldr	r3, [r3, #0]
 803c800:	4a27      	ldr	r2, [pc, #156]	; (803c8a0 <SIMCOM_DMA_IrqHandler+0xd48>)
 803c802:	4293      	cmp	r3, r2
 803c804:	d029      	beq.n	803c85a <SIMCOM_DMA_IrqHandler+0xd02>
 803c806:	4b1e      	ldr	r3, [pc, #120]	; (803c880 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c808:	681b      	ldr	r3, [r3, #0]
 803c80a:	4a26      	ldr	r2, [pc, #152]	; (803c8a4 <SIMCOM_DMA_IrqHandler+0xd4c>)
 803c80c:	4293      	cmp	r3, r2
 803c80e:	d022      	beq.n	803c856 <SIMCOM_DMA_IrqHandler+0xcfe>
 803c810:	4b1b      	ldr	r3, [pc, #108]	; (803c880 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c812:	681b      	ldr	r3, [r3, #0]
 803c814:	4a24      	ldr	r2, [pc, #144]	; (803c8a8 <SIMCOM_DMA_IrqHandler+0xd50>)
 803c816:	4293      	cmp	r3, r2
 803c818:	d01a      	beq.n	803c850 <SIMCOM_DMA_IrqHandler+0xcf8>
 803c81a:	4b19      	ldr	r3, [pc, #100]	; (803c880 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c81c:	681b      	ldr	r3, [r3, #0]
 803c81e:	4a23      	ldr	r2, [pc, #140]	; (803c8ac <SIMCOM_DMA_IrqHandler+0xd54>)
 803c820:	4293      	cmp	r3, r2
 803c822:	d012      	beq.n	803c84a <SIMCOM_DMA_IrqHandler+0xcf2>
 803c824:	4b16      	ldr	r3, [pc, #88]	; (803c880 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c826:	681b      	ldr	r3, [r3, #0]
 803c828:	4a21      	ldr	r2, [pc, #132]	; (803c8b0 <SIMCOM_DMA_IrqHandler+0xd58>)
 803c82a:	4293      	cmp	r3, r2
 803c82c:	d00a      	beq.n	803c844 <SIMCOM_DMA_IrqHandler+0xcec>
 803c82e:	4b14      	ldr	r3, [pc, #80]	; (803c880 <SIMCOM_DMA_IrqHandler+0xd28>)
 803c830:	681b      	ldr	r3, [r3, #0]
 803c832:	4a20      	ldr	r2, [pc, #128]	; (803c8b4 <SIMCOM_DMA_IrqHandler+0xd5c>)
 803c834:	4293      	cmp	r3, r2
 803c836:	d102      	bne.n	803c83e <SIMCOM_DMA_IrqHandler+0xce6>
 803c838:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 803c83c:	e01a      	b.n	803c874 <SIMCOM_DMA_IrqHandler+0xd1c>
 803c83e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 803c842:	e017      	b.n	803c874 <SIMCOM_DMA_IrqHandler+0xd1c>
 803c844:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 803c848:	e014      	b.n	803c874 <SIMCOM_DMA_IrqHandler+0xd1c>
 803c84a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 803c84e:	e011      	b.n	803c874 <SIMCOM_DMA_IrqHandler+0xd1c>
 803c850:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 803c854:	e00e      	b.n	803c874 <SIMCOM_DMA_IrqHandler+0xd1c>
 803c856:	2340      	movs	r3, #64	; 0x40
 803c858:	e00c      	b.n	803c874 <SIMCOM_DMA_IrqHandler+0xd1c>
 803c85a:	2340      	movs	r3, #64	; 0x40
 803c85c:	e00a      	b.n	803c874 <SIMCOM_DMA_IrqHandler+0xd1c>
 803c85e:	2340      	movs	r3, #64	; 0x40
 803c860:	e008      	b.n	803c874 <SIMCOM_DMA_IrqHandler+0xd1c>
 803c862:	2340      	movs	r3, #64	; 0x40
 803c864:	e006      	b.n	803c874 <SIMCOM_DMA_IrqHandler+0xd1c>
 803c866:	2301      	movs	r3, #1
 803c868:	e004      	b.n	803c874 <SIMCOM_DMA_IrqHandler+0xd1c>
 803c86a:	2301      	movs	r3, #1
 803c86c:	e002      	b.n	803c874 <SIMCOM_DMA_IrqHandler+0xd1c>
 803c86e:	2301      	movs	r3, #1
 803c870:	e000      	b.n	803c874 <SIMCOM_DMA_IrqHandler+0xd1c>
 803c872:	2301      	movs	r3, #1
 803c874:	4a01      	ldr	r2, [pc, #4]	; (803c87c <SIMCOM_DMA_IrqHandler+0xd24>)
 803c876:	60d3      	str	r3, [r2, #12]
 803c878:	e080      	b.n	803c97c <SIMCOM_DMA_IrqHandler+0xe24>
 803c87a:	bf00      	nop
 803c87c:	40026000 	.word	0x40026000
 803c880:	20008700 	.word	0x20008700
 803c884:	40026458 	.word	0x40026458
 803c888:	40026010 	.word	0x40026010
 803c88c:	40026410 	.word	0x40026410
 803c890:	40026070 	.word	0x40026070
 803c894:	40026470 	.word	0x40026470
 803c898:	40026028 	.word	0x40026028
 803c89c:	40026428 	.word	0x40026428
 803c8a0:	40026088 	.word	0x40026088
 803c8a4:	40026488 	.word	0x40026488
 803c8a8:	40026040 	.word	0x40026040
 803c8ac:	40026440 	.word	0x40026440
 803c8b0:	400260a0 	.word	0x400260a0
 803c8b4:	400264a0 	.word	0x400264a0
 803c8b8:	40026400 	.word	0x40026400
 803c8bc:	400260b8 	.word	0x400260b8
 803c8c0:	40026058 	.word	0x40026058
 803c8c4:	4b95      	ldr	r3, [pc, #596]	; (803cb1c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803c8c6:	681b      	ldr	r3, [r3, #0]
 803c8c8:	4a95      	ldr	r2, [pc, #596]	; (803cb20 <SIMCOM_DMA_IrqHandler+0xfc8>)
 803c8ca:	4293      	cmp	r3, r2
 803c8cc:	d053      	beq.n	803c976 <SIMCOM_DMA_IrqHandler+0xe1e>
 803c8ce:	4b93      	ldr	r3, [pc, #588]	; (803cb1c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803c8d0:	681b      	ldr	r3, [r3, #0]
 803c8d2:	4a94      	ldr	r2, [pc, #592]	; (803cb24 <SIMCOM_DMA_IrqHandler+0xfcc>)
 803c8d4:	4293      	cmp	r3, r2
 803c8d6:	d04c      	beq.n	803c972 <SIMCOM_DMA_IrqHandler+0xe1a>
 803c8d8:	4b90      	ldr	r3, [pc, #576]	; (803cb1c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803c8da:	681b      	ldr	r3, [r3, #0]
 803c8dc:	4a92      	ldr	r2, [pc, #584]	; (803cb28 <SIMCOM_DMA_IrqHandler+0xfd0>)
 803c8de:	4293      	cmp	r3, r2
 803c8e0:	d045      	beq.n	803c96e <SIMCOM_DMA_IrqHandler+0xe16>
 803c8e2:	4b8e      	ldr	r3, [pc, #568]	; (803cb1c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803c8e4:	681b      	ldr	r3, [r3, #0]
 803c8e6:	4a91      	ldr	r2, [pc, #580]	; (803cb2c <SIMCOM_DMA_IrqHandler+0xfd4>)
 803c8e8:	4293      	cmp	r3, r2
 803c8ea:	d03e      	beq.n	803c96a <SIMCOM_DMA_IrqHandler+0xe12>
 803c8ec:	4b8b      	ldr	r3, [pc, #556]	; (803cb1c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803c8ee:	681b      	ldr	r3, [r3, #0]
 803c8f0:	4a8f      	ldr	r2, [pc, #572]	; (803cb30 <SIMCOM_DMA_IrqHandler+0xfd8>)
 803c8f2:	4293      	cmp	r3, r2
 803c8f4:	d037      	beq.n	803c966 <SIMCOM_DMA_IrqHandler+0xe0e>
 803c8f6:	4b89      	ldr	r3, [pc, #548]	; (803cb1c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803c8f8:	681b      	ldr	r3, [r3, #0]
 803c8fa:	4a8e      	ldr	r2, [pc, #568]	; (803cb34 <SIMCOM_DMA_IrqHandler+0xfdc>)
 803c8fc:	4293      	cmp	r3, r2
 803c8fe:	d030      	beq.n	803c962 <SIMCOM_DMA_IrqHandler+0xe0a>
 803c900:	4b86      	ldr	r3, [pc, #536]	; (803cb1c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803c902:	681b      	ldr	r3, [r3, #0]
 803c904:	4a8c      	ldr	r2, [pc, #560]	; (803cb38 <SIMCOM_DMA_IrqHandler+0xfe0>)
 803c906:	4293      	cmp	r3, r2
 803c908:	d029      	beq.n	803c95e <SIMCOM_DMA_IrqHandler+0xe06>
 803c90a:	4b84      	ldr	r3, [pc, #528]	; (803cb1c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803c90c:	681b      	ldr	r3, [r3, #0]
 803c90e:	4a8b      	ldr	r2, [pc, #556]	; (803cb3c <SIMCOM_DMA_IrqHandler+0xfe4>)
 803c910:	4293      	cmp	r3, r2
 803c912:	d022      	beq.n	803c95a <SIMCOM_DMA_IrqHandler+0xe02>
 803c914:	4b81      	ldr	r3, [pc, #516]	; (803cb1c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803c916:	681b      	ldr	r3, [r3, #0]
 803c918:	4a89      	ldr	r2, [pc, #548]	; (803cb40 <SIMCOM_DMA_IrqHandler+0xfe8>)
 803c91a:	4293      	cmp	r3, r2
 803c91c:	d01a      	beq.n	803c954 <SIMCOM_DMA_IrqHandler+0xdfc>
 803c91e:	4b7f      	ldr	r3, [pc, #508]	; (803cb1c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803c920:	681b      	ldr	r3, [r3, #0]
 803c922:	4a88      	ldr	r2, [pc, #544]	; (803cb44 <SIMCOM_DMA_IrqHandler+0xfec>)
 803c924:	4293      	cmp	r3, r2
 803c926:	d012      	beq.n	803c94e <SIMCOM_DMA_IrqHandler+0xdf6>
 803c928:	4b7c      	ldr	r3, [pc, #496]	; (803cb1c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803c92a:	681b      	ldr	r3, [r3, #0]
 803c92c:	4a86      	ldr	r2, [pc, #536]	; (803cb48 <SIMCOM_DMA_IrqHandler+0xff0>)
 803c92e:	4293      	cmp	r3, r2
 803c930:	d00a      	beq.n	803c948 <SIMCOM_DMA_IrqHandler+0xdf0>
 803c932:	4b7a      	ldr	r3, [pc, #488]	; (803cb1c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803c934:	681b      	ldr	r3, [r3, #0]
 803c936:	4a85      	ldr	r2, [pc, #532]	; (803cb4c <SIMCOM_DMA_IrqHandler+0xff4>)
 803c938:	4293      	cmp	r3, r2
 803c93a:	d102      	bne.n	803c942 <SIMCOM_DMA_IrqHandler+0xdea>
 803c93c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 803c940:	e01a      	b.n	803c978 <SIMCOM_DMA_IrqHandler+0xe20>
 803c942:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 803c946:	e017      	b.n	803c978 <SIMCOM_DMA_IrqHandler+0xe20>
 803c948:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 803c94c:	e014      	b.n	803c978 <SIMCOM_DMA_IrqHandler+0xe20>
 803c94e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 803c952:	e011      	b.n	803c978 <SIMCOM_DMA_IrqHandler+0xe20>
 803c954:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 803c958:	e00e      	b.n	803c978 <SIMCOM_DMA_IrqHandler+0xe20>
 803c95a:	2340      	movs	r3, #64	; 0x40
 803c95c:	e00c      	b.n	803c978 <SIMCOM_DMA_IrqHandler+0xe20>
 803c95e:	2340      	movs	r3, #64	; 0x40
 803c960:	e00a      	b.n	803c978 <SIMCOM_DMA_IrqHandler+0xe20>
 803c962:	2340      	movs	r3, #64	; 0x40
 803c964:	e008      	b.n	803c978 <SIMCOM_DMA_IrqHandler+0xe20>
 803c966:	2340      	movs	r3, #64	; 0x40
 803c968:	e006      	b.n	803c978 <SIMCOM_DMA_IrqHandler+0xe20>
 803c96a:	2301      	movs	r3, #1
 803c96c:	e004      	b.n	803c978 <SIMCOM_DMA_IrqHandler+0xe20>
 803c96e:	2301      	movs	r3, #1
 803c970:	e002      	b.n	803c978 <SIMCOM_DMA_IrqHandler+0xe20>
 803c972:	2301      	movs	r3, #1
 803c974:	e000      	b.n	803c978 <SIMCOM_DMA_IrqHandler+0xe20>
 803c976:	2301      	movs	r3, #1
 803c978:	4a75      	ldr	r2, [pc, #468]	; (803cb50 <SIMCOM_DMA_IrqHandler+0xff8>)
 803c97a:	6093      	str	r3, [r2, #8]
        __HAL_DMA_CLEAR_FLAG(&hdma_usart1_rx, __HAL_DMA_GET_DME_FLAG_INDEX(&hdma_usart1_rx));
 803c97c:	4b67      	ldr	r3, [pc, #412]	; (803cb1c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803c97e:	681b      	ldr	r3, [r3, #0]
 803c980:	461a      	mov	r2, r3
 803c982:	4b74      	ldr	r3, [pc, #464]	; (803cb54 <SIMCOM_DMA_IrqHandler+0xffc>)
 803c984:	429a      	cmp	r2, r3
 803c986:	d960      	bls.n	803ca4a <SIMCOM_DMA_IrqHandler+0xef2>
 803c988:	4b64      	ldr	r3, [pc, #400]	; (803cb1c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803c98a:	681b      	ldr	r3, [r3, #0]
 803c98c:	4a64      	ldr	r2, [pc, #400]	; (803cb20 <SIMCOM_DMA_IrqHandler+0xfc8>)
 803c98e:	4293      	cmp	r3, r2
 803c990:	d057      	beq.n	803ca42 <SIMCOM_DMA_IrqHandler+0xeea>
 803c992:	4b62      	ldr	r3, [pc, #392]	; (803cb1c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803c994:	681b      	ldr	r3, [r3, #0]
 803c996:	4a63      	ldr	r2, [pc, #396]	; (803cb24 <SIMCOM_DMA_IrqHandler+0xfcc>)
 803c998:	4293      	cmp	r3, r2
 803c99a:	d050      	beq.n	803ca3e <SIMCOM_DMA_IrqHandler+0xee6>
 803c99c:	4b5f      	ldr	r3, [pc, #380]	; (803cb1c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803c99e:	681b      	ldr	r3, [r3, #0]
 803c9a0:	4a61      	ldr	r2, [pc, #388]	; (803cb28 <SIMCOM_DMA_IrqHandler+0xfd0>)
 803c9a2:	4293      	cmp	r3, r2
 803c9a4:	d049      	beq.n	803ca3a <SIMCOM_DMA_IrqHandler+0xee2>
 803c9a6:	4b5d      	ldr	r3, [pc, #372]	; (803cb1c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803c9a8:	681b      	ldr	r3, [r3, #0]
 803c9aa:	4a60      	ldr	r2, [pc, #384]	; (803cb2c <SIMCOM_DMA_IrqHandler+0xfd4>)
 803c9ac:	4293      	cmp	r3, r2
 803c9ae:	d042      	beq.n	803ca36 <SIMCOM_DMA_IrqHandler+0xede>
 803c9b0:	4b5a      	ldr	r3, [pc, #360]	; (803cb1c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803c9b2:	681b      	ldr	r3, [r3, #0]
 803c9b4:	4a5e      	ldr	r2, [pc, #376]	; (803cb30 <SIMCOM_DMA_IrqHandler+0xfd8>)
 803c9b6:	4293      	cmp	r3, r2
 803c9b8:	d03a      	beq.n	803ca30 <SIMCOM_DMA_IrqHandler+0xed8>
 803c9ba:	4b58      	ldr	r3, [pc, #352]	; (803cb1c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803c9bc:	681b      	ldr	r3, [r3, #0]
 803c9be:	4a5d      	ldr	r2, [pc, #372]	; (803cb34 <SIMCOM_DMA_IrqHandler+0xfdc>)
 803c9c0:	4293      	cmp	r3, r2
 803c9c2:	d032      	beq.n	803ca2a <SIMCOM_DMA_IrqHandler+0xed2>
 803c9c4:	4b55      	ldr	r3, [pc, #340]	; (803cb1c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803c9c6:	681b      	ldr	r3, [r3, #0]
 803c9c8:	4a5b      	ldr	r2, [pc, #364]	; (803cb38 <SIMCOM_DMA_IrqHandler+0xfe0>)
 803c9ca:	4293      	cmp	r3, r2
 803c9cc:	d02a      	beq.n	803ca24 <SIMCOM_DMA_IrqHandler+0xecc>
 803c9ce:	4b53      	ldr	r3, [pc, #332]	; (803cb1c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803c9d0:	681b      	ldr	r3, [r3, #0]
 803c9d2:	4a5a      	ldr	r2, [pc, #360]	; (803cb3c <SIMCOM_DMA_IrqHandler+0xfe4>)
 803c9d4:	4293      	cmp	r3, r2
 803c9d6:	d022      	beq.n	803ca1e <SIMCOM_DMA_IrqHandler+0xec6>
 803c9d8:	4b50      	ldr	r3, [pc, #320]	; (803cb1c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803c9da:	681b      	ldr	r3, [r3, #0]
 803c9dc:	4a58      	ldr	r2, [pc, #352]	; (803cb40 <SIMCOM_DMA_IrqHandler+0xfe8>)
 803c9de:	4293      	cmp	r3, r2
 803c9e0:	d01a      	beq.n	803ca18 <SIMCOM_DMA_IrqHandler+0xec0>
 803c9e2:	4b4e      	ldr	r3, [pc, #312]	; (803cb1c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803c9e4:	681b      	ldr	r3, [r3, #0]
 803c9e6:	4a57      	ldr	r2, [pc, #348]	; (803cb44 <SIMCOM_DMA_IrqHandler+0xfec>)
 803c9e8:	4293      	cmp	r3, r2
 803c9ea:	d012      	beq.n	803ca12 <SIMCOM_DMA_IrqHandler+0xeba>
 803c9ec:	4b4b      	ldr	r3, [pc, #300]	; (803cb1c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803c9ee:	681b      	ldr	r3, [r3, #0]
 803c9f0:	4a55      	ldr	r2, [pc, #340]	; (803cb48 <SIMCOM_DMA_IrqHandler+0xff0>)
 803c9f2:	4293      	cmp	r3, r2
 803c9f4:	d00a      	beq.n	803ca0c <SIMCOM_DMA_IrqHandler+0xeb4>
 803c9f6:	4b49      	ldr	r3, [pc, #292]	; (803cb1c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803c9f8:	681b      	ldr	r3, [r3, #0]
 803c9fa:	4a54      	ldr	r2, [pc, #336]	; (803cb4c <SIMCOM_DMA_IrqHandler+0xff4>)
 803c9fc:	4293      	cmp	r3, r2
 803c9fe:	d102      	bne.n	803ca06 <SIMCOM_DMA_IrqHandler+0xeae>
 803ca00:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 803ca04:	e01e      	b.n	803ca44 <SIMCOM_DMA_IrqHandler+0xeec>
 803ca06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 803ca0a:	e01b      	b.n	803ca44 <SIMCOM_DMA_IrqHandler+0xeec>
 803ca0c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 803ca10:	e018      	b.n	803ca44 <SIMCOM_DMA_IrqHandler+0xeec>
 803ca12:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 803ca16:	e015      	b.n	803ca44 <SIMCOM_DMA_IrqHandler+0xeec>
 803ca18:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 803ca1c:	e012      	b.n	803ca44 <SIMCOM_DMA_IrqHandler+0xeec>
 803ca1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 803ca22:	e00f      	b.n	803ca44 <SIMCOM_DMA_IrqHandler+0xeec>
 803ca24:	f44f 7380 	mov.w	r3, #256	; 0x100
 803ca28:	e00c      	b.n	803ca44 <SIMCOM_DMA_IrqHandler+0xeec>
 803ca2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 803ca2e:	e009      	b.n	803ca44 <SIMCOM_DMA_IrqHandler+0xeec>
 803ca30:	f44f 7380 	mov.w	r3, #256	; 0x100
 803ca34:	e006      	b.n	803ca44 <SIMCOM_DMA_IrqHandler+0xeec>
 803ca36:	2304      	movs	r3, #4
 803ca38:	e004      	b.n	803ca44 <SIMCOM_DMA_IrqHandler+0xeec>
 803ca3a:	2304      	movs	r3, #4
 803ca3c:	e002      	b.n	803ca44 <SIMCOM_DMA_IrqHandler+0xeec>
 803ca3e:	2304      	movs	r3, #4
 803ca40:	e000      	b.n	803ca44 <SIMCOM_DMA_IrqHandler+0xeec>
 803ca42:	2304      	movs	r3, #4
 803ca44:	4a44      	ldr	r2, [pc, #272]	; (803cb58 <SIMCOM_DMA_IrqHandler+0x1000>)
 803ca46:	60d3      	str	r3, [r2, #12]
 803ca48:	e151      	b.n	803ccee <SIMCOM_DMA_IrqHandler+0x1196>
 803ca4a:	4b34      	ldr	r3, [pc, #208]	; (803cb1c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803ca4c:	681b      	ldr	r3, [r3, #0]
 803ca4e:	461a      	mov	r2, r3
 803ca50:	4b42      	ldr	r3, [pc, #264]	; (803cb5c <SIMCOM_DMA_IrqHandler+0x1004>)
 803ca52:	429a      	cmp	r2, r3
 803ca54:	f240 8084 	bls.w	803cb60 <SIMCOM_DMA_IrqHandler+0x1008>
 803ca58:	4b30      	ldr	r3, [pc, #192]	; (803cb1c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803ca5a:	681b      	ldr	r3, [r3, #0]
 803ca5c:	4a30      	ldr	r2, [pc, #192]	; (803cb20 <SIMCOM_DMA_IrqHandler+0xfc8>)
 803ca5e:	4293      	cmp	r3, r2
 803ca60:	d057      	beq.n	803cb12 <SIMCOM_DMA_IrqHandler+0xfba>
 803ca62:	4b2e      	ldr	r3, [pc, #184]	; (803cb1c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803ca64:	681b      	ldr	r3, [r3, #0]
 803ca66:	4a2f      	ldr	r2, [pc, #188]	; (803cb24 <SIMCOM_DMA_IrqHandler+0xfcc>)
 803ca68:	4293      	cmp	r3, r2
 803ca6a:	d050      	beq.n	803cb0e <SIMCOM_DMA_IrqHandler+0xfb6>
 803ca6c:	4b2b      	ldr	r3, [pc, #172]	; (803cb1c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803ca6e:	681b      	ldr	r3, [r3, #0]
 803ca70:	4a2d      	ldr	r2, [pc, #180]	; (803cb28 <SIMCOM_DMA_IrqHandler+0xfd0>)
 803ca72:	4293      	cmp	r3, r2
 803ca74:	d049      	beq.n	803cb0a <SIMCOM_DMA_IrqHandler+0xfb2>
 803ca76:	4b29      	ldr	r3, [pc, #164]	; (803cb1c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803ca78:	681b      	ldr	r3, [r3, #0]
 803ca7a:	4a2c      	ldr	r2, [pc, #176]	; (803cb2c <SIMCOM_DMA_IrqHandler+0xfd4>)
 803ca7c:	4293      	cmp	r3, r2
 803ca7e:	d042      	beq.n	803cb06 <SIMCOM_DMA_IrqHandler+0xfae>
 803ca80:	4b26      	ldr	r3, [pc, #152]	; (803cb1c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803ca82:	681b      	ldr	r3, [r3, #0]
 803ca84:	4a2a      	ldr	r2, [pc, #168]	; (803cb30 <SIMCOM_DMA_IrqHandler+0xfd8>)
 803ca86:	4293      	cmp	r3, r2
 803ca88:	d03a      	beq.n	803cb00 <SIMCOM_DMA_IrqHandler+0xfa8>
 803ca8a:	4b24      	ldr	r3, [pc, #144]	; (803cb1c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803ca8c:	681b      	ldr	r3, [r3, #0]
 803ca8e:	4a29      	ldr	r2, [pc, #164]	; (803cb34 <SIMCOM_DMA_IrqHandler+0xfdc>)
 803ca90:	4293      	cmp	r3, r2
 803ca92:	d032      	beq.n	803cafa <SIMCOM_DMA_IrqHandler+0xfa2>
 803ca94:	4b21      	ldr	r3, [pc, #132]	; (803cb1c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803ca96:	681b      	ldr	r3, [r3, #0]
 803ca98:	4a27      	ldr	r2, [pc, #156]	; (803cb38 <SIMCOM_DMA_IrqHandler+0xfe0>)
 803ca9a:	4293      	cmp	r3, r2
 803ca9c:	d02a      	beq.n	803caf4 <SIMCOM_DMA_IrqHandler+0xf9c>
 803ca9e:	4b1f      	ldr	r3, [pc, #124]	; (803cb1c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803caa0:	681b      	ldr	r3, [r3, #0]
 803caa2:	4a26      	ldr	r2, [pc, #152]	; (803cb3c <SIMCOM_DMA_IrqHandler+0xfe4>)
 803caa4:	4293      	cmp	r3, r2
 803caa6:	d022      	beq.n	803caee <SIMCOM_DMA_IrqHandler+0xf96>
 803caa8:	4b1c      	ldr	r3, [pc, #112]	; (803cb1c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803caaa:	681b      	ldr	r3, [r3, #0]
 803caac:	4a24      	ldr	r2, [pc, #144]	; (803cb40 <SIMCOM_DMA_IrqHandler+0xfe8>)
 803caae:	4293      	cmp	r3, r2
 803cab0:	d01a      	beq.n	803cae8 <SIMCOM_DMA_IrqHandler+0xf90>
 803cab2:	4b1a      	ldr	r3, [pc, #104]	; (803cb1c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803cab4:	681b      	ldr	r3, [r3, #0]
 803cab6:	4a23      	ldr	r2, [pc, #140]	; (803cb44 <SIMCOM_DMA_IrqHandler+0xfec>)
 803cab8:	4293      	cmp	r3, r2
 803caba:	d012      	beq.n	803cae2 <SIMCOM_DMA_IrqHandler+0xf8a>
 803cabc:	4b17      	ldr	r3, [pc, #92]	; (803cb1c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803cabe:	681b      	ldr	r3, [r3, #0]
 803cac0:	4a21      	ldr	r2, [pc, #132]	; (803cb48 <SIMCOM_DMA_IrqHandler+0xff0>)
 803cac2:	4293      	cmp	r3, r2
 803cac4:	d00a      	beq.n	803cadc <SIMCOM_DMA_IrqHandler+0xf84>
 803cac6:	4b15      	ldr	r3, [pc, #84]	; (803cb1c <SIMCOM_DMA_IrqHandler+0xfc4>)
 803cac8:	681b      	ldr	r3, [r3, #0]
 803caca:	4a20      	ldr	r2, [pc, #128]	; (803cb4c <SIMCOM_DMA_IrqHandler+0xff4>)
 803cacc:	4293      	cmp	r3, r2
 803cace:	d102      	bne.n	803cad6 <SIMCOM_DMA_IrqHandler+0xf7e>
 803cad0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 803cad4:	e01e      	b.n	803cb14 <SIMCOM_DMA_IrqHandler+0xfbc>
 803cad6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 803cada:	e01b      	b.n	803cb14 <SIMCOM_DMA_IrqHandler+0xfbc>
 803cadc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 803cae0:	e018      	b.n	803cb14 <SIMCOM_DMA_IrqHandler+0xfbc>
 803cae2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 803cae6:	e015      	b.n	803cb14 <SIMCOM_DMA_IrqHandler+0xfbc>
 803cae8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 803caec:	e012      	b.n	803cb14 <SIMCOM_DMA_IrqHandler+0xfbc>
 803caee:	f44f 7380 	mov.w	r3, #256	; 0x100
 803caf2:	e00f      	b.n	803cb14 <SIMCOM_DMA_IrqHandler+0xfbc>
 803caf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 803caf8:	e00c      	b.n	803cb14 <SIMCOM_DMA_IrqHandler+0xfbc>
 803cafa:	f44f 7380 	mov.w	r3, #256	; 0x100
 803cafe:	e009      	b.n	803cb14 <SIMCOM_DMA_IrqHandler+0xfbc>
 803cb00:	f44f 7380 	mov.w	r3, #256	; 0x100
 803cb04:	e006      	b.n	803cb14 <SIMCOM_DMA_IrqHandler+0xfbc>
 803cb06:	2304      	movs	r3, #4
 803cb08:	e004      	b.n	803cb14 <SIMCOM_DMA_IrqHandler+0xfbc>
 803cb0a:	2304      	movs	r3, #4
 803cb0c:	e002      	b.n	803cb14 <SIMCOM_DMA_IrqHandler+0xfbc>
 803cb0e:	2304      	movs	r3, #4
 803cb10:	e000      	b.n	803cb14 <SIMCOM_DMA_IrqHandler+0xfbc>
 803cb12:	2304      	movs	r3, #4
 803cb14:	4a10      	ldr	r2, [pc, #64]	; (803cb58 <SIMCOM_DMA_IrqHandler+0x1000>)
 803cb16:	6093      	str	r3, [r2, #8]
 803cb18:	e0e9      	b.n	803ccee <SIMCOM_DMA_IrqHandler+0x1196>
 803cb1a:	bf00      	nop
 803cb1c:	20008700 	.word	0x20008700
 803cb20:	40026010 	.word	0x40026010
 803cb24:	40026410 	.word	0x40026410
 803cb28:	40026070 	.word	0x40026070
 803cb2c:	40026470 	.word	0x40026470
 803cb30:	40026028 	.word	0x40026028
 803cb34:	40026428 	.word	0x40026428
 803cb38:	40026088 	.word	0x40026088
 803cb3c:	40026488 	.word	0x40026488
 803cb40:	40026040 	.word	0x40026040
 803cb44:	40026440 	.word	0x40026440
 803cb48:	400260a0 	.word	0x400260a0
 803cb4c:	400264a0 	.word	0x400264a0
 803cb50:	40026000 	.word	0x40026000
 803cb54:	40026458 	.word	0x40026458
 803cb58:	40026400 	.word	0x40026400
 803cb5c:	400260b8 	.word	0x400260b8
 803cb60:	4b66      	ldr	r3, [pc, #408]	; (803ccfc <SIMCOM_DMA_IrqHandler+0x11a4>)
 803cb62:	681b      	ldr	r3, [r3, #0]
 803cb64:	461a      	mov	r2, r3
 803cb66:	4b66      	ldr	r3, [pc, #408]	; (803cd00 <SIMCOM_DMA_IrqHandler+0x11a8>)
 803cb68:	429a      	cmp	r2, r3
 803cb6a:	d960      	bls.n	803cc2e <SIMCOM_DMA_IrqHandler+0x10d6>
 803cb6c:	4b63      	ldr	r3, [pc, #396]	; (803ccfc <SIMCOM_DMA_IrqHandler+0x11a4>)
 803cb6e:	681b      	ldr	r3, [r3, #0]
 803cb70:	4a64      	ldr	r2, [pc, #400]	; (803cd04 <SIMCOM_DMA_IrqHandler+0x11ac>)
 803cb72:	4293      	cmp	r3, r2
 803cb74:	d057      	beq.n	803cc26 <SIMCOM_DMA_IrqHandler+0x10ce>
 803cb76:	4b61      	ldr	r3, [pc, #388]	; (803ccfc <SIMCOM_DMA_IrqHandler+0x11a4>)
 803cb78:	681b      	ldr	r3, [r3, #0]
 803cb7a:	4a63      	ldr	r2, [pc, #396]	; (803cd08 <SIMCOM_DMA_IrqHandler+0x11b0>)
 803cb7c:	4293      	cmp	r3, r2
 803cb7e:	d050      	beq.n	803cc22 <SIMCOM_DMA_IrqHandler+0x10ca>
 803cb80:	4b5e      	ldr	r3, [pc, #376]	; (803ccfc <SIMCOM_DMA_IrqHandler+0x11a4>)
 803cb82:	681b      	ldr	r3, [r3, #0]
 803cb84:	4a61      	ldr	r2, [pc, #388]	; (803cd0c <SIMCOM_DMA_IrqHandler+0x11b4>)
 803cb86:	4293      	cmp	r3, r2
 803cb88:	d049      	beq.n	803cc1e <SIMCOM_DMA_IrqHandler+0x10c6>
 803cb8a:	4b5c      	ldr	r3, [pc, #368]	; (803ccfc <SIMCOM_DMA_IrqHandler+0x11a4>)
 803cb8c:	681b      	ldr	r3, [r3, #0]
 803cb8e:	4a60      	ldr	r2, [pc, #384]	; (803cd10 <SIMCOM_DMA_IrqHandler+0x11b8>)
 803cb90:	4293      	cmp	r3, r2
 803cb92:	d042      	beq.n	803cc1a <SIMCOM_DMA_IrqHandler+0x10c2>
 803cb94:	4b59      	ldr	r3, [pc, #356]	; (803ccfc <SIMCOM_DMA_IrqHandler+0x11a4>)
 803cb96:	681b      	ldr	r3, [r3, #0]
 803cb98:	4a5e      	ldr	r2, [pc, #376]	; (803cd14 <SIMCOM_DMA_IrqHandler+0x11bc>)
 803cb9a:	4293      	cmp	r3, r2
 803cb9c:	d03a      	beq.n	803cc14 <SIMCOM_DMA_IrqHandler+0x10bc>
 803cb9e:	4b57      	ldr	r3, [pc, #348]	; (803ccfc <SIMCOM_DMA_IrqHandler+0x11a4>)
 803cba0:	681b      	ldr	r3, [r3, #0]
 803cba2:	4a5d      	ldr	r2, [pc, #372]	; (803cd18 <SIMCOM_DMA_IrqHandler+0x11c0>)
 803cba4:	4293      	cmp	r3, r2
 803cba6:	d032      	beq.n	803cc0e <SIMCOM_DMA_IrqHandler+0x10b6>
 803cba8:	4b54      	ldr	r3, [pc, #336]	; (803ccfc <SIMCOM_DMA_IrqHandler+0x11a4>)
 803cbaa:	681b      	ldr	r3, [r3, #0]
 803cbac:	4a5b      	ldr	r2, [pc, #364]	; (803cd1c <SIMCOM_DMA_IrqHandler+0x11c4>)
 803cbae:	4293      	cmp	r3, r2
 803cbb0:	d02a      	beq.n	803cc08 <SIMCOM_DMA_IrqHandler+0x10b0>
 803cbb2:	4b52      	ldr	r3, [pc, #328]	; (803ccfc <SIMCOM_DMA_IrqHandler+0x11a4>)
 803cbb4:	681b      	ldr	r3, [r3, #0]
 803cbb6:	4a5a      	ldr	r2, [pc, #360]	; (803cd20 <SIMCOM_DMA_IrqHandler+0x11c8>)
 803cbb8:	4293      	cmp	r3, r2
 803cbba:	d022      	beq.n	803cc02 <SIMCOM_DMA_IrqHandler+0x10aa>
 803cbbc:	4b4f      	ldr	r3, [pc, #316]	; (803ccfc <SIMCOM_DMA_IrqHandler+0x11a4>)
 803cbbe:	681b      	ldr	r3, [r3, #0]
 803cbc0:	4a58      	ldr	r2, [pc, #352]	; (803cd24 <SIMCOM_DMA_IrqHandler+0x11cc>)
 803cbc2:	4293      	cmp	r3, r2
 803cbc4:	d01a      	beq.n	803cbfc <SIMCOM_DMA_IrqHandler+0x10a4>
 803cbc6:	4b4d      	ldr	r3, [pc, #308]	; (803ccfc <SIMCOM_DMA_IrqHandler+0x11a4>)
 803cbc8:	681b      	ldr	r3, [r3, #0]
 803cbca:	4a57      	ldr	r2, [pc, #348]	; (803cd28 <SIMCOM_DMA_IrqHandler+0x11d0>)
 803cbcc:	4293      	cmp	r3, r2
 803cbce:	d012      	beq.n	803cbf6 <SIMCOM_DMA_IrqHandler+0x109e>
 803cbd0:	4b4a      	ldr	r3, [pc, #296]	; (803ccfc <SIMCOM_DMA_IrqHandler+0x11a4>)
 803cbd2:	681b      	ldr	r3, [r3, #0]
 803cbd4:	4a55      	ldr	r2, [pc, #340]	; (803cd2c <SIMCOM_DMA_IrqHandler+0x11d4>)
 803cbd6:	4293      	cmp	r3, r2
 803cbd8:	d00a      	beq.n	803cbf0 <SIMCOM_DMA_IrqHandler+0x1098>
 803cbda:	4b48      	ldr	r3, [pc, #288]	; (803ccfc <SIMCOM_DMA_IrqHandler+0x11a4>)
 803cbdc:	681b      	ldr	r3, [r3, #0]
 803cbde:	4a54      	ldr	r2, [pc, #336]	; (803cd30 <SIMCOM_DMA_IrqHandler+0x11d8>)
 803cbe0:	4293      	cmp	r3, r2
 803cbe2:	d102      	bne.n	803cbea <SIMCOM_DMA_IrqHandler+0x1092>
 803cbe4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 803cbe8:	e01e      	b.n	803cc28 <SIMCOM_DMA_IrqHandler+0x10d0>
 803cbea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 803cbee:	e01b      	b.n	803cc28 <SIMCOM_DMA_IrqHandler+0x10d0>
 803cbf0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 803cbf4:	e018      	b.n	803cc28 <SIMCOM_DMA_IrqHandler+0x10d0>
 803cbf6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 803cbfa:	e015      	b.n	803cc28 <SIMCOM_DMA_IrqHandler+0x10d0>
 803cbfc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 803cc00:	e012      	b.n	803cc28 <SIMCOM_DMA_IrqHandler+0x10d0>
 803cc02:	f44f 7380 	mov.w	r3, #256	; 0x100
 803cc06:	e00f      	b.n	803cc28 <SIMCOM_DMA_IrqHandler+0x10d0>
 803cc08:	f44f 7380 	mov.w	r3, #256	; 0x100
 803cc0c:	e00c      	b.n	803cc28 <SIMCOM_DMA_IrqHandler+0x10d0>
 803cc0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 803cc12:	e009      	b.n	803cc28 <SIMCOM_DMA_IrqHandler+0x10d0>
 803cc14:	f44f 7380 	mov.w	r3, #256	; 0x100
 803cc18:	e006      	b.n	803cc28 <SIMCOM_DMA_IrqHandler+0x10d0>
 803cc1a:	2304      	movs	r3, #4
 803cc1c:	e004      	b.n	803cc28 <SIMCOM_DMA_IrqHandler+0x10d0>
 803cc1e:	2304      	movs	r3, #4
 803cc20:	e002      	b.n	803cc28 <SIMCOM_DMA_IrqHandler+0x10d0>
 803cc22:	2304      	movs	r3, #4
 803cc24:	e000      	b.n	803cc28 <SIMCOM_DMA_IrqHandler+0x10d0>
 803cc26:	2304      	movs	r3, #4
 803cc28:	4a42      	ldr	r2, [pc, #264]	; (803cd34 <SIMCOM_DMA_IrqHandler+0x11dc>)
 803cc2a:	60d3      	str	r3, [r2, #12]
 803cc2c:	e05f      	b.n	803ccee <SIMCOM_DMA_IrqHandler+0x1196>
 803cc2e:	4b33      	ldr	r3, [pc, #204]	; (803ccfc <SIMCOM_DMA_IrqHandler+0x11a4>)
 803cc30:	681b      	ldr	r3, [r3, #0]
 803cc32:	4a34      	ldr	r2, [pc, #208]	; (803cd04 <SIMCOM_DMA_IrqHandler+0x11ac>)
 803cc34:	4293      	cmp	r3, r2
 803cc36:	d057      	beq.n	803cce8 <SIMCOM_DMA_IrqHandler+0x1190>
 803cc38:	4b30      	ldr	r3, [pc, #192]	; (803ccfc <SIMCOM_DMA_IrqHandler+0x11a4>)
 803cc3a:	681b      	ldr	r3, [r3, #0]
 803cc3c:	4a32      	ldr	r2, [pc, #200]	; (803cd08 <SIMCOM_DMA_IrqHandler+0x11b0>)
 803cc3e:	4293      	cmp	r3, r2
 803cc40:	d050      	beq.n	803cce4 <SIMCOM_DMA_IrqHandler+0x118c>
 803cc42:	4b2e      	ldr	r3, [pc, #184]	; (803ccfc <SIMCOM_DMA_IrqHandler+0x11a4>)
 803cc44:	681b      	ldr	r3, [r3, #0]
 803cc46:	4a31      	ldr	r2, [pc, #196]	; (803cd0c <SIMCOM_DMA_IrqHandler+0x11b4>)
 803cc48:	4293      	cmp	r3, r2
 803cc4a:	d049      	beq.n	803cce0 <SIMCOM_DMA_IrqHandler+0x1188>
 803cc4c:	4b2b      	ldr	r3, [pc, #172]	; (803ccfc <SIMCOM_DMA_IrqHandler+0x11a4>)
 803cc4e:	681b      	ldr	r3, [r3, #0]
 803cc50:	4a2f      	ldr	r2, [pc, #188]	; (803cd10 <SIMCOM_DMA_IrqHandler+0x11b8>)
 803cc52:	4293      	cmp	r3, r2
 803cc54:	d042      	beq.n	803ccdc <SIMCOM_DMA_IrqHandler+0x1184>
 803cc56:	4b29      	ldr	r3, [pc, #164]	; (803ccfc <SIMCOM_DMA_IrqHandler+0x11a4>)
 803cc58:	681b      	ldr	r3, [r3, #0]
 803cc5a:	4a2e      	ldr	r2, [pc, #184]	; (803cd14 <SIMCOM_DMA_IrqHandler+0x11bc>)
 803cc5c:	4293      	cmp	r3, r2
 803cc5e:	d03a      	beq.n	803ccd6 <SIMCOM_DMA_IrqHandler+0x117e>
 803cc60:	4b26      	ldr	r3, [pc, #152]	; (803ccfc <SIMCOM_DMA_IrqHandler+0x11a4>)
 803cc62:	681b      	ldr	r3, [r3, #0]
 803cc64:	4a2c      	ldr	r2, [pc, #176]	; (803cd18 <SIMCOM_DMA_IrqHandler+0x11c0>)
 803cc66:	4293      	cmp	r3, r2
 803cc68:	d032      	beq.n	803ccd0 <SIMCOM_DMA_IrqHandler+0x1178>
 803cc6a:	4b24      	ldr	r3, [pc, #144]	; (803ccfc <SIMCOM_DMA_IrqHandler+0x11a4>)
 803cc6c:	681b      	ldr	r3, [r3, #0]
 803cc6e:	4a2b      	ldr	r2, [pc, #172]	; (803cd1c <SIMCOM_DMA_IrqHandler+0x11c4>)
 803cc70:	4293      	cmp	r3, r2
 803cc72:	d02a      	beq.n	803ccca <SIMCOM_DMA_IrqHandler+0x1172>
 803cc74:	4b21      	ldr	r3, [pc, #132]	; (803ccfc <SIMCOM_DMA_IrqHandler+0x11a4>)
 803cc76:	681b      	ldr	r3, [r3, #0]
 803cc78:	4a29      	ldr	r2, [pc, #164]	; (803cd20 <SIMCOM_DMA_IrqHandler+0x11c8>)
 803cc7a:	4293      	cmp	r3, r2
 803cc7c:	d022      	beq.n	803ccc4 <SIMCOM_DMA_IrqHandler+0x116c>
 803cc7e:	4b1f      	ldr	r3, [pc, #124]	; (803ccfc <SIMCOM_DMA_IrqHandler+0x11a4>)
 803cc80:	681b      	ldr	r3, [r3, #0]
 803cc82:	4a28      	ldr	r2, [pc, #160]	; (803cd24 <SIMCOM_DMA_IrqHandler+0x11cc>)
 803cc84:	4293      	cmp	r3, r2
 803cc86:	d01a      	beq.n	803ccbe <SIMCOM_DMA_IrqHandler+0x1166>
 803cc88:	4b1c      	ldr	r3, [pc, #112]	; (803ccfc <SIMCOM_DMA_IrqHandler+0x11a4>)
 803cc8a:	681b      	ldr	r3, [r3, #0]
 803cc8c:	4a26      	ldr	r2, [pc, #152]	; (803cd28 <SIMCOM_DMA_IrqHandler+0x11d0>)
 803cc8e:	4293      	cmp	r3, r2
 803cc90:	d012      	beq.n	803ccb8 <SIMCOM_DMA_IrqHandler+0x1160>
 803cc92:	4b1a      	ldr	r3, [pc, #104]	; (803ccfc <SIMCOM_DMA_IrqHandler+0x11a4>)
 803cc94:	681b      	ldr	r3, [r3, #0]
 803cc96:	4a25      	ldr	r2, [pc, #148]	; (803cd2c <SIMCOM_DMA_IrqHandler+0x11d4>)
 803cc98:	4293      	cmp	r3, r2
 803cc9a:	d00a      	beq.n	803ccb2 <SIMCOM_DMA_IrqHandler+0x115a>
 803cc9c:	4b17      	ldr	r3, [pc, #92]	; (803ccfc <SIMCOM_DMA_IrqHandler+0x11a4>)
 803cc9e:	681b      	ldr	r3, [r3, #0]
 803cca0:	4a23      	ldr	r2, [pc, #140]	; (803cd30 <SIMCOM_DMA_IrqHandler+0x11d8>)
 803cca2:	4293      	cmp	r3, r2
 803cca4:	d102      	bne.n	803ccac <SIMCOM_DMA_IrqHandler+0x1154>
 803cca6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 803ccaa:	e01e      	b.n	803ccea <SIMCOM_DMA_IrqHandler+0x1192>
 803ccac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 803ccb0:	e01b      	b.n	803ccea <SIMCOM_DMA_IrqHandler+0x1192>
 803ccb2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 803ccb6:	e018      	b.n	803ccea <SIMCOM_DMA_IrqHandler+0x1192>
 803ccb8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 803ccbc:	e015      	b.n	803ccea <SIMCOM_DMA_IrqHandler+0x1192>
 803ccbe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 803ccc2:	e012      	b.n	803ccea <SIMCOM_DMA_IrqHandler+0x1192>
 803ccc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 803ccc8:	e00f      	b.n	803ccea <SIMCOM_DMA_IrqHandler+0x1192>
 803ccca:	f44f 7380 	mov.w	r3, #256	; 0x100
 803ccce:	e00c      	b.n	803ccea <SIMCOM_DMA_IrqHandler+0x1192>
 803ccd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 803ccd4:	e009      	b.n	803ccea <SIMCOM_DMA_IrqHandler+0x1192>
 803ccd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 803ccda:	e006      	b.n	803ccea <SIMCOM_DMA_IrqHandler+0x1192>
 803ccdc:	2304      	movs	r3, #4
 803ccde:	e004      	b.n	803ccea <SIMCOM_DMA_IrqHandler+0x1192>
 803cce0:	2304      	movs	r3, #4
 803cce2:	e002      	b.n	803ccea <SIMCOM_DMA_IrqHandler+0x1192>
 803cce4:	2304      	movs	r3, #4
 803cce6:	e000      	b.n	803ccea <SIMCOM_DMA_IrqHandler+0x1192>
 803cce8:	2304      	movs	r3, #4
 803ccea:	4a12      	ldr	r2, [pc, #72]	; (803cd34 <SIMCOM_DMA_IrqHandler+0x11dc>)
 803ccec:	6093      	str	r3, [r2, #8]
        HAL_UART_Receive_DMA(&huart1, (uint8_t*) SIMCOM_DMA_RX, SIMCOM_DMA_RX_SZ);
 803ccee:	2280      	movs	r2, #128	; 0x80
 803ccf0:	4911      	ldr	r1, [pc, #68]	; (803cd38 <SIMCOM_DMA_IrqHandler+0x11e0>)
 803ccf2:	4812      	ldr	r0, [pc, #72]	; (803cd3c <SIMCOM_DMA_IrqHandler+0x11e4>)
 803ccf4:	f7f9 fbfa 	bl	80364ec <HAL_UART_Receive_DMA>
}
 803ccf8:	bf00      	nop
 803ccfa:	bd80      	pop	{r7, pc}
 803ccfc:	20008700 	.word	0x20008700
 803cd00:	40026058 	.word	0x40026058
 803cd04:	40026010 	.word	0x40026010
 803cd08:	40026410 	.word	0x40026410
 803cd0c:	40026070 	.word	0x40026070
 803cd10:	40026470 	.word	0x40026470
 803cd14:	40026028 	.word	0x40026028
 803cd18:	40026428 	.word	0x40026428
 803cd1c:	40026088 	.word	0x40026088
 803cd20:	40026488 	.word	0x40026488
 803cd24:	40026040 	.word	0x40026040
 803cd28:	40026440 	.word	0x40026440
 803cd2c:	400260a0 	.word	0x400260a0
 803cd30:	400264a0 	.word	0x400264a0
 803cd34:	40026000 	.word	0x40026000
 803cd38:	20007fd4 	.word	0x20007fd4
 803cd3c:	20008764 	.word	0x20008764

0803cd40 <SIMCOM_DMA_Init>:

void SIMCOM_DMA_Init(void) {
 803cd40:	b580      	push	{r7, lr}
 803cd42:	af00      	add	r7, sp, #0
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);        // enable idle line interrupt
 803cd44:	4b0f      	ldr	r3, [pc, #60]	; (803cd84 <SIMCOM_DMA_Init+0x44>)
 803cd46:	681b      	ldr	r3, [r3, #0]
 803cd48:	68da      	ldr	r2, [r3, #12]
 803cd4a:	4b0e      	ldr	r3, [pc, #56]	; (803cd84 <SIMCOM_DMA_Init+0x44>)
 803cd4c:	681b      	ldr	r3, [r3, #0]
 803cd4e:	f042 0210 	orr.w	r2, r2, #16
 803cd52:	60da      	str	r2, [r3, #12]
    __HAL_DMA_ENABLE_IT(&hdma_usart1_rx, DMA_IT_TC);    // enable DMA Tx cplt interrupt
 803cd54:	4b0c      	ldr	r3, [pc, #48]	; (803cd88 <SIMCOM_DMA_Init+0x48>)
 803cd56:	681b      	ldr	r3, [r3, #0]
 803cd58:	681a      	ldr	r2, [r3, #0]
 803cd5a:	4b0b      	ldr	r3, [pc, #44]	; (803cd88 <SIMCOM_DMA_Init+0x48>)
 803cd5c:	681b      	ldr	r3, [r3, #0]
 803cd5e:	f042 0210 	orr.w	r2, r2, #16
 803cd62:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE_IT(&hdma_usart1_rx, DMA_IT_HT);    // enable half complete interrupt
 803cd64:	4b08      	ldr	r3, [pc, #32]	; (803cd88 <SIMCOM_DMA_Init+0x48>)
 803cd66:	681b      	ldr	r3, [r3, #0]
 803cd68:	681a      	ldr	r2, [r3, #0]
 803cd6a:	4b07      	ldr	r3, [pc, #28]	; (803cd88 <SIMCOM_DMA_Init+0x48>)
 803cd6c:	681b      	ldr	r3, [r3, #0]
 803cd6e:	f042 0208 	orr.w	r2, r2, #8
 803cd72:	601a      	str	r2, [r3, #0]

    /* Start DMA transfer */
    HAL_UART_Receive_DMA(&huart1, (uint8_t*) SIMCOM_DMA_RX, SIMCOM_DMA_RX_SZ);
 803cd74:	2280      	movs	r2, #128	; 0x80
 803cd76:	4905      	ldr	r1, [pc, #20]	; (803cd8c <SIMCOM_DMA_Init+0x4c>)
 803cd78:	4802      	ldr	r0, [pc, #8]	; (803cd84 <SIMCOM_DMA_Init+0x44>)
 803cd7a:	f7f9 fbb7 	bl	80364ec <HAL_UART_Receive_DMA>
}
 803cd7e:	bf00      	nop
 803cd80:	bd80      	pop	{r7, pc}
 803cd82:	bf00      	nop
 803cd84:	20008764 	.word	0x20008764
 803cd88:	20008700 	.word	0x20008700
 803cd8c:	20007fd4 	.word	0x20007fd4

0803cd90 <SIMCOM_Check_Buffer>:

static void SIMCOM_Check_Buffer(void) {
 803cd90:	b580      	push	{r7, lr}
 803cd92:	b082      	sub	sp, #8
 803cd94:	af00      	add	r7, sp, #0
    static size_t old_pos;
    size_t pos;

    /* Calculate current position in buffer */
    pos = SIMCOM_DMA_RX_SZ - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 803cd96:	4b1e      	ldr	r3, [pc, #120]	; (803ce10 <SIMCOM_Check_Buffer+0x80>)
 803cd98:	681b      	ldr	r3, [r3, #0]
 803cd9a:	685b      	ldr	r3, [r3, #4]
 803cd9c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 803cda0:	607b      	str	r3, [r7, #4]
    if (pos != old_pos) { /* Check change in received data */
 803cda2:	4b1c      	ldr	r3, [pc, #112]	; (803ce14 <SIMCOM_Check_Buffer+0x84>)
 803cda4:	681b      	ldr	r3, [r3, #0]
 803cda6:	687a      	ldr	r2, [r7, #4]
 803cda8:	429a      	cmp	r2, r3
 803cdaa:	d023      	beq.n	803cdf4 <SIMCOM_Check_Buffer+0x64>
        if (pos > old_pos) { /* Current position is over previous one */
 803cdac:	4b19      	ldr	r3, [pc, #100]	; (803ce14 <SIMCOM_Check_Buffer+0x84>)
 803cdae:	681b      	ldr	r3, [r3, #0]
 803cdb0:	687a      	ldr	r2, [r7, #4]
 803cdb2:	429a      	cmp	r2, r3
 803cdb4:	d90b      	bls.n	803cdce <SIMCOM_Check_Buffer+0x3e>
            /* We are in "linear" mode */
            /* Process data directly by subtracting "pointers" */
            SIMCOM_Fill_Buffer(&SIMCOM_DMA_RX[old_pos], pos - old_pos);
 803cdb6:	4b17      	ldr	r3, [pc, #92]	; (803ce14 <SIMCOM_Check_Buffer+0x84>)
 803cdb8:	681b      	ldr	r3, [r3, #0]
 803cdba:	4a17      	ldr	r2, [pc, #92]	; (803ce18 <SIMCOM_Check_Buffer+0x88>)
 803cdbc:	1898      	adds	r0, r3, r2
 803cdbe:	4b15      	ldr	r3, [pc, #84]	; (803ce14 <SIMCOM_Check_Buffer+0x84>)
 803cdc0:	681b      	ldr	r3, [r3, #0]
 803cdc2:	687a      	ldr	r2, [r7, #4]
 803cdc4:	1ad3      	subs	r3, r2, r3
 803cdc6:	4619      	mov	r1, r3
 803cdc8:	f000 f828 	bl	803ce1c <SIMCOM_Fill_Buffer>
 803cdcc:	e012      	b.n	803cdf4 <SIMCOM_Check_Buffer+0x64>
        } else {
            /* We are in "overflow" mode */
            /* First process data to the end of buffer */
            SIMCOM_Fill_Buffer(&SIMCOM_DMA_RX[old_pos], SIMCOM_DMA_RX_SZ - old_pos);
 803cdce:	4b11      	ldr	r3, [pc, #68]	; (803ce14 <SIMCOM_Check_Buffer+0x84>)
 803cdd0:	681b      	ldr	r3, [r3, #0]
 803cdd2:	4a11      	ldr	r2, [pc, #68]	; (803ce18 <SIMCOM_Check_Buffer+0x88>)
 803cdd4:	441a      	add	r2, r3
 803cdd6:	4b0f      	ldr	r3, [pc, #60]	; (803ce14 <SIMCOM_Check_Buffer+0x84>)
 803cdd8:	681b      	ldr	r3, [r3, #0]
 803cdda:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 803cdde:	4619      	mov	r1, r3
 803cde0:	4610      	mov	r0, r2
 803cde2:	f000 f81b 	bl	803ce1c <SIMCOM_Fill_Buffer>
            /* Check and continue with beginning of buffer */
            if (pos > 0) {
 803cde6:	687b      	ldr	r3, [r7, #4]
 803cde8:	2b00      	cmp	r3, #0
 803cdea:	d003      	beq.n	803cdf4 <SIMCOM_Check_Buffer+0x64>
                SIMCOM_Fill_Buffer(&SIMCOM_DMA_RX[0], pos);
 803cdec:	6879      	ldr	r1, [r7, #4]
 803cdee:	480a      	ldr	r0, [pc, #40]	; (803ce18 <SIMCOM_Check_Buffer+0x88>)
 803cdf0:	f000 f814 	bl	803ce1c <SIMCOM_Fill_Buffer>
            }
        }
    }
    old_pos = pos; /* Save current position as old */
 803cdf4:	4a07      	ldr	r2, [pc, #28]	; (803ce14 <SIMCOM_Check_Buffer+0x84>)
 803cdf6:	687b      	ldr	r3, [r7, #4]
 803cdf8:	6013      	str	r3, [r2, #0]

    /* Check and manually update if we reached end of buffer */
    if (old_pos == SIMCOM_DMA_RX_SZ) {
 803cdfa:	4b06      	ldr	r3, [pc, #24]	; (803ce14 <SIMCOM_Check_Buffer+0x84>)
 803cdfc:	681b      	ldr	r3, [r3, #0]
 803cdfe:	2b80      	cmp	r3, #128	; 0x80
 803ce00:	d102      	bne.n	803ce08 <SIMCOM_Check_Buffer+0x78>
        old_pos = 0;
 803ce02:	4b04      	ldr	r3, [pc, #16]	; (803ce14 <SIMCOM_Check_Buffer+0x84>)
 803ce04:	2200      	movs	r2, #0
 803ce06:	601a      	str	r2, [r3, #0]
    }
}
 803ce08:	bf00      	nop
 803ce0a:	3708      	adds	r7, #8
 803ce0c:	46bd      	mov	sp, r7
 803ce0e:	bd80      	pop	{r7, pc}
 803ce10:	20008700 	.word	0x20008700
 803ce14:	20008058 	.word	0x20008058
 803ce18:	20007fd4 	.word	0x20007fd4

0803ce1c <SIMCOM_Fill_Buffer>:

static void SIMCOM_Fill_Buffer(const void *data, size_t len) {
 803ce1c:	b580      	push	{r7, lr}
 803ce1e:	b082      	sub	sp, #8
 803ce20:	af00      	add	r7, sp, #0
 803ce22:	6078      	str	r0, [r7, #4]
 803ce24:	6039      	str	r1, [r7, #0]
    /* Write data to buffer */
    memcpy(&SIMCOM_UART_RX[simcom_write], data, len);
 803ce26:	4b09      	ldr	r3, [pc, #36]	; (803ce4c <SIMCOM_Fill_Buffer+0x30>)
 803ce28:	681b      	ldr	r3, [r3, #0]
 803ce2a:	4a09      	ldr	r2, [pc, #36]	; (803ce50 <SIMCOM_Fill_Buffer+0x34>)
 803ce2c:	4413      	add	r3, r2
 803ce2e:	683a      	ldr	r2, [r7, #0]
 803ce30:	6879      	ldr	r1, [r7, #4]
 803ce32:	4618      	mov	r0, r3
 803ce34:	f002 fde3 	bl	803f9fe <memcpy>
    simcom_write += len;
 803ce38:	4b04      	ldr	r3, [pc, #16]	; (803ce4c <SIMCOM_Fill_Buffer+0x30>)
 803ce3a:	681a      	ldr	r2, [r3, #0]
 803ce3c:	683b      	ldr	r3, [r7, #0]
 803ce3e:	4413      	add	r3, r2
 803ce40:	4a02      	ldr	r2, [pc, #8]	; (803ce4c <SIMCOM_Fill_Buffer+0x30>)
 803ce42:	6013      	str	r3, [r2, #0]
}
 803ce44:	bf00      	nop
 803ce46:	3708      	adds	r7, #8
 803ce48:	46bd      	mov	sp, r7
 803ce4a:	bd80      	pop	{r7, pc}
 803ce4c:	20008054 	.word	0x20008054
 803ce50:	20008a9c 	.word	0x20008a9c

0803ce54 <SIMCOM_Reset_Buffer>:

void SIMCOM_Reset_Buffer(void) {
 803ce54:	b580      	push	{r7, lr}
 803ce56:	af00      	add	r7, sp, #0
    // clear rx buffer
    memset(SIMCOM_UART_RX, 0x00, simcom_write);
 803ce58:	4b05      	ldr	r3, [pc, #20]	; (803ce70 <SIMCOM_Reset_Buffer+0x1c>)
 803ce5a:	681b      	ldr	r3, [r3, #0]
 803ce5c:	461a      	mov	r2, r3
 803ce5e:	2100      	movs	r1, #0
 803ce60:	4804      	ldr	r0, [pc, #16]	; (803ce74 <SIMCOM_Reset_Buffer+0x20>)
 803ce62:	f002 fdd7 	bl	803fa14 <memset>
    simcom_write = 0;
 803ce66:	4b02      	ldr	r3, [pc, #8]	; (803ce70 <SIMCOM_Reset_Buffer+0x1c>)
 803ce68:	2200      	movs	r2, #0
 803ce6a:	601a      	str	r2, [r3, #0]
}
 803ce6c:	bf00      	nop
 803ce6e:	bd80      	pop	{r7, pc}
 803ce70:	20008054 	.word	0x20008054
 803ce74:	20008a9c 	.word	0x20008a9c

0803ce78 <SIMCOM_Transmit>:

uint8_t SIMCOM_Transmit(char *pData, uint16_t Size) {
 803ce78:	b580      	push	{r7, lr}
 803ce7a:	b082      	sub	sp, #8
 803ce7c:	af00      	add	r7, sp, #0
 803ce7e:	6078      	str	r0, [r7, #4]
 803ce80:	460b      	mov	r3, r1
 803ce82:	807b      	strh	r3, [r7, #2]
    SIMCOM_Reset_Buffer();
 803ce84:	f7ff ffe6 	bl	803ce54 <SIMCOM_Reset_Buffer>

    return (HAL_UART_Transmit(&huart1, (uint8_t*) pData, Size, HAL_MAX_DELAY) == HAL_OK);
 803ce88:	887a      	ldrh	r2, [r7, #2]
 803ce8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 803ce8e:	6879      	ldr	r1, [r7, #4]
 803ce90:	4806      	ldr	r0, [pc, #24]	; (803ceac <SIMCOM_Transmit+0x34>)
 803ce92:	f7f9 fa92 	bl	80363ba <HAL_UART_Transmit>
 803ce96:	4603      	mov	r3, r0
 803ce98:	2b00      	cmp	r3, #0
 803ce9a:	bf0c      	ite	eq
 803ce9c:	2301      	moveq	r3, #1
 803ce9e:	2300      	movne	r3, #0
 803cea0:	b2db      	uxtb	r3, r3
}
 803cea2:	4618      	mov	r0, r3
 803cea4:	3708      	adds	r7, #8
 803cea6:	46bd      	mov	sp, r7
 803cea8:	bd80      	pop	{r7, pc}
 803ceaa:	bf00      	nop
 803ceac:	20008764 	.word	0x20008764

0803ceb0 <AT_CommandEchoMode>:
static void AT_ParseText(const char *ptr, uint8_t *cnt, char *text, uint8_t size);
static int32_t AT_ParseNumber(const char *ptr, uint8_t *cnt);
//static float AT_ParseFloat(const char *ptr, uint8_t *cnt);

/* Public functions implementation --------------------------------------------*/
SIMCOM_RESULT AT_CommandEchoMode(uint8_t state) {
 803ceb0:	b580      	push	{r7, lr}
 803ceb2:	b084      	sub	sp, #16
 803ceb4:	af00      	add	r7, sp, #0
 803ceb6:	4603      	mov	r3, r0
 803ceb8:	71fb      	strb	r3, [r7, #7]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 803ceba:	2300      	movs	r3, #0
 803cebc:	73fb      	strb	r3, [r7, #15]
    char cmd[6];

    Simcom_Lock();
 803cebe:	f001 fd07 	bl	803e8d0 <Simcom_Lock>
    // Write
    sprintf(cmd, "ATE%d\r", state);
 803cec2:	79fa      	ldrb	r2, [r7, #7]
 803cec4:	f107 0308 	add.w	r3, r7, #8
 803cec8:	490a      	ldr	r1, [pc, #40]	; (803cef4 <AT_CommandEchoMode+0x44>)
 803ceca:	4618      	mov	r0, r3
 803cecc:	f002 fdaa 	bl	803fa24 <siprintf>
    p = AT_CmdWrite(cmd, 500, NULL);
 803ced0:	f107 0308 	add.w	r3, r7, #8
 803ced4:	2200      	movs	r2, #0
 803ced6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 803ceda:	4618      	mov	r0, r3
 803cedc:	f000 ff1e 	bl	803dd1c <AT_CmdWrite>
 803cee0:	4603      	mov	r3, r0
 803cee2:	73fb      	strb	r3, [r7, #15]
    Simcom_Unlock();
 803cee4:	f001 fd02 	bl	803e8ec <Simcom_Unlock>

    return p;
 803cee8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 803ceec:	4618      	mov	r0, r3
 803ceee:	3710      	adds	r7, #16
 803cef0:	46bd      	mov	sp, r7
 803cef2:	bd80      	pop	{r7, pc}
 803cef4:	08043b7c 	.word	0x08043b7c

0803cef8 <AT_SignalQualityReport>:

SIMCOM_RESULT AT_SignalQualityReport(at_csq_t *signal) {
 803cef8:	b590      	push	{r4, r7, lr}
 803cefa:	b087      	sub	sp, #28
 803cefc:	af00      	add	r7, sp, #0
 803cefe:	6078      	str	r0, [r7, #4]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 803cf00:	2300      	movs	r3, #0
 803cf02:	75fb      	strb	r3, [r7, #23]
    uint8_t cnt, len = 0;
 803cf04:	2300      	movs	r3, #0
 803cf06:	75bb      	strb	r3, [r7, #22]
    char *str = NULL;
 803cf08:	2300      	movs	r3, #0
 803cf0a:	60bb      	str	r3, [r7, #8]
    float dBm;

    Simcom_Lock();
 803cf0c:	f001 fce0 	bl	803e8d0 <Simcom_Lock>
    // Read
    p = AT_CmdRead("AT+CSQ\r", 500, "+CSQ: ", &str);
 803cf10:	f107 0308 	add.w	r3, r7, #8
 803cf14:	4a48      	ldr	r2, [pc, #288]	; (803d038 <AT_SignalQualityReport+0x140>)
 803cf16:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 803cf1a:	4848      	ldr	r0, [pc, #288]	; (803d03c <AT_SignalQualityReport+0x144>)
 803cf1c:	f000 ff1c 	bl	803dd58 <AT_CmdRead>
 803cf20:	4603      	mov	r3, r0
 803cf22:	75fb      	strb	r3, [r7, #23]
    if (p > 0) {
 803cf24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 803cf28:	2b00      	cmp	r3, #0
 803cf2a:	dd77      	ble.n	803d01c <AT_SignalQualityReport+0x124>
        signal->rssi = AT_ParseNumber(&str[len], &cnt);
 803cf2c:	68ba      	ldr	r2, [r7, #8]
 803cf2e:	7dbb      	ldrb	r3, [r7, #22]
 803cf30:	4413      	add	r3, r2
 803cf32:	f107 020f 	add.w	r2, r7, #15
 803cf36:	4611      	mov	r1, r2
 803cf38:	4618      	mov	r0, r3
 803cf3a:	f000 ff8f 	bl	803de5c <AT_ParseNumber>
 803cf3e:	4603      	mov	r3, r0
 803cf40:	b2da      	uxtb	r2, r3
 803cf42:	687b      	ldr	r3, [r7, #4]
 803cf44:	701a      	strb	r2, [r3, #0]
        len += cnt + 1;
 803cf46:	7bfa      	ldrb	r2, [r7, #15]
 803cf48:	7dbb      	ldrb	r3, [r7, #22]
 803cf4a:	4413      	add	r3, r2
 803cf4c:	b2db      	uxtb	r3, r3
 803cf4e:	3301      	adds	r3, #1
 803cf50:	75bb      	strb	r3, [r7, #22]
        signal->ber = AT_ParseNumber(&str[len], NULL);
 803cf52:	68ba      	ldr	r2, [r7, #8]
 803cf54:	7dbb      	ldrb	r3, [r7, #22]
 803cf56:	4413      	add	r3, r2
 803cf58:	2100      	movs	r1, #0
 803cf5a:	4618      	mov	r0, r3
 803cf5c:	f000 ff7e 	bl	803de5c <AT_ParseNumber>
 803cf60:	4603      	mov	r3, r0
 803cf62:	b2da      	uxtb	r2, r3
 803cf64:	687b      	ldr	r3, [r7, #4]
 803cf66:	705a      	strb	r2, [r3, #1]

        // Formatting
        {
            // Handle not detectable value
            if (signal->rssi > 31) {
 803cf68:	687b      	ldr	r3, [r7, #4]
 803cf6a:	781b      	ldrb	r3, [r3, #0]
 803cf6c:	2b1f      	cmp	r3, #31
 803cf6e:	d902      	bls.n	803cf76 <AT_SignalQualityReport+0x7e>
                signal->rssi = 0;
 803cf70:	687b      	ldr	r3, [r7, #4]
 803cf72:	2200      	movs	r2, #0
 803cf74:	701a      	strb	r2, [r3, #0]
            }

            // Scale RSSI to dBm
            dBm = (signal->rssi * 63.0 / 31.0) - 115.0;
 803cf76:	687b      	ldr	r3, [r7, #4]
 803cf78:	781b      	ldrb	r3, [r3, #0]
 803cf7a:	4618      	mov	r0, r3
 803cf7c:	f7e3 fb0a 	bl	8020594 <__aeabi_i2d>
 803cf80:	f04f 0200 	mov.w	r2, #0
 803cf84:	4b2e      	ldr	r3, [pc, #184]	; (803d040 <AT_SignalQualityReport+0x148>)
 803cf86:	f7e3 fb6f 	bl	8020668 <__aeabi_dmul>
 803cf8a:	4603      	mov	r3, r0
 803cf8c:	460c      	mov	r4, r1
 803cf8e:	4618      	mov	r0, r3
 803cf90:	4621      	mov	r1, r4
 803cf92:	f04f 0200 	mov.w	r2, #0
 803cf96:	4b2b      	ldr	r3, [pc, #172]	; (803d044 <AT_SignalQualityReport+0x14c>)
 803cf98:	f7e3 fc90 	bl	80208bc <__aeabi_ddiv>
 803cf9c:	4603      	mov	r3, r0
 803cf9e:	460c      	mov	r4, r1
 803cfa0:	4618      	mov	r0, r3
 803cfa2:	4621      	mov	r1, r4
 803cfa4:	a322      	add	r3, pc, #136	; (adr r3, 803d030 <AT_SignalQualityReport+0x138>)
 803cfa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 803cfaa:	f7e3 f9a5 	bl	80202f8 <__aeabi_dsub>
 803cfae:	4603      	mov	r3, r0
 803cfb0:	460c      	mov	r4, r1
 803cfb2:	4618      	mov	r0, r3
 803cfb4:	4621      	mov	r1, r4
 803cfb6:	f7e3 fe4f 	bl	8020c58 <__aeabi_d2f>
 803cfba:	4603      	mov	r3, r0
 803cfbc:	613b      	str	r3, [r7, #16]
            // Scale dBm to percentage
            signal->percent = (dBm + 115.0) * 100.0 / 63.0;
 803cfbe:	6938      	ldr	r0, [r7, #16]
 803cfc0:	f7e3 fafa 	bl	80205b8 <__aeabi_f2d>
 803cfc4:	a31a      	add	r3, pc, #104	; (adr r3, 803d030 <AT_SignalQualityReport+0x138>)
 803cfc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 803cfca:	f7e3 f997 	bl	80202fc <__adddf3>
 803cfce:	4603      	mov	r3, r0
 803cfd0:	460c      	mov	r4, r1
 803cfd2:	4618      	mov	r0, r3
 803cfd4:	4621      	mov	r1, r4
 803cfd6:	f04f 0200 	mov.w	r2, #0
 803cfda:	4b1b      	ldr	r3, [pc, #108]	; (803d048 <AT_SignalQualityReport+0x150>)
 803cfdc:	f7e3 fb44 	bl	8020668 <__aeabi_dmul>
 803cfe0:	4603      	mov	r3, r0
 803cfe2:	460c      	mov	r4, r1
 803cfe4:	4618      	mov	r0, r3
 803cfe6:	4621      	mov	r1, r4
 803cfe8:	f04f 0200 	mov.w	r2, #0
 803cfec:	4b14      	ldr	r3, [pc, #80]	; (803d040 <AT_SignalQualityReport+0x148>)
 803cfee:	f7e3 fc65 	bl	80208bc <__aeabi_ddiv>
 803cff2:	4603      	mov	r3, r0
 803cff4:	460c      	mov	r4, r1
 803cff6:	4618      	mov	r0, r3
 803cff8:	4621      	mov	r1, r4
 803cffa:	f7e3 fe0d 	bl	8020c18 <__aeabi_d2uiz>
 803cffe:	4603      	mov	r3, r0
 803d000:	b2da      	uxtb	r2, r3
 803d002:	687b      	ldr	r3, [r7, #4]
 803d004:	709a      	strb	r2, [r3, #2]

            // debugging
            LOG_Str("\nSimcom:RSSI = ");
 803d006:	4811      	ldr	r0, [pc, #68]	; (803d04c <AT_SignalQualityReport+0x154>)
 803d008:	f001 f9f4 	bl	803e3f4 <LOG_Str>
            LOG_Int(signal->percent);
 803d00c:	687b      	ldr	r3, [r7, #4]
 803d00e:	789b      	ldrb	r3, [r3, #2]
 803d010:	4618      	mov	r0, r3
 803d012:	f001 f981 	bl	803e318 <LOG_Int>
            LOG_StrLn("%");
 803d016:	480e      	ldr	r0, [pc, #56]	; (803d050 <AT_SignalQualityReport+0x158>)
 803d018:	f001 fa04 	bl	803e424 <LOG_StrLn>
        }
    }
    Simcom_Unlock();
 803d01c:	f001 fc66 	bl	803e8ec <Simcom_Unlock>

    return p;
 803d020:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 803d024:	4618      	mov	r0, r3
 803d026:	371c      	adds	r7, #28
 803d028:	46bd      	mov	sp, r7
 803d02a:	bd90      	pop	{r4, r7, pc}
 803d02c:	f3af 8000 	nop.w
 803d030:	00000000 	.word	0x00000000
 803d034:	405cc000 	.word	0x405cc000
 803d038:	08043b84 	.word	0x08043b84
 803d03c:	08043b8c 	.word	0x08043b8c
 803d040:	404f8000 	.word	0x404f8000
 803d044:	403f0000 	.word	0x403f0000
 803d048:	40590000 	.word	0x40590000
 803d04c:	08043b94 	.word	0x08043b94
 803d050:	08043ba4 	.word	0x08043ba4

0803d054 <AT_ConnectionStatusSingle>:

SIMCOM_RESULT AT_ConnectionStatusSingle(AT_CIPSTATUS *state) {
 803d054:	b590      	push	{r4, r7, lr}
 803d056:	b08b      	sub	sp, #44	; 0x2c
 803d058:	af00      	add	r7, sp, #0
 803d05a:	6078      	str	r0, [r7, #4]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 803d05c:	2300      	movs	r3, #0
 803d05e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    char status[20];
    char *str = NULL;
 803d062:	2300      	movs	r3, #0
 803d064:	60fb      	str	r3, [r7, #12]

    Simcom_Lock();
 803d066:	f001 fc33 	bl	803e8d0 <Simcom_Lock>
    // Read
    p = AT_CmdRead("AT+CIPSTATUS\r", 500, "STATE: ", &str);
 803d06a:	f107 030c 	add.w	r3, r7, #12
 803d06e:	4a7d      	ldr	r2, [pc, #500]	; (803d264 <AT_ConnectionStatusSingle+0x210>)
 803d070:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 803d074:	487c      	ldr	r0, [pc, #496]	; (803d268 <AT_ConnectionStatusSingle+0x214>)
 803d076:	f000 fe6f 	bl	803dd58 <AT_CmdRead>
 803d07a:	4603      	mov	r3, r0
 803d07c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (p > 0) {
 803d080:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 803d084:	2b00      	cmp	r3, #0
 803d086:	f340 80dd 	ble.w	803d244 <AT_ConnectionStatusSingle+0x1f0>
        AT_ParseText(&str[0], NULL, status, sizeof(status));
 803d08a:	68f8      	ldr	r0, [r7, #12]
 803d08c:	f107 0210 	add.w	r2, r7, #16
 803d090:	2314      	movs	r3, #20
 803d092:	2100      	movs	r1, #0
 803d094:	f000 fe98 	bl	803ddc8 <AT_ParseText>

        // decide
        if (!strcmp(status, "IP INITIAL")) {
 803d098:	f107 0310 	add.w	r3, r7, #16
 803d09c:	4973      	ldr	r1, [pc, #460]	; (803d26c <AT_ConnectionStatusSingle+0x218>)
 803d09e:	4618      	mov	r0, r3
 803d0a0:	f7e3 f8be 	bl	8020220 <strcmp>
 803d0a4:	4603      	mov	r3, r0
 803d0a6:	2b00      	cmp	r3, #0
 803d0a8:	d107      	bne.n	803d0ba <AT_ConnectionStatusSingle+0x66>
            *state = CIPSTAT_IP_INITIAL;
 803d0aa:	687a      	ldr	r2, [r7, #4]
 803d0ac:	f04f 0300 	mov.w	r3, #0
 803d0b0:	f04f 0400 	mov.w	r4, #0
 803d0b4:	e9c2 3400 	strd	r3, r4, [r2]
 803d0b8:	e0cb      	b.n	803d252 <AT_ConnectionStatusSingle+0x1fe>
        } else if (!strcmp(status, "IP START")) {
 803d0ba:	f107 0310 	add.w	r3, r7, #16
 803d0be:	496c      	ldr	r1, [pc, #432]	; (803d270 <AT_ConnectionStatusSingle+0x21c>)
 803d0c0:	4618      	mov	r0, r3
 803d0c2:	f7e3 f8ad 	bl	8020220 <strcmp>
 803d0c6:	4603      	mov	r3, r0
 803d0c8:	2b00      	cmp	r3, #0
 803d0ca:	d107      	bne.n	803d0dc <AT_ConnectionStatusSingle+0x88>
            *state = CIPSTAT_IP_START;
 803d0cc:	687a      	ldr	r2, [r7, #4]
 803d0ce:	f04f 0301 	mov.w	r3, #1
 803d0d2:	f04f 0400 	mov.w	r4, #0
 803d0d6:	e9c2 3400 	strd	r3, r4, [r2]
 803d0da:	e0ba      	b.n	803d252 <AT_ConnectionStatusSingle+0x1fe>
        } else if (!strcmp(status, "IP CONFIG")) {
 803d0dc:	f107 0310 	add.w	r3, r7, #16
 803d0e0:	4964      	ldr	r1, [pc, #400]	; (803d274 <AT_ConnectionStatusSingle+0x220>)
 803d0e2:	4618      	mov	r0, r3
 803d0e4:	f7e3 f89c 	bl	8020220 <strcmp>
 803d0e8:	4603      	mov	r3, r0
 803d0ea:	2b00      	cmp	r3, #0
 803d0ec:	d107      	bne.n	803d0fe <AT_ConnectionStatusSingle+0xaa>
            *state = CIPSTAT_IP_CONFIG;
 803d0ee:	687a      	ldr	r2, [r7, #4]
 803d0f0:	f04f 0302 	mov.w	r3, #2
 803d0f4:	f04f 0400 	mov.w	r4, #0
 803d0f8:	e9c2 3400 	strd	r3, r4, [r2]
 803d0fc:	e0a9      	b.n	803d252 <AT_ConnectionStatusSingle+0x1fe>
        } else if (!strcmp(status, "IP GPRSACT")) {
 803d0fe:	f107 0310 	add.w	r3, r7, #16
 803d102:	495d      	ldr	r1, [pc, #372]	; (803d278 <AT_ConnectionStatusSingle+0x224>)
 803d104:	4618      	mov	r0, r3
 803d106:	f7e3 f88b 	bl	8020220 <strcmp>
 803d10a:	4603      	mov	r3, r0
 803d10c:	2b00      	cmp	r3, #0
 803d10e:	d107      	bne.n	803d120 <AT_ConnectionStatusSingle+0xcc>
            *state = CIPSTAT_IP_GPRSACT;
 803d110:	687a      	ldr	r2, [r7, #4]
 803d112:	f04f 0303 	mov.w	r3, #3
 803d116:	f04f 0400 	mov.w	r4, #0
 803d11a:	e9c2 3400 	strd	r3, r4, [r2]
 803d11e:	e098      	b.n	803d252 <AT_ConnectionStatusSingle+0x1fe>
        } else if (!strcmp(status, "IP STATUS")) {
 803d120:	f107 0310 	add.w	r3, r7, #16
 803d124:	4955      	ldr	r1, [pc, #340]	; (803d27c <AT_ConnectionStatusSingle+0x228>)
 803d126:	4618      	mov	r0, r3
 803d128:	f7e3 f87a 	bl	8020220 <strcmp>
 803d12c:	4603      	mov	r3, r0
 803d12e:	2b00      	cmp	r3, #0
 803d130:	d107      	bne.n	803d142 <AT_ConnectionStatusSingle+0xee>
            *state = CIPSTAT_IP_STATUS;
 803d132:	687a      	ldr	r2, [r7, #4]
 803d134:	f04f 0304 	mov.w	r3, #4
 803d138:	f04f 0400 	mov.w	r4, #0
 803d13c:	e9c2 3400 	strd	r3, r4, [r2]
 803d140:	e087      	b.n	803d252 <AT_ConnectionStatusSingle+0x1fe>
        } else if (!strcmp(status, "TCP CONNECTING")
 803d142:	f107 0310 	add.w	r3, r7, #16
 803d146:	494e      	ldr	r1, [pc, #312]	; (803d280 <AT_ConnectionStatusSingle+0x22c>)
 803d148:	4618      	mov	r0, r3
 803d14a:	f7e3 f869 	bl	8020220 <strcmp>
 803d14e:	4603      	mov	r3, r0
 803d150:	2b00      	cmp	r3, #0
 803d152:	d011      	beq.n	803d178 <AT_ConnectionStatusSingle+0x124>
                || !strcmp(status, "UDP CONNECTING")
 803d154:	f107 0310 	add.w	r3, r7, #16
 803d158:	494a      	ldr	r1, [pc, #296]	; (803d284 <AT_ConnectionStatusSingle+0x230>)
 803d15a:	4618      	mov	r0, r3
 803d15c:	f7e3 f860 	bl	8020220 <strcmp>
 803d160:	4603      	mov	r3, r0
 803d162:	2b00      	cmp	r3, #0
 803d164:	d008      	beq.n	803d178 <AT_ConnectionStatusSingle+0x124>
                || !strcmp(status, "SERVER LISTENING")) {
 803d166:	f107 0310 	add.w	r3, r7, #16
 803d16a:	4947      	ldr	r1, [pc, #284]	; (803d288 <AT_ConnectionStatusSingle+0x234>)
 803d16c:	4618      	mov	r0, r3
 803d16e:	f7e3 f857 	bl	8020220 <strcmp>
 803d172:	4603      	mov	r3, r0
 803d174:	2b00      	cmp	r3, #0
 803d176:	d107      	bne.n	803d188 <AT_ConnectionStatusSingle+0x134>
            *state = CIPSTAT_CONNECTING;
 803d178:	687a      	ldr	r2, [r7, #4]
 803d17a:	f04f 0305 	mov.w	r3, #5
 803d17e:	f04f 0400 	mov.w	r4, #0
 803d182:	e9c2 3400 	strd	r3, r4, [r2]
 803d186:	e064      	b.n	803d252 <AT_ConnectionStatusSingle+0x1fe>
        } else if (!strcmp(status, "CONNECT OK")) {
 803d188:	f107 0310 	add.w	r3, r7, #16
 803d18c:	493f      	ldr	r1, [pc, #252]	; (803d28c <AT_ConnectionStatusSingle+0x238>)
 803d18e:	4618      	mov	r0, r3
 803d190:	f7e3 f846 	bl	8020220 <strcmp>
 803d194:	4603      	mov	r3, r0
 803d196:	2b00      	cmp	r3, #0
 803d198:	d107      	bne.n	803d1aa <AT_ConnectionStatusSingle+0x156>
            *state = CIPSTAT_CONNECT_OK;
 803d19a:	687a      	ldr	r2, [r7, #4]
 803d19c:	f04f 0306 	mov.w	r3, #6
 803d1a0:	f04f 0400 	mov.w	r4, #0
 803d1a4:	e9c2 3400 	strd	r3, r4, [r2]
 803d1a8:	e053      	b.n	803d252 <AT_ConnectionStatusSingle+0x1fe>
        } else if (!strcmp(status, "TCP CLOSING")
 803d1aa:	f107 0310 	add.w	r3, r7, #16
 803d1ae:	4938      	ldr	r1, [pc, #224]	; (803d290 <AT_ConnectionStatusSingle+0x23c>)
 803d1b0:	4618      	mov	r0, r3
 803d1b2:	f7e3 f835 	bl	8020220 <strcmp>
 803d1b6:	4603      	mov	r3, r0
 803d1b8:	2b00      	cmp	r3, #0
 803d1ba:	d008      	beq.n	803d1ce <AT_ConnectionStatusSingle+0x17a>
                || !strcmp(status, "UDP CLOSING")) {
 803d1bc:	f107 0310 	add.w	r3, r7, #16
 803d1c0:	4934      	ldr	r1, [pc, #208]	; (803d294 <AT_ConnectionStatusSingle+0x240>)
 803d1c2:	4618      	mov	r0, r3
 803d1c4:	f7e3 f82c 	bl	8020220 <strcmp>
 803d1c8:	4603      	mov	r3, r0
 803d1ca:	2b00      	cmp	r3, #0
 803d1cc:	d107      	bne.n	803d1de <AT_ConnectionStatusSingle+0x18a>
            *state = CIPSTAT_CLOSING;
 803d1ce:	687a      	ldr	r2, [r7, #4]
 803d1d0:	f04f 0307 	mov.w	r3, #7
 803d1d4:	f04f 0400 	mov.w	r4, #0
 803d1d8:	e9c2 3400 	strd	r3, r4, [r2]
 803d1dc:	e039      	b.n	803d252 <AT_ConnectionStatusSingle+0x1fe>
        } else if (!strcmp(status, "TCP CLOSED")
 803d1de:	f107 0310 	add.w	r3, r7, #16
 803d1e2:	492d      	ldr	r1, [pc, #180]	; (803d298 <AT_ConnectionStatusSingle+0x244>)
 803d1e4:	4618      	mov	r0, r3
 803d1e6:	f7e3 f81b 	bl	8020220 <strcmp>
 803d1ea:	4603      	mov	r3, r0
 803d1ec:	2b00      	cmp	r3, #0
 803d1ee:	d008      	beq.n	803d202 <AT_ConnectionStatusSingle+0x1ae>
                || !strcmp(status, "UDP CLOSED")) {
 803d1f0:	f107 0310 	add.w	r3, r7, #16
 803d1f4:	4929      	ldr	r1, [pc, #164]	; (803d29c <AT_ConnectionStatusSingle+0x248>)
 803d1f6:	4618      	mov	r0, r3
 803d1f8:	f7e3 f812 	bl	8020220 <strcmp>
 803d1fc:	4603      	mov	r3, r0
 803d1fe:	2b00      	cmp	r3, #0
 803d200:	d107      	bne.n	803d212 <AT_ConnectionStatusSingle+0x1be>
            *state = CIPSTAT_CLOSED;
 803d202:	687a      	ldr	r2, [r7, #4]
 803d204:	f04f 0308 	mov.w	r3, #8
 803d208:	f04f 0400 	mov.w	r4, #0
 803d20c:	e9c2 3400 	strd	r3, r4, [r2]
 803d210:	e01f      	b.n	803d252 <AT_ConnectionStatusSingle+0x1fe>
        } else if (!strcmp(status, "PDP DEACT")) {
 803d212:	f107 0310 	add.w	r3, r7, #16
 803d216:	4922      	ldr	r1, [pc, #136]	; (803d2a0 <AT_ConnectionStatusSingle+0x24c>)
 803d218:	4618      	mov	r0, r3
 803d21a:	f7e3 f801 	bl	8020220 <strcmp>
 803d21e:	4603      	mov	r3, r0
 803d220:	2b00      	cmp	r3, #0
 803d222:	d107      	bne.n	803d234 <AT_ConnectionStatusSingle+0x1e0>
            *state = CIPSTAT_PDP_DEACT;
 803d224:	687a      	ldr	r2, [r7, #4]
 803d226:	f04f 0309 	mov.w	r3, #9
 803d22a:	f04f 0400 	mov.w	r4, #0
 803d22e:	e9c2 3400 	strd	r3, r4, [r2]
 803d232:	e00e      	b.n	803d252 <AT_ConnectionStatusSingle+0x1fe>
        } else {
            *state = CIPSTAT_UNKNOWN;
 803d234:	687a      	ldr	r2, [r7, #4]
 803d236:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 803d23a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 803d23e:	e9c2 3400 	strd	r3, r4, [r2]
 803d242:	e006      	b.n	803d252 <AT_ConnectionStatusSingle+0x1fe>
        }
    } else {
        *state = CIPSTAT_UNKNOWN;
 803d244:	687a      	ldr	r2, [r7, #4]
 803d246:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 803d24a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 803d24e:	e9c2 3400 	strd	r3, r4, [r2]
    }
    Simcom_Unlock();
 803d252:	f001 fb4b 	bl	803e8ec <Simcom_Unlock>

    return p;
 803d256:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 803d25a:	4618      	mov	r0, r3
 803d25c:	372c      	adds	r7, #44	; 0x2c
 803d25e:	46bd      	mov	sp, r7
 803d260:	bd90      	pop	{r4, r7, pc}
 803d262:	bf00      	nop
 803d264:	08043ba8 	.word	0x08043ba8
 803d268:	08043bb0 	.word	0x08043bb0
 803d26c:	08043bc0 	.word	0x08043bc0
 803d270:	08043bcc 	.word	0x08043bcc
 803d274:	08043bd8 	.word	0x08043bd8
 803d278:	08043be4 	.word	0x08043be4
 803d27c:	08043bf0 	.word	0x08043bf0
 803d280:	08043bfc 	.word	0x08043bfc
 803d284:	08043c0c 	.word	0x08043c0c
 803d288:	08043c1c 	.word	0x08043c1c
 803d28c:	08043c30 	.word	0x08043c30
 803d290:	08043c3c 	.word	0x08043c3c
 803d294:	08043c48 	.word	0x08043c48
 803d298:	08043c54 	.word	0x08043c54
 803d29c:	08043c60 	.word	0x08043c60
 803d2a0:	08043c6c 	.word	0x08043c6c

0803d2a4 <AT_RadioAccessTechnology>:

SIMCOM_RESULT AT_RadioAccessTechnology(AT_MODE mode, at_cnmp_t *param) {
 803d2a4:	b580      	push	{r7, lr}
 803d2a6:	b08a      	sub	sp, #40	; 0x28
 803d2a8:	af00      	add	r7, sp, #0
 803d2aa:	4603      	mov	r3, r0
 803d2ac:	6039      	str	r1, [r7, #0]
 803d2ae:	71fb      	strb	r3, [r7, #7]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 803d2b0:	2300      	movs	r3, #0
 803d2b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t cnt, len = 0;
 803d2b6:	2300      	movs	r3, #0
 803d2b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    char *str = NULL, cmd[14];
 803d2bc:	2300      	movs	r3, #0
 803d2be:	623b      	str	r3, [r7, #32]

    // Copy by value
    at_cnmp_t tmp = *param;
 803d2c0:	683a      	ldr	r2, [r7, #0]
 803d2c2:	f107 0308 	add.w	r3, r7, #8
 803d2c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 803d2ca:	e883 0003 	stmia.w	r3, {r0, r1}

    Simcom_Lock();
 803d2ce:	f001 faff 	bl	803e8d0 <Simcom_Lock>
    // Read
    p = AT_CmdRead("AT+CNMP?\r", 500, "+CNMP: ", &str);
 803d2d2:	f107 0320 	add.w	r3, r7, #32
 803d2d6:	4a3a      	ldr	r2, [pc, #232]	; (803d3c0 <AT_RadioAccessTechnology+0x11c>)
 803d2d8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 803d2dc:	4839      	ldr	r0, [pc, #228]	; (803d3c4 <AT_RadioAccessTechnology+0x120>)
 803d2de:	f000 fd3b 	bl	803dd58 <AT_CmdRead>
 803d2e2:	4603      	mov	r3, r0
 803d2e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (p > 0) {
 803d2e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 803d2ec:	2b00      	cmp	r3, #0
 803d2ee:	dd5e      	ble.n	803d3ae <AT_RadioAccessTechnology+0x10a>
        param->mode = AT_ParseNumber(&str[len], &cnt);
 803d2f0:	6a3a      	ldr	r2, [r7, #32]
 803d2f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 803d2f6:	4413      	add	r3, r2
 803d2f8:	f107 0225 	add.w	r2, r7, #37	; 0x25
 803d2fc:	4611      	mov	r1, r2
 803d2fe:	4618      	mov	r0, r3
 803d300:	f000 fdac 	bl	803de5c <AT_ParseNumber>
 803d304:	4603      	mov	r3, r0
 803d306:	461a      	mov	r2, r3
 803d308:	683b      	ldr	r3, [r7, #0]
 803d30a:	601a      	str	r2, [r3, #0]
        if (param->mode == CNMP_ACT_AUTO) {
 803d30c:	683b      	ldr	r3, [r7, #0]
 803d30e:	681b      	ldr	r3, [r3, #0]
 803d310:	2b02      	cmp	r3, #2
 803d312:	d116      	bne.n	803d342 <AT_RadioAccessTechnology+0x9e>
            len += cnt + 1;
 803d314:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 803d318:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 803d31c:	4413      	add	r3, r2
 803d31e:	b2db      	uxtb	r3, r3
 803d320:	3301      	adds	r3, #1
 803d322:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            param->preferred = AT_ParseNumber(&str[len], &cnt);
 803d326:	6a3a      	ldr	r2, [r7, #32]
 803d328:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 803d32c:	4413      	add	r3, r2
 803d32e:	f107 0225 	add.w	r2, r7, #37	; 0x25
 803d332:	4611      	mov	r1, r2
 803d334:	4618      	mov	r0, r3
 803d336:	f000 fd91 	bl	803de5c <AT_ParseNumber>
 803d33a:	4603      	mov	r3, r0
 803d33c:	461a      	mov	r2, r3
 803d33e:	683b      	ldr	r3, [r7, #0]
 803d340:	605a      	str	r2, [r3, #4]
        }

        // Write
        if (mode == ATW) {
 803d342:	79fb      	ldrb	r3, [r7, #7]
 803d344:	2b00      	cmp	r3, #0
 803d346:	d12a      	bne.n	803d39e <AT_RadioAccessTechnology+0xfa>
            if (memcmp(&tmp, param, sizeof(at_cnmp_t)) != 0) {
 803d348:	f107 0308 	add.w	r3, r7, #8
 803d34c:	2208      	movs	r2, #8
 803d34e:	6839      	ldr	r1, [r7, #0]
 803d350:	4618      	mov	r0, r3
 803d352:	f002 fb45 	bl	803f9e0 <memcmp>
 803d356:	4603      	mov	r3, r0
 803d358:	2b00      	cmp	r3, #0
 803d35a:	d028      	beq.n	803d3ae <AT_RadioAccessTechnology+0x10a>
                if (tmp.mode == CNMP_ACT_AUTO) {
 803d35c:	68bb      	ldr	r3, [r7, #8]
 803d35e:	2b02      	cmp	r3, #2
 803d360:	d109      	bne.n	803d376 <AT_RadioAccessTechnology+0xd2>
                    sprintf(cmd, "AT+CNMP=%d%d\r", param->mode, param->preferred);
 803d362:	683b      	ldr	r3, [r7, #0]
 803d364:	681a      	ldr	r2, [r3, #0]
 803d366:	683b      	ldr	r3, [r7, #0]
 803d368:	685b      	ldr	r3, [r3, #4]
 803d36a:	f107 0010 	add.w	r0, r7, #16
 803d36e:	4916      	ldr	r1, [pc, #88]	; (803d3c8 <AT_RadioAccessTechnology+0x124>)
 803d370:	f002 fb58 	bl	803fa24 <siprintf>
 803d374:	e007      	b.n	803d386 <AT_RadioAccessTechnology+0xe2>
                } else {
                    sprintf(cmd, "AT+CNMP=%d\r", param->mode);
 803d376:	683b      	ldr	r3, [r7, #0]
 803d378:	681a      	ldr	r2, [r3, #0]
 803d37a:	f107 0310 	add.w	r3, r7, #16
 803d37e:	4913      	ldr	r1, [pc, #76]	; (803d3cc <AT_RadioAccessTechnology+0x128>)
 803d380:	4618      	mov	r0, r3
 803d382:	f002 fb4f 	bl	803fa24 <siprintf>
                }

                p = AT_CmdWrite(cmd, 10000, NULL);
 803d386:	f107 0310 	add.w	r3, r7, #16
 803d38a:	2200      	movs	r2, #0
 803d38c:	f242 7110 	movw	r1, #10000	; 0x2710
 803d390:	4618      	mov	r0, r3
 803d392:	f000 fcc3 	bl	803dd1c <AT_CmdWrite>
 803d396:	4603      	mov	r3, r0
 803d398:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 803d39c:	e007      	b.n	803d3ae <AT_RadioAccessTechnology+0x10a>
            }
        } else {
            *param = tmp;
 803d39e:	683b      	ldr	r3, [r7, #0]
 803d3a0:	461a      	mov	r2, r3
 803d3a2:	f107 0308 	add.w	r3, r7, #8
 803d3a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 803d3aa:	e882 0003 	stmia.w	r2, {r0, r1}
        }
    }
    Simcom_Unlock();
 803d3ae:	f001 fa9d 	bl	803e8ec <Simcom_Unlock>

    return p;
 803d3b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 803d3b6:	4618      	mov	r0, r3
 803d3b8:	3728      	adds	r7, #40	; 0x28
 803d3ba:	46bd      	mov	sp, r7
 803d3bc:	bd80      	pop	{r7, pc}
 803d3be:	bf00      	nop
 803d3c0:	08043c78 	.word	0x08043c78
 803d3c4:	08043c80 	.word	0x08043c80
 803d3c8:	08043c8c 	.word	0x08043c8c
 803d3cc:	08043c9c 	.word	0x08043c9c

0803d3d0 <AT_NetworkAttachedStatus>:

SIMCOM_RESULT AT_NetworkAttachedStatus(AT_MODE mode, at_csact_t *param) {
 803d3d0:	b590      	push	{r4, r7, lr}
 803d3d2:	b08d      	sub	sp, #52	; 0x34
 803d3d4:	af00      	add	r7, sp, #0
 803d3d6:	4603      	mov	r3, r0
 803d3d8:	6039      	str	r1, [r7, #0]
 803d3da:	71fb      	strb	r3, [r7, #7]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 803d3dc:	2300      	movs	r3, #0
 803d3de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t cnt, len = 0;
 803d3e2:	2300      	movs	r3, #0
 803d3e4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    char *str = NULL, cmd[14];
 803d3e8:	2300      	movs	r3, #0
 803d3ea:	62bb      	str	r3, [r7, #40]	; 0x28

    // Copy by value
    at_csact_t tmp = *param;
 803d3ec:	683a      	ldr	r2, [r7, #0]
 803d3ee:	f107 030c 	add.w	r3, r7, #12
 803d3f2:	ca07      	ldmia	r2, {r0, r1, r2}
 803d3f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    Simcom_Lock();
 803d3f8:	f001 fa6a 	bl	803e8d0 <Simcom_Lock>
    // Read
    p = AT_CmdRead("AT+CSACT?\r", 500, "+CSACT: ", &str);
 803d3fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 803d400:	4a46      	ldr	r2, [pc, #280]	; (803d51c <AT_NetworkAttachedStatus+0x14c>)
 803d402:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 803d406:	4846      	ldr	r0, [pc, #280]	; (803d520 <AT_NetworkAttachedStatus+0x150>)
 803d408:	f000 fca6 	bl	803dd58 <AT_CmdRead>
 803d40c:	4603      	mov	r3, r0
 803d40e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (p > 0) {
 803d412:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 803d416:	2b00      	cmp	r3, #0
 803d418:	dd77      	ble.n	803d50a <AT_NetworkAttachedStatus+0x13a>
        tmp.act = AT_ParseNumber(&str[len], &cnt);
 803d41a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 803d41c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 803d420:	4413      	add	r3, r2
 803d422:	f107 022d 	add.w	r2, r7, #45	; 0x2d
 803d426:	4611      	mov	r1, r2
 803d428:	4618      	mov	r0, r3
 803d42a:	f000 fd17 	bl	803de5c <AT_ParseNumber>
 803d42e:	4603      	mov	r3, r0
 803d430:	60fb      	str	r3, [r7, #12]
        len += cnt + 1;
 803d432:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 803d436:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 803d43a:	4413      	add	r3, r2
 803d43c:	b2db      	uxtb	r3, r3
 803d43e:	3301      	adds	r3, #1
 803d440:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        AT_ParseText(&str[len], &cnt, tmp.rac, sizeof(tmp.rac));
 803d444:	6aba      	ldr	r2, [r7, #40]	; 0x28
 803d446:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 803d44a:	18d0      	adds	r0, r2, r3
 803d44c:	f107 030c 	add.w	r3, r7, #12
 803d450:	1d1a      	adds	r2, r3, #4
 803d452:	f107 012d 	add.w	r1, r7, #45	; 0x2d
 803d456:	2303      	movs	r3, #3
 803d458:	f000 fcb6 	bl	803ddc8 <AT_ParseText>
        len += cnt + 1;
 803d45c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 803d460:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 803d464:	4413      	add	r3, r2
 803d466:	b2db      	uxtb	r3, r3
 803d468:	3301      	adds	r3, #1
 803d46a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        tmp.creg = AT_ParseNumber(&str[len], &cnt);
 803d46e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 803d470:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 803d474:	4413      	add	r3, r2
 803d476:	f107 022d 	add.w	r2, r7, #45	; 0x2d
 803d47a:	4611      	mov	r1, r2
 803d47c:	4618      	mov	r0, r3
 803d47e:	f000 fced 	bl	803de5c <AT_ParseNumber>
 803d482:	4603      	mov	r3, r0
 803d484:	b2db      	uxtb	r3, r3
 803d486:	74fb      	strb	r3, [r7, #19]
        len += cnt + 1;
 803d488:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 803d48c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 803d490:	4413      	add	r3, r2
 803d492:	b2db      	uxtb	r3, r3
 803d494:	3301      	adds	r3, #1
 803d496:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        tmp.cgreg = AT_ParseNumber(&str[len], &cnt);
 803d49a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 803d49c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 803d4a0:	4413      	add	r3, r2
 803d4a2:	f107 022d 	add.w	r2, r7, #45	; 0x2d
 803d4a6:	4611      	mov	r1, r2
 803d4a8:	4618      	mov	r0, r3
 803d4aa:	f000 fcd7 	bl	803de5c <AT_ParseNumber>
 803d4ae:	4603      	mov	r3, r0
 803d4b0:	b2db      	uxtb	r3, r3
 803d4b2:	753b      	strb	r3, [r7, #20]

        // Write
        if (mode == ATW) {
 803d4b4:	79fb      	ldrb	r3, [r7, #7]
 803d4b6:	2b00      	cmp	r3, #0
 803d4b8:	d11f      	bne.n	803d4fa <AT_NetworkAttachedStatus+0x12a>
            if (tmp.cgreg != param->creg || tmp.cgreg != param->cgreg) {
 803d4ba:	7d3a      	ldrb	r2, [r7, #20]
 803d4bc:	683b      	ldr	r3, [r7, #0]
 803d4be:	79db      	ldrb	r3, [r3, #7]
 803d4c0:	429a      	cmp	r2, r3
 803d4c2:	d104      	bne.n	803d4ce <AT_NetworkAttachedStatus+0xfe>
 803d4c4:	7d3a      	ldrb	r2, [r7, #20]
 803d4c6:	683b      	ldr	r3, [r7, #0]
 803d4c8:	7a1b      	ldrb	r3, [r3, #8]
 803d4ca:	429a      	cmp	r2, r3
 803d4cc:	d01d      	beq.n	803d50a <AT_NetworkAttachedStatus+0x13a>
                sprintf(cmd, "AT+CSACT=%d,%d\r", param->creg, param->cgreg);
 803d4ce:	683b      	ldr	r3, [r7, #0]
 803d4d0:	79db      	ldrb	r3, [r3, #7]
 803d4d2:	461a      	mov	r2, r3
 803d4d4:	683b      	ldr	r3, [r7, #0]
 803d4d6:	7a1b      	ldrb	r3, [r3, #8]
 803d4d8:	f107 0018 	add.w	r0, r7, #24
 803d4dc:	4911      	ldr	r1, [pc, #68]	; (803d524 <AT_NetworkAttachedStatus+0x154>)
 803d4de:	f002 faa1 	bl	803fa24 <siprintf>
                p = AT_CmdWrite(cmd, 500, NULL);
 803d4e2:	f107 0318 	add.w	r3, r7, #24
 803d4e6:	2200      	movs	r2, #0
 803d4e8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 803d4ec:	4618      	mov	r0, r3
 803d4ee:	f000 fc15 	bl	803dd1c <AT_CmdWrite>
 803d4f2:	4603      	mov	r3, r0
 803d4f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 803d4f8:	e007      	b.n	803d50a <AT_NetworkAttachedStatus+0x13a>
            }
        } else {
            *param = tmp;
 803d4fa:	683b      	ldr	r3, [r7, #0]
 803d4fc:	461c      	mov	r4, r3
 803d4fe:	f107 030c 	add.w	r3, r7, #12
 803d502:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 803d506:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        }
    }
    Simcom_Unlock();
 803d50a:	f001 f9ef 	bl	803e8ec <Simcom_Unlock>

    return p;
 803d50e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 803d512:	4618      	mov	r0, r3
 803d514:	3734      	adds	r7, #52	; 0x34
 803d516:	46bd      	mov	sp, r7
 803d518:	bd90      	pop	{r4, r7, pc}
 803d51a:	bf00      	nop
 803d51c:	08043ca8 	.word	0x08043ca8
 803d520:	08043cb4 	.word	0x08043cb4
 803d524:	08043cc0 	.word	0x08043cc0

0803d528 <AT_NetworkRegistration>:

SIMCOM_RESULT AT_NetworkRegistration(char command[20], AT_MODE mode, at_c_greg_t *param) {
 803d528:	b580      	push	{r7, lr}
 803d52a:	b090      	sub	sp, #64	; 0x40
 803d52c:	af00      	add	r7, sp, #0
 803d52e:	60f8      	str	r0, [r7, #12]
 803d530:	460b      	mov	r3, r1
 803d532:	607a      	str	r2, [r7, #4]
 803d534:	72fb      	strb	r3, [r7, #11]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 803d536:	2300      	movs	r3, #0
 803d538:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    uint8_t cnt, len = 0;
 803d53c:	2300      	movs	r3, #0
 803d53e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    char *str = NULL, cmd[14], res[15];
 803d542:	2300      	movs	r3, #0
 803d544:	63bb      	str	r3, [r7, #56]	; 0x38

    // Copy by value
    at_c_greg_t tmp = *param;
 803d546:	687a      	ldr	r2, [r7, #4]
 803d548:	f107 0310 	add.w	r3, r7, #16
 803d54c:	e892 0003 	ldmia.w	r2, {r0, r1}
 803d550:	e883 0003 	stmia.w	r3, {r0, r1}

    Simcom_Lock();
 803d554:	f001 f9bc 	bl	803e8d0 <Simcom_Lock>
    // Read
    sprintf(cmd, "AT+%s?\r", command);
 803d558:	f107 0328 	add.w	r3, r7, #40	; 0x28
 803d55c:	68fa      	ldr	r2, [r7, #12]
 803d55e:	4937      	ldr	r1, [pc, #220]	; (803d63c <AT_NetworkRegistration+0x114>)
 803d560:	4618      	mov	r0, r3
 803d562:	f002 fa5f 	bl	803fa24 <siprintf>
    sprintf(res, "+%s: ", command);
 803d566:	f107 0318 	add.w	r3, r7, #24
 803d56a:	68fa      	ldr	r2, [r7, #12]
 803d56c:	4934      	ldr	r1, [pc, #208]	; (803d640 <AT_NetworkRegistration+0x118>)
 803d56e:	4618      	mov	r0, r3
 803d570:	f002 fa58 	bl	803fa24 <siprintf>
    p = AT_CmdRead(cmd, 500, res, &str);
 803d574:	f107 0338 	add.w	r3, r7, #56	; 0x38
 803d578:	f107 0218 	add.w	r2, r7, #24
 803d57c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 803d580:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 803d584:	f000 fbe8 	bl	803dd58 <AT_CmdRead>
 803d588:	4603      	mov	r3, r0
 803d58a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (p > 0) {
 803d58e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 803d592:	2b00      	cmp	r3, #0
 803d594:	dd49      	ble.n	803d62a <AT_NetworkRegistration+0x102>
        tmp.mode = AT_ParseNumber(&str[len], &cnt);
 803d596:	6bba      	ldr	r2, [r7, #56]	; 0x38
 803d598:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 803d59c:	4413      	add	r3, r2
 803d59e:	f107 023d 	add.w	r2, r7, #61	; 0x3d
 803d5a2:	4611      	mov	r1, r2
 803d5a4:	4618      	mov	r0, r3
 803d5a6:	f000 fc59 	bl	803de5c <AT_ParseNumber>
 803d5aa:	4603      	mov	r3, r0
 803d5ac:	613b      	str	r3, [r7, #16]
        len += cnt + 1;
 803d5ae:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 803d5b2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 803d5b6:	4413      	add	r3, r2
 803d5b8:	b2db      	uxtb	r3, r3
 803d5ba:	3301      	adds	r3, #1
 803d5bc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        tmp.stat = AT_ParseNumber(&str[len], &cnt);
 803d5c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 803d5c2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 803d5c6:	4413      	add	r3, r2
 803d5c8:	f107 023d 	add.w	r2, r7, #61	; 0x3d
 803d5cc:	4611      	mov	r1, r2
 803d5ce:	4618      	mov	r0, r3
 803d5d0:	f000 fc44 	bl	803de5c <AT_ParseNumber>
 803d5d4:	4603      	mov	r3, r0
 803d5d6:	617b      	str	r3, [r7, #20]

        // Write
        if (mode == ATW) {
 803d5d8:	7afb      	ldrb	r3, [r7, #11]
 803d5da:	2b00      	cmp	r3, #0
 803d5dc:	d11d      	bne.n	803d61a <AT_NetworkRegistration+0xf2>
            if (memcmp(&tmp, param, sizeof(tmp)) != 0) {
 803d5de:	f107 0310 	add.w	r3, r7, #16
 803d5e2:	2208      	movs	r2, #8
 803d5e4:	6879      	ldr	r1, [r7, #4]
 803d5e6:	4618      	mov	r0, r3
 803d5e8:	f002 f9fa 	bl	803f9e0 <memcmp>
 803d5ec:	4603      	mov	r3, r0
 803d5ee:	2b00      	cmp	r3, #0
 803d5f0:	d01b      	beq.n	803d62a <AT_NetworkRegistration+0x102>
                sprintf(cmd, "AT+%s=%d\r", command, param->mode);
 803d5f2:	687b      	ldr	r3, [r7, #4]
 803d5f4:	681b      	ldr	r3, [r3, #0]
 803d5f6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 803d5fa:	68fa      	ldr	r2, [r7, #12]
 803d5fc:	4911      	ldr	r1, [pc, #68]	; (803d644 <AT_NetworkRegistration+0x11c>)
 803d5fe:	f002 fa11 	bl	803fa24 <siprintf>
                p = AT_CmdWrite(cmd, 500, NULL);
 803d602:	f107 0328 	add.w	r3, r7, #40	; 0x28
 803d606:	2200      	movs	r2, #0
 803d608:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 803d60c:	4618      	mov	r0, r3
 803d60e:	f000 fb85 	bl	803dd1c <AT_CmdWrite>
 803d612:	4603      	mov	r3, r0
 803d614:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 803d618:	e007      	b.n	803d62a <AT_NetworkRegistration+0x102>
            }
        } else {
            *param = tmp;
 803d61a:	687b      	ldr	r3, [r7, #4]
 803d61c:	461a      	mov	r2, r3
 803d61e:	f107 0310 	add.w	r3, r7, #16
 803d622:	e893 0003 	ldmia.w	r3, {r0, r1}
 803d626:	e882 0003 	stmia.w	r2, {r0, r1}
        }
    }
    Simcom_Unlock();
 803d62a:	f001 f95f 	bl	803e8ec <Simcom_Unlock>

    return p;
 803d62e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 803d632:	4618      	mov	r0, r3
 803d634:	3740      	adds	r7, #64	; 0x40
 803d636:	46bd      	mov	sp, r7
 803d638:	bd80      	pop	{r7, pc}
 803d63a:	bf00      	nop
 803d63c:	08043cd0 	.word	0x08043cd0
 803d640:	08043cd8 	.word	0x08043cd8
 803d644:	08043ce0 	.word	0x08043ce0

0803d648 <AT_ConfigureSlowClock>:

SIMCOM_RESULT AT_ConfigureSlowClock(AT_MODE mode, AT_CSCLK *state) {
 803d648:	b580      	push	{r7, lr}
 803d64a:	b082      	sub	sp, #8
 803d64c:	af00      	add	r7, sp, #0
 803d64e:	4603      	mov	r3, r0
 803d650:	6039      	str	r1, [r7, #0]
 803d652:	71fb      	strb	r3, [r7, #7]
    return AT_SingleInteger("CSCLK", mode, (int32_t*) state, 0);
 803d654:	79f9      	ldrb	r1, [r7, #7]
 803d656:	2300      	movs	r3, #0
 803d658:	683a      	ldr	r2, [r7, #0]
 803d65a:	4804      	ldr	r0, [pc, #16]	; (803d66c <AT_ConfigureSlowClock+0x24>)
 803d65c:	f000 faee 	bl	803dc3c <AT_SingleInteger>
 803d660:	4603      	mov	r3, r0
}
 803d662:	4618      	mov	r0, r3
 803d664:	3708      	adds	r7, #8
 803d666:	46bd      	mov	sp, r7
 803d668:	bd80      	pop	{r7, pc}
 803d66a:	bf00      	nop
 803d66c:	08043cec 	.word	0x08043cec

0803d670 <AT_ReportMobileEquipmentError>:

SIMCOM_RESULT AT_ReportMobileEquipmentError(AT_MODE mode, AT_CMEE *state) {
 803d670:	b580      	push	{r7, lr}
 803d672:	b082      	sub	sp, #8
 803d674:	af00      	add	r7, sp, #0
 803d676:	4603      	mov	r3, r0
 803d678:	6039      	str	r1, [r7, #0]
 803d67a:	71fb      	strb	r3, [r7, #7]
    return AT_SingleInteger("CMEE", mode, (int32_t*) state, 0);
 803d67c:	79f9      	ldrb	r1, [r7, #7]
 803d67e:	2300      	movs	r3, #0
 803d680:	683a      	ldr	r2, [r7, #0]
 803d682:	4804      	ldr	r0, [pc, #16]	; (803d694 <AT_ReportMobileEquipmentError+0x24>)
 803d684:	f000 fada 	bl	803dc3c <AT_SingleInteger>
 803d688:	4603      	mov	r3, r0
}
 803d68a:	4618      	mov	r0, r3
 803d68c:	3708      	adds	r7, #8
 803d68e:	46bd      	mov	sp, r7
 803d690:	bd80      	pop	{r7, pc}
 803d692:	bf00      	nop
 803d694:	08043cf4 	.word	0x08043cf4

0803d698 <AT_FixedLocalRate>:

SIMCOM_RESULT AT_FixedLocalRate(AT_MODE mode, uint32_t *rate) {
 803d698:	b580      	push	{r7, lr}
 803d69a:	b082      	sub	sp, #8
 803d69c:	af00      	add	r7, sp, #0
 803d69e:	4603      	mov	r3, r0
 803d6a0:	6039      	str	r1, [r7, #0]
 803d6a2:	71fb      	strb	r3, [r7, #7]
    return AT_SingleInteger("IPR", mode, (int32_t*) rate, 0);
 803d6a4:	79f9      	ldrb	r1, [r7, #7]
 803d6a6:	2300      	movs	r3, #0
 803d6a8:	683a      	ldr	r2, [r7, #0]
 803d6aa:	4804      	ldr	r0, [pc, #16]	; (803d6bc <AT_FixedLocalRate+0x24>)
 803d6ac:	f000 fac6 	bl	803dc3c <AT_SingleInteger>
 803d6b0:	4603      	mov	r3, r0
}
 803d6b2:	4618      	mov	r0, r3
 803d6b4:	3708      	adds	r7, #8
 803d6b6:	46bd      	mov	sp, r7
 803d6b8:	bd80      	pop	{r7, pc}
 803d6ba:	bf00      	nop
 803d6bc:	08043cfc 	.word	0x08043cfc

0803d6c0 <AT_ConfigureAPN>:

#if (!BOOTLOADER)
SIMCOM_RESULT AT_ConfigureAPN(AT_MODE mode, at_cstt_t *param) {
 803d6c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 803d6c2:	b0ab      	sub	sp, #172	; 0xac
 803d6c4:	af02      	add	r7, sp, #8
 803d6c6:	4603      	mov	r3, r0
 803d6c8:	6039      	str	r1, [r7, #0]
 803d6ca:	71fb      	strb	r3, [r7, #7]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 803d6cc:	2300      	movs	r3, #0
 803d6ce:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
    uint8_t cnt, len = 0;
 803d6d2:	2300      	movs	r3, #0
 803d6d4:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
    char *str = NULL, cmd[80];
 803d6d8:	2300      	movs	r3, #0
 803d6da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    // Copy by value
    at_cstt_t tmp = *param;
 803d6de:	683b      	ldr	r3, [r7, #0]
 803d6e0:	461c      	mov	r4, r3
 803d6e2:	f107 060c 	add.w	r6, r7, #12
 803d6e6:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 803d6ea:	4635      	mov	r5, r6
 803d6ec:	4623      	mov	r3, r4
 803d6ee:	6818      	ldr	r0, [r3, #0]
 803d6f0:	6859      	ldr	r1, [r3, #4]
 803d6f2:	689a      	ldr	r2, [r3, #8]
 803d6f4:	68db      	ldr	r3, [r3, #12]
 803d6f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 803d6f8:	3410      	adds	r4, #16
 803d6fa:	3610      	adds	r6, #16
 803d6fc:	4564      	cmp	r4, ip
 803d6fe:	d1f4      	bne.n	803d6ea <AT_ConfigureAPN+0x2a>
 803d700:	4633      	mov	r3, r6
 803d702:	4622      	mov	r2, r4
 803d704:	6810      	ldr	r0, [r2, #0]
 803d706:	6851      	ldr	r1, [r2, #4]
 803d708:	6892      	ldr	r2, [r2, #8]
 803d70a:	c307      	stmia	r3!, {r0, r1, r2}

    Simcom_Lock();
 803d70c:	f001 f8e0 	bl	803e8d0 <Simcom_Lock>
    // Read
    p = AT_CmdRead("AT+CSTT?\r", 500, "+CSTT: ", &str);
 803d710:	f107 0398 	add.w	r3, r7, #152	; 0x98
 803d714:	4a46      	ldr	r2, [pc, #280]	; (803d830 <AT_ConfigureAPN+0x170>)
 803d716:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 803d71a:	4846      	ldr	r0, [pc, #280]	; (803d834 <AT_ConfigureAPN+0x174>)
 803d71c:	f000 fb1c 	bl	803dd58 <AT_CmdRead>
 803d720:	4603      	mov	r3, r0
 803d722:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
    if (p > 0) {
 803d726:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 803d72a:	2b00      	cmp	r3, #0
 803d72c:	dd77      	ble.n	803d81e <AT_ConfigureAPN+0x15e>
        AT_ParseText(&str[len], &cnt, tmp.apn, sizeof(tmp.apn));
 803d72e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 803d732:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 803d736:	18d0      	adds	r0, r2, r3
 803d738:	f107 020c 	add.w	r2, r7, #12
 803d73c:	f107 019d 	add.w	r1, r7, #157	; 0x9d
 803d740:	2314      	movs	r3, #20
 803d742:	f000 fb41 	bl	803ddc8 <AT_ParseText>
        len += cnt + 1;
 803d746:	f897 209d 	ldrb.w	r2, [r7, #157]	; 0x9d
 803d74a:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 803d74e:	4413      	add	r3, r2
 803d750:	b2db      	uxtb	r3, r3
 803d752:	3301      	adds	r3, #1
 803d754:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
        AT_ParseText(&str[len], &cnt, tmp.username, sizeof(tmp.username));
 803d758:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 803d75c:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 803d760:	18d0      	adds	r0, r2, r3
 803d762:	f107 030c 	add.w	r3, r7, #12
 803d766:	f103 0214 	add.w	r2, r3, #20
 803d76a:	f107 019d 	add.w	r1, r7, #157	; 0x9d
 803d76e:	2314      	movs	r3, #20
 803d770:	f000 fb2a 	bl	803ddc8 <AT_ParseText>
        len += cnt + 1;
 803d774:	f897 209d 	ldrb.w	r2, [r7, #157]	; 0x9d
 803d778:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 803d77c:	4413      	add	r3, r2
 803d77e:	b2db      	uxtb	r3, r3
 803d780:	3301      	adds	r3, #1
 803d782:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
        AT_ParseText(&str[len], &cnt, tmp.password, sizeof(tmp.password));
 803d786:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 803d78a:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 803d78e:	18d0      	adds	r0, r2, r3
 803d790:	f107 030c 	add.w	r3, r7, #12
 803d794:	f103 0228 	add.w	r2, r3, #40	; 0x28
 803d798:	f107 019d 	add.w	r1, r7, #157	; 0x9d
 803d79c:	2314      	movs	r3, #20
 803d79e:	f000 fb13 	bl	803ddc8 <AT_ParseText>

        // Write
        if (mode == ATW) {
 803d7a2:	79fb      	ldrb	r3, [r7, #7]
 803d7a4:	2b00      	cmp	r3, #0
 803d7a6:	d122      	bne.n	803d7ee <AT_ConfigureAPN+0x12e>
            if (memcmp(&tmp, param, sizeof(at_cstt_t)) != 0) {
 803d7a8:	f107 030c 	add.w	r3, r7, #12
 803d7ac:	223c      	movs	r2, #60	; 0x3c
 803d7ae:	6839      	ldr	r1, [r7, #0]
 803d7b0:	4618      	mov	r0, r3
 803d7b2:	f002 f915 	bl	803f9e0 <memcmp>
 803d7b6:	4603      	mov	r3, r0
 803d7b8:	2b00      	cmp	r3, #0
 803d7ba:	d030      	beq.n	803d81e <AT_ConfigureAPN+0x15e>
                sprintf(cmd, "AT+CSTT=\"%s\",\"%s\",\"%s\"\r",
                        param->apn, param->username, param->password);
 803d7bc:	683a      	ldr	r2, [r7, #0]
 803d7be:	683b      	ldr	r3, [r7, #0]
 803d7c0:	f103 0114 	add.w	r1, r3, #20
 803d7c4:	683b      	ldr	r3, [r7, #0]
 803d7c6:	3328      	adds	r3, #40	; 0x28
                sprintf(cmd, "AT+CSTT=\"%s\",\"%s\",\"%s\"\r",
 803d7c8:	f107 0048 	add.w	r0, r7, #72	; 0x48
 803d7cc:	9300      	str	r3, [sp, #0]
 803d7ce:	460b      	mov	r3, r1
 803d7d0:	4919      	ldr	r1, [pc, #100]	; (803d838 <AT_ConfigureAPN+0x178>)
 803d7d2:	f002 f927 	bl	803fa24 <siprintf>
                p = AT_CmdWrite(cmd, 1000, NULL);
 803d7d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 803d7da:	2200      	movs	r2, #0
 803d7dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 803d7e0:	4618      	mov	r0, r3
 803d7e2:	f000 fa9b 	bl	803dd1c <AT_CmdWrite>
 803d7e6:	4603      	mov	r3, r0
 803d7e8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 803d7ec:	e017      	b.n	803d81e <AT_ConfigureAPN+0x15e>
            }
        } else {
            *param = tmp;
 803d7ee:	683b      	ldr	r3, [r7, #0]
 803d7f0:	f107 040c 	add.w	r4, r7, #12
 803d7f4:	469c      	mov	ip, r3
 803d7f6:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 803d7fa:	4665      	mov	r5, ip
 803d7fc:	4626      	mov	r6, r4
 803d7fe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 803d800:	6028      	str	r0, [r5, #0]
 803d802:	6069      	str	r1, [r5, #4]
 803d804:	60aa      	str	r2, [r5, #8]
 803d806:	60eb      	str	r3, [r5, #12]
 803d808:	3410      	adds	r4, #16
 803d80a:	f10c 0c10 	add.w	ip, ip, #16
 803d80e:	4574      	cmp	r4, lr
 803d810:	d1f3      	bne.n	803d7fa <AT_ConfigureAPN+0x13a>
 803d812:	4665      	mov	r5, ip
 803d814:	4623      	mov	r3, r4
 803d816:	cb07      	ldmia	r3!, {r0, r1, r2}
 803d818:	6028      	str	r0, [r5, #0]
 803d81a:	6069      	str	r1, [r5, #4]
 803d81c:	60aa      	str	r2, [r5, #8]
        }
    }
    Simcom_Unlock();
 803d81e:	f001 f865 	bl	803e8ec <Simcom_Unlock>

    return p;
 803d822:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 803d826:	4618      	mov	r0, r3
 803d828:	37a4      	adds	r7, #164	; 0xa4
 803d82a:	46bd      	mov	sp, r7
 803d82c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 803d82e:	bf00      	nop
 803d830:	08043d00 	.word	0x08043d00
 803d834:	08043d08 	.word	0x08043d08
 803d838:	08043d14 	.word	0x08043d14

0803d83c <AT_GetLocalIpAddress>:

SIMCOM_RESULT AT_GetLocalIpAddress(at_cifsr_t *param) {
 803d83c:	b580      	push	{r7, lr}
 803d83e:	b084      	sub	sp, #16
 803d840:	af00      	add	r7, sp, #0
 803d842:	6078      	str	r0, [r7, #4]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 803d844:	2300      	movs	r3, #0
 803d846:	73fb      	strb	r3, [r7, #15]
    char *str = NULL;
 803d848:	2300      	movs	r3, #0
 803d84a:	60bb      	str	r3, [r7, #8]

    Simcom_Lock();
 803d84c:	f001 f840 	bl	803e8d0 <Simcom_Lock>
    // Read
    p = AT_CmdRead("AT+CIFSR\r", 500, SIMCOM_RSP_NONE, &str);
 803d850:	f107 0308 	add.w	r3, r7, #8
 803d854:	4a0c      	ldr	r2, [pc, #48]	; (803d888 <AT_GetLocalIpAddress+0x4c>)
 803d856:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 803d85a:	480c      	ldr	r0, [pc, #48]	; (803d88c <AT_GetLocalIpAddress+0x50>)
 803d85c:	f000 fa7c 	bl	803dd58 <AT_CmdRead>
 803d860:	4603      	mov	r3, r0
 803d862:	73fb      	strb	r3, [r7, #15]
    if (p > 0) {
 803d864:	f997 300f 	ldrsb.w	r3, [r7, #15]
 803d868:	2b00      	cmp	r3, #0
 803d86a:	dd05      	ble.n	803d878 <AT_GetLocalIpAddress+0x3c>
        AT_ParseText(&str[0], NULL, param->address, sizeof(param->address));
 803d86c:	68b8      	ldr	r0, [r7, #8]
 803d86e:	687a      	ldr	r2, [r7, #4]
 803d870:	2314      	movs	r3, #20
 803d872:	2100      	movs	r1, #0
 803d874:	f000 faa8 	bl	803ddc8 <AT_ParseText>
    }
    Simcom_Unlock();
 803d878:	f001 f838 	bl	803e8ec <Simcom_Unlock>

    return p;
 803d87c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 803d880:	4618      	mov	r0, r3
 803d882:	3710      	adds	r7, #16
 803d884:	46bd      	mov	sp, r7
 803d886:	bd80      	pop	{r7, pc}
 803d888:	08043d2c 	.word	0x08043d2c
 803d88c:	08043d30 	.word	0x08043d30

0803d890 <AT_StartConnectionSingle>:

SIMCOM_RESULT AT_StartConnectionSingle(at_cipstart_t *param) {
 803d890:	b580      	push	{r7, lr}
 803d892:	b09a      	sub	sp, #104	; 0x68
 803d894:	af02      	add	r7, sp, #8
 803d896:	6078      	str	r0, [r7, #4]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 803d898:	2300      	movs	r3, #0
 803d89a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    char cmd[80];

    Simcom_Lock();
 803d89e:	f001 f817 	bl	803e8d0 <Simcom_Lock>
    // Write
    sprintf(cmd, "AT+CIPSTART=\"%s\",\"%s\",\"%d\"\r",
            param->mode, param->ip, param->port);
 803d8a2:	687a      	ldr	r2, [r7, #4]
 803d8a4:	687b      	ldr	r3, [r7, #4]
 803d8a6:	1d19      	adds	r1, r3, #4
 803d8a8:	687b      	ldr	r3, [r7, #4]
 803d8aa:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    sprintf(cmd, "AT+CIPSTART=\"%s\",\"%s\",\"%d\"\r",
 803d8ac:	f107 000c 	add.w	r0, r7, #12
 803d8b0:	9300      	str	r3, [sp, #0]
 803d8b2:	460b      	mov	r3, r1
 803d8b4:	4919      	ldr	r1, [pc, #100]	; (803d91c <AT_StartConnectionSingle+0x8c>)
 803d8b6:	f002 f8b5 	bl	803fa24 <siprintf>
    p = AT_CmdWrite(cmd, 30000, "CONNECT");
 803d8ba:	f107 030c 	add.w	r3, r7, #12
 803d8be:	4a18      	ldr	r2, [pc, #96]	; (803d920 <AT_StartConnectionSingle+0x90>)
 803d8c0:	f247 5130 	movw	r1, #30000	; 0x7530
 803d8c4:	4618      	mov	r0, r3
 803d8c6:	f000 fa29 	bl	803dd1c <AT_CmdWrite>
 803d8ca:	4603      	mov	r3, r0
 803d8cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    // check either connection ok / error
    if (p > 0) {
 803d8d0:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 803d8d4:	2b00      	cmp	r3, #0
 803d8d6:	dd18      	ble.n	803d90a <AT_StartConnectionSingle+0x7a>
        if (Simcom_Response("CONNECT OK")
 803d8d8:	4812      	ldr	r0, [pc, #72]	; (803d924 <AT_StartConnectionSingle+0x94>)
 803d8da:	f001 f813 	bl	803e904 <Simcom_Response>
 803d8de:	4603      	mov	r3, r0
 803d8e0:	2b00      	cmp	r3, #0
 803d8e2:	d10b      	bne.n	803d8fc <AT_StartConnectionSingle+0x6c>
                || Simcom_Response("ALREADY CONNECT")
 803d8e4:	4810      	ldr	r0, [pc, #64]	; (803d928 <AT_StartConnectionSingle+0x98>)
 803d8e6:	f001 f80d 	bl	803e904 <Simcom_Response>
 803d8ea:	4603      	mov	r3, r0
 803d8ec:	2b00      	cmp	r3, #0
 803d8ee:	d105      	bne.n	803d8fc <AT_StartConnectionSingle+0x6c>
                || Simcom_Response("TCP CLOSED")) {
 803d8f0:	480e      	ldr	r0, [pc, #56]	; (803d92c <AT_StartConnectionSingle+0x9c>)
 803d8f2:	f001 f807 	bl	803e904 <Simcom_Response>
 803d8f6:	4603      	mov	r3, r0
 803d8f8:	2b00      	cmp	r3, #0
 803d8fa:	d003      	beq.n	803d904 <AT_StartConnectionSingle+0x74>
            p = SIM_RESULT_OK;
 803d8fc:	2301      	movs	r3, #1
 803d8fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 803d902:	e002      	b.n	803d90a <AT_StartConnectionSingle+0x7a>
        } else {
            p = SIM_RESULT_ERROR;
 803d904:	2300      	movs	r3, #0
 803d906:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
    }
    Simcom_Unlock();
 803d90a:	f000 ffef 	bl	803e8ec <Simcom_Unlock>

    return p;
 803d90e:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 803d912:	4618      	mov	r0, r3
 803d914:	3760      	adds	r7, #96	; 0x60
 803d916:	46bd      	mov	sp, r7
 803d918:	bd80      	pop	{r7, pc}
 803d91a:	bf00      	nop
 803d91c:	08043d3c 	.word	0x08043d3c
 803d920:	08043d58 	.word	0x08043d58
 803d924:	08043c30 	.word	0x08043c30
 803d928:	08043d60 	.word	0x08043d60
 803d92c:	08043c54 	.word	0x08043c54

0803d930 <AT_Clock>:

SIMCOM_RESULT AT_Clock(AT_MODE mode, timestamp_t *tm) {
 803d930:	b5f0      	push	{r4, r5, r6, r7, lr}
 803d932:	b093      	sub	sp, #76	; 0x4c
 803d934:	af06      	add	r7, sp, #24
 803d936:	4603      	mov	r3, r0
 803d938:	6039      	str	r1, [r7, #0]
 803d93a:	71fb      	strb	r3, [r7, #7]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 803d93c:	2300      	movs	r3, #0
 803d93e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t cnt, len = 0;
 803d942:	2300      	movs	r3, #0
 803d944:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    char *str = NULL, cmd[32];
 803d948:	2300      	movs	r3, #0
 803d94a:	62bb      	str	r3, [r7, #40]	; 0x28

    Simcom_Lock();
 803d94c:	f000 ffc0 	bl	803e8d0 <Simcom_Lock>
    if (mode == ATW) {
 803d950:	79fb      	ldrb	r3, [r7, #7]
 803d952:	2b00      	cmp	r3, #0
 803d954:	d12c      	bne.n	803d9b0 <AT_Clock+0x80>
        // Write
        sprintf(cmd, "AT+CCLK=\"%d/%d/%d,%d:%d:%d%+d\"\r",
                tm->date.Year,
 803d956:	683b      	ldr	r3, [r7, #0]
 803d958:	7ddb      	ldrb	r3, [r3, #23]
        sprintf(cmd, "AT+CCLK=\"%d/%d/%d,%d:%d:%d%+d\"\r",
 803d95a:	461e      	mov	r6, r3
                tm->date.Month,
 803d95c:	683b      	ldr	r3, [r7, #0]
 803d95e:	7d5b      	ldrb	r3, [r3, #21]
        sprintf(cmd, "AT+CCLK=\"%d/%d/%d,%d:%d:%d%+d\"\r",
 803d960:	469c      	mov	ip, r3
                tm->date.Date,
 803d962:	683b      	ldr	r3, [r7, #0]
 803d964:	7d9b      	ldrb	r3, [r3, #22]
        sprintf(cmd, "AT+CCLK=\"%d/%d/%d,%d:%d:%d%+d\"\r",
 803d966:	461a      	mov	r2, r3
                tm->time.Hours,
 803d968:	683b      	ldr	r3, [r7, #0]
 803d96a:	781b      	ldrb	r3, [r3, #0]
        sprintf(cmd, "AT+CCLK=\"%d/%d/%d,%d:%d:%d%+d\"\r",
 803d96c:	4619      	mov	r1, r3
                tm->time.Minutes,
 803d96e:	683b      	ldr	r3, [r7, #0]
 803d970:	785b      	ldrb	r3, [r3, #1]
        sprintf(cmd, "AT+CCLK=\"%d/%d/%d,%d:%d:%d%+d\"\r",
 803d972:	461c      	mov	r4, r3
                tm->time.Seconds,
 803d974:	683b      	ldr	r3, [r7, #0]
 803d976:	789b      	ldrb	r3, [r3, #2]
        sprintf(cmd, "AT+CCLK=\"%d/%d/%d,%d:%d:%d%+d\"\r",
 803d978:	461d      	mov	r5, r3
                tm->tzQuarterHour);
 803d97a:	683b      	ldr	r3, [r7, #0]
 803d97c:	f993 3018 	ldrsb.w	r3, [r3, #24]
        sprintf(cmd, "AT+CCLK=\"%d/%d/%d,%d:%d:%d%+d\"\r",
 803d980:	f107 0008 	add.w	r0, r7, #8
 803d984:	9304      	str	r3, [sp, #16]
 803d986:	9503      	str	r5, [sp, #12]
 803d988:	9402      	str	r4, [sp, #8]
 803d98a:	9101      	str	r1, [sp, #4]
 803d98c:	9200      	str	r2, [sp, #0]
 803d98e:	4663      	mov	r3, ip
 803d990:	4632      	mov	r2, r6
 803d992:	4961      	ldr	r1, [pc, #388]	; (803db18 <AT_Clock+0x1e8>)
 803d994:	f002 f846 	bl	803fa24 <siprintf>
        p = AT_CmdWrite(cmd, 500, NULL);
 803d998:	f107 0308 	add.w	r3, r7, #8
 803d99c:	2200      	movs	r2, #0
 803d99e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 803d9a2:	4618      	mov	r0, r3
 803d9a4:	f000 f9ba 	bl	803dd1c <AT_CmdWrite>
 803d9a8:	4603      	mov	r3, r0
 803d9aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 803d9ae:	e0ab      	b.n	803db08 <AT_Clock+0x1d8>

    } else {
        // Read
        p = AT_CmdRead("AT+CCLK?\r", 500, "+CCLK: ", &str);
 803d9b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 803d9b4:	4a59      	ldr	r2, [pc, #356]	; (803db1c <AT_Clock+0x1ec>)
 803d9b6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 803d9ba:	4859      	ldr	r0, [pc, #356]	; (803db20 <AT_Clock+0x1f0>)
 803d9bc:	f000 f9cc 	bl	803dd58 <AT_CmdRead>
 803d9c0:	4603      	mov	r3, r0
 803d9c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (p > 0) {
 803d9c6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 803d9ca:	2b00      	cmp	r3, #0
 803d9cc:	f340 809c 	ble.w	803db08 <AT_Clock+0x1d8>
            len = 1;
 803d9d0:	2301      	movs	r3, #1
 803d9d2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            tm->date.Year = AT_ParseNumber(&str[len], &cnt);
 803d9d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 803d9d8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 803d9dc:	4413      	add	r3, r2
 803d9de:	f107 022d 	add.w	r2, r7, #45	; 0x2d
 803d9e2:	4611      	mov	r1, r2
 803d9e4:	4618      	mov	r0, r3
 803d9e6:	f000 fa39 	bl	803de5c <AT_ParseNumber>
 803d9ea:	4603      	mov	r3, r0
 803d9ec:	b2da      	uxtb	r2, r3
 803d9ee:	683b      	ldr	r3, [r7, #0]
 803d9f0:	75da      	strb	r2, [r3, #23]
            len += cnt + 1;
 803d9f2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 803d9f6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 803d9fa:	4413      	add	r3, r2
 803d9fc:	b2db      	uxtb	r3, r3
 803d9fe:	3301      	adds	r3, #1
 803da00:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            tm->date.Month = AT_ParseNumber(&str[len], &cnt);
 803da04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 803da06:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 803da0a:	4413      	add	r3, r2
 803da0c:	f107 022d 	add.w	r2, r7, #45	; 0x2d
 803da10:	4611      	mov	r1, r2
 803da12:	4618      	mov	r0, r3
 803da14:	f000 fa22 	bl	803de5c <AT_ParseNumber>
 803da18:	4603      	mov	r3, r0
 803da1a:	b2da      	uxtb	r2, r3
 803da1c:	683b      	ldr	r3, [r7, #0]
 803da1e:	755a      	strb	r2, [r3, #21]
            len += cnt + 1;
 803da20:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 803da24:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 803da28:	4413      	add	r3, r2
 803da2a:	b2db      	uxtb	r3, r3
 803da2c:	3301      	adds	r3, #1
 803da2e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            tm->date.Date = AT_ParseNumber(&str[len], &cnt);
 803da32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 803da34:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 803da38:	4413      	add	r3, r2
 803da3a:	f107 022d 	add.w	r2, r7, #45	; 0x2d
 803da3e:	4611      	mov	r1, r2
 803da40:	4618      	mov	r0, r3
 803da42:	f000 fa0b 	bl	803de5c <AT_ParseNumber>
 803da46:	4603      	mov	r3, r0
 803da48:	b2da      	uxtb	r2, r3
 803da4a:	683b      	ldr	r3, [r7, #0]
 803da4c:	759a      	strb	r2, [r3, #22]
            len += cnt + 1;
 803da4e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 803da52:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 803da56:	4413      	add	r3, r2
 803da58:	b2db      	uxtb	r3, r3
 803da5a:	3301      	adds	r3, #1
 803da5c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            tm->time.Hours = AT_ParseNumber(&str[len], &cnt);
 803da60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 803da62:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 803da66:	4413      	add	r3, r2
 803da68:	f107 022d 	add.w	r2, r7, #45	; 0x2d
 803da6c:	4611      	mov	r1, r2
 803da6e:	4618      	mov	r0, r3
 803da70:	f000 f9f4 	bl	803de5c <AT_ParseNumber>
 803da74:	4603      	mov	r3, r0
 803da76:	b2da      	uxtb	r2, r3
 803da78:	683b      	ldr	r3, [r7, #0]
 803da7a:	701a      	strb	r2, [r3, #0]
            len += cnt + 1;
 803da7c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 803da80:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 803da84:	4413      	add	r3, r2
 803da86:	b2db      	uxtb	r3, r3
 803da88:	3301      	adds	r3, #1
 803da8a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            tm->time.Minutes = AT_ParseNumber(&str[len], &cnt);
 803da8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 803da90:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 803da94:	4413      	add	r3, r2
 803da96:	f107 022d 	add.w	r2, r7, #45	; 0x2d
 803da9a:	4611      	mov	r1, r2
 803da9c:	4618      	mov	r0, r3
 803da9e:	f000 f9dd 	bl	803de5c <AT_ParseNumber>
 803daa2:	4603      	mov	r3, r0
 803daa4:	b2da      	uxtb	r2, r3
 803daa6:	683b      	ldr	r3, [r7, #0]
 803daa8:	705a      	strb	r2, [r3, #1]
            len += cnt + 1;
 803daaa:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 803daae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 803dab2:	4413      	add	r3, r2
 803dab4:	b2db      	uxtb	r3, r3
 803dab6:	3301      	adds	r3, #1
 803dab8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            tm->time.Seconds = AT_ParseNumber(&str[len], &cnt);
 803dabc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 803dabe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 803dac2:	4413      	add	r3, r2
 803dac4:	f107 022d 	add.w	r2, r7, #45	; 0x2d
 803dac8:	4611      	mov	r1, r2
 803daca:	4618      	mov	r0, r3
 803dacc:	f000 f9c6 	bl	803de5c <AT_ParseNumber>
 803dad0:	4603      	mov	r3, r0
 803dad2:	b2da      	uxtb	r2, r3
 803dad4:	683b      	ldr	r3, [r7, #0]
 803dad6:	709a      	strb	r2, [r3, #2]
            len += cnt + 1;
 803dad8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 803dadc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 803dae0:	4413      	add	r3, r2
 803dae2:	b2db      	uxtb	r3, r3
 803dae4:	3301      	adds	r3, #1
 803dae6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            tm->tzQuarterHour = AT_ParseNumber(&str[len], NULL);
 803daea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 803daec:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 803daf0:	4413      	add	r3, r2
 803daf2:	2100      	movs	r1, #0
 803daf4:	4618      	mov	r0, r3
 803daf6:	f000 f9b1 	bl	803de5c <AT_ParseNumber>
 803dafa:	4603      	mov	r3, r0
 803dafc:	b25a      	sxtb	r2, r3
 803dafe:	683b      	ldr	r3, [r7, #0]
 803db00:	761a      	strb	r2, [r3, #24]

            // Formatting
            tm->date.WeekDay = RTC_WEEKDAY_MONDAY;
 803db02:	683b      	ldr	r3, [r7, #0]
 803db04:	2201      	movs	r2, #1
 803db06:	751a      	strb	r2, [r3, #20]
        }
    }
    Simcom_Unlock();
 803db08:	f000 fef0 	bl	803e8ec <Simcom_Unlock>

    return p;
 803db0c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 803db10:	4618      	mov	r0, r3
 803db12:	3734      	adds	r7, #52	; 0x34
 803db14:	46bd      	mov	sp, r7
 803db16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 803db18:	08043d70 	.word	0x08043d70
 803db1c:	08043d90 	.word	0x08043d90
 803db20:	08043d98 	.word	0x08043d98

0803db24 <AT_GprsAttachment>:

SIMCOM_RESULT AT_GprsAttachment(AT_MODE mode, AT_CGATT *state) {
 803db24:	b580      	push	{r7, lr}
 803db26:	b082      	sub	sp, #8
 803db28:	af00      	add	r7, sp, #0
 803db2a:	4603      	mov	r3, r0
 803db2c:	6039      	str	r1, [r7, #0]
 803db2e:	71fb      	strb	r3, [r7, #7]
    return AT_SingleInteger("CGATT", mode, (int32_t*) state, 0);
 803db30:	79f9      	ldrb	r1, [r7, #7]
 803db32:	2300      	movs	r3, #0
 803db34:	683a      	ldr	r2, [r7, #0]
 803db36:	4804      	ldr	r0, [pc, #16]	; (803db48 <AT_GprsAttachment+0x24>)
 803db38:	f000 f880 	bl	803dc3c <AT_SingleInteger>
 803db3c:	4603      	mov	r3, r0
}
 803db3e:	4618      	mov	r0, r3
 803db40:	3708      	adds	r7, #8
 803db42:	46bd      	mov	sp, r7
 803db44:	bd80      	pop	{r7, pc}
 803db46:	bf00      	nop
 803db48:	08043da4 	.word	0x08043da4

0803db4c <AT_ManuallyReceiveData>:

SIMCOM_RESULT AT_ManuallyReceiveData(AT_MODE mode, AT_CIPRXGET *state) {
 803db4c:	b580      	push	{r7, lr}
 803db4e:	b082      	sub	sp, #8
 803db50:	af00      	add	r7, sp, #0
 803db52:	4603      	mov	r3, r0
 803db54:	6039      	str	r1, [r7, #0]
 803db56:	71fb      	strb	r3, [r7, #7]
    return AT_SingleInteger("CIPRXGET", mode, (int32_t*) state, 0);
 803db58:	79f9      	ldrb	r1, [r7, #7]
 803db5a:	2300      	movs	r3, #0
 803db5c:	683a      	ldr	r2, [r7, #0]
 803db5e:	4804      	ldr	r0, [pc, #16]	; (803db70 <AT_ManuallyReceiveData+0x24>)
 803db60:	f000 f86c 	bl	803dc3c <AT_SingleInteger>
 803db64:	4603      	mov	r3, r0
}
 803db66:	4618      	mov	r0, r3
 803db68:	3708      	adds	r7, #8
 803db6a:	46bd      	mov	sp, r7
 803db6c:	bd80      	pop	{r7, pc}
 803db6e:	bf00      	nop
 803db70:	08043dac 	.word	0x08043dac

0803db74 <AT_MultiIpConnection>:

SIMCOM_RESULT AT_MultiIpConnection(AT_MODE mode, AT_CIPMUX *state) {
 803db74:	b580      	push	{r7, lr}
 803db76:	b082      	sub	sp, #8
 803db78:	af00      	add	r7, sp, #0
 803db7a:	4603      	mov	r3, r0
 803db7c:	6039      	str	r1, [r7, #0]
 803db7e:	71fb      	strb	r3, [r7, #7]
    return AT_SingleInteger("CIPMUX", mode, (int32_t*) state, 0);
 803db80:	79f9      	ldrb	r1, [r7, #7]
 803db82:	2300      	movs	r3, #0
 803db84:	683a      	ldr	r2, [r7, #0]
 803db86:	4804      	ldr	r0, [pc, #16]	; (803db98 <AT_MultiIpConnection+0x24>)
 803db88:	f000 f858 	bl	803dc3c <AT_SingleInteger>
 803db8c:	4603      	mov	r3, r0
}
 803db8e:	4618      	mov	r0, r3
 803db90:	3708      	adds	r7, #8
 803db92:	46bd      	mov	sp, r7
 803db94:	bd80      	pop	{r7, pc}
 803db96:	bf00      	nop
 803db98:	08043db8 	.word	0x08043db8

0803db9c <AT_TcpApllicationMode>:

SIMCOM_RESULT AT_TcpApllicationMode(AT_MODE mode, AT_CIPMODE *state) {
 803db9c:	b580      	push	{r7, lr}
 803db9e:	b082      	sub	sp, #8
 803dba0:	af00      	add	r7, sp, #0
 803dba2:	4603      	mov	r3, r0
 803dba4:	6039      	str	r1, [r7, #0]
 803dba6:	71fb      	strb	r3, [r7, #7]
    return AT_SingleInteger("CIPMODE", mode, (int32_t*) state, 0);
 803dba8:	79f9      	ldrb	r1, [r7, #7]
 803dbaa:	2300      	movs	r3, #0
 803dbac:	683a      	ldr	r2, [r7, #0]
 803dbae:	4804      	ldr	r0, [pc, #16]	; (803dbc0 <AT_TcpApllicationMode+0x24>)
 803dbb0:	f000 f844 	bl	803dc3c <AT_SingleInteger>
 803dbb4:	4603      	mov	r3, r0
}
 803dbb6:	4618      	mov	r0, r3
 803dbb8:	3708      	adds	r7, #8
 803dbba:	46bd      	mov	sp, r7
 803dbbc:	bd80      	pop	{r7, pc}
 803dbbe:	bf00      	nop
 803dbc0:	08043dc0 	.word	0x08043dc0

0803dbc4 <AT_ShowRemoteIp>:

SIMCOM_RESULT AT_ShowRemoteIp(AT_MODE mode, AT_BOOL *state) {
 803dbc4:	b580      	push	{r7, lr}
 803dbc6:	b082      	sub	sp, #8
 803dbc8:	af00      	add	r7, sp, #0
 803dbca:	4603      	mov	r3, r0
 803dbcc:	6039      	str	r1, [r7, #0]
 803dbce:	71fb      	strb	r3, [r7, #7]
    return AT_SingleInteger("CIPSRIP", mode, (int32_t*) state, 0);
 803dbd0:	79f9      	ldrb	r1, [r7, #7]
 803dbd2:	2300      	movs	r3, #0
 803dbd4:	683a      	ldr	r2, [r7, #0]
 803dbd6:	4804      	ldr	r0, [pc, #16]	; (803dbe8 <AT_ShowRemoteIp+0x24>)
 803dbd8:	f000 f830 	bl	803dc3c <AT_SingleInteger>
 803dbdc:	4603      	mov	r3, r0
}
 803dbde:	4618      	mov	r0, r3
 803dbe0:	3708      	adds	r7, #8
 803dbe2:	46bd      	mov	sp, r7
 803dbe4:	bd80      	pop	{r7, pc}
 803dbe6:	bf00      	nop
 803dbe8:	08043dc8 	.word	0x08043dc8

0803dbec <AT_IpPackageHeader>:

SIMCOM_RESULT AT_IpPackageHeader(AT_MODE mode, AT_BOOL *state) {
 803dbec:	b580      	push	{r7, lr}
 803dbee:	b082      	sub	sp, #8
 803dbf0:	af00      	add	r7, sp, #0
 803dbf2:	4603      	mov	r3, r0
 803dbf4:	6039      	str	r1, [r7, #0]
 803dbf6:	71fb      	strb	r3, [r7, #7]
    return AT_SingleInteger("CIPHEAD", mode, (int32_t*) state, 0);
 803dbf8:	79f9      	ldrb	r1, [r7, #7]
 803dbfa:	2300      	movs	r3, #0
 803dbfc:	683a      	ldr	r2, [r7, #0]
 803dbfe:	4804      	ldr	r0, [pc, #16]	; (803dc10 <AT_IpPackageHeader+0x24>)
 803dc00:	f000 f81c 	bl	803dc3c <AT_SingleInteger>
 803dc04:	4603      	mov	r3, r0
}
 803dc06:	4618      	mov	r0, r3
 803dc08:	3708      	adds	r7, #8
 803dc0a:	46bd      	mov	sp, r7
 803dc0c:	bd80      	pop	{r7, pc}
 803dc0e:	bf00      	nop
 803dc10:	08043dd0 	.word	0x08043dd0

0803dc14 <AT_EnableLocalTimestamp>:

SIMCOM_RESULT AT_EnableLocalTimestamp(AT_MODE mode, AT_BOOL *state) {
 803dc14:	b580      	push	{r7, lr}
 803dc16:	b082      	sub	sp, #8
 803dc18:	af00      	add	r7, sp, #0
 803dc1a:	4603      	mov	r3, r0
 803dc1c:	6039      	str	r1, [r7, #0]
 803dc1e:	71fb      	strb	r3, [r7, #7]
    return AT_SingleInteger("CLTS", mode, (int32_t*) state, 0);
 803dc20:	79f9      	ldrb	r1, [r7, #7]
 803dc22:	2300      	movs	r3, #0
 803dc24:	683a      	ldr	r2, [r7, #0]
 803dc26:	4804      	ldr	r0, [pc, #16]	; (803dc38 <AT_EnableLocalTimestamp+0x24>)
 803dc28:	f000 f808 	bl	803dc3c <AT_SingleInteger>
 803dc2c:	4603      	mov	r3, r0
}
 803dc2e:	4618      	mov	r0, r3
 803dc30:	3708      	adds	r7, #8
 803dc32:	46bd      	mov	sp, r7
 803dc34:	bd80      	pop	{r7, pc}
 803dc36:	bf00      	nop
 803dc38:	08043dd8 	.word	0x08043dd8

0803dc3c <AT_SingleInteger>:

    return *str != NULL;
}
#endif

static SIMCOM_RESULT AT_SingleInteger(char command[20], AT_MODE mode, int32_t *value, uint8_t executor) {
 803dc3c:	b580      	push	{r7, lr}
 803dc3e:	b092      	sub	sp, #72	; 0x48
 803dc40:	af00      	add	r7, sp, #0
 803dc42:	60f8      	str	r0, [r7, #12]
 803dc44:	607a      	str	r2, [r7, #4]
 803dc46:	461a      	mov	r2, r3
 803dc48:	460b      	mov	r3, r1
 803dc4a:	72fb      	strb	r3, [r7, #11]
 803dc4c:	4613      	mov	r3, r2
 803dc4e:	72bb      	strb	r3, [r7, #10]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 803dc50:	2300      	movs	r3, #0
 803dc52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    char *str = NULL, cmd[20], res[20];
 803dc56:	2300      	movs	r3, #0
 803dc58:	63fb      	str	r3, [r7, #60]	; 0x3c

    // Copy by vale
    int32_t tmp = *value;
 803dc5a:	687b      	ldr	r3, [r7, #4]
 803dc5c:	681b      	ldr	r3, [r3, #0]
 803dc5e:	643b      	str	r3, [r7, #64]	; 0x40

    Simcom_Lock();
 803dc60:	f000 fe36 	bl	803e8d0 <Simcom_Lock>
    // Read
    sprintf(cmd, "AT+%s%s", command, executor ? "\r" : "?\r");
 803dc64:	7abb      	ldrb	r3, [r7, #10]
 803dc66:	2b00      	cmp	r3, #0
 803dc68:	d001      	beq.n	803dc6e <AT_SingleInteger+0x32>
 803dc6a:	4b27      	ldr	r3, [pc, #156]	; (803dd08 <AT_SingleInteger+0xcc>)
 803dc6c:	e000      	b.n	803dc70 <AT_SingleInteger+0x34>
 803dc6e:	4b27      	ldr	r3, [pc, #156]	; (803dd0c <AT_SingleInteger+0xd0>)
 803dc70:	f107 0028 	add.w	r0, r7, #40	; 0x28
 803dc74:	68fa      	ldr	r2, [r7, #12]
 803dc76:	4926      	ldr	r1, [pc, #152]	; (803dd10 <AT_SingleInteger+0xd4>)
 803dc78:	f001 fed4 	bl	803fa24 <siprintf>
    sprintf(res, "+%s: ", command);
 803dc7c:	f107 0314 	add.w	r3, r7, #20
 803dc80:	68fa      	ldr	r2, [r7, #12]
 803dc82:	4924      	ldr	r1, [pc, #144]	; (803dd14 <AT_SingleInteger+0xd8>)
 803dc84:	4618      	mov	r0, r3
 803dc86:	f001 fecd 	bl	803fa24 <siprintf>
    p = AT_CmdRead(cmd, 1000, res, &str);
 803dc8a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 803dc8e:	f107 0214 	add.w	r2, r7, #20
 803dc92:	f107 0028 	add.w	r0, r7, #40	; 0x28
 803dc96:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 803dc9a:	f000 f85d 	bl	803dd58 <AT_CmdRead>
 803dc9e:	4603      	mov	r3, r0
 803dca0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (p > 0) {
 803dca4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 803dca8:	2b00      	cmp	r3, #0
 803dcaa:	dd24      	ble.n	803dcf6 <AT_SingleInteger+0xba>
        tmp = AT_ParseNumber(&str[0], NULL);
 803dcac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803dcae:	2100      	movs	r1, #0
 803dcb0:	4618      	mov	r0, r3
 803dcb2:	f000 f8d3 	bl	803de5c <AT_ParseNumber>
 803dcb6:	6438      	str	r0, [r7, #64]	; 0x40

        // Write
        if (mode == ATW) {
 803dcb8:	7afb      	ldrb	r3, [r7, #11]
 803dcba:	2b00      	cmp	r3, #0
 803dcbc:	d118      	bne.n	803dcf0 <AT_SingleInteger+0xb4>
            if (tmp != *value) {
 803dcbe:	687b      	ldr	r3, [r7, #4]
 803dcc0:	681b      	ldr	r3, [r3, #0]
 803dcc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 803dcc4:	429a      	cmp	r2, r3
 803dcc6:	d016      	beq.n	803dcf6 <AT_SingleInteger+0xba>
                sprintf(cmd, "AT+%s=%d\r", command, (int) *value);
 803dcc8:	687b      	ldr	r3, [r7, #4]
 803dcca:	681b      	ldr	r3, [r3, #0]
 803dccc:	f107 0028 	add.w	r0, r7, #40	; 0x28
 803dcd0:	68fa      	ldr	r2, [r7, #12]
 803dcd2:	4911      	ldr	r1, [pc, #68]	; (803dd18 <AT_SingleInteger+0xdc>)
 803dcd4:	f001 fea6 	bl	803fa24 <siprintf>
                p = AT_CmdWrite(cmd, 500, NULL);
 803dcd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 803dcdc:	2200      	movs	r2, #0
 803dcde:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 803dce2:	4618      	mov	r0, r3
 803dce4:	f000 f81a 	bl	803dd1c <AT_CmdWrite>
 803dce8:	4603      	mov	r3, r0
 803dcea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 803dcee:	e002      	b.n	803dcf6 <AT_SingleInteger+0xba>
            }
        } else {
            *value = tmp;
 803dcf0:	687b      	ldr	r3, [r7, #4]
 803dcf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 803dcf4:	601a      	str	r2, [r3, #0]
        }
    }
    Simcom_Unlock();
 803dcf6:	f000 fdf9 	bl	803e8ec <Simcom_Unlock>

    return p;
 803dcfa:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 803dcfe:	4618      	mov	r0, r3
 803dd00:	3748      	adds	r7, #72	; 0x48
 803dd02:	46bd      	mov	sp, r7
 803dd04:	bd80      	pop	{r7, pc}
 803dd06:	bf00      	nop
 803dd08:	08043de0 	.word	0x08043de0
 803dd0c:	08043de4 	.word	0x08043de4
 803dd10:	08043de8 	.word	0x08043de8
 803dd14:	08043cd8 	.word	0x08043cd8
 803dd18:	08043ce0 	.word	0x08043ce0

0803dd1c <AT_CmdWrite>:

static SIMCOM_RESULT AT_CmdWrite(char *cmd, uint32_t ms, char *res) {
 803dd1c:	b580      	push	{r7, lr}
 803dd1e:	b086      	sub	sp, #24
 803dd20:	af00      	add	r7, sp, #0
 803dd22:	60f8      	str	r0, [r7, #12]
 803dd24:	60b9      	str	r1, [r7, #8]
 803dd26:	607a      	str	r2, [r7, #4]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 803dd28:	2300      	movs	r3, #0
 803dd2a:	75fb      	strb	r3, [r7, #23]

    if (SIM.state >= SIM_STATE_READY) {
 803dd2c:	4b09      	ldr	r3, [pc, #36]	; (803dd54 <AT_CmdWrite+0x38>)
 803dd2e:	f993 3000 	ldrsb.w	r3, [r3]
 803dd32:	2b00      	cmp	r3, #0
 803dd34:	db07      	blt.n	803dd46 <AT_CmdWrite+0x2a>
        p = Simcom_Command(cmd, res, ms, 0);
 803dd36:	2300      	movs	r3, #0
 803dd38:	68ba      	ldr	r2, [r7, #8]
 803dd3a:	6879      	ldr	r1, [r7, #4]
 803dd3c:	68f8      	ldr	r0, [r7, #12]
 803dd3e:	f001 fab3 	bl	803f2a8 <Simcom_Command>
 803dd42:	4603      	mov	r3, r0
 803dd44:	75fb      	strb	r3, [r7, #23]
    }

    return p;
 803dd46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 803dd4a:	4618      	mov	r0, r3
 803dd4c:	3718      	adds	r7, #24
 803dd4e:	46bd      	mov	sp, r7
 803dd50:	bd80      	pop	{r7, pc}
 803dd52:	bf00      	nop
 803dd54:	200002a8 	.word	0x200002a8

0803dd58 <AT_CmdRead>:

static SIMCOM_RESULT AT_CmdRead(char *cmd, uint32_t ms, char *prefix, char **str) {
 803dd58:	b590      	push	{r4, r7, lr}
 803dd5a:	b087      	sub	sp, #28
 803dd5c:	af00      	add	r7, sp, #0
 803dd5e:	60f8      	str	r0, [r7, #12]
 803dd60:	60b9      	str	r1, [r7, #8]
 803dd62:	607a      	str	r2, [r7, #4]
 803dd64:	603b      	str	r3, [r7, #0]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 803dd66:	2300      	movs	r3, #0
 803dd68:	75fb      	strb	r3, [r7, #23]

    if (SIM.state >= SIM_STATE_READY) {
 803dd6a:	4b16      	ldr	r3, [pc, #88]	; (803ddc4 <AT_CmdRead+0x6c>)
 803dd6c:	f993 3000 	ldrsb.w	r3, [r3]
 803dd70:	2b00      	cmp	r3, #0
 803dd72:	db20      	blt.n	803ddb6 <AT_CmdRead+0x5e>
        p = Simcom_Command(cmd, prefix, ms, 0);
 803dd74:	2300      	movs	r3, #0
 803dd76:	68ba      	ldr	r2, [r7, #8]
 803dd78:	6879      	ldr	r1, [r7, #4]
 803dd7a:	68f8      	ldr	r0, [r7, #12]
 803dd7c:	f001 fa94 	bl	803f2a8 <Simcom_Command>
 803dd80:	4603      	mov	r3, r0
 803dd82:	75fb      	strb	r3, [r7, #23]

        if (p > 0) {
 803dd84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 803dd88:	2b00      	cmp	r3, #0
 803dd8a:	dd14      	ble.n	803ddb6 <AT_CmdRead+0x5e>
            *str = Simcom_Response(prefix);
 803dd8c:	6878      	ldr	r0, [r7, #4]
 803dd8e:	f000 fdb9 	bl	803e904 <Simcom_Response>
 803dd92:	4602      	mov	r2, r0
 803dd94:	683b      	ldr	r3, [r7, #0]
 803dd96:	601a      	str	r2, [r3, #0]

            if (*str != NULL) {
 803dd98:	683b      	ldr	r3, [r7, #0]
 803dd9a:	681b      	ldr	r3, [r3, #0]
 803dd9c:	2b00      	cmp	r3, #0
 803dd9e:	d00a      	beq.n	803ddb6 <AT_CmdRead+0x5e>
                *str += strlen(prefix);
 803dda0:	683b      	ldr	r3, [r7, #0]
 803dda2:	681c      	ldr	r4, [r3, #0]
 803dda4:	6878      	ldr	r0, [r7, #4]
 803dda6:	f7e2 fa45 	bl	8020234 <strlen>
 803ddaa:	4603      	mov	r3, r0
 803ddac:	18e2      	adds	r2, r4, r3
 803ddae:	683b      	ldr	r3, [r7, #0]
 803ddb0:	601a      	str	r2, [r3, #0]

                p = SIM_RESULT_OK;
 803ddb2:	2301      	movs	r3, #1
 803ddb4:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return p;
 803ddb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 803ddba:	4618      	mov	r0, r3
 803ddbc:	371c      	adds	r7, #28
 803ddbe:	46bd      	mov	sp, r7
 803ddc0:	bd90      	pop	{r4, r7, pc}
 803ddc2:	bf00      	nop
 803ddc4:	200002a8 	.word	0x200002a8

0803ddc8 <AT_ParseText>:

static void AT_ParseText(const char *ptr, uint8_t *cnt, char *text, uint8_t size) {
 803ddc8:	b480      	push	{r7}
 803ddca:	b087      	sub	sp, #28
 803ddcc:	af00      	add	r7, sp, #0
 803ddce:	60f8      	str	r0, [r7, #12]
 803ddd0:	60b9      	str	r1, [r7, #8]
 803ddd2:	607a      	str	r2, [r7, #4]
 803ddd4:	70fb      	strb	r3, [r7, #3]
    uint8_t i = 0;
 803ddd6:	2300      	movs	r3, #0
 803ddd8:	75fb      	strb	r3, [r7, #23]

    // check for double quote start
    if (*ptr == '"') {
 803ddda:	68fb      	ldr	r3, [r7, #12]
 803dddc:	781b      	ldrb	r3, [r3, #0]
 803ddde:	2b22      	cmp	r3, #34	; 0x22
 803dde0:	d119      	bne.n	803de16 <AT_ParseText+0x4e>
        ptr++;
 803dde2:	68fb      	ldr	r3, [r7, #12]
 803dde4:	3301      	adds	r3, #1
 803dde6:	60fb      	str	r3, [r7, #12]
        i++;
 803dde8:	7dfb      	ldrb	r3, [r7, #23]
 803ddea:	3301      	adds	r3, #1
 803ddec:	75fb      	strb	r3, [r7, #23]
    }
    // Parse text
    while (*ptr != '"' && *ptr != '\r' && *ptr != '\n') {
 803ddee:	e012      	b.n	803de16 <AT_ParseText+0x4e>
        *text = *ptr;
 803ddf0:	68fb      	ldr	r3, [r7, #12]
 803ddf2:	781a      	ldrb	r2, [r3, #0]
 803ddf4:	687b      	ldr	r3, [r7, #4]
 803ddf6:	701a      	strb	r2, [r3, #0]

        // increment
        text++;
 803ddf8:	687b      	ldr	r3, [r7, #4]
 803ddfa:	3301      	adds	r3, #1
 803ddfc:	607b      	str	r3, [r7, #4]
        ptr++;
 803ddfe:	68fb      	ldr	r3, [r7, #12]
 803de00:	3301      	adds	r3, #1
 803de02:	60fb      	str	r3, [r7, #12]
        i++;
 803de04:	7dfb      	ldrb	r3, [r7, #23]
 803de06:	3301      	adds	r3, #1
 803de08:	75fb      	strb	r3, [r7, #23]
        size--;
 803de0a:	78fb      	ldrb	r3, [r7, #3]
 803de0c:	3b01      	subs	r3, #1
 803de0e:	70fb      	strb	r3, [r7, #3]

        // handle overflow
        if (size <= 1) {
 803de10:	78fb      	ldrb	r3, [r7, #3]
 803de12:	2b01      	cmp	r3, #1
 803de14:	d90c      	bls.n	803de30 <AT_ParseText+0x68>
    while (*ptr != '"' && *ptr != '\r' && *ptr != '\n') {
 803de16:	68fb      	ldr	r3, [r7, #12]
 803de18:	781b      	ldrb	r3, [r3, #0]
 803de1a:	2b22      	cmp	r3, #34	; 0x22
 803de1c:	d009      	beq.n	803de32 <AT_ParseText+0x6a>
 803de1e:	68fb      	ldr	r3, [r7, #12]
 803de20:	781b      	ldrb	r3, [r3, #0]
 803de22:	2b0d      	cmp	r3, #13
 803de24:	d005      	beq.n	803de32 <AT_ParseText+0x6a>
 803de26:	68fb      	ldr	r3, [r7, #12]
 803de28:	781b      	ldrb	r3, [r3, #0]
 803de2a:	2b0a      	cmp	r3, #10
 803de2c:	d1e0      	bne.n	803ddf0 <AT_ParseText+0x28>
 803de2e:	e000      	b.n	803de32 <AT_ParseText+0x6a>
            break;
 803de30:	bf00      	nop
        }
    }
    // end of parsing for : double-quote, tab, new-line
    *text = '\0';
 803de32:	687b      	ldr	r3, [r7, #4]
 803de34:	2200      	movs	r2, #0
 803de36:	701a      	strb	r2, [r3, #0]
    ptr++;
 803de38:	68fb      	ldr	r3, [r7, #12]
 803de3a:	3301      	adds	r3, #1
 803de3c:	60fb      	str	r3, [r7, #12]
    i++;
 803de3e:	7dfb      	ldrb	r3, [r7, #23]
 803de40:	3301      	adds	r3, #1
 803de42:	75fb      	strb	r3, [r7, #23]
    // Save number of characters used for number
    if (cnt != NULL) {
 803de44:	68bb      	ldr	r3, [r7, #8]
 803de46:	2b00      	cmp	r3, #0
 803de48:	d002      	beq.n	803de50 <AT_ParseText+0x88>
        *cnt = i;
 803de4a:	68bb      	ldr	r3, [r7, #8]
 803de4c:	7dfa      	ldrb	r2, [r7, #23]
 803de4e:	701a      	strb	r2, [r3, #0]
    }
}
 803de50:	bf00      	nop
 803de52:	371c      	adds	r7, #28
 803de54:	46bd      	mov	sp, r7
 803de56:	f85d 7b04 	ldr.w	r7, [sp], #4
 803de5a:	4770      	bx	lr

0803de5c <AT_ParseNumber>:

static int32_t AT_ParseNumber(const char *ptr, uint8_t *cnt) {
 803de5c:	b480      	push	{r7}
 803de5e:	b085      	sub	sp, #20
 803de60:	af00      	add	r7, sp, #0
 803de62:	6078      	str	r0, [r7, #4]
 803de64:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 803de66:	2300      	movs	r3, #0
 803de68:	73fb      	strb	r3, [r7, #15]
 803de6a:	2300      	movs	r3, #0
 803de6c:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 803de6e:	2300      	movs	r3, #0
 803de70:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') { /* Check for minus character */
 803de72:	687b      	ldr	r3, [r7, #4]
 803de74:	781b      	ldrb	r3, [r3, #0]
 803de76:	2b2d      	cmp	r3, #45	; 0x2d
 803de78:	d119      	bne.n	803deae <AT_ParseNumber+0x52>
        minus = 1;
 803de7a:	2301      	movs	r3, #1
 803de7c:	73fb      	strb	r3, [r7, #15]
        ptr++;
 803de7e:	687b      	ldr	r3, [r7, #4]
 803de80:	3301      	adds	r3, #1
 803de82:	607b      	str	r3, [r7, #4]
        i++;
 803de84:	7bbb      	ldrb	r3, [r7, #14]
 803de86:	3301      	adds	r3, #1
 803de88:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) { /* Parse number */
 803de8a:	e010      	b.n	803deae <AT_ParseNumber+0x52>
        sum = 10 * sum + CHARTONUM(*ptr);
 803de8c:	68ba      	ldr	r2, [r7, #8]
 803de8e:	4613      	mov	r3, r2
 803de90:	009b      	lsls	r3, r3, #2
 803de92:	4413      	add	r3, r2
 803de94:	005b      	lsls	r3, r3, #1
 803de96:	461a      	mov	r2, r3
 803de98:	687b      	ldr	r3, [r7, #4]
 803de9a:	781b      	ldrb	r3, [r3, #0]
 803de9c:	3b30      	subs	r3, #48	; 0x30
 803de9e:	4413      	add	r3, r2
 803dea0:	60bb      	str	r3, [r7, #8]
        ptr++;
 803dea2:	687b      	ldr	r3, [r7, #4]
 803dea4:	3301      	adds	r3, #1
 803dea6:	607b      	str	r3, [r7, #4]
        i++;
 803dea8:	7bbb      	ldrb	r3, [r7, #14]
 803deaa:	3301      	adds	r3, #1
 803deac:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) { /* Parse number */
 803deae:	687b      	ldr	r3, [r7, #4]
 803deb0:	781b      	ldrb	r3, [r3, #0]
 803deb2:	2b2f      	cmp	r3, #47	; 0x2f
 803deb4:	d903      	bls.n	803debe <AT_ParseNumber+0x62>
 803deb6:	687b      	ldr	r3, [r7, #4]
 803deb8:	781b      	ldrb	r3, [r3, #0]
 803deba:	2b39      	cmp	r3, #57	; 0x39
 803debc:	d9e6      	bls.n	803de8c <AT_ParseNumber+0x30>
    }
    if (cnt != NULL) { /* Save number of characters used for number */
 803debe:	683b      	ldr	r3, [r7, #0]
 803dec0:	2b00      	cmp	r3, #0
 803dec2:	d002      	beq.n	803deca <AT_ParseNumber+0x6e>
        *cnt = i;
 803dec4:	683b      	ldr	r3, [r7, #0]
 803dec6:	7bba      	ldrb	r2, [r7, #14]
 803dec8:	701a      	strb	r2, [r3, #0]
    }
    if (minus) { /* Minus detected */
 803deca:	7bfb      	ldrb	r3, [r7, #15]
 803decc:	2b00      	cmp	r3, #0
 803dece:	d002      	beq.n	803ded6 <AT_ParseNumber+0x7a>
        return 0 - sum;
 803ded0:	68bb      	ldr	r3, [r7, #8]
 803ded2:	425b      	negs	r3, r3
 803ded4:	e000      	b.n	803ded8 <AT_ParseNumber+0x7c>
    }
    return sum; /* Return number */
 803ded6:	68bb      	ldr	r3, [r7, #8]
}
 803ded8:	4618      	mov	r0, r3
 803deda:	3714      	adds	r7, #20
 803dedc:	46bd      	mov	sp, r7
 803dede:	f85d 7b04 	ldr.w	r7, [sp], #4
 803dee2:	4770      	bx	lr

0803dee4 <CANBUS_Init>:
/* Private functions declaration ----------------------------------------------*/
static void lock(void);
static void unlock(void);

/* Public functions implementation ---------------------------------------------*/
void CANBUS_Init(void) {
 803dee4:	b580      	push	{r7, lr}
 803dee6:	af00      	add	r7, sp, #0
    /* Configure the CAN Filter */
    if (!CANBUS_Filter()) {
 803dee8:	f000 f836 	bl	803df58 <CANBUS_Filter>
 803deec:	4603      	mov	r3, r0
 803deee:	2b00      	cmp	r3, #0
 803def0:	d101      	bne.n	803def6 <CANBUS_Init+0x12>
        /* Start Error */
        Error_Handler();
 803def2:	f7ed fa27 	bl	802b344 <Error_Handler>
    }

    /* Start the CAN peripheral */
    if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 803def6:	4809      	ldr	r0, [pc, #36]	; (803df1c <CANBUS_Init+0x38>)
 803def8:	f7ee ff8e 	bl	802ce18 <HAL_CAN_Start>
 803defc:	4603      	mov	r3, r0
 803defe:	2b00      	cmp	r3, #0
 803df00:	d001      	beq.n	803df06 <CANBUS_Init+0x22>
        /* Start Error */
        Error_Handler();
 803df02:	f7ed fa1f 	bl	802b344 <Error_Handler>
    }

    /* Activate CAN RX notification */
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 803df06:	2102      	movs	r1, #2
 803df08:	4804      	ldr	r0, [pc, #16]	; (803df1c <CANBUS_Init+0x38>)
 803df0a:	f7ef f9eb 	bl	802d2e4 <HAL_CAN_ActivateNotification>
 803df0e:	4603      	mov	r3, r0
 803df10:	2b00      	cmp	r3, #0
 803df12:	d001      	beq.n	803df18 <CANBUS_Init+0x34>
        /* Notification Error */
        Error_Handler();
 803df14:	f7ed fa16 	bl	802b344 <Error_Handler>
    }
}
 803df18:	bf00      	nop
 803df1a:	bd80      	pop	{r7, pc}
 803df1c:	20008934 	.word	0x20008934

0803df20 <CANBUS_Header>:

void CANBUS_Header(CAN_TxHeaderTypeDef *TxHeader, uint32_t StdId, uint32_t DLC) {
 803df20:	b480      	push	{r7}
 803df22:	b085      	sub	sp, #20
 803df24:	af00      	add	r7, sp, #0
 803df26:	60f8      	str	r0, [r7, #12]
 803df28:	60b9      	str	r1, [r7, #8]
 803df2a:	607a      	str	r2, [r7, #4]
    /* Configure Global Transmission process */
    TxHeader->RTR = CAN_RTR_DATA;
 803df2c:	68fb      	ldr	r3, [r7, #12]
 803df2e:	2200      	movs	r2, #0
 803df30:	60da      	str	r2, [r3, #12]
    TxHeader->IDE = CAN_ID_STD;
 803df32:	68fb      	ldr	r3, [r7, #12]
 803df34:	2200      	movs	r2, #0
 803df36:	609a      	str	r2, [r3, #8]
    TxHeader->TransmitGlobalTime = DISABLE;
 803df38:	68fb      	ldr	r3, [r7, #12]
 803df3a:	2200      	movs	r2, #0
 803df3c:	751a      	strb	r2, [r3, #20]
    TxHeader->StdId = StdId;
 803df3e:	68fb      	ldr	r3, [r7, #12]
 803df40:	68ba      	ldr	r2, [r7, #8]
 803df42:	601a      	str	r2, [r3, #0]
    TxHeader->DLC = DLC;
 803df44:	68fb      	ldr	r3, [r7, #12]
 803df46:	687a      	ldr	r2, [r7, #4]
 803df48:	611a      	str	r2, [r3, #16]
}
 803df4a:	bf00      	nop
 803df4c:	3714      	adds	r7, #20
 803df4e:	46bd      	mov	sp, r7
 803df50:	f85d 7b04 	ldr.w	r7, [sp], #4
 803df54:	4770      	bx	lr
	...

0803df58 <CANBUS_Filter>:

uint8_t CANBUS_Filter(void) {
 803df58:	b580      	push	{r7, lr}
 803df5a:	b08a      	sub	sp, #40	; 0x28
 803df5c:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef sFilterConfig;

    /* Configure the CAN Filter */
    sFilterConfig.FilterBank = 0;
 803df5e:	2300      	movs	r3, #0
 803df60:	617b      	str	r3, [r7, #20]
    // set filter to mask mode (not id_list mode)
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 803df62:	2300      	movs	r3, #0
 803df64:	61bb      	str	r3, [r7, #24]
    // set 32-bit scale configuration
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 803df66:	2301      	movs	r3, #1
 803df68:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterIdHigh = 0x0000;
 803df6a:	2300      	movs	r3, #0
 803df6c:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIdLow = 0x0000;
 803df6e:	2300      	movs	r3, #0
 803df70:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 803df72:	2300      	movs	r3, #0
 803df74:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 803df76:	2300      	movs	r3, #0
 803df78:	60fb      	str	r3, [r7, #12]
    // assign filter to FIFO 0
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 803df7a:	2300      	movs	r3, #0
 803df7c:	613b      	str	r3, [r7, #16]
    // activate filter
    sFilterConfig.FilterActivation = ENABLE;
 803df7e:	2301      	movs	r3, #1
 803df80:	623b      	str	r3, [r7, #32]

    return (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) == HAL_OK);
 803df82:	463b      	mov	r3, r7
 803df84:	4619      	mov	r1, r3
 803df86:	4806      	ldr	r0, [pc, #24]	; (803dfa0 <CANBUS_Filter+0x48>)
 803df88:	f7ee fe5a 	bl	802cc40 <HAL_CAN_ConfigFilter>
 803df8c:	4603      	mov	r3, r0
 803df8e:	2b00      	cmp	r3, #0
 803df90:	bf0c      	ite	eq
 803df92:	2301      	moveq	r3, #1
 803df94:	2300      	movne	r3, #0
 803df96:	b2db      	uxtb	r3, r3
}
 803df98:	4618      	mov	r0, r3
 803df9a:	3728      	adds	r7, #40	; 0x28
 803df9c:	46bd      	mov	sp, r7
 803df9e:	bd80      	pop	{r7, pc}
 803dfa0:	20008934 	.word	0x20008934

0803dfa4 <CANBUS_Write>:

/*----------------------------------------------------------------------------
 wite a message to CAN peripheral and transmit it
 *----------------------------------------------------------------------------*/
uint8_t CANBUS_Write(canbus_tx_t *tx) {
 803dfa4:	b580      	push	{r7, lr}
 803dfa6:	b084      	sub	sp, #16
 803dfa8:	af00      	add	r7, sp, #0
 803dfaa:	6078      	str	r0, [r7, #4]
    uint32_t TxMailbox;
    HAL_StatusTypeDef status;

    lock();
 803dfac:	f000 f870 	bl	803e090 <lock>
    // check tx mailbox is ready
    while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1)) {
 803dfb0:	e002      	b.n	803dfb8 <CANBUS_Write+0x14>
        _DelayMS(1);
 803dfb2:	2001      	movs	r0, #1
 803dfb4:	f001 fc04 	bl	803f7c0 <_DelayMS>
    while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1)) {
 803dfb8:	480e      	ldr	r0, [pc, #56]	; (803dff4 <CANBUS_Write+0x50>)
 803dfba:	f7ef f84c 	bl	802d056 <HAL_CAN_GetTxMailboxesFreeLevel>
 803dfbe:	4603      	mov	r3, r0
 803dfc0:	2b00      	cmp	r3, #0
 803dfc2:	d0f6      	beq.n	803dfb2 <CANBUS_Write+0xe>
    };

    /* Start the Transmission process */
    status = HAL_CAN_AddTxMessage(&hcan1, &(tx->header), tx->data.u8, &TxMailbox);
 803dfc4:	6879      	ldr	r1, [r7, #4]
 803dfc6:	687b      	ldr	r3, [r7, #4]
 803dfc8:	f103 0218 	add.w	r2, r3, #24
 803dfcc:	f107 0308 	add.w	r3, r7, #8
 803dfd0:	4808      	ldr	r0, [pc, #32]	; (803dff4 <CANBUS_Write+0x50>)
 803dfd2:	f7ee ff65 	bl	802cea0 <HAL_CAN_AddTxMessage>
 803dfd6:	4603      	mov	r3, r0
 803dfd8:	73fb      	strb	r3, [r7, #15]

//    if (status == HAL_OK) {
//        CANBUS_TxDebugger();
//    }
    unlock();
 803dfda:	f000 f867 	bl	803e0ac <unlock>

    return (status == HAL_OK);
 803dfde:	7bfb      	ldrb	r3, [r7, #15]
 803dfe0:	2b00      	cmp	r3, #0
 803dfe2:	bf0c      	ite	eq
 803dfe4:	2301      	moveq	r3, #1
 803dfe6:	2300      	movne	r3, #0
 803dfe8:	b2db      	uxtb	r3, r3
}
 803dfea:	4618      	mov	r0, r3
 803dfec:	3710      	adds	r7, #16
 803dfee:	46bd      	mov	sp, r7
 803dff0:	bd80      	pop	{r7, pc}
 803dff2:	bf00      	nop
 803dff4:	20008934 	.word	0x20008934

0803dff8 <CANBUS_Read>:
    LOG_Enter();
}
/*----------------------------------------------------------------------------
 read a message from CAN peripheral and release it
 *----------------------------------------------------------------------------*/
uint8_t CANBUS_Read(canbus_rx_t *rx) {
 803dff8:	b580      	push	{r7, lr}
 803dffa:	b084      	sub	sp, #16
 803dffc:	af00      	add	r7, sp, #0
 803dffe:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;

    /* Get RX message */
    status = HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &(rx->header), rx->data.u8);
 803e000:	687a      	ldr	r2, [r7, #4]
 803e002:	687b      	ldr	r3, [r7, #4]
 803e004:	3320      	adds	r3, #32
 803e006:	2100      	movs	r1, #0
 803e008:	4807      	ldr	r0, [pc, #28]	; (803e028 <CANBUS_Read+0x30>)
 803e00a:	f7ef f859 	bl	802d0c0 <HAL_CAN_GetRxMessage>
 803e00e:	4603      	mov	r3, r0
 803e010:	73fb      	strb	r3, [r7, #15]

    //    if (status == HAL_OK) {
    //        CANBUS_RxDebugger();
    //    }

    return (status == HAL_OK);
 803e012:	7bfb      	ldrb	r3, [r7, #15]
 803e014:	2b00      	cmp	r3, #0
 803e016:	bf0c      	ite	eq
 803e018:	2301      	moveq	r3, #1
 803e01a:	2300      	movne	r3, #0
 803e01c:	b2db      	uxtb	r3, r3
}
 803e01e:	4618      	mov	r0, r3
 803e020:	3710      	adds	r7, #16
 803e022:	46bd      	mov	sp, r7
 803e024:	bd80      	pop	{r7, pc}
 803e026:	bf00      	nop
 803e028:	20008934 	.word	0x20008934

0803e02c <CANBUS_ReadID>:
        LOG_Str("RTR");
    }
    LOG_Enter();
}

uint32_t CANBUS_ReadID(void) {
 803e02c:	b480      	push	{r7}
 803e02e:	af00      	add	r7, sp, #0
    if (CB.rx.header.IDE == CAN_ID_STD) {
 803e030:	4b07      	ldr	r3, [pc, #28]	; (803e050 <CANBUS_ReadID+0x24>)
 803e032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803e034:	2b00      	cmp	r3, #0
 803e036:	d102      	bne.n	803e03e <CANBUS_ReadID+0x12>
        return CB.rx.header.StdId;
 803e038:	4b05      	ldr	r3, [pc, #20]	; (803e050 <CANBUS_ReadID+0x24>)
 803e03a:	6a1b      	ldr	r3, [r3, #32]
 803e03c:	e002      	b.n	803e044 <CANBUS_ReadID+0x18>
    }
    return _R(CB.rx.header.ExtId, 20);
 803e03e:	4b04      	ldr	r3, [pc, #16]	; (803e050 <CANBUS_ReadID+0x24>)
 803e040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803e042:	0d1b      	lsrs	r3, r3, #20
}
 803e044:	4618      	mov	r0, r3
 803e046:	46bd      	mov	sp, r7
 803e048:	f85d 7b04 	ldr.w	r7, [sp], #4
 803e04c:	4770      	bx	lr
 803e04e:	bf00      	nop
 803e050:	200090a0 	.word	0x200090a0

0803e054 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 803e054:	b580      	push	{r7, lr}
 803e056:	b082      	sub	sp, #8
 803e058:	af00      	add	r7, sp, #0
 803e05a:	6078      	str	r0, [r7, #4]
    // read rx fifo
    if (CANBUS_Read(&(CB.rx))) {
 803e05c:	480a      	ldr	r0, [pc, #40]	; (803e088 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 803e05e:	f7ff ffcb 	bl	803dff8 <CANBUS_Read>
 803e062:	4603      	mov	r3, r0
 803e064:	2b00      	cmp	r3, #0
 803e066:	d00a      	beq.n	803e07e <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
#if (!BOOTLOADER)
        // signal only when RTOS started
        if (osKernelGetState() == osKernelRunning) {
 803e068:	f7f9 f9ca 	bl	8037400 <osKernelGetState>
 803e06c:	4603      	mov	r3, r0
 803e06e:	2b02      	cmp	r3, #2
 803e070:	d105      	bne.n	803e07e <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
            osThreadFlagsSet(CanRxTaskHandle, EVT_CAN_RX_IT);
 803e072:	4b06      	ldr	r3, [pc, #24]	; (803e08c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 803e074:	681b      	ldr	r3, [r3, #0]
 803e076:	2101      	movs	r1, #1
 803e078:	4618      	mov	r0, r3
 803e07a:	f7f9 fae7 	bl	803764c <osThreadFlagsSet>
        }
#endif
    }
}
 803e07e:	bf00      	nop
 803e080:	3708      	adds	r7, #8
 803e082:	46bd      	mov	sp, r7
 803e084:	bd80      	pop	{r7, pc}
 803e086:	bf00      	nop
 803e088:	200090c0 	.word	0x200090c0
 803e08c:	20008808 	.word	0x20008808

0803e090 <lock>:

/* Private functions implementation --------------------------------------------*/
static void lock(void) {
 803e090:	b580      	push	{r7, lr}
 803e092:	af00      	add	r7, sp, #0
#if (!BOOTLOADER)
    osMutexAcquire(CanTxMutexHandle, osWaitForever);
 803e094:	4b04      	ldr	r3, [pc, #16]	; (803e0a8 <lock+0x18>)
 803e096:	681b      	ldr	r3, [r3, #0]
 803e098:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 803e09c:	4618      	mov	r0, r3
 803e09e:	f7f9 fe43 	bl	8037d28 <osMutexAcquire>
#endif
}
 803e0a2:	bf00      	nop
 803e0a4:	bd80      	pop	{r7, pc}
 803e0a6:	bf00      	nop
 803e0a8:	20008588 	.word	0x20008588

0803e0ac <unlock>:

static void unlock(void) {
 803e0ac:	b580      	push	{r7, lr}
 803e0ae:	af00      	add	r7, sp, #0
#if (!BOOTLOADER)
    osMutexRelease(CanTxMutexHandle);
 803e0b0:	4b03      	ldr	r3, [pc, #12]	; (803e0c0 <unlock+0x14>)
 803e0b2:	681b      	ldr	r3, [r3, #0]
 803e0b4:	4618      	mov	r0, r3
 803e0b6:	f7f9 fe95 	bl	8037de4 <osMutexRelease>
#endif
}
 803e0ba:	bf00      	nop
 803e0bc:	bd80      	pop	{r7, pc}
 803e0be:	bf00      	nop
 803e0c0:	20008588 	.word	0x20008588

0803e0c4 <CRC_Calculate8>:
/* Private functions declaration ----------------------------------------------*/
static void lock(void);
static void unlock(void);

/* Public functions implementation --------------------------------------------*/
uint32_t CRC_Calculate8(uint8_t *arr, uint32_t count, uint8_t swapped) {
 803e0c4:	b580      	push	{r7, lr}
 803e0c6:	b08a      	sub	sp, #40	; 0x28
 803e0c8:	af00      	add	r7, sp, #0
 803e0ca:	60f8      	str	r0, [r7, #12]
 803e0cc:	60b9      	str	r1, [r7, #8]
 803e0ce:	4613      	mov	r3, r2
 803e0d0:	71fb      	strb	r3, [r7, #7]
    uint32_t cnt, result, value = 0;
 803e0d2:	2300      	movs	r3, #0
 803e0d4:	61fb      	str	r3, [r7, #28]
    uint8_t index = 0, remaining[4] = { 0 };
 803e0d6:	2300      	movs	r3, #0
 803e0d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 803e0dc:	2300      	movs	r3, #0
 803e0de:	617b      	str	r3, [r7, #20]

    lock();
 803e0e0:	f000 f85c 	bl	803e19c <lock>

    /* Reset generator */
    __HAL_CRC_DR_RESET(&hcrc);
 803e0e4:	4b2c      	ldr	r3, [pc, #176]	; (803e198 <CRC_Calculate8+0xd4>)
 803e0e6:	681b      	ldr	r3, [r3, #0]
 803e0e8:	689a      	ldr	r2, [r3, #8]
 803e0ea:	4b2b      	ldr	r3, [pc, #172]	; (803e198 <CRC_Calculate8+0xd4>)
 803e0ec:	681b      	ldr	r3, [r3, #0]
 803e0ee:	f042 0201 	orr.w	r2, r2, #1
 803e0f2:	609a      	str	r2, [r3, #8]

    /* Calculate number of 32-bit blocks */
    cnt = count >> 2;
 803e0f4:	68bb      	ldr	r3, [r7, #8]
 803e0f6:	089b      	lsrs	r3, r3, #2
 803e0f8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Calculate */
    while (cnt--) {
 803e0fa:	e011      	b.n	803e120 <CRC_Calculate8+0x5c>
        value = *(uint32_t*) arr;
 803e0fc:	68fb      	ldr	r3, [r7, #12]
 803e0fe:	681b      	ldr	r3, [r3, #0]
 803e100:	61fb      	str	r3, [r7, #28]
        /* Set new value */
        hcrc.Instance->DR = swapped ? _ByteSwap32(value) : value;
 803e102:	79fb      	ldrb	r3, [r7, #7]
 803e104:	2b00      	cmp	r3, #0
 803e106:	d004      	beq.n	803e112 <CRC_Calculate8+0x4e>
 803e108:	69f8      	ldr	r0, [r7, #28]
 803e10a:	f001 fb9b 	bl	803f844 <_ByteSwap32>
 803e10e:	4603      	mov	r3, r0
 803e110:	e000      	b.n	803e114 <CRC_Calculate8+0x50>
 803e112:	69fb      	ldr	r3, [r7, #28]
 803e114:	4a20      	ldr	r2, [pc, #128]	; (803e198 <CRC_Calculate8+0xd4>)
 803e116:	6812      	ldr	r2, [r2, #0]
 803e118:	6013      	str	r3, [r2, #0]

        /* Increase by 4 */
        arr += 4;
 803e11a:	68fb      	ldr	r3, [r7, #12]
 803e11c:	3304      	adds	r3, #4
 803e11e:	60fb      	str	r3, [r7, #12]
    while (cnt--) {
 803e120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803e122:	1e5a      	subs	r2, r3, #1
 803e124:	627a      	str	r2, [r7, #36]	; 0x24
 803e126:	2b00      	cmp	r3, #0
 803e128:	d1e8      	bne.n	803e0fc <CRC_Calculate8+0x38>
    }

    /* Calculate remaining data as 8-bit */
    cnt = count % 4;
 803e12a:	68bb      	ldr	r3, [r7, #8]
 803e12c:	f003 0303 	and.w	r3, r3, #3
 803e130:	627b      	str	r3, [r7, #36]	; 0x24

    if (cnt) {
 803e132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803e134:	2b00      	cmp	r3, #0
 803e136:	d024      	beq.n	803e182 <CRC_Calculate8+0xbe>
        /* Calculate */
        while (cnt--) {
 803e138:	e00e      	b.n	803e158 <CRC_Calculate8+0x94>
            remaining[index++] = *arr++;
 803e13a:	68fb      	ldr	r3, [r7, #12]
 803e13c:	1c5a      	adds	r2, r3, #1
 803e13e:	60fa      	str	r2, [r7, #12]
 803e140:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 803e144:	1c51      	adds	r1, r2, #1
 803e146:	f887 1023 	strb.w	r1, [r7, #35]	; 0x23
 803e14a:	4611      	mov	r1, r2
 803e14c:	781a      	ldrb	r2, [r3, #0]
 803e14e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 803e152:	440b      	add	r3, r1
 803e154:	f803 2c14 	strb.w	r2, [r3, #-20]
        while (cnt--) {
 803e158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803e15a:	1e5a      	subs	r2, r3, #1
 803e15c:	627a      	str	r2, [r7, #36]	; 0x24
 803e15e:	2b00      	cmp	r3, #0
 803e160:	d1eb      	bne.n	803e13a <CRC_Calculate8+0x76>
        }
        /* Set new value */
        value = *(uint32_t*) remaining;
 803e162:	f107 0314 	add.w	r3, r7, #20
 803e166:	681b      	ldr	r3, [r3, #0]
 803e168:	61fb      	str	r3, [r7, #28]
        hcrc.Instance->DR = swapped ? _ByteSwap32(value) : value;
 803e16a:	79fb      	ldrb	r3, [r7, #7]
 803e16c:	2b00      	cmp	r3, #0
 803e16e:	d004      	beq.n	803e17a <CRC_Calculate8+0xb6>
 803e170:	69f8      	ldr	r0, [r7, #28]
 803e172:	f001 fb67 	bl	803f844 <_ByteSwap32>
 803e176:	4603      	mov	r3, r0
 803e178:	e000      	b.n	803e17c <CRC_Calculate8+0xb8>
 803e17a:	69fb      	ldr	r3, [r7, #28]
 803e17c:	4a06      	ldr	r2, [pc, #24]	; (803e198 <CRC_Calculate8+0xd4>)
 803e17e:	6812      	ldr	r2, [r2, #0]
 803e180:	6013      	str	r3, [r2, #0]
    }
    result = hcrc.Instance->DR;
 803e182:	4b05      	ldr	r3, [pc, #20]	; (803e198 <CRC_Calculate8+0xd4>)
 803e184:	681b      	ldr	r3, [r3, #0]
 803e186:	681b      	ldr	r3, [r3, #0]
 803e188:	61bb      	str	r3, [r7, #24]

    unlock();
 803e18a:	f000 f815 	bl	803e1b8 <unlock>
    /* Return data */
    return result;
 803e18e:	69bb      	ldr	r3, [r7, #24]
}
 803e190:	4618      	mov	r0, r3
 803e192:	3728      	adds	r7, #40	; 0x28
 803e194:	46bd      	mov	sp, r7
 803e196:	bd80      	pop	{r7, pc}
 803e198:	200085dc 	.word	0x200085dc

0803e19c <lock>:

    return result;
}

/* Private functions implementation --------------------------------------------*/
static void lock(void) {
 803e19c:	b580      	push	{r7, lr}
 803e19e:	af00      	add	r7, sp, #0
#if (!BOOTLOADER)
    osMutexAcquire(CrcMutexHandle, osWaitForever);
 803e1a0:	4b04      	ldr	r3, [pc, #16]	; (803e1b4 <lock+0x18>)
 803e1a2:	681b      	ldr	r3, [r3, #0]
 803e1a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 803e1a8:	4618      	mov	r0, r3
 803e1aa:	f7f9 fdbd 	bl	8037d28 <osMutexAcquire>
#endif
}
 803e1ae:	bf00      	nop
 803e1b0:	bd80      	pop	{r7, pc}
 803e1b2:	bf00      	nop
 803e1b4:	20008648 	.word	0x20008648

0803e1b8 <unlock>:

static void unlock(void) {
 803e1b8:	b580      	push	{r7, lr}
 803e1ba:	af00      	add	r7, sp, #0
#if (!BOOTLOADER)
    osMutexRelease(CrcMutexHandle);
 803e1bc:	4b03      	ldr	r3, [pc, #12]	; (803e1cc <unlock+0x14>)
 803e1be:	681b      	ldr	r3, [r3, #0]
 803e1c0:	4618      	mov	r0, r3
 803e1c2:	f7f9 fe0f 	bl	8037de4 <osMutexRelease>
#endif
}
 803e1c6:	bf00      	nop
 803e1c8:	bd80      	pop	{r7, pc}
 803e1ca:	bf00      	nop
 803e1cc:	20008648 	.word	0x20008648

0803e1d0 <EEPROM24XX_SetDevice>:

/* Private variables ----------------------------------------------------------*/
static uint16_t DevAddress = EEPROM24_MAIN;

/* Public functions implementation ---------------------------------------------*/
void EEPROM24XX_SetDevice(EEPROM24_DEVICE Device) {
 803e1d0:	b480      	push	{r7}
 803e1d2:	b083      	sub	sp, #12
 803e1d4:	af00      	add	r7, sp, #0
 803e1d6:	4603      	mov	r3, r0
 803e1d8:	71fb      	strb	r3, [r7, #7]
    DevAddress = Device;
 803e1da:	79fb      	ldrb	r3, [r7, #7]
 803e1dc:	b29a      	uxth	r2, r3
 803e1de:	4b04      	ldr	r3, [pc, #16]	; (803e1f0 <EEPROM24XX_SetDevice+0x20>)
 803e1e0:	801a      	strh	r2, [r3, #0]
}
 803e1e2:	bf00      	nop
 803e1e4:	370c      	adds	r7, #12
 803e1e6:	46bd      	mov	sp, r7
 803e1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 803e1ec:	4770      	bx	lr
 803e1ee:	bf00      	nop
 803e1f0:	200002a4 	.word	0x200002a4

0803e1f4 <EEPROM24XX_IsConnected>:

uint8_t EEPROM24XX_IsConnected(void) {
 803e1f4:	b580      	push	{r7, lr}
 803e1f6:	af00      	add	r7, sp, #0
    return (HAL_I2C_IsDeviceReady(&hi2c2, DevAddress, 2, 1000) == HAL_OK);
 803e1f8:	4b07      	ldr	r3, [pc, #28]	; (803e218 <EEPROM24XX_IsConnected+0x24>)
 803e1fa:	8819      	ldrh	r1, [r3, #0]
 803e1fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 803e200:	2202      	movs	r2, #2
 803e202:	4806      	ldr	r0, [pc, #24]	; (803e21c <EEPROM24XX_IsConnected+0x28>)
 803e204:	f7f2 fcb4 	bl	8030b70 <HAL_I2C_IsDeviceReady>
 803e208:	4603      	mov	r3, r0
 803e20a:	2b00      	cmp	r3, #0
 803e20c:	bf0c      	ite	eq
 803e20e:	2301      	moveq	r3, #1
 803e210:	2300      	movne	r3, #0
 803e212:	b2db      	uxtb	r3, r3
}
 803e214:	4618      	mov	r0, r3
 803e216:	bd80      	pop	{r7, pc}
 803e218:	200002a4 	.word	0x200002a4
 803e21c:	200085e4 	.word	0x200085e4

0803e220 <EEPROM24XX_Save>:

uint8_t EEPROM24XX_Save(uint16_t Address, void *data, size_t size_of_data) {
 803e220:	b580      	push	{r7, lr}
 803e222:	b088      	sub	sp, #32
 803e224:	af04      	add	r7, sp, #16
 803e226:	4603      	mov	r3, r0
 803e228:	60b9      	str	r1, [r7, #8]
 803e22a:	607a      	str	r2, [r7, #4]
 803e22c:	81fb      	strh	r3, [r7, #14]
    if (size_of_data > 32) {
 803e22e:	687b      	ldr	r3, [r7, #4]
 803e230:	2b20      	cmp	r3, #32
 803e232:	d901      	bls.n	803e238 <EEPROM24XX_Save+0x18>
        return 0;
 803e234:	2300      	movs	r3, #0
 803e236:	e017      	b.n	803e268 <EEPROM24XX_Save+0x48>
    }

    if (HAL_I2C_Mem_Write(&hi2c2, DevAddress, Address, I2C_MEMADD_SIZE_16BIT, (uint8_t*) data, size_of_data, 100) == HAL_OK) {
 803e238:	4b0d      	ldr	r3, [pc, #52]	; (803e270 <EEPROM24XX_Save+0x50>)
 803e23a:	8819      	ldrh	r1, [r3, #0]
 803e23c:	687b      	ldr	r3, [r7, #4]
 803e23e:	b29b      	uxth	r3, r3
 803e240:	89f8      	ldrh	r0, [r7, #14]
 803e242:	2264      	movs	r2, #100	; 0x64
 803e244:	9202      	str	r2, [sp, #8]
 803e246:	9301      	str	r3, [sp, #4]
 803e248:	68bb      	ldr	r3, [r7, #8]
 803e24a:	9300      	str	r3, [sp, #0]
 803e24c:	2310      	movs	r3, #16
 803e24e:	4602      	mov	r2, r0
 803e250:	4808      	ldr	r0, [pc, #32]	; (803e274 <EEPROM24XX_Save+0x54>)
 803e252:	f7f2 f96d 	bl	8030530 <HAL_I2C_Mem_Write>
 803e256:	4603      	mov	r3, r0
 803e258:	2b00      	cmp	r3, #0
 803e25a:	d104      	bne.n	803e266 <EEPROM24XX_Save+0x46>
        _DelayMS(15);
 803e25c:	200f      	movs	r0, #15
 803e25e:	f001 faaf 	bl	803f7c0 <_DelayMS>
        return 1;
 803e262:	2301      	movs	r3, #1
 803e264:	e000      	b.n	803e268 <EEPROM24XX_Save+0x48>
    }
    return 0;
 803e266:	2300      	movs	r3, #0

}
 803e268:	4618      	mov	r0, r3
 803e26a:	3710      	adds	r7, #16
 803e26c:	46bd      	mov	sp, r7
 803e26e:	bd80      	pop	{r7, pc}
 803e270:	200002a4 	.word	0x200002a4
 803e274:	200085e4 	.word	0x200085e4

0803e278 <EEPROM24XX_Load>:

uint8_t EEPROM24XX_Load(uint16_t Address, void *data, size_t size_of_data) {
 803e278:	b580      	push	{r7, lr}
 803e27a:	b088      	sub	sp, #32
 803e27c:	af04      	add	r7, sp, #16
 803e27e:	4603      	mov	r3, r0
 803e280:	60b9      	str	r1, [r7, #8]
 803e282:	607a      	str	r2, [r7, #4]
 803e284:	81fb      	strh	r3, [r7, #14]
    return (HAL_I2C_Mem_Read(&hi2c2, DevAddress, Address, I2C_MEMADD_SIZE_16BIT, (uint8_t*) data, size_of_data, 100) == HAL_OK);
 803e286:	4b0c      	ldr	r3, [pc, #48]	; (803e2b8 <EEPROM24XX_Load+0x40>)
 803e288:	8819      	ldrh	r1, [r3, #0]
 803e28a:	687b      	ldr	r3, [r7, #4]
 803e28c:	b29b      	uxth	r3, r3
 803e28e:	89f8      	ldrh	r0, [r7, #14]
 803e290:	2264      	movs	r2, #100	; 0x64
 803e292:	9202      	str	r2, [sp, #8]
 803e294:	9301      	str	r3, [sp, #4]
 803e296:	68bb      	ldr	r3, [r7, #8]
 803e298:	9300      	str	r3, [sp, #0]
 803e29a:	2310      	movs	r3, #16
 803e29c:	4602      	mov	r2, r0
 803e29e:	4807      	ldr	r0, [pc, #28]	; (803e2bc <EEPROM24XX_Load+0x44>)
 803e2a0:	f7f2 fa40 	bl	8030724 <HAL_I2C_Mem_Read>
 803e2a4:	4603      	mov	r3, r0
 803e2a6:	2b00      	cmp	r3, #0
 803e2a8:	bf0c      	ite	eq
 803e2aa:	2301      	moveq	r3, #1
 803e2ac:	2300      	movne	r3, #0
 803e2ae:	b2db      	uxtb	r3, r3
}
 803e2b0:	4618      	mov	r0, r3
 803e2b2:	3710      	adds	r7, #16
 803e2b4:	46bd      	mov	sp, r7
 803e2b6:	bd80      	pop	{r7, pc}
 803e2b8:	200002a4 	.word	0x200002a4
 803e2bc:	200085e4 	.word	0x200085e4

0803e2c0 <LOG_Char>:
/* Private functions declarations ----------------------------------------------*/
static void lock(void);
static void unlock(void);

/* Public functions implementation ---------------------------------------------*/
void LOG_Char(char ch) {
 803e2c0:	b580      	push	{r7, lr}
 803e2c2:	b084      	sub	sp, #16
 803e2c4:	af00      	add	r7, sp, #0
 803e2c6:	4603      	mov	r3, r0
 803e2c8:	71fb      	strb	r3, [r7, #7]
    uint32_t tick;

    tick = _GetTickMS();
 803e2ca:	f001 fa84 	bl	803f7d6 <_GetTickMS>
 803e2ce:	60f8      	str	r0, [r7, #12]
    // wait if busy
    while (1) {
        if (ITM->PORT[0].u32 != 0 || _GetTickMS() - tick >= 10) {
 803e2d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 803e2d4:	681b      	ldr	r3, [r3, #0]
 803e2d6:	2b00      	cmp	r3, #0
 803e2d8:	d10a      	bne.n	803e2f0 <LOG_Char+0x30>
 803e2da:	f001 fa7c 	bl	803f7d6 <_GetTickMS>
 803e2de:	4602      	mov	r2, r0
 803e2e0:	68fb      	ldr	r3, [r7, #12]
 803e2e2:	1ad3      	subs	r3, r2, r3
 803e2e4:	2b09      	cmp	r3, #9
 803e2e6:	d803      	bhi.n	803e2f0 <LOG_Char+0x30>
            break;
        }
        _DelayMS(1);
 803e2e8:	2001      	movs	r0, #1
 803e2ea:	f001 fa69 	bl	803f7c0 <_DelayMS>
        if (ITM->PORT[0].u32 != 0 || _GetTickMS() - tick >= 10) {
 803e2ee:	e7ef      	b.n	803e2d0 <LOG_Char+0x10>
    }
    // send to ITM0
    ITM->PORT[0].u8 = (uint8_t) ch;
 803e2f0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 803e2f4:	79fb      	ldrb	r3, [r7, #7]
 803e2f6:	7013      	strb	r3, [r2, #0]
}
 803e2f8:	bf00      	nop
 803e2fa:	3710      	adds	r7, #16
 803e2fc:	46bd      	mov	sp, r7
 803e2fe:	bd80      	pop	{r7, pc}

0803e300 <LOG_Enter>:

void LOG_Enter(void) {
 803e300:	b580      	push	{r7, lr}
 803e302:	af00      	add	r7, sp, #0
    lock();
 803e304:	f000 f8f8 	bl	803e4f8 <lock>
    LOG_Char('\n');
 803e308:	200a      	movs	r0, #10
 803e30a:	f7ff ffd9 	bl	803e2c0 <LOG_Char>
    unlock();
 803e30e:	f000 f901 	bl	803e514 <unlock>
}
 803e312:	bf00      	nop
 803e314:	bd80      	pop	{r7, pc}
	...

0803e318 <LOG_Int>:

void LOG_Int(int32_t num) {
 803e318:	b580      	push	{r7, lr}
 803e31a:	b086      	sub	sp, #24
 803e31c:	af00      	add	r7, sp, #0
 803e31e:	6078      	str	r0, [r7, #4]
    lock();
 803e320:	f000 f8ea 	bl	803e4f8 <lock>

    char str[10]; // 10 chars max for INT32_MAX
    int i = 0;
 803e324:	2300      	movs	r3, #0
 803e326:	617b      	str	r3, [r7, #20]
    if (num < 0) {
 803e328:	687b      	ldr	r3, [r7, #4]
 803e32a:	2b00      	cmp	r3, #0
 803e32c:	da05      	bge.n	803e33a <LOG_Int+0x22>
        LOG_Char('-');
 803e32e:	202d      	movs	r0, #45	; 0x2d
 803e330:	f7ff ffc6 	bl	803e2c0 <LOG_Char>
        num *= -1;
 803e334:	687b      	ldr	r3, [r7, #4]
 803e336:	425b      	negs	r3, r3
 803e338:	607b      	str	r3, [r7, #4]
    }
    do
        str[i++] = num % 10 + '0';
 803e33a:	687a      	ldr	r2, [r7, #4]
 803e33c:	4b1c      	ldr	r3, [pc, #112]	; (803e3b0 <LOG_Int+0x98>)
 803e33e:	fb83 1302 	smull	r1, r3, r3, r2
 803e342:	1099      	asrs	r1, r3, #2
 803e344:	17d3      	asrs	r3, r2, #31
 803e346:	1ac9      	subs	r1, r1, r3
 803e348:	460b      	mov	r3, r1
 803e34a:	009b      	lsls	r3, r3, #2
 803e34c:	440b      	add	r3, r1
 803e34e:	005b      	lsls	r3, r3, #1
 803e350:	1ad1      	subs	r1, r2, r3
 803e352:	b2ca      	uxtb	r2, r1
 803e354:	697b      	ldr	r3, [r7, #20]
 803e356:	1c59      	adds	r1, r3, #1
 803e358:	6179      	str	r1, [r7, #20]
 803e35a:	3230      	adds	r2, #48	; 0x30
 803e35c:	b2d2      	uxtb	r2, r2
 803e35e:	f107 0118 	add.w	r1, r7, #24
 803e362:	440b      	add	r3, r1
 803e364:	f803 2c10 	strb.w	r2, [r3, #-16]
    while ((num /= 10) > 0);
 803e368:	687b      	ldr	r3, [r7, #4]
 803e36a:	4a11      	ldr	r2, [pc, #68]	; (803e3b0 <LOG_Int+0x98>)
 803e36c:	fb82 1203 	smull	r1, r2, r2, r3
 803e370:	1092      	asrs	r2, r2, #2
 803e372:	17db      	asrs	r3, r3, #31
 803e374:	1ad3      	subs	r3, r2, r3
 803e376:	607b      	str	r3, [r7, #4]
 803e378:	687b      	ldr	r3, [r7, #4]
 803e37a:	2b00      	cmp	r3, #0
 803e37c:	dcdd      	bgt.n	803e33a <LOG_Int+0x22>
    for (i--; i >= 0; i--)
 803e37e:	697b      	ldr	r3, [r7, #20]
 803e380:	3b01      	subs	r3, #1
 803e382:	617b      	str	r3, [r7, #20]
 803e384:	e00a      	b.n	803e39c <LOG_Int+0x84>
        LOG_Char(str[i]);
 803e386:	f107 0208 	add.w	r2, r7, #8
 803e38a:	697b      	ldr	r3, [r7, #20]
 803e38c:	4413      	add	r3, r2
 803e38e:	781b      	ldrb	r3, [r3, #0]
 803e390:	4618      	mov	r0, r3
 803e392:	f7ff ff95 	bl	803e2c0 <LOG_Char>
    for (i--; i >= 0; i--)
 803e396:	697b      	ldr	r3, [r7, #20]
 803e398:	3b01      	subs	r3, #1
 803e39a:	617b      	str	r3, [r7, #20]
 803e39c:	697b      	ldr	r3, [r7, #20]
 803e39e:	2b00      	cmp	r3, #0
 803e3a0:	daf1      	bge.n	803e386 <LOG_Int+0x6e>

    unlock();
 803e3a2:	f000 f8b7 	bl	803e514 <unlock>
}
 803e3a6:	bf00      	nop
 803e3a8:	3718      	adds	r7, #24
 803e3aa:	46bd      	mov	sp, r7
 803e3ac:	bd80      	pop	{r7, pc}
 803e3ae:	bf00      	nop
 803e3b0:	66666667 	.word	0x66666667

0803e3b4 <LOG_Hex8>:
        LOG_Char(str[i]);

    unlock();
}

void LOG_Hex8(uint8_t num) {
 803e3b4:	b580      	push	{r7, lr}
 803e3b6:	b082      	sub	sp, #8
 803e3b8:	af00      	add	r7, sp, #0
 803e3ba:	4603      	mov	r3, r0
 803e3bc:	71fb      	strb	r3, [r7, #7]
    lock();
 803e3be:	f000 f89b 	bl	803e4f8 <lock>

    LOG_Char(HEX_CHARS[(num >> 4) % 0x10]);
 803e3c2:	79fb      	ldrb	r3, [r7, #7]
 803e3c4:	091b      	lsrs	r3, r3, #4
 803e3c6:	b2db      	uxtb	r3, r3
 803e3c8:	461a      	mov	r2, r3
 803e3ca:	4b09      	ldr	r3, [pc, #36]	; (803e3f0 <LOG_Hex8+0x3c>)
 803e3cc:	5c9b      	ldrb	r3, [r3, r2]
 803e3ce:	4618      	mov	r0, r3
 803e3d0:	f7ff ff76 	bl	803e2c0 <LOG_Char>
    LOG_Char(HEX_CHARS[(num & 0x0f) % 0x10]);
 803e3d4:	79fb      	ldrb	r3, [r7, #7]
 803e3d6:	f003 030f 	and.w	r3, r3, #15
 803e3da:	4a05      	ldr	r2, [pc, #20]	; (803e3f0 <LOG_Hex8+0x3c>)
 803e3dc:	5cd3      	ldrb	r3, [r2, r3]
 803e3de:	4618      	mov	r0, r3
 803e3e0:	f7ff ff6e 	bl	803e2c0 <LOG_Char>

    unlock();
 803e3e4:	f000 f896 	bl	803e514 <unlock>
}
 803e3e8:	bf00      	nop
 803e3ea:	3708      	adds	r7, #8
 803e3ec:	46bd      	mov	sp, r7
 803e3ee:	bd80      	pop	{r7, pc}
 803e3f0:	08043df0 	.word	0x08043df0

0803e3f4 <LOG_Str>:
    LOG_Char(HEX_CHARS[(num & 0x0f) % 0x10]);

    unlock();
}

void LOG_Str(char *str) {
 803e3f4:	b580      	push	{r7, lr}
 803e3f6:	b082      	sub	sp, #8
 803e3f8:	af00      	add	r7, sp, #0
 803e3fa:	6078      	str	r0, [r7, #4]
    lock();
 803e3fc:	f000 f87c 	bl	803e4f8 <lock>

    while (*str != '\0')
 803e400:	e006      	b.n	803e410 <LOG_Str+0x1c>
        LOG_Char(*str++);
 803e402:	687b      	ldr	r3, [r7, #4]
 803e404:	1c5a      	adds	r2, r3, #1
 803e406:	607a      	str	r2, [r7, #4]
 803e408:	781b      	ldrb	r3, [r3, #0]
 803e40a:	4618      	mov	r0, r3
 803e40c:	f7ff ff58 	bl	803e2c0 <LOG_Char>
    while (*str != '\0')
 803e410:	687b      	ldr	r3, [r7, #4]
 803e412:	781b      	ldrb	r3, [r3, #0]
 803e414:	2b00      	cmp	r3, #0
 803e416:	d1f4      	bne.n	803e402 <LOG_Str+0xe>

    unlock();
 803e418:	f000 f87c 	bl	803e514 <unlock>
}
 803e41c:	bf00      	nop
 803e41e:	3708      	adds	r7, #8
 803e420:	46bd      	mov	sp, r7
 803e422:	bd80      	pop	{r7, pc}

0803e424 <LOG_StrLn>:

void LOG_StrLn(char *str) {
 803e424:	b580      	push	{r7, lr}
 803e426:	b082      	sub	sp, #8
 803e428:	af00      	add	r7, sp, #0
 803e42a:	6078      	str	r0, [r7, #4]
    lock();
 803e42c:	f000 f864 	bl	803e4f8 <lock>

    while (*str != '\0') {
 803e430:	e006      	b.n	803e440 <LOG_StrLn+0x1c>
        LOG_Char(*str++);
 803e432:	687b      	ldr	r3, [r7, #4]
 803e434:	1c5a      	adds	r2, r3, #1
 803e436:	607a      	str	r2, [r7, #4]
 803e438:	781b      	ldrb	r3, [r3, #0]
 803e43a:	4618      	mov	r0, r3
 803e43c:	f7ff ff40 	bl	803e2c0 <LOG_Char>
    while (*str != '\0') {
 803e440:	687b      	ldr	r3, [r7, #4]
 803e442:	781b      	ldrb	r3, [r3, #0]
 803e444:	2b00      	cmp	r3, #0
 803e446:	d1f4      	bne.n	803e432 <LOG_StrLn+0xe>
    }
    LOG_Char('\n');
 803e448:	200a      	movs	r0, #10
 803e44a:	f7ff ff39 	bl	803e2c0 <LOG_Char>

    unlock();
 803e44e:	f000 f861 	bl	803e514 <unlock>
}
 803e452:	bf00      	nop
 803e454:	3708      	adds	r7, #8
 803e456:	46bd      	mov	sp, r7
 803e458:	bd80      	pop	{r7, pc}

0803e45a <LOG_Buf>:

void LOG_Buf(char *buf, uint16_t bufsize) {
 803e45a:	b580      	push	{r7, lr}
 803e45c:	b084      	sub	sp, #16
 803e45e:	af00      	add	r7, sp, #0
 803e460:	6078      	str	r0, [r7, #4]
 803e462:	460b      	mov	r3, r1
 803e464:	807b      	strh	r3, [r7, #2]
    lock();
 803e466:	f000 f847 	bl	803e4f8 <lock>

    uint16_t i;
    for (i = 0; i < bufsize; i++)
 803e46a:	2300      	movs	r3, #0
 803e46c:	81fb      	strh	r3, [r7, #14]
 803e46e:	e009      	b.n	803e484 <LOG_Buf+0x2a>
        LOG_Char(*buf++);
 803e470:	687b      	ldr	r3, [r7, #4]
 803e472:	1c5a      	adds	r2, r3, #1
 803e474:	607a      	str	r2, [r7, #4]
 803e476:	781b      	ldrb	r3, [r3, #0]
 803e478:	4618      	mov	r0, r3
 803e47a:	f7ff ff21 	bl	803e2c0 <LOG_Char>
    for (i = 0; i < bufsize; i++)
 803e47e:	89fb      	ldrh	r3, [r7, #14]
 803e480:	3301      	adds	r3, #1
 803e482:	81fb      	strh	r3, [r7, #14]
 803e484:	89fa      	ldrh	r2, [r7, #14]
 803e486:	887b      	ldrh	r3, [r7, #2]
 803e488:	429a      	cmp	r2, r3
 803e48a:	d3f1      	bcc.n	803e470 <LOG_Buf+0x16>

    unlock();
 803e48c:	f000 f842 	bl	803e514 <unlock>
}
 803e490:	bf00      	nop
 803e492:	3710      	adds	r7, #16
 803e494:	46bd      	mov	sp, r7
 803e496:	bd80      	pop	{r7, pc}

0803e498 <LOG_BufHex>:
    }

    unlock();
}

void LOG_BufHex(char *buf, uint16_t bufsize) {
 803e498:	b580      	push	{r7, lr}
 803e49a:	b084      	sub	sp, #16
 803e49c:	af00      	add	r7, sp, #0
 803e49e:	6078      	str	r0, [r7, #4]
 803e4a0:	460b      	mov	r3, r1
 803e4a2:	807b      	strh	r3, [r7, #2]
    lock();
 803e4a4:	f000 f828 	bl	803e4f8 <lock>

    uint16_t i;
    char ch;
    for (i = 0; i < bufsize; i++) {
 803e4a8:	2300      	movs	r3, #0
 803e4aa:	81fb      	strh	r3, [r7, #14]
 803e4ac:	e018      	b.n	803e4e0 <LOG_BufHex+0x48>
        ch = *buf++;
 803e4ae:	687b      	ldr	r3, [r7, #4]
 803e4b0:	1c5a      	adds	r2, r3, #1
 803e4b2:	607a      	str	r2, [r7, #4]
 803e4b4:	781b      	ldrb	r3, [r3, #0]
 803e4b6:	737b      	strb	r3, [r7, #13]
        LOG_Char(HEX_CHARS[(ch >> 4) % 0x10]);
 803e4b8:	7b7b      	ldrb	r3, [r7, #13]
 803e4ba:	091b      	lsrs	r3, r3, #4
 803e4bc:	b2db      	uxtb	r3, r3
 803e4be:	461a      	mov	r2, r3
 803e4c0:	4b0c      	ldr	r3, [pc, #48]	; (803e4f4 <LOG_BufHex+0x5c>)
 803e4c2:	5c9b      	ldrb	r3, [r3, r2]
 803e4c4:	4618      	mov	r0, r3
 803e4c6:	f7ff fefb 	bl	803e2c0 <LOG_Char>
        LOG_Char(HEX_CHARS[(ch & 0x0f) % 0x10]);
 803e4ca:	7b7b      	ldrb	r3, [r7, #13]
 803e4cc:	f003 030f 	and.w	r3, r3, #15
 803e4d0:	4a08      	ldr	r2, [pc, #32]	; (803e4f4 <LOG_BufHex+0x5c>)
 803e4d2:	5cd3      	ldrb	r3, [r2, r3]
 803e4d4:	4618      	mov	r0, r3
 803e4d6:	f7ff fef3 	bl	803e2c0 <LOG_Char>
    for (i = 0; i < bufsize; i++) {
 803e4da:	89fb      	ldrh	r3, [r7, #14]
 803e4dc:	3301      	adds	r3, #1
 803e4de:	81fb      	strh	r3, [r7, #14]
 803e4e0:	89fa      	ldrh	r2, [r7, #14]
 803e4e2:	887b      	ldrh	r3, [r7, #2]
 803e4e4:	429a      	cmp	r2, r3
 803e4e6:	d3e2      	bcc.n	803e4ae <LOG_BufHex+0x16>
    }

    unlock();
 803e4e8:	f000 f814 	bl	803e514 <unlock>
}
 803e4ec:	bf00      	nop
 803e4ee:	3710      	adds	r7, #16
 803e4f0:	46bd      	mov	sp, r7
 803e4f2:	bd80      	pop	{r7, pc}
 803e4f4:	08043df0 	.word	0x08043df0

0803e4f8 <lock>:

    unlock();
}

/* Private functions implementations ----------------------------------------------*/
static void lock(void) {
 803e4f8:	b580      	push	{r7, lr}
 803e4fa:	af00      	add	r7, sp, #0
#if (!BOOTLOADER)
    osMutexAcquire(LogMutexHandle, osWaitForever);
 803e4fc:	4b04      	ldr	r3, [pc, #16]	; (803e510 <lock+0x18>)
 803e4fe:	681b      	ldr	r3, [r3, #0]
 803e500:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 803e504:	4618      	mov	r0, r3
 803e506:	f7f9 fc0f 	bl	8037d28 <osMutexAcquire>
#endif
}
 803e50a:	bf00      	nop
 803e50c:	bd80      	pop	{r7, pc}
 803e50e:	bf00      	nop
 803e510:	2000863c 	.word	0x2000863c

0803e514 <unlock>:

static void unlock(void) {
 803e514:	b580      	push	{r7, lr}
 803e516:	af00      	add	r7, sp, #0
#if (!BOOTLOADER)
    osMutexRelease(LogMutexHandle);
 803e518:	4b03      	ldr	r3, [pc, #12]	; (803e528 <unlock+0x14>)
 803e51a:	681b      	ldr	r3, [r3, #0]
 803e51c:	4618      	mov	r0, r3
 803e51e:	f7f9 fc61 	bl	8037de4 <osMutexRelease>
#endif
}
 803e522:	bf00      	nop
 803e524:	bd80      	pop	{r7, pc}
 803e526:	bf00      	nop
 803e528:	2000863c 	.word	0x2000863c

0803e52c <EEPROM_Init>:
static uint8_t EE_Command(uint16_t vaddr, EEPROM_COMMAND cmd, void *value, void *ptr, uint16_t size);
static void lock(void);
static void unlock(void);

/* Public functions implementation --------------------------------------------*/
uint8_t EEPROM_Init(void) {
 803e52c:	b580      	push	{r7, lr}
 803e52e:	b082      	sub	sp, #8
 803e530:	af00      	add	r7, sp, #0
    uint8_t retry, ret = 0;
 803e532:	2300      	movs	r3, #0
 803e534:	71bb      	strb	r3, [r7, #6]
    const uint8_t MAX_RETRY = 5;
 803e536:	2305      	movs	r3, #5
 803e538:	713b      	strb	r3, [r7, #4]
    const EEPROM24_DEVICE EEPROMS[2] = {
 803e53a:	4b26      	ldr	r3, [pc, #152]	; (803e5d4 <EEPROM_Init+0xa8>)
 803e53c:	881b      	ldrh	r3, [r3, #0]
 803e53e:	803b      	strh	r3, [r7, #0]
            EEPROM24_MAIN,
            EEPROM24_BACKUP
    };

    lock();
 803e540:	f000 f9ac 	bl	803e89c <lock>
    LOG_StrLn("EEPROM:Init");
 803e544:	4824      	ldr	r0, [pc, #144]	; (803e5d8 <EEPROM_Init+0xac>)
 803e546:	f7ff ff6d 	bl	803e424 <LOG_StrLn>
    // check each eeprom
    for (uint8_t i = 0; i < 1; i++) {
 803e54a:	2300      	movs	r3, #0
 803e54c:	717b      	strb	r3, [r7, #5]
 803e54e:	e02a      	b.n	803e5a6 <EEPROM_Init+0x7a>
        if (!ret) {
 803e550:	79bb      	ldrb	r3, [r7, #6]
 803e552:	2b00      	cmp	r3, #0
 803e554:	d124      	bne.n	803e5a0 <EEPROM_Init+0x74>
            retry = MAX_RETRY;
 803e556:	793b      	ldrb	r3, [r7, #4]
 803e558:	71fb      	strb	r3, [r7, #7]
            EEPROM24XX_SetDevice(EEPROMS[i]);
 803e55a:	797b      	ldrb	r3, [r7, #5]
 803e55c:	f107 0208 	add.w	r2, r7, #8
 803e560:	4413      	add	r3, r2
 803e562:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 803e566:	4618      	mov	r0, r3
 803e568:	f7ff fe32 	bl	803e1d0 <EEPROM24XX_SetDevice>
            do {
                if (EEPROM24XX_IsConnected()) {
 803e56c:	f7ff fe42 	bl	803e1f4 <EEPROM24XX_IsConnected>
 803e570:	4603      	mov	r3, r0
 803e572:	2b00      	cmp	r3, #0
 803e574:	d00c      	beq.n	803e590 <EEPROM_Init+0x64>
                    LOG_Str("EEPROM:Device = ");
 803e576:	4819      	ldr	r0, [pc, #100]	; (803e5dc <EEPROM_Init+0xb0>)
 803e578:	f7ff ff3c 	bl	803e3f4 <LOG_Str>
                    LOG_Int(i + 1);
 803e57c:	797b      	ldrb	r3, [r7, #5]
 803e57e:	3301      	adds	r3, #1
 803e580:	4618      	mov	r0, r3
 803e582:	f7ff fec9 	bl	803e318 <LOG_Int>
                    LOG_Enter();
 803e586:	f7ff febb 	bl	803e300 <LOG_Enter>

                    ret = 1;
 803e58a:	2301      	movs	r3, #1
 803e58c:	71bb      	strb	r3, [r7, #6]
                    break;
 803e58e:	e007      	b.n	803e5a0 <EEPROM_Init+0x74>
                }
                _DelayMS(50);
 803e590:	2032      	movs	r0, #50	; 0x32
 803e592:	f001 f915 	bl	803f7c0 <_DelayMS>
            } while (retry--);
 803e596:	79fb      	ldrb	r3, [r7, #7]
 803e598:	1e5a      	subs	r2, r3, #1
 803e59a:	71fa      	strb	r2, [r7, #7]
 803e59c:	2b00      	cmp	r3, #0
 803e59e:	d1e5      	bne.n	803e56c <EEPROM_Init+0x40>
    for (uint8_t i = 0; i < 1; i++) {
 803e5a0:	797b      	ldrb	r3, [r7, #5]
 803e5a2:	3301      	adds	r3, #1
 803e5a4:	717b      	strb	r3, [r7, #5]
 803e5a6:	797b      	ldrb	r3, [r7, #5]
 803e5a8:	2b00      	cmp	r3, #0
 803e5aa:	d0d1      	beq.n	803e550 <EEPROM_Init+0x24>
        }
    }

    // all failed
    if (!ret) {
 803e5ac:	79bb      	ldrb	r3, [r7, #6]
 803e5ae:	2b00      	cmp	r3, #0
 803e5b0:	d102      	bne.n	803e5b8 <EEPROM_Init+0x8c>
        LOG_StrLn("EEPROM:Error");
 803e5b2:	480b      	ldr	r0, [pc, #44]	; (803e5e0 <EEPROM_Init+0xb4>)
 803e5b4:	f7ff ff36 	bl	803e424 <LOG_StrLn>
    }
    unlock();
 803e5b8:	f000 f97e 	bl	803e8b8 <unlock>

#if (!BOOTLOADER)
    // Load or Reset
    EEPROM_ResetOrLoad();
 803e5bc:	f000 f812 	bl	803e5e4 <EEPROM_ResetOrLoad>
    EEPROM_FirmwareVersion(EE_CMD_R, EE_NULL);
 803e5c0:	2100      	movs	r1, #0
 803e5c2:	2000      	movs	r0, #0
 803e5c4:	f000 f91a 	bl	803e7fc <EEPROM_FirmwareVersion>
#endif
    return ret;
 803e5c8:	79bb      	ldrb	r3, [r7, #6]
}
 803e5ca:	4618      	mov	r0, r3
 803e5cc:	3708      	adds	r7, #8
 803e5ce:	46bd      	mov	sp, r7
 803e5d0:	bd80      	pop	{r7, pc}
 803e5d2:	bf00      	nop
 803e5d4:	08043e34 	.word	0x08043e34
 803e5d8:	08043e04 	.word	0x08043e04
 803e5dc:	08043e10 	.word	0x08043e10
 803e5e0:	08043e24 	.word	0x08043e24

0803e5e4 <EEPROM_ResetOrLoad>:

#if (!BOOTLOADER)
void EEPROM_ResetOrLoad(void) {
 803e5e4:	b580      	push	{r7, lr}
 803e5e6:	b086      	sub	sp, #24
 803e5e8:	af00      	add	r7, sp, #0
    uint32_t AesKeyNew[4];

    if (!EEPROM_Reset(EE_CMD_R, EEPROM_RESET)) {
 803e5ea:	2135      	movs	r1, #53	; 0x35
 803e5ec:	2000      	movs	r0, #0
 803e5ee:	f000 f849 	bl	803e684 <EEPROM_Reset>
 803e5f2:	4603      	mov	r3, r0
 803e5f4:	2b00      	cmp	r3, #0
 803e5f6:	d11b      	bne.n	803e630 <EEPROM_ResetOrLoad+0x4c>
        // load from EEPROM
        EEPROM_UnitID(EE_CMD_R, EE_NULL);
 803e5f8:	2100      	movs	r1, #0
 803e5fa:	2000      	movs	r0, #0
 803e5fc:	f000 f88a 	bl	803e714 <EEPROM_UnitID>
        EEPROM_Odometer(EE_CMD_R, EE_NULL);
 803e600:	2100      	movs	r1, #0
 803e602:	2000      	movs	r0, #0
 803e604:	f000 f868 	bl	803e6d8 <EEPROM_Odometer>
        for (uint8_t type = 0; type <= PAYLOAD_MAX; type++) {
 803e608:	2300      	movs	r3, #0
 803e60a:	75fb      	strb	r3, [r7, #23]
 803e60c:	e008      	b.n	803e620 <EEPROM_ResetOrLoad+0x3c>
            EEPROM_SequentialID(EE_CMD_R, EE_NULL, type);
 803e60e:	7dfb      	ldrb	r3, [r7, #23]
 803e610:	461a      	mov	r2, r3
 803e612:	2100      	movs	r1, #0
 803e614:	2000      	movs	r0, #0
 803e616:	f000 f89f 	bl	803e758 <EEPROM_SequentialID>
        for (uint8_t type = 0; type <= PAYLOAD_MAX; type++) {
 803e61a:	7dfb      	ldrb	r3, [r7, #23]
 803e61c:	3301      	adds	r3, #1
 803e61e:	75fb      	strb	r3, [r7, #23]
 803e620:	7dfb      	ldrb	r3, [r7, #23]
 803e622:	2b01      	cmp	r3, #1
 803e624:	d9f3      	bls.n	803e60e <EEPROM_ResetOrLoad+0x2a>
        }
        // load aes key
        EEPROM_AesKey(EE_CMD_R, EE_NULL);
 803e626:	2100      	movs	r1, #0
 803e628:	2000      	movs	r0, #0
 803e62a:	f000 f8bd 	bl	803e7a8 <EEPROM_AesKey>
        EEPROM_AesKey(EE_CMD_W, AesKeyNew);

        // re-write eeprom
        EEPROM_Reset(EE_CMD_W, EEPROM_RESET);
    }
}
 803e62e:	e023      	b.n	803e678 <EEPROM_ResetOrLoad+0x94>
        EEPROM_UnitID(EE_CMD_W, VCU_UNITID);
 803e630:	4913      	ldr	r1, [pc, #76]	; (803e680 <EEPROM_ResetOrLoad+0x9c>)
 803e632:	2001      	movs	r0, #1
 803e634:	f000 f86e 	bl	803e714 <EEPROM_UnitID>
        EEPROM_Odometer(EE_CMD_W, 0);
 803e638:	2100      	movs	r1, #0
 803e63a:	2001      	movs	r0, #1
 803e63c:	f000 f84c 	bl	803e6d8 <EEPROM_Odometer>
        for (uint8_t type = 0; type <= PAYLOAD_MAX; type++) {
 803e640:	2300      	movs	r3, #0
 803e642:	75bb      	strb	r3, [r7, #22]
 803e644:	e008      	b.n	803e658 <EEPROM_ResetOrLoad+0x74>
            EEPROM_SequentialID(EE_CMD_W, 0, type);
 803e646:	7dbb      	ldrb	r3, [r7, #22]
 803e648:	461a      	mov	r2, r3
 803e64a:	2100      	movs	r1, #0
 803e64c:	2001      	movs	r0, #1
 803e64e:	f000 f883 	bl	803e758 <EEPROM_SequentialID>
        for (uint8_t type = 0; type <= PAYLOAD_MAX; type++) {
 803e652:	7dbb      	ldrb	r3, [r7, #22]
 803e654:	3301      	adds	r3, #1
 803e656:	75bb      	strb	r3, [r7, #22]
 803e658:	7dbb      	ldrb	r3, [r7, #22]
 803e65a:	2b01      	cmp	r3, #1
 803e65c:	d9f3      	bls.n	803e646 <EEPROM_ResetOrLoad+0x62>
        KLESS_GenerateAesKey(AesKeyNew);
 803e65e:	1d3b      	adds	r3, r7, #4
 803e660:	4618      	mov	r0, r3
 803e662:	f7e9 fbd1 	bl	8027e08 <KLESS_GenerateAesKey>
        EEPROM_AesKey(EE_CMD_W, AesKeyNew);
 803e666:	1d3b      	adds	r3, r7, #4
 803e668:	4619      	mov	r1, r3
 803e66a:	2001      	movs	r0, #1
 803e66c:	f000 f89c 	bl	803e7a8 <EEPROM_AesKey>
        EEPROM_Reset(EE_CMD_W, EEPROM_RESET);
 803e670:	2135      	movs	r1, #53	; 0x35
 803e672:	2001      	movs	r0, #1
 803e674:	f000 f806 	bl	803e684 <EEPROM_Reset>
}
 803e678:	bf00      	nop
 803e67a:	3718      	adds	r7, #24
 803e67c:	46bd      	mov	sp, r7
 803e67e:	bd80      	pop	{r7, pc}
 803e680:	00056809 	.word	0x00056809

0803e684 <EEPROM_Reset>:

uint8_t EEPROM_Reset(EEPROM_COMMAND cmd, uint16_t value) {
 803e684:	b580      	push	{r7, lr}
 803e686:	b086      	sub	sp, #24
 803e688:	af02      	add	r7, sp, #8
 803e68a:	4603      	mov	r3, r0
 803e68c:	460a      	mov	r2, r1
 803e68e:	71fb      	strb	r3, [r7, #7]
 803e690:	4613      	mov	r3, r2
 803e692:	80bb      	strh	r3, [r7, #4]
    uint8_t ret;
    uint16_t tmp = value, temp;
 803e694:	88bb      	ldrh	r3, [r7, #4]
 803e696:	81fb      	strh	r3, [r7, #14]

    ret = EE_Command(VADDR_RESET, cmd, &value, &temp, sizeof(value));
 803e698:	f107 000a 	add.w	r0, r7, #10
 803e69c:	1d3a      	adds	r2, r7, #4
 803e69e:	79f9      	ldrb	r1, [r7, #7]
 803e6a0:	2302      	movs	r3, #2
 803e6a2:	9300      	str	r3, [sp, #0]
 803e6a4:	4603      	mov	r3, r0
 803e6a6:	2000      	movs	r0, #0
 803e6a8:	f000 f8c0 	bl	803e82c <EE_Command>
 803e6ac:	4603      	mov	r3, r0
 803e6ae:	737b      	strb	r3, [r7, #13]

    if (ret) {
 803e6b0:	7b7b      	ldrb	r3, [r7, #13]
 803e6b2:	2b00      	cmp	r3, #0
 803e6b4:	d00a      	beq.n	803e6cc <EEPROM_Reset+0x48>
        if (cmd == EE_CMD_R) {
 803e6b6:	79fb      	ldrb	r3, [r7, #7]
 803e6b8:	2b00      	cmp	r3, #0
 803e6ba:	d107      	bne.n	803e6cc <EEPROM_Reset+0x48>
            return tmp != temp;
 803e6bc:	897b      	ldrh	r3, [r7, #10]
 803e6be:	89fa      	ldrh	r2, [r7, #14]
 803e6c0:	429a      	cmp	r2, r3
 803e6c2:	bf14      	ite	ne
 803e6c4:	2301      	movne	r3, #1
 803e6c6:	2300      	moveq	r3, #0
 803e6c8:	b2db      	uxtb	r3, r3
 803e6ca:	e000      	b.n	803e6ce <EEPROM_Reset+0x4a>
        }
    }

    return ret;
 803e6cc:	7b7b      	ldrb	r3, [r7, #13]
}
 803e6ce:	4618      	mov	r0, r3
 803e6d0:	3710      	adds	r7, #16
 803e6d2:	46bd      	mov	sp, r7
 803e6d4:	bd80      	pop	{r7, pc}
	...

0803e6d8 <EEPROM_Odometer>:

uint8_t EEPROM_Odometer(EEPROM_COMMAND cmd, uint32_t value) {
 803e6d8:	b580      	push	{r7, lr}
 803e6da:	b084      	sub	sp, #16
 803e6dc:	af02      	add	r7, sp, #8
 803e6de:	4603      	mov	r3, r0
 803e6e0:	6039      	str	r1, [r7, #0]
 803e6e2:	71fb      	strb	r3, [r7, #7]
    // reset on overflow
    if (value > VCU_ODOMETER_MAX) {
 803e6e4:	683b      	ldr	r3, [r7, #0]
 803e6e6:	4a09      	ldr	r2, [pc, #36]	; (803e70c <EEPROM_Odometer+0x34>)
 803e6e8:	4293      	cmp	r3, r2
 803e6ea:	d901      	bls.n	803e6f0 <EEPROM_Odometer+0x18>
        value = 0;
 803e6ec:	2300      	movs	r3, #0
 803e6ee:	603b      	str	r3, [r7, #0]
    }

    return EE_Command(VADDR_ODOMETER, cmd, &value, &(VCU.d.odometer), sizeof(value));
 803e6f0:	463a      	mov	r2, r7
 803e6f2:	79f9      	ldrb	r1, [r7, #7]
 803e6f4:	2304      	movs	r3, #4
 803e6f6:	9300      	str	r3, [sp, #0]
 803e6f8:	4b05      	ldr	r3, [pc, #20]	; (803e710 <EEPROM_Odometer+0x38>)
 803e6fa:	2002      	movs	r0, #2
 803e6fc:	f000 f896 	bl	803e82c <EE_Command>
 803e700:	4603      	mov	r3, r0
}
 803e702:	4618      	mov	r0, r3
 803e704:	3708      	adds	r7, #8
 803e706:	46bd      	mov	sp, r7
 803e708:	bd80      	pop	{r7, pc}
 803e70a:	bf00      	nop
 803e70c:	0001869f 	.word	0x0001869f
 803e710:	20000234 	.word	0x20000234

0803e714 <EEPROM_UnitID>:

uint8_t EEPROM_UnitID(EEPROM_COMMAND cmd, uint32_t value) {
 803e714:	b580      	push	{r7, lr}
 803e716:	b086      	sub	sp, #24
 803e718:	af02      	add	r7, sp, #8
 803e71a:	4603      	mov	r3, r0
 803e71c:	6039      	str	r1, [r7, #0]
 803e71e:	71fb      	strb	r3, [r7, #7]
    uint8_t ret;

    ret = EE_Command(VADDR_UNITID, cmd, &value, &(VCU.d.unit_id), sizeof(value));
 803e720:	463a      	mov	r2, r7
 803e722:	79f9      	ldrb	r1, [r7, #7]
 803e724:	2304      	movs	r3, #4
 803e726:	9300      	str	r3, [sp, #0]
 803e728:	4b09      	ldr	r3, [pc, #36]	; (803e750 <EEPROM_UnitID+0x3c>)
 803e72a:	2006      	movs	r0, #6
 803e72c:	f000 f87e 	bl	803e82c <EE_Command>
 803e730:	4603      	mov	r3, r0
 803e732:	73fb      	strb	r3, [r7, #15]

    // update the NRF Address
    if (cmd == EE_CMD_W) {
 803e734:	79fb      	ldrb	r3, [r7, #7]
 803e736:	2b01      	cmp	r3, #1
 803e738:	d105      	bne.n	803e746 <EEPROM_UnitID+0x32>
        osThreadFlagsSet(KeylessTaskHandle, EVT_KEYLESS_RESET);
 803e73a:	4b06      	ldr	r3, [pc, #24]	; (803e754 <EEPROM_UnitID+0x40>)
 803e73c:	681b      	ldr	r3, [r3, #0]
 803e73e:	2104      	movs	r1, #4
 803e740:	4618      	mov	r0, r3
 803e742:	f7f8 ff83 	bl	803764c <osThreadFlagsSet>
    }

    return ret;
 803e746:	7bfb      	ldrb	r3, [r7, #15]
}
 803e748:	4618      	mov	r0, r3
 803e74a:	3710      	adds	r7, #16
 803e74c:	46bd      	mov	sp, r7
 803e74e:	bd80      	pop	{r7, pc}
 803e750:	20000228 	.word	0x20000228
 803e754:	20008638 	.word	0x20008638

0803e758 <EEPROM_SequentialID>:

uint8_t EEPROM_SequentialID(EEPROM_COMMAND cmd, uint16_t value, PAYLOAD_TYPE type) {
 803e758:	b580      	push	{r7, lr}
 803e75a:	b086      	sub	sp, #24
 803e75c:	af02      	add	r7, sp, #8
 803e75e:	4603      	mov	r3, r0
 803e760:	71fb      	strb	r3, [r7, #7]
 803e762:	460b      	mov	r3, r1
 803e764:	80bb      	strh	r3, [r7, #4]
 803e766:	4613      	mov	r3, r2
 803e768:	71bb      	strb	r3, [r7, #6]
    uint16_t *pSeqId;
    uint32_t vaddr;

    // decide payload type
    if (type == PAYLOAD_REPORT) {
 803e76a:	79bb      	ldrb	r3, [r7, #6]
 803e76c:	2b01      	cmp	r3, #1
 803e76e:	d104      	bne.n	803e77a <EEPROM_SequentialID+0x22>
        pSeqId = &(VCU.d.seq_id.report);
 803e770:	4b0b      	ldr	r3, [pc, #44]	; (803e7a0 <EEPROM_SequentialID+0x48>)
 803e772:	60fb      	str	r3, [r7, #12]
        vaddr = VADDR_REPORT_SEQ_ID;
 803e774:	230a      	movs	r3, #10
 803e776:	60bb      	str	r3, [r7, #8]
 803e778:	e003      	b.n	803e782 <EEPROM_SequentialID+0x2a>
    } else {
        pSeqId = &(VCU.d.seq_id.response);
 803e77a:	4b0a      	ldr	r3, [pc, #40]	; (803e7a4 <EEPROM_SequentialID+0x4c>)
 803e77c:	60fb      	str	r3, [r7, #12]
        vaddr = VADDR_RESPONSE_SEQ_ID;
 803e77e:	230c      	movs	r3, #12
 803e780:	60bb      	str	r3, [r7, #8]
    }

    return EE_Command(vaddr, cmd, &value, pSeqId, sizeof(value));
 803e782:	68bb      	ldr	r3, [r7, #8]
 803e784:	b298      	uxth	r0, r3
 803e786:	1d3a      	adds	r2, r7, #4
 803e788:	79f9      	ldrb	r1, [r7, #7]
 803e78a:	2302      	movs	r3, #2
 803e78c:	9300      	str	r3, [sp, #0]
 803e78e:	68fb      	ldr	r3, [r7, #12]
 803e790:	f000 f84c 	bl	803e82c <EE_Command>
 803e794:	4603      	mov	r3, r0
}
 803e796:	4618      	mov	r0, r3
 803e798:	3710      	adds	r7, #16
 803e79a:	46bd      	mov	sp, r7
 803e79c:	bd80      	pop	{r7, pc}
 803e79e:	bf00      	nop
 803e7a0:	20000268 	.word	0x20000268
 803e7a4:	2000026a 	.word	0x2000026a

0803e7a8 <EEPROM_AesKey>:

uint8_t EEPROM_AesKey(EEPROM_COMMAND cmd, uint32_t *value) {
 803e7a8:	b580      	push	{r7, lr}
 803e7aa:	b08a      	sub	sp, #40	; 0x28
 803e7ac:	af02      	add	r7, sp, #8
 803e7ae:	4603      	mov	r3, r0
 803e7b0:	6039      	str	r1, [r7, #0]
 803e7b2:	71fb      	strb	r3, [r7, #7]
    uint8_t ret;
    uint32_t *ptr, tmp[4];

    // eeprom
    ptr = (cmd == EE_CMD_W ? value : tmp);
 803e7b4:	79fb      	ldrb	r3, [r7, #7]
 803e7b6:	2b01      	cmp	r3, #1
 803e7b8:	d002      	beq.n	803e7c0 <EEPROM_AesKey+0x18>
 803e7ba:	f107 0308 	add.w	r3, r7, #8
 803e7be:	e000      	b.n	803e7c2 <EEPROM_AesKey+0x1a>
 803e7c0:	683b      	ldr	r3, [r7, #0]
 803e7c2:	61fb      	str	r3, [r7, #28]
    ret = EE_Command(VADDR_AES_KEY, cmd, ptr, AesKey, 16);
 803e7c4:	79f9      	ldrb	r1, [r7, #7]
 803e7c6:	2310      	movs	r3, #16
 803e7c8:	9300      	str	r3, [sp, #0]
 803e7ca:	4b0a      	ldr	r3, [pc, #40]	; (803e7f4 <EEPROM_AesKey+0x4c>)
 803e7cc:	69fa      	ldr	r2, [r7, #28]
 803e7ce:	200e      	movs	r0, #14
 803e7d0:	f000 f82c 	bl	803e82c <EE_Command>
 803e7d4:	4603      	mov	r3, r0
 803e7d6:	76fb      	strb	r3, [r7, #27]

    // apply the AES key
    if (cmd == EE_CMD_W) {
 803e7d8:	79fb      	ldrb	r3, [r7, #7]
 803e7da:	2b01      	cmp	r3, #1
 803e7dc:	d105      	bne.n	803e7ea <EEPROM_AesKey+0x42>
        osThreadFlagsSet(KeylessTaskHandle, EVT_KEYLESS_RESET);
 803e7de:	4b06      	ldr	r3, [pc, #24]	; (803e7f8 <EEPROM_AesKey+0x50>)
 803e7e0:	681b      	ldr	r3, [r3, #0]
 803e7e2:	2104      	movs	r1, #4
 803e7e4:	4618      	mov	r0, r3
 803e7e6:	f7f8 ff31 	bl	803764c <osThreadFlagsSet>
    }

    return ret;
 803e7ea:	7efb      	ldrb	r3, [r7, #27]
}
 803e7ec:	4618      	mov	r0, r3
 803e7ee:	3720      	adds	r7, #32
 803e7f0:	46bd      	mov	sp, r7
 803e7f2:	bd80      	pop	{r7, pc}
 803e7f4:	20008368 	.word	0x20008368
 803e7f8:	20008638 	.word	0x20008638

0803e7fc <EEPROM_FirmwareVersion>:

uint8_t EEPROM_FirmwareVersion(EEPROM_COMMAND cmd, uint16_t value) {
 803e7fc:	b580      	push	{r7, lr}
 803e7fe:	b084      	sub	sp, #16
 803e800:	af02      	add	r7, sp, #8
 803e802:	4603      	mov	r3, r0
 803e804:	460a      	mov	r2, r1
 803e806:	71fb      	strb	r3, [r7, #7]
 803e808:	4613      	mov	r3, r2
 803e80a:	80bb      	strh	r3, [r7, #4]
    return EE_Command(VADDR_FIRMWARE_VERSION, cmd, &value, &FIRMWARE_VERSION, sizeof(value));
 803e80c:	1d3a      	adds	r2, r7, #4
 803e80e:	79f9      	ldrb	r1, [r7, #7]
 803e810:	2302      	movs	r3, #2
 803e812:	9300      	str	r3, [sp, #0]
 803e814:	4b04      	ldr	r3, [pc, #16]	; (803e828 <EEPROM_FirmwareVersion+0x2c>)
 803e816:	2024      	movs	r0, #36	; 0x24
 803e818:	f000 f808 	bl	803e82c <EE_Command>
 803e81c:	4603      	mov	r3, r0
}
 803e81e:	4618      	mov	r0, r3
 803e820:	3708      	adds	r7, #8
 803e822:	46bd      	mov	sp, r7
 803e824:	bd80      	pop	{r7, pc}
 803e826:	bf00      	nop
 803e828:	2000805c 	.word	0x2000805c

0803e82c <EE_Command>:
    return EE_Command(VADDR_DFU_FLAG, cmd, &value, &DFU_FLAG, sizeof(value));
}
#endif

/* Private functions implementation --------------------------------------------*/
static uint8_t EE_Command(uint16_t vaddr, EEPROM_COMMAND cmd, void *value, void *ptr, uint16_t size) {
 803e82c:	b580      	push	{r7, lr}
 803e82e:	b086      	sub	sp, #24
 803e830:	af00      	add	r7, sp, #0
 803e832:	60ba      	str	r2, [r7, #8]
 803e834:	607b      	str	r3, [r7, #4]
 803e836:	4603      	mov	r3, r0
 803e838:	81fb      	strh	r3, [r7, #14]
 803e83a:	460b      	mov	r3, r1
 803e83c:	737b      	strb	r3, [r7, #13]
    uint8_t ret = 0;
 803e83e:	2300      	movs	r3, #0
 803e840:	75fb      	strb	r3, [r7, #23]

    lock();
 803e842:	f000 f82b 	bl	803e89c <lock>

    // check if new value is same with old value
    if (cmd == EE_CMD_W) {
 803e846:	7b7b      	ldrb	r3, [r7, #13]
 803e848:	2b01      	cmp	r3, #1
 803e84a:	d10e      	bne.n	803e86a <EE_Command+0x3e>
        // apply the value
        memcpy(ptr, value, size);
 803e84c:	8c3b      	ldrh	r3, [r7, #32]
 803e84e:	461a      	mov	r2, r3
 803e850:	68b9      	ldr	r1, [r7, #8]
 803e852:	6878      	ldr	r0, [r7, #4]
 803e854:	f001 f8d3 	bl	803f9fe <memcpy>
        // save the value
        ret = EEPROM24XX_Save(vaddr, value, size);
 803e858:	8c3a      	ldrh	r2, [r7, #32]
 803e85a:	89fb      	ldrh	r3, [r7, #14]
 803e85c:	68b9      	ldr	r1, [r7, #8]
 803e85e:	4618      	mov	r0, r3
 803e860:	f7ff fcde 	bl	803e220 <EEPROM24XX_Save>
 803e864:	4603      	mov	r3, r0
 803e866:	75fb      	strb	r3, [r7, #23]
 803e868:	e010      	b.n	803e88c <EE_Command+0x60>
    } else {
        // load the value
        ret = EEPROM24XX_Load(vaddr, value, size);
 803e86a:	8c3a      	ldrh	r2, [r7, #32]
 803e86c:	89fb      	ldrh	r3, [r7, #14]
 803e86e:	68b9      	ldr	r1, [r7, #8]
 803e870:	4618      	mov	r0, r3
 803e872:	f7ff fd01 	bl	803e278 <EEPROM24XX_Load>
 803e876:	4603      	mov	r3, r0
 803e878:	75fb      	strb	r3, [r7, #23]
        // apply the value
        if (ret) {
 803e87a:	7dfb      	ldrb	r3, [r7, #23]
 803e87c:	2b00      	cmp	r3, #0
 803e87e:	d005      	beq.n	803e88c <EE_Command+0x60>
            memcpy(ptr, value, size);
 803e880:	8c3b      	ldrh	r3, [r7, #32]
 803e882:	461a      	mov	r2, r3
 803e884:	68b9      	ldr	r1, [r7, #8]
 803e886:	6878      	ldr	r0, [r7, #4]
 803e888:	f001 f8b9 	bl	803f9fe <memcpy>
        }
    }

    unlock();
 803e88c:	f000 f814 	bl	803e8b8 <unlock>
    return ret;
 803e890:	7dfb      	ldrb	r3, [r7, #23]
}
 803e892:	4618      	mov	r0, r3
 803e894:	3718      	adds	r7, #24
 803e896:	46bd      	mov	sp, r7
 803e898:	bd80      	pop	{r7, pc}
	...

0803e89c <lock>:

static void lock(void) {
 803e89c:	b580      	push	{r7, lr}
 803e89e:	af00      	add	r7, sp, #0
#if (!BOOTLOADER)
    osMutexAcquire(EepromMutexHandle, osWaitForever);
 803e8a0:	4b04      	ldr	r3, [pc, #16]	; (803e8b4 <lock+0x18>)
 803e8a2:	681b      	ldr	r3, [r3, #0]
 803e8a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 803e8a8:	4618      	mov	r0, r3
 803e8aa:	f7f9 fa3d 	bl	8037d28 <osMutexAcquire>
#endif
}
 803e8ae:	bf00      	nop
 803e8b0:	bd80      	pop	{r7, pc}
 803e8b2:	bf00      	nop
 803e8b4:	20008930 	.word	0x20008930

0803e8b8 <unlock>:

static void unlock(void) {
 803e8b8:	b580      	push	{r7, lr}
 803e8ba:	af00      	add	r7, sp, #0
#if (!BOOTLOADER)
    osMutexRelease(EepromMutexHandle);
 803e8bc:	4b03      	ldr	r3, [pc, #12]	; (803e8cc <unlock+0x14>)
 803e8be:	681b      	ldr	r3, [r3, #0]
 803e8c0:	4618      	mov	r0, r3
 803e8c2:	f7f9 fa8f 	bl	8037de4 <osMutexRelease>
#endif
}
 803e8c6:	bf00      	nop
 803e8c8:	bd80      	pop	{r7, pc}
 803e8ca:	bf00      	nop
 803e8cc:	20008930 	.word	0x20008930

0803e8d0 <Simcom_Lock>:
static SIMCOM_RESULT Simcom_ProcessACK(header_t *header);
static uint8_t Simcom_CommandoIRQ(void);
#endif

/* Public functions implementation --------------------------------------------*/
void Simcom_Lock(void) {
 803e8d0:	b580      	push	{r7, lr}
 803e8d2:	af00      	add	r7, sp, #0
#if (!BOOTLOADER)
    osMutexAcquire(SimcomRecMutexHandle, osWaitForever);
 803e8d4:	4b04      	ldr	r3, [pc, #16]	; (803e8e8 <Simcom_Lock+0x18>)
 803e8d6:	681b      	ldr	r3, [r3, #0]
 803e8d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 803e8dc:	4618      	mov	r0, r3
 803e8de:	f7f9 fa23 	bl	8037d28 <osMutexAcquire>
#endif
}
 803e8e2:	bf00      	nop
 803e8e4:	bd80      	pop	{r7, pc}
 803e8e6:	bf00      	nop
 803e8e8:	20008a10 	.word	0x20008a10

0803e8ec <Simcom_Unlock>:

void Simcom_Unlock(void) {
 803e8ec:	b580      	push	{r7, lr}
 803e8ee:	af00      	add	r7, sp, #0
#if (!BOOTLOADER)
    osMutexRelease(SimcomRecMutexHandle);
 803e8f0:	4b03      	ldr	r3, [pc, #12]	; (803e900 <Simcom_Unlock+0x14>)
 803e8f2:	681b      	ldr	r3, [r3, #0]
 803e8f4:	4618      	mov	r0, r3
 803e8f6:	f7f9 fa75 	bl	8037de4 <osMutexRelease>
#endif
}
 803e8fa:	bf00      	nop
 803e8fc:	bd80      	pop	{r7, pc}
 803e8fe:	bf00      	nop
 803e900:	20008a10 	.word	0x20008a10

0803e904 <Simcom_Response>:

char* Simcom_Response(char *str) {
 803e904:	b580      	push	{r7, lr}
 803e906:	b082      	sub	sp, #8
 803e908:	af00      	add	r7, sp, #0
 803e90a:	6078      	str	r0, [r7, #4]
    return strstr(SIMCOM_UART_RX, str);
 803e90c:	6879      	ldr	r1, [r7, #4]
 803e90e:	4804      	ldr	r0, [pc, #16]	; (803e920 <Simcom_Response+0x1c>)
 803e910:	f001 f8ba 	bl	803fa88 <strstr>
 803e914:	4603      	mov	r3, r0
}
 803e916:	4618      	mov	r0, r3
 803e918:	3708      	adds	r7, #8
 803e91a:	46bd      	mov	sp, r7
 803e91c:	bd80      	pop	{r7, pc}
 803e91e:	bf00      	nop
 803e920:	20008a9c 	.word	0x20008a9c

0803e924 <Simcom_SetState>:

uint8_t Simcom_SetState(SIMCOM_STATE state, uint32_t timeout) {
 803e924:	b5b0      	push	{r4, r5, r7, lr}
 803e926:	b0b0      	sub	sp, #192	; 0xc0
 803e928:	af00      	add	r7, sp, #0
 803e92a:	4603      	mov	r3, r0
 803e92c:	6039      	str	r1, [r7, #0]
 803e92e:	71fb      	strb	r3, [r7, #7]
    SIMCOM_STATE lastState = SIM_STATE_DOWN;
 803e930:	23ff      	movs	r3, #255	; 0xff
 803e932:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
    uint32_t tick = _GetTickMS();
 803e936:	f000 ff4e 	bl	803f7d6 <_GetTickMS>
 803e93a:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
    static uint8_t init = 1;
    uint8_t depth = 3;
 803e93e:	2303      	movs	r3, #3
 803e940:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    SIMCOM_RESULT p;

    Simcom_Lock();
 803e944:	f7ff ffc4 	bl	803e8d0 <Simcom_Lock>
    // Handle SIMCOM state properly
    do {
        // Handle timeout
        if (timeout) {
 803e948:	683b      	ldr	r3, [r7, #0]
 803e94a:	2b00      	cmp	r3, #0
 803e94c:	d014      	beq.n	803e978 <Simcom_SetState+0x54>
            // Update tick
            if (p == SIM_RESULT_OK) {
 803e94e:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803e952:	2b01      	cmp	r3, #1
 803e954:	d103      	bne.n	803e95e <Simcom_SetState+0x3a>
                tick = _GetTickMS();
 803e956:	f000 ff3e 	bl	803f7d6 <_GetTickMS>
 803e95a:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
            }
            // Timeout expired
            if ((_GetTickMS() - tick) > timeout) {
 803e95e:	f000 ff3a 	bl	803f7d6 <_GetTickMS>
 803e962:	4602      	mov	r2, r0
 803e964:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 803e968:	1ad3      	subs	r3, r2, r3
 803e96a:	683a      	ldr	r2, [r7, #0]
 803e96c:	429a      	cmp	r2, r3
 803e96e:	d203      	bcs.n	803e978 <Simcom_SetState+0x54>
                LOG_StrLn("Simcom:StateTimeout");
 803e970:	48c4      	ldr	r0, [pc, #784]	; (803ec84 <Simcom_SetState+0x360>)
 803e972:	f7ff fd57 	bl	803e424 <LOG_StrLn>
                break;
 803e976:	e3d5      	b.n	803f124 <Simcom_SetState+0x800>
            }
        }
        // Handle locked-loop
        if (SIM.state < lastState) {
 803e978:	4bc3      	ldr	r3, [pc, #780]	; (803ec88 <Simcom_SetState+0x364>)
 803e97a:	f993 3000 	ldrsb.w	r3, [r3]
 803e97e:	f997 20bf 	ldrsb.w	r2, [r7, #191]	; 0xbf
 803e982:	429a      	cmp	r2, r3
 803e984:	dd16      	ble.n	803e9b4 <Simcom_SetState+0x90>
            if (!--depth) {
 803e986:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 803e98a:	3b01      	subs	r3, #1
 803e98c:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 803e990:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 803e994:	2b00      	cmp	r3, #0
 803e996:	d103      	bne.n	803e9a0 <Simcom_SetState+0x7c>
                SIM.state = SIM_STATE_DOWN;
 803e998:	4bbb      	ldr	r3, [pc, #748]	; (803ec88 <Simcom_SetState+0x364>)
 803e99a:	22ff      	movs	r2, #255	; 0xff
 803e99c:	701a      	strb	r2, [r3, #0]
                break;
 803e99e:	e3c1      	b.n	803f124 <Simcom_SetState+0x800>
            }
            LOG_Str("Simcom:LockedLoop = ");
 803e9a0:	48ba      	ldr	r0, [pc, #744]	; (803ec8c <Simcom_SetState+0x368>)
 803e9a2:	f7ff fd27 	bl	803e3f4 <LOG_Str>
            LOG_Int(depth);
 803e9a6:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 803e9aa:	4618      	mov	r0, r3
 803e9ac:	f7ff fcb4 	bl	803e318 <LOG_Int>
            LOG_Enter();
 803e9b0:	f7ff fca6 	bl	803e300 <LOG_Enter>
        }
        // Handle signal strength
        if (SIM.state == SIM_STATE_DOWN) {
 803e9b4:	4bb4      	ldr	r3, [pc, #720]	; (803ec88 <Simcom_SetState+0x364>)
 803e9b6:	f993 3000 	ldrsb.w	r3, [r3]
 803e9ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 803e9be:	d103      	bne.n	803e9c8 <Simcom_SetState+0xa4>
            SIM.signal = 0;
 803e9c0:	4bb1      	ldr	r3, [pc, #708]	; (803ec88 <Simcom_SetState+0x364>)
 803e9c2:	2200      	movs	r2, #0
 803e9c4:	741a      	strb	r2, [r3, #16]
 803e9c6:	e00f      	b.n	803e9e8 <Simcom_SetState+0xc4>
        } else {
            Simcom_IdleJob(NULL);
 803e9c8:	2000      	movs	r0, #0
 803e9ca:	f000 fcd9 	bl	803f380 <Simcom_IdleJob>
            if (SIM.state >= SIM_STATE_GPRS_ON) {
 803e9ce:	4bae      	ldr	r3, [pc, #696]	; (803ec88 <Simcom_SetState+0x364>)
 803e9d0:	f993 3000 	ldrsb.w	r3, [r3]
 803e9d4:	2b02      	cmp	r3, #2
 803e9d6:	dd07      	ble.n	803e9e8 <Simcom_SetState+0xc4>
                // Force to exit loop
                if (SIM.signal < 15) {
 803e9d8:	4bab      	ldr	r3, [pc, #684]	; (803ec88 <Simcom_SetState+0x364>)
 803e9da:	7c1b      	ldrb	r3, [r3, #16]
 803e9dc:	2b0e      	cmp	r3, #14
 803e9de:	d803      	bhi.n	803e9e8 <Simcom_SetState+0xc4>
                    LOG_StrLn("Simcom:PoorSignal");
 803e9e0:	48ab      	ldr	r0, [pc, #684]	; (803ec90 <Simcom_SetState+0x36c>)
 803e9e2:	f7ff fd1f 	bl	803e424 <LOG_StrLn>
                    break;
 803e9e6:	e39d      	b.n	803f124 <Simcom_SetState+0x800>
                }
            }
        }

        // Set value
        p = SIM_RESULT_OK;
 803e9e8:	2301      	movs	r3, #1
 803e9ea:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
        lastState = SIM.state;
 803e9ee:	4ba6      	ldr	r3, [pc, #664]	; (803ec88 <Simcom_SetState+0x364>)
 803e9f0:	781b      	ldrb	r3, [r3, #0]
 803e9f2:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
        // Handle states
        switch (SIM.state) {
 803e9f6:	4ba4      	ldr	r3, [pc, #656]	; (803ec88 <Simcom_SetState+0x364>)
 803e9f8:	f993 3000 	ldrsb.w	r3, [r3]
 803e9fc:	3301      	adds	r3, #1
 803e9fe:	2b07      	cmp	r3, #7
 803ea00:	f200 8385 	bhi.w	803f10e <Simcom_SetState+0x7ea>
 803ea04:	a201      	add	r2, pc, #4	; (adr r2, 803ea0c <Simcom_SetState+0xe8>)
 803ea06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803ea0a:	bf00      	nop
 803ea0c:	0803ea2d 	.word	0x0803ea2d
 803ea10:	0803ea85 	.word	0x0803ea85
 803ea14:	0803ebbf 	.word	0x0803ebbf
 803ea18:	0803ecb9 	.word	0x0803ecb9
 803ea1c:	0803ed73 	.word	0x0803ed73
 803ea20:	0803ee5f 	.word	0x0803ee5f
 803ea24:	0803efad 	.word	0x0803efad
 803ea28:	0803f0dd 	.word	0x0803f0dd
            case SIM_STATE_DOWN:
                // only executed at power up
                if (init) {
 803ea2c:	4b99      	ldr	r3, [pc, #612]	; (803ec94 <Simcom_SetState+0x370>)
 803ea2e:	781b      	ldrb	r3, [r3, #0]
 803ea30:	2b00      	cmp	r3, #0
 803ea32:	d006      	beq.n	803ea42 <Simcom_SetState+0x11e>
                    init = 0;
 803ea34:	4b97      	ldr	r3, [pc, #604]	; (803ec94 <Simcom_SetState+0x370>)
 803ea36:	2200      	movs	r2, #0
 803ea38:	701a      	strb	r2, [r3, #0]
                    LOG_StrLn("Simcom:Init");
 803ea3a:	4897      	ldr	r0, [pc, #604]	; (803ec98 <Simcom_SetState+0x374>)
 803ea3c:	f7ff fcf2 	bl	803e424 <LOG_StrLn>
 803ea40:	e002      	b.n	803ea48 <Simcom_SetState+0x124>
                } else {
                    LOG_StrLn("Simcom:Restarting...");
 803ea42:	4896      	ldr	r0, [pc, #600]	; (803ec9c <Simcom_SetState+0x378>)
 803ea44:	f7ff fcee 	bl	803e424 <LOG_StrLn>
                }

                // power up the module
                p = Simcom_Power();
 803ea48:	f000 fdb0 	bl	803f5ac <Simcom_Power>
 803ea4c:	4603      	mov	r3, r0
 803ea4e:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6

                // upgrade simcom state
                if (p > 0) {
 803ea52:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803ea56:	2b00      	cmp	r3, #0
 803ea58:	dd0c      	ble.n	803ea74 <Simcom_SetState+0x150>
                    SIM.state++;
 803ea5a:	4b8b      	ldr	r3, [pc, #556]	; (803ec88 <Simcom_SetState+0x364>)
 803ea5c:	f993 3000 	ldrsb.w	r3, [r3]
 803ea60:	b2db      	uxtb	r3, r3
 803ea62:	3301      	adds	r3, #1
 803ea64:	b2db      	uxtb	r3, r3
 803ea66:	b25a      	sxtb	r2, r3
 803ea68:	4b87      	ldr	r3, [pc, #540]	; (803ec88 <Simcom_SetState+0x364>)
 803ea6a:	701a      	strb	r2, [r3, #0]
                    LOG_StrLn("Simcom:ON");
 803ea6c:	488c      	ldr	r0, [pc, #560]	; (803eca0 <Simcom_SetState+0x37c>)
 803ea6e:	f7ff fcd9 	bl	803e424 <LOG_StrLn>
 803ea72:	e002      	b.n	803ea7a <Simcom_SetState+0x156>
                } else {
                    LOG_StrLn("Simcom:Error");
 803ea74:	488b      	ldr	r0, [pc, #556]	; (803eca4 <Simcom_SetState+0x380>)
 803ea76:	f7ff fcd5 	bl	803e424 <LOG_StrLn>
                }

                _DelayMS(500);
 803ea7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 803ea7e:	f000 fe9f 	bl	803f7c0 <_DelayMS>
                break;
 803ea82:	e347      	b.n	803f114 <Simcom_SetState+0x7f0>
            case SIM_STATE_READY:
                // =========== BASIC CONFIGURATION
                // disable command echo
                if (p > 0) {
 803ea84:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803ea88:	2b00      	cmp	r3, #0
 803ea8a:	dd05      	ble.n	803ea98 <Simcom_SetState+0x174>
                    p = AT_CommandEchoMode(0);
 803ea8c:	2000      	movs	r0, #0
 803ea8e:	f7fe fa0f 	bl	803ceb0 <AT_CommandEchoMode>
 803ea92:	4603      	mov	r3, r0
 803ea94:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
                }
                // Set serial baud-rate
                if (p > 0) {
 803ea98:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803ea9c:	2b00      	cmp	r3, #0
 803ea9e:	dd0b      	ble.n	803eab8 <Simcom_SetState+0x194>
                    uint32_t rate = 0;
 803eaa0:	2300      	movs	r3, #0
 803eaa2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                    p = AT_FixedLocalRate(ATW, &rate);
 803eaa6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 803eaaa:	4619      	mov	r1, r3
 803eaac:	2000      	movs	r0, #0
 803eaae:	f7fe fdf3 	bl	803d698 <AT_FixedLocalRate>
 803eab2:	4603      	mov	r3, r0
 803eab4:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
                }
                // Error report format: 0, 1(Numeric), 2(verbose)
                if (p > 0) {
 803eab8:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803eabc:	2b00      	cmp	r3, #0
 803eabe:	dd0b      	ble.n	803ead8 <Simcom_SetState+0x1b4>
                    AT_CMEE state = CMEE_VERBOSE;
 803eac0:	2302      	movs	r3, #2
 803eac2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                    p = AT_ReportMobileEquipmentError(ATW, &state);
 803eac6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 803eaca:	4619      	mov	r1, r3
 803eacc:	2000      	movs	r0, #0
 803eace:	f7fe fdcf 	bl	803d670 <AT_ReportMobileEquipmentError>
 803ead2:	4603      	mov	r3, r0
 803ead4:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
                }
                // Use pin DTR as sleep control
                if (p > 0) {
 803ead8:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803eadc:	2b00      	cmp	r3, #0
 803eade:	dd0b      	ble.n	803eaf8 <Simcom_SetState+0x1d4>
                    AT_CSCLK state = CSCLK_EN_DTR;
 803eae0:	2301      	movs	r3, #1
 803eae2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                    p = AT_ConfigureSlowClock(ATW, &state);
 803eae6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 803eaea:	4619      	mov	r1, r3
 803eaec:	2000      	movs	r0, #0
 803eaee:	f7fe fdab 	bl	803d648 <AT_ConfigureSlowClock>
 803eaf2:	4603      	mov	r3, r0
 803eaf4:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
                }
#if (!BOOTLOADER)
                // Enable time reporting
                if (p > 0) {
 803eaf8:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803eafc:	2b00      	cmp	r3, #0
 803eafe:	dd0b      	ble.n	803eb18 <Simcom_SetState+0x1f4>
                    AT_BOOL state = AT_ENABLE;
 803eb00:	2301      	movs	r3, #1
 803eb02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                    p = AT_EnableLocalTimestamp(ATW, &state);
 803eb06:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 803eb0a:	4619      	mov	r1, r3
 803eb0c:	2000      	movs	r0, #0
 803eb0e:	f7ff f881 	bl	803dc14 <AT_EnableLocalTimestamp>
 803eb12:	4603      	mov	r3, r0
 803eb14:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
                }
                // Enable “+IPD” header
                if (p > 0) {
 803eb18:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803eb1c:	2b00      	cmp	r3, #0
 803eb1e:	dd0b      	ble.n	803eb38 <Simcom_SetState+0x214>
                    AT_BOOL state = AT_ENABLE;
 803eb20:	2301      	movs	r3, #1
 803eb22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                    p = AT_IpPackageHeader(ATW, &state);
 803eb26:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 803eb2a:	4619      	mov	r1, r3
 803eb2c:	2000      	movs	r0, #0
 803eb2e:	f7ff f85d 	bl	803dbec <AT_IpPackageHeader>
 803eb32:	4603      	mov	r3, r0
 803eb34:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
                }
                // Disable “RECV FROM” header
                if (p > 0) {
 803eb38:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803eb3c:	2b00      	cmp	r3, #0
 803eb3e:	dd0b      	ble.n	803eb58 <Simcom_SetState+0x234>
                    AT_BOOL state = AT_DISABLE;
 803eb40:	2300      	movs	r3, #0
 803eb42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                    p = AT_ShowRemoteIp(ATW, &state);
 803eb46:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 803eb4a:	4619      	mov	r1, r3
 803eb4c:	2000      	movs	r0, #0
 803eb4e:	f7ff f839 	bl	803dbc4 <AT_ShowRemoteIp>
 803eb52:	4603      	mov	r3, r0
 803eb54:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
                }
#endif
                // =========== NETWORK CONFIGURATION
                // Check SIM Card
                if (p > 0) {
 803eb58:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803eb5c:	2b00      	cmp	r3, #0
 803eb5e:	dd09      	ble.n	803eb74 <Simcom_SetState+0x250>
                    p = Simcom_Command("AT+CPIN?\r", "READY", 500, 0);
 803eb60:	2300      	movs	r3, #0
 803eb62:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 803eb66:	4950      	ldr	r1, [pc, #320]	; (803eca8 <Simcom_SetState+0x384>)
 803eb68:	4850      	ldr	r0, [pc, #320]	; (803ecac <Simcom_SetState+0x388>)
 803eb6a:	f000 fb9d 	bl	803f2a8 <Simcom_Command>
 803eb6e:	4603      	mov	r3, r0
 803eb70:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
                }
                // Disable presentation of <AcT>&<rac> at CREG and CGREG
                if (p > 0) {
 803eb74:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803eb78:	2b00      	cmp	r3, #0
 803eb7a:	dd0e      	ble.n	803eb9a <Simcom_SetState+0x276>
                    at_csact_t param = {
 803eb7c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 803eb80:	2200      	movs	r2, #0
 803eb82:	601a      	str	r2, [r3, #0]
 803eb84:	605a      	str	r2, [r3, #4]
 803eb86:	609a      	str	r2, [r3, #8]
                            .creg = 0,
                            .cgreg = 0,
                    };
                    p = AT_NetworkAttachedStatus(ATW, &param);
 803eb88:	f107 0390 	add.w	r3, r7, #144	; 0x90
 803eb8c:	4619      	mov	r1, r3
 803eb8e:	2000      	movs	r0, #0
 803eb90:	f7fe fc1e 	bl	803d3d0 <AT_NetworkAttachedStatus>
 803eb94:	4603      	mov	r3, r0
 803eb96:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
                }

                // upgrade simcom state
                if (p > 0) {
 803eb9a:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803eb9e:	2b00      	cmp	r3, #0
 803eba0:	dd08      	ble.n	803ebb4 <Simcom_SetState+0x290>
                    SIM.state++;
 803eba2:	4b39      	ldr	r3, [pc, #228]	; (803ec88 <Simcom_SetState+0x364>)
 803eba4:	f993 3000 	ldrsb.w	r3, [r3]
 803eba8:	b2db      	uxtb	r3, r3
 803ebaa:	3301      	adds	r3, #1
 803ebac:	b2db      	uxtb	r3, r3
 803ebae:	b25a      	sxtb	r2, r3
 803ebb0:	4b35      	ldr	r3, [pc, #212]	; (803ec88 <Simcom_SetState+0x364>)
 803ebb2:	701a      	strb	r2, [r3, #0]
                }

                _DelayMS(500);
 803ebb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 803ebb8:	f000 fe02 	bl	803f7c0 <_DelayMS>
                break;
 803ebbc:	e2aa      	b.n	803f114 <Simcom_SetState+0x7f0>
            case SIM_STATE_CONFIGURED:
                // =========== NETWORK ATTACH
                // Set signal Generation 2G(13)/3G(14)/AUTO(2)
                if (p > 0) {
 803ebbe:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803ebc2:	2b00      	cmp	r3, #0
 803ebc4:	dd0f      	ble.n	803ebe6 <Simcom_SetState+0x2c2>
                    at_cnmp_t param = {
 803ebc6:	4a3a      	ldr	r2, [pc, #232]	; (803ecb0 <Simcom_SetState+0x38c>)
 803ebc8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 803ebcc:	e892 0003 	ldmia.w	r2, {r0, r1}
 803ebd0:	e883 0003 	stmia.w	r3, {r0, r1}
                            .mode = CNMP_ACT_AUTO,
                            .preferred = CNMP_ACT_P_UMTS
                    };
                    p = AT_RadioAccessTechnology(ATW, &param);
 803ebd4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 803ebd8:	4619      	mov	r1, r3
 803ebda:	2000      	movs	r0, #0
 803ebdc:	f7fe fb62 	bl	803d2a4 <AT_RadioAccessTechnology>
 803ebe0:	4603      	mov	r3, r0
 803ebe2:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
                }
                // Network Registration Status
                if (p > 0) {
 803ebe6:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803ebea:	2b00      	cmp	r3, #0
 803ebec:	dd38      	ble.n	803ec60 <Simcom_SetState+0x33c>
                    at_c_greg_t read, param = {
 803ebee:	2300      	movs	r3, #0
 803ebf0:	67bb      	str	r3, [r7, #120]	; 0x78
 803ebf2:	2301      	movs	r3, #1
 803ebf4:	67fb      	str	r3, [r7, #124]	; 0x7c
                            .mode = CREG_MODE_DISABLE,
                            .stat = CREG_STAT_REG_HOME
                    };
                    // wait until attached
                    do {
                        p = AT_NetworkRegistration("CREG", ATW, &param);
 803ebf6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 803ebfa:	461a      	mov	r2, r3
 803ebfc:	2100      	movs	r1, #0
 803ebfe:	482d      	ldr	r0, [pc, #180]	; (803ecb4 <Simcom_SetState+0x390>)
 803ec00:	f7fe fc92 	bl	803d528 <AT_NetworkRegistration>
 803ec04:	4603      	mov	r3, r0
 803ec06:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
                        if (p > 0) {
 803ec0a:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803ec0e:	2b00      	cmp	r3, #0
 803ec10:	dd09      	ble.n	803ec26 <Simcom_SetState+0x302>
                            p = AT_NetworkRegistration("CREG", ATR, &read);
 803ec12:	f107 0380 	add.w	r3, r7, #128	; 0x80
 803ec16:	461a      	mov	r2, r3
 803ec18:	2101      	movs	r1, #1
 803ec1a:	4826      	ldr	r0, [pc, #152]	; (803ecb4 <Simcom_SetState+0x390>)
 803ec1c:	f7fe fc84 	bl	803d528 <AT_NetworkRegistration>
 803ec20:	4603      	mov	r3, r0
 803ec22:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
                        }

                        // Handle timeout
                        if (timeout && (_GetTickMS() - tick) > timeout) {
 803ec26:	683b      	ldr	r3, [r7, #0]
 803ec28:	2b00      	cmp	r3, #0
 803ec2a:	d00c      	beq.n	803ec46 <Simcom_SetState+0x322>
 803ec2c:	f000 fdd3 	bl	803f7d6 <_GetTickMS>
 803ec30:	4602      	mov	r2, r0
 803ec32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 803ec36:	1ad3      	subs	r3, r2, r3
 803ec38:	683a      	ldr	r2, [r7, #0]
 803ec3a:	429a      	cmp	r2, r3
 803ec3c:	d203      	bcs.n	803ec46 <Simcom_SetState+0x322>
                            LOG_StrLn("Simcom:StateTimeout");
 803ec3e:	4811      	ldr	r0, [pc, #68]	; (803ec84 <Simcom_SetState+0x360>)
 803ec40:	f7ff fbf0 	bl	803e424 <LOG_StrLn>
                            break;
 803ec44:	e00c      	b.n	803ec60 <Simcom_SetState+0x33c>
                        }
                        _DelayMS(1000);
 803ec46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 803ec4a:	f000 fdb9 	bl	803f7c0 <_DelayMS>
                    } while (p && read.stat != param.stat);
 803ec4e:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803ec52:	2b00      	cmp	r3, #0
 803ec54:	d004      	beq.n	803ec60 <Simcom_SetState+0x33c>
 803ec56:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 803ec5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 803ec5c:	429a      	cmp	r2, r3
 803ec5e:	d1ca      	bne.n	803ebf6 <Simcom_SetState+0x2d2>
                }

                // upgrade simcom state
                if (p > 0) {
 803ec60:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803ec64:	2b00      	cmp	r3, #0
 803ec66:	dd08      	ble.n	803ec7a <Simcom_SetState+0x356>
                    SIM.state++;
 803ec68:	4b07      	ldr	r3, [pc, #28]	; (803ec88 <Simcom_SetState+0x364>)
 803ec6a:	f993 3000 	ldrsb.w	r3, [r3]
 803ec6e:	b2db      	uxtb	r3, r3
 803ec70:	3301      	adds	r3, #1
 803ec72:	b2db      	uxtb	r3, r3
 803ec74:	b25a      	sxtb	r2, r3
 803ec76:	4b04      	ldr	r3, [pc, #16]	; (803ec88 <Simcom_SetState+0x364>)
 803ec78:	701a      	strb	r2, [r3, #0]
                }

                _DelayMS(500);
 803ec7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 803ec7e:	f000 fd9f 	bl	803f7c0 <_DelayMS>
                break;
 803ec82:	e247      	b.n	803f114 <Simcom_SetState+0x7f0>
 803ec84:	08043e38 	.word	0x08043e38
 803ec88:	200002a8 	.word	0x200002a8
 803ec8c:	08043e4c 	.word	0x08043e4c
 803ec90:	08043e64 	.word	0x08043e64
 803ec94:	200002c0 	.word	0x200002c0
 803ec98:	08043e78 	.word	0x08043e78
 803ec9c:	08043e84 	.word	0x08043e84
 803eca0:	08043e9c 	.word	0x08043e9c
 803eca4:	08043ea8 	.word	0x08043ea8
 803eca8:	08043eb8 	.word	0x08043eb8
 803ecac:	08043ec0 	.word	0x08043ec0
 803ecb0:	08043f04 	.word	0x08043f04
 803ecb4:	08043ecc 	.word	0x08043ecc
            case SIM_STATE_NETWORK_ON:
                // =========== GPRS ATTACH
                // GPRS Registration Status
                if (p > 0) {
 803ecb8:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803ecbc:	2b00      	cmp	r3, #0
 803ecbe:	dd37      	ble.n	803ed30 <Simcom_SetState+0x40c>
                    at_c_greg_t read, param = {
 803ecc0:	2300      	movs	r3, #0
 803ecc2:	66bb      	str	r3, [r7, #104]	; 0x68
 803ecc4:	2301      	movs	r3, #1
 803ecc6:	66fb      	str	r3, [r7, #108]	; 0x6c
                            .mode = CREG_MODE_DISABLE,
                            .stat = CREG_STAT_REG_HOME
                    };
                    // wait until attached
                    do {
                        p = AT_NetworkRegistration("CGREG", ATW, &param);
 803ecc8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 803eccc:	461a      	mov	r2, r3
 803ecce:	2100      	movs	r1, #0
 803ecd0:	48af      	ldr	r0, [pc, #700]	; (803ef90 <Simcom_SetState+0x66c>)
 803ecd2:	f7fe fc29 	bl	803d528 <AT_NetworkRegistration>
 803ecd6:	4603      	mov	r3, r0
 803ecd8:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
                        if (p > 0) {
 803ecdc:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803ece0:	2b00      	cmp	r3, #0
 803ece2:	dd09      	ble.n	803ecf8 <Simcom_SetState+0x3d4>
                            p = AT_NetworkRegistration("CGREG", ATR, &read);
 803ece4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 803ece8:	461a      	mov	r2, r3
 803ecea:	2101      	movs	r1, #1
 803ecec:	48a8      	ldr	r0, [pc, #672]	; (803ef90 <Simcom_SetState+0x66c>)
 803ecee:	f7fe fc1b 	bl	803d528 <AT_NetworkRegistration>
 803ecf2:	4603      	mov	r3, r0
 803ecf4:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
                        }

                        // Handle timeout
                        if (timeout && (_GetTickMS() - tick) > timeout) {
 803ecf8:	683b      	ldr	r3, [r7, #0]
 803ecfa:	2b00      	cmp	r3, #0
 803ecfc:	d00c      	beq.n	803ed18 <Simcom_SetState+0x3f4>
 803ecfe:	f000 fd6a 	bl	803f7d6 <_GetTickMS>
 803ed02:	4602      	mov	r2, r0
 803ed04:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 803ed08:	1ad3      	subs	r3, r2, r3
 803ed0a:	683a      	ldr	r2, [r7, #0]
 803ed0c:	429a      	cmp	r2, r3
 803ed0e:	d203      	bcs.n	803ed18 <Simcom_SetState+0x3f4>
                            LOG_StrLn("Simcom:StateTimeout");
 803ed10:	48a0      	ldr	r0, [pc, #640]	; (803ef94 <Simcom_SetState+0x670>)
 803ed12:	f7ff fb87 	bl	803e424 <LOG_StrLn>
                            break;
 803ed16:	e00b      	b.n	803ed30 <Simcom_SetState+0x40c>
                        }
                        _DelayMS(1000);
 803ed18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 803ed1c:	f000 fd50 	bl	803f7c0 <_DelayMS>
                    } while (p && read.stat != param.stat);
 803ed20:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803ed24:	2b00      	cmp	r3, #0
 803ed26:	d003      	beq.n	803ed30 <Simcom_SetState+0x40c>
 803ed28:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 803ed2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 803ed2c:	429a      	cmp	r2, r3
 803ed2e:	d1cb      	bne.n	803ecc8 <Simcom_SetState+0x3a4>
                }

                // upgrade simcom state
                if (p > 0) {
 803ed30:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803ed34:	2b00      	cmp	r3, #0
 803ed36:	dd09      	ble.n	803ed4c <Simcom_SetState+0x428>
                    SIM.state++;
 803ed38:	4b97      	ldr	r3, [pc, #604]	; (803ef98 <Simcom_SetState+0x674>)
 803ed3a:	f993 3000 	ldrsb.w	r3, [r3]
 803ed3e:	b2db      	uxtb	r3, r3
 803ed40:	3301      	adds	r3, #1
 803ed42:	b2db      	uxtb	r3, r3
 803ed44:	b25a      	sxtb	r2, r3
 803ed46:	4b94      	ldr	r3, [pc, #592]	; (803ef98 <Simcom_SetState+0x674>)
 803ed48:	701a      	strb	r2, [r3, #0]
 803ed4a:	e00d      	b.n	803ed68 <Simcom_SetState+0x444>
                } else {
                    if (SIM.state == SIM_STATE_NETWORK_ON) {
 803ed4c:	4b92      	ldr	r3, [pc, #584]	; (803ef98 <Simcom_SetState+0x674>)
 803ed4e:	f993 3000 	ldrsb.w	r3, [r3]
 803ed52:	2b02      	cmp	r3, #2
 803ed54:	d108      	bne.n	803ed68 <Simcom_SetState+0x444>
                        SIM.state--;
 803ed56:	4b90      	ldr	r3, [pc, #576]	; (803ef98 <Simcom_SetState+0x674>)
 803ed58:	f993 3000 	ldrsb.w	r3, [r3]
 803ed5c:	b2db      	uxtb	r3, r3
 803ed5e:	3b01      	subs	r3, #1
 803ed60:	b2db      	uxtb	r3, r3
 803ed62:	b25a      	sxtb	r2, r3
 803ed64:	4b8c      	ldr	r3, [pc, #560]	; (803ef98 <Simcom_SetState+0x674>)
 803ed66:	701a      	strb	r2, [r3, #0]
                    }
                }

                _DelayMS(500);
 803ed68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 803ed6c:	f000 fd28 	bl	803f7c0 <_DelayMS>
                break;
 803ed70:	e1d0      	b.n	803f114 <Simcom_SetState+0x7f0>
#if (!BOOTLOADER)
            case SIM_STATE_GPRS_ON:
                // =========== PDP CONFIGURATION
                // Attach to GPRS service
                if (p > 0) {
 803ed72:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803ed76:	2b00      	cmp	r3, #0
 803ed78:	dd23      	ble.n	803edc2 <Simcom_SetState+0x49e>
                    AT_CGATT state;
                    // wait until attached
                    do {
                        p = AT_GprsAttachment(ATR, &state);
 803ed7a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 803ed7e:	4619      	mov	r1, r3
 803ed80:	2001      	movs	r0, #1
 803ed82:	f7fe fecf 	bl	803db24 <AT_GprsAttachment>
 803ed86:	4603      	mov	r3, r0
 803ed88:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6

                        // Handle timeout
                        if (timeout && (_GetTickMS() - tick) > timeout) {
 803ed8c:	683b      	ldr	r3, [r7, #0]
 803ed8e:	2b00      	cmp	r3, #0
 803ed90:	d00c      	beq.n	803edac <Simcom_SetState+0x488>
 803ed92:	f000 fd20 	bl	803f7d6 <_GetTickMS>
 803ed96:	4602      	mov	r2, r0
 803ed98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 803ed9c:	1ad3      	subs	r3, r2, r3
 803ed9e:	683a      	ldr	r2, [r7, #0]
 803eda0:	429a      	cmp	r2, r3
 803eda2:	d203      	bcs.n	803edac <Simcom_SetState+0x488>
                            LOG_StrLn("Simcom:StateTimeout");
 803eda4:	487b      	ldr	r0, [pc, #492]	; (803ef94 <Simcom_SetState+0x670>)
 803eda6:	f7ff fb3d 	bl	803e424 <LOG_StrLn>
                            break;
 803edaa:	e00a      	b.n	803edc2 <Simcom_SetState+0x49e>
                        }
                        _DelayMS(1000);
 803edac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 803edb0:	f000 fd06 	bl	803f7c0 <_DelayMS>
                    } while (p && !state);
 803edb4:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803edb8:	2b00      	cmp	r3, #0
 803edba:	d002      	beq.n	803edc2 <Simcom_SetState+0x49e>
 803edbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 803edbe:	2b00      	cmp	r3, #0
 803edc0:	d0db      	beq.n	803ed7a <Simcom_SetState+0x456>
                }

                // Select TCPIP application mode:
                // (0: Non Transparent (command mode), 1: Transparent (data mode))
                if (p > 0) {
 803edc2:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803edc6:	2b00      	cmp	r3, #0
 803edc8:	dd0a      	ble.n	803ede0 <Simcom_SetState+0x4bc>
                    AT_CIPMODE state = CIPMODE_NORMAL;
 803edca:	2300      	movs	r3, #0
 803edcc:	663b      	str	r3, [r7, #96]	; 0x60
                    p = AT_TcpApllicationMode(ATW, &state);
 803edce:	f107 0360 	add.w	r3, r7, #96	; 0x60
 803edd2:	4619      	mov	r1, r3
 803edd4:	2000      	movs	r0, #0
 803edd6:	f7fe fee1 	bl	803db9c <AT_TcpApllicationMode>
 803edda:	4603      	mov	r3, r0
 803eddc:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
                }
                // Set to Single IP Connection (Backend)
                if (p > 0) {
 803ede0:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803ede4:	2b00      	cmp	r3, #0
 803ede6:	dd0a      	ble.n	803edfe <Simcom_SetState+0x4da>
                    AT_CIPMUX state = CIPMUX_SINGLE_IP;
 803ede8:	2300      	movs	r3, #0
 803edea:	65fb      	str	r3, [r7, #92]	; 0x5c
                    p = AT_MultiIpConnection(ATW, &state);
 803edec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 803edf0:	4619      	mov	r1, r3
 803edf2:	2000      	movs	r0, #0
 803edf4:	f7fe febe 	bl	803db74 <AT_MultiIpConnection>
 803edf8:	4603      	mov	r3, r0
 803edfa:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
                }
                // Get data from network automatically
                if (p > 0) {
 803edfe:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803ee02:	2b00      	cmp	r3, #0
 803ee04:	dd0a      	ble.n	803ee1c <Simcom_SetState+0x4f8>
                    AT_CIPRXGET state = CIPRXGET_DISABLE;
 803ee06:	2300      	movs	r3, #0
 803ee08:	65bb      	str	r3, [r7, #88]	; 0x58
                    p = AT_ManuallyReceiveData(ATW, &state);
 803ee0a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 803ee0e:	4619      	mov	r1, r3
 803ee10:	2000      	movs	r0, #0
 803ee12:	f7fe fe9b 	bl	803db4c <AT_ManuallyReceiveData>
 803ee16:	4603      	mov	r3, r0
 803ee18:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
                }

                // upgrade simcom state
                if (p > 0) {
 803ee1c:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803ee20:	2b00      	cmp	r3, #0
 803ee22:	dd09      	ble.n	803ee38 <Simcom_SetState+0x514>
                    SIM.state++;
 803ee24:	4b5c      	ldr	r3, [pc, #368]	; (803ef98 <Simcom_SetState+0x674>)
 803ee26:	f993 3000 	ldrsb.w	r3, [r3]
 803ee2a:	b2db      	uxtb	r3, r3
 803ee2c:	3301      	adds	r3, #1
 803ee2e:	b2db      	uxtb	r3, r3
 803ee30:	b25a      	sxtb	r2, r3
 803ee32:	4b59      	ldr	r3, [pc, #356]	; (803ef98 <Simcom_SetState+0x674>)
 803ee34:	701a      	strb	r2, [r3, #0]
 803ee36:	e00d      	b.n	803ee54 <Simcom_SetState+0x530>
                } else {
                    if (SIM.state == SIM_STATE_GPRS_ON) {
 803ee38:	4b57      	ldr	r3, [pc, #348]	; (803ef98 <Simcom_SetState+0x674>)
 803ee3a:	f993 3000 	ldrsb.w	r3, [r3]
 803ee3e:	2b03      	cmp	r3, #3
 803ee40:	d108      	bne.n	803ee54 <Simcom_SetState+0x530>
                        SIM.state--;
 803ee42:	4b55      	ldr	r3, [pc, #340]	; (803ef98 <Simcom_SetState+0x674>)
 803ee44:	f993 3000 	ldrsb.w	r3, [r3]
 803ee48:	b2db      	uxtb	r3, r3
 803ee4a:	3b01      	subs	r3, #1
 803ee4c:	b2db      	uxtb	r3, r3
 803ee4e:	b25a      	sxtb	r2, r3
 803ee50:	4b51      	ldr	r3, [pc, #324]	; (803ef98 <Simcom_SetState+0x674>)
 803ee52:	701a      	strb	r2, [r3, #0]
                    }
                }

                _DelayMS(500);
 803ee54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 803ee58:	f000 fcb2 	bl	803f7c0 <_DelayMS>
                break;
 803ee5c:	e15a      	b.n	803f114 <Simcom_SetState+0x7f0>
            case SIM_STATE_PDP_ON:
                // =========== PDP ATTACH
                // Set type of authentication for PDP connections of socket
                AT_ConnectionStatusSingle(&(SIM.ip_status));
 803ee5e:	484f      	ldr	r0, [pc, #316]	; (803ef9c <Simcom_SetState+0x678>)
 803ee60:	f7fe f8f8 	bl	803d054 <AT_ConnectionStatusSingle>
                if (p > 0 && (SIM.ip_status == CIPSTAT_IP_INITIAL || SIM.ip_status == CIPSTAT_PDP_DEACT)) {
 803ee64:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803ee68:	2b00      	cmp	r3, #0
 803ee6a:	dd22      	ble.n	803eeb2 <Simcom_SetState+0x58e>
 803ee6c:	4b4a      	ldr	r3, [pc, #296]	; (803ef98 <Simcom_SetState+0x674>)
 803ee6e:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 803ee72:	4323      	orrs	r3, r4
 803ee74:	d006      	beq.n	803ee84 <Simcom_SetState+0x560>
 803ee76:	4b48      	ldr	r3, [pc, #288]	; (803ef98 <Simcom_SetState+0x674>)
 803ee78:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 803ee7c:	2c00      	cmp	r4, #0
 803ee7e:	bf08      	it	eq
 803ee80:	2b09      	cmpeq	r3, #9
 803ee82:	d116      	bne.n	803eeb2 <Simcom_SetState+0x58e>
                    at_cstt_t param = {
 803ee84:	4b46      	ldr	r3, [pc, #280]	; (803efa0 <Simcom_SetState+0x67c>)
 803ee86:	f107 0408 	add.w	r4, r7, #8
 803ee8a:	461d      	mov	r5, r3
 803ee8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 803ee8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 803ee90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 803ee92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 803ee94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 803ee96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 803ee98:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 803ee9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                            .apn = NET_CON_APN,
                            .username = NET_CON_USERNAME,
                            .password = NET_CON_PASSWORD,
                    };
                    p = AT_ConfigureAPN(ATW, &param);
 803eea0:	f107 0308 	add.w	r3, r7, #8
 803eea4:	4619      	mov	r1, r3
 803eea6:	2000      	movs	r0, #0
 803eea8:	f7fe fc0a 	bl	803d6c0 <AT_ConfigureAPN>
 803eeac:	4603      	mov	r3, r0
 803eeae:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
                }
                // =========== IP ATTACH
                // Bring Up IP Connection
                AT_ConnectionStatusSingle(&(SIM.ip_status));
 803eeb2:	483a      	ldr	r0, [pc, #232]	; (803ef9c <Simcom_SetState+0x678>)
 803eeb4:	f7fe f8ce 	bl	803d054 <AT_ConnectionStatusSingle>
                if (p > 0 && SIM.ip_status == CIPSTAT_IP_START) {
 803eeb8:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803eebc:	2b00      	cmp	r3, #0
 803eebe:	dd10      	ble.n	803eee2 <Simcom_SetState+0x5be>
 803eec0:	4b35      	ldr	r3, [pc, #212]	; (803ef98 <Simcom_SetState+0x674>)
 803eec2:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 803eec6:	2c00      	cmp	r4, #0
 803eec8:	bf08      	it	eq
 803eeca:	2b01      	cmpeq	r3, #1
 803eecc:	d109      	bne.n	803eee2 <Simcom_SetState+0x5be>
                    p = Simcom_Command("AT+CIICR\r", NULL, 30000, 0);
 803eece:	2300      	movs	r3, #0
 803eed0:	f247 5230 	movw	r2, #30000	; 0x7530
 803eed4:	2100      	movs	r1, #0
 803eed6:	4833      	ldr	r0, [pc, #204]	; (803efa4 <Simcom_SetState+0x680>)
 803eed8:	f000 f9e6 	bl	803f2a8 <Simcom_Command>
 803eedc:	4603      	mov	r3, r0
 803eede:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
                }
                // Check IP Address
                AT_ConnectionStatusSingle(&(SIM.ip_status));
 803eee2:	482e      	ldr	r0, [pc, #184]	; (803ef9c <Simcom_SetState+0x678>)
 803eee4:	f7fe f8b6 	bl	803d054 <AT_ConnectionStatusSingle>
                if (p > 0 && (SIM.ip_status == CIPSTAT_IP_CONFIG || SIM.ip_status == CIPSTAT_IP_GPRSACT)) {
 803eee8:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803eeec:	2b00      	cmp	r3, #0
 803eeee:	dd15      	ble.n	803ef1c <Simcom_SetState+0x5f8>
 803eef0:	4b29      	ldr	r3, [pc, #164]	; (803ef98 <Simcom_SetState+0x674>)
 803eef2:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 803eef6:	2c00      	cmp	r4, #0
 803eef8:	bf08      	it	eq
 803eefa:	2b02      	cmpeq	r3, #2
 803eefc:	d006      	beq.n	803ef0c <Simcom_SetState+0x5e8>
 803eefe:	4b26      	ldr	r3, [pc, #152]	; (803ef98 <Simcom_SetState+0x674>)
 803ef00:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 803ef04:	2c00      	cmp	r4, #0
 803ef06:	bf08      	it	eq
 803ef08:	2b03      	cmpeq	r3, #3
 803ef0a:	d107      	bne.n	803ef1c <Simcom_SetState+0x5f8>
                    at_cifsr_t param;
                    p = AT_GetLocalIpAddress(&param);
 803ef0c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 803ef10:	4618      	mov	r0, r3
 803ef12:	f7fe fc93 	bl	803d83c <AT_GetLocalIpAddress>
 803ef16:	4603      	mov	r3, r0
 803ef18:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
                }

                // upgrade simcom state
                if (p > 0) {
 803ef1c:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803ef20:	2b00      	cmp	r3, #0
 803ef22:	dd09      	ble.n	803ef38 <Simcom_SetState+0x614>
                    SIM.state++;
 803ef24:	4b1c      	ldr	r3, [pc, #112]	; (803ef98 <Simcom_SetState+0x674>)
 803ef26:	f993 3000 	ldrsb.w	r3, [r3]
 803ef2a:	b2db      	uxtb	r3, r3
 803ef2c:	3301      	adds	r3, #1
 803ef2e:	b2db      	uxtb	r3, r3
 803ef30:	b25a      	sxtb	r2, r3
 803ef32:	4b19      	ldr	r3, [pc, #100]	; (803ef98 <Simcom_SetState+0x674>)
 803ef34:	701a      	strb	r2, [r3, #0]
 803ef36:	e026      	b.n	803ef86 <Simcom_SetState+0x662>
                } else {
                    // Check IP Status
                    AT_ConnectionStatusSingle(&(SIM.ip_status));
 803ef38:	4818      	ldr	r0, [pc, #96]	; (803ef9c <Simcom_SetState+0x678>)
 803ef3a:	f7fe f88b 	bl	803d054 <AT_ConnectionStatusSingle>

                    // Close PDP
                    if (SIM.ip_status != CIPSTAT_IP_INITIAL &&
 803ef3e:	4b16      	ldr	r3, [pc, #88]	; (803ef98 <Simcom_SetState+0x674>)
 803ef40:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 803ef44:	4323      	orrs	r3, r4
 803ef46:	d010      	beq.n	803ef6a <Simcom_SetState+0x646>
                            SIM.ip_status != CIPSTAT_PDP_DEACT) {
 803ef48:	4b13      	ldr	r3, [pc, #76]	; (803ef98 <Simcom_SetState+0x674>)
 803ef4a:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
                    if (SIM.ip_status != CIPSTAT_IP_INITIAL &&
 803ef4e:	2c00      	cmp	r4, #0
 803ef50:	bf08      	it	eq
 803ef52:	2b09      	cmpeq	r3, #9
 803ef54:	d009      	beq.n	803ef6a <Simcom_SetState+0x646>
                        p = Simcom_Command("AT+CIPSHUT\r", NULL, 1000, 0);
 803ef56:	2300      	movs	r3, #0
 803ef58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 803ef5c:	2100      	movs	r1, #0
 803ef5e:	4812      	ldr	r0, [pc, #72]	; (803efa8 <Simcom_SetState+0x684>)
 803ef60:	f000 f9a2 	bl	803f2a8 <Simcom_Command>
 803ef64:	4603      	mov	r3, r0
 803ef66:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
                    }

                    if (SIM.state == SIM_STATE_PDP_ON) {
 803ef6a:	4b0b      	ldr	r3, [pc, #44]	; (803ef98 <Simcom_SetState+0x674>)
 803ef6c:	f993 3000 	ldrsb.w	r3, [r3]
 803ef70:	2b04      	cmp	r3, #4
 803ef72:	d108      	bne.n	803ef86 <Simcom_SetState+0x662>
                        SIM.state--;
 803ef74:	4b08      	ldr	r3, [pc, #32]	; (803ef98 <Simcom_SetState+0x674>)
 803ef76:	f993 3000 	ldrsb.w	r3, [r3]
 803ef7a:	b2db      	uxtb	r3, r3
 803ef7c:	3b01      	subs	r3, #1
 803ef7e:	b2db      	uxtb	r3, r3
 803ef80:	b25a      	sxtb	r2, r3
 803ef82:	4b05      	ldr	r3, [pc, #20]	; (803ef98 <Simcom_SetState+0x674>)
 803ef84:	701a      	strb	r2, [r3, #0]
                    }
                }

                _DelayMS(500);
 803ef86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 803ef8a:	f000 fc19 	bl	803f7c0 <_DelayMS>
                break;
 803ef8e:	e0c1      	b.n	803f114 <Simcom_SetState+0x7f0>
 803ef90:	08043ed4 	.word	0x08043ed4
 803ef94:	08043e38 	.word	0x08043e38
 803ef98:	200002a8 	.word	0x200002a8
 803ef9c:	200002b0 	.word	0x200002b0
 803efa0:	08043f0c 	.word	0x08043f0c
 803efa4:	08043edc 	.word	0x08043edc
 803efa8:	08043ee8 	.word	0x08043ee8
            case SIM_STATE_INTERNET_ON:
                AT_ConnectionStatusSingle(&(SIM.ip_status));
 803efac:	4865      	ldr	r0, [pc, #404]	; (803f144 <Simcom_SetState+0x820>)
 803efae:	f7fe f851 	bl	803d054 <AT_ConnectionStatusSingle>
                // ============ SOCKET CONFIGURATION
                // Establish connection with server
                if (p > 0 && (SIM.ip_status != CIPSTAT_CONNECT_OK || SIM.ip_status != CIPSTAT_CONNECTING)) {
 803efb2:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803efb6:	2b00      	cmp	r3, #0
 803efb8:	dd3d      	ble.n	803f036 <Simcom_SetState+0x712>
 803efba:	4b63      	ldr	r3, [pc, #396]	; (803f148 <Simcom_SetState+0x824>)
 803efbc:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 803efc0:	2c00      	cmp	r4, #0
 803efc2:	bf08      	it	eq
 803efc4:	2b06      	cmpeq	r3, #6
 803efc6:	d106      	bne.n	803efd6 <Simcom_SetState+0x6b2>
 803efc8:	4b5f      	ldr	r3, [pc, #380]	; (803f148 <Simcom_SetState+0x824>)
 803efca:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 803efce:	2c00      	cmp	r4, #0
 803efd0:	bf08      	it	eq
 803efd2:	2b05      	cmpeq	r3, #5
 803efd4:	d02f      	beq.n	803f036 <Simcom_SetState+0x712>
                    at_cipstart_t param = {
 803efd6:	4b5d      	ldr	r3, [pc, #372]	; (803f14c <Simcom_SetState+0x828>)
 803efd8:	f107 0408 	add.w	r4, r7, #8
 803efdc:	461d      	mov	r5, r3
 803efde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 803efe0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 803efe2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 803efe4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 803efe6:	682b      	ldr	r3, [r5, #0]
 803efe8:	6023      	str	r3, [r4, #0]
                            .mode = "TCP",
                            .ip = NET_TCP_SERVER,
                            .port = NET_TCP_PORT
                    };
                    p = AT_StartConnectionSingle(&param);
 803efea:	f107 0308 	add.w	r3, r7, #8
 803efee:	4618      	mov	r0, r3
 803eff0:	f7fe fc4e 	bl	803d890 <AT_StartConnectionSingle>
 803eff4:	4603      	mov	r3, r0
 803eff6:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6

                    // wait until attached
                    do {
                        AT_ConnectionStatusSingle(&(SIM.ip_status));
 803effa:	4852      	ldr	r0, [pc, #328]	; (803f144 <Simcom_SetState+0x820>)
 803effc:	f7fe f82a 	bl	803d054 <AT_ConnectionStatusSingle>

                        // Handle timeout
                        if (timeout && (_GetTickMS() - tick) > timeout) {
 803f000:	683b      	ldr	r3, [r7, #0]
 803f002:	2b00      	cmp	r3, #0
 803f004:	d00c      	beq.n	803f020 <Simcom_SetState+0x6fc>
 803f006:	f000 fbe6 	bl	803f7d6 <_GetTickMS>
 803f00a:	4602      	mov	r2, r0
 803f00c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 803f010:	1ad3      	subs	r3, r2, r3
 803f012:	683a      	ldr	r2, [r7, #0]
 803f014:	429a      	cmp	r2, r3
 803f016:	d203      	bcs.n	803f020 <Simcom_SetState+0x6fc>
                            LOG_StrLn("Simcom:StateTimeout");
 803f018:	484d      	ldr	r0, [pc, #308]	; (803f150 <Simcom_SetState+0x82c>)
 803f01a:	f7ff fa03 	bl	803e424 <LOG_StrLn>
                            break;
 803f01e:	e00a      	b.n	803f036 <Simcom_SetState+0x712>
                        }
                        _DelayMS(1000);
 803f020:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 803f024:	f000 fbcc 	bl	803f7c0 <_DelayMS>
                    } while (SIM.ip_status == CIPSTAT_CONNECTING);
 803f028:	4b47      	ldr	r3, [pc, #284]	; (803f148 <Simcom_SetState+0x824>)
 803f02a:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 803f02e:	2c00      	cmp	r4, #0
 803f030:	bf08      	it	eq
 803f032:	2b05      	cmpeq	r3, #5
 803f034:	d0e1      	beq.n	803effa <Simcom_SetState+0x6d6>
                }

                // upgrade simcom state
                if (p > 0) {
 803f036:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 803f03a:	2b00      	cmp	r3, #0
 803f03c:	dd09      	ble.n	803f052 <Simcom_SetState+0x72e>
                    SIM.state++;
 803f03e:	4b42      	ldr	r3, [pc, #264]	; (803f148 <Simcom_SetState+0x824>)
 803f040:	f993 3000 	ldrsb.w	r3, [r3]
 803f044:	b2db      	uxtb	r3, r3
 803f046:	3301      	adds	r3, #1
 803f048:	b2db      	uxtb	r3, r3
 803f04a:	b25a      	sxtb	r2, r3
 803f04c:	4b3e      	ldr	r3, [pc, #248]	; (803f148 <Simcom_SetState+0x824>)
 803f04e:	701a      	strb	r2, [r3, #0]
 803f050:	e03f      	b.n	803f0d2 <Simcom_SetState+0x7ae>
                } else {
                    // Check IP Status
                    AT_ConnectionStatusSingle(&(SIM.ip_status));
 803f052:	483c      	ldr	r0, [pc, #240]	; (803f144 <Simcom_SetState+0x820>)
 803f054:	f7fd fffe 	bl	803d054 <AT_ConnectionStatusSingle>

                    // Close IP
                    if (SIM.ip_status == CIPSTAT_CONNECT_OK) {
 803f058:	4b3b      	ldr	r3, [pc, #236]	; (803f148 <Simcom_SetState+0x824>)
 803f05a:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 803f05e:	2c00      	cmp	r4, #0
 803f060:	bf08      	it	eq
 803f062:	2b06      	cmpeq	r3, #6
 803f064:	d127      	bne.n	803f0b6 <Simcom_SetState+0x792>
                        p = Simcom_Command("AT+CIPCLOSE\r", NULL, 1000, 0);
 803f066:	2300      	movs	r3, #0
 803f068:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 803f06c:	2100      	movs	r1, #0
 803f06e:	4839      	ldr	r0, [pc, #228]	; (803f154 <Simcom_SetState+0x830>)
 803f070:	f000 f91a 	bl	803f2a8 <Simcom_Command>
 803f074:	4603      	mov	r3, r0
 803f076:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6

                        // wait until closed
                        do {
                            AT_ConnectionStatusSingle(&(SIM.ip_status));
 803f07a:	4832      	ldr	r0, [pc, #200]	; (803f144 <Simcom_SetState+0x820>)
 803f07c:	f7fd ffea 	bl	803d054 <AT_ConnectionStatusSingle>

                            // Handle timeout
                            if (timeout && (_GetTickMS() - tick) > timeout) {
 803f080:	683b      	ldr	r3, [r7, #0]
 803f082:	2b00      	cmp	r3, #0
 803f084:	d00c      	beq.n	803f0a0 <Simcom_SetState+0x77c>
 803f086:	f000 fba6 	bl	803f7d6 <_GetTickMS>
 803f08a:	4602      	mov	r2, r0
 803f08c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 803f090:	1ad3      	subs	r3, r2, r3
 803f092:	683a      	ldr	r2, [r7, #0]
 803f094:	429a      	cmp	r2, r3
 803f096:	d203      	bcs.n	803f0a0 <Simcom_SetState+0x77c>
                                LOG_StrLn("Simcom:StateTimeout");
 803f098:	482d      	ldr	r0, [pc, #180]	; (803f150 <Simcom_SetState+0x82c>)
 803f09a:	f7ff f9c3 	bl	803e424 <LOG_StrLn>
                                break;
 803f09e:	e00a      	b.n	803f0b6 <Simcom_SetState+0x792>
                            }
                            _DelayMS(1000);
 803f0a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 803f0a4:	f000 fb8c 	bl	803f7c0 <_DelayMS>
                        } while (SIM.ip_status == CIPSTAT_CLOSING);
 803f0a8:	4b27      	ldr	r3, [pc, #156]	; (803f148 <Simcom_SetState+0x824>)
 803f0aa:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 803f0ae:	2c00      	cmp	r4, #0
 803f0b0:	bf08      	it	eq
 803f0b2:	2b07      	cmpeq	r3, #7
 803f0b4:	d0e1      	beq.n	803f07a <Simcom_SetState+0x756>
                    }

                    if (SIM.state == SIM_STATE_INTERNET_ON) {
 803f0b6:	4b24      	ldr	r3, [pc, #144]	; (803f148 <Simcom_SetState+0x824>)
 803f0b8:	f993 3000 	ldrsb.w	r3, [r3]
 803f0bc:	2b05      	cmp	r3, #5
 803f0be:	d108      	bne.n	803f0d2 <Simcom_SetState+0x7ae>
                        SIM.state--;
 803f0c0:	4b21      	ldr	r3, [pc, #132]	; (803f148 <Simcom_SetState+0x824>)
 803f0c2:	f993 3000 	ldrsb.w	r3, [r3]
 803f0c6:	b2db      	uxtb	r3, r3
 803f0c8:	3b01      	subs	r3, #1
 803f0ca:	b2db      	uxtb	r3, r3
 803f0cc:	b25a      	sxtb	r2, r3
 803f0ce:	4b1e      	ldr	r3, [pc, #120]	; (803f148 <Simcom_SetState+0x824>)
 803f0d0:	701a      	strb	r2, [r3, #0]
                    }
                }

                _DelayMS(500);
 803f0d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 803f0d6:	f000 fb73 	bl	803f7c0 <_DelayMS>
                break;
 803f0da:	e01b      	b.n	803f114 <Simcom_SetState+0x7f0>
            case SIM_STATE_SERVER_ON:
                // Check IP Status
                AT_ConnectionStatusSingle(&(SIM.ip_status));
 803f0dc:	4819      	ldr	r0, [pc, #100]	; (803f144 <Simcom_SetState+0x820>)
 803f0de:	f7fd ffb9 	bl	803d054 <AT_ConnectionStatusSingle>

                if (SIM.ip_status != CIPSTAT_CONNECT_OK) {
 803f0e2:	4b19      	ldr	r3, [pc, #100]	; (803f148 <Simcom_SetState+0x824>)
 803f0e4:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 803f0e8:	2c00      	cmp	r4, #0
 803f0ea:	bf08      	it	eq
 803f0ec:	2b06      	cmpeq	r3, #6
 803f0ee:	d010      	beq.n	803f112 <Simcom_SetState+0x7ee>
                    if (SIM.state == SIM_STATE_SERVER_ON) {
 803f0f0:	4b15      	ldr	r3, [pc, #84]	; (803f148 <Simcom_SetState+0x824>)
 803f0f2:	f993 3000 	ldrsb.w	r3, [r3]
 803f0f6:	2b06      	cmp	r3, #6
 803f0f8:	d10b      	bne.n	803f112 <Simcom_SetState+0x7ee>
                        SIM.state--;
 803f0fa:	4b13      	ldr	r3, [pc, #76]	; (803f148 <Simcom_SetState+0x824>)
 803f0fc:	f993 3000 	ldrsb.w	r3, [r3]
 803f100:	b2db      	uxtb	r3, r3
 803f102:	3b01      	subs	r3, #1
 803f104:	b2db      	uxtb	r3, r3
 803f106:	b25a      	sxtb	r2, r3
 803f108:	4b0f      	ldr	r3, [pc, #60]	; (803f148 <Simcom_SetState+0x824>)
 803f10a:	701a      	strb	r2, [r3, #0]
                    }
                }

                break;
 803f10c:	e001      	b.n	803f112 <Simcom_SetState+0x7ee>
#endif
            default:
                break;
 803f10e:	bf00      	nop
 803f110:	e000      	b.n	803f114 <Simcom_SetState+0x7f0>
                break;
 803f112:	bf00      	nop
        }
    } while (SIM.state < state);
 803f114:	4b0c      	ldr	r3, [pc, #48]	; (803f148 <Simcom_SetState+0x824>)
 803f116:	f993 3000 	ldrsb.w	r3, [r3]
 803f11a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 803f11e:	429a      	cmp	r2, r3
 803f120:	f73f ac12 	bgt.w	803e948 <Simcom_SetState+0x24>
    Simcom_Unlock();
 803f124:	f7ff fbe2 	bl	803e8ec <Simcom_Unlock>

    return (SIM.state >= state);
 803f128:	4b07      	ldr	r3, [pc, #28]	; (803f148 <Simcom_SetState+0x824>)
 803f12a:	f993 3000 	ldrsb.w	r3, [r3]
 803f12e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 803f132:	429a      	cmp	r2, r3
 803f134:	bfd4      	ite	le
 803f136:	2301      	movle	r3, #1
 803f138:	2300      	movgt	r3, #0
 803f13a:	b2db      	uxtb	r3, r3
}
 803f13c:	4618      	mov	r0, r3
 803f13e:	37c0      	adds	r7, #192	; 0xc0
 803f140:	46bd      	mov	sp, r7
 803f142:	bdb0      	pop	{r4, r5, r7, pc}
 803f144:	200002b0 	.word	0x200002b0
 803f148:	200002a8 	.word	0x200002a8
 803f14c:	08043f48 	.word	0x08043f48
 803f150:	08043e38 	.word	0x08043e38
 803f154:	08043ef4 	.word	0x08043ef4

0803f158 <Simcom_Upload>:

#if (!BOOTLOADER)
SIMCOM_RESULT Simcom_Upload(void *payload, uint16_t size) {
 803f158:	b590      	push	{r4, r7, lr}
 803f15a:	b08b      	sub	sp, #44	; 0x2c
 803f15c:	af00      	add	r7, sp, #0
 803f15e:	6078      	str	r0, [r7, #4]
 803f160:	460b      	mov	r3, r1
 803f162:	807b      	strh	r3, [r7, #2]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 803f164:	2300      	movs	r3, #0
 803f166:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    header_t *hHeader = NULL;
 803f16a:	2300      	movs	r3, #0
 803f16c:	623b      	str	r3, [r7, #32]
    uint32_t tick;
    char str[20];

    // Check IP Status
    AT_ConnectionStatusSingle(&(SIM.ip_status));
 803f16e:	4846      	ldr	r0, [pc, #280]	; (803f288 <Simcom_Upload+0x130>)
 803f170:	f7fd ff70 	bl	803d054 <AT_ConnectionStatusSingle>
    // combine the size
    sprintf(str, "AT+CIPSEND=%d\r", size);
 803f174:	887a      	ldrh	r2, [r7, #2]
 803f176:	f107 0308 	add.w	r3, r7, #8
 803f17a:	4944      	ldr	r1, [pc, #272]	; (803f28c <Simcom_Upload+0x134>)
 803f17c:	4618      	mov	r0, r3
 803f17e:	f000 fc51 	bl	803fa24 <siprintf>

    Simcom_Lock();
 803f182:	f7ff fba5 	bl	803e8d0 <Simcom_Lock>

    if (SIM.state >= SIM_STATE_SERVER_ON && SIM.ip_status == CIPSTAT_CONNECT_OK) {
 803f186:	4b42      	ldr	r3, [pc, #264]	; (803f290 <Simcom_Upload+0x138>)
 803f188:	f993 3000 	ldrsb.w	r3, [r3]
 803f18c:	2b05      	cmp	r3, #5
 803f18e:	dd72      	ble.n	803f276 <Simcom_Upload+0x11e>
 803f190:	4b3f      	ldr	r3, [pc, #252]	; (803f290 <Simcom_Upload+0x138>)
 803f192:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 803f196:	2c00      	cmp	r4, #0
 803f198:	bf08      	it	eq
 803f19a:	2b06      	cmpeq	r3, #6
 803f19c:	d16b      	bne.n	803f276 <Simcom_Upload+0x11e>
        // send command
        p = Simcom_Command(str, SIMCOM_RSP_SEND, 500, 0);
 803f19e:	f107 0008 	add.w	r0, r7, #8
 803f1a2:	2300      	movs	r3, #0
 803f1a4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 803f1a8:	493a      	ldr	r1, [pc, #232]	; (803f294 <Simcom_Upload+0x13c>)
 803f1aa:	f000 f87d 	bl	803f2a8 <Simcom_Command>
 803f1ae:	4603      	mov	r3, r0
 803f1b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (p > 0) {
 803f1b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 803f1b8:	2b00      	cmp	r3, #0
 803f1ba:	dd5c      	ble.n	803f276 <Simcom_Upload+0x11e>
            // send the payload
            p = Simcom_Command((char*) payload, SIMCOM_RSP_SENT, 60000, size);
 803f1bc:	887b      	ldrh	r3, [r7, #2]
 803f1be:	f64e 2260 	movw	r2, #60000	; 0xea60
 803f1c2:	4935      	ldr	r1, [pc, #212]	; (803f298 <Simcom_Upload+0x140>)
 803f1c4:	6878      	ldr	r0, [r7, #4]
 803f1c6:	f000 f86f 	bl	803f2a8 <Simcom_Command>
 803f1ca:	4603      	mov	r3, r0
 803f1cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            // wait for ACK/NACK
            if (p > 0) {
 803f1d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 803f1d4:	2b00      	cmp	r3, #0
 803f1d6:	dd4e      	ble.n	803f276 <Simcom_Upload+0x11e>
                // set timeout guard
                tick = _GetTickMS();
 803f1d8:	f000 fafd 	bl	803f7d6 <_GetTickMS>
 803f1dc:	61f8      	str	r0, [r7, #28]
                // wait ACK for payload
                while (SIM.state >= SIM_STATE_SERVER_ON) {
 803f1de:	e01d      	b.n	803f21c <Simcom_Upload+0xc4>
                    if (Simcom_Response(PREFIX_ACK)
 803f1e0:	482e      	ldr	r0, [pc, #184]	; (803f29c <Simcom_Upload+0x144>)
 803f1e2:	f7ff fb8f 	bl	803e904 <Simcom_Response>
 803f1e6:	4603      	mov	r3, r0
 803f1e8:	2b00      	cmp	r3, #0
 803f1ea:	d11c      	bne.n	803f226 <Simcom_Upload+0xce>
                            || Simcom_Response(PREFIX_NACK)
 803f1ec:	482c      	ldr	r0, [pc, #176]	; (803f2a0 <Simcom_Upload+0x148>)
 803f1ee:	f7ff fb89 	bl	803e904 <Simcom_Response>
 803f1f2:	4603      	mov	r3, r0
 803f1f4:	2b00      	cmp	r3, #0
 803f1f6:	d116      	bne.n	803f226 <Simcom_Upload+0xce>
                            || Simcom_Response(PREFIX_COMMAND)
 803f1f8:	482a      	ldr	r0, [pc, #168]	; (803f2a4 <Simcom_Upload+0x14c>)
 803f1fa:	f7ff fb83 	bl	803e904 <Simcom_Response>
 803f1fe:	4603      	mov	r3, r0
 803f200:	2b00      	cmp	r3, #0
 803f202:	d110      	bne.n	803f226 <Simcom_Upload+0xce>
                            || (_GetTickMS() - tick) >= 20000) {
 803f204:	f000 fae7 	bl	803f7d6 <_GetTickMS>
 803f208:	4602      	mov	r2, r0
 803f20a:	69fb      	ldr	r3, [r7, #28]
 803f20c:	1ad3      	subs	r3, r2, r3
 803f20e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 803f212:	4293      	cmp	r3, r2
 803f214:	d807      	bhi.n	803f226 <Simcom_Upload+0xce>
                        break;
                    }
                    _DelayMS(10);
 803f216:	200a      	movs	r0, #10
 803f218:	f000 fad2 	bl	803f7c0 <_DelayMS>
                while (SIM.state >= SIM_STATE_SERVER_ON) {
 803f21c:	4b1c      	ldr	r3, [pc, #112]	; (803f290 <Simcom_Upload+0x138>)
 803f21e:	f993 3000 	ldrsb.w	r3, [r3]
 803f222:	2b05      	cmp	r3, #5
 803f224:	dcdc      	bgt.n	803f1e0 <Simcom_Upload+0x88>
                }

                // handle SIMCOM result
                if (Simcom_Response(PREFIX_ACK)) {
 803f226:	481d      	ldr	r0, [pc, #116]	; (803f29c <Simcom_Upload+0x144>)
 803f228:	f7ff fb6c 	bl	803e904 <Simcom_Response>
 803f22c:	4603      	mov	r3, r0
 803f22e:	2b00      	cmp	r3, #0
 803f230:	d00e      	beq.n	803f250 <Simcom_Upload+0xf8>
                    p = SIM_RESULT_NACK;
 803f232:	23fc      	movs	r3, #252	; 0xfc
 803f234:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                    // validate ACK
                    hHeader = (header_t*) payload;
 803f238:	687b      	ldr	r3, [r7, #4]
 803f23a:	623b      	str	r3, [r7, #32]
                    if (Simcom_ProcessACK(hHeader)) {
 803f23c:	6a38      	ldr	r0, [r7, #32]
 803f23e:	f000 f929 	bl	803f494 <Simcom_ProcessACK>
 803f242:	4603      	mov	r3, r0
 803f244:	2b00      	cmp	r3, #0
 803f246:	d016      	beq.n	803f276 <Simcom_Upload+0x11e>
                        p = SIM_RESULT_OK;
 803f248:	2301      	movs	r3, #1
 803f24a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 803f24e:	e012      	b.n	803f276 <Simcom_Upload+0x11e>
                    }
                } else if (Simcom_Response(PREFIX_NACK) || Simcom_Response(PREFIX_COMMAND)) {
 803f250:	4813      	ldr	r0, [pc, #76]	; (803f2a0 <Simcom_Upload+0x148>)
 803f252:	f7ff fb57 	bl	803e904 <Simcom_Response>
 803f256:	4603      	mov	r3, r0
 803f258:	2b00      	cmp	r3, #0
 803f25a:	d105      	bne.n	803f268 <Simcom_Upload+0x110>
 803f25c:	4811      	ldr	r0, [pc, #68]	; (803f2a4 <Simcom_Upload+0x14c>)
 803f25e:	f7ff fb51 	bl	803e904 <Simcom_Response>
 803f262:	4603      	mov	r3, r0
 803f264:	2b00      	cmp	r3, #0
 803f266:	d003      	beq.n	803f270 <Simcom_Upload+0x118>
                    p = SIM_RESULT_NACK;
 803f268:	23fc      	movs	r3, #252	; 0xfc
 803f26a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 803f26e:	e002      	b.n	803f276 <Simcom_Upload+0x11e>
                } else {
                    p = SIM_RESULT_TIMEOUT;
 803f270:	23ff      	movs	r3, #255	; 0xff
 803f272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
            }
        }
    }

    Simcom_Unlock();
 803f276:	f7ff fb39 	bl	803e8ec <Simcom_Unlock>
    return p;
 803f27a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 803f27e:	4618      	mov	r0, r3
 803f280:	372c      	adds	r7, #44	; 0x2c
 803f282:	46bd      	mov	sp, r7
 803f284:	bd90      	pop	{r4, r7, pc}
 803f286:	bf00      	nop
 803f288:	200002b0 	.word	0x200002b0
 803f28c:	08043f6c 	.word	0x08043f6c
 803f290:	200002a8 	.word	0x200002a8
 803f294:	08043f7c 	.word	0x08043f7c
 803f298:	08043f80 	.word	0x08043f80
 803f29c:	08043f8c 	.word	0x08043f8c
 803f2a0:	08043f90 	.word	0x08043f90
 803f2a4:	08043f94 	.word	0x08043f94

0803f2a8 <Simcom_Command>:

    return (p == SIM_RESULT_OK);
}
#endif

SIMCOM_RESULT Simcom_Command(char *data, char *res, uint32_t ms, uint16_t size) {
 803f2a8:	b580      	push	{r7, lr}
 803f2aa:	b086      	sub	sp, #24
 803f2ac:	af00      	add	r7, sp, #0
 803f2ae:	60f8      	str	r0, [r7, #12]
 803f2b0:	60b9      	str	r1, [r7, #8]
 803f2b2:	607a      	str	r2, [r7, #4]
 803f2b4:	807b      	strh	r3, [r7, #2]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 803f2b6:	2300      	movs	r3, #0
 803f2b8:	75fb      	strb	r3, [r7, #23]
    uint8_t upload = 1;
 803f2ba:	2301      	movs	r3, #1
 803f2bc:	75bb      	strb	r3, [r7, #22]

    // Handle default value
    if (res == NULL) {
 803f2be:	68bb      	ldr	r3, [r7, #8]
 803f2c0:	2b00      	cmp	r3, #0
 803f2c2:	d101      	bne.n	803f2c8 <Simcom_Command+0x20>
        res = SIMCOM_RSP_OK;
 803f2c4:	4b28      	ldr	r3, [pc, #160]	; (803f368 <Simcom_Command+0xc0>)
 803f2c6:	60bb      	str	r3, [r7, #8]
    }
    if (!size) {
 803f2c8:	887b      	ldrh	r3, [r7, #2]
 803f2ca:	2b00      	cmp	r3, #0
 803f2cc:	d106      	bne.n	803f2dc <Simcom_Command+0x34>
        upload = 0;
 803f2ce:	2300      	movs	r3, #0
 803f2d0:	75bb      	strb	r3, [r7, #22]
        size = strlen(data);
 803f2d2:	68f8      	ldr	r0, [r7, #12]
 803f2d4:	f7e0 ffae 	bl	8020234 <strlen>
 803f2d8:	4603      	mov	r3, r0
 803f2da:	807b      	strh	r3, [r7, #2]
    }

    // only handle command if SIM_STATE_READY or BOOT_CMD
    if (SIM.state >= SIM_STATE_READY || (strcmp(data, SIMCOM_CMD_BOOT) == 0)) {
 803f2dc:	4b23      	ldr	r3, [pc, #140]	; (803f36c <Simcom_Command+0xc4>)
 803f2de:	f993 3000 	ldrsb.w	r3, [r3]
 803f2e2:	2b00      	cmp	r3, #0
 803f2e4:	da06      	bge.n	803f2f4 <Simcom_Command+0x4c>
 803f2e6:	4922      	ldr	r1, [pc, #136]	; (803f370 <Simcom_Command+0xc8>)
 803f2e8:	68f8      	ldr	r0, [r7, #12]
 803f2ea:	f7e0 ff99 	bl	8020220 <strcmp>
 803f2ee:	4603      	mov	r3, r0
 803f2f0:	2b00      	cmp	r3, #0
 803f2f2:	d133      	bne.n	803f35c <Simcom_Command+0xb4>
        Simcom_Lock();
 803f2f4:	f7ff faec 	bl	803e8d0 <Simcom_Lock>

        // Debug: print command
        if (SIMCOM_DEBUG) {
            if (!upload) {
 803f2f8:	7dbb      	ldrb	r3, [r7, #22]
 803f2fa:	2b00      	cmp	r3, #0
 803f2fc:	d108      	bne.n	803f310 <Simcom_Command+0x68>
                LOG_Str("\n=> ");
 803f2fe:	481d      	ldr	r0, [pc, #116]	; (803f374 <Simcom_Command+0xcc>)
 803f300:	f7ff f878 	bl	803e3f4 <LOG_Str>
                LOG_Buf(data, size);
 803f304:	887b      	ldrh	r3, [r7, #2]
 803f306:	4619      	mov	r1, r3
 803f308:	68f8      	ldr	r0, [r7, #12]
 803f30a:	f7ff f8a6 	bl	803e45a <LOG_Buf>
 803f30e:	e004      	b.n	803f31a <Simcom_Command+0x72>
            } else {
                LOG_BufHex(data, size);
 803f310:	887b      	ldrh	r3, [r7, #2]
 803f312:	4619      	mov	r1, r3
 803f314:	68f8      	ldr	r0, [r7, #12]
 803f316:	f7ff f8bf 	bl	803e498 <LOG_BufHex>
            }
            LOG_Enter();
 803f31a:	f7fe fff1 	bl	803e300 <LOG_Enter>
        }

        // send command
        p = Simcom_Execute(data, size, ms, res);
 803f31e:	8879      	ldrh	r1, [r7, #2]
 803f320:	68bb      	ldr	r3, [r7, #8]
 803f322:	687a      	ldr	r2, [r7, #4]
 803f324:	68f8      	ldr	r0, [r7, #12]
 803f326:	f000 f989 	bl	803f63c <Simcom_Execute>
 803f32a:	4603      	mov	r3, r0
 803f32c:	75fb      	strb	r3, [r7, #23]

        // Debug: print response
        if (SIMCOM_DEBUG) {
            char *FTPGET = "AT+FTPGET=2";
 803f32e:	4b12      	ldr	r3, [pc, #72]	; (803f378 <Simcom_Command+0xd0>)
 803f330:	613b      	str	r3, [r7, #16]
            if (strncmp(data, FTPGET, strlen(FTPGET)) != 0) {
 803f332:	6938      	ldr	r0, [r7, #16]
 803f334:	f7e0 ff7e 	bl	8020234 <strlen>
 803f338:	4603      	mov	r3, r0
 803f33a:	461a      	mov	r2, r3
 803f33c:	6939      	ldr	r1, [r7, #16]
 803f33e:	68f8      	ldr	r0, [r7, #12]
 803f340:	f000 fb90 	bl	803fa64 <strncmp>
 803f344:	4603      	mov	r3, r0
 803f346:	2b00      	cmp	r3, #0
 803f348:	d006      	beq.n	803f358 <Simcom_Command+0xb0>
                LOG_Buf(SIMCOM_UART_RX, sizeof(SIMCOM_UART_RX));
 803f34a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 803f34e:	480b      	ldr	r0, [pc, #44]	; (803f37c <Simcom_Command+0xd4>)
 803f350:	f7ff f883 	bl	803e45a <LOG_Buf>
                LOG_Enter();
 803f354:	f7fe ffd4 	bl	803e300 <LOG_Enter>
            }
        }

        Simcom_Unlock();
 803f358:	f7ff fac8 	bl	803e8ec <Simcom_Unlock>
    }

    return p;
 803f35c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 803f360:	4618      	mov	r0, r3
 803f362:	3718      	adds	r7, #24
 803f364:	46bd      	mov	sp, r7
 803f366:	bd80      	pop	{r7, pc}
 803f368:	08043f98 	.word	0x08043f98
 803f36c:	200002a8 	.word	0x200002a8
 803f370:	08043f9c 	.word	0x08043f9c
 803f374:	08043fa0 	.word	0x08043fa0
 803f378:	08043fa8 	.word	0x08043fa8
 803f37c:	20008a9c 	.word	0x20008a9c

0803f380 <Simcom_IdleJob>:

SIMCOM_RESULT Simcom_IdleJob(uint8_t *iteration) {
 803f380:	b580      	push	{r7, lr}
 803f382:	b084      	sub	sp, #16
 803f384:	af00      	add	r7, sp, #0
 803f386:	6078      	str	r0, [r7, #4]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 803f388:	2300      	movs	r3, #0
 803f38a:	73fb      	strb	r3, [r7, #15]
    at_csq_t signal;

    // debug
    if (iteration != NULL) {
 803f38c:	687b      	ldr	r3, [r7, #4]
 803f38e:	2b00      	cmp	r3, #0
 803f390:	d00d      	beq.n	803f3ae <Simcom_IdleJob+0x2e>
        LOG_Str("Simcom:Iteration = ");
 803f392:	4813      	ldr	r0, [pc, #76]	; (803f3e0 <Simcom_IdleJob+0x60>)
 803f394:	f7ff f82e 	bl	803e3f4 <LOG_Str>
        LOG_Int((*iteration)++);
 803f398:	687b      	ldr	r3, [r7, #4]
 803f39a:	781b      	ldrb	r3, [r3, #0]
 803f39c:	1c5a      	adds	r2, r3, #1
 803f39e:	b2d1      	uxtb	r1, r2
 803f3a0:	687a      	ldr	r2, [r7, #4]
 803f3a2:	7011      	strb	r1, [r2, #0]
 803f3a4:	4618      	mov	r0, r3
 803f3a6:	f7fe ffb7 	bl	803e318 <LOG_Int>
        LOG_Enter();
 803f3aa:	f7fe ffa9 	bl	803e300 <LOG_Enter>
    }

    // other routines
    p = AT_SignalQualityReport(&signal);
 803f3ae:	f107 030c 	add.w	r3, r7, #12
 803f3b2:	4618      	mov	r0, r3
 803f3b4:	f7fd fda0 	bl	803cef8 <AT_SignalQualityReport>
 803f3b8:	4603      	mov	r3, r0
 803f3ba:	73fb      	strb	r3, [r7, #15]
    if (p > 0) {
 803f3bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 803f3c0:	2b00      	cmp	r3, #0
 803f3c2:	dd02      	ble.n	803f3ca <Simcom_IdleJob+0x4a>
        SIM.signal = signal.percent;
 803f3c4:	7bba      	ldrb	r2, [r7, #14]
 803f3c6:	4b07      	ldr	r3, [pc, #28]	; (803f3e4 <Simcom_IdleJob+0x64>)
 803f3c8:	741a      	strb	r2, [r3, #16]
    }
#if (!BOOTLOADER)
    p = AT_ConnectionStatusSingle(&(SIM.ip_status));
 803f3ca:	4807      	ldr	r0, [pc, #28]	; (803f3e8 <Simcom_IdleJob+0x68>)
 803f3cc:	f7fd fe42 	bl	803d054 <AT_ConnectionStatusSingle>
 803f3d0:	4603      	mov	r3, r0
 803f3d2:	73fb      	strb	r3, [r7, #15]
#endif
    return p;
 803f3d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 803f3d8:	4618      	mov	r0, r3
 803f3da:	3710      	adds	r7, #16
 803f3dc:	46bd      	mov	sp, r7
 803f3de:	bd80      	pop	{r7, pc}
 803f3e0:	08043fb4 	.word	0x08043fb4
 803f3e4:	200002a8 	.word	0x200002a8
 803f3e8:	200002b0 	.word	0x200002b0

0803f3ec <Simcom_ProcessCommando>:

/* Private functions implementation --------------------------------------------*/
#if (!BOOTLOADER)
static SIMCOM_RESULT Simcom_ProcessCommando(command_t *command) {
 803f3ec:	b5b0      	push	{r4, r5, r7, lr}
 803f3ee:	b086      	sub	sp, #24
 803f3f0:	af00      	add	r7, sp, #0
 803f3f2:	6078      	str	r0, [r7, #4]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 803f3f4:	2300      	movs	r3, #0
 803f3f6:	75fb      	strb	r3, [r7, #23]
    uint32_t crcValue;
    char *str = NULL;
 803f3f8:	2300      	movs	r3, #0
 803f3fa:	613b      	str	r3, [r7, #16]

    Simcom_Lock();
 803f3fc:	f7ff fa68 	bl	803e8d0 <Simcom_Lock>
    if (Simcom_Response(SIMCOM_RSP_IPD)) {
 803f400:	4821      	ldr	r0, [pc, #132]	; (803f488 <Simcom_ProcessCommando+0x9c>)
 803f402:	f7ff fa7f 	bl	803e904 <Simcom_Response>
 803f406:	4603      	mov	r3, r0
 803f408:	2b00      	cmp	r3, #0
 803f40a:	d035      	beq.n	803f478 <Simcom_ProcessCommando+0x8c>
        // get pointer reference
        str = Simcom_Response(PREFIX_ACK);
 803f40c:	481f      	ldr	r0, [pc, #124]	; (803f48c <Simcom_ProcessCommando+0xa0>)
 803f40e:	f7ff fa79 	bl	803e904 <Simcom_Response>
 803f412:	6138      	str	r0, [r7, #16]
        if (str) {
 803f414:	693b      	ldr	r3, [r7, #16]
 803f416:	2b00      	cmp	r3, #0
 803f418:	d007      	beq.n	803f42a <Simcom_ProcessCommando+0x3e>
            str = strstr(str + sizeof(ack_t), PREFIX_COMMAND);
 803f41a:	693b      	ldr	r3, [r7, #16]
 803f41c:	3305      	adds	r3, #5
 803f41e:	491c      	ldr	r1, [pc, #112]	; (803f490 <Simcom_ProcessCommando+0xa4>)
 803f420:	4618      	mov	r0, r3
 803f422:	f000 fb31 	bl	803fa88 <strstr>
 803f426:	6138      	str	r0, [r7, #16]
 803f428:	e003      	b.n	803f432 <Simcom_ProcessCommando+0x46>
        } else {
            str = Simcom_Response(PREFIX_COMMAND);
 803f42a:	4819      	ldr	r0, [pc, #100]	; (803f490 <Simcom_ProcessCommando+0xa4>)
 803f42c:	f7ff fa6a 	bl	803e904 <Simcom_Response>
 803f430:	6138      	str	r0, [r7, #16]
        }

        if (str != NULL) {
 803f432:	693b      	ldr	r3, [r7, #16]
 803f434:	2b00      	cmp	r3, #0
 803f436:	d01f      	beq.n	803f478 <Simcom_ProcessCommando+0x8c>
            // copy the whole value (any time the buffer can change)
            *command = *(command_t*) str;
 803f438:	687b      	ldr	r3, [r7, #4]
 803f43a:	693a      	ldr	r2, [r7, #16]
 803f43c:	6815      	ldr	r5, [r2, #0]
 803f43e:	6854      	ldr	r4, [r2, #4]
 803f440:	6890      	ldr	r0, [r2, #8]
 803f442:	68d1      	ldr	r1, [r2, #12]
 803f444:	601d      	str	r5, [r3, #0]
 803f446:	605c      	str	r4, [r3, #4]
 803f448:	6098      	str	r0, [r3, #8]
 803f44a:	60d9      	str	r1, [r3, #12]
 803f44c:	7c12      	ldrb	r2, [r2, #16]
 803f44e:	741a      	strb	r2, [r3, #16]

            // check the Size
            if (command->header.size == sizeof(command->data)) {
 803f450:	687b      	ldr	r3, [r7, #4]
 803f452:	799b      	ldrb	r3, [r3, #6]
 803f454:	2b0a      	cmp	r3, #10
 803f456:	d10f      	bne.n	803f478 <Simcom_ProcessCommando+0x8c>
                // calculate the CRC
                crcValue = CRC_Calculate8(
 803f458:	687b      	ldr	r3, [r7, #4]
 803f45a:	3306      	adds	r3, #6
 803f45c:	2200      	movs	r2, #0
 803f45e:	210b      	movs	r1, #11
 803f460:	4618      	mov	r0, r3
 803f462:	f7fe fe2f 	bl	803e0c4 <CRC_Calculate8>
 803f466:	60f8      	str	r0, [r7, #12]
                        (uint8_t*) &(command->header.size),
                        sizeof(command->header.size) + sizeof(command->data),
                        0);

                // check the CRC
                if (command->header.crc == crcValue) {
 803f468:	687b      	ldr	r3, [r7, #4]
 803f46a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 803f46e:	68fa      	ldr	r2, [r7, #12]
 803f470:	429a      	cmp	r2, r3
 803f472:	d101      	bne.n	803f478 <Simcom_ProcessCommando+0x8c>
                    p = SIM_RESULT_OK;
 803f474:	2301      	movs	r3, #1
 803f476:	75fb      	strb	r3, [r7, #23]
                }
            }
        }
    }
    Simcom_Unlock();
 803f478:	f7ff fa38 	bl	803e8ec <Simcom_Unlock>

    return p;
 803f47c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 803f480:	4618      	mov	r0, r3
 803f482:	3718      	adds	r7, #24
 803f484:	46bd      	mov	sp, r7
 803f486:	bdb0      	pop	{r4, r5, r7, pc}
 803f488:	08043fc8 	.word	0x08043fc8
 803f48c:	08043f8c 	.word	0x08043f8c
 803f490:	08043f94 	.word	0x08043f94

0803f494 <Simcom_ProcessACK>:

static SIMCOM_RESULT Simcom_ProcessACK(header_t *header) {
 803f494:	b580      	push	{r7, lr}
 803f496:	b086      	sub	sp, #24
 803f498:	af00      	add	r7, sp, #0
 803f49a:	6078      	str	r0, [r7, #4]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 803f49c:	2300      	movs	r3, #0
 803f49e:	75fb      	strb	r3, [r7, #23]
    ack_t ack;
    char *str = NULL;
 803f4a0:	2300      	movs	r3, #0
 803f4a2:	613b      	str	r3, [r7, #16]

    Simcom_Lock();
 803f4a4:	f7ff fa14 	bl	803e8d0 <Simcom_Lock>
    if (Simcom_Response(SIMCOM_RSP_IPD)) {
 803f4a8:	4815      	ldr	r0, [pc, #84]	; (803f500 <Simcom_ProcessACK+0x6c>)
 803f4aa:	f7ff fa2b 	bl	803e904 <Simcom_Response>
 803f4ae:	4603      	mov	r3, r0
 803f4b0:	2b00      	cmp	r3, #0
 803f4b2:	d01c      	beq.n	803f4ee <Simcom_ProcessACK+0x5a>
        // parse ACK
        str = Simcom_Response(PREFIX_ACK);
 803f4b4:	4813      	ldr	r0, [pc, #76]	; (803f504 <Simcom_ProcessACK+0x70>)
 803f4b6:	f7ff fa25 	bl	803e904 <Simcom_Response>
 803f4ba:	6138      	str	r0, [r7, #16]
        if (str != NULL) {
 803f4bc:	693b      	ldr	r3, [r7, #16]
 803f4be:	2b00      	cmp	r3, #0
 803f4c0:	d015      	beq.n	803f4ee <Simcom_ProcessACK+0x5a>
            ack = *(ack_t*) str;
 803f4c2:	693a      	ldr	r2, [r7, #16]
 803f4c4:	f107 0308 	add.w	r3, r7, #8
 803f4c8:	6810      	ldr	r0, [r2, #0]
 803f4ca:	6018      	str	r0, [r3, #0]
 803f4cc:	7912      	ldrb	r2, [r2, #4]
 803f4ce:	711a      	strb	r2, [r3, #4]

            // validate the value
            if (header->frame_id == ack.frame_id &&
 803f4d0:	687b      	ldr	r3, [r7, #4]
 803f4d2:	79da      	ldrb	r2, [r3, #7]
 803f4d4:	7abb      	ldrb	r3, [r7, #10]
 803f4d6:	429a      	cmp	r2, r3
 803f4d8:	d109      	bne.n	803f4ee <Simcom_ProcessACK+0x5a>
                    header->seq_id == ack.seq_id) {
 803f4da:	687b      	ldr	r3, [r7, #4]
 803f4dc:	899b      	ldrh	r3, [r3, #12]
 803f4de:	b29a      	uxth	r2, r3
 803f4e0:	f8b7 300b 	ldrh.w	r3, [r7, #11]
 803f4e4:	b29b      	uxth	r3, r3
            if (header->frame_id == ack.frame_id &&
 803f4e6:	429a      	cmp	r2, r3
 803f4e8:	d101      	bne.n	803f4ee <Simcom_ProcessACK+0x5a>
                p = SIM_RESULT_OK;
 803f4ea:	2301      	movs	r3, #1
 803f4ec:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    Simcom_Unlock();
 803f4ee:	f7ff f9fd 	bl	803e8ec <Simcom_Unlock>
    return p;
 803f4f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 803f4f6:	4618      	mov	r0, r3
 803f4f8:	3718      	adds	r7, #24
 803f4fa:	46bd      	mov	sp, r7
 803f4fc:	bd80      	pop	{r7, pc}
 803f4fe:	bf00      	nop
 803f500:	08043fc8 	.word	0x08043fc8
 803f504:	08043f8c 	.word	0x08043f8c

0803f508 <Simcom_CommandoIRQ>:

static uint8_t Simcom_CommandoIRQ(void) {
 803f508:	b580      	push	{r7, lr}
 803f50a:	af00      	add	r7, sp, #0
    return Simcom_Response(PREFIX_COMMAND) != NULL;
 803f50c:	4805      	ldr	r0, [pc, #20]	; (803f524 <Simcom_CommandoIRQ+0x1c>)
 803f50e:	f7ff f9f9 	bl	803e904 <Simcom_Response>
 803f512:	4603      	mov	r3, r0
 803f514:	2b00      	cmp	r3, #0
 803f516:	bf14      	ite	ne
 803f518:	2301      	movne	r3, #1
 803f51a:	2300      	moveq	r3, #0
 803f51c:	b2db      	uxtb	r3, r3
}
 803f51e:	4618      	mov	r0, r3
 803f520:	bd80      	pop	{r7, pc}
 803f522:	bf00      	nop
 803f524:	08043f94 	.word	0x08043f94

0803f528 <Simcom_Ready>:
#endif

static SIMCOM_RESULT Simcom_Ready(void) {
 803f528:	b580      	push	{r7, lr}
 803f52a:	b082      	sub	sp, #8
 803f52c:	af00      	add	r7, sp, #0
    uint32_t tick;

#if (!BOOTLOADER)
    // save event
    VCU.SetEvent(EV_VCU_NETWORK_RESTART, 1);
 803f52e:	4b1a      	ldr	r3, [pc, #104]	; (803f598 <Simcom_Ready+0x70>)
 803f530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 803f532:	2201      	movs	r2, #1
 803f534:	f04f 0001 	mov.w	r0, #1
 803f538:	f04f 0100 	mov.w	r1, #0
 803f53c:	4798      	blx	r3
#endif

    // wait until 1s response
    tick = _GetTickMS();
 803f53e:	f000 f94a 	bl	803f7d6 <_GetTickMS>
 803f542:	6078      	str	r0, [r7, #4]
    while (SIM.state == SIM_STATE_DOWN) {
 803f544:	e016      	b.n	803f574 <Simcom_Ready+0x4c>
        if (Simcom_Response(SIMCOM_RSP_READY)
 803f546:	4815      	ldr	r0, [pc, #84]	; (803f59c <Simcom_Ready+0x74>)
 803f548:	f7ff f9dc 	bl	803e904 <Simcom_Response>
 803f54c:	4603      	mov	r3, r0
 803f54e:	2b00      	cmp	r3, #0
 803f550:	d116      	bne.n	803f580 <Simcom_Ready+0x58>
                || Simcom_Response(SIMCOM_RSP_OK)
 803f552:	4813      	ldr	r0, [pc, #76]	; (803f5a0 <Simcom_Ready+0x78>)
 803f554:	f7ff f9d6 	bl	803e904 <Simcom_Response>
 803f558:	4603      	mov	r3, r0
 803f55a:	2b00      	cmp	r3, #0
 803f55c:	d110      	bne.n	803f580 <Simcom_Ready+0x58>
                || (_GetTickMS() - tick) >= NET_BOOT_TIMEOUT) {
 803f55e:	f000 f93a 	bl	803f7d6 <_GetTickMS>
 803f562:	4602      	mov	r2, r0
 803f564:	687b      	ldr	r3, [r7, #4]
 803f566:	1ad3      	subs	r3, r2, r3
 803f568:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 803f56c:	d208      	bcs.n	803f580 <Simcom_Ready+0x58>
            break;
        }
        _DelayMS(1);
 803f56e:	2001      	movs	r0, #1
 803f570:	f000 f926 	bl	803f7c0 <_DelayMS>
    while (SIM.state == SIM_STATE_DOWN) {
 803f574:	4b0b      	ldr	r3, [pc, #44]	; (803f5a4 <Simcom_Ready+0x7c>)
 803f576:	f993 3000 	ldrsb.w	r3, [r3]
 803f57a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 803f57e:	d0e2      	beq.n	803f546 <Simcom_Ready+0x1e>
    }

    // check
    return Simcom_Command(SIMCOM_CMD_BOOT, SIMCOM_RSP_READY, 1000, 0);
 803f580:	2300      	movs	r3, #0
 803f582:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 803f586:	4905      	ldr	r1, [pc, #20]	; (803f59c <Simcom_Ready+0x74>)
 803f588:	4807      	ldr	r0, [pc, #28]	; (803f5a8 <Simcom_Ready+0x80>)
 803f58a:	f7ff fe8d 	bl	803f2a8 <Simcom_Command>
 803f58e:	4603      	mov	r3, r0
}
 803f590:	4618      	mov	r0, r3
 803f592:	3708      	adds	r7, #8
 803f594:	46bd      	mov	sp, r7
 803f596:	bd80      	pop	{r7, pc}
 803f598:	20000228 	.word	0x20000228
 803f59c:	08043fd0 	.word	0x08043fd0
 803f5a0:	08043f98 	.word	0x08043f98
 803f5a4:	200002a8 	.word	0x200002a8
 803f5a8:	08043f9c 	.word	0x08043f9c

0803f5ac <Simcom_Power>:

static SIMCOM_RESULT Simcom_Power(void) {
 803f5ac:	b580      	push	{r7, lr}
 803f5ae:	af00      	add	r7, sp, #0
    LOG_StrLn("Simcom:Powered");
 803f5b0:	4814      	ldr	r0, [pc, #80]	; (803f604 <Simcom_Power+0x58>)
 803f5b2:	f7fe ff37 	bl	803e424 <LOG_StrLn>
    // reset buffer
    SIMCOM_Reset_Buffer();
 803f5b6:	f7fd fc4d 	bl	803ce54 <SIMCOM_Reset_Buffer>

    // power control
    HAL_GPIO_WritePin(INT_NET_PWR_GPIO_Port, INT_NET_PWR_Pin, 0);
 803f5ba:	2200      	movs	r2, #0
 803f5bc:	2101      	movs	r1, #1
 803f5be:	4812      	ldr	r0, [pc, #72]	; (803f608 <Simcom_Power+0x5c>)
 803f5c0:	f7f0 fd34 	bl	803002c <HAL_GPIO_WritePin>
    _DelayMS(100);
 803f5c4:	2064      	movs	r0, #100	; 0x64
 803f5c6:	f000 f8fb 	bl	803f7c0 <_DelayMS>
    HAL_GPIO_WritePin(INT_NET_PWR_GPIO_Port, INT_NET_PWR_Pin, 1);
 803f5ca:	2201      	movs	r2, #1
 803f5cc:	2101      	movs	r1, #1
 803f5ce:	480e      	ldr	r0, [pc, #56]	; (803f608 <Simcom_Power+0x5c>)
 803f5d0:	f7f0 fd2c 	bl	803002c <HAL_GPIO_WritePin>
    _DelayMS(1000);
 803f5d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 803f5d8:	f000 f8f2 	bl	803f7c0 <_DelayMS>

    // simcom reset pin
    HAL_GPIO_WritePin(INT_NET_RST_GPIO_Port, INT_NET_RST_Pin, 1);
 803f5dc:	2201      	movs	r2, #1
 803f5de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 803f5e2:	480a      	ldr	r0, [pc, #40]	; (803f60c <Simcom_Power+0x60>)
 803f5e4:	f7f0 fd22 	bl	803002c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 803f5e8:	2001      	movs	r0, #1
 803f5ea:	f7ec fe39 	bl	802c260 <HAL_Delay>
    HAL_GPIO_WritePin(INT_NET_RST_GPIO_Port, INT_NET_RST_Pin, 0);
 803f5ee:	2200      	movs	r2, #0
 803f5f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 803f5f4:	4805      	ldr	r0, [pc, #20]	; (803f60c <Simcom_Power+0x60>)
 803f5f6:	f7f0 fd19 	bl	803002c <HAL_GPIO_WritePin>

    // wait response
    return Simcom_Ready();
 803f5fa:	f7ff ff95 	bl	803f528 <Simcom_Ready>
 803f5fe:	4603      	mov	r3, r0
}
 803f600:	4618      	mov	r0, r3
 803f602:	bd80      	pop	{r7, pc}
 803f604:	08043fd4 	.word	0x08043fd4
 803f608:	40020800 	.word	0x40020800
 803f60c:	40020400 	.word	0x40020400

0803f610 <Simcom_Sleep>:

static void Simcom_Sleep(uint8_t state) {
 803f610:	b580      	push	{r7, lr}
 803f612:	b082      	sub	sp, #8
 803f614:	af00      	add	r7, sp, #0
 803f616:	4603      	mov	r3, r0
 803f618:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(INT_NET_DTR_GPIO_Port, INT_NET_DTR_Pin, state);
 803f61a:	79fb      	ldrb	r3, [r7, #7]
 803f61c:	461a      	mov	r2, r3
 803f61e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 803f622:	4805      	ldr	r0, [pc, #20]	; (803f638 <Simcom_Sleep+0x28>)
 803f624:	f7f0 fd02 	bl	803002c <HAL_GPIO_WritePin>
    _DelayMS(50);
 803f628:	2032      	movs	r0, #50	; 0x32
 803f62a:	f000 f8c9 	bl	803f7c0 <_DelayMS>
}
 803f62e:	bf00      	nop
 803f630:	3708      	adds	r7, #8
 803f632:	46bd      	mov	sp, r7
 803f634:	bd80      	pop	{r7, pc}
 803f636:	bf00      	nop
 803f638:	40020400 	.word	0x40020400

0803f63c <Simcom_Execute>:

static SIMCOM_RESULT Simcom_Execute(char *data, uint16_t size, uint32_t ms, char *res) {
 803f63c:	b580      	push	{r7, lr}
 803f63e:	b088      	sub	sp, #32
 803f640:	af00      	add	r7, sp, #0
 803f642:	60f8      	str	r0, [r7, #12]
 803f644:	607a      	str	r2, [r7, #4]
 803f646:	603b      	str	r3, [r7, #0]
 803f648:	460b      	mov	r3, r1
 803f64a:	817b      	strh	r3, [r7, #10]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 803f64c:	2300      	movs	r3, #0
 803f64e:	77fb      	strb	r3, [r7, #31]
    uint32_t tick, timeout = 0;
 803f650:	2300      	movs	r3, #0
 803f652:	61bb      	str	r3, [r7, #24]

    Simcom_Lock();
 803f654:	f7ff f93c 	bl	803e8d0 <Simcom_Lock>
    // wake-up the SIMCOM
    Simcom_Sleep(0);
 803f658:	2000      	movs	r0, #0
 803f65a:	f7ff ffd9 	bl	803f610 <Simcom_Sleep>

    // transmit to serial (low-level)
    Simcom_BeforeTransmitHook();
 803f65e:	f000 f897 	bl	803f790 <Simcom_BeforeTransmitHook>
    SIMCOM_Transmit(data, size);
 803f662:	897b      	ldrh	r3, [r7, #10]
 803f664:	4619      	mov	r1, r3
 803f666:	68f8      	ldr	r0, [r7, #12]
 803f668:	f7fd fc06 	bl	803ce78 <SIMCOM_Transmit>

    // convert time to tick
    timeout = (ms + NET_EXTRA_TIME );
 803f66c:	687b      	ldr	r3, [r7, #4]
 803f66e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 803f672:	61bb      	str	r3, [r7, #24]
    // set timeout guard
    tick = _GetTickMS();
 803f674:	f000 f8af 	bl	803f7d6 <_GetTickMS>
 803f678:	6178      	str	r0, [r7, #20]

    // wait response from SIMCOM
    while (1) {
        if (Simcom_Response(res)
 803f67a:	6838      	ldr	r0, [r7, #0]
 803f67c:	f7ff f942 	bl	803e904 <Simcom_Response>
 803f680:	4603      	mov	r3, r0
 803f682:	2b00      	cmp	r3, #0
 803f684:	d118      	bne.n	803f6b8 <Simcom_Execute+0x7c>
                || Simcom_Response(SIMCOM_RSP_ERROR)
 803f686:	483a      	ldr	r0, [pc, #232]	; (803f770 <Simcom_Execute+0x134>)
 803f688:	f7ff f93c 	bl	803e904 <Simcom_Response>
 803f68c:	4603      	mov	r3, r0
 803f68e:	2b00      	cmp	r3, #0
 803f690:	d112      	bne.n	803f6b8 <Simcom_Execute+0x7c>
                || Simcom_Response(SIMCOM_RSP_READY)
 803f692:	4838      	ldr	r0, [pc, #224]	; (803f774 <Simcom_Execute+0x138>)
 803f694:	f7ff f936 	bl	803e904 <Simcom_Response>
 803f698:	4603      	mov	r3, r0
 803f69a:	2b00      	cmp	r3, #0
 803f69c:	d10c      	bne.n	803f6b8 <Simcom_Execute+0x7c>
                #if (!BOOTLOADER)
                || Simcom_CommandoIRQ()
 803f69e:	f7ff ff33 	bl	803f508 <Simcom_CommandoIRQ>
 803f6a2:	4603      	mov	r3, r0
 803f6a4:	2b00      	cmp	r3, #0
 803f6a6:	d107      	bne.n	803f6b8 <Simcom_Execute+0x7c>
                #endif
                || (_GetTickMS() - tick) >= timeout) {
 803f6a8:	f000 f895 	bl	803f7d6 <_GetTickMS>
 803f6ac:	4602      	mov	r2, r0
 803f6ae:	697b      	ldr	r3, [r7, #20]
 803f6b0:	1ad3      	subs	r3, r2, r3
 803f6b2:	69ba      	ldr	r2, [r7, #24]
 803f6b4:	429a      	cmp	r2, r3
 803f6b6:	d84a      	bhi.n	803f74e <Simcom_Execute+0x112>

            // check response
            if (Simcom_Response(res)) {
 803f6b8:	6838      	ldr	r0, [r7, #0]
 803f6ba:	f7ff f923 	bl	803e904 <Simcom_Response>
 803f6be:	4603      	mov	r3, r0
 803f6c0:	2b00      	cmp	r3, #0
 803f6c2:	d001      	beq.n	803f6c8 <Simcom_Execute+0x8c>
                p = SIM_RESULT_OK;
 803f6c4:	2301      	movs	r3, #1
 803f6c6:	77fb      	strb	r3, [r7, #31]
            }

            // Handle failure
            if (p != SIM_RESULT_OK) {
 803f6c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 803f6cc:	2b01      	cmp	r3, #1
 803f6ce:	d042      	beq.n	803f756 <Simcom_Execute+0x11a>
                // exception for no response
                if (strlen(SIMCOM_UART_RX) == 0) {
 803f6d0:	4b29      	ldr	r3, [pc, #164]	; (803f778 <Simcom_Execute+0x13c>)
 803f6d2:	781b      	ldrb	r3, [r3, #0]
 803f6d4:	2b00      	cmp	r3, #0
 803f6d6:	d108      	bne.n	803f6ea <Simcom_Execute+0xae>
                    p = SIM_RESULT_NO_RESPONSE;
 803f6d8:	23fe      	movs	r3, #254	; 0xfe
 803f6da:	77fb      	strb	r3, [r7, #31]
                    SIM.state = SIM_STATE_DOWN;
 803f6dc:	4b27      	ldr	r3, [pc, #156]	; (803f77c <Simcom_Execute+0x140>)
 803f6de:	22ff      	movs	r2, #255	; 0xff
 803f6e0:	701a      	strb	r2, [r3, #0]
                    LOG_StrLn("Simcom:NoResponse");
 803f6e2:	4827      	ldr	r0, [pc, #156]	; (803f780 <Simcom_Execute+0x144>)
 803f6e4:	f7fe fe9e 	bl	803e424 <LOG_StrLn>
                    }
                }
            }

            // exit loop
            break;
 803f6e8:	e035      	b.n	803f756 <Simcom_Execute+0x11a>
                else if (Simcom_CommandoIRQ()) {
 803f6ea:	f7ff ff0d 	bl	803f508 <Simcom_CommandoIRQ>
 803f6ee:	4603      	mov	r3, r0
 803f6f0:	2b00      	cmp	r3, #0
 803f6f2:	d002      	beq.n	803f6fa <Simcom_Execute+0xbe>
                    p = SIM_RESULT_TIMEOUT;
 803f6f4:	23ff      	movs	r3, #255	; 0xff
 803f6f6:	77fb      	strb	r3, [r7, #31]
            break;
 803f6f8:	e02d      	b.n	803f756 <Simcom_Execute+0x11a>
                    if (Simcom_Response(SIMCOM_RSP_READY) && (SIM.state >= SIM_STATE_READY)) {
 803f6fa:	481e      	ldr	r0, [pc, #120]	; (803f774 <Simcom_Execute+0x138>)
 803f6fc:	f7ff f902 	bl	803e904 <Simcom_Response>
 803f700:	4603      	mov	r3, r0
 803f702:	2b00      	cmp	r3, #0
 803f704:	d015      	beq.n	803f732 <Simcom_Execute+0xf6>
 803f706:	4b1d      	ldr	r3, [pc, #116]	; (803f77c <Simcom_Execute+0x140>)
 803f708:	f993 3000 	ldrsb.w	r3, [r3]
 803f70c:	2b00      	cmp	r3, #0
 803f70e:	db10      	blt.n	803f732 <Simcom_Execute+0xf6>
                        LOG_StrLn("Simcom:Restarted");
 803f710:	481c      	ldr	r0, [pc, #112]	; (803f784 <Simcom_Execute+0x148>)
 803f712:	f7fe fe87 	bl	803e424 <LOG_StrLn>
                        p = SIM_RESULT_RESTARTED;
 803f716:	23fd      	movs	r3, #253	; 0xfd
 803f718:	77fb      	strb	r3, [r7, #31]
                        SIM.state = SIM_STATE_READY;
 803f71a:	4b18      	ldr	r3, [pc, #96]	; (803f77c <Simcom_Execute+0x140>)
 803f71c:	2200      	movs	r2, #0
 803f71e:	701a      	strb	r2, [r3, #0]
                        VCU.SetEvent(EV_VCU_NETWORK_RESTART, 1);
 803f720:	4b19      	ldr	r3, [pc, #100]	; (803f788 <Simcom_Execute+0x14c>)
 803f722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 803f724:	2201      	movs	r2, #1
 803f726:	f04f 0001 	mov.w	r0, #1
 803f72a:	f04f 0100 	mov.w	r1, #0
 803f72e:	4798      	blx	r3
            break;
 803f730:	e011      	b.n	803f756 <Simcom_Execute+0x11a>
                    else if ((_GetTickMS() - tick) >= timeout) {
 803f732:	f000 f850 	bl	803f7d6 <_GetTickMS>
 803f736:	4602      	mov	r2, r0
 803f738:	697b      	ldr	r3, [r7, #20]
 803f73a:	1ad3      	subs	r3, r2, r3
 803f73c:	69ba      	ldr	r2, [r7, #24]
 803f73e:	429a      	cmp	r2, r3
 803f740:	d809      	bhi.n	803f756 <Simcom_Execute+0x11a>
                        LOG_StrLn("Simcom:Timeout");
 803f742:	4812      	ldr	r0, [pc, #72]	; (803f78c <Simcom_Execute+0x150>)
 803f744:	f7fe fe6e 	bl	803e424 <LOG_StrLn>
                        p = SIM_RESULT_TIMEOUT;
 803f748:	23ff      	movs	r3, #255	; 0xff
 803f74a:	77fb      	strb	r3, [r7, #31]
            break;
 803f74c:	e003      	b.n	803f756 <Simcom_Execute+0x11a>
        }
        _DelayMS(10);
 803f74e:	200a      	movs	r0, #10
 803f750:	f000 f836 	bl	803f7c0 <_DelayMS>
        if (Simcom_Response(res)
 803f754:	e791      	b.n	803f67a <Simcom_Execute+0x3e>
            break;
 803f756:	bf00      	nop
    }

    // sleep the SIMCOM
    Simcom_Sleep(1);
 803f758:	2001      	movs	r0, #1
 803f75a:	f7ff ff59 	bl	803f610 <Simcom_Sleep>
    Simcom_Unlock();
 803f75e:	f7ff f8c5 	bl	803e8ec <Simcom_Unlock>
    return p;
 803f762:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 803f766:	4618      	mov	r0, r3
 803f768:	3720      	adds	r7, #32
 803f76a:	46bd      	mov	sp, r7
 803f76c:	bd80      	pop	{r7, pc}
 803f76e:	bf00      	nop
 803f770:	08043fe4 	.word	0x08043fe4
 803f774:	08043fd0 	.word	0x08043fd0
 803f778:	20008a9c 	.word	0x20008a9c
 803f77c:	200002a8 	.word	0x200002a8
 803f780:	08043fec 	.word	0x08043fec
 803f784:	08044000 	.word	0x08044000
 803f788:	20000228 	.word	0x20000228
 803f78c:	08044014 	.word	0x08044014

0803f790 <Simcom_BeforeTransmitHook>:

static void Simcom_BeforeTransmitHook(void) {
 803f790:	b580      	push	{r7, lr}
 803f792:	b086      	sub	sp, #24
 803f794:	af00      	add	r7, sp, #0
#if (!BOOTLOADER)
    command_t hCommand;
    // handle Commando (if any)
    if (Simcom_ProcessCommando(&hCommand)) {
 803f796:	1d3b      	adds	r3, r7, #4
 803f798:	4618      	mov	r0, r3
 803f79a:	f7ff fe27 	bl	803f3ec <Simcom_ProcessCommando>
 803f79e:	4603      	mov	r3, r0
 803f7a0:	2b00      	cmp	r3, #0
 803f7a2:	d006      	beq.n	803f7b2 <Simcom_BeforeTransmitHook+0x22>
        osMessageQueuePut(CommandQueueHandle, &hCommand, 0U, 0U);
 803f7a4:	4b05      	ldr	r3, [pc, #20]	; (803f7bc <Simcom_BeforeTransmitHook+0x2c>)
 803f7a6:	6818      	ldr	r0, [r3, #0]
 803f7a8:	1d39      	adds	r1, r7, #4
 803f7aa:	2300      	movs	r3, #0
 803f7ac:	2200      	movs	r2, #0
 803f7ae:	f7f8 fbef 	bl	8037f90 <osMessageQueuePut>
    //  LOG_StrLn("============ SIMCOM DEBUG ============");
    //  LOG_Buf(SIMCOM_UART_RX, strlen(SIMCOM_UART_RX));
    //  LOG_Enter();
    //  LOG_StrLn("======================================");

}
 803f7b2:	bf00      	nop
 803f7b4:	3718      	adds	r7, #24
 803f7b6:	46bd      	mov	sp, r7
 803f7b8:	bd80      	pop	{r7, pc}
 803f7ba:	bf00      	nop
 803f7bc:	2000895c 	.word	0x2000895c

0803f7c0 <_DelayMS>:
extern vcu_t VCU;
extern sw_t SW;
#endif

/* Public functions implementation --------------------------------------------*/
void _DelayMS(uint32_t ms) {
 803f7c0:	b580      	push	{r7, lr}
 803f7c2:	b082      	sub	sp, #8
 803f7c4:	af00      	add	r7, sp, #0
 803f7c6:	6078      	str	r0, [r7, #4]
#if RTOS_ENABLE
    osDelay(ms);
 803f7c8:	6878      	ldr	r0, [r7, #4]
 803f7ca:	f7f8 f885 	bl	80378d8 <osDelay>
#else
    HAL_Delay(ms);
#endif
}
 803f7ce:	bf00      	nop
 803f7d0:	3708      	adds	r7, #8
 803f7d2:	46bd      	mov	sp, r7
 803f7d4:	bd80      	pop	{r7, pc}

0803f7d6 <_GetTickMS>:

uint32_t _GetTickMS(void) {
 803f7d6:	b580      	push	{r7, lr}
 803f7d8:	af00      	add	r7, sp, #0
#if RTOS_ENABLE
    return osKernelGetTickCount();
 803f7da:	f7f7 fe69 	bl	80374b0 <osKernelGetTickCount>
 803f7de:	4603      	mov	r3, r0
#else
    return HAL_GetTick();
#endif
}
 803f7e0:	4618      	mov	r0, r3
 803f7e2:	bd80      	pop	{r7, pc}

0803f7e4 <_LedWrite>:

uint8_t _LedRead(void) {
    return HAL_GPIO_ReadPin(SYS_LED_GPIO_Port, SYS_LED_Pin);
}

void _LedWrite(uint8_t state) {
 803f7e4:	b580      	push	{r7, lr}
 803f7e6:	b082      	sub	sp, #8
 803f7e8:	af00      	add	r7, sp, #0
 803f7ea:	4603      	mov	r3, r0
 803f7ec:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SYS_LED_GPIO_Port, SYS_LED_Pin, state);
 803f7ee:	79fb      	ldrb	r3, [r7, #7]
 803f7f0:	461a      	mov	r2, r3
 803f7f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 803f7f6:	4803      	ldr	r0, [pc, #12]	; (803f804 <_LedWrite+0x20>)
 803f7f8:	f7f0 fc18 	bl	803002c <HAL_GPIO_WritePin>
}
 803f7fc:	bf00      	nop
 803f7fe:	3708      	adds	r7, #8
 803f800:	46bd      	mov	sp, r7
 803f802:	bd80      	pop	{r7, pc}
 803f804:	40020c00 	.word	0x40020c00

0803f808 <_LedToggle>:

void _LedToggle(void) {
 803f808:	b580      	push	{r7, lr}
 803f80a:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(SYS_LED_GPIO_Port, SYS_LED_Pin);
 803f80c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 803f810:	4802      	ldr	r0, [pc, #8]	; (803f81c <_LedToggle+0x14>)
 803f812:	f7f0 fc24 	bl	803005e <HAL_GPIO_TogglePin>
}
 803f816:	bf00      	nop
 803f818:	bd80      	pop	{r7, pc}
 803f81a:	bf00      	nop
 803f81c:	40020c00 	.word	0x40020c00

0803f820 <_Error>:

void _Error(char msg[50]) {
 803f820:	b580      	push	{r7, lr}
 803f822:	b082      	sub	sp, #8
 803f824:	af00      	add	r7, sp, #0
 803f826:	6078      	str	r0, [r7, #4]
#if RTOS_ENABLE
    if (osKernelGetState() == osKernelRunning) {
 803f828:	f7f7 fdea 	bl	8037400 <osKernelGetState>
 803f82c:	4603      	mov	r3, r0
 803f82e:	2b02      	cmp	r3, #2
 803f830:	d102      	bne.n	803f838 <_Error+0x18>
        LOG_StrLn(msg);
 803f832:	6878      	ldr	r0, [r7, #4]
 803f834:	f7fe fdf6 	bl	803e424 <LOG_StrLn>
    LOG_StrLn(msg);
#endif

    // indicator error
    while (1) {
        _LedToggle();
 803f838:	f7ff ffe6 	bl	803f808 <_LedToggle>
        HAL_Delay(50);
 803f83c:	2032      	movs	r0, #50	; 0x32
 803f83e:	f7ec fd0f 	bl	802c260 <HAL_Delay>
        _LedToggle();
 803f842:	e7f9      	b.n	803f838 <_Error+0x18>

0803f844 <_ByteSwap32>:
    }
}

uint32_t _ByteSwap32(uint32_t x) {
 803f844:	b480      	push	{r7}
 803f846:	b085      	sub	sp, #20
 803f848:	af00      	add	r7, sp, #0
 803f84a:	6078      	str	r0, [r7, #4]
    uint32_t y = (x >> 24) & 0xff;
 803f84c:	687b      	ldr	r3, [r7, #4]
 803f84e:	0e1b      	lsrs	r3, r3, #24
 803f850:	60fb      	str	r3, [r7, #12]
    y |= ((x >> 16) & 0xff) << 8;
 803f852:	687b      	ldr	r3, [r7, #4]
 803f854:	0c1b      	lsrs	r3, r3, #16
 803f856:	021b      	lsls	r3, r3, #8
 803f858:	b29b      	uxth	r3, r3
 803f85a:	68fa      	ldr	r2, [r7, #12]
 803f85c:	4313      	orrs	r3, r2
 803f85e:	60fb      	str	r3, [r7, #12]
    y |= ((x >> 8) & 0xff) << 16;
 803f860:	687b      	ldr	r3, [r7, #4]
 803f862:	0a1b      	lsrs	r3, r3, #8
 803f864:	041b      	lsls	r3, r3, #16
 803f866:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 803f86a:	68fa      	ldr	r2, [r7, #12]
 803f86c:	4313      	orrs	r3, r2
 803f86e:	60fb      	str	r3, [r7, #12]
    y |= (x & 0xff) << 24;
 803f870:	687b      	ldr	r3, [r7, #4]
 803f872:	061b      	lsls	r3, r3, #24
 803f874:	68fa      	ldr	r2, [r7, #12]
 803f876:	4313      	orrs	r3, r2
 803f878:	60fb      	str	r3, [r7, #12]

    return y;
 803f87a:	68fb      	ldr	r3, [r7, #12]
}
 803f87c:	4618      	mov	r0, r3
 803f87e:	3714      	adds	r7, #20
 803f880:	46bd      	mov	sp, r7
 803f882:	f85d 7b04 	ldr.w	r7, [sp], #4
 803f886:	4770      	bx	lr

0803f888 <_RTOS_ValidThreadFlag>:
        }
        LOG_StrLn("===========================================");
    }
}

uint8_t _RTOS_ValidThreadFlag(uint32_t flag) {
 803f888:	b480      	push	{r7}
 803f88a:	b085      	sub	sp, #20
 803f88c:	af00      	add	r7, sp, #0
 803f88e:	6078      	str	r0, [r7, #4]
    uint8_t ret = 1;
 803f890:	2301      	movs	r3, #1
 803f892:	73fb      	strb	r3, [r7, #15]

    // check is empty
    if (!flag) {
 803f894:	687b      	ldr	r3, [r7, #4]
 803f896:	2b00      	cmp	r3, #0
 803f898:	d102      	bne.n	803f8a0 <_RTOS_ValidThreadFlag+0x18>
        ret = 0;
 803f89a:	2300      	movs	r3, #0
 803f89c:	73fb      	strb	r3, [r7, #15]
 803f89e:	e004      	b.n	803f8aa <_RTOS_ValidThreadFlag+0x22>
    } else if (flag & (~EVT_MASK )) {
 803f8a0:	687b      	ldr	r3, [r7, #4]
 803f8a2:	2b00      	cmp	r3, #0
 803f8a4:	da01      	bge.n	803f8aa <_RTOS_ValidThreadFlag+0x22>
        // error
        ret = 0;
 803f8a6:	2300      	movs	r3, #0
 803f8a8:	73fb      	strb	r3, [r7, #15]
    }

    return ret;
 803f8aa:	7bfb      	ldrb	r3, [r7, #15]
}
 803f8ac:	4618      	mov	r0, r3
 803f8ae:	3714      	adds	r7, #20
 803f8b0:	46bd      	mov	sp, r7
 803f8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 803f8b6:	4770      	bx	lr

0803f8b8 <_DummyGenerator>:
    }

    return ret;
}

void _DummyGenerator(void) {
 803f8b8:	b480      	push	{r7}
 803f8ba:	b083      	sub	sp, #12
 803f8bc:	af00      	add	r7, sp, #0
    uint8_t *pRange = &(SW.runner.mode.sub.report[SW_M_REPORT_RANGE]);
 803f8be:	4b13      	ldr	r3, [pc, #76]	; (803f90c <_DummyGenerator+0x54>)
 803f8c0:	607b      	str	r3, [r7, #4]
    uint8_t *pEfficiency = &(SW.runner.mode.sub.report[SW_M_REPORT_EFFICIENCY]);
 803f8c2:	4b13      	ldr	r3, [pc, #76]	; (803f910 <_DummyGenerator+0x58>)
 803f8c4:	603b      	str	r3, [r7, #0]

    // Dummy Report Range
    if (!(*pRange)) {
 803f8c6:	687b      	ldr	r3, [r7, #4]
 803f8c8:	781b      	ldrb	r3, [r3, #0]
 803f8ca:	2b00      	cmp	r3, #0
 803f8cc:	d103      	bne.n	803f8d6 <_DummyGenerator+0x1e>
        *pRange = 255;
 803f8ce:	687b      	ldr	r3, [r7, #4]
 803f8d0:	22ff      	movs	r2, #255	; 0xff
 803f8d2:	701a      	strb	r2, [r3, #0]
 803f8d4:	e005      	b.n	803f8e2 <_DummyGenerator+0x2a>
    } else {
        (*pRange)--;
 803f8d6:	687b      	ldr	r3, [r7, #4]
 803f8d8:	781b      	ldrb	r3, [r3, #0]
 803f8da:	3b01      	subs	r3, #1
 803f8dc:	b2da      	uxtb	r2, r3
 803f8de:	687b      	ldr	r3, [r7, #4]
 803f8e0:	701a      	strb	r2, [r3, #0]
    }

    // Dummy Report Efficiency
    if (*pEfficiency >= 255) {
 803f8e2:	683b      	ldr	r3, [r7, #0]
 803f8e4:	781b      	ldrb	r3, [r3, #0]
 803f8e6:	2bff      	cmp	r3, #255	; 0xff
 803f8e8:	d103      	bne.n	803f8f2 <_DummyGenerator+0x3a>
        *pEfficiency = 0;
 803f8ea:	683b      	ldr	r3, [r7, #0]
 803f8ec:	2200      	movs	r2, #0
 803f8ee:	701a      	strb	r2, [r3, #0]
    } else {
        (*pEfficiency)++;
    }
}
 803f8f0:	e005      	b.n	803f8fe <_DummyGenerator+0x46>
        (*pEfficiency)++;
 803f8f2:	683b      	ldr	r3, [r7, #0]
 803f8f4:	781b      	ldrb	r3, [r3, #0]
 803f8f6:	3301      	adds	r3, #1
 803f8f8:	b2da      	uxtb	r2, r3
 803f8fa:	683b      	ldr	r3, [r7, #0]
 803f8fc:	701a      	strb	r2, [r3, #0]
}
 803f8fe:	bf00      	nop
 803f900:	370c      	adds	r7, #12
 803f902:	46bd      	mov	sp, r7
 803f904:	f85d 7b04 	ldr.w	r7, [sp], #4
 803f908:	4770      	bx	lr
 803f90a:	bf00      	nop
 803f90c:	20000102 	.word	0x20000102
 803f910:	20000103 	.word	0x20000103

0803f914 <_BitPosition>:

int8_t _BitPosition(uint64_t event_id) {
 803f914:	b4f0      	push	{r4, r5, r6, r7}
 803f916:	b084      	sub	sp, #16
 803f918:	af00      	add	r7, sp, #0
 803f91a:	e9c7 0100 	strd	r0, r1, [r7]
    uint8_t pos = -1;
 803f91e:	22ff      	movs	r2, #255	; 0xff
 803f920:	73fa      	strb	r2, [r7, #15]

    for (int8_t i = 0; i < 64; i++) {
 803f922:	2200      	movs	r2, #0
 803f924:	73ba      	strb	r2, [r7, #14]
 803f926:	e025      	b.n	803f974 <_BitPosition+0x60>
        if (event_id & BIT(i)) {
 803f928:	f997 000e 	ldrsb.w	r0, [r7, #14]
 803f92c:	e9d7 1200 	ldrd	r1, r2, [r7]
 803f930:	f1c0 0620 	rsb	r6, r0, #32
 803f934:	f1a0 0520 	sub.w	r5, r0, #32
 803f938:	fa21 f300 	lsr.w	r3, r1, r0
 803f93c:	fa02 f606 	lsl.w	r6, r2, r6
 803f940:	4333      	orrs	r3, r6
 803f942:	fa22 f505 	lsr.w	r5, r2, r5
 803f946:	432b      	orrs	r3, r5
 803f948:	fa22 f400 	lsr.w	r4, r2, r0
 803f94c:	f04f 0101 	mov.w	r1, #1
 803f950:	f04f 0200 	mov.w	r2, #0
 803f954:	ea01 0503 	and.w	r5, r1, r3
 803f958:	ea02 0604 	and.w	r6, r2, r4
 803f95c:	ea55 0206 	orrs.w	r2, r5, r6
 803f960:	d002      	beq.n	803f968 <_BitPosition+0x54>
            pos = i;
 803f962:	7bbb      	ldrb	r3, [r7, #14]
 803f964:	73fb      	strb	r3, [r7, #15]
            break;
 803f966:	e009      	b.n	803f97c <_BitPosition+0x68>
    for (int8_t i = 0; i < 64; i++) {
 803f968:	f997 200e 	ldrsb.w	r2, [r7, #14]
 803f96c:	b2d2      	uxtb	r2, r2
 803f96e:	3201      	adds	r2, #1
 803f970:	b2d2      	uxtb	r2, r2
 803f972:	73ba      	strb	r2, [r7, #14]
 803f974:	f997 200e 	ldrsb.w	r2, [r7, #14]
 803f978:	2a3f      	cmp	r2, #63	; 0x3f
 803f97a:	ddd5      	ble.n	803f928 <_BitPosition+0x14>
        }
    }

    return pos;
 803f97c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 803f980:	4618      	mov	r0, r3
 803f982:	3710      	adds	r7, #16
 803f984:	46bd      	mov	sp, r7
 803f986:	bcf0      	pop	{r4, r5, r6, r7}
 803f988:	4770      	bx	lr
	...

0803f98c <__errno>:
 803f98c:	4b01      	ldr	r3, [pc, #4]	; (803f994 <__errno+0x8>)
 803f98e:	6818      	ldr	r0, [r3, #0]
 803f990:	4770      	bx	lr
 803f992:	bf00      	nop
 803f994:	200002c4 	.word	0x200002c4

0803f998 <__libc_init_array>:
 803f998:	b570      	push	{r4, r5, r6, lr}
 803f99a:	4e0d      	ldr	r6, [pc, #52]	; (803f9d0 <__libc_init_array+0x38>)
 803f99c:	4c0d      	ldr	r4, [pc, #52]	; (803f9d4 <__libc_init_array+0x3c>)
 803f99e:	1ba4      	subs	r4, r4, r6
 803f9a0:	10a4      	asrs	r4, r4, #2
 803f9a2:	2500      	movs	r5, #0
 803f9a4:	42a5      	cmp	r5, r4
 803f9a6:	d109      	bne.n	803f9bc <__libc_init_array+0x24>
 803f9a8:	4e0b      	ldr	r6, [pc, #44]	; (803f9d8 <__libc_init_array+0x40>)
 803f9aa:	4c0c      	ldr	r4, [pc, #48]	; (803f9dc <__libc_init_array+0x44>)
 803f9ac:	f003 fd9e 	bl	80434ec <_init>
 803f9b0:	1ba4      	subs	r4, r4, r6
 803f9b2:	10a4      	asrs	r4, r4, #2
 803f9b4:	2500      	movs	r5, #0
 803f9b6:	42a5      	cmp	r5, r4
 803f9b8:	d105      	bne.n	803f9c6 <__libc_init_array+0x2e>
 803f9ba:	bd70      	pop	{r4, r5, r6, pc}
 803f9bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 803f9c0:	4798      	blx	r3
 803f9c2:	3501      	adds	r5, #1
 803f9c4:	e7ee      	b.n	803f9a4 <__libc_init_array+0xc>
 803f9c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 803f9ca:	4798      	blx	r3
 803f9cc:	3501      	adds	r5, #1
 803f9ce:	e7f2      	b.n	803f9b6 <__libc_init_array+0x1e>
 803f9d0:	08056648 	.word	0x08056648
 803f9d4:	08056648 	.word	0x08056648
 803f9d8:	08056648 	.word	0x08056648
 803f9dc:	0805664c 	.word	0x0805664c

0803f9e0 <memcmp>:
 803f9e0:	b530      	push	{r4, r5, lr}
 803f9e2:	2400      	movs	r4, #0
 803f9e4:	42a2      	cmp	r2, r4
 803f9e6:	d101      	bne.n	803f9ec <memcmp+0xc>
 803f9e8:	2000      	movs	r0, #0
 803f9ea:	e007      	b.n	803f9fc <memcmp+0x1c>
 803f9ec:	5d03      	ldrb	r3, [r0, r4]
 803f9ee:	3401      	adds	r4, #1
 803f9f0:	190d      	adds	r5, r1, r4
 803f9f2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 803f9f6:	42ab      	cmp	r3, r5
 803f9f8:	d0f4      	beq.n	803f9e4 <memcmp+0x4>
 803f9fa:	1b58      	subs	r0, r3, r5
 803f9fc:	bd30      	pop	{r4, r5, pc}

0803f9fe <memcpy>:
 803f9fe:	b510      	push	{r4, lr}
 803fa00:	1e43      	subs	r3, r0, #1
 803fa02:	440a      	add	r2, r1
 803fa04:	4291      	cmp	r1, r2
 803fa06:	d100      	bne.n	803fa0a <memcpy+0xc>
 803fa08:	bd10      	pop	{r4, pc}
 803fa0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 803fa0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 803fa12:	e7f7      	b.n	803fa04 <memcpy+0x6>

0803fa14 <memset>:
 803fa14:	4402      	add	r2, r0
 803fa16:	4603      	mov	r3, r0
 803fa18:	4293      	cmp	r3, r2
 803fa1a:	d100      	bne.n	803fa1e <memset+0xa>
 803fa1c:	4770      	bx	lr
 803fa1e:	f803 1b01 	strb.w	r1, [r3], #1
 803fa22:	e7f9      	b.n	803fa18 <memset+0x4>

0803fa24 <siprintf>:
 803fa24:	b40e      	push	{r1, r2, r3}
 803fa26:	b500      	push	{lr}
 803fa28:	b09c      	sub	sp, #112	; 0x70
 803fa2a:	ab1d      	add	r3, sp, #116	; 0x74
 803fa2c:	9002      	str	r0, [sp, #8]
 803fa2e:	9006      	str	r0, [sp, #24]
 803fa30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 803fa34:	4809      	ldr	r0, [pc, #36]	; (803fa5c <siprintf+0x38>)
 803fa36:	9107      	str	r1, [sp, #28]
 803fa38:	9104      	str	r1, [sp, #16]
 803fa3a:	4909      	ldr	r1, [pc, #36]	; (803fa60 <siprintf+0x3c>)
 803fa3c:	f853 2b04 	ldr.w	r2, [r3], #4
 803fa40:	9105      	str	r1, [sp, #20]
 803fa42:	6800      	ldr	r0, [r0, #0]
 803fa44:	9301      	str	r3, [sp, #4]
 803fa46:	a902      	add	r1, sp, #8
 803fa48:	f001 fe9a 	bl	8041780 <_svfiprintf_r>
 803fa4c:	9b02      	ldr	r3, [sp, #8]
 803fa4e:	2200      	movs	r2, #0
 803fa50:	701a      	strb	r2, [r3, #0]
 803fa52:	b01c      	add	sp, #112	; 0x70
 803fa54:	f85d eb04 	ldr.w	lr, [sp], #4
 803fa58:	b003      	add	sp, #12
 803fa5a:	4770      	bx	lr
 803fa5c:	200002c4 	.word	0x200002c4
 803fa60:	ffff0208 	.word	0xffff0208

0803fa64 <strncmp>:
 803fa64:	b510      	push	{r4, lr}
 803fa66:	b16a      	cbz	r2, 803fa84 <strncmp+0x20>
 803fa68:	3901      	subs	r1, #1
 803fa6a:	1884      	adds	r4, r0, r2
 803fa6c:	f810 3b01 	ldrb.w	r3, [r0], #1
 803fa70:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 803fa74:	4293      	cmp	r3, r2
 803fa76:	d103      	bne.n	803fa80 <strncmp+0x1c>
 803fa78:	42a0      	cmp	r0, r4
 803fa7a:	d001      	beq.n	803fa80 <strncmp+0x1c>
 803fa7c:	2b00      	cmp	r3, #0
 803fa7e:	d1f5      	bne.n	803fa6c <strncmp+0x8>
 803fa80:	1a98      	subs	r0, r3, r2
 803fa82:	bd10      	pop	{r4, pc}
 803fa84:	4610      	mov	r0, r2
 803fa86:	e7fc      	b.n	803fa82 <strncmp+0x1e>

0803fa88 <strstr>:
 803fa88:	b5f0      	push	{r4, r5, r6, r7, lr}
 803fa8a:	7803      	ldrb	r3, [r0, #0]
 803fa8c:	b17b      	cbz	r3, 803faae <strstr+0x26>
 803fa8e:	4604      	mov	r4, r0
 803fa90:	7823      	ldrb	r3, [r4, #0]
 803fa92:	4620      	mov	r0, r4
 803fa94:	1c66      	adds	r6, r4, #1
 803fa96:	b17b      	cbz	r3, 803fab8 <strstr+0x30>
 803fa98:	1e4a      	subs	r2, r1, #1
 803fa9a:	1e63      	subs	r3, r4, #1
 803fa9c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 803faa0:	b14d      	cbz	r5, 803fab6 <strstr+0x2e>
 803faa2:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 803faa6:	42af      	cmp	r7, r5
 803faa8:	4634      	mov	r4, r6
 803faaa:	d0f7      	beq.n	803fa9c <strstr+0x14>
 803faac:	e7f0      	b.n	803fa90 <strstr+0x8>
 803faae:	780b      	ldrb	r3, [r1, #0]
 803fab0:	2b00      	cmp	r3, #0
 803fab2:	bf18      	it	ne
 803fab4:	2000      	movne	r0, #0
 803fab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 803fab8:	4618      	mov	r0, r3
 803faba:	e7fc      	b.n	803fab6 <strstr+0x2e>

0803fabc <sulp>:
 803fabc:	b570      	push	{r4, r5, r6, lr}
 803fabe:	4604      	mov	r4, r0
 803fac0:	460d      	mov	r5, r1
 803fac2:	ec45 4b10 	vmov	d0, r4, r5
 803fac6:	4616      	mov	r6, r2
 803fac8:	f001 fc64 	bl	8041394 <__ulp>
 803facc:	ec51 0b10 	vmov	r0, r1, d0
 803fad0:	b17e      	cbz	r6, 803faf2 <sulp+0x36>
 803fad2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 803fad6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 803fada:	2b00      	cmp	r3, #0
 803fadc:	dd09      	ble.n	803faf2 <sulp+0x36>
 803fade:	051b      	lsls	r3, r3, #20
 803fae0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 803fae4:	2400      	movs	r4, #0
 803fae6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 803faea:	4622      	mov	r2, r4
 803faec:	462b      	mov	r3, r5
 803faee:	f7e0 fdbb 	bl	8020668 <__aeabi_dmul>
 803faf2:	bd70      	pop	{r4, r5, r6, pc}
 803faf4:	0000      	movs	r0, r0
	...

0803faf8 <_strtod_l>:
 803faf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803fafc:	461f      	mov	r7, r3
 803fafe:	b0a1      	sub	sp, #132	; 0x84
 803fb00:	2300      	movs	r3, #0
 803fb02:	4681      	mov	r9, r0
 803fb04:	4638      	mov	r0, r7
 803fb06:	460e      	mov	r6, r1
 803fb08:	9217      	str	r2, [sp, #92]	; 0x5c
 803fb0a:	931c      	str	r3, [sp, #112]	; 0x70
 803fb0c:	f001 f962 	bl	8040dd4 <__localeconv_l>
 803fb10:	4680      	mov	r8, r0
 803fb12:	6800      	ldr	r0, [r0, #0]
 803fb14:	f7e0 fb8e 	bl	8020234 <strlen>
 803fb18:	f04f 0a00 	mov.w	sl, #0
 803fb1c:	4604      	mov	r4, r0
 803fb1e:	f04f 0b00 	mov.w	fp, #0
 803fb22:	961b      	str	r6, [sp, #108]	; 0x6c
 803fb24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 803fb26:	781a      	ldrb	r2, [r3, #0]
 803fb28:	2a0d      	cmp	r2, #13
 803fb2a:	d832      	bhi.n	803fb92 <_strtod_l+0x9a>
 803fb2c:	2a09      	cmp	r2, #9
 803fb2e:	d236      	bcs.n	803fb9e <_strtod_l+0xa6>
 803fb30:	2a00      	cmp	r2, #0
 803fb32:	d03e      	beq.n	803fbb2 <_strtod_l+0xba>
 803fb34:	2300      	movs	r3, #0
 803fb36:	930d      	str	r3, [sp, #52]	; 0x34
 803fb38:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 803fb3a:	782b      	ldrb	r3, [r5, #0]
 803fb3c:	2b30      	cmp	r3, #48	; 0x30
 803fb3e:	f040 80ac 	bne.w	803fc9a <_strtod_l+0x1a2>
 803fb42:	786b      	ldrb	r3, [r5, #1]
 803fb44:	2b58      	cmp	r3, #88	; 0x58
 803fb46:	d001      	beq.n	803fb4c <_strtod_l+0x54>
 803fb48:	2b78      	cmp	r3, #120	; 0x78
 803fb4a:	d167      	bne.n	803fc1c <_strtod_l+0x124>
 803fb4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 803fb4e:	9301      	str	r3, [sp, #4]
 803fb50:	ab1c      	add	r3, sp, #112	; 0x70
 803fb52:	9300      	str	r3, [sp, #0]
 803fb54:	9702      	str	r7, [sp, #8]
 803fb56:	ab1d      	add	r3, sp, #116	; 0x74
 803fb58:	4a88      	ldr	r2, [pc, #544]	; (803fd7c <_strtod_l+0x284>)
 803fb5a:	a91b      	add	r1, sp, #108	; 0x6c
 803fb5c:	4648      	mov	r0, r9
 803fb5e:	f000 fe62 	bl	8040826 <__gethex>
 803fb62:	f010 0407 	ands.w	r4, r0, #7
 803fb66:	4606      	mov	r6, r0
 803fb68:	d005      	beq.n	803fb76 <_strtod_l+0x7e>
 803fb6a:	2c06      	cmp	r4, #6
 803fb6c:	d12b      	bne.n	803fbc6 <_strtod_l+0xce>
 803fb6e:	3501      	adds	r5, #1
 803fb70:	2300      	movs	r3, #0
 803fb72:	951b      	str	r5, [sp, #108]	; 0x6c
 803fb74:	930d      	str	r3, [sp, #52]	; 0x34
 803fb76:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 803fb78:	2b00      	cmp	r3, #0
 803fb7a:	f040 859a 	bne.w	80406b2 <_strtod_l+0xbba>
 803fb7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 803fb80:	b1e3      	cbz	r3, 803fbbc <_strtod_l+0xc4>
 803fb82:	4652      	mov	r2, sl
 803fb84:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 803fb88:	ec43 2b10 	vmov	d0, r2, r3
 803fb8c:	b021      	add	sp, #132	; 0x84
 803fb8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803fb92:	2a2b      	cmp	r2, #43	; 0x2b
 803fb94:	d015      	beq.n	803fbc2 <_strtod_l+0xca>
 803fb96:	2a2d      	cmp	r2, #45	; 0x2d
 803fb98:	d004      	beq.n	803fba4 <_strtod_l+0xac>
 803fb9a:	2a20      	cmp	r2, #32
 803fb9c:	d1ca      	bne.n	803fb34 <_strtod_l+0x3c>
 803fb9e:	3301      	adds	r3, #1
 803fba0:	931b      	str	r3, [sp, #108]	; 0x6c
 803fba2:	e7bf      	b.n	803fb24 <_strtod_l+0x2c>
 803fba4:	2201      	movs	r2, #1
 803fba6:	920d      	str	r2, [sp, #52]	; 0x34
 803fba8:	1c5a      	adds	r2, r3, #1
 803fbaa:	921b      	str	r2, [sp, #108]	; 0x6c
 803fbac:	785b      	ldrb	r3, [r3, #1]
 803fbae:	2b00      	cmp	r3, #0
 803fbb0:	d1c2      	bne.n	803fb38 <_strtod_l+0x40>
 803fbb2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 803fbb4:	961b      	str	r6, [sp, #108]	; 0x6c
 803fbb6:	2b00      	cmp	r3, #0
 803fbb8:	f040 8579 	bne.w	80406ae <_strtod_l+0xbb6>
 803fbbc:	4652      	mov	r2, sl
 803fbbe:	465b      	mov	r3, fp
 803fbc0:	e7e2      	b.n	803fb88 <_strtod_l+0x90>
 803fbc2:	2200      	movs	r2, #0
 803fbc4:	e7ef      	b.n	803fba6 <_strtod_l+0xae>
 803fbc6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 803fbc8:	b13a      	cbz	r2, 803fbda <_strtod_l+0xe2>
 803fbca:	2135      	movs	r1, #53	; 0x35
 803fbcc:	a81e      	add	r0, sp, #120	; 0x78
 803fbce:	f001 fcd9 	bl	8041584 <__copybits>
 803fbd2:	991c      	ldr	r1, [sp, #112]	; 0x70
 803fbd4:	4648      	mov	r0, r9
 803fbd6:	f001 f945 	bl	8040e64 <_Bfree>
 803fbda:	3c01      	subs	r4, #1
 803fbdc:	2c04      	cmp	r4, #4
 803fbde:	d806      	bhi.n	803fbee <_strtod_l+0xf6>
 803fbe0:	e8df f004 	tbb	[pc, r4]
 803fbe4:	1714030a 	.word	0x1714030a
 803fbe8:	0a          	.byte	0x0a
 803fbe9:	00          	.byte	0x00
 803fbea:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 803fbee:	0730      	lsls	r0, r6, #28
 803fbf0:	d5c1      	bpl.n	803fb76 <_strtod_l+0x7e>
 803fbf2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 803fbf6:	e7be      	b.n	803fb76 <_strtod_l+0x7e>
 803fbf8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 803fbfc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 803fbfe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 803fc02:	f202 4233 	addw	r2, r2, #1075	; 0x433
 803fc06:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 803fc0a:	e7f0      	b.n	803fbee <_strtod_l+0xf6>
 803fc0c:	f8df b170 	ldr.w	fp, [pc, #368]	; 803fd80 <_strtod_l+0x288>
 803fc10:	e7ed      	b.n	803fbee <_strtod_l+0xf6>
 803fc12:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 803fc16:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 803fc1a:	e7e8      	b.n	803fbee <_strtod_l+0xf6>
 803fc1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 803fc1e:	1c5a      	adds	r2, r3, #1
 803fc20:	921b      	str	r2, [sp, #108]	; 0x6c
 803fc22:	785b      	ldrb	r3, [r3, #1]
 803fc24:	2b30      	cmp	r3, #48	; 0x30
 803fc26:	d0f9      	beq.n	803fc1c <_strtod_l+0x124>
 803fc28:	2b00      	cmp	r3, #0
 803fc2a:	d0a4      	beq.n	803fb76 <_strtod_l+0x7e>
 803fc2c:	2301      	movs	r3, #1
 803fc2e:	2500      	movs	r5, #0
 803fc30:	9306      	str	r3, [sp, #24]
 803fc32:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 803fc34:	9308      	str	r3, [sp, #32]
 803fc36:	9507      	str	r5, [sp, #28]
 803fc38:	9505      	str	r5, [sp, #20]
 803fc3a:	220a      	movs	r2, #10
 803fc3c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 803fc3e:	7807      	ldrb	r7, [r0, #0]
 803fc40:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 803fc44:	b2d9      	uxtb	r1, r3
 803fc46:	2909      	cmp	r1, #9
 803fc48:	d929      	bls.n	803fc9e <_strtod_l+0x1a6>
 803fc4a:	4622      	mov	r2, r4
 803fc4c:	f8d8 1000 	ldr.w	r1, [r8]
 803fc50:	f7ff ff08 	bl	803fa64 <strncmp>
 803fc54:	2800      	cmp	r0, #0
 803fc56:	d031      	beq.n	803fcbc <_strtod_l+0x1c4>
 803fc58:	2000      	movs	r0, #0
 803fc5a:	9c05      	ldr	r4, [sp, #20]
 803fc5c:	9004      	str	r0, [sp, #16]
 803fc5e:	463b      	mov	r3, r7
 803fc60:	4602      	mov	r2, r0
 803fc62:	2b65      	cmp	r3, #101	; 0x65
 803fc64:	d001      	beq.n	803fc6a <_strtod_l+0x172>
 803fc66:	2b45      	cmp	r3, #69	; 0x45
 803fc68:	d114      	bne.n	803fc94 <_strtod_l+0x19c>
 803fc6a:	b924      	cbnz	r4, 803fc76 <_strtod_l+0x17e>
 803fc6c:	b910      	cbnz	r0, 803fc74 <_strtod_l+0x17c>
 803fc6e:	9b06      	ldr	r3, [sp, #24]
 803fc70:	2b00      	cmp	r3, #0
 803fc72:	d09e      	beq.n	803fbb2 <_strtod_l+0xba>
 803fc74:	2400      	movs	r4, #0
 803fc76:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 803fc78:	1c73      	adds	r3, r6, #1
 803fc7a:	931b      	str	r3, [sp, #108]	; 0x6c
 803fc7c:	7873      	ldrb	r3, [r6, #1]
 803fc7e:	2b2b      	cmp	r3, #43	; 0x2b
 803fc80:	d078      	beq.n	803fd74 <_strtod_l+0x27c>
 803fc82:	2b2d      	cmp	r3, #45	; 0x2d
 803fc84:	d070      	beq.n	803fd68 <_strtod_l+0x270>
 803fc86:	f04f 0c00 	mov.w	ip, #0
 803fc8a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 803fc8e:	2f09      	cmp	r7, #9
 803fc90:	d97c      	bls.n	803fd8c <_strtod_l+0x294>
 803fc92:	961b      	str	r6, [sp, #108]	; 0x6c
 803fc94:	f04f 0e00 	mov.w	lr, #0
 803fc98:	e09a      	b.n	803fdd0 <_strtod_l+0x2d8>
 803fc9a:	2300      	movs	r3, #0
 803fc9c:	e7c7      	b.n	803fc2e <_strtod_l+0x136>
 803fc9e:	9905      	ldr	r1, [sp, #20]
 803fca0:	2908      	cmp	r1, #8
 803fca2:	bfdd      	ittte	le
 803fca4:	9907      	ldrle	r1, [sp, #28]
 803fca6:	fb02 3301 	mlale	r3, r2, r1, r3
 803fcaa:	9307      	strle	r3, [sp, #28]
 803fcac:	fb02 3505 	mlagt	r5, r2, r5, r3
 803fcb0:	9b05      	ldr	r3, [sp, #20]
 803fcb2:	3001      	adds	r0, #1
 803fcb4:	3301      	adds	r3, #1
 803fcb6:	9305      	str	r3, [sp, #20]
 803fcb8:	901b      	str	r0, [sp, #108]	; 0x6c
 803fcba:	e7bf      	b.n	803fc3c <_strtod_l+0x144>
 803fcbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 803fcbe:	191a      	adds	r2, r3, r4
 803fcc0:	921b      	str	r2, [sp, #108]	; 0x6c
 803fcc2:	9a05      	ldr	r2, [sp, #20]
 803fcc4:	5d1b      	ldrb	r3, [r3, r4]
 803fcc6:	2a00      	cmp	r2, #0
 803fcc8:	d037      	beq.n	803fd3a <_strtod_l+0x242>
 803fcca:	9c05      	ldr	r4, [sp, #20]
 803fccc:	4602      	mov	r2, r0
 803fcce:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 803fcd2:	2909      	cmp	r1, #9
 803fcd4:	d913      	bls.n	803fcfe <_strtod_l+0x206>
 803fcd6:	2101      	movs	r1, #1
 803fcd8:	9104      	str	r1, [sp, #16]
 803fcda:	e7c2      	b.n	803fc62 <_strtod_l+0x16a>
 803fcdc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 803fcde:	1c5a      	adds	r2, r3, #1
 803fce0:	921b      	str	r2, [sp, #108]	; 0x6c
 803fce2:	785b      	ldrb	r3, [r3, #1]
 803fce4:	3001      	adds	r0, #1
 803fce6:	2b30      	cmp	r3, #48	; 0x30
 803fce8:	d0f8      	beq.n	803fcdc <_strtod_l+0x1e4>
 803fcea:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 803fcee:	2a08      	cmp	r2, #8
 803fcf0:	f200 84e4 	bhi.w	80406bc <_strtod_l+0xbc4>
 803fcf4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 803fcf6:	9208      	str	r2, [sp, #32]
 803fcf8:	4602      	mov	r2, r0
 803fcfa:	2000      	movs	r0, #0
 803fcfc:	4604      	mov	r4, r0
 803fcfe:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 803fd02:	f100 0101 	add.w	r1, r0, #1
 803fd06:	d012      	beq.n	803fd2e <_strtod_l+0x236>
 803fd08:	440a      	add	r2, r1
 803fd0a:	eb00 0c04 	add.w	ip, r0, r4
 803fd0e:	4621      	mov	r1, r4
 803fd10:	270a      	movs	r7, #10
 803fd12:	458c      	cmp	ip, r1
 803fd14:	d113      	bne.n	803fd3e <_strtod_l+0x246>
 803fd16:	1821      	adds	r1, r4, r0
 803fd18:	2908      	cmp	r1, #8
 803fd1a:	f104 0401 	add.w	r4, r4, #1
 803fd1e:	4404      	add	r4, r0
 803fd20:	dc19      	bgt.n	803fd56 <_strtod_l+0x25e>
 803fd22:	9b07      	ldr	r3, [sp, #28]
 803fd24:	210a      	movs	r1, #10
 803fd26:	fb01 e303 	mla	r3, r1, r3, lr
 803fd2a:	9307      	str	r3, [sp, #28]
 803fd2c:	2100      	movs	r1, #0
 803fd2e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 803fd30:	1c58      	adds	r0, r3, #1
 803fd32:	901b      	str	r0, [sp, #108]	; 0x6c
 803fd34:	785b      	ldrb	r3, [r3, #1]
 803fd36:	4608      	mov	r0, r1
 803fd38:	e7c9      	b.n	803fcce <_strtod_l+0x1d6>
 803fd3a:	9805      	ldr	r0, [sp, #20]
 803fd3c:	e7d3      	b.n	803fce6 <_strtod_l+0x1ee>
 803fd3e:	2908      	cmp	r1, #8
 803fd40:	f101 0101 	add.w	r1, r1, #1
 803fd44:	dc03      	bgt.n	803fd4e <_strtod_l+0x256>
 803fd46:	9b07      	ldr	r3, [sp, #28]
 803fd48:	437b      	muls	r3, r7
 803fd4a:	9307      	str	r3, [sp, #28]
 803fd4c:	e7e1      	b.n	803fd12 <_strtod_l+0x21a>
 803fd4e:	2910      	cmp	r1, #16
 803fd50:	bfd8      	it	le
 803fd52:	437d      	mulle	r5, r7
 803fd54:	e7dd      	b.n	803fd12 <_strtod_l+0x21a>
 803fd56:	2c10      	cmp	r4, #16
 803fd58:	bfdc      	itt	le
 803fd5a:	210a      	movle	r1, #10
 803fd5c:	fb01 e505 	mlale	r5, r1, r5, lr
 803fd60:	e7e4      	b.n	803fd2c <_strtod_l+0x234>
 803fd62:	2301      	movs	r3, #1
 803fd64:	9304      	str	r3, [sp, #16]
 803fd66:	e781      	b.n	803fc6c <_strtod_l+0x174>
 803fd68:	f04f 0c01 	mov.w	ip, #1
 803fd6c:	1cb3      	adds	r3, r6, #2
 803fd6e:	931b      	str	r3, [sp, #108]	; 0x6c
 803fd70:	78b3      	ldrb	r3, [r6, #2]
 803fd72:	e78a      	b.n	803fc8a <_strtod_l+0x192>
 803fd74:	f04f 0c00 	mov.w	ip, #0
 803fd78:	e7f8      	b.n	803fd6c <_strtod_l+0x274>
 803fd7a:	bf00      	nop
 803fd7c:	08056360 	.word	0x08056360
 803fd80:	7ff00000 	.word	0x7ff00000
 803fd84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 803fd86:	1c5f      	adds	r7, r3, #1
 803fd88:	971b      	str	r7, [sp, #108]	; 0x6c
 803fd8a:	785b      	ldrb	r3, [r3, #1]
 803fd8c:	2b30      	cmp	r3, #48	; 0x30
 803fd8e:	d0f9      	beq.n	803fd84 <_strtod_l+0x28c>
 803fd90:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 803fd94:	2f08      	cmp	r7, #8
 803fd96:	f63f af7d 	bhi.w	803fc94 <_strtod_l+0x19c>
 803fd9a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 803fd9e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 803fda0:	930a      	str	r3, [sp, #40]	; 0x28
 803fda2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 803fda4:	1c5f      	adds	r7, r3, #1
 803fda6:	971b      	str	r7, [sp, #108]	; 0x6c
 803fda8:	785b      	ldrb	r3, [r3, #1]
 803fdaa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 803fdae:	f1b8 0f09 	cmp.w	r8, #9
 803fdb2:	d937      	bls.n	803fe24 <_strtod_l+0x32c>
 803fdb4:	990a      	ldr	r1, [sp, #40]	; 0x28
 803fdb6:	1a7f      	subs	r7, r7, r1
 803fdb8:	2f08      	cmp	r7, #8
 803fdba:	f644 671f 	movw	r7, #19999	; 0x4e1f
 803fdbe:	dc37      	bgt.n	803fe30 <_strtod_l+0x338>
 803fdc0:	45be      	cmp	lr, r7
 803fdc2:	bfa8      	it	ge
 803fdc4:	46be      	movge	lr, r7
 803fdc6:	f1bc 0f00 	cmp.w	ip, #0
 803fdca:	d001      	beq.n	803fdd0 <_strtod_l+0x2d8>
 803fdcc:	f1ce 0e00 	rsb	lr, lr, #0
 803fdd0:	2c00      	cmp	r4, #0
 803fdd2:	d151      	bne.n	803fe78 <_strtod_l+0x380>
 803fdd4:	2800      	cmp	r0, #0
 803fdd6:	f47f aece 	bne.w	803fb76 <_strtod_l+0x7e>
 803fdda:	9a06      	ldr	r2, [sp, #24]
 803fddc:	2a00      	cmp	r2, #0
 803fdde:	f47f aeca 	bne.w	803fb76 <_strtod_l+0x7e>
 803fde2:	9a04      	ldr	r2, [sp, #16]
 803fde4:	2a00      	cmp	r2, #0
 803fde6:	f47f aee4 	bne.w	803fbb2 <_strtod_l+0xba>
 803fdea:	2b4e      	cmp	r3, #78	; 0x4e
 803fdec:	d027      	beq.n	803fe3e <_strtod_l+0x346>
 803fdee:	dc21      	bgt.n	803fe34 <_strtod_l+0x33c>
 803fdf0:	2b49      	cmp	r3, #73	; 0x49
 803fdf2:	f47f aede 	bne.w	803fbb2 <_strtod_l+0xba>
 803fdf6:	49a0      	ldr	r1, [pc, #640]	; (8040078 <_strtod_l+0x580>)
 803fdf8:	a81b      	add	r0, sp, #108	; 0x6c
 803fdfa:	f000 ff47 	bl	8040c8c <__match>
 803fdfe:	2800      	cmp	r0, #0
 803fe00:	f43f aed7 	beq.w	803fbb2 <_strtod_l+0xba>
 803fe04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 803fe06:	499d      	ldr	r1, [pc, #628]	; (804007c <_strtod_l+0x584>)
 803fe08:	3b01      	subs	r3, #1
 803fe0a:	a81b      	add	r0, sp, #108	; 0x6c
 803fe0c:	931b      	str	r3, [sp, #108]	; 0x6c
 803fe0e:	f000 ff3d 	bl	8040c8c <__match>
 803fe12:	b910      	cbnz	r0, 803fe1a <_strtod_l+0x322>
 803fe14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 803fe16:	3301      	adds	r3, #1
 803fe18:	931b      	str	r3, [sp, #108]	; 0x6c
 803fe1a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8040090 <_strtod_l+0x598>
 803fe1e:	f04f 0a00 	mov.w	sl, #0
 803fe22:	e6a8      	b.n	803fb76 <_strtod_l+0x7e>
 803fe24:	210a      	movs	r1, #10
 803fe26:	fb01 3e0e 	mla	lr, r1, lr, r3
 803fe2a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 803fe2e:	e7b8      	b.n	803fda2 <_strtod_l+0x2aa>
 803fe30:	46be      	mov	lr, r7
 803fe32:	e7c8      	b.n	803fdc6 <_strtod_l+0x2ce>
 803fe34:	2b69      	cmp	r3, #105	; 0x69
 803fe36:	d0de      	beq.n	803fdf6 <_strtod_l+0x2fe>
 803fe38:	2b6e      	cmp	r3, #110	; 0x6e
 803fe3a:	f47f aeba 	bne.w	803fbb2 <_strtod_l+0xba>
 803fe3e:	4990      	ldr	r1, [pc, #576]	; (8040080 <_strtod_l+0x588>)
 803fe40:	a81b      	add	r0, sp, #108	; 0x6c
 803fe42:	f000 ff23 	bl	8040c8c <__match>
 803fe46:	2800      	cmp	r0, #0
 803fe48:	f43f aeb3 	beq.w	803fbb2 <_strtod_l+0xba>
 803fe4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 803fe4e:	781b      	ldrb	r3, [r3, #0]
 803fe50:	2b28      	cmp	r3, #40	; 0x28
 803fe52:	d10e      	bne.n	803fe72 <_strtod_l+0x37a>
 803fe54:	aa1e      	add	r2, sp, #120	; 0x78
 803fe56:	498b      	ldr	r1, [pc, #556]	; (8040084 <_strtod_l+0x58c>)
 803fe58:	a81b      	add	r0, sp, #108	; 0x6c
 803fe5a:	f000 ff2b 	bl	8040cb4 <__hexnan>
 803fe5e:	2805      	cmp	r0, #5
 803fe60:	d107      	bne.n	803fe72 <_strtod_l+0x37a>
 803fe62:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 803fe64:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 803fe68:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 803fe6c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 803fe70:	e681      	b.n	803fb76 <_strtod_l+0x7e>
 803fe72:	f8df b224 	ldr.w	fp, [pc, #548]	; 8040098 <_strtod_l+0x5a0>
 803fe76:	e7d2      	b.n	803fe1e <_strtod_l+0x326>
 803fe78:	ebae 0302 	sub.w	r3, lr, r2
 803fe7c:	9306      	str	r3, [sp, #24]
 803fe7e:	9b05      	ldr	r3, [sp, #20]
 803fe80:	9807      	ldr	r0, [sp, #28]
 803fe82:	2b00      	cmp	r3, #0
 803fe84:	bf08      	it	eq
 803fe86:	4623      	moveq	r3, r4
 803fe88:	2c10      	cmp	r4, #16
 803fe8a:	9305      	str	r3, [sp, #20]
 803fe8c:	46a0      	mov	r8, r4
 803fe8e:	bfa8      	it	ge
 803fe90:	f04f 0810 	movge.w	r8, #16
 803fe94:	f7e0 fb6e 	bl	8020574 <__aeabi_ui2d>
 803fe98:	2c09      	cmp	r4, #9
 803fe9a:	4682      	mov	sl, r0
 803fe9c:	468b      	mov	fp, r1
 803fe9e:	dc13      	bgt.n	803fec8 <_strtod_l+0x3d0>
 803fea0:	9b06      	ldr	r3, [sp, #24]
 803fea2:	2b00      	cmp	r3, #0
 803fea4:	f43f ae67 	beq.w	803fb76 <_strtod_l+0x7e>
 803fea8:	9b06      	ldr	r3, [sp, #24]
 803feaa:	dd7a      	ble.n	803ffa2 <_strtod_l+0x4aa>
 803feac:	2b16      	cmp	r3, #22
 803feae:	dc61      	bgt.n	803ff74 <_strtod_l+0x47c>
 803feb0:	4a75      	ldr	r2, [pc, #468]	; (8040088 <_strtod_l+0x590>)
 803feb2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 803feb6:	e9de 0100 	ldrd	r0, r1, [lr]
 803feba:	4652      	mov	r2, sl
 803febc:	465b      	mov	r3, fp
 803febe:	f7e0 fbd3 	bl	8020668 <__aeabi_dmul>
 803fec2:	4682      	mov	sl, r0
 803fec4:	468b      	mov	fp, r1
 803fec6:	e656      	b.n	803fb76 <_strtod_l+0x7e>
 803fec8:	4b6f      	ldr	r3, [pc, #444]	; (8040088 <_strtod_l+0x590>)
 803feca:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 803fece:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 803fed2:	f7e0 fbc9 	bl	8020668 <__aeabi_dmul>
 803fed6:	4606      	mov	r6, r0
 803fed8:	4628      	mov	r0, r5
 803feda:	460f      	mov	r7, r1
 803fedc:	f7e0 fb4a 	bl	8020574 <__aeabi_ui2d>
 803fee0:	4602      	mov	r2, r0
 803fee2:	460b      	mov	r3, r1
 803fee4:	4630      	mov	r0, r6
 803fee6:	4639      	mov	r1, r7
 803fee8:	f7e0 fa08 	bl	80202fc <__adddf3>
 803feec:	2c0f      	cmp	r4, #15
 803feee:	4682      	mov	sl, r0
 803fef0:	468b      	mov	fp, r1
 803fef2:	ddd5      	ble.n	803fea0 <_strtod_l+0x3a8>
 803fef4:	9b06      	ldr	r3, [sp, #24]
 803fef6:	eba4 0808 	sub.w	r8, r4, r8
 803fefa:	4498      	add	r8, r3
 803fefc:	f1b8 0f00 	cmp.w	r8, #0
 803ff00:	f340 8096 	ble.w	8040030 <_strtod_l+0x538>
 803ff04:	f018 030f 	ands.w	r3, r8, #15
 803ff08:	d00a      	beq.n	803ff20 <_strtod_l+0x428>
 803ff0a:	495f      	ldr	r1, [pc, #380]	; (8040088 <_strtod_l+0x590>)
 803ff0c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 803ff10:	4652      	mov	r2, sl
 803ff12:	465b      	mov	r3, fp
 803ff14:	e9d1 0100 	ldrd	r0, r1, [r1]
 803ff18:	f7e0 fba6 	bl	8020668 <__aeabi_dmul>
 803ff1c:	4682      	mov	sl, r0
 803ff1e:	468b      	mov	fp, r1
 803ff20:	f038 080f 	bics.w	r8, r8, #15
 803ff24:	d073      	beq.n	804000e <_strtod_l+0x516>
 803ff26:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 803ff2a:	dd47      	ble.n	803ffbc <_strtod_l+0x4c4>
 803ff2c:	2400      	movs	r4, #0
 803ff2e:	46a0      	mov	r8, r4
 803ff30:	9407      	str	r4, [sp, #28]
 803ff32:	9405      	str	r4, [sp, #20]
 803ff34:	2322      	movs	r3, #34	; 0x22
 803ff36:	f8df b158 	ldr.w	fp, [pc, #344]	; 8040090 <_strtod_l+0x598>
 803ff3a:	f8c9 3000 	str.w	r3, [r9]
 803ff3e:	f04f 0a00 	mov.w	sl, #0
 803ff42:	9b07      	ldr	r3, [sp, #28]
 803ff44:	2b00      	cmp	r3, #0
 803ff46:	f43f ae16 	beq.w	803fb76 <_strtod_l+0x7e>
 803ff4a:	991c      	ldr	r1, [sp, #112]	; 0x70
 803ff4c:	4648      	mov	r0, r9
 803ff4e:	f000 ff89 	bl	8040e64 <_Bfree>
 803ff52:	9905      	ldr	r1, [sp, #20]
 803ff54:	4648      	mov	r0, r9
 803ff56:	f000 ff85 	bl	8040e64 <_Bfree>
 803ff5a:	4641      	mov	r1, r8
 803ff5c:	4648      	mov	r0, r9
 803ff5e:	f000 ff81 	bl	8040e64 <_Bfree>
 803ff62:	9907      	ldr	r1, [sp, #28]
 803ff64:	4648      	mov	r0, r9
 803ff66:	f000 ff7d 	bl	8040e64 <_Bfree>
 803ff6a:	4621      	mov	r1, r4
 803ff6c:	4648      	mov	r0, r9
 803ff6e:	f000 ff79 	bl	8040e64 <_Bfree>
 803ff72:	e600      	b.n	803fb76 <_strtod_l+0x7e>
 803ff74:	9a06      	ldr	r2, [sp, #24]
 803ff76:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 803ff7a:	4293      	cmp	r3, r2
 803ff7c:	dbba      	blt.n	803fef4 <_strtod_l+0x3fc>
 803ff7e:	4d42      	ldr	r5, [pc, #264]	; (8040088 <_strtod_l+0x590>)
 803ff80:	f1c4 040f 	rsb	r4, r4, #15
 803ff84:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 803ff88:	4652      	mov	r2, sl
 803ff8a:	465b      	mov	r3, fp
 803ff8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 803ff90:	f7e0 fb6a 	bl	8020668 <__aeabi_dmul>
 803ff94:	9b06      	ldr	r3, [sp, #24]
 803ff96:	1b1c      	subs	r4, r3, r4
 803ff98:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 803ff9c:	e9d5 2300 	ldrd	r2, r3, [r5]
 803ffa0:	e78d      	b.n	803febe <_strtod_l+0x3c6>
 803ffa2:	f113 0f16 	cmn.w	r3, #22
 803ffa6:	dba5      	blt.n	803fef4 <_strtod_l+0x3fc>
 803ffa8:	4a37      	ldr	r2, [pc, #220]	; (8040088 <_strtod_l+0x590>)
 803ffaa:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 803ffae:	e9d2 2300 	ldrd	r2, r3, [r2]
 803ffb2:	4650      	mov	r0, sl
 803ffb4:	4659      	mov	r1, fp
 803ffb6:	f7e0 fc81 	bl	80208bc <__aeabi_ddiv>
 803ffba:	e782      	b.n	803fec2 <_strtod_l+0x3ca>
 803ffbc:	2300      	movs	r3, #0
 803ffbe:	4e33      	ldr	r6, [pc, #204]	; (804008c <_strtod_l+0x594>)
 803ffc0:	ea4f 1828 	mov.w	r8, r8, asr #4
 803ffc4:	4650      	mov	r0, sl
 803ffc6:	4659      	mov	r1, fp
 803ffc8:	461d      	mov	r5, r3
 803ffca:	f1b8 0f01 	cmp.w	r8, #1
 803ffce:	dc21      	bgt.n	8040014 <_strtod_l+0x51c>
 803ffd0:	b10b      	cbz	r3, 803ffd6 <_strtod_l+0x4de>
 803ffd2:	4682      	mov	sl, r0
 803ffd4:	468b      	mov	fp, r1
 803ffd6:	4b2d      	ldr	r3, [pc, #180]	; (804008c <_strtod_l+0x594>)
 803ffd8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 803ffdc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 803ffe0:	4652      	mov	r2, sl
 803ffe2:	465b      	mov	r3, fp
 803ffe4:	e9d5 0100 	ldrd	r0, r1, [r5]
 803ffe8:	f7e0 fb3e 	bl	8020668 <__aeabi_dmul>
 803ffec:	4b28      	ldr	r3, [pc, #160]	; (8040090 <_strtod_l+0x598>)
 803ffee:	460a      	mov	r2, r1
 803fff0:	400b      	ands	r3, r1
 803fff2:	4928      	ldr	r1, [pc, #160]	; (8040094 <_strtod_l+0x59c>)
 803fff4:	428b      	cmp	r3, r1
 803fff6:	4682      	mov	sl, r0
 803fff8:	d898      	bhi.n	803ff2c <_strtod_l+0x434>
 803fffa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 803fffe:	428b      	cmp	r3, r1
 8040000:	bf86      	itte	hi
 8040002:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 804009c <_strtod_l+0x5a4>
 8040006:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 804000a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 804000e:	2300      	movs	r3, #0
 8040010:	9304      	str	r3, [sp, #16]
 8040012:	e077      	b.n	8040104 <_strtod_l+0x60c>
 8040014:	f018 0f01 	tst.w	r8, #1
 8040018:	d006      	beq.n	8040028 <_strtod_l+0x530>
 804001a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 804001e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8040022:	f7e0 fb21 	bl	8020668 <__aeabi_dmul>
 8040026:	2301      	movs	r3, #1
 8040028:	3501      	adds	r5, #1
 804002a:	ea4f 0868 	mov.w	r8, r8, asr #1
 804002e:	e7cc      	b.n	803ffca <_strtod_l+0x4d2>
 8040030:	d0ed      	beq.n	804000e <_strtod_l+0x516>
 8040032:	f1c8 0800 	rsb	r8, r8, #0
 8040036:	f018 020f 	ands.w	r2, r8, #15
 804003a:	d00a      	beq.n	8040052 <_strtod_l+0x55a>
 804003c:	4b12      	ldr	r3, [pc, #72]	; (8040088 <_strtod_l+0x590>)
 804003e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8040042:	4650      	mov	r0, sl
 8040044:	4659      	mov	r1, fp
 8040046:	e9d3 2300 	ldrd	r2, r3, [r3]
 804004a:	f7e0 fc37 	bl	80208bc <__aeabi_ddiv>
 804004e:	4682      	mov	sl, r0
 8040050:	468b      	mov	fp, r1
 8040052:	ea5f 1828 	movs.w	r8, r8, asr #4
 8040056:	d0da      	beq.n	804000e <_strtod_l+0x516>
 8040058:	f1b8 0f1f 	cmp.w	r8, #31
 804005c:	dd20      	ble.n	80400a0 <_strtod_l+0x5a8>
 804005e:	2400      	movs	r4, #0
 8040060:	46a0      	mov	r8, r4
 8040062:	9407      	str	r4, [sp, #28]
 8040064:	9405      	str	r4, [sp, #20]
 8040066:	2322      	movs	r3, #34	; 0x22
 8040068:	f04f 0a00 	mov.w	sl, #0
 804006c:	f04f 0b00 	mov.w	fp, #0
 8040070:	f8c9 3000 	str.w	r3, [r9]
 8040074:	e765      	b.n	803ff42 <_strtod_l+0x44a>
 8040076:	bf00      	nop
 8040078:	08056354 	.word	0x08056354
 804007c:	08056357 	.word	0x08056357
 8040080:	0805635d 	.word	0x0805635d
 8040084:	08056374 	.word	0x08056374
 8040088:	080563e8 	.word	0x080563e8
 804008c:	080563c0 	.word	0x080563c0
 8040090:	7ff00000 	.word	0x7ff00000
 8040094:	7ca00000 	.word	0x7ca00000
 8040098:	fff80000 	.word	0xfff80000
 804009c:	7fefffff 	.word	0x7fefffff
 80400a0:	f018 0310 	ands.w	r3, r8, #16
 80400a4:	bf18      	it	ne
 80400a6:	236a      	movne	r3, #106	; 0x6a
 80400a8:	4da0      	ldr	r5, [pc, #640]	; (804032c <_strtod_l+0x834>)
 80400aa:	9304      	str	r3, [sp, #16]
 80400ac:	4650      	mov	r0, sl
 80400ae:	4659      	mov	r1, fp
 80400b0:	2300      	movs	r3, #0
 80400b2:	f1b8 0f00 	cmp.w	r8, #0
 80400b6:	f300 810a 	bgt.w	80402ce <_strtod_l+0x7d6>
 80400ba:	b10b      	cbz	r3, 80400c0 <_strtod_l+0x5c8>
 80400bc:	4682      	mov	sl, r0
 80400be:	468b      	mov	fp, r1
 80400c0:	9b04      	ldr	r3, [sp, #16]
 80400c2:	b1bb      	cbz	r3, 80400f4 <_strtod_l+0x5fc>
 80400c4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80400c8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80400cc:	2b00      	cmp	r3, #0
 80400ce:	4659      	mov	r1, fp
 80400d0:	dd10      	ble.n	80400f4 <_strtod_l+0x5fc>
 80400d2:	2b1f      	cmp	r3, #31
 80400d4:	f340 8107 	ble.w	80402e6 <_strtod_l+0x7ee>
 80400d8:	2b34      	cmp	r3, #52	; 0x34
 80400da:	bfde      	ittt	le
 80400dc:	3b20      	suble	r3, #32
 80400de:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80400e2:	fa02 f303 	lslle.w	r3, r2, r3
 80400e6:	f04f 0a00 	mov.w	sl, #0
 80400ea:	bfcc      	ite	gt
 80400ec:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80400f0:	ea03 0b01 	andle.w	fp, r3, r1
 80400f4:	2200      	movs	r2, #0
 80400f6:	2300      	movs	r3, #0
 80400f8:	4650      	mov	r0, sl
 80400fa:	4659      	mov	r1, fp
 80400fc:	f7e0 fd1c 	bl	8020b38 <__aeabi_dcmpeq>
 8040100:	2800      	cmp	r0, #0
 8040102:	d1ac      	bne.n	804005e <_strtod_l+0x566>
 8040104:	9b07      	ldr	r3, [sp, #28]
 8040106:	9300      	str	r3, [sp, #0]
 8040108:	9a05      	ldr	r2, [sp, #20]
 804010a:	9908      	ldr	r1, [sp, #32]
 804010c:	4623      	mov	r3, r4
 804010e:	4648      	mov	r0, r9
 8040110:	f000 fefa 	bl	8040f08 <__s2b>
 8040114:	9007      	str	r0, [sp, #28]
 8040116:	2800      	cmp	r0, #0
 8040118:	f43f af08 	beq.w	803ff2c <_strtod_l+0x434>
 804011c:	9a06      	ldr	r2, [sp, #24]
 804011e:	9b06      	ldr	r3, [sp, #24]
 8040120:	2a00      	cmp	r2, #0
 8040122:	f1c3 0300 	rsb	r3, r3, #0
 8040126:	bfa8      	it	ge
 8040128:	2300      	movge	r3, #0
 804012a:	930e      	str	r3, [sp, #56]	; 0x38
 804012c:	2400      	movs	r4, #0
 804012e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8040132:	9316      	str	r3, [sp, #88]	; 0x58
 8040134:	46a0      	mov	r8, r4
 8040136:	9b07      	ldr	r3, [sp, #28]
 8040138:	4648      	mov	r0, r9
 804013a:	6859      	ldr	r1, [r3, #4]
 804013c:	f000 fe5e 	bl	8040dfc <_Balloc>
 8040140:	9005      	str	r0, [sp, #20]
 8040142:	2800      	cmp	r0, #0
 8040144:	f43f aef6 	beq.w	803ff34 <_strtod_l+0x43c>
 8040148:	9b07      	ldr	r3, [sp, #28]
 804014a:	691a      	ldr	r2, [r3, #16]
 804014c:	3202      	adds	r2, #2
 804014e:	f103 010c 	add.w	r1, r3, #12
 8040152:	0092      	lsls	r2, r2, #2
 8040154:	300c      	adds	r0, #12
 8040156:	f7ff fc52 	bl	803f9fe <memcpy>
 804015a:	aa1e      	add	r2, sp, #120	; 0x78
 804015c:	a91d      	add	r1, sp, #116	; 0x74
 804015e:	ec4b ab10 	vmov	d0, sl, fp
 8040162:	4648      	mov	r0, r9
 8040164:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8040168:	f001 f98a 	bl	8041480 <__d2b>
 804016c:	901c      	str	r0, [sp, #112]	; 0x70
 804016e:	2800      	cmp	r0, #0
 8040170:	f43f aee0 	beq.w	803ff34 <_strtod_l+0x43c>
 8040174:	2101      	movs	r1, #1
 8040176:	4648      	mov	r0, r9
 8040178:	f000 ff52 	bl	8041020 <__i2b>
 804017c:	4680      	mov	r8, r0
 804017e:	2800      	cmp	r0, #0
 8040180:	f43f aed8 	beq.w	803ff34 <_strtod_l+0x43c>
 8040184:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8040186:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8040188:	2e00      	cmp	r6, #0
 804018a:	bfab      	itete	ge
 804018c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 804018e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8040190:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8040192:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8040194:	bfac      	ite	ge
 8040196:	18f7      	addge	r7, r6, r3
 8040198:	1b9d      	sublt	r5, r3, r6
 804019a:	9b04      	ldr	r3, [sp, #16]
 804019c:	1af6      	subs	r6, r6, r3
 804019e:	4416      	add	r6, r2
 80401a0:	4b63      	ldr	r3, [pc, #396]	; (8040330 <_strtod_l+0x838>)
 80401a2:	3e01      	subs	r6, #1
 80401a4:	429e      	cmp	r6, r3
 80401a6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80401aa:	f280 80af 	bge.w	804030c <_strtod_l+0x814>
 80401ae:	1b9b      	subs	r3, r3, r6
 80401b0:	2b1f      	cmp	r3, #31
 80401b2:	eba2 0203 	sub.w	r2, r2, r3
 80401b6:	f04f 0101 	mov.w	r1, #1
 80401ba:	f300 809b 	bgt.w	80402f4 <_strtod_l+0x7fc>
 80401be:	fa01 f303 	lsl.w	r3, r1, r3
 80401c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80401c4:	2300      	movs	r3, #0
 80401c6:	930a      	str	r3, [sp, #40]	; 0x28
 80401c8:	18be      	adds	r6, r7, r2
 80401ca:	9b04      	ldr	r3, [sp, #16]
 80401cc:	42b7      	cmp	r7, r6
 80401ce:	4415      	add	r5, r2
 80401d0:	441d      	add	r5, r3
 80401d2:	463b      	mov	r3, r7
 80401d4:	bfa8      	it	ge
 80401d6:	4633      	movge	r3, r6
 80401d8:	42ab      	cmp	r3, r5
 80401da:	bfa8      	it	ge
 80401dc:	462b      	movge	r3, r5
 80401de:	2b00      	cmp	r3, #0
 80401e0:	bfc2      	ittt	gt
 80401e2:	1af6      	subgt	r6, r6, r3
 80401e4:	1aed      	subgt	r5, r5, r3
 80401e6:	1aff      	subgt	r7, r7, r3
 80401e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80401ea:	b1bb      	cbz	r3, 804021c <_strtod_l+0x724>
 80401ec:	4641      	mov	r1, r8
 80401ee:	461a      	mov	r2, r3
 80401f0:	4648      	mov	r0, r9
 80401f2:	f000 ffb5 	bl	8041160 <__pow5mult>
 80401f6:	4680      	mov	r8, r0
 80401f8:	2800      	cmp	r0, #0
 80401fa:	f43f ae9b 	beq.w	803ff34 <_strtod_l+0x43c>
 80401fe:	4601      	mov	r1, r0
 8040200:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8040202:	4648      	mov	r0, r9
 8040204:	f000 ff15 	bl	8041032 <__multiply>
 8040208:	900c      	str	r0, [sp, #48]	; 0x30
 804020a:	2800      	cmp	r0, #0
 804020c:	f43f ae92 	beq.w	803ff34 <_strtod_l+0x43c>
 8040210:	991c      	ldr	r1, [sp, #112]	; 0x70
 8040212:	4648      	mov	r0, r9
 8040214:	f000 fe26 	bl	8040e64 <_Bfree>
 8040218:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 804021a:	931c      	str	r3, [sp, #112]	; 0x70
 804021c:	2e00      	cmp	r6, #0
 804021e:	dc7a      	bgt.n	8040316 <_strtod_l+0x81e>
 8040220:	9b06      	ldr	r3, [sp, #24]
 8040222:	2b00      	cmp	r3, #0
 8040224:	dd08      	ble.n	8040238 <_strtod_l+0x740>
 8040226:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8040228:	9905      	ldr	r1, [sp, #20]
 804022a:	4648      	mov	r0, r9
 804022c:	f000 ff98 	bl	8041160 <__pow5mult>
 8040230:	9005      	str	r0, [sp, #20]
 8040232:	2800      	cmp	r0, #0
 8040234:	f43f ae7e 	beq.w	803ff34 <_strtod_l+0x43c>
 8040238:	2d00      	cmp	r5, #0
 804023a:	dd08      	ble.n	804024e <_strtod_l+0x756>
 804023c:	462a      	mov	r2, r5
 804023e:	9905      	ldr	r1, [sp, #20]
 8040240:	4648      	mov	r0, r9
 8040242:	f000 ffdb 	bl	80411fc <__lshift>
 8040246:	9005      	str	r0, [sp, #20]
 8040248:	2800      	cmp	r0, #0
 804024a:	f43f ae73 	beq.w	803ff34 <_strtod_l+0x43c>
 804024e:	2f00      	cmp	r7, #0
 8040250:	dd08      	ble.n	8040264 <_strtod_l+0x76c>
 8040252:	4641      	mov	r1, r8
 8040254:	463a      	mov	r2, r7
 8040256:	4648      	mov	r0, r9
 8040258:	f000 ffd0 	bl	80411fc <__lshift>
 804025c:	4680      	mov	r8, r0
 804025e:	2800      	cmp	r0, #0
 8040260:	f43f ae68 	beq.w	803ff34 <_strtod_l+0x43c>
 8040264:	9a05      	ldr	r2, [sp, #20]
 8040266:	991c      	ldr	r1, [sp, #112]	; 0x70
 8040268:	4648      	mov	r0, r9
 804026a:	f001 f835 	bl	80412d8 <__mdiff>
 804026e:	4604      	mov	r4, r0
 8040270:	2800      	cmp	r0, #0
 8040272:	f43f ae5f 	beq.w	803ff34 <_strtod_l+0x43c>
 8040276:	68c3      	ldr	r3, [r0, #12]
 8040278:	930c      	str	r3, [sp, #48]	; 0x30
 804027a:	2300      	movs	r3, #0
 804027c:	60c3      	str	r3, [r0, #12]
 804027e:	4641      	mov	r1, r8
 8040280:	f001 f810 	bl	80412a4 <__mcmp>
 8040284:	2800      	cmp	r0, #0
 8040286:	da55      	bge.n	8040334 <_strtod_l+0x83c>
 8040288:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 804028a:	b9e3      	cbnz	r3, 80402c6 <_strtod_l+0x7ce>
 804028c:	f1ba 0f00 	cmp.w	sl, #0
 8040290:	d119      	bne.n	80402c6 <_strtod_l+0x7ce>
 8040292:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8040296:	b9b3      	cbnz	r3, 80402c6 <_strtod_l+0x7ce>
 8040298:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 804029c:	0d1b      	lsrs	r3, r3, #20
 804029e:	051b      	lsls	r3, r3, #20
 80402a0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80402a4:	d90f      	bls.n	80402c6 <_strtod_l+0x7ce>
 80402a6:	6963      	ldr	r3, [r4, #20]
 80402a8:	b913      	cbnz	r3, 80402b0 <_strtod_l+0x7b8>
 80402aa:	6923      	ldr	r3, [r4, #16]
 80402ac:	2b01      	cmp	r3, #1
 80402ae:	dd0a      	ble.n	80402c6 <_strtod_l+0x7ce>
 80402b0:	4621      	mov	r1, r4
 80402b2:	2201      	movs	r2, #1
 80402b4:	4648      	mov	r0, r9
 80402b6:	f000 ffa1 	bl	80411fc <__lshift>
 80402ba:	4641      	mov	r1, r8
 80402bc:	4604      	mov	r4, r0
 80402be:	f000 fff1 	bl	80412a4 <__mcmp>
 80402c2:	2800      	cmp	r0, #0
 80402c4:	dc67      	bgt.n	8040396 <_strtod_l+0x89e>
 80402c6:	9b04      	ldr	r3, [sp, #16]
 80402c8:	2b00      	cmp	r3, #0
 80402ca:	d171      	bne.n	80403b0 <_strtod_l+0x8b8>
 80402cc:	e63d      	b.n	803ff4a <_strtod_l+0x452>
 80402ce:	f018 0f01 	tst.w	r8, #1
 80402d2:	d004      	beq.n	80402de <_strtod_l+0x7e6>
 80402d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80402d8:	f7e0 f9c6 	bl	8020668 <__aeabi_dmul>
 80402dc:	2301      	movs	r3, #1
 80402de:	ea4f 0868 	mov.w	r8, r8, asr #1
 80402e2:	3508      	adds	r5, #8
 80402e4:	e6e5      	b.n	80400b2 <_strtod_l+0x5ba>
 80402e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80402ea:	fa02 f303 	lsl.w	r3, r2, r3
 80402ee:	ea03 0a0a 	and.w	sl, r3, sl
 80402f2:	e6ff      	b.n	80400f4 <_strtod_l+0x5fc>
 80402f4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80402f8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80402fc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8040300:	36e2      	adds	r6, #226	; 0xe2
 8040302:	fa01 f306 	lsl.w	r3, r1, r6
 8040306:	930a      	str	r3, [sp, #40]	; 0x28
 8040308:	910f      	str	r1, [sp, #60]	; 0x3c
 804030a:	e75d      	b.n	80401c8 <_strtod_l+0x6d0>
 804030c:	2300      	movs	r3, #0
 804030e:	930a      	str	r3, [sp, #40]	; 0x28
 8040310:	2301      	movs	r3, #1
 8040312:	930f      	str	r3, [sp, #60]	; 0x3c
 8040314:	e758      	b.n	80401c8 <_strtod_l+0x6d0>
 8040316:	4632      	mov	r2, r6
 8040318:	991c      	ldr	r1, [sp, #112]	; 0x70
 804031a:	4648      	mov	r0, r9
 804031c:	f000 ff6e 	bl	80411fc <__lshift>
 8040320:	901c      	str	r0, [sp, #112]	; 0x70
 8040322:	2800      	cmp	r0, #0
 8040324:	f47f af7c 	bne.w	8040220 <_strtod_l+0x728>
 8040328:	e604      	b.n	803ff34 <_strtod_l+0x43c>
 804032a:	bf00      	nop
 804032c:	08056388 	.word	0x08056388
 8040330:	fffffc02 	.word	0xfffffc02
 8040334:	465d      	mov	r5, fp
 8040336:	f040 8086 	bne.w	8040446 <_strtod_l+0x94e>
 804033a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 804033c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8040340:	b32a      	cbz	r2, 804038e <_strtod_l+0x896>
 8040342:	4aaf      	ldr	r2, [pc, #700]	; (8040600 <_strtod_l+0xb08>)
 8040344:	4293      	cmp	r3, r2
 8040346:	d153      	bne.n	80403f0 <_strtod_l+0x8f8>
 8040348:	9b04      	ldr	r3, [sp, #16]
 804034a:	4650      	mov	r0, sl
 804034c:	b1d3      	cbz	r3, 8040384 <_strtod_l+0x88c>
 804034e:	4aad      	ldr	r2, [pc, #692]	; (8040604 <_strtod_l+0xb0c>)
 8040350:	402a      	ands	r2, r5
 8040352:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8040356:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 804035a:	d816      	bhi.n	804038a <_strtod_l+0x892>
 804035c:	0d12      	lsrs	r2, r2, #20
 804035e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8040362:	fa01 f303 	lsl.w	r3, r1, r3
 8040366:	4298      	cmp	r0, r3
 8040368:	d142      	bne.n	80403f0 <_strtod_l+0x8f8>
 804036a:	4ba7      	ldr	r3, [pc, #668]	; (8040608 <_strtod_l+0xb10>)
 804036c:	429d      	cmp	r5, r3
 804036e:	d102      	bne.n	8040376 <_strtod_l+0x87e>
 8040370:	3001      	adds	r0, #1
 8040372:	f43f addf 	beq.w	803ff34 <_strtod_l+0x43c>
 8040376:	4ba3      	ldr	r3, [pc, #652]	; (8040604 <_strtod_l+0xb0c>)
 8040378:	402b      	ands	r3, r5
 804037a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 804037e:	f04f 0a00 	mov.w	sl, #0
 8040382:	e7a0      	b.n	80402c6 <_strtod_l+0x7ce>
 8040384:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8040388:	e7ed      	b.n	8040366 <_strtod_l+0x86e>
 804038a:	460b      	mov	r3, r1
 804038c:	e7eb      	b.n	8040366 <_strtod_l+0x86e>
 804038e:	bb7b      	cbnz	r3, 80403f0 <_strtod_l+0x8f8>
 8040390:	f1ba 0f00 	cmp.w	sl, #0
 8040394:	d12c      	bne.n	80403f0 <_strtod_l+0x8f8>
 8040396:	9904      	ldr	r1, [sp, #16]
 8040398:	4a9a      	ldr	r2, [pc, #616]	; (8040604 <_strtod_l+0xb0c>)
 804039a:	465b      	mov	r3, fp
 804039c:	b1f1      	cbz	r1, 80403dc <_strtod_l+0x8e4>
 804039e:	ea02 010b 	and.w	r1, r2, fp
 80403a2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80403a6:	dc19      	bgt.n	80403dc <_strtod_l+0x8e4>
 80403a8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80403ac:	f77f ae5b 	ble.w	8040066 <_strtod_l+0x56e>
 80403b0:	4a96      	ldr	r2, [pc, #600]	; (804060c <_strtod_l+0xb14>)
 80403b2:	2300      	movs	r3, #0
 80403b4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80403b8:	4650      	mov	r0, sl
 80403ba:	4659      	mov	r1, fp
 80403bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80403c0:	f7e0 f952 	bl	8020668 <__aeabi_dmul>
 80403c4:	4682      	mov	sl, r0
 80403c6:	468b      	mov	fp, r1
 80403c8:	2900      	cmp	r1, #0
 80403ca:	f47f adbe 	bne.w	803ff4a <_strtod_l+0x452>
 80403ce:	2800      	cmp	r0, #0
 80403d0:	f47f adbb 	bne.w	803ff4a <_strtod_l+0x452>
 80403d4:	2322      	movs	r3, #34	; 0x22
 80403d6:	f8c9 3000 	str.w	r3, [r9]
 80403da:	e5b6      	b.n	803ff4a <_strtod_l+0x452>
 80403dc:	4013      	ands	r3, r2
 80403de:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80403e2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80403e6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80403ea:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80403ee:	e76a      	b.n	80402c6 <_strtod_l+0x7ce>
 80403f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80403f2:	b193      	cbz	r3, 804041a <_strtod_l+0x922>
 80403f4:	422b      	tst	r3, r5
 80403f6:	f43f af66 	beq.w	80402c6 <_strtod_l+0x7ce>
 80403fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80403fc:	9a04      	ldr	r2, [sp, #16]
 80403fe:	4650      	mov	r0, sl
 8040400:	4659      	mov	r1, fp
 8040402:	b173      	cbz	r3, 8040422 <_strtod_l+0x92a>
 8040404:	f7ff fb5a 	bl	803fabc <sulp>
 8040408:	4602      	mov	r2, r0
 804040a:	460b      	mov	r3, r1
 804040c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8040410:	f7df ff74 	bl	80202fc <__adddf3>
 8040414:	4682      	mov	sl, r0
 8040416:	468b      	mov	fp, r1
 8040418:	e755      	b.n	80402c6 <_strtod_l+0x7ce>
 804041a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 804041c:	ea13 0f0a 	tst.w	r3, sl
 8040420:	e7e9      	b.n	80403f6 <_strtod_l+0x8fe>
 8040422:	f7ff fb4b 	bl	803fabc <sulp>
 8040426:	4602      	mov	r2, r0
 8040428:	460b      	mov	r3, r1
 804042a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 804042e:	f7df ff63 	bl	80202f8 <__aeabi_dsub>
 8040432:	2200      	movs	r2, #0
 8040434:	2300      	movs	r3, #0
 8040436:	4682      	mov	sl, r0
 8040438:	468b      	mov	fp, r1
 804043a:	f7e0 fb7d 	bl	8020b38 <__aeabi_dcmpeq>
 804043e:	2800      	cmp	r0, #0
 8040440:	f47f ae11 	bne.w	8040066 <_strtod_l+0x56e>
 8040444:	e73f      	b.n	80402c6 <_strtod_l+0x7ce>
 8040446:	4641      	mov	r1, r8
 8040448:	4620      	mov	r0, r4
 804044a:	f001 f868 	bl	804151e <__ratio>
 804044e:	ec57 6b10 	vmov	r6, r7, d0
 8040452:	2200      	movs	r2, #0
 8040454:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8040458:	ee10 0a10 	vmov	r0, s0
 804045c:	4639      	mov	r1, r7
 804045e:	f7e0 fb7f 	bl	8020b60 <__aeabi_dcmple>
 8040462:	2800      	cmp	r0, #0
 8040464:	d077      	beq.n	8040556 <_strtod_l+0xa5e>
 8040466:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8040468:	2b00      	cmp	r3, #0
 804046a:	d04a      	beq.n	8040502 <_strtod_l+0xa0a>
 804046c:	4b68      	ldr	r3, [pc, #416]	; (8040610 <_strtod_l+0xb18>)
 804046e:	2200      	movs	r2, #0
 8040470:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8040474:	4f66      	ldr	r7, [pc, #408]	; (8040610 <_strtod_l+0xb18>)
 8040476:	2600      	movs	r6, #0
 8040478:	4b62      	ldr	r3, [pc, #392]	; (8040604 <_strtod_l+0xb0c>)
 804047a:	402b      	ands	r3, r5
 804047c:	930f      	str	r3, [sp, #60]	; 0x3c
 804047e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8040480:	4b64      	ldr	r3, [pc, #400]	; (8040614 <_strtod_l+0xb1c>)
 8040482:	429a      	cmp	r2, r3
 8040484:	f040 80ce 	bne.w	8040624 <_strtod_l+0xb2c>
 8040488:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 804048c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8040490:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8040494:	ec4b ab10 	vmov	d0, sl, fp
 8040498:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 804049c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80404a0:	f000 ff78 	bl	8041394 <__ulp>
 80404a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80404a8:	ec53 2b10 	vmov	r2, r3, d0
 80404ac:	f7e0 f8dc 	bl	8020668 <__aeabi_dmul>
 80404b0:	4652      	mov	r2, sl
 80404b2:	465b      	mov	r3, fp
 80404b4:	f7df ff22 	bl	80202fc <__adddf3>
 80404b8:	460b      	mov	r3, r1
 80404ba:	4952      	ldr	r1, [pc, #328]	; (8040604 <_strtod_l+0xb0c>)
 80404bc:	4a56      	ldr	r2, [pc, #344]	; (8040618 <_strtod_l+0xb20>)
 80404be:	4019      	ands	r1, r3
 80404c0:	4291      	cmp	r1, r2
 80404c2:	4682      	mov	sl, r0
 80404c4:	d95b      	bls.n	804057e <_strtod_l+0xa86>
 80404c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80404c8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80404cc:	4293      	cmp	r3, r2
 80404ce:	d103      	bne.n	80404d8 <_strtod_l+0x9e0>
 80404d0:	9b08      	ldr	r3, [sp, #32]
 80404d2:	3301      	adds	r3, #1
 80404d4:	f43f ad2e 	beq.w	803ff34 <_strtod_l+0x43c>
 80404d8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8040608 <_strtod_l+0xb10>
 80404dc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80404e0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80404e2:	4648      	mov	r0, r9
 80404e4:	f000 fcbe 	bl	8040e64 <_Bfree>
 80404e8:	9905      	ldr	r1, [sp, #20]
 80404ea:	4648      	mov	r0, r9
 80404ec:	f000 fcba 	bl	8040e64 <_Bfree>
 80404f0:	4641      	mov	r1, r8
 80404f2:	4648      	mov	r0, r9
 80404f4:	f000 fcb6 	bl	8040e64 <_Bfree>
 80404f8:	4621      	mov	r1, r4
 80404fa:	4648      	mov	r0, r9
 80404fc:	f000 fcb2 	bl	8040e64 <_Bfree>
 8040500:	e619      	b.n	8040136 <_strtod_l+0x63e>
 8040502:	f1ba 0f00 	cmp.w	sl, #0
 8040506:	d11a      	bne.n	804053e <_strtod_l+0xa46>
 8040508:	f3cb 0313 	ubfx	r3, fp, #0, #20
 804050c:	b9eb      	cbnz	r3, 804054a <_strtod_l+0xa52>
 804050e:	2200      	movs	r2, #0
 8040510:	4b3f      	ldr	r3, [pc, #252]	; (8040610 <_strtod_l+0xb18>)
 8040512:	4630      	mov	r0, r6
 8040514:	4639      	mov	r1, r7
 8040516:	f7e0 fb19 	bl	8020b4c <__aeabi_dcmplt>
 804051a:	b9c8      	cbnz	r0, 8040550 <_strtod_l+0xa58>
 804051c:	4630      	mov	r0, r6
 804051e:	4639      	mov	r1, r7
 8040520:	2200      	movs	r2, #0
 8040522:	4b3e      	ldr	r3, [pc, #248]	; (804061c <_strtod_l+0xb24>)
 8040524:	f7e0 f8a0 	bl	8020668 <__aeabi_dmul>
 8040528:	4606      	mov	r6, r0
 804052a:	460f      	mov	r7, r1
 804052c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8040530:	9618      	str	r6, [sp, #96]	; 0x60
 8040532:	9319      	str	r3, [sp, #100]	; 0x64
 8040534:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8040538:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 804053c:	e79c      	b.n	8040478 <_strtod_l+0x980>
 804053e:	f1ba 0f01 	cmp.w	sl, #1
 8040542:	d102      	bne.n	804054a <_strtod_l+0xa52>
 8040544:	2d00      	cmp	r5, #0
 8040546:	f43f ad8e 	beq.w	8040066 <_strtod_l+0x56e>
 804054a:	2200      	movs	r2, #0
 804054c:	4b34      	ldr	r3, [pc, #208]	; (8040620 <_strtod_l+0xb28>)
 804054e:	e78f      	b.n	8040470 <_strtod_l+0x978>
 8040550:	2600      	movs	r6, #0
 8040552:	4f32      	ldr	r7, [pc, #200]	; (804061c <_strtod_l+0xb24>)
 8040554:	e7ea      	b.n	804052c <_strtod_l+0xa34>
 8040556:	4b31      	ldr	r3, [pc, #196]	; (804061c <_strtod_l+0xb24>)
 8040558:	4630      	mov	r0, r6
 804055a:	4639      	mov	r1, r7
 804055c:	2200      	movs	r2, #0
 804055e:	f7e0 f883 	bl	8020668 <__aeabi_dmul>
 8040562:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8040564:	4606      	mov	r6, r0
 8040566:	460f      	mov	r7, r1
 8040568:	b933      	cbnz	r3, 8040578 <_strtod_l+0xa80>
 804056a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 804056e:	9010      	str	r0, [sp, #64]	; 0x40
 8040570:	9311      	str	r3, [sp, #68]	; 0x44
 8040572:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8040576:	e7df      	b.n	8040538 <_strtod_l+0xa40>
 8040578:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 804057c:	e7f9      	b.n	8040572 <_strtod_l+0xa7a>
 804057e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8040582:	9b04      	ldr	r3, [sp, #16]
 8040584:	2b00      	cmp	r3, #0
 8040586:	d1ab      	bne.n	80404e0 <_strtod_l+0x9e8>
 8040588:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 804058c:	0d1b      	lsrs	r3, r3, #20
 804058e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8040590:	051b      	lsls	r3, r3, #20
 8040592:	429a      	cmp	r2, r3
 8040594:	465d      	mov	r5, fp
 8040596:	d1a3      	bne.n	80404e0 <_strtod_l+0x9e8>
 8040598:	4639      	mov	r1, r7
 804059a:	4630      	mov	r0, r6
 804059c:	f7e0 fb14 	bl	8020bc8 <__aeabi_d2iz>
 80405a0:	f7df fff8 	bl	8020594 <__aeabi_i2d>
 80405a4:	460b      	mov	r3, r1
 80405a6:	4602      	mov	r2, r0
 80405a8:	4639      	mov	r1, r7
 80405aa:	4630      	mov	r0, r6
 80405ac:	f7df fea4 	bl	80202f8 <__aeabi_dsub>
 80405b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80405b2:	4606      	mov	r6, r0
 80405b4:	460f      	mov	r7, r1
 80405b6:	b933      	cbnz	r3, 80405c6 <_strtod_l+0xace>
 80405b8:	f1ba 0f00 	cmp.w	sl, #0
 80405bc:	d103      	bne.n	80405c6 <_strtod_l+0xace>
 80405be:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80405c2:	2d00      	cmp	r5, #0
 80405c4:	d06d      	beq.n	80406a2 <_strtod_l+0xbaa>
 80405c6:	a30a      	add	r3, pc, #40	; (adr r3, 80405f0 <_strtod_l+0xaf8>)
 80405c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80405cc:	4630      	mov	r0, r6
 80405ce:	4639      	mov	r1, r7
 80405d0:	f7e0 fabc 	bl	8020b4c <__aeabi_dcmplt>
 80405d4:	2800      	cmp	r0, #0
 80405d6:	f47f acb8 	bne.w	803ff4a <_strtod_l+0x452>
 80405da:	a307      	add	r3, pc, #28	; (adr r3, 80405f8 <_strtod_l+0xb00>)
 80405dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80405e0:	4630      	mov	r0, r6
 80405e2:	4639      	mov	r1, r7
 80405e4:	f7e0 fad0 	bl	8020b88 <__aeabi_dcmpgt>
 80405e8:	2800      	cmp	r0, #0
 80405ea:	f43f af79 	beq.w	80404e0 <_strtod_l+0x9e8>
 80405ee:	e4ac      	b.n	803ff4a <_strtod_l+0x452>
 80405f0:	94a03595 	.word	0x94a03595
 80405f4:	3fdfffff 	.word	0x3fdfffff
 80405f8:	35afe535 	.word	0x35afe535
 80405fc:	3fe00000 	.word	0x3fe00000
 8040600:	000fffff 	.word	0x000fffff
 8040604:	7ff00000 	.word	0x7ff00000
 8040608:	7fefffff 	.word	0x7fefffff
 804060c:	39500000 	.word	0x39500000
 8040610:	3ff00000 	.word	0x3ff00000
 8040614:	7fe00000 	.word	0x7fe00000
 8040618:	7c9fffff 	.word	0x7c9fffff
 804061c:	3fe00000 	.word	0x3fe00000
 8040620:	bff00000 	.word	0xbff00000
 8040624:	9b04      	ldr	r3, [sp, #16]
 8040626:	b333      	cbz	r3, 8040676 <_strtod_l+0xb7e>
 8040628:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 804062a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 804062e:	d822      	bhi.n	8040676 <_strtod_l+0xb7e>
 8040630:	a327      	add	r3, pc, #156	; (adr r3, 80406d0 <_strtod_l+0xbd8>)
 8040632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8040636:	4630      	mov	r0, r6
 8040638:	4639      	mov	r1, r7
 804063a:	f7e0 fa91 	bl	8020b60 <__aeabi_dcmple>
 804063e:	b1a0      	cbz	r0, 804066a <_strtod_l+0xb72>
 8040640:	4639      	mov	r1, r7
 8040642:	4630      	mov	r0, r6
 8040644:	f7e0 fae8 	bl	8020c18 <__aeabi_d2uiz>
 8040648:	2800      	cmp	r0, #0
 804064a:	bf08      	it	eq
 804064c:	2001      	moveq	r0, #1
 804064e:	f7df ff91 	bl	8020574 <__aeabi_ui2d>
 8040652:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8040654:	4606      	mov	r6, r0
 8040656:	460f      	mov	r7, r1
 8040658:	bb03      	cbnz	r3, 804069c <_strtod_l+0xba4>
 804065a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 804065e:	9012      	str	r0, [sp, #72]	; 0x48
 8040660:	9313      	str	r3, [sp, #76]	; 0x4c
 8040662:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8040666:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 804066a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 804066c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 804066e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8040672:	1a9b      	subs	r3, r3, r2
 8040674:	930b      	str	r3, [sp, #44]	; 0x2c
 8040676:	ed9d 0b08 	vldr	d0, [sp, #32]
 804067a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 804067e:	f000 fe89 	bl	8041394 <__ulp>
 8040682:	4650      	mov	r0, sl
 8040684:	ec53 2b10 	vmov	r2, r3, d0
 8040688:	4659      	mov	r1, fp
 804068a:	f7df ffed 	bl	8020668 <__aeabi_dmul>
 804068e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8040692:	f7df fe33 	bl	80202fc <__adddf3>
 8040696:	4682      	mov	sl, r0
 8040698:	468b      	mov	fp, r1
 804069a:	e772      	b.n	8040582 <_strtod_l+0xa8a>
 804069c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80406a0:	e7df      	b.n	8040662 <_strtod_l+0xb6a>
 80406a2:	a30d      	add	r3, pc, #52	; (adr r3, 80406d8 <_strtod_l+0xbe0>)
 80406a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80406a8:	f7e0 fa50 	bl	8020b4c <__aeabi_dcmplt>
 80406ac:	e79c      	b.n	80405e8 <_strtod_l+0xaf0>
 80406ae:	2300      	movs	r3, #0
 80406b0:	930d      	str	r3, [sp, #52]	; 0x34
 80406b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80406b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80406b6:	6013      	str	r3, [r2, #0]
 80406b8:	f7ff ba61 	b.w	803fb7e <_strtod_l+0x86>
 80406bc:	2b65      	cmp	r3, #101	; 0x65
 80406be:	f04f 0200 	mov.w	r2, #0
 80406c2:	f43f ab4e 	beq.w	803fd62 <_strtod_l+0x26a>
 80406c6:	2101      	movs	r1, #1
 80406c8:	4614      	mov	r4, r2
 80406ca:	9104      	str	r1, [sp, #16]
 80406cc:	f7ff bacb 	b.w	803fc66 <_strtod_l+0x16e>
 80406d0:	ffc00000 	.word	0xffc00000
 80406d4:	41dfffff 	.word	0x41dfffff
 80406d8:	94a03595 	.word	0x94a03595
 80406dc:	3fcfffff 	.word	0x3fcfffff

080406e0 <strtof>:
 80406e0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80406e4:	4e24      	ldr	r6, [pc, #144]	; (8040778 <strtof+0x98>)
 80406e6:	4a25      	ldr	r2, [pc, #148]	; (804077c <strtof+0x9c>)
 80406e8:	6834      	ldr	r4, [r6, #0]
 80406ea:	6a23      	ldr	r3, [r4, #32]
 80406ec:	ed2d 8b02 	vpush	{d8}
 80406f0:	2b00      	cmp	r3, #0
 80406f2:	bf08      	it	eq
 80406f4:	4613      	moveq	r3, r2
 80406f6:	460a      	mov	r2, r1
 80406f8:	4601      	mov	r1, r0
 80406fa:	4620      	mov	r0, r4
 80406fc:	f7ff f9fc 	bl	803faf8 <_strtod_l>
 8040700:	ec55 4b10 	vmov	r4, r5, d0
 8040704:	ee10 2a10 	vmov	r2, s0
 8040708:	462b      	mov	r3, r5
 804070a:	ee10 0a10 	vmov	r0, s0
 804070e:	4629      	mov	r1, r5
 8040710:	f7e0 fa44 	bl	8020b9c <__aeabi_dcmpun>
 8040714:	b130      	cbz	r0, 8040724 <strtof+0x44>
 8040716:	ecbd 8b02 	vpop	{d8}
 804071a:	2000      	movs	r0, #0
 804071c:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
 8040720:	f001 babe 	b.w	8041ca0 <nanf>
 8040724:	4620      	mov	r0, r4
 8040726:	4629      	mov	r1, r5
 8040728:	f7e0 fa96 	bl	8020c58 <__aeabi_d2f>
 804072c:	ee08 0a10 	vmov	s16, r0
 8040730:	eddf 7a13 	vldr	s15, [pc, #76]	; 8040780 <strtof+0xa0>
 8040734:	eeb0 7ac8 	vabs.f32	s14, s16
 8040738:	eeb4 7a67 	vcmp.f32	s14, s15
 804073c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8040740:	dd14      	ble.n	804076c <strtof+0x8c>
 8040742:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
 8040746:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 804074a:	4b0e      	ldr	r3, [pc, #56]	; (8040784 <strtof+0xa4>)
 804074c:	4620      	mov	r0, r4
 804074e:	4649      	mov	r1, r9
 8040750:	f7e0 fa24 	bl	8020b9c <__aeabi_dcmpun>
 8040754:	b938      	cbnz	r0, 8040766 <strtof+0x86>
 8040756:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 804075a:	4b0a      	ldr	r3, [pc, #40]	; (8040784 <strtof+0xa4>)
 804075c:	4620      	mov	r0, r4
 804075e:	4649      	mov	r1, r9
 8040760:	f7e0 f9fe 	bl	8020b60 <__aeabi_dcmple>
 8040764:	b110      	cbz	r0, 804076c <strtof+0x8c>
 8040766:	6833      	ldr	r3, [r6, #0]
 8040768:	2222      	movs	r2, #34	; 0x22
 804076a:	601a      	str	r2, [r3, #0]
 804076c:	eeb0 0a48 	vmov.f32	s0, s16
 8040770:	ecbd 8b02 	vpop	{d8}
 8040774:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8040778:	200002c4 	.word	0x200002c4
 804077c:	20000328 	.word	0x20000328
 8040780:	7f7fffff 	.word	0x7f7fffff
 8040784:	7fefffff 	.word	0x7fefffff

08040788 <rshift>:
 8040788:	b5f0      	push	{r4, r5, r6, r7, lr}
 804078a:	6906      	ldr	r6, [r0, #16]
 804078c:	114b      	asrs	r3, r1, #5
 804078e:	429e      	cmp	r6, r3
 8040790:	f100 0414 	add.w	r4, r0, #20
 8040794:	dd30      	ble.n	80407f8 <rshift+0x70>
 8040796:	f011 011f 	ands.w	r1, r1, #31
 804079a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 804079e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80407a2:	d108      	bne.n	80407b6 <rshift+0x2e>
 80407a4:	4621      	mov	r1, r4
 80407a6:	42b2      	cmp	r2, r6
 80407a8:	460b      	mov	r3, r1
 80407aa:	d211      	bcs.n	80407d0 <rshift+0x48>
 80407ac:	f852 3b04 	ldr.w	r3, [r2], #4
 80407b0:	f841 3b04 	str.w	r3, [r1], #4
 80407b4:	e7f7      	b.n	80407a6 <rshift+0x1e>
 80407b6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80407ba:	f1c1 0c20 	rsb	ip, r1, #32
 80407be:	40cd      	lsrs	r5, r1
 80407c0:	3204      	adds	r2, #4
 80407c2:	4623      	mov	r3, r4
 80407c4:	42b2      	cmp	r2, r6
 80407c6:	4617      	mov	r7, r2
 80407c8:	d30c      	bcc.n	80407e4 <rshift+0x5c>
 80407ca:	601d      	str	r5, [r3, #0]
 80407cc:	b105      	cbz	r5, 80407d0 <rshift+0x48>
 80407ce:	3304      	adds	r3, #4
 80407d0:	1b1a      	subs	r2, r3, r4
 80407d2:	42a3      	cmp	r3, r4
 80407d4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80407d8:	bf08      	it	eq
 80407da:	2300      	moveq	r3, #0
 80407dc:	6102      	str	r2, [r0, #16]
 80407de:	bf08      	it	eq
 80407e0:	6143      	streq	r3, [r0, #20]
 80407e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80407e4:	683f      	ldr	r7, [r7, #0]
 80407e6:	fa07 f70c 	lsl.w	r7, r7, ip
 80407ea:	433d      	orrs	r5, r7
 80407ec:	f843 5b04 	str.w	r5, [r3], #4
 80407f0:	f852 5b04 	ldr.w	r5, [r2], #4
 80407f4:	40cd      	lsrs	r5, r1
 80407f6:	e7e5      	b.n	80407c4 <rshift+0x3c>
 80407f8:	4623      	mov	r3, r4
 80407fa:	e7e9      	b.n	80407d0 <rshift+0x48>

080407fc <__hexdig_fun>:
 80407fc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8040800:	2b09      	cmp	r3, #9
 8040802:	d802      	bhi.n	804080a <__hexdig_fun+0xe>
 8040804:	3820      	subs	r0, #32
 8040806:	b2c0      	uxtb	r0, r0
 8040808:	4770      	bx	lr
 804080a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 804080e:	2b05      	cmp	r3, #5
 8040810:	d801      	bhi.n	8040816 <__hexdig_fun+0x1a>
 8040812:	3847      	subs	r0, #71	; 0x47
 8040814:	e7f7      	b.n	8040806 <__hexdig_fun+0xa>
 8040816:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 804081a:	2b05      	cmp	r3, #5
 804081c:	d801      	bhi.n	8040822 <__hexdig_fun+0x26>
 804081e:	3827      	subs	r0, #39	; 0x27
 8040820:	e7f1      	b.n	8040806 <__hexdig_fun+0xa>
 8040822:	2000      	movs	r0, #0
 8040824:	4770      	bx	lr

08040826 <__gethex>:
 8040826:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804082a:	b08b      	sub	sp, #44	; 0x2c
 804082c:	468a      	mov	sl, r1
 804082e:	9002      	str	r0, [sp, #8]
 8040830:	9816      	ldr	r0, [sp, #88]	; 0x58
 8040832:	9306      	str	r3, [sp, #24]
 8040834:	4690      	mov	r8, r2
 8040836:	f000 facd 	bl	8040dd4 <__localeconv_l>
 804083a:	6803      	ldr	r3, [r0, #0]
 804083c:	9303      	str	r3, [sp, #12]
 804083e:	4618      	mov	r0, r3
 8040840:	f7df fcf8 	bl	8020234 <strlen>
 8040844:	9b03      	ldr	r3, [sp, #12]
 8040846:	9001      	str	r0, [sp, #4]
 8040848:	4403      	add	r3, r0
 804084a:	f04f 0b00 	mov.w	fp, #0
 804084e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8040852:	9307      	str	r3, [sp, #28]
 8040854:	f8da 3000 	ldr.w	r3, [sl]
 8040858:	3302      	adds	r3, #2
 804085a:	461f      	mov	r7, r3
 804085c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8040860:	2830      	cmp	r0, #48	; 0x30
 8040862:	d06c      	beq.n	804093e <__gethex+0x118>
 8040864:	f7ff ffca 	bl	80407fc <__hexdig_fun>
 8040868:	4604      	mov	r4, r0
 804086a:	2800      	cmp	r0, #0
 804086c:	d16a      	bne.n	8040944 <__gethex+0x11e>
 804086e:	9a01      	ldr	r2, [sp, #4]
 8040870:	9903      	ldr	r1, [sp, #12]
 8040872:	4638      	mov	r0, r7
 8040874:	f7ff f8f6 	bl	803fa64 <strncmp>
 8040878:	2800      	cmp	r0, #0
 804087a:	d166      	bne.n	804094a <__gethex+0x124>
 804087c:	9b01      	ldr	r3, [sp, #4]
 804087e:	5cf8      	ldrb	r0, [r7, r3]
 8040880:	18fe      	adds	r6, r7, r3
 8040882:	f7ff ffbb 	bl	80407fc <__hexdig_fun>
 8040886:	2800      	cmp	r0, #0
 8040888:	d062      	beq.n	8040950 <__gethex+0x12a>
 804088a:	4633      	mov	r3, r6
 804088c:	7818      	ldrb	r0, [r3, #0]
 804088e:	2830      	cmp	r0, #48	; 0x30
 8040890:	461f      	mov	r7, r3
 8040892:	f103 0301 	add.w	r3, r3, #1
 8040896:	d0f9      	beq.n	804088c <__gethex+0x66>
 8040898:	f7ff ffb0 	bl	80407fc <__hexdig_fun>
 804089c:	fab0 f580 	clz	r5, r0
 80408a0:	096d      	lsrs	r5, r5, #5
 80408a2:	4634      	mov	r4, r6
 80408a4:	f04f 0b01 	mov.w	fp, #1
 80408a8:	463a      	mov	r2, r7
 80408aa:	4616      	mov	r6, r2
 80408ac:	3201      	adds	r2, #1
 80408ae:	7830      	ldrb	r0, [r6, #0]
 80408b0:	f7ff ffa4 	bl	80407fc <__hexdig_fun>
 80408b4:	2800      	cmp	r0, #0
 80408b6:	d1f8      	bne.n	80408aa <__gethex+0x84>
 80408b8:	9a01      	ldr	r2, [sp, #4]
 80408ba:	9903      	ldr	r1, [sp, #12]
 80408bc:	4630      	mov	r0, r6
 80408be:	f7ff f8d1 	bl	803fa64 <strncmp>
 80408c2:	b950      	cbnz	r0, 80408da <__gethex+0xb4>
 80408c4:	b954      	cbnz	r4, 80408dc <__gethex+0xb6>
 80408c6:	9b01      	ldr	r3, [sp, #4]
 80408c8:	18f4      	adds	r4, r6, r3
 80408ca:	4622      	mov	r2, r4
 80408cc:	4616      	mov	r6, r2
 80408ce:	3201      	adds	r2, #1
 80408d0:	7830      	ldrb	r0, [r6, #0]
 80408d2:	f7ff ff93 	bl	80407fc <__hexdig_fun>
 80408d6:	2800      	cmp	r0, #0
 80408d8:	d1f8      	bne.n	80408cc <__gethex+0xa6>
 80408da:	b10c      	cbz	r4, 80408e0 <__gethex+0xba>
 80408dc:	1ba4      	subs	r4, r4, r6
 80408de:	00a4      	lsls	r4, r4, #2
 80408e0:	7833      	ldrb	r3, [r6, #0]
 80408e2:	2b50      	cmp	r3, #80	; 0x50
 80408e4:	d001      	beq.n	80408ea <__gethex+0xc4>
 80408e6:	2b70      	cmp	r3, #112	; 0x70
 80408e8:	d140      	bne.n	804096c <__gethex+0x146>
 80408ea:	7873      	ldrb	r3, [r6, #1]
 80408ec:	2b2b      	cmp	r3, #43	; 0x2b
 80408ee:	d031      	beq.n	8040954 <__gethex+0x12e>
 80408f0:	2b2d      	cmp	r3, #45	; 0x2d
 80408f2:	d033      	beq.n	804095c <__gethex+0x136>
 80408f4:	1c71      	adds	r1, r6, #1
 80408f6:	f04f 0900 	mov.w	r9, #0
 80408fa:	7808      	ldrb	r0, [r1, #0]
 80408fc:	f7ff ff7e 	bl	80407fc <__hexdig_fun>
 8040900:	1e43      	subs	r3, r0, #1
 8040902:	b2db      	uxtb	r3, r3
 8040904:	2b18      	cmp	r3, #24
 8040906:	d831      	bhi.n	804096c <__gethex+0x146>
 8040908:	f1a0 0210 	sub.w	r2, r0, #16
 804090c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8040910:	f7ff ff74 	bl	80407fc <__hexdig_fun>
 8040914:	1e43      	subs	r3, r0, #1
 8040916:	b2db      	uxtb	r3, r3
 8040918:	2b18      	cmp	r3, #24
 804091a:	d922      	bls.n	8040962 <__gethex+0x13c>
 804091c:	f1b9 0f00 	cmp.w	r9, #0
 8040920:	d000      	beq.n	8040924 <__gethex+0xfe>
 8040922:	4252      	negs	r2, r2
 8040924:	4414      	add	r4, r2
 8040926:	f8ca 1000 	str.w	r1, [sl]
 804092a:	b30d      	cbz	r5, 8040970 <__gethex+0x14a>
 804092c:	f1bb 0f00 	cmp.w	fp, #0
 8040930:	bf0c      	ite	eq
 8040932:	2706      	moveq	r7, #6
 8040934:	2700      	movne	r7, #0
 8040936:	4638      	mov	r0, r7
 8040938:	b00b      	add	sp, #44	; 0x2c
 804093a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804093e:	f10b 0b01 	add.w	fp, fp, #1
 8040942:	e78a      	b.n	804085a <__gethex+0x34>
 8040944:	2500      	movs	r5, #0
 8040946:	462c      	mov	r4, r5
 8040948:	e7ae      	b.n	80408a8 <__gethex+0x82>
 804094a:	463e      	mov	r6, r7
 804094c:	2501      	movs	r5, #1
 804094e:	e7c7      	b.n	80408e0 <__gethex+0xba>
 8040950:	4604      	mov	r4, r0
 8040952:	e7fb      	b.n	804094c <__gethex+0x126>
 8040954:	f04f 0900 	mov.w	r9, #0
 8040958:	1cb1      	adds	r1, r6, #2
 804095a:	e7ce      	b.n	80408fa <__gethex+0xd4>
 804095c:	f04f 0901 	mov.w	r9, #1
 8040960:	e7fa      	b.n	8040958 <__gethex+0x132>
 8040962:	230a      	movs	r3, #10
 8040964:	fb03 0202 	mla	r2, r3, r2, r0
 8040968:	3a10      	subs	r2, #16
 804096a:	e7cf      	b.n	804090c <__gethex+0xe6>
 804096c:	4631      	mov	r1, r6
 804096e:	e7da      	b.n	8040926 <__gethex+0x100>
 8040970:	1bf3      	subs	r3, r6, r7
 8040972:	3b01      	subs	r3, #1
 8040974:	4629      	mov	r1, r5
 8040976:	2b07      	cmp	r3, #7
 8040978:	dc49      	bgt.n	8040a0e <__gethex+0x1e8>
 804097a:	9802      	ldr	r0, [sp, #8]
 804097c:	f000 fa3e 	bl	8040dfc <_Balloc>
 8040980:	9b01      	ldr	r3, [sp, #4]
 8040982:	f100 0914 	add.w	r9, r0, #20
 8040986:	f04f 0b00 	mov.w	fp, #0
 804098a:	f1c3 0301 	rsb	r3, r3, #1
 804098e:	4605      	mov	r5, r0
 8040990:	f8cd 9010 	str.w	r9, [sp, #16]
 8040994:	46da      	mov	sl, fp
 8040996:	9308      	str	r3, [sp, #32]
 8040998:	42b7      	cmp	r7, r6
 804099a:	d33b      	bcc.n	8040a14 <__gethex+0x1ee>
 804099c:	9804      	ldr	r0, [sp, #16]
 804099e:	f840 ab04 	str.w	sl, [r0], #4
 80409a2:	eba0 0009 	sub.w	r0, r0, r9
 80409a6:	1080      	asrs	r0, r0, #2
 80409a8:	6128      	str	r0, [r5, #16]
 80409aa:	0147      	lsls	r7, r0, #5
 80409ac:	4650      	mov	r0, sl
 80409ae:	f000 fae9 	bl	8040f84 <__hi0bits>
 80409b2:	f8d8 6000 	ldr.w	r6, [r8]
 80409b6:	1a3f      	subs	r7, r7, r0
 80409b8:	42b7      	cmp	r7, r6
 80409ba:	dd64      	ble.n	8040a86 <__gethex+0x260>
 80409bc:	1bbf      	subs	r7, r7, r6
 80409be:	4639      	mov	r1, r7
 80409c0:	4628      	mov	r0, r5
 80409c2:	f000 fdf9 	bl	80415b8 <__any_on>
 80409c6:	4682      	mov	sl, r0
 80409c8:	b178      	cbz	r0, 80409ea <__gethex+0x1c4>
 80409ca:	1e7b      	subs	r3, r7, #1
 80409cc:	1159      	asrs	r1, r3, #5
 80409ce:	f003 021f 	and.w	r2, r3, #31
 80409d2:	f04f 0a01 	mov.w	sl, #1
 80409d6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80409da:	fa0a f202 	lsl.w	r2, sl, r2
 80409de:	420a      	tst	r2, r1
 80409e0:	d003      	beq.n	80409ea <__gethex+0x1c4>
 80409e2:	4553      	cmp	r3, sl
 80409e4:	dc46      	bgt.n	8040a74 <__gethex+0x24e>
 80409e6:	f04f 0a02 	mov.w	sl, #2
 80409ea:	4639      	mov	r1, r7
 80409ec:	4628      	mov	r0, r5
 80409ee:	f7ff fecb 	bl	8040788 <rshift>
 80409f2:	443c      	add	r4, r7
 80409f4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80409f8:	42a3      	cmp	r3, r4
 80409fa:	da52      	bge.n	8040aa2 <__gethex+0x27c>
 80409fc:	4629      	mov	r1, r5
 80409fe:	9802      	ldr	r0, [sp, #8]
 8040a00:	f000 fa30 	bl	8040e64 <_Bfree>
 8040a04:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8040a06:	2300      	movs	r3, #0
 8040a08:	6013      	str	r3, [r2, #0]
 8040a0a:	27a3      	movs	r7, #163	; 0xa3
 8040a0c:	e793      	b.n	8040936 <__gethex+0x110>
 8040a0e:	3101      	adds	r1, #1
 8040a10:	105b      	asrs	r3, r3, #1
 8040a12:	e7b0      	b.n	8040976 <__gethex+0x150>
 8040a14:	1e73      	subs	r3, r6, #1
 8040a16:	9305      	str	r3, [sp, #20]
 8040a18:	9a07      	ldr	r2, [sp, #28]
 8040a1a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8040a1e:	4293      	cmp	r3, r2
 8040a20:	d018      	beq.n	8040a54 <__gethex+0x22e>
 8040a22:	f1bb 0f20 	cmp.w	fp, #32
 8040a26:	d107      	bne.n	8040a38 <__gethex+0x212>
 8040a28:	9b04      	ldr	r3, [sp, #16]
 8040a2a:	f8c3 a000 	str.w	sl, [r3]
 8040a2e:	3304      	adds	r3, #4
 8040a30:	f04f 0a00 	mov.w	sl, #0
 8040a34:	9304      	str	r3, [sp, #16]
 8040a36:	46d3      	mov	fp, sl
 8040a38:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8040a3c:	f7ff fede 	bl	80407fc <__hexdig_fun>
 8040a40:	f000 000f 	and.w	r0, r0, #15
 8040a44:	fa00 f00b 	lsl.w	r0, r0, fp
 8040a48:	ea4a 0a00 	orr.w	sl, sl, r0
 8040a4c:	f10b 0b04 	add.w	fp, fp, #4
 8040a50:	9b05      	ldr	r3, [sp, #20]
 8040a52:	e00d      	b.n	8040a70 <__gethex+0x24a>
 8040a54:	9b05      	ldr	r3, [sp, #20]
 8040a56:	9a08      	ldr	r2, [sp, #32]
 8040a58:	4413      	add	r3, r2
 8040a5a:	42bb      	cmp	r3, r7
 8040a5c:	d3e1      	bcc.n	8040a22 <__gethex+0x1fc>
 8040a5e:	4618      	mov	r0, r3
 8040a60:	9a01      	ldr	r2, [sp, #4]
 8040a62:	9903      	ldr	r1, [sp, #12]
 8040a64:	9309      	str	r3, [sp, #36]	; 0x24
 8040a66:	f7fe fffd 	bl	803fa64 <strncmp>
 8040a6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8040a6c:	2800      	cmp	r0, #0
 8040a6e:	d1d8      	bne.n	8040a22 <__gethex+0x1fc>
 8040a70:	461e      	mov	r6, r3
 8040a72:	e791      	b.n	8040998 <__gethex+0x172>
 8040a74:	1eb9      	subs	r1, r7, #2
 8040a76:	4628      	mov	r0, r5
 8040a78:	f000 fd9e 	bl	80415b8 <__any_on>
 8040a7c:	2800      	cmp	r0, #0
 8040a7e:	d0b2      	beq.n	80409e6 <__gethex+0x1c0>
 8040a80:	f04f 0a03 	mov.w	sl, #3
 8040a84:	e7b1      	b.n	80409ea <__gethex+0x1c4>
 8040a86:	da09      	bge.n	8040a9c <__gethex+0x276>
 8040a88:	1bf7      	subs	r7, r6, r7
 8040a8a:	4629      	mov	r1, r5
 8040a8c:	463a      	mov	r2, r7
 8040a8e:	9802      	ldr	r0, [sp, #8]
 8040a90:	f000 fbb4 	bl	80411fc <__lshift>
 8040a94:	1be4      	subs	r4, r4, r7
 8040a96:	4605      	mov	r5, r0
 8040a98:	f100 0914 	add.w	r9, r0, #20
 8040a9c:	f04f 0a00 	mov.w	sl, #0
 8040aa0:	e7a8      	b.n	80409f4 <__gethex+0x1ce>
 8040aa2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8040aa6:	42a0      	cmp	r0, r4
 8040aa8:	dd6a      	ble.n	8040b80 <__gethex+0x35a>
 8040aaa:	1b04      	subs	r4, r0, r4
 8040aac:	42a6      	cmp	r6, r4
 8040aae:	dc2e      	bgt.n	8040b0e <__gethex+0x2e8>
 8040ab0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8040ab4:	2b02      	cmp	r3, #2
 8040ab6:	d022      	beq.n	8040afe <__gethex+0x2d8>
 8040ab8:	2b03      	cmp	r3, #3
 8040aba:	d024      	beq.n	8040b06 <__gethex+0x2e0>
 8040abc:	2b01      	cmp	r3, #1
 8040abe:	d115      	bne.n	8040aec <__gethex+0x2c6>
 8040ac0:	42a6      	cmp	r6, r4
 8040ac2:	d113      	bne.n	8040aec <__gethex+0x2c6>
 8040ac4:	2e01      	cmp	r6, #1
 8040ac6:	dc0b      	bgt.n	8040ae0 <__gethex+0x2ba>
 8040ac8:	9a06      	ldr	r2, [sp, #24]
 8040aca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8040ace:	6013      	str	r3, [r2, #0]
 8040ad0:	2301      	movs	r3, #1
 8040ad2:	612b      	str	r3, [r5, #16]
 8040ad4:	f8c9 3000 	str.w	r3, [r9]
 8040ad8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8040ada:	2762      	movs	r7, #98	; 0x62
 8040adc:	601d      	str	r5, [r3, #0]
 8040ade:	e72a      	b.n	8040936 <__gethex+0x110>
 8040ae0:	1e71      	subs	r1, r6, #1
 8040ae2:	4628      	mov	r0, r5
 8040ae4:	f000 fd68 	bl	80415b8 <__any_on>
 8040ae8:	2800      	cmp	r0, #0
 8040aea:	d1ed      	bne.n	8040ac8 <__gethex+0x2a2>
 8040aec:	4629      	mov	r1, r5
 8040aee:	9802      	ldr	r0, [sp, #8]
 8040af0:	f000 f9b8 	bl	8040e64 <_Bfree>
 8040af4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8040af6:	2300      	movs	r3, #0
 8040af8:	6013      	str	r3, [r2, #0]
 8040afa:	2750      	movs	r7, #80	; 0x50
 8040afc:	e71b      	b.n	8040936 <__gethex+0x110>
 8040afe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8040b00:	2b00      	cmp	r3, #0
 8040b02:	d0e1      	beq.n	8040ac8 <__gethex+0x2a2>
 8040b04:	e7f2      	b.n	8040aec <__gethex+0x2c6>
 8040b06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8040b08:	2b00      	cmp	r3, #0
 8040b0a:	d1dd      	bne.n	8040ac8 <__gethex+0x2a2>
 8040b0c:	e7ee      	b.n	8040aec <__gethex+0x2c6>
 8040b0e:	1e67      	subs	r7, r4, #1
 8040b10:	f1ba 0f00 	cmp.w	sl, #0
 8040b14:	d131      	bne.n	8040b7a <__gethex+0x354>
 8040b16:	b127      	cbz	r7, 8040b22 <__gethex+0x2fc>
 8040b18:	4639      	mov	r1, r7
 8040b1a:	4628      	mov	r0, r5
 8040b1c:	f000 fd4c 	bl	80415b8 <__any_on>
 8040b20:	4682      	mov	sl, r0
 8040b22:	117a      	asrs	r2, r7, #5
 8040b24:	2301      	movs	r3, #1
 8040b26:	f007 071f 	and.w	r7, r7, #31
 8040b2a:	fa03 f707 	lsl.w	r7, r3, r7
 8040b2e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8040b32:	4621      	mov	r1, r4
 8040b34:	421f      	tst	r7, r3
 8040b36:	4628      	mov	r0, r5
 8040b38:	bf18      	it	ne
 8040b3a:	f04a 0a02 	orrne.w	sl, sl, #2
 8040b3e:	1b36      	subs	r6, r6, r4
 8040b40:	f7ff fe22 	bl	8040788 <rshift>
 8040b44:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8040b48:	2702      	movs	r7, #2
 8040b4a:	f1ba 0f00 	cmp.w	sl, #0
 8040b4e:	d048      	beq.n	8040be2 <__gethex+0x3bc>
 8040b50:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8040b54:	2b02      	cmp	r3, #2
 8040b56:	d015      	beq.n	8040b84 <__gethex+0x35e>
 8040b58:	2b03      	cmp	r3, #3
 8040b5a:	d017      	beq.n	8040b8c <__gethex+0x366>
 8040b5c:	2b01      	cmp	r3, #1
 8040b5e:	d109      	bne.n	8040b74 <__gethex+0x34e>
 8040b60:	f01a 0f02 	tst.w	sl, #2
 8040b64:	d006      	beq.n	8040b74 <__gethex+0x34e>
 8040b66:	f8d9 3000 	ldr.w	r3, [r9]
 8040b6a:	ea4a 0a03 	orr.w	sl, sl, r3
 8040b6e:	f01a 0f01 	tst.w	sl, #1
 8040b72:	d10e      	bne.n	8040b92 <__gethex+0x36c>
 8040b74:	f047 0710 	orr.w	r7, r7, #16
 8040b78:	e033      	b.n	8040be2 <__gethex+0x3bc>
 8040b7a:	f04f 0a01 	mov.w	sl, #1
 8040b7e:	e7d0      	b.n	8040b22 <__gethex+0x2fc>
 8040b80:	2701      	movs	r7, #1
 8040b82:	e7e2      	b.n	8040b4a <__gethex+0x324>
 8040b84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8040b86:	f1c3 0301 	rsb	r3, r3, #1
 8040b8a:	9315      	str	r3, [sp, #84]	; 0x54
 8040b8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8040b8e:	2b00      	cmp	r3, #0
 8040b90:	d0f0      	beq.n	8040b74 <__gethex+0x34e>
 8040b92:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8040b96:	f105 0314 	add.w	r3, r5, #20
 8040b9a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8040b9e:	eb03 010a 	add.w	r1, r3, sl
 8040ba2:	f04f 0c00 	mov.w	ip, #0
 8040ba6:	4618      	mov	r0, r3
 8040ba8:	f853 2b04 	ldr.w	r2, [r3], #4
 8040bac:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8040bb0:	d01c      	beq.n	8040bec <__gethex+0x3c6>
 8040bb2:	3201      	adds	r2, #1
 8040bb4:	6002      	str	r2, [r0, #0]
 8040bb6:	2f02      	cmp	r7, #2
 8040bb8:	f105 0314 	add.w	r3, r5, #20
 8040bbc:	d138      	bne.n	8040c30 <__gethex+0x40a>
 8040bbe:	f8d8 2000 	ldr.w	r2, [r8]
 8040bc2:	3a01      	subs	r2, #1
 8040bc4:	42b2      	cmp	r2, r6
 8040bc6:	d10a      	bne.n	8040bde <__gethex+0x3b8>
 8040bc8:	1171      	asrs	r1, r6, #5
 8040bca:	2201      	movs	r2, #1
 8040bcc:	f006 061f 	and.w	r6, r6, #31
 8040bd0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8040bd4:	fa02 f606 	lsl.w	r6, r2, r6
 8040bd8:	421e      	tst	r6, r3
 8040bda:	bf18      	it	ne
 8040bdc:	4617      	movne	r7, r2
 8040bde:	f047 0720 	orr.w	r7, r7, #32
 8040be2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8040be4:	601d      	str	r5, [r3, #0]
 8040be6:	9b06      	ldr	r3, [sp, #24]
 8040be8:	601c      	str	r4, [r3, #0]
 8040bea:	e6a4      	b.n	8040936 <__gethex+0x110>
 8040bec:	4299      	cmp	r1, r3
 8040bee:	f843 cc04 	str.w	ip, [r3, #-4]
 8040bf2:	d8d8      	bhi.n	8040ba6 <__gethex+0x380>
 8040bf4:	68ab      	ldr	r3, [r5, #8]
 8040bf6:	4599      	cmp	r9, r3
 8040bf8:	db12      	blt.n	8040c20 <__gethex+0x3fa>
 8040bfa:	6869      	ldr	r1, [r5, #4]
 8040bfc:	9802      	ldr	r0, [sp, #8]
 8040bfe:	3101      	adds	r1, #1
 8040c00:	f000 f8fc 	bl	8040dfc <_Balloc>
 8040c04:	692a      	ldr	r2, [r5, #16]
 8040c06:	3202      	adds	r2, #2
 8040c08:	f105 010c 	add.w	r1, r5, #12
 8040c0c:	4683      	mov	fp, r0
 8040c0e:	0092      	lsls	r2, r2, #2
 8040c10:	300c      	adds	r0, #12
 8040c12:	f7fe fef4 	bl	803f9fe <memcpy>
 8040c16:	4629      	mov	r1, r5
 8040c18:	9802      	ldr	r0, [sp, #8]
 8040c1a:	f000 f923 	bl	8040e64 <_Bfree>
 8040c1e:	465d      	mov	r5, fp
 8040c20:	692b      	ldr	r3, [r5, #16]
 8040c22:	1c5a      	adds	r2, r3, #1
 8040c24:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8040c28:	612a      	str	r2, [r5, #16]
 8040c2a:	2201      	movs	r2, #1
 8040c2c:	615a      	str	r2, [r3, #20]
 8040c2e:	e7c2      	b.n	8040bb6 <__gethex+0x390>
 8040c30:	692a      	ldr	r2, [r5, #16]
 8040c32:	454a      	cmp	r2, r9
 8040c34:	dd0b      	ble.n	8040c4e <__gethex+0x428>
 8040c36:	2101      	movs	r1, #1
 8040c38:	4628      	mov	r0, r5
 8040c3a:	f7ff fda5 	bl	8040788 <rshift>
 8040c3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8040c42:	3401      	adds	r4, #1
 8040c44:	42a3      	cmp	r3, r4
 8040c46:	f6ff aed9 	blt.w	80409fc <__gethex+0x1d6>
 8040c4a:	2701      	movs	r7, #1
 8040c4c:	e7c7      	b.n	8040bde <__gethex+0x3b8>
 8040c4e:	f016 061f 	ands.w	r6, r6, #31
 8040c52:	d0fa      	beq.n	8040c4a <__gethex+0x424>
 8040c54:	449a      	add	sl, r3
 8040c56:	f1c6 0620 	rsb	r6, r6, #32
 8040c5a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8040c5e:	f000 f991 	bl	8040f84 <__hi0bits>
 8040c62:	42b0      	cmp	r0, r6
 8040c64:	dbe7      	blt.n	8040c36 <__gethex+0x410>
 8040c66:	e7f0      	b.n	8040c4a <__gethex+0x424>

08040c68 <L_shift>:
 8040c68:	f1c2 0208 	rsb	r2, r2, #8
 8040c6c:	0092      	lsls	r2, r2, #2
 8040c6e:	b570      	push	{r4, r5, r6, lr}
 8040c70:	f1c2 0620 	rsb	r6, r2, #32
 8040c74:	6843      	ldr	r3, [r0, #4]
 8040c76:	6804      	ldr	r4, [r0, #0]
 8040c78:	fa03 f506 	lsl.w	r5, r3, r6
 8040c7c:	432c      	orrs	r4, r5
 8040c7e:	40d3      	lsrs	r3, r2
 8040c80:	6004      	str	r4, [r0, #0]
 8040c82:	f840 3f04 	str.w	r3, [r0, #4]!
 8040c86:	4288      	cmp	r0, r1
 8040c88:	d3f4      	bcc.n	8040c74 <L_shift+0xc>
 8040c8a:	bd70      	pop	{r4, r5, r6, pc}

08040c8c <__match>:
 8040c8c:	b530      	push	{r4, r5, lr}
 8040c8e:	6803      	ldr	r3, [r0, #0]
 8040c90:	3301      	adds	r3, #1
 8040c92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8040c96:	b914      	cbnz	r4, 8040c9e <__match+0x12>
 8040c98:	6003      	str	r3, [r0, #0]
 8040c9a:	2001      	movs	r0, #1
 8040c9c:	bd30      	pop	{r4, r5, pc}
 8040c9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8040ca2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8040ca6:	2d19      	cmp	r5, #25
 8040ca8:	bf98      	it	ls
 8040caa:	3220      	addls	r2, #32
 8040cac:	42a2      	cmp	r2, r4
 8040cae:	d0f0      	beq.n	8040c92 <__match+0x6>
 8040cb0:	2000      	movs	r0, #0
 8040cb2:	e7f3      	b.n	8040c9c <__match+0x10>

08040cb4 <__hexnan>:
 8040cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8040cb8:	680b      	ldr	r3, [r1, #0]
 8040cba:	6801      	ldr	r1, [r0, #0]
 8040cbc:	115f      	asrs	r7, r3, #5
 8040cbe:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8040cc2:	f013 031f 	ands.w	r3, r3, #31
 8040cc6:	b087      	sub	sp, #28
 8040cc8:	bf18      	it	ne
 8040cca:	3704      	addne	r7, #4
 8040ccc:	2500      	movs	r5, #0
 8040cce:	1f3e      	subs	r6, r7, #4
 8040cd0:	4682      	mov	sl, r0
 8040cd2:	4690      	mov	r8, r2
 8040cd4:	9301      	str	r3, [sp, #4]
 8040cd6:	f847 5c04 	str.w	r5, [r7, #-4]
 8040cda:	46b1      	mov	r9, r6
 8040cdc:	4634      	mov	r4, r6
 8040cde:	9502      	str	r5, [sp, #8]
 8040ce0:	46ab      	mov	fp, r5
 8040ce2:	784a      	ldrb	r2, [r1, #1]
 8040ce4:	1c4b      	adds	r3, r1, #1
 8040ce6:	9303      	str	r3, [sp, #12]
 8040ce8:	b342      	cbz	r2, 8040d3c <__hexnan+0x88>
 8040cea:	4610      	mov	r0, r2
 8040cec:	9105      	str	r1, [sp, #20]
 8040cee:	9204      	str	r2, [sp, #16]
 8040cf0:	f7ff fd84 	bl	80407fc <__hexdig_fun>
 8040cf4:	2800      	cmp	r0, #0
 8040cf6:	d143      	bne.n	8040d80 <__hexnan+0xcc>
 8040cf8:	9a04      	ldr	r2, [sp, #16]
 8040cfa:	9905      	ldr	r1, [sp, #20]
 8040cfc:	2a20      	cmp	r2, #32
 8040cfe:	d818      	bhi.n	8040d32 <__hexnan+0x7e>
 8040d00:	9b02      	ldr	r3, [sp, #8]
 8040d02:	459b      	cmp	fp, r3
 8040d04:	dd13      	ble.n	8040d2e <__hexnan+0x7a>
 8040d06:	454c      	cmp	r4, r9
 8040d08:	d206      	bcs.n	8040d18 <__hexnan+0x64>
 8040d0a:	2d07      	cmp	r5, #7
 8040d0c:	dc04      	bgt.n	8040d18 <__hexnan+0x64>
 8040d0e:	462a      	mov	r2, r5
 8040d10:	4649      	mov	r1, r9
 8040d12:	4620      	mov	r0, r4
 8040d14:	f7ff ffa8 	bl	8040c68 <L_shift>
 8040d18:	4544      	cmp	r4, r8
 8040d1a:	d944      	bls.n	8040da6 <__hexnan+0xf2>
 8040d1c:	2300      	movs	r3, #0
 8040d1e:	f1a4 0904 	sub.w	r9, r4, #4
 8040d22:	f844 3c04 	str.w	r3, [r4, #-4]
 8040d26:	f8cd b008 	str.w	fp, [sp, #8]
 8040d2a:	464c      	mov	r4, r9
 8040d2c:	461d      	mov	r5, r3
 8040d2e:	9903      	ldr	r1, [sp, #12]
 8040d30:	e7d7      	b.n	8040ce2 <__hexnan+0x2e>
 8040d32:	2a29      	cmp	r2, #41	; 0x29
 8040d34:	d14a      	bne.n	8040dcc <__hexnan+0x118>
 8040d36:	3102      	adds	r1, #2
 8040d38:	f8ca 1000 	str.w	r1, [sl]
 8040d3c:	f1bb 0f00 	cmp.w	fp, #0
 8040d40:	d044      	beq.n	8040dcc <__hexnan+0x118>
 8040d42:	454c      	cmp	r4, r9
 8040d44:	d206      	bcs.n	8040d54 <__hexnan+0xa0>
 8040d46:	2d07      	cmp	r5, #7
 8040d48:	dc04      	bgt.n	8040d54 <__hexnan+0xa0>
 8040d4a:	462a      	mov	r2, r5
 8040d4c:	4649      	mov	r1, r9
 8040d4e:	4620      	mov	r0, r4
 8040d50:	f7ff ff8a 	bl	8040c68 <L_shift>
 8040d54:	4544      	cmp	r4, r8
 8040d56:	d928      	bls.n	8040daa <__hexnan+0xf6>
 8040d58:	4643      	mov	r3, r8
 8040d5a:	f854 2b04 	ldr.w	r2, [r4], #4
 8040d5e:	f843 2b04 	str.w	r2, [r3], #4
 8040d62:	42a6      	cmp	r6, r4
 8040d64:	d2f9      	bcs.n	8040d5a <__hexnan+0xa6>
 8040d66:	2200      	movs	r2, #0
 8040d68:	f843 2b04 	str.w	r2, [r3], #4
 8040d6c:	429e      	cmp	r6, r3
 8040d6e:	d2fb      	bcs.n	8040d68 <__hexnan+0xb4>
 8040d70:	6833      	ldr	r3, [r6, #0]
 8040d72:	b91b      	cbnz	r3, 8040d7c <__hexnan+0xc8>
 8040d74:	4546      	cmp	r6, r8
 8040d76:	d127      	bne.n	8040dc8 <__hexnan+0x114>
 8040d78:	2301      	movs	r3, #1
 8040d7a:	6033      	str	r3, [r6, #0]
 8040d7c:	2005      	movs	r0, #5
 8040d7e:	e026      	b.n	8040dce <__hexnan+0x11a>
 8040d80:	3501      	adds	r5, #1
 8040d82:	2d08      	cmp	r5, #8
 8040d84:	f10b 0b01 	add.w	fp, fp, #1
 8040d88:	dd06      	ble.n	8040d98 <__hexnan+0xe4>
 8040d8a:	4544      	cmp	r4, r8
 8040d8c:	d9cf      	bls.n	8040d2e <__hexnan+0x7a>
 8040d8e:	2300      	movs	r3, #0
 8040d90:	f844 3c04 	str.w	r3, [r4, #-4]
 8040d94:	2501      	movs	r5, #1
 8040d96:	3c04      	subs	r4, #4
 8040d98:	6822      	ldr	r2, [r4, #0]
 8040d9a:	f000 000f 	and.w	r0, r0, #15
 8040d9e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8040da2:	6020      	str	r0, [r4, #0]
 8040da4:	e7c3      	b.n	8040d2e <__hexnan+0x7a>
 8040da6:	2508      	movs	r5, #8
 8040da8:	e7c1      	b.n	8040d2e <__hexnan+0x7a>
 8040daa:	9b01      	ldr	r3, [sp, #4]
 8040dac:	2b00      	cmp	r3, #0
 8040dae:	d0df      	beq.n	8040d70 <__hexnan+0xbc>
 8040db0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8040db4:	f1c3 0320 	rsb	r3, r3, #32
 8040db8:	fa22 f303 	lsr.w	r3, r2, r3
 8040dbc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8040dc0:	401a      	ands	r2, r3
 8040dc2:	f847 2c04 	str.w	r2, [r7, #-4]
 8040dc6:	e7d3      	b.n	8040d70 <__hexnan+0xbc>
 8040dc8:	3e04      	subs	r6, #4
 8040dca:	e7d1      	b.n	8040d70 <__hexnan+0xbc>
 8040dcc:	2004      	movs	r0, #4
 8040dce:	b007      	add	sp, #28
 8040dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08040dd4 <__localeconv_l>:
 8040dd4:	30f0      	adds	r0, #240	; 0xf0
 8040dd6:	4770      	bx	lr

08040dd8 <__ascii_mbtowc>:
 8040dd8:	b082      	sub	sp, #8
 8040dda:	b901      	cbnz	r1, 8040dde <__ascii_mbtowc+0x6>
 8040ddc:	a901      	add	r1, sp, #4
 8040dde:	b142      	cbz	r2, 8040df2 <__ascii_mbtowc+0x1a>
 8040de0:	b14b      	cbz	r3, 8040df6 <__ascii_mbtowc+0x1e>
 8040de2:	7813      	ldrb	r3, [r2, #0]
 8040de4:	600b      	str	r3, [r1, #0]
 8040de6:	7812      	ldrb	r2, [r2, #0]
 8040de8:	1c10      	adds	r0, r2, #0
 8040dea:	bf18      	it	ne
 8040dec:	2001      	movne	r0, #1
 8040dee:	b002      	add	sp, #8
 8040df0:	4770      	bx	lr
 8040df2:	4610      	mov	r0, r2
 8040df4:	e7fb      	b.n	8040dee <__ascii_mbtowc+0x16>
 8040df6:	f06f 0001 	mvn.w	r0, #1
 8040dfa:	e7f8      	b.n	8040dee <__ascii_mbtowc+0x16>

08040dfc <_Balloc>:
 8040dfc:	b570      	push	{r4, r5, r6, lr}
 8040dfe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8040e00:	4604      	mov	r4, r0
 8040e02:	460e      	mov	r6, r1
 8040e04:	b93d      	cbnz	r5, 8040e16 <_Balloc+0x1a>
 8040e06:	2010      	movs	r0, #16
 8040e08:	f000 ff5e 	bl	8041cc8 <malloc>
 8040e0c:	6260      	str	r0, [r4, #36]	; 0x24
 8040e0e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8040e12:	6005      	str	r5, [r0, #0]
 8040e14:	60c5      	str	r5, [r0, #12]
 8040e16:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8040e18:	68eb      	ldr	r3, [r5, #12]
 8040e1a:	b183      	cbz	r3, 8040e3e <_Balloc+0x42>
 8040e1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8040e1e:	68db      	ldr	r3, [r3, #12]
 8040e20:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8040e24:	b9b8      	cbnz	r0, 8040e56 <_Balloc+0x5a>
 8040e26:	2101      	movs	r1, #1
 8040e28:	fa01 f506 	lsl.w	r5, r1, r6
 8040e2c:	1d6a      	adds	r2, r5, #5
 8040e2e:	0092      	lsls	r2, r2, #2
 8040e30:	4620      	mov	r0, r4
 8040e32:	f000 fbe2 	bl	80415fa <_calloc_r>
 8040e36:	b160      	cbz	r0, 8040e52 <_Balloc+0x56>
 8040e38:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8040e3c:	e00e      	b.n	8040e5c <_Balloc+0x60>
 8040e3e:	2221      	movs	r2, #33	; 0x21
 8040e40:	2104      	movs	r1, #4
 8040e42:	4620      	mov	r0, r4
 8040e44:	f000 fbd9 	bl	80415fa <_calloc_r>
 8040e48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8040e4a:	60e8      	str	r0, [r5, #12]
 8040e4c:	68db      	ldr	r3, [r3, #12]
 8040e4e:	2b00      	cmp	r3, #0
 8040e50:	d1e4      	bne.n	8040e1c <_Balloc+0x20>
 8040e52:	2000      	movs	r0, #0
 8040e54:	bd70      	pop	{r4, r5, r6, pc}
 8040e56:	6802      	ldr	r2, [r0, #0]
 8040e58:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8040e5c:	2300      	movs	r3, #0
 8040e5e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8040e62:	e7f7      	b.n	8040e54 <_Balloc+0x58>

08040e64 <_Bfree>:
 8040e64:	b570      	push	{r4, r5, r6, lr}
 8040e66:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8040e68:	4606      	mov	r6, r0
 8040e6a:	460d      	mov	r5, r1
 8040e6c:	b93c      	cbnz	r4, 8040e7e <_Bfree+0x1a>
 8040e6e:	2010      	movs	r0, #16
 8040e70:	f000 ff2a 	bl	8041cc8 <malloc>
 8040e74:	6270      	str	r0, [r6, #36]	; 0x24
 8040e76:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8040e7a:	6004      	str	r4, [r0, #0]
 8040e7c:	60c4      	str	r4, [r0, #12]
 8040e7e:	b13d      	cbz	r5, 8040e90 <_Bfree+0x2c>
 8040e80:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8040e82:	686a      	ldr	r2, [r5, #4]
 8040e84:	68db      	ldr	r3, [r3, #12]
 8040e86:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8040e8a:	6029      	str	r1, [r5, #0]
 8040e8c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8040e90:	bd70      	pop	{r4, r5, r6, pc}

08040e92 <__multadd>:
 8040e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8040e96:	690d      	ldr	r5, [r1, #16]
 8040e98:	461f      	mov	r7, r3
 8040e9a:	4606      	mov	r6, r0
 8040e9c:	460c      	mov	r4, r1
 8040e9e:	f101 0c14 	add.w	ip, r1, #20
 8040ea2:	2300      	movs	r3, #0
 8040ea4:	f8dc 0000 	ldr.w	r0, [ip]
 8040ea8:	b281      	uxth	r1, r0
 8040eaa:	fb02 7101 	mla	r1, r2, r1, r7
 8040eae:	0c0f      	lsrs	r7, r1, #16
 8040eb0:	0c00      	lsrs	r0, r0, #16
 8040eb2:	fb02 7000 	mla	r0, r2, r0, r7
 8040eb6:	b289      	uxth	r1, r1
 8040eb8:	3301      	adds	r3, #1
 8040eba:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8040ebe:	429d      	cmp	r5, r3
 8040ec0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8040ec4:	f84c 1b04 	str.w	r1, [ip], #4
 8040ec8:	dcec      	bgt.n	8040ea4 <__multadd+0x12>
 8040eca:	b1d7      	cbz	r7, 8040f02 <__multadd+0x70>
 8040ecc:	68a3      	ldr	r3, [r4, #8]
 8040ece:	42ab      	cmp	r3, r5
 8040ed0:	dc12      	bgt.n	8040ef8 <__multadd+0x66>
 8040ed2:	6861      	ldr	r1, [r4, #4]
 8040ed4:	4630      	mov	r0, r6
 8040ed6:	3101      	adds	r1, #1
 8040ed8:	f7ff ff90 	bl	8040dfc <_Balloc>
 8040edc:	6922      	ldr	r2, [r4, #16]
 8040ede:	3202      	adds	r2, #2
 8040ee0:	f104 010c 	add.w	r1, r4, #12
 8040ee4:	4680      	mov	r8, r0
 8040ee6:	0092      	lsls	r2, r2, #2
 8040ee8:	300c      	adds	r0, #12
 8040eea:	f7fe fd88 	bl	803f9fe <memcpy>
 8040eee:	4621      	mov	r1, r4
 8040ef0:	4630      	mov	r0, r6
 8040ef2:	f7ff ffb7 	bl	8040e64 <_Bfree>
 8040ef6:	4644      	mov	r4, r8
 8040ef8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8040efc:	3501      	adds	r5, #1
 8040efe:	615f      	str	r7, [r3, #20]
 8040f00:	6125      	str	r5, [r4, #16]
 8040f02:	4620      	mov	r0, r4
 8040f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08040f08 <__s2b>:
 8040f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8040f0c:	460c      	mov	r4, r1
 8040f0e:	4615      	mov	r5, r2
 8040f10:	461f      	mov	r7, r3
 8040f12:	2209      	movs	r2, #9
 8040f14:	3308      	adds	r3, #8
 8040f16:	4606      	mov	r6, r0
 8040f18:	fb93 f3f2 	sdiv	r3, r3, r2
 8040f1c:	2100      	movs	r1, #0
 8040f1e:	2201      	movs	r2, #1
 8040f20:	429a      	cmp	r2, r3
 8040f22:	db20      	blt.n	8040f66 <__s2b+0x5e>
 8040f24:	4630      	mov	r0, r6
 8040f26:	f7ff ff69 	bl	8040dfc <_Balloc>
 8040f2a:	9b08      	ldr	r3, [sp, #32]
 8040f2c:	6143      	str	r3, [r0, #20]
 8040f2e:	2d09      	cmp	r5, #9
 8040f30:	f04f 0301 	mov.w	r3, #1
 8040f34:	6103      	str	r3, [r0, #16]
 8040f36:	dd19      	ble.n	8040f6c <__s2b+0x64>
 8040f38:	f104 0809 	add.w	r8, r4, #9
 8040f3c:	46c1      	mov	r9, r8
 8040f3e:	442c      	add	r4, r5
 8040f40:	f819 3b01 	ldrb.w	r3, [r9], #1
 8040f44:	4601      	mov	r1, r0
 8040f46:	3b30      	subs	r3, #48	; 0x30
 8040f48:	220a      	movs	r2, #10
 8040f4a:	4630      	mov	r0, r6
 8040f4c:	f7ff ffa1 	bl	8040e92 <__multadd>
 8040f50:	45a1      	cmp	r9, r4
 8040f52:	d1f5      	bne.n	8040f40 <__s2b+0x38>
 8040f54:	eb08 0405 	add.w	r4, r8, r5
 8040f58:	3c08      	subs	r4, #8
 8040f5a:	1b2d      	subs	r5, r5, r4
 8040f5c:	1963      	adds	r3, r4, r5
 8040f5e:	42bb      	cmp	r3, r7
 8040f60:	db07      	blt.n	8040f72 <__s2b+0x6a>
 8040f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8040f66:	0052      	lsls	r2, r2, #1
 8040f68:	3101      	adds	r1, #1
 8040f6a:	e7d9      	b.n	8040f20 <__s2b+0x18>
 8040f6c:	340a      	adds	r4, #10
 8040f6e:	2509      	movs	r5, #9
 8040f70:	e7f3      	b.n	8040f5a <__s2b+0x52>
 8040f72:	f814 3b01 	ldrb.w	r3, [r4], #1
 8040f76:	4601      	mov	r1, r0
 8040f78:	3b30      	subs	r3, #48	; 0x30
 8040f7a:	220a      	movs	r2, #10
 8040f7c:	4630      	mov	r0, r6
 8040f7e:	f7ff ff88 	bl	8040e92 <__multadd>
 8040f82:	e7eb      	b.n	8040f5c <__s2b+0x54>

08040f84 <__hi0bits>:
 8040f84:	0c02      	lsrs	r2, r0, #16
 8040f86:	0412      	lsls	r2, r2, #16
 8040f88:	4603      	mov	r3, r0
 8040f8a:	b9b2      	cbnz	r2, 8040fba <__hi0bits+0x36>
 8040f8c:	0403      	lsls	r3, r0, #16
 8040f8e:	2010      	movs	r0, #16
 8040f90:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8040f94:	bf04      	itt	eq
 8040f96:	021b      	lsleq	r3, r3, #8
 8040f98:	3008      	addeq	r0, #8
 8040f9a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8040f9e:	bf04      	itt	eq
 8040fa0:	011b      	lsleq	r3, r3, #4
 8040fa2:	3004      	addeq	r0, #4
 8040fa4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8040fa8:	bf04      	itt	eq
 8040faa:	009b      	lsleq	r3, r3, #2
 8040fac:	3002      	addeq	r0, #2
 8040fae:	2b00      	cmp	r3, #0
 8040fb0:	db06      	blt.n	8040fc0 <__hi0bits+0x3c>
 8040fb2:	005b      	lsls	r3, r3, #1
 8040fb4:	d503      	bpl.n	8040fbe <__hi0bits+0x3a>
 8040fb6:	3001      	adds	r0, #1
 8040fb8:	4770      	bx	lr
 8040fba:	2000      	movs	r0, #0
 8040fbc:	e7e8      	b.n	8040f90 <__hi0bits+0xc>
 8040fbe:	2020      	movs	r0, #32
 8040fc0:	4770      	bx	lr

08040fc2 <__lo0bits>:
 8040fc2:	6803      	ldr	r3, [r0, #0]
 8040fc4:	f013 0207 	ands.w	r2, r3, #7
 8040fc8:	4601      	mov	r1, r0
 8040fca:	d00b      	beq.n	8040fe4 <__lo0bits+0x22>
 8040fcc:	07da      	lsls	r2, r3, #31
 8040fce:	d423      	bmi.n	8041018 <__lo0bits+0x56>
 8040fd0:	0798      	lsls	r0, r3, #30
 8040fd2:	bf49      	itett	mi
 8040fd4:	085b      	lsrmi	r3, r3, #1
 8040fd6:	089b      	lsrpl	r3, r3, #2
 8040fd8:	2001      	movmi	r0, #1
 8040fda:	600b      	strmi	r3, [r1, #0]
 8040fdc:	bf5c      	itt	pl
 8040fde:	600b      	strpl	r3, [r1, #0]
 8040fe0:	2002      	movpl	r0, #2
 8040fe2:	4770      	bx	lr
 8040fe4:	b298      	uxth	r0, r3
 8040fe6:	b9a8      	cbnz	r0, 8041014 <__lo0bits+0x52>
 8040fe8:	0c1b      	lsrs	r3, r3, #16
 8040fea:	2010      	movs	r0, #16
 8040fec:	f013 0fff 	tst.w	r3, #255	; 0xff
 8040ff0:	bf04      	itt	eq
 8040ff2:	0a1b      	lsreq	r3, r3, #8
 8040ff4:	3008      	addeq	r0, #8
 8040ff6:	071a      	lsls	r2, r3, #28
 8040ff8:	bf04      	itt	eq
 8040ffa:	091b      	lsreq	r3, r3, #4
 8040ffc:	3004      	addeq	r0, #4
 8040ffe:	079a      	lsls	r2, r3, #30
 8041000:	bf04      	itt	eq
 8041002:	089b      	lsreq	r3, r3, #2
 8041004:	3002      	addeq	r0, #2
 8041006:	07da      	lsls	r2, r3, #31
 8041008:	d402      	bmi.n	8041010 <__lo0bits+0x4e>
 804100a:	085b      	lsrs	r3, r3, #1
 804100c:	d006      	beq.n	804101c <__lo0bits+0x5a>
 804100e:	3001      	adds	r0, #1
 8041010:	600b      	str	r3, [r1, #0]
 8041012:	4770      	bx	lr
 8041014:	4610      	mov	r0, r2
 8041016:	e7e9      	b.n	8040fec <__lo0bits+0x2a>
 8041018:	2000      	movs	r0, #0
 804101a:	4770      	bx	lr
 804101c:	2020      	movs	r0, #32
 804101e:	4770      	bx	lr

08041020 <__i2b>:
 8041020:	b510      	push	{r4, lr}
 8041022:	460c      	mov	r4, r1
 8041024:	2101      	movs	r1, #1
 8041026:	f7ff fee9 	bl	8040dfc <_Balloc>
 804102a:	2201      	movs	r2, #1
 804102c:	6144      	str	r4, [r0, #20]
 804102e:	6102      	str	r2, [r0, #16]
 8041030:	bd10      	pop	{r4, pc}

08041032 <__multiply>:
 8041032:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8041036:	4614      	mov	r4, r2
 8041038:	690a      	ldr	r2, [r1, #16]
 804103a:	6923      	ldr	r3, [r4, #16]
 804103c:	429a      	cmp	r2, r3
 804103e:	bfb8      	it	lt
 8041040:	460b      	movlt	r3, r1
 8041042:	4688      	mov	r8, r1
 8041044:	bfbc      	itt	lt
 8041046:	46a0      	movlt	r8, r4
 8041048:	461c      	movlt	r4, r3
 804104a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 804104e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8041052:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8041056:	f8d8 1004 	ldr.w	r1, [r8, #4]
 804105a:	eb07 0609 	add.w	r6, r7, r9
 804105e:	42b3      	cmp	r3, r6
 8041060:	bfb8      	it	lt
 8041062:	3101      	addlt	r1, #1
 8041064:	f7ff feca 	bl	8040dfc <_Balloc>
 8041068:	f100 0514 	add.w	r5, r0, #20
 804106c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8041070:	462b      	mov	r3, r5
 8041072:	2200      	movs	r2, #0
 8041074:	4573      	cmp	r3, lr
 8041076:	d316      	bcc.n	80410a6 <__multiply+0x74>
 8041078:	f104 0214 	add.w	r2, r4, #20
 804107c:	f108 0114 	add.w	r1, r8, #20
 8041080:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8041084:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8041088:	9300      	str	r3, [sp, #0]
 804108a:	9b00      	ldr	r3, [sp, #0]
 804108c:	9201      	str	r2, [sp, #4]
 804108e:	4293      	cmp	r3, r2
 8041090:	d80c      	bhi.n	80410ac <__multiply+0x7a>
 8041092:	2e00      	cmp	r6, #0
 8041094:	dd03      	ble.n	804109e <__multiply+0x6c>
 8041096:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 804109a:	2b00      	cmp	r3, #0
 804109c:	d05d      	beq.n	804115a <__multiply+0x128>
 804109e:	6106      	str	r6, [r0, #16]
 80410a0:	b003      	add	sp, #12
 80410a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80410a6:	f843 2b04 	str.w	r2, [r3], #4
 80410aa:	e7e3      	b.n	8041074 <__multiply+0x42>
 80410ac:	f8b2 b000 	ldrh.w	fp, [r2]
 80410b0:	f1bb 0f00 	cmp.w	fp, #0
 80410b4:	d023      	beq.n	80410fe <__multiply+0xcc>
 80410b6:	4689      	mov	r9, r1
 80410b8:	46ac      	mov	ip, r5
 80410ba:	f04f 0800 	mov.w	r8, #0
 80410be:	f859 4b04 	ldr.w	r4, [r9], #4
 80410c2:	f8dc a000 	ldr.w	sl, [ip]
 80410c6:	b2a3      	uxth	r3, r4
 80410c8:	fa1f fa8a 	uxth.w	sl, sl
 80410cc:	fb0b a303 	mla	r3, fp, r3, sl
 80410d0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80410d4:	f8dc 4000 	ldr.w	r4, [ip]
 80410d8:	4443      	add	r3, r8
 80410da:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80410de:	fb0b 840a 	mla	r4, fp, sl, r8
 80410e2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80410e6:	46e2      	mov	sl, ip
 80410e8:	b29b      	uxth	r3, r3
 80410ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80410ee:	454f      	cmp	r7, r9
 80410f0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80410f4:	f84a 3b04 	str.w	r3, [sl], #4
 80410f8:	d82b      	bhi.n	8041152 <__multiply+0x120>
 80410fa:	f8cc 8004 	str.w	r8, [ip, #4]
 80410fe:	9b01      	ldr	r3, [sp, #4]
 8041100:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8041104:	3204      	adds	r2, #4
 8041106:	f1ba 0f00 	cmp.w	sl, #0
 804110a:	d020      	beq.n	804114e <__multiply+0x11c>
 804110c:	682b      	ldr	r3, [r5, #0]
 804110e:	4689      	mov	r9, r1
 8041110:	46a8      	mov	r8, r5
 8041112:	f04f 0b00 	mov.w	fp, #0
 8041116:	f8b9 c000 	ldrh.w	ip, [r9]
 804111a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 804111e:	fb0a 440c 	mla	r4, sl, ip, r4
 8041122:	445c      	add	r4, fp
 8041124:	46c4      	mov	ip, r8
 8041126:	b29b      	uxth	r3, r3
 8041128:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 804112c:	f84c 3b04 	str.w	r3, [ip], #4
 8041130:	f859 3b04 	ldr.w	r3, [r9], #4
 8041134:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8041138:	0c1b      	lsrs	r3, r3, #16
 804113a:	fb0a b303 	mla	r3, sl, r3, fp
 804113e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8041142:	454f      	cmp	r7, r9
 8041144:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8041148:	d805      	bhi.n	8041156 <__multiply+0x124>
 804114a:	f8c8 3004 	str.w	r3, [r8, #4]
 804114e:	3504      	adds	r5, #4
 8041150:	e79b      	b.n	804108a <__multiply+0x58>
 8041152:	46d4      	mov	ip, sl
 8041154:	e7b3      	b.n	80410be <__multiply+0x8c>
 8041156:	46e0      	mov	r8, ip
 8041158:	e7dd      	b.n	8041116 <__multiply+0xe4>
 804115a:	3e01      	subs	r6, #1
 804115c:	e799      	b.n	8041092 <__multiply+0x60>
	...

08041160 <__pow5mult>:
 8041160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8041164:	4615      	mov	r5, r2
 8041166:	f012 0203 	ands.w	r2, r2, #3
 804116a:	4606      	mov	r6, r0
 804116c:	460f      	mov	r7, r1
 804116e:	d007      	beq.n	8041180 <__pow5mult+0x20>
 8041170:	3a01      	subs	r2, #1
 8041172:	4c21      	ldr	r4, [pc, #132]	; (80411f8 <__pow5mult+0x98>)
 8041174:	2300      	movs	r3, #0
 8041176:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 804117a:	f7ff fe8a 	bl	8040e92 <__multadd>
 804117e:	4607      	mov	r7, r0
 8041180:	10ad      	asrs	r5, r5, #2
 8041182:	d035      	beq.n	80411f0 <__pow5mult+0x90>
 8041184:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8041186:	b93c      	cbnz	r4, 8041198 <__pow5mult+0x38>
 8041188:	2010      	movs	r0, #16
 804118a:	f000 fd9d 	bl	8041cc8 <malloc>
 804118e:	6270      	str	r0, [r6, #36]	; 0x24
 8041190:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8041194:	6004      	str	r4, [r0, #0]
 8041196:	60c4      	str	r4, [r0, #12]
 8041198:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 804119c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80411a0:	b94c      	cbnz	r4, 80411b6 <__pow5mult+0x56>
 80411a2:	f240 2171 	movw	r1, #625	; 0x271
 80411a6:	4630      	mov	r0, r6
 80411a8:	f7ff ff3a 	bl	8041020 <__i2b>
 80411ac:	2300      	movs	r3, #0
 80411ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80411b2:	4604      	mov	r4, r0
 80411b4:	6003      	str	r3, [r0, #0]
 80411b6:	f04f 0800 	mov.w	r8, #0
 80411ba:	07eb      	lsls	r3, r5, #31
 80411bc:	d50a      	bpl.n	80411d4 <__pow5mult+0x74>
 80411be:	4639      	mov	r1, r7
 80411c0:	4622      	mov	r2, r4
 80411c2:	4630      	mov	r0, r6
 80411c4:	f7ff ff35 	bl	8041032 <__multiply>
 80411c8:	4639      	mov	r1, r7
 80411ca:	4681      	mov	r9, r0
 80411cc:	4630      	mov	r0, r6
 80411ce:	f7ff fe49 	bl	8040e64 <_Bfree>
 80411d2:	464f      	mov	r7, r9
 80411d4:	106d      	asrs	r5, r5, #1
 80411d6:	d00b      	beq.n	80411f0 <__pow5mult+0x90>
 80411d8:	6820      	ldr	r0, [r4, #0]
 80411da:	b938      	cbnz	r0, 80411ec <__pow5mult+0x8c>
 80411dc:	4622      	mov	r2, r4
 80411de:	4621      	mov	r1, r4
 80411e0:	4630      	mov	r0, r6
 80411e2:	f7ff ff26 	bl	8041032 <__multiply>
 80411e6:	6020      	str	r0, [r4, #0]
 80411e8:	f8c0 8000 	str.w	r8, [r0]
 80411ec:	4604      	mov	r4, r0
 80411ee:	e7e4      	b.n	80411ba <__pow5mult+0x5a>
 80411f0:	4638      	mov	r0, r7
 80411f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80411f6:	bf00      	nop
 80411f8:	080564b0 	.word	0x080564b0

080411fc <__lshift>:
 80411fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8041200:	460c      	mov	r4, r1
 8041202:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8041206:	6923      	ldr	r3, [r4, #16]
 8041208:	6849      	ldr	r1, [r1, #4]
 804120a:	eb0a 0903 	add.w	r9, sl, r3
 804120e:	68a3      	ldr	r3, [r4, #8]
 8041210:	4607      	mov	r7, r0
 8041212:	4616      	mov	r6, r2
 8041214:	f109 0501 	add.w	r5, r9, #1
 8041218:	42ab      	cmp	r3, r5
 804121a:	db32      	blt.n	8041282 <__lshift+0x86>
 804121c:	4638      	mov	r0, r7
 804121e:	f7ff fded 	bl	8040dfc <_Balloc>
 8041222:	2300      	movs	r3, #0
 8041224:	4680      	mov	r8, r0
 8041226:	f100 0114 	add.w	r1, r0, #20
 804122a:	461a      	mov	r2, r3
 804122c:	4553      	cmp	r3, sl
 804122e:	db2b      	blt.n	8041288 <__lshift+0x8c>
 8041230:	6920      	ldr	r0, [r4, #16]
 8041232:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8041236:	f104 0314 	add.w	r3, r4, #20
 804123a:	f016 021f 	ands.w	r2, r6, #31
 804123e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8041242:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8041246:	d025      	beq.n	8041294 <__lshift+0x98>
 8041248:	f1c2 0e20 	rsb	lr, r2, #32
 804124c:	2000      	movs	r0, #0
 804124e:	681e      	ldr	r6, [r3, #0]
 8041250:	468a      	mov	sl, r1
 8041252:	4096      	lsls	r6, r2
 8041254:	4330      	orrs	r0, r6
 8041256:	f84a 0b04 	str.w	r0, [sl], #4
 804125a:	f853 0b04 	ldr.w	r0, [r3], #4
 804125e:	459c      	cmp	ip, r3
 8041260:	fa20 f00e 	lsr.w	r0, r0, lr
 8041264:	d814      	bhi.n	8041290 <__lshift+0x94>
 8041266:	6048      	str	r0, [r1, #4]
 8041268:	b108      	cbz	r0, 804126e <__lshift+0x72>
 804126a:	f109 0502 	add.w	r5, r9, #2
 804126e:	3d01      	subs	r5, #1
 8041270:	4638      	mov	r0, r7
 8041272:	f8c8 5010 	str.w	r5, [r8, #16]
 8041276:	4621      	mov	r1, r4
 8041278:	f7ff fdf4 	bl	8040e64 <_Bfree>
 804127c:	4640      	mov	r0, r8
 804127e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8041282:	3101      	adds	r1, #1
 8041284:	005b      	lsls	r3, r3, #1
 8041286:	e7c7      	b.n	8041218 <__lshift+0x1c>
 8041288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 804128c:	3301      	adds	r3, #1
 804128e:	e7cd      	b.n	804122c <__lshift+0x30>
 8041290:	4651      	mov	r1, sl
 8041292:	e7dc      	b.n	804124e <__lshift+0x52>
 8041294:	3904      	subs	r1, #4
 8041296:	f853 2b04 	ldr.w	r2, [r3], #4
 804129a:	f841 2f04 	str.w	r2, [r1, #4]!
 804129e:	459c      	cmp	ip, r3
 80412a0:	d8f9      	bhi.n	8041296 <__lshift+0x9a>
 80412a2:	e7e4      	b.n	804126e <__lshift+0x72>

080412a4 <__mcmp>:
 80412a4:	6903      	ldr	r3, [r0, #16]
 80412a6:	690a      	ldr	r2, [r1, #16]
 80412a8:	1a9b      	subs	r3, r3, r2
 80412aa:	b530      	push	{r4, r5, lr}
 80412ac:	d10c      	bne.n	80412c8 <__mcmp+0x24>
 80412ae:	0092      	lsls	r2, r2, #2
 80412b0:	3014      	adds	r0, #20
 80412b2:	3114      	adds	r1, #20
 80412b4:	1884      	adds	r4, r0, r2
 80412b6:	4411      	add	r1, r2
 80412b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80412bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80412c0:	4295      	cmp	r5, r2
 80412c2:	d003      	beq.n	80412cc <__mcmp+0x28>
 80412c4:	d305      	bcc.n	80412d2 <__mcmp+0x2e>
 80412c6:	2301      	movs	r3, #1
 80412c8:	4618      	mov	r0, r3
 80412ca:	bd30      	pop	{r4, r5, pc}
 80412cc:	42a0      	cmp	r0, r4
 80412ce:	d3f3      	bcc.n	80412b8 <__mcmp+0x14>
 80412d0:	e7fa      	b.n	80412c8 <__mcmp+0x24>
 80412d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80412d6:	e7f7      	b.n	80412c8 <__mcmp+0x24>

080412d8 <__mdiff>:
 80412d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80412dc:	460d      	mov	r5, r1
 80412de:	4607      	mov	r7, r0
 80412e0:	4611      	mov	r1, r2
 80412e2:	4628      	mov	r0, r5
 80412e4:	4614      	mov	r4, r2
 80412e6:	f7ff ffdd 	bl	80412a4 <__mcmp>
 80412ea:	1e06      	subs	r6, r0, #0
 80412ec:	d108      	bne.n	8041300 <__mdiff+0x28>
 80412ee:	4631      	mov	r1, r6
 80412f0:	4638      	mov	r0, r7
 80412f2:	f7ff fd83 	bl	8040dfc <_Balloc>
 80412f6:	2301      	movs	r3, #1
 80412f8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80412fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8041300:	bfa4      	itt	ge
 8041302:	4623      	movge	r3, r4
 8041304:	462c      	movge	r4, r5
 8041306:	4638      	mov	r0, r7
 8041308:	6861      	ldr	r1, [r4, #4]
 804130a:	bfa6      	itte	ge
 804130c:	461d      	movge	r5, r3
 804130e:	2600      	movge	r6, #0
 8041310:	2601      	movlt	r6, #1
 8041312:	f7ff fd73 	bl	8040dfc <_Balloc>
 8041316:	692b      	ldr	r3, [r5, #16]
 8041318:	60c6      	str	r6, [r0, #12]
 804131a:	6926      	ldr	r6, [r4, #16]
 804131c:	f105 0914 	add.w	r9, r5, #20
 8041320:	f104 0214 	add.w	r2, r4, #20
 8041324:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8041328:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 804132c:	f100 0514 	add.w	r5, r0, #20
 8041330:	f04f 0e00 	mov.w	lr, #0
 8041334:	f852 ab04 	ldr.w	sl, [r2], #4
 8041338:	f859 4b04 	ldr.w	r4, [r9], #4
 804133c:	fa1e f18a 	uxtah	r1, lr, sl
 8041340:	b2a3      	uxth	r3, r4
 8041342:	1ac9      	subs	r1, r1, r3
 8041344:	0c23      	lsrs	r3, r4, #16
 8041346:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 804134a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 804134e:	b289      	uxth	r1, r1
 8041350:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8041354:	45c8      	cmp	r8, r9
 8041356:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 804135a:	4694      	mov	ip, r2
 804135c:	f845 3b04 	str.w	r3, [r5], #4
 8041360:	d8e8      	bhi.n	8041334 <__mdiff+0x5c>
 8041362:	45bc      	cmp	ip, r7
 8041364:	d304      	bcc.n	8041370 <__mdiff+0x98>
 8041366:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 804136a:	b183      	cbz	r3, 804138e <__mdiff+0xb6>
 804136c:	6106      	str	r6, [r0, #16]
 804136e:	e7c5      	b.n	80412fc <__mdiff+0x24>
 8041370:	f85c 1b04 	ldr.w	r1, [ip], #4
 8041374:	fa1e f381 	uxtah	r3, lr, r1
 8041378:	141a      	asrs	r2, r3, #16
 804137a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 804137e:	b29b      	uxth	r3, r3
 8041380:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8041384:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8041388:	f845 3b04 	str.w	r3, [r5], #4
 804138c:	e7e9      	b.n	8041362 <__mdiff+0x8a>
 804138e:	3e01      	subs	r6, #1
 8041390:	e7e9      	b.n	8041366 <__mdiff+0x8e>
	...

08041394 <__ulp>:
 8041394:	4b12      	ldr	r3, [pc, #72]	; (80413e0 <__ulp+0x4c>)
 8041396:	ee10 2a90 	vmov	r2, s1
 804139a:	401a      	ands	r2, r3
 804139c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80413a0:	2b00      	cmp	r3, #0
 80413a2:	dd04      	ble.n	80413ae <__ulp+0x1a>
 80413a4:	2000      	movs	r0, #0
 80413a6:	4619      	mov	r1, r3
 80413a8:	ec41 0b10 	vmov	d0, r0, r1
 80413ac:	4770      	bx	lr
 80413ae:	425b      	negs	r3, r3
 80413b0:	151b      	asrs	r3, r3, #20
 80413b2:	2b13      	cmp	r3, #19
 80413b4:	f04f 0000 	mov.w	r0, #0
 80413b8:	f04f 0100 	mov.w	r1, #0
 80413bc:	dc04      	bgt.n	80413c8 <__ulp+0x34>
 80413be:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80413c2:	fa42 f103 	asr.w	r1, r2, r3
 80413c6:	e7ef      	b.n	80413a8 <__ulp+0x14>
 80413c8:	3b14      	subs	r3, #20
 80413ca:	2b1e      	cmp	r3, #30
 80413cc:	f04f 0201 	mov.w	r2, #1
 80413d0:	bfda      	itte	le
 80413d2:	f1c3 031f 	rsble	r3, r3, #31
 80413d6:	fa02 f303 	lslle.w	r3, r2, r3
 80413da:	4613      	movgt	r3, r2
 80413dc:	4618      	mov	r0, r3
 80413de:	e7e3      	b.n	80413a8 <__ulp+0x14>
 80413e0:	7ff00000 	.word	0x7ff00000

080413e4 <__b2d>:
 80413e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80413e6:	6905      	ldr	r5, [r0, #16]
 80413e8:	f100 0714 	add.w	r7, r0, #20
 80413ec:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80413f0:	1f2e      	subs	r6, r5, #4
 80413f2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80413f6:	4620      	mov	r0, r4
 80413f8:	f7ff fdc4 	bl	8040f84 <__hi0bits>
 80413fc:	f1c0 0320 	rsb	r3, r0, #32
 8041400:	280a      	cmp	r0, #10
 8041402:	600b      	str	r3, [r1, #0]
 8041404:	f8df c074 	ldr.w	ip, [pc, #116]	; 804147c <__b2d+0x98>
 8041408:	dc14      	bgt.n	8041434 <__b2d+0x50>
 804140a:	f1c0 0e0b 	rsb	lr, r0, #11
 804140e:	fa24 f10e 	lsr.w	r1, r4, lr
 8041412:	42b7      	cmp	r7, r6
 8041414:	ea41 030c 	orr.w	r3, r1, ip
 8041418:	bf34      	ite	cc
 804141a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 804141e:	2100      	movcs	r1, #0
 8041420:	3015      	adds	r0, #21
 8041422:	fa04 f000 	lsl.w	r0, r4, r0
 8041426:	fa21 f10e 	lsr.w	r1, r1, lr
 804142a:	ea40 0201 	orr.w	r2, r0, r1
 804142e:	ec43 2b10 	vmov	d0, r2, r3
 8041432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8041434:	42b7      	cmp	r7, r6
 8041436:	bf3a      	itte	cc
 8041438:	f1a5 0608 	subcc.w	r6, r5, #8
 804143c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8041440:	2100      	movcs	r1, #0
 8041442:	380b      	subs	r0, #11
 8041444:	d015      	beq.n	8041472 <__b2d+0x8e>
 8041446:	4084      	lsls	r4, r0
 8041448:	f1c0 0520 	rsb	r5, r0, #32
 804144c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8041450:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8041454:	42be      	cmp	r6, r7
 8041456:	fa21 fc05 	lsr.w	ip, r1, r5
 804145a:	ea44 030c 	orr.w	r3, r4, ip
 804145e:	bf8c      	ite	hi
 8041460:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8041464:	2400      	movls	r4, #0
 8041466:	fa01 f000 	lsl.w	r0, r1, r0
 804146a:	40ec      	lsrs	r4, r5
 804146c:	ea40 0204 	orr.w	r2, r0, r4
 8041470:	e7dd      	b.n	804142e <__b2d+0x4a>
 8041472:	ea44 030c 	orr.w	r3, r4, ip
 8041476:	460a      	mov	r2, r1
 8041478:	e7d9      	b.n	804142e <__b2d+0x4a>
 804147a:	bf00      	nop
 804147c:	3ff00000 	.word	0x3ff00000

08041480 <__d2b>:
 8041480:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8041484:	460e      	mov	r6, r1
 8041486:	2101      	movs	r1, #1
 8041488:	ec59 8b10 	vmov	r8, r9, d0
 804148c:	4615      	mov	r5, r2
 804148e:	f7ff fcb5 	bl	8040dfc <_Balloc>
 8041492:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8041496:	4607      	mov	r7, r0
 8041498:	f3c9 0313 	ubfx	r3, r9, #0, #20
 804149c:	bb34      	cbnz	r4, 80414ec <__d2b+0x6c>
 804149e:	9301      	str	r3, [sp, #4]
 80414a0:	f1b8 0300 	subs.w	r3, r8, #0
 80414a4:	d027      	beq.n	80414f6 <__d2b+0x76>
 80414a6:	a802      	add	r0, sp, #8
 80414a8:	f840 3d08 	str.w	r3, [r0, #-8]!
 80414ac:	f7ff fd89 	bl	8040fc2 <__lo0bits>
 80414b0:	9900      	ldr	r1, [sp, #0]
 80414b2:	b1f0      	cbz	r0, 80414f2 <__d2b+0x72>
 80414b4:	9a01      	ldr	r2, [sp, #4]
 80414b6:	f1c0 0320 	rsb	r3, r0, #32
 80414ba:	fa02 f303 	lsl.w	r3, r2, r3
 80414be:	430b      	orrs	r3, r1
 80414c0:	40c2      	lsrs	r2, r0
 80414c2:	617b      	str	r3, [r7, #20]
 80414c4:	9201      	str	r2, [sp, #4]
 80414c6:	9b01      	ldr	r3, [sp, #4]
 80414c8:	61bb      	str	r3, [r7, #24]
 80414ca:	2b00      	cmp	r3, #0
 80414cc:	bf14      	ite	ne
 80414ce:	2102      	movne	r1, #2
 80414d0:	2101      	moveq	r1, #1
 80414d2:	6139      	str	r1, [r7, #16]
 80414d4:	b1c4      	cbz	r4, 8041508 <__d2b+0x88>
 80414d6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80414da:	4404      	add	r4, r0
 80414dc:	6034      	str	r4, [r6, #0]
 80414de:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80414e2:	6028      	str	r0, [r5, #0]
 80414e4:	4638      	mov	r0, r7
 80414e6:	b003      	add	sp, #12
 80414e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80414ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80414f0:	e7d5      	b.n	804149e <__d2b+0x1e>
 80414f2:	6179      	str	r1, [r7, #20]
 80414f4:	e7e7      	b.n	80414c6 <__d2b+0x46>
 80414f6:	a801      	add	r0, sp, #4
 80414f8:	f7ff fd63 	bl	8040fc2 <__lo0bits>
 80414fc:	9b01      	ldr	r3, [sp, #4]
 80414fe:	617b      	str	r3, [r7, #20]
 8041500:	2101      	movs	r1, #1
 8041502:	6139      	str	r1, [r7, #16]
 8041504:	3020      	adds	r0, #32
 8041506:	e7e5      	b.n	80414d4 <__d2b+0x54>
 8041508:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 804150c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8041510:	6030      	str	r0, [r6, #0]
 8041512:	6918      	ldr	r0, [r3, #16]
 8041514:	f7ff fd36 	bl	8040f84 <__hi0bits>
 8041518:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 804151c:	e7e1      	b.n	80414e2 <__d2b+0x62>

0804151e <__ratio>:
 804151e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8041522:	4688      	mov	r8, r1
 8041524:	4669      	mov	r1, sp
 8041526:	4681      	mov	r9, r0
 8041528:	f7ff ff5c 	bl	80413e4 <__b2d>
 804152c:	a901      	add	r1, sp, #4
 804152e:	4640      	mov	r0, r8
 8041530:	ec57 6b10 	vmov	r6, r7, d0
 8041534:	f7ff ff56 	bl	80413e4 <__b2d>
 8041538:	f8d9 3010 	ldr.w	r3, [r9, #16]
 804153c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8041540:	eba3 0c02 	sub.w	ip, r3, r2
 8041544:	e9dd 3200 	ldrd	r3, r2, [sp]
 8041548:	1a9b      	subs	r3, r3, r2
 804154a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 804154e:	ec5b ab10 	vmov	sl, fp, d0
 8041552:	2b00      	cmp	r3, #0
 8041554:	bfce      	itee	gt
 8041556:	463a      	movgt	r2, r7
 8041558:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 804155c:	465a      	movle	r2, fp
 804155e:	4659      	mov	r1, fp
 8041560:	463d      	mov	r5, r7
 8041562:	bfd4      	ite	le
 8041564:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8041568:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 804156c:	4630      	mov	r0, r6
 804156e:	ee10 2a10 	vmov	r2, s0
 8041572:	460b      	mov	r3, r1
 8041574:	4629      	mov	r1, r5
 8041576:	f7df f9a1 	bl	80208bc <__aeabi_ddiv>
 804157a:	ec41 0b10 	vmov	d0, r0, r1
 804157e:	b003      	add	sp, #12
 8041580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08041584 <__copybits>:
 8041584:	3901      	subs	r1, #1
 8041586:	b510      	push	{r4, lr}
 8041588:	1149      	asrs	r1, r1, #5
 804158a:	6914      	ldr	r4, [r2, #16]
 804158c:	3101      	adds	r1, #1
 804158e:	f102 0314 	add.w	r3, r2, #20
 8041592:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8041596:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 804159a:	42a3      	cmp	r3, r4
 804159c:	4602      	mov	r2, r0
 804159e:	d303      	bcc.n	80415a8 <__copybits+0x24>
 80415a0:	2300      	movs	r3, #0
 80415a2:	428a      	cmp	r2, r1
 80415a4:	d305      	bcc.n	80415b2 <__copybits+0x2e>
 80415a6:	bd10      	pop	{r4, pc}
 80415a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80415ac:	f840 2b04 	str.w	r2, [r0], #4
 80415b0:	e7f3      	b.n	804159a <__copybits+0x16>
 80415b2:	f842 3b04 	str.w	r3, [r2], #4
 80415b6:	e7f4      	b.n	80415a2 <__copybits+0x1e>

080415b8 <__any_on>:
 80415b8:	f100 0214 	add.w	r2, r0, #20
 80415bc:	6900      	ldr	r0, [r0, #16]
 80415be:	114b      	asrs	r3, r1, #5
 80415c0:	4298      	cmp	r0, r3
 80415c2:	b510      	push	{r4, lr}
 80415c4:	db11      	blt.n	80415ea <__any_on+0x32>
 80415c6:	dd0a      	ble.n	80415de <__any_on+0x26>
 80415c8:	f011 011f 	ands.w	r1, r1, #31
 80415cc:	d007      	beq.n	80415de <__any_on+0x26>
 80415ce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80415d2:	fa24 f001 	lsr.w	r0, r4, r1
 80415d6:	fa00 f101 	lsl.w	r1, r0, r1
 80415da:	428c      	cmp	r4, r1
 80415dc:	d10b      	bne.n	80415f6 <__any_on+0x3e>
 80415de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80415e2:	4293      	cmp	r3, r2
 80415e4:	d803      	bhi.n	80415ee <__any_on+0x36>
 80415e6:	2000      	movs	r0, #0
 80415e8:	bd10      	pop	{r4, pc}
 80415ea:	4603      	mov	r3, r0
 80415ec:	e7f7      	b.n	80415de <__any_on+0x26>
 80415ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80415f2:	2900      	cmp	r1, #0
 80415f4:	d0f5      	beq.n	80415e2 <__any_on+0x2a>
 80415f6:	2001      	movs	r0, #1
 80415f8:	e7f6      	b.n	80415e8 <__any_on+0x30>

080415fa <_calloc_r>:
 80415fa:	b538      	push	{r3, r4, r5, lr}
 80415fc:	fb02 f401 	mul.w	r4, r2, r1
 8041600:	4621      	mov	r1, r4
 8041602:	f000 f809 	bl	8041618 <_malloc_r>
 8041606:	4605      	mov	r5, r0
 8041608:	b118      	cbz	r0, 8041612 <_calloc_r+0x18>
 804160a:	4622      	mov	r2, r4
 804160c:	2100      	movs	r1, #0
 804160e:	f7fe fa01 	bl	803fa14 <memset>
 8041612:	4628      	mov	r0, r5
 8041614:	bd38      	pop	{r3, r4, r5, pc}
	...

08041618 <_malloc_r>:
 8041618:	b570      	push	{r4, r5, r6, lr}
 804161a:	1ccd      	adds	r5, r1, #3
 804161c:	f025 0503 	bic.w	r5, r5, #3
 8041620:	3508      	adds	r5, #8
 8041622:	2d0c      	cmp	r5, #12
 8041624:	bf38      	it	cc
 8041626:	250c      	movcc	r5, #12
 8041628:	2d00      	cmp	r5, #0
 804162a:	4606      	mov	r6, r0
 804162c:	db01      	blt.n	8041632 <_malloc_r+0x1a>
 804162e:	42a9      	cmp	r1, r5
 8041630:	d903      	bls.n	804163a <_malloc_r+0x22>
 8041632:	230c      	movs	r3, #12
 8041634:	6033      	str	r3, [r6, #0]
 8041636:	2000      	movs	r0, #0
 8041638:	bd70      	pop	{r4, r5, r6, pc}
 804163a:	f000 fb66 	bl	8041d0a <__malloc_lock>
 804163e:	4a21      	ldr	r2, [pc, #132]	; (80416c4 <_malloc_r+0xac>)
 8041640:	6814      	ldr	r4, [r2, #0]
 8041642:	4621      	mov	r1, r4
 8041644:	b991      	cbnz	r1, 804166c <_malloc_r+0x54>
 8041646:	4c20      	ldr	r4, [pc, #128]	; (80416c8 <_malloc_r+0xb0>)
 8041648:	6823      	ldr	r3, [r4, #0]
 804164a:	b91b      	cbnz	r3, 8041654 <_malloc_r+0x3c>
 804164c:	4630      	mov	r0, r6
 804164e:	f000 fb17 	bl	8041c80 <_sbrk_r>
 8041652:	6020      	str	r0, [r4, #0]
 8041654:	4629      	mov	r1, r5
 8041656:	4630      	mov	r0, r6
 8041658:	f000 fb12 	bl	8041c80 <_sbrk_r>
 804165c:	1c43      	adds	r3, r0, #1
 804165e:	d124      	bne.n	80416aa <_malloc_r+0x92>
 8041660:	230c      	movs	r3, #12
 8041662:	6033      	str	r3, [r6, #0]
 8041664:	4630      	mov	r0, r6
 8041666:	f000 fb51 	bl	8041d0c <__malloc_unlock>
 804166a:	e7e4      	b.n	8041636 <_malloc_r+0x1e>
 804166c:	680b      	ldr	r3, [r1, #0]
 804166e:	1b5b      	subs	r3, r3, r5
 8041670:	d418      	bmi.n	80416a4 <_malloc_r+0x8c>
 8041672:	2b0b      	cmp	r3, #11
 8041674:	d90f      	bls.n	8041696 <_malloc_r+0x7e>
 8041676:	600b      	str	r3, [r1, #0]
 8041678:	50cd      	str	r5, [r1, r3]
 804167a:	18cc      	adds	r4, r1, r3
 804167c:	4630      	mov	r0, r6
 804167e:	f000 fb45 	bl	8041d0c <__malloc_unlock>
 8041682:	f104 000b 	add.w	r0, r4, #11
 8041686:	1d23      	adds	r3, r4, #4
 8041688:	f020 0007 	bic.w	r0, r0, #7
 804168c:	1ac3      	subs	r3, r0, r3
 804168e:	d0d3      	beq.n	8041638 <_malloc_r+0x20>
 8041690:	425a      	negs	r2, r3
 8041692:	50e2      	str	r2, [r4, r3]
 8041694:	e7d0      	b.n	8041638 <_malloc_r+0x20>
 8041696:	428c      	cmp	r4, r1
 8041698:	684b      	ldr	r3, [r1, #4]
 804169a:	bf16      	itet	ne
 804169c:	6063      	strne	r3, [r4, #4]
 804169e:	6013      	streq	r3, [r2, #0]
 80416a0:	460c      	movne	r4, r1
 80416a2:	e7eb      	b.n	804167c <_malloc_r+0x64>
 80416a4:	460c      	mov	r4, r1
 80416a6:	6849      	ldr	r1, [r1, #4]
 80416a8:	e7cc      	b.n	8041644 <_malloc_r+0x2c>
 80416aa:	1cc4      	adds	r4, r0, #3
 80416ac:	f024 0403 	bic.w	r4, r4, #3
 80416b0:	42a0      	cmp	r0, r4
 80416b2:	d005      	beq.n	80416c0 <_malloc_r+0xa8>
 80416b4:	1a21      	subs	r1, r4, r0
 80416b6:	4630      	mov	r0, r6
 80416b8:	f000 fae2 	bl	8041c80 <_sbrk_r>
 80416bc:	3001      	adds	r0, #1
 80416be:	d0cf      	beq.n	8041660 <_malloc_r+0x48>
 80416c0:	6025      	str	r5, [r4, #0]
 80416c2:	e7db      	b.n	804167c <_malloc_r+0x64>
 80416c4:	20008060 	.word	0x20008060
 80416c8:	20008064 	.word	0x20008064

080416cc <__ssputs_r>:
 80416cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80416d0:	688e      	ldr	r6, [r1, #8]
 80416d2:	429e      	cmp	r6, r3
 80416d4:	4682      	mov	sl, r0
 80416d6:	460c      	mov	r4, r1
 80416d8:	4690      	mov	r8, r2
 80416da:	4699      	mov	r9, r3
 80416dc:	d837      	bhi.n	804174e <__ssputs_r+0x82>
 80416de:	898a      	ldrh	r2, [r1, #12]
 80416e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80416e4:	d031      	beq.n	804174a <__ssputs_r+0x7e>
 80416e6:	6825      	ldr	r5, [r4, #0]
 80416e8:	6909      	ldr	r1, [r1, #16]
 80416ea:	1a6f      	subs	r7, r5, r1
 80416ec:	6965      	ldr	r5, [r4, #20]
 80416ee:	2302      	movs	r3, #2
 80416f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80416f4:	fb95 f5f3 	sdiv	r5, r5, r3
 80416f8:	f109 0301 	add.w	r3, r9, #1
 80416fc:	443b      	add	r3, r7
 80416fe:	429d      	cmp	r5, r3
 8041700:	bf38      	it	cc
 8041702:	461d      	movcc	r5, r3
 8041704:	0553      	lsls	r3, r2, #21
 8041706:	d530      	bpl.n	804176a <__ssputs_r+0x9e>
 8041708:	4629      	mov	r1, r5
 804170a:	f7ff ff85 	bl	8041618 <_malloc_r>
 804170e:	4606      	mov	r6, r0
 8041710:	b950      	cbnz	r0, 8041728 <__ssputs_r+0x5c>
 8041712:	230c      	movs	r3, #12
 8041714:	f8ca 3000 	str.w	r3, [sl]
 8041718:	89a3      	ldrh	r3, [r4, #12]
 804171a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804171e:	81a3      	strh	r3, [r4, #12]
 8041720:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8041724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8041728:	463a      	mov	r2, r7
 804172a:	6921      	ldr	r1, [r4, #16]
 804172c:	f7fe f967 	bl	803f9fe <memcpy>
 8041730:	89a3      	ldrh	r3, [r4, #12]
 8041732:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8041736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 804173a:	81a3      	strh	r3, [r4, #12]
 804173c:	6126      	str	r6, [r4, #16]
 804173e:	6165      	str	r5, [r4, #20]
 8041740:	443e      	add	r6, r7
 8041742:	1bed      	subs	r5, r5, r7
 8041744:	6026      	str	r6, [r4, #0]
 8041746:	60a5      	str	r5, [r4, #8]
 8041748:	464e      	mov	r6, r9
 804174a:	454e      	cmp	r6, r9
 804174c:	d900      	bls.n	8041750 <__ssputs_r+0x84>
 804174e:	464e      	mov	r6, r9
 8041750:	4632      	mov	r2, r6
 8041752:	4641      	mov	r1, r8
 8041754:	6820      	ldr	r0, [r4, #0]
 8041756:	f000 fabf 	bl	8041cd8 <memmove>
 804175a:	68a3      	ldr	r3, [r4, #8]
 804175c:	1b9b      	subs	r3, r3, r6
 804175e:	60a3      	str	r3, [r4, #8]
 8041760:	6823      	ldr	r3, [r4, #0]
 8041762:	441e      	add	r6, r3
 8041764:	6026      	str	r6, [r4, #0]
 8041766:	2000      	movs	r0, #0
 8041768:	e7dc      	b.n	8041724 <__ssputs_r+0x58>
 804176a:	462a      	mov	r2, r5
 804176c:	f000 fb1e 	bl	8041dac <_realloc_r>
 8041770:	4606      	mov	r6, r0
 8041772:	2800      	cmp	r0, #0
 8041774:	d1e2      	bne.n	804173c <__ssputs_r+0x70>
 8041776:	6921      	ldr	r1, [r4, #16]
 8041778:	4650      	mov	r0, sl
 804177a:	f000 fac9 	bl	8041d10 <_free_r>
 804177e:	e7c8      	b.n	8041712 <__ssputs_r+0x46>

08041780 <_svfiprintf_r>:
 8041780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8041784:	461d      	mov	r5, r3
 8041786:	898b      	ldrh	r3, [r1, #12]
 8041788:	061f      	lsls	r7, r3, #24
 804178a:	b09d      	sub	sp, #116	; 0x74
 804178c:	4680      	mov	r8, r0
 804178e:	460c      	mov	r4, r1
 8041790:	4616      	mov	r6, r2
 8041792:	d50f      	bpl.n	80417b4 <_svfiprintf_r+0x34>
 8041794:	690b      	ldr	r3, [r1, #16]
 8041796:	b96b      	cbnz	r3, 80417b4 <_svfiprintf_r+0x34>
 8041798:	2140      	movs	r1, #64	; 0x40
 804179a:	f7ff ff3d 	bl	8041618 <_malloc_r>
 804179e:	6020      	str	r0, [r4, #0]
 80417a0:	6120      	str	r0, [r4, #16]
 80417a2:	b928      	cbnz	r0, 80417b0 <_svfiprintf_r+0x30>
 80417a4:	230c      	movs	r3, #12
 80417a6:	f8c8 3000 	str.w	r3, [r8]
 80417aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80417ae:	e0c8      	b.n	8041942 <_svfiprintf_r+0x1c2>
 80417b0:	2340      	movs	r3, #64	; 0x40
 80417b2:	6163      	str	r3, [r4, #20]
 80417b4:	2300      	movs	r3, #0
 80417b6:	9309      	str	r3, [sp, #36]	; 0x24
 80417b8:	2320      	movs	r3, #32
 80417ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80417be:	2330      	movs	r3, #48	; 0x30
 80417c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80417c4:	9503      	str	r5, [sp, #12]
 80417c6:	f04f 0b01 	mov.w	fp, #1
 80417ca:	4637      	mov	r7, r6
 80417cc:	463d      	mov	r5, r7
 80417ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80417d2:	b10b      	cbz	r3, 80417d8 <_svfiprintf_r+0x58>
 80417d4:	2b25      	cmp	r3, #37	; 0x25
 80417d6:	d13e      	bne.n	8041856 <_svfiprintf_r+0xd6>
 80417d8:	ebb7 0a06 	subs.w	sl, r7, r6
 80417dc:	d00b      	beq.n	80417f6 <_svfiprintf_r+0x76>
 80417de:	4653      	mov	r3, sl
 80417e0:	4632      	mov	r2, r6
 80417e2:	4621      	mov	r1, r4
 80417e4:	4640      	mov	r0, r8
 80417e6:	f7ff ff71 	bl	80416cc <__ssputs_r>
 80417ea:	3001      	adds	r0, #1
 80417ec:	f000 80a4 	beq.w	8041938 <_svfiprintf_r+0x1b8>
 80417f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80417f2:	4453      	add	r3, sl
 80417f4:	9309      	str	r3, [sp, #36]	; 0x24
 80417f6:	783b      	ldrb	r3, [r7, #0]
 80417f8:	2b00      	cmp	r3, #0
 80417fa:	f000 809d 	beq.w	8041938 <_svfiprintf_r+0x1b8>
 80417fe:	2300      	movs	r3, #0
 8041800:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8041804:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8041808:	9304      	str	r3, [sp, #16]
 804180a:	9307      	str	r3, [sp, #28]
 804180c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8041810:	931a      	str	r3, [sp, #104]	; 0x68
 8041812:	462f      	mov	r7, r5
 8041814:	2205      	movs	r2, #5
 8041816:	f817 1b01 	ldrb.w	r1, [r7], #1
 804181a:	4850      	ldr	r0, [pc, #320]	; (804195c <_svfiprintf_r+0x1dc>)
 804181c:	f7de fd18 	bl	8020250 <memchr>
 8041820:	9b04      	ldr	r3, [sp, #16]
 8041822:	b9d0      	cbnz	r0, 804185a <_svfiprintf_r+0xda>
 8041824:	06d9      	lsls	r1, r3, #27
 8041826:	bf44      	itt	mi
 8041828:	2220      	movmi	r2, #32
 804182a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 804182e:	071a      	lsls	r2, r3, #28
 8041830:	bf44      	itt	mi
 8041832:	222b      	movmi	r2, #43	; 0x2b
 8041834:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8041838:	782a      	ldrb	r2, [r5, #0]
 804183a:	2a2a      	cmp	r2, #42	; 0x2a
 804183c:	d015      	beq.n	804186a <_svfiprintf_r+0xea>
 804183e:	9a07      	ldr	r2, [sp, #28]
 8041840:	462f      	mov	r7, r5
 8041842:	2000      	movs	r0, #0
 8041844:	250a      	movs	r5, #10
 8041846:	4639      	mov	r1, r7
 8041848:	f811 3b01 	ldrb.w	r3, [r1], #1
 804184c:	3b30      	subs	r3, #48	; 0x30
 804184e:	2b09      	cmp	r3, #9
 8041850:	d94d      	bls.n	80418ee <_svfiprintf_r+0x16e>
 8041852:	b1b8      	cbz	r0, 8041884 <_svfiprintf_r+0x104>
 8041854:	e00f      	b.n	8041876 <_svfiprintf_r+0xf6>
 8041856:	462f      	mov	r7, r5
 8041858:	e7b8      	b.n	80417cc <_svfiprintf_r+0x4c>
 804185a:	4a40      	ldr	r2, [pc, #256]	; (804195c <_svfiprintf_r+0x1dc>)
 804185c:	1a80      	subs	r0, r0, r2
 804185e:	fa0b f000 	lsl.w	r0, fp, r0
 8041862:	4318      	orrs	r0, r3
 8041864:	9004      	str	r0, [sp, #16]
 8041866:	463d      	mov	r5, r7
 8041868:	e7d3      	b.n	8041812 <_svfiprintf_r+0x92>
 804186a:	9a03      	ldr	r2, [sp, #12]
 804186c:	1d11      	adds	r1, r2, #4
 804186e:	6812      	ldr	r2, [r2, #0]
 8041870:	9103      	str	r1, [sp, #12]
 8041872:	2a00      	cmp	r2, #0
 8041874:	db01      	blt.n	804187a <_svfiprintf_r+0xfa>
 8041876:	9207      	str	r2, [sp, #28]
 8041878:	e004      	b.n	8041884 <_svfiprintf_r+0x104>
 804187a:	4252      	negs	r2, r2
 804187c:	f043 0302 	orr.w	r3, r3, #2
 8041880:	9207      	str	r2, [sp, #28]
 8041882:	9304      	str	r3, [sp, #16]
 8041884:	783b      	ldrb	r3, [r7, #0]
 8041886:	2b2e      	cmp	r3, #46	; 0x2e
 8041888:	d10c      	bne.n	80418a4 <_svfiprintf_r+0x124>
 804188a:	787b      	ldrb	r3, [r7, #1]
 804188c:	2b2a      	cmp	r3, #42	; 0x2a
 804188e:	d133      	bne.n	80418f8 <_svfiprintf_r+0x178>
 8041890:	9b03      	ldr	r3, [sp, #12]
 8041892:	1d1a      	adds	r2, r3, #4
 8041894:	681b      	ldr	r3, [r3, #0]
 8041896:	9203      	str	r2, [sp, #12]
 8041898:	2b00      	cmp	r3, #0
 804189a:	bfb8      	it	lt
 804189c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80418a0:	3702      	adds	r7, #2
 80418a2:	9305      	str	r3, [sp, #20]
 80418a4:	4d2e      	ldr	r5, [pc, #184]	; (8041960 <_svfiprintf_r+0x1e0>)
 80418a6:	7839      	ldrb	r1, [r7, #0]
 80418a8:	2203      	movs	r2, #3
 80418aa:	4628      	mov	r0, r5
 80418ac:	f7de fcd0 	bl	8020250 <memchr>
 80418b0:	b138      	cbz	r0, 80418c2 <_svfiprintf_r+0x142>
 80418b2:	2340      	movs	r3, #64	; 0x40
 80418b4:	1b40      	subs	r0, r0, r5
 80418b6:	fa03 f000 	lsl.w	r0, r3, r0
 80418ba:	9b04      	ldr	r3, [sp, #16]
 80418bc:	4303      	orrs	r3, r0
 80418be:	3701      	adds	r7, #1
 80418c0:	9304      	str	r3, [sp, #16]
 80418c2:	7839      	ldrb	r1, [r7, #0]
 80418c4:	4827      	ldr	r0, [pc, #156]	; (8041964 <_svfiprintf_r+0x1e4>)
 80418c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80418ca:	2206      	movs	r2, #6
 80418cc:	1c7e      	adds	r6, r7, #1
 80418ce:	f7de fcbf 	bl	8020250 <memchr>
 80418d2:	2800      	cmp	r0, #0
 80418d4:	d038      	beq.n	8041948 <_svfiprintf_r+0x1c8>
 80418d6:	4b24      	ldr	r3, [pc, #144]	; (8041968 <_svfiprintf_r+0x1e8>)
 80418d8:	bb13      	cbnz	r3, 8041920 <_svfiprintf_r+0x1a0>
 80418da:	9b03      	ldr	r3, [sp, #12]
 80418dc:	3307      	adds	r3, #7
 80418de:	f023 0307 	bic.w	r3, r3, #7
 80418e2:	3308      	adds	r3, #8
 80418e4:	9303      	str	r3, [sp, #12]
 80418e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80418e8:	444b      	add	r3, r9
 80418ea:	9309      	str	r3, [sp, #36]	; 0x24
 80418ec:	e76d      	b.n	80417ca <_svfiprintf_r+0x4a>
 80418ee:	fb05 3202 	mla	r2, r5, r2, r3
 80418f2:	2001      	movs	r0, #1
 80418f4:	460f      	mov	r7, r1
 80418f6:	e7a6      	b.n	8041846 <_svfiprintf_r+0xc6>
 80418f8:	2300      	movs	r3, #0
 80418fa:	3701      	adds	r7, #1
 80418fc:	9305      	str	r3, [sp, #20]
 80418fe:	4619      	mov	r1, r3
 8041900:	250a      	movs	r5, #10
 8041902:	4638      	mov	r0, r7
 8041904:	f810 2b01 	ldrb.w	r2, [r0], #1
 8041908:	3a30      	subs	r2, #48	; 0x30
 804190a:	2a09      	cmp	r2, #9
 804190c:	d903      	bls.n	8041916 <_svfiprintf_r+0x196>
 804190e:	2b00      	cmp	r3, #0
 8041910:	d0c8      	beq.n	80418a4 <_svfiprintf_r+0x124>
 8041912:	9105      	str	r1, [sp, #20]
 8041914:	e7c6      	b.n	80418a4 <_svfiprintf_r+0x124>
 8041916:	fb05 2101 	mla	r1, r5, r1, r2
 804191a:	2301      	movs	r3, #1
 804191c:	4607      	mov	r7, r0
 804191e:	e7f0      	b.n	8041902 <_svfiprintf_r+0x182>
 8041920:	ab03      	add	r3, sp, #12
 8041922:	9300      	str	r3, [sp, #0]
 8041924:	4622      	mov	r2, r4
 8041926:	4b11      	ldr	r3, [pc, #68]	; (804196c <_svfiprintf_r+0x1ec>)
 8041928:	a904      	add	r1, sp, #16
 804192a:	4640      	mov	r0, r8
 804192c:	f3af 8000 	nop.w
 8041930:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8041934:	4681      	mov	r9, r0
 8041936:	d1d6      	bne.n	80418e6 <_svfiprintf_r+0x166>
 8041938:	89a3      	ldrh	r3, [r4, #12]
 804193a:	065b      	lsls	r3, r3, #25
 804193c:	f53f af35 	bmi.w	80417aa <_svfiprintf_r+0x2a>
 8041940:	9809      	ldr	r0, [sp, #36]	; 0x24
 8041942:	b01d      	add	sp, #116	; 0x74
 8041944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8041948:	ab03      	add	r3, sp, #12
 804194a:	9300      	str	r3, [sp, #0]
 804194c:	4622      	mov	r2, r4
 804194e:	4b07      	ldr	r3, [pc, #28]	; (804196c <_svfiprintf_r+0x1ec>)
 8041950:	a904      	add	r1, sp, #16
 8041952:	4640      	mov	r0, r8
 8041954:	f000 f882 	bl	8041a5c <_printf_i>
 8041958:	e7ea      	b.n	8041930 <_svfiprintf_r+0x1b0>
 804195a:	bf00      	nop
 804195c:	080564bc 	.word	0x080564bc
 8041960:	080564c2 	.word	0x080564c2
 8041964:	080564c6 	.word	0x080564c6
 8041968:	00000000 	.word	0x00000000
 804196c:	080416cd 	.word	0x080416cd

08041970 <_printf_common>:
 8041970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8041974:	4691      	mov	r9, r2
 8041976:	461f      	mov	r7, r3
 8041978:	688a      	ldr	r2, [r1, #8]
 804197a:	690b      	ldr	r3, [r1, #16]
 804197c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8041980:	4293      	cmp	r3, r2
 8041982:	bfb8      	it	lt
 8041984:	4613      	movlt	r3, r2
 8041986:	f8c9 3000 	str.w	r3, [r9]
 804198a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 804198e:	4606      	mov	r6, r0
 8041990:	460c      	mov	r4, r1
 8041992:	b112      	cbz	r2, 804199a <_printf_common+0x2a>
 8041994:	3301      	adds	r3, #1
 8041996:	f8c9 3000 	str.w	r3, [r9]
 804199a:	6823      	ldr	r3, [r4, #0]
 804199c:	0699      	lsls	r1, r3, #26
 804199e:	bf42      	ittt	mi
 80419a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80419a4:	3302      	addmi	r3, #2
 80419a6:	f8c9 3000 	strmi.w	r3, [r9]
 80419aa:	6825      	ldr	r5, [r4, #0]
 80419ac:	f015 0506 	ands.w	r5, r5, #6
 80419b0:	d107      	bne.n	80419c2 <_printf_common+0x52>
 80419b2:	f104 0a19 	add.w	sl, r4, #25
 80419b6:	68e3      	ldr	r3, [r4, #12]
 80419b8:	f8d9 2000 	ldr.w	r2, [r9]
 80419bc:	1a9b      	subs	r3, r3, r2
 80419be:	42ab      	cmp	r3, r5
 80419c0:	dc28      	bgt.n	8041a14 <_printf_common+0xa4>
 80419c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80419c6:	6822      	ldr	r2, [r4, #0]
 80419c8:	3300      	adds	r3, #0
 80419ca:	bf18      	it	ne
 80419cc:	2301      	movne	r3, #1
 80419ce:	0692      	lsls	r2, r2, #26
 80419d0:	d42d      	bmi.n	8041a2e <_printf_common+0xbe>
 80419d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80419d6:	4639      	mov	r1, r7
 80419d8:	4630      	mov	r0, r6
 80419da:	47c0      	blx	r8
 80419dc:	3001      	adds	r0, #1
 80419de:	d020      	beq.n	8041a22 <_printf_common+0xb2>
 80419e0:	6823      	ldr	r3, [r4, #0]
 80419e2:	68e5      	ldr	r5, [r4, #12]
 80419e4:	f8d9 2000 	ldr.w	r2, [r9]
 80419e8:	f003 0306 	and.w	r3, r3, #6
 80419ec:	2b04      	cmp	r3, #4
 80419ee:	bf08      	it	eq
 80419f0:	1aad      	subeq	r5, r5, r2
 80419f2:	68a3      	ldr	r3, [r4, #8]
 80419f4:	6922      	ldr	r2, [r4, #16]
 80419f6:	bf0c      	ite	eq
 80419f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80419fc:	2500      	movne	r5, #0
 80419fe:	4293      	cmp	r3, r2
 8041a00:	bfc4      	itt	gt
 8041a02:	1a9b      	subgt	r3, r3, r2
 8041a04:	18ed      	addgt	r5, r5, r3
 8041a06:	f04f 0900 	mov.w	r9, #0
 8041a0a:	341a      	adds	r4, #26
 8041a0c:	454d      	cmp	r5, r9
 8041a0e:	d11a      	bne.n	8041a46 <_printf_common+0xd6>
 8041a10:	2000      	movs	r0, #0
 8041a12:	e008      	b.n	8041a26 <_printf_common+0xb6>
 8041a14:	2301      	movs	r3, #1
 8041a16:	4652      	mov	r2, sl
 8041a18:	4639      	mov	r1, r7
 8041a1a:	4630      	mov	r0, r6
 8041a1c:	47c0      	blx	r8
 8041a1e:	3001      	adds	r0, #1
 8041a20:	d103      	bne.n	8041a2a <_printf_common+0xba>
 8041a22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8041a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8041a2a:	3501      	adds	r5, #1
 8041a2c:	e7c3      	b.n	80419b6 <_printf_common+0x46>
 8041a2e:	18e1      	adds	r1, r4, r3
 8041a30:	1c5a      	adds	r2, r3, #1
 8041a32:	2030      	movs	r0, #48	; 0x30
 8041a34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8041a38:	4422      	add	r2, r4
 8041a3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8041a3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8041a42:	3302      	adds	r3, #2
 8041a44:	e7c5      	b.n	80419d2 <_printf_common+0x62>
 8041a46:	2301      	movs	r3, #1
 8041a48:	4622      	mov	r2, r4
 8041a4a:	4639      	mov	r1, r7
 8041a4c:	4630      	mov	r0, r6
 8041a4e:	47c0      	blx	r8
 8041a50:	3001      	adds	r0, #1
 8041a52:	d0e6      	beq.n	8041a22 <_printf_common+0xb2>
 8041a54:	f109 0901 	add.w	r9, r9, #1
 8041a58:	e7d8      	b.n	8041a0c <_printf_common+0x9c>
	...

08041a5c <_printf_i>:
 8041a5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8041a60:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8041a64:	460c      	mov	r4, r1
 8041a66:	7e09      	ldrb	r1, [r1, #24]
 8041a68:	b085      	sub	sp, #20
 8041a6a:	296e      	cmp	r1, #110	; 0x6e
 8041a6c:	4617      	mov	r7, r2
 8041a6e:	4606      	mov	r6, r0
 8041a70:	4698      	mov	r8, r3
 8041a72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8041a74:	f000 80b3 	beq.w	8041bde <_printf_i+0x182>
 8041a78:	d822      	bhi.n	8041ac0 <_printf_i+0x64>
 8041a7a:	2963      	cmp	r1, #99	; 0x63
 8041a7c:	d036      	beq.n	8041aec <_printf_i+0x90>
 8041a7e:	d80a      	bhi.n	8041a96 <_printf_i+0x3a>
 8041a80:	2900      	cmp	r1, #0
 8041a82:	f000 80b9 	beq.w	8041bf8 <_printf_i+0x19c>
 8041a86:	2958      	cmp	r1, #88	; 0x58
 8041a88:	f000 8083 	beq.w	8041b92 <_printf_i+0x136>
 8041a8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8041a90:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8041a94:	e032      	b.n	8041afc <_printf_i+0xa0>
 8041a96:	2964      	cmp	r1, #100	; 0x64
 8041a98:	d001      	beq.n	8041a9e <_printf_i+0x42>
 8041a9a:	2969      	cmp	r1, #105	; 0x69
 8041a9c:	d1f6      	bne.n	8041a8c <_printf_i+0x30>
 8041a9e:	6820      	ldr	r0, [r4, #0]
 8041aa0:	6813      	ldr	r3, [r2, #0]
 8041aa2:	0605      	lsls	r5, r0, #24
 8041aa4:	f103 0104 	add.w	r1, r3, #4
 8041aa8:	d52a      	bpl.n	8041b00 <_printf_i+0xa4>
 8041aaa:	681b      	ldr	r3, [r3, #0]
 8041aac:	6011      	str	r1, [r2, #0]
 8041aae:	2b00      	cmp	r3, #0
 8041ab0:	da03      	bge.n	8041aba <_printf_i+0x5e>
 8041ab2:	222d      	movs	r2, #45	; 0x2d
 8041ab4:	425b      	negs	r3, r3
 8041ab6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8041aba:	486f      	ldr	r0, [pc, #444]	; (8041c78 <_printf_i+0x21c>)
 8041abc:	220a      	movs	r2, #10
 8041abe:	e039      	b.n	8041b34 <_printf_i+0xd8>
 8041ac0:	2973      	cmp	r1, #115	; 0x73
 8041ac2:	f000 809d 	beq.w	8041c00 <_printf_i+0x1a4>
 8041ac6:	d808      	bhi.n	8041ada <_printf_i+0x7e>
 8041ac8:	296f      	cmp	r1, #111	; 0x6f
 8041aca:	d020      	beq.n	8041b0e <_printf_i+0xb2>
 8041acc:	2970      	cmp	r1, #112	; 0x70
 8041ace:	d1dd      	bne.n	8041a8c <_printf_i+0x30>
 8041ad0:	6823      	ldr	r3, [r4, #0]
 8041ad2:	f043 0320 	orr.w	r3, r3, #32
 8041ad6:	6023      	str	r3, [r4, #0]
 8041ad8:	e003      	b.n	8041ae2 <_printf_i+0x86>
 8041ada:	2975      	cmp	r1, #117	; 0x75
 8041adc:	d017      	beq.n	8041b0e <_printf_i+0xb2>
 8041ade:	2978      	cmp	r1, #120	; 0x78
 8041ae0:	d1d4      	bne.n	8041a8c <_printf_i+0x30>
 8041ae2:	2378      	movs	r3, #120	; 0x78
 8041ae4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8041ae8:	4864      	ldr	r0, [pc, #400]	; (8041c7c <_printf_i+0x220>)
 8041aea:	e055      	b.n	8041b98 <_printf_i+0x13c>
 8041aec:	6813      	ldr	r3, [r2, #0]
 8041aee:	1d19      	adds	r1, r3, #4
 8041af0:	681b      	ldr	r3, [r3, #0]
 8041af2:	6011      	str	r1, [r2, #0]
 8041af4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8041af8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8041afc:	2301      	movs	r3, #1
 8041afe:	e08c      	b.n	8041c1a <_printf_i+0x1be>
 8041b00:	681b      	ldr	r3, [r3, #0]
 8041b02:	6011      	str	r1, [r2, #0]
 8041b04:	f010 0f40 	tst.w	r0, #64	; 0x40
 8041b08:	bf18      	it	ne
 8041b0a:	b21b      	sxthne	r3, r3
 8041b0c:	e7cf      	b.n	8041aae <_printf_i+0x52>
 8041b0e:	6813      	ldr	r3, [r2, #0]
 8041b10:	6825      	ldr	r5, [r4, #0]
 8041b12:	1d18      	adds	r0, r3, #4
 8041b14:	6010      	str	r0, [r2, #0]
 8041b16:	0628      	lsls	r0, r5, #24
 8041b18:	d501      	bpl.n	8041b1e <_printf_i+0xc2>
 8041b1a:	681b      	ldr	r3, [r3, #0]
 8041b1c:	e002      	b.n	8041b24 <_printf_i+0xc8>
 8041b1e:	0668      	lsls	r0, r5, #25
 8041b20:	d5fb      	bpl.n	8041b1a <_printf_i+0xbe>
 8041b22:	881b      	ldrh	r3, [r3, #0]
 8041b24:	4854      	ldr	r0, [pc, #336]	; (8041c78 <_printf_i+0x21c>)
 8041b26:	296f      	cmp	r1, #111	; 0x6f
 8041b28:	bf14      	ite	ne
 8041b2a:	220a      	movne	r2, #10
 8041b2c:	2208      	moveq	r2, #8
 8041b2e:	2100      	movs	r1, #0
 8041b30:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8041b34:	6865      	ldr	r5, [r4, #4]
 8041b36:	60a5      	str	r5, [r4, #8]
 8041b38:	2d00      	cmp	r5, #0
 8041b3a:	f2c0 8095 	blt.w	8041c68 <_printf_i+0x20c>
 8041b3e:	6821      	ldr	r1, [r4, #0]
 8041b40:	f021 0104 	bic.w	r1, r1, #4
 8041b44:	6021      	str	r1, [r4, #0]
 8041b46:	2b00      	cmp	r3, #0
 8041b48:	d13d      	bne.n	8041bc6 <_printf_i+0x16a>
 8041b4a:	2d00      	cmp	r5, #0
 8041b4c:	f040 808e 	bne.w	8041c6c <_printf_i+0x210>
 8041b50:	4665      	mov	r5, ip
 8041b52:	2a08      	cmp	r2, #8
 8041b54:	d10b      	bne.n	8041b6e <_printf_i+0x112>
 8041b56:	6823      	ldr	r3, [r4, #0]
 8041b58:	07db      	lsls	r3, r3, #31
 8041b5a:	d508      	bpl.n	8041b6e <_printf_i+0x112>
 8041b5c:	6923      	ldr	r3, [r4, #16]
 8041b5e:	6862      	ldr	r2, [r4, #4]
 8041b60:	429a      	cmp	r2, r3
 8041b62:	bfde      	ittt	le
 8041b64:	2330      	movle	r3, #48	; 0x30
 8041b66:	f805 3c01 	strble.w	r3, [r5, #-1]
 8041b6a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8041b6e:	ebac 0305 	sub.w	r3, ip, r5
 8041b72:	6123      	str	r3, [r4, #16]
 8041b74:	f8cd 8000 	str.w	r8, [sp]
 8041b78:	463b      	mov	r3, r7
 8041b7a:	aa03      	add	r2, sp, #12
 8041b7c:	4621      	mov	r1, r4
 8041b7e:	4630      	mov	r0, r6
 8041b80:	f7ff fef6 	bl	8041970 <_printf_common>
 8041b84:	3001      	adds	r0, #1
 8041b86:	d14d      	bne.n	8041c24 <_printf_i+0x1c8>
 8041b88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8041b8c:	b005      	add	sp, #20
 8041b8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8041b92:	4839      	ldr	r0, [pc, #228]	; (8041c78 <_printf_i+0x21c>)
 8041b94:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8041b98:	6813      	ldr	r3, [r2, #0]
 8041b9a:	6821      	ldr	r1, [r4, #0]
 8041b9c:	1d1d      	adds	r5, r3, #4
 8041b9e:	681b      	ldr	r3, [r3, #0]
 8041ba0:	6015      	str	r5, [r2, #0]
 8041ba2:	060a      	lsls	r2, r1, #24
 8041ba4:	d50b      	bpl.n	8041bbe <_printf_i+0x162>
 8041ba6:	07ca      	lsls	r2, r1, #31
 8041ba8:	bf44      	itt	mi
 8041baa:	f041 0120 	orrmi.w	r1, r1, #32
 8041bae:	6021      	strmi	r1, [r4, #0]
 8041bb0:	b91b      	cbnz	r3, 8041bba <_printf_i+0x15e>
 8041bb2:	6822      	ldr	r2, [r4, #0]
 8041bb4:	f022 0220 	bic.w	r2, r2, #32
 8041bb8:	6022      	str	r2, [r4, #0]
 8041bba:	2210      	movs	r2, #16
 8041bbc:	e7b7      	b.n	8041b2e <_printf_i+0xd2>
 8041bbe:	064d      	lsls	r5, r1, #25
 8041bc0:	bf48      	it	mi
 8041bc2:	b29b      	uxthmi	r3, r3
 8041bc4:	e7ef      	b.n	8041ba6 <_printf_i+0x14a>
 8041bc6:	4665      	mov	r5, ip
 8041bc8:	fbb3 f1f2 	udiv	r1, r3, r2
 8041bcc:	fb02 3311 	mls	r3, r2, r1, r3
 8041bd0:	5cc3      	ldrb	r3, [r0, r3]
 8041bd2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8041bd6:	460b      	mov	r3, r1
 8041bd8:	2900      	cmp	r1, #0
 8041bda:	d1f5      	bne.n	8041bc8 <_printf_i+0x16c>
 8041bdc:	e7b9      	b.n	8041b52 <_printf_i+0xf6>
 8041bde:	6813      	ldr	r3, [r2, #0]
 8041be0:	6825      	ldr	r5, [r4, #0]
 8041be2:	6961      	ldr	r1, [r4, #20]
 8041be4:	1d18      	adds	r0, r3, #4
 8041be6:	6010      	str	r0, [r2, #0]
 8041be8:	0628      	lsls	r0, r5, #24
 8041bea:	681b      	ldr	r3, [r3, #0]
 8041bec:	d501      	bpl.n	8041bf2 <_printf_i+0x196>
 8041bee:	6019      	str	r1, [r3, #0]
 8041bf0:	e002      	b.n	8041bf8 <_printf_i+0x19c>
 8041bf2:	066a      	lsls	r2, r5, #25
 8041bf4:	d5fb      	bpl.n	8041bee <_printf_i+0x192>
 8041bf6:	8019      	strh	r1, [r3, #0]
 8041bf8:	2300      	movs	r3, #0
 8041bfa:	6123      	str	r3, [r4, #16]
 8041bfc:	4665      	mov	r5, ip
 8041bfe:	e7b9      	b.n	8041b74 <_printf_i+0x118>
 8041c00:	6813      	ldr	r3, [r2, #0]
 8041c02:	1d19      	adds	r1, r3, #4
 8041c04:	6011      	str	r1, [r2, #0]
 8041c06:	681d      	ldr	r5, [r3, #0]
 8041c08:	6862      	ldr	r2, [r4, #4]
 8041c0a:	2100      	movs	r1, #0
 8041c0c:	4628      	mov	r0, r5
 8041c0e:	f7de fb1f 	bl	8020250 <memchr>
 8041c12:	b108      	cbz	r0, 8041c18 <_printf_i+0x1bc>
 8041c14:	1b40      	subs	r0, r0, r5
 8041c16:	6060      	str	r0, [r4, #4]
 8041c18:	6863      	ldr	r3, [r4, #4]
 8041c1a:	6123      	str	r3, [r4, #16]
 8041c1c:	2300      	movs	r3, #0
 8041c1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8041c22:	e7a7      	b.n	8041b74 <_printf_i+0x118>
 8041c24:	6923      	ldr	r3, [r4, #16]
 8041c26:	462a      	mov	r2, r5
 8041c28:	4639      	mov	r1, r7
 8041c2a:	4630      	mov	r0, r6
 8041c2c:	47c0      	blx	r8
 8041c2e:	3001      	adds	r0, #1
 8041c30:	d0aa      	beq.n	8041b88 <_printf_i+0x12c>
 8041c32:	6823      	ldr	r3, [r4, #0]
 8041c34:	079b      	lsls	r3, r3, #30
 8041c36:	d413      	bmi.n	8041c60 <_printf_i+0x204>
 8041c38:	68e0      	ldr	r0, [r4, #12]
 8041c3a:	9b03      	ldr	r3, [sp, #12]
 8041c3c:	4298      	cmp	r0, r3
 8041c3e:	bfb8      	it	lt
 8041c40:	4618      	movlt	r0, r3
 8041c42:	e7a3      	b.n	8041b8c <_printf_i+0x130>
 8041c44:	2301      	movs	r3, #1
 8041c46:	464a      	mov	r2, r9
 8041c48:	4639      	mov	r1, r7
 8041c4a:	4630      	mov	r0, r6
 8041c4c:	47c0      	blx	r8
 8041c4e:	3001      	adds	r0, #1
 8041c50:	d09a      	beq.n	8041b88 <_printf_i+0x12c>
 8041c52:	3501      	adds	r5, #1
 8041c54:	68e3      	ldr	r3, [r4, #12]
 8041c56:	9a03      	ldr	r2, [sp, #12]
 8041c58:	1a9b      	subs	r3, r3, r2
 8041c5a:	42ab      	cmp	r3, r5
 8041c5c:	dcf2      	bgt.n	8041c44 <_printf_i+0x1e8>
 8041c5e:	e7eb      	b.n	8041c38 <_printf_i+0x1dc>
 8041c60:	2500      	movs	r5, #0
 8041c62:	f104 0919 	add.w	r9, r4, #25
 8041c66:	e7f5      	b.n	8041c54 <_printf_i+0x1f8>
 8041c68:	2b00      	cmp	r3, #0
 8041c6a:	d1ac      	bne.n	8041bc6 <_printf_i+0x16a>
 8041c6c:	7803      	ldrb	r3, [r0, #0]
 8041c6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8041c72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8041c76:	e76c      	b.n	8041b52 <_printf_i+0xf6>
 8041c78:	080564cd 	.word	0x080564cd
 8041c7c:	080564de 	.word	0x080564de

08041c80 <_sbrk_r>:
 8041c80:	b538      	push	{r3, r4, r5, lr}
 8041c82:	4c06      	ldr	r4, [pc, #24]	; (8041c9c <_sbrk_r+0x1c>)
 8041c84:	2300      	movs	r3, #0
 8041c86:	4605      	mov	r5, r0
 8041c88:	4608      	mov	r0, r1
 8041c8a:	6023      	str	r3, [r4, #0]
 8041c8c:	f7ea fa3a 	bl	802c104 <_sbrk>
 8041c90:	1c43      	adds	r3, r0, #1
 8041c92:	d102      	bne.n	8041c9a <_sbrk_r+0x1a>
 8041c94:	6823      	ldr	r3, [r4, #0]
 8041c96:	b103      	cbz	r3, 8041c9a <_sbrk_r+0x1a>
 8041c98:	602b      	str	r3, [r5, #0]
 8041c9a:	bd38      	pop	{r3, r4, r5, pc}
 8041c9c:	200090e8 	.word	0x200090e8

08041ca0 <nanf>:
 8041ca0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8041ca8 <nanf+0x8>
 8041ca4:	4770      	bx	lr
 8041ca6:	bf00      	nop
 8041ca8:	7fc00000 	.word	0x7fc00000

08041cac <__ascii_wctomb>:
 8041cac:	b149      	cbz	r1, 8041cc2 <__ascii_wctomb+0x16>
 8041cae:	2aff      	cmp	r2, #255	; 0xff
 8041cb0:	bf85      	ittet	hi
 8041cb2:	238a      	movhi	r3, #138	; 0x8a
 8041cb4:	6003      	strhi	r3, [r0, #0]
 8041cb6:	700a      	strbls	r2, [r1, #0]
 8041cb8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8041cbc:	bf98      	it	ls
 8041cbe:	2001      	movls	r0, #1
 8041cc0:	4770      	bx	lr
 8041cc2:	4608      	mov	r0, r1
 8041cc4:	4770      	bx	lr
	...

08041cc8 <malloc>:
 8041cc8:	4b02      	ldr	r3, [pc, #8]	; (8041cd4 <malloc+0xc>)
 8041cca:	4601      	mov	r1, r0
 8041ccc:	6818      	ldr	r0, [r3, #0]
 8041cce:	f7ff bca3 	b.w	8041618 <_malloc_r>
 8041cd2:	bf00      	nop
 8041cd4:	200002c4 	.word	0x200002c4

08041cd8 <memmove>:
 8041cd8:	4288      	cmp	r0, r1
 8041cda:	b510      	push	{r4, lr}
 8041cdc:	eb01 0302 	add.w	r3, r1, r2
 8041ce0:	d807      	bhi.n	8041cf2 <memmove+0x1a>
 8041ce2:	1e42      	subs	r2, r0, #1
 8041ce4:	4299      	cmp	r1, r3
 8041ce6:	d00a      	beq.n	8041cfe <memmove+0x26>
 8041ce8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8041cec:	f802 4f01 	strb.w	r4, [r2, #1]!
 8041cf0:	e7f8      	b.n	8041ce4 <memmove+0xc>
 8041cf2:	4283      	cmp	r3, r0
 8041cf4:	d9f5      	bls.n	8041ce2 <memmove+0xa>
 8041cf6:	1881      	adds	r1, r0, r2
 8041cf8:	1ad2      	subs	r2, r2, r3
 8041cfa:	42d3      	cmn	r3, r2
 8041cfc:	d100      	bne.n	8041d00 <memmove+0x28>
 8041cfe:	bd10      	pop	{r4, pc}
 8041d00:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8041d04:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8041d08:	e7f7      	b.n	8041cfa <memmove+0x22>

08041d0a <__malloc_lock>:
 8041d0a:	4770      	bx	lr

08041d0c <__malloc_unlock>:
 8041d0c:	4770      	bx	lr
	...

08041d10 <_free_r>:
 8041d10:	b538      	push	{r3, r4, r5, lr}
 8041d12:	4605      	mov	r5, r0
 8041d14:	2900      	cmp	r1, #0
 8041d16:	d045      	beq.n	8041da4 <_free_r+0x94>
 8041d18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8041d1c:	1f0c      	subs	r4, r1, #4
 8041d1e:	2b00      	cmp	r3, #0
 8041d20:	bfb8      	it	lt
 8041d22:	18e4      	addlt	r4, r4, r3
 8041d24:	f7ff fff1 	bl	8041d0a <__malloc_lock>
 8041d28:	4a1f      	ldr	r2, [pc, #124]	; (8041da8 <_free_r+0x98>)
 8041d2a:	6813      	ldr	r3, [r2, #0]
 8041d2c:	4610      	mov	r0, r2
 8041d2e:	b933      	cbnz	r3, 8041d3e <_free_r+0x2e>
 8041d30:	6063      	str	r3, [r4, #4]
 8041d32:	6014      	str	r4, [r2, #0]
 8041d34:	4628      	mov	r0, r5
 8041d36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8041d3a:	f7ff bfe7 	b.w	8041d0c <__malloc_unlock>
 8041d3e:	42a3      	cmp	r3, r4
 8041d40:	d90c      	bls.n	8041d5c <_free_r+0x4c>
 8041d42:	6821      	ldr	r1, [r4, #0]
 8041d44:	1862      	adds	r2, r4, r1
 8041d46:	4293      	cmp	r3, r2
 8041d48:	bf04      	itt	eq
 8041d4a:	681a      	ldreq	r2, [r3, #0]
 8041d4c:	685b      	ldreq	r3, [r3, #4]
 8041d4e:	6063      	str	r3, [r4, #4]
 8041d50:	bf04      	itt	eq
 8041d52:	1852      	addeq	r2, r2, r1
 8041d54:	6022      	streq	r2, [r4, #0]
 8041d56:	6004      	str	r4, [r0, #0]
 8041d58:	e7ec      	b.n	8041d34 <_free_r+0x24>
 8041d5a:	4613      	mov	r3, r2
 8041d5c:	685a      	ldr	r2, [r3, #4]
 8041d5e:	b10a      	cbz	r2, 8041d64 <_free_r+0x54>
 8041d60:	42a2      	cmp	r2, r4
 8041d62:	d9fa      	bls.n	8041d5a <_free_r+0x4a>
 8041d64:	6819      	ldr	r1, [r3, #0]
 8041d66:	1858      	adds	r0, r3, r1
 8041d68:	42a0      	cmp	r0, r4
 8041d6a:	d10b      	bne.n	8041d84 <_free_r+0x74>
 8041d6c:	6820      	ldr	r0, [r4, #0]
 8041d6e:	4401      	add	r1, r0
 8041d70:	1858      	adds	r0, r3, r1
 8041d72:	4282      	cmp	r2, r0
 8041d74:	6019      	str	r1, [r3, #0]
 8041d76:	d1dd      	bne.n	8041d34 <_free_r+0x24>
 8041d78:	6810      	ldr	r0, [r2, #0]
 8041d7a:	6852      	ldr	r2, [r2, #4]
 8041d7c:	605a      	str	r2, [r3, #4]
 8041d7e:	4401      	add	r1, r0
 8041d80:	6019      	str	r1, [r3, #0]
 8041d82:	e7d7      	b.n	8041d34 <_free_r+0x24>
 8041d84:	d902      	bls.n	8041d8c <_free_r+0x7c>
 8041d86:	230c      	movs	r3, #12
 8041d88:	602b      	str	r3, [r5, #0]
 8041d8a:	e7d3      	b.n	8041d34 <_free_r+0x24>
 8041d8c:	6820      	ldr	r0, [r4, #0]
 8041d8e:	1821      	adds	r1, r4, r0
 8041d90:	428a      	cmp	r2, r1
 8041d92:	bf04      	itt	eq
 8041d94:	6811      	ldreq	r1, [r2, #0]
 8041d96:	6852      	ldreq	r2, [r2, #4]
 8041d98:	6062      	str	r2, [r4, #4]
 8041d9a:	bf04      	itt	eq
 8041d9c:	1809      	addeq	r1, r1, r0
 8041d9e:	6021      	streq	r1, [r4, #0]
 8041da0:	605c      	str	r4, [r3, #4]
 8041da2:	e7c7      	b.n	8041d34 <_free_r+0x24>
 8041da4:	bd38      	pop	{r3, r4, r5, pc}
 8041da6:	bf00      	nop
 8041da8:	20008060 	.word	0x20008060

08041dac <_realloc_r>:
 8041dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8041dae:	4607      	mov	r7, r0
 8041db0:	4614      	mov	r4, r2
 8041db2:	460e      	mov	r6, r1
 8041db4:	b921      	cbnz	r1, 8041dc0 <_realloc_r+0x14>
 8041db6:	4611      	mov	r1, r2
 8041db8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8041dbc:	f7ff bc2c 	b.w	8041618 <_malloc_r>
 8041dc0:	b922      	cbnz	r2, 8041dcc <_realloc_r+0x20>
 8041dc2:	f7ff ffa5 	bl	8041d10 <_free_r>
 8041dc6:	4625      	mov	r5, r4
 8041dc8:	4628      	mov	r0, r5
 8041dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8041dcc:	f000 f814 	bl	8041df8 <_malloc_usable_size_r>
 8041dd0:	42a0      	cmp	r0, r4
 8041dd2:	d20f      	bcs.n	8041df4 <_realloc_r+0x48>
 8041dd4:	4621      	mov	r1, r4
 8041dd6:	4638      	mov	r0, r7
 8041dd8:	f7ff fc1e 	bl	8041618 <_malloc_r>
 8041ddc:	4605      	mov	r5, r0
 8041dde:	2800      	cmp	r0, #0
 8041de0:	d0f2      	beq.n	8041dc8 <_realloc_r+0x1c>
 8041de2:	4631      	mov	r1, r6
 8041de4:	4622      	mov	r2, r4
 8041de6:	f7fd fe0a 	bl	803f9fe <memcpy>
 8041dea:	4631      	mov	r1, r6
 8041dec:	4638      	mov	r0, r7
 8041dee:	f7ff ff8f 	bl	8041d10 <_free_r>
 8041df2:	e7e9      	b.n	8041dc8 <_realloc_r+0x1c>
 8041df4:	4635      	mov	r5, r6
 8041df6:	e7e7      	b.n	8041dc8 <_realloc_r+0x1c>

08041df8 <_malloc_usable_size_r>:
 8041df8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8041dfc:	1f18      	subs	r0, r3, #4
 8041dfe:	2b00      	cmp	r3, #0
 8041e00:	bfbc      	itt	lt
 8041e02:	580b      	ldrlt	r3, [r1, r0]
 8041e04:	18c0      	addlt	r0, r0, r3
 8041e06:	4770      	bx	lr

08041e08 <log10>:
 8041e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8041e0a:	ed2d 8b02 	vpush	{d8}
 8041e0e:	b08b      	sub	sp, #44	; 0x2c
 8041e10:	ec55 4b10 	vmov	r4, r5, d0
 8041e14:	f000 fa44 	bl	80422a0 <__ieee754_log10>
 8041e18:	4b36      	ldr	r3, [pc, #216]	; (8041ef4 <log10+0xec>)
 8041e1a:	eeb0 8a40 	vmov.f32	s16, s0
 8041e1e:	eef0 8a60 	vmov.f32	s17, s1
 8041e22:	f993 6000 	ldrsb.w	r6, [r3]
 8041e26:	1c73      	adds	r3, r6, #1
 8041e28:	d05c      	beq.n	8041ee4 <log10+0xdc>
 8041e2a:	4622      	mov	r2, r4
 8041e2c:	462b      	mov	r3, r5
 8041e2e:	4620      	mov	r0, r4
 8041e30:	4629      	mov	r1, r5
 8041e32:	f7de feb3 	bl	8020b9c <__aeabi_dcmpun>
 8041e36:	4607      	mov	r7, r0
 8041e38:	2800      	cmp	r0, #0
 8041e3a:	d153      	bne.n	8041ee4 <log10+0xdc>
 8041e3c:	2200      	movs	r2, #0
 8041e3e:	2300      	movs	r3, #0
 8041e40:	4620      	mov	r0, r4
 8041e42:	4629      	mov	r1, r5
 8041e44:	f7de fe8c 	bl	8020b60 <__aeabi_dcmple>
 8041e48:	2800      	cmp	r0, #0
 8041e4a:	d04b      	beq.n	8041ee4 <log10+0xdc>
 8041e4c:	4b2a      	ldr	r3, [pc, #168]	; (8041ef8 <log10+0xf0>)
 8041e4e:	9301      	str	r3, [sp, #4]
 8041e50:	9708      	str	r7, [sp, #32]
 8041e52:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8041e56:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8041e5a:	b9a6      	cbnz	r6, 8041e86 <log10+0x7e>
 8041e5c:	4b27      	ldr	r3, [pc, #156]	; (8041efc <log10+0xf4>)
 8041e5e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8041e62:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8041e66:	4620      	mov	r0, r4
 8041e68:	2200      	movs	r2, #0
 8041e6a:	2300      	movs	r3, #0
 8041e6c:	4629      	mov	r1, r5
 8041e6e:	f7de fe63 	bl	8020b38 <__aeabi_dcmpeq>
 8041e72:	bb40      	cbnz	r0, 8041ec6 <log10+0xbe>
 8041e74:	2301      	movs	r3, #1
 8041e76:	2e02      	cmp	r6, #2
 8041e78:	9300      	str	r3, [sp, #0]
 8041e7a:	d119      	bne.n	8041eb0 <log10+0xa8>
 8041e7c:	f7fd fd86 	bl	803f98c <__errno>
 8041e80:	2321      	movs	r3, #33	; 0x21
 8041e82:	6003      	str	r3, [r0, #0]
 8041e84:	e019      	b.n	8041eba <log10+0xb2>
 8041e86:	4b1e      	ldr	r3, [pc, #120]	; (8041f00 <log10+0xf8>)
 8041e88:	2200      	movs	r2, #0
 8041e8a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8041e8e:	4620      	mov	r0, r4
 8041e90:	2200      	movs	r2, #0
 8041e92:	2300      	movs	r3, #0
 8041e94:	4629      	mov	r1, r5
 8041e96:	f7de fe4f 	bl	8020b38 <__aeabi_dcmpeq>
 8041e9a:	2800      	cmp	r0, #0
 8041e9c:	d0ea      	beq.n	8041e74 <log10+0x6c>
 8041e9e:	2302      	movs	r3, #2
 8041ea0:	429e      	cmp	r6, r3
 8041ea2:	9300      	str	r3, [sp, #0]
 8041ea4:	d111      	bne.n	8041eca <log10+0xc2>
 8041ea6:	f7fd fd71 	bl	803f98c <__errno>
 8041eaa:	2322      	movs	r3, #34	; 0x22
 8041eac:	6003      	str	r3, [r0, #0]
 8041eae:	e011      	b.n	8041ed4 <log10+0xcc>
 8041eb0:	4668      	mov	r0, sp
 8041eb2:	f001 f850 	bl	8042f56 <matherr>
 8041eb6:	2800      	cmp	r0, #0
 8041eb8:	d0e0      	beq.n	8041e7c <log10+0x74>
 8041eba:	4812      	ldr	r0, [pc, #72]	; (8041f04 <log10+0xfc>)
 8041ebc:	f001 f850 	bl	8042f60 <nan>
 8041ec0:	ed8d 0b06 	vstr	d0, [sp, #24]
 8041ec4:	e006      	b.n	8041ed4 <log10+0xcc>
 8041ec6:	2302      	movs	r3, #2
 8041ec8:	9300      	str	r3, [sp, #0]
 8041eca:	4668      	mov	r0, sp
 8041ecc:	f001 f843 	bl	8042f56 <matherr>
 8041ed0:	2800      	cmp	r0, #0
 8041ed2:	d0e8      	beq.n	8041ea6 <log10+0x9e>
 8041ed4:	9b08      	ldr	r3, [sp, #32]
 8041ed6:	b11b      	cbz	r3, 8041ee0 <log10+0xd8>
 8041ed8:	f7fd fd58 	bl	803f98c <__errno>
 8041edc:	9b08      	ldr	r3, [sp, #32]
 8041ede:	6003      	str	r3, [r0, #0]
 8041ee0:	ed9d 8b06 	vldr	d8, [sp, #24]
 8041ee4:	eeb0 0a48 	vmov.f32	s0, s16
 8041ee8:	eef0 0a68 	vmov.f32	s1, s17
 8041eec:	b00b      	add	sp, #44	; 0x2c
 8041eee:	ecbd 8b02 	vpop	{d8}
 8041ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8041ef4:	20000494 	.word	0x20000494
 8041ef8:	080565f0 	.word	0x080565f0
 8041efc:	c7efffff 	.word	0xc7efffff
 8041f00:	fff00000 	.word	0xfff00000
 8041f04:	080564c1 	.word	0x080564c1

08041f08 <pow>:
 8041f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8041f0c:	ed2d 8b04 	vpush	{d8-d9}
 8041f10:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80421e4 <pow+0x2dc>
 8041f14:	b08d      	sub	sp, #52	; 0x34
 8041f16:	ec57 6b10 	vmov	r6, r7, d0
 8041f1a:	ec55 4b11 	vmov	r4, r5, d1
 8041f1e:	f000 fa4b 	bl	80423b8 <__ieee754_pow>
 8041f22:	f999 3000 	ldrsb.w	r3, [r9]
 8041f26:	9300      	str	r3, [sp, #0]
 8041f28:	3301      	adds	r3, #1
 8041f2a:	eeb0 8a40 	vmov.f32	s16, s0
 8041f2e:	eef0 8a60 	vmov.f32	s17, s1
 8041f32:	46c8      	mov	r8, r9
 8041f34:	d05f      	beq.n	8041ff6 <pow+0xee>
 8041f36:	4622      	mov	r2, r4
 8041f38:	462b      	mov	r3, r5
 8041f3a:	4620      	mov	r0, r4
 8041f3c:	4629      	mov	r1, r5
 8041f3e:	f7de fe2d 	bl	8020b9c <__aeabi_dcmpun>
 8041f42:	4683      	mov	fp, r0
 8041f44:	2800      	cmp	r0, #0
 8041f46:	d156      	bne.n	8041ff6 <pow+0xee>
 8041f48:	4632      	mov	r2, r6
 8041f4a:	463b      	mov	r3, r7
 8041f4c:	4630      	mov	r0, r6
 8041f4e:	4639      	mov	r1, r7
 8041f50:	f7de fe24 	bl	8020b9c <__aeabi_dcmpun>
 8041f54:	9001      	str	r0, [sp, #4]
 8041f56:	b1e8      	cbz	r0, 8041f94 <pow+0x8c>
 8041f58:	2200      	movs	r2, #0
 8041f5a:	2300      	movs	r3, #0
 8041f5c:	4620      	mov	r0, r4
 8041f5e:	4629      	mov	r1, r5
 8041f60:	f7de fdea 	bl	8020b38 <__aeabi_dcmpeq>
 8041f64:	2800      	cmp	r0, #0
 8041f66:	d046      	beq.n	8041ff6 <pow+0xee>
 8041f68:	2301      	movs	r3, #1
 8041f6a:	9302      	str	r3, [sp, #8]
 8041f6c:	4b96      	ldr	r3, [pc, #600]	; (80421c8 <pow+0x2c0>)
 8041f6e:	9303      	str	r3, [sp, #12]
 8041f70:	4b96      	ldr	r3, [pc, #600]	; (80421cc <pow+0x2c4>)
 8041f72:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8041f76:	2200      	movs	r2, #0
 8041f78:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8041f7c:	9b00      	ldr	r3, [sp, #0]
 8041f7e:	2b02      	cmp	r3, #2
 8041f80:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8041f84:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8041f88:	d033      	beq.n	8041ff2 <pow+0xea>
 8041f8a:	a802      	add	r0, sp, #8
 8041f8c:	f000 ffe3 	bl	8042f56 <matherr>
 8041f90:	bb48      	cbnz	r0, 8041fe6 <pow+0xde>
 8041f92:	e05d      	b.n	8042050 <pow+0x148>
 8041f94:	f04f 0a00 	mov.w	sl, #0
 8041f98:	f04f 0b00 	mov.w	fp, #0
 8041f9c:	4652      	mov	r2, sl
 8041f9e:	465b      	mov	r3, fp
 8041fa0:	4630      	mov	r0, r6
 8041fa2:	4639      	mov	r1, r7
 8041fa4:	f7de fdc8 	bl	8020b38 <__aeabi_dcmpeq>
 8041fa8:	ec4b ab19 	vmov	d9, sl, fp
 8041fac:	2800      	cmp	r0, #0
 8041fae:	d054      	beq.n	804205a <pow+0x152>
 8041fb0:	4652      	mov	r2, sl
 8041fb2:	465b      	mov	r3, fp
 8041fb4:	4620      	mov	r0, r4
 8041fb6:	4629      	mov	r1, r5
 8041fb8:	f7de fdbe 	bl	8020b38 <__aeabi_dcmpeq>
 8041fbc:	4680      	mov	r8, r0
 8041fbe:	b318      	cbz	r0, 8042008 <pow+0x100>
 8041fc0:	2301      	movs	r3, #1
 8041fc2:	9302      	str	r3, [sp, #8]
 8041fc4:	4b80      	ldr	r3, [pc, #512]	; (80421c8 <pow+0x2c0>)
 8041fc6:	9303      	str	r3, [sp, #12]
 8041fc8:	9b01      	ldr	r3, [sp, #4]
 8041fca:	930a      	str	r3, [sp, #40]	; 0x28
 8041fcc:	9b00      	ldr	r3, [sp, #0]
 8041fce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8041fd2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8041fd6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8041fda:	2b00      	cmp	r3, #0
 8041fdc:	d0d5      	beq.n	8041f8a <pow+0x82>
 8041fde:	4b7b      	ldr	r3, [pc, #492]	; (80421cc <pow+0x2c4>)
 8041fe0:	2200      	movs	r2, #0
 8041fe2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8041fe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8041fe8:	b11b      	cbz	r3, 8041ff2 <pow+0xea>
 8041fea:	f7fd fccf 	bl	803f98c <__errno>
 8041fee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8041ff0:	6003      	str	r3, [r0, #0]
 8041ff2:	ed9d 8b08 	vldr	d8, [sp, #32]
 8041ff6:	eeb0 0a48 	vmov.f32	s0, s16
 8041ffa:	eef0 0a68 	vmov.f32	s1, s17
 8041ffe:	b00d      	add	sp, #52	; 0x34
 8042000:	ecbd 8b04 	vpop	{d8-d9}
 8042004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8042008:	ec45 4b10 	vmov	d0, r4, r5
 804200c:	f000 ff9b 	bl	8042f46 <finite>
 8042010:	2800      	cmp	r0, #0
 8042012:	d0f0      	beq.n	8041ff6 <pow+0xee>
 8042014:	4652      	mov	r2, sl
 8042016:	465b      	mov	r3, fp
 8042018:	4620      	mov	r0, r4
 804201a:	4629      	mov	r1, r5
 804201c:	f7de fd96 	bl	8020b4c <__aeabi_dcmplt>
 8042020:	2800      	cmp	r0, #0
 8042022:	d0e8      	beq.n	8041ff6 <pow+0xee>
 8042024:	2301      	movs	r3, #1
 8042026:	9302      	str	r3, [sp, #8]
 8042028:	4b67      	ldr	r3, [pc, #412]	; (80421c8 <pow+0x2c0>)
 804202a:	9303      	str	r3, [sp, #12]
 804202c:	f999 3000 	ldrsb.w	r3, [r9]
 8042030:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8042034:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8042038:	e9cd 4506 	strd	r4, r5, [sp, #24]
 804203c:	b913      	cbnz	r3, 8042044 <pow+0x13c>
 804203e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8042042:	e7a2      	b.n	8041f8a <pow+0x82>
 8042044:	4962      	ldr	r1, [pc, #392]	; (80421d0 <pow+0x2c8>)
 8042046:	2000      	movs	r0, #0
 8042048:	e9cd 0108 	strd	r0, r1, [sp, #32]
 804204c:	2b02      	cmp	r3, #2
 804204e:	d19c      	bne.n	8041f8a <pow+0x82>
 8042050:	f7fd fc9c 	bl	803f98c <__errno>
 8042054:	2321      	movs	r3, #33	; 0x21
 8042056:	6003      	str	r3, [r0, #0]
 8042058:	e7c5      	b.n	8041fe6 <pow+0xde>
 804205a:	eeb0 0a48 	vmov.f32	s0, s16
 804205e:	eef0 0a68 	vmov.f32	s1, s17
 8042062:	f000 ff70 	bl	8042f46 <finite>
 8042066:	9000      	str	r0, [sp, #0]
 8042068:	2800      	cmp	r0, #0
 804206a:	f040 8081 	bne.w	8042170 <pow+0x268>
 804206e:	ec47 6b10 	vmov	d0, r6, r7
 8042072:	f000 ff68 	bl	8042f46 <finite>
 8042076:	2800      	cmp	r0, #0
 8042078:	d07a      	beq.n	8042170 <pow+0x268>
 804207a:	ec45 4b10 	vmov	d0, r4, r5
 804207e:	f000 ff62 	bl	8042f46 <finite>
 8042082:	2800      	cmp	r0, #0
 8042084:	d074      	beq.n	8042170 <pow+0x268>
 8042086:	ec53 2b18 	vmov	r2, r3, d8
 804208a:	ee18 0a10 	vmov	r0, s16
 804208e:	4619      	mov	r1, r3
 8042090:	f7de fd84 	bl	8020b9c <__aeabi_dcmpun>
 8042094:	f999 9000 	ldrsb.w	r9, [r9]
 8042098:	4b4b      	ldr	r3, [pc, #300]	; (80421c8 <pow+0x2c0>)
 804209a:	b1b0      	cbz	r0, 80420ca <pow+0x1c2>
 804209c:	2201      	movs	r2, #1
 804209e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80420a2:	9b00      	ldr	r3, [sp, #0]
 80420a4:	930a      	str	r3, [sp, #40]	; 0x28
 80420a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80420aa:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80420ae:	f1b9 0f00 	cmp.w	r9, #0
 80420b2:	d0c4      	beq.n	804203e <pow+0x136>
 80420b4:	4652      	mov	r2, sl
 80420b6:	465b      	mov	r3, fp
 80420b8:	4650      	mov	r0, sl
 80420ba:	4659      	mov	r1, fp
 80420bc:	f7de fbfe 	bl	80208bc <__aeabi_ddiv>
 80420c0:	f1b9 0f02 	cmp.w	r9, #2
 80420c4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80420c8:	e7c1      	b.n	804204e <pow+0x146>
 80420ca:	2203      	movs	r2, #3
 80420cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80420d0:	900a      	str	r0, [sp, #40]	; 0x28
 80420d2:	4629      	mov	r1, r5
 80420d4:	4620      	mov	r0, r4
 80420d6:	2200      	movs	r2, #0
 80420d8:	4b3e      	ldr	r3, [pc, #248]	; (80421d4 <pow+0x2cc>)
 80420da:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80420de:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80420e2:	f7de fac1 	bl	8020668 <__aeabi_dmul>
 80420e6:	4604      	mov	r4, r0
 80420e8:	460d      	mov	r5, r1
 80420ea:	f1b9 0f00 	cmp.w	r9, #0
 80420ee:	d124      	bne.n	804213a <pow+0x232>
 80420f0:	4b39      	ldr	r3, [pc, #228]	; (80421d8 <pow+0x2d0>)
 80420f2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80420f6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80420fa:	4630      	mov	r0, r6
 80420fc:	4652      	mov	r2, sl
 80420fe:	465b      	mov	r3, fp
 8042100:	4639      	mov	r1, r7
 8042102:	f7de fd23 	bl	8020b4c <__aeabi_dcmplt>
 8042106:	2800      	cmp	r0, #0
 8042108:	d056      	beq.n	80421b8 <pow+0x2b0>
 804210a:	ec45 4b10 	vmov	d0, r4, r5
 804210e:	f000 ff2f 	bl	8042f70 <rint>
 8042112:	4622      	mov	r2, r4
 8042114:	462b      	mov	r3, r5
 8042116:	ec51 0b10 	vmov	r0, r1, d0
 804211a:	f7de fd0d 	bl	8020b38 <__aeabi_dcmpeq>
 804211e:	b920      	cbnz	r0, 804212a <pow+0x222>
 8042120:	4b2e      	ldr	r3, [pc, #184]	; (80421dc <pow+0x2d4>)
 8042122:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8042126:	e9cd 2308 	strd	r2, r3, [sp, #32]
 804212a:	f998 3000 	ldrsb.w	r3, [r8]
 804212e:	2b02      	cmp	r3, #2
 8042130:	d142      	bne.n	80421b8 <pow+0x2b0>
 8042132:	f7fd fc2b 	bl	803f98c <__errno>
 8042136:	2322      	movs	r3, #34	; 0x22
 8042138:	e78d      	b.n	8042056 <pow+0x14e>
 804213a:	4b29      	ldr	r3, [pc, #164]	; (80421e0 <pow+0x2d8>)
 804213c:	2200      	movs	r2, #0
 804213e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8042142:	4630      	mov	r0, r6
 8042144:	4652      	mov	r2, sl
 8042146:	465b      	mov	r3, fp
 8042148:	4639      	mov	r1, r7
 804214a:	f7de fcff 	bl	8020b4c <__aeabi_dcmplt>
 804214e:	2800      	cmp	r0, #0
 8042150:	d0eb      	beq.n	804212a <pow+0x222>
 8042152:	ec45 4b10 	vmov	d0, r4, r5
 8042156:	f000 ff0b 	bl	8042f70 <rint>
 804215a:	4622      	mov	r2, r4
 804215c:	462b      	mov	r3, r5
 804215e:	ec51 0b10 	vmov	r0, r1, d0
 8042162:	f7de fce9 	bl	8020b38 <__aeabi_dcmpeq>
 8042166:	2800      	cmp	r0, #0
 8042168:	d1df      	bne.n	804212a <pow+0x222>
 804216a:	2200      	movs	r2, #0
 804216c:	4b18      	ldr	r3, [pc, #96]	; (80421d0 <pow+0x2c8>)
 804216e:	e7da      	b.n	8042126 <pow+0x21e>
 8042170:	2200      	movs	r2, #0
 8042172:	2300      	movs	r3, #0
 8042174:	ec51 0b18 	vmov	r0, r1, d8
 8042178:	f7de fcde 	bl	8020b38 <__aeabi_dcmpeq>
 804217c:	2800      	cmp	r0, #0
 804217e:	f43f af3a 	beq.w	8041ff6 <pow+0xee>
 8042182:	ec47 6b10 	vmov	d0, r6, r7
 8042186:	f000 fede 	bl	8042f46 <finite>
 804218a:	2800      	cmp	r0, #0
 804218c:	f43f af33 	beq.w	8041ff6 <pow+0xee>
 8042190:	ec45 4b10 	vmov	d0, r4, r5
 8042194:	f000 fed7 	bl	8042f46 <finite>
 8042198:	2800      	cmp	r0, #0
 804219a:	f43f af2c 	beq.w	8041ff6 <pow+0xee>
 804219e:	2304      	movs	r3, #4
 80421a0:	9302      	str	r3, [sp, #8]
 80421a2:	4b09      	ldr	r3, [pc, #36]	; (80421c8 <pow+0x2c0>)
 80421a4:	9303      	str	r3, [sp, #12]
 80421a6:	2300      	movs	r3, #0
 80421a8:	930a      	str	r3, [sp, #40]	; 0x28
 80421aa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80421ae:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80421b2:	ed8d 9b08 	vstr	d9, [sp, #32]
 80421b6:	e7b8      	b.n	804212a <pow+0x222>
 80421b8:	a802      	add	r0, sp, #8
 80421ba:	f000 fecc 	bl	8042f56 <matherr>
 80421be:	2800      	cmp	r0, #0
 80421c0:	f47f af11 	bne.w	8041fe6 <pow+0xde>
 80421c4:	e7b5      	b.n	8042132 <pow+0x22a>
 80421c6:	bf00      	nop
 80421c8:	080565f6 	.word	0x080565f6
 80421cc:	3ff00000 	.word	0x3ff00000
 80421d0:	fff00000 	.word	0xfff00000
 80421d4:	3fe00000 	.word	0x3fe00000
 80421d8:	47efffff 	.word	0x47efffff
 80421dc:	c7efffff 	.word	0xc7efffff
 80421e0:	7ff00000 	.word	0x7ff00000
 80421e4:	20000494 	.word	0x20000494

080421e8 <sqrt>:
 80421e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80421ec:	ed2d 8b02 	vpush	{d8}
 80421f0:	b08b      	sub	sp, #44	; 0x2c
 80421f2:	ec55 4b10 	vmov	r4, r5, d0
 80421f6:	f000 fded 	bl	8042dd4 <__ieee754_sqrt>
 80421fa:	4b26      	ldr	r3, [pc, #152]	; (8042294 <sqrt+0xac>)
 80421fc:	eeb0 8a40 	vmov.f32	s16, s0
 8042200:	eef0 8a60 	vmov.f32	s17, s1
 8042204:	f993 6000 	ldrsb.w	r6, [r3]
 8042208:	1c73      	adds	r3, r6, #1
 804220a:	d02a      	beq.n	8042262 <sqrt+0x7a>
 804220c:	4622      	mov	r2, r4
 804220e:	462b      	mov	r3, r5
 8042210:	4620      	mov	r0, r4
 8042212:	4629      	mov	r1, r5
 8042214:	f7de fcc2 	bl	8020b9c <__aeabi_dcmpun>
 8042218:	4607      	mov	r7, r0
 804221a:	bb10      	cbnz	r0, 8042262 <sqrt+0x7a>
 804221c:	f04f 0800 	mov.w	r8, #0
 8042220:	f04f 0900 	mov.w	r9, #0
 8042224:	4642      	mov	r2, r8
 8042226:	464b      	mov	r3, r9
 8042228:	4620      	mov	r0, r4
 804222a:	4629      	mov	r1, r5
 804222c:	f7de fc8e 	bl	8020b4c <__aeabi_dcmplt>
 8042230:	b1b8      	cbz	r0, 8042262 <sqrt+0x7a>
 8042232:	2301      	movs	r3, #1
 8042234:	9300      	str	r3, [sp, #0]
 8042236:	4b18      	ldr	r3, [pc, #96]	; (8042298 <sqrt+0xb0>)
 8042238:	9301      	str	r3, [sp, #4]
 804223a:	9708      	str	r7, [sp, #32]
 804223c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8042240:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8042244:	b9b6      	cbnz	r6, 8042274 <sqrt+0x8c>
 8042246:	e9cd 8906 	strd	r8, r9, [sp, #24]
 804224a:	4668      	mov	r0, sp
 804224c:	f000 fe83 	bl	8042f56 <matherr>
 8042250:	b1d0      	cbz	r0, 8042288 <sqrt+0xa0>
 8042252:	9b08      	ldr	r3, [sp, #32]
 8042254:	b11b      	cbz	r3, 804225e <sqrt+0x76>
 8042256:	f7fd fb99 	bl	803f98c <__errno>
 804225a:	9b08      	ldr	r3, [sp, #32]
 804225c:	6003      	str	r3, [r0, #0]
 804225e:	ed9d 8b06 	vldr	d8, [sp, #24]
 8042262:	eeb0 0a48 	vmov.f32	s0, s16
 8042266:	eef0 0a68 	vmov.f32	s1, s17
 804226a:	b00b      	add	sp, #44	; 0x2c
 804226c:	ecbd 8b02 	vpop	{d8}
 8042270:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8042274:	4642      	mov	r2, r8
 8042276:	464b      	mov	r3, r9
 8042278:	4640      	mov	r0, r8
 804227a:	4649      	mov	r1, r9
 804227c:	f7de fb1e 	bl	80208bc <__aeabi_ddiv>
 8042280:	2e02      	cmp	r6, #2
 8042282:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8042286:	d1e0      	bne.n	804224a <sqrt+0x62>
 8042288:	f7fd fb80 	bl	803f98c <__errno>
 804228c:	2321      	movs	r3, #33	; 0x21
 804228e:	6003      	str	r3, [r0, #0]
 8042290:	e7df      	b.n	8042252 <sqrt+0x6a>
 8042292:	bf00      	nop
 8042294:	20000494 	.word	0x20000494
 8042298:	080565fa 	.word	0x080565fa
 804229c:	00000000 	.word	0x00000000

080422a0 <__ieee754_log10>:
 80422a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80422a4:	ec55 4b10 	vmov	r4, r5, d0
 80422a8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80422ac:	462b      	mov	r3, r5
 80422ae:	da2f      	bge.n	8042310 <__ieee754_log10+0x70>
 80422b0:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80422b4:	4322      	orrs	r2, r4
 80422b6:	d10a      	bne.n	80422ce <__ieee754_log10+0x2e>
 80422b8:	493b      	ldr	r1, [pc, #236]	; (80423a8 <__ieee754_log10+0x108>)
 80422ba:	2200      	movs	r2, #0
 80422bc:	2300      	movs	r3, #0
 80422be:	2000      	movs	r0, #0
 80422c0:	f7de fafc 	bl	80208bc <__aeabi_ddiv>
 80422c4:	ec41 0b10 	vmov	d0, r0, r1
 80422c8:	b003      	add	sp, #12
 80422ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80422ce:	2d00      	cmp	r5, #0
 80422d0:	da08      	bge.n	80422e4 <__ieee754_log10+0x44>
 80422d2:	ee10 2a10 	vmov	r2, s0
 80422d6:	4620      	mov	r0, r4
 80422d8:	4629      	mov	r1, r5
 80422da:	f7de f80d 	bl	80202f8 <__aeabi_dsub>
 80422de:	2200      	movs	r2, #0
 80422e0:	2300      	movs	r3, #0
 80422e2:	e7ed      	b.n	80422c0 <__ieee754_log10+0x20>
 80422e4:	2200      	movs	r2, #0
 80422e6:	4b31      	ldr	r3, [pc, #196]	; (80423ac <__ieee754_log10+0x10c>)
 80422e8:	4629      	mov	r1, r5
 80422ea:	ee10 0a10 	vmov	r0, s0
 80422ee:	f7de f9bb 	bl	8020668 <__aeabi_dmul>
 80422f2:	f06f 0235 	mvn.w	r2, #53	; 0x35
 80422f6:	4604      	mov	r4, r0
 80422f8:	460d      	mov	r5, r1
 80422fa:	460b      	mov	r3, r1
 80422fc:	492c      	ldr	r1, [pc, #176]	; (80423b0 <__ieee754_log10+0x110>)
 80422fe:	428b      	cmp	r3, r1
 8042300:	dd08      	ble.n	8042314 <__ieee754_log10+0x74>
 8042302:	4622      	mov	r2, r4
 8042304:	462b      	mov	r3, r5
 8042306:	4620      	mov	r0, r4
 8042308:	4629      	mov	r1, r5
 804230a:	f7dd fff7 	bl	80202fc <__adddf3>
 804230e:	e7d9      	b.n	80422c4 <__ieee754_log10+0x24>
 8042310:	2200      	movs	r2, #0
 8042312:	e7f3      	b.n	80422fc <__ieee754_log10+0x5c>
 8042314:	1518      	asrs	r0, r3, #20
 8042316:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 804231a:	4410      	add	r0, r2
 804231c:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8042320:	4448      	add	r0, r9
 8042322:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8042326:	f7de f935 	bl	8020594 <__aeabi_i2d>
 804232a:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 804232e:	3303      	adds	r3, #3
 8042330:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8042334:	ec45 4b10 	vmov	d0, r4, r5
 8042338:	4606      	mov	r6, r0
 804233a:	460f      	mov	r7, r1
 804233c:	f000 ff14 	bl	8043168 <__ieee754_log>
 8042340:	a313      	add	r3, pc, #76	; (adr r3, 8042390 <__ieee754_log10+0xf0>)
 8042342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042346:	4630      	mov	r0, r6
 8042348:	4639      	mov	r1, r7
 804234a:	ed8d 0b00 	vstr	d0, [sp]
 804234e:	f7de f98b 	bl	8020668 <__aeabi_dmul>
 8042352:	ed9d 0b00 	vldr	d0, [sp]
 8042356:	4604      	mov	r4, r0
 8042358:	460d      	mov	r5, r1
 804235a:	a30f      	add	r3, pc, #60	; (adr r3, 8042398 <__ieee754_log10+0xf8>)
 804235c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042360:	ec51 0b10 	vmov	r0, r1, d0
 8042364:	f7de f980 	bl	8020668 <__aeabi_dmul>
 8042368:	4602      	mov	r2, r0
 804236a:	460b      	mov	r3, r1
 804236c:	4620      	mov	r0, r4
 804236e:	4629      	mov	r1, r5
 8042370:	f7dd ffc4 	bl	80202fc <__adddf3>
 8042374:	a30a      	add	r3, pc, #40	; (adr r3, 80423a0 <__ieee754_log10+0x100>)
 8042376:	e9d3 2300 	ldrd	r2, r3, [r3]
 804237a:	4604      	mov	r4, r0
 804237c:	460d      	mov	r5, r1
 804237e:	4630      	mov	r0, r6
 8042380:	4639      	mov	r1, r7
 8042382:	f7de f971 	bl	8020668 <__aeabi_dmul>
 8042386:	4602      	mov	r2, r0
 8042388:	460b      	mov	r3, r1
 804238a:	4620      	mov	r0, r4
 804238c:	4629      	mov	r1, r5
 804238e:	e7bc      	b.n	804230a <__ieee754_log10+0x6a>
 8042390:	11f12b36 	.word	0x11f12b36
 8042394:	3d59fef3 	.word	0x3d59fef3
 8042398:	1526e50e 	.word	0x1526e50e
 804239c:	3fdbcb7b 	.word	0x3fdbcb7b
 80423a0:	509f6000 	.word	0x509f6000
 80423a4:	3fd34413 	.word	0x3fd34413
 80423a8:	c3500000 	.word	0xc3500000
 80423ac:	43500000 	.word	0x43500000
 80423b0:	7fefffff 	.word	0x7fefffff
 80423b4:	00000000 	.word	0x00000000

080423b8 <__ieee754_pow>:
 80423b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80423bc:	b091      	sub	sp, #68	; 0x44
 80423be:	ed8d 1b00 	vstr	d1, [sp]
 80423c2:	e9dd 2900 	ldrd	r2, r9, [sp]
 80423c6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80423ca:	ea58 0302 	orrs.w	r3, r8, r2
 80423ce:	ec57 6b10 	vmov	r6, r7, d0
 80423d2:	f000 84be 	beq.w	8042d52 <__ieee754_pow+0x99a>
 80423d6:	4b7a      	ldr	r3, [pc, #488]	; (80425c0 <__ieee754_pow+0x208>)
 80423d8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80423dc:	429c      	cmp	r4, r3
 80423de:	463d      	mov	r5, r7
 80423e0:	ee10 aa10 	vmov	sl, s0
 80423e4:	dc09      	bgt.n	80423fa <__ieee754_pow+0x42>
 80423e6:	d103      	bne.n	80423f0 <__ieee754_pow+0x38>
 80423e8:	b93e      	cbnz	r6, 80423fa <__ieee754_pow+0x42>
 80423ea:	45a0      	cmp	r8, r4
 80423ec:	dc0d      	bgt.n	804240a <__ieee754_pow+0x52>
 80423ee:	e001      	b.n	80423f4 <__ieee754_pow+0x3c>
 80423f0:	4598      	cmp	r8, r3
 80423f2:	dc02      	bgt.n	80423fa <__ieee754_pow+0x42>
 80423f4:	4598      	cmp	r8, r3
 80423f6:	d10e      	bne.n	8042416 <__ieee754_pow+0x5e>
 80423f8:	b16a      	cbz	r2, 8042416 <__ieee754_pow+0x5e>
 80423fa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80423fe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8042402:	ea54 030a 	orrs.w	r3, r4, sl
 8042406:	f000 84a4 	beq.w	8042d52 <__ieee754_pow+0x99a>
 804240a:	486e      	ldr	r0, [pc, #440]	; (80425c4 <__ieee754_pow+0x20c>)
 804240c:	b011      	add	sp, #68	; 0x44
 804240e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8042412:	f000 bda5 	b.w	8042f60 <nan>
 8042416:	2d00      	cmp	r5, #0
 8042418:	da53      	bge.n	80424c2 <__ieee754_pow+0x10a>
 804241a:	4b6b      	ldr	r3, [pc, #428]	; (80425c8 <__ieee754_pow+0x210>)
 804241c:	4598      	cmp	r8, r3
 804241e:	dc4d      	bgt.n	80424bc <__ieee754_pow+0x104>
 8042420:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8042424:	4598      	cmp	r8, r3
 8042426:	dd4c      	ble.n	80424c2 <__ieee754_pow+0x10a>
 8042428:	ea4f 5328 	mov.w	r3, r8, asr #20
 804242c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8042430:	2b14      	cmp	r3, #20
 8042432:	dd26      	ble.n	8042482 <__ieee754_pow+0xca>
 8042434:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8042438:	fa22 f103 	lsr.w	r1, r2, r3
 804243c:	fa01 f303 	lsl.w	r3, r1, r3
 8042440:	4293      	cmp	r3, r2
 8042442:	d13e      	bne.n	80424c2 <__ieee754_pow+0x10a>
 8042444:	f001 0101 	and.w	r1, r1, #1
 8042448:	f1c1 0b02 	rsb	fp, r1, #2
 804244c:	2a00      	cmp	r2, #0
 804244e:	d15b      	bne.n	8042508 <__ieee754_pow+0x150>
 8042450:	4b5b      	ldr	r3, [pc, #364]	; (80425c0 <__ieee754_pow+0x208>)
 8042452:	4598      	cmp	r8, r3
 8042454:	d124      	bne.n	80424a0 <__ieee754_pow+0xe8>
 8042456:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 804245a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 804245e:	ea53 030a 	orrs.w	r3, r3, sl
 8042462:	f000 8476 	beq.w	8042d52 <__ieee754_pow+0x99a>
 8042466:	4b59      	ldr	r3, [pc, #356]	; (80425cc <__ieee754_pow+0x214>)
 8042468:	429c      	cmp	r4, r3
 804246a:	dd2d      	ble.n	80424c8 <__ieee754_pow+0x110>
 804246c:	f1b9 0f00 	cmp.w	r9, #0
 8042470:	f280 8473 	bge.w	8042d5a <__ieee754_pow+0x9a2>
 8042474:	2000      	movs	r0, #0
 8042476:	2100      	movs	r1, #0
 8042478:	ec41 0b10 	vmov	d0, r0, r1
 804247c:	b011      	add	sp, #68	; 0x44
 804247e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8042482:	2a00      	cmp	r2, #0
 8042484:	d13e      	bne.n	8042504 <__ieee754_pow+0x14c>
 8042486:	f1c3 0314 	rsb	r3, r3, #20
 804248a:	fa48 f103 	asr.w	r1, r8, r3
 804248e:	fa01 f303 	lsl.w	r3, r1, r3
 8042492:	4543      	cmp	r3, r8
 8042494:	f040 8469 	bne.w	8042d6a <__ieee754_pow+0x9b2>
 8042498:	f001 0101 	and.w	r1, r1, #1
 804249c:	f1c1 0b02 	rsb	fp, r1, #2
 80424a0:	4b4b      	ldr	r3, [pc, #300]	; (80425d0 <__ieee754_pow+0x218>)
 80424a2:	4598      	cmp	r8, r3
 80424a4:	d118      	bne.n	80424d8 <__ieee754_pow+0x120>
 80424a6:	f1b9 0f00 	cmp.w	r9, #0
 80424aa:	f280 845a 	bge.w	8042d62 <__ieee754_pow+0x9aa>
 80424ae:	4948      	ldr	r1, [pc, #288]	; (80425d0 <__ieee754_pow+0x218>)
 80424b0:	4632      	mov	r2, r6
 80424b2:	463b      	mov	r3, r7
 80424b4:	2000      	movs	r0, #0
 80424b6:	f7de fa01 	bl	80208bc <__aeabi_ddiv>
 80424ba:	e7dd      	b.n	8042478 <__ieee754_pow+0xc0>
 80424bc:	f04f 0b02 	mov.w	fp, #2
 80424c0:	e7c4      	b.n	804244c <__ieee754_pow+0x94>
 80424c2:	f04f 0b00 	mov.w	fp, #0
 80424c6:	e7c1      	b.n	804244c <__ieee754_pow+0x94>
 80424c8:	f1b9 0f00 	cmp.w	r9, #0
 80424cc:	dad2      	bge.n	8042474 <__ieee754_pow+0xbc>
 80424ce:	e9dd 0300 	ldrd	r0, r3, [sp]
 80424d2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80424d6:	e7cf      	b.n	8042478 <__ieee754_pow+0xc0>
 80424d8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80424dc:	d106      	bne.n	80424ec <__ieee754_pow+0x134>
 80424de:	4632      	mov	r2, r6
 80424e0:	463b      	mov	r3, r7
 80424e2:	4610      	mov	r0, r2
 80424e4:	4619      	mov	r1, r3
 80424e6:	f7de f8bf 	bl	8020668 <__aeabi_dmul>
 80424ea:	e7c5      	b.n	8042478 <__ieee754_pow+0xc0>
 80424ec:	4b39      	ldr	r3, [pc, #228]	; (80425d4 <__ieee754_pow+0x21c>)
 80424ee:	4599      	cmp	r9, r3
 80424f0:	d10a      	bne.n	8042508 <__ieee754_pow+0x150>
 80424f2:	2d00      	cmp	r5, #0
 80424f4:	db08      	blt.n	8042508 <__ieee754_pow+0x150>
 80424f6:	ec47 6b10 	vmov	d0, r6, r7
 80424fa:	b011      	add	sp, #68	; 0x44
 80424fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8042500:	f000 bc68 	b.w	8042dd4 <__ieee754_sqrt>
 8042504:	f04f 0b00 	mov.w	fp, #0
 8042508:	ec47 6b10 	vmov	d0, r6, r7
 804250c:	f000 fd12 	bl	8042f34 <fabs>
 8042510:	ec51 0b10 	vmov	r0, r1, d0
 8042514:	f1ba 0f00 	cmp.w	sl, #0
 8042518:	d127      	bne.n	804256a <__ieee754_pow+0x1b2>
 804251a:	b124      	cbz	r4, 8042526 <__ieee754_pow+0x16e>
 804251c:	4b2c      	ldr	r3, [pc, #176]	; (80425d0 <__ieee754_pow+0x218>)
 804251e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8042522:	429a      	cmp	r2, r3
 8042524:	d121      	bne.n	804256a <__ieee754_pow+0x1b2>
 8042526:	f1b9 0f00 	cmp.w	r9, #0
 804252a:	da05      	bge.n	8042538 <__ieee754_pow+0x180>
 804252c:	4602      	mov	r2, r0
 804252e:	460b      	mov	r3, r1
 8042530:	2000      	movs	r0, #0
 8042532:	4927      	ldr	r1, [pc, #156]	; (80425d0 <__ieee754_pow+0x218>)
 8042534:	f7de f9c2 	bl	80208bc <__aeabi_ddiv>
 8042538:	2d00      	cmp	r5, #0
 804253a:	da9d      	bge.n	8042478 <__ieee754_pow+0xc0>
 804253c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8042540:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8042544:	ea54 030b 	orrs.w	r3, r4, fp
 8042548:	d108      	bne.n	804255c <__ieee754_pow+0x1a4>
 804254a:	4602      	mov	r2, r0
 804254c:	460b      	mov	r3, r1
 804254e:	4610      	mov	r0, r2
 8042550:	4619      	mov	r1, r3
 8042552:	f7dd fed1 	bl	80202f8 <__aeabi_dsub>
 8042556:	4602      	mov	r2, r0
 8042558:	460b      	mov	r3, r1
 804255a:	e7ac      	b.n	80424b6 <__ieee754_pow+0xfe>
 804255c:	f1bb 0f01 	cmp.w	fp, #1
 8042560:	d18a      	bne.n	8042478 <__ieee754_pow+0xc0>
 8042562:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8042566:	4619      	mov	r1, r3
 8042568:	e786      	b.n	8042478 <__ieee754_pow+0xc0>
 804256a:	0fed      	lsrs	r5, r5, #31
 804256c:	1e6b      	subs	r3, r5, #1
 804256e:	930d      	str	r3, [sp, #52]	; 0x34
 8042570:	ea5b 0303 	orrs.w	r3, fp, r3
 8042574:	d102      	bne.n	804257c <__ieee754_pow+0x1c4>
 8042576:	4632      	mov	r2, r6
 8042578:	463b      	mov	r3, r7
 804257a:	e7e8      	b.n	804254e <__ieee754_pow+0x196>
 804257c:	4b16      	ldr	r3, [pc, #88]	; (80425d8 <__ieee754_pow+0x220>)
 804257e:	4598      	cmp	r8, r3
 8042580:	f340 80fe 	ble.w	8042780 <__ieee754_pow+0x3c8>
 8042584:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8042588:	4598      	cmp	r8, r3
 804258a:	dd0a      	ble.n	80425a2 <__ieee754_pow+0x1ea>
 804258c:	4b0f      	ldr	r3, [pc, #60]	; (80425cc <__ieee754_pow+0x214>)
 804258e:	429c      	cmp	r4, r3
 8042590:	dc0d      	bgt.n	80425ae <__ieee754_pow+0x1f6>
 8042592:	f1b9 0f00 	cmp.w	r9, #0
 8042596:	f6bf af6d 	bge.w	8042474 <__ieee754_pow+0xbc>
 804259a:	a307      	add	r3, pc, #28	; (adr r3, 80425b8 <__ieee754_pow+0x200>)
 804259c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80425a0:	e79f      	b.n	80424e2 <__ieee754_pow+0x12a>
 80425a2:	4b0e      	ldr	r3, [pc, #56]	; (80425dc <__ieee754_pow+0x224>)
 80425a4:	429c      	cmp	r4, r3
 80425a6:	ddf4      	ble.n	8042592 <__ieee754_pow+0x1da>
 80425a8:	4b09      	ldr	r3, [pc, #36]	; (80425d0 <__ieee754_pow+0x218>)
 80425aa:	429c      	cmp	r4, r3
 80425ac:	dd18      	ble.n	80425e0 <__ieee754_pow+0x228>
 80425ae:	f1b9 0f00 	cmp.w	r9, #0
 80425b2:	dcf2      	bgt.n	804259a <__ieee754_pow+0x1e2>
 80425b4:	e75e      	b.n	8042474 <__ieee754_pow+0xbc>
 80425b6:	bf00      	nop
 80425b8:	8800759c 	.word	0x8800759c
 80425bc:	7e37e43c 	.word	0x7e37e43c
 80425c0:	7ff00000 	.word	0x7ff00000
 80425c4:	080564c1 	.word	0x080564c1
 80425c8:	433fffff 	.word	0x433fffff
 80425cc:	3fefffff 	.word	0x3fefffff
 80425d0:	3ff00000 	.word	0x3ff00000
 80425d4:	3fe00000 	.word	0x3fe00000
 80425d8:	41e00000 	.word	0x41e00000
 80425dc:	3feffffe 	.word	0x3feffffe
 80425e0:	2200      	movs	r2, #0
 80425e2:	4b63      	ldr	r3, [pc, #396]	; (8042770 <__ieee754_pow+0x3b8>)
 80425e4:	f7dd fe88 	bl	80202f8 <__aeabi_dsub>
 80425e8:	a355      	add	r3, pc, #340	; (adr r3, 8042740 <__ieee754_pow+0x388>)
 80425ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80425ee:	4604      	mov	r4, r0
 80425f0:	460d      	mov	r5, r1
 80425f2:	f7de f839 	bl	8020668 <__aeabi_dmul>
 80425f6:	a354      	add	r3, pc, #336	; (adr r3, 8042748 <__ieee754_pow+0x390>)
 80425f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80425fc:	4606      	mov	r6, r0
 80425fe:	460f      	mov	r7, r1
 8042600:	4620      	mov	r0, r4
 8042602:	4629      	mov	r1, r5
 8042604:	f7de f830 	bl	8020668 <__aeabi_dmul>
 8042608:	2200      	movs	r2, #0
 804260a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 804260e:	4b59      	ldr	r3, [pc, #356]	; (8042774 <__ieee754_pow+0x3bc>)
 8042610:	4620      	mov	r0, r4
 8042612:	4629      	mov	r1, r5
 8042614:	f7de f828 	bl	8020668 <__aeabi_dmul>
 8042618:	4602      	mov	r2, r0
 804261a:	460b      	mov	r3, r1
 804261c:	a14c      	add	r1, pc, #304	; (adr r1, 8042750 <__ieee754_pow+0x398>)
 804261e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8042622:	f7dd fe69 	bl	80202f8 <__aeabi_dsub>
 8042626:	4622      	mov	r2, r4
 8042628:	462b      	mov	r3, r5
 804262a:	f7de f81d 	bl	8020668 <__aeabi_dmul>
 804262e:	4602      	mov	r2, r0
 8042630:	460b      	mov	r3, r1
 8042632:	2000      	movs	r0, #0
 8042634:	4950      	ldr	r1, [pc, #320]	; (8042778 <__ieee754_pow+0x3c0>)
 8042636:	f7dd fe5f 	bl	80202f8 <__aeabi_dsub>
 804263a:	4622      	mov	r2, r4
 804263c:	462b      	mov	r3, r5
 804263e:	4680      	mov	r8, r0
 8042640:	4689      	mov	r9, r1
 8042642:	4620      	mov	r0, r4
 8042644:	4629      	mov	r1, r5
 8042646:	f7de f80f 	bl	8020668 <__aeabi_dmul>
 804264a:	4602      	mov	r2, r0
 804264c:	460b      	mov	r3, r1
 804264e:	4640      	mov	r0, r8
 8042650:	4649      	mov	r1, r9
 8042652:	f7de f809 	bl	8020668 <__aeabi_dmul>
 8042656:	a340      	add	r3, pc, #256	; (adr r3, 8042758 <__ieee754_pow+0x3a0>)
 8042658:	e9d3 2300 	ldrd	r2, r3, [r3]
 804265c:	f7de f804 	bl	8020668 <__aeabi_dmul>
 8042660:	4602      	mov	r2, r0
 8042662:	460b      	mov	r3, r1
 8042664:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8042668:	f7dd fe46 	bl	80202f8 <__aeabi_dsub>
 804266c:	4602      	mov	r2, r0
 804266e:	460b      	mov	r3, r1
 8042670:	4604      	mov	r4, r0
 8042672:	460d      	mov	r5, r1
 8042674:	4630      	mov	r0, r6
 8042676:	4639      	mov	r1, r7
 8042678:	f7dd fe40 	bl	80202fc <__adddf3>
 804267c:	2000      	movs	r0, #0
 804267e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8042682:	4632      	mov	r2, r6
 8042684:	463b      	mov	r3, r7
 8042686:	f7dd fe37 	bl	80202f8 <__aeabi_dsub>
 804268a:	4602      	mov	r2, r0
 804268c:	460b      	mov	r3, r1
 804268e:	4620      	mov	r0, r4
 8042690:	4629      	mov	r1, r5
 8042692:	f7dd fe31 	bl	80202f8 <__aeabi_dsub>
 8042696:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8042698:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 804269c:	4313      	orrs	r3, r2
 804269e:	4606      	mov	r6, r0
 80426a0:	460f      	mov	r7, r1
 80426a2:	f040 81eb 	bne.w	8042a7c <__ieee754_pow+0x6c4>
 80426a6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8042760 <__ieee754_pow+0x3a8>
 80426aa:	e9dd 4500 	ldrd	r4, r5, [sp]
 80426ae:	2400      	movs	r4, #0
 80426b0:	4622      	mov	r2, r4
 80426b2:	462b      	mov	r3, r5
 80426b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80426b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80426bc:	f7dd fe1c 	bl	80202f8 <__aeabi_dsub>
 80426c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80426c4:	f7dd ffd0 	bl	8020668 <__aeabi_dmul>
 80426c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80426cc:	4680      	mov	r8, r0
 80426ce:	4689      	mov	r9, r1
 80426d0:	4630      	mov	r0, r6
 80426d2:	4639      	mov	r1, r7
 80426d4:	f7dd ffc8 	bl	8020668 <__aeabi_dmul>
 80426d8:	4602      	mov	r2, r0
 80426da:	460b      	mov	r3, r1
 80426dc:	4640      	mov	r0, r8
 80426de:	4649      	mov	r1, r9
 80426e0:	f7dd fe0c 	bl	80202fc <__adddf3>
 80426e4:	4622      	mov	r2, r4
 80426e6:	462b      	mov	r3, r5
 80426e8:	4680      	mov	r8, r0
 80426ea:	4689      	mov	r9, r1
 80426ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80426f0:	f7dd ffba 	bl	8020668 <__aeabi_dmul>
 80426f4:	460b      	mov	r3, r1
 80426f6:	4604      	mov	r4, r0
 80426f8:	460d      	mov	r5, r1
 80426fa:	4602      	mov	r2, r0
 80426fc:	4649      	mov	r1, r9
 80426fe:	4640      	mov	r0, r8
 8042700:	e9cd 4500 	strd	r4, r5, [sp]
 8042704:	f7dd fdfa 	bl	80202fc <__adddf3>
 8042708:	4b1c      	ldr	r3, [pc, #112]	; (804277c <__ieee754_pow+0x3c4>)
 804270a:	4299      	cmp	r1, r3
 804270c:	4606      	mov	r6, r0
 804270e:	460f      	mov	r7, r1
 8042710:	468b      	mov	fp, r1
 8042712:	f340 82f7 	ble.w	8042d04 <__ieee754_pow+0x94c>
 8042716:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 804271a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 804271e:	4303      	orrs	r3, r0
 8042720:	f000 81ea 	beq.w	8042af8 <__ieee754_pow+0x740>
 8042724:	a310      	add	r3, pc, #64	; (adr r3, 8042768 <__ieee754_pow+0x3b0>)
 8042726:	e9d3 2300 	ldrd	r2, r3, [r3]
 804272a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 804272e:	f7dd ff9b 	bl	8020668 <__aeabi_dmul>
 8042732:	a30d      	add	r3, pc, #52	; (adr r3, 8042768 <__ieee754_pow+0x3b0>)
 8042734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042738:	e6d5      	b.n	80424e6 <__ieee754_pow+0x12e>
 804273a:	bf00      	nop
 804273c:	f3af 8000 	nop.w
 8042740:	60000000 	.word	0x60000000
 8042744:	3ff71547 	.word	0x3ff71547
 8042748:	f85ddf44 	.word	0xf85ddf44
 804274c:	3e54ae0b 	.word	0x3e54ae0b
 8042750:	55555555 	.word	0x55555555
 8042754:	3fd55555 	.word	0x3fd55555
 8042758:	652b82fe 	.word	0x652b82fe
 804275c:	3ff71547 	.word	0x3ff71547
 8042760:	00000000 	.word	0x00000000
 8042764:	bff00000 	.word	0xbff00000
 8042768:	8800759c 	.word	0x8800759c
 804276c:	7e37e43c 	.word	0x7e37e43c
 8042770:	3ff00000 	.word	0x3ff00000
 8042774:	3fd00000 	.word	0x3fd00000
 8042778:	3fe00000 	.word	0x3fe00000
 804277c:	408fffff 	.word	0x408fffff
 8042780:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8042784:	f04f 0200 	mov.w	r2, #0
 8042788:	da05      	bge.n	8042796 <__ieee754_pow+0x3de>
 804278a:	4bd3      	ldr	r3, [pc, #844]	; (8042ad8 <__ieee754_pow+0x720>)
 804278c:	f7dd ff6c 	bl	8020668 <__aeabi_dmul>
 8042790:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8042794:	460c      	mov	r4, r1
 8042796:	1523      	asrs	r3, r4, #20
 8042798:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 804279c:	4413      	add	r3, r2
 804279e:	9309      	str	r3, [sp, #36]	; 0x24
 80427a0:	4bce      	ldr	r3, [pc, #824]	; (8042adc <__ieee754_pow+0x724>)
 80427a2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80427a6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80427aa:	429c      	cmp	r4, r3
 80427ac:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80427b0:	dd08      	ble.n	80427c4 <__ieee754_pow+0x40c>
 80427b2:	4bcb      	ldr	r3, [pc, #812]	; (8042ae0 <__ieee754_pow+0x728>)
 80427b4:	429c      	cmp	r4, r3
 80427b6:	f340 815e 	ble.w	8042a76 <__ieee754_pow+0x6be>
 80427ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80427bc:	3301      	adds	r3, #1
 80427be:	9309      	str	r3, [sp, #36]	; 0x24
 80427c0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80427c4:	f04f 0a00 	mov.w	sl, #0
 80427c8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80427cc:	930c      	str	r3, [sp, #48]	; 0x30
 80427ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80427d0:	4bc4      	ldr	r3, [pc, #784]	; (8042ae4 <__ieee754_pow+0x72c>)
 80427d2:	4413      	add	r3, r2
 80427d4:	ed93 7b00 	vldr	d7, [r3]
 80427d8:	4629      	mov	r1, r5
 80427da:	ec53 2b17 	vmov	r2, r3, d7
 80427de:	ed8d 7b06 	vstr	d7, [sp, #24]
 80427e2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80427e6:	f7dd fd87 	bl	80202f8 <__aeabi_dsub>
 80427ea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80427ee:	4606      	mov	r6, r0
 80427f0:	460f      	mov	r7, r1
 80427f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80427f6:	f7dd fd81 	bl	80202fc <__adddf3>
 80427fa:	4602      	mov	r2, r0
 80427fc:	460b      	mov	r3, r1
 80427fe:	2000      	movs	r0, #0
 8042800:	49b9      	ldr	r1, [pc, #740]	; (8042ae8 <__ieee754_pow+0x730>)
 8042802:	f7de f85b 	bl	80208bc <__aeabi_ddiv>
 8042806:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 804280a:	4602      	mov	r2, r0
 804280c:	460b      	mov	r3, r1
 804280e:	4630      	mov	r0, r6
 8042810:	4639      	mov	r1, r7
 8042812:	f7dd ff29 	bl	8020668 <__aeabi_dmul>
 8042816:	e9cd 0104 	strd	r0, r1, [sp, #16]
 804281a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 804281e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8042822:	2300      	movs	r3, #0
 8042824:	9302      	str	r3, [sp, #8]
 8042826:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 804282a:	106d      	asrs	r5, r5, #1
 804282c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8042830:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8042834:	2200      	movs	r2, #0
 8042836:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 804283a:	4640      	mov	r0, r8
 804283c:	4649      	mov	r1, r9
 804283e:	4614      	mov	r4, r2
 8042840:	461d      	mov	r5, r3
 8042842:	f7dd ff11 	bl	8020668 <__aeabi_dmul>
 8042846:	4602      	mov	r2, r0
 8042848:	460b      	mov	r3, r1
 804284a:	4630      	mov	r0, r6
 804284c:	4639      	mov	r1, r7
 804284e:	f7dd fd53 	bl	80202f8 <__aeabi_dsub>
 8042852:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8042856:	4606      	mov	r6, r0
 8042858:	460f      	mov	r7, r1
 804285a:	4620      	mov	r0, r4
 804285c:	4629      	mov	r1, r5
 804285e:	f7dd fd4b 	bl	80202f8 <__aeabi_dsub>
 8042862:	4602      	mov	r2, r0
 8042864:	460b      	mov	r3, r1
 8042866:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 804286a:	f7dd fd45 	bl	80202f8 <__aeabi_dsub>
 804286e:	4642      	mov	r2, r8
 8042870:	464b      	mov	r3, r9
 8042872:	f7dd fef9 	bl	8020668 <__aeabi_dmul>
 8042876:	4602      	mov	r2, r0
 8042878:	460b      	mov	r3, r1
 804287a:	4630      	mov	r0, r6
 804287c:	4639      	mov	r1, r7
 804287e:	f7dd fd3b 	bl	80202f8 <__aeabi_dsub>
 8042882:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8042886:	f7dd feef 	bl	8020668 <__aeabi_dmul>
 804288a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 804288e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8042892:	4610      	mov	r0, r2
 8042894:	4619      	mov	r1, r3
 8042896:	f7dd fee7 	bl	8020668 <__aeabi_dmul>
 804289a:	a37b      	add	r3, pc, #492	; (adr r3, 8042a88 <__ieee754_pow+0x6d0>)
 804289c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80428a0:	4604      	mov	r4, r0
 80428a2:	460d      	mov	r5, r1
 80428a4:	f7dd fee0 	bl	8020668 <__aeabi_dmul>
 80428a8:	a379      	add	r3, pc, #484	; (adr r3, 8042a90 <__ieee754_pow+0x6d8>)
 80428aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80428ae:	f7dd fd25 	bl	80202fc <__adddf3>
 80428b2:	4622      	mov	r2, r4
 80428b4:	462b      	mov	r3, r5
 80428b6:	f7dd fed7 	bl	8020668 <__aeabi_dmul>
 80428ba:	a377      	add	r3, pc, #476	; (adr r3, 8042a98 <__ieee754_pow+0x6e0>)
 80428bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80428c0:	f7dd fd1c 	bl	80202fc <__adddf3>
 80428c4:	4622      	mov	r2, r4
 80428c6:	462b      	mov	r3, r5
 80428c8:	f7dd fece 	bl	8020668 <__aeabi_dmul>
 80428cc:	a374      	add	r3, pc, #464	; (adr r3, 8042aa0 <__ieee754_pow+0x6e8>)
 80428ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80428d2:	f7dd fd13 	bl	80202fc <__adddf3>
 80428d6:	4622      	mov	r2, r4
 80428d8:	462b      	mov	r3, r5
 80428da:	f7dd fec5 	bl	8020668 <__aeabi_dmul>
 80428de:	a372      	add	r3, pc, #456	; (adr r3, 8042aa8 <__ieee754_pow+0x6f0>)
 80428e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80428e4:	f7dd fd0a 	bl	80202fc <__adddf3>
 80428e8:	4622      	mov	r2, r4
 80428ea:	462b      	mov	r3, r5
 80428ec:	f7dd febc 	bl	8020668 <__aeabi_dmul>
 80428f0:	a36f      	add	r3, pc, #444	; (adr r3, 8042ab0 <__ieee754_pow+0x6f8>)
 80428f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80428f6:	f7dd fd01 	bl	80202fc <__adddf3>
 80428fa:	4622      	mov	r2, r4
 80428fc:	4606      	mov	r6, r0
 80428fe:	460f      	mov	r7, r1
 8042900:	462b      	mov	r3, r5
 8042902:	4620      	mov	r0, r4
 8042904:	4629      	mov	r1, r5
 8042906:	f7dd feaf 	bl	8020668 <__aeabi_dmul>
 804290a:	4602      	mov	r2, r0
 804290c:	460b      	mov	r3, r1
 804290e:	4630      	mov	r0, r6
 8042910:	4639      	mov	r1, r7
 8042912:	f7dd fea9 	bl	8020668 <__aeabi_dmul>
 8042916:	4642      	mov	r2, r8
 8042918:	4604      	mov	r4, r0
 804291a:	460d      	mov	r5, r1
 804291c:	464b      	mov	r3, r9
 804291e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8042922:	f7dd fceb 	bl	80202fc <__adddf3>
 8042926:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 804292a:	f7dd fe9d 	bl	8020668 <__aeabi_dmul>
 804292e:	4622      	mov	r2, r4
 8042930:	462b      	mov	r3, r5
 8042932:	f7dd fce3 	bl	80202fc <__adddf3>
 8042936:	4642      	mov	r2, r8
 8042938:	4606      	mov	r6, r0
 804293a:	460f      	mov	r7, r1
 804293c:	464b      	mov	r3, r9
 804293e:	4640      	mov	r0, r8
 8042940:	4649      	mov	r1, r9
 8042942:	f7dd fe91 	bl	8020668 <__aeabi_dmul>
 8042946:	2200      	movs	r2, #0
 8042948:	4b68      	ldr	r3, [pc, #416]	; (8042aec <__ieee754_pow+0x734>)
 804294a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 804294e:	f7dd fcd5 	bl	80202fc <__adddf3>
 8042952:	4632      	mov	r2, r6
 8042954:	463b      	mov	r3, r7
 8042956:	f7dd fcd1 	bl	80202fc <__adddf3>
 804295a:	9802      	ldr	r0, [sp, #8]
 804295c:	460d      	mov	r5, r1
 804295e:	4604      	mov	r4, r0
 8042960:	4602      	mov	r2, r0
 8042962:	460b      	mov	r3, r1
 8042964:	4640      	mov	r0, r8
 8042966:	4649      	mov	r1, r9
 8042968:	f7dd fe7e 	bl	8020668 <__aeabi_dmul>
 804296c:	2200      	movs	r2, #0
 804296e:	4680      	mov	r8, r0
 8042970:	4689      	mov	r9, r1
 8042972:	4b5e      	ldr	r3, [pc, #376]	; (8042aec <__ieee754_pow+0x734>)
 8042974:	4620      	mov	r0, r4
 8042976:	4629      	mov	r1, r5
 8042978:	f7dd fcbe 	bl	80202f8 <__aeabi_dsub>
 804297c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8042980:	f7dd fcba 	bl	80202f8 <__aeabi_dsub>
 8042984:	4602      	mov	r2, r0
 8042986:	460b      	mov	r3, r1
 8042988:	4630      	mov	r0, r6
 804298a:	4639      	mov	r1, r7
 804298c:	f7dd fcb4 	bl	80202f8 <__aeabi_dsub>
 8042990:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8042994:	f7dd fe68 	bl	8020668 <__aeabi_dmul>
 8042998:	4622      	mov	r2, r4
 804299a:	4606      	mov	r6, r0
 804299c:	460f      	mov	r7, r1
 804299e:	462b      	mov	r3, r5
 80429a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80429a4:	f7dd fe60 	bl	8020668 <__aeabi_dmul>
 80429a8:	4602      	mov	r2, r0
 80429aa:	460b      	mov	r3, r1
 80429ac:	4630      	mov	r0, r6
 80429ae:	4639      	mov	r1, r7
 80429b0:	f7dd fca4 	bl	80202fc <__adddf3>
 80429b4:	4606      	mov	r6, r0
 80429b6:	460f      	mov	r7, r1
 80429b8:	4602      	mov	r2, r0
 80429ba:	460b      	mov	r3, r1
 80429bc:	4640      	mov	r0, r8
 80429be:	4649      	mov	r1, r9
 80429c0:	f7dd fc9c 	bl	80202fc <__adddf3>
 80429c4:	9802      	ldr	r0, [sp, #8]
 80429c6:	a33c      	add	r3, pc, #240	; (adr r3, 8042ab8 <__ieee754_pow+0x700>)
 80429c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80429cc:	4604      	mov	r4, r0
 80429ce:	460d      	mov	r5, r1
 80429d0:	f7dd fe4a 	bl	8020668 <__aeabi_dmul>
 80429d4:	4642      	mov	r2, r8
 80429d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80429da:	464b      	mov	r3, r9
 80429dc:	4620      	mov	r0, r4
 80429de:	4629      	mov	r1, r5
 80429e0:	f7dd fc8a 	bl	80202f8 <__aeabi_dsub>
 80429e4:	4602      	mov	r2, r0
 80429e6:	460b      	mov	r3, r1
 80429e8:	4630      	mov	r0, r6
 80429ea:	4639      	mov	r1, r7
 80429ec:	f7dd fc84 	bl	80202f8 <__aeabi_dsub>
 80429f0:	a333      	add	r3, pc, #204	; (adr r3, 8042ac0 <__ieee754_pow+0x708>)
 80429f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80429f6:	f7dd fe37 	bl	8020668 <__aeabi_dmul>
 80429fa:	a333      	add	r3, pc, #204	; (adr r3, 8042ac8 <__ieee754_pow+0x710>)
 80429fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042a00:	4606      	mov	r6, r0
 8042a02:	460f      	mov	r7, r1
 8042a04:	4620      	mov	r0, r4
 8042a06:	4629      	mov	r1, r5
 8042a08:	f7dd fe2e 	bl	8020668 <__aeabi_dmul>
 8042a0c:	4602      	mov	r2, r0
 8042a0e:	460b      	mov	r3, r1
 8042a10:	4630      	mov	r0, r6
 8042a12:	4639      	mov	r1, r7
 8042a14:	f7dd fc72 	bl	80202fc <__adddf3>
 8042a18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8042a1a:	4b35      	ldr	r3, [pc, #212]	; (8042af0 <__ieee754_pow+0x738>)
 8042a1c:	4413      	add	r3, r2
 8042a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042a22:	f7dd fc6b 	bl	80202fc <__adddf3>
 8042a26:	4604      	mov	r4, r0
 8042a28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8042a2a:	460d      	mov	r5, r1
 8042a2c:	f7dd fdb2 	bl	8020594 <__aeabi_i2d>
 8042a30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8042a32:	4b30      	ldr	r3, [pc, #192]	; (8042af4 <__ieee754_pow+0x73c>)
 8042a34:	4413      	add	r3, r2
 8042a36:	e9d3 8900 	ldrd	r8, r9, [r3]
 8042a3a:	4606      	mov	r6, r0
 8042a3c:	460f      	mov	r7, r1
 8042a3e:	4622      	mov	r2, r4
 8042a40:	462b      	mov	r3, r5
 8042a42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8042a46:	f7dd fc59 	bl	80202fc <__adddf3>
 8042a4a:	4642      	mov	r2, r8
 8042a4c:	464b      	mov	r3, r9
 8042a4e:	f7dd fc55 	bl	80202fc <__adddf3>
 8042a52:	4632      	mov	r2, r6
 8042a54:	463b      	mov	r3, r7
 8042a56:	f7dd fc51 	bl	80202fc <__adddf3>
 8042a5a:	9802      	ldr	r0, [sp, #8]
 8042a5c:	4632      	mov	r2, r6
 8042a5e:	463b      	mov	r3, r7
 8042a60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8042a64:	f7dd fc48 	bl	80202f8 <__aeabi_dsub>
 8042a68:	4642      	mov	r2, r8
 8042a6a:	464b      	mov	r3, r9
 8042a6c:	f7dd fc44 	bl	80202f8 <__aeabi_dsub>
 8042a70:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8042a74:	e607      	b.n	8042686 <__ieee754_pow+0x2ce>
 8042a76:	f04f 0a01 	mov.w	sl, #1
 8042a7a:	e6a5      	b.n	80427c8 <__ieee754_pow+0x410>
 8042a7c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8042ad0 <__ieee754_pow+0x718>
 8042a80:	e613      	b.n	80426aa <__ieee754_pow+0x2f2>
 8042a82:	bf00      	nop
 8042a84:	f3af 8000 	nop.w
 8042a88:	4a454eef 	.word	0x4a454eef
 8042a8c:	3fca7e28 	.word	0x3fca7e28
 8042a90:	93c9db65 	.word	0x93c9db65
 8042a94:	3fcd864a 	.word	0x3fcd864a
 8042a98:	a91d4101 	.word	0xa91d4101
 8042a9c:	3fd17460 	.word	0x3fd17460
 8042aa0:	518f264d 	.word	0x518f264d
 8042aa4:	3fd55555 	.word	0x3fd55555
 8042aa8:	db6fabff 	.word	0xdb6fabff
 8042aac:	3fdb6db6 	.word	0x3fdb6db6
 8042ab0:	33333303 	.word	0x33333303
 8042ab4:	3fe33333 	.word	0x3fe33333
 8042ab8:	e0000000 	.word	0xe0000000
 8042abc:	3feec709 	.word	0x3feec709
 8042ac0:	dc3a03fd 	.word	0xdc3a03fd
 8042ac4:	3feec709 	.word	0x3feec709
 8042ac8:	145b01f5 	.word	0x145b01f5
 8042acc:	be3e2fe0 	.word	0xbe3e2fe0
 8042ad0:	00000000 	.word	0x00000000
 8042ad4:	3ff00000 	.word	0x3ff00000
 8042ad8:	43400000 	.word	0x43400000
 8042adc:	0003988e 	.word	0x0003988e
 8042ae0:	000bb679 	.word	0x000bb679
 8042ae4:	08056600 	.word	0x08056600
 8042ae8:	3ff00000 	.word	0x3ff00000
 8042aec:	40080000 	.word	0x40080000
 8042af0:	08056620 	.word	0x08056620
 8042af4:	08056610 	.word	0x08056610
 8042af8:	a3b4      	add	r3, pc, #720	; (adr r3, 8042dcc <__ieee754_pow+0xa14>)
 8042afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042afe:	4640      	mov	r0, r8
 8042b00:	4649      	mov	r1, r9
 8042b02:	f7dd fbfb 	bl	80202fc <__adddf3>
 8042b06:	4622      	mov	r2, r4
 8042b08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8042b0c:	462b      	mov	r3, r5
 8042b0e:	4630      	mov	r0, r6
 8042b10:	4639      	mov	r1, r7
 8042b12:	f7dd fbf1 	bl	80202f8 <__aeabi_dsub>
 8042b16:	4602      	mov	r2, r0
 8042b18:	460b      	mov	r3, r1
 8042b1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8042b1e:	f7de f833 	bl	8020b88 <__aeabi_dcmpgt>
 8042b22:	2800      	cmp	r0, #0
 8042b24:	f47f adfe 	bne.w	8042724 <__ieee754_pow+0x36c>
 8042b28:	4aa3      	ldr	r2, [pc, #652]	; (8042db8 <__ieee754_pow+0xa00>)
 8042b2a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8042b2e:	4293      	cmp	r3, r2
 8042b30:	f340 810a 	ble.w	8042d48 <__ieee754_pow+0x990>
 8042b34:	151b      	asrs	r3, r3, #20
 8042b36:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8042b3a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8042b3e:	fa4a f303 	asr.w	r3, sl, r3
 8042b42:	445b      	add	r3, fp
 8042b44:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8042b48:	4e9c      	ldr	r6, [pc, #624]	; (8042dbc <__ieee754_pow+0xa04>)
 8042b4a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8042b4e:	4116      	asrs	r6, r2
 8042b50:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8042b54:	2000      	movs	r0, #0
 8042b56:	ea23 0106 	bic.w	r1, r3, r6
 8042b5a:	f1c2 0214 	rsb	r2, r2, #20
 8042b5e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8042b62:	fa4a fa02 	asr.w	sl, sl, r2
 8042b66:	f1bb 0f00 	cmp.w	fp, #0
 8042b6a:	4602      	mov	r2, r0
 8042b6c:	460b      	mov	r3, r1
 8042b6e:	4620      	mov	r0, r4
 8042b70:	4629      	mov	r1, r5
 8042b72:	bfb8      	it	lt
 8042b74:	f1ca 0a00 	rsblt	sl, sl, #0
 8042b78:	f7dd fbbe 	bl	80202f8 <__aeabi_dsub>
 8042b7c:	e9cd 0100 	strd	r0, r1, [sp]
 8042b80:	4642      	mov	r2, r8
 8042b82:	464b      	mov	r3, r9
 8042b84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8042b88:	f7dd fbb8 	bl	80202fc <__adddf3>
 8042b8c:	2000      	movs	r0, #0
 8042b8e:	a378      	add	r3, pc, #480	; (adr r3, 8042d70 <__ieee754_pow+0x9b8>)
 8042b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042b94:	4604      	mov	r4, r0
 8042b96:	460d      	mov	r5, r1
 8042b98:	f7dd fd66 	bl	8020668 <__aeabi_dmul>
 8042b9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8042ba0:	4606      	mov	r6, r0
 8042ba2:	460f      	mov	r7, r1
 8042ba4:	4620      	mov	r0, r4
 8042ba6:	4629      	mov	r1, r5
 8042ba8:	f7dd fba6 	bl	80202f8 <__aeabi_dsub>
 8042bac:	4602      	mov	r2, r0
 8042bae:	460b      	mov	r3, r1
 8042bb0:	4640      	mov	r0, r8
 8042bb2:	4649      	mov	r1, r9
 8042bb4:	f7dd fba0 	bl	80202f8 <__aeabi_dsub>
 8042bb8:	a36f      	add	r3, pc, #444	; (adr r3, 8042d78 <__ieee754_pow+0x9c0>)
 8042bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042bbe:	f7dd fd53 	bl	8020668 <__aeabi_dmul>
 8042bc2:	a36f      	add	r3, pc, #444	; (adr r3, 8042d80 <__ieee754_pow+0x9c8>)
 8042bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042bc8:	4680      	mov	r8, r0
 8042bca:	4689      	mov	r9, r1
 8042bcc:	4620      	mov	r0, r4
 8042bce:	4629      	mov	r1, r5
 8042bd0:	f7dd fd4a 	bl	8020668 <__aeabi_dmul>
 8042bd4:	4602      	mov	r2, r0
 8042bd6:	460b      	mov	r3, r1
 8042bd8:	4640      	mov	r0, r8
 8042bda:	4649      	mov	r1, r9
 8042bdc:	f7dd fb8e 	bl	80202fc <__adddf3>
 8042be0:	4604      	mov	r4, r0
 8042be2:	460d      	mov	r5, r1
 8042be4:	4602      	mov	r2, r0
 8042be6:	460b      	mov	r3, r1
 8042be8:	4630      	mov	r0, r6
 8042bea:	4639      	mov	r1, r7
 8042bec:	f7dd fb86 	bl	80202fc <__adddf3>
 8042bf0:	4632      	mov	r2, r6
 8042bf2:	463b      	mov	r3, r7
 8042bf4:	4680      	mov	r8, r0
 8042bf6:	4689      	mov	r9, r1
 8042bf8:	f7dd fb7e 	bl	80202f8 <__aeabi_dsub>
 8042bfc:	4602      	mov	r2, r0
 8042bfe:	460b      	mov	r3, r1
 8042c00:	4620      	mov	r0, r4
 8042c02:	4629      	mov	r1, r5
 8042c04:	f7dd fb78 	bl	80202f8 <__aeabi_dsub>
 8042c08:	4642      	mov	r2, r8
 8042c0a:	4606      	mov	r6, r0
 8042c0c:	460f      	mov	r7, r1
 8042c0e:	464b      	mov	r3, r9
 8042c10:	4640      	mov	r0, r8
 8042c12:	4649      	mov	r1, r9
 8042c14:	f7dd fd28 	bl	8020668 <__aeabi_dmul>
 8042c18:	a35b      	add	r3, pc, #364	; (adr r3, 8042d88 <__ieee754_pow+0x9d0>)
 8042c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042c1e:	4604      	mov	r4, r0
 8042c20:	460d      	mov	r5, r1
 8042c22:	f7dd fd21 	bl	8020668 <__aeabi_dmul>
 8042c26:	a35a      	add	r3, pc, #360	; (adr r3, 8042d90 <__ieee754_pow+0x9d8>)
 8042c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042c2c:	f7dd fb64 	bl	80202f8 <__aeabi_dsub>
 8042c30:	4622      	mov	r2, r4
 8042c32:	462b      	mov	r3, r5
 8042c34:	f7dd fd18 	bl	8020668 <__aeabi_dmul>
 8042c38:	a357      	add	r3, pc, #348	; (adr r3, 8042d98 <__ieee754_pow+0x9e0>)
 8042c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042c3e:	f7dd fb5d 	bl	80202fc <__adddf3>
 8042c42:	4622      	mov	r2, r4
 8042c44:	462b      	mov	r3, r5
 8042c46:	f7dd fd0f 	bl	8020668 <__aeabi_dmul>
 8042c4a:	a355      	add	r3, pc, #340	; (adr r3, 8042da0 <__ieee754_pow+0x9e8>)
 8042c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042c50:	f7dd fb52 	bl	80202f8 <__aeabi_dsub>
 8042c54:	4622      	mov	r2, r4
 8042c56:	462b      	mov	r3, r5
 8042c58:	f7dd fd06 	bl	8020668 <__aeabi_dmul>
 8042c5c:	a352      	add	r3, pc, #328	; (adr r3, 8042da8 <__ieee754_pow+0x9f0>)
 8042c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042c62:	f7dd fb4b 	bl	80202fc <__adddf3>
 8042c66:	4622      	mov	r2, r4
 8042c68:	462b      	mov	r3, r5
 8042c6a:	f7dd fcfd 	bl	8020668 <__aeabi_dmul>
 8042c6e:	4602      	mov	r2, r0
 8042c70:	460b      	mov	r3, r1
 8042c72:	4640      	mov	r0, r8
 8042c74:	4649      	mov	r1, r9
 8042c76:	f7dd fb3f 	bl	80202f8 <__aeabi_dsub>
 8042c7a:	4604      	mov	r4, r0
 8042c7c:	460d      	mov	r5, r1
 8042c7e:	4602      	mov	r2, r0
 8042c80:	460b      	mov	r3, r1
 8042c82:	4640      	mov	r0, r8
 8042c84:	4649      	mov	r1, r9
 8042c86:	f7dd fcef 	bl	8020668 <__aeabi_dmul>
 8042c8a:	2200      	movs	r2, #0
 8042c8c:	e9cd 0100 	strd	r0, r1, [sp]
 8042c90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8042c94:	4620      	mov	r0, r4
 8042c96:	4629      	mov	r1, r5
 8042c98:	f7dd fb2e 	bl	80202f8 <__aeabi_dsub>
 8042c9c:	4602      	mov	r2, r0
 8042c9e:	460b      	mov	r3, r1
 8042ca0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8042ca4:	f7dd fe0a 	bl	80208bc <__aeabi_ddiv>
 8042ca8:	4632      	mov	r2, r6
 8042caa:	4604      	mov	r4, r0
 8042cac:	460d      	mov	r5, r1
 8042cae:	463b      	mov	r3, r7
 8042cb0:	4640      	mov	r0, r8
 8042cb2:	4649      	mov	r1, r9
 8042cb4:	f7dd fcd8 	bl	8020668 <__aeabi_dmul>
 8042cb8:	4632      	mov	r2, r6
 8042cba:	463b      	mov	r3, r7
 8042cbc:	f7dd fb1e 	bl	80202fc <__adddf3>
 8042cc0:	4602      	mov	r2, r0
 8042cc2:	460b      	mov	r3, r1
 8042cc4:	4620      	mov	r0, r4
 8042cc6:	4629      	mov	r1, r5
 8042cc8:	f7dd fb16 	bl	80202f8 <__aeabi_dsub>
 8042ccc:	4642      	mov	r2, r8
 8042cce:	464b      	mov	r3, r9
 8042cd0:	f7dd fb12 	bl	80202f8 <__aeabi_dsub>
 8042cd4:	4602      	mov	r2, r0
 8042cd6:	460b      	mov	r3, r1
 8042cd8:	2000      	movs	r0, #0
 8042cda:	4939      	ldr	r1, [pc, #228]	; (8042dc0 <__ieee754_pow+0xa08>)
 8042cdc:	f7dd fb0c 	bl	80202f8 <__aeabi_dsub>
 8042ce0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8042ce4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8042ce8:	4602      	mov	r2, r0
 8042cea:	460b      	mov	r3, r1
 8042cec:	da2f      	bge.n	8042d4e <__ieee754_pow+0x996>
 8042cee:	4650      	mov	r0, sl
 8042cf0:	ec43 2b10 	vmov	d0, r2, r3
 8042cf4:	f000 f9c0 	bl	8043078 <scalbn>
 8042cf8:	ec51 0b10 	vmov	r0, r1, d0
 8042cfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8042d00:	f7ff bbf1 	b.w	80424e6 <__ieee754_pow+0x12e>
 8042d04:	4b2f      	ldr	r3, [pc, #188]	; (8042dc4 <__ieee754_pow+0xa0c>)
 8042d06:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8042d0a:	429e      	cmp	r6, r3
 8042d0c:	f77f af0c 	ble.w	8042b28 <__ieee754_pow+0x770>
 8042d10:	4b2d      	ldr	r3, [pc, #180]	; (8042dc8 <__ieee754_pow+0xa10>)
 8042d12:	440b      	add	r3, r1
 8042d14:	4303      	orrs	r3, r0
 8042d16:	d00b      	beq.n	8042d30 <__ieee754_pow+0x978>
 8042d18:	a325      	add	r3, pc, #148	; (adr r3, 8042db0 <__ieee754_pow+0x9f8>)
 8042d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042d1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8042d22:	f7dd fca1 	bl	8020668 <__aeabi_dmul>
 8042d26:	a322      	add	r3, pc, #136	; (adr r3, 8042db0 <__ieee754_pow+0x9f8>)
 8042d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042d2c:	f7ff bbdb 	b.w	80424e6 <__ieee754_pow+0x12e>
 8042d30:	4622      	mov	r2, r4
 8042d32:	462b      	mov	r3, r5
 8042d34:	f7dd fae0 	bl	80202f8 <__aeabi_dsub>
 8042d38:	4642      	mov	r2, r8
 8042d3a:	464b      	mov	r3, r9
 8042d3c:	f7dd ff1a 	bl	8020b74 <__aeabi_dcmpge>
 8042d40:	2800      	cmp	r0, #0
 8042d42:	f43f aef1 	beq.w	8042b28 <__ieee754_pow+0x770>
 8042d46:	e7e7      	b.n	8042d18 <__ieee754_pow+0x960>
 8042d48:	f04f 0a00 	mov.w	sl, #0
 8042d4c:	e718      	b.n	8042b80 <__ieee754_pow+0x7c8>
 8042d4e:	4621      	mov	r1, r4
 8042d50:	e7d4      	b.n	8042cfc <__ieee754_pow+0x944>
 8042d52:	2000      	movs	r0, #0
 8042d54:	491a      	ldr	r1, [pc, #104]	; (8042dc0 <__ieee754_pow+0xa08>)
 8042d56:	f7ff bb8f 	b.w	8042478 <__ieee754_pow+0xc0>
 8042d5a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8042d5e:	f7ff bb8b 	b.w	8042478 <__ieee754_pow+0xc0>
 8042d62:	4630      	mov	r0, r6
 8042d64:	4639      	mov	r1, r7
 8042d66:	f7ff bb87 	b.w	8042478 <__ieee754_pow+0xc0>
 8042d6a:	4693      	mov	fp, r2
 8042d6c:	f7ff bb98 	b.w	80424a0 <__ieee754_pow+0xe8>
 8042d70:	00000000 	.word	0x00000000
 8042d74:	3fe62e43 	.word	0x3fe62e43
 8042d78:	fefa39ef 	.word	0xfefa39ef
 8042d7c:	3fe62e42 	.word	0x3fe62e42
 8042d80:	0ca86c39 	.word	0x0ca86c39
 8042d84:	be205c61 	.word	0xbe205c61
 8042d88:	72bea4d0 	.word	0x72bea4d0
 8042d8c:	3e663769 	.word	0x3e663769
 8042d90:	c5d26bf1 	.word	0xc5d26bf1
 8042d94:	3ebbbd41 	.word	0x3ebbbd41
 8042d98:	af25de2c 	.word	0xaf25de2c
 8042d9c:	3f11566a 	.word	0x3f11566a
 8042da0:	16bebd93 	.word	0x16bebd93
 8042da4:	3f66c16c 	.word	0x3f66c16c
 8042da8:	5555553e 	.word	0x5555553e
 8042dac:	3fc55555 	.word	0x3fc55555
 8042db0:	c2f8f359 	.word	0xc2f8f359
 8042db4:	01a56e1f 	.word	0x01a56e1f
 8042db8:	3fe00000 	.word	0x3fe00000
 8042dbc:	000fffff 	.word	0x000fffff
 8042dc0:	3ff00000 	.word	0x3ff00000
 8042dc4:	4090cbff 	.word	0x4090cbff
 8042dc8:	3f6f3400 	.word	0x3f6f3400
 8042dcc:	652b82fe 	.word	0x652b82fe
 8042dd0:	3c971547 	.word	0x3c971547

08042dd4 <__ieee754_sqrt>:
 8042dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8042dd8:	4955      	ldr	r1, [pc, #340]	; (8042f30 <__ieee754_sqrt+0x15c>)
 8042dda:	ec55 4b10 	vmov	r4, r5, d0
 8042dde:	43a9      	bics	r1, r5
 8042de0:	462b      	mov	r3, r5
 8042de2:	462a      	mov	r2, r5
 8042de4:	d112      	bne.n	8042e0c <__ieee754_sqrt+0x38>
 8042de6:	ee10 2a10 	vmov	r2, s0
 8042dea:	ee10 0a10 	vmov	r0, s0
 8042dee:	4629      	mov	r1, r5
 8042df0:	f7dd fc3a 	bl	8020668 <__aeabi_dmul>
 8042df4:	4602      	mov	r2, r0
 8042df6:	460b      	mov	r3, r1
 8042df8:	4620      	mov	r0, r4
 8042dfa:	4629      	mov	r1, r5
 8042dfc:	f7dd fa7e 	bl	80202fc <__adddf3>
 8042e00:	4604      	mov	r4, r0
 8042e02:	460d      	mov	r5, r1
 8042e04:	ec45 4b10 	vmov	d0, r4, r5
 8042e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8042e0c:	2d00      	cmp	r5, #0
 8042e0e:	ee10 0a10 	vmov	r0, s0
 8042e12:	4621      	mov	r1, r4
 8042e14:	dc0f      	bgt.n	8042e36 <__ieee754_sqrt+0x62>
 8042e16:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8042e1a:	4330      	orrs	r0, r6
 8042e1c:	d0f2      	beq.n	8042e04 <__ieee754_sqrt+0x30>
 8042e1e:	b155      	cbz	r5, 8042e36 <__ieee754_sqrt+0x62>
 8042e20:	ee10 2a10 	vmov	r2, s0
 8042e24:	4620      	mov	r0, r4
 8042e26:	4629      	mov	r1, r5
 8042e28:	f7dd fa66 	bl	80202f8 <__aeabi_dsub>
 8042e2c:	4602      	mov	r2, r0
 8042e2e:	460b      	mov	r3, r1
 8042e30:	f7dd fd44 	bl	80208bc <__aeabi_ddiv>
 8042e34:	e7e4      	b.n	8042e00 <__ieee754_sqrt+0x2c>
 8042e36:	151b      	asrs	r3, r3, #20
 8042e38:	d073      	beq.n	8042f22 <__ieee754_sqrt+0x14e>
 8042e3a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8042e3e:	07dd      	lsls	r5, r3, #31
 8042e40:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8042e44:	bf48      	it	mi
 8042e46:	0fc8      	lsrmi	r0, r1, #31
 8042e48:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8042e4c:	bf44      	itt	mi
 8042e4e:	0049      	lslmi	r1, r1, #1
 8042e50:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8042e54:	2500      	movs	r5, #0
 8042e56:	1058      	asrs	r0, r3, #1
 8042e58:	0fcb      	lsrs	r3, r1, #31
 8042e5a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8042e5e:	0049      	lsls	r1, r1, #1
 8042e60:	2316      	movs	r3, #22
 8042e62:	462c      	mov	r4, r5
 8042e64:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8042e68:	19a7      	adds	r7, r4, r6
 8042e6a:	4297      	cmp	r7, r2
 8042e6c:	bfde      	ittt	le
 8042e6e:	19bc      	addle	r4, r7, r6
 8042e70:	1bd2      	suble	r2, r2, r7
 8042e72:	19ad      	addle	r5, r5, r6
 8042e74:	0fcf      	lsrs	r7, r1, #31
 8042e76:	3b01      	subs	r3, #1
 8042e78:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8042e7c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8042e80:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8042e84:	d1f0      	bne.n	8042e68 <__ieee754_sqrt+0x94>
 8042e86:	f04f 0c20 	mov.w	ip, #32
 8042e8a:	469e      	mov	lr, r3
 8042e8c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8042e90:	42a2      	cmp	r2, r4
 8042e92:	eb06 070e 	add.w	r7, r6, lr
 8042e96:	dc02      	bgt.n	8042e9e <__ieee754_sqrt+0xca>
 8042e98:	d112      	bne.n	8042ec0 <__ieee754_sqrt+0xec>
 8042e9a:	428f      	cmp	r7, r1
 8042e9c:	d810      	bhi.n	8042ec0 <__ieee754_sqrt+0xec>
 8042e9e:	2f00      	cmp	r7, #0
 8042ea0:	eb07 0e06 	add.w	lr, r7, r6
 8042ea4:	da42      	bge.n	8042f2c <__ieee754_sqrt+0x158>
 8042ea6:	f1be 0f00 	cmp.w	lr, #0
 8042eaa:	db3f      	blt.n	8042f2c <__ieee754_sqrt+0x158>
 8042eac:	f104 0801 	add.w	r8, r4, #1
 8042eb0:	1b12      	subs	r2, r2, r4
 8042eb2:	428f      	cmp	r7, r1
 8042eb4:	bf88      	it	hi
 8042eb6:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8042eba:	1bc9      	subs	r1, r1, r7
 8042ebc:	4433      	add	r3, r6
 8042ebe:	4644      	mov	r4, r8
 8042ec0:	0052      	lsls	r2, r2, #1
 8042ec2:	f1bc 0c01 	subs.w	ip, ip, #1
 8042ec6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8042eca:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8042ece:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8042ed2:	d1dd      	bne.n	8042e90 <__ieee754_sqrt+0xbc>
 8042ed4:	430a      	orrs	r2, r1
 8042ed6:	d006      	beq.n	8042ee6 <__ieee754_sqrt+0x112>
 8042ed8:	1c5c      	adds	r4, r3, #1
 8042eda:	bf13      	iteet	ne
 8042edc:	3301      	addne	r3, #1
 8042ede:	3501      	addeq	r5, #1
 8042ee0:	4663      	moveq	r3, ip
 8042ee2:	f023 0301 	bicne.w	r3, r3, #1
 8042ee6:	106a      	asrs	r2, r5, #1
 8042ee8:	085b      	lsrs	r3, r3, #1
 8042eea:	07e9      	lsls	r1, r5, #31
 8042eec:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8042ef0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8042ef4:	bf48      	it	mi
 8042ef6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8042efa:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8042efe:	461c      	mov	r4, r3
 8042f00:	e780      	b.n	8042e04 <__ieee754_sqrt+0x30>
 8042f02:	0aca      	lsrs	r2, r1, #11
 8042f04:	3815      	subs	r0, #21
 8042f06:	0549      	lsls	r1, r1, #21
 8042f08:	2a00      	cmp	r2, #0
 8042f0a:	d0fa      	beq.n	8042f02 <__ieee754_sqrt+0x12e>
 8042f0c:	02d6      	lsls	r6, r2, #11
 8042f0e:	d50a      	bpl.n	8042f26 <__ieee754_sqrt+0x152>
 8042f10:	f1c3 0420 	rsb	r4, r3, #32
 8042f14:	fa21 f404 	lsr.w	r4, r1, r4
 8042f18:	1e5d      	subs	r5, r3, #1
 8042f1a:	4099      	lsls	r1, r3
 8042f1c:	4322      	orrs	r2, r4
 8042f1e:	1b43      	subs	r3, r0, r5
 8042f20:	e78b      	b.n	8042e3a <__ieee754_sqrt+0x66>
 8042f22:	4618      	mov	r0, r3
 8042f24:	e7f0      	b.n	8042f08 <__ieee754_sqrt+0x134>
 8042f26:	0052      	lsls	r2, r2, #1
 8042f28:	3301      	adds	r3, #1
 8042f2a:	e7ef      	b.n	8042f0c <__ieee754_sqrt+0x138>
 8042f2c:	46a0      	mov	r8, r4
 8042f2e:	e7bf      	b.n	8042eb0 <__ieee754_sqrt+0xdc>
 8042f30:	7ff00000 	.word	0x7ff00000

08042f34 <fabs>:
 8042f34:	ec51 0b10 	vmov	r0, r1, d0
 8042f38:	ee10 2a10 	vmov	r2, s0
 8042f3c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8042f40:	ec43 2b10 	vmov	d0, r2, r3
 8042f44:	4770      	bx	lr

08042f46 <finite>:
 8042f46:	ee10 3a90 	vmov	r3, s1
 8042f4a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8042f4e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8042f52:	0fc0      	lsrs	r0, r0, #31
 8042f54:	4770      	bx	lr

08042f56 <matherr>:
 8042f56:	2000      	movs	r0, #0
 8042f58:	4770      	bx	lr
 8042f5a:	0000      	movs	r0, r0
 8042f5c:	0000      	movs	r0, r0
	...

08042f60 <nan>:
 8042f60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8042f68 <nan+0x8>
 8042f64:	4770      	bx	lr
 8042f66:	bf00      	nop
 8042f68:	00000000 	.word	0x00000000
 8042f6c:	7ff80000 	.word	0x7ff80000

08042f70 <rint>:
 8042f70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8042f72:	ec51 0b10 	vmov	r0, r1, d0
 8042f76:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8042f7a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8042f7e:	2e13      	cmp	r6, #19
 8042f80:	460b      	mov	r3, r1
 8042f82:	ee10 4a10 	vmov	r4, s0
 8042f86:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8042f8a:	dc56      	bgt.n	804303a <rint+0xca>
 8042f8c:	2e00      	cmp	r6, #0
 8042f8e:	da2b      	bge.n	8042fe8 <rint+0x78>
 8042f90:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8042f94:	4302      	orrs	r2, r0
 8042f96:	d023      	beq.n	8042fe0 <rint+0x70>
 8042f98:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8042f9c:	4302      	orrs	r2, r0
 8042f9e:	4254      	negs	r4, r2
 8042fa0:	4314      	orrs	r4, r2
 8042fa2:	0c4b      	lsrs	r3, r1, #17
 8042fa4:	0b24      	lsrs	r4, r4, #12
 8042fa6:	045b      	lsls	r3, r3, #17
 8042fa8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8042fac:	ea44 0103 	orr.w	r1, r4, r3
 8042fb0:	460b      	mov	r3, r1
 8042fb2:	492f      	ldr	r1, [pc, #188]	; (8043070 <rint+0x100>)
 8042fb4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8042fb8:	e9d1 6700 	ldrd	r6, r7, [r1]
 8042fbc:	4602      	mov	r2, r0
 8042fbe:	4639      	mov	r1, r7
 8042fc0:	4630      	mov	r0, r6
 8042fc2:	f7dd f99b 	bl	80202fc <__adddf3>
 8042fc6:	e9cd 0100 	strd	r0, r1, [sp]
 8042fca:	463b      	mov	r3, r7
 8042fcc:	4632      	mov	r2, r6
 8042fce:	e9dd 0100 	ldrd	r0, r1, [sp]
 8042fd2:	f7dd f991 	bl	80202f8 <__aeabi_dsub>
 8042fd6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8042fda:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8042fde:	4639      	mov	r1, r7
 8042fe0:	ec41 0b10 	vmov	d0, r0, r1
 8042fe4:	b003      	add	sp, #12
 8042fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8042fe8:	4a22      	ldr	r2, [pc, #136]	; (8043074 <rint+0x104>)
 8042fea:	4132      	asrs	r2, r6
 8042fec:	ea01 0702 	and.w	r7, r1, r2
 8042ff0:	4307      	orrs	r7, r0
 8042ff2:	d0f5      	beq.n	8042fe0 <rint+0x70>
 8042ff4:	0852      	lsrs	r2, r2, #1
 8042ff6:	4011      	ands	r1, r2
 8042ff8:	430c      	orrs	r4, r1
 8042ffa:	d00b      	beq.n	8043014 <rint+0xa4>
 8042ffc:	ea23 0202 	bic.w	r2, r3, r2
 8043000:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8043004:	2e13      	cmp	r6, #19
 8043006:	fa43 f306 	asr.w	r3, r3, r6
 804300a:	bf0c      	ite	eq
 804300c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8043010:	2400      	movne	r4, #0
 8043012:	4313      	orrs	r3, r2
 8043014:	4916      	ldr	r1, [pc, #88]	; (8043070 <rint+0x100>)
 8043016:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 804301a:	4622      	mov	r2, r4
 804301c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8043020:	4620      	mov	r0, r4
 8043022:	4629      	mov	r1, r5
 8043024:	f7dd f96a 	bl	80202fc <__adddf3>
 8043028:	e9cd 0100 	strd	r0, r1, [sp]
 804302c:	4622      	mov	r2, r4
 804302e:	462b      	mov	r3, r5
 8043030:	e9dd 0100 	ldrd	r0, r1, [sp]
 8043034:	f7dd f960 	bl	80202f8 <__aeabi_dsub>
 8043038:	e7d2      	b.n	8042fe0 <rint+0x70>
 804303a:	2e33      	cmp	r6, #51	; 0x33
 804303c:	dd07      	ble.n	804304e <rint+0xde>
 804303e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8043042:	d1cd      	bne.n	8042fe0 <rint+0x70>
 8043044:	ee10 2a10 	vmov	r2, s0
 8043048:	f7dd f958 	bl	80202fc <__adddf3>
 804304c:	e7c8      	b.n	8042fe0 <rint+0x70>
 804304e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8043052:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8043056:	40f2      	lsrs	r2, r6
 8043058:	4210      	tst	r0, r2
 804305a:	d0c1      	beq.n	8042fe0 <rint+0x70>
 804305c:	0852      	lsrs	r2, r2, #1
 804305e:	4210      	tst	r0, r2
 8043060:	bf1f      	itttt	ne
 8043062:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8043066:	ea20 0202 	bicne.w	r2, r0, r2
 804306a:	4134      	asrne	r4, r6
 804306c:	4314      	orrne	r4, r2
 804306e:	e7d1      	b.n	8043014 <rint+0xa4>
 8043070:	08056630 	.word	0x08056630
 8043074:	000fffff 	.word	0x000fffff

08043078 <scalbn>:
 8043078:	b570      	push	{r4, r5, r6, lr}
 804307a:	ec55 4b10 	vmov	r4, r5, d0
 804307e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8043082:	4606      	mov	r6, r0
 8043084:	462b      	mov	r3, r5
 8043086:	b9aa      	cbnz	r2, 80430b4 <scalbn+0x3c>
 8043088:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 804308c:	4323      	orrs	r3, r4
 804308e:	d03b      	beq.n	8043108 <scalbn+0x90>
 8043090:	4b31      	ldr	r3, [pc, #196]	; (8043158 <scalbn+0xe0>)
 8043092:	4629      	mov	r1, r5
 8043094:	2200      	movs	r2, #0
 8043096:	ee10 0a10 	vmov	r0, s0
 804309a:	f7dd fae5 	bl	8020668 <__aeabi_dmul>
 804309e:	4b2f      	ldr	r3, [pc, #188]	; (804315c <scalbn+0xe4>)
 80430a0:	429e      	cmp	r6, r3
 80430a2:	4604      	mov	r4, r0
 80430a4:	460d      	mov	r5, r1
 80430a6:	da12      	bge.n	80430ce <scalbn+0x56>
 80430a8:	a327      	add	r3, pc, #156	; (adr r3, 8043148 <scalbn+0xd0>)
 80430aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80430ae:	f7dd fadb 	bl	8020668 <__aeabi_dmul>
 80430b2:	e009      	b.n	80430c8 <scalbn+0x50>
 80430b4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80430b8:	428a      	cmp	r2, r1
 80430ba:	d10c      	bne.n	80430d6 <scalbn+0x5e>
 80430bc:	ee10 2a10 	vmov	r2, s0
 80430c0:	4620      	mov	r0, r4
 80430c2:	4629      	mov	r1, r5
 80430c4:	f7dd f91a 	bl	80202fc <__adddf3>
 80430c8:	4604      	mov	r4, r0
 80430ca:	460d      	mov	r5, r1
 80430cc:	e01c      	b.n	8043108 <scalbn+0x90>
 80430ce:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80430d2:	460b      	mov	r3, r1
 80430d4:	3a36      	subs	r2, #54	; 0x36
 80430d6:	4432      	add	r2, r6
 80430d8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80430dc:	428a      	cmp	r2, r1
 80430de:	dd0b      	ble.n	80430f8 <scalbn+0x80>
 80430e0:	ec45 4b11 	vmov	d1, r4, r5
 80430e4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8043150 <scalbn+0xd8>
 80430e8:	f000 f9f0 	bl	80434cc <copysign>
 80430ec:	a318      	add	r3, pc, #96	; (adr r3, 8043150 <scalbn+0xd8>)
 80430ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80430f2:	ec51 0b10 	vmov	r0, r1, d0
 80430f6:	e7da      	b.n	80430ae <scalbn+0x36>
 80430f8:	2a00      	cmp	r2, #0
 80430fa:	dd08      	ble.n	804310e <scalbn+0x96>
 80430fc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8043100:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8043104:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8043108:	ec45 4b10 	vmov	d0, r4, r5
 804310c:	bd70      	pop	{r4, r5, r6, pc}
 804310e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8043112:	da0d      	bge.n	8043130 <scalbn+0xb8>
 8043114:	f24c 3350 	movw	r3, #50000	; 0xc350
 8043118:	429e      	cmp	r6, r3
 804311a:	ec45 4b11 	vmov	d1, r4, r5
 804311e:	dce1      	bgt.n	80430e4 <scalbn+0x6c>
 8043120:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8043148 <scalbn+0xd0>
 8043124:	f000 f9d2 	bl	80434cc <copysign>
 8043128:	a307      	add	r3, pc, #28	; (adr r3, 8043148 <scalbn+0xd0>)
 804312a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804312e:	e7e0      	b.n	80430f2 <scalbn+0x7a>
 8043130:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8043134:	3236      	adds	r2, #54	; 0x36
 8043136:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 804313a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 804313e:	4620      	mov	r0, r4
 8043140:	4629      	mov	r1, r5
 8043142:	2200      	movs	r2, #0
 8043144:	4b06      	ldr	r3, [pc, #24]	; (8043160 <scalbn+0xe8>)
 8043146:	e7b2      	b.n	80430ae <scalbn+0x36>
 8043148:	c2f8f359 	.word	0xc2f8f359
 804314c:	01a56e1f 	.word	0x01a56e1f
 8043150:	8800759c 	.word	0x8800759c
 8043154:	7e37e43c 	.word	0x7e37e43c
 8043158:	43500000 	.word	0x43500000
 804315c:	ffff3cb0 	.word	0xffff3cb0
 8043160:	3c900000 	.word	0x3c900000
 8043164:	00000000 	.word	0x00000000

08043168 <__ieee754_log>:
 8043168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804316c:	ec51 0b10 	vmov	r0, r1, d0
 8043170:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8043174:	b087      	sub	sp, #28
 8043176:	460d      	mov	r5, r1
 8043178:	da27      	bge.n	80431ca <__ieee754_log+0x62>
 804317a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 804317e:	4303      	orrs	r3, r0
 8043180:	ee10 2a10 	vmov	r2, s0
 8043184:	d10a      	bne.n	804319c <__ieee754_log+0x34>
 8043186:	49cc      	ldr	r1, [pc, #816]	; (80434b8 <__ieee754_log+0x350>)
 8043188:	2200      	movs	r2, #0
 804318a:	2300      	movs	r3, #0
 804318c:	2000      	movs	r0, #0
 804318e:	f7dd fb95 	bl	80208bc <__aeabi_ddiv>
 8043192:	ec41 0b10 	vmov	d0, r0, r1
 8043196:	b007      	add	sp, #28
 8043198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804319c:	2900      	cmp	r1, #0
 804319e:	da05      	bge.n	80431ac <__ieee754_log+0x44>
 80431a0:	460b      	mov	r3, r1
 80431a2:	f7dd f8a9 	bl	80202f8 <__aeabi_dsub>
 80431a6:	2200      	movs	r2, #0
 80431a8:	2300      	movs	r3, #0
 80431aa:	e7f0      	b.n	804318e <__ieee754_log+0x26>
 80431ac:	4bc3      	ldr	r3, [pc, #780]	; (80434bc <__ieee754_log+0x354>)
 80431ae:	2200      	movs	r2, #0
 80431b0:	f7dd fa5a 	bl	8020668 <__aeabi_dmul>
 80431b4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80431b8:	460d      	mov	r5, r1
 80431ba:	4ac1      	ldr	r2, [pc, #772]	; (80434c0 <__ieee754_log+0x358>)
 80431bc:	4295      	cmp	r5, r2
 80431be:	dd06      	ble.n	80431ce <__ieee754_log+0x66>
 80431c0:	4602      	mov	r2, r0
 80431c2:	460b      	mov	r3, r1
 80431c4:	f7dd f89a 	bl	80202fc <__adddf3>
 80431c8:	e7e3      	b.n	8043192 <__ieee754_log+0x2a>
 80431ca:	2300      	movs	r3, #0
 80431cc:	e7f5      	b.n	80431ba <__ieee754_log+0x52>
 80431ce:	152c      	asrs	r4, r5, #20
 80431d0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80431d4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80431d8:	441c      	add	r4, r3
 80431da:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80431de:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80431e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80431e6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80431ea:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80431ee:	ea42 0105 	orr.w	r1, r2, r5
 80431f2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80431f6:	2200      	movs	r2, #0
 80431f8:	4bb2      	ldr	r3, [pc, #712]	; (80434c4 <__ieee754_log+0x35c>)
 80431fa:	f7dd f87d 	bl	80202f8 <__aeabi_dsub>
 80431fe:	1cab      	adds	r3, r5, #2
 8043200:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8043204:	2b02      	cmp	r3, #2
 8043206:	4682      	mov	sl, r0
 8043208:	468b      	mov	fp, r1
 804320a:	f04f 0200 	mov.w	r2, #0
 804320e:	dc53      	bgt.n	80432b8 <__ieee754_log+0x150>
 8043210:	2300      	movs	r3, #0
 8043212:	f7dd fc91 	bl	8020b38 <__aeabi_dcmpeq>
 8043216:	b1d0      	cbz	r0, 804324e <__ieee754_log+0xe6>
 8043218:	2c00      	cmp	r4, #0
 804321a:	f000 8120 	beq.w	804345e <__ieee754_log+0x2f6>
 804321e:	4620      	mov	r0, r4
 8043220:	f7dd f9b8 	bl	8020594 <__aeabi_i2d>
 8043224:	a390      	add	r3, pc, #576	; (adr r3, 8043468 <__ieee754_log+0x300>)
 8043226:	e9d3 2300 	ldrd	r2, r3, [r3]
 804322a:	4606      	mov	r6, r0
 804322c:	460f      	mov	r7, r1
 804322e:	f7dd fa1b 	bl	8020668 <__aeabi_dmul>
 8043232:	a38f      	add	r3, pc, #572	; (adr r3, 8043470 <__ieee754_log+0x308>)
 8043234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043238:	4604      	mov	r4, r0
 804323a:	460d      	mov	r5, r1
 804323c:	4630      	mov	r0, r6
 804323e:	4639      	mov	r1, r7
 8043240:	f7dd fa12 	bl	8020668 <__aeabi_dmul>
 8043244:	4602      	mov	r2, r0
 8043246:	460b      	mov	r3, r1
 8043248:	4620      	mov	r0, r4
 804324a:	4629      	mov	r1, r5
 804324c:	e7ba      	b.n	80431c4 <__ieee754_log+0x5c>
 804324e:	a38a      	add	r3, pc, #552	; (adr r3, 8043478 <__ieee754_log+0x310>)
 8043250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043254:	4650      	mov	r0, sl
 8043256:	4659      	mov	r1, fp
 8043258:	f7dd fa06 	bl	8020668 <__aeabi_dmul>
 804325c:	4602      	mov	r2, r0
 804325e:	460b      	mov	r3, r1
 8043260:	2000      	movs	r0, #0
 8043262:	4999      	ldr	r1, [pc, #612]	; (80434c8 <__ieee754_log+0x360>)
 8043264:	f7dd f848 	bl	80202f8 <__aeabi_dsub>
 8043268:	4652      	mov	r2, sl
 804326a:	4606      	mov	r6, r0
 804326c:	460f      	mov	r7, r1
 804326e:	465b      	mov	r3, fp
 8043270:	4650      	mov	r0, sl
 8043272:	4659      	mov	r1, fp
 8043274:	f7dd f9f8 	bl	8020668 <__aeabi_dmul>
 8043278:	4602      	mov	r2, r0
 804327a:	460b      	mov	r3, r1
 804327c:	4630      	mov	r0, r6
 804327e:	4639      	mov	r1, r7
 8043280:	f7dd f9f2 	bl	8020668 <__aeabi_dmul>
 8043284:	4606      	mov	r6, r0
 8043286:	460f      	mov	r7, r1
 8043288:	b914      	cbnz	r4, 8043290 <__ieee754_log+0x128>
 804328a:	4632      	mov	r2, r6
 804328c:	463b      	mov	r3, r7
 804328e:	e0a0      	b.n	80433d2 <__ieee754_log+0x26a>
 8043290:	4620      	mov	r0, r4
 8043292:	f7dd f97f 	bl	8020594 <__aeabi_i2d>
 8043296:	a374      	add	r3, pc, #464	; (adr r3, 8043468 <__ieee754_log+0x300>)
 8043298:	e9d3 2300 	ldrd	r2, r3, [r3]
 804329c:	4680      	mov	r8, r0
 804329e:	4689      	mov	r9, r1
 80432a0:	f7dd f9e2 	bl	8020668 <__aeabi_dmul>
 80432a4:	a372      	add	r3, pc, #456	; (adr r3, 8043470 <__ieee754_log+0x308>)
 80432a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80432aa:	4604      	mov	r4, r0
 80432ac:	460d      	mov	r5, r1
 80432ae:	4640      	mov	r0, r8
 80432b0:	4649      	mov	r1, r9
 80432b2:	f7dd f9d9 	bl	8020668 <__aeabi_dmul>
 80432b6:	e0a5      	b.n	8043404 <__ieee754_log+0x29c>
 80432b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80432bc:	f7dd f81e 	bl	80202fc <__adddf3>
 80432c0:	4602      	mov	r2, r0
 80432c2:	460b      	mov	r3, r1
 80432c4:	4650      	mov	r0, sl
 80432c6:	4659      	mov	r1, fp
 80432c8:	f7dd faf8 	bl	80208bc <__aeabi_ddiv>
 80432cc:	e9cd 0100 	strd	r0, r1, [sp]
 80432d0:	4620      	mov	r0, r4
 80432d2:	f7dd f95f 	bl	8020594 <__aeabi_i2d>
 80432d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80432da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80432de:	4610      	mov	r0, r2
 80432e0:	4619      	mov	r1, r3
 80432e2:	f7dd f9c1 	bl	8020668 <__aeabi_dmul>
 80432e6:	4602      	mov	r2, r0
 80432e8:	460b      	mov	r3, r1
 80432ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80432ee:	f7dd f9bb 	bl	8020668 <__aeabi_dmul>
 80432f2:	a363      	add	r3, pc, #396	; (adr r3, 8043480 <__ieee754_log+0x318>)
 80432f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80432f8:	4680      	mov	r8, r0
 80432fa:	4689      	mov	r9, r1
 80432fc:	f7dd f9b4 	bl	8020668 <__aeabi_dmul>
 8043300:	a361      	add	r3, pc, #388	; (adr r3, 8043488 <__ieee754_log+0x320>)
 8043302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043306:	f7dc fff9 	bl	80202fc <__adddf3>
 804330a:	4642      	mov	r2, r8
 804330c:	464b      	mov	r3, r9
 804330e:	f7dd f9ab 	bl	8020668 <__aeabi_dmul>
 8043312:	a35f      	add	r3, pc, #380	; (adr r3, 8043490 <__ieee754_log+0x328>)
 8043314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043318:	f7dc fff0 	bl	80202fc <__adddf3>
 804331c:	4642      	mov	r2, r8
 804331e:	464b      	mov	r3, r9
 8043320:	f7dd f9a2 	bl	8020668 <__aeabi_dmul>
 8043324:	a35c      	add	r3, pc, #368	; (adr r3, 8043498 <__ieee754_log+0x330>)
 8043326:	e9d3 2300 	ldrd	r2, r3, [r3]
 804332a:	f7dc ffe7 	bl	80202fc <__adddf3>
 804332e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8043332:	f7dd f999 	bl	8020668 <__aeabi_dmul>
 8043336:	a35a      	add	r3, pc, #360	; (adr r3, 80434a0 <__ieee754_log+0x338>)
 8043338:	e9d3 2300 	ldrd	r2, r3, [r3]
 804333c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8043340:	4640      	mov	r0, r8
 8043342:	4649      	mov	r1, r9
 8043344:	f7dd f990 	bl	8020668 <__aeabi_dmul>
 8043348:	a357      	add	r3, pc, #348	; (adr r3, 80434a8 <__ieee754_log+0x340>)
 804334a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804334e:	f7dc ffd5 	bl	80202fc <__adddf3>
 8043352:	4642      	mov	r2, r8
 8043354:	464b      	mov	r3, r9
 8043356:	f7dd f987 	bl	8020668 <__aeabi_dmul>
 804335a:	a355      	add	r3, pc, #340	; (adr r3, 80434b0 <__ieee754_log+0x348>)
 804335c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043360:	f7dc ffcc 	bl	80202fc <__adddf3>
 8043364:	4642      	mov	r2, r8
 8043366:	464b      	mov	r3, r9
 8043368:	f7dd f97e 	bl	8020668 <__aeabi_dmul>
 804336c:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8043370:	4602      	mov	r2, r0
 8043372:	460b      	mov	r3, r1
 8043374:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8043378:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 804337c:	f7dc ffbe 	bl	80202fc <__adddf3>
 8043380:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 8043384:	3551      	adds	r5, #81	; 0x51
 8043386:	4335      	orrs	r5, r6
 8043388:	2d00      	cmp	r5, #0
 804338a:	4680      	mov	r8, r0
 804338c:	4689      	mov	r9, r1
 804338e:	dd48      	ble.n	8043422 <__ieee754_log+0x2ba>
 8043390:	2200      	movs	r2, #0
 8043392:	4b4d      	ldr	r3, [pc, #308]	; (80434c8 <__ieee754_log+0x360>)
 8043394:	4650      	mov	r0, sl
 8043396:	4659      	mov	r1, fp
 8043398:	f7dd f966 	bl	8020668 <__aeabi_dmul>
 804339c:	4652      	mov	r2, sl
 804339e:	465b      	mov	r3, fp
 80433a0:	f7dd f962 	bl	8020668 <__aeabi_dmul>
 80433a4:	4602      	mov	r2, r0
 80433a6:	460b      	mov	r3, r1
 80433a8:	4606      	mov	r6, r0
 80433aa:	460f      	mov	r7, r1
 80433ac:	4640      	mov	r0, r8
 80433ae:	4649      	mov	r1, r9
 80433b0:	f7dc ffa4 	bl	80202fc <__adddf3>
 80433b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80433b8:	f7dd f956 	bl	8020668 <__aeabi_dmul>
 80433bc:	4680      	mov	r8, r0
 80433be:	4689      	mov	r9, r1
 80433c0:	b964      	cbnz	r4, 80433dc <__ieee754_log+0x274>
 80433c2:	4602      	mov	r2, r0
 80433c4:	460b      	mov	r3, r1
 80433c6:	4630      	mov	r0, r6
 80433c8:	4639      	mov	r1, r7
 80433ca:	f7dc ff95 	bl	80202f8 <__aeabi_dsub>
 80433ce:	4602      	mov	r2, r0
 80433d0:	460b      	mov	r3, r1
 80433d2:	4650      	mov	r0, sl
 80433d4:	4659      	mov	r1, fp
 80433d6:	f7dc ff8f 	bl	80202f8 <__aeabi_dsub>
 80433da:	e6da      	b.n	8043192 <__ieee754_log+0x2a>
 80433dc:	a322      	add	r3, pc, #136	; (adr r3, 8043468 <__ieee754_log+0x300>)
 80433de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80433e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80433e6:	f7dd f93f 	bl	8020668 <__aeabi_dmul>
 80433ea:	a321      	add	r3, pc, #132	; (adr r3, 8043470 <__ieee754_log+0x308>)
 80433ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80433f0:	4604      	mov	r4, r0
 80433f2:	460d      	mov	r5, r1
 80433f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80433f8:	f7dd f936 	bl	8020668 <__aeabi_dmul>
 80433fc:	4642      	mov	r2, r8
 80433fe:	464b      	mov	r3, r9
 8043400:	f7dc ff7c 	bl	80202fc <__adddf3>
 8043404:	4602      	mov	r2, r0
 8043406:	460b      	mov	r3, r1
 8043408:	4630      	mov	r0, r6
 804340a:	4639      	mov	r1, r7
 804340c:	f7dc ff74 	bl	80202f8 <__aeabi_dsub>
 8043410:	4652      	mov	r2, sl
 8043412:	465b      	mov	r3, fp
 8043414:	f7dc ff70 	bl	80202f8 <__aeabi_dsub>
 8043418:	4602      	mov	r2, r0
 804341a:	460b      	mov	r3, r1
 804341c:	4620      	mov	r0, r4
 804341e:	4629      	mov	r1, r5
 8043420:	e7d9      	b.n	80433d6 <__ieee754_log+0x26e>
 8043422:	4602      	mov	r2, r0
 8043424:	460b      	mov	r3, r1
 8043426:	4650      	mov	r0, sl
 8043428:	4659      	mov	r1, fp
 804342a:	f7dc ff65 	bl	80202f8 <__aeabi_dsub>
 804342e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8043432:	f7dd f919 	bl	8020668 <__aeabi_dmul>
 8043436:	4606      	mov	r6, r0
 8043438:	460f      	mov	r7, r1
 804343a:	2c00      	cmp	r4, #0
 804343c:	f43f af25 	beq.w	804328a <__ieee754_log+0x122>
 8043440:	a309      	add	r3, pc, #36	; (adr r3, 8043468 <__ieee754_log+0x300>)
 8043442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043446:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 804344a:	f7dd f90d 	bl	8020668 <__aeabi_dmul>
 804344e:	a308      	add	r3, pc, #32	; (adr r3, 8043470 <__ieee754_log+0x308>)
 8043450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043454:	4604      	mov	r4, r0
 8043456:	460d      	mov	r5, r1
 8043458:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 804345c:	e729      	b.n	80432b2 <__ieee754_log+0x14a>
 804345e:	2000      	movs	r0, #0
 8043460:	2100      	movs	r1, #0
 8043462:	e696      	b.n	8043192 <__ieee754_log+0x2a>
 8043464:	f3af 8000 	nop.w
 8043468:	fee00000 	.word	0xfee00000
 804346c:	3fe62e42 	.word	0x3fe62e42
 8043470:	35793c76 	.word	0x35793c76
 8043474:	3dea39ef 	.word	0x3dea39ef
 8043478:	55555555 	.word	0x55555555
 804347c:	3fd55555 	.word	0x3fd55555
 8043480:	df3e5244 	.word	0xdf3e5244
 8043484:	3fc2f112 	.word	0x3fc2f112
 8043488:	96cb03de 	.word	0x96cb03de
 804348c:	3fc74664 	.word	0x3fc74664
 8043490:	94229359 	.word	0x94229359
 8043494:	3fd24924 	.word	0x3fd24924
 8043498:	55555593 	.word	0x55555593
 804349c:	3fe55555 	.word	0x3fe55555
 80434a0:	d078c69f 	.word	0xd078c69f
 80434a4:	3fc39a09 	.word	0x3fc39a09
 80434a8:	1d8e78af 	.word	0x1d8e78af
 80434ac:	3fcc71c5 	.word	0x3fcc71c5
 80434b0:	9997fa04 	.word	0x9997fa04
 80434b4:	3fd99999 	.word	0x3fd99999
 80434b8:	c3500000 	.word	0xc3500000
 80434bc:	43500000 	.word	0x43500000
 80434c0:	7fefffff 	.word	0x7fefffff
 80434c4:	3ff00000 	.word	0x3ff00000
 80434c8:	3fe00000 	.word	0x3fe00000

080434cc <copysign>:
 80434cc:	ec51 0b10 	vmov	r0, r1, d0
 80434d0:	ee11 0a90 	vmov	r0, s3
 80434d4:	ee10 2a10 	vmov	r2, s0
 80434d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80434dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80434e0:	ea41 0300 	orr.w	r3, r1, r0
 80434e4:	ec43 2b10 	vmov	d0, r2, r3
 80434e8:	4770      	bx	lr
	...

080434ec <_init>:
 80434ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80434ee:	bf00      	nop
 80434f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80434f2:	bc08      	pop	{r3}
 80434f4:	469e      	mov	lr, r3
 80434f6:	4770      	bx	lr

080434f8 <_fini>:
 80434f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80434fa:	bf00      	nop
 80434fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80434fe:	bc08      	pop	{r3}
 8043500:	469e      	mov	lr, r3
 8043502:	4770      	bx	lr
