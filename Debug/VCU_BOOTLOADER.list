
VCU_BOOTLOADER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a254  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000081c  0800a434  0800a434  0001a434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac50  0800ac50  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac50  0800ac50  0001ac50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac58  0800ac58  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac58  0800ac58  0001ac58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac5c  0800ac5c  0001ac5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800ac60  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b58  20000200  0800ae60  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d58  0800ae60  00020d58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a8d  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a8c  00000000  00000000  00037cbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fa8  00000000  00000000  0003b750  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e10  00000000  00000000  0003c6f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002458e  00000000  00000000  0003d508  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011f11  00000000  00000000  00061a96  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb30e  00000000  00000000  000739a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013ecb5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004434  00000000  00000000  0013ed30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000200 	.word	0x20000200
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a41c 	.word	0x0800a41c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000204 	.word	0x20000204
 800021c:	0800a41c 	.word	0x0800a41c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800042e:	f1a4 0401 	sub.w	r4, r4, #1
 8000432:	d1e9      	bne.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__aeabi_d2uiz>:
 8000a8c:	004a      	lsls	r2, r1, #1
 8000a8e:	d211      	bcs.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a94:	d211      	bcs.n	8000aba <__aeabi_d2uiz+0x2e>
 8000a96:	d50d      	bpl.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa0:	d40e      	bmi.n	8000ac0 <__aeabi_d2uiz+0x34>
 8000aa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aae:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d102      	bne.n	8000ac6 <__aeabi_d2uiz+0x3a>
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac4:	4770      	bx	lr
 8000ac6:	f04f 0000 	mov.w	r0, #0
 8000aca:	4770      	bx	lr

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b80:	f000 b972 	b.w	8000e68 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9e08      	ldr	r6, [sp, #32]
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	4688      	mov	r8, r1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d14b      	bne.n	8000c42 <__udivmoddi4+0xa6>
 8000baa:	428a      	cmp	r2, r1
 8000bac:	4615      	mov	r5, r2
 8000bae:	d967      	bls.n	8000c80 <__udivmoddi4+0xe4>
 8000bb0:	fab2 f282 	clz	r2, r2
 8000bb4:	b14a      	cbz	r2, 8000bca <__udivmoddi4+0x2e>
 8000bb6:	f1c2 0720 	rsb	r7, r2, #32
 8000bba:	fa01 f302 	lsl.w	r3, r1, r2
 8000bbe:	fa20 f707 	lsr.w	r7, r0, r7
 8000bc2:	4095      	lsls	r5, r2
 8000bc4:	ea47 0803 	orr.w	r8, r7, r3
 8000bc8:	4094      	lsls	r4, r2
 8000bca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bce:	0c23      	lsrs	r3, r4, #16
 8000bd0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bd4:	fa1f fc85 	uxth.w	ip, r5
 8000bd8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bdc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000be0:	fb07 f10c 	mul.w	r1, r7, ip
 8000be4:	4299      	cmp	r1, r3
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x60>
 8000be8:	18eb      	adds	r3, r5, r3
 8000bea:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000bee:	f080 811b 	bcs.w	8000e28 <__udivmoddi4+0x28c>
 8000bf2:	4299      	cmp	r1, r3
 8000bf4:	f240 8118 	bls.w	8000e28 <__udivmoddi4+0x28c>
 8000bf8:	3f02      	subs	r7, #2
 8000bfa:	442b      	add	r3, r5
 8000bfc:	1a5b      	subs	r3, r3, r1
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c04:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c0c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c10:	45a4      	cmp	ip, r4
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x8c>
 8000c14:	192c      	adds	r4, r5, r4
 8000c16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c1a:	f080 8107 	bcs.w	8000e2c <__udivmoddi4+0x290>
 8000c1e:	45a4      	cmp	ip, r4
 8000c20:	f240 8104 	bls.w	8000e2c <__udivmoddi4+0x290>
 8000c24:	3802      	subs	r0, #2
 8000c26:	442c      	add	r4, r5
 8000c28:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c2c:	eba4 040c 	sub.w	r4, r4, ip
 8000c30:	2700      	movs	r7, #0
 8000c32:	b11e      	cbz	r6, 8000c3c <__udivmoddi4+0xa0>
 8000c34:	40d4      	lsrs	r4, r2
 8000c36:	2300      	movs	r3, #0
 8000c38:	e9c6 4300 	strd	r4, r3, [r6]
 8000c3c:	4639      	mov	r1, r7
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d909      	bls.n	8000c5a <__udivmoddi4+0xbe>
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	f000 80eb 	beq.w	8000e22 <__udivmoddi4+0x286>
 8000c4c:	2700      	movs	r7, #0
 8000c4e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c52:	4638      	mov	r0, r7
 8000c54:	4639      	mov	r1, r7
 8000c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5a:	fab3 f783 	clz	r7, r3
 8000c5e:	2f00      	cmp	r7, #0
 8000c60:	d147      	bne.n	8000cf2 <__udivmoddi4+0x156>
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d302      	bcc.n	8000c6c <__udivmoddi4+0xd0>
 8000c66:	4282      	cmp	r2, r0
 8000c68:	f200 80fa 	bhi.w	8000e60 <__udivmoddi4+0x2c4>
 8000c6c:	1a84      	subs	r4, r0, r2
 8000c6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c72:	2001      	movs	r0, #1
 8000c74:	4698      	mov	r8, r3
 8000c76:	2e00      	cmp	r6, #0
 8000c78:	d0e0      	beq.n	8000c3c <__udivmoddi4+0xa0>
 8000c7a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c7e:	e7dd      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000c80:	b902      	cbnz	r2, 8000c84 <__udivmoddi4+0xe8>
 8000c82:	deff      	udf	#255	; 0xff
 8000c84:	fab2 f282 	clz	r2, r2
 8000c88:	2a00      	cmp	r2, #0
 8000c8a:	f040 808f 	bne.w	8000dac <__udivmoddi4+0x210>
 8000c8e:	1b49      	subs	r1, r1, r5
 8000c90:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c94:	fa1f f885 	uxth.w	r8, r5
 8000c98:	2701      	movs	r7, #1
 8000c9a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c9e:	0c23      	lsrs	r3, r4, #16
 8000ca0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ca4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca8:	fb08 f10c 	mul.w	r1, r8, ip
 8000cac:	4299      	cmp	r1, r3
 8000cae:	d907      	bls.n	8000cc0 <__udivmoddi4+0x124>
 8000cb0:	18eb      	adds	r3, r5, r3
 8000cb2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0x122>
 8000cb8:	4299      	cmp	r1, r3
 8000cba:	f200 80cd 	bhi.w	8000e58 <__udivmoddi4+0x2bc>
 8000cbe:	4684      	mov	ip, r0
 8000cc0:	1a59      	subs	r1, r3, r1
 8000cc2:	b2a3      	uxth	r3, r4
 8000cc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ccc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cd0:	fb08 f800 	mul.w	r8, r8, r0
 8000cd4:	45a0      	cmp	r8, r4
 8000cd6:	d907      	bls.n	8000ce8 <__udivmoddi4+0x14c>
 8000cd8:	192c      	adds	r4, r5, r4
 8000cda:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cde:	d202      	bcs.n	8000ce6 <__udivmoddi4+0x14a>
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	f200 80b6 	bhi.w	8000e52 <__udivmoddi4+0x2b6>
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	eba4 0408 	sub.w	r4, r4, r8
 8000cec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cf0:	e79f      	b.n	8000c32 <__udivmoddi4+0x96>
 8000cf2:	f1c7 0c20 	rsb	ip, r7, #32
 8000cf6:	40bb      	lsls	r3, r7
 8000cf8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cfc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d00:	fa01 f407 	lsl.w	r4, r1, r7
 8000d04:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d08:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d0c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d10:	4325      	orrs	r5, r4
 8000d12:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d16:	0c2c      	lsrs	r4, r5, #16
 8000d18:	fb08 3319 	mls	r3, r8, r9, r3
 8000d1c:	fa1f fa8e 	uxth.w	sl, lr
 8000d20:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d24:	fb09 f40a 	mul.w	r4, r9, sl
 8000d28:	429c      	cmp	r4, r3
 8000d2a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d2e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d32:	d90b      	bls.n	8000d4c <__udivmoddi4+0x1b0>
 8000d34:	eb1e 0303 	adds.w	r3, lr, r3
 8000d38:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d3c:	f080 8087 	bcs.w	8000e4e <__udivmoddi4+0x2b2>
 8000d40:	429c      	cmp	r4, r3
 8000d42:	f240 8084 	bls.w	8000e4e <__udivmoddi4+0x2b2>
 8000d46:	f1a9 0902 	sub.w	r9, r9, #2
 8000d4a:	4473      	add	r3, lr
 8000d4c:	1b1b      	subs	r3, r3, r4
 8000d4e:	b2ad      	uxth	r5, r5
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3310 	mls	r3, r8, r0, r3
 8000d58:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d5c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d60:	45a2      	cmp	sl, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x1da>
 8000d64:	eb1e 0404 	adds.w	r4, lr, r4
 8000d68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d6c:	d26b      	bcs.n	8000e46 <__udivmoddi4+0x2aa>
 8000d6e:	45a2      	cmp	sl, r4
 8000d70:	d969      	bls.n	8000e46 <__udivmoddi4+0x2aa>
 8000d72:	3802      	subs	r0, #2
 8000d74:	4474      	add	r4, lr
 8000d76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d7e:	eba4 040a 	sub.w	r4, r4, sl
 8000d82:	454c      	cmp	r4, r9
 8000d84:	46c2      	mov	sl, r8
 8000d86:	464b      	mov	r3, r9
 8000d88:	d354      	bcc.n	8000e34 <__udivmoddi4+0x298>
 8000d8a:	d051      	beq.n	8000e30 <__udivmoddi4+0x294>
 8000d8c:	2e00      	cmp	r6, #0
 8000d8e:	d069      	beq.n	8000e64 <__udivmoddi4+0x2c8>
 8000d90:	ebb1 050a 	subs.w	r5, r1, sl
 8000d94:	eb64 0403 	sbc.w	r4, r4, r3
 8000d98:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d9c:	40fd      	lsrs	r5, r7
 8000d9e:	40fc      	lsrs	r4, r7
 8000da0:	ea4c 0505 	orr.w	r5, ip, r5
 8000da4:	e9c6 5400 	strd	r5, r4, [r6]
 8000da8:	2700      	movs	r7, #0
 8000daa:	e747      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000dac:	f1c2 0320 	rsb	r3, r2, #32
 8000db0:	fa20 f703 	lsr.w	r7, r0, r3
 8000db4:	4095      	lsls	r5, r2
 8000db6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dba:	fa21 f303 	lsr.w	r3, r1, r3
 8000dbe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc2:	4338      	orrs	r0, r7
 8000dc4:	0c01      	lsrs	r1, r0, #16
 8000dc6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dca:	fa1f f885 	uxth.w	r8, r5
 8000dce:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd6:	fb07 f308 	mul.w	r3, r7, r8
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	fa04 f402 	lsl.w	r4, r4, r2
 8000de0:	d907      	bls.n	8000df2 <__udivmoddi4+0x256>
 8000de2:	1869      	adds	r1, r5, r1
 8000de4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000de8:	d22f      	bcs.n	8000e4a <__udivmoddi4+0x2ae>
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d92d      	bls.n	8000e4a <__udivmoddi4+0x2ae>
 8000dee:	3f02      	subs	r7, #2
 8000df0:	4429      	add	r1, r5
 8000df2:	1acb      	subs	r3, r1, r3
 8000df4:	b281      	uxth	r1, r0
 8000df6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dfa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dfe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e02:	fb00 f308 	mul.w	r3, r0, r8
 8000e06:	428b      	cmp	r3, r1
 8000e08:	d907      	bls.n	8000e1a <__udivmoddi4+0x27e>
 8000e0a:	1869      	adds	r1, r5, r1
 8000e0c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e10:	d217      	bcs.n	8000e42 <__udivmoddi4+0x2a6>
 8000e12:	428b      	cmp	r3, r1
 8000e14:	d915      	bls.n	8000e42 <__udivmoddi4+0x2a6>
 8000e16:	3802      	subs	r0, #2
 8000e18:	4429      	add	r1, r5
 8000e1a:	1ac9      	subs	r1, r1, r3
 8000e1c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e20:	e73b      	b.n	8000c9a <__udivmoddi4+0xfe>
 8000e22:	4637      	mov	r7, r6
 8000e24:	4630      	mov	r0, r6
 8000e26:	e709      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000e28:	4607      	mov	r7, r0
 8000e2a:	e6e7      	b.n	8000bfc <__udivmoddi4+0x60>
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	e6fb      	b.n	8000c28 <__udivmoddi4+0x8c>
 8000e30:	4541      	cmp	r1, r8
 8000e32:	d2ab      	bcs.n	8000d8c <__udivmoddi4+0x1f0>
 8000e34:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e38:	eb69 020e 	sbc.w	r2, r9, lr
 8000e3c:	3801      	subs	r0, #1
 8000e3e:	4613      	mov	r3, r2
 8000e40:	e7a4      	b.n	8000d8c <__udivmoddi4+0x1f0>
 8000e42:	4660      	mov	r0, ip
 8000e44:	e7e9      	b.n	8000e1a <__udivmoddi4+0x27e>
 8000e46:	4618      	mov	r0, r3
 8000e48:	e795      	b.n	8000d76 <__udivmoddi4+0x1da>
 8000e4a:	4667      	mov	r7, ip
 8000e4c:	e7d1      	b.n	8000df2 <__udivmoddi4+0x256>
 8000e4e:	4681      	mov	r9, r0
 8000e50:	e77c      	b.n	8000d4c <__udivmoddi4+0x1b0>
 8000e52:	3802      	subs	r0, #2
 8000e54:	442c      	add	r4, r5
 8000e56:	e747      	b.n	8000ce8 <__udivmoddi4+0x14c>
 8000e58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e5c:	442b      	add	r3, r5
 8000e5e:	e72f      	b.n	8000cc0 <__udivmoddi4+0x124>
 8000e60:	4638      	mov	r0, r7
 8000e62:	e708      	b.n	8000c76 <__udivmoddi4+0xda>
 8000e64:	4637      	mov	r7, r6
 8000e66:	e6e9      	b.n	8000c3c <__udivmoddi4+0xa0>

08000e68 <__aeabi_idiv0>:
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <SIMCOM_USART_IrqHandler>:
/* Private functions implementation -------------------------------------------*/
static void SIMCOM_Check_Buffer(void);
static void SIMCOM_Fill_Buffer(const void *data, size_t len);

/* Public functions implementation ---------------------------------------------*/
void SIMCOM_USART_IrqHandler(void) {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
    /* if Idle flag is set */
    if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)) {
 8000e72:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <SIMCOM_USART_IrqHandler+0x38>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f003 0310 	and.w	r3, r3, #16
 8000e7c:	2b10      	cmp	r3, #16
 8000e7e:	d10c      	bne.n	8000e9a <SIMCOM_USART_IrqHandler+0x2e>
        /* Clear idle flag */
        __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8000e80:	2300      	movs	r3, #0
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <SIMCOM_USART_IrqHandler+0x38>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <SIMCOM_USART_IrqHandler+0x38>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]

        SIMCOM_Check_Buffer();
 8000e96:	f001 f925 	bl	80020e4 <SIMCOM_Check_Buffer>
    }
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000cf0 	.word	0x20000cf0

08000ea8 <SIMCOM_DMA_IrqHandler>:

void SIMCOM_DMA_IrqHandler(void) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
    // if the source is HT
    if (__HAL_DMA_GET_IT_SOURCE(&hdma_usart1_rx, DMA_IT_HT)) {
 8000eac:	4b9a      	ldr	r3, [pc, #616]	; (8001118 <SIMCOM_DMA_IrqHandler+0x270>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f003 0308 	and.w	r3, r3, #8
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	f000 81bc 	beq.w	8001234 <SIMCOM_DMA_IrqHandler+0x38c>
        /* Clear HT flag */
        __HAL_DMA_CLEAR_FLAG(&hdma_usart1_rx, __HAL_DMA_GET_HT_FLAG_INDEX(&hdma_usart1_rx));
 8000ebc:	4b96      	ldr	r3, [pc, #600]	; (8001118 <SIMCOM_DMA_IrqHandler+0x270>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b96      	ldr	r3, [pc, #600]	; (800111c <SIMCOM_DMA_IrqHandler+0x274>)
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d960      	bls.n	8000f8a <SIMCOM_DMA_IrqHandler+0xe2>
 8000ec8:	4b93      	ldr	r3, [pc, #588]	; (8001118 <SIMCOM_DMA_IrqHandler+0x270>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a94      	ldr	r2, [pc, #592]	; (8001120 <SIMCOM_DMA_IrqHandler+0x278>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d057      	beq.n	8000f82 <SIMCOM_DMA_IrqHandler+0xda>
 8000ed2:	4b91      	ldr	r3, [pc, #580]	; (8001118 <SIMCOM_DMA_IrqHandler+0x270>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a93      	ldr	r2, [pc, #588]	; (8001124 <SIMCOM_DMA_IrqHandler+0x27c>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d050      	beq.n	8000f7e <SIMCOM_DMA_IrqHandler+0xd6>
 8000edc:	4b8e      	ldr	r3, [pc, #568]	; (8001118 <SIMCOM_DMA_IrqHandler+0x270>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a91      	ldr	r2, [pc, #580]	; (8001128 <SIMCOM_DMA_IrqHandler+0x280>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d049      	beq.n	8000f7a <SIMCOM_DMA_IrqHandler+0xd2>
 8000ee6:	4b8c      	ldr	r3, [pc, #560]	; (8001118 <SIMCOM_DMA_IrqHandler+0x270>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a90      	ldr	r2, [pc, #576]	; (800112c <SIMCOM_DMA_IrqHandler+0x284>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d042      	beq.n	8000f76 <SIMCOM_DMA_IrqHandler+0xce>
 8000ef0:	4b89      	ldr	r3, [pc, #548]	; (8001118 <SIMCOM_DMA_IrqHandler+0x270>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a8e      	ldr	r2, [pc, #568]	; (8001130 <SIMCOM_DMA_IrqHandler+0x288>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d03a      	beq.n	8000f70 <SIMCOM_DMA_IrqHandler+0xc8>
 8000efa:	4b87      	ldr	r3, [pc, #540]	; (8001118 <SIMCOM_DMA_IrqHandler+0x270>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a8d      	ldr	r2, [pc, #564]	; (8001134 <SIMCOM_DMA_IrqHandler+0x28c>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d032      	beq.n	8000f6a <SIMCOM_DMA_IrqHandler+0xc2>
 8000f04:	4b84      	ldr	r3, [pc, #528]	; (8001118 <SIMCOM_DMA_IrqHandler+0x270>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a8b      	ldr	r2, [pc, #556]	; (8001138 <SIMCOM_DMA_IrqHandler+0x290>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d02a      	beq.n	8000f64 <SIMCOM_DMA_IrqHandler+0xbc>
 8000f0e:	4b82      	ldr	r3, [pc, #520]	; (8001118 <SIMCOM_DMA_IrqHandler+0x270>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a8a      	ldr	r2, [pc, #552]	; (800113c <SIMCOM_DMA_IrqHandler+0x294>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d022      	beq.n	8000f5e <SIMCOM_DMA_IrqHandler+0xb6>
 8000f18:	4b7f      	ldr	r3, [pc, #508]	; (8001118 <SIMCOM_DMA_IrqHandler+0x270>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a88      	ldr	r2, [pc, #544]	; (8001140 <SIMCOM_DMA_IrqHandler+0x298>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d01a      	beq.n	8000f58 <SIMCOM_DMA_IrqHandler+0xb0>
 8000f22:	4b7d      	ldr	r3, [pc, #500]	; (8001118 <SIMCOM_DMA_IrqHandler+0x270>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a87      	ldr	r2, [pc, #540]	; (8001144 <SIMCOM_DMA_IrqHandler+0x29c>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d012      	beq.n	8000f52 <SIMCOM_DMA_IrqHandler+0xaa>
 8000f2c:	4b7a      	ldr	r3, [pc, #488]	; (8001118 <SIMCOM_DMA_IrqHandler+0x270>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a85      	ldr	r2, [pc, #532]	; (8001148 <SIMCOM_DMA_IrqHandler+0x2a0>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d00a      	beq.n	8000f4c <SIMCOM_DMA_IrqHandler+0xa4>
 8000f36:	4b78      	ldr	r3, [pc, #480]	; (8001118 <SIMCOM_DMA_IrqHandler+0x270>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a84      	ldr	r2, [pc, #528]	; (800114c <SIMCOM_DMA_IrqHandler+0x2a4>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d102      	bne.n	8000f46 <SIMCOM_DMA_IrqHandler+0x9e>
 8000f40:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f44:	e01e      	b.n	8000f84 <SIMCOM_DMA_IrqHandler+0xdc>
 8000f46:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000f4a:	e01b      	b.n	8000f84 <SIMCOM_DMA_IrqHandler+0xdc>
 8000f4c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f50:	e018      	b.n	8000f84 <SIMCOM_DMA_IrqHandler+0xdc>
 8000f52:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f56:	e015      	b.n	8000f84 <SIMCOM_DMA_IrqHandler+0xdc>
 8000f58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f5c:	e012      	b.n	8000f84 <SIMCOM_DMA_IrqHandler+0xdc>
 8000f5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f62:	e00f      	b.n	8000f84 <SIMCOM_DMA_IrqHandler+0xdc>
 8000f64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f68:	e00c      	b.n	8000f84 <SIMCOM_DMA_IrqHandler+0xdc>
 8000f6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f6e:	e009      	b.n	8000f84 <SIMCOM_DMA_IrqHandler+0xdc>
 8000f70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f74:	e006      	b.n	8000f84 <SIMCOM_DMA_IrqHandler+0xdc>
 8000f76:	2310      	movs	r3, #16
 8000f78:	e004      	b.n	8000f84 <SIMCOM_DMA_IrqHandler+0xdc>
 8000f7a:	2310      	movs	r3, #16
 8000f7c:	e002      	b.n	8000f84 <SIMCOM_DMA_IrqHandler+0xdc>
 8000f7e:	2310      	movs	r3, #16
 8000f80:	e000      	b.n	8000f84 <SIMCOM_DMA_IrqHandler+0xdc>
 8000f82:	2310      	movs	r3, #16
 8000f84:	4a72      	ldr	r2, [pc, #456]	; (8001150 <SIMCOM_DMA_IrqHandler+0x2a8>)
 8000f86:	60d3      	str	r3, [r2, #12]
 8000f88:	e150      	b.n	800122c <SIMCOM_DMA_IrqHandler+0x384>
 8000f8a:	4b63      	ldr	r3, [pc, #396]	; (8001118 <SIMCOM_DMA_IrqHandler+0x270>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	4b70      	ldr	r3, [pc, #448]	; (8001154 <SIMCOM_DMA_IrqHandler+0x2ac>)
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d960      	bls.n	8001058 <SIMCOM_DMA_IrqHandler+0x1b0>
 8000f96:	4b60      	ldr	r3, [pc, #384]	; (8001118 <SIMCOM_DMA_IrqHandler+0x270>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a61      	ldr	r2, [pc, #388]	; (8001120 <SIMCOM_DMA_IrqHandler+0x278>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d057      	beq.n	8001050 <SIMCOM_DMA_IrqHandler+0x1a8>
 8000fa0:	4b5d      	ldr	r3, [pc, #372]	; (8001118 <SIMCOM_DMA_IrqHandler+0x270>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a5f      	ldr	r2, [pc, #380]	; (8001124 <SIMCOM_DMA_IrqHandler+0x27c>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d050      	beq.n	800104c <SIMCOM_DMA_IrqHandler+0x1a4>
 8000faa:	4b5b      	ldr	r3, [pc, #364]	; (8001118 <SIMCOM_DMA_IrqHandler+0x270>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a5e      	ldr	r2, [pc, #376]	; (8001128 <SIMCOM_DMA_IrqHandler+0x280>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d049      	beq.n	8001048 <SIMCOM_DMA_IrqHandler+0x1a0>
 8000fb4:	4b58      	ldr	r3, [pc, #352]	; (8001118 <SIMCOM_DMA_IrqHandler+0x270>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a5c      	ldr	r2, [pc, #368]	; (800112c <SIMCOM_DMA_IrqHandler+0x284>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d042      	beq.n	8001044 <SIMCOM_DMA_IrqHandler+0x19c>
 8000fbe:	4b56      	ldr	r3, [pc, #344]	; (8001118 <SIMCOM_DMA_IrqHandler+0x270>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a5b      	ldr	r2, [pc, #364]	; (8001130 <SIMCOM_DMA_IrqHandler+0x288>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d03a      	beq.n	800103e <SIMCOM_DMA_IrqHandler+0x196>
 8000fc8:	4b53      	ldr	r3, [pc, #332]	; (8001118 <SIMCOM_DMA_IrqHandler+0x270>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a59      	ldr	r2, [pc, #356]	; (8001134 <SIMCOM_DMA_IrqHandler+0x28c>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d032      	beq.n	8001038 <SIMCOM_DMA_IrqHandler+0x190>
 8000fd2:	4b51      	ldr	r3, [pc, #324]	; (8001118 <SIMCOM_DMA_IrqHandler+0x270>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a58      	ldr	r2, [pc, #352]	; (8001138 <SIMCOM_DMA_IrqHandler+0x290>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d02a      	beq.n	8001032 <SIMCOM_DMA_IrqHandler+0x18a>
 8000fdc:	4b4e      	ldr	r3, [pc, #312]	; (8001118 <SIMCOM_DMA_IrqHandler+0x270>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a56      	ldr	r2, [pc, #344]	; (800113c <SIMCOM_DMA_IrqHandler+0x294>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d022      	beq.n	800102c <SIMCOM_DMA_IrqHandler+0x184>
 8000fe6:	4b4c      	ldr	r3, [pc, #304]	; (8001118 <SIMCOM_DMA_IrqHandler+0x270>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a55      	ldr	r2, [pc, #340]	; (8001140 <SIMCOM_DMA_IrqHandler+0x298>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d01a      	beq.n	8001026 <SIMCOM_DMA_IrqHandler+0x17e>
 8000ff0:	4b49      	ldr	r3, [pc, #292]	; (8001118 <SIMCOM_DMA_IrqHandler+0x270>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a53      	ldr	r2, [pc, #332]	; (8001144 <SIMCOM_DMA_IrqHandler+0x29c>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d012      	beq.n	8001020 <SIMCOM_DMA_IrqHandler+0x178>
 8000ffa:	4b47      	ldr	r3, [pc, #284]	; (8001118 <SIMCOM_DMA_IrqHandler+0x270>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a52      	ldr	r2, [pc, #328]	; (8001148 <SIMCOM_DMA_IrqHandler+0x2a0>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d00a      	beq.n	800101a <SIMCOM_DMA_IrqHandler+0x172>
 8001004:	4b44      	ldr	r3, [pc, #272]	; (8001118 <SIMCOM_DMA_IrqHandler+0x270>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a50      	ldr	r2, [pc, #320]	; (800114c <SIMCOM_DMA_IrqHandler+0x2a4>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d102      	bne.n	8001014 <SIMCOM_DMA_IrqHandler+0x16c>
 800100e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001012:	e01e      	b.n	8001052 <SIMCOM_DMA_IrqHandler+0x1aa>
 8001014:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001018:	e01b      	b.n	8001052 <SIMCOM_DMA_IrqHandler+0x1aa>
 800101a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800101e:	e018      	b.n	8001052 <SIMCOM_DMA_IrqHandler+0x1aa>
 8001020:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001024:	e015      	b.n	8001052 <SIMCOM_DMA_IrqHandler+0x1aa>
 8001026:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800102a:	e012      	b.n	8001052 <SIMCOM_DMA_IrqHandler+0x1aa>
 800102c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001030:	e00f      	b.n	8001052 <SIMCOM_DMA_IrqHandler+0x1aa>
 8001032:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001036:	e00c      	b.n	8001052 <SIMCOM_DMA_IrqHandler+0x1aa>
 8001038:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800103c:	e009      	b.n	8001052 <SIMCOM_DMA_IrqHandler+0x1aa>
 800103e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001042:	e006      	b.n	8001052 <SIMCOM_DMA_IrqHandler+0x1aa>
 8001044:	2310      	movs	r3, #16
 8001046:	e004      	b.n	8001052 <SIMCOM_DMA_IrqHandler+0x1aa>
 8001048:	2310      	movs	r3, #16
 800104a:	e002      	b.n	8001052 <SIMCOM_DMA_IrqHandler+0x1aa>
 800104c:	2310      	movs	r3, #16
 800104e:	e000      	b.n	8001052 <SIMCOM_DMA_IrqHandler+0x1aa>
 8001050:	2310      	movs	r3, #16
 8001052:	4a3f      	ldr	r2, [pc, #252]	; (8001150 <SIMCOM_DMA_IrqHandler+0x2a8>)
 8001054:	6093      	str	r3, [r2, #8]
 8001056:	e0e9      	b.n	800122c <SIMCOM_DMA_IrqHandler+0x384>
 8001058:	4b2f      	ldr	r3, [pc, #188]	; (8001118 <SIMCOM_DMA_IrqHandler+0x270>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	4b3e      	ldr	r3, [pc, #248]	; (8001158 <SIMCOM_DMA_IrqHandler+0x2b0>)
 8001060:	429a      	cmp	r2, r3
 8001062:	f240 8083 	bls.w	800116c <SIMCOM_DMA_IrqHandler+0x2c4>
 8001066:	4b2c      	ldr	r3, [pc, #176]	; (8001118 <SIMCOM_DMA_IrqHandler+0x270>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a2d      	ldr	r2, [pc, #180]	; (8001120 <SIMCOM_DMA_IrqHandler+0x278>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d079      	beq.n	8001164 <SIMCOM_DMA_IrqHandler+0x2bc>
 8001070:	4b29      	ldr	r3, [pc, #164]	; (8001118 <SIMCOM_DMA_IrqHandler+0x270>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a2b      	ldr	r2, [pc, #172]	; (8001124 <SIMCOM_DMA_IrqHandler+0x27c>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d072      	beq.n	8001160 <SIMCOM_DMA_IrqHandler+0x2b8>
 800107a:	4b27      	ldr	r3, [pc, #156]	; (8001118 <SIMCOM_DMA_IrqHandler+0x270>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a2a      	ldr	r2, [pc, #168]	; (8001128 <SIMCOM_DMA_IrqHandler+0x280>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d06b      	beq.n	800115c <SIMCOM_DMA_IrqHandler+0x2b4>
 8001084:	4b24      	ldr	r3, [pc, #144]	; (8001118 <SIMCOM_DMA_IrqHandler+0x270>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a28      	ldr	r2, [pc, #160]	; (800112c <SIMCOM_DMA_IrqHandler+0x284>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d042      	beq.n	8001114 <SIMCOM_DMA_IrqHandler+0x26c>
 800108e:	4b22      	ldr	r3, [pc, #136]	; (8001118 <SIMCOM_DMA_IrqHandler+0x270>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a27      	ldr	r2, [pc, #156]	; (8001130 <SIMCOM_DMA_IrqHandler+0x288>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d03a      	beq.n	800110e <SIMCOM_DMA_IrqHandler+0x266>
 8001098:	4b1f      	ldr	r3, [pc, #124]	; (8001118 <SIMCOM_DMA_IrqHandler+0x270>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a25      	ldr	r2, [pc, #148]	; (8001134 <SIMCOM_DMA_IrqHandler+0x28c>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d032      	beq.n	8001108 <SIMCOM_DMA_IrqHandler+0x260>
 80010a2:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <SIMCOM_DMA_IrqHandler+0x270>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a24      	ldr	r2, [pc, #144]	; (8001138 <SIMCOM_DMA_IrqHandler+0x290>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d02a      	beq.n	8001102 <SIMCOM_DMA_IrqHandler+0x25a>
 80010ac:	4b1a      	ldr	r3, [pc, #104]	; (8001118 <SIMCOM_DMA_IrqHandler+0x270>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a22      	ldr	r2, [pc, #136]	; (800113c <SIMCOM_DMA_IrqHandler+0x294>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d022      	beq.n	80010fc <SIMCOM_DMA_IrqHandler+0x254>
 80010b6:	4b18      	ldr	r3, [pc, #96]	; (8001118 <SIMCOM_DMA_IrqHandler+0x270>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a21      	ldr	r2, [pc, #132]	; (8001140 <SIMCOM_DMA_IrqHandler+0x298>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d01a      	beq.n	80010f6 <SIMCOM_DMA_IrqHandler+0x24e>
 80010c0:	4b15      	ldr	r3, [pc, #84]	; (8001118 <SIMCOM_DMA_IrqHandler+0x270>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a1f      	ldr	r2, [pc, #124]	; (8001144 <SIMCOM_DMA_IrqHandler+0x29c>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d012      	beq.n	80010f0 <SIMCOM_DMA_IrqHandler+0x248>
 80010ca:	4b13      	ldr	r3, [pc, #76]	; (8001118 <SIMCOM_DMA_IrqHandler+0x270>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a1e      	ldr	r2, [pc, #120]	; (8001148 <SIMCOM_DMA_IrqHandler+0x2a0>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d00a      	beq.n	80010ea <SIMCOM_DMA_IrqHandler+0x242>
 80010d4:	4b10      	ldr	r3, [pc, #64]	; (8001118 <SIMCOM_DMA_IrqHandler+0x270>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a1c      	ldr	r2, [pc, #112]	; (800114c <SIMCOM_DMA_IrqHandler+0x2a4>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d102      	bne.n	80010e4 <SIMCOM_DMA_IrqHandler+0x23c>
 80010de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80010e2:	e040      	b.n	8001166 <SIMCOM_DMA_IrqHandler+0x2be>
 80010e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80010e8:	e03d      	b.n	8001166 <SIMCOM_DMA_IrqHandler+0x2be>
 80010ea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80010ee:	e03a      	b.n	8001166 <SIMCOM_DMA_IrqHandler+0x2be>
 80010f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80010f4:	e037      	b.n	8001166 <SIMCOM_DMA_IrqHandler+0x2be>
 80010f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80010fa:	e034      	b.n	8001166 <SIMCOM_DMA_IrqHandler+0x2be>
 80010fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001100:	e031      	b.n	8001166 <SIMCOM_DMA_IrqHandler+0x2be>
 8001102:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001106:	e02e      	b.n	8001166 <SIMCOM_DMA_IrqHandler+0x2be>
 8001108:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800110c:	e02b      	b.n	8001166 <SIMCOM_DMA_IrqHandler+0x2be>
 800110e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001112:	e028      	b.n	8001166 <SIMCOM_DMA_IrqHandler+0x2be>
 8001114:	2310      	movs	r3, #16
 8001116:	e026      	b.n	8001166 <SIMCOM_DMA_IrqHandler+0x2be>
 8001118:	20000c90 	.word	0x20000c90
 800111c:	40026458 	.word	0x40026458
 8001120:	40026010 	.word	0x40026010
 8001124:	40026410 	.word	0x40026410
 8001128:	40026070 	.word	0x40026070
 800112c:	40026470 	.word	0x40026470
 8001130:	40026028 	.word	0x40026028
 8001134:	40026428 	.word	0x40026428
 8001138:	40026088 	.word	0x40026088
 800113c:	40026488 	.word	0x40026488
 8001140:	40026040 	.word	0x40026040
 8001144:	40026440 	.word	0x40026440
 8001148:	400260a0 	.word	0x400260a0
 800114c:	400264a0 	.word	0x400264a0
 8001150:	40026400 	.word	0x40026400
 8001154:	400260b8 	.word	0x400260b8
 8001158:	40026058 	.word	0x40026058
 800115c:	2310      	movs	r3, #16
 800115e:	e002      	b.n	8001166 <SIMCOM_DMA_IrqHandler+0x2be>
 8001160:	2310      	movs	r3, #16
 8001162:	e000      	b.n	8001166 <SIMCOM_DMA_IrqHandler+0x2be>
 8001164:	2310      	movs	r3, #16
 8001166:	4a9b      	ldr	r2, [pc, #620]	; (80013d4 <SIMCOM_DMA_IrqHandler+0x52c>)
 8001168:	60d3      	str	r3, [r2, #12]
 800116a:	e05f      	b.n	800122c <SIMCOM_DMA_IrqHandler+0x384>
 800116c:	4b9a      	ldr	r3, [pc, #616]	; (80013d8 <SIMCOM_DMA_IrqHandler+0x530>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a9a      	ldr	r2, [pc, #616]	; (80013dc <SIMCOM_DMA_IrqHandler+0x534>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d057      	beq.n	8001226 <SIMCOM_DMA_IrqHandler+0x37e>
 8001176:	4b98      	ldr	r3, [pc, #608]	; (80013d8 <SIMCOM_DMA_IrqHandler+0x530>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a99      	ldr	r2, [pc, #612]	; (80013e0 <SIMCOM_DMA_IrqHandler+0x538>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d050      	beq.n	8001222 <SIMCOM_DMA_IrqHandler+0x37a>
 8001180:	4b95      	ldr	r3, [pc, #596]	; (80013d8 <SIMCOM_DMA_IrqHandler+0x530>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a97      	ldr	r2, [pc, #604]	; (80013e4 <SIMCOM_DMA_IrqHandler+0x53c>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d049      	beq.n	800121e <SIMCOM_DMA_IrqHandler+0x376>
 800118a:	4b93      	ldr	r3, [pc, #588]	; (80013d8 <SIMCOM_DMA_IrqHandler+0x530>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a96      	ldr	r2, [pc, #600]	; (80013e8 <SIMCOM_DMA_IrqHandler+0x540>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d042      	beq.n	800121a <SIMCOM_DMA_IrqHandler+0x372>
 8001194:	4b90      	ldr	r3, [pc, #576]	; (80013d8 <SIMCOM_DMA_IrqHandler+0x530>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a94      	ldr	r2, [pc, #592]	; (80013ec <SIMCOM_DMA_IrqHandler+0x544>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d03a      	beq.n	8001214 <SIMCOM_DMA_IrqHandler+0x36c>
 800119e:	4b8e      	ldr	r3, [pc, #568]	; (80013d8 <SIMCOM_DMA_IrqHandler+0x530>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a93      	ldr	r2, [pc, #588]	; (80013f0 <SIMCOM_DMA_IrqHandler+0x548>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d032      	beq.n	800120e <SIMCOM_DMA_IrqHandler+0x366>
 80011a8:	4b8b      	ldr	r3, [pc, #556]	; (80013d8 <SIMCOM_DMA_IrqHandler+0x530>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a91      	ldr	r2, [pc, #580]	; (80013f4 <SIMCOM_DMA_IrqHandler+0x54c>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d02a      	beq.n	8001208 <SIMCOM_DMA_IrqHandler+0x360>
 80011b2:	4b89      	ldr	r3, [pc, #548]	; (80013d8 <SIMCOM_DMA_IrqHandler+0x530>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a90      	ldr	r2, [pc, #576]	; (80013f8 <SIMCOM_DMA_IrqHandler+0x550>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d022      	beq.n	8001202 <SIMCOM_DMA_IrqHandler+0x35a>
 80011bc:	4b86      	ldr	r3, [pc, #536]	; (80013d8 <SIMCOM_DMA_IrqHandler+0x530>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a8e      	ldr	r2, [pc, #568]	; (80013fc <SIMCOM_DMA_IrqHandler+0x554>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d01a      	beq.n	80011fc <SIMCOM_DMA_IrqHandler+0x354>
 80011c6:	4b84      	ldr	r3, [pc, #528]	; (80013d8 <SIMCOM_DMA_IrqHandler+0x530>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a8d      	ldr	r2, [pc, #564]	; (8001400 <SIMCOM_DMA_IrqHandler+0x558>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d012      	beq.n	80011f6 <SIMCOM_DMA_IrqHandler+0x34e>
 80011d0:	4b81      	ldr	r3, [pc, #516]	; (80013d8 <SIMCOM_DMA_IrqHandler+0x530>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a8b      	ldr	r2, [pc, #556]	; (8001404 <SIMCOM_DMA_IrqHandler+0x55c>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d00a      	beq.n	80011f0 <SIMCOM_DMA_IrqHandler+0x348>
 80011da:	4b7f      	ldr	r3, [pc, #508]	; (80013d8 <SIMCOM_DMA_IrqHandler+0x530>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a8a      	ldr	r2, [pc, #552]	; (8001408 <SIMCOM_DMA_IrqHandler+0x560>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d102      	bne.n	80011ea <SIMCOM_DMA_IrqHandler+0x342>
 80011e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011e8:	e01e      	b.n	8001228 <SIMCOM_DMA_IrqHandler+0x380>
 80011ea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80011ee:	e01b      	b.n	8001228 <SIMCOM_DMA_IrqHandler+0x380>
 80011f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011f4:	e018      	b.n	8001228 <SIMCOM_DMA_IrqHandler+0x380>
 80011f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011fa:	e015      	b.n	8001228 <SIMCOM_DMA_IrqHandler+0x380>
 80011fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001200:	e012      	b.n	8001228 <SIMCOM_DMA_IrqHandler+0x380>
 8001202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001206:	e00f      	b.n	8001228 <SIMCOM_DMA_IrqHandler+0x380>
 8001208:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800120c:	e00c      	b.n	8001228 <SIMCOM_DMA_IrqHandler+0x380>
 800120e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001212:	e009      	b.n	8001228 <SIMCOM_DMA_IrqHandler+0x380>
 8001214:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001218:	e006      	b.n	8001228 <SIMCOM_DMA_IrqHandler+0x380>
 800121a:	2310      	movs	r3, #16
 800121c:	e004      	b.n	8001228 <SIMCOM_DMA_IrqHandler+0x380>
 800121e:	2310      	movs	r3, #16
 8001220:	e002      	b.n	8001228 <SIMCOM_DMA_IrqHandler+0x380>
 8001222:	2310      	movs	r3, #16
 8001224:	e000      	b.n	8001228 <SIMCOM_DMA_IrqHandler+0x380>
 8001226:	2310      	movs	r3, #16
 8001228:	4a6a      	ldr	r2, [pc, #424]	; (80013d4 <SIMCOM_DMA_IrqHandler+0x52c>)
 800122a:	6093      	str	r3, [r2, #8]

        SIMCOM_Check_Buffer();
 800122c:	f000 ff5a 	bl	80020e4 <SIMCOM_Check_Buffer>
        __HAL_DMA_CLEAR_FLAG(&hdma_usart1_rx, __HAL_DMA_GET_DME_FLAG_INDEX(&hdma_usart1_rx));

        /* Start DMA transfer */
        HAL_UART_Receive_DMA(&huart1, (uint8_t*) SIMCOM_DMA_RX, SIMCOM_DMA_RX_SZ);
    }
}
 8001230:	f000 bf0b 	b.w	800204a <SIMCOM_DMA_IrqHandler+0x11a2>
    else if (__HAL_DMA_GET_IT_SOURCE(&hdma_usart1_rx, DMA_IT_TC)) {
 8001234:	4b68      	ldr	r3, [pc, #416]	; (80013d8 <SIMCOM_DMA_IrqHandler+0x530>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0310 	and.w	r3, r3, #16
 800123e:	2b00      	cmp	r3, #0
 8001240:	f000 81bd 	beq.w	80015be <SIMCOM_DMA_IrqHandler+0x716>
        __HAL_DMA_CLEAR_FLAG(&hdma_usart1_rx, __HAL_DMA_GET_TC_FLAG_INDEX(&hdma_usart1_rx));
 8001244:	4b64      	ldr	r3, [pc, #400]	; (80013d8 <SIMCOM_DMA_IrqHandler+0x530>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	461a      	mov	r2, r3
 800124a:	4b70      	ldr	r3, [pc, #448]	; (800140c <SIMCOM_DMA_IrqHandler+0x564>)
 800124c:	429a      	cmp	r2, r3
 800124e:	d960      	bls.n	8001312 <SIMCOM_DMA_IrqHandler+0x46a>
 8001250:	4b61      	ldr	r3, [pc, #388]	; (80013d8 <SIMCOM_DMA_IrqHandler+0x530>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a61      	ldr	r2, [pc, #388]	; (80013dc <SIMCOM_DMA_IrqHandler+0x534>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d057      	beq.n	800130a <SIMCOM_DMA_IrqHandler+0x462>
 800125a:	4b5f      	ldr	r3, [pc, #380]	; (80013d8 <SIMCOM_DMA_IrqHandler+0x530>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a60      	ldr	r2, [pc, #384]	; (80013e0 <SIMCOM_DMA_IrqHandler+0x538>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d050      	beq.n	8001306 <SIMCOM_DMA_IrqHandler+0x45e>
 8001264:	4b5c      	ldr	r3, [pc, #368]	; (80013d8 <SIMCOM_DMA_IrqHandler+0x530>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a5e      	ldr	r2, [pc, #376]	; (80013e4 <SIMCOM_DMA_IrqHandler+0x53c>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d049      	beq.n	8001302 <SIMCOM_DMA_IrqHandler+0x45a>
 800126e:	4b5a      	ldr	r3, [pc, #360]	; (80013d8 <SIMCOM_DMA_IrqHandler+0x530>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a5d      	ldr	r2, [pc, #372]	; (80013e8 <SIMCOM_DMA_IrqHandler+0x540>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d042      	beq.n	80012fe <SIMCOM_DMA_IrqHandler+0x456>
 8001278:	4b57      	ldr	r3, [pc, #348]	; (80013d8 <SIMCOM_DMA_IrqHandler+0x530>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a5b      	ldr	r2, [pc, #364]	; (80013ec <SIMCOM_DMA_IrqHandler+0x544>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d03a      	beq.n	80012f8 <SIMCOM_DMA_IrqHandler+0x450>
 8001282:	4b55      	ldr	r3, [pc, #340]	; (80013d8 <SIMCOM_DMA_IrqHandler+0x530>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a5a      	ldr	r2, [pc, #360]	; (80013f0 <SIMCOM_DMA_IrqHandler+0x548>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d032      	beq.n	80012f2 <SIMCOM_DMA_IrqHandler+0x44a>
 800128c:	4b52      	ldr	r3, [pc, #328]	; (80013d8 <SIMCOM_DMA_IrqHandler+0x530>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a58      	ldr	r2, [pc, #352]	; (80013f4 <SIMCOM_DMA_IrqHandler+0x54c>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d02a      	beq.n	80012ec <SIMCOM_DMA_IrqHandler+0x444>
 8001296:	4b50      	ldr	r3, [pc, #320]	; (80013d8 <SIMCOM_DMA_IrqHandler+0x530>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a57      	ldr	r2, [pc, #348]	; (80013f8 <SIMCOM_DMA_IrqHandler+0x550>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d022      	beq.n	80012e6 <SIMCOM_DMA_IrqHandler+0x43e>
 80012a0:	4b4d      	ldr	r3, [pc, #308]	; (80013d8 <SIMCOM_DMA_IrqHandler+0x530>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a55      	ldr	r2, [pc, #340]	; (80013fc <SIMCOM_DMA_IrqHandler+0x554>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d01a      	beq.n	80012e0 <SIMCOM_DMA_IrqHandler+0x438>
 80012aa:	4b4b      	ldr	r3, [pc, #300]	; (80013d8 <SIMCOM_DMA_IrqHandler+0x530>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a54      	ldr	r2, [pc, #336]	; (8001400 <SIMCOM_DMA_IrqHandler+0x558>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d012      	beq.n	80012da <SIMCOM_DMA_IrqHandler+0x432>
 80012b4:	4b48      	ldr	r3, [pc, #288]	; (80013d8 <SIMCOM_DMA_IrqHandler+0x530>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a52      	ldr	r2, [pc, #328]	; (8001404 <SIMCOM_DMA_IrqHandler+0x55c>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d00a      	beq.n	80012d4 <SIMCOM_DMA_IrqHandler+0x42c>
 80012be:	4b46      	ldr	r3, [pc, #280]	; (80013d8 <SIMCOM_DMA_IrqHandler+0x530>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a51      	ldr	r2, [pc, #324]	; (8001408 <SIMCOM_DMA_IrqHandler+0x560>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d102      	bne.n	80012ce <SIMCOM_DMA_IrqHandler+0x426>
 80012c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80012cc:	e01e      	b.n	800130c <SIMCOM_DMA_IrqHandler+0x464>
 80012ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80012d2:	e01b      	b.n	800130c <SIMCOM_DMA_IrqHandler+0x464>
 80012d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80012d8:	e018      	b.n	800130c <SIMCOM_DMA_IrqHandler+0x464>
 80012da:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80012de:	e015      	b.n	800130c <SIMCOM_DMA_IrqHandler+0x464>
 80012e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80012e4:	e012      	b.n	800130c <SIMCOM_DMA_IrqHandler+0x464>
 80012e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012ea:	e00f      	b.n	800130c <SIMCOM_DMA_IrqHandler+0x464>
 80012ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012f0:	e00c      	b.n	800130c <SIMCOM_DMA_IrqHandler+0x464>
 80012f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012f6:	e009      	b.n	800130c <SIMCOM_DMA_IrqHandler+0x464>
 80012f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012fc:	e006      	b.n	800130c <SIMCOM_DMA_IrqHandler+0x464>
 80012fe:	2320      	movs	r3, #32
 8001300:	e004      	b.n	800130c <SIMCOM_DMA_IrqHandler+0x464>
 8001302:	2320      	movs	r3, #32
 8001304:	e002      	b.n	800130c <SIMCOM_DMA_IrqHandler+0x464>
 8001306:	2320      	movs	r3, #32
 8001308:	e000      	b.n	800130c <SIMCOM_DMA_IrqHandler+0x464>
 800130a:	2320      	movs	r3, #32
 800130c:	4a40      	ldr	r2, [pc, #256]	; (8001410 <SIMCOM_DMA_IrqHandler+0x568>)
 800130e:	60d3      	str	r3, [r2, #12]
 8001310:	e151      	b.n	80015b6 <SIMCOM_DMA_IrqHandler+0x70e>
 8001312:	4b31      	ldr	r3, [pc, #196]	; (80013d8 <SIMCOM_DMA_IrqHandler+0x530>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	461a      	mov	r2, r3
 8001318:	4b3e      	ldr	r3, [pc, #248]	; (8001414 <SIMCOM_DMA_IrqHandler+0x56c>)
 800131a:	429a      	cmp	r2, r3
 800131c:	f240 8084 	bls.w	8001428 <SIMCOM_DMA_IrqHandler+0x580>
 8001320:	4b2d      	ldr	r3, [pc, #180]	; (80013d8 <SIMCOM_DMA_IrqHandler+0x530>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a2d      	ldr	r2, [pc, #180]	; (80013dc <SIMCOM_DMA_IrqHandler+0x534>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d07a      	beq.n	8001420 <SIMCOM_DMA_IrqHandler+0x578>
 800132a:	4b2b      	ldr	r3, [pc, #172]	; (80013d8 <SIMCOM_DMA_IrqHandler+0x530>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a2c      	ldr	r2, [pc, #176]	; (80013e0 <SIMCOM_DMA_IrqHandler+0x538>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d073      	beq.n	800141c <SIMCOM_DMA_IrqHandler+0x574>
 8001334:	4b28      	ldr	r3, [pc, #160]	; (80013d8 <SIMCOM_DMA_IrqHandler+0x530>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a2a      	ldr	r2, [pc, #168]	; (80013e4 <SIMCOM_DMA_IrqHandler+0x53c>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d06c      	beq.n	8001418 <SIMCOM_DMA_IrqHandler+0x570>
 800133e:	4b26      	ldr	r3, [pc, #152]	; (80013d8 <SIMCOM_DMA_IrqHandler+0x530>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a29      	ldr	r2, [pc, #164]	; (80013e8 <SIMCOM_DMA_IrqHandler+0x540>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d042      	beq.n	80013ce <SIMCOM_DMA_IrqHandler+0x526>
 8001348:	4b23      	ldr	r3, [pc, #140]	; (80013d8 <SIMCOM_DMA_IrqHandler+0x530>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a27      	ldr	r2, [pc, #156]	; (80013ec <SIMCOM_DMA_IrqHandler+0x544>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d03a      	beq.n	80013c8 <SIMCOM_DMA_IrqHandler+0x520>
 8001352:	4b21      	ldr	r3, [pc, #132]	; (80013d8 <SIMCOM_DMA_IrqHandler+0x530>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a26      	ldr	r2, [pc, #152]	; (80013f0 <SIMCOM_DMA_IrqHandler+0x548>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d032      	beq.n	80013c2 <SIMCOM_DMA_IrqHandler+0x51a>
 800135c:	4b1e      	ldr	r3, [pc, #120]	; (80013d8 <SIMCOM_DMA_IrqHandler+0x530>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a24      	ldr	r2, [pc, #144]	; (80013f4 <SIMCOM_DMA_IrqHandler+0x54c>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d02a      	beq.n	80013bc <SIMCOM_DMA_IrqHandler+0x514>
 8001366:	4b1c      	ldr	r3, [pc, #112]	; (80013d8 <SIMCOM_DMA_IrqHandler+0x530>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a23      	ldr	r2, [pc, #140]	; (80013f8 <SIMCOM_DMA_IrqHandler+0x550>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d022      	beq.n	80013b6 <SIMCOM_DMA_IrqHandler+0x50e>
 8001370:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <SIMCOM_DMA_IrqHandler+0x530>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a21      	ldr	r2, [pc, #132]	; (80013fc <SIMCOM_DMA_IrqHandler+0x554>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d01a      	beq.n	80013b0 <SIMCOM_DMA_IrqHandler+0x508>
 800137a:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <SIMCOM_DMA_IrqHandler+0x530>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a20      	ldr	r2, [pc, #128]	; (8001400 <SIMCOM_DMA_IrqHandler+0x558>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d012      	beq.n	80013aa <SIMCOM_DMA_IrqHandler+0x502>
 8001384:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <SIMCOM_DMA_IrqHandler+0x530>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a1e      	ldr	r2, [pc, #120]	; (8001404 <SIMCOM_DMA_IrqHandler+0x55c>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d00a      	beq.n	80013a4 <SIMCOM_DMA_IrqHandler+0x4fc>
 800138e:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <SIMCOM_DMA_IrqHandler+0x530>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a1d      	ldr	r2, [pc, #116]	; (8001408 <SIMCOM_DMA_IrqHandler+0x560>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d102      	bne.n	800139e <SIMCOM_DMA_IrqHandler+0x4f6>
 8001398:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800139c:	e041      	b.n	8001422 <SIMCOM_DMA_IrqHandler+0x57a>
 800139e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80013a2:	e03e      	b.n	8001422 <SIMCOM_DMA_IrqHandler+0x57a>
 80013a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013a8:	e03b      	b.n	8001422 <SIMCOM_DMA_IrqHandler+0x57a>
 80013aa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013ae:	e038      	b.n	8001422 <SIMCOM_DMA_IrqHandler+0x57a>
 80013b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013b4:	e035      	b.n	8001422 <SIMCOM_DMA_IrqHandler+0x57a>
 80013b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013ba:	e032      	b.n	8001422 <SIMCOM_DMA_IrqHandler+0x57a>
 80013bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013c0:	e02f      	b.n	8001422 <SIMCOM_DMA_IrqHandler+0x57a>
 80013c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013c6:	e02c      	b.n	8001422 <SIMCOM_DMA_IrqHandler+0x57a>
 80013c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013cc:	e029      	b.n	8001422 <SIMCOM_DMA_IrqHandler+0x57a>
 80013ce:	2320      	movs	r3, #32
 80013d0:	e027      	b.n	8001422 <SIMCOM_DMA_IrqHandler+0x57a>
 80013d2:	bf00      	nop
 80013d4:	40026000 	.word	0x40026000
 80013d8:	20000c90 	.word	0x20000c90
 80013dc:	40026010 	.word	0x40026010
 80013e0:	40026410 	.word	0x40026410
 80013e4:	40026070 	.word	0x40026070
 80013e8:	40026470 	.word	0x40026470
 80013ec:	40026028 	.word	0x40026028
 80013f0:	40026428 	.word	0x40026428
 80013f4:	40026088 	.word	0x40026088
 80013f8:	40026488 	.word	0x40026488
 80013fc:	40026040 	.word	0x40026040
 8001400:	40026440 	.word	0x40026440
 8001404:	400260a0 	.word	0x400260a0
 8001408:	400264a0 	.word	0x400264a0
 800140c:	40026458 	.word	0x40026458
 8001410:	40026400 	.word	0x40026400
 8001414:	400260b8 	.word	0x400260b8
 8001418:	2320      	movs	r3, #32
 800141a:	e002      	b.n	8001422 <SIMCOM_DMA_IrqHandler+0x57a>
 800141c:	2320      	movs	r3, #32
 800141e:	e000      	b.n	8001422 <SIMCOM_DMA_IrqHandler+0x57a>
 8001420:	2320      	movs	r3, #32
 8001422:	4a9b      	ldr	r2, [pc, #620]	; (8001690 <SIMCOM_DMA_IrqHandler+0x7e8>)
 8001424:	6093      	str	r3, [r2, #8]
 8001426:	e0c6      	b.n	80015b6 <SIMCOM_DMA_IrqHandler+0x70e>
 8001428:	4b9a      	ldr	r3, [pc, #616]	; (8001694 <SIMCOM_DMA_IrqHandler+0x7ec>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	4b9a      	ldr	r3, [pc, #616]	; (8001698 <SIMCOM_DMA_IrqHandler+0x7f0>)
 8001430:	429a      	cmp	r2, r3
 8001432:	d960      	bls.n	80014f6 <SIMCOM_DMA_IrqHandler+0x64e>
 8001434:	4b97      	ldr	r3, [pc, #604]	; (8001694 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a98      	ldr	r2, [pc, #608]	; (800169c <SIMCOM_DMA_IrqHandler+0x7f4>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d057      	beq.n	80014ee <SIMCOM_DMA_IrqHandler+0x646>
 800143e:	4b95      	ldr	r3, [pc, #596]	; (8001694 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a97      	ldr	r2, [pc, #604]	; (80016a0 <SIMCOM_DMA_IrqHandler+0x7f8>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d050      	beq.n	80014ea <SIMCOM_DMA_IrqHandler+0x642>
 8001448:	4b92      	ldr	r3, [pc, #584]	; (8001694 <SIMCOM_DMA_IrqHandler+0x7ec>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a95      	ldr	r2, [pc, #596]	; (80016a4 <SIMCOM_DMA_IrqHandler+0x7fc>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d049      	beq.n	80014e6 <SIMCOM_DMA_IrqHandler+0x63e>
 8001452:	4b90      	ldr	r3, [pc, #576]	; (8001694 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a94      	ldr	r2, [pc, #592]	; (80016a8 <SIMCOM_DMA_IrqHandler+0x800>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d042      	beq.n	80014e2 <SIMCOM_DMA_IrqHandler+0x63a>
 800145c:	4b8d      	ldr	r3, [pc, #564]	; (8001694 <SIMCOM_DMA_IrqHandler+0x7ec>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a92      	ldr	r2, [pc, #584]	; (80016ac <SIMCOM_DMA_IrqHandler+0x804>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d03a      	beq.n	80014dc <SIMCOM_DMA_IrqHandler+0x634>
 8001466:	4b8b      	ldr	r3, [pc, #556]	; (8001694 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a91      	ldr	r2, [pc, #580]	; (80016b0 <SIMCOM_DMA_IrqHandler+0x808>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d032      	beq.n	80014d6 <SIMCOM_DMA_IrqHandler+0x62e>
 8001470:	4b88      	ldr	r3, [pc, #544]	; (8001694 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a8f      	ldr	r2, [pc, #572]	; (80016b4 <SIMCOM_DMA_IrqHandler+0x80c>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d02a      	beq.n	80014d0 <SIMCOM_DMA_IrqHandler+0x628>
 800147a:	4b86      	ldr	r3, [pc, #536]	; (8001694 <SIMCOM_DMA_IrqHandler+0x7ec>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a8e      	ldr	r2, [pc, #568]	; (80016b8 <SIMCOM_DMA_IrqHandler+0x810>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d022      	beq.n	80014ca <SIMCOM_DMA_IrqHandler+0x622>
 8001484:	4b83      	ldr	r3, [pc, #524]	; (8001694 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a8c      	ldr	r2, [pc, #560]	; (80016bc <SIMCOM_DMA_IrqHandler+0x814>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d01a      	beq.n	80014c4 <SIMCOM_DMA_IrqHandler+0x61c>
 800148e:	4b81      	ldr	r3, [pc, #516]	; (8001694 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a8b      	ldr	r2, [pc, #556]	; (80016c0 <SIMCOM_DMA_IrqHandler+0x818>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d012      	beq.n	80014be <SIMCOM_DMA_IrqHandler+0x616>
 8001498:	4b7e      	ldr	r3, [pc, #504]	; (8001694 <SIMCOM_DMA_IrqHandler+0x7ec>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a89      	ldr	r2, [pc, #548]	; (80016c4 <SIMCOM_DMA_IrqHandler+0x81c>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d00a      	beq.n	80014b8 <SIMCOM_DMA_IrqHandler+0x610>
 80014a2:	4b7c      	ldr	r3, [pc, #496]	; (8001694 <SIMCOM_DMA_IrqHandler+0x7ec>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a88      	ldr	r2, [pc, #544]	; (80016c8 <SIMCOM_DMA_IrqHandler+0x820>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d102      	bne.n	80014b2 <SIMCOM_DMA_IrqHandler+0x60a>
 80014ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80014b0:	e01e      	b.n	80014f0 <SIMCOM_DMA_IrqHandler+0x648>
 80014b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80014b6:	e01b      	b.n	80014f0 <SIMCOM_DMA_IrqHandler+0x648>
 80014b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80014bc:	e018      	b.n	80014f0 <SIMCOM_DMA_IrqHandler+0x648>
 80014be:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80014c2:	e015      	b.n	80014f0 <SIMCOM_DMA_IrqHandler+0x648>
 80014c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80014c8:	e012      	b.n	80014f0 <SIMCOM_DMA_IrqHandler+0x648>
 80014ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014ce:	e00f      	b.n	80014f0 <SIMCOM_DMA_IrqHandler+0x648>
 80014d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014d4:	e00c      	b.n	80014f0 <SIMCOM_DMA_IrqHandler+0x648>
 80014d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014da:	e009      	b.n	80014f0 <SIMCOM_DMA_IrqHandler+0x648>
 80014dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014e0:	e006      	b.n	80014f0 <SIMCOM_DMA_IrqHandler+0x648>
 80014e2:	2320      	movs	r3, #32
 80014e4:	e004      	b.n	80014f0 <SIMCOM_DMA_IrqHandler+0x648>
 80014e6:	2320      	movs	r3, #32
 80014e8:	e002      	b.n	80014f0 <SIMCOM_DMA_IrqHandler+0x648>
 80014ea:	2320      	movs	r3, #32
 80014ec:	e000      	b.n	80014f0 <SIMCOM_DMA_IrqHandler+0x648>
 80014ee:	2320      	movs	r3, #32
 80014f0:	4a76      	ldr	r2, [pc, #472]	; (80016cc <SIMCOM_DMA_IrqHandler+0x824>)
 80014f2:	60d3      	str	r3, [r2, #12]
 80014f4:	e05f      	b.n	80015b6 <SIMCOM_DMA_IrqHandler+0x70e>
 80014f6:	4b67      	ldr	r3, [pc, #412]	; (8001694 <SIMCOM_DMA_IrqHandler+0x7ec>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a68      	ldr	r2, [pc, #416]	; (800169c <SIMCOM_DMA_IrqHandler+0x7f4>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d057      	beq.n	80015b0 <SIMCOM_DMA_IrqHandler+0x708>
 8001500:	4b64      	ldr	r3, [pc, #400]	; (8001694 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a66      	ldr	r2, [pc, #408]	; (80016a0 <SIMCOM_DMA_IrqHandler+0x7f8>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d050      	beq.n	80015ac <SIMCOM_DMA_IrqHandler+0x704>
 800150a:	4b62      	ldr	r3, [pc, #392]	; (8001694 <SIMCOM_DMA_IrqHandler+0x7ec>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a65      	ldr	r2, [pc, #404]	; (80016a4 <SIMCOM_DMA_IrqHandler+0x7fc>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d049      	beq.n	80015a8 <SIMCOM_DMA_IrqHandler+0x700>
 8001514:	4b5f      	ldr	r3, [pc, #380]	; (8001694 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a63      	ldr	r2, [pc, #396]	; (80016a8 <SIMCOM_DMA_IrqHandler+0x800>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d042      	beq.n	80015a4 <SIMCOM_DMA_IrqHandler+0x6fc>
 800151e:	4b5d      	ldr	r3, [pc, #372]	; (8001694 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a62      	ldr	r2, [pc, #392]	; (80016ac <SIMCOM_DMA_IrqHandler+0x804>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d03a      	beq.n	800159e <SIMCOM_DMA_IrqHandler+0x6f6>
 8001528:	4b5a      	ldr	r3, [pc, #360]	; (8001694 <SIMCOM_DMA_IrqHandler+0x7ec>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a60      	ldr	r2, [pc, #384]	; (80016b0 <SIMCOM_DMA_IrqHandler+0x808>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d032      	beq.n	8001598 <SIMCOM_DMA_IrqHandler+0x6f0>
 8001532:	4b58      	ldr	r3, [pc, #352]	; (8001694 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a5f      	ldr	r2, [pc, #380]	; (80016b4 <SIMCOM_DMA_IrqHandler+0x80c>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d02a      	beq.n	8001592 <SIMCOM_DMA_IrqHandler+0x6ea>
 800153c:	4b55      	ldr	r3, [pc, #340]	; (8001694 <SIMCOM_DMA_IrqHandler+0x7ec>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a5d      	ldr	r2, [pc, #372]	; (80016b8 <SIMCOM_DMA_IrqHandler+0x810>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d022      	beq.n	800158c <SIMCOM_DMA_IrqHandler+0x6e4>
 8001546:	4b53      	ldr	r3, [pc, #332]	; (8001694 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a5c      	ldr	r2, [pc, #368]	; (80016bc <SIMCOM_DMA_IrqHandler+0x814>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d01a      	beq.n	8001586 <SIMCOM_DMA_IrqHandler+0x6de>
 8001550:	4b50      	ldr	r3, [pc, #320]	; (8001694 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a5a      	ldr	r2, [pc, #360]	; (80016c0 <SIMCOM_DMA_IrqHandler+0x818>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d012      	beq.n	8001580 <SIMCOM_DMA_IrqHandler+0x6d8>
 800155a:	4b4e      	ldr	r3, [pc, #312]	; (8001694 <SIMCOM_DMA_IrqHandler+0x7ec>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a59      	ldr	r2, [pc, #356]	; (80016c4 <SIMCOM_DMA_IrqHandler+0x81c>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d00a      	beq.n	800157a <SIMCOM_DMA_IrqHandler+0x6d2>
 8001564:	4b4b      	ldr	r3, [pc, #300]	; (8001694 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a57      	ldr	r2, [pc, #348]	; (80016c8 <SIMCOM_DMA_IrqHandler+0x820>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d102      	bne.n	8001574 <SIMCOM_DMA_IrqHandler+0x6cc>
 800156e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001572:	e01e      	b.n	80015b2 <SIMCOM_DMA_IrqHandler+0x70a>
 8001574:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001578:	e01b      	b.n	80015b2 <SIMCOM_DMA_IrqHandler+0x70a>
 800157a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800157e:	e018      	b.n	80015b2 <SIMCOM_DMA_IrqHandler+0x70a>
 8001580:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001584:	e015      	b.n	80015b2 <SIMCOM_DMA_IrqHandler+0x70a>
 8001586:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800158a:	e012      	b.n	80015b2 <SIMCOM_DMA_IrqHandler+0x70a>
 800158c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001590:	e00f      	b.n	80015b2 <SIMCOM_DMA_IrqHandler+0x70a>
 8001592:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001596:	e00c      	b.n	80015b2 <SIMCOM_DMA_IrqHandler+0x70a>
 8001598:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800159c:	e009      	b.n	80015b2 <SIMCOM_DMA_IrqHandler+0x70a>
 800159e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015a2:	e006      	b.n	80015b2 <SIMCOM_DMA_IrqHandler+0x70a>
 80015a4:	2320      	movs	r3, #32
 80015a6:	e004      	b.n	80015b2 <SIMCOM_DMA_IrqHandler+0x70a>
 80015a8:	2320      	movs	r3, #32
 80015aa:	e002      	b.n	80015b2 <SIMCOM_DMA_IrqHandler+0x70a>
 80015ac:	2320      	movs	r3, #32
 80015ae:	e000      	b.n	80015b2 <SIMCOM_DMA_IrqHandler+0x70a>
 80015b0:	2320      	movs	r3, #32
 80015b2:	4a46      	ldr	r2, [pc, #280]	; (80016cc <SIMCOM_DMA_IrqHandler+0x824>)
 80015b4:	6093      	str	r3, [r2, #8]
        SIMCOM_Check_Buffer();
 80015b6:	f000 fd95 	bl	80020e4 <SIMCOM_Check_Buffer>
}
 80015ba:	f000 bd46 	b.w	800204a <SIMCOM_DMA_IrqHandler+0x11a2>
        __HAL_DMA_CLEAR_FLAG(&hdma_usart1_rx, __HAL_DMA_GET_TE_FLAG_INDEX(&hdma_usart1_rx));
 80015be:	4b35      	ldr	r3, [pc, #212]	; (8001694 <SIMCOM_DMA_IrqHandler+0x7ec>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	461a      	mov	r2, r3
 80015c4:	4b42      	ldr	r3, [pc, #264]	; (80016d0 <SIMCOM_DMA_IrqHandler+0x828>)
 80015c6:	429a      	cmp	r2, r3
 80015c8:	f240 8084 	bls.w	80016d4 <SIMCOM_DMA_IrqHandler+0x82c>
 80015cc:	4b31      	ldr	r3, [pc, #196]	; (8001694 <SIMCOM_DMA_IrqHandler+0x7ec>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a32      	ldr	r2, [pc, #200]	; (800169c <SIMCOM_DMA_IrqHandler+0x7f4>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d057      	beq.n	8001686 <SIMCOM_DMA_IrqHandler+0x7de>
 80015d6:	4b2f      	ldr	r3, [pc, #188]	; (8001694 <SIMCOM_DMA_IrqHandler+0x7ec>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a31      	ldr	r2, [pc, #196]	; (80016a0 <SIMCOM_DMA_IrqHandler+0x7f8>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d050      	beq.n	8001682 <SIMCOM_DMA_IrqHandler+0x7da>
 80015e0:	4b2c      	ldr	r3, [pc, #176]	; (8001694 <SIMCOM_DMA_IrqHandler+0x7ec>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a2f      	ldr	r2, [pc, #188]	; (80016a4 <SIMCOM_DMA_IrqHandler+0x7fc>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d049      	beq.n	800167e <SIMCOM_DMA_IrqHandler+0x7d6>
 80015ea:	4b2a      	ldr	r3, [pc, #168]	; (8001694 <SIMCOM_DMA_IrqHandler+0x7ec>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a2e      	ldr	r2, [pc, #184]	; (80016a8 <SIMCOM_DMA_IrqHandler+0x800>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d042      	beq.n	800167a <SIMCOM_DMA_IrqHandler+0x7d2>
 80015f4:	4b27      	ldr	r3, [pc, #156]	; (8001694 <SIMCOM_DMA_IrqHandler+0x7ec>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a2c      	ldr	r2, [pc, #176]	; (80016ac <SIMCOM_DMA_IrqHandler+0x804>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d03a      	beq.n	8001674 <SIMCOM_DMA_IrqHandler+0x7cc>
 80015fe:	4b25      	ldr	r3, [pc, #148]	; (8001694 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a2b      	ldr	r2, [pc, #172]	; (80016b0 <SIMCOM_DMA_IrqHandler+0x808>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d032      	beq.n	800166e <SIMCOM_DMA_IrqHandler+0x7c6>
 8001608:	4b22      	ldr	r3, [pc, #136]	; (8001694 <SIMCOM_DMA_IrqHandler+0x7ec>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a29      	ldr	r2, [pc, #164]	; (80016b4 <SIMCOM_DMA_IrqHandler+0x80c>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d02a      	beq.n	8001668 <SIMCOM_DMA_IrqHandler+0x7c0>
 8001612:	4b20      	ldr	r3, [pc, #128]	; (8001694 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a28      	ldr	r2, [pc, #160]	; (80016b8 <SIMCOM_DMA_IrqHandler+0x810>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d022      	beq.n	8001662 <SIMCOM_DMA_IrqHandler+0x7ba>
 800161c:	4b1d      	ldr	r3, [pc, #116]	; (8001694 <SIMCOM_DMA_IrqHandler+0x7ec>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a26      	ldr	r2, [pc, #152]	; (80016bc <SIMCOM_DMA_IrqHandler+0x814>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d01a      	beq.n	800165c <SIMCOM_DMA_IrqHandler+0x7b4>
 8001626:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a25      	ldr	r2, [pc, #148]	; (80016c0 <SIMCOM_DMA_IrqHandler+0x818>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d012      	beq.n	8001656 <SIMCOM_DMA_IrqHandler+0x7ae>
 8001630:	4b18      	ldr	r3, [pc, #96]	; (8001694 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a23      	ldr	r2, [pc, #140]	; (80016c4 <SIMCOM_DMA_IrqHandler+0x81c>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d00a      	beq.n	8001650 <SIMCOM_DMA_IrqHandler+0x7a8>
 800163a:	4b16      	ldr	r3, [pc, #88]	; (8001694 <SIMCOM_DMA_IrqHandler+0x7ec>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a22      	ldr	r2, [pc, #136]	; (80016c8 <SIMCOM_DMA_IrqHandler+0x820>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d102      	bne.n	800164a <SIMCOM_DMA_IrqHandler+0x7a2>
 8001644:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001648:	e01e      	b.n	8001688 <SIMCOM_DMA_IrqHandler+0x7e0>
 800164a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800164e:	e01b      	b.n	8001688 <SIMCOM_DMA_IrqHandler+0x7e0>
 8001650:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001654:	e018      	b.n	8001688 <SIMCOM_DMA_IrqHandler+0x7e0>
 8001656:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800165a:	e015      	b.n	8001688 <SIMCOM_DMA_IrqHandler+0x7e0>
 800165c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001660:	e012      	b.n	8001688 <SIMCOM_DMA_IrqHandler+0x7e0>
 8001662:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001666:	e00f      	b.n	8001688 <SIMCOM_DMA_IrqHandler+0x7e0>
 8001668:	f44f 7300 	mov.w	r3, #512	; 0x200
 800166c:	e00c      	b.n	8001688 <SIMCOM_DMA_IrqHandler+0x7e0>
 800166e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001672:	e009      	b.n	8001688 <SIMCOM_DMA_IrqHandler+0x7e0>
 8001674:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001678:	e006      	b.n	8001688 <SIMCOM_DMA_IrqHandler+0x7e0>
 800167a:	2308      	movs	r3, #8
 800167c:	e004      	b.n	8001688 <SIMCOM_DMA_IrqHandler+0x7e0>
 800167e:	2308      	movs	r3, #8
 8001680:	e002      	b.n	8001688 <SIMCOM_DMA_IrqHandler+0x7e0>
 8001682:	2308      	movs	r3, #8
 8001684:	e000      	b.n	8001688 <SIMCOM_DMA_IrqHandler+0x7e0>
 8001686:	2308      	movs	r3, #8
 8001688:	4a01      	ldr	r2, [pc, #4]	; (8001690 <SIMCOM_DMA_IrqHandler+0x7e8>)
 800168a:	60d3      	str	r3, [r2, #12]
 800168c:	e173      	b.n	8001976 <SIMCOM_DMA_IrqHandler+0xace>
 800168e:	bf00      	nop
 8001690:	40026400 	.word	0x40026400
 8001694:	20000c90 	.word	0x20000c90
 8001698:	40026058 	.word	0x40026058
 800169c:	40026010 	.word	0x40026010
 80016a0:	40026410 	.word	0x40026410
 80016a4:	40026070 	.word	0x40026070
 80016a8:	40026470 	.word	0x40026470
 80016ac:	40026028 	.word	0x40026028
 80016b0:	40026428 	.word	0x40026428
 80016b4:	40026088 	.word	0x40026088
 80016b8:	40026488 	.word	0x40026488
 80016bc:	40026040 	.word	0x40026040
 80016c0:	40026440 	.word	0x40026440
 80016c4:	400260a0 	.word	0x400260a0
 80016c8:	400264a0 	.word	0x400264a0
 80016cc:	40026000 	.word	0x40026000
 80016d0:	40026458 	.word	0x40026458
 80016d4:	4b95      	ldr	r3, [pc, #596]	; (800192c <SIMCOM_DMA_IrqHandler+0xa84>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	461a      	mov	r2, r3
 80016da:	4b95      	ldr	r3, [pc, #596]	; (8001930 <SIMCOM_DMA_IrqHandler+0xa88>)
 80016dc:	429a      	cmp	r2, r3
 80016de:	d960      	bls.n	80017a2 <SIMCOM_DMA_IrqHandler+0x8fa>
 80016e0:	4b92      	ldr	r3, [pc, #584]	; (800192c <SIMCOM_DMA_IrqHandler+0xa84>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a93      	ldr	r2, [pc, #588]	; (8001934 <SIMCOM_DMA_IrqHandler+0xa8c>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d057      	beq.n	800179a <SIMCOM_DMA_IrqHandler+0x8f2>
 80016ea:	4b90      	ldr	r3, [pc, #576]	; (800192c <SIMCOM_DMA_IrqHandler+0xa84>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a92      	ldr	r2, [pc, #584]	; (8001938 <SIMCOM_DMA_IrqHandler+0xa90>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d050      	beq.n	8001796 <SIMCOM_DMA_IrqHandler+0x8ee>
 80016f4:	4b8d      	ldr	r3, [pc, #564]	; (800192c <SIMCOM_DMA_IrqHandler+0xa84>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a90      	ldr	r2, [pc, #576]	; (800193c <SIMCOM_DMA_IrqHandler+0xa94>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d049      	beq.n	8001792 <SIMCOM_DMA_IrqHandler+0x8ea>
 80016fe:	4b8b      	ldr	r3, [pc, #556]	; (800192c <SIMCOM_DMA_IrqHandler+0xa84>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a8f      	ldr	r2, [pc, #572]	; (8001940 <SIMCOM_DMA_IrqHandler+0xa98>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d042      	beq.n	800178e <SIMCOM_DMA_IrqHandler+0x8e6>
 8001708:	4b88      	ldr	r3, [pc, #544]	; (800192c <SIMCOM_DMA_IrqHandler+0xa84>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a8d      	ldr	r2, [pc, #564]	; (8001944 <SIMCOM_DMA_IrqHandler+0xa9c>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d03a      	beq.n	8001788 <SIMCOM_DMA_IrqHandler+0x8e0>
 8001712:	4b86      	ldr	r3, [pc, #536]	; (800192c <SIMCOM_DMA_IrqHandler+0xa84>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a8c      	ldr	r2, [pc, #560]	; (8001948 <SIMCOM_DMA_IrqHandler+0xaa0>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d032      	beq.n	8001782 <SIMCOM_DMA_IrqHandler+0x8da>
 800171c:	4b83      	ldr	r3, [pc, #524]	; (800192c <SIMCOM_DMA_IrqHandler+0xa84>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a8a      	ldr	r2, [pc, #552]	; (800194c <SIMCOM_DMA_IrqHandler+0xaa4>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d02a      	beq.n	800177c <SIMCOM_DMA_IrqHandler+0x8d4>
 8001726:	4b81      	ldr	r3, [pc, #516]	; (800192c <SIMCOM_DMA_IrqHandler+0xa84>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a89      	ldr	r2, [pc, #548]	; (8001950 <SIMCOM_DMA_IrqHandler+0xaa8>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d022      	beq.n	8001776 <SIMCOM_DMA_IrqHandler+0x8ce>
 8001730:	4b7e      	ldr	r3, [pc, #504]	; (800192c <SIMCOM_DMA_IrqHandler+0xa84>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a87      	ldr	r2, [pc, #540]	; (8001954 <SIMCOM_DMA_IrqHandler+0xaac>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d01a      	beq.n	8001770 <SIMCOM_DMA_IrqHandler+0x8c8>
 800173a:	4b7c      	ldr	r3, [pc, #496]	; (800192c <SIMCOM_DMA_IrqHandler+0xa84>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a86      	ldr	r2, [pc, #536]	; (8001958 <SIMCOM_DMA_IrqHandler+0xab0>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d012      	beq.n	800176a <SIMCOM_DMA_IrqHandler+0x8c2>
 8001744:	4b79      	ldr	r3, [pc, #484]	; (800192c <SIMCOM_DMA_IrqHandler+0xa84>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a84      	ldr	r2, [pc, #528]	; (800195c <SIMCOM_DMA_IrqHandler+0xab4>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d00a      	beq.n	8001764 <SIMCOM_DMA_IrqHandler+0x8bc>
 800174e:	4b77      	ldr	r3, [pc, #476]	; (800192c <SIMCOM_DMA_IrqHandler+0xa84>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a83      	ldr	r2, [pc, #524]	; (8001960 <SIMCOM_DMA_IrqHandler+0xab8>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d102      	bne.n	800175e <SIMCOM_DMA_IrqHandler+0x8b6>
 8001758:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800175c:	e01e      	b.n	800179c <SIMCOM_DMA_IrqHandler+0x8f4>
 800175e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001762:	e01b      	b.n	800179c <SIMCOM_DMA_IrqHandler+0x8f4>
 8001764:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001768:	e018      	b.n	800179c <SIMCOM_DMA_IrqHandler+0x8f4>
 800176a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800176e:	e015      	b.n	800179c <SIMCOM_DMA_IrqHandler+0x8f4>
 8001770:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001774:	e012      	b.n	800179c <SIMCOM_DMA_IrqHandler+0x8f4>
 8001776:	f44f 7300 	mov.w	r3, #512	; 0x200
 800177a:	e00f      	b.n	800179c <SIMCOM_DMA_IrqHandler+0x8f4>
 800177c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001780:	e00c      	b.n	800179c <SIMCOM_DMA_IrqHandler+0x8f4>
 8001782:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001786:	e009      	b.n	800179c <SIMCOM_DMA_IrqHandler+0x8f4>
 8001788:	f44f 7300 	mov.w	r3, #512	; 0x200
 800178c:	e006      	b.n	800179c <SIMCOM_DMA_IrqHandler+0x8f4>
 800178e:	2308      	movs	r3, #8
 8001790:	e004      	b.n	800179c <SIMCOM_DMA_IrqHandler+0x8f4>
 8001792:	2308      	movs	r3, #8
 8001794:	e002      	b.n	800179c <SIMCOM_DMA_IrqHandler+0x8f4>
 8001796:	2308      	movs	r3, #8
 8001798:	e000      	b.n	800179c <SIMCOM_DMA_IrqHandler+0x8f4>
 800179a:	2308      	movs	r3, #8
 800179c:	4a71      	ldr	r2, [pc, #452]	; (8001964 <SIMCOM_DMA_IrqHandler+0xabc>)
 800179e:	6093      	str	r3, [r2, #8]
 80017a0:	e0e9      	b.n	8001976 <SIMCOM_DMA_IrqHandler+0xace>
 80017a2:	4b62      	ldr	r3, [pc, #392]	; (800192c <SIMCOM_DMA_IrqHandler+0xa84>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	461a      	mov	r2, r3
 80017a8:	4b6f      	ldr	r3, [pc, #444]	; (8001968 <SIMCOM_DMA_IrqHandler+0xac0>)
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d960      	bls.n	8001870 <SIMCOM_DMA_IrqHandler+0x9c8>
 80017ae:	4b5f      	ldr	r3, [pc, #380]	; (800192c <SIMCOM_DMA_IrqHandler+0xa84>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a60      	ldr	r2, [pc, #384]	; (8001934 <SIMCOM_DMA_IrqHandler+0xa8c>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d057      	beq.n	8001868 <SIMCOM_DMA_IrqHandler+0x9c0>
 80017b8:	4b5c      	ldr	r3, [pc, #368]	; (800192c <SIMCOM_DMA_IrqHandler+0xa84>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a5e      	ldr	r2, [pc, #376]	; (8001938 <SIMCOM_DMA_IrqHandler+0xa90>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d050      	beq.n	8001864 <SIMCOM_DMA_IrqHandler+0x9bc>
 80017c2:	4b5a      	ldr	r3, [pc, #360]	; (800192c <SIMCOM_DMA_IrqHandler+0xa84>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a5d      	ldr	r2, [pc, #372]	; (800193c <SIMCOM_DMA_IrqHandler+0xa94>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d049      	beq.n	8001860 <SIMCOM_DMA_IrqHandler+0x9b8>
 80017cc:	4b57      	ldr	r3, [pc, #348]	; (800192c <SIMCOM_DMA_IrqHandler+0xa84>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a5b      	ldr	r2, [pc, #364]	; (8001940 <SIMCOM_DMA_IrqHandler+0xa98>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d042      	beq.n	800185c <SIMCOM_DMA_IrqHandler+0x9b4>
 80017d6:	4b55      	ldr	r3, [pc, #340]	; (800192c <SIMCOM_DMA_IrqHandler+0xa84>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a5a      	ldr	r2, [pc, #360]	; (8001944 <SIMCOM_DMA_IrqHandler+0xa9c>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d03a      	beq.n	8001856 <SIMCOM_DMA_IrqHandler+0x9ae>
 80017e0:	4b52      	ldr	r3, [pc, #328]	; (800192c <SIMCOM_DMA_IrqHandler+0xa84>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a58      	ldr	r2, [pc, #352]	; (8001948 <SIMCOM_DMA_IrqHandler+0xaa0>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d032      	beq.n	8001850 <SIMCOM_DMA_IrqHandler+0x9a8>
 80017ea:	4b50      	ldr	r3, [pc, #320]	; (800192c <SIMCOM_DMA_IrqHandler+0xa84>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a57      	ldr	r2, [pc, #348]	; (800194c <SIMCOM_DMA_IrqHandler+0xaa4>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d02a      	beq.n	800184a <SIMCOM_DMA_IrqHandler+0x9a2>
 80017f4:	4b4d      	ldr	r3, [pc, #308]	; (800192c <SIMCOM_DMA_IrqHandler+0xa84>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a55      	ldr	r2, [pc, #340]	; (8001950 <SIMCOM_DMA_IrqHandler+0xaa8>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d022      	beq.n	8001844 <SIMCOM_DMA_IrqHandler+0x99c>
 80017fe:	4b4b      	ldr	r3, [pc, #300]	; (800192c <SIMCOM_DMA_IrqHandler+0xa84>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a54      	ldr	r2, [pc, #336]	; (8001954 <SIMCOM_DMA_IrqHandler+0xaac>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d01a      	beq.n	800183e <SIMCOM_DMA_IrqHandler+0x996>
 8001808:	4b48      	ldr	r3, [pc, #288]	; (800192c <SIMCOM_DMA_IrqHandler+0xa84>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a52      	ldr	r2, [pc, #328]	; (8001958 <SIMCOM_DMA_IrqHandler+0xab0>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d012      	beq.n	8001838 <SIMCOM_DMA_IrqHandler+0x990>
 8001812:	4b46      	ldr	r3, [pc, #280]	; (800192c <SIMCOM_DMA_IrqHandler+0xa84>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a51      	ldr	r2, [pc, #324]	; (800195c <SIMCOM_DMA_IrqHandler+0xab4>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d00a      	beq.n	8001832 <SIMCOM_DMA_IrqHandler+0x98a>
 800181c:	4b43      	ldr	r3, [pc, #268]	; (800192c <SIMCOM_DMA_IrqHandler+0xa84>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a4f      	ldr	r2, [pc, #316]	; (8001960 <SIMCOM_DMA_IrqHandler+0xab8>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d102      	bne.n	800182c <SIMCOM_DMA_IrqHandler+0x984>
 8001826:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800182a:	e01e      	b.n	800186a <SIMCOM_DMA_IrqHandler+0x9c2>
 800182c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001830:	e01b      	b.n	800186a <SIMCOM_DMA_IrqHandler+0x9c2>
 8001832:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001836:	e018      	b.n	800186a <SIMCOM_DMA_IrqHandler+0x9c2>
 8001838:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800183c:	e015      	b.n	800186a <SIMCOM_DMA_IrqHandler+0x9c2>
 800183e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001842:	e012      	b.n	800186a <SIMCOM_DMA_IrqHandler+0x9c2>
 8001844:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001848:	e00f      	b.n	800186a <SIMCOM_DMA_IrqHandler+0x9c2>
 800184a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800184e:	e00c      	b.n	800186a <SIMCOM_DMA_IrqHandler+0x9c2>
 8001850:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001854:	e009      	b.n	800186a <SIMCOM_DMA_IrqHandler+0x9c2>
 8001856:	f44f 7300 	mov.w	r3, #512	; 0x200
 800185a:	e006      	b.n	800186a <SIMCOM_DMA_IrqHandler+0x9c2>
 800185c:	2308      	movs	r3, #8
 800185e:	e004      	b.n	800186a <SIMCOM_DMA_IrqHandler+0x9c2>
 8001860:	2308      	movs	r3, #8
 8001862:	e002      	b.n	800186a <SIMCOM_DMA_IrqHandler+0x9c2>
 8001864:	2308      	movs	r3, #8
 8001866:	e000      	b.n	800186a <SIMCOM_DMA_IrqHandler+0x9c2>
 8001868:	2308      	movs	r3, #8
 800186a:	4a40      	ldr	r2, [pc, #256]	; (800196c <SIMCOM_DMA_IrqHandler+0xac4>)
 800186c:	60d3      	str	r3, [r2, #12]
 800186e:	e082      	b.n	8001976 <SIMCOM_DMA_IrqHandler+0xace>
 8001870:	4b2e      	ldr	r3, [pc, #184]	; (800192c <SIMCOM_DMA_IrqHandler+0xa84>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a2f      	ldr	r2, [pc, #188]	; (8001934 <SIMCOM_DMA_IrqHandler+0xa8c>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d07a      	beq.n	8001970 <SIMCOM_DMA_IrqHandler+0xac8>
 800187a:	4b2c      	ldr	r3, [pc, #176]	; (800192c <SIMCOM_DMA_IrqHandler+0xa84>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a2e      	ldr	r2, [pc, #184]	; (8001938 <SIMCOM_DMA_IrqHandler+0xa90>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d050      	beq.n	8001926 <SIMCOM_DMA_IrqHandler+0xa7e>
 8001884:	4b29      	ldr	r3, [pc, #164]	; (800192c <SIMCOM_DMA_IrqHandler+0xa84>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a2c      	ldr	r2, [pc, #176]	; (800193c <SIMCOM_DMA_IrqHandler+0xa94>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d049      	beq.n	8001922 <SIMCOM_DMA_IrqHandler+0xa7a>
 800188e:	4b27      	ldr	r3, [pc, #156]	; (800192c <SIMCOM_DMA_IrqHandler+0xa84>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a2b      	ldr	r2, [pc, #172]	; (8001940 <SIMCOM_DMA_IrqHandler+0xa98>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d042      	beq.n	800191e <SIMCOM_DMA_IrqHandler+0xa76>
 8001898:	4b24      	ldr	r3, [pc, #144]	; (800192c <SIMCOM_DMA_IrqHandler+0xa84>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a29      	ldr	r2, [pc, #164]	; (8001944 <SIMCOM_DMA_IrqHandler+0xa9c>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d03a      	beq.n	8001918 <SIMCOM_DMA_IrqHandler+0xa70>
 80018a2:	4b22      	ldr	r3, [pc, #136]	; (800192c <SIMCOM_DMA_IrqHandler+0xa84>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a28      	ldr	r2, [pc, #160]	; (8001948 <SIMCOM_DMA_IrqHandler+0xaa0>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d032      	beq.n	8001912 <SIMCOM_DMA_IrqHandler+0xa6a>
 80018ac:	4b1f      	ldr	r3, [pc, #124]	; (800192c <SIMCOM_DMA_IrqHandler+0xa84>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a26      	ldr	r2, [pc, #152]	; (800194c <SIMCOM_DMA_IrqHandler+0xaa4>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d02a      	beq.n	800190c <SIMCOM_DMA_IrqHandler+0xa64>
 80018b6:	4b1d      	ldr	r3, [pc, #116]	; (800192c <SIMCOM_DMA_IrqHandler+0xa84>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a25      	ldr	r2, [pc, #148]	; (8001950 <SIMCOM_DMA_IrqHandler+0xaa8>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d022      	beq.n	8001906 <SIMCOM_DMA_IrqHandler+0xa5e>
 80018c0:	4b1a      	ldr	r3, [pc, #104]	; (800192c <SIMCOM_DMA_IrqHandler+0xa84>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a23      	ldr	r2, [pc, #140]	; (8001954 <SIMCOM_DMA_IrqHandler+0xaac>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d01a      	beq.n	8001900 <SIMCOM_DMA_IrqHandler+0xa58>
 80018ca:	4b18      	ldr	r3, [pc, #96]	; (800192c <SIMCOM_DMA_IrqHandler+0xa84>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a22      	ldr	r2, [pc, #136]	; (8001958 <SIMCOM_DMA_IrqHandler+0xab0>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d012      	beq.n	80018fa <SIMCOM_DMA_IrqHandler+0xa52>
 80018d4:	4b15      	ldr	r3, [pc, #84]	; (800192c <SIMCOM_DMA_IrqHandler+0xa84>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a20      	ldr	r2, [pc, #128]	; (800195c <SIMCOM_DMA_IrqHandler+0xab4>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d00a      	beq.n	80018f4 <SIMCOM_DMA_IrqHandler+0xa4c>
 80018de:	4b13      	ldr	r3, [pc, #76]	; (800192c <SIMCOM_DMA_IrqHandler+0xa84>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a1f      	ldr	r2, [pc, #124]	; (8001960 <SIMCOM_DMA_IrqHandler+0xab8>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d102      	bne.n	80018ee <SIMCOM_DMA_IrqHandler+0xa46>
 80018e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80018ec:	e041      	b.n	8001972 <SIMCOM_DMA_IrqHandler+0xaca>
 80018ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018f2:	e03e      	b.n	8001972 <SIMCOM_DMA_IrqHandler+0xaca>
 80018f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80018f8:	e03b      	b.n	8001972 <SIMCOM_DMA_IrqHandler+0xaca>
 80018fa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80018fe:	e038      	b.n	8001972 <SIMCOM_DMA_IrqHandler+0xaca>
 8001900:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001904:	e035      	b.n	8001972 <SIMCOM_DMA_IrqHandler+0xaca>
 8001906:	f44f 7300 	mov.w	r3, #512	; 0x200
 800190a:	e032      	b.n	8001972 <SIMCOM_DMA_IrqHandler+0xaca>
 800190c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001910:	e02f      	b.n	8001972 <SIMCOM_DMA_IrqHandler+0xaca>
 8001912:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001916:	e02c      	b.n	8001972 <SIMCOM_DMA_IrqHandler+0xaca>
 8001918:	f44f 7300 	mov.w	r3, #512	; 0x200
 800191c:	e029      	b.n	8001972 <SIMCOM_DMA_IrqHandler+0xaca>
 800191e:	2308      	movs	r3, #8
 8001920:	e027      	b.n	8001972 <SIMCOM_DMA_IrqHandler+0xaca>
 8001922:	2308      	movs	r3, #8
 8001924:	e025      	b.n	8001972 <SIMCOM_DMA_IrqHandler+0xaca>
 8001926:	2308      	movs	r3, #8
 8001928:	e023      	b.n	8001972 <SIMCOM_DMA_IrqHandler+0xaca>
 800192a:	bf00      	nop
 800192c:	20000c90 	.word	0x20000c90
 8001930:	400260b8 	.word	0x400260b8
 8001934:	40026010 	.word	0x40026010
 8001938:	40026410 	.word	0x40026410
 800193c:	40026070 	.word	0x40026070
 8001940:	40026470 	.word	0x40026470
 8001944:	40026028 	.word	0x40026028
 8001948:	40026428 	.word	0x40026428
 800194c:	40026088 	.word	0x40026088
 8001950:	40026488 	.word	0x40026488
 8001954:	40026040 	.word	0x40026040
 8001958:	40026440 	.word	0x40026440
 800195c:	400260a0 	.word	0x400260a0
 8001960:	400264a0 	.word	0x400264a0
 8001964:	40026400 	.word	0x40026400
 8001968:	40026058 	.word	0x40026058
 800196c:	40026000 	.word	0x40026000
 8001970:	2308      	movs	r3, #8
 8001972:	4a96      	ldr	r2, [pc, #600]	; (8001bcc <SIMCOM_DMA_IrqHandler+0xd24>)
 8001974:	6093      	str	r3, [r2, #8]
        __HAL_DMA_CLEAR_FLAG(&hdma_usart1_rx, __HAL_DMA_GET_FE_FLAG_INDEX(&hdma_usart1_rx));
 8001976:	4b96      	ldr	r3, [pc, #600]	; (8001bd0 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	461a      	mov	r2, r3
 800197c:	4b95      	ldr	r3, [pc, #596]	; (8001bd4 <SIMCOM_DMA_IrqHandler+0xd2c>)
 800197e:	429a      	cmp	r2, r3
 8001980:	d95c      	bls.n	8001a3c <SIMCOM_DMA_IrqHandler+0xb94>
 8001982:	4b93      	ldr	r3, [pc, #588]	; (8001bd0 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a94      	ldr	r2, [pc, #592]	; (8001bd8 <SIMCOM_DMA_IrqHandler+0xd30>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d053      	beq.n	8001a34 <SIMCOM_DMA_IrqHandler+0xb8c>
 800198c:	4b90      	ldr	r3, [pc, #576]	; (8001bd0 <SIMCOM_DMA_IrqHandler+0xd28>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a92      	ldr	r2, [pc, #584]	; (8001bdc <SIMCOM_DMA_IrqHandler+0xd34>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d04c      	beq.n	8001a30 <SIMCOM_DMA_IrqHandler+0xb88>
 8001996:	4b8e      	ldr	r3, [pc, #568]	; (8001bd0 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a91      	ldr	r2, [pc, #580]	; (8001be0 <SIMCOM_DMA_IrqHandler+0xd38>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d045      	beq.n	8001a2c <SIMCOM_DMA_IrqHandler+0xb84>
 80019a0:	4b8b      	ldr	r3, [pc, #556]	; (8001bd0 <SIMCOM_DMA_IrqHandler+0xd28>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a8f      	ldr	r2, [pc, #572]	; (8001be4 <SIMCOM_DMA_IrqHandler+0xd3c>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d03e      	beq.n	8001a28 <SIMCOM_DMA_IrqHandler+0xb80>
 80019aa:	4b89      	ldr	r3, [pc, #548]	; (8001bd0 <SIMCOM_DMA_IrqHandler+0xd28>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a8e      	ldr	r2, [pc, #568]	; (8001be8 <SIMCOM_DMA_IrqHandler+0xd40>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d037      	beq.n	8001a24 <SIMCOM_DMA_IrqHandler+0xb7c>
 80019b4:	4b86      	ldr	r3, [pc, #536]	; (8001bd0 <SIMCOM_DMA_IrqHandler+0xd28>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a8c      	ldr	r2, [pc, #560]	; (8001bec <SIMCOM_DMA_IrqHandler+0xd44>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d030      	beq.n	8001a20 <SIMCOM_DMA_IrqHandler+0xb78>
 80019be:	4b84      	ldr	r3, [pc, #528]	; (8001bd0 <SIMCOM_DMA_IrqHandler+0xd28>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a8b      	ldr	r2, [pc, #556]	; (8001bf0 <SIMCOM_DMA_IrqHandler+0xd48>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d029      	beq.n	8001a1c <SIMCOM_DMA_IrqHandler+0xb74>
 80019c8:	4b81      	ldr	r3, [pc, #516]	; (8001bd0 <SIMCOM_DMA_IrqHandler+0xd28>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a89      	ldr	r2, [pc, #548]	; (8001bf4 <SIMCOM_DMA_IrqHandler+0xd4c>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d022      	beq.n	8001a18 <SIMCOM_DMA_IrqHandler+0xb70>
 80019d2:	4b7f      	ldr	r3, [pc, #508]	; (8001bd0 <SIMCOM_DMA_IrqHandler+0xd28>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a88      	ldr	r2, [pc, #544]	; (8001bf8 <SIMCOM_DMA_IrqHandler+0xd50>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d01a      	beq.n	8001a12 <SIMCOM_DMA_IrqHandler+0xb6a>
 80019dc:	4b7c      	ldr	r3, [pc, #496]	; (8001bd0 <SIMCOM_DMA_IrqHandler+0xd28>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a86      	ldr	r2, [pc, #536]	; (8001bfc <SIMCOM_DMA_IrqHandler+0xd54>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d012      	beq.n	8001a0c <SIMCOM_DMA_IrqHandler+0xb64>
 80019e6:	4b7a      	ldr	r3, [pc, #488]	; (8001bd0 <SIMCOM_DMA_IrqHandler+0xd28>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a85      	ldr	r2, [pc, #532]	; (8001c00 <SIMCOM_DMA_IrqHandler+0xd58>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d00a      	beq.n	8001a06 <SIMCOM_DMA_IrqHandler+0xb5e>
 80019f0:	4b77      	ldr	r3, [pc, #476]	; (8001bd0 <SIMCOM_DMA_IrqHandler+0xd28>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a83      	ldr	r2, [pc, #524]	; (8001c04 <SIMCOM_DMA_IrqHandler+0xd5c>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d102      	bne.n	8001a00 <SIMCOM_DMA_IrqHandler+0xb58>
 80019fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019fe:	e01a      	b.n	8001a36 <SIMCOM_DMA_IrqHandler+0xb8e>
 8001a00:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a04:	e017      	b.n	8001a36 <SIMCOM_DMA_IrqHandler+0xb8e>
 8001a06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a0a:	e014      	b.n	8001a36 <SIMCOM_DMA_IrqHandler+0xb8e>
 8001a0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a10:	e011      	b.n	8001a36 <SIMCOM_DMA_IrqHandler+0xb8e>
 8001a12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a16:	e00e      	b.n	8001a36 <SIMCOM_DMA_IrqHandler+0xb8e>
 8001a18:	2340      	movs	r3, #64	; 0x40
 8001a1a:	e00c      	b.n	8001a36 <SIMCOM_DMA_IrqHandler+0xb8e>
 8001a1c:	2340      	movs	r3, #64	; 0x40
 8001a1e:	e00a      	b.n	8001a36 <SIMCOM_DMA_IrqHandler+0xb8e>
 8001a20:	2340      	movs	r3, #64	; 0x40
 8001a22:	e008      	b.n	8001a36 <SIMCOM_DMA_IrqHandler+0xb8e>
 8001a24:	2340      	movs	r3, #64	; 0x40
 8001a26:	e006      	b.n	8001a36 <SIMCOM_DMA_IrqHandler+0xb8e>
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e004      	b.n	8001a36 <SIMCOM_DMA_IrqHandler+0xb8e>
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e002      	b.n	8001a36 <SIMCOM_DMA_IrqHandler+0xb8e>
 8001a30:	2301      	movs	r3, #1
 8001a32:	e000      	b.n	8001a36 <SIMCOM_DMA_IrqHandler+0xb8e>
 8001a34:	2301      	movs	r3, #1
 8001a36:	4a74      	ldr	r2, [pc, #464]	; (8001c08 <SIMCOM_DMA_IrqHandler+0xd60>)
 8001a38:	60d3      	str	r3, [r2, #12]
 8001a3a:	e147      	b.n	8001ccc <SIMCOM_DMA_IrqHandler+0xe24>
 8001a3c:	4b64      	ldr	r3, [pc, #400]	; (8001bd0 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	461a      	mov	r2, r3
 8001a42:	4b72      	ldr	r3, [pc, #456]	; (8001c0c <SIMCOM_DMA_IrqHandler+0xd64>)
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d95c      	bls.n	8001b02 <SIMCOM_DMA_IrqHandler+0xc5a>
 8001a48:	4b61      	ldr	r3, [pc, #388]	; (8001bd0 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a62      	ldr	r2, [pc, #392]	; (8001bd8 <SIMCOM_DMA_IrqHandler+0xd30>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d053      	beq.n	8001afa <SIMCOM_DMA_IrqHandler+0xc52>
 8001a52:	4b5f      	ldr	r3, [pc, #380]	; (8001bd0 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a61      	ldr	r2, [pc, #388]	; (8001bdc <SIMCOM_DMA_IrqHandler+0xd34>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d04c      	beq.n	8001af6 <SIMCOM_DMA_IrqHandler+0xc4e>
 8001a5c:	4b5c      	ldr	r3, [pc, #368]	; (8001bd0 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a5f      	ldr	r2, [pc, #380]	; (8001be0 <SIMCOM_DMA_IrqHandler+0xd38>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d045      	beq.n	8001af2 <SIMCOM_DMA_IrqHandler+0xc4a>
 8001a66:	4b5a      	ldr	r3, [pc, #360]	; (8001bd0 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a5e      	ldr	r2, [pc, #376]	; (8001be4 <SIMCOM_DMA_IrqHandler+0xd3c>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d03e      	beq.n	8001aee <SIMCOM_DMA_IrqHandler+0xc46>
 8001a70:	4b57      	ldr	r3, [pc, #348]	; (8001bd0 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a5c      	ldr	r2, [pc, #368]	; (8001be8 <SIMCOM_DMA_IrqHandler+0xd40>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d037      	beq.n	8001aea <SIMCOM_DMA_IrqHandler+0xc42>
 8001a7a:	4b55      	ldr	r3, [pc, #340]	; (8001bd0 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a5b      	ldr	r2, [pc, #364]	; (8001bec <SIMCOM_DMA_IrqHandler+0xd44>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d030      	beq.n	8001ae6 <SIMCOM_DMA_IrqHandler+0xc3e>
 8001a84:	4b52      	ldr	r3, [pc, #328]	; (8001bd0 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a59      	ldr	r2, [pc, #356]	; (8001bf0 <SIMCOM_DMA_IrqHandler+0xd48>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d029      	beq.n	8001ae2 <SIMCOM_DMA_IrqHandler+0xc3a>
 8001a8e:	4b50      	ldr	r3, [pc, #320]	; (8001bd0 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a58      	ldr	r2, [pc, #352]	; (8001bf4 <SIMCOM_DMA_IrqHandler+0xd4c>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d022      	beq.n	8001ade <SIMCOM_DMA_IrqHandler+0xc36>
 8001a98:	4b4d      	ldr	r3, [pc, #308]	; (8001bd0 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a56      	ldr	r2, [pc, #344]	; (8001bf8 <SIMCOM_DMA_IrqHandler+0xd50>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d01a      	beq.n	8001ad8 <SIMCOM_DMA_IrqHandler+0xc30>
 8001aa2:	4b4b      	ldr	r3, [pc, #300]	; (8001bd0 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a55      	ldr	r2, [pc, #340]	; (8001bfc <SIMCOM_DMA_IrqHandler+0xd54>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d012      	beq.n	8001ad2 <SIMCOM_DMA_IrqHandler+0xc2a>
 8001aac:	4b48      	ldr	r3, [pc, #288]	; (8001bd0 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a53      	ldr	r2, [pc, #332]	; (8001c00 <SIMCOM_DMA_IrqHandler+0xd58>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d00a      	beq.n	8001acc <SIMCOM_DMA_IrqHandler+0xc24>
 8001ab6:	4b46      	ldr	r3, [pc, #280]	; (8001bd0 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a52      	ldr	r2, [pc, #328]	; (8001c04 <SIMCOM_DMA_IrqHandler+0xd5c>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d102      	bne.n	8001ac6 <SIMCOM_DMA_IrqHandler+0xc1e>
 8001ac0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ac4:	e01a      	b.n	8001afc <SIMCOM_DMA_IrqHandler+0xc54>
 8001ac6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001aca:	e017      	b.n	8001afc <SIMCOM_DMA_IrqHandler+0xc54>
 8001acc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ad0:	e014      	b.n	8001afc <SIMCOM_DMA_IrqHandler+0xc54>
 8001ad2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ad6:	e011      	b.n	8001afc <SIMCOM_DMA_IrqHandler+0xc54>
 8001ad8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001adc:	e00e      	b.n	8001afc <SIMCOM_DMA_IrqHandler+0xc54>
 8001ade:	2340      	movs	r3, #64	; 0x40
 8001ae0:	e00c      	b.n	8001afc <SIMCOM_DMA_IrqHandler+0xc54>
 8001ae2:	2340      	movs	r3, #64	; 0x40
 8001ae4:	e00a      	b.n	8001afc <SIMCOM_DMA_IrqHandler+0xc54>
 8001ae6:	2340      	movs	r3, #64	; 0x40
 8001ae8:	e008      	b.n	8001afc <SIMCOM_DMA_IrqHandler+0xc54>
 8001aea:	2340      	movs	r3, #64	; 0x40
 8001aec:	e006      	b.n	8001afc <SIMCOM_DMA_IrqHandler+0xc54>
 8001aee:	2301      	movs	r3, #1
 8001af0:	e004      	b.n	8001afc <SIMCOM_DMA_IrqHandler+0xc54>
 8001af2:	2301      	movs	r3, #1
 8001af4:	e002      	b.n	8001afc <SIMCOM_DMA_IrqHandler+0xc54>
 8001af6:	2301      	movs	r3, #1
 8001af8:	e000      	b.n	8001afc <SIMCOM_DMA_IrqHandler+0xc54>
 8001afa:	2301      	movs	r3, #1
 8001afc:	4a42      	ldr	r2, [pc, #264]	; (8001c08 <SIMCOM_DMA_IrqHandler+0xd60>)
 8001afe:	6093      	str	r3, [r2, #8]
 8001b00:	e0e4      	b.n	8001ccc <SIMCOM_DMA_IrqHandler+0xe24>
 8001b02:	4b33      	ldr	r3, [pc, #204]	; (8001bd0 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	461a      	mov	r2, r3
 8001b08:	4b41      	ldr	r3, [pc, #260]	; (8001c10 <SIMCOM_DMA_IrqHandler+0xd68>)
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	f240 8082 	bls.w	8001c14 <SIMCOM_DMA_IrqHandler+0xd6c>
 8001b10:	4b2f      	ldr	r3, [pc, #188]	; (8001bd0 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a30      	ldr	r2, [pc, #192]	; (8001bd8 <SIMCOM_DMA_IrqHandler+0xd30>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d053      	beq.n	8001bc2 <SIMCOM_DMA_IrqHandler+0xd1a>
 8001b1a:	4b2d      	ldr	r3, [pc, #180]	; (8001bd0 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a2f      	ldr	r2, [pc, #188]	; (8001bdc <SIMCOM_DMA_IrqHandler+0xd34>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d04c      	beq.n	8001bbe <SIMCOM_DMA_IrqHandler+0xd16>
 8001b24:	4b2a      	ldr	r3, [pc, #168]	; (8001bd0 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a2d      	ldr	r2, [pc, #180]	; (8001be0 <SIMCOM_DMA_IrqHandler+0xd38>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d045      	beq.n	8001bba <SIMCOM_DMA_IrqHandler+0xd12>
 8001b2e:	4b28      	ldr	r3, [pc, #160]	; (8001bd0 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a2c      	ldr	r2, [pc, #176]	; (8001be4 <SIMCOM_DMA_IrqHandler+0xd3c>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d03e      	beq.n	8001bb6 <SIMCOM_DMA_IrqHandler+0xd0e>
 8001b38:	4b25      	ldr	r3, [pc, #148]	; (8001bd0 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a2a      	ldr	r2, [pc, #168]	; (8001be8 <SIMCOM_DMA_IrqHandler+0xd40>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d037      	beq.n	8001bb2 <SIMCOM_DMA_IrqHandler+0xd0a>
 8001b42:	4b23      	ldr	r3, [pc, #140]	; (8001bd0 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a29      	ldr	r2, [pc, #164]	; (8001bec <SIMCOM_DMA_IrqHandler+0xd44>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d030      	beq.n	8001bae <SIMCOM_DMA_IrqHandler+0xd06>
 8001b4c:	4b20      	ldr	r3, [pc, #128]	; (8001bd0 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a27      	ldr	r2, [pc, #156]	; (8001bf0 <SIMCOM_DMA_IrqHandler+0xd48>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d029      	beq.n	8001baa <SIMCOM_DMA_IrqHandler+0xd02>
 8001b56:	4b1e      	ldr	r3, [pc, #120]	; (8001bd0 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a26      	ldr	r2, [pc, #152]	; (8001bf4 <SIMCOM_DMA_IrqHandler+0xd4c>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d022      	beq.n	8001ba6 <SIMCOM_DMA_IrqHandler+0xcfe>
 8001b60:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a24      	ldr	r2, [pc, #144]	; (8001bf8 <SIMCOM_DMA_IrqHandler+0xd50>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d01a      	beq.n	8001ba0 <SIMCOM_DMA_IrqHandler+0xcf8>
 8001b6a:	4b19      	ldr	r3, [pc, #100]	; (8001bd0 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a23      	ldr	r2, [pc, #140]	; (8001bfc <SIMCOM_DMA_IrqHandler+0xd54>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d012      	beq.n	8001b9a <SIMCOM_DMA_IrqHandler+0xcf2>
 8001b74:	4b16      	ldr	r3, [pc, #88]	; (8001bd0 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a21      	ldr	r2, [pc, #132]	; (8001c00 <SIMCOM_DMA_IrqHandler+0xd58>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d00a      	beq.n	8001b94 <SIMCOM_DMA_IrqHandler+0xcec>
 8001b7e:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a20      	ldr	r2, [pc, #128]	; (8001c04 <SIMCOM_DMA_IrqHandler+0xd5c>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d102      	bne.n	8001b8e <SIMCOM_DMA_IrqHandler+0xce6>
 8001b88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b8c:	e01a      	b.n	8001bc4 <SIMCOM_DMA_IrqHandler+0xd1c>
 8001b8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b92:	e017      	b.n	8001bc4 <SIMCOM_DMA_IrqHandler+0xd1c>
 8001b94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b98:	e014      	b.n	8001bc4 <SIMCOM_DMA_IrqHandler+0xd1c>
 8001b9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b9e:	e011      	b.n	8001bc4 <SIMCOM_DMA_IrqHandler+0xd1c>
 8001ba0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ba4:	e00e      	b.n	8001bc4 <SIMCOM_DMA_IrqHandler+0xd1c>
 8001ba6:	2340      	movs	r3, #64	; 0x40
 8001ba8:	e00c      	b.n	8001bc4 <SIMCOM_DMA_IrqHandler+0xd1c>
 8001baa:	2340      	movs	r3, #64	; 0x40
 8001bac:	e00a      	b.n	8001bc4 <SIMCOM_DMA_IrqHandler+0xd1c>
 8001bae:	2340      	movs	r3, #64	; 0x40
 8001bb0:	e008      	b.n	8001bc4 <SIMCOM_DMA_IrqHandler+0xd1c>
 8001bb2:	2340      	movs	r3, #64	; 0x40
 8001bb4:	e006      	b.n	8001bc4 <SIMCOM_DMA_IrqHandler+0xd1c>
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e004      	b.n	8001bc4 <SIMCOM_DMA_IrqHandler+0xd1c>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e002      	b.n	8001bc4 <SIMCOM_DMA_IrqHandler+0xd1c>
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <SIMCOM_DMA_IrqHandler+0xd1c>
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	4a01      	ldr	r2, [pc, #4]	; (8001bcc <SIMCOM_DMA_IrqHandler+0xd24>)
 8001bc6:	60d3      	str	r3, [r2, #12]
 8001bc8:	e080      	b.n	8001ccc <SIMCOM_DMA_IrqHandler+0xe24>
 8001bca:	bf00      	nop
 8001bcc:	40026000 	.word	0x40026000
 8001bd0:	20000c90 	.word	0x20000c90
 8001bd4:	40026458 	.word	0x40026458
 8001bd8:	40026010 	.word	0x40026010
 8001bdc:	40026410 	.word	0x40026410
 8001be0:	40026070 	.word	0x40026070
 8001be4:	40026470 	.word	0x40026470
 8001be8:	40026028 	.word	0x40026028
 8001bec:	40026428 	.word	0x40026428
 8001bf0:	40026088 	.word	0x40026088
 8001bf4:	40026488 	.word	0x40026488
 8001bf8:	40026040 	.word	0x40026040
 8001bfc:	40026440 	.word	0x40026440
 8001c00:	400260a0 	.word	0x400260a0
 8001c04:	400264a0 	.word	0x400264a0
 8001c08:	40026400 	.word	0x40026400
 8001c0c:	400260b8 	.word	0x400260b8
 8001c10:	40026058 	.word	0x40026058
 8001c14:	4b95      	ldr	r3, [pc, #596]	; (8001e6c <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a95      	ldr	r2, [pc, #596]	; (8001e70 <SIMCOM_DMA_IrqHandler+0xfc8>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d053      	beq.n	8001cc6 <SIMCOM_DMA_IrqHandler+0xe1e>
 8001c1e:	4b93      	ldr	r3, [pc, #588]	; (8001e6c <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a94      	ldr	r2, [pc, #592]	; (8001e74 <SIMCOM_DMA_IrqHandler+0xfcc>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d04c      	beq.n	8001cc2 <SIMCOM_DMA_IrqHandler+0xe1a>
 8001c28:	4b90      	ldr	r3, [pc, #576]	; (8001e6c <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a92      	ldr	r2, [pc, #584]	; (8001e78 <SIMCOM_DMA_IrqHandler+0xfd0>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d045      	beq.n	8001cbe <SIMCOM_DMA_IrqHandler+0xe16>
 8001c32:	4b8e      	ldr	r3, [pc, #568]	; (8001e6c <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a91      	ldr	r2, [pc, #580]	; (8001e7c <SIMCOM_DMA_IrqHandler+0xfd4>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d03e      	beq.n	8001cba <SIMCOM_DMA_IrqHandler+0xe12>
 8001c3c:	4b8b      	ldr	r3, [pc, #556]	; (8001e6c <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a8f      	ldr	r2, [pc, #572]	; (8001e80 <SIMCOM_DMA_IrqHandler+0xfd8>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d037      	beq.n	8001cb6 <SIMCOM_DMA_IrqHandler+0xe0e>
 8001c46:	4b89      	ldr	r3, [pc, #548]	; (8001e6c <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a8e      	ldr	r2, [pc, #568]	; (8001e84 <SIMCOM_DMA_IrqHandler+0xfdc>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d030      	beq.n	8001cb2 <SIMCOM_DMA_IrqHandler+0xe0a>
 8001c50:	4b86      	ldr	r3, [pc, #536]	; (8001e6c <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a8c      	ldr	r2, [pc, #560]	; (8001e88 <SIMCOM_DMA_IrqHandler+0xfe0>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d029      	beq.n	8001cae <SIMCOM_DMA_IrqHandler+0xe06>
 8001c5a:	4b84      	ldr	r3, [pc, #528]	; (8001e6c <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a8b      	ldr	r2, [pc, #556]	; (8001e8c <SIMCOM_DMA_IrqHandler+0xfe4>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d022      	beq.n	8001caa <SIMCOM_DMA_IrqHandler+0xe02>
 8001c64:	4b81      	ldr	r3, [pc, #516]	; (8001e6c <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a89      	ldr	r2, [pc, #548]	; (8001e90 <SIMCOM_DMA_IrqHandler+0xfe8>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d01a      	beq.n	8001ca4 <SIMCOM_DMA_IrqHandler+0xdfc>
 8001c6e:	4b7f      	ldr	r3, [pc, #508]	; (8001e6c <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a88      	ldr	r2, [pc, #544]	; (8001e94 <SIMCOM_DMA_IrqHandler+0xfec>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d012      	beq.n	8001c9e <SIMCOM_DMA_IrqHandler+0xdf6>
 8001c78:	4b7c      	ldr	r3, [pc, #496]	; (8001e6c <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a86      	ldr	r2, [pc, #536]	; (8001e98 <SIMCOM_DMA_IrqHandler+0xff0>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d00a      	beq.n	8001c98 <SIMCOM_DMA_IrqHandler+0xdf0>
 8001c82:	4b7a      	ldr	r3, [pc, #488]	; (8001e6c <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a85      	ldr	r2, [pc, #532]	; (8001e9c <SIMCOM_DMA_IrqHandler+0xff4>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d102      	bne.n	8001c92 <SIMCOM_DMA_IrqHandler+0xdea>
 8001c8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c90:	e01a      	b.n	8001cc8 <SIMCOM_DMA_IrqHandler+0xe20>
 8001c92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c96:	e017      	b.n	8001cc8 <SIMCOM_DMA_IrqHandler+0xe20>
 8001c98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c9c:	e014      	b.n	8001cc8 <SIMCOM_DMA_IrqHandler+0xe20>
 8001c9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ca2:	e011      	b.n	8001cc8 <SIMCOM_DMA_IrqHandler+0xe20>
 8001ca4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ca8:	e00e      	b.n	8001cc8 <SIMCOM_DMA_IrqHandler+0xe20>
 8001caa:	2340      	movs	r3, #64	; 0x40
 8001cac:	e00c      	b.n	8001cc8 <SIMCOM_DMA_IrqHandler+0xe20>
 8001cae:	2340      	movs	r3, #64	; 0x40
 8001cb0:	e00a      	b.n	8001cc8 <SIMCOM_DMA_IrqHandler+0xe20>
 8001cb2:	2340      	movs	r3, #64	; 0x40
 8001cb4:	e008      	b.n	8001cc8 <SIMCOM_DMA_IrqHandler+0xe20>
 8001cb6:	2340      	movs	r3, #64	; 0x40
 8001cb8:	e006      	b.n	8001cc8 <SIMCOM_DMA_IrqHandler+0xe20>
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e004      	b.n	8001cc8 <SIMCOM_DMA_IrqHandler+0xe20>
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e002      	b.n	8001cc8 <SIMCOM_DMA_IrqHandler+0xe20>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e000      	b.n	8001cc8 <SIMCOM_DMA_IrqHandler+0xe20>
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	4a75      	ldr	r2, [pc, #468]	; (8001ea0 <SIMCOM_DMA_IrqHandler+0xff8>)
 8001cca:	6093      	str	r3, [r2, #8]
        __HAL_DMA_CLEAR_FLAG(&hdma_usart1_rx, __HAL_DMA_GET_DME_FLAG_INDEX(&hdma_usart1_rx));
 8001ccc:	4b67      	ldr	r3, [pc, #412]	; (8001e6c <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4b74      	ldr	r3, [pc, #464]	; (8001ea4 <SIMCOM_DMA_IrqHandler+0xffc>)
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d960      	bls.n	8001d9a <SIMCOM_DMA_IrqHandler+0xef2>
 8001cd8:	4b64      	ldr	r3, [pc, #400]	; (8001e6c <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a64      	ldr	r2, [pc, #400]	; (8001e70 <SIMCOM_DMA_IrqHandler+0xfc8>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d057      	beq.n	8001d92 <SIMCOM_DMA_IrqHandler+0xeea>
 8001ce2:	4b62      	ldr	r3, [pc, #392]	; (8001e6c <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a63      	ldr	r2, [pc, #396]	; (8001e74 <SIMCOM_DMA_IrqHandler+0xfcc>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d050      	beq.n	8001d8e <SIMCOM_DMA_IrqHandler+0xee6>
 8001cec:	4b5f      	ldr	r3, [pc, #380]	; (8001e6c <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a61      	ldr	r2, [pc, #388]	; (8001e78 <SIMCOM_DMA_IrqHandler+0xfd0>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d049      	beq.n	8001d8a <SIMCOM_DMA_IrqHandler+0xee2>
 8001cf6:	4b5d      	ldr	r3, [pc, #372]	; (8001e6c <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a60      	ldr	r2, [pc, #384]	; (8001e7c <SIMCOM_DMA_IrqHandler+0xfd4>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d042      	beq.n	8001d86 <SIMCOM_DMA_IrqHandler+0xede>
 8001d00:	4b5a      	ldr	r3, [pc, #360]	; (8001e6c <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a5e      	ldr	r2, [pc, #376]	; (8001e80 <SIMCOM_DMA_IrqHandler+0xfd8>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d03a      	beq.n	8001d80 <SIMCOM_DMA_IrqHandler+0xed8>
 8001d0a:	4b58      	ldr	r3, [pc, #352]	; (8001e6c <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a5d      	ldr	r2, [pc, #372]	; (8001e84 <SIMCOM_DMA_IrqHandler+0xfdc>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d032      	beq.n	8001d7a <SIMCOM_DMA_IrqHandler+0xed2>
 8001d14:	4b55      	ldr	r3, [pc, #340]	; (8001e6c <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a5b      	ldr	r2, [pc, #364]	; (8001e88 <SIMCOM_DMA_IrqHandler+0xfe0>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d02a      	beq.n	8001d74 <SIMCOM_DMA_IrqHandler+0xecc>
 8001d1e:	4b53      	ldr	r3, [pc, #332]	; (8001e6c <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a5a      	ldr	r2, [pc, #360]	; (8001e8c <SIMCOM_DMA_IrqHandler+0xfe4>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d022      	beq.n	8001d6e <SIMCOM_DMA_IrqHandler+0xec6>
 8001d28:	4b50      	ldr	r3, [pc, #320]	; (8001e6c <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a58      	ldr	r2, [pc, #352]	; (8001e90 <SIMCOM_DMA_IrqHandler+0xfe8>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d01a      	beq.n	8001d68 <SIMCOM_DMA_IrqHandler+0xec0>
 8001d32:	4b4e      	ldr	r3, [pc, #312]	; (8001e6c <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a57      	ldr	r2, [pc, #348]	; (8001e94 <SIMCOM_DMA_IrqHandler+0xfec>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d012      	beq.n	8001d62 <SIMCOM_DMA_IrqHandler+0xeba>
 8001d3c:	4b4b      	ldr	r3, [pc, #300]	; (8001e6c <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a55      	ldr	r2, [pc, #340]	; (8001e98 <SIMCOM_DMA_IrqHandler+0xff0>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d00a      	beq.n	8001d5c <SIMCOM_DMA_IrqHandler+0xeb4>
 8001d46:	4b49      	ldr	r3, [pc, #292]	; (8001e6c <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a54      	ldr	r2, [pc, #336]	; (8001e9c <SIMCOM_DMA_IrqHandler+0xff4>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d102      	bne.n	8001d56 <SIMCOM_DMA_IrqHandler+0xeae>
 8001d50:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001d54:	e01e      	b.n	8001d94 <SIMCOM_DMA_IrqHandler+0xeec>
 8001d56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d5a:	e01b      	b.n	8001d94 <SIMCOM_DMA_IrqHandler+0xeec>
 8001d5c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001d60:	e018      	b.n	8001d94 <SIMCOM_DMA_IrqHandler+0xeec>
 8001d62:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001d66:	e015      	b.n	8001d94 <SIMCOM_DMA_IrqHandler+0xeec>
 8001d68:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001d6c:	e012      	b.n	8001d94 <SIMCOM_DMA_IrqHandler+0xeec>
 8001d6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d72:	e00f      	b.n	8001d94 <SIMCOM_DMA_IrqHandler+0xeec>
 8001d74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d78:	e00c      	b.n	8001d94 <SIMCOM_DMA_IrqHandler+0xeec>
 8001d7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d7e:	e009      	b.n	8001d94 <SIMCOM_DMA_IrqHandler+0xeec>
 8001d80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d84:	e006      	b.n	8001d94 <SIMCOM_DMA_IrqHandler+0xeec>
 8001d86:	2304      	movs	r3, #4
 8001d88:	e004      	b.n	8001d94 <SIMCOM_DMA_IrqHandler+0xeec>
 8001d8a:	2304      	movs	r3, #4
 8001d8c:	e002      	b.n	8001d94 <SIMCOM_DMA_IrqHandler+0xeec>
 8001d8e:	2304      	movs	r3, #4
 8001d90:	e000      	b.n	8001d94 <SIMCOM_DMA_IrqHandler+0xeec>
 8001d92:	2304      	movs	r3, #4
 8001d94:	4a44      	ldr	r2, [pc, #272]	; (8001ea8 <SIMCOM_DMA_IrqHandler+0x1000>)
 8001d96:	60d3      	str	r3, [r2, #12]
 8001d98:	e151      	b.n	800203e <SIMCOM_DMA_IrqHandler+0x1196>
 8001d9a:	4b34      	ldr	r3, [pc, #208]	; (8001e6c <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	4b42      	ldr	r3, [pc, #264]	; (8001eac <SIMCOM_DMA_IrqHandler+0x1004>)
 8001da2:	429a      	cmp	r2, r3
 8001da4:	f240 8084 	bls.w	8001eb0 <SIMCOM_DMA_IrqHandler+0x1008>
 8001da8:	4b30      	ldr	r3, [pc, #192]	; (8001e6c <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a30      	ldr	r2, [pc, #192]	; (8001e70 <SIMCOM_DMA_IrqHandler+0xfc8>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d057      	beq.n	8001e62 <SIMCOM_DMA_IrqHandler+0xfba>
 8001db2:	4b2e      	ldr	r3, [pc, #184]	; (8001e6c <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a2f      	ldr	r2, [pc, #188]	; (8001e74 <SIMCOM_DMA_IrqHandler+0xfcc>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d050      	beq.n	8001e5e <SIMCOM_DMA_IrqHandler+0xfb6>
 8001dbc:	4b2b      	ldr	r3, [pc, #172]	; (8001e6c <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a2d      	ldr	r2, [pc, #180]	; (8001e78 <SIMCOM_DMA_IrqHandler+0xfd0>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d049      	beq.n	8001e5a <SIMCOM_DMA_IrqHandler+0xfb2>
 8001dc6:	4b29      	ldr	r3, [pc, #164]	; (8001e6c <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a2c      	ldr	r2, [pc, #176]	; (8001e7c <SIMCOM_DMA_IrqHandler+0xfd4>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d042      	beq.n	8001e56 <SIMCOM_DMA_IrqHandler+0xfae>
 8001dd0:	4b26      	ldr	r3, [pc, #152]	; (8001e6c <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a2a      	ldr	r2, [pc, #168]	; (8001e80 <SIMCOM_DMA_IrqHandler+0xfd8>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d03a      	beq.n	8001e50 <SIMCOM_DMA_IrqHandler+0xfa8>
 8001dda:	4b24      	ldr	r3, [pc, #144]	; (8001e6c <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a29      	ldr	r2, [pc, #164]	; (8001e84 <SIMCOM_DMA_IrqHandler+0xfdc>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d032      	beq.n	8001e4a <SIMCOM_DMA_IrqHandler+0xfa2>
 8001de4:	4b21      	ldr	r3, [pc, #132]	; (8001e6c <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a27      	ldr	r2, [pc, #156]	; (8001e88 <SIMCOM_DMA_IrqHandler+0xfe0>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d02a      	beq.n	8001e44 <SIMCOM_DMA_IrqHandler+0xf9c>
 8001dee:	4b1f      	ldr	r3, [pc, #124]	; (8001e6c <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a26      	ldr	r2, [pc, #152]	; (8001e8c <SIMCOM_DMA_IrqHandler+0xfe4>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d022      	beq.n	8001e3e <SIMCOM_DMA_IrqHandler+0xf96>
 8001df8:	4b1c      	ldr	r3, [pc, #112]	; (8001e6c <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a24      	ldr	r2, [pc, #144]	; (8001e90 <SIMCOM_DMA_IrqHandler+0xfe8>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d01a      	beq.n	8001e38 <SIMCOM_DMA_IrqHandler+0xf90>
 8001e02:	4b1a      	ldr	r3, [pc, #104]	; (8001e6c <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a23      	ldr	r2, [pc, #140]	; (8001e94 <SIMCOM_DMA_IrqHandler+0xfec>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d012      	beq.n	8001e32 <SIMCOM_DMA_IrqHandler+0xf8a>
 8001e0c:	4b17      	ldr	r3, [pc, #92]	; (8001e6c <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a21      	ldr	r2, [pc, #132]	; (8001e98 <SIMCOM_DMA_IrqHandler+0xff0>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d00a      	beq.n	8001e2c <SIMCOM_DMA_IrqHandler+0xf84>
 8001e16:	4b15      	ldr	r3, [pc, #84]	; (8001e6c <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a20      	ldr	r2, [pc, #128]	; (8001e9c <SIMCOM_DMA_IrqHandler+0xff4>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d102      	bne.n	8001e26 <SIMCOM_DMA_IrqHandler+0xf7e>
 8001e20:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001e24:	e01e      	b.n	8001e64 <SIMCOM_DMA_IrqHandler+0xfbc>
 8001e26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e2a:	e01b      	b.n	8001e64 <SIMCOM_DMA_IrqHandler+0xfbc>
 8001e2c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001e30:	e018      	b.n	8001e64 <SIMCOM_DMA_IrqHandler+0xfbc>
 8001e32:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001e36:	e015      	b.n	8001e64 <SIMCOM_DMA_IrqHandler+0xfbc>
 8001e38:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001e3c:	e012      	b.n	8001e64 <SIMCOM_DMA_IrqHandler+0xfbc>
 8001e3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e42:	e00f      	b.n	8001e64 <SIMCOM_DMA_IrqHandler+0xfbc>
 8001e44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e48:	e00c      	b.n	8001e64 <SIMCOM_DMA_IrqHandler+0xfbc>
 8001e4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e4e:	e009      	b.n	8001e64 <SIMCOM_DMA_IrqHandler+0xfbc>
 8001e50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e54:	e006      	b.n	8001e64 <SIMCOM_DMA_IrqHandler+0xfbc>
 8001e56:	2304      	movs	r3, #4
 8001e58:	e004      	b.n	8001e64 <SIMCOM_DMA_IrqHandler+0xfbc>
 8001e5a:	2304      	movs	r3, #4
 8001e5c:	e002      	b.n	8001e64 <SIMCOM_DMA_IrqHandler+0xfbc>
 8001e5e:	2304      	movs	r3, #4
 8001e60:	e000      	b.n	8001e64 <SIMCOM_DMA_IrqHandler+0xfbc>
 8001e62:	2304      	movs	r3, #4
 8001e64:	4a10      	ldr	r2, [pc, #64]	; (8001ea8 <SIMCOM_DMA_IrqHandler+0x1000>)
 8001e66:	6093      	str	r3, [r2, #8]
 8001e68:	e0e9      	b.n	800203e <SIMCOM_DMA_IrqHandler+0x1196>
 8001e6a:	bf00      	nop
 8001e6c:	20000c90 	.word	0x20000c90
 8001e70:	40026010 	.word	0x40026010
 8001e74:	40026410 	.word	0x40026410
 8001e78:	40026070 	.word	0x40026070
 8001e7c:	40026470 	.word	0x40026470
 8001e80:	40026028 	.word	0x40026028
 8001e84:	40026428 	.word	0x40026428
 8001e88:	40026088 	.word	0x40026088
 8001e8c:	40026488 	.word	0x40026488
 8001e90:	40026040 	.word	0x40026040
 8001e94:	40026440 	.word	0x40026440
 8001e98:	400260a0 	.word	0x400260a0
 8001e9c:	400264a0 	.word	0x400264a0
 8001ea0:	40026000 	.word	0x40026000
 8001ea4:	40026458 	.word	0x40026458
 8001ea8:	40026400 	.word	0x40026400
 8001eac:	400260b8 	.word	0x400260b8
 8001eb0:	4b67      	ldr	r3, [pc, #412]	; (8002050 <SIMCOM_DMA_IrqHandler+0x11a8>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4b67      	ldr	r3, [pc, #412]	; (8002054 <SIMCOM_DMA_IrqHandler+0x11ac>)
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d960      	bls.n	8001f7e <SIMCOM_DMA_IrqHandler+0x10d6>
 8001ebc:	4b64      	ldr	r3, [pc, #400]	; (8002050 <SIMCOM_DMA_IrqHandler+0x11a8>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a65      	ldr	r2, [pc, #404]	; (8002058 <SIMCOM_DMA_IrqHandler+0x11b0>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d057      	beq.n	8001f76 <SIMCOM_DMA_IrqHandler+0x10ce>
 8001ec6:	4b62      	ldr	r3, [pc, #392]	; (8002050 <SIMCOM_DMA_IrqHandler+0x11a8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a64      	ldr	r2, [pc, #400]	; (800205c <SIMCOM_DMA_IrqHandler+0x11b4>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d050      	beq.n	8001f72 <SIMCOM_DMA_IrqHandler+0x10ca>
 8001ed0:	4b5f      	ldr	r3, [pc, #380]	; (8002050 <SIMCOM_DMA_IrqHandler+0x11a8>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a62      	ldr	r2, [pc, #392]	; (8002060 <SIMCOM_DMA_IrqHandler+0x11b8>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d049      	beq.n	8001f6e <SIMCOM_DMA_IrqHandler+0x10c6>
 8001eda:	4b5d      	ldr	r3, [pc, #372]	; (8002050 <SIMCOM_DMA_IrqHandler+0x11a8>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a61      	ldr	r2, [pc, #388]	; (8002064 <SIMCOM_DMA_IrqHandler+0x11bc>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d042      	beq.n	8001f6a <SIMCOM_DMA_IrqHandler+0x10c2>
 8001ee4:	4b5a      	ldr	r3, [pc, #360]	; (8002050 <SIMCOM_DMA_IrqHandler+0x11a8>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a5f      	ldr	r2, [pc, #380]	; (8002068 <SIMCOM_DMA_IrqHandler+0x11c0>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d03a      	beq.n	8001f64 <SIMCOM_DMA_IrqHandler+0x10bc>
 8001eee:	4b58      	ldr	r3, [pc, #352]	; (8002050 <SIMCOM_DMA_IrqHandler+0x11a8>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a5e      	ldr	r2, [pc, #376]	; (800206c <SIMCOM_DMA_IrqHandler+0x11c4>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d032      	beq.n	8001f5e <SIMCOM_DMA_IrqHandler+0x10b6>
 8001ef8:	4b55      	ldr	r3, [pc, #340]	; (8002050 <SIMCOM_DMA_IrqHandler+0x11a8>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a5c      	ldr	r2, [pc, #368]	; (8002070 <SIMCOM_DMA_IrqHandler+0x11c8>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d02a      	beq.n	8001f58 <SIMCOM_DMA_IrqHandler+0x10b0>
 8001f02:	4b53      	ldr	r3, [pc, #332]	; (8002050 <SIMCOM_DMA_IrqHandler+0x11a8>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a5b      	ldr	r2, [pc, #364]	; (8002074 <SIMCOM_DMA_IrqHandler+0x11cc>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d022      	beq.n	8001f52 <SIMCOM_DMA_IrqHandler+0x10aa>
 8001f0c:	4b50      	ldr	r3, [pc, #320]	; (8002050 <SIMCOM_DMA_IrqHandler+0x11a8>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a59      	ldr	r2, [pc, #356]	; (8002078 <SIMCOM_DMA_IrqHandler+0x11d0>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d01a      	beq.n	8001f4c <SIMCOM_DMA_IrqHandler+0x10a4>
 8001f16:	4b4e      	ldr	r3, [pc, #312]	; (8002050 <SIMCOM_DMA_IrqHandler+0x11a8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a58      	ldr	r2, [pc, #352]	; (800207c <SIMCOM_DMA_IrqHandler+0x11d4>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d012      	beq.n	8001f46 <SIMCOM_DMA_IrqHandler+0x109e>
 8001f20:	4b4b      	ldr	r3, [pc, #300]	; (8002050 <SIMCOM_DMA_IrqHandler+0x11a8>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a56      	ldr	r2, [pc, #344]	; (8002080 <SIMCOM_DMA_IrqHandler+0x11d8>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d00a      	beq.n	8001f40 <SIMCOM_DMA_IrqHandler+0x1098>
 8001f2a:	4b49      	ldr	r3, [pc, #292]	; (8002050 <SIMCOM_DMA_IrqHandler+0x11a8>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a55      	ldr	r2, [pc, #340]	; (8002084 <SIMCOM_DMA_IrqHandler+0x11dc>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d102      	bne.n	8001f3a <SIMCOM_DMA_IrqHandler+0x1092>
 8001f34:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001f38:	e01e      	b.n	8001f78 <SIMCOM_DMA_IrqHandler+0x10d0>
 8001f3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f3e:	e01b      	b.n	8001f78 <SIMCOM_DMA_IrqHandler+0x10d0>
 8001f40:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001f44:	e018      	b.n	8001f78 <SIMCOM_DMA_IrqHandler+0x10d0>
 8001f46:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001f4a:	e015      	b.n	8001f78 <SIMCOM_DMA_IrqHandler+0x10d0>
 8001f4c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001f50:	e012      	b.n	8001f78 <SIMCOM_DMA_IrqHandler+0x10d0>
 8001f52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f56:	e00f      	b.n	8001f78 <SIMCOM_DMA_IrqHandler+0x10d0>
 8001f58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f5c:	e00c      	b.n	8001f78 <SIMCOM_DMA_IrqHandler+0x10d0>
 8001f5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f62:	e009      	b.n	8001f78 <SIMCOM_DMA_IrqHandler+0x10d0>
 8001f64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f68:	e006      	b.n	8001f78 <SIMCOM_DMA_IrqHandler+0x10d0>
 8001f6a:	2304      	movs	r3, #4
 8001f6c:	e004      	b.n	8001f78 <SIMCOM_DMA_IrqHandler+0x10d0>
 8001f6e:	2304      	movs	r3, #4
 8001f70:	e002      	b.n	8001f78 <SIMCOM_DMA_IrqHandler+0x10d0>
 8001f72:	2304      	movs	r3, #4
 8001f74:	e000      	b.n	8001f78 <SIMCOM_DMA_IrqHandler+0x10d0>
 8001f76:	2304      	movs	r3, #4
 8001f78:	4a43      	ldr	r2, [pc, #268]	; (8002088 <SIMCOM_DMA_IrqHandler+0x11e0>)
 8001f7a:	60d3      	str	r3, [r2, #12]
 8001f7c:	e05f      	b.n	800203e <SIMCOM_DMA_IrqHandler+0x1196>
 8001f7e:	4b34      	ldr	r3, [pc, #208]	; (8002050 <SIMCOM_DMA_IrqHandler+0x11a8>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a35      	ldr	r2, [pc, #212]	; (8002058 <SIMCOM_DMA_IrqHandler+0x11b0>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d057      	beq.n	8002038 <SIMCOM_DMA_IrqHandler+0x1190>
 8001f88:	4b31      	ldr	r3, [pc, #196]	; (8002050 <SIMCOM_DMA_IrqHandler+0x11a8>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a33      	ldr	r2, [pc, #204]	; (800205c <SIMCOM_DMA_IrqHandler+0x11b4>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d050      	beq.n	8002034 <SIMCOM_DMA_IrqHandler+0x118c>
 8001f92:	4b2f      	ldr	r3, [pc, #188]	; (8002050 <SIMCOM_DMA_IrqHandler+0x11a8>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a32      	ldr	r2, [pc, #200]	; (8002060 <SIMCOM_DMA_IrqHandler+0x11b8>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d049      	beq.n	8002030 <SIMCOM_DMA_IrqHandler+0x1188>
 8001f9c:	4b2c      	ldr	r3, [pc, #176]	; (8002050 <SIMCOM_DMA_IrqHandler+0x11a8>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a30      	ldr	r2, [pc, #192]	; (8002064 <SIMCOM_DMA_IrqHandler+0x11bc>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d042      	beq.n	800202c <SIMCOM_DMA_IrqHandler+0x1184>
 8001fa6:	4b2a      	ldr	r3, [pc, #168]	; (8002050 <SIMCOM_DMA_IrqHandler+0x11a8>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a2f      	ldr	r2, [pc, #188]	; (8002068 <SIMCOM_DMA_IrqHandler+0x11c0>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d03a      	beq.n	8002026 <SIMCOM_DMA_IrqHandler+0x117e>
 8001fb0:	4b27      	ldr	r3, [pc, #156]	; (8002050 <SIMCOM_DMA_IrqHandler+0x11a8>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a2d      	ldr	r2, [pc, #180]	; (800206c <SIMCOM_DMA_IrqHandler+0x11c4>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d032      	beq.n	8002020 <SIMCOM_DMA_IrqHandler+0x1178>
 8001fba:	4b25      	ldr	r3, [pc, #148]	; (8002050 <SIMCOM_DMA_IrqHandler+0x11a8>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a2c      	ldr	r2, [pc, #176]	; (8002070 <SIMCOM_DMA_IrqHandler+0x11c8>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d02a      	beq.n	800201a <SIMCOM_DMA_IrqHandler+0x1172>
 8001fc4:	4b22      	ldr	r3, [pc, #136]	; (8002050 <SIMCOM_DMA_IrqHandler+0x11a8>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a2a      	ldr	r2, [pc, #168]	; (8002074 <SIMCOM_DMA_IrqHandler+0x11cc>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d022      	beq.n	8002014 <SIMCOM_DMA_IrqHandler+0x116c>
 8001fce:	4b20      	ldr	r3, [pc, #128]	; (8002050 <SIMCOM_DMA_IrqHandler+0x11a8>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a29      	ldr	r2, [pc, #164]	; (8002078 <SIMCOM_DMA_IrqHandler+0x11d0>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d01a      	beq.n	800200e <SIMCOM_DMA_IrqHandler+0x1166>
 8001fd8:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <SIMCOM_DMA_IrqHandler+0x11a8>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a27      	ldr	r2, [pc, #156]	; (800207c <SIMCOM_DMA_IrqHandler+0x11d4>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d012      	beq.n	8002008 <SIMCOM_DMA_IrqHandler+0x1160>
 8001fe2:	4b1b      	ldr	r3, [pc, #108]	; (8002050 <SIMCOM_DMA_IrqHandler+0x11a8>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a26      	ldr	r2, [pc, #152]	; (8002080 <SIMCOM_DMA_IrqHandler+0x11d8>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d00a      	beq.n	8002002 <SIMCOM_DMA_IrqHandler+0x115a>
 8001fec:	4b18      	ldr	r3, [pc, #96]	; (8002050 <SIMCOM_DMA_IrqHandler+0x11a8>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a24      	ldr	r2, [pc, #144]	; (8002084 <SIMCOM_DMA_IrqHandler+0x11dc>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d102      	bne.n	8001ffc <SIMCOM_DMA_IrqHandler+0x1154>
 8001ff6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001ffa:	e01e      	b.n	800203a <SIMCOM_DMA_IrqHandler+0x1192>
 8001ffc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002000:	e01b      	b.n	800203a <SIMCOM_DMA_IrqHandler+0x1192>
 8002002:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002006:	e018      	b.n	800203a <SIMCOM_DMA_IrqHandler+0x1192>
 8002008:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800200c:	e015      	b.n	800203a <SIMCOM_DMA_IrqHandler+0x1192>
 800200e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002012:	e012      	b.n	800203a <SIMCOM_DMA_IrqHandler+0x1192>
 8002014:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002018:	e00f      	b.n	800203a <SIMCOM_DMA_IrqHandler+0x1192>
 800201a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800201e:	e00c      	b.n	800203a <SIMCOM_DMA_IrqHandler+0x1192>
 8002020:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002024:	e009      	b.n	800203a <SIMCOM_DMA_IrqHandler+0x1192>
 8002026:	f44f 7380 	mov.w	r3, #256	; 0x100
 800202a:	e006      	b.n	800203a <SIMCOM_DMA_IrqHandler+0x1192>
 800202c:	2304      	movs	r3, #4
 800202e:	e004      	b.n	800203a <SIMCOM_DMA_IrqHandler+0x1192>
 8002030:	2304      	movs	r3, #4
 8002032:	e002      	b.n	800203a <SIMCOM_DMA_IrqHandler+0x1192>
 8002034:	2304      	movs	r3, #4
 8002036:	e000      	b.n	800203a <SIMCOM_DMA_IrqHandler+0x1192>
 8002038:	2304      	movs	r3, #4
 800203a:	4a13      	ldr	r2, [pc, #76]	; (8002088 <SIMCOM_DMA_IrqHandler+0x11e0>)
 800203c:	6093      	str	r3, [r2, #8]
        HAL_UART_Receive_DMA(&huart1, (uint8_t*) SIMCOM_DMA_RX, SIMCOM_DMA_RX_SZ);
 800203e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002042:	4912      	ldr	r1, [pc, #72]	; (800208c <SIMCOM_DMA_IrqHandler+0x11e4>)
 8002044:	4812      	ldr	r0, [pc, #72]	; (8002090 <SIMCOM_DMA_IrqHandler+0x11e8>)
 8002046:	f006 fd75 	bl	8008b34 <HAL_UART_Receive_DMA>
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000c90 	.word	0x20000c90
 8002054:	40026058 	.word	0x40026058
 8002058:	40026010 	.word	0x40026010
 800205c:	40026410 	.word	0x40026410
 8002060:	40026070 	.word	0x40026070
 8002064:	40026470 	.word	0x40026470
 8002068:	40026028 	.word	0x40026028
 800206c:	40026428 	.word	0x40026428
 8002070:	40026088 	.word	0x40026088
 8002074:	40026488 	.word	0x40026488
 8002078:	40026040 	.word	0x40026040
 800207c:	40026440 	.word	0x40026440
 8002080:	400260a0 	.word	0x400260a0
 8002084:	400264a0 	.word	0x400264a0
 8002088:	40026000 	.word	0x40026000
 800208c:	2000021c 	.word	0x2000021c
 8002090:	20000cf0 	.word	0x20000cf0

08002094 <SIMCOM_DMA_Init>:

void SIMCOM_DMA_Init(void) {
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);        // enable idle line interrupt
 8002098:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <SIMCOM_DMA_Init+0x44>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68da      	ldr	r2, [r3, #12]
 800209e:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <SIMCOM_DMA_Init+0x44>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 0210 	orr.w	r2, r2, #16
 80020a6:	60da      	str	r2, [r3, #12]
    __HAL_DMA_ENABLE_IT(&hdma_usart1_rx, DMA_IT_TC);    // enable DMA Tx cplt interrupt
 80020a8:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <SIMCOM_DMA_Init+0x48>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <SIMCOM_DMA_Init+0x48>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f042 0210 	orr.w	r2, r2, #16
 80020b6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE_IT(&hdma_usart1_rx, DMA_IT_HT);    // enable half complete interrupt
 80020b8:	4b08      	ldr	r3, [pc, #32]	; (80020dc <SIMCOM_DMA_Init+0x48>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	4b07      	ldr	r3, [pc, #28]	; (80020dc <SIMCOM_DMA_Init+0x48>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f042 0208 	orr.w	r2, r2, #8
 80020c6:	601a      	str	r2, [r3, #0]

    /* Start DMA transfer */
    HAL_UART_Receive_DMA(&huart1, (uint8_t*) SIMCOM_DMA_RX, SIMCOM_DMA_RX_SZ);
 80020c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020cc:	4904      	ldr	r1, [pc, #16]	; (80020e0 <SIMCOM_DMA_Init+0x4c>)
 80020ce:	4802      	ldr	r0, [pc, #8]	; (80020d8 <SIMCOM_DMA_Init+0x44>)
 80020d0:	f006 fd30 	bl	8008b34 <HAL_UART_Receive_DMA>
}
 80020d4:	bf00      	nop
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	20000cf0 	.word	0x20000cf0
 80020dc:	20000c90 	.word	0x20000c90
 80020e0:	2000021c 	.word	0x2000021c

080020e4 <SIMCOM_Check_Buffer>:

static void SIMCOM_Check_Buffer(void) {
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
    static size_t old_pos;
    size_t pos;

    /* Calculate current position in buffer */
    pos = SIMCOM_DMA_RX_SZ - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 80020ea:	4b1f      	ldr	r3, [pc, #124]	; (8002168 <SIMCOM_Check_Buffer+0x84>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80020f4:	607b      	str	r3, [r7, #4]
    if (pos != old_pos) { /* Check change in received data */
 80020f6:	4b1d      	ldr	r3, [pc, #116]	; (800216c <SIMCOM_Check_Buffer+0x88>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d023      	beq.n	8002148 <SIMCOM_Check_Buffer+0x64>
        if (pos > old_pos) { /* Current position is over previous one */
 8002100:	4b1a      	ldr	r3, [pc, #104]	; (800216c <SIMCOM_Check_Buffer+0x88>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	429a      	cmp	r2, r3
 8002108:	d90b      	bls.n	8002122 <SIMCOM_Check_Buffer+0x3e>
            /* We are in "linear" mode */
            /* Process data directly by subtracting "pointers" */
            SIMCOM_Fill_Buffer(&SIMCOM_DMA_RX[old_pos], pos - old_pos);
 800210a:	4b18      	ldr	r3, [pc, #96]	; (800216c <SIMCOM_Check_Buffer+0x88>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a18      	ldr	r2, [pc, #96]	; (8002170 <SIMCOM_Check_Buffer+0x8c>)
 8002110:	1898      	adds	r0, r3, r2
 8002112:	4b16      	ldr	r3, [pc, #88]	; (800216c <SIMCOM_Check_Buffer+0x88>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	4619      	mov	r1, r3
 800211c:	f000 f82a 	bl	8002174 <SIMCOM_Fill_Buffer>
 8002120:	e012      	b.n	8002148 <SIMCOM_Check_Buffer+0x64>
        } else {
            /* We are in "overflow" mode */
            /* First process data to the end of buffer */
            SIMCOM_Fill_Buffer(&SIMCOM_DMA_RX[old_pos], SIMCOM_DMA_RX_SZ - old_pos);
 8002122:	4b12      	ldr	r3, [pc, #72]	; (800216c <SIMCOM_Check_Buffer+0x88>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a12      	ldr	r2, [pc, #72]	; (8002170 <SIMCOM_Check_Buffer+0x8c>)
 8002128:	441a      	add	r2, r3
 800212a:	4b10      	ldr	r3, [pc, #64]	; (800216c <SIMCOM_Check_Buffer+0x88>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8002132:	4619      	mov	r1, r3
 8002134:	4610      	mov	r0, r2
 8002136:	f000 f81d 	bl	8002174 <SIMCOM_Fill_Buffer>
            /* Check and continue with beginning of buffer */
            if (pos > 0) {
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <SIMCOM_Check_Buffer+0x64>
                SIMCOM_Fill_Buffer(&SIMCOM_DMA_RX[0], pos);
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	480b      	ldr	r0, [pc, #44]	; (8002170 <SIMCOM_Check_Buffer+0x8c>)
 8002144:	f000 f816 	bl	8002174 <SIMCOM_Fill_Buffer>
            }
        }
    }
    old_pos = pos; /* Save current position as old */
 8002148:	4a08      	ldr	r2, [pc, #32]	; (800216c <SIMCOM_Check_Buffer+0x88>)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6013      	str	r3, [r2, #0]

    /* Check and manually update if we reached end of buffer */
    if (old_pos == SIMCOM_DMA_RX_SZ) {
 800214e:	4b07      	ldr	r3, [pc, #28]	; (800216c <SIMCOM_Check_Buffer+0x88>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002156:	d102      	bne.n	800215e <SIMCOM_Check_Buffer+0x7a>
        old_pos = 0;
 8002158:	4b04      	ldr	r3, [pc, #16]	; (800216c <SIMCOM_Check_Buffer+0x88>)
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
    }
}
 800215e:	bf00      	nop
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	20000c90 	.word	0x20000c90
 800216c:	20000620 	.word	0x20000620
 8002170:	2000021c 	.word	0x2000021c

08002174 <SIMCOM_Fill_Buffer>:

static void SIMCOM_Fill_Buffer(const void *data, size_t len) {
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
    /* Write data to buffer */
    memcpy(&SIMCOM_UART_RX[simcom_write], data, len);
 800217e:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <SIMCOM_Fill_Buffer+0x30>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a09      	ldr	r2, [pc, #36]	; (80021a8 <SIMCOM_Fill_Buffer+0x34>)
 8002184:	4413      	add	r3, r2
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	6879      	ldr	r1, [r7, #4]
 800218a:	4618      	mov	r0, r3
 800218c:	f007 fc59 	bl	8009a42 <memcpy>
    simcom_write += len;
 8002190:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <SIMCOM_Fill_Buffer+0x30>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	4413      	add	r3, r2
 8002198:	4a02      	ldr	r2, [pc, #8]	; (80021a4 <SIMCOM_Fill_Buffer+0x30>)
 800219a:	6013      	str	r3, [r2, #0]
}
 800219c:	bf00      	nop
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	2000061c 	.word	0x2000061c
 80021a8:	20000634 	.word	0x20000634

080021ac <SIMCOM_Reset_Buffer>:

void SIMCOM_Reset_Buffer(void) {
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
    // clear rx buffer
    memset(SIMCOM_UART_RX, 0x00, simcom_write);
 80021b0:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <SIMCOM_Reset_Buffer+0x1c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	461a      	mov	r2, r3
 80021b6:	2100      	movs	r1, #0
 80021b8:	4804      	ldr	r0, [pc, #16]	; (80021cc <SIMCOM_Reset_Buffer+0x20>)
 80021ba:	f007 fc4d 	bl	8009a58 <memset>
    simcom_write = 0;
 80021be:	4b02      	ldr	r3, [pc, #8]	; (80021c8 <SIMCOM_Reset_Buffer+0x1c>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
}
 80021c4:	bf00      	nop
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	2000061c 	.word	0x2000061c
 80021cc:	20000634 	.word	0x20000634

080021d0 <SIMCOM_Transmit>:

uint8_t SIMCOM_Transmit(char *pData, uint16_t Size) {
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	460b      	mov	r3, r1
 80021da:	807b      	strh	r3, [r7, #2]
    SIMCOM_Reset_Buffer();
 80021dc:	f7ff ffe6 	bl	80021ac <SIMCOM_Reset_Buffer>

    return (HAL_UART_Transmit(&huart1, (uint8_t*) pData, Size, HAL_MAX_DELAY) == HAL_OK);
 80021e0:	887a      	ldrh	r2, [r7, #2]
 80021e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	4806      	ldr	r0, [pc, #24]	; (8002204 <SIMCOM_Transmit+0x34>)
 80021ea:	f006 fc0a 	bl	8008a02 <HAL_UART_Transmit>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	bf0c      	ite	eq
 80021f4:	2301      	moveq	r3, #1
 80021f6:	2300      	movne	r3, #0
 80021f8:	b2db      	uxtb	r3, r3
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000cf0 	.word	0x20000cf0

08002208 <AT_FtpInitialize>:
static void AT_ParseText(const char *ptr, uint8_t *cnt, char *text, uint8_t size);
static int32_t AT_ParseNumber(const char *ptr, uint8_t *cnt);
//static float AT_ParseFloat(const char *ptr, uint8_t *cnt);

/* Public functions implementation --------------------------------------------*/
SIMCOM_RESULT AT_FtpInitialize(at_ftp_t *param) {
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af02      	add	r7, sp, #8
 800220e:	6078      	str	r0, [r7, #4]
    SIMCOM_RESULT p;

    Simcom_Lock();
 8002210:	f001 ffd4 	bl	80041bc <Simcom_Lock>
    p = AT_SingleInteger("FTPCID", ATW, &param->id, 0);
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	2300      	movs	r3, #0
 8002218:	2100      	movs	r1, #0
 800221a:	482e      	ldr	r0, [pc, #184]	; (80022d4 <AT_FtpInitialize+0xcc>)
 800221c:	f000 fe54 	bl	8002ec8 <AT_SingleInteger>
 8002220:	4603      	mov	r3, r0
 8002222:	73fb      	strb	r3, [r7, #15]

    // set server & credential
    if (p > 0) {
 8002224:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002228:	2b00      	cmp	r3, #0
 800222a:	dd0a      	ble.n	8002242 <AT_FtpInitialize+0x3a>
        p = AT_SingleString("FTPSERV", ATW, param->server, sizeof(param->server), 0);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	1d1a      	adds	r2, r3, #4
 8002230:	2300      	movs	r3, #0
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	231e      	movs	r3, #30
 8002236:	2100      	movs	r1, #0
 8002238:	4827      	ldr	r0, [pc, #156]	; (80022d8 <AT_FtpInitialize+0xd0>)
 800223a:	f000 fda7 	bl	8002d8c <AT_SingleString>
 800223e:	4603      	mov	r3, r0
 8002240:	73fb      	strb	r3, [r7, #15]
    }
    if (p > 0) {
 8002242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002246:	2b00      	cmp	r3, #0
 8002248:	dd0b      	ble.n	8002262 <AT_FtpInitialize+0x5a>
        p = AT_SingleString("FTPUN", ATW, param->username, sizeof(param->username), 0);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8002250:	2300      	movs	r3, #0
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	231e      	movs	r3, #30
 8002256:	2100      	movs	r1, #0
 8002258:	4820      	ldr	r0, [pc, #128]	; (80022dc <AT_FtpInitialize+0xd4>)
 800225a:	f000 fd97 	bl	8002d8c <AT_SingleString>
 800225e:	4603      	mov	r3, r0
 8002260:	73fb      	strb	r3, [r7, #15]
    }
    if (p > 0) {
 8002262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002266:	2b00      	cmp	r3, #0
 8002268:	dd0b      	ble.n	8002282 <AT_FtpInitialize+0x7a>
        p = AT_SingleString("FTPPW", ATW, param->password, sizeof(param->password), 0);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002270:	2300      	movs	r3, #0
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	2314      	movs	r3, #20
 8002276:	2100      	movs	r1, #0
 8002278:	4819      	ldr	r0, [pc, #100]	; (80022e0 <AT_FtpInitialize+0xd8>)
 800227a:	f000 fd87 	bl	8002d8c <AT_SingleString>
 800227e:	4603      	mov	r3, r0
 8002280:	73fb      	strb	r3, [r7, #15]
    }
    // set path & file
    if (p > 0) {
 8002282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002286:	2b00      	cmp	r3, #0
 8002288:	dd0b      	ble.n	80022a2 <AT_FtpInitialize+0x9a>
        p = AT_SingleString("FTPGETPATH", ATW, param->path, sizeof(param->path), 0);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8002290:	2300      	movs	r3, #0
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	2314      	movs	r3, #20
 8002296:	2100      	movs	r1, #0
 8002298:	4812      	ldr	r0, [pc, #72]	; (80022e4 <AT_FtpInitialize+0xdc>)
 800229a:	f000 fd77 	bl	8002d8c <AT_SingleString>
 800229e:	4603      	mov	r3, r0
 80022a0:	73fb      	strb	r3, [r7, #15]
    }
    if (p > 0) {
 80022a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	dd0b      	ble.n	80022c2 <AT_FtpInitialize+0xba>
        p = AT_SingleString("FTPGETNAME", ATW, param->file, sizeof(param->file), 0);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80022b0:	2300      	movs	r3, #0
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	2314      	movs	r3, #20
 80022b6:	2100      	movs	r1, #0
 80022b8:	480b      	ldr	r0, [pc, #44]	; (80022e8 <AT_FtpInitialize+0xe0>)
 80022ba:	f000 fd67 	bl	8002d8c <AT_SingleString>
 80022be:	4603      	mov	r3, r0
 80022c0:	73fb      	strb	r3, [r7, #15]
    }

    Simcom_Unlock();
 80022c2:	f001 ff82 	bl	80041ca <Simcom_Unlock>
    return p;
 80022c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	0800a434 	.word	0x0800a434
 80022d8:	0800a43c 	.word	0x0800a43c
 80022dc:	0800a444 	.word	0x0800a444
 80022e0:	0800a44c 	.word	0x0800a44c
 80022e4:	0800a454 	.word	0x0800a454
 80022e8:	0800a460 	.word	0x0800a460

080022ec <AT_FtpFileSize>:

SIMCOM_RESULT AT_FtpFileSize(at_ftp_t *param) {
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 80022f4:	2300      	movs	r3, #0
 80022f6:	73fb      	strb	r3, [r7, #15]
    uint8_t cnt, len = 0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	73bb      	strb	r3, [r7, #14]
    char *str = NULL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	60bb      	str	r3, [r7, #8]

    Simcom_Lock();
 8002300:	f001 ff5c 	bl	80041bc <Simcom_Lock>
    // Read
    p = AT_CmdRead("AT+FTPSIZE\r", 90000, "+FTPSIZE: ", &str);
 8002304:	f107 0308 	add.w	r3, r7, #8
 8002308:	4a24      	ldr	r2, [pc, #144]	; (800239c <AT_FtpFileSize+0xb0>)
 800230a:	4925      	ldr	r1, [pc, #148]	; (80023a0 <AT_FtpFileSize+0xb4>)
 800230c:	4825      	ldr	r0, [pc, #148]	; (80023a4 <AT_FtpFileSize+0xb8>)
 800230e:	f000 fe69 	bl	8002fe4 <AT_CmdRead>
 8002312:	4603      	mov	r3, r0
 8002314:	73fb      	strb	r3, [r7, #15]
    if (p > 0) {
 8002316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800231a:	2b00      	cmp	r3, #0
 800231c:	dd35      	ble.n	800238a <AT_FtpFileSize+0x9e>
        // parsing
        AT_ParseNumber(&str[len], &cnt);
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	7bbb      	ldrb	r3, [r7, #14]
 8002322:	4413      	add	r3, r2
 8002324:	f107 020d 	add.w	r2, r7, #13
 8002328:	4611      	mov	r1, r2
 800232a:	4618      	mov	r0, r3
 800232c:	f000 feff 	bl	800312e <AT_ParseNumber>
        len += cnt + 1;
 8002330:	7b7a      	ldrb	r2, [r7, #13]
 8002332:	7bbb      	ldrb	r3, [r7, #14]
 8002334:	4413      	add	r3, r2
 8002336:	b2db      	uxtb	r3, r3
 8002338:	3301      	adds	r3, #1
 800233a:	73bb      	strb	r3, [r7, #14]
        param->response = AT_ParseNumber(&str[len], &cnt);
 800233c:	68ba      	ldr	r2, [r7, #8]
 800233e:	7bbb      	ldrb	r3, [r7, #14]
 8002340:	4413      	add	r3, r2
 8002342:	f107 020d 	add.w	r2, r7, #13
 8002346:	4611      	mov	r1, r2
 8002348:	4618      	mov	r0, r3
 800234a:	f000 fef0 	bl	800312e <AT_ParseNumber>
 800234e:	4603      	mov	r3, r0
 8002350:	461a      	mov	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        if (param->response == FTP_FINISH) {
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800235e:	2b00      	cmp	r3, #0
 8002360:	d113      	bne.n	800238a <AT_FtpFileSize+0x9e>
            len += cnt + 1;
 8002362:	7b7a      	ldrb	r2, [r7, #13]
 8002364:	7bbb      	ldrb	r3, [r7, #14]
 8002366:	4413      	add	r3, r2
 8002368:	b2db      	uxtb	r3, r3
 800236a:	3301      	adds	r3, #1
 800236c:	73bb      	strb	r3, [r7, #14]
            param->size = AT_ParseNumber(&str[len], &cnt);
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	7bbb      	ldrb	r3, [r7, #14]
 8002372:	4413      	add	r3, r2
 8002374:	f107 020d 	add.w	r2, r7, #13
 8002378:	4611      	mov	r1, r2
 800237a:	4618      	mov	r0, r3
 800237c:	f000 fed7 	bl	800312e <AT_ParseNumber>
 8002380:	4603      	mov	r3, r0
 8002382:	461a      	mov	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
    }
    Simcom_Unlock();
 800238a:	f001 ff1e 	bl	80041ca <Simcom_Unlock>

    return p;
 800238e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	0800a46c 	.word	0x0800a46c
 80023a0:	00015f90 	.word	0x00015f90
 80023a4:	0800a478 	.word	0x0800a478

080023a8 <AT_FtpDownload>:

SIMCOM_RESULT AT_FtpDownload(at_ftpget_t *param) {
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b09c      	sub	sp, #112	; 0x70
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 80023b0:	2300      	movs	r3, #0
 80023b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    uint32_t tick;
    uint8_t cnt, len = 0;
 80023b6:	2300      	movs	r3, #0
 80023b8:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
    char *ptr, *str = NULL, cmd[80];
 80023bc:	2300      	movs	r3, #0
 80023be:	65fb      	str	r3, [r7, #92]	; 0x5c

    Simcom_Lock();
 80023c0:	f001 fefc 	bl	80041bc <Simcom_Lock>
    // Open or Read
    if (param->mode == FTPGET_OPEN) {
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d108      	bne.n	80023de <AT_FtpDownload+0x36>
        sprintf(cmd, "AT+FTPGET=%d\r", param->mode);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	f107 030c 	add.w	r3, r7, #12
 80023d4:	4946      	ldr	r1, [pc, #280]	; (80024f0 <AT_FtpDownload+0x148>)
 80023d6:	4618      	mov	r0, r3
 80023d8:	f007 fb46 	bl	8009a68 <siprintf>
 80023dc:	e008      	b.n	80023f0 <AT_FtpDownload+0x48>
    } else {
        sprintf(cmd, "AT+FTPGET=%d,%d\r", param->mode, param->reqlength);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	891b      	ldrh	r3, [r3, #8]
 80023e6:	f107 000c 	add.w	r0, r7, #12
 80023ea:	4942      	ldr	r1, [pc, #264]	; (80024f4 <AT_FtpDownload+0x14c>)
 80023ec:	f007 fb3c 	bl	8009a68 <siprintf>
    }

    p = AT_CmdRead(cmd, 90000, "+FTPGET: ", &str);
 80023f0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80023f4:	f107 000c 	add.w	r0, r7, #12
 80023f8:	4a3f      	ldr	r2, [pc, #252]	; (80024f8 <AT_FtpDownload+0x150>)
 80023fa:	4940      	ldr	r1, [pc, #256]	; (80024fc <AT_FtpDownload+0x154>)
 80023fc:	f000 fdf2 	bl	8002fe4 <AT_CmdRead>
 8002400:	4603      	mov	r3, r0
 8002402:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

    if (p > 0) {
 8002406:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800240a:	2b00      	cmp	r3, #0
 800240c:	dd67      	ble.n	80024de <AT_FtpDownload+0x136>
        // parsing
        AT_ParseNumber(&str[len], &cnt);
 800240e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002410:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002414:	4413      	add	r3, r2
 8002416:	f107 0263 	add.w	r2, r7, #99	; 0x63
 800241a:	4611      	mov	r1, r2
 800241c:	4618      	mov	r0, r3
 800241e:	f000 fe86 	bl	800312e <AT_ParseNumber>
        len += cnt + 1;
 8002422:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 8002426:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800242a:	4413      	add	r3, r2
 800242c:	b2db      	uxtb	r3, r3
 800242e:	3301      	adds	r3, #1
 8002430:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
        if (param->mode == FTPGET_OPEN) {
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d10e      	bne.n	800245a <AT_FtpDownload+0xb2>
            param->response = AT_ParseNumber(&str[len], &cnt);
 800243c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800243e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002442:	4413      	add	r3, r2
 8002444:	f107 0263 	add.w	r2, r7, #99	; 0x63
 8002448:	4611      	mov	r1, r2
 800244a:	4618      	mov	r0, r3
 800244c:	f000 fe6f 	bl	800312e <AT_ParseNumber>
 8002450:	4603      	mov	r3, r0
 8002452:	461a      	mov	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	605a      	str	r2, [r3, #4]
 8002458:	e041      	b.n	80024de <AT_FtpDownload+0x136>
        } else {
            param->cnflength = AT_ParseNumber(&str[len], &cnt);
 800245a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800245c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002460:	4413      	add	r3, r2
 8002462:	f107 0263 	add.w	r2, r7, #99	; 0x63
 8002466:	4611      	mov	r1, r2
 8002468:	4618      	mov	r0, r3
 800246a:	f000 fe60 	bl	800312e <AT_ParseNumber>
 800246e:	4603      	mov	r3, r0
 8002470:	b29a      	uxth	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	815a      	strh	r2, [r3, #10]
            len += cnt + 2;
 8002476:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 800247a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800247e:	4413      	add	r3, r2
 8002480:	b2db      	uxtb	r3, r3
 8002482:	3302      	adds	r3, #2
 8002484:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
            // start of file content
            param->ptr = &str[len];
 8002488:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800248a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800248e:	441a      	add	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	60da      	str	r2, [r3, #12]
            // wait until data transferred
            ptr = &str[len + param->cnflength + 2];
 8002494:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002496:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	8949      	ldrh	r1, [r1, #10]
 800249e:	440b      	add	r3, r1
 80024a0:	3302      	adds	r3, #2
 80024a2:	4413      	add	r3, r2
 80024a4:	66bb      	str	r3, [r7, #104]	; 0x68

            tick = _GetTickMS();
 80024a6:	f002 faf1 	bl	8004a8c <_GetTickMS>
 80024aa:	6678      	str	r0, [r7, #100]	; 0x64
            while (strncmp(ptr, SIMCOM_RSP_OK, strlen(SIMCOM_RSP_OK)) != 0) {
 80024ac:	e00f      	b.n	80024ce <AT_FtpDownload+0x126>
                if (_GetTickMS() - tick > (5 * 1000)) {
 80024ae:	f002 faed 	bl	8004a8c <_GetTickMS>
 80024b2:	4602      	mov	r2, r0
 80024b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024bc:	4293      	cmp	r3, r2
 80024be:	d903      	bls.n	80024c8 <AT_FtpDownload+0x120>
                    p = SIM_RESULT_ERROR;
 80024c0:	2300      	movs	r3, #0
 80024c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                    break;
 80024c6:	e00a      	b.n	80024de <AT_FtpDownload+0x136>
                };
                _DelayMS(1);
 80024c8:	2001      	movs	r0, #1
 80024ca:	f002 fad4 	bl	8004a76 <_DelayMS>
            while (strncmp(ptr, SIMCOM_RSP_OK, strlen(SIMCOM_RSP_OK)) != 0) {
 80024ce:	2203      	movs	r2, #3
 80024d0:	490b      	ldr	r1, [pc, #44]	; (8002500 <AT_FtpDownload+0x158>)
 80024d2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80024d4:	f007 fae8 	bl	8009aa8 <strncmp>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1e7      	bne.n	80024ae <AT_FtpDownload+0x106>
            };
        }
    }
    Simcom_Unlock();
 80024de:	f001 fe74 	bl	80041ca <Simcom_Unlock>

    return p;
 80024e2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3770      	adds	r7, #112	; 0x70
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	0800a484 	.word	0x0800a484
 80024f4:	0800a494 	.word	0x0800a494
 80024f8:	0800a4a8 	.word	0x0800a4a8
 80024fc:	00015f90 	.word	0x00015f90
 8002500:	0800a4b4 	.word	0x0800a4b4

08002504 <AT_FtpCurrentState>:

SIMCOM_RESULT AT_FtpCurrentState(AT_FTP_STATE *state) {
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
    return AT_SingleInteger("FTPSTATE", ATR, (int32_t*) state, 1);
 800250c:	2301      	movs	r3, #1
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	2101      	movs	r1, #1
 8002512:	4804      	ldr	r0, [pc, #16]	; (8002524 <AT_FtpCurrentState+0x20>)
 8002514:	f000 fcd8 	bl	8002ec8 <AT_SingleInteger>
 8002518:	4603      	mov	r3, r0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	0800a4b8 	.word	0x0800a4b8

08002528 <AT_CommandEchoMode>:

SIMCOM_RESULT AT_CommandEchoMode(uint8_t state) {
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	4603      	mov	r3, r0
 8002530:	71fb      	strb	r3, [r7, #7]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 8002532:	2300      	movs	r3, #0
 8002534:	73fb      	strb	r3, [r7, #15]
    char cmd[6];

    Simcom_Lock();
 8002536:	f001 fe41 	bl	80041bc <Simcom_Lock>
    // Write
    sprintf(cmd, "ATE%d\r", state);
 800253a:	79fa      	ldrb	r2, [r7, #7]
 800253c:	f107 0308 	add.w	r3, r7, #8
 8002540:	490a      	ldr	r1, [pc, #40]	; (800256c <AT_CommandEchoMode+0x44>)
 8002542:	4618      	mov	r0, r3
 8002544:	f007 fa90 	bl	8009a68 <siprintf>
    p = AT_CmdWrite(cmd, 500, NULL);
 8002548:	f107 0308 	add.w	r3, r7, #8
 800254c:	2200      	movs	r2, #0
 800254e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002552:	4618      	mov	r0, r3
 8002554:	f000 fd28 	bl	8002fa8 <AT_CmdWrite>
 8002558:	4603      	mov	r3, r0
 800255a:	73fb      	strb	r3, [r7, #15]
    Simcom_Unlock();
 800255c:	f001 fe35 	bl	80041ca <Simcom_Unlock>

    return p;
 8002560:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	0800a4c4 	.word	0x0800a4c4

08002570 <AT_SignalQualityReport>:

SIMCOM_RESULT AT_SignalQualityReport(at_csq_t *signal) {
 8002570:	b590      	push	{r4, r7, lr}
 8002572:	b087      	sub	sp, #28
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 8002578:	2300      	movs	r3, #0
 800257a:	75fb      	strb	r3, [r7, #23]
    uint8_t cnt, len = 0;
 800257c:	2300      	movs	r3, #0
 800257e:	75bb      	strb	r3, [r7, #22]
    char *str = NULL;
 8002580:	2300      	movs	r3, #0
 8002582:	60bb      	str	r3, [r7, #8]
    float dBm;

    Simcom_Lock();
 8002584:	f001 fe1a 	bl	80041bc <Simcom_Lock>
    // Read
    p = AT_CmdRead("AT+CSQ\r", 500, "+CSQ: ", &str);
 8002588:	f107 0308 	add.w	r3, r7, #8
 800258c:	4a48      	ldr	r2, [pc, #288]	; (80026b0 <AT_SignalQualityReport+0x140>)
 800258e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002592:	4848      	ldr	r0, [pc, #288]	; (80026b4 <AT_SignalQualityReport+0x144>)
 8002594:	f000 fd26 	bl	8002fe4 <AT_CmdRead>
 8002598:	4603      	mov	r3, r0
 800259a:	75fb      	strb	r3, [r7, #23]
    if (p > 0) {
 800259c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	dd77      	ble.n	8002694 <AT_SignalQualityReport+0x124>
        signal->rssi = AT_ParseNumber(&str[len], &cnt);
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	7dbb      	ldrb	r3, [r7, #22]
 80025a8:	4413      	add	r3, r2
 80025aa:	f107 020f 	add.w	r2, r7, #15
 80025ae:	4611      	mov	r1, r2
 80025b0:	4618      	mov	r0, r3
 80025b2:	f000 fdbc 	bl	800312e <AT_ParseNumber>
 80025b6:	4603      	mov	r3, r0
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	701a      	strb	r2, [r3, #0]
        len += cnt + 1;
 80025be:	7bfa      	ldrb	r2, [r7, #15]
 80025c0:	7dbb      	ldrb	r3, [r7, #22]
 80025c2:	4413      	add	r3, r2
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	3301      	adds	r3, #1
 80025c8:	75bb      	strb	r3, [r7, #22]
        signal->ber = AT_ParseNumber(&str[len], NULL);
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	7dbb      	ldrb	r3, [r7, #22]
 80025ce:	4413      	add	r3, r2
 80025d0:	2100      	movs	r1, #0
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 fdab 	bl	800312e <AT_ParseNumber>
 80025d8:	4603      	mov	r3, r0
 80025da:	b2da      	uxtb	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	705a      	strb	r2, [r3, #1]

        // Formatting
        {
            // Handle not detectable value
            if (signal->rssi > 31) {
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b1f      	cmp	r3, #31
 80025e6:	d902      	bls.n	80025ee <AT_SignalQualityReport+0x7e>
                signal->rssi = 0;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	701a      	strb	r2, [r3, #0]
            }

            // Scale RSSI to dBm
            dBm = (signal->rssi * 63.0 / 31.0) - 115.0;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7fd ffce 	bl	8000594 <__aeabi_i2d>
 80025f8:	f04f 0200 	mov.w	r2, #0
 80025fc:	4b2e      	ldr	r3, [pc, #184]	; (80026b8 <AT_SignalQualityReport+0x148>)
 80025fe:	f7fe f833 	bl	8000668 <__aeabi_dmul>
 8002602:	4603      	mov	r3, r0
 8002604:	460c      	mov	r4, r1
 8002606:	4618      	mov	r0, r3
 8002608:	4621      	mov	r1, r4
 800260a:	f04f 0200 	mov.w	r2, #0
 800260e:	4b2b      	ldr	r3, [pc, #172]	; (80026bc <AT_SignalQualityReport+0x14c>)
 8002610:	f7fe f954 	bl	80008bc <__aeabi_ddiv>
 8002614:	4603      	mov	r3, r0
 8002616:	460c      	mov	r4, r1
 8002618:	4618      	mov	r0, r3
 800261a:	4621      	mov	r1, r4
 800261c:	a322      	add	r3, pc, #136	; (adr r3, 80026a8 <AT_SignalQualityReport+0x138>)
 800261e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002622:	f7fd fe69 	bl	80002f8 <__aeabi_dsub>
 8002626:	4603      	mov	r3, r0
 8002628:	460c      	mov	r4, r1
 800262a:	4618      	mov	r0, r3
 800262c:	4621      	mov	r1, r4
 800262e:	f7fe fa4d 	bl	8000acc <__aeabi_d2f>
 8002632:	4603      	mov	r3, r0
 8002634:	613b      	str	r3, [r7, #16]
            // Scale dBm to percentage
            signal->percent = (dBm + 115.0) * 100.0 / 63.0;
 8002636:	6938      	ldr	r0, [r7, #16]
 8002638:	f7fd ffbe 	bl	80005b8 <__aeabi_f2d>
 800263c:	a31a      	add	r3, pc, #104	; (adr r3, 80026a8 <AT_SignalQualityReport+0x138>)
 800263e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002642:	f7fd fe5b 	bl	80002fc <__adddf3>
 8002646:	4603      	mov	r3, r0
 8002648:	460c      	mov	r4, r1
 800264a:	4618      	mov	r0, r3
 800264c:	4621      	mov	r1, r4
 800264e:	f04f 0200 	mov.w	r2, #0
 8002652:	4b1b      	ldr	r3, [pc, #108]	; (80026c0 <AT_SignalQualityReport+0x150>)
 8002654:	f7fe f808 	bl	8000668 <__aeabi_dmul>
 8002658:	4603      	mov	r3, r0
 800265a:	460c      	mov	r4, r1
 800265c:	4618      	mov	r0, r3
 800265e:	4621      	mov	r1, r4
 8002660:	f04f 0200 	mov.w	r2, #0
 8002664:	4b14      	ldr	r3, [pc, #80]	; (80026b8 <AT_SignalQualityReport+0x148>)
 8002666:	f7fe f929 	bl	80008bc <__aeabi_ddiv>
 800266a:	4603      	mov	r3, r0
 800266c:	460c      	mov	r4, r1
 800266e:	4618      	mov	r0, r3
 8002670:	4621      	mov	r1, r4
 8002672:	f7fe fa0b 	bl	8000a8c <__aeabi_d2uiz>
 8002676:	4603      	mov	r3, r0
 8002678:	b2da      	uxtb	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	709a      	strb	r2, [r3, #2]

            // debugging
            LOG_Str("\nSimcom:RSSI = ");
 800267e:	4811      	ldr	r0, [pc, #68]	; (80026c4 <AT_SignalQualityReport+0x154>)
 8002680:	f001 f97a 	bl	8003978 <LOG_Str>
            LOG_Int(signal->percent);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	789b      	ldrb	r3, [r3, #2]
 8002688:	4618      	mov	r0, r3
 800268a:	f001 f8fd 	bl	8003888 <LOG_Int>
            LOG_StrLn("%");
 800268e:	480e      	ldr	r0, [pc, #56]	; (80026c8 <AT_SignalQualityReport+0x158>)
 8002690:	f001 f98a 	bl	80039a8 <LOG_StrLn>
        }
    }
    Simcom_Unlock();
 8002694:	f001 fd99 	bl	80041ca <Simcom_Unlock>

    return p;
 8002698:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800269c:	4618      	mov	r0, r3
 800269e:	371c      	adds	r7, #28
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd90      	pop	{r4, r7, pc}
 80026a4:	f3af 8000 	nop.w
 80026a8:	00000000 	.word	0x00000000
 80026ac:	405cc000 	.word	0x405cc000
 80026b0:	0800a4cc 	.word	0x0800a4cc
 80026b4:	0800a4d4 	.word	0x0800a4d4
 80026b8:	404f8000 	.word	0x404f8000
 80026bc:	403f0000 	.word	0x403f0000
 80026c0:	40590000 	.word	0x40590000
 80026c4:	0800a4dc 	.word	0x0800a4dc
 80026c8:	0800a4ec 	.word	0x0800a4ec

080026cc <AT_BearerSettings>:
    Simcom_Unlock();

    return p;
}

SIMCOM_RESULT AT_BearerSettings(AT_MODE mode, at_sapbr_t *param) {
 80026cc:	b590      	push	{r4, r7, lr}
 80026ce:	b0ab      	sub	sp, #172	; 0xac
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	6039      	str	r1, [r7, #0]
 80026d6:	71fb      	strb	r3, [r7, #7]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 80026d8:	2300      	movs	r3, #0
 80026da:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    uint8_t cnt, len = 0;
 80026de:	2300      	movs	r3, #0
 80026e0:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
    char *str = NULL, cmd[80];
 80026e4:	2300      	movs	r3, #0
 80026e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    // Copy by value
    at_sapbr_t tmp = *param;
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	f107 030c 	add.w	r3, r7, #12
 80026f0:	4611      	mov	r1, r2
 80026f2:	2244      	movs	r2, #68	; 0x44
 80026f4:	4618      	mov	r0, r3
 80026f6:	f007 f9a4 	bl	8009a42 <memcpy>

    Simcom_Lock();
 80026fa:	f001 fd5f 	bl	80041bc <Simcom_Lock>
    // Read
    sprintf(cmd, "AT+SAPBR=%d,1\r", SAPBR_BEARER_QUERY);
 80026fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002702:	2202      	movs	r2, #2
 8002704:	4990      	ldr	r1, [pc, #576]	; (8002948 <AT_BearerSettings+0x27c>)
 8002706:	4618      	mov	r0, r3
 8002708:	f007 f9ae 	bl	8009a68 <siprintf>
    p = AT_CmdRead(cmd, 500, "+SAPBR: ", &str);
 800270c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002710:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002714:	4a8d      	ldr	r2, [pc, #564]	; (800294c <AT_BearerSettings+0x280>)
 8002716:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800271a:	f000 fc63 	bl	8002fe4 <AT_CmdRead>
 800271e:	4603      	mov	r3, r0
 8002720:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    if (p > 0) {
 8002724:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8002728:	2b00      	cmp	r3, #0
 800272a:	f340 8105 	ble.w	8002938 <AT_BearerSettings+0x26c>
        tmp.cmd_type = AT_ParseNumber(&str[len], &cnt);
 800272e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8002732:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8002736:	4413      	add	r3, r2
 8002738:	f107 02a5 	add.w	r2, r7, #165	; 0xa5
 800273c:	4611      	mov	r1, r2
 800273e:	4618      	mov	r0, r3
 8002740:	f000 fcf5 	bl	800312e <AT_ParseNumber>
 8002744:	4603      	mov	r3, r0
 8002746:	60fb      	str	r3, [r7, #12]
        len += cnt + 1;
 8002748:	f897 20a5 	ldrb.w	r2, [r7, #165]	; 0xa5
 800274c:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8002750:	4413      	add	r3, r2
 8002752:	b2db      	uxtb	r3, r3
 8002754:	3301      	adds	r3, #1
 8002756:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
        tmp.status = AT_ParseNumber(&str[len], &cnt);
 800275a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800275e:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8002762:	4413      	add	r3, r2
 8002764:	f107 02a5 	add.w	r2, r7, #165	; 0xa5
 8002768:	4611      	mov	r1, r2
 800276a:	4618      	mov	r0, r3
 800276c:	f000 fcdf 	bl	800312e <AT_ParseNumber>
 8002770:	4603      	mov	r3, r0
 8002772:	613b      	str	r3, [r7, #16]

        // Read parameters
        p = AT_CmdRead("AT+SAPBR=4,1\r", 500, "+SAPBR:", &str);
 8002774:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002778:	4a75      	ldr	r2, [pc, #468]	; (8002950 <AT_BearerSettings+0x284>)
 800277a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800277e:	4875      	ldr	r0, [pc, #468]	; (8002954 <AT_BearerSettings+0x288>)
 8002780:	f000 fc30 	bl	8002fe4 <AT_CmdRead>
 8002784:	4603      	mov	r3, r0
 8002786:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        if (p > 0) {
 800278a:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800278e:	2b00      	cmp	r3, #0
 8002790:	dd38      	ble.n	8002804 <AT_BearerSettings+0x138>
            if (AT_FindInBuffer("APN: ", &str)) {
 8002792:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002796:	4619      	mov	r1, r3
 8002798:	486f      	ldr	r0, [pc, #444]	; (8002958 <AT_BearerSettings+0x28c>)
 800279a:	f000 fc5b 	bl	8003054 <AT_FindInBuffer>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d009      	beq.n	80027b8 <AT_BearerSettings+0xec>
                AT_ParseText(&str[0], NULL, tmp.con.apn, sizeof(tmp.con.apn));
 80027a4:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80027a8:	f107 030c 	add.w	r3, r7, #12
 80027ac:	f103 0208 	add.w	r2, r3, #8
 80027b0:	2314      	movs	r3, #20
 80027b2:	2100      	movs	r1, #0
 80027b4:	f000 fc71 	bl	800309a <AT_ParseText>
            }
            if (AT_FindInBuffer("USER: ", &str)) {
 80027b8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80027bc:	4619      	mov	r1, r3
 80027be:	4867      	ldr	r0, [pc, #412]	; (800295c <AT_BearerSettings+0x290>)
 80027c0:	f000 fc48 	bl	8003054 <AT_FindInBuffer>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d009      	beq.n	80027de <AT_BearerSettings+0x112>
                AT_ParseText(&str[0], NULL, tmp.con.username, sizeof(tmp.con.username));
 80027ca:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80027ce:	f107 030c 	add.w	r3, r7, #12
 80027d2:	f103 021c 	add.w	r2, r3, #28
 80027d6:	2314      	movs	r3, #20
 80027d8:	2100      	movs	r1, #0
 80027da:	f000 fc5e 	bl	800309a <AT_ParseText>
            }
            if (AT_FindInBuffer("PWD: ", &str)) {
 80027de:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80027e2:	4619      	mov	r1, r3
 80027e4:	485e      	ldr	r0, [pc, #376]	; (8002960 <AT_BearerSettings+0x294>)
 80027e6:	f000 fc35 	bl	8003054 <AT_FindInBuffer>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d009      	beq.n	8002804 <AT_BearerSettings+0x138>
                AT_ParseText(&str[0], NULL, tmp.con.password, sizeof(tmp.con.password));
 80027f0:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80027f4:	f107 030c 	add.w	r3, r7, #12
 80027f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80027fc:	2314      	movs	r3, #20
 80027fe:	2100      	movs	r1, #0
 8002800:	f000 fc4b 	bl	800309a <AT_ParseText>
            }
        }

        // Write
        if (mode == ATW) {
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	2b00      	cmp	r3, #0
 8002808:	f040 808e 	bne.w	8002928 <AT_BearerSettings+0x25c>
            if (memcmp(tmp.con.apn, param->con.apn, strlen(param->con.apn)) != 0) {
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	f103 0408 	add.w	r4, r3, #8
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	3308      	adds	r3, #8
 8002816:	4618      	mov	r0, r3
 8002818:	f7fd fd0c 	bl	8000234 <strlen>
 800281c:	4602      	mov	r2, r0
 800281e:	f107 030c 	add.w	r3, r7, #12
 8002822:	3308      	adds	r3, #8
 8002824:	4621      	mov	r1, r4
 8002826:	4618      	mov	r0, r3
 8002828:	f007 f8fc 	bl	8009a24 <memcmp>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d013      	beq.n	800285a <AT_BearerSettings+0x18e>
                sprintf(cmd, "AT+SAPBR=3,1,\"APN\",\"%s\"\r", param->con.apn);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	f103 0208 	add.w	r2, r3, #8
 8002838:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800283c:	4949      	ldr	r1, [pc, #292]	; (8002964 <AT_BearerSettings+0x298>)
 800283e:	4618      	mov	r0, r3
 8002840:	f007 f912 	bl	8009a68 <siprintf>
                p = AT_CmdWrite(cmd, 500, NULL);
 8002844:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002848:	2200      	movs	r2, #0
 800284a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800284e:	4618      	mov	r0, r3
 8002850:	f000 fbaa 	bl	8002fa8 <AT_CmdWrite>
 8002854:	4603      	mov	r3, r0
 8002856:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
            }
            if (memcmp(tmp.con.apn, param->con.username, strlen(param->con.username)) != 0) {
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	f103 041c 	add.w	r4, r3, #28
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	331c      	adds	r3, #28
 8002864:	4618      	mov	r0, r3
 8002866:	f7fd fce5 	bl	8000234 <strlen>
 800286a:	4602      	mov	r2, r0
 800286c:	f107 030c 	add.w	r3, r7, #12
 8002870:	3308      	adds	r3, #8
 8002872:	4621      	mov	r1, r4
 8002874:	4618      	mov	r0, r3
 8002876:	f007 f8d5 	bl	8009a24 <memcmp>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d013      	beq.n	80028a8 <AT_BearerSettings+0x1dc>
                sprintf(cmd, "AT+SAPBR=3,1,\"USER\",\"%s\"\r", param->con.username);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	f103 021c 	add.w	r2, r3, #28
 8002886:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800288a:	4937      	ldr	r1, [pc, #220]	; (8002968 <AT_BearerSettings+0x29c>)
 800288c:	4618      	mov	r0, r3
 800288e:	f007 f8eb 	bl	8009a68 <siprintf>
                p = AT_CmdWrite(cmd, 500, NULL);
 8002892:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002896:	2200      	movs	r2, #0
 8002898:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800289c:	4618      	mov	r0, r3
 800289e:	f000 fb83 	bl	8002fa8 <AT_CmdWrite>
 80028a2:	4603      	mov	r3, r0
 80028a4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
            }
            if (memcmp(tmp.con.apn, param->con.password, strlen(param->con.password)) != 0) {
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	3330      	adds	r3, #48	; 0x30
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fd fcbe 	bl	8000234 <strlen>
 80028b8:	4602      	mov	r2, r0
 80028ba:	f107 030c 	add.w	r3, r7, #12
 80028be:	3308      	adds	r3, #8
 80028c0:	4621      	mov	r1, r4
 80028c2:	4618      	mov	r0, r3
 80028c4:	f007 f8ae 	bl	8009a24 <memcmp>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d013      	beq.n	80028f6 <AT_BearerSettings+0x22a>
                sprintf(cmd, "AT+SAPBR=3,1,\"PWD\",\"%s\"\r", param->con.password);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80028d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80028d8:	4924      	ldr	r1, [pc, #144]	; (800296c <AT_BearerSettings+0x2a0>)
 80028da:	4618      	mov	r0, r3
 80028dc:	f007 f8c4 	bl	8009a68 <siprintf>
                p = AT_CmdWrite(cmd, 500, NULL);
 80028e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80028e4:	2200      	movs	r2, #0
 80028e6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80028ea:	4618      	mov	r0, r3
 80028ec:	f000 fb5c 	bl	8002fa8 <AT_CmdWrite>
 80028f0:	4603      	mov	r3, r0
 80028f2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
            }

            // open or close
            if (tmp.status != param->status) {
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d01b      	beq.n	8002938 <AT_BearerSettings+0x26c>
                sprintf(cmd, "AT+SAPBR=%d,1\r", param->cmd_type);
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002908:	490f      	ldr	r1, [pc, #60]	; (8002948 <AT_BearerSettings+0x27c>)
 800290a:	4618      	mov	r0, r3
 800290c:	f007 f8ac 	bl	8009a68 <siprintf>
                p = AT_CmdWrite(cmd, 60000, NULL);
 8002910:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002914:	2200      	movs	r2, #0
 8002916:	f64e 2160 	movw	r1, #60000	; 0xea60
 800291a:	4618      	mov	r0, r3
 800291c:	f000 fb44 	bl	8002fa8 <AT_CmdWrite>
 8002920:	4603      	mov	r3, r0
 8002922:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002926:	e007      	b.n	8002938 <AT_BearerSettings+0x26c>
            }
        } else {
            *param = tmp;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f107 030c 	add.w	r3, r7, #12
 8002930:	2244      	movs	r2, #68	; 0x44
 8002932:	4619      	mov	r1, r3
 8002934:	f007 f885 	bl	8009a42 <memcpy>
        }
    }
    Simcom_Unlock();
 8002938:	f001 fc47 	bl	80041ca <Simcom_Unlock>

    return p;
 800293c:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
}
 8002940:	4618      	mov	r0, r3
 8002942:	37ac      	adds	r7, #172	; 0xac
 8002944:	46bd      	mov	sp, r7
 8002946:	bd90      	pop	{r4, r7, pc}
 8002948:	0800a5c0 	.word	0x0800a5c0
 800294c:	0800a5d0 	.word	0x0800a5d0
 8002950:	0800a5dc 	.word	0x0800a5dc
 8002954:	0800a5e4 	.word	0x0800a5e4
 8002958:	0800a5f4 	.word	0x0800a5f4
 800295c:	0800a5fc 	.word	0x0800a5fc
 8002960:	0800a604 	.word	0x0800a604
 8002964:	0800a60c 	.word	0x0800a60c
 8002968:	0800a628 	.word	0x0800a628
 800296c:	0800a644 	.word	0x0800a644

08002970 <AT_RadioAccessTechnology>:

SIMCOM_RESULT AT_RadioAccessTechnology(AT_MODE mode, at_cnmp_t *param) {
 8002970:	b580      	push	{r7, lr}
 8002972:	b08a      	sub	sp, #40	; 0x28
 8002974:	af00      	add	r7, sp, #0
 8002976:	4603      	mov	r3, r0
 8002978:	6039      	str	r1, [r7, #0]
 800297a:	71fb      	strb	r3, [r7, #7]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 800297c:	2300      	movs	r3, #0
 800297e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t cnt, len = 0;
 8002982:	2300      	movs	r3, #0
 8002984:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    char *str = NULL, cmd[14];
 8002988:	2300      	movs	r3, #0
 800298a:	623b      	str	r3, [r7, #32]

    // Copy by value
    at_cnmp_t tmp = *param;
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	f107 0308 	add.w	r3, r7, #8
 8002992:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002996:	e883 0003 	stmia.w	r3, {r0, r1}

    Simcom_Lock();
 800299a:	f001 fc0f 	bl	80041bc <Simcom_Lock>
    // Read
    p = AT_CmdRead("AT+CNMP?\r", 500, "+CNMP: ", &str);
 800299e:	f107 0320 	add.w	r3, r7, #32
 80029a2:	4a3a      	ldr	r2, [pc, #232]	; (8002a8c <AT_RadioAccessTechnology+0x11c>)
 80029a4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80029a8:	4839      	ldr	r0, [pc, #228]	; (8002a90 <AT_RadioAccessTechnology+0x120>)
 80029aa:	f000 fb1b 	bl	8002fe4 <AT_CmdRead>
 80029ae:	4603      	mov	r3, r0
 80029b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (p > 0) {
 80029b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	dd5e      	ble.n	8002a7a <AT_RadioAccessTechnology+0x10a>
        param->mode = AT_ParseNumber(&str[len], &cnt);
 80029bc:	6a3a      	ldr	r2, [r7, #32]
 80029be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80029c2:	4413      	add	r3, r2
 80029c4:	f107 0225 	add.w	r2, r7, #37	; 0x25
 80029c8:	4611      	mov	r1, r2
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 fbaf 	bl	800312e <AT_ParseNumber>
 80029d0:	4603      	mov	r3, r0
 80029d2:	461a      	mov	r2, r3
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	601a      	str	r2, [r3, #0]
        if (param->mode == CNMP_ACT_AUTO) {
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d116      	bne.n	8002a0e <AT_RadioAccessTechnology+0x9e>
            len += cnt + 1;
 80029e0:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80029e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80029e8:	4413      	add	r3, r2
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	3301      	adds	r3, #1
 80029ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            param->preferred = AT_ParseNumber(&str[len], &cnt);
 80029f2:	6a3a      	ldr	r2, [r7, #32]
 80029f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80029f8:	4413      	add	r3, r2
 80029fa:	f107 0225 	add.w	r2, r7, #37	; 0x25
 80029fe:	4611      	mov	r1, r2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f000 fb94 	bl	800312e <AT_ParseNumber>
 8002a06:	4603      	mov	r3, r0
 8002a08:	461a      	mov	r2, r3
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
        }

        // Write
        if (mode == ATW) {
 8002a0e:	79fb      	ldrb	r3, [r7, #7]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d12a      	bne.n	8002a6a <AT_RadioAccessTechnology+0xfa>
            if (memcmp(&tmp, param, sizeof(at_cnmp_t)) != 0) {
 8002a14:	f107 0308 	add.w	r3, r7, #8
 8002a18:	2208      	movs	r2, #8
 8002a1a:	6839      	ldr	r1, [r7, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f007 f801 	bl	8009a24 <memcmp>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d028      	beq.n	8002a7a <AT_RadioAccessTechnology+0x10a>
                if (tmp.mode == CNMP_ACT_AUTO) {
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d109      	bne.n	8002a42 <AT_RadioAccessTechnology+0xd2>
                    sprintf(cmd, "AT+CNMP=%d%d\r", param->mode, param->preferred);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f107 0010 	add.w	r0, r7, #16
 8002a3a:	4916      	ldr	r1, [pc, #88]	; (8002a94 <AT_RadioAccessTechnology+0x124>)
 8002a3c:	f007 f814 	bl	8009a68 <siprintf>
 8002a40:	e007      	b.n	8002a52 <AT_RadioAccessTechnology+0xe2>
                } else {
                    sprintf(cmd, "AT+CNMP=%d\r", param->mode);
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	f107 0310 	add.w	r3, r7, #16
 8002a4a:	4913      	ldr	r1, [pc, #76]	; (8002a98 <AT_RadioAccessTechnology+0x128>)
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f007 f80b 	bl	8009a68 <siprintf>
                }

                p = AT_CmdWrite(cmd, 10000, NULL);
 8002a52:	f107 0310 	add.w	r3, r7, #16
 8002a56:	2200      	movs	r2, #0
 8002a58:	f242 7110 	movw	r1, #10000	; 0x2710
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f000 faa3 	bl	8002fa8 <AT_CmdWrite>
 8002a62:	4603      	mov	r3, r0
 8002a64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002a68:	e007      	b.n	8002a7a <AT_RadioAccessTechnology+0x10a>
            }
        } else {
            *param = tmp;
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	f107 0308 	add.w	r3, r7, #8
 8002a72:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002a76:	e882 0003 	stmia.w	r2, {r0, r1}
        }
    }
    Simcom_Unlock();
 8002a7a:	f001 fba6 	bl	80041ca <Simcom_Unlock>

    return p;
 8002a7e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3728      	adds	r7, #40	; 0x28
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	0800a660 	.word	0x0800a660
 8002a90:	0800a668 	.word	0x0800a668
 8002a94:	0800a674 	.word	0x0800a674
 8002a98:	0800a684 	.word	0x0800a684

08002a9c <AT_NetworkAttachedStatus>:

SIMCOM_RESULT AT_NetworkAttachedStatus(AT_MODE mode, at_csact_t *param) {
 8002a9c:	b590      	push	{r4, r7, lr}
 8002a9e:	b08d      	sub	sp, #52	; 0x34
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	6039      	str	r1, [r7, #0]
 8002aa6:	71fb      	strb	r3, [r7, #7]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t cnt, len = 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    char *str = NULL, cmd[14];
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	62bb      	str	r3, [r7, #40]	; 0x28

    // Copy by value
    at_csact_t tmp = *param;
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	f107 030c 	add.w	r3, r7, #12
 8002abe:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ac0:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    Simcom_Lock();
 8002ac4:	f001 fb7a 	bl	80041bc <Simcom_Lock>
    // Read
    p = AT_CmdRead("AT+CSACT?\r", 500, "+CSACT: ", &str);
 8002ac8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002acc:	4a46      	ldr	r2, [pc, #280]	; (8002be8 <AT_NetworkAttachedStatus+0x14c>)
 8002ace:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002ad2:	4846      	ldr	r0, [pc, #280]	; (8002bec <AT_NetworkAttachedStatus+0x150>)
 8002ad4:	f000 fa86 	bl	8002fe4 <AT_CmdRead>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (p > 0) {
 8002ade:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	dd77      	ble.n	8002bd6 <AT_NetworkAttachedStatus+0x13a>
        tmp.act = AT_ParseNumber(&str[len], &cnt);
 8002ae6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ae8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002aec:	4413      	add	r3, r2
 8002aee:	f107 022d 	add.w	r2, r7, #45	; 0x2d
 8002af2:	4611      	mov	r1, r2
 8002af4:	4618      	mov	r0, r3
 8002af6:	f000 fb1a 	bl	800312e <AT_ParseNumber>
 8002afa:	4603      	mov	r3, r0
 8002afc:	60fb      	str	r3, [r7, #12]
        len += cnt + 1;
 8002afe:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002b02:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002b06:	4413      	add	r3, r2
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        AT_ParseText(&str[len], &cnt, tmp.rac, sizeof(tmp.rac));
 8002b10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b12:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002b16:	18d0      	adds	r0, r2, r3
 8002b18:	f107 030c 	add.w	r3, r7, #12
 8002b1c:	1d1a      	adds	r2, r3, #4
 8002b1e:	f107 012d 	add.w	r1, r7, #45	; 0x2d
 8002b22:	2303      	movs	r3, #3
 8002b24:	f000 fab9 	bl	800309a <AT_ParseText>
        len += cnt + 1;
 8002b28:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002b2c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002b30:	4413      	add	r3, r2
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	3301      	adds	r3, #1
 8002b36:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        tmp.creg = AT_ParseNumber(&str[len], &cnt);
 8002b3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b3c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002b40:	4413      	add	r3, r2
 8002b42:	f107 022d 	add.w	r2, r7, #45	; 0x2d
 8002b46:	4611      	mov	r1, r2
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f000 faf0 	bl	800312e <AT_ParseNumber>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	74fb      	strb	r3, [r7, #19]
        len += cnt + 1;
 8002b54:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002b58:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002b5c:	4413      	add	r3, r2
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	3301      	adds	r3, #1
 8002b62:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        tmp.cgreg = AT_ParseNumber(&str[len], &cnt);
 8002b66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b68:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f107 022d 	add.w	r2, r7, #45	; 0x2d
 8002b72:	4611      	mov	r1, r2
 8002b74:	4618      	mov	r0, r3
 8002b76:	f000 fada 	bl	800312e <AT_ParseNumber>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	753b      	strb	r3, [r7, #20]

        // Write
        if (mode == ATW) {
 8002b80:	79fb      	ldrb	r3, [r7, #7]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d11f      	bne.n	8002bc6 <AT_NetworkAttachedStatus+0x12a>
            if (tmp.cgreg != param->creg || tmp.cgreg != param->cgreg) {
 8002b86:	7d3a      	ldrb	r2, [r7, #20]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	79db      	ldrb	r3, [r3, #7]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d104      	bne.n	8002b9a <AT_NetworkAttachedStatus+0xfe>
 8002b90:	7d3a      	ldrb	r2, [r7, #20]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	7a1b      	ldrb	r3, [r3, #8]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d01d      	beq.n	8002bd6 <AT_NetworkAttachedStatus+0x13a>
                sprintf(cmd, "AT+CSACT=%d,%d\r", param->creg, param->cgreg);
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	79db      	ldrb	r3, [r3, #7]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	7a1b      	ldrb	r3, [r3, #8]
 8002ba4:	f107 0018 	add.w	r0, r7, #24
 8002ba8:	4911      	ldr	r1, [pc, #68]	; (8002bf0 <AT_NetworkAttachedStatus+0x154>)
 8002baa:	f006 ff5d 	bl	8009a68 <siprintf>
                p = AT_CmdWrite(cmd, 500, NULL);
 8002bae:	f107 0318 	add.w	r3, r7, #24
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 f9f5 	bl	8002fa8 <AT_CmdWrite>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002bc4:	e007      	b.n	8002bd6 <AT_NetworkAttachedStatus+0x13a>
            }
        } else {
            *param = tmp;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	461c      	mov	r4, r3
 8002bca:	f107 030c 	add.w	r3, r7, #12
 8002bce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002bd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        }
    }
    Simcom_Unlock();
 8002bd6:	f001 faf8 	bl	80041ca <Simcom_Unlock>

    return p;
 8002bda:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3734      	adds	r7, #52	; 0x34
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd90      	pop	{r4, r7, pc}
 8002be6:	bf00      	nop
 8002be8:	0800a690 	.word	0x0800a690
 8002bec:	0800a69c 	.word	0x0800a69c
 8002bf0:	0800a6a8 	.word	0x0800a6a8

08002bf4 <AT_NetworkRegistration>:

SIMCOM_RESULT AT_NetworkRegistration(char command[20], AT_MODE mode, at_c_greg_t *param) {
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b090      	sub	sp, #64	; 0x40
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	72fb      	strb	r3, [r7, #11]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 8002c02:	2300      	movs	r3, #0
 8002c04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    uint8_t cnt, len = 0;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    char *str = NULL, cmd[14], res[15];
 8002c0e:	2300      	movs	r3, #0
 8002c10:	63bb      	str	r3, [r7, #56]	; 0x38

    // Copy by value
    at_c_greg_t tmp = *param;
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	f107 0310 	add.w	r3, r7, #16
 8002c18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c1c:	e883 0003 	stmia.w	r3, {r0, r1}

    Simcom_Lock();
 8002c20:	f001 facc 	bl	80041bc <Simcom_Lock>
    // Read
    sprintf(cmd, "AT+%s?\r", command);
 8002c24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	4937      	ldr	r1, [pc, #220]	; (8002d08 <AT_NetworkRegistration+0x114>)
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f006 ff1b 	bl	8009a68 <siprintf>
    sprintf(res, "+%s: ", command);
 8002c32:	f107 0318 	add.w	r3, r7, #24
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	4934      	ldr	r1, [pc, #208]	; (8002d0c <AT_NetworkRegistration+0x118>)
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f006 ff14 	bl	8009a68 <siprintf>
    p = AT_CmdRead(cmd, 500, res, &str);
 8002c40:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002c44:	f107 0218 	add.w	r2, r7, #24
 8002c48:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002c4c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002c50:	f000 f9c8 	bl	8002fe4 <AT_CmdRead>
 8002c54:	4603      	mov	r3, r0
 8002c56:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (p > 0) {
 8002c5a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	dd49      	ble.n	8002cf6 <AT_NetworkRegistration+0x102>
        tmp.mode = AT_ParseNumber(&str[len], &cnt);
 8002c62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c64:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002c68:	4413      	add	r3, r2
 8002c6a:	f107 023d 	add.w	r2, r7, #61	; 0x3d
 8002c6e:	4611      	mov	r1, r2
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 fa5c 	bl	800312e <AT_ParseNumber>
 8002c76:	4603      	mov	r3, r0
 8002c78:	613b      	str	r3, [r7, #16]
        len += cnt + 1;
 8002c7a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002c7e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002c82:	4413      	add	r3, r2
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	3301      	adds	r3, #1
 8002c88:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        tmp.stat = AT_ParseNumber(&str[len], &cnt);
 8002c8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c8e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002c92:	4413      	add	r3, r2
 8002c94:	f107 023d 	add.w	r2, r7, #61	; 0x3d
 8002c98:	4611      	mov	r1, r2
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 fa47 	bl	800312e <AT_ParseNumber>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	617b      	str	r3, [r7, #20]

        // Write
        if (mode == ATW) {
 8002ca4:	7afb      	ldrb	r3, [r7, #11]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d11d      	bne.n	8002ce6 <AT_NetworkRegistration+0xf2>
            if (memcmp(&tmp, param, sizeof(tmp)) != 0) {
 8002caa:	f107 0310 	add.w	r3, r7, #16
 8002cae:	2208      	movs	r2, #8
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f006 feb6 	bl	8009a24 <memcmp>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d01b      	beq.n	8002cf6 <AT_NetworkRegistration+0x102>
                sprintf(cmd, "AT+%s=%d\r", command, param->mode);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	4911      	ldr	r1, [pc, #68]	; (8002d10 <AT_NetworkRegistration+0x11c>)
 8002cca:	f006 fecd 	bl	8009a68 <siprintf>
                p = AT_CmdWrite(cmd, 500, NULL);
 8002cce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f000 f965 	bl	8002fa8 <AT_CmdWrite>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002ce4:	e007      	b.n	8002cf6 <AT_NetworkRegistration+0x102>
            }
        } else {
            *param = tmp;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	461a      	mov	r2, r3
 8002cea:	f107 0310 	add.w	r3, r7, #16
 8002cee:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002cf2:	e882 0003 	stmia.w	r2, {r0, r1}
        }
    }
    Simcom_Unlock();
 8002cf6:	f001 fa68 	bl	80041ca <Simcom_Unlock>

    return p;
 8002cfa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3740      	adds	r7, #64	; 0x40
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	0800a6b8 	.word	0x0800a6b8
 8002d0c:	0800a6c0 	.word	0x0800a6c0
 8002d10:	0800a6c8 	.word	0x0800a6c8

08002d14 <AT_ConfigureSlowClock>:

SIMCOM_RESULT AT_EnableLocalTimestamp(AT_MODE mode, AT_BOOL *state) {
    return AT_SingleInteger("CLTS", mode, (int32_t*) state, 0);
}

SIMCOM_RESULT AT_ConfigureSlowClock(AT_MODE mode, AT_CSCLK *state) {
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	6039      	str	r1, [r7, #0]
 8002d1e:	71fb      	strb	r3, [r7, #7]
    return AT_SingleInteger("CSCLK", mode, (int32_t*) state, 0);
 8002d20:	79f9      	ldrb	r1, [r7, #7]
 8002d22:	2300      	movs	r3, #0
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	4804      	ldr	r0, [pc, #16]	; (8002d38 <AT_ConfigureSlowClock+0x24>)
 8002d28:	f000 f8ce 	bl	8002ec8 <AT_SingleInteger>
 8002d2c:	4603      	mov	r3, r0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	0800a6ec 	.word	0x0800a6ec

08002d3c <AT_ReportMobileEquipmentError>:

SIMCOM_RESULT AT_ReportMobileEquipmentError(AT_MODE mode, AT_CMEE *state) {
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	6039      	str	r1, [r7, #0]
 8002d46:	71fb      	strb	r3, [r7, #7]
    return AT_SingleInteger("CMEE", mode, (int32_t*) state, 0);
 8002d48:	79f9      	ldrb	r1, [r7, #7]
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	4804      	ldr	r0, [pc, #16]	; (8002d60 <AT_ReportMobileEquipmentError+0x24>)
 8002d50:	f000 f8ba 	bl	8002ec8 <AT_SingleInteger>
 8002d54:	4603      	mov	r3, r0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	0800a6f4 	.word	0x0800a6f4

08002d64 <AT_FixedLocalRate>:

SIMCOM_RESULT AT_FixedLocalRate(AT_MODE mode, uint32_t *rate) {
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	6039      	str	r1, [r7, #0]
 8002d6e:	71fb      	strb	r3, [r7, #7]
    return AT_SingleInteger("IPR", mode, (int32_t*) rate, 0);
 8002d70:	79f9      	ldrb	r1, [r7, #7]
 8002d72:	2300      	movs	r3, #0
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	4804      	ldr	r0, [pc, #16]	; (8002d88 <AT_FixedLocalRate+0x24>)
 8002d78:	f000 f8a6 	bl	8002ec8 <AT_SingleInteger>
 8002d7c:	4603      	mov	r3, r0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	0800a6fc 	.word	0x0800a6fc

08002d8c <AT_SingleString>:

/* Private functions implementation --------------------------------------------*/
static SIMCOM_RESULT AT_SingleString(char command[20], AT_MODE mode, char *string, uint8_t size, uint8_t executor) {
 8002d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d8e:	b093      	sub	sp, #76	; 0x4c
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	607a      	str	r2, [r7, #4]
 8002d96:	461a      	mov	r2, r3
 8002d98:	460b      	mov	r3, r1
 8002d9a:	72fb      	strb	r3, [r7, #11]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	72bb      	strb	r3, [r7, #10]
 8002da0:	466b      	mov	r3, sp
 8002da2:	461e      	mov	r6, r3
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 8002da4:	2300      	movs	r3, #0
 8002da6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    char *str = NULL, cmd[20], res[20], tmp[size];
 8002daa:	2300      	movs	r3, #0
 8002dac:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dae:	7abd      	ldrb	r5, [r7, #10]
 8002db0:	462b      	mov	r3, r5
 8002db2:	3b01      	subs	r3, #1
 8002db4:	643b      	str	r3, [r7, #64]	; 0x40
 8002db6:	b2e9      	uxtb	r1, r5
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	f04f 0300 	mov.w	r3, #0
 8002dc0:	f04f 0400 	mov.w	r4, #0
 8002dc4:	00d4      	lsls	r4, r2, #3
 8002dc6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002dca:	00cb      	lsls	r3, r1, #3
 8002dcc:	b2e9      	uxtb	r1, r5
 8002dce:	f04f 0200 	mov.w	r2, #0
 8002dd2:	f04f 0300 	mov.w	r3, #0
 8002dd6:	f04f 0400 	mov.w	r4, #0
 8002dda:	00d4      	lsls	r4, r2, #3
 8002ddc:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002de0:	00cb      	lsls	r3, r1, #3
 8002de2:	462b      	mov	r3, r5
 8002de4:	3307      	adds	r3, #7
 8002de6:	08db      	lsrs	r3, r3, #3
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	ebad 0d03 	sub.w	sp, sp, r3
 8002dee:	466b      	mov	r3, sp
 8002df0:	3300      	adds	r3, #0
 8002df2:	63fb      	str	r3, [r7, #60]	; 0x3c

    // Copy by vale
    memcpy(tmp, string, size);
 8002df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002df6:	7aba      	ldrb	r2, [r7, #10]
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f006 fe21 	bl	8009a42 <memcpy>

    Simcom_Lock();
 8002e00:	f001 f9dc 	bl	80041bc <Simcom_Lock>
    // Read
    sprintf(cmd, "AT+%s%s", command, executor ? "\r" : "?\r");
 8002e04:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <AT_SingleString+0x84>
 8002e0c:	4b29      	ldr	r3, [pc, #164]	; (8002eb4 <AT_SingleString+0x128>)
 8002e0e:	e000      	b.n	8002e12 <AT_SingleString+0x86>
 8002e10:	4b29      	ldr	r3, [pc, #164]	; (8002eb8 <AT_SingleString+0x12c>)
 8002e12:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	4928      	ldr	r1, [pc, #160]	; (8002ebc <AT_SingleString+0x130>)
 8002e1a:	f006 fe25 	bl	8009a68 <siprintf>
    sprintf(res, "+%s: ", command);
 8002e1e:	f107 0310 	add.w	r3, r7, #16
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	4926      	ldr	r1, [pc, #152]	; (8002ec0 <AT_SingleString+0x134>)
 8002e26:	4618      	mov	r0, r3
 8002e28:	f006 fe1e 	bl	8009a68 <siprintf>
    p = AT_CmdRead(cmd, 1000, res, &str);
 8002e2c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002e30:	f107 0210 	add.w	r2, r7, #16
 8002e34:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002e38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002e3c:	f000 f8d2 	bl	8002fe4 <AT_CmdRead>
 8002e40:	4603      	mov	r3, r0
 8002e42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (p > 0) {
 8002e46:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	dd29      	ble.n	8002ea2 <AT_SingleString+0x116>
        AT_ParseText(&str[0], NULL, tmp, sizeof(tmp));
 8002e4e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002e50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e52:	462b      	mov	r3, r5
 8002e54:	2100      	movs	r1, #0
 8002e56:	f000 f920 	bl	800309a <AT_ParseText>

        // Write
        if (mode == ATW) {
 8002e5a:	7afb      	ldrb	r3, [r7, #11]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d11a      	bne.n	8002e96 <AT_SingleString+0x10a>
            if (strcmp(tmp, string) != 0) {
 8002e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7fd f9db 	bl	8000220 <strcmp>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d018      	beq.n	8002ea2 <AT_SingleString+0x116>
                sprintf(cmd, "AT+%s=\"%s\"\r", command, string);
 8002e70:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	4912      	ldr	r1, [pc, #72]	; (8002ec4 <AT_SingleString+0x138>)
 8002e7a:	f006 fdf5 	bl	8009a68 <siprintf>
                p = AT_CmdWrite(cmd, 500, NULL);
 8002e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e82:	2200      	movs	r2, #0
 8002e84:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f000 f88d 	bl	8002fa8 <AT_CmdWrite>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002e94:	e005      	b.n	8002ea2 <AT_SingleString+0x116>
            }
        } else {
            memcpy(string, tmp, size);
 8002e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e98:	7aba      	ldrb	r2, [r7, #10]
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f006 fdd0 	bl	8009a42 <memcpy>
        }
    }
    Simcom_Unlock();
 8002ea2:	f001 f992 	bl	80041ca <Simcom_Unlock>

    return p;
 8002ea6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8002eaa:	46b5      	mov	sp, r6
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	374c      	adds	r7, #76	; 0x4c
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eb4:	0800a700 	.word	0x0800a700
 8002eb8:	0800a704 	.word	0x0800a704
 8002ebc:	0800a708 	.word	0x0800a708
 8002ec0:	0800a6c0 	.word	0x0800a6c0
 8002ec4:	0800a710 	.word	0x0800a710

08002ec8 <AT_SingleInteger>:

static SIMCOM_RESULT AT_SingleInteger(char command[20], AT_MODE mode, int32_t *value, uint8_t executor) {
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b092      	sub	sp, #72	; 0x48
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	607a      	str	r2, [r7, #4]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	72fb      	strb	r3, [r7, #11]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	72bb      	strb	r3, [r7, #10]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 8002edc:	2300      	movs	r3, #0
 8002ede:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    char *str = NULL, cmd[20], res[20];
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	63fb      	str	r3, [r7, #60]	; 0x3c

    // Copy by vale
    int32_t tmp = *value;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	643b      	str	r3, [r7, #64]	; 0x40

    Simcom_Lock();
 8002eec:	f001 f966 	bl	80041bc <Simcom_Lock>
    // Read
    sprintf(cmd, "AT+%s%s", command, executor ? "\r" : "?\r");
 8002ef0:	7abb      	ldrb	r3, [r7, #10]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <AT_SingleInteger+0x32>
 8002ef6:	4b27      	ldr	r3, [pc, #156]	; (8002f94 <AT_SingleInteger+0xcc>)
 8002ef8:	e000      	b.n	8002efc <AT_SingleInteger+0x34>
 8002efa:	4b27      	ldr	r3, [pc, #156]	; (8002f98 <AT_SingleInteger+0xd0>)
 8002efc:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	4926      	ldr	r1, [pc, #152]	; (8002f9c <AT_SingleInteger+0xd4>)
 8002f04:	f006 fdb0 	bl	8009a68 <siprintf>
    sprintf(res, "+%s: ", command);
 8002f08:	f107 0314 	add.w	r3, r7, #20
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	4924      	ldr	r1, [pc, #144]	; (8002fa0 <AT_SingleInteger+0xd8>)
 8002f10:	4618      	mov	r0, r3
 8002f12:	f006 fda9 	bl	8009a68 <siprintf>
    p = AT_CmdRead(cmd, 1000, res, &str);
 8002f16:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f1a:	f107 0214 	add.w	r2, r7, #20
 8002f1e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002f22:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002f26:	f000 f85d 	bl	8002fe4 <AT_CmdRead>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (p > 0) {
 8002f30:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	dd24      	ble.n	8002f82 <AT_SingleInteger+0xba>
        tmp = AT_ParseNumber(&str[0], NULL);
 8002f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 f8f6 	bl	800312e <AT_ParseNumber>
 8002f42:	6438      	str	r0, [r7, #64]	; 0x40

        // Write
        if (mode == ATW) {
 8002f44:	7afb      	ldrb	r3, [r7, #11]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d118      	bne.n	8002f7c <AT_SingleInteger+0xb4>
            if (tmp != *value) {
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d016      	beq.n	8002f82 <AT_SingleInteger+0xba>
                sprintf(cmd, "AT+%s=%d\r", command, (int) *value);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	4911      	ldr	r1, [pc, #68]	; (8002fa4 <AT_SingleInteger+0xdc>)
 8002f60:	f006 fd82 	bl	8009a68 <siprintf>
                p = AT_CmdWrite(cmd, 500, NULL);
 8002f64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f000 f81a 	bl	8002fa8 <AT_CmdWrite>
 8002f74:	4603      	mov	r3, r0
 8002f76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002f7a:	e002      	b.n	8002f82 <AT_SingleInteger+0xba>
            }
        } else {
            *value = tmp;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f80:	601a      	str	r2, [r3, #0]
        }
    }
    Simcom_Unlock();
 8002f82:	f001 f922 	bl	80041ca <Simcom_Unlock>

    return p;
 8002f86:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3748      	adds	r7, #72	; 0x48
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	0800a700 	.word	0x0800a700
 8002f98:	0800a704 	.word	0x0800a704
 8002f9c:	0800a708 	.word	0x0800a708
 8002fa0:	0800a6c0 	.word	0x0800a6c0
 8002fa4:	0800a6c8 	.word	0x0800a6c8

08002fa8 <AT_CmdWrite>:

static SIMCOM_RESULT AT_CmdWrite(char *cmd, uint32_t ms, char *res) {
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	75fb      	strb	r3, [r7, #23]

    if (SIM.state >= SIM_STATE_READY) {
 8002fb8:	4b09      	ldr	r3, [pc, #36]	; (8002fe0 <AT_CmdWrite+0x38>)
 8002fba:	f993 3000 	ldrsb.w	r3, [r3]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	db07      	blt.n	8002fd2 <AT_CmdWrite+0x2a>
        p = Simcom_Command(cmd, res, ms, 0);
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f001 fb9f 	bl	800470c <Simcom_Command>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	75fb      	strb	r3, [r7, #23]
    }

    return p;
 8002fd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	20000008 	.word	0x20000008

08002fe4 <AT_CmdRead>:

static SIMCOM_RESULT AT_CmdRead(char *cmd, uint32_t ms, char *prefix, char **str) {
 8002fe4:	b590      	push	{r4, r7, lr}
 8002fe6:	b087      	sub	sp, #28
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
 8002ff0:	603b      	str	r3, [r7, #0]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	75fb      	strb	r3, [r7, #23]

    if (SIM.state >= SIM_STATE_READY) {
 8002ff6:	4b16      	ldr	r3, [pc, #88]	; (8003050 <AT_CmdRead+0x6c>)
 8002ff8:	f993 3000 	ldrsb.w	r3, [r3]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	db20      	blt.n	8003042 <AT_CmdRead+0x5e>
        p = Simcom_Command(cmd, prefix, ms, 0);
 8003000:	2300      	movs	r3, #0
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f001 fb80 	bl	800470c <Simcom_Command>
 800300c:	4603      	mov	r3, r0
 800300e:	75fb      	strb	r3, [r7, #23]

        if (p > 0) {
 8003010:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003014:	2b00      	cmp	r3, #0
 8003016:	dd14      	ble.n	8003042 <AT_CmdRead+0x5e>
            *str = Simcom_Response(prefix);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f001 f8dd 	bl	80041d8 <Simcom_Response>
 800301e:	4602      	mov	r2, r0
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	601a      	str	r2, [r3, #0]

            if (*str != NULL) {
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00a      	beq.n	8003042 <AT_CmdRead+0x5e>
                *str += strlen(prefix);
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681c      	ldr	r4, [r3, #0]
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7fd f8ff 	bl	8000234 <strlen>
 8003036:	4603      	mov	r3, r0
 8003038:	18e2      	adds	r2, r4, r3
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	601a      	str	r2, [r3, #0]

                p = SIM_RESULT_OK;
 800303e:	2301      	movs	r3, #1
 8003040:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return p;
 8003042:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003046:	4618      	mov	r0, r3
 8003048:	371c      	adds	r7, #28
 800304a:	46bd      	mov	sp, r7
 800304c:	bd90      	pop	{r4, r7, pc}
 800304e:	bf00      	nop
 8003050:	20000008 	.word	0x20000008

08003054 <AT_FindInBuffer>:

static uint8_t AT_FindInBuffer(char *prefix, char **str) {
 8003054:	b590      	push	{r4, r7, lr}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
    *str = Simcom_Response(prefix);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f001 f8ba 	bl	80041d8 <Simcom_Response>
 8003064:	4602      	mov	r2, r0
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	601a      	str	r2, [r3, #0]

    if (*str != NULL) {
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d008      	beq.n	8003084 <AT_FindInBuffer+0x30>
        *str += strlen(prefix);
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681c      	ldr	r4, [r3, #0]
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7fd f8dc 	bl	8000234 <strlen>
 800307c:	4603      	mov	r3, r0
 800307e:	18e2      	adds	r2, r4, r3
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	601a      	str	r2, [r3, #0]
    }

    return *str != NULL;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	bf14      	ite	ne
 800308c:	2301      	movne	r3, #1
 800308e:	2300      	moveq	r3, #0
 8003090:	b2db      	uxtb	r3, r3
}
 8003092:	4618      	mov	r0, r3
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	bd90      	pop	{r4, r7, pc}

0800309a <AT_ParseText>:

static void AT_ParseText(const char *ptr, uint8_t *cnt, char *text, uint8_t size) {
 800309a:	b480      	push	{r7}
 800309c:	b087      	sub	sp, #28
 800309e:	af00      	add	r7, sp, #0
 80030a0:	60f8      	str	r0, [r7, #12]
 80030a2:	60b9      	str	r1, [r7, #8]
 80030a4:	607a      	str	r2, [r7, #4]
 80030a6:	70fb      	strb	r3, [r7, #3]
    uint8_t i = 0;
 80030a8:	2300      	movs	r3, #0
 80030aa:	75fb      	strb	r3, [r7, #23]

    // check for double quote start
    if (*ptr == '"') {
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	2b22      	cmp	r3, #34	; 0x22
 80030b2:	d119      	bne.n	80030e8 <AT_ParseText+0x4e>
        ptr++;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	3301      	adds	r3, #1
 80030b8:	60fb      	str	r3, [r7, #12]
        i++;
 80030ba:	7dfb      	ldrb	r3, [r7, #23]
 80030bc:	3301      	adds	r3, #1
 80030be:	75fb      	strb	r3, [r7, #23]
    }
    // Parse text
    while (*ptr != '"' && *ptr != '\r' && *ptr != '\n') {
 80030c0:	e012      	b.n	80030e8 <AT_ParseText+0x4e>
        *text = *ptr;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	781a      	ldrb	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	701a      	strb	r2, [r3, #0]

        // increment
        text++;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	3301      	adds	r3, #1
 80030ce:	607b      	str	r3, [r7, #4]
        ptr++;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	3301      	adds	r3, #1
 80030d4:	60fb      	str	r3, [r7, #12]
        i++;
 80030d6:	7dfb      	ldrb	r3, [r7, #23]
 80030d8:	3301      	adds	r3, #1
 80030da:	75fb      	strb	r3, [r7, #23]
        size--;
 80030dc:	78fb      	ldrb	r3, [r7, #3]
 80030de:	3b01      	subs	r3, #1
 80030e0:	70fb      	strb	r3, [r7, #3]

        // handle overflow
        if (size <= 1) {
 80030e2:	78fb      	ldrb	r3, [r7, #3]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d90c      	bls.n	8003102 <AT_ParseText+0x68>
    while (*ptr != '"' && *ptr != '\r' && *ptr != '\n') {
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	2b22      	cmp	r3, #34	; 0x22
 80030ee:	d009      	beq.n	8003104 <AT_ParseText+0x6a>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b0d      	cmp	r3, #13
 80030f6:	d005      	beq.n	8003104 <AT_ParseText+0x6a>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	2b0a      	cmp	r3, #10
 80030fe:	d1e0      	bne.n	80030c2 <AT_ParseText+0x28>
 8003100:	e000      	b.n	8003104 <AT_ParseText+0x6a>
            break;
 8003102:	bf00      	nop
        }
    }
    // end of parsing for : double-quote, tab, new-line
    *text = '\0';
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	701a      	strb	r2, [r3, #0]
    ptr++;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	3301      	adds	r3, #1
 800310e:	60fb      	str	r3, [r7, #12]
    i++;
 8003110:	7dfb      	ldrb	r3, [r7, #23]
 8003112:	3301      	adds	r3, #1
 8003114:	75fb      	strb	r3, [r7, #23]
    // Save number of characters used for number
    if (cnt != NULL) {
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d002      	beq.n	8003122 <AT_ParseText+0x88>
        *cnt = i;
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	7dfa      	ldrb	r2, [r7, #23]
 8003120:	701a      	strb	r2, [r3, #0]
    }
}
 8003122:	bf00      	nop
 8003124:	371c      	adds	r7, #28
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr

0800312e <AT_ParseNumber>:

static int32_t AT_ParseNumber(const char *ptr, uint8_t *cnt) {
 800312e:	b480      	push	{r7}
 8003130:	b085      	sub	sp, #20
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
 8003136:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 8003138:	2300      	movs	r3, #0
 800313a:	73fb      	strb	r3, [r7, #15]
 800313c:	2300      	movs	r3, #0
 800313e:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8003140:	2300      	movs	r3, #0
 8003142:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') { /* Check for minus character */
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	2b2d      	cmp	r3, #45	; 0x2d
 800314a:	d119      	bne.n	8003180 <AT_ParseNumber+0x52>
        minus = 1;
 800314c:	2301      	movs	r3, #1
 800314e:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3301      	adds	r3, #1
 8003154:	607b      	str	r3, [r7, #4]
        i++;
 8003156:	7bbb      	ldrb	r3, [r7, #14]
 8003158:	3301      	adds	r3, #1
 800315a:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) { /* Parse number */
 800315c:	e010      	b.n	8003180 <AT_ParseNumber+0x52>
        sum = 10 * sum + CHARTONUM(*ptr);
 800315e:	68ba      	ldr	r2, [r7, #8]
 8003160:	4613      	mov	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4413      	add	r3, r2
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	461a      	mov	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	3b30      	subs	r3, #48	; 0x30
 8003170:	4413      	add	r3, r2
 8003172:	60bb      	str	r3, [r7, #8]
        ptr++;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3301      	adds	r3, #1
 8003178:	607b      	str	r3, [r7, #4]
        i++;
 800317a:	7bbb      	ldrb	r3, [r7, #14]
 800317c:	3301      	adds	r3, #1
 800317e:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) { /* Parse number */
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	2b2f      	cmp	r3, #47	; 0x2f
 8003186:	d903      	bls.n	8003190 <AT_ParseNumber+0x62>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b39      	cmp	r3, #57	; 0x39
 800318e:	d9e6      	bls.n	800315e <AT_ParseNumber+0x30>
    }
    if (cnt != NULL) { /* Save number of characters used for number */
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d002      	beq.n	800319c <AT_ParseNumber+0x6e>
        *cnt = i;
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	7bba      	ldrb	r2, [r7, #14]
 800319a:	701a      	strb	r2, [r3, #0]
    }
    if (minus) { /* Minus detected */
 800319c:	7bfb      	ldrb	r3, [r7, #15]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d002      	beq.n	80031a8 <AT_ParseNumber+0x7a>
        return 0 - sum;
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	425b      	negs	r3, r3
 80031a6:	e000      	b.n	80031aa <AT_ParseNumber+0x7c>
    }
    return sum; /* Return number */
 80031a8:	68bb      	ldr	r3, [r7, #8]
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
	...

080031b8 <CRC_Calculate8>:
/* Private functions declaration ----------------------------------------------*/
static void lock(void);
static void unlock(void);

/* Public functions implementation --------------------------------------------*/
uint32_t CRC_Calculate8(uint8_t *arr, uint32_t count, uint8_t swapped) {
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08a      	sub	sp, #40	; 0x28
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	4613      	mov	r3, r2
 80031c4:	71fb      	strb	r3, [r7, #7]
    uint32_t cnt, result, value = 0;
 80031c6:	2300      	movs	r3, #0
 80031c8:	61fb      	str	r3, [r7, #28]
    uint8_t index = 0, remaining[4] = { 0 };
 80031ca:	2300      	movs	r3, #0
 80031cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031d0:	2300      	movs	r3, #0
 80031d2:	617b      	str	r3, [r7, #20]

    lock();
 80031d4:	f000 f85c 	bl	8003290 <lock>

    /* Reset generator */
    __HAL_CRC_DR_RESET(&hcrc);
 80031d8:	4b2c      	ldr	r3, [pc, #176]	; (800328c <CRC_Calculate8+0xd4>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689a      	ldr	r2, [r3, #8]
 80031de:	4b2b      	ldr	r3, [pc, #172]	; (800328c <CRC_Calculate8+0xd4>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f042 0201 	orr.w	r2, r2, #1
 80031e6:	609a      	str	r2, [r3, #8]

    /* Calculate number of 32-bit blocks */
    cnt = count >> 2;
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	089b      	lsrs	r3, r3, #2
 80031ec:	627b      	str	r3, [r7, #36]	; 0x24

    /* Calculate */
    while (cnt--) {
 80031ee:	e011      	b.n	8003214 <CRC_Calculate8+0x5c>
        value = *(uint32_t*) arr;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	61fb      	str	r3, [r7, #28]
        /* Set new value */
        hcrc.Instance->DR = swapped ? _ByteSwap32(value) : value;
 80031f6:	79fb      	ldrb	r3, [r7, #7]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d004      	beq.n	8003206 <CRC_Calculate8+0x4e>
 80031fc:	69f8      	ldr	r0, [r7, #28]
 80031fe:	f001 fc78 	bl	8004af2 <_ByteSwap32>
 8003202:	4603      	mov	r3, r0
 8003204:	e000      	b.n	8003208 <CRC_Calculate8+0x50>
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	4a20      	ldr	r2, [pc, #128]	; (800328c <CRC_Calculate8+0xd4>)
 800320a:	6812      	ldr	r2, [r2, #0]
 800320c:	6013      	str	r3, [r2, #0]

        /* Increase by 4 */
        arr += 4;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	3304      	adds	r3, #4
 8003212:	60fb      	str	r3, [r7, #12]
    while (cnt--) {
 8003214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003216:	1e5a      	subs	r2, r3, #1
 8003218:	627a      	str	r2, [r7, #36]	; 0x24
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1e8      	bne.n	80031f0 <CRC_Calculate8+0x38>
    }

    /* Calculate remaining data as 8-bit */
    cnt = count % 4;
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	f003 0303 	and.w	r3, r3, #3
 8003224:	627b      	str	r3, [r7, #36]	; 0x24

    if (cnt) {
 8003226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003228:	2b00      	cmp	r3, #0
 800322a:	d024      	beq.n	8003276 <CRC_Calculate8+0xbe>
        /* Calculate */
        while (cnt--) {
 800322c:	e00e      	b.n	800324c <CRC_Calculate8+0x94>
            remaining[index++] = *arr++;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	1c5a      	adds	r2, r3, #1
 8003232:	60fa      	str	r2, [r7, #12]
 8003234:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003238:	1c51      	adds	r1, r2, #1
 800323a:	f887 1023 	strb.w	r1, [r7, #35]	; 0x23
 800323e:	4611      	mov	r1, r2
 8003240:	781a      	ldrb	r2, [r3, #0]
 8003242:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003246:	440b      	add	r3, r1
 8003248:	f803 2c14 	strb.w	r2, [r3, #-20]
        while (cnt--) {
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	1e5a      	subs	r2, r3, #1
 8003250:	627a      	str	r2, [r7, #36]	; 0x24
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1eb      	bne.n	800322e <CRC_Calculate8+0x76>
        }
        /* Set new value */
        value = *(uint32_t*) remaining;
 8003256:	f107 0314 	add.w	r3, r7, #20
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	61fb      	str	r3, [r7, #28]
        hcrc.Instance->DR = swapped ? _ByteSwap32(value) : value;
 800325e:	79fb      	ldrb	r3, [r7, #7]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d004      	beq.n	800326e <CRC_Calculate8+0xb6>
 8003264:	69f8      	ldr	r0, [r7, #28]
 8003266:	f001 fc44 	bl	8004af2 <_ByteSwap32>
 800326a:	4603      	mov	r3, r0
 800326c:	e000      	b.n	8003270 <CRC_Calculate8+0xb8>
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	4a06      	ldr	r2, [pc, #24]	; (800328c <CRC_Calculate8+0xd4>)
 8003272:	6812      	ldr	r2, [r2, #0]
 8003274:	6013      	str	r3, [r2, #0]
    }
    result = hcrc.Instance->DR;
 8003276:	4b05      	ldr	r3, [pc, #20]	; (800328c <CRC_Calculate8+0xd4>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	61bb      	str	r3, [r7, #24]

    unlock();
 800327e:	f000 f80e 	bl	800329e <unlock>
    /* Return data */
    return result;
 8003282:	69bb      	ldr	r3, [r7, #24]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3728      	adds	r7, #40	; 0x28
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	20000c34 	.word	0x20000c34

08003290 <lock>:

    return result;
}

/* Private functions implementation --------------------------------------------*/
static void lock(void) {
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
//    osMutexAcquire(CrcMutexHandle, osWaitForever);
}
 8003294:	bf00      	nop
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <unlock>:

static void unlock(void) {
 800329e:	b480      	push	{r7}
 80032a0:	af00      	add	r7, sp, #0
//    osMutexRelease(CrcMutexHandle);
}
 80032a2:	bf00      	nop
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <EEPROM24XX_SetDevice>:
/* Private variables ----------------------------------------------------------*/
static I2C_HandleTypeDef *hi2c = &hi2c2;
static uint16_t DevAddress = EEPROM24_MAIN;

/* Public functions implementation ---------------------------------------------*/
void EEPROM24XX_SetDevice(EEPROM24_DEVICE Device) {
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	4603      	mov	r3, r0
 80032b4:	71fb      	strb	r3, [r7, #7]
    DevAddress = Device;
 80032b6:	79fb      	ldrb	r3, [r7, #7]
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	4b04      	ldr	r3, [pc, #16]	; (80032cc <EEPROM24XX_SetDevice+0x20>)
 80032bc:	801a      	strh	r2, [r3, #0]
}
 80032be:	bf00      	nop
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	20000004 	.word	0x20000004

080032d0 <EEPROM24XX_IsConnected>:

uint8_t EEPROM24XX_IsConnected(void) {
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
    if (HAL_I2C_IsDeviceReady(hi2c, DevAddress, 2, 1000) == HAL_OK) {
 80032d4:	4b08      	ldr	r3, [pc, #32]	; (80032f8 <EEPROM24XX_IsConnected+0x28>)
 80032d6:	6818      	ldr	r0, [r3, #0]
 80032d8:	4b08      	ldr	r3, [pc, #32]	; (80032fc <EEPROM24XX_IsConnected+0x2c>)
 80032da:	8819      	ldrh	r1, [r3, #0]
 80032dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032e0:	2202      	movs	r2, #2
 80032e2:	f004 f941 	bl	8007568 <HAL_I2C_IsDeviceReady>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d101      	bne.n	80032f0 <EEPROM24XX_IsConnected+0x20>
        return 1;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e000      	b.n	80032f2 <EEPROM24XX_IsConnected+0x22>
    }
    return 0;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	20000000 	.word	0x20000000
 80032fc:	20000004 	.word	0x20000004

08003300 <EEPROM24XX_Save>:

uint8_t EEPROM24XX_Save(uint16_t Address, void *data, size_t size_of_data) {
 8003300:	b590      	push	{r4, r7, lr}
 8003302:	b089      	sub	sp, #36	; 0x24
 8003304:	af04      	add	r7, sp, #16
 8003306:	4603      	mov	r3, r0
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
 800330c:	81fb      	strh	r3, [r7, #14]
#elif ((EEPROM_SIZE_KBIT==4) || (EEPROM_SIZE_KBIT==8) || (EEPROM_SIZE_KBIT==16))
  if(size_of_data > 16){
    return 0;
  }
#else
    if (size_of_data > 32) {
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b20      	cmp	r3, #32
 8003312:	d901      	bls.n	8003318 <EEPROM24XX_Save+0x18>
        return 0;
 8003314:	2300      	movs	r3, #0
 8003316:	e018      	b.n	800334a <EEPROM24XX_Save+0x4a>
#elif   (EEPROM_SIZE_KBIT==8)
  if(HAL_I2C_Mem_Write(hi2c,DevAddress|((Address&0x0300>>7)),(Address&0xff),I2C_MEMADD_SIZE_8BIT,(uint8_t*)data,size_of_data,100) == HAL_OK) {
#elif   (EEPROM_SIZE_KBIT==16)
  if(HAL_I2C_Mem_Write(hi2c,DevAddress|((Address&0x0700>>7)),(Address&0xff),I2C_MEMADD_SIZE_8BIT,(uint8_t*)data,size_of_data,100) == HAL_OK) {
#else
    if (HAL_I2C_Mem_Write(hi2c, DevAddress, Address, I2C_MEMADD_SIZE_16BIT, (uint8_t*) data, size_of_data, 100) == HAL_OK) {
 8003318:	4b0e      	ldr	r3, [pc, #56]	; (8003354 <EEPROM24XX_Save+0x54>)
 800331a:	6818      	ldr	r0, [r3, #0]
 800331c:	4b0e      	ldr	r3, [pc, #56]	; (8003358 <EEPROM24XX_Save+0x58>)
 800331e:	8819      	ldrh	r1, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	b29b      	uxth	r3, r3
 8003324:	89fc      	ldrh	r4, [r7, #14]
 8003326:	2264      	movs	r2, #100	; 0x64
 8003328:	9202      	str	r2, [sp, #8]
 800332a:	9301      	str	r3, [sp, #4]
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	9300      	str	r3, [sp, #0]
 8003330:	2310      	movs	r3, #16
 8003332:	4622      	mov	r2, r4
 8003334:	f003 fdf8 	bl	8006f28 <HAL_I2C_Mem_Write>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d104      	bne.n	8003348 <EEPROM24XX_Save+0x48>
#endif
        _DelayMS(7);
 800333e:	2007      	movs	r0, #7
 8003340:	f001 fb99 	bl	8004a76 <_DelayMS>
        return 1;
 8003344:	2301      	movs	r3, #1
 8003346:	e000      	b.n	800334a <EEPROM24XX_Save+0x4a>
    }
    return 0;
 8003348:	2300      	movs	r3, #0

}
 800334a:	4618      	mov	r0, r3
 800334c:	3714      	adds	r7, #20
 800334e:	46bd      	mov	sp, r7
 8003350:	bd90      	pop	{r4, r7, pc}
 8003352:	bf00      	nop
 8003354:	20000000 	.word	0x20000000
 8003358:	20000004 	.word	0x20000004

0800335c <EEPROM24XX_Load>:

uint8_t EEPROM24XX_Load(uint16_t Address, void *data, size_t size_of_data) {
 800335c:	b590      	push	{r4, r7, lr}
 800335e:	b089      	sub	sp, #36	; 0x24
 8003360:	af04      	add	r7, sp, #16
 8003362:	4603      	mov	r3, r0
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
 8003368:	81fb      	strh	r3, [r7, #14]
#elif (EEPROM_SIZE_KBIT==8)
  if(HAL_I2C_Mem_Read(hi2c,DevAddress|((Address&0x0300>>7)),(Address&0xff),I2C_MEMADD_SIZE_8BIT,(uint8_t*)data,size_of_data,100) == HAL_OK) {
#elif (EEPROM_SIZE_KBIT==16)
  if(HAL_I2C_Mem_Read(hi2c,DevAddress|((Address&0x0700>>7)),(Address&0xff),I2C_MEMADD_SIZE_8BIT,(uint8_t*)data,size_of_data,100) == HAL_OK) {
#else
    if (HAL_I2C_Mem_Read(hi2c, DevAddress, Address, I2C_MEMADD_SIZE_16BIT, (uint8_t*) data, size_of_data, 100) == HAL_OK) {
 800336a:	4b0d      	ldr	r3, [pc, #52]	; (80033a0 <EEPROM24XX_Load+0x44>)
 800336c:	6818      	ldr	r0, [r3, #0]
 800336e:	4b0d      	ldr	r3, [pc, #52]	; (80033a4 <EEPROM24XX_Load+0x48>)
 8003370:	8819      	ldrh	r1, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	b29b      	uxth	r3, r3
 8003376:	89fc      	ldrh	r4, [r7, #14]
 8003378:	2264      	movs	r2, #100	; 0x64
 800337a:	9202      	str	r2, [sp, #8]
 800337c:	9301      	str	r3, [sp, #4]
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	2310      	movs	r3, #16
 8003384:	4622      	mov	r2, r4
 8003386:	f003 fec9 	bl	800711c <HAL_I2C_Mem_Read>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <EEPROM24XX_Load+0x38>
#endif
        return 1;
 8003390:	2301      	movs	r3, #1
 8003392:	e000      	b.n	8003396 <EEPROM24XX_Load+0x3a>
    }
    return 0;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	bd90      	pop	{r4, r7, pc}
 800339e:	bf00      	nop
 80033a0:	20000000 	.word	0x20000000
 80033a4:	20000004 	.word	0x20000004

080033a8 <FLASHER_WriteByte>:
static uint8_t FLASHER_Erase(uint32_t FirstSector, uint32_t NbOfSectors);
static uint32_t FLASHER_GetSector(uint32_t Address);
static uint32_t FLASHER_GetSectorSize(uint32_t Sector);

/* Public functions implementation ---------------------------------------------*/
static uint8_t FLASHER_WriteByte(uint8_t *ptr, uint32_t size, uint32_t address, uint32_t end) {
 80033a8:	b590      	push	{r4, r7, lr}
 80033aa:	b087      	sub	sp, #28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
 80033b4:	603b      	str	r3, [r7, #0]
    uint32_t *ptr32 = (uint32_t*) ptr;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	617b      	str	r3, [r7, #20]
    uint32_t errors = 0;
 80033ba:	2300      	movs	r3, #0
 80033bc:	613b      	str	r3, [r7, #16]

    /* Unlock the Flash to enable the flash control register access *************/
    HAL_FLASH_Unlock();
 80033be:	f002 ff25 	bl	800620c <HAL_FLASH_Unlock>

    /* Writing...... */
    while (size && address <= end) {
 80033c2:	e01b      	b.n	80033fc <FLASHER_WriteByte+0x54>
        errors += (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, *ptr32++) != HAL_OK);
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	1d1a      	adds	r2, r3, #4
 80033c8:	617a      	str	r2, [r7, #20]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f04f 0400 	mov.w	r4, #0
 80033d0:	461a      	mov	r2, r3
 80033d2:	4623      	mov	r3, r4
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	2002      	movs	r0, #2
 80033d8:	f002 fec4 	bl	8006164 <HAL_FLASH_Program>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	bf14      	ite	ne
 80033e2:	2301      	movne	r3, #1
 80033e4:	2300      	moveq	r3, #0
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	461a      	mov	r2, r3
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	4413      	add	r3, r2
 80033ee:	613b      	str	r3, [r7, #16]

        address += 4;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	3304      	adds	r3, #4
 80033f4:	607b      	str	r3, [r7, #4]
        size -= 4;
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	3b04      	subs	r3, #4
 80033fa:	60bb      	str	r3, [r7, #8]
    while (size && address <= end) {
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <FLASHER_WriteByte+0x62>
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	429a      	cmp	r2, r3
 8003408:	d9dc      	bls.n	80033c4 <FLASHER_WriteByte+0x1c>
    }

    /* Indicator */
    if (!errors) {
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d103      	bne.n	8003418 <FLASHER_WriteByte+0x70>
        LOG_StrLn("HAL_FLASH_Program = OK");
 8003410:	480c      	ldr	r0, [pc, #48]	; (8003444 <FLASHER_WriteByte+0x9c>)
 8003412:	f000 fac9 	bl	80039a8 <LOG_StrLn>
 8003416:	e008      	b.n	800342a <FLASHER_WriteByte+0x82>
    } else {
        LOG_Str("HAL_FLASH_Program = ERROR:");
 8003418:	480b      	ldr	r0, [pc, #44]	; (8003448 <FLASHER_WriteByte+0xa0>)
 800341a:	f000 faad 	bl	8003978 <LOG_Str>
        LOG_Int(errors);
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	4618      	mov	r0, r3
 8003422:	f000 fa31 	bl	8003888 <LOG_Int>
        LOG_Enter();
 8003426:	f000 fa23 	bl	8003870 <LOG_Enter>
    }

    /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
    HAL_FLASH_Lock();
 800342a:	f002 ff11 	bl	8006250 <HAL_FLASH_Lock>

    return (errors == 0);
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	2b00      	cmp	r3, #0
 8003432:	bf0c      	ite	eq
 8003434:	2301      	moveq	r3, #1
 8003436:	2300      	movne	r3, #0
 8003438:	b2db      	uxtb	r3, r3
}
 800343a:	4618      	mov	r0, r3
 800343c:	371c      	adds	r7, #28
 800343e:	46bd      	mov	sp, r7
 8003440:	bd90      	pop	{r4, r7, pc}
 8003442:	bf00      	nop
 8003444:	0800a71c 	.word	0x0800a71c
 8003448:	0800a734 	.word	0x0800a734

0800344c <FLASHER_Erase>:

static uint8_t FLASHER_Erase(uint32_t FirstSector, uint32_t NbOfSectors) {
 800344c:	b580      	push	{r7, lr}
 800344e:	b08a      	sub	sp, #40	; 0x28
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
    FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t SectorError = 0;
 8003456:	2300      	movs	r3, #0
 8003458:	60fb      	str	r3, [r7, #12]
    uint8_t ret;

    /* Fill EraseInit structure*/
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800345a:	2300      	movs	r3, #0
 800345c:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800345e:	2302      	movs	r3, #2
 8003460:	623b      	str	r3, [r7, #32]
    EraseInitStruct.Sector = FirstSector;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = NbOfSectors;
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	61fb      	str	r3, [r7, #28]

    /* Unlock the Flash to enable the flash control register access *************/
    HAL_FLASH_Unlock();
 800346a:	f002 fecf 	bl	800620c <HAL_FLASH_Unlock>
    __HAL_FLASH_CLEAR_FLAG(
 800346e:	4b2f      	ldr	r3, [pc, #188]	; (800352c <FLASHER_Erase+0xe0>)
 8003470:	22f3      	movs	r2, #243	; 0xf3
 8003472:	60da      	str	r2, [r3, #12]
            FLASH_FLAG_PGPERR |
            FLASH_FLAG_PGSERR
            );

    /* Erasing......... */
    ret = (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) == HAL_OK);
 8003474:	f107 020c 	add.w	r2, r7, #12
 8003478:	f107 0310 	add.w	r3, r7, #16
 800347c:	4611      	mov	r1, r2
 800347e:	4618      	mov	r0, r3
 8003480:	f003 f840 	bl	8006504 <HAL_FLASHEx_Erase>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	bf0c      	ite	eq
 800348a:	2301      	moveq	r3, #1
 800348c:	2300      	movne	r3, #0
 800348e:	b2db      	uxtb	r3, r3
 8003490:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Handle error */
    if (!ret) {
 8003494:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10b      	bne.n	80034b4 <FLASHER_Erase+0x68>
         HAL_FLASH_ERROR_PGP          0x00000004U    !< Programming Parallelism error
         HAL_FLASH_ERROR_PGA          0x00000008U    !< Programming Alignment error
         HAL_FLASH_ERROR_WRP          0x00000010U    !< Write protection error
         HAL_FLASH_ERROR_OPERATION    0x00000020U    !< Operation Error
         */
        LOG_Str("HAL_FLASHEx_Erase = ERROR:0x");
 800349c:	4824      	ldr	r0, [pc, #144]	; (8003530 <FLASHER_Erase+0xe4>)
 800349e:	f000 fa6b 	bl	8003978 <LOG_Str>
        LOG_Hex32(HAL_FLASH_GetError());
 80034a2:	f002 fee5 	bl	8006270 <HAL_FLASH_GetError>
 80034a6:	4603      	mov	r3, r0
 80034a8:	4618      	mov	r0, r3
 80034aa:	f000 fa3b 	bl	8003924 <LOG_Hex32>
        LOG_Enter();
 80034ae:	f000 f9df 	bl	8003870 <LOG_Enter>
 80034b2:	e002      	b.n	80034ba <FLASHER_Erase+0x6e>
    } else {
        LOG_StrLn("HAL_FLASHEx_Erase = OK");
 80034b4:	481f      	ldr	r0, [pc, #124]	; (8003534 <FLASHER_Erase+0xe8>)
 80034b6:	f000 fa77 	bl	80039a8 <LOG_StrLn>

    /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
     you have to make sure that these data are rewritten before they are accessed during code
     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
     DCRST and ICRST bits in the FLASH_CR register. */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80034ba:	4b1c      	ldr	r3, [pc, #112]	; (800352c <FLASHER_Erase+0xe0>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a1b      	ldr	r2, [pc, #108]	; (800352c <FLASHER_Erase+0xe0>)
 80034c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034c4:	6013      	str	r3, [r2, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80034c6:	4b19      	ldr	r3, [pc, #100]	; (800352c <FLASHER_Erase+0xe0>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a18      	ldr	r2, [pc, #96]	; (800352c <FLASHER_Erase+0xe0>)
 80034cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034d0:	6013      	str	r3, [r2, #0]

    __HAL_FLASH_DATA_CACHE_RESET();
 80034d2:	4b16      	ldr	r3, [pc, #88]	; (800352c <FLASHER_Erase+0xe0>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a15      	ldr	r2, [pc, #84]	; (800352c <FLASHER_Erase+0xe0>)
 80034d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034dc:	6013      	str	r3, [r2, #0]
 80034de:	4b13      	ldr	r3, [pc, #76]	; (800352c <FLASHER_Erase+0xe0>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a12      	ldr	r2, [pc, #72]	; (800352c <FLASHER_Erase+0xe0>)
 80034e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034e8:	6013      	str	r3, [r2, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80034ea:	4b10      	ldr	r3, [pc, #64]	; (800352c <FLASHER_Erase+0xe0>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a0f      	ldr	r2, [pc, #60]	; (800352c <FLASHER_Erase+0xe0>)
 80034f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034f4:	6013      	str	r3, [r2, #0]
 80034f6:	4b0d      	ldr	r3, [pc, #52]	; (800352c <FLASHER_Erase+0xe0>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a0c      	ldr	r2, [pc, #48]	; (800352c <FLASHER_Erase+0xe0>)
 80034fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003500:	6013      	str	r3, [r2, #0]

    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003502:	4b0a      	ldr	r3, [pc, #40]	; (800352c <FLASHER_Erase+0xe0>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a09      	ldr	r2, [pc, #36]	; (800352c <FLASHER_Erase+0xe0>)
 8003508:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800350c:	6013      	str	r3, [r2, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800350e:	4b07      	ldr	r3, [pc, #28]	; (800352c <FLASHER_Erase+0xe0>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a06      	ldr	r2, [pc, #24]	; (800352c <FLASHER_Erase+0xe0>)
 8003514:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003518:	6013      	str	r3, [r2, #0]

    /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
    HAL_FLASH_Lock();
 800351a:	f002 fe99 	bl	8006250 <HAL_FLASH_Lock>

    return ret;
 800351e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003522:	4618      	mov	r0, r3
 8003524:	3728      	adds	r7, #40	; 0x28
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	40023c00 	.word	0x40023c00
 8003530:	0800a750 	.word	0x0800a750
 8003534:	0800a770 	.word	0x0800a770

08003538 <FLASHER_GetSector>:
/**
 * @brief  Gets the sector of a given address
 * @param  None
 * @retval The sector of a given address
 */
static uint32_t FLASHER_GetSector(uint32_t Address) {
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
    uint32_t sector = 0;
 8003540:	2300      	movs	r3, #0
 8003542:	60fb      	str	r3, [r7, #12]

    if ((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0)) {
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a56      	ldr	r2, [pc, #344]	; (80036a0 <FLASHER_GetSector+0x168>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d806      	bhi.n	800355a <FLASHER_GetSector+0x22>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003552:	d302      	bcc.n	800355a <FLASHER_GetSector+0x22>
        sector = FLASH_SECTOR_0;
 8003554:	2300      	movs	r3, #0
 8003556:	60fb      	str	r3, [r7, #12]
 8003558:	e09b      	b.n	8003692 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1)) {
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a51      	ldr	r2, [pc, #324]	; (80036a4 <FLASHER_GetSector+0x16c>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d806      	bhi.n	8003570 <FLASHER_GetSector+0x38>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a4e      	ldr	r2, [pc, #312]	; (80036a0 <FLASHER_GetSector+0x168>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d902      	bls.n	8003570 <FLASHER_GetSector+0x38>
        sector = FLASH_SECTOR_1;
 800356a:	2301      	movs	r3, #1
 800356c:	60fb      	str	r3, [r7, #12]
 800356e:	e090      	b.n	8003692 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2)) {
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a4d      	ldr	r2, [pc, #308]	; (80036a8 <FLASHER_GetSector+0x170>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d806      	bhi.n	8003586 <FLASHER_GetSector+0x4e>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a4a      	ldr	r2, [pc, #296]	; (80036a4 <FLASHER_GetSector+0x16c>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d902      	bls.n	8003586 <FLASHER_GetSector+0x4e>
        sector = FLASH_SECTOR_2;
 8003580:	2302      	movs	r3, #2
 8003582:	60fb      	str	r3, [r7, #12]
 8003584:	e085      	b.n	8003692 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3)) {
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a48      	ldr	r2, [pc, #288]	; (80036ac <FLASHER_GetSector+0x174>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d806      	bhi.n	800359c <FLASHER_GetSector+0x64>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a45      	ldr	r2, [pc, #276]	; (80036a8 <FLASHER_GetSector+0x170>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d902      	bls.n	800359c <FLASHER_GetSector+0x64>
        sector = FLASH_SECTOR_3;
 8003596:	2303      	movs	r3, #3
 8003598:	60fb      	str	r3, [r7, #12]
 800359a:	e07a      	b.n	8003692 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4)) {
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a44      	ldr	r2, [pc, #272]	; (80036b0 <FLASHER_GetSector+0x178>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d806      	bhi.n	80035b2 <FLASHER_GetSector+0x7a>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a41      	ldr	r2, [pc, #260]	; (80036ac <FLASHER_GetSector+0x174>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d902      	bls.n	80035b2 <FLASHER_GetSector+0x7a>
        sector = FLASH_SECTOR_4;
 80035ac:	2304      	movs	r3, #4
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	e06f      	b.n	8003692 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5)) {
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a3f      	ldr	r2, [pc, #252]	; (80036b4 <FLASHER_GetSector+0x17c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d806      	bhi.n	80035c8 <FLASHER_GetSector+0x90>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a3c      	ldr	r2, [pc, #240]	; (80036b0 <FLASHER_GetSector+0x178>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d902      	bls.n	80035c8 <FLASHER_GetSector+0x90>
        sector = FLASH_SECTOR_5;
 80035c2:	2305      	movs	r3, #5
 80035c4:	60fb      	str	r3, [r7, #12]
 80035c6:	e064      	b.n	8003692 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6)) {
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a3b      	ldr	r2, [pc, #236]	; (80036b8 <FLASHER_GetSector+0x180>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d806      	bhi.n	80035de <FLASHER_GetSector+0xa6>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a38      	ldr	r2, [pc, #224]	; (80036b4 <FLASHER_GetSector+0x17c>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d902      	bls.n	80035de <FLASHER_GetSector+0xa6>
        sector = FLASH_SECTOR_6;
 80035d8:	2306      	movs	r3, #6
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	e059      	b.n	8003692 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_8) && (Address >= ADDR_FLASH_SECTOR_7)) {
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a36      	ldr	r2, [pc, #216]	; (80036bc <FLASHER_GetSector+0x184>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d806      	bhi.n	80035f4 <FLASHER_GetSector+0xbc>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a33      	ldr	r2, [pc, #204]	; (80036b8 <FLASHER_GetSector+0x180>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d902      	bls.n	80035f4 <FLASHER_GetSector+0xbc>
        sector = FLASH_SECTOR_7;
 80035ee:	2307      	movs	r3, #7
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	e04e      	b.n	8003692 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_9) && (Address >= ADDR_FLASH_SECTOR_8)) {
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a32      	ldr	r2, [pc, #200]	; (80036c0 <FLASHER_GetSector+0x188>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d806      	bhi.n	800360a <FLASHER_GetSector+0xd2>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a2f      	ldr	r2, [pc, #188]	; (80036bc <FLASHER_GetSector+0x184>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d902      	bls.n	800360a <FLASHER_GetSector+0xd2>
        sector = FLASH_SECTOR_8;
 8003604:	2308      	movs	r3, #8
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	e043      	b.n	8003692 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_10) && (Address >= ADDR_FLASH_SECTOR_9)) {
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a2d      	ldr	r2, [pc, #180]	; (80036c4 <FLASHER_GetSector+0x18c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d806      	bhi.n	8003620 <FLASHER_GetSector+0xe8>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a2a      	ldr	r2, [pc, #168]	; (80036c0 <FLASHER_GetSector+0x188>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d902      	bls.n	8003620 <FLASHER_GetSector+0xe8>
        sector = FLASH_SECTOR_9;
 800361a:	2309      	movs	r3, #9
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	e038      	b.n	8003692 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_11) && (Address >= ADDR_FLASH_SECTOR_10)) {
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a29      	ldr	r2, [pc, #164]	; (80036c8 <FLASHER_GetSector+0x190>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d806      	bhi.n	8003636 <FLASHER_GetSector+0xfe>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a26      	ldr	r2, [pc, #152]	; (80036c4 <FLASHER_GetSector+0x18c>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d902      	bls.n	8003636 <FLASHER_GetSector+0xfe>
        sector = FLASH_SECTOR_10;
 8003630:	230a      	movs	r3, #10
 8003632:	60fb      	str	r3, [r7, #12]
 8003634:	e02d      	b.n	8003692 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_12) && (Address >= ADDR_FLASH_SECTOR_11)) {
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800363c:	d206      	bcs.n	800364c <FLASHER_GetSector+0x114>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a21      	ldr	r2, [pc, #132]	; (80036c8 <FLASHER_GetSector+0x190>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d902      	bls.n	800364c <FLASHER_GetSector+0x114>
        sector = FLASH_SECTOR_11;
 8003646:	230b      	movs	r3, #11
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	e022      	b.n	8003692 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_13) && (Address >= ADDR_FLASH_SECTOR_12)) {
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a1f      	ldr	r2, [pc, #124]	; (80036cc <FLASHER_GetSector+0x194>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d806      	bhi.n	8003662 <FLASHER_GetSector+0x12a>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800365a:	d302      	bcc.n	8003662 <FLASHER_GetSector+0x12a>
        sector = FLASH_SECTOR_12;
 800365c:	230c      	movs	r3, #12
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	e017      	b.n	8003692 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_14) && (Address >= ADDR_FLASH_SECTOR_13)) {
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a1a      	ldr	r2, [pc, #104]	; (80036d0 <FLASHER_GetSector+0x198>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d806      	bhi.n	8003678 <FLASHER_GetSector+0x140>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a17      	ldr	r2, [pc, #92]	; (80036cc <FLASHER_GetSector+0x194>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d902      	bls.n	8003678 <FLASHER_GetSector+0x140>
        sector = FLASH_SECTOR_13;
 8003672:	230d      	movs	r3, #13
 8003674:	60fb      	str	r3, [r7, #12]
 8003676:	e00c      	b.n	8003692 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_15) && (Address >= ADDR_FLASH_SECTOR_14)) {
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a16      	ldr	r2, [pc, #88]	; (80036d4 <FLASHER_GetSector+0x19c>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d806      	bhi.n	800368e <FLASHER_GetSector+0x156>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a13      	ldr	r2, [pc, #76]	; (80036d0 <FLASHER_GetSector+0x198>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d902      	bls.n	800368e <FLASHER_GetSector+0x156>
        sector = FLASH_SECTOR_14;
 8003688:	230e      	movs	r3, #14
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	e001      	b.n	8003692 <FLASHER_GetSector+0x15a>
    }
    else { /* (Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_14) */
        sector = FLASH_SECTOR_15;
 800368e:	230f      	movs	r3, #15
 8003690:	60fb      	str	r3, [r7, #12]
    }

    return sector;
 8003692:	68fb      	ldr	r3, [r7, #12]
}
 8003694:	4618      	mov	r0, r3
 8003696:	3714      	adds	r7, #20
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	08003fff 	.word	0x08003fff
 80036a4:	08007fff 	.word	0x08007fff
 80036a8:	0800bfff 	.word	0x0800bfff
 80036ac:	0800ffff 	.word	0x0800ffff
 80036b0:	0801ffff 	.word	0x0801ffff
 80036b4:	0803ffff 	.word	0x0803ffff
 80036b8:	0805ffff 	.word	0x0805ffff
 80036bc:	0807ffff 	.word	0x0807ffff
 80036c0:	0809ffff 	.word	0x0809ffff
 80036c4:	080bffff 	.word	0x080bffff
 80036c8:	080dffff 	.word	0x080dffff
 80036cc:	0811ffff 	.word	0x0811ffff
 80036d0:	0813ffff 	.word	0x0813ffff
 80036d4:	0815ffff 	.word	0x0815ffff

080036d8 <FLASHER_EraseBkpArea>:
    }
    return sectorsize;
}

/* ============================================================= */
uint8_t FLASHER_EraseBkpArea(void) {
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
    uint32_t FirstSector = 0, NbOfSectors = 0;
 80036de:	2300      	movs	r3, #0
 80036e0:	607b      	str	r3, [r7, #4]
 80036e2:	2300      	movs	r3, #0
 80036e4:	603b      	str	r3, [r7, #0]

    /* Get the 1st sector to erase */
    FirstSector = FLASHER_GetSector(BKP_START_ADDR);
 80036e6:	480a      	ldr	r0, [pc, #40]	; (8003710 <FLASHER_EraseBkpArea+0x38>)
 80036e8:	f7ff ff26 	bl	8003538 <FLASHER_GetSector>
 80036ec:	6078      	str	r0, [r7, #4]
    /* Get the number of sector to erase from 1st sector*/
    NbOfSectors = FLASHER_GetSector(BKP_END_ADDR) - FirstSector + 1;
 80036ee:	4809      	ldr	r0, [pc, #36]	; (8003714 <FLASHER_EraseBkpArea+0x3c>)
 80036f0:	f7ff ff22 	bl	8003538 <FLASHER_GetSector>
 80036f4:	4602      	mov	r2, r0
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	3301      	adds	r3, #1
 80036fc:	603b      	str	r3, [r7, #0]
    // Erase
    return FLASHER_Erase(FirstSector, NbOfSectors);
 80036fe:	6839      	ldr	r1, [r7, #0]
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f7ff fea3 	bl	800344c <FLASHER_Erase>
 8003706:	4603      	mov	r3, r0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	080a0000 	.word	0x080a0000
 8003714:	0811ffff 	.word	0x0811ffff

08003718 <FLASHER_EraseAppArea>:

uint8_t FLASHER_EraseAppArea(void) {
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
    uint32_t FirstSector = 0, NbOfSectors = 0;
 800371e:	2300      	movs	r3, #0
 8003720:	607b      	str	r3, [r7, #4]
 8003722:	2300      	movs	r3, #0
 8003724:	603b      	str	r3, [r7, #0]

    /* Get the 1st sector to erase */
    FirstSector = FLASHER_GetSector(APP_START_ADDR);
 8003726:	480a      	ldr	r0, [pc, #40]	; (8003750 <FLASHER_EraseAppArea+0x38>)
 8003728:	f7ff ff06 	bl	8003538 <FLASHER_GetSector>
 800372c:	6078      	str	r0, [r7, #4]
    /* Get the number of sector to erase from 1st sector*/
    NbOfSectors = FLASHER_GetSector(APP_END_ADDR) - FirstSector + 1;
 800372e:	4809      	ldr	r0, [pc, #36]	; (8003754 <FLASHER_EraseAppArea+0x3c>)
 8003730:	f7ff ff02 	bl	8003538 <FLASHER_GetSector>
 8003734:	4602      	mov	r2, r0
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	3301      	adds	r3, #1
 800373c:	603b      	str	r3, [r7, #0]
    // Erase
    return FLASHER_Erase(FirstSector, NbOfSectors);
 800373e:	6839      	ldr	r1, [r7, #0]
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f7ff fe83 	bl	800344c <FLASHER_Erase>
 8003746:	4603      	mov	r3, r0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	08020000 	.word	0x08020000
 8003754:	0809ffff 	.word	0x0809ffff

08003758 <FLASHER_WriteBkpArea>:

uint8_t FLASHER_WriteBkpArea(uint8_t *ptr, uint32_t size, uint32_t offset) {
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
    uint32_t address = BKP_START_ADDR + offset;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800376a:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
 800376e:	617b      	str	r3, [r7, #20]

    return FLASHER_WriteByte(ptr, size, address, BKP_END_ADDR);
 8003770:	4b05      	ldr	r3, [pc, #20]	; (8003788 <FLASHER_WriteBkpArea+0x30>)
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	68b9      	ldr	r1, [r7, #8]
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f7ff fe16 	bl	80033a8 <FLASHER_WriteByte>
 800377c:	4603      	mov	r3, r0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3718      	adds	r7, #24
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	0811ffff 	.word	0x0811ffff

0800378c <FLASHER_WriteAppArea>:

uint8_t FLASHER_WriteAppArea(uint8_t *ptr, uint32_t size, uint32_t offset) {
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
    uint32_t address = APP_START_ADDR + offset;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800379e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80037a2:	617b      	str	r3, [r7, #20]

    return FLASHER_WriteByte(ptr, size, address, APP_END_ADDR);
 80037a4:	4b05      	ldr	r3, [pc, #20]	; (80037bc <FLASHER_WriteAppArea+0x30>)
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	68b9      	ldr	r1, [r7, #8]
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f7ff fdfc 	bl	80033a8 <FLASHER_WriteByte>
 80037b0:	4603      	mov	r3, r0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3718      	adds	r7, #24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	0809ffff 	.word	0x0809ffff

080037c0 <FLASHER_BackupApp>:

uint8_t FLASHER_BackupApp(void) {
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
    uint8_t ret;
    uint8_t *ptr = (uint8_t*) APP_START_ADDR;
 80037c6:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <FLASHER_BackupApp+0x34>)
 80037c8:	603b      	str	r3, [r7, #0]

    ret = FLASHER_EraseBkpArea();
 80037ca:	f7ff ff85 	bl	80036d8 <FLASHER_EraseBkpArea>
 80037ce:	4603      	mov	r3, r0
 80037d0:	71fb      	strb	r3, [r7, #7]

    if (ret) {
 80037d2:	79fb      	ldrb	r3, [r7, #7]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d007      	beq.n	80037e8 <FLASHER_BackupApp+0x28>
        ret = FLASHER_WriteBkpArea(ptr, APP_MAX_SIZE, 0);
 80037d8:	2200      	movs	r2, #0
 80037da:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80037de:	6838      	ldr	r0, [r7, #0]
 80037e0:	f7ff ffba 	bl	8003758 <FLASHER_WriteBkpArea>
 80037e4:	4603      	mov	r3, r0
 80037e6:	71fb      	strb	r3, [r7, #7]
    }

    return ret;
 80037e8:	79fb      	ldrb	r3, [r7, #7]
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	08020000 	.word	0x08020000

080037f8 <FLASHER_RestoreApp>:

uint8_t FLASHER_RestoreApp(void) {
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
    uint8_t ret;
    uint8_t *ptr = (uint8_t*) BKP_START_ADDR;
 80037fe:	4b0b      	ldr	r3, [pc, #44]	; (800382c <FLASHER_RestoreApp+0x34>)
 8003800:	603b      	str	r3, [r7, #0]

    ret = FLASHER_EraseAppArea();
 8003802:	f7ff ff89 	bl	8003718 <FLASHER_EraseAppArea>
 8003806:	4603      	mov	r3, r0
 8003808:	71fb      	strb	r3, [r7, #7]

    if (ret) {
 800380a:	79fb      	ldrb	r3, [r7, #7]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d007      	beq.n	8003820 <FLASHER_RestoreApp+0x28>
        ret = FLASHER_WriteAppArea(ptr, APP_MAX_SIZE, 0);
 8003810:	2200      	movs	r2, #0
 8003812:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8003816:	6838      	ldr	r0, [r7, #0]
 8003818:	f7ff ffb8 	bl	800378c <FLASHER_WriteAppArea>
 800381c:	4603      	mov	r3, r0
 800381e:	71fb      	strb	r3, [r7, #7]
    }

    return ret;
 8003820:	79fb      	ldrb	r3, [r7, #7]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	080a0000 	.word	0x080a0000

08003830 <LOG_Char>:
/* Private functions declarations ----------------------------------------------*/
static void lock(void);
static void unlock(void);

/* Public functions implementation ---------------------------------------------*/
void LOG_Char(char ch) {
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	4603      	mov	r3, r0
 8003838:	71fb      	strb	r3, [r7, #7]
    uint32_t tick;

    tick = _GetTickMS();
 800383a:	f001 f927 	bl	8004a8c <_GetTickMS>
 800383e:	60f8      	str	r0, [r7, #12]
    // wait if busy
    while (1) {
        if (ITM->PORT[0].u32 != 0 || _GetTickMS() - tick >= 10) {
 8003840:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10a      	bne.n	8003860 <LOG_Char+0x30>
 800384a:	f001 f91f 	bl	8004a8c <_GetTickMS>
 800384e:	4602      	mov	r2, r0
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b09      	cmp	r3, #9
 8003856:	d803      	bhi.n	8003860 <LOG_Char+0x30>
            break;
        }
        _DelayMS(1);
 8003858:	2001      	movs	r0, #1
 800385a:	f001 f90c 	bl	8004a76 <_DelayMS>
        if (ITM->PORT[0].u32 != 0 || _GetTickMS() - tick >= 10) {
 800385e:	e7ef      	b.n	8003840 <LOG_Char+0x10>
    }
    // send to ITM0
    ITM->PORT[0].u8 = (uint8_t) ch;
 8003860:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003864:	79fb      	ldrb	r3, [r7, #7]
 8003866:	7013      	strb	r3, [r2, #0]
}
 8003868:	bf00      	nop
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <LOG_Enter>:

void LOG_Enter(void) {
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
    lock();
 8003874:	f000 f902 	bl	8003a7c <lock>
    LOG_Char('\n');
 8003878:	200a      	movs	r0, #10
 800387a:	f7ff ffd9 	bl	8003830 <LOG_Char>
    unlock();
 800387e:	f000 f904 	bl	8003a8a <unlock>
}
 8003882:	bf00      	nop
 8003884:	bd80      	pop	{r7, pc}
	...

08003888 <LOG_Int>:

void LOG_Int(int32_t num) {
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
    lock();
 8003890:	f000 f8f4 	bl	8003a7c <lock>

    char str[10]; // 10 chars max for INT32_MAX
    int i = 0;
 8003894:	2300      	movs	r3, #0
 8003896:	617b      	str	r3, [r7, #20]
    if (num < 0) {
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	da05      	bge.n	80038aa <LOG_Int+0x22>
        LOG_Char('-');
 800389e:	202d      	movs	r0, #45	; 0x2d
 80038a0:	f7ff ffc6 	bl	8003830 <LOG_Char>
        num *= -1;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	425b      	negs	r3, r3
 80038a8:	607b      	str	r3, [r7, #4]
    }
    do
        str[i++] = num % 10 + '0';
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	4b1c      	ldr	r3, [pc, #112]	; (8003920 <LOG_Int+0x98>)
 80038ae:	fb83 1302 	smull	r1, r3, r3, r2
 80038b2:	1099      	asrs	r1, r3, #2
 80038b4:	17d3      	asrs	r3, r2, #31
 80038b6:	1ac9      	subs	r1, r1, r3
 80038b8:	460b      	mov	r3, r1
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	1ad1      	subs	r1, r2, r3
 80038c2:	b2ca      	uxtb	r2, r1
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	1c59      	adds	r1, r3, #1
 80038c8:	6179      	str	r1, [r7, #20]
 80038ca:	3230      	adds	r2, #48	; 0x30
 80038cc:	b2d2      	uxtb	r2, r2
 80038ce:	f107 0118 	add.w	r1, r7, #24
 80038d2:	440b      	add	r3, r1
 80038d4:	f803 2c10 	strb.w	r2, [r3, #-16]
    while ((num /= 10) > 0);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a11      	ldr	r2, [pc, #68]	; (8003920 <LOG_Int+0x98>)
 80038dc:	fb82 1203 	smull	r1, r2, r2, r3
 80038e0:	1092      	asrs	r2, r2, #2
 80038e2:	17db      	asrs	r3, r3, #31
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	607b      	str	r3, [r7, #4]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	dcdd      	bgt.n	80038aa <LOG_Int+0x22>
    for (i--; i >= 0; i--)
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	3b01      	subs	r3, #1
 80038f2:	617b      	str	r3, [r7, #20]
 80038f4:	e00a      	b.n	800390c <LOG_Int+0x84>
        LOG_Char(str[i]);
 80038f6:	f107 0208 	add.w	r2, r7, #8
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	4413      	add	r3, r2
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff ff95 	bl	8003830 <LOG_Char>
    for (i--; i >= 0; i--)
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	3b01      	subs	r3, #1
 800390a:	617b      	str	r3, [r7, #20]
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	2b00      	cmp	r3, #0
 8003910:	daf1      	bge.n	80038f6 <LOG_Int+0x6e>

    unlock();
 8003912:	f000 f8ba 	bl	8003a8a <unlock>
}
 8003916:	bf00      	nop
 8003918:	3718      	adds	r7, #24
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	66666667 	.word	0x66666667

08003924 <LOG_Hex32>:
    LOG_Char(HEX_CHARS[(num & 0x0f) % 0x10]);

    unlock();
}

void LOG_Hex32(uint32_t num) {
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
    lock();
 800392c:	f000 f8a6 	bl	8003a7c <lock>

    uint8_t i;
    for (i = 28; i > 0; i -= 4)
 8003930:	231c      	movs	r3, #28
 8003932:	73fb      	strb	r3, [r7, #15]
 8003934:	e00d      	b.n	8003952 <LOG_Hex32+0x2e>
        LOG_Char(HEX_CHARS[(num >> i) % 0x10]);
 8003936:	7bfb      	ldrb	r3, [r7, #15]
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	fa22 f303 	lsr.w	r3, r2, r3
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	4a0c      	ldr	r2, [pc, #48]	; (8003974 <LOG_Hex32+0x50>)
 8003944:	5cd3      	ldrb	r3, [r2, r3]
 8003946:	4618      	mov	r0, r3
 8003948:	f7ff ff72 	bl	8003830 <LOG_Char>
    for (i = 28; i > 0; i -= 4)
 800394c:	7bfb      	ldrb	r3, [r7, #15]
 800394e:	3b04      	subs	r3, #4
 8003950:	73fb      	strb	r3, [r7, #15]
 8003952:	7bfb      	ldrb	r3, [r7, #15]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1ee      	bne.n	8003936 <LOG_Hex32+0x12>
    LOG_Char(HEX_CHARS[(num & 0x0f) % 0x10]);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f003 030f 	and.w	r3, r3, #15
 800395e:	4a05      	ldr	r2, [pc, #20]	; (8003974 <LOG_Hex32+0x50>)
 8003960:	5cd3      	ldrb	r3, [r2, r3]
 8003962:	4618      	mov	r0, r3
 8003964:	f7ff ff64 	bl	8003830 <LOG_Char>

    unlock();
 8003968:	f000 f88f 	bl	8003a8a <unlock>
}
 800396c:	bf00      	nop
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	0800a788 	.word	0x0800a788

08003978 <LOG_Str>:

void LOG_Str(char *str) {
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
    lock();
 8003980:	f000 f87c 	bl	8003a7c <lock>

    while (*str != '\0')
 8003984:	e006      	b.n	8003994 <LOG_Str+0x1c>
        LOG_Char(*str++);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	607a      	str	r2, [r7, #4]
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f7ff ff4e 	bl	8003830 <LOG_Char>
    while (*str != '\0')
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1f4      	bne.n	8003986 <LOG_Str+0xe>

    unlock();
 800399c:	f000 f875 	bl	8003a8a <unlock>
}
 80039a0:	bf00      	nop
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <LOG_StrLn>:

void LOG_StrLn(char *str) {
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
    lock();
 80039b0:	f000 f864 	bl	8003a7c <lock>

    while (*str != '\0') {
 80039b4:	e006      	b.n	80039c4 <LOG_StrLn+0x1c>
        LOG_Char(*str++);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	1c5a      	adds	r2, r3, #1
 80039ba:	607a      	str	r2, [r7, #4]
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	4618      	mov	r0, r3
 80039c0:	f7ff ff36 	bl	8003830 <LOG_Char>
    while (*str != '\0') {
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1f4      	bne.n	80039b6 <LOG_StrLn+0xe>
    }
    LOG_Char('\n');
 80039cc:	200a      	movs	r0, #10
 80039ce:	f7ff ff2f 	bl	8003830 <LOG_Char>

    unlock();
 80039d2:	f000 f85a 	bl	8003a8a <unlock>
}
 80039d6:	bf00      	nop
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <LOG_Buf>:

void LOG_Buf(char *buf, uint16_t bufsize) {
 80039de:	b580      	push	{r7, lr}
 80039e0:	b084      	sub	sp, #16
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
 80039e6:	460b      	mov	r3, r1
 80039e8:	807b      	strh	r3, [r7, #2]
    lock();
 80039ea:	f000 f847 	bl	8003a7c <lock>

    uint16_t i;
    for (i = 0; i < bufsize; i++)
 80039ee:	2300      	movs	r3, #0
 80039f0:	81fb      	strh	r3, [r7, #14]
 80039f2:	e009      	b.n	8003a08 <LOG_Buf+0x2a>
        LOG_Char(*buf++);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	1c5a      	adds	r2, r3, #1
 80039f8:	607a      	str	r2, [r7, #4]
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff ff17 	bl	8003830 <LOG_Char>
    for (i = 0; i < bufsize; i++)
 8003a02:	89fb      	ldrh	r3, [r7, #14]
 8003a04:	3301      	adds	r3, #1
 8003a06:	81fb      	strh	r3, [r7, #14]
 8003a08:	89fa      	ldrh	r2, [r7, #14]
 8003a0a:	887b      	ldrh	r3, [r7, #2]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d3f1      	bcc.n	80039f4 <LOG_Buf+0x16>

    unlock();
 8003a10:	f000 f83b 	bl	8003a8a <unlock>
}
 8003a14:	bf00      	nop
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <LOG_BufHex>:
    }

    unlock();
}

void LOG_BufHex(char *buf, uint16_t bufsize) {
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	460b      	mov	r3, r1
 8003a26:	807b      	strh	r3, [r7, #2]
    lock();
 8003a28:	f000 f828 	bl	8003a7c <lock>

    uint16_t i;
    char ch;
    for (i = 0; i < bufsize; i++) {
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	81fb      	strh	r3, [r7, #14]
 8003a30:	e018      	b.n	8003a64 <LOG_BufHex+0x48>
        ch = *buf++;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	607a      	str	r2, [r7, #4]
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	737b      	strb	r3, [r7, #13]
        LOG_Char(HEX_CHARS[(ch >> 4) % 0x10]);
 8003a3c:	7b7b      	ldrb	r3, [r7, #13]
 8003a3e:	091b      	lsrs	r3, r3, #4
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	461a      	mov	r2, r3
 8003a44:	4b0c      	ldr	r3, [pc, #48]	; (8003a78 <LOG_BufHex+0x5c>)
 8003a46:	5c9b      	ldrb	r3, [r3, r2]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7ff fef1 	bl	8003830 <LOG_Char>
        LOG_Char(HEX_CHARS[(ch & 0x0f) % 0x10]);
 8003a4e:	7b7b      	ldrb	r3, [r7, #13]
 8003a50:	f003 030f 	and.w	r3, r3, #15
 8003a54:	4a08      	ldr	r2, [pc, #32]	; (8003a78 <LOG_BufHex+0x5c>)
 8003a56:	5cd3      	ldrb	r3, [r2, r3]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7ff fee9 	bl	8003830 <LOG_Char>
    for (i = 0; i < bufsize; i++) {
 8003a5e:	89fb      	ldrh	r3, [r7, #14]
 8003a60:	3301      	adds	r3, #1
 8003a62:	81fb      	strh	r3, [r7, #14]
 8003a64:	89fa      	ldrh	r2, [r7, #14]
 8003a66:	887b      	ldrh	r3, [r7, #2]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d3e2      	bcc.n	8003a32 <LOG_BufHex+0x16>
    }

    unlock();
 8003a6c:	f000 f80d 	bl	8003a8a <unlock>
}
 8003a70:	bf00      	nop
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	0800a788 	.word	0x0800a788

08003a7c <lock>:

    unlock();
}

/* Private functions implementations ----------------------------------------------*/
static void lock(void) {
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
//    osMutexAcquire(LogMutexHandle, osWaitForever);
}
 8003a80:	bf00      	nop
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <unlock>:

static void unlock(void) {
 8003a8a:	b480      	push	{r7}
 8003a8c:	af00      	add	r7, sp, #0
//    osMutexRelease(LogMutexHandle);
}
 8003a8e:	bf00      	nop
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <EEPROM_Init>:
static uint8_t EE_Command(uint16_t vaddr, EEPROM_COMMAND cmd, void *value, void *ptr, uint16_t size);
static void lock(void);
static void unlock(void);

/* Public functions implementation --------------------------------------------*/
uint8_t EEPROM_Init(void) {
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
    const uint8_t MAX_RETRY = 5;
 8003a9e:	2305      	movs	r3, #5
 8003aa0:	713b      	strb	r3, [r7, #4]
    const EEPROM24_DEVICE EEPROMS[2] = {
 8003aa2:	4b24      	ldr	r3, [pc, #144]	; (8003b34 <EEPROM_Init+0x9c>)
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	803b      	strh	r3, [r7, #0]
            EEPROM24_MAIN,
            EEPROM24_BACKUP
    };
    uint8_t retry, ret = 0;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	71bb      	strb	r3, [r7, #6]

    lock();
 8003aac:	f000 f897 	bl	8003bde <lock>
    LOG_StrLn("EEPROM:Init");
 8003ab0:	4821      	ldr	r0, [pc, #132]	; (8003b38 <EEPROM_Init+0xa0>)
 8003ab2:	f7ff ff79 	bl	80039a8 <LOG_StrLn>
    // check each eeprom
    for (uint8_t i = 0; i < 1; i++) {
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	717b      	strb	r3, [r7, #5]
 8003aba:	e02a      	b.n	8003b12 <EEPROM_Init+0x7a>
        if (!ret) {
 8003abc:	79bb      	ldrb	r3, [r7, #6]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d124      	bne.n	8003b0c <EEPROM_Init+0x74>
            retry = MAX_RETRY;
 8003ac2:	793b      	ldrb	r3, [r7, #4]
 8003ac4:	71fb      	strb	r3, [r7, #7]
            EEPROM24XX_SetDevice(EEPROMS[i]);
 8003ac6:	797b      	ldrb	r3, [r7, #5]
 8003ac8:	f107 0208 	add.w	r2, r7, #8
 8003acc:	4413      	add	r3, r2
 8003ace:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7ff fbea 	bl	80032ac <EEPROM24XX_SetDevice>
            do {
                if (EEPROM24XX_IsConnected()) {
 8003ad8:	f7ff fbfa 	bl	80032d0 <EEPROM24XX_IsConnected>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00c      	beq.n	8003afc <EEPROM_Init+0x64>
                    LOG_Str("EEPROM:Device = ");
 8003ae2:	4816      	ldr	r0, [pc, #88]	; (8003b3c <EEPROM_Init+0xa4>)
 8003ae4:	f7ff ff48 	bl	8003978 <LOG_Str>
                    LOG_Int(i + 1);
 8003ae8:	797b      	ldrb	r3, [r7, #5]
 8003aea:	3301      	adds	r3, #1
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7ff fecb 	bl	8003888 <LOG_Int>
                    LOG_Enter();
 8003af2:	f7ff febd 	bl	8003870 <LOG_Enter>

                    ret = 1;
 8003af6:	2301      	movs	r3, #1
 8003af8:	71bb      	strb	r3, [r7, #6]
                    break;
 8003afa:	e007      	b.n	8003b0c <EEPROM_Init+0x74>
                }
                _DelayMS(50);
 8003afc:	2032      	movs	r0, #50	; 0x32
 8003afe:	f000 ffba 	bl	8004a76 <_DelayMS>
            } while (retry--);
 8003b02:	79fb      	ldrb	r3, [r7, #7]
 8003b04:	1e5a      	subs	r2, r3, #1
 8003b06:	71fa      	strb	r2, [r7, #7]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1e5      	bne.n	8003ad8 <EEPROM_Init+0x40>
    for (uint8_t i = 0; i < 1; i++) {
 8003b0c:	797b      	ldrb	r3, [r7, #5]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	717b      	strb	r3, [r7, #5]
 8003b12:	797b      	ldrb	r3, [r7, #5]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0d1      	beq.n	8003abc <EEPROM_Init+0x24>
        }
    }

    // all failed
    if (!ret) {
 8003b18:	79bb      	ldrb	r3, [r7, #6]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d102      	bne.n	8003b24 <EEPROM_Init+0x8c>
        LOG_StrLn("EEPROM:Error");
 8003b1e:	4808      	ldr	r0, [pc, #32]	; (8003b40 <EEPROM_Init+0xa8>)
 8003b20:	f7ff ff42 	bl	80039a8 <LOG_StrLn>
    }
    unlock();
 8003b24:	f000 f862 	bl	8003bec <unlock>

    return ret;
 8003b28:	79bb      	ldrb	r3, [r7, #6]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	0800a7cc 	.word	0x0800a7cc
 8003b38:	0800a79c 	.word	0x0800a79c
 8003b3c:	0800a7a8 	.word	0x0800a7a8
 8003b40:	0800a7bc 	.word	0x0800a7bc

08003b44 <EEPROM_FlagDFU>:

uint8_t EEPROM_FlagDFU(EEPROM_COMMAND cmd, uint32_t value) {
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af02      	add	r7, sp, #8
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	6039      	str	r1, [r7, #0]
 8003b4e:	71fb      	strb	r3, [r7, #7]
    return EE_Command(VADDR_DFU_FLAG, cmd, &value, &DFU_FLAG, sizeof(value));
 8003b50:	463a      	mov	r2, r7
 8003b52:	79f9      	ldrb	r1, [r7, #7]
 8003b54:	2304      	movs	r3, #4
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	4b04      	ldr	r3, [pc, #16]	; (8003b6c <EEPROM_FlagDFU+0x28>)
 8003b5a:	201e      	movs	r0, #30
 8003b5c:	f000 f808 	bl	8003b70 <EE_Command>
 8003b60:	4603      	mov	r3, r0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20000624 	.word	0x20000624

08003b70 <EE_Command>:

/* Private functions implementation --------------------------------------------*/
static uint8_t EE_Command(uint16_t vaddr, EEPROM_COMMAND cmd, void *value, void *ptr, uint16_t size) {
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60ba      	str	r2, [r7, #8]
 8003b78:	607b      	str	r3, [r7, #4]
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	81fb      	strh	r3, [r7, #14]
 8003b7e:	460b      	mov	r3, r1
 8003b80:	737b      	strb	r3, [r7, #13]
    uint8_t ret = 0;
 8003b82:	2300      	movs	r3, #0
 8003b84:	75fb      	strb	r3, [r7, #23]

    lock();
 8003b86:	f000 f82a 	bl	8003bde <lock>

    // check if new value is same with old value
    if (cmd == EE_CMD_W) {
 8003b8a:	7b7b      	ldrb	r3, [r7, #13]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d10e      	bne.n	8003bae <EE_Command+0x3e>
        // apply the value
        memcpy(ptr, value, size);
 8003b90:	8c3b      	ldrh	r3, [r7, #32]
 8003b92:	461a      	mov	r2, r3
 8003b94:	68b9      	ldr	r1, [r7, #8]
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f005 ff53 	bl	8009a42 <memcpy>
        // save the value
        ret = EEPROM24XX_Save(vaddr, value, size);
 8003b9c:	8c3a      	ldrh	r2, [r7, #32]
 8003b9e:	89fb      	ldrh	r3, [r7, #14]
 8003ba0:	68b9      	ldr	r1, [r7, #8]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7ff fbac 	bl	8003300 <EEPROM24XX_Save>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	75fb      	strb	r3, [r7, #23]
 8003bac:	e010      	b.n	8003bd0 <EE_Command+0x60>
    } else {
        // load the value
        ret = EEPROM24XX_Load(vaddr, value, size);
 8003bae:	8c3a      	ldrh	r2, [r7, #32]
 8003bb0:	89fb      	ldrh	r3, [r7, #14]
 8003bb2:	68b9      	ldr	r1, [r7, #8]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7ff fbd1 	bl	800335c <EEPROM24XX_Load>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	75fb      	strb	r3, [r7, #23]
        // apply the value
        if (ret) {
 8003bbe:	7dfb      	ldrb	r3, [r7, #23]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d005      	beq.n	8003bd0 <EE_Command+0x60>
            memcpy(ptr, value, size);
 8003bc4:	8c3b      	ldrh	r3, [r7, #32]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	68b9      	ldr	r1, [r7, #8]
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f005 ff39 	bl	8009a42 <memcpy>
        }
    }

    unlock();
 8003bd0:	f000 f80c 	bl	8003bec <unlock>
    return ret;
 8003bd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3718      	adds	r7, #24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <lock>:

static void lock(void) {
 8003bde:	b480      	push	{r7}
 8003be0:	af00      	add	r7, sp, #0
//    osMutexAcquire(EepromMutexHandle, osWaitForever);
}
 8003be2:	bf00      	nop
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <unlock>:

static void unlock(void) {
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
//    osMutexRelease(EepromMutexHandle);
}
 8003bf0:	bf00      	nop
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
	...

08003bfc <FOTA_BearerInitialize>:
extern I2C_HandleTypeDef hi2c2;
extern UART_HandleTypeDef huart1;
//DMA_HandleTypeDef hdma_usart1_rx;

/* Public functions implementation --------------------------------------------*/
SIMCOM_RESULT FOTA_BearerInitialize(void) {
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b0a4      	sub	sp, #144	; 0x90
 8003c00:	af00      	add	r7, sp, #0
    SIMCOM_RESULT p;
    at_sapbr_t getBEARER, setBEARER = {
 8003c02:	4a16      	ldr	r2, [pc, #88]	; (8003c5c <FOTA_BearerInitialize+0x60>)
 8003c04:	1d3b      	adds	r3, r7, #4
 8003c06:	4611      	mov	r1, r2
 8003c08:	2244      	movs	r2, #68	; 0x44
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f005 ff19 	bl	8009a42 <memcpy>
                    .password = NET_CON_PASSWORD,
            },
    };

    // BEARER attach
    p = AT_BearerSettings(ATW, &setBEARER);
 8003c10:	1d3b      	adds	r3, r7, #4
 8003c12:	4619      	mov	r1, r3
 8003c14:	2000      	movs	r0, #0
 8003c16:	f7fe fd59 	bl	80026cc <AT_BearerSettings>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

    // BEARER init
    if (p > 0) {
 8003c20:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	dd08      	ble.n	8003c3a <FOTA_BearerInitialize+0x3e>
        p = AT_BearerSettings(ATR, &getBEARER);
 8003c28:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	2001      	movs	r0, #1
 8003c30:	f7fe fd4c 	bl	80026cc <AT_BearerSettings>
 8003c34:	4603      	mov	r3, r0
 8003c36:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    }

    if (p > 0 && getBEARER.status != SAPBR_CONNECTED) {
 8003c3a:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	dd05      	ble.n	8003c4e <FOTA_BearerInitialize+0x52>
 8003c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d002      	beq.n	8003c4e <FOTA_BearerInitialize+0x52>
        p = SIM_RESULT_ERROR;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    }

    return p;
 8003c4e:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3790      	adds	r7, #144	; 0x90
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	0800a7d0 	.word	0x0800a7d0

08003c60 <FOTA_GetChecksum>:

SIMCOM_RESULT FOTA_GetChecksum(at_ftp_t *setFTP, uint32_t *checksum) {
 8003c60:	b5b0      	push	{r4, r5, r7, lr}
 8003c62:	b088      	sub	sp, #32
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
    SIMCOM_RESULT p;
    AT_FTP_STATE state;
    at_ftpget_t setFTPGET;

    // Set Default Parameter
    setFTP->id = 1;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	601a      	str	r2, [r3, #0]
    setFTP->size = 0;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    strcpy(setFTP->server, NET_FTP_SERVER);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3304      	adds	r3, #4
 8003c7c:	4a3f      	ldr	r2, [pc, #252]	; (8003d7c <FOTA_GetChecksum+0x11c>)
 8003c7e:	461c      	mov	r4, r3
 8003c80:	4615      	mov	r5, r2
 8003c82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c84:	6020      	str	r0, [r4, #0]
 8003c86:	6061      	str	r1, [r4, #4]
 8003c88:	60a2      	str	r2, [r4, #8]
 8003c8a:	60e3      	str	r3, [r4, #12]
 8003c8c:	6828      	ldr	r0, [r5, #0]
 8003c8e:	6120      	str	r0, [r4, #16]
 8003c90:	88ab      	ldrh	r3, [r5, #4]
 8003c92:	79aa      	ldrb	r2, [r5, #6]
 8003c94:	82a3      	strh	r3, [r4, #20]
 8003c96:	4613      	mov	r3, r2
 8003c98:	75a3      	strb	r3, [r4, #22]
    strcpy(setFTP->username, NET_FTP_USERNAME);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	3322      	adds	r3, #34	; 0x22
 8003c9e:	4a38      	ldr	r2, [pc, #224]	; (8003d80 <FOTA_GetChecksum+0x120>)
 8003ca0:	461d      	mov	r5, r3
 8003ca2:	4614      	mov	r4, r2
 8003ca4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ca6:	6028      	str	r0, [r5, #0]
 8003ca8:	6069      	str	r1, [r5, #4]
 8003caa:	60aa      	str	r2, [r5, #8]
 8003cac:	60eb      	str	r3, [r5, #12]
 8003cae:	cc03      	ldmia	r4!, {r0, r1}
 8003cb0:	6128      	str	r0, [r5, #16]
 8003cb2:	6169      	str	r1, [r5, #20]
    strcpy(setFTP->password, NET_FTP_PASSWORD);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3340      	adds	r3, #64	; 0x40
 8003cb8:	4932      	ldr	r1, [pc, #200]	; (8003d84 <FOTA_GetChecksum+0x124>)
 8003cba:	461a      	mov	r2, r3
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	cb03      	ldmia	r3!, {r0, r1}
 8003cc0:	6010      	str	r0, [r2, #0]
 8003cc2:	6051      	str	r1, [r2, #4]
 8003cc4:	881b      	ldrh	r3, [r3, #0]
 8003cc6:	8113      	strh	r3, [r2, #8]
    sprintf(setFTP->file, "%s.crc", setFTP->version);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f103 0068 	add.w	r0, r3, #104	; 0x68
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	337c      	adds	r3, #124	; 0x7c
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	492c      	ldr	r1, [pc, #176]	; (8003d88 <FOTA_GetChecksum+0x128>)
 8003cd6:	f005 fec7 	bl	8009a68 <siprintf>

    // FTP Init
    p = AT_FtpInitialize(setFTP);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7fe fa94 	bl	8002208 <AT_FtpInitialize>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	77fb      	strb	r3, [r7, #31]

    // Open FTP Session
    if (p > 0) {
 8003ce4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	dd08      	ble.n	8003cfe <FOTA_GetChecksum+0x9e>
        setFTPGET.mode = FTPGET_OPEN;
 8003cec:	2301      	movs	r3, #1
 8003cee:	60bb      	str	r3, [r7, #8]
        p = AT_FtpDownload(&setFTPGET);
 8003cf0:	f107 0308 	add.w	r3, r7, #8
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7fe fb57 	bl	80023a8 <AT_FtpDownload>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	77fb      	strb	r3, [r7, #31]
    }

    // Read FTP File
    if (p > 0 && setFTPGET.response == FTP_READY) {
 8003cfe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	dd24      	ble.n	8003d50 <FOTA_GetChecksum+0xf0>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d121      	bne.n	8003d50 <FOTA_GetChecksum+0xf0>
        // Initiate Download
        setFTPGET.mode = FTPGET_READ;
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	60bb      	str	r3, [r7, #8]
        setFTPGET.reqlength = 8;
 8003d10:	2308      	movs	r3, #8
 8003d12:	823b      	strh	r3, [r7, #16]
        p = AT_FtpDownload(&setFTPGET);
 8003d14:	f107 0308 	add.w	r3, r7, #8
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7fe fb45 	bl	80023a8 <AT_FtpDownload>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	77fb      	strb	r3, [r7, #31]

        if (p > 0) {
 8003d22:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	dd12      	ble.n	8003d50 <FOTA_GetChecksum+0xf0>
            // Copy to Buffer
            *checksum = strtoul(setFTPGET.ptr, (char**) NULL, 16);
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	2210      	movs	r2, #16
 8003d2e:	2100      	movs	r1, #0
 8003d30:	4618      	mov	r0, r3
 8003d32:	f005 ff5f 	bl	8009bf4 <strtoul>
 8003d36:	4602      	mov	r2, r0
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	601a      	str	r2, [r3, #0]

            // Indicator
            LOG_Str("FOTA:ChecksumOrigin = ");
 8003d3c:	4813      	ldr	r0, [pc, #76]	; (8003d8c <FOTA_GetChecksum+0x12c>)
 8003d3e:	f7ff fe1b 	bl	8003978 <LOG_Str>
            LOG_Hex32(*checksum);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7ff fdec 	bl	8003924 <LOG_Hex32>
            LOG_Enter();
 8003d4c:	f7ff fd90 	bl	8003870 <LOG_Enter>
        }
    }

    // Check state
    AT_FtpCurrentState(&state);
 8003d50:	f107 0318 	add.w	r3, r7, #24
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7fe fbd5 	bl	8002504 <AT_FtpCurrentState>
    if (state == FTP_STATE_ESTABLISHED) {
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d106      	bne.n	8003d6e <FOTA_GetChecksum+0x10e>
        // Close session
        Simcom_Command("AT+FTPQUIT\r", NULL, 500, 0);
 8003d60:	2300      	movs	r3, #0
 8003d62:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003d66:	2100      	movs	r1, #0
 8003d68:	4809      	ldr	r0, [pc, #36]	; (8003d90 <FOTA_GetChecksum+0x130>)
 8003d6a:	f000 fccf 	bl	800470c <Simcom_Command>
    }

    return p;
 8003d6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3720      	adds	r7, #32
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bdb0      	pop	{r4, r5, r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	0800a814 	.word	0x0800a814
 8003d80:	0800a82c 	.word	0x0800a82c
 8003d84:	0800a844 	.word	0x0800a844
 8003d88:	0800a850 	.word	0x0800a850
 8003d8c:	0800a858 	.word	0x0800a858
 8003d90:	0800a870 	.word	0x0800a870

08003d94 <FOTA_FirmwareToFlash>:

SIMCOM_RESULT FOTA_FirmwareToFlash(at_ftp_t *setFTP, uint32_t *len) {
 8003d94:	b5b0      	push	{r4, r5, r7, lr}
 8003d96:	b08a      	sub	sp, #40	; 0x28
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
    uint32_t timer;
    AT_FTP_STATE state;
    at_ftpget_t setFTPGET;

    // Set Default Parameter
    setFTP->id = 1;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	601a      	str	r2, [r3, #0]
    setFTP->size = 0;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    strcpy(setFTP->server, NET_FTP_SERVER);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3304      	adds	r3, #4
 8003db0:	4a70      	ldr	r2, [pc, #448]	; (8003f74 <FOTA_FirmwareToFlash+0x1e0>)
 8003db2:	461c      	mov	r4, r3
 8003db4:	4615      	mov	r5, r2
 8003db6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003db8:	6020      	str	r0, [r4, #0]
 8003dba:	6061      	str	r1, [r4, #4]
 8003dbc:	60a2      	str	r2, [r4, #8]
 8003dbe:	60e3      	str	r3, [r4, #12]
 8003dc0:	6828      	ldr	r0, [r5, #0]
 8003dc2:	6120      	str	r0, [r4, #16]
 8003dc4:	88ab      	ldrh	r3, [r5, #4]
 8003dc6:	79aa      	ldrb	r2, [r5, #6]
 8003dc8:	82a3      	strh	r3, [r4, #20]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	75a3      	strb	r3, [r4, #22]
    strcpy(setFTP->username, NET_FTP_USERNAME);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	3322      	adds	r3, #34	; 0x22
 8003dd2:	4a69      	ldr	r2, [pc, #420]	; (8003f78 <FOTA_FirmwareToFlash+0x1e4>)
 8003dd4:	461d      	mov	r5, r3
 8003dd6:	4614      	mov	r4, r2
 8003dd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dda:	6028      	str	r0, [r5, #0]
 8003ddc:	6069      	str	r1, [r5, #4]
 8003dde:	60aa      	str	r2, [r5, #8]
 8003de0:	60eb      	str	r3, [r5, #12]
 8003de2:	cc03      	ldmia	r4!, {r0, r1}
 8003de4:	6128      	str	r0, [r5, #16]
 8003de6:	6169      	str	r1, [r5, #20]
    strcpy(setFTP->password, NET_FTP_PASSWORD);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3340      	adds	r3, #64	; 0x40
 8003dec:	4963      	ldr	r1, [pc, #396]	; (8003f7c <FOTA_FirmwareToFlash+0x1e8>)
 8003dee:	461a      	mov	r2, r3
 8003df0:	460b      	mov	r3, r1
 8003df2:	cb03      	ldmia	r3!, {r0, r1}
 8003df4:	6010      	str	r0, [r2, #0]
 8003df6:	6051      	str	r1, [r2, #4]
 8003df8:	881b      	ldrh	r3, [r3, #0]
 8003dfa:	8113      	strh	r3, [r2, #8]
    sprintf(setFTP->file, "%s.bin", setFTP->version);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f103 0068 	add.w	r0, r3, #104	; 0x68
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	337c      	adds	r3, #124	; 0x7c
 8003e06:	461a      	mov	r2, r3
 8003e08:	495d      	ldr	r1, [pc, #372]	; (8003f80 <FOTA_FirmwareToFlash+0x1ec>)
 8003e0a:	f005 fe2d 	bl	8009a68 <siprintf>

    // FTP Init
    p = AT_FtpInitialize(setFTP);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7fe f9fa 	bl	8002208 <AT_FtpInitialize>
 8003e14:	4603      	mov	r3, r0
 8003e16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Get file size
    if (p > 0) {
 8003e1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	dd05      	ble.n	8003e2e <FOTA_FirmwareToFlash+0x9a>
        p = AT_FtpFileSize(setFTP);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7fe fa62 	bl	80022ec <AT_FtpFileSize>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    // Open FTP Session
    if (p > 0 && setFTP->size) {
 8003e2e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	dd0e      	ble.n	8003e54 <FOTA_FirmwareToFlash+0xc0>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d009      	beq.n	8003e54 <FOTA_FirmwareToFlash+0xc0>
        setFTPGET.mode = FTPGET_OPEN;
 8003e40:	2301      	movs	r3, #1
 8003e42:	60fb      	str	r3, [r7, #12]
        p = AT_FtpDownload(&setFTPGET);
 8003e44:	f107 030c 	add.w	r3, r7, #12
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7fe faad 	bl	80023a8 <AT_FtpDownload>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    // Read FTP File
    if (p > 0 && setFTPGET.response == FTP_READY) {
 8003e54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	dd75      	ble.n	8003f48 <FOTA_FirmwareToFlash+0x1b4>
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d172      	bne.n	8003f48 <FOTA_FirmwareToFlash+0x1b4>
        // Prepare, start timer
        LOG_StrLn("FOTA:Start");
 8003e62:	4848      	ldr	r0, [pc, #288]	; (8003f84 <FOTA_FirmwareToFlash+0x1f0>)
 8003e64:	f7ff fda0 	bl	80039a8 <LOG_StrLn>
        timer = _GetTickMS();
 8003e68:	f000 fe10 	bl	8004a8c <_GetTickMS>
 8003e6c:	6238      	str	r0, [r7, #32]

        // Erase APP area
        FLASHER_EraseAppArea();
 8003e6e:	f7ff fc53 	bl	8003718 <FLASHER_EraseAppArea>

        // Copy chunk by chunk
        setFTPGET.mode = FTPGET_READ;
 8003e72:	2302      	movs	r3, #2
 8003e74:	60fb      	str	r3, [r7, #12]
        setFTPGET.reqlength = 1376;
 8003e76:	f44f 63ac 	mov.w	r3, #1376	; 0x560
 8003e7a:	82bb      	strh	r3, [r7, #20]
        do {
            // Initiate Download
            p = AT_FtpDownload(&setFTPGET);
 8003e7c:	f107 030c 	add.w	r3, r7, #12
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7fe fa91 	bl	80023a8 <AT_FtpDownload>
 8003e86:	4603      	mov	r3, r0
 8003e88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            if (p > 0 && setFTPGET.cnflength) {
 8003e8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	dd34      	ble.n	8003efe <FOTA_FirmwareToFlash+0x16a>
 8003e94:	8afb      	ldrh	r3, [r7, #22]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d031      	beq.n	8003efe <FOTA_FirmwareToFlash+0x16a>
                // Copy to Buffer
                FLASHER_WriteAppArea((uint8_t*) setFTPGET.ptr, setFTPGET.cnflength, *len);
 8003e9a:	69b8      	ldr	r0, [r7, #24]
 8003e9c:	8afb      	ldrh	r3, [r7, #22]
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	f7ff fc71 	bl	800378c <FLASHER_WriteAppArea>
                *len += setFTPGET.cnflength;
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	8afa      	ldrh	r2, [r7, #22]
 8003eb0:	441a      	add	r2, r3
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	601a      	str	r2, [r3, #0]

                // Indicator
                _LedToggle();
 8003eb6:	f000 fe03 	bl	8004ac0 <_LedToggle>
                LOG_Str("FOTA:Progress = ");
 8003eba:	4833      	ldr	r0, [pc, #204]	; (8003f88 <FOTA_FirmwareToFlash+0x1f4>)
 8003ebc:	f7ff fd5c 	bl	8003978 <LOG_Str>
                LOG_Int(*len);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7ff fcdf 	bl	8003888 <LOG_Int>
                LOG_Str(" Bytes (");
 8003eca:	4830      	ldr	r0, [pc, #192]	; (8003f8c <FOTA_FirmwareToFlash+0x1f8>)
 8003ecc:	f7ff fd54 	bl	8003978 <LOG_Str>
                LOG_Int(*len * 100 / setFTP->size);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2264      	movs	r2, #100	; 0x64
 8003ed6:	fb02 f203 	mul.w	r2, r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7ff fccf 	bl	8003888 <LOG_Int>
                LOG_StrLn("%)");
 8003eea:	4829      	ldr	r0, [pc, #164]	; (8003f90 <FOTA_FirmwareToFlash+0x1fc>)
 8003eec:	f7ff fd5c 	bl	80039a8 <LOG_StrLn>
            } else {
                break;
            }
        } while (*len < setFTP->size);
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d3be      	bcc.n	8003e7c <FOTA_FirmwareToFlash+0xe8>

        // Check, stop timer
        if (*len && *len == setFTP->size) {
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d01a      	beq.n	8003f3c <FOTA_FirmwareToFlash+0x1a8>
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d113      	bne.n	8003f3c <FOTA_FirmwareToFlash+0x1a8>
            /* Glue size information to image */
            FLASHER_WriteAppArea((uint8_t*) len, sizeof(uint32_t), SIZE_OFFSET);
 8003f14:	4a1f      	ldr	r2, [pc, #124]	; (8003f94 <FOTA_FirmwareToFlash+0x200>)
 8003f16:	2104      	movs	r1, #4
 8003f18:	6838      	ldr	r0, [r7, #0]
 8003f1a:	f7ff fc37 	bl	800378c <FLASHER_WriteAppArea>

            LOG_Str("FOTA:End = ");
 8003f1e:	481e      	ldr	r0, [pc, #120]	; (8003f98 <FOTA_FirmwareToFlash+0x204>)
 8003f20:	f7ff fd2a 	bl	8003978 <LOG_Str>
            LOG_Int(_GetTickMS() - timer);
 8003f24:	f000 fdb2 	bl	8004a8c <_GetTickMS>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7ff fcaa 	bl	8003888 <LOG_Int>
            LOG_StrLn("ms");
 8003f34:	4819      	ldr	r0, [pc, #100]	; (8003f9c <FOTA_FirmwareToFlash+0x208>)
 8003f36:	f7ff fd37 	bl	80039a8 <LOG_StrLn>
 8003f3a:	e005      	b.n	8003f48 <FOTA_FirmwareToFlash+0x1b4>
        } else {
            LOG_StrLn("FOTA:Failed");
 8003f3c:	4818      	ldr	r0, [pc, #96]	; (8003fa0 <FOTA_FirmwareToFlash+0x20c>)
 8003f3e:	f7ff fd33 	bl	80039a8 <LOG_StrLn>
            p = SIM_RESULT_ERROR;
 8003f42:	2300      	movs	r3, #0
 8003f44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    // Check state
    AT_FtpCurrentState(&state);
 8003f48:	f107 031c 	add.w	r3, r7, #28
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7fe fad9 	bl	8002504 <AT_FtpCurrentState>
    if (state == FTP_STATE_ESTABLISHED) {
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d106      	bne.n	8003f66 <FOTA_FirmwareToFlash+0x1d2>
        // Close session
        Simcom_Command("AT+FTPQUIT\r", NULL, 500, 0);
 8003f58:	2300      	movs	r3, #0
 8003f5a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003f5e:	2100      	movs	r1, #0
 8003f60:	4810      	ldr	r0, [pc, #64]	; (8003fa4 <FOTA_FirmwareToFlash+0x210>)
 8003f62:	f000 fbd3 	bl	800470c <Simcom_Command>
    }

    return p;
 8003f66:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3728      	adds	r7, #40	; 0x28
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bdb0      	pop	{r4, r5, r7, pc}
 8003f72:	bf00      	nop
 8003f74:	0800a814 	.word	0x0800a814
 8003f78:	0800a82c 	.word	0x0800a82c
 8003f7c:	0800a844 	.word	0x0800a844
 8003f80:	0800a87c 	.word	0x0800a87c
 8003f84:	0800a884 	.word	0x0800a884
 8003f88:	0800a890 	.word	0x0800a890
 8003f8c:	0800a8a4 	.word	0x0800a8a4
 8003f90:	0800a8b0 	.word	0x0800a8b0
 8003f94:	0007fffc 	.word	0x0007fffc
 8003f98:	0800a8b4 	.word	0x0800a8b4
 8003f9c:	0800a8c0 	.word	0x0800a8c0
 8003fa0:	0800a8c4 	.word	0x0800a8c4
 8003fa4:	0800a870 	.word	0x0800a870

08003fa8 <FOTA_CompareChecksum>:

uint8_t FOTA_CompareChecksum(uint32_t checksum, uint32_t len, uint32_t address) {
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
    uint32_t crc = 0;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	613b      	str	r3, [r7, #16]
    uint8_t *addr = (uint8_t*) address;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	617b      	str	r3, [r7, #20]

    // Calculate CRC
    crc = CRC_Calculate8(addr, len, 1);
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	68b9      	ldr	r1, [r7, #8]
 8003fc0:	6978      	ldr	r0, [r7, #20]
 8003fc2:	f7ff f8f9 	bl	80031b8 <CRC_Calculate8>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	613b      	str	r3, [r7, #16]

    // Indicator
    LOG_Str("FOTA:Checksum = ");
 8003fca:	4816      	ldr	r0, [pc, #88]	; (8004024 <FOTA_CompareChecksum+0x7c>)
 8003fcc:	f7ff fcd4 	bl	8003978 <LOG_Str>
    if (crc == checksum) {
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d10a      	bne.n	8003fee <FOTA_CompareChecksum+0x46>
        LOG_StrLn("MATCH");
 8003fd8:	4813      	ldr	r0, [pc, #76]	; (8004028 <FOTA_CompareChecksum+0x80>)
 8003fda:	f7ff fce5 	bl	80039a8 <LOG_StrLn>
        /* Glue checksum information to image */
        FLASHER_WriteAppArea((uint8_t*) &crc, sizeof(uint32_t), CHECKSUM_OFFSET);
 8003fde:	f107 0310 	add.w	r3, r7, #16
 8003fe2:	4a12      	ldr	r2, [pc, #72]	; (800402c <FOTA_CompareChecksum+0x84>)
 8003fe4:	2104      	movs	r1, #4
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7ff fbd0 	bl	800378c <FLASHER_WriteAppArea>
 8003fec:	e00e      	b.n	800400c <FOTA_CompareChecksum+0x64>
    } else {
        LOG_StrLn("NOT MATCH");
 8003fee:	4810      	ldr	r0, [pc, #64]	; (8004030 <FOTA_CompareChecksum+0x88>)
 8003ff0:	f7ff fcda 	bl	80039a8 <LOG_StrLn>
        LOG_Hex32(checksum);
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f7ff fc95 	bl	8003924 <LOG_Hex32>
        LOG_Str(" != ");
 8003ffa:	480e      	ldr	r0, [pc, #56]	; (8004034 <FOTA_CompareChecksum+0x8c>)
 8003ffc:	f7ff fcbc 	bl	8003978 <LOG_Str>
        LOG_Hex32(crc);
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	4618      	mov	r0, r3
 8004004:	f7ff fc8e 	bl	8003924 <LOG_Hex32>
        LOG_Enter();
 8004008:	f7ff fc32 	bl	8003870 <LOG_Enter>
    }

    return (crc == checksum);
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	429a      	cmp	r2, r3
 8004012:	bf0c      	ite	eq
 8004014:	2301      	moveq	r3, #1
 8004016:	2300      	movne	r3, #0
 8004018:	b2db      	uxtb	r3, r3
}
 800401a:	4618      	mov	r0, r3
 800401c:	3718      	adds	r7, #24
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	0800a8d0 	.word	0x0800a8d0
 8004028:	0800a8e4 	.word	0x0800a8e4
 800402c:	0007fff8 	.word	0x0007fff8
 8004030:	0800a8ec 	.word	0x0800a8ec
 8004034:	0800a8f8 	.word	0x0800a8f8

08004038 <FOTA_Reboot>:

void FOTA_Reboot(void) {
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
    /* Clear backup area */
    FLASHER_EraseBkpArea();
 800403c:	f7ff fb4c 	bl	80036d8 <FLASHER_EraseBkpArea>
    /* Reset DFU flag */
    EEPROM_FlagDFU(EE_CMD_W, 0);
 8004040:	2100      	movs	r1, #0
 8004042:	2001      	movs	r0, #1
 8004044:	f7ff fd7e 	bl	8003b44 <EEPROM_FlagDFU>

    HAL_NVIC_SystemReset();
 8004048:	f001 fc71 	bl	800592e <HAL_NVIC_SystemReset>
}
 800404c:	bf00      	nop
 800404e:	bd80      	pop	{r7, pc}

08004050 <FOTA_ValidImage>:

uint8_t FOTA_ValidImage(uint32_t address) {
 8004050:	b580      	push	{r7, lr}
 8004052:	b088      	sub	sp, #32
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
    uint32_t size, checksum = 0, crc = 0;
 8004058:	2300      	movs	r3, #0
 800405a:	617b      	str	r3, [r7, #20]
 800405c:	2300      	movs	r3, #0
 800405e:	613b      	str	r3, [r7, #16]
    uint8_t ret;
    uint8_t *ptr = (uint8_t*) address;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	60fb      	str	r3, [r7, #12]

    /* Check beginning stack pointer */
    ret = IS_VALID_SP(APP_START_ADDR);
 8004064:	4b29      	ldr	r3, [pc, #164]	; (800410c <FOTA_ValidImage+0xbc>)
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	4b29      	ldr	r3, [pc, #164]	; (8004110 <FOTA_ValidImage+0xc0>)
 800406a:	4013      	ands	r3, r2
 800406c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004070:	bf0c      	ite	eq
 8004072:	2301      	moveq	r3, #1
 8004074:	2300      	movne	r3, #0
 8004076:	b2db      	uxtb	r3, r3
 8004078:	76fb      	strb	r3, [r7, #27]

    /* Check the size */
    if (ret) {
 800407a:	7efb      	ldrb	r3, [r7, #27]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00e      	beq.n	800409e <FOTA_ValidImage+0x4e>
        /* Get the stored size information */
        size = *(uint32_t*) (address + SIZE_OFFSET);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f503 23ff 	add.w	r3, r3, #522240	; 0x7f800
 8004086:	f203 73fc 	addw	r3, r3, #2044	; 0x7fc
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	61fb      	str	r3, [r7, #28]
        ret = (size < APP_MAX_SIZE );
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	4a20      	ldr	r2, [pc, #128]	; (8004114 <FOTA_ValidImage+0xc4>)
 8004092:	4293      	cmp	r3, r2
 8004094:	bf94      	ite	ls
 8004096:	2301      	movls	r3, #1
 8004098:	2300      	movhi	r3, #0
 800409a:	b2db      	uxtb	r3, r3
 800409c:	76fb      	strb	r3, [r7, #27]
    }

    /* Check the checksum */
    if (ret) {
 800409e:	7efb      	ldrb	r3, [r7, #27]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d02d      	beq.n	8004100 <FOTA_ValidImage+0xb0>
        /* Get the stored checksum information */
        checksum = *(uint32_t*) (address + CHECKSUM_OFFSET);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f503 23ff 	add.w	r3, r3, #522240	; 0x7f800
 80040aa:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	617b      	str	r3, [r7, #20]
        /* Calculate CRC */
        crc = CRC_Calculate8(ptr, size, 1);
 80040b2:	2201      	movs	r2, #1
 80040b4:	69f9      	ldr	r1, [r7, #28]
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f7ff f87e 	bl	80031b8 <CRC_Calculate8>
 80040bc:	6138      	str	r0, [r7, #16]

        // Indicator
        LOG_Str("APP:Checksum = ");
 80040be:	4816      	ldr	r0, [pc, #88]	; (8004118 <FOTA_ValidImage+0xc8>)
 80040c0:	f7ff fc5a 	bl	8003978 <LOG_Str>
        if (crc == checksum) {
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d103      	bne.n	80040d4 <FOTA_ValidImage+0x84>
            LOG_StrLn("MATCH");
 80040cc:	4813      	ldr	r0, [pc, #76]	; (800411c <FOTA_ValidImage+0xcc>)
 80040ce:	f7ff fc6b 	bl	80039a8 <LOG_StrLn>
 80040d2:	e00d      	b.n	80040f0 <FOTA_ValidImage+0xa0>
        } else {
            LOG_StrLn("NOT MATCH");
 80040d4:	4812      	ldr	r0, [pc, #72]	; (8004120 <FOTA_ValidImage+0xd0>)
 80040d6:	f7ff fc67 	bl	80039a8 <LOG_StrLn>
            LOG_Hex32(checksum);
 80040da:	6978      	ldr	r0, [r7, #20]
 80040dc:	f7ff fc22 	bl	8003924 <LOG_Hex32>
            LOG_Str(" != ");
 80040e0:	4810      	ldr	r0, [pc, #64]	; (8004124 <FOTA_ValidImage+0xd4>)
 80040e2:	f7ff fc49 	bl	8003978 <LOG_Str>
            LOG_Hex32(crc);
 80040e6:	6938      	ldr	r0, [r7, #16]
 80040e8:	f7ff fc1c 	bl	8003924 <LOG_Hex32>
            LOG_Enter();
 80040ec:	f7ff fbc0 	bl	8003870 <LOG_Enter>
        }

        ret = (checksum == crc);
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	bf0c      	ite	eq
 80040f8:	2301      	moveq	r3, #1
 80040fa:	2300      	movne	r3, #0
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	76fb      	strb	r3, [r7, #27]
    }

    return ret;
 8004100:	7efb      	ldrb	r3, [r7, #27]
}
 8004102:	4618      	mov	r0, r3
 8004104:	3720      	adds	r7, #32
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	08020000 	.word	0x08020000
 8004110:	2ffb0000 	.word	0x2ffb0000
 8004114:	0007ffff 	.word	0x0007ffff
 8004118:	0800a900 	.word	0x0800a900
 800411c:	0800a8e4 	.word	0x0800a8e4
 8004120:	0800a8ec 	.word	0x0800a8ec
 8004124:	0800a8f8 	.word	0x0800a8f8

08004128 <FOTA_InProgressDFU>:

uint8_t FOTA_InProgressDFU(void) {
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
    return IS_DFU_IN_PROGRESS(DFU_FLAG);
 800412c:	4b06      	ldr	r3, [pc, #24]	; (8004148 <FOTA_InProgressDFU+0x20>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a06      	ldr	r2, [pc, #24]	; (800414c <FOTA_InProgressDFU+0x24>)
 8004132:	4293      	cmp	r3, r2
 8004134:	bf0c      	ite	eq
 8004136:	2301      	moveq	r3, #1
 8004138:	2300      	movne	r3, #0
 800413a:	b2db      	uxtb	r3, r3
}
 800413c:	4618      	mov	r0, r3
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	20000624 	.word	0x20000624
 800414c:	89abcdef 	.word	0x89abcdef

08004150 <FOTA_JumpToApplication>:

void FOTA_JumpToApplication(void) {
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
    uint32_t appStack, appEntry;

    /* Get stack & entry pointer */
    appStack = *(__IO uint32_t*) APP_START_ADDR;
 8004156:	4b13      	ldr	r3, [pc, #76]	; (80041a4 <FOTA_JumpToApplication+0x54>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	60fb      	str	r3, [r7, #12]
    appEntry = *(__IO uint32_t*) (APP_START_ADDR + 4);
 800415c:	4b12      	ldr	r3, [pc, #72]	; (80041a8 <FOTA_JumpToApplication+0x58>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	60bb      	str	r3, [r7, #8]

    /* Shutdown all peripherals */
    HAL_CRC_MspDeInit(&hcrc);
 8004162:	4812      	ldr	r0, [pc, #72]	; (80041ac <FOTA_JumpToApplication+0x5c>)
 8004164:	f000 ffe4 	bl	8005130 <HAL_CRC_MspDeInit>
    HAL_I2C_MspDeInit(&hi2c2);
 8004168:	4811      	ldr	r0, [pc, #68]	; (80041b0 <FOTA_JumpToApplication+0x60>)
 800416a:	f001 f855 	bl	8005218 <HAL_I2C_MspDeInit>
    HAL_UART_MspDeInit(&huart1);
 800416e:	4811      	ldr	r0, [pc, #68]	; (80041b4 <FOTA_JumpToApplication+0x64>)
 8004170:	f001 f8f4 	bl	800535c <HAL_UART_MspDeInit>
    HAL_RCC_DeInit();
 8004174:	f004 f8ea 	bl	800834c <HAL_RCC_DeInit>
    HAL_DeInit();
 8004178:	f001 f9ea 	bl	8005550 <HAL_DeInit>

    /* Reset systick */
    SysTick->CTRL = 0;
 800417c:	4b0e      	ldr	r3, [pc, #56]	; (80041b8 <FOTA_JumpToApplication+0x68>)
 800417e:	2200      	movs	r2, #0
 8004180:	601a      	str	r2, [r3, #0]
    SysTick->LOAD = 0;
 8004182:	4b0d      	ldr	r3, [pc, #52]	; (80041b8 <FOTA_JumpToApplication+0x68>)
 8004184:	2200      	movs	r2, #0
 8004186:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0;
 8004188:	4b0b      	ldr	r3, [pc, #44]	; (80041b8 <FOTA_JumpToApplication+0x68>)
 800418a:	2200      	movs	r2, #0
 800418c:	609a      	str	r2, [r3, #8]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	f383 8808 	msr	MSP, r3

    /* Set stack pointer */
    __set_MSP(appStack);

    /* Jump to user ResetHandler */
    void (*jump)(void) = (void (*)(void))(appEntry);
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	607b      	str	r3, [r7, #4]
    jump();
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4798      	blx	r3

    /* Never reached */
    while (1)
 80041a0:	e7fe      	b.n	80041a0 <FOTA_JumpToApplication+0x50>
 80041a2:	bf00      	nop
 80041a4:	08020000 	.word	0x08020000
 80041a8:	08020004 	.word	0x08020004
 80041ac:	20000c34 	.word	0x20000c34
 80041b0:	20000c3c 	.word	0x20000c3c
 80041b4:	20000cf0 	.word	0x20000cf0
 80041b8:	e000e010 	.word	0xe000e010

080041bc <Simcom_Lock>:
static SIMCOM_RESULT Simcom_Execute(char *data, uint16_t size, uint32_t ms, char *res);
static void Simcom_Sleep(uint8_t state);
static void Simcom_BeforeTransmitHook(void);

/* Public functions implementation --------------------------------------------*/
void Simcom_Lock(void) {
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
    //    osMutexAcquire(SimcomRecMutexHandle, osWaitForever);
}
 80041c0:	bf00      	nop
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <Simcom_Unlock>:

void Simcom_Unlock(void) {
 80041ca:	b480      	push	{r7}
 80041cc:	af00      	add	r7, sp, #0
    //    osMutexRelease(SimcomRecMutexHandle);
}
 80041ce:	bf00      	nop
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <Simcom_Response>:

char* Simcom_Response(char *str) {
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
    return strstr(SIMCOM_UART_RX, str);
 80041e0:	6879      	ldr	r1, [r7, #4]
 80041e2:	4804      	ldr	r0, [pc, #16]	; (80041f4 <Simcom_Response+0x1c>)
 80041e4:	f005 fc72 	bl	8009acc <strstr>
 80041e8:	4603      	mov	r3, r0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	20000634 	.word	0x20000634

080041f8 <Simcom_Init>:

void Simcom_Init(void) {
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
    Simcom_SetState(SIM_STATE_READY);
 80041fc:	2000      	movs	r0, #0
 80041fe:	f000 f803 	bl	8004208 <Simcom_SetState>
}
 8004202:	bf00      	nop
 8004204:	bd80      	pop	{r7, pc}
	...

08004208 <Simcom_SetState>:

uint8_t Simcom_SetState(SIMCOM_STATE state) {
 8004208:	b580      	push	{r7, lr}
 800420a:	b094      	sub	sp, #80	; 0x50
 800420c:	af00      	add	r7, sp, #0
 800420e:	4603      	mov	r3, r0
 8004210:	71fb      	strb	r3, [r7, #7]
    static uint8_t init = 1;
    uint8_t depth = 3;
 8004212:	2303      	movs	r3, #3
 8004214:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    SIMCOM_STATE lastState = SIM_STATE_DOWN;
 8004218:	23ff      	movs	r3, #255	; 0xff
 800421a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
    SIMCOM_RESULT p;

    Simcom_Lock();
 800421e:	f7ff ffcd 	bl	80041bc <Simcom_Lock>
    // Handle SIMCOM state properly
    while (SIM.state < state) {
 8004222:	e1a4      	b.n	800456e <Simcom_SetState+0x366>
        // Handle locked-loop
        if (SIM.state < lastState) {
 8004224:	4bc4      	ldr	r3, [pc, #784]	; (8004538 <Simcom_SetState+0x330>)
 8004226:	f993 3000 	ldrsb.w	r3, [r3]
 800422a:	f997 204e 	ldrsb.w	r2, [r7, #78]	; 0x4e
 800422e:	429a      	cmp	r2, r3
 8004230:	dd16      	ble.n	8004260 <Simcom_SetState+0x58>
            if (!--depth) {
 8004232:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004236:	3b01      	subs	r3, #1
 8004238:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800423c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004240:	2b00      	cmp	r3, #0
 8004242:	d103      	bne.n	800424c <Simcom_SetState+0x44>
                SIM.state = SIM_STATE_DOWN;
 8004244:	4bbc      	ldr	r3, [pc, #752]	; (8004538 <Simcom_SetState+0x330>)
 8004246:	22ff      	movs	r2, #255	; 0xff
 8004248:	701a      	strb	r2, [r3, #0]
                break;
 800424a:	e198      	b.n	800457e <Simcom_SetState+0x376>
            }
            LOG_Str("Simcom:LockedLoop = ");
 800424c:	48bb      	ldr	r0, [pc, #748]	; (800453c <Simcom_SetState+0x334>)
 800424e:	f7ff fb93 	bl	8003978 <LOG_Str>
            LOG_Int(depth);
 8004252:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004256:	4618      	mov	r0, r3
 8004258:	f7ff fb16 	bl	8003888 <LOG_Int>
            LOG_Enter();
 800425c:	f7ff fb08 	bl	8003870 <LOG_Enter>
        }

        // Handle signal
        if (SIM.state == SIM_STATE_DOWN) {
 8004260:	4bb5      	ldr	r3, [pc, #724]	; (8004538 <Simcom_SetState+0x330>)
 8004262:	f993 3000 	ldrsb.w	r3, [r3]
 8004266:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800426a:	d103      	bne.n	8004274 <Simcom_SetState+0x6c>
            SIM.signal = 0;
 800426c:	4bb2      	ldr	r3, [pc, #712]	; (8004538 <Simcom_SetState+0x330>)
 800426e:	2200      	movs	r2, #0
 8004270:	741a      	strb	r2, [r3, #16]
 8004272:	e00f      	b.n	8004294 <Simcom_SetState+0x8c>
        } else {
            Simcom_IdleJob(NULL);
 8004274:	2000      	movs	r0, #0
 8004276:	f000 fab5 	bl	80047e4 <Simcom_IdleJob>
            if (SIM.state >= SIM_STATE_GPRS_ON) {
 800427a:	4baf      	ldr	r3, [pc, #700]	; (8004538 <Simcom_SetState+0x330>)
 800427c:	f993 3000 	ldrsb.w	r3, [r3]
 8004280:	2b02      	cmp	r3, #2
 8004282:	dd07      	ble.n	8004294 <Simcom_SetState+0x8c>
                // Force to exit loop
                if (SIM.signal < 15) {
 8004284:	4bac      	ldr	r3, [pc, #688]	; (8004538 <Simcom_SetState+0x330>)
 8004286:	7c1b      	ldrb	r3, [r3, #16]
 8004288:	2b0e      	cmp	r3, #14
 800428a:	d803      	bhi.n	8004294 <Simcom_SetState+0x8c>
                    LOG_StrLn("Simcom:SignalPoor");
 800428c:	48ac      	ldr	r0, [pc, #688]	; (8004540 <Simcom_SetState+0x338>)
 800428e:	f7ff fb8b 	bl	80039a8 <LOG_StrLn>
                    break;
 8004292:	e174      	b.n	800457e <Simcom_SetState+0x376>
                }
            }
        }

        // Set value
        p = SIM_RESULT_OK;
 8004294:	2301      	movs	r3, #1
 8004296:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        lastState = SIM.state;
 800429a:	4ba7      	ldr	r3, [pc, #668]	; (8004538 <Simcom_SetState+0x330>)
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

        // handle simcom states
        switch (SIM.state) {
 80042a2:	4ba5      	ldr	r3, [pc, #660]	; (8004538 <Simcom_SetState+0x330>)
 80042a4:	f993 3000 	ldrsb.w	r3, [r3]
 80042a8:	3301      	adds	r3, #1
 80042aa:	2b04      	cmp	r3, #4
 80042ac:	f200 815e 	bhi.w	800456c <Simcom_SetState+0x364>
 80042b0:	a201      	add	r2, pc, #4	; (adr r2, 80042b8 <Simcom_SetState+0xb0>)
 80042b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b6:	bf00      	nop
 80042b8:	080042cd 	.word	0x080042cd
 80042bc:	08004339 	.word	0x08004339
 80042c0:	080043f9 	.word	0x080043f9
 80042c4:	0800449d 	.word	0x0800449d
 80042c8:	0800456f 	.word	0x0800456f
            case SIM_STATE_DOWN:
                // only executed at power up
                if (init) {
 80042cc:	4b9d      	ldr	r3, [pc, #628]	; (8004544 <Simcom_SetState+0x33c>)
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d006      	beq.n	80042e2 <Simcom_SetState+0xda>
                    init = 0;
 80042d4:	4b9b      	ldr	r3, [pc, #620]	; (8004544 <Simcom_SetState+0x33c>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	701a      	strb	r2, [r3, #0]
                    LOG_StrLn("Simcom:Init");
 80042da:	489b      	ldr	r0, [pc, #620]	; (8004548 <Simcom_SetState+0x340>)
 80042dc:	f7ff fb64 	bl	80039a8 <LOG_StrLn>
 80042e0:	e002      	b.n	80042e8 <Simcom_SetState+0xe0>
                } else {
                    LOG_StrLn("Simcom:Restarting...");
 80042e2:	489a      	ldr	r0, [pc, #616]	; (800454c <Simcom_SetState+0x344>)
 80042e4:	f7ff fb60 	bl	80039a8 <LOG_StrLn>
                }

                // power up the module
                p = Simcom_Power();
 80042e8:	f000 fae4 	bl	80048b4 <Simcom_Power>
 80042ec:	4603      	mov	r3, r0
 80042ee:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                // upgrade simcom state
                if (p > 0) {
 80042f2:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	dd0c      	ble.n	8004314 <Simcom_SetState+0x10c>
                    SIM.state++;
 80042fa:	4b8f      	ldr	r3, [pc, #572]	; (8004538 <Simcom_SetState+0x330>)
 80042fc:	f993 3000 	ldrsb.w	r3, [r3]
 8004300:	b2db      	uxtb	r3, r3
 8004302:	3301      	adds	r3, #1
 8004304:	b2db      	uxtb	r3, r3
 8004306:	b25a      	sxtb	r2, r3
 8004308:	4b8b      	ldr	r3, [pc, #556]	; (8004538 <Simcom_SetState+0x330>)
 800430a:	701a      	strb	r2, [r3, #0]
                    LOG_StrLn("Simcom:ON");
 800430c:	4890      	ldr	r0, [pc, #576]	; (8004550 <Simcom_SetState+0x348>)
 800430e:	f7ff fb4b 	bl	80039a8 <LOG_StrLn>
 8004312:	e002      	b.n	800431a <Simcom_SetState+0x112>
                } else {
                    LOG_StrLn("Simcom:Error");
 8004314:	488f      	ldr	r0, [pc, #572]	; (8004554 <Simcom_SetState+0x34c>)
 8004316:	f7ff fb47 	bl	80039a8 <LOG_StrLn>
                }

                // disable command echo
                if (p > 0) {
 800431a:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 800431e:	2b00      	cmp	r3, #0
 8004320:	dd05      	ble.n	800432e <Simcom_SetState+0x126>
                    p = AT_CommandEchoMode(0);
 8004322:	2000      	movs	r0, #0
 8004324:	f7fe f900 	bl	8002528 <AT_CommandEchoMode>
 8004328:	4603      	mov	r3, r0
 800432a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                }

                _DelayMS(500);
 800432e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004332:	f000 fba0 	bl	8004a76 <_DelayMS>
                break;
 8004336:	e11a      	b.n	800456e <Simcom_SetState+0x366>
            case SIM_STATE_READY:
                // =========== BASIC CONFIGURATION
                // Set serial baud-rate
                if (p > 0) {
 8004338:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 800433c:	2b00      	cmp	r3, #0
 800433e:	dd0a      	ble.n	8004356 <Simcom_SetState+0x14e>
                    uint32_t rate = 0;
 8004340:	2300      	movs	r3, #0
 8004342:	64bb      	str	r3, [r7, #72]	; 0x48
                    p = AT_FixedLocalRate(ATW, &rate);
 8004344:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004348:	4619      	mov	r1, r3
 800434a:	2000      	movs	r0, #0
 800434c:	f7fe fd0a 	bl	8002d64 <AT_FixedLocalRate>
 8004350:	4603      	mov	r3, r0
 8004352:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                }
                // Error report format: 0, 1(Numeric), 2(verbose)
                if (p > 0) {
 8004356:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 800435a:	2b00      	cmp	r3, #0
 800435c:	dd0a      	ble.n	8004374 <Simcom_SetState+0x16c>
                    AT_CMEE state = CMEE_VERBOSE;
 800435e:	2302      	movs	r3, #2
 8004360:	647b      	str	r3, [r7, #68]	; 0x44
                    p = AT_ReportMobileEquipmentError(ATW, &state);
 8004362:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004366:	4619      	mov	r1, r3
 8004368:	2000      	movs	r0, #0
 800436a:	f7fe fce7 	bl	8002d3c <AT_ReportMobileEquipmentError>
 800436e:	4603      	mov	r3, r0
 8004370:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                }
                // Use pin DTR as sleep control
                if (p > 0) {
 8004374:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8004378:	2b00      	cmp	r3, #0
 800437a:	dd0a      	ble.n	8004392 <Simcom_SetState+0x18a>
                    AT_CSCLK state = CSCLK_EN_DTR;
 800437c:	2301      	movs	r3, #1
 800437e:	643b      	str	r3, [r7, #64]	; 0x40
                    p = AT_ConfigureSlowClock(ATW, &state);
 8004380:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004384:	4619      	mov	r1, r3
 8004386:	2000      	movs	r0, #0
 8004388:	f7fe fcc4 	bl	8002d14 <AT_ConfigureSlowClock>
 800438c:	4603      	mov	r3, r0
 800438e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                //                    AT_BOOL state = AT_DISABLE;
                //                    p = AT_ShowRemoteIp(ATW, &state);
                //                }
                // =========== NETWORK CONFIGURATION
                // Check SIM Card
                if (p > 0) {
 8004392:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8004396:	2b00      	cmp	r3, #0
 8004398:	dd09      	ble.n	80043ae <Simcom_SetState+0x1a6>
                    p = Simcom_Command("AT+CPIN?\r", "READY", 500, 0);
 800439a:	2300      	movs	r3, #0
 800439c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80043a0:	496d      	ldr	r1, [pc, #436]	; (8004558 <Simcom_SetState+0x350>)
 80043a2:	486e      	ldr	r0, [pc, #440]	; (800455c <Simcom_SetState+0x354>)
 80043a4:	f000 f9b2 	bl	800470c <Simcom_Command>
 80043a8:	4603      	mov	r3, r0
 80043aa:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                }
                // Disable presentation of <AcT>&<rac> at CREG and CGREG
                if (p > 0) {
 80043ae:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	dd0e      	ble.n	80043d4 <Simcom_SetState+0x1cc>
                    at_csact_t param = {
 80043b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80043ba:	2200      	movs	r2, #0
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	605a      	str	r2, [r3, #4]
 80043c0:	609a      	str	r2, [r3, #8]
                            .creg = 0,
                            .cgreg = 0,
                    };
                    p = AT_NetworkAttachedStatus(ATW, &param);
 80043c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80043c6:	4619      	mov	r1, r3
 80043c8:	2000      	movs	r0, #0
 80043ca:	f7fe fb67 	bl	8002a9c <AT_NetworkAttachedStatus>
 80043ce:	4603      	mov	r3, r0
 80043d0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                }

                // upgrade simcom state
                if (p > 0) {
 80043d4:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 80043d8:	2b00      	cmp	r3, #0
 80043da:	dd08      	ble.n	80043ee <Simcom_SetState+0x1e6>
                    SIM.state++;
 80043dc:	4b56      	ldr	r3, [pc, #344]	; (8004538 <Simcom_SetState+0x330>)
 80043de:	f993 3000 	ldrsb.w	r3, [r3]
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	3301      	adds	r3, #1
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	b25a      	sxtb	r2, r3
 80043ea:	4b53      	ldr	r3, [pc, #332]	; (8004538 <Simcom_SetState+0x330>)
 80043ec:	701a      	strb	r2, [r3, #0]
                }

                _DelayMS(500);
 80043ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80043f2:	f000 fb40 	bl	8004a76 <_DelayMS>
                break;
 80043f6:	e0ba      	b.n	800456e <Simcom_SetState+0x366>
            case SIM_STATE_CONFIGURED:
                // =========== NETWORK ATTACH
                // Set signal Generation 2G(13)/3G(14)/AUTO(2)
                if (p > 0) {
 80043f8:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	dd0f      	ble.n	8004420 <Simcom_SetState+0x218>
                    at_cnmp_t param = {
 8004400:	4a57      	ldr	r2, [pc, #348]	; (8004560 <Simcom_SetState+0x358>)
 8004402:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004406:	e892 0003 	ldmia.w	r2, {r0, r1}
 800440a:	e883 0003 	stmia.w	r3, {r0, r1}
                            .mode = CNMP_ACT_AUTO,
                            .preferred = CNMP_ACT_P_UMTS
                    };
                    p = AT_RadioAccessTechnology(ATW, &param);
 800440e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004412:	4619      	mov	r1, r3
 8004414:	2000      	movs	r0, #0
 8004416:	f7fe faab 	bl	8002970 <AT_RadioAccessTechnology>
 800441a:	4603      	mov	r3, r0
 800441c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                }
                // Network Registration Status
                if (p > 0) {
 8004420:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8004424:	2b00      	cmp	r3, #0
 8004426:	dd27      	ble.n	8004478 <Simcom_SetState+0x270>
                    at_c_greg_t read, param = {
 8004428:	2300      	movs	r3, #0
 800442a:	61fb      	str	r3, [r7, #28]
 800442c:	2301      	movs	r3, #1
 800442e:	623b      	str	r3, [r7, #32]
                            .mode = CREG_MODE_DISABLE,
                            .stat = CREG_STAT_REG_HOME
                    };
                    // wait until attached
                    do {
                        p = AT_NetworkRegistration("CREG", ATW, &param);
 8004430:	f107 031c 	add.w	r3, r7, #28
 8004434:	461a      	mov	r2, r3
 8004436:	2100      	movs	r1, #0
 8004438:	484a      	ldr	r0, [pc, #296]	; (8004564 <Simcom_SetState+0x35c>)
 800443a:	f7fe fbdb 	bl	8002bf4 <AT_NetworkRegistration>
 800443e:	4603      	mov	r3, r0
 8004440:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                        if (p > 0) {
 8004444:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8004448:	2b00      	cmp	r3, #0
 800444a:	dd09      	ble.n	8004460 <Simcom_SetState+0x258>
                            p = AT_NetworkRegistration("CREG", ATR, &read);
 800444c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004450:	461a      	mov	r2, r3
 8004452:	2101      	movs	r1, #1
 8004454:	4843      	ldr	r0, [pc, #268]	; (8004564 <Simcom_SetState+0x35c>)
 8004456:	f7fe fbcd 	bl	8002bf4 <AT_NetworkRegistration>
 800445a:	4603      	mov	r3, r0
 800445c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                        }

                        _DelayMS(1000);
 8004460:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004464:	f000 fb07 	bl	8004a76 <_DelayMS>
                    } while (p && read.stat != param.stat);
 8004468:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 800446c:	2b00      	cmp	r3, #0
 800446e:	d003      	beq.n	8004478 <Simcom_SetState+0x270>
 8004470:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004472:	6a3b      	ldr	r3, [r7, #32]
 8004474:	429a      	cmp	r2, r3
 8004476:	d1db      	bne.n	8004430 <Simcom_SetState+0x228>
                }

                // upgrade simcom state
                if (p > 0) {
 8004478:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 800447c:	2b00      	cmp	r3, #0
 800447e:	dd08      	ble.n	8004492 <Simcom_SetState+0x28a>
                    SIM.state++;
 8004480:	4b2d      	ldr	r3, [pc, #180]	; (8004538 <Simcom_SetState+0x330>)
 8004482:	f993 3000 	ldrsb.w	r3, [r3]
 8004486:	b2db      	uxtb	r3, r3
 8004488:	3301      	adds	r3, #1
 800448a:	b2db      	uxtb	r3, r3
 800448c:	b25a      	sxtb	r2, r3
 800448e:	4b2a      	ldr	r3, [pc, #168]	; (8004538 <Simcom_SetState+0x330>)
 8004490:	701a      	strb	r2, [r3, #0]
                }

                _DelayMS(500);
 8004492:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004496:	f000 faee 	bl	8004a76 <_DelayMS>
                break;
 800449a:	e068      	b.n	800456e <Simcom_SetState+0x366>
            case SIM_STATE_NETWORK_ON:
                // =========== GPRS ATTACH
                // GPRS Registration Status
                if (p > 0) {
 800449c:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	dd27      	ble.n	80044f4 <Simcom_SetState+0x2ec>
                    at_c_greg_t read, param = {
 80044a4:	2300      	movs	r3, #0
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	2301      	movs	r3, #1
 80044aa:	613b      	str	r3, [r7, #16]
                            .mode = CREG_MODE_DISABLE,
                            .stat = CREG_STAT_REG_HOME
                    };
                    // wait until attached
                    do {
                        p = AT_NetworkRegistration("CGREG", ATW, &param);
 80044ac:	f107 030c 	add.w	r3, r7, #12
 80044b0:	461a      	mov	r2, r3
 80044b2:	2100      	movs	r1, #0
 80044b4:	482c      	ldr	r0, [pc, #176]	; (8004568 <Simcom_SetState+0x360>)
 80044b6:	f7fe fb9d 	bl	8002bf4 <AT_NetworkRegistration>
 80044ba:	4603      	mov	r3, r0
 80044bc:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                        if (p > 0) {
 80044c0:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	dd09      	ble.n	80044dc <Simcom_SetState+0x2d4>
                            p = AT_NetworkRegistration("CGREG", ATR, &read);
 80044c8:	f107 0314 	add.w	r3, r7, #20
 80044cc:	461a      	mov	r2, r3
 80044ce:	2101      	movs	r1, #1
 80044d0:	4825      	ldr	r0, [pc, #148]	; (8004568 <Simcom_SetState+0x360>)
 80044d2:	f7fe fb8f 	bl	8002bf4 <AT_NetworkRegistration>
 80044d6:	4603      	mov	r3, r0
 80044d8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                        }

                        _DelayMS(1000);
 80044dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80044e0:	f000 fac9 	bl	8004a76 <_DelayMS>
                    } while (p && read.stat != param.stat);
 80044e4:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d003      	beq.n	80044f4 <Simcom_SetState+0x2ec>
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d1db      	bne.n	80044ac <Simcom_SetState+0x2a4>
                }

                // upgrade simcom state
                if (p > 0) {
 80044f4:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	dd09      	ble.n	8004510 <Simcom_SetState+0x308>
                    SIM.state++;
 80044fc:	4b0e      	ldr	r3, [pc, #56]	; (8004538 <Simcom_SetState+0x330>)
 80044fe:	f993 3000 	ldrsb.w	r3, [r3]
 8004502:	b2db      	uxtb	r3, r3
 8004504:	3301      	adds	r3, #1
 8004506:	b2db      	uxtb	r3, r3
 8004508:	b25a      	sxtb	r2, r3
 800450a:	4b0b      	ldr	r3, [pc, #44]	; (8004538 <Simcom_SetState+0x330>)
 800450c:	701a      	strb	r2, [r3, #0]
 800450e:	e00d      	b.n	800452c <Simcom_SetState+0x324>
                } else {
                    if (SIM.state == SIM_STATE_NETWORK_ON) {
 8004510:	4b09      	ldr	r3, [pc, #36]	; (8004538 <Simcom_SetState+0x330>)
 8004512:	f993 3000 	ldrsb.w	r3, [r3]
 8004516:	2b02      	cmp	r3, #2
 8004518:	d108      	bne.n	800452c <Simcom_SetState+0x324>
                        SIM.state--;
 800451a:	4b07      	ldr	r3, [pc, #28]	; (8004538 <Simcom_SetState+0x330>)
 800451c:	f993 3000 	ldrsb.w	r3, [r3]
 8004520:	b2db      	uxtb	r3, r3
 8004522:	3b01      	subs	r3, #1
 8004524:	b2db      	uxtb	r3, r3
 8004526:	b25a      	sxtb	r2, r3
 8004528:	4b03      	ldr	r3, [pc, #12]	; (8004538 <Simcom_SetState+0x330>)
 800452a:	701a      	strb	r2, [r3, #0]
                    }
                }

                _DelayMS(500);
 800452c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004530:	f000 faa1 	bl	8004a76 <_DelayMS>
                break;
 8004534:	e01b      	b.n	800456e <Simcom_SetState+0x366>
 8004536:	bf00      	nop
 8004538:	20000008 	.word	0x20000008
 800453c:	0800a910 	.word	0x0800a910
 8004540:	0800a928 	.word	0x0800a928
 8004544:	20000020 	.word	0x20000020
 8004548:	0800a93c 	.word	0x0800a93c
 800454c:	0800a948 	.word	0x0800a948
 8004550:	0800a960 	.word	0x0800a960
 8004554:	0800a96c 	.word	0x0800a96c
 8004558:	0800a97c 	.word	0x0800a97c
 800455c:	0800a984 	.word	0x0800a984
 8004560:	0800a9a0 	.word	0x0800a9a0
 8004564:	0800a990 	.word	0x0800a990
 8004568:	0800a998 	.word	0x0800a998
            case SIM_STATE_GPRS_ON:

                break;
            default:
                break;
 800456c:	bf00      	nop
    while (SIM.state < state) {
 800456e:	4b0c      	ldr	r3, [pc, #48]	; (80045a0 <Simcom_SetState+0x398>)
 8004570:	f993 3000 	ldrsb.w	r3, [r3]
 8004574:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8004578:	429a      	cmp	r2, r3
 800457a:	f73f ae53 	bgt.w	8004224 <Simcom_SetState+0x1c>
        }
    };
    Simcom_Unlock();
 800457e:	f7ff fe24 	bl	80041ca <Simcom_Unlock>

    return SIM.state >= state;
 8004582:	4b07      	ldr	r3, [pc, #28]	; (80045a0 <Simcom_SetState+0x398>)
 8004584:	f993 3000 	ldrsb.w	r3, [r3]
 8004588:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800458c:	429a      	cmp	r2, r3
 800458e:	bfd4      	ite	le
 8004590:	2301      	movle	r3, #1
 8004592:	2300      	movgt	r3, #0
 8004594:	b2db      	uxtb	r3, r3
}
 8004596:	4618      	mov	r0, r3
 8004598:	3750      	adds	r7, #80	; 0x50
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	20000008 	.word	0x20000008

080045a4 <Simcom_FOTA>:

uint8_t Simcom_FOTA(void) {
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b0aa      	sub	sp, #168	; 0xa8
 80045a8:	af00      	add	r7, sp, #0
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 80045aa:	2300      	movs	r3, #0
 80045ac:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    uint32_t checksumBkp, checksum = 0, len = 0;
 80045b0:	2300      	movs	r3, #0
 80045b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80045b6:	2300      	movs	r3, #0
 80045b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    at_ftp_t ftp = {
 80045bc:	463b      	mov	r3, r7
 80045be:	2298      	movs	r2, #152	; 0x98
 80045c0:	2100      	movs	r1, #0
 80045c2:	4618      	mov	r0, r3
 80045c4:	f005 fa48 	bl	8009a58 <memset>
 80045c8:	4a49      	ldr	r2, [pc, #292]	; (80046f0 <Simcom_FOTA+0x14c>)
 80045ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80045ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80045d2:	6018      	str	r0, [r3, #0]
 80045d4:	3304      	adds	r3, #4
 80045d6:	8019      	strh	r1, [r3, #0]
 80045d8:	f107 035a 	add.w	r3, r7, #90	; 0x5a
 80045dc:	2200      	movs	r2, #0
 80045de:	601a      	str	r2, [r3, #0]
 80045e0:	605a      	str	r2, [r3, #4]
 80045e2:	609a      	str	r2, [r3, #8]
 80045e4:	819a      	strh	r2, [r3, #12]
 80045e6:	4b43      	ldr	r3, [pc, #268]	; (80046f4 <Simcom_FOTA+0x150>)
 80045e8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80045ea:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80045ee:	2200      	movs	r2, #0
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	605a      	str	r2, [r3, #4]
 80045f4:	609a      	str	r2, [r3, #8]
 80045f6:	60da      	str	r2, [r3, #12]
            .path = "/vcu/",
            .version = "APP"
    };

    /* Set DFU */
    if (!FOTA_InProgressDFU()) {
 80045f8:	f7ff fd96 	bl	8004128 <FOTA_InProgressDFU>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10b      	bne.n	800461a <Simcom_FOTA+0x76>
        EEPROM_FlagDFU(EE_CMD_W, DFU_IN_PROGRESS);
 8004602:	493d      	ldr	r1, [pc, #244]	; (80046f8 <Simcom_FOTA+0x154>)
 8004604:	2001      	movs	r0, #1
 8004606:	f7ff fa9d 	bl	8003b44 <EEPROM_FlagDFU>

        // Backup current application (if necessary)
        if (FOTA_ValidImage(APP_START_ADDR)) {
 800460a:	483c      	ldr	r0, [pc, #240]	; (80046fc <Simcom_FOTA+0x158>)
 800460c:	f7ff fd20 	bl	8004050 <FOTA_ValidImage>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <Simcom_FOTA+0x76>
            FLASHER_BackupApp();
 8004616:	f7ff f8d3 	bl	80037c0 <FLASHER_BackupApp>
        }
    }
    /* Get the stored checksum information */
    checksumBkp = *(uint32_t*) (BKP_START_ADDR + CHECKSUM_OFFSET);
 800461a:	4b39      	ldr	r3, [pc, #228]	; (8004700 <Simcom_FOTA+0x15c>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    /* Initialise */
    Simcom_Init();
 8004622:	f7ff fde9 	bl	80041f8 <Simcom_Init>

    Simcom_Lock();
 8004626:	f7ff fdc9 	bl	80041bc <Simcom_Lock>
    // FOTA download, program & check
    if (Simcom_SetState(SIM_STATE_GPRS_ON)) {
 800462a:	2003      	movs	r0, #3
 800462c:	f7ff fdec 	bl	8004208 <Simcom_SetState>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d04e      	beq.n	80046d4 <Simcom_FOTA+0x130>
        // Initialize bearer for TCP based apps.
        p = FOTA_BearerInitialize();
 8004636:	f7ff fae1 	bl	8003bfc <FOTA_BearerInitialize>
 800463a:	4603      	mov	r3, r0
 800463c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

        // Get checksum of new firmware
        if (p > 0) {
 8004640:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004644:	2b00      	cmp	r3, #0
 8004646:	dd09      	ble.n	800465c <Simcom_FOTA+0xb8>
            p = FOTA_GetChecksum(&ftp, &checksum);
 8004648:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800464c:	463b      	mov	r3, r7
 800464e:	4611      	mov	r1, r2
 8004650:	4618      	mov	r0, r3
 8004652:	f7ff fb05 	bl	8003c60 <FOTA_GetChecksum>
 8004656:	4603      	mov	r3, r0
 8004658:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        }

        // Only download when image is different
        if (p > 0 && checksumBkp != checksum) {
 800465c:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004660:	2b00      	cmp	r3, #0
 8004662:	dd2f      	ble.n	80046c4 <Simcom_FOTA+0x120>
 8004664:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004668:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800466c:	429a      	cmp	r2, r3
 800466e:	d029      	beq.n	80046c4 <Simcom_FOTA+0x120>
            LOG_StrLn("NOT MATCH");
 8004670:	4824      	ldr	r0, [pc, #144]	; (8004704 <Simcom_FOTA+0x160>)
 8004672:	f7ff f999 	bl	80039a8 <LOG_StrLn>
            LOG_Hex32(checksumBkp);
 8004676:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800467a:	f7ff f953 	bl	8003924 <LOG_Hex32>
            LOG_Str(" != ");
 800467e:	4822      	ldr	r0, [pc, #136]	; (8004708 <Simcom_FOTA+0x164>)
 8004680:	f7ff f97a 	bl	8003978 <LOG_Str>
            LOG_Hex32(checksum);
 8004684:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004688:	4618      	mov	r0, r3
 800468a:	f7ff f94b 	bl	8003924 <LOG_Hex32>
            LOG_Enter();
 800468e:	f7ff f8ef 	bl	8003870 <LOG_Enter>
            // Download & Program new firmware
            p = FOTA_FirmwareToFlash(&ftp, &len);
 8004692:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8004696:	463b      	mov	r3, r7
 8004698:	4611      	mov	r1, r2
 800469a:	4618      	mov	r0, r3
 800469c:	f7ff fb7a 	bl	8003d94 <FOTA_FirmwareToFlash>
 80046a0:	4603      	mov	r3, r0
 80046a2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

            // Buffer filled, compare the checksum
            if (p > 0) {
 80046a6:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	dd0a      	ble.n	80046c4 <Simcom_FOTA+0x120>
                p = FOTA_CompareChecksum(checksum, len, APP_START_ADDR);
 80046ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046b2:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80046b6:	4a11      	ldr	r2, [pc, #68]	; (80046fc <Simcom_FOTA+0x158>)
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7ff fc75 	bl	8003fa8 <FOTA_CompareChecksum>
 80046be:	4603      	mov	r3, r0
 80046c0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
            }
        }

        // DFU flag reset
        if (p > 0) {
 80046c4:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	dd03      	ble.n	80046d4 <Simcom_FOTA+0x130>
            EEPROM_FlagDFU(EE_CMD_W, 0);
 80046cc:	2100      	movs	r1, #0
 80046ce:	2001      	movs	r0, #1
 80046d0:	f7ff fa38 	bl	8003b44 <EEPROM_FlagDFU>
        }
    }

    Simcom_Unlock();
 80046d4:	f7ff fd79 	bl	80041ca <Simcom_Unlock>
    return (p == SIM_RESULT_OK);
 80046d8:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80046dc:	2b01      	cmp	r3, #1
 80046de:	bf0c      	ite	eq
 80046e0:	2301      	moveq	r3, #1
 80046e2:	2300      	movne	r3, #0
 80046e4:	b2db      	uxtb	r3, r3
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	37a8      	adds	r7, #168	; 0xa8
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	0800a9bc 	.word	0x0800a9bc
 80046f4:	00505041 	.word	0x00505041
 80046f8:	89abcdef 	.word	0x89abcdef
 80046fc:	08020000 	.word	0x08020000
 8004700:	0811fff8 	.word	0x0811fff8
 8004704:	0800a9a8 	.word	0x0800a9a8
 8004708:	0800a9b4 	.word	0x0800a9b4

0800470c <Simcom_Command>:

SIMCOM_RESULT Simcom_Command(char *data, char *res, uint32_t ms, uint16_t size) {
 800470c:	b580      	push	{r7, lr}
 800470e:	b086      	sub	sp, #24
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
 8004718:	807b      	strh	r3, [r7, #2]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 800471a:	2300      	movs	r3, #0
 800471c:	75fb      	strb	r3, [r7, #23]
    uint8_t upload = 1;
 800471e:	2301      	movs	r3, #1
 8004720:	75bb      	strb	r3, [r7, #22]

    // Handle default value
    if (res == NULL) {
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d101      	bne.n	800472c <Simcom_Command+0x20>
        res = SIMCOM_RSP_OK;
 8004728:	4b28      	ldr	r3, [pc, #160]	; (80047cc <Simcom_Command+0xc0>)
 800472a:	60bb      	str	r3, [r7, #8]
    }
    if (!size) {
 800472c:	887b      	ldrh	r3, [r7, #2]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d106      	bne.n	8004740 <Simcom_Command+0x34>
        upload = 0;
 8004732:	2300      	movs	r3, #0
 8004734:	75bb      	strb	r3, [r7, #22]
        size = strlen(data);
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f7fb fd7c 	bl	8000234 <strlen>
 800473c:	4603      	mov	r3, r0
 800473e:	807b      	strh	r3, [r7, #2]
    }

    // only handle command if SIM_STATE_READY or BOOT_CMD
    if (SIM.state >= SIM_STATE_READY || (strcmp(data, SIMCOM_CMD_BOOT) == 0)) {
 8004740:	4b23      	ldr	r3, [pc, #140]	; (80047d0 <Simcom_Command+0xc4>)
 8004742:	f993 3000 	ldrsb.w	r3, [r3]
 8004746:	2b00      	cmp	r3, #0
 8004748:	da06      	bge.n	8004758 <Simcom_Command+0x4c>
 800474a:	4922      	ldr	r1, [pc, #136]	; (80047d4 <Simcom_Command+0xc8>)
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f7fb fd67 	bl	8000220 <strcmp>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d133      	bne.n	80047c0 <Simcom_Command+0xb4>
        Simcom_Lock();
 8004758:	f7ff fd30 	bl	80041bc <Simcom_Lock>

        // Debug: print command
        if (SIMCOM_DEBUG) {
            if (!upload) {
 800475c:	7dbb      	ldrb	r3, [r7, #22]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d108      	bne.n	8004774 <Simcom_Command+0x68>
                LOG_Str("\n=> ");
 8004762:	481d      	ldr	r0, [pc, #116]	; (80047d8 <Simcom_Command+0xcc>)
 8004764:	f7ff f908 	bl	8003978 <LOG_Str>
                LOG_Buf(data, size);
 8004768:	887b      	ldrh	r3, [r7, #2]
 800476a:	4619      	mov	r1, r3
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f7ff f936 	bl	80039de <LOG_Buf>
 8004772:	e004      	b.n	800477e <Simcom_Command+0x72>
            } else {
                LOG_BufHex(data, size);
 8004774:	887b      	ldrh	r3, [r7, #2]
 8004776:	4619      	mov	r1, r3
 8004778:	68f8      	ldr	r0, [r7, #12]
 800477a:	f7ff f94f 	bl	8003a1c <LOG_BufHex>
            }
            LOG_Enter();
 800477e:	f7ff f877 	bl	8003870 <LOG_Enter>
        }

        // send command
        p = Simcom_Execute(data, size, ms, res);
 8004782:	8879      	ldrh	r1, [r7, #2]
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f000 f8db 	bl	8004944 <Simcom_Execute>
 800478e:	4603      	mov	r3, r0
 8004790:	75fb      	strb	r3, [r7, #23]

        // Debug: print response
        if (SIMCOM_DEBUG) {
            char *FTPGET = "AT+FTPGET=2";
 8004792:	4b12      	ldr	r3, [pc, #72]	; (80047dc <Simcom_Command+0xd0>)
 8004794:	613b      	str	r3, [r7, #16]
            if (strncmp(data, FTPGET, strlen(FTPGET)) != 0) {
 8004796:	6938      	ldr	r0, [r7, #16]
 8004798:	f7fb fd4c 	bl	8000234 <strlen>
 800479c:	4603      	mov	r3, r0
 800479e:	461a      	mov	r2, r3
 80047a0:	6939      	ldr	r1, [r7, #16]
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f005 f980 	bl	8009aa8 <strncmp>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d006      	beq.n	80047bc <Simcom_Command+0xb0>
                LOG_Buf(SIMCOM_UART_RX, sizeof(SIMCOM_UART_RX));
 80047ae:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80047b2:	480b      	ldr	r0, [pc, #44]	; (80047e0 <Simcom_Command+0xd4>)
 80047b4:	f7ff f913 	bl	80039de <LOG_Buf>
                LOG_Enter();
 80047b8:	f7ff f85a 	bl	8003870 <LOG_Enter>
            }
        }

        Simcom_Unlock();
 80047bc:	f7ff fd05 	bl	80041ca <Simcom_Unlock>
    }

    return p;
 80047c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3718      	adds	r7, #24
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	0800a9d0 	.word	0x0800a9d0
 80047d0:	20000008 	.word	0x20000008
 80047d4:	0800a9d4 	.word	0x0800a9d4
 80047d8:	0800a9d8 	.word	0x0800a9d8
 80047dc:	0800a9e0 	.word	0x0800a9e0
 80047e0:	20000634 	.word	0x20000634

080047e4 <Simcom_IdleJob>:

SIMCOM_RESULT Simcom_IdleJob(uint8_t *iteration) {
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 80047ec:	2300      	movs	r3, #0
 80047ee:	73fb      	strb	r3, [r7, #15]
    at_csq_t signal;

    // debug
    if (iteration != NULL) {
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00d      	beq.n	8004812 <Simcom_IdleJob+0x2e>
        LOG_Str("Simcom:Iteration = ");
 80047f6:	4811      	ldr	r0, [pc, #68]	; (800483c <Simcom_IdleJob+0x58>)
 80047f8:	f7ff f8be 	bl	8003978 <LOG_Str>
        LOG_Int((*iteration)++);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	1c5a      	adds	r2, r3, #1
 8004802:	b2d1      	uxtb	r1, r2
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	7011      	strb	r1, [r2, #0]
 8004808:	4618      	mov	r0, r3
 800480a:	f7ff f83d 	bl	8003888 <LOG_Int>
        LOG_Enter();
 800480e:	f7ff f82f 	bl	8003870 <LOG_Enter>
    }

    // other routines
    p = AT_SignalQualityReport(&signal);
 8004812:	f107 030c 	add.w	r3, r7, #12
 8004816:	4618      	mov	r0, r3
 8004818:	f7fd feaa 	bl	8002570 <AT_SignalQualityReport>
 800481c:	4603      	mov	r3, r0
 800481e:	73fb      	strb	r3, [r7, #15]
    if (p > 0) {
 8004820:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004824:	2b00      	cmp	r3, #0
 8004826:	dd02      	ble.n	800482e <Simcom_IdleJob+0x4a>
        SIM.signal = signal.percent;
 8004828:	7bba      	ldrb	r2, [r7, #14]
 800482a:	4b05      	ldr	r3, [pc, #20]	; (8004840 <Simcom_IdleJob+0x5c>)
 800482c:	741a      	strb	r2, [r3, #16]
    }

    return p;
 800482e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004832:	4618      	mov	r0, r3
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	0800a9ec 	.word	0x0800a9ec
 8004840:	20000008 	.word	0x20000008

08004844 <Simcom_Ready>:

static SIMCOM_RESULT Simcom_Ready(void) {
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
    uint32_t tick;

    // wait until 1s response
    tick = _GetTickMS();
 800484a:	f000 f91f 	bl	8004a8c <_GetTickMS>
 800484e:	6078      	str	r0, [r7, #4]
    while (SIM.state == SIM_STATE_DOWN) {
 8004850:	e016      	b.n	8004880 <Simcom_Ready+0x3c>
        if (Simcom_Response(SIMCOM_RSP_READY)
 8004852:	4814      	ldr	r0, [pc, #80]	; (80048a4 <Simcom_Ready+0x60>)
 8004854:	f7ff fcc0 	bl	80041d8 <Simcom_Response>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d116      	bne.n	800488c <Simcom_Ready+0x48>
                || Simcom_Response(SIMCOM_RSP_OK)
 800485e:	4812      	ldr	r0, [pc, #72]	; (80048a8 <Simcom_Ready+0x64>)
 8004860:	f7ff fcba 	bl	80041d8 <Simcom_Response>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d110      	bne.n	800488c <Simcom_Ready+0x48>
                || (_GetTickMS() - tick) >= NET_BOOT_TIMEOUT) {
 800486a:	f000 f90f 	bl	8004a8c <_GetTickMS>
 800486e:	4602      	mov	r2, r0
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8004878:	d208      	bcs.n	800488c <Simcom_Ready+0x48>
            break;
        }
        _DelayMS(1);
 800487a:	2001      	movs	r0, #1
 800487c:	f000 f8fb 	bl	8004a76 <_DelayMS>
    while (SIM.state == SIM_STATE_DOWN) {
 8004880:	4b0a      	ldr	r3, [pc, #40]	; (80048ac <Simcom_Ready+0x68>)
 8004882:	f993 3000 	ldrsb.w	r3, [r3]
 8004886:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800488a:	d0e2      	beq.n	8004852 <Simcom_Ready+0xe>
    }

    // check
    return Simcom_Command(SIMCOM_CMD_BOOT, SIMCOM_RSP_READY, 1000, 0);
 800488c:	2300      	movs	r3, #0
 800488e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004892:	4904      	ldr	r1, [pc, #16]	; (80048a4 <Simcom_Ready+0x60>)
 8004894:	4806      	ldr	r0, [pc, #24]	; (80048b0 <Simcom_Ready+0x6c>)
 8004896:	f7ff ff39 	bl	800470c <Simcom_Command>
 800489a:	4603      	mov	r3, r0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3708      	adds	r7, #8
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	0800aa00 	.word	0x0800aa00
 80048a8:	0800a9d0 	.word	0x0800a9d0
 80048ac:	20000008 	.word	0x20000008
 80048b0:	0800a9d4 	.word	0x0800a9d4

080048b4 <Simcom_Power>:

static SIMCOM_RESULT Simcom_Power(void) {
 80048b4:	b580      	push	{r7, lr}
 80048b6:	af00      	add	r7, sp, #0
    LOG_StrLn("Simcom:Powered");
 80048b8:	4814      	ldr	r0, [pc, #80]	; (800490c <Simcom_Power+0x58>)
 80048ba:	f7ff f875 	bl	80039a8 <LOG_StrLn>
    // reset buffer
    SIMCOM_Reset_Buffer();
 80048be:	f7fd fc75 	bl	80021ac <SIMCOM_Reset_Buffer>

    // power control
    HAL_GPIO_WritePin(INT_NET_PWR_GPIO_Port, INT_NET_PWR_Pin, 0);
 80048c2:	2200      	movs	r2, #0
 80048c4:	2101      	movs	r1, #1
 80048c6:	4812      	ldr	r0, [pc, #72]	; (8004910 <Simcom_Power+0x5c>)
 80048c8:	f002 f9c2 	bl	8006c50 <HAL_GPIO_WritePin>
    _DelayMS(100);
 80048cc:	2064      	movs	r0, #100	; 0x64
 80048ce:	f000 f8d2 	bl	8004a76 <_DelayMS>
    HAL_GPIO_WritePin(INT_NET_PWR_GPIO_Port, INT_NET_PWR_Pin, 1);
 80048d2:	2201      	movs	r2, #1
 80048d4:	2101      	movs	r1, #1
 80048d6:	480e      	ldr	r0, [pc, #56]	; (8004910 <Simcom_Power+0x5c>)
 80048d8:	f002 f9ba 	bl	8006c50 <HAL_GPIO_WritePin>
    _DelayMS(1000);
 80048dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048e0:	f000 f8c9 	bl	8004a76 <_DelayMS>

    // simcom reset pin
    HAL_GPIO_WritePin(INT_NET_RST_GPIO_Port, INT_NET_RST_Pin, 1);
 80048e4:	2201      	movs	r2, #1
 80048e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80048ea:	480a      	ldr	r0, [pc, #40]	; (8004914 <Simcom_Power+0x60>)
 80048ec:	f002 f9b0 	bl	8006c50 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80048f0:	200a      	movs	r0, #10
 80048f2:	f000 feb1 	bl	8005658 <HAL_Delay>
    HAL_GPIO_WritePin(INT_NET_RST_GPIO_Port, INT_NET_RST_Pin, 0);
 80048f6:	2200      	movs	r2, #0
 80048f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80048fc:	4805      	ldr	r0, [pc, #20]	; (8004914 <Simcom_Power+0x60>)
 80048fe:	f002 f9a7 	bl	8006c50 <HAL_GPIO_WritePin>

    // wait response
    return Simcom_Ready();
 8004902:	f7ff ff9f 	bl	8004844 <Simcom_Ready>
 8004906:	4603      	mov	r3, r0
}
 8004908:	4618      	mov	r0, r3
 800490a:	bd80      	pop	{r7, pc}
 800490c:	0800aa04 	.word	0x0800aa04
 8004910:	40020800 	.word	0x40020800
 8004914:	40020400 	.word	0x40020400

08004918 <Simcom_Sleep>:

static void Simcom_Sleep(uint8_t state) {
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	4603      	mov	r3, r0
 8004920:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(INT_NET_DTR_GPIO_Port, INT_NET_DTR_Pin, state);
 8004922:	79fb      	ldrb	r3, [r7, #7]
 8004924:	461a      	mov	r2, r3
 8004926:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800492a:	4805      	ldr	r0, [pc, #20]	; (8004940 <Simcom_Sleep+0x28>)
 800492c:	f002 f990 	bl	8006c50 <HAL_GPIO_WritePin>
    _DelayMS(50);
 8004930:	2032      	movs	r0, #50	; 0x32
 8004932:	f000 f8a0 	bl	8004a76 <_DelayMS>
}
 8004936:	bf00      	nop
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	40020400 	.word	0x40020400

08004944 <Simcom_Execute>:

static SIMCOM_RESULT Simcom_Execute(char *data, uint16_t size, uint32_t ms, char *res) {
 8004944:	b580      	push	{r7, lr}
 8004946:	b088      	sub	sp, #32
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	607a      	str	r2, [r7, #4]
 800494e:	603b      	str	r3, [r7, #0]
 8004950:	460b      	mov	r3, r1
 8004952:	817b      	strh	r3, [r7, #10]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 8004954:	2300      	movs	r3, #0
 8004956:	77fb      	strb	r3, [r7, #31]
    uint32_t tick, timeout_tick = 0;
 8004958:	2300      	movs	r3, #0
 800495a:	61bb      	str	r3, [r7, #24]

    Simcom_Lock();
 800495c:	f7ff fc2e 	bl	80041bc <Simcom_Lock>
    // wake-up the SIMCOM
    Simcom_Sleep(0);
 8004960:	2000      	movs	r0, #0
 8004962:	f7ff ffd9 	bl	8004918 <Simcom_Sleep>

    // transmit to serial (low-level)
    Simcom_BeforeTransmitHook();
 8004966:	f000 f87f 	bl	8004a68 <Simcom_BeforeTransmitHook>
    SIMCOM_Transmit(data, size);
 800496a:	897b      	ldrh	r3, [r7, #10]
 800496c:	4619      	mov	r1, r3
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f7fd fc2e 	bl	80021d0 <SIMCOM_Transmit>

    // convert time to tick
    timeout_tick = (ms + NET_EXTRA_TIME);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800497a:	61bb      	str	r3, [r7, #24]
    // set timeout guard
    tick = _GetTickMS();
 800497c:	f000 f886 	bl	8004a8c <_GetTickMS>
 8004980:	6178      	str	r0, [r7, #20]

    // wait response from SIMCOM
    while (1) {
        if (Simcom_Response(res)
 8004982:	6838      	ldr	r0, [r7, #0]
 8004984:	f7ff fc28 	bl	80041d8 <Simcom_Response>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d113      	bne.n	80049b6 <Simcom_Execute+0x72>
                || Simcom_Response(SIMCOM_RSP_ERROR)
 800498e:	482f      	ldr	r0, [pc, #188]	; (8004a4c <Simcom_Execute+0x108>)
 8004990:	f7ff fc22 	bl	80041d8 <Simcom_Response>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10d      	bne.n	80049b6 <Simcom_Execute+0x72>
                || Simcom_Response(SIMCOM_RSP_READY)
 800499a:	482d      	ldr	r0, [pc, #180]	; (8004a50 <Simcom_Execute+0x10c>)
 800499c:	f7ff fc1c 	bl	80041d8 <Simcom_Response>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d107      	bne.n	80049b6 <Simcom_Execute+0x72>
                || (_GetTickMS() - tick) >= timeout_tick) {
 80049a6:	f000 f871 	bl	8004a8c <_GetTickMS>
 80049aa:	4602      	mov	r2, r0
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d83a      	bhi.n	8004a2c <Simcom_Execute+0xe8>

            // check response
            if (Simcom_Response(res)) {
 80049b6:	6838      	ldr	r0, [r7, #0]
 80049b8:	f7ff fc0e 	bl	80041d8 <Simcom_Response>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <Simcom_Execute+0x82>
                p = SIM_RESULT_OK;
 80049c2:	2301      	movs	r3, #1
 80049c4:	77fb      	strb	r3, [r7, #31]
            }

            // Handle failure
            if (p != SIM_RESULT_OK) {
 80049c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d032      	beq.n	8004a34 <Simcom_Execute+0xf0>
                if (strlen(SIMCOM_UART_RX) == 0) {
 80049ce:	4b21      	ldr	r3, [pc, #132]	; (8004a54 <Simcom_Execute+0x110>)
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d108      	bne.n	80049e8 <Simcom_Execute+0xa4>
                    // exception for no response
                    p = SIM_RESULT_NO_RESPONSE;
 80049d6:	23fe      	movs	r3, #254	; 0xfe
 80049d8:	77fb      	strb	r3, [r7, #31]
                    SIM.state = SIM_STATE_DOWN;
 80049da:	4b1f      	ldr	r3, [pc, #124]	; (8004a58 <Simcom_Execute+0x114>)
 80049dc:	22ff      	movs	r2, #255	; 0xff
 80049de:	701a      	strb	r2, [r3, #0]
                    LOG_StrLn("Simcom:NoResponse");
 80049e0:	481e      	ldr	r0, [pc, #120]	; (8004a5c <Simcom_Execute+0x118>)
 80049e2:	f7fe ffe1 	bl	80039a8 <LOG_StrLn>
                    }
                }
            }

            // exit loop
            break;
 80049e6:	e025      	b.n	8004a34 <Simcom_Execute+0xf0>
                    if (Simcom_Response(SIMCOM_RSP_READY) && (SIM.state >= SIM_STATE_READY)) {
 80049e8:	4819      	ldr	r0, [pc, #100]	; (8004a50 <Simcom_Execute+0x10c>)
 80049ea:	f7ff fbf5 	bl	80041d8 <Simcom_Response>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00d      	beq.n	8004a10 <Simcom_Execute+0xcc>
 80049f4:	4b18      	ldr	r3, [pc, #96]	; (8004a58 <Simcom_Execute+0x114>)
 80049f6:	f993 3000 	ldrsb.w	r3, [r3]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	db08      	blt.n	8004a10 <Simcom_Execute+0xcc>
                        p = SIM_RESULT_RESTARTED;
 80049fe:	23fd      	movs	r3, #253	; 0xfd
 8004a00:	77fb      	strb	r3, [r7, #31]
                        SIM.state = SIM_STATE_READY;
 8004a02:	4b15      	ldr	r3, [pc, #84]	; (8004a58 <Simcom_Execute+0x114>)
 8004a04:	2200      	movs	r2, #0
 8004a06:	701a      	strb	r2, [r3, #0]
                        LOG_StrLn("Simcom:Restarted");
 8004a08:	4815      	ldr	r0, [pc, #84]	; (8004a60 <Simcom_Execute+0x11c>)
 8004a0a:	f7fe ffcd 	bl	80039a8 <LOG_StrLn>
            break;
 8004a0e:	e011      	b.n	8004a34 <Simcom_Execute+0xf0>
                    } else if ((_GetTickMS() - tick) >= timeout_tick) {
 8004a10:	f000 f83c 	bl	8004a8c <_GetTickMS>
 8004a14:	4602      	mov	r2, r0
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	69ba      	ldr	r2, [r7, #24]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d809      	bhi.n	8004a34 <Simcom_Execute+0xf0>
                        p = SIM_RESULT_TIMEOUT;
 8004a20:	23ff      	movs	r3, #255	; 0xff
 8004a22:	77fb      	strb	r3, [r7, #31]
                        LOG_StrLn("Simcom:Timeout");
 8004a24:	480f      	ldr	r0, [pc, #60]	; (8004a64 <Simcom_Execute+0x120>)
 8004a26:	f7fe ffbf 	bl	80039a8 <LOG_StrLn>
            break;
 8004a2a:	e003      	b.n	8004a34 <Simcom_Execute+0xf0>
        }
        _DelayMS(10);
 8004a2c:	200a      	movs	r0, #10
 8004a2e:	f000 f822 	bl	8004a76 <_DelayMS>
        if (Simcom_Response(res)
 8004a32:	e7a6      	b.n	8004982 <Simcom_Execute+0x3e>
            break;
 8004a34:	bf00      	nop
    }

    // sleep the SIMCOM
    Simcom_Sleep(1);
 8004a36:	2001      	movs	r0, #1
 8004a38:	f7ff ff6e 	bl	8004918 <Simcom_Sleep>
    Simcom_Unlock();
 8004a3c:	f7ff fbc5 	bl	80041ca <Simcom_Unlock>
    return p;
 8004a40:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3720      	adds	r7, #32
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	0800aa14 	.word	0x0800aa14
 8004a50:	0800aa00 	.word	0x0800aa00
 8004a54:	20000634 	.word	0x20000634
 8004a58:	20000008 	.word	0x20000008
 8004a5c:	0800aa1c 	.word	0x0800aa1c
 8004a60:	0800aa30 	.word	0x0800aa30
 8004a64:	0800aa44 	.word	0x0800aa44

08004a68 <Simcom_BeforeTransmitHook>:

static void Simcom_BeforeTransmitHook(void) {
 8004a68:	b480      	push	{r7}
 8004a6a:	af00      	add	r7, sp, #0
    // handle things on every request
    //	LOG_StrLn("============ SIMCOM DEBUG ============");
    //	LOG_Buf(SIMCOM_UART_RX, strlen(SIMCOM_UART_RX));
    //	LOG_Enter();
    //	LOG_StrLn("======================================");
}
 8004a6c:	bf00      	nop
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <_DelayMS>:

/* Includes ------------------------------------------------------------------*/
#include "Libs/_utils.h"

/* Public functions implementation --------------------------------------------*/
void _DelayMS(uint32_t ms) {
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b082      	sub	sp, #8
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
#if RTOS_ENABLE
    osDelay(ms);
#else
    HAL_Delay(ms);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 fdea 	bl	8005658 <HAL_Delay>
#endif
}
 8004a84:	bf00      	nop
 8004a86:	3708      	adds	r7, #8
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <_GetTickMS>:

uint32_t _GetTickMS(void) {
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	af00      	add	r7, sp, #0
#if RTOS_ENABLE
    return osKernelGetTickCount();
#else
    return HAL_GetTick();
 8004a90:	f000 fdd6 	bl	8005640 <HAL_GetTick>
 8004a94:	4603      	mov	r3, r0
#endif
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	bd80      	pop	{r7, pc}
	...

08004a9c <_LedWrite>:

uint8_t _LedRead(void) {
    return HAL_GPIO_ReadPin(SYS_LED_GPIO_Port, SYS_LED_Pin);
}

void _LedWrite(uint8_t state) {
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SYS_LED_GPIO_Port, SYS_LED_Pin, state);
 8004aa6:	79fb      	ldrb	r3, [r7, #7]
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004aae:	4803      	ldr	r0, [pc, #12]	; (8004abc <_LedWrite+0x20>)
 8004ab0:	f002 f8ce 	bl	8006c50 <HAL_GPIO_WritePin>
}
 8004ab4:	bf00      	nop
 8004ab6:	3708      	adds	r7, #8
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	40020c00 	.word	0x40020c00

08004ac0 <_LedToggle>:

void _LedToggle(void) {
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(SYS_LED_GPIO_Port, SYS_LED_Pin);
 8004ac4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ac8:	4802      	ldr	r0, [pc, #8]	; (8004ad4 <_LedToggle+0x14>)
 8004aca:	f002 f8da 	bl	8006c82 <HAL_GPIO_TogglePin>
}
 8004ace:	bf00      	nop
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	40020c00 	.word	0x40020c00

08004ad8 <_Error>:

void _Error(char msg[50]) {
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
#if RTOS_ENABLE
    if (osKernelGetState() == osKernelRunning) {
        LOG_StrLn(msg);
    }
#else
    LOG_StrLn(msg);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f7fe ff61 	bl	80039a8 <LOG_StrLn>
#endif

    // indicator error
    while (1) {
        _LedToggle();
 8004ae6:	f7ff ffeb 	bl	8004ac0 <_LedToggle>
        HAL_Delay(50);
 8004aea:	2032      	movs	r0, #50	; 0x32
 8004aec:	f000 fdb4 	bl	8005658 <HAL_Delay>
        _LedToggle();
 8004af0:	e7f9      	b.n	8004ae6 <_Error+0xe>

08004af2 <_ByteSwap32>:
    }

    return pos;
}

uint32_t _ByteSwap32(uint32_t x) {
 8004af2:	b480      	push	{r7}
 8004af4:	b085      	sub	sp, #20
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
    uint32_t y = (x >> 24) & 0xff;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	0e1b      	lsrs	r3, r3, #24
 8004afe:	60fb      	str	r3, [r7, #12]
    y |= ((x >> 16) & 0xff) << 8;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	0c1b      	lsrs	r3, r3, #16
 8004b04:	021b      	lsls	r3, r3, #8
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]
    y |= ((x >> 8) & 0xff) << 16;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	0a1b      	lsrs	r3, r3, #8
 8004b12:	041b      	lsls	r3, r3, #16
 8004b14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	60fb      	str	r3, [r7, #12]
    y |= (x & 0xff) << 24;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	061b      	lsls	r3, r3, #24
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	60fb      	str	r3, [r7, #12]

    return y;
 8004b28:	68fb      	ldr	r3, [r7, #12]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
	...

08004b38 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8004b3e:	f000 fce5 	bl	800550c <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8004b42:	f000 f8a1 	bl	8004c88 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8004b46:	f000 f9a7 	bl	8004e98 <MX_GPIO_Init>
    MX_DMA_Init();
 8004b4a:	f000 f985 	bl	8004e58 <MX_DMA_Init>
    MX_CRC_Init();
 8004b4e:	f000 f905 	bl	8004d5c <MX_CRC_Init>
    MX_I2C2_Init();
 8004b52:	f000 f917 	bl	8004d84 <MX_I2C2_Init>
    MX_USART1_UART_Init();
 8004b56:	f000 f955 	bl	8004e04 <MX_USART1_UART_Init>
    /* USER CODE BEGIN 2 */
    SIMCOM_DMA_Init();
 8004b5a:	f7fd fa9b 	bl	8002094 <SIMCOM_DMA_Init>
    EEPROM_Init();
 8004b5e:	f7fe ff9b 	bl	8003a98 <EEPROM_Init>
    /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    /* Read flag state from non-volatile memory */
    EEPROM_FlagDFU(EE_CMD_R, EE_NULL);
 8004b62:	2100      	movs	r1, #0
 8004b64:	2000      	movs	r0, #0
 8004b66:	f7fe ffed 	bl	8003b44 <EEPROM_FlagDFU>
    _LedWrite(1);
 8004b6a:	2001      	movs	r0, #1
 8004b6c:	f7ff ff96 	bl	8004a9c <_LedWrite>

    /* IAP flag has been set, initiate firmware download procedure */
    if (*(uint32_t*) IAP_FLAG_ADDR == IAP_FLAG) {
 8004b70:	4b3a      	ldr	r3, [pc, #232]	; (8004c5c <main+0x124>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a3a      	ldr	r2, [pc, #232]	; (8004c60 <main+0x128>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d11f      	bne.n	8004bba <main+0x82>
        LOG_StrLn("IAP set, do FOTA.");
 8004b7a:	483a      	ldr	r0, [pc, #232]	; (8004c64 <main+0x12c>)
 8004b7c:	f7fe ff14 	bl	80039a8 <LOG_StrLn>
        ret = Simcom_FOTA();
 8004b80:	f7ff fd10 	bl	80045a4 <Simcom_FOTA>
 8004b84:	4603      	mov	r3, r0
 8004b86:	71fb      	strb	r3, [r7, #7]
        /* Everything went well, reset IAP flag & boot form new image */
        if (ret) {
 8004b88:	79fb      	ldrb	r3, [r7, #7]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d005      	beq.n	8004b9a <main+0x62>
            /* Reset IAP flag */
            *(uint32_t*) IAP_FLAG_ADDR = 0;
 8004b8e:	4b33      	ldr	r3, [pc, #204]	; (8004c5c <main+0x124>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	601a      	str	r2, [r3, #0]
            /* Take branching decision on next reboot */
            FOTA_Reboot();
 8004b94:	f7ff fa50 	bl	8004038 <FOTA_Reboot>
 8004b98:	e009      	b.n	8004bae <main+0x76>
        }
        /* DFU failed, retry until exhausted. */
        else {
            /* Decrement IAP retry until exhausted */
            if (*(uint32_t*) IAP_RETRY_ADDR) {
 8004b9a:	4b33      	ldr	r3, [pc, #204]	; (8004c68 <main+0x130>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d005      	beq.n	8004bae <main+0x76>
                (*(uint32_t*) IAP_RETRY_ADDR)--;
 8004ba2:	4b31      	ldr	r3, [pc, #196]	; (8004c68 <main+0x130>)
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	3a01      	subs	r2, #1
 8004ba8:	601a      	str	r2, [r3, #0]
                HAL_NVIC_SystemReset();
 8004baa:	f000 fec0 	bl	800592e <HAL_NVIC_SystemReset>
            }
        }
        /* IAP flag is still set, and we ran out of retries */
        /* Reset IAP flag */
        *(uint32_t*) IAP_FLAG_ADDR = 0;
 8004bae:	4b2b      	ldr	r3, [pc, #172]	; (8004c5c <main+0x124>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	601a      	str	r2, [r3, #0]
        HAL_NVIC_SystemReset();
 8004bb4:	f000 febb 	bl	800592e <HAL_NVIC_SystemReset>
 8004bb8:	e04a      	b.n	8004c50 <main+0x118>
    }
    /* Jump to application if it exist and DFU finished */
    else if (FOTA_ValidImage(APP_START_ADDR) && !FOTA_InProgressDFU()) {
 8004bba:	482c      	ldr	r0, [pc, #176]	; (8004c6c <main+0x134>)
 8004bbc:	f7ff fa48 	bl	8004050 <FOTA_ValidImage>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00a      	beq.n	8004bdc <main+0xa4>
 8004bc6:	f7ff faaf 	bl	8004128 <FOTA_InProgressDFU>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d105      	bne.n	8004bdc <main+0xa4>
        LOG_StrLn("Jump to application.");
 8004bd0:	4827      	ldr	r0, [pc, #156]	; (8004c70 <main+0x138>)
 8004bd2:	f7fe fee9 	bl	80039a8 <LOG_StrLn>
        /* Jump sequence */
        FOTA_JumpToApplication();
 8004bd6:	f7ff fabb 	bl	8004150 <FOTA_JumpToApplication>
 8004bda:	e039      	b.n	8004c50 <main+0x118>
    }
    /* Power reset during DFU, try once more */
    else if (FOTA_InProgressDFU()) {
 8004bdc:	f7ff faa4 	bl	8004128 <FOTA_InProgressDFU>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d014      	beq.n	8004c10 <main+0xd8>
        LOG_StrLn("DFU set, do FOTA once more.");
 8004be6:	4823      	ldr	r0, [pc, #140]	; (8004c74 <main+0x13c>)
 8004be8:	f7fe fede 	bl	80039a8 <LOG_StrLn>
        ret = Simcom_FOTA();
 8004bec:	f7ff fcda 	bl	80045a4 <Simcom_FOTA>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	71fb      	strb	r3, [r7, #7]
        /* Everything went well, boot form new image */
        if (ret) {
 8004bf4:	79fb      	ldrb	r3, [r7, #7]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <main+0xc6>
            /* Take branching decision on next reboot */
            FOTA_Reboot();
 8004bfa:	f7ff fa1d 	bl	8004038 <FOTA_Reboot>
        }
        /* Erase partially programmed application area */
        FLASHER_EraseAppArea();
 8004bfe:	f7fe fd8b 	bl	8003718 <FLASHER_EraseAppArea>
        /* Reset DFU flag */
        EEPROM_FlagDFU(EE_CMD_W, 0);
 8004c02:	2100      	movs	r1, #0
 8004c04:	2001      	movs	r0, #1
 8004c06:	f7fe ff9d 	bl	8003b44 <EEPROM_FlagDFU>
        HAL_NVIC_SystemReset();
 8004c0a:	f000 fe90 	bl	800592e <HAL_NVIC_SystemReset>
 8004c0e:	e01f      	b.n	8004c50 <main+0x118>
    }
    /* Try to restore the backup */
    else {
        /* Check is the backup image valid */
        if (FOTA_ValidImage(BKP_START_ADDR)) {
 8004c10:	4819      	ldr	r0, [pc, #100]	; (8004c78 <main+0x140>)
 8004c12:	f7ff fa1d 	bl	8004050 <FOTA_ValidImage>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00a      	beq.n	8004c32 <main+0xfa>
            LOG_StrLn("Has backed-up image, rollback.");
 8004c1c:	4817      	ldr	r0, [pc, #92]	; (8004c7c <main+0x144>)
 8004c1e:	f7fe fec3 	bl	80039a8 <LOG_StrLn>
            /* Restore back old image to application area */
            if (FLASHER_RestoreApp()) {
 8004c22:	f7fe fde9 	bl	80037f8 <FLASHER_RestoreApp>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00e      	beq.n	8004c4a <main+0x112>
                /* Take branching decision on next reboot */
                FOTA_Reboot();
 8004c2c:	f7ff fa04 	bl	8004038 <FOTA_Reboot>
 8004c30:	e00b      	b.n	8004c4a <main+0x112>
            }
        } else {
            LOG_StrLn("No image at all, do FOTA.");
 8004c32:	4813      	ldr	r0, [pc, #76]	; (8004c80 <main+0x148>)
 8004c34:	f7fe feb8 	bl	80039a8 <LOG_StrLn>
            /* Download new firmware for the first time */
            ret = Simcom_FOTA();
 8004c38:	f7ff fcb4 	bl	80045a4 <Simcom_FOTA>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	71fb      	strb	r3, [r7, #7]
            /* Everything went well, boot form new image */
            if (ret) {
 8004c40:	79fb      	ldrb	r3, [r7, #7]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <main+0x112>
                /* Take branching decision on next reboot */
                FOTA_Reboot();
 8004c46:	f7ff f9f7 	bl	8004038 <FOTA_Reboot>
            }
        }
        /* Failure indicator */
        _Error("Boot-loader failure!!");
 8004c4a:	480e      	ldr	r0, [pc, #56]	; (8004c84 <main+0x14c>)
 8004c4c:	f7ff ff44 	bl	8004ad8 <_Error>
 8004c50:	2300      	movs	r3, #0
    }
    /* USER CODE END 3 */
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3708      	adds	r7, #8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	2004fffc 	.word	0x2004fffc
 8004c60:	aabbccdd 	.word	0xaabbccdd
 8004c64:	0800aa54 	.word	0x0800aa54
 8004c68:	2004fff8 	.word	0x2004fff8
 8004c6c:	08020000 	.word	0x08020000
 8004c70:	0800aa68 	.word	0x0800aa68
 8004c74:	0800aa80 	.word	0x0800aa80
 8004c78:	080a0000 	.word	0x080a0000
 8004c7c:	0800aa9c 	.word	0x0800aa9c
 8004c80:	0800aabc 	.word	0x0800aabc
 8004c84:	0800aad8 	.word	0x0800aad8

08004c88 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b094      	sub	sp, #80	; 0x50
 8004c8c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8004c8e:	f107 031c 	add.w	r3, r7, #28
 8004c92:	2234      	movs	r2, #52	; 0x34
 8004c94:	2100      	movs	r1, #0
 8004c96:	4618      	mov	r0, r3
 8004c98:	f004 fede 	bl	8009a58 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004c9c:	f107 0308 	add.w	r3, r7, #8
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	605a      	str	r2, [r3, #4]
 8004ca6:	609a      	str	r2, [r3, #8]
 8004ca8:	60da      	str	r2, [r3, #12]
 8004caa:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cac:	2300      	movs	r3, #0
 8004cae:	607b      	str	r3, [r7, #4]
 8004cb0:	4b28      	ldr	r3, [pc, #160]	; (8004d54 <SystemClock_Config+0xcc>)
 8004cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb4:	4a27      	ldr	r2, [pc, #156]	; (8004d54 <SystemClock_Config+0xcc>)
 8004cb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cba:	6413      	str	r3, [r2, #64]	; 0x40
 8004cbc:	4b25      	ldr	r3, [pc, #148]	; (8004d54 <SystemClock_Config+0xcc>)
 8004cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cc4:	607b      	str	r3, [r7, #4]
 8004cc6:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004cc8:	2300      	movs	r3, #0
 8004cca:	603b      	str	r3, [r7, #0]
 8004ccc:	4b22      	ldr	r3, [pc, #136]	; (8004d58 <SystemClock_Config+0xd0>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a21      	ldr	r2, [pc, #132]	; (8004d58 <SystemClock_Config+0xd0>)
 8004cd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cd6:	6013      	str	r3, [r2, #0]
 8004cd8:	4b1f      	ldr	r3, [pc, #124]	; (8004d58 <SystemClock_Config+0xd0>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004ce0:	603b      	str	r3, [r7, #0]
 8004ce2:	683b      	ldr	r3, [r7, #0]
    /** Initializes the CPU, AHB and APB busses clocks
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004ce8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004cec:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004cee:	2302      	movs	r3, #2
 8004cf0:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004cf2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004cf6:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLM = 4;
 8004cf8:	2304      	movs	r3, #4
 8004cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLN = 100;
 8004cfc:	2364      	movs	r3, #100	; 0x64
 8004cfe:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004d00:	2302      	movs	r3, #2
 8004d02:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLQ = 2;
 8004d04:	2302      	movs	r3, #2
 8004d06:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLR = 2;
 8004d08:	2302      	movs	r3, #2
 8004d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004d0c:	f107 031c 	add.w	r3, r7, #28
 8004d10:	4618      	mov	r0, r3
 8004d12:	f003 fbe7 	bl	80084e4 <HAL_RCC_OscConfig>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d001      	beq.n	8004d20 <SystemClock_Config+0x98>
            {
        Error_Handler();
 8004d1c:	f000 f9b6 	bl	800508c <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB busses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004d20:	230f      	movs	r3, #15
 8004d22:	60bb      	str	r3, [r7, #8]
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004d24:	2302      	movs	r3, #2
 8004d26:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004d2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d30:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004d32:	2300      	movs	r3, #0
 8004d34:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004d36:	f107 0308 	add.w	r3, r7, #8
 8004d3a:	2103      	movs	r1, #3
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f003 f913 	bl	8007f68 <HAL_RCC_ClockConfig>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <SystemClock_Config+0xc4>
            {
        Error_Handler();
 8004d48:	f000 f9a0 	bl	800508c <Error_Handler>
    }
}
 8004d4c:	bf00      	nop
 8004d4e:	3750      	adds	r7, #80	; 0x50
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	40023800 	.word	0x40023800
 8004d58:	40007000 	.word	0x40007000

08004d5c <MX_CRC_Init>:
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	af00      	add	r7, sp, #0
    /* USER CODE END CRC_Init 0 */

    /* USER CODE BEGIN CRC_Init 1 */

    /* USER CODE END CRC_Init 1 */
    hcrc.Instance = CRC;
 8004d60:	4b06      	ldr	r3, [pc, #24]	; (8004d7c <MX_CRC_Init+0x20>)
 8004d62:	4a07      	ldr	r2, [pc, #28]	; (8004d80 <MX_CRC_Init+0x24>)
 8004d64:	601a      	str	r2, [r3, #0]
    if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8004d66:	4805      	ldr	r0, [pc, #20]	; (8004d7c <MX_CRC_Init+0x20>)
 8004d68:	f000 fdf1 	bl	800594e <HAL_CRC_Init>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <MX_CRC_Init+0x1a>
            {
        Error_Handler();
 8004d72:	f000 f98b 	bl	800508c <Error_Handler>
    }
    /* USER CODE BEGIN CRC_Init 2 */

    /* USER CODE END CRC_Init 2 */

}
 8004d76:	bf00      	nop
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	20000c34 	.word	0x20000c34
 8004d80:	40023000 	.word	0x40023000

08004d84 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	af00      	add	r7, sp, #0
    /* USER CODE END I2C2_Init 0 */

    /* USER CODE BEGIN I2C2_Init 1 */

    /* USER CODE END I2C2_Init 1 */
    hi2c2.Instance = I2C2;
 8004d88:	4b1b      	ldr	r3, [pc, #108]	; (8004df8 <MX_I2C2_Init+0x74>)
 8004d8a:	4a1c      	ldr	r2, [pc, #112]	; (8004dfc <MX_I2C2_Init+0x78>)
 8004d8c:	601a      	str	r2, [r3, #0]
    hi2c2.Init.ClockSpeed = 100000;
 8004d8e:	4b1a      	ldr	r3, [pc, #104]	; (8004df8 <MX_I2C2_Init+0x74>)
 8004d90:	4a1b      	ldr	r2, [pc, #108]	; (8004e00 <MX_I2C2_Init+0x7c>)
 8004d92:	605a      	str	r2, [r3, #4]
    hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004d94:	4b18      	ldr	r3, [pc, #96]	; (8004df8 <MX_I2C2_Init+0x74>)
 8004d96:	2200      	movs	r2, #0
 8004d98:	609a      	str	r2, [r3, #8]
    hi2c2.Init.OwnAddress1 = 0;
 8004d9a:	4b17      	ldr	r3, [pc, #92]	; (8004df8 <MX_I2C2_Init+0x74>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	60da      	str	r2, [r3, #12]
    hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004da0:	4b15      	ldr	r3, [pc, #84]	; (8004df8 <MX_I2C2_Init+0x74>)
 8004da2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004da6:	611a      	str	r2, [r3, #16]
    hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004da8:	4b13      	ldr	r3, [pc, #76]	; (8004df8 <MX_I2C2_Init+0x74>)
 8004daa:	2200      	movs	r2, #0
 8004dac:	615a      	str	r2, [r3, #20]
    hi2c2.Init.OwnAddress2 = 0;
 8004dae:	4b12      	ldr	r3, [pc, #72]	; (8004df8 <MX_I2C2_Init+0x74>)
 8004db0:	2200      	movs	r2, #0
 8004db2:	619a      	str	r2, [r3, #24]
    hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004db4:	4b10      	ldr	r3, [pc, #64]	; (8004df8 <MX_I2C2_Init+0x74>)
 8004db6:	2200      	movs	r2, #0
 8004db8:	61da      	str	r2, [r3, #28]
    hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004dba:	4b0f      	ldr	r3, [pc, #60]	; (8004df8 <MX_I2C2_Init+0x74>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004dc0:	480d      	ldr	r0, [pc, #52]	; (8004df8 <MX_I2C2_Init+0x74>)
 8004dc2:	f001 ff79 	bl	8006cb8 <HAL_I2C_Init>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d001      	beq.n	8004dd0 <MX_I2C2_Init+0x4c>
            {
        Error_Handler();
 8004dcc:	f000 f95e 	bl	800508c <Error_Handler>
    }
    /** Configure Analogue filter
     */
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004dd0:	2100      	movs	r1, #0
 8004dd2:	4809      	ldr	r0, [pc, #36]	; (8004df8 <MX_I2C2_Init+0x74>)
 8004dd4:	f003 f84d 	bl	8007e72 <HAL_I2CEx_ConfigAnalogFilter>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d001      	beq.n	8004de2 <MX_I2C2_Init+0x5e>
            {
        Error_Handler();
 8004dde:	f000 f955 	bl	800508c <Error_Handler>
    }
    /** Configure Digital filter
     */
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8004de2:	2100      	movs	r1, #0
 8004de4:	4804      	ldr	r0, [pc, #16]	; (8004df8 <MX_I2C2_Init+0x74>)
 8004de6:	f003 f880 	bl	8007eea <HAL_I2CEx_ConfigDigitalFilter>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d001      	beq.n	8004df4 <MX_I2C2_Init+0x70>
            {
        Error_Handler();
 8004df0:	f000 f94c 	bl	800508c <Error_Handler>
    }
    /* USER CODE BEGIN I2C2_Init 2 */

    /* USER CODE END I2C2_Init 2 */

}
 8004df4:	bf00      	nop
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	20000c3c 	.word	0x20000c3c
 8004dfc:	40005800 	.word	0x40005800
 8004e00:	000186a0 	.word	0x000186a0

08004e04 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8004e08:	4b11      	ldr	r3, [pc, #68]	; (8004e50 <MX_USART1_UART_Init+0x4c>)
 8004e0a:	4a12      	ldr	r2, [pc, #72]	; (8004e54 <MX_USART1_UART_Init+0x50>)
 8004e0c:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8004e0e:	4b10      	ldr	r3, [pc, #64]	; (8004e50 <MX_USART1_UART_Init+0x4c>)
 8004e10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004e14:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004e16:	4b0e      	ldr	r3, [pc, #56]	; (8004e50 <MX_USART1_UART_Init+0x4c>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8004e1c:	4b0c      	ldr	r3, [pc, #48]	; (8004e50 <MX_USART1_UART_Init+0x4c>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8004e22:	4b0b      	ldr	r3, [pc, #44]	; (8004e50 <MX_USART1_UART_Init+0x4c>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8004e28:	4b09      	ldr	r3, [pc, #36]	; (8004e50 <MX_USART1_UART_Init+0x4c>)
 8004e2a:	220c      	movs	r2, #12
 8004e2c:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e2e:	4b08      	ldr	r3, [pc, #32]	; (8004e50 <MX_USART1_UART_Init+0x4c>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e34:	4b06      	ldr	r3, [pc, #24]	; (8004e50 <MX_USART1_UART_Init+0x4c>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8004e3a:	4805      	ldr	r0, [pc, #20]	; (8004e50 <MX_USART1_UART_Init+0x4c>)
 8004e3c:	f003 fd94 	bl	8008968 <HAL_UART_Init>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <MX_USART1_UART_Init+0x46>
            {
        Error_Handler();
 8004e46:	f000 f921 	bl	800508c <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */

}
 8004e4a:	bf00      	nop
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	20000cf0 	.word	0x20000cf0
 8004e54:	40011000 	.word	0x40011000

08004e58 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA2_CLK_ENABLE();
 8004e5e:	2300      	movs	r3, #0
 8004e60:	607b      	str	r3, [r7, #4]
 8004e62:	4b0c      	ldr	r3, [pc, #48]	; (8004e94 <MX_DMA_Init+0x3c>)
 8004e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e66:	4a0b      	ldr	r2, [pc, #44]	; (8004e94 <MX_DMA_Init+0x3c>)
 8004e68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e6e:	4b09      	ldr	r3, [pc, #36]	; (8004e94 <MX_DMA_Init+0x3c>)
 8004e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e76:	607b      	str	r3, [r7, #4]
 8004e78:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init */
    /* DMA2_Stream2_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	203a      	movs	r0, #58	; 0x3a
 8004e80:	f000 fd1d 	bl	80058be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004e84:	203a      	movs	r0, #58	; 0x3a
 8004e86:	f000 fd36 	bl	80058f6 <HAL_NVIC_EnableIRQ>

}
 8004e8a:	bf00      	nop
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	40023800 	.word	0x40023800

08004e98 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b08c      	sub	sp, #48	; 0x30
 8004e9c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004e9e:	f107 031c 	add.w	r3, r7, #28
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]
 8004ea6:	605a      	str	r2, [r3, #4]
 8004ea8:	609a      	str	r2, [r3, #8]
 8004eaa:	60da      	str	r2, [r3, #12]
 8004eac:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004eae:	2300      	movs	r3, #0
 8004eb0:	61bb      	str	r3, [r7, #24]
 8004eb2:	4b70      	ldr	r3, [pc, #448]	; (8005074 <MX_GPIO_Init+0x1dc>)
 8004eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb6:	4a6f      	ldr	r2, [pc, #444]	; (8005074 <MX_GPIO_Init+0x1dc>)
 8004eb8:	f043 0310 	orr.w	r3, r3, #16
 8004ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8004ebe:	4b6d      	ldr	r3, [pc, #436]	; (8005074 <MX_GPIO_Init+0x1dc>)
 8004ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec2:	f003 0310 	and.w	r3, r3, #16
 8004ec6:	61bb      	str	r3, [r7, #24]
 8004ec8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004eca:	2300      	movs	r3, #0
 8004ecc:	617b      	str	r3, [r7, #20]
 8004ece:	4b69      	ldr	r3, [pc, #420]	; (8005074 <MX_GPIO_Init+0x1dc>)
 8004ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed2:	4a68      	ldr	r2, [pc, #416]	; (8005074 <MX_GPIO_Init+0x1dc>)
 8004ed4:	f043 0304 	orr.w	r3, r3, #4
 8004ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8004eda:	4b66      	ldr	r3, [pc, #408]	; (8005074 <MX_GPIO_Init+0x1dc>)
 8004edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ede:	f003 0304 	and.w	r3, r3, #4
 8004ee2:	617b      	str	r3, [r7, #20]
 8004ee4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	613b      	str	r3, [r7, #16]
 8004eea:	4b62      	ldr	r3, [pc, #392]	; (8005074 <MX_GPIO_Init+0x1dc>)
 8004eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eee:	4a61      	ldr	r2, [pc, #388]	; (8005074 <MX_GPIO_Init+0x1dc>)
 8004ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ef6:	4b5f      	ldr	r3, [pc, #380]	; (8005074 <MX_GPIO_Init+0x1dc>)
 8004ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efe:	613b      	str	r3, [r7, #16]
 8004f00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f02:	2300      	movs	r3, #0
 8004f04:	60fb      	str	r3, [r7, #12]
 8004f06:	4b5b      	ldr	r3, [pc, #364]	; (8005074 <MX_GPIO_Init+0x1dc>)
 8004f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0a:	4a5a      	ldr	r2, [pc, #360]	; (8005074 <MX_GPIO_Init+0x1dc>)
 8004f0c:	f043 0301 	orr.w	r3, r3, #1
 8004f10:	6313      	str	r3, [r2, #48]	; 0x30
 8004f12:	4b58      	ldr	r3, [pc, #352]	; (8005074 <MX_GPIO_Init+0x1dc>)
 8004f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f1e:	2300      	movs	r3, #0
 8004f20:	60bb      	str	r3, [r7, #8]
 8004f22:	4b54      	ldr	r3, [pc, #336]	; (8005074 <MX_GPIO_Init+0x1dc>)
 8004f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f26:	4a53      	ldr	r2, [pc, #332]	; (8005074 <MX_GPIO_Init+0x1dc>)
 8004f28:	f043 0302 	orr.w	r3, r3, #2
 8004f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f2e:	4b51      	ldr	r3, [pc, #324]	; (8005074 <MX_GPIO_Init+0x1dc>)
 8004f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	60bb      	str	r3, [r7, #8]
 8004f38:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	607b      	str	r3, [r7, #4]
 8004f3e:	4b4d      	ldr	r3, [pc, #308]	; (8005074 <MX_GPIO_Init+0x1dc>)
 8004f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f42:	4a4c      	ldr	r2, [pc, #304]	; (8005074 <MX_GPIO_Init+0x1dc>)
 8004f44:	f043 0308 	orr.w	r3, r3, #8
 8004f48:	6313      	str	r3, [r2, #48]	; 0x30
 8004f4a:	4b4a      	ldr	r3, [pc, #296]	; (8005074 <MX_GPIO_Init+0x1dc>)
 8004f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4e:	f003 0308 	and.w	r3, r3, #8
 8004f52:	607b      	str	r3, [r7, #4]
 8004f54:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(INT_NET_PWR_GPIO_Port, INT_NET_PWR_Pin, GPIO_PIN_RESET);
 8004f56:	2200      	movs	r2, #0
 8004f58:	2101      	movs	r1, #1
 8004f5a:	4847      	ldr	r0, [pc, #284]	; (8005078 <MX_GPIO_Init+0x1e0>)
 8004f5c:	f001 fe78 	bl	8006c50 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, INT_NET_RST_Pin | INT_NET_DTR_Pin, GPIO_PIN_RESET);
 8004f60:	2200      	movs	r2, #0
 8004f62:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8004f66:	4845      	ldr	r0, [pc, #276]	; (800507c <MX_GPIO_Init+0x1e4>)
 8004f68:	f001 fe72 	bl	8006c50 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(SYS_LED_GPIO_Port, SYS_LED_Pin, GPIO_PIN_RESET);
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f72:	4843      	ldr	r0, [pc, #268]	; (8005080 <MX_GPIO_Init+0x1e8>)
 8004f74:	f001 fe6c 	bl	8006c50 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : PE2 PE3 PE4 PE5
     PE6 PE7 PE8 PE9
     PE10 PE11 PE12 PE13
     PE14 PE15 PE0 PE1 */
    GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5
 8004f78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004f7c:	61fb      	str	r3, [r7, #28]
            | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9
            | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13
            | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_0 | GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f82:	2300      	movs	r3, #0
 8004f84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004f86:	f107 031c 	add.w	r3, r7, #28
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	483d      	ldr	r0, [pc, #244]	; (8005084 <MX_GPIO_Init+0x1ec>)
 8004f8e:	f001 fbdb 	bl	8006748 <HAL_GPIO_Init>

    /*Configure GPIO pins : PC13 PC14 PC15 PC1
     PC2 PC3 PC4 PC5
     PC6 PC7 PC8 PC9
     PC10 PC11 PC12 */
    GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_1
 8004f92:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004f96:	61fb      	str	r3, [r7, #28]
            | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5
            | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9
            | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fa0:	f107 031c 	add.w	r3, r7, #28
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	4834      	ldr	r0, [pc, #208]	; (8005078 <MX_GPIO_Init+0x1e0>)
 8004fa8:	f001 fbce 	bl	8006748 <HAL_GPIO_Init>

    /*Configure GPIO pin : INT_NET_PWR_Pin */
    GPIO_InitStruct.Pin = INT_NET_PWR_Pin;
 8004fac:	2301      	movs	r3, #1
 8004fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(INT_NET_PWR_GPIO_Port, &GPIO_InitStruct);
 8004fbc:	f107 031c 	add.w	r3, r7, #28
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	482d      	ldr	r0, [pc, #180]	; (8005078 <MX_GPIO_Init+0x1e0>)
 8004fc4:	f001 fbc0 	bl	8006748 <HAL_GPIO_Init>

    /*Configure GPIO pins : PA0 PA1 PA2 PA3
     PA4 PA5 PA6 PA7
     PA8 PA11 PA12 PA15 */
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3
 8004fc8:	f649 13ff 	movw	r3, #39423	; 0x99ff
 8004fcc:	61fb      	str	r3, [r7, #28]
            | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7
            | GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fd6:	f107 031c 	add.w	r3, r7, #28
 8004fda:	4619      	mov	r1, r3
 8004fdc:	482a      	ldr	r0, [pc, #168]	; (8005088 <MX_GPIO_Init+0x1f0>)
 8004fde:	f001 fbb3 	bl	8006748 <HAL_GPIO_Init>

    /*Configure GPIO pins : PB0 PB1 PB12 PB13
     PB4 PB5 PB6 PB7
     PB8 */
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_12 | GPIO_PIN_13
 8004fe2:	f243 13f3 	movw	r3, #12787	; 0x31f3
 8004fe6:	61fb      	str	r3, [r7, #28]
            | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7
            | GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fec:	2300      	movs	r3, #0
 8004fee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ff0:	f107 031c 	add.w	r3, r7, #28
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	4821      	ldr	r0, [pc, #132]	; (800507c <MX_GPIO_Init+0x1e4>)
 8004ff8:	f001 fba6 	bl	8006748 <HAL_GPIO_Init>

    /*Configure GPIO pin : BOOT1_Pin */
    GPIO_InitStruct.Pin = BOOT1_Pin;
 8004ffc:	2304      	movs	r3, #4
 8004ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005000:	2300      	movs	r3, #0
 8005002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005004:	2302      	movs	r3, #2
 8005006:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8005008:	f107 031c 	add.w	r3, r7, #28
 800500c:	4619      	mov	r1, r3
 800500e:	481b      	ldr	r0, [pc, #108]	; (800507c <MX_GPIO_Init+0x1e4>)
 8005010:	f001 fb9a 	bl	8006748 <HAL_GPIO_Init>

    /*Configure GPIO pins : INT_NET_RST_Pin INT_NET_DTR_Pin */
    GPIO_InitStruct.Pin = INT_NET_RST_Pin | INT_NET_DTR_Pin;
 8005014:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800501a:	2301      	movs	r3, #1
 800501c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800501e:	2302      	movs	r3, #2
 8005020:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005022:	2300      	movs	r3, #0
 8005024:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005026:	f107 031c 	add.w	r3, r7, #28
 800502a:	4619      	mov	r1, r3
 800502c:	4813      	ldr	r0, [pc, #76]	; (800507c <MX_GPIO_Init+0x1e4>)
 800502e:	f001 fb8b 	bl	8006748 <HAL_GPIO_Init>

    /*Configure GPIO pins : PD8 PD9 PD10 PD11
     PD12 PD14 PD15 PD0
     PD1 PD2 PD3 PD4
     PD5 PD6 PD7 */
    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11
 8005032:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8005036:	61fb      	str	r3, [r7, #28]
            | GPIO_PIN_12 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_0
            | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4
            | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005038:	2303      	movs	r3, #3
 800503a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800503c:	2300      	movs	r3, #0
 800503e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005040:	f107 031c 	add.w	r3, r7, #28
 8005044:	4619      	mov	r1, r3
 8005046:	480e      	ldr	r0, [pc, #56]	; (8005080 <MX_GPIO_Init+0x1e8>)
 8005048:	f001 fb7e 	bl	8006748 <HAL_GPIO_Init>

    /*Configure GPIO pin : SYS_LED_Pin */
    GPIO_InitStruct.Pin = SYS_LED_Pin;
 800504c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005052:	2301      	movs	r3, #1
 8005054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005056:	2302      	movs	r3, #2
 8005058:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800505a:	2300      	movs	r3, #0
 800505c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(SYS_LED_GPIO_Port, &GPIO_InitStruct);
 800505e:	f107 031c 	add.w	r3, r7, #28
 8005062:	4619      	mov	r1, r3
 8005064:	4806      	ldr	r0, [pc, #24]	; (8005080 <MX_GPIO_Init+0x1e8>)
 8005066:	f001 fb6f 	bl	8006748 <HAL_GPIO_Init>

}
 800506a:	bf00      	nop
 800506c:	3730      	adds	r7, #48	; 0x30
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	40023800 	.word	0x40023800
 8005078:	40020800 	.word	0x40020800
 800507c:	40020400 	.word	0x40020400
 8005080:	40020c00 	.word	0x40020c00
 8005084:	40021000 	.word	0x40021000
 8005088:	40020000 	.word	0x40020000

0800508c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800508c:	b480      	push	{r7}
 800508e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    /* USER CODE END Error_Handler_Debug */
}
 8005090:	bf00      	nop
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
	...

0800509c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050a2:	2300      	movs	r3, #0
 80050a4:	607b      	str	r3, [r7, #4]
 80050a6:	4b10      	ldr	r3, [pc, #64]	; (80050e8 <HAL_MspInit+0x4c>)
 80050a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050aa:	4a0f      	ldr	r2, [pc, #60]	; (80050e8 <HAL_MspInit+0x4c>)
 80050ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050b0:	6453      	str	r3, [r2, #68]	; 0x44
 80050b2:	4b0d      	ldr	r3, [pc, #52]	; (80050e8 <HAL_MspInit+0x4c>)
 80050b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050ba:	607b      	str	r3, [r7, #4]
 80050bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80050be:	2300      	movs	r3, #0
 80050c0:	603b      	str	r3, [r7, #0]
 80050c2:	4b09      	ldr	r3, [pc, #36]	; (80050e8 <HAL_MspInit+0x4c>)
 80050c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c6:	4a08      	ldr	r2, [pc, #32]	; (80050e8 <HAL_MspInit+0x4c>)
 80050c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050cc:	6413      	str	r3, [r2, #64]	; 0x40
 80050ce:	4b06      	ldr	r3, [pc, #24]	; (80050e8 <HAL_MspInit+0x4c>)
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050d6:	603b      	str	r3, [r7, #0]
 80050d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80050da:	bf00      	nop
 80050dc:	370c      	adds	r7, #12
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	40023800 	.word	0x40023800

080050ec <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a0b      	ldr	r2, [pc, #44]	; (8005128 <HAL_CRC_MspInit+0x3c>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d10d      	bne.n	800511a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80050fe:	2300      	movs	r3, #0
 8005100:	60fb      	str	r3, [r7, #12]
 8005102:	4b0a      	ldr	r3, [pc, #40]	; (800512c <HAL_CRC_MspInit+0x40>)
 8005104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005106:	4a09      	ldr	r2, [pc, #36]	; (800512c <HAL_CRC_MspInit+0x40>)
 8005108:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800510c:	6313      	str	r3, [r2, #48]	; 0x30
 800510e:	4b07      	ldr	r3, [pc, #28]	; (800512c <HAL_CRC_MspInit+0x40>)
 8005110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005112:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005116:	60fb      	str	r3, [r7, #12]
 8005118:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800511a:	bf00      	nop
 800511c:	3714      	adds	r7, #20
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	40023000 	.word	0x40023000
 800512c:	40023800 	.word	0x40023800

08005130 <HAL_CRC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspDeInit(CRC_HandleTypeDef* hcrc)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a07      	ldr	r2, [pc, #28]	; (800515c <HAL_CRC_MspDeInit+0x2c>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d105      	bne.n	800514e <HAL_CRC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN CRC_MspDeInit 0 */

  /* USER CODE END CRC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CRC_CLK_DISABLE();
 8005142:	4b07      	ldr	r3, [pc, #28]	; (8005160 <HAL_CRC_MspDeInit+0x30>)
 8005144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005146:	4a06      	ldr	r2, [pc, #24]	; (8005160 <HAL_CRC_MspDeInit+0x30>)
 8005148:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800514c:	6313      	str	r3, [r2, #48]	; 0x30
  /* USER CODE BEGIN CRC_MspDeInit 1 */

  /* USER CODE END CRC_MspDeInit 1 */
  }

}
 800514e:	bf00      	nop
 8005150:	370c      	adds	r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	40023000 	.word	0x40023000
 8005160:	40023800 	.word	0x40023800

08005164 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b08a      	sub	sp, #40	; 0x28
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800516c:	f107 0314 	add.w	r3, r7, #20
 8005170:	2200      	movs	r2, #0
 8005172:	601a      	str	r2, [r3, #0]
 8005174:	605a      	str	r2, [r3, #4]
 8005176:	609a      	str	r2, [r3, #8]
 8005178:	60da      	str	r2, [r3, #12]
 800517a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a22      	ldr	r2, [pc, #136]	; (800520c <HAL_I2C_MspInit+0xa8>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d13d      	bne.n	8005202 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005186:	2300      	movs	r3, #0
 8005188:	613b      	str	r3, [r7, #16]
 800518a:	4b21      	ldr	r3, [pc, #132]	; (8005210 <HAL_I2C_MspInit+0xac>)
 800518c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518e:	4a20      	ldr	r2, [pc, #128]	; (8005210 <HAL_I2C_MspInit+0xac>)
 8005190:	f043 0302 	orr.w	r3, r3, #2
 8005194:	6313      	str	r3, [r2, #48]	; 0x30
 8005196:	4b1e      	ldr	r3, [pc, #120]	; (8005210 <HAL_I2C_MspInit+0xac>)
 8005198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	613b      	str	r3, [r7, #16]
 80051a0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INT_EEPROM_SCL_Pin;
 80051a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80051a8:	2312      	movs	r3, #18
 80051aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80051ac:	2301      	movs	r3, #1
 80051ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051b0:	2303      	movs	r3, #3
 80051b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80051b4:	2304      	movs	r3, #4
 80051b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(INT_EEPROM_SCL_GPIO_Port, &GPIO_InitStruct);
 80051b8:	f107 0314 	add.w	r3, r7, #20
 80051bc:	4619      	mov	r1, r3
 80051be:	4815      	ldr	r0, [pc, #84]	; (8005214 <HAL_I2C_MspInit+0xb0>)
 80051c0:	f001 fac2 	bl	8006748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = INT_EEPROM_SDA_Pin;
 80051c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80051ca:	2312      	movs	r3, #18
 80051cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80051ce:	2301      	movs	r3, #1
 80051d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051d2:	2303      	movs	r3, #3
 80051d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80051d6:	2309      	movs	r3, #9
 80051d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(INT_EEPROM_SDA_GPIO_Port, &GPIO_InitStruct);
 80051da:	f107 0314 	add.w	r3, r7, #20
 80051de:	4619      	mov	r1, r3
 80051e0:	480c      	ldr	r0, [pc, #48]	; (8005214 <HAL_I2C_MspInit+0xb0>)
 80051e2:	f001 fab1 	bl	8006748 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80051e6:	2300      	movs	r3, #0
 80051e8:	60fb      	str	r3, [r7, #12]
 80051ea:	4b09      	ldr	r3, [pc, #36]	; (8005210 <HAL_I2C_MspInit+0xac>)
 80051ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ee:	4a08      	ldr	r2, [pc, #32]	; (8005210 <HAL_I2C_MspInit+0xac>)
 80051f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80051f4:	6413      	str	r3, [r2, #64]	; 0x40
 80051f6:	4b06      	ldr	r3, [pc, #24]	; (8005210 <HAL_I2C_MspInit+0xac>)
 80051f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051fe:	60fb      	str	r3, [r7, #12]
 8005200:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8005202:	bf00      	nop
 8005204:	3728      	adds	r7, #40	; 0x28
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	40005800 	.word	0x40005800
 8005210:	40023800 	.word	0x40023800
 8005214:	40020400 	.word	0x40020400

08005218 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a08      	ldr	r2, [pc, #32]	; (8005248 <HAL_I2C_MspDeInit+0x30>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d10a      	bne.n	8005240 <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800522a:	4b08      	ldr	r3, [pc, #32]	; (800524c <HAL_I2C_MspDeInit+0x34>)
 800522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522e:	4a07      	ldr	r2, [pc, #28]	; (800524c <HAL_I2C_MspDeInit+0x34>)
 8005230:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005234:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, INT_EEPROM_SCL_Pin|INT_EEPROM_SDA_Pin);
 8005236:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800523a:	4805      	ldr	r0, [pc, #20]	; (8005250 <HAL_I2C_MspDeInit+0x38>)
 800523c:	f001 fc16 	bl	8006a6c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8005240:	bf00      	nop
 8005242:	3708      	adds	r7, #8
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	40005800 	.word	0x40005800
 800524c:	40023800 	.word	0x40023800
 8005250:	40020400 	.word	0x40020400

08005254 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b08a      	sub	sp, #40	; 0x28
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800525c:	f107 0314 	add.w	r3, r7, #20
 8005260:	2200      	movs	r2, #0
 8005262:	601a      	str	r2, [r3, #0]
 8005264:	605a      	str	r2, [r3, #4]
 8005266:	609a      	str	r2, [r3, #8]
 8005268:	60da      	str	r2, [r3, #12]
 800526a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a35      	ldr	r2, [pc, #212]	; (8005348 <HAL_UART_MspInit+0xf4>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d164      	bne.n	8005340 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005276:	2300      	movs	r3, #0
 8005278:	613b      	str	r3, [r7, #16]
 800527a:	4b34      	ldr	r3, [pc, #208]	; (800534c <HAL_UART_MspInit+0xf8>)
 800527c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527e:	4a33      	ldr	r2, [pc, #204]	; (800534c <HAL_UART_MspInit+0xf8>)
 8005280:	f043 0310 	orr.w	r3, r3, #16
 8005284:	6453      	str	r3, [r2, #68]	; 0x44
 8005286:	4b31      	ldr	r3, [pc, #196]	; (800534c <HAL_UART_MspInit+0xf8>)
 8005288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800528a:	f003 0310 	and.w	r3, r3, #16
 800528e:	613b      	str	r3, [r7, #16]
 8005290:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005292:	2300      	movs	r3, #0
 8005294:	60fb      	str	r3, [r7, #12]
 8005296:	4b2d      	ldr	r3, [pc, #180]	; (800534c <HAL_UART_MspInit+0xf8>)
 8005298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529a:	4a2c      	ldr	r2, [pc, #176]	; (800534c <HAL_UART_MspInit+0xf8>)
 800529c:	f043 0301 	orr.w	r3, r3, #1
 80052a0:	6313      	str	r3, [r2, #48]	; 0x30
 80052a2:	4b2a      	ldr	r3, [pc, #168]	; (800534c <HAL_UART_MspInit+0xf8>)
 80052a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	60fb      	str	r3, [r7, #12]
 80052ac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = INT_NET_TX_Pin|INT_NET_RX_Pin;
 80052ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80052b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052b4:	2302      	movs	r3, #2
 80052b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052b8:	2300      	movs	r3, #0
 80052ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052bc:	2303      	movs	r3, #3
 80052be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80052c0:	2307      	movs	r3, #7
 80052c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052c4:	f107 0314 	add.w	r3, r7, #20
 80052c8:	4619      	mov	r1, r3
 80052ca:	4821      	ldr	r0, [pc, #132]	; (8005350 <HAL_UART_MspInit+0xfc>)
 80052cc:	f001 fa3c 	bl	8006748 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80052d0:	4b20      	ldr	r3, [pc, #128]	; (8005354 <HAL_UART_MspInit+0x100>)
 80052d2:	4a21      	ldr	r2, [pc, #132]	; (8005358 <HAL_UART_MspInit+0x104>)
 80052d4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80052d6:	4b1f      	ldr	r3, [pc, #124]	; (8005354 <HAL_UART_MspInit+0x100>)
 80052d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80052dc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80052de:	4b1d      	ldr	r3, [pc, #116]	; (8005354 <HAL_UART_MspInit+0x100>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80052e4:	4b1b      	ldr	r3, [pc, #108]	; (8005354 <HAL_UART_MspInit+0x100>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80052ea:	4b1a      	ldr	r3, [pc, #104]	; (8005354 <HAL_UART_MspInit+0x100>)
 80052ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052f0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80052f2:	4b18      	ldr	r3, [pc, #96]	; (8005354 <HAL_UART_MspInit+0x100>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80052f8:	4b16      	ldr	r3, [pc, #88]	; (8005354 <HAL_UART_MspInit+0x100>)
 80052fa:	2200      	movs	r2, #0
 80052fc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80052fe:	4b15      	ldr	r3, [pc, #84]	; (8005354 <HAL_UART_MspInit+0x100>)
 8005300:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005304:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005306:	4b13      	ldr	r3, [pc, #76]	; (8005354 <HAL_UART_MspInit+0x100>)
 8005308:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800530c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800530e:	4b11      	ldr	r3, [pc, #68]	; (8005354 <HAL_UART_MspInit+0x100>)
 8005310:	2200      	movs	r2, #0
 8005312:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005314:	480f      	ldr	r0, [pc, #60]	; (8005354 <HAL_UART_MspInit+0x100>)
 8005316:	f000 fb37 	bl	8005988 <HAL_DMA_Init>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d001      	beq.n	8005324 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8005320:	f7ff feb4 	bl	800508c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a0b      	ldr	r2, [pc, #44]	; (8005354 <HAL_UART_MspInit+0x100>)
 8005328:	635a      	str	r2, [r3, #52]	; 0x34
 800532a:	4a0a      	ldr	r2, [pc, #40]	; (8005354 <HAL_UART_MspInit+0x100>)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005330:	2200      	movs	r2, #0
 8005332:	2100      	movs	r1, #0
 8005334:	2025      	movs	r0, #37	; 0x25
 8005336:	f000 fac2 	bl	80058be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800533a:	2025      	movs	r0, #37	; 0x25
 800533c:	f000 fadb 	bl	80058f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005340:	bf00      	nop
 8005342:	3728      	adds	r7, #40	; 0x28
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	40011000 	.word	0x40011000
 800534c:	40023800 	.word	0x40023800
 8005350:	40020000 	.word	0x40020000
 8005354:	20000c90 	.word	0x20000c90
 8005358:	40026440 	.word	0x40026440

0800535c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a0c      	ldr	r2, [pc, #48]	; (800539c <HAL_UART_MspDeInit+0x40>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d112      	bne.n	8005394 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800536e:	4b0c      	ldr	r3, [pc, #48]	; (80053a0 <HAL_UART_MspDeInit+0x44>)
 8005370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005372:	4a0b      	ldr	r2, [pc, #44]	; (80053a0 <HAL_UART_MspDeInit+0x44>)
 8005374:	f023 0310 	bic.w	r3, r3, #16
 8005378:	6453      	str	r3, [r2, #68]	; 0x44
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    HAL_GPIO_DeInit(GPIOA, INT_NET_TX_Pin|INT_NET_RX_Pin);
 800537a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800537e:	4809      	ldr	r0, [pc, #36]	; (80053a4 <HAL_UART_MspDeInit+0x48>)
 8005380:	f001 fb74 	bl	8006a6c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005388:	4618      	mov	r0, r3
 800538a:	f000 fbab 	bl	8005ae4 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800538e:	2025      	movs	r0, #37	; 0x25
 8005390:	f000 fabf 	bl	8005912 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8005394:	bf00      	nop
 8005396:	3708      	adds	r7, #8
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	40011000 	.word	0x40011000
 80053a0:	40023800 	.word	0x40023800
 80053a4:	40020000 	.word	0x40020000

080053a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80053a8:	b480      	push	{r7}
 80053aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80053ac:	bf00      	nop
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80053b6:	b480      	push	{r7}
 80053b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80053ba:	e7fe      	b.n	80053ba <HardFault_Handler+0x4>

080053bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80053c0:	e7fe      	b.n	80053c0 <MemManage_Handler+0x4>

080053c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80053c2:	b480      	push	{r7}
 80053c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80053c6:	e7fe      	b.n	80053c6 <BusFault_Handler+0x4>

080053c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80053c8:	b480      	push	{r7}
 80053ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80053cc:	e7fe      	b.n	80053cc <UsageFault_Handler+0x4>

080053ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80053ce:	b480      	push	{r7}
 80053d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80053d2:	bf00      	nop
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80053dc:	b480      	push	{r7}
 80053de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80053e0:	bf00      	nop
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80053ea:	b480      	push	{r7}
 80053ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80053ee:	bf00      	nop
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80053fc:	f000 f90c 	bl	8005618 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005400:	bf00      	nop
 8005402:	bd80      	pop	{r7, pc}

08005404 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005408:	4803      	ldr	r0, [pc, #12]	; (8005418 <USART1_IRQHandler+0x14>)
 800540a:	f003 fc13 	bl	8008c34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
    SIMCOM_USART_IrqHandler();
 800540e:	f7fb fd2d 	bl	8000e6c <SIMCOM_USART_IrqHandler>

  /* USER CODE END USART1_IRQn 1 */
}
 8005412:	bf00      	nop
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	20000cf0 	.word	0x20000cf0

0800541c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005420:	4803      	ldr	r0, [pc, #12]	; (8005430 <DMA2_Stream2_IRQHandler+0x14>)
 8005422:	f000 fc37 	bl	8005c94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */
    SIMCOM_DMA_IrqHandler();
 8005426:	f7fb fd3f 	bl	8000ea8 <SIMCOM_DMA_IrqHandler>

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800542a:	bf00      	nop
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	20000c90 	.word	0x20000c90

08005434 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800543c:	4b11      	ldr	r3, [pc, #68]	; (8005484 <_sbrk+0x50>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d102      	bne.n	800544a <_sbrk+0x16>
		heap_end = &end;
 8005444:	4b0f      	ldr	r3, [pc, #60]	; (8005484 <_sbrk+0x50>)
 8005446:	4a10      	ldr	r2, [pc, #64]	; (8005488 <_sbrk+0x54>)
 8005448:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800544a:	4b0e      	ldr	r3, [pc, #56]	; (8005484 <_sbrk+0x50>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005450:	4b0c      	ldr	r3, [pc, #48]	; (8005484 <_sbrk+0x50>)
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4413      	add	r3, r2
 8005458:	466a      	mov	r2, sp
 800545a:	4293      	cmp	r3, r2
 800545c:	d907      	bls.n	800546e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800545e:	f004 fab7 	bl	80099d0 <__errno>
 8005462:	4602      	mov	r2, r0
 8005464:	230c      	movs	r3, #12
 8005466:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005468:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800546c:	e006      	b.n	800547c <_sbrk+0x48>
	}

	heap_end += incr;
 800546e:	4b05      	ldr	r3, [pc, #20]	; (8005484 <_sbrk+0x50>)
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4413      	add	r3, r2
 8005476:	4a03      	ldr	r2, [pc, #12]	; (8005484 <_sbrk+0x50>)
 8005478:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800547a:	68fb      	ldr	r3, [r7, #12]
}
 800547c:	4618      	mov	r0, r3
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	20000628 	.word	0x20000628
 8005488:	20000d58 	.word	0x20000d58

0800548c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800548c:	b480      	push	{r7}
 800548e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005490:	4b08      	ldr	r3, [pc, #32]	; (80054b4 <SystemInit+0x28>)
 8005492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005496:	4a07      	ldr	r2, [pc, #28]	; (80054b4 <SystemInit+0x28>)
 8005498:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800549c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80054a0:	4b04      	ldr	r3, [pc, #16]	; (80054b4 <SystemInit+0x28>)
 80054a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80054a6:	609a      	str	r2, [r3, #8]
#endif
}
 80054a8:	bf00      	nop
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	e000ed00 	.word	0xe000ed00

080054b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80054b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80054f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80054bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80054be:	e003      	b.n	80054c8 <LoopCopyDataInit>

080054c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80054c0:	4b0c      	ldr	r3, [pc, #48]	; (80054f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80054c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80054c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80054c6:	3104      	adds	r1, #4

080054c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80054c8:	480b      	ldr	r0, [pc, #44]	; (80054f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80054ca:	4b0c      	ldr	r3, [pc, #48]	; (80054fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80054cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80054ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80054d0:	d3f6      	bcc.n	80054c0 <CopyDataInit>
  ldr  r2, =_sbss
 80054d2:	4a0b      	ldr	r2, [pc, #44]	; (8005500 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80054d4:	e002      	b.n	80054dc <LoopFillZerobss>

080054d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80054d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80054d8:	f842 3b04 	str.w	r3, [r2], #4

080054dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80054dc:	4b09      	ldr	r3, [pc, #36]	; (8005504 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80054de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80054e0:	d3f9      	bcc.n	80054d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80054e2:	f7ff ffd3 	bl	800548c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80054e6:	f004 fa79 	bl	80099dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80054ea:	f7ff fb25 	bl	8004b38 <main>
  bx  lr    
 80054ee:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80054f0:	2004fff8 	.word	0x2004fff8
  ldr  r3, =_sidata
 80054f4:	0800ac60 	.word	0x0800ac60
  ldr  r0, =_sdata
 80054f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80054fc:	20000200 	.word	0x20000200
  ldr  r2, =_sbss
 8005500:	20000200 	.word	0x20000200
  ldr  r3, = _ebss
 8005504:	20000d58 	.word	0x20000d58

08005508 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005508:	e7fe      	b.n	8005508 <ADC_IRQHandler>
	...

0800550c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005510:	4b0e      	ldr	r3, [pc, #56]	; (800554c <HAL_Init+0x40>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a0d      	ldr	r2, [pc, #52]	; (800554c <HAL_Init+0x40>)
 8005516:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800551a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800551c:	4b0b      	ldr	r3, [pc, #44]	; (800554c <HAL_Init+0x40>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a0a      	ldr	r2, [pc, #40]	; (800554c <HAL_Init+0x40>)
 8005522:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005526:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005528:	4b08      	ldr	r3, [pc, #32]	; (800554c <HAL_Init+0x40>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a07      	ldr	r2, [pc, #28]	; (800554c <HAL_Init+0x40>)
 800552e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005532:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005534:	2003      	movs	r0, #3
 8005536:	f000 f9b7 	bl	80058a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800553a:	2000      	movs	r0, #0
 800553c:	f000 f83c 	bl	80055b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005540:	f7ff fdac 	bl	800509c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	40023c00 	.word	0x40023c00

08005550 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8005554:	4b13      	ldr	r3, [pc, #76]	; (80055a4 <HAL_DeInit+0x54>)
 8005556:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800555a:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 800555c:	4b11      	ldr	r3, [pc, #68]	; (80055a4 <HAL_DeInit+0x54>)
 800555e:	2200      	movs	r2, #0
 8005560:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8005562:	4b10      	ldr	r3, [pc, #64]	; (80055a4 <HAL_DeInit+0x54>)
 8005564:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005568:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 800556a:	4b0e      	ldr	r3, [pc, #56]	; (80055a4 <HAL_DeInit+0x54>)
 800556c:	2200      	movs	r2, #0
 800556e:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8005570:	4b0c      	ldr	r3, [pc, #48]	; (80055a4 <HAL_DeInit+0x54>)
 8005572:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005576:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8005578:	4b0a      	ldr	r3, [pc, #40]	; (80055a4 <HAL_DeInit+0x54>)
 800557a:	2200      	movs	r2, #0
 800557c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 800557e:	4b09      	ldr	r3, [pc, #36]	; (80055a4 <HAL_DeInit+0x54>)
 8005580:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005584:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8005586:	4b07      	ldr	r3, [pc, #28]	; (80055a4 <HAL_DeInit+0x54>)
 8005588:	2200      	movs	r2, #0
 800558a:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 800558c:	4b05      	ldr	r3, [pc, #20]	; (80055a4 <HAL_DeInit+0x54>)
 800558e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005592:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8005594:	4b03      	ldr	r3, [pc, #12]	; (80055a4 <HAL_DeInit+0x54>)
 8005596:	2200      	movs	r2, #0
 8005598:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800559a:	f000 f805 	bl	80055a8 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	40023800 	.word	0x40023800

080055a8 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80055a8:	b480      	push	{r7}
 80055aa:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 80055ac:	bf00      	nop
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
	...

080055b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80055c0:	4b12      	ldr	r3, [pc, #72]	; (800560c <HAL_InitTick+0x54>)
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	4b12      	ldr	r3, [pc, #72]	; (8005610 <HAL_InitTick+0x58>)
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	4619      	mov	r1, r3
 80055ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80055ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80055d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d6:	4618      	mov	r0, r3
 80055d8:	f000 f9ad 	bl	8005936 <HAL_SYSTICK_Config>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d001      	beq.n	80055e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e00e      	b.n	8005604 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b0f      	cmp	r3, #15
 80055ea:	d80a      	bhi.n	8005602 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80055ec:	2200      	movs	r2, #0
 80055ee:	6879      	ldr	r1, [r7, #4]
 80055f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055f4:	f000 f963 	bl	80058be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80055f8:	4a06      	ldr	r2, [pc, #24]	; (8005614 <HAL_InitTick+0x5c>)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
 8005600:	e000      	b.n	8005604 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
}
 8005604:	4618      	mov	r0, r3
 8005606:	3708      	adds	r7, #8
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	20000024 	.word	0x20000024
 8005610:	2000002c 	.word	0x2000002c
 8005614:	20000028 	.word	0x20000028

08005618 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005618:	b480      	push	{r7}
 800561a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800561c:	4b06      	ldr	r3, [pc, #24]	; (8005638 <HAL_IncTick+0x20>)
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	461a      	mov	r2, r3
 8005622:	4b06      	ldr	r3, [pc, #24]	; (800563c <HAL_IncTick+0x24>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4413      	add	r3, r2
 8005628:	4a04      	ldr	r2, [pc, #16]	; (800563c <HAL_IncTick+0x24>)
 800562a:	6013      	str	r3, [r2, #0]
}
 800562c:	bf00      	nop
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	2000002c 	.word	0x2000002c
 800563c:	20000d30 	.word	0x20000d30

08005640 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005640:	b480      	push	{r7}
 8005642:	af00      	add	r7, sp, #0
  return uwTick;
 8005644:	4b03      	ldr	r3, [pc, #12]	; (8005654 <HAL_GetTick+0x14>)
 8005646:	681b      	ldr	r3, [r3, #0]
}
 8005648:	4618      	mov	r0, r3
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	20000d30 	.word	0x20000d30

08005658 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005660:	f7ff ffee 	bl	8005640 <HAL_GetTick>
 8005664:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005670:	d005      	beq.n	800567e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005672:	4b09      	ldr	r3, [pc, #36]	; (8005698 <HAL_Delay+0x40>)
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	461a      	mov	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	4413      	add	r3, r2
 800567c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800567e:	bf00      	nop
 8005680:	f7ff ffde 	bl	8005640 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	429a      	cmp	r2, r3
 800568e:	d8f7      	bhi.n	8005680 <HAL_Delay+0x28>
  {
  }
}
 8005690:	bf00      	nop
 8005692:	3710      	adds	r7, #16
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	2000002c 	.word	0x2000002c

0800569c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f003 0307 	and.w	r3, r3, #7
 80056aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056ac:	4b0c      	ldr	r3, [pc, #48]	; (80056e0 <__NVIC_SetPriorityGrouping+0x44>)
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80056b8:	4013      	ands	r3, r2
 80056ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80056c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80056c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056ce:	4a04      	ldr	r2, [pc, #16]	; (80056e0 <__NVIC_SetPriorityGrouping+0x44>)
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	60d3      	str	r3, [r2, #12]
}
 80056d4:	bf00      	nop
 80056d6:	3714      	adds	r7, #20
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr
 80056e0:	e000ed00 	.word	0xe000ed00

080056e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80056e4:	b480      	push	{r7}
 80056e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056e8:	4b04      	ldr	r3, [pc, #16]	; (80056fc <__NVIC_GetPriorityGrouping+0x18>)
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	0a1b      	lsrs	r3, r3, #8
 80056ee:	f003 0307 	and.w	r3, r3, #7
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr
 80056fc:	e000ed00 	.word	0xe000ed00

08005700 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	4603      	mov	r3, r0
 8005708:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800570a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800570e:	2b00      	cmp	r3, #0
 8005710:	db0b      	blt.n	800572a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005712:	79fb      	ldrb	r3, [r7, #7]
 8005714:	f003 021f 	and.w	r2, r3, #31
 8005718:	4907      	ldr	r1, [pc, #28]	; (8005738 <__NVIC_EnableIRQ+0x38>)
 800571a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800571e:	095b      	lsrs	r3, r3, #5
 8005720:	2001      	movs	r0, #1
 8005722:	fa00 f202 	lsl.w	r2, r0, r2
 8005726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800572a:	bf00      	nop
 800572c:	370c      	adds	r7, #12
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	e000e100 	.word	0xe000e100

0800573c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	4603      	mov	r3, r0
 8005744:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800574a:	2b00      	cmp	r3, #0
 800574c:	db10      	blt.n	8005770 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800574e:	79fb      	ldrb	r3, [r7, #7]
 8005750:	f003 021f 	and.w	r2, r3, #31
 8005754:	4909      	ldr	r1, [pc, #36]	; (800577c <__NVIC_DisableIRQ+0x40>)
 8005756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800575a:	095b      	lsrs	r3, r3, #5
 800575c:	2001      	movs	r0, #1
 800575e:	fa00 f202 	lsl.w	r2, r0, r2
 8005762:	3320      	adds	r3, #32
 8005764:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005768:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800576c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr
 800577c:	e000e100 	.word	0xe000e100

08005780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	4603      	mov	r3, r0
 8005788:	6039      	str	r1, [r7, #0]
 800578a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800578c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005790:	2b00      	cmp	r3, #0
 8005792:	db0a      	blt.n	80057aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	b2da      	uxtb	r2, r3
 8005798:	490c      	ldr	r1, [pc, #48]	; (80057cc <__NVIC_SetPriority+0x4c>)
 800579a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800579e:	0112      	lsls	r2, r2, #4
 80057a0:	b2d2      	uxtb	r2, r2
 80057a2:	440b      	add	r3, r1
 80057a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80057a8:	e00a      	b.n	80057c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	b2da      	uxtb	r2, r3
 80057ae:	4908      	ldr	r1, [pc, #32]	; (80057d0 <__NVIC_SetPriority+0x50>)
 80057b0:	79fb      	ldrb	r3, [r7, #7]
 80057b2:	f003 030f 	and.w	r3, r3, #15
 80057b6:	3b04      	subs	r3, #4
 80057b8:	0112      	lsls	r2, r2, #4
 80057ba:	b2d2      	uxtb	r2, r2
 80057bc:	440b      	add	r3, r1
 80057be:	761a      	strb	r2, [r3, #24]
}
 80057c0:	bf00      	nop
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	e000e100 	.word	0xe000e100
 80057d0:	e000ed00 	.word	0xe000ed00

080057d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b089      	sub	sp, #36	; 0x24
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f003 0307 	and.w	r3, r3, #7
 80057e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	f1c3 0307 	rsb	r3, r3, #7
 80057ee:	2b04      	cmp	r3, #4
 80057f0:	bf28      	it	cs
 80057f2:	2304      	movcs	r3, #4
 80057f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	3304      	adds	r3, #4
 80057fa:	2b06      	cmp	r3, #6
 80057fc:	d902      	bls.n	8005804 <NVIC_EncodePriority+0x30>
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	3b03      	subs	r3, #3
 8005802:	e000      	b.n	8005806 <NVIC_EncodePriority+0x32>
 8005804:	2300      	movs	r3, #0
 8005806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005808:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	fa02 f303 	lsl.w	r3, r2, r3
 8005812:	43da      	mvns	r2, r3
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	401a      	ands	r2, r3
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800581c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	fa01 f303 	lsl.w	r3, r1, r3
 8005826:	43d9      	mvns	r1, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800582c:	4313      	orrs	r3, r2
         );
}
 800582e:	4618      	mov	r0, r3
 8005830:	3724      	adds	r7, #36	; 0x24
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
	...

0800583c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800583c:	b480      	push	{r7}
 800583e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8005840:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005844:	4b05      	ldr	r3, [pc, #20]	; (800585c <__NVIC_SystemReset+0x20>)
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800584c:	4903      	ldr	r1, [pc, #12]	; (800585c <__NVIC_SystemReset+0x20>)
 800584e:	4b04      	ldr	r3, [pc, #16]	; (8005860 <__NVIC_SystemReset+0x24>)
 8005850:	4313      	orrs	r3, r2
 8005852:	60cb      	str	r3, [r1, #12]
 8005854:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005858:	bf00      	nop
 800585a:	e7fd      	b.n	8005858 <__NVIC_SystemReset+0x1c>
 800585c:	e000ed00 	.word	0xe000ed00
 8005860:	05fa0004 	.word	0x05fa0004

08005864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	3b01      	subs	r3, #1
 8005870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005874:	d301      	bcc.n	800587a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005876:	2301      	movs	r3, #1
 8005878:	e00f      	b.n	800589a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800587a:	4a0a      	ldr	r2, [pc, #40]	; (80058a4 <SysTick_Config+0x40>)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	3b01      	subs	r3, #1
 8005880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005882:	210f      	movs	r1, #15
 8005884:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005888:	f7ff ff7a 	bl	8005780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800588c:	4b05      	ldr	r3, [pc, #20]	; (80058a4 <SysTick_Config+0x40>)
 800588e:	2200      	movs	r2, #0
 8005890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005892:	4b04      	ldr	r3, [pc, #16]	; (80058a4 <SysTick_Config+0x40>)
 8005894:	2207      	movs	r2, #7
 8005896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3708      	adds	r7, #8
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	e000e010 	.word	0xe000e010

080058a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f7ff fef3 	bl	800569c <__NVIC_SetPriorityGrouping>
}
 80058b6:	bf00      	nop
 80058b8:	3708      	adds	r7, #8
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80058be:	b580      	push	{r7, lr}
 80058c0:	b086      	sub	sp, #24
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	4603      	mov	r3, r0
 80058c6:	60b9      	str	r1, [r7, #8]
 80058c8:	607a      	str	r2, [r7, #4]
 80058ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80058d0:	f7ff ff08 	bl	80056e4 <__NVIC_GetPriorityGrouping>
 80058d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	68b9      	ldr	r1, [r7, #8]
 80058da:	6978      	ldr	r0, [r7, #20]
 80058dc:	f7ff ff7a 	bl	80057d4 <NVIC_EncodePriority>
 80058e0:	4602      	mov	r2, r0
 80058e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058e6:	4611      	mov	r1, r2
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7ff ff49 	bl	8005780 <__NVIC_SetPriority>
}
 80058ee:	bf00      	nop
 80058f0:	3718      	adds	r7, #24
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b082      	sub	sp, #8
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	4603      	mov	r3, r0
 80058fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005904:	4618      	mov	r0, r3
 8005906:	f7ff fefb 	bl	8005700 <__NVIC_EnableIRQ>
}
 800590a:	bf00      	nop
 800590c:	3708      	adds	r7, #8
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005912:	b580      	push	{r7, lr}
 8005914:	b082      	sub	sp, #8
 8005916:	af00      	add	r7, sp, #0
 8005918:	4603      	mov	r3, r0
 800591a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800591c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005920:	4618      	mov	r0, r3
 8005922:	f7ff ff0b 	bl	800573c <__NVIC_DisableIRQ>
}
 8005926:	bf00      	nop
 8005928:	3708      	adds	r7, #8
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8005932:	f7ff ff83 	bl	800583c <__NVIC_SystemReset>

08005936 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b082      	sub	sp, #8
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7ff ff90 	bl	8005864 <SysTick_Config>
 8005944:	4603      	mov	r3, r0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3708      	adds	r7, #8
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800594e:	b580      	push	{r7, lr}
 8005950:	b082      	sub	sp, #8
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d101      	bne.n	8005960 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e00e      	b.n	800597e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	795b      	ldrb	r3, [r3, #5]
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d105      	bne.n	8005976 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f7ff fbbb 	bl	80050ec <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3708      	adds	r7, #8
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
	...

08005988 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005990:	2300      	movs	r3, #0
 8005992:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005994:	f7ff fe54 	bl	8005640 <HAL_GetTick>
 8005998:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d101      	bne.n	80059a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e099      	b.n	8005ad8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2202      	movs	r2, #2
 80059b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f022 0201 	bic.w	r2, r2, #1
 80059c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059c4:	e00f      	b.n	80059e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059c6:	f7ff fe3b 	bl	8005640 <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	2b05      	cmp	r3, #5
 80059d2:	d908      	bls.n	80059e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2220      	movs	r2, #32
 80059d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2203      	movs	r2, #3
 80059de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e078      	b.n	8005ad8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0301 	and.w	r3, r3, #1
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1e8      	bne.n	80059c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	4b38      	ldr	r3, [pc, #224]	; (8005ae0 <HAL_DMA_Init+0x158>)
 8005a00:	4013      	ands	r3, r2
 8005a02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a1b      	ldr	r3, [r3, #32]
 8005a30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3c:	2b04      	cmp	r3, #4
 8005a3e:	d107      	bne.n	8005a50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	f023 0307 	bic.w	r3, r3, #7
 8005a66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a76:	2b04      	cmp	r3, #4
 8005a78:	d117      	bne.n	8005aaa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00e      	beq.n	8005aaa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 faef 	bl	8006070 <DMA_CheckFifoParam>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d008      	beq.n	8005aaa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2240      	movs	r2, #64	; 0x40
 8005a9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e016      	b.n	8005ad8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 faa6 	bl	8006004 <DMA_CalcBaseAndBitshift>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ac0:	223f      	movs	r2, #63	; 0x3f
 8005ac2:	409a      	lsls	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3718      	adds	r7, #24
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	e010803f 	.word	0xe010803f

08005ae4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d101      	bne.n	8005af6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e050      	b.n	8005b98 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d101      	bne.n	8005b06 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005b02:	2302      	movs	r3, #2
 8005b04:	e048      	b.n	8005b98 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f022 0201 	bic.w	r2, r2, #1
 8005b14:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2200      	movs	r2, #0
 8005b24:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2200      	movs	r2, #0
 8005b34:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2221      	movs	r2, #33	; 0x21
 8005b44:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 fa5c 	bl	8006004 <DMA_CalcBaseAndBitshift>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b78:	223f      	movs	r2, #63	; 0x3f
 8005b7a:	409a      	lsls	r2, r3
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3710      	adds	r7, #16
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
 8005bac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bb6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d101      	bne.n	8005bc6 <HAL_DMA_Start_IT+0x26>
 8005bc2:	2302      	movs	r3, #2
 8005bc4:	e040      	b.n	8005c48 <HAL_DMA_Start_IT+0xa8>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d12f      	bne.n	8005c3a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2202      	movs	r2, #2
 8005bde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	68b9      	ldr	r1, [r7, #8]
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f000 f9da 	bl	8005fa8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bf8:	223f      	movs	r2, #63	; 0x3f
 8005bfa:	409a      	lsls	r2, r3
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f042 0216 	orr.w	r2, r2, #22
 8005c0e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d007      	beq.n	8005c28 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f042 0208 	orr.w	r2, r2, #8
 8005c26:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f042 0201 	orr.w	r2, r2, #1
 8005c36:	601a      	str	r2, [r3, #0]
 8005c38:	e005      	b.n	8005c46 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005c42:	2302      	movs	r3, #2
 8005c44:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3718      	adds	r7, #24
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d004      	beq.n	8005c6e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2280      	movs	r2, #128	; 0x80
 8005c68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e00c      	b.n	8005c88 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2205      	movs	r2, #5
 8005c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f022 0201 	bic.w	r2, r2, #1
 8005c84:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005ca0:	4b92      	ldr	r3, [pc, #584]	; (8005eec <HAL_DMA_IRQHandler+0x258>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a92      	ldr	r2, [pc, #584]	; (8005ef0 <HAL_DMA_IRQHandler+0x25c>)
 8005ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8005caa:	0a9b      	lsrs	r3, r3, #10
 8005cac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cb2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cbe:	2208      	movs	r2, #8
 8005cc0:	409a      	lsls	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d01a      	beq.n	8005d00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0304 	and.w	r3, r3, #4
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d013      	beq.n	8005d00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f022 0204 	bic.w	r2, r2, #4
 8005ce6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cec:	2208      	movs	r2, #8
 8005cee:	409a      	lsls	r2, r3
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf8:	f043 0201 	orr.w	r2, r3, #1
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d04:	2201      	movs	r2, #1
 8005d06:	409a      	lsls	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d012      	beq.n	8005d36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00b      	beq.n	8005d36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d22:	2201      	movs	r2, #1
 8005d24:	409a      	lsls	r2, r3
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d2e:	f043 0202 	orr.w	r2, r3, #2
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d3a:	2204      	movs	r2, #4
 8005d3c:	409a      	lsls	r2, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	4013      	ands	r3, r2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d012      	beq.n	8005d6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0302 	and.w	r3, r3, #2
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00b      	beq.n	8005d6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d58:	2204      	movs	r2, #4
 8005d5a:	409a      	lsls	r2, r3
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d64:	f043 0204 	orr.w	r2, r3, #4
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d70:	2210      	movs	r2, #16
 8005d72:	409a      	lsls	r2, r3
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	4013      	ands	r3, r2
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d043      	beq.n	8005e04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0308 	and.w	r3, r3, #8
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d03c      	beq.n	8005e04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d8e:	2210      	movs	r2, #16
 8005d90:	409a      	lsls	r2, r3
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d018      	beq.n	8005dd6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d108      	bne.n	8005dc4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d024      	beq.n	8005e04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	4798      	blx	r3
 8005dc2:	e01f      	b.n	8005e04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d01b      	beq.n	8005e04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	4798      	blx	r3
 8005dd4:	e016      	b.n	8005e04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d107      	bne.n	8005df4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f022 0208 	bic.w	r2, r2, #8
 8005df2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d003      	beq.n	8005e04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e08:	2220      	movs	r2, #32
 8005e0a:	409a      	lsls	r2, r3
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	4013      	ands	r3, r2
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f000 808e 	beq.w	8005f32 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0310 	and.w	r3, r3, #16
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 8086 	beq.w	8005f32 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	409a      	lsls	r2, r3
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b05      	cmp	r3, #5
 8005e3c:	d136      	bne.n	8005eac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f022 0216 	bic.w	r2, r2, #22
 8005e4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	695a      	ldr	r2, [r3, #20]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d103      	bne.n	8005e6e <HAL_DMA_IRQHandler+0x1da>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d007      	beq.n	8005e7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f022 0208 	bic.w	r2, r2, #8
 8005e7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e82:	223f      	movs	r2, #63	; 0x3f
 8005e84:	409a      	lsls	r2, r3
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d07d      	beq.n	8005f9e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	4798      	blx	r3
        }
        return;
 8005eaa:	e078      	b.n	8005f9e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d01c      	beq.n	8005ef4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d108      	bne.n	8005eda <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d030      	beq.n	8005f32 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	4798      	blx	r3
 8005ed8:	e02b      	b.n	8005f32 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d027      	beq.n	8005f32 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	4798      	blx	r3
 8005eea:	e022      	b.n	8005f32 <HAL_DMA_IRQHandler+0x29e>
 8005eec:	20000024 	.word	0x20000024
 8005ef0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d10f      	bne.n	8005f22 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f022 0210 	bic.w	r2, r2, #16
 8005f10:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d032      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d022      	beq.n	8005f8c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2205      	movs	r2, #5
 8005f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f022 0201 	bic.w	r2, r2, #1
 8005f5c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	3301      	adds	r3, #1
 8005f62:	60bb      	str	r3, [r7, #8]
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d307      	bcc.n	8005f7a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0301 	and.w	r3, r3, #1
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1f2      	bne.n	8005f5e <HAL_DMA_IRQHandler+0x2ca>
 8005f78:	e000      	b.n	8005f7c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005f7a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d005      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	4798      	blx	r3
 8005f9c:	e000      	b.n	8005fa0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005f9e:	bf00      	nop
    }
  }
}
 8005fa0:	3718      	adds	r7, #24
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop

08005fa8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	607a      	str	r2, [r7, #4]
 8005fb4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005fc4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	683a      	ldr	r2, [r7, #0]
 8005fcc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	2b40      	cmp	r3, #64	; 0x40
 8005fd4:	d108      	bne.n	8005fe8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68ba      	ldr	r2, [r7, #8]
 8005fe4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005fe6:	e007      	b.n	8005ff8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	60da      	str	r2, [r3, #12]
}
 8005ff8:	bf00      	nop
 8005ffa:	3714      	adds	r7, #20
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	b2db      	uxtb	r3, r3
 8006012:	3b10      	subs	r3, #16
 8006014:	4a14      	ldr	r2, [pc, #80]	; (8006068 <DMA_CalcBaseAndBitshift+0x64>)
 8006016:	fba2 2303 	umull	r2, r3, r2, r3
 800601a:	091b      	lsrs	r3, r3, #4
 800601c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800601e:	4a13      	ldr	r2, [pc, #76]	; (800606c <DMA_CalcBaseAndBitshift+0x68>)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	4413      	add	r3, r2
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	461a      	mov	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2b03      	cmp	r3, #3
 8006030:	d909      	bls.n	8006046 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800603a:	f023 0303 	bic.w	r3, r3, #3
 800603e:	1d1a      	adds	r2, r3, #4
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	659a      	str	r2, [r3, #88]	; 0x58
 8006044:	e007      	b.n	8006056 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800604e:	f023 0303 	bic.w	r3, r3, #3
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800605a:	4618      	mov	r0, r3
 800605c:	3714      	adds	r7, #20
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	aaaaaaab 	.word	0xaaaaaaab
 800606c:	0800ab08 	.word	0x0800ab08

08006070 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006078:	2300      	movs	r3, #0
 800607a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006080:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d11f      	bne.n	80060ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	2b03      	cmp	r3, #3
 800608e:	d855      	bhi.n	800613c <DMA_CheckFifoParam+0xcc>
 8006090:	a201      	add	r2, pc, #4	; (adr r2, 8006098 <DMA_CheckFifoParam+0x28>)
 8006092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006096:	bf00      	nop
 8006098:	080060a9 	.word	0x080060a9
 800609c:	080060bb 	.word	0x080060bb
 80060a0:	080060a9 	.word	0x080060a9
 80060a4:	0800613d 	.word	0x0800613d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d045      	beq.n	8006140 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060b8:	e042      	b.n	8006140 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80060c2:	d13f      	bne.n	8006144 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060c8:	e03c      	b.n	8006144 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060d2:	d121      	bne.n	8006118 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	2b03      	cmp	r3, #3
 80060d8:	d836      	bhi.n	8006148 <DMA_CheckFifoParam+0xd8>
 80060da:	a201      	add	r2, pc, #4	; (adr r2, 80060e0 <DMA_CheckFifoParam+0x70>)
 80060dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e0:	080060f1 	.word	0x080060f1
 80060e4:	080060f7 	.word	0x080060f7
 80060e8:	080060f1 	.word	0x080060f1
 80060ec:	08006109 	.word	0x08006109
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	73fb      	strb	r3, [r7, #15]
      break;
 80060f4:	e02f      	b.n	8006156 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d024      	beq.n	800614c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006106:	e021      	b.n	800614c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006110:	d11e      	bne.n	8006150 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006116:	e01b      	b.n	8006150 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2b02      	cmp	r3, #2
 800611c:	d902      	bls.n	8006124 <DMA_CheckFifoParam+0xb4>
 800611e:	2b03      	cmp	r3, #3
 8006120:	d003      	beq.n	800612a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006122:	e018      	b.n	8006156 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	73fb      	strb	r3, [r7, #15]
      break;
 8006128:	e015      	b.n	8006156 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00e      	beq.n	8006154 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	73fb      	strb	r3, [r7, #15]
      break;
 800613a:	e00b      	b.n	8006154 <DMA_CheckFifoParam+0xe4>
      break;
 800613c:	bf00      	nop
 800613e:	e00a      	b.n	8006156 <DMA_CheckFifoParam+0xe6>
      break;
 8006140:	bf00      	nop
 8006142:	e008      	b.n	8006156 <DMA_CheckFifoParam+0xe6>
      break;
 8006144:	bf00      	nop
 8006146:	e006      	b.n	8006156 <DMA_CheckFifoParam+0xe6>
      break;
 8006148:	bf00      	nop
 800614a:	e004      	b.n	8006156 <DMA_CheckFifoParam+0xe6>
      break;
 800614c:	bf00      	nop
 800614e:	e002      	b.n	8006156 <DMA_CheckFifoParam+0xe6>
      break;   
 8006150:	bf00      	nop
 8006152:	e000      	b.n	8006156 <DMA_CheckFifoParam+0xe6>
      break;
 8006154:	bf00      	nop
    }
  } 
  
  return status; 
 8006156:	7bfb      	ldrb	r3, [r7, #15]
}
 8006158:	4618      	mov	r0, r3
 800615a:	3714      	adds	r7, #20
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b086      	sub	sp, #24
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006176:	4b23      	ldr	r3, [pc, #140]	; (8006204 <HAL_FLASH_Program+0xa0>)
 8006178:	7e1b      	ldrb	r3, [r3, #24]
 800617a:	2b01      	cmp	r3, #1
 800617c:	d101      	bne.n	8006182 <HAL_FLASH_Program+0x1e>
 800617e:	2302      	movs	r3, #2
 8006180:	e03b      	b.n	80061fa <HAL_FLASH_Program+0x96>
 8006182:	4b20      	ldr	r3, [pc, #128]	; (8006204 <HAL_FLASH_Program+0xa0>)
 8006184:	2201      	movs	r2, #1
 8006186:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006188:	f24c 3050 	movw	r0, #50000	; 0xc350
 800618c:	f000 f87c 	bl	8006288 <FLASH_WaitForLastOperation>
 8006190:	4603      	mov	r3, r0
 8006192:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8006194:	7dfb      	ldrb	r3, [r7, #23]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d12b      	bne.n	80061f2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d105      	bne.n	80061ac <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80061a0:	783b      	ldrb	r3, [r7, #0]
 80061a2:	4619      	mov	r1, r3
 80061a4:	68b8      	ldr	r0, [r7, #8]
 80061a6:	f000 f925 	bl	80063f4 <FLASH_Program_Byte>
 80061aa:	e016      	b.n	80061da <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d105      	bne.n	80061be <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80061b2:	883b      	ldrh	r3, [r7, #0]
 80061b4:	4619      	mov	r1, r3
 80061b6:	68b8      	ldr	r0, [r7, #8]
 80061b8:	f000 f8f8 	bl	80063ac <FLASH_Program_HalfWord>
 80061bc:	e00d      	b.n	80061da <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d105      	bne.n	80061d0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	4619      	mov	r1, r3
 80061c8:	68b8      	ldr	r0, [r7, #8]
 80061ca:	f000 f8cd 	bl	8006368 <FLASH_Program_Word>
 80061ce:	e004      	b.n	80061da <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80061d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061d4:	68b8      	ldr	r0, [r7, #8]
 80061d6:	f000 f897 	bl	8006308 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80061da:	f24c 3050 	movw	r0, #50000	; 0xc350
 80061de:	f000 f853 	bl	8006288 <FLASH_WaitForLastOperation>
 80061e2:	4603      	mov	r3, r0
 80061e4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80061e6:	4b08      	ldr	r3, [pc, #32]	; (8006208 <HAL_FLASH_Program+0xa4>)
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	4a07      	ldr	r2, [pc, #28]	; (8006208 <HAL_FLASH_Program+0xa4>)
 80061ec:	f023 0301 	bic.w	r3, r3, #1
 80061f0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80061f2:	4b04      	ldr	r3, [pc, #16]	; (8006204 <HAL_FLASH_Program+0xa0>)
 80061f4:	2200      	movs	r2, #0
 80061f6:	761a      	strb	r2, [r3, #24]
  
  return status;
 80061f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3718      	adds	r7, #24
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	20000d34 	.word	0x20000d34
 8006208:	40023c00 	.word	0x40023c00

0800620c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006212:	2300      	movs	r3, #0
 8006214:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006216:	4b0b      	ldr	r3, [pc, #44]	; (8006244 <HAL_FLASH_Unlock+0x38>)
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	2b00      	cmp	r3, #0
 800621c:	da0b      	bge.n	8006236 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800621e:	4b09      	ldr	r3, [pc, #36]	; (8006244 <HAL_FLASH_Unlock+0x38>)
 8006220:	4a09      	ldr	r2, [pc, #36]	; (8006248 <HAL_FLASH_Unlock+0x3c>)
 8006222:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006224:	4b07      	ldr	r3, [pc, #28]	; (8006244 <HAL_FLASH_Unlock+0x38>)
 8006226:	4a09      	ldr	r2, [pc, #36]	; (800624c <HAL_FLASH_Unlock+0x40>)
 8006228:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800622a:	4b06      	ldr	r3, [pc, #24]	; (8006244 <HAL_FLASH_Unlock+0x38>)
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	2b00      	cmp	r3, #0
 8006230:	da01      	bge.n	8006236 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8006236:	79fb      	ldrb	r3, [r7, #7]
}
 8006238:	4618      	mov	r0, r3
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr
 8006244:	40023c00 	.word	0x40023c00
 8006248:	45670123 	.word	0x45670123
 800624c:	cdef89ab 	.word	0xcdef89ab

08006250 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006250:	b480      	push	{r7}
 8006252:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8006254:	4b05      	ldr	r3, [pc, #20]	; (800626c <HAL_FLASH_Lock+0x1c>)
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	4a04      	ldr	r2, [pc, #16]	; (800626c <HAL_FLASH_Lock+0x1c>)
 800625a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800625e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr
 800626c:	40023c00 	.word	0x40023c00

08006270 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8006270:	b480      	push	{r7}
 8006272:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8006274:	4b03      	ldr	r3, [pc, #12]	; (8006284 <HAL_FLASH_GetError+0x14>)
 8006276:	69db      	ldr	r3, [r3, #28]
}  
 8006278:	4618      	mov	r0, r3
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	20000d34 	.word	0x20000d34

08006288 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006290:	2300      	movs	r3, #0
 8006292:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006294:	4b1a      	ldr	r3, [pc, #104]	; (8006300 <FLASH_WaitForLastOperation+0x78>)
 8006296:	2200      	movs	r2, #0
 8006298:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800629a:	f7ff f9d1 	bl	8005640 <HAL_GetTick>
 800629e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80062a0:	e010      	b.n	80062c4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062a8:	d00c      	beq.n	80062c4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d007      	beq.n	80062c0 <FLASH_WaitForLastOperation+0x38>
 80062b0:	f7ff f9c6 	bl	8005640 <HAL_GetTick>
 80062b4:	4602      	mov	r2, r0
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d201      	bcs.n	80062c4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e019      	b.n	80062f8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80062c4:	4b0f      	ldr	r3, [pc, #60]	; (8006304 <FLASH_WaitForLastOperation+0x7c>)
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1e8      	bne.n	80062a2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80062d0:	4b0c      	ldr	r3, [pc, #48]	; (8006304 <FLASH_WaitForLastOperation+0x7c>)
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	f003 0301 	and.w	r3, r3, #1
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d002      	beq.n	80062e2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80062dc:	4b09      	ldr	r3, [pc, #36]	; (8006304 <FLASH_WaitForLastOperation+0x7c>)
 80062de:	2201      	movs	r2, #1
 80062e0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80062e2:	4b08      	ldr	r3, [pc, #32]	; (8006304 <FLASH_WaitForLastOperation+0x7c>)
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d003      	beq.n	80062f6 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80062ee:	f000 f8a3 	bl	8006438 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e000      	b.n	80062f8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80062f6:	2300      	movs	r3, #0
  
}  
 80062f8:	4618      	mov	r0, r3
 80062fa:	3710      	adds	r7, #16
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	20000d34 	.word	0x20000d34
 8006304:	40023c00 	.word	0x40023c00

08006308 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006308:	b490      	push	{r4, r7}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006314:	4b13      	ldr	r3, [pc, #76]	; (8006364 <FLASH_Program_DoubleWord+0x5c>)
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	4a12      	ldr	r2, [pc, #72]	; (8006364 <FLASH_Program_DoubleWord+0x5c>)
 800631a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800631e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8006320:	4b10      	ldr	r3, [pc, #64]	; (8006364 <FLASH_Program_DoubleWord+0x5c>)
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	4a0f      	ldr	r2, [pc, #60]	; (8006364 <FLASH_Program_DoubleWord+0x5c>)
 8006326:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800632a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800632c:	4b0d      	ldr	r3, [pc, #52]	; (8006364 <FLASH_Program_DoubleWord+0x5c>)
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	4a0c      	ldr	r2, [pc, #48]	; (8006364 <FLASH_Program_DoubleWord+0x5c>)
 8006332:	f043 0301 	orr.w	r3, r3, #1
 8006336:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	683a      	ldr	r2, [r7, #0]
 800633c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800633e:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8006342:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006346:	f04f 0300 	mov.w	r3, #0
 800634a:	f04f 0400 	mov.w	r4, #0
 800634e:	0013      	movs	r3, r2
 8006350:	2400      	movs	r4, #0
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	3204      	adds	r2, #4
 8006356:	6013      	str	r3, [r2, #0]
}
 8006358:	bf00      	nop
 800635a:	3710      	adds	r7, #16
 800635c:	46bd      	mov	sp, r7
 800635e:	bc90      	pop	{r4, r7}
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	40023c00 	.word	0x40023c00

08006368 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006372:	4b0d      	ldr	r3, [pc, #52]	; (80063a8 <FLASH_Program_Word+0x40>)
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	4a0c      	ldr	r2, [pc, #48]	; (80063a8 <FLASH_Program_Word+0x40>)
 8006378:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800637c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800637e:	4b0a      	ldr	r3, [pc, #40]	; (80063a8 <FLASH_Program_Word+0x40>)
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	4a09      	ldr	r2, [pc, #36]	; (80063a8 <FLASH_Program_Word+0x40>)
 8006384:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006388:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800638a:	4b07      	ldr	r3, [pc, #28]	; (80063a8 <FLASH_Program_Word+0x40>)
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	4a06      	ldr	r2, [pc, #24]	; (80063a8 <FLASH_Program_Word+0x40>)
 8006390:	f043 0301 	orr.w	r3, r3, #1
 8006394:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	683a      	ldr	r2, [r7, #0]
 800639a:	601a      	str	r2, [r3, #0]
}
 800639c:	bf00      	nop
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr
 80063a8:	40023c00 	.word	0x40023c00

080063ac <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	460b      	mov	r3, r1
 80063b6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80063b8:	4b0d      	ldr	r3, [pc, #52]	; (80063f0 <FLASH_Program_HalfWord+0x44>)
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	4a0c      	ldr	r2, [pc, #48]	; (80063f0 <FLASH_Program_HalfWord+0x44>)
 80063be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80063c4:	4b0a      	ldr	r3, [pc, #40]	; (80063f0 <FLASH_Program_HalfWord+0x44>)
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	4a09      	ldr	r2, [pc, #36]	; (80063f0 <FLASH_Program_HalfWord+0x44>)
 80063ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80063d0:	4b07      	ldr	r3, [pc, #28]	; (80063f0 <FLASH_Program_HalfWord+0x44>)
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	4a06      	ldr	r2, [pc, #24]	; (80063f0 <FLASH_Program_HalfWord+0x44>)
 80063d6:	f043 0301 	orr.w	r3, r3, #1
 80063da:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	887a      	ldrh	r2, [r7, #2]
 80063e0:	801a      	strh	r2, [r3, #0]
}
 80063e2:	bf00      	nop
 80063e4:	370c      	adds	r7, #12
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop
 80063f0:	40023c00 	.word	0x40023c00

080063f4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	460b      	mov	r3, r1
 80063fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006400:	4b0c      	ldr	r3, [pc, #48]	; (8006434 <FLASH_Program_Byte+0x40>)
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	4a0b      	ldr	r2, [pc, #44]	; (8006434 <FLASH_Program_Byte+0x40>)
 8006406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800640a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800640c:	4b09      	ldr	r3, [pc, #36]	; (8006434 <FLASH_Program_Byte+0x40>)
 800640e:	4a09      	ldr	r2, [pc, #36]	; (8006434 <FLASH_Program_Byte+0x40>)
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006414:	4b07      	ldr	r3, [pc, #28]	; (8006434 <FLASH_Program_Byte+0x40>)
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	4a06      	ldr	r2, [pc, #24]	; (8006434 <FLASH_Program_Byte+0x40>)
 800641a:	f043 0301 	orr.w	r3, r3, #1
 800641e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	78fa      	ldrb	r2, [r7, #3]
 8006424:	701a      	strb	r2, [r3, #0]
}
 8006426:	bf00      	nop
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	40023c00 	.word	0x40023c00

08006438 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8006438:	b480      	push	{r7}
 800643a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800643c:	4b2f      	ldr	r3, [pc, #188]	; (80064fc <FLASH_SetErrorCode+0xc4>)
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	f003 0310 	and.w	r3, r3, #16
 8006444:	2b00      	cmp	r3, #0
 8006446:	d008      	beq.n	800645a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006448:	4b2d      	ldr	r3, [pc, #180]	; (8006500 <FLASH_SetErrorCode+0xc8>)
 800644a:	69db      	ldr	r3, [r3, #28]
 800644c:	f043 0310 	orr.w	r3, r3, #16
 8006450:	4a2b      	ldr	r2, [pc, #172]	; (8006500 <FLASH_SetErrorCode+0xc8>)
 8006452:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8006454:	4b29      	ldr	r3, [pc, #164]	; (80064fc <FLASH_SetErrorCode+0xc4>)
 8006456:	2210      	movs	r2, #16
 8006458:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800645a:	4b28      	ldr	r3, [pc, #160]	; (80064fc <FLASH_SetErrorCode+0xc4>)
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	f003 0320 	and.w	r3, r3, #32
 8006462:	2b00      	cmp	r3, #0
 8006464:	d008      	beq.n	8006478 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8006466:	4b26      	ldr	r3, [pc, #152]	; (8006500 <FLASH_SetErrorCode+0xc8>)
 8006468:	69db      	ldr	r3, [r3, #28]
 800646a:	f043 0308 	orr.w	r3, r3, #8
 800646e:	4a24      	ldr	r2, [pc, #144]	; (8006500 <FLASH_SetErrorCode+0xc8>)
 8006470:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8006472:	4b22      	ldr	r3, [pc, #136]	; (80064fc <FLASH_SetErrorCode+0xc4>)
 8006474:	2220      	movs	r2, #32
 8006476:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8006478:	4b20      	ldr	r3, [pc, #128]	; (80064fc <FLASH_SetErrorCode+0xc4>)
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006480:	2b00      	cmp	r3, #0
 8006482:	d008      	beq.n	8006496 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8006484:	4b1e      	ldr	r3, [pc, #120]	; (8006500 <FLASH_SetErrorCode+0xc8>)
 8006486:	69db      	ldr	r3, [r3, #28]
 8006488:	f043 0304 	orr.w	r3, r3, #4
 800648c:	4a1c      	ldr	r2, [pc, #112]	; (8006500 <FLASH_SetErrorCode+0xc8>)
 800648e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8006490:	4b1a      	ldr	r3, [pc, #104]	; (80064fc <FLASH_SetErrorCode+0xc4>)
 8006492:	2240      	movs	r2, #64	; 0x40
 8006494:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8006496:	4b19      	ldr	r3, [pc, #100]	; (80064fc <FLASH_SetErrorCode+0xc4>)
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d008      	beq.n	80064b4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80064a2:	4b17      	ldr	r3, [pc, #92]	; (8006500 <FLASH_SetErrorCode+0xc8>)
 80064a4:	69db      	ldr	r3, [r3, #28]
 80064a6:	f043 0302 	orr.w	r3, r3, #2
 80064aa:	4a15      	ldr	r2, [pc, #84]	; (8006500 <FLASH_SetErrorCode+0xc8>)
 80064ac:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80064ae:	4b13      	ldr	r3, [pc, #76]	; (80064fc <FLASH_SetErrorCode+0xc4>)
 80064b0:	2280      	movs	r2, #128	; 0x80
 80064b2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80064b4:	4b11      	ldr	r3, [pc, #68]	; (80064fc <FLASH_SetErrorCode+0xc4>)
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d009      	beq.n	80064d4 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80064c0:	4b0f      	ldr	r3, [pc, #60]	; (8006500 <FLASH_SetErrorCode+0xc8>)
 80064c2:	69db      	ldr	r3, [r3, #28]
 80064c4:	f043 0301 	orr.w	r3, r3, #1
 80064c8:	4a0d      	ldr	r2, [pc, #52]	; (8006500 <FLASH_SetErrorCode+0xc8>)
 80064ca:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80064cc:	4b0b      	ldr	r3, [pc, #44]	; (80064fc <FLASH_SetErrorCode+0xc4>)
 80064ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064d2:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80064d4:	4b09      	ldr	r3, [pc, #36]	; (80064fc <FLASH_SetErrorCode+0xc4>)
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	f003 0302 	and.w	r3, r3, #2
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d008      	beq.n	80064f2 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80064e0:	4b07      	ldr	r3, [pc, #28]	; (8006500 <FLASH_SetErrorCode+0xc8>)
 80064e2:	69db      	ldr	r3, [r3, #28]
 80064e4:	f043 0320 	orr.w	r3, r3, #32
 80064e8:	4a05      	ldr	r2, [pc, #20]	; (8006500 <FLASH_SetErrorCode+0xc8>)
 80064ea:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80064ec:	4b03      	ldr	r3, [pc, #12]	; (80064fc <FLASH_SetErrorCode+0xc4>)
 80064ee:	2202      	movs	r2, #2
 80064f0:	60da      	str	r2, [r3, #12]
  }
}
 80064f2:	bf00      	nop
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr
 80064fc:	40023c00 	.word	0x40023c00
 8006500:	20000d34 	.word	0x20000d34

08006504 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8006512:	2300      	movs	r3, #0
 8006514:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006516:	4b31      	ldr	r3, [pc, #196]	; (80065dc <HAL_FLASHEx_Erase+0xd8>)
 8006518:	7e1b      	ldrb	r3, [r3, #24]
 800651a:	2b01      	cmp	r3, #1
 800651c:	d101      	bne.n	8006522 <HAL_FLASHEx_Erase+0x1e>
 800651e:	2302      	movs	r3, #2
 8006520:	e058      	b.n	80065d4 <HAL_FLASHEx_Erase+0xd0>
 8006522:	4b2e      	ldr	r3, [pc, #184]	; (80065dc <HAL_FLASHEx_Erase+0xd8>)
 8006524:	2201      	movs	r2, #1
 8006526:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006528:	f24c 3050 	movw	r0, #50000	; 0xc350
 800652c:	f7ff feac 	bl	8006288 <FLASH_WaitForLastOperation>
 8006530:	4603      	mov	r3, r0
 8006532:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8006534:	7bfb      	ldrb	r3, [r7, #15]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d148      	bne.n	80065cc <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006540:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2b01      	cmp	r3, #1
 8006548:	d115      	bne.n	8006576 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	b2da      	uxtb	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	4619      	mov	r1, r3
 8006556:	4610      	mov	r0, r2
 8006558:	f000 f844 	bl	80065e4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800655c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006560:	f7ff fe92 	bl	8006288 <FLASH_WaitForLastOperation>
 8006564:	4603      	mov	r3, r0
 8006566:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8006568:	4b1d      	ldr	r3, [pc, #116]	; (80065e0 <HAL_FLASHEx_Erase+0xdc>)
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	4a1c      	ldr	r2, [pc, #112]	; (80065e0 <HAL_FLASHEx_Erase+0xdc>)
 800656e:	f023 0304 	bic.w	r3, r3, #4
 8006572:	6113      	str	r3, [r2, #16]
 8006574:	e028      	b.n	80065c8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	60bb      	str	r3, [r7, #8]
 800657c:	e01c      	b.n	80065b8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	b2db      	uxtb	r3, r3
 8006584:	4619      	mov	r1, r3
 8006586:	68b8      	ldr	r0, [r7, #8]
 8006588:	f000 f850 	bl	800662c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800658c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006590:	f7ff fe7a 	bl	8006288 <FLASH_WaitForLastOperation>
 8006594:	4603      	mov	r3, r0
 8006596:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8006598:	4b11      	ldr	r3, [pc, #68]	; (80065e0 <HAL_FLASHEx_Erase+0xdc>)
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	4a10      	ldr	r2, [pc, #64]	; (80065e0 <HAL_FLASHEx_Erase+0xdc>)
 800659e:	f023 037a 	bic.w	r3, r3, #122	; 0x7a
 80065a2:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80065a4:	7bfb      	ldrb	r3, [r7, #15]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d003      	beq.n	80065b2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	68ba      	ldr	r2, [r7, #8]
 80065ae:	601a      	str	r2, [r3, #0]
          break;
 80065b0:	e00a      	b.n	80065c8 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	3301      	adds	r3, #1
 80065b6:	60bb      	str	r3, [r7, #8]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	68da      	ldr	r2, [r3, #12]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	4413      	add	r3, r2
 80065c2:	68ba      	ldr	r2, [r7, #8]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d3da      	bcc.n	800657e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 80065c8:	f000 f878 	bl	80066bc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80065cc:	4b03      	ldr	r3, [pc, #12]	; (80065dc <HAL_FLASHEx_Erase+0xd8>)
 80065ce:	2200      	movs	r2, #0
 80065d0:	761a      	strb	r2, [r3, #24]

  return status;
 80065d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3710      	adds	r7, #16
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	20000d34 	.word	0x20000d34
 80065e0:	40023c00 	.word	0x40023c00

080065e4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	4603      	mov	r3, r0
 80065ec:	6039      	str	r1, [r7, #0]
 80065ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80065f0:	4b0d      	ldr	r3, [pc, #52]	; (8006628 <FLASH_MassErase+0x44>)
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	4a0c      	ldr	r2, [pc, #48]	; (8006628 <FLASH_MassErase+0x44>)
 80065f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80065fc:	4b0a      	ldr	r3, [pc, #40]	; (8006628 <FLASH_MassErase+0x44>)
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	4a09      	ldr	r2, [pc, #36]	; (8006628 <FLASH_MassErase+0x44>)
 8006602:	f043 0304 	orr.w	r3, r3, #4
 8006606:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8006608:	4b07      	ldr	r3, [pc, #28]	; (8006628 <FLASH_MassErase+0x44>)
 800660a:	691a      	ldr	r2, [r3, #16]
 800660c:	79fb      	ldrb	r3, [r7, #7]
 800660e:	021b      	lsls	r3, r3, #8
 8006610:	4313      	orrs	r3, r2
 8006612:	4a05      	ldr	r2, [pc, #20]	; (8006628 <FLASH_MassErase+0x44>)
 8006614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006618:	6113      	str	r3, [r2, #16]
}
 800661a:	bf00      	nop
 800661c:	370c      	adds	r7, #12
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	40023c00 	.word	0x40023c00

0800662c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	460b      	mov	r3, r1
 8006636:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8006638:	2300      	movs	r3, #0
 800663a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800663c:	78fb      	ldrb	r3, [r7, #3]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d102      	bne.n	8006648 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8006642:	2300      	movs	r3, #0
 8006644:	60fb      	str	r3, [r7, #12]
 8006646:	e010      	b.n	800666a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8006648:	78fb      	ldrb	r3, [r7, #3]
 800664a:	2b01      	cmp	r3, #1
 800664c:	d103      	bne.n	8006656 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800664e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006652:	60fb      	str	r3, [r7, #12]
 8006654:	e009      	b.n	800666a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8006656:	78fb      	ldrb	r3, [r7, #3]
 8006658:	2b02      	cmp	r3, #2
 800665a:	d103      	bne.n	8006664 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800665c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006660:	60fb      	str	r3, [r7, #12]
 8006662:	e002      	b.n	800666a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8006664:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006668:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800666a:	4b13      	ldr	r3, [pc, #76]	; (80066b8 <FLASH_Erase_Sector+0x8c>)
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	4a12      	ldr	r2, [pc, #72]	; (80066b8 <FLASH_Erase_Sector+0x8c>)
 8006670:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006674:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8006676:	4b10      	ldr	r3, [pc, #64]	; (80066b8 <FLASH_Erase_Sector+0x8c>)
 8006678:	691a      	ldr	r2, [r3, #16]
 800667a:	490f      	ldr	r1, [pc, #60]	; (80066b8 <FLASH_Erase_Sector+0x8c>)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	4313      	orrs	r3, r2
 8006680:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8006682:	4b0d      	ldr	r3, [pc, #52]	; (80066b8 <FLASH_Erase_Sector+0x8c>)
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	4a0c      	ldr	r2, [pc, #48]	; (80066b8 <FLASH_Erase_Sector+0x8c>)
 8006688:	f023 0378 	bic.w	r3, r3, #120	; 0x78
 800668c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800668e:	4b0a      	ldr	r3, [pc, #40]	; (80066b8 <FLASH_Erase_Sector+0x8c>)
 8006690:	691a      	ldr	r2, [r3, #16]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	00db      	lsls	r3, r3, #3
 8006696:	4313      	orrs	r3, r2
 8006698:	4a07      	ldr	r2, [pc, #28]	; (80066b8 <FLASH_Erase_Sector+0x8c>)
 800669a:	f043 0302 	orr.w	r3, r3, #2
 800669e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80066a0:	4b05      	ldr	r3, [pc, #20]	; (80066b8 <FLASH_Erase_Sector+0x8c>)
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	4a04      	ldr	r2, [pc, #16]	; (80066b8 <FLASH_Erase_Sector+0x8c>)
 80066a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066aa:	6113      	str	r3, [r2, #16]
}
 80066ac:	bf00      	nop
 80066ae:	3714      	adds	r7, #20
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr
 80066b8:	40023c00 	.word	0x40023c00

080066bc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80066bc:	b480      	push	{r7}
 80066be:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80066c0:	4b20      	ldr	r3, [pc, #128]	; (8006744 <FLASH_FlushCaches+0x88>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d017      	beq.n	80066fc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80066cc:	4b1d      	ldr	r3, [pc, #116]	; (8006744 <FLASH_FlushCaches+0x88>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a1c      	ldr	r2, [pc, #112]	; (8006744 <FLASH_FlushCaches+0x88>)
 80066d2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066d6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80066d8:	4b1a      	ldr	r3, [pc, #104]	; (8006744 <FLASH_FlushCaches+0x88>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a19      	ldr	r2, [pc, #100]	; (8006744 <FLASH_FlushCaches+0x88>)
 80066de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80066e2:	6013      	str	r3, [r2, #0]
 80066e4:	4b17      	ldr	r3, [pc, #92]	; (8006744 <FLASH_FlushCaches+0x88>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a16      	ldr	r2, [pc, #88]	; (8006744 <FLASH_FlushCaches+0x88>)
 80066ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066ee:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80066f0:	4b14      	ldr	r3, [pc, #80]	; (8006744 <FLASH_FlushCaches+0x88>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a13      	ldr	r2, [pc, #76]	; (8006744 <FLASH_FlushCaches+0x88>)
 80066f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80066fa:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80066fc:	4b11      	ldr	r3, [pc, #68]	; (8006744 <FLASH_FlushCaches+0x88>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006704:	2b00      	cmp	r3, #0
 8006706:	d017      	beq.n	8006738 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8006708:	4b0e      	ldr	r3, [pc, #56]	; (8006744 <FLASH_FlushCaches+0x88>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a0d      	ldr	r2, [pc, #52]	; (8006744 <FLASH_FlushCaches+0x88>)
 800670e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006712:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006714:	4b0b      	ldr	r3, [pc, #44]	; (8006744 <FLASH_FlushCaches+0x88>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a0a      	ldr	r2, [pc, #40]	; (8006744 <FLASH_FlushCaches+0x88>)
 800671a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800671e:	6013      	str	r3, [r2, #0]
 8006720:	4b08      	ldr	r3, [pc, #32]	; (8006744 <FLASH_FlushCaches+0x88>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a07      	ldr	r2, [pc, #28]	; (8006744 <FLASH_FlushCaches+0x88>)
 8006726:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800672a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800672c:	4b05      	ldr	r3, [pc, #20]	; (8006744 <FLASH_FlushCaches+0x88>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a04      	ldr	r2, [pc, #16]	; (8006744 <FLASH_FlushCaches+0x88>)
 8006732:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006736:	6013      	str	r3, [r2, #0]
  }
}
 8006738:	bf00      	nop
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	40023c00 	.word	0x40023c00

08006748 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006748:	b480      	push	{r7}
 800674a:	b089      	sub	sp, #36	; 0x24
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006752:	2300      	movs	r3, #0
 8006754:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006756:	2300      	movs	r3, #0
 8006758:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800675a:	2300      	movs	r3, #0
 800675c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800675e:	2300      	movs	r3, #0
 8006760:	61fb      	str	r3, [r7, #28]
 8006762:	e165      	b.n	8006a30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006764:	2201      	movs	r2, #1
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	fa02 f303 	lsl.w	r3, r2, r3
 800676c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	697a      	ldr	r2, [r7, #20]
 8006774:	4013      	ands	r3, r2
 8006776:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	429a      	cmp	r2, r3
 800677e:	f040 8154 	bne.w	8006a2a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	2b01      	cmp	r3, #1
 8006788:	d00b      	beq.n	80067a2 <HAL_GPIO_Init+0x5a>
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	2b02      	cmp	r3, #2
 8006790:	d007      	beq.n	80067a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006796:	2b11      	cmp	r3, #17
 8006798:	d003      	beq.n	80067a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	2b12      	cmp	r3, #18
 80067a0:	d130      	bne.n	8006804 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	005b      	lsls	r3, r3, #1
 80067ac:	2203      	movs	r2, #3
 80067ae:	fa02 f303 	lsl.w	r3, r2, r3
 80067b2:	43db      	mvns	r3, r3
 80067b4:	69ba      	ldr	r2, [r7, #24]
 80067b6:	4013      	ands	r3, r2
 80067b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	68da      	ldr	r2, [r3, #12]
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	005b      	lsls	r3, r3, #1
 80067c2:	fa02 f303 	lsl.w	r3, r2, r3
 80067c6:	69ba      	ldr	r2, [r7, #24]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	69ba      	ldr	r2, [r7, #24]
 80067d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80067d8:	2201      	movs	r2, #1
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	fa02 f303 	lsl.w	r3, r2, r3
 80067e0:	43db      	mvns	r3, r3
 80067e2:	69ba      	ldr	r2, [r7, #24]
 80067e4:	4013      	ands	r3, r2
 80067e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	091b      	lsrs	r3, r3, #4
 80067ee:	f003 0201 	and.w	r2, r3, #1
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	fa02 f303 	lsl.w	r3, r2, r3
 80067f8:	69ba      	ldr	r2, [r7, #24]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	69ba      	ldr	r2, [r7, #24]
 8006802:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	005b      	lsls	r3, r3, #1
 800680e:	2203      	movs	r2, #3
 8006810:	fa02 f303 	lsl.w	r3, r2, r3
 8006814:	43db      	mvns	r3, r3
 8006816:	69ba      	ldr	r2, [r7, #24]
 8006818:	4013      	ands	r3, r2
 800681a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	689a      	ldr	r2, [r3, #8]
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	005b      	lsls	r3, r3, #1
 8006824:	fa02 f303 	lsl.w	r3, r2, r3
 8006828:	69ba      	ldr	r2, [r7, #24]
 800682a:	4313      	orrs	r3, r2
 800682c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	69ba      	ldr	r2, [r7, #24]
 8006832:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	2b02      	cmp	r3, #2
 800683a:	d003      	beq.n	8006844 <HAL_GPIO_Init+0xfc>
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	2b12      	cmp	r3, #18
 8006842:	d123      	bne.n	800688c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	08da      	lsrs	r2, r3, #3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	3208      	adds	r2, #8
 800684c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006850:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	f003 0307 	and.w	r3, r3, #7
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	220f      	movs	r2, #15
 800685c:	fa02 f303 	lsl.w	r3, r2, r3
 8006860:	43db      	mvns	r3, r3
 8006862:	69ba      	ldr	r2, [r7, #24]
 8006864:	4013      	ands	r3, r2
 8006866:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	691a      	ldr	r2, [r3, #16]
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	f003 0307 	and.w	r3, r3, #7
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	fa02 f303 	lsl.w	r3, r2, r3
 8006878:	69ba      	ldr	r2, [r7, #24]
 800687a:	4313      	orrs	r3, r2
 800687c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	08da      	lsrs	r2, r3, #3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	3208      	adds	r2, #8
 8006886:	69b9      	ldr	r1, [r7, #24]
 8006888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	005b      	lsls	r3, r3, #1
 8006896:	2203      	movs	r2, #3
 8006898:	fa02 f303 	lsl.w	r3, r2, r3
 800689c:	43db      	mvns	r3, r3
 800689e:	69ba      	ldr	r2, [r7, #24]
 80068a0:	4013      	ands	r3, r2
 80068a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	f003 0203 	and.w	r2, r3, #3
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	005b      	lsls	r3, r3, #1
 80068b0:	fa02 f303 	lsl.w	r3, r2, r3
 80068b4:	69ba      	ldr	r2, [r7, #24]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	69ba      	ldr	r2, [r7, #24]
 80068be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f000 80ae 	beq.w	8006a2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068ce:	2300      	movs	r3, #0
 80068d0:	60fb      	str	r3, [r7, #12]
 80068d2:	4b5c      	ldr	r3, [pc, #368]	; (8006a44 <HAL_GPIO_Init+0x2fc>)
 80068d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068d6:	4a5b      	ldr	r2, [pc, #364]	; (8006a44 <HAL_GPIO_Init+0x2fc>)
 80068d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80068dc:	6453      	str	r3, [r2, #68]	; 0x44
 80068de:	4b59      	ldr	r3, [pc, #356]	; (8006a44 <HAL_GPIO_Init+0x2fc>)
 80068e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068e6:	60fb      	str	r3, [r7, #12]
 80068e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80068ea:	4a57      	ldr	r2, [pc, #348]	; (8006a48 <HAL_GPIO_Init+0x300>)
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	089b      	lsrs	r3, r3, #2
 80068f0:	3302      	adds	r3, #2
 80068f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	f003 0303 	and.w	r3, r3, #3
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	220f      	movs	r2, #15
 8006902:	fa02 f303 	lsl.w	r3, r2, r3
 8006906:	43db      	mvns	r3, r3
 8006908:	69ba      	ldr	r2, [r7, #24]
 800690a:	4013      	ands	r3, r2
 800690c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a4e      	ldr	r2, [pc, #312]	; (8006a4c <HAL_GPIO_Init+0x304>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d025      	beq.n	8006962 <HAL_GPIO_Init+0x21a>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a4d      	ldr	r2, [pc, #308]	; (8006a50 <HAL_GPIO_Init+0x308>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d01f      	beq.n	800695e <HAL_GPIO_Init+0x216>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a4c      	ldr	r2, [pc, #304]	; (8006a54 <HAL_GPIO_Init+0x30c>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d019      	beq.n	800695a <HAL_GPIO_Init+0x212>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a4b      	ldr	r2, [pc, #300]	; (8006a58 <HAL_GPIO_Init+0x310>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d013      	beq.n	8006956 <HAL_GPIO_Init+0x20e>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a4a      	ldr	r2, [pc, #296]	; (8006a5c <HAL_GPIO_Init+0x314>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d00d      	beq.n	8006952 <HAL_GPIO_Init+0x20a>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a49      	ldr	r2, [pc, #292]	; (8006a60 <HAL_GPIO_Init+0x318>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d007      	beq.n	800694e <HAL_GPIO_Init+0x206>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a48      	ldr	r2, [pc, #288]	; (8006a64 <HAL_GPIO_Init+0x31c>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d101      	bne.n	800694a <HAL_GPIO_Init+0x202>
 8006946:	2306      	movs	r3, #6
 8006948:	e00c      	b.n	8006964 <HAL_GPIO_Init+0x21c>
 800694a:	2307      	movs	r3, #7
 800694c:	e00a      	b.n	8006964 <HAL_GPIO_Init+0x21c>
 800694e:	2305      	movs	r3, #5
 8006950:	e008      	b.n	8006964 <HAL_GPIO_Init+0x21c>
 8006952:	2304      	movs	r3, #4
 8006954:	e006      	b.n	8006964 <HAL_GPIO_Init+0x21c>
 8006956:	2303      	movs	r3, #3
 8006958:	e004      	b.n	8006964 <HAL_GPIO_Init+0x21c>
 800695a:	2302      	movs	r3, #2
 800695c:	e002      	b.n	8006964 <HAL_GPIO_Init+0x21c>
 800695e:	2301      	movs	r3, #1
 8006960:	e000      	b.n	8006964 <HAL_GPIO_Init+0x21c>
 8006962:	2300      	movs	r3, #0
 8006964:	69fa      	ldr	r2, [r7, #28]
 8006966:	f002 0203 	and.w	r2, r2, #3
 800696a:	0092      	lsls	r2, r2, #2
 800696c:	4093      	lsls	r3, r2
 800696e:	69ba      	ldr	r2, [r7, #24]
 8006970:	4313      	orrs	r3, r2
 8006972:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006974:	4934      	ldr	r1, [pc, #208]	; (8006a48 <HAL_GPIO_Init+0x300>)
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	089b      	lsrs	r3, r3, #2
 800697a:	3302      	adds	r3, #2
 800697c:	69ba      	ldr	r2, [r7, #24]
 800697e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006982:	4b39      	ldr	r3, [pc, #228]	; (8006a68 <HAL_GPIO_Init+0x320>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	43db      	mvns	r3, r3
 800698c:	69ba      	ldr	r2, [r7, #24]
 800698e:	4013      	ands	r3, r2
 8006990:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d003      	beq.n	80069a6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800699e:	69ba      	ldr	r2, [r7, #24]
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80069a6:	4a30      	ldr	r2, [pc, #192]	; (8006a68 <HAL_GPIO_Init+0x320>)
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80069ac:	4b2e      	ldr	r3, [pc, #184]	; (8006a68 <HAL_GPIO_Init+0x320>)
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	43db      	mvns	r3, r3
 80069b6:	69ba      	ldr	r2, [r7, #24]
 80069b8:	4013      	ands	r3, r2
 80069ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d003      	beq.n	80069d0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80069c8:	69ba      	ldr	r2, [r7, #24]
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80069d0:	4a25      	ldr	r2, [pc, #148]	; (8006a68 <HAL_GPIO_Init+0x320>)
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80069d6:	4b24      	ldr	r3, [pc, #144]	; (8006a68 <HAL_GPIO_Init+0x320>)
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	43db      	mvns	r3, r3
 80069e0:	69ba      	ldr	r2, [r7, #24]
 80069e2:	4013      	ands	r3, r2
 80069e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d003      	beq.n	80069fa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80069f2:	69ba      	ldr	r2, [r7, #24]
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80069fa:	4a1b      	ldr	r2, [pc, #108]	; (8006a68 <HAL_GPIO_Init+0x320>)
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006a00:	4b19      	ldr	r3, [pc, #100]	; (8006a68 <HAL_GPIO_Init+0x320>)
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	43db      	mvns	r3, r3
 8006a0a:	69ba      	ldr	r2, [r7, #24]
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d003      	beq.n	8006a24 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006a1c:	69ba      	ldr	r2, [r7, #24]
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006a24:	4a10      	ldr	r2, [pc, #64]	; (8006a68 <HAL_GPIO_Init+0x320>)
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	61fb      	str	r3, [r7, #28]
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	2b0f      	cmp	r3, #15
 8006a34:	f67f ae96 	bls.w	8006764 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006a38:	bf00      	nop
 8006a3a:	3724      	adds	r7, #36	; 0x24
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr
 8006a44:	40023800 	.word	0x40023800
 8006a48:	40013800 	.word	0x40013800
 8006a4c:	40020000 	.word	0x40020000
 8006a50:	40020400 	.word	0x40020400
 8006a54:	40020800 	.word	0x40020800
 8006a58:	40020c00 	.word	0x40020c00
 8006a5c:	40021000 	.word	0x40021000
 8006a60:	40021400 	.word	0x40021400
 8006a64:	40021800 	.word	0x40021800
 8006a68:	40013c00 	.word	0x40013c00

08006a6c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b087      	sub	sp, #28
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006a76:	2300      	movs	r3, #0
 8006a78:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006a82:	2300      	movs	r3, #0
 8006a84:	617b      	str	r3, [r7, #20]
 8006a86:	e0c7      	b.n	8006c18 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006a88:	2201      	movs	r2, #1
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a90:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006a92:	683a      	ldr	r2, [r7, #0]
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	4013      	ands	r3, r2
 8006a98:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	f040 80b7 	bne.w	8006c12 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006aa4:	4a61      	ldr	r2, [pc, #388]	; (8006c2c <HAL_GPIO_DeInit+0x1c0>)
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	089b      	lsrs	r3, r3, #2
 8006aaa:	3302      	adds	r3, #2
 8006aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ab0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	f003 0303 	and.w	r3, r3, #3
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	220f      	movs	r2, #15
 8006abc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac0:	68ba      	ldr	r2, [r7, #8]
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a59      	ldr	r2, [pc, #356]	; (8006c30 <HAL_GPIO_DeInit+0x1c4>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d025      	beq.n	8006b1a <HAL_GPIO_DeInit+0xae>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a58      	ldr	r2, [pc, #352]	; (8006c34 <HAL_GPIO_DeInit+0x1c8>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d01f      	beq.n	8006b16 <HAL_GPIO_DeInit+0xaa>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a57      	ldr	r2, [pc, #348]	; (8006c38 <HAL_GPIO_DeInit+0x1cc>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d019      	beq.n	8006b12 <HAL_GPIO_DeInit+0xa6>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4a56      	ldr	r2, [pc, #344]	; (8006c3c <HAL_GPIO_DeInit+0x1d0>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d013      	beq.n	8006b0e <HAL_GPIO_DeInit+0xa2>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a55      	ldr	r2, [pc, #340]	; (8006c40 <HAL_GPIO_DeInit+0x1d4>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d00d      	beq.n	8006b0a <HAL_GPIO_DeInit+0x9e>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a54      	ldr	r2, [pc, #336]	; (8006c44 <HAL_GPIO_DeInit+0x1d8>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d007      	beq.n	8006b06 <HAL_GPIO_DeInit+0x9a>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a53      	ldr	r2, [pc, #332]	; (8006c48 <HAL_GPIO_DeInit+0x1dc>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d101      	bne.n	8006b02 <HAL_GPIO_DeInit+0x96>
 8006afe:	2306      	movs	r3, #6
 8006b00:	e00c      	b.n	8006b1c <HAL_GPIO_DeInit+0xb0>
 8006b02:	2307      	movs	r3, #7
 8006b04:	e00a      	b.n	8006b1c <HAL_GPIO_DeInit+0xb0>
 8006b06:	2305      	movs	r3, #5
 8006b08:	e008      	b.n	8006b1c <HAL_GPIO_DeInit+0xb0>
 8006b0a:	2304      	movs	r3, #4
 8006b0c:	e006      	b.n	8006b1c <HAL_GPIO_DeInit+0xb0>
 8006b0e:	2303      	movs	r3, #3
 8006b10:	e004      	b.n	8006b1c <HAL_GPIO_DeInit+0xb0>
 8006b12:	2302      	movs	r3, #2
 8006b14:	e002      	b.n	8006b1c <HAL_GPIO_DeInit+0xb0>
 8006b16:	2301      	movs	r3, #1
 8006b18:	e000      	b.n	8006b1c <HAL_GPIO_DeInit+0xb0>
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	697a      	ldr	r2, [r7, #20]
 8006b1e:	f002 0203 	and.w	r2, r2, #3
 8006b22:	0092      	lsls	r2, r2, #2
 8006b24:	4093      	lsls	r3, r2
 8006b26:	68ba      	ldr	r2, [r7, #8]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d132      	bne.n	8006b92 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006b2c:	4b47      	ldr	r3, [pc, #284]	; (8006c4c <HAL_GPIO_DeInit+0x1e0>)
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	43db      	mvns	r3, r3
 8006b34:	4945      	ldr	r1, [pc, #276]	; (8006c4c <HAL_GPIO_DeInit+0x1e0>)
 8006b36:	4013      	ands	r3, r2
 8006b38:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006b3a:	4b44      	ldr	r3, [pc, #272]	; (8006c4c <HAL_GPIO_DeInit+0x1e0>)
 8006b3c:	685a      	ldr	r2, [r3, #4]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	43db      	mvns	r3, r3
 8006b42:	4942      	ldr	r1, [pc, #264]	; (8006c4c <HAL_GPIO_DeInit+0x1e0>)
 8006b44:	4013      	ands	r3, r2
 8006b46:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006b48:	4b40      	ldr	r3, [pc, #256]	; (8006c4c <HAL_GPIO_DeInit+0x1e0>)
 8006b4a:	689a      	ldr	r2, [r3, #8]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	43db      	mvns	r3, r3
 8006b50:	493e      	ldr	r1, [pc, #248]	; (8006c4c <HAL_GPIO_DeInit+0x1e0>)
 8006b52:	4013      	ands	r3, r2
 8006b54:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006b56:	4b3d      	ldr	r3, [pc, #244]	; (8006c4c <HAL_GPIO_DeInit+0x1e0>)
 8006b58:	68da      	ldr	r2, [r3, #12]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	43db      	mvns	r3, r3
 8006b5e:	493b      	ldr	r1, [pc, #236]	; (8006c4c <HAL_GPIO_DeInit+0x1e0>)
 8006b60:	4013      	ands	r3, r2
 8006b62:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	f003 0303 	and.w	r3, r3, #3
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	220f      	movs	r2, #15
 8006b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b72:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006b74:	4a2d      	ldr	r2, [pc, #180]	; (8006c2c <HAL_GPIO_DeInit+0x1c0>)
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	089b      	lsrs	r3, r3, #2
 8006b7a:	3302      	adds	r3, #2
 8006b7c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	43da      	mvns	r2, r3
 8006b84:	4829      	ldr	r0, [pc, #164]	; (8006c2c <HAL_GPIO_DeInit+0x1c0>)
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	089b      	lsrs	r3, r3, #2
 8006b8a:	400a      	ands	r2, r1
 8006b8c:	3302      	adds	r3, #2
 8006b8e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	005b      	lsls	r3, r3, #1
 8006b9a:	2103      	movs	r1, #3
 8006b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8006ba0:	43db      	mvns	r3, r3
 8006ba2:	401a      	ands	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	08da      	lsrs	r2, r3, #3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	3208      	adds	r2, #8
 8006bb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	f003 0307 	and.w	r3, r3, #7
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	220f      	movs	r2, #15
 8006bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc2:	43db      	mvns	r3, r3
 8006bc4:	697a      	ldr	r2, [r7, #20]
 8006bc6:	08d2      	lsrs	r2, r2, #3
 8006bc8:	4019      	ands	r1, r3
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	3208      	adds	r2, #8
 8006bce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	68da      	ldr	r2, [r3, #12]
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	005b      	lsls	r3, r3, #1
 8006bda:	2103      	movs	r1, #3
 8006bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8006be0:	43db      	mvns	r3, r3
 8006be2:	401a      	ands	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	685a      	ldr	r2, [r3, #4]
 8006bec:	2101      	movs	r1, #1
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8006bf4:	43db      	mvns	r3, r3
 8006bf6:	401a      	ands	r2, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	689a      	ldr	r2, [r3, #8]
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	005b      	lsls	r3, r3, #1
 8006c04:	2103      	movs	r1, #3
 8006c06:	fa01 f303 	lsl.w	r3, r1, r3
 8006c0a:	43db      	mvns	r3, r3
 8006c0c:	401a      	ands	r2, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	3301      	adds	r3, #1
 8006c16:	617b      	str	r3, [r7, #20]
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	2b0f      	cmp	r3, #15
 8006c1c:	f67f af34 	bls.w	8006a88 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006c20:	bf00      	nop
 8006c22:	371c      	adds	r7, #28
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr
 8006c2c:	40013800 	.word	0x40013800
 8006c30:	40020000 	.word	0x40020000
 8006c34:	40020400 	.word	0x40020400
 8006c38:	40020800 	.word	0x40020800
 8006c3c:	40020c00 	.word	0x40020c00
 8006c40:	40021000 	.word	0x40021000
 8006c44:	40021400 	.word	0x40021400
 8006c48:	40021800 	.word	0x40021800
 8006c4c:	40013c00 	.word	0x40013c00

08006c50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	460b      	mov	r3, r1
 8006c5a:	807b      	strh	r3, [r7, #2]
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006c60:	787b      	ldrb	r3, [r7, #1]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d003      	beq.n	8006c6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006c66:	887a      	ldrh	r2, [r7, #2]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006c6c:	e003      	b.n	8006c76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006c6e:	887b      	ldrh	r3, [r7, #2]
 8006c70:	041a      	lsls	r2, r3, #16
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	619a      	str	r2, [r3, #24]
}
 8006c76:	bf00      	nop
 8006c78:	370c      	adds	r7, #12
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr

08006c82 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006c82:	b480      	push	{r7}
 8006c84:	b083      	sub	sp, #12
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	695a      	ldr	r2, [r3, #20]
 8006c92:	887b      	ldrh	r3, [r7, #2]
 8006c94:	401a      	ands	r2, r3
 8006c96:	887b      	ldrh	r3, [r7, #2]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d104      	bne.n	8006ca6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006c9c:	887b      	ldrh	r3, [r7, #2]
 8006c9e:	041a      	lsls	r2, r3, #16
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8006ca4:	e002      	b.n	8006cac <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8006ca6:	887a      	ldrh	r2, [r7, #2]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	619a      	str	r2, [r3, #24]
}
 8006cac:	bf00      	nop
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d101      	bne.n	8006cca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e11f      	b.n	8006f0a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d106      	bne.n	8006ce4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f7fe fa40 	bl	8005164 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2224      	movs	r2, #36	; 0x24
 8006ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f022 0201 	bic.w	r2, r2, #1
 8006cfa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006d1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006d1c:	f001 faee 	bl	80082fc <HAL_RCC_GetPCLK1Freq>
 8006d20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	4a7b      	ldr	r2, [pc, #492]	; (8006f14 <HAL_I2C_Init+0x25c>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d807      	bhi.n	8006d3c <HAL_I2C_Init+0x84>
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	4a7a      	ldr	r2, [pc, #488]	; (8006f18 <HAL_I2C_Init+0x260>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	bf94      	ite	ls
 8006d34:	2301      	movls	r3, #1
 8006d36:	2300      	movhi	r3, #0
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	e006      	b.n	8006d4a <HAL_I2C_Init+0x92>
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	4a77      	ldr	r2, [pc, #476]	; (8006f1c <HAL_I2C_Init+0x264>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	bf94      	ite	ls
 8006d44:	2301      	movls	r3, #1
 8006d46:	2300      	movhi	r3, #0
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d001      	beq.n	8006d52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e0db      	b.n	8006f0a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	4a72      	ldr	r2, [pc, #456]	; (8006f20 <HAL_I2C_Init+0x268>)
 8006d56:	fba2 2303 	umull	r2, r3, r2, r3
 8006d5a:	0c9b      	lsrs	r3, r3, #18
 8006d5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	430a      	orrs	r2, r1
 8006d70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	6a1b      	ldr	r3, [r3, #32]
 8006d78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	4a64      	ldr	r2, [pc, #400]	; (8006f14 <HAL_I2C_Init+0x25c>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d802      	bhi.n	8006d8c <HAL_I2C_Init+0xd4>
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	e009      	b.n	8006da0 <HAL_I2C_Init+0xe8>
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006d92:	fb02 f303 	mul.w	r3, r2, r3
 8006d96:	4a63      	ldr	r2, [pc, #396]	; (8006f24 <HAL_I2C_Init+0x26c>)
 8006d98:	fba2 2303 	umull	r2, r3, r2, r3
 8006d9c:	099b      	lsrs	r3, r3, #6
 8006d9e:	3301      	adds	r3, #1
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	6812      	ldr	r2, [r2, #0]
 8006da4:	430b      	orrs	r3, r1
 8006da6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	69db      	ldr	r3, [r3, #28]
 8006dae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006db2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	4956      	ldr	r1, [pc, #344]	; (8006f14 <HAL_I2C_Init+0x25c>)
 8006dbc:	428b      	cmp	r3, r1
 8006dbe:	d80d      	bhi.n	8006ddc <HAL_I2C_Init+0x124>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	1e59      	subs	r1, r3, #1
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	005b      	lsls	r3, r3, #1
 8006dca:	fbb1 f3f3 	udiv	r3, r1, r3
 8006dce:	3301      	adds	r3, #1
 8006dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006dd4:	2b04      	cmp	r3, #4
 8006dd6:	bf38      	it	cc
 8006dd8:	2304      	movcc	r3, #4
 8006dda:	e04f      	b.n	8006e7c <HAL_I2C_Init+0x1c4>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d111      	bne.n	8006e08 <HAL_I2C_Init+0x150>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	1e58      	subs	r0, r3, #1
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6859      	ldr	r1, [r3, #4]
 8006dec:	460b      	mov	r3, r1
 8006dee:	005b      	lsls	r3, r3, #1
 8006df0:	440b      	add	r3, r1
 8006df2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006df6:	3301      	adds	r3, #1
 8006df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	bf0c      	ite	eq
 8006e00:	2301      	moveq	r3, #1
 8006e02:	2300      	movne	r3, #0
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	e012      	b.n	8006e2e <HAL_I2C_Init+0x176>
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	1e58      	subs	r0, r3, #1
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6859      	ldr	r1, [r3, #4]
 8006e10:	460b      	mov	r3, r1
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	440b      	add	r3, r1
 8006e16:	0099      	lsls	r1, r3, #2
 8006e18:	440b      	add	r3, r1
 8006e1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e1e:	3301      	adds	r3, #1
 8006e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	bf0c      	ite	eq
 8006e28:	2301      	moveq	r3, #1
 8006e2a:	2300      	movne	r3, #0
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d001      	beq.n	8006e36 <HAL_I2C_Init+0x17e>
 8006e32:	2301      	movs	r3, #1
 8006e34:	e022      	b.n	8006e7c <HAL_I2C_Init+0x1c4>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10e      	bne.n	8006e5c <HAL_I2C_Init+0x1a4>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	1e58      	subs	r0, r3, #1
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6859      	ldr	r1, [r3, #4]
 8006e46:	460b      	mov	r3, r1
 8006e48:	005b      	lsls	r3, r3, #1
 8006e4a:	440b      	add	r3, r1
 8006e4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e50:	3301      	adds	r3, #1
 8006e52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e5a:	e00f      	b.n	8006e7c <HAL_I2C_Init+0x1c4>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	1e58      	subs	r0, r3, #1
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6859      	ldr	r1, [r3, #4]
 8006e64:	460b      	mov	r3, r1
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	440b      	add	r3, r1
 8006e6a:	0099      	lsls	r1, r3, #2
 8006e6c:	440b      	add	r3, r1
 8006e6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e72:	3301      	adds	r3, #1
 8006e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e7c:	6879      	ldr	r1, [r7, #4]
 8006e7e:	6809      	ldr	r1, [r1, #0]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	69da      	ldr	r2, [r3, #28]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a1b      	ldr	r3, [r3, #32]
 8006e96:	431a      	orrs	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	430a      	orrs	r2, r1
 8006e9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006eaa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	6911      	ldr	r1, [r2, #16]
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	68d2      	ldr	r2, [r2, #12]
 8006eb6:	4311      	orrs	r1, r2
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	6812      	ldr	r2, [r2, #0]
 8006ebc:	430b      	orrs	r3, r1
 8006ebe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	695a      	ldr	r2, [r3, #20]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	699b      	ldr	r3, [r3, #24]
 8006ed2:	431a      	orrs	r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	430a      	orrs	r2, r1
 8006eda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f042 0201 	orr.w	r2, r2, #1
 8006eea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2220      	movs	r2, #32
 8006ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	000186a0 	.word	0x000186a0
 8006f18:	001e847f 	.word	0x001e847f
 8006f1c:	003d08ff 	.word	0x003d08ff
 8006f20:	431bde83 	.word	0x431bde83
 8006f24:	10624dd3 	.word	0x10624dd3

08006f28 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b088      	sub	sp, #32
 8006f2c:	af02      	add	r7, sp, #8
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	4608      	mov	r0, r1
 8006f32:	4611      	mov	r1, r2
 8006f34:	461a      	mov	r2, r3
 8006f36:	4603      	mov	r3, r0
 8006f38:	817b      	strh	r3, [r7, #10]
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	813b      	strh	r3, [r7, #8]
 8006f3e:	4613      	mov	r3, r2
 8006f40:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006f42:	f7fe fb7d 	bl	8005640 <HAL_GetTick>
 8006f46:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	2b20      	cmp	r3, #32
 8006f52:	f040 80d9 	bne.w	8007108 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	9300      	str	r3, [sp, #0]
 8006f5a:	2319      	movs	r3, #25
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	496d      	ldr	r1, [pc, #436]	; (8007114 <HAL_I2C_Mem_Write+0x1ec>)
 8006f60:	68f8      	ldr	r0, [r7, #12]
 8006f62:	f000 fda9 	bl	8007ab8 <I2C_WaitOnFlagUntilTimeout>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d001      	beq.n	8006f70 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006f6c:	2302      	movs	r3, #2
 8006f6e:	e0cc      	b.n	800710a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d101      	bne.n	8006f7e <HAL_I2C_Mem_Write+0x56>
 8006f7a:	2302      	movs	r3, #2
 8006f7c:	e0c5      	b.n	800710a <HAL_I2C_Mem_Write+0x1e2>
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2201      	movs	r2, #1
 8006f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0301 	and.w	r3, r3, #1
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d007      	beq.n	8006fa4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f042 0201 	orr.w	r2, r2, #1
 8006fa2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006fb2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2221      	movs	r2, #33	; 0x21
 8006fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2240      	movs	r2, #64	; 0x40
 8006fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6a3a      	ldr	r2, [r7, #32]
 8006fce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006fd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fda:	b29a      	uxth	r2, r3
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	4a4d      	ldr	r2, [pc, #308]	; (8007118 <HAL_I2C_Mem_Write+0x1f0>)
 8006fe4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006fe6:	88f8      	ldrh	r0, [r7, #6]
 8006fe8:	893a      	ldrh	r2, [r7, #8]
 8006fea:	8979      	ldrh	r1, [r7, #10]
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	9301      	str	r3, [sp, #4]
 8006ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff2:	9300      	str	r3, [sp, #0]
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	68f8      	ldr	r0, [r7, #12]
 8006ff8:	f000 fbe4 	bl	80077c4 <I2C_RequestMemoryWrite>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d052      	beq.n	80070a8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e081      	b.n	800710a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800700a:	68f8      	ldr	r0, [r7, #12]
 800700c:	f000 fe2a 	bl	8007c64 <I2C_WaitOnTXEFlagUntilTimeout>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00d      	beq.n	8007032 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701a:	2b04      	cmp	r3, #4
 800701c:	d107      	bne.n	800702e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800702c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e06b      	b.n	800710a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007036:	781a      	ldrb	r2, [r3, #0]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007042:	1c5a      	adds	r2, r3, #1
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800704c:	3b01      	subs	r3, #1
 800704e:	b29a      	uxth	r2, r3
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007058:	b29b      	uxth	r3, r3
 800705a:	3b01      	subs	r3, #1
 800705c:	b29a      	uxth	r2, r3
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	695b      	ldr	r3, [r3, #20]
 8007068:	f003 0304 	and.w	r3, r3, #4
 800706c:	2b04      	cmp	r3, #4
 800706e:	d11b      	bne.n	80070a8 <HAL_I2C_Mem_Write+0x180>
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007074:	2b00      	cmp	r3, #0
 8007076:	d017      	beq.n	80070a8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707c:	781a      	ldrb	r2, [r3, #0]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007088:	1c5a      	adds	r2, r3, #1
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007092:	3b01      	subs	r3, #1
 8007094:	b29a      	uxth	r2, r3
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800709e:	b29b      	uxth	r3, r3
 80070a0:	3b01      	subs	r3, #1
 80070a2:	b29a      	uxth	r2, r3
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d1aa      	bne.n	8007006 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070b0:	697a      	ldr	r2, [r7, #20]
 80070b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070b4:	68f8      	ldr	r0, [r7, #12]
 80070b6:	f000 fe16 	bl	8007ce6 <I2C_WaitOnBTFFlagUntilTimeout>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00d      	beq.n	80070dc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c4:	2b04      	cmp	r3, #4
 80070c6:	d107      	bne.n	80070d8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	e016      	b.n	800710a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2220      	movs	r2, #32
 80070f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007104:	2300      	movs	r3, #0
 8007106:	e000      	b.n	800710a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007108:	2302      	movs	r3, #2
  }
}
 800710a:	4618      	mov	r0, r3
 800710c:	3718      	adds	r7, #24
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	00100002 	.word	0x00100002
 8007118:	ffff0000 	.word	0xffff0000

0800711c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b08c      	sub	sp, #48	; 0x30
 8007120:	af02      	add	r7, sp, #8
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	4608      	mov	r0, r1
 8007126:	4611      	mov	r1, r2
 8007128:	461a      	mov	r2, r3
 800712a:	4603      	mov	r3, r0
 800712c:	817b      	strh	r3, [r7, #10]
 800712e:	460b      	mov	r3, r1
 8007130:	813b      	strh	r3, [r7, #8]
 8007132:	4613      	mov	r3, r2
 8007134:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007136:	f7fe fa83 	bl	8005640 <HAL_GetTick>
 800713a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007142:	b2db      	uxtb	r3, r3
 8007144:	2b20      	cmp	r3, #32
 8007146:	f040 8208 	bne.w	800755a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800714a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714c:	9300      	str	r3, [sp, #0]
 800714e:	2319      	movs	r3, #25
 8007150:	2201      	movs	r2, #1
 8007152:	497b      	ldr	r1, [pc, #492]	; (8007340 <HAL_I2C_Mem_Read+0x224>)
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f000 fcaf 	bl	8007ab8 <I2C_WaitOnFlagUntilTimeout>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d001      	beq.n	8007164 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007160:	2302      	movs	r3, #2
 8007162:	e1fb      	b.n	800755c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800716a:	2b01      	cmp	r3, #1
 800716c:	d101      	bne.n	8007172 <HAL_I2C_Mem_Read+0x56>
 800716e:	2302      	movs	r3, #2
 8007170:	e1f4      	b.n	800755c <HAL_I2C_Mem_Read+0x440>
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 0301 	and.w	r3, r3, #1
 8007184:	2b01      	cmp	r3, #1
 8007186:	d007      	beq.n	8007198 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f042 0201 	orr.w	r2, r2, #1
 8007196:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2222      	movs	r2, #34	; 0x22
 80071ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2240      	movs	r2, #64	; 0x40
 80071b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2200      	movs	r2, #0
 80071bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80071c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071ce:	b29a      	uxth	r2, r3
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	4a5b      	ldr	r2, [pc, #364]	; (8007344 <HAL_I2C_Mem_Read+0x228>)
 80071d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80071da:	88f8      	ldrh	r0, [r7, #6]
 80071dc:	893a      	ldrh	r2, [r7, #8]
 80071de:	8979      	ldrh	r1, [r7, #10]
 80071e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e2:	9301      	str	r3, [sp, #4]
 80071e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e6:	9300      	str	r3, [sp, #0]
 80071e8:	4603      	mov	r3, r0
 80071ea:	68f8      	ldr	r0, [r7, #12]
 80071ec:	f000 fb7e 	bl	80078ec <I2C_RequestMemoryRead>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d001      	beq.n	80071fa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e1b0      	b.n	800755c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d113      	bne.n	800722a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007202:	2300      	movs	r3, #0
 8007204:	623b      	str	r3, [r7, #32]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	695b      	ldr	r3, [r3, #20]
 800720c:	623b      	str	r3, [r7, #32]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	699b      	ldr	r3, [r3, #24]
 8007214:	623b      	str	r3, [r7, #32]
 8007216:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007226:	601a      	str	r2, [r3, #0]
 8007228:	e184      	b.n	8007534 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800722e:	2b01      	cmp	r3, #1
 8007230:	d11b      	bne.n	800726a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007240:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007242:	2300      	movs	r3, #0
 8007244:	61fb      	str	r3, [r7, #28]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	695b      	ldr	r3, [r3, #20]
 800724c:	61fb      	str	r3, [r7, #28]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	699b      	ldr	r3, [r3, #24]
 8007254:	61fb      	str	r3, [r7, #28]
 8007256:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007266:	601a      	str	r2, [r3, #0]
 8007268:	e164      	b.n	8007534 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800726e:	2b02      	cmp	r3, #2
 8007270:	d11b      	bne.n	80072aa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007280:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007290:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007292:	2300      	movs	r3, #0
 8007294:	61bb      	str	r3, [r7, #24]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	695b      	ldr	r3, [r3, #20]
 800729c:	61bb      	str	r3, [r7, #24]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	61bb      	str	r3, [r7, #24]
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	e144      	b.n	8007534 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072aa:	2300      	movs	r3, #0
 80072ac:	617b      	str	r3, [r7, #20]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	695b      	ldr	r3, [r3, #20]
 80072b4:	617b      	str	r3, [r7, #20]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	699b      	ldr	r3, [r3, #24]
 80072bc:	617b      	str	r3, [r7, #20]
 80072be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80072c0:	e138      	b.n	8007534 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072c6:	2b03      	cmp	r3, #3
 80072c8:	f200 80f1 	bhi.w	80074ae <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d123      	bne.n	800731c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f000 fd45 	bl	8007d68 <I2C_WaitOnRXNEFlagUntilTimeout>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d001      	beq.n	80072e8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	e139      	b.n	800755c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	691a      	ldr	r2, [r3, #16]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f2:	b2d2      	uxtb	r2, r2
 80072f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fa:	1c5a      	adds	r2, r3, #1
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007304:	3b01      	subs	r3, #1
 8007306:	b29a      	uxth	r2, r3
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007310:	b29b      	uxth	r3, r3
 8007312:	3b01      	subs	r3, #1
 8007314:	b29a      	uxth	r2, r3
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	855a      	strh	r2, [r3, #42]	; 0x2a
 800731a:	e10b      	b.n	8007534 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007320:	2b02      	cmp	r3, #2
 8007322:	d14e      	bne.n	80073c2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007326:	9300      	str	r3, [sp, #0]
 8007328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732a:	2200      	movs	r2, #0
 800732c:	4906      	ldr	r1, [pc, #24]	; (8007348 <HAL_I2C_Mem_Read+0x22c>)
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	f000 fbc2 	bl	8007ab8 <I2C_WaitOnFlagUntilTimeout>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d008      	beq.n	800734c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	e10e      	b.n	800755c <HAL_I2C_Mem_Read+0x440>
 800733e:	bf00      	nop
 8007340:	00100002 	.word	0x00100002
 8007344:	ffff0000 	.word	0xffff0000
 8007348:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800735a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	691a      	ldr	r2, [r3, #16]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007366:	b2d2      	uxtb	r2, r2
 8007368:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736e:	1c5a      	adds	r2, r3, #1
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007378:	3b01      	subs	r3, #1
 800737a:	b29a      	uxth	r2, r3
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007384:	b29b      	uxth	r3, r3
 8007386:	3b01      	subs	r3, #1
 8007388:	b29a      	uxth	r2, r3
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	691a      	ldr	r2, [r3, #16]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007398:	b2d2      	uxtb	r2, r2
 800739a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a0:	1c5a      	adds	r2, r3, #1
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073aa:	3b01      	subs	r3, #1
 80073ac:	b29a      	uxth	r2, r3
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	3b01      	subs	r3, #1
 80073ba:	b29a      	uxth	r2, r3
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80073c0:	e0b8      	b.n	8007534 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80073c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c8:	2200      	movs	r2, #0
 80073ca:	4966      	ldr	r1, [pc, #408]	; (8007564 <HAL_I2C_Mem_Read+0x448>)
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	f000 fb73 	bl	8007ab8 <I2C_WaitOnFlagUntilTimeout>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d001      	beq.n	80073dc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	e0bf      	b.n	800755c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	691a      	ldr	r2, [r3, #16]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f6:	b2d2      	uxtb	r2, r2
 80073f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fe:	1c5a      	adds	r2, r3, #1
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007408:	3b01      	subs	r3, #1
 800740a:	b29a      	uxth	r2, r3
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007414:	b29b      	uxth	r3, r3
 8007416:	3b01      	subs	r3, #1
 8007418:	b29a      	uxth	r2, r3
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800741e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007420:	9300      	str	r3, [sp, #0]
 8007422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007424:	2200      	movs	r2, #0
 8007426:	494f      	ldr	r1, [pc, #316]	; (8007564 <HAL_I2C_Mem_Read+0x448>)
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	f000 fb45 	bl	8007ab8 <I2C_WaitOnFlagUntilTimeout>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d001      	beq.n	8007438 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	e091      	b.n	800755c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007446:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	691a      	ldr	r2, [r3, #16]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007452:	b2d2      	uxtb	r2, r2
 8007454:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745a:	1c5a      	adds	r2, r3, #1
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007464:	3b01      	subs	r3, #1
 8007466:	b29a      	uxth	r2, r3
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007470:	b29b      	uxth	r3, r3
 8007472:	3b01      	subs	r3, #1
 8007474:	b29a      	uxth	r2, r3
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	691a      	ldr	r2, [r3, #16]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007484:	b2d2      	uxtb	r2, r2
 8007486:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748c:	1c5a      	adds	r2, r3, #1
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007496:	3b01      	subs	r3, #1
 8007498:	b29a      	uxth	r2, r3
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	3b01      	subs	r3, #1
 80074a6:	b29a      	uxth	r2, r3
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80074ac:	e042      	b.n	8007534 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f000 fc58 	bl	8007d68 <I2C_WaitOnRXNEFlagUntilTimeout>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d001      	beq.n	80074c2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e04c      	b.n	800755c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	691a      	ldr	r2, [r3, #16]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074cc:	b2d2      	uxtb	r2, r2
 80074ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d4:	1c5a      	adds	r2, r3, #1
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074de:	3b01      	subs	r3, #1
 80074e0:	b29a      	uxth	r2, r3
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	3b01      	subs	r3, #1
 80074ee:	b29a      	uxth	r2, r3
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	695b      	ldr	r3, [r3, #20]
 80074fa:	f003 0304 	and.w	r3, r3, #4
 80074fe:	2b04      	cmp	r3, #4
 8007500:	d118      	bne.n	8007534 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	691a      	ldr	r2, [r3, #16]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750c:	b2d2      	uxtb	r2, r2
 800750e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007514:	1c5a      	adds	r2, r3, #1
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800751e:	3b01      	subs	r3, #1
 8007520:	b29a      	uxth	r2, r3
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800752a:	b29b      	uxth	r3, r3
 800752c:	3b01      	subs	r3, #1
 800752e:	b29a      	uxth	r2, r3
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007538:	2b00      	cmp	r3, #0
 800753a:	f47f aec2 	bne.w	80072c2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2220      	movs	r2, #32
 8007542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2200      	movs	r2, #0
 8007552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007556:	2300      	movs	r3, #0
 8007558:	e000      	b.n	800755c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800755a:	2302      	movs	r3, #2
  }
}
 800755c:	4618      	mov	r0, r3
 800755e:	3728      	adds	r7, #40	; 0x28
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}
 8007564:	00010004 	.word	0x00010004

08007568 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b08a      	sub	sp, #40	; 0x28
 800756c:	af02      	add	r7, sp, #8
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	607a      	str	r2, [r7, #4]
 8007572:	603b      	str	r3, [r7, #0]
 8007574:	460b      	mov	r3, r1
 8007576:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8007578:	f7fe f862 	bl	8005640 <HAL_GetTick>
 800757c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800757e:	2301      	movs	r3, #1
 8007580:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007588:	b2db      	uxtb	r3, r3
 800758a:	2b20      	cmp	r3, #32
 800758c:	f040 8110 	bne.w	80077b0 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	9300      	str	r3, [sp, #0]
 8007594:	2319      	movs	r3, #25
 8007596:	2201      	movs	r2, #1
 8007598:	4988      	ldr	r1, [pc, #544]	; (80077bc <HAL_I2C_IsDeviceReady+0x254>)
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	f000 fa8c 	bl	8007ab8 <I2C_WaitOnFlagUntilTimeout>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d001      	beq.n	80075aa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80075a6:	2302      	movs	r3, #2
 80075a8:	e103      	b.n	80077b2 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d101      	bne.n	80075b8 <HAL_I2C_IsDeviceReady+0x50>
 80075b4:	2302      	movs	r3, #2
 80075b6:	e0fc      	b.n	80077b2 <HAL_I2C_IsDeviceReady+0x24a>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f003 0301 	and.w	r3, r3, #1
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d007      	beq.n	80075de <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f042 0201 	orr.w	r2, r2, #1
 80075dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80075ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2224      	movs	r2, #36	; 0x24
 80075f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	4a70      	ldr	r2, [pc, #448]	; (80077c0 <HAL_I2C_IsDeviceReady+0x258>)
 8007600:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007610:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	9300      	str	r3, [sp, #0]
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	2200      	movs	r2, #0
 800761a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800761e:	68f8      	ldr	r0, [r7, #12]
 8007620:	f000 fa4a 	bl	8007ab8 <I2C_WaitOnFlagUntilTimeout>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00c      	beq.n	8007644 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007634:	2b00      	cmp	r3, #0
 8007636:	d003      	beq.n	8007640 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800763e:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8007640:	2303      	movs	r3, #3
 8007642:	e0b6      	b.n	80077b2 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007644:	897b      	ldrh	r3, [r7, #10]
 8007646:	b2db      	uxtb	r3, r3
 8007648:	461a      	mov	r2, r3
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007652:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8007654:	f7fd fff4 	bl	8005640 <HAL_GetTick>
 8007658:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	695b      	ldr	r3, [r3, #20]
 8007660:	f003 0302 	and.w	r3, r3, #2
 8007664:	2b02      	cmp	r3, #2
 8007666:	bf0c      	ite	eq
 8007668:	2301      	moveq	r3, #1
 800766a:	2300      	movne	r3, #0
 800766c:	b2db      	uxtb	r3, r3
 800766e:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	695b      	ldr	r3, [r3, #20]
 8007676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800767a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800767e:	bf0c      	ite	eq
 8007680:	2301      	moveq	r3, #1
 8007682:	2300      	movne	r3, #0
 8007684:	b2db      	uxtb	r3, r3
 8007686:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007688:	e025      	b.n	80076d6 <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800768a:	f7fd ffd9 	bl	8005640 <HAL_GetTick>
 800768e:	4602      	mov	r2, r0
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	1ad3      	subs	r3, r2, r3
 8007694:	683a      	ldr	r2, [r7, #0]
 8007696:	429a      	cmp	r2, r3
 8007698:	d302      	bcc.n	80076a0 <HAL_I2C_IsDeviceReady+0x138>
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d103      	bne.n	80076a8 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	22a0      	movs	r2, #160	; 0xa0
 80076a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	695b      	ldr	r3, [r3, #20]
 80076ae:	f003 0302 	and.w	r3, r3, #2
 80076b2:	2b02      	cmp	r3, #2
 80076b4:	bf0c      	ite	eq
 80076b6:	2301      	moveq	r3, #1
 80076b8:	2300      	movne	r3, #0
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	695b      	ldr	r3, [r3, #20]
 80076c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076cc:	bf0c      	ite	eq
 80076ce:	2301      	moveq	r3, #1
 80076d0:	2300      	movne	r3, #0
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	2ba0      	cmp	r3, #160	; 0xa0
 80076e0:	d005      	beq.n	80076ee <HAL_I2C_IsDeviceReady+0x186>
 80076e2:	7dfb      	ldrb	r3, [r7, #23]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d102      	bne.n	80076ee <HAL_I2C_IsDeviceReady+0x186>
 80076e8:	7dbb      	ldrb	r3, [r7, #22]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d0cd      	beq.n	800768a <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2220      	movs	r2, #32
 80076f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	695b      	ldr	r3, [r3, #20]
 80076fc:	f003 0302 	and.w	r3, r3, #2
 8007700:	2b02      	cmp	r3, #2
 8007702:	d129      	bne.n	8007758 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007712:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007714:	2300      	movs	r3, #0
 8007716:	613b      	str	r3, [r7, #16]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	695b      	ldr	r3, [r3, #20]
 800771e:	613b      	str	r3, [r7, #16]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	613b      	str	r3, [r7, #16]
 8007728:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	9300      	str	r3, [sp, #0]
 800772e:	2319      	movs	r3, #25
 8007730:	2201      	movs	r2, #1
 8007732:	4922      	ldr	r1, [pc, #136]	; (80077bc <HAL_I2C_IsDeviceReady+0x254>)
 8007734:	68f8      	ldr	r0, [r7, #12]
 8007736:	f000 f9bf 	bl	8007ab8 <I2C_WaitOnFlagUntilTimeout>
 800773a:	4603      	mov	r3, r0
 800773c:	2b00      	cmp	r3, #0
 800773e:	d001      	beq.n	8007744 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e036      	b.n	80077b2 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2220      	movs	r2, #32
 8007748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2200      	movs	r2, #0
 8007750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8007754:	2300      	movs	r3, #0
 8007756:	e02c      	b.n	80077b2 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007766:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007770:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	9300      	str	r3, [sp, #0]
 8007776:	2319      	movs	r3, #25
 8007778:	2201      	movs	r2, #1
 800777a:	4910      	ldr	r1, [pc, #64]	; (80077bc <HAL_I2C_IsDeviceReady+0x254>)
 800777c:	68f8      	ldr	r0, [r7, #12]
 800777e:	f000 f99b 	bl	8007ab8 <I2C_WaitOnFlagUntilTimeout>
 8007782:	4603      	mov	r3, r0
 8007784:	2b00      	cmp	r3, #0
 8007786:	d001      	beq.n	800778c <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	e012      	b.n	80077b2 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800778c:	69bb      	ldr	r3, [r7, #24]
 800778e:	3301      	adds	r3, #1
 8007790:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8007792:	69ba      	ldr	r2, [r7, #24]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	429a      	cmp	r2, r3
 8007798:	f4ff af33 	bcc.w	8007602 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2220      	movs	r2, #32
 80077a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	e000      	b.n	80077b2 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 80077b0:	2302      	movs	r3, #2
  }
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3720      	adds	r7, #32
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	00100002 	.word	0x00100002
 80077c0:	ffff0000 	.word	0xffff0000

080077c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b088      	sub	sp, #32
 80077c8:	af02      	add	r7, sp, #8
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	4608      	mov	r0, r1
 80077ce:	4611      	mov	r1, r2
 80077d0:	461a      	mov	r2, r3
 80077d2:	4603      	mov	r3, r0
 80077d4:	817b      	strh	r3, [r7, #10]
 80077d6:	460b      	mov	r3, r1
 80077d8:	813b      	strh	r3, [r7, #8]
 80077da:	4613      	mov	r3, r2
 80077dc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80077ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f0:	9300      	str	r3, [sp, #0]
 80077f2:	6a3b      	ldr	r3, [r7, #32]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80077fa:	68f8      	ldr	r0, [r7, #12]
 80077fc:	f000 f95c 	bl	8007ab8 <I2C_WaitOnFlagUntilTimeout>
 8007800:	4603      	mov	r3, r0
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00c      	beq.n	8007820 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007810:	2b00      	cmp	r3, #0
 8007812:	d003      	beq.n	800781c <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f44f 7200 	mov.w	r2, #512	; 0x200
 800781a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800781c:	2303      	movs	r3, #3
 800781e:	e05f      	b.n	80078e0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007820:	897b      	ldrh	r3, [r7, #10]
 8007822:	b2db      	uxtb	r3, r3
 8007824:	461a      	mov	r2, r3
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800782e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007832:	6a3a      	ldr	r2, [r7, #32]
 8007834:	492c      	ldr	r1, [pc, #176]	; (80078e8 <I2C_RequestMemoryWrite+0x124>)
 8007836:	68f8      	ldr	r0, [r7, #12]
 8007838:	f000 f995 	bl	8007b66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d001      	beq.n	8007846 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e04c      	b.n	80078e0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007846:	2300      	movs	r3, #0
 8007848:	617b      	str	r3, [r7, #20]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	695b      	ldr	r3, [r3, #20]
 8007850:	617b      	str	r3, [r7, #20]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	699b      	ldr	r3, [r3, #24]
 8007858:	617b      	str	r3, [r7, #20]
 800785a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800785c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800785e:	6a39      	ldr	r1, [r7, #32]
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f000 f9ff 	bl	8007c64 <I2C_WaitOnTXEFlagUntilTimeout>
 8007866:	4603      	mov	r3, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d00d      	beq.n	8007888 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007870:	2b04      	cmp	r3, #4
 8007872:	d107      	bne.n	8007884 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007882:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	e02b      	b.n	80078e0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007888:	88fb      	ldrh	r3, [r7, #6]
 800788a:	2b01      	cmp	r3, #1
 800788c:	d105      	bne.n	800789a <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800788e:	893b      	ldrh	r3, [r7, #8]
 8007890:	b2da      	uxtb	r2, r3
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	611a      	str	r2, [r3, #16]
 8007898:	e021      	b.n	80078de <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800789a:	893b      	ldrh	r3, [r7, #8]
 800789c:	0a1b      	lsrs	r3, r3, #8
 800789e:	b29b      	uxth	r3, r3
 80078a0:	b2da      	uxtb	r2, r3
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078aa:	6a39      	ldr	r1, [r7, #32]
 80078ac:	68f8      	ldr	r0, [r7, #12]
 80078ae:	f000 f9d9 	bl	8007c64 <I2C_WaitOnTXEFlagUntilTimeout>
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00d      	beq.n	80078d4 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078bc:	2b04      	cmp	r3, #4
 80078be:	d107      	bne.n	80078d0 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	e005      	b.n	80078e0 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80078d4:	893b      	ldrh	r3, [r7, #8]
 80078d6:	b2da      	uxtb	r2, r3
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3718      	adds	r7, #24
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	00010002 	.word	0x00010002

080078ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b088      	sub	sp, #32
 80078f0:	af02      	add	r7, sp, #8
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	4608      	mov	r0, r1
 80078f6:	4611      	mov	r1, r2
 80078f8:	461a      	mov	r2, r3
 80078fa:	4603      	mov	r3, r0
 80078fc:	817b      	strh	r3, [r7, #10]
 80078fe:	460b      	mov	r3, r1
 8007900:	813b      	strh	r3, [r7, #8]
 8007902:	4613      	mov	r3, r2
 8007904:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007914:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007924:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007928:	9300      	str	r3, [sp, #0]
 800792a:	6a3b      	ldr	r3, [r7, #32]
 800792c:	2200      	movs	r2, #0
 800792e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007932:	68f8      	ldr	r0, [r7, #12]
 8007934:	f000 f8c0 	bl	8007ab8 <I2C_WaitOnFlagUntilTimeout>
 8007938:	4603      	mov	r3, r0
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00c      	beq.n	8007958 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007948:	2b00      	cmp	r3, #0
 800794a:	d003      	beq.n	8007954 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007952:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007954:	2303      	movs	r3, #3
 8007956:	e0a9      	b.n	8007aac <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007958:	897b      	ldrh	r3, [r7, #10]
 800795a:	b2db      	uxtb	r3, r3
 800795c:	461a      	mov	r2, r3
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007966:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796a:	6a3a      	ldr	r2, [r7, #32]
 800796c:	4951      	ldr	r1, [pc, #324]	; (8007ab4 <I2C_RequestMemoryRead+0x1c8>)
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	f000 f8f9 	bl	8007b66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007974:	4603      	mov	r3, r0
 8007976:	2b00      	cmp	r3, #0
 8007978:	d001      	beq.n	800797e <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	e096      	b.n	8007aac <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800797e:	2300      	movs	r3, #0
 8007980:	617b      	str	r3, [r7, #20]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	695b      	ldr	r3, [r3, #20]
 8007988:	617b      	str	r3, [r7, #20]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	699b      	ldr	r3, [r3, #24]
 8007990:	617b      	str	r3, [r7, #20]
 8007992:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007996:	6a39      	ldr	r1, [r7, #32]
 8007998:	68f8      	ldr	r0, [r7, #12]
 800799a:	f000 f963 	bl	8007c64 <I2C_WaitOnTXEFlagUntilTimeout>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00d      	beq.n	80079c0 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a8:	2b04      	cmp	r3, #4
 80079aa:	d107      	bne.n	80079bc <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079ba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	e075      	b.n	8007aac <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80079c0:	88fb      	ldrh	r3, [r7, #6]
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d105      	bne.n	80079d2 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80079c6:	893b      	ldrh	r3, [r7, #8]
 80079c8:	b2da      	uxtb	r2, r3
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	611a      	str	r2, [r3, #16]
 80079d0:	e021      	b.n	8007a16 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80079d2:	893b      	ldrh	r3, [r7, #8]
 80079d4:	0a1b      	lsrs	r3, r3, #8
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	b2da      	uxtb	r2, r3
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079e2:	6a39      	ldr	r1, [r7, #32]
 80079e4:	68f8      	ldr	r0, [r7, #12]
 80079e6:	f000 f93d 	bl	8007c64 <I2C_WaitOnTXEFlagUntilTimeout>
 80079ea:	4603      	mov	r3, r0
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d00d      	beq.n	8007a0c <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f4:	2b04      	cmp	r3, #4
 80079f6:	d107      	bne.n	8007a08 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a06:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e04f      	b.n	8007aac <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007a0c:	893b      	ldrh	r3, [r7, #8]
 8007a0e:	b2da      	uxtb	r2, r3
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a18:	6a39      	ldr	r1, [r7, #32]
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	f000 f922 	bl	8007c64 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d00d      	beq.n	8007a42 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2a:	2b04      	cmp	r3, #4
 8007a2c:	d107      	bne.n	8007a3e <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e034      	b.n	8007aac <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a54:	9300      	str	r3, [sp, #0]
 8007a56:	6a3b      	ldr	r3, [r7, #32]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007a5e:	68f8      	ldr	r0, [r7, #12]
 8007a60:	f000 f82a 	bl	8007ab8 <I2C_WaitOnFlagUntilTimeout>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d00c      	beq.n	8007a84 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d003      	beq.n	8007a80 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007a80:	2303      	movs	r3, #3
 8007a82:	e013      	b.n	8007aac <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007a84:	897b      	ldrh	r3, [r7, #10]
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	f043 0301 	orr.w	r3, r3, #1
 8007a8c:	b2da      	uxtb	r2, r3
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a96:	6a3a      	ldr	r2, [r7, #32]
 8007a98:	4906      	ldr	r1, [pc, #24]	; (8007ab4 <I2C_RequestMemoryRead+0x1c8>)
 8007a9a:	68f8      	ldr	r0, [r7, #12]
 8007a9c:	f000 f863 	bl	8007b66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d001      	beq.n	8007aaa <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e000      	b.n	8007aac <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8007aaa:	2300      	movs	r3, #0
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3718      	adds	r7, #24
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}
 8007ab4:	00010002 	.word	0x00010002

08007ab8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	603b      	str	r3, [r7, #0]
 8007ac4:	4613      	mov	r3, r2
 8007ac6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ac8:	e025      	b.n	8007b16 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ad0:	d021      	beq.n	8007b16 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ad2:	f7fd fdb5 	bl	8005640 <HAL_GetTick>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	69bb      	ldr	r3, [r7, #24]
 8007ada:	1ad3      	subs	r3, r2, r3
 8007adc:	683a      	ldr	r2, [r7, #0]
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d302      	bcc.n	8007ae8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d116      	bne.n	8007b16 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2200      	movs	r2, #0
 8007aec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2220      	movs	r2, #32
 8007af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b02:	f043 0220 	orr.w	r2, r3, #32
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	e023      	b.n	8007b5e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	0c1b      	lsrs	r3, r3, #16
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d10d      	bne.n	8007b3c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	695b      	ldr	r3, [r3, #20]
 8007b26:	43da      	mvns	r2, r3
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	4013      	ands	r3, r2
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	bf0c      	ite	eq
 8007b32:	2301      	moveq	r3, #1
 8007b34:	2300      	movne	r3, #0
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	461a      	mov	r2, r3
 8007b3a:	e00c      	b.n	8007b56 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	699b      	ldr	r3, [r3, #24]
 8007b42:	43da      	mvns	r2, r3
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	4013      	ands	r3, r2
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	bf0c      	ite	eq
 8007b4e:	2301      	moveq	r3, #1
 8007b50:	2300      	movne	r3, #0
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	461a      	mov	r2, r3
 8007b56:	79fb      	ldrb	r3, [r7, #7]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d0b6      	beq.n	8007aca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3710      	adds	r7, #16
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b084      	sub	sp, #16
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	60f8      	str	r0, [r7, #12]
 8007b6e:	60b9      	str	r1, [r7, #8]
 8007b70:	607a      	str	r2, [r7, #4]
 8007b72:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007b74:	e051      	b.n	8007c1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	695b      	ldr	r3, [r3, #20]
 8007b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b84:	d123      	bne.n	8007bce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b94:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007b9e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2220      	movs	r2, #32
 8007baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bba:	f043 0204 	orr.w	r2, r3, #4
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e046      	b.n	8007c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bd4:	d021      	beq.n	8007c1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bd6:	f7fd fd33 	bl	8005640 <HAL_GetTick>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	1ad3      	subs	r3, r2, r3
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d302      	bcc.n	8007bec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d116      	bne.n	8007c1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2220      	movs	r2, #32
 8007bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c06:	f043 0220 	orr.w	r2, r3, #32
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	e020      	b.n	8007c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	0c1b      	lsrs	r3, r3, #16
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d10c      	bne.n	8007c3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	695b      	ldr	r3, [r3, #20]
 8007c2a:	43da      	mvns	r2, r3
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	4013      	ands	r3, r2
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	bf14      	ite	ne
 8007c36:	2301      	movne	r3, #1
 8007c38:	2300      	moveq	r3, #0
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	e00b      	b.n	8007c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	699b      	ldr	r3, [r3, #24]
 8007c44:	43da      	mvns	r2, r3
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	4013      	ands	r3, r2
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	bf14      	ite	ne
 8007c50:	2301      	movne	r3, #1
 8007c52:	2300      	moveq	r3, #0
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d18d      	bne.n	8007b76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3710      	adds	r7, #16
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c70:	e02d      	b.n	8007cce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007c72:	68f8      	ldr	r0, [r7, #12]
 8007c74:	f000 f8ce 	bl	8007e14 <I2C_IsAcknowledgeFailed>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d001      	beq.n	8007c82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e02d      	b.n	8007cde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c88:	d021      	beq.n	8007cce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c8a:	f7fd fcd9 	bl	8005640 <HAL_GetTick>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	1ad3      	subs	r3, r2, r3
 8007c94:	68ba      	ldr	r2, [r7, #8]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d302      	bcc.n	8007ca0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d116      	bne.n	8007cce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2220      	movs	r2, #32
 8007caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cba:	f043 0220 	orr.w	r2, r3, #32
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e007      	b.n	8007cde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	695b      	ldr	r3, [r3, #20]
 8007cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cd8:	2b80      	cmp	r3, #128	; 0x80
 8007cda:	d1ca      	bne.n	8007c72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b084      	sub	sp, #16
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	60f8      	str	r0, [r7, #12]
 8007cee:	60b9      	str	r1, [r7, #8]
 8007cf0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007cf2:	e02d      	b.n	8007d50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007cf4:	68f8      	ldr	r0, [r7, #12]
 8007cf6:	f000 f88d 	bl	8007e14 <I2C_IsAcknowledgeFailed>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d001      	beq.n	8007d04 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	e02d      	b.n	8007d60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d0a:	d021      	beq.n	8007d50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d0c:	f7fd fc98 	bl	8005640 <HAL_GetTick>
 8007d10:	4602      	mov	r2, r0
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	1ad3      	subs	r3, r2, r3
 8007d16:	68ba      	ldr	r2, [r7, #8]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d302      	bcc.n	8007d22 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d116      	bne.n	8007d50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2220      	movs	r2, #32
 8007d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2200      	movs	r2, #0
 8007d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3c:	f043 0220 	orr.w	r2, r3, #32
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e007      	b.n	8007d60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	695b      	ldr	r3, [r3, #20]
 8007d56:	f003 0304 	and.w	r3, r3, #4
 8007d5a:	2b04      	cmp	r3, #4
 8007d5c:	d1ca      	bne.n	8007cf4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3710      	adds	r7, #16
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007d74:	e042      	b.n	8007dfc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	695b      	ldr	r3, [r3, #20]
 8007d7c:	f003 0310 	and.w	r3, r3, #16
 8007d80:	2b10      	cmp	r3, #16
 8007d82:	d119      	bne.n	8007db8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f06f 0210 	mvn.w	r2, #16
 8007d8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2200      	movs	r2, #0
 8007d92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2220      	movs	r2, #32
 8007d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	e029      	b.n	8007e0c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007db8:	f7fd fc42 	bl	8005640 <HAL_GetTick>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	68ba      	ldr	r2, [r7, #8]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d302      	bcc.n	8007dce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d116      	bne.n	8007dfc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2220      	movs	r2, #32
 8007dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de8:	f043 0220 	orr.w	r2, r3, #32
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	e007      	b.n	8007e0c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	695b      	ldr	r3, [r3, #20]
 8007e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e06:	2b40      	cmp	r3, #64	; 0x40
 8007e08:	d1b5      	bne.n	8007d76 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3710      	adds	r7, #16
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	695b      	ldr	r3, [r3, #20]
 8007e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e2a:	d11b      	bne.n	8007e64 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007e34:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2220      	movs	r2, #32
 8007e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e50:	f043 0204 	orr.w	r2, r3, #4
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	e000      	b.n	8007e66 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	370c      	adds	r7, #12
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr

08007e72 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007e72:	b480      	push	{r7}
 8007e74:	b083      	sub	sp, #12
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
 8007e7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	2b20      	cmp	r3, #32
 8007e86:	d129      	bne.n	8007edc <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2224      	movs	r2, #36	; 0x24
 8007e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f022 0201 	bic.w	r2, r2, #1
 8007e9e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f022 0210 	bic.w	r2, r2, #16
 8007eae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	683a      	ldr	r2, [r7, #0]
 8007ebc:	430a      	orrs	r2, r1
 8007ebe:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f042 0201 	orr.w	r2, r2, #1
 8007ece:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2220      	movs	r2, #32
 8007ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	e000      	b.n	8007ede <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8007edc:	2302      	movs	r3, #2
  }
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	370c      	adds	r7, #12
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr

08007eea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007eea:	b480      	push	{r7}
 8007eec:	b085      	sub	sp, #20
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
 8007ef2:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	2b20      	cmp	r3, #32
 8007f02:	d12a      	bne.n	8007f5a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2224      	movs	r2, #36	; 0x24
 8007f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f022 0201 	bic.w	r2, r2, #1
 8007f1a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f22:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8007f24:	89fb      	ldrh	r3, [r7, #14]
 8007f26:	f023 030f 	bic.w	r3, r3, #15
 8007f2a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	b29a      	uxth	r2, r3
 8007f30:	89fb      	ldrh	r3, [r7, #14]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	89fa      	ldrh	r2, [r7, #14]
 8007f3c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f042 0201 	orr.w	r2, r2, #1
 8007f4c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2220      	movs	r2, #32
 8007f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007f56:	2300      	movs	r3, #0
 8007f58:	e000      	b.n	8007f5c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8007f5a:	2302      	movs	r3, #2
  }
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3714      	adds	r7, #20
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d101      	bne.n	8007f7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e0cc      	b.n	8008116 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007f7c:	4b68      	ldr	r3, [pc, #416]	; (8008120 <HAL_RCC_ClockConfig+0x1b8>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f003 030f 	and.w	r3, r3, #15
 8007f84:	683a      	ldr	r2, [r7, #0]
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d90c      	bls.n	8007fa4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f8a:	4b65      	ldr	r3, [pc, #404]	; (8008120 <HAL_RCC_ClockConfig+0x1b8>)
 8007f8c:	683a      	ldr	r2, [r7, #0]
 8007f8e:	b2d2      	uxtb	r2, r2
 8007f90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f92:	4b63      	ldr	r3, [pc, #396]	; (8008120 <HAL_RCC_ClockConfig+0x1b8>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f003 030f 	and.w	r3, r3, #15
 8007f9a:	683a      	ldr	r2, [r7, #0]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d001      	beq.n	8007fa4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e0b8      	b.n	8008116 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f003 0302 	and.w	r3, r3, #2
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d020      	beq.n	8007ff2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f003 0304 	and.w	r3, r3, #4
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d005      	beq.n	8007fc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007fbc:	4b59      	ldr	r3, [pc, #356]	; (8008124 <HAL_RCC_ClockConfig+0x1bc>)
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	4a58      	ldr	r2, [pc, #352]	; (8008124 <HAL_RCC_ClockConfig+0x1bc>)
 8007fc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007fc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f003 0308 	and.w	r3, r3, #8
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d005      	beq.n	8007fe0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007fd4:	4b53      	ldr	r3, [pc, #332]	; (8008124 <HAL_RCC_ClockConfig+0x1bc>)
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	4a52      	ldr	r2, [pc, #328]	; (8008124 <HAL_RCC_ClockConfig+0x1bc>)
 8007fda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007fde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007fe0:	4b50      	ldr	r3, [pc, #320]	; (8008124 <HAL_RCC_ClockConfig+0x1bc>)
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	494d      	ldr	r1, [pc, #308]	; (8008124 <HAL_RCC_ClockConfig+0x1bc>)
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f003 0301 	and.w	r3, r3, #1
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d044      	beq.n	8008088 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d107      	bne.n	8008016 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008006:	4b47      	ldr	r3, [pc, #284]	; (8008124 <HAL_RCC_ClockConfig+0x1bc>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800800e:	2b00      	cmp	r3, #0
 8008010:	d119      	bne.n	8008046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008012:	2301      	movs	r3, #1
 8008014:	e07f      	b.n	8008116 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	2b02      	cmp	r3, #2
 800801c:	d003      	beq.n	8008026 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008022:	2b03      	cmp	r3, #3
 8008024:	d107      	bne.n	8008036 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008026:	4b3f      	ldr	r3, [pc, #252]	; (8008124 <HAL_RCC_ClockConfig+0x1bc>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800802e:	2b00      	cmp	r3, #0
 8008030:	d109      	bne.n	8008046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	e06f      	b.n	8008116 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008036:	4b3b      	ldr	r3, [pc, #236]	; (8008124 <HAL_RCC_ClockConfig+0x1bc>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f003 0302 	and.w	r3, r3, #2
 800803e:	2b00      	cmp	r3, #0
 8008040:	d101      	bne.n	8008046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	e067      	b.n	8008116 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008046:	4b37      	ldr	r3, [pc, #220]	; (8008124 <HAL_RCC_ClockConfig+0x1bc>)
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	f023 0203 	bic.w	r2, r3, #3
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	4934      	ldr	r1, [pc, #208]	; (8008124 <HAL_RCC_ClockConfig+0x1bc>)
 8008054:	4313      	orrs	r3, r2
 8008056:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008058:	f7fd faf2 	bl	8005640 <HAL_GetTick>
 800805c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800805e:	e00a      	b.n	8008076 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008060:	f7fd faee 	bl	8005640 <HAL_GetTick>
 8008064:	4602      	mov	r2, r0
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	f241 3288 	movw	r2, #5000	; 0x1388
 800806e:	4293      	cmp	r3, r2
 8008070:	d901      	bls.n	8008076 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008072:	2303      	movs	r3, #3
 8008074:	e04f      	b.n	8008116 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008076:	4b2b      	ldr	r3, [pc, #172]	; (8008124 <HAL_RCC_ClockConfig+0x1bc>)
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	f003 020c 	and.w	r2, r3, #12
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	429a      	cmp	r2, r3
 8008086:	d1eb      	bne.n	8008060 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008088:	4b25      	ldr	r3, [pc, #148]	; (8008120 <HAL_RCC_ClockConfig+0x1b8>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f003 030f 	and.w	r3, r3, #15
 8008090:	683a      	ldr	r2, [r7, #0]
 8008092:	429a      	cmp	r2, r3
 8008094:	d20c      	bcs.n	80080b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008096:	4b22      	ldr	r3, [pc, #136]	; (8008120 <HAL_RCC_ClockConfig+0x1b8>)
 8008098:	683a      	ldr	r2, [r7, #0]
 800809a:	b2d2      	uxtb	r2, r2
 800809c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800809e:	4b20      	ldr	r3, [pc, #128]	; (8008120 <HAL_RCC_ClockConfig+0x1b8>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f003 030f 	and.w	r3, r3, #15
 80080a6:	683a      	ldr	r2, [r7, #0]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d001      	beq.n	80080b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	e032      	b.n	8008116 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f003 0304 	and.w	r3, r3, #4
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d008      	beq.n	80080ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80080bc:	4b19      	ldr	r3, [pc, #100]	; (8008124 <HAL_RCC_ClockConfig+0x1bc>)
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	4916      	ldr	r1, [pc, #88]	; (8008124 <HAL_RCC_ClockConfig+0x1bc>)
 80080ca:	4313      	orrs	r3, r2
 80080cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f003 0308 	and.w	r3, r3, #8
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d009      	beq.n	80080ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80080da:	4b12      	ldr	r3, [pc, #72]	; (8008124 <HAL_RCC_ClockConfig+0x1bc>)
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	00db      	lsls	r3, r3, #3
 80080e8:	490e      	ldr	r1, [pc, #56]	; (8008124 <HAL_RCC_ClockConfig+0x1bc>)
 80080ea:	4313      	orrs	r3, r2
 80080ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80080ee:	f000 f821 	bl	8008134 <HAL_RCC_GetSysClockFreq>
 80080f2:	4601      	mov	r1, r0
 80080f4:	4b0b      	ldr	r3, [pc, #44]	; (8008124 <HAL_RCC_ClockConfig+0x1bc>)
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	091b      	lsrs	r3, r3, #4
 80080fa:	f003 030f 	and.w	r3, r3, #15
 80080fe:	4a0a      	ldr	r2, [pc, #40]	; (8008128 <HAL_RCC_ClockConfig+0x1c0>)
 8008100:	5cd3      	ldrb	r3, [r2, r3]
 8008102:	fa21 f303 	lsr.w	r3, r1, r3
 8008106:	4a09      	ldr	r2, [pc, #36]	; (800812c <HAL_RCC_ClockConfig+0x1c4>)
 8008108:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800810a:	4b09      	ldr	r3, [pc, #36]	; (8008130 <HAL_RCC_ClockConfig+0x1c8>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4618      	mov	r0, r3
 8008110:	f7fd fa52 	bl	80055b8 <HAL_InitTick>

  return HAL_OK;
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	3710      	adds	r7, #16
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	40023c00 	.word	0x40023c00
 8008124:	40023800 	.word	0x40023800
 8008128:	0800aaf0 	.word	0x0800aaf0
 800812c:	20000024 	.word	0x20000024
 8008130:	20000028 	.word	0x20000028

08008134 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008136:	b085      	sub	sp, #20
 8008138:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800813a:	2300      	movs	r3, #0
 800813c:	607b      	str	r3, [r7, #4]
 800813e:	2300      	movs	r3, #0
 8008140:	60fb      	str	r3, [r7, #12]
 8008142:	2300      	movs	r3, #0
 8008144:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008146:	2300      	movs	r3, #0
 8008148:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800814a:	4b63      	ldr	r3, [pc, #396]	; (80082d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	f003 030c 	and.w	r3, r3, #12
 8008152:	2b04      	cmp	r3, #4
 8008154:	d007      	beq.n	8008166 <HAL_RCC_GetSysClockFreq+0x32>
 8008156:	2b08      	cmp	r3, #8
 8008158:	d008      	beq.n	800816c <HAL_RCC_GetSysClockFreq+0x38>
 800815a:	2b00      	cmp	r3, #0
 800815c:	f040 80b4 	bne.w	80082c8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008160:	4b5e      	ldr	r3, [pc, #376]	; (80082dc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008162:	60bb      	str	r3, [r7, #8]
       break;
 8008164:	e0b3      	b.n	80082ce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008166:	4b5e      	ldr	r3, [pc, #376]	; (80082e0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8008168:	60bb      	str	r3, [r7, #8]
      break;
 800816a:	e0b0      	b.n	80082ce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800816c:	4b5a      	ldr	r3, [pc, #360]	; (80082d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008174:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008176:	4b58      	ldr	r3, [pc, #352]	; (80082d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800817e:	2b00      	cmp	r3, #0
 8008180:	d04a      	beq.n	8008218 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008182:	4b55      	ldr	r3, [pc, #340]	; (80082d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	099b      	lsrs	r3, r3, #6
 8008188:	f04f 0400 	mov.w	r4, #0
 800818c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008190:	f04f 0200 	mov.w	r2, #0
 8008194:	ea03 0501 	and.w	r5, r3, r1
 8008198:	ea04 0602 	and.w	r6, r4, r2
 800819c:	4629      	mov	r1, r5
 800819e:	4632      	mov	r2, r6
 80081a0:	f04f 0300 	mov.w	r3, #0
 80081a4:	f04f 0400 	mov.w	r4, #0
 80081a8:	0154      	lsls	r4, r2, #5
 80081aa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80081ae:	014b      	lsls	r3, r1, #5
 80081b0:	4619      	mov	r1, r3
 80081b2:	4622      	mov	r2, r4
 80081b4:	1b49      	subs	r1, r1, r5
 80081b6:	eb62 0206 	sbc.w	r2, r2, r6
 80081ba:	f04f 0300 	mov.w	r3, #0
 80081be:	f04f 0400 	mov.w	r4, #0
 80081c2:	0194      	lsls	r4, r2, #6
 80081c4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80081c8:	018b      	lsls	r3, r1, #6
 80081ca:	1a5b      	subs	r3, r3, r1
 80081cc:	eb64 0402 	sbc.w	r4, r4, r2
 80081d0:	f04f 0100 	mov.w	r1, #0
 80081d4:	f04f 0200 	mov.w	r2, #0
 80081d8:	00e2      	lsls	r2, r4, #3
 80081da:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80081de:	00d9      	lsls	r1, r3, #3
 80081e0:	460b      	mov	r3, r1
 80081e2:	4614      	mov	r4, r2
 80081e4:	195b      	adds	r3, r3, r5
 80081e6:	eb44 0406 	adc.w	r4, r4, r6
 80081ea:	f04f 0100 	mov.w	r1, #0
 80081ee:	f04f 0200 	mov.w	r2, #0
 80081f2:	0262      	lsls	r2, r4, #9
 80081f4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80081f8:	0259      	lsls	r1, r3, #9
 80081fa:	460b      	mov	r3, r1
 80081fc:	4614      	mov	r4, r2
 80081fe:	4618      	mov	r0, r3
 8008200:	4621      	mov	r1, r4
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f04f 0400 	mov.w	r4, #0
 8008208:	461a      	mov	r2, r3
 800820a:	4623      	mov	r3, r4
 800820c:	f7f8 fcae 	bl	8000b6c <__aeabi_uldivmod>
 8008210:	4603      	mov	r3, r0
 8008212:	460c      	mov	r4, r1
 8008214:	60fb      	str	r3, [r7, #12]
 8008216:	e049      	b.n	80082ac <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008218:	4b2f      	ldr	r3, [pc, #188]	; (80082d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	099b      	lsrs	r3, r3, #6
 800821e:	f04f 0400 	mov.w	r4, #0
 8008222:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008226:	f04f 0200 	mov.w	r2, #0
 800822a:	ea03 0501 	and.w	r5, r3, r1
 800822e:	ea04 0602 	and.w	r6, r4, r2
 8008232:	4629      	mov	r1, r5
 8008234:	4632      	mov	r2, r6
 8008236:	f04f 0300 	mov.w	r3, #0
 800823a:	f04f 0400 	mov.w	r4, #0
 800823e:	0154      	lsls	r4, r2, #5
 8008240:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008244:	014b      	lsls	r3, r1, #5
 8008246:	4619      	mov	r1, r3
 8008248:	4622      	mov	r2, r4
 800824a:	1b49      	subs	r1, r1, r5
 800824c:	eb62 0206 	sbc.w	r2, r2, r6
 8008250:	f04f 0300 	mov.w	r3, #0
 8008254:	f04f 0400 	mov.w	r4, #0
 8008258:	0194      	lsls	r4, r2, #6
 800825a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800825e:	018b      	lsls	r3, r1, #6
 8008260:	1a5b      	subs	r3, r3, r1
 8008262:	eb64 0402 	sbc.w	r4, r4, r2
 8008266:	f04f 0100 	mov.w	r1, #0
 800826a:	f04f 0200 	mov.w	r2, #0
 800826e:	00e2      	lsls	r2, r4, #3
 8008270:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008274:	00d9      	lsls	r1, r3, #3
 8008276:	460b      	mov	r3, r1
 8008278:	4614      	mov	r4, r2
 800827a:	195b      	adds	r3, r3, r5
 800827c:	eb44 0406 	adc.w	r4, r4, r6
 8008280:	f04f 0100 	mov.w	r1, #0
 8008284:	f04f 0200 	mov.w	r2, #0
 8008288:	02a2      	lsls	r2, r4, #10
 800828a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800828e:	0299      	lsls	r1, r3, #10
 8008290:	460b      	mov	r3, r1
 8008292:	4614      	mov	r4, r2
 8008294:	4618      	mov	r0, r3
 8008296:	4621      	mov	r1, r4
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f04f 0400 	mov.w	r4, #0
 800829e:	461a      	mov	r2, r3
 80082a0:	4623      	mov	r3, r4
 80082a2:	f7f8 fc63 	bl	8000b6c <__aeabi_uldivmod>
 80082a6:	4603      	mov	r3, r0
 80082a8:	460c      	mov	r4, r1
 80082aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80082ac:	4b0a      	ldr	r3, [pc, #40]	; (80082d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	0c1b      	lsrs	r3, r3, #16
 80082b2:	f003 0303 	and.w	r3, r3, #3
 80082b6:	3301      	adds	r3, #1
 80082b8:	005b      	lsls	r3, r3, #1
 80082ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80082bc:	68fa      	ldr	r2, [r7, #12]
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80082c4:	60bb      	str	r3, [r7, #8]
      break;
 80082c6:	e002      	b.n	80082ce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80082c8:	4b04      	ldr	r3, [pc, #16]	; (80082dc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80082ca:	60bb      	str	r3, [r7, #8]
      break;
 80082cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80082ce:	68bb      	ldr	r3, [r7, #8]
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3714      	adds	r7, #20
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082d8:	40023800 	.word	0x40023800
 80082dc:	00f42400 	.word	0x00f42400
 80082e0:	007a1200 	.word	0x007a1200

080082e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082e4:	b480      	push	{r7}
 80082e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80082e8:	4b03      	ldr	r3, [pc, #12]	; (80082f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80082ea:	681b      	ldr	r3, [r3, #0]
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr
 80082f6:	bf00      	nop
 80082f8:	20000024 	.word	0x20000024

080082fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008300:	f7ff fff0 	bl	80082e4 <HAL_RCC_GetHCLKFreq>
 8008304:	4601      	mov	r1, r0
 8008306:	4b05      	ldr	r3, [pc, #20]	; (800831c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	0a9b      	lsrs	r3, r3, #10
 800830c:	f003 0307 	and.w	r3, r3, #7
 8008310:	4a03      	ldr	r2, [pc, #12]	; (8008320 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008312:	5cd3      	ldrb	r3, [r2, r3]
 8008314:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008318:	4618      	mov	r0, r3
 800831a:	bd80      	pop	{r7, pc}
 800831c:	40023800 	.word	0x40023800
 8008320:	0800ab00 	.word	0x0800ab00

08008324 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008328:	f7ff ffdc 	bl	80082e4 <HAL_RCC_GetHCLKFreq>
 800832c:	4601      	mov	r1, r0
 800832e:	4b05      	ldr	r3, [pc, #20]	; (8008344 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	0b5b      	lsrs	r3, r3, #13
 8008334:	f003 0307 	and.w	r3, r3, #7
 8008338:	4a03      	ldr	r2, [pc, #12]	; (8008348 <HAL_RCC_GetPCLK2Freq+0x24>)
 800833a:	5cd3      	ldrb	r3, [r2, r3]
 800833c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008340:	4618      	mov	r0, r3
 8008342:	bd80      	pop	{r7, pc}
 8008344:	40023800 	.word	0x40023800
 8008348:	0800ab00 	.word	0x0800ab00

0800834c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8008352:	f7fd f975 	bl	8005640 <HAL_GetTick>
 8008356:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8008358:	4b5d      	ldr	r3, [pc, #372]	; (80084d0 <HAL_RCC_DeInit+0x184>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a5c      	ldr	r2, [pc, #368]	; (80084d0 <HAL_RCC_DeInit+0x184>)
 800835e:	f043 0301 	orr.w	r3, r3, #1
 8008362:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8008364:	e008      	b.n	8008378 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008366:	f7fd f96b 	bl	8005640 <HAL_GetTick>
 800836a:	4602      	mov	r2, r0
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	1ad3      	subs	r3, r2, r3
 8008370:	2b02      	cmp	r3, #2
 8008372:	d901      	bls.n	8008378 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8008374:	2303      	movs	r3, #3
 8008376:	e0a7      	b.n	80084c8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8008378:	4b55      	ldr	r3, [pc, #340]	; (80084d0 <HAL_RCC_DeInit+0x184>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f003 0302 	and.w	r3, r3, #2
 8008380:	2b00      	cmp	r3, #0
 8008382:	d0f0      	beq.n	8008366 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8008384:	4b52      	ldr	r3, [pc, #328]	; (80084d0 <HAL_RCC_DeInit+0x184>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a51      	ldr	r2, [pc, #324]	; (80084d0 <HAL_RCC_DeInit+0x184>)
 800838a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800838e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8008390:	f7fd f956 	bl	8005640 <HAL_GetTick>
 8008394:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8008396:	4b4e      	ldr	r3, [pc, #312]	; (80084d0 <HAL_RCC_DeInit+0x184>)
 8008398:	2200      	movs	r2, #0
 800839a:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800839c:	e00a      	b.n	80083b4 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800839e:	f7fd f94f 	bl	8005640 <HAL_GetTick>
 80083a2:	4602      	mov	r2, r0
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	1ad3      	subs	r3, r2, r3
 80083a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d901      	bls.n	80083b4 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80083b0:	2303      	movs	r3, #3
 80083b2:	e089      	b.n	80084c8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80083b4:	4b46      	ldr	r3, [pc, #280]	; (80084d0 <HAL_RCC_DeInit+0x184>)
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	f003 030c 	and.w	r3, r3, #12
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d1ee      	bne.n	800839e <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80083c0:	f7fd f93e 	bl	8005640 <HAL_GetTick>
 80083c4:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 80083c6:	4b42      	ldr	r3, [pc, #264]	; (80084d0 <HAL_RCC_DeInit+0x184>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a41      	ldr	r2, [pc, #260]	; (80084d0 <HAL_RCC_DeInit+0x184>)
 80083cc:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 80083d0:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80083d2:	e008      	b.n	80083e6 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80083d4:	f7fd f934 	bl	8005640 <HAL_GetTick>
 80083d8:	4602      	mov	r2, r0
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	1ad3      	subs	r3, r2, r3
 80083de:	2b64      	cmp	r3, #100	; 0x64
 80083e0:	d901      	bls.n	80083e6 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 80083e2:	2303      	movs	r3, #3
 80083e4:	e070      	b.n	80084c8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80083e6:	4b3a      	ldr	r3, [pc, #232]	; (80084d0 <HAL_RCC_DeInit+0x184>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d1f0      	bne.n	80083d4 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80083f2:	f7fd f925 	bl	8005640 <HAL_GetTick>
 80083f6:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80083f8:	4b35      	ldr	r3, [pc, #212]	; (80084d0 <HAL_RCC_DeInit+0x184>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a34      	ldr	r2, [pc, #208]	; (80084d0 <HAL_RCC_DeInit+0x184>)
 80083fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008402:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8008404:	e008      	b.n	8008418 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008406:	f7fd f91b 	bl	8005640 <HAL_GetTick>
 800840a:	4602      	mov	r2, r0
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	1ad3      	subs	r3, r2, r3
 8008410:	2b02      	cmp	r3, #2
 8008412:	d901      	bls.n	8008418 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8008414:	2303      	movs	r3, #3
 8008416:	e057      	b.n	80084c8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8008418:	4b2d      	ldr	r3, [pc, #180]	; (80084d0 <HAL_RCC_DeInit+0x184>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008420:	2b00      	cmp	r3, #0
 8008422:	d1f0      	bne.n	8008406 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8008424:	f7fd f90c 	bl	8005640 <HAL_GetTick>
 8008428:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 800842a:	4b29      	ldr	r3, [pc, #164]	; (80084d0 <HAL_RCC_DeInit+0x184>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a28      	ldr	r2, [pc, #160]	; (80084d0 <HAL_RCC_DeInit+0x184>)
 8008430:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008434:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8008436:	e008      	b.n	800844a <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008438:	f7fd f902 	bl	8005640 <HAL_GetTick>
 800843c:	4602      	mov	r2, r0
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	1ad3      	subs	r3, r2, r3
 8008442:	2b02      	cmp	r3, #2
 8008444:	d901      	bls.n	800844a <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8008446:	2303      	movs	r3, #3
 8008448:	e03e      	b.n	80084c8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800844a:	4b21      	ldr	r3, [pc, #132]	; (80084d0 <HAL_RCC_DeInit+0x184>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008452:	2b00      	cmp	r3, #0
 8008454:	d1f0      	bne.n	8008438 <HAL_RCC_DeInit+0xec>
#endif /* RCC_PLLSAI_SUPPORT */

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
 8008456:	4b1e      	ldr	r3, [pc, #120]	; (80084d0 <HAL_RCC_DeInit+0x184>)
 8008458:	4a1e      	ldr	r2, [pc, #120]	; (80084d4 <HAL_RCC_DeInit+0x188>)
 800845a:	605a      	str	r2, [r3, #4]
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */

  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 800845c:	4b1c      	ldr	r3, [pc, #112]	; (80084d0 <HAL_RCC_DeInit+0x184>)
 800845e:	4a1d      	ldr	r2, [pc, #116]	; (80084d4 <HAL_RCC_DeInit+0x188>)
 8008460:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8008464:	4b1a      	ldr	r3, [pc, #104]	; (80084d0 <HAL_RCC_DeInit+0x184>)
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	4a19      	ldr	r2, [pc, #100]	; (80084d0 <HAL_RCC_DeInit+0x184>)
 800846a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800846e:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8008470:	4b17      	ldr	r3, [pc, #92]	; (80084d0 <HAL_RCC_DeInit+0x184>)
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	4a16      	ldr	r2, [pc, #88]	; (80084d0 <HAL_RCC_DeInit+0x184>)
 8008476:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800847a:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 800847c:	4b14      	ldr	r3, [pc, #80]	; (80084d0 <HAL_RCC_DeInit+0x184>)
 800847e:	68db      	ldr	r3, [r3, #12]
 8008480:	4a13      	ldr	r2, [pc, #76]	; (80084d0 <HAL_RCC_DeInit+0x184>)
 8008482:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8008486:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8008488:	4b11      	ldr	r3, [pc, #68]	; (80084d0 <HAL_RCC_DeInit+0x184>)
 800848a:	68db      	ldr	r3, [r3, #12]
 800848c:	4a10      	ldr	r2, [pc, #64]	; (80084d0 <HAL_RCC_DeInit+0x184>)
 800848e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008492:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8008494:	4b0e      	ldr	r3, [pc, #56]	; (80084d0 <HAL_RCC_DeInit+0x184>)
 8008496:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008498:	4a0d      	ldr	r2, [pc, #52]	; (80084d0 <HAL_RCC_DeInit+0x184>)
 800849a:	f023 0301 	bic.w	r3, r3, #1
 800849e:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80084a0:	4b0b      	ldr	r3, [pc, #44]	; (80084d0 <HAL_RCC_DeInit+0x184>)
 80084a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084a4:	4a0a      	ldr	r2, [pc, #40]	; (80084d0 <HAL_RCC_DeInit+0x184>)
 80084a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80084aa:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80084ac:	4b0a      	ldr	r3, [pc, #40]	; (80084d8 <HAL_RCC_DeInit+0x18c>)
 80084ae:	4a0b      	ldr	r2, [pc, #44]	; (80084dc <HAL_RCC_DeInit+0x190>)
 80084b0:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 80084b2:	4b0b      	ldr	r3, [pc, #44]	; (80084e0 <HAL_RCC_DeInit+0x194>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4618      	mov	r0, r3
 80084b8:	f7fd f87e 	bl	80055b8 <HAL_InitTick>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d001      	beq.n	80084c6 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	e000      	b.n	80084c8 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 80084c6:	2300      	movs	r3, #0
  }
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3708      	adds	r7, #8
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}
 80084d0:	40023800 	.word	0x40023800
 80084d4:	24003010 	.word	0x24003010
 80084d8:	20000024 	.word	0x20000024
 80084dc:	00f42400 	.word	0x00f42400
 80084e0:	20000028 	.word	0x20000028

080084e4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b086      	sub	sp, #24
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80084ec:	2300      	movs	r3, #0
 80084ee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f003 0301 	and.w	r3, r3, #1
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d075      	beq.n	80085e8 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80084fc:	4ba2      	ldr	r3, [pc, #648]	; (8008788 <HAL_RCC_OscConfig+0x2a4>)
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	f003 030c 	and.w	r3, r3, #12
 8008504:	2b04      	cmp	r3, #4
 8008506:	d00c      	beq.n	8008522 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008508:	4b9f      	ldr	r3, [pc, #636]	; (8008788 <HAL_RCC_OscConfig+0x2a4>)
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008510:	2b08      	cmp	r3, #8
 8008512:	d112      	bne.n	800853a <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008514:	4b9c      	ldr	r3, [pc, #624]	; (8008788 <HAL_RCC_OscConfig+0x2a4>)
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800851c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008520:	d10b      	bne.n	800853a <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008522:	4b99      	ldr	r3, [pc, #612]	; (8008788 <HAL_RCC_OscConfig+0x2a4>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800852a:	2b00      	cmp	r3, #0
 800852c:	d05b      	beq.n	80085e6 <HAL_RCC_OscConfig+0x102>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d157      	bne.n	80085e6 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	e20b      	b.n	8008952 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008542:	d106      	bne.n	8008552 <HAL_RCC_OscConfig+0x6e>
 8008544:	4b90      	ldr	r3, [pc, #576]	; (8008788 <HAL_RCC_OscConfig+0x2a4>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a8f      	ldr	r2, [pc, #572]	; (8008788 <HAL_RCC_OscConfig+0x2a4>)
 800854a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800854e:	6013      	str	r3, [r2, #0]
 8008550:	e01d      	b.n	800858e <HAL_RCC_OscConfig+0xaa>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800855a:	d10c      	bne.n	8008576 <HAL_RCC_OscConfig+0x92>
 800855c:	4b8a      	ldr	r3, [pc, #552]	; (8008788 <HAL_RCC_OscConfig+0x2a4>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a89      	ldr	r2, [pc, #548]	; (8008788 <HAL_RCC_OscConfig+0x2a4>)
 8008562:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008566:	6013      	str	r3, [r2, #0]
 8008568:	4b87      	ldr	r3, [pc, #540]	; (8008788 <HAL_RCC_OscConfig+0x2a4>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a86      	ldr	r2, [pc, #536]	; (8008788 <HAL_RCC_OscConfig+0x2a4>)
 800856e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008572:	6013      	str	r3, [r2, #0]
 8008574:	e00b      	b.n	800858e <HAL_RCC_OscConfig+0xaa>
 8008576:	4b84      	ldr	r3, [pc, #528]	; (8008788 <HAL_RCC_OscConfig+0x2a4>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a83      	ldr	r2, [pc, #524]	; (8008788 <HAL_RCC_OscConfig+0x2a4>)
 800857c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008580:	6013      	str	r3, [r2, #0]
 8008582:	4b81      	ldr	r3, [pc, #516]	; (8008788 <HAL_RCC_OscConfig+0x2a4>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a80      	ldr	r2, [pc, #512]	; (8008788 <HAL_RCC_OscConfig+0x2a4>)
 8008588:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800858c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d013      	beq.n	80085be <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008596:	f7fd f853 	bl	8005640 <HAL_GetTick>
 800859a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800859c:	e008      	b.n	80085b0 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800859e:	f7fd f84f 	bl	8005640 <HAL_GetTick>
 80085a2:	4602      	mov	r2, r0
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	1ad3      	subs	r3, r2, r3
 80085a8:	2b64      	cmp	r3, #100	; 0x64
 80085aa:	d901      	bls.n	80085b0 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 80085ac:	2303      	movs	r3, #3
 80085ae:	e1d0      	b.n	8008952 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085b0:	4b75      	ldr	r3, [pc, #468]	; (8008788 <HAL_RCC_OscConfig+0x2a4>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d0f0      	beq.n	800859e <HAL_RCC_OscConfig+0xba>
 80085bc:	e014      	b.n	80085e8 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085be:	f7fd f83f 	bl	8005640 <HAL_GetTick>
 80085c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80085c4:	e008      	b.n	80085d8 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80085c6:	f7fd f83b 	bl	8005640 <HAL_GetTick>
 80085ca:	4602      	mov	r2, r0
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	1ad3      	subs	r3, r2, r3
 80085d0:	2b64      	cmp	r3, #100	; 0x64
 80085d2:	d901      	bls.n	80085d8 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 80085d4:	2303      	movs	r3, #3
 80085d6:	e1bc      	b.n	8008952 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80085d8:	4b6b      	ldr	r3, [pc, #428]	; (8008788 <HAL_RCC_OscConfig+0x2a4>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d1f0      	bne.n	80085c6 <HAL_RCC_OscConfig+0xe2>
 80085e4:	e000      	b.n	80085e8 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085e6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f003 0302 	and.w	r3, r3, #2
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d063      	beq.n	80086bc <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80085f4:	4b64      	ldr	r3, [pc, #400]	; (8008788 <HAL_RCC_OscConfig+0x2a4>)
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	f003 030c 	and.w	r3, r3, #12
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d00b      	beq.n	8008618 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008600:	4b61      	ldr	r3, [pc, #388]	; (8008788 <HAL_RCC_OscConfig+0x2a4>)
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008608:	2b08      	cmp	r3, #8
 800860a:	d11c      	bne.n	8008646 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800860c:	4b5e      	ldr	r3, [pc, #376]	; (8008788 <HAL_RCC_OscConfig+0x2a4>)
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008614:	2b00      	cmp	r3, #0
 8008616:	d116      	bne.n	8008646 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008618:	4b5b      	ldr	r3, [pc, #364]	; (8008788 <HAL_RCC_OscConfig+0x2a4>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f003 0302 	and.w	r3, r3, #2
 8008620:	2b00      	cmp	r3, #0
 8008622:	d005      	beq.n	8008630 <HAL_RCC_OscConfig+0x14c>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	2b01      	cmp	r3, #1
 800862a:	d001      	beq.n	8008630 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800862c:	2301      	movs	r3, #1
 800862e:	e190      	b.n	8008952 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008630:	4b55      	ldr	r3, [pc, #340]	; (8008788 <HAL_RCC_OscConfig+0x2a4>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	00db      	lsls	r3, r3, #3
 800863e:	4952      	ldr	r1, [pc, #328]	; (8008788 <HAL_RCC_OscConfig+0x2a4>)
 8008640:	4313      	orrs	r3, r2
 8008642:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008644:	e03a      	b.n	80086bc <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	68db      	ldr	r3, [r3, #12]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d020      	beq.n	8008690 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800864e:	4b4f      	ldr	r3, [pc, #316]	; (800878c <HAL_RCC_OscConfig+0x2a8>)
 8008650:	2201      	movs	r2, #1
 8008652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008654:	f7fc fff4 	bl	8005640 <HAL_GetTick>
 8008658:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800865a:	e008      	b.n	800866e <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800865c:	f7fc fff0 	bl	8005640 <HAL_GetTick>
 8008660:	4602      	mov	r2, r0
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	1ad3      	subs	r3, r2, r3
 8008666:	2b02      	cmp	r3, #2
 8008668:	d901      	bls.n	800866e <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800866a:	2303      	movs	r3, #3
 800866c:	e171      	b.n	8008952 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800866e:	4b46      	ldr	r3, [pc, #280]	; (8008788 <HAL_RCC_OscConfig+0x2a4>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f003 0302 	and.w	r3, r3, #2
 8008676:	2b00      	cmp	r3, #0
 8008678:	d0f0      	beq.n	800865c <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800867a:	4b43      	ldr	r3, [pc, #268]	; (8008788 <HAL_RCC_OscConfig+0x2a4>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	691b      	ldr	r3, [r3, #16]
 8008686:	00db      	lsls	r3, r3, #3
 8008688:	493f      	ldr	r1, [pc, #252]	; (8008788 <HAL_RCC_OscConfig+0x2a4>)
 800868a:	4313      	orrs	r3, r2
 800868c:	600b      	str	r3, [r1, #0]
 800868e:	e015      	b.n	80086bc <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008690:	4b3e      	ldr	r3, [pc, #248]	; (800878c <HAL_RCC_OscConfig+0x2a8>)
 8008692:	2200      	movs	r2, #0
 8008694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008696:	f7fc ffd3 	bl	8005640 <HAL_GetTick>
 800869a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800869c:	e008      	b.n	80086b0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800869e:	f7fc ffcf 	bl	8005640 <HAL_GetTick>
 80086a2:	4602      	mov	r2, r0
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	1ad3      	subs	r3, r2, r3
 80086a8:	2b02      	cmp	r3, #2
 80086aa:	d901      	bls.n	80086b0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80086ac:	2303      	movs	r3, #3
 80086ae:	e150      	b.n	8008952 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80086b0:	4b35      	ldr	r3, [pc, #212]	; (8008788 <HAL_RCC_OscConfig+0x2a4>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f003 0302 	and.w	r3, r3, #2
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d1f0      	bne.n	800869e <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f003 0308 	and.w	r3, r3, #8
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d030      	beq.n	800872a <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	695b      	ldr	r3, [r3, #20]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d016      	beq.n	80086fe <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80086d0:	4b2f      	ldr	r3, [pc, #188]	; (8008790 <HAL_RCC_OscConfig+0x2ac>)
 80086d2:	2201      	movs	r2, #1
 80086d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086d6:	f7fc ffb3 	bl	8005640 <HAL_GetTick>
 80086da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80086dc:	e008      	b.n	80086f0 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80086de:	f7fc ffaf 	bl	8005640 <HAL_GetTick>
 80086e2:	4602      	mov	r2, r0
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	1ad3      	subs	r3, r2, r3
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	d901      	bls.n	80086f0 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 80086ec:	2303      	movs	r3, #3
 80086ee:	e130      	b.n	8008952 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80086f0:	4b25      	ldr	r3, [pc, #148]	; (8008788 <HAL_RCC_OscConfig+0x2a4>)
 80086f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086f4:	f003 0302 	and.w	r3, r3, #2
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d0f0      	beq.n	80086de <HAL_RCC_OscConfig+0x1fa>
 80086fc:	e015      	b.n	800872a <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80086fe:	4b24      	ldr	r3, [pc, #144]	; (8008790 <HAL_RCC_OscConfig+0x2ac>)
 8008700:	2200      	movs	r2, #0
 8008702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008704:	f7fc ff9c 	bl	8005640 <HAL_GetTick>
 8008708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800870a:	e008      	b.n	800871e <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800870c:	f7fc ff98 	bl	8005640 <HAL_GetTick>
 8008710:	4602      	mov	r2, r0
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	1ad3      	subs	r3, r2, r3
 8008716:	2b02      	cmp	r3, #2
 8008718:	d901      	bls.n	800871e <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800871a:	2303      	movs	r3, #3
 800871c:	e119      	b.n	8008952 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800871e:	4b1a      	ldr	r3, [pc, #104]	; (8008788 <HAL_RCC_OscConfig+0x2a4>)
 8008720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008722:	f003 0302 	and.w	r3, r3, #2
 8008726:	2b00      	cmp	r3, #0
 8008728:	d1f0      	bne.n	800870c <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f003 0304 	and.w	r3, r3, #4
 8008732:	2b00      	cmp	r3, #0
 8008734:	f000 809f 	beq.w	8008876 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008738:	2300      	movs	r3, #0
 800873a:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800873c:	4b12      	ldr	r3, [pc, #72]	; (8008788 <HAL_RCC_OscConfig+0x2a4>)
 800873e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008744:	2b00      	cmp	r3, #0
 8008746:	d10f      	bne.n	8008768 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008748:	2300      	movs	r3, #0
 800874a:	60fb      	str	r3, [r7, #12]
 800874c:	4b0e      	ldr	r3, [pc, #56]	; (8008788 <HAL_RCC_OscConfig+0x2a4>)
 800874e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008750:	4a0d      	ldr	r2, [pc, #52]	; (8008788 <HAL_RCC_OscConfig+0x2a4>)
 8008752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008756:	6413      	str	r3, [r2, #64]	; 0x40
 8008758:	4b0b      	ldr	r3, [pc, #44]	; (8008788 <HAL_RCC_OscConfig+0x2a4>)
 800875a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800875c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008760:	60fb      	str	r3, [r7, #12]
 8008762:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008764:	2301      	movs	r3, #1
 8008766:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008768:	4b0a      	ldr	r3, [pc, #40]	; (8008794 <HAL_RCC_OscConfig+0x2b0>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008770:	2b00      	cmp	r3, #0
 8008772:	d120      	bne.n	80087b6 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008774:	4b07      	ldr	r3, [pc, #28]	; (8008794 <HAL_RCC_OscConfig+0x2b0>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a06      	ldr	r2, [pc, #24]	; (8008794 <HAL_RCC_OscConfig+0x2b0>)
 800877a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800877e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008780:	f7fc ff5e 	bl	8005640 <HAL_GetTick>
 8008784:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008786:	e010      	b.n	80087aa <HAL_RCC_OscConfig+0x2c6>
 8008788:	40023800 	.word	0x40023800
 800878c:	42470000 	.word	0x42470000
 8008790:	42470e80 	.word	0x42470e80
 8008794:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008798:	f7fc ff52 	bl	8005640 <HAL_GetTick>
 800879c:	4602      	mov	r2, r0
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	1ad3      	subs	r3, r2, r3
 80087a2:	2b02      	cmp	r3, #2
 80087a4:	d901      	bls.n	80087aa <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 80087a6:	2303      	movs	r3, #3
 80087a8:	e0d3      	b.n	8008952 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087aa:	4b6c      	ldr	r3, [pc, #432]	; (800895c <HAL_RCC_OscConfig+0x478>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d0f0      	beq.n	8008798 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	689b      	ldr	r3, [r3, #8]
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d106      	bne.n	80087cc <HAL_RCC_OscConfig+0x2e8>
 80087be:	4b68      	ldr	r3, [pc, #416]	; (8008960 <HAL_RCC_OscConfig+0x47c>)
 80087c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087c2:	4a67      	ldr	r2, [pc, #412]	; (8008960 <HAL_RCC_OscConfig+0x47c>)
 80087c4:	f043 0301 	orr.w	r3, r3, #1
 80087c8:	6713      	str	r3, [r2, #112]	; 0x70
 80087ca:	e01c      	b.n	8008806 <HAL_RCC_OscConfig+0x322>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	689b      	ldr	r3, [r3, #8]
 80087d0:	2b05      	cmp	r3, #5
 80087d2:	d10c      	bne.n	80087ee <HAL_RCC_OscConfig+0x30a>
 80087d4:	4b62      	ldr	r3, [pc, #392]	; (8008960 <HAL_RCC_OscConfig+0x47c>)
 80087d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087d8:	4a61      	ldr	r2, [pc, #388]	; (8008960 <HAL_RCC_OscConfig+0x47c>)
 80087da:	f043 0304 	orr.w	r3, r3, #4
 80087de:	6713      	str	r3, [r2, #112]	; 0x70
 80087e0:	4b5f      	ldr	r3, [pc, #380]	; (8008960 <HAL_RCC_OscConfig+0x47c>)
 80087e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087e4:	4a5e      	ldr	r2, [pc, #376]	; (8008960 <HAL_RCC_OscConfig+0x47c>)
 80087e6:	f043 0301 	orr.w	r3, r3, #1
 80087ea:	6713      	str	r3, [r2, #112]	; 0x70
 80087ec:	e00b      	b.n	8008806 <HAL_RCC_OscConfig+0x322>
 80087ee:	4b5c      	ldr	r3, [pc, #368]	; (8008960 <HAL_RCC_OscConfig+0x47c>)
 80087f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087f2:	4a5b      	ldr	r2, [pc, #364]	; (8008960 <HAL_RCC_OscConfig+0x47c>)
 80087f4:	f023 0301 	bic.w	r3, r3, #1
 80087f8:	6713      	str	r3, [r2, #112]	; 0x70
 80087fa:	4b59      	ldr	r3, [pc, #356]	; (8008960 <HAL_RCC_OscConfig+0x47c>)
 80087fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087fe:	4a58      	ldr	r2, [pc, #352]	; (8008960 <HAL_RCC_OscConfig+0x47c>)
 8008800:	f023 0304 	bic.w	r3, r3, #4
 8008804:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d015      	beq.n	800883a <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800880e:	f7fc ff17 	bl	8005640 <HAL_GetTick>
 8008812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008814:	e00a      	b.n	800882c <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008816:	f7fc ff13 	bl	8005640 <HAL_GetTick>
 800881a:	4602      	mov	r2, r0
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	1ad3      	subs	r3, r2, r3
 8008820:	f241 3288 	movw	r2, #5000	; 0x1388
 8008824:	4293      	cmp	r3, r2
 8008826:	d901      	bls.n	800882c <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8008828:	2303      	movs	r3, #3
 800882a:	e092      	b.n	8008952 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800882c:	4b4c      	ldr	r3, [pc, #304]	; (8008960 <HAL_RCC_OscConfig+0x47c>)
 800882e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008830:	f003 0302 	and.w	r3, r3, #2
 8008834:	2b00      	cmp	r3, #0
 8008836:	d0ee      	beq.n	8008816 <HAL_RCC_OscConfig+0x332>
 8008838:	e014      	b.n	8008864 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800883a:	f7fc ff01 	bl	8005640 <HAL_GetTick>
 800883e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008840:	e00a      	b.n	8008858 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008842:	f7fc fefd 	bl	8005640 <HAL_GetTick>
 8008846:	4602      	mov	r2, r0
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	1ad3      	subs	r3, r2, r3
 800884c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008850:	4293      	cmp	r3, r2
 8008852:	d901      	bls.n	8008858 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8008854:	2303      	movs	r3, #3
 8008856:	e07c      	b.n	8008952 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008858:	4b41      	ldr	r3, [pc, #260]	; (8008960 <HAL_RCC_OscConfig+0x47c>)
 800885a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800885c:	f003 0302 	and.w	r3, r3, #2
 8008860:	2b00      	cmp	r3, #0
 8008862:	d1ee      	bne.n	8008842 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008864:	7dfb      	ldrb	r3, [r7, #23]
 8008866:	2b01      	cmp	r3, #1
 8008868:	d105      	bne.n	8008876 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800886a:	4b3d      	ldr	r3, [pc, #244]	; (8008960 <HAL_RCC_OscConfig+0x47c>)
 800886c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800886e:	4a3c      	ldr	r2, [pc, #240]	; (8008960 <HAL_RCC_OscConfig+0x47c>)
 8008870:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008874:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	699b      	ldr	r3, [r3, #24]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d068      	beq.n	8008950 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800887e:	4b38      	ldr	r3, [pc, #224]	; (8008960 <HAL_RCC_OscConfig+0x47c>)
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	f003 030c 	and.w	r3, r3, #12
 8008886:	2b08      	cmp	r3, #8
 8008888:	d060      	beq.n	800894c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	699b      	ldr	r3, [r3, #24]
 800888e:	2b02      	cmp	r3, #2
 8008890:	d145      	bne.n	800891e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008892:	4b34      	ldr	r3, [pc, #208]	; (8008964 <HAL_RCC_OscConfig+0x480>)
 8008894:	2200      	movs	r2, #0
 8008896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008898:	f7fc fed2 	bl	8005640 <HAL_GetTick>
 800889c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800889e:	e008      	b.n	80088b2 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80088a0:	f7fc fece 	bl	8005640 <HAL_GetTick>
 80088a4:	4602      	mov	r2, r0
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	1ad3      	subs	r3, r2, r3
 80088aa:	2b02      	cmp	r3, #2
 80088ac:	d901      	bls.n	80088b2 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 80088ae:	2303      	movs	r3, #3
 80088b0:	e04f      	b.n	8008952 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088b2:	4b2b      	ldr	r3, [pc, #172]	; (8008960 <HAL_RCC_OscConfig+0x47c>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d1f0      	bne.n	80088a0 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	69da      	ldr	r2, [r3, #28]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6a1b      	ldr	r3, [r3, #32]
 80088c6:	431a      	orrs	r2, r3
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088cc:	019b      	lsls	r3, r3, #6
 80088ce:	431a      	orrs	r2, r3
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d4:	085b      	lsrs	r3, r3, #1
 80088d6:	3b01      	subs	r3, #1
 80088d8:	041b      	lsls	r3, r3, #16
 80088da:	431a      	orrs	r2, r3
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e0:	061b      	lsls	r3, r3, #24
 80088e2:	431a      	orrs	r2, r3
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088e8:	071b      	lsls	r3, r3, #28
 80088ea:	491d      	ldr	r1, [pc, #116]	; (8008960 <HAL_RCC_OscConfig+0x47c>)
 80088ec:	4313      	orrs	r3, r2
 80088ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80088f0:	4b1c      	ldr	r3, [pc, #112]	; (8008964 <HAL_RCC_OscConfig+0x480>)
 80088f2:	2201      	movs	r2, #1
 80088f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088f6:	f7fc fea3 	bl	8005640 <HAL_GetTick>
 80088fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088fc:	e008      	b.n	8008910 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80088fe:	f7fc fe9f 	bl	8005640 <HAL_GetTick>
 8008902:	4602      	mov	r2, r0
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	1ad3      	subs	r3, r2, r3
 8008908:	2b02      	cmp	r3, #2
 800890a:	d901      	bls.n	8008910 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800890c:	2303      	movs	r3, #3
 800890e:	e020      	b.n	8008952 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008910:	4b13      	ldr	r3, [pc, #76]	; (8008960 <HAL_RCC_OscConfig+0x47c>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008918:	2b00      	cmp	r3, #0
 800891a:	d0f0      	beq.n	80088fe <HAL_RCC_OscConfig+0x41a>
 800891c:	e018      	b.n	8008950 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800891e:	4b11      	ldr	r3, [pc, #68]	; (8008964 <HAL_RCC_OscConfig+0x480>)
 8008920:	2200      	movs	r2, #0
 8008922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008924:	f7fc fe8c 	bl	8005640 <HAL_GetTick>
 8008928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800892a:	e008      	b.n	800893e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800892c:	f7fc fe88 	bl	8005640 <HAL_GetTick>
 8008930:	4602      	mov	r2, r0
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	1ad3      	subs	r3, r2, r3
 8008936:	2b02      	cmp	r3, #2
 8008938:	d901      	bls.n	800893e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800893a:	2303      	movs	r3, #3
 800893c:	e009      	b.n	8008952 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800893e:	4b08      	ldr	r3, [pc, #32]	; (8008960 <HAL_RCC_OscConfig+0x47c>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008946:	2b00      	cmp	r3, #0
 8008948:	d1f0      	bne.n	800892c <HAL_RCC_OscConfig+0x448>
 800894a:	e001      	b.n	8008950 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800894c:	2301      	movs	r3, #1
 800894e:	e000      	b.n	8008952 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	3718      	adds	r7, #24
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
 800895a:	bf00      	nop
 800895c:	40007000 	.word	0x40007000
 8008960:	40023800 	.word	0x40023800
 8008964:	42470060 	.word	0x42470060

08008968 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d101      	bne.n	800897a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008976:	2301      	movs	r3, #1
 8008978:	e03f      	b.n	80089fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008980:	b2db      	uxtb	r3, r3
 8008982:	2b00      	cmp	r3, #0
 8008984:	d106      	bne.n	8008994 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f7fc fc60 	bl	8005254 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2224      	movs	r2, #36	; 0x24
 8008998:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	68da      	ldr	r2, [r3, #12]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80089aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 fc77 	bl	80092a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	691a      	ldr	r2, [r3, #16]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80089c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	695a      	ldr	r2, [r3, #20]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80089d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	68da      	ldr	r2, [r3, #12]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80089e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2220      	movs	r2, #32
 80089ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2220      	movs	r2, #32
 80089f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80089f8:	2300      	movs	r3, #0
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3708      	adds	r7, #8
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}

08008a02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a02:	b580      	push	{r7, lr}
 8008a04:	b088      	sub	sp, #32
 8008a06:	af02      	add	r7, sp, #8
 8008a08:	60f8      	str	r0, [r7, #12]
 8008a0a:	60b9      	str	r1, [r7, #8]
 8008a0c:	603b      	str	r3, [r7, #0]
 8008a0e:	4613      	mov	r3, r2
 8008a10:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8008a12:	2300      	movs	r3, #0
 8008a14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	2b20      	cmp	r3, #32
 8008a20:	f040 8083 	bne.w	8008b2a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d002      	beq.n	8008a30 <HAL_UART_Transmit+0x2e>
 8008a2a:	88fb      	ldrh	r3, [r7, #6]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d101      	bne.n	8008a34 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008a30:	2301      	movs	r3, #1
 8008a32:	e07b      	b.n	8008b2c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d101      	bne.n	8008a42 <HAL_UART_Transmit+0x40>
 8008a3e:	2302      	movs	r3, #2
 8008a40:	e074      	b.n	8008b2c <HAL_UART_Transmit+0x12a>
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2201      	movs	r2, #1
 8008a46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2221      	movs	r2, #33	; 0x21
 8008a54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008a58:	f7fc fdf2 	bl	8005640 <HAL_GetTick>
 8008a5c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	88fa      	ldrh	r2, [r7, #6]
 8008a62:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	88fa      	ldrh	r2, [r7, #6]
 8008a68:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8008a72:	e042      	b.n	8008afa <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	3b01      	subs	r3, #1
 8008a7c:	b29a      	uxth	r2, r3
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a8a:	d122      	bne.n	8008ad2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	9300      	str	r3, [sp, #0]
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	2200      	movs	r2, #0
 8008a94:	2180      	movs	r1, #128	; 0x80
 8008a96:	68f8      	ldr	r0, [r7, #12]
 8008a98:	f000 fa80 	bl	8008f9c <UART_WaitOnFlagUntilTimeout>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d001      	beq.n	8008aa6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8008aa2:	2303      	movs	r3, #3
 8008aa4:	e042      	b.n	8008b2c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	881b      	ldrh	r3, [r3, #0]
 8008aae:	461a      	mov	r2, r3
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ab8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d103      	bne.n	8008aca <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	3302      	adds	r3, #2
 8008ac6:	60bb      	str	r3, [r7, #8]
 8008ac8:	e017      	b.n	8008afa <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	3301      	adds	r3, #1
 8008ace:	60bb      	str	r3, [r7, #8]
 8008ad0:	e013      	b.n	8008afa <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	9300      	str	r3, [sp, #0]
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	2180      	movs	r1, #128	; 0x80
 8008adc:	68f8      	ldr	r0, [r7, #12]
 8008ade:	f000 fa5d 	bl	8008f9c <UART_WaitOnFlagUntilTimeout>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d001      	beq.n	8008aec <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8008ae8:	2303      	movs	r3, #3
 8008aea:	e01f      	b.n	8008b2c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	1c5a      	adds	r2, r3, #1
 8008af0:	60ba      	str	r2, [r7, #8]
 8008af2:	781a      	ldrb	r2, [r3, #0]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d1b7      	bne.n	8008a74 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	9300      	str	r3, [sp, #0]
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	2140      	movs	r1, #64	; 0x40
 8008b0e:	68f8      	ldr	r0, [r7, #12]
 8008b10:	f000 fa44 	bl	8008f9c <UART_WaitOnFlagUntilTimeout>
 8008b14:	4603      	mov	r3, r0
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d001      	beq.n	8008b1e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8008b1a:	2303      	movs	r3, #3
 8008b1c:	e006      	b.n	8008b2c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2220      	movs	r2, #32
 8008b22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8008b26:	2300      	movs	r3, #0
 8008b28:	e000      	b.n	8008b2c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008b2a:	2302      	movs	r3, #2
  }
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3718      	adds	r7, #24
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b086      	sub	sp, #24
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	60f8      	str	r0, [r7, #12]
 8008b3c:	60b9      	str	r1, [r7, #8]
 8008b3e:	4613      	mov	r3, r2
 8008b40:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	2b20      	cmp	r3, #32
 8008b4c:	d166      	bne.n	8008c1c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d002      	beq.n	8008b5a <HAL_UART_Receive_DMA+0x26>
 8008b54:	88fb      	ldrh	r3, [r7, #6]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d101      	bne.n	8008b5e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	e05f      	b.n	8008c1e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d101      	bne.n	8008b6c <HAL_UART_Receive_DMA+0x38>
 8008b68:	2302      	movs	r3, #2
 8008b6a:	e058      	b.n	8008c1e <HAL_UART_Receive_DMA+0xea>
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8008b74:	68ba      	ldr	r2, [r7, #8]
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	88fa      	ldrh	r2, [r7, #6]
 8008b7e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2200      	movs	r2, #0
 8008b84:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2222      	movs	r2, #34	; 0x22
 8008b8a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b92:	4a25      	ldr	r2, [pc, #148]	; (8008c28 <HAL_UART_Receive_DMA+0xf4>)
 8008b94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b9a:	4a24      	ldr	r2, [pc, #144]	; (8008c2c <HAL_UART_Receive_DMA+0xf8>)
 8008b9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ba2:	4a23      	ldr	r2, [pc, #140]	; (8008c30 <HAL_UART_Receive_DMA+0xfc>)
 8008ba4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008baa:	2200      	movs	r2, #0
 8008bac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8008bae:	f107 0308 	add.w	r3, r7, #8
 8008bb2:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	3304      	adds	r3, #4
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	88fb      	ldrh	r3, [r7, #6]
 8008bc6:	f7fc ffeb 	bl	8005ba0 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8008bca:	2300      	movs	r3, #0
 8008bcc:	613b      	str	r3, [r7, #16]
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	613b      	str	r3, [r7, #16]
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	613b      	str	r3, [r7, #16]
 8008bde:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2200      	movs	r2, #0
 8008be4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	68da      	ldr	r2, [r3, #12]
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008bf6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	695a      	ldr	r2, [r3, #20]
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f042 0201 	orr.w	r2, r2, #1
 8008c06:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	695a      	ldr	r2, [r3, #20]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c16:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	e000      	b.n	8008c1e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008c1c:	2302      	movs	r3, #2
  }
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3718      	adds	r7, #24
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	08008e85 	.word	0x08008e85
 8008c2c:	08008eed 	.word	0x08008eed
 8008c30:	08008f09 	.word	0x08008f09

08008c34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b088      	sub	sp, #32
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	68db      	ldr	r3, [r3, #12]
 8008c4a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	695b      	ldr	r3, [r3, #20]
 8008c52:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008c54:	2300      	movs	r3, #0
 8008c56:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	f003 030f 	and.w	r3, r3, #15
 8008c62:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d10d      	bne.n	8008c86 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	f003 0320 	and.w	r3, r3, #32
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d008      	beq.n	8008c86 <HAL_UART_IRQHandler+0x52>
 8008c74:	69bb      	ldr	r3, [r7, #24]
 8008c76:	f003 0320 	and.w	r3, r3, #32
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d003      	beq.n	8008c86 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 fa8c 	bl	800919c <UART_Receive_IT>
      return;
 8008c84:	e0d1      	b.n	8008e2a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	f000 80b0 	beq.w	8008dee <HAL_UART_IRQHandler+0x1ba>
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	f003 0301 	and.w	r3, r3, #1
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d105      	bne.n	8008ca4 <HAL_UART_IRQHandler+0x70>
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	f000 80a5 	beq.w	8008dee <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008ca4:	69fb      	ldr	r3, [r7, #28]
 8008ca6:	f003 0301 	and.w	r3, r3, #1
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d00a      	beq.n	8008cc4 <HAL_UART_IRQHandler+0x90>
 8008cae:	69bb      	ldr	r3, [r7, #24]
 8008cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d005      	beq.n	8008cc4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cbc:	f043 0201 	orr.w	r2, r3, #1
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	f003 0304 	and.w	r3, r3, #4
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d00a      	beq.n	8008ce4 <HAL_UART_IRQHandler+0xb0>
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	f003 0301 	and.w	r3, r3, #1
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d005      	beq.n	8008ce4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cdc:	f043 0202 	orr.w	r2, r3, #2
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	f003 0302 	and.w	r3, r3, #2
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d00a      	beq.n	8008d04 <HAL_UART_IRQHandler+0xd0>
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	f003 0301 	and.w	r3, r3, #1
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d005      	beq.n	8008d04 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cfc:	f043 0204 	orr.w	r2, r3, #4
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	f003 0308 	and.w	r3, r3, #8
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d00f      	beq.n	8008d2e <HAL_UART_IRQHandler+0xfa>
 8008d0e:	69bb      	ldr	r3, [r7, #24]
 8008d10:	f003 0320 	and.w	r3, r3, #32
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d104      	bne.n	8008d22 <HAL_UART_IRQHandler+0xee>
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	f003 0301 	and.w	r3, r3, #1
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d005      	beq.n	8008d2e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d26:	f043 0208 	orr.w	r2, r3, #8
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d078      	beq.n	8008e28 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008d36:	69fb      	ldr	r3, [r7, #28]
 8008d38:	f003 0320 	and.w	r3, r3, #32
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d007      	beq.n	8008d50 <HAL_UART_IRQHandler+0x11c>
 8008d40:	69bb      	ldr	r3, [r7, #24]
 8008d42:	f003 0320 	and.w	r3, r3, #32
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d002      	beq.n	8008d50 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 fa26 	bl	800919c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	695b      	ldr	r3, [r3, #20]
 8008d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d5a:	2b40      	cmp	r3, #64	; 0x40
 8008d5c:	bf0c      	ite	eq
 8008d5e:	2301      	moveq	r3, #1
 8008d60:	2300      	movne	r3, #0
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d6a:	f003 0308 	and.w	r3, r3, #8
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d102      	bne.n	8008d78 <HAL_UART_IRQHandler+0x144>
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d031      	beq.n	8008ddc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 f96f 	bl	800905c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	695b      	ldr	r3, [r3, #20]
 8008d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d88:	2b40      	cmp	r3, #64	; 0x40
 8008d8a:	d123      	bne.n	8008dd4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	695a      	ldr	r2, [r3, #20]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d9a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d013      	beq.n	8008dcc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008da8:	4a21      	ldr	r2, [pc, #132]	; (8008e30 <HAL_UART_IRQHandler+0x1fc>)
 8008daa:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008db0:	4618      	mov	r0, r3
 8008db2:	f7fc ff4d 	bl	8005c50 <HAL_DMA_Abort_IT>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d016      	beq.n	8008dea <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008dc6:	4610      	mov	r0, r2
 8008dc8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dca:	e00e      	b.n	8008dea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 f84f 	bl	8008e70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dd2:	e00a      	b.n	8008dea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 f84b 	bl	8008e70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dda:	e006      	b.n	8008dea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 f847 	bl	8008e70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008de8:	e01e      	b.n	8008e28 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dea:	bf00      	nop
    return;
 8008dec:	e01c      	b.n	8008e28 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d008      	beq.n	8008e0a <HAL_UART_IRQHandler+0x1d6>
 8008df8:	69bb      	ldr	r3, [r7, #24]
 8008dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d003      	beq.n	8008e0a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 f95c 	bl	80090c0 <UART_Transmit_IT>
    return;
 8008e08:	e00f      	b.n	8008e2a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008e0a:	69fb      	ldr	r3, [r7, #28]
 8008e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d00a      	beq.n	8008e2a <HAL_UART_IRQHandler+0x1f6>
 8008e14:	69bb      	ldr	r3, [r7, #24]
 8008e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d005      	beq.n	8008e2a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 f9a4 	bl	800916c <UART_EndTransmit_IT>
    return;
 8008e24:	bf00      	nop
 8008e26:	e000      	b.n	8008e2a <HAL_UART_IRQHandler+0x1f6>
    return;
 8008e28:	bf00      	nop
  }
}
 8008e2a:	3720      	adds	r7, #32
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}
 8008e30:	08009099 	.word	0x08009099

08008e34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b083      	sub	sp, #12
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008e3c:	bf00      	nop
 8008e3e:	370c      	adds	r7, #12
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr

08008e48 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b083      	sub	sp, #12
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008e50:	bf00      	nop
 8008e52:	370c      	adds	r7, #12
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr

08008e5c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b083      	sub	sp, #12
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008e64:	bf00      	nop
 8008e66:	370c      	adds	r7, #12
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008e78:	bf00      	nop
 8008e7a:	370c      	adds	r7, #12
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e90:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d11e      	bne.n	8008ede <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	68da      	ldr	r2, [r3, #12]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008eb4:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	695a      	ldr	r2, [r3, #20]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f022 0201 	bic.w	r2, r2, #1
 8008ec4:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	695a      	ldr	r2, [r3, #20]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ed4:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2220      	movs	r2, #32
 8008eda:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8008ede:	68f8      	ldr	r0, [r7, #12]
 8008ee0:	f7ff ffb2 	bl	8008e48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ee4:	bf00      	nop
 8008ee6:	3710      	adds	r7, #16
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8008efa:	68f8      	ldr	r0, [r7, #12]
 8008efc:	f7ff ffae 	bl	8008e5c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f00:	bf00      	nop
 8008f02:	3710      	adds	r7, #16
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008f10:	2300      	movs	r3, #0
 8008f12:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f18:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	695b      	ldr	r3, [r3, #20]
 8008f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f24:	2b80      	cmp	r3, #128	; 0x80
 8008f26:	bf0c      	ite	eq
 8008f28:	2301      	moveq	r3, #1
 8008f2a:	2300      	movne	r3, #0
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	2b21      	cmp	r3, #33	; 0x21
 8008f3a:	d108      	bne.n	8008f4e <UART_DMAError+0x46>
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d005      	beq.n	8008f4e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	2200      	movs	r2, #0
 8008f46:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008f48:	68b8      	ldr	r0, [r7, #8]
 8008f4a:	f000 f871 	bl	8009030 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	695b      	ldr	r3, [r3, #20]
 8008f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f58:	2b40      	cmp	r3, #64	; 0x40
 8008f5a:	bf0c      	ite	eq
 8008f5c:	2301      	moveq	r3, #1
 8008f5e:	2300      	movne	r3, #0
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	2b22      	cmp	r3, #34	; 0x22
 8008f6e:	d108      	bne.n	8008f82 <UART_DMAError+0x7a>
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d005      	beq.n	8008f82 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008f7c:	68b8      	ldr	r0, [r7, #8]
 8008f7e:	f000 f86d 	bl	800905c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f86:	f043 0210 	orr.w	r2, r3, #16
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f8e:	68b8      	ldr	r0, [r7, #8]
 8008f90:	f7ff ff6e 	bl	8008e70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f94:	bf00      	nop
 8008f96:	3710      	adds	r7, #16
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	603b      	str	r3, [r7, #0]
 8008fa8:	4613      	mov	r3, r2
 8008faa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fac:	e02c      	b.n	8009008 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fae:	69bb      	ldr	r3, [r7, #24]
 8008fb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fb4:	d028      	beq.n	8009008 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008fb6:	69bb      	ldr	r3, [r7, #24]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d007      	beq.n	8008fcc <UART_WaitOnFlagUntilTimeout+0x30>
 8008fbc:	f7fc fb40 	bl	8005640 <HAL_GetTick>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	1ad3      	subs	r3, r2, r3
 8008fc6:	69ba      	ldr	r2, [r7, #24]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d21d      	bcs.n	8009008 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	68da      	ldr	r2, [r3, #12]
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008fda:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	695a      	ldr	r2, [r3, #20]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f022 0201 	bic.w	r2, r2, #1
 8008fea:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2220      	movs	r2, #32
 8008ff0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2220      	movs	r2, #32
 8008ff8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2200      	movs	r2, #0
 8009000:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8009004:	2303      	movs	r3, #3
 8009006:	e00f      	b.n	8009028 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	4013      	ands	r3, r2
 8009012:	68ba      	ldr	r2, [r7, #8]
 8009014:	429a      	cmp	r2, r3
 8009016:	bf0c      	ite	eq
 8009018:	2301      	moveq	r3, #1
 800901a:	2300      	movne	r3, #0
 800901c:	b2db      	uxtb	r3, r3
 800901e:	461a      	mov	r2, r3
 8009020:	79fb      	ldrb	r3, [r7, #7]
 8009022:	429a      	cmp	r2, r3
 8009024:	d0c3      	beq.n	8008fae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009026:	2300      	movs	r3, #0
}
 8009028:	4618      	mov	r0, r3
 800902a:	3710      	adds	r7, #16
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009030:	b480      	push	{r7}
 8009032:	b083      	sub	sp, #12
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	68da      	ldr	r2, [r3, #12]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009046:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2220      	movs	r2, #32
 800904c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8009050:	bf00      	nop
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800905c:	b480      	push	{r7}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	68da      	ldr	r2, [r3, #12]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009072:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	695a      	ldr	r2, [r3, #20]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f022 0201 	bic.w	r2, r2, #1
 8009082:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2220      	movs	r2, #32
 8009088:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800908c:	bf00      	nop
 800908e:	370c      	adds	r7, #12
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2200      	movs	r2, #0
 80090aa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2200      	movs	r2, #0
 80090b0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80090b2:	68f8      	ldr	r0, [r7, #12]
 80090b4:	f7ff fedc 	bl	8008e70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090b8:	bf00      	nop
 80090ba:	3710      	adds	r7, #16
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b085      	sub	sp, #20
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80090ce:	b2db      	uxtb	r3, r3
 80090d0:	2b21      	cmp	r3, #33	; 0x21
 80090d2:	d144      	bne.n	800915e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090dc:	d11a      	bne.n	8009114 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6a1b      	ldr	r3, [r3, #32]
 80090e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	881b      	ldrh	r3, [r3, #0]
 80090e8:	461a      	mov	r2, r3
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80090f2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	691b      	ldr	r3, [r3, #16]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d105      	bne.n	8009108 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6a1b      	ldr	r3, [r3, #32]
 8009100:	1c9a      	adds	r2, r3, #2
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	621a      	str	r2, [r3, #32]
 8009106:	e00e      	b.n	8009126 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6a1b      	ldr	r3, [r3, #32]
 800910c:	1c5a      	adds	r2, r3, #1
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	621a      	str	r2, [r3, #32]
 8009112:	e008      	b.n	8009126 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6a1b      	ldr	r3, [r3, #32]
 8009118:	1c59      	adds	r1, r3, #1
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	6211      	str	r1, [r2, #32]
 800911e:	781a      	ldrb	r2, [r3, #0]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800912a:	b29b      	uxth	r3, r3
 800912c:	3b01      	subs	r3, #1
 800912e:	b29b      	uxth	r3, r3
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	4619      	mov	r1, r3
 8009134:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009136:	2b00      	cmp	r3, #0
 8009138:	d10f      	bne.n	800915a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	68da      	ldr	r2, [r3, #12]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009148:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	68da      	ldr	r2, [r3, #12]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009158:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800915a:	2300      	movs	r3, #0
 800915c:	e000      	b.n	8009160 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800915e:	2302      	movs	r3, #2
  }
}
 8009160:	4618      	mov	r0, r3
 8009162:	3714      	adds	r7, #20
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr

0800916c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b082      	sub	sp, #8
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	68da      	ldr	r2, [r3, #12]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009182:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2220      	movs	r2, #32
 8009188:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f7ff fe51 	bl	8008e34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009192:	2300      	movs	r3, #0
}
 8009194:	4618      	mov	r0, r3
 8009196:	3708      	adds	r7, #8
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}

0800919c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b084      	sub	sp, #16
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	2b22      	cmp	r3, #34	; 0x22
 80091ae:	d171      	bne.n	8009294 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	689b      	ldr	r3, [r3, #8]
 80091b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091b8:	d123      	bne.n	8009202 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091be:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	691b      	ldr	r3, [r3, #16]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d10e      	bne.n	80091e6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091d4:	b29a      	uxth	r2, r3
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091de:	1c9a      	adds	r2, r3, #2
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	629a      	str	r2, [r3, #40]	; 0x28
 80091e4:	e029      	b.n	800923a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	b29a      	uxth	r2, r3
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091fa:	1c5a      	adds	r2, r3, #1
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	629a      	str	r2, [r3, #40]	; 0x28
 8009200:	e01b      	b.n	800923a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	691b      	ldr	r3, [r3, #16]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d10a      	bne.n	8009220 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	6858      	ldr	r0, [r3, #4]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009214:	1c59      	adds	r1, r3, #1
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	6291      	str	r1, [r2, #40]	; 0x28
 800921a:	b2c2      	uxtb	r2, r0
 800921c:	701a      	strb	r2, [r3, #0]
 800921e:	e00c      	b.n	800923a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	b2da      	uxtb	r2, r3
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800922c:	1c58      	adds	r0, r3, #1
 800922e:	6879      	ldr	r1, [r7, #4]
 8009230:	6288      	str	r0, [r1, #40]	; 0x28
 8009232:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009236:	b2d2      	uxtb	r2, r2
 8009238:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800923e:	b29b      	uxth	r3, r3
 8009240:	3b01      	subs	r3, #1
 8009242:	b29b      	uxth	r3, r3
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	4619      	mov	r1, r3
 8009248:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800924a:	2b00      	cmp	r3, #0
 800924c:	d120      	bne.n	8009290 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	68da      	ldr	r2, [r3, #12]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f022 0220 	bic.w	r2, r2, #32
 800925c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	68da      	ldr	r2, [r3, #12]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800926c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	695a      	ldr	r2, [r3, #20]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f022 0201 	bic.w	r2, r2, #1
 800927c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2220      	movs	r2, #32
 8009282:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f7ff fdde 	bl	8008e48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800928c:	2300      	movs	r3, #0
 800928e:	e002      	b.n	8009296 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8009290:	2300      	movs	r3, #0
 8009292:	e000      	b.n	8009296 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8009294:	2302      	movs	r3, #2
  }
}
 8009296:	4618      	mov	r0, r3
 8009298:	3710      	adds	r7, #16
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
	...

080092a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80092a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092a4:	b085      	sub	sp, #20
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	691b      	ldr	r3, [r3, #16]
 80092b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	68da      	ldr	r2, [r3, #12]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	430a      	orrs	r2, r1
 80092be:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	689a      	ldr	r2, [r3, #8]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	691b      	ldr	r3, [r3, #16]
 80092c8:	431a      	orrs	r2, r3
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	695b      	ldr	r3, [r3, #20]
 80092ce:	431a      	orrs	r2, r3
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	69db      	ldr	r3, [r3, #28]
 80092d4:	4313      	orrs	r3, r2
 80092d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	68db      	ldr	r3, [r3, #12]
 80092de:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80092e2:	f023 030c 	bic.w	r3, r3, #12
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	6812      	ldr	r2, [r2, #0]
 80092ea:	68f9      	ldr	r1, [r7, #12]
 80092ec:	430b      	orrs	r3, r1
 80092ee:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	695b      	ldr	r3, [r3, #20]
 80092f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	699a      	ldr	r2, [r3, #24]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	430a      	orrs	r2, r1
 8009304:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	69db      	ldr	r3, [r3, #28]
 800930a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800930e:	f040 8199 	bne.w	8009644 <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4ac6      	ldr	r2, [pc, #792]	; (8009630 <UART_SetConfig+0x390>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d00f      	beq.n	800933c <UART_SetConfig+0x9c>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4ac4      	ldr	r2, [pc, #784]	; (8009634 <UART_SetConfig+0x394>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d00a      	beq.n	800933c <UART_SetConfig+0x9c>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4ac3      	ldr	r2, [pc, #780]	; (8009638 <UART_SetConfig+0x398>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d005      	beq.n	800933c <UART_SetConfig+0x9c>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4ac1      	ldr	r2, [pc, #772]	; (800963c <UART_SetConfig+0x39c>)
 8009336:	4293      	cmp	r3, r2
 8009338:	f040 80bd 	bne.w	80094b6 <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800933c:	f7fe fff2 	bl	8008324 <HAL_RCC_GetPCLK2Freq>
 8009340:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	461d      	mov	r5, r3
 8009346:	f04f 0600 	mov.w	r6, #0
 800934a:	46a8      	mov	r8, r5
 800934c:	46b1      	mov	r9, r6
 800934e:	eb18 0308 	adds.w	r3, r8, r8
 8009352:	eb49 0409 	adc.w	r4, r9, r9
 8009356:	4698      	mov	r8, r3
 8009358:	46a1      	mov	r9, r4
 800935a:	eb18 0805 	adds.w	r8, r8, r5
 800935e:	eb49 0906 	adc.w	r9, r9, r6
 8009362:	f04f 0100 	mov.w	r1, #0
 8009366:	f04f 0200 	mov.w	r2, #0
 800936a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800936e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009372:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009376:	4688      	mov	r8, r1
 8009378:	4691      	mov	r9, r2
 800937a:	eb18 0005 	adds.w	r0, r8, r5
 800937e:	eb49 0106 	adc.w	r1, r9, r6
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	461d      	mov	r5, r3
 8009388:	f04f 0600 	mov.w	r6, #0
 800938c:	196b      	adds	r3, r5, r5
 800938e:	eb46 0406 	adc.w	r4, r6, r6
 8009392:	461a      	mov	r2, r3
 8009394:	4623      	mov	r3, r4
 8009396:	f7f7 fbe9 	bl	8000b6c <__aeabi_uldivmod>
 800939a:	4603      	mov	r3, r0
 800939c:	460c      	mov	r4, r1
 800939e:	461a      	mov	r2, r3
 80093a0:	4ba7      	ldr	r3, [pc, #668]	; (8009640 <UART_SetConfig+0x3a0>)
 80093a2:	fba3 2302 	umull	r2, r3, r3, r2
 80093a6:	095b      	lsrs	r3, r3, #5
 80093a8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	461d      	mov	r5, r3
 80093b0:	f04f 0600 	mov.w	r6, #0
 80093b4:	46a9      	mov	r9, r5
 80093b6:	46b2      	mov	sl, r6
 80093b8:	eb19 0309 	adds.w	r3, r9, r9
 80093bc:	eb4a 040a 	adc.w	r4, sl, sl
 80093c0:	4699      	mov	r9, r3
 80093c2:	46a2      	mov	sl, r4
 80093c4:	eb19 0905 	adds.w	r9, r9, r5
 80093c8:	eb4a 0a06 	adc.w	sl, sl, r6
 80093cc:	f04f 0100 	mov.w	r1, #0
 80093d0:	f04f 0200 	mov.w	r2, #0
 80093d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80093d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80093dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80093e0:	4689      	mov	r9, r1
 80093e2:	4692      	mov	sl, r2
 80093e4:	eb19 0005 	adds.w	r0, r9, r5
 80093e8:	eb4a 0106 	adc.w	r1, sl, r6
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	461d      	mov	r5, r3
 80093f2:	f04f 0600 	mov.w	r6, #0
 80093f6:	196b      	adds	r3, r5, r5
 80093f8:	eb46 0406 	adc.w	r4, r6, r6
 80093fc:	461a      	mov	r2, r3
 80093fe:	4623      	mov	r3, r4
 8009400:	f7f7 fbb4 	bl	8000b6c <__aeabi_uldivmod>
 8009404:	4603      	mov	r3, r0
 8009406:	460c      	mov	r4, r1
 8009408:	461a      	mov	r2, r3
 800940a:	4b8d      	ldr	r3, [pc, #564]	; (8009640 <UART_SetConfig+0x3a0>)
 800940c:	fba3 1302 	umull	r1, r3, r3, r2
 8009410:	095b      	lsrs	r3, r3, #5
 8009412:	2164      	movs	r1, #100	; 0x64
 8009414:	fb01 f303 	mul.w	r3, r1, r3
 8009418:	1ad3      	subs	r3, r2, r3
 800941a:	00db      	lsls	r3, r3, #3
 800941c:	3332      	adds	r3, #50	; 0x32
 800941e:	4a88      	ldr	r2, [pc, #544]	; (8009640 <UART_SetConfig+0x3a0>)
 8009420:	fba2 2303 	umull	r2, r3, r2, r3
 8009424:	095b      	lsrs	r3, r3, #5
 8009426:	005b      	lsls	r3, r3, #1
 8009428:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800942c:	4498      	add	r8, r3
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	461d      	mov	r5, r3
 8009432:	f04f 0600 	mov.w	r6, #0
 8009436:	46a9      	mov	r9, r5
 8009438:	46b2      	mov	sl, r6
 800943a:	eb19 0309 	adds.w	r3, r9, r9
 800943e:	eb4a 040a 	adc.w	r4, sl, sl
 8009442:	4699      	mov	r9, r3
 8009444:	46a2      	mov	sl, r4
 8009446:	eb19 0905 	adds.w	r9, r9, r5
 800944a:	eb4a 0a06 	adc.w	sl, sl, r6
 800944e:	f04f 0100 	mov.w	r1, #0
 8009452:	f04f 0200 	mov.w	r2, #0
 8009456:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800945a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800945e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009462:	4689      	mov	r9, r1
 8009464:	4692      	mov	sl, r2
 8009466:	eb19 0005 	adds.w	r0, r9, r5
 800946a:	eb4a 0106 	adc.w	r1, sl, r6
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	461d      	mov	r5, r3
 8009474:	f04f 0600 	mov.w	r6, #0
 8009478:	196b      	adds	r3, r5, r5
 800947a:	eb46 0406 	adc.w	r4, r6, r6
 800947e:	461a      	mov	r2, r3
 8009480:	4623      	mov	r3, r4
 8009482:	f7f7 fb73 	bl	8000b6c <__aeabi_uldivmod>
 8009486:	4603      	mov	r3, r0
 8009488:	460c      	mov	r4, r1
 800948a:	461a      	mov	r2, r3
 800948c:	4b6c      	ldr	r3, [pc, #432]	; (8009640 <UART_SetConfig+0x3a0>)
 800948e:	fba3 1302 	umull	r1, r3, r3, r2
 8009492:	095b      	lsrs	r3, r3, #5
 8009494:	2164      	movs	r1, #100	; 0x64
 8009496:	fb01 f303 	mul.w	r3, r1, r3
 800949a:	1ad3      	subs	r3, r2, r3
 800949c:	00db      	lsls	r3, r3, #3
 800949e:	3332      	adds	r3, #50	; 0x32
 80094a0:	4a67      	ldr	r2, [pc, #412]	; (8009640 <UART_SetConfig+0x3a0>)
 80094a2:	fba2 2303 	umull	r2, r3, r2, r3
 80094a6:	095b      	lsrs	r3, r3, #5
 80094a8:	f003 0207 	and.w	r2, r3, #7
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4442      	add	r2, r8
 80094b2:	609a      	str	r2, [r3, #8]
 80094b4:	e27d      	b.n	80099b2 <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80094b6:	f7fe ff21 	bl	80082fc <HAL_RCC_GetPCLK1Freq>
 80094ba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	461d      	mov	r5, r3
 80094c0:	f04f 0600 	mov.w	r6, #0
 80094c4:	46a8      	mov	r8, r5
 80094c6:	46b1      	mov	r9, r6
 80094c8:	eb18 0308 	adds.w	r3, r8, r8
 80094cc:	eb49 0409 	adc.w	r4, r9, r9
 80094d0:	4698      	mov	r8, r3
 80094d2:	46a1      	mov	r9, r4
 80094d4:	eb18 0805 	adds.w	r8, r8, r5
 80094d8:	eb49 0906 	adc.w	r9, r9, r6
 80094dc:	f04f 0100 	mov.w	r1, #0
 80094e0:	f04f 0200 	mov.w	r2, #0
 80094e4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80094e8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80094ec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80094f0:	4688      	mov	r8, r1
 80094f2:	4691      	mov	r9, r2
 80094f4:	eb18 0005 	adds.w	r0, r8, r5
 80094f8:	eb49 0106 	adc.w	r1, r9, r6
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	461d      	mov	r5, r3
 8009502:	f04f 0600 	mov.w	r6, #0
 8009506:	196b      	adds	r3, r5, r5
 8009508:	eb46 0406 	adc.w	r4, r6, r6
 800950c:	461a      	mov	r2, r3
 800950e:	4623      	mov	r3, r4
 8009510:	f7f7 fb2c 	bl	8000b6c <__aeabi_uldivmod>
 8009514:	4603      	mov	r3, r0
 8009516:	460c      	mov	r4, r1
 8009518:	461a      	mov	r2, r3
 800951a:	4b49      	ldr	r3, [pc, #292]	; (8009640 <UART_SetConfig+0x3a0>)
 800951c:	fba3 2302 	umull	r2, r3, r3, r2
 8009520:	095b      	lsrs	r3, r3, #5
 8009522:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	461d      	mov	r5, r3
 800952a:	f04f 0600 	mov.w	r6, #0
 800952e:	46a9      	mov	r9, r5
 8009530:	46b2      	mov	sl, r6
 8009532:	eb19 0309 	adds.w	r3, r9, r9
 8009536:	eb4a 040a 	adc.w	r4, sl, sl
 800953a:	4699      	mov	r9, r3
 800953c:	46a2      	mov	sl, r4
 800953e:	eb19 0905 	adds.w	r9, r9, r5
 8009542:	eb4a 0a06 	adc.w	sl, sl, r6
 8009546:	f04f 0100 	mov.w	r1, #0
 800954a:	f04f 0200 	mov.w	r2, #0
 800954e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009552:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009556:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800955a:	4689      	mov	r9, r1
 800955c:	4692      	mov	sl, r2
 800955e:	eb19 0005 	adds.w	r0, r9, r5
 8009562:	eb4a 0106 	adc.w	r1, sl, r6
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	461d      	mov	r5, r3
 800956c:	f04f 0600 	mov.w	r6, #0
 8009570:	196b      	adds	r3, r5, r5
 8009572:	eb46 0406 	adc.w	r4, r6, r6
 8009576:	461a      	mov	r2, r3
 8009578:	4623      	mov	r3, r4
 800957a:	f7f7 faf7 	bl	8000b6c <__aeabi_uldivmod>
 800957e:	4603      	mov	r3, r0
 8009580:	460c      	mov	r4, r1
 8009582:	461a      	mov	r2, r3
 8009584:	4b2e      	ldr	r3, [pc, #184]	; (8009640 <UART_SetConfig+0x3a0>)
 8009586:	fba3 1302 	umull	r1, r3, r3, r2
 800958a:	095b      	lsrs	r3, r3, #5
 800958c:	2164      	movs	r1, #100	; 0x64
 800958e:	fb01 f303 	mul.w	r3, r1, r3
 8009592:	1ad3      	subs	r3, r2, r3
 8009594:	00db      	lsls	r3, r3, #3
 8009596:	3332      	adds	r3, #50	; 0x32
 8009598:	4a29      	ldr	r2, [pc, #164]	; (8009640 <UART_SetConfig+0x3a0>)
 800959a:	fba2 2303 	umull	r2, r3, r2, r3
 800959e:	095b      	lsrs	r3, r3, #5
 80095a0:	005b      	lsls	r3, r3, #1
 80095a2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80095a6:	4498      	add	r8, r3
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	461d      	mov	r5, r3
 80095ac:	f04f 0600 	mov.w	r6, #0
 80095b0:	46a9      	mov	r9, r5
 80095b2:	46b2      	mov	sl, r6
 80095b4:	eb19 0309 	adds.w	r3, r9, r9
 80095b8:	eb4a 040a 	adc.w	r4, sl, sl
 80095bc:	4699      	mov	r9, r3
 80095be:	46a2      	mov	sl, r4
 80095c0:	eb19 0905 	adds.w	r9, r9, r5
 80095c4:	eb4a 0a06 	adc.w	sl, sl, r6
 80095c8:	f04f 0100 	mov.w	r1, #0
 80095cc:	f04f 0200 	mov.w	r2, #0
 80095d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80095d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80095d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80095dc:	4689      	mov	r9, r1
 80095de:	4692      	mov	sl, r2
 80095e0:	eb19 0005 	adds.w	r0, r9, r5
 80095e4:	eb4a 0106 	adc.w	r1, sl, r6
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	461d      	mov	r5, r3
 80095ee:	f04f 0600 	mov.w	r6, #0
 80095f2:	196b      	adds	r3, r5, r5
 80095f4:	eb46 0406 	adc.w	r4, r6, r6
 80095f8:	461a      	mov	r2, r3
 80095fa:	4623      	mov	r3, r4
 80095fc:	f7f7 fab6 	bl	8000b6c <__aeabi_uldivmod>
 8009600:	4603      	mov	r3, r0
 8009602:	460c      	mov	r4, r1
 8009604:	461a      	mov	r2, r3
 8009606:	4b0e      	ldr	r3, [pc, #56]	; (8009640 <UART_SetConfig+0x3a0>)
 8009608:	fba3 1302 	umull	r1, r3, r3, r2
 800960c:	095b      	lsrs	r3, r3, #5
 800960e:	2164      	movs	r1, #100	; 0x64
 8009610:	fb01 f303 	mul.w	r3, r1, r3
 8009614:	1ad3      	subs	r3, r2, r3
 8009616:	00db      	lsls	r3, r3, #3
 8009618:	3332      	adds	r3, #50	; 0x32
 800961a:	4a09      	ldr	r2, [pc, #36]	; (8009640 <UART_SetConfig+0x3a0>)
 800961c:	fba2 2303 	umull	r2, r3, r2, r3
 8009620:	095b      	lsrs	r3, r3, #5
 8009622:	f003 0207 	and.w	r2, r3, #7
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4442      	add	r2, r8
 800962c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800962e:	e1c0      	b.n	80099b2 <UART_SetConfig+0x712>
 8009630:	40011000 	.word	0x40011000
 8009634:	40011400 	.word	0x40011400
 8009638:	40011800 	.word	0x40011800
 800963c:	40011c00 	.word	0x40011c00
 8009640:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4adc      	ldr	r2, [pc, #880]	; (80099bc <UART_SetConfig+0x71c>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d00f      	beq.n	800966e <UART_SetConfig+0x3ce>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4adb      	ldr	r2, [pc, #876]	; (80099c0 <UART_SetConfig+0x720>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d00a      	beq.n	800966e <UART_SetConfig+0x3ce>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4ad9      	ldr	r2, [pc, #868]	; (80099c4 <UART_SetConfig+0x724>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d005      	beq.n	800966e <UART_SetConfig+0x3ce>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4ad8      	ldr	r2, [pc, #864]	; (80099c8 <UART_SetConfig+0x728>)
 8009668:	4293      	cmp	r3, r2
 800966a:	f040 80d1 	bne.w	8009810 <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 800966e:	f7fe fe59 	bl	8008324 <HAL_RCC_GetPCLK2Freq>
 8009672:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	469a      	mov	sl, r3
 8009678:	f04f 0b00 	mov.w	fp, #0
 800967c:	46d0      	mov	r8, sl
 800967e:	46d9      	mov	r9, fp
 8009680:	eb18 0308 	adds.w	r3, r8, r8
 8009684:	eb49 0409 	adc.w	r4, r9, r9
 8009688:	4698      	mov	r8, r3
 800968a:	46a1      	mov	r9, r4
 800968c:	eb18 080a 	adds.w	r8, r8, sl
 8009690:	eb49 090b 	adc.w	r9, r9, fp
 8009694:	f04f 0100 	mov.w	r1, #0
 8009698:	f04f 0200 	mov.w	r2, #0
 800969c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80096a0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80096a4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80096a8:	4688      	mov	r8, r1
 80096aa:	4691      	mov	r9, r2
 80096ac:	eb1a 0508 	adds.w	r5, sl, r8
 80096b0:	eb4b 0609 	adc.w	r6, fp, r9
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	4619      	mov	r1, r3
 80096ba:	f04f 0200 	mov.w	r2, #0
 80096be:	f04f 0300 	mov.w	r3, #0
 80096c2:	f04f 0400 	mov.w	r4, #0
 80096c6:	0094      	lsls	r4, r2, #2
 80096c8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80096cc:	008b      	lsls	r3, r1, #2
 80096ce:	461a      	mov	r2, r3
 80096d0:	4623      	mov	r3, r4
 80096d2:	4628      	mov	r0, r5
 80096d4:	4631      	mov	r1, r6
 80096d6:	f7f7 fa49 	bl	8000b6c <__aeabi_uldivmod>
 80096da:	4603      	mov	r3, r0
 80096dc:	460c      	mov	r4, r1
 80096de:	461a      	mov	r2, r3
 80096e0:	4bba      	ldr	r3, [pc, #744]	; (80099cc <UART_SetConfig+0x72c>)
 80096e2:	fba3 2302 	umull	r2, r3, r3, r2
 80096e6:	095b      	lsrs	r3, r3, #5
 80096e8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	469b      	mov	fp, r3
 80096f0:	f04f 0c00 	mov.w	ip, #0
 80096f4:	46d9      	mov	r9, fp
 80096f6:	46e2      	mov	sl, ip
 80096f8:	eb19 0309 	adds.w	r3, r9, r9
 80096fc:	eb4a 040a 	adc.w	r4, sl, sl
 8009700:	4699      	mov	r9, r3
 8009702:	46a2      	mov	sl, r4
 8009704:	eb19 090b 	adds.w	r9, r9, fp
 8009708:	eb4a 0a0c 	adc.w	sl, sl, ip
 800970c:	f04f 0100 	mov.w	r1, #0
 8009710:	f04f 0200 	mov.w	r2, #0
 8009714:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009718:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800971c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009720:	4689      	mov	r9, r1
 8009722:	4692      	mov	sl, r2
 8009724:	eb1b 0509 	adds.w	r5, fp, r9
 8009728:	eb4c 060a 	adc.w	r6, ip, sl
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	4619      	mov	r1, r3
 8009732:	f04f 0200 	mov.w	r2, #0
 8009736:	f04f 0300 	mov.w	r3, #0
 800973a:	f04f 0400 	mov.w	r4, #0
 800973e:	0094      	lsls	r4, r2, #2
 8009740:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009744:	008b      	lsls	r3, r1, #2
 8009746:	461a      	mov	r2, r3
 8009748:	4623      	mov	r3, r4
 800974a:	4628      	mov	r0, r5
 800974c:	4631      	mov	r1, r6
 800974e:	f7f7 fa0d 	bl	8000b6c <__aeabi_uldivmod>
 8009752:	4603      	mov	r3, r0
 8009754:	460c      	mov	r4, r1
 8009756:	461a      	mov	r2, r3
 8009758:	4b9c      	ldr	r3, [pc, #624]	; (80099cc <UART_SetConfig+0x72c>)
 800975a:	fba3 1302 	umull	r1, r3, r3, r2
 800975e:	095b      	lsrs	r3, r3, #5
 8009760:	2164      	movs	r1, #100	; 0x64
 8009762:	fb01 f303 	mul.w	r3, r1, r3
 8009766:	1ad3      	subs	r3, r2, r3
 8009768:	011b      	lsls	r3, r3, #4
 800976a:	3332      	adds	r3, #50	; 0x32
 800976c:	4a97      	ldr	r2, [pc, #604]	; (80099cc <UART_SetConfig+0x72c>)
 800976e:	fba2 2303 	umull	r2, r3, r2, r3
 8009772:	095b      	lsrs	r3, r3, #5
 8009774:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009778:	4498      	add	r8, r3
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	469b      	mov	fp, r3
 800977e:	f04f 0c00 	mov.w	ip, #0
 8009782:	46d9      	mov	r9, fp
 8009784:	46e2      	mov	sl, ip
 8009786:	eb19 0309 	adds.w	r3, r9, r9
 800978a:	eb4a 040a 	adc.w	r4, sl, sl
 800978e:	4699      	mov	r9, r3
 8009790:	46a2      	mov	sl, r4
 8009792:	eb19 090b 	adds.w	r9, r9, fp
 8009796:	eb4a 0a0c 	adc.w	sl, sl, ip
 800979a:	f04f 0100 	mov.w	r1, #0
 800979e:	f04f 0200 	mov.w	r2, #0
 80097a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80097a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80097aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80097ae:	4689      	mov	r9, r1
 80097b0:	4692      	mov	sl, r2
 80097b2:	eb1b 0509 	adds.w	r5, fp, r9
 80097b6:	eb4c 060a 	adc.w	r6, ip, sl
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	4619      	mov	r1, r3
 80097c0:	f04f 0200 	mov.w	r2, #0
 80097c4:	f04f 0300 	mov.w	r3, #0
 80097c8:	f04f 0400 	mov.w	r4, #0
 80097cc:	0094      	lsls	r4, r2, #2
 80097ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80097d2:	008b      	lsls	r3, r1, #2
 80097d4:	461a      	mov	r2, r3
 80097d6:	4623      	mov	r3, r4
 80097d8:	4628      	mov	r0, r5
 80097da:	4631      	mov	r1, r6
 80097dc:	f7f7 f9c6 	bl	8000b6c <__aeabi_uldivmod>
 80097e0:	4603      	mov	r3, r0
 80097e2:	460c      	mov	r4, r1
 80097e4:	461a      	mov	r2, r3
 80097e6:	4b79      	ldr	r3, [pc, #484]	; (80099cc <UART_SetConfig+0x72c>)
 80097e8:	fba3 1302 	umull	r1, r3, r3, r2
 80097ec:	095b      	lsrs	r3, r3, #5
 80097ee:	2164      	movs	r1, #100	; 0x64
 80097f0:	fb01 f303 	mul.w	r3, r1, r3
 80097f4:	1ad3      	subs	r3, r2, r3
 80097f6:	011b      	lsls	r3, r3, #4
 80097f8:	3332      	adds	r3, #50	; 0x32
 80097fa:	4a74      	ldr	r2, [pc, #464]	; (80099cc <UART_SetConfig+0x72c>)
 80097fc:	fba2 2303 	umull	r2, r3, r2, r3
 8009800:	095b      	lsrs	r3, r3, #5
 8009802:	f003 020f 	and.w	r2, r3, #15
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4442      	add	r2, r8
 800980c:	609a      	str	r2, [r3, #8]
 800980e:	e0d0      	b.n	80099b2 <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009810:	f7fe fd74 	bl	80082fc <HAL_RCC_GetPCLK1Freq>
 8009814:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	469a      	mov	sl, r3
 800981a:	f04f 0b00 	mov.w	fp, #0
 800981e:	46d0      	mov	r8, sl
 8009820:	46d9      	mov	r9, fp
 8009822:	eb18 0308 	adds.w	r3, r8, r8
 8009826:	eb49 0409 	adc.w	r4, r9, r9
 800982a:	4698      	mov	r8, r3
 800982c:	46a1      	mov	r9, r4
 800982e:	eb18 080a 	adds.w	r8, r8, sl
 8009832:	eb49 090b 	adc.w	r9, r9, fp
 8009836:	f04f 0100 	mov.w	r1, #0
 800983a:	f04f 0200 	mov.w	r2, #0
 800983e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009842:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009846:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800984a:	4688      	mov	r8, r1
 800984c:	4691      	mov	r9, r2
 800984e:	eb1a 0508 	adds.w	r5, sl, r8
 8009852:	eb4b 0609 	adc.w	r6, fp, r9
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	4619      	mov	r1, r3
 800985c:	f04f 0200 	mov.w	r2, #0
 8009860:	f04f 0300 	mov.w	r3, #0
 8009864:	f04f 0400 	mov.w	r4, #0
 8009868:	0094      	lsls	r4, r2, #2
 800986a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800986e:	008b      	lsls	r3, r1, #2
 8009870:	461a      	mov	r2, r3
 8009872:	4623      	mov	r3, r4
 8009874:	4628      	mov	r0, r5
 8009876:	4631      	mov	r1, r6
 8009878:	f7f7 f978 	bl	8000b6c <__aeabi_uldivmod>
 800987c:	4603      	mov	r3, r0
 800987e:	460c      	mov	r4, r1
 8009880:	461a      	mov	r2, r3
 8009882:	4b52      	ldr	r3, [pc, #328]	; (80099cc <UART_SetConfig+0x72c>)
 8009884:	fba3 2302 	umull	r2, r3, r3, r2
 8009888:	095b      	lsrs	r3, r3, #5
 800988a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	469b      	mov	fp, r3
 8009892:	f04f 0c00 	mov.w	ip, #0
 8009896:	46d9      	mov	r9, fp
 8009898:	46e2      	mov	sl, ip
 800989a:	eb19 0309 	adds.w	r3, r9, r9
 800989e:	eb4a 040a 	adc.w	r4, sl, sl
 80098a2:	4699      	mov	r9, r3
 80098a4:	46a2      	mov	sl, r4
 80098a6:	eb19 090b 	adds.w	r9, r9, fp
 80098aa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80098ae:	f04f 0100 	mov.w	r1, #0
 80098b2:	f04f 0200 	mov.w	r2, #0
 80098b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80098ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80098be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80098c2:	4689      	mov	r9, r1
 80098c4:	4692      	mov	sl, r2
 80098c6:	eb1b 0509 	adds.w	r5, fp, r9
 80098ca:	eb4c 060a 	adc.w	r6, ip, sl
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	4619      	mov	r1, r3
 80098d4:	f04f 0200 	mov.w	r2, #0
 80098d8:	f04f 0300 	mov.w	r3, #0
 80098dc:	f04f 0400 	mov.w	r4, #0
 80098e0:	0094      	lsls	r4, r2, #2
 80098e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80098e6:	008b      	lsls	r3, r1, #2
 80098e8:	461a      	mov	r2, r3
 80098ea:	4623      	mov	r3, r4
 80098ec:	4628      	mov	r0, r5
 80098ee:	4631      	mov	r1, r6
 80098f0:	f7f7 f93c 	bl	8000b6c <__aeabi_uldivmod>
 80098f4:	4603      	mov	r3, r0
 80098f6:	460c      	mov	r4, r1
 80098f8:	461a      	mov	r2, r3
 80098fa:	4b34      	ldr	r3, [pc, #208]	; (80099cc <UART_SetConfig+0x72c>)
 80098fc:	fba3 1302 	umull	r1, r3, r3, r2
 8009900:	095b      	lsrs	r3, r3, #5
 8009902:	2164      	movs	r1, #100	; 0x64
 8009904:	fb01 f303 	mul.w	r3, r1, r3
 8009908:	1ad3      	subs	r3, r2, r3
 800990a:	011b      	lsls	r3, r3, #4
 800990c:	3332      	adds	r3, #50	; 0x32
 800990e:	4a2f      	ldr	r2, [pc, #188]	; (80099cc <UART_SetConfig+0x72c>)
 8009910:	fba2 2303 	umull	r2, r3, r2, r3
 8009914:	095b      	lsrs	r3, r3, #5
 8009916:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800991a:	4498      	add	r8, r3
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	469b      	mov	fp, r3
 8009920:	f04f 0c00 	mov.w	ip, #0
 8009924:	46d9      	mov	r9, fp
 8009926:	46e2      	mov	sl, ip
 8009928:	eb19 0309 	adds.w	r3, r9, r9
 800992c:	eb4a 040a 	adc.w	r4, sl, sl
 8009930:	4699      	mov	r9, r3
 8009932:	46a2      	mov	sl, r4
 8009934:	eb19 090b 	adds.w	r9, r9, fp
 8009938:	eb4a 0a0c 	adc.w	sl, sl, ip
 800993c:	f04f 0100 	mov.w	r1, #0
 8009940:	f04f 0200 	mov.w	r2, #0
 8009944:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009948:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800994c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009950:	4689      	mov	r9, r1
 8009952:	4692      	mov	sl, r2
 8009954:	eb1b 0509 	adds.w	r5, fp, r9
 8009958:	eb4c 060a 	adc.w	r6, ip, sl
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	4619      	mov	r1, r3
 8009962:	f04f 0200 	mov.w	r2, #0
 8009966:	f04f 0300 	mov.w	r3, #0
 800996a:	f04f 0400 	mov.w	r4, #0
 800996e:	0094      	lsls	r4, r2, #2
 8009970:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009974:	008b      	lsls	r3, r1, #2
 8009976:	461a      	mov	r2, r3
 8009978:	4623      	mov	r3, r4
 800997a:	4628      	mov	r0, r5
 800997c:	4631      	mov	r1, r6
 800997e:	f7f7 f8f5 	bl	8000b6c <__aeabi_uldivmod>
 8009982:	4603      	mov	r3, r0
 8009984:	460c      	mov	r4, r1
 8009986:	461a      	mov	r2, r3
 8009988:	4b10      	ldr	r3, [pc, #64]	; (80099cc <UART_SetConfig+0x72c>)
 800998a:	fba3 1302 	umull	r1, r3, r3, r2
 800998e:	095b      	lsrs	r3, r3, #5
 8009990:	2164      	movs	r1, #100	; 0x64
 8009992:	fb01 f303 	mul.w	r3, r1, r3
 8009996:	1ad3      	subs	r3, r2, r3
 8009998:	011b      	lsls	r3, r3, #4
 800999a:	3332      	adds	r3, #50	; 0x32
 800999c:	4a0b      	ldr	r2, [pc, #44]	; (80099cc <UART_SetConfig+0x72c>)
 800999e:	fba2 2303 	umull	r2, r3, r2, r3
 80099a2:	095b      	lsrs	r3, r3, #5
 80099a4:	f003 020f 	and.w	r2, r3, #15
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4442      	add	r2, r8
 80099ae:	609a      	str	r2, [r3, #8]
}
 80099b0:	e7ff      	b.n	80099b2 <UART_SetConfig+0x712>
 80099b2:	bf00      	nop
 80099b4:	3714      	adds	r7, #20
 80099b6:	46bd      	mov	sp, r7
 80099b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099bc:	40011000 	.word	0x40011000
 80099c0:	40011400 	.word	0x40011400
 80099c4:	40011800 	.word	0x40011800
 80099c8:	40011c00 	.word	0x40011c00
 80099cc:	51eb851f 	.word	0x51eb851f

080099d0 <__errno>:
 80099d0:	4b01      	ldr	r3, [pc, #4]	; (80099d8 <__errno+0x8>)
 80099d2:	6818      	ldr	r0, [r3, #0]
 80099d4:	4770      	bx	lr
 80099d6:	bf00      	nop
 80099d8:	20000030 	.word	0x20000030

080099dc <__libc_init_array>:
 80099dc:	b570      	push	{r4, r5, r6, lr}
 80099de:	4e0d      	ldr	r6, [pc, #52]	; (8009a14 <__libc_init_array+0x38>)
 80099e0:	4c0d      	ldr	r4, [pc, #52]	; (8009a18 <__libc_init_array+0x3c>)
 80099e2:	1ba4      	subs	r4, r4, r6
 80099e4:	10a4      	asrs	r4, r4, #2
 80099e6:	2500      	movs	r5, #0
 80099e8:	42a5      	cmp	r5, r4
 80099ea:	d109      	bne.n	8009a00 <__libc_init_array+0x24>
 80099ec:	4e0b      	ldr	r6, [pc, #44]	; (8009a1c <__libc_init_array+0x40>)
 80099ee:	4c0c      	ldr	r4, [pc, #48]	; (8009a20 <__libc_init_array+0x44>)
 80099f0:	f000 fd14 	bl	800a41c <_init>
 80099f4:	1ba4      	subs	r4, r4, r6
 80099f6:	10a4      	asrs	r4, r4, #2
 80099f8:	2500      	movs	r5, #0
 80099fa:	42a5      	cmp	r5, r4
 80099fc:	d105      	bne.n	8009a0a <__libc_init_array+0x2e>
 80099fe:	bd70      	pop	{r4, r5, r6, pc}
 8009a00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a04:	4798      	blx	r3
 8009a06:	3501      	adds	r5, #1
 8009a08:	e7ee      	b.n	80099e8 <__libc_init_array+0xc>
 8009a0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a0e:	4798      	blx	r3
 8009a10:	3501      	adds	r5, #1
 8009a12:	e7f2      	b.n	80099fa <__libc_init_array+0x1e>
 8009a14:	0800ac58 	.word	0x0800ac58
 8009a18:	0800ac58 	.word	0x0800ac58
 8009a1c:	0800ac58 	.word	0x0800ac58
 8009a20:	0800ac5c 	.word	0x0800ac5c

08009a24 <memcmp>:
 8009a24:	b530      	push	{r4, r5, lr}
 8009a26:	2400      	movs	r4, #0
 8009a28:	42a2      	cmp	r2, r4
 8009a2a:	d101      	bne.n	8009a30 <memcmp+0xc>
 8009a2c:	2000      	movs	r0, #0
 8009a2e:	e007      	b.n	8009a40 <memcmp+0x1c>
 8009a30:	5d03      	ldrb	r3, [r0, r4]
 8009a32:	3401      	adds	r4, #1
 8009a34:	190d      	adds	r5, r1, r4
 8009a36:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8009a3a:	42ab      	cmp	r3, r5
 8009a3c:	d0f4      	beq.n	8009a28 <memcmp+0x4>
 8009a3e:	1b58      	subs	r0, r3, r5
 8009a40:	bd30      	pop	{r4, r5, pc}

08009a42 <memcpy>:
 8009a42:	b510      	push	{r4, lr}
 8009a44:	1e43      	subs	r3, r0, #1
 8009a46:	440a      	add	r2, r1
 8009a48:	4291      	cmp	r1, r2
 8009a4a:	d100      	bne.n	8009a4e <memcpy+0xc>
 8009a4c:	bd10      	pop	{r4, pc}
 8009a4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a56:	e7f7      	b.n	8009a48 <memcpy+0x6>

08009a58 <memset>:
 8009a58:	4402      	add	r2, r0
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d100      	bne.n	8009a62 <memset+0xa>
 8009a60:	4770      	bx	lr
 8009a62:	f803 1b01 	strb.w	r1, [r3], #1
 8009a66:	e7f9      	b.n	8009a5c <memset+0x4>

08009a68 <siprintf>:
 8009a68:	b40e      	push	{r1, r2, r3}
 8009a6a:	b500      	push	{lr}
 8009a6c:	b09c      	sub	sp, #112	; 0x70
 8009a6e:	ab1d      	add	r3, sp, #116	; 0x74
 8009a70:	9002      	str	r0, [sp, #8]
 8009a72:	9006      	str	r0, [sp, #24]
 8009a74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009a78:	4809      	ldr	r0, [pc, #36]	; (8009aa0 <siprintf+0x38>)
 8009a7a:	9107      	str	r1, [sp, #28]
 8009a7c:	9104      	str	r1, [sp, #16]
 8009a7e:	4909      	ldr	r1, [pc, #36]	; (8009aa4 <siprintf+0x3c>)
 8009a80:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a84:	9105      	str	r1, [sp, #20]
 8009a86:	6800      	ldr	r0, [r0, #0]
 8009a88:	9301      	str	r3, [sp, #4]
 8009a8a:	a902      	add	r1, sp, #8
 8009a8c:	f000 f938 	bl	8009d00 <_svfiprintf_r>
 8009a90:	9b02      	ldr	r3, [sp, #8]
 8009a92:	2200      	movs	r2, #0
 8009a94:	701a      	strb	r2, [r3, #0]
 8009a96:	b01c      	add	sp, #112	; 0x70
 8009a98:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a9c:	b003      	add	sp, #12
 8009a9e:	4770      	bx	lr
 8009aa0:	20000030 	.word	0x20000030
 8009aa4:	ffff0208 	.word	0xffff0208

08009aa8 <strncmp>:
 8009aa8:	b510      	push	{r4, lr}
 8009aaa:	b16a      	cbz	r2, 8009ac8 <strncmp+0x20>
 8009aac:	3901      	subs	r1, #1
 8009aae:	1884      	adds	r4, r0, r2
 8009ab0:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009ab4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d103      	bne.n	8009ac4 <strncmp+0x1c>
 8009abc:	42a0      	cmp	r0, r4
 8009abe:	d001      	beq.n	8009ac4 <strncmp+0x1c>
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d1f5      	bne.n	8009ab0 <strncmp+0x8>
 8009ac4:	1a98      	subs	r0, r3, r2
 8009ac6:	bd10      	pop	{r4, pc}
 8009ac8:	4610      	mov	r0, r2
 8009aca:	e7fc      	b.n	8009ac6 <strncmp+0x1e>

08009acc <strstr>:
 8009acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ace:	7803      	ldrb	r3, [r0, #0]
 8009ad0:	b17b      	cbz	r3, 8009af2 <strstr+0x26>
 8009ad2:	4604      	mov	r4, r0
 8009ad4:	7823      	ldrb	r3, [r4, #0]
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	1c66      	adds	r6, r4, #1
 8009ada:	b17b      	cbz	r3, 8009afc <strstr+0x30>
 8009adc:	1e4a      	subs	r2, r1, #1
 8009ade:	1e63      	subs	r3, r4, #1
 8009ae0:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8009ae4:	b14d      	cbz	r5, 8009afa <strstr+0x2e>
 8009ae6:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8009aea:	42af      	cmp	r7, r5
 8009aec:	4634      	mov	r4, r6
 8009aee:	d0f7      	beq.n	8009ae0 <strstr+0x14>
 8009af0:	e7f0      	b.n	8009ad4 <strstr+0x8>
 8009af2:	780b      	ldrb	r3, [r1, #0]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	bf18      	it	ne
 8009af8:	2000      	movne	r0, #0
 8009afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009afc:	4618      	mov	r0, r3
 8009afe:	e7fc      	b.n	8009afa <strstr+0x2e>

08009b00 <_strtoul_l.isra.0>:
 8009b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b04:	4680      	mov	r8, r0
 8009b06:	4689      	mov	r9, r1
 8009b08:	4692      	mov	sl, r2
 8009b0a:	461e      	mov	r6, r3
 8009b0c:	460f      	mov	r7, r1
 8009b0e:	463d      	mov	r5, r7
 8009b10:	9808      	ldr	r0, [sp, #32]
 8009b12:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b16:	f000 f883 	bl	8009c20 <__locale_ctype_ptr_l>
 8009b1a:	4420      	add	r0, r4
 8009b1c:	7843      	ldrb	r3, [r0, #1]
 8009b1e:	f013 0308 	ands.w	r3, r3, #8
 8009b22:	d130      	bne.n	8009b86 <_strtoul_l.isra.0+0x86>
 8009b24:	2c2d      	cmp	r4, #45	; 0x2d
 8009b26:	d130      	bne.n	8009b8a <_strtoul_l.isra.0+0x8a>
 8009b28:	787c      	ldrb	r4, [r7, #1]
 8009b2a:	1cbd      	adds	r5, r7, #2
 8009b2c:	2101      	movs	r1, #1
 8009b2e:	2e00      	cmp	r6, #0
 8009b30:	d05c      	beq.n	8009bec <_strtoul_l.isra.0+0xec>
 8009b32:	2e10      	cmp	r6, #16
 8009b34:	d109      	bne.n	8009b4a <_strtoul_l.isra.0+0x4a>
 8009b36:	2c30      	cmp	r4, #48	; 0x30
 8009b38:	d107      	bne.n	8009b4a <_strtoul_l.isra.0+0x4a>
 8009b3a:	782b      	ldrb	r3, [r5, #0]
 8009b3c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009b40:	2b58      	cmp	r3, #88	; 0x58
 8009b42:	d14e      	bne.n	8009be2 <_strtoul_l.isra.0+0xe2>
 8009b44:	786c      	ldrb	r4, [r5, #1]
 8009b46:	2610      	movs	r6, #16
 8009b48:	3502      	adds	r5, #2
 8009b4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b4e:	2300      	movs	r3, #0
 8009b50:	fbb2 f2f6 	udiv	r2, r2, r6
 8009b54:	fb06 fc02 	mul.w	ip, r6, r2
 8009b58:	ea6f 0c0c 	mvn.w	ip, ip
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009b62:	2f09      	cmp	r7, #9
 8009b64:	d817      	bhi.n	8009b96 <_strtoul_l.isra.0+0x96>
 8009b66:	463c      	mov	r4, r7
 8009b68:	42a6      	cmp	r6, r4
 8009b6a:	dd23      	ble.n	8009bb4 <_strtoul_l.isra.0+0xb4>
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	db1e      	blt.n	8009bae <_strtoul_l.isra.0+0xae>
 8009b70:	4282      	cmp	r2, r0
 8009b72:	d31c      	bcc.n	8009bae <_strtoul_l.isra.0+0xae>
 8009b74:	d101      	bne.n	8009b7a <_strtoul_l.isra.0+0x7a>
 8009b76:	45a4      	cmp	ip, r4
 8009b78:	db19      	blt.n	8009bae <_strtoul_l.isra.0+0xae>
 8009b7a:	fb00 4006 	mla	r0, r0, r6, r4
 8009b7e:	2301      	movs	r3, #1
 8009b80:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b84:	e7eb      	b.n	8009b5e <_strtoul_l.isra.0+0x5e>
 8009b86:	462f      	mov	r7, r5
 8009b88:	e7c1      	b.n	8009b0e <_strtoul_l.isra.0+0xe>
 8009b8a:	2c2b      	cmp	r4, #43	; 0x2b
 8009b8c:	bf04      	itt	eq
 8009b8e:	1cbd      	addeq	r5, r7, #2
 8009b90:	787c      	ldrbeq	r4, [r7, #1]
 8009b92:	4619      	mov	r1, r3
 8009b94:	e7cb      	b.n	8009b2e <_strtoul_l.isra.0+0x2e>
 8009b96:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009b9a:	2f19      	cmp	r7, #25
 8009b9c:	d801      	bhi.n	8009ba2 <_strtoul_l.isra.0+0xa2>
 8009b9e:	3c37      	subs	r4, #55	; 0x37
 8009ba0:	e7e2      	b.n	8009b68 <_strtoul_l.isra.0+0x68>
 8009ba2:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009ba6:	2f19      	cmp	r7, #25
 8009ba8:	d804      	bhi.n	8009bb4 <_strtoul_l.isra.0+0xb4>
 8009baa:	3c57      	subs	r4, #87	; 0x57
 8009bac:	e7dc      	b.n	8009b68 <_strtoul_l.isra.0+0x68>
 8009bae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009bb2:	e7e5      	b.n	8009b80 <_strtoul_l.isra.0+0x80>
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	da09      	bge.n	8009bcc <_strtoul_l.isra.0+0xcc>
 8009bb8:	2322      	movs	r3, #34	; 0x22
 8009bba:	f8c8 3000 	str.w	r3, [r8]
 8009bbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009bc2:	f1ba 0f00 	cmp.w	sl, #0
 8009bc6:	d107      	bne.n	8009bd8 <_strtoul_l.isra.0+0xd8>
 8009bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bcc:	b101      	cbz	r1, 8009bd0 <_strtoul_l.isra.0+0xd0>
 8009bce:	4240      	negs	r0, r0
 8009bd0:	f1ba 0f00 	cmp.w	sl, #0
 8009bd4:	d0f8      	beq.n	8009bc8 <_strtoul_l.isra.0+0xc8>
 8009bd6:	b10b      	cbz	r3, 8009bdc <_strtoul_l.isra.0+0xdc>
 8009bd8:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8009bdc:	f8ca 9000 	str.w	r9, [sl]
 8009be0:	e7f2      	b.n	8009bc8 <_strtoul_l.isra.0+0xc8>
 8009be2:	2430      	movs	r4, #48	; 0x30
 8009be4:	2e00      	cmp	r6, #0
 8009be6:	d1b0      	bne.n	8009b4a <_strtoul_l.isra.0+0x4a>
 8009be8:	2608      	movs	r6, #8
 8009bea:	e7ae      	b.n	8009b4a <_strtoul_l.isra.0+0x4a>
 8009bec:	2c30      	cmp	r4, #48	; 0x30
 8009bee:	d0a4      	beq.n	8009b3a <_strtoul_l.isra.0+0x3a>
 8009bf0:	260a      	movs	r6, #10
 8009bf2:	e7aa      	b.n	8009b4a <_strtoul_l.isra.0+0x4a>

08009bf4 <strtoul>:
 8009bf4:	4b08      	ldr	r3, [pc, #32]	; (8009c18 <strtoul+0x24>)
 8009bf6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009bf8:	681c      	ldr	r4, [r3, #0]
 8009bfa:	4d08      	ldr	r5, [pc, #32]	; (8009c1c <strtoul+0x28>)
 8009bfc:	6a23      	ldr	r3, [r4, #32]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	bf08      	it	eq
 8009c02:	462b      	moveq	r3, r5
 8009c04:	9300      	str	r3, [sp, #0]
 8009c06:	4613      	mov	r3, r2
 8009c08:	460a      	mov	r2, r1
 8009c0a:	4601      	mov	r1, r0
 8009c0c:	4620      	mov	r0, r4
 8009c0e:	f7ff ff77 	bl	8009b00 <_strtoul_l.isra.0>
 8009c12:	b003      	add	sp, #12
 8009c14:	bd30      	pop	{r4, r5, pc}
 8009c16:	bf00      	nop
 8009c18:	20000030 	.word	0x20000030
 8009c1c:	20000094 	.word	0x20000094

08009c20 <__locale_ctype_ptr_l>:
 8009c20:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009c24:	4770      	bx	lr

08009c26 <__ascii_mbtowc>:
 8009c26:	b082      	sub	sp, #8
 8009c28:	b901      	cbnz	r1, 8009c2c <__ascii_mbtowc+0x6>
 8009c2a:	a901      	add	r1, sp, #4
 8009c2c:	b142      	cbz	r2, 8009c40 <__ascii_mbtowc+0x1a>
 8009c2e:	b14b      	cbz	r3, 8009c44 <__ascii_mbtowc+0x1e>
 8009c30:	7813      	ldrb	r3, [r2, #0]
 8009c32:	600b      	str	r3, [r1, #0]
 8009c34:	7812      	ldrb	r2, [r2, #0]
 8009c36:	1c10      	adds	r0, r2, #0
 8009c38:	bf18      	it	ne
 8009c3a:	2001      	movne	r0, #1
 8009c3c:	b002      	add	sp, #8
 8009c3e:	4770      	bx	lr
 8009c40:	4610      	mov	r0, r2
 8009c42:	e7fb      	b.n	8009c3c <__ascii_mbtowc+0x16>
 8009c44:	f06f 0001 	mvn.w	r0, #1
 8009c48:	e7f8      	b.n	8009c3c <__ascii_mbtowc+0x16>

08009c4a <__ssputs_r>:
 8009c4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c4e:	688e      	ldr	r6, [r1, #8]
 8009c50:	429e      	cmp	r6, r3
 8009c52:	4682      	mov	sl, r0
 8009c54:	460c      	mov	r4, r1
 8009c56:	4690      	mov	r8, r2
 8009c58:	4699      	mov	r9, r3
 8009c5a:	d837      	bhi.n	8009ccc <__ssputs_r+0x82>
 8009c5c:	898a      	ldrh	r2, [r1, #12]
 8009c5e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c62:	d031      	beq.n	8009cc8 <__ssputs_r+0x7e>
 8009c64:	6825      	ldr	r5, [r4, #0]
 8009c66:	6909      	ldr	r1, [r1, #16]
 8009c68:	1a6f      	subs	r7, r5, r1
 8009c6a:	6965      	ldr	r5, [r4, #20]
 8009c6c:	2302      	movs	r3, #2
 8009c6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c72:	fb95 f5f3 	sdiv	r5, r5, r3
 8009c76:	f109 0301 	add.w	r3, r9, #1
 8009c7a:	443b      	add	r3, r7
 8009c7c:	429d      	cmp	r5, r3
 8009c7e:	bf38      	it	cc
 8009c80:	461d      	movcc	r5, r3
 8009c82:	0553      	lsls	r3, r2, #21
 8009c84:	d530      	bpl.n	8009ce8 <__ssputs_r+0x9e>
 8009c86:	4629      	mov	r1, r5
 8009c88:	f000 fb2e 	bl	800a2e8 <_malloc_r>
 8009c8c:	4606      	mov	r6, r0
 8009c8e:	b950      	cbnz	r0, 8009ca6 <__ssputs_r+0x5c>
 8009c90:	230c      	movs	r3, #12
 8009c92:	f8ca 3000 	str.w	r3, [sl]
 8009c96:	89a3      	ldrh	r3, [r4, #12]
 8009c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c9c:	81a3      	strh	r3, [r4, #12]
 8009c9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ca6:	463a      	mov	r2, r7
 8009ca8:	6921      	ldr	r1, [r4, #16]
 8009caa:	f7ff feca 	bl	8009a42 <memcpy>
 8009cae:	89a3      	ldrh	r3, [r4, #12]
 8009cb0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cb8:	81a3      	strh	r3, [r4, #12]
 8009cba:	6126      	str	r6, [r4, #16]
 8009cbc:	6165      	str	r5, [r4, #20]
 8009cbe:	443e      	add	r6, r7
 8009cc0:	1bed      	subs	r5, r5, r7
 8009cc2:	6026      	str	r6, [r4, #0]
 8009cc4:	60a5      	str	r5, [r4, #8]
 8009cc6:	464e      	mov	r6, r9
 8009cc8:	454e      	cmp	r6, r9
 8009cca:	d900      	bls.n	8009cce <__ssputs_r+0x84>
 8009ccc:	464e      	mov	r6, r9
 8009cce:	4632      	mov	r2, r6
 8009cd0:	4641      	mov	r1, r8
 8009cd2:	6820      	ldr	r0, [r4, #0]
 8009cd4:	f000 faa1 	bl	800a21a <memmove>
 8009cd8:	68a3      	ldr	r3, [r4, #8]
 8009cda:	1b9b      	subs	r3, r3, r6
 8009cdc:	60a3      	str	r3, [r4, #8]
 8009cde:	6823      	ldr	r3, [r4, #0]
 8009ce0:	441e      	add	r6, r3
 8009ce2:	6026      	str	r6, [r4, #0]
 8009ce4:	2000      	movs	r0, #0
 8009ce6:	e7dc      	b.n	8009ca2 <__ssputs_r+0x58>
 8009ce8:	462a      	mov	r2, r5
 8009cea:	f000 fb57 	bl	800a39c <_realloc_r>
 8009cee:	4606      	mov	r6, r0
 8009cf0:	2800      	cmp	r0, #0
 8009cf2:	d1e2      	bne.n	8009cba <__ssputs_r+0x70>
 8009cf4:	6921      	ldr	r1, [r4, #16]
 8009cf6:	4650      	mov	r0, sl
 8009cf8:	f000 faa8 	bl	800a24c <_free_r>
 8009cfc:	e7c8      	b.n	8009c90 <__ssputs_r+0x46>
	...

08009d00 <_svfiprintf_r>:
 8009d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d04:	461d      	mov	r5, r3
 8009d06:	898b      	ldrh	r3, [r1, #12]
 8009d08:	061f      	lsls	r7, r3, #24
 8009d0a:	b09d      	sub	sp, #116	; 0x74
 8009d0c:	4680      	mov	r8, r0
 8009d0e:	460c      	mov	r4, r1
 8009d10:	4616      	mov	r6, r2
 8009d12:	d50f      	bpl.n	8009d34 <_svfiprintf_r+0x34>
 8009d14:	690b      	ldr	r3, [r1, #16]
 8009d16:	b96b      	cbnz	r3, 8009d34 <_svfiprintf_r+0x34>
 8009d18:	2140      	movs	r1, #64	; 0x40
 8009d1a:	f000 fae5 	bl	800a2e8 <_malloc_r>
 8009d1e:	6020      	str	r0, [r4, #0]
 8009d20:	6120      	str	r0, [r4, #16]
 8009d22:	b928      	cbnz	r0, 8009d30 <_svfiprintf_r+0x30>
 8009d24:	230c      	movs	r3, #12
 8009d26:	f8c8 3000 	str.w	r3, [r8]
 8009d2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d2e:	e0c8      	b.n	8009ec2 <_svfiprintf_r+0x1c2>
 8009d30:	2340      	movs	r3, #64	; 0x40
 8009d32:	6163      	str	r3, [r4, #20]
 8009d34:	2300      	movs	r3, #0
 8009d36:	9309      	str	r3, [sp, #36]	; 0x24
 8009d38:	2320      	movs	r3, #32
 8009d3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d3e:	2330      	movs	r3, #48	; 0x30
 8009d40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d44:	9503      	str	r5, [sp, #12]
 8009d46:	f04f 0b01 	mov.w	fp, #1
 8009d4a:	4637      	mov	r7, r6
 8009d4c:	463d      	mov	r5, r7
 8009d4e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009d52:	b10b      	cbz	r3, 8009d58 <_svfiprintf_r+0x58>
 8009d54:	2b25      	cmp	r3, #37	; 0x25
 8009d56:	d13e      	bne.n	8009dd6 <_svfiprintf_r+0xd6>
 8009d58:	ebb7 0a06 	subs.w	sl, r7, r6
 8009d5c:	d00b      	beq.n	8009d76 <_svfiprintf_r+0x76>
 8009d5e:	4653      	mov	r3, sl
 8009d60:	4632      	mov	r2, r6
 8009d62:	4621      	mov	r1, r4
 8009d64:	4640      	mov	r0, r8
 8009d66:	f7ff ff70 	bl	8009c4a <__ssputs_r>
 8009d6a:	3001      	adds	r0, #1
 8009d6c:	f000 80a4 	beq.w	8009eb8 <_svfiprintf_r+0x1b8>
 8009d70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d72:	4453      	add	r3, sl
 8009d74:	9309      	str	r3, [sp, #36]	; 0x24
 8009d76:	783b      	ldrb	r3, [r7, #0]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	f000 809d 	beq.w	8009eb8 <_svfiprintf_r+0x1b8>
 8009d7e:	2300      	movs	r3, #0
 8009d80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d88:	9304      	str	r3, [sp, #16]
 8009d8a:	9307      	str	r3, [sp, #28]
 8009d8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d90:	931a      	str	r3, [sp, #104]	; 0x68
 8009d92:	462f      	mov	r7, r5
 8009d94:	2205      	movs	r2, #5
 8009d96:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009d9a:	4850      	ldr	r0, [pc, #320]	; (8009edc <_svfiprintf_r+0x1dc>)
 8009d9c:	f7f6 fa58 	bl	8000250 <memchr>
 8009da0:	9b04      	ldr	r3, [sp, #16]
 8009da2:	b9d0      	cbnz	r0, 8009dda <_svfiprintf_r+0xda>
 8009da4:	06d9      	lsls	r1, r3, #27
 8009da6:	bf44      	itt	mi
 8009da8:	2220      	movmi	r2, #32
 8009daa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009dae:	071a      	lsls	r2, r3, #28
 8009db0:	bf44      	itt	mi
 8009db2:	222b      	movmi	r2, #43	; 0x2b
 8009db4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009db8:	782a      	ldrb	r2, [r5, #0]
 8009dba:	2a2a      	cmp	r2, #42	; 0x2a
 8009dbc:	d015      	beq.n	8009dea <_svfiprintf_r+0xea>
 8009dbe:	9a07      	ldr	r2, [sp, #28]
 8009dc0:	462f      	mov	r7, r5
 8009dc2:	2000      	movs	r0, #0
 8009dc4:	250a      	movs	r5, #10
 8009dc6:	4639      	mov	r1, r7
 8009dc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dcc:	3b30      	subs	r3, #48	; 0x30
 8009dce:	2b09      	cmp	r3, #9
 8009dd0:	d94d      	bls.n	8009e6e <_svfiprintf_r+0x16e>
 8009dd2:	b1b8      	cbz	r0, 8009e04 <_svfiprintf_r+0x104>
 8009dd4:	e00f      	b.n	8009df6 <_svfiprintf_r+0xf6>
 8009dd6:	462f      	mov	r7, r5
 8009dd8:	e7b8      	b.n	8009d4c <_svfiprintf_r+0x4c>
 8009dda:	4a40      	ldr	r2, [pc, #256]	; (8009edc <_svfiprintf_r+0x1dc>)
 8009ddc:	1a80      	subs	r0, r0, r2
 8009dde:	fa0b f000 	lsl.w	r0, fp, r0
 8009de2:	4318      	orrs	r0, r3
 8009de4:	9004      	str	r0, [sp, #16]
 8009de6:	463d      	mov	r5, r7
 8009de8:	e7d3      	b.n	8009d92 <_svfiprintf_r+0x92>
 8009dea:	9a03      	ldr	r2, [sp, #12]
 8009dec:	1d11      	adds	r1, r2, #4
 8009dee:	6812      	ldr	r2, [r2, #0]
 8009df0:	9103      	str	r1, [sp, #12]
 8009df2:	2a00      	cmp	r2, #0
 8009df4:	db01      	blt.n	8009dfa <_svfiprintf_r+0xfa>
 8009df6:	9207      	str	r2, [sp, #28]
 8009df8:	e004      	b.n	8009e04 <_svfiprintf_r+0x104>
 8009dfa:	4252      	negs	r2, r2
 8009dfc:	f043 0302 	orr.w	r3, r3, #2
 8009e00:	9207      	str	r2, [sp, #28]
 8009e02:	9304      	str	r3, [sp, #16]
 8009e04:	783b      	ldrb	r3, [r7, #0]
 8009e06:	2b2e      	cmp	r3, #46	; 0x2e
 8009e08:	d10c      	bne.n	8009e24 <_svfiprintf_r+0x124>
 8009e0a:	787b      	ldrb	r3, [r7, #1]
 8009e0c:	2b2a      	cmp	r3, #42	; 0x2a
 8009e0e:	d133      	bne.n	8009e78 <_svfiprintf_r+0x178>
 8009e10:	9b03      	ldr	r3, [sp, #12]
 8009e12:	1d1a      	adds	r2, r3, #4
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	9203      	str	r2, [sp, #12]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	bfb8      	it	lt
 8009e1c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009e20:	3702      	adds	r7, #2
 8009e22:	9305      	str	r3, [sp, #20]
 8009e24:	4d2e      	ldr	r5, [pc, #184]	; (8009ee0 <_svfiprintf_r+0x1e0>)
 8009e26:	7839      	ldrb	r1, [r7, #0]
 8009e28:	2203      	movs	r2, #3
 8009e2a:	4628      	mov	r0, r5
 8009e2c:	f7f6 fa10 	bl	8000250 <memchr>
 8009e30:	b138      	cbz	r0, 8009e42 <_svfiprintf_r+0x142>
 8009e32:	2340      	movs	r3, #64	; 0x40
 8009e34:	1b40      	subs	r0, r0, r5
 8009e36:	fa03 f000 	lsl.w	r0, r3, r0
 8009e3a:	9b04      	ldr	r3, [sp, #16]
 8009e3c:	4303      	orrs	r3, r0
 8009e3e:	3701      	adds	r7, #1
 8009e40:	9304      	str	r3, [sp, #16]
 8009e42:	7839      	ldrb	r1, [r7, #0]
 8009e44:	4827      	ldr	r0, [pc, #156]	; (8009ee4 <_svfiprintf_r+0x1e4>)
 8009e46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e4a:	2206      	movs	r2, #6
 8009e4c:	1c7e      	adds	r6, r7, #1
 8009e4e:	f7f6 f9ff 	bl	8000250 <memchr>
 8009e52:	2800      	cmp	r0, #0
 8009e54:	d038      	beq.n	8009ec8 <_svfiprintf_r+0x1c8>
 8009e56:	4b24      	ldr	r3, [pc, #144]	; (8009ee8 <_svfiprintf_r+0x1e8>)
 8009e58:	bb13      	cbnz	r3, 8009ea0 <_svfiprintf_r+0x1a0>
 8009e5a:	9b03      	ldr	r3, [sp, #12]
 8009e5c:	3307      	adds	r3, #7
 8009e5e:	f023 0307 	bic.w	r3, r3, #7
 8009e62:	3308      	adds	r3, #8
 8009e64:	9303      	str	r3, [sp, #12]
 8009e66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e68:	444b      	add	r3, r9
 8009e6a:	9309      	str	r3, [sp, #36]	; 0x24
 8009e6c:	e76d      	b.n	8009d4a <_svfiprintf_r+0x4a>
 8009e6e:	fb05 3202 	mla	r2, r5, r2, r3
 8009e72:	2001      	movs	r0, #1
 8009e74:	460f      	mov	r7, r1
 8009e76:	e7a6      	b.n	8009dc6 <_svfiprintf_r+0xc6>
 8009e78:	2300      	movs	r3, #0
 8009e7a:	3701      	adds	r7, #1
 8009e7c:	9305      	str	r3, [sp, #20]
 8009e7e:	4619      	mov	r1, r3
 8009e80:	250a      	movs	r5, #10
 8009e82:	4638      	mov	r0, r7
 8009e84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e88:	3a30      	subs	r2, #48	; 0x30
 8009e8a:	2a09      	cmp	r2, #9
 8009e8c:	d903      	bls.n	8009e96 <_svfiprintf_r+0x196>
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d0c8      	beq.n	8009e24 <_svfiprintf_r+0x124>
 8009e92:	9105      	str	r1, [sp, #20]
 8009e94:	e7c6      	b.n	8009e24 <_svfiprintf_r+0x124>
 8009e96:	fb05 2101 	mla	r1, r5, r1, r2
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	4607      	mov	r7, r0
 8009e9e:	e7f0      	b.n	8009e82 <_svfiprintf_r+0x182>
 8009ea0:	ab03      	add	r3, sp, #12
 8009ea2:	9300      	str	r3, [sp, #0]
 8009ea4:	4622      	mov	r2, r4
 8009ea6:	4b11      	ldr	r3, [pc, #68]	; (8009eec <_svfiprintf_r+0x1ec>)
 8009ea8:	a904      	add	r1, sp, #16
 8009eaa:	4640      	mov	r0, r8
 8009eac:	f3af 8000 	nop.w
 8009eb0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009eb4:	4681      	mov	r9, r0
 8009eb6:	d1d6      	bne.n	8009e66 <_svfiprintf_r+0x166>
 8009eb8:	89a3      	ldrh	r3, [r4, #12]
 8009eba:	065b      	lsls	r3, r3, #25
 8009ebc:	f53f af35 	bmi.w	8009d2a <_svfiprintf_r+0x2a>
 8009ec0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ec2:	b01d      	add	sp, #116	; 0x74
 8009ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ec8:	ab03      	add	r3, sp, #12
 8009eca:	9300      	str	r3, [sp, #0]
 8009ecc:	4622      	mov	r2, r4
 8009ece:	4b07      	ldr	r3, [pc, #28]	; (8009eec <_svfiprintf_r+0x1ec>)
 8009ed0:	a904      	add	r1, sp, #16
 8009ed2:	4640      	mov	r0, r8
 8009ed4:	f000 f882 	bl	8009fdc <_printf_i>
 8009ed8:	e7ea      	b.n	8009eb0 <_svfiprintf_r+0x1b0>
 8009eda:	bf00      	nop
 8009edc:	0800ab1a 	.word	0x0800ab1a
 8009ee0:	0800ab20 	.word	0x0800ab20
 8009ee4:	0800ab24 	.word	0x0800ab24
 8009ee8:	00000000 	.word	0x00000000
 8009eec:	08009c4b 	.word	0x08009c4b

08009ef0 <_printf_common>:
 8009ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ef4:	4691      	mov	r9, r2
 8009ef6:	461f      	mov	r7, r3
 8009ef8:	688a      	ldr	r2, [r1, #8]
 8009efa:	690b      	ldr	r3, [r1, #16]
 8009efc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f00:	4293      	cmp	r3, r2
 8009f02:	bfb8      	it	lt
 8009f04:	4613      	movlt	r3, r2
 8009f06:	f8c9 3000 	str.w	r3, [r9]
 8009f0a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f0e:	4606      	mov	r6, r0
 8009f10:	460c      	mov	r4, r1
 8009f12:	b112      	cbz	r2, 8009f1a <_printf_common+0x2a>
 8009f14:	3301      	adds	r3, #1
 8009f16:	f8c9 3000 	str.w	r3, [r9]
 8009f1a:	6823      	ldr	r3, [r4, #0]
 8009f1c:	0699      	lsls	r1, r3, #26
 8009f1e:	bf42      	ittt	mi
 8009f20:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009f24:	3302      	addmi	r3, #2
 8009f26:	f8c9 3000 	strmi.w	r3, [r9]
 8009f2a:	6825      	ldr	r5, [r4, #0]
 8009f2c:	f015 0506 	ands.w	r5, r5, #6
 8009f30:	d107      	bne.n	8009f42 <_printf_common+0x52>
 8009f32:	f104 0a19 	add.w	sl, r4, #25
 8009f36:	68e3      	ldr	r3, [r4, #12]
 8009f38:	f8d9 2000 	ldr.w	r2, [r9]
 8009f3c:	1a9b      	subs	r3, r3, r2
 8009f3e:	42ab      	cmp	r3, r5
 8009f40:	dc28      	bgt.n	8009f94 <_printf_common+0xa4>
 8009f42:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009f46:	6822      	ldr	r2, [r4, #0]
 8009f48:	3300      	adds	r3, #0
 8009f4a:	bf18      	it	ne
 8009f4c:	2301      	movne	r3, #1
 8009f4e:	0692      	lsls	r2, r2, #26
 8009f50:	d42d      	bmi.n	8009fae <_printf_common+0xbe>
 8009f52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f56:	4639      	mov	r1, r7
 8009f58:	4630      	mov	r0, r6
 8009f5a:	47c0      	blx	r8
 8009f5c:	3001      	adds	r0, #1
 8009f5e:	d020      	beq.n	8009fa2 <_printf_common+0xb2>
 8009f60:	6823      	ldr	r3, [r4, #0]
 8009f62:	68e5      	ldr	r5, [r4, #12]
 8009f64:	f8d9 2000 	ldr.w	r2, [r9]
 8009f68:	f003 0306 	and.w	r3, r3, #6
 8009f6c:	2b04      	cmp	r3, #4
 8009f6e:	bf08      	it	eq
 8009f70:	1aad      	subeq	r5, r5, r2
 8009f72:	68a3      	ldr	r3, [r4, #8]
 8009f74:	6922      	ldr	r2, [r4, #16]
 8009f76:	bf0c      	ite	eq
 8009f78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f7c:	2500      	movne	r5, #0
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	bfc4      	itt	gt
 8009f82:	1a9b      	subgt	r3, r3, r2
 8009f84:	18ed      	addgt	r5, r5, r3
 8009f86:	f04f 0900 	mov.w	r9, #0
 8009f8a:	341a      	adds	r4, #26
 8009f8c:	454d      	cmp	r5, r9
 8009f8e:	d11a      	bne.n	8009fc6 <_printf_common+0xd6>
 8009f90:	2000      	movs	r0, #0
 8009f92:	e008      	b.n	8009fa6 <_printf_common+0xb6>
 8009f94:	2301      	movs	r3, #1
 8009f96:	4652      	mov	r2, sl
 8009f98:	4639      	mov	r1, r7
 8009f9a:	4630      	mov	r0, r6
 8009f9c:	47c0      	blx	r8
 8009f9e:	3001      	adds	r0, #1
 8009fa0:	d103      	bne.n	8009faa <_printf_common+0xba>
 8009fa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009faa:	3501      	adds	r5, #1
 8009fac:	e7c3      	b.n	8009f36 <_printf_common+0x46>
 8009fae:	18e1      	adds	r1, r4, r3
 8009fb0:	1c5a      	adds	r2, r3, #1
 8009fb2:	2030      	movs	r0, #48	; 0x30
 8009fb4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009fb8:	4422      	add	r2, r4
 8009fba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009fbe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009fc2:	3302      	adds	r3, #2
 8009fc4:	e7c5      	b.n	8009f52 <_printf_common+0x62>
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	4622      	mov	r2, r4
 8009fca:	4639      	mov	r1, r7
 8009fcc:	4630      	mov	r0, r6
 8009fce:	47c0      	blx	r8
 8009fd0:	3001      	adds	r0, #1
 8009fd2:	d0e6      	beq.n	8009fa2 <_printf_common+0xb2>
 8009fd4:	f109 0901 	add.w	r9, r9, #1
 8009fd8:	e7d8      	b.n	8009f8c <_printf_common+0x9c>
	...

08009fdc <_printf_i>:
 8009fdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009fe0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009fe4:	460c      	mov	r4, r1
 8009fe6:	7e09      	ldrb	r1, [r1, #24]
 8009fe8:	b085      	sub	sp, #20
 8009fea:	296e      	cmp	r1, #110	; 0x6e
 8009fec:	4617      	mov	r7, r2
 8009fee:	4606      	mov	r6, r0
 8009ff0:	4698      	mov	r8, r3
 8009ff2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ff4:	f000 80b3 	beq.w	800a15e <_printf_i+0x182>
 8009ff8:	d822      	bhi.n	800a040 <_printf_i+0x64>
 8009ffa:	2963      	cmp	r1, #99	; 0x63
 8009ffc:	d036      	beq.n	800a06c <_printf_i+0x90>
 8009ffe:	d80a      	bhi.n	800a016 <_printf_i+0x3a>
 800a000:	2900      	cmp	r1, #0
 800a002:	f000 80b9 	beq.w	800a178 <_printf_i+0x19c>
 800a006:	2958      	cmp	r1, #88	; 0x58
 800a008:	f000 8083 	beq.w	800a112 <_printf_i+0x136>
 800a00c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a010:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a014:	e032      	b.n	800a07c <_printf_i+0xa0>
 800a016:	2964      	cmp	r1, #100	; 0x64
 800a018:	d001      	beq.n	800a01e <_printf_i+0x42>
 800a01a:	2969      	cmp	r1, #105	; 0x69
 800a01c:	d1f6      	bne.n	800a00c <_printf_i+0x30>
 800a01e:	6820      	ldr	r0, [r4, #0]
 800a020:	6813      	ldr	r3, [r2, #0]
 800a022:	0605      	lsls	r5, r0, #24
 800a024:	f103 0104 	add.w	r1, r3, #4
 800a028:	d52a      	bpl.n	800a080 <_printf_i+0xa4>
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	6011      	str	r1, [r2, #0]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	da03      	bge.n	800a03a <_printf_i+0x5e>
 800a032:	222d      	movs	r2, #45	; 0x2d
 800a034:	425b      	negs	r3, r3
 800a036:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a03a:	486f      	ldr	r0, [pc, #444]	; (800a1f8 <_printf_i+0x21c>)
 800a03c:	220a      	movs	r2, #10
 800a03e:	e039      	b.n	800a0b4 <_printf_i+0xd8>
 800a040:	2973      	cmp	r1, #115	; 0x73
 800a042:	f000 809d 	beq.w	800a180 <_printf_i+0x1a4>
 800a046:	d808      	bhi.n	800a05a <_printf_i+0x7e>
 800a048:	296f      	cmp	r1, #111	; 0x6f
 800a04a:	d020      	beq.n	800a08e <_printf_i+0xb2>
 800a04c:	2970      	cmp	r1, #112	; 0x70
 800a04e:	d1dd      	bne.n	800a00c <_printf_i+0x30>
 800a050:	6823      	ldr	r3, [r4, #0]
 800a052:	f043 0320 	orr.w	r3, r3, #32
 800a056:	6023      	str	r3, [r4, #0]
 800a058:	e003      	b.n	800a062 <_printf_i+0x86>
 800a05a:	2975      	cmp	r1, #117	; 0x75
 800a05c:	d017      	beq.n	800a08e <_printf_i+0xb2>
 800a05e:	2978      	cmp	r1, #120	; 0x78
 800a060:	d1d4      	bne.n	800a00c <_printf_i+0x30>
 800a062:	2378      	movs	r3, #120	; 0x78
 800a064:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a068:	4864      	ldr	r0, [pc, #400]	; (800a1fc <_printf_i+0x220>)
 800a06a:	e055      	b.n	800a118 <_printf_i+0x13c>
 800a06c:	6813      	ldr	r3, [r2, #0]
 800a06e:	1d19      	adds	r1, r3, #4
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	6011      	str	r1, [r2, #0]
 800a074:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a078:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a07c:	2301      	movs	r3, #1
 800a07e:	e08c      	b.n	800a19a <_printf_i+0x1be>
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	6011      	str	r1, [r2, #0]
 800a084:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a088:	bf18      	it	ne
 800a08a:	b21b      	sxthne	r3, r3
 800a08c:	e7cf      	b.n	800a02e <_printf_i+0x52>
 800a08e:	6813      	ldr	r3, [r2, #0]
 800a090:	6825      	ldr	r5, [r4, #0]
 800a092:	1d18      	adds	r0, r3, #4
 800a094:	6010      	str	r0, [r2, #0]
 800a096:	0628      	lsls	r0, r5, #24
 800a098:	d501      	bpl.n	800a09e <_printf_i+0xc2>
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	e002      	b.n	800a0a4 <_printf_i+0xc8>
 800a09e:	0668      	lsls	r0, r5, #25
 800a0a0:	d5fb      	bpl.n	800a09a <_printf_i+0xbe>
 800a0a2:	881b      	ldrh	r3, [r3, #0]
 800a0a4:	4854      	ldr	r0, [pc, #336]	; (800a1f8 <_printf_i+0x21c>)
 800a0a6:	296f      	cmp	r1, #111	; 0x6f
 800a0a8:	bf14      	ite	ne
 800a0aa:	220a      	movne	r2, #10
 800a0ac:	2208      	moveq	r2, #8
 800a0ae:	2100      	movs	r1, #0
 800a0b0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a0b4:	6865      	ldr	r5, [r4, #4]
 800a0b6:	60a5      	str	r5, [r4, #8]
 800a0b8:	2d00      	cmp	r5, #0
 800a0ba:	f2c0 8095 	blt.w	800a1e8 <_printf_i+0x20c>
 800a0be:	6821      	ldr	r1, [r4, #0]
 800a0c0:	f021 0104 	bic.w	r1, r1, #4
 800a0c4:	6021      	str	r1, [r4, #0]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d13d      	bne.n	800a146 <_printf_i+0x16a>
 800a0ca:	2d00      	cmp	r5, #0
 800a0cc:	f040 808e 	bne.w	800a1ec <_printf_i+0x210>
 800a0d0:	4665      	mov	r5, ip
 800a0d2:	2a08      	cmp	r2, #8
 800a0d4:	d10b      	bne.n	800a0ee <_printf_i+0x112>
 800a0d6:	6823      	ldr	r3, [r4, #0]
 800a0d8:	07db      	lsls	r3, r3, #31
 800a0da:	d508      	bpl.n	800a0ee <_printf_i+0x112>
 800a0dc:	6923      	ldr	r3, [r4, #16]
 800a0de:	6862      	ldr	r2, [r4, #4]
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	bfde      	ittt	le
 800a0e4:	2330      	movle	r3, #48	; 0x30
 800a0e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a0ea:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a0ee:	ebac 0305 	sub.w	r3, ip, r5
 800a0f2:	6123      	str	r3, [r4, #16]
 800a0f4:	f8cd 8000 	str.w	r8, [sp]
 800a0f8:	463b      	mov	r3, r7
 800a0fa:	aa03      	add	r2, sp, #12
 800a0fc:	4621      	mov	r1, r4
 800a0fe:	4630      	mov	r0, r6
 800a100:	f7ff fef6 	bl	8009ef0 <_printf_common>
 800a104:	3001      	adds	r0, #1
 800a106:	d14d      	bne.n	800a1a4 <_printf_i+0x1c8>
 800a108:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a10c:	b005      	add	sp, #20
 800a10e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a112:	4839      	ldr	r0, [pc, #228]	; (800a1f8 <_printf_i+0x21c>)
 800a114:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a118:	6813      	ldr	r3, [r2, #0]
 800a11a:	6821      	ldr	r1, [r4, #0]
 800a11c:	1d1d      	adds	r5, r3, #4
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	6015      	str	r5, [r2, #0]
 800a122:	060a      	lsls	r2, r1, #24
 800a124:	d50b      	bpl.n	800a13e <_printf_i+0x162>
 800a126:	07ca      	lsls	r2, r1, #31
 800a128:	bf44      	itt	mi
 800a12a:	f041 0120 	orrmi.w	r1, r1, #32
 800a12e:	6021      	strmi	r1, [r4, #0]
 800a130:	b91b      	cbnz	r3, 800a13a <_printf_i+0x15e>
 800a132:	6822      	ldr	r2, [r4, #0]
 800a134:	f022 0220 	bic.w	r2, r2, #32
 800a138:	6022      	str	r2, [r4, #0]
 800a13a:	2210      	movs	r2, #16
 800a13c:	e7b7      	b.n	800a0ae <_printf_i+0xd2>
 800a13e:	064d      	lsls	r5, r1, #25
 800a140:	bf48      	it	mi
 800a142:	b29b      	uxthmi	r3, r3
 800a144:	e7ef      	b.n	800a126 <_printf_i+0x14a>
 800a146:	4665      	mov	r5, ip
 800a148:	fbb3 f1f2 	udiv	r1, r3, r2
 800a14c:	fb02 3311 	mls	r3, r2, r1, r3
 800a150:	5cc3      	ldrb	r3, [r0, r3]
 800a152:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a156:	460b      	mov	r3, r1
 800a158:	2900      	cmp	r1, #0
 800a15a:	d1f5      	bne.n	800a148 <_printf_i+0x16c>
 800a15c:	e7b9      	b.n	800a0d2 <_printf_i+0xf6>
 800a15e:	6813      	ldr	r3, [r2, #0]
 800a160:	6825      	ldr	r5, [r4, #0]
 800a162:	6961      	ldr	r1, [r4, #20]
 800a164:	1d18      	adds	r0, r3, #4
 800a166:	6010      	str	r0, [r2, #0]
 800a168:	0628      	lsls	r0, r5, #24
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	d501      	bpl.n	800a172 <_printf_i+0x196>
 800a16e:	6019      	str	r1, [r3, #0]
 800a170:	e002      	b.n	800a178 <_printf_i+0x19c>
 800a172:	066a      	lsls	r2, r5, #25
 800a174:	d5fb      	bpl.n	800a16e <_printf_i+0x192>
 800a176:	8019      	strh	r1, [r3, #0]
 800a178:	2300      	movs	r3, #0
 800a17a:	6123      	str	r3, [r4, #16]
 800a17c:	4665      	mov	r5, ip
 800a17e:	e7b9      	b.n	800a0f4 <_printf_i+0x118>
 800a180:	6813      	ldr	r3, [r2, #0]
 800a182:	1d19      	adds	r1, r3, #4
 800a184:	6011      	str	r1, [r2, #0]
 800a186:	681d      	ldr	r5, [r3, #0]
 800a188:	6862      	ldr	r2, [r4, #4]
 800a18a:	2100      	movs	r1, #0
 800a18c:	4628      	mov	r0, r5
 800a18e:	f7f6 f85f 	bl	8000250 <memchr>
 800a192:	b108      	cbz	r0, 800a198 <_printf_i+0x1bc>
 800a194:	1b40      	subs	r0, r0, r5
 800a196:	6060      	str	r0, [r4, #4]
 800a198:	6863      	ldr	r3, [r4, #4]
 800a19a:	6123      	str	r3, [r4, #16]
 800a19c:	2300      	movs	r3, #0
 800a19e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1a2:	e7a7      	b.n	800a0f4 <_printf_i+0x118>
 800a1a4:	6923      	ldr	r3, [r4, #16]
 800a1a6:	462a      	mov	r2, r5
 800a1a8:	4639      	mov	r1, r7
 800a1aa:	4630      	mov	r0, r6
 800a1ac:	47c0      	blx	r8
 800a1ae:	3001      	adds	r0, #1
 800a1b0:	d0aa      	beq.n	800a108 <_printf_i+0x12c>
 800a1b2:	6823      	ldr	r3, [r4, #0]
 800a1b4:	079b      	lsls	r3, r3, #30
 800a1b6:	d413      	bmi.n	800a1e0 <_printf_i+0x204>
 800a1b8:	68e0      	ldr	r0, [r4, #12]
 800a1ba:	9b03      	ldr	r3, [sp, #12]
 800a1bc:	4298      	cmp	r0, r3
 800a1be:	bfb8      	it	lt
 800a1c0:	4618      	movlt	r0, r3
 800a1c2:	e7a3      	b.n	800a10c <_printf_i+0x130>
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	464a      	mov	r2, r9
 800a1c8:	4639      	mov	r1, r7
 800a1ca:	4630      	mov	r0, r6
 800a1cc:	47c0      	blx	r8
 800a1ce:	3001      	adds	r0, #1
 800a1d0:	d09a      	beq.n	800a108 <_printf_i+0x12c>
 800a1d2:	3501      	adds	r5, #1
 800a1d4:	68e3      	ldr	r3, [r4, #12]
 800a1d6:	9a03      	ldr	r2, [sp, #12]
 800a1d8:	1a9b      	subs	r3, r3, r2
 800a1da:	42ab      	cmp	r3, r5
 800a1dc:	dcf2      	bgt.n	800a1c4 <_printf_i+0x1e8>
 800a1de:	e7eb      	b.n	800a1b8 <_printf_i+0x1dc>
 800a1e0:	2500      	movs	r5, #0
 800a1e2:	f104 0919 	add.w	r9, r4, #25
 800a1e6:	e7f5      	b.n	800a1d4 <_printf_i+0x1f8>
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d1ac      	bne.n	800a146 <_printf_i+0x16a>
 800a1ec:	7803      	ldrb	r3, [r0, #0]
 800a1ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a1f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1f6:	e76c      	b.n	800a0d2 <_printf_i+0xf6>
 800a1f8:	0800ab2b 	.word	0x0800ab2b
 800a1fc:	0800ab3c 	.word	0x0800ab3c

0800a200 <__ascii_wctomb>:
 800a200:	b149      	cbz	r1, 800a216 <__ascii_wctomb+0x16>
 800a202:	2aff      	cmp	r2, #255	; 0xff
 800a204:	bf85      	ittet	hi
 800a206:	238a      	movhi	r3, #138	; 0x8a
 800a208:	6003      	strhi	r3, [r0, #0]
 800a20a:	700a      	strbls	r2, [r1, #0]
 800a20c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a210:	bf98      	it	ls
 800a212:	2001      	movls	r0, #1
 800a214:	4770      	bx	lr
 800a216:	4608      	mov	r0, r1
 800a218:	4770      	bx	lr

0800a21a <memmove>:
 800a21a:	4288      	cmp	r0, r1
 800a21c:	b510      	push	{r4, lr}
 800a21e:	eb01 0302 	add.w	r3, r1, r2
 800a222:	d807      	bhi.n	800a234 <memmove+0x1a>
 800a224:	1e42      	subs	r2, r0, #1
 800a226:	4299      	cmp	r1, r3
 800a228:	d00a      	beq.n	800a240 <memmove+0x26>
 800a22a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a22e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a232:	e7f8      	b.n	800a226 <memmove+0xc>
 800a234:	4283      	cmp	r3, r0
 800a236:	d9f5      	bls.n	800a224 <memmove+0xa>
 800a238:	1881      	adds	r1, r0, r2
 800a23a:	1ad2      	subs	r2, r2, r3
 800a23c:	42d3      	cmn	r3, r2
 800a23e:	d100      	bne.n	800a242 <memmove+0x28>
 800a240:	bd10      	pop	{r4, pc}
 800a242:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a246:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a24a:	e7f7      	b.n	800a23c <memmove+0x22>

0800a24c <_free_r>:
 800a24c:	b538      	push	{r3, r4, r5, lr}
 800a24e:	4605      	mov	r5, r0
 800a250:	2900      	cmp	r1, #0
 800a252:	d045      	beq.n	800a2e0 <_free_r+0x94>
 800a254:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a258:	1f0c      	subs	r4, r1, #4
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	bfb8      	it	lt
 800a25e:	18e4      	addlt	r4, r4, r3
 800a260:	f000 f8d2 	bl	800a408 <__malloc_lock>
 800a264:	4a1f      	ldr	r2, [pc, #124]	; (800a2e4 <_free_r+0x98>)
 800a266:	6813      	ldr	r3, [r2, #0]
 800a268:	4610      	mov	r0, r2
 800a26a:	b933      	cbnz	r3, 800a27a <_free_r+0x2e>
 800a26c:	6063      	str	r3, [r4, #4]
 800a26e:	6014      	str	r4, [r2, #0]
 800a270:	4628      	mov	r0, r5
 800a272:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a276:	f000 b8c8 	b.w	800a40a <__malloc_unlock>
 800a27a:	42a3      	cmp	r3, r4
 800a27c:	d90c      	bls.n	800a298 <_free_r+0x4c>
 800a27e:	6821      	ldr	r1, [r4, #0]
 800a280:	1862      	adds	r2, r4, r1
 800a282:	4293      	cmp	r3, r2
 800a284:	bf04      	itt	eq
 800a286:	681a      	ldreq	r2, [r3, #0]
 800a288:	685b      	ldreq	r3, [r3, #4]
 800a28a:	6063      	str	r3, [r4, #4]
 800a28c:	bf04      	itt	eq
 800a28e:	1852      	addeq	r2, r2, r1
 800a290:	6022      	streq	r2, [r4, #0]
 800a292:	6004      	str	r4, [r0, #0]
 800a294:	e7ec      	b.n	800a270 <_free_r+0x24>
 800a296:	4613      	mov	r3, r2
 800a298:	685a      	ldr	r2, [r3, #4]
 800a29a:	b10a      	cbz	r2, 800a2a0 <_free_r+0x54>
 800a29c:	42a2      	cmp	r2, r4
 800a29e:	d9fa      	bls.n	800a296 <_free_r+0x4a>
 800a2a0:	6819      	ldr	r1, [r3, #0]
 800a2a2:	1858      	adds	r0, r3, r1
 800a2a4:	42a0      	cmp	r0, r4
 800a2a6:	d10b      	bne.n	800a2c0 <_free_r+0x74>
 800a2a8:	6820      	ldr	r0, [r4, #0]
 800a2aa:	4401      	add	r1, r0
 800a2ac:	1858      	adds	r0, r3, r1
 800a2ae:	4282      	cmp	r2, r0
 800a2b0:	6019      	str	r1, [r3, #0]
 800a2b2:	d1dd      	bne.n	800a270 <_free_r+0x24>
 800a2b4:	6810      	ldr	r0, [r2, #0]
 800a2b6:	6852      	ldr	r2, [r2, #4]
 800a2b8:	605a      	str	r2, [r3, #4]
 800a2ba:	4401      	add	r1, r0
 800a2bc:	6019      	str	r1, [r3, #0]
 800a2be:	e7d7      	b.n	800a270 <_free_r+0x24>
 800a2c0:	d902      	bls.n	800a2c8 <_free_r+0x7c>
 800a2c2:	230c      	movs	r3, #12
 800a2c4:	602b      	str	r3, [r5, #0]
 800a2c6:	e7d3      	b.n	800a270 <_free_r+0x24>
 800a2c8:	6820      	ldr	r0, [r4, #0]
 800a2ca:	1821      	adds	r1, r4, r0
 800a2cc:	428a      	cmp	r2, r1
 800a2ce:	bf04      	itt	eq
 800a2d0:	6811      	ldreq	r1, [r2, #0]
 800a2d2:	6852      	ldreq	r2, [r2, #4]
 800a2d4:	6062      	str	r2, [r4, #4]
 800a2d6:	bf04      	itt	eq
 800a2d8:	1809      	addeq	r1, r1, r0
 800a2da:	6021      	streq	r1, [r4, #0]
 800a2dc:	605c      	str	r4, [r3, #4]
 800a2de:	e7c7      	b.n	800a270 <_free_r+0x24>
 800a2e0:	bd38      	pop	{r3, r4, r5, pc}
 800a2e2:	bf00      	nop
 800a2e4:	2000062c 	.word	0x2000062c

0800a2e8 <_malloc_r>:
 800a2e8:	b570      	push	{r4, r5, r6, lr}
 800a2ea:	1ccd      	adds	r5, r1, #3
 800a2ec:	f025 0503 	bic.w	r5, r5, #3
 800a2f0:	3508      	adds	r5, #8
 800a2f2:	2d0c      	cmp	r5, #12
 800a2f4:	bf38      	it	cc
 800a2f6:	250c      	movcc	r5, #12
 800a2f8:	2d00      	cmp	r5, #0
 800a2fa:	4606      	mov	r6, r0
 800a2fc:	db01      	blt.n	800a302 <_malloc_r+0x1a>
 800a2fe:	42a9      	cmp	r1, r5
 800a300:	d903      	bls.n	800a30a <_malloc_r+0x22>
 800a302:	230c      	movs	r3, #12
 800a304:	6033      	str	r3, [r6, #0]
 800a306:	2000      	movs	r0, #0
 800a308:	bd70      	pop	{r4, r5, r6, pc}
 800a30a:	f000 f87d 	bl	800a408 <__malloc_lock>
 800a30e:	4a21      	ldr	r2, [pc, #132]	; (800a394 <_malloc_r+0xac>)
 800a310:	6814      	ldr	r4, [r2, #0]
 800a312:	4621      	mov	r1, r4
 800a314:	b991      	cbnz	r1, 800a33c <_malloc_r+0x54>
 800a316:	4c20      	ldr	r4, [pc, #128]	; (800a398 <_malloc_r+0xb0>)
 800a318:	6823      	ldr	r3, [r4, #0]
 800a31a:	b91b      	cbnz	r3, 800a324 <_malloc_r+0x3c>
 800a31c:	4630      	mov	r0, r6
 800a31e:	f000 f863 	bl	800a3e8 <_sbrk_r>
 800a322:	6020      	str	r0, [r4, #0]
 800a324:	4629      	mov	r1, r5
 800a326:	4630      	mov	r0, r6
 800a328:	f000 f85e 	bl	800a3e8 <_sbrk_r>
 800a32c:	1c43      	adds	r3, r0, #1
 800a32e:	d124      	bne.n	800a37a <_malloc_r+0x92>
 800a330:	230c      	movs	r3, #12
 800a332:	6033      	str	r3, [r6, #0]
 800a334:	4630      	mov	r0, r6
 800a336:	f000 f868 	bl	800a40a <__malloc_unlock>
 800a33a:	e7e4      	b.n	800a306 <_malloc_r+0x1e>
 800a33c:	680b      	ldr	r3, [r1, #0]
 800a33e:	1b5b      	subs	r3, r3, r5
 800a340:	d418      	bmi.n	800a374 <_malloc_r+0x8c>
 800a342:	2b0b      	cmp	r3, #11
 800a344:	d90f      	bls.n	800a366 <_malloc_r+0x7e>
 800a346:	600b      	str	r3, [r1, #0]
 800a348:	50cd      	str	r5, [r1, r3]
 800a34a:	18cc      	adds	r4, r1, r3
 800a34c:	4630      	mov	r0, r6
 800a34e:	f000 f85c 	bl	800a40a <__malloc_unlock>
 800a352:	f104 000b 	add.w	r0, r4, #11
 800a356:	1d23      	adds	r3, r4, #4
 800a358:	f020 0007 	bic.w	r0, r0, #7
 800a35c:	1ac3      	subs	r3, r0, r3
 800a35e:	d0d3      	beq.n	800a308 <_malloc_r+0x20>
 800a360:	425a      	negs	r2, r3
 800a362:	50e2      	str	r2, [r4, r3]
 800a364:	e7d0      	b.n	800a308 <_malloc_r+0x20>
 800a366:	428c      	cmp	r4, r1
 800a368:	684b      	ldr	r3, [r1, #4]
 800a36a:	bf16      	itet	ne
 800a36c:	6063      	strne	r3, [r4, #4]
 800a36e:	6013      	streq	r3, [r2, #0]
 800a370:	460c      	movne	r4, r1
 800a372:	e7eb      	b.n	800a34c <_malloc_r+0x64>
 800a374:	460c      	mov	r4, r1
 800a376:	6849      	ldr	r1, [r1, #4]
 800a378:	e7cc      	b.n	800a314 <_malloc_r+0x2c>
 800a37a:	1cc4      	adds	r4, r0, #3
 800a37c:	f024 0403 	bic.w	r4, r4, #3
 800a380:	42a0      	cmp	r0, r4
 800a382:	d005      	beq.n	800a390 <_malloc_r+0xa8>
 800a384:	1a21      	subs	r1, r4, r0
 800a386:	4630      	mov	r0, r6
 800a388:	f000 f82e 	bl	800a3e8 <_sbrk_r>
 800a38c:	3001      	adds	r0, #1
 800a38e:	d0cf      	beq.n	800a330 <_malloc_r+0x48>
 800a390:	6025      	str	r5, [r4, #0]
 800a392:	e7db      	b.n	800a34c <_malloc_r+0x64>
 800a394:	2000062c 	.word	0x2000062c
 800a398:	20000630 	.word	0x20000630

0800a39c <_realloc_r>:
 800a39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a39e:	4607      	mov	r7, r0
 800a3a0:	4614      	mov	r4, r2
 800a3a2:	460e      	mov	r6, r1
 800a3a4:	b921      	cbnz	r1, 800a3b0 <_realloc_r+0x14>
 800a3a6:	4611      	mov	r1, r2
 800a3a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a3ac:	f7ff bf9c 	b.w	800a2e8 <_malloc_r>
 800a3b0:	b922      	cbnz	r2, 800a3bc <_realloc_r+0x20>
 800a3b2:	f7ff ff4b 	bl	800a24c <_free_r>
 800a3b6:	4625      	mov	r5, r4
 800a3b8:	4628      	mov	r0, r5
 800a3ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3bc:	f000 f826 	bl	800a40c <_malloc_usable_size_r>
 800a3c0:	42a0      	cmp	r0, r4
 800a3c2:	d20f      	bcs.n	800a3e4 <_realloc_r+0x48>
 800a3c4:	4621      	mov	r1, r4
 800a3c6:	4638      	mov	r0, r7
 800a3c8:	f7ff ff8e 	bl	800a2e8 <_malloc_r>
 800a3cc:	4605      	mov	r5, r0
 800a3ce:	2800      	cmp	r0, #0
 800a3d0:	d0f2      	beq.n	800a3b8 <_realloc_r+0x1c>
 800a3d2:	4631      	mov	r1, r6
 800a3d4:	4622      	mov	r2, r4
 800a3d6:	f7ff fb34 	bl	8009a42 <memcpy>
 800a3da:	4631      	mov	r1, r6
 800a3dc:	4638      	mov	r0, r7
 800a3de:	f7ff ff35 	bl	800a24c <_free_r>
 800a3e2:	e7e9      	b.n	800a3b8 <_realloc_r+0x1c>
 800a3e4:	4635      	mov	r5, r6
 800a3e6:	e7e7      	b.n	800a3b8 <_realloc_r+0x1c>

0800a3e8 <_sbrk_r>:
 800a3e8:	b538      	push	{r3, r4, r5, lr}
 800a3ea:	4c06      	ldr	r4, [pc, #24]	; (800a404 <_sbrk_r+0x1c>)
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	4605      	mov	r5, r0
 800a3f0:	4608      	mov	r0, r1
 800a3f2:	6023      	str	r3, [r4, #0]
 800a3f4:	f7fb f81e 	bl	8005434 <_sbrk>
 800a3f8:	1c43      	adds	r3, r0, #1
 800a3fa:	d102      	bne.n	800a402 <_sbrk_r+0x1a>
 800a3fc:	6823      	ldr	r3, [r4, #0]
 800a3fe:	b103      	cbz	r3, 800a402 <_sbrk_r+0x1a>
 800a400:	602b      	str	r3, [r5, #0]
 800a402:	bd38      	pop	{r3, r4, r5, pc}
 800a404:	20000d54 	.word	0x20000d54

0800a408 <__malloc_lock>:
 800a408:	4770      	bx	lr

0800a40a <__malloc_unlock>:
 800a40a:	4770      	bx	lr

0800a40c <_malloc_usable_size_r>:
 800a40c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a410:	1f18      	subs	r0, r3, #4
 800a412:	2b00      	cmp	r3, #0
 800a414:	bfbc      	itt	lt
 800a416:	580b      	ldrlt	r3, [r1, r0]
 800a418:	18c0      	addlt	r0, r0, r3
 800a41a:	4770      	bx	lr

0800a41c <_init>:
 800a41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a41e:	bf00      	nop
 800a420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a422:	bc08      	pop	{r3}
 800a424:	469e      	mov	lr, r3
 800a426:	4770      	bx	lr

0800a428 <_fini>:
 800a428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a42a:	bf00      	nop
 800a42c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a42e:	bc08      	pop	{r3}
 800a430:	469e      	mov	lr, r3
 800a432:	4770      	bx	lr
