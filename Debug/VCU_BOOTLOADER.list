
VCU_BOOTLOADER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a52c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000768  0800a70c  0800a70c  0001a70c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae74  0800ae74  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae74  0800ae74  0001ae74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae7c  0800ae7c  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae7c  0800ae7c  0001ae7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae80  0800ae80  0001ae80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800ae84  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001444  20000200  0800b084  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001644  0800b084  00021644  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019407  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e57  00000000  00000000  00039637  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010c8  00000000  00000000  0003d490  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f10  00000000  00000000  0003e558  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002539c  00000000  00000000  0003f468  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000138a1  00000000  00000000  00064804  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cfdae  00000000  00000000  000780a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00147e53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048c8  00000000  00000000  00147ed0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000200 	.word	0x20000200
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a6f4 	.word	0x0800a6f4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000204 	.word	0x20000204
 800021c:	0800a6f4 	.word	0x0800a6f4

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800042e:	f1a4 0401 	sub.w	r4, r4, #1
 8000432:	d1e9      	bne.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__aeabi_d2uiz>:
 8000a8c:	004a      	lsls	r2, r1, #1
 8000a8e:	d211      	bcs.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a94:	d211      	bcs.n	8000aba <__aeabi_d2uiz+0x2e>
 8000a96:	d50d      	bpl.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa0:	d40e      	bmi.n	8000ac0 <__aeabi_d2uiz+0x34>
 8000aa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aae:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d102      	bne.n	8000ac6 <__aeabi_d2uiz+0x3a>
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac4:	4770      	bx	lr
 8000ac6:	f04f 0000 	mov.w	r0, #0
 8000aca:	4770      	bx	lr

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b80:	f000 b972 	b.w	8000e68 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9e08      	ldr	r6, [sp, #32]
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	4688      	mov	r8, r1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d14b      	bne.n	8000c42 <__udivmoddi4+0xa6>
 8000baa:	428a      	cmp	r2, r1
 8000bac:	4615      	mov	r5, r2
 8000bae:	d967      	bls.n	8000c80 <__udivmoddi4+0xe4>
 8000bb0:	fab2 f282 	clz	r2, r2
 8000bb4:	b14a      	cbz	r2, 8000bca <__udivmoddi4+0x2e>
 8000bb6:	f1c2 0720 	rsb	r7, r2, #32
 8000bba:	fa01 f302 	lsl.w	r3, r1, r2
 8000bbe:	fa20 f707 	lsr.w	r7, r0, r7
 8000bc2:	4095      	lsls	r5, r2
 8000bc4:	ea47 0803 	orr.w	r8, r7, r3
 8000bc8:	4094      	lsls	r4, r2
 8000bca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bce:	0c23      	lsrs	r3, r4, #16
 8000bd0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bd4:	fa1f fc85 	uxth.w	ip, r5
 8000bd8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bdc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000be0:	fb07 f10c 	mul.w	r1, r7, ip
 8000be4:	4299      	cmp	r1, r3
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x60>
 8000be8:	18eb      	adds	r3, r5, r3
 8000bea:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000bee:	f080 811b 	bcs.w	8000e28 <__udivmoddi4+0x28c>
 8000bf2:	4299      	cmp	r1, r3
 8000bf4:	f240 8118 	bls.w	8000e28 <__udivmoddi4+0x28c>
 8000bf8:	3f02      	subs	r7, #2
 8000bfa:	442b      	add	r3, r5
 8000bfc:	1a5b      	subs	r3, r3, r1
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c04:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c0c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c10:	45a4      	cmp	ip, r4
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x8c>
 8000c14:	192c      	adds	r4, r5, r4
 8000c16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c1a:	f080 8107 	bcs.w	8000e2c <__udivmoddi4+0x290>
 8000c1e:	45a4      	cmp	ip, r4
 8000c20:	f240 8104 	bls.w	8000e2c <__udivmoddi4+0x290>
 8000c24:	3802      	subs	r0, #2
 8000c26:	442c      	add	r4, r5
 8000c28:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c2c:	eba4 040c 	sub.w	r4, r4, ip
 8000c30:	2700      	movs	r7, #0
 8000c32:	b11e      	cbz	r6, 8000c3c <__udivmoddi4+0xa0>
 8000c34:	40d4      	lsrs	r4, r2
 8000c36:	2300      	movs	r3, #0
 8000c38:	e9c6 4300 	strd	r4, r3, [r6]
 8000c3c:	4639      	mov	r1, r7
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d909      	bls.n	8000c5a <__udivmoddi4+0xbe>
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	f000 80eb 	beq.w	8000e22 <__udivmoddi4+0x286>
 8000c4c:	2700      	movs	r7, #0
 8000c4e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c52:	4638      	mov	r0, r7
 8000c54:	4639      	mov	r1, r7
 8000c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5a:	fab3 f783 	clz	r7, r3
 8000c5e:	2f00      	cmp	r7, #0
 8000c60:	d147      	bne.n	8000cf2 <__udivmoddi4+0x156>
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d302      	bcc.n	8000c6c <__udivmoddi4+0xd0>
 8000c66:	4282      	cmp	r2, r0
 8000c68:	f200 80fa 	bhi.w	8000e60 <__udivmoddi4+0x2c4>
 8000c6c:	1a84      	subs	r4, r0, r2
 8000c6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c72:	2001      	movs	r0, #1
 8000c74:	4698      	mov	r8, r3
 8000c76:	2e00      	cmp	r6, #0
 8000c78:	d0e0      	beq.n	8000c3c <__udivmoddi4+0xa0>
 8000c7a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c7e:	e7dd      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000c80:	b902      	cbnz	r2, 8000c84 <__udivmoddi4+0xe8>
 8000c82:	deff      	udf	#255	; 0xff
 8000c84:	fab2 f282 	clz	r2, r2
 8000c88:	2a00      	cmp	r2, #0
 8000c8a:	f040 808f 	bne.w	8000dac <__udivmoddi4+0x210>
 8000c8e:	1b49      	subs	r1, r1, r5
 8000c90:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c94:	fa1f f885 	uxth.w	r8, r5
 8000c98:	2701      	movs	r7, #1
 8000c9a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c9e:	0c23      	lsrs	r3, r4, #16
 8000ca0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ca4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca8:	fb08 f10c 	mul.w	r1, r8, ip
 8000cac:	4299      	cmp	r1, r3
 8000cae:	d907      	bls.n	8000cc0 <__udivmoddi4+0x124>
 8000cb0:	18eb      	adds	r3, r5, r3
 8000cb2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0x122>
 8000cb8:	4299      	cmp	r1, r3
 8000cba:	f200 80cd 	bhi.w	8000e58 <__udivmoddi4+0x2bc>
 8000cbe:	4684      	mov	ip, r0
 8000cc0:	1a59      	subs	r1, r3, r1
 8000cc2:	b2a3      	uxth	r3, r4
 8000cc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ccc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cd0:	fb08 f800 	mul.w	r8, r8, r0
 8000cd4:	45a0      	cmp	r8, r4
 8000cd6:	d907      	bls.n	8000ce8 <__udivmoddi4+0x14c>
 8000cd8:	192c      	adds	r4, r5, r4
 8000cda:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cde:	d202      	bcs.n	8000ce6 <__udivmoddi4+0x14a>
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	f200 80b6 	bhi.w	8000e52 <__udivmoddi4+0x2b6>
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	eba4 0408 	sub.w	r4, r4, r8
 8000cec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cf0:	e79f      	b.n	8000c32 <__udivmoddi4+0x96>
 8000cf2:	f1c7 0c20 	rsb	ip, r7, #32
 8000cf6:	40bb      	lsls	r3, r7
 8000cf8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cfc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d00:	fa01 f407 	lsl.w	r4, r1, r7
 8000d04:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d08:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d0c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d10:	4325      	orrs	r5, r4
 8000d12:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d16:	0c2c      	lsrs	r4, r5, #16
 8000d18:	fb08 3319 	mls	r3, r8, r9, r3
 8000d1c:	fa1f fa8e 	uxth.w	sl, lr
 8000d20:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d24:	fb09 f40a 	mul.w	r4, r9, sl
 8000d28:	429c      	cmp	r4, r3
 8000d2a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d2e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d32:	d90b      	bls.n	8000d4c <__udivmoddi4+0x1b0>
 8000d34:	eb1e 0303 	adds.w	r3, lr, r3
 8000d38:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d3c:	f080 8087 	bcs.w	8000e4e <__udivmoddi4+0x2b2>
 8000d40:	429c      	cmp	r4, r3
 8000d42:	f240 8084 	bls.w	8000e4e <__udivmoddi4+0x2b2>
 8000d46:	f1a9 0902 	sub.w	r9, r9, #2
 8000d4a:	4473      	add	r3, lr
 8000d4c:	1b1b      	subs	r3, r3, r4
 8000d4e:	b2ad      	uxth	r5, r5
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3310 	mls	r3, r8, r0, r3
 8000d58:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d5c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d60:	45a2      	cmp	sl, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x1da>
 8000d64:	eb1e 0404 	adds.w	r4, lr, r4
 8000d68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d6c:	d26b      	bcs.n	8000e46 <__udivmoddi4+0x2aa>
 8000d6e:	45a2      	cmp	sl, r4
 8000d70:	d969      	bls.n	8000e46 <__udivmoddi4+0x2aa>
 8000d72:	3802      	subs	r0, #2
 8000d74:	4474      	add	r4, lr
 8000d76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d7e:	eba4 040a 	sub.w	r4, r4, sl
 8000d82:	454c      	cmp	r4, r9
 8000d84:	46c2      	mov	sl, r8
 8000d86:	464b      	mov	r3, r9
 8000d88:	d354      	bcc.n	8000e34 <__udivmoddi4+0x298>
 8000d8a:	d051      	beq.n	8000e30 <__udivmoddi4+0x294>
 8000d8c:	2e00      	cmp	r6, #0
 8000d8e:	d069      	beq.n	8000e64 <__udivmoddi4+0x2c8>
 8000d90:	ebb1 050a 	subs.w	r5, r1, sl
 8000d94:	eb64 0403 	sbc.w	r4, r4, r3
 8000d98:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d9c:	40fd      	lsrs	r5, r7
 8000d9e:	40fc      	lsrs	r4, r7
 8000da0:	ea4c 0505 	orr.w	r5, ip, r5
 8000da4:	e9c6 5400 	strd	r5, r4, [r6]
 8000da8:	2700      	movs	r7, #0
 8000daa:	e747      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000dac:	f1c2 0320 	rsb	r3, r2, #32
 8000db0:	fa20 f703 	lsr.w	r7, r0, r3
 8000db4:	4095      	lsls	r5, r2
 8000db6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dba:	fa21 f303 	lsr.w	r3, r1, r3
 8000dbe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc2:	4338      	orrs	r0, r7
 8000dc4:	0c01      	lsrs	r1, r0, #16
 8000dc6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dca:	fa1f f885 	uxth.w	r8, r5
 8000dce:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd6:	fb07 f308 	mul.w	r3, r7, r8
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	fa04 f402 	lsl.w	r4, r4, r2
 8000de0:	d907      	bls.n	8000df2 <__udivmoddi4+0x256>
 8000de2:	1869      	adds	r1, r5, r1
 8000de4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000de8:	d22f      	bcs.n	8000e4a <__udivmoddi4+0x2ae>
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d92d      	bls.n	8000e4a <__udivmoddi4+0x2ae>
 8000dee:	3f02      	subs	r7, #2
 8000df0:	4429      	add	r1, r5
 8000df2:	1acb      	subs	r3, r1, r3
 8000df4:	b281      	uxth	r1, r0
 8000df6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dfa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dfe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e02:	fb00 f308 	mul.w	r3, r0, r8
 8000e06:	428b      	cmp	r3, r1
 8000e08:	d907      	bls.n	8000e1a <__udivmoddi4+0x27e>
 8000e0a:	1869      	adds	r1, r5, r1
 8000e0c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e10:	d217      	bcs.n	8000e42 <__udivmoddi4+0x2a6>
 8000e12:	428b      	cmp	r3, r1
 8000e14:	d915      	bls.n	8000e42 <__udivmoddi4+0x2a6>
 8000e16:	3802      	subs	r0, #2
 8000e18:	4429      	add	r1, r5
 8000e1a:	1ac9      	subs	r1, r1, r3
 8000e1c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e20:	e73b      	b.n	8000c9a <__udivmoddi4+0xfe>
 8000e22:	4637      	mov	r7, r6
 8000e24:	4630      	mov	r0, r6
 8000e26:	e709      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000e28:	4607      	mov	r7, r0
 8000e2a:	e6e7      	b.n	8000bfc <__udivmoddi4+0x60>
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	e6fb      	b.n	8000c28 <__udivmoddi4+0x8c>
 8000e30:	4541      	cmp	r1, r8
 8000e32:	d2ab      	bcs.n	8000d8c <__udivmoddi4+0x1f0>
 8000e34:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e38:	eb69 020e 	sbc.w	r2, r9, lr
 8000e3c:	3801      	subs	r0, #1
 8000e3e:	4613      	mov	r3, r2
 8000e40:	e7a4      	b.n	8000d8c <__udivmoddi4+0x1f0>
 8000e42:	4660      	mov	r0, ip
 8000e44:	e7e9      	b.n	8000e1a <__udivmoddi4+0x27e>
 8000e46:	4618      	mov	r0, r3
 8000e48:	e795      	b.n	8000d76 <__udivmoddi4+0x1da>
 8000e4a:	4667      	mov	r7, ip
 8000e4c:	e7d1      	b.n	8000df2 <__udivmoddi4+0x256>
 8000e4e:	4681      	mov	r9, r0
 8000e50:	e77c      	b.n	8000d4c <__udivmoddi4+0x1b0>
 8000e52:	3802      	subs	r0, #2
 8000e54:	442c      	add	r4, r5
 8000e56:	e747      	b.n	8000ce8 <__udivmoddi4+0x14c>
 8000e58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e5c:	442b      	add	r3, r5
 8000e5e:	e72f      	b.n	8000cc0 <__udivmoddi4+0x124>
 8000e60:	4638      	mov	r0, r7
 8000e62:	e708      	b.n	8000c76 <__udivmoddi4+0xda>
 8000e64:	4637      	mov	r7, r6
 8000e66:	e6e9      	b.n	8000c3c <__udivmoddi4+0xa0>

08000e68 <__aeabi_idiv0>:
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <BAT_DMA_Init>:

/* Public functions declaration ------------------------------------------------*/
static uint16_t MovingAverage(uint16_t *pBuffer, uint16_t len, uint16_t value);

/* Public functions implementation ---------------------------------------------*/
void BAT_DMA_Init(void) {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*) DMA_BUFFER, DMA_SZ);
 8000e70:	2232      	movs	r2, #50	; 0x32
 8000e72:	4903      	ldr	r1, [pc, #12]	; (8000e80 <BAT_DMA_Init+0x14>)
 8000e74:	4803      	ldr	r0, [pc, #12]	; (8000e84 <BAT_DMA_Init+0x18>)
 8000e76:	f004 fc39 	bl	80056ec <HAL_ADC_Start_DMA>
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000220 	.word	0x20000220
 8000e84:	200014d4 	.word	0x200014d4

08000e88 <HAL_ADC_ConvHalfCpltCallback>:
    LOG_Str("Battery:Voltage = ");
    LOG_Int(BACKUP_VOLTAGE);
    LOG_StrLn(" mV");
}

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
    uint16_t i;
    uint32_t temp = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60bb      	str	r3, [r7, #8]

    // sum all buffer sample
    for (i = 0; i < (DMA_SZ / 2); i++) {
 8000e94:	2300      	movs	r3, #0
 8000e96:	81fb      	strh	r3, [r7, #14]
 8000e98:	e00a      	b.n	8000eb0 <HAL_ADC_ConvHalfCpltCallback+0x28>
        temp += DMA_BUFFER[i];
 8000e9a:	89fb      	ldrh	r3, [r7, #14]
 8000e9c:	4a0f      	ldr	r2, [pc, #60]	; (8000edc <HAL_ADC_ConvHalfCpltCallback+0x54>)
 8000e9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < (DMA_SZ / 2); i++) {
 8000eaa:	89fb      	ldrh	r3, [r7, #14]
 8000eac:	3301      	adds	r3, #1
 8000eae:	81fb      	strh	r3, [r7, #14]
 8000eb0:	89fb      	ldrh	r3, [r7, #14]
 8000eb2:	2b18      	cmp	r3, #24
 8000eb4:	d9f1      	bls.n	8000e9a <HAL_ADC_ConvHalfCpltCallback+0x12>
    }
    // calculate the average
    temp = temp / (DMA_SZ / 2);
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	4a09      	ldr	r2, [pc, #36]	; (8000ee0 <HAL_ADC_ConvHalfCpltCallback+0x58>)
 8000eba:	fba2 2303 	umull	r2, r3, r2, r3
 8000ebe:	08db      	lsrs	r3, r3, #3
 8000ec0:	60bb      	str	r3, [r7, #8]

    // calculate the moving average
    MovingAverage(AVERAGE_BUFFER, AVERAGE_SZ, temp);
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ecc:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <HAL_ADC_ConvHalfCpltCallback+0x5c>)
 8000ece:	f000 f857 	bl	8000f80 <MovingAverage>
}
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000220 	.word	0x20000220
 8000ee0:	51eb851f 	.word	0x51eb851f
 8000ee4:	20000284 	.word	0x20000284

08000ee8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
    uint16_t i;
    uint32_t temp = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60bb      	str	r3, [r7, #8]

    // sum all buffer sample
    for (i = ((DMA_SZ / 2) - 1); i < DMA_SZ; i++) {
 8000ef4:	2318      	movs	r3, #24
 8000ef6:	81fb      	strh	r3, [r7, #14]
 8000ef8:	e00a      	b.n	8000f10 <HAL_ADC_ConvCpltCallback+0x28>
        temp += DMA_BUFFER[i];
 8000efa:	89fb      	ldrh	r3, [r7, #14]
 8000efc:	4a1a      	ldr	r2, [pc, #104]	; (8000f68 <HAL_ADC_ConvCpltCallback+0x80>)
 8000efe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f02:	461a      	mov	r2, r3
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	4413      	add	r3, r2
 8000f08:	60bb      	str	r3, [r7, #8]
    for (i = ((DMA_SZ / 2) - 1); i < DMA_SZ; i++) {
 8000f0a:	89fb      	ldrh	r3, [r7, #14]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	81fb      	strh	r3, [r7, #14]
 8000f10:	89fb      	ldrh	r3, [r7, #14]
 8000f12:	2b31      	cmp	r3, #49	; 0x31
 8000f14:	d9f1      	bls.n	8000efa <HAL_ADC_ConvCpltCallback+0x12>
    }
    // calculate the average
    temp = temp / (DMA_SZ / 2);
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	4a14      	ldr	r2, [pc, #80]	; (8000f6c <HAL_ADC_ConvCpltCallback+0x84>)
 8000f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f1e:	08db      	lsrs	r3, r3, #3
 8000f20:	60bb      	str	r3, [r7, #8]

    // calculate the moving average
    temp = MovingAverage(AVERAGE_BUFFER, AVERAGE_SZ, temp);
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	461a      	mov	r2, r3
 8000f28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f2c:	4810      	ldr	r0, [pc, #64]	; (8000f70 <HAL_ADC_ConvCpltCallback+0x88>)
 8000f2e:	f000 f827 	bl	8000f80 <MovingAverage>
 8000f32:	4603      	mov	r3, r0
 8000f34:	60bb      	str	r3, [r7, #8]
    // change to battery value
    BACKUP_VOLTAGE = (temp * BAT_MAX_VOLTAGE) / ADC_MAX_VALUE;
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	ee07 3a90 	vmov	s15, r3
 8000f3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f40:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000f74 <HAL_ADC_ConvCpltCallback+0x8c>
 8000f44:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f48:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000f78 <HAL_ADC_ConvCpltCallback+0x90>
 8000f4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f54:	ee17 3a90 	vmov	r3, s15
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x94>)
 8000f5c:	801a      	strh	r2, [r3, #0]
}
 8000f5e:	bf00      	nop
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000220 	.word	0x20000220
 8000f6c:	51eb851f 	.word	0x51eb851f
 8000f70:	20000284 	.word	0x20000284
 8000f74:	45834000 	.word	0x45834000
 8000f78:	457ff000 	.word	0x457ff000
 8000f7c:	2000021c 	.word	0x2000021c

08000f80 <MovingAverage>:

/* Private functions implementation ---------------------------------------------*/
static uint16_t MovingAverage(uint16_t *pBuffer, uint16_t len, uint16_t value) {
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	807b      	strh	r3, [r7, #2]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	803b      	strh	r3, [r7, #0]
    static uint32_t sum = 0, pos = 0;
    static uint16_t length = 0;

    //Subtract the oldest number from the prev sum, add the new number
    sum = sum - pBuffer[pos] + value;
 8000f90:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <MovingAverage+0x84>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a1c      	ldr	r2, [pc, #112]	; (8001008 <MovingAverage+0x88>)
 8000f96:	6812      	ldr	r2, [r2, #0]
 8000f98:	0052      	lsls	r2, r2, #1
 8000f9a:	6879      	ldr	r1, [r7, #4]
 8000f9c:	440a      	add	r2, r1
 8000f9e:	8812      	ldrh	r2, [r2, #0]
 8000fa0:	1a9a      	subs	r2, r3, r2
 8000fa2:	883b      	ldrh	r3, [r7, #0]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	4a17      	ldr	r2, [pc, #92]	; (8001004 <MovingAverage+0x84>)
 8000fa8:	6013      	str	r3, [r2, #0]
    //Assign the nextNum to the position in the array
    pBuffer[pos] = value;
 8000faa:	4b17      	ldr	r3, [pc, #92]	; (8001008 <MovingAverage+0x88>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	883a      	ldrh	r2, [r7, #0]
 8000fb6:	801a      	strh	r2, [r3, #0]
    //Increment position
    pos++;
 8000fb8:	4b13      	ldr	r3, [pc, #76]	; (8001008 <MovingAverage+0x88>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	4a12      	ldr	r2, [pc, #72]	; (8001008 <MovingAverage+0x88>)
 8000fc0:	6013      	str	r3, [r2, #0]
    if (pos >= len) {
 8000fc2:	887a      	ldrh	r2, [r7, #2]
 8000fc4:	4b10      	ldr	r3, [pc, #64]	; (8001008 <MovingAverage+0x88>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d802      	bhi.n	8000fd2 <MovingAverage+0x52>
        pos = 0;
 8000fcc:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <MovingAverage+0x88>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
    }
    // calculate filled array
    if (length < len) {
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <MovingAverage+0x8c>)
 8000fd4:	881b      	ldrh	r3, [r3, #0]
 8000fd6:	887a      	ldrh	r2, [r7, #2]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d905      	bls.n	8000fe8 <MovingAverage+0x68>
        length++;
 8000fdc:	4b0b      	ldr	r3, [pc, #44]	; (800100c <MovingAverage+0x8c>)
 8000fde:	881b      	ldrh	r3, [r3, #0]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	b29a      	uxth	r2, r3
 8000fe4:	4b09      	ldr	r3, [pc, #36]	; (800100c <MovingAverage+0x8c>)
 8000fe6:	801a      	strh	r2, [r3, #0]
    }
    //return the average
    return sum / length;
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <MovingAverage+0x84>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a07      	ldr	r2, [pc, #28]	; (800100c <MovingAverage+0x8c>)
 8000fee:	8812      	ldrh	r2, [r2, #0]
 8000ff0:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ff4:	b29b      	uxth	r3, r3
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	20000a54 	.word	0x20000a54
 8001008:	20000a58 	.word	0x20000a58
 800100c:	20000a5c 	.word	0x20000a5c

08001010 <SIMCOM_USART_IrqHandler>:
/* Private functions implementation -------------------------------------------*/
static void SIMCOM_Check_Buffer(void);
static void SIMCOM_Fill_Buffer(const void *data, size_t len);

/* Public functions implementation ---------------------------------------------*/
void SIMCOM_USART_IrqHandler(void) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
    /* if Idle flag is set */
    if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)) {
 8001016:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <SIMCOM_USART_IrqHandler+0x38>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f003 0310 	and.w	r3, r3, #16
 8001020:	2b10      	cmp	r3, #16
 8001022:	d10c      	bne.n	800103e <SIMCOM_USART_IrqHandler+0x2e>
        /* Clear idle flag */
        __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8001024:	2300      	movs	r3, #0
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	4b07      	ldr	r3, [pc, #28]	; (8001048 <SIMCOM_USART_IrqHandler+0x38>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	4b05      	ldr	r3, [pc, #20]	; (8001048 <SIMCOM_USART_IrqHandler+0x38>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]

        SIMCOM_Check_Buffer();
 800103a:	f001 f925 	bl	8002288 <SIMCOM_Check_Buffer>
    }
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	2000157c 	.word	0x2000157c

0800104c <SIMCOM_DMA_IrqHandler>:

void SIMCOM_DMA_IrqHandler(void) {
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
    // if the source is HT
    if (__HAL_DMA_GET_IT_SOURCE(&hdma_usart1_rx, DMA_IT_HT)) {
 8001050:	4b9a      	ldr	r3, [pc, #616]	; (80012bc <SIMCOM_DMA_IrqHandler+0x270>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0308 	and.w	r3, r3, #8
 800105a:	2b00      	cmp	r3, #0
 800105c:	f000 81bc 	beq.w	80013d8 <SIMCOM_DMA_IrqHandler+0x38c>
        /* Clear HT flag */
        __HAL_DMA_CLEAR_FLAG(&hdma_usart1_rx, __HAL_DMA_GET_HT_FLAG_INDEX(&hdma_usart1_rx));
 8001060:	4b96      	ldr	r3, [pc, #600]	; (80012bc <SIMCOM_DMA_IrqHandler+0x270>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	461a      	mov	r2, r3
 8001066:	4b96      	ldr	r3, [pc, #600]	; (80012c0 <SIMCOM_DMA_IrqHandler+0x274>)
 8001068:	429a      	cmp	r2, r3
 800106a:	d960      	bls.n	800112e <SIMCOM_DMA_IrqHandler+0xe2>
 800106c:	4b93      	ldr	r3, [pc, #588]	; (80012bc <SIMCOM_DMA_IrqHandler+0x270>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a94      	ldr	r2, [pc, #592]	; (80012c4 <SIMCOM_DMA_IrqHandler+0x278>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d057      	beq.n	8001126 <SIMCOM_DMA_IrqHandler+0xda>
 8001076:	4b91      	ldr	r3, [pc, #580]	; (80012bc <SIMCOM_DMA_IrqHandler+0x270>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a93      	ldr	r2, [pc, #588]	; (80012c8 <SIMCOM_DMA_IrqHandler+0x27c>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d050      	beq.n	8001122 <SIMCOM_DMA_IrqHandler+0xd6>
 8001080:	4b8e      	ldr	r3, [pc, #568]	; (80012bc <SIMCOM_DMA_IrqHandler+0x270>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a91      	ldr	r2, [pc, #580]	; (80012cc <SIMCOM_DMA_IrqHandler+0x280>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d049      	beq.n	800111e <SIMCOM_DMA_IrqHandler+0xd2>
 800108a:	4b8c      	ldr	r3, [pc, #560]	; (80012bc <SIMCOM_DMA_IrqHandler+0x270>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a90      	ldr	r2, [pc, #576]	; (80012d0 <SIMCOM_DMA_IrqHandler+0x284>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d042      	beq.n	800111a <SIMCOM_DMA_IrqHandler+0xce>
 8001094:	4b89      	ldr	r3, [pc, #548]	; (80012bc <SIMCOM_DMA_IrqHandler+0x270>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a8e      	ldr	r2, [pc, #568]	; (80012d4 <SIMCOM_DMA_IrqHandler+0x288>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d03a      	beq.n	8001114 <SIMCOM_DMA_IrqHandler+0xc8>
 800109e:	4b87      	ldr	r3, [pc, #540]	; (80012bc <SIMCOM_DMA_IrqHandler+0x270>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a8d      	ldr	r2, [pc, #564]	; (80012d8 <SIMCOM_DMA_IrqHandler+0x28c>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d032      	beq.n	800110e <SIMCOM_DMA_IrqHandler+0xc2>
 80010a8:	4b84      	ldr	r3, [pc, #528]	; (80012bc <SIMCOM_DMA_IrqHandler+0x270>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a8b      	ldr	r2, [pc, #556]	; (80012dc <SIMCOM_DMA_IrqHandler+0x290>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d02a      	beq.n	8001108 <SIMCOM_DMA_IrqHandler+0xbc>
 80010b2:	4b82      	ldr	r3, [pc, #520]	; (80012bc <SIMCOM_DMA_IrqHandler+0x270>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a8a      	ldr	r2, [pc, #552]	; (80012e0 <SIMCOM_DMA_IrqHandler+0x294>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d022      	beq.n	8001102 <SIMCOM_DMA_IrqHandler+0xb6>
 80010bc:	4b7f      	ldr	r3, [pc, #508]	; (80012bc <SIMCOM_DMA_IrqHandler+0x270>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a88      	ldr	r2, [pc, #544]	; (80012e4 <SIMCOM_DMA_IrqHandler+0x298>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d01a      	beq.n	80010fc <SIMCOM_DMA_IrqHandler+0xb0>
 80010c6:	4b7d      	ldr	r3, [pc, #500]	; (80012bc <SIMCOM_DMA_IrqHandler+0x270>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a87      	ldr	r2, [pc, #540]	; (80012e8 <SIMCOM_DMA_IrqHandler+0x29c>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d012      	beq.n	80010f6 <SIMCOM_DMA_IrqHandler+0xaa>
 80010d0:	4b7a      	ldr	r3, [pc, #488]	; (80012bc <SIMCOM_DMA_IrqHandler+0x270>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a85      	ldr	r2, [pc, #532]	; (80012ec <SIMCOM_DMA_IrqHandler+0x2a0>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d00a      	beq.n	80010f0 <SIMCOM_DMA_IrqHandler+0xa4>
 80010da:	4b78      	ldr	r3, [pc, #480]	; (80012bc <SIMCOM_DMA_IrqHandler+0x270>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a84      	ldr	r2, [pc, #528]	; (80012f0 <SIMCOM_DMA_IrqHandler+0x2a4>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d102      	bne.n	80010ea <SIMCOM_DMA_IrqHandler+0x9e>
 80010e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80010e8:	e01e      	b.n	8001128 <SIMCOM_DMA_IrqHandler+0xdc>
 80010ea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80010ee:	e01b      	b.n	8001128 <SIMCOM_DMA_IrqHandler+0xdc>
 80010f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80010f4:	e018      	b.n	8001128 <SIMCOM_DMA_IrqHandler+0xdc>
 80010f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80010fa:	e015      	b.n	8001128 <SIMCOM_DMA_IrqHandler+0xdc>
 80010fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001100:	e012      	b.n	8001128 <SIMCOM_DMA_IrqHandler+0xdc>
 8001102:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001106:	e00f      	b.n	8001128 <SIMCOM_DMA_IrqHandler+0xdc>
 8001108:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800110c:	e00c      	b.n	8001128 <SIMCOM_DMA_IrqHandler+0xdc>
 800110e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001112:	e009      	b.n	8001128 <SIMCOM_DMA_IrqHandler+0xdc>
 8001114:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001118:	e006      	b.n	8001128 <SIMCOM_DMA_IrqHandler+0xdc>
 800111a:	2310      	movs	r3, #16
 800111c:	e004      	b.n	8001128 <SIMCOM_DMA_IrqHandler+0xdc>
 800111e:	2310      	movs	r3, #16
 8001120:	e002      	b.n	8001128 <SIMCOM_DMA_IrqHandler+0xdc>
 8001122:	2310      	movs	r3, #16
 8001124:	e000      	b.n	8001128 <SIMCOM_DMA_IrqHandler+0xdc>
 8001126:	2310      	movs	r3, #16
 8001128:	4a72      	ldr	r2, [pc, #456]	; (80012f4 <SIMCOM_DMA_IrqHandler+0x2a8>)
 800112a:	60d3      	str	r3, [r2, #12]
 800112c:	e150      	b.n	80013d0 <SIMCOM_DMA_IrqHandler+0x384>
 800112e:	4b63      	ldr	r3, [pc, #396]	; (80012bc <SIMCOM_DMA_IrqHandler+0x270>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	461a      	mov	r2, r3
 8001134:	4b70      	ldr	r3, [pc, #448]	; (80012f8 <SIMCOM_DMA_IrqHandler+0x2ac>)
 8001136:	429a      	cmp	r2, r3
 8001138:	d960      	bls.n	80011fc <SIMCOM_DMA_IrqHandler+0x1b0>
 800113a:	4b60      	ldr	r3, [pc, #384]	; (80012bc <SIMCOM_DMA_IrqHandler+0x270>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a61      	ldr	r2, [pc, #388]	; (80012c4 <SIMCOM_DMA_IrqHandler+0x278>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d057      	beq.n	80011f4 <SIMCOM_DMA_IrqHandler+0x1a8>
 8001144:	4b5d      	ldr	r3, [pc, #372]	; (80012bc <SIMCOM_DMA_IrqHandler+0x270>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a5f      	ldr	r2, [pc, #380]	; (80012c8 <SIMCOM_DMA_IrqHandler+0x27c>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d050      	beq.n	80011f0 <SIMCOM_DMA_IrqHandler+0x1a4>
 800114e:	4b5b      	ldr	r3, [pc, #364]	; (80012bc <SIMCOM_DMA_IrqHandler+0x270>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a5e      	ldr	r2, [pc, #376]	; (80012cc <SIMCOM_DMA_IrqHandler+0x280>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d049      	beq.n	80011ec <SIMCOM_DMA_IrqHandler+0x1a0>
 8001158:	4b58      	ldr	r3, [pc, #352]	; (80012bc <SIMCOM_DMA_IrqHandler+0x270>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a5c      	ldr	r2, [pc, #368]	; (80012d0 <SIMCOM_DMA_IrqHandler+0x284>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d042      	beq.n	80011e8 <SIMCOM_DMA_IrqHandler+0x19c>
 8001162:	4b56      	ldr	r3, [pc, #344]	; (80012bc <SIMCOM_DMA_IrqHandler+0x270>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a5b      	ldr	r2, [pc, #364]	; (80012d4 <SIMCOM_DMA_IrqHandler+0x288>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d03a      	beq.n	80011e2 <SIMCOM_DMA_IrqHandler+0x196>
 800116c:	4b53      	ldr	r3, [pc, #332]	; (80012bc <SIMCOM_DMA_IrqHandler+0x270>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a59      	ldr	r2, [pc, #356]	; (80012d8 <SIMCOM_DMA_IrqHandler+0x28c>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d032      	beq.n	80011dc <SIMCOM_DMA_IrqHandler+0x190>
 8001176:	4b51      	ldr	r3, [pc, #324]	; (80012bc <SIMCOM_DMA_IrqHandler+0x270>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a58      	ldr	r2, [pc, #352]	; (80012dc <SIMCOM_DMA_IrqHandler+0x290>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d02a      	beq.n	80011d6 <SIMCOM_DMA_IrqHandler+0x18a>
 8001180:	4b4e      	ldr	r3, [pc, #312]	; (80012bc <SIMCOM_DMA_IrqHandler+0x270>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a56      	ldr	r2, [pc, #344]	; (80012e0 <SIMCOM_DMA_IrqHandler+0x294>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d022      	beq.n	80011d0 <SIMCOM_DMA_IrqHandler+0x184>
 800118a:	4b4c      	ldr	r3, [pc, #304]	; (80012bc <SIMCOM_DMA_IrqHandler+0x270>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a55      	ldr	r2, [pc, #340]	; (80012e4 <SIMCOM_DMA_IrqHandler+0x298>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d01a      	beq.n	80011ca <SIMCOM_DMA_IrqHandler+0x17e>
 8001194:	4b49      	ldr	r3, [pc, #292]	; (80012bc <SIMCOM_DMA_IrqHandler+0x270>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a53      	ldr	r2, [pc, #332]	; (80012e8 <SIMCOM_DMA_IrqHandler+0x29c>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d012      	beq.n	80011c4 <SIMCOM_DMA_IrqHandler+0x178>
 800119e:	4b47      	ldr	r3, [pc, #284]	; (80012bc <SIMCOM_DMA_IrqHandler+0x270>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a52      	ldr	r2, [pc, #328]	; (80012ec <SIMCOM_DMA_IrqHandler+0x2a0>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d00a      	beq.n	80011be <SIMCOM_DMA_IrqHandler+0x172>
 80011a8:	4b44      	ldr	r3, [pc, #272]	; (80012bc <SIMCOM_DMA_IrqHandler+0x270>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a50      	ldr	r2, [pc, #320]	; (80012f0 <SIMCOM_DMA_IrqHandler+0x2a4>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d102      	bne.n	80011b8 <SIMCOM_DMA_IrqHandler+0x16c>
 80011b2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011b6:	e01e      	b.n	80011f6 <SIMCOM_DMA_IrqHandler+0x1aa>
 80011b8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80011bc:	e01b      	b.n	80011f6 <SIMCOM_DMA_IrqHandler+0x1aa>
 80011be:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011c2:	e018      	b.n	80011f6 <SIMCOM_DMA_IrqHandler+0x1aa>
 80011c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011c8:	e015      	b.n	80011f6 <SIMCOM_DMA_IrqHandler+0x1aa>
 80011ca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011ce:	e012      	b.n	80011f6 <SIMCOM_DMA_IrqHandler+0x1aa>
 80011d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011d4:	e00f      	b.n	80011f6 <SIMCOM_DMA_IrqHandler+0x1aa>
 80011d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011da:	e00c      	b.n	80011f6 <SIMCOM_DMA_IrqHandler+0x1aa>
 80011dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011e0:	e009      	b.n	80011f6 <SIMCOM_DMA_IrqHandler+0x1aa>
 80011e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011e6:	e006      	b.n	80011f6 <SIMCOM_DMA_IrqHandler+0x1aa>
 80011e8:	2310      	movs	r3, #16
 80011ea:	e004      	b.n	80011f6 <SIMCOM_DMA_IrqHandler+0x1aa>
 80011ec:	2310      	movs	r3, #16
 80011ee:	e002      	b.n	80011f6 <SIMCOM_DMA_IrqHandler+0x1aa>
 80011f0:	2310      	movs	r3, #16
 80011f2:	e000      	b.n	80011f6 <SIMCOM_DMA_IrqHandler+0x1aa>
 80011f4:	2310      	movs	r3, #16
 80011f6:	4a3f      	ldr	r2, [pc, #252]	; (80012f4 <SIMCOM_DMA_IrqHandler+0x2a8>)
 80011f8:	6093      	str	r3, [r2, #8]
 80011fa:	e0e9      	b.n	80013d0 <SIMCOM_DMA_IrqHandler+0x384>
 80011fc:	4b2f      	ldr	r3, [pc, #188]	; (80012bc <SIMCOM_DMA_IrqHandler+0x270>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	461a      	mov	r2, r3
 8001202:	4b3e      	ldr	r3, [pc, #248]	; (80012fc <SIMCOM_DMA_IrqHandler+0x2b0>)
 8001204:	429a      	cmp	r2, r3
 8001206:	f240 8083 	bls.w	8001310 <SIMCOM_DMA_IrqHandler+0x2c4>
 800120a:	4b2c      	ldr	r3, [pc, #176]	; (80012bc <SIMCOM_DMA_IrqHandler+0x270>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a2d      	ldr	r2, [pc, #180]	; (80012c4 <SIMCOM_DMA_IrqHandler+0x278>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d079      	beq.n	8001308 <SIMCOM_DMA_IrqHandler+0x2bc>
 8001214:	4b29      	ldr	r3, [pc, #164]	; (80012bc <SIMCOM_DMA_IrqHandler+0x270>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a2b      	ldr	r2, [pc, #172]	; (80012c8 <SIMCOM_DMA_IrqHandler+0x27c>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d072      	beq.n	8001304 <SIMCOM_DMA_IrqHandler+0x2b8>
 800121e:	4b27      	ldr	r3, [pc, #156]	; (80012bc <SIMCOM_DMA_IrqHandler+0x270>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a2a      	ldr	r2, [pc, #168]	; (80012cc <SIMCOM_DMA_IrqHandler+0x280>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d06b      	beq.n	8001300 <SIMCOM_DMA_IrqHandler+0x2b4>
 8001228:	4b24      	ldr	r3, [pc, #144]	; (80012bc <SIMCOM_DMA_IrqHandler+0x270>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a28      	ldr	r2, [pc, #160]	; (80012d0 <SIMCOM_DMA_IrqHandler+0x284>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d042      	beq.n	80012b8 <SIMCOM_DMA_IrqHandler+0x26c>
 8001232:	4b22      	ldr	r3, [pc, #136]	; (80012bc <SIMCOM_DMA_IrqHandler+0x270>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a27      	ldr	r2, [pc, #156]	; (80012d4 <SIMCOM_DMA_IrqHandler+0x288>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d03a      	beq.n	80012b2 <SIMCOM_DMA_IrqHandler+0x266>
 800123c:	4b1f      	ldr	r3, [pc, #124]	; (80012bc <SIMCOM_DMA_IrqHandler+0x270>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a25      	ldr	r2, [pc, #148]	; (80012d8 <SIMCOM_DMA_IrqHandler+0x28c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d032      	beq.n	80012ac <SIMCOM_DMA_IrqHandler+0x260>
 8001246:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <SIMCOM_DMA_IrqHandler+0x270>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a24      	ldr	r2, [pc, #144]	; (80012dc <SIMCOM_DMA_IrqHandler+0x290>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d02a      	beq.n	80012a6 <SIMCOM_DMA_IrqHandler+0x25a>
 8001250:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <SIMCOM_DMA_IrqHandler+0x270>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a22      	ldr	r2, [pc, #136]	; (80012e0 <SIMCOM_DMA_IrqHandler+0x294>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d022      	beq.n	80012a0 <SIMCOM_DMA_IrqHandler+0x254>
 800125a:	4b18      	ldr	r3, [pc, #96]	; (80012bc <SIMCOM_DMA_IrqHandler+0x270>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a21      	ldr	r2, [pc, #132]	; (80012e4 <SIMCOM_DMA_IrqHandler+0x298>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d01a      	beq.n	800129a <SIMCOM_DMA_IrqHandler+0x24e>
 8001264:	4b15      	ldr	r3, [pc, #84]	; (80012bc <SIMCOM_DMA_IrqHandler+0x270>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a1f      	ldr	r2, [pc, #124]	; (80012e8 <SIMCOM_DMA_IrqHandler+0x29c>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d012      	beq.n	8001294 <SIMCOM_DMA_IrqHandler+0x248>
 800126e:	4b13      	ldr	r3, [pc, #76]	; (80012bc <SIMCOM_DMA_IrqHandler+0x270>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a1e      	ldr	r2, [pc, #120]	; (80012ec <SIMCOM_DMA_IrqHandler+0x2a0>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d00a      	beq.n	800128e <SIMCOM_DMA_IrqHandler+0x242>
 8001278:	4b10      	ldr	r3, [pc, #64]	; (80012bc <SIMCOM_DMA_IrqHandler+0x270>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a1c      	ldr	r2, [pc, #112]	; (80012f0 <SIMCOM_DMA_IrqHandler+0x2a4>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d102      	bne.n	8001288 <SIMCOM_DMA_IrqHandler+0x23c>
 8001282:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001286:	e040      	b.n	800130a <SIMCOM_DMA_IrqHandler+0x2be>
 8001288:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800128c:	e03d      	b.n	800130a <SIMCOM_DMA_IrqHandler+0x2be>
 800128e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001292:	e03a      	b.n	800130a <SIMCOM_DMA_IrqHandler+0x2be>
 8001294:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001298:	e037      	b.n	800130a <SIMCOM_DMA_IrqHandler+0x2be>
 800129a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800129e:	e034      	b.n	800130a <SIMCOM_DMA_IrqHandler+0x2be>
 80012a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012a4:	e031      	b.n	800130a <SIMCOM_DMA_IrqHandler+0x2be>
 80012a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012aa:	e02e      	b.n	800130a <SIMCOM_DMA_IrqHandler+0x2be>
 80012ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012b0:	e02b      	b.n	800130a <SIMCOM_DMA_IrqHandler+0x2be>
 80012b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012b6:	e028      	b.n	800130a <SIMCOM_DMA_IrqHandler+0x2be>
 80012b8:	2310      	movs	r3, #16
 80012ba:	e026      	b.n	800130a <SIMCOM_DMA_IrqHandler+0x2be>
 80012bc:	2000151c 	.word	0x2000151c
 80012c0:	40026458 	.word	0x40026458
 80012c4:	40026010 	.word	0x40026010
 80012c8:	40026410 	.word	0x40026410
 80012cc:	40026070 	.word	0x40026070
 80012d0:	40026470 	.word	0x40026470
 80012d4:	40026028 	.word	0x40026028
 80012d8:	40026428 	.word	0x40026428
 80012dc:	40026088 	.word	0x40026088
 80012e0:	40026488 	.word	0x40026488
 80012e4:	40026040 	.word	0x40026040
 80012e8:	40026440 	.word	0x40026440
 80012ec:	400260a0 	.word	0x400260a0
 80012f0:	400264a0 	.word	0x400264a0
 80012f4:	40026400 	.word	0x40026400
 80012f8:	400260b8 	.word	0x400260b8
 80012fc:	40026058 	.word	0x40026058
 8001300:	2310      	movs	r3, #16
 8001302:	e002      	b.n	800130a <SIMCOM_DMA_IrqHandler+0x2be>
 8001304:	2310      	movs	r3, #16
 8001306:	e000      	b.n	800130a <SIMCOM_DMA_IrqHandler+0x2be>
 8001308:	2310      	movs	r3, #16
 800130a:	4a9b      	ldr	r2, [pc, #620]	; (8001578 <SIMCOM_DMA_IrqHandler+0x52c>)
 800130c:	60d3      	str	r3, [r2, #12]
 800130e:	e05f      	b.n	80013d0 <SIMCOM_DMA_IrqHandler+0x384>
 8001310:	4b9a      	ldr	r3, [pc, #616]	; (800157c <SIMCOM_DMA_IrqHandler+0x530>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a9a      	ldr	r2, [pc, #616]	; (8001580 <SIMCOM_DMA_IrqHandler+0x534>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d057      	beq.n	80013ca <SIMCOM_DMA_IrqHandler+0x37e>
 800131a:	4b98      	ldr	r3, [pc, #608]	; (800157c <SIMCOM_DMA_IrqHandler+0x530>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a99      	ldr	r2, [pc, #612]	; (8001584 <SIMCOM_DMA_IrqHandler+0x538>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d050      	beq.n	80013c6 <SIMCOM_DMA_IrqHandler+0x37a>
 8001324:	4b95      	ldr	r3, [pc, #596]	; (800157c <SIMCOM_DMA_IrqHandler+0x530>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a97      	ldr	r2, [pc, #604]	; (8001588 <SIMCOM_DMA_IrqHandler+0x53c>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d049      	beq.n	80013c2 <SIMCOM_DMA_IrqHandler+0x376>
 800132e:	4b93      	ldr	r3, [pc, #588]	; (800157c <SIMCOM_DMA_IrqHandler+0x530>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a96      	ldr	r2, [pc, #600]	; (800158c <SIMCOM_DMA_IrqHandler+0x540>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d042      	beq.n	80013be <SIMCOM_DMA_IrqHandler+0x372>
 8001338:	4b90      	ldr	r3, [pc, #576]	; (800157c <SIMCOM_DMA_IrqHandler+0x530>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a94      	ldr	r2, [pc, #592]	; (8001590 <SIMCOM_DMA_IrqHandler+0x544>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d03a      	beq.n	80013b8 <SIMCOM_DMA_IrqHandler+0x36c>
 8001342:	4b8e      	ldr	r3, [pc, #568]	; (800157c <SIMCOM_DMA_IrqHandler+0x530>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a93      	ldr	r2, [pc, #588]	; (8001594 <SIMCOM_DMA_IrqHandler+0x548>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d032      	beq.n	80013b2 <SIMCOM_DMA_IrqHandler+0x366>
 800134c:	4b8b      	ldr	r3, [pc, #556]	; (800157c <SIMCOM_DMA_IrqHandler+0x530>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a91      	ldr	r2, [pc, #580]	; (8001598 <SIMCOM_DMA_IrqHandler+0x54c>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d02a      	beq.n	80013ac <SIMCOM_DMA_IrqHandler+0x360>
 8001356:	4b89      	ldr	r3, [pc, #548]	; (800157c <SIMCOM_DMA_IrqHandler+0x530>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a90      	ldr	r2, [pc, #576]	; (800159c <SIMCOM_DMA_IrqHandler+0x550>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d022      	beq.n	80013a6 <SIMCOM_DMA_IrqHandler+0x35a>
 8001360:	4b86      	ldr	r3, [pc, #536]	; (800157c <SIMCOM_DMA_IrqHandler+0x530>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a8e      	ldr	r2, [pc, #568]	; (80015a0 <SIMCOM_DMA_IrqHandler+0x554>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d01a      	beq.n	80013a0 <SIMCOM_DMA_IrqHandler+0x354>
 800136a:	4b84      	ldr	r3, [pc, #528]	; (800157c <SIMCOM_DMA_IrqHandler+0x530>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a8d      	ldr	r2, [pc, #564]	; (80015a4 <SIMCOM_DMA_IrqHandler+0x558>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d012      	beq.n	800139a <SIMCOM_DMA_IrqHandler+0x34e>
 8001374:	4b81      	ldr	r3, [pc, #516]	; (800157c <SIMCOM_DMA_IrqHandler+0x530>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a8b      	ldr	r2, [pc, #556]	; (80015a8 <SIMCOM_DMA_IrqHandler+0x55c>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d00a      	beq.n	8001394 <SIMCOM_DMA_IrqHandler+0x348>
 800137e:	4b7f      	ldr	r3, [pc, #508]	; (800157c <SIMCOM_DMA_IrqHandler+0x530>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a8a      	ldr	r2, [pc, #552]	; (80015ac <SIMCOM_DMA_IrqHandler+0x560>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d102      	bne.n	800138e <SIMCOM_DMA_IrqHandler+0x342>
 8001388:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800138c:	e01e      	b.n	80013cc <SIMCOM_DMA_IrqHandler+0x380>
 800138e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001392:	e01b      	b.n	80013cc <SIMCOM_DMA_IrqHandler+0x380>
 8001394:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001398:	e018      	b.n	80013cc <SIMCOM_DMA_IrqHandler+0x380>
 800139a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800139e:	e015      	b.n	80013cc <SIMCOM_DMA_IrqHandler+0x380>
 80013a0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013a4:	e012      	b.n	80013cc <SIMCOM_DMA_IrqHandler+0x380>
 80013a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013aa:	e00f      	b.n	80013cc <SIMCOM_DMA_IrqHandler+0x380>
 80013ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013b0:	e00c      	b.n	80013cc <SIMCOM_DMA_IrqHandler+0x380>
 80013b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013b6:	e009      	b.n	80013cc <SIMCOM_DMA_IrqHandler+0x380>
 80013b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013bc:	e006      	b.n	80013cc <SIMCOM_DMA_IrqHandler+0x380>
 80013be:	2310      	movs	r3, #16
 80013c0:	e004      	b.n	80013cc <SIMCOM_DMA_IrqHandler+0x380>
 80013c2:	2310      	movs	r3, #16
 80013c4:	e002      	b.n	80013cc <SIMCOM_DMA_IrqHandler+0x380>
 80013c6:	2310      	movs	r3, #16
 80013c8:	e000      	b.n	80013cc <SIMCOM_DMA_IrqHandler+0x380>
 80013ca:	2310      	movs	r3, #16
 80013cc:	4a6a      	ldr	r2, [pc, #424]	; (8001578 <SIMCOM_DMA_IrqHandler+0x52c>)
 80013ce:	6093      	str	r3, [r2, #8]

        SIMCOM_Check_Buffer();
 80013d0:	f000 ff5a 	bl	8002288 <SIMCOM_Check_Buffer>
        __HAL_DMA_CLEAR_FLAG(&hdma_usart1_rx, __HAL_DMA_GET_DME_FLAG_INDEX(&hdma_usart1_rx));

        /* Start DMA transfer */
        HAL_UART_Receive_DMA(&huart1, (uint8_t*) SIMCOM_DMA_RX, SIMCOM_DMA_RX_SZ);
    }
}
 80013d4:	f000 bf0b 	b.w	80021ee <SIMCOM_DMA_IrqHandler+0x11a2>
    else if (__HAL_DMA_GET_IT_SOURCE(&hdma_usart1_rx, DMA_IT_TC)) {
 80013d8:	4b68      	ldr	r3, [pc, #416]	; (800157c <SIMCOM_DMA_IrqHandler+0x530>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0310 	and.w	r3, r3, #16
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f000 81bd 	beq.w	8001762 <SIMCOM_DMA_IrqHandler+0x716>
        __HAL_DMA_CLEAR_FLAG(&hdma_usart1_rx, __HAL_DMA_GET_TC_FLAG_INDEX(&hdma_usart1_rx));
 80013e8:	4b64      	ldr	r3, [pc, #400]	; (800157c <SIMCOM_DMA_IrqHandler+0x530>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b70      	ldr	r3, [pc, #448]	; (80015b0 <SIMCOM_DMA_IrqHandler+0x564>)
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d960      	bls.n	80014b6 <SIMCOM_DMA_IrqHandler+0x46a>
 80013f4:	4b61      	ldr	r3, [pc, #388]	; (800157c <SIMCOM_DMA_IrqHandler+0x530>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a61      	ldr	r2, [pc, #388]	; (8001580 <SIMCOM_DMA_IrqHandler+0x534>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d057      	beq.n	80014ae <SIMCOM_DMA_IrqHandler+0x462>
 80013fe:	4b5f      	ldr	r3, [pc, #380]	; (800157c <SIMCOM_DMA_IrqHandler+0x530>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a60      	ldr	r2, [pc, #384]	; (8001584 <SIMCOM_DMA_IrqHandler+0x538>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d050      	beq.n	80014aa <SIMCOM_DMA_IrqHandler+0x45e>
 8001408:	4b5c      	ldr	r3, [pc, #368]	; (800157c <SIMCOM_DMA_IrqHandler+0x530>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a5e      	ldr	r2, [pc, #376]	; (8001588 <SIMCOM_DMA_IrqHandler+0x53c>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d049      	beq.n	80014a6 <SIMCOM_DMA_IrqHandler+0x45a>
 8001412:	4b5a      	ldr	r3, [pc, #360]	; (800157c <SIMCOM_DMA_IrqHandler+0x530>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a5d      	ldr	r2, [pc, #372]	; (800158c <SIMCOM_DMA_IrqHandler+0x540>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d042      	beq.n	80014a2 <SIMCOM_DMA_IrqHandler+0x456>
 800141c:	4b57      	ldr	r3, [pc, #348]	; (800157c <SIMCOM_DMA_IrqHandler+0x530>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a5b      	ldr	r2, [pc, #364]	; (8001590 <SIMCOM_DMA_IrqHandler+0x544>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d03a      	beq.n	800149c <SIMCOM_DMA_IrqHandler+0x450>
 8001426:	4b55      	ldr	r3, [pc, #340]	; (800157c <SIMCOM_DMA_IrqHandler+0x530>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a5a      	ldr	r2, [pc, #360]	; (8001594 <SIMCOM_DMA_IrqHandler+0x548>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d032      	beq.n	8001496 <SIMCOM_DMA_IrqHandler+0x44a>
 8001430:	4b52      	ldr	r3, [pc, #328]	; (800157c <SIMCOM_DMA_IrqHandler+0x530>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a58      	ldr	r2, [pc, #352]	; (8001598 <SIMCOM_DMA_IrqHandler+0x54c>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d02a      	beq.n	8001490 <SIMCOM_DMA_IrqHandler+0x444>
 800143a:	4b50      	ldr	r3, [pc, #320]	; (800157c <SIMCOM_DMA_IrqHandler+0x530>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a57      	ldr	r2, [pc, #348]	; (800159c <SIMCOM_DMA_IrqHandler+0x550>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d022      	beq.n	800148a <SIMCOM_DMA_IrqHandler+0x43e>
 8001444:	4b4d      	ldr	r3, [pc, #308]	; (800157c <SIMCOM_DMA_IrqHandler+0x530>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a55      	ldr	r2, [pc, #340]	; (80015a0 <SIMCOM_DMA_IrqHandler+0x554>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d01a      	beq.n	8001484 <SIMCOM_DMA_IrqHandler+0x438>
 800144e:	4b4b      	ldr	r3, [pc, #300]	; (800157c <SIMCOM_DMA_IrqHandler+0x530>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a54      	ldr	r2, [pc, #336]	; (80015a4 <SIMCOM_DMA_IrqHandler+0x558>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d012      	beq.n	800147e <SIMCOM_DMA_IrqHandler+0x432>
 8001458:	4b48      	ldr	r3, [pc, #288]	; (800157c <SIMCOM_DMA_IrqHandler+0x530>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a52      	ldr	r2, [pc, #328]	; (80015a8 <SIMCOM_DMA_IrqHandler+0x55c>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d00a      	beq.n	8001478 <SIMCOM_DMA_IrqHandler+0x42c>
 8001462:	4b46      	ldr	r3, [pc, #280]	; (800157c <SIMCOM_DMA_IrqHandler+0x530>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a51      	ldr	r2, [pc, #324]	; (80015ac <SIMCOM_DMA_IrqHandler+0x560>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d102      	bne.n	8001472 <SIMCOM_DMA_IrqHandler+0x426>
 800146c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001470:	e01e      	b.n	80014b0 <SIMCOM_DMA_IrqHandler+0x464>
 8001472:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001476:	e01b      	b.n	80014b0 <SIMCOM_DMA_IrqHandler+0x464>
 8001478:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800147c:	e018      	b.n	80014b0 <SIMCOM_DMA_IrqHandler+0x464>
 800147e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001482:	e015      	b.n	80014b0 <SIMCOM_DMA_IrqHandler+0x464>
 8001484:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001488:	e012      	b.n	80014b0 <SIMCOM_DMA_IrqHandler+0x464>
 800148a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800148e:	e00f      	b.n	80014b0 <SIMCOM_DMA_IrqHandler+0x464>
 8001490:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001494:	e00c      	b.n	80014b0 <SIMCOM_DMA_IrqHandler+0x464>
 8001496:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800149a:	e009      	b.n	80014b0 <SIMCOM_DMA_IrqHandler+0x464>
 800149c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014a0:	e006      	b.n	80014b0 <SIMCOM_DMA_IrqHandler+0x464>
 80014a2:	2320      	movs	r3, #32
 80014a4:	e004      	b.n	80014b0 <SIMCOM_DMA_IrqHandler+0x464>
 80014a6:	2320      	movs	r3, #32
 80014a8:	e002      	b.n	80014b0 <SIMCOM_DMA_IrqHandler+0x464>
 80014aa:	2320      	movs	r3, #32
 80014ac:	e000      	b.n	80014b0 <SIMCOM_DMA_IrqHandler+0x464>
 80014ae:	2320      	movs	r3, #32
 80014b0:	4a40      	ldr	r2, [pc, #256]	; (80015b4 <SIMCOM_DMA_IrqHandler+0x568>)
 80014b2:	60d3      	str	r3, [r2, #12]
 80014b4:	e151      	b.n	800175a <SIMCOM_DMA_IrqHandler+0x70e>
 80014b6:	4b31      	ldr	r3, [pc, #196]	; (800157c <SIMCOM_DMA_IrqHandler+0x530>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	461a      	mov	r2, r3
 80014bc:	4b3e      	ldr	r3, [pc, #248]	; (80015b8 <SIMCOM_DMA_IrqHandler+0x56c>)
 80014be:	429a      	cmp	r2, r3
 80014c0:	f240 8084 	bls.w	80015cc <SIMCOM_DMA_IrqHandler+0x580>
 80014c4:	4b2d      	ldr	r3, [pc, #180]	; (800157c <SIMCOM_DMA_IrqHandler+0x530>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a2d      	ldr	r2, [pc, #180]	; (8001580 <SIMCOM_DMA_IrqHandler+0x534>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d07a      	beq.n	80015c4 <SIMCOM_DMA_IrqHandler+0x578>
 80014ce:	4b2b      	ldr	r3, [pc, #172]	; (800157c <SIMCOM_DMA_IrqHandler+0x530>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a2c      	ldr	r2, [pc, #176]	; (8001584 <SIMCOM_DMA_IrqHandler+0x538>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d073      	beq.n	80015c0 <SIMCOM_DMA_IrqHandler+0x574>
 80014d8:	4b28      	ldr	r3, [pc, #160]	; (800157c <SIMCOM_DMA_IrqHandler+0x530>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a2a      	ldr	r2, [pc, #168]	; (8001588 <SIMCOM_DMA_IrqHandler+0x53c>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d06c      	beq.n	80015bc <SIMCOM_DMA_IrqHandler+0x570>
 80014e2:	4b26      	ldr	r3, [pc, #152]	; (800157c <SIMCOM_DMA_IrqHandler+0x530>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a29      	ldr	r2, [pc, #164]	; (800158c <SIMCOM_DMA_IrqHandler+0x540>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d042      	beq.n	8001572 <SIMCOM_DMA_IrqHandler+0x526>
 80014ec:	4b23      	ldr	r3, [pc, #140]	; (800157c <SIMCOM_DMA_IrqHandler+0x530>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a27      	ldr	r2, [pc, #156]	; (8001590 <SIMCOM_DMA_IrqHandler+0x544>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d03a      	beq.n	800156c <SIMCOM_DMA_IrqHandler+0x520>
 80014f6:	4b21      	ldr	r3, [pc, #132]	; (800157c <SIMCOM_DMA_IrqHandler+0x530>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a26      	ldr	r2, [pc, #152]	; (8001594 <SIMCOM_DMA_IrqHandler+0x548>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d032      	beq.n	8001566 <SIMCOM_DMA_IrqHandler+0x51a>
 8001500:	4b1e      	ldr	r3, [pc, #120]	; (800157c <SIMCOM_DMA_IrqHandler+0x530>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a24      	ldr	r2, [pc, #144]	; (8001598 <SIMCOM_DMA_IrqHandler+0x54c>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d02a      	beq.n	8001560 <SIMCOM_DMA_IrqHandler+0x514>
 800150a:	4b1c      	ldr	r3, [pc, #112]	; (800157c <SIMCOM_DMA_IrqHandler+0x530>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a23      	ldr	r2, [pc, #140]	; (800159c <SIMCOM_DMA_IrqHandler+0x550>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d022      	beq.n	800155a <SIMCOM_DMA_IrqHandler+0x50e>
 8001514:	4b19      	ldr	r3, [pc, #100]	; (800157c <SIMCOM_DMA_IrqHandler+0x530>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a21      	ldr	r2, [pc, #132]	; (80015a0 <SIMCOM_DMA_IrqHandler+0x554>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d01a      	beq.n	8001554 <SIMCOM_DMA_IrqHandler+0x508>
 800151e:	4b17      	ldr	r3, [pc, #92]	; (800157c <SIMCOM_DMA_IrqHandler+0x530>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a20      	ldr	r2, [pc, #128]	; (80015a4 <SIMCOM_DMA_IrqHandler+0x558>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d012      	beq.n	800154e <SIMCOM_DMA_IrqHandler+0x502>
 8001528:	4b14      	ldr	r3, [pc, #80]	; (800157c <SIMCOM_DMA_IrqHandler+0x530>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a1e      	ldr	r2, [pc, #120]	; (80015a8 <SIMCOM_DMA_IrqHandler+0x55c>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d00a      	beq.n	8001548 <SIMCOM_DMA_IrqHandler+0x4fc>
 8001532:	4b12      	ldr	r3, [pc, #72]	; (800157c <SIMCOM_DMA_IrqHandler+0x530>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a1d      	ldr	r2, [pc, #116]	; (80015ac <SIMCOM_DMA_IrqHandler+0x560>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d102      	bne.n	8001542 <SIMCOM_DMA_IrqHandler+0x4f6>
 800153c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001540:	e041      	b.n	80015c6 <SIMCOM_DMA_IrqHandler+0x57a>
 8001542:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001546:	e03e      	b.n	80015c6 <SIMCOM_DMA_IrqHandler+0x57a>
 8001548:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800154c:	e03b      	b.n	80015c6 <SIMCOM_DMA_IrqHandler+0x57a>
 800154e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001552:	e038      	b.n	80015c6 <SIMCOM_DMA_IrqHandler+0x57a>
 8001554:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001558:	e035      	b.n	80015c6 <SIMCOM_DMA_IrqHandler+0x57a>
 800155a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800155e:	e032      	b.n	80015c6 <SIMCOM_DMA_IrqHandler+0x57a>
 8001560:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001564:	e02f      	b.n	80015c6 <SIMCOM_DMA_IrqHandler+0x57a>
 8001566:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800156a:	e02c      	b.n	80015c6 <SIMCOM_DMA_IrqHandler+0x57a>
 800156c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001570:	e029      	b.n	80015c6 <SIMCOM_DMA_IrqHandler+0x57a>
 8001572:	2320      	movs	r3, #32
 8001574:	e027      	b.n	80015c6 <SIMCOM_DMA_IrqHandler+0x57a>
 8001576:	bf00      	nop
 8001578:	40026000 	.word	0x40026000
 800157c:	2000151c 	.word	0x2000151c
 8001580:	40026010 	.word	0x40026010
 8001584:	40026410 	.word	0x40026410
 8001588:	40026070 	.word	0x40026070
 800158c:	40026470 	.word	0x40026470
 8001590:	40026028 	.word	0x40026028
 8001594:	40026428 	.word	0x40026428
 8001598:	40026088 	.word	0x40026088
 800159c:	40026488 	.word	0x40026488
 80015a0:	40026040 	.word	0x40026040
 80015a4:	40026440 	.word	0x40026440
 80015a8:	400260a0 	.word	0x400260a0
 80015ac:	400264a0 	.word	0x400264a0
 80015b0:	40026458 	.word	0x40026458
 80015b4:	40026400 	.word	0x40026400
 80015b8:	400260b8 	.word	0x400260b8
 80015bc:	2320      	movs	r3, #32
 80015be:	e002      	b.n	80015c6 <SIMCOM_DMA_IrqHandler+0x57a>
 80015c0:	2320      	movs	r3, #32
 80015c2:	e000      	b.n	80015c6 <SIMCOM_DMA_IrqHandler+0x57a>
 80015c4:	2320      	movs	r3, #32
 80015c6:	4a9b      	ldr	r2, [pc, #620]	; (8001834 <SIMCOM_DMA_IrqHandler+0x7e8>)
 80015c8:	6093      	str	r3, [r2, #8]
 80015ca:	e0c6      	b.n	800175a <SIMCOM_DMA_IrqHandler+0x70e>
 80015cc:	4b9a      	ldr	r3, [pc, #616]	; (8001838 <SIMCOM_DMA_IrqHandler+0x7ec>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	461a      	mov	r2, r3
 80015d2:	4b9a      	ldr	r3, [pc, #616]	; (800183c <SIMCOM_DMA_IrqHandler+0x7f0>)
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d960      	bls.n	800169a <SIMCOM_DMA_IrqHandler+0x64e>
 80015d8:	4b97      	ldr	r3, [pc, #604]	; (8001838 <SIMCOM_DMA_IrqHandler+0x7ec>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a98      	ldr	r2, [pc, #608]	; (8001840 <SIMCOM_DMA_IrqHandler+0x7f4>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d057      	beq.n	8001692 <SIMCOM_DMA_IrqHandler+0x646>
 80015e2:	4b95      	ldr	r3, [pc, #596]	; (8001838 <SIMCOM_DMA_IrqHandler+0x7ec>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a97      	ldr	r2, [pc, #604]	; (8001844 <SIMCOM_DMA_IrqHandler+0x7f8>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d050      	beq.n	800168e <SIMCOM_DMA_IrqHandler+0x642>
 80015ec:	4b92      	ldr	r3, [pc, #584]	; (8001838 <SIMCOM_DMA_IrqHandler+0x7ec>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a95      	ldr	r2, [pc, #596]	; (8001848 <SIMCOM_DMA_IrqHandler+0x7fc>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d049      	beq.n	800168a <SIMCOM_DMA_IrqHandler+0x63e>
 80015f6:	4b90      	ldr	r3, [pc, #576]	; (8001838 <SIMCOM_DMA_IrqHandler+0x7ec>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a94      	ldr	r2, [pc, #592]	; (800184c <SIMCOM_DMA_IrqHandler+0x800>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d042      	beq.n	8001686 <SIMCOM_DMA_IrqHandler+0x63a>
 8001600:	4b8d      	ldr	r3, [pc, #564]	; (8001838 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a92      	ldr	r2, [pc, #584]	; (8001850 <SIMCOM_DMA_IrqHandler+0x804>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d03a      	beq.n	8001680 <SIMCOM_DMA_IrqHandler+0x634>
 800160a:	4b8b      	ldr	r3, [pc, #556]	; (8001838 <SIMCOM_DMA_IrqHandler+0x7ec>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a91      	ldr	r2, [pc, #580]	; (8001854 <SIMCOM_DMA_IrqHandler+0x808>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d032      	beq.n	800167a <SIMCOM_DMA_IrqHandler+0x62e>
 8001614:	4b88      	ldr	r3, [pc, #544]	; (8001838 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a8f      	ldr	r2, [pc, #572]	; (8001858 <SIMCOM_DMA_IrqHandler+0x80c>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d02a      	beq.n	8001674 <SIMCOM_DMA_IrqHandler+0x628>
 800161e:	4b86      	ldr	r3, [pc, #536]	; (8001838 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a8e      	ldr	r2, [pc, #568]	; (800185c <SIMCOM_DMA_IrqHandler+0x810>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d022      	beq.n	800166e <SIMCOM_DMA_IrqHandler+0x622>
 8001628:	4b83      	ldr	r3, [pc, #524]	; (8001838 <SIMCOM_DMA_IrqHandler+0x7ec>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a8c      	ldr	r2, [pc, #560]	; (8001860 <SIMCOM_DMA_IrqHandler+0x814>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d01a      	beq.n	8001668 <SIMCOM_DMA_IrqHandler+0x61c>
 8001632:	4b81      	ldr	r3, [pc, #516]	; (8001838 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a8b      	ldr	r2, [pc, #556]	; (8001864 <SIMCOM_DMA_IrqHandler+0x818>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d012      	beq.n	8001662 <SIMCOM_DMA_IrqHandler+0x616>
 800163c:	4b7e      	ldr	r3, [pc, #504]	; (8001838 <SIMCOM_DMA_IrqHandler+0x7ec>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a89      	ldr	r2, [pc, #548]	; (8001868 <SIMCOM_DMA_IrqHandler+0x81c>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d00a      	beq.n	800165c <SIMCOM_DMA_IrqHandler+0x610>
 8001646:	4b7c      	ldr	r3, [pc, #496]	; (8001838 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a88      	ldr	r2, [pc, #544]	; (800186c <SIMCOM_DMA_IrqHandler+0x820>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d102      	bne.n	8001656 <SIMCOM_DMA_IrqHandler+0x60a>
 8001650:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001654:	e01e      	b.n	8001694 <SIMCOM_DMA_IrqHandler+0x648>
 8001656:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800165a:	e01b      	b.n	8001694 <SIMCOM_DMA_IrqHandler+0x648>
 800165c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001660:	e018      	b.n	8001694 <SIMCOM_DMA_IrqHandler+0x648>
 8001662:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001666:	e015      	b.n	8001694 <SIMCOM_DMA_IrqHandler+0x648>
 8001668:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800166c:	e012      	b.n	8001694 <SIMCOM_DMA_IrqHandler+0x648>
 800166e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001672:	e00f      	b.n	8001694 <SIMCOM_DMA_IrqHandler+0x648>
 8001674:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001678:	e00c      	b.n	8001694 <SIMCOM_DMA_IrqHandler+0x648>
 800167a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800167e:	e009      	b.n	8001694 <SIMCOM_DMA_IrqHandler+0x648>
 8001680:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001684:	e006      	b.n	8001694 <SIMCOM_DMA_IrqHandler+0x648>
 8001686:	2320      	movs	r3, #32
 8001688:	e004      	b.n	8001694 <SIMCOM_DMA_IrqHandler+0x648>
 800168a:	2320      	movs	r3, #32
 800168c:	e002      	b.n	8001694 <SIMCOM_DMA_IrqHandler+0x648>
 800168e:	2320      	movs	r3, #32
 8001690:	e000      	b.n	8001694 <SIMCOM_DMA_IrqHandler+0x648>
 8001692:	2320      	movs	r3, #32
 8001694:	4a76      	ldr	r2, [pc, #472]	; (8001870 <SIMCOM_DMA_IrqHandler+0x824>)
 8001696:	60d3      	str	r3, [r2, #12]
 8001698:	e05f      	b.n	800175a <SIMCOM_DMA_IrqHandler+0x70e>
 800169a:	4b67      	ldr	r3, [pc, #412]	; (8001838 <SIMCOM_DMA_IrqHandler+0x7ec>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a68      	ldr	r2, [pc, #416]	; (8001840 <SIMCOM_DMA_IrqHandler+0x7f4>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d057      	beq.n	8001754 <SIMCOM_DMA_IrqHandler+0x708>
 80016a4:	4b64      	ldr	r3, [pc, #400]	; (8001838 <SIMCOM_DMA_IrqHandler+0x7ec>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a66      	ldr	r2, [pc, #408]	; (8001844 <SIMCOM_DMA_IrqHandler+0x7f8>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d050      	beq.n	8001750 <SIMCOM_DMA_IrqHandler+0x704>
 80016ae:	4b62      	ldr	r3, [pc, #392]	; (8001838 <SIMCOM_DMA_IrqHandler+0x7ec>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a65      	ldr	r2, [pc, #404]	; (8001848 <SIMCOM_DMA_IrqHandler+0x7fc>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d049      	beq.n	800174c <SIMCOM_DMA_IrqHandler+0x700>
 80016b8:	4b5f      	ldr	r3, [pc, #380]	; (8001838 <SIMCOM_DMA_IrqHandler+0x7ec>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a63      	ldr	r2, [pc, #396]	; (800184c <SIMCOM_DMA_IrqHandler+0x800>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d042      	beq.n	8001748 <SIMCOM_DMA_IrqHandler+0x6fc>
 80016c2:	4b5d      	ldr	r3, [pc, #372]	; (8001838 <SIMCOM_DMA_IrqHandler+0x7ec>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a62      	ldr	r2, [pc, #392]	; (8001850 <SIMCOM_DMA_IrqHandler+0x804>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d03a      	beq.n	8001742 <SIMCOM_DMA_IrqHandler+0x6f6>
 80016cc:	4b5a      	ldr	r3, [pc, #360]	; (8001838 <SIMCOM_DMA_IrqHandler+0x7ec>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a60      	ldr	r2, [pc, #384]	; (8001854 <SIMCOM_DMA_IrqHandler+0x808>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d032      	beq.n	800173c <SIMCOM_DMA_IrqHandler+0x6f0>
 80016d6:	4b58      	ldr	r3, [pc, #352]	; (8001838 <SIMCOM_DMA_IrqHandler+0x7ec>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a5f      	ldr	r2, [pc, #380]	; (8001858 <SIMCOM_DMA_IrqHandler+0x80c>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d02a      	beq.n	8001736 <SIMCOM_DMA_IrqHandler+0x6ea>
 80016e0:	4b55      	ldr	r3, [pc, #340]	; (8001838 <SIMCOM_DMA_IrqHandler+0x7ec>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a5d      	ldr	r2, [pc, #372]	; (800185c <SIMCOM_DMA_IrqHandler+0x810>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d022      	beq.n	8001730 <SIMCOM_DMA_IrqHandler+0x6e4>
 80016ea:	4b53      	ldr	r3, [pc, #332]	; (8001838 <SIMCOM_DMA_IrqHandler+0x7ec>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a5c      	ldr	r2, [pc, #368]	; (8001860 <SIMCOM_DMA_IrqHandler+0x814>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d01a      	beq.n	800172a <SIMCOM_DMA_IrqHandler+0x6de>
 80016f4:	4b50      	ldr	r3, [pc, #320]	; (8001838 <SIMCOM_DMA_IrqHandler+0x7ec>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a5a      	ldr	r2, [pc, #360]	; (8001864 <SIMCOM_DMA_IrqHandler+0x818>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d012      	beq.n	8001724 <SIMCOM_DMA_IrqHandler+0x6d8>
 80016fe:	4b4e      	ldr	r3, [pc, #312]	; (8001838 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a59      	ldr	r2, [pc, #356]	; (8001868 <SIMCOM_DMA_IrqHandler+0x81c>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d00a      	beq.n	800171e <SIMCOM_DMA_IrqHandler+0x6d2>
 8001708:	4b4b      	ldr	r3, [pc, #300]	; (8001838 <SIMCOM_DMA_IrqHandler+0x7ec>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a57      	ldr	r2, [pc, #348]	; (800186c <SIMCOM_DMA_IrqHandler+0x820>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d102      	bne.n	8001718 <SIMCOM_DMA_IrqHandler+0x6cc>
 8001712:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001716:	e01e      	b.n	8001756 <SIMCOM_DMA_IrqHandler+0x70a>
 8001718:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800171c:	e01b      	b.n	8001756 <SIMCOM_DMA_IrqHandler+0x70a>
 800171e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001722:	e018      	b.n	8001756 <SIMCOM_DMA_IrqHandler+0x70a>
 8001724:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001728:	e015      	b.n	8001756 <SIMCOM_DMA_IrqHandler+0x70a>
 800172a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800172e:	e012      	b.n	8001756 <SIMCOM_DMA_IrqHandler+0x70a>
 8001730:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001734:	e00f      	b.n	8001756 <SIMCOM_DMA_IrqHandler+0x70a>
 8001736:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800173a:	e00c      	b.n	8001756 <SIMCOM_DMA_IrqHandler+0x70a>
 800173c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001740:	e009      	b.n	8001756 <SIMCOM_DMA_IrqHandler+0x70a>
 8001742:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001746:	e006      	b.n	8001756 <SIMCOM_DMA_IrqHandler+0x70a>
 8001748:	2320      	movs	r3, #32
 800174a:	e004      	b.n	8001756 <SIMCOM_DMA_IrqHandler+0x70a>
 800174c:	2320      	movs	r3, #32
 800174e:	e002      	b.n	8001756 <SIMCOM_DMA_IrqHandler+0x70a>
 8001750:	2320      	movs	r3, #32
 8001752:	e000      	b.n	8001756 <SIMCOM_DMA_IrqHandler+0x70a>
 8001754:	2320      	movs	r3, #32
 8001756:	4a46      	ldr	r2, [pc, #280]	; (8001870 <SIMCOM_DMA_IrqHandler+0x824>)
 8001758:	6093      	str	r3, [r2, #8]
        SIMCOM_Check_Buffer();
 800175a:	f000 fd95 	bl	8002288 <SIMCOM_Check_Buffer>
}
 800175e:	f000 bd46 	b.w	80021ee <SIMCOM_DMA_IrqHandler+0x11a2>
        __HAL_DMA_CLEAR_FLAG(&hdma_usart1_rx, __HAL_DMA_GET_TE_FLAG_INDEX(&hdma_usart1_rx));
 8001762:	4b35      	ldr	r3, [pc, #212]	; (8001838 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	461a      	mov	r2, r3
 8001768:	4b42      	ldr	r3, [pc, #264]	; (8001874 <SIMCOM_DMA_IrqHandler+0x828>)
 800176a:	429a      	cmp	r2, r3
 800176c:	f240 8084 	bls.w	8001878 <SIMCOM_DMA_IrqHandler+0x82c>
 8001770:	4b31      	ldr	r3, [pc, #196]	; (8001838 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a32      	ldr	r2, [pc, #200]	; (8001840 <SIMCOM_DMA_IrqHandler+0x7f4>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d057      	beq.n	800182a <SIMCOM_DMA_IrqHandler+0x7de>
 800177a:	4b2f      	ldr	r3, [pc, #188]	; (8001838 <SIMCOM_DMA_IrqHandler+0x7ec>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a31      	ldr	r2, [pc, #196]	; (8001844 <SIMCOM_DMA_IrqHandler+0x7f8>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d050      	beq.n	8001826 <SIMCOM_DMA_IrqHandler+0x7da>
 8001784:	4b2c      	ldr	r3, [pc, #176]	; (8001838 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a2f      	ldr	r2, [pc, #188]	; (8001848 <SIMCOM_DMA_IrqHandler+0x7fc>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d049      	beq.n	8001822 <SIMCOM_DMA_IrqHandler+0x7d6>
 800178e:	4b2a      	ldr	r3, [pc, #168]	; (8001838 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a2e      	ldr	r2, [pc, #184]	; (800184c <SIMCOM_DMA_IrqHandler+0x800>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d042      	beq.n	800181e <SIMCOM_DMA_IrqHandler+0x7d2>
 8001798:	4b27      	ldr	r3, [pc, #156]	; (8001838 <SIMCOM_DMA_IrqHandler+0x7ec>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a2c      	ldr	r2, [pc, #176]	; (8001850 <SIMCOM_DMA_IrqHandler+0x804>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d03a      	beq.n	8001818 <SIMCOM_DMA_IrqHandler+0x7cc>
 80017a2:	4b25      	ldr	r3, [pc, #148]	; (8001838 <SIMCOM_DMA_IrqHandler+0x7ec>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a2b      	ldr	r2, [pc, #172]	; (8001854 <SIMCOM_DMA_IrqHandler+0x808>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d032      	beq.n	8001812 <SIMCOM_DMA_IrqHandler+0x7c6>
 80017ac:	4b22      	ldr	r3, [pc, #136]	; (8001838 <SIMCOM_DMA_IrqHandler+0x7ec>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a29      	ldr	r2, [pc, #164]	; (8001858 <SIMCOM_DMA_IrqHandler+0x80c>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d02a      	beq.n	800180c <SIMCOM_DMA_IrqHandler+0x7c0>
 80017b6:	4b20      	ldr	r3, [pc, #128]	; (8001838 <SIMCOM_DMA_IrqHandler+0x7ec>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a28      	ldr	r2, [pc, #160]	; (800185c <SIMCOM_DMA_IrqHandler+0x810>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d022      	beq.n	8001806 <SIMCOM_DMA_IrqHandler+0x7ba>
 80017c0:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <SIMCOM_DMA_IrqHandler+0x7ec>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a26      	ldr	r2, [pc, #152]	; (8001860 <SIMCOM_DMA_IrqHandler+0x814>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d01a      	beq.n	8001800 <SIMCOM_DMA_IrqHandler+0x7b4>
 80017ca:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <SIMCOM_DMA_IrqHandler+0x7ec>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a25      	ldr	r2, [pc, #148]	; (8001864 <SIMCOM_DMA_IrqHandler+0x818>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d012      	beq.n	80017fa <SIMCOM_DMA_IrqHandler+0x7ae>
 80017d4:	4b18      	ldr	r3, [pc, #96]	; (8001838 <SIMCOM_DMA_IrqHandler+0x7ec>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a23      	ldr	r2, [pc, #140]	; (8001868 <SIMCOM_DMA_IrqHandler+0x81c>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d00a      	beq.n	80017f4 <SIMCOM_DMA_IrqHandler+0x7a8>
 80017de:	4b16      	ldr	r3, [pc, #88]	; (8001838 <SIMCOM_DMA_IrqHandler+0x7ec>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a22      	ldr	r2, [pc, #136]	; (800186c <SIMCOM_DMA_IrqHandler+0x820>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d102      	bne.n	80017ee <SIMCOM_DMA_IrqHandler+0x7a2>
 80017e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80017ec:	e01e      	b.n	800182c <SIMCOM_DMA_IrqHandler+0x7e0>
 80017ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017f2:	e01b      	b.n	800182c <SIMCOM_DMA_IrqHandler+0x7e0>
 80017f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80017f8:	e018      	b.n	800182c <SIMCOM_DMA_IrqHandler+0x7e0>
 80017fa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80017fe:	e015      	b.n	800182c <SIMCOM_DMA_IrqHandler+0x7e0>
 8001800:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001804:	e012      	b.n	800182c <SIMCOM_DMA_IrqHandler+0x7e0>
 8001806:	f44f 7300 	mov.w	r3, #512	; 0x200
 800180a:	e00f      	b.n	800182c <SIMCOM_DMA_IrqHandler+0x7e0>
 800180c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001810:	e00c      	b.n	800182c <SIMCOM_DMA_IrqHandler+0x7e0>
 8001812:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001816:	e009      	b.n	800182c <SIMCOM_DMA_IrqHandler+0x7e0>
 8001818:	f44f 7300 	mov.w	r3, #512	; 0x200
 800181c:	e006      	b.n	800182c <SIMCOM_DMA_IrqHandler+0x7e0>
 800181e:	2308      	movs	r3, #8
 8001820:	e004      	b.n	800182c <SIMCOM_DMA_IrqHandler+0x7e0>
 8001822:	2308      	movs	r3, #8
 8001824:	e002      	b.n	800182c <SIMCOM_DMA_IrqHandler+0x7e0>
 8001826:	2308      	movs	r3, #8
 8001828:	e000      	b.n	800182c <SIMCOM_DMA_IrqHandler+0x7e0>
 800182a:	2308      	movs	r3, #8
 800182c:	4a01      	ldr	r2, [pc, #4]	; (8001834 <SIMCOM_DMA_IrqHandler+0x7e8>)
 800182e:	60d3      	str	r3, [r2, #12]
 8001830:	e173      	b.n	8001b1a <SIMCOM_DMA_IrqHandler+0xace>
 8001832:	bf00      	nop
 8001834:	40026400 	.word	0x40026400
 8001838:	2000151c 	.word	0x2000151c
 800183c:	40026058 	.word	0x40026058
 8001840:	40026010 	.word	0x40026010
 8001844:	40026410 	.word	0x40026410
 8001848:	40026070 	.word	0x40026070
 800184c:	40026470 	.word	0x40026470
 8001850:	40026028 	.word	0x40026028
 8001854:	40026428 	.word	0x40026428
 8001858:	40026088 	.word	0x40026088
 800185c:	40026488 	.word	0x40026488
 8001860:	40026040 	.word	0x40026040
 8001864:	40026440 	.word	0x40026440
 8001868:	400260a0 	.word	0x400260a0
 800186c:	400264a0 	.word	0x400264a0
 8001870:	40026000 	.word	0x40026000
 8001874:	40026458 	.word	0x40026458
 8001878:	4b95      	ldr	r3, [pc, #596]	; (8001ad0 <SIMCOM_DMA_IrqHandler+0xa84>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	461a      	mov	r2, r3
 800187e:	4b95      	ldr	r3, [pc, #596]	; (8001ad4 <SIMCOM_DMA_IrqHandler+0xa88>)
 8001880:	429a      	cmp	r2, r3
 8001882:	d960      	bls.n	8001946 <SIMCOM_DMA_IrqHandler+0x8fa>
 8001884:	4b92      	ldr	r3, [pc, #584]	; (8001ad0 <SIMCOM_DMA_IrqHandler+0xa84>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a93      	ldr	r2, [pc, #588]	; (8001ad8 <SIMCOM_DMA_IrqHandler+0xa8c>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d057      	beq.n	800193e <SIMCOM_DMA_IrqHandler+0x8f2>
 800188e:	4b90      	ldr	r3, [pc, #576]	; (8001ad0 <SIMCOM_DMA_IrqHandler+0xa84>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a92      	ldr	r2, [pc, #584]	; (8001adc <SIMCOM_DMA_IrqHandler+0xa90>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d050      	beq.n	800193a <SIMCOM_DMA_IrqHandler+0x8ee>
 8001898:	4b8d      	ldr	r3, [pc, #564]	; (8001ad0 <SIMCOM_DMA_IrqHandler+0xa84>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a90      	ldr	r2, [pc, #576]	; (8001ae0 <SIMCOM_DMA_IrqHandler+0xa94>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d049      	beq.n	8001936 <SIMCOM_DMA_IrqHandler+0x8ea>
 80018a2:	4b8b      	ldr	r3, [pc, #556]	; (8001ad0 <SIMCOM_DMA_IrqHandler+0xa84>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a8f      	ldr	r2, [pc, #572]	; (8001ae4 <SIMCOM_DMA_IrqHandler+0xa98>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d042      	beq.n	8001932 <SIMCOM_DMA_IrqHandler+0x8e6>
 80018ac:	4b88      	ldr	r3, [pc, #544]	; (8001ad0 <SIMCOM_DMA_IrqHandler+0xa84>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a8d      	ldr	r2, [pc, #564]	; (8001ae8 <SIMCOM_DMA_IrqHandler+0xa9c>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d03a      	beq.n	800192c <SIMCOM_DMA_IrqHandler+0x8e0>
 80018b6:	4b86      	ldr	r3, [pc, #536]	; (8001ad0 <SIMCOM_DMA_IrqHandler+0xa84>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a8c      	ldr	r2, [pc, #560]	; (8001aec <SIMCOM_DMA_IrqHandler+0xaa0>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d032      	beq.n	8001926 <SIMCOM_DMA_IrqHandler+0x8da>
 80018c0:	4b83      	ldr	r3, [pc, #524]	; (8001ad0 <SIMCOM_DMA_IrqHandler+0xa84>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a8a      	ldr	r2, [pc, #552]	; (8001af0 <SIMCOM_DMA_IrqHandler+0xaa4>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d02a      	beq.n	8001920 <SIMCOM_DMA_IrqHandler+0x8d4>
 80018ca:	4b81      	ldr	r3, [pc, #516]	; (8001ad0 <SIMCOM_DMA_IrqHandler+0xa84>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a89      	ldr	r2, [pc, #548]	; (8001af4 <SIMCOM_DMA_IrqHandler+0xaa8>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d022      	beq.n	800191a <SIMCOM_DMA_IrqHandler+0x8ce>
 80018d4:	4b7e      	ldr	r3, [pc, #504]	; (8001ad0 <SIMCOM_DMA_IrqHandler+0xa84>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a87      	ldr	r2, [pc, #540]	; (8001af8 <SIMCOM_DMA_IrqHandler+0xaac>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d01a      	beq.n	8001914 <SIMCOM_DMA_IrqHandler+0x8c8>
 80018de:	4b7c      	ldr	r3, [pc, #496]	; (8001ad0 <SIMCOM_DMA_IrqHandler+0xa84>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a86      	ldr	r2, [pc, #536]	; (8001afc <SIMCOM_DMA_IrqHandler+0xab0>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d012      	beq.n	800190e <SIMCOM_DMA_IrqHandler+0x8c2>
 80018e8:	4b79      	ldr	r3, [pc, #484]	; (8001ad0 <SIMCOM_DMA_IrqHandler+0xa84>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a84      	ldr	r2, [pc, #528]	; (8001b00 <SIMCOM_DMA_IrqHandler+0xab4>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d00a      	beq.n	8001908 <SIMCOM_DMA_IrqHandler+0x8bc>
 80018f2:	4b77      	ldr	r3, [pc, #476]	; (8001ad0 <SIMCOM_DMA_IrqHandler+0xa84>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a83      	ldr	r2, [pc, #524]	; (8001b04 <SIMCOM_DMA_IrqHandler+0xab8>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d102      	bne.n	8001902 <SIMCOM_DMA_IrqHandler+0x8b6>
 80018fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001900:	e01e      	b.n	8001940 <SIMCOM_DMA_IrqHandler+0x8f4>
 8001902:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001906:	e01b      	b.n	8001940 <SIMCOM_DMA_IrqHandler+0x8f4>
 8001908:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800190c:	e018      	b.n	8001940 <SIMCOM_DMA_IrqHandler+0x8f4>
 800190e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001912:	e015      	b.n	8001940 <SIMCOM_DMA_IrqHandler+0x8f4>
 8001914:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001918:	e012      	b.n	8001940 <SIMCOM_DMA_IrqHandler+0x8f4>
 800191a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800191e:	e00f      	b.n	8001940 <SIMCOM_DMA_IrqHandler+0x8f4>
 8001920:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001924:	e00c      	b.n	8001940 <SIMCOM_DMA_IrqHandler+0x8f4>
 8001926:	f44f 7300 	mov.w	r3, #512	; 0x200
 800192a:	e009      	b.n	8001940 <SIMCOM_DMA_IrqHandler+0x8f4>
 800192c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001930:	e006      	b.n	8001940 <SIMCOM_DMA_IrqHandler+0x8f4>
 8001932:	2308      	movs	r3, #8
 8001934:	e004      	b.n	8001940 <SIMCOM_DMA_IrqHandler+0x8f4>
 8001936:	2308      	movs	r3, #8
 8001938:	e002      	b.n	8001940 <SIMCOM_DMA_IrqHandler+0x8f4>
 800193a:	2308      	movs	r3, #8
 800193c:	e000      	b.n	8001940 <SIMCOM_DMA_IrqHandler+0x8f4>
 800193e:	2308      	movs	r3, #8
 8001940:	4a71      	ldr	r2, [pc, #452]	; (8001b08 <SIMCOM_DMA_IrqHandler+0xabc>)
 8001942:	6093      	str	r3, [r2, #8]
 8001944:	e0e9      	b.n	8001b1a <SIMCOM_DMA_IrqHandler+0xace>
 8001946:	4b62      	ldr	r3, [pc, #392]	; (8001ad0 <SIMCOM_DMA_IrqHandler+0xa84>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	461a      	mov	r2, r3
 800194c:	4b6f      	ldr	r3, [pc, #444]	; (8001b0c <SIMCOM_DMA_IrqHandler+0xac0>)
 800194e:	429a      	cmp	r2, r3
 8001950:	d960      	bls.n	8001a14 <SIMCOM_DMA_IrqHandler+0x9c8>
 8001952:	4b5f      	ldr	r3, [pc, #380]	; (8001ad0 <SIMCOM_DMA_IrqHandler+0xa84>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a60      	ldr	r2, [pc, #384]	; (8001ad8 <SIMCOM_DMA_IrqHandler+0xa8c>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d057      	beq.n	8001a0c <SIMCOM_DMA_IrqHandler+0x9c0>
 800195c:	4b5c      	ldr	r3, [pc, #368]	; (8001ad0 <SIMCOM_DMA_IrqHandler+0xa84>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a5e      	ldr	r2, [pc, #376]	; (8001adc <SIMCOM_DMA_IrqHandler+0xa90>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d050      	beq.n	8001a08 <SIMCOM_DMA_IrqHandler+0x9bc>
 8001966:	4b5a      	ldr	r3, [pc, #360]	; (8001ad0 <SIMCOM_DMA_IrqHandler+0xa84>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a5d      	ldr	r2, [pc, #372]	; (8001ae0 <SIMCOM_DMA_IrqHandler+0xa94>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d049      	beq.n	8001a04 <SIMCOM_DMA_IrqHandler+0x9b8>
 8001970:	4b57      	ldr	r3, [pc, #348]	; (8001ad0 <SIMCOM_DMA_IrqHandler+0xa84>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a5b      	ldr	r2, [pc, #364]	; (8001ae4 <SIMCOM_DMA_IrqHandler+0xa98>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d042      	beq.n	8001a00 <SIMCOM_DMA_IrqHandler+0x9b4>
 800197a:	4b55      	ldr	r3, [pc, #340]	; (8001ad0 <SIMCOM_DMA_IrqHandler+0xa84>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a5a      	ldr	r2, [pc, #360]	; (8001ae8 <SIMCOM_DMA_IrqHandler+0xa9c>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d03a      	beq.n	80019fa <SIMCOM_DMA_IrqHandler+0x9ae>
 8001984:	4b52      	ldr	r3, [pc, #328]	; (8001ad0 <SIMCOM_DMA_IrqHandler+0xa84>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a58      	ldr	r2, [pc, #352]	; (8001aec <SIMCOM_DMA_IrqHandler+0xaa0>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d032      	beq.n	80019f4 <SIMCOM_DMA_IrqHandler+0x9a8>
 800198e:	4b50      	ldr	r3, [pc, #320]	; (8001ad0 <SIMCOM_DMA_IrqHandler+0xa84>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a57      	ldr	r2, [pc, #348]	; (8001af0 <SIMCOM_DMA_IrqHandler+0xaa4>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d02a      	beq.n	80019ee <SIMCOM_DMA_IrqHandler+0x9a2>
 8001998:	4b4d      	ldr	r3, [pc, #308]	; (8001ad0 <SIMCOM_DMA_IrqHandler+0xa84>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a55      	ldr	r2, [pc, #340]	; (8001af4 <SIMCOM_DMA_IrqHandler+0xaa8>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d022      	beq.n	80019e8 <SIMCOM_DMA_IrqHandler+0x99c>
 80019a2:	4b4b      	ldr	r3, [pc, #300]	; (8001ad0 <SIMCOM_DMA_IrqHandler+0xa84>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a54      	ldr	r2, [pc, #336]	; (8001af8 <SIMCOM_DMA_IrqHandler+0xaac>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d01a      	beq.n	80019e2 <SIMCOM_DMA_IrqHandler+0x996>
 80019ac:	4b48      	ldr	r3, [pc, #288]	; (8001ad0 <SIMCOM_DMA_IrqHandler+0xa84>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a52      	ldr	r2, [pc, #328]	; (8001afc <SIMCOM_DMA_IrqHandler+0xab0>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d012      	beq.n	80019dc <SIMCOM_DMA_IrqHandler+0x990>
 80019b6:	4b46      	ldr	r3, [pc, #280]	; (8001ad0 <SIMCOM_DMA_IrqHandler+0xa84>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a51      	ldr	r2, [pc, #324]	; (8001b00 <SIMCOM_DMA_IrqHandler+0xab4>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d00a      	beq.n	80019d6 <SIMCOM_DMA_IrqHandler+0x98a>
 80019c0:	4b43      	ldr	r3, [pc, #268]	; (8001ad0 <SIMCOM_DMA_IrqHandler+0xa84>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a4f      	ldr	r2, [pc, #316]	; (8001b04 <SIMCOM_DMA_IrqHandler+0xab8>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d102      	bne.n	80019d0 <SIMCOM_DMA_IrqHandler+0x984>
 80019ca:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80019ce:	e01e      	b.n	8001a0e <SIMCOM_DMA_IrqHandler+0x9c2>
 80019d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019d4:	e01b      	b.n	8001a0e <SIMCOM_DMA_IrqHandler+0x9c2>
 80019d6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80019da:	e018      	b.n	8001a0e <SIMCOM_DMA_IrqHandler+0x9c2>
 80019dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80019e0:	e015      	b.n	8001a0e <SIMCOM_DMA_IrqHandler+0x9c2>
 80019e2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80019e6:	e012      	b.n	8001a0e <SIMCOM_DMA_IrqHandler+0x9c2>
 80019e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019ec:	e00f      	b.n	8001a0e <SIMCOM_DMA_IrqHandler+0x9c2>
 80019ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019f2:	e00c      	b.n	8001a0e <SIMCOM_DMA_IrqHandler+0x9c2>
 80019f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019f8:	e009      	b.n	8001a0e <SIMCOM_DMA_IrqHandler+0x9c2>
 80019fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019fe:	e006      	b.n	8001a0e <SIMCOM_DMA_IrqHandler+0x9c2>
 8001a00:	2308      	movs	r3, #8
 8001a02:	e004      	b.n	8001a0e <SIMCOM_DMA_IrqHandler+0x9c2>
 8001a04:	2308      	movs	r3, #8
 8001a06:	e002      	b.n	8001a0e <SIMCOM_DMA_IrqHandler+0x9c2>
 8001a08:	2308      	movs	r3, #8
 8001a0a:	e000      	b.n	8001a0e <SIMCOM_DMA_IrqHandler+0x9c2>
 8001a0c:	2308      	movs	r3, #8
 8001a0e:	4a40      	ldr	r2, [pc, #256]	; (8001b10 <SIMCOM_DMA_IrqHandler+0xac4>)
 8001a10:	60d3      	str	r3, [r2, #12]
 8001a12:	e082      	b.n	8001b1a <SIMCOM_DMA_IrqHandler+0xace>
 8001a14:	4b2e      	ldr	r3, [pc, #184]	; (8001ad0 <SIMCOM_DMA_IrqHandler+0xa84>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a2f      	ldr	r2, [pc, #188]	; (8001ad8 <SIMCOM_DMA_IrqHandler+0xa8c>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d07a      	beq.n	8001b14 <SIMCOM_DMA_IrqHandler+0xac8>
 8001a1e:	4b2c      	ldr	r3, [pc, #176]	; (8001ad0 <SIMCOM_DMA_IrqHandler+0xa84>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a2e      	ldr	r2, [pc, #184]	; (8001adc <SIMCOM_DMA_IrqHandler+0xa90>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d050      	beq.n	8001aca <SIMCOM_DMA_IrqHandler+0xa7e>
 8001a28:	4b29      	ldr	r3, [pc, #164]	; (8001ad0 <SIMCOM_DMA_IrqHandler+0xa84>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a2c      	ldr	r2, [pc, #176]	; (8001ae0 <SIMCOM_DMA_IrqHandler+0xa94>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d049      	beq.n	8001ac6 <SIMCOM_DMA_IrqHandler+0xa7a>
 8001a32:	4b27      	ldr	r3, [pc, #156]	; (8001ad0 <SIMCOM_DMA_IrqHandler+0xa84>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a2b      	ldr	r2, [pc, #172]	; (8001ae4 <SIMCOM_DMA_IrqHandler+0xa98>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d042      	beq.n	8001ac2 <SIMCOM_DMA_IrqHandler+0xa76>
 8001a3c:	4b24      	ldr	r3, [pc, #144]	; (8001ad0 <SIMCOM_DMA_IrqHandler+0xa84>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a29      	ldr	r2, [pc, #164]	; (8001ae8 <SIMCOM_DMA_IrqHandler+0xa9c>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d03a      	beq.n	8001abc <SIMCOM_DMA_IrqHandler+0xa70>
 8001a46:	4b22      	ldr	r3, [pc, #136]	; (8001ad0 <SIMCOM_DMA_IrqHandler+0xa84>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a28      	ldr	r2, [pc, #160]	; (8001aec <SIMCOM_DMA_IrqHandler+0xaa0>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d032      	beq.n	8001ab6 <SIMCOM_DMA_IrqHandler+0xa6a>
 8001a50:	4b1f      	ldr	r3, [pc, #124]	; (8001ad0 <SIMCOM_DMA_IrqHandler+0xa84>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a26      	ldr	r2, [pc, #152]	; (8001af0 <SIMCOM_DMA_IrqHandler+0xaa4>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d02a      	beq.n	8001ab0 <SIMCOM_DMA_IrqHandler+0xa64>
 8001a5a:	4b1d      	ldr	r3, [pc, #116]	; (8001ad0 <SIMCOM_DMA_IrqHandler+0xa84>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a25      	ldr	r2, [pc, #148]	; (8001af4 <SIMCOM_DMA_IrqHandler+0xaa8>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d022      	beq.n	8001aaa <SIMCOM_DMA_IrqHandler+0xa5e>
 8001a64:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <SIMCOM_DMA_IrqHandler+0xa84>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a23      	ldr	r2, [pc, #140]	; (8001af8 <SIMCOM_DMA_IrqHandler+0xaac>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d01a      	beq.n	8001aa4 <SIMCOM_DMA_IrqHandler+0xa58>
 8001a6e:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <SIMCOM_DMA_IrqHandler+0xa84>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a22      	ldr	r2, [pc, #136]	; (8001afc <SIMCOM_DMA_IrqHandler+0xab0>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d012      	beq.n	8001a9e <SIMCOM_DMA_IrqHandler+0xa52>
 8001a78:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <SIMCOM_DMA_IrqHandler+0xa84>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a20      	ldr	r2, [pc, #128]	; (8001b00 <SIMCOM_DMA_IrqHandler+0xab4>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d00a      	beq.n	8001a98 <SIMCOM_DMA_IrqHandler+0xa4c>
 8001a82:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <SIMCOM_DMA_IrqHandler+0xa84>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a1f      	ldr	r2, [pc, #124]	; (8001b04 <SIMCOM_DMA_IrqHandler+0xab8>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d102      	bne.n	8001a92 <SIMCOM_DMA_IrqHandler+0xa46>
 8001a8c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001a90:	e041      	b.n	8001b16 <SIMCOM_DMA_IrqHandler+0xaca>
 8001a92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a96:	e03e      	b.n	8001b16 <SIMCOM_DMA_IrqHandler+0xaca>
 8001a98:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001a9c:	e03b      	b.n	8001b16 <SIMCOM_DMA_IrqHandler+0xaca>
 8001a9e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001aa2:	e038      	b.n	8001b16 <SIMCOM_DMA_IrqHandler+0xaca>
 8001aa4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001aa8:	e035      	b.n	8001b16 <SIMCOM_DMA_IrqHandler+0xaca>
 8001aaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aae:	e032      	b.n	8001b16 <SIMCOM_DMA_IrqHandler+0xaca>
 8001ab0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ab4:	e02f      	b.n	8001b16 <SIMCOM_DMA_IrqHandler+0xaca>
 8001ab6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aba:	e02c      	b.n	8001b16 <SIMCOM_DMA_IrqHandler+0xaca>
 8001abc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ac0:	e029      	b.n	8001b16 <SIMCOM_DMA_IrqHandler+0xaca>
 8001ac2:	2308      	movs	r3, #8
 8001ac4:	e027      	b.n	8001b16 <SIMCOM_DMA_IrqHandler+0xaca>
 8001ac6:	2308      	movs	r3, #8
 8001ac8:	e025      	b.n	8001b16 <SIMCOM_DMA_IrqHandler+0xaca>
 8001aca:	2308      	movs	r3, #8
 8001acc:	e023      	b.n	8001b16 <SIMCOM_DMA_IrqHandler+0xaca>
 8001ace:	bf00      	nop
 8001ad0:	2000151c 	.word	0x2000151c
 8001ad4:	400260b8 	.word	0x400260b8
 8001ad8:	40026010 	.word	0x40026010
 8001adc:	40026410 	.word	0x40026410
 8001ae0:	40026070 	.word	0x40026070
 8001ae4:	40026470 	.word	0x40026470
 8001ae8:	40026028 	.word	0x40026028
 8001aec:	40026428 	.word	0x40026428
 8001af0:	40026088 	.word	0x40026088
 8001af4:	40026488 	.word	0x40026488
 8001af8:	40026040 	.word	0x40026040
 8001afc:	40026440 	.word	0x40026440
 8001b00:	400260a0 	.word	0x400260a0
 8001b04:	400264a0 	.word	0x400264a0
 8001b08:	40026400 	.word	0x40026400
 8001b0c:	40026058 	.word	0x40026058
 8001b10:	40026000 	.word	0x40026000
 8001b14:	2308      	movs	r3, #8
 8001b16:	4a96      	ldr	r2, [pc, #600]	; (8001d70 <SIMCOM_DMA_IrqHandler+0xd24>)
 8001b18:	6093      	str	r3, [r2, #8]
        __HAL_DMA_CLEAR_FLAG(&hdma_usart1_rx, __HAL_DMA_GET_FE_FLAG_INDEX(&hdma_usart1_rx));
 8001b1a:	4b96      	ldr	r3, [pc, #600]	; (8001d74 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	4b95      	ldr	r3, [pc, #596]	; (8001d78 <SIMCOM_DMA_IrqHandler+0xd2c>)
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d95c      	bls.n	8001be0 <SIMCOM_DMA_IrqHandler+0xb94>
 8001b26:	4b93      	ldr	r3, [pc, #588]	; (8001d74 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a94      	ldr	r2, [pc, #592]	; (8001d7c <SIMCOM_DMA_IrqHandler+0xd30>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d053      	beq.n	8001bd8 <SIMCOM_DMA_IrqHandler+0xb8c>
 8001b30:	4b90      	ldr	r3, [pc, #576]	; (8001d74 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a92      	ldr	r2, [pc, #584]	; (8001d80 <SIMCOM_DMA_IrqHandler+0xd34>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d04c      	beq.n	8001bd4 <SIMCOM_DMA_IrqHandler+0xb88>
 8001b3a:	4b8e      	ldr	r3, [pc, #568]	; (8001d74 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a91      	ldr	r2, [pc, #580]	; (8001d84 <SIMCOM_DMA_IrqHandler+0xd38>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d045      	beq.n	8001bd0 <SIMCOM_DMA_IrqHandler+0xb84>
 8001b44:	4b8b      	ldr	r3, [pc, #556]	; (8001d74 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a8f      	ldr	r2, [pc, #572]	; (8001d88 <SIMCOM_DMA_IrqHandler+0xd3c>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d03e      	beq.n	8001bcc <SIMCOM_DMA_IrqHandler+0xb80>
 8001b4e:	4b89      	ldr	r3, [pc, #548]	; (8001d74 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a8e      	ldr	r2, [pc, #568]	; (8001d8c <SIMCOM_DMA_IrqHandler+0xd40>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d037      	beq.n	8001bc8 <SIMCOM_DMA_IrqHandler+0xb7c>
 8001b58:	4b86      	ldr	r3, [pc, #536]	; (8001d74 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a8c      	ldr	r2, [pc, #560]	; (8001d90 <SIMCOM_DMA_IrqHandler+0xd44>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d030      	beq.n	8001bc4 <SIMCOM_DMA_IrqHandler+0xb78>
 8001b62:	4b84      	ldr	r3, [pc, #528]	; (8001d74 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a8b      	ldr	r2, [pc, #556]	; (8001d94 <SIMCOM_DMA_IrqHandler+0xd48>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d029      	beq.n	8001bc0 <SIMCOM_DMA_IrqHandler+0xb74>
 8001b6c:	4b81      	ldr	r3, [pc, #516]	; (8001d74 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a89      	ldr	r2, [pc, #548]	; (8001d98 <SIMCOM_DMA_IrqHandler+0xd4c>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d022      	beq.n	8001bbc <SIMCOM_DMA_IrqHandler+0xb70>
 8001b76:	4b7f      	ldr	r3, [pc, #508]	; (8001d74 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a88      	ldr	r2, [pc, #544]	; (8001d9c <SIMCOM_DMA_IrqHandler+0xd50>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d01a      	beq.n	8001bb6 <SIMCOM_DMA_IrqHandler+0xb6a>
 8001b80:	4b7c      	ldr	r3, [pc, #496]	; (8001d74 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a86      	ldr	r2, [pc, #536]	; (8001da0 <SIMCOM_DMA_IrqHandler+0xd54>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d012      	beq.n	8001bb0 <SIMCOM_DMA_IrqHandler+0xb64>
 8001b8a:	4b7a      	ldr	r3, [pc, #488]	; (8001d74 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a85      	ldr	r2, [pc, #532]	; (8001da4 <SIMCOM_DMA_IrqHandler+0xd58>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d00a      	beq.n	8001baa <SIMCOM_DMA_IrqHandler+0xb5e>
 8001b94:	4b77      	ldr	r3, [pc, #476]	; (8001d74 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a83      	ldr	r2, [pc, #524]	; (8001da8 <SIMCOM_DMA_IrqHandler+0xd5c>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d102      	bne.n	8001ba4 <SIMCOM_DMA_IrqHandler+0xb58>
 8001b9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ba2:	e01a      	b.n	8001bda <SIMCOM_DMA_IrqHandler+0xb8e>
 8001ba4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ba8:	e017      	b.n	8001bda <SIMCOM_DMA_IrqHandler+0xb8e>
 8001baa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bae:	e014      	b.n	8001bda <SIMCOM_DMA_IrqHandler+0xb8e>
 8001bb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bb4:	e011      	b.n	8001bda <SIMCOM_DMA_IrqHandler+0xb8e>
 8001bb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bba:	e00e      	b.n	8001bda <SIMCOM_DMA_IrqHandler+0xb8e>
 8001bbc:	2340      	movs	r3, #64	; 0x40
 8001bbe:	e00c      	b.n	8001bda <SIMCOM_DMA_IrqHandler+0xb8e>
 8001bc0:	2340      	movs	r3, #64	; 0x40
 8001bc2:	e00a      	b.n	8001bda <SIMCOM_DMA_IrqHandler+0xb8e>
 8001bc4:	2340      	movs	r3, #64	; 0x40
 8001bc6:	e008      	b.n	8001bda <SIMCOM_DMA_IrqHandler+0xb8e>
 8001bc8:	2340      	movs	r3, #64	; 0x40
 8001bca:	e006      	b.n	8001bda <SIMCOM_DMA_IrqHandler+0xb8e>
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e004      	b.n	8001bda <SIMCOM_DMA_IrqHandler+0xb8e>
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e002      	b.n	8001bda <SIMCOM_DMA_IrqHandler+0xb8e>
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e000      	b.n	8001bda <SIMCOM_DMA_IrqHandler+0xb8e>
 8001bd8:	2301      	movs	r3, #1
 8001bda:	4a74      	ldr	r2, [pc, #464]	; (8001dac <SIMCOM_DMA_IrqHandler+0xd60>)
 8001bdc:	60d3      	str	r3, [r2, #12]
 8001bde:	e147      	b.n	8001e70 <SIMCOM_DMA_IrqHandler+0xe24>
 8001be0:	4b64      	ldr	r3, [pc, #400]	; (8001d74 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	461a      	mov	r2, r3
 8001be6:	4b72      	ldr	r3, [pc, #456]	; (8001db0 <SIMCOM_DMA_IrqHandler+0xd64>)
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d95c      	bls.n	8001ca6 <SIMCOM_DMA_IrqHandler+0xc5a>
 8001bec:	4b61      	ldr	r3, [pc, #388]	; (8001d74 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a62      	ldr	r2, [pc, #392]	; (8001d7c <SIMCOM_DMA_IrqHandler+0xd30>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d053      	beq.n	8001c9e <SIMCOM_DMA_IrqHandler+0xc52>
 8001bf6:	4b5f      	ldr	r3, [pc, #380]	; (8001d74 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a61      	ldr	r2, [pc, #388]	; (8001d80 <SIMCOM_DMA_IrqHandler+0xd34>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d04c      	beq.n	8001c9a <SIMCOM_DMA_IrqHandler+0xc4e>
 8001c00:	4b5c      	ldr	r3, [pc, #368]	; (8001d74 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a5f      	ldr	r2, [pc, #380]	; (8001d84 <SIMCOM_DMA_IrqHandler+0xd38>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d045      	beq.n	8001c96 <SIMCOM_DMA_IrqHandler+0xc4a>
 8001c0a:	4b5a      	ldr	r3, [pc, #360]	; (8001d74 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a5e      	ldr	r2, [pc, #376]	; (8001d88 <SIMCOM_DMA_IrqHandler+0xd3c>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d03e      	beq.n	8001c92 <SIMCOM_DMA_IrqHandler+0xc46>
 8001c14:	4b57      	ldr	r3, [pc, #348]	; (8001d74 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a5c      	ldr	r2, [pc, #368]	; (8001d8c <SIMCOM_DMA_IrqHandler+0xd40>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d037      	beq.n	8001c8e <SIMCOM_DMA_IrqHandler+0xc42>
 8001c1e:	4b55      	ldr	r3, [pc, #340]	; (8001d74 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a5b      	ldr	r2, [pc, #364]	; (8001d90 <SIMCOM_DMA_IrqHandler+0xd44>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d030      	beq.n	8001c8a <SIMCOM_DMA_IrqHandler+0xc3e>
 8001c28:	4b52      	ldr	r3, [pc, #328]	; (8001d74 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a59      	ldr	r2, [pc, #356]	; (8001d94 <SIMCOM_DMA_IrqHandler+0xd48>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d029      	beq.n	8001c86 <SIMCOM_DMA_IrqHandler+0xc3a>
 8001c32:	4b50      	ldr	r3, [pc, #320]	; (8001d74 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a58      	ldr	r2, [pc, #352]	; (8001d98 <SIMCOM_DMA_IrqHandler+0xd4c>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d022      	beq.n	8001c82 <SIMCOM_DMA_IrqHandler+0xc36>
 8001c3c:	4b4d      	ldr	r3, [pc, #308]	; (8001d74 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a56      	ldr	r2, [pc, #344]	; (8001d9c <SIMCOM_DMA_IrqHandler+0xd50>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d01a      	beq.n	8001c7c <SIMCOM_DMA_IrqHandler+0xc30>
 8001c46:	4b4b      	ldr	r3, [pc, #300]	; (8001d74 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a55      	ldr	r2, [pc, #340]	; (8001da0 <SIMCOM_DMA_IrqHandler+0xd54>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d012      	beq.n	8001c76 <SIMCOM_DMA_IrqHandler+0xc2a>
 8001c50:	4b48      	ldr	r3, [pc, #288]	; (8001d74 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a53      	ldr	r2, [pc, #332]	; (8001da4 <SIMCOM_DMA_IrqHandler+0xd58>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d00a      	beq.n	8001c70 <SIMCOM_DMA_IrqHandler+0xc24>
 8001c5a:	4b46      	ldr	r3, [pc, #280]	; (8001d74 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a52      	ldr	r2, [pc, #328]	; (8001da8 <SIMCOM_DMA_IrqHandler+0xd5c>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d102      	bne.n	8001c6a <SIMCOM_DMA_IrqHandler+0xc1e>
 8001c64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c68:	e01a      	b.n	8001ca0 <SIMCOM_DMA_IrqHandler+0xc54>
 8001c6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c6e:	e017      	b.n	8001ca0 <SIMCOM_DMA_IrqHandler+0xc54>
 8001c70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c74:	e014      	b.n	8001ca0 <SIMCOM_DMA_IrqHandler+0xc54>
 8001c76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c7a:	e011      	b.n	8001ca0 <SIMCOM_DMA_IrqHandler+0xc54>
 8001c7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c80:	e00e      	b.n	8001ca0 <SIMCOM_DMA_IrqHandler+0xc54>
 8001c82:	2340      	movs	r3, #64	; 0x40
 8001c84:	e00c      	b.n	8001ca0 <SIMCOM_DMA_IrqHandler+0xc54>
 8001c86:	2340      	movs	r3, #64	; 0x40
 8001c88:	e00a      	b.n	8001ca0 <SIMCOM_DMA_IrqHandler+0xc54>
 8001c8a:	2340      	movs	r3, #64	; 0x40
 8001c8c:	e008      	b.n	8001ca0 <SIMCOM_DMA_IrqHandler+0xc54>
 8001c8e:	2340      	movs	r3, #64	; 0x40
 8001c90:	e006      	b.n	8001ca0 <SIMCOM_DMA_IrqHandler+0xc54>
 8001c92:	2301      	movs	r3, #1
 8001c94:	e004      	b.n	8001ca0 <SIMCOM_DMA_IrqHandler+0xc54>
 8001c96:	2301      	movs	r3, #1
 8001c98:	e002      	b.n	8001ca0 <SIMCOM_DMA_IrqHandler+0xc54>
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e000      	b.n	8001ca0 <SIMCOM_DMA_IrqHandler+0xc54>
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	4a42      	ldr	r2, [pc, #264]	; (8001dac <SIMCOM_DMA_IrqHandler+0xd60>)
 8001ca2:	6093      	str	r3, [r2, #8]
 8001ca4:	e0e4      	b.n	8001e70 <SIMCOM_DMA_IrqHandler+0xe24>
 8001ca6:	4b33      	ldr	r3, [pc, #204]	; (8001d74 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	461a      	mov	r2, r3
 8001cac:	4b41      	ldr	r3, [pc, #260]	; (8001db4 <SIMCOM_DMA_IrqHandler+0xd68>)
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	f240 8082 	bls.w	8001db8 <SIMCOM_DMA_IrqHandler+0xd6c>
 8001cb4:	4b2f      	ldr	r3, [pc, #188]	; (8001d74 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a30      	ldr	r2, [pc, #192]	; (8001d7c <SIMCOM_DMA_IrqHandler+0xd30>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d053      	beq.n	8001d66 <SIMCOM_DMA_IrqHandler+0xd1a>
 8001cbe:	4b2d      	ldr	r3, [pc, #180]	; (8001d74 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a2f      	ldr	r2, [pc, #188]	; (8001d80 <SIMCOM_DMA_IrqHandler+0xd34>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d04c      	beq.n	8001d62 <SIMCOM_DMA_IrqHandler+0xd16>
 8001cc8:	4b2a      	ldr	r3, [pc, #168]	; (8001d74 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a2d      	ldr	r2, [pc, #180]	; (8001d84 <SIMCOM_DMA_IrqHandler+0xd38>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d045      	beq.n	8001d5e <SIMCOM_DMA_IrqHandler+0xd12>
 8001cd2:	4b28      	ldr	r3, [pc, #160]	; (8001d74 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a2c      	ldr	r2, [pc, #176]	; (8001d88 <SIMCOM_DMA_IrqHandler+0xd3c>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d03e      	beq.n	8001d5a <SIMCOM_DMA_IrqHandler+0xd0e>
 8001cdc:	4b25      	ldr	r3, [pc, #148]	; (8001d74 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a2a      	ldr	r2, [pc, #168]	; (8001d8c <SIMCOM_DMA_IrqHandler+0xd40>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d037      	beq.n	8001d56 <SIMCOM_DMA_IrqHandler+0xd0a>
 8001ce6:	4b23      	ldr	r3, [pc, #140]	; (8001d74 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a29      	ldr	r2, [pc, #164]	; (8001d90 <SIMCOM_DMA_IrqHandler+0xd44>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d030      	beq.n	8001d52 <SIMCOM_DMA_IrqHandler+0xd06>
 8001cf0:	4b20      	ldr	r3, [pc, #128]	; (8001d74 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a27      	ldr	r2, [pc, #156]	; (8001d94 <SIMCOM_DMA_IrqHandler+0xd48>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d029      	beq.n	8001d4e <SIMCOM_DMA_IrqHandler+0xd02>
 8001cfa:	4b1e      	ldr	r3, [pc, #120]	; (8001d74 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a26      	ldr	r2, [pc, #152]	; (8001d98 <SIMCOM_DMA_IrqHandler+0xd4c>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d022      	beq.n	8001d4a <SIMCOM_DMA_IrqHandler+0xcfe>
 8001d04:	4b1b      	ldr	r3, [pc, #108]	; (8001d74 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a24      	ldr	r2, [pc, #144]	; (8001d9c <SIMCOM_DMA_IrqHandler+0xd50>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d01a      	beq.n	8001d44 <SIMCOM_DMA_IrqHandler+0xcf8>
 8001d0e:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a23      	ldr	r2, [pc, #140]	; (8001da0 <SIMCOM_DMA_IrqHandler+0xd54>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d012      	beq.n	8001d3e <SIMCOM_DMA_IrqHandler+0xcf2>
 8001d18:	4b16      	ldr	r3, [pc, #88]	; (8001d74 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a21      	ldr	r2, [pc, #132]	; (8001da4 <SIMCOM_DMA_IrqHandler+0xd58>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d00a      	beq.n	8001d38 <SIMCOM_DMA_IrqHandler+0xcec>
 8001d22:	4b14      	ldr	r3, [pc, #80]	; (8001d74 <SIMCOM_DMA_IrqHandler+0xd28>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a20      	ldr	r2, [pc, #128]	; (8001da8 <SIMCOM_DMA_IrqHandler+0xd5c>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d102      	bne.n	8001d32 <SIMCOM_DMA_IrqHandler+0xce6>
 8001d2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d30:	e01a      	b.n	8001d68 <SIMCOM_DMA_IrqHandler+0xd1c>
 8001d32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d36:	e017      	b.n	8001d68 <SIMCOM_DMA_IrqHandler+0xd1c>
 8001d38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d3c:	e014      	b.n	8001d68 <SIMCOM_DMA_IrqHandler+0xd1c>
 8001d3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d42:	e011      	b.n	8001d68 <SIMCOM_DMA_IrqHandler+0xd1c>
 8001d44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d48:	e00e      	b.n	8001d68 <SIMCOM_DMA_IrqHandler+0xd1c>
 8001d4a:	2340      	movs	r3, #64	; 0x40
 8001d4c:	e00c      	b.n	8001d68 <SIMCOM_DMA_IrqHandler+0xd1c>
 8001d4e:	2340      	movs	r3, #64	; 0x40
 8001d50:	e00a      	b.n	8001d68 <SIMCOM_DMA_IrqHandler+0xd1c>
 8001d52:	2340      	movs	r3, #64	; 0x40
 8001d54:	e008      	b.n	8001d68 <SIMCOM_DMA_IrqHandler+0xd1c>
 8001d56:	2340      	movs	r3, #64	; 0x40
 8001d58:	e006      	b.n	8001d68 <SIMCOM_DMA_IrqHandler+0xd1c>
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e004      	b.n	8001d68 <SIMCOM_DMA_IrqHandler+0xd1c>
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e002      	b.n	8001d68 <SIMCOM_DMA_IrqHandler+0xd1c>
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <SIMCOM_DMA_IrqHandler+0xd1c>
 8001d66:	2301      	movs	r3, #1
 8001d68:	4a01      	ldr	r2, [pc, #4]	; (8001d70 <SIMCOM_DMA_IrqHandler+0xd24>)
 8001d6a:	60d3      	str	r3, [r2, #12]
 8001d6c:	e080      	b.n	8001e70 <SIMCOM_DMA_IrqHandler+0xe24>
 8001d6e:	bf00      	nop
 8001d70:	40026000 	.word	0x40026000
 8001d74:	2000151c 	.word	0x2000151c
 8001d78:	40026458 	.word	0x40026458
 8001d7c:	40026010 	.word	0x40026010
 8001d80:	40026410 	.word	0x40026410
 8001d84:	40026070 	.word	0x40026070
 8001d88:	40026470 	.word	0x40026470
 8001d8c:	40026028 	.word	0x40026028
 8001d90:	40026428 	.word	0x40026428
 8001d94:	40026088 	.word	0x40026088
 8001d98:	40026488 	.word	0x40026488
 8001d9c:	40026040 	.word	0x40026040
 8001da0:	40026440 	.word	0x40026440
 8001da4:	400260a0 	.word	0x400260a0
 8001da8:	400264a0 	.word	0x400264a0
 8001dac:	40026400 	.word	0x40026400
 8001db0:	400260b8 	.word	0x400260b8
 8001db4:	40026058 	.word	0x40026058
 8001db8:	4b95      	ldr	r3, [pc, #596]	; (8002010 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a95      	ldr	r2, [pc, #596]	; (8002014 <SIMCOM_DMA_IrqHandler+0xfc8>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d053      	beq.n	8001e6a <SIMCOM_DMA_IrqHandler+0xe1e>
 8001dc2:	4b93      	ldr	r3, [pc, #588]	; (8002010 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a94      	ldr	r2, [pc, #592]	; (8002018 <SIMCOM_DMA_IrqHandler+0xfcc>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d04c      	beq.n	8001e66 <SIMCOM_DMA_IrqHandler+0xe1a>
 8001dcc:	4b90      	ldr	r3, [pc, #576]	; (8002010 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a92      	ldr	r2, [pc, #584]	; (800201c <SIMCOM_DMA_IrqHandler+0xfd0>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d045      	beq.n	8001e62 <SIMCOM_DMA_IrqHandler+0xe16>
 8001dd6:	4b8e      	ldr	r3, [pc, #568]	; (8002010 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a91      	ldr	r2, [pc, #580]	; (8002020 <SIMCOM_DMA_IrqHandler+0xfd4>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d03e      	beq.n	8001e5e <SIMCOM_DMA_IrqHandler+0xe12>
 8001de0:	4b8b      	ldr	r3, [pc, #556]	; (8002010 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a8f      	ldr	r2, [pc, #572]	; (8002024 <SIMCOM_DMA_IrqHandler+0xfd8>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d037      	beq.n	8001e5a <SIMCOM_DMA_IrqHandler+0xe0e>
 8001dea:	4b89      	ldr	r3, [pc, #548]	; (8002010 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a8e      	ldr	r2, [pc, #568]	; (8002028 <SIMCOM_DMA_IrqHandler+0xfdc>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d030      	beq.n	8001e56 <SIMCOM_DMA_IrqHandler+0xe0a>
 8001df4:	4b86      	ldr	r3, [pc, #536]	; (8002010 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a8c      	ldr	r2, [pc, #560]	; (800202c <SIMCOM_DMA_IrqHandler+0xfe0>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d029      	beq.n	8001e52 <SIMCOM_DMA_IrqHandler+0xe06>
 8001dfe:	4b84      	ldr	r3, [pc, #528]	; (8002010 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a8b      	ldr	r2, [pc, #556]	; (8002030 <SIMCOM_DMA_IrqHandler+0xfe4>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d022      	beq.n	8001e4e <SIMCOM_DMA_IrqHandler+0xe02>
 8001e08:	4b81      	ldr	r3, [pc, #516]	; (8002010 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a89      	ldr	r2, [pc, #548]	; (8002034 <SIMCOM_DMA_IrqHandler+0xfe8>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d01a      	beq.n	8001e48 <SIMCOM_DMA_IrqHandler+0xdfc>
 8001e12:	4b7f      	ldr	r3, [pc, #508]	; (8002010 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a88      	ldr	r2, [pc, #544]	; (8002038 <SIMCOM_DMA_IrqHandler+0xfec>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d012      	beq.n	8001e42 <SIMCOM_DMA_IrqHandler+0xdf6>
 8001e1c:	4b7c      	ldr	r3, [pc, #496]	; (8002010 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a86      	ldr	r2, [pc, #536]	; (800203c <SIMCOM_DMA_IrqHandler+0xff0>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d00a      	beq.n	8001e3c <SIMCOM_DMA_IrqHandler+0xdf0>
 8001e26:	4b7a      	ldr	r3, [pc, #488]	; (8002010 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a85      	ldr	r2, [pc, #532]	; (8002040 <SIMCOM_DMA_IrqHandler+0xff4>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d102      	bne.n	8001e36 <SIMCOM_DMA_IrqHandler+0xdea>
 8001e30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e34:	e01a      	b.n	8001e6c <SIMCOM_DMA_IrqHandler+0xe20>
 8001e36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e3a:	e017      	b.n	8001e6c <SIMCOM_DMA_IrqHandler+0xe20>
 8001e3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e40:	e014      	b.n	8001e6c <SIMCOM_DMA_IrqHandler+0xe20>
 8001e42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e46:	e011      	b.n	8001e6c <SIMCOM_DMA_IrqHandler+0xe20>
 8001e48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e4c:	e00e      	b.n	8001e6c <SIMCOM_DMA_IrqHandler+0xe20>
 8001e4e:	2340      	movs	r3, #64	; 0x40
 8001e50:	e00c      	b.n	8001e6c <SIMCOM_DMA_IrqHandler+0xe20>
 8001e52:	2340      	movs	r3, #64	; 0x40
 8001e54:	e00a      	b.n	8001e6c <SIMCOM_DMA_IrqHandler+0xe20>
 8001e56:	2340      	movs	r3, #64	; 0x40
 8001e58:	e008      	b.n	8001e6c <SIMCOM_DMA_IrqHandler+0xe20>
 8001e5a:	2340      	movs	r3, #64	; 0x40
 8001e5c:	e006      	b.n	8001e6c <SIMCOM_DMA_IrqHandler+0xe20>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e004      	b.n	8001e6c <SIMCOM_DMA_IrqHandler+0xe20>
 8001e62:	2301      	movs	r3, #1
 8001e64:	e002      	b.n	8001e6c <SIMCOM_DMA_IrqHandler+0xe20>
 8001e66:	2301      	movs	r3, #1
 8001e68:	e000      	b.n	8001e6c <SIMCOM_DMA_IrqHandler+0xe20>
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	4a75      	ldr	r2, [pc, #468]	; (8002044 <SIMCOM_DMA_IrqHandler+0xff8>)
 8001e6e:	6093      	str	r3, [r2, #8]
        __HAL_DMA_CLEAR_FLAG(&hdma_usart1_rx, __HAL_DMA_GET_DME_FLAG_INDEX(&hdma_usart1_rx));
 8001e70:	4b67      	ldr	r3, [pc, #412]	; (8002010 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	461a      	mov	r2, r3
 8001e76:	4b74      	ldr	r3, [pc, #464]	; (8002048 <SIMCOM_DMA_IrqHandler+0xffc>)
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d960      	bls.n	8001f3e <SIMCOM_DMA_IrqHandler+0xef2>
 8001e7c:	4b64      	ldr	r3, [pc, #400]	; (8002010 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a64      	ldr	r2, [pc, #400]	; (8002014 <SIMCOM_DMA_IrqHandler+0xfc8>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d057      	beq.n	8001f36 <SIMCOM_DMA_IrqHandler+0xeea>
 8001e86:	4b62      	ldr	r3, [pc, #392]	; (8002010 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a63      	ldr	r2, [pc, #396]	; (8002018 <SIMCOM_DMA_IrqHandler+0xfcc>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d050      	beq.n	8001f32 <SIMCOM_DMA_IrqHandler+0xee6>
 8001e90:	4b5f      	ldr	r3, [pc, #380]	; (8002010 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a61      	ldr	r2, [pc, #388]	; (800201c <SIMCOM_DMA_IrqHandler+0xfd0>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d049      	beq.n	8001f2e <SIMCOM_DMA_IrqHandler+0xee2>
 8001e9a:	4b5d      	ldr	r3, [pc, #372]	; (8002010 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a60      	ldr	r2, [pc, #384]	; (8002020 <SIMCOM_DMA_IrqHandler+0xfd4>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d042      	beq.n	8001f2a <SIMCOM_DMA_IrqHandler+0xede>
 8001ea4:	4b5a      	ldr	r3, [pc, #360]	; (8002010 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a5e      	ldr	r2, [pc, #376]	; (8002024 <SIMCOM_DMA_IrqHandler+0xfd8>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d03a      	beq.n	8001f24 <SIMCOM_DMA_IrqHandler+0xed8>
 8001eae:	4b58      	ldr	r3, [pc, #352]	; (8002010 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a5d      	ldr	r2, [pc, #372]	; (8002028 <SIMCOM_DMA_IrqHandler+0xfdc>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d032      	beq.n	8001f1e <SIMCOM_DMA_IrqHandler+0xed2>
 8001eb8:	4b55      	ldr	r3, [pc, #340]	; (8002010 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a5b      	ldr	r2, [pc, #364]	; (800202c <SIMCOM_DMA_IrqHandler+0xfe0>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d02a      	beq.n	8001f18 <SIMCOM_DMA_IrqHandler+0xecc>
 8001ec2:	4b53      	ldr	r3, [pc, #332]	; (8002010 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a5a      	ldr	r2, [pc, #360]	; (8002030 <SIMCOM_DMA_IrqHandler+0xfe4>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d022      	beq.n	8001f12 <SIMCOM_DMA_IrqHandler+0xec6>
 8001ecc:	4b50      	ldr	r3, [pc, #320]	; (8002010 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a58      	ldr	r2, [pc, #352]	; (8002034 <SIMCOM_DMA_IrqHandler+0xfe8>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d01a      	beq.n	8001f0c <SIMCOM_DMA_IrqHandler+0xec0>
 8001ed6:	4b4e      	ldr	r3, [pc, #312]	; (8002010 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a57      	ldr	r2, [pc, #348]	; (8002038 <SIMCOM_DMA_IrqHandler+0xfec>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d012      	beq.n	8001f06 <SIMCOM_DMA_IrqHandler+0xeba>
 8001ee0:	4b4b      	ldr	r3, [pc, #300]	; (8002010 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a55      	ldr	r2, [pc, #340]	; (800203c <SIMCOM_DMA_IrqHandler+0xff0>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d00a      	beq.n	8001f00 <SIMCOM_DMA_IrqHandler+0xeb4>
 8001eea:	4b49      	ldr	r3, [pc, #292]	; (8002010 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a54      	ldr	r2, [pc, #336]	; (8002040 <SIMCOM_DMA_IrqHandler+0xff4>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d102      	bne.n	8001efa <SIMCOM_DMA_IrqHandler+0xeae>
 8001ef4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001ef8:	e01e      	b.n	8001f38 <SIMCOM_DMA_IrqHandler+0xeec>
 8001efa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001efe:	e01b      	b.n	8001f38 <SIMCOM_DMA_IrqHandler+0xeec>
 8001f00:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001f04:	e018      	b.n	8001f38 <SIMCOM_DMA_IrqHandler+0xeec>
 8001f06:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001f0a:	e015      	b.n	8001f38 <SIMCOM_DMA_IrqHandler+0xeec>
 8001f0c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001f10:	e012      	b.n	8001f38 <SIMCOM_DMA_IrqHandler+0xeec>
 8001f12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f16:	e00f      	b.n	8001f38 <SIMCOM_DMA_IrqHandler+0xeec>
 8001f18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f1c:	e00c      	b.n	8001f38 <SIMCOM_DMA_IrqHandler+0xeec>
 8001f1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f22:	e009      	b.n	8001f38 <SIMCOM_DMA_IrqHandler+0xeec>
 8001f24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f28:	e006      	b.n	8001f38 <SIMCOM_DMA_IrqHandler+0xeec>
 8001f2a:	2304      	movs	r3, #4
 8001f2c:	e004      	b.n	8001f38 <SIMCOM_DMA_IrqHandler+0xeec>
 8001f2e:	2304      	movs	r3, #4
 8001f30:	e002      	b.n	8001f38 <SIMCOM_DMA_IrqHandler+0xeec>
 8001f32:	2304      	movs	r3, #4
 8001f34:	e000      	b.n	8001f38 <SIMCOM_DMA_IrqHandler+0xeec>
 8001f36:	2304      	movs	r3, #4
 8001f38:	4a44      	ldr	r2, [pc, #272]	; (800204c <SIMCOM_DMA_IrqHandler+0x1000>)
 8001f3a:	60d3      	str	r3, [r2, #12]
 8001f3c:	e151      	b.n	80021e2 <SIMCOM_DMA_IrqHandler+0x1196>
 8001f3e:	4b34      	ldr	r3, [pc, #208]	; (8002010 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	461a      	mov	r2, r3
 8001f44:	4b42      	ldr	r3, [pc, #264]	; (8002050 <SIMCOM_DMA_IrqHandler+0x1004>)
 8001f46:	429a      	cmp	r2, r3
 8001f48:	f240 8084 	bls.w	8002054 <SIMCOM_DMA_IrqHandler+0x1008>
 8001f4c:	4b30      	ldr	r3, [pc, #192]	; (8002010 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a30      	ldr	r2, [pc, #192]	; (8002014 <SIMCOM_DMA_IrqHandler+0xfc8>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d057      	beq.n	8002006 <SIMCOM_DMA_IrqHandler+0xfba>
 8001f56:	4b2e      	ldr	r3, [pc, #184]	; (8002010 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a2f      	ldr	r2, [pc, #188]	; (8002018 <SIMCOM_DMA_IrqHandler+0xfcc>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d050      	beq.n	8002002 <SIMCOM_DMA_IrqHandler+0xfb6>
 8001f60:	4b2b      	ldr	r3, [pc, #172]	; (8002010 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a2d      	ldr	r2, [pc, #180]	; (800201c <SIMCOM_DMA_IrqHandler+0xfd0>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d049      	beq.n	8001ffe <SIMCOM_DMA_IrqHandler+0xfb2>
 8001f6a:	4b29      	ldr	r3, [pc, #164]	; (8002010 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a2c      	ldr	r2, [pc, #176]	; (8002020 <SIMCOM_DMA_IrqHandler+0xfd4>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d042      	beq.n	8001ffa <SIMCOM_DMA_IrqHandler+0xfae>
 8001f74:	4b26      	ldr	r3, [pc, #152]	; (8002010 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a2a      	ldr	r2, [pc, #168]	; (8002024 <SIMCOM_DMA_IrqHandler+0xfd8>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d03a      	beq.n	8001ff4 <SIMCOM_DMA_IrqHandler+0xfa8>
 8001f7e:	4b24      	ldr	r3, [pc, #144]	; (8002010 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a29      	ldr	r2, [pc, #164]	; (8002028 <SIMCOM_DMA_IrqHandler+0xfdc>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d032      	beq.n	8001fee <SIMCOM_DMA_IrqHandler+0xfa2>
 8001f88:	4b21      	ldr	r3, [pc, #132]	; (8002010 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a27      	ldr	r2, [pc, #156]	; (800202c <SIMCOM_DMA_IrqHandler+0xfe0>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d02a      	beq.n	8001fe8 <SIMCOM_DMA_IrqHandler+0xf9c>
 8001f92:	4b1f      	ldr	r3, [pc, #124]	; (8002010 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a26      	ldr	r2, [pc, #152]	; (8002030 <SIMCOM_DMA_IrqHandler+0xfe4>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d022      	beq.n	8001fe2 <SIMCOM_DMA_IrqHandler+0xf96>
 8001f9c:	4b1c      	ldr	r3, [pc, #112]	; (8002010 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a24      	ldr	r2, [pc, #144]	; (8002034 <SIMCOM_DMA_IrqHandler+0xfe8>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d01a      	beq.n	8001fdc <SIMCOM_DMA_IrqHandler+0xf90>
 8001fa6:	4b1a      	ldr	r3, [pc, #104]	; (8002010 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a23      	ldr	r2, [pc, #140]	; (8002038 <SIMCOM_DMA_IrqHandler+0xfec>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d012      	beq.n	8001fd6 <SIMCOM_DMA_IrqHandler+0xf8a>
 8001fb0:	4b17      	ldr	r3, [pc, #92]	; (8002010 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a21      	ldr	r2, [pc, #132]	; (800203c <SIMCOM_DMA_IrqHandler+0xff0>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d00a      	beq.n	8001fd0 <SIMCOM_DMA_IrqHandler+0xf84>
 8001fba:	4b15      	ldr	r3, [pc, #84]	; (8002010 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a20      	ldr	r2, [pc, #128]	; (8002040 <SIMCOM_DMA_IrqHandler+0xff4>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d102      	bne.n	8001fca <SIMCOM_DMA_IrqHandler+0xf7e>
 8001fc4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001fc8:	e01e      	b.n	8002008 <SIMCOM_DMA_IrqHandler+0xfbc>
 8001fca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fce:	e01b      	b.n	8002008 <SIMCOM_DMA_IrqHandler+0xfbc>
 8001fd0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001fd4:	e018      	b.n	8002008 <SIMCOM_DMA_IrqHandler+0xfbc>
 8001fd6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001fda:	e015      	b.n	8002008 <SIMCOM_DMA_IrqHandler+0xfbc>
 8001fdc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001fe0:	e012      	b.n	8002008 <SIMCOM_DMA_IrqHandler+0xfbc>
 8001fe2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fe6:	e00f      	b.n	8002008 <SIMCOM_DMA_IrqHandler+0xfbc>
 8001fe8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fec:	e00c      	b.n	8002008 <SIMCOM_DMA_IrqHandler+0xfbc>
 8001fee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ff2:	e009      	b.n	8002008 <SIMCOM_DMA_IrqHandler+0xfbc>
 8001ff4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ff8:	e006      	b.n	8002008 <SIMCOM_DMA_IrqHandler+0xfbc>
 8001ffa:	2304      	movs	r3, #4
 8001ffc:	e004      	b.n	8002008 <SIMCOM_DMA_IrqHandler+0xfbc>
 8001ffe:	2304      	movs	r3, #4
 8002000:	e002      	b.n	8002008 <SIMCOM_DMA_IrqHandler+0xfbc>
 8002002:	2304      	movs	r3, #4
 8002004:	e000      	b.n	8002008 <SIMCOM_DMA_IrqHandler+0xfbc>
 8002006:	2304      	movs	r3, #4
 8002008:	4a10      	ldr	r2, [pc, #64]	; (800204c <SIMCOM_DMA_IrqHandler+0x1000>)
 800200a:	6093      	str	r3, [r2, #8]
 800200c:	e0e9      	b.n	80021e2 <SIMCOM_DMA_IrqHandler+0x1196>
 800200e:	bf00      	nop
 8002010:	2000151c 	.word	0x2000151c
 8002014:	40026010 	.word	0x40026010
 8002018:	40026410 	.word	0x40026410
 800201c:	40026070 	.word	0x40026070
 8002020:	40026470 	.word	0x40026470
 8002024:	40026028 	.word	0x40026028
 8002028:	40026428 	.word	0x40026428
 800202c:	40026088 	.word	0x40026088
 8002030:	40026488 	.word	0x40026488
 8002034:	40026040 	.word	0x40026040
 8002038:	40026440 	.word	0x40026440
 800203c:	400260a0 	.word	0x400260a0
 8002040:	400264a0 	.word	0x400264a0
 8002044:	40026000 	.word	0x40026000
 8002048:	40026458 	.word	0x40026458
 800204c:	40026400 	.word	0x40026400
 8002050:	400260b8 	.word	0x400260b8
 8002054:	4b67      	ldr	r3, [pc, #412]	; (80021f4 <SIMCOM_DMA_IrqHandler+0x11a8>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	461a      	mov	r2, r3
 800205a:	4b67      	ldr	r3, [pc, #412]	; (80021f8 <SIMCOM_DMA_IrqHandler+0x11ac>)
 800205c:	429a      	cmp	r2, r3
 800205e:	d960      	bls.n	8002122 <SIMCOM_DMA_IrqHandler+0x10d6>
 8002060:	4b64      	ldr	r3, [pc, #400]	; (80021f4 <SIMCOM_DMA_IrqHandler+0x11a8>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a65      	ldr	r2, [pc, #404]	; (80021fc <SIMCOM_DMA_IrqHandler+0x11b0>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d057      	beq.n	800211a <SIMCOM_DMA_IrqHandler+0x10ce>
 800206a:	4b62      	ldr	r3, [pc, #392]	; (80021f4 <SIMCOM_DMA_IrqHandler+0x11a8>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a64      	ldr	r2, [pc, #400]	; (8002200 <SIMCOM_DMA_IrqHandler+0x11b4>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d050      	beq.n	8002116 <SIMCOM_DMA_IrqHandler+0x10ca>
 8002074:	4b5f      	ldr	r3, [pc, #380]	; (80021f4 <SIMCOM_DMA_IrqHandler+0x11a8>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a62      	ldr	r2, [pc, #392]	; (8002204 <SIMCOM_DMA_IrqHandler+0x11b8>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d049      	beq.n	8002112 <SIMCOM_DMA_IrqHandler+0x10c6>
 800207e:	4b5d      	ldr	r3, [pc, #372]	; (80021f4 <SIMCOM_DMA_IrqHandler+0x11a8>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a61      	ldr	r2, [pc, #388]	; (8002208 <SIMCOM_DMA_IrqHandler+0x11bc>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d042      	beq.n	800210e <SIMCOM_DMA_IrqHandler+0x10c2>
 8002088:	4b5a      	ldr	r3, [pc, #360]	; (80021f4 <SIMCOM_DMA_IrqHandler+0x11a8>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a5f      	ldr	r2, [pc, #380]	; (800220c <SIMCOM_DMA_IrqHandler+0x11c0>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d03a      	beq.n	8002108 <SIMCOM_DMA_IrqHandler+0x10bc>
 8002092:	4b58      	ldr	r3, [pc, #352]	; (80021f4 <SIMCOM_DMA_IrqHandler+0x11a8>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a5e      	ldr	r2, [pc, #376]	; (8002210 <SIMCOM_DMA_IrqHandler+0x11c4>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d032      	beq.n	8002102 <SIMCOM_DMA_IrqHandler+0x10b6>
 800209c:	4b55      	ldr	r3, [pc, #340]	; (80021f4 <SIMCOM_DMA_IrqHandler+0x11a8>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a5c      	ldr	r2, [pc, #368]	; (8002214 <SIMCOM_DMA_IrqHandler+0x11c8>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d02a      	beq.n	80020fc <SIMCOM_DMA_IrqHandler+0x10b0>
 80020a6:	4b53      	ldr	r3, [pc, #332]	; (80021f4 <SIMCOM_DMA_IrqHandler+0x11a8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a5b      	ldr	r2, [pc, #364]	; (8002218 <SIMCOM_DMA_IrqHandler+0x11cc>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d022      	beq.n	80020f6 <SIMCOM_DMA_IrqHandler+0x10aa>
 80020b0:	4b50      	ldr	r3, [pc, #320]	; (80021f4 <SIMCOM_DMA_IrqHandler+0x11a8>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a59      	ldr	r2, [pc, #356]	; (800221c <SIMCOM_DMA_IrqHandler+0x11d0>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d01a      	beq.n	80020f0 <SIMCOM_DMA_IrqHandler+0x10a4>
 80020ba:	4b4e      	ldr	r3, [pc, #312]	; (80021f4 <SIMCOM_DMA_IrqHandler+0x11a8>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a58      	ldr	r2, [pc, #352]	; (8002220 <SIMCOM_DMA_IrqHandler+0x11d4>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d012      	beq.n	80020ea <SIMCOM_DMA_IrqHandler+0x109e>
 80020c4:	4b4b      	ldr	r3, [pc, #300]	; (80021f4 <SIMCOM_DMA_IrqHandler+0x11a8>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a56      	ldr	r2, [pc, #344]	; (8002224 <SIMCOM_DMA_IrqHandler+0x11d8>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d00a      	beq.n	80020e4 <SIMCOM_DMA_IrqHandler+0x1098>
 80020ce:	4b49      	ldr	r3, [pc, #292]	; (80021f4 <SIMCOM_DMA_IrqHandler+0x11a8>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a55      	ldr	r2, [pc, #340]	; (8002228 <SIMCOM_DMA_IrqHandler+0x11dc>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d102      	bne.n	80020de <SIMCOM_DMA_IrqHandler+0x1092>
 80020d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80020dc:	e01e      	b.n	800211c <SIMCOM_DMA_IrqHandler+0x10d0>
 80020de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020e2:	e01b      	b.n	800211c <SIMCOM_DMA_IrqHandler+0x10d0>
 80020e4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80020e8:	e018      	b.n	800211c <SIMCOM_DMA_IrqHandler+0x10d0>
 80020ea:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80020ee:	e015      	b.n	800211c <SIMCOM_DMA_IrqHandler+0x10d0>
 80020f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80020f4:	e012      	b.n	800211c <SIMCOM_DMA_IrqHandler+0x10d0>
 80020f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020fa:	e00f      	b.n	800211c <SIMCOM_DMA_IrqHandler+0x10d0>
 80020fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002100:	e00c      	b.n	800211c <SIMCOM_DMA_IrqHandler+0x10d0>
 8002102:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002106:	e009      	b.n	800211c <SIMCOM_DMA_IrqHandler+0x10d0>
 8002108:	f44f 7380 	mov.w	r3, #256	; 0x100
 800210c:	e006      	b.n	800211c <SIMCOM_DMA_IrqHandler+0x10d0>
 800210e:	2304      	movs	r3, #4
 8002110:	e004      	b.n	800211c <SIMCOM_DMA_IrqHandler+0x10d0>
 8002112:	2304      	movs	r3, #4
 8002114:	e002      	b.n	800211c <SIMCOM_DMA_IrqHandler+0x10d0>
 8002116:	2304      	movs	r3, #4
 8002118:	e000      	b.n	800211c <SIMCOM_DMA_IrqHandler+0x10d0>
 800211a:	2304      	movs	r3, #4
 800211c:	4a43      	ldr	r2, [pc, #268]	; (800222c <SIMCOM_DMA_IrqHandler+0x11e0>)
 800211e:	60d3      	str	r3, [r2, #12]
 8002120:	e05f      	b.n	80021e2 <SIMCOM_DMA_IrqHandler+0x1196>
 8002122:	4b34      	ldr	r3, [pc, #208]	; (80021f4 <SIMCOM_DMA_IrqHandler+0x11a8>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a35      	ldr	r2, [pc, #212]	; (80021fc <SIMCOM_DMA_IrqHandler+0x11b0>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d057      	beq.n	80021dc <SIMCOM_DMA_IrqHandler+0x1190>
 800212c:	4b31      	ldr	r3, [pc, #196]	; (80021f4 <SIMCOM_DMA_IrqHandler+0x11a8>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a33      	ldr	r2, [pc, #204]	; (8002200 <SIMCOM_DMA_IrqHandler+0x11b4>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d050      	beq.n	80021d8 <SIMCOM_DMA_IrqHandler+0x118c>
 8002136:	4b2f      	ldr	r3, [pc, #188]	; (80021f4 <SIMCOM_DMA_IrqHandler+0x11a8>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a32      	ldr	r2, [pc, #200]	; (8002204 <SIMCOM_DMA_IrqHandler+0x11b8>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d049      	beq.n	80021d4 <SIMCOM_DMA_IrqHandler+0x1188>
 8002140:	4b2c      	ldr	r3, [pc, #176]	; (80021f4 <SIMCOM_DMA_IrqHandler+0x11a8>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a30      	ldr	r2, [pc, #192]	; (8002208 <SIMCOM_DMA_IrqHandler+0x11bc>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d042      	beq.n	80021d0 <SIMCOM_DMA_IrqHandler+0x1184>
 800214a:	4b2a      	ldr	r3, [pc, #168]	; (80021f4 <SIMCOM_DMA_IrqHandler+0x11a8>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a2f      	ldr	r2, [pc, #188]	; (800220c <SIMCOM_DMA_IrqHandler+0x11c0>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d03a      	beq.n	80021ca <SIMCOM_DMA_IrqHandler+0x117e>
 8002154:	4b27      	ldr	r3, [pc, #156]	; (80021f4 <SIMCOM_DMA_IrqHandler+0x11a8>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a2d      	ldr	r2, [pc, #180]	; (8002210 <SIMCOM_DMA_IrqHandler+0x11c4>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d032      	beq.n	80021c4 <SIMCOM_DMA_IrqHandler+0x1178>
 800215e:	4b25      	ldr	r3, [pc, #148]	; (80021f4 <SIMCOM_DMA_IrqHandler+0x11a8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a2c      	ldr	r2, [pc, #176]	; (8002214 <SIMCOM_DMA_IrqHandler+0x11c8>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d02a      	beq.n	80021be <SIMCOM_DMA_IrqHandler+0x1172>
 8002168:	4b22      	ldr	r3, [pc, #136]	; (80021f4 <SIMCOM_DMA_IrqHandler+0x11a8>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a2a      	ldr	r2, [pc, #168]	; (8002218 <SIMCOM_DMA_IrqHandler+0x11cc>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d022      	beq.n	80021b8 <SIMCOM_DMA_IrqHandler+0x116c>
 8002172:	4b20      	ldr	r3, [pc, #128]	; (80021f4 <SIMCOM_DMA_IrqHandler+0x11a8>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a29      	ldr	r2, [pc, #164]	; (800221c <SIMCOM_DMA_IrqHandler+0x11d0>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d01a      	beq.n	80021b2 <SIMCOM_DMA_IrqHandler+0x1166>
 800217c:	4b1d      	ldr	r3, [pc, #116]	; (80021f4 <SIMCOM_DMA_IrqHandler+0x11a8>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a27      	ldr	r2, [pc, #156]	; (8002220 <SIMCOM_DMA_IrqHandler+0x11d4>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d012      	beq.n	80021ac <SIMCOM_DMA_IrqHandler+0x1160>
 8002186:	4b1b      	ldr	r3, [pc, #108]	; (80021f4 <SIMCOM_DMA_IrqHandler+0x11a8>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a26      	ldr	r2, [pc, #152]	; (8002224 <SIMCOM_DMA_IrqHandler+0x11d8>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d00a      	beq.n	80021a6 <SIMCOM_DMA_IrqHandler+0x115a>
 8002190:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <SIMCOM_DMA_IrqHandler+0x11a8>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a24      	ldr	r2, [pc, #144]	; (8002228 <SIMCOM_DMA_IrqHandler+0x11dc>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d102      	bne.n	80021a0 <SIMCOM_DMA_IrqHandler+0x1154>
 800219a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800219e:	e01e      	b.n	80021de <SIMCOM_DMA_IrqHandler+0x1192>
 80021a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021a4:	e01b      	b.n	80021de <SIMCOM_DMA_IrqHandler+0x1192>
 80021a6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80021aa:	e018      	b.n	80021de <SIMCOM_DMA_IrqHandler+0x1192>
 80021ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80021b0:	e015      	b.n	80021de <SIMCOM_DMA_IrqHandler+0x1192>
 80021b2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80021b6:	e012      	b.n	80021de <SIMCOM_DMA_IrqHandler+0x1192>
 80021b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021bc:	e00f      	b.n	80021de <SIMCOM_DMA_IrqHandler+0x1192>
 80021be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021c2:	e00c      	b.n	80021de <SIMCOM_DMA_IrqHandler+0x1192>
 80021c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021c8:	e009      	b.n	80021de <SIMCOM_DMA_IrqHandler+0x1192>
 80021ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021ce:	e006      	b.n	80021de <SIMCOM_DMA_IrqHandler+0x1192>
 80021d0:	2304      	movs	r3, #4
 80021d2:	e004      	b.n	80021de <SIMCOM_DMA_IrqHandler+0x1192>
 80021d4:	2304      	movs	r3, #4
 80021d6:	e002      	b.n	80021de <SIMCOM_DMA_IrqHandler+0x1192>
 80021d8:	2304      	movs	r3, #4
 80021da:	e000      	b.n	80021de <SIMCOM_DMA_IrqHandler+0x1192>
 80021dc:	2304      	movs	r3, #4
 80021de:	4a13      	ldr	r2, [pc, #76]	; (800222c <SIMCOM_DMA_IrqHandler+0x11e0>)
 80021e0:	6093      	str	r3, [r2, #8]
        HAL_UART_Receive_DMA(&huart1, (uint8_t*) SIMCOM_DMA_RX, SIMCOM_DMA_RX_SZ);
 80021e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021e6:	4912      	ldr	r1, [pc, #72]	; (8002230 <SIMCOM_DMA_IrqHandler+0x11e4>)
 80021e8:	4812      	ldr	r0, [pc, #72]	; (8002234 <SIMCOM_DMA_IrqHandler+0x11e8>)
 80021ea:	f006 fe0d 	bl	8008e08 <HAL_UART_Receive_DMA>
}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	2000151c 	.word	0x2000151c
 80021f8:	40026058 	.word	0x40026058
 80021fc:	40026010 	.word	0x40026010
 8002200:	40026410 	.word	0x40026410
 8002204:	40026070 	.word	0x40026070
 8002208:	40026470 	.word	0x40026470
 800220c:	40026028 	.word	0x40026028
 8002210:	40026428 	.word	0x40026428
 8002214:	40026088 	.word	0x40026088
 8002218:	40026488 	.word	0x40026488
 800221c:	40026040 	.word	0x40026040
 8002220:	40026440 	.word	0x40026440
 8002224:	400260a0 	.word	0x400260a0
 8002228:	400264a0 	.word	0x400264a0
 800222c:	40026000 	.word	0x40026000
 8002230:	20000a60 	.word	0x20000a60
 8002234:	2000157c 	.word	0x2000157c

08002238 <SIMCOM_DMA_Init>:

void SIMCOM_DMA_Init(void) {
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);        // enable idle line interrupt
 800223c:	4b0f      	ldr	r3, [pc, #60]	; (800227c <SIMCOM_DMA_Init+0x44>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68da      	ldr	r2, [r3, #12]
 8002242:	4b0e      	ldr	r3, [pc, #56]	; (800227c <SIMCOM_DMA_Init+0x44>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f042 0210 	orr.w	r2, r2, #16
 800224a:	60da      	str	r2, [r3, #12]
    __HAL_DMA_ENABLE_IT(&hdma_usart1_rx, DMA_IT_TC);    // enable DMA Tx cplt interrupt
 800224c:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <SIMCOM_DMA_Init+0x48>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <SIMCOM_DMA_Init+0x48>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0210 	orr.w	r2, r2, #16
 800225a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE_IT(&hdma_usart1_rx, DMA_IT_HT);    // enable half complete interrupt
 800225c:	4b08      	ldr	r3, [pc, #32]	; (8002280 <SIMCOM_DMA_Init+0x48>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	4b07      	ldr	r3, [pc, #28]	; (8002280 <SIMCOM_DMA_Init+0x48>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f042 0208 	orr.w	r2, r2, #8
 800226a:	601a      	str	r2, [r3, #0]

    /* Start DMA transfer */
    HAL_UART_Receive_DMA(&huart1, (uint8_t*) SIMCOM_DMA_RX, SIMCOM_DMA_RX_SZ);
 800226c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002270:	4904      	ldr	r1, [pc, #16]	; (8002284 <SIMCOM_DMA_Init+0x4c>)
 8002272:	4802      	ldr	r0, [pc, #8]	; (800227c <SIMCOM_DMA_Init+0x44>)
 8002274:	f006 fdc8 	bl	8008e08 <HAL_UART_Receive_DMA>
}
 8002278:	bf00      	nop
 800227a:	bd80      	pop	{r7, pc}
 800227c:	2000157c 	.word	0x2000157c
 8002280:	2000151c 	.word	0x2000151c
 8002284:	20000a60 	.word	0x20000a60

08002288 <SIMCOM_Check_Buffer>:

static void SIMCOM_Check_Buffer(void) {
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
    static size_t old_pos;
    size_t pos;

    /* Calculate current position in buffer */
    pos = SIMCOM_DMA_RX_SZ - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 800228e:	4b1f      	ldr	r3, [pc, #124]	; (800230c <SIMCOM_Check_Buffer+0x84>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8002298:	607b      	str	r3, [r7, #4]
    if (pos != old_pos) { /* Check change in received data */
 800229a:	4b1d      	ldr	r3, [pc, #116]	; (8002310 <SIMCOM_Check_Buffer+0x88>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d023      	beq.n	80022ec <SIMCOM_Check_Buffer+0x64>
        if (pos > old_pos) { /* Current position is over previous one */
 80022a4:	4b1a      	ldr	r3, [pc, #104]	; (8002310 <SIMCOM_Check_Buffer+0x88>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d90b      	bls.n	80022c6 <SIMCOM_Check_Buffer+0x3e>
            /* We are in "linear" mode */
            /* Process data directly by subtracting "pointers" */
            SIMCOM_Fill_Buffer(&SIMCOM_DMA_RX[old_pos], pos - old_pos);
 80022ae:	4b18      	ldr	r3, [pc, #96]	; (8002310 <SIMCOM_Check_Buffer+0x88>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a18      	ldr	r2, [pc, #96]	; (8002314 <SIMCOM_Check_Buffer+0x8c>)
 80022b4:	1898      	adds	r0, r3, r2
 80022b6:	4b16      	ldr	r3, [pc, #88]	; (8002310 <SIMCOM_Check_Buffer+0x88>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	4619      	mov	r1, r3
 80022c0:	f000 f82a 	bl	8002318 <SIMCOM_Fill_Buffer>
 80022c4:	e012      	b.n	80022ec <SIMCOM_Check_Buffer+0x64>
        } else {
            /* We are in "overflow" mode */
            /* First process data to the end of buffer */
            SIMCOM_Fill_Buffer(&SIMCOM_DMA_RX[old_pos], SIMCOM_DMA_RX_SZ - old_pos);
 80022c6:	4b12      	ldr	r3, [pc, #72]	; (8002310 <SIMCOM_Check_Buffer+0x88>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a12      	ldr	r2, [pc, #72]	; (8002314 <SIMCOM_Check_Buffer+0x8c>)
 80022cc:	441a      	add	r2, r3
 80022ce:	4b10      	ldr	r3, [pc, #64]	; (8002310 <SIMCOM_Check_Buffer+0x88>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80022d6:	4619      	mov	r1, r3
 80022d8:	4610      	mov	r0, r2
 80022da:	f000 f81d 	bl	8002318 <SIMCOM_Fill_Buffer>
            /* Check and continue with beginning of buffer */
            if (pos > 0) {
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d003      	beq.n	80022ec <SIMCOM_Check_Buffer+0x64>
                SIMCOM_Fill_Buffer(&SIMCOM_DMA_RX[0], pos);
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	480b      	ldr	r0, [pc, #44]	; (8002314 <SIMCOM_Check_Buffer+0x8c>)
 80022e8:	f000 f816 	bl	8002318 <SIMCOM_Fill_Buffer>
            }
        }
    }
    old_pos = pos; /* Save current position as old */
 80022ec:	4a08      	ldr	r2, [pc, #32]	; (8002310 <SIMCOM_Check_Buffer+0x88>)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6013      	str	r3, [r2, #0]

    /* Check and manually update if we reached end of buffer */
    if (old_pos == SIMCOM_DMA_RX_SZ) {
 80022f2:	4b07      	ldr	r3, [pc, #28]	; (8002310 <SIMCOM_Check_Buffer+0x88>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022fa:	d102      	bne.n	8002302 <SIMCOM_Check_Buffer+0x7a>
        old_pos = 0;
 80022fc:	4b04      	ldr	r3, [pc, #16]	; (8002310 <SIMCOM_Check_Buffer+0x88>)
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
    }
}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	2000151c 	.word	0x2000151c
 8002310:	20000e64 	.word	0x20000e64
 8002314:	20000a60 	.word	0x20000a60

08002318 <SIMCOM_Fill_Buffer>:

static void SIMCOM_Fill_Buffer(const void *data, size_t len) {
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
    /* Write data to buffer */
    memcpy(&SIMCOM_UART_RX[simcom_write], data, len);
 8002322:	4b09      	ldr	r3, [pc, #36]	; (8002348 <SIMCOM_Fill_Buffer+0x30>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a09      	ldr	r2, [pc, #36]	; (800234c <SIMCOM_Fill_Buffer+0x34>)
 8002328:	4413      	add	r3, r2
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	4618      	mov	r0, r3
 8002330:	f007 fcf1 	bl	8009d16 <memcpy>
    simcom_write += len;
 8002334:	4b04      	ldr	r3, [pc, #16]	; (8002348 <SIMCOM_Fill_Buffer+0x30>)
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	4413      	add	r3, r2
 800233c:	4a02      	ldr	r2, [pc, #8]	; (8002348 <SIMCOM_Fill_Buffer+0x30>)
 800233e:	6013      	str	r3, [r2, #0]
}
 8002340:	bf00      	nop
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	20000e60 	.word	0x20000e60
 800234c:	20000e78 	.word	0x20000e78

08002350 <SIMCOM_Reset_Buffer>:

void SIMCOM_Reset_Buffer(void) {
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
    // clear rx buffer
    memset(SIMCOM_UART_RX, 0x00, simcom_write);
 8002354:	4b05      	ldr	r3, [pc, #20]	; (800236c <SIMCOM_Reset_Buffer+0x1c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	461a      	mov	r2, r3
 800235a:	2100      	movs	r1, #0
 800235c:	4804      	ldr	r0, [pc, #16]	; (8002370 <SIMCOM_Reset_Buffer+0x20>)
 800235e:	f007 fce5 	bl	8009d2c <memset>
    simcom_write = 0;
 8002362:	4b02      	ldr	r3, [pc, #8]	; (800236c <SIMCOM_Reset_Buffer+0x1c>)
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
}
 8002368:	bf00      	nop
 800236a:	bd80      	pop	{r7, pc}
 800236c:	20000e60 	.word	0x20000e60
 8002370:	20000e78 	.word	0x20000e78

08002374 <SIMCOM_Transmit>:

uint8_t SIMCOM_Transmit(char *pData, uint16_t Size) {
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	807b      	strh	r3, [r7, #2]
    SIMCOM_Reset_Buffer();
 8002380:	f7ff ffe6 	bl	8002350 <SIMCOM_Reset_Buffer>

    return (HAL_UART_Transmit(&huart1, (uint8_t*) pData, Size, HAL_MAX_DELAY) == HAL_OK);
 8002384:	887a      	ldrh	r2, [r7, #2]
 8002386:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	4806      	ldr	r0, [pc, #24]	; (80023a8 <SIMCOM_Transmit+0x34>)
 800238e:	f006 fca2 	bl	8008cd6 <HAL_UART_Transmit>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	bf0c      	ite	eq
 8002398:	2301      	moveq	r3, #1
 800239a:	2300      	movne	r3, #0
 800239c:	b2db      	uxtb	r3, r3
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	2000157c 	.word	0x2000157c

080023ac <AT_FtpInitialize>:
static void AT_ParseText(const char *ptr, uint8_t *cnt, char *text, uint8_t size);
static int32_t AT_ParseNumber(const char *ptr, uint8_t *cnt);
//static float AT_ParseFloat(const char *ptr, uint8_t *cnt);

/* Public functions implementation --------------------------------------------*/
SIMCOM_RESULT AT_FtpInitialize(at_ftp_t *param) {
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af02      	add	r7, sp, #8
 80023b2:	6078      	str	r0, [r7, #4]
    SIMCOM_RESULT p;

    Simcom_Lock();
 80023b4:	f001 ff54 	bl	8004260 <Simcom_Lock>
    p = AT_SingleInteger("FTPCID", ATW, &param->id, 0);
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	2300      	movs	r3, #0
 80023bc:	2100      	movs	r1, #0
 80023be:	482e      	ldr	r0, [pc, #184]	; (8002478 <AT_FtpInitialize+0xcc>)
 80023c0:	f000 fe56 	bl	8003070 <AT_SingleInteger>
 80023c4:	4603      	mov	r3, r0
 80023c6:	73fb      	strb	r3, [r7, #15]

    // set server & credential
    if (p > 0) {
 80023c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	dd0a      	ble.n	80023e6 <AT_FtpInitialize+0x3a>
        p = AT_SingleString("FTPSERV", ATW, param->server, sizeof(param->server), 0);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	1d1a      	adds	r2, r3, #4
 80023d4:	2300      	movs	r3, #0
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	231e      	movs	r3, #30
 80023da:	2100      	movs	r1, #0
 80023dc:	4827      	ldr	r0, [pc, #156]	; (800247c <AT_FtpInitialize+0xd0>)
 80023de:	f000 fda9 	bl	8002f34 <AT_SingleString>
 80023e2:	4603      	mov	r3, r0
 80023e4:	73fb      	strb	r3, [r7, #15]
    }
    if (p > 0) {
 80023e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	dd0b      	ble.n	8002406 <AT_FtpInitialize+0x5a>
        p = AT_SingleString("FTPUN", ATW, param->username, sizeof(param->username), 0);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f103 0222 	add.w	r2, r3, #34	; 0x22
 80023f4:	2300      	movs	r3, #0
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	231e      	movs	r3, #30
 80023fa:	2100      	movs	r1, #0
 80023fc:	4820      	ldr	r0, [pc, #128]	; (8002480 <AT_FtpInitialize+0xd4>)
 80023fe:	f000 fd99 	bl	8002f34 <AT_SingleString>
 8002402:	4603      	mov	r3, r0
 8002404:	73fb      	strb	r3, [r7, #15]
    }
    if (p > 0) {
 8002406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800240a:	2b00      	cmp	r3, #0
 800240c:	dd0b      	ble.n	8002426 <AT_FtpInitialize+0x7a>
        p = AT_SingleString("FTPPW", ATW, param->password, sizeof(param->password), 0);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002414:	2300      	movs	r3, #0
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	2314      	movs	r3, #20
 800241a:	2100      	movs	r1, #0
 800241c:	4819      	ldr	r0, [pc, #100]	; (8002484 <AT_FtpInitialize+0xd8>)
 800241e:	f000 fd89 	bl	8002f34 <AT_SingleString>
 8002422:	4603      	mov	r3, r0
 8002424:	73fb      	strb	r3, [r7, #15]
    }
    // set path & file
    if (p > 0) {
 8002426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800242a:	2b00      	cmp	r3, #0
 800242c:	dd0b      	ble.n	8002446 <AT_FtpInitialize+0x9a>
        p = AT_SingleString("FTPGETPATH", ATW, param->path, sizeof(param->path), 0);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8002434:	2300      	movs	r3, #0
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	2314      	movs	r3, #20
 800243a:	2100      	movs	r1, #0
 800243c:	4812      	ldr	r0, [pc, #72]	; (8002488 <AT_FtpInitialize+0xdc>)
 800243e:	f000 fd79 	bl	8002f34 <AT_SingleString>
 8002442:	4603      	mov	r3, r0
 8002444:	73fb      	strb	r3, [r7, #15]
    }
    if (p > 0) {
 8002446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800244a:	2b00      	cmp	r3, #0
 800244c:	dd0b      	ble.n	8002466 <AT_FtpInitialize+0xba>
        p = AT_SingleString("FTPGETNAME", ATW, param->file, sizeof(param->file), 0);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002454:	2300      	movs	r3, #0
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	2314      	movs	r3, #20
 800245a:	2100      	movs	r1, #0
 800245c:	480b      	ldr	r0, [pc, #44]	; (800248c <AT_FtpInitialize+0xe0>)
 800245e:	f000 fd69 	bl	8002f34 <AT_SingleString>
 8002462:	4603      	mov	r3, r0
 8002464:	73fb      	strb	r3, [r7, #15]
    }

    Simcom_Unlock();
 8002466:	f001 ff02 	bl	800426e <Simcom_Unlock>
    return p;
 800246a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	0800a70c 	.word	0x0800a70c
 800247c:	0800a714 	.word	0x0800a714
 8002480:	0800a71c 	.word	0x0800a71c
 8002484:	0800a724 	.word	0x0800a724
 8002488:	0800a72c 	.word	0x0800a72c
 800248c:	0800a738 	.word	0x0800a738

08002490 <AT_FtpFileSize>:

SIMCOM_RESULT AT_FtpFileSize(at_ftp_t *param) {
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 8002498:	2300      	movs	r3, #0
 800249a:	73fb      	strb	r3, [r7, #15]
    uint8_t cnt, len = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	73bb      	strb	r3, [r7, #14]
    char *str = NULL;
 80024a0:	2300      	movs	r3, #0
 80024a2:	60bb      	str	r3, [r7, #8]

    Simcom_Lock();
 80024a4:	f001 fedc 	bl	8004260 <Simcom_Lock>
    // Read
    p = AT_CmdRead("AT+FTPSIZE\r", 90000, "+FTPSIZE: ", &str);
 80024a8:	f107 0308 	add.w	r3, r7, #8
 80024ac:	4a24      	ldr	r2, [pc, #144]	; (8002540 <AT_FtpFileSize+0xb0>)
 80024ae:	4925      	ldr	r1, [pc, #148]	; (8002544 <AT_FtpFileSize+0xb4>)
 80024b0:	4825      	ldr	r0, [pc, #148]	; (8002548 <AT_FtpFileSize+0xb8>)
 80024b2:	f000 fe6b 	bl	800318c <AT_CmdRead>
 80024b6:	4603      	mov	r3, r0
 80024b8:	73fb      	strb	r3, [r7, #15]
    if (p > 0) {
 80024ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	dd35      	ble.n	800252e <AT_FtpFileSize+0x9e>
        // parsing
        AT_ParseNumber(&str[len], &cnt);
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	7bbb      	ldrb	r3, [r7, #14]
 80024c6:	4413      	add	r3, r2
 80024c8:	f107 020d 	add.w	r2, r7, #13
 80024cc:	4611      	mov	r1, r2
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 ff01 	bl	80032d6 <AT_ParseNumber>
        len += cnt + 1;
 80024d4:	7b7a      	ldrb	r2, [r7, #13]
 80024d6:	7bbb      	ldrb	r3, [r7, #14]
 80024d8:	4413      	add	r3, r2
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	3301      	adds	r3, #1
 80024de:	73bb      	strb	r3, [r7, #14]
        param->response = AT_ParseNumber(&str[len], &cnt);
 80024e0:	68ba      	ldr	r2, [r7, #8]
 80024e2:	7bbb      	ldrb	r3, [r7, #14]
 80024e4:	4413      	add	r3, r2
 80024e6:	f107 020d 	add.w	r2, r7, #13
 80024ea:	4611      	mov	r1, r2
 80024ec:	4618      	mov	r0, r3
 80024ee:	f000 fef2 	bl	80032d6 <AT_ParseNumber>
 80024f2:	4603      	mov	r3, r0
 80024f4:	461a      	mov	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        if (param->response == FTP_FINISH) {
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002502:	2b00      	cmp	r3, #0
 8002504:	d113      	bne.n	800252e <AT_FtpFileSize+0x9e>
            len += cnt + 1;
 8002506:	7b7a      	ldrb	r2, [r7, #13]
 8002508:	7bbb      	ldrb	r3, [r7, #14]
 800250a:	4413      	add	r3, r2
 800250c:	b2db      	uxtb	r3, r3
 800250e:	3301      	adds	r3, #1
 8002510:	73bb      	strb	r3, [r7, #14]
            param->size = AT_ParseNumber(&str[len], &cnt);
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	7bbb      	ldrb	r3, [r7, #14]
 8002516:	4413      	add	r3, r2
 8002518:	f107 020d 	add.w	r2, r7, #13
 800251c:	4611      	mov	r1, r2
 800251e:	4618      	mov	r0, r3
 8002520:	f000 fed9 	bl	80032d6 <AT_ParseNumber>
 8002524:	4603      	mov	r3, r0
 8002526:	461a      	mov	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
    }
    Simcom_Unlock();
 800252e:	f001 fe9e 	bl	800426e <Simcom_Unlock>

    return p;
 8002532:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	0800a744 	.word	0x0800a744
 8002544:	00015f90 	.word	0x00015f90
 8002548:	0800a750 	.word	0x0800a750

0800254c <AT_FtpDownload>:

SIMCOM_RESULT AT_FtpDownload(at_ftpget_t *param) {
 800254c:	b580      	push	{r7, lr}
 800254e:	b09c      	sub	sp, #112	; 0x70
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 8002554:	2300      	movs	r3, #0
 8002556:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    uint32_t tick;
    uint8_t cnt, len = 0;
 800255a:	2300      	movs	r3, #0
 800255c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
    char *ptr, *str = NULL, cmd[80];
 8002560:	2300      	movs	r3, #0
 8002562:	65fb      	str	r3, [r7, #92]	; 0x5c

    Simcom_Lock();
 8002564:	f001 fe7c 	bl	8004260 <Simcom_Lock>
    // Open or Read
    if (param->mode == FTPGET_OPEN) {
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d108      	bne.n	8002582 <AT_FtpDownload+0x36>
        sprintf(cmd, "AT+FTPGET=%d\r", param->mode);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	f107 030c 	add.w	r3, r7, #12
 8002578:	4946      	ldr	r1, [pc, #280]	; (8002694 <AT_FtpDownload+0x148>)
 800257a:	4618      	mov	r0, r3
 800257c:	f007 fbde 	bl	8009d3c <siprintf>
 8002580:	e008      	b.n	8002594 <AT_FtpDownload+0x48>
    } else {
        sprintf(cmd, "AT+FTPGET=%d,%d\r", param->mode, param->reqlength);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	891b      	ldrh	r3, [r3, #8]
 800258a:	f107 000c 	add.w	r0, r7, #12
 800258e:	4942      	ldr	r1, [pc, #264]	; (8002698 <AT_FtpDownload+0x14c>)
 8002590:	f007 fbd4 	bl	8009d3c <siprintf>
    }

    p = AT_CmdRead(cmd, 90000, "+FTPGET: ", &str);
 8002594:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002598:	f107 000c 	add.w	r0, r7, #12
 800259c:	4a3f      	ldr	r2, [pc, #252]	; (800269c <AT_FtpDownload+0x150>)
 800259e:	4940      	ldr	r1, [pc, #256]	; (80026a0 <AT_FtpDownload+0x154>)
 80025a0:	f000 fdf4 	bl	800318c <AT_CmdRead>
 80025a4:	4603      	mov	r3, r0
 80025a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

    if (p > 0) {
 80025aa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	dd67      	ble.n	8002682 <AT_FtpDownload+0x136>
        // parsing
        AT_ParseNumber(&str[len], &cnt);
 80025b2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80025b4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80025b8:	4413      	add	r3, r2
 80025ba:	f107 0263 	add.w	r2, r7, #99	; 0x63
 80025be:	4611      	mov	r1, r2
 80025c0:	4618      	mov	r0, r3
 80025c2:	f000 fe88 	bl	80032d6 <AT_ParseNumber>
        len += cnt + 1;
 80025c6:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 80025ca:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80025ce:	4413      	add	r3, r2
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	3301      	adds	r3, #1
 80025d4:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
        if (param->mode == FTPGET_OPEN) {
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d10e      	bne.n	80025fe <AT_FtpDownload+0xb2>
            param->response = AT_ParseNumber(&str[len], &cnt);
 80025e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80025e2:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80025e6:	4413      	add	r3, r2
 80025e8:	f107 0263 	add.w	r2, r7, #99	; 0x63
 80025ec:	4611      	mov	r1, r2
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 fe71 	bl	80032d6 <AT_ParseNumber>
 80025f4:	4603      	mov	r3, r0
 80025f6:	461a      	mov	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	605a      	str	r2, [r3, #4]
 80025fc:	e041      	b.n	8002682 <AT_FtpDownload+0x136>
        } else {
            param->cnflength = AT_ParseNumber(&str[len], &cnt);
 80025fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002600:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002604:	4413      	add	r3, r2
 8002606:	f107 0263 	add.w	r2, r7, #99	; 0x63
 800260a:	4611      	mov	r1, r2
 800260c:	4618      	mov	r0, r3
 800260e:	f000 fe62 	bl	80032d6 <AT_ParseNumber>
 8002612:	4603      	mov	r3, r0
 8002614:	b29a      	uxth	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	815a      	strh	r2, [r3, #10]
            len += cnt + 2;
 800261a:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 800261e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002622:	4413      	add	r3, r2
 8002624:	b2db      	uxtb	r3, r3
 8002626:	3302      	adds	r3, #2
 8002628:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
            // start of file content
            param->ptr = &str[len];
 800262c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800262e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002632:	441a      	add	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	60da      	str	r2, [r3, #12]
            // wait until data transferred
            ptr = &str[len + param->cnflength + 2];
 8002638:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800263a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	8949      	ldrh	r1, [r1, #10]
 8002642:	440b      	add	r3, r1
 8002644:	3302      	adds	r3, #2
 8002646:	4413      	add	r3, r2
 8002648:	66bb      	str	r3, [r7, #104]	; 0x68

            tick = _GetTickMS();
 800264a:	f002 fa39 	bl	8004ac0 <_GetTickMS>
 800264e:	6678      	str	r0, [r7, #100]	; 0x64
            while (strncmp(ptr, SIMCOM_RSP_OK, strlen(SIMCOM_RSP_OK)) != 0) {
 8002650:	e00f      	b.n	8002672 <AT_FtpDownload+0x126>
                if (_GetTickMS() - tick > (5 * 1000)) {
 8002652:	f002 fa35 	bl	8004ac0 <_GetTickMS>
 8002656:	4602      	mov	r2, r0
 8002658:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002660:	4293      	cmp	r3, r2
 8002662:	d903      	bls.n	800266c <AT_FtpDownload+0x120>
                    p = SIM_RESULT_ERROR;
 8002664:	2300      	movs	r3, #0
 8002666:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                    break;
 800266a:	e00a      	b.n	8002682 <AT_FtpDownload+0x136>
                };
                _DelayMS(1);
 800266c:	2001      	movs	r0, #1
 800266e:	f002 fa1c 	bl	8004aaa <_DelayMS>
            while (strncmp(ptr, SIMCOM_RSP_OK, strlen(SIMCOM_RSP_OK)) != 0) {
 8002672:	2203      	movs	r2, #3
 8002674:	490b      	ldr	r1, [pc, #44]	; (80026a4 <AT_FtpDownload+0x158>)
 8002676:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002678:	f007 fb80 	bl	8009d7c <strncmp>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1e7      	bne.n	8002652 <AT_FtpDownload+0x106>
            };
        }
    }
    Simcom_Unlock();
 8002682:	f001 fdf4 	bl	800426e <Simcom_Unlock>

    return p;
 8002686:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800268a:	4618      	mov	r0, r3
 800268c:	3770      	adds	r7, #112	; 0x70
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	0800a75c 	.word	0x0800a75c
 8002698:	0800a76c 	.word	0x0800a76c
 800269c:	0800a780 	.word	0x0800a780
 80026a0:	00015f90 	.word	0x00015f90
 80026a4:	0800a78c 	.word	0x0800a78c

080026a8 <AT_FtpCurrentState>:

SIMCOM_RESULT AT_FtpCurrentState(AT_FTP_STATE *state) {
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
    return AT_SingleInteger("FTPSTATE", ATR, (int32_t*) state, 1);
 80026b0:	2301      	movs	r3, #1
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	2101      	movs	r1, #1
 80026b6:	4804      	ldr	r0, [pc, #16]	; (80026c8 <AT_FtpCurrentState+0x20>)
 80026b8:	f000 fcda 	bl	8003070 <AT_SingleInteger>
 80026bc:	4603      	mov	r3, r0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	0800a790 	.word	0x0800a790

080026cc <AT_CommandEchoMode>:

SIMCOM_RESULT AT_CommandEchoMode(uint8_t state) {
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	71fb      	strb	r3, [r7, #7]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 80026d6:	2300      	movs	r3, #0
 80026d8:	73fb      	strb	r3, [r7, #15]
    char cmd[6];

    Simcom_Lock();
 80026da:	f001 fdc1 	bl	8004260 <Simcom_Lock>
    // Write
    sprintf(cmd, "ATE%d\r", state);
 80026de:	79fa      	ldrb	r2, [r7, #7]
 80026e0:	f107 0308 	add.w	r3, r7, #8
 80026e4:	490a      	ldr	r1, [pc, #40]	; (8002710 <AT_CommandEchoMode+0x44>)
 80026e6:	4618      	mov	r0, r3
 80026e8:	f007 fb28 	bl	8009d3c <siprintf>
    p = AT_CmdWrite(cmd, 500, NULL);
 80026ec:	f107 0308 	add.w	r3, r7, #8
 80026f0:	2200      	movs	r2, #0
 80026f2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 fd2a 	bl	8003150 <AT_CmdWrite>
 80026fc:	4603      	mov	r3, r0
 80026fe:	73fb      	strb	r3, [r7, #15]
    Simcom_Unlock();
 8002700:	f001 fdb5 	bl	800426e <Simcom_Unlock>

    return p;
 8002704:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	0800a79c 	.word	0x0800a79c
 8002714:	00000000 	.word	0x00000000

08002718 <AT_SignalQualityReport>:

SIMCOM_RESULT AT_SignalQualityReport(at_csq_t *signal) {
 8002718:	b590      	push	{r4, r7, lr}
 800271a:	b087      	sub	sp, #28
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 8002720:	2300      	movs	r3, #0
 8002722:	75fb      	strb	r3, [r7, #23]
    uint8_t cnt, len = 0;
 8002724:	2300      	movs	r3, #0
 8002726:	75bb      	strb	r3, [r7, #22]
    char *str = NULL;
 8002728:	2300      	movs	r3, #0
 800272a:	60bb      	str	r3, [r7, #8]
    float dBm;

    Simcom_Lock();
 800272c:	f001 fd98 	bl	8004260 <Simcom_Lock>
    // Read
    p = AT_CmdRead("AT+CSQ\r", 500, "+CSQ: ", &str);
 8002730:	f107 0308 	add.w	r3, r7, #8
 8002734:	4a48      	ldr	r2, [pc, #288]	; (8002858 <AT_SignalQualityReport+0x140>)
 8002736:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800273a:	4848      	ldr	r0, [pc, #288]	; (800285c <AT_SignalQualityReport+0x144>)
 800273c:	f000 fd26 	bl	800318c <AT_CmdRead>
 8002740:	4603      	mov	r3, r0
 8002742:	75fb      	strb	r3, [r7, #23]
    if (p > 0) {
 8002744:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002748:	2b00      	cmp	r3, #0
 800274a:	dd77      	ble.n	800283c <AT_SignalQualityReport+0x124>
        signal->rssi = AT_ParseNumber(&str[len], &cnt);
 800274c:	68ba      	ldr	r2, [r7, #8]
 800274e:	7dbb      	ldrb	r3, [r7, #22]
 8002750:	4413      	add	r3, r2
 8002752:	f107 020f 	add.w	r2, r7, #15
 8002756:	4611      	mov	r1, r2
 8002758:	4618      	mov	r0, r3
 800275a:	f000 fdbc 	bl	80032d6 <AT_ParseNumber>
 800275e:	4603      	mov	r3, r0
 8002760:	b2da      	uxtb	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	701a      	strb	r2, [r3, #0]
        len += cnt + 1;
 8002766:	7bfa      	ldrb	r2, [r7, #15]
 8002768:	7dbb      	ldrb	r3, [r7, #22]
 800276a:	4413      	add	r3, r2
 800276c:	b2db      	uxtb	r3, r3
 800276e:	3301      	adds	r3, #1
 8002770:	75bb      	strb	r3, [r7, #22]
        signal->ber = AT_ParseNumber(&str[len], NULL);
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	7dbb      	ldrb	r3, [r7, #22]
 8002776:	4413      	add	r3, r2
 8002778:	2100      	movs	r1, #0
 800277a:	4618      	mov	r0, r3
 800277c:	f000 fdab 	bl	80032d6 <AT_ParseNumber>
 8002780:	4603      	mov	r3, r0
 8002782:	b2da      	uxtb	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	705a      	strb	r2, [r3, #1]

        // Formatting
        {
            // Handle not detectable value
            if (signal->rssi > 31) {
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2b1f      	cmp	r3, #31
 800278e:	d902      	bls.n	8002796 <AT_SignalQualityReport+0x7e>
                signal->rssi = 0;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	701a      	strb	r2, [r3, #0]
            }

            // Scale RSSI to dBm
            dBm = (signal->rssi * 63.0 / 31.0) - 115.0;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f7fd fefa 	bl	8000594 <__aeabi_i2d>
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	4b2e      	ldr	r3, [pc, #184]	; (8002860 <AT_SignalQualityReport+0x148>)
 80027a6:	f7fd ff5f 	bl	8000668 <__aeabi_dmul>
 80027aa:	4603      	mov	r3, r0
 80027ac:	460c      	mov	r4, r1
 80027ae:	4618      	mov	r0, r3
 80027b0:	4621      	mov	r1, r4
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	4b2b      	ldr	r3, [pc, #172]	; (8002864 <AT_SignalQualityReport+0x14c>)
 80027b8:	f7fe f880 	bl	80008bc <__aeabi_ddiv>
 80027bc:	4603      	mov	r3, r0
 80027be:	460c      	mov	r4, r1
 80027c0:	4618      	mov	r0, r3
 80027c2:	4621      	mov	r1, r4
 80027c4:	a322      	add	r3, pc, #136	; (adr r3, 8002850 <AT_SignalQualityReport+0x138>)
 80027c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ca:	f7fd fd95 	bl	80002f8 <__aeabi_dsub>
 80027ce:	4603      	mov	r3, r0
 80027d0:	460c      	mov	r4, r1
 80027d2:	4618      	mov	r0, r3
 80027d4:	4621      	mov	r1, r4
 80027d6:	f7fe f979 	bl	8000acc <__aeabi_d2f>
 80027da:	4603      	mov	r3, r0
 80027dc:	613b      	str	r3, [r7, #16]
            // Scale dBm to percentage
            signal->percent = (dBm + 115.0) * 100.0 / 63.0;
 80027de:	6938      	ldr	r0, [r7, #16]
 80027e0:	f7fd feea 	bl	80005b8 <__aeabi_f2d>
 80027e4:	a31a      	add	r3, pc, #104	; (adr r3, 8002850 <AT_SignalQualityReport+0x138>)
 80027e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ea:	f7fd fd87 	bl	80002fc <__adddf3>
 80027ee:	4603      	mov	r3, r0
 80027f0:	460c      	mov	r4, r1
 80027f2:	4618      	mov	r0, r3
 80027f4:	4621      	mov	r1, r4
 80027f6:	f04f 0200 	mov.w	r2, #0
 80027fa:	4b1b      	ldr	r3, [pc, #108]	; (8002868 <AT_SignalQualityReport+0x150>)
 80027fc:	f7fd ff34 	bl	8000668 <__aeabi_dmul>
 8002800:	4603      	mov	r3, r0
 8002802:	460c      	mov	r4, r1
 8002804:	4618      	mov	r0, r3
 8002806:	4621      	mov	r1, r4
 8002808:	f04f 0200 	mov.w	r2, #0
 800280c:	4b14      	ldr	r3, [pc, #80]	; (8002860 <AT_SignalQualityReport+0x148>)
 800280e:	f7fe f855 	bl	80008bc <__aeabi_ddiv>
 8002812:	4603      	mov	r3, r0
 8002814:	460c      	mov	r4, r1
 8002816:	4618      	mov	r0, r3
 8002818:	4621      	mov	r1, r4
 800281a:	f7fe f937 	bl	8000a8c <__aeabi_d2uiz>
 800281e:	4603      	mov	r3, r0
 8002820:	b2da      	uxtb	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	709a      	strb	r2, [r3, #2]

            // debugging
            LOG_Str("\nSimcom:RSSI = ");
 8002826:	4811      	ldr	r0, [pc, #68]	; (800286c <AT_SignalQualityReport+0x154>)
 8002828:	f001 f9d6 	bl	8003bd8 <LOG_Str>
            LOG_Int(signal->percent);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	789b      	ldrb	r3, [r3, #2]
 8002830:	4618      	mov	r0, r3
 8002832:	f001 f959 	bl	8003ae8 <LOG_Int>
            LOG_StrLn("%");
 8002836:	480e      	ldr	r0, [pc, #56]	; (8002870 <AT_SignalQualityReport+0x158>)
 8002838:	f001 f9e6 	bl	8003c08 <LOG_StrLn>
        }
    }
    Simcom_Unlock();
 800283c:	f001 fd17 	bl	800426e <Simcom_Unlock>

    return p;
 8002840:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002844:	4618      	mov	r0, r3
 8002846:	371c      	adds	r7, #28
 8002848:	46bd      	mov	sp, r7
 800284a:	bd90      	pop	{r4, r7, pc}
 800284c:	f3af 8000 	nop.w
 8002850:	00000000 	.word	0x00000000
 8002854:	405cc000 	.word	0x405cc000
 8002858:	0800a7a4 	.word	0x0800a7a4
 800285c:	0800a7ac 	.word	0x0800a7ac
 8002860:	404f8000 	.word	0x404f8000
 8002864:	403f0000 	.word	0x403f0000
 8002868:	40590000 	.word	0x40590000
 800286c:	0800a7b4 	.word	0x0800a7b4
 8002870:	0800a7c4 	.word	0x0800a7c4

08002874 <AT_BearerSettings>:
    Simcom_Unlock();

    return p;
}

SIMCOM_RESULT AT_BearerSettings(AT_MODE mode, at_sapbr_t *param) {
 8002874:	b590      	push	{r4, r7, lr}
 8002876:	b0ab      	sub	sp, #172	; 0xac
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	6039      	str	r1, [r7, #0]
 800287e:	71fb      	strb	r3, [r7, #7]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 8002880:	2300      	movs	r3, #0
 8002882:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    uint8_t cnt, len = 0;
 8002886:	2300      	movs	r3, #0
 8002888:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
    char *str = NULL, cmd[80];
 800288c:	2300      	movs	r3, #0
 800288e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    // Copy by value
    at_sapbr_t tmp = *param;
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	f107 030c 	add.w	r3, r7, #12
 8002898:	4611      	mov	r1, r2
 800289a:	2244      	movs	r2, #68	; 0x44
 800289c:	4618      	mov	r0, r3
 800289e:	f007 fa3a 	bl	8009d16 <memcpy>

    Simcom_Lock();
 80028a2:	f001 fcdd 	bl	8004260 <Simcom_Lock>
    // Read
    sprintf(cmd, "AT+SAPBR=%d,1\r", SAPBR_BEARER_QUERY);
 80028a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80028aa:	2202      	movs	r2, #2
 80028ac:	4990      	ldr	r1, [pc, #576]	; (8002af0 <AT_BearerSettings+0x27c>)
 80028ae:	4618      	mov	r0, r3
 80028b0:	f007 fa44 	bl	8009d3c <siprintf>
    p = AT_CmdRead(cmd, 500, "+SAPBR: ", &str);
 80028b4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80028b8:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80028bc:	4a8d      	ldr	r2, [pc, #564]	; (8002af4 <AT_BearerSettings+0x280>)
 80028be:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80028c2:	f000 fc63 	bl	800318c <AT_CmdRead>
 80028c6:	4603      	mov	r3, r0
 80028c8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    if (p > 0) {
 80028cc:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f340 8105 	ble.w	8002ae0 <AT_BearerSettings+0x26c>
        tmp.cmd_type = AT_ParseNumber(&str[len], &cnt);
 80028d6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80028da:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 80028de:	4413      	add	r3, r2
 80028e0:	f107 02a5 	add.w	r2, r7, #165	; 0xa5
 80028e4:	4611      	mov	r1, r2
 80028e6:	4618      	mov	r0, r3
 80028e8:	f000 fcf5 	bl	80032d6 <AT_ParseNumber>
 80028ec:	4603      	mov	r3, r0
 80028ee:	60fb      	str	r3, [r7, #12]
        len += cnt + 1;
 80028f0:	f897 20a5 	ldrb.w	r2, [r7, #165]	; 0xa5
 80028f4:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 80028f8:	4413      	add	r3, r2
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	3301      	adds	r3, #1
 80028fe:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
        tmp.status = AT_ParseNumber(&str[len], &cnt);
 8002902:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8002906:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 800290a:	4413      	add	r3, r2
 800290c:	f107 02a5 	add.w	r2, r7, #165	; 0xa5
 8002910:	4611      	mov	r1, r2
 8002912:	4618      	mov	r0, r3
 8002914:	f000 fcdf 	bl	80032d6 <AT_ParseNumber>
 8002918:	4603      	mov	r3, r0
 800291a:	613b      	str	r3, [r7, #16]

        // Read parameters
        p = AT_CmdRead("AT+SAPBR=4,1\r", 500, "+SAPBR:", &str);
 800291c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002920:	4a75      	ldr	r2, [pc, #468]	; (8002af8 <AT_BearerSettings+0x284>)
 8002922:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002926:	4875      	ldr	r0, [pc, #468]	; (8002afc <AT_BearerSettings+0x288>)
 8002928:	f000 fc30 	bl	800318c <AT_CmdRead>
 800292c:	4603      	mov	r3, r0
 800292e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        if (p > 0) {
 8002932:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8002936:	2b00      	cmp	r3, #0
 8002938:	dd38      	ble.n	80029ac <AT_BearerSettings+0x138>
            if (AT_FindInBuffer("APN: ", &str)) {
 800293a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800293e:	4619      	mov	r1, r3
 8002940:	486f      	ldr	r0, [pc, #444]	; (8002b00 <AT_BearerSettings+0x28c>)
 8002942:	f000 fc5b 	bl	80031fc <AT_FindInBuffer>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d009      	beq.n	8002960 <AT_BearerSettings+0xec>
                AT_ParseText(&str[0], NULL, tmp.con.apn, sizeof(tmp.con.apn));
 800294c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8002950:	f107 030c 	add.w	r3, r7, #12
 8002954:	f103 0208 	add.w	r2, r3, #8
 8002958:	2314      	movs	r3, #20
 800295a:	2100      	movs	r1, #0
 800295c:	f000 fc71 	bl	8003242 <AT_ParseText>
            }
            if (AT_FindInBuffer("USER: ", &str)) {
 8002960:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002964:	4619      	mov	r1, r3
 8002966:	4867      	ldr	r0, [pc, #412]	; (8002b04 <AT_BearerSettings+0x290>)
 8002968:	f000 fc48 	bl	80031fc <AT_FindInBuffer>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d009      	beq.n	8002986 <AT_BearerSettings+0x112>
                AT_ParseText(&str[0], NULL, tmp.con.username, sizeof(tmp.con.username));
 8002972:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8002976:	f107 030c 	add.w	r3, r7, #12
 800297a:	f103 021c 	add.w	r2, r3, #28
 800297e:	2314      	movs	r3, #20
 8002980:	2100      	movs	r1, #0
 8002982:	f000 fc5e 	bl	8003242 <AT_ParseText>
            }
            if (AT_FindInBuffer("PWD: ", &str)) {
 8002986:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800298a:	4619      	mov	r1, r3
 800298c:	485e      	ldr	r0, [pc, #376]	; (8002b08 <AT_BearerSettings+0x294>)
 800298e:	f000 fc35 	bl	80031fc <AT_FindInBuffer>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d009      	beq.n	80029ac <AT_BearerSettings+0x138>
                AT_ParseText(&str[0], NULL, tmp.con.password, sizeof(tmp.con.password));
 8002998:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800299c:	f107 030c 	add.w	r3, r7, #12
 80029a0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80029a4:	2314      	movs	r3, #20
 80029a6:	2100      	movs	r1, #0
 80029a8:	f000 fc4b 	bl	8003242 <AT_ParseText>
            }
        }

        // Write
        if (mode == ATW) {
 80029ac:	79fb      	ldrb	r3, [r7, #7]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f040 808e 	bne.w	8002ad0 <AT_BearerSettings+0x25c>
            if (memcmp(tmp.con.apn, param->con.apn, strlen(param->con.apn)) != 0) {
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	f103 0408 	add.w	r4, r3, #8
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	3308      	adds	r3, #8
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fd fc38 	bl	8000234 <strlen>
 80029c4:	4602      	mov	r2, r0
 80029c6:	f107 030c 	add.w	r3, r7, #12
 80029ca:	3308      	adds	r3, #8
 80029cc:	4621      	mov	r1, r4
 80029ce:	4618      	mov	r0, r3
 80029d0:	f007 f992 	bl	8009cf8 <memcmp>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d013      	beq.n	8002a02 <AT_BearerSettings+0x18e>
                sprintf(cmd, "AT+SAPBR=3,1,\"APN\",\"%s\"\r", param->con.apn);
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	f103 0208 	add.w	r2, r3, #8
 80029e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80029e4:	4949      	ldr	r1, [pc, #292]	; (8002b0c <AT_BearerSettings+0x298>)
 80029e6:	4618      	mov	r0, r3
 80029e8:	f007 f9a8 	bl	8009d3c <siprintf>
                p = AT_CmdWrite(cmd, 500, NULL);
 80029ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80029f0:	2200      	movs	r2, #0
 80029f2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80029f6:	4618      	mov	r0, r3
 80029f8:	f000 fbaa 	bl	8003150 <AT_CmdWrite>
 80029fc:	4603      	mov	r3, r0
 80029fe:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
            }
            if (memcmp(tmp.con.apn, param->con.username, strlen(param->con.username)) != 0) {
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	f103 041c 	add.w	r4, r3, #28
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	331c      	adds	r3, #28
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fd fc11 	bl	8000234 <strlen>
 8002a12:	4602      	mov	r2, r0
 8002a14:	f107 030c 	add.w	r3, r7, #12
 8002a18:	3308      	adds	r3, #8
 8002a1a:	4621      	mov	r1, r4
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f007 f96b 	bl	8009cf8 <memcmp>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d013      	beq.n	8002a50 <AT_BearerSettings+0x1dc>
                sprintf(cmd, "AT+SAPBR=3,1,\"USER\",\"%s\"\r", param->con.username);
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	f103 021c 	add.w	r2, r3, #28
 8002a2e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002a32:	4937      	ldr	r1, [pc, #220]	; (8002b10 <AT_BearerSettings+0x29c>)
 8002a34:	4618      	mov	r0, r3
 8002a36:	f007 f981 	bl	8009d3c <siprintf>
                p = AT_CmdWrite(cmd, 500, NULL);
 8002a3a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002a44:	4618      	mov	r0, r3
 8002a46:	f000 fb83 	bl	8003150 <AT_CmdWrite>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
            }
            if (memcmp(tmp.con.apn, param->con.password, strlen(param->con.password)) != 0) {
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	3330      	adds	r3, #48	; 0x30
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7fd fbea 	bl	8000234 <strlen>
 8002a60:	4602      	mov	r2, r0
 8002a62:	f107 030c 	add.w	r3, r7, #12
 8002a66:	3308      	adds	r3, #8
 8002a68:	4621      	mov	r1, r4
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f007 f944 	bl	8009cf8 <memcmp>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d013      	beq.n	8002a9e <AT_BearerSettings+0x22a>
                sprintf(cmd, "AT+SAPBR=3,1,\"PWD\",\"%s\"\r", param->con.password);
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002a7c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002a80:	4924      	ldr	r1, [pc, #144]	; (8002b14 <AT_BearerSettings+0x2a0>)
 8002a82:	4618      	mov	r0, r3
 8002a84:	f007 f95a 	bl	8009d3c <siprintf>
                p = AT_CmdWrite(cmd, 500, NULL);
 8002a88:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 fb5c 	bl	8003150 <AT_CmdWrite>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
            }

            // open or close
            if (tmp.status != param->status) {
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d01b      	beq.n	8002ae0 <AT_BearerSettings+0x26c>
                sprintf(cmd, "AT+SAPBR=%d,1\r", param->cmd_type);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002ab0:	490f      	ldr	r1, [pc, #60]	; (8002af0 <AT_BearerSettings+0x27c>)
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f007 f942 	bl	8009d3c <siprintf>
                p = AT_CmdWrite(cmd, 60000, NULL);
 8002ab8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002abc:	2200      	movs	r2, #0
 8002abe:	f64e 2160 	movw	r1, #60000	; 0xea60
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f000 fb44 	bl	8003150 <AT_CmdWrite>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002ace:	e007      	b.n	8002ae0 <AT_BearerSettings+0x26c>
            }
        } else {
            *param = tmp;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f107 030c 	add.w	r3, r7, #12
 8002ad8:	2244      	movs	r2, #68	; 0x44
 8002ada:	4619      	mov	r1, r3
 8002adc:	f007 f91b 	bl	8009d16 <memcpy>
        }
    }
    Simcom_Unlock();
 8002ae0:	f001 fbc5 	bl	800426e <Simcom_Unlock>

    return p;
 8002ae4:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	37ac      	adds	r7, #172	; 0xac
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd90      	pop	{r4, r7, pc}
 8002af0:	0800a898 	.word	0x0800a898
 8002af4:	0800a8a8 	.word	0x0800a8a8
 8002af8:	0800a8b4 	.word	0x0800a8b4
 8002afc:	0800a8bc 	.word	0x0800a8bc
 8002b00:	0800a8cc 	.word	0x0800a8cc
 8002b04:	0800a8d4 	.word	0x0800a8d4
 8002b08:	0800a8dc 	.word	0x0800a8dc
 8002b0c:	0800a8e4 	.word	0x0800a8e4
 8002b10:	0800a900 	.word	0x0800a900
 8002b14:	0800a91c 	.word	0x0800a91c

08002b18 <AT_RadioAccessTechnology>:

SIMCOM_RESULT AT_RadioAccessTechnology(AT_MODE mode, at_cnmp_t *param) {
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b08a      	sub	sp, #40	; 0x28
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	4603      	mov	r3, r0
 8002b20:	6039      	str	r1, [r7, #0]
 8002b22:	71fb      	strb	r3, [r7, #7]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 8002b24:	2300      	movs	r3, #0
 8002b26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t cnt, len = 0;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    char *str = NULL, cmd[14];
 8002b30:	2300      	movs	r3, #0
 8002b32:	623b      	str	r3, [r7, #32]

    // Copy by value
    at_cnmp_t tmp = *param;
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	f107 0308 	add.w	r3, r7, #8
 8002b3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b3e:	e883 0003 	stmia.w	r3, {r0, r1}

    Simcom_Lock();
 8002b42:	f001 fb8d 	bl	8004260 <Simcom_Lock>
    // Read
    p = AT_CmdRead("AT+CNMP?\r", 500, "+CNMP: ", &str);
 8002b46:	f107 0320 	add.w	r3, r7, #32
 8002b4a:	4a3a      	ldr	r2, [pc, #232]	; (8002c34 <AT_RadioAccessTechnology+0x11c>)
 8002b4c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002b50:	4839      	ldr	r0, [pc, #228]	; (8002c38 <AT_RadioAccessTechnology+0x120>)
 8002b52:	f000 fb1b 	bl	800318c <AT_CmdRead>
 8002b56:	4603      	mov	r3, r0
 8002b58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (p > 0) {
 8002b5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	dd5e      	ble.n	8002c22 <AT_RadioAccessTechnology+0x10a>
        param->mode = AT_ParseNumber(&str[len], &cnt);
 8002b64:	6a3a      	ldr	r2, [r7, #32]
 8002b66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f107 0225 	add.w	r2, r7, #37	; 0x25
 8002b70:	4611      	mov	r1, r2
 8002b72:	4618      	mov	r0, r3
 8002b74:	f000 fbaf 	bl	80032d6 <AT_ParseNumber>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	601a      	str	r2, [r3, #0]
        if (param->mode == CNMP_ACT_AUTO) {
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d116      	bne.n	8002bb6 <AT_RadioAccessTechnology+0x9e>
            len += cnt + 1;
 8002b88:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8002b8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002b90:	4413      	add	r3, r2
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	3301      	adds	r3, #1
 8002b96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            param->preferred = AT_ParseNumber(&str[len], &cnt);
 8002b9a:	6a3a      	ldr	r2, [r7, #32]
 8002b9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002ba0:	4413      	add	r3, r2
 8002ba2:	f107 0225 	add.w	r2, r7, #37	; 0x25
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f000 fb94 	bl	80032d6 <AT_ParseNumber>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	605a      	str	r2, [r3, #4]
        }

        // Write
        if (mode == ATW) {
 8002bb6:	79fb      	ldrb	r3, [r7, #7]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d12a      	bne.n	8002c12 <AT_RadioAccessTechnology+0xfa>
            if (memcmp(&tmp, param, sizeof(at_cnmp_t)) != 0) {
 8002bbc:	f107 0308 	add.w	r3, r7, #8
 8002bc0:	2208      	movs	r2, #8
 8002bc2:	6839      	ldr	r1, [r7, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f007 f897 	bl	8009cf8 <memcmp>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d028      	beq.n	8002c22 <AT_RadioAccessTechnology+0x10a>
                if (tmp.mode == CNMP_ACT_AUTO) {
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d109      	bne.n	8002bea <AT_RadioAccessTechnology+0xd2>
                    sprintf(cmd, "AT+CNMP=%d%d\r", param->mode, param->preferred);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f107 0010 	add.w	r0, r7, #16
 8002be2:	4916      	ldr	r1, [pc, #88]	; (8002c3c <AT_RadioAccessTechnology+0x124>)
 8002be4:	f007 f8aa 	bl	8009d3c <siprintf>
 8002be8:	e007      	b.n	8002bfa <AT_RadioAccessTechnology+0xe2>
                } else {
                    sprintf(cmd, "AT+CNMP=%d\r", param->mode);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	f107 0310 	add.w	r3, r7, #16
 8002bf2:	4913      	ldr	r1, [pc, #76]	; (8002c40 <AT_RadioAccessTechnology+0x128>)
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f007 f8a1 	bl	8009d3c <siprintf>
                }

                p = AT_CmdWrite(cmd, 10000, NULL);
 8002bfa:	f107 0310 	add.w	r3, r7, #16
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f242 7110 	movw	r1, #10000	; 0x2710
 8002c04:	4618      	mov	r0, r3
 8002c06:	f000 faa3 	bl	8003150 <AT_CmdWrite>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002c10:	e007      	b.n	8002c22 <AT_RadioAccessTechnology+0x10a>
            }
        } else {
            *param = tmp;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	461a      	mov	r2, r3
 8002c16:	f107 0308 	add.w	r3, r7, #8
 8002c1a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002c1e:	e882 0003 	stmia.w	r2, {r0, r1}
        }
    }
    Simcom_Unlock();
 8002c22:	f001 fb24 	bl	800426e <Simcom_Unlock>

    return p;
 8002c26:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3728      	adds	r7, #40	; 0x28
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	0800a938 	.word	0x0800a938
 8002c38:	0800a940 	.word	0x0800a940
 8002c3c:	0800a94c 	.word	0x0800a94c
 8002c40:	0800a95c 	.word	0x0800a95c

08002c44 <AT_NetworkAttachedStatus>:

SIMCOM_RESULT AT_NetworkAttachedStatus(AT_MODE mode, at_csact_t *param) {
 8002c44:	b590      	push	{r4, r7, lr}
 8002c46:	b08d      	sub	sp, #52	; 0x34
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	6039      	str	r1, [r7, #0]
 8002c4e:	71fb      	strb	r3, [r7, #7]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 8002c50:	2300      	movs	r3, #0
 8002c52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t cnt, len = 0;
 8002c56:	2300      	movs	r3, #0
 8002c58:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    char *str = NULL, cmd[14];
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	62bb      	str	r3, [r7, #40]	; 0x28

    // Copy by value
    at_csact_t tmp = *param;
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	f107 030c 	add.w	r3, r7, #12
 8002c66:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c68:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    Simcom_Lock();
 8002c6c:	f001 faf8 	bl	8004260 <Simcom_Lock>
    // Read
    p = AT_CmdRead("AT+CSACT?\r", 500, "+CSACT: ", &str);
 8002c70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c74:	4a46      	ldr	r2, [pc, #280]	; (8002d90 <AT_NetworkAttachedStatus+0x14c>)
 8002c76:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002c7a:	4846      	ldr	r0, [pc, #280]	; (8002d94 <AT_NetworkAttachedStatus+0x150>)
 8002c7c:	f000 fa86 	bl	800318c <AT_CmdRead>
 8002c80:	4603      	mov	r3, r0
 8002c82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (p > 0) {
 8002c86:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	dd77      	ble.n	8002d7e <AT_NetworkAttachedStatus+0x13a>
        tmp.act = AT_ParseNumber(&str[len], &cnt);
 8002c8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c90:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002c94:	4413      	add	r3, r2
 8002c96:	f107 022d 	add.w	r2, r7, #45	; 0x2d
 8002c9a:	4611      	mov	r1, r2
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f000 fb1a 	bl	80032d6 <AT_ParseNumber>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	60fb      	str	r3, [r7, #12]
        len += cnt + 1;
 8002ca6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002caa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002cae:	4413      	add	r3, r2
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        AT_ParseText(&str[len], &cnt, tmp.rac, sizeof(tmp.rac));
 8002cb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002cbe:	18d0      	adds	r0, r2, r3
 8002cc0:	f107 030c 	add.w	r3, r7, #12
 8002cc4:	1d1a      	adds	r2, r3, #4
 8002cc6:	f107 012d 	add.w	r1, r7, #45	; 0x2d
 8002cca:	2303      	movs	r3, #3
 8002ccc:	f000 fab9 	bl	8003242 <AT_ParseText>
        len += cnt + 1;
 8002cd0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002cd4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002cd8:	4413      	add	r3, r2
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	3301      	adds	r3, #1
 8002cde:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        tmp.creg = AT_ParseNumber(&str[len], &cnt);
 8002ce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ce4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002ce8:	4413      	add	r3, r2
 8002cea:	f107 022d 	add.w	r2, r7, #45	; 0x2d
 8002cee:	4611      	mov	r1, r2
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f000 faf0 	bl	80032d6 <AT_ParseNumber>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	74fb      	strb	r3, [r7, #19]
        len += cnt + 1;
 8002cfc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002d00:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002d04:	4413      	add	r3, r2
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	3301      	adds	r3, #1
 8002d0a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        tmp.cgreg = AT_ParseNumber(&str[len], &cnt);
 8002d0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d10:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002d14:	4413      	add	r3, r2
 8002d16:	f107 022d 	add.w	r2, r7, #45	; 0x2d
 8002d1a:	4611      	mov	r1, r2
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f000 fada 	bl	80032d6 <AT_ParseNumber>
 8002d22:	4603      	mov	r3, r0
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	753b      	strb	r3, [r7, #20]

        // Write
        if (mode == ATW) {
 8002d28:	79fb      	ldrb	r3, [r7, #7]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d11f      	bne.n	8002d6e <AT_NetworkAttachedStatus+0x12a>
            if (tmp.cgreg != param->creg || tmp.cgreg != param->cgreg) {
 8002d2e:	7d3a      	ldrb	r2, [r7, #20]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	79db      	ldrb	r3, [r3, #7]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d104      	bne.n	8002d42 <AT_NetworkAttachedStatus+0xfe>
 8002d38:	7d3a      	ldrb	r2, [r7, #20]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	7a1b      	ldrb	r3, [r3, #8]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d01d      	beq.n	8002d7e <AT_NetworkAttachedStatus+0x13a>
                sprintf(cmd, "AT+CSACT=%d,%d\r", param->creg, param->cgreg);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	79db      	ldrb	r3, [r3, #7]
 8002d46:	461a      	mov	r2, r3
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	7a1b      	ldrb	r3, [r3, #8]
 8002d4c:	f107 0018 	add.w	r0, r7, #24
 8002d50:	4911      	ldr	r1, [pc, #68]	; (8002d98 <AT_NetworkAttachedStatus+0x154>)
 8002d52:	f006 fff3 	bl	8009d3c <siprintf>
                p = AT_CmdWrite(cmd, 500, NULL);
 8002d56:	f107 0318 	add.w	r3, r7, #24
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002d60:	4618      	mov	r0, r3
 8002d62:	f000 f9f5 	bl	8003150 <AT_CmdWrite>
 8002d66:	4603      	mov	r3, r0
 8002d68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002d6c:	e007      	b.n	8002d7e <AT_NetworkAttachedStatus+0x13a>
            }
        } else {
            *param = tmp;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	461c      	mov	r4, r3
 8002d72:	f107 030c 	add.w	r3, r7, #12
 8002d76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002d7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        }
    }
    Simcom_Unlock();
 8002d7e:	f001 fa76 	bl	800426e <Simcom_Unlock>

    return p;
 8002d82:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3734      	adds	r7, #52	; 0x34
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd90      	pop	{r4, r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	0800a968 	.word	0x0800a968
 8002d94:	0800a974 	.word	0x0800a974
 8002d98:	0800a980 	.word	0x0800a980

08002d9c <AT_NetworkRegistration>:

SIMCOM_RESULT AT_NetworkRegistration(char command[20], AT_MODE mode, at_c_greg_t *param) {
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b090      	sub	sp, #64	; 0x40
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	460b      	mov	r3, r1
 8002da6:	607a      	str	r2, [r7, #4]
 8002da8:	72fb      	strb	r3, [r7, #11]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 8002daa:	2300      	movs	r3, #0
 8002dac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    uint8_t cnt, len = 0;
 8002db0:	2300      	movs	r3, #0
 8002db2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    char *str = NULL, cmd[14], res[15];
 8002db6:	2300      	movs	r3, #0
 8002db8:	63bb      	str	r3, [r7, #56]	; 0x38

    // Copy by value
    at_c_greg_t tmp = *param;
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	f107 0310 	add.w	r3, r7, #16
 8002dc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002dc4:	e883 0003 	stmia.w	r3, {r0, r1}

    Simcom_Lock();
 8002dc8:	f001 fa4a 	bl	8004260 <Simcom_Lock>
    // Read
    sprintf(cmd, "AT+%s?\r", command);
 8002dcc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	4937      	ldr	r1, [pc, #220]	; (8002eb0 <AT_NetworkRegistration+0x114>)
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f006 ffb1 	bl	8009d3c <siprintf>
    sprintf(res, "+%s: ", command);
 8002dda:	f107 0318 	add.w	r3, r7, #24
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	4934      	ldr	r1, [pc, #208]	; (8002eb4 <AT_NetworkRegistration+0x118>)
 8002de2:	4618      	mov	r0, r3
 8002de4:	f006 ffaa 	bl	8009d3c <siprintf>
    p = AT_CmdRead(cmd, 500, res, &str);
 8002de8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002dec:	f107 0218 	add.w	r2, r7, #24
 8002df0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002df4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002df8:	f000 f9c8 	bl	800318c <AT_CmdRead>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (p > 0) {
 8002e02:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	dd49      	ble.n	8002e9e <AT_NetworkRegistration+0x102>
        tmp.mode = AT_ParseNumber(&str[len], &cnt);
 8002e0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e0c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002e10:	4413      	add	r3, r2
 8002e12:	f107 023d 	add.w	r2, r7, #61	; 0x3d
 8002e16:	4611      	mov	r1, r2
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f000 fa5c 	bl	80032d6 <AT_ParseNumber>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	613b      	str	r3, [r7, #16]
        len += cnt + 1;
 8002e22:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002e26:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002e2a:	4413      	add	r3, r2
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	3301      	adds	r3, #1
 8002e30:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        tmp.stat = AT_ParseNumber(&str[len], &cnt);
 8002e34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e36:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f107 023d 	add.w	r2, r7, #61	; 0x3d
 8002e40:	4611      	mov	r1, r2
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 fa47 	bl	80032d6 <AT_ParseNumber>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	617b      	str	r3, [r7, #20]

        // Write
        if (mode == ATW) {
 8002e4c:	7afb      	ldrb	r3, [r7, #11]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d11d      	bne.n	8002e8e <AT_NetworkRegistration+0xf2>
            if (memcmp(&tmp, param, sizeof(tmp)) != 0) {
 8002e52:	f107 0310 	add.w	r3, r7, #16
 8002e56:	2208      	movs	r2, #8
 8002e58:	6879      	ldr	r1, [r7, #4]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f006 ff4c 	bl	8009cf8 <memcmp>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d01b      	beq.n	8002e9e <AT_NetworkRegistration+0x102>
                sprintf(cmd, "AT+%s=%d\r", command, param->mode);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	4911      	ldr	r1, [pc, #68]	; (8002eb8 <AT_NetworkRegistration+0x11c>)
 8002e72:	f006 ff63 	bl	8009d3c <siprintf>
                p = AT_CmdWrite(cmd, 500, NULL);
 8002e76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002e80:	4618      	mov	r0, r3
 8002e82:	f000 f965 	bl	8003150 <AT_CmdWrite>
 8002e86:	4603      	mov	r3, r0
 8002e88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002e8c:	e007      	b.n	8002e9e <AT_NetworkRegistration+0x102>
            }
        } else {
            *param = tmp;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	461a      	mov	r2, r3
 8002e92:	f107 0310 	add.w	r3, r7, #16
 8002e96:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002e9a:	e882 0003 	stmia.w	r2, {r0, r1}
        }
    }
    Simcom_Unlock();
 8002e9e:	f001 f9e6 	bl	800426e <Simcom_Unlock>

    return p;
 8002ea2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3740      	adds	r7, #64	; 0x40
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	0800a990 	.word	0x0800a990
 8002eb4:	0800a998 	.word	0x0800a998
 8002eb8:	0800a9a0 	.word	0x0800a9a0

08002ebc <AT_ConfigureSlowClock>:

SIMCOM_RESULT AT_EnableLocalTimestamp(AT_MODE mode, AT_BOOL *state) {
    return AT_SingleInteger("CLTS", mode, (int32_t*) state, 0);
}

SIMCOM_RESULT AT_ConfigureSlowClock(AT_MODE mode, AT_CSCLK *state) {
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	6039      	str	r1, [r7, #0]
 8002ec6:	71fb      	strb	r3, [r7, #7]
    return AT_SingleInteger("CSCLK", mode, (int32_t*) state, 0);
 8002ec8:	79f9      	ldrb	r1, [r7, #7]
 8002eca:	2300      	movs	r3, #0
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	4804      	ldr	r0, [pc, #16]	; (8002ee0 <AT_ConfigureSlowClock+0x24>)
 8002ed0:	f000 f8ce 	bl	8003070 <AT_SingleInteger>
 8002ed4:	4603      	mov	r3, r0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	0800a9c4 	.word	0x0800a9c4

08002ee4 <AT_ReportMobileEquipmentError>:

SIMCOM_RESULT AT_ReportMobileEquipmentError(AT_MODE mode, AT_CMEE *state) {
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	6039      	str	r1, [r7, #0]
 8002eee:	71fb      	strb	r3, [r7, #7]
    return AT_SingleInteger("CMEE", mode, (int32_t*) state, 0);
 8002ef0:	79f9      	ldrb	r1, [r7, #7]
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	4804      	ldr	r0, [pc, #16]	; (8002f08 <AT_ReportMobileEquipmentError+0x24>)
 8002ef8:	f000 f8ba 	bl	8003070 <AT_SingleInteger>
 8002efc:	4603      	mov	r3, r0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	0800a9cc 	.word	0x0800a9cc

08002f0c <AT_FixedLocalRate>:

SIMCOM_RESULT AT_FixedLocalRate(AT_MODE mode, uint32_t *rate) {
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	6039      	str	r1, [r7, #0]
 8002f16:	71fb      	strb	r3, [r7, #7]
    return AT_SingleInteger("IPR", mode, (int32_t*) rate, 0);
 8002f18:	79f9      	ldrb	r1, [r7, #7]
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	4804      	ldr	r0, [pc, #16]	; (8002f30 <AT_FixedLocalRate+0x24>)
 8002f20:	f000 f8a6 	bl	8003070 <AT_SingleInteger>
 8002f24:	4603      	mov	r3, r0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	0800a9d4 	.word	0x0800a9d4

08002f34 <AT_SingleString>:

/* Private functions implementation --------------------------------------------*/
static SIMCOM_RESULT AT_SingleString(char command[20], AT_MODE mode, char *string, uint8_t size, uint8_t executor) {
 8002f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f36:	b093      	sub	sp, #76	; 0x4c
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	607a      	str	r2, [r7, #4]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	460b      	mov	r3, r1
 8002f42:	72fb      	strb	r3, [r7, #11]
 8002f44:	4613      	mov	r3, r2
 8002f46:	72bb      	strb	r3, [r7, #10]
 8002f48:	466b      	mov	r3, sp
 8002f4a:	461e      	mov	r6, r3
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    char *str = NULL, cmd[20], res[20], tmp[size];
 8002f52:	2300      	movs	r3, #0
 8002f54:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f56:	7abd      	ldrb	r5, [r7, #10]
 8002f58:	462b      	mov	r3, r5
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	643b      	str	r3, [r7, #64]	; 0x40
 8002f5e:	b2e9      	uxtb	r1, r5
 8002f60:	f04f 0200 	mov.w	r2, #0
 8002f64:	f04f 0300 	mov.w	r3, #0
 8002f68:	f04f 0400 	mov.w	r4, #0
 8002f6c:	00d4      	lsls	r4, r2, #3
 8002f6e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002f72:	00cb      	lsls	r3, r1, #3
 8002f74:	b2e9      	uxtb	r1, r5
 8002f76:	f04f 0200 	mov.w	r2, #0
 8002f7a:	f04f 0300 	mov.w	r3, #0
 8002f7e:	f04f 0400 	mov.w	r4, #0
 8002f82:	00d4      	lsls	r4, r2, #3
 8002f84:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002f88:	00cb      	lsls	r3, r1, #3
 8002f8a:	462b      	mov	r3, r5
 8002f8c:	3307      	adds	r3, #7
 8002f8e:	08db      	lsrs	r3, r3, #3
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	ebad 0d03 	sub.w	sp, sp, r3
 8002f96:	466b      	mov	r3, sp
 8002f98:	3300      	adds	r3, #0
 8002f9a:	63fb      	str	r3, [r7, #60]	; 0x3c

    // Copy by vale
    memcpy(tmp, string, size);
 8002f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f9e:	7aba      	ldrb	r2, [r7, #10]
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f006 feb7 	bl	8009d16 <memcpy>

    Simcom_Lock();
 8002fa8:	f001 f95a 	bl	8004260 <Simcom_Lock>
    // Read
    sprintf(cmd, "AT+%s%s", command, executor ? "\r" : "?\r");
 8002fac:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <AT_SingleString+0x84>
 8002fb4:	4b29      	ldr	r3, [pc, #164]	; (800305c <AT_SingleString+0x128>)
 8002fb6:	e000      	b.n	8002fba <AT_SingleString+0x86>
 8002fb8:	4b29      	ldr	r3, [pc, #164]	; (8003060 <AT_SingleString+0x12c>)
 8002fba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	4928      	ldr	r1, [pc, #160]	; (8003064 <AT_SingleString+0x130>)
 8002fc2:	f006 febb 	bl	8009d3c <siprintf>
    sprintf(res, "+%s: ", command);
 8002fc6:	f107 0310 	add.w	r3, r7, #16
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	4926      	ldr	r1, [pc, #152]	; (8003068 <AT_SingleString+0x134>)
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f006 feb4 	bl	8009d3c <siprintf>
    p = AT_CmdRead(cmd, 1000, res, &str);
 8002fd4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002fd8:	f107 0210 	add.w	r2, r7, #16
 8002fdc:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002fe0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002fe4:	f000 f8d2 	bl	800318c <AT_CmdRead>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (p > 0) {
 8002fee:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	dd29      	ble.n	800304a <AT_SingleString+0x116>
        AT_ParseText(&str[0], NULL, tmp, sizeof(tmp));
 8002ff6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002ff8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ffa:	462b      	mov	r3, r5
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	f000 f920 	bl	8003242 <AT_ParseText>

        // Write
        if (mode == ATW) {
 8003002:	7afb      	ldrb	r3, [r7, #11]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d11a      	bne.n	800303e <AT_SingleString+0x10a>
            if (strcmp(tmp, string) != 0) {
 8003008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	4618      	mov	r0, r3
 800300e:	f7fd f907 	bl	8000220 <strcmp>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d018      	beq.n	800304a <AT_SingleString+0x116>
                sprintf(cmd, "AT+%s=\"%s\"\r", command, string);
 8003018:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	4912      	ldr	r1, [pc, #72]	; (800306c <AT_SingleString+0x138>)
 8003022:	f006 fe8b 	bl	8009d3c <siprintf>
                p = AT_CmdWrite(cmd, 500, NULL);
 8003026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800302a:	2200      	movs	r2, #0
 800302c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003030:	4618      	mov	r0, r3
 8003032:	f000 f88d 	bl	8003150 <AT_CmdWrite>
 8003036:	4603      	mov	r3, r0
 8003038:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800303c:	e005      	b.n	800304a <AT_SingleString+0x116>
            }
        } else {
            memcpy(string, tmp, size);
 800303e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003040:	7aba      	ldrb	r2, [r7, #10]
 8003042:	4619      	mov	r1, r3
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f006 fe66 	bl	8009d16 <memcpy>
        }
    }
    Simcom_Unlock();
 800304a:	f001 f910 	bl	800426e <Simcom_Unlock>

    return p;
 800304e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8003052:	46b5      	mov	sp, r6
}
 8003054:	4618      	mov	r0, r3
 8003056:	374c      	adds	r7, #76	; 0x4c
 8003058:	46bd      	mov	sp, r7
 800305a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800305c:	0800a9d8 	.word	0x0800a9d8
 8003060:	0800a9dc 	.word	0x0800a9dc
 8003064:	0800a9e0 	.word	0x0800a9e0
 8003068:	0800a998 	.word	0x0800a998
 800306c:	0800a9e8 	.word	0x0800a9e8

08003070 <AT_SingleInteger>:

static SIMCOM_RESULT AT_SingleInteger(char command[20], AT_MODE mode, int32_t *value, uint8_t executor) {
 8003070:	b580      	push	{r7, lr}
 8003072:	b092      	sub	sp, #72	; 0x48
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	607a      	str	r2, [r7, #4]
 800307a:	461a      	mov	r2, r3
 800307c:	460b      	mov	r3, r1
 800307e:	72fb      	strb	r3, [r7, #11]
 8003080:	4613      	mov	r3, r2
 8003082:	72bb      	strb	r3, [r7, #10]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 8003084:	2300      	movs	r3, #0
 8003086:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    char *str = NULL, cmd[20], res[20];
 800308a:	2300      	movs	r3, #0
 800308c:	63fb      	str	r3, [r7, #60]	; 0x3c

    // Copy by vale
    int32_t tmp = *value;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	643b      	str	r3, [r7, #64]	; 0x40

    Simcom_Lock();
 8003094:	f001 f8e4 	bl	8004260 <Simcom_Lock>
    // Read
    sprintf(cmd, "AT+%s%s", command, executor ? "\r" : "?\r");
 8003098:	7abb      	ldrb	r3, [r7, #10]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <AT_SingleInteger+0x32>
 800309e:	4b27      	ldr	r3, [pc, #156]	; (800313c <AT_SingleInteger+0xcc>)
 80030a0:	e000      	b.n	80030a4 <AT_SingleInteger+0x34>
 80030a2:	4b27      	ldr	r3, [pc, #156]	; (8003140 <AT_SingleInteger+0xd0>)
 80030a4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	4926      	ldr	r1, [pc, #152]	; (8003144 <AT_SingleInteger+0xd4>)
 80030ac:	f006 fe46 	bl	8009d3c <siprintf>
    sprintf(res, "+%s: ", command);
 80030b0:	f107 0314 	add.w	r3, r7, #20
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	4924      	ldr	r1, [pc, #144]	; (8003148 <AT_SingleInteger+0xd8>)
 80030b8:	4618      	mov	r0, r3
 80030ba:	f006 fe3f 	bl	8009d3c <siprintf>
    p = AT_CmdRead(cmd, 1000, res, &str);
 80030be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80030c2:	f107 0214 	add.w	r2, r7, #20
 80030c6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80030ca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80030ce:	f000 f85d 	bl	800318c <AT_CmdRead>
 80030d2:	4603      	mov	r3, r0
 80030d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (p > 0) {
 80030d8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80030dc:	2b00      	cmp	r3, #0
 80030de:	dd24      	ble.n	800312a <AT_SingleInteger+0xba>
        tmp = AT_ParseNumber(&str[0], NULL);
 80030e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030e2:	2100      	movs	r1, #0
 80030e4:	4618      	mov	r0, r3
 80030e6:	f000 f8f6 	bl	80032d6 <AT_ParseNumber>
 80030ea:	6438      	str	r0, [r7, #64]	; 0x40

        // Write
        if (mode == ATW) {
 80030ec:	7afb      	ldrb	r3, [r7, #11]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d118      	bne.n	8003124 <AT_SingleInteger+0xb4>
            if (tmp != *value) {
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d016      	beq.n	800312a <AT_SingleInteger+0xba>
                sprintf(cmd, "AT+%s=%d\r", command, (int) *value);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	4911      	ldr	r1, [pc, #68]	; (800314c <AT_SingleInteger+0xdc>)
 8003108:	f006 fe18 	bl	8009d3c <siprintf>
                p = AT_CmdWrite(cmd, 500, NULL);
 800310c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003110:	2200      	movs	r2, #0
 8003112:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003116:	4618      	mov	r0, r3
 8003118:	f000 f81a 	bl	8003150 <AT_CmdWrite>
 800311c:	4603      	mov	r3, r0
 800311e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003122:	e002      	b.n	800312a <AT_SingleInteger+0xba>
            }
        } else {
            *value = tmp;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003128:	601a      	str	r2, [r3, #0]
        }
    }
    Simcom_Unlock();
 800312a:	f001 f8a0 	bl	800426e <Simcom_Unlock>

    return p;
 800312e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8003132:	4618      	mov	r0, r3
 8003134:	3748      	adds	r7, #72	; 0x48
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	0800a9d8 	.word	0x0800a9d8
 8003140:	0800a9dc 	.word	0x0800a9dc
 8003144:	0800a9e0 	.word	0x0800a9e0
 8003148:	0800a998 	.word	0x0800a998
 800314c:	0800a9a0 	.word	0x0800a9a0

08003150 <AT_CmdWrite>:

static SIMCOM_RESULT AT_CmdWrite(char *cmd, uint32_t ms, char *res) {
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 800315c:	2300      	movs	r3, #0
 800315e:	75fb      	strb	r3, [r7, #23]

    if (SIM.state >= SIM_STATE_READY) {
 8003160:	4b09      	ldr	r3, [pc, #36]	; (8003188 <AT_CmdWrite+0x38>)
 8003162:	f993 3000 	ldrsb.w	r3, [r3]
 8003166:	2b00      	cmp	r3, #0
 8003168:	db07      	blt.n	800317a <AT_CmdWrite+0x2a>
        p = Simcom_Command(cmd, res, ms, 0);
 800316a:	2300      	movs	r3, #0
 800316c:	68ba      	ldr	r2, [r7, #8]
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f001 fae3 	bl	800473c <Simcom_Command>
 8003176:	4603      	mov	r3, r0
 8003178:	75fb      	strb	r3, [r7, #23]
    }

    return p;
 800317a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800317e:	4618      	mov	r0, r3
 8003180:	3718      	adds	r7, #24
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	20000008 	.word	0x20000008

0800318c <AT_CmdRead>:

static SIMCOM_RESULT AT_CmdRead(char *cmd, uint32_t ms, char *prefix, char **str) {
 800318c:	b590      	push	{r4, r7, lr}
 800318e:	b087      	sub	sp, #28
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
 8003198:	603b      	str	r3, [r7, #0]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 800319a:	2300      	movs	r3, #0
 800319c:	75fb      	strb	r3, [r7, #23]

    if (SIM.state >= SIM_STATE_READY) {
 800319e:	4b16      	ldr	r3, [pc, #88]	; (80031f8 <AT_CmdRead+0x6c>)
 80031a0:	f993 3000 	ldrsb.w	r3, [r3]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	db20      	blt.n	80031ea <AT_CmdRead+0x5e>
        p = Simcom_Command(cmd, prefix, ms, 0);
 80031a8:	2300      	movs	r3, #0
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f001 fac4 	bl	800473c <Simcom_Command>
 80031b4:	4603      	mov	r3, r0
 80031b6:	75fb      	strb	r3, [r7, #23]

        if (p > 0) {
 80031b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	dd14      	ble.n	80031ea <AT_CmdRead+0x5e>
            *str = Simcom_Response(prefix);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f001 f85b 	bl	800427c <Simcom_Response>
 80031c6:	4602      	mov	r2, r0
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	601a      	str	r2, [r3, #0]

            if (*str != NULL) {
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00a      	beq.n	80031ea <AT_CmdRead+0x5e>
                *str += strlen(prefix);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681c      	ldr	r4, [r3, #0]
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f7fd f82b 	bl	8000234 <strlen>
 80031de:	4603      	mov	r3, r0
 80031e0:	18e2      	adds	r2, r4, r3
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	601a      	str	r2, [r3, #0]

                p = SIM_RESULT_OK;
 80031e6:	2301      	movs	r3, #1
 80031e8:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return p;
 80031ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	371c      	adds	r7, #28
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd90      	pop	{r4, r7, pc}
 80031f6:	bf00      	nop
 80031f8:	20000008 	.word	0x20000008

080031fc <AT_FindInBuffer>:

static uint8_t AT_FindInBuffer(char *prefix, char **str) {
 80031fc:	b590      	push	{r4, r7, lr}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
    *str = Simcom_Response(prefix);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f001 f838 	bl	800427c <Simcom_Response>
 800320c:	4602      	mov	r2, r0
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	601a      	str	r2, [r3, #0]

    if (*str != NULL) {
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d008      	beq.n	800322c <AT_FindInBuffer+0x30>
        *str += strlen(prefix);
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681c      	ldr	r4, [r3, #0]
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7fd f808 	bl	8000234 <strlen>
 8003224:	4603      	mov	r3, r0
 8003226:	18e2      	adds	r2, r4, r3
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	601a      	str	r2, [r3, #0]
    }

    return *str != NULL;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	bf14      	ite	ne
 8003234:	2301      	movne	r3, #1
 8003236:	2300      	moveq	r3, #0
 8003238:	b2db      	uxtb	r3, r3
}
 800323a:	4618      	mov	r0, r3
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	bd90      	pop	{r4, r7, pc}

08003242 <AT_ParseText>:

static void AT_ParseText(const char *ptr, uint8_t *cnt, char *text, uint8_t size) {
 8003242:	b480      	push	{r7}
 8003244:	b087      	sub	sp, #28
 8003246:	af00      	add	r7, sp, #0
 8003248:	60f8      	str	r0, [r7, #12]
 800324a:	60b9      	str	r1, [r7, #8]
 800324c:	607a      	str	r2, [r7, #4]
 800324e:	70fb      	strb	r3, [r7, #3]
    uint8_t i = 0;
 8003250:	2300      	movs	r3, #0
 8003252:	75fb      	strb	r3, [r7, #23]

    // check for double quote start
    if (*ptr == '"') {
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	2b22      	cmp	r3, #34	; 0x22
 800325a:	d119      	bne.n	8003290 <AT_ParseText+0x4e>
        ptr++;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	3301      	adds	r3, #1
 8003260:	60fb      	str	r3, [r7, #12]
        i++;
 8003262:	7dfb      	ldrb	r3, [r7, #23]
 8003264:	3301      	adds	r3, #1
 8003266:	75fb      	strb	r3, [r7, #23]
    }
    // Parse text
    while (*ptr != '"' && *ptr != '\r' && *ptr != '\n') {
 8003268:	e012      	b.n	8003290 <AT_ParseText+0x4e>
        *text = *ptr;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	781a      	ldrb	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	701a      	strb	r2, [r3, #0]

        // increment
        text++;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	3301      	adds	r3, #1
 8003276:	607b      	str	r3, [r7, #4]
        ptr++;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	3301      	adds	r3, #1
 800327c:	60fb      	str	r3, [r7, #12]
        i++;
 800327e:	7dfb      	ldrb	r3, [r7, #23]
 8003280:	3301      	adds	r3, #1
 8003282:	75fb      	strb	r3, [r7, #23]
        size--;
 8003284:	78fb      	ldrb	r3, [r7, #3]
 8003286:	3b01      	subs	r3, #1
 8003288:	70fb      	strb	r3, [r7, #3]

        // handle overflow
        if (size <= 1) {
 800328a:	78fb      	ldrb	r3, [r7, #3]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d90c      	bls.n	80032aa <AT_ParseText+0x68>
    while (*ptr != '"' && *ptr != '\r' && *ptr != '\n') {
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	2b22      	cmp	r3, #34	; 0x22
 8003296:	d009      	beq.n	80032ac <AT_ParseText+0x6a>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	2b0d      	cmp	r3, #13
 800329e:	d005      	beq.n	80032ac <AT_ParseText+0x6a>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2b0a      	cmp	r3, #10
 80032a6:	d1e0      	bne.n	800326a <AT_ParseText+0x28>
 80032a8:	e000      	b.n	80032ac <AT_ParseText+0x6a>
            break;
 80032aa:	bf00      	nop
        }
    }
    // end of parsing for : double-quote, tab, new-line
    *text = '\0';
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	701a      	strb	r2, [r3, #0]
    ptr++;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	3301      	adds	r3, #1
 80032b6:	60fb      	str	r3, [r7, #12]
    i++;
 80032b8:	7dfb      	ldrb	r3, [r7, #23]
 80032ba:	3301      	adds	r3, #1
 80032bc:	75fb      	strb	r3, [r7, #23]
    // Save number of characters used for number
    if (cnt != NULL) {
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d002      	beq.n	80032ca <AT_ParseText+0x88>
        *cnt = i;
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	7dfa      	ldrb	r2, [r7, #23]
 80032c8:	701a      	strb	r2, [r3, #0]
    }
}
 80032ca:	bf00      	nop
 80032cc:	371c      	adds	r7, #28
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <AT_ParseNumber>:

static int32_t AT_ParseNumber(const char *ptr, uint8_t *cnt) {
 80032d6:	b480      	push	{r7}
 80032d8:	b085      	sub	sp, #20
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
 80032de:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 80032e0:	2300      	movs	r3, #0
 80032e2:	73fb      	strb	r3, [r7, #15]
 80032e4:	2300      	movs	r3, #0
 80032e6:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 80032e8:	2300      	movs	r3, #0
 80032ea:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') { /* Check for minus character */
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	2b2d      	cmp	r3, #45	; 0x2d
 80032f2:	d119      	bne.n	8003328 <AT_ParseNumber+0x52>
        minus = 1;
 80032f4:	2301      	movs	r3, #1
 80032f6:	73fb      	strb	r3, [r7, #15]
        ptr++;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3301      	adds	r3, #1
 80032fc:	607b      	str	r3, [r7, #4]
        i++;
 80032fe:	7bbb      	ldrb	r3, [r7, #14]
 8003300:	3301      	adds	r3, #1
 8003302:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) { /* Parse number */
 8003304:	e010      	b.n	8003328 <AT_ParseNumber+0x52>
        sum = 10 * sum + CHARTONUM(*ptr);
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	461a      	mov	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	3b30      	subs	r3, #48	; 0x30
 8003318:	4413      	add	r3, r2
 800331a:	60bb      	str	r3, [r7, #8]
        ptr++;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3301      	adds	r3, #1
 8003320:	607b      	str	r3, [r7, #4]
        i++;
 8003322:	7bbb      	ldrb	r3, [r7, #14]
 8003324:	3301      	adds	r3, #1
 8003326:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) { /* Parse number */
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b2f      	cmp	r3, #47	; 0x2f
 800332e:	d903      	bls.n	8003338 <AT_ParseNumber+0x62>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	2b39      	cmp	r3, #57	; 0x39
 8003336:	d9e6      	bls.n	8003306 <AT_ParseNumber+0x30>
    }
    if (cnt != NULL) { /* Save number of characters used for number */
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d002      	beq.n	8003344 <AT_ParseNumber+0x6e>
        *cnt = i;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	7bba      	ldrb	r2, [r7, #14]
 8003342:	701a      	strb	r2, [r3, #0]
    }
    if (minus) { /* Minus detected */
 8003344:	7bfb      	ldrb	r3, [r7, #15]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d002      	beq.n	8003350 <AT_ParseNumber+0x7a>
        return 0 - sum;
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	425b      	negs	r3, r3
 800334e:	e000      	b.n	8003352 <AT_ParseNumber+0x7c>
    }
    return sum; /* Return number */
 8003350:	68bb      	ldr	r3, [r7, #8]
}
 8003352:	4618      	mov	r0, r3
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
	...

08003360 <CRC_Calculate8>:
/* Private functions declaration ----------------------------------------------*/
static void lock(void);
static void unlock(void);

/* Public functions implementation --------------------------------------------*/
uint32_t CRC_Calculate8(uint8_t *arr, uint32_t count, uint8_t swapped) {
 8003360:	b580      	push	{r7, lr}
 8003362:	b08a      	sub	sp, #40	; 0x28
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	4613      	mov	r3, r2
 800336c:	71fb      	strb	r3, [r7, #7]
    uint32_t cnt, result, value = 0;
 800336e:	2300      	movs	r3, #0
 8003370:	61fb      	str	r3, [r7, #28]
    uint8_t index = 0, remaining[4] = { 0 };
 8003372:	2300      	movs	r3, #0
 8003374:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003378:	2300      	movs	r3, #0
 800337a:	617b      	str	r3, [r7, #20]

    lock();
 800337c:	f000 f85c 	bl	8003438 <lock>

    /* Reset generator */
    __HAL_CRC_DR_RESET(&hcrc);
 8003380:	4b2c      	ldr	r3, [pc, #176]	; (8003434 <CRC_Calculate8+0xd4>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689a      	ldr	r2, [r3, #8]
 8003386:	4b2b      	ldr	r3, [pc, #172]	; (8003434 <CRC_Calculate8+0xd4>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f042 0201 	orr.w	r2, r2, #1
 800338e:	609a      	str	r2, [r3, #8]

    /* Calculate number of 32-bit blocks */
    cnt = count >> 2;
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	089b      	lsrs	r3, r3, #2
 8003394:	627b      	str	r3, [r7, #36]	; 0x24

    /* Calculate */
    while (cnt--) {
 8003396:	e011      	b.n	80033bc <CRC_Calculate8+0x5c>
        value = *(uint32_t*) arr;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	61fb      	str	r3, [r7, #28]
        /* Set new value */
        hcrc.Instance->DR = swapped ? _ByteSwap32(value) : value;
 800339e:	79fb      	ldrb	r3, [r7, #7]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d004      	beq.n	80033ae <CRC_Calculate8+0x4e>
 80033a4:	69f8      	ldr	r0, [r7, #28]
 80033a6:	f001 fbb1 	bl	8004b0c <_ByteSwap32>
 80033aa:	4603      	mov	r3, r0
 80033ac:	e000      	b.n	80033b0 <CRC_Calculate8+0x50>
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	4a20      	ldr	r2, [pc, #128]	; (8003434 <CRC_Calculate8+0xd4>)
 80033b2:	6812      	ldr	r2, [r2, #0]
 80033b4:	6013      	str	r3, [r2, #0]

        /* Increase by 4 */
        arr += 4;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	3304      	adds	r3, #4
 80033ba:	60fb      	str	r3, [r7, #12]
    while (cnt--) {
 80033bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033be:	1e5a      	subs	r2, r3, #1
 80033c0:	627a      	str	r2, [r7, #36]	; 0x24
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1e8      	bne.n	8003398 <CRC_Calculate8+0x38>
    }

    /* Calculate remaining data as 8-bit */
    cnt = count % 4;
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	f003 0303 	and.w	r3, r3, #3
 80033cc:	627b      	str	r3, [r7, #36]	; 0x24

    if (cnt) {
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d024      	beq.n	800341e <CRC_Calculate8+0xbe>
        /* Calculate */
        while (cnt--) {
 80033d4:	e00e      	b.n	80033f4 <CRC_Calculate8+0x94>
            remaining[index++] = *arr++;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	1c5a      	adds	r2, r3, #1
 80033da:	60fa      	str	r2, [r7, #12]
 80033dc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80033e0:	1c51      	adds	r1, r2, #1
 80033e2:	f887 1023 	strb.w	r1, [r7, #35]	; 0x23
 80033e6:	4611      	mov	r1, r2
 80033e8:	781a      	ldrb	r2, [r3, #0]
 80033ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033ee:	440b      	add	r3, r1
 80033f0:	f803 2c14 	strb.w	r2, [r3, #-20]
        while (cnt--) {
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f6:	1e5a      	subs	r2, r3, #1
 80033f8:	627a      	str	r2, [r7, #36]	; 0x24
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1eb      	bne.n	80033d6 <CRC_Calculate8+0x76>
        }
        /* Set new value */
        value = *(uint32_t*) remaining;
 80033fe:	f107 0314 	add.w	r3, r7, #20
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	61fb      	str	r3, [r7, #28]
        hcrc.Instance->DR = swapped ? _ByteSwap32(value) : value;
 8003406:	79fb      	ldrb	r3, [r7, #7]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d004      	beq.n	8003416 <CRC_Calculate8+0xb6>
 800340c:	69f8      	ldr	r0, [r7, #28]
 800340e:	f001 fb7d 	bl	8004b0c <_ByteSwap32>
 8003412:	4603      	mov	r3, r0
 8003414:	e000      	b.n	8003418 <CRC_Calculate8+0xb8>
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	4a06      	ldr	r2, [pc, #24]	; (8003434 <CRC_Calculate8+0xd4>)
 800341a:	6812      	ldr	r2, [r2, #0]
 800341c:	6013      	str	r3, [r2, #0]
    }
    result = hcrc.Instance->DR;
 800341e:	4b05      	ldr	r3, [pc, #20]	; (8003434 <CRC_Calculate8+0xd4>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	61bb      	str	r3, [r7, #24]

    unlock();
 8003426:	f000 f80e 	bl	8003446 <unlock>
    /* Return data */
    return result;
 800342a:	69bb      	ldr	r3, [r7, #24]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3728      	adds	r7, #40	; 0x28
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	20001478 	.word	0x20001478

08003438 <lock>:

    return result;
}

/* Private functions implementation --------------------------------------------*/
static void lock(void) {
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
//    osMutexAcquire(CrcMutexHandle, osWaitForever);
}
 800343c:	bf00      	nop
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <unlock>:

static void unlock(void) {
 8003446:	b480      	push	{r7}
 8003448:	af00      	add	r7, sp, #0
//    osMutexRelease(CrcMutexHandle);
}
 800344a:	bf00      	nop
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <EEPROM24XX_SetDevice>:
/* Private variables ----------------------------------------------------------*/
static I2C_HandleTypeDef *hi2c = &hi2c2;
static uint16_t DevAddress = EEPROM24_MAIN;

/* Public functions implementation ---------------------------------------------*/
void EEPROM24XX_SetDevice(EEPROM24_DEVICE Device) {
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	4603      	mov	r3, r0
 800345c:	71fb      	strb	r3, [r7, #7]
    DevAddress = Device;
 800345e:	79fb      	ldrb	r3, [r7, #7]
 8003460:	b29a      	uxth	r2, r3
 8003462:	4b04      	ldr	r3, [pc, #16]	; (8003474 <EEPROM24XX_SetDevice+0x20>)
 8003464:	801a      	strh	r2, [r3, #0]
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	20000004 	.word	0x20000004

08003478 <EEPROM24XX_IsConnected>:

uint8_t EEPROM24XX_IsConnected(void) {
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
    if (HAL_I2C_IsDeviceReady(hi2c, DevAddress, 2, 1000) == HAL_OK) {
 800347c:	4b08      	ldr	r3, [pc, #32]	; (80034a0 <EEPROM24XX_IsConnected+0x28>)
 800347e:	6818      	ldr	r0, [r3, #0]
 8003480:	4b08      	ldr	r3, [pc, #32]	; (80034a4 <EEPROM24XX_IsConnected+0x2c>)
 8003482:	8819      	ldrh	r1, [r3, #0]
 8003484:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003488:	2202      	movs	r2, #2
 800348a:	f004 faa3 	bl	80079d4 <HAL_I2C_IsDeviceReady>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <EEPROM24XX_IsConnected+0x20>
        return 1;
 8003494:	2301      	movs	r3, #1
 8003496:	e000      	b.n	800349a <EEPROM24XX_IsConnected+0x22>
    }
    return 0;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	20000000 	.word	0x20000000
 80034a4:	20000004 	.word	0x20000004

080034a8 <EEPROM24XX_Save>:

uint8_t EEPROM24XX_Save(uint16_t Address, void *data, size_t size_of_data) {
 80034a8:	b590      	push	{r4, r7, lr}
 80034aa:	b089      	sub	sp, #36	; 0x24
 80034ac:	af04      	add	r7, sp, #16
 80034ae:	4603      	mov	r3, r0
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
 80034b4:	81fb      	strh	r3, [r7, #14]
#elif ((EEPROM_SIZE_KBIT==4) || (EEPROM_SIZE_KBIT==8) || (EEPROM_SIZE_KBIT==16))
  if(size_of_data > 16){
    return 0;
  }
#else
    if (size_of_data > 32) {
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2b20      	cmp	r3, #32
 80034ba:	d901      	bls.n	80034c0 <EEPROM24XX_Save+0x18>
        return 0;
 80034bc:	2300      	movs	r3, #0
 80034be:	e018      	b.n	80034f2 <EEPROM24XX_Save+0x4a>
#elif   (EEPROM_SIZE_KBIT==8)
  if(HAL_I2C_Mem_Write(hi2c,DevAddress|((Address&0x0300>>7)),(Address&0xff),I2C_MEMADD_SIZE_8BIT,(uint8_t*)data,size_of_data,100) == HAL_OK) {
#elif   (EEPROM_SIZE_KBIT==16)
  if(HAL_I2C_Mem_Write(hi2c,DevAddress|((Address&0x0700>>7)),(Address&0xff),I2C_MEMADD_SIZE_8BIT,(uint8_t*)data,size_of_data,100) == HAL_OK) {
#else
    if (HAL_I2C_Mem_Write(hi2c, DevAddress, Address, I2C_MEMADD_SIZE_16BIT, (uint8_t*) data, size_of_data, 100) == HAL_OK) {
 80034c0:	4b0e      	ldr	r3, [pc, #56]	; (80034fc <EEPROM24XX_Save+0x54>)
 80034c2:	6818      	ldr	r0, [r3, #0]
 80034c4:	4b0e      	ldr	r3, [pc, #56]	; (8003500 <EEPROM24XX_Save+0x58>)
 80034c6:	8819      	ldrh	r1, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	89fc      	ldrh	r4, [r7, #14]
 80034ce:	2264      	movs	r2, #100	; 0x64
 80034d0:	9202      	str	r2, [sp, #8]
 80034d2:	9301      	str	r3, [sp, #4]
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	2310      	movs	r3, #16
 80034da:	4622      	mov	r2, r4
 80034dc:	f003 ff5a 	bl	8007394 <HAL_I2C_Mem_Write>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d104      	bne.n	80034f0 <EEPROM24XX_Save+0x48>
#endif
        _DelayMS(7);
 80034e6:	2007      	movs	r0, #7
 80034e8:	f001 fadf 	bl	8004aaa <_DelayMS>
        return 1;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e000      	b.n	80034f2 <EEPROM24XX_Save+0x4a>
    }
    return 0;
 80034f0:	2300      	movs	r3, #0

}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd90      	pop	{r4, r7, pc}
 80034fa:	bf00      	nop
 80034fc:	20000000 	.word	0x20000000
 8003500:	20000004 	.word	0x20000004

08003504 <EEPROM24XX_Load>:

uint8_t EEPROM24XX_Load(uint16_t Address, void *data, size_t size_of_data) {
 8003504:	b590      	push	{r4, r7, lr}
 8003506:	b089      	sub	sp, #36	; 0x24
 8003508:	af04      	add	r7, sp, #16
 800350a:	4603      	mov	r3, r0
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
 8003510:	81fb      	strh	r3, [r7, #14]
#elif (EEPROM_SIZE_KBIT==8)
  if(HAL_I2C_Mem_Read(hi2c,DevAddress|((Address&0x0300>>7)),(Address&0xff),I2C_MEMADD_SIZE_8BIT,(uint8_t*)data,size_of_data,100) == HAL_OK) {
#elif (EEPROM_SIZE_KBIT==16)
  if(HAL_I2C_Mem_Read(hi2c,DevAddress|((Address&0x0700>>7)),(Address&0xff),I2C_MEMADD_SIZE_8BIT,(uint8_t*)data,size_of_data,100) == HAL_OK) {
#else
    if (HAL_I2C_Mem_Read(hi2c, DevAddress, Address, I2C_MEMADD_SIZE_16BIT, (uint8_t*) data, size_of_data, 100) == HAL_OK) {
 8003512:	4b0d      	ldr	r3, [pc, #52]	; (8003548 <EEPROM24XX_Load+0x44>)
 8003514:	6818      	ldr	r0, [r3, #0]
 8003516:	4b0d      	ldr	r3, [pc, #52]	; (800354c <EEPROM24XX_Load+0x48>)
 8003518:	8819      	ldrh	r1, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	b29b      	uxth	r3, r3
 800351e:	89fc      	ldrh	r4, [r7, #14]
 8003520:	2264      	movs	r2, #100	; 0x64
 8003522:	9202      	str	r2, [sp, #8]
 8003524:	9301      	str	r3, [sp, #4]
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	2310      	movs	r3, #16
 800352c:	4622      	mov	r2, r4
 800352e:	f004 f82b 	bl	8007588 <HAL_I2C_Mem_Read>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d101      	bne.n	800353c <EEPROM24XX_Load+0x38>
#endif
        return 1;
 8003538:	2301      	movs	r3, #1
 800353a:	e000      	b.n	800353e <EEPROM24XX_Load+0x3a>
    }
    return 0;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3714      	adds	r7, #20
 8003542:	46bd      	mov	sp, r7
 8003544:	bd90      	pop	{r4, r7, pc}
 8003546:	bf00      	nop
 8003548:	20000000 	.word	0x20000000
 800354c:	20000004 	.word	0x20000004

08003550 <FLASHER_WriteByte>:

/* Includes -------------------------------------------------------------------*/
#include "Drivers/_flasher.h"

/* Public functions implementation ---------------------------------------------*/
uint8_t FLASHER_WriteByte(uint8_t *ptr, uint16_t size, uint32_t address, uint32_t end) {
 8003550:	b590      	push	{r4, r7, lr}
 8003552:	b087      	sub	sp, #28
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	607a      	str	r2, [r7, #4]
 800355a:	603b      	str	r3, [r7, #0]
 800355c:	460b      	mov	r3, r1
 800355e:	817b      	strh	r3, [r7, #10]
    uint32_t *ptr32 = (uint32_t*) ptr;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	617b      	str	r3, [r7, #20]
    uint32_t ret = 0;
 8003564:	2300      	movs	r3, #0
 8003566:	613b      	str	r3, [r7, #16]

    /* Unlock the Flash to enable the flash control register access *************/
    HAL_FLASH_Unlock();
 8003568:	f003 f978 	bl	800685c <HAL_FLASH_Unlock>

    /* Writing...... */
    while (size && address < end) {
 800356c:	e01b      	b.n	80035a6 <FLASHER_WriteByte+0x56>
        ret += (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, *ptr32++) != HAL_OK);
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	1d1a      	adds	r2, r3, #4
 8003572:	617a      	str	r2, [r7, #20]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f04f 0400 	mov.w	r4, #0
 800357a:	461a      	mov	r2, r3
 800357c:	4623      	mov	r3, r4
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	2002      	movs	r0, #2
 8003582:	f003 f917 	bl	80067b4 <HAL_FLASH_Program>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	bf14      	ite	ne
 800358c:	2301      	movne	r3, #1
 800358e:	2300      	moveq	r3, #0
 8003590:	b2db      	uxtb	r3, r3
 8003592:	461a      	mov	r2, r3
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	4413      	add	r3, r2
 8003598:	613b      	str	r3, [r7, #16]

        address += 4;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	3304      	adds	r3, #4
 800359e:	607b      	str	r3, [r7, #4]
        size -= 4;
 80035a0:	897b      	ldrh	r3, [r7, #10]
 80035a2:	3b04      	subs	r3, #4
 80035a4:	817b      	strh	r3, [r7, #10]
    while (size && address < end) {
 80035a6:	897b      	ldrh	r3, [r7, #10]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <FLASHER_WriteByte+0x64>
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d3dc      	bcc.n	800356e <FLASHER_WriteByte+0x1e>
    }

    /* Indicator */
    if (!ret) {
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d103      	bne.n	80035c2 <FLASHER_WriteByte+0x72>
        LOG_StrLn("HAL_FLASH_Program = OK");
 80035ba:	480a      	ldr	r0, [pc, #40]	; (80035e4 <FLASHER_WriteByte+0x94>)
 80035bc:	f000 fb24 	bl	8003c08 <LOG_StrLn>
 80035c0:	e008      	b.n	80035d4 <FLASHER_WriteByte+0x84>
    } else {
        LOG_Str("HAL_FLASH_Program = ERROR:");
 80035c2:	4809      	ldr	r0, [pc, #36]	; (80035e8 <FLASHER_WriteByte+0x98>)
 80035c4:	f000 fb08 	bl	8003bd8 <LOG_Str>
        LOG_Int(ret);
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 fa8c 	bl	8003ae8 <LOG_Int>
        LOG_Enter();
 80035d0:	f000 fa7e 	bl	8003ad0 <LOG_Enter>
    }

    /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
    HAL_FLASH_Lock();
 80035d4:	f003 f964 	bl	80068a0 <HAL_FLASH_Lock>

    return ret;
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	b2db      	uxtb	r3, r3
}
 80035dc:	4618      	mov	r0, r3
 80035de:	371c      	adds	r7, #28
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd90      	pop	{r4, r7, pc}
 80035e4:	0800a9f4 	.word	0x0800a9f4
 80035e8:	0800aa0c 	.word	0x0800aa0c

080035ec <FLASHER_Erase>:

uint8_t FLASHER_Erase(uint32_t FirstSector, uint32_t NbOfSectors) {
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b08a      	sub	sp, #40	; 0x28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
    FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t SectorError = 0;
 80035f6:	2300      	movs	r3, #0
 80035f8:	60fb      	str	r3, [r7, #12]
    uint8_t ret;

    /* Fill EraseInit structure*/
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80035fa:	2300      	movs	r3, #0
 80035fc:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80035fe:	2302      	movs	r3, #2
 8003600:	623b      	str	r3, [r7, #32]
    EraseInitStruct.Sector = FirstSector;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = NbOfSectors;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	61fb      	str	r3, [r7, #28]

    /* Unlock the Flash to enable the flash control register access *************/
    HAL_FLASH_Unlock();
 800360a:	f003 f927 	bl	800685c <HAL_FLASH_Unlock>
    __HAL_FLASH_CLEAR_FLAG(
 800360e:	4b2f      	ldr	r3, [pc, #188]	; (80036cc <FLASHER_Erase+0xe0>)
 8003610:	22f3      	movs	r2, #243	; 0xf3
 8003612:	60da      	str	r2, [r3, #12]
            FLASH_FLAG_PGPERR |
            FLASH_FLAG_PGSERR
            );

    /* Erasing......... */
    ret = (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) == HAL_OK);
 8003614:	f107 020c 	add.w	r2, r7, #12
 8003618:	f107 0310 	add.w	r3, r7, #16
 800361c:	4611      	mov	r1, r2
 800361e:	4618      	mov	r0, r3
 8003620:	f003 fa98 	bl	8006b54 <HAL_FLASHEx_Erase>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	bf0c      	ite	eq
 800362a:	2301      	moveq	r3, #1
 800362c:	2300      	movne	r3, #0
 800362e:	b2db      	uxtb	r3, r3
 8003630:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Handle error */
    if (!ret) {
 8003634:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10b      	bne.n	8003654 <FLASHER_Erase+0x68>
         HAL_FLASH_ERROR_PGP          0x00000004U    !< Programming Parallelism error
         HAL_FLASH_ERROR_PGA          0x00000008U    !< Programming Alignment error
         HAL_FLASH_ERROR_WRP          0x00000010U    !< Write protection error
         HAL_FLASH_ERROR_OPERATION    0x00000020U    !< Operation Error
         */
        LOG_Str("HAL_FLASHEx_Erase = ERROR:0x");
 800363c:	4824      	ldr	r0, [pc, #144]	; (80036d0 <FLASHER_Erase+0xe4>)
 800363e:	f000 facb 	bl	8003bd8 <LOG_Str>
        LOG_Hex32(HAL_FLASH_GetError());
 8003642:	f003 f93d 	bl	80068c0 <HAL_FLASH_GetError>
 8003646:	4603      	mov	r3, r0
 8003648:	4618      	mov	r0, r3
 800364a:	f000 fa9b 	bl	8003b84 <LOG_Hex32>
        LOG_Enter();
 800364e:	f000 fa3f 	bl	8003ad0 <LOG_Enter>
 8003652:	e002      	b.n	800365a <FLASHER_Erase+0x6e>
    } else {
        LOG_StrLn("HAL_FLASHEx_Erase = OK");
 8003654:	481f      	ldr	r0, [pc, #124]	; (80036d4 <FLASHER_Erase+0xe8>)
 8003656:	f000 fad7 	bl	8003c08 <LOG_StrLn>

    /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
     you have to make sure that these data are rewritten before they are accessed during code
     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
     DCRST and ICRST bits in the FLASH_CR register. */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800365a:	4b1c      	ldr	r3, [pc, #112]	; (80036cc <FLASHER_Erase+0xe0>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a1b      	ldr	r2, [pc, #108]	; (80036cc <FLASHER_Erase+0xe0>)
 8003660:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003664:	6013      	str	r3, [r2, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003666:	4b19      	ldr	r3, [pc, #100]	; (80036cc <FLASHER_Erase+0xe0>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a18      	ldr	r2, [pc, #96]	; (80036cc <FLASHER_Erase+0xe0>)
 800366c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003670:	6013      	str	r3, [r2, #0]

    __HAL_FLASH_DATA_CACHE_RESET();
 8003672:	4b16      	ldr	r3, [pc, #88]	; (80036cc <FLASHER_Erase+0xe0>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a15      	ldr	r2, [pc, #84]	; (80036cc <FLASHER_Erase+0xe0>)
 8003678:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800367c:	6013      	str	r3, [r2, #0]
 800367e:	4b13      	ldr	r3, [pc, #76]	; (80036cc <FLASHER_Erase+0xe0>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a12      	ldr	r2, [pc, #72]	; (80036cc <FLASHER_Erase+0xe0>)
 8003684:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003688:	6013      	str	r3, [r2, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800368a:	4b10      	ldr	r3, [pc, #64]	; (80036cc <FLASHER_Erase+0xe0>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a0f      	ldr	r2, [pc, #60]	; (80036cc <FLASHER_Erase+0xe0>)
 8003690:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003694:	6013      	str	r3, [r2, #0]
 8003696:	4b0d      	ldr	r3, [pc, #52]	; (80036cc <FLASHER_Erase+0xe0>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a0c      	ldr	r2, [pc, #48]	; (80036cc <FLASHER_Erase+0xe0>)
 800369c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036a0:	6013      	str	r3, [r2, #0]

    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036a2:	4b0a      	ldr	r3, [pc, #40]	; (80036cc <FLASHER_Erase+0xe0>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a09      	ldr	r2, [pc, #36]	; (80036cc <FLASHER_Erase+0xe0>)
 80036a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036ac:	6013      	str	r3, [r2, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80036ae:	4b07      	ldr	r3, [pc, #28]	; (80036cc <FLASHER_Erase+0xe0>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a06      	ldr	r2, [pc, #24]	; (80036cc <FLASHER_Erase+0xe0>)
 80036b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036b8:	6013      	str	r3, [r2, #0]

    /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
    HAL_FLASH_Lock();
 80036ba:	f003 f8f1 	bl	80068a0 <HAL_FLASH_Lock>

    return ret;
 80036be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3728      	adds	r7, #40	; 0x28
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	40023c00 	.word	0x40023c00
 80036d0:	0800aa28 	.word	0x0800aa28
 80036d4:	0800aa48 	.word	0x0800aa48

080036d8 <FLASHER_GetSector>:
/**
 * @brief  Gets the sector of a given address
 * @param  None
 * @retval The sector of a given address
 */
uint32_t FLASHER_GetSector(uint32_t Address) {
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
    uint32_t sector = 0;
 80036e0:	2300      	movs	r3, #0
 80036e2:	60fb      	str	r3, [r7, #12]

    if ((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0)) {
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a56      	ldr	r2, [pc, #344]	; (8003840 <FLASHER_GetSector+0x168>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d806      	bhi.n	80036fa <FLASHER_GetSector+0x22>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036f2:	d302      	bcc.n	80036fa <FLASHER_GetSector+0x22>
        sector = FLASH_SECTOR_0;
 80036f4:	2300      	movs	r3, #0
 80036f6:	60fb      	str	r3, [r7, #12]
 80036f8:	e09b      	b.n	8003832 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1)) {
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a51      	ldr	r2, [pc, #324]	; (8003844 <FLASHER_GetSector+0x16c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d806      	bhi.n	8003710 <FLASHER_GetSector+0x38>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a4e      	ldr	r2, [pc, #312]	; (8003840 <FLASHER_GetSector+0x168>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d902      	bls.n	8003710 <FLASHER_GetSector+0x38>
        sector = FLASH_SECTOR_1;
 800370a:	2301      	movs	r3, #1
 800370c:	60fb      	str	r3, [r7, #12]
 800370e:	e090      	b.n	8003832 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2)) {
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a4d      	ldr	r2, [pc, #308]	; (8003848 <FLASHER_GetSector+0x170>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d806      	bhi.n	8003726 <FLASHER_GetSector+0x4e>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a4a      	ldr	r2, [pc, #296]	; (8003844 <FLASHER_GetSector+0x16c>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d902      	bls.n	8003726 <FLASHER_GetSector+0x4e>
        sector = FLASH_SECTOR_2;
 8003720:	2302      	movs	r3, #2
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	e085      	b.n	8003832 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3)) {
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a48      	ldr	r2, [pc, #288]	; (800384c <FLASHER_GetSector+0x174>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d806      	bhi.n	800373c <FLASHER_GetSector+0x64>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a45      	ldr	r2, [pc, #276]	; (8003848 <FLASHER_GetSector+0x170>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d902      	bls.n	800373c <FLASHER_GetSector+0x64>
        sector = FLASH_SECTOR_3;
 8003736:	2303      	movs	r3, #3
 8003738:	60fb      	str	r3, [r7, #12]
 800373a:	e07a      	b.n	8003832 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4)) {
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a44      	ldr	r2, [pc, #272]	; (8003850 <FLASHER_GetSector+0x178>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d806      	bhi.n	8003752 <FLASHER_GetSector+0x7a>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a41      	ldr	r2, [pc, #260]	; (800384c <FLASHER_GetSector+0x174>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d902      	bls.n	8003752 <FLASHER_GetSector+0x7a>
        sector = FLASH_SECTOR_4;
 800374c:	2304      	movs	r3, #4
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	e06f      	b.n	8003832 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5)) {
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a3f      	ldr	r2, [pc, #252]	; (8003854 <FLASHER_GetSector+0x17c>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d806      	bhi.n	8003768 <FLASHER_GetSector+0x90>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a3c      	ldr	r2, [pc, #240]	; (8003850 <FLASHER_GetSector+0x178>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d902      	bls.n	8003768 <FLASHER_GetSector+0x90>
        sector = FLASH_SECTOR_5;
 8003762:	2305      	movs	r3, #5
 8003764:	60fb      	str	r3, [r7, #12]
 8003766:	e064      	b.n	8003832 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6)) {
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a3b      	ldr	r2, [pc, #236]	; (8003858 <FLASHER_GetSector+0x180>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d806      	bhi.n	800377e <FLASHER_GetSector+0xa6>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a38      	ldr	r2, [pc, #224]	; (8003854 <FLASHER_GetSector+0x17c>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d902      	bls.n	800377e <FLASHER_GetSector+0xa6>
        sector = FLASH_SECTOR_6;
 8003778:	2306      	movs	r3, #6
 800377a:	60fb      	str	r3, [r7, #12]
 800377c:	e059      	b.n	8003832 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_8) && (Address >= ADDR_FLASH_SECTOR_7)) {
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a36      	ldr	r2, [pc, #216]	; (800385c <FLASHER_GetSector+0x184>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d806      	bhi.n	8003794 <FLASHER_GetSector+0xbc>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a33      	ldr	r2, [pc, #204]	; (8003858 <FLASHER_GetSector+0x180>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d902      	bls.n	8003794 <FLASHER_GetSector+0xbc>
        sector = FLASH_SECTOR_7;
 800378e:	2307      	movs	r3, #7
 8003790:	60fb      	str	r3, [r7, #12]
 8003792:	e04e      	b.n	8003832 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_9) && (Address >= ADDR_FLASH_SECTOR_8)) {
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a32      	ldr	r2, [pc, #200]	; (8003860 <FLASHER_GetSector+0x188>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d806      	bhi.n	80037aa <FLASHER_GetSector+0xd2>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a2f      	ldr	r2, [pc, #188]	; (800385c <FLASHER_GetSector+0x184>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d902      	bls.n	80037aa <FLASHER_GetSector+0xd2>
        sector = FLASH_SECTOR_8;
 80037a4:	2308      	movs	r3, #8
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	e043      	b.n	8003832 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_10) && (Address >= ADDR_FLASH_SECTOR_9)) {
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a2d      	ldr	r2, [pc, #180]	; (8003864 <FLASHER_GetSector+0x18c>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d806      	bhi.n	80037c0 <FLASHER_GetSector+0xe8>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a2a      	ldr	r2, [pc, #168]	; (8003860 <FLASHER_GetSector+0x188>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d902      	bls.n	80037c0 <FLASHER_GetSector+0xe8>
        sector = FLASH_SECTOR_9;
 80037ba:	2309      	movs	r3, #9
 80037bc:	60fb      	str	r3, [r7, #12]
 80037be:	e038      	b.n	8003832 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_11) && (Address >= ADDR_FLASH_SECTOR_10)) {
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a29      	ldr	r2, [pc, #164]	; (8003868 <FLASHER_GetSector+0x190>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d806      	bhi.n	80037d6 <FLASHER_GetSector+0xfe>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a26      	ldr	r2, [pc, #152]	; (8003864 <FLASHER_GetSector+0x18c>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d902      	bls.n	80037d6 <FLASHER_GetSector+0xfe>
        sector = FLASH_SECTOR_10;
 80037d0:	230a      	movs	r3, #10
 80037d2:	60fb      	str	r3, [r7, #12]
 80037d4:	e02d      	b.n	8003832 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_12) && (Address >= ADDR_FLASH_SECTOR_11)) {
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 80037dc:	d206      	bcs.n	80037ec <FLASHER_GetSector+0x114>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a21      	ldr	r2, [pc, #132]	; (8003868 <FLASHER_GetSector+0x190>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d902      	bls.n	80037ec <FLASHER_GetSector+0x114>
        sector = FLASH_SECTOR_11;
 80037e6:	230b      	movs	r3, #11
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	e022      	b.n	8003832 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_13) && (Address >= ADDR_FLASH_SECTOR_12)) {
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a1f      	ldr	r2, [pc, #124]	; (800386c <FLASHER_GetSector+0x194>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d806      	bhi.n	8003802 <FLASHER_GetSector+0x12a>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 80037fa:	d302      	bcc.n	8003802 <FLASHER_GetSector+0x12a>
        sector = FLASH_SECTOR_12;
 80037fc:	230c      	movs	r3, #12
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	e017      	b.n	8003832 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_14) && (Address >= ADDR_FLASH_SECTOR_13)) {
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a1a      	ldr	r2, [pc, #104]	; (8003870 <FLASHER_GetSector+0x198>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d806      	bhi.n	8003818 <FLASHER_GetSector+0x140>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a17      	ldr	r2, [pc, #92]	; (800386c <FLASHER_GetSector+0x194>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d902      	bls.n	8003818 <FLASHER_GetSector+0x140>
        sector = FLASH_SECTOR_13;
 8003812:	230d      	movs	r3, #13
 8003814:	60fb      	str	r3, [r7, #12]
 8003816:	e00c      	b.n	8003832 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_15) && (Address >= ADDR_FLASH_SECTOR_14)) {
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a16      	ldr	r2, [pc, #88]	; (8003874 <FLASHER_GetSector+0x19c>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d806      	bhi.n	800382e <FLASHER_GetSector+0x156>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a13      	ldr	r2, [pc, #76]	; (8003870 <FLASHER_GetSector+0x198>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d902      	bls.n	800382e <FLASHER_GetSector+0x156>
        sector = FLASH_SECTOR_14;
 8003828:	230e      	movs	r3, #14
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	e001      	b.n	8003832 <FLASHER_GetSector+0x15a>
    }
    else { /* (Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_14) */
        sector = FLASH_SECTOR_15;
 800382e:	230f      	movs	r3, #15
 8003830:	60fb      	str	r3, [r7, #12]
    }

    return sector;
 8003832:	68fb      	ldr	r3, [r7, #12]
}
 8003834:	4618      	mov	r0, r3
 8003836:	3714      	adds	r7, #20
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	08003fff 	.word	0x08003fff
 8003844:	08007fff 	.word	0x08007fff
 8003848:	0800bfff 	.word	0x0800bfff
 800384c:	0800ffff 	.word	0x0800ffff
 8003850:	0801ffff 	.word	0x0801ffff
 8003854:	0803ffff 	.word	0x0803ffff
 8003858:	0805ffff 	.word	0x0805ffff
 800385c:	0807ffff 	.word	0x0807ffff
 8003860:	0809ffff 	.word	0x0809ffff
 8003864:	080bffff 	.word	0x080bffff
 8003868:	080dffff 	.word	0x080dffff
 800386c:	0811ffff 	.word	0x0811ffff
 8003870:	0813ffff 	.word	0x0813ffff
 8003874:	0815ffff 	.word	0x0815ffff

08003878 <FLASHER_GetSectorSize>:
/**
 * @brief  Gets sector Size
 * @param  None
 * @retval The size of a given sector
 */
uint32_t FLASHER_GetSectorSize(uint32_t Sector) {
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
    uint32_t sectorsize = 0x00;
 8003880:	2300      	movs	r3, #0
 8003882:	60fb      	str	r3, [r7, #12]

    if ((Sector == FLASH_SECTOR_0) || (Sector == FLASH_SECTOR_1) || (Sector == FLASH_SECTOR_2)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d008      	beq.n	800389c <FLASHER_GetSectorSize+0x24>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d005      	beq.n	800389c <FLASHER_GetSectorSize+0x24>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b02      	cmp	r3, #2
 8003894:	d002      	beq.n	800389c <FLASHER_GetSectorSize+0x24>
            || (Sector == FLASH_SECTOR_3)) {
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b03      	cmp	r3, #3
 800389a:	d103      	bne.n	80038a4 <FLASHER_GetSectorSize+0x2c>
        sectorsize = 16 * 1024;
 800389c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	e009      	b.n	80038b8 <FLASHER_GetSectorSize+0x40>
    }
    else if (Sector == FLASH_SECTOR_4) {
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	d103      	bne.n	80038b2 <FLASHER_GetSectorSize+0x3a>
        sectorsize = 64 * 1024;
 80038aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	e002      	b.n	80038b8 <FLASHER_GetSectorSize+0x40>
    }
    else {
        sectorsize = 128 * 1024;
 80038b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038b6:	60fb      	str	r3, [r7, #12]
    }
    return sectorsize;
 80038b8:	68fb      	ldr	r3, [r7, #12]
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
	...

080038c8 <FLASHER_EraseBkpArea>:

/* ============================================================= */
uint8_t FLASHER_EraseBkpArea(void) {
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
    uint32_t FirstSector = 0, NbOfSectors = 0;
 80038ce:	2300      	movs	r3, #0
 80038d0:	607b      	str	r3, [r7, #4]
 80038d2:	2300      	movs	r3, #0
 80038d4:	603b      	str	r3, [r7, #0]

    /* Get the 1st sector to erase */
    FirstSector = FLASHER_GetSector(FLASH_BKP_START_ADDR);
 80038d6:	480d      	ldr	r0, [pc, #52]	; (800390c <FLASHER_EraseBkpArea+0x44>)
 80038d8:	f7ff fefe 	bl	80036d8 <FLASHER_GetSector>
 80038dc:	6078      	str	r0, [r7, #4]
    /* Get the number of sector to erase from 1st sector*/
    NbOfSectors = FLASHER_GetSector(FLASH_BKP_END_ADDR) - FirstSector + 1;
 80038de:	480c      	ldr	r0, [pc, #48]	; (8003910 <FLASHER_EraseBkpArea+0x48>)
 80038e0:	f7ff ffca 	bl	8003878 <FLASHER_GetSectorSize>
 80038e4:	4602      	mov	r2, r0
 80038e6:	4b0b      	ldr	r3, [pc, #44]	; (8003914 <FLASHER_EraseBkpArea+0x4c>)
 80038e8:	4413      	add	r3, r2
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7ff fef4 	bl	80036d8 <FLASHER_GetSector>
 80038f0:	4602      	mov	r2, r0
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	3301      	adds	r3, #1
 80038f8:	603b      	str	r3, [r7, #0]
    // Erase
    return FLASHER_Erase(FirstSector, NbOfSectors);
 80038fa:	6839      	ldr	r1, [r7, #0]
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7ff fe75 	bl	80035ec <FLASHER_Erase>
 8003902:	4603      	mov	r3, r0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	080c0000 	.word	0x080c0000
 8003910:	08140000 	.word	0x08140000
 8003914:	0813ffff 	.word	0x0813ffff

08003918 <FLASHER_EraseAppArea>:

uint8_t FLASHER_EraseAppArea(void) {
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
    uint32_t FirstSector = 0, NbOfSectors = 0;
 800391e:	2300      	movs	r3, #0
 8003920:	607b      	str	r3, [r7, #4]
 8003922:	2300      	movs	r3, #0
 8003924:	603b      	str	r3, [r7, #0]

    /* Get the 1st sector to erase */
    FirstSector = FLASHER_GetSector(FLASH_APP_START_ADDR);
 8003926:	480d      	ldr	r0, [pc, #52]	; (800395c <FLASHER_EraseAppArea+0x44>)
 8003928:	f7ff fed6 	bl	80036d8 <FLASHER_GetSector>
 800392c:	6078      	str	r0, [r7, #4]
    /* Get the number of sector to erase from 1st sector*/
    NbOfSectors = FLASHER_GetSector(FLASH_APP_END_ADDR) - FirstSector + 1;
 800392e:	480c      	ldr	r0, [pc, #48]	; (8003960 <FLASHER_EraseAppArea+0x48>)
 8003930:	f7ff ffa2 	bl	8003878 <FLASHER_GetSectorSize>
 8003934:	4602      	mov	r2, r0
 8003936:	4b0b      	ldr	r3, [pc, #44]	; (8003964 <FLASHER_EraseAppArea+0x4c>)
 8003938:	4413      	add	r3, r2
 800393a:	4618      	mov	r0, r3
 800393c:	f7ff fecc 	bl	80036d8 <FLASHER_GetSector>
 8003940:	4602      	mov	r2, r0
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	3301      	adds	r3, #1
 8003948:	603b      	str	r3, [r7, #0]
    // Erase
    return FLASHER_Erase(FirstSector, NbOfSectors);
 800394a:	6839      	ldr	r1, [r7, #0]
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7ff fe4d 	bl	80035ec <FLASHER_Erase>
 8003952:	4603      	mov	r3, r0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	08020000 	.word	0x08020000
 8003960:	080a0000 	.word	0x080a0000
 8003964:	0809ffff 	.word	0x0809ffff

08003968 <FLASHER_WriteBkpArea>:

uint8_t FLASHER_WriteBkpArea(uint8_t *ptr, uint16_t size, uint32_t offset) {
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	460b      	mov	r3, r1
 8003972:	607a      	str	r2, [r7, #4]
 8003974:	817b      	strh	r3, [r7, #10]
    uint32_t address = FLASH_BKP_START_ADDR + offset;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800397c:	f503 2340 	add.w	r3, r3, #786432	; 0xc0000
 8003980:	617b      	str	r3, [r7, #20]

    return FLASHER_WriteByte(ptr, size, address, FLASH_BKP_END_ADDR);
 8003982:	4808      	ldr	r0, [pc, #32]	; (80039a4 <FLASHER_WriteBkpArea+0x3c>)
 8003984:	f7ff ff78 	bl	8003878 <FLASHER_GetSectorSize>
 8003988:	4602      	mov	r2, r0
 800398a:	4b07      	ldr	r3, [pc, #28]	; (80039a8 <FLASHER_WriteBkpArea+0x40>)
 800398c:	4413      	add	r3, r2
 800398e:	8979      	ldrh	r1, [r7, #10]
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f7ff fddc 	bl	8003550 <FLASHER_WriteByte>
 8003998:	4603      	mov	r3, r0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	08140000 	.word	0x08140000
 80039a8:	0813ffff 	.word	0x0813ffff

080039ac <FLASHER_WriteAppArea>:

uint8_t FLASHER_WriteAppArea(uint8_t *ptr, uint16_t size, uint32_t offset) {
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	460b      	mov	r3, r1
 80039b6:	607a      	str	r2, [r7, #4]
 80039b8:	817b      	strh	r3, [r7, #10]
    uint32_t address = FLASH_APP_START_ADDR + offset;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80039c0:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80039c4:	617b      	str	r3, [r7, #20]

    return FLASHER_WriteByte(ptr, size, address, FLASH_APP_END_ADDR);
 80039c6:	4808      	ldr	r0, [pc, #32]	; (80039e8 <FLASHER_WriteAppArea+0x3c>)
 80039c8:	f7ff ff56 	bl	8003878 <FLASHER_GetSectorSize>
 80039cc:	4602      	mov	r2, r0
 80039ce:	4b07      	ldr	r3, [pc, #28]	; (80039ec <FLASHER_WriteAppArea+0x40>)
 80039d0:	4413      	add	r3, r2
 80039d2:	8979      	ldrh	r1, [r7, #10]
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f7ff fdba 	bl	8003550 <FLASHER_WriteByte>
 80039dc:	4603      	mov	r3, r0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3718      	adds	r7, #24
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	080a0000 	.word	0x080a0000
 80039ec:	0809ffff 	.word	0x0809ffff

080039f0 <FLASHER_BackupApp>:

uint8_t FLASHER_BackupApp(void) {
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
    uint8_t ret;
    uint8_t *ptr = (uint8_t*) FLASH_APP_START_ADDR;
 80039f6:	4b10      	ldr	r3, [pc, #64]	; (8003a38 <FLASHER_BackupApp+0x48>)
 80039f8:	60bb      	str	r3, [r7, #8]
    uint32_t len = (FLASH_APP_END_ADDR - FLASH_APP_START_ADDR);
 80039fa:	4810      	ldr	r0, [pc, #64]	; (8003a3c <FLASHER_BackupApp+0x4c>)
 80039fc:	f7ff ff3c 	bl	8003878 <FLASHER_GetSectorSize>
 8003a00:	4603      	mov	r3, r0
 8003a02:	f503 23ff 	add.w	r3, r3, #522240	; 0x7f800
 8003a06:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8003a0a:	607b      	str	r3, [r7, #4]

    ret = FLASHER_EraseBkpArea();
 8003a0c:	f7ff ff5c 	bl	80038c8 <FLASHER_EraseBkpArea>
 8003a10:	4603      	mov	r3, r0
 8003a12:	73fb      	strb	r3, [r7, #15]

    if (ret) {
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d008      	beq.n	8003a2c <FLASHER_BackupApp+0x3c>
        ret = FLASHER_WriteBkpArea(ptr, len, 0);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	2200      	movs	r2, #0
 8003a20:	4619      	mov	r1, r3
 8003a22:	68b8      	ldr	r0, [r7, #8]
 8003a24:	f7ff ffa0 	bl	8003968 <FLASHER_WriteBkpArea>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	73fb      	strb	r3, [r7, #15]
    }

    return ret;
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	08020000 	.word	0x08020000
 8003a3c:	080a0000 	.word	0x080a0000

08003a40 <FLASHER_RestoreApp>:

uint8_t FLASHER_RestoreApp(void) {
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
    uint8_t ret;
    uint8_t *ptr = (uint8_t*) FLASH_BKP_START_ADDR;
 8003a46:	4b10      	ldr	r3, [pc, #64]	; (8003a88 <FLASHER_RestoreApp+0x48>)
 8003a48:	60bb      	str	r3, [r7, #8]
    uint32_t len = (FLASH_BKP_END_ADDR - FLASH_BKP_START_ADDR);
 8003a4a:	4810      	ldr	r0, [pc, #64]	; (8003a8c <FLASHER_RestoreApp+0x4c>)
 8003a4c:	f7ff ff14 	bl	8003878 <FLASHER_GetSectorSize>
 8003a50:	4603      	mov	r3, r0
 8003a52:	f503 23ff 	add.w	r3, r3, #522240	; 0x7f800
 8003a56:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8003a5a:	607b      	str	r3, [r7, #4]

    ret = FLASHER_EraseAppArea();
 8003a5c:	f7ff ff5c 	bl	8003918 <FLASHER_EraseAppArea>
 8003a60:	4603      	mov	r3, r0
 8003a62:	73fb      	strb	r3, [r7, #15]

    if (ret) {
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d008      	beq.n	8003a7c <FLASHER_RestoreApp+0x3c>
        ret = FLASHER_WriteAppArea(ptr, len, 0);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	2200      	movs	r2, #0
 8003a70:	4619      	mov	r1, r3
 8003a72:	68b8      	ldr	r0, [r7, #8]
 8003a74:	f7ff ff9a 	bl	80039ac <FLASHER_WriteAppArea>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	73fb      	strb	r3, [r7, #15]
    }

    return ret;
 8003a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	080c0000 	.word	0x080c0000
 8003a8c:	08140000 	.word	0x08140000

08003a90 <LOG_Char>:
/* Private functions declarations ----------------------------------------------*/
static void lock(void);
static void unlock(void);

/* Public functions implementation ---------------------------------------------*/
void LOG_Char(char ch) {
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	4603      	mov	r3, r0
 8003a98:	71fb      	strb	r3, [r7, #7]
    uint32_t tick;

    tick = _GetTickMS();
 8003a9a:	f001 f811 	bl	8004ac0 <_GetTickMS>
 8003a9e:	60f8      	str	r0, [r7, #12]
    // wait if busy
    while (1) {
        if (ITM->PORT[0].u32 != 0 || _GetTickMS() - tick >= 10) {
 8003aa0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10a      	bne.n	8003ac0 <LOG_Char+0x30>
 8003aaa:	f001 f809 	bl	8004ac0 <_GetTickMS>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b09      	cmp	r3, #9
 8003ab6:	d803      	bhi.n	8003ac0 <LOG_Char+0x30>
            break;
        }
        _DelayMS(1);
 8003ab8:	2001      	movs	r0, #1
 8003aba:	f000 fff6 	bl	8004aaa <_DelayMS>
        if (ITM->PORT[0].u32 != 0 || _GetTickMS() - tick >= 10) {
 8003abe:	e7ef      	b.n	8003aa0 <LOG_Char+0x10>
    }
    // send to ITM0
    ITM->PORT[0].u8 = (uint8_t) ch;
 8003ac0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003ac4:	79fb      	ldrb	r3, [r7, #7]
 8003ac6:	7013      	strb	r3, [r2, #0]
}
 8003ac8:	bf00      	nop
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <LOG_Enter>:

void LOG_Enter(void) {
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
    lock();
 8003ad4:	f000 f902 	bl	8003cdc <lock>
    LOG_Char('\n');
 8003ad8:	200a      	movs	r0, #10
 8003ada:	f7ff ffd9 	bl	8003a90 <LOG_Char>
    unlock();
 8003ade:	f000 f904 	bl	8003cea <unlock>
}
 8003ae2:	bf00      	nop
 8003ae4:	bd80      	pop	{r7, pc}
	...

08003ae8 <LOG_Int>:

void LOG_Int(int32_t num) {
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
    lock();
 8003af0:	f000 f8f4 	bl	8003cdc <lock>

    char str[10]; // 10 chars max for INT32_MAX
    int i = 0;
 8003af4:	2300      	movs	r3, #0
 8003af6:	617b      	str	r3, [r7, #20]
    if (num < 0) {
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	da05      	bge.n	8003b0a <LOG_Int+0x22>
        LOG_Char('-');
 8003afe:	202d      	movs	r0, #45	; 0x2d
 8003b00:	f7ff ffc6 	bl	8003a90 <LOG_Char>
        num *= -1;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	425b      	negs	r3, r3
 8003b08:	607b      	str	r3, [r7, #4]
    }
    do
        str[i++] = num % 10 + '0';
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	4b1c      	ldr	r3, [pc, #112]	; (8003b80 <LOG_Int+0x98>)
 8003b0e:	fb83 1302 	smull	r1, r3, r3, r2
 8003b12:	1099      	asrs	r1, r3, #2
 8003b14:	17d3      	asrs	r3, r2, #31
 8003b16:	1ac9      	subs	r1, r1, r3
 8003b18:	460b      	mov	r3, r1
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	1ad1      	subs	r1, r2, r3
 8003b22:	b2ca      	uxtb	r2, r1
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	1c59      	adds	r1, r3, #1
 8003b28:	6179      	str	r1, [r7, #20]
 8003b2a:	3230      	adds	r2, #48	; 0x30
 8003b2c:	b2d2      	uxtb	r2, r2
 8003b2e:	f107 0118 	add.w	r1, r7, #24
 8003b32:	440b      	add	r3, r1
 8003b34:	f803 2c10 	strb.w	r2, [r3, #-16]
    while ((num /= 10) > 0);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a11      	ldr	r2, [pc, #68]	; (8003b80 <LOG_Int+0x98>)
 8003b3c:	fb82 1203 	smull	r1, r2, r2, r3
 8003b40:	1092      	asrs	r2, r2, #2
 8003b42:	17db      	asrs	r3, r3, #31
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	607b      	str	r3, [r7, #4]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	dcdd      	bgt.n	8003b0a <LOG_Int+0x22>
    for (i--; i >= 0; i--)
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	3b01      	subs	r3, #1
 8003b52:	617b      	str	r3, [r7, #20]
 8003b54:	e00a      	b.n	8003b6c <LOG_Int+0x84>
        LOG_Char(str[i]);
 8003b56:	f107 0208 	add.w	r2, r7, #8
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff ff95 	bl	8003a90 <LOG_Char>
    for (i--; i >= 0; i--)
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	617b      	str	r3, [r7, #20]
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	daf1      	bge.n	8003b56 <LOG_Int+0x6e>

    unlock();
 8003b72:	f000 f8ba 	bl	8003cea <unlock>
}
 8003b76:	bf00      	nop
 8003b78:	3718      	adds	r7, #24
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	66666667 	.word	0x66666667

08003b84 <LOG_Hex32>:
    LOG_Char(HEX_CHARS[(num & 0x0f) % 0x10]);

    unlock();
}

void LOG_Hex32(uint32_t num) {
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
    lock();
 8003b8c:	f000 f8a6 	bl	8003cdc <lock>

    uint8_t i;
    for (i = 28; i > 0; i -= 4)
 8003b90:	231c      	movs	r3, #28
 8003b92:	73fb      	strb	r3, [r7, #15]
 8003b94:	e00d      	b.n	8003bb2 <LOG_Hex32+0x2e>
        LOG_Char(HEX_CHARS[(num >> i) % 0x10]);
 8003b96:	7bfb      	ldrb	r3, [r7, #15]
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b9e:	f003 030f 	and.w	r3, r3, #15
 8003ba2:	4a0c      	ldr	r2, [pc, #48]	; (8003bd4 <LOG_Hex32+0x50>)
 8003ba4:	5cd3      	ldrb	r3, [r2, r3]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7ff ff72 	bl	8003a90 <LOG_Char>
    for (i = 28; i > 0; i -= 4)
 8003bac:	7bfb      	ldrb	r3, [r7, #15]
 8003bae:	3b04      	subs	r3, #4
 8003bb0:	73fb      	strb	r3, [r7, #15]
 8003bb2:	7bfb      	ldrb	r3, [r7, #15]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1ee      	bne.n	8003b96 <LOG_Hex32+0x12>
    LOG_Char(HEX_CHARS[(num & 0x0f) % 0x10]);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f003 030f 	and.w	r3, r3, #15
 8003bbe:	4a05      	ldr	r2, [pc, #20]	; (8003bd4 <LOG_Hex32+0x50>)
 8003bc0:	5cd3      	ldrb	r3, [r2, r3]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7ff ff64 	bl	8003a90 <LOG_Char>

    unlock();
 8003bc8:	f000 f88f 	bl	8003cea <unlock>
}
 8003bcc:	bf00      	nop
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	0800aa60 	.word	0x0800aa60

08003bd8 <LOG_Str>:

void LOG_Str(char *str) {
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
    lock();
 8003be0:	f000 f87c 	bl	8003cdc <lock>

    while (*str != '\0')
 8003be4:	e006      	b.n	8003bf4 <LOG_Str+0x1c>
        LOG_Char(*str++);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	1c5a      	adds	r2, r3, #1
 8003bea:	607a      	str	r2, [r7, #4]
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7ff ff4e 	bl	8003a90 <LOG_Char>
    while (*str != '\0')
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1f4      	bne.n	8003be6 <LOG_Str+0xe>

    unlock();
 8003bfc:	f000 f875 	bl	8003cea <unlock>
}
 8003c00:	bf00      	nop
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <LOG_StrLn>:

void LOG_StrLn(char *str) {
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
    lock();
 8003c10:	f000 f864 	bl	8003cdc <lock>

    while (*str != '\0') {
 8003c14:	e006      	b.n	8003c24 <LOG_StrLn+0x1c>
        LOG_Char(*str++);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	1c5a      	adds	r2, r3, #1
 8003c1a:	607a      	str	r2, [r7, #4]
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7ff ff36 	bl	8003a90 <LOG_Char>
    while (*str != '\0') {
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1f4      	bne.n	8003c16 <LOG_StrLn+0xe>
    }
    LOG_Char('\n');
 8003c2c:	200a      	movs	r0, #10
 8003c2e:	f7ff ff2f 	bl	8003a90 <LOG_Char>

    unlock();
 8003c32:	f000 f85a 	bl	8003cea <unlock>
}
 8003c36:	bf00      	nop
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <LOG_Buf>:

void LOG_Buf(char *buf, uint16_t bufsize) {
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b084      	sub	sp, #16
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
 8003c46:	460b      	mov	r3, r1
 8003c48:	807b      	strh	r3, [r7, #2]
    lock();
 8003c4a:	f000 f847 	bl	8003cdc <lock>

    uint16_t i;
    for (i = 0; i < bufsize; i++)
 8003c4e:	2300      	movs	r3, #0
 8003c50:	81fb      	strh	r3, [r7, #14]
 8003c52:	e009      	b.n	8003c68 <LOG_Buf+0x2a>
        LOG_Char(*buf++);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	607a      	str	r2, [r7, #4]
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7ff ff17 	bl	8003a90 <LOG_Char>
    for (i = 0; i < bufsize; i++)
 8003c62:	89fb      	ldrh	r3, [r7, #14]
 8003c64:	3301      	adds	r3, #1
 8003c66:	81fb      	strh	r3, [r7, #14]
 8003c68:	89fa      	ldrh	r2, [r7, #14]
 8003c6a:	887b      	ldrh	r3, [r7, #2]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d3f1      	bcc.n	8003c54 <LOG_Buf+0x16>

    unlock();
 8003c70:	f000 f83b 	bl	8003cea <unlock>
}
 8003c74:	bf00      	nop
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <LOG_BufHex>:
    }

    unlock();
}

void LOG_BufHex(char *buf, uint16_t bufsize) {
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	460b      	mov	r3, r1
 8003c86:	807b      	strh	r3, [r7, #2]
    lock();
 8003c88:	f000 f828 	bl	8003cdc <lock>

    uint16_t i;
    char ch;
    for (i = 0; i < bufsize; i++) {
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	81fb      	strh	r3, [r7, #14]
 8003c90:	e018      	b.n	8003cc4 <LOG_BufHex+0x48>
        ch = *buf++;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	1c5a      	adds	r2, r3, #1
 8003c96:	607a      	str	r2, [r7, #4]
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	737b      	strb	r3, [r7, #13]
        LOG_Char(HEX_CHARS[(ch >> 4) % 0x10]);
 8003c9c:	7b7b      	ldrb	r3, [r7, #13]
 8003c9e:	091b      	lsrs	r3, r3, #4
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	4b0c      	ldr	r3, [pc, #48]	; (8003cd8 <LOG_BufHex+0x5c>)
 8003ca6:	5c9b      	ldrb	r3, [r3, r2]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7ff fef1 	bl	8003a90 <LOG_Char>
        LOG_Char(HEX_CHARS[(ch & 0x0f) % 0x10]);
 8003cae:	7b7b      	ldrb	r3, [r7, #13]
 8003cb0:	f003 030f 	and.w	r3, r3, #15
 8003cb4:	4a08      	ldr	r2, [pc, #32]	; (8003cd8 <LOG_BufHex+0x5c>)
 8003cb6:	5cd3      	ldrb	r3, [r2, r3]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff fee9 	bl	8003a90 <LOG_Char>
    for (i = 0; i < bufsize; i++) {
 8003cbe:	89fb      	ldrh	r3, [r7, #14]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	81fb      	strh	r3, [r7, #14]
 8003cc4:	89fa      	ldrh	r2, [r7, #14]
 8003cc6:	887b      	ldrh	r3, [r7, #2]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d3e2      	bcc.n	8003c92 <LOG_BufHex+0x16>
    }

    unlock();
 8003ccc:	f000 f80d 	bl	8003cea <unlock>
}
 8003cd0:	bf00      	nop
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	0800aa60 	.word	0x0800aa60

08003cdc <lock>:

    unlock();
}

/* Private functions implementations ----------------------------------------------*/
static void lock(void) {
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
//    osMutexAcquire(LogMutexHandle, osWaitForever);
}
 8003ce0:	bf00      	nop
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <unlock>:

static void unlock(void) {
 8003cea:	b480      	push	{r7}
 8003cec:	af00      	add	r7, sp, #0
//    osMutexRelease(LogMutexHandle);
}
 8003cee:	bf00      	nop
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <EEPROM_Init>:
static uint8_t EE_Command(uint16_t vaddr, EEPROM_COMMAND cmd, void *value, void *ptr, uint16_t size);
static void lock(void);
static void unlock(void);

/* Public functions implementation --------------------------------------------*/
uint8_t EEPROM_Init(void) {
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
    const uint8_t MAX_RETRY = 5;
 8003cfe:	2305      	movs	r3, #5
 8003d00:	713b      	strb	r3, [r7, #4]
    const EEPROM24_DEVICE EEPROMS[2] = {
 8003d02:	4b26      	ldr	r3, [pc, #152]	; (8003d9c <EEPROM_Init+0xa4>)
 8003d04:	881b      	ldrh	r3, [r3, #0]
 8003d06:	803b      	strh	r3, [r7, #0]
            EEPROM24_MAIN,
            EEPROM24_BACKUP
    };
    uint8_t retry, ret = 0;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	71bb      	strb	r3, [r7, #6]

    lock();
 8003d0c:	f000 f89b 	bl	8003e46 <lock>
    LOG_StrLn("EEPROM:Init");
 8003d10:	4823      	ldr	r0, [pc, #140]	; (8003da0 <EEPROM_Init+0xa8>)
 8003d12:	f7ff ff79 	bl	8003c08 <LOG_StrLn>
    // check each eeprom
    for (uint8_t i = 0; i < 2; i++) {
 8003d16:	2300      	movs	r3, #0
 8003d18:	717b      	strb	r3, [r7, #5]
 8003d1a:	e02a      	b.n	8003d72 <EEPROM_Init+0x7a>
        if (!ret) {
 8003d1c:	79bb      	ldrb	r3, [r7, #6]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d124      	bne.n	8003d6c <EEPROM_Init+0x74>
            retry = MAX_RETRY;
 8003d22:	793b      	ldrb	r3, [r7, #4]
 8003d24:	71fb      	strb	r3, [r7, #7]
            EEPROM24XX_SetDevice(EEPROMS[i]);
 8003d26:	797b      	ldrb	r3, [r7, #5]
 8003d28:	f107 0208 	add.w	r2, r7, #8
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7ff fb8e 	bl	8003454 <EEPROM24XX_SetDevice>
            do {
                if (EEPROM24XX_IsConnected()) {
 8003d38:	f7ff fb9e 	bl	8003478 <EEPROM24XX_IsConnected>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00c      	beq.n	8003d5c <EEPROM_Init+0x64>
                    LOG_Str("EEPROM:Device = ");
 8003d42:	4818      	ldr	r0, [pc, #96]	; (8003da4 <EEPROM_Init+0xac>)
 8003d44:	f7ff ff48 	bl	8003bd8 <LOG_Str>
                    LOG_Int(i + 1);
 8003d48:	797b      	ldrb	r3, [r7, #5]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7ff fecb 	bl	8003ae8 <LOG_Int>
                    LOG_Enter();
 8003d52:	f7ff febd 	bl	8003ad0 <LOG_Enter>

                    ret = 1;
 8003d56:	2301      	movs	r3, #1
 8003d58:	71bb      	strb	r3, [r7, #6]
                    break;
 8003d5a:	e007      	b.n	8003d6c <EEPROM_Init+0x74>
                }
                _DelayMS(50);
 8003d5c:	2032      	movs	r0, #50	; 0x32
 8003d5e:	f000 fea4 	bl	8004aaa <_DelayMS>
            } while (retry--);
 8003d62:	79fb      	ldrb	r3, [r7, #7]
 8003d64:	1e5a      	subs	r2, r3, #1
 8003d66:	71fa      	strb	r2, [r7, #7]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1e5      	bne.n	8003d38 <EEPROM_Init+0x40>
    for (uint8_t i = 0; i < 2; i++) {
 8003d6c:	797b      	ldrb	r3, [r7, #5]
 8003d6e:	3301      	adds	r3, #1
 8003d70:	717b      	strb	r3, [r7, #5]
 8003d72:	797b      	ldrb	r3, [r7, #5]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d9d1      	bls.n	8003d1c <EEPROM_Init+0x24>
        }
    }

    // all failed
    if (!ret) {
 8003d78:	79bb      	ldrb	r3, [r7, #6]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d102      	bne.n	8003d84 <EEPROM_Init+0x8c>
        LOG_StrLn("EEPROM:Error");
 8003d7e:	480a      	ldr	r0, [pc, #40]	; (8003da8 <EEPROM_Init+0xb0>)
 8003d80:	f7ff ff42 	bl	8003c08 <LOG_StrLn>
    }
    unlock();
 8003d84:	f000 f866 	bl	8003e54 <unlock>

    // Load or Reset
    EEPROM_FlagIAP(EE_CMD_R, EE_NULL);
 8003d88:	2100      	movs	r1, #0
 8003d8a:	2000      	movs	r0, #0
 8003d8c:	f000 f80e 	bl	8003dac <EEPROM_FlagIAP>

    return ret;
 8003d90:	79bb      	ldrb	r3, [r7, #6]
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	0800aaa4 	.word	0x0800aaa4
 8003da0:	0800aa74 	.word	0x0800aa74
 8003da4:	0800aa80 	.word	0x0800aa80
 8003da8:	0800aa94 	.word	0x0800aa94

08003dac <EEPROM_FlagIAP>:

uint8_t EEPROM_FlagIAP(EEPROM_COMMAND cmd, uint32_t value) {
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af02      	add	r7, sp, #8
 8003db2:	4603      	mov	r3, r0
 8003db4:	6039      	str	r1, [r7, #0]
 8003db6:	71fb      	strb	r3, [r7, #7]
    return EE_Command(VADDR_IAP_FLAG, cmd, &value, &IAP_FLAG, sizeof(value));
 8003db8:	463a      	mov	r2, r7
 8003dba:	79f9      	ldrb	r1, [r7, #7]
 8003dbc:	2304      	movs	r3, #4
 8003dbe:	9300      	str	r3, [sp, #0]
 8003dc0:	4b04      	ldr	r3, [pc, #16]	; (8003dd4 <EEPROM_FlagIAP+0x28>)
 8003dc2:	208e      	movs	r0, #142	; 0x8e
 8003dc4:	f000 f808 	bl	8003dd8 <EE_Command>
 8003dc8:	4603      	mov	r3, r0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	20000e68 	.word	0x20000e68

08003dd8 <EE_Command>:

/* Private functions implementation --------------------------------------------*/
static uint8_t EE_Command(uint16_t vaddr, EEPROM_COMMAND cmd, void *value, void *ptr, uint16_t size) {
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60ba      	str	r2, [r7, #8]
 8003de0:	607b      	str	r3, [r7, #4]
 8003de2:	4603      	mov	r3, r0
 8003de4:	81fb      	strh	r3, [r7, #14]
 8003de6:	460b      	mov	r3, r1
 8003de8:	737b      	strb	r3, [r7, #13]
    uint8_t ret = 0;
 8003dea:	2300      	movs	r3, #0
 8003dec:	75fb      	strb	r3, [r7, #23]

    lock();
 8003dee:	f000 f82a 	bl	8003e46 <lock>

    // check if new value is same with old value
    if (cmd == EE_CMD_W) {
 8003df2:	7b7b      	ldrb	r3, [r7, #13]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d10e      	bne.n	8003e16 <EE_Command+0x3e>
        // apply the value
        memcpy(ptr, value, size);
 8003df8:	8c3b      	ldrh	r3, [r7, #32]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	68b9      	ldr	r1, [r7, #8]
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f005 ff89 	bl	8009d16 <memcpy>
        // save the value
        ret = EEPROM24XX_Save(vaddr, value, size);
 8003e04:	8c3a      	ldrh	r2, [r7, #32]
 8003e06:	89fb      	ldrh	r3, [r7, #14]
 8003e08:	68b9      	ldr	r1, [r7, #8]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7ff fb4c 	bl	80034a8 <EEPROM24XX_Save>
 8003e10:	4603      	mov	r3, r0
 8003e12:	75fb      	strb	r3, [r7, #23]
 8003e14:	e010      	b.n	8003e38 <EE_Command+0x60>
    } else {
        // load the value
        ret = EEPROM24XX_Load(vaddr, value, size);
 8003e16:	8c3a      	ldrh	r2, [r7, #32]
 8003e18:	89fb      	ldrh	r3, [r7, #14]
 8003e1a:	68b9      	ldr	r1, [r7, #8]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7ff fb71 	bl	8003504 <EEPROM24XX_Load>
 8003e22:	4603      	mov	r3, r0
 8003e24:	75fb      	strb	r3, [r7, #23]
        // apply the value
        if (ret) {
 8003e26:	7dfb      	ldrb	r3, [r7, #23]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d005      	beq.n	8003e38 <EE_Command+0x60>
            memcpy(ptr, value, size);
 8003e2c:	8c3b      	ldrh	r3, [r7, #32]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	68b9      	ldr	r1, [r7, #8]
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f005 ff6f 	bl	8009d16 <memcpy>
        }
    }

    unlock();
 8003e38:	f000 f80c 	bl	8003e54 <unlock>
    return ret;
 8003e3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3718      	adds	r7, #24
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <lock>:

static void lock(void) {
 8003e46:	b480      	push	{r7}
 8003e48:	af00      	add	r7, sp, #0
//    osMutexAcquire(EepromMutexHandle, osWaitForever);
}
 8003e4a:	bf00      	nop
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <unlock>:

static void unlock(void) {
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
//    osMutexRelease(EepromMutexHandle);
}
 8003e58:	bf00      	nop
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
	...

08003e64 <FOTA_BearerInitialize>:
#include "Libs/_fota.h"
#include "Drivers/_flasher.h"
#include "Drivers/_crc.h"

/* Public functions implementation --------------------------------------------*/
SIMCOM_RESULT FOTA_BearerInitialize(void) {
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b0a4      	sub	sp, #144	; 0x90
 8003e68:	af00      	add	r7, sp, #0
    SIMCOM_RESULT p;
    at_sapbr_t getBEARER, setBEARER = {
 8003e6a:	4a16      	ldr	r2, [pc, #88]	; (8003ec4 <FOTA_BearerInitialize+0x60>)
 8003e6c:	1d3b      	adds	r3, r7, #4
 8003e6e:	4611      	mov	r1, r2
 8003e70:	2244      	movs	r2, #68	; 0x44
 8003e72:	4618      	mov	r0, r3
 8003e74:	f005 ff4f 	bl	8009d16 <memcpy>
                    .password = NET_CON_PASSWORD,
            },
    };

    // BEARER attach
    p = AT_BearerSettings(ATW, &setBEARER);
 8003e78:	1d3b      	adds	r3, r7, #4
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	2000      	movs	r0, #0
 8003e7e:	f7fe fcf9 	bl	8002874 <AT_BearerSettings>
 8003e82:	4603      	mov	r3, r0
 8003e84:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

    // BEARER init
    if (p > 0) {
 8003e88:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	dd08      	ble.n	8003ea2 <FOTA_BearerInitialize+0x3e>
        p = AT_BearerSettings(ATR, &getBEARER);
 8003e90:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e94:	4619      	mov	r1, r3
 8003e96:	2001      	movs	r0, #1
 8003e98:	f7fe fcec 	bl	8002874 <AT_BearerSettings>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    }

    if (p > 0 && getBEARER.status != SAPBR_CONNECTED) {
 8003ea2:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	dd05      	ble.n	8003eb6 <FOTA_BearerInitialize+0x52>
 8003eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d002      	beq.n	8003eb6 <FOTA_BearerInitialize+0x52>
        p = SIM_RESULT_ERROR;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    }

    return p;
 8003eb6:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3790      	adds	r7, #144	; 0x90
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	0800aaa8 	.word	0x0800aaa8

08003ec8 <FOTA_GetChecksum>:

SIMCOM_RESULT FOTA_GetChecksum(at_ftp_t *setFTP, uint32_t *checksum) {
 8003ec8:	b5b0      	push	{r4, r5, r7, lr}
 8003eca:	b088      	sub	sp, #32
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
    SIMCOM_RESULT p;
    AT_FTP_STATE state;
    at_ftpget_t setFTPGET;

    // Set Default Parameter
    setFTP->id = 1;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]
    setFTP->size = 0;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    strcpy(setFTP->server, NET_FTP_SERVER);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3304      	adds	r3, #4
 8003ee4:	4a3f      	ldr	r2, [pc, #252]	; (8003fe4 <FOTA_GetChecksum+0x11c>)
 8003ee6:	461c      	mov	r4, r3
 8003ee8:	4615      	mov	r5, r2
 8003eea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003eec:	6020      	str	r0, [r4, #0]
 8003eee:	6061      	str	r1, [r4, #4]
 8003ef0:	60a2      	str	r2, [r4, #8]
 8003ef2:	60e3      	str	r3, [r4, #12]
 8003ef4:	6828      	ldr	r0, [r5, #0]
 8003ef6:	6120      	str	r0, [r4, #16]
 8003ef8:	88ab      	ldrh	r3, [r5, #4]
 8003efa:	79aa      	ldrb	r2, [r5, #6]
 8003efc:	82a3      	strh	r3, [r4, #20]
 8003efe:	4613      	mov	r3, r2
 8003f00:	75a3      	strb	r3, [r4, #22]
    strcpy(setFTP->username, NET_FTP_USERNAME);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	3322      	adds	r3, #34	; 0x22
 8003f06:	4a38      	ldr	r2, [pc, #224]	; (8003fe8 <FOTA_GetChecksum+0x120>)
 8003f08:	461d      	mov	r5, r3
 8003f0a:	4614      	mov	r4, r2
 8003f0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f0e:	6028      	str	r0, [r5, #0]
 8003f10:	6069      	str	r1, [r5, #4]
 8003f12:	60aa      	str	r2, [r5, #8]
 8003f14:	60eb      	str	r3, [r5, #12]
 8003f16:	cc03      	ldmia	r4!, {r0, r1}
 8003f18:	6128      	str	r0, [r5, #16]
 8003f1a:	6169      	str	r1, [r5, #20]
    strcpy(setFTP->password, NET_FTP_PASSWORD);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	3340      	adds	r3, #64	; 0x40
 8003f20:	4932      	ldr	r1, [pc, #200]	; (8003fec <FOTA_GetChecksum+0x124>)
 8003f22:	461a      	mov	r2, r3
 8003f24:	460b      	mov	r3, r1
 8003f26:	cb03      	ldmia	r3!, {r0, r1}
 8003f28:	6010      	str	r0, [r2, #0]
 8003f2a:	6051      	str	r1, [r2, #4]
 8003f2c:	881b      	ldrh	r3, [r3, #0]
 8003f2e:	8113      	strh	r3, [r2, #8]
    sprintf(setFTP->file, "%s.crc", setFTP->version);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f103 0068 	add.w	r0, r3, #104	; 0x68
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	337c      	adds	r3, #124	; 0x7c
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	492c      	ldr	r1, [pc, #176]	; (8003ff0 <FOTA_GetChecksum+0x128>)
 8003f3e:	f005 fefd 	bl	8009d3c <siprintf>

    // FTP Init
    p = AT_FtpInitialize(setFTP);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7fe fa32 	bl	80023ac <AT_FtpInitialize>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	77fb      	strb	r3, [r7, #31]

    // Open FTP Session
    if (p > 0) {
 8003f4c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	dd08      	ble.n	8003f66 <FOTA_GetChecksum+0x9e>
        setFTPGET.mode = FTPGET_OPEN;
 8003f54:	2301      	movs	r3, #1
 8003f56:	60bb      	str	r3, [r7, #8]
        p = AT_FtpDownload(&setFTPGET);
 8003f58:	f107 0308 	add.w	r3, r7, #8
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7fe faf5 	bl	800254c <AT_FtpDownload>
 8003f62:	4603      	mov	r3, r0
 8003f64:	77fb      	strb	r3, [r7, #31]
    }

    // Read FTP File
    if (p > 0 && setFTPGET.response == FTP_READY) {
 8003f66:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	dd25      	ble.n	8003fba <FOTA_GetChecksum+0xf2>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d122      	bne.n	8003fba <FOTA_GetChecksum+0xf2>
        // Initiate Download
        setFTPGET.mode = FTPGET_READ;
 8003f74:	2302      	movs	r3, #2
 8003f76:	60bb      	str	r3, [r7, #8]
        setFTPGET.reqlength = 8;
 8003f78:	2308      	movs	r3, #8
 8003f7a:	823b      	strh	r3, [r7, #16]
        p = AT_FtpDownload(&setFTPGET);
 8003f7c:	f107 0308 	add.w	r3, r7, #8
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7fe fae3 	bl	800254c <AT_FtpDownload>
 8003f86:	4603      	mov	r3, r0
 8003f88:	77fb      	strb	r3, [r7, #31]

        if (p > 0) {
 8003f8a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	dd13      	ble.n	8003fba <FOTA_GetChecksum+0xf2>
            // Copy to Buffer
            *checksum = strtol(setFTPGET.ptr, (char**) NULL, 16);
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	2210      	movs	r2, #16
 8003f96:	2100      	movs	r1, #0
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f005 ff97 	bl	8009ecc <strtol>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	601a      	str	r2, [r3, #0]

            // Indicator
            LOG_Str("FOTA:ChecksumOrigin = ");
 8003fa6:	4813      	ldr	r0, [pc, #76]	; (8003ff4 <FOTA_GetChecksum+0x12c>)
 8003fa8:	f7ff fe16 	bl	8003bd8 <LOG_Str>
            LOG_Hex32(*checksum);
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff fde7 	bl	8003b84 <LOG_Hex32>
            LOG_Enter();
 8003fb6:	f7ff fd8b 	bl	8003ad0 <LOG_Enter>
        }
    }

    // Check state
    AT_FtpCurrentState(&state);
 8003fba:	f107 0318 	add.w	r3, r7, #24
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fe fb72 	bl	80026a8 <AT_FtpCurrentState>
    if (state == FTP_STATE_ESTABLISHED) {
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d106      	bne.n	8003fd8 <FOTA_GetChecksum+0x110>
        // Close session
        Simcom_Command("AT+FTPQUIT\r", NULL, 500, 0);
 8003fca:	2300      	movs	r3, #0
 8003fcc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	4809      	ldr	r0, [pc, #36]	; (8003ff8 <FOTA_GetChecksum+0x130>)
 8003fd4:	f000 fbb2 	bl	800473c <Simcom_Command>
    }

    return p;
 8003fd8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3720      	adds	r7, #32
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bdb0      	pop	{r4, r5, r7, pc}
 8003fe4:	0800aaec 	.word	0x0800aaec
 8003fe8:	0800ab04 	.word	0x0800ab04
 8003fec:	0800ab1c 	.word	0x0800ab1c
 8003ff0:	0800ab28 	.word	0x0800ab28
 8003ff4:	0800ab30 	.word	0x0800ab30
 8003ff8:	0800ab48 	.word	0x0800ab48

08003ffc <FOTA_FirmwareToFlash>:

SIMCOM_RESULT FOTA_FirmwareToFlash(at_ftp_t *setFTP, uint32_t *len) {
 8003ffc:	b5b0      	push	{r4, r5, r7, lr}
 8003ffe:	b08a      	sub	sp, #40	; 0x28
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
    uint32_t timer;
    AT_FTP_STATE state;
    at_ftpget_t setFTPGET;

    // Set Default Parameter
    setFTP->id = 1;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	601a      	str	r2, [r3, #0]
    setFTP->size = 0;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    strcpy(setFTP->server, NET_FTP_SERVER);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3304      	adds	r3, #4
 8004018:	4a6d      	ldr	r2, [pc, #436]	; (80041d0 <FOTA_FirmwareToFlash+0x1d4>)
 800401a:	461c      	mov	r4, r3
 800401c:	4615      	mov	r5, r2
 800401e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004020:	6020      	str	r0, [r4, #0]
 8004022:	6061      	str	r1, [r4, #4]
 8004024:	60a2      	str	r2, [r4, #8]
 8004026:	60e3      	str	r3, [r4, #12]
 8004028:	6828      	ldr	r0, [r5, #0]
 800402a:	6120      	str	r0, [r4, #16]
 800402c:	88ab      	ldrh	r3, [r5, #4]
 800402e:	79aa      	ldrb	r2, [r5, #6]
 8004030:	82a3      	strh	r3, [r4, #20]
 8004032:	4613      	mov	r3, r2
 8004034:	75a3      	strb	r3, [r4, #22]
    strcpy(setFTP->username, NET_FTP_USERNAME);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	3322      	adds	r3, #34	; 0x22
 800403a:	4a66      	ldr	r2, [pc, #408]	; (80041d4 <FOTA_FirmwareToFlash+0x1d8>)
 800403c:	461d      	mov	r5, r3
 800403e:	4614      	mov	r4, r2
 8004040:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004042:	6028      	str	r0, [r5, #0]
 8004044:	6069      	str	r1, [r5, #4]
 8004046:	60aa      	str	r2, [r5, #8]
 8004048:	60eb      	str	r3, [r5, #12]
 800404a:	cc03      	ldmia	r4!, {r0, r1}
 800404c:	6128      	str	r0, [r5, #16]
 800404e:	6169      	str	r1, [r5, #20]
    strcpy(setFTP->password, NET_FTP_PASSWORD);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	3340      	adds	r3, #64	; 0x40
 8004054:	4960      	ldr	r1, [pc, #384]	; (80041d8 <FOTA_FirmwareToFlash+0x1dc>)
 8004056:	461a      	mov	r2, r3
 8004058:	460b      	mov	r3, r1
 800405a:	cb03      	ldmia	r3!, {r0, r1}
 800405c:	6010      	str	r0, [r2, #0]
 800405e:	6051      	str	r1, [r2, #4]
 8004060:	881b      	ldrh	r3, [r3, #0]
 8004062:	8113      	strh	r3, [r2, #8]
    sprintf(setFTP->file, "%s.bin", setFTP->version);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	337c      	adds	r3, #124	; 0x7c
 800406e:	461a      	mov	r2, r3
 8004070:	495a      	ldr	r1, [pc, #360]	; (80041dc <FOTA_FirmwareToFlash+0x1e0>)
 8004072:	f005 fe63 	bl	8009d3c <siprintf>

    // FTP Init
    p = AT_FtpInitialize(setFTP);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7fe f998 	bl	80023ac <AT_FtpInitialize>
 800407c:	4603      	mov	r3, r0
 800407e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Get file size
    if (p > 0) {
 8004082:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004086:	2b00      	cmp	r3, #0
 8004088:	dd05      	ble.n	8004096 <FOTA_FirmwareToFlash+0x9a>
        p = AT_FtpFileSize(setFTP);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7fe fa00 	bl	8002490 <AT_FtpFileSize>
 8004090:	4603      	mov	r3, r0
 8004092:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    // Open FTP Session
    if (p > 0 && setFTP->size) {
 8004096:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800409a:	2b00      	cmp	r3, #0
 800409c:	dd0e      	ble.n	80040bc <FOTA_FirmwareToFlash+0xc0>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d009      	beq.n	80040bc <FOTA_FirmwareToFlash+0xc0>
        setFTPGET.mode = FTPGET_OPEN;
 80040a8:	2301      	movs	r3, #1
 80040aa:	60fb      	str	r3, [r7, #12]
        p = AT_FtpDownload(&setFTPGET);
 80040ac:	f107 030c 	add.w	r3, r7, #12
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7fe fa4b 	bl	800254c <AT_FtpDownload>
 80040b6:	4603      	mov	r3, r0
 80040b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    // Read FTP File
    if (p > 0 && setFTPGET.response == FTP_READY) {
 80040bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	dd6f      	ble.n	80041a4 <FOTA_FirmwareToFlash+0x1a8>
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d16c      	bne.n	80041a4 <FOTA_FirmwareToFlash+0x1a8>
        // Prepare, start timer
        LOG_StrLn("FOTA:Start");
 80040ca:	4845      	ldr	r0, [pc, #276]	; (80041e0 <FOTA_FirmwareToFlash+0x1e4>)
 80040cc:	f7ff fd9c 	bl	8003c08 <LOG_StrLn>
        timer = _GetTickMS();
 80040d0:	f000 fcf6 	bl	8004ac0 <_GetTickMS>
 80040d4:	6238      	str	r0, [r7, #32]
        FLASHER_EraseAppArea();
 80040d6:	f7ff fc1f 	bl	8003918 <FLASHER_EraseAppArea>

        // Copy chunk by chunk
        setFTPGET.mode = FTPGET_READ;
 80040da:	2302      	movs	r3, #2
 80040dc:	60fb      	str	r3, [r7, #12]
        setFTPGET.reqlength = 1376;
 80040de:	f44f 63ac 	mov.w	r3, #1376	; 0x560
 80040e2:	82bb      	strh	r3, [r7, #20]
        do {
            // Initiate Download
            p = AT_FtpDownload(&setFTPGET);
 80040e4:	f107 030c 	add.w	r3, r7, #12
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7fe fa2f 	bl	800254c <AT_FtpDownload>
 80040ee:	4603      	mov	r3, r0
 80040f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            if (p > 0 && setFTPGET.cnflength) {
 80040f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	dd33      	ble.n	8004164 <FOTA_FirmwareToFlash+0x168>
 80040fc:	8afb      	ldrh	r3, [r7, #22]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d030      	beq.n	8004164 <FOTA_FirmwareToFlash+0x168>
                // Copy to Buffer
                FLASHER_WriteAppArea((uint8_t*) setFTPGET.ptr, setFTPGET.cnflength, *len);
 8004102:	69b8      	ldr	r0, [r7, #24]
 8004104:	8af9      	ldrh	r1, [r7, #22]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	461a      	mov	r2, r3
 800410c:	f7ff fc4e 	bl	80039ac <FLASHER_WriteAppArea>
                *len += setFTPGET.cnflength;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	8afa      	ldrh	r2, [r7, #22]
 8004116:	441a      	add	r2, r3
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	601a      	str	r2, [r3, #0]

                // Indicator
                _LedToggle();
 800411c:	f000 fcea 	bl	8004af4 <_LedToggle>
                LOG_Str("FOTA:Progress = ");
 8004120:	4830      	ldr	r0, [pc, #192]	; (80041e4 <FOTA_FirmwareToFlash+0x1e8>)
 8004122:	f7ff fd59 	bl	8003bd8 <LOG_Str>
                LOG_Int(*len);
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4618      	mov	r0, r3
 800412c:	f7ff fcdc 	bl	8003ae8 <LOG_Int>
                LOG_Str(" Bytes (");
 8004130:	482d      	ldr	r0, [pc, #180]	; (80041e8 <FOTA_FirmwareToFlash+0x1ec>)
 8004132:	f7ff fd51 	bl	8003bd8 <LOG_Str>
                LOG_Int(*len * 100 / setFTP->size);
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2264      	movs	r2, #100	; 0x64
 800413c:	fb02 f203 	mul.w	r2, r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004146:	fbb2 f3f3 	udiv	r3, r2, r3
 800414a:	4618      	mov	r0, r3
 800414c:	f7ff fccc 	bl	8003ae8 <LOG_Int>
                LOG_StrLn("%)");
 8004150:	4826      	ldr	r0, [pc, #152]	; (80041ec <FOTA_FirmwareToFlash+0x1f0>)
 8004152:	f7ff fd59 	bl	8003c08 <LOG_StrLn>
            } else {
                break;
            }
        } while (*len < setFTP->size);
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004160:	429a      	cmp	r2, r3
 8004162:	d3bf      	bcc.n	80040e4 <FOTA_FirmwareToFlash+0xe8>

        // Check, stop timer
        if (*len && *len == setFTP->size) {
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d015      	beq.n	8004198 <FOTA_FirmwareToFlash+0x19c>
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004176:	429a      	cmp	r2, r3
 8004178:	d10e      	bne.n	8004198 <FOTA_FirmwareToFlash+0x19c>
            LOG_Str("FOTA:End = ");
 800417a:	481d      	ldr	r0, [pc, #116]	; (80041f0 <FOTA_FirmwareToFlash+0x1f4>)
 800417c:	f7ff fd2c 	bl	8003bd8 <LOG_Str>
            LOG_Int(_GetTickMS() - timer);
 8004180:	f000 fc9e 	bl	8004ac0 <_GetTickMS>
 8004184:	4602      	mov	r2, r0
 8004186:	6a3b      	ldr	r3, [r7, #32]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	4618      	mov	r0, r3
 800418c:	f7ff fcac 	bl	8003ae8 <LOG_Int>
            LOG_StrLn("ms");
 8004190:	4818      	ldr	r0, [pc, #96]	; (80041f4 <FOTA_FirmwareToFlash+0x1f8>)
 8004192:	f7ff fd39 	bl	8003c08 <LOG_StrLn>
 8004196:	e005      	b.n	80041a4 <FOTA_FirmwareToFlash+0x1a8>
        } else {
            LOG_StrLn("FOTA:Failed");
 8004198:	4817      	ldr	r0, [pc, #92]	; (80041f8 <FOTA_FirmwareToFlash+0x1fc>)
 800419a:	f7ff fd35 	bl	8003c08 <LOG_StrLn>
            p = SIM_RESULT_ERROR;
 800419e:	2300      	movs	r3, #0
 80041a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (p > 0) {

    }

    // Check state
    AT_FtpCurrentState(&state);
 80041a4:	f107 031c 	add.w	r3, r7, #28
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7fe fa7d 	bl	80026a8 <AT_FtpCurrentState>
    if (state == FTP_STATE_ESTABLISHED) {
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d106      	bne.n	80041c2 <FOTA_FirmwareToFlash+0x1c6>
        // Close session
        Simcom_Command("AT+FTPQUIT\r", NULL, 500, 0);
 80041b4:	2300      	movs	r3, #0
 80041b6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80041ba:	2100      	movs	r1, #0
 80041bc:	480f      	ldr	r0, [pc, #60]	; (80041fc <FOTA_FirmwareToFlash+0x200>)
 80041be:	f000 fabd 	bl	800473c <Simcom_Command>
    }

    return p;
 80041c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3728      	adds	r7, #40	; 0x28
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bdb0      	pop	{r4, r5, r7, pc}
 80041ce:	bf00      	nop
 80041d0:	0800aaec 	.word	0x0800aaec
 80041d4:	0800ab04 	.word	0x0800ab04
 80041d8:	0800ab1c 	.word	0x0800ab1c
 80041dc:	0800ab54 	.word	0x0800ab54
 80041e0:	0800ab5c 	.word	0x0800ab5c
 80041e4:	0800ab68 	.word	0x0800ab68
 80041e8:	0800ab7c 	.word	0x0800ab7c
 80041ec:	0800ab88 	.word	0x0800ab88
 80041f0:	0800ab8c 	.word	0x0800ab8c
 80041f4:	0800ab98 	.word	0x0800ab98
 80041f8:	0800ab9c 	.word	0x0800ab9c
 80041fc:	0800ab48 	.word	0x0800ab48

08004200 <FOTA_CompareChecksum>:

uint8_t FOTA_CompareChecksum(uint32_t crcRemote, uint32_t len, uint32_t address) {
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
    uint32_t crcLocal = 0;
 800420c:	2300      	movs	r3, #0
 800420e:	617b      	str	r3, [r7, #20]
    uint8_t *addr = (uint8_t*) address;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	613b      	str	r3, [r7, #16]

    // Calculate CRC
    crcLocal = CRC_Calculate8(addr, len, 1);
 8004214:	2201      	movs	r2, #1
 8004216:	68b9      	ldr	r1, [r7, #8]
 8004218:	6938      	ldr	r0, [r7, #16]
 800421a:	f7ff f8a1 	bl	8003360 <CRC_Calculate8>
 800421e:	6178      	str	r0, [r7, #20]

    // Indicator
    LOG_Str("FOTA:Checksum = ");
 8004220:	480c      	ldr	r0, [pc, #48]	; (8004254 <FOTA_CompareChecksum+0x54>)
 8004222:	f7ff fcd9 	bl	8003bd8 <LOG_Str>
    if (crcLocal == crcRemote) {
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	429a      	cmp	r2, r3
 800422c:	d103      	bne.n	8004236 <FOTA_CompareChecksum+0x36>
        LOG_StrLn("MATCH");
 800422e:	480a      	ldr	r0, [pc, #40]	; (8004258 <FOTA_CompareChecksum+0x58>)
 8004230:	f7ff fcea 	bl	8003c08 <LOG_StrLn>
 8004234:	e002      	b.n	800423c <FOTA_CompareChecksum+0x3c>
    } else {
        LOG_StrLn("NOT MATCH");
 8004236:	4809      	ldr	r0, [pc, #36]	; (800425c <FOTA_CompareChecksum+0x5c>)
 8004238:	f7ff fce6 	bl	8003c08 <LOG_StrLn>
    }

    return (crcLocal == crcRemote);
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	429a      	cmp	r2, r3
 8004242:	bf0c      	ite	eq
 8004244:	2301      	moveq	r3, #1
 8004246:	2300      	movne	r3, #0
 8004248:	b2db      	uxtb	r3, r3
}
 800424a:	4618      	mov	r0, r3
 800424c:	3718      	adds	r7, #24
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	0800aba8 	.word	0x0800aba8
 8004258:	0800abbc 	.word	0x0800abbc
 800425c:	0800abc4 	.word	0x0800abc4

08004260 <Simcom_Lock>:
static SIMCOM_RESULT Simcom_Execute(char *data, uint16_t size, uint32_t ms, char *res);
static void Simcom_Sleep(uint8_t state);
static void Simcom_BeforeTransmitHook(void);

/* Public functions implementation --------------------------------------------*/
void Simcom_Lock(void) {
 8004260:	b480      	push	{r7}
 8004262:	af00      	add	r7, sp, #0
//    osMutexAcquire(SimcomRecMutexHandle, osWaitForever);
}
 8004264:	bf00      	nop
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <Simcom_Unlock>:

void Simcom_Unlock(void) {
 800426e:	b480      	push	{r7}
 8004270:	af00      	add	r7, sp, #0
//    osMutexRelease(SimcomRecMutexHandle);
}
 8004272:	bf00      	nop
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <Simcom_Response>:

char* Simcom_Response(char *str) {
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
    //    return memmem(SIMCOM_UART_RX, sizeof(SIMCOM_UART_RX), str, strlen(str));
    return strstr(SIMCOM_UART_RX, str);
 8004284:	6879      	ldr	r1, [r7, #4]
 8004286:	4804      	ldr	r0, [pc, #16]	; (8004298 <Simcom_Response+0x1c>)
 8004288:	f005 fd8a 	bl	8009da0 <strstr>
 800428c:	4603      	mov	r3, r0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	20000e78 	.word	0x20000e78

0800429c <Simcom_Init>:

void Simcom_Init(void) {
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0
    SIMCOM_DMA_Init();
 80042a0:	f7fd ffca 	bl	8002238 <SIMCOM_DMA_Init>
    Simcom_SetState(SIM_STATE_READY);
 80042a4:	2000      	movs	r0, #0
 80042a6:	f000 f803 	bl	80042b0 <Simcom_SetState>
}
 80042aa:	bf00      	nop
 80042ac:	bd80      	pop	{r7, pc}
	...

080042b0 <Simcom_SetState>:

uint8_t Simcom_SetState(SIMCOM_STATE state) {
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b094      	sub	sp, #80	; 0x50
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	4603      	mov	r3, r0
 80042b8:	71fb      	strb	r3, [r7, #7]
    static uint8_t init = 1;
    uint8_t depth = 3;
 80042ba:	2303      	movs	r3, #3
 80042bc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    SIMCOM_STATE lastState = SIM_STATE_DOWN;
 80042c0:	23ff      	movs	r3, #255	; 0xff
 80042c2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
    SIMCOM_RESULT p;

    Simcom_Lock();
 80042c6:	f7ff ffcb 	bl	8004260 <Simcom_Lock>
    // Handle SIMCOM state properly
    while (SIM.state < state) {
 80042ca:	e1a4      	b.n	8004616 <Simcom_SetState+0x366>
        // Handle locked-loop
        if (SIM.state < lastState) {
 80042cc:	4bc4      	ldr	r3, [pc, #784]	; (80045e0 <Simcom_SetState+0x330>)
 80042ce:	f993 3000 	ldrsb.w	r3, [r3]
 80042d2:	f997 204e 	ldrsb.w	r2, [r7, #78]	; 0x4e
 80042d6:	429a      	cmp	r2, r3
 80042d8:	dd16      	ble.n	8004308 <Simcom_SetState+0x58>
            if (!--depth) {
 80042da:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80042de:	3b01      	subs	r3, #1
 80042e0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80042e4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d103      	bne.n	80042f4 <Simcom_SetState+0x44>
                SIM.state = SIM_STATE_DOWN;
 80042ec:	4bbc      	ldr	r3, [pc, #752]	; (80045e0 <Simcom_SetState+0x330>)
 80042ee:	22ff      	movs	r2, #255	; 0xff
 80042f0:	701a      	strb	r2, [r3, #0]
                break;
 80042f2:	e198      	b.n	8004626 <Simcom_SetState+0x376>
            }
            LOG_Str("Simcom:LockedLoop = ");
 80042f4:	48bb      	ldr	r0, [pc, #748]	; (80045e4 <Simcom_SetState+0x334>)
 80042f6:	f7ff fc6f 	bl	8003bd8 <LOG_Str>
            LOG_Int(depth);
 80042fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff fbf2 	bl	8003ae8 <LOG_Int>
            LOG_Enter();
 8004304:	f7ff fbe4 	bl	8003ad0 <LOG_Enter>
        }

        // Handle signal
        if (SIM.state == SIM_STATE_DOWN) {
 8004308:	4bb5      	ldr	r3, [pc, #724]	; (80045e0 <Simcom_SetState+0x330>)
 800430a:	f993 3000 	ldrsb.w	r3, [r3]
 800430e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004312:	d103      	bne.n	800431c <Simcom_SetState+0x6c>
            SIM.signal = 0;
 8004314:	4bb2      	ldr	r3, [pc, #712]	; (80045e0 <Simcom_SetState+0x330>)
 8004316:	2200      	movs	r2, #0
 8004318:	741a      	strb	r2, [r3, #16]
 800431a:	e00f      	b.n	800433c <Simcom_SetState+0x8c>
        } else {
            Simcom_IdleJob(NULL);
 800431c:	2000      	movs	r0, #0
 800431e:	f000 fa79 	bl	8004814 <Simcom_IdleJob>
            if (SIM.state >= SIM_STATE_GPRS_ON) {
 8004322:	4baf      	ldr	r3, [pc, #700]	; (80045e0 <Simcom_SetState+0x330>)
 8004324:	f993 3000 	ldrsb.w	r3, [r3]
 8004328:	2b02      	cmp	r3, #2
 800432a:	dd07      	ble.n	800433c <Simcom_SetState+0x8c>
                // Force to exit loop
                if (SIM.signal < 15) {
 800432c:	4bac      	ldr	r3, [pc, #688]	; (80045e0 <Simcom_SetState+0x330>)
 800432e:	7c1b      	ldrb	r3, [r3, #16]
 8004330:	2b0e      	cmp	r3, #14
 8004332:	d803      	bhi.n	800433c <Simcom_SetState+0x8c>
                    LOG_StrLn("Simcom:SignalPoor");
 8004334:	48ac      	ldr	r0, [pc, #688]	; (80045e8 <Simcom_SetState+0x338>)
 8004336:	f7ff fc67 	bl	8003c08 <LOG_StrLn>
                    break;
 800433a:	e174      	b.n	8004626 <Simcom_SetState+0x376>
                }
            }
        }

        // Set value
        p = SIM_RESULT_OK;
 800433c:	2301      	movs	r3, #1
 800433e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        lastState = SIM.state;
 8004342:	4ba7      	ldr	r3, [pc, #668]	; (80045e0 <Simcom_SetState+0x330>)
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

        // handle simcom states
        switch (SIM.state) {
 800434a:	4ba5      	ldr	r3, [pc, #660]	; (80045e0 <Simcom_SetState+0x330>)
 800434c:	f993 3000 	ldrsb.w	r3, [r3]
 8004350:	3301      	adds	r3, #1
 8004352:	2b04      	cmp	r3, #4
 8004354:	f200 815e 	bhi.w	8004614 <Simcom_SetState+0x364>
 8004358:	a201      	add	r2, pc, #4	; (adr r2, 8004360 <Simcom_SetState+0xb0>)
 800435a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435e:	bf00      	nop
 8004360:	08004375 	.word	0x08004375
 8004364:	080043e1 	.word	0x080043e1
 8004368:	080044a1 	.word	0x080044a1
 800436c:	08004545 	.word	0x08004545
 8004370:	08004617 	.word	0x08004617
            case SIM_STATE_DOWN:
                // only executed at power up
                if (init) {
 8004374:	4b9d      	ldr	r3, [pc, #628]	; (80045ec <Simcom_SetState+0x33c>)
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d006      	beq.n	800438a <Simcom_SetState+0xda>
                    init = 0;
 800437c:	4b9b      	ldr	r3, [pc, #620]	; (80045ec <Simcom_SetState+0x33c>)
 800437e:	2200      	movs	r2, #0
 8004380:	701a      	strb	r2, [r3, #0]
                    LOG_StrLn("Simcom:Init");
 8004382:	489b      	ldr	r0, [pc, #620]	; (80045f0 <Simcom_SetState+0x340>)
 8004384:	f7ff fc40 	bl	8003c08 <LOG_StrLn>
 8004388:	e002      	b.n	8004390 <Simcom_SetState+0xe0>
                } else {
                    LOG_StrLn("Simcom:Restarting...");
 800438a:	489a      	ldr	r0, [pc, #616]	; (80045f4 <Simcom_SetState+0x344>)
 800438c:	f7ff fc3c 	bl	8003c08 <LOG_StrLn>
                }

                // power up the module
                p = Simcom_Power();
 8004390:	f000 faaa 	bl	80048e8 <Simcom_Power>
 8004394:	4603      	mov	r3, r0
 8004396:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                // upgrade simcom state
                if (p > 0) {
 800439a:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 800439e:	2b00      	cmp	r3, #0
 80043a0:	dd0c      	ble.n	80043bc <Simcom_SetState+0x10c>
                    SIM.state++;
 80043a2:	4b8f      	ldr	r3, [pc, #572]	; (80045e0 <Simcom_SetState+0x330>)
 80043a4:	f993 3000 	ldrsb.w	r3, [r3]
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	3301      	adds	r3, #1
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	b25a      	sxtb	r2, r3
 80043b0:	4b8b      	ldr	r3, [pc, #556]	; (80045e0 <Simcom_SetState+0x330>)
 80043b2:	701a      	strb	r2, [r3, #0]
                    LOG_StrLn("Simcom:ON");
 80043b4:	4890      	ldr	r0, [pc, #576]	; (80045f8 <Simcom_SetState+0x348>)
 80043b6:	f7ff fc27 	bl	8003c08 <LOG_StrLn>
 80043ba:	e002      	b.n	80043c2 <Simcom_SetState+0x112>
                } else {
                    LOG_StrLn("Simcom:Error");
 80043bc:	488f      	ldr	r0, [pc, #572]	; (80045fc <Simcom_SetState+0x34c>)
 80043be:	f7ff fc23 	bl	8003c08 <LOG_StrLn>
                }

                // disable command echo
                if (p > 0) {
 80043c2:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	dd05      	ble.n	80043d6 <Simcom_SetState+0x126>
                    p = AT_CommandEchoMode(0);
 80043ca:	2000      	movs	r0, #0
 80043cc:	f7fe f97e 	bl	80026cc <AT_CommandEchoMode>
 80043d0:	4603      	mov	r3, r0
 80043d2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                }

                _DelayMS(500);
 80043d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80043da:	f000 fb66 	bl	8004aaa <_DelayMS>
                break;
 80043de:	e11a      	b.n	8004616 <Simcom_SetState+0x366>
            case SIM_STATE_READY:
                // =========== BASIC CONFIGURATION
                // Set serial baud-rate
                if (p > 0) {
 80043e0:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	dd0a      	ble.n	80043fe <Simcom_SetState+0x14e>
                    uint32_t rate = 0;
 80043e8:	2300      	movs	r3, #0
 80043ea:	64bb      	str	r3, [r7, #72]	; 0x48
                    p = AT_FixedLocalRate(ATW, &rate);
 80043ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80043f0:	4619      	mov	r1, r3
 80043f2:	2000      	movs	r0, #0
 80043f4:	f7fe fd8a 	bl	8002f0c <AT_FixedLocalRate>
 80043f8:	4603      	mov	r3, r0
 80043fa:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                }
                // Error report format: 0, 1(Numeric), 2(verbose)
                if (p > 0) {
 80043fe:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8004402:	2b00      	cmp	r3, #0
 8004404:	dd0a      	ble.n	800441c <Simcom_SetState+0x16c>
                    AT_CMEE state = CMEE_VERBOSE;
 8004406:	2302      	movs	r3, #2
 8004408:	647b      	str	r3, [r7, #68]	; 0x44
                    p = AT_ReportMobileEquipmentError(ATW, &state);
 800440a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800440e:	4619      	mov	r1, r3
 8004410:	2000      	movs	r0, #0
 8004412:	f7fe fd67 	bl	8002ee4 <AT_ReportMobileEquipmentError>
 8004416:	4603      	mov	r3, r0
 8004418:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                }
                // Use pin DTR as sleep control
                if (p > 0) {
 800441c:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8004420:	2b00      	cmp	r3, #0
 8004422:	dd0a      	ble.n	800443a <Simcom_SetState+0x18a>
                    AT_CSCLK state = CSCLK_EN_DTR;
 8004424:	2301      	movs	r3, #1
 8004426:	643b      	str	r3, [r7, #64]	; 0x40
                    p = AT_ConfigureSlowClock(ATW, &state);
 8004428:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800442c:	4619      	mov	r1, r3
 800442e:	2000      	movs	r0, #0
 8004430:	f7fe fd44 	bl	8002ebc <AT_ConfigureSlowClock>
 8004434:	4603      	mov	r3, r0
 8004436:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
//                    AT_BOOL state = AT_DISABLE;
//                    p = AT_ShowRemoteIp(ATW, &state);
//                }
                // =========== NETWORK CONFIGURATION
                // Check SIM Card
                if (p > 0) {
 800443a:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 800443e:	2b00      	cmp	r3, #0
 8004440:	dd09      	ble.n	8004456 <Simcom_SetState+0x1a6>
                    p = Simcom_Command("AT+CPIN?\r", "READY", 500, 0);
 8004442:	2300      	movs	r3, #0
 8004444:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004448:	496d      	ldr	r1, [pc, #436]	; (8004600 <Simcom_SetState+0x350>)
 800444a:	486e      	ldr	r0, [pc, #440]	; (8004604 <Simcom_SetState+0x354>)
 800444c:	f000 f976 	bl	800473c <Simcom_Command>
 8004450:	4603      	mov	r3, r0
 8004452:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                }
                // Disable presentation of <AcT>&<rac> at CREG and CGREG
                if (p > 0) {
 8004456:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 800445a:	2b00      	cmp	r3, #0
 800445c:	dd0e      	ble.n	800447c <Simcom_SetState+0x1cc>
                    at_csact_t param = {
 800445e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004462:	2200      	movs	r2, #0
 8004464:	601a      	str	r2, [r3, #0]
 8004466:	605a      	str	r2, [r3, #4]
 8004468:	609a      	str	r2, [r3, #8]
                            .creg = 0,
                            .cgreg = 0,
                    };
                    p = AT_NetworkAttachedStatus(ATW, &param);
 800446a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800446e:	4619      	mov	r1, r3
 8004470:	2000      	movs	r0, #0
 8004472:	f7fe fbe7 	bl	8002c44 <AT_NetworkAttachedStatus>
 8004476:	4603      	mov	r3, r0
 8004478:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                }

                // upgrade simcom state
                if (p > 0) {
 800447c:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8004480:	2b00      	cmp	r3, #0
 8004482:	dd08      	ble.n	8004496 <Simcom_SetState+0x1e6>
                    SIM.state++;
 8004484:	4b56      	ldr	r3, [pc, #344]	; (80045e0 <Simcom_SetState+0x330>)
 8004486:	f993 3000 	ldrsb.w	r3, [r3]
 800448a:	b2db      	uxtb	r3, r3
 800448c:	3301      	adds	r3, #1
 800448e:	b2db      	uxtb	r3, r3
 8004490:	b25a      	sxtb	r2, r3
 8004492:	4b53      	ldr	r3, [pc, #332]	; (80045e0 <Simcom_SetState+0x330>)
 8004494:	701a      	strb	r2, [r3, #0]
                }

                _DelayMS(500);
 8004496:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800449a:	f000 fb06 	bl	8004aaa <_DelayMS>
                break;
 800449e:	e0ba      	b.n	8004616 <Simcom_SetState+0x366>
            case SIM_STATE_CONFIGURED:
                // =========== NETWORK ATTACH
                // Set signal Generation 2G(13)/3G(14)/AUTO(2)
                if (p > 0) {
 80044a0:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	dd0f      	ble.n	80044c8 <Simcom_SetState+0x218>
                    at_cnmp_t param = {
 80044a8:	4a57      	ldr	r2, [pc, #348]	; (8004608 <Simcom_SetState+0x358>)
 80044aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80044b2:	e883 0003 	stmia.w	r3, {r0, r1}
                            .mode = CNMP_ACT_AUTO,
                            .preferred = CNMP_ACT_P_UMTS
                    };
                    p = AT_RadioAccessTechnology(ATW, &param);
 80044b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044ba:	4619      	mov	r1, r3
 80044bc:	2000      	movs	r0, #0
 80044be:	f7fe fb2b 	bl	8002b18 <AT_RadioAccessTechnology>
 80044c2:	4603      	mov	r3, r0
 80044c4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                }
                // Network Registration Status
                if (p > 0) {
 80044c8:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	dd27      	ble.n	8004520 <Simcom_SetState+0x270>
                    at_c_greg_t read, param = {
 80044d0:	2300      	movs	r3, #0
 80044d2:	61fb      	str	r3, [r7, #28]
 80044d4:	2301      	movs	r3, #1
 80044d6:	623b      	str	r3, [r7, #32]
                            .mode = CREG_MODE_DISABLE,
                            .stat = CREG_STAT_REG_HOME
                    };
                    // wait until attached
                    do {
                        p = AT_NetworkRegistration("CREG", ATW, &param);
 80044d8:	f107 031c 	add.w	r3, r7, #28
 80044dc:	461a      	mov	r2, r3
 80044de:	2100      	movs	r1, #0
 80044e0:	484a      	ldr	r0, [pc, #296]	; (800460c <Simcom_SetState+0x35c>)
 80044e2:	f7fe fc5b 	bl	8002d9c <AT_NetworkRegistration>
 80044e6:	4603      	mov	r3, r0
 80044e8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                        if (p > 0) {
 80044ec:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	dd09      	ble.n	8004508 <Simcom_SetState+0x258>
                            p = AT_NetworkRegistration("CREG", ATR, &read);
 80044f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044f8:	461a      	mov	r2, r3
 80044fa:	2101      	movs	r1, #1
 80044fc:	4843      	ldr	r0, [pc, #268]	; (800460c <Simcom_SetState+0x35c>)
 80044fe:	f7fe fc4d 	bl	8002d9c <AT_NetworkRegistration>
 8004502:	4603      	mov	r3, r0
 8004504:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                        }

                        _DelayMS(1000);
 8004508:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800450c:	f000 facd 	bl	8004aaa <_DelayMS>
                    } while (p && read.stat != param.stat);
 8004510:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8004514:	2b00      	cmp	r3, #0
 8004516:	d003      	beq.n	8004520 <Simcom_SetState+0x270>
 8004518:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800451a:	6a3b      	ldr	r3, [r7, #32]
 800451c:	429a      	cmp	r2, r3
 800451e:	d1db      	bne.n	80044d8 <Simcom_SetState+0x228>
                }

                // upgrade simcom state
                if (p > 0) {
 8004520:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8004524:	2b00      	cmp	r3, #0
 8004526:	dd08      	ble.n	800453a <Simcom_SetState+0x28a>
                    SIM.state++;
 8004528:	4b2d      	ldr	r3, [pc, #180]	; (80045e0 <Simcom_SetState+0x330>)
 800452a:	f993 3000 	ldrsb.w	r3, [r3]
 800452e:	b2db      	uxtb	r3, r3
 8004530:	3301      	adds	r3, #1
 8004532:	b2db      	uxtb	r3, r3
 8004534:	b25a      	sxtb	r2, r3
 8004536:	4b2a      	ldr	r3, [pc, #168]	; (80045e0 <Simcom_SetState+0x330>)
 8004538:	701a      	strb	r2, [r3, #0]
                }

                _DelayMS(500);
 800453a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800453e:	f000 fab4 	bl	8004aaa <_DelayMS>
                break;
 8004542:	e068      	b.n	8004616 <Simcom_SetState+0x366>
            case SIM_STATE_NETWORK_ON:
                // =========== GPRS ATTACH
                // GPRS Registration Status
                if (p > 0) {
 8004544:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8004548:	2b00      	cmp	r3, #0
 800454a:	dd27      	ble.n	800459c <Simcom_SetState+0x2ec>
                    at_c_greg_t read, param = {
 800454c:	2300      	movs	r3, #0
 800454e:	60fb      	str	r3, [r7, #12]
 8004550:	2301      	movs	r3, #1
 8004552:	613b      	str	r3, [r7, #16]
                            .mode = CREG_MODE_DISABLE,
                            .stat = CREG_STAT_REG_HOME
                    };
                    // wait until attached
                    do {
                        p = AT_NetworkRegistration("CGREG", ATW, &param);
 8004554:	f107 030c 	add.w	r3, r7, #12
 8004558:	461a      	mov	r2, r3
 800455a:	2100      	movs	r1, #0
 800455c:	482c      	ldr	r0, [pc, #176]	; (8004610 <Simcom_SetState+0x360>)
 800455e:	f7fe fc1d 	bl	8002d9c <AT_NetworkRegistration>
 8004562:	4603      	mov	r3, r0
 8004564:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                        if (p > 0) {
 8004568:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 800456c:	2b00      	cmp	r3, #0
 800456e:	dd09      	ble.n	8004584 <Simcom_SetState+0x2d4>
                            p = AT_NetworkRegistration("CGREG", ATR, &read);
 8004570:	f107 0314 	add.w	r3, r7, #20
 8004574:	461a      	mov	r2, r3
 8004576:	2101      	movs	r1, #1
 8004578:	4825      	ldr	r0, [pc, #148]	; (8004610 <Simcom_SetState+0x360>)
 800457a:	f7fe fc0f 	bl	8002d9c <AT_NetworkRegistration>
 800457e:	4603      	mov	r3, r0
 8004580:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                        }

                        _DelayMS(1000);
 8004584:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004588:	f000 fa8f 	bl	8004aaa <_DelayMS>
                    } while (p && read.stat != param.stat);
 800458c:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8004590:	2b00      	cmp	r3, #0
 8004592:	d003      	beq.n	800459c <Simcom_SetState+0x2ec>
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	429a      	cmp	r2, r3
 800459a:	d1db      	bne.n	8004554 <Simcom_SetState+0x2a4>
                }

                // upgrade simcom state
                if (p > 0) {
 800459c:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	dd09      	ble.n	80045b8 <Simcom_SetState+0x308>
                    SIM.state++;
 80045a4:	4b0e      	ldr	r3, [pc, #56]	; (80045e0 <Simcom_SetState+0x330>)
 80045a6:	f993 3000 	ldrsb.w	r3, [r3]
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	3301      	adds	r3, #1
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	b25a      	sxtb	r2, r3
 80045b2:	4b0b      	ldr	r3, [pc, #44]	; (80045e0 <Simcom_SetState+0x330>)
 80045b4:	701a      	strb	r2, [r3, #0]
 80045b6:	e00d      	b.n	80045d4 <Simcom_SetState+0x324>
                } else {
                    if (SIM.state == SIM_STATE_NETWORK_ON) {
 80045b8:	4b09      	ldr	r3, [pc, #36]	; (80045e0 <Simcom_SetState+0x330>)
 80045ba:	f993 3000 	ldrsb.w	r3, [r3]
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d108      	bne.n	80045d4 <Simcom_SetState+0x324>
                        SIM.state--;
 80045c2:	4b07      	ldr	r3, [pc, #28]	; (80045e0 <Simcom_SetState+0x330>)
 80045c4:	f993 3000 	ldrsb.w	r3, [r3]
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	3b01      	subs	r3, #1
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	b25a      	sxtb	r2, r3
 80045d0:	4b03      	ldr	r3, [pc, #12]	; (80045e0 <Simcom_SetState+0x330>)
 80045d2:	701a      	strb	r2, [r3, #0]
                    }
                }

                _DelayMS(500);
 80045d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80045d8:	f000 fa67 	bl	8004aaa <_DelayMS>
                break;
 80045dc:	e01b      	b.n	8004616 <Simcom_SetState+0x366>
 80045de:	bf00      	nop
 80045e0:	20000008 	.word	0x20000008
 80045e4:	0800abd0 	.word	0x0800abd0
 80045e8:	0800abe8 	.word	0x0800abe8
 80045ec:	20000020 	.word	0x20000020
 80045f0:	0800abfc 	.word	0x0800abfc
 80045f4:	0800ac08 	.word	0x0800ac08
 80045f8:	0800ac20 	.word	0x0800ac20
 80045fc:	0800ac2c 	.word	0x0800ac2c
 8004600:	0800ac3c 	.word	0x0800ac3c
 8004604:	0800ac44 	.word	0x0800ac44
 8004608:	0800ac60 	.word	0x0800ac60
 800460c:	0800ac50 	.word	0x0800ac50
 8004610:	0800ac58 	.word	0x0800ac58
            case SIM_STATE_GPRS_ON:

                break;
            default:
                break;
 8004614:	bf00      	nop
    while (SIM.state < state) {
 8004616:	4b0c      	ldr	r3, [pc, #48]	; (8004648 <Simcom_SetState+0x398>)
 8004618:	f993 3000 	ldrsb.w	r3, [r3]
 800461c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8004620:	429a      	cmp	r2, r3
 8004622:	f73f ae53 	bgt.w	80042cc <Simcom_SetState+0x1c>
        }
    };
    Simcom_Unlock();
 8004626:	f7ff fe22 	bl	800426e <Simcom_Unlock>

    return SIM.state >= state;
 800462a:	4b07      	ldr	r3, [pc, #28]	; (8004648 <Simcom_SetState+0x398>)
 800462c:	f993 3000 	ldrsb.w	r3, [r3]
 8004630:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8004634:	429a      	cmp	r2, r3
 8004636:	bfd4      	ite	le
 8004638:	2301      	movle	r3, #1
 800463a:	2300      	movgt	r3, #0
 800463c:	b2db      	uxtb	r3, r3
}
 800463e:	4618      	mov	r0, r3
 8004640:	3750      	adds	r7, #80	; 0x50
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	20000008 	.word	0x20000008

0800464c <Simcom_FOTA>:

SIMCOM_RESULT Simcom_FOTA(void) {
 800464c:	b580      	push	{r7, lr}
 800464e:	b0aa      	sub	sp, #168	; 0xa8
 8004650:	af00      	add	r7, sp, #0
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 8004652:	2300      	movs	r3, #0
 8004654:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    uint32_t checksum = 0, len = 0;
 8004658:	2300      	movs	r3, #0
 800465a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800465e:	2300      	movs	r3, #0
 8004660:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    at_ftp_t ftp = {
 8004664:	1d3b      	adds	r3, r7, #4
 8004666:	2298      	movs	r2, #152	; 0x98
 8004668:	2100      	movs	r1, #0
 800466a:	4618      	mov	r0, r3
 800466c:	f005 fb5e 	bl	8009d2c <memset>
 8004670:	4a2e      	ldr	r2, [pc, #184]	; (800472c <Simcom_FOTA+0xe0>)
 8004672:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004676:	e892 0003 	ldmia.w	r2, {r0, r1}
 800467a:	6018      	str	r0, [r3, #0]
 800467c:	3304      	adds	r3, #4
 800467e:	8019      	strh	r1, [r3, #0]
 8004680:	f107 035e 	add.w	r3, r7, #94	; 0x5e
 8004684:	2200      	movs	r2, #0
 8004686:	601a      	str	r2, [r3, #0]
 8004688:	605a      	str	r2, [r3, #4]
 800468a:	609a      	str	r2, [r3, #8]
 800468c:	819a      	strh	r2, [r3, #12]
 800468e:	4a28      	ldr	r2, [pc, #160]	; (8004730 <Simcom_FOTA+0xe4>)
 8004690:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004694:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004698:	6018      	str	r0, [r3, #0]
 800469a:	3304      	adds	r3, #4
 800469c:	7019      	strb	r1, [r3, #0]
 800469e:	f107 0385 	add.w	r3, r7, #133	; 0x85
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]
 80046a6:	605a      	str	r2, [r3, #4]
 80046a8:	609a      	str	r2, [r3, #8]
 80046aa:	f8c3 200b 	str.w	r2, [r3, #11]
            .path = "/vcu/",
            .version = "HUB2"
    };

    Simcom_Lock();
 80046ae:	f7ff fdd7 	bl	8004260 <Simcom_Lock>
    if (SIM.state >= SIM_STATE_GPRS_ON) {
 80046b2:	4b20      	ldr	r3, [pc, #128]	; (8004734 <Simcom_FOTA+0xe8>)
 80046b4:	f993 3000 	ldrsb.w	r3, [r3]
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	dd2f      	ble.n	800471c <Simcom_FOTA+0xd0>
        // Initialize bearer for TCP based apps.
        p = FOTA_BearerInitialize();
 80046bc:	f7ff fbd2 	bl	8003e64 <FOTA_BearerInitialize>
 80046c0:	4603      	mov	r3, r0
 80046c2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

        // Get Checksum of Firmware
        if (p > 0) {
 80046c6:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	dd09      	ble.n	80046e2 <Simcom_FOTA+0x96>
            p = FOTA_GetChecksum(&ftp, &checksum);
 80046ce:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80046d2:	1d3b      	adds	r3, r7, #4
 80046d4:	4611      	mov	r1, r2
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7ff fbf6 	bl	8003ec8 <FOTA_GetChecksum>
 80046dc:	4603      	mov	r3, r0
 80046de:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        }

        // Download Firmware then save to FLASH
        if (p > 0) {
 80046e2:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	dd09      	ble.n	80046fe <Simcom_FOTA+0xb2>
            p = FOTA_FirmwareToFlash(&ftp, &len);
 80046ea:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80046ee:	1d3b      	adds	r3, r7, #4
 80046f0:	4611      	mov	r1, r2
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7ff fc82 	bl	8003ffc <FOTA_FirmwareToFlash>
 80046f8:	4603      	mov	r3, r0
 80046fa:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        }

        // Buffer filled, compare the checksum
        if (p > 0) {
 80046fe:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004702:	2b00      	cmp	r3, #0
 8004704:	dd0a      	ble.n	800471c <Simcom_FOTA+0xd0>
            p = FOTA_CompareChecksum(checksum, len, FLASH_BKP_START_ADDR);
 8004706:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800470a:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800470e:	4a0a      	ldr	r2, [pc, #40]	; (8004738 <Simcom_FOTA+0xec>)
 8004710:	4618      	mov	r0, r3
 8004712:	f7ff fd75 	bl	8004200 <FOTA_CompareChecksum>
 8004716:	4603      	mov	r3, r0
 8004718:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        }
    }
    Simcom_Unlock();
 800471c:	f7ff fda7 	bl	800426e <Simcom_Unlock>
    return p;
 8004720:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
}
 8004724:	4618      	mov	r0, r3
 8004726:	37a8      	adds	r7, #168	; 0xa8
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	0800ac68 	.word	0x0800ac68
 8004730:	0800ac7c 	.word	0x0800ac7c
 8004734:	20000008 	.word	0x20000008
 8004738:	080c0000 	.word	0x080c0000

0800473c <Simcom_Command>:

SIMCOM_RESULT Simcom_Command(char *data, char *res, uint32_t ms, uint16_t size) {
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
 8004748:	807b      	strh	r3, [r7, #2]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 800474a:	2300      	movs	r3, #0
 800474c:	75fb      	strb	r3, [r7, #23]
    uint8_t upload = 1;
 800474e:	2301      	movs	r3, #1
 8004750:	75bb      	strb	r3, [r7, #22]

    // Handle default value
    if (res == NULL) {
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <Simcom_Command+0x20>
        res = SIMCOM_RSP_OK;
 8004758:	4b28      	ldr	r3, [pc, #160]	; (80047fc <Simcom_Command+0xc0>)
 800475a:	60bb      	str	r3, [r7, #8]
    }
    if (!size) {
 800475c:	887b      	ldrh	r3, [r7, #2]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d106      	bne.n	8004770 <Simcom_Command+0x34>
        upload = 0;
 8004762:	2300      	movs	r3, #0
 8004764:	75bb      	strb	r3, [r7, #22]
        size = strlen(data);
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f7fb fd64 	bl	8000234 <strlen>
 800476c:	4603      	mov	r3, r0
 800476e:	807b      	strh	r3, [r7, #2]
    }

    // only handle command if SIM_STATE_READY or BOOT_CMD
    if (SIM.state >= SIM_STATE_READY || (strcmp(data, SIMCOM_CMD_BOOT) == 0)) {
 8004770:	4b23      	ldr	r3, [pc, #140]	; (8004800 <Simcom_Command+0xc4>)
 8004772:	f993 3000 	ldrsb.w	r3, [r3]
 8004776:	2b00      	cmp	r3, #0
 8004778:	da06      	bge.n	8004788 <Simcom_Command+0x4c>
 800477a:	4922      	ldr	r1, [pc, #136]	; (8004804 <Simcom_Command+0xc8>)
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f7fb fd4f 	bl	8000220 <strcmp>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d133      	bne.n	80047f0 <Simcom_Command+0xb4>
        Simcom_Lock();
 8004788:	f7ff fd6a 	bl	8004260 <Simcom_Lock>

        // Debug: print command
        if (SIMCOM_DEBUG) {
            if (!upload) {
 800478c:	7dbb      	ldrb	r3, [r7, #22]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d108      	bne.n	80047a4 <Simcom_Command+0x68>
                LOG_Str("\n=> ");
 8004792:	481d      	ldr	r0, [pc, #116]	; (8004808 <Simcom_Command+0xcc>)
 8004794:	f7ff fa20 	bl	8003bd8 <LOG_Str>
                LOG_Buf(data, size);
 8004798:	887b      	ldrh	r3, [r7, #2]
 800479a:	4619      	mov	r1, r3
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f7ff fa4e 	bl	8003c3e <LOG_Buf>
 80047a2:	e004      	b.n	80047ae <Simcom_Command+0x72>
            } else {
                LOG_BufHex(data, size);
 80047a4:	887b      	ldrh	r3, [r7, #2]
 80047a6:	4619      	mov	r1, r3
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f7ff fa67 	bl	8003c7c <LOG_BufHex>
            }
            LOG_Enter();
 80047ae:	f7ff f98f 	bl	8003ad0 <LOG_Enter>
        }

        // send command
        p = Simcom_Execute(data, size, ms, res);
 80047b2:	8879      	ldrh	r1, [r7, #2]
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f000 f8dd 	bl	8004978 <Simcom_Execute>
 80047be:	4603      	mov	r3, r0
 80047c0:	75fb      	strb	r3, [r7, #23]

        // Debug: print response
        if (SIMCOM_DEBUG) {
            char *FTPGET = "AT+FTPGET=2";
 80047c2:	4b12      	ldr	r3, [pc, #72]	; (800480c <Simcom_Command+0xd0>)
 80047c4:	613b      	str	r3, [r7, #16]
            if (strncmp(data, FTPGET, strlen(FTPGET)) != 0) {
 80047c6:	6938      	ldr	r0, [r7, #16]
 80047c8:	f7fb fd34 	bl	8000234 <strlen>
 80047cc:	4603      	mov	r3, r0
 80047ce:	461a      	mov	r2, r3
 80047d0:	6939      	ldr	r1, [r7, #16]
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f005 fad2 	bl	8009d7c <strncmp>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d006      	beq.n	80047ec <Simcom_Command+0xb0>
                LOG_Buf(SIMCOM_UART_RX, sizeof(SIMCOM_UART_RX));
 80047de:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80047e2:	480b      	ldr	r0, [pc, #44]	; (8004810 <Simcom_Command+0xd4>)
 80047e4:	f7ff fa2b 	bl	8003c3e <LOG_Buf>
                LOG_Enter();
 80047e8:	f7ff f972 	bl	8003ad0 <LOG_Enter>
            }
        }

        Simcom_Unlock();
 80047ec:	f7ff fd3f 	bl	800426e <Simcom_Unlock>
    }

    return p;
 80047f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3718      	adds	r7, #24
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	0800ac90 	.word	0x0800ac90
 8004800:	20000008 	.word	0x20000008
 8004804:	0800ac94 	.word	0x0800ac94
 8004808:	0800ac98 	.word	0x0800ac98
 800480c:	0800aca0 	.word	0x0800aca0
 8004810:	20000e78 	.word	0x20000e78

08004814 <Simcom_IdleJob>:

SIMCOM_RESULT Simcom_IdleJob(uint8_t *iteration) {
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 800481c:	2300      	movs	r3, #0
 800481e:	73fb      	strb	r3, [r7, #15]
    at_csq_t signal;

    // debug
    if (iteration != NULL) {
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00d      	beq.n	8004842 <Simcom_IdleJob+0x2e>
        LOG_Str("Simcom:Iteration = ");
 8004826:	4811      	ldr	r0, [pc, #68]	; (800486c <Simcom_IdleJob+0x58>)
 8004828:	f7ff f9d6 	bl	8003bd8 <LOG_Str>
        LOG_Int((*iteration)++);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	1c5a      	adds	r2, r3, #1
 8004832:	b2d1      	uxtb	r1, r2
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	7011      	strb	r1, [r2, #0]
 8004838:	4618      	mov	r0, r3
 800483a:	f7ff f955 	bl	8003ae8 <LOG_Int>
        LOG_Enter();
 800483e:	f7ff f947 	bl	8003ad0 <LOG_Enter>
    }

    // other routines
    p = AT_SignalQualityReport(&signal);
 8004842:	f107 030c 	add.w	r3, r7, #12
 8004846:	4618      	mov	r0, r3
 8004848:	f7fd ff66 	bl	8002718 <AT_SignalQualityReport>
 800484c:	4603      	mov	r3, r0
 800484e:	73fb      	strb	r3, [r7, #15]
    if (p > 0) {
 8004850:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004854:	2b00      	cmp	r3, #0
 8004856:	dd02      	ble.n	800485e <Simcom_IdleJob+0x4a>
        SIM.signal = signal.percent;
 8004858:	7bba      	ldrb	r2, [r7, #14]
 800485a:	4b05      	ldr	r3, [pc, #20]	; (8004870 <Simcom_IdleJob+0x5c>)
 800485c:	741a      	strb	r2, [r3, #16]
    }

    return p;
 800485e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	0800acac 	.word	0x0800acac
 8004870:	20000008 	.word	0x20000008

08004874 <Simcom_Ready>:

static SIMCOM_RESULT Simcom_Ready(void) {
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
    uint32_t tick;

    // wait until 1s response
    tick = _GetTickMS();
 800487a:	f000 f921 	bl	8004ac0 <_GetTickMS>
 800487e:	6078      	str	r0, [r7, #4]
    while (SIM.state == SIM_STATE_DOWN) {
 8004880:	e017      	b.n	80048b2 <Simcom_Ready+0x3e>
        if (Simcom_Response(SIMCOM_RSP_READY)
 8004882:	4815      	ldr	r0, [pc, #84]	; (80048d8 <Simcom_Ready+0x64>)
 8004884:	f7ff fcfa 	bl	800427c <Simcom_Response>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d117      	bne.n	80048be <Simcom_Ready+0x4a>
                || Simcom_Response(SIMCOM_RSP_OK)
 800488e:	4813      	ldr	r0, [pc, #76]	; (80048dc <Simcom_Ready+0x68>)
 8004890:	f7ff fcf4 	bl	800427c <Simcom_Response>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d111      	bne.n	80048be <Simcom_Ready+0x4a>
                || (_GetTickMS() - tick) >= NET_BOOT_TIMEOUT) {
 800489a:	f000 f911 	bl	8004ac0 <_GetTickMS>
 800489e:	4602      	mov	r2, r0
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	f641 3257 	movw	r2, #6999	; 0x1b57
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d808      	bhi.n	80048be <Simcom_Ready+0x4a>
            break;
        }
        _DelayMS(1);
 80048ac:	2001      	movs	r0, #1
 80048ae:	f000 f8fc 	bl	8004aaa <_DelayMS>
    while (SIM.state == SIM_STATE_DOWN) {
 80048b2:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <Simcom_Ready+0x6c>)
 80048b4:	f993 3000 	ldrsb.w	r3, [r3]
 80048b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048bc:	d0e1      	beq.n	8004882 <Simcom_Ready+0xe>
    }

    // check
    return Simcom_Command(SIMCOM_CMD_BOOT, SIMCOM_RSP_READY, 1000, 0);
 80048be:	2300      	movs	r3, #0
 80048c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80048c4:	4904      	ldr	r1, [pc, #16]	; (80048d8 <Simcom_Ready+0x64>)
 80048c6:	4807      	ldr	r0, [pc, #28]	; (80048e4 <Simcom_Ready+0x70>)
 80048c8:	f7ff ff38 	bl	800473c <Simcom_Command>
 80048cc:	4603      	mov	r3, r0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3708      	adds	r7, #8
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	0800acc0 	.word	0x0800acc0
 80048dc:	0800ac90 	.word	0x0800ac90
 80048e0:	20000008 	.word	0x20000008
 80048e4:	0800ac94 	.word	0x0800ac94

080048e8 <Simcom_Power>:

static SIMCOM_RESULT Simcom_Power(void) {
 80048e8:	b580      	push	{r7, lr}
 80048ea:	af00      	add	r7, sp, #0
    LOG_StrLn("Simcom:Powered");
 80048ec:	4814      	ldr	r0, [pc, #80]	; (8004940 <Simcom_Power+0x58>)
 80048ee:	f7ff f98b 	bl	8003c08 <LOG_StrLn>
    // reset buffer
    SIMCOM_Reset_Buffer();
 80048f2:	f7fd fd2d 	bl	8002350 <SIMCOM_Reset_Buffer>

    // power control
    HAL_GPIO_WritePin(INT_NET_PWR_GPIO_Port, INT_NET_PWR_Pin, 0);
 80048f6:	2200      	movs	r2, #0
 80048f8:	2101      	movs	r1, #1
 80048fa:	4812      	ldr	r0, [pc, #72]	; (8004944 <Simcom_Power+0x5c>)
 80048fc:	f002 fbde 	bl	80070bc <HAL_GPIO_WritePin>
    _DelayMS(100);
 8004900:	2064      	movs	r0, #100	; 0x64
 8004902:	f000 f8d2 	bl	8004aaa <_DelayMS>
    HAL_GPIO_WritePin(INT_NET_PWR_GPIO_Port, INT_NET_PWR_Pin, 1);
 8004906:	2201      	movs	r2, #1
 8004908:	2101      	movs	r1, #1
 800490a:	480e      	ldr	r0, [pc, #56]	; (8004944 <Simcom_Power+0x5c>)
 800490c:	f002 fbd6 	bl	80070bc <HAL_GPIO_WritePin>
    _DelayMS(1000);
 8004910:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004914:	f000 f8c9 	bl	8004aaa <_DelayMS>

    // simcom reset pin
    HAL_GPIO_WritePin(INT_NET_RST_GPIO_Port, INT_NET_RST_Pin, 1);
 8004918:	2201      	movs	r2, #1
 800491a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800491e:	480a      	ldr	r0, [pc, #40]	; (8004948 <Simcom_Power+0x60>)
 8004920:	f002 fbcc 	bl	80070bc <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8004924:	2005      	movs	r0, #5
 8004926:	f000 fe7b 	bl	8005620 <HAL_Delay>
    HAL_GPIO_WritePin(INT_NET_RST_GPIO_Port, INT_NET_RST_Pin, 0);
 800492a:	2200      	movs	r2, #0
 800492c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004930:	4805      	ldr	r0, [pc, #20]	; (8004948 <Simcom_Power+0x60>)
 8004932:	f002 fbc3 	bl	80070bc <HAL_GPIO_WritePin>

    // wait response
    return Simcom_Ready();
 8004936:	f7ff ff9d 	bl	8004874 <Simcom_Ready>
 800493a:	4603      	mov	r3, r0
}
 800493c:	4618      	mov	r0, r3
 800493e:	bd80      	pop	{r7, pc}
 8004940:	0800acc4 	.word	0x0800acc4
 8004944:	40020800 	.word	0x40020800
 8004948:	40020400 	.word	0x40020400

0800494c <Simcom_Sleep>:

static void Simcom_Sleep(uint8_t state) {
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	4603      	mov	r3, r0
 8004954:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(INT_NET_DTR_GPIO_Port, INT_NET_DTR_Pin, state);
 8004956:	79fb      	ldrb	r3, [r7, #7]
 8004958:	461a      	mov	r2, r3
 800495a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800495e:	4805      	ldr	r0, [pc, #20]	; (8004974 <Simcom_Sleep+0x28>)
 8004960:	f002 fbac 	bl	80070bc <HAL_GPIO_WritePin>
    _DelayMS(50);
 8004964:	2032      	movs	r0, #50	; 0x32
 8004966:	f000 f8a0 	bl	8004aaa <_DelayMS>
}
 800496a:	bf00      	nop
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	40020400 	.word	0x40020400

08004978 <Simcom_Execute>:

static SIMCOM_RESULT Simcom_Execute(char *data, uint16_t size, uint32_t ms, char *res) {
 8004978:	b580      	push	{r7, lr}
 800497a:	b088      	sub	sp, #32
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	607a      	str	r2, [r7, #4]
 8004982:	603b      	str	r3, [r7, #0]
 8004984:	460b      	mov	r3, r1
 8004986:	817b      	strh	r3, [r7, #10]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 8004988:	2300      	movs	r3, #0
 800498a:	77fb      	strb	r3, [r7, #31]
    uint32_t tick, timeout_tick = 0;
 800498c:	2300      	movs	r3, #0
 800498e:	61bb      	str	r3, [r7, #24]

    Simcom_Lock();
 8004990:	f7ff fc66 	bl	8004260 <Simcom_Lock>
    // wake-up the SIMCOM
    Simcom_Sleep(0);
 8004994:	2000      	movs	r0, #0
 8004996:	f7ff ffd9 	bl	800494c <Simcom_Sleep>

    // transmit to serial (low-level)
    Simcom_BeforeTransmitHook();
 800499a:	f000 f87f 	bl	8004a9c <Simcom_BeforeTransmitHook>
    SIMCOM_Transmit(data, size);
 800499e:	897b      	ldrh	r3, [r7, #10]
 80049a0:	4619      	mov	r1, r3
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f7fd fce6 	bl	8002374 <SIMCOM_Transmit>

    // convert time to tick
    timeout_tick = (ms + NET_EXTRA_TIME);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80049ae:	61bb      	str	r3, [r7, #24]
    // set timeout guard
    tick = _GetTickMS();
 80049b0:	f000 f886 	bl	8004ac0 <_GetTickMS>
 80049b4:	6178      	str	r0, [r7, #20]

    // wait response from SIMCOM
    while (1) {
        if (Simcom_Response(res)
 80049b6:	6838      	ldr	r0, [r7, #0]
 80049b8:	f7ff fc60 	bl	800427c <Simcom_Response>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d113      	bne.n	80049ea <Simcom_Execute+0x72>
                || Simcom_Response(SIMCOM_RSP_ERROR)
 80049c2:	482f      	ldr	r0, [pc, #188]	; (8004a80 <Simcom_Execute+0x108>)
 80049c4:	f7ff fc5a 	bl	800427c <Simcom_Response>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10d      	bne.n	80049ea <Simcom_Execute+0x72>
                || Simcom_Response(SIMCOM_RSP_READY)
 80049ce:	482d      	ldr	r0, [pc, #180]	; (8004a84 <Simcom_Execute+0x10c>)
 80049d0:	f7ff fc54 	bl	800427c <Simcom_Response>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d107      	bne.n	80049ea <Simcom_Execute+0x72>
                || (_GetTickMS() - tick) >= timeout_tick) {
 80049da:	f000 f871 	bl	8004ac0 <_GetTickMS>
 80049de:	4602      	mov	r2, r0
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d83a      	bhi.n	8004a60 <Simcom_Execute+0xe8>

            // check response
            if (Simcom_Response(res)) {
 80049ea:	6838      	ldr	r0, [r7, #0]
 80049ec:	f7ff fc46 	bl	800427c <Simcom_Response>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d001      	beq.n	80049fa <Simcom_Execute+0x82>
                p = SIM_RESULT_OK;
 80049f6:	2301      	movs	r3, #1
 80049f8:	77fb      	strb	r3, [r7, #31]
            }

            // Handle failure
            if (p != SIM_RESULT_OK) {
 80049fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d032      	beq.n	8004a68 <Simcom_Execute+0xf0>
                if (strlen(SIMCOM_UART_RX) == 0) {
 8004a02:	4b21      	ldr	r3, [pc, #132]	; (8004a88 <Simcom_Execute+0x110>)
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d108      	bne.n	8004a1c <Simcom_Execute+0xa4>
                    // exception for no response
                    p = SIM_RESULT_NO_RESPONSE;
 8004a0a:	23fe      	movs	r3, #254	; 0xfe
 8004a0c:	77fb      	strb	r3, [r7, #31]
                    SIM.state = SIM_STATE_DOWN;
 8004a0e:	4b1f      	ldr	r3, [pc, #124]	; (8004a8c <Simcom_Execute+0x114>)
 8004a10:	22ff      	movs	r2, #255	; 0xff
 8004a12:	701a      	strb	r2, [r3, #0]
                    LOG_StrLn("Simcom:NoResponse");
 8004a14:	481e      	ldr	r0, [pc, #120]	; (8004a90 <Simcom_Execute+0x118>)
 8004a16:	f7ff f8f7 	bl	8003c08 <LOG_StrLn>
                    }
                }
            }

            // exit loop
            break;
 8004a1a:	e025      	b.n	8004a68 <Simcom_Execute+0xf0>
                    if (Simcom_Response(SIMCOM_RSP_READY) && (SIM.state >= SIM_STATE_READY)) {
 8004a1c:	4819      	ldr	r0, [pc, #100]	; (8004a84 <Simcom_Execute+0x10c>)
 8004a1e:	f7ff fc2d 	bl	800427c <Simcom_Response>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00d      	beq.n	8004a44 <Simcom_Execute+0xcc>
 8004a28:	4b18      	ldr	r3, [pc, #96]	; (8004a8c <Simcom_Execute+0x114>)
 8004a2a:	f993 3000 	ldrsb.w	r3, [r3]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	db08      	blt.n	8004a44 <Simcom_Execute+0xcc>
                        p = SIM_RESULT_RESTARTED;
 8004a32:	23fd      	movs	r3, #253	; 0xfd
 8004a34:	77fb      	strb	r3, [r7, #31]
                        SIM.state = SIM_STATE_READY;
 8004a36:	4b15      	ldr	r3, [pc, #84]	; (8004a8c <Simcom_Execute+0x114>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	701a      	strb	r2, [r3, #0]
                        LOG_StrLn("Simcom:Restarted");
 8004a3c:	4815      	ldr	r0, [pc, #84]	; (8004a94 <Simcom_Execute+0x11c>)
 8004a3e:	f7ff f8e3 	bl	8003c08 <LOG_StrLn>
            break;
 8004a42:	e011      	b.n	8004a68 <Simcom_Execute+0xf0>
                    } else if ((_GetTickMS() - tick) >= timeout_tick) {
 8004a44:	f000 f83c 	bl	8004ac0 <_GetTickMS>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d809      	bhi.n	8004a68 <Simcom_Execute+0xf0>
                        p = SIM_RESULT_TIMEOUT;
 8004a54:	23ff      	movs	r3, #255	; 0xff
 8004a56:	77fb      	strb	r3, [r7, #31]
                        LOG_StrLn("Simcom:Timeout");
 8004a58:	480f      	ldr	r0, [pc, #60]	; (8004a98 <Simcom_Execute+0x120>)
 8004a5a:	f7ff f8d5 	bl	8003c08 <LOG_StrLn>
            break;
 8004a5e:	e003      	b.n	8004a68 <Simcom_Execute+0xf0>
        }
        _DelayMS(10);
 8004a60:	200a      	movs	r0, #10
 8004a62:	f000 f822 	bl	8004aaa <_DelayMS>
        if (Simcom_Response(res)
 8004a66:	e7a6      	b.n	80049b6 <Simcom_Execute+0x3e>
            break;
 8004a68:	bf00      	nop
    }

    // sleep the SIMCOM
    Simcom_Sleep(1);
 8004a6a:	2001      	movs	r0, #1
 8004a6c:	f7ff ff6e 	bl	800494c <Simcom_Sleep>
    Simcom_Unlock();
 8004a70:	f7ff fbfd 	bl	800426e <Simcom_Unlock>
    return p;
 8004a74:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3720      	adds	r7, #32
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	0800acd4 	.word	0x0800acd4
 8004a84:	0800acc0 	.word	0x0800acc0
 8004a88:	20000e78 	.word	0x20000e78
 8004a8c:	20000008 	.word	0x20000008
 8004a90:	0800acdc 	.word	0x0800acdc
 8004a94:	0800acf0 	.word	0x0800acf0
 8004a98:	0800ad04 	.word	0x0800ad04

08004a9c <Simcom_BeforeTransmitHook>:

static void Simcom_BeforeTransmitHook(void) {
 8004a9c:	b480      	push	{r7}
 8004a9e:	af00      	add	r7, sp, #0
    // handle things on every request
    //	LOG_StrLn("============ SIMCOM DEBUG ============");
    //	LOG_Buf(SIMCOM_UART_RX, strlen(SIMCOM_UART_RX));
    //	LOG_Enter();
    //	LOG_StrLn("======================================");
}
 8004aa0:	bf00      	nop
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <_DelayMS>:

/* Includes ------------------------------------------------------------------*/
#include "Libs/_utils.h"

/* Public functions implementation --------------------------------------------*/
void _DelayMS(uint32_t ms) {
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b082      	sub	sp, #8
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
#if RTOS_ENABLE
    osDelay(ms);
#else
    HAL_Delay(ms);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 fdb4 	bl	8005620 <HAL_Delay>
#endif
}
 8004ab8:	bf00      	nop
 8004aba:	3708      	adds	r7, #8
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <_GetTickMS>:

uint32_t _GetTickMS(void) {
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
#if RTOS_ENABLE
    return osKernelGetTickCount();
#else
    return HAL_GetTick();
 8004ac4:	f000 fda0 	bl	8005608 <HAL_GetTick>
 8004ac8:	4603      	mov	r3, r0
#endif
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	bd80      	pop	{r7, pc}
	...

08004ad0 <_LedWrite>:

uint8_t _LedRead(void) {
    return HAL_GPIO_ReadPin(SYS_LED_GPIO_Port, SYS_LED_Pin);
}

void _LedWrite(uint8_t state) {
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SYS_LED_GPIO_Port, SYS_LED_Pin, state);
 8004ada:	79fb      	ldrb	r3, [r7, #7]
 8004adc:	461a      	mov	r2, r3
 8004ade:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ae2:	4803      	ldr	r0, [pc, #12]	; (8004af0 <_LedWrite+0x20>)
 8004ae4:	f002 faea 	bl	80070bc <HAL_GPIO_WritePin>
}
 8004ae8:	bf00      	nop
 8004aea:	3708      	adds	r7, #8
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	40020c00 	.word	0x40020c00

08004af4 <_LedToggle>:

void _LedToggle(void) {
 8004af4:	b580      	push	{r7, lr}
 8004af6:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(SYS_LED_GPIO_Port, SYS_LED_Pin);
 8004af8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004afc:	4802      	ldr	r0, [pc, #8]	; (8004b08 <_LedToggle+0x14>)
 8004afe:	f002 faf6 	bl	80070ee <HAL_GPIO_TogglePin>
}
 8004b02:	bf00      	nop
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	40020c00 	.word	0x40020c00

08004b0c <_ByteSwap32>:
    }

    return pos;
}

uint32_t _ByteSwap32(uint32_t x) {
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
    uint32_t y = (x >> 24) & 0xff;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	0e1b      	lsrs	r3, r3, #24
 8004b18:	60fb      	str	r3, [r7, #12]
    y |= ((x >> 16) & 0xff) << 8;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	0c1b      	lsrs	r3, r3, #16
 8004b1e:	021b      	lsls	r3, r3, #8
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	60fb      	str	r3, [r7, #12]
    y |= ((x >> 8) & 0xff) << 16;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	0a1b      	lsrs	r3, r3, #8
 8004b2c:	041b      	lsls	r3, r3, #16
 8004b2e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]
    y |= (x & 0xff) << 24;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	061b      	lsls	r3, r3, #24
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	60fb      	str	r3, [r7, #12]

    return y;
 8004b42:	68fb      	ldr	r3, [r7, #12]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3714      	adds	r7, #20
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8004b54:	f000 fcf2 	bl	800553c <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8004b58:	f000 f83c 	bl	8004bd4 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8004b5c:	f000 f99c 	bl	8004e98 <MX_GPIO_Init>
    MX_DMA_Init();
 8004b60:	f000 f972 	bl	8004e48 <MX_DMA_Init>
    MX_CRC_Init();
 8004b64:	f000 f8f2 	bl	8004d4c <MX_CRC_Init>
    MX_ADC1_Init();
 8004b68:	f000 f89e 	bl	8004ca8 <MX_ADC1_Init>
    MX_I2C2_Init();
 8004b6c:	f000 f902 	bl	8004d74 <MX_I2C2_Init>
    MX_USART1_UART_Init();
 8004b70:	f000 f940 	bl	8004df4 <MX_USART1_UART_Init>
    /* USER CODE BEGIN 2 */
    EEPROM_Init();
 8004b74:	f7ff f8c0 	bl	8003cf8 <EEPROM_Init>
    BAT_DMA_Init();
 8004b78:	f7fc f978 	bl	8000e6c <BAT_DMA_Init>
    Simcom_Init();
 8004b7c:	f7ff fb8e 	bl	800429c <Simcom_Init>
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    IAP_FLAG = 1;
 8004b80:	4b12      	ldr	r3, [pc, #72]	; (8004bcc <main+0x7c>)
 8004b82:	2201      	movs	r2, #1
 8004b84:	601a      	str	r2, [r3, #0]
    while (1) {
        if (IAP_FLAG) {
 8004b86:	4b11      	ldr	r3, [pc, #68]	; (8004bcc <main+0x7c>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d016      	beq.n	8004bbc <main+0x6c>
            if (Simcom_SetState(SIM_STATE_GPRS_ON)) {
 8004b8e:	2003      	movs	r0, #3
 8004b90:	f7ff fb8e 	bl	80042b0 <Simcom_SetState>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00d      	beq.n	8004bb6 <main+0x66>
                // Backup current image to BKP area
                FLASHER_BackupApp();
 8004b9a:	f7fe ff29 	bl	80039f0 <FLASHER_BackupApp>

                // Download new image to APP area
                if (Simcom_FOTA()) {
 8004b9e:	f7ff fd55 	bl	800464c <Simcom_FOTA>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d004      	beq.n	8004bb2 <main+0x62>
                    // New image has valid checksum in APP area
                    EEPROM_FlagIAP(EE_CMD_W, 0);
 8004ba8:	2100      	movs	r1, #0
 8004baa:	2001      	movs	r0, #1
 8004bac:	f7ff f8fe 	bl	8003dac <EEPROM_FlagIAP>
 8004bb0:	e001      	b.n	8004bb6 <main+0x66>
                } else {
                    // DFU failed, restore old image to APP area
                    FLASHER_RestoreApp();
 8004bb2:	f7fe ff45 	bl	8003a40 <FLASHER_RestoreApp>
                }
            }

            // Reboot
            HAL_NVIC_SystemReset();
 8004bb6:	f001 fa40 	bl	800603a <HAL_NVIC_SystemReset>
 8004bba:	e003      	b.n	8004bc4 <main+0x74>
        } else if (IS_VALID_SP(FLASH_APP_START_ADDR)) {
 8004bbc:	4b04      	ldr	r3, [pc, #16]	; (8004bd0 <main+0x80>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000

        }
        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */
        _LedWrite(1);
 8004bc4:	2001      	movs	r0, #1
 8004bc6:	f7ff ff83 	bl	8004ad0 <_LedWrite>
        if (IAP_FLAG) {
 8004bca:	e7dc      	b.n	8004b86 <main+0x36>
 8004bcc:	20000e68 	.word	0x20000e68
 8004bd0:	08020000 	.word	0x08020000

08004bd4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b094      	sub	sp, #80	; 0x50
 8004bd8:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8004bda:	f107 031c 	add.w	r3, r7, #28
 8004bde:	2234      	movs	r2, #52	; 0x34
 8004be0:	2100      	movs	r1, #0
 8004be2:	4618      	mov	r0, r3
 8004be4:	f005 f8a2 	bl	8009d2c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004be8:	f107 0308 	add.w	r3, r7, #8
 8004bec:	2200      	movs	r2, #0
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	605a      	str	r2, [r3, #4]
 8004bf2:	609a      	str	r2, [r3, #8]
 8004bf4:	60da      	str	r2, [r3, #12]
 8004bf6:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	607b      	str	r3, [r7, #4]
 8004bfc:	4b28      	ldr	r3, [pc, #160]	; (8004ca0 <SystemClock_Config+0xcc>)
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c00:	4a27      	ldr	r2, [pc, #156]	; (8004ca0 <SystemClock_Config+0xcc>)
 8004c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c06:	6413      	str	r3, [r2, #64]	; 0x40
 8004c08:	4b25      	ldr	r3, [pc, #148]	; (8004ca0 <SystemClock_Config+0xcc>)
 8004c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c10:	607b      	str	r3, [r7, #4]
 8004c12:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c14:	2300      	movs	r3, #0
 8004c16:	603b      	str	r3, [r7, #0]
 8004c18:	4b22      	ldr	r3, [pc, #136]	; (8004ca4 <SystemClock_Config+0xd0>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a21      	ldr	r2, [pc, #132]	; (8004ca4 <SystemClock_Config+0xd0>)
 8004c1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c22:	6013      	str	r3, [r2, #0]
 8004c24:	4b1f      	ldr	r3, [pc, #124]	; (8004ca4 <SystemClock_Config+0xd0>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004c2c:	603b      	str	r3, [r7, #0]
 8004c2e:	683b      	ldr	r3, [r7, #0]
    /** Initializes the CPU, AHB and APB busses clocks
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004c30:	2301      	movs	r3, #1
 8004c32:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004c34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c38:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004c3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004c42:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLM = 4;
 8004c44:	2304      	movs	r3, #4
 8004c46:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLN = 100;
 8004c48:	2364      	movs	r3, #100	; 0x64
 8004c4a:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLQ = 2;
 8004c50:	2302      	movs	r3, #2
 8004c52:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLR = 2;
 8004c54:	2302      	movs	r3, #2
 8004c56:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004c58:	f107 031c 	add.w	r3, r7, #28
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f003 fdab 	bl	80087b8 <HAL_RCC_OscConfig>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d001      	beq.n	8004c6c <SystemClock_Config+0x98>
            {
        Error_Handler();
 8004c68:	f000 fa04 	bl	8005074 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB busses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004c6c:	230f      	movs	r3, #15
 8004c6e:	60bb      	str	r3, [r7, #8]
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c70:	2302      	movs	r3, #2
 8004c72:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c74:	2300      	movs	r3, #0
 8004c76:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004c78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c7c:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004c82:	f107 0308 	add.w	r3, r7, #8
 8004c86:	2103      	movs	r1, #3
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f003 fba3 	bl	80083d4 <HAL_RCC_ClockConfig>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d001      	beq.n	8004c98 <SystemClock_Config+0xc4>
            {
        Error_Handler();
 8004c94:	f000 f9ee 	bl	8005074 <Error_Handler>
    }
}
 8004c98:	bf00      	nop
 8004c9a:	3750      	adds	r7, #80	; 0x50
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	40023800 	.word	0x40023800
 8004ca4:	40007000 	.word	0x40007000

08004ca8 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_ChannelConfTypeDef sConfig = { 0 };
 8004cae:	463b      	mov	r3, r7
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	605a      	str	r2, [r3, #4]
 8004cb6:	609a      	str	r2, [r3, #8]
 8004cb8:	60da      	str	r2, [r3, #12]
    /* USER CODE BEGIN ADC1_Init 1 */

    /* USER CODE END ADC1_Init 1 */
    /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
     */
    hadc1.Instance = ADC1;
 8004cba:	4b21      	ldr	r3, [pc, #132]	; (8004d40 <MX_ADC1_Init+0x98>)
 8004cbc:	4a21      	ldr	r2, [pc, #132]	; (8004d44 <MX_ADC1_Init+0x9c>)
 8004cbe:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004cc0:	4b1f      	ldr	r3, [pc, #124]	; (8004d40 <MX_ADC1_Init+0x98>)
 8004cc2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004cc6:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004cc8:	4b1d      	ldr	r3, [pc, #116]	; (8004d40 <MX_ADC1_Init+0x98>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = DISABLE;
 8004cce:	4b1c      	ldr	r3, [pc, #112]	; (8004d40 <MX_ADC1_Init+0x98>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = ENABLE;
 8004cd4:	4b1a      	ldr	r3, [pc, #104]	; (8004d40 <MX_ADC1_Init+0x98>)
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004cda:	4b19      	ldr	r3, [pc, #100]	; (8004d40 <MX_ADC1_Init+0x98>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004ce2:	4b17      	ldr	r3, [pc, #92]	; (8004d40 <MX_ADC1_Init+0x98>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004ce8:	4b15      	ldr	r3, [pc, #84]	; (8004d40 <MX_ADC1_Init+0x98>)
 8004cea:	4a17      	ldr	r2, [pc, #92]	; (8004d48 <MX_ADC1_Init+0xa0>)
 8004cec:	629a      	str	r2, [r3, #40]	; 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004cee:	4b14      	ldr	r3, [pc, #80]	; (8004d40 <MX_ADC1_Init+0x98>)
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 8004cf4:	4b12      	ldr	r3, [pc, #72]	; (8004d40 <MX_ADC1_Init+0x98>)
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = ENABLE;
 8004cfa:	4b11      	ldr	r3, [pc, #68]	; (8004d40 <MX_ADC1_Init+0x98>)
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004d02:	4b0f      	ldr	r3, [pc, #60]	; (8004d40 <MX_ADC1_Init+0x98>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	615a      	str	r2, [r3, #20]
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004d08:	480d      	ldr	r0, [pc, #52]	; (8004d40 <MX_ADC1_Init+0x98>)
 8004d0a:	f000 fcab 	bl	8005664 <HAL_ADC_Init>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d001      	beq.n	8004d18 <MX_ADC1_Init+0x70>
            {
        Error_Handler();
 8004d14:	f000 f9ae 	bl	8005074 <Error_Handler>
    }
    /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
     */
    sConfig.Channel = ADC_CHANNEL_9;
 8004d18:	2309      	movs	r3, #9
 8004d1a:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8004d20:	2301      	movs	r3, #1
 8004d22:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004d24:	463b      	mov	r3, r7
 8004d26:	4619      	mov	r1, r3
 8004d28:	4805      	ldr	r0, [pc, #20]	; (8004d40 <MX_ADC1_Init+0x98>)
 8004d2a:	f000 fdbd 	bl	80058a8 <HAL_ADC_ConfigChannel>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d001      	beq.n	8004d38 <MX_ADC1_Init+0x90>
            {
        Error_Handler();
 8004d34:	f000 f99e 	bl	8005074 <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */

}
 8004d38:	bf00      	nop
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	200014d4 	.word	0x200014d4
 8004d44:	40012000 	.word	0x40012000
 8004d48:	0f000001 	.word	0x0f000001

08004d4c <MX_CRC_Init>:
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	af00      	add	r7, sp, #0
    /* USER CODE END CRC_Init 0 */

    /* USER CODE BEGIN CRC_Init 1 */

    /* USER CODE END CRC_Init 1 */
    hcrc.Instance = CRC;
 8004d50:	4b06      	ldr	r3, [pc, #24]	; (8004d6c <MX_CRC_Init+0x20>)
 8004d52:	4a07      	ldr	r2, [pc, #28]	; (8004d70 <MX_CRC_Init+0x24>)
 8004d54:	601a      	str	r2, [r3, #0]
    if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8004d56:	4805      	ldr	r0, [pc, #20]	; (8004d6c <MX_CRC_Init+0x20>)
 8004d58:	f001 f97f 	bl	800605a <HAL_CRC_Init>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d001      	beq.n	8004d66 <MX_CRC_Init+0x1a>
            {
        Error_Handler();
 8004d62:	f000 f987 	bl	8005074 <Error_Handler>
    }
    /* USER CODE BEGIN CRC_Init 2 */

    /* USER CODE END CRC_Init 2 */

}
 8004d66:	bf00      	nop
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	20001478 	.word	0x20001478
 8004d70:	40023000 	.word	0x40023000

08004d74 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	af00      	add	r7, sp, #0
    /* USER CODE END I2C2_Init 0 */

    /* USER CODE BEGIN I2C2_Init 1 */

    /* USER CODE END I2C2_Init 1 */
    hi2c2.Instance = I2C2;
 8004d78:	4b1b      	ldr	r3, [pc, #108]	; (8004de8 <MX_I2C2_Init+0x74>)
 8004d7a:	4a1c      	ldr	r2, [pc, #112]	; (8004dec <MX_I2C2_Init+0x78>)
 8004d7c:	601a      	str	r2, [r3, #0]
    hi2c2.Init.ClockSpeed = 100000;
 8004d7e:	4b1a      	ldr	r3, [pc, #104]	; (8004de8 <MX_I2C2_Init+0x74>)
 8004d80:	4a1b      	ldr	r2, [pc, #108]	; (8004df0 <MX_I2C2_Init+0x7c>)
 8004d82:	605a      	str	r2, [r3, #4]
    hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004d84:	4b18      	ldr	r3, [pc, #96]	; (8004de8 <MX_I2C2_Init+0x74>)
 8004d86:	2200      	movs	r2, #0
 8004d88:	609a      	str	r2, [r3, #8]
    hi2c2.Init.OwnAddress1 = 0;
 8004d8a:	4b17      	ldr	r3, [pc, #92]	; (8004de8 <MX_I2C2_Init+0x74>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	60da      	str	r2, [r3, #12]
    hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004d90:	4b15      	ldr	r3, [pc, #84]	; (8004de8 <MX_I2C2_Init+0x74>)
 8004d92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004d96:	611a      	str	r2, [r3, #16]
    hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004d98:	4b13      	ldr	r3, [pc, #76]	; (8004de8 <MX_I2C2_Init+0x74>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	615a      	str	r2, [r3, #20]
    hi2c2.Init.OwnAddress2 = 0;
 8004d9e:	4b12      	ldr	r3, [pc, #72]	; (8004de8 <MX_I2C2_Init+0x74>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	619a      	str	r2, [r3, #24]
    hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004da4:	4b10      	ldr	r3, [pc, #64]	; (8004de8 <MX_I2C2_Init+0x74>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	61da      	str	r2, [r3, #28]
    hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004daa:	4b0f      	ldr	r3, [pc, #60]	; (8004de8 <MX_I2C2_Init+0x74>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004db0:	480d      	ldr	r0, [pc, #52]	; (8004de8 <MX_I2C2_Init+0x74>)
 8004db2:	f002 f9b7 	bl	8007124 <HAL_I2C_Init>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <MX_I2C2_Init+0x4c>
            {
        Error_Handler();
 8004dbc:	f000 f95a 	bl	8005074 <Error_Handler>
    }
    /** Configure Analogue filter
     */
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004dc0:	2100      	movs	r1, #0
 8004dc2:	4809      	ldr	r0, [pc, #36]	; (8004de8 <MX_I2C2_Init+0x74>)
 8004dc4:	f003 fa8b 	bl	80082de <HAL_I2CEx_ConfigAnalogFilter>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <MX_I2C2_Init+0x5e>
            {
        Error_Handler();
 8004dce:	f000 f951 	bl	8005074 <Error_Handler>
    }
    /** Configure Digital filter
     */
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	4804      	ldr	r0, [pc, #16]	; (8004de8 <MX_I2C2_Init+0x74>)
 8004dd6:	f003 fabe 	bl	8008356 <HAL_I2CEx_ConfigDigitalFilter>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <MX_I2C2_Init+0x70>
            {
        Error_Handler();
 8004de0:	f000 f948 	bl	8005074 <Error_Handler>
    }
    /* USER CODE BEGIN I2C2_Init 2 */

    /* USER CODE END I2C2_Init 2 */

}
 8004de4:	bf00      	nop
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	20001480 	.word	0x20001480
 8004dec:	40005800 	.word	0x40005800
 8004df0:	000186a0 	.word	0x000186a0

08004df4 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8004df8:	4b11      	ldr	r3, [pc, #68]	; (8004e40 <MX_USART1_UART_Init+0x4c>)
 8004dfa:	4a12      	ldr	r2, [pc, #72]	; (8004e44 <MX_USART1_UART_Init+0x50>)
 8004dfc:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8004dfe:	4b10      	ldr	r3, [pc, #64]	; (8004e40 <MX_USART1_UART_Init+0x4c>)
 8004e00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004e04:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004e06:	4b0e      	ldr	r3, [pc, #56]	; (8004e40 <MX_USART1_UART_Init+0x4c>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8004e0c:	4b0c      	ldr	r3, [pc, #48]	; (8004e40 <MX_USART1_UART_Init+0x4c>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8004e12:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <MX_USART1_UART_Init+0x4c>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8004e18:	4b09      	ldr	r3, [pc, #36]	; (8004e40 <MX_USART1_UART_Init+0x4c>)
 8004e1a:	220c      	movs	r2, #12
 8004e1c:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e1e:	4b08      	ldr	r3, [pc, #32]	; (8004e40 <MX_USART1_UART_Init+0x4c>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e24:	4b06      	ldr	r3, [pc, #24]	; (8004e40 <MX_USART1_UART_Init+0x4c>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8004e2a:	4805      	ldr	r0, [pc, #20]	; (8004e40 <MX_USART1_UART_Init+0x4c>)
 8004e2c:	f003 ff06 	bl	8008c3c <HAL_UART_Init>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d001      	beq.n	8004e3a <MX_USART1_UART_Init+0x46>
            {
        Error_Handler();
 8004e36:	f000 f91d 	bl	8005074 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */

}
 8004e3a:	bf00      	nop
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	2000157c 	.word	0x2000157c
 8004e44:	40011000 	.word	0x40011000

08004e48 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA2_CLK_ENABLE();
 8004e4e:	2300      	movs	r3, #0
 8004e50:	607b      	str	r3, [r7, #4]
 8004e52:	4b10      	ldr	r3, [pc, #64]	; (8004e94 <MX_DMA_Init+0x4c>)
 8004e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e56:	4a0f      	ldr	r2, [pc, #60]	; (8004e94 <MX_DMA_Init+0x4c>)
 8004e58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e5e:	4b0d      	ldr	r3, [pc, #52]	; (8004e94 <MX_DMA_Init+0x4c>)
 8004e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e66:	607b      	str	r3, [r7, #4]
 8004e68:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init */
    /* DMA2_Stream0_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	2100      	movs	r1, #0
 8004e6e:	2038      	movs	r0, #56	; 0x38
 8004e70:	f001 f8b9 	bl	8005fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004e74:	2038      	movs	r0, #56	; 0x38
 8004e76:	f001 f8d2 	bl	800601e <HAL_NVIC_EnableIRQ>
    /* DMA2_Stream2_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	203a      	movs	r0, #58	; 0x3a
 8004e80:	f001 f8b1 	bl	8005fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004e84:	203a      	movs	r0, #58	; 0x3a
 8004e86:	f001 f8ca 	bl	800601e <HAL_NVIC_EnableIRQ>

}
 8004e8a:	bf00      	nop
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	40023800 	.word	0x40023800

08004e98 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b08c      	sub	sp, #48	; 0x30
 8004e9c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004e9e:	f107 031c 	add.w	r3, r7, #28
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]
 8004ea6:	605a      	str	r2, [r3, #4]
 8004ea8:	609a      	str	r2, [r3, #8]
 8004eaa:	60da      	str	r2, [r3, #12]
 8004eac:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004eae:	2300      	movs	r3, #0
 8004eb0:	61bb      	str	r3, [r7, #24]
 8004eb2:	4b6a      	ldr	r3, [pc, #424]	; (800505c <MX_GPIO_Init+0x1c4>)
 8004eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb6:	4a69      	ldr	r2, [pc, #420]	; (800505c <MX_GPIO_Init+0x1c4>)
 8004eb8:	f043 0310 	orr.w	r3, r3, #16
 8004ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8004ebe:	4b67      	ldr	r3, [pc, #412]	; (800505c <MX_GPIO_Init+0x1c4>)
 8004ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec2:	f003 0310 	and.w	r3, r3, #16
 8004ec6:	61bb      	str	r3, [r7, #24]
 8004ec8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004eca:	2300      	movs	r3, #0
 8004ecc:	617b      	str	r3, [r7, #20]
 8004ece:	4b63      	ldr	r3, [pc, #396]	; (800505c <MX_GPIO_Init+0x1c4>)
 8004ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed2:	4a62      	ldr	r2, [pc, #392]	; (800505c <MX_GPIO_Init+0x1c4>)
 8004ed4:	f043 0304 	orr.w	r3, r3, #4
 8004ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8004eda:	4b60      	ldr	r3, [pc, #384]	; (800505c <MX_GPIO_Init+0x1c4>)
 8004edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ede:	f003 0304 	and.w	r3, r3, #4
 8004ee2:	617b      	str	r3, [r7, #20]
 8004ee4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	613b      	str	r3, [r7, #16]
 8004eea:	4b5c      	ldr	r3, [pc, #368]	; (800505c <MX_GPIO_Init+0x1c4>)
 8004eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eee:	4a5b      	ldr	r2, [pc, #364]	; (800505c <MX_GPIO_Init+0x1c4>)
 8004ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ef6:	4b59      	ldr	r3, [pc, #356]	; (800505c <MX_GPIO_Init+0x1c4>)
 8004ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efe:	613b      	str	r3, [r7, #16]
 8004f00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f02:	2300      	movs	r3, #0
 8004f04:	60fb      	str	r3, [r7, #12]
 8004f06:	4b55      	ldr	r3, [pc, #340]	; (800505c <MX_GPIO_Init+0x1c4>)
 8004f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0a:	4a54      	ldr	r2, [pc, #336]	; (800505c <MX_GPIO_Init+0x1c4>)
 8004f0c:	f043 0301 	orr.w	r3, r3, #1
 8004f10:	6313      	str	r3, [r2, #48]	; 0x30
 8004f12:	4b52      	ldr	r3, [pc, #328]	; (800505c <MX_GPIO_Init+0x1c4>)
 8004f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f1e:	2300      	movs	r3, #0
 8004f20:	60bb      	str	r3, [r7, #8]
 8004f22:	4b4e      	ldr	r3, [pc, #312]	; (800505c <MX_GPIO_Init+0x1c4>)
 8004f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f26:	4a4d      	ldr	r2, [pc, #308]	; (800505c <MX_GPIO_Init+0x1c4>)
 8004f28:	f043 0302 	orr.w	r3, r3, #2
 8004f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f2e:	4b4b      	ldr	r3, [pc, #300]	; (800505c <MX_GPIO_Init+0x1c4>)
 8004f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	60bb      	str	r3, [r7, #8]
 8004f38:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	607b      	str	r3, [r7, #4]
 8004f3e:	4b47      	ldr	r3, [pc, #284]	; (800505c <MX_GPIO_Init+0x1c4>)
 8004f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f42:	4a46      	ldr	r2, [pc, #280]	; (800505c <MX_GPIO_Init+0x1c4>)
 8004f44:	f043 0308 	orr.w	r3, r3, #8
 8004f48:	6313      	str	r3, [r2, #48]	; 0x30
 8004f4a:	4b44      	ldr	r3, [pc, #272]	; (800505c <MX_GPIO_Init+0x1c4>)
 8004f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4e:	f003 0308 	and.w	r3, r3, #8
 8004f52:	607b      	str	r3, [r7, #4]
 8004f54:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(INT_NET_PWR_GPIO_Port, INT_NET_PWR_Pin, GPIO_PIN_RESET);
 8004f56:	2200      	movs	r2, #0
 8004f58:	2101      	movs	r1, #1
 8004f5a:	4841      	ldr	r0, [pc, #260]	; (8005060 <MX_GPIO_Init+0x1c8>)
 8004f5c:	f002 f8ae 	bl	80070bc <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, INT_NET_RST_Pin | INT_NET_DTR_Pin, GPIO_PIN_RESET);
 8004f60:	2200      	movs	r2, #0
 8004f62:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8004f66:	483f      	ldr	r0, [pc, #252]	; (8005064 <MX_GPIO_Init+0x1cc>)
 8004f68:	f002 f8a8 	bl	80070bc <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(SYS_LED_GPIO_Port, SYS_LED_Pin, GPIO_PIN_RESET);
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f72:	483d      	ldr	r0, [pc, #244]	; (8005068 <MX_GPIO_Init+0x1d0>)
 8004f74:	f002 f8a2 	bl	80070bc <HAL_GPIO_WritePin>

    /*Configure GPIO pins : PE2 PE3 PE4 PE5
     PE6 PE7 PE8 PE9
     PE10 PE11 PE12 PE13
     PE14 PE15 PE0 PE1 */
    GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5
 8004f78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004f7c:	61fb      	str	r3, [r7, #28]
            | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9
            | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13
            | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_0 | GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f82:	2300      	movs	r3, #0
 8004f84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004f86:	f107 031c 	add.w	r3, r7, #28
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	4837      	ldr	r0, [pc, #220]	; (800506c <MX_GPIO_Init+0x1d4>)
 8004f8e:	f001 ff03 	bl	8006d98 <HAL_GPIO_Init>

    /*Configure GPIO pins : PC13 PC14 PC15 PC1
     PC2 PC3 PC4 PC5
     PC6 PC7 PC8 PC9
     PC10 PC11 PC12 */
    GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_1
 8004f92:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004f96:	61fb      	str	r3, [r7, #28]
            | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5
            | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9
            | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fa0:	f107 031c 	add.w	r3, r7, #28
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	482e      	ldr	r0, [pc, #184]	; (8005060 <MX_GPIO_Init+0x1c8>)
 8004fa8:	f001 fef6 	bl	8006d98 <HAL_GPIO_Init>

    /*Configure GPIO pin : INT_NET_PWR_Pin */
    GPIO_InitStruct.Pin = INT_NET_PWR_Pin;
 8004fac:	2301      	movs	r3, #1
 8004fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(INT_NET_PWR_GPIO_Port, &GPIO_InitStruct);
 8004fbc:	f107 031c 	add.w	r3, r7, #28
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	4827      	ldr	r0, [pc, #156]	; (8005060 <MX_GPIO_Init+0x1c8>)
 8004fc4:	f001 fee8 	bl	8006d98 <HAL_GPIO_Init>

    /*Configure GPIO pins : PA0 PA1 PA2 PA3
     PA4 PA5 PA6 PA7
     PA8 PA11 PA12 PA15 */
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3
 8004fc8:	f649 13ff 	movw	r3, #39423	; 0x99ff
 8004fcc:	61fb      	str	r3, [r7, #28]
            | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7
            | GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fd6:	f107 031c 	add.w	r3, r7, #28
 8004fda:	4619      	mov	r1, r3
 8004fdc:	4824      	ldr	r0, [pc, #144]	; (8005070 <MX_GPIO_Init+0x1d8>)
 8004fde:	f001 fedb 	bl	8006d98 <HAL_GPIO_Init>

    /*Configure GPIO pins : PB0 PB2 PB12 PB13
     PB4 PB5 PB6 PB7
     PB8 */
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_12 | GPIO_PIN_13
 8004fe2:	f243 13f5 	movw	r3, #12789	; 0x31f5
 8004fe6:	61fb      	str	r3, [r7, #28]
            | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7
            | GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fec:	2300      	movs	r3, #0
 8004fee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ff0:	f107 031c 	add.w	r3, r7, #28
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	481b      	ldr	r0, [pc, #108]	; (8005064 <MX_GPIO_Init+0x1cc>)
 8004ff8:	f001 fece 	bl	8006d98 <HAL_GPIO_Init>

    /*Configure GPIO pins : INT_NET_RST_Pin INT_NET_DTR_Pin */
    GPIO_InitStruct.Pin = INT_NET_RST_Pin | INT_NET_DTR_Pin;
 8004ffc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005002:	2301      	movs	r3, #1
 8005004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005006:	2302      	movs	r3, #2
 8005008:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800500a:	2300      	movs	r3, #0
 800500c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800500e:	f107 031c 	add.w	r3, r7, #28
 8005012:	4619      	mov	r1, r3
 8005014:	4813      	ldr	r0, [pc, #76]	; (8005064 <MX_GPIO_Init+0x1cc>)
 8005016:	f001 febf 	bl	8006d98 <HAL_GPIO_Init>

    /*Configure GPIO pins : PD8 PD9 PD10 PD11
     PD12 PD14 PD15 PD0
     PD1 PD2 PD3 PD4
     PD5 PD6 PD7 */
    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11
 800501a:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 800501e:	61fb      	str	r3, [r7, #28]
            | GPIO_PIN_12 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_0
            | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4
            | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005020:	2303      	movs	r3, #3
 8005022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005024:	2300      	movs	r3, #0
 8005026:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005028:	f107 031c 	add.w	r3, r7, #28
 800502c:	4619      	mov	r1, r3
 800502e:	480e      	ldr	r0, [pc, #56]	; (8005068 <MX_GPIO_Init+0x1d0>)
 8005030:	f001 feb2 	bl	8006d98 <HAL_GPIO_Init>

    /*Configure GPIO pin : SYS_LED_Pin */
    GPIO_InitStruct.Pin = SYS_LED_Pin;
 8005034:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800503a:	2301      	movs	r3, #1
 800503c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800503e:	2302      	movs	r3, #2
 8005040:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005042:	2300      	movs	r3, #0
 8005044:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(SYS_LED_GPIO_Port, &GPIO_InitStruct);
 8005046:	f107 031c 	add.w	r3, r7, #28
 800504a:	4619      	mov	r1, r3
 800504c:	4806      	ldr	r0, [pc, #24]	; (8005068 <MX_GPIO_Init+0x1d0>)
 800504e:	f001 fea3 	bl	8006d98 <HAL_GPIO_Init>

}
 8005052:	bf00      	nop
 8005054:	3730      	adds	r7, #48	; 0x30
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	40023800 	.word	0x40023800
 8005060:	40020800 	.word	0x40020800
 8005064:	40020400 	.word	0x40020400
 8005068:	40020c00 	.word	0x40020c00
 800506c:	40021000 	.word	0x40021000
 8005070:	40020000 	.word	0x40020000

08005074 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8005074:	b480      	push	{r7}
 8005076:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    /* USER CODE END Error_Handler_Debug */
}
 8005078:	bf00      	nop
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
	...

08005084 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800508a:	2300      	movs	r3, #0
 800508c:	607b      	str	r3, [r7, #4]
 800508e:	4b10      	ldr	r3, [pc, #64]	; (80050d0 <HAL_MspInit+0x4c>)
 8005090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005092:	4a0f      	ldr	r2, [pc, #60]	; (80050d0 <HAL_MspInit+0x4c>)
 8005094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005098:	6453      	str	r3, [r2, #68]	; 0x44
 800509a:	4b0d      	ldr	r3, [pc, #52]	; (80050d0 <HAL_MspInit+0x4c>)
 800509c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050a2:	607b      	str	r3, [r7, #4]
 80050a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80050a6:	2300      	movs	r3, #0
 80050a8:	603b      	str	r3, [r7, #0]
 80050aa:	4b09      	ldr	r3, [pc, #36]	; (80050d0 <HAL_MspInit+0x4c>)
 80050ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ae:	4a08      	ldr	r2, [pc, #32]	; (80050d0 <HAL_MspInit+0x4c>)
 80050b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050b4:	6413      	str	r3, [r2, #64]	; 0x40
 80050b6:	4b06      	ldr	r3, [pc, #24]	; (80050d0 <HAL_MspInit+0x4c>)
 80050b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050be:	603b      	str	r3, [r7, #0]
 80050c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80050c2:	bf00      	nop
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	40023800 	.word	0x40023800

080050d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b08a      	sub	sp, #40	; 0x28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050dc:	f107 0314 	add.w	r3, r7, #20
 80050e0:	2200      	movs	r2, #0
 80050e2:	601a      	str	r2, [r3, #0]
 80050e4:	605a      	str	r2, [r3, #4]
 80050e6:	609a      	str	r2, [r3, #8]
 80050e8:	60da      	str	r2, [r3, #12]
 80050ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a2f      	ldr	r2, [pc, #188]	; (80051b0 <HAL_ADC_MspInit+0xdc>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d158      	bne.n	80051a8 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80050f6:	2300      	movs	r3, #0
 80050f8:	613b      	str	r3, [r7, #16]
 80050fa:	4b2e      	ldr	r3, [pc, #184]	; (80051b4 <HAL_ADC_MspInit+0xe0>)
 80050fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050fe:	4a2d      	ldr	r2, [pc, #180]	; (80051b4 <HAL_ADC_MspInit+0xe0>)
 8005100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005104:	6453      	str	r3, [r2, #68]	; 0x44
 8005106:	4b2b      	ldr	r3, [pc, #172]	; (80051b4 <HAL_ADC_MspInit+0xe0>)
 8005108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800510a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800510e:	613b      	str	r3, [r7, #16]
 8005110:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005112:	2300      	movs	r3, #0
 8005114:	60fb      	str	r3, [r7, #12]
 8005116:	4b27      	ldr	r3, [pc, #156]	; (80051b4 <HAL_ADC_MspInit+0xe0>)
 8005118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511a:	4a26      	ldr	r2, [pc, #152]	; (80051b4 <HAL_ADC_MspInit+0xe0>)
 800511c:	f043 0302 	orr.w	r3, r3, #2
 8005120:	6313      	str	r3, [r2, #48]	; 0x30
 8005122:	4b24      	ldr	r3, [pc, #144]	; (80051b4 <HAL_ADC_MspInit+0xe0>)
 8005124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	60fb      	str	r3, [r7, #12]
 800512c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = INT_ADC_VBAT_Pin;
 800512e:	2302      	movs	r3, #2
 8005130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005132:	2303      	movs	r3, #3
 8005134:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005136:	2300      	movs	r3, #0
 8005138:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(INT_ADC_VBAT_GPIO_Port, &GPIO_InitStruct);
 800513a:	f107 0314 	add.w	r3, r7, #20
 800513e:	4619      	mov	r1, r3
 8005140:	481d      	ldr	r0, [pc, #116]	; (80051b8 <HAL_ADC_MspInit+0xe4>)
 8005142:	f001 fe29 	bl	8006d98 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8005146:	4b1d      	ldr	r3, [pc, #116]	; (80051bc <HAL_ADC_MspInit+0xe8>)
 8005148:	4a1d      	ldr	r2, [pc, #116]	; (80051c0 <HAL_ADC_MspInit+0xec>)
 800514a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800514c:	4b1b      	ldr	r3, [pc, #108]	; (80051bc <HAL_ADC_MspInit+0xe8>)
 800514e:	2200      	movs	r2, #0
 8005150:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005152:	4b1a      	ldr	r3, [pc, #104]	; (80051bc <HAL_ADC_MspInit+0xe8>)
 8005154:	2200      	movs	r2, #0
 8005156:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005158:	4b18      	ldr	r3, [pc, #96]	; (80051bc <HAL_ADC_MspInit+0xe8>)
 800515a:	2200      	movs	r2, #0
 800515c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800515e:	4b17      	ldr	r3, [pc, #92]	; (80051bc <HAL_ADC_MspInit+0xe8>)
 8005160:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005164:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005166:	4b15      	ldr	r3, [pc, #84]	; (80051bc <HAL_ADC_MspInit+0xe8>)
 8005168:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800516c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800516e:	4b13      	ldr	r3, [pc, #76]	; (80051bc <HAL_ADC_MspInit+0xe8>)
 8005170:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005174:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005176:	4b11      	ldr	r3, [pc, #68]	; (80051bc <HAL_ADC_MspInit+0xe8>)
 8005178:	f44f 7280 	mov.w	r2, #256	; 0x100
 800517c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800517e:	4b0f      	ldr	r3, [pc, #60]	; (80051bc <HAL_ADC_MspInit+0xe8>)
 8005180:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005184:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005186:	4b0d      	ldr	r3, [pc, #52]	; (80051bc <HAL_ADC_MspInit+0xe8>)
 8005188:	2200      	movs	r2, #0
 800518a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800518c:	480b      	ldr	r0, [pc, #44]	; (80051bc <HAL_ADC_MspInit+0xe8>)
 800518e:	f000 ff81 	bl	8006094 <HAL_DMA_Init>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d001      	beq.n	800519c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8005198:	f7ff ff6c 	bl	8005074 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a07      	ldr	r2, [pc, #28]	; (80051bc <HAL_ADC_MspInit+0xe8>)
 80051a0:	639a      	str	r2, [r3, #56]	; 0x38
 80051a2:	4a06      	ldr	r2, [pc, #24]	; (80051bc <HAL_ADC_MspInit+0xe8>)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80051a8:	bf00      	nop
 80051aa:	3728      	adds	r7, #40	; 0x28
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	40012000 	.word	0x40012000
 80051b4:	40023800 	.word	0x40023800
 80051b8:	40020400 	.word	0x40020400
 80051bc:	200015bc 	.word	0x200015bc
 80051c0:	40026410 	.word	0x40026410

080051c4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a0b      	ldr	r2, [pc, #44]	; (8005200 <HAL_CRC_MspInit+0x3c>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d10d      	bne.n	80051f2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80051d6:	2300      	movs	r3, #0
 80051d8:	60fb      	str	r3, [r7, #12]
 80051da:	4b0a      	ldr	r3, [pc, #40]	; (8005204 <HAL_CRC_MspInit+0x40>)
 80051dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051de:	4a09      	ldr	r2, [pc, #36]	; (8005204 <HAL_CRC_MspInit+0x40>)
 80051e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80051e4:	6313      	str	r3, [r2, #48]	; 0x30
 80051e6:	4b07      	ldr	r3, [pc, #28]	; (8005204 <HAL_CRC_MspInit+0x40>)
 80051e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051ee:	60fb      	str	r3, [r7, #12]
 80051f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80051f2:	bf00      	nop
 80051f4:	3714      	adds	r7, #20
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	40023000 	.word	0x40023000
 8005204:	40023800 	.word	0x40023800

08005208 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b08a      	sub	sp, #40	; 0x28
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005210:	f107 0314 	add.w	r3, r7, #20
 8005214:	2200      	movs	r2, #0
 8005216:	601a      	str	r2, [r3, #0]
 8005218:	605a      	str	r2, [r3, #4]
 800521a:	609a      	str	r2, [r3, #8]
 800521c:	60da      	str	r2, [r3, #12]
 800521e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a22      	ldr	r2, [pc, #136]	; (80052b0 <HAL_I2C_MspInit+0xa8>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d13d      	bne.n	80052a6 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800522a:	2300      	movs	r3, #0
 800522c:	613b      	str	r3, [r7, #16]
 800522e:	4b21      	ldr	r3, [pc, #132]	; (80052b4 <HAL_I2C_MspInit+0xac>)
 8005230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005232:	4a20      	ldr	r2, [pc, #128]	; (80052b4 <HAL_I2C_MspInit+0xac>)
 8005234:	f043 0302 	orr.w	r3, r3, #2
 8005238:	6313      	str	r3, [r2, #48]	; 0x30
 800523a:	4b1e      	ldr	r3, [pc, #120]	; (80052b4 <HAL_I2C_MspInit+0xac>)
 800523c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523e:	f003 0302 	and.w	r3, r3, #2
 8005242:	613b      	str	r3, [r7, #16]
 8005244:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INT_EEPROM_SCL_Pin;
 8005246:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800524a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800524c:	2312      	movs	r3, #18
 800524e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005250:	2301      	movs	r3, #1
 8005252:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005254:	2303      	movs	r3, #3
 8005256:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005258:	2304      	movs	r3, #4
 800525a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(INT_EEPROM_SCL_GPIO_Port, &GPIO_InitStruct);
 800525c:	f107 0314 	add.w	r3, r7, #20
 8005260:	4619      	mov	r1, r3
 8005262:	4815      	ldr	r0, [pc, #84]	; (80052b8 <HAL_I2C_MspInit+0xb0>)
 8005264:	f001 fd98 	bl	8006d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = INT_EEPROM_SDA_Pin;
 8005268:	f44f 7300 	mov.w	r3, #512	; 0x200
 800526c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800526e:	2312      	movs	r3, #18
 8005270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005272:	2301      	movs	r3, #1
 8005274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005276:	2303      	movs	r3, #3
 8005278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800527a:	2309      	movs	r3, #9
 800527c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(INT_EEPROM_SDA_GPIO_Port, &GPIO_InitStruct);
 800527e:	f107 0314 	add.w	r3, r7, #20
 8005282:	4619      	mov	r1, r3
 8005284:	480c      	ldr	r0, [pc, #48]	; (80052b8 <HAL_I2C_MspInit+0xb0>)
 8005286:	f001 fd87 	bl	8006d98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800528a:	2300      	movs	r3, #0
 800528c:	60fb      	str	r3, [r7, #12]
 800528e:	4b09      	ldr	r3, [pc, #36]	; (80052b4 <HAL_I2C_MspInit+0xac>)
 8005290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005292:	4a08      	ldr	r2, [pc, #32]	; (80052b4 <HAL_I2C_MspInit+0xac>)
 8005294:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005298:	6413      	str	r3, [r2, #64]	; 0x40
 800529a:	4b06      	ldr	r3, [pc, #24]	; (80052b4 <HAL_I2C_MspInit+0xac>)
 800529c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052a2:	60fb      	str	r3, [r7, #12]
 80052a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80052a6:	bf00      	nop
 80052a8:	3728      	adds	r7, #40	; 0x28
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	40005800 	.word	0x40005800
 80052b4:	40023800 	.word	0x40023800
 80052b8:	40020400 	.word	0x40020400

080052bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b08a      	sub	sp, #40	; 0x28
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052c4:	f107 0314 	add.w	r3, r7, #20
 80052c8:	2200      	movs	r2, #0
 80052ca:	601a      	str	r2, [r3, #0]
 80052cc:	605a      	str	r2, [r3, #4]
 80052ce:	609a      	str	r2, [r3, #8]
 80052d0:	60da      	str	r2, [r3, #12]
 80052d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a35      	ldr	r2, [pc, #212]	; (80053b0 <HAL_UART_MspInit+0xf4>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d164      	bne.n	80053a8 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80052de:	2300      	movs	r3, #0
 80052e0:	613b      	str	r3, [r7, #16]
 80052e2:	4b34      	ldr	r3, [pc, #208]	; (80053b4 <HAL_UART_MspInit+0xf8>)
 80052e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e6:	4a33      	ldr	r2, [pc, #204]	; (80053b4 <HAL_UART_MspInit+0xf8>)
 80052e8:	f043 0310 	orr.w	r3, r3, #16
 80052ec:	6453      	str	r3, [r2, #68]	; 0x44
 80052ee:	4b31      	ldr	r3, [pc, #196]	; (80053b4 <HAL_UART_MspInit+0xf8>)
 80052f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f2:	f003 0310 	and.w	r3, r3, #16
 80052f6:	613b      	str	r3, [r7, #16]
 80052f8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052fa:	2300      	movs	r3, #0
 80052fc:	60fb      	str	r3, [r7, #12]
 80052fe:	4b2d      	ldr	r3, [pc, #180]	; (80053b4 <HAL_UART_MspInit+0xf8>)
 8005300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005302:	4a2c      	ldr	r2, [pc, #176]	; (80053b4 <HAL_UART_MspInit+0xf8>)
 8005304:	f043 0301 	orr.w	r3, r3, #1
 8005308:	6313      	str	r3, [r2, #48]	; 0x30
 800530a:	4b2a      	ldr	r3, [pc, #168]	; (80053b4 <HAL_UART_MspInit+0xf8>)
 800530c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	60fb      	str	r3, [r7, #12]
 8005314:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = INT_NET_TX_Pin|INT_NET_RX_Pin;
 8005316:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800531a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800531c:	2302      	movs	r3, #2
 800531e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005320:	2300      	movs	r3, #0
 8005322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005324:	2303      	movs	r3, #3
 8005326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005328:	2307      	movs	r3, #7
 800532a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800532c:	f107 0314 	add.w	r3, r7, #20
 8005330:	4619      	mov	r1, r3
 8005332:	4821      	ldr	r0, [pc, #132]	; (80053b8 <HAL_UART_MspInit+0xfc>)
 8005334:	f001 fd30 	bl	8006d98 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8005338:	4b20      	ldr	r3, [pc, #128]	; (80053bc <HAL_UART_MspInit+0x100>)
 800533a:	4a21      	ldr	r2, [pc, #132]	; (80053c0 <HAL_UART_MspInit+0x104>)
 800533c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800533e:	4b1f      	ldr	r3, [pc, #124]	; (80053bc <HAL_UART_MspInit+0x100>)
 8005340:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005344:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005346:	4b1d      	ldr	r3, [pc, #116]	; (80053bc <HAL_UART_MspInit+0x100>)
 8005348:	2200      	movs	r2, #0
 800534a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800534c:	4b1b      	ldr	r3, [pc, #108]	; (80053bc <HAL_UART_MspInit+0x100>)
 800534e:	2200      	movs	r2, #0
 8005350:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005352:	4b1a      	ldr	r3, [pc, #104]	; (80053bc <HAL_UART_MspInit+0x100>)
 8005354:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005358:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800535a:	4b18      	ldr	r3, [pc, #96]	; (80053bc <HAL_UART_MspInit+0x100>)
 800535c:	2200      	movs	r2, #0
 800535e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005360:	4b16      	ldr	r3, [pc, #88]	; (80053bc <HAL_UART_MspInit+0x100>)
 8005362:	2200      	movs	r2, #0
 8005364:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8005366:	4b15      	ldr	r3, [pc, #84]	; (80053bc <HAL_UART_MspInit+0x100>)
 8005368:	f44f 7280 	mov.w	r2, #256	; 0x100
 800536c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800536e:	4b13      	ldr	r3, [pc, #76]	; (80053bc <HAL_UART_MspInit+0x100>)
 8005370:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005374:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005376:	4b11      	ldr	r3, [pc, #68]	; (80053bc <HAL_UART_MspInit+0x100>)
 8005378:	2200      	movs	r2, #0
 800537a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800537c:	480f      	ldr	r0, [pc, #60]	; (80053bc <HAL_UART_MspInit+0x100>)
 800537e:	f000 fe89 	bl	8006094 <HAL_DMA_Init>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d001      	beq.n	800538c <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8005388:	f7ff fe74 	bl	8005074 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a0b      	ldr	r2, [pc, #44]	; (80053bc <HAL_UART_MspInit+0x100>)
 8005390:	635a      	str	r2, [r3, #52]	; 0x34
 8005392:	4a0a      	ldr	r2, [pc, #40]	; (80053bc <HAL_UART_MspInit+0x100>)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005398:	2200      	movs	r2, #0
 800539a:	2100      	movs	r1, #0
 800539c:	2025      	movs	r0, #37	; 0x25
 800539e:	f000 fe22 	bl	8005fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80053a2:	2025      	movs	r0, #37	; 0x25
 80053a4:	f000 fe3b 	bl	800601e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80053a8:	bf00      	nop
 80053aa:	3728      	adds	r7, #40	; 0x28
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	40011000 	.word	0x40011000
 80053b4:	40023800 	.word	0x40023800
 80053b8:	40020000 	.word	0x40020000
 80053bc:	2000151c 	.word	0x2000151c
 80053c0:	40026440 	.word	0x40026440

080053c4 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 80053c4:	b480      	push	{r7}
 80053c6:	af00      	add	r7, sp, #0

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

    /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80053c8:	bf00      	nop
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 80053d2:	b480      	push	{r7}
 80053d4:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while (1)
 80053d6:	e7fe      	b.n	80053d6 <HardFault_Handler+0x4>

080053d8 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 80053d8:	b480      	push	{r7}
 80053da:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MemoryManagement_IRQn 0 */

    /* USER CODE END MemoryManagement_IRQn 0 */
    while (1)
 80053dc:	e7fe      	b.n	80053dc <MemManage_Handler+0x4>

080053de <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 80053de:	b480      	push	{r7}
 80053e0:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN BusFault_IRQn 0 */

    /* USER CODE END BusFault_IRQn 0 */
    while (1)
 80053e2:	e7fe      	b.n	80053e2 <BusFault_Handler+0x4>

080053e4 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 80053e4:	b480      	push	{r7}
 80053e6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN UsageFault_IRQn 0 */

    /* USER CODE END UsageFault_IRQn 0 */
    while (1)
 80053e8:	e7fe      	b.n	80053e8 <UsageFault_Handler+0x4>

080053ea <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 80053ea:	b480      	push	{r7}
 80053ec:	af00      	add	r7, sp, #0

    /* USER CODE END SVCall_IRQn 0 */
    /* USER CODE BEGIN SVCall_IRQn 1 */

    /* USER CODE END SVCall_IRQn 1 */
}
 80053ee:	bf00      	nop
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0

    /* USER CODE END DebugMonitor_IRQn 0 */
    /* USER CODE BEGIN DebugMonitor_IRQn 1 */

    /* USER CODE END DebugMonitor_IRQn 1 */
}
 80053fc:	bf00      	nop
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8005406:	b480      	push	{r7}
 8005408:	af00      	add	r7, sp, #0

    /* USER CODE END PendSV_IRQn 0 */
    /* USER CODE BEGIN PendSV_IRQn 1 */

    /* USER CODE END PendSV_IRQn 1 */
}
 800540a:	bf00      	nop
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */

    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 8005418:	f000 f8e2 	bl	80055e0 <HAL_IncTick>
    /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 800541c:	bf00      	nop
 800541e:	bd80      	pop	{r7, pc}

08005420 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USART1_IRQn 0 */

    /* USER CODE END USART1_IRQn 0 */
    HAL_UART_IRQHandler(&huart1);
 8005424:	4803      	ldr	r0, [pc, #12]	; (8005434 <USART1_IRQHandler+0x14>)
 8005426:	f003 fd6f 	bl	8008f08 <HAL_UART_IRQHandler>
    /* USER CODE BEGIN USART1_IRQn 1 */
    SIMCOM_USART_IrqHandler();
 800542a:	f7fb fdf1 	bl	8001010 <SIMCOM_USART_IrqHandler>

    /* USER CODE END USART1_IRQn 1 */
}
 800542e:	bf00      	nop
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	2000157c 	.word	0x2000157c

08005438 <DMA2_Stream0_IRQHandler>:

/**
 * @brief This function handles DMA2 stream0 global interrupt.
 */
void DMA2_Stream0_IRQHandler(void)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

    /* USER CODE END DMA2_Stream0_IRQn 0 */
    HAL_DMA_IRQHandler(&hdma_adc1);
 800543c:	4802      	ldr	r0, [pc, #8]	; (8005448 <DMA2_Stream0_IRQHandler+0x10>)
 800543e:	f000 ff51 	bl	80062e4 <HAL_DMA_IRQHandler>
    /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

    /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005442:	bf00      	nop
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	200015bc 	.word	0x200015bc

0800544c <DMA2_Stream2_IRQHandler>:

/**
 * @brief This function handles DMA2 stream2 global interrupt.
 */
void DMA2_Stream2_IRQHandler(void)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

    /* USER CODE END DMA2_Stream2_IRQn 0 */
    HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005450:	4803      	ldr	r0, [pc, #12]	; (8005460 <DMA2_Stream2_IRQHandler+0x14>)
 8005452:	f000 ff47 	bl	80062e4 <HAL_DMA_IRQHandler>
    /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */
    SIMCOM_DMA_IrqHandler();
 8005456:	f7fb fdf9 	bl	800104c <SIMCOM_DMA_IrqHandler>

    /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800545a:	bf00      	nop
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	2000151c 	.word	0x2000151c

08005464 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800546c:	4b11      	ldr	r3, [pc, #68]	; (80054b4 <_sbrk+0x50>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d102      	bne.n	800547a <_sbrk+0x16>
		heap_end = &end;
 8005474:	4b0f      	ldr	r3, [pc, #60]	; (80054b4 <_sbrk+0x50>)
 8005476:	4a10      	ldr	r2, [pc, #64]	; (80054b8 <_sbrk+0x54>)
 8005478:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800547a:	4b0e      	ldr	r3, [pc, #56]	; (80054b4 <_sbrk+0x50>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005480:	4b0c      	ldr	r3, [pc, #48]	; (80054b4 <_sbrk+0x50>)
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4413      	add	r3, r2
 8005488:	466a      	mov	r2, sp
 800548a:	4293      	cmp	r3, r2
 800548c:	d907      	bls.n	800549e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800548e:	f004 fc09 	bl	8009ca4 <__errno>
 8005492:	4602      	mov	r2, r0
 8005494:	230c      	movs	r3, #12
 8005496:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005498:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800549c:	e006      	b.n	80054ac <_sbrk+0x48>
	}

	heap_end += incr;
 800549e:	4b05      	ldr	r3, [pc, #20]	; (80054b4 <_sbrk+0x50>)
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4413      	add	r3, r2
 80054a6:	4a03      	ldr	r2, [pc, #12]	; (80054b4 <_sbrk+0x50>)
 80054a8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80054aa:	68fb      	ldr	r3, [r7, #12]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3710      	adds	r7, #16
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	20000e6c 	.word	0x20000e6c
 80054b8:	20001648 	.word	0x20001648

080054bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80054bc:	b480      	push	{r7}
 80054be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80054c0:	4b08      	ldr	r3, [pc, #32]	; (80054e4 <SystemInit+0x28>)
 80054c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c6:	4a07      	ldr	r2, [pc, #28]	; (80054e4 <SystemInit+0x28>)
 80054c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80054cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80054d0:	4b04      	ldr	r3, [pc, #16]	; (80054e4 <SystemInit+0x28>)
 80054d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80054d6:	609a      	str	r2, [r3, #8]
#endif
}
 80054d8:	bf00      	nop
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	e000ed00 	.word	0xe000ed00

080054e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80054e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005520 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80054ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80054ee:	e003      	b.n	80054f8 <LoopCopyDataInit>

080054f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80054f0:	4b0c      	ldr	r3, [pc, #48]	; (8005524 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80054f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80054f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80054f6:	3104      	adds	r1, #4

080054f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80054f8:	480b      	ldr	r0, [pc, #44]	; (8005528 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80054fa:	4b0c      	ldr	r3, [pc, #48]	; (800552c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80054fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80054fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005500:	d3f6      	bcc.n	80054f0 <CopyDataInit>
  ldr  r2, =_sbss
 8005502:	4a0b      	ldr	r2, [pc, #44]	; (8005530 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005504:	e002      	b.n	800550c <LoopFillZerobss>

08005506 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8005506:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005508:	f842 3b04 	str.w	r3, [r2], #4

0800550c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800550c:	4b09      	ldr	r3, [pc, #36]	; (8005534 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800550e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005510:	d3f9      	bcc.n	8005506 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005512:	f7ff ffd3 	bl	80054bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005516:	f004 fbcb 	bl	8009cb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800551a:	f7ff fb19 	bl	8004b50 <main>
  bx  lr    
 800551e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8005520:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8005524:	0800ae84 	.word	0x0800ae84
  ldr  r0, =_sdata
 8005528:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800552c:	20000200 	.word	0x20000200
  ldr  r2, =_sbss
 8005530:	20000200 	.word	0x20000200
  ldr  r3, = _ebss
 8005534:	20001644 	.word	0x20001644

08005538 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005538:	e7fe      	b.n	8005538 <ADC_IRQHandler>
	...

0800553c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005540:	4b0e      	ldr	r3, [pc, #56]	; (800557c <HAL_Init+0x40>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a0d      	ldr	r2, [pc, #52]	; (800557c <HAL_Init+0x40>)
 8005546:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800554a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800554c:	4b0b      	ldr	r3, [pc, #44]	; (800557c <HAL_Init+0x40>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a0a      	ldr	r2, [pc, #40]	; (800557c <HAL_Init+0x40>)
 8005552:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005556:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005558:	4b08      	ldr	r3, [pc, #32]	; (800557c <HAL_Init+0x40>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a07      	ldr	r2, [pc, #28]	; (800557c <HAL_Init+0x40>)
 800555e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005562:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005564:	2003      	movs	r0, #3
 8005566:	f000 fd33 	bl	8005fd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800556a:	2000      	movs	r0, #0
 800556c:	f000 f808 	bl	8005580 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005570:	f7ff fd88 	bl	8005084 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	40023c00 	.word	0x40023c00

08005580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005588:	4b12      	ldr	r3, [pc, #72]	; (80055d4 <HAL_InitTick+0x54>)
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	4b12      	ldr	r3, [pc, #72]	; (80055d8 <HAL_InitTick+0x58>)
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	4619      	mov	r1, r3
 8005592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005596:	fbb3 f3f1 	udiv	r3, r3, r1
 800559a:	fbb2 f3f3 	udiv	r3, r2, r3
 800559e:	4618      	mov	r0, r3
 80055a0:	f000 fd4f 	bl	8006042 <HAL_SYSTICK_Config>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e00e      	b.n	80055cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b0f      	cmp	r3, #15
 80055b2:	d80a      	bhi.n	80055ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80055b4:	2200      	movs	r2, #0
 80055b6:	6879      	ldr	r1, [r7, #4]
 80055b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055bc:	f000 fd13 	bl	8005fe6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80055c0:	4a06      	ldr	r2, [pc, #24]	; (80055dc <HAL_InitTick+0x5c>)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
 80055c8:	e000      	b.n	80055cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3708      	adds	r7, #8
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	20000024 	.word	0x20000024
 80055d8:	2000002c 	.word	0x2000002c
 80055dc:	20000028 	.word	0x20000028

080055e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80055e0:	b480      	push	{r7}
 80055e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80055e4:	4b06      	ldr	r3, [pc, #24]	; (8005600 <HAL_IncTick+0x20>)
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	461a      	mov	r2, r3
 80055ea:	4b06      	ldr	r3, [pc, #24]	; (8005604 <HAL_IncTick+0x24>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4413      	add	r3, r2
 80055f0:	4a04      	ldr	r2, [pc, #16]	; (8005604 <HAL_IncTick+0x24>)
 80055f2:	6013      	str	r3, [r2, #0]
}
 80055f4:	bf00      	nop
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	2000002c 	.word	0x2000002c
 8005604:	2000161c 	.word	0x2000161c

08005608 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005608:	b480      	push	{r7}
 800560a:	af00      	add	r7, sp, #0
  return uwTick;
 800560c:	4b03      	ldr	r3, [pc, #12]	; (800561c <HAL_GetTick+0x14>)
 800560e:	681b      	ldr	r3, [r3, #0]
}
 8005610:	4618      	mov	r0, r3
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	2000161c 	.word	0x2000161c

08005620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005628:	f7ff ffee 	bl	8005608 <HAL_GetTick>
 800562c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005638:	d005      	beq.n	8005646 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800563a:	4b09      	ldr	r3, [pc, #36]	; (8005660 <HAL_Delay+0x40>)
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	461a      	mov	r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	4413      	add	r3, r2
 8005644:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005646:	bf00      	nop
 8005648:	f7ff ffde 	bl	8005608 <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	429a      	cmp	r2, r3
 8005656:	d8f7      	bhi.n	8005648 <HAL_Delay+0x28>
  {
  }
}
 8005658:	bf00      	nop
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	2000002c 	.word	0x2000002c

08005664 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800566c:	2300      	movs	r3, #0
 800566e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e033      	b.n	80056e2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567e:	2b00      	cmp	r3, #0
 8005680:	d109      	bne.n	8005696 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7ff fd26 	bl	80050d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569a:	f003 0310 	and.w	r3, r3, #16
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d118      	bne.n	80056d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80056aa:	f023 0302 	bic.w	r3, r3, #2
 80056ae:	f043 0202 	orr.w	r2, r3, #2
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 fa28 	bl	8005b0c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c6:	f023 0303 	bic.w	r3, r3, #3
 80056ca:	f043 0201 	orr.w	r2, r3, #1
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	641a      	str	r2, [r3, #64]	; 0x40
 80056d2:	e001      	b.n	80056d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80056e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
	...

080056ec <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b086      	sub	sp, #24
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80056f8:	2300      	movs	r3, #0
 80056fa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005702:	2b01      	cmp	r3, #1
 8005704:	d101      	bne.n	800570a <HAL_ADC_Start_DMA+0x1e>
 8005706:	2302      	movs	r3, #2
 8005708:	e0b1      	b.n	800586e <HAL_ADC_Start_DMA+0x182>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2201      	movs	r2, #1
 800570e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	2b01      	cmp	r3, #1
 800571e:	d018      	beq.n	8005752 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	689a      	ldr	r2, [r3, #8]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f042 0201 	orr.w	r2, r2, #1
 800572e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005730:	4b51      	ldr	r3, [pc, #324]	; (8005878 <HAL_ADC_Start_DMA+0x18c>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a51      	ldr	r2, [pc, #324]	; (800587c <HAL_ADC_Start_DMA+0x190>)
 8005736:	fba2 2303 	umull	r2, r3, r2, r3
 800573a:	0c9a      	lsrs	r2, r3, #18
 800573c:	4613      	mov	r3, r2
 800573e:	005b      	lsls	r3, r3, #1
 8005740:	4413      	add	r3, r2
 8005742:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005744:	e002      	b.n	800574c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	3b01      	subs	r3, #1
 800574a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1f9      	bne.n	8005746 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f003 0301 	and.w	r3, r3, #1
 800575c:	2b01      	cmp	r3, #1
 800575e:	f040 8085 	bne.w	800586c <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005766:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800576a:	f023 0301 	bic.w	r3, r3, #1
 800576e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005780:	2b00      	cmp	r3, #0
 8005782:	d007      	beq.n	8005794 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005788:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800578c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005798:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800579c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057a0:	d106      	bne.n	80057b0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057a6:	f023 0206 	bic.w	r2, r3, #6
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	645a      	str	r2, [r3, #68]	; 0x44
 80057ae:	e002      	b.n	80057b6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80057be:	4b30      	ldr	r3, [pc, #192]	; (8005880 <HAL_ADC_Start_DMA+0x194>)
 80057c0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c6:	4a2f      	ldr	r2, [pc, #188]	; (8005884 <HAL_ADC_Start_DMA+0x198>)
 80057c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ce:	4a2e      	ldr	r2, [pc, #184]	; (8005888 <HAL_ADC_Start_DMA+0x19c>)
 80057d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d6:	4a2d      	ldr	r2, [pc, #180]	; (800588c <HAL_ADC_Start_DMA+0x1a0>)
 80057d8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80057e2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685a      	ldr	r2, [r3, #4]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80057f2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689a      	ldr	r2, [r3, #8]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005802:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	334c      	adds	r3, #76	; 0x4c
 800580e:	4619      	mov	r1, r3
 8005810:	68ba      	ldr	r2, [r7, #8]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f000 fcec 	bl	80061f0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f003 031f 	and.w	r3, r3, #31
 8005820:	2b00      	cmp	r3, #0
 8005822:	d10f      	bne.n	8005844 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d11c      	bne.n	800586c <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	689a      	ldr	r2, [r3, #8]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005840:	609a      	str	r2, [r3, #8]
 8005842:	e013      	b.n	800586c <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a11      	ldr	r2, [pc, #68]	; (8005890 <HAL_ADC_Start_DMA+0x1a4>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d10e      	bne.n	800586c <HAL_ADC_Start_DMA+0x180>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d107      	bne.n	800586c <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	689a      	ldr	r2, [r3, #8]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800586a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3718      	adds	r7, #24
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	20000024 	.word	0x20000024
 800587c:	431bde83 	.word	0x431bde83
 8005880:	40012300 	.word	0x40012300
 8005884:	08005d05 	.word	0x08005d05
 8005888:	08005dbf 	.word	0x08005dbf
 800588c:	08005ddb 	.word	0x08005ddb
 8005890:	40012000 	.word	0x40012000

08005894 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800589c:	bf00      	nop
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80058b2:	2300      	movs	r3, #0
 80058b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d101      	bne.n	80058c4 <HAL_ADC_ConfigChannel+0x1c>
 80058c0:	2302      	movs	r3, #2
 80058c2:	e113      	b.n	8005aec <HAL_ADC_ConfigChannel+0x244>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2b09      	cmp	r3, #9
 80058d2:	d925      	bls.n	8005920 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68d9      	ldr	r1, [r3, #12]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	b29b      	uxth	r3, r3
 80058e0:	461a      	mov	r2, r3
 80058e2:	4613      	mov	r3, r2
 80058e4:	005b      	lsls	r3, r3, #1
 80058e6:	4413      	add	r3, r2
 80058e8:	3b1e      	subs	r3, #30
 80058ea:	2207      	movs	r2, #7
 80058ec:	fa02 f303 	lsl.w	r3, r2, r3
 80058f0:	43da      	mvns	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	400a      	ands	r2, r1
 80058f8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68d9      	ldr	r1, [r3, #12]
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	689a      	ldr	r2, [r3, #8]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	b29b      	uxth	r3, r3
 800590a:	4618      	mov	r0, r3
 800590c:	4603      	mov	r3, r0
 800590e:	005b      	lsls	r3, r3, #1
 8005910:	4403      	add	r3, r0
 8005912:	3b1e      	subs	r3, #30
 8005914:	409a      	lsls	r2, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	430a      	orrs	r2, r1
 800591c:	60da      	str	r2, [r3, #12]
 800591e:	e022      	b.n	8005966 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	6919      	ldr	r1, [r3, #16]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	b29b      	uxth	r3, r3
 800592c:	461a      	mov	r2, r3
 800592e:	4613      	mov	r3, r2
 8005930:	005b      	lsls	r3, r3, #1
 8005932:	4413      	add	r3, r2
 8005934:	2207      	movs	r2, #7
 8005936:	fa02 f303 	lsl.w	r3, r2, r3
 800593a:	43da      	mvns	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	400a      	ands	r2, r1
 8005942:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	6919      	ldr	r1, [r3, #16]
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	689a      	ldr	r2, [r3, #8]
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	b29b      	uxth	r3, r3
 8005954:	4618      	mov	r0, r3
 8005956:	4603      	mov	r3, r0
 8005958:	005b      	lsls	r3, r3, #1
 800595a:	4403      	add	r3, r0
 800595c:	409a      	lsls	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	430a      	orrs	r2, r1
 8005964:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	2b06      	cmp	r3, #6
 800596c:	d824      	bhi.n	80059b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	685a      	ldr	r2, [r3, #4]
 8005978:	4613      	mov	r3, r2
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	4413      	add	r3, r2
 800597e:	3b05      	subs	r3, #5
 8005980:	221f      	movs	r2, #31
 8005982:	fa02 f303 	lsl.w	r3, r2, r3
 8005986:	43da      	mvns	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	400a      	ands	r2, r1
 800598e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	b29b      	uxth	r3, r3
 800599c:	4618      	mov	r0, r3
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	685a      	ldr	r2, [r3, #4]
 80059a2:	4613      	mov	r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4413      	add	r3, r2
 80059a8:	3b05      	subs	r3, #5
 80059aa:	fa00 f203 	lsl.w	r2, r0, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	430a      	orrs	r2, r1
 80059b4:	635a      	str	r2, [r3, #52]	; 0x34
 80059b6:	e04c      	b.n	8005a52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	2b0c      	cmp	r3, #12
 80059be:	d824      	bhi.n	8005a0a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	685a      	ldr	r2, [r3, #4]
 80059ca:	4613      	mov	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4413      	add	r3, r2
 80059d0:	3b23      	subs	r3, #35	; 0x23
 80059d2:	221f      	movs	r2, #31
 80059d4:	fa02 f303 	lsl.w	r3, r2, r3
 80059d8:	43da      	mvns	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	400a      	ands	r2, r1
 80059e0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	4618      	mov	r0, r3
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	685a      	ldr	r2, [r3, #4]
 80059f4:	4613      	mov	r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4413      	add	r3, r2
 80059fa:	3b23      	subs	r3, #35	; 0x23
 80059fc:	fa00 f203 	lsl.w	r2, r0, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	430a      	orrs	r2, r1
 8005a06:	631a      	str	r2, [r3, #48]	; 0x30
 8005a08:	e023      	b.n	8005a52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	685a      	ldr	r2, [r3, #4]
 8005a14:	4613      	mov	r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4413      	add	r3, r2
 8005a1a:	3b41      	subs	r3, #65	; 0x41
 8005a1c:	221f      	movs	r2, #31
 8005a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a22:	43da      	mvns	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	400a      	ands	r2, r1
 8005a2a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	4618      	mov	r0, r3
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	685a      	ldr	r2, [r3, #4]
 8005a3e:	4613      	mov	r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	3b41      	subs	r3, #65	; 0x41
 8005a46:	fa00 f203 	lsl.w	r2, r0, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005a52:	4b29      	ldr	r3, [pc, #164]	; (8005af8 <HAL_ADC_ConfigChannel+0x250>)
 8005a54:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a28      	ldr	r2, [pc, #160]	; (8005afc <HAL_ADC_ConfigChannel+0x254>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d10f      	bne.n	8005a80 <HAL_ADC_ConfigChannel+0x1d8>
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2b12      	cmp	r3, #18
 8005a66:	d10b      	bne.n	8005a80 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a1d      	ldr	r2, [pc, #116]	; (8005afc <HAL_ADC_ConfigChannel+0x254>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d12b      	bne.n	8005ae2 <HAL_ADC_ConfigChannel+0x23a>
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a1c      	ldr	r2, [pc, #112]	; (8005b00 <HAL_ADC_ConfigChannel+0x258>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d003      	beq.n	8005a9c <HAL_ADC_ConfigChannel+0x1f4>
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2b11      	cmp	r3, #17
 8005a9a:	d122      	bne.n	8005ae2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a11      	ldr	r2, [pc, #68]	; (8005b00 <HAL_ADC_ConfigChannel+0x258>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d111      	bne.n	8005ae2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005abe:	4b11      	ldr	r3, [pc, #68]	; (8005b04 <HAL_ADC_ConfigChannel+0x25c>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a11      	ldr	r2, [pc, #68]	; (8005b08 <HAL_ADC_ConfigChannel+0x260>)
 8005ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac8:	0c9a      	lsrs	r2, r3, #18
 8005aca:	4613      	mov	r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	4413      	add	r3, r2
 8005ad0:	005b      	lsls	r3, r3, #1
 8005ad2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005ad4:	e002      	b.n	8005adc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1f9      	bne.n	8005ad6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3714      	adds	r7, #20
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr
 8005af8:	40012300 	.word	0x40012300
 8005afc:	40012000 	.word	0x40012000
 8005b00:	10000012 	.word	0x10000012
 8005b04:	20000024 	.word	0x20000024
 8005b08:	431bde83 	.word	0x431bde83

08005b0c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005b14:	4b79      	ldr	r3, [pc, #484]	; (8005cfc <ADC_Init+0x1f0>)
 8005b16:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	431a      	orrs	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	6859      	ldr	r1, [r3, #4]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	021a      	lsls	r2, r3, #8
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	430a      	orrs	r2, r1
 8005b54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	685a      	ldr	r2, [r3, #4]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005b64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	6859      	ldr	r1, [r3, #4]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	689a      	ldr	r2, [r3, #8]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	430a      	orrs	r2, r1
 8005b76:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	689a      	ldr	r2, [r3, #8]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6899      	ldr	r1, [r3, #8]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	68da      	ldr	r2, [r3, #12]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	430a      	orrs	r2, r1
 8005b98:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9e:	4a58      	ldr	r2, [pc, #352]	; (8005d00 <ADC_Init+0x1f4>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d022      	beq.n	8005bea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	689a      	ldr	r2, [r3, #8]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005bb2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6899      	ldr	r1, [r3, #8]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	689a      	ldr	r2, [r3, #8]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005bd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	6899      	ldr	r1, [r3, #8]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	430a      	orrs	r2, r1
 8005be6:	609a      	str	r2, [r3, #8]
 8005be8:	e00f      	b.n	8005c0a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	689a      	ldr	r2, [r3, #8]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005bf8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	689a      	ldr	r2, [r3, #8]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005c08:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	689a      	ldr	r2, [r3, #8]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f022 0202 	bic.w	r2, r2, #2
 8005c18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	6899      	ldr	r1, [r3, #8]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	7e1b      	ldrb	r3, [r3, #24]
 8005c24:	005a      	lsls	r2, r3, #1
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d01b      	beq.n	8005c70 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685a      	ldr	r2, [r3, #4]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c46:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005c56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6859      	ldr	r1, [r3, #4]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c62:	3b01      	subs	r3, #1
 8005c64:	035a      	lsls	r2, r3, #13
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	605a      	str	r2, [r3, #4]
 8005c6e:	e007      	b.n	8005c80 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005c8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	69db      	ldr	r3, [r3, #28]
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	051a      	lsls	r2, r3, #20
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	689a      	ldr	r2, [r3, #8]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005cb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	6899      	ldr	r1, [r3, #8]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005cc2:	025a      	lsls	r2, r3, #9
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	689a      	ldr	r2, [r3, #8]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6899      	ldr	r1, [r3, #8]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	029a      	lsls	r2, r3, #10
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	430a      	orrs	r2, r1
 8005cee:	609a      	str	r2, [r3, #8]
}
 8005cf0:	bf00      	nop
 8005cf2:	3714      	adds	r7, #20
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr
 8005cfc:	40012300 	.word	0x40012300
 8005d00:	0f000001 	.word	0x0f000001

08005d04 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d10:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d16:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d13c      	bne.n	8005d98 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d22:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d12b      	bne.n	8005d90 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d127      	bne.n	8005d90 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d46:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d006      	beq.n	8005d5c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d119      	bne.n	8005d90 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	685a      	ldr	r2, [r3, #4]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f022 0220 	bic.w	r2, r2, #32
 8005d6a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d105      	bne.n	8005d90 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d88:	f043 0201 	orr.w	r2, r3, #1
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f7fb f8a9 	bl	8000ee8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005d96:	e00e      	b.n	8005db6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9c:	f003 0310 	and.w	r3, r3, #16
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d003      	beq.n	8005dac <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005da4:	68f8      	ldr	r0, [r7, #12]
 8005da6:	f7ff fd75 	bl	8005894 <HAL_ADC_ErrorCallback>
}
 8005daa:	e004      	b.n	8005db6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	4798      	blx	r3
}
 8005db6:	bf00      	nop
 8005db8:	3710      	adds	r7, #16
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b084      	sub	sp, #16
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dca:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f7fb f85b 	bl	8000e88 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005dd2:	bf00      	nop
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b084      	sub	sp, #16
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2240      	movs	r2, #64	; 0x40
 8005dec:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df2:	f043 0204 	orr.w	r2, r3, #4
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	f7ff fd4a 	bl	8005894 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005e00:	bf00      	nop
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f003 0307 	and.w	r3, r3, #7
 8005e16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e18:	4b0c      	ldr	r3, [pc, #48]	; (8005e4c <__NVIC_SetPriorityGrouping+0x44>)
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e1e:	68ba      	ldr	r2, [r7, #8]
 8005e20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005e24:	4013      	ands	r3, r2
 8005e26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e3a:	4a04      	ldr	r2, [pc, #16]	; (8005e4c <__NVIC_SetPriorityGrouping+0x44>)
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	60d3      	str	r3, [r2, #12]
}
 8005e40:	bf00      	nop
 8005e42:	3714      	adds	r7, #20
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr
 8005e4c:	e000ed00 	.word	0xe000ed00

08005e50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005e50:	b480      	push	{r7}
 8005e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e54:	4b04      	ldr	r3, [pc, #16]	; (8005e68 <__NVIC_GetPriorityGrouping+0x18>)
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	0a1b      	lsrs	r3, r3, #8
 8005e5a:	f003 0307 	and.w	r3, r3, #7
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr
 8005e68:	e000ed00 	.word	0xe000ed00

08005e6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	4603      	mov	r3, r0
 8005e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	db0b      	blt.n	8005e96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e7e:	79fb      	ldrb	r3, [r7, #7]
 8005e80:	f003 021f 	and.w	r2, r3, #31
 8005e84:	4907      	ldr	r1, [pc, #28]	; (8005ea4 <__NVIC_EnableIRQ+0x38>)
 8005e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e8a:	095b      	lsrs	r3, r3, #5
 8005e8c:	2001      	movs	r0, #1
 8005e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8005e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005e96:	bf00      	nop
 8005e98:	370c      	adds	r7, #12
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	e000e100 	.word	0xe000e100

08005ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	4603      	mov	r3, r0
 8005eb0:	6039      	str	r1, [r7, #0]
 8005eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	db0a      	blt.n	8005ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	b2da      	uxtb	r2, r3
 8005ec0:	490c      	ldr	r1, [pc, #48]	; (8005ef4 <__NVIC_SetPriority+0x4c>)
 8005ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ec6:	0112      	lsls	r2, r2, #4
 8005ec8:	b2d2      	uxtb	r2, r2
 8005eca:	440b      	add	r3, r1
 8005ecc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ed0:	e00a      	b.n	8005ee8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	b2da      	uxtb	r2, r3
 8005ed6:	4908      	ldr	r1, [pc, #32]	; (8005ef8 <__NVIC_SetPriority+0x50>)
 8005ed8:	79fb      	ldrb	r3, [r7, #7]
 8005eda:	f003 030f 	and.w	r3, r3, #15
 8005ede:	3b04      	subs	r3, #4
 8005ee0:	0112      	lsls	r2, r2, #4
 8005ee2:	b2d2      	uxtb	r2, r2
 8005ee4:	440b      	add	r3, r1
 8005ee6:	761a      	strb	r2, [r3, #24]
}
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr
 8005ef4:	e000e100 	.word	0xe000e100
 8005ef8:	e000ed00 	.word	0xe000ed00

08005efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b089      	sub	sp, #36	; 0x24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f003 0307 	and.w	r3, r3, #7
 8005f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	f1c3 0307 	rsb	r3, r3, #7
 8005f16:	2b04      	cmp	r3, #4
 8005f18:	bf28      	it	cs
 8005f1a:	2304      	movcs	r3, #4
 8005f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	3304      	adds	r3, #4
 8005f22:	2b06      	cmp	r3, #6
 8005f24:	d902      	bls.n	8005f2c <NVIC_EncodePriority+0x30>
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	3b03      	subs	r3, #3
 8005f2a:	e000      	b.n	8005f2e <NVIC_EncodePriority+0x32>
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3a:	43da      	mvns	r2, r3
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	401a      	ands	r2, r3
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f4e:	43d9      	mvns	r1, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f54:	4313      	orrs	r3, r2
         );
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3724      	adds	r7, #36	; 0x24
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
	...

08005f64 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005f64:	b480      	push	{r7}
 8005f66:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005f68:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005f6c:	4b05      	ldr	r3, [pc, #20]	; (8005f84 <__NVIC_SystemReset+0x20>)
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005f74:	4903      	ldr	r1, [pc, #12]	; (8005f84 <__NVIC_SystemReset+0x20>)
 8005f76:	4b04      	ldr	r3, [pc, #16]	; (8005f88 <__NVIC_SystemReset+0x24>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	60cb      	str	r3, [r1, #12]
 8005f7c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005f80:	bf00      	nop
 8005f82:	e7fd      	b.n	8005f80 <__NVIC_SystemReset+0x1c>
 8005f84:	e000ed00 	.word	0xe000ed00
 8005f88:	05fa0004 	.word	0x05fa0004

08005f8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	3b01      	subs	r3, #1
 8005f98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f9c:	d301      	bcc.n	8005fa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e00f      	b.n	8005fc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005fa2:	4a0a      	ldr	r2, [pc, #40]	; (8005fcc <SysTick_Config+0x40>)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005faa:	210f      	movs	r1, #15
 8005fac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fb0:	f7ff ff7a 	bl	8005ea8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005fb4:	4b05      	ldr	r3, [pc, #20]	; (8005fcc <SysTick_Config+0x40>)
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005fba:	4b04      	ldr	r3, [pc, #16]	; (8005fcc <SysTick_Config+0x40>)
 8005fbc:	2207      	movs	r2, #7
 8005fbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3708      	adds	r7, #8
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	e000e010 	.word	0xe000e010

08005fd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f7ff ff15 	bl	8005e08 <__NVIC_SetPriorityGrouping>
}
 8005fde:	bf00      	nop
 8005fe0:	3708      	adds	r7, #8
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b086      	sub	sp, #24
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	4603      	mov	r3, r0
 8005fee:	60b9      	str	r1, [r7, #8]
 8005ff0:	607a      	str	r2, [r7, #4]
 8005ff2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005ff8:	f7ff ff2a 	bl	8005e50 <__NVIC_GetPriorityGrouping>
 8005ffc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	68b9      	ldr	r1, [r7, #8]
 8006002:	6978      	ldr	r0, [r7, #20]
 8006004:	f7ff ff7a 	bl	8005efc <NVIC_EncodePriority>
 8006008:	4602      	mov	r2, r0
 800600a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800600e:	4611      	mov	r1, r2
 8006010:	4618      	mov	r0, r3
 8006012:	f7ff ff49 	bl	8005ea8 <__NVIC_SetPriority>
}
 8006016:	bf00      	nop
 8006018:	3718      	adds	r7, #24
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800601e:	b580      	push	{r7, lr}
 8006020:	b082      	sub	sp, #8
 8006022:	af00      	add	r7, sp, #0
 8006024:	4603      	mov	r3, r0
 8006026:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800602c:	4618      	mov	r0, r3
 800602e:	f7ff ff1d 	bl	8005e6c <__NVIC_EnableIRQ>
}
 8006032:	bf00      	nop
 8006034:	3708      	adds	r7, #8
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800603e:	f7ff ff91 	bl	8005f64 <__NVIC_SystemReset>

08006042 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b082      	sub	sp, #8
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f7ff ff9e 	bl	8005f8c <SysTick_Config>
 8006050:	4603      	mov	r3, r0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3708      	adds	r7, #8
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}

0800605a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800605a:	b580      	push	{r7, lr}
 800605c:	b082      	sub	sp, #8
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d101      	bne.n	800606c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e00e      	b.n	800608a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	795b      	ldrb	r3, [r3, #5]
 8006070:	b2db      	uxtb	r3, r3
 8006072:	2b00      	cmp	r3, #0
 8006074:	d105      	bne.n	8006082 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f7ff f8a1 	bl	80051c4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3708      	adds	r7, #8
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
	...

08006094 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800609c:	2300      	movs	r3, #0
 800609e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80060a0:	f7ff fab2 	bl	8005608 <HAL_GetTick>
 80060a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d101      	bne.n	80060b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e099      	b.n	80061e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2202      	movs	r2, #2
 80060bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f022 0201 	bic.w	r2, r2, #1
 80060ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80060d0:	e00f      	b.n	80060f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80060d2:	f7ff fa99 	bl	8005608 <HAL_GetTick>
 80060d6:	4602      	mov	r2, r0
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	2b05      	cmp	r3, #5
 80060de:	d908      	bls.n	80060f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2220      	movs	r2, #32
 80060e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2203      	movs	r2, #3
 80060ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e078      	b.n	80061e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0301 	and.w	r3, r3, #1
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1e8      	bne.n	80060d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006108:	697a      	ldr	r2, [r7, #20]
 800610a:	4b38      	ldr	r3, [pc, #224]	; (80061ec <HAL_DMA_Init+0x158>)
 800610c:	4013      	ands	r3, r2
 800610e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	685a      	ldr	r2, [r3, #4]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800611e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800612a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006136:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a1b      	ldr	r3, [r3, #32]
 800613c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	4313      	orrs	r3, r2
 8006142:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006148:	2b04      	cmp	r3, #4
 800614a:	d107      	bne.n	800615c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006154:	4313      	orrs	r3, r2
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	4313      	orrs	r3, r2
 800615a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	697a      	ldr	r2, [r7, #20]
 8006162:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	f023 0307 	bic.w	r3, r3, #7
 8006172:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	4313      	orrs	r3, r2
 800617c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006182:	2b04      	cmp	r3, #4
 8006184:	d117      	bne.n	80061b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	4313      	orrs	r3, r2
 800618e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00e      	beq.n	80061b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 fa91 	bl	80066c0 <DMA_CheckFifoParam>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d008      	beq.n	80061b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2240      	movs	r2, #64	; 0x40
 80061a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80061b2:	2301      	movs	r3, #1
 80061b4:	e016      	b.n	80061e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 fa48 	bl	8006654 <DMA_CalcBaseAndBitshift>
 80061c4:	4603      	mov	r3, r0
 80061c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061cc:	223f      	movs	r2, #63	; 0x3f
 80061ce:	409a      	lsls	r2, r3
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3718      	adds	r7, #24
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	e010803f 	.word	0xe010803f

080061f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
 80061fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061fe:	2300      	movs	r3, #0
 8006200:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006206:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800620e:	2b01      	cmp	r3, #1
 8006210:	d101      	bne.n	8006216 <HAL_DMA_Start_IT+0x26>
 8006212:	2302      	movs	r3, #2
 8006214:	e040      	b.n	8006298 <HAL_DMA_Start_IT+0xa8>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b01      	cmp	r3, #1
 8006228:	d12f      	bne.n	800628a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2202      	movs	r2, #2
 800622e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	68b9      	ldr	r1, [r7, #8]
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f000 f9da 	bl	80065f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006248:	223f      	movs	r2, #63	; 0x3f
 800624a:	409a      	lsls	r2, r3
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f042 0216 	orr.w	r2, r2, #22
 800625e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006264:	2b00      	cmp	r3, #0
 8006266:	d007      	beq.n	8006278 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f042 0208 	orr.w	r2, r2, #8
 8006276:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f042 0201 	orr.w	r2, r2, #1
 8006286:	601a      	str	r2, [r3, #0]
 8006288:	e005      	b.n	8006296 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006292:	2302      	movs	r3, #2
 8006294:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006296:	7dfb      	ldrb	r3, [r7, #23]
}
 8006298:	4618      	mov	r0, r3
 800629a:	3718      	adds	r7, #24
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d004      	beq.n	80062be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2280      	movs	r2, #128	; 0x80
 80062b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e00c      	b.n	80062d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2205      	movs	r2, #5
 80062c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f022 0201 	bic.w	r2, r2, #1
 80062d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80062ec:	2300      	movs	r3, #0
 80062ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80062f0:	4b92      	ldr	r3, [pc, #584]	; (800653c <HAL_DMA_IRQHandler+0x258>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a92      	ldr	r2, [pc, #584]	; (8006540 <HAL_DMA_IRQHandler+0x25c>)
 80062f6:	fba2 2303 	umull	r2, r3, r2, r3
 80062fa:	0a9b      	lsrs	r3, r3, #10
 80062fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006302:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800630e:	2208      	movs	r2, #8
 8006310:	409a      	lsls	r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	4013      	ands	r3, r2
 8006316:	2b00      	cmp	r3, #0
 8006318:	d01a      	beq.n	8006350 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 0304 	and.w	r3, r3, #4
 8006324:	2b00      	cmp	r3, #0
 8006326:	d013      	beq.n	8006350 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f022 0204 	bic.w	r2, r2, #4
 8006336:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800633c:	2208      	movs	r2, #8
 800633e:	409a      	lsls	r2, r3
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006348:	f043 0201 	orr.w	r2, r3, #1
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006354:	2201      	movs	r2, #1
 8006356:	409a      	lsls	r2, r3
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	4013      	ands	r3, r2
 800635c:	2b00      	cmp	r3, #0
 800635e:	d012      	beq.n	8006386 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	695b      	ldr	r3, [r3, #20]
 8006366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00b      	beq.n	8006386 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006372:	2201      	movs	r2, #1
 8006374:	409a      	lsls	r2, r3
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800637e:	f043 0202 	orr.w	r2, r3, #2
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800638a:	2204      	movs	r2, #4
 800638c:	409a      	lsls	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	4013      	ands	r3, r2
 8006392:	2b00      	cmp	r3, #0
 8006394:	d012      	beq.n	80063bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0302 	and.w	r3, r3, #2
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00b      	beq.n	80063bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063a8:	2204      	movs	r2, #4
 80063aa:	409a      	lsls	r2, r3
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b4:	f043 0204 	orr.w	r2, r3, #4
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063c0:	2210      	movs	r2, #16
 80063c2:	409a      	lsls	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	4013      	ands	r3, r2
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d043      	beq.n	8006454 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0308 	and.w	r3, r3, #8
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d03c      	beq.n	8006454 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063de:	2210      	movs	r2, #16
 80063e0:	409a      	lsls	r2, r3
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d018      	beq.n	8006426 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d108      	bne.n	8006414 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006406:	2b00      	cmp	r3, #0
 8006408:	d024      	beq.n	8006454 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	4798      	blx	r3
 8006412:	e01f      	b.n	8006454 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006418:	2b00      	cmp	r3, #0
 800641a:	d01b      	beq.n	8006454 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	4798      	blx	r3
 8006424:	e016      	b.n	8006454 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006430:	2b00      	cmp	r3, #0
 8006432:	d107      	bne.n	8006444 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f022 0208 	bic.w	r2, r2, #8
 8006442:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006448:	2b00      	cmp	r3, #0
 800644a:	d003      	beq.n	8006454 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006458:	2220      	movs	r2, #32
 800645a:	409a      	lsls	r2, r3
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	4013      	ands	r3, r2
 8006460:	2b00      	cmp	r3, #0
 8006462:	f000 808e 	beq.w	8006582 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 0310 	and.w	r3, r3, #16
 8006470:	2b00      	cmp	r3, #0
 8006472:	f000 8086 	beq.w	8006582 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800647a:	2220      	movs	r2, #32
 800647c:	409a      	lsls	r2, r3
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006488:	b2db      	uxtb	r3, r3
 800648a:	2b05      	cmp	r3, #5
 800648c:	d136      	bne.n	80064fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f022 0216 	bic.w	r2, r2, #22
 800649c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	695a      	ldr	r2, [r3, #20]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d103      	bne.n	80064be <HAL_DMA_IRQHandler+0x1da>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d007      	beq.n	80064ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f022 0208 	bic.w	r2, r2, #8
 80064cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064d2:	223f      	movs	r2, #63	; 0x3f
 80064d4:	409a      	lsls	r2, r3
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d07d      	beq.n	80065ee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	4798      	blx	r3
        }
        return;
 80064fa:	e078      	b.n	80065ee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d01c      	beq.n	8006544 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d108      	bne.n	800652a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800651c:	2b00      	cmp	r3, #0
 800651e:	d030      	beq.n	8006582 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	4798      	blx	r3
 8006528:	e02b      	b.n	8006582 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800652e:	2b00      	cmp	r3, #0
 8006530:	d027      	beq.n	8006582 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	4798      	blx	r3
 800653a:	e022      	b.n	8006582 <HAL_DMA_IRQHandler+0x29e>
 800653c:	20000024 	.word	0x20000024
 8006540:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800654e:	2b00      	cmp	r3, #0
 8006550:	d10f      	bne.n	8006572 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f022 0210 	bic.w	r2, r2, #16
 8006560:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2201      	movs	r2, #1
 800656e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006576:	2b00      	cmp	r3, #0
 8006578:	d003      	beq.n	8006582 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006586:	2b00      	cmp	r3, #0
 8006588:	d032      	beq.n	80065f0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	2b00      	cmp	r3, #0
 8006594:	d022      	beq.n	80065dc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2205      	movs	r2, #5
 800659a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f022 0201 	bic.w	r2, r2, #1
 80065ac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	3301      	adds	r3, #1
 80065b2:	60bb      	str	r3, [r7, #8]
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d307      	bcc.n	80065ca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d1f2      	bne.n	80065ae <HAL_DMA_IRQHandler+0x2ca>
 80065c8:	e000      	b.n	80065cc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80065ca:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d005      	beq.n	80065f0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	4798      	blx	r3
 80065ec:	e000      	b.n	80065f0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80065ee:	bf00      	nop
    }
  }
}
 80065f0:	3718      	adds	r7, #24
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop

080065f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	607a      	str	r2, [r7, #4]
 8006604:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006614:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	683a      	ldr	r2, [r7, #0]
 800661c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	2b40      	cmp	r3, #64	; 0x40
 8006624:	d108      	bne.n	8006638 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68ba      	ldr	r2, [r7, #8]
 8006634:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006636:	e007      	b.n	8006648 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	60da      	str	r2, [r3, #12]
}
 8006648:	bf00      	nop
 800664a:	3714      	adds	r7, #20
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006654:	b480      	push	{r7}
 8006656:	b085      	sub	sp, #20
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	b2db      	uxtb	r3, r3
 8006662:	3b10      	subs	r3, #16
 8006664:	4a14      	ldr	r2, [pc, #80]	; (80066b8 <DMA_CalcBaseAndBitshift+0x64>)
 8006666:	fba2 2303 	umull	r2, r3, r2, r3
 800666a:	091b      	lsrs	r3, r3, #4
 800666c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800666e:	4a13      	ldr	r2, [pc, #76]	; (80066bc <DMA_CalcBaseAndBitshift+0x68>)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	4413      	add	r3, r2
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	461a      	mov	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2b03      	cmp	r3, #3
 8006680:	d909      	bls.n	8006696 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800668a:	f023 0303 	bic.w	r3, r3, #3
 800668e:	1d1a      	adds	r2, r3, #4
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	659a      	str	r2, [r3, #88]	; 0x58
 8006694:	e007      	b.n	80066a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800669e:	f023 0303 	bic.w	r3, r3, #3
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3714      	adds	r7, #20
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	aaaaaaab 	.word	0xaaaaaaab
 80066bc:	0800ad2c 	.word	0x0800ad2c

080066c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066c8:	2300      	movs	r3, #0
 80066ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d11f      	bne.n	800671a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	2b03      	cmp	r3, #3
 80066de:	d855      	bhi.n	800678c <DMA_CheckFifoParam+0xcc>
 80066e0:	a201      	add	r2, pc, #4	; (adr r2, 80066e8 <DMA_CheckFifoParam+0x28>)
 80066e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e6:	bf00      	nop
 80066e8:	080066f9 	.word	0x080066f9
 80066ec:	0800670b 	.word	0x0800670b
 80066f0:	080066f9 	.word	0x080066f9
 80066f4:	0800678d 	.word	0x0800678d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006700:	2b00      	cmp	r3, #0
 8006702:	d045      	beq.n	8006790 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006708:	e042      	b.n	8006790 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006712:	d13f      	bne.n	8006794 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006718:	e03c      	b.n	8006794 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006722:	d121      	bne.n	8006768 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	2b03      	cmp	r3, #3
 8006728:	d836      	bhi.n	8006798 <DMA_CheckFifoParam+0xd8>
 800672a:	a201      	add	r2, pc, #4	; (adr r2, 8006730 <DMA_CheckFifoParam+0x70>)
 800672c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006730:	08006741 	.word	0x08006741
 8006734:	08006747 	.word	0x08006747
 8006738:	08006741 	.word	0x08006741
 800673c:	08006759 	.word	0x08006759
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	73fb      	strb	r3, [r7, #15]
      break;
 8006744:	e02f      	b.n	80067a6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d024      	beq.n	800679c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006756:	e021      	b.n	800679c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006760:	d11e      	bne.n	80067a0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006766:	e01b      	b.n	80067a0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	2b02      	cmp	r3, #2
 800676c:	d902      	bls.n	8006774 <DMA_CheckFifoParam+0xb4>
 800676e:	2b03      	cmp	r3, #3
 8006770:	d003      	beq.n	800677a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006772:	e018      	b.n	80067a6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	73fb      	strb	r3, [r7, #15]
      break;
 8006778:	e015      	b.n	80067a6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00e      	beq.n	80067a4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	73fb      	strb	r3, [r7, #15]
      break;
 800678a:	e00b      	b.n	80067a4 <DMA_CheckFifoParam+0xe4>
      break;
 800678c:	bf00      	nop
 800678e:	e00a      	b.n	80067a6 <DMA_CheckFifoParam+0xe6>
      break;
 8006790:	bf00      	nop
 8006792:	e008      	b.n	80067a6 <DMA_CheckFifoParam+0xe6>
      break;
 8006794:	bf00      	nop
 8006796:	e006      	b.n	80067a6 <DMA_CheckFifoParam+0xe6>
      break;
 8006798:	bf00      	nop
 800679a:	e004      	b.n	80067a6 <DMA_CheckFifoParam+0xe6>
      break;
 800679c:	bf00      	nop
 800679e:	e002      	b.n	80067a6 <DMA_CheckFifoParam+0xe6>
      break;   
 80067a0:	bf00      	nop
 80067a2:	e000      	b.n	80067a6 <DMA_CheckFifoParam+0xe6>
      break;
 80067a4:	bf00      	nop
    }
  } 
  
  return status; 
 80067a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3714      	adds	r7, #20
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b086      	sub	sp, #24
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80067c6:	4b23      	ldr	r3, [pc, #140]	; (8006854 <HAL_FLASH_Program+0xa0>)
 80067c8:	7e1b      	ldrb	r3, [r3, #24]
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d101      	bne.n	80067d2 <HAL_FLASH_Program+0x1e>
 80067ce:	2302      	movs	r3, #2
 80067d0:	e03b      	b.n	800684a <HAL_FLASH_Program+0x96>
 80067d2:	4b20      	ldr	r3, [pc, #128]	; (8006854 <HAL_FLASH_Program+0xa0>)
 80067d4:	2201      	movs	r2, #1
 80067d6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80067d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80067dc:	f000 f87c 	bl	80068d8 <FLASH_WaitForLastOperation>
 80067e0:	4603      	mov	r3, r0
 80067e2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80067e4:	7dfb      	ldrb	r3, [r7, #23]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d12b      	bne.n	8006842 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d105      	bne.n	80067fc <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80067f0:	783b      	ldrb	r3, [r7, #0]
 80067f2:	4619      	mov	r1, r3
 80067f4:	68b8      	ldr	r0, [r7, #8]
 80067f6:	f000 f925 	bl	8006a44 <FLASH_Program_Byte>
 80067fa:	e016      	b.n	800682a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d105      	bne.n	800680e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8006802:	883b      	ldrh	r3, [r7, #0]
 8006804:	4619      	mov	r1, r3
 8006806:	68b8      	ldr	r0, [r7, #8]
 8006808:	f000 f8f8 	bl	80069fc <FLASH_Program_HalfWord>
 800680c:	e00d      	b.n	800682a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2b02      	cmp	r3, #2
 8006812:	d105      	bne.n	8006820 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	4619      	mov	r1, r3
 8006818:	68b8      	ldr	r0, [r7, #8]
 800681a:	f000 f8cd 	bl	80069b8 <FLASH_Program_Word>
 800681e:	e004      	b.n	800682a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8006820:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006824:	68b8      	ldr	r0, [r7, #8]
 8006826:	f000 f897 	bl	8006958 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800682a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800682e:	f000 f853 	bl	80068d8 <FLASH_WaitForLastOperation>
 8006832:	4603      	mov	r3, r0
 8006834:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8006836:	4b08      	ldr	r3, [pc, #32]	; (8006858 <HAL_FLASH_Program+0xa4>)
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	4a07      	ldr	r2, [pc, #28]	; (8006858 <HAL_FLASH_Program+0xa4>)
 800683c:	f023 0301 	bic.w	r3, r3, #1
 8006840:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006842:	4b04      	ldr	r3, [pc, #16]	; (8006854 <HAL_FLASH_Program+0xa0>)
 8006844:	2200      	movs	r2, #0
 8006846:	761a      	strb	r2, [r3, #24]
  
  return status;
 8006848:	7dfb      	ldrb	r3, [r7, #23]
}
 800684a:	4618      	mov	r0, r3
 800684c:	3718      	adds	r7, #24
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	20001620 	.word	0x20001620
 8006858:	40023c00 	.word	0x40023c00

0800685c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006862:	2300      	movs	r3, #0
 8006864:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006866:	4b0b      	ldr	r3, [pc, #44]	; (8006894 <HAL_FLASH_Unlock+0x38>)
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	2b00      	cmp	r3, #0
 800686c:	da0b      	bge.n	8006886 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800686e:	4b09      	ldr	r3, [pc, #36]	; (8006894 <HAL_FLASH_Unlock+0x38>)
 8006870:	4a09      	ldr	r2, [pc, #36]	; (8006898 <HAL_FLASH_Unlock+0x3c>)
 8006872:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006874:	4b07      	ldr	r3, [pc, #28]	; (8006894 <HAL_FLASH_Unlock+0x38>)
 8006876:	4a09      	ldr	r2, [pc, #36]	; (800689c <HAL_FLASH_Unlock+0x40>)
 8006878:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800687a:	4b06      	ldr	r3, [pc, #24]	; (8006894 <HAL_FLASH_Unlock+0x38>)
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	2b00      	cmp	r3, #0
 8006880:	da01      	bge.n	8006886 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8006886:	79fb      	ldrb	r3, [r7, #7]
}
 8006888:	4618      	mov	r0, r3
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr
 8006894:	40023c00 	.word	0x40023c00
 8006898:	45670123 	.word	0x45670123
 800689c:	cdef89ab 	.word	0xcdef89ab

080068a0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80068a0:	b480      	push	{r7}
 80068a2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80068a4:	4b05      	ldr	r3, [pc, #20]	; (80068bc <HAL_FLASH_Lock+0x1c>)
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	4a04      	ldr	r2, [pc, #16]	; (80068bc <HAL_FLASH_Lock+0x1c>)
 80068aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068ae:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr
 80068bc:	40023c00 	.word	0x40023c00

080068c0 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 80068c0:	b480      	push	{r7}
 80068c2:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80068c4:	4b03      	ldr	r3, [pc, #12]	; (80068d4 <HAL_FLASH_GetError+0x14>)
 80068c6:	69db      	ldr	r3, [r3, #28]
}  
 80068c8:	4618      	mov	r0, r3
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	20001620 	.word	0x20001620

080068d8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80068e0:	2300      	movs	r3, #0
 80068e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80068e4:	4b1a      	ldr	r3, [pc, #104]	; (8006950 <FLASH_WaitForLastOperation+0x78>)
 80068e6:	2200      	movs	r2, #0
 80068e8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80068ea:	f7fe fe8d 	bl	8005608 <HAL_GetTick>
 80068ee:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80068f0:	e010      	b.n	8006914 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068f8:	d00c      	beq.n	8006914 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d007      	beq.n	8006910 <FLASH_WaitForLastOperation+0x38>
 8006900:	f7fe fe82 	bl	8005608 <HAL_GetTick>
 8006904:	4602      	mov	r2, r0
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	429a      	cmp	r2, r3
 800690e:	d201      	bcs.n	8006914 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8006910:	2303      	movs	r3, #3
 8006912:	e019      	b.n	8006948 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006914:	4b0f      	ldr	r3, [pc, #60]	; (8006954 <FLASH_WaitForLastOperation+0x7c>)
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1e8      	bne.n	80068f2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8006920:	4b0c      	ldr	r3, [pc, #48]	; (8006954 <FLASH_WaitForLastOperation+0x7c>)
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	f003 0301 	and.w	r3, r3, #1
 8006928:	2b00      	cmp	r3, #0
 800692a:	d002      	beq.n	8006932 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800692c:	4b09      	ldr	r3, [pc, #36]	; (8006954 <FLASH_WaitForLastOperation+0x7c>)
 800692e:	2201      	movs	r2, #1
 8006930:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8006932:	4b08      	ldr	r3, [pc, #32]	; (8006954 <FLASH_WaitForLastOperation+0x7c>)
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800693a:	2b00      	cmp	r3, #0
 800693c:	d003      	beq.n	8006946 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800693e:	f000 f8a3 	bl	8006a88 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e000      	b.n	8006948 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8006946:	2300      	movs	r3, #0
  
}  
 8006948:	4618      	mov	r0, r3
 800694a:	3710      	adds	r7, #16
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	20001620 	.word	0x20001620
 8006954:	40023c00 	.word	0x40023c00

08006958 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006958:	b490      	push	{r4, r7}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006964:	4b13      	ldr	r3, [pc, #76]	; (80069b4 <FLASH_Program_DoubleWord+0x5c>)
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	4a12      	ldr	r2, [pc, #72]	; (80069b4 <FLASH_Program_DoubleWord+0x5c>)
 800696a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800696e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8006970:	4b10      	ldr	r3, [pc, #64]	; (80069b4 <FLASH_Program_DoubleWord+0x5c>)
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	4a0f      	ldr	r2, [pc, #60]	; (80069b4 <FLASH_Program_DoubleWord+0x5c>)
 8006976:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800697a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800697c:	4b0d      	ldr	r3, [pc, #52]	; (80069b4 <FLASH_Program_DoubleWord+0x5c>)
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	4a0c      	ldr	r2, [pc, #48]	; (80069b4 <FLASH_Program_DoubleWord+0x5c>)
 8006982:	f043 0301 	orr.w	r3, r3, #1
 8006986:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	683a      	ldr	r2, [r7, #0]
 800698c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800698e:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8006992:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006996:	f04f 0300 	mov.w	r3, #0
 800699a:	f04f 0400 	mov.w	r4, #0
 800699e:	0013      	movs	r3, r2
 80069a0:	2400      	movs	r4, #0
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	3204      	adds	r2, #4
 80069a6:	6013      	str	r3, [r2, #0]
}
 80069a8:	bf00      	nop
 80069aa:	3710      	adds	r7, #16
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bc90      	pop	{r4, r7}
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	40023c00 	.word	0x40023c00

080069b8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80069c2:	4b0d      	ldr	r3, [pc, #52]	; (80069f8 <FLASH_Program_Word+0x40>)
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	4a0c      	ldr	r2, [pc, #48]	; (80069f8 <FLASH_Program_Word+0x40>)
 80069c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069cc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80069ce:	4b0a      	ldr	r3, [pc, #40]	; (80069f8 <FLASH_Program_Word+0x40>)
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	4a09      	ldr	r2, [pc, #36]	; (80069f8 <FLASH_Program_Word+0x40>)
 80069d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80069d8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80069da:	4b07      	ldr	r3, [pc, #28]	; (80069f8 <FLASH_Program_Word+0x40>)
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	4a06      	ldr	r2, [pc, #24]	; (80069f8 <FLASH_Program_Word+0x40>)
 80069e0:	f043 0301 	orr.w	r3, r3, #1
 80069e4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	683a      	ldr	r2, [r7, #0]
 80069ea:	601a      	str	r2, [r3, #0]
}
 80069ec:	bf00      	nop
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr
 80069f8:	40023c00 	.word	0x40023c00

080069fc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	460b      	mov	r3, r1
 8006a06:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006a08:	4b0d      	ldr	r3, [pc, #52]	; (8006a40 <FLASH_Program_HalfWord+0x44>)
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	4a0c      	ldr	r2, [pc, #48]	; (8006a40 <FLASH_Program_HalfWord+0x44>)
 8006a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a12:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8006a14:	4b0a      	ldr	r3, [pc, #40]	; (8006a40 <FLASH_Program_HalfWord+0x44>)
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	4a09      	ldr	r2, [pc, #36]	; (8006a40 <FLASH_Program_HalfWord+0x44>)
 8006a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a1e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006a20:	4b07      	ldr	r3, [pc, #28]	; (8006a40 <FLASH_Program_HalfWord+0x44>)
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	4a06      	ldr	r2, [pc, #24]	; (8006a40 <FLASH_Program_HalfWord+0x44>)
 8006a26:	f043 0301 	orr.w	r3, r3, #1
 8006a2a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	887a      	ldrh	r2, [r7, #2]
 8006a30:	801a      	strh	r2, [r3, #0]
}
 8006a32:	bf00      	nop
 8006a34:	370c      	adds	r7, #12
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	40023c00 	.word	0x40023c00

08006a44 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006a50:	4b0c      	ldr	r3, [pc, #48]	; (8006a84 <FLASH_Program_Byte+0x40>)
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	4a0b      	ldr	r2, [pc, #44]	; (8006a84 <FLASH_Program_Byte+0x40>)
 8006a56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8006a5c:	4b09      	ldr	r3, [pc, #36]	; (8006a84 <FLASH_Program_Byte+0x40>)
 8006a5e:	4a09      	ldr	r2, [pc, #36]	; (8006a84 <FLASH_Program_Byte+0x40>)
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006a64:	4b07      	ldr	r3, [pc, #28]	; (8006a84 <FLASH_Program_Byte+0x40>)
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	4a06      	ldr	r2, [pc, #24]	; (8006a84 <FLASH_Program_Byte+0x40>)
 8006a6a:	f043 0301 	orr.w	r3, r3, #1
 8006a6e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	78fa      	ldrb	r2, [r7, #3]
 8006a74:	701a      	strb	r2, [r3, #0]
}
 8006a76:	bf00      	nop
 8006a78:	370c      	adds	r7, #12
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop
 8006a84:	40023c00 	.word	0x40023c00

08006a88 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8006a88:	b480      	push	{r7}
 8006a8a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8006a8c:	4b2f      	ldr	r3, [pc, #188]	; (8006b4c <FLASH_SetErrorCode+0xc4>)
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	f003 0310 	and.w	r3, r3, #16
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d008      	beq.n	8006aaa <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006a98:	4b2d      	ldr	r3, [pc, #180]	; (8006b50 <FLASH_SetErrorCode+0xc8>)
 8006a9a:	69db      	ldr	r3, [r3, #28]
 8006a9c:	f043 0310 	orr.w	r3, r3, #16
 8006aa0:	4a2b      	ldr	r2, [pc, #172]	; (8006b50 <FLASH_SetErrorCode+0xc8>)
 8006aa2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8006aa4:	4b29      	ldr	r3, [pc, #164]	; (8006b4c <FLASH_SetErrorCode+0xc4>)
 8006aa6:	2210      	movs	r2, #16
 8006aa8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8006aaa:	4b28      	ldr	r3, [pc, #160]	; (8006b4c <FLASH_SetErrorCode+0xc4>)
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	f003 0320 	and.w	r3, r3, #32
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d008      	beq.n	8006ac8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8006ab6:	4b26      	ldr	r3, [pc, #152]	; (8006b50 <FLASH_SetErrorCode+0xc8>)
 8006ab8:	69db      	ldr	r3, [r3, #28]
 8006aba:	f043 0308 	orr.w	r3, r3, #8
 8006abe:	4a24      	ldr	r2, [pc, #144]	; (8006b50 <FLASH_SetErrorCode+0xc8>)
 8006ac0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8006ac2:	4b22      	ldr	r3, [pc, #136]	; (8006b4c <FLASH_SetErrorCode+0xc4>)
 8006ac4:	2220      	movs	r2, #32
 8006ac6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8006ac8:	4b20      	ldr	r3, [pc, #128]	; (8006b4c <FLASH_SetErrorCode+0xc4>)
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d008      	beq.n	8006ae6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8006ad4:	4b1e      	ldr	r3, [pc, #120]	; (8006b50 <FLASH_SetErrorCode+0xc8>)
 8006ad6:	69db      	ldr	r3, [r3, #28]
 8006ad8:	f043 0304 	orr.w	r3, r3, #4
 8006adc:	4a1c      	ldr	r2, [pc, #112]	; (8006b50 <FLASH_SetErrorCode+0xc8>)
 8006ade:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8006ae0:	4b1a      	ldr	r3, [pc, #104]	; (8006b4c <FLASH_SetErrorCode+0xc4>)
 8006ae2:	2240      	movs	r2, #64	; 0x40
 8006ae4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8006ae6:	4b19      	ldr	r3, [pc, #100]	; (8006b4c <FLASH_SetErrorCode+0xc4>)
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d008      	beq.n	8006b04 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8006af2:	4b17      	ldr	r3, [pc, #92]	; (8006b50 <FLASH_SetErrorCode+0xc8>)
 8006af4:	69db      	ldr	r3, [r3, #28]
 8006af6:	f043 0302 	orr.w	r3, r3, #2
 8006afa:	4a15      	ldr	r2, [pc, #84]	; (8006b50 <FLASH_SetErrorCode+0xc8>)
 8006afc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8006afe:	4b13      	ldr	r3, [pc, #76]	; (8006b4c <FLASH_SetErrorCode+0xc4>)
 8006b00:	2280      	movs	r2, #128	; 0x80
 8006b02:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8006b04:	4b11      	ldr	r3, [pc, #68]	; (8006b4c <FLASH_SetErrorCode+0xc4>)
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d009      	beq.n	8006b24 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8006b10:	4b0f      	ldr	r3, [pc, #60]	; (8006b50 <FLASH_SetErrorCode+0xc8>)
 8006b12:	69db      	ldr	r3, [r3, #28]
 8006b14:	f043 0301 	orr.w	r3, r3, #1
 8006b18:	4a0d      	ldr	r2, [pc, #52]	; (8006b50 <FLASH_SetErrorCode+0xc8>)
 8006b1a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8006b1c:	4b0b      	ldr	r3, [pc, #44]	; (8006b4c <FLASH_SetErrorCode+0xc4>)
 8006b1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b22:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8006b24:	4b09      	ldr	r3, [pc, #36]	; (8006b4c <FLASH_SetErrorCode+0xc4>)
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	f003 0302 	and.w	r3, r3, #2
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d008      	beq.n	8006b42 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8006b30:	4b07      	ldr	r3, [pc, #28]	; (8006b50 <FLASH_SetErrorCode+0xc8>)
 8006b32:	69db      	ldr	r3, [r3, #28]
 8006b34:	f043 0320 	orr.w	r3, r3, #32
 8006b38:	4a05      	ldr	r2, [pc, #20]	; (8006b50 <FLASH_SetErrorCode+0xc8>)
 8006b3a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8006b3c:	4b03      	ldr	r3, [pc, #12]	; (8006b4c <FLASH_SetErrorCode+0xc4>)
 8006b3e:	2202      	movs	r2, #2
 8006b40:	60da      	str	r2, [r3, #12]
  }
}
 8006b42:	bf00      	nop
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr
 8006b4c:	40023c00 	.word	0x40023c00
 8006b50:	20001620 	.word	0x20001620

08006b54 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8006b62:	2300      	movs	r3, #0
 8006b64:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006b66:	4b31      	ldr	r3, [pc, #196]	; (8006c2c <HAL_FLASHEx_Erase+0xd8>)
 8006b68:	7e1b      	ldrb	r3, [r3, #24]
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d101      	bne.n	8006b72 <HAL_FLASHEx_Erase+0x1e>
 8006b6e:	2302      	movs	r3, #2
 8006b70:	e058      	b.n	8006c24 <HAL_FLASHEx_Erase+0xd0>
 8006b72:	4b2e      	ldr	r3, [pc, #184]	; (8006c2c <HAL_FLASHEx_Erase+0xd8>)
 8006b74:	2201      	movs	r2, #1
 8006b76:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006b78:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006b7c:	f7ff feac 	bl	80068d8 <FLASH_WaitForLastOperation>
 8006b80:	4603      	mov	r3, r0
 8006b82:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8006b84:	7bfb      	ldrb	r3, [r7, #15]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d148      	bne.n	8006c1c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b90:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d115      	bne.n	8006bc6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	b2da      	uxtb	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	4610      	mov	r0, r2
 8006ba8:	f000 f844 	bl	8006c34 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006bac:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006bb0:	f7ff fe92 	bl	80068d8 <FLASH_WaitForLastOperation>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8006bb8:	4b1d      	ldr	r3, [pc, #116]	; (8006c30 <HAL_FLASHEx_Erase+0xdc>)
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	4a1c      	ldr	r2, [pc, #112]	; (8006c30 <HAL_FLASHEx_Erase+0xdc>)
 8006bbe:	f023 0304 	bic.w	r3, r3, #4
 8006bc2:	6113      	str	r3, [r2, #16]
 8006bc4:	e028      	b.n	8006c18 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	60bb      	str	r3, [r7, #8]
 8006bcc:	e01c      	b.n	8006c08 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	68b8      	ldr	r0, [r7, #8]
 8006bd8:	f000 f850 	bl	8006c7c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006bdc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006be0:	f7ff fe7a 	bl	80068d8 <FLASH_WaitForLastOperation>
 8006be4:	4603      	mov	r3, r0
 8006be6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8006be8:	4b11      	ldr	r3, [pc, #68]	; (8006c30 <HAL_FLASHEx_Erase+0xdc>)
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	4a10      	ldr	r2, [pc, #64]	; (8006c30 <HAL_FLASHEx_Erase+0xdc>)
 8006bee:	f023 037a 	bic.w	r3, r3, #122	; 0x7a
 8006bf2:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8006bf4:	7bfb      	ldrb	r3, [r7, #15]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d003      	beq.n	8006c02 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	68ba      	ldr	r2, [r7, #8]
 8006bfe:	601a      	str	r2, [r3, #0]
          break;
 8006c00:	e00a      	b.n	8006c18 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	3301      	adds	r3, #1
 8006c06:	60bb      	str	r3, [r7, #8]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	68da      	ldr	r2, [r3, #12]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	4413      	add	r3, r2
 8006c12:	68ba      	ldr	r2, [r7, #8]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d3da      	bcc.n	8006bce <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8006c18:	f000 f878 	bl	8006d0c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006c1c:	4b03      	ldr	r3, [pc, #12]	; (8006c2c <HAL_FLASHEx_Erase+0xd8>)
 8006c1e:	2200      	movs	r2, #0
 8006c20:	761a      	strb	r2, [r3, #24]

  return status;
 8006c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3710      	adds	r7, #16
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	20001620 	.word	0x20001620
 8006c30:	40023c00 	.word	0x40023c00

08006c34 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	6039      	str	r1, [r7, #0]
 8006c3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006c40:	4b0d      	ldr	r3, [pc, #52]	; (8006c78 <FLASH_MassErase+0x44>)
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	4a0c      	ldr	r2, [pc, #48]	; (8006c78 <FLASH_MassErase+0x44>)
 8006c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c4a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8006c4c:	4b0a      	ldr	r3, [pc, #40]	; (8006c78 <FLASH_MassErase+0x44>)
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	4a09      	ldr	r2, [pc, #36]	; (8006c78 <FLASH_MassErase+0x44>)
 8006c52:	f043 0304 	orr.w	r3, r3, #4
 8006c56:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8006c58:	4b07      	ldr	r3, [pc, #28]	; (8006c78 <FLASH_MassErase+0x44>)
 8006c5a:	691a      	ldr	r2, [r3, #16]
 8006c5c:	79fb      	ldrb	r3, [r7, #7]
 8006c5e:	021b      	lsls	r3, r3, #8
 8006c60:	4313      	orrs	r3, r2
 8006c62:	4a05      	ldr	r2, [pc, #20]	; (8006c78 <FLASH_MassErase+0x44>)
 8006c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c68:	6113      	str	r3, [r2, #16]
}
 8006c6a:	bf00      	nop
 8006c6c:	370c      	adds	r7, #12
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	40023c00 	.word	0x40023c00

08006c7c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	460b      	mov	r3, r1
 8006c86:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8006c8c:	78fb      	ldrb	r3, [r7, #3]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d102      	bne.n	8006c98 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8006c92:	2300      	movs	r3, #0
 8006c94:	60fb      	str	r3, [r7, #12]
 8006c96:	e010      	b.n	8006cba <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8006c98:	78fb      	ldrb	r3, [r7, #3]
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d103      	bne.n	8006ca6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8006c9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ca2:	60fb      	str	r3, [r7, #12]
 8006ca4:	e009      	b.n	8006cba <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8006ca6:	78fb      	ldrb	r3, [r7, #3]
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	d103      	bne.n	8006cb4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8006cac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cb0:	60fb      	str	r3, [r7, #12]
 8006cb2:	e002      	b.n	8006cba <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8006cb4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006cb8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006cba:	4b13      	ldr	r3, [pc, #76]	; (8006d08 <FLASH_Erase_Sector+0x8c>)
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	4a12      	ldr	r2, [pc, #72]	; (8006d08 <FLASH_Erase_Sector+0x8c>)
 8006cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cc4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8006cc6:	4b10      	ldr	r3, [pc, #64]	; (8006d08 <FLASH_Erase_Sector+0x8c>)
 8006cc8:	691a      	ldr	r2, [r3, #16]
 8006cca:	490f      	ldr	r1, [pc, #60]	; (8006d08 <FLASH_Erase_Sector+0x8c>)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8006cd2:	4b0d      	ldr	r3, [pc, #52]	; (8006d08 <FLASH_Erase_Sector+0x8c>)
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	4a0c      	ldr	r2, [pc, #48]	; (8006d08 <FLASH_Erase_Sector+0x8c>)
 8006cd8:	f023 0378 	bic.w	r3, r3, #120	; 0x78
 8006cdc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8006cde:	4b0a      	ldr	r3, [pc, #40]	; (8006d08 <FLASH_Erase_Sector+0x8c>)
 8006ce0:	691a      	ldr	r2, [r3, #16]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	00db      	lsls	r3, r3, #3
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	4a07      	ldr	r2, [pc, #28]	; (8006d08 <FLASH_Erase_Sector+0x8c>)
 8006cea:	f043 0302 	orr.w	r3, r3, #2
 8006cee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8006cf0:	4b05      	ldr	r3, [pc, #20]	; (8006d08 <FLASH_Erase_Sector+0x8c>)
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	4a04      	ldr	r2, [pc, #16]	; (8006d08 <FLASH_Erase_Sector+0x8c>)
 8006cf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cfa:	6113      	str	r3, [r2, #16]
}
 8006cfc:	bf00      	nop
 8006cfe:	3714      	adds	r7, #20
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr
 8006d08:	40023c00 	.word	0x40023c00

08006d0c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8006d10:	4b20      	ldr	r3, [pc, #128]	; (8006d94 <FLASH_FlushCaches+0x88>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d017      	beq.n	8006d4c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006d1c:	4b1d      	ldr	r3, [pc, #116]	; (8006d94 <FLASH_FlushCaches+0x88>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a1c      	ldr	r2, [pc, #112]	; (8006d94 <FLASH_FlushCaches+0x88>)
 8006d22:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d26:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8006d28:	4b1a      	ldr	r3, [pc, #104]	; (8006d94 <FLASH_FlushCaches+0x88>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a19      	ldr	r2, [pc, #100]	; (8006d94 <FLASH_FlushCaches+0x88>)
 8006d2e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006d32:	6013      	str	r3, [r2, #0]
 8006d34:	4b17      	ldr	r3, [pc, #92]	; (8006d94 <FLASH_FlushCaches+0x88>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a16      	ldr	r2, [pc, #88]	; (8006d94 <FLASH_FlushCaches+0x88>)
 8006d3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d3e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006d40:	4b14      	ldr	r3, [pc, #80]	; (8006d94 <FLASH_FlushCaches+0x88>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a13      	ldr	r2, [pc, #76]	; (8006d94 <FLASH_FlushCaches+0x88>)
 8006d46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d4a:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8006d4c:	4b11      	ldr	r3, [pc, #68]	; (8006d94 <FLASH_FlushCaches+0x88>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d017      	beq.n	8006d88 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8006d58:	4b0e      	ldr	r3, [pc, #56]	; (8006d94 <FLASH_FlushCaches+0x88>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a0d      	ldr	r2, [pc, #52]	; (8006d94 <FLASH_FlushCaches+0x88>)
 8006d5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d62:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006d64:	4b0b      	ldr	r3, [pc, #44]	; (8006d94 <FLASH_FlushCaches+0x88>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a0a      	ldr	r2, [pc, #40]	; (8006d94 <FLASH_FlushCaches+0x88>)
 8006d6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006d6e:	6013      	str	r3, [r2, #0]
 8006d70:	4b08      	ldr	r3, [pc, #32]	; (8006d94 <FLASH_FlushCaches+0x88>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a07      	ldr	r2, [pc, #28]	; (8006d94 <FLASH_FlushCaches+0x88>)
 8006d76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d7a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006d7c:	4b05      	ldr	r3, [pc, #20]	; (8006d94 <FLASH_FlushCaches+0x88>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a04      	ldr	r2, [pc, #16]	; (8006d94 <FLASH_FlushCaches+0x88>)
 8006d82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d86:	6013      	str	r3, [r2, #0]
  }
}
 8006d88:	bf00      	nop
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	40023c00 	.word	0x40023c00

08006d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b089      	sub	sp, #36	; 0x24
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006da2:	2300      	movs	r3, #0
 8006da4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006da6:	2300      	movs	r3, #0
 8006da8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006daa:	2300      	movs	r3, #0
 8006dac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006dae:	2300      	movs	r3, #0
 8006db0:	61fb      	str	r3, [r7, #28]
 8006db2:	e165      	b.n	8007080 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006db4:	2201      	movs	r2, #1
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	697a      	ldr	r2, [r7, #20]
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006dc8:	693a      	ldr	r2, [r7, #16]
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	f040 8154 	bne.w	800707a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d00b      	beq.n	8006df2 <HAL_GPIO_Init+0x5a>
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d007      	beq.n	8006df2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006de6:	2b11      	cmp	r3, #17
 8006de8:	d003      	beq.n	8006df2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	2b12      	cmp	r3, #18
 8006df0:	d130      	bne.n	8006e54 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	005b      	lsls	r3, r3, #1
 8006dfc:	2203      	movs	r2, #3
 8006dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8006e02:	43db      	mvns	r3, r3
 8006e04:	69ba      	ldr	r2, [r7, #24]
 8006e06:	4013      	ands	r3, r2
 8006e08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	68da      	ldr	r2, [r3, #12]
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	005b      	lsls	r3, r3, #1
 8006e12:	fa02 f303 	lsl.w	r3, r2, r3
 8006e16:	69ba      	ldr	r2, [r7, #24]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	69ba      	ldr	r2, [r7, #24]
 8006e20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006e28:	2201      	movs	r2, #1
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e30:	43db      	mvns	r3, r3
 8006e32:	69ba      	ldr	r2, [r7, #24]
 8006e34:	4013      	ands	r3, r2
 8006e36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	091b      	lsrs	r3, r3, #4
 8006e3e:	f003 0201 	and.w	r2, r3, #1
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	fa02 f303 	lsl.w	r3, r2, r3
 8006e48:	69ba      	ldr	r2, [r7, #24]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	69ba      	ldr	r2, [r7, #24]
 8006e52:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	005b      	lsls	r3, r3, #1
 8006e5e:	2203      	movs	r2, #3
 8006e60:	fa02 f303 	lsl.w	r3, r2, r3
 8006e64:	43db      	mvns	r3, r3
 8006e66:	69ba      	ldr	r2, [r7, #24]
 8006e68:	4013      	ands	r3, r2
 8006e6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	689a      	ldr	r2, [r3, #8]
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	005b      	lsls	r3, r3, #1
 8006e74:	fa02 f303 	lsl.w	r3, r2, r3
 8006e78:	69ba      	ldr	r2, [r7, #24]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	69ba      	ldr	r2, [r7, #24]
 8006e82:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	2b02      	cmp	r3, #2
 8006e8a:	d003      	beq.n	8006e94 <HAL_GPIO_Init+0xfc>
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	2b12      	cmp	r3, #18
 8006e92:	d123      	bne.n	8006edc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	08da      	lsrs	r2, r3, #3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	3208      	adds	r2, #8
 8006e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	f003 0307 	and.w	r3, r3, #7
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	220f      	movs	r2, #15
 8006eac:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb0:	43db      	mvns	r3, r3
 8006eb2:	69ba      	ldr	r2, [r7, #24]
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	691a      	ldr	r2, [r3, #16]
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	f003 0307 	and.w	r3, r3, #7
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ec8:	69ba      	ldr	r2, [r7, #24]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	08da      	lsrs	r2, r3, #3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	3208      	adds	r2, #8
 8006ed6:	69b9      	ldr	r1, [r7, #24]
 8006ed8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	005b      	lsls	r3, r3, #1
 8006ee6:	2203      	movs	r2, #3
 8006ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8006eec:	43db      	mvns	r3, r3
 8006eee:	69ba      	ldr	r2, [r7, #24]
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	f003 0203 	and.w	r2, r3, #3
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	005b      	lsls	r3, r3, #1
 8006f00:	fa02 f303 	lsl.w	r3, r2, r3
 8006f04:	69ba      	ldr	r2, [r7, #24]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	69ba      	ldr	r2, [r7, #24]
 8006f0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f000 80ae 	beq.w	800707a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f1e:	2300      	movs	r3, #0
 8006f20:	60fb      	str	r3, [r7, #12]
 8006f22:	4b5c      	ldr	r3, [pc, #368]	; (8007094 <HAL_GPIO_Init+0x2fc>)
 8006f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f26:	4a5b      	ldr	r2, [pc, #364]	; (8007094 <HAL_GPIO_Init+0x2fc>)
 8006f28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8006f2e:	4b59      	ldr	r3, [pc, #356]	; (8007094 <HAL_GPIO_Init+0x2fc>)
 8006f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f36:	60fb      	str	r3, [r7, #12]
 8006f38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006f3a:	4a57      	ldr	r2, [pc, #348]	; (8007098 <HAL_GPIO_Init+0x300>)
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	089b      	lsrs	r3, r3, #2
 8006f40:	3302      	adds	r3, #2
 8006f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	f003 0303 	and.w	r3, r3, #3
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	220f      	movs	r2, #15
 8006f52:	fa02 f303 	lsl.w	r3, r2, r3
 8006f56:	43db      	mvns	r3, r3
 8006f58:	69ba      	ldr	r2, [r7, #24]
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a4e      	ldr	r2, [pc, #312]	; (800709c <HAL_GPIO_Init+0x304>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d025      	beq.n	8006fb2 <HAL_GPIO_Init+0x21a>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a4d      	ldr	r2, [pc, #308]	; (80070a0 <HAL_GPIO_Init+0x308>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d01f      	beq.n	8006fae <HAL_GPIO_Init+0x216>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a4c      	ldr	r2, [pc, #304]	; (80070a4 <HAL_GPIO_Init+0x30c>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d019      	beq.n	8006faa <HAL_GPIO_Init+0x212>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a4b      	ldr	r2, [pc, #300]	; (80070a8 <HAL_GPIO_Init+0x310>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d013      	beq.n	8006fa6 <HAL_GPIO_Init+0x20e>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a4a      	ldr	r2, [pc, #296]	; (80070ac <HAL_GPIO_Init+0x314>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d00d      	beq.n	8006fa2 <HAL_GPIO_Init+0x20a>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a49      	ldr	r2, [pc, #292]	; (80070b0 <HAL_GPIO_Init+0x318>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d007      	beq.n	8006f9e <HAL_GPIO_Init+0x206>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a48      	ldr	r2, [pc, #288]	; (80070b4 <HAL_GPIO_Init+0x31c>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d101      	bne.n	8006f9a <HAL_GPIO_Init+0x202>
 8006f96:	2306      	movs	r3, #6
 8006f98:	e00c      	b.n	8006fb4 <HAL_GPIO_Init+0x21c>
 8006f9a:	2307      	movs	r3, #7
 8006f9c:	e00a      	b.n	8006fb4 <HAL_GPIO_Init+0x21c>
 8006f9e:	2305      	movs	r3, #5
 8006fa0:	e008      	b.n	8006fb4 <HAL_GPIO_Init+0x21c>
 8006fa2:	2304      	movs	r3, #4
 8006fa4:	e006      	b.n	8006fb4 <HAL_GPIO_Init+0x21c>
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	e004      	b.n	8006fb4 <HAL_GPIO_Init+0x21c>
 8006faa:	2302      	movs	r3, #2
 8006fac:	e002      	b.n	8006fb4 <HAL_GPIO_Init+0x21c>
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e000      	b.n	8006fb4 <HAL_GPIO_Init+0x21c>
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	69fa      	ldr	r2, [r7, #28]
 8006fb6:	f002 0203 	and.w	r2, r2, #3
 8006fba:	0092      	lsls	r2, r2, #2
 8006fbc:	4093      	lsls	r3, r2
 8006fbe:	69ba      	ldr	r2, [r7, #24]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006fc4:	4934      	ldr	r1, [pc, #208]	; (8007098 <HAL_GPIO_Init+0x300>)
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	089b      	lsrs	r3, r3, #2
 8006fca:	3302      	adds	r3, #2
 8006fcc:	69ba      	ldr	r2, [r7, #24]
 8006fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006fd2:	4b39      	ldr	r3, [pc, #228]	; (80070b8 <HAL_GPIO_Init+0x320>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	43db      	mvns	r3, r3
 8006fdc:	69ba      	ldr	r2, [r7, #24]
 8006fde:	4013      	ands	r3, r2
 8006fe0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d003      	beq.n	8006ff6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8006fee:	69ba      	ldr	r2, [r7, #24]
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006ff6:	4a30      	ldr	r2, [pc, #192]	; (80070b8 <HAL_GPIO_Init+0x320>)
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006ffc:	4b2e      	ldr	r3, [pc, #184]	; (80070b8 <HAL_GPIO_Init+0x320>)
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	43db      	mvns	r3, r3
 8007006:	69ba      	ldr	r2, [r7, #24]
 8007008:	4013      	ands	r3, r2
 800700a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007014:	2b00      	cmp	r3, #0
 8007016:	d003      	beq.n	8007020 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8007018:	69ba      	ldr	r2, [r7, #24]
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	4313      	orrs	r3, r2
 800701e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007020:	4a25      	ldr	r2, [pc, #148]	; (80070b8 <HAL_GPIO_Init+0x320>)
 8007022:	69bb      	ldr	r3, [r7, #24]
 8007024:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007026:	4b24      	ldr	r3, [pc, #144]	; (80070b8 <HAL_GPIO_Init+0x320>)
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	43db      	mvns	r3, r3
 8007030:	69ba      	ldr	r2, [r7, #24]
 8007032:	4013      	ands	r3, r2
 8007034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800703e:	2b00      	cmp	r3, #0
 8007040:	d003      	beq.n	800704a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8007042:	69ba      	ldr	r2, [r7, #24]
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	4313      	orrs	r3, r2
 8007048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800704a:	4a1b      	ldr	r2, [pc, #108]	; (80070b8 <HAL_GPIO_Init+0x320>)
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007050:	4b19      	ldr	r3, [pc, #100]	; (80070b8 <HAL_GPIO_Init+0x320>)
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	43db      	mvns	r3, r3
 800705a:	69ba      	ldr	r2, [r7, #24]
 800705c:	4013      	ands	r3, r2
 800705e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d003      	beq.n	8007074 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800706c:	69ba      	ldr	r2, [r7, #24]
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	4313      	orrs	r3, r2
 8007072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007074:	4a10      	ldr	r2, [pc, #64]	; (80070b8 <HAL_GPIO_Init+0x320>)
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	3301      	adds	r3, #1
 800707e:	61fb      	str	r3, [r7, #28]
 8007080:	69fb      	ldr	r3, [r7, #28]
 8007082:	2b0f      	cmp	r3, #15
 8007084:	f67f ae96 	bls.w	8006db4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007088:	bf00      	nop
 800708a:	3724      	adds	r7, #36	; 0x24
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr
 8007094:	40023800 	.word	0x40023800
 8007098:	40013800 	.word	0x40013800
 800709c:	40020000 	.word	0x40020000
 80070a0:	40020400 	.word	0x40020400
 80070a4:	40020800 	.word	0x40020800
 80070a8:	40020c00 	.word	0x40020c00
 80070ac:	40021000 	.word	0x40021000
 80070b0:	40021400 	.word	0x40021400
 80070b4:	40021800 	.word	0x40021800
 80070b8:	40013c00 	.word	0x40013c00

080070bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	460b      	mov	r3, r1
 80070c6:	807b      	strh	r3, [r7, #2]
 80070c8:	4613      	mov	r3, r2
 80070ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80070cc:	787b      	ldrb	r3, [r7, #1]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d003      	beq.n	80070da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80070d2:	887a      	ldrh	r2, [r7, #2]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80070d8:	e003      	b.n	80070e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80070da:	887b      	ldrh	r3, [r7, #2]
 80070dc:	041a      	lsls	r2, r3, #16
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	619a      	str	r2, [r3, #24]
}
 80070e2:	bf00      	nop
 80070e4:	370c      	adds	r7, #12
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr

080070ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80070ee:	b480      	push	{r7}
 80070f0:	b083      	sub	sp, #12
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	460b      	mov	r3, r1
 80070f8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	695a      	ldr	r2, [r3, #20]
 80070fe:	887b      	ldrh	r3, [r7, #2]
 8007100:	401a      	ands	r2, r3
 8007102:	887b      	ldrh	r3, [r7, #2]
 8007104:	429a      	cmp	r2, r3
 8007106:	d104      	bne.n	8007112 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007108:	887b      	ldrh	r3, [r7, #2]
 800710a:	041a      	lsls	r2, r3, #16
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8007110:	e002      	b.n	8007118 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8007112:	887a      	ldrh	r2, [r7, #2]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	619a      	str	r2, [r3, #24]
}
 8007118:	bf00      	nop
 800711a:	370c      	adds	r7, #12
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d101      	bne.n	8007136 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e11f      	b.n	8007376 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800713c:	b2db      	uxtb	r3, r3
 800713e:	2b00      	cmp	r3, #0
 8007140:	d106      	bne.n	8007150 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f7fe f85c 	bl	8005208 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2224      	movs	r2, #36	; 0x24
 8007154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f022 0201 	bic.w	r2, r2, #1
 8007166:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007176:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007186:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007188:	f001 faee 	bl	8008768 <HAL_RCC_GetPCLK1Freq>
 800718c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	4a7b      	ldr	r2, [pc, #492]	; (8007380 <HAL_I2C_Init+0x25c>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d807      	bhi.n	80071a8 <HAL_I2C_Init+0x84>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	4a7a      	ldr	r2, [pc, #488]	; (8007384 <HAL_I2C_Init+0x260>)
 800719c:	4293      	cmp	r3, r2
 800719e:	bf94      	ite	ls
 80071a0:	2301      	movls	r3, #1
 80071a2:	2300      	movhi	r3, #0
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	e006      	b.n	80071b6 <HAL_I2C_Init+0x92>
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	4a77      	ldr	r2, [pc, #476]	; (8007388 <HAL_I2C_Init+0x264>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	bf94      	ite	ls
 80071b0:	2301      	movls	r3, #1
 80071b2:	2300      	movhi	r3, #0
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d001      	beq.n	80071be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e0db      	b.n	8007376 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	4a72      	ldr	r2, [pc, #456]	; (800738c <HAL_I2C_Init+0x268>)
 80071c2:	fba2 2303 	umull	r2, r3, r2, r3
 80071c6:	0c9b      	lsrs	r3, r3, #18
 80071c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	68ba      	ldr	r2, [r7, #8]
 80071da:	430a      	orrs	r2, r1
 80071dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	6a1b      	ldr	r3, [r3, #32]
 80071e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	4a64      	ldr	r2, [pc, #400]	; (8007380 <HAL_I2C_Init+0x25c>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d802      	bhi.n	80071f8 <HAL_I2C_Init+0xd4>
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	3301      	adds	r3, #1
 80071f6:	e009      	b.n	800720c <HAL_I2C_Init+0xe8>
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80071fe:	fb02 f303 	mul.w	r3, r2, r3
 8007202:	4a63      	ldr	r2, [pc, #396]	; (8007390 <HAL_I2C_Init+0x26c>)
 8007204:	fba2 2303 	umull	r2, r3, r2, r3
 8007208:	099b      	lsrs	r3, r3, #6
 800720a:	3301      	adds	r3, #1
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	6812      	ldr	r2, [r2, #0]
 8007210:	430b      	orrs	r3, r1
 8007212:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	69db      	ldr	r3, [r3, #28]
 800721a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800721e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	4956      	ldr	r1, [pc, #344]	; (8007380 <HAL_I2C_Init+0x25c>)
 8007228:	428b      	cmp	r3, r1
 800722a:	d80d      	bhi.n	8007248 <HAL_I2C_Init+0x124>
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	1e59      	subs	r1, r3, #1
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	005b      	lsls	r3, r3, #1
 8007236:	fbb1 f3f3 	udiv	r3, r1, r3
 800723a:	3301      	adds	r3, #1
 800723c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007240:	2b04      	cmp	r3, #4
 8007242:	bf38      	it	cc
 8007244:	2304      	movcc	r3, #4
 8007246:	e04f      	b.n	80072e8 <HAL_I2C_Init+0x1c4>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d111      	bne.n	8007274 <HAL_I2C_Init+0x150>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	1e58      	subs	r0, r3, #1
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6859      	ldr	r1, [r3, #4]
 8007258:	460b      	mov	r3, r1
 800725a:	005b      	lsls	r3, r3, #1
 800725c:	440b      	add	r3, r1
 800725e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007262:	3301      	adds	r3, #1
 8007264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007268:	2b00      	cmp	r3, #0
 800726a:	bf0c      	ite	eq
 800726c:	2301      	moveq	r3, #1
 800726e:	2300      	movne	r3, #0
 8007270:	b2db      	uxtb	r3, r3
 8007272:	e012      	b.n	800729a <HAL_I2C_Init+0x176>
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	1e58      	subs	r0, r3, #1
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6859      	ldr	r1, [r3, #4]
 800727c:	460b      	mov	r3, r1
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	440b      	add	r3, r1
 8007282:	0099      	lsls	r1, r3, #2
 8007284:	440b      	add	r3, r1
 8007286:	fbb0 f3f3 	udiv	r3, r0, r3
 800728a:	3301      	adds	r3, #1
 800728c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007290:	2b00      	cmp	r3, #0
 8007292:	bf0c      	ite	eq
 8007294:	2301      	moveq	r3, #1
 8007296:	2300      	movne	r3, #0
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	d001      	beq.n	80072a2 <HAL_I2C_Init+0x17e>
 800729e:	2301      	movs	r3, #1
 80072a0:	e022      	b.n	80072e8 <HAL_I2C_Init+0x1c4>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d10e      	bne.n	80072c8 <HAL_I2C_Init+0x1a4>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	1e58      	subs	r0, r3, #1
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6859      	ldr	r1, [r3, #4]
 80072b2:	460b      	mov	r3, r1
 80072b4:	005b      	lsls	r3, r3, #1
 80072b6:	440b      	add	r3, r1
 80072b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80072bc:	3301      	adds	r3, #1
 80072be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072c6:	e00f      	b.n	80072e8 <HAL_I2C_Init+0x1c4>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	1e58      	subs	r0, r3, #1
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6859      	ldr	r1, [r3, #4]
 80072d0:	460b      	mov	r3, r1
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	440b      	add	r3, r1
 80072d6:	0099      	lsls	r1, r3, #2
 80072d8:	440b      	add	r3, r1
 80072da:	fbb0 f3f3 	udiv	r3, r0, r3
 80072de:	3301      	adds	r3, #1
 80072e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80072e8:	6879      	ldr	r1, [r7, #4]
 80072ea:	6809      	ldr	r1, [r1, #0]
 80072ec:	4313      	orrs	r3, r2
 80072ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	69da      	ldr	r2, [r3, #28]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a1b      	ldr	r3, [r3, #32]
 8007302:	431a      	orrs	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	430a      	orrs	r2, r1
 800730a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007316:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	6911      	ldr	r1, [r2, #16]
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	68d2      	ldr	r2, [r2, #12]
 8007322:	4311      	orrs	r1, r2
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	6812      	ldr	r2, [r2, #0]
 8007328:	430b      	orrs	r3, r1
 800732a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	695a      	ldr	r2, [r3, #20]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	699b      	ldr	r3, [r3, #24]
 800733e:	431a      	orrs	r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	430a      	orrs	r2, r1
 8007346:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f042 0201 	orr.w	r2, r2, #1
 8007356:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2220      	movs	r2, #32
 8007362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	3710      	adds	r7, #16
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	000186a0 	.word	0x000186a0
 8007384:	001e847f 	.word	0x001e847f
 8007388:	003d08ff 	.word	0x003d08ff
 800738c:	431bde83 	.word	0x431bde83
 8007390:	10624dd3 	.word	0x10624dd3

08007394 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b088      	sub	sp, #32
 8007398:	af02      	add	r7, sp, #8
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	4608      	mov	r0, r1
 800739e:	4611      	mov	r1, r2
 80073a0:	461a      	mov	r2, r3
 80073a2:	4603      	mov	r3, r0
 80073a4:	817b      	strh	r3, [r7, #10]
 80073a6:	460b      	mov	r3, r1
 80073a8:	813b      	strh	r3, [r7, #8]
 80073aa:	4613      	mov	r3, r2
 80073ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80073ae:	f7fe f92b 	bl	8005608 <HAL_GetTick>
 80073b2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	2b20      	cmp	r3, #32
 80073be:	f040 80d9 	bne.w	8007574 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	2319      	movs	r3, #25
 80073c8:	2201      	movs	r2, #1
 80073ca:	496d      	ldr	r1, [pc, #436]	; (8007580 <HAL_I2C_Mem_Write+0x1ec>)
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	f000 fda9 	bl	8007f24 <I2C_WaitOnFlagUntilTimeout>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d001      	beq.n	80073dc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80073d8:	2302      	movs	r3, #2
 80073da:	e0cc      	b.n	8007576 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d101      	bne.n	80073ea <HAL_I2C_Mem_Write+0x56>
 80073e6:	2302      	movs	r3, #2
 80073e8:	e0c5      	b.n	8007576 <HAL_I2C_Mem_Write+0x1e2>
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2201      	movs	r2, #1
 80073ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 0301 	and.w	r3, r3, #1
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d007      	beq.n	8007410 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f042 0201 	orr.w	r2, r2, #1
 800740e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800741e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2221      	movs	r2, #33	; 0x21
 8007424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2240      	movs	r2, #64	; 0x40
 800742c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	6a3a      	ldr	r2, [r7, #32]
 800743a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007440:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007446:	b29a      	uxth	r2, r3
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	4a4d      	ldr	r2, [pc, #308]	; (8007584 <HAL_I2C_Mem_Write+0x1f0>)
 8007450:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007452:	88f8      	ldrh	r0, [r7, #6]
 8007454:	893a      	ldrh	r2, [r7, #8]
 8007456:	8979      	ldrh	r1, [r7, #10]
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	9301      	str	r3, [sp, #4]
 800745c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745e:	9300      	str	r3, [sp, #0]
 8007460:	4603      	mov	r3, r0
 8007462:	68f8      	ldr	r0, [r7, #12]
 8007464:	f000 fbe4 	bl	8007c30 <I2C_RequestMemoryWrite>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d052      	beq.n	8007514 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e081      	b.n	8007576 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007472:	697a      	ldr	r2, [r7, #20]
 8007474:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f000 fe2a 	bl	80080d0 <I2C_WaitOnTXEFlagUntilTimeout>
 800747c:	4603      	mov	r3, r0
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00d      	beq.n	800749e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007486:	2b04      	cmp	r3, #4
 8007488:	d107      	bne.n	800749a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007498:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	e06b      	b.n	8007576 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a2:	781a      	ldrb	r2, [r3, #0]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ae:	1c5a      	adds	r2, r3, #1
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074b8:	3b01      	subs	r3, #1
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	3b01      	subs	r3, #1
 80074c8:	b29a      	uxth	r2, r3
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	695b      	ldr	r3, [r3, #20]
 80074d4:	f003 0304 	and.w	r3, r3, #4
 80074d8:	2b04      	cmp	r3, #4
 80074da:	d11b      	bne.n	8007514 <HAL_I2C_Mem_Write+0x180>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d017      	beq.n	8007514 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e8:	781a      	ldrb	r2, [r3, #0]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f4:	1c5a      	adds	r2, r3, #1
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074fe:	3b01      	subs	r3, #1
 8007500:	b29a      	uxth	r2, r3
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800750a:	b29b      	uxth	r3, r3
 800750c:	3b01      	subs	r3, #1
 800750e:	b29a      	uxth	r2, r3
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1aa      	bne.n	8007472 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800751c:	697a      	ldr	r2, [r7, #20]
 800751e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	f000 fe16 	bl	8008152 <I2C_WaitOnBTFFlagUntilTimeout>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d00d      	beq.n	8007548 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007530:	2b04      	cmp	r3, #4
 8007532:	d107      	bne.n	8007544 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007542:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	e016      	b.n	8007576 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007556:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2220      	movs	r2, #32
 800755c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2200      	movs	r2, #0
 8007564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2200      	movs	r2, #0
 800756c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007570:	2300      	movs	r3, #0
 8007572:	e000      	b.n	8007576 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007574:	2302      	movs	r3, #2
  }
}
 8007576:	4618      	mov	r0, r3
 8007578:	3718      	adds	r7, #24
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	00100002 	.word	0x00100002
 8007584:	ffff0000 	.word	0xffff0000

08007588 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b08c      	sub	sp, #48	; 0x30
 800758c:	af02      	add	r7, sp, #8
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	4608      	mov	r0, r1
 8007592:	4611      	mov	r1, r2
 8007594:	461a      	mov	r2, r3
 8007596:	4603      	mov	r3, r0
 8007598:	817b      	strh	r3, [r7, #10]
 800759a:	460b      	mov	r3, r1
 800759c:	813b      	strh	r3, [r7, #8]
 800759e:	4613      	mov	r3, r2
 80075a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80075a2:	f7fe f831 	bl	8005608 <HAL_GetTick>
 80075a6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	2b20      	cmp	r3, #32
 80075b2:	f040 8208 	bne.w	80079c6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80075b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b8:	9300      	str	r3, [sp, #0]
 80075ba:	2319      	movs	r3, #25
 80075bc:	2201      	movs	r2, #1
 80075be:	497b      	ldr	r1, [pc, #492]	; (80077ac <HAL_I2C_Mem_Read+0x224>)
 80075c0:	68f8      	ldr	r0, [r7, #12]
 80075c2:	f000 fcaf 	bl	8007f24 <I2C_WaitOnFlagUntilTimeout>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d001      	beq.n	80075d0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80075cc:	2302      	movs	r3, #2
 80075ce:	e1fb      	b.n	80079c8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d101      	bne.n	80075de <HAL_I2C_Mem_Read+0x56>
 80075da:	2302      	movs	r3, #2
 80075dc:	e1f4      	b.n	80079c8 <HAL_I2C_Mem_Read+0x440>
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2201      	movs	r2, #1
 80075e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 0301 	and.w	r3, r3, #1
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d007      	beq.n	8007604 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f042 0201 	orr.w	r2, r2, #1
 8007602:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007612:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2222      	movs	r2, #34	; 0x22
 8007618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2240      	movs	r2, #64	; 0x40
 8007620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2200      	movs	r2, #0
 8007628:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800762e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007634:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800763a:	b29a      	uxth	r2, r3
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	4a5b      	ldr	r2, [pc, #364]	; (80077b0 <HAL_I2C_Mem_Read+0x228>)
 8007644:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007646:	88f8      	ldrh	r0, [r7, #6]
 8007648:	893a      	ldrh	r2, [r7, #8]
 800764a:	8979      	ldrh	r1, [r7, #10]
 800764c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764e:	9301      	str	r3, [sp, #4]
 8007650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007652:	9300      	str	r3, [sp, #0]
 8007654:	4603      	mov	r3, r0
 8007656:	68f8      	ldr	r0, [r7, #12]
 8007658:	f000 fb7e 	bl	8007d58 <I2C_RequestMemoryRead>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d001      	beq.n	8007666 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	e1b0      	b.n	80079c8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800766a:	2b00      	cmp	r3, #0
 800766c:	d113      	bne.n	8007696 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800766e:	2300      	movs	r3, #0
 8007670:	623b      	str	r3, [r7, #32]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	695b      	ldr	r3, [r3, #20]
 8007678:	623b      	str	r3, [r7, #32]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	699b      	ldr	r3, [r3, #24]
 8007680:	623b      	str	r3, [r7, #32]
 8007682:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007692:	601a      	str	r2, [r3, #0]
 8007694:	e184      	b.n	80079a0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800769a:	2b01      	cmp	r3, #1
 800769c:	d11b      	bne.n	80076d6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076ae:	2300      	movs	r3, #0
 80076b0:	61fb      	str	r3, [r7, #28]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	695b      	ldr	r3, [r3, #20]
 80076b8:	61fb      	str	r3, [r7, #28]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	699b      	ldr	r3, [r3, #24]
 80076c0:	61fb      	str	r3, [r7, #28]
 80076c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076d2:	601a      	str	r2, [r3, #0]
 80076d4:	e164      	b.n	80079a0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d11b      	bne.n	8007716 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076fe:	2300      	movs	r3, #0
 8007700:	61bb      	str	r3, [r7, #24]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	695b      	ldr	r3, [r3, #20]
 8007708:	61bb      	str	r3, [r7, #24]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	699b      	ldr	r3, [r3, #24]
 8007710:	61bb      	str	r3, [r7, #24]
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	e144      	b.n	80079a0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007716:	2300      	movs	r3, #0
 8007718:	617b      	str	r3, [r7, #20]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	695b      	ldr	r3, [r3, #20]
 8007720:	617b      	str	r3, [r7, #20]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	699b      	ldr	r3, [r3, #24]
 8007728:	617b      	str	r3, [r7, #20]
 800772a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800772c:	e138      	b.n	80079a0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007732:	2b03      	cmp	r3, #3
 8007734:	f200 80f1 	bhi.w	800791a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800773c:	2b01      	cmp	r3, #1
 800773e:	d123      	bne.n	8007788 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007742:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007744:	68f8      	ldr	r0, [r7, #12]
 8007746:	f000 fd45 	bl	80081d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d001      	beq.n	8007754 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	e139      	b.n	80079c8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	691a      	ldr	r2, [r3, #16]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775e:	b2d2      	uxtb	r2, r2
 8007760:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007766:	1c5a      	adds	r2, r3, #1
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007770:	3b01      	subs	r3, #1
 8007772:	b29a      	uxth	r2, r3
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800777c:	b29b      	uxth	r3, r3
 800777e:	3b01      	subs	r3, #1
 8007780:	b29a      	uxth	r2, r3
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007786:	e10b      	b.n	80079a0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800778c:	2b02      	cmp	r3, #2
 800778e:	d14e      	bne.n	800782e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007792:	9300      	str	r3, [sp, #0]
 8007794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007796:	2200      	movs	r2, #0
 8007798:	4906      	ldr	r1, [pc, #24]	; (80077b4 <HAL_I2C_Mem_Read+0x22c>)
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f000 fbc2 	bl	8007f24 <I2C_WaitOnFlagUntilTimeout>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d008      	beq.n	80077b8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e10e      	b.n	80079c8 <HAL_I2C_Mem_Read+0x440>
 80077aa:	bf00      	nop
 80077ac:	00100002 	.word	0x00100002
 80077b0:	ffff0000 	.word	0xffff0000
 80077b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	691a      	ldr	r2, [r3, #16]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d2:	b2d2      	uxtb	r2, r2
 80077d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077da:	1c5a      	adds	r2, r3, #1
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077e4:	3b01      	subs	r3, #1
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	3b01      	subs	r3, #1
 80077f4:	b29a      	uxth	r2, r3
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	691a      	ldr	r2, [r3, #16]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007804:	b2d2      	uxtb	r2, r2
 8007806:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780c:	1c5a      	adds	r2, r3, #1
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007816:	3b01      	subs	r3, #1
 8007818:	b29a      	uxth	r2, r3
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007822:	b29b      	uxth	r3, r3
 8007824:	3b01      	subs	r3, #1
 8007826:	b29a      	uxth	r2, r3
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800782c:	e0b8      	b.n	80079a0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800782e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007830:	9300      	str	r3, [sp, #0]
 8007832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007834:	2200      	movs	r2, #0
 8007836:	4966      	ldr	r1, [pc, #408]	; (80079d0 <HAL_I2C_Mem_Read+0x448>)
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	f000 fb73 	bl	8007f24 <I2C_WaitOnFlagUntilTimeout>
 800783e:	4603      	mov	r3, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d001      	beq.n	8007848 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	e0bf      	b.n	80079c8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007856:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	691a      	ldr	r2, [r3, #16]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007862:	b2d2      	uxtb	r2, r2
 8007864:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786a:	1c5a      	adds	r2, r3, #1
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007874:	3b01      	subs	r3, #1
 8007876:	b29a      	uxth	r2, r3
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007880:	b29b      	uxth	r3, r3
 8007882:	3b01      	subs	r3, #1
 8007884:	b29a      	uxth	r2, r3
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800788a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788c:	9300      	str	r3, [sp, #0]
 800788e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007890:	2200      	movs	r2, #0
 8007892:	494f      	ldr	r1, [pc, #316]	; (80079d0 <HAL_I2C_Mem_Read+0x448>)
 8007894:	68f8      	ldr	r0, [r7, #12]
 8007896:	f000 fb45 	bl	8007f24 <I2C_WaitOnFlagUntilTimeout>
 800789a:	4603      	mov	r3, r0
 800789c:	2b00      	cmp	r3, #0
 800789e:	d001      	beq.n	80078a4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80078a0:	2301      	movs	r3, #1
 80078a2:	e091      	b.n	80079c8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	691a      	ldr	r2, [r3, #16]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078be:	b2d2      	uxtb	r2, r2
 80078c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c6:	1c5a      	adds	r2, r3, #1
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078d0:	3b01      	subs	r3, #1
 80078d2:	b29a      	uxth	r2, r3
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078dc:	b29b      	uxth	r3, r3
 80078de:	3b01      	subs	r3, #1
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	691a      	ldr	r2, [r3, #16]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f0:	b2d2      	uxtb	r2, r2
 80078f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f8:	1c5a      	adds	r2, r3, #1
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007902:	3b01      	subs	r3, #1
 8007904:	b29a      	uxth	r2, r3
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800790e:	b29b      	uxth	r3, r3
 8007910:	3b01      	subs	r3, #1
 8007912:	b29a      	uxth	r2, r3
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007918:	e042      	b.n	80079a0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800791a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800791c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800791e:	68f8      	ldr	r0, [r7, #12]
 8007920:	f000 fc58 	bl	80081d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d001      	beq.n	800792e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e04c      	b.n	80079c8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	691a      	ldr	r2, [r3, #16]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007938:	b2d2      	uxtb	r2, r2
 800793a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007940:	1c5a      	adds	r2, r3, #1
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800794a:	3b01      	subs	r3, #1
 800794c:	b29a      	uxth	r2, r3
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007956:	b29b      	uxth	r3, r3
 8007958:	3b01      	subs	r3, #1
 800795a:	b29a      	uxth	r2, r3
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	695b      	ldr	r3, [r3, #20]
 8007966:	f003 0304 	and.w	r3, r3, #4
 800796a:	2b04      	cmp	r3, #4
 800796c:	d118      	bne.n	80079a0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	691a      	ldr	r2, [r3, #16]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007978:	b2d2      	uxtb	r2, r2
 800797a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007980:	1c5a      	adds	r2, r3, #1
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800798a:	3b01      	subs	r3, #1
 800798c:	b29a      	uxth	r2, r3
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007996:	b29b      	uxth	r3, r3
 8007998:	3b01      	subs	r3, #1
 800799a:	b29a      	uxth	r2, r3
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f47f aec2 	bne.w	800772e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2220      	movs	r2, #32
 80079ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80079c2:	2300      	movs	r3, #0
 80079c4:	e000      	b.n	80079c8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80079c6:	2302      	movs	r3, #2
  }
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3728      	adds	r7, #40	; 0x28
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	00010004 	.word	0x00010004

080079d4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b08a      	sub	sp, #40	; 0x28
 80079d8:	af02      	add	r7, sp, #8
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	607a      	str	r2, [r7, #4]
 80079de:	603b      	str	r3, [r7, #0]
 80079e0:	460b      	mov	r3, r1
 80079e2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80079e4:	f7fd fe10 	bl	8005608 <HAL_GetTick>
 80079e8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80079ea:	2301      	movs	r3, #1
 80079ec:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	2b20      	cmp	r3, #32
 80079f8:	f040 8110 	bne.w	8007c1c <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	9300      	str	r3, [sp, #0]
 8007a00:	2319      	movs	r3, #25
 8007a02:	2201      	movs	r2, #1
 8007a04:	4988      	ldr	r1, [pc, #544]	; (8007c28 <HAL_I2C_IsDeviceReady+0x254>)
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	f000 fa8c 	bl	8007f24 <I2C_WaitOnFlagUntilTimeout>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d001      	beq.n	8007a16 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8007a12:	2302      	movs	r3, #2
 8007a14:	e103      	b.n	8007c1e <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d101      	bne.n	8007a24 <HAL_I2C_IsDeviceReady+0x50>
 8007a20:	2302      	movs	r3, #2
 8007a22:	e0fc      	b.n	8007c1e <HAL_I2C_IsDeviceReady+0x24a>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f003 0301 	and.w	r3, r3, #1
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d007      	beq.n	8007a4a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f042 0201 	orr.w	r2, r2, #1
 8007a48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2224      	movs	r2, #36	; 0x24
 8007a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2200      	movs	r2, #0
 8007a66:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	4a70      	ldr	r2, [pc, #448]	; (8007c2c <HAL_I2C_IsDeviceReady+0x258>)
 8007a6c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a7c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	9300      	str	r3, [sp, #0]
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	f000 fa4a 	bl	8007f24 <I2C_WaitOnFlagUntilTimeout>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00c      	beq.n	8007ab0 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d003      	beq.n	8007aac <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007aaa:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8007aac:	2303      	movs	r3, #3
 8007aae:	e0b6      	b.n	8007c1e <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007ab0:	897b      	ldrh	r3, [r7, #10]
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007abe:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8007ac0:	f7fd fda2 	bl	8005608 <HAL_GetTick>
 8007ac4:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	695b      	ldr	r3, [r3, #20]
 8007acc:	f003 0302 	and.w	r3, r3, #2
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	bf0c      	ite	eq
 8007ad4:	2301      	moveq	r3, #1
 8007ad6:	2300      	movne	r3, #0
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	695b      	ldr	r3, [r3, #20]
 8007ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ae6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007aea:	bf0c      	ite	eq
 8007aec:	2301      	moveq	r3, #1
 8007aee:	2300      	movne	r3, #0
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007af4:	e025      	b.n	8007b42 <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007af6:	f7fd fd87 	bl	8005608 <HAL_GetTick>
 8007afa:	4602      	mov	r2, r0
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	1ad3      	subs	r3, r2, r3
 8007b00:	683a      	ldr	r2, [r7, #0]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d302      	bcc.n	8007b0c <HAL_I2C_IsDeviceReady+0x138>
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d103      	bne.n	8007b14 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	22a0      	movs	r2, #160	; 0xa0
 8007b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	695b      	ldr	r3, [r3, #20]
 8007b1a:	f003 0302 	and.w	r3, r3, #2
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	bf0c      	ite	eq
 8007b22:	2301      	moveq	r3, #1
 8007b24:	2300      	movne	r3, #0
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	695b      	ldr	r3, [r3, #20]
 8007b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b38:	bf0c      	ite	eq
 8007b3a:	2301      	moveq	r3, #1
 8007b3c:	2300      	movne	r3, #0
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	2ba0      	cmp	r3, #160	; 0xa0
 8007b4c:	d005      	beq.n	8007b5a <HAL_I2C_IsDeviceReady+0x186>
 8007b4e:	7dfb      	ldrb	r3, [r7, #23]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d102      	bne.n	8007b5a <HAL_I2C_IsDeviceReady+0x186>
 8007b54:	7dbb      	ldrb	r3, [r7, #22]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d0cd      	beq.n	8007af6 <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2220      	movs	r2, #32
 8007b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	695b      	ldr	r3, [r3, #20]
 8007b68:	f003 0302 	and.w	r3, r3, #2
 8007b6c:	2b02      	cmp	r3, #2
 8007b6e:	d129      	bne.n	8007bc4 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b7e:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b80:	2300      	movs	r3, #0
 8007b82:	613b      	str	r3, [r7, #16]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	695b      	ldr	r3, [r3, #20]
 8007b8a:	613b      	str	r3, [r7, #16]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	699b      	ldr	r3, [r3, #24]
 8007b92:	613b      	str	r3, [r7, #16]
 8007b94:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	9300      	str	r3, [sp, #0]
 8007b9a:	2319      	movs	r3, #25
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	4922      	ldr	r1, [pc, #136]	; (8007c28 <HAL_I2C_IsDeviceReady+0x254>)
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f000 f9bf 	bl	8007f24 <I2C_WaitOnFlagUntilTimeout>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d001      	beq.n	8007bb0 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	e036      	b.n	8007c1e <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2220      	movs	r2, #32
 8007bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	e02c      	b.n	8007c1e <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bd2:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007bdc:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	9300      	str	r3, [sp, #0]
 8007be2:	2319      	movs	r3, #25
 8007be4:	2201      	movs	r2, #1
 8007be6:	4910      	ldr	r1, [pc, #64]	; (8007c28 <HAL_I2C_IsDeviceReady+0x254>)
 8007be8:	68f8      	ldr	r0, [r7, #12]
 8007bea:	f000 f99b 	bl	8007f24 <I2C_WaitOnFlagUntilTimeout>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d001      	beq.n	8007bf8 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e012      	b.n	8007c1e <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8007bfe:	69ba      	ldr	r2, [r7, #24]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	f4ff af33 	bcc.w	8007a6e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2220      	movs	r2, #32
 8007c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2200      	movs	r2, #0
 8007c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	e000      	b.n	8007c1e <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8007c1c:	2302      	movs	r3, #2
  }
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3720      	adds	r7, #32
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	00100002 	.word	0x00100002
 8007c2c:	ffff0000 	.word	0xffff0000

08007c30 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b088      	sub	sp, #32
 8007c34:	af02      	add	r7, sp, #8
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	4608      	mov	r0, r1
 8007c3a:	4611      	mov	r1, r2
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	4603      	mov	r3, r0
 8007c40:	817b      	strh	r3, [r7, #10]
 8007c42:	460b      	mov	r3, r1
 8007c44:	813b      	strh	r3, [r7, #8]
 8007c46:	4613      	mov	r3, r2
 8007c48:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5c:	9300      	str	r3, [sp, #0]
 8007c5e:	6a3b      	ldr	r3, [r7, #32]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f000 f95c 	bl	8007f24 <I2C_WaitOnFlagUntilTimeout>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00c      	beq.n	8007c8c <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d003      	beq.n	8007c88 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007c88:	2303      	movs	r3, #3
 8007c8a:	e05f      	b.n	8007d4c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007c8c:	897b      	ldrh	r3, [r7, #10]
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	461a      	mov	r2, r3
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007c9a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9e:	6a3a      	ldr	r2, [r7, #32]
 8007ca0:	492c      	ldr	r1, [pc, #176]	; (8007d54 <I2C_RequestMemoryWrite+0x124>)
 8007ca2:	68f8      	ldr	r0, [r7, #12]
 8007ca4:	f000 f995 	bl	8007fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d001      	beq.n	8007cb2 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e04c      	b.n	8007d4c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	617b      	str	r3, [r7, #20]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	695b      	ldr	r3, [r3, #20]
 8007cbc:	617b      	str	r3, [r7, #20]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	699b      	ldr	r3, [r3, #24]
 8007cc4:	617b      	str	r3, [r7, #20]
 8007cc6:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cca:	6a39      	ldr	r1, [r7, #32]
 8007ccc:	68f8      	ldr	r0, [r7, #12]
 8007cce:	f000 f9ff 	bl	80080d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00d      	beq.n	8007cf4 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cdc:	2b04      	cmp	r3, #4
 8007cde:	d107      	bne.n	8007cf0 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e02b      	b.n	8007d4c <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007cf4:	88fb      	ldrh	r3, [r7, #6]
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d105      	bne.n	8007d06 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007cfa:	893b      	ldrh	r3, [r7, #8]
 8007cfc:	b2da      	uxtb	r2, r3
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	611a      	str	r2, [r3, #16]
 8007d04:	e021      	b.n	8007d4a <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007d06:	893b      	ldrh	r3, [r7, #8]
 8007d08:	0a1b      	lsrs	r3, r3, #8
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	b2da      	uxtb	r2, r3
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d16:	6a39      	ldr	r1, [r7, #32]
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f000 f9d9 	bl	80080d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d00d      	beq.n	8007d40 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d28:	2b04      	cmp	r3, #4
 8007d2a:	d107      	bne.n	8007d3c <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d3a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e005      	b.n	8007d4c <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007d40:	893b      	ldrh	r3, [r7, #8]
 8007d42:	b2da      	uxtb	r2, r3
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007d4a:	2300      	movs	r3, #0
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3718      	adds	r7, #24
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	00010002 	.word	0x00010002

08007d58 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b088      	sub	sp, #32
 8007d5c:	af02      	add	r7, sp, #8
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	4608      	mov	r0, r1
 8007d62:	4611      	mov	r1, r2
 8007d64:	461a      	mov	r2, r3
 8007d66:	4603      	mov	r3, r0
 8007d68:	817b      	strh	r3, [r7, #10]
 8007d6a:	460b      	mov	r3, r1
 8007d6c:	813b      	strh	r3, [r7, #8]
 8007d6e:	4613      	mov	r3, r2
 8007d70:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d80:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d94:	9300      	str	r3, [sp, #0]
 8007d96:	6a3b      	ldr	r3, [r7, #32]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007d9e:	68f8      	ldr	r0, [r7, #12]
 8007da0:	f000 f8c0 	bl	8007f24 <I2C_WaitOnFlagUntilTimeout>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d00c      	beq.n	8007dc4 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d003      	beq.n	8007dc0 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	e0a9      	b.n	8007f18 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007dc4:	897b      	ldrh	r3, [r7, #10]
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	461a      	mov	r2, r3
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007dd2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd6:	6a3a      	ldr	r2, [r7, #32]
 8007dd8:	4951      	ldr	r1, [pc, #324]	; (8007f20 <I2C_RequestMemoryRead+0x1c8>)
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	f000 f8f9 	bl	8007fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d001      	beq.n	8007dea <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	e096      	b.n	8007f18 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007dea:	2300      	movs	r3, #0
 8007dec:	617b      	str	r3, [r7, #20]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	695b      	ldr	r3, [r3, #20]
 8007df4:	617b      	str	r3, [r7, #20]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	699b      	ldr	r3, [r3, #24]
 8007dfc:	617b      	str	r3, [r7, #20]
 8007dfe:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e02:	6a39      	ldr	r1, [r7, #32]
 8007e04:	68f8      	ldr	r0, [r7, #12]
 8007e06:	f000 f963 	bl	80080d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d00d      	beq.n	8007e2c <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e14:	2b04      	cmp	r3, #4
 8007e16:	d107      	bne.n	8007e28 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e26:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e075      	b.n	8007f18 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007e2c:	88fb      	ldrh	r3, [r7, #6]
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d105      	bne.n	8007e3e <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007e32:	893b      	ldrh	r3, [r7, #8]
 8007e34:	b2da      	uxtb	r2, r3
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	611a      	str	r2, [r3, #16]
 8007e3c:	e021      	b.n	8007e82 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007e3e:	893b      	ldrh	r3, [r7, #8]
 8007e40:	0a1b      	lsrs	r3, r3, #8
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	b2da      	uxtb	r2, r3
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e4e:	6a39      	ldr	r1, [r7, #32]
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f000 f93d 	bl	80080d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d00d      	beq.n	8007e78 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e60:	2b04      	cmp	r3, #4
 8007e62:	d107      	bne.n	8007e74 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e72:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007e74:	2301      	movs	r3, #1
 8007e76:	e04f      	b.n	8007f18 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007e78:	893b      	ldrh	r3, [r7, #8]
 8007e7a:	b2da      	uxtb	r2, r3
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e84:	6a39      	ldr	r1, [r7, #32]
 8007e86:	68f8      	ldr	r0, [r7, #12]
 8007e88:	f000 f922 	bl	80080d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00d      	beq.n	8007eae <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e96:	2b04      	cmp	r3, #4
 8007e98:	d107      	bne.n	8007eaa <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ea8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e034      	b.n	8007f18 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ebc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec0:	9300      	str	r3, [sp, #0]
 8007ec2:	6a3b      	ldr	r3, [r7, #32]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007eca:	68f8      	ldr	r0, [r7, #12]
 8007ecc:	f000 f82a 	bl	8007f24 <I2C_WaitOnFlagUntilTimeout>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d00c      	beq.n	8007ef0 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d003      	beq.n	8007eec <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007eea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007eec:	2303      	movs	r3, #3
 8007eee:	e013      	b.n	8007f18 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007ef0:	897b      	ldrh	r3, [r7, #10]
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	f043 0301 	orr.w	r3, r3, #1
 8007ef8:	b2da      	uxtb	r2, r3
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f02:	6a3a      	ldr	r2, [r7, #32]
 8007f04:	4906      	ldr	r1, [pc, #24]	; (8007f20 <I2C_RequestMemoryRead+0x1c8>)
 8007f06:	68f8      	ldr	r0, [r7, #12]
 8007f08:	f000 f863 	bl	8007fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d001      	beq.n	8007f16 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e000      	b.n	8007f18 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8007f16:	2300      	movs	r3, #0
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3718      	adds	r7, #24
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	00010002 	.word	0x00010002

08007f24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	603b      	str	r3, [r7, #0]
 8007f30:	4613      	mov	r3, r2
 8007f32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007f34:	e025      	b.n	8007f82 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f3c:	d021      	beq.n	8007f82 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f3e:	f7fd fb63 	bl	8005608 <HAL_GetTick>
 8007f42:	4602      	mov	r2, r0
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	1ad3      	subs	r3, r2, r3
 8007f48:	683a      	ldr	r2, [r7, #0]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d302      	bcc.n	8007f54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d116      	bne.n	8007f82 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2200      	movs	r2, #0
 8007f58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2220      	movs	r2, #32
 8007f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f6e:	f043 0220 	orr.w	r2, r3, #32
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e023      	b.n	8007fca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	0c1b      	lsrs	r3, r3, #16
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d10d      	bne.n	8007fa8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	695b      	ldr	r3, [r3, #20]
 8007f92:	43da      	mvns	r2, r3
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	4013      	ands	r3, r2
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	bf0c      	ite	eq
 8007f9e:	2301      	moveq	r3, #1
 8007fa0:	2300      	movne	r3, #0
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	e00c      	b.n	8007fc2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	699b      	ldr	r3, [r3, #24]
 8007fae:	43da      	mvns	r2, r3
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	4013      	ands	r3, r2
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	bf0c      	ite	eq
 8007fba:	2301      	moveq	r3, #1
 8007fbc:	2300      	movne	r3, #0
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	79fb      	ldrb	r3, [r7, #7]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d0b6      	beq.n	8007f36 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007fc8:	2300      	movs	r3, #0
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}

08007fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007fd2:	b580      	push	{r7, lr}
 8007fd4:	b084      	sub	sp, #16
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	60f8      	str	r0, [r7, #12]
 8007fda:	60b9      	str	r1, [r7, #8]
 8007fdc:	607a      	str	r2, [r7, #4]
 8007fde:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007fe0:	e051      	b.n	8008086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	695b      	ldr	r3, [r3, #20]
 8007fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ff0:	d123      	bne.n	800803a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008000:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800800a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2200      	movs	r2, #0
 8008010:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2220      	movs	r2, #32
 8008016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2200      	movs	r2, #0
 800801e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008026:	f043 0204 	orr.w	r2, r3, #4
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2200      	movs	r2, #0
 8008032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	e046      	b.n	80080c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008040:	d021      	beq.n	8008086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008042:	f7fd fae1 	bl	8005608 <HAL_GetTick>
 8008046:	4602      	mov	r2, r0
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	1ad3      	subs	r3, r2, r3
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	429a      	cmp	r2, r3
 8008050:	d302      	bcc.n	8008058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d116      	bne.n	8008086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2200      	movs	r2, #0
 800805c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2220      	movs	r2, #32
 8008062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2200      	movs	r2, #0
 800806a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008072:	f043 0220 	orr.w	r2, r3, #32
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2200      	movs	r2, #0
 800807e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	e020      	b.n	80080c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	0c1b      	lsrs	r3, r3, #16
 800808a:	b2db      	uxtb	r3, r3
 800808c:	2b01      	cmp	r3, #1
 800808e:	d10c      	bne.n	80080aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	695b      	ldr	r3, [r3, #20]
 8008096:	43da      	mvns	r2, r3
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	4013      	ands	r3, r2
 800809c:	b29b      	uxth	r3, r3
 800809e:	2b00      	cmp	r3, #0
 80080a0:	bf14      	ite	ne
 80080a2:	2301      	movne	r3, #1
 80080a4:	2300      	moveq	r3, #0
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	e00b      	b.n	80080c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	699b      	ldr	r3, [r3, #24]
 80080b0:	43da      	mvns	r2, r3
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	4013      	ands	r3, r2
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	bf14      	ite	ne
 80080bc:	2301      	movne	r3, #1
 80080be:	2300      	moveq	r3, #0
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d18d      	bne.n	8007fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3710      	adds	r7, #16
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80080dc:	e02d      	b.n	800813a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80080de:	68f8      	ldr	r0, [r7, #12]
 80080e0:	f000 f8ce 	bl	8008280 <I2C_IsAcknowledgeFailed>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d001      	beq.n	80080ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80080ea:	2301      	movs	r3, #1
 80080ec:	e02d      	b.n	800814a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080f4:	d021      	beq.n	800813a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080f6:	f7fd fa87 	bl	8005608 <HAL_GetTick>
 80080fa:	4602      	mov	r2, r0
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	1ad3      	subs	r3, r2, r3
 8008100:	68ba      	ldr	r2, [r7, #8]
 8008102:	429a      	cmp	r2, r3
 8008104:	d302      	bcc.n	800810c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d116      	bne.n	800813a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2200      	movs	r2, #0
 8008110:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2220      	movs	r2, #32
 8008116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2200      	movs	r2, #0
 800811e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008126:	f043 0220 	orr.w	r2, r3, #32
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2200      	movs	r2, #0
 8008132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008136:	2301      	movs	r3, #1
 8008138:	e007      	b.n	800814a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	695b      	ldr	r3, [r3, #20]
 8008140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008144:	2b80      	cmp	r3, #128	; 0x80
 8008146:	d1ca      	bne.n	80080de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008148:	2300      	movs	r3, #0
}
 800814a:	4618      	mov	r0, r3
 800814c:	3710      	adds	r7, #16
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008152:	b580      	push	{r7, lr}
 8008154:	b084      	sub	sp, #16
 8008156:	af00      	add	r7, sp, #0
 8008158:	60f8      	str	r0, [r7, #12]
 800815a:	60b9      	str	r1, [r7, #8]
 800815c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800815e:	e02d      	b.n	80081bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008160:	68f8      	ldr	r0, [r7, #12]
 8008162:	f000 f88d 	bl	8008280 <I2C_IsAcknowledgeFailed>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d001      	beq.n	8008170 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	e02d      	b.n	80081cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008176:	d021      	beq.n	80081bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008178:	f7fd fa46 	bl	8005608 <HAL_GetTick>
 800817c:	4602      	mov	r2, r0
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	1ad3      	subs	r3, r2, r3
 8008182:	68ba      	ldr	r2, [r7, #8]
 8008184:	429a      	cmp	r2, r3
 8008186:	d302      	bcc.n	800818e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d116      	bne.n	80081bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2200      	movs	r2, #0
 8008192:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2220      	movs	r2, #32
 8008198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2200      	movs	r2, #0
 80081a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a8:	f043 0220 	orr.w	r2, r3, #32
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	e007      	b.n	80081cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	695b      	ldr	r3, [r3, #20]
 80081c2:	f003 0304 	and.w	r3, r3, #4
 80081c6:	2b04      	cmp	r3, #4
 80081c8:	d1ca      	bne.n	8008160 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80081ca:	2300      	movs	r3, #0
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3710      	adds	r7, #16
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80081e0:	e042      	b.n	8008268 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	695b      	ldr	r3, [r3, #20]
 80081e8:	f003 0310 	and.w	r3, r3, #16
 80081ec:	2b10      	cmp	r3, #16
 80081ee:	d119      	bne.n	8008224 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f06f 0210 	mvn.w	r2, #16
 80081f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2200      	movs	r2, #0
 80081fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2220      	movs	r2, #32
 8008204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2200      	movs	r2, #0
 800820c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2200      	movs	r2, #0
 800821c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008220:	2301      	movs	r3, #1
 8008222:	e029      	b.n	8008278 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008224:	f7fd f9f0 	bl	8005608 <HAL_GetTick>
 8008228:	4602      	mov	r2, r0
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	1ad3      	subs	r3, r2, r3
 800822e:	68ba      	ldr	r2, [r7, #8]
 8008230:	429a      	cmp	r2, r3
 8008232:	d302      	bcc.n	800823a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d116      	bne.n	8008268 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2200      	movs	r2, #0
 800823e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2220      	movs	r2, #32
 8008244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2200      	movs	r2, #0
 800824c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008254:	f043 0220 	orr.w	r2, r3, #32
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2200      	movs	r2, #0
 8008260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	e007      	b.n	8008278 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	695b      	ldr	r3, [r3, #20]
 800826e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008272:	2b40      	cmp	r3, #64	; 0x40
 8008274:	d1b5      	bne.n	80081e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008276:	2300      	movs	r3, #0
}
 8008278:	4618      	mov	r0, r3
 800827a:	3710      	adds	r7, #16
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	695b      	ldr	r3, [r3, #20]
 800828e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008296:	d11b      	bne.n	80082d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80082a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2220      	movs	r2, #32
 80082ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2200      	movs	r2, #0
 80082b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082bc:	f043 0204 	orr.w	r2, r3, #4
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80082cc:	2301      	movs	r3, #1
 80082ce:	e000      	b.n	80082d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	370c      	adds	r7, #12
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr

080082de <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80082de:	b480      	push	{r7}
 80082e0:	b083      	sub	sp, #12
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
 80082e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	2b20      	cmp	r3, #32
 80082f2:	d129      	bne.n	8008348 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2224      	movs	r2, #36	; 0x24
 80082f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f022 0201 	bic.w	r2, r2, #1
 800830a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f022 0210 	bic.w	r2, r2, #16
 800831a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	683a      	ldr	r2, [r7, #0]
 8008328:	430a      	orrs	r2, r1
 800832a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f042 0201 	orr.w	r2, r2, #1
 800833a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2220      	movs	r2, #32
 8008340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008344:	2300      	movs	r3, #0
 8008346:	e000      	b.n	800834a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8008348:	2302      	movs	r3, #2
  }
}
 800834a:	4618      	mov	r0, r3
 800834c:	370c      	adds	r7, #12
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr

08008356 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008356:	b480      	push	{r7}
 8008358:	b085      	sub	sp, #20
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
 800835e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8008360:	2300      	movs	r3, #0
 8008362:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800836a:	b2db      	uxtb	r3, r3
 800836c:	2b20      	cmp	r3, #32
 800836e:	d12a      	bne.n	80083c6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2224      	movs	r2, #36	; 0x24
 8008374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f022 0201 	bic.w	r2, r2, #1
 8008386:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8008390:	89fb      	ldrh	r3, [r7, #14]
 8008392:	f023 030f 	bic.w	r3, r3, #15
 8008396:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	b29a      	uxth	r2, r3
 800839c:	89fb      	ldrh	r3, [r7, #14]
 800839e:	4313      	orrs	r3, r2
 80083a0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	89fa      	ldrh	r2, [r7, #14]
 80083a8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f042 0201 	orr.w	r2, r2, #1
 80083b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2220      	movs	r2, #32
 80083be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80083c2:	2300      	movs	r3, #0
 80083c4:	e000      	b.n	80083c8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80083c6:	2302      	movs	r3, #2
  }
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3714      	adds	r7, #20
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr

080083d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d101      	bne.n	80083e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	e0cc      	b.n	8008582 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80083e8:	4b68      	ldr	r3, [pc, #416]	; (800858c <HAL_RCC_ClockConfig+0x1b8>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f003 030f 	and.w	r3, r3, #15
 80083f0:	683a      	ldr	r2, [r7, #0]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d90c      	bls.n	8008410 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083f6:	4b65      	ldr	r3, [pc, #404]	; (800858c <HAL_RCC_ClockConfig+0x1b8>)
 80083f8:	683a      	ldr	r2, [r7, #0]
 80083fa:	b2d2      	uxtb	r2, r2
 80083fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083fe:	4b63      	ldr	r3, [pc, #396]	; (800858c <HAL_RCC_ClockConfig+0x1b8>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f003 030f 	and.w	r3, r3, #15
 8008406:	683a      	ldr	r2, [r7, #0]
 8008408:	429a      	cmp	r2, r3
 800840a:	d001      	beq.n	8008410 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800840c:	2301      	movs	r3, #1
 800840e:	e0b8      	b.n	8008582 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f003 0302 	and.w	r3, r3, #2
 8008418:	2b00      	cmp	r3, #0
 800841a:	d020      	beq.n	800845e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f003 0304 	and.w	r3, r3, #4
 8008424:	2b00      	cmp	r3, #0
 8008426:	d005      	beq.n	8008434 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008428:	4b59      	ldr	r3, [pc, #356]	; (8008590 <HAL_RCC_ClockConfig+0x1bc>)
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	4a58      	ldr	r2, [pc, #352]	; (8008590 <HAL_RCC_ClockConfig+0x1bc>)
 800842e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008432:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 0308 	and.w	r3, r3, #8
 800843c:	2b00      	cmp	r3, #0
 800843e:	d005      	beq.n	800844c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008440:	4b53      	ldr	r3, [pc, #332]	; (8008590 <HAL_RCC_ClockConfig+0x1bc>)
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	4a52      	ldr	r2, [pc, #328]	; (8008590 <HAL_RCC_ClockConfig+0x1bc>)
 8008446:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800844a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800844c:	4b50      	ldr	r3, [pc, #320]	; (8008590 <HAL_RCC_ClockConfig+0x1bc>)
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	494d      	ldr	r1, [pc, #308]	; (8008590 <HAL_RCC_ClockConfig+0x1bc>)
 800845a:	4313      	orrs	r3, r2
 800845c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f003 0301 	and.w	r3, r3, #1
 8008466:	2b00      	cmp	r3, #0
 8008468:	d044      	beq.n	80084f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	2b01      	cmp	r3, #1
 8008470:	d107      	bne.n	8008482 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008472:	4b47      	ldr	r3, [pc, #284]	; (8008590 <HAL_RCC_ClockConfig+0x1bc>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800847a:	2b00      	cmp	r3, #0
 800847c:	d119      	bne.n	80084b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	e07f      	b.n	8008582 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	2b02      	cmp	r3, #2
 8008488:	d003      	beq.n	8008492 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800848e:	2b03      	cmp	r3, #3
 8008490:	d107      	bne.n	80084a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008492:	4b3f      	ldr	r3, [pc, #252]	; (8008590 <HAL_RCC_ClockConfig+0x1bc>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800849a:	2b00      	cmp	r3, #0
 800849c:	d109      	bne.n	80084b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e06f      	b.n	8008582 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084a2:	4b3b      	ldr	r3, [pc, #236]	; (8008590 <HAL_RCC_ClockConfig+0x1bc>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f003 0302 	and.w	r3, r3, #2
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d101      	bne.n	80084b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	e067      	b.n	8008582 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80084b2:	4b37      	ldr	r3, [pc, #220]	; (8008590 <HAL_RCC_ClockConfig+0x1bc>)
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	f023 0203 	bic.w	r2, r3, #3
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	4934      	ldr	r1, [pc, #208]	; (8008590 <HAL_RCC_ClockConfig+0x1bc>)
 80084c0:	4313      	orrs	r3, r2
 80084c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80084c4:	f7fd f8a0 	bl	8005608 <HAL_GetTick>
 80084c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084ca:	e00a      	b.n	80084e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084cc:	f7fd f89c 	bl	8005608 <HAL_GetTick>
 80084d0:	4602      	mov	r2, r0
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	1ad3      	subs	r3, r2, r3
 80084d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80084da:	4293      	cmp	r3, r2
 80084dc:	d901      	bls.n	80084e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80084de:	2303      	movs	r3, #3
 80084e0:	e04f      	b.n	8008582 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084e2:	4b2b      	ldr	r3, [pc, #172]	; (8008590 <HAL_RCC_ClockConfig+0x1bc>)
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	f003 020c 	and.w	r2, r3, #12
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d1eb      	bne.n	80084cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80084f4:	4b25      	ldr	r3, [pc, #148]	; (800858c <HAL_RCC_ClockConfig+0x1b8>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f003 030f 	and.w	r3, r3, #15
 80084fc:	683a      	ldr	r2, [r7, #0]
 80084fe:	429a      	cmp	r2, r3
 8008500:	d20c      	bcs.n	800851c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008502:	4b22      	ldr	r3, [pc, #136]	; (800858c <HAL_RCC_ClockConfig+0x1b8>)
 8008504:	683a      	ldr	r2, [r7, #0]
 8008506:	b2d2      	uxtb	r2, r2
 8008508:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800850a:	4b20      	ldr	r3, [pc, #128]	; (800858c <HAL_RCC_ClockConfig+0x1b8>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 030f 	and.w	r3, r3, #15
 8008512:	683a      	ldr	r2, [r7, #0]
 8008514:	429a      	cmp	r2, r3
 8008516:	d001      	beq.n	800851c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	e032      	b.n	8008582 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 0304 	and.w	r3, r3, #4
 8008524:	2b00      	cmp	r3, #0
 8008526:	d008      	beq.n	800853a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008528:	4b19      	ldr	r3, [pc, #100]	; (8008590 <HAL_RCC_ClockConfig+0x1bc>)
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	68db      	ldr	r3, [r3, #12]
 8008534:	4916      	ldr	r1, [pc, #88]	; (8008590 <HAL_RCC_ClockConfig+0x1bc>)
 8008536:	4313      	orrs	r3, r2
 8008538:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f003 0308 	and.w	r3, r3, #8
 8008542:	2b00      	cmp	r3, #0
 8008544:	d009      	beq.n	800855a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008546:	4b12      	ldr	r3, [pc, #72]	; (8008590 <HAL_RCC_ClockConfig+0x1bc>)
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	691b      	ldr	r3, [r3, #16]
 8008552:	00db      	lsls	r3, r3, #3
 8008554:	490e      	ldr	r1, [pc, #56]	; (8008590 <HAL_RCC_ClockConfig+0x1bc>)
 8008556:	4313      	orrs	r3, r2
 8008558:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800855a:	f000 f821 	bl	80085a0 <HAL_RCC_GetSysClockFreq>
 800855e:	4601      	mov	r1, r0
 8008560:	4b0b      	ldr	r3, [pc, #44]	; (8008590 <HAL_RCC_ClockConfig+0x1bc>)
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	091b      	lsrs	r3, r3, #4
 8008566:	f003 030f 	and.w	r3, r3, #15
 800856a:	4a0a      	ldr	r2, [pc, #40]	; (8008594 <HAL_RCC_ClockConfig+0x1c0>)
 800856c:	5cd3      	ldrb	r3, [r2, r3]
 800856e:	fa21 f303 	lsr.w	r3, r1, r3
 8008572:	4a09      	ldr	r2, [pc, #36]	; (8008598 <HAL_RCC_ClockConfig+0x1c4>)
 8008574:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008576:	4b09      	ldr	r3, [pc, #36]	; (800859c <HAL_RCC_ClockConfig+0x1c8>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4618      	mov	r0, r3
 800857c:	f7fd f800 	bl	8005580 <HAL_InitTick>

  return HAL_OK;
 8008580:	2300      	movs	r3, #0
}
 8008582:	4618      	mov	r0, r3
 8008584:	3710      	adds	r7, #16
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	40023c00 	.word	0x40023c00
 8008590:	40023800 	.word	0x40023800
 8008594:	0800ad14 	.word	0x0800ad14
 8008598:	20000024 	.word	0x20000024
 800859c:	20000028 	.word	0x20000028

080085a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80085a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80085a6:	2300      	movs	r3, #0
 80085a8:	607b      	str	r3, [r7, #4]
 80085aa:	2300      	movs	r3, #0
 80085ac:	60fb      	str	r3, [r7, #12]
 80085ae:	2300      	movs	r3, #0
 80085b0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80085b2:	2300      	movs	r3, #0
 80085b4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80085b6:	4b63      	ldr	r3, [pc, #396]	; (8008744 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	f003 030c 	and.w	r3, r3, #12
 80085be:	2b04      	cmp	r3, #4
 80085c0:	d007      	beq.n	80085d2 <HAL_RCC_GetSysClockFreq+0x32>
 80085c2:	2b08      	cmp	r3, #8
 80085c4:	d008      	beq.n	80085d8 <HAL_RCC_GetSysClockFreq+0x38>
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	f040 80b4 	bne.w	8008734 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80085cc:	4b5e      	ldr	r3, [pc, #376]	; (8008748 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80085ce:	60bb      	str	r3, [r7, #8]
       break;
 80085d0:	e0b3      	b.n	800873a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80085d2:	4b5e      	ldr	r3, [pc, #376]	; (800874c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80085d4:	60bb      	str	r3, [r7, #8]
      break;
 80085d6:	e0b0      	b.n	800873a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80085d8:	4b5a      	ldr	r3, [pc, #360]	; (8008744 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085e0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80085e2:	4b58      	ldr	r3, [pc, #352]	; (8008744 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d04a      	beq.n	8008684 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80085ee:	4b55      	ldr	r3, [pc, #340]	; (8008744 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	099b      	lsrs	r3, r3, #6
 80085f4:	f04f 0400 	mov.w	r4, #0
 80085f8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80085fc:	f04f 0200 	mov.w	r2, #0
 8008600:	ea03 0501 	and.w	r5, r3, r1
 8008604:	ea04 0602 	and.w	r6, r4, r2
 8008608:	4629      	mov	r1, r5
 800860a:	4632      	mov	r2, r6
 800860c:	f04f 0300 	mov.w	r3, #0
 8008610:	f04f 0400 	mov.w	r4, #0
 8008614:	0154      	lsls	r4, r2, #5
 8008616:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800861a:	014b      	lsls	r3, r1, #5
 800861c:	4619      	mov	r1, r3
 800861e:	4622      	mov	r2, r4
 8008620:	1b49      	subs	r1, r1, r5
 8008622:	eb62 0206 	sbc.w	r2, r2, r6
 8008626:	f04f 0300 	mov.w	r3, #0
 800862a:	f04f 0400 	mov.w	r4, #0
 800862e:	0194      	lsls	r4, r2, #6
 8008630:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008634:	018b      	lsls	r3, r1, #6
 8008636:	1a5b      	subs	r3, r3, r1
 8008638:	eb64 0402 	sbc.w	r4, r4, r2
 800863c:	f04f 0100 	mov.w	r1, #0
 8008640:	f04f 0200 	mov.w	r2, #0
 8008644:	00e2      	lsls	r2, r4, #3
 8008646:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800864a:	00d9      	lsls	r1, r3, #3
 800864c:	460b      	mov	r3, r1
 800864e:	4614      	mov	r4, r2
 8008650:	195b      	adds	r3, r3, r5
 8008652:	eb44 0406 	adc.w	r4, r4, r6
 8008656:	f04f 0100 	mov.w	r1, #0
 800865a:	f04f 0200 	mov.w	r2, #0
 800865e:	0262      	lsls	r2, r4, #9
 8008660:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8008664:	0259      	lsls	r1, r3, #9
 8008666:	460b      	mov	r3, r1
 8008668:	4614      	mov	r4, r2
 800866a:	4618      	mov	r0, r3
 800866c:	4621      	mov	r1, r4
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f04f 0400 	mov.w	r4, #0
 8008674:	461a      	mov	r2, r3
 8008676:	4623      	mov	r3, r4
 8008678:	f7f8 fa78 	bl	8000b6c <__aeabi_uldivmod>
 800867c:	4603      	mov	r3, r0
 800867e:	460c      	mov	r4, r1
 8008680:	60fb      	str	r3, [r7, #12]
 8008682:	e049      	b.n	8008718 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008684:	4b2f      	ldr	r3, [pc, #188]	; (8008744 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	099b      	lsrs	r3, r3, #6
 800868a:	f04f 0400 	mov.w	r4, #0
 800868e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008692:	f04f 0200 	mov.w	r2, #0
 8008696:	ea03 0501 	and.w	r5, r3, r1
 800869a:	ea04 0602 	and.w	r6, r4, r2
 800869e:	4629      	mov	r1, r5
 80086a0:	4632      	mov	r2, r6
 80086a2:	f04f 0300 	mov.w	r3, #0
 80086a6:	f04f 0400 	mov.w	r4, #0
 80086aa:	0154      	lsls	r4, r2, #5
 80086ac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80086b0:	014b      	lsls	r3, r1, #5
 80086b2:	4619      	mov	r1, r3
 80086b4:	4622      	mov	r2, r4
 80086b6:	1b49      	subs	r1, r1, r5
 80086b8:	eb62 0206 	sbc.w	r2, r2, r6
 80086bc:	f04f 0300 	mov.w	r3, #0
 80086c0:	f04f 0400 	mov.w	r4, #0
 80086c4:	0194      	lsls	r4, r2, #6
 80086c6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80086ca:	018b      	lsls	r3, r1, #6
 80086cc:	1a5b      	subs	r3, r3, r1
 80086ce:	eb64 0402 	sbc.w	r4, r4, r2
 80086d2:	f04f 0100 	mov.w	r1, #0
 80086d6:	f04f 0200 	mov.w	r2, #0
 80086da:	00e2      	lsls	r2, r4, #3
 80086dc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80086e0:	00d9      	lsls	r1, r3, #3
 80086e2:	460b      	mov	r3, r1
 80086e4:	4614      	mov	r4, r2
 80086e6:	195b      	adds	r3, r3, r5
 80086e8:	eb44 0406 	adc.w	r4, r4, r6
 80086ec:	f04f 0100 	mov.w	r1, #0
 80086f0:	f04f 0200 	mov.w	r2, #0
 80086f4:	02a2      	lsls	r2, r4, #10
 80086f6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80086fa:	0299      	lsls	r1, r3, #10
 80086fc:	460b      	mov	r3, r1
 80086fe:	4614      	mov	r4, r2
 8008700:	4618      	mov	r0, r3
 8008702:	4621      	mov	r1, r4
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f04f 0400 	mov.w	r4, #0
 800870a:	461a      	mov	r2, r3
 800870c:	4623      	mov	r3, r4
 800870e:	f7f8 fa2d 	bl	8000b6c <__aeabi_uldivmod>
 8008712:	4603      	mov	r3, r0
 8008714:	460c      	mov	r4, r1
 8008716:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008718:	4b0a      	ldr	r3, [pc, #40]	; (8008744 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	0c1b      	lsrs	r3, r3, #16
 800871e:	f003 0303 	and.w	r3, r3, #3
 8008722:	3301      	adds	r3, #1
 8008724:	005b      	lsls	r3, r3, #1
 8008726:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008728:	68fa      	ldr	r2, [r7, #12]
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008730:	60bb      	str	r3, [r7, #8]
      break;
 8008732:	e002      	b.n	800873a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008734:	4b04      	ldr	r3, [pc, #16]	; (8008748 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008736:	60bb      	str	r3, [r7, #8]
      break;
 8008738:	bf00      	nop
    }
  }
  return sysclockfreq;
 800873a:	68bb      	ldr	r3, [r7, #8]
}
 800873c:	4618      	mov	r0, r3
 800873e:	3714      	adds	r7, #20
 8008740:	46bd      	mov	sp, r7
 8008742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008744:	40023800 	.word	0x40023800
 8008748:	00f42400 	.word	0x00f42400
 800874c:	007a1200 	.word	0x007a1200

08008750 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008750:	b480      	push	{r7}
 8008752:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008754:	4b03      	ldr	r3, [pc, #12]	; (8008764 <HAL_RCC_GetHCLKFreq+0x14>)
 8008756:	681b      	ldr	r3, [r3, #0]
}
 8008758:	4618      	mov	r0, r3
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr
 8008762:	bf00      	nop
 8008764:	20000024 	.word	0x20000024

08008768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800876c:	f7ff fff0 	bl	8008750 <HAL_RCC_GetHCLKFreq>
 8008770:	4601      	mov	r1, r0
 8008772:	4b05      	ldr	r3, [pc, #20]	; (8008788 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	0a9b      	lsrs	r3, r3, #10
 8008778:	f003 0307 	and.w	r3, r3, #7
 800877c:	4a03      	ldr	r2, [pc, #12]	; (800878c <HAL_RCC_GetPCLK1Freq+0x24>)
 800877e:	5cd3      	ldrb	r3, [r2, r3]
 8008780:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008784:	4618      	mov	r0, r3
 8008786:	bd80      	pop	{r7, pc}
 8008788:	40023800 	.word	0x40023800
 800878c:	0800ad24 	.word	0x0800ad24

08008790 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008794:	f7ff ffdc 	bl	8008750 <HAL_RCC_GetHCLKFreq>
 8008798:	4601      	mov	r1, r0
 800879a:	4b05      	ldr	r3, [pc, #20]	; (80087b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	0b5b      	lsrs	r3, r3, #13
 80087a0:	f003 0307 	and.w	r3, r3, #7
 80087a4:	4a03      	ldr	r2, [pc, #12]	; (80087b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80087a6:	5cd3      	ldrb	r3, [r2, r3]
 80087a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	bd80      	pop	{r7, pc}
 80087b0:	40023800 	.word	0x40023800
 80087b4:	0800ad24 	.word	0x0800ad24

080087b8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b086      	sub	sp, #24
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80087c0:	2300      	movs	r3, #0
 80087c2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f003 0301 	and.w	r3, r3, #1
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d075      	beq.n	80088bc <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80087d0:	4ba2      	ldr	r3, [pc, #648]	; (8008a5c <HAL_RCC_OscConfig+0x2a4>)
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	f003 030c 	and.w	r3, r3, #12
 80087d8:	2b04      	cmp	r3, #4
 80087da:	d00c      	beq.n	80087f6 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80087dc:	4b9f      	ldr	r3, [pc, #636]	; (8008a5c <HAL_RCC_OscConfig+0x2a4>)
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80087e4:	2b08      	cmp	r3, #8
 80087e6:	d112      	bne.n	800880e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80087e8:	4b9c      	ldr	r3, [pc, #624]	; (8008a5c <HAL_RCC_OscConfig+0x2a4>)
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80087f4:	d10b      	bne.n	800880e <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087f6:	4b99      	ldr	r3, [pc, #612]	; (8008a5c <HAL_RCC_OscConfig+0x2a4>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d05b      	beq.n	80088ba <HAL_RCC_OscConfig+0x102>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d157      	bne.n	80088ba <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800880a:	2301      	movs	r3, #1
 800880c:	e20b      	b.n	8008c26 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008816:	d106      	bne.n	8008826 <HAL_RCC_OscConfig+0x6e>
 8008818:	4b90      	ldr	r3, [pc, #576]	; (8008a5c <HAL_RCC_OscConfig+0x2a4>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a8f      	ldr	r2, [pc, #572]	; (8008a5c <HAL_RCC_OscConfig+0x2a4>)
 800881e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008822:	6013      	str	r3, [r2, #0]
 8008824:	e01d      	b.n	8008862 <HAL_RCC_OscConfig+0xaa>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800882e:	d10c      	bne.n	800884a <HAL_RCC_OscConfig+0x92>
 8008830:	4b8a      	ldr	r3, [pc, #552]	; (8008a5c <HAL_RCC_OscConfig+0x2a4>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a89      	ldr	r2, [pc, #548]	; (8008a5c <HAL_RCC_OscConfig+0x2a4>)
 8008836:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800883a:	6013      	str	r3, [r2, #0]
 800883c:	4b87      	ldr	r3, [pc, #540]	; (8008a5c <HAL_RCC_OscConfig+0x2a4>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a86      	ldr	r2, [pc, #536]	; (8008a5c <HAL_RCC_OscConfig+0x2a4>)
 8008842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008846:	6013      	str	r3, [r2, #0]
 8008848:	e00b      	b.n	8008862 <HAL_RCC_OscConfig+0xaa>
 800884a:	4b84      	ldr	r3, [pc, #528]	; (8008a5c <HAL_RCC_OscConfig+0x2a4>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a83      	ldr	r2, [pc, #524]	; (8008a5c <HAL_RCC_OscConfig+0x2a4>)
 8008850:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008854:	6013      	str	r3, [r2, #0]
 8008856:	4b81      	ldr	r3, [pc, #516]	; (8008a5c <HAL_RCC_OscConfig+0x2a4>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a80      	ldr	r2, [pc, #512]	; (8008a5c <HAL_RCC_OscConfig+0x2a4>)
 800885c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008860:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d013      	beq.n	8008892 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800886a:	f7fc fecd 	bl	8005608 <HAL_GetTick>
 800886e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008870:	e008      	b.n	8008884 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008872:	f7fc fec9 	bl	8005608 <HAL_GetTick>
 8008876:	4602      	mov	r2, r0
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	1ad3      	subs	r3, r2, r3
 800887c:	2b64      	cmp	r3, #100	; 0x64
 800887e:	d901      	bls.n	8008884 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8008880:	2303      	movs	r3, #3
 8008882:	e1d0      	b.n	8008c26 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008884:	4b75      	ldr	r3, [pc, #468]	; (8008a5c <HAL_RCC_OscConfig+0x2a4>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800888c:	2b00      	cmp	r3, #0
 800888e:	d0f0      	beq.n	8008872 <HAL_RCC_OscConfig+0xba>
 8008890:	e014      	b.n	80088bc <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008892:	f7fc feb9 	bl	8005608 <HAL_GetTick>
 8008896:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008898:	e008      	b.n	80088ac <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800889a:	f7fc feb5 	bl	8005608 <HAL_GetTick>
 800889e:	4602      	mov	r2, r0
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	1ad3      	subs	r3, r2, r3
 80088a4:	2b64      	cmp	r3, #100	; 0x64
 80088a6:	d901      	bls.n	80088ac <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 80088a8:	2303      	movs	r3, #3
 80088aa:	e1bc      	b.n	8008c26 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80088ac:	4b6b      	ldr	r3, [pc, #428]	; (8008a5c <HAL_RCC_OscConfig+0x2a4>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d1f0      	bne.n	800889a <HAL_RCC_OscConfig+0xe2>
 80088b8:	e000      	b.n	80088bc <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088ba:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f003 0302 	and.w	r3, r3, #2
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d063      	beq.n	8008990 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80088c8:	4b64      	ldr	r3, [pc, #400]	; (8008a5c <HAL_RCC_OscConfig+0x2a4>)
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	f003 030c 	and.w	r3, r3, #12
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d00b      	beq.n	80088ec <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80088d4:	4b61      	ldr	r3, [pc, #388]	; (8008a5c <HAL_RCC_OscConfig+0x2a4>)
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80088dc:	2b08      	cmp	r3, #8
 80088de:	d11c      	bne.n	800891a <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80088e0:	4b5e      	ldr	r3, [pc, #376]	; (8008a5c <HAL_RCC_OscConfig+0x2a4>)
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d116      	bne.n	800891a <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80088ec:	4b5b      	ldr	r3, [pc, #364]	; (8008a5c <HAL_RCC_OscConfig+0x2a4>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f003 0302 	and.w	r3, r3, #2
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d005      	beq.n	8008904 <HAL_RCC_OscConfig+0x14c>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d001      	beq.n	8008904 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8008900:	2301      	movs	r3, #1
 8008902:	e190      	b.n	8008c26 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008904:	4b55      	ldr	r3, [pc, #340]	; (8008a5c <HAL_RCC_OscConfig+0x2a4>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	691b      	ldr	r3, [r3, #16]
 8008910:	00db      	lsls	r3, r3, #3
 8008912:	4952      	ldr	r1, [pc, #328]	; (8008a5c <HAL_RCC_OscConfig+0x2a4>)
 8008914:	4313      	orrs	r3, r2
 8008916:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008918:	e03a      	b.n	8008990 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	68db      	ldr	r3, [r3, #12]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d020      	beq.n	8008964 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008922:	4b4f      	ldr	r3, [pc, #316]	; (8008a60 <HAL_RCC_OscConfig+0x2a8>)
 8008924:	2201      	movs	r2, #1
 8008926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008928:	f7fc fe6e 	bl	8005608 <HAL_GetTick>
 800892c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800892e:	e008      	b.n	8008942 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008930:	f7fc fe6a 	bl	8005608 <HAL_GetTick>
 8008934:	4602      	mov	r2, r0
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	1ad3      	subs	r3, r2, r3
 800893a:	2b02      	cmp	r3, #2
 800893c:	d901      	bls.n	8008942 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800893e:	2303      	movs	r3, #3
 8008940:	e171      	b.n	8008c26 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008942:	4b46      	ldr	r3, [pc, #280]	; (8008a5c <HAL_RCC_OscConfig+0x2a4>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f003 0302 	and.w	r3, r3, #2
 800894a:	2b00      	cmp	r3, #0
 800894c:	d0f0      	beq.n	8008930 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800894e:	4b43      	ldr	r3, [pc, #268]	; (8008a5c <HAL_RCC_OscConfig+0x2a4>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	00db      	lsls	r3, r3, #3
 800895c:	493f      	ldr	r1, [pc, #252]	; (8008a5c <HAL_RCC_OscConfig+0x2a4>)
 800895e:	4313      	orrs	r3, r2
 8008960:	600b      	str	r3, [r1, #0]
 8008962:	e015      	b.n	8008990 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008964:	4b3e      	ldr	r3, [pc, #248]	; (8008a60 <HAL_RCC_OscConfig+0x2a8>)
 8008966:	2200      	movs	r2, #0
 8008968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800896a:	f7fc fe4d 	bl	8005608 <HAL_GetTick>
 800896e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008970:	e008      	b.n	8008984 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008972:	f7fc fe49 	bl	8005608 <HAL_GetTick>
 8008976:	4602      	mov	r2, r0
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	1ad3      	subs	r3, r2, r3
 800897c:	2b02      	cmp	r3, #2
 800897e:	d901      	bls.n	8008984 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8008980:	2303      	movs	r3, #3
 8008982:	e150      	b.n	8008c26 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008984:	4b35      	ldr	r3, [pc, #212]	; (8008a5c <HAL_RCC_OscConfig+0x2a4>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f003 0302 	and.w	r3, r3, #2
 800898c:	2b00      	cmp	r3, #0
 800898e:	d1f0      	bne.n	8008972 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f003 0308 	and.w	r3, r3, #8
 8008998:	2b00      	cmp	r3, #0
 800899a:	d030      	beq.n	80089fe <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	695b      	ldr	r3, [r3, #20]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d016      	beq.n	80089d2 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80089a4:	4b2f      	ldr	r3, [pc, #188]	; (8008a64 <HAL_RCC_OscConfig+0x2ac>)
 80089a6:	2201      	movs	r2, #1
 80089a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089aa:	f7fc fe2d 	bl	8005608 <HAL_GetTick>
 80089ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80089b0:	e008      	b.n	80089c4 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80089b2:	f7fc fe29 	bl	8005608 <HAL_GetTick>
 80089b6:	4602      	mov	r2, r0
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	1ad3      	subs	r3, r2, r3
 80089bc:	2b02      	cmp	r3, #2
 80089be:	d901      	bls.n	80089c4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 80089c0:	2303      	movs	r3, #3
 80089c2:	e130      	b.n	8008c26 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80089c4:	4b25      	ldr	r3, [pc, #148]	; (8008a5c <HAL_RCC_OscConfig+0x2a4>)
 80089c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089c8:	f003 0302 	and.w	r3, r3, #2
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d0f0      	beq.n	80089b2 <HAL_RCC_OscConfig+0x1fa>
 80089d0:	e015      	b.n	80089fe <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80089d2:	4b24      	ldr	r3, [pc, #144]	; (8008a64 <HAL_RCC_OscConfig+0x2ac>)
 80089d4:	2200      	movs	r2, #0
 80089d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089d8:	f7fc fe16 	bl	8005608 <HAL_GetTick>
 80089dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80089de:	e008      	b.n	80089f2 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80089e0:	f7fc fe12 	bl	8005608 <HAL_GetTick>
 80089e4:	4602      	mov	r2, r0
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	1ad3      	subs	r3, r2, r3
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	d901      	bls.n	80089f2 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 80089ee:	2303      	movs	r3, #3
 80089f0:	e119      	b.n	8008c26 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80089f2:	4b1a      	ldr	r3, [pc, #104]	; (8008a5c <HAL_RCC_OscConfig+0x2a4>)
 80089f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089f6:	f003 0302 	and.w	r3, r3, #2
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d1f0      	bne.n	80089e0 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 0304 	and.w	r3, r3, #4
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	f000 809f 	beq.w	8008b4a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a10:	4b12      	ldr	r3, [pc, #72]	; (8008a5c <HAL_RCC_OscConfig+0x2a4>)
 8008a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d10f      	bne.n	8008a3c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	60fb      	str	r3, [r7, #12]
 8008a20:	4b0e      	ldr	r3, [pc, #56]	; (8008a5c <HAL_RCC_OscConfig+0x2a4>)
 8008a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a24:	4a0d      	ldr	r2, [pc, #52]	; (8008a5c <HAL_RCC_OscConfig+0x2a4>)
 8008a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a2a:	6413      	str	r3, [r2, #64]	; 0x40
 8008a2c:	4b0b      	ldr	r3, [pc, #44]	; (8008a5c <HAL_RCC_OscConfig+0x2a4>)
 8008a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a34:	60fb      	str	r3, [r7, #12]
 8008a36:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a3c:	4b0a      	ldr	r3, [pc, #40]	; (8008a68 <HAL_RCC_OscConfig+0x2b0>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d120      	bne.n	8008a8a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008a48:	4b07      	ldr	r3, [pc, #28]	; (8008a68 <HAL_RCC_OscConfig+0x2b0>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a06      	ldr	r2, [pc, #24]	; (8008a68 <HAL_RCC_OscConfig+0x2b0>)
 8008a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008a54:	f7fc fdd8 	bl	8005608 <HAL_GetTick>
 8008a58:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a5a:	e010      	b.n	8008a7e <HAL_RCC_OscConfig+0x2c6>
 8008a5c:	40023800 	.word	0x40023800
 8008a60:	42470000 	.word	0x42470000
 8008a64:	42470e80 	.word	0x42470e80
 8008a68:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a6c:	f7fc fdcc 	bl	8005608 <HAL_GetTick>
 8008a70:	4602      	mov	r2, r0
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	1ad3      	subs	r3, r2, r3
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	d901      	bls.n	8008a7e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8008a7a:	2303      	movs	r3, #3
 8008a7c:	e0d3      	b.n	8008c26 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a7e:	4b6c      	ldr	r3, [pc, #432]	; (8008c30 <HAL_RCC_OscConfig+0x478>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d0f0      	beq.n	8008a6c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d106      	bne.n	8008aa0 <HAL_RCC_OscConfig+0x2e8>
 8008a92:	4b68      	ldr	r3, [pc, #416]	; (8008c34 <HAL_RCC_OscConfig+0x47c>)
 8008a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a96:	4a67      	ldr	r2, [pc, #412]	; (8008c34 <HAL_RCC_OscConfig+0x47c>)
 8008a98:	f043 0301 	orr.w	r3, r3, #1
 8008a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8008a9e:	e01c      	b.n	8008ada <HAL_RCC_OscConfig+0x322>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	2b05      	cmp	r3, #5
 8008aa6:	d10c      	bne.n	8008ac2 <HAL_RCC_OscConfig+0x30a>
 8008aa8:	4b62      	ldr	r3, [pc, #392]	; (8008c34 <HAL_RCC_OscConfig+0x47c>)
 8008aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aac:	4a61      	ldr	r2, [pc, #388]	; (8008c34 <HAL_RCC_OscConfig+0x47c>)
 8008aae:	f043 0304 	orr.w	r3, r3, #4
 8008ab2:	6713      	str	r3, [r2, #112]	; 0x70
 8008ab4:	4b5f      	ldr	r3, [pc, #380]	; (8008c34 <HAL_RCC_OscConfig+0x47c>)
 8008ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ab8:	4a5e      	ldr	r2, [pc, #376]	; (8008c34 <HAL_RCC_OscConfig+0x47c>)
 8008aba:	f043 0301 	orr.w	r3, r3, #1
 8008abe:	6713      	str	r3, [r2, #112]	; 0x70
 8008ac0:	e00b      	b.n	8008ada <HAL_RCC_OscConfig+0x322>
 8008ac2:	4b5c      	ldr	r3, [pc, #368]	; (8008c34 <HAL_RCC_OscConfig+0x47c>)
 8008ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ac6:	4a5b      	ldr	r2, [pc, #364]	; (8008c34 <HAL_RCC_OscConfig+0x47c>)
 8008ac8:	f023 0301 	bic.w	r3, r3, #1
 8008acc:	6713      	str	r3, [r2, #112]	; 0x70
 8008ace:	4b59      	ldr	r3, [pc, #356]	; (8008c34 <HAL_RCC_OscConfig+0x47c>)
 8008ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ad2:	4a58      	ldr	r2, [pc, #352]	; (8008c34 <HAL_RCC_OscConfig+0x47c>)
 8008ad4:	f023 0304 	bic.w	r3, r3, #4
 8008ad8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d015      	beq.n	8008b0e <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ae2:	f7fc fd91 	bl	8005608 <HAL_GetTick>
 8008ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ae8:	e00a      	b.n	8008b00 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008aea:	f7fc fd8d 	bl	8005608 <HAL_GetTick>
 8008aee:	4602      	mov	r2, r0
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	1ad3      	subs	r3, r2, r3
 8008af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d901      	bls.n	8008b00 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8008afc:	2303      	movs	r3, #3
 8008afe:	e092      	b.n	8008c26 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b00:	4b4c      	ldr	r3, [pc, #304]	; (8008c34 <HAL_RCC_OscConfig+0x47c>)
 8008b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b04:	f003 0302 	and.w	r3, r3, #2
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d0ee      	beq.n	8008aea <HAL_RCC_OscConfig+0x332>
 8008b0c:	e014      	b.n	8008b38 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b0e:	f7fc fd7b 	bl	8005608 <HAL_GetTick>
 8008b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b14:	e00a      	b.n	8008b2c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b16:	f7fc fd77 	bl	8005608 <HAL_GetTick>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	1ad3      	subs	r3, r2, r3
 8008b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d901      	bls.n	8008b2c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8008b28:	2303      	movs	r3, #3
 8008b2a:	e07c      	b.n	8008c26 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b2c:	4b41      	ldr	r3, [pc, #260]	; (8008c34 <HAL_RCC_OscConfig+0x47c>)
 8008b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b30:	f003 0302 	and.w	r3, r3, #2
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d1ee      	bne.n	8008b16 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008b38:	7dfb      	ldrb	r3, [r7, #23]
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d105      	bne.n	8008b4a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b3e:	4b3d      	ldr	r3, [pc, #244]	; (8008c34 <HAL_RCC_OscConfig+0x47c>)
 8008b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b42:	4a3c      	ldr	r2, [pc, #240]	; (8008c34 <HAL_RCC_OscConfig+0x47c>)
 8008b44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	699b      	ldr	r3, [r3, #24]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d068      	beq.n	8008c24 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008b52:	4b38      	ldr	r3, [pc, #224]	; (8008c34 <HAL_RCC_OscConfig+0x47c>)
 8008b54:	689b      	ldr	r3, [r3, #8]
 8008b56:	f003 030c 	and.w	r3, r3, #12
 8008b5a:	2b08      	cmp	r3, #8
 8008b5c:	d060      	beq.n	8008c20 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	699b      	ldr	r3, [r3, #24]
 8008b62:	2b02      	cmp	r3, #2
 8008b64:	d145      	bne.n	8008bf2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b66:	4b34      	ldr	r3, [pc, #208]	; (8008c38 <HAL_RCC_OscConfig+0x480>)
 8008b68:	2200      	movs	r2, #0
 8008b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b6c:	f7fc fd4c 	bl	8005608 <HAL_GetTick>
 8008b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b72:	e008      	b.n	8008b86 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b74:	f7fc fd48 	bl	8005608 <HAL_GetTick>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	1ad3      	subs	r3, r2, r3
 8008b7e:	2b02      	cmp	r3, #2
 8008b80:	d901      	bls.n	8008b86 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8008b82:	2303      	movs	r3, #3
 8008b84:	e04f      	b.n	8008c26 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b86:	4b2b      	ldr	r3, [pc, #172]	; (8008c34 <HAL_RCC_OscConfig+0x47c>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d1f0      	bne.n	8008b74 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	69da      	ldr	r2, [r3, #28]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6a1b      	ldr	r3, [r3, #32]
 8008b9a:	431a      	orrs	r2, r3
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba0:	019b      	lsls	r3, r3, #6
 8008ba2:	431a      	orrs	r2, r3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba8:	085b      	lsrs	r3, r3, #1
 8008baa:	3b01      	subs	r3, #1
 8008bac:	041b      	lsls	r3, r3, #16
 8008bae:	431a      	orrs	r2, r3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb4:	061b      	lsls	r3, r3, #24
 8008bb6:	431a      	orrs	r2, r3
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bbc:	071b      	lsls	r3, r3, #28
 8008bbe:	491d      	ldr	r1, [pc, #116]	; (8008c34 <HAL_RCC_OscConfig+0x47c>)
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008bc4:	4b1c      	ldr	r3, [pc, #112]	; (8008c38 <HAL_RCC_OscConfig+0x480>)
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bca:	f7fc fd1d 	bl	8005608 <HAL_GetTick>
 8008bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008bd0:	e008      	b.n	8008be4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008bd2:	f7fc fd19 	bl	8005608 <HAL_GetTick>
 8008bd6:	4602      	mov	r2, r0
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	1ad3      	subs	r3, r2, r3
 8008bdc:	2b02      	cmp	r3, #2
 8008bde:	d901      	bls.n	8008be4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8008be0:	2303      	movs	r3, #3
 8008be2:	e020      	b.n	8008c26 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008be4:	4b13      	ldr	r3, [pc, #76]	; (8008c34 <HAL_RCC_OscConfig+0x47c>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d0f0      	beq.n	8008bd2 <HAL_RCC_OscConfig+0x41a>
 8008bf0:	e018      	b.n	8008c24 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bf2:	4b11      	ldr	r3, [pc, #68]	; (8008c38 <HAL_RCC_OscConfig+0x480>)
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bf8:	f7fc fd06 	bl	8005608 <HAL_GetTick>
 8008bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008bfe:	e008      	b.n	8008c12 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c00:	f7fc fd02 	bl	8005608 <HAL_GetTick>
 8008c04:	4602      	mov	r2, r0
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	1ad3      	subs	r3, r2, r3
 8008c0a:	2b02      	cmp	r3, #2
 8008c0c:	d901      	bls.n	8008c12 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8008c0e:	2303      	movs	r3, #3
 8008c10:	e009      	b.n	8008c26 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c12:	4b08      	ldr	r3, [pc, #32]	; (8008c34 <HAL_RCC_OscConfig+0x47c>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d1f0      	bne.n	8008c00 <HAL_RCC_OscConfig+0x448>
 8008c1e:	e001      	b.n	8008c24 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	e000      	b.n	8008c26 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3718      	adds	r7, #24
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	40007000 	.word	0x40007000
 8008c34:	40023800 	.word	0x40023800
 8008c38:	42470060 	.word	0x42470060

08008c3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d101      	bne.n	8008c4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e03f      	b.n	8008cce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008c54:	b2db      	uxtb	r3, r3
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d106      	bne.n	8008c68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f7fc fb2a 	bl	80052bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2224      	movs	r2, #36	; 0x24
 8008c6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	68da      	ldr	r2, [r3, #12]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 fc77 	bl	8009574 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	691a      	ldr	r2, [r3, #16]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	695a      	ldr	r2, [r3, #20]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008ca4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	68da      	ldr	r2, [r3, #12]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008cb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2220      	movs	r2, #32
 8008cc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2220      	movs	r2, #32
 8008cc8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008ccc:	2300      	movs	r3, #0
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3708      	adds	r7, #8
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}

08008cd6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cd6:	b580      	push	{r7, lr}
 8008cd8:	b088      	sub	sp, #32
 8008cda:	af02      	add	r7, sp, #8
 8008cdc:	60f8      	str	r0, [r7, #12]
 8008cde:	60b9      	str	r1, [r7, #8]
 8008ce0:	603b      	str	r3, [r7, #0]
 8008ce2:	4613      	mov	r3, r2
 8008ce4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	2b20      	cmp	r3, #32
 8008cf4:	f040 8083 	bne.w	8008dfe <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d002      	beq.n	8008d04 <HAL_UART_Transmit+0x2e>
 8008cfe:	88fb      	ldrh	r3, [r7, #6]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d101      	bne.n	8008d08 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008d04:	2301      	movs	r3, #1
 8008d06:	e07b      	b.n	8008e00 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d101      	bne.n	8008d16 <HAL_UART_Transmit+0x40>
 8008d12:	2302      	movs	r3, #2
 8008d14:	e074      	b.n	8008e00 <HAL_UART_Transmit+0x12a>
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2201      	movs	r2, #1
 8008d1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2200      	movs	r2, #0
 8008d22:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2221      	movs	r2, #33	; 0x21
 8008d28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008d2c:	f7fc fc6c 	bl	8005608 <HAL_GetTick>
 8008d30:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	88fa      	ldrh	r2, [r7, #6]
 8008d36:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	88fa      	ldrh	r2, [r7, #6]
 8008d3c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2200      	movs	r2, #0
 8008d42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8008d46:	e042      	b.n	8008dce <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	3b01      	subs	r3, #1
 8008d50:	b29a      	uxth	r2, r3
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	689b      	ldr	r3, [r3, #8]
 8008d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d5e:	d122      	bne.n	8008da6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	9300      	str	r3, [sp, #0]
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	2200      	movs	r2, #0
 8008d68:	2180      	movs	r1, #128	; 0x80
 8008d6a:	68f8      	ldr	r0, [r7, #12]
 8008d6c:	f000 fa80 	bl	8009270 <UART_WaitOnFlagUntilTimeout>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d001      	beq.n	8008d7a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8008d76:	2303      	movs	r3, #3
 8008d78:	e042      	b.n	8008e00 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	881b      	ldrh	r3, [r3, #0]
 8008d82:	461a      	mov	r2, r3
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d8c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	691b      	ldr	r3, [r3, #16]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d103      	bne.n	8008d9e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	3302      	adds	r3, #2
 8008d9a:	60bb      	str	r3, [r7, #8]
 8008d9c:	e017      	b.n	8008dce <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	3301      	adds	r3, #1
 8008da2:	60bb      	str	r3, [r7, #8]
 8008da4:	e013      	b.n	8008dce <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	9300      	str	r3, [sp, #0]
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	2200      	movs	r2, #0
 8008dae:	2180      	movs	r1, #128	; 0x80
 8008db0:	68f8      	ldr	r0, [r7, #12]
 8008db2:	f000 fa5d 	bl	8009270 <UART_WaitOnFlagUntilTimeout>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d001      	beq.n	8008dc0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8008dbc:	2303      	movs	r3, #3
 8008dbe:	e01f      	b.n	8008e00 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	1c5a      	adds	r2, r3, #1
 8008dc4:	60ba      	str	r2, [r7, #8]
 8008dc6:	781a      	ldrb	r2, [r3, #0]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d1b7      	bne.n	8008d48 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	9300      	str	r3, [sp, #0]
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	2200      	movs	r2, #0
 8008de0:	2140      	movs	r1, #64	; 0x40
 8008de2:	68f8      	ldr	r0, [r7, #12]
 8008de4:	f000 fa44 	bl	8009270 <UART_WaitOnFlagUntilTimeout>
 8008de8:	4603      	mov	r3, r0
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d001      	beq.n	8008df2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8008dee:	2303      	movs	r3, #3
 8008df0:	e006      	b.n	8008e00 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2220      	movs	r2, #32
 8008df6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	e000      	b.n	8008e00 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008dfe:	2302      	movs	r3, #2
  }
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3718      	adds	r7, #24
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b086      	sub	sp, #24
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	4613      	mov	r3, r2
 8008e14:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	2b20      	cmp	r3, #32
 8008e20:	d166      	bne.n	8008ef0 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d002      	beq.n	8008e2e <HAL_UART_Receive_DMA+0x26>
 8008e28:	88fb      	ldrh	r3, [r7, #6]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d101      	bne.n	8008e32 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	e05f      	b.n	8008ef2 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d101      	bne.n	8008e40 <HAL_UART_Receive_DMA+0x38>
 8008e3c:	2302      	movs	r3, #2
 8008e3e:	e058      	b.n	8008ef2 <HAL_UART_Receive_DMA+0xea>
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2201      	movs	r2, #1
 8008e44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8008e48:	68ba      	ldr	r2, [r7, #8]
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	88fa      	ldrh	r2, [r7, #6]
 8008e52:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2200      	movs	r2, #0
 8008e58:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2222      	movs	r2, #34	; 0x22
 8008e5e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e66:	4a25      	ldr	r2, [pc, #148]	; (8008efc <HAL_UART_Receive_DMA+0xf4>)
 8008e68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e6e:	4a24      	ldr	r2, [pc, #144]	; (8008f00 <HAL_UART_Receive_DMA+0xf8>)
 8008e70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e76:	4a23      	ldr	r2, [pc, #140]	; (8008f04 <HAL_UART_Receive_DMA+0xfc>)
 8008e78:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e7e:	2200      	movs	r2, #0
 8008e80:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8008e82:	f107 0308 	add.w	r3, r7, #8
 8008e86:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	3304      	adds	r3, #4
 8008e92:	4619      	mov	r1, r3
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	88fb      	ldrh	r3, [r7, #6]
 8008e9a:	f7fd f9a9 	bl	80061f0 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	613b      	str	r3, [r7, #16]
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	613b      	str	r3, [r7, #16]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	613b      	str	r3, [r7, #16]
 8008eb2:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	68da      	ldr	r2, [r3, #12]
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008eca:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	695a      	ldr	r2, [r3, #20]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f042 0201 	orr.w	r2, r2, #1
 8008eda:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	695a      	ldr	r2, [r3, #20]
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008eea:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8008eec:	2300      	movs	r3, #0
 8008eee:	e000      	b.n	8008ef2 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008ef0:	2302      	movs	r3, #2
  }
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3718      	adds	r7, #24
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	08009159 	.word	0x08009159
 8008f00:	080091c1 	.word	0x080091c1
 8008f04:	080091dd 	.word	0x080091dd

08008f08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b088      	sub	sp, #32
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	68db      	ldr	r3, [r3, #12]
 8008f1e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	695b      	ldr	r3, [r3, #20]
 8008f26:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008f30:	69fb      	ldr	r3, [r7, #28]
 8008f32:	f003 030f 	and.w	r3, r3, #15
 8008f36:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d10d      	bne.n	8008f5a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	f003 0320 	and.w	r3, r3, #32
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d008      	beq.n	8008f5a <HAL_UART_IRQHandler+0x52>
 8008f48:	69bb      	ldr	r3, [r7, #24]
 8008f4a:	f003 0320 	and.w	r3, r3, #32
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d003      	beq.n	8008f5a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 fa8c 	bl	8009470 <UART_Receive_IT>
      return;
 8008f58:	e0d1      	b.n	80090fe <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	f000 80b0 	beq.w	80090c2 <HAL_UART_IRQHandler+0x1ba>
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	f003 0301 	and.w	r3, r3, #1
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d105      	bne.n	8008f78 <HAL_UART_IRQHandler+0x70>
 8008f6c:	69bb      	ldr	r3, [r7, #24]
 8008f6e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	f000 80a5 	beq.w	80090c2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008f78:	69fb      	ldr	r3, [r7, #28]
 8008f7a:	f003 0301 	and.w	r3, r3, #1
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00a      	beq.n	8008f98 <HAL_UART_IRQHandler+0x90>
 8008f82:	69bb      	ldr	r3, [r7, #24]
 8008f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d005      	beq.n	8008f98 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f90:	f043 0201 	orr.w	r2, r3, #1
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008f98:	69fb      	ldr	r3, [r7, #28]
 8008f9a:	f003 0304 	and.w	r3, r3, #4
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d00a      	beq.n	8008fb8 <HAL_UART_IRQHandler+0xb0>
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	f003 0301 	and.w	r3, r3, #1
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d005      	beq.n	8008fb8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fb0:	f043 0202 	orr.w	r2, r3, #2
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	f003 0302 	and.w	r3, r3, #2
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d00a      	beq.n	8008fd8 <HAL_UART_IRQHandler+0xd0>
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	f003 0301 	and.w	r3, r3, #1
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d005      	beq.n	8008fd8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fd0:	f043 0204 	orr.w	r2, r3, #4
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	f003 0308 	and.w	r3, r3, #8
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d00f      	beq.n	8009002 <HAL_UART_IRQHandler+0xfa>
 8008fe2:	69bb      	ldr	r3, [r7, #24]
 8008fe4:	f003 0320 	and.w	r3, r3, #32
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d104      	bne.n	8008ff6 <HAL_UART_IRQHandler+0xee>
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	f003 0301 	and.w	r3, r3, #1
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d005      	beq.n	8009002 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ffa:	f043 0208 	orr.w	r2, r3, #8
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009006:	2b00      	cmp	r3, #0
 8009008:	d078      	beq.n	80090fc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800900a:	69fb      	ldr	r3, [r7, #28]
 800900c:	f003 0320 	and.w	r3, r3, #32
 8009010:	2b00      	cmp	r3, #0
 8009012:	d007      	beq.n	8009024 <HAL_UART_IRQHandler+0x11c>
 8009014:	69bb      	ldr	r3, [r7, #24]
 8009016:	f003 0320 	and.w	r3, r3, #32
 800901a:	2b00      	cmp	r3, #0
 800901c:	d002      	beq.n	8009024 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 fa26 	bl	8009470 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	695b      	ldr	r3, [r3, #20]
 800902a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800902e:	2b40      	cmp	r3, #64	; 0x40
 8009030:	bf0c      	ite	eq
 8009032:	2301      	moveq	r3, #1
 8009034:	2300      	movne	r3, #0
 8009036:	b2db      	uxtb	r3, r3
 8009038:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800903e:	f003 0308 	and.w	r3, r3, #8
 8009042:	2b00      	cmp	r3, #0
 8009044:	d102      	bne.n	800904c <HAL_UART_IRQHandler+0x144>
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d031      	beq.n	80090b0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 f96f 	bl	8009330 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	695b      	ldr	r3, [r3, #20]
 8009058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800905c:	2b40      	cmp	r3, #64	; 0x40
 800905e:	d123      	bne.n	80090a8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	695a      	ldr	r2, [r3, #20]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800906e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009074:	2b00      	cmp	r3, #0
 8009076:	d013      	beq.n	80090a0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800907c:	4a21      	ldr	r2, [pc, #132]	; (8009104 <HAL_UART_IRQHandler+0x1fc>)
 800907e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009084:	4618      	mov	r0, r3
 8009086:	f7fd f90b 	bl	80062a0 <HAL_DMA_Abort_IT>
 800908a:	4603      	mov	r3, r0
 800908c:	2b00      	cmp	r3, #0
 800908e:	d016      	beq.n	80090be <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800909a:	4610      	mov	r0, r2
 800909c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800909e:	e00e      	b.n	80090be <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 f84f 	bl	8009144 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090a6:	e00a      	b.n	80090be <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f000 f84b 	bl	8009144 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090ae:	e006      	b.n	80090be <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 f847 	bl	8009144 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2200      	movs	r2, #0
 80090ba:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80090bc:	e01e      	b.n	80090fc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090be:	bf00      	nop
    return;
 80090c0:	e01c      	b.n	80090fc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80090c2:	69fb      	ldr	r3, [r7, #28]
 80090c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d008      	beq.n	80090de <HAL_UART_IRQHandler+0x1d6>
 80090cc:	69bb      	ldr	r3, [r7, #24]
 80090ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d003      	beq.n	80090de <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 f95c 	bl	8009394 <UART_Transmit_IT>
    return;
 80090dc:	e00f      	b.n	80090fe <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80090de:	69fb      	ldr	r3, [r7, #28]
 80090e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d00a      	beq.n	80090fe <HAL_UART_IRQHandler+0x1f6>
 80090e8:	69bb      	ldr	r3, [r7, #24]
 80090ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d005      	beq.n	80090fe <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 f9a4 	bl	8009440 <UART_EndTransmit_IT>
    return;
 80090f8:	bf00      	nop
 80090fa:	e000      	b.n	80090fe <HAL_UART_IRQHandler+0x1f6>
    return;
 80090fc:	bf00      	nop
  }
}
 80090fe:	3720      	adds	r7, #32
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}
 8009104:	0800936d 	.word	0x0800936d

08009108 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009110:	bf00      	nop
 8009112:	370c      	adds	r7, #12
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009124:	bf00      	nop
 8009126:	370c      	adds	r7, #12
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr

08009130 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009130:	b480      	push	{r7}
 8009132:	b083      	sub	sp, #12
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009138:	bf00      	nop
 800913a:	370c      	adds	r7, #12
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr

08009144 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009144:	b480      	push	{r7}
 8009146:	b083      	sub	sp, #12
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800914c:	bf00      	nop
 800914e:	370c      	adds	r7, #12
 8009150:	46bd      	mov	sp, r7
 8009152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009156:	4770      	bx	lr

08009158 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b084      	sub	sp, #16
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009164:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009170:	2b00      	cmp	r3, #0
 8009172:	d11e      	bne.n	80091b2 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2200      	movs	r2, #0
 8009178:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	68da      	ldr	r2, [r3, #12]
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009188:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	695a      	ldr	r2, [r3, #20]
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f022 0201 	bic.w	r2, r2, #1
 8009198:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	695a      	ldr	r2, [r3, #20]
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091a8:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2220      	movs	r2, #32
 80091ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80091b2:	68f8      	ldr	r0, [r7, #12]
 80091b4:	f7ff ffb2 	bl	800911c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091b8:	bf00      	nop
 80091ba:	3710      	adds	r7, #16
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091cc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80091ce:	68f8      	ldr	r0, [r7, #12]
 80091d0:	f7ff ffae 	bl	8009130 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091d4:	bf00      	nop
 80091d6:	3710      	adds	r7, #16
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80091e4:	2300      	movs	r3, #0
 80091e6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ec:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	695b      	ldr	r3, [r3, #20]
 80091f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091f8:	2b80      	cmp	r3, #128	; 0x80
 80091fa:	bf0c      	ite	eq
 80091fc:	2301      	moveq	r3, #1
 80091fe:	2300      	movne	r3, #0
 8009200:	b2db      	uxtb	r3, r3
 8009202:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800920a:	b2db      	uxtb	r3, r3
 800920c:	2b21      	cmp	r3, #33	; 0x21
 800920e:	d108      	bne.n	8009222 <UART_DMAError+0x46>
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d005      	beq.n	8009222 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	2200      	movs	r2, #0
 800921a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800921c:	68b8      	ldr	r0, [r7, #8]
 800921e:	f000 f871 	bl	8009304 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	695b      	ldr	r3, [r3, #20]
 8009228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800922c:	2b40      	cmp	r3, #64	; 0x40
 800922e:	bf0c      	ite	eq
 8009230:	2301      	moveq	r3, #1
 8009232:	2300      	movne	r3, #0
 8009234:	b2db      	uxtb	r3, r3
 8009236:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800923e:	b2db      	uxtb	r3, r3
 8009240:	2b22      	cmp	r3, #34	; 0x22
 8009242:	d108      	bne.n	8009256 <UART_DMAError+0x7a>
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d005      	beq.n	8009256 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	2200      	movs	r2, #0
 800924e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009250:	68b8      	ldr	r0, [r7, #8]
 8009252:	f000 f86d 	bl	8009330 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800925a:	f043 0210 	orr.w	r2, r3, #16
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009262:	68b8      	ldr	r0, [r7, #8]
 8009264:	f7ff ff6e 	bl	8009144 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009268:	bf00      	nop
 800926a:	3710      	adds	r7, #16
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	60f8      	str	r0, [r7, #12]
 8009278:	60b9      	str	r1, [r7, #8]
 800927a:	603b      	str	r3, [r7, #0]
 800927c:	4613      	mov	r3, r2
 800927e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009280:	e02c      	b.n	80092dc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009282:	69bb      	ldr	r3, [r7, #24]
 8009284:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009288:	d028      	beq.n	80092dc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800928a:	69bb      	ldr	r3, [r7, #24]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d007      	beq.n	80092a0 <UART_WaitOnFlagUntilTimeout+0x30>
 8009290:	f7fc f9ba 	bl	8005608 <HAL_GetTick>
 8009294:	4602      	mov	r2, r0
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	1ad3      	subs	r3, r2, r3
 800929a:	69ba      	ldr	r2, [r7, #24]
 800929c:	429a      	cmp	r2, r3
 800929e:	d21d      	bcs.n	80092dc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	68da      	ldr	r2, [r3, #12]
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80092ae:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	695a      	ldr	r2, [r3, #20]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f022 0201 	bic.w	r2, r2, #1
 80092be:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2220      	movs	r2, #32
 80092c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2220      	movs	r2, #32
 80092cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2200      	movs	r2, #0
 80092d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80092d8:	2303      	movs	r3, #3
 80092da:	e00f      	b.n	80092fc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	4013      	ands	r3, r2
 80092e6:	68ba      	ldr	r2, [r7, #8]
 80092e8:	429a      	cmp	r2, r3
 80092ea:	bf0c      	ite	eq
 80092ec:	2301      	moveq	r3, #1
 80092ee:	2300      	movne	r3, #0
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	461a      	mov	r2, r3
 80092f4:	79fb      	ldrb	r3, [r7, #7]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d0c3      	beq.n	8009282 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80092fa:	2300      	movs	r3, #0
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3710      	adds	r7, #16
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	68da      	ldr	r2, [r3, #12]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800931a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2220      	movs	r2, #32
 8009320:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8009324:	bf00      	nop
 8009326:	370c      	adds	r7, #12
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	68da      	ldr	r2, [r3, #12]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009346:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	695a      	ldr	r2, [r3, #20]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f022 0201 	bic.w	r2, r2, #1
 8009356:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2220      	movs	r2, #32
 800935c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8009360:	bf00      	nop
 8009362:	370c      	adds	r7, #12
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009378:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2200      	movs	r2, #0
 800937e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2200      	movs	r2, #0
 8009384:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009386:	68f8      	ldr	r0, [r7, #12]
 8009388:	f7ff fedc 	bl	8009144 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800938c:	bf00      	nop
 800938e:	3710      	adds	r7, #16
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009394:	b480      	push	{r7}
 8009396:	b085      	sub	sp, #20
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	2b21      	cmp	r3, #33	; 0x21
 80093a6:	d144      	bne.n	8009432 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	689b      	ldr	r3, [r3, #8]
 80093ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093b0:	d11a      	bne.n	80093e8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6a1b      	ldr	r3, [r3, #32]
 80093b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	881b      	ldrh	r3, [r3, #0]
 80093bc:	461a      	mov	r2, r3
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80093c6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	691b      	ldr	r3, [r3, #16]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d105      	bne.n	80093dc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6a1b      	ldr	r3, [r3, #32]
 80093d4:	1c9a      	adds	r2, r3, #2
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	621a      	str	r2, [r3, #32]
 80093da:	e00e      	b.n	80093fa <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6a1b      	ldr	r3, [r3, #32]
 80093e0:	1c5a      	adds	r2, r3, #1
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	621a      	str	r2, [r3, #32]
 80093e6:	e008      	b.n	80093fa <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6a1b      	ldr	r3, [r3, #32]
 80093ec:	1c59      	adds	r1, r3, #1
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	6211      	str	r1, [r2, #32]
 80093f2:	781a      	ldrb	r2, [r3, #0]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80093fe:	b29b      	uxth	r3, r3
 8009400:	3b01      	subs	r3, #1
 8009402:	b29b      	uxth	r3, r3
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	4619      	mov	r1, r3
 8009408:	84d1      	strh	r1, [r2, #38]	; 0x26
 800940a:	2b00      	cmp	r3, #0
 800940c:	d10f      	bne.n	800942e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	68da      	ldr	r2, [r3, #12]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800941c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	68da      	ldr	r2, [r3, #12]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800942c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800942e:	2300      	movs	r3, #0
 8009430:	e000      	b.n	8009434 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009432:	2302      	movs	r3, #2
  }
}
 8009434:	4618      	mov	r0, r3
 8009436:	3714      	adds	r7, #20
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr

08009440 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b082      	sub	sp, #8
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	68da      	ldr	r2, [r3, #12]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009456:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2220      	movs	r2, #32
 800945c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f7ff fe51 	bl	8009108 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009466:	2300      	movs	r3, #0
}
 8009468:	4618      	mov	r0, r3
 800946a:	3708      	adds	r7, #8
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800947e:	b2db      	uxtb	r3, r3
 8009480:	2b22      	cmp	r3, #34	; 0x22
 8009482:	d171      	bne.n	8009568 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800948c:	d123      	bne.n	80094d6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009492:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	691b      	ldr	r3, [r3, #16]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d10e      	bne.n	80094ba <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094a8:	b29a      	uxth	r2, r3
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094b2:	1c9a      	adds	r2, r3, #2
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	629a      	str	r2, [r3, #40]	; 0x28
 80094b8:	e029      	b.n	800950e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	b29b      	uxth	r3, r3
 80094c2:	b2db      	uxtb	r3, r3
 80094c4:	b29a      	uxth	r2, r3
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ce:	1c5a      	adds	r2, r3, #1
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	629a      	str	r2, [r3, #40]	; 0x28
 80094d4:	e01b      	b.n	800950e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	691b      	ldr	r3, [r3, #16]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d10a      	bne.n	80094f4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	6858      	ldr	r0, [r3, #4]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094e8:	1c59      	adds	r1, r3, #1
 80094ea:	687a      	ldr	r2, [r7, #4]
 80094ec:	6291      	str	r1, [r2, #40]	; 0x28
 80094ee:	b2c2      	uxtb	r2, r0
 80094f0:	701a      	strb	r2, [r3, #0]
 80094f2:	e00c      	b.n	800950e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	b2da      	uxtb	r2, r3
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009500:	1c58      	adds	r0, r3, #1
 8009502:	6879      	ldr	r1, [r7, #4]
 8009504:	6288      	str	r0, [r1, #40]	; 0x28
 8009506:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800950a:	b2d2      	uxtb	r2, r2
 800950c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009512:	b29b      	uxth	r3, r3
 8009514:	3b01      	subs	r3, #1
 8009516:	b29b      	uxth	r3, r3
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	4619      	mov	r1, r3
 800951c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800951e:	2b00      	cmp	r3, #0
 8009520:	d120      	bne.n	8009564 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	68da      	ldr	r2, [r3, #12]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f022 0220 	bic.w	r2, r2, #32
 8009530:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	68da      	ldr	r2, [r3, #12]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009540:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	695a      	ldr	r2, [r3, #20]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f022 0201 	bic.w	r2, r2, #1
 8009550:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2220      	movs	r2, #32
 8009556:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f7ff fdde 	bl	800911c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8009560:	2300      	movs	r3, #0
 8009562:	e002      	b.n	800956a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8009564:	2300      	movs	r3, #0
 8009566:	e000      	b.n	800956a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8009568:	2302      	movs	r3, #2
  }
}
 800956a:	4618      	mov	r0, r3
 800956c:	3710      	adds	r7, #16
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}
	...

08009574 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009578:	b085      	sub	sp, #20
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	691b      	ldr	r3, [r3, #16]
 8009584:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	68da      	ldr	r2, [r3, #12]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	430a      	orrs	r2, r1
 8009592:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	689a      	ldr	r2, [r3, #8]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	691b      	ldr	r3, [r3, #16]
 800959c:	431a      	orrs	r2, r3
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	695b      	ldr	r3, [r3, #20]
 80095a2:	431a      	orrs	r2, r3
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	69db      	ldr	r3, [r3, #28]
 80095a8:	4313      	orrs	r3, r2
 80095aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80095b6:	f023 030c 	bic.w	r3, r3, #12
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	6812      	ldr	r2, [r2, #0]
 80095be:	68f9      	ldr	r1, [r7, #12]
 80095c0:	430b      	orrs	r3, r1
 80095c2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	695b      	ldr	r3, [r3, #20]
 80095ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	699a      	ldr	r2, [r3, #24]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	430a      	orrs	r2, r1
 80095d8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	69db      	ldr	r3, [r3, #28]
 80095de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095e2:	f040 8199 	bne.w	8009918 <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4ac6      	ldr	r2, [pc, #792]	; (8009904 <UART_SetConfig+0x390>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d00f      	beq.n	8009610 <UART_SetConfig+0x9c>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4ac4      	ldr	r2, [pc, #784]	; (8009908 <UART_SetConfig+0x394>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d00a      	beq.n	8009610 <UART_SetConfig+0x9c>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4ac3      	ldr	r2, [pc, #780]	; (800990c <UART_SetConfig+0x398>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d005      	beq.n	8009610 <UART_SetConfig+0x9c>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4ac1      	ldr	r2, [pc, #772]	; (8009910 <UART_SetConfig+0x39c>)
 800960a:	4293      	cmp	r3, r2
 800960c:	f040 80bd 	bne.w	800978a <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009610:	f7ff f8be 	bl	8008790 <HAL_RCC_GetPCLK2Freq>
 8009614:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	461d      	mov	r5, r3
 800961a:	f04f 0600 	mov.w	r6, #0
 800961e:	46a8      	mov	r8, r5
 8009620:	46b1      	mov	r9, r6
 8009622:	eb18 0308 	adds.w	r3, r8, r8
 8009626:	eb49 0409 	adc.w	r4, r9, r9
 800962a:	4698      	mov	r8, r3
 800962c:	46a1      	mov	r9, r4
 800962e:	eb18 0805 	adds.w	r8, r8, r5
 8009632:	eb49 0906 	adc.w	r9, r9, r6
 8009636:	f04f 0100 	mov.w	r1, #0
 800963a:	f04f 0200 	mov.w	r2, #0
 800963e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009642:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009646:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800964a:	4688      	mov	r8, r1
 800964c:	4691      	mov	r9, r2
 800964e:	eb18 0005 	adds.w	r0, r8, r5
 8009652:	eb49 0106 	adc.w	r1, r9, r6
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	461d      	mov	r5, r3
 800965c:	f04f 0600 	mov.w	r6, #0
 8009660:	196b      	adds	r3, r5, r5
 8009662:	eb46 0406 	adc.w	r4, r6, r6
 8009666:	461a      	mov	r2, r3
 8009668:	4623      	mov	r3, r4
 800966a:	f7f7 fa7f 	bl	8000b6c <__aeabi_uldivmod>
 800966e:	4603      	mov	r3, r0
 8009670:	460c      	mov	r4, r1
 8009672:	461a      	mov	r2, r3
 8009674:	4ba7      	ldr	r3, [pc, #668]	; (8009914 <UART_SetConfig+0x3a0>)
 8009676:	fba3 2302 	umull	r2, r3, r3, r2
 800967a:	095b      	lsrs	r3, r3, #5
 800967c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	461d      	mov	r5, r3
 8009684:	f04f 0600 	mov.w	r6, #0
 8009688:	46a9      	mov	r9, r5
 800968a:	46b2      	mov	sl, r6
 800968c:	eb19 0309 	adds.w	r3, r9, r9
 8009690:	eb4a 040a 	adc.w	r4, sl, sl
 8009694:	4699      	mov	r9, r3
 8009696:	46a2      	mov	sl, r4
 8009698:	eb19 0905 	adds.w	r9, r9, r5
 800969c:	eb4a 0a06 	adc.w	sl, sl, r6
 80096a0:	f04f 0100 	mov.w	r1, #0
 80096a4:	f04f 0200 	mov.w	r2, #0
 80096a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80096ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80096b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80096b4:	4689      	mov	r9, r1
 80096b6:	4692      	mov	sl, r2
 80096b8:	eb19 0005 	adds.w	r0, r9, r5
 80096bc:	eb4a 0106 	adc.w	r1, sl, r6
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	461d      	mov	r5, r3
 80096c6:	f04f 0600 	mov.w	r6, #0
 80096ca:	196b      	adds	r3, r5, r5
 80096cc:	eb46 0406 	adc.w	r4, r6, r6
 80096d0:	461a      	mov	r2, r3
 80096d2:	4623      	mov	r3, r4
 80096d4:	f7f7 fa4a 	bl	8000b6c <__aeabi_uldivmod>
 80096d8:	4603      	mov	r3, r0
 80096da:	460c      	mov	r4, r1
 80096dc:	461a      	mov	r2, r3
 80096de:	4b8d      	ldr	r3, [pc, #564]	; (8009914 <UART_SetConfig+0x3a0>)
 80096e0:	fba3 1302 	umull	r1, r3, r3, r2
 80096e4:	095b      	lsrs	r3, r3, #5
 80096e6:	2164      	movs	r1, #100	; 0x64
 80096e8:	fb01 f303 	mul.w	r3, r1, r3
 80096ec:	1ad3      	subs	r3, r2, r3
 80096ee:	00db      	lsls	r3, r3, #3
 80096f0:	3332      	adds	r3, #50	; 0x32
 80096f2:	4a88      	ldr	r2, [pc, #544]	; (8009914 <UART_SetConfig+0x3a0>)
 80096f4:	fba2 2303 	umull	r2, r3, r2, r3
 80096f8:	095b      	lsrs	r3, r3, #5
 80096fa:	005b      	lsls	r3, r3, #1
 80096fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009700:	4498      	add	r8, r3
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	461d      	mov	r5, r3
 8009706:	f04f 0600 	mov.w	r6, #0
 800970a:	46a9      	mov	r9, r5
 800970c:	46b2      	mov	sl, r6
 800970e:	eb19 0309 	adds.w	r3, r9, r9
 8009712:	eb4a 040a 	adc.w	r4, sl, sl
 8009716:	4699      	mov	r9, r3
 8009718:	46a2      	mov	sl, r4
 800971a:	eb19 0905 	adds.w	r9, r9, r5
 800971e:	eb4a 0a06 	adc.w	sl, sl, r6
 8009722:	f04f 0100 	mov.w	r1, #0
 8009726:	f04f 0200 	mov.w	r2, #0
 800972a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800972e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009732:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009736:	4689      	mov	r9, r1
 8009738:	4692      	mov	sl, r2
 800973a:	eb19 0005 	adds.w	r0, r9, r5
 800973e:	eb4a 0106 	adc.w	r1, sl, r6
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	461d      	mov	r5, r3
 8009748:	f04f 0600 	mov.w	r6, #0
 800974c:	196b      	adds	r3, r5, r5
 800974e:	eb46 0406 	adc.w	r4, r6, r6
 8009752:	461a      	mov	r2, r3
 8009754:	4623      	mov	r3, r4
 8009756:	f7f7 fa09 	bl	8000b6c <__aeabi_uldivmod>
 800975a:	4603      	mov	r3, r0
 800975c:	460c      	mov	r4, r1
 800975e:	461a      	mov	r2, r3
 8009760:	4b6c      	ldr	r3, [pc, #432]	; (8009914 <UART_SetConfig+0x3a0>)
 8009762:	fba3 1302 	umull	r1, r3, r3, r2
 8009766:	095b      	lsrs	r3, r3, #5
 8009768:	2164      	movs	r1, #100	; 0x64
 800976a:	fb01 f303 	mul.w	r3, r1, r3
 800976e:	1ad3      	subs	r3, r2, r3
 8009770:	00db      	lsls	r3, r3, #3
 8009772:	3332      	adds	r3, #50	; 0x32
 8009774:	4a67      	ldr	r2, [pc, #412]	; (8009914 <UART_SetConfig+0x3a0>)
 8009776:	fba2 2303 	umull	r2, r3, r2, r3
 800977a:	095b      	lsrs	r3, r3, #5
 800977c:	f003 0207 	and.w	r2, r3, #7
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4442      	add	r2, r8
 8009786:	609a      	str	r2, [r3, #8]
 8009788:	e27d      	b.n	8009c86 <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800978a:	f7fe ffed 	bl	8008768 <HAL_RCC_GetPCLK1Freq>
 800978e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	461d      	mov	r5, r3
 8009794:	f04f 0600 	mov.w	r6, #0
 8009798:	46a8      	mov	r8, r5
 800979a:	46b1      	mov	r9, r6
 800979c:	eb18 0308 	adds.w	r3, r8, r8
 80097a0:	eb49 0409 	adc.w	r4, r9, r9
 80097a4:	4698      	mov	r8, r3
 80097a6:	46a1      	mov	r9, r4
 80097a8:	eb18 0805 	adds.w	r8, r8, r5
 80097ac:	eb49 0906 	adc.w	r9, r9, r6
 80097b0:	f04f 0100 	mov.w	r1, #0
 80097b4:	f04f 0200 	mov.w	r2, #0
 80097b8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80097bc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80097c0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80097c4:	4688      	mov	r8, r1
 80097c6:	4691      	mov	r9, r2
 80097c8:	eb18 0005 	adds.w	r0, r8, r5
 80097cc:	eb49 0106 	adc.w	r1, r9, r6
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	461d      	mov	r5, r3
 80097d6:	f04f 0600 	mov.w	r6, #0
 80097da:	196b      	adds	r3, r5, r5
 80097dc:	eb46 0406 	adc.w	r4, r6, r6
 80097e0:	461a      	mov	r2, r3
 80097e2:	4623      	mov	r3, r4
 80097e4:	f7f7 f9c2 	bl	8000b6c <__aeabi_uldivmod>
 80097e8:	4603      	mov	r3, r0
 80097ea:	460c      	mov	r4, r1
 80097ec:	461a      	mov	r2, r3
 80097ee:	4b49      	ldr	r3, [pc, #292]	; (8009914 <UART_SetConfig+0x3a0>)
 80097f0:	fba3 2302 	umull	r2, r3, r3, r2
 80097f4:	095b      	lsrs	r3, r3, #5
 80097f6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	461d      	mov	r5, r3
 80097fe:	f04f 0600 	mov.w	r6, #0
 8009802:	46a9      	mov	r9, r5
 8009804:	46b2      	mov	sl, r6
 8009806:	eb19 0309 	adds.w	r3, r9, r9
 800980a:	eb4a 040a 	adc.w	r4, sl, sl
 800980e:	4699      	mov	r9, r3
 8009810:	46a2      	mov	sl, r4
 8009812:	eb19 0905 	adds.w	r9, r9, r5
 8009816:	eb4a 0a06 	adc.w	sl, sl, r6
 800981a:	f04f 0100 	mov.w	r1, #0
 800981e:	f04f 0200 	mov.w	r2, #0
 8009822:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009826:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800982a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800982e:	4689      	mov	r9, r1
 8009830:	4692      	mov	sl, r2
 8009832:	eb19 0005 	adds.w	r0, r9, r5
 8009836:	eb4a 0106 	adc.w	r1, sl, r6
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	461d      	mov	r5, r3
 8009840:	f04f 0600 	mov.w	r6, #0
 8009844:	196b      	adds	r3, r5, r5
 8009846:	eb46 0406 	adc.w	r4, r6, r6
 800984a:	461a      	mov	r2, r3
 800984c:	4623      	mov	r3, r4
 800984e:	f7f7 f98d 	bl	8000b6c <__aeabi_uldivmod>
 8009852:	4603      	mov	r3, r0
 8009854:	460c      	mov	r4, r1
 8009856:	461a      	mov	r2, r3
 8009858:	4b2e      	ldr	r3, [pc, #184]	; (8009914 <UART_SetConfig+0x3a0>)
 800985a:	fba3 1302 	umull	r1, r3, r3, r2
 800985e:	095b      	lsrs	r3, r3, #5
 8009860:	2164      	movs	r1, #100	; 0x64
 8009862:	fb01 f303 	mul.w	r3, r1, r3
 8009866:	1ad3      	subs	r3, r2, r3
 8009868:	00db      	lsls	r3, r3, #3
 800986a:	3332      	adds	r3, #50	; 0x32
 800986c:	4a29      	ldr	r2, [pc, #164]	; (8009914 <UART_SetConfig+0x3a0>)
 800986e:	fba2 2303 	umull	r2, r3, r2, r3
 8009872:	095b      	lsrs	r3, r3, #5
 8009874:	005b      	lsls	r3, r3, #1
 8009876:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800987a:	4498      	add	r8, r3
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	461d      	mov	r5, r3
 8009880:	f04f 0600 	mov.w	r6, #0
 8009884:	46a9      	mov	r9, r5
 8009886:	46b2      	mov	sl, r6
 8009888:	eb19 0309 	adds.w	r3, r9, r9
 800988c:	eb4a 040a 	adc.w	r4, sl, sl
 8009890:	4699      	mov	r9, r3
 8009892:	46a2      	mov	sl, r4
 8009894:	eb19 0905 	adds.w	r9, r9, r5
 8009898:	eb4a 0a06 	adc.w	sl, sl, r6
 800989c:	f04f 0100 	mov.w	r1, #0
 80098a0:	f04f 0200 	mov.w	r2, #0
 80098a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80098a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80098ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80098b0:	4689      	mov	r9, r1
 80098b2:	4692      	mov	sl, r2
 80098b4:	eb19 0005 	adds.w	r0, r9, r5
 80098b8:	eb4a 0106 	adc.w	r1, sl, r6
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	461d      	mov	r5, r3
 80098c2:	f04f 0600 	mov.w	r6, #0
 80098c6:	196b      	adds	r3, r5, r5
 80098c8:	eb46 0406 	adc.w	r4, r6, r6
 80098cc:	461a      	mov	r2, r3
 80098ce:	4623      	mov	r3, r4
 80098d0:	f7f7 f94c 	bl	8000b6c <__aeabi_uldivmod>
 80098d4:	4603      	mov	r3, r0
 80098d6:	460c      	mov	r4, r1
 80098d8:	461a      	mov	r2, r3
 80098da:	4b0e      	ldr	r3, [pc, #56]	; (8009914 <UART_SetConfig+0x3a0>)
 80098dc:	fba3 1302 	umull	r1, r3, r3, r2
 80098e0:	095b      	lsrs	r3, r3, #5
 80098e2:	2164      	movs	r1, #100	; 0x64
 80098e4:	fb01 f303 	mul.w	r3, r1, r3
 80098e8:	1ad3      	subs	r3, r2, r3
 80098ea:	00db      	lsls	r3, r3, #3
 80098ec:	3332      	adds	r3, #50	; 0x32
 80098ee:	4a09      	ldr	r2, [pc, #36]	; (8009914 <UART_SetConfig+0x3a0>)
 80098f0:	fba2 2303 	umull	r2, r3, r2, r3
 80098f4:	095b      	lsrs	r3, r3, #5
 80098f6:	f003 0207 	and.w	r2, r3, #7
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4442      	add	r2, r8
 8009900:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009902:	e1c0      	b.n	8009c86 <UART_SetConfig+0x712>
 8009904:	40011000 	.word	0x40011000
 8009908:	40011400 	.word	0x40011400
 800990c:	40011800 	.word	0x40011800
 8009910:	40011c00 	.word	0x40011c00
 8009914:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4adc      	ldr	r2, [pc, #880]	; (8009c90 <UART_SetConfig+0x71c>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d00f      	beq.n	8009942 <UART_SetConfig+0x3ce>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	4adb      	ldr	r2, [pc, #876]	; (8009c94 <UART_SetConfig+0x720>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d00a      	beq.n	8009942 <UART_SetConfig+0x3ce>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4ad9      	ldr	r2, [pc, #868]	; (8009c98 <UART_SetConfig+0x724>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d005      	beq.n	8009942 <UART_SetConfig+0x3ce>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4ad8      	ldr	r2, [pc, #864]	; (8009c9c <UART_SetConfig+0x728>)
 800993c:	4293      	cmp	r3, r2
 800993e:	f040 80d1 	bne.w	8009ae4 <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009942:	f7fe ff25 	bl	8008790 <HAL_RCC_GetPCLK2Freq>
 8009946:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	469a      	mov	sl, r3
 800994c:	f04f 0b00 	mov.w	fp, #0
 8009950:	46d0      	mov	r8, sl
 8009952:	46d9      	mov	r9, fp
 8009954:	eb18 0308 	adds.w	r3, r8, r8
 8009958:	eb49 0409 	adc.w	r4, r9, r9
 800995c:	4698      	mov	r8, r3
 800995e:	46a1      	mov	r9, r4
 8009960:	eb18 080a 	adds.w	r8, r8, sl
 8009964:	eb49 090b 	adc.w	r9, r9, fp
 8009968:	f04f 0100 	mov.w	r1, #0
 800996c:	f04f 0200 	mov.w	r2, #0
 8009970:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009974:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009978:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800997c:	4688      	mov	r8, r1
 800997e:	4691      	mov	r9, r2
 8009980:	eb1a 0508 	adds.w	r5, sl, r8
 8009984:	eb4b 0609 	adc.w	r6, fp, r9
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	4619      	mov	r1, r3
 800998e:	f04f 0200 	mov.w	r2, #0
 8009992:	f04f 0300 	mov.w	r3, #0
 8009996:	f04f 0400 	mov.w	r4, #0
 800999a:	0094      	lsls	r4, r2, #2
 800999c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80099a0:	008b      	lsls	r3, r1, #2
 80099a2:	461a      	mov	r2, r3
 80099a4:	4623      	mov	r3, r4
 80099a6:	4628      	mov	r0, r5
 80099a8:	4631      	mov	r1, r6
 80099aa:	f7f7 f8df 	bl	8000b6c <__aeabi_uldivmod>
 80099ae:	4603      	mov	r3, r0
 80099b0:	460c      	mov	r4, r1
 80099b2:	461a      	mov	r2, r3
 80099b4:	4bba      	ldr	r3, [pc, #744]	; (8009ca0 <UART_SetConfig+0x72c>)
 80099b6:	fba3 2302 	umull	r2, r3, r3, r2
 80099ba:	095b      	lsrs	r3, r3, #5
 80099bc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	469b      	mov	fp, r3
 80099c4:	f04f 0c00 	mov.w	ip, #0
 80099c8:	46d9      	mov	r9, fp
 80099ca:	46e2      	mov	sl, ip
 80099cc:	eb19 0309 	adds.w	r3, r9, r9
 80099d0:	eb4a 040a 	adc.w	r4, sl, sl
 80099d4:	4699      	mov	r9, r3
 80099d6:	46a2      	mov	sl, r4
 80099d8:	eb19 090b 	adds.w	r9, r9, fp
 80099dc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80099e0:	f04f 0100 	mov.w	r1, #0
 80099e4:	f04f 0200 	mov.w	r2, #0
 80099e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80099ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80099f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80099f4:	4689      	mov	r9, r1
 80099f6:	4692      	mov	sl, r2
 80099f8:	eb1b 0509 	adds.w	r5, fp, r9
 80099fc:	eb4c 060a 	adc.w	r6, ip, sl
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	4619      	mov	r1, r3
 8009a06:	f04f 0200 	mov.w	r2, #0
 8009a0a:	f04f 0300 	mov.w	r3, #0
 8009a0e:	f04f 0400 	mov.w	r4, #0
 8009a12:	0094      	lsls	r4, r2, #2
 8009a14:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009a18:	008b      	lsls	r3, r1, #2
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	4623      	mov	r3, r4
 8009a1e:	4628      	mov	r0, r5
 8009a20:	4631      	mov	r1, r6
 8009a22:	f7f7 f8a3 	bl	8000b6c <__aeabi_uldivmod>
 8009a26:	4603      	mov	r3, r0
 8009a28:	460c      	mov	r4, r1
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	4b9c      	ldr	r3, [pc, #624]	; (8009ca0 <UART_SetConfig+0x72c>)
 8009a2e:	fba3 1302 	umull	r1, r3, r3, r2
 8009a32:	095b      	lsrs	r3, r3, #5
 8009a34:	2164      	movs	r1, #100	; 0x64
 8009a36:	fb01 f303 	mul.w	r3, r1, r3
 8009a3a:	1ad3      	subs	r3, r2, r3
 8009a3c:	011b      	lsls	r3, r3, #4
 8009a3e:	3332      	adds	r3, #50	; 0x32
 8009a40:	4a97      	ldr	r2, [pc, #604]	; (8009ca0 <UART_SetConfig+0x72c>)
 8009a42:	fba2 2303 	umull	r2, r3, r2, r3
 8009a46:	095b      	lsrs	r3, r3, #5
 8009a48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a4c:	4498      	add	r8, r3
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	469b      	mov	fp, r3
 8009a52:	f04f 0c00 	mov.w	ip, #0
 8009a56:	46d9      	mov	r9, fp
 8009a58:	46e2      	mov	sl, ip
 8009a5a:	eb19 0309 	adds.w	r3, r9, r9
 8009a5e:	eb4a 040a 	adc.w	r4, sl, sl
 8009a62:	4699      	mov	r9, r3
 8009a64:	46a2      	mov	sl, r4
 8009a66:	eb19 090b 	adds.w	r9, r9, fp
 8009a6a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009a6e:	f04f 0100 	mov.w	r1, #0
 8009a72:	f04f 0200 	mov.w	r2, #0
 8009a76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009a7a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009a7e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009a82:	4689      	mov	r9, r1
 8009a84:	4692      	mov	sl, r2
 8009a86:	eb1b 0509 	adds.w	r5, fp, r9
 8009a8a:	eb4c 060a 	adc.w	r6, ip, sl
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	4619      	mov	r1, r3
 8009a94:	f04f 0200 	mov.w	r2, #0
 8009a98:	f04f 0300 	mov.w	r3, #0
 8009a9c:	f04f 0400 	mov.w	r4, #0
 8009aa0:	0094      	lsls	r4, r2, #2
 8009aa2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009aa6:	008b      	lsls	r3, r1, #2
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	4623      	mov	r3, r4
 8009aac:	4628      	mov	r0, r5
 8009aae:	4631      	mov	r1, r6
 8009ab0:	f7f7 f85c 	bl	8000b6c <__aeabi_uldivmod>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	460c      	mov	r4, r1
 8009ab8:	461a      	mov	r2, r3
 8009aba:	4b79      	ldr	r3, [pc, #484]	; (8009ca0 <UART_SetConfig+0x72c>)
 8009abc:	fba3 1302 	umull	r1, r3, r3, r2
 8009ac0:	095b      	lsrs	r3, r3, #5
 8009ac2:	2164      	movs	r1, #100	; 0x64
 8009ac4:	fb01 f303 	mul.w	r3, r1, r3
 8009ac8:	1ad3      	subs	r3, r2, r3
 8009aca:	011b      	lsls	r3, r3, #4
 8009acc:	3332      	adds	r3, #50	; 0x32
 8009ace:	4a74      	ldr	r2, [pc, #464]	; (8009ca0 <UART_SetConfig+0x72c>)
 8009ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ad4:	095b      	lsrs	r3, r3, #5
 8009ad6:	f003 020f 	and.w	r2, r3, #15
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4442      	add	r2, r8
 8009ae0:	609a      	str	r2, [r3, #8]
 8009ae2:	e0d0      	b.n	8009c86 <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009ae4:	f7fe fe40 	bl	8008768 <HAL_RCC_GetPCLK1Freq>
 8009ae8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	469a      	mov	sl, r3
 8009aee:	f04f 0b00 	mov.w	fp, #0
 8009af2:	46d0      	mov	r8, sl
 8009af4:	46d9      	mov	r9, fp
 8009af6:	eb18 0308 	adds.w	r3, r8, r8
 8009afa:	eb49 0409 	adc.w	r4, r9, r9
 8009afe:	4698      	mov	r8, r3
 8009b00:	46a1      	mov	r9, r4
 8009b02:	eb18 080a 	adds.w	r8, r8, sl
 8009b06:	eb49 090b 	adc.w	r9, r9, fp
 8009b0a:	f04f 0100 	mov.w	r1, #0
 8009b0e:	f04f 0200 	mov.w	r2, #0
 8009b12:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009b16:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009b1a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009b1e:	4688      	mov	r8, r1
 8009b20:	4691      	mov	r9, r2
 8009b22:	eb1a 0508 	adds.w	r5, sl, r8
 8009b26:	eb4b 0609 	adc.w	r6, fp, r9
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	685b      	ldr	r3, [r3, #4]
 8009b2e:	4619      	mov	r1, r3
 8009b30:	f04f 0200 	mov.w	r2, #0
 8009b34:	f04f 0300 	mov.w	r3, #0
 8009b38:	f04f 0400 	mov.w	r4, #0
 8009b3c:	0094      	lsls	r4, r2, #2
 8009b3e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009b42:	008b      	lsls	r3, r1, #2
 8009b44:	461a      	mov	r2, r3
 8009b46:	4623      	mov	r3, r4
 8009b48:	4628      	mov	r0, r5
 8009b4a:	4631      	mov	r1, r6
 8009b4c:	f7f7 f80e 	bl	8000b6c <__aeabi_uldivmod>
 8009b50:	4603      	mov	r3, r0
 8009b52:	460c      	mov	r4, r1
 8009b54:	461a      	mov	r2, r3
 8009b56:	4b52      	ldr	r3, [pc, #328]	; (8009ca0 <UART_SetConfig+0x72c>)
 8009b58:	fba3 2302 	umull	r2, r3, r3, r2
 8009b5c:	095b      	lsrs	r3, r3, #5
 8009b5e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	469b      	mov	fp, r3
 8009b66:	f04f 0c00 	mov.w	ip, #0
 8009b6a:	46d9      	mov	r9, fp
 8009b6c:	46e2      	mov	sl, ip
 8009b6e:	eb19 0309 	adds.w	r3, r9, r9
 8009b72:	eb4a 040a 	adc.w	r4, sl, sl
 8009b76:	4699      	mov	r9, r3
 8009b78:	46a2      	mov	sl, r4
 8009b7a:	eb19 090b 	adds.w	r9, r9, fp
 8009b7e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009b82:	f04f 0100 	mov.w	r1, #0
 8009b86:	f04f 0200 	mov.w	r2, #0
 8009b8a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009b8e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009b92:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009b96:	4689      	mov	r9, r1
 8009b98:	4692      	mov	sl, r2
 8009b9a:	eb1b 0509 	adds.w	r5, fp, r9
 8009b9e:	eb4c 060a 	adc.w	r6, ip, sl
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	f04f 0200 	mov.w	r2, #0
 8009bac:	f04f 0300 	mov.w	r3, #0
 8009bb0:	f04f 0400 	mov.w	r4, #0
 8009bb4:	0094      	lsls	r4, r2, #2
 8009bb6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009bba:	008b      	lsls	r3, r1, #2
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	4623      	mov	r3, r4
 8009bc0:	4628      	mov	r0, r5
 8009bc2:	4631      	mov	r1, r6
 8009bc4:	f7f6 ffd2 	bl	8000b6c <__aeabi_uldivmod>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	460c      	mov	r4, r1
 8009bcc:	461a      	mov	r2, r3
 8009bce:	4b34      	ldr	r3, [pc, #208]	; (8009ca0 <UART_SetConfig+0x72c>)
 8009bd0:	fba3 1302 	umull	r1, r3, r3, r2
 8009bd4:	095b      	lsrs	r3, r3, #5
 8009bd6:	2164      	movs	r1, #100	; 0x64
 8009bd8:	fb01 f303 	mul.w	r3, r1, r3
 8009bdc:	1ad3      	subs	r3, r2, r3
 8009bde:	011b      	lsls	r3, r3, #4
 8009be0:	3332      	adds	r3, #50	; 0x32
 8009be2:	4a2f      	ldr	r2, [pc, #188]	; (8009ca0 <UART_SetConfig+0x72c>)
 8009be4:	fba2 2303 	umull	r2, r3, r2, r3
 8009be8:	095b      	lsrs	r3, r3, #5
 8009bea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009bee:	4498      	add	r8, r3
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	469b      	mov	fp, r3
 8009bf4:	f04f 0c00 	mov.w	ip, #0
 8009bf8:	46d9      	mov	r9, fp
 8009bfa:	46e2      	mov	sl, ip
 8009bfc:	eb19 0309 	adds.w	r3, r9, r9
 8009c00:	eb4a 040a 	adc.w	r4, sl, sl
 8009c04:	4699      	mov	r9, r3
 8009c06:	46a2      	mov	sl, r4
 8009c08:	eb19 090b 	adds.w	r9, r9, fp
 8009c0c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009c10:	f04f 0100 	mov.w	r1, #0
 8009c14:	f04f 0200 	mov.w	r2, #0
 8009c18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009c1c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009c20:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009c24:	4689      	mov	r9, r1
 8009c26:	4692      	mov	sl, r2
 8009c28:	eb1b 0509 	adds.w	r5, fp, r9
 8009c2c:	eb4c 060a 	adc.w	r6, ip, sl
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	4619      	mov	r1, r3
 8009c36:	f04f 0200 	mov.w	r2, #0
 8009c3a:	f04f 0300 	mov.w	r3, #0
 8009c3e:	f04f 0400 	mov.w	r4, #0
 8009c42:	0094      	lsls	r4, r2, #2
 8009c44:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009c48:	008b      	lsls	r3, r1, #2
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	4623      	mov	r3, r4
 8009c4e:	4628      	mov	r0, r5
 8009c50:	4631      	mov	r1, r6
 8009c52:	f7f6 ff8b 	bl	8000b6c <__aeabi_uldivmod>
 8009c56:	4603      	mov	r3, r0
 8009c58:	460c      	mov	r4, r1
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	4b10      	ldr	r3, [pc, #64]	; (8009ca0 <UART_SetConfig+0x72c>)
 8009c5e:	fba3 1302 	umull	r1, r3, r3, r2
 8009c62:	095b      	lsrs	r3, r3, #5
 8009c64:	2164      	movs	r1, #100	; 0x64
 8009c66:	fb01 f303 	mul.w	r3, r1, r3
 8009c6a:	1ad3      	subs	r3, r2, r3
 8009c6c:	011b      	lsls	r3, r3, #4
 8009c6e:	3332      	adds	r3, #50	; 0x32
 8009c70:	4a0b      	ldr	r2, [pc, #44]	; (8009ca0 <UART_SetConfig+0x72c>)
 8009c72:	fba2 2303 	umull	r2, r3, r2, r3
 8009c76:	095b      	lsrs	r3, r3, #5
 8009c78:	f003 020f 	and.w	r2, r3, #15
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4442      	add	r2, r8
 8009c82:	609a      	str	r2, [r3, #8]
}
 8009c84:	e7ff      	b.n	8009c86 <UART_SetConfig+0x712>
 8009c86:	bf00      	nop
 8009c88:	3714      	adds	r7, #20
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c90:	40011000 	.word	0x40011000
 8009c94:	40011400 	.word	0x40011400
 8009c98:	40011800 	.word	0x40011800
 8009c9c:	40011c00 	.word	0x40011c00
 8009ca0:	51eb851f 	.word	0x51eb851f

08009ca4 <__errno>:
 8009ca4:	4b01      	ldr	r3, [pc, #4]	; (8009cac <__errno+0x8>)
 8009ca6:	6818      	ldr	r0, [r3, #0]
 8009ca8:	4770      	bx	lr
 8009caa:	bf00      	nop
 8009cac:	20000030 	.word	0x20000030

08009cb0 <__libc_init_array>:
 8009cb0:	b570      	push	{r4, r5, r6, lr}
 8009cb2:	4e0d      	ldr	r6, [pc, #52]	; (8009ce8 <__libc_init_array+0x38>)
 8009cb4:	4c0d      	ldr	r4, [pc, #52]	; (8009cec <__libc_init_array+0x3c>)
 8009cb6:	1ba4      	subs	r4, r4, r6
 8009cb8:	10a4      	asrs	r4, r4, #2
 8009cba:	2500      	movs	r5, #0
 8009cbc:	42a5      	cmp	r5, r4
 8009cbe:	d109      	bne.n	8009cd4 <__libc_init_array+0x24>
 8009cc0:	4e0b      	ldr	r6, [pc, #44]	; (8009cf0 <__libc_init_array+0x40>)
 8009cc2:	4c0c      	ldr	r4, [pc, #48]	; (8009cf4 <__libc_init_array+0x44>)
 8009cc4:	f000 fd16 	bl	800a6f4 <_init>
 8009cc8:	1ba4      	subs	r4, r4, r6
 8009cca:	10a4      	asrs	r4, r4, #2
 8009ccc:	2500      	movs	r5, #0
 8009cce:	42a5      	cmp	r5, r4
 8009cd0:	d105      	bne.n	8009cde <__libc_init_array+0x2e>
 8009cd2:	bd70      	pop	{r4, r5, r6, pc}
 8009cd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009cd8:	4798      	blx	r3
 8009cda:	3501      	adds	r5, #1
 8009cdc:	e7ee      	b.n	8009cbc <__libc_init_array+0xc>
 8009cde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009ce2:	4798      	blx	r3
 8009ce4:	3501      	adds	r5, #1
 8009ce6:	e7f2      	b.n	8009cce <__libc_init_array+0x1e>
 8009ce8:	0800ae7c 	.word	0x0800ae7c
 8009cec:	0800ae7c 	.word	0x0800ae7c
 8009cf0:	0800ae7c 	.word	0x0800ae7c
 8009cf4:	0800ae80 	.word	0x0800ae80

08009cf8 <memcmp>:
 8009cf8:	b530      	push	{r4, r5, lr}
 8009cfa:	2400      	movs	r4, #0
 8009cfc:	42a2      	cmp	r2, r4
 8009cfe:	d101      	bne.n	8009d04 <memcmp+0xc>
 8009d00:	2000      	movs	r0, #0
 8009d02:	e007      	b.n	8009d14 <memcmp+0x1c>
 8009d04:	5d03      	ldrb	r3, [r0, r4]
 8009d06:	3401      	adds	r4, #1
 8009d08:	190d      	adds	r5, r1, r4
 8009d0a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8009d0e:	42ab      	cmp	r3, r5
 8009d10:	d0f4      	beq.n	8009cfc <memcmp+0x4>
 8009d12:	1b58      	subs	r0, r3, r5
 8009d14:	bd30      	pop	{r4, r5, pc}

08009d16 <memcpy>:
 8009d16:	b510      	push	{r4, lr}
 8009d18:	1e43      	subs	r3, r0, #1
 8009d1a:	440a      	add	r2, r1
 8009d1c:	4291      	cmp	r1, r2
 8009d1e:	d100      	bne.n	8009d22 <memcpy+0xc>
 8009d20:	bd10      	pop	{r4, pc}
 8009d22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d2a:	e7f7      	b.n	8009d1c <memcpy+0x6>

08009d2c <memset>:
 8009d2c:	4402      	add	r2, r0
 8009d2e:	4603      	mov	r3, r0
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d100      	bne.n	8009d36 <memset+0xa>
 8009d34:	4770      	bx	lr
 8009d36:	f803 1b01 	strb.w	r1, [r3], #1
 8009d3a:	e7f9      	b.n	8009d30 <memset+0x4>

08009d3c <siprintf>:
 8009d3c:	b40e      	push	{r1, r2, r3}
 8009d3e:	b500      	push	{lr}
 8009d40:	b09c      	sub	sp, #112	; 0x70
 8009d42:	ab1d      	add	r3, sp, #116	; 0x74
 8009d44:	9002      	str	r0, [sp, #8]
 8009d46:	9006      	str	r0, [sp, #24]
 8009d48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009d4c:	4809      	ldr	r0, [pc, #36]	; (8009d74 <siprintf+0x38>)
 8009d4e:	9107      	str	r1, [sp, #28]
 8009d50:	9104      	str	r1, [sp, #16]
 8009d52:	4909      	ldr	r1, [pc, #36]	; (8009d78 <siprintf+0x3c>)
 8009d54:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d58:	9105      	str	r1, [sp, #20]
 8009d5a:	6800      	ldr	r0, [r0, #0]
 8009d5c:	9301      	str	r3, [sp, #4]
 8009d5e:	a902      	add	r1, sp, #8
 8009d60:	f000 f93a 	bl	8009fd8 <_svfiprintf_r>
 8009d64:	9b02      	ldr	r3, [sp, #8]
 8009d66:	2200      	movs	r2, #0
 8009d68:	701a      	strb	r2, [r3, #0]
 8009d6a:	b01c      	add	sp, #112	; 0x70
 8009d6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d70:	b003      	add	sp, #12
 8009d72:	4770      	bx	lr
 8009d74:	20000030 	.word	0x20000030
 8009d78:	ffff0208 	.word	0xffff0208

08009d7c <strncmp>:
 8009d7c:	b510      	push	{r4, lr}
 8009d7e:	b16a      	cbz	r2, 8009d9c <strncmp+0x20>
 8009d80:	3901      	subs	r1, #1
 8009d82:	1884      	adds	r4, r0, r2
 8009d84:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009d88:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d103      	bne.n	8009d98 <strncmp+0x1c>
 8009d90:	42a0      	cmp	r0, r4
 8009d92:	d001      	beq.n	8009d98 <strncmp+0x1c>
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d1f5      	bne.n	8009d84 <strncmp+0x8>
 8009d98:	1a98      	subs	r0, r3, r2
 8009d9a:	bd10      	pop	{r4, pc}
 8009d9c:	4610      	mov	r0, r2
 8009d9e:	e7fc      	b.n	8009d9a <strncmp+0x1e>

08009da0 <strstr>:
 8009da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009da2:	7803      	ldrb	r3, [r0, #0]
 8009da4:	b17b      	cbz	r3, 8009dc6 <strstr+0x26>
 8009da6:	4604      	mov	r4, r0
 8009da8:	7823      	ldrb	r3, [r4, #0]
 8009daa:	4620      	mov	r0, r4
 8009dac:	1c66      	adds	r6, r4, #1
 8009dae:	b17b      	cbz	r3, 8009dd0 <strstr+0x30>
 8009db0:	1e4a      	subs	r2, r1, #1
 8009db2:	1e63      	subs	r3, r4, #1
 8009db4:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8009db8:	b14d      	cbz	r5, 8009dce <strstr+0x2e>
 8009dba:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8009dbe:	42af      	cmp	r7, r5
 8009dc0:	4634      	mov	r4, r6
 8009dc2:	d0f7      	beq.n	8009db4 <strstr+0x14>
 8009dc4:	e7f0      	b.n	8009da8 <strstr+0x8>
 8009dc6:	780b      	ldrb	r3, [r1, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	bf18      	it	ne
 8009dcc:	2000      	movne	r0, #0
 8009dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	e7fc      	b.n	8009dce <strstr+0x2e>

08009dd4 <_strtol_l.isra.0>:
 8009dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dd8:	4680      	mov	r8, r0
 8009dda:	4689      	mov	r9, r1
 8009ddc:	4692      	mov	sl, r2
 8009dde:	461e      	mov	r6, r3
 8009de0:	460f      	mov	r7, r1
 8009de2:	463d      	mov	r5, r7
 8009de4:	9808      	ldr	r0, [sp, #32]
 8009de6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009dea:	f000 f885 	bl	8009ef8 <__locale_ctype_ptr_l>
 8009dee:	4420      	add	r0, r4
 8009df0:	7843      	ldrb	r3, [r0, #1]
 8009df2:	f013 0308 	ands.w	r3, r3, #8
 8009df6:	d132      	bne.n	8009e5e <_strtol_l.isra.0+0x8a>
 8009df8:	2c2d      	cmp	r4, #45	; 0x2d
 8009dfa:	d132      	bne.n	8009e62 <_strtol_l.isra.0+0x8e>
 8009dfc:	787c      	ldrb	r4, [r7, #1]
 8009dfe:	1cbd      	adds	r5, r7, #2
 8009e00:	2201      	movs	r2, #1
 8009e02:	2e00      	cmp	r6, #0
 8009e04:	d05d      	beq.n	8009ec2 <_strtol_l.isra.0+0xee>
 8009e06:	2e10      	cmp	r6, #16
 8009e08:	d109      	bne.n	8009e1e <_strtol_l.isra.0+0x4a>
 8009e0a:	2c30      	cmp	r4, #48	; 0x30
 8009e0c:	d107      	bne.n	8009e1e <_strtol_l.isra.0+0x4a>
 8009e0e:	782b      	ldrb	r3, [r5, #0]
 8009e10:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009e14:	2b58      	cmp	r3, #88	; 0x58
 8009e16:	d14f      	bne.n	8009eb8 <_strtol_l.isra.0+0xe4>
 8009e18:	786c      	ldrb	r4, [r5, #1]
 8009e1a:	2610      	movs	r6, #16
 8009e1c:	3502      	adds	r5, #2
 8009e1e:	2a00      	cmp	r2, #0
 8009e20:	bf14      	ite	ne
 8009e22:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8009e26:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009e2a:	2700      	movs	r7, #0
 8009e2c:	fbb1 fcf6 	udiv	ip, r1, r6
 8009e30:	4638      	mov	r0, r7
 8009e32:	fb06 1e1c 	mls	lr, r6, ip, r1
 8009e36:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009e3a:	2b09      	cmp	r3, #9
 8009e3c:	d817      	bhi.n	8009e6e <_strtol_l.isra.0+0x9a>
 8009e3e:	461c      	mov	r4, r3
 8009e40:	42a6      	cmp	r6, r4
 8009e42:	dd23      	ble.n	8009e8c <_strtol_l.isra.0+0xb8>
 8009e44:	1c7b      	adds	r3, r7, #1
 8009e46:	d007      	beq.n	8009e58 <_strtol_l.isra.0+0x84>
 8009e48:	4584      	cmp	ip, r0
 8009e4a:	d31c      	bcc.n	8009e86 <_strtol_l.isra.0+0xb2>
 8009e4c:	d101      	bne.n	8009e52 <_strtol_l.isra.0+0x7e>
 8009e4e:	45a6      	cmp	lr, r4
 8009e50:	db19      	blt.n	8009e86 <_strtol_l.isra.0+0xb2>
 8009e52:	fb00 4006 	mla	r0, r0, r6, r4
 8009e56:	2701      	movs	r7, #1
 8009e58:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e5c:	e7eb      	b.n	8009e36 <_strtol_l.isra.0+0x62>
 8009e5e:	462f      	mov	r7, r5
 8009e60:	e7bf      	b.n	8009de2 <_strtol_l.isra.0+0xe>
 8009e62:	2c2b      	cmp	r4, #43	; 0x2b
 8009e64:	bf04      	itt	eq
 8009e66:	1cbd      	addeq	r5, r7, #2
 8009e68:	787c      	ldrbeq	r4, [r7, #1]
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	e7c9      	b.n	8009e02 <_strtol_l.isra.0+0x2e>
 8009e6e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8009e72:	2b19      	cmp	r3, #25
 8009e74:	d801      	bhi.n	8009e7a <_strtol_l.isra.0+0xa6>
 8009e76:	3c37      	subs	r4, #55	; 0x37
 8009e78:	e7e2      	b.n	8009e40 <_strtol_l.isra.0+0x6c>
 8009e7a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8009e7e:	2b19      	cmp	r3, #25
 8009e80:	d804      	bhi.n	8009e8c <_strtol_l.isra.0+0xb8>
 8009e82:	3c57      	subs	r4, #87	; 0x57
 8009e84:	e7dc      	b.n	8009e40 <_strtol_l.isra.0+0x6c>
 8009e86:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009e8a:	e7e5      	b.n	8009e58 <_strtol_l.isra.0+0x84>
 8009e8c:	1c7b      	adds	r3, r7, #1
 8009e8e:	d108      	bne.n	8009ea2 <_strtol_l.isra.0+0xce>
 8009e90:	2322      	movs	r3, #34	; 0x22
 8009e92:	f8c8 3000 	str.w	r3, [r8]
 8009e96:	4608      	mov	r0, r1
 8009e98:	f1ba 0f00 	cmp.w	sl, #0
 8009e9c:	d107      	bne.n	8009eae <_strtol_l.isra.0+0xda>
 8009e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ea2:	b102      	cbz	r2, 8009ea6 <_strtol_l.isra.0+0xd2>
 8009ea4:	4240      	negs	r0, r0
 8009ea6:	f1ba 0f00 	cmp.w	sl, #0
 8009eaa:	d0f8      	beq.n	8009e9e <_strtol_l.isra.0+0xca>
 8009eac:	b10f      	cbz	r7, 8009eb2 <_strtol_l.isra.0+0xde>
 8009eae:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8009eb2:	f8ca 9000 	str.w	r9, [sl]
 8009eb6:	e7f2      	b.n	8009e9e <_strtol_l.isra.0+0xca>
 8009eb8:	2430      	movs	r4, #48	; 0x30
 8009eba:	2e00      	cmp	r6, #0
 8009ebc:	d1af      	bne.n	8009e1e <_strtol_l.isra.0+0x4a>
 8009ebe:	2608      	movs	r6, #8
 8009ec0:	e7ad      	b.n	8009e1e <_strtol_l.isra.0+0x4a>
 8009ec2:	2c30      	cmp	r4, #48	; 0x30
 8009ec4:	d0a3      	beq.n	8009e0e <_strtol_l.isra.0+0x3a>
 8009ec6:	260a      	movs	r6, #10
 8009ec8:	e7a9      	b.n	8009e1e <_strtol_l.isra.0+0x4a>
	...

08009ecc <strtol>:
 8009ecc:	4b08      	ldr	r3, [pc, #32]	; (8009ef0 <strtol+0x24>)
 8009ece:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ed0:	681c      	ldr	r4, [r3, #0]
 8009ed2:	4d08      	ldr	r5, [pc, #32]	; (8009ef4 <strtol+0x28>)
 8009ed4:	6a23      	ldr	r3, [r4, #32]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	bf08      	it	eq
 8009eda:	462b      	moveq	r3, r5
 8009edc:	9300      	str	r3, [sp, #0]
 8009ede:	4613      	mov	r3, r2
 8009ee0:	460a      	mov	r2, r1
 8009ee2:	4601      	mov	r1, r0
 8009ee4:	4620      	mov	r0, r4
 8009ee6:	f7ff ff75 	bl	8009dd4 <_strtol_l.isra.0>
 8009eea:	b003      	add	sp, #12
 8009eec:	bd30      	pop	{r4, r5, pc}
 8009eee:	bf00      	nop
 8009ef0:	20000030 	.word	0x20000030
 8009ef4:	20000094 	.word	0x20000094

08009ef8 <__locale_ctype_ptr_l>:
 8009ef8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009efc:	4770      	bx	lr

08009efe <__ascii_mbtowc>:
 8009efe:	b082      	sub	sp, #8
 8009f00:	b901      	cbnz	r1, 8009f04 <__ascii_mbtowc+0x6>
 8009f02:	a901      	add	r1, sp, #4
 8009f04:	b142      	cbz	r2, 8009f18 <__ascii_mbtowc+0x1a>
 8009f06:	b14b      	cbz	r3, 8009f1c <__ascii_mbtowc+0x1e>
 8009f08:	7813      	ldrb	r3, [r2, #0]
 8009f0a:	600b      	str	r3, [r1, #0]
 8009f0c:	7812      	ldrb	r2, [r2, #0]
 8009f0e:	1c10      	adds	r0, r2, #0
 8009f10:	bf18      	it	ne
 8009f12:	2001      	movne	r0, #1
 8009f14:	b002      	add	sp, #8
 8009f16:	4770      	bx	lr
 8009f18:	4610      	mov	r0, r2
 8009f1a:	e7fb      	b.n	8009f14 <__ascii_mbtowc+0x16>
 8009f1c:	f06f 0001 	mvn.w	r0, #1
 8009f20:	e7f8      	b.n	8009f14 <__ascii_mbtowc+0x16>

08009f22 <__ssputs_r>:
 8009f22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f26:	688e      	ldr	r6, [r1, #8]
 8009f28:	429e      	cmp	r6, r3
 8009f2a:	4682      	mov	sl, r0
 8009f2c:	460c      	mov	r4, r1
 8009f2e:	4690      	mov	r8, r2
 8009f30:	4699      	mov	r9, r3
 8009f32:	d837      	bhi.n	8009fa4 <__ssputs_r+0x82>
 8009f34:	898a      	ldrh	r2, [r1, #12]
 8009f36:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f3a:	d031      	beq.n	8009fa0 <__ssputs_r+0x7e>
 8009f3c:	6825      	ldr	r5, [r4, #0]
 8009f3e:	6909      	ldr	r1, [r1, #16]
 8009f40:	1a6f      	subs	r7, r5, r1
 8009f42:	6965      	ldr	r5, [r4, #20]
 8009f44:	2302      	movs	r3, #2
 8009f46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f4a:	fb95 f5f3 	sdiv	r5, r5, r3
 8009f4e:	f109 0301 	add.w	r3, r9, #1
 8009f52:	443b      	add	r3, r7
 8009f54:	429d      	cmp	r5, r3
 8009f56:	bf38      	it	cc
 8009f58:	461d      	movcc	r5, r3
 8009f5a:	0553      	lsls	r3, r2, #21
 8009f5c:	d530      	bpl.n	8009fc0 <__ssputs_r+0x9e>
 8009f5e:	4629      	mov	r1, r5
 8009f60:	f000 fb2e 	bl	800a5c0 <_malloc_r>
 8009f64:	4606      	mov	r6, r0
 8009f66:	b950      	cbnz	r0, 8009f7e <__ssputs_r+0x5c>
 8009f68:	230c      	movs	r3, #12
 8009f6a:	f8ca 3000 	str.w	r3, [sl]
 8009f6e:	89a3      	ldrh	r3, [r4, #12]
 8009f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f74:	81a3      	strh	r3, [r4, #12]
 8009f76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f7e:	463a      	mov	r2, r7
 8009f80:	6921      	ldr	r1, [r4, #16]
 8009f82:	f7ff fec8 	bl	8009d16 <memcpy>
 8009f86:	89a3      	ldrh	r3, [r4, #12]
 8009f88:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f90:	81a3      	strh	r3, [r4, #12]
 8009f92:	6126      	str	r6, [r4, #16]
 8009f94:	6165      	str	r5, [r4, #20]
 8009f96:	443e      	add	r6, r7
 8009f98:	1bed      	subs	r5, r5, r7
 8009f9a:	6026      	str	r6, [r4, #0]
 8009f9c:	60a5      	str	r5, [r4, #8]
 8009f9e:	464e      	mov	r6, r9
 8009fa0:	454e      	cmp	r6, r9
 8009fa2:	d900      	bls.n	8009fa6 <__ssputs_r+0x84>
 8009fa4:	464e      	mov	r6, r9
 8009fa6:	4632      	mov	r2, r6
 8009fa8:	4641      	mov	r1, r8
 8009faa:	6820      	ldr	r0, [r4, #0]
 8009fac:	f000 faa1 	bl	800a4f2 <memmove>
 8009fb0:	68a3      	ldr	r3, [r4, #8]
 8009fb2:	1b9b      	subs	r3, r3, r6
 8009fb4:	60a3      	str	r3, [r4, #8]
 8009fb6:	6823      	ldr	r3, [r4, #0]
 8009fb8:	441e      	add	r6, r3
 8009fba:	6026      	str	r6, [r4, #0]
 8009fbc:	2000      	movs	r0, #0
 8009fbe:	e7dc      	b.n	8009f7a <__ssputs_r+0x58>
 8009fc0:	462a      	mov	r2, r5
 8009fc2:	f000 fb57 	bl	800a674 <_realloc_r>
 8009fc6:	4606      	mov	r6, r0
 8009fc8:	2800      	cmp	r0, #0
 8009fca:	d1e2      	bne.n	8009f92 <__ssputs_r+0x70>
 8009fcc:	6921      	ldr	r1, [r4, #16]
 8009fce:	4650      	mov	r0, sl
 8009fd0:	f000 faa8 	bl	800a524 <_free_r>
 8009fd4:	e7c8      	b.n	8009f68 <__ssputs_r+0x46>
	...

08009fd8 <_svfiprintf_r>:
 8009fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fdc:	461d      	mov	r5, r3
 8009fde:	898b      	ldrh	r3, [r1, #12]
 8009fe0:	061f      	lsls	r7, r3, #24
 8009fe2:	b09d      	sub	sp, #116	; 0x74
 8009fe4:	4680      	mov	r8, r0
 8009fe6:	460c      	mov	r4, r1
 8009fe8:	4616      	mov	r6, r2
 8009fea:	d50f      	bpl.n	800a00c <_svfiprintf_r+0x34>
 8009fec:	690b      	ldr	r3, [r1, #16]
 8009fee:	b96b      	cbnz	r3, 800a00c <_svfiprintf_r+0x34>
 8009ff0:	2140      	movs	r1, #64	; 0x40
 8009ff2:	f000 fae5 	bl	800a5c0 <_malloc_r>
 8009ff6:	6020      	str	r0, [r4, #0]
 8009ff8:	6120      	str	r0, [r4, #16]
 8009ffa:	b928      	cbnz	r0, 800a008 <_svfiprintf_r+0x30>
 8009ffc:	230c      	movs	r3, #12
 8009ffe:	f8c8 3000 	str.w	r3, [r8]
 800a002:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a006:	e0c8      	b.n	800a19a <_svfiprintf_r+0x1c2>
 800a008:	2340      	movs	r3, #64	; 0x40
 800a00a:	6163      	str	r3, [r4, #20]
 800a00c:	2300      	movs	r3, #0
 800a00e:	9309      	str	r3, [sp, #36]	; 0x24
 800a010:	2320      	movs	r3, #32
 800a012:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a016:	2330      	movs	r3, #48	; 0x30
 800a018:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a01c:	9503      	str	r5, [sp, #12]
 800a01e:	f04f 0b01 	mov.w	fp, #1
 800a022:	4637      	mov	r7, r6
 800a024:	463d      	mov	r5, r7
 800a026:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a02a:	b10b      	cbz	r3, 800a030 <_svfiprintf_r+0x58>
 800a02c:	2b25      	cmp	r3, #37	; 0x25
 800a02e:	d13e      	bne.n	800a0ae <_svfiprintf_r+0xd6>
 800a030:	ebb7 0a06 	subs.w	sl, r7, r6
 800a034:	d00b      	beq.n	800a04e <_svfiprintf_r+0x76>
 800a036:	4653      	mov	r3, sl
 800a038:	4632      	mov	r2, r6
 800a03a:	4621      	mov	r1, r4
 800a03c:	4640      	mov	r0, r8
 800a03e:	f7ff ff70 	bl	8009f22 <__ssputs_r>
 800a042:	3001      	adds	r0, #1
 800a044:	f000 80a4 	beq.w	800a190 <_svfiprintf_r+0x1b8>
 800a048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a04a:	4453      	add	r3, sl
 800a04c:	9309      	str	r3, [sp, #36]	; 0x24
 800a04e:	783b      	ldrb	r3, [r7, #0]
 800a050:	2b00      	cmp	r3, #0
 800a052:	f000 809d 	beq.w	800a190 <_svfiprintf_r+0x1b8>
 800a056:	2300      	movs	r3, #0
 800a058:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a05c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a060:	9304      	str	r3, [sp, #16]
 800a062:	9307      	str	r3, [sp, #28]
 800a064:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a068:	931a      	str	r3, [sp, #104]	; 0x68
 800a06a:	462f      	mov	r7, r5
 800a06c:	2205      	movs	r2, #5
 800a06e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a072:	4850      	ldr	r0, [pc, #320]	; (800a1b4 <_svfiprintf_r+0x1dc>)
 800a074:	f7f6 f8ec 	bl	8000250 <memchr>
 800a078:	9b04      	ldr	r3, [sp, #16]
 800a07a:	b9d0      	cbnz	r0, 800a0b2 <_svfiprintf_r+0xda>
 800a07c:	06d9      	lsls	r1, r3, #27
 800a07e:	bf44      	itt	mi
 800a080:	2220      	movmi	r2, #32
 800a082:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a086:	071a      	lsls	r2, r3, #28
 800a088:	bf44      	itt	mi
 800a08a:	222b      	movmi	r2, #43	; 0x2b
 800a08c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a090:	782a      	ldrb	r2, [r5, #0]
 800a092:	2a2a      	cmp	r2, #42	; 0x2a
 800a094:	d015      	beq.n	800a0c2 <_svfiprintf_r+0xea>
 800a096:	9a07      	ldr	r2, [sp, #28]
 800a098:	462f      	mov	r7, r5
 800a09a:	2000      	movs	r0, #0
 800a09c:	250a      	movs	r5, #10
 800a09e:	4639      	mov	r1, r7
 800a0a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0a4:	3b30      	subs	r3, #48	; 0x30
 800a0a6:	2b09      	cmp	r3, #9
 800a0a8:	d94d      	bls.n	800a146 <_svfiprintf_r+0x16e>
 800a0aa:	b1b8      	cbz	r0, 800a0dc <_svfiprintf_r+0x104>
 800a0ac:	e00f      	b.n	800a0ce <_svfiprintf_r+0xf6>
 800a0ae:	462f      	mov	r7, r5
 800a0b0:	e7b8      	b.n	800a024 <_svfiprintf_r+0x4c>
 800a0b2:	4a40      	ldr	r2, [pc, #256]	; (800a1b4 <_svfiprintf_r+0x1dc>)
 800a0b4:	1a80      	subs	r0, r0, r2
 800a0b6:	fa0b f000 	lsl.w	r0, fp, r0
 800a0ba:	4318      	orrs	r0, r3
 800a0bc:	9004      	str	r0, [sp, #16]
 800a0be:	463d      	mov	r5, r7
 800a0c0:	e7d3      	b.n	800a06a <_svfiprintf_r+0x92>
 800a0c2:	9a03      	ldr	r2, [sp, #12]
 800a0c4:	1d11      	adds	r1, r2, #4
 800a0c6:	6812      	ldr	r2, [r2, #0]
 800a0c8:	9103      	str	r1, [sp, #12]
 800a0ca:	2a00      	cmp	r2, #0
 800a0cc:	db01      	blt.n	800a0d2 <_svfiprintf_r+0xfa>
 800a0ce:	9207      	str	r2, [sp, #28]
 800a0d0:	e004      	b.n	800a0dc <_svfiprintf_r+0x104>
 800a0d2:	4252      	negs	r2, r2
 800a0d4:	f043 0302 	orr.w	r3, r3, #2
 800a0d8:	9207      	str	r2, [sp, #28]
 800a0da:	9304      	str	r3, [sp, #16]
 800a0dc:	783b      	ldrb	r3, [r7, #0]
 800a0de:	2b2e      	cmp	r3, #46	; 0x2e
 800a0e0:	d10c      	bne.n	800a0fc <_svfiprintf_r+0x124>
 800a0e2:	787b      	ldrb	r3, [r7, #1]
 800a0e4:	2b2a      	cmp	r3, #42	; 0x2a
 800a0e6:	d133      	bne.n	800a150 <_svfiprintf_r+0x178>
 800a0e8:	9b03      	ldr	r3, [sp, #12]
 800a0ea:	1d1a      	adds	r2, r3, #4
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	9203      	str	r2, [sp, #12]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	bfb8      	it	lt
 800a0f4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a0f8:	3702      	adds	r7, #2
 800a0fa:	9305      	str	r3, [sp, #20]
 800a0fc:	4d2e      	ldr	r5, [pc, #184]	; (800a1b8 <_svfiprintf_r+0x1e0>)
 800a0fe:	7839      	ldrb	r1, [r7, #0]
 800a100:	2203      	movs	r2, #3
 800a102:	4628      	mov	r0, r5
 800a104:	f7f6 f8a4 	bl	8000250 <memchr>
 800a108:	b138      	cbz	r0, 800a11a <_svfiprintf_r+0x142>
 800a10a:	2340      	movs	r3, #64	; 0x40
 800a10c:	1b40      	subs	r0, r0, r5
 800a10e:	fa03 f000 	lsl.w	r0, r3, r0
 800a112:	9b04      	ldr	r3, [sp, #16]
 800a114:	4303      	orrs	r3, r0
 800a116:	3701      	adds	r7, #1
 800a118:	9304      	str	r3, [sp, #16]
 800a11a:	7839      	ldrb	r1, [r7, #0]
 800a11c:	4827      	ldr	r0, [pc, #156]	; (800a1bc <_svfiprintf_r+0x1e4>)
 800a11e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a122:	2206      	movs	r2, #6
 800a124:	1c7e      	adds	r6, r7, #1
 800a126:	f7f6 f893 	bl	8000250 <memchr>
 800a12a:	2800      	cmp	r0, #0
 800a12c:	d038      	beq.n	800a1a0 <_svfiprintf_r+0x1c8>
 800a12e:	4b24      	ldr	r3, [pc, #144]	; (800a1c0 <_svfiprintf_r+0x1e8>)
 800a130:	bb13      	cbnz	r3, 800a178 <_svfiprintf_r+0x1a0>
 800a132:	9b03      	ldr	r3, [sp, #12]
 800a134:	3307      	adds	r3, #7
 800a136:	f023 0307 	bic.w	r3, r3, #7
 800a13a:	3308      	adds	r3, #8
 800a13c:	9303      	str	r3, [sp, #12]
 800a13e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a140:	444b      	add	r3, r9
 800a142:	9309      	str	r3, [sp, #36]	; 0x24
 800a144:	e76d      	b.n	800a022 <_svfiprintf_r+0x4a>
 800a146:	fb05 3202 	mla	r2, r5, r2, r3
 800a14a:	2001      	movs	r0, #1
 800a14c:	460f      	mov	r7, r1
 800a14e:	e7a6      	b.n	800a09e <_svfiprintf_r+0xc6>
 800a150:	2300      	movs	r3, #0
 800a152:	3701      	adds	r7, #1
 800a154:	9305      	str	r3, [sp, #20]
 800a156:	4619      	mov	r1, r3
 800a158:	250a      	movs	r5, #10
 800a15a:	4638      	mov	r0, r7
 800a15c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a160:	3a30      	subs	r2, #48	; 0x30
 800a162:	2a09      	cmp	r2, #9
 800a164:	d903      	bls.n	800a16e <_svfiprintf_r+0x196>
 800a166:	2b00      	cmp	r3, #0
 800a168:	d0c8      	beq.n	800a0fc <_svfiprintf_r+0x124>
 800a16a:	9105      	str	r1, [sp, #20]
 800a16c:	e7c6      	b.n	800a0fc <_svfiprintf_r+0x124>
 800a16e:	fb05 2101 	mla	r1, r5, r1, r2
 800a172:	2301      	movs	r3, #1
 800a174:	4607      	mov	r7, r0
 800a176:	e7f0      	b.n	800a15a <_svfiprintf_r+0x182>
 800a178:	ab03      	add	r3, sp, #12
 800a17a:	9300      	str	r3, [sp, #0]
 800a17c:	4622      	mov	r2, r4
 800a17e:	4b11      	ldr	r3, [pc, #68]	; (800a1c4 <_svfiprintf_r+0x1ec>)
 800a180:	a904      	add	r1, sp, #16
 800a182:	4640      	mov	r0, r8
 800a184:	f3af 8000 	nop.w
 800a188:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a18c:	4681      	mov	r9, r0
 800a18e:	d1d6      	bne.n	800a13e <_svfiprintf_r+0x166>
 800a190:	89a3      	ldrh	r3, [r4, #12]
 800a192:	065b      	lsls	r3, r3, #25
 800a194:	f53f af35 	bmi.w	800a002 <_svfiprintf_r+0x2a>
 800a198:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a19a:	b01d      	add	sp, #116	; 0x74
 800a19c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1a0:	ab03      	add	r3, sp, #12
 800a1a2:	9300      	str	r3, [sp, #0]
 800a1a4:	4622      	mov	r2, r4
 800a1a6:	4b07      	ldr	r3, [pc, #28]	; (800a1c4 <_svfiprintf_r+0x1ec>)
 800a1a8:	a904      	add	r1, sp, #16
 800a1aa:	4640      	mov	r0, r8
 800a1ac:	f000 f882 	bl	800a2b4 <_printf_i>
 800a1b0:	e7ea      	b.n	800a188 <_svfiprintf_r+0x1b0>
 800a1b2:	bf00      	nop
 800a1b4:	0800ad3e 	.word	0x0800ad3e
 800a1b8:	0800ad44 	.word	0x0800ad44
 800a1bc:	0800ad48 	.word	0x0800ad48
 800a1c0:	00000000 	.word	0x00000000
 800a1c4:	08009f23 	.word	0x08009f23

0800a1c8 <_printf_common>:
 800a1c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1cc:	4691      	mov	r9, r2
 800a1ce:	461f      	mov	r7, r3
 800a1d0:	688a      	ldr	r2, [r1, #8]
 800a1d2:	690b      	ldr	r3, [r1, #16]
 800a1d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	bfb8      	it	lt
 800a1dc:	4613      	movlt	r3, r2
 800a1de:	f8c9 3000 	str.w	r3, [r9]
 800a1e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a1e6:	4606      	mov	r6, r0
 800a1e8:	460c      	mov	r4, r1
 800a1ea:	b112      	cbz	r2, 800a1f2 <_printf_common+0x2a>
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	f8c9 3000 	str.w	r3, [r9]
 800a1f2:	6823      	ldr	r3, [r4, #0]
 800a1f4:	0699      	lsls	r1, r3, #26
 800a1f6:	bf42      	ittt	mi
 800a1f8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a1fc:	3302      	addmi	r3, #2
 800a1fe:	f8c9 3000 	strmi.w	r3, [r9]
 800a202:	6825      	ldr	r5, [r4, #0]
 800a204:	f015 0506 	ands.w	r5, r5, #6
 800a208:	d107      	bne.n	800a21a <_printf_common+0x52>
 800a20a:	f104 0a19 	add.w	sl, r4, #25
 800a20e:	68e3      	ldr	r3, [r4, #12]
 800a210:	f8d9 2000 	ldr.w	r2, [r9]
 800a214:	1a9b      	subs	r3, r3, r2
 800a216:	42ab      	cmp	r3, r5
 800a218:	dc28      	bgt.n	800a26c <_printf_common+0xa4>
 800a21a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a21e:	6822      	ldr	r2, [r4, #0]
 800a220:	3300      	adds	r3, #0
 800a222:	bf18      	it	ne
 800a224:	2301      	movne	r3, #1
 800a226:	0692      	lsls	r2, r2, #26
 800a228:	d42d      	bmi.n	800a286 <_printf_common+0xbe>
 800a22a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a22e:	4639      	mov	r1, r7
 800a230:	4630      	mov	r0, r6
 800a232:	47c0      	blx	r8
 800a234:	3001      	adds	r0, #1
 800a236:	d020      	beq.n	800a27a <_printf_common+0xb2>
 800a238:	6823      	ldr	r3, [r4, #0]
 800a23a:	68e5      	ldr	r5, [r4, #12]
 800a23c:	f8d9 2000 	ldr.w	r2, [r9]
 800a240:	f003 0306 	and.w	r3, r3, #6
 800a244:	2b04      	cmp	r3, #4
 800a246:	bf08      	it	eq
 800a248:	1aad      	subeq	r5, r5, r2
 800a24a:	68a3      	ldr	r3, [r4, #8]
 800a24c:	6922      	ldr	r2, [r4, #16]
 800a24e:	bf0c      	ite	eq
 800a250:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a254:	2500      	movne	r5, #0
 800a256:	4293      	cmp	r3, r2
 800a258:	bfc4      	itt	gt
 800a25a:	1a9b      	subgt	r3, r3, r2
 800a25c:	18ed      	addgt	r5, r5, r3
 800a25e:	f04f 0900 	mov.w	r9, #0
 800a262:	341a      	adds	r4, #26
 800a264:	454d      	cmp	r5, r9
 800a266:	d11a      	bne.n	800a29e <_printf_common+0xd6>
 800a268:	2000      	movs	r0, #0
 800a26a:	e008      	b.n	800a27e <_printf_common+0xb6>
 800a26c:	2301      	movs	r3, #1
 800a26e:	4652      	mov	r2, sl
 800a270:	4639      	mov	r1, r7
 800a272:	4630      	mov	r0, r6
 800a274:	47c0      	blx	r8
 800a276:	3001      	adds	r0, #1
 800a278:	d103      	bne.n	800a282 <_printf_common+0xba>
 800a27a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a27e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a282:	3501      	adds	r5, #1
 800a284:	e7c3      	b.n	800a20e <_printf_common+0x46>
 800a286:	18e1      	adds	r1, r4, r3
 800a288:	1c5a      	adds	r2, r3, #1
 800a28a:	2030      	movs	r0, #48	; 0x30
 800a28c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a290:	4422      	add	r2, r4
 800a292:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a296:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a29a:	3302      	adds	r3, #2
 800a29c:	e7c5      	b.n	800a22a <_printf_common+0x62>
 800a29e:	2301      	movs	r3, #1
 800a2a0:	4622      	mov	r2, r4
 800a2a2:	4639      	mov	r1, r7
 800a2a4:	4630      	mov	r0, r6
 800a2a6:	47c0      	blx	r8
 800a2a8:	3001      	adds	r0, #1
 800a2aa:	d0e6      	beq.n	800a27a <_printf_common+0xb2>
 800a2ac:	f109 0901 	add.w	r9, r9, #1
 800a2b0:	e7d8      	b.n	800a264 <_printf_common+0x9c>
	...

0800a2b4 <_printf_i>:
 800a2b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a2b8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a2bc:	460c      	mov	r4, r1
 800a2be:	7e09      	ldrb	r1, [r1, #24]
 800a2c0:	b085      	sub	sp, #20
 800a2c2:	296e      	cmp	r1, #110	; 0x6e
 800a2c4:	4617      	mov	r7, r2
 800a2c6:	4606      	mov	r6, r0
 800a2c8:	4698      	mov	r8, r3
 800a2ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2cc:	f000 80b3 	beq.w	800a436 <_printf_i+0x182>
 800a2d0:	d822      	bhi.n	800a318 <_printf_i+0x64>
 800a2d2:	2963      	cmp	r1, #99	; 0x63
 800a2d4:	d036      	beq.n	800a344 <_printf_i+0x90>
 800a2d6:	d80a      	bhi.n	800a2ee <_printf_i+0x3a>
 800a2d8:	2900      	cmp	r1, #0
 800a2da:	f000 80b9 	beq.w	800a450 <_printf_i+0x19c>
 800a2de:	2958      	cmp	r1, #88	; 0x58
 800a2e0:	f000 8083 	beq.w	800a3ea <_printf_i+0x136>
 800a2e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2e8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a2ec:	e032      	b.n	800a354 <_printf_i+0xa0>
 800a2ee:	2964      	cmp	r1, #100	; 0x64
 800a2f0:	d001      	beq.n	800a2f6 <_printf_i+0x42>
 800a2f2:	2969      	cmp	r1, #105	; 0x69
 800a2f4:	d1f6      	bne.n	800a2e4 <_printf_i+0x30>
 800a2f6:	6820      	ldr	r0, [r4, #0]
 800a2f8:	6813      	ldr	r3, [r2, #0]
 800a2fa:	0605      	lsls	r5, r0, #24
 800a2fc:	f103 0104 	add.w	r1, r3, #4
 800a300:	d52a      	bpl.n	800a358 <_printf_i+0xa4>
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	6011      	str	r1, [r2, #0]
 800a306:	2b00      	cmp	r3, #0
 800a308:	da03      	bge.n	800a312 <_printf_i+0x5e>
 800a30a:	222d      	movs	r2, #45	; 0x2d
 800a30c:	425b      	negs	r3, r3
 800a30e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a312:	486f      	ldr	r0, [pc, #444]	; (800a4d0 <_printf_i+0x21c>)
 800a314:	220a      	movs	r2, #10
 800a316:	e039      	b.n	800a38c <_printf_i+0xd8>
 800a318:	2973      	cmp	r1, #115	; 0x73
 800a31a:	f000 809d 	beq.w	800a458 <_printf_i+0x1a4>
 800a31e:	d808      	bhi.n	800a332 <_printf_i+0x7e>
 800a320:	296f      	cmp	r1, #111	; 0x6f
 800a322:	d020      	beq.n	800a366 <_printf_i+0xb2>
 800a324:	2970      	cmp	r1, #112	; 0x70
 800a326:	d1dd      	bne.n	800a2e4 <_printf_i+0x30>
 800a328:	6823      	ldr	r3, [r4, #0]
 800a32a:	f043 0320 	orr.w	r3, r3, #32
 800a32e:	6023      	str	r3, [r4, #0]
 800a330:	e003      	b.n	800a33a <_printf_i+0x86>
 800a332:	2975      	cmp	r1, #117	; 0x75
 800a334:	d017      	beq.n	800a366 <_printf_i+0xb2>
 800a336:	2978      	cmp	r1, #120	; 0x78
 800a338:	d1d4      	bne.n	800a2e4 <_printf_i+0x30>
 800a33a:	2378      	movs	r3, #120	; 0x78
 800a33c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a340:	4864      	ldr	r0, [pc, #400]	; (800a4d4 <_printf_i+0x220>)
 800a342:	e055      	b.n	800a3f0 <_printf_i+0x13c>
 800a344:	6813      	ldr	r3, [r2, #0]
 800a346:	1d19      	adds	r1, r3, #4
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	6011      	str	r1, [r2, #0]
 800a34c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a350:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a354:	2301      	movs	r3, #1
 800a356:	e08c      	b.n	800a472 <_printf_i+0x1be>
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	6011      	str	r1, [r2, #0]
 800a35c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a360:	bf18      	it	ne
 800a362:	b21b      	sxthne	r3, r3
 800a364:	e7cf      	b.n	800a306 <_printf_i+0x52>
 800a366:	6813      	ldr	r3, [r2, #0]
 800a368:	6825      	ldr	r5, [r4, #0]
 800a36a:	1d18      	adds	r0, r3, #4
 800a36c:	6010      	str	r0, [r2, #0]
 800a36e:	0628      	lsls	r0, r5, #24
 800a370:	d501      	bpl.n	800a376 <_printf_i+0xc2>
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	e002      	b.n	800a37c <_printf_i+0xc8>
 800a376:	0668      	lsls	r0, r5, #25
 800a378:	d5fb      	bpl.n	800a372 <_printf_i+0xbe>
 800a37a:	881b      	ldrh	r3, [r3, #0]
 800a37c:	4854      	ldr	r0, [pc, #336]	; (800a4d0 <_printf_i+0x21c>)
 800a37e:	296f      	cmp	r1, #111	; 0x6f
 800a380:	bf14      	ite	ne
 800a382:	220a      	movne	r2, #10
 800a384:	2208      	moveq	r2, #8
 800a386:	2100      	movs	r1, #0
 800a388:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a38c:	6865      	ldr	r5, [r4, #4]
 800a38e:	60a5      	str	r5, [r4, #8]
 800a390:	2d00      	cmp	r5, #0
 800a392:	f2c0 8095 	blt.w	800a4c0 <_printf_i+0x20c>
 800a396:	6821      	ldr	r1, [r4, #0]
 800a398:	f021 0104 	bic.w	r1, r1, #4
 800a39c:	6021      	str	r1, [r4, #0]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d13d      	bne.n	800a41e <_printf_i+0x16a>
 800a3a2:	2d00      	cmp	r5, #0
 800a3a4:	f040 808e 	bne.w	800a4c4 <_printf_i+0x210>
 800a3a8:	4665      	mov	r5, ip
 800a3aa:	2a08      	cmp	r2, #8
 800a3ac:	d10b      	bne.n	800a3c6 <_printf_i+0x112>
 800a3ae:	6823      	ldr	r3, [r4, #0]
 800a3b0:	07db      	lsls	r3, r3, #31
 800a3b2:	d508      	bpl.n	800a3c6 <_printf_i+0x112>
 800a3b4:	6923      	ldr	r3, [r4, #16]
 800a3b6:	6862      	ldr	r2, [r4, #4]
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	bfde      	ittt	le
 800a3bc:	2330      	movle	r3, #48	; 0x30
 800a3be:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a3c2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a3c6:	ebac 0305 	sub.w	r3, ip, r5
 800a3ca:	6123      	str	r3, [r4, #16]
 800a3cc:	f8cd 8000 	str.w	r8, [sp]
 800a3d0:	463b      	mov	r3, r7
 800a3d2:	aa03      	add	r2, sp, #12
 800a3d4:	4621      	mov	r1, r4
 800a3d6:	4630      	mov	r0, r6
 800a3d8:	f7ff fef6 	bl	800a1c8 <_printf_common>
 800a3dc:	3001      	adds	r0, #1
 800a3de:	d14d      	bne.n	800a47c <_printf_i+0x1c8>
 800a3e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3e4:	b005      	add	sp, #20
 800a3e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3ea:	4839      	ldr	r0, [pc, #228]	; (800a4d0 <_printf_i+0x21c>)
 800a3ec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a3f0:	6813      	ldr	r3, [r2, #0]
 800a3f2:	6821      	ldr	r1, [r4, #0]
 800a3f4:	1d1d      	adds	r5, r3, #4
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	6015      	str	r5, [r2, #0]
 800a3fa:	060a      	lsls	r2, r1, #24
 800a3fc:	d50b      	bpl.n	800a416 <_printf_i+0x162>
 800a3fe:	07ca      	lsls	r2, r1, #31
 800a400:	bf44      	itt	mi
 800a402:	f041 0120 	orrmi.w	r1, r1, #32
 800a406:	6021      	strmi	r1, [r4, #0]
 800a408:	b91b      	cbnz	r3, 800a412 <_printf_i+0x15e>
 800a40a:	6822      	ldr	r2, [r4, #0]
 800a40c:	f022 0220 	bic.w	r2, r2, #32
 800a410:	6022      	str	r2, [r4, #0]
 800a412:	2210      	movs	r2, #16
 800a414:	e7b7      	b.n	800a386 <_printf_i+0xd2>
 800a416:	064d      	lsls	r5, r1, #25
 800a418:	bf48      	it	mi
 800a41a:	b29b      	uxthmi	r3, r3
 800a41c:	e7ef      	b.n	800a3fe <_printf_i+0x14a>
 800a41e:	4665      	mov	r5, ip
 800a420:	fbb3 f1f2 	udiv	r1, r3, r2
 800a424:	fb02 3311 	mls	r3, r2, r1, r3
 800a428:	5cc3      	ldrb	r3, [r0, r3]
 800a42a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a42e:	460b      	mov	r3, r1
 800a430:	2900      	cmp	r1, #0
 800a432:	d1f5      	bne.n	800a420 <_printf_i+0x16c>
 800a434:	e7b9      	b.n	800a3aa <_printf_i+0xf6>
 800a436:	6813      	ldr	r3, [r2, #0]
 800a438:	6825      	ldr	r5, [r4, #0]
 800a43a:	6961      	ldr	r1, [r4, #20]
 800a43c:	1d18      	adds	r0, r3, #4
 800a43e:	6010      	str	r0, [r2, #0]
 800a440:	0628      	lsls	r0, r5, #24
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	d501      	bpl.n	800a44a <_printf_i+0x196>
 800a446:	6019      	str	r1, [r3, #0]
 800a448:	e002      	b.n	800a450 <_printf_i+0x19c>
 800a44a:	066a      	lsls	r2, r5, #25
 800a44c:	d5fb      	bpl.n	800a446 <_printf_i+0x192>
 800a44e:	8019      	strh	r1, [r3, #0]
 800a450:	2300      	movs	r3, #0
 800a452:	6123      	str	r3, [r4, #16]
 800a454:	4665      	mov	r5, ip
 800a456:	e7b9      	b.n	800a3cc <_printf_i+0x118>
 800a458:	6813      	ldr	r3, [r2, #0]
 800a45a:	1d19      	adds	r1, r3, #4
 800a45c:	6011      	str	r1, [r2, #0]
 800a45e:	681d      	ldr	r5, [r3, #0]
 800a460:	6862      	ldr	r2, [r4, #4]
 800a462:	2100      	movs	r1, #0
 800a464:	4628      	mov	r0, r5
 800a466:	f7f5 fef3 	bl	8000250 <memchr>
 800a46a:	b108      	cbz	r0, 800a470 <_printf_i+0x1bc>
 800a46c:	1b40      	subs	r0, r0, r5
 800a46e:	6060      	str	r0, [r4, #4]
 800a470:	6863      	ldr	r3, [r4, #4]
 800a472:	6123      	str	r3, [r4, #16]
 800a474:	2300      	movs	r3, #0
 800a476:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a47a:	e7a7      	b.n	800a3cc <_printf_i+0x118>
 800a47c:	6923      	ldr	r3, [r4, #16]
 800a47e:	462a      	mov	r2, r5
 800a480:	4639      	mov	r1, r7
 800a482:	4630      	mov	r0, r6
 800a484:	47c0      	blx	r8
 800a486:	3001      	adds	r0, #1
 800a488:	d0aa      	beq.n	800a3e0 <_printf_i+0x12c>
 800a48a:	6823      	ldr	r3, [r4, #0]
 800a48c:	079b      	lsls	r3, r3, #30
 800a48e:	d413      	bmi.n	800a4b8 <_printf_i+0x204>
 800a490:	68e0      	ldr	r0, [r4, #12]
 800a492:	9b03      	ldr	r3, [sp, #12]
 800a494:	4298      	cmp	r0, r3
 800a496:	bfb8      	it	lt
 800a498:	4618      	movlt	r0, r3
 800a49a:	e7a3      	b.n	800a3e4 <_printf_i+0x130>
 800a49c:	2301      	movs	r3, #1
 800a49e:	464a      	mov	r2, r9
 800a4a0:	4639      	mov	r1, r7
 800a4a2:	4630      	mov	r0, r6
 800a4a4:	47c0      	blx	r8
 800a4a6:	3001      	adds	r0, #1
 800a4a8:	d09a      	beq.n	800a3e0 <_printf_i+0x12c>
 800a4aa:	3501      	adds	r5, #1
 800a4ac:	68e3      	ldr	r3, [r4, #12]
 800a4ae:	9a03      	ldr	r2, [sp, #12]
 800a4b0:	1a9b      	subs	r3, r3, r2
 800a4b2:	42ab      	cmp	r3, r5
 800a4b4:	dcf2      	bgt.n	800a49c <_printf_i+0x1e8>
 800a4b6:	e7eb      	b.n	800a490 <_printf_i+0x1dc>
 800a4b8:	2500      	movs	r5, #0
 800a4ba:	f104 0919 	add.w	r9, r4, #25
 800a4be:	e7f5      	b.n	800a4ac <_printf_i+0x1f8>
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d1ac      	bne.n	800a41e <_printf_i+0x16a>
 800a4c4:	7803      	ldrb	r3, [r0, #0]
 800a4c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a4ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a4ce:	e76c      	b.n	800a3aa <_printf_i+0xf6>
 800a4d0:	0800ad4f 	.word	0x0800ad4f
 800a4d4:	0800ad60 	.word	0x0800ad60

0800a4d8 <__ascii_wctomb>:
 800a4d8:	b149      	cbz	r1, 800a4ee <__ascii_wctomb+0x16>
 800a4da:	2aff      	cmp	r2, #255	; 0xff
 800a4dc:	bf85      	ittet	hi
 800a4de:	238a      	movhi	r3, #138	; 0x8a
 800a4e0:	6003      	strhi	r3, [r0, #0]
 800a4e2:	700a      	strbls	r2, [r1, #0]
 800a4e4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a4e8:	bf98      	it	ls
 800a4ea:	2001      	movls	r0, #1
 800a4ec:	4770      	bx	lr
 800a4ee:	4608      	mov	r0, r1
 800a4f0:	4770      	bx	lr

0800a4f2 <memmove>:
 800a4f2:	4288      	cmp	r0, r1
 800a4f4:	b510      	push	{r4, lr}
 800a4f6:	eb01 0302 	add.w	r3, r1, r2
 800a4fa:	d807      	bhi.n	800a50c <memmove+0x1a>
 800a4fc:	1e42      	subs	r2, r0, #1
 800a4fe:	4299      	cmp	r1, r3
 800a500:	d00a      	beq.n	800a518 <memmove+0x26>
 800a502:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a506:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a50a:	e7f8      	b.n	800a4fe <memmove+0xc>
 800a50c:	4283      	cmp	r3, r0
 800a50e:	d9f5      	bls.n	800a4fc <memmove+0xa>
 800a510:	1881      	adds	r1, r0, r2
 800a512:	1ad2      	subs	r2, r2, r3
 800a514:	42d3      	cmn	r3, r2
 800a516:	d100      	bne.n	800a51a <memmove+0x28>
 800a518:	bd10      	pop	{r4, pc}
 800a51a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a51e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a522:	e7f7      	b.n	800a514 <memmove+0x22>

0800a524 <_free_r>:
 800a524:	b538      	push	{r3, r4, r5, lr}
 800a526:	4605      	mov	r5, r0
 800a528:	2900      	cmp	r1, #0
 800a52a:	d045      	beq.n	800a5b8 <_free_r+0x94>
 800a52c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a530:	1f0c      	subs	r4, r1, #4
 800a532:	2b00      	cmp	r3, #0
 800a534:	bfb8      	it	lt
 800a536:	18e4      	addlt	r4, r4, r3
 800a538:	f000 f8d2 	bl	800a6e0 <__malloc_lock>
 800a53c:	4a1f      	ldr	r2, [pc, #124]	; (800a5bc <_free_r+0x98>)
 800a53e:	6813      	ldr	r3, [r2, #0]
 800a540:	4610      	mov	r0, r2
 800a542:	b933      	cbnz	r3, 800a552 <_free_r+0x2e>
 800a544:	6063      	str	r3, [r4, #4]
 800a546:	6014      	str	r4, [r2, #0]
 800a548:	4628      	mov	r0, r5
 800a54a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a54e:	f000 b8c8 	b.w	800a6e2 <__malloc_unlock>
 800a552:	42a3      	cmp	r3, r4
 800a554:	d90c      	bls.n	800a570 <_free_r+0x4c>
 800a556:	6821      	ldr	r1, [r4, #0]
 800a558:	1862      	adds	r2, r4, r1
 800a55a:	4293      	cmp	r3, r2
 800a55c:	bf04      	itt	eq
 800a55e:	681a      	ldreq	r2, [r3, #0]
 800a560:	685b      	ldreq	r3, [r3, #4]
 800a562:	6063      	str	r3, [r4, #4]
 800a564:	bf04      	itt	eq
 800a566:	1852      	addeq	r2, r2, r1
 800a568:	6022      	streq	r2, [r4, #0]
 800a56a:	6004      	str	r4, [r0, #0]
 800a56c:	e7ec      	b.n	800a548 <_free_r+0x24>
 800a56e:	4613      	mov	r3, r2
 800a570:	685a      	ldr	r2, [r3, #4]
 800a572:	b10a      	cbz	r2, 800a578 <_free_r+0x54>
 800a574:	42a2      	cmp	r2, r4
 800a576:	d9fa      	bls.n	800a56e <_free_r+0x4a>
 800a578:	6819      	ldr	r1, [r3, #0]
 800a57a:	1858      	adds	r0, r3, r1
 800a57c:	42a0      	cmp	r0, r4
 800a57e:	d10b      	bne.n	800a598 <_free_r+0x74>
 800a580:	6820      	ldr	r0, [r4, #0]
 800a582:	4401      	add	r1, r0
 800a584:	1858      	adds	r0, r3, r1
 800a586:	4282      	cmp	r2, r0
 800a588:	6019      	str	r1, [r3, #0]
 800a58a:	d1dd      	bne.n	800a548 <_free_r+0x24>
 800a58c:	6810      	ldr	r0, [r2, #0]
 800a58e:	6852      	ldr	r2, [r2, #4]
 800a590:	605a      	str	r2, [r3, #4]
 800a592:	4401      	add	r1, r0
 800a594:	6019      	str	r1, [r3, #0]
 800a596:	e7d7      	b.n	800a548 <_free_r+0x24>
 800a598:	d902      	bls.n	800a5a0 <_free_r+0x7c>
 800a59a:	230c      	movs	r3, #12
 800a59c:	602b      	str	r3, [r5, #0]
 800a59e:	e7d3      	b.n	800a548 <_free_r+0x24>
 800a5a0:	6820      	ldr	r0, [r4, #0]
 800a5a2:	1821      	adds	r1, r4, r0
 800a5a4:	428a      	cmp	r2, r1
 800a5a6:	bf04      	itt	eq
 800a5a8:	6811      	ldreq	r1, [r2, #0]
 800a5aa:	6852      	ldreq	r2, [r2, #4]
 800a5ac:	6062      	str	r2, [r4, #4]
 800a5ae:	bf04      	itt	eq
 800a5b0:	1809      	addeq	r1, r1, r0
 800a5b2:	6021      	streq	r1, [r4, #0]
 800a5b4:	605c      	str	r4, [r3, #4]
 800a5b6:	e7c7      	b.n	800a548 <_free_r+0x24>
 800a5b8:	bd38      	pop	{r3, r4, r5, pc}
 800a5ba:	bf00      	nop
 800a5bc:	20000e70 	.word	0x20000e70

0800a5c0 <_malloc_r>:
 800a5c0:	b570      	push	{r4, r5, r6, lr}
 800a5c2:	1ccd      	adds	r5, r1, #3
 800a5c4:	f025 0503 	bic.w	r5, r5, #3
 800a5c8:	3508      	adds	r5, #8
 800a5ca:	2d0c      	cmp	r5, #12
 800a5cc:	bf38      	it	cc
 800a5ce:	250c      	movcc	r5, #12
 800a5d0:	2d00      	cmp	r5, #0
 800a5d2:	4606      	mov	r6, r0
 800a5d4:	db01      	blt.n	800a5da <_malloc_r+0x1a>
 800a5d6:	42a9      	cmp	r1, r5
 800a5d8:	d903      	bls.n	800a5e2 <_malloc_r+0x22>
 800a5da:	230c      	movs	r3, #12
 800a5dc:	6033      	str	r3, [r6, #0]
 800a5de:	2000      	movs	r0, #0
 800a5e0:	bd70      	pop	{r4, r5, r6, pc}
 800a5e2:	f000 f87d 	bl	800a6e0 <__malloc_lock>
 800a5e6:	4a21      	ldr	r2, [pc, #132]	; (800a66c <_malloc_r+0xac>)
 800a5e8:	6814      	ldr	r4, [r2, #0]
 800a5ea:	4621      	mov	r1, r4
 800a5ec:	b991      	cbnz	r1, 800a614 <_malloc_r+0x54>
 800a5ee:	4c20      	ldr	r4, [pc, #128]	; (800a670 <_malloc_r+0xb0>)
 800a5f0:	6823      	ldr	r3, [r4, #0]
 800a5f2:	b91b      	cbnz	r3, 800a5fc <_malloc_r+0x3c>
 800a5f4:	4630      	mov	r0, r6
 800a5f6:	f000 f863 	bl	800a6c0 <_sbrk_r>
 800a5fa:	6020      	str	r0, [r4, #0]
 800a5fc:	4629      	mov	r1, r5
 800a5fe:	4630      	mov	r0, r6
 800a600:	f000 f85e 	bl	800a6c0 <_sbrk_r>
 800a604:	1c43      	adds	r3, r0, #1
 800a606:	d124      	bne.n	800a652 <_malloc_r+0x92>
 800a608:	230c      	movs	r3, #12
 800a60a:	6033      	str	r3, [r6, #0]
 800a60c:	4630      	mov	r0, r6
 800a60e:	f000 f868 	bl	800a6e2 <__malloc_unlock>
 800a612:	e7e4      	b.n	800a5de <_malloc_r+0x1e>
 800a614:	680b      	ldr	r3, [r1, #0]
 800a616:	1b5b      	subs	r3, r3, r5
 800a618:	d418      	bmi.n	800a64c <_malloc_r+0x8c>
 800a61a:	2b0b      	cmp	r3, #11
 800a61c:	d90f      	bls.n	800a63e <_malloc_r+0x7e>
 800a61e:	600b      	str	r3, [r1, #0]
 800a620:	50cd      	str	r5, [r1, r3]
 800a622:	18cc      	adds	r4, r1, r3
 800a624:	4630      	mov	r0, r6
 800a626:	f000 f85c 	bl	800a6e2 <__malloc_unlock>
 800a62a:	f104 000b 	add.w	r0, r4, #11
 800a62e:	1d23      	adds	r3, r4, #4
 800a630:	f020 0007 	bic.w	r0, r0, #7
 800a634:	1ac3      	subs	r3, r0, r3
 800a636:	d0d3      	beq.n	800a5e0 <_malloc_r+0x20>
 800a638:	425a      	negs	r2, r3
 800a63a:	50e2      	str	r2, [r4, r3]
 800a63c:	e7d0      	b.n	800a5e0 <_malloc_r+0x20>
 800a63e:	428c      	cmp	r4, r1
 800a640:	684b      	ldr	r3, [r1, #4]
 800a642:	bf16      	itet	ne
 800a644:	6063      	strne	r3, [r4, #4]
 800a646:	6013      	streq	r3, [r2, #0]
 800a648:	460c      	movne	r4, r1
 800a64a:	e7eb      	b.n	800a624 <_malloc_r+0x64>
 800a64c:	460c      	mov	r4, r1
 800a64e:	6849      	ldr	r1, [r1, #4]
 800a650:	e7cc      	b.n	800a5ec <_malloc_r+0x2c>
 800a652:	1cc4      	adds	r4, r0, #3
 800a654:	f024 0403 	bic.w	r4, r4, #3
 800a658:	42a0      	cmp	r0, r4
 800a65a:	d005      	beq.n	800a668 <_malloc_r+0xa8>
 800a65c:	1a21      	subs	r1, r4, r0
 800a65e:	4630      	mov	r0, r6
 800a660:	f000 f82e 	bl	800a6c0 <_sbrk_r>
 800a664:	3001      	adds	r0, #1
 800a666:	d0cf      	beq.n	800a608 <_malloc_r+0x48>
 800a668:	6025      	str	r5, [r4, #0]
 800a66a:	e7db      	b.n	800a624 <_malloc_r+0x64>
 800a66c:	20000e70 	.word	0x20000e70
 800a670:	20000e74 	.word	0x20000e74

0800a674 <_realloc_r>:
 800a674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a676:	4607      	mov	r7, r0
 800a678:	4614      	mov	r4, r2
 800a67a:	460e      	mov	r6, r1
 800a67c:	b921      	cbnz	r1, 800a688 <_realloc_r+0x14>
 800a67e:	4611      	mov	r1, r2
 800a680:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a684:	f7ff bf9c 	b.w	800a5c0 <_malloc_r>
 800a688:	b922      	cbnz	r2, 800a694 <_realloc_r+0x20>
 800a68a:	f7ff ff4b 	bl	800a524 <_free_r>
 800a68e:	4625      	mov	r5, r4
 800a690:	4628      	mov	r0, r5
 800a692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a694:	f000 f826 	bl	800a6e4 <_malloc_usable_size_r>
 800a698:	42a0      	cmp	r0, r4
 800a69a:	d20f      	bcs.n	800a6bc <_realloc_r+0x48>
 800a69c:	4621      	mov	r1, r4
 800a69e:	4638      	mov	r0, r7
 800a6a0:	f7ff ff8e 	bl	800a5c0 <_malloc_r>
 800a6a4:	4605      	mov	r5, r0
 800a6a6:	2800      	cmp	r0, #0
 800a6a8:	d0f2      	beq.n	800a690 <_realloc_r+0x1c>
 800a6aa:	4631      	mov	r1, r6
 800a6ac:	4622      	mov	r2, r4
 800a6ae:	f7ff fb32 	bl	8009d16 <memcpy>
 800a6b2:	4631      	mov	r1, r6
 800a6b4:	4638      	mov	r0, r7
 800a6b6:	f7ff ff35 	bl	800a524 <_free_r>
 800a6ba:	e7e9      	b.n	800a690 <_realloc_r+0x1c>
 800a6bc:	4635      	mov	r5, r6
 800a6be:	e7e7      	b.n	800a690 <_realloc_r+0x1c>

0800a6c0 <_sbrk_r>:
 800a6c0:	b538      	push	{r3, r4, r5, lr}
 800a6c2:	4c06      	ldr	r4, [pc, #24]	; (800a6dc <_sbrk_r+0x1c>)
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	4605      	mov	r5, r0
 800a6c8:	4608      	mov	r0, r1
 800a6ca:	6023      	str	r3, [r4, #0]
 800a6cc:	f7fa feca 	bl	8005464 <_sbrk>
 800a6d0:	1c43      	adds	r3, r0, #1
 800a6d2:	d102      	bne.n	800a6da <_sbrk_r+0x1a>
 800a6d4:	6823      	ldr	r3, [r4, #0]
 800a6d6:	b103      	cbz	r3, 800a6da <_sbrk_r+0x1a>
 800a6d8:	602b      	str	r3, [r5, #0]
 800a6da:	bd38      	pop	{r3, r4, r5, pc}
 800a6dc:	20001640 	.word	0x20001640

0800a6e0 <__malloc_lock>:
 800a6e0:	4770      	bx	lr

0800a6e2 <__malloc_unlock>:
 800a6e2:	4770      	bx	lr

0800a6e4 <_malloc_usable_size_r>:
 800a6e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6e8:	1f18      	subs	r0, r3, #4
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	bfbc      	itt	lt
 800a6ee:	580b      	ldrlt	r3, [r1, r0]
 800a6f0:	18c0      	addlt	r0, r0, r3
 800a6f2:	4770      	bx	lr

0800a6f4 <_init>:
 800a6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6f6:	bf00      	nop
 800a6f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6fa:	bc08      	pop	{r3}
 800a6fc:	469e      	mov	lr, r3
 800a6fe:	4770      	bx	lr

0800a700 <_fini>:
 800a700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a702:	bf00      	nop
 800a704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a706:	bc08      	pop	{r3}
 800a708:	469e      	mov	lr, r3
 800a70a:	4770      	bx	lr
