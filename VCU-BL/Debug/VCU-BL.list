
VCU-BL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2dc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000840  0800a4bc  0800a4bc  0001a4bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acfc  0800acfc  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800acfc  0800acfc  0001acfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad04  0800ad04  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad04  0800ad04  0001ad04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad08  0800ad08  0001ad08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800ad0c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007d8  200001fc  0800af08  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009d4  0800af08  000209d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017943  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a74  00000000  00000000  00037b6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f88  00000000  00000000  0003b5e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000df0  00000000  00000000  0003c570  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000245ea  00000000  00000000  0003d360  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000128ff  00000000  00000000  0006194a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb4d4  00000000  00000000  00074249  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013f71d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004390  00000000  00000000  0013f798  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001fc 	.word	0x200001fc
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a4a4 	.word	0x0800a4a4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000200 	.word	0x20000200
 800021c:	0800a4a4 	.word	0x0800a4a4

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800042e:	f1a4 0401 	sub.w	r4, r4, #1
 8000432:	d1e9      	bne.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__aeabi_d2uiz>:
 8000a8c:	004a      	lsls	r2, r1, #1
 8000a8e:	d211      	bcs.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a94:	d211      	bcs.n	8000aba <__aeabi_d2uiz+0x2e>
 8000a96:	d50d      	bpl.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa0:	d40e      	bmi.n	8000ac0 <__aeabi_d2uiz+0x34>
 8000aa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aae:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d102      	bne.n	8000ac6 <__aeabi_d2uiz+0x3a>
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac4:	4770      	bx	lr
 8000ac6:	f04f 0000 	mov.w	r0, #0
 8000aca:	4770      	bx	lr

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b80:	f000 b972 	b.w	8000e68 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9e08      	ldr	r6, [sp, #32]
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	4688      	mov	r8, r1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d14b      	bne.n	8000c42 <__udivmoddi4+0xa6>
 8000baa:	428a      	cmp	r2, r1
 8000bac:	4615      	mov	r5, r2
 8000bae:	d967      	bls.n	8000c80 <__udivmoddi4+0xe4>
 8000bb0:	fab2 f282 	clz	r2, r2
 8000bb4:	b14a      	cbz	r2, 8000bca <__udivmoddi4+0x2e>
 8000bb6:	f1c2 0720 	rsb	r7, r2, #32
 8000bba:	fa01 f302 	lsl.w	r3, r1, r2
 8000bbe:	fa20 f707 	lsr.w	r7, r0, r7
 8000bc2:	4095      	lsls	r5, r2
 8000bc4:	ea47 0803 	orr.w	r8, r7, r3
 8000bc8:	4094      	lsls	r4, r2
 8000bca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bce:	0c23      	lsrs	r3, r4, #16
 8000bd0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bd4:	fa1f fc85 	uxth.w	ip, r5
 8000bd8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bdc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000be0:	fb07 f10c 	mul.w	r1, r7, ip
 8000be4:	4299      	cmp	r1, r3
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x60>
 8000be8:	18eb      	adds	r3, r5, r3
 8000bea:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000bee:	f080 811b 	bcs.w	8000e28 <__udivmoddi4+0x28c>
 8000bf2:	4299      	cmp	r1, r3
 8000bf4:	f240 8118 	bls.w	8000e28 <__udivmoddi4+0x28c>
 8000bf8:	3f02      	subs	r7, #2
 8000bfa:	442b      	add	r3, r5
 8000bfc:	1a5b      	subs	r3, r3, r1
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c04:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c0c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c10:	45a4      	cmp	ip, r4
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x8c>
 8000c14:	192c      	adds	r4, r5, r4
 8000c16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c1a:	f080 8107 	bcs.w	8000e2c <__udivmoddi4+0x290>
 8000c1e:	45a4      	cmp	ip, r4
 8000c20:	f240 8104 	bls.w	8000e2c <__udivmoddi4+0x290>
 8000c24:	3802      	subs	r0, #2
 8000c26:	442c      	add	r4, r5
 8000c28:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c2c:	eba4 040c 	sub.w	r4, r4, ip
 8000c30:	2700      	movs	r7, #0
 8000c32:	b11e      	cbz	r6, 8000c3c <__udivmoddi4+0xa0>
 8000c34:	40d4      	lsrs	r4, r2
 8000c36:	2300      	movs	r3, #0
 8000c38:	e9c6 4300 	strd	r4, r3, [r6]
 8000c3c:	4639      	mov	r1, r7
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d909      	bls.n	8000c5a <__udivmoddi4+0xbe>
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	f000 80eb 	beq.w	8000e22 <__udivmoddi4+0x286>
 8000c4c:	2700      	movs	r7, #0
 8000c4e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c52:	4638      	mov	r0, r7
 8000c54:	4639      	mov	r1, r7
 8000c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5a:	fab3 f783 	clz	r7, r3
 8000c5e:	2f00      	cmp	r7, #0
 8000c60:	d147      	bne.n	8000cf2 <__udivmoddi4+0x156>
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d302      	bcc.n	8000c6c <__udivmoddi4+0xd0>
 8000c66:	4282      	cmp	r2, r0
 8000c68:	f200 80fa 	bhi.w	8000e60 <__udivmoddi4+0x2c4>
 8000c6c:	1a84      	subs	r4, r0, r2
 8000c6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c72:	2001      	movs	r0, #1
 8000c74:	4698      	mov	r8, r3
 8000c76:	2e00      	cmp	r6, #0
 8000c78:	d0e0      	beq.n	8000c3c <__udivmoddi4+0xa0>
 8000c7a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c7e:	e7dd      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000c80:	b902      	cbnz	r2, 8000c84 <__udivmoddi4+0xe8>
 8000c82:	deff      	udf	#255	; 0xff
 8000c84:	fab2 f282 	clz	r2, r2
 8000c88:	2a00      	cmp	r2, #0
 8000c8a:	f040 808f 	bne.w	8000dac <__udivmoddi4+0x210>
 8000c8e:	1b49      	subs	r1, r1, r5
 8000c90:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c94:	fa1f f885 	uxth.w	r8, r5
 8000c98:	2701      	movs	r7, #1
 8000c9a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c9e:	0c23      	lsrs	r3, r4, #16
 8000ca0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ca4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca8:	fb08 f10c 	mul.w	r1, r8, ip
 8000cac:	4299      	cmp	r1, r3
 8000cae:	d907      	bls.n	8000cc0 <__udivmoddi4+0x124>
 8000cb0:	18eb      	adds	r3, r5, r3
 8000cb2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0x122>
 8000cb8:	4299      	cmp	r1, r3
 8000cba:	f200 80cd 	bhi.w	8000e58 <__udivmoddi4+0x2bc>
 8000cbe:	4684      	mov	ip, r0
 8000cc0:	1a59      	subs	r1, r3, r1
 8000cc2:	b2a3      	uxth	r3, r4
 8000cc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ccc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cd0:	fb08 f800 	mul.w	r8, r8, r0
 8000cd4:	45a0      	cmp	r8, r4
 8000cd6:	d907      	bls.n	8000ce8 <__udivmoddi4+0x14c>
 8000cd8:	192c      	adds	r4, r5, r4
 8000cda:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cde:	d202      	bcs.n	8000ce6 <__udivmoddi4+0x14a>
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	f200 80b6 	bhi.w	8000e52 <__udivmoddi4+0x2b6>
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	eba4 0408 	sub.w	r4, r4, r8
 8000cec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cf0:	e79f      	b.n	8000c32 <__udivmoddi4+0x96>
 8000cf2:	f1c7 0c20 	rsb	ip, r7, #32
 8000cf6:	40bb      	lsls	r3, r7
 8000cf8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cfc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d00:	fa01 f407 	lsl.w	r4, r1, r7
 8000d04:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d08:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d0c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d10:	4325      	orrs	r5, r4
 8000d12:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d16:	0c2c      	lsrs	r4, r5, #16
 8000d18:	fb08 3319 	mls	r3, r8, r9, r3
 8000d1c:	fa1f fa8e 	uxth.w	sl, lr
 8000d20:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d24:	fb09 f40a 	mul.w	r4, r9, sl
 8000d28:	429c      	cmp	r4, r3
 8000d2a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d2e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d32:	d90b      	bls.n	8000d4c <__udivmoddi4+0x1b0>
 8000d34:	eb1e 0303 	adds.w	r3, lr, r3
 8000d38:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d3c:	f080 8087 	bcs.w	8000e4e <__udivmoddi4+0x2b2>
 8000d40:	429c      	cmp	r4, r3
 8000d42:	f240 8084 	bls.w	8000e4e <__udivmoddi4+0x2b2>
 8000d46:	f1a9 0902 	sub.w	r9, r9, #2
 8000d4a:	4473      	add	r3, lr
 8000d4c:	1b1b      	subs	r3, r3, r4
 8000d4e:	b2ad      	uxth	r5, r5
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3310 	mls	r3, r8, r0, r3
 8000d58:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d5c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d60:	45a2      	cmp	sl, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x1da>
 8000d64:	eb1e 0404 	adds.w	r4, lr, r4
 8000d68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d6c:	d26b      	bcs.n	8000e46 <__udivmoddi4+0x2aa>
 8000d6e:	45a2      	cmp	sl, r4
 8000d70:	d969      	bls.n	8000e46 <__udivmoddi4+0x2aa>
 8000d72:	3802      	subs	r0, #2
 8000d74:	4474      	add	r4, lr
 8000d76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d7e:	eba4 040a 	sub.w	r4, r4, sl
 8000d82:	454c      	cmp	r4, r9
 8000d84:	46c2      	mov	sl, r8
 8000d86:	464b      	mov	r3, r9
 8000d88:	d354      	bcc.n	8000e34 <__udivmoddi4+0x298>
 8000d8a:	d051      	beq.n	8000e30 <__udivmoddi4+0x294>
 8000d8c:	2e00      	cmp	r6, #0
 8000d8e:	d069      	beq.n	8000e64 <__udivmoddi4+0x2c8>
 8000d90:	ebb1 050a 	subs.w	r5, r1, sl
 8000d94:	eb64 0403 	sbc.w	r4, r4, r3
 8000d98:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d9c:	40fd      	lsrs	r5, r7
 8000d9e:	40fc      	lsrs	r4, r7
 8000da0:	ea4c 0505 	orr.w	r5, ip, r5
 8000da4:	e9c6 5400 	strd	r5, r4, [r6]
 8000da8:	2700      	movs	r7, #0
 8000daa:	e747      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000dac:	f1c2 0320 	rsb	r3, r2, #32
 8000db0:	fa20 f703 	lsr.w	r7, r0, r3
 8000db4:	4095      	lsls	r5, r2
 8000db6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dba:	fa21 f303 	lsr.w	r3, r1, r3
 8000dbe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc2:	4338      	orrs	r0, r7
 8000dc4:	0c01      	lsrs	r1, r0, #16
 8000dc6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dca:	fa1f f885 	uxth.w	r8, r5
 8000dce:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd6:	fb07 f308 	mul.w	r3, r7, r8
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	fa04 f402 	lsl.w	r4, r4, r2
 8000de0:	d907      	bls.n	8000df2 <__udivmoddi4+0x256>
 8000de2:	1869      	adds	r1, r5, r1
 8000de4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000de8:	d22f      	bcs.n	8000e4a <__udivmoddi4+0x2ae>
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d92d      	bls.n	8000e4a <__udivmoddi4+0x2ae>
 8000dee:	3f02      	subs	r7, #2
 8000df0:	4429      	add	r1, r5
 8000df2:	1acb      	subs	r3, r1, r3
 8000df4:	b281      	uxth	r1, r0
 8000df6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dfa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dfe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e02:	fb00 f308 	mul.w	r3, r0, r8
 8000e06:	428b      	cmp	r3, r1
 8000e08:	d907      	bls.n	8000e1a <__udivmoddi4+0x27e>
 8000e0a:	1869      	adds	r1, r5, r1
 8000e0c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e10:	d217      	bcs.n	8000e42 <__udivmoddi4+0x2a6>
 8000e12:	428b      	cmp	r3, r1
 8000e14:	d915      	bls.n	8000e42 <__udivmoddi4+0x2a6>
 8000e16:	3802      	subs	r0, #2
 8000e18:	4429      	add	r1, r5
 8000e1a:	1ac9      	subs	r1, r1, r3
 8000e1c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e20:	e73b      	b.n	8000c9a <__udivmoddi4+0xfe>
 8000e22:	4637      	mov	r7, r6
 8000e24:	4630      	mov	r0, r6
 8000e26:	e709      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000e28:	4607      	mov	r7, r0
 8000e2a:	e6e7      	b.n	8000bfc <__udivmoddi4+0x60>
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	e6fb      	b.n	8000c28 <__udivmoddi4+0x8c>
 8000e30:	4541      	cmp	r1, r8
 8000e32:	d2ab      	bcs.n	8000d8c <__udivmoddi4+0x1f0>
 8000e34:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e38:	eb69 020e 	sbc.w	r2, r9, lr
 8000e3c:	3801      	subs	r0, #1
 8000e3e:	4613      	mov	r3, r2
 8000e40:	e7a4      	b.n	8000d8c <__udivmoddi4+0x1f0>
 8000e42:	4660      	mov	r0, ip
 8000e44:	e7e9      	b.n	8000e1a <__udivmoddi4+0x27e>
 8000e46:	4618      	mov	r0, r3
 8000e48:	e795      	b.n	8000d76 <__udivmoddi4+0x1da>
 8000e4a:	4667      	mov	r7, ip
 8000e4c:	e7d1      	b.n	8000df2 <__udivmoddi4+0x256>
 8000e4e:	4681      	mov	r9, r0
 8000e50:	e77c      	b.n	8000d4c <__udivmoddi4+0x1b0>
 8000e52:	3802      	subs	r0, #2
 8000e54:	442c      	add	r4, r5
 8000e56:	e747      	b.n	8000ce8 <__udivmoddi4+0x14c>
 8000e58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e5c:	442b      	add	r3, r5
 8000e5e:	e72f      	b.n	8000cc0 <__udivmoddi4+0x124>
 8000e60:	4638      	mov	r0, r7
 8000e62:	e708      	b.n	8000c76 <__udivmoddi4+0xda>
 8000e64:	4637      	mov	r7, r6
 8000e66:	e6e9      	b.n	8000c3c <__udivmoddi4+0xa0>

08000e68 <__aeabi_idiv0>:
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <FLASHER_WriteByte>:
static uint8_t FLASHER_Erase(uint32_t FirstSector, uint32_t NbOfSectors);
static uint32_t FLASHER_GetSector(uint32_t Address);
static uint32_t FLASHER_GetSectorSize(uint32_t Sector);

/* Public functions implementation ---------------------------------------------*/
static uint8_t FLASHER_WriteByte(uint8_t *ptr, uint32_t size, uint32_t address, uint32_t end) {
 8000e6c:	b590      	push	{r4, r7, lr}
 8000e6e:	b087      	sub	sp, #28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
 8000e78:	603b      	str	r3, [r7, #0]
    uint32_t *ptr32 = (uint32_t*) ptr;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	617b      	str	r3, [r7, #20]
    uint32_t errors = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]

    /* Unlock the Flash to enable the flash control register access *************/
    HAL_FLASH_Unlock();
 8000e82:	f002 f8cb 	bl	800301c <HAL_FLASH_Unlock>

    /* Writing...... */
    while (size && address <= end) {
 8000e86:	e01b      	b.n	8000ec0 <FLASHER_WriteByte+0x54>
        errors += (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, *ptr32++) != HAL_OK);
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	1d1a      	adds	r2, r3, #4
 8000e8c:	617a      	str	r2, [r7, #20]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f04f 0400 	mov.w	r4, #0
 8000e94:	461a      	mov	r2, r3
 8000e96:	4623      	mov	r3, r4
 8000e98:	6879      	ldr	r1, [r7, #4]
 8000e9a:	2002      	movs	r0, #2
 8000e9c:	f002 f86a 	bl	8002f74 <HAL_FLASH_Program>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	bf14      	ite	ne
 8000ea6:	2301      	movne	r3, #1
 8000ea8:	2300      	moveq	r3, #0
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	461a      	mov	r2, r3
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]

        address += 4;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3304      	adds	r3, #4
 8000eb8:	607b      	str	r3, [r7, #4]
        size -= 4;
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	3b04      	subs	r3, #4
 8000ebe:	60bb      	str	r3, [r7, #8]
    while (size && address <= end) {
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d003      	beq.n	8000ece <FLASHER_WriteByte+0x62>
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d9dc      	bls.n	8000e88 <FLASHER_WriteByte+0x1c>
    }

    /* Indicator */
    if (!errors) {
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d103      	bne.n	8000edc <FLASHER_WriteByte+0x70>
        LOG_StrLn("HAL_FLASH_Program = OK");
 8000ed4:	480c      	ldr	r0, [pc, #48]	; (8000f08 <FLASHER_WriteByte+0x9c>)
 8000ed6:	f007 ffd5 	bl	8008e84 <LOG_StrLn>
 8000eda:	e008      	b.n	8000eee <FLASHER_WriteByte+0x82>
    } else {
        LOG_Str("HAL_FLASH_Program = ERROR:");
 8000edc:	480b      	ldr	r0, [pc, #44]	; (8000f0c <FLASHER_WriteByte+0xa0>)
 8000ede:	f007 ffb9 	bl	8008e54 <LOG_Str>
        LOG_Int(errors);
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f007 ff3d 	bl	8008d64 <LOG_Int>
        LOG_Enter();
 8000eea:	f007 ff2f 	bl	8008d4c <LOG_Enter>
    }

    /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
    HAL_FLASH_Lock();
 8000eee:	f002 f8b7 	bl	8003060 <HAL_FLASH_Lock>

    return (errors == 0);
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	bf0c      	ite	eq
 8000ef8:	2301      	moveq	r3, #1
 8000efa:	2300      	movne	r3, #0
 8000efc:	b2db      	uxtb	r3, r3
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	371c      	adds	r7, #28
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd90      	pop	{r4, r7, pc}
 8000f06:	bf00      	nop
 8000f08:	0800a4bc 	.word	0x0800a4bc
 8000f0c:	0800a4d4 	.word	0x0800a4d4

08000f10 <FLASHER_Erase>:

static uint8_t FLASHER_Erase(uint32_t FirstSector, uint32_t NbOfSectors) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	; 0x28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
    FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t SectorError = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
    uint8_t ret;

    /* Fill EraseInit structure*/
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000f22:	2302      	movs	r3, #2
 8000f24:	623b      	str	r3, [r7, #32]
    EraseInitStruct.Sector = FirstSector;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = NbOfSectors;
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	61fb      	str	r3, [r7, #28]

    /* Unlock the Flash to enable the flash control register access *************/
    HAL_FLASH_Unlock();
 8000f2e:	f002 f875 	bl	800301c <HAL_FLASH_Unlock>
    __HAL_FLASH_CLEAR_FLAG(
 8000f32:	4b2f      	ldr	r3, [pc, #188]	; (8000ff0 <FLASHER_Erase+0xe0>)
 8000f34:	22f3      	movs	r2, #243	; 0xf3
 8000f36:	60da      	str	r2, [r3, #12]
            FLASH_FLAG_PGPERR |
            FLASH_FLAG_PGSERR
            );

    /* Erasing......... */
    ret = (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) == HAL_OK);
 8000f38:	f107 020c 	add.w	r2, r7, #12
 8000f3c:	f107 0310 	add.w	r3, r7, #16
 8000f40:	4611      	mov	r1, r2
 8000f42:	4618      	mov	r0, r3
 8000f44:	f002 f9e6 	bl	8003314 <HAL_FLASHEx_Erase>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	bf0c      	ite	eq
 8000f4e:	2301      	moveq	r3, #1
 8000f50:	2300      	movne	r3, #0
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Handle error */
    if (!ret) {
 8000f58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d10b      	bne.n	8000f78 <FLASHER_Erase+0x68>
         HAL_FLASH_ERROR_PGP          0x00000004U    !< Programming Parallelism error
         HAL_FLASH_ERROR_PGA          0x00000008U    !< Programming Alignment error
         HAL_FLASH_ERROR_WRP          0x00000010U    !< Write protection error
         HAL_FLASH_ERROR_OPERATION    0x00000020U    !< Operation Error
         */
        LOG_Str("HAL_FLASHEx_Erase = ERROR:0x");
 8000f60:	4824      	ldr	r0, [pc, #144]	; (8000ff4 <FLASHER_Erase+0xe4>)
 8000f62:	f007 ff77 	bl	8008e54 <LOG_Str>
        LOG_Hex32(HAL_FLASH_GetError());
 8000f66:	f002 f88b 	bl	8003080 <HAL_FLASH_GetError>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f007 ff47 	bl	8008e00 <LOG_Hex32>
        LOG_Enter();
 8000f72:	f007 feeb 	bl	8008d4c <LOG_Enter>
 8000f76:	e002      	b.n	8000f7e <FLASHER_Erase+0x6e>
    } else {
        LOG_StrLn("HAL_FLASHEx_Erase = OK");
 8000f78:	481f      	ldr	r0, [pc, #124]	; (8000ff8 <FLASHER_Erase+0xe8>)
 8000f7a:	f007 ff83 	bl	8008e84 <LOG_StrLn>

    /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
     you have to make sure that these data are rewritten before they are accessed during code
     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
     DCRST and ICRST bits in the FLASH_CR register. */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8000f7e:	4b1c      	ldr	r3, [pc, #112]	; (8000ff0 <FLASHER_Erase+0xe0>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a1b      	ldr	r2, [pc, #108]	; (8000ff0 <FLASHER_Erase+0xe0>)
 8000f84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000f88:	6013      	str	r3, [r2, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8000f8a:	4b19      	ldr	r3, [pc, #100]	; (8000ff0 <FLASHER_Erase+0xe0>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a18      	ldr	r2, [pc, #96]	; (8000ff0 <FLASHER_Erase+0xe0>)
 8000f90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000f94:	6013      	str	r3, [r2, #0]

    __HAL_FLASH_DATA_CACHE_RESET();
 8000f96:	4b16      	ldr	r3, [pc, #88]	; (8000ff0 <FLASHER_Erase+0xe0>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a15      	ldr	r2, [pc, #84]	; (8000ff0 <FLASHER_Erase+0xe0>)
 8000f9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fa0:	6013      	str	r3, [r2, #0]
 8000fa2:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <FLASHER_Erase+0xe0>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a12      	ldr	r2, [pc, #72]	; (8000ff0 <FLASHER_Erase+0xe0>)
 8000fa8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000fac:	6013      	str	r3, [r2, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8000fae:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <FLASHER_Erase+0xe0>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a0f      	ldr	r2, [pc, #60]	; (8000ff0 <FLASHER_Erase+0xe0>)
 8000fb4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fb8:	6013      	str	r3, [r2, #0]
 8000fba:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <FLASHER_Erase+0xe0>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a0c      	ldr	r2, [pc, #48]	; (8000ff0 <FLASHER_Erase+0xe0>)
 8000fc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000fc4:	6013      	str	r3, [r2, #0]

    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <FLASHER_Erase+0xe0>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a09      	ldr	r2, [pc, #36]	; (8000ff0 <FLASHER_Erase+0xe0>)
 8000fcc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fd0:	6013      	str	r3, [r2, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fd2:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <FLASHER_Erase+0xe0>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a06      	ldr	r2, [pc, #24]	; (8000ff0 <FLASHER_Erase+0xe0>)
 8000fd8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fdc:	6013      	str	r3, [r2, #0]

    /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
    HAL_FLASH_Lock();
 8000fde:	f002 f83f 	bl	8003060 <HAL_FLASH_Lock>

    return ret;
 8000fe2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3728      	adds	r7, #40	; 0x28
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40023c00 	.word	0x40023c00
 8000ff4:	0800a4f0 	.word	0x0800a4f0
 8000ff8:	0800a510 	.word	0x0800a510

08000ffc <FLASHER_GetSector>:
/**
 * @brief  Gets the sector of a given address
 * @param  None
 * @retval The sector of a given address
 */
static uint32_t FLASHER_GetSector(uint32_t Address) {
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
    uint32_t sector = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]

    if ((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0)) {
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a56      	ldr	r2, [pc, #344]	; (8001164 <FLASHER_GetSector+0x168>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d806      	bhi.n	800101e <FLASHER_GetSector+0x22>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001016:	d302      	bcc.n	800101e <FLASHER_GetSector+0x22>
        sector = FLASH_SECTOR_0;
 8001018:	2300      	movs	r3, #0
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	e09b      	b.n	8001156 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1)) {
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a51      	ldr	r2, [pc, #324]	; (8001168 <FLASHER_GetSector+0x16c>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d806      	bhi.n	8001034 <FLASHER_GetSector+0x38>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a4e      	ldr	r2, [pc, #312]	; (8001164 <FLASHER_GetSector+0x168>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d902      	bls.n	8001034 <FLASHER_GetSector+0x38>
        sector = FLASH_SECTOR_1;
 800102e:	2301      	movs	r3, #1
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	e090      	b.n	8001156 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2)) {
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a4d      	ldr	r2, [pc, #308]	; (800116c <FLASHER_GetSector+0x170>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d806      	bhi.n	800104a <FLASHER_GetSector+0x4e>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a4a      	ldr	r2, [pc, #296]	; (8001168 <FLASHER_GetSector+0x16c>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d902      	bls.n	800104a <FLASHER_GetSector+0x4e>
        sector = FLASH_SECTOR_2;
 8001044:	2302      	movs	r3, #2
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	e085      	b.n	8001156 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3)) {
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a48      	ldr	r2, [pc, #288]	; (8001170 <FLASHER_GetSector+0x174>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d806      	bhi.n	8001060 <FLASHER_GetSector+0x64>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a45      	ldr	r2, [pc, #276]	; (800116c <FLASHER_GetSector+0x170>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d902      	bls.n	8001060 <FLASHER_GetSector+0x64>
        sector = FLASH_SECTOR_3;
 800105a:	2303      	movs	r3, #3
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	e07a      	b.n	8001156 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4)) {
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a44      	ldr	r2, [pc, #272]	; (8001174 <FLASHER_GetSector+0x178>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d806      	bhi.n	8001076 <FLASHER_GetSector+0x7a>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4a41      	ldr	r2, [pc, #260]	; (8001170 <FLASHER_GetSector+0x174>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d902      	bls.n	8001076 <FLASHER_GetSector+0x7a>
        sector = FLASH_SECTOR_4;
 8001070:	2304      	movs	r3, #4
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	e06f      	b.n	8001156 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5)) {
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a3f      	ldr	r2, [pc, #252]	; (8001178 <FLASHER_GetSector+0x17c>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d806      	bhi.n	800108c <FLASHER_GetSector+0x90>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a3c      	ldr	r2, [pc, #240]	; (8001174 <FLASHER_GetSector+0x178>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d902      	bls.n	800108c <FLASHER_GetSector+0x90>
        sector = FLASH_SECTOR_5;
 8001086:	2305      	movs	r3, #5
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	e064      	b.n	8001156 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6)) {
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a3b      	ldr	r2, [pc, #236]	; (800117c <FLASHER_GetSector+0x180>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d806      	bhi.n	80010a2 <FLASHER_GetSector+0xa6>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a38      	ldr	r2, [pc, #224]	; (8001178 <FLASHER_GetSector+0x17c>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d902      	bls.n	80010a2 <FLASHER_GetSector+0xa6>
        sector = FLASH_SECTOR_6;
 800109c:	2306      	movs	r3, #6
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	e059      	b.n	8001156 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_8) && (Address >= ADDR_FLASH_SECTOR_7)) {
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a36      	ldr	r2, [pc, #216]	; (8001180 <FLASHER_GetSector+0x184>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d806      	bhi.n	80010b8 <FLASHER_GetSector+0xbc>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a33      	ldr	r2, [pc, #204]	; (800117c <FLASHER_GetSector+0x180>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d902      	bls.n	80010b8 <FLASHER_GetSector+0xbc>
        sector = FLASH_SECTOR_7;
 80010b2:	2307      	movs	r3, #7
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	e04e      	b.n	8001156 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_9) && (Address >= ADDR_FLASH_SECTOR_8)) {
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a32      	ldr	r2, [pc, #200]	; (8001184 <FLASHER_GetSector+0x188>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d806      	bhi.n	80010ce <FLASHER_GetSector+0xd2>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a2f      	ldr	r2, [pc, #188]	; (8001180 <FLASHER_GetSector+0x184>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d902      	bls.n	80010ce <FLASHER_GetSector+0xd2>
        sector = FLASH_SECTOR_8;
 80010c8:	2308      	movs	r3, #8
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	e043      	b.n	8001156 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_10) && (Address >= ADDR_FLASH_SECTOR_9)) {
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a2d      	ldr	r2, [pc, #180]	; (8001188 <FLASHER_GetSector+0x18c>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d806      	bhi.n	80010e4 <FLASHER_GetSector+0xe8>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a2a      	ldr	r2, [pc, #168]	; (8001184 <FLASHER_GetSector+0x188>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d902      	bls.n	80010e4 <FLASHER_GetSector+0xe8>
        sector = FLASH_SECTOR_9;
 80010de:	2309      	movs	r3, #9
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	e038      	b.n	8001156 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_11) && (Address >= ADDR_FLASH_SECTOR_10)) {
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a29      	ldr	r2, [pc, #164]	; (800118c <FLASHER_GetSector+0x190>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d806      	bhi.n	80010fa <FLASHER_GetSector+0xfe>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a26      	ldr	r2, [pc, #152]	; (8001188 <FLASHER_GetSector+0x18c>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d902      	bls.n	80010fa <FLASHER_GetSector+0xfe>
        sector = FLASH_SECTOR_10;
 80010f4:	230a      	movs	r3, #10
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	e02d      	b.n	8001156 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_12) && (Address >= ADDR_FLASH_SECTOR_11)) {
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8001100:	d206      	bcs.n	8001110 <FLASHER_GetSector+0x114>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a21      	ldr	r2, [pc, #132]	; (800118c <FLASHER_GetSector+0x190>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d902      	bls.n	8001110 <FLASHER_GetSector+0x114>
        sector = FLASH_SECTOR_11;
 800110a:	230b      	movs	r3, #11
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	e022      	b.n	8001156 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_13) && (Address >= ADDR_FLASH_SECTOR_12)) {
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a1f      	ldr	r2, [pc, #124]	; (8001190 <FLASHER_GetSector+0x194>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d806      	bhi.n	8001126 <FLASHER_GetSector+0x12a>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800111e:	d302      	bcc.n	8001126 <FLASHER_GetSector+0x12a>
        sector = FLASH_SECTOR_12;
 8001120:	230c      	movs	r3, #12
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	e017      	b.n	8001156 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_14) && (Address >= ADDR_FLASH_SECTOR_13)) {
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a1a      	ldr	r2, [pc, #104]	; (8001194 <FLASHER_GetSector+0x198>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d806      	bhi.n	800113c <FLASHER_GetSector+0x140>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a17      	ldr	r2, [pc, #92]	; (8001190 <FLASHER_GetSector+0x194>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d902      	bls.n	800113c <FLASHER_GetSector+0x140>
        sector = FLASH_SECTOR_13;
 8001136:	230d      	movs	r3, #13
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	e00c      	b.n	8001156 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_15) && (Address >= ADDR_FLASH_SECTOR_14)) {
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a16      	ldr	r2, [pc, #88]	; (8001198 <FLASHER_GetSector+0x19c>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d806      	bhi.n	8001152 <FLASHER_GetSector+0x156>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a13      	ldr	r2, [pc, #76]	; (8001194 <FLASHER_GetSector+0x198>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d902      	bls.n	8001152 <FLASHER_GetSector+0x156>
        sector = FLASH_SECTOR_14;
 800114c:	230e      	movs	r3, #14
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	e001      	b.n	8001156 <FLASHER_GetSector+0x15a>
    }
    else { /* (Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_14) */
        sector = FLASH_SECTOR_15;
 8001152:	230f      	movs	r3, #15
 8001154:	60fb      	str	r3, [r7, #12]
    }

    return sector;
 8001156:	68fb      	ldr	r3, [r7, #12]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	08003fff 	.word	0x08003fff
 8001168:	08007fff 	.word	0x08007fff
 800116c:	0800bfff 	.word	0x0800bfff
 8001170:	0800ffff 	.word	0x0800ffff
 8001174:	0801ffff 	.word	0x0801ffff
 8001178:	0803ffff 	.word	0x0803ffff
 800117c:	0805ffff 	.word	0x0805ffff
 8001180:	0807ffff 	.word	0x0807ffff
 8001184:	0809ffff 	.word	0x0809ffff
 8001188:	080bffff 	.word	0x080bffff
 800118c:	080dffff 	.word	0x080dffff
 8001190:	0811ffff 	.word	0x0811ffff
 8001194:	0813ffff 	.word	0x0813ffff
 8001198:	0815ffff 	.word	0x0815ffff

0800119c <FLASHER_EraseBkpArea>:
    }
    return sectorsize;
}

/* ============================================================= */
uint8_t FLASHER_EraseBkpArea(void) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
    uint32_t FirstSector = 0, NbOfSectors = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	2300      	movs	r3, #0
 80011a8:	603b      	str	r3, [r7, #0]

    /* Get the 1st sector to erase */
    FirstSector = FLASHER_GetSector(BKP_START_ADDR);
 80011aa:	480a      	ldr	r0, [pc, #40]	; (80011d4 <FLASHER_EraseBkpArea+0x38>)
 80011ac:	f7ff ff26 	bl	8000ffc <FLASHER_GetSector>
 80011b0:	6078      	str	r0, [r7, #4]
    /* Get the number of sector to erase from 1st sector*/
    NbOfSectors = FLASHER_GetSector(BKP_END_ADDR) - FirstSector + 1;
 80011b2:	4809      	ldr	r0, [pc, #36]	; (80011d8 <FLASHER_EraseBkpArea+0x3c>)
 80011b4:	f7ff ff22 	bl	8000ffc <FLASHER_GetSector>
 80011b8:	4602      	mov	r2, r0
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	3301      	adds	r3, #1
 80011c0:	603b      	str	r3, [r7, #0]
    // Erase
    return FLASHER_Erase(FirstSector, NbOfSectors);
 80011c2:	6839      	ldr	r1, [r7, #0]
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff fea3 	bl	8000f10 <FLASHER_Erase>
 80011ca:	4603      	mov	r3, r0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	080a0000 	.word	0x080a0000
 80011d8:	0811ffff 	.word	0x0811ffff

080011dc <FLASHER_EraseAppArea>:

uint8_t FLASHER_EraseAppArea(void) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
    uint32_t FirstSector = 0, NbOfSectors = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	2300      	movs	r3, #0
 80011e8:	603b      	str	r3, [r7, #0]

    /* Get the 1st sector to erase */
    FirstSector = FLASHER_GetSector(APP_START_ADDR);
 80011ea:	480a      	ldr	r0, [pc, #40]	; (8001214 <FLASHER_EraseAppArea+0x38>)
 80011ec:	f7ff ff06 	bl	8000ffc <FLASHER_GetSector>
 80011f0:	6078      	str	r0, [r7, #4]
    /* Get the number of sector to erase from 1st sector*/
    NbOfSectors = FLASHER_GetSector(APP_END_ADDR) - FirstSector + 1;
 80011f2:	4809      	ldr	r0, [pc, #36]	; (8001218 <FLASHER_EraseAppArea+0x3c>)
 80011f4:	f7ff ff02 	bl	8000ffc <FLASHER_GetSector>
 80011f8:	4602      	mov	r2, r0
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	3301      	adds	r3, #1
 8001200:	603b      	str	r3, [r7, #0]
    // Erase
    return FLASHER_Erase(FirstSector, NbOfSectors);
 8001202:	6839      	ldr	r1, [r7, #0]
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f7ff fe83 	bl	8000f10 <FLASHER_Erase>
 800120a:	4603      	mov	r3, r0
}
 800120c:	4618      	mov	r0, r3
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	08020000 	.word	0x08020000
 8001218:	0809ffff 	.word	0x0809ffff

0800121c <FLASHER_WriteBkpArea>:

uint8_t FLASHER_WriteBkpArea(uint8_t *ptr, uint32_t size, uint32_t offset) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
    uint32_t address = BKP_START_ADDR + offset;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800122e:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
 8001232:	617b      	str	r3, [r7, #20]

    return FLASHER_WriteByte(ptr, size, address, BKP_END_ADDR);
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <FLASHER_WriteBkpArea+0x30>)
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	68b9      	ldr	r1, [r7, #8]
 800123a:	68f8      	ldr	r0, [r7, #12]
 800123c:	f7ff fe16 	bl	8000e6c <FLASHER_WriteByte>
 8001240:	4603      	mov	r3, r0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3718      	adds	r7, #24
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	0811ffff 	.word	0x0811ffff

08001250 <FLASHER_WriteAppArea>:

uint8_t FLASHER_WriteAppArea(uint8_t *ptr, uint32_t size, uint32_t offset) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
    uint32_t address = APP_START_ADDR + offset;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001262:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001266:	617b      	str	r3, [r7, #20]

    return FLASHER_WriteByte(ptr, size, address, APP_END_ADDR);
 8001268:	4b05      	ldr	r3, [pc, #20]	; (8001280 <FLASHER_WriteAppArea+0x30>)
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	68b9      	ldr	r1, [r7, #8]
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	f7ff fdfc 	bl	8000e6c <FLASHER_WriteByte>
 8001274:	4603      	mov	r3, r0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	0809ffff 	.word	0x0809ffff

08001284 <FLASHER_BackupApp>:

uint8_t FLASHER_BackupApp(void) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
    uint8_t ret;
    uint8_t *ptr = (uint8_t*) APP_START_ADDR;
 800128a:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <FLASHER_BackupApp+0x34>)
 800128c:	603b      	str	r3, [r7, #0]

    ret = FLASHER_EraseBkpArea();
 800128e:	f7ff ff85 	bl	800119c <FLASHER_EraseBkpArea>
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]

    if (ret) {
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d007      	beq.n	80012ac <FLASHER_BackupApp+0x28>
        ret = FLASHER_WriteBkpArea(ptr, APP_MAX_SIZE, 0);
 800129c:	2200      	movs	r2, #0
 800129e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80012a2:	6838      	ldr	r0, [r7, #0]
 80012a4:	f7ff ffba 	bl	800121c <FLASHER_WriteBkpArea>
 80012a8:	4603      	mov	r3, r0
 80012aa:	71fb      	strb	r3, [r7, #7]
    }

    return ret;
 80012ac:	79fb      	ldrb	r3, [r7, #7]
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	08020000 	.word	0x08020000

080012bc <FLASHER_RestoreApp>:

uint8_t FLASHER_RestoreApp(void) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
    uint8_t ret;
    uint8_t *ptr = (uint8_t*) BKP_START_ADDR;
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <FLASHER_RestoreApp+0x34>)
 80012c4:	603b      	str	r3, [r7, #0]

    ret = FLASHER_EraseAppArea();
 80012c6:	f7ff ff89 	bl	80011dc <FLASHER_EraseAppArea>
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]

    if (ret) {
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d007      	beq.n	80012e4 <FLASHER_RestoreApp+0x28>
        ret = FLASHER_WriteAppArea(ptr, APP_MAX_SIZE, 0);
 80012d4:	2200      	movs	r2, #0
 80012d6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80012da:	6838      	ldr	r0, [r7, #0]
 80012dc:	f7ff ffb8 	bl	8001250 <FLASHER_WriteAppArea>
 80012e0:	4603      	mov	r3, r0
 80012e2:	71fb      	strb	r3, [r7, #7]
    }

    return ret;
 80012e4:	79fb      	ldrb	r3, [r7, #7]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	080a0000 	.word	0x080a0000

080012f4 <FOTA_BearerInitialize>:
extern I2C_HandleTypeDef hi2c2;
extern UART_HandleTypeDef huart1;
//DMA_HandleTypeDef hdma_usart1_rx;

/* Public functions implementation --------------------------------------------*/
SIMCOM_RESULT FOTA_BearerInitialize(void) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b0a4      	sub	sp, #144	; 0x90
 80012f8:	af00      	add	r7, sp, #0
    SIMCOM_RESULT p;
    at_sapbr_t getBEARER, setBEARER = {
 80012fa:	4a16      	ldr	r2, [pc, #88]	; (8001354 <FOTA_BearerInitialize+0x60>)
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	4611      	mov	r1, r2
 8001300:	2244      	movs	r2, #68	; 0x44
 8001302:	4618      	mov	r0, r3
 8001304:	f008 fbe1 	bl	8009aca <memcpy>
                    .password = NET_CON_PASSWORD,
            },
    };

    // BEARER attach
    p = AT_BearerSettings(ATW, &setBEARER);
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	4619      	mov	r1, r3
 800130c:	2000      	movs	r0, #0
 800130e:	f007 f8a3 	bl	8008458 <AT_BearerSettings>
 8001312:	4603      	mov	r3, r0
 8001314:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

    // BEARER init
    if (p > 0) {
 8001318:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800131c:	2b00      	cmp	r3, #0
 800131e:	dd08      	ble.n	8001332 <FOTA_BearerInitialize+0x3e>
        p = AT_BearerSettings(ATR, &getBEARER);
 8001320:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001324:	4619      	mov	r1, r3
 8001326:	2001      	movs	r0, #1
 8001328:	f007 f896 	bl	8008458 <AT_BearerSettings>
 800132c:	4603      	mov	r3, r0
 800132e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    }

    if (p > 0 && getBEARER.status != SAPBR_CONNECTED) {
 8001332:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8001336:	2b00      	cmp	r3, #0
 8001338:	dd05      	ble.n	8001346 <FOTA_BearerInitialize+0x52>
 800133a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800133c:	2b01      	cmp	r3, #1
 800133e:	d002      	beq.n	8001346 <FOTA_BearerInitialize+0x52>
        p = SIM_RESULT_ERROR;
 8001340:	2300      	movs	r3, #0
 8001342:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    }

    return p;
 8001346:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
}
 800134a:	4618      	mov	r0, r3
 800134c:	3790      	adds	r7, #144	; 0x90
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	0800a528 	.word	0x0800a528

08001358 <FOTA_GetChecksum>:

SIMCOM_RESULT FOTA_GetChecksum(at_ftp_t *setFTP, uint32_t *checksum) {
 8001358:	b5b0      	push	{r4, r5, r7, lr}
 800135a:	b088      	sub	sp, #32
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
    SIMCOM_RESULT p;
    AT_FTP_STATE state;
    at_ftpget_t setFTPGET;

    // Set Default Parameter
    setFTP->id = 1;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2201      	movs	r2, #1
 8001366:	601a      	str	r2, [r3, #0]
    setFTP->size = 0;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    strcpy(setFTP->server, NET_FTP_SERVER);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3304      	adds	r3, #4
 8001374:	4a3f      	ldr	r2, [pc, #252]	; (8001474 <FOTA_GetChecksum+0x11c>)
 8001376:	461c      	mov	r4, r3
 8001378:	4615      	mov	r5, r2
 800137a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800137c:	6020      	str	r0, [r4, #0]
 800137e:	6061      	str	r1, [r4, #4]
 8001380:	60a2      	str	r2, [r4, #8]
 8001382:	60e3      	str	r3, [r4, #12]
 8001384:	6828      	ldr	r0, [r5, #0]
 8001386:	6120      	str	r0, [r4, #16]
 8001388:	88ab      	ldrh	r3, [r5, #4]
 800138a:	79aa      	ldrb	r2, [r5, #6]
 800138c:	82a3      	strh	r3, [r4, #20]
 800138e:	4613      	mov	r3, r2
 8001390:	75a3      	strb	r3, [r4, #22]
    strcpy(setFTP->username, NET_FTP_USERNAME);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3322      	adds	r3, #34	; 0x22
 8001396:	4a38      	ldr	r2, [pc, #224]	; (8001478 <FOTA_GetChecksum+0x120>)
 8001398:	461d      	mov	r5, r3
 800139a:	4614      	mov	r4, r2
 800139c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800139e:	6028      	str	r0, [r5, #0]
 80013a0:	6069      	str	r1, [r5, #4]
 80013a2:	60aa      	str	r2, [r5, #8]
 80013a4:	60eb      	str	r3, [r5, #12]
 80013a6:	cc03      	ldmia	r4!, {r0, r1}
 80013a8:	6128      	str	r0, [r5, #16]
 80013aa:	6169      	str	r1, [r5, #20]
    strcpy(setFTP->password, NET_FTP_PASSWORD);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3340      	adds	r3, #64	; 0x40
 80013b0:	4932      	ldr	r1, [pc, #200]	; (800147c <FOTA_GetChecksum+0x124>)
 80013b2:	461a      	mov	r2, r3
 80013b4:	460b      	mov	r3, r1
 80013b6:	cb03      	ldmia	r3!, {r0, r1}
 80013b8:	6010      	str	r0, [r2, #0]
 80013ba:	6051      	str	r1, [r2, #4]
 80013bc:	881b      	ldrh	r3, [r3, #0]
 80013be:	8113      	strh	r3, [r2, #8]
    sprintf(setFTP->file, "%s.crc", setFTP->version);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f103 0068 	add.w	r0, r3, #104	; 0x68
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	337c      	adds	r3, #124	; 0x7c
 80013ca:	461a      	mov	r2, r3
 80013cc:	492c      	ldr	r1, [pc, #176]	; (8001480 <FOTA_GetChecksum+0x128>)
 80013ce:	f008 fb8f 	bl	8009af0 <siprintf>

    // FTP Init
    p = AT_FtpInitialize(setFTP);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f006 feb0 	bl	8008138 <AT_FtpInitialize>
 80013d8:	4603      	mov	r3, r0
 80013da:	77fb      	strb	r3, [r7, #31]

    // Open FTP Session
    if (p > 0) {
 80013dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	dd08      	ble.n	80013f6 <FOTA_GetChecksum+0x9e>
        setFTPGET.mode = FTPGET_OPEN;
 80013e4:	2301      	movs	r3, #1
 80013e6:	60bb      	str	r3, [r7, #8]
        p = AT_FtpDownload(&setFTPGET);
 80013e8:	f107 0308 	add.w	r3, r7, #8
 80013ec:	4618      	mov	r0, r3
 80013ee:	f006 ff73 	bl	80082d8 <AT_FtpDownload>
 80013f2:	4603      	mov	r3, r0
 80013f4:	77fb      	strb	r3, [r7, #31]
    }

    // Read FTP File
    if (p > 0 && setFTPGET.response == FTP_READY) {
 80013f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dd24      	ble.n	8001448 <FOTA_GetChecksum+0xf0>
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d121      	bne.n	8001448 <FOTA_GetChecksum+0xf0>
        // Initiate Download
        setFTPGET.mode = FTPGET_READ;
 8001404:	2302      	movs	r3, #2
 8001406:	60bb      	str	r3, [r7, #8]
        setFTPGET.reqlength = 8;
 8001408:	2308      	movs	r3, #8
 800140a:	823b      	strh	r3, [r7, #16]
        p = AT_FtpDownload(&setFTPGET);
 800140c:	f107 0308 	add.w	r3, r7, #8
 8001410:	4618      	mov	r0, r3
 8001412:	f006 ff61 	bl	80082d8 <AT_FtpDownload>
 8001416:	4603      	mov	r3, r0
 8001418:	77fb      	strb	r3, [r7, #31]

        if (p > 0) {
 800141a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800141e:	2b00      	cmp	r3, #0
 8001420:	dd12      	ble.n	8001448 <FOTA_GetChecksum+0xf0>
            // Copy to Buffer
            *checksum = strtoul(setFTPGET.ptr, (char**) NULL, 16);
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	2210      	movs	r2, #16
 8001426:	2100      	movs	r1, #0
 8001428:	4618      	mov	r0, r3
 800142a:	f008 fc27 	bl	8009c7c <strtoul>
 800142e:	4602      	mov	r2, r0
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	601a      	str	r2, [r3, #0]

            // Indicator
            LOG_Str("FOTA:ChecksumOrigin = ");
 8001434:	4813      	ldr	r0, [pc, #76]	; (8001484 <FOTA_GetChecksum+0x12c>)
 8001436:	f007 fd0d 	bl	8008e54 <LOG_Str>
            LOG_Hex32(*checksum);
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f007 fcde 	bl	8008e00 <LOG_Hex32>
            LOG_Enter();
 8001444:	f007 fc82 	bl	8008d4c <LOG_Enter>
        }
    }

    // Check state
    AT_FtpCurrentState(&state);
 8001448:	f107 0318 	add.w	r3, r7, #24
 800144c:	4618      	mov	r0, r3
 800144e:	f006 fff1 	bl	8008434 <AT_FtpCurrentState>
    if (state == FTP_STATE_ESTABLISHED) {
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d106      	bne.n	8001466 <FOTA_GetChecksum+0x10e>
        // Close session
        Simcom_Command("AT+FTPQUIT\r", NULL, 500, 0);
 8001458:	2300      	movs	r3, #0
 800145a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800145e:	2100      	movs	r1, #0
 8001460:	4809      	ldr	r0, [pc, #36]	; (8001488 <FOTA_GetChecksum+0x130>)
 8001462:	f008 f8e3 	bl	800962c <Simcom_Command>
    }

    return p;
 8001466:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800146a:	4618      	mov	r0, r3
 800146c:	3720      	adds	r7, #32
 800146e:	46bd      	mov	sp, r7
 8001470:	bdb0      	pop	{r4, r5, r7, pc}
 8001472:	bf00      	nop
 8001474:	0800a56c 	.word	0x0800a56c
 8001478:	0800a584 	.word	0x0800a584
 800147c:	0800a59c 	.word	0x0800a59c
 8001480:	0800a5a8 	.word	0x0800a5a8
 8001484:	0800a5b0 	.word	0x0800a5b0
 8001488:	0800a5c8 	.word	0x0800a5c8

0800148c <FOTA_DownloadAndInstall>:

SIMCOM_RESULT FOTA_DownloadAndInstall(at_ftp_t *setFTP, uint32_t *len) {
 800148c:	b5b0      	push	{r4, r5, r7, lr}
 800148e:	b08a      	sub	sp, #40	; 0x28
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
    uint32_t timer;
    AT_FTP_STATE state;
    at_ftpget_t setFTPGET;

    // Set Default Parameter
    setFTP->id = 1;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2201      	movs	r2, #1
 800149a:	601a      	str	r2, [r3, #0]
    setFTP->size = 0;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    strcpy(setFTP->server, NET_FTP_SERVER);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3304      	adds	r3, #4
 80014a8:	4a70      	ldr	r2, [pc, #448]	; (800166c <FOTA_DownloadAndInstall+0x1e0>)
 80014aa:	461c      	mov	r4, r3
 80014ac:	4615      	mov	r5, r2
 80014ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014b0:	6020      	str	r0, [r4, #0]
 80014b2:	6061      	str	r1, [r4, #4]
 80014b4:	60a2      	str	r2, [r4, #8]
 80014b6:	60e3      	str	r3, [r4, #12]
 80014b8:	6828      	ldr	r0, [r5, #0]
 80014ba:	6120      	str	r0, [r4, #16]
 80014bc:	88ab      	ldrh	r3, [r5, #4]
 80014be:	79aa      	ldrb	r2, [r5, #6]
 80014c0:	82a3      	strh	r3, [r4, #20]
 80014c2:	4613      	mov	r3, r2
 80014c4:	75a3      	strb	r3, [r4, #22]
    strcpy(setFTP->username, NET_FTP_USERNAME);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	3322      	adds	r3, #34	; 0x22
 80014ca:	4a69      	ldr	r2, [pc, #420]	; (8001670 <FOTA_DownloadAndInstall+0x1e4>)
 80014cc:	461d      	mov	r5, r3
 80014ce:	4614      	mov	r4, r2
 80014d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014d2:	6028      	str	r0, [r5, #0]
 80014d4:	6069      	str	r1, [r5, #4]
 80014d6:	60aa      	str	r2, [r5, #8]
 80014d8:	60eb      	str	r3, [r5, #12]
 80014da:	cc03      	ldmia	r4!, {r0, r1}
 80014dc:	6128      	str	r0, [r5, #16]
 80014de:	6169      	str	r1, [r5, #20]
    strcpy(setFTP->password, NET_FTP_PASSWORD);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3340      	adds	r3, #64	; 0x40
 80014e4:	4963      	ldr	r1, [pc, #396]	; (8001674 <FOTA_DownloadAndInstall+0x1e8>)
 80014e6:	461a      	mov	r2, r3
 80014e8:	460b      	mov	r3, r1
 80014ea:	cb03      	ldmia	r3!, {r0, r1}
 80014ec:	6010      	str	r0, [r2, #0]
 80014ee:	6051      	str	r1, [r2, #4]
 80014f0:	881b      	ldrh	r3, [r3, #0]
 80014f2:	8113      	strh	r3, [r2, #8]
    sprintf(setFTP->file, "%s.bin", setFTP->version);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f103 0068 	add.w	r0, r3, #104	; 0x68
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	337c      	adds	r3, #124	; 0x7c
 80014fe:	461a      	mov	r2, r3
 8001500:	495d      	ldr	r1, [pc, #372]	; (8001678 <FOTA_DownloadAndInstall+0x1ec>)
 8001502:	f008 faf5 	bl	8009af0 <siprintf>

    // FTP Init
    p = AT_FtpInitialize(setFTP);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f006 fe16 	bl	8008138 <AT_FtpInitialize>
 800150c:	4603      	mov	r3, r0
 800150e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Get file size
    if (p > 0) {
 8001512:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001516:	2b00      	cmp	r3, #0
 8001518:	dd05      	ble.n	8001526 <FOTA_DownloadAndInstall+0x9a>
        p = AT_FtpFileSize(setFTP);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f006 fe7e 	bl	800821c <AT_FtpFileSize>
 8001520:	4603      	mov	r3, r0
 8001522:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    // Open FTP Session
    if (p > 0 && setFTP->size) {
 8001526:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800152a:	2b00      	cmp	r3, #0
 800152c:	dd0e      	ble.n	800154c <FOTA_DownloadAndInstall+0xc0>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001534:	2b00      	cmp	r3, #0
 8001536:	d009      	beq.n	800154c <FOTA_DownloadAndInstall+0xc0>
        setFTPGET.mode = FTPGET_OPEN;
 8001538:	2301      	movs	r3, #1
 800153a:	60fb      	str	r3, [r7, #12]
        p = AT_FtpDownload(&setFTPGET);
 800153c:	f107 030c 	add.w	r3, r7, #12
 8001540:	4618      	mov	r0, r3
 8001542:	f006 fec9 	bl	80082d8 <AT_FtpDownload>
 8001546:	4603      	mov	r3, r0
 8001548:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    // Read FTP File
    if (p > 0 && setFTPGET.response == FTP_READY) {
 800154c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001550:	2b00      	cmp	r3, #0
 8001552:	dd75      	ble.n	8001640 <FOTA_DownloadAndInstall+0x1b4>
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d172      	bne.n	8001640 <FOTA_DownloadAndInstall+0x1b4>
        // Prepare, start timer
        LOG_StrLn("FOTA:Start");
 800155a:	4848      	ldr	r0, [pc, #288]	; (800167c <FOTA_DownloadAndInstall+0x1f0>)
 800155c:	f007 fc92 	bl	8008e84 <LOG_StrLn>
        timer = _GetTickMS();
 8001560:	f008 fa24 	bl	80099ac <_GetTickMS>
 8001564:	6238      	str	r0, [r7, #32]

        // Erase APP area
        FLASHER_EraseAppArea();
 8001566:	f7ff fe39 	bl	80011dc <FLASHER_EraseAppArea>

        // Copy chunk by chunk
        setFTPGET.mode = FTPGET_READ;
 800156a:	2302      	movs	r3, #2
 800156c:	60fb      	str	r3, [r7, #12]
        setFTPGET.reqlength = 1376;
 800156e:	f44f 63ac 	mov.w	r3, #1376	; 0x560
 8001572:	82bb      	strh	r3, [r7, #20]
        do {
            // Initiate Download
            p = AT_FtpDownload(&setFTPGET);
 8001574:	f107 030c 	add.w	r3, r7, #12
 8001578:	4618      	mov	r0, r3
 800157a:	f006 fead 	bl	80082d8 <AT_FtpDownload>
 800157e:	4603      	mov	r3, r0
 8001580:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            if (p > 0 && setFTPGET.cnflength) {
 8001584:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001588:	2b00      	cmp	r3, #0
 800158a:	dd34      	ble.n	80015f6 <FOTA_DownloadAndInstall+0x16a>
 800158c:	8afb      	ldrh	r3, [r7, #22]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d031      	beq.n	80015f6 <FOTA_DownloadAndInstall+0x16a>
                // Copy to Buffer
                FLASHER_WriteAppArea((uint8_t*) setFTPGET.ptr, setFTPGET.cnflength, *len);
 8001592:	69b8      	ldr	r0, [r7, #24]
 8001594:	8afb      	ldrh	r3, [r7, #22]
 8001596:	4619      	mov	r1, r3
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	461a      	mov	r2, r3
 800159e:	f7ff fe57 	bl	8001250 <FLASHER_WriteAppArea>
                *len += setFTPGET.cnflength;
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	8afa      	ldrh	r2, [r7, #22]
 80015a8:	441a      	add	r2, r3
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	601a      	str	r2, [r3, #0]

                // Indicator
                _LedToggle();
 80015ae:	f008 fa17 	bl	80099e0 <_LedToggle>
                LOG_Str("FOTA:Progress = ");
 80015b2:	4833      	ldr	r0, [pc, #204]	; (8001680 <FOTA_DownloadAndInstall+0x1f4>)
 80015b4:	f007 fc4e 	bl	8008e54 <LOG_Str>
                LOG_Int(*len);
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f007 fbd1 	bl	8008d64 <LOG_Int>
                LOG_Str(" Bytes (");
 80015c2:	4830      	ldr	r0, [pc, #192]	; (8001684 <FOTA_DownloadAndInstall+0x1f8>)
 80015c4:	f007 fc46 	bl	8008e54 <LOG_Str>
                LOG_Int(*len * 100 / setFTP->size);
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2264      	movs	r2, #100	; 0x64
 80015ce:	fb02 f203 	mul.w	r2, r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015dc:	4618      	mov	r0, r3
 80015de:	f007 fbc1 	bl	8008d64 <LOG_Int>
                LOG_StrLn("%)");
 80015e2:	4829      	ldr	r0, [pc, #164]	; (8001688 <FOTA_DownloadAndInstall+0x1fc>)
 80015e4:	f007 fc4e 	bl	8008e84 <LOG_StrLn>
            } else {
                break;
            }
        } while (*len < setFTP->size);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d3be      	bcc.n	8001574 <FOTA_DownloadAndInstall+0xe8>

        // Check, stop timer
        if (*len && *len == setFTP->size) {
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d01a      	beq.n	8001634 <FOTA_DownloadAndInstall+0x1a8>
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001608:	429a      	cmp	r2, r3
 800160a:	d113      	bne.n	8001634 <FOTA_DownloadAndInstall+0x1a8>
            /* Glue size information to image */
            FLASHER_WriteAppArea((uint8_t*) len, sizeof(uint32_t), SIZE_OFFSET);
 800160c:	4a1f      	ldr	r2, [pc, #124]	; (800168c <FOTA_DownloadAndInstall+0x200>)
 800160e:	2104      	movs	r1, #4
 8001610:	6838      	ldr	r0, [r7, #0]
 8001612:	f7ff fe1d 	bl	8001250 <FLASHER_WriteAppArea>

            LOG_Str("FOTA:End = ");
 8001616:	481e      	ldr	r0, [pc, #120]	; (8001690 <FOTA_DownloadAndInstall+0x204>)
 8001618:	f007 fc1c 	bl	8008e54 <LOG_Str>
            LOG_Int(_GetTickMS() - timer);
 800161c:	f008 f9c6 	bl	80099ac <_GetTickMS>
 8001620:	4602      	mov	r2, r0
 8001622:	6a3b      	ldr	r3, [r7, #32]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	4618      	mov	r0, r3
 8001628:	f007 fb9c 	bl	8008d64 <LOG_Int>
            LOG_StrLn("ms");
 800162c:	4819      	ldr	r0, [pc, #100]	; (8001694 <FOTA_DownloadAndInstall+0x208>)
 800162e:	f007 fc29 	bl	8008e84 <LOG_StrLn>
 8001632:	e005      	b.n	8001640 <FOTA_DownloadAndInstall+0x1b4>
        } else {
            LOG_StrLn("FOTA:Failed");
 8001634:	4818      	ldr	r0, [pc, #96]	; (8001698 <FOTA_DownloadAndInstall+0x20c>)
 8001636:	f007 fc25 	bl	8008e84 <LOG_StrLn>
            p = SIM_RESULT_ERROR;
 800163a:	2300      	movs	r3, #0
 800163c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    // Check state
    AT_FtpCurrentState(&state);
 8001640:	f107 031c 	add.w	r3, r7, #28
 8001644:	4618      	mov	r0, r3
 8001646:	f006 fef5 	bl	8008434 <AT_FtpCurrentState>
    if (state == FTP_STATE_ESTABLISHED) {
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d106      	bne.n	800165e <FOTA_DownloadAndInstall+0x1d2>
        // Close session
        Simcom_Command("AT+FTPQUIT\r", NULL, 500, 0);
 8001650:	2300      	movs	r3, #0
 8001652:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001656:	2100      	movs	r1, #0
 8001658:	4810      	ldr	r0, [pc, #64]	; (800169c <FOTA_DownloadAndInstall+0x210>)
 800165a:	f007 ffe7 	bl	800962c <Simcom_Command>
    }

    return p;
 800165e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001662:	4618      	mov	r0, r3
 8001664:	3728      	adds	r7, #40	; 0x28
 8001666:	46bd      	mov	sp, r7
 8001668:	bdb0      	pop	{r4, r5, r7, pc}
 800166a:	bf00      	nop
 800166c:	0800a56c 	.word	0x0800a56c
 8001670:	0800a584 	.word	0x0800a584
 8001674:	0800a59c 	.word	0x0800a59c
 8001678:	0800a5d4 	.word	0x0800a5d4
 800167c:	0800a5dc 	.word	0x0800a5dc
 8001680:	0800a5e8 	.word	0x0800a5e8
 8001684:	0800a5fc 	.word	0x0800a5fc
 8001688:	0800a608 	.word	0x0800a608
 800168c:	0007fffc 	.word	0x0007fffc
 8001690:	0800a60c 	.word	0x0800a60c
 8001694:	0800a618 	.word	0x0800a618
 8001698:	0800a61c 	.word	0x0800a61c
 800169c:	0800a5c8 	.word	0x0800a5c8

080016a0 <FOTA_CompareChecksum>:

uint8_t FOTA_CompareChecksum(uint32_t checksum, uint32_t len, uint32_t address) {
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
    uint32_t crc = 0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	613b      	str	r3, [r7, #16]
    uint8_t *addr = (uint8_t*) address;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	617b      	str	r3, [r7, #20]

    // Calculate CRC
    crc = CRC_Calculate8(addr, len, 1);
 80016b4:	2201      	movs	r2, #1
 80016b6:	68b9      	ldr	r1, [r7, #8]
 80016b8:	6978      	ldr	r0, [r7, #20]
 80016ba:	f007 fa35 	bl	8008b28 <CRC_Calculate8>
 80016be:	4603      	mov	r3, r0
 80016c0:	613b      	str	r3, [r7, #16]

    // Indicator
    LOG_Str("FOTA:Checksum = ");
 80016c2:	4816      	ldr	r0, [pc, #88]	; (800171c <FOTA_CompareChecksum+0x7c>)
 80016c4:	f007 fbc6 	bl	8008e54 <LOG_Str>
    if (crc == checksum) {
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d10a      	bne.n	80016e6 <FOTA_CompareChecksum+0x46>
        LOG_StrLn("MATCH");
 80016d0:	4813      	ldr	r0, [pc, #76]	; (8001720 <FOTA_CompareChecksum+0x80>)
 80016d2:	f007 fbd7 	bl	8008e84 <LOG_StrLn>
        /* Glue checksum information to image */
        FLASHER_WriteAppArea((uint8_t*) &crc, sizeof(uint32_t), CHECKSUM_OFFSET);
 80016d6:	f107 0310 	add.w	r3, r7, #16
 80016da:	4a12      	ldr	r2, [pc, #72]	; (8001724 <FOTA_CompareChecksum+0x84>)
 80016dc:	2104      	movs	r1, #4
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fdb6 	bl	8001250 <FLASHER_WriteAppArea>
 80016e4:	e00e      	b.n	8001704 <FOTA_CompareChecksum+0x64>
    } else {
        LOG_StrLn("NOT MATCH");
 80016e6:	4810      	ldr	r0, [pc, #64]	; (8001728 <FOTA_CompareChecksum+0x88>)
 80016e8:	f007 fbcc 	bl	8008e84 <LOG_StrLn>
        LOG_Hex32(checksum);
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	f007 fb87 	bl	8008e00 <LOG_Hex32>
        LOG_Str(" != ");
 80016f2:	480e      	ldr	r0, [pc, #56]	; (800172c <FOTA_CompareChecksum+0x8c>)
 80016f4:	f007 fbae 	bl	8008e54 <LOG_Str>
        LOG_Hex32(crc);
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f007 fb80 	bl	8008e00 <LOG_Hex32>
        LOG_Enter();
 8001700:	f007 fb24 	bl	8008d4c <LOG_Enter>
    }

    return (crc == checksum);
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	429a      	cmp	r2, r3
 800170a:	bf0c      	ite	eq
 800170c:	2301      	moveq	r3, #1
 800170e:	2300      	movne	r3, #0
 8001710:	b2db      	uxtb	r3, r3
}
 8001712:	4618      	mov	r0, r3
 8001714:	3718      	adds	r7, #24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	0800a628 	.word	0x0800a628
 8001720:	0800a63c 	.word	0x0800a63c
 8001724:	0007fff8 	.word	0x0007fff8
 8001728:	0800a644 	.word	0x0800a644
 800172c:	0800a650 	.word	0x0800a650

08001730 <FOTA_Reboot>:

void FOTA_Reboot(void) {
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
    /* Clear backup area */
    FLASHER_EraseBkpArea();
 8001734:	f7ff fd32 	bl	800119c <FLASHER_EraseBkpArea>
    /* Reset DFU flag */
    EEPROM_FlagDFU(EE_CMD_W, 0);
 8001738:	2100      	movs	r1, #0
 800173a:	2001      	movs	r0, #1
 800173c:	f007 fc70 	bl	8009020 <EEPROM_FlagDFU>

    HAL_NVIC_SystemReset();
 8001740:	f000 fffd 	bl	800273e <HAL_NVIC_SystemReset>
}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}

08001748 <FOTA_ValidImage>:

uint8_t FOTA_ValidImage(uint32_t address) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b088      	sub	sp, #32
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
    uint32_t size, checksum = 0, crc = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]
 8001754:	2300      	movs	r3, #0
 8001756:	613b      	str	r3, [r7, #16]
    uint8_t ret;
    uint8_t *ptr = (uint8_t*) address;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	60fb      	str	r3, [r7, #12]

    /* Check beginning stack pointer */
    ret = IS_VALID_SP(APP_START_ADDR);
 800175c:	4b29      	ldr	r3, [pc, #164]	; (8001804 <FOTA_ValidImage+0xbc>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	4b29      	ldr	r3, [pc, #164]	; (8001808 <FOTA_ValidImage+0xc0>)
 8001762:	4013      	ands	r3, r2
 8001764:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001768:	bf0c      	ite	eq
 800176a:	2301      	moveq	r3, #1
 800176c:	2300      	movne	r3, #0
 800176e:	b2db      	uxtb	r3, r3
 8001770:	76fb      	strb	r3, [r7, #27]

    /* Check the size */
    if (ret) {
 8001772:	7efb      	ldrb	r3, [r7, #27]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d00e      	beq.n	8001796 <FOTA_ValidImage+0x4e>
        /* Get the stored size information */
        size = *(uint32_t*) (address + SIZE_OFFSET);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f503 23ff 	add.w	r3, r3, #522240	; 0x7f800
 800177e:	f203 73fc 	addw	r3, r3, #2044	; 0x7fc
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	61fb      	str	r3, [r7, #28]
        ret = (size < APP_MAX_SIZE );
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	4a20      	ldr	r2, [pc, #128]	; (800180c <FOTA_ValidImage+0xc4>)
 800178a:	4293      	cmp	r3, r2
 800178c:	bf94      	ite	ls
 800178e:	2301      	movls	r3, #1
 8001790:	2300      	movhi	r3, #0
 8001792:	b2db      	uxtb	r3, r3
 8001794:	76fb      	strb	r3, [r7, #27]
    }

    /* Check the checksum */
    if (ret) {
 8001796:	7efb      	ldrb	r3, [r7, #27]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d02d      	beq.n	80017f8 <FOTA_ValidImage+0xb0>
        /* Get the stored checksum information */
        checksum = *(uint32_t*) (address + CHECKSUM_OFFSET);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f503 23ff 	add.w	r3, r3, #522240	; 0x7f800
 80017a2:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	617b      	str	r3, [r7, #20]
        /* Calculate CRC */
        crc = CRC_Calculate8(ptr, size, 1);
 80017aa:	2201      	movs	r2, #1
 80017ac:	69f9      	ldr	r1, [r7, #28]
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f007 f9ba 	bl	8008b28 <CRC_Calculate8>
 80017b4:	6138      	str	r0, [r7, #16]

        // Indicator
        LOG_Str("APP:Checksum = ");
 80017b6:	4816      	ldr	r0, [pc, #88]	; (8001810 <FOTA_ValidImage+0xc8>)
 80017b8:	f007 fb4c 	bl	8008e54 <LOG_Str>
        if (crc == checksum) {
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d103      	bne.n	80017cc <FOTA_ValidImage+0x84>
            LOG_StrLn("MATCH");
 80017c4:	4813      	ldr	r0, [pc, #76]	; (8001814 <FOTA_ValidImage+0xcc>)
 80017c6:	f007 fb5d 	bl	8008e84 <LOG_StrLn>
 80017ca:	e00d      	b.n	80017e8 <FOTA_ValidImage+0xa0>
        } else {
            LOG_StrLn("NOT MATCH");
 80017cc:	4812      	ldr	r0, [pc, #72]	; (8001818 <FOTA_ValidImage+0xd0>)
 80017ce:	f007 fb59 	bl	8008e84 <LOG_StrLn>
            LOG_Hex32(checksum);
 80017d2:	6978      	ldr	r0, [r7, #20]
 80017d4:	f007 fb14 	bl	8008e00 <LOG_Hex32>
            LOG_Str(" != ");
 80017d8:	4810      	ldr	r0, [pc, #64]	; (800181c <FOTA_ValidImage+0xd4>)
 80017da:	f007 fb3b 	bl	8008e54 <LOG_Str>
            LOG_Hex32(crc);
 80017de:	6938      	ldr	r0, [r7, #16]
 80017e0:	f007 fb0e 	bl	8008e00 <LOG_Hex32>
            LOG_Enter();
 80017e4:	f007 fab2 	bl	8008d4c <LOG_Enter>
        }

        ret = (checksum == crc);
 80017e8:	697a      	ldr	r2, [r7, #20]
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	bf0c      	ite	eq
 80017f0:	2301      	moveq	r3, #1
 80017f2:	2300      	movne	r3, #0
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	76fb      	strb	r3, [r7, #27]
    }

    return ret;
 80017f8:	7efb      	ldrb	r3, [r7, #27]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3720      	adds	r7, #32
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	08020000 	.word	0x08020000
 8001808:	2ffb0000 	.word	0x2ffb0000
 800180c:	0007ffff 	.word	0x0007ffff
 8001810:	0800a658 	.word	0x0800a658
 8001814:	0800a63c 	.word	0x0800a63c
 8001818:	0800a644 	.word	0x0800a644
 800181c:	0800a650 	.word	0x0800a650

08001820 <FOTA_InProgressDFU>:

uint8_t FOTA_InProgressDFU(void) {
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
    return IS_DFU_IN_PROGRESS(DFU_FLAG);
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <FOTA_InProgressDFU+0x20>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a06      	ldr	r2, [pc, #24]	; (8001844 <FOTA_InProgressDFU+0x24>)
 800182a:	4293      	cmp	r3, r2
 800182c:	bf0c      	ite	eq
 800182e:	2301      	moveq	r3, #1
 8001830:	2300      	movne	r3, #0
 8001832:	b2db      	uxtb	r3, r3
}
 8001834:	4618      	mov	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	200002a4 	.word	0x200002a4
 8001844:	89abcdef 	.word	0x89abcdef

08001848 <FOTA_JumpToApplication>:

void FOTA_JumpToApplication(void) {
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
    uint32_t appStack, appEntry;

    /* Get stack & entry pointer */
    appStack = *(__IO uint32_t*) APP_START_ADDR;
 800184e:	4b13      	ldr	r3, [pc, #76]	; (800189c <FOTA_JumpToApplication+0x54>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	60fb      	str	r3, [r7, #12]
    appEntry = *(__IO uint32_t*) (APP_START_ADDR + 4);
 8001854:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <FOTA_JumpToApplication+0x58>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	60bb      	str	r3, [r7, #8]

    /* Shutdown all peripherals */
    HAL_CRC_MspDeInit(&hcrc);
 800185a:	4812      	ldr	r0, [pc, #72]	; (80018a4 <FOTA_JumpToApplication+0x5c>)
 800185c:	f000 fb70 	bl	8001f40 <HAL_CRC_MspDeInit>
    HAL_I2C_MspDeInit(&hi2c2);
 8001860:	4811      	ldr	r0, [pc, #68]	; (80018a8 <FOTA_JumpToApplication+0x60>)
 8001862:	f000 fbe1 	bl	8002028 <HAL_I2C_MspDeInit>
    HAL_UART_MspDeInit(&huart1);
 8001866:	4811      	ldr	r0, [pc, #68]	; (80018ac <FOTA_JumpToApplication+0x64>)
 8001868:	f000 fc80 	bl	800216c <HAL_UART_MspDeInit>
    HAL_RCC_DeInit();
 800186c:	f003 fc76 	bl	800515c <HAL_RCC_DeInit>
    HAL_DeInit();
 8001870:	f000 fd76 	bl	8002360 <HAL_DeInit>

    /* Reset systick */
    SysTick->CTRL = 0;
 8001874:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <FOTA_JumpToApplication+0x68>)
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
    SysTick->LOAD = 0;
 800187a:	4b0d      	ldr	r3, [pc, #52]	; (80018b0 <FOTA_JumpToApplication+0x68>)
 800187c:	2200      	movs	r2, #0
 800187e:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0;
 8001880:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <FOTA_JumpToApplication+0x68>)
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	f383 8808 	msr	MSP, r3

    /* Set stack pointer */
    __set_MSP(appStack);

    /* Jump to user ResetHandler */
    void (*jump)(void) = (void (*)(void))(appEntry);
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	607b      	str	r3, [r7, #4]
    jump();
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4798      	blx	r3

    /* Never reached */
    while (1)
 8001898:	e7fe      	b.n	8001898 <FOTA_JumpToApplication+0x50>
 800189a:	bf00      	nop
 800189c:	08020000 	.word	0x08020000
 80018a0:	08020004 	.word	0x08020004
 80018a4:	200002b0 	.word	0x200002b0
 80018a8:	200002b8 	.word	0x200002b8
 80018ac:	2000036c 	.word	0x2000036c
 80018b0:	e000e010 	.word	0xe000e010

080018b4 <FOTA_Upgrade>:
        ;
}

SIMCOM_RESULT FOTA_Upgrade(void) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
    SIMCOM_RESULT p;
    uint32_t checksum;

    /* Set DFU */
    if (!FOTA_InProgressDFU()) {
 80018ba:	f7ff ffb1 	bl	8001820 <FOTA_InProgressDFU>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d10b      	bne.n	80018dc <FOTA_Upgrade+0x28>
        EEPROM_FlagDFU(EE_CMD_W, DFU_IN_PROGRESS);
 80018c4:	4910      	ldr	r1, [pc, #64]	; (8001908 <FOTA_Upgrade+0x54>)
 80018c6:	2001      	movs	r0, #1
 80018c8:	f007 fbaa 	bl	8009020 <EEPROM_FlagDFU>

        // Backup current application (if necessary)
        if (FOTA_ValidImage(APP_START_ADDR)) {
 80018cc:	480f      	ldr	r0, [pc, #60]	; (800190c <FOTA_Upgrade+0x58>)
 80018ce:	f7ff ff3b 	bl	8001748 <FOTA_ValidImage>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <FOTA_Upgrade+0x28>
            FLASHER_BackupApp();
 80018d8:	f7ff fcd4 	bl	8001284 <FLASHER_BackupApp>
        }
    }
    /* Get the stored checksum information */
    checksum = *(uint32_t*) (BKP_START_ADDR + CHECKSUM_OFFSET);
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <FOTA_Upgrade+0x5c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	607b      	str	r3, [r7, #4]

    /* Download image and install */
    p = Simcom_FOTA(checksum);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f007 fe1a 	bl	800951c <Simcom_FOTA>
 80018e8:	4603      	mov	r3, r0
 80018ea:	70fb      	strb	r3, [r7, #3]

    // DFU flag reset
    if (p > 0) {
 80018ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	dd03      	ble.n	80018fc <FOTA_Upgrade+0x48>
        EEPROM_FlagDFU(EE_CMD_W, 0);
 80018f4:	2100      	movs	r1, #0
 80018f6:	2001      	movs	r0, #1
 80018f8:	f007 fb92 	bl	8009020 <EEPROM_FlagDFU>
    }

    return p;
 80018fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	89abcdef 	.word	0x89abcdef
 800190c:	08020000 	.word	0x08020000
 8001910:	0811fff8 	.word	0x0811fff8

08001914 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8001918:	f000 fd00 	bl	800231c <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 800191c:	f000 f8bc 	bl	8001a98 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001920:	f000 f9c2 	bl	8001ca8 <MX_GPIO_Init>
    MX_DMA_Init();
 8001924:	f000 f9a0 	bl	8001c68 <MX_DMA_Init>
    MX_CRC_Init();
 8001928:	f000 f920 	bl	8001b6c <MX_CRC_Init>
    MX_I2C2_Init();
 800192c:	f000 f932 	bl	8001b94 <MX_I2C2_Init>
    MX_USART1_UART_Init();
 8001930:	f000 f970 	bl	8001c14 <MX_USART1_UART_Init>
    /* USER CODE BEGIN 2 */
    SIMCOM_DMA_Init();
 8001934:	f006 f866 	bl	8007a04 <SIMCOM_DMA_Init>
    EEPROM_Init();
 8001938:	f007 fb1c 	bl	8008f74 <EEPROM_Init>
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    EEPROM_FlagDFU(EE_CMD_W, 0x21436587);
 800193c:	4948      	ldr	r1, [pc, #288]	; (8001a60 <main+0x14c>)
 800193e:	2001      	movs	r0, #1
 8001940:	f007 fb6e 	bl	8009020 <EEPROM_FlagDFU>
    LOG_Hex32(DFU_FLAG);
 8001944:	4b47      	ldr	r3, [pc, #284]	; (8001a64 <main+0x150>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f007 fa59 	bl	8008e00 <LOG_Hex32>
    LOG_Enter();
 800194e:	f007 f9fd 	bl	8008d4c <LOG_Enter>
    EEPROM_FlagDFU(EE_CMD_R, EE_NULL);
 8001952:	2100      	movs	r1, #0
 8001954:	2000      	movs	r0, #0
 8001956:	f007 fb63 	bl	8009020 <EEPROM_FlagDFU>
    LOG_Hex32(DFU_FLAG);
 800195a:	4b42      	ldr	r3, [pc, #264]	; (8001a64 <main+0x150>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f007 fa4e 	bl	8008e00 <LOG_Hex32>
    LOG_Enter();
 8001964:	f007 f9f2 	bl	8008d4c <LOG_Enter>

    /* IAP flag has been set, initiate firmware download procedure */
    _LedWrite(1);
 8001968:	2001      	movs	r0, #1
 800196a:	f008 f827 	bl	80099bc <_LedWrite>
    if (*(uint32_t*) IAP_FLAG_ADDR == IAP_FLAG) {
 800196e:	4b3e      	ldr	r3, [pc, #248]	; (8001a68 <main+0x154>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a3e      	ldr	r2, [pc, #248]	; (8001a6c <main+0x158>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d127      	bne.n	80019c8 <main+0xb4>
        LOG_StrLn("IAP set, do FOTA.");
 8001978:	483d      	ldr	r0, [pc, #244]	; (8001a70 <main+0x15c>)
 800197a:	f007 fa83 	bl	8008e84 <LOG_StrLn>
        /* Everything went well, reset IAP flag & boot form new image */
        if (FOTA_Upgrade()) {
 800197e:	f7ff ff99 	bl	80018b4 <FOTA_Upgrade>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d005      	beq.n	8001994 <main+0x80>
            /* Reset IAP flag */
            *(uint32_t*) IAP_FLAG_ADDR = 0;
 8001988:	4b37      	ldr	r3, [pc, #220]	; (8001a68 <main+0x154>)
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
            /* Take branching decision on next reboot */
            FOTA_Reboot();
 800198e:	f7ff fecf 	bl	8001730 <FOTA_Reboot>
 8001992:	e013      	b.n	80019bc <main+0xa8>
        }
        /* DFU failed, retry until exhausted. */
        else {
            LOG_Str("IAP failed, retry quota = ");
 8001994:	4837      	ldr	r0, [pc, #220]	; (8001a74 <main+0x160>)
 8001996:	f007 fa5d 	bl	8008e54 <LOG_Str>
            LOG_Int(*(uint32_t*) IAP_RETRY_ADDR);
 800199a:	4b37      	ldr	r3, [pc, #220]	; (8001a78 <main+0x164>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f007 f9e0 	bl	8008d64 <LOG_Int>
            LOG_Enter();
 80019a4:	f007 f9d2 	bl	8008d4c <LOG_Enter>

            /* Decrement IAP retry until exhausted */
            if (*(uint32_t*) IAP_RETRY_ADDR) {
 80019a8:	4b33      	ldr	r3, [pc, #204]	; (8001a78 <main+0x164>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d005      	beq.n	80019bc <main+0xa8>
                (*(uint32_t*) IAP_RETRY_ADDR)--;
 80019b0:	4b31      	ldr	r3, [pc, #196]	; (8001a78 <main+0x164>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	3a01      	subs	r2, #1
 80019b6:	601a      	str	r2, [r3, #0]
                HAL_NVIC_SystemReset();
 80019b8:	f000 fec1 	bl	800273e <HAL_NVIC_SystemReset>
            }
        }
        /* IAP flag is still set, and we ran out of retries */
        /* Reset IAP flag */
        *(uint32_t*) IAP_FLAG_ADDR = 0;
 80019bc:	4b2a      	ldr	r3, [pc, #168]	; (8001a68 <main+0x154>)
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
        HAL_NVIC_SystemReset();
 80019c2:	f000 febc 	bl	800273e <HAL_NVIC_SystemReset>
 80019c6:	e048      	b.n	8001a5a <main+0x146>
    }
    /* Jump to application if it exist and DFU finished */
    else if (FOTA_ValidImage(APP_START_ADDR) && !FOTA_InProgressDFU()) {
 80019c8:	482c      	ldr	r0, [pc, #176]	; (8001a7c <main+0x168>)
 80019ca:	f7ff febd 	bl	8001748 <FOTA_ValidImage>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d00a      	beq.n	80019ea <main+0xd6>
 80019d4:	f7ff ff24 	bl	8001820 <FOTA_InProgressDFU>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d105      	bne.n	80019ea <main+0xd6>
        LOG_StrLn("Jump to application.");
 80019de:	4828      	ldr	r0, [pc, #160]	; (8001a80 <main+0x16c>)
 80019e0:	f007 fa50 	bl	8008e84 <LOG_StrLn>
        /* Jump sequence */
        FOTA_JumpToApplication();
 80019e4:	f7ff ff30 	bl	8001848 <FOTA_JumpToApplication>
 80019e8:	e037      	b.n	8001a5a <main+0x146>
    }
    /* Power reset during DFU, try once more */
    else if (FOTA_InProgressDFU()) {
 80019ea:	f7ff ff19 	bl	8001820 <FOTA_InProgressDFU>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d012      	beq.n	8001a1a <main+0x106>
        LOG_StrLn("DFU set, do FOTA once more.");
 80019f4:	4823      	ldr	r0, [pc, #140]	; (8001a84 <main+0x170>)
 80019f6:	f007 fa45 	bl	8008e84 <LOG_StrLn>
        /* Everything went well, boot form new image */
        if (FOTA_Upgrade()) {
 80019fa:	f7ff ff5b 	bl	80018b4 <FOTA_Upgrade>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <main+0xf4>
            /* Take branching decision on next reboot */
            FOTA_Reboot();
 8001a04:	f7ff fe94 	bl	8001730 <FOTA_Reboot>
        }
        /* Erase partially programmed application area */
        FLASHER_EraseAppArea();
 8001a08:	f7ff fbe8 	bl	80011dc <FLASHER_EraseAppArea>
        /* Reset DFU flag */
        EEPROM_FlagDFU(EE_CMD_W, 0);
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	2001      	movs	r0, #1
 8001a10:	f007 fb06 	bl	8009020 <EEPROM_FlagDFU>
        HAL_NVIC_SystemReset();
 8001a14:	f000 fe93 	bl	800273e <HAL_NVIC_SystemReset>
 8001a18:	e01f      	b.n	8001a5a <main+0x146>
    }
    /* Try to restore the backup */
    else {
        /* Check is the backup image valid */
        if (FOTA_ValidImage(BKP_START_ADDR)) {
 8001a1a:	481b      	ldr	r0, [pc, #108]	; (8001a88 <main+0x174>)
 8001a1c:	f7ff fe94 	bl	8001748 <FOTA_ValidImage>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d00a      	beq.n	8001a3c <main+0x128>
            LOG_StrLn("Has backed-up image, rollback.");
 8001a26:	4819      	ldr	r0, [pc, #100]	; (8001a8c <main+0x178>)
 8001a28:	f007 fa2c 	bl	8008e84 <LOG_StrLn>
            /* Restore back old image to application area */
            if (FLASHER_RestoreApp()) {
 8001a2c:	f7ff fc46 	bl	80012bc <FLASHER_RestoreApp>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d00c      	beq.n	8001a50 <main+0x13c>
                /* Take branching decision on next reboot */
                FOTA_Reboot();
 8001a36:	f7ff fe7b 	bl	8001730 <FOTA_Reboot>
 8001a3a:	e009      	b.n	8001a50 <main+0x13c>
            }
        } else {
            LOG_StrLn("No image at all, do FOTA.");
 8001a3c:	4814      	ldr	r0, [pc, #80]	; (8001a90 <main+0x17c>)
 8001a3e:	f007 fa21 	bl	8008e84 <LOG_StrLn>
            /* Download new firmware for the first time */
            if (FOTA_Upgrade()) {
 8001a42:	f7ff ff37 	bl	80018b4 <FOTA_Upgrade>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <main+0x13c>
                /* Take branching decision on next reboot */
                FOTA_Reboot();
 8001a4c:	f7ff fe70 	bl	8001730 <FOTA_Reboot>
            }
        }
        HAL_NVIC_SystemReset();
 8001a50:	f000 fe75 	bl	800273e <HAL_NVIC_SystemReset>
        /* Failure indicator */
        _Error("Boot-loader failure!!");
 8001a54:	480f      	ldr	r0, [pc, #60]	; (8001a94 <main+0x180>)
 8001a56:	f007 ffcf 	bl	80099f8 <_Error>
 8001a5a:	2300      	movs	r3, #0
    }
    /* USER CODE END 3 */
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	21436587 	.word	0x21436587
 8001a64:	200002a4 	.word	0x200002a4
 8001a68:	2004fffc 	.word	0x2004fffc
 8001a6c:	aabbccdd 	.word	0xaabbccdd
 8001a70:	0800a668 	.word	0x0800a668
 8001a74:	0800a67c 	.word	0x0800a67c
 8001a78:	2004fff8 	.word	0x2004fff8
 8001a7c:	08020000 	.word	0x08020000
 8001a80:	0800a698 	.word	0x0800a698
 8001a84:	0800a6b0 	.word	0x0800a6b0
 8001a88:	080a0000 	.word	0x080a0000
 8001a8c:	0800a6cc 	.word	0x0800a6cc
 8001a90:	0800a6ec 	.word	0x0800a6ec
 8001a94:	0800a708 	.word	0x0800a708

08001a98 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b094      	sub	sp, #80	; 0x50
 8001a9c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001a9e:	f107 031c 	add.w	r3, r7, #28
 8001aa2:	2234      	movs	r2, #52	; 0x34
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f008 f81a 	bl	8009ae0 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001aac:	f107 0308 	add.w	r3, r7, #8
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8001abc:	2300      	movs	r3, #0
 8001abe:	607b      	str	r3, [r7, #4]
 8001ac0:	4b28      	ldr	r3, [pc, #160]	; (8001b64 <SystemClock_Config+0xcc>)
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac4:	4a27      	ldr	r2, [pc, #156]	; (8001b64 <SystemClock_Config+0xcc>)
 8001ac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aca:	6413      	str	r3, [r2, #64]	; 0x40
 8001acc:	4b25      	ldr	r3, [pc, #148]	; (8001b64 <SystemClock_Config+0xcc>)
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad4:	607b      	str	r3, [r7, #4]
 8001ad6:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ad8:	2300      	movs	r3, #0
 8001ada:	603b      	str	r3, [r7, #0]
 8001adc:	4b22      	ldr	r3, [pc, #136]	; (8001b68 <SystemClock_Config+0xd0>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a21      	ldr	r2, [pc, #132]	; (8001b68 <SystemClock_Config+0xd0>)
 8001ae2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	4b1f      	ldr	r3, [pc, #124]	; (8001b68 <SystemClock_Config+0xd0>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001af0:	603b      	str	r3, [r7, #0]
 8001af2:	683b      	ldr	r3, [r7, #0]
    /** Initializes the CPU, AHB and APB busses clocks
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001af4:	2301      	movs	r3, #1
 8001af6:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001af8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001afc:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001afe:	2302      	movs	r3, #2
 8001b00:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b06:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLM = 4;
 8001b08:	2304      	movs	r3, #4
 8001b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLN = 100;
 8001b0c:	2364      	movs	r3, #100	; 0x64
 8001b0e:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b10:	2302      	movs	r3, #2
 8001b12:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLQ = 2;
 8001b14:	2302      	movs	r3, #2
 8001b16:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLR = 2;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b1c:	f107 031c 	add.w	r3, r7, #28
 8001b20:	4618      	mov	r0, r3
 8001b22:	f003 fbe7 	bl	80052f4 <HAL_RCC_OscConfig>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <SystemClock_Config+0x98>
            {
        Error_Handler();
 8001b2c:	f000 f9b6 	bl	8001e9c <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB busses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001b30:	230f      	movs	r3, #15
 8001b32:	60bb      	str	r3, [r7, #8]
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b34:	2302      	movs	r3, #2
 8001b36:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b40:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b42:	2300      	movs	r3, #0
 8001b44:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001b46:	f107 0308 	add.w	r3, r7, #8
 8001b4a:	2103      	movs	r1, #3
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f003 f913 	bl	8004d78 <HAL_RCC_ClockConfig>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <SystemClock_Config+0xc4>
            {
        Error_Handler();
 8001b58:	f000 f9a0 	bl	8001e9c <Error_Handler>
    }
}
 8001b5c:	bf00      	nop
 8001b5e:	3750      	adds	r7, #80	; 0x50
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40007000 	.word	0x40007000

08001b6c <MX_CRC_Init>:
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
    /* USER CODE END CRC_Init 0 */

    /* USER CODE BEGIN CRC_Init 1 */

    /* USER CODE END CRC_Init 1 */
    hcrc.Instance = CRC;
 8001b70:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <MX_CRC_Init+0x20>)
 8001b72:	4a07      	ldr	r2, [pc, #28]	; (8001b90 <MX_CRC_Init+0x24>)
 8001b74:	601a      	str	r2, [r3, #0]
    if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001b76:	4805      	ldr	r0, [pc, #20]	; (8001b8c <MX_CRC_Init+0x20>)
 8001b78:	f000 fdf1 	bl	800275e <HAL_CRC_Init>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_CRC_Init+0x1a>
            {
        Error_Handler();
 8001b82:	f000 f98b 	bl	8001e9c <Error_Handler>
    }
    /* USER CODE BEGIN CRC_Init 2 */

    /* USER CODE END CRC_Init 2 */

}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	200002b0 	.word	0x200002b0
 8001b90:	40023000 	.word	0x40023000

08001b94 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
    /* USER CODE END I2C2_Init 0 */

    /* USER CODE BEGIN I2C2_Init 1 */

    /* USER CODE END I2C2_Init 1 */
    hi2c2.Instance = I2C2;
 8001b98:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <MX_I2C2_Init+0x74>)
 8001b9a:	4a1c      	ldr	r2, [pc, #112]	; (8001c0c <MX_I2C2_Init+0x78>)
 8001b9c:	601a      	str	r2, [r3, #0]
    hi2c2.Init.ClockSpeed = 100000;
 8001b9e:	4b1a      	ldr	r3, [pc, #104]	; (8001c08 <MX_I2C2_Init+0x74>)
 8001ba0:	4a1b      	ldr	r2, [pc, #108]	; (8001c10 <MX_I2C2_Init+0x7c>)
 8001ba2:	605a      	str	r2, [r3, #4]
    hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ba4:	4b18      	ldr	r3, [pc, #96]	; (8001c08 <MX_I2C2_Init+0x74>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	609a      	str	r2, [r3, #8]
    hi2c2.Init.OwnAddress1 = 0;
 8001baa:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <MX_I2C2_Init+0x74>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	60da      	str	r2, [r3, #12]
    hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bb0:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <MX_I2C2_Init+0x74>)
 8001bb2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bb6:	611a      	str	r2, [r3, #16]
    hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bb8:	4b13      	ldr	r3, [pc, #76]	; (8001c08 <MX_I2C2_Init+0x74>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	615a      	str	r2, [r3, #20]
    hi2c2.Init.OwnAddress2 = 0;
 8001bbe:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <MX_I2C2_Init+0x74>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	619a      	str	r2, [r3, #24]
    hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bc4:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <MX_I2C2_Init+0x74>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	61da      	str	r2, [r3, #28]
    hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bca:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <MX_I2C2_Init+0x74>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001bd0:	480d      	ldr	r0, [pc, #52]	; (8001c08 <MX_I2C2_Init+0x74>)
 8001bd2:	f001 ff79 	bl	8003ac8 <HAL_I2C_Init>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_I2C2_Init+0x4c>
            {
        Error_Handler();
 8001bdc:	f000 f95e 	bl	8001e9c <Error_Handler>
    }
    /** Configure Analogue filter
     */
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001be0:	2100      	movs	r1, #0
 8001be2:	4809      	ldr	r0, [pc, #36]	; (8001c08 <MX_I2C2_Init+0x74>)
 8001be4:	f003 f84d 	bl	8004c82 <HAL_I2CEx_ConfigAnalogFilter>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_I2C2_Init+0x5e>
            {
        Error_Handler();
 8001bee:	f000 f955 	bl	8001e9c <Error_Handler>
    }
    /** Configure Digital filter
     */
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	4804      	ldr	r0, [pc, #16]	; (8001c08 <MX_I2C2_Init+0x74>)
 8001bf6:	f003 f880 	bl	8004cfa <HAL_I2CEx_ConfigDigitalFilter>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_I2C2_Init+0x70>
            {
        Error_Handler();
 8001c00:	f000 f94c 	bl	8001e9c <Error_Handler>
    }
    /* USER CODE BEGIN I2C2_Init 2 */

    /* USER CODE END I2C2_Init 2 */

}
 8001c04:	bf00      	nop
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	200002b8 	.word	0x200002b8
 8001c0c:	40005800 	.word	0x40005800
 8001c10:	000186a0 	.word	0x000186a0

08001c14 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8001c18:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <MX_USART1_UART_Init+0x4c>)
 8001c1a:	4a12      	ldr	r2, [pc, #72]	; (8001c64 <MX_USART1_UART_Init+0x50>)
 8001c1c:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8001c1e:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <MX_USART1_UART_Init+0x4c>)
 8001c20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c24:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c26:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <MX_USART1_UART_Init+0x4c>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <MX_USART1_UART_Init+0x4c>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8001c32:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <MX_USART1_UART_Init+0x4c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8001c38:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <MX_USART1_UART_Init+0x4c>)
 8001c3a:	220c      	movs	r2, #12
 8001c3c:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c3e:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <MX_USART1_UART_Init+0x4c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c44:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <MX_USART1_UART_Init+0x4c>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c4a:	4805      	ldr	r0, [pc, #20]	; (8001c60 <MX_USART1_UART_Init+0x4c>)
 8001c4c:	f003 fd94 	bl	8005778 <HAL_UART_Init>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_USART1_UART_Init+0x46>
            {
        Error_Handler();
 8001c56:	f000 f921 	bl	8001e9c <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */

}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	2000036c 	.word	0x2000036c
 8001c64:	40011000 	.word	0x40011000

08001c68 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA2_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	607b      	str	r3, [r7, #4]
 8001c72:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <MX_DMA_Init+0x3c>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	4a0b      	ldr	r2, [pc, #44]	; (8001ca4 <MX_DMA_Init+0x3c>)
 8001c78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7e:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <MX_DMA_Init+0x3c>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c86:	607b      	str	r3, [r7, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init */
    /* DMA2_Stream2_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	203a      	movs	r0, #58	; 0x3a
 8001c90:	f000 fd1d 	bl	80026ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001c94:	203a      	movs	r0, #58	; 0x3a
 8001c96:	f000 fd36 	bl	8002706 <HAL_NVIC_EnableIRQ>

}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40023800 	.word	0x40023800

08001ca8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08c      	sub	sp, #48	; 0x30
 8001cac:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001cae:	f107 031c 	add.w	r3, r7, #28
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	605a      	str	r2, [r3, #4]
 8001cb8:	609a      	str	r2, [r3, #8]
 8001cba:	60da      	str	r2, [r3, #12]
 8001cbc:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61bb      	str	r3, [r7, #24]
 8001cc2:	4b70      	ldr	r3, [pc, #448]	; (8001e84 <MX_GPIO_Init+0x1dc>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	4a6f      	ldr	r2, [pc, #444]	; (8001e84 <MX_GPIO_Init+0x1dc>)
 8001cc8:	f043 0310 	orr.w	r3, r3, #16
 8001ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cce:	4b6d      	ldr	r3, [pc, #436]	; (8001e84 <MX_GPIO_Init+0x1dc>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	f003 0310 	and.w	r3, r3, #16
 8001cd6:	61bb      	str	r3, [r7, #24]
 8001cd8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]
 8001cde:	4b69      	ldr	r3, [pc, #420]	; (8001e84 <MX_GPIO_Init+0x1dc>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	4a68      	ldr	r2, [pc, #416]	; (8001e84 <MX_GPIO_Init+0x1dc>)
 8001ce4:	f043 0304 	orr.w	r3, r3, #4
 8001ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cea:	4b66      	ldr	r3, [pc, #408]	; (8001e84 <MX_GPIO_Init+0x1dc>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	617b      	str	r3, [r7, #20]
 8001cf4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	613b      	str	r3, [r7, #16]
 8001cfa:	4b62      	ldr	r3, [pc, #392]	; (8001e84 <MX_GPIO_Init+0x1dc>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	4a61      	ldr	r2, [pc, #388]	; (8001e84 <MX_GPIO_Init+0x1dc>)
 8001d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d04:	6313      	str	r3, [r2, #48]	; 0x30
 8001d06:	4b5f      	ldr	r3, [pc, #380]	; (8001e84 <MX_GPIO_Init+0x1dc>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	4b5b      	ldr	r3, [pc, #364]	; (8001e84 <MX_GPIO_Init+0x1dc>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	4a5a      	ldr	r2, [pc, #360]	; (8001e84 <MX_GPIO_Init+0x1dc>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	6313      	str	r3, [r2, #48]	; 0x30
 8001d22:	4b58      	ldr	r3, [pc, #352]	; (8001e84 <MX_GPIO_Init+0x1dc>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60bb      	str	r3, [r7, #8]
 8001d32:	4b54      	ldr	r3, [pc, #336]	; (8001e84 <MX_GPIO_Init+0x1dc>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	4a53      	ldr	r2, [pc, #332]	; (8001e84 <MX_GPIO_Init+0x1dc>)
 8001d38:	f043 0302 	orr.w	r3, r3, #2
 8001d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3e:	4b51      	ldr	r3, [pc, #324]	; (8001e84 <MX_GPIO_Init+0x1dc>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	607b      	str	r3, [r7, #4]
 8001d4e:	4b4d      	ldr	r3, [pc, #308]	; (8001e84 <MX_GPIO_Init+0x1dc>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	4a4c      	ldr	r2, [pc, #304]	; (8001e84 <MX_GPIO_Init+0x1dc>)
 8001d54:	f043 0308 	orr.w	r3, r3, #8
 8001d58:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5a:	4b4a      	ldr	r3, [pc, #296]	; (8001e84 <MX_GPIO_Init+0x1dc>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	607b      	str	r3, [r7, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(INT_NET_PWR_GPIO_Port, INT_NET_PWR_Pin, GPIO_PIN_RESET);
 8001d66:	2200      	movs	r2, #0
 8001d68:	2101      	movs	r1, #1
 8001d6a:	4847      	ldr	r0, [pc, #284]	; (8001e88 <MX_GPIO_Init+0x1e0>)
 8001d6c:	f001 fe78 	bl	8003a60 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, INT_NET_RST_Pin | INT_NET_DTR_Pin, GPIO_PIN_RESET);
 8001d70:	2200      	movs	r2, #0
 8001d72:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001d76:	4845      	ldr	r0, [pc, #276]	; (8001e8c <MX_GPIO_Init+0x1e4>)
 8001d78:	f001 fe72 	bl	8003a60 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(SYS_LED_GPIO_Port, SYS_LED_Pin, GPIO_PIN_RESET);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d82:	4843      	ldr	r0, [pc, #268]	; (8001e90 <MX_GPIO_Init+0x1e8>)
 8001d84:	f001 fe6c 	bl	8003a60 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : PE2 PE3 PE4 PE5
     PE6 PE7 PE8 PE9
     PE10 PE11 PE12 PE13
     PE14 PE15 PE0 PE1 */
    GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5
 8001d88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d8c:	61fb      	str	r3, [r7, #28]
            | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9
            | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13
            | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_0 | GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d96:	f107 031c 	add.w	r3, r7, #28
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	483d      	ldr	r0, [pc, #244]	; (8001e94 <MX_GPIO_Init+0x1ec>)
 8001d9e:	f001 fbdb 	bl	8003558 <HAL_GPIO_Init>

    /*Configure GPIO pins : PC13 PC14 PC15 PC1
     PC2 PC3 PC4 PC5
     PC6 PC7 PC8 PC9
     PC10 PC11 PC12 */
    GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_1
 8001da2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001da6:	61fb      	str	r3, [r7, #28]
            | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5
            | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9
            | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001da8:	2303      	movs	r3, #3
 8001daa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001db0:	f107 031c 	add.w	r3, r7, #28
 8001db4:	4619      	mov	r1, r3
 8001db6:	4834      	ldr	r0, [pc, #208]	; (8001e88 <MX_GPIO_Init+0x1e0>)
 8001db8:	f001 fbce 	bl	8003558 <HAL_GPIO_Init>

    /*Configure GPIO pin : INT_NET_PWR_Pin */
    GPIO_InitStruct.Pin = INT_NET_PWR_Pin;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(INT_NET_PWR_GPIO_Port, &GPIO_InitStruct);
 8001dcc:	f107 031c 	add.w	r3, r7, #28
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	482d      	ldr	r0, [pc, #180]	; (8001e88 <MX_GPIO_Init+0x1e0>)
 8001dd4:	f001 fbc0 	bl	8003558 <HAL_GPIO_Init>

    /*Configure GPIO pins : PA0 PA1 PA2 PA3
     PA4 PA5 PA6 PA7
     PA8 PA11 PA12 PA15 */
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3
 8001dd8:	f649 13ff 	movw	r3, #39423	; 0x99ff
 8001ddc:	61fb      	str	r3, [r7, #28]
            | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7
            | GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dde:	2303      	movs	r3, #3
 8001de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de6:	f107 031c 	add.w	r3, r7, #28
 8001dea:	4619      	mov	r1, r3
 8001dec:	482a      	ldr	r0, [pc, #168]	; (8001e98 <MX_GPIO_Init+0x1f0>)
 8001dee:	f001 fbb3 	bl	8003558 <HAL_GPIO_Init>

    /*Configure GPIO pins : PB0 PB1 PB12 PB13
     PB4 PB5 PB6 PB7
     PB8 */
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_12 | GPIO_PIN_13
 8001df2:	f243 13f3 	movw	r3, #12787	; 0x31f3
 8001df6:	61fb      	str	r3, [r7, #28]
            | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7
            | GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e00:	f107 031c 	add.w	r3, r7, #28
 8001e04:	4619      	mov	r1, r3
 8001e06:	4821      	ldr	r0, [pc, #132]	; (8001e8c <MX_GPIO_Init+0x1e4>)
 8001e08:	f001 fba6 	bl	8003558 <HAL_GPIO_Init>

    /*Configure GPIO pin : BOOT1_Pin */
    GPIO_InitStruct.Pin = BOOT1_Pin;
 8001e0c:	2304      	movs	r3, #4
 8001e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e10:	2300      	movs	r3, #0
 8001e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e14:	2302      	movs	r3, #2
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001e18:	f107 031c 	add.w	r3, r7, #28
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	481b      	ldr	r0, [pc, #108]	; (8001e8c <MX_GPIO_Init+0x1e4>)
 8001e20:	f001 fb9a 	bl	8003558 <HAL_GPIO_Init>

    /*Configure GPIO pins : INT_NET_RST_Pin INT_NET_DTR_Pin */
    GPIO_InitStruct.Pin = INT_NET_RST_Pin | INT_NET_DTR_Pin;
 8001e24:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e32:	2300      	movs	r3, #0
 8001e34:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e36:	f107 031c 	add.w	r3, r7, #28
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4813      	ldr	r0, [pc, #76]	; (8001e8c <MX_GPIO_Init+0x1e4>)
 8001e3e:	f001 fb8b 	bl	8003558 <HAL_GPIO_Init>

    /*Configure GPIO pins : PD8 PD9 PD10 PD11
     PD12 PD14 PD15 PD0
     PD1 PD2 PD3 PD4
     PD5 PD6 PD7 */
    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11
 8001e42:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8001e46:	61fb      	str	r3, [r7, #28]
            | GPIO_PIN_12 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_0
            | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4
            | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e50:	f107 031c 	add.w	r3, r7, #28
 8001e54:	4619      	mov	r1, r3
 8001e56:	480e      	ldr	r0, [pc, #56]	; (8001e90 <MX_GPIO_Init+0x1e8>)
 8001e58:	f001 fb7e 	bl	8003558 <HAL_GPIO_Init>

    /*Configure GPIO pin : SYS_LED_Pin */
    GPIO_InitStruct.Pin = SYS_LED_Pin;
 8001e5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e62:	2301      	movs	r3, #1
 8001e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e66:	2302      	movs	r3, #2
 8001e68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(SYS_LED_GPIO_Port, &GPIO_InitStruct);
 8001e6e:	f107 031c 	add.w	r3, r7, #28
 8001e72:	4619      	mov	r1, r3
 8001e74:	4806      	ldr	r0, [pc, #24]	; (8001e90 <MX_GPIO_Init+0x1e8>)
 8001e76:	f001 fb6f 	bl	8003558 <HAL_GPIO_Init>

}
 8001e7a:	bf00      	nop
 8001e7c:	3730      	adds	r7, #48	; 0x30
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40023800 	.word	0x40023800
 8001e88:	40020800 	.word	0x40020800
 8001e8c:	40020400 	.word	0x40020400
 8001e90:	40020c00 	.word	0x40020c00
 8001e94:	40021000 	.word	0x40021000
 8001e98:	40020000 	.word	0x40020000

08001e9c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    /* USER CODE END Error_Handler_Debug */
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
	...

08001eac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	607b      	str	r3, [r7, #4]
 8001eb6:	4b10      	ldr	r3, [pc, #64]	; (8001ef8 <HAL_MspInit+0x4c>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	4a0f      	ldr	r2, [pc, #60]	; (8001ef8 <HAL_MspInit+0x4c>)
 8001ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec2:	4b0d      	ldr	r3, [pc, #52]	; (8001ef8 <HAL_MspInit+0x4c>)
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eca:	607b      	str	r3, [r7, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	603b      	str	r3, [r7, #0]
 8001ed2:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <HAL_MspInit+0x4c>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	4a08      	ldr	r2, [pc, #32]	; (8001ef8 <HAL_MspInit+0x4c>)
 8001ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001edc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ede:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <HAL_MspInit+0x4c>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee6:	603b      	str	r3, [r7, #0]
 8001ee8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	40023800 	.word	0x40023800

08001efc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a0b      	ldr	r2, [pc, #44]	; (8001f38 <HAL_CRC_MspInit+0x3c>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d10d      	bne.n	8001f2a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <HAL_CRC_MspInit+0x40>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	4a09      	ldr	r2, [pc, #36]	; (8001f3c <HAL_CRC_MspInit+0x40>)
 8001f18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1e:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <HAL_CRC_MspInit+0x40>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001f2a:	bf00      	nop
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	40023000 	.word	0x40023000
 8001f3c:	40023800 	.word	0x40023800

08001f40 <HAL_CRC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspDeInit(CRC_HandleTypeDef* hcrc)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a07      	ldr	r2, [pc, #28]	; (8001f6c <HAL_CRC_MspDeInit+0x2c>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d105      	bne.n	8001f5e <HAL_CRC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN CRC_MspDeInit 0 */

  /* USER CODE END CRC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CRC_CLK_DISABLE();
 8001f52:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <HAL_CRC_MspDeInit+0x30>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	4a06      	ldr	r2, [pc, #24]	; (8001f70 <HAL_CRC_MspDeInit+0x30>)
 8001f58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f5c:	6313      	str	r3, [r2, #48]	; 0x30
  /* USER CODE BEGIN CRC_MspDeInit 1 */

  /* USER CODE END CRC_MspDeInit 1 */
  }

}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40023000 	.word	0x40023000
 8001f70:	40023800 	.word	0x40023800

08001f74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08a      	sub	sp, #40	; 0x28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 0314 	add.w	r3, r7, #20
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a22      	ldr	r2, [pc, #136]	; (800201c <HAL_I2C_MspInit+0xa8>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d13d      	bne.n	8002012 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	4b21      	ldr	r3, [pc, #132]	; (8002020 <HAL_I2C_MspInit+0xac>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	4a20      	ldr	r2, [pc, #128]	; (8002020 <HAL_I2C_MspInit+0xac>)
 8001fa0:	f043 0302 	orr.w	r3, r3, #2
 8001fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa6:	4b1e      	ldr	r3, [pc, #120]	; (8002020 <HAL_I2C_MspInit+0xac>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INT_EEPROM_SCL_Pin;
 8001fb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fb8:	2312      	movs	r3, #18
 8001fba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001fc4:	2304      	movs	r3, #4
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(INT_EEPROM_SCL_GPIO_Port, &GPIO_InitStruct);
 8001fc8:	f107 0314 	add.w	r3, r7, #20
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4815      	ldr	r0, [pc, #84]	; (8002024 <HAL_I2C_MspInit+0xb0>)
 8001fd0:	f001 fac2 	bl	8003558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = INT_EEPROM_SDA_Pin;
 8001fd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fda:	2312      	movs	r3, #18
 8001fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001fe6:	2309      	movs	r3, #9
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(INT_EEPROM_SDA_GPIO_Port, &GPIO_InitStruct);
 8001fea:	f107 0314 	add.w	r3, r7, #20
 8001fee:	4619      	mov	r1, r3
 8001ff0:	480c      	ldr	r0, [pc, #48]	; (8002024 <HAL_I2C_MspInit+0xb0>)
 8001ff2:	f001 fab1 	bl	8003558 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	4b09      	ldr	r3, [pc, #36]	; (8002020 <HAL_I2C_MspInit+0xac>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	4a08      	ldr	r2, [pc, #32]	; (8002020 <HAL_I2C_MspInit+0xac>)
 8002000:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002004:	6413      	str	r3, [r2, #64]	; 0x40
 8002006:	4b06      	ldr	r3, [pc, #24]	; (8002020 <HAL_I2C_MspInit+0xac>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002012:	bf00      	nop
 8002014:	3728      	adds	r7, #40	; 0x28
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40005800 	.word	0x40005800
 8002020:	40023800 	.word	0x40023800
 8002024:	40020400 	.word	0x40020400

08002028 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a08      	ldr	r2, [pc, #32]	; (8002058 <HAL_I2C_MspDeInit+0x30>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d10a      	bne.n	8002050 <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800203a:	4b08      	ldr	r3, [pc, #32]	; (800205c <HAL_I2C_MspDeInit+0x34>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	4a07      	ldr	r2, [pc, #28]	; (800205c <HAL_I2C_MspDeInit+0x34>)
 8002040:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002044:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, INT_EEPROM_SCL_Pin|INT_EEPROM_SDA_Pin);
 8002046:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800204a:	4805      	ldr	r0, [pc, #20]	; (8002060 <HAL_I2C_MspDeInit+0x38>)
 800204c:	f001 fc16 	bl	800387c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8002050:	bf00      	nop
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40005800 	.word	0x40005800
 800205c:	40023800 	.word	0x40023800
 8002060:	40020400 	.word	0x40020400

08002064 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08a      	sub	sp, #40	; 0x28
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206c:	f107 0314 	add.w	r3, r7, #20
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a35      	ldr	r2, [pc, #212]	; (8002158 <HAL_UART_MspInit+0xf4>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d164      	bne.n	8002150 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	613b      	str	r3, [r7, #16]
 800208a:	4b34      	ldr	r3, [pc, #208]	; (800215c <HAL_UART_MspInit+0xf8>)
 800208c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208e:	4a33      	ldr	r2, [pc, #204]	; (800215c <HAL_UART_MspInit+0xf8>)
 8002090:	f043 0310 	orr.w	r3, r3, #16
 8002094:	6453      	str	r3, [r2, #68]	; 0x44
 8002096:	4b31      	ldr	r3, [pc, #196]	; (800215c <HAL_UART_MspInit+0xf8>)
 8002098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209a:	f003 0310 	and.w	r3, r3, #16
 800209e:	613b      	str	r3, [r7, #16]
 80020a0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	4b2d      	ldr	r3, [pc, #180]	; (800215c <HAL_UART_MspInit+0xf8>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	4a2c      	ldr	r2, [pc, #176]	; (800215c <HAL_UART_MspInit+0xf8>)
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	6313      	str	r3, [r2, #48]	; 0x30
 80020b2:	4b2a      	ldr	r3, [pc, #168]	; (800215c <HAL_UART_MspInit+0xf8>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = INT_NET_TX_Pin|INT_NET_RX_Pin;
 80020be:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80020c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c4:	2302      	movs	r3, #2
 80020c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020cc:	2303      	movs	r3, #3
 80020ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020d0:	2307      	movs	r3, #7
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d4:	f107 0314 	add.w	r3, r7, #20
 80020d8:	4619      	mov	r1, r3
 80020da:	4821      	ldr	r0, [pc, #132]	; (8002160 <HAL_UART_MspInit+0xfc>)
 80020dc:	f001 fa3c 	bl	8003558 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80020e0:	4b20      	ldr	r3, [pc, #128]	; (8002164 <HAL_UART_MspInit+0x100>)
 80020e2:	4a21      	ldr	r2, [pc, #132]	; (8002168 <HAL_UART_MspInit+0x104>)
 80020e4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80020e6:	4b1f      	ldr	r3, [pc, #124]	; (8002164 <HAL_UART_MspInit+0x100>)
 80020e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020ec:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020ee:	4b1d      	ldr	r3, [pc, #116]	; (8002164 <HAL_UART_MspInit+0x100>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020f4:	4b1b      	ldr	r3, [pc, #108]	; (8002164 <HAL_UART_MspInit+0x100>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020fa:	4b1a      	ldr	r3, [pc, #104]	; (8002164 <HAL_UART_MspInit+0x100>)
 80020fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002100:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002102:	4b18      	ldr	r3, [pc, #96]	; (8002164 <HAL_UART_MspInit+0x100>)
 8002104:	2200      	movs	r2, #0
 8002106:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002108:	4b16      	ldr	r3, [pc, #88]	; (8002164 <HAL_UART_MspInit+0x100>)
 800210a:	2200      	movs	r2, #0
 800210c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800210e:	4b15      	ldr	r3, [pc, #84]	; (8002164 <HAL_UART_MspInit+0x100>)
 8002110:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002114:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002116:	4b13      	ldr	r3, [pc, #76]	; (8002164 <HAL_UART_MspInit+0x100>)
 8002118:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800211c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800211e:	4b11      	ldr	r3, [pc, #68]	; (8002164 <HAL_UART_MspInit+0x100>)
 8002120:	2200      	movs	r2, #0
 8002122:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002124:	480f      	ldr	r0, [pc, #60]	; (8002164 <HAL_UART_MspInit+0x100>)
 8002126:	f000 fb37 	bl	8002798 <HAL_DMA_Init>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002130:	f7ff feb4 	bl	8001e9c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a0b      	ldr	r2, [pc, #44]	; (8002164 <HAL_UART_MspInit+0x100>)
 8002138:	635a      	str	r2, [r3, #52]	; 0x34
 800213a:	4a0a      	ldr	r2, [pc, #40]	; (8002164 <HAL_UART_MspInit+0x100>)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002140:	2200      	movs	r2, #0
 8002142:	2100      	movs	r1, #0
 8002144:	2025      	movs	r0, #37	; 0x25
 8002146:	f000 fac2 	bl	80026ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800214a:	2025      	movs	r0, #37	; 0x25
 800214c:	f000 fadb 	bl	8002706 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002150:	bf00      	nop
 8002152:	3728      	adds	r7, #40	; 0x28
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40011000 	.word	0x40011000
 800215c:	40023800 	.word	0x40023800
 8002160:	40020000 	.word	0x40020000
 8002164:	2000030c 	.word	0x2000030c
 8002168:	40026440 	.word	0x40026440

0800216c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a0c      	ldr	r2, [pc, #48]	; (80021ac <HAL_UART_MspDeInit+0x40>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d112      	bne.n	80021a4 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800217e:	4b0c      	ldr	r3, [pc, #48]	; (80021b0 <HAL_UART_MspDeInit+0x44>)
 8002180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002182:	4a0b      	ldr	r2, [pc, #44]	; (80021b0 <HAL_UART_MspDeInit+0x44>)
 8002184:	f023 0310 	bic.w	r3, r3, #16
 8002188:	6453      	str	r3, [r2, #68]	; 0x44
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    HAL_GPIO_DeInit(GPIOA, INT_NET_TX_Pin|INT_NET_RX_Pin);
 800218a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800218e:	4809      	ldr	r0, [pc, #36]	; (80021b4 <HAL_UART_MspDeInit+0x48>)
 8002190:	f001 fb74 	bl	800387c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002198:	4618      	mov	r0, r3
 800219a:	f000 fbab 	bl	80028f4 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800219e:	2025      	movs	r0, #37	; 0x25
 80021a0:	f000 fabf 	bl	8002722 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 80021a4:	bf00      	nop
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40011000 	.word	0x40011000
 80021b0:	40023800 	.word	0x40023800
 80021b4:	40020000 	.word	0x40020000

080021b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021c6:	b480      	push	{r7}
 80021c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021ca:	e7fe      	b.n	80021ca <HardFault_Handler+0x4>

080021cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021d0:	e7fe      	b.n	80021d0 <MemManage_Handler+0x4>

080021d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021d2:	b480      	push	{r7}
 80021d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021d6:	e7fe      	b.n	80021d6 <BusFault_Handler+0x4>

080021d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021dc:	e7fe      	b.n	80021dc <UsageFault_Handler+0x4>

080021de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021de:	b480      	push	{r7}
 80021e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021f0:	bf00      	nop
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021fa:	b480      	push	{r7}
 80021fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800220c:	f000 f90c 	bl	8002428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002210:	bf00      	nop
 8002212:	bd80      	pop	{r7, pc}

08002214 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002218:	4803      	ldr	r0, [pc, #12]	; (8002228 <USART1_IRQHandler+0x14>)
 800221a:	f003 fc13 	bl	8005a44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
    SIMCOM_USART_IrqHandler();
 800221e:	f004 fadf 	bl	80067e0 <SIMCOM_USART_IrqHandler>

  /* USER CODE END USART1_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	2000036c 	.word	0x2000036c

0800222c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002230:	4803      	ldr	r0, [pc, #12]	; (8002240 <DMA2_Stream2_IRQHandler+0x14>)
 8002232:	f000 fc37 	bl	8002aa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */
    SIMCOM_DMA_IrqHandler();
 8002236:	f004 faf1 	bl	800681c <SIMCOM_DMA_IrqHandler>

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	2000030c 	.word	0x2000030c

08002244 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800224c:	4b11      	ldr	r3, [pc, #68]	; (8002294 <_sbrk+0x50>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d102      	bne.n	800225a <_sbrk+0x16>
		heap_end = &end;
 8002254:	4b0f      	ldr	r3, [pc, #60]	; (8002294 <_sbrk+0x50>)
 8002256:	4a10      	ldr	r2, [pc, #64]	; (8002298 <_sbrk+0x54>)
 8002258:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800225a:	4b0e      	ldr	r3, [pc, #56]	; (8002294 <_sbrk+0x50>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002260:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <_sbrk+0x50>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4413      	add	r3, r2
 8002268:	466a      	mov	r2, sp
 800226a:	4293      	cmp	r3, r2
 800226c:	d907      	bls.n	800227e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800226e:	f007 fbf3 	bl	8009a58 <__errno>
 8002272:	4602      	mov	r2, r0
 8002274:	230c      	movs	r3, #12
 8002276:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002278:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800227c:	e006      	b.n	800228c <_sbrk+0x48>
	}

	heap_end += incr;
 800227e:	4b05      	ldr	r3, [pc, #20]	; (8002294 <_sbrk+0x50>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4413      	add	r3, r2
 8002286:	4a03      	ldr	r2, [pc, #12]	; (8002294 <_sbrk+0x50>)
 8002288:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800228a:	68fb      	ldr	r3, [r7, #12]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	20000218 	.word	0x20000218
 8002298:	200009d8 	.word	0x200009d8

0800229c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022a0:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <SystemInit+0x28>)
 80022a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a6:	4a07      	ldr	r2, [pc, #28]	; (80022c4 <SystemInit+0x28>)
 80022a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022b0:	4b04      	ldr	r3, [pc, #16]	; (80022c4 <SystemInit+0x28>)
 80022b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022b6:	609a      	str	r2, [r3, #8]
#endif
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	e000ed00 	.word	0xe000ed00

080022c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80022c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002300 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80022cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80022ce:	e003      	b.n	80022d8 <LoopCopyDataInit>

080022d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80022d0:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80022d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80022d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80022d6:	3104      	adds	r1, #4

080022d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80022d8:	480b      	ldr	r0, [pc, #44]	; (8002308 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80022da:	4b0c      	ldr	r3, [pc, #48]	; (800230c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80022dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80022de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80022e0:	d3f6      	bcc.n	80022d0 <CopyDataInit>
  ldr  r2, =_sbss
 80022e2:	4a0b      	ldr	r2, [pc, #44]	; (8002310 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80022e4:	e002      	b.n	80022ec <LoopFillZerobss>

080022e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80022e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80022e8:	f842 3b04 	str.w	r3, [r2], #4

080022ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80022ec:	4b09      	ldr	r3, [pc, #36]	; (8002314 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80022ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80022f0:	d3f9      	bcc.n	80022e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80022f2:	f7ff ffd3 	bl	800229c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022f6:	f007 fbb5 	bl	8009a64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022fa:	f7ff fb0b 	bl	8001914 <main>
  bx  lr    
 80022fe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002300:	2004fff8 	.word	0x2004fff8
  ldr  r3, =_sidata
 8002304:	0800ad0c 	.word	0x0800ad0c
  ldr  r0, =_sdata
 8002308:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800230c:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 8002310:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 8002314:	200009d4 	.word	0x200009d4

08002318 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002318:	e7fe      	b.n	8002318 <ADC_IRQHandler>
	...

0800231c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002320:	4b0e      	ldr	r3, [pc, #56]	; (800235c <HAL_Init+0x40>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a0d      	ldr	r2, [pc, #52]	; (800235c <HAL_Init+0x40>)
 8002326:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800232a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800232c:	4b0b      	ldr	r3, [pc, #44]	; (800235c <HAL_Init+0x40>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a0a      	ldr	r2, [pc, #40]	; (800235c <HAL_Init+0x40>)
 8002332:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002336:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002338:	4b08      	ldr	r3, [pc, #32]	; (800235c <HAL_Init+0x40>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a07      	ldr	r2, [pc, #28]	; (800235c <HAL_Init+0x40>)
 800233e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002342:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002344:	2003      	movs	r0, #3
 8002346:	f000 f9b7 	bl	80026b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800234a:	2000      	movs	r0, #0
 800234c:	f000 f83c 	bl	80023c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002350:	f7ff fdac 	bl	8001eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40023c00 	.word	0x40023c00

08002360 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8002364:	4b13      	ldr	r3, [pc, #76]	; (80023b4 <HAL_DeInit+0x54>)
 8002366:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800236a:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 800236c:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <HAL_DeInit+0x54>)
 800236e:	2200      	movs	r2, #0
 8002370:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8002372:	4b10      	ldr	r3, [pc, #64]	; (80023b4 <HAL_DeInit+0x54>)
 8002374:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002378:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 800237a:	4b0e      	ldr	r3, [pc, #56]	; (80023b4 <HAL_DeInit+0x54>)
 800237c:	2200      	movs	r2, #0
 800237e:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8002380:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <HAL_DeInit+0x54>)
 8002382:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002386:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8002388:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <HAL_DeInit+0x54>)
 800238a:	2200      	movs	r2, #0
 800238c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 800238e:	4b09      	ldr	r3, [pc, #36]	; (80023b4 <HAL_DeInit+0x54>)
 8002390:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002394:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8002396:	4b07      	ldr	r3, [pc, #28]	; (80023b4 <HAL_DeInit+0x54>)
 8002398:	2200      	movs	r2, #0
 800239a:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 800239c:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <HAL_DeInit+0x54>)
 800239e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023a2:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 80023a4:	4b03      	ldr	r3, [pc, #12]	; (80023b4 <HAL_DeInit+0x54>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80023aa:	f000 f805 	bl	80023b8 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40023800 	.word	0x40023800

080023b8 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 80023bc:	bf00      	nop
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
	...

080023c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023d0:	4b12      	ldr	r3, [pc, #72]	; (800241c <HAL_InitTick+0x54>)
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	4b12      	ldr	r3, [pc, #72]	; (8002420 <HAL_InitTick+0x58>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	4619      	mov	r1, r3
 80023da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023de:	fbb3 f3f1 	udiv	r3, r3, r1
 80023e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 f9ad 	bl	8002746 <HAL_SYSTICK_Config>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e00e      	b.n	8002414 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b0f      	cmp	r3, #15
 80023fa:	d80a      	bhi.n	8002412 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023fc:	2200      	movs	r2, #0
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002404:	f000 f963 	bl	80026ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002408:	4a06      	ldr	r2, [pc, #24]	; (8002424 <HAL_InitTick+0x5c>)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800240e:	2300      	movs	r3, #0
 8002410:	e000      	b.n	8002414 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
}
 8002414:	4618      	mov	r0, r3
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	20000000 	.word	0x20000000
 8002420:	20000008 	.word	0x20000008
 8002424:	20000004 	.word	0x20000004

08002428 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800242c:	4b06      	ldr	r3, [pc, #24]	; (8002448 <HAL_IncTick+0x20>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	461a      	mov	r2, r3
 8002432:	4b06      	ldr	r3, [pc, #24]	; (800244c <HAL_IncTick+0x24>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4413      	add	r3, r2
 8002438:	4a04      	ldr	r2, [pc, #16]	; (800244c <HAL_IncTick+0x24>)
 800243a:	6013      	str	r3, [r2, #0]
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	20000008 	.word	0x20000008
 800244c:	200003ac 	.word	0x200003ac

08002450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  return uwTick;
 8002454:	4b03      	ldr	r3, [pc, #12]	; (8002464 <HAL_GetTick+0x14>)
 8002456:	681b      	ldr	r3, [r3, #0]
}
 8002458:	4618      	mov	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	200003ac 	.word	0x200003ac

08002468 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002470:	f7ff ffee 	bl	8002450 <HAL_GetTick>
 8002474:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002480:	d005      	beq.n	800248e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002482:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <HAL_Delay+0x40>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	461a      	mov	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	4413      	add	r3, r2
 800248c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800248e:	bf00      	nop
 8002490:	f7ff ffde 	bl	8002450 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	429a      	cmp	r2, r3
 800249e:	d8f7      	bhi.n	8002490 <HAL_Delay+0x28>
  {
  }
}
 80024a0:	bf00      	nop
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	20000008 	.word	0x20000008

080024ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024bc:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <__NVIC_SetPriorityGrouping+0x44>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024c8:	4013      	ands	r3, r2
 80024ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024de:	4a04      	ldr	r2, [pc, #16]	; (80024f0 <__NVIC_SetPriorityGrouping+0x44>)
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	60d3      	str	r3, [r2, #12]
}
 80024e4:	bf00      	nop
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	e000ed00 	.word	0xe000ed00

080024f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024f8:	4b04      	ldr	r3, [pc, #16]	; (800250c <__NVIC_GetPriorityGrouping+0x18>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	0a1b      	lsrs	r3, r3, #8
 80024fe:	f003 0307 	and.w	r3, r3, #7
}
 8002502:	4618      	mov	r0, r3
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	4603      	mov	r3, r0
 8002518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800251a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251e:	2b00      	cmp	r3, #0
 8002520:	db0b      	blt.n	800253a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002522:	79fb      	ldrb	r3, [r7, #7]
 8002524:	f003 021f 	and.w	r2, r3, #31
 8002528:	4907      	ldr	r1, [pc, #28]	; (8002548 <__NVIC_EnableIRQ+0x38>)
 800252a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252e:	095b      	lsrs	r3, r3, #5
 8002530:	2001      	movs	r0, #1
 8002532:	fa00 f202 	lsl.w	r2, r0, r2
 8002536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	e000e100 	.word	0xe000e100

0800254c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255a:	2b00      	cmp	r3, #0
 800255c:	db10      	blt.n	8002580 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800255e:	79fb      	ldrb	r3, [r7, #7]
 8002560:	f003 021f 	and.w	r2, r3, #31
 8002564:	4909      	ldr	r1, [pc, #36]	; (800258c <__NVIC_DisableIRQ+0x40>)
 8002566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256a:	095b      	lsrs	r3, r3, #5
 800256c:	2001      	movs	r0, #1
 800256e:	fa00 f202 	lsl.w	r2, r0, r2
 8002572:	3320      	adds	r3, #32
 8002574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002578:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800257c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	e000e100 	.word	0xe000e100

08002590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	6039      	str	r1, [r7, #0]
 800259a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800259c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	db0a      	blt.n	80025ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	490c      	ldr	r1, [pc, #48]	; (80025dc <__NVIC_SetPriority+0x4c>)
 80025aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ae:	0112      	lsls	r2, r2, #4
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	440b      	add	r3, r1
 80025b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025b8:	e00a      	b.n	80025d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	4908      	ldr	r1, [pc, #32]	; (80025e0 <__NVIC_SetPriority+0x50>)
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	3b04      	subs	r3, #4
 80025c8:	0112      	lsls	r2, r2, #4
 80025ca:	b2d2      	uxtb	r2, r2
 80025cc:	440b      	add	r3, r1
 80025ce:	761a      	strb	r2, [r3, #24]
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	e000e100 	.word	0xe000e100
 80025e0:	e000ed00 	.word	0xe000ed00

080025e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b089      	sub	sp, #36	; 0x24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	f1c3 0307 	rsb	r3, r3, #7
 80025fe:	2b04      	cmp	r3, #4
 8002600:	bf28      	it	cs
 8002602:	2304      	movcs	r3, #4
 8002604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	3304      	adds	r3, #4
 800260a:	2b06      	cmp	r3, #6
 800260c:	d902      	bls.n	8002614 <NVIC_EncodePriority+0x30>
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	3b03      	subs	r3, #3
 8002612:	e000      	b.n	8002616 <NVIC_EncodePriority+0x32>
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002618:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43da      	mvns	r2, r3
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	401a      	ands	r2, r3
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800262c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	fa01 f303 	lsl.w	r3, r1, r3
 8002636:	43d9      	mvns	r1, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800263c:	4313      	orrs	r3, r2
         );
}
 800263e:	4618      	mov	r0, r3
 8002640:	3724      	adds	r7, #36	; 0x24
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
	...

0800264c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002650:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002654:	4b05      	ldr	r3, [pc, #20]	; (800266c <__NVIC_SystemReset+0x20>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800265c:	4903      	ldr	r1, [pc, #12]	; (800266c <__NVIC_SystemReset+0x20>)
 800265e:	4b04      	ldr	r3, [pc, #16]	; (8002670 <__NVIC_SystemReset+0x24>)
 8002660:	4313      	orrs	r3, r2
 8002662:	60cb      	str	r3, [r1, #12]
 8002664:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002668:	bf00      	nop
 800266a:	e7fd      	b.n	8002668 <__NVIC_SystemReset+0x1c>
 800266c:	e000ed00 	.word	0xe000ed00
 8002670:	05fa0004 	.word	0x05fa0004

08002674 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3b01      	subs	r3, #1
 8002680:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002684:	d301      	bcc.n	800268a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002686:	2301      	movs	r3, #1
 8002688:	e00f      	b.n	80026aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800268a:	4a0a      	ldr	r2, [pc, #40]	; (80026b4 <SysTick_Config+0x40>)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3b01      	subs	r3, #1
 8002690:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002692:	210f      	movs	r1, #15
 8002694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002698:	f7ff ff7a 	bl	8002590 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800269c:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <SysTick_Config+0x40>)
 800269e:	2200      	movs	r2, #0
 80026a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026a2:	4b04      	ldr	r3, [pc, #16]	; (80026b4 <SysTick_Config+0x40>)
 80026a4:	2207      	movs	r2, #7
 80026a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	e000e010 	.word	0xe000e010

080026b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f7ff fef3 	bl	80024ac <__NVIC_SetPriorityGrouping>
}
 80026c6:	bf00      	nop
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b086      	sub	sp, #24
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	4603      	mov	r3, r0
 80026d6:	60b9      	str	r1, [r7, #8]
 80026d8:	607a      	str	r2, [r7, #4]
 80026da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026dc:	2300      	movs	r3, #0
 80026de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026e0:	f7ff ff08 	bl	80024f4 <__NVIC_GetPriorityGrouping>
 80026e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	68b9      	ldr	r1, [r7, #8]
 80026ea:	6978      	ldr	r0, [r7, #20]
 80026ec:	f7ff ff7a 	bl	80025e4 <NVIC_EncodePriority>
 80026f0:	4602      	mov	r2, r0
 80026f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026f6:	4611      	mov	r1, r2
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff ff49 	bl	8002590 <__NVIC_SetPriority>
}
 80026fe:	bf00      	nop
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b082      	sub	sp, #8
 800270a:	af00      	add	r7, sp, #0
 800270c:	4603      	mov	r3, r0
 800270e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff fefb 	bl	8002510 <__NVIC_EnableIRQ>
}
 800271a:	bf00      	nop
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	4603      	mov	r3, r0
 800272a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800272c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff ff0b 	bl	800254c <__NVIC_DisableIRQ>
}
 8002736:	bf00      	nop
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002742:	f7ff ff83 	bl	800264c <__NVIC_SystemReset>

08002746 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b082      	sub	sp, #8
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7ff ff90 	bl	8002674 <SysTick_Config>
 8002754:	4603      	mov	r3, r0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b082      	sub	sp, #8
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e00e      	b.n	800278e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	795b      	ldrb	r3, [r3, #5]
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d105      	bne.n	8002786 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f7ff fbbb 	bl	8001efc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
	...

08002798 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027a0:	2300      	movs	r3, #0
 80027a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027a4:	f7ff fe54 	bl	8002450 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e099      	b.n	80028e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2202      	movs	r2, #2
 80027c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 0201 	bic.w	r2, r2, #1
 80027d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027d4:	e00f      	b.n	80027f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027d6:	f7ff fe3b 	bl	8002450 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b05      	cmp	r3, #5
 80027e2:	d908      	bls.n	80027f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2220      	movs	r2, #32
 80027e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2203      	movs	r2, #3
 80027ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e078      	b.n	80028e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1e8      	bne.n	80027d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800280c:	697a      	ldr	r2, [r7, #20]
 800280e:	4b38      	ldr	r3, [pc, #224]	; (80028f0 <HAL_DMA_Init+0x158>)
 8002810:	4013      	ands	r3, r2
 8002812:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002822:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800282e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800283a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a1b      	ldr	r3, [r3, #32]
 8002840:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	4313      	orrs	r3, r2
 8002846:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	2b04      	cmp	r3, #4
 800284e:	d107      	bne.n	8002860 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002858:	4313      	orrs	r3, r2
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	4313      	orrs	r3, r2
 800285e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	f023 0307 	bic.w	r3, r3, #7
 8002876:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	4313      	orrs	r3, r2
 8002880:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002886:	2b04      	cmp	r3, #4
 8002888:	d117      	bne.n	80028ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	4313      	orrs	r3, r2
 8002892:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00e      	beq.n	80028ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 faef 	bl	8002e80 <DMA_CheckFifoParam>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d008      	beq.n	80028ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2240      	movs	r2, #64	; 0x40
 80028ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80028b6:	2301      	movs	r3, #1
 80028b8:	e016      	b.n	80028e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 faa6 	bl	8002e14 <DMA_CalcBaseAndBitshift>
 80028c8:	4603      	mov	r3, r0
 80028ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d0:	223f      	movs	r2, #63	; 0x3f
 80028d2:	409a      	lsls	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3718      	adds	r7, #24
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	e010803f 	.word	0xe010803f

080028f4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e050      	b.n	80029a8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d101      	bne.n	8002916 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002912:	2302      	movs	r3, #2
 8002914:	e048      	b.n	80029a8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 0201 	bic.w	r2, r2, #1
 8002924:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2200      	movs	r2, #0
 8002934:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2200      	movs	r2, #0
 800293c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2200      	movs	r2, #0
 8002944:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2200      	movs	r2, #0
 800294c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2221      	movs	r2, #33	; 0x21
 8002954:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 fa5c 	bl	8002e14 <DMA_CalcBaseAndBitshift>
 800295c:	4603      	mov	r3, r0
 800295e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002988:	223f      	movs	r2, #63	; 0x3f
 800298a:	409a      	lsls	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
 80029bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029be:	2300      	movs	r3, #0
 80029c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d101      	bne.n	80029d6 <HAL_DMA_Start_IT+0x26>
 80029d2:	2302      	movs	r3, #2
 80029d4:	e040      	b.n	8002a58 <HAL_DMA_Start_IT+0xa8>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d12f      	bne.n	8002a4a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2202      	movs	r2, #2
 80029ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	68b9      	ldr	r1, [r7, #8]
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f000 f9da 	bl	8002db8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a08:	223f      	movs	r2, #63	; 0x3f
 8002a0a:	409a      	lsls	r2, r3
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0216 	orr.w	r2, r2, #22
 8002a1e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d007      	beq.n	8002a38 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 0208 	orr.w	r2, r2, #8
 8002a36:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f042 0201 	orr.w	r2, r2, #1
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	e005      	b.n	8002a56 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a52:	2302      	movs	r3, #2
 8002a54:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3718      	adds	r7, #24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d004      	beq.n	8002a7e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2280      	movs	r2, #128	; 0x80
 8002a78:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e00c      	b.n	8002a98 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2205      	movs	r2, #5
 8002a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 0201 	bic.w	r2, r2, #1
 8002a94:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ab0:	4b92      	ldr	r3, [pc, #584]	; (8002cfc <HAL_DMA_IRQHandler+0x258>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a92      	ldr	r2, [pc, #584]	; (8002d00 <HAL_DMA_IRQHandler+0x25c>)
 8002ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aba:	0a9b      	lsrs	r3, r3, #10
 8002abc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ace:	2208      	movs	r2, #8
 8002ad0:	409a      	lsls	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d01a      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d013      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0204 	bic.w	r2, r2, #4
 8002af6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afc:	2208      	movs	r2, #8
 8002afe:	409a      	lsls	r2, r3
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b08:	f043 0201 	orr.w	r2, r3, #1
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b14:	2201      	movs	r2, #1
 8002b16:	409a      	lsls	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d012      	beq.n	8002b46 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00b      	beq.n	8002b46 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b32:	2201      	movs	r2, #1
 8002b34:	409a      	lsls	r2, r3
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3e:	f043 0202 	orr.w	r2, r3, #2
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4a:	2204      	movs	r2, #4
 8002b4c:	409a      	lsls	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	4013      	ands	r3, r2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d012      	beq.n	8002b7c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00b      	beq.n	8002b7c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b68:	2204      	movs	r2, #4
 8002b6a:	409a      	lsls	r2, r3
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b74:	f043 0204 	orr.w	r2, r3, #4
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b80:	2210      	movs	r2, #16
 8002b82:	409a      	lsls	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	4013      	ands	r3, r2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d043      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0308 	and.w	r3, r3, #8
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d03c      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9e:	2210      	movs	r2, #16
 8002ba0:	409a      	lsls	r2, r3
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d018      	beq.n	8002be6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d108      	bne.n	8002bd4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d024      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	4798      	blx	r3
 8002bd2:	e01f      	b.n	8002c14 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d01b      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	4798      	blx	r3
 8002be4:	e016      	b.n	8002c14 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d107      	bne.n	8002c04 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0208 	bic.w	r2, r2, #8
 8002c02:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d003      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c18:	2220      	movs	r2, #32
 8002c1a:	409a      	lsls	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 808e 	beq.w	8002d42 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0310 	and.w	r3, r3, #16
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 8086 	beq.w	8002d42 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	409a      	lsls	r2, r3
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b05      	cmp	r3, #5
 8002c4c:	d136      	bne.n	8002cbc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0216 	bic.w	r2, r2, #22
 8002c5c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	695a      	ldr	r2, [r3, #20]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c6c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d103      	bne.n	8002c7e <HAL_DMA_IRQHandler+0x1da>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d007      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0208 	bic.w	r2, r2, #8
 8002c8c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c92:	223f      	movs	r2, #63	; 0x3f
 8002c94:	409a      	lsls	r2, r3
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d07d      	beq.n	8002dae <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	4798      	blx	r3
        }
        return;
 8002cba:	e078      	b.n	8002dae <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d01c      	beq.n	8002d04 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d108      	bne.n	8002cea <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d030      	beq.n	8002d42 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	4798      	blx	r3
 8002ce8:	e02b      	b.n	8002d42 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d027      	beq.n	8002d42 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	4798      	blx	r3
 8002cfa:	e022      	b.n	8002d42 <HAL_DMA_IRQHandler+0x29e>
 8002cfc:	20000000 	.word	0x20000000
 8002d00:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10f      	bne.n	8002d32 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 0210 	bic.w	r2, r2, #16
 8002d20:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d032      	beq.n	8002db0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d022      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2205      	movs	r2, #5
 8002d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 0201 	bic.w	r2, r2, #1
 8002d6c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	3301      	adds	r3, #1
 8002d72:	60bb      	str	r3, [r7, #8]
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d307      	bcc.n	8002d8a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1f2      	bne.n	8002d6e <HAL_DMA_IRQHandler+0x2ca>
 8002d88:	e000      	b.n	8002d8c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002d8a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d005      	beq.n	8002db0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	4798      	blx	r3
 8002dac:	e000      	b.n	8002db0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002dae:	bf00      	nop
    }
  }
}
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop

08002db8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
 8002dc4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002dd4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	2b40      	cmp	r3, #64	; 0x40
 8002de4:	d108      	bne.n	8002df8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68ba      	ldr	r2, [r7, #8]
 8002df4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002df6:	e007      	b.n	8002e08 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	60da      	str	r2, [r3, #12]
}
 8002e08:	bf00      	nop
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	3b10      	subs	r3, #16
 8002e24:	4a14      	ldr	r2, [pc, #80]	; (8002e78 <DMA_CalcBaseAndBitshift+0x64>)
 8002e26:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2a:	091b      	lsrs	r3, r3, #4
 8002e2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e2e:	4a13      	ldr	r2, [pc, #76]	; (8002e7c <DMA_CalcBaseAndBitshift+0x68>)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4413      	add	r3, r2
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	461a      	mov	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d909      	bls.n	8002e56 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e4a:	f023 0303 	bic.w	r3, r3, #3
 8002e4e:	1d1a      	adds	r2, r3, #4
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	659a      	str	r2, [r3, #88]	; 0x58
 8002e54:	e007      	b.n	8002e66 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e5e:	f023 0303 	bic.w	r3, r3, #3
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3714      	adds	r7, #20
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	aaaaaaab 	.word	0xaaaaaaab
 8002e7c:	0800abb4 	.word	0x0800abb4

08002e80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d11f      	bne.n	8002eda <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	2b03      	cmp	r3, #3
 8002e9e:	d855      	bhi.n	8002f4c <DMA_CheckFifoParam+0xcc>
 8002ea0:	a201      	add	r2, pc, #4	; (adr r2, 8002ea8 <DMA_CheckFifoParam+0x28>)
 8002ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea6:	bf00      	nop
 8002ea8:	08002eb9 	.word	0x08002eb9
 8002eac:	08002ecb 	.word	0x08002ecb
 8002eb0:	08002eb9 	.word	0x08002eb9
 8002eb4:	08002f4d 	.word	0x08002f4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d045      	beq.n	8002f50 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ec8:	e042      	b.n	8002f50 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ece:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ed2:	d13f      	bne.n	8002f54 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ed8:	e03c      	b.n	8002f54 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ee2:	d121      	bne.n	8002f28 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2b03      	cmp	r3, #3
 8002ee8:	d836      	bhi.n	8002f58 <DMA_CheckFifoParam+0xd8>
 8002eea:	a201      	add	r2, pc, #4	; (adr r2, 8002ef0 <DMA_CheckFifoParam+0x70>)
 8002eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef0:	08002f01 	.word	0x08002f01
 8002ef4:	08002f07 	.word	0x08002f07
 8002ef8:	08002f01 	.word	0x08002f01
 8002efc:	08002f19 	.word	0x08002f19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	73fb      	strb	r3, [r7, #15]
      break;
 8002f04:	e02f      	b.n	8002f66 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d024      	beq.n	8002f5c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f16:	e021      	b.n	8002f5c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f20:	d11e      	bne.n	8002f60 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f26:	e01b      	b.n	8002f60 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d902      	bls.n	8002f34 <DMA_CheckFifoParam+0xb4>
 8002f2e:	2b03      	cmp	r3, #3
 8002f30:	d003      	beq.n	8002f3a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f32:	e018      	b.n	8002f66 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	73fb      	strb	r3, [r7, #15]
      break;
 8002f38:	e015      	b.n	8002f66 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00e      	beq.n	8002f64 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	73fb      	strb	r3, [r7, #15]
      break;
 8002f4a:	e00b      	b.n	8002f64 <DMA_CheckFifoParam+0xe4>
      break;
 8002f4c:	bf00      	nop
 8002f4e:	e00a      	b.n	8002f66 <DMA_CheckFifoParam+0xe6>
      break;
 8002f50:	bf00      	nop
 8002f52:	e008      	b.n	8002f66 <DMA_CheckFifoParam+0xe6>
      break;
 8002f54:	bf00      	nop
 8002f56:	e006      	b.n	8002f66 <DMA_CheckFifoParam+0xe6>
      break;
 8002f58:	bf00      	nop
 8002f5a:	e004      	b.n	8002f66 <DMA_CheckFifoParam+0xe6>
      break;
 8002f5c:	bf00      	nop
 8002f5e:	e002      	b.n	8002f66 <DMA_CheckFifoParam+0xe6>
      break;   
 8002f60:	bf00      	nop
 8002f62:	e000      	b.n	8002f66 <DMA_CheckFifoParam+0xe6>
      break;
 8002f64:	bf00      	nop
    }
  } 
  
  return status; 
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3714      	adds	r7, #20
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002f86:	4b23      	ldr	r3, [pc, #140]	; (8003014 <HAL_FLASH_Program+0xa0>)
 8002f88:	7e1b      	ldrb	r3, [r3, #24]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d101      	bne.n	8002f92 <HAL_FLASH_Program+0x1e>
 8002f8e:	2302      	movs	r3, #2
 8002f90:	e03b      	b.n	800300a <HAL_FLASH_Program+0x96>
 8002f92:	4b20      	ldr	r3, [pc, #128]	; (8003014 <HAL_FLASH_Program+0xa0>)
 8002f94:	2201      	movs	r2, #1
 8002f96:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002f98:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002f9c:	f000 f87c 	bl	8003098 <FLASH_WaitForLastOperation>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002fa4:	7dfb      	ldrb	r3, [r7, #23]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d12b      	bne.n	8003002 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d105      	bne.n	8002fbc <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002fb0:	783b      	ldrb	r3, [r7, #0]
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	68b8      	ldr	r0, [r7, #8]
 8002fb6:	f000 f925 	bl	8003204 <FLASH_Program_Byte>
 8002fba:	e016      	b.n	8002fea <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d105      	bne.n	8002fce <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002fc2:	883b      	ldrh	r3, [r7, #0]
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	68b8      	ldr	r0, [r7, #8]
 8002fc8:	f000 f8f8 	bl	80031bc <FLASH_Program_HalfWord>
 8002fcc:	e00d      	b.n	8002fea <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d105      	bne.n	8002fe0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	68b8      	ldr	r0, [r7, #8]
 8002fda:	f000 f8cd 	bl	8003178 <FLASH_Program_Word>
 8002fde:	e004      	b.n	8002fea <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002fe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fe4:	68b8      	ldr	r0, [r7, #8]
 8002fe6:	f000 f897 	bl	8003118 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002fea:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002fee:	f000 f853 	bl	8003098 <FLASH_WaitForLastOperation>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8002ff6:	4b08      	ldr	r3, [pc, #32]	; (8003018 <HAL_FLASH_Program+0xa4>)
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	4a07      	ldr	r2, [pc, #28]	; (8003018 <HAL_FLASH_Program+0xa4>)
 8002ffc:	f023 0301 	bic.w	r3, r3, #1
 8003000:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003002:	4b04      	ldr	r3, [pc, #16]	; (8003014 <HAL_FLASH_Program+0xa0>)
 8003004:	2200      	movs	r2, #0
 8003006:	761a      	strb	r2, [r3, #24]
  
  return status;
 8003008:	7dfb      	ldrb	r3, [r7, #23]
}
 800300a:	4618      	mov	r0, r3
 800300c:	3718      	adds	r7, #24
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	200003b0 	.word	0x200003b0
 8003018:	40023c00 	.word	0x40023c00

0800301c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003022:	2300      	movs	r3, #0
 8003024:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003026:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <HAL_FLASH_Unlock+0x38>)
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	2b00      	cmp	r3, #0
 800302c:	da0b      	bge.n	8003046 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800302e:	4b09      	ldr	r3, [pc, #36]	; (8003054 <HAL_FLASH_Unlock+0x38>)
 8003030:	4a09      	ldr	r2, [pc, #36]	; (8003058 <HAL_FLASH_Unlock+0x3c>)
 8003032:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003034:	4b07      	ldr	r3, [pc, #28]	; (8003054 <HAL_FLASH_Unlock+0x38>)
 8003036:	4a09      	ldr	r2, [pc, #36]	; (800305c <HAL_FLASH_Unlock+0x40>)
 8003038:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800303a:	4b06      	ldr	r3, [pc, #24]	; (8003054 <HAL_FLASH_Unlock+0x38>)
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	2b00      	cmp	r3, #0
 8003040:	da01      	bge.n	8003046 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003046:	79fb      	ldrb	r3, [r7, #7]
}
 8003048:	4618      	mov	r0, r3
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	40023c00 	.word	0x40023c00
 8003058:	45670123 	.word	0x45670123
 800305c:	cdef89ab 	.word	0xcdef89ab

08003060 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003064:	4b05      	ldr	r3, [pc, #20]	; (800307c <HAL_FLASH_Lock+0x1c>)
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	4a04      	ldr	r2, [pc, #16]	; (800307c <HAL_FLASH_Lock+0x1c>)
 800306a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800306e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	40023c00 	.word	0x40023c00

08003080 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8003084:	4b03      	ldr	r3, [pc, #12]	; (8003094 <HAL_FLASH_GetError+0x14>)
 8003086:	69db      	ldr	r3, [r3, #28]
}  
 8003088:	4618      	mov	r0, r3
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	200003b0 	.word	0x200003b0

08003098 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80030a4:	4b1a      	ldr	r3, [pc, #104]	; (8003110 <FLASH_WaitForLastOperation+0x78>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80030aa:	f7ff f9d1 	bl	8002450 <HAL_GetTick>
 80030ae:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80030b0:	e010      	b.n	80030d4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030b8:	d00c      	beq.n	80030d4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d007      	beq.n	80030d0 <FLASH_WaitForLastOperation+0x38>
 80030c0:	f7ff f9c6 	bl	8002450 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d201      	bcs.n	80030d4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e019      	b.n	8003108 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80030d4:	4b0f      	ldr	r3, [pc, #60]	; (8003114 <FLASH_WaitForLastOperation+0x7c>)
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1e8      	bne.n	80030b2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80030e0:	4b0c      	ldr	r3, [pc, #48]	; (8003114 <FLASH_WaitForLastOperation+0x7c>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d002      	beq.n	80030f2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80030ec:	4b09      	ldr	r3, [pc, #36]	; (8003114 <FLASH_WaitForLastOperation+0x7c>)
 80030ee:	2201      	movs	r2, #1
 80030f0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80030f2:	4b08      	ldr	r3, [pc, #32]	; (8003114 <FLASH_WaitForLastOperation+0x7c>)
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80030fe:	f000 f8a3 	bl	8003248 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e000      	b.n	8003108 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003106:	2300      	movs	r3, #0
  
}  
 8003108:	4618      	mov	r0, r3
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	200003b0 	.word	0x200003b0
 8003114:	40023c00 	.word	0x40023c00

08003118 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003118:	b490      	push	{r4, r7}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003124:	4b13      	ldr	r3, [pc, #76]	; (8003174 <FLASH_Program_DoubleWord+0x5c>)
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	4a12      	ldr	r2, [pc, #72]	; (8003174 <FLASH_Program_DoubleWord+0x5c>)
 800312a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800312e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003130:	4b10      	ldr	r3, [pc, #64]	; (8003174 <FLASH_Program_DoubleWord+0x5c>)
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	4a0f      	ldr	r2, [pc, #60]	; (8003174 <FLASH_Program_DoubleWord+0x5c>)
 8003136:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800313a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800313c:	4b0d      	ldr	r3, [pc, #52]	; (8003174 <FLASH_Program_DoubleWord+0x5c>)
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	4a0c      	ldr	r2, [pc, #48]	; (8003174 <FLASH_Program_DoubleWord+0x5c>)
 8003142:	f043 0301 	orr.w	r3, r3, #1
 8003146:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800314e:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003152:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003156:	f04f 0300 	mov.w	r3, #0
 800315a:	f04f 0400 	mov.w	r4, #0
 800315e:	0013      	movs	r3, r2
 8003160:	2400      	movs	r4, #0
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	3204      	adds	r2, #4
 8003166:	6013      	str	r3, [r2, #0]
}
 8003168:	bf00      	nop
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bc90      	pop	{r4, r7}
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	40023c00 	.word	0x40023c00

08003178 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003182:	4b0d      	ldr	r3, [pc, #52]	; (80031b8 <FLASH_Program_Word+0x40>)
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	4a0c      	ldr	r2, [pc, #48]	; (80031b8 <FLASH_Program_Word+0x40>)
 8003188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800318c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800318e:	4b0a      	ldr	r3, [pc, #40]	; (80031b8 <FLASH_Program_Word+0x40>)
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	4a09      	ldr	r2, [pc, #36]	; (80031b8 <FLASH_Program_Word+0x40>)
 8003194:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003198:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800319a:	4b07      	ldr	r3, [pc, #28]	; (80031b8 <FLASH_Program_Word+0x40>)
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	4a06      	ldr	r2, [pc, #24]	; (80031b8 <FLASH_Program_Word+0x40>)
 80031a0:	f043 0301 	orr.w	r3, r3, #1
 80031a4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	601a      	str	r2, [r3, #0]
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	40023c00 	.word	0x40023c00

080031bc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	460b      	mov	r3, r1
 80031c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80031c8:	4b0d      	ldr	r3, [pc, #52]	; (8003200 <FLASH_Program_HalfWord+0x44>)
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	4a0c      	ldr	r2, [pc, #48]	; (8003200 <FLASH_Program_HalfWord+0x44>)
 80031ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80031d4:	4b0a      	ldr	r3, [pc, #40]	; (8003200 <FLASH_Program_HalfWord+0x44>)
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	4a09      	ldr	r2, [pc, #36]	; (8003200 <FLASH_Program_HalfWord+0x44>)
 80031da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80031e0:	4b07      	ldr	r3, [pc, #28]	; (8003200 <FLASH_Program_HalfWord+0x44>)
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	4a06      	ldr	r2, [pc, #24]	; (8003200 <FLASH_Program_HalfWord+0x44>)
 80031e6:	f043 0301 	orr.w	r3, r3, #1
 80031ea:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	887a      	ldrh	r2, [r7, #2]
 80031f0:	801a      	strh	r2, [r3, #0]
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	40023c00 	.word	0x40023c00

08003204 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	460b      	mov	r3, r1
 800320e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003210:	4b0c      	ldr	r3, [pc, #48]	; (8003244 <FLASH_Program_Byte+0x40>)
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	4a0b      	ldr	r2, [pc, #44]	; (8003244 <FLASH_Program_Byte+0x40>)
 8003216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800321a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800321c:	4b09      	ldr	r3, [pc, #36]	; (8003244 <FLASH_Program_Byte+0x40>)
 800321e:	4a09      	ldr	r2, [pc, #36]	; (8003244 <FLASH_Program_Byte+0x40>)
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003224:	4b07      	ldr	r3, [pc, #28]	; (8003244 <FLASH_Program_Byte+0x40>)
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	4a06      	ldr	r2, [pc, #24]	; (8003244 <FLASH_Program_Byte+0x40>)
 800322a:	f043 0301 	orr.w	r3, r3, #1
 800322e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	78fa      	ldrb	r2, [r7, #3]
 8003234:	701a      	strb	r2, [r3, #0]
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	40023c00 	.word	0x40023c00

08003248 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800324c:	4b2f      	ldr	r3, [pc, #188]	; (800330c <FLASH_SetErrorCode+0xc4>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f003 0310 	and.w	r3, r3, #16
 8003254:	2b00      	cmp	r3, #0
 8003256:	d008      	beq.n	800326a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003258:	4b2d      	ldr	r3, [pc, #180]	; (8003310 <FLASH_SetErrorCode+0xc8>)
 800325a:	69db      	ldr	r3, [r3, #28]
 800325c:	f043 0310 	orr.w	r3, r3, #16
 8003260:	4a2b      	ldr	r2, [pc, #172]	; (8003310 <FLASH_SetErrorCode+0xc8>)
 8003262:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003264:	4b29      	ldr	r3, [pc, #164]	; (800330c <FLASH_SetErrorCode+0xc4>)
 8003266:	2210      	movs	r2, #16
 8003268:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800326a:	4b28      	ldr	r3, [pc, #160]	; (800330c <FLASH_SetErrorCode+0xc4>)
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	f003 0320 	and.w	r3, r3, #32
 8003272:	2b00      	cmp	r3, #0
 8003274:	d008      	beq.n	8003288 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003276:	4b26      	ldr	r3, [pc, #152]	; (8003310 <FLASH_SetErrorCode+0xc8>)
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	f043 0308 	orr.w	r3, r3, #8
 800327e:	4a24      	ldr	r2, [pc, #144]	; (8003310 <FLASH_SetErrorCode+0xc8>)
 8003280:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003282:	4b22      	ldr	r3, [pc, #136]	; (800330c <FLASH_SetErrorCode+0xc4>)
 8003284:	2220      	movs	r2, #32
 8003286:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003288:	4b20      	ldr	r3, [pc, #128]	; (800330c <FLASH_SetErrorCode+0xc4>)
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003290:	2b00      	cmp	r3, #0
 8003292:	d008      	beq.n	80032a6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003294:	4b1e      	ldr	r3, [pc, #120]	; (8003310 <FLASH_SetErrorCode+0xc8>)
 8003296:	69db      	ldr	r3, [r3, #28]
 8003298:	f043 0304 	orr.w	r3, r3, #4
 800329c:	4a1c      	ldr	r2, [pc, #112]	; (8003310 <FLASH_SetErrorCode+0xc8>)
 800329e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80032a0:	4b1a      	ldr	r3, [pc, #104]	; (800330c <FLASH_SetErrorCode+0xc4>)
 80032a2:	2240      	movs	r2, #64	; 0x40
 80032a4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80032a6:	4b19      	ldr	r3, [pc, #100]	; (800330c <FLASH_SetErrorCode+0xc4>)
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d008      	beq.n	80032c4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80032b2:	4b17      	ldr	r3, [pc, #92]	; (8003310 <FLASH_SetErrorCode+0xc8>)
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	f043 0302 	orr.w	r3, r3, #2
 80032ba:	4a15      	ldr	r2, [pc, #84]	; (8003310 <FLASH_SetErrorCode+0xc8>)
 80032bc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80032be:	4b13      	ldr	r3, [pc, #76]	; (800330c <FLASH_SetErrorCode+0xc4>)
 80032c0:	2280      	movs	r2, #128	; 0x80
 80032c2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80032c4:	4b11      	ldr	r3, [pc, #68]	; (800330c <FLASH_SetErrorCode+0xc4>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d009      	beq.n	80032e4 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80032d0:	4b0f      	ldr	r3, [pc, #60]	; (8003310 <FLASH_SetErrorCode+0xc8>)
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	f043 0301 	orr.w	r3, r3, #1
 80032d8:	4a0d      	ldr	r2, [pc, #52]	; (8003310 <FLASH_SetErrorCode+0xc8>)
 80032da:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80032dc:	4b0b      	ldr	r3, [pc, #44]	; (800330c <FLASH_SetErrorCode+0xc4>)
 80032de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032e2:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80032e4:	4b09      	ldr	r3, [pc, #36]	; (800330c <FLASH_SetErrorCode+0xc4>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d008      	beq.n	8003302 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80032f0:	4b07      	ldr	r3, [pc, #28]	; (8003310 <FLASH_SetErrorCode+0xc8>)
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	f043 0320 	orr.w	r3, r3, #32
 80032f8:	4a05      	ldr	r2, [pc, #20]	; (8003310 <FLASH_SetErrorCode+0xc8>)
 80032fa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80032fc:	4b03      	ldr	r3, [pc, #12]	; (800330c <FLASH_SetErrorCode+0xc4>)
 80032fe:	2202      	movs	r2, #2
 8003300:	60da      	str	r2, [r3, #12]
  }
}
 8003302:	bf00      	nop
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	40023c00 	.word	0x40023c00
 8003310:	200003b0 	.word	0x200003b0

08003314 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8003322:	2300      	movs	r3, #0
 8003324:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003326:	4b31      	ldr	r3, [pc, #196]	; (80033ec <HAL_FLASHEx_Erase+0xd8>)
 8003328:	7e1b      	ldrb	r3, [r3, #24]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d101      	bne.n	8003332 <HAL_FLASHEx_Erase+0x1e>
 800332e:	2302      	movs	r3, #2
 8003330:	e058      	b.n	80033e4 <HAL_FLASHEx_Erase+0xd0>
 8003332:	4b2e      	ldr	r3, [pc, #184]	; (80033ec <HAL_FLASHEx_Erase+0xd8>)
 8003334:	2201      	movs	r2, #1
 8003336:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003338:	f24c 3050 	movw	r0, #50000	; 0xc350
 800333c:	f7ff feac 	bl	8003098 <FLASH_WaitForLastOperation>
 8003340:	4603      	mov	r3, r0
 8003342:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8003344:	7bfb      	ldrb	r3, [r7, #15]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d148      	bne.n	80033dc <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003350:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d115      	bne.n	8003386 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	b2da      	uxtb	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	4619      	mov	r1, r3
 8003366:	4610      	mov	r0, r2
 8003368:	f000 f844 	bl	80033f4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800336c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003370:	f7ff fe92 	bl	8003098 <FLASH_WaitForLastOperation>
 8003374:	4603      	mov	r3, r0
 8003376:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8003378:	4b1d      	ldr	r3, [pc, #116]	; (80033f0 <HAL_FLASHEx_Erase+0xdc>)
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	4a1c      	ldr	r2, [pc, #112]	; (80033f0 <HAL_FLASHEx_Erase+0xdc>)
 800337e:	f023 0304 	bic.w	r3, r3, #4
 8003382:	6113      	str	r3, [r2, #16]
 8003384:	e028      	b.n	80033d8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	60bb      	str	r3, [r7, #8]
 800338c:	e01c      	b.n	80033c8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	b2db      	uxtb	r3, r3
 8003394:	4619      	mov	r1, r3
 8003396:	68b8      	ldr	r0, [r7, #8]
 8003398:	f000 f850 	bl	800343c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800339c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80033a0:	f7ff fe7a 	bl	8003098 <FLASH_WaitForLastOperation>
 80033a4:	4603      	mov	r3, r0
 80033a6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80033a8:	4b11      	ldr	r3, [pc, #68]	; (80033f0 <HAL_FLASHEx_Erase+0xdc>)
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	4a10      	ldr	r2, [pc, #64]	; (80033f0 <HAL_FLASHEx_Erase+0xdc>)
 80033ae:	f023 037a 	bic.w	r3, r3, #122	; 0x7a
 80033b2:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80033b4:	7bfb      	ldrb	r3, [r7, #15]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	601a      	str	r2, [r3, #0]
          break;
 80033c0:	e00a      	b.n	80033d8 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	3301      	adds	r3, #1
 80033c6:	60bb      	str	r3, [r7, #8]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68da      	ldr	r2, [r3, #12]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	4413      	add	r3, r2
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d3da      	bcc.n	800338e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 80033d8:	f000 f878 	bl	80034cc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80033dc:	4b03      	ldr	r3, [pc, #12]	; (80033ec <HAL_FLASHEx_Erase+0xd8>)
 80033de:	2200      	movs	r2, #0
 80033e0:	761a      	strb	r2, [r3, #24]

  return status;
 80033e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	200003b0 	.word	0x200003b0
 80033f0:	40023c00 	.word	0x40023c00

080033f4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	4603      	mov	r3, r0
 80033fc:	6039      	str	r1, [r7, #0]
 80033fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003400:	4b0d      	ldr	r3, [pc, #52]	; (8003438 <FLASH_MassErase+0x44>)
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	4a0c      	ldr	r2, [pc, #48]	; (8003438 <FLASH_MassErase+0x44>)
 8003406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800340a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800340c:	4b0a      	ldr	r3, [pc, #40]	; (8003438 <FLASH_MassErase+0x44>)
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	4a09      	ldr	r2, [pc, #36]	; (8003438 <FLASH_MassErase+0x44>)
 8003412:	f043 0304 	orr.w	r3, r3, #4
 8003416:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8003418:	4b07      	ldr	r3, [pc, #28]	; (8003438 <FLASH_MassErase+0x44>)
 800341a:	691a      	ldr	r2, [r3, #16]
 800341c:	79fb      	ldrb	r3, [r7, #7]
 800341e:	021b      	lsls	r3, r3, #8
 8003420:	4313      	orrs	r3, r2
 8003422:	4a05      	ldr	r2, [pc, #20]	; (8003438 <FLASH_MassErase+0x44>)
 8003424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003428:	6113      	str	r3, [r2, #16]
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	40023c00 	.word	0x40023c00

0800343c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	460b      	mov	r3, r1
 8003446:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003448:	2300      	movs	r3, #0
 800344a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800344c:	78fb      	ldrb	r3, [r7, #3]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d102      	bne.n	8003458 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8003452:	2300      	movs	r3, #0
 8003454:	60fb      	str	r3, [r7, #12]
 8003456:	e010      	b.n	800347a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003458:	78fb      	ldrb	r3, [r7, #3]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d103      	bne.n	8003466 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800345e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	e009      	b.n	800347a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003466:	78fb      	ldrb	r3, [r7, #3]
 8003468:	2b02      	cmp	r3, #2
 800346a:	d103      	bne.n	8003474 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800346c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	e002      	b.n	800347a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003474:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003478:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800347a:	4b13      	ldr	r3, [pc, #76]	; (80034c8 <FLASH_Erase_Sector+0x8c>)
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	4a12      	ldr	r2, [pc, #72]	; (80034c8 <FLASH_Erase_Sector+0x8c>)
 8003480:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003484:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003486:	4b10      	ldr	r3, [pc, #64]	; (80034c8 <FLASH_Erase_Sector+0x8c>)
 8003488:	691a      	ldr	r2, [r3, #16]
 800348a:	490f      	ldr	r1, [pc, #60]	; (80034c8 <FLASH_Erase_Sector+0x8c>)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4313      	orrs	r3, r2
 8003490:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003492:	4b0d      	ldr	r3, [pc, #52]	; (80034c8 <FLASH_Erase_Sector+0x8c>)
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	4a0c      	ldr	r2, [pc, #48]	; (80034c8 <FLASH_Erase_Sector+0x8c>)
 8003498:	f023 0378 	bic.w	r3, r3, #120	; 0x78
 800349c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800349e:	4b0a      	ldr	r3, [pc, #40]	; (80034c8 <FLASH_Erase_Sector+0x8c>)
 80034a0:	691a      	ldr	r2, [r3, #16]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	4313      	orrs	r3, r2
 80034a8:	4a07      	ldr	r2, [pc, #28]	; (80034c8 <FLASH_Erase_Sector+0x8c>)
 80034aa:	f043 0302 	orr.w	r3, r3, #2
 80034ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80034b0:	4b05      	ldr	r3, [pc, #20]	; (80034c8 <FLASH_Erase_Sector+0x8c>)
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	4a04      	ldr	r2, [pc, #16]	; (80034c8 <FLASH_Erase_Sector+0x8c>)
 80034b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ba:	6113      	str	r3, [r2, #16]
}
 80034bc:	bf00      	nop
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr
 80034c8:	40023c00 	.word	0x40023c00

080034cc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80034d0:	4b20      	ldr	r3, [pc, #128]	; (8003554 <FLASH_FlushCaches+0x88>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d017      	beq.n	800350c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80034dc:	4b1d      	ldr	r3, [pc, #116]	; (8003554 <FLASH_FlushCaches+0x88>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a1c      	ldr	r2, [pc, #112]	; (8003554 <FLASH_FlushCaches+0x88>)
 80034e2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034e6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80034e8:	4b1a      	ldr	r3, [pc, #104]	; (8003554 <FLASH_FlushCaches+0x88>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a19      	ldr	r2, [pc, #100]	; (8003554 <FLASH_FlushCaches+0x88>)
 80034ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034f2:	6013      	str	r3, [r2, #0]
 80034f4:	4b17      	ldr	r3, [pc, #92]	; (8003554 <FLASH_FlushCaches+0x88>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a16      	ldr	r2, [pc, #88]	; (8003554 <FLASH_FlushCaches+0x88>)
 80034fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034fe:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003500:	4b14      	ldr	r3, [pc, #80]	; (8003554 <FLASH_FlushCaches+0x88>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a13      	ldr	r2, [pc, #76]	; (8003554 <FLASH_FlushCaches+0x88>)
 8003506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800350a:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800350c:	4b11      	ldr	r3, [pc, #68]	; (8003554 <FLASH_FlushCaches+0x88>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003514:	2b00      	cmp	r3, #0
 8003516:	d017      	beq.n	8003548 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003518:	4b0e      	ldr	r3, [pc, #56]	; (8003554 <FLASH_FlushCaches+0x88>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a0d      	ldr	r2, [pc, #52]	; (8003554 <FLASH_FlushCaches+0x88>)
 800351e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003522:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003524:	4b0b      	ldr	r3, [pc, #44]	; (8003554 <FLASH_FlushCaches+0x88>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a0a      	ldr	r2, [pc, #40]	; (8003554 <FLASH_FlushCaches+0x88>)
 800352a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800352e:	6013      	str	r3, [r2, #0]
 8003530:	4b08      	ldr	r3, [pc, #32]	; (8003554 <FLASH_FlushCaches+0x88>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a07      	ldr	r2, [pc, #28]	; (8003554 <FLASH_FlushCaches+0x88>)
 8003536:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800353a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800353c:	4b05      	ldr	r3, [pc, #20]	; (8003554 <FLASH_FlushCaches+0x88>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a04      	ldr	r2, [pc, #16]	; (8003554 <FLASH_FlushCaches+0x88>)
 8003542:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003546:	6013      	str	r3, [r2, #0]
  }
}
 8003548:	bf00      	nop
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	40023c00 	.word	0x40023c00

08003558 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003558:	b480      	push	{r7}
 800355a:	b089      	sub	sp, #36	; 0x24
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003562:	2300      	movs	r3, #0
 8003564:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003566:	2300      	movs	r3, #0
 8003568:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800356a:	2300      	movs	r3, #0
 800356c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800356e:	2300      	movs	r3, #0
 8003570:	61fb      	str	r3, [r7, #28]
 8003572:	e165      	b.n	8003840 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003574:	2201      	movs	r2, #1
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	4013      	ands	r3, r2
 8003586:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	429a      	cmp	r2, r3
 800358e:	f040 8154 	bne.w	800383a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d00b      	beq.n	80035b2 <HAL_GPIO_Init+0x5a>
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d007      	beq.n	80035b2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035a6:	2b11      	cmp	r3, #17
 80035a8:	d003      	beq.n	80035b2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2b12      	cmp	r3, #18
 80035b0:	d130      	bne.n	8003614 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	2203      	movs	r2, #3
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	43db      	mvns	r3, r3
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	4013      	ands	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	68da      	ldr	r2, [r3, #12]
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	fa02 f303 	lsl.w	r3, r2, r3
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	4313      	orrs	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035e8:	2201      	movs	r2, #1
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	43db      	mvns	r3, r3
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	4013      	ands	r3, r2
 80035f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	091b      	lsrs	r3, r3, #4
 80035fe:	f003 0201 	and.w	r2, r3, #1
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	4313      	orrs	r3, r2
 800360c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	2203      	movs	r2, #3
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	43db      	mvns	r3, r3
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	4013      	ands	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	fa02 f303 	lsl.w	r3, r2, r3
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	4313      	orrs	r3, r2
 800363c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	2b02      	cmp	r3, #2
 800364a:	d003      	beq.n	8003654 <HAL_GPIO_Init+0xfc>
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	2b12      	cmp	r3, #18
 8003652:	d123      	bne.n	800369c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	08da      	lsrs	r2, r3, #3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	3208      	adds	r2, #8
 800365c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003660:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	f003 0307 	and.w	r3, r3, #7
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	220f      	movs	r2, #15
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	43db      	mvns	r3, r3
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	4013      	ands	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	691a      	ldr	r2, [r3, #16]
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	f003 0307 	and.w	r3, r3, #7
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	4313      	orrs	r3, r2
 800368c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	08da      	lsrs	r2, r3, #3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	3208      	adds	r2, #8
 8003696:	69b9      	ldr	r1, [r7, #24]
 8003698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	2203      	movs	r2, #3
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	43db      	mvns	r3, r3
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	4013      	ands	r3, r2
 80036b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f003 0203 	and.w	r2, r3, #3
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f000 80ae 	beq.w	800383a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036de:	2300      	movs	r3, #0
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	4b5c      	ldr	r3, [pc, #368]	; (8003854 <HAL_GPIO_Init+0x2fc>)
 80036e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e6:	4a5b      	ldr	r2, [pc, #364]	; (8003854 <HAL_GPIO_Init+0x2fc>)
 80036e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036ec:	6453      	str	r3, [r2, #68]	; 0x44
 80036ee:	4b59      	ldr	r3, [pc, #356]	; (8003854 <HAL_GPIO_Init+0x2fc>)
 80036f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036f6:	60fb      	str	r3, [r7, #12]
 80036f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036fa:	4a57      	ldr	r2, [pc, #348]	; (8003858 <HAL_GPIO_Init+0x300>)
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	089b      	lsrs	r3, r3, #2
 8003700:	3302      	adds	r3, #2
 8003702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003706:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	f003 0303 	and.w	r3, r3, #3
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	220f      	movs	r2, #15
 8003712:	fa02 f303 	lsl.w	r3, r2, r3
 8003716:	43db      	mvns	r3, r3
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	4013      	ands	r3, r2
 800371c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a4e      	ldr	r2, [pc, #312]	; (800385c <HAL_GPIO_Init+0x304>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d025      	beq.n	8003772 <HAL_GPIO_Init+0x21a>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a4d      	ldr	r2, [pc, #308]	; (8003860 <HAL_GPIO_Init+0x308>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d01f      	beq.n	800376e <HAL_GPIO_Init+0x216>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a4c      	ldr	r2, [pc, #304]	; (8003864 <HAL_GPIO_Init+0x30c>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d019      	beq.n	800376a <HAL_GPIO_Init+0x212>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a4b      	ldr	r2, [pc, #300]	; (8003868 <HAL_GPIO_Init+0x310>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d013      	beq.n	8003766 <HAL_GPIO_Init+0x20e>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a4a      	ldr	r2, [pc, #296]	; (800386c <HAL_GPIO_Init+0x314>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d00d      	beq.n	8003762 <HAL_GPIO_Init+0x20a>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a49      	ldr	r2, [pc, #292]	; (8003870 <HAL_GPIO_Init+0x318>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d007      	beq.n	800375e <HAL_GPIO_Init+0x206>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a48      	ldr	r2, [pc, #288]	; (8003874 <HAL_GPIO_Init+0x31c>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d101      	bne.n	800375a <HAL_GPIO_Init+0x202>
 8003756:	2306      	movs	r3, #6
 8003758:	e00c      	b.n	8003774 <HAL_GPIO_Init+0x21c>
 800375a:	2307      	movs	r3, #7
 800375c:	e00a      	b.n	8003774 <HAL_GPIO_Init+0x21c>
 800375e:	2305      	movs	r3, #5
 8003760:	e008      	b.n	8003774 <HAL_GPIO_Init+0x21c>
 8003762:	2304      	movs	r3, #4
 8003764:	e006      	b.n	8003774 <HAL_GPIO_Init+0x21c>
 8003766:	2303      	movs	r3, #3
 8003768:	e004      	b.n	8003774 <HAL_GPIO_Init+0x21c>
 800376a:	2302      	movs	r3, #2
 800376c:	e002      	b.n	8003774 <HAL_GPIO_Init+0x21c>
 800376e:	2301      	movs	r3, #1
 8003770:	e000      	b.n	8003774 <HAL_GPIO_Init+0x21c>
 8003772:	2300      	movs	r3, #0
 8003774:	69fa      	ldr	r2, [r7, #28]
 8003776:	f002 0203 	and.w	r2, r2, #3
 800377a:	0092      	lsls	r2, r2, #2
 800377c:	4093      	lsls	r3, r2
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	4313      	orrs	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003784:	4934      	ldr	r1, [pc, #208]	; (8003858 <HAL_GPIO_Init+0x300>)
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	089b      	lsrs	r3, r3, #2
 800378a:	3302      	adds	r3, #2
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003792:	4b39      	ldr	r3, [pc, #228]	; (8003878 <HAL_GPIO_Init+0x320>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	43db      	mvns	r3, r3
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	4013      	ands	r3, r2
 80037a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037b6:	4a30      	ldr	r2, [pc, #192]	; (8003878 <HAL_GPIO_Init+0x320>)
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80037bc:	4b2e      	ldr	r3, [pc, #184]	; (8003878 <HAL_GPIO_Init+0x320>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	43db      	mvns	r3, r3
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	4013      	ands	r3, r2
 80037ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d003      	beq.n	80037e0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	4313      	orrs	r3, r2
 80037de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037e0:	4a25      	ldr	r2, [pc, #148]	; (8003878 <HAL_GPIO_Init+0x320>)
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037e6:	4b24      	ldr	r3, [pc, #144]	; (8003878 <HAL_GPIO_Init+0x320>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	43db      	mvns	r3, r3
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	4013      	ands	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	4313      	orrs	r3, r2
 8003808:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800380a:	4a1b      	ldr	r2, [pc, #108]	; (8003878 <HAL_GPIO_Init+0x320>)
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003810:	4b19      	ldr	r3, [pc, #100]	; (8003878 <HAL_GPIO_Init+0x320>)
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	43db      	mvns	r3, r3
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	4013      	ands	r3, r2
 800381e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d003      	beq.n	8003834 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	4313      	orrs	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003834:	4a10      	ldr	r2, [pc, #64]	; (8003878 <HAL_GPIO_Init+0x320>)
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	3301      	adds	r3, #1
 800383e:	61fb      	str	r3, [r7, #28]
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	2b0f      	cmp	r3, #15
 8003844:	f67f ae96 	bls.w	8003574 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003848:	bf00      	nop
 800384a:	3724      	adds	r7, #36	; 0x24
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr
 8003854:	40023800 	.word	0x40023800
 8003858:	40013800 	.word	0x40013800
 800385c:	40020000 	.word	0x40020000
 8003860:	40020400 	.word	0x40020400
 8003864:	40020800 	.word	0x40020800
 8003868:	40020c00 	.word	0x40020c00
 800386c:	40021000 	.word	0x40021000
 8003870:	40021400 	.word	0x40021400
 8003874:	40021800 	.word	0x40021800
 8003878:	40013c00 	.word	0x40013c00

0800387c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800387c:	b480      	push	{r7}
 800387e:	b087      	sub	sp, #28
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003886:	2300      	movs	r3, #0
 8003888:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800388a:	2300      	movs	r3, #0
 800388c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800388e:	2300      	movs	r3, #0
 8003890:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003892:	2300      	movs	r3, #0
 8003894:	617b      	str	r3, [r7, #20]
 8003896:	e0c7      	b.n	8003a28 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003898:	2201      	movs	r2, #1
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	4013      	ands	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	f040 80b7 	bne.w	8003a22 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80038b4:	4a61      	ldr	r2, [pc, #388]	; (8003a3c <HAL_GPIO_DeInit+0x1c0>)
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	089b      	lsrs	r3, r3, #2
 80038ba:	3302      	adds	r3, #2
 80038bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038c0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f003 0303 	and.w	r3, r3, #3
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	220f      	movs	r2, #15
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	4013      	ands	r3, r2
 80038d4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a59      	ldr	r2, [pc, #356]	; (8003a40 <HAL_GPIO_DeInit+0x1c4>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d025      	beq.n	800392a <HAL_GPIO_DeInit+0xae>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a58      	ldr	r2, [pc, #352]	; (8003a44 <HAL_GPIO_DeInit+0x1c8>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d01f      	beq.n	8003926 <HAL_GPIO_DeInit+0xaa>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a57      	ldr	r2, [pc, #348]	; (8003a48 <HAL_GPIO_DeInit+0x1cc>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d019      	beq.n	8003922 <HAL_GPIO_DeInit+0xa6>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a56      	ldr	r2, [pc, #344]	; (8003a4c <HAL_GPIO_DeInit+0x1d0>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d013      	beq.n	800391e <HAL_GPIO_DeInit+0xa2>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a55      	ldr	r2, [pc, #340]	; (8003a50 <HAL_GPIO_DeInit+0x1d4>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d00d      	beq.n	800391a <HAL_GPIO_DeInit+0x9e>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a54      	ldr	r2, [pc, #336]	; (8003a54 <HAL_GPIO_DeInit+0x1d8>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d007      	beq.n	8003916 <HAL_GPIO_DeInit+0x9a>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a53      	ldr	r2, [pc, #332]	; (8003a58 <HAL_GPIO_DeInit+0x1dc>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d101      	bne.n	8003912 <HAL_GPIO_DeInit+0x96>
 800390e:	2306      	movs	r3, #6
 8003910:	e00c      	b.n	800392c <HAL_GPIO_DeInit+0xb0>
 8003912:	2307      	movs	r3, #7
 8003914:	e00a      	b.n	800392c <HAL_GPIO_DeInit+0xb0>
 8003916:	2305      	movs	r3, #5
 8003918:	e008      	b.n	800392c <HAL_GPIO_DeInit+0xb0>
 800391a:	2304      	movs	r3, #4
 800391c:	e006      	b.n	800392c <HAL_GPIO_DeInit+0xb0>
 800391e:	2303      	movs	r3, #3
 8003920:	e004      	b.n	800392c <HAL_GPIO_DeInit+0xb0>
 8003922:	2302      	movs	r3, #2
 8003924:	e002      	b.n	800392c <HAL_GPIO_DeInit+0xb0>
 8003926:	2301      	movs	r3, #1
 8003928:	e000      	b.n	800392c <HAL_GPIO_DeInit+0xb0>
 800392a:	2300      	movs	r3, #0
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	f002 0203 	and.w	r2, r2, #3
 8003932:	0092      	lsls	r2, r2, #2
 8003934:	4093      	lsls	r3, r2
 8003936:	68ba      	ldr	r2, [r7, #8]
 8003938:	429a      	cmp	r2, r3
 800393a:	d132      	bne.n	80039a2 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800393c:	4b47      	ldr	r3, [pc, #284]	; (8003a5c <HAL_GPIO_DeInit+0x1e0>)
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	43db      	mvns	r3, r3
 8003944:	4945      	ldr	r1, [pc, #276]	; (8003a5c <HAL_GPIO_DeInit+0x1e0>)
 8003946:	4013      	ands	r3, r2
 8003948:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800394a:	4b44      	ldr	r3, [pc, #272]	; (8003a5c <HAL_GPIO_DeInit+0x1e0>)
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	43db      	mvns	r3, r3
 8003952:	4942      	ldr	r1, [pc, #264]	; (8003a5c <HAL_GPIO_DeInit+0x1e0>)
 8003954:	4013      	ands	r3, r2
 8003956:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003958:	4b40      	ldr	r3, [pc, #256]	; (8003a5c <HAL_GPIO_DeInit+0x1e0>)
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	43db      	mvns	r3, r3
 8003960:	493e      	ldr	r1, [pc, #248]	; (8003a5c <HAL_GPIO_DeInit+0x1e0>)
 8003962:	4013      	ands	r3, r2
 8003964:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003966:	4b3d      	ldr	r3, [pc, #244]	; (8003a5c <HAL_GPIO_DeInit+0x1e0>)
 8003968:	68da      	ldr	r2, [r3, #12]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	43db      	mvns	r3, r3
 800396e:	493b      	ldr	r1, [pc, #236]	; (8003a5c <HAL_GPIO_DeInit+0x1e0>)
 8003970:	4013      	ands	r3, r2
 8003972:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f003 0303 	and.w	r3, r3, #3
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	220f      	movs	r2, #15
 800397e:	fa02 f303 	lsl.w	r3, r2, r3
 8003982:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003984:	4a2d      	ldr	r2, [pc, #180]	; (8003a3c <HAL_GPIO_DeInit+0x1c0>)
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	089b      	lsrs	r3, r3, #2
 800398a:	3302      	adds	r3, #2
 800398c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	43da      	mvns	r2, r3
 8003994:	4829      	ldr	r0, [pc, #164]	; (8003a3c <HAL_GPIO_DeInit+0x1c0>)
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	089b      	lsrs	r3, r3, #2
 800399a:	400a      	ands	r2, r1
 800399c:	3302      	adds	r3, #2
 800399e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	2103      	movs	r1, #3
 80039ac:	fa01 f303 	lsl.w	r3, r1, r3
 80039b0:	43db      	mvns	r3, r3
 80039b2:	401a      	ands	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	08da      	lsrs	r2, r3, #3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3208      	adds	r2, #8
 80039c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	220f      	movs	r2, #15
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	43db      	mvns	r3, r3
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	08d2      	lsrs	r2, r2, #3
 80039d8:	4019      	ands	r1, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	3208      	adds	r2, #8
 80039de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68da      	ldr	r2, [r3, #12]
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	2103      	movs	r1, #3
 80039ec:	fa01 f303 	lsl.w	r3, r1, r3
 80039f0:	43db      	mvns	r3, r3
 80039f2:	401a      	ands	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	2101      	movs	r1, #1
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	fa01 f303 	lsl.w	r3, r1, r3
 8003a04:	43db      	mvns	r3, r3
 8003a06:	401a      	ands	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	2103      	movs	r1, #3
 8003a16:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1a:	43db      	mvns	r3, r3
 8003a1c:	401a      	ands	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	3301      	adds	r3, #1
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	2b0f      	cmp	r3, #15
 8003a2c:	f67f af34 	bls.w	8003898 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003a30:	bf00      	nop
 8003a32:	371c      	adds	r7, #28
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr
 8003a3c:	40013800 	.word	0x40013800
 8003a40:	40020000 	.word	0x40020000
 8003a44:	40020400 	.word	0x40020400
 8003a48:	40020800 	.word	0x40020800
 8003a4c:	40020c00 	.word	0x40020c00
 8003a50:	40021000 	.word	0x40021000
 8003a54:	40021400 	.word	0x40021400
 8003a58:	40021800 	.word	0x40021800
 8003a5c:	40013c00 	.word	0x40013c00

08003a60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	460b      	mov	r3, r1
 8003a6a:	807b      	strh	r3, [r7, #2]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a70:	787b      	ldrb	r3, [r7, #1]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a76:	887a      	ldrh	r2, [r7, #2]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a7c:	e003      	b.n	8003a86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a7e:	887b      	ldrh	r3, [r7, #2]
 8003a80:	041a      	lsls	r2, r3, #16
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	619a      	str	r2, [r3, #24]
}
 8003a86:	bf00      	nop
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr

08003a92 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a92:	b480      	push	{r7}
 8003a94:	b083      	sub	sp, #12
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	695a      	ldr	r2, [r3, #20]
 8003aa2:	887b      	ldrh	r3, [r7, #2]
 8003aa4:	401a      	ands	r2, r3
 8003aa6:	887b      	ldrh	r3, [r7, #2]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d104      	bne.n	8003ab6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003aac:	887b      	ldrh	r3, [r7, #2]
 8003aae:	041a      	lsls	r2, r3, #16
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003ab4:	e002      	b.n	8003abc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003ab6:	887a      	ldrh	r2, [r7, #2]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	619a      	str	r2, [r3, #24]
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e11f      	b.n	8003d1a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d106      	bne.n	8003af4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7fe fa40 	bl	8001f74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2224      	movs	r2, #36	; 0x24
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 0201 	bic.w	r2, r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b2c:	f001 faee 	bl	800510c <HAL_RCC_GetPCLK1Freq>
 8003b30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	4a7b      	ldr	r2, [pc, #492]	; (8003d24 <HAL_I2C_Init+0x25c>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d807      	bhi.n	8003b4c <HAL_I2C_Init+0x84>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4a7a      	ldr	r2, [pc, #488]	; (8003d28 <HAL_I2C_Init+0x260>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	bf94      	ite	ls
 8003b44:	2301      	movls	r3, #1
 8003b46:	2300      	movhi	r3, #0
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	e006      	b.n	8003b5a <HAL_I2C_Init+0x92>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	4a77      	ldr	r2, [pc, #476]	; (8003d2c <HAL_I2C_Init+0x264>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	bf94      	ite	ls
 8003b54:	2301      	movls	r3, #1
 8003b56:	2300      	movhi	r3, #0
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e0db      	b.n	8003d1a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	4a72      	ldr	r2, [pc, #456]	; (8003d30 <HAL_I2C_Init+0x268>)
 8003b66:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6a:	0c9b      	lsrs	r3, r3, #18
 8003b6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	4a64      	ldr	r2, [pc, #400]	; (8003d24 <HAL_I2C_Init+0x25c>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d802      	bhi.n	8003b9c <HAL_I2C_Init+0xd4>
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	e009      	b.n	8003bb0 <HAL_I2C_Init+0xe8>
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ba2:	fb02 f303 	mul.w	r3, r2, r3
 8003ba6:	4a63      	ldr	r2, [pc, #396]	; (8003d34 <HAL_I2C_Init+0x26c>)
 8003ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bac:	099b      	lsrs	r3, r3, #6
 8003bae:	3301      	adds	r3, #1
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6812      	ldr	r2, [r2, #0]
 8003bb4:	430b      	orrs	r3, r1
 8003bb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003bc2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	4956      	ldr	r1, [pc, #344]	; (8003d24 <HAL_I2C_Init+0x25c>)
 8003bcc:	428b      	cmp	r3, r1
 8003bce:	d80d      	bhi.n	8003bec <HAL_I2C_Init+0x124>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	1e59      	subs	r1, r3, #1
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bde:	3301      	adds	r3, #1
 8003be0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be4:	2b04      	cmp	r3, #4
 8003be6:	bf38      	it	cc
 8003be8:	2304      	movcc	r3, #4
 8003bea:	e04f      	b.n	8003c8c <HAL_I2C_Init+0x1c4>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d111      	bne.n	8003c18 <HAL_I2C_Init+0x150>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	1e58      	subs	r0, r3, #1
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6859      	ldr	r1, [r3, #4]
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	440b      	add	r3, r1
 8003c02:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c06:	3301      	adds	r3, #1
 8003c08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	bf0c      	ite	eq
 8003c10:	2301      	moveq	r3, #1
 8003c12:	2300      	movne	r3, #0
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	e012      	b.n	8003c3e <HAL_I2C_Init+0x176>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	1e58      	subs	r0, r3, #1
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6859      	ldr	r1, [r3, #4]
 8003c20:	460b      	mov	r3, r1
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	440b      	add	r3, r1
 8003c26:	0099      	lsls	r1, r3, #2
 8003c28:	440b      	add	r3, r1
 8003c2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c2e:	3301      	adds	r3, #1
 8003c30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	bf0c      	ite	eq
 8003c38:	2301      	moveq	r3, #1
 8003c3a:	2300      	movne	r3, #0
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <HAL_I2C_Init+0x17e>
 8003c42:	2301      	movs	r3, #1
 8003c44:	e022      	b.n	8003c8c <HAL_I2C_Init+0x1c4>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10e      	bne.n	8003c6c <HAL_I2C_Init+0x1a4>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	1e58      	subs	r0, r3, #1
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6859      	ldr	r1, [r3, #4]
 8003c56:	460b      	mov	r3, r1
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	440b      	add	r3, r1
 8003c5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c60:	3301      	adds	r3, #1
 8003c62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c6a:	e00f      	b.n	8003c8c <HAL_I2C_Init+0x1c4>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	1e58      	subs	r0, r3, #1
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6859      	ldr	r1, [r3, #4]
 8003c74:	460b      	mov	r3, r1
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	440b      	add	r3, r1
 8003c7a:	0099      	lsls	r1, r3, #2
 8003c7c:	440b      	add	r3, r1
 8003c7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c82:	3301      	adds	r3, #1
 8003c84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c8c:	6879      	ldr	r1, [r7, #4]
 8003c8e:	6809      	ldr	r1, [r1, #0]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	69da      	ldr	r2, [r3, #28]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003cba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	6911      	ldr	r1, [r2, #16]
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	68d2      	ldr	r2, [r2, #12]
 8003cc6:	4311      	orrs	r1, r2
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	6812      	ldr	r2, [r2, #0]
 8003ccc:	430b      	orrs	r3, r1
 8003cce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	695a      	ldr	r2, [r3, #20]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f042 0201 	orr.w	r2, r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2220      	movs	r2, #32
 8003d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	000186a0 	.word	0x000186a0
 8003d28:	001e847f 	.word	0x001e847f
 8003d2c:	003d08ff 	.word	0x003d08ff
 8003d30:	431bde83 	.word	0x431bde83
 8003d34:	10624dd3 	.word	0x10624dd3

08003d38 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b088      	sub	sp, #32
 8003d3c:	af02      	add	r7, sp, #8
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	4608      	mov	r0, r1
 8003d42:	4611      	mov	r1, r2
 8003d44:	461a      	mov	r2, r3
 8003d46:	4603      	mov	r3, r0
 8003d48:	817b      	strh	r3, [r7, #10]
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	813b      	strh	r3, [r7, #8]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d52:	f7fe fb7d 	bl	8002450 <HAL_GetTick>
 8003d56:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b20      	cmp	r3, #32
 8003d62:	f040 80d9 	bne.w	8003f18 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	2319      	movs	r3, #25
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	496d      	ldr	r1, [pc, #436]	; (8003f24 <HAL_I2C_Mem_Write+0x1ec>)
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 fda9 	bl	80048c8 <I2C_WaitOnFlagUntilTimeout>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	e0cc      	b.n	8003f1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d101      	bne.n	8003d8e <HAL_I2C_Mem_Write+0x56>
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	e0c5      	b.n	8003f1a <HAL_I2C_Mem_Write+0x1e2>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d007      	beq.n	8003db4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f042 0201 	orr.w	r2, r2, #1
 8003db2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dc2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2221      	movs	r2, #33	; 0x21
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2240      	movs	r2, #64	; 0x40
 8003dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6a3a      	ldr	r2, [r7, #32]
 8003dde:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003de4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4a4d      	ldr	r2, [pc, #308]	; (8003f28 <HAL_I2C_Mem_Write+0x1f0>)
 8003df4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003df6:	88f8      	ldrh	r0, [r7, #6]
 8003df8:	893a      	ldrh	r2, [r7, #8]
 8003dfa:	8979      	ldrh	r1, [r7, #10]
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	9301      	str	r3, [sp, #4]
 8003e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	4603      	mov	r3, r0
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f000 fbe4 	bl	80045d4 <I2C_RequestMemoryWrite>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d052      	beq.n	8003eb8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e081      	b.n	8003f1a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 fe2a 	bl	8004a74 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00d      	beq.n	8003e42 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	2b04      	cmp	r3, #4
 8003e2c:	d107      	bne.n	8003e3e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e06b      	b.n	8003f1a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e46:	781a      	ldrb	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e52:	1c5a      	adds	r2, r3, #1
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	f003 0304 	and.w	r3, r3, #4
 8003e7c:	2b04      	cmp	r3, #4
 8003e7e:	d11b      	bne.n	8003eb8 <HAL_I2C_Mem_Write+0x180>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d017      	beq.n	8003eb8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8c:	781a      	ldrb	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e98:	1c5a      	adds	r2, r3, #1
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1aa      	bne.n	8003e16 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f000 fe16 	bl	8004af6 <I2C_WaitOnBTFFlagUntilTimeout>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00d      	beq.n	8003eec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed4:	2b04      	cmp	r3, #4
 8003ed6:	d107      	bne.n	8003ee8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e016      	b.n	8003f1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003efa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2220      	movs	r2, #32
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f14:	2300      	movs	r3, #0
 8003f16:	e000      	b.n	8003f1a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003f18:	2302      	movs	r3, #2
  }
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3718      	adds	r7, #24
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	00100002 	.word	0x00100002
 8003f28:	ffff0000 	.word	0xffff0000

08003f2c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b08c      	sub	sp, #48	; 0x30
 8003f30:	af02      	add	r7, sp, #8
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	4608      	mov	r0, r1
 8003f36:	4611      	mov	r1, r2
 8003f38:	461a      	mov	r2, r3
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	817b      	strh	r3, [r7, #10]
 8003f3e:	460b      	mov	r3, r1
 8003f40:	813b      	strh	r3, [r7, #8]
 8003f42:	4613      	mov	r3, r2
 8003f44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f46:	f7fe fa83 	bl	8002450 <HAL_GetTick>
 8003f4a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b20      	cmp	r3, #32
 8003f56:	f040 8208 	bne.w	800436a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	2319      	movs	r3, #25
 8003f60:	2201      	movs	r2, #1
 8003f62:	497b      	ldr	r1, [pc, #492]	; (8004150 <HAL_I2C_Mem_Read+0x224>)
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 fcaf 	bl	80048c8 <I2C_WaitOnFlagUntilTimeout>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003f70:	2302      	movs	r3, #2
 8003f72:	e1fb      	b.n	800436c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d101      	bne.n	8003f82 <HAL_I2C_Mem_Read+0x56>
 8003f7e:	2302      	movs	r3, #2
 8003f80:	e1f4      	b.n	800436c <HAL_I2C_Mem_Read+0x440>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d007      	beq.n	8003fa8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0201 	orr.w	r2, r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2222      	movs	r2, #34	; 0x22
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2240      	movs	r2, #64	; 0x40
 8003fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003fd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4a5b      	ldr	r2, [pc, #364]	; (8004154 <HAL_I2C_Mem_Read+0x228>)
 8003fe8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fea:	88f8      	ldrh	r0, [r7, #6]
 8003fec:	893a      	ldrh	r2, [r7, #8]
 8003fee:	8979      	ldrh	r1, [r7, #10]
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff2:	9301      	str	r3, [sp, #4]
 8003ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 fb7e 	bl	80046fc <I2C_RequestMemoryRead>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e1b0      	b.n	800436c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800400e:	2b00      	cmp	r3, #0
 8004010:	d113      	bne.n	800403a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004012:	2300      	movs	r3, #0
 8004014:	623b      	str	r3, [r7, #32]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	623b      	str	r3, [r7, #32]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	623b      	str	r3, [r7, #32]
 8004026:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	e184      	b.n	8004344 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800403e:	2b01      	cmp	r3, #1
 8004040:	d11b      	bne.n	800407a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004050:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004052:	2300      	movs	r3, #0
 8004054:	61fb      	str	r3, [r7, #28]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	61fb      	str	r3, [r7, #28]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	61fb      	str	r3, [r7, #28]
 8004066:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	e164      	b.n	8004344 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800407e:	2b02      	cmp	r3, #2
 8004080:	d11b      	bne.n	80040ba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004090:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040a2:	2300      	movs	r3, #0
 80040a4:	61bb      	str	r3, [r7, #24]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	61bb      	str	r3, [r7, #24]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	61bb      	str	r3, [r7, #24]
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	e144      	b.n	8004344 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ba:	2300      	movs	r3, #0
 80040bc:	617b      	str	r3, [r7, #20]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	617b      	str	r3, [r7, #20]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	617b      	str	r3, [r7, #20]
 80040ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80040d0:	e138      	b.n	8004344 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d6:	2b03      	cmp	r3, #3
 80040d8:	f200 80f1 	bhi.w	80042be <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d123      	bne.n	800412c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f000 fd45 	bl	8004b78 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e139      	b.n	800436c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	691a      	ldr	r2, [r3, #16]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004102:	b2d2      	uxtb	r2, r2
 8004104:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410a:	1c5a      	adds	r2, r3, #1
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004114:	3b01      	subs	r3, #1
 8004116:	b29a      	uxth	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004120:	b29b      	uxth	r3, r3
 8004122:	3b01      	subs	r3, #1
 8004124:	b29a      	uxth	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	855a      	strh	r2, [r3, #42]	; 0x2a
 800412a:	e10b      	b.n	8004344 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004130:	2b02      	cmp	r3, #2
 8004132:	d14e      	bne.n	80041d2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004136:	9300      	str	r3, [sp, #0]
 8004138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413a:	2200      	movs	r2, #0
 800413c:	4906      	ldr	r1, [pc, #24]	; (8004158 <HAL_I2C_Mem_Read+0x22c>)
 800413e:	68f8      	ldr	r0, [r7, #12]
 8004140:	f000 fbc2 	bl	80048c8 <I2C_WaitOnFlagUntilTimeout>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d008      	beq.n	800415c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e10e      	b.n	800436c <HAL_I2C_Mem_Read+0x440>
 800414e:	bf00      	nop
 8004150:	00100002 	.word	0x00100002
 8004154:	ffff0000 	.word	0xffff0000
 8004158:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800416a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	691a      	ldr	r2, [r3, #16]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	b2d2      	uxtb	r2, r2
 8004178:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417e:	1c5a      	adds	r2, r3, #1
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004188:	3b01      	subs	r3, #1
 800418a:	b29a      	uxth	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004194:	b29b      	uxth	r3, r3
 8004196:	3b01      	subs	r3, #1
 8004198:	b29a      	uxth	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	691a      	ldr	r2, [r3, #16]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	b2d2      	uxtb	r2, r2
 80041aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	1c5a      	adds	r2, r3, #1
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ba:	3b01      	subs	r3, #1
 80041bc:	b29a      	uxth	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	3b01      	subs	r3, #1
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041d0:	e0b8      	b.n	8004344 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d8:	2200      	movs	r2, #0
 80041da:	4966      	ldr	r1, [pc, #408]	; (8004374 <HAL_I2C_Mem_Read+0x448>)
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 fb73 	bl	80048c8 <I2C_WaitOnFlagUntilTimeout>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e0bf      	b.n	800436c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	691a      	ldr	r2, [r3, #16]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	b2d2      	uxtb	r2, r2
 8004208:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	1c5a      	adds	r2, r3, #1
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004218:	3b01      	subs	r3, #1
 800421a:	b29a      	uxth	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004224:	b29b      	uxth	r3, r3
 8004226:	3b01      	subs	r3, #1
 8004228:	b29a      	uxth	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800422e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004234:	2200      	movs	r2, #0
 8004236:	494f      	ldr	r1, [pc, #316]	; (8004374 <HAL_I2C_Mem_Read+0x448>)
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f000 fb45 	bl	80048c8 <I2C_WaitOnFlagUntilTimeout>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d001      	beq.n	8004248 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e091      	b.n	800436c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004256:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	691a      	ldr	r2, [r3, #16]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004262:	b2d2      	uxtb	r2, r2
 8004264:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426a:	1c5a      	adds	r2, r3, #1
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004274:	3b01      	subs	r3, #1
 8004276:	b29a      	uxth	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004280:	b29b      	uxth	r3, r3
 8004282:	3b01      	subs	r3, #1
 8004284:	b29a      	uxth	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	691a      	ldr	r2, [r3, #16]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	b2d2      	uxtb	r2, r2
 8004296:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429c:	1c5a      	adds	r2, r3, #1
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a6:	3b01      	subs	r3, #1
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	3b01      	subs	r3, #1
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042bc:	e042      	b.n	8004344 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f000 fc58 	bl	8004b78 <I2C_WaitOnRXNEFlagUntilTimeout>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e04c      	b.n	800436c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	691a      	ldr	r2, [r3, #16]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	b2d2      	uxtb	r2, r2
 80042de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e4:	1c5a      	adds	r2, r3, #1
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ee:	3b01      	subs	r3, #1
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	3b01      	subs	r3, #1
 80042fe:	b29a      	uxth	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	f003 0304 	and.w	r3, r3, #4
 800430e:	2b04      	cmp	r3, #4
 8004310:	d118      	bne.n	8004344 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	691a      	ldr	r2, [r3, #16]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431c:	b2d2      	uxtb	r2, r2
 800431e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	1c5a      	adds	r2, r3, #1
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800432e:	3b01      	subs	r3, #1
 8004330:	b29a      	uxth	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433a:	b29b      	uxth	r3, r3
 800433c:	3b01      	subs	r3, #1
 800433e:	b29a      	uxth	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004348:	2b00      	cmp	r3, #0
 800434a:	f47f aec2 	bne.w	80040d2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2220      	movs	r2, #32
 8004352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004366:	2300      	movs	r3, #0
 8004368:	e000      	b.n	800436c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800436a:	2302      	movs	r3, #2
  }
}
 800436c:	4618      	mov	r0, r3
 800436e:	3728      	adds	r7, #40	; 0x28
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	00010004 	.word	0x00010004

08004378 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b08a      	sub	sp, #40	; 0x28
 800437c:	af02      	add	r7, sp, #8
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	607a      	str	r2, [r7, #4]
 8004382:	603b      	str	r3, [r7, #0]
 8004384:	460b      	mov	r3, r1
 8004386:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004388:	f7fe f862 	bl	8002450 <HAL_GetTick>
 800438c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800438e:	2301      	movs	r3, #1
 8004390:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b20      	cmp	r3, #32
 800439c:	f040 8110 	bne.w	80045c0 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	2319      	movs	r3, #25
 80043a6:	2201      	movs	r2, #1
 80043a8:	4988      	ldr	r1, [pc, #544]	; (80045cc <HAL_I2C_IsDeviceReady+0x254>)
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f000 fa8c 	bl	80048c8 <I2C_WaitOnFlagUntilTimeout>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80043b6:	2302      	movs	r3, #2
 80043b8:	e103      	b.n	80045c2 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d101      	bne.n	80043c8 <HAL_I2C_IsDeviceReady+0x50>
 80043c4:	2302      	movs	r3, #2
 80043c6:	e0fc      	b.n	80045c2 <HAL_I2C_IsDeviceReady+0x24a>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d007      	beq.n	80043ee <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f042 0201 	orr.w	r2, r2, #1
 80043ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2224      	movs	r2, #36	; 0x24
 8004402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4a70      	ldr	r2, [pc, #448]	; (80045d0 <HAL_I2C_IsDeviceReady+0x258>)
 8004410:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004420:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	2200      	movs	r2, #0
 800442a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f000 fa4a 	bl	80048c8 <I2C_WaitOnFlagUntilTimeout>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00c      	beq.n	8004454 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004444:	2b00      	cmp	r3, #0
 8004446:	d003      	beq.n	8004450 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800444e:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e0b6      	b.n	80045c2 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004454:	897b      	ldrh	r3, [r7, #10]
 8004456:	b2db      	uxtb	r3, r3
 8004458:	461a      	mov	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004462:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004464:	f7fd fff4 	bl	8002450 <HAL_GetTick>
 8004468:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b02      	cmp	r3, #2
 8004476:	bf0c      	ite	eq
 8004478:	2301      	moveq	r3, #1
 800447a:	2300      	movne	r3, #0
 800447c:	b2db      	uxtb	r3, r3
 800447e:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800448a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800448e:	bf0c      	ite	eq
 8004490:	2301      	moveq	r3, #1
 8004492:	2300      	movne	r3, #0
 8004494:	b2db      	uxtb	r3, r3
 8004496:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004498:	e025      	b.n	80044e6 <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800449a:	f7fd ffd9 	bl	8002450 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d302      	bcc.n	80044b0 <HAL_I2C_IsDeviceReady+0x138>
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d103      	bne.n	80044b8 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	22a0      	movs	r2, #160	; 0xa0
 80044b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	bf0c      	ite	eq
 80044c6:	2301      	moveq	r3, #1
 80044c8:	2300      	movne	r3, #0
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044dc:	bf0c      	ite	eq
 80044de:	2301      	moveq	r3, #1
 80044e0:	2300      	movne	r3, #0
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2ba0      	cmp	r3, #160	; 0xa0
 80044f0:	d005      	beq.n	80044fe <HAL_I2C_IsDeviceReady+0x186>
 80044f2:	7dfb      	ldrb	r3, [r7, #23]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d102      	bne.n	80044fe <HAL_I2C_IsDeviceReady+0x186>
 80044f8:	7dbb      	ldrb	r3, [r7, #22]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0cd      	beq.n	800449a <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2220      	movs	r2, #32
 8004502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b02      	cmp	r3, #2
 8004512:	d129      	bne.n	8004568 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004522:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004524:	2300      	movs	r3, #0
 8004526:	613b      	str	r3, [r7, #16]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	613b      	str	r3, [r7, #16]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	613b      	str	r3, [r7, #16]
 8004538:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	9300      	str	r3, [sp, #0]
 800453e:	2319      	movs	r3, #25
 8004540:	2201      	movs	r2, #1
 8004542:	4922      	ldr	r1, [pc, #136]	; (80045cc <HAL_I2C_IsDeviceReady+0x254>)
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 f9bf 	bl	80048c8 <I2C_WaitOnFlagUntilTimeout>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e036      	b.n	80045c2 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2220      	movs	r2, #32
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004564:	2300      	movs	r3, #0
 8004566:	e02c      	b.n	80045c2 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004576:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004580:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	9300      	str	r3, [sp, #0]
 8004586:	2319      	movs	r3, #25
 8004588:	2201      	movs	r2, #1
 800458a:	4910      	ldr	r1, [pc, #64]	; (80045cc <HAL_I2C_IsDeviceReady+0x254>)
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f000 f99b 	bl	80048c8 <I2C_WaitOnFlagUntilTimeout>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e012      	b.n	80045c2 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	3301      	adds	r3, #1
 80045a0:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	f4ff af33 	bcc.w	8004412 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2220      	movs	r2, #32
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e000      	b.n	80045c2 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 80045c0:	2302      	movs	r3, #2
  }
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3720      	adds	r7, #32
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	00100002 	.word	0x00100002
 80045d0:	ffff0000 	.word	0xffff0000

080045d4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b088      	sub	sp, #32
 80045d8:	af02      	add	r7, sp, #8
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	4608      	mov	r0, r1
 80045de:	4611      	mov	r1, r2
 80045e0:	461a      	mov	r2, r3
 80045e2:	4603      	mov	r3, r0
 80045e4:	817b      	strh	r3, [r7, #10]
 80045e6:	460b      	mov	r3, r1
 80045e8:	813b      	strh	r3, [r7, #8]
 80045ea:	4613      	mov	r3, r2
 80045ec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	6a3b      	ldr	r3, [r7, #32]
 8004604:	2200      	movs	r2, #0
 8004606:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f000 f95c 	bl	80048c8 <I2C_WaitOnFlagUntilTimeout>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00c      	beq.n	8004630 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004620:	2b00      	cmp	r3, #0
 8004622:	d003      	beq.n	800462c <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f44f 7200 	mov.w	r2, #512	; 0x200
 800462a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e05f      	b.n	80046f0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004630:	897b      	ldrh	r3, [r7, #10]
 8004632:	b2db      	uxtb	r3, r3
 8004634:	461a      	mov	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800463e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004642:	6a3a      	ldr	r2, [r7, #32]
 8004644:	492c      	ldr	r1, [pc, #176]	; (80046f8 <I2C_RequestMemoryWrite+0x124>)
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 f995 	bl	8004976 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e04c      	b.n	80046f0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004656:	2300      	movs	r3, #0
 8004658:	617b      	str	r3, [r7, #20]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	695b      	ldr	r3, [r3, #20]
 8004660:	617b      	str	r3, [r7, #20]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	617b      	str	r3, [r7, #20]
 800466a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800466c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800466e:	6a39      	ldr	r1, [r7, #32]
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	f000 f9ff 	bl	8004a74 <I2C_WaitOnTXEFlagUntilTimeout>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00d      	beq.n	8004698 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004680:	2b04      	cmp	r3, #4
 8004682:	d107      	bne.n	8004694 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004692:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e02b      	b.n	80046f0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004698:	88fb      	ldrh	r3, [r7, #6]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d105      	bne.n	80046aa <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800469e:	893b      	ldrh	r3, [r7, #8]
 80046a0:	b2da      	uxtb	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	611a      	str	r2, [r3, #16]
 80046a8:	e021      	b.n	80046ee <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80046aa:	893b      	ldrh	r3, [r7, #8]
 80046ac:	0a1b      	lsrs	r3, r3, #8
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	b2da      	uxtb	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ba:	6a39      	ldr	r1, [r7, #32]
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f000 f9d9 	bl	8004a74 <I2C_WaitOnTXEFlagUntilTimeout>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00d      	beq.n	80046e4 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046cc:	2b04      	cmp	r3, #4
 80046ce:	d107      	bne.n	80046e0 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046de:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e005      	b.n	80046f0 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046e4:	893b      	ldrh	r3, [r7, #8]
 80046e6:	b2da      	uxtb	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3718      	adds	r7, #24
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	00010002 	.word	0x00010002

080046fc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b088      	sub	sp, #32
 8004700:	af02      	add	r7, sp, #8
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	4608      	mov	r0, r1
 8004706:	4611      	mov	r1, r2
 8004708:	461a      	mov	r2, r3
 800470a:	4603      	mov	r3, r0
 800470c:	817b      	strh	r3, [r7, #10]
 800470e:	460b      	mov	r3, r1
 8004710:	813b      	strh	r3, [r7, #8]
 8004712:	4613      	mov	r3, r2
 8004714:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004724:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004734:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	6a3b      	ldr	r3, [r7, #32]
 800473c:	2200      	movs	r2, #0
 800473e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f000 f8c0 	bl	80048c8 <I2C_WaitOnFlagUntilTimeout>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00c      	beq.n	8004768 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004758:	2b00      	cmp	r3, #0
 800475a:	d003      	beq.n	8004764 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004762:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e0a9      	b.n	80048bc <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004768:	897b      	ldrh	r3, [r7, #10]
 800476a:	b2db      	uxtb	r3, r3
 800476c:	461a      	mov	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004776:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	6a3a      	ldr	r2, [r7, #32]
 800477c:	4951      	ldr	r1, [pc, #324]	; (80048c4 <I2C_RequestMemoryRead+0x1c8>)
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	f000 f8f9 	bl	8004976 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e096      	b.n	80048bc <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800478e:	2300      	movs	r3, #0
 8004790:	617b      	str	r3, [r7, #20]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	617b      	str	r3, [r7, #20]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	617b      	str	r3, [r7, #20]
 80047a2:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047a6:	6a39      	ldr	r1, [r7, #32]
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f000 f963 	bl	8004a74 <I2C_WaitOnTXEFlagUntilTimeout>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00d      	beq.n	80047d0 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b8:	2b04      	cmp	r3, #4
 80047ba:	d107      	bne.n	80047cc <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e075      	b.n	80048bc <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047d0:	88fb      	ldrh	r3, [r7, #6]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d105      	bne.n	80047e2 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047d6:	893b      	ldrh	r3, [r7, #8]
 80047d8:	b2da      	uxtb	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	611a      	str	r2, [r3, #16]
 80047e0:	e021      	b.n	8004826 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80047e2:	893b      	ldrh	r3, [r7, #8]
 80047e4:	0a1b      	lsrs	r3, r3, #8
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	b2da      	uxtb	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047f2:	6a39      	ldr	r1, [r7, #32]
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f000 f93d 	bl	8004a74 <I2C_WaitOnTXEFlagUntilTimeout>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00d      	beq.n	800481c <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004804:	2b04      	cmp	r3, #4
 8004806:	d107      	bne.n	8004818 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004816:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e04f      	b.n	80048bc <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800481c:	893b      	ldrh	r3, [r7, #8]
 800481e:	b2da      	uxtb	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004828:	6a39      	ldr	r1, [r7, #32]
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f000 f922 	bl	8004a74 <I2C_WaitOnTXEFlagUntilTimeout>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00d      	beq.n	8004852 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483a:	2b04      	cmp	r3, #4
 800483c:	d107      	bne.n	800484e <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800484c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e034      	b.n	80048bc <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004860:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004864:	9300      	str	r3, [sp, #0]
 8004866:	6a3b      	ldr	r3, [r7, #32]
 8004868:	2200      	movs	r2, #0
 800486a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f000 f82a 	bl	80048c8 <I2C_WaitOnFlagUntilTimeout>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00c      	beq.n	8004894 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004884:	2b00      	cmp	r3, #0
 8004886:	d003      	beq.n	8004890 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800488e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e013      	b.n	80048bc <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004894:	897b      	ldrh	r3, [r7, #10]
 8004896:	b2db      	uxtb	r3, r3
 8004898:	f043 0301 	orr.w	r3, r3, #1
 800489c:	b2da      	uxtb	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	6a3a      	ldr	r2, [r7, #32]
 80048a8:	4906      	ldr	r1, [pc, #24]	; (80048c4 <I2C_RequestMemoryRead+0x1c8>)
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 f863 	bl	8004976 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e000      	b.n	80048bc <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3718      	adds	r7, #24
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	00010002 	.word	0x00010002

080048c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	603b      	str	r3, [r7, #0]
 80048d4:	4613      	mov	r3, r2
 80048d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048d8:	e025      	b.n	8004926 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048e0:	d021      	beq.n	8004926 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048e2:	f7fd fdb5 	bl	8002450 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d302      	bcc.n	80048f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d116      	bne.n	8004926 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2220      	movs	r2, #32
 8004902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	f043 0220 	orr.w	r2, r3, #32
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e023      	b.n	800496e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	0c1b      	lsrs	r3, r3, #16
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b01      	cmp	r3, #1
 800492e:	d10d      	bne.n	800494c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	43da      	mvns	r2, r3
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	4013      	ands	r3, r2
 800493c:	b29b      	uxth	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	bf0c      	ite	eq
 8004942:	2301      	moveq	r3, #1
 8004944:	2300      	movne	r3, #0
 8004946:	b2db      	uxtb	r3, r3
 8004948:	461a      	mov	r2, r3
 800494a:	e00c      	b.n	8004966 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	43da      	mvns	r2, r3
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	4013      	ands	r3, r2
 8004958:	b29b      	uxth	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	bf0c      	ite	eq
 800495e:	2301      	moveq	r3, #1
 8004960:	2300      	movne	r3, #0
 8004962:	b2db      	uxtb	r3, r3
 8004964:	461a      	mov	r2, r3
 8004966:	79fb      	ldrb	r3, [r7, #7]
 8004968:	429a      	cmp	r2, r3
 800496a:	d0b6      	beq.n	80048da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b084      	sub	sp, #16
 800497a:	af00      	add	r7, sp, #0
 800497c:	60f8      	str	r0, [r7, #12]
 800497e:	60b9      	str	r1, [r7, #8]
 8004980:	607a      	str	r2, [r7, #4]
 8004982:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004984:	e051      	b.n	8004a2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	695b      	ldr	r3, [r3, #20]
 800498c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004994:	d123      	bne.n	80049de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2220      	movs	r2, #32
 80049ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ca:	f043 0204 	orr.w	r2, r3, #4
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e046      	b.n	8004a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049e4:	d021      	beq.n	8004a2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049e6:	f7fd fd33 	bl	8002450 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d302      	bcc.n	80049fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d116      	bne.n	8004a2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2220      	movs	r2, #32
 8004a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a16:	f043 0220 	orr.w	r2, r3, #32
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e020      	b.n	8004a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	0c1b      	lsrs	r3, r3, #16
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d10c      	bne.n	8004a4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	43da      	mvns	r2, r3
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	bf14      	ite	ne
 8004a46:	2301      	movne	r3, #1
 8004a48:	2300      	moveq	r3, #0
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	e00b      	b.n	8004a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	43da      	mvns	r2, r3
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	bf14      	ite	ne
 8004a60:	2301      	movne	r3, #1
 8004a62:	2300      	moveq	r3, #0
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d18d      	bne.n	8004986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3710      	adds	r7, #16
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a80:	e02d      	b.n	8004ade <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 f8ce 	bl	8004c24 <I2C_IsAcknowledgeFailed>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e02d      	b.n	8004aee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a98:	d021      	beq.n	8004ade <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a9a:	f7fd fcd9 	bl	8002450 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	68ba      	ldr	r2, [r7, #8]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d302      	bcc.n	8004ab0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d116      	bne.n	8004ade <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2220      	movs	r2, #32
 8004aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	f043 0220 	orr.w	r2, r3, #32
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e007      	b.n	8004aee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae8:	2b80      	cmp	r3, #128	; 0x80
 8004aea:	d1ca      	bne.n	8004a82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b084      	sub	sp, #16
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	60f8      	str	r0, [r7, #12]
 8004afe:	60b9      	str	r1, [r7, #8]
 8004b00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b02:	e02d      	b.n	8004b60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b04:	68f8      	ldr	r0, [r7, #12]
 8004b06:	f000 f88d 	bl	8004c24 <I2C_IsAcknowledgeFailed>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d001      	beq.n	8004b14 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e02d      	b.n	8004b70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b1a:	d021      	beq.n	8004b60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b1c:	f7fd fc98 	bl	8002450 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d302      	bcc.n	8004b32 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d116      	bne.n	8004b60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4c:	f043 0220 	orr.w	r2, r3, #32
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e007      	b.n	8004b70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	f003 0304 	and.w	r3, r3, #4
 8004b6a:	2b04      	cmp	r3, #4
 8004b6c:	d1ca      	bne.n	8004b04 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b84:	e042      	b.n	8004c0c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	f003 0310 	and.w	r3, r3, #16
 8004b90:	2b10      	cmp	r3, #16
 8004b92:	d119      	bne.n	8004bc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f06f 0210 	mvn.w	r2, #16
 8004b9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e029      	b.n	8004c1c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bc8:	f7fd fc42 	bl	8002450 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d302      	bcc.n	8004bde <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d116      	bne.n	8004c0c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2220      	movs	r2, #32
 8004be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf8:	f043 0220 	orr.w	r2, r3, #32
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e007      	b.n	8004c1c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c16:	2b40      	cmp	r3, #64	; 0x40
 8004c18:	d1b5      	bne.n	8004b86 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c3a:	d11b      	bne.n	8004c74 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c44:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c60:	f043 0204 	orr.w	r2, r3, #4
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e000      	b.n	8004c76 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c82:	b480      	push	{r7}
 8004c84:	b083      	sub	sp, #12
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
 8004c8a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	2b20      	cmp	r3, #32
 8004c96:	d129      	bne.n	8004cec <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2224      	movs	r2, #36	; 0x24
 8004c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f022 0201 	bic.w	r2, r2, #1
 8004cae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f022 0210 	bic.w	r2, r2, #16
 8004cbe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	683a      	ldr	r2, [r7, #0]
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f042 0201 	orr.w	r2, r2, #1
 8004cde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	e000      	b.n	8004cee <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004cec:	2302      	movs	r3, #2
  }
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	370c      	adds	r7, #12
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr

08004cfa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004cfa:	b480      	push	{r7}
 8004cfc:	b085      	sub	sp, #20
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
 8004d02:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004d04:	2300      	movs	r3, #0
 8004d06:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b20      	cmp	r3, #32
 8004d12:	d12a      	bne.n	8004d6a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2224      	movs	r2, #36	; 0x24
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 0201 	bic.w	r2, r2, #1
 8004d2a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d32:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004d34:	89fb      	ldrh	r3, [r7, #14]
 8004d36:	f023 030f 	bic.w	r3, r3, #15
 8004d3a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	89fb      	ldrh	r3, [r7, #14]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	89fa      	ldrh	r2, [r7, #14]
 8004d4c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f042 0201 	orr.w	r2, r2, #1
 8004d5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2220      	movs	r2, #32
 8004d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004d66:	2300      	movs	r3, #0
 8004d68:	e000      	b.n	8004d6c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004d6a:	2302      	movs	r3, #2
  }
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3714      	adds	r7, #20
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d101      	bne.n	8004d8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e0cc      	b.n	8004f26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d8c:	4b68      	ldr	r3, [pc, #416]	; (8004f30 <HAL_RCC_ClockConfig+0x1b8>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 030f 	and.w	r3, r3, #15
 8004d94:	683a      	ldr	r2, [r7, #0]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d90c      	bls.n	8004db4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d9a:	4b65      	ldr	r3, [pc, #404]	; (8004f30 <HAL_RCC_ClockConfig+0x1b8>)
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	b2d2      	uxtb	r2, r2
 8004da0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004da2:	4b63      	ldr	r3, [pc, #396]	; (8004f30 <HAL_RCC_ClockConfig+0x1b8>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 030f 	and.w	r3, r3, #15
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d001      	beq.n	8004db4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e0b8      	b.n	8004f26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0302 	and.w	r3, r3, #2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d020      	beq.n	8004e02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0304 	and.w	r3, r3, #4
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d005      	beq.n	8004dd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004dcc:	4b59      	ldr	r3, [pc, #356]	; (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	4a58      	ldr	r2, [pc, #352]	; (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004dd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0308 	and.w	r3, r3, #8
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d005      	beq.n	8004df0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004de4:	4b53      	ldr	r3, [pc, #332]	; (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	4a52      	ldr	r2, [pc, #328]	; (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004dea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004dee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004df0:	4b50      	ldr	r3, [pc, #320]	; (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	494d      	ldr	r1, [pc, #308]	; (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d044      	beq.n	8004e98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d107      	bne.n	8004e26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e16:	4b47      	ldr	r3, [pc, #284]	; (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d119      	bne.n	8004e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e07f      	b.n	8004f26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d003      	beq.n	8004e36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e32:	2b03      	cmp	r3, #3
 8004e34:	d107      	bne.n	8004e46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e36:	4b3f      	ldr	r3, [pc, #252]	; (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d109      	bne.n	8004e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e06f      	b.n	8004f26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e46:	4b3b      	ldr	r3, [pc, #236]	; (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e067      	b.n	8004f26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e56:	4b37      	ldr	r3, [pc, #220]	; (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f023 0203 	bic.w	r2, r3, #3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	4934      	ldr	r1, [pc, #208]	; (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e68:	f7fd faf2 	bl	8002450 <HAL_GetTick>
 8004e6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e6e:	e00a      	b.n	8004e86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e70:	f7fd faee 	bl	8002450 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d901      	bls.n	8004e86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e04f      	b.n	8004f26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e86:	4b2b      	ldr	r3, [pc, #172]	; (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f003 020c 	and.w	r2, r3, #12
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d1eb      	bne.n	8004e70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e98:	4b25      	ldr	r3, [pc, #148]	; (8004f30 <HAL_RCC_ClockConfig+0x1b8>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 030f 	and.w	r3, r3, #15
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d20c      	bcs.n	8004ec0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ea6:	4b22      	ldr	r3, [pc, #136]	; (8004f30 <HAL_RCC_ClockConfig+0x1b8>)
 8004ea8:	683a      	ldr	r2, [r7, #0]
 8004eaa:	b2d2      	uxtb	r2, r2
 8004eac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eae:	4b20      	ldr	r3, [pc, #128]	; (8004f30 <HAL_RCC_ClockConfig+0x1b8>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 030f 	and.w	r3, r3, #15
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d001      	beq.n	8004ec0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e032      	b.n	8004f26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0304 	and.w	r3, r3, #4
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d008      	beq.n	8004ede <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ecc:	4b19      	ldr	r3, [pc, #100]	; (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	4916      	ldr	r1, [pc, #88]	; (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0308 	and.w	r3, r3, #8
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d009      	beq.n	8004efe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004eea:	4b12      	ldr	r3, [pc, #72]	; (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	490e      	ldr	r1, [pc, #56]	; (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004efe:	f000 f821 	bl	8004f44 <HAL_RCC_GetSysClockFreq>
 8004f02:	4601      	mov	r1, r0
 8004f04:	4b0b      	ldr	r3, [pc, #44]	; (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	091b      	lsrs	r3, r3, #4
 8004f0a:	f003 030f 	and.w	r3, r3, #15
 8004f0e:	4a0a      	ldr	r2, [pc, #40]	; (8004f38 <HAL_RCC_ClockConfig+0x1c0>)
 8004f10:	5cd3      	ldrb	r3, [r2, r3]
 8004f12:	fa21 f303 	lsr.w	r3, r1, r3
 8004f16:	4a09      	ldr	r2, [pc, #36]	; (8004f3c <HAL_RCC_ClockConfig+0x1c4>)
 8004f18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f1a:	4b09      	ldr	r3, [pc, #36]	; (8004f40 <HAL_RCC_ClockConfig+0x1c8>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7fd fa52 	bl	80023c8 <HAL_InitTick>

  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	40023c00 	.word	0x40023c00
 8004f34:	40023800 	.word	0x40023800
 8004f38:	0800ab9c 	.word	0x0800ab9c
 8004f3c:	20000000 	.word	0x20000000
 8004f40:	20000004 	.word	0x20000004

08004f44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	607b      	str	r3, [r7, #4]
 8004f4e:	2300      	movs	r3, #0
 8004f50:	60fb      	str	r3, [r7, #12]
 8004f52:	2300      	movs	r3, #0
 8004f54:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004f56:	2300      	movs	r3, #0
 8004f58:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f5a:	4b63      	ldr	r3, [pc, #396]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f003 030c 	and.w	r3, r3, #12
 8004f62:	2b04      	cmp	r3, #4
 8004f64:	d007      	beq.n	8004f76 <HAL_RCC_GetSysClockFreq+0x32>
 8004f66:	2b08      	cmp	r3, #8
 8004f68:	d008      	beq.n	8004f7c <HAL_RCC_GetSysClockFreq+0x38>
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f040 80b4 	bne.w	80050d8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f70:	4b5e      	ldr	r3, [pc, #376]	; (80050ec <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004f72:	60bb      	str	r3, [r7, #8]
       break;
 8004f74:	e0b3      	b.n	80050de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f76:	4b5e      	ldr	r3, [pc, #376]	; (80050f0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004f78:	60bb      	str	r3, [r7, #8]
      break;
 8004f7a:	e0b0      	b.n	80050de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f7c:	4b5a      	ldr	r3, [pc, #360]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f84:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f86:	4b58      	ldr	r3, [pc, #352]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d04a      	beq.n	8005028 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f92:	4b55      	ldr	r3, [pc, #340]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	099b      	lsrs	r3, r3, #6
 8004f98:	f04f 0400 	mov.w	r4, #0
 8004f9c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004fa0:	f04f 0200 	mov.w	r2, #0
 8004fa4:	ea03 0501 	and.w	r5, r3, r1
 8004fa8:	ea04 0602 	and.w	r6, r4, r2
 8004fac:	4629      	mov	r1, r5
 8004fae:	4632      	mov	r2, r6
 8004fb0:	f04f 0300 	mov.w	r3, #0
 8004fb4:	f04f 0400 	mov.w	r4, #0
 8004fb8:	0154      	lsls	r4, r2, #5
 8004fba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004fbe:	014b      	lsls	r3, r1, #5
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	4622      	mov	r2, r4
 8004fc4:	1b49      	subs	r1, r1, r5
 8004fc6:	eb62 0206 	sbc.w	r2, r2, r6
 8004fca:	f04f 0300 	mov.w	r3, #0
 8004fce:	f04f 0400 	mov.w	r4, #0
 8004fd2:	0194      	lsls	r4, r2, #6
 8004fd4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004fd8:	018b      	lsls	r3, r1, #6
 8004fda:	1a5b      	subs	r3, r3, r1
 8004fdc:	eb64 0402 	sbc.w	r4, r4, r2
 8004fe0:	f04f 0100 	mov.w	r1, #0
 8004fe4:	f04f 0200 	mov.w	r2, #0
 8004fe8:	00e2      	lsls	r2, r4, #3
 8004fea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004fee:	00d9      	lsls	r1, r3, #3
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	4614      	mov	r4, r2
 8004ff4:	195b      	adds	r3, r3, r5
 8004ff6:	eb44 0406 	adc.w	r4, r4, r6
 8004ffa:	f04f 0100 	mov.w	r1, #0
 8004ffe:	f04f 0200 	mov.w	r2, #0
 8005002:	0262      	lsls	r2, r4, #9
 8005004:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005008:	0259      	lsls	r1, r3, #9
 800500a:	460b      	mov	r3, r1
 800500c:	4614      	mov	r4, r2
 800500e:	4618      	mov	r0, r3
 8005010:	4621      	mov	r1, r4
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f04f 0400 	mov.w	r4, #0
 8005018:	461a      	mov	r2, r3
 800501a:	4623      	mov	r3, r4
 800501c:	f7fb fda6 	bl	8000b6c <__aeabi_uldivmod>
 8005020:	4603      	mov	r3, r0
 8005022:	460c      	mov	r4, r1
 8005024:	60fb      	str	r3, [r7, #12]
 8005026:	e049      	b.n	80050bc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005028:	4b2f      	ldr	r3, [pc, #188]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	099b      	lsrs	r3, r3, #6
 800502e:	f04f 0400 	mov.w	r4, #0
 8005032:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005036:	f04f 0200 	mov.w	r2, #0
 800503a:	ea03 0501 	and.w	r5, r3, r1
 800503e:	ea04 0602 	and.w	r6, r4, r2
 8005042:	4629      	mov	r1, r5
 8005044:	4632      	mov	r2, r6
 8005046:	f04f 0300 	mov.w	r3, #0
 800504a:	f04f 0400 	mov.w	r4, #0
 800504e:	0154      	lsls	r4, r2, #5
 8005050:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005054:	014b      	lsls	r3, r1, #5
 8005056:	4619      	mov	r1, r3
 8005058:	4622      	mov	r2, r4
 800505a:	1b49      	subs	r1, r1, r5
 800505c:	eb62 0206 	sbc.w	r2, r2, r6
 8005060:	f04f 0300 	mov.w	r3, #0
 8005064:	f04f 0400 	mov.w	r4, #0
 8005068:	0194      	lsls	r4, r2, #6
 800506a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800506e:	018b      	lsls	r3, r1, #6
 8005070:	1a5b      	subs	r3, r3, r1
 8005072:	eb64 0402 	sbc.w	r4, r4, r2
 8005076:	f04f 0100 	mov.w	r1, #0
 800507a:	f04f 0200 	mov.w	r2, #0
 800507e:	00e2      	lsls	r2, r4, #3
 8005080:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005084:	00d9      	lsls	r1, r3, #3
 8005086:	460b      	mov	r3, r1
 8005088:	4614      	mov	r4, r2
 800508a:	195b      	adds	r3, r3, r5
 800508c:	eb44 0406 	adc.w	r4, r4, r6
 8005090:	f04f 0100 	mov.w	r1, #0
 8005094:	f04f 0200 	mov.w	r2, #0
 8005098:	02a2      	lsls	r2, r4, #10
 800509a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800509e:	0299      	lsls	r1, r3, #10
 80050a0:	460b      	mov	r3, r1
 80050a2:	4614      	mov	r4, r2
 80050a4:	4618      	mov	r0, r3
 80050a6:	4621      	mov	r1, r4
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f04f 0400 	mov.w	r4, #0
 80050ae:	461a      	mov	r2, r3
 80050b0:	4623      	mov	r3, r4
 80050b2:	f7fb fd5b 	bl	8000b6c <__aeabi_uldivmod>
 80050b6:	4603      	mov	r3, r0
 80050b8:	460c      	mov	r4, r1
 80050ba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80050bc:	4b0a      	ldr	r3, [pc, #40]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	0c1b      	lsrs	r3, r3, #16
 80050c2:	f003 0303 	and.w	r3, r3, #3
 80050c6:	3301      	adds	r3, #1
 80050c8:	005b      	lsls	r3, r3, #1
 80050ca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d4:	60bb      	str	r3, [r7, #8]
      break;
 80050d6:	e002      	b.n	80050de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050d8:	4b04      	ldr	r3, [pc, #16]	; (80050ec <HAL_RCC_GetSysClockFreq+0x1a8>)
 80050da:	60bb      	str	r3, [r7, #8]
      break;
 80050dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050de:	68bb      	ldr	r3, [r7, #8]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3714      	adds	r7, #20
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050e8:	40023800 	.word	0x40023800
 80050ec:	00f42400 	.word	0x00f42400
 80050f0:	007a1200 	.word	0x007a1200

080050f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050f4:	b480      	push	{r7}
 80050f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050f8:	4b03      	ldr	r3, [pc, #12]	; (8005108 <HAL_RCC_GetHCLKFreq+0x14>)
 80050fa:	681b      	ldr	r3, [r3, #0]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	20000000 	.word	0x20000000

0800510c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005110:	f7ff fff0 	bl	80050f4 <HAL_RCC_GetHCLKFreq>
 8005114:	4601      	mov	r1, r0
 8005116:	4b05      	ldr	r3, [pc, #20]	; (800512c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	0a9b      	lsrs	r3, r3, #10
 800511c:	f003 0307 	and.w	r3, r3, #7
 8005120:	4a03      	ldr	r2, [pc, #12]	; (8005130 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005122:	5cd3      	ldrb	r3, [r2, r3]
 8005124:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005128:	4618      	mov	r0, r3
 800512a:	bd80      	pop	{r7, pc}
 800512c:	40023800 	.word	0x40023800
 8005130:	0800abac 	.word	0x0800abac

08005134 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005138:	f7ff ffdc 	bl	80050f4 <HAL_RCC_GetHCLKFreq>
 800513c:	4601      	mov	r1, r0
 800513e:	4b05      	ldr	r3, [pc, #20]	; (8005154 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	0b5b      	lsrs	r3, r3, #13
 8005144:	f003 0307 	and.w	r3, r3, #7
 8005148:	4a03      	ldr	r2, [pc, #12]	; (8005158 <HAL_RCC_GetPCLK2Freq+0x24>)
 800514a:	5cd3      	ldrb	r3, [r2, r3]
 800514c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005150:	4618      	mov	r0, r3
 8005152:	bd80      	pop	{r7, pc}
 8005154:	40023800 	.word	0x40023800
 8005158:	0800abac 	.word	0x0800abac

0800515c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005162:	f7fd f975 	bl	8002450 <HAL_GetTick>
 8005166:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005168:	4b5d      	ldr	r3, [pc, #372]	; (80052e0 <HAL_RCC_DeInit+0x184>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a5c      	ldr	r2, [pc, #368]	; (80052e0 <HAL_RCC_DeInit+0x184>)
 800516e:	f043 0301 	orr.w	r3, r3, #1
 8005172:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8005174:	e008      	b.n	8005188 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005176:	f7fd f96b 	bl	8002450 <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	2b02      	cmp	r3, #2
 8005182:	d901      	bls.n	8005188 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e0a7      	b.n	80052d8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8005188:	4b55      	ldr	r3, [pc, #340]	; (80052e0 <HAL_RCC_DeInit+0x184>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d0f0      	beq.n	8005176 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8005194:	4b52      	ldr	r3, [pc, #328]	; (80052e0 <HAL_RCC_DeInit+0x184>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a51      	ldr	r2, [pc, #324]	; (80052e0 <HAL_RCC_DeInit+0x184>)
 800519a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800519e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80051a0:	f7fd f956 	bl	8002450 <HAL_GetTick>
 80051a4:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80051a6:	4b4e      	ldr	r3, [pc, #312]	; (80052e0 <HAL_RCC_DeInit+0x184>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80051ac:	e00a      	b.n	80051c4 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051ae:	f7fd f94f 	bl	8002450 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80051bc:	4293      	cmp	r3, r2
 80051be:	d901      	bls.n	80051c4 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e089      	b.n	80052d8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80051c4:	4b46      	ldr	r3, [pc, #280]	; (80052e0 <HAL_RCC_DeInit+0x184>)
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f003 030c 	and.w	r3, r3, #12
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1ee      	bne.n	80051ae <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80051d0:	f7fd f93e 	bl	8002450 <HAL_GetTick>
 80051d4:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 80051d6:	4b42      	ldr	r3, [pc, #264]	; (80052e0 <HAL_RCC_DeInit+0x184>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a41      	ldr	r2, [pc, #260]	; (80052e0 <HAL_RCC_DeInit+0x184>)
 80051dc:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 80051e0:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80051e2:	e008      	b.n	80051f6 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051e4:	f7fd f934 	bl	8002450 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b64      	cmp	r3, #100	; 0x64
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e070      	b.n	80052d8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80051f6:	4b3a      	ldr	r3, [pc, #232]	; (80052e0 <HAL_RCC_DeInit+0x184>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1f0      	bne.n	80051e4 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005202:	f7fd f925 	bl	8002450 <HAL_GetTick>
 8005206:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005208:	4b35      	ldr	r3, [pc, #212]	; (80052e0 <HAL_RCC_DeInit+0x184>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a34      	ldr	r2, [pc, #208]	; (80052e0 <HAL_RCC_DeInit+0x184>)
 800520e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005212:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8005214:	e008      	b.n	8005228 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005216:	f7fd f91b 	bl	8002450 <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	2b02      	cmp	r3, #2
 8005222:	d901      	bls.n	8005228 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e057      	b.n	80052d8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8005228:	4b2d      	ldr	r3, [pc, #180]	; (80052e0 <HAL_RCC_DeInit+0x184>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1f0      	bne.n	8005216 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005234:	f7fd f90c 	bl	8002450 <HAL_GetTick>
 8005238:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 800523a:	4b29      	ldr	r3, [pc, #164]	; (80052e0 <HAL_RCC_DeInit+0x184>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a28      	ldr	r2, [pc, #160]	; (80052e0 <HAL_RCC_DeInit+0x184>)
 8005240:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005244:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8005246:	e008      	b.n	800525a <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005248:	f7fd f902 	bl	8002450 <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	2b02      	cmp	r3, #2
 8005254:	d901      	bls.n	800525a <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e03e      	b.n	80052d8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800525a:	4b21      	ldr	r3, [pc, #132]	; (80052e0 <HAL_RCC_DeInit+0x184>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1f0      	bne.n	8005248 <HAL_RCC_DeInit+0xec>
#endif /* RCC_PLLSAI_SUPPORT */

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
 8005266:	4b1e      	ldr	r3, [pc, #120]	; (80052e0 <HAL_RCC_DeInit+0x184>)
 8005268:	4a1e      	ldr	r2, [pc, #120]	; (80052e4 <HAL_RCC_DeInit+0x188>)
 800526a:	605a      	str	r2, [r3, #4]
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */

  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 800526c:	4b1c      	ldr	r3, [pc, #112]	; (80052e0 <HAL_RCC_DeInit+0x184>)
 800526e:	4a1d      	ldr	r2, [pc, #116]	; (80052e4 <HAL_RCC_DeInit+0x188>)
 8005270:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8005274:	4b1a      	ldr	r3, [pc, #104]	; (80052e0 <HAL_RCC_DeInit+0x184>)
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	4a19      	ldr	r2, [pc, #100]	; (80052e0 <HAL_RCC_DeInit+0x184>)
 800527a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800527e:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8005280:	4b17      	ldr	r3, [pc, #92]	; (80052e0 <HAL_RCC_DeInit+0x184>)
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	4a16      	ldr	r2, [pc, #88]	; (80052e0 <HAL_RCC_DeInit+0x184>)
 8005286:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800528a:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 800528c:	4b14      	ldr	r3, [pc, #80]	; (80052e0 <HAL_RCC_DeInit+0x184>)
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	4a13      	ldr	r2, [pc, #76]	; (80052e0 <HAL_RCC_DeInit+0x184>)
 8005292:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8005296:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8005298:	4b11      	ldr	r3, [pc, #68]	; (80052e0 <HAL_RCC_DeInit+0x184>)
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	4a10      	ldr	r2, [pc, #64]	; (80052e0 <HAL_RCC_DeInit+0x184>)
 800529e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80052a2:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80052a4:	4b0e      	ldr	r3, [pc, #56]	; (80052e0 <HAL_RCC_DeInit+0x184>)
 80052a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052a8:	4a0d      	ldr	r2, [pc, #52]	; (80052e0 <HAL_RCC_DeInit+0x184>)
 80052aa:	f023 0301 	bic.w	r3, r3, #1
 80052ae:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80052b0:	4b0b      	ldr	r3, [pc, #44]	; (80052e0 <HAL_RCC_DeInit+0x184>)
 80052b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052b4:	4a0a      	ldr	r2, [pc, #40]	; (80052e0 <HAL_RCC_DeInit+0x184>)
 80052b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052ba:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80052bc:	4b0a      	ldr	r3, [pc, #40]	; (80052e8 <HAL_RCC_DeInit+0x18c>)
 80052be:	4a0b      	ldr	r2, [pc, #44]	; (80052ec <HAL_RCC_DeInit+0x190>)
 80052c0:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 80052c2:	4b0b      	ldr	r3, [pc, #44]	; (80052f0 <HAL_RCC_DeInit+0x194>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7fd f87e 	bl	80023c8 <HAL_InitTick>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e000      	b.n	80052d8 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 80052d6:	2300      	movs	r3, #0
  }
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3708      	adds	r7, #8
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	40023800 	.word	0x40023800
 80052e4:	24003010 	.word	0x24003010
 80052e8:	20000000 	.word	0x20000000
 80052ec:	00f42400 	.word	0x00f42400
 80052f0:	20000004 	.word	0x20000004

080052f4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052fc:	2300      	movs	r3, #0
 80052fe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	2b00      	cmp	r3, #0
 800530a:	d075      	beq.n	80053f8 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800530c:	4ba2      	ldr	r3, [pc, #648]	; (8005598 <HAL_RCC_OscConfig+0x2a4>)
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f003 030c 	and.w	r3, r3, #12
 8005314:	2b04      	cmp	r3, #4
 8005316:	d00c      	beq.n	8005332 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005318:	4b9f      	ldr	r3, [pc, #636]	; (8005598 <HAL_RCC_OscConfig+0x2a4>)
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005320:	2b08      	cmp	r3, #8
 8005322:	d112      	bne.n	800534a <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005324:	4b9c      	ldr	r3, [pc, #624]	; (8005598 <HAL_RCC_OscConfig+0x2a4>)
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800532c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005330:	d10b      	bne.n	800534a <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005332:	4b99      	ldr	r3, [pc, #612]	; (8005598 <HAL_RCC_OscConfig+0x2a4>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d05b      	beq.n	80053f6 <HAL_RCC_OscConfig+0x102>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d157      	bne.n	80053f6 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e20b      	b.n	8005762 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005352:	d106      	bne.n	8005362 <HAL_RCC_OscConfig+0x6e>
 8005354:	4b90      	ldr	r3, [pc, #576]	; (8005598 <HAL_RCC_OscConfig+0x2a4>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a8f      	ldr	r2, [pc, #572]	; (8005598 <HAL_RCC_OscConfig+0x2a4>)
 800535a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800535e:	6013      	str	r3, [r2, #0]
 8005360:	e01d      	b.n	800539e <HAL_RCC_OscConfig+0xaa>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800536a:	d10c      	bne.n	8005386 <HAL_RCC_OscConfig+0x92>
 800536c:	4b8a      	ldr	r3, [pc, #552]	; (8005598 <HAL_RCC_OscConfig+0x2a4>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a89      	ldr	r2, [pc, #548]	; (8005598 <HAL_RCC_OscConfig+0x2a4>)
 8005372:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005376:	6013      	str	r3, [r2, #0]
 8005378:	4b87      	ldr	r3, [pc, #540]	; (8005598 <HAL_RCC_OscConfig+0x2a4>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a86      	ldr	r2, [pc, #536]	; (8005598 <HAL_RCC_OscConfig+0x2a4>)
 800537e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005382:	6013      	str	r3, [r2, #0]
 8005384:	e00b      	b.n	800539e <HAL_RCC_OscConfig+0xaa>
 8005386:	4b84      	ldr	r3, [pc, #528]	; (8005598 <HAL_RCC_OscConfig+0x2a4>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a83      	ldr	r2, [pc, #524]	; (8005598 <HAL_RCC_OscConfig+0x2a4>)
 800538c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005390:	6013      	str	r3, [r2, #0]
 8005392:	4b81      	ldr	r3, [pc, #516]	; (8005598 <HAL_RCC_OscConfig+0x2a4>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a80      	ldr	r2, [pc, #512]	; (8005598 <HAL_RCC_OscConfig+0x2a4>)
 8005398:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800539c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d013      	beq.n	80053ce <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a6:	f7fd f853 	bl	8002450 <HAL_GetTick>
 80053aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ac:	e008      	b.n	80053c0 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053ae:	f7fd f84f 	bl	8002450 <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	2b64      	cmp	r3, #100	; 0x64
 80053ba:	d901      	bls.n	80053c0 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e1d0      	b.n	8005762 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053c0:	4b75      	ldr	r3, [pc, #468]	; (8005598 <HAL_RCC_OscConfig+0x2a4>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d0f0      	beq.n	80053ae <HAL_RCC_OscConfig+0xba>
 80053cc:	e014      	b.n	80053f8 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ce:	f7fd f83f 	bl	8002450 <HAL_GetTick>
 80053d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053d4:	e008      	b.n	80053e8 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053d6:	f7fd f83b 	bl	8002450 <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	2b64      	cmp	r3, #100	; 0x64
 80053e2:	d901      	bls.n	80053e8 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e1bc      	b.n	8005762 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053e8:	4b6b      	ldr	r3, [pc, #428]	; (8005598 <HAL_RCC_OscConfig+0x2a4>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1f0      	bne.n	80053d6 <HAL_RCC_OscConfig+0xe2>
 80053f4:	e000      	b.n	80053f8 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053f6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0302 	and.w	r3, r3, #2
 8005400:	2b00      	cmp	r3, #0
 8005402:	d063      	beq.n	80054cc <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005404:	4b64      	ldr	r3, [pc, #400]	; (8005598 <HAL_RCC_OscConfig+0x2a4>)
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f003 030c 	and.w	r3, r3, #12
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00b      	beq.n	8005428 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005410:	4b61      	ldr	r3, [pc, #388]	; (8005598 <HAL_RCC_OscConfig+0x2a4>)
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005418:	2b08      	cmp	r3, #8
 800541a:	d11c      	bne.n	8005456 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800541c:	4b5e      	ldr	r3, [pc, #376]	; (8005598 <HAL_RCC_OscConfig+0x2a4>)
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d116      	bne.n	8005456 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005428:	4b5b      	ldr	r3, [pc, #364]	; (8005598 <HAL_RCC_OscConfig+0x2a4>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b00      	cmp	r3, #0
 8005432:	d005      	beq.n	8005440 <HAL_RCC_OscConfig+0x14c>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d001      	beq.n	8005440 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e190      	b.n	8005762 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005440:	4b55      	ldr	r3, [pc, #340]	; (8005598 <HAL_RCC_OscConfig+0x2a4>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	00db      	lsls	r3, r3, #3
 800544e:	4952      	ldr	r1, [pc, #328]	; (8005598 <HAL_RCC_OscConfig+0x2a4>)
 8005450:	4313      	orrs	r3, r2
 8005452:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005454:	e03a      	b.n	80054cc <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d020      	beq.n	80054a0 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800545e:	4b4f      	ldr	r3, [pc, #316]	; (800559c <HAL_RCC_OscConfig+0x2a8>)
 8005460:	2201      	movs	r2, #1
 8005462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005464:	f7fc fff4 	bl	8002450 <HAL_GetTick>
 8005468:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800546a:	e008      	b.n	800547e <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800546c:	f7fc fff0 	bl	8002450 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b02      	cmp	r3, #2
 8005478:	d901      	bls.n	800547e <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e171      	b.n	8005762 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800547e:	4b46      	ldr	r3, [pc, #280]	; (8005598 <HAL_RCC_OscConfig+0x2a4>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d0f0      	beq.n	800546c <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800548a:	4b43      	ldr	r3, [pc, #268]	; (8005598 <HAL_RCC_OscConfig+0x2a4>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	00db      	lsls	r3, r3, #3
 8005498:	493f      	ldr	r1, [pc, #252]	; (8005598 <HAL_RCC_OscConfig+0x2a4>)
 800549a:	4313      	orrs	r3, r2
 800549c:	600b      	str	r3, [r1, #0]
 800549e:	e015      	b.n	80054cc <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054a0:	4b3e      	ldr	r3, [pc, #248]	; (800559c <HAL_RCC_OscConfig+0x2a8>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a6:	f7fc ffd3 	bl	8002450 <HAL_GetTick>
 80054aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054ac:	e008      	b.n	80054c0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054ae:	f7fc ffcf 	bl	8002450 <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d901      	bls.n	80054c0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e150      	b.n	8005762 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054c0:	4b35      	ldr	r3, [pc, #212]	; (8005598 <HAL_RCC_OscConfig+0x2a4>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1f0      	bne.n	80054ae <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0308 	and.w	r3, r3, #8
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d030      	beq.n	800553a <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	695b      	ldr	r3, [r3, #20]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d016      	beq.n	800550e <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054e0:	4b2f      	ldr	r3, [pc, #188]	; (80055a0 <HAL_RCC_OscConfig+0x2ac>)
 80054e2:	2201      	movs	r2, #1
 80054e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054e6:	f7fc ffb3 	bl	8002450 <HAL_GetTick>
 80054ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054ec:	e008      	b.n	8005500 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054ee:	f7fc ffaf 	bl	8002450 <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d901      	bls.n	8005500 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e130      	b.n	8005762 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005500:	4b25      	ldr	r3, [pc, #148]	; (8005598 <HAL_RCC_OscConfig+0x2a4>)
 8005502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005504:	f003 0302 	and.w	r3, r3, #2
 8005508:	2b00      	cmp	r3, #0
 800550a:	d0f0      	beq.n	80054ee <HAL_RCC_OscConfig+0x1fa>
 800550c:	e015      	b.n	800553a <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800550e:	4b24      	ldr	r3, [pc, #144]	; (80055a0 <HAL_RCC_OscConfig+0x2ac>)
 8005510:	2200      	movs	r2, #0
 8005512:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005514:	f7fc ff9c 	bl	8002450 <HAL_GetTick>
 8005518:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800551a:	e008      	b.n	800552e <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800551c:	f7fc ff98 	bl	8002450 <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	2b02      	cmp	r3, #2
 8005528:	d901      	bls.n	800552e <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e119      	b.n	8005762 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800552e:	4b1a      	ldr	r3, [pc, #104]	; (8005598 <HAL_RCC_OscConfig+0x2a4>)
 8005530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1f0      	bne.n	800551c <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0304 	and.w	r3, r3, #4
 8005542:	2b00      	cmp	r3, #0
 8005544:	f000 809f 	beq.w	8005686 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005548:	2300      	movs	r3, #0
 800554a:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800554c:	4b12      	ldr	r3, [pc, #72]	; (8005598 <HAL_RCC_OscConfig+0x2a4>)
 800554e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10f      	bne.n	8005578 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005558:	2300      	movs	r3, #0
 800555a:	60fb      	str	r3, [r7, #12]
 800555c:	4b0e      	ldr	r3, [pc, #56]	; (8005598 <HAL_RCC_OscConfig+0x2a4>)
 800555e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005560:	4a0d      	ldr	r2, [pc, #52]	; (8005598 <HAL_RCC_OscConfig+0x2a4>)
 8005562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005566:	6413      	str	r3, [r2, #64]	; 0x40
 8005568:	4b0b      	ldr	r3, [pc, #44]	; (8005598 <HAL_RCC_OscConfig+0x2a4>)
 800556a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005570:	60fb      	str	r3, [r7, #12]
 8005572:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005574:	2301      	movs	r3, #1
 8005576:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005578:	4b0a      	ldr	r3, [pc, #40]	; (80055a4 <HAL_RCC_OscConfig+0x2b0>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005580:	2b00      	cmp	r3, #0
 8005582:	d120      	bne.n	80055c6 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005584:	4b07      	ldr	r3, [pc, #28]	; (80055a4 <HAL_RCC_OscConfig+0x2b0>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a06      	ldr	r2, [pc, #24]	; (80055a4 <HAL_RCC_OscConfig+0x2b0>)
 800558a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800558e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005590:	f7fc ff5e 	bl	8002450 <HAL_GetTick>
 8005594:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005596:	e010      	b.n	80055ba <HAL_RCC_OscConfig+0x2c6>
 8005598:	40023800 	.word	0x40023800
 800559c:	42470000 	.word	0x42470000
 80055a0:	42470e80 	.word	0x42470e80
 80055a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055a8:	f7fc ff52 	bl	8002450 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d901      	bls.n	80055ba <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e0d3      	b.n	8005762 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055ba:	4b6c      	ldr	r3, [pc, #432]	; (800576c <HAL_RCC_OscConfig+0x478>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d0f0      	beq.n	80055a8 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d106      	bne.n	80055dc <HAL_RCC_OscConfig+0x2e8>
 80055ce:	4b68      	ldr	r3, [pc, #416]	; (8005770 <HAL_RCC_OscConfig+0x47c>)
 80055d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d2:	4a67      	ldr	r2, [pc, #412]	; (8005770 <HAL_RCC_OscConfig+0x47c>)
 80055d4:	f043 0301 	orr.w	r3, r3, #1
 80055d8:	6713      	str	r3, [r2, #112]	; 0x70
 80055da:	e01c      	b.n	8005616 <HAL_RCC_OscConfig+0x322>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	2b05      	cmp	r3, #5
 80055e2:	d10c      	bne.n	80055fe <HAL_RCC_OscConfig+0x30a>
 80055e4:	4b62      	ldr	r3, [pc, #392]	; (8005770 <HAL_RCC_OscConfig+0x47c>)
 80055e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e8:	4a61      	ldr	r2, [pc, #388]	; (8005770 <HAL_RCC_OscConfig+0x47c>)
 80055ea:	f043 0304 	orr.w	r3, r3, #4
 80055ee:	6713      	str	r3, [r2, #112]	; 0x70
 80055f0:	4b5f      	ldr	r3, [pc, #380]	; (8005770 <HAL_RCC_OscConfig+0x47c>)
 80055f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055f4:	4a5e      	ldr	r2, [pc, #376]	; (8005770 <HAL_RCC_OscConfig+0x47c>)
 80055f6:	f043 0301 	orr.w	r3, r3, #1
 80055fa:	6713      	str	r3, [r2, #112]	; 0x70
 80055fc:	e00b      	b.n	8005616 <HAL_RCC_OscConfig+0x322>
 80055fe:	4b5c      	ldr	r3, [pc, #368]	; (8005770 <HAL_RCC_OscConfig+0x47c>)
 8005600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005602:	4a5b      	ldr	r2, [pc, #364]	; (8005770 <HAL_RCC_OscConfig+0x47c>)
 8005604:	f023 0301 	bic.w	r3, r3, #1
 8005608:	6713      	str	r3, [r2, #112]	; 0x70
 800560a:	4b59      	ldr	r3, [pc, #356]	; (8005770 <HAL_RCC_OscConfig+0x47c>)
 800560c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800560e:	4a58      	ldr	r2, [pc, #352]	; (8005770 <HAL_RCC_OscConfig+0x47c>)
 8005610:	f023 0304 	bic.w	r3, r3, #4
 8005614:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d015      	beq.n	800564a <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800561e:	f7fc ff17 	bl	8002450 <HAL_GetTick>
 8005622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005624:	e00a      	b.n	800563c <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005626:	f7fc ff13 	bl	8002450 <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	f241 3288 	movw	r2, #5000	; 0x1388
 8005634:	4293      	cmp	r3, r2
 8005636:	d901      	bls.n	800563c <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e092      	b.n	8005762 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800563c:	4b4c      	ldr	r3, [pc, #304]	; (8005770 <HAL_RCC_OscConfig+0x47c>)
 800563e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	2b00      	cmp	r3, #0
 8005646:	d0ee      	beq.n	8005626 <HAL_RCC_OscConfig+0x332>
 8005648:	e014      	b.n	8005674 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800564a:	f7fc ff01 	bl	8002450 <HAL_GetTick>
 800564e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005650:	e00a      	b.n	8005668 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005652:	f7fc fefd 	bl	8002450 <HAL_GetTick>
 8005656:	4602      	mov	r2, r0
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005660:	4293      	cmp	r3, r2
 8005662:	d901      	bls.n	8005668 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e07c      	b.n	8005762 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005668:	4b41      	ldr	r3, [pc, #260]	; (8005770 <HAL_RCC_OscConfig+0x47c>)
 800566a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800566c:	f003 0302 	and.w	r3, r3, #2
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1ee      	bne.n	8005652 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005674:	7dfb      	ldrb	r3, [r7, #23]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d105      	bne.n	8005686 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800567a:	4b3d      	ldr	r3, [pc, #244]	; (8005770 <HAL_RCC_OscConfig+0x47c>)
 800567c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567e:	4a3c      	ldr	r2, [pc, #240]	; (8005770 <HAL_RCC_OscConfig+0x47c>)
 8005680:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005684:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d068      	beq.n	8005760 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800568e:	4b38      	ldr	r3, [pc, #224]	; (8005770 <HAL_RCC_OscConfig+0x47c>)
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f003 030c 	and.w	r3, r3, #12
 8005696:	2b08      	cmp	r3, #8
 8005698:	d060      	beq.n	800575c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d145      	bne.n	800572e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056a2:	4b34      	ldr	r3, [pc, #208]	; (8005774 <HAL_RCC_OscConfig+0x480>)
 80056a4:	2200      	movs	r2, #0
 80056a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a8:	f7fc fed2 	bl	8002450 <HAL_GetTick>
 80056ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056ae:	e008      	b.n	80056c2 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056b0:	f7fc fece 	bl	8002450 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d901      	bls.n	80056c2 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e04f      	b.n	8005762 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056c2:	4b2b      	ldr	r3, [pc, #172]	; (8005770 <HAL_RCC_OscConfig+0x47c>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1f0      	bne.n	80056b0 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	69da      	ldr	r2, [r3, #28]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	431a      	orrs	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056dc:	019b      	lsls	r3, r3, #6
 80056de:	431a      	orrs	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e4:	085b      	lsrs	r3, r3, #1
 80056e6:	3b01      	subs	r3, #1
 80056e8:	041b      	lsls	r3, r3, #16
 80056ea:	431a      	orrs	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f0:	061b      	lsls	r3, r3, #24
 80056f2:	431a      	orrs	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f8:	071b      	lsls	r3, r3, #28
 80056fa:	491d      	ldr	r1, [pc, #116]	; (8005770 <HAL_RCC_OscConfig+0x47c>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005700:	4b1c      	ldr	r3, [pc, #112]	; (8005774 <HAL_RCC_OscConfig+0x480>)
 8005702:	2201      	movs	r2, #1
 8005704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005706:	f7fc fea3 	bl	8002450 <HAL_GetTick>
 800570a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800570c:	e008      	b.n	8005720 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800570e:	f7fc fe9f 	bl	8002450 <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	2b02      	cmp	r3, #2
 800571a:	d901      	bls.n	8005720 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e020      	b.n	8005762 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005720:	4b13      	ldr	r3, [pc, #76]	; (8005770 <HAL_RCC_OscConfig+0x47c>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d0f0      	beq.n	800570e <HAL_RCC_OscConfig+0x41a>
 800572c:	e018      	b.n	8005760 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800572e:	4b11      	ldr	r3, [pc, #68]	; (8005774 <HAL_RCC_OscConfig+0x480>)
 8005730:	2200      	movs	r2, #0
 8005732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005734:	f7fc fe8c 	bl	8002450 <HAL_GetTick>
 8005738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800573a:	e008      	b.n	800574e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800573c:	f7fc fe88 	bl	8002450 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	2b02      	cmp	r3, #2
 8005748:	d901      	bls.n	800574e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e009      	b.n	8005762 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800574e:	4b08      	ldr	r3, [pc, #32]	; (8005770 <HAL_RCC_OscConfig+0x47c>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1f0      	bne.n	800573c <HAL_RCC_OscConfig+0x448>
 800575a:	e001      	b.n	8005760 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e000      	b.n	8005762 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3718      	adds	r7, #24
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	40007000 	.word	0x40007000
 8005770:	40023800 	.word	0x40023800
 8005774:	42470060 	.word	0x42470060

08005778 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e03f      	b.n	800580a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d106      	bne.n	80057a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7fc fc60 	bl	8002064 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2224      	movs	r2, #36	; 0x24
 80057a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68da      	ldr	r2, [r3, #12]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 fc77 	bl	80060b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	691a      	ldr	r2, [r3, #16]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	695a      	ldr	r2, [r3, #20]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68da      	ldr	r2, [r3, #12]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2220      	movs	r2, #32
 80057fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2220      	movs	r2, #32
 8005804:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3708      	adds	r7, #8
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b088      	sub	sp, #32
 8005816:	af02      	add	r7, sp, #8
 8005818:	60f8      	str	r0, [r7, #12]
 800581a:	60b9      	str	r1, [r7, #8]
 800581c:	603b      	str	r3, [r7, #0]
 800581e:	4613      	mov	r3, r2
 8005820:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005822:	2300      	movs	r3, #0
 8005824:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b20      	cmp	r3, #32
 8005830:	f040 8083 	bne.w	800593a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d002      	beq.n	8005840 <HAL_UART_Transmit+0x2e>
 800583a:	88fb      	ldrh	r3, [r7, #6]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d101      	bne.n	8005844 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e07b      	b.n	800593c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800584a:	2b01      	cmp	r3, #1
 800584c:	d101      	bne.n	8005852 <HAL_UART_Transmit+0x40>
 800584e:	2302      	movs	r3, #2
 8005850:	e074      	b.n	800593c <HAL_UART_Transmit+0x12a>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2221      	movs	r2, #33	; 0x21
 8005864:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005868:	f7fc fdf2 	bl	8002450 <HAL_GetTick>
 800586c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	88fa      	ldrh	r2, [r7, #6]
 8005872:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	88fa      	ldrh	r2, [r7, #6]
 8005878:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005882:	e042      	b.n	800590a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005888:	b29b      	uxth	r3, r3
 800588a:	3b01      	subs	r3, #1
 800588c:	b29a      	uxth	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800589a:	d122      	bne.n	80058e2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	2200      	movs	r2, #0
 80058a4:	2180      	movs	r1, #128	; 0x80
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f000 fa80 	bl	8005dac <UART_WaitOnFlagUntilTimeout>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e042      	b.n	800593c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	881b      	ldrh	r3, [r3, #0]
 80058be:	461a      	mov	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058c8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d103      	bne.n	80058da <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	3302      	adds	r3, #2
 80058d6:	60bb      	str	r3, [r7, #8]
 80058d8:	e017      	b.n	800590a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	3301      	adds	r3, #1
 80058de:	60bb      	str	r3, [r7, #8]
 80058e0:	e013      	b.n	800590a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	9300      	str	r3, [sp, #0]
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	2200      	movs	r2, #0
 80058ea:	2180      	movs	r1, #128	; 0x80
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 fa5d 	bl	8005dac <UART_WaitOnFlagUntilTimeout>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d001      	beq.n	80058fc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e01f      	b.n	800593c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	1c5a      	adds	r2, r3, #1
 8005900:	60ba      	str	r2, [r7, #8]
 8005902:	781a      	ldrb	r2, [r3, #0]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800590e:	b29b      	uxth	r3, r3
 8005910:	2b00      	cmp	r3, #0
 8005912:	d1b7      	bne.n	8005884 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	9300      	str	r3, [sp, #0]
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	2200      	movs	r2, #0
 800591c:	2140      	movs	r1, #64	; 0x40
 800591e:	68f8      	ldr	r0, [r7, #12]
 8005920:	f000 fa44 	bl	8005dac <UART_WaitOnFlagUntilTimeout>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d001      	beq.n	800592e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e006      	b.n	800593c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2220      	movs	r2, #32
 8005932:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005936:	2300      	movs	r3, #0
 8005938:	e000      	b.n	800593c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800593a:	2302      	movs	r3, #2
  }
}
 800593c:	4618      	mov	r0, r3
 800593e:	3718      	adds	r7, #24
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b086      	sub	sp, #24
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	4613      	mov	r3, r2
 8005950:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b20      	cmp	r3, #32
 800595c:	d166      	bne.n	8005a2c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d002      	beq.n	800596a <HAL_UART_Receive_DMA+0x26>
 8005964:	88fb      	ldrh	r3, [r7, #6]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e05f      	b.n	8005a2e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005974:	2b01      	cmp	r3, #1
 8005976:	d101      	bne.n	800597c <HAL_UART_Receive_DMA+0x38>
 8005978:	2302      	movs	r3, #2
 800597a:	e058      	b.n	8005a2e <HAL_UART_Receive_DMA+0xea>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	88fa      	ldrh	r2, [r7, #6]
 800598e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2222      	movs	r2, #34	; 0x22
 800599a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059a2:	4a25      	ldr	r2, [pc, #148]	; (8005a38 <HAL_UART_Receive_DMA+0xf4>)
 80059a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059aa:	4a24      	ldr	r2, [pc, #144]	; (8005a3c <HAL_UART_Receive_DMA+0xf8>)
 80059ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059b2:	4a23      	ldr	r2, [pc, #140]	; (8005a40 <HAL_UART_Receive_DMA+0xfc>)
 80059b4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ba:	2200      	movs	r2, #0
 80059bc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80059be:	f107 0308 	add.w	r3, r7, #8
 80059c2:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	3304      	adds	r3, #4
 80059ce:	4619      	mov	r1, r3
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	88fb      	ldrh	r3, [r7, #6]
 80059d6:	f7fc ffeb 	bl	80029b0 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80059da:	2300      	movs	r3, #0
 80059dc:	613b      	str	r3, [r7, #16]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	613b      	str	r3, [r7, #16]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	613b      	str	r3, [r7, #16]
 80059ee:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68da      	ldr	r2, [r3, #12]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a06:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	695a      	ldr	r2, [r3, #20]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f042 0201 	orr.w	r2, r2, #1
 8005a16:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	695a      	ldr	r2, [r3, #20]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a26:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	e000      	b.n	8005a2e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005a2c:	2302      	movs	r3, #2
  }
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3718      	adds	r7, #24
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	08005c95 	.word	0x08005c95
 8005a3c:	08005cfd 	.word	0x08005cfd
 8005a40:	08005d19 	.word	0x08005d19

08005a44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b088      	sub	sp, #32
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005a64:	2300      	movs	r3, #0
 8005a66:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	f003 030f 	and.w	r3, r3, #15
 8005a72:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10d      	bne.n	8005a96 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	f003 0320 	and.w	r3, r3, #32
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d008      	beq.n	8005a96 <HAL_UART_IRQHandler+0x52>
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	f003 0320 	and.w	r3, r3, #32
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d003      	beq.n	8005a96 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 fa8c 	bl	8005fac <UART_Receive_IT>
      return;
 8005a94:	e0d1      	b.n	8005c3a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f000 80b0 	beq.w	8005bfe <HAL_UART_IRQHandler+0x1ba>
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f003 0301 	and.w	r3, r3, #1
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d105      	bne.n	8005ab4 <HAL_UART_IRQHandler+0x70>
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	f000 80a5 	beq.w	8005bfe <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	f003 0301 	and.w	r3, r3, #1
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00a      	beq.n	8005ad4 <HAL_UART_IRQHandler+0x90>
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d005      	beq.n	8005ad4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005acc:	f043 0201 	orr.w	r2, r3, #1
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	f003 0304 	and.w	r3, r3, #4
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00a      	beq.n	8005af4 <HAL_UART_IRQHandler+0xb0>
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	f003 0301 	and.w	r3, r3, #1
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d005      	beq.n	8005af4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aec:	f043 0202 	orr.w	r2, r3, #2
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	f003 0302 	and.w	r3, r3, #2
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00a      	beq.n	8005b14 <HAL_UART_IRQHandler+0xd0>
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	f003 0301 	and.w	r3, r3, #1
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d005      	beq.n	8005b14 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b0c:	f043 0204 	orr.w	r2, r3, #4
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	f003 0308 	and.w	r3, r3, #8
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00f      	beq.n	8005b3e <HAL_UART_IRQHandler+0xfa>
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	f003 0320 	and.w	r3, r3, #32
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d104      	bne.n	8005b32 <HAL_UART_IRQHandler+0xee>
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d005      	beq.n	8005b3e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b36:	f043 0208 	orr.w	r2, r3, #8
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d078      	beq.n	8005c38 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	f003 0320 	and.w	r3, r3, #32
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d007      	beq.n	8005b60 <HAL_UART_IRQHandler+0x11c>
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	f003 0320 	and.w	r3, r3, #32
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d002      	beq.n	8005b60 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 fa26 	bl	8005fac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b6a:	2b40      	cmp	r3, #64	; 0x40
 8005b6c:	bf0c      	ite	eq
 8005b6e:	2301      	moveq	r3, #1
 8005b70:	2300      	movne	r3, #0
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b7a:	f003 0308 	and.w	r3, r3, #8
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d102      	bne.n	8005b88 <HAL_UART_IRQHandler+0x144>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d031      	beq.n	8005bec <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 f96f 	bl	8005e6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	695b      	ldr	r3, [r3, #20]
 8005b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b98:	2b40      	cmp	r3, #64	; 0x40
 8005b9a:	d123      	bne.n	8005be4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	695a      	ldr	r2, [r3, #20]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005baa:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d013      	beq.n	8005bdc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb8:	4a21      	ldr	r2, [pc, #132]	; (8005c40 <HAL_UART_IRQHandler+0x1fc>)
 8005bba:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7fc ff4d 	bl	8002a60 <HAL_DMA_Abort_IT>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d016      	beq.n	8005bfa <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005bd6:	4610      	mov	r0, r2
 8005bd8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bda:	e00e      	b.n	8005bfa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 f84f 	bl	8005c80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005be2:	e00a      	b.n	8005bfa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 f84b 	bl	8005c80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bea:	e006      	b.n	8005bfa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 f847 	bl	8005c80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005bf8:	e01e      	b.n	8005c38 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bfa:	bf00      	nop
    return;
 8005bfc:	e01c      	b.n	8005c38 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d008      	beq.n	8005c1a <HAL_UART_IRQHandler+0x1d6>
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d003      	beq.n	8005c1a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f95c 	bl	8005ed0 <UART_Transmit_IT>
    return;
 8005c18:	e00f      	b.n	8005c3a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00a      	beq.n	8005c3a <HAL_UART_IRQHandler+0x1f6>
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d005      	beq.n	8005c3a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f9a4 	bl	8005f7c <UART_EndTransmit_IT>
    return;
 8005c34:	bf00      	nop
 8005c36:	e000      	b.n	8005c3a <HAL_UART_IRQHandler+0x1f6>
    return;
 8005c38:	bf00      	nop
  }
}
 8005c3a:	3720      	adds	r7, #32
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	08005ea9 	.word	0x08005ea9

08005c44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d11e      	bne.n	8005cee <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68da      	ldr	r2, [r3, #12]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005cc4:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	695a      	ldr	r2, [r3, #20]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f022 0201 	bic.w	r2, r2, #1
 8005cd4:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	695a      	ldr	r2, [r3, #20]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ce4:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2220      	movs	r2, #32
 8005cea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f7ff ffb2 	bl	8005c58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cf4:	bf00      	nop
 8005cf6:	3710      	adds	r7, #16
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d08:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f7ff ffae 	bl	8005c6c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d10:	bf00      	nop
 8005d12:	3710      	adds	r7, #16
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005d20:	2300      	movs	r3, #0
 8005d22:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d28:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	695b      	ldr	r3, [r3, #20]
 8005d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d34:	2b80      	cmp	r3, #128	; 0x80
 8005d36:	bf0c      	ite	eq
 8005d38:	2301      	moveq	r3, #1
 8005d3a:	2300      	movne	r3, #0
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	2b21      	cmp	r3, #33	; 0x21
 8005d4a:	d108      	bne.n	8005d5e <UART_DMAError+0x46>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d005      	beq.n	8005d5e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	2200      	movs	r2, #0
 8005d56:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005d58:	68b8      	ldr	r0, [r7, #8]
 8005d5a:	f000 f871 	bl	8005e40 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	695b      	ldr	r3, [r3, #20]
 8005d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d68:	2b40      	cmp	r3, #64	; 0x40
 8005d6a:	bf0c      	ite	eq
 8005d6c:	2301      	moveq	r3, #1
 8005d6e:	2300      	movne	r3, #0
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	2b22      	cmp	r3, #34	; 0x22
 8005d7e:	d108      	bne.n	8005d92 <UART_DMAError+0x7a>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d005      	beq.n	8005d92 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005d8c:	68b8      	ldr	r0, [r7, #8]
 8005d8e:	f000 f86d 	bl	8005e6c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d96:	f043 0210 	orr.w	r2, r3, #16
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d9e:	68b8      	ldr	r0, [r7, #8]
 8005da0:	f7ff ff6e 	bl	8005c80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005da4:	bf00      	nop
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	603b      	str	r3, [r7, #0]
 8005db8:	4613      	mov	r3, r2
 8005dba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dbc:	e02c      	b.n	8005e18 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dc4:	d028      	beq.n	8005e18 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d007      	beq.n	8005ddc <UART_WaitOnFlagUntilTimeout+0x30>
 8005dcc:	f7fc fb40 	bl	8002450 <HAL_GetTick>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	69ba      	ldr	r2, [r7, #24]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d21d      	bcs.n	8005e18 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68da      	ldr	r2, [r3, #12]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005dea:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	695a      	ldr	r2, [r3, #20]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f022 0201 	bic.w	r2, r2, #1
 8005dfa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2220      	movs	r2, #32
 8005e00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2220      	movs	r2, #32
 8005e08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e00f      	b.n	8005e38 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	4013      	ands	r3, r2
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	bf0c      	ite	eq
 8005e28:	2301      	moveq	r3, #1
 8005e2a:	2300      	movne	r3, #0
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	461a      	mov	r2, r3
 8005e30:	79fb      	ldrb	r3, [r7, #7]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d0c3      	beq.n	8005dbe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3710      	adds	r7, #16
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68da      	ldr	r2, [r3, #12]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005e56:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2220      	movs	r2, #32
 8005e5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68da      	ldr	r2, [r3, #12]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005e82:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	695a      	ldr	r2, [r3, #20]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f022 0201 	bic.w	r2, r2, #1
 8005e92:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2220      	movs	r2, #32
 8005e98:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005e9c:	bf00      	nop
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ec2:	68f8      	ldr	r0, [r7, #12]
 8005ec4:	f7ff fedc 	bl	8005c80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ec8:	bf00      	nop
 8005eca:	3710      	adds	r7, #16
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	2b21      	cmp	r3, #33	; 0x21
 8005ee2:	d144      	bne.n	8005f6e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eec:	d11a      	bne.n	8005f24 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a1b      	ldr	r3, [r3, #32]
 8005ef2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	461a      	mov	r2, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f02:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d105      	bne.n	8005f18 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a1b      	ldr	r3, [r3, #32]
 8005f10:	1c9a      	adds	r2, r3, #2
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	621a      	str	r2, [r3, #32]
 8005f16:	e00e      	b.n	8005f36 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a1b      	ldr	r3, [r3, #32]
 8005f1c:	1c5a      	adds	r2, r3, #1
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	621a      	str	r2, [r3, #32]
 8005f22:	e008      	b.n	8005f36 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a1b      	ldr	r3, [r3, #32]
 8005f28:	1c59      	adds	r1, r3, #1
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	6211      	str	r1, [r2, #32]
 8005f2e:	781a      	ldrb	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	4619      	mov	r1, r3
 8005f44:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d10f      	bne.n	8005f6a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68da      	ldr	r2, [r3, #12]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f58:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68da      	ldr	r2, [r3, #12]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f68:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	e000      	b.n	8005f70 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005f6e:	2302      	movs	r3, #2
  }
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3714      	adds	r7, #20
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68da      	ldr	r2, [r3, #12]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f92:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2220      	movs	r2, #32
 8005f98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f7ff fe51 	bl	8005c44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3708      	adds	r7, #8
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	2b22      	cmp	r3, #34	; 0x22
 8005fbe:	d171      	bne.n	80060a4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fc8:	d123      	bne.n	8006012 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fce:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d10e      	bne.n	8005ff6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fee:	1c9a      	adds	r2, r3, #2
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	629a      	str	r2, [r3, #40]	; 0x28
 8005ff4:	e029      	b.n	800604a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	b29a      	uxth	r2, r3
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600a:	1c5a      	adds	r2, r3, #1
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	629a      	str	r2, [r3, #40]	; 0x28
 8006010:	e01b      	b.n	800604a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10a      	bne.n	8006030 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	6858      	ldr	r0, [r3, #4]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006024:	1c59      	adds	r1, r3, #1
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	6291      	str	r1, [r2, #40]	; 0x28
 800602a:	b2c2      	uxtb	r2, r0
 800602c:	701a      	strb	r2, [r3, #0]
 800602e:	e00c      	b.n	800604a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	b2da      	uxtb	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603c:	1c58      	adds	r0, r3, #1
 800603e:	6879      	ldr	r1, [r7, #4]
 8006040:	6288      	str	r0, [r1, #40]	; 0x28
 8006042:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006046:	b2d2      	uxtb	r2, r2
 8006048:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800604e:	b29b      	uxth	r3, r3
 8006050:	3b01      	subs	r3, #1
 8006052:	b29b      	uxth	r3, r3
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	4619      	mov	r1, r3
 8006058:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800605a:	2b00      	cmp	r3, #0
 800605c:	d120      	bne.n	80060a0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68da      	ldr	r2, [r3, #12]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f022 0220 	bic.w	r2, r2, #32
 800606c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68da      	ldr	r2, [r3, #12]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800607c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	695a      	ldr	r2, [r3, #20]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f022 0201 	bic.w	r2, r2, #1
 800608c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2220      	movs	r2, #32
 8006092:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f7ff fdde 	bl	8005c58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800609c:	2300      	movs	r3, #0
 800609e:	e002      	b.n	80060a6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80060a0:	2300      	movs	r3, #0
 80060a2:	e000      	b.n	80060a6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80060a4:	2302      	movs	r3, #2
  }
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3710      	adds	r7, #16
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
	...

080060b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060b4:	b085      	sub	sp, #20
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	68da      	ldr	r2, [r3, #12]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	430a      	orrs	r2, r1
 80060ce:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	689a      	ldr	r2, [r3, #8]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	431a      	orrs	r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	431a      	orrs	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	69db      	ldr	r3, [r3, #28]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80060f2:	f023 030c 	bic.w	r3, r3, #12
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	6812      	ldr	r2, [r2, #0]
 80060fa:	68f9      	ldr	r1, [r7, #12]
 80060fc:	430b      	orrs	r3, r1
 80060fe:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	699a      	ldr	r2, [r3, #24]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	430a      	orrs	r2, r1
 8006114:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	69db      	ldr	r3, [r3, #28]
 800611a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800611e:	f040 8199 	bne.w	8006454 <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4ac6      	ldr	r2, [pc, #792]	; (8006440 <UART_SetConfig+0x390>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d00f      	beq.n	800614c <UART_SetConfig+0x9c>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4ac4      	ldr	r2, [pc, #784]	; (8006444 <UART_SetConfig+0x394>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d00a      	beq.n	800614c <UART_SetConfig+0x9c>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4ac3      	ldr	r2, [pc, #780]	; (8006448 <UART_SetConfig+0x398>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d005      	beq.n	800614c <UART_SetConfig+0x9c>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4ac1      	ldr	r2, [pc, #772]	; (800644c <UART_SetConfig+0x39c>)
 8006146:	4293      	cmp	r3, r2
 8006148:	f040 80bd 	bne.w	80062c6 <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800614c:	f7fe fff2 	bl	8005134 <HAL_RCC_GetPCLK2Freq>
 8006150:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	461d      	mov	r5, r3
 8006156:	f04f 0600 	mov.w	r6, #0
 800615a:	46a8      	mov	r8, r5
 800615c:	46b1      	mov	r9, r6
 800615e:	eb18 0308 	adds.w	r3, r8, r8
 8006162:	eb49 0409 	adc.w	r4, r9, r9
 8006166:	4698      	mov	r8, r3
 8006168:	46a1      	mov	r9, r4
 800616a:	eb18 0805 	adds.w	r8, r8, r5
 800616e:	eb49 0906 	adc.w	r9, r9, r6
 8006172:	f04f 0100 	mov.w	r1, #0
 8006176:	f04f 0200 	mov.w	r2, #0
 800617a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800617e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006182:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006186:	4688      	mov	r8, r1
 8006188:	4691      	mov	r9, r2
 800618a:	eb18 0005 	adds.w	r0, r8, r5
 800618e:	eb49 0106 	adc.w	r1, r9, r6
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	461d      	mov	r5, r3
 8006198:	f04f 0600 	mov.w	r6, #0
 800619c:	196b      	adds	r3, r5, r5
 800619e:	eb46 0406 	adc.w	r4, r6, r6
 80061a2:	461a      	mov	r2, r3
 80061a4:	4623      	mov	r3, r4
 80061a6:	f7fa fce1 	bl	8000b6c <__aeabi_uldivmod>
 80061aa:	4603      	mov	r3, r0
 80061ac:	460c      	mov	r4, r1
 80061ae:	461a      	mov	r2, r3
 80061b0:	4ba7      	ldr	r3, [pc, #668]	; (8006450 <UART_SetConfig+0x3a0>)
 80061b2:	fba3 2302 	umull	r2, r3, r3, r2
 80061b6:	095b      	lsrs	r3, r3, #5
 80061b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	461d      	mov	r5, r3
 80061c0:	f04f 0600 	mov.w	r6, #0
 80061c4:	46a9      	mov	r9, r5
 80061c6:	46b2      	mov	sl, r6
 80061c8:	eb19 0309 	adds.w	r3, r9, r9
 80061cc:	eb4a 040a 	adc.w	r4, sl, sl
 80061d0:	4699      	mov	r9, r3
 80061d2:	46a2      	mov	sl, r4
 80061d4:	eb19 0905 	adds.w	r9, r9, r5
 80061d8:	eb4a 0a06 	adc.w	sl, sl, r6
 80061dc:	f04f 0100 	mov.w	r1, #0
 80061e0:	f04f 0200 	mov.w	r2, #0
 80061e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80061ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80061f0:	4689      	mov	r9, r1
 80061f2:	4692      	mov	sl, r2
 80061f4:	eb19 0005 	adds.w	r0, r9, r5
 80061f8:	eb4a 0106 	adc.w	r1, sl, r6
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	461d      	mov	r5, r3
 8006202:	f04f 0600 	mov.w	r6, #0
 8006206:	196b      	adds	r3, r5, r5
 8006208:	eb46 0406 	adc.w	r4, r6, r6
 800620c:	461a      	mov	r2, r3
 800620e:	4623      	mov	r3, r4
 8006210:	f7fa fcac 	bl	8000b6c <__aeabi_uldivmod>
 8006214:	4603      	mov	r3, r0
 8006216:	460c      	mov	r4, r1
 8006218:	461a      	mov	r2, r3
 800621a:	4b8d      	ldr	r3, [pc, #564]	; (8006450 <UART_SetConfig+0x3a0>)
 800621c:	fba3 1302 	umull	r1, r3, r3, r2
 8006220:	095b      	lsrs	r3, r3, #5
 8006222:	2164      	movs	r1, #100	; 0x64
 8006224:	fb01 f303 	mul.w	r3, r1, r3
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	00db      	lsls	r3, r3, #3
 800622c:	3332      	adds	r3, #50	; 0x32
 800622e:	4a88      	ldr	r2, [pc, #544]	; (8006450 <UART_SetConfig+0x3a0>)
 8006230:	fba2 2303 	umull	r2, r3, r2, r3
 8006234:	095b      	lsrs	r3, r3, #5
 8006236:	005b      	lsls	r3, r3, #1
 8006238:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800623c:	4498      	add	r8, r3
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	461d      	mov	r5, r3
 8006242:	f04f 0600 	mov.w	r6, #0
 8006246:	46a9      	mov	r9, r5
 8006248:	46b2      	mov	sl, r6
 800624a:	eb19 0309 	adds.w	r3, r9, r9
 800624e:	eb4a 040a 	adc.w	r4, sl, sl
 8006252:	4699      	mov	r9, r3
 8006254:	46a2      	mov	sl, r4
 8006256:	eb19 0905 	adds.w	r9, r9, r5
 800625a:	eb4a 0a06 	adc.w	sl, sl, r6
 800625e:	f04f 0100 	mov.w	r1, #0
 8006262:	f04f 0200 	mov.w	r2, #0
 8006266:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800626a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800626e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006272:	4689      	mov	r9, r1
 8006274:	4692      	mov	sl, r2
 8006276:	eb19 0005 	adds.w	r0, r9, r5
 800627a:	eb4a 0106 	adc.w	r1, sl, r6
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	461d      	mov	r5, r3
 8006284:	f04f 0600 	mov.w	r6, #0
 8006288:	196b      	adds	r3, r5, r5
 800628a:	eb46 0406 	adc.w	r4, r6, r6
 800628e:	461a      	mov	r2, r3
 8006290:	4623      	mov	r3, r4
 8006292:	f7fa fc6b 	bl	8000b6c <__aeabi_uldivmod>
 8006296:	4603      	mov	r3, r0
 8006298:	460c      	mov	r4, r1
 800629a:	461a      	mov	r2, r3
 800629c:	4b6c      	ldr	r3, [pc, #432]	; (8006450 <UART_SetConfig+0x3a0>)
 800629e:	fba3 1302 	umull	r1, r3, r3, r2
 80062a2:	095b      	lsrs	r3, r3, #5
 80062a4:	2164      	movs	r1, #100	; 0x64
 80062a6:	fb01 f303 	mul.w	r3, r1, r3
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	00db      	lsls	r3, r3, #3
 80062ae:	3332      	adds	r3, #50	; 0x32
 80062b0:	4a67      	ldr	r2, [pc, #412]	; (8006450 <UART_SetConfig+0x3a0>)
 80062b2:	fba2 2303 	umull	r2, r3, r2, r3
 80062b6:	095b      	lsrs	r3, r3, #5
 80062b8:	f003 0207 	and.w	r2, r3, #7
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4442      	add	r2, r8
 80062c2:	609a      	str	r2, [r3, #8]
 80062c4:	e27d      	b.n	80067c2 <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062c6:	f7fe ff21 	bl	800510c <HAL_RCC_GetPCLK1Freq>
 80062ca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	461d      	mov	r5, r3
 80062d0:	f04f 0600 	mov.w	r6, #0
 80062d4:	46a8      	mov	r8, r5
 80062d6:	46b1      	mov	r9, r6
 80062d8:	eb18 0308 	adds.w	r3, r8, r8
 80062dc:	eb49 0409 	adc.w	r4, r9, r9
 80062e0:	4698      	mov	r8, r3
 80062e2:	46a1      	mov	r9, r4
 80062e4:	eb18 0805 	adds.w	r8, r8, r5
 80062e8:	eb49 0906 	adc.w	r9, r9, r6
 80062ec:	f04f 0100 	mov.w	r1, #0
 80062f0:	f04f 0200 	mov.w	r2, #0
 80062f4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80062f8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80062fc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006300:	4688      	mov	r8, r1
 8006302:	4691      	mov	r9, r2
 8006304:	eb18 0005 	adds.w	r0, r8, r5
 8006308:	eb49 0106 	adc.w	r1, r9, r6
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	461d      	mov	r5, r3
 8006312:	f04f 0600 	mov.w	r6, #0
 8006316:	196b      	adds	r3, r5, r5
 8006318:	eb46 0406 	adc.w	r4, r6, r6
 800631c:	461a      	mov	r2, r3
 800631e:	4623      	mov	r3, r4
 8006320:	f7fa fc24 	bl	8000b6c <__aeabi_uldivmod>
 8006324:	4603      	mov	r3, r0
 8006326:	460c      	mov	r4, r1
 8006328:	461a      	mov	r2, r3
 800632a:	4b49      	ldr	r3, [pc, #292]	; (8006450 <UART_SetConfig+0x3a0>)
 800632c:	fba3 2302 	umull	r2, r3, r3, r2
 8006330:	095b      	lsrs	r3, r3, #5
 8006332:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	461d      	mov	r5, r3
 800633a:	f04f 0600 	mov.w	r6, #0
 800633e:	46a9      	mov	r9, r5
 8006340:	46b2      	mov	sl, r6
 8006342:	eb19 0309 	adds.w	r3, r9, r9
 8006346:	eb4a 040a 	adc.w	r4, sl, sl
 800634a:	4699      	mov	r9, r3
 800634c:	46a2      	mov	sl, r4
 800634e:	eb19 0905 	adds.w	r9, r9, r5
 8006352:	eb4a 0a06 	adc.w	sl, sl, r6
 8006356:	f04f 0100 	mov.w	r1, #0
 800635a:	f04f 0200 	mov.w	r2, #0
 800635e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006362:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006366:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800636a:	4689      	mov	r9, r1
 800636c:	4692      	mov	sl, r2
 800636e:	eb19 0005 	adds.w	r0, r9, r5
 8006372:	eb4a 0106 	adc.w	r1, sl, r6
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	461d      	mov	r5, r3
 800637c:	f04f 0600 	mov.w	r6, #0
 8006380:	196b      	adds	r3, r5, r5
 8006382:	eb46 0406 	adc.w	r4, r6, r6
 8006386:	461a      	mov	r2, r3
 8006388:	4623      	mov	r3, r4
 800638a:	f7fa fbef 	bl	8000b6c <__aeabi_uldivmod>
 800638e:	4603      	mov	r3, r0
 8006390:	460c      	mov	r4, r1
 8006392:	461a      	mov	r2, r3
 8006394:	4b2e      	ldr	r3, [pc, #184]	; (8006450 <UART_SetConfig+0x3a0>)
 8006396:	fba3 1302 	umull	r1, r3, r3, r2
 800639a:	095b      	lsrs	r3, r3, #5
 800639c:	2164      	movs	r1, #100	; 0x64
 800639e:	fb01 f303 	mul.w	r3, r1, r3
 80063a2:	1ad3      	subs	r3, r2, r3
 80063a4:	00db      	lsls	r3, r3, #3
 80063a6:	3332      	adds	r3, #50	; 0x32
 80063a8:	4a29      	ldr	r2, [pc, #164]	; (8006450 <UART_SetConfig+0x3a0>)
 80063aa:	fba2 2303 	umull	r2, r3, r2, r3
 80063ae:	095b      	lsrs	r3, r3, #5
 80063b0:	005b      	lsls	r3, r3, #1
 80063b2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80063b6:	4498      	add	r8, r3
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	461d      	mov	r5, r3
 80063bc:	f04f 0600 	mov.w	r6, #0
 80063c0:	46a9      	mov	r9, r5
 80063c2:	46b2      	mov	sl, r6
 80063c4:	eb19 0309 	adds.w	r3, r9, r9
 80063c8:	eb4a 040a 	adc.w	r4, sl, sl
 80063cc:	4699      	mov	r9, r3
 80063ce:	46a2      	mov	sl, r4
 80063d0:	eb19 0905 	adds.w	r9, r9, r5
 80063d4:	eb4a 0a06 	adc.w	sl, sl, r6
 80063d8:	f04f 0100 	mov.w	r1, #0
 80063dc:	f04f 0200 	mov.w	r2, #0
 80063e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80063e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80063ec:	4689      	mov	r9, r1
 80063ee:	4692      	mov	sl, r2
 80063f0:	eb19 0005 	adds.w	r0, r9, r5
 80063f4:	eb4a 0106 	adc.w	r1, sl, r6
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	461d      	mov	r5, r3
 80063fe:	f04f 0600 	mov.w	r6, #0
 8006402:	196b      	adds	r3, r5, r5
 8006404:	eb46 0406 	adc.w	r4, r6, r6
 8006408:	461a      	mov	r2, r3
 800640a:	4623      	mov	r3, r4
 800640c:	f7fa fbae 	bl	8000b6c <__aeabi_uldivmod>
 8006410:	4603      	mov	r3, r0
 8006412:	460c      	mov	r4, r1
 8006414:	461a      	mov	r2, r3
 8006416:	4b0e      	ldr	r3, [pc, #56]	; (8006450 <UART_SetConfig+0x3a0>)
 8006418:	fba3 1302 	umull	r1, r3, r3, r2
 800641c:	095b      	lsrs	r3, r3, #5
 800641e:	2164      	movs	r1, #100	; 0x64
 8006420:	fb01 f303 	mul.w	r3, r1, r3
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	00db      	lsls	r3, r3, #3
 8006428:	3332      	adds	r3, #50	; 0x32
 800642a:	4a09      	ldr	r2, [pc, #36]	; (8006450 <UART_SetConfig+0x3a0>)
 800642c:	fba2 2303 	umull	r2, r3, r2, r3
 8006430:	095b      	lsrs	r3, r3, #5
 8006432:	f003 0207 	and.w	r2, r3, #7
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4442      	add	r2, r8
 800643c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800643e:	e1c0      	b.n	80067c2 <UART_SetConfig+0x712>
 8006440:	40011000 	.word	0x40011000
 8006444:	40011400 	.word	0x40011400
 8006448:	40011800 	.word	0x40011800
 800644c:	40011c00 	.word	0x40011c00
 8006450:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4adc      	ldr	r2, [pc, #880]	; (80067cc <UART_SetConfig+0x71c>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d00f      	beq.n	800647e <UART_SetConfig+0x3ce>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4adb      	ldr	r2, [pc, #876]	; (80067d0 <UART_SetConfig+0x720>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d00a      	beq.n	800647e <UART_SetConfig+0x3ce>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4ad9      	ldr	r2, [pc, #868]	; (80067d4 <UART_SetConfig+0x724>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d005      	beq.n	800647e <UART_SetConfig+0x3ce>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4ad8      	ldr	r2, [pc, #864]	; (80067d8 <UART_SetConfig+0x728>)
 8006478:	4293      	cmp	r3, r2
 800647a:	f040 80d1 	bne.w	8006620 <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 800647e:	f7fe fe59 	bl	8005134 <HAL_RCC_GetPCLK2Freq>
 8006482:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	469a      	mov	sl, r3
 8006488:	f04f 0b00 	mov.w	fp, #0
 800648c:	46d0      	mov	r8, sl
 800648e:	46d9      	mov	r9, fp
 8006490:	eb18 0308 	adds.w	r3, r8, r8
 8006494:	eb49 0409 	adc.w	r4, r9, r9
 8006498:	4698      	mov	r8, r3
 800649a:	46a1      	mov	r9, r4
 800649c:	eb18 080a 	adds.w	r8, r8, sl
 80064a0:	eb49 090b 	adc.w	r9, r9, fp
 80064a4:	f04f 0100 	mov.w	r1, #0
 80064a8:	f04f 0200 	mov.w	r2, #0
 80064ac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80064b0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80064b4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80064b8:	4688      	mov	r8, r1
 80064ba:	4691      	mov	r9, r2
 80064bc:	eb1a 0508 	adds.w	r5, sl, r8
 80064c0:	eb4b 0609 	adc.w	r6, fp, r9
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	4619      	mov	r1, r3
 80064ca:	f04f 0200 	mov.w	r2, #0
 80064ce:	f04f 0300 	mov.w	r3, #0
 80064d2:	f04f 0400 	mov.w	r4, #0
 80064d6:	0094      	lsls	r4, r2, #2
 80064d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80064dc:	008b      	lsls	r3, r1, #2
 80064de:	461a      	mov	r2, r3
 80064e0:	4623      	mov	r3, r4
 80064e2:	4628      	mov	r0, r5
 80064e4:	4631      	mov	r1, r6
 80064e6:	f7fa fb41 	bl	8000b6c <__aeabi_uldivmod>
 80064ea:	4603      	mov	r3, r0
 80064ec:	460c      	mov	r4, r1
 80064ee:	461a      	mov	r2, r3
 80064f0:	4bba      	ldr	r3, [pc, #744]	; (80067dc <UART_SetConfig+0x72c>)
 80064f2:	fba3 2302 	umull	r2, r3, r3, r2
 80064f6:	095b      	lsrs	r3, r3, #5
 80064f8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	469b      	mov	fp, r3
 8006500:	f04f 0c00 	mov.w	ip, #0
 8006504:	46d9      	mov	r9, fp
 8006506:	46e2      	mov	sl, ip
 8006508:	eb19 0309 	adds.w	r3, r9, r9
 800650c:	eb4a 040a 	adc.w	r4, sl, sl
 8006510:	4699      	mov	r9, r3
 8006512:	46a2      	mov	sl, r4
 8006514:	eb19 090b 	adds.w	r9, r9, fp
 8006518:	eb4a 0a0c 	adc.w	sl, sl, ip
 800651c:	f04f 0100 	mov.w	r1, #0
 8006520:	f04f 0200 	mov.w	r2, #0
 8006524:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006528:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800652c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006530:	4689      	mov	r9, r1
 8006532:	4692      	mov	sl, r2
 8006534:	eb1b 0509 	adds.w	r5, fp, r9
 8006538:	eb4c 060a 	adc.w	r6, ip, sl
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	4619      	mov	r1, r3
 8006542:	f04f 0200 	mov.w	r2, #0
 8006546:	f04f 0300 	mov.w	r3, #0
 800654a:	f04f 0400 	mov.w	r4, #0
 800654e:	0094      	lsls	r4, r2, #2
 8006550:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006554:	008b      	lsls	r3, r1, #2
 8006556:	461a      	mov	r2, r3
 8006558:	4623      	mov	r3, r4
 800655a:	4628      	mov	r0, r5
 800655c:	4631      	mov	r1, r6
 800655e:	f7fa fb05 	bl	8000b6c <__aeabi_uldivmod>
 8006562:	4603      	mov	r3, r0
 8006564:	460c      	mov	r4, r1
 8006566:	461a      	mov	r2, r3
 8006568:	4b9c      	ldr	r3, [pc, #624]	; (80067dc <UART_SetConfig+0x72c>)
 800656a:	fba3 1302 	umull	r1, r3, r3, r2
 800656e:	095b      	lsrs	r3, r3, #5
 8006570:	2164      	movs	r1, #100	; 0x64
 8006572:	fb01 f303 	mul.w	r3, r1, r3
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	011b      	lsls	r3, r3, #4
 800657a:	3332      	adds	r3, #50	; 0x32
 800657c:	4a97      	ldr	r2, [pc, #604]	; (80067dc <UART_SetConfig+0x72c>)
 800657e:	fba2 2303 	umull	r2, r3, r2, r3
 8006582:	095b      	lsrs	r3, r3, #5
 8006584:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006588:	4498      	add	r8, r3
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	469b      	mov	fp, r3
 800658e:	f04f 0c00 	mov.w	ip, #0
 8006592:	46d9      	mov	r9, fp
 8006594:	46e2      	mov	sl, ip
 8006596:	eb19 0309 	adds.w	r3, r9, r9
 800659a:	eb4a 040a 	adc.w	r4, sl, sl
 800659e:	4699      	mov	r9, r3
 80065a0:	46a2      	mov	sl, r4
 80065a2:	eb19 090b 	adds.w	r9, r9, fp
 80065a6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80065aa:	f04f 0100 	mov.w	r1, #0
 80065ae:	f04f 0200 	mov.w	r2, #0
 80065b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80065ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80065be:	4689      	mov	r9, r1
 80065c0:	4692      	mov	sl, r2
 80065c2:	eb1b 0509 	adds.w	r5, fp, r9
 80065c6:	eb4c 060a 	adc.w	r6, ip, sl
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	4619      	mov	r1, r3
 80065d0:	f04f 0200 	mov.w	r2, #0
 80065d4:	f04f 0300 	mov.w	r3, #0
 80065d8:	f04f 0400 	mov.w	r4, #0
 80065dc:	0094      	lsls	r4, r2, #2
 80065de:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80065e2:	008b      	lsls	r3, r1, #2
 80065e4:	461a      	mov	r2, r3
 80065e6:	4623      	mov	r3, r4
 80065e8:	4628      	mov	r0, r5
 80065ea:	4631      	mov	r1, r6
 80065ec:	f7fa fabe 	bl	8000b6c <__aeabi_uldivmod>
 80065f0:	4603      	mov	r3, r0
 80065f2:	460c      	mov	r4, r1
 80065f4:	461a      	mov	r2, r3
 80065f6:	4b79      	ldr	r3, [pc, #484]	; (80067dc <UART_SetConfig+0x72c>)
 80065f8:	fba3 1302 	umull	r1, r3, r3, r2
 80065fc:	095b      	lsrs	r3, r3, #5
 80065fe:	2164      	movs	r1, #100	; 0x64
 8006600:	fb01 f303 	mul.w	r3, r1, r3
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	011b      	lsls	r3, r3, #4
 8006608:	3332      	adds	r3, #50	; 0x32
 800660a:	4a74      	ldr	r2, [pc, #464]	; (80067dc <UART_SetConfig+0x72c>)
 800660c:	fba2 2303 	umull	r2, r3, r2, r3
 8006610:	095b      	lsrs	r3, r3, #5
 8006612:	f003 020f 	and.w	r2, r3, #15
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4442      	add	r2, r8
 800661c:	609a      	str	r2, [r3, #8]
 800661e:	e0d0      	b.n	80067c2 <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006620:	f7fe fd74 	bl	800510c <HAL_RCC_GetPCLK1Freq>
 8006624:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	469a      	mov	sl, r3
 800662a:	f04f 0b00 	mov.w	fp, #0
 800662e:	46d0      	mov	r8, sl
 8006630:	46d9      	mov	r9, fp
 8006632:	eb18 0308 	adds.w	r3, r8, r8
 8006636:	eb49 0409 	adc.w	r4, r9, r9
 800663a:	4698      	mov	r8, r3
 800663c:	46a1      	mov	r9, r4
 800663e:	eb18 080a 	adds.w	r8, r8, sl
 8006642:	eb49 090b 	adc.w	r9, r9, fp
 8006646:	f04f 0100 	mov.w	r1, #0
 800664a:	f04f 0200 	mov.w	r2, #0
 800664e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006652:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006656:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800665a:	4688      	mov	r8, r1
 800665c:	4691      	mov	r9, r2
 800665e:	eb1a 0508 	adds.w	r5, sl, r8
 8006662:	eb4b 0609 	adc.w	r6, fp, r9
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	4619      	mov	r1, r3
 800666c:	f04f 0200 	mov.w	r2, #0
 8006670:	f04f 0300 	mov.w	r3, #0
 8006674:	f04f 0400 	mov.w	r4, #0
 8006678:	0094      	lsls	r4, r2, #2
 800667a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800667e:	008b      	lsls	r3, r1, #2
 8006680:	461a      	mov	r2, r3
 8006682:	4623      	mov	r3, r4
 8006684:	4628      	mov	r0, r5
 8006686:	4631      	mov	r1, r6
 8006688:	f7fa fa70 	bl	8000b6c <__aeabi_uldivmod>
 800668c:	4603      	mov	r3, r0
 800668e:	460c      	mov	r4, r1
 8006690:	461a      	mov	r2, r3
 8006692:	4b52      	ldr	r3, [pc, #328]	; (80067dc <UART_SetConfig+0x72c>)
 8006694:	fba3 2302 	umull	r2, r3, r3, r2
 8006698:	095b      	lsrs	r3, r3, #5
 800669a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	469b      	mov	fp, r3
 80066a2:	f04f 0c00 	mov.w	ip, #0
 80066a6:	46d9      	mov	r9, fp
 80066a8:	46e2      	mov	sl, ip
 80066aa:	eb19 0309 	adds.w	r3, r9, r9
 80066ae:	eb4a 040a 	adc.w	r4, sl, sl
 80066b2:	4699      	mov	r9, r3
 80066b4:	46a2      	mov	sl, r4
 80066b6:	eb19 090b 	adds.w	r9, r9, fp
 80066ba:	eb4a 0a0c 	adc.w	sl, sl, ip
 80066be:	f04f 0100 	mov.w	r1, #0
 80066c2:	f04f 0200 	mov.w	r2, #0
 80066c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80066ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80066d2:	4689      	mov	r9, r1
 80066d4:	4692      	mov	sl, r2
 80066d6:	eb1b 0509 	adds.w	r5, fp, r9
 80066da:	eb4c 060a 	adc.w	r6, ip, sl
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	4619      	mov	r1, r3
 80066e4:	f04f 0200 	mov.w	r2, #0
 80066e8:	f04f 0300 	mov.w	r3, #0
 80066ec:	f04f 0400 	mov.w	r4, #0
 80066f0:	0094      	lsls	r4, r2, #2
 80066f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80066f6:	008b      	lsls	r3, r1, #2
 80066f8:	461a      	mov	r2, r3
 80066fa:	4623      	mov	r3, r4
 80066fc:	4628      	mov	r0, r5
 80066fe:	4631      	mov	r1, r6
 8006700:	f7fa fa34 	bl	8000b6c <__aeabi_uldivmod>
 8006704:	4603      	mov	r3, r0
 8006706:	460c      	mov	r4, r1
 8006708:	461a      	mov	r2, r3
 800670a:	4b34      	ldr	r3, [pc, #208]	; (80067dc <UART_SetConfig+0x72c>)
 800670c:	fba3 1302 	umull	r1, r3, r3, r2
 8006710:	095b      	lsrs	r3, r3, #5
 8006712:	2164      	movs	r1, #100	; 0x64
 8006714:	fb01 f303 	mul.w	r3, r1, r3
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	011b      	lsls	r3, r3, #4
 800671c:	3332      	adds	r3, #50	; 0x32
 800671e:	4a2f      	ldr	r2, [pc, #188]	; (80067dc <UART_SetConfig+0x72c>)
 8006720:	fba2 2303 	umull	r2, r3, r2, r3
 8006724:	095b      	lsrs	r3, r3, #5
 8006726:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800672a:	4498      	add	r8, r3
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	469b      	mov	fp, r3
 8006730:	f04f 0c00 	mov.w	ip, #0
 8006734:	46d9      	mov	r9, fp
 8006736:	46e2      	mov	sl, ip
 8006738:	eb19 0309 	adds.w	r3, r9, r9
 800673c:	eb4a 040a 	adc.w	r4, sl, sl
 8006740:	4699      	mov	r9, r3
 8006742:	46a2      	mov	sl, r4
 8006744:	eb19 090b 	adds.w	r9, r9, fp
 8006748:	eb4a 0a0c 	adc.w	sl, sl, ip
 800674c:	f04f 0100 	mov.w	r1, #0
 8006750:	f04f 0200 	mov.w	r2, #0
 8006754:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006758:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800675c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006760:	4689      	mov	r9, r1
 8006762:	4692      	mov	sl, r2
 8006764:	eb1b 0509 	adds.w	r5, fp, r9
 8006768:	eb4c 060a 	adc.w	r6, ip, sl
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	4619      	mov	r1, r3
 8006772:	f04f 0200 	mov.w	r2, #0
 8006776:	f04f 0300 	mov.w	r3, #0
 800677a:	f04f 0400 	mov.w	r4, #0
 800677e:	0094      	lsls	r4, r2, #2
 8006780:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006784:	008b      	lsls	r3, r1, #2
 8006786:	461a      	mov	r2, r3
 8006788:	4623      	mov	r3, r4
 800678a:	4628      	mov	r0, r5
 800678c:	4631      	mov	r1, r6
 800678e:	f7fa f9ed 	bl	8000b6c <__aeabi_uldivmod>
 8006792:	4603      	mov	r3, r0
 8006794:	460c      	mov	r4, r1
 8006796:	461a      	mov	r2, r3
 8006798:	4b10      	ldr	r3, [pc, #64]	; (80067dc <UART_SetConfig+0x72c>)
 800679a:	fba3 1302 	umull	r1, r3, r3, r2
 800679e:	095b      	lsrs	r3, r3, #5
 80067a0:	2164      	movs	r1, #100	; 0x64
 80067a2:	fb01 f303 	mul.w	r3, r1, r3
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	011b      	lsls	r3, r3, #4
 80067aa:	3332      	adds	r3, #50	; 0x32
 80067ac:	4a0b      	ldr	r2, [pc, #44]	; (80067dc <UART_SetConfig+0x72c>)
 80067ae:	fba2 2303 	umull	r2, r3, r2, r3
 80067b2:	095b      	lsrs	r3, r3, #5
 80067b4:	f003 020f 	and.w	r2, r3, #15
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4442      	add	r2, r8
 80067be:	609a      	str	r2, [r3, #8]
}
 80067c0:	e7ff      	b.n	80067c2 <UART_SetConfig+0x712>
 80067c2:	bf00      	nop
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067cc:	40011000 	.word	0x40011000
 80067d0:	40011400 	.word	0x40011400
 80067d4:	40011800 	.word	0x40011800
 80067d8:	40011c00 	.word	0x40011c00
 80067dc:	51eb851f 	.word	0x51eb851f

080067e0 <SIMCOM_USART_IrqHandler>:
/* Private functions implementation -------------------------------------------*/
static void SIMCOM_Check_Buffer(void);
static void SIMCOM_Fill_Buffer(const void *data, size_t len);

/* Public functions implementation ---------------------------------------------*/
void SIMCOM_USART_IrqHandler(void) {
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
    /* if Idle flag is set */
    if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)) {
 80067e6:	4b0c      	ldr	r3, [pc, #48]	; (8006818 <SIMCOM_USART_IrqHandler+0x38>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 0310 	and.w	r3, r3, #16
 80067f0:	2b10      	cmp	r3, #16
 80067f2:	d10c      	bne.n	800680e <SIMCOM_USART_IrqHandler+0x2e>
        /* Clear idle flag */
        __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 80067f4:	2300      	movs	r3, #0
 80067f6:	607b      	str	r3, [r7, #4]
 80067f8:	4b07      	ldr	r3, [pc, #28]	; (8006818 <SIMCOM_USART_IrqHandler+0x38>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	607b      	str	r3, [r7, #4]
 8006800:	4b05      	ldr	r3, [pc, #20]	; (8006818 <SIMCOM_USART_IrqHandler+0x38>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	607b      	str	r3, [r7, #4]
 8006808:	687b      	ldr	r3, [r7, #4]

        SIMCOM_Check_Buffer();
 800680a:	f001 f923 	bl	8007a54 <SIMCOM_Check_Buffer>
    }
}
 800680e:	bf00      	nop
 8006810:	3708      	adds	r7, #8
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	2000036c 	.word	0x2000036c

0800681c <SIMCOM_DMA_IrqHandler>:

void SIMCOM_DMA_IrqHandler(void) {
 800681c:	b580      	push	{r7, lr}
 800681e:	af00      	add	r7, sp, #0
    // if the source is HT
    if (__HAL_DMA_GET_IT_SOURCE(&hdma_usart1_rx, DMA_IT_HT)) {
 8006820:	4b9a      	ldr	r3, [pc, #616]	; (8006a8c <SIMCOM_DMA_IrqHandler+0x270>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 0308 	and.w	r3, r3, #8
 800682a:	2b00      	cmp	r3, #0
 800682c:	f000 81bc 	beq.w	8006ba8 <SIMCOM_DMA_IrqHandler+0x38c>
        /* Clear HT flag */
        __HAL_DMA_CLEAR_FLAG(&hdma_usart1_rx, __HAL_DMA_GET_HT_FLAG_INDEX(&hdma_usart1_rx));
 8006830:	4b96      	ldr	r3, [pc, #600]	; (8006a8c <SIMCOM_DMA_IrqHandler+0x270>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	461a      	mov	r2, r3
 8006836:	4b96      	ldr	r3, [pc, #600]	; (8006a90 <SIMCOM_DMA_IrqHandler+0x274>)
 8006838:	429a      	cmp	r2, r3
 800683a:	d960      	bls.n	80068fe <SIMCOM_DMA_IrqHandler+0xe2>
 800683c:	4b93      	ldr	r3, [pc, #588]	; (8006a8c <SIMCOM_DMA_IrqHandler+0x270>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a94      	ldr	r2, [pc, #592]	; (8006a94 <SIMCOM_DMA_IrqHandler+0x278>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d057      	beq.n	80068f6 <SIMCOM_DMA_IrqHandler+0xda>
 8006846:	4b91      	ldr	r3, [pc, #580]	; (8006a8c <SIMCOM_DMA_IrqHandler+0x270>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a93      	ldr	r2, [pc, #588]	; (8006a98 <SIMCOM_DMA_IrqHandler+0x27c>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d050      	beq.n	80068f2 <SIMCOM_DMA_IrqHandler+0xd6>
 8006850:	4b8e      	ldr	r3, [pc, #568]	; (8006a8c <SIMCOM_DMA_IrqHandler+0x270>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a91      	ldr	r2, [pc, #580]	; (8006a9c <SIMCOM_DMA_IrqHandler+0x280>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d049      	beq.n	80068ee <SIMCOM_DMA_IrqHandler+0xd2>
 800685a:	4b8c      	ldr	r3, [pc, #560]	; (8006a8c <SIMCOM_DMA_IrqHandler+0x270>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a90      	ldr	r2, [pc, #576]	; (8006aa0 <SIMCOM_DMA_IrqHandler+0x284>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d042      	beq.n	80068ea <SIMCOM_DMA_IrqHandler+0xce>
 8006864:	4b89      	ldr	r3, [pc, #548]	; (8006a8c <SIMCOM_DMA_IrqHandler+0x270>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a8e      	ldr	r2, [pc, #568]	; (8006aa4 <SIMCOM_DMA_IrqHandler+0x288>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d03a      	beq.n	80068e4 <SIMCOM_DMA_IrqHandler+0xc8>
 800686e:	4b87      	ldr	r3, [pc, #540]	; (8006a8c <SIMCOM_DMA_IrqHandler+0x270>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a8d      	ldr	r2, [pc, #564]	; (8006aa8 <SIMCOM_DMA_IrqHandler+0x28c>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d032      	beq.n	80068de <SIMCOM_DMA_IrqHandler+0xc2>
 8006878:	4b84      	ldr	r3, [pc, #528]	; (8006a8c <SIMCOM_DMA_IrqHandler+0x270>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a8b      	ldr	r2, [pc, #556]	; (8006aac <SIMCOM_DMA_IrqHandler+0x290>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d02a      	beq.n	80068d8 <SIMCOM_DMA_IrqHandler+0xbc>
 8006882:	4b82      	ldr	r3, [pc, #520]	; (8006a8c <SIMCOM_DMA_IrqHandler+0x270>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a8a      	ldr	r2, [pc, #552]	; (8006ab0 <SIMCOM_DMA_IrqHandler+0x294>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d022      	beq.n	80068d2 <SIMCOM_DMA_IrqHandler+0xb6>
 800688c:	4b7f      	ldr	r3, [pc, #508]	; (8006a8c <SIMCOM_DMA_IrqHandler+0x270>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a88      	ldr	r2, [pc, #544]	; (8006ab4 <SIMCOM_DMA_IrqHandler+0x298>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d01a      	beq.n	80068cc <SIMCOM_DMA_IrqHandler+0xb0>
 8006896:	4b7d      	ldr	r3, [pc, #500]	; (8006a8c <SIMCOM_DMA_IrqHandler+0x270>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a87      	ldr	r2, [pc, #540]	; (8006ab8 <SIMCOM_DMA_IrqHandler+0x29c>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d012      	beq.n	80068c6 <SIMCOM_DMA_IrqHandler+0xaa>
 80068a0:	4b7a      	ldr	r3, [pc, #488]	; (8006a8c <SIMCOM_DMA_IrqHandler+0x270>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a85      	ldr	r2, [pc, #532]	; (8006abc <SIMCOM_DMA_IrqHandler+0x2a0>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d00a      	beq.n	80068c0 <SIMCOM_DMA_IrqHandler+0xa4>
 80068aa:	4b78      	ldr	r3, [pc, #480]	; (8006a8c <SIMCOM_DMA_IrqHandler+0x270>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a84      	ldr	r2, [pc, #528]	; (8006ac0 <SIMCOM_DMA_IrqHandler+0x2a4>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d102      	bne.n	80068ba <SIMCOM_DMA_IrqHandler+0x9e>
 80068b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80068b8:	e01e      	b.n	80068f8 <SIMCOM_DMA_IrqHandler+0xdc>
 80068ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80068be:	e01b      	b.n	80068f8 <SIMCOM_DMA_IrqHandler+0xdc>
 80068c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80068c4:	e018      	b.n	80068f8 <SIMCOM_DMA_IrqHandler+0xdc>
 80068c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80068ca:	e015      	b.n	80068f8 <SIMCOM_DMA_IrqHandler+0xdc>
 80068cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80068d0:	e012      	b.n	80068f8 <SIMCOM_DMA_IrqHandler+0xdc>
 80068d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068d6:	e00f      	b.n	80068f8 <SIMCOM_DMA_IrqHandler+0xdc>
 80068d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068dc:	e00c      	b.n	80068f8 <SIMCOM_DMA_IrqHandler+0xdc>
 80068de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068e2:	e009      	b.n	80068f8 <SIMCOM_DMA_IrqHandler+0xdc>
 80068e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068e8:	e006      	b.n	80068f8 <SIMCOM_DMA_IrqHandler+0xdc>
 80068ea:	2310      	movs	r3, #16
 80068ec:	e004      	b.n	80068f8 <SIMCOM_DMA_IrqHandler+0xdc>
 80068ee:	2310      	movs	r3, #16
 80068f0:	e002      	b.n	80068f8 <SIMCOM_DMA_IrqHandler+0xdc>
 80068f2:	2310      	movs	r3, #16
 80068f4:	e000      	b.n	80068f8 <SIMCOM_DMA_IrqHandler+0xdc>
 80068f6:	2310      	movs	r3, #16
 80068f8:	4a72      	ldr	r2, [pc, #456]	; (8006ac4 <SIMCOM_DMA_IrqHandler+0x2a8>)
 80068fa:	60d3      	str	r3, [r2, #12]
 80068fc:	e150      	b.n	8006ba0 <SIMCOM_DMA_IrqHandler+0x384>
 80068fe:	4b63      	ldr	r3, [pc, #396]	; (8006a8c <SIMCOM_DMA_IrqHandler+0x270>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	461a      	mov	r2, r3
 8006904:	4b70      	ldr	r3, [pc, #448]	; (8006ac8 <SIMCOM_DMA_IrqHandler+0x2ac>)
 8006906:	429a      	cmp	r2, r3
 8006908:	d960      	bls.n	80069cc <SIMCOM_DMA_IrqHandler+0x1b0>
 800690a:	4b60      	ldr	r3, [pc, #384]	; (8006a8c <SIMCOM_DMA_IrqHandler+0x270>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a61      	ldr	r2, [pc, #388]	; (8006a94 <SIMCOM_DMA_IrqHandler+0x278>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d057      	beq.n	80069c4 <SIMCOM_DMA_IrqHandler+0x1a8>
 8006914:	4b5d      	ldr	r3, [pc, #372]	; (8006a8c <SIMCOM_DMA_IrqHandler+0x270>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a5f      	ldr	r2, [pc, #380]	; (8006a98 <SIMCOM_DMA_IrqHandler+0x27c>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d050      	beq.n	80069c0 <SIMCOM_DMA_IrqHandler+0x1a4>
 800691e:	4b5b      	ldr	r3, [pc, #364]	; (8006a8c <SIMCOM_DMA_IrqHandler+0x270>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a5e      	ldr	r2, [pc, #376]	; (8006a9c <SIMCOM_DMA_IrqHandler+0x280>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d049      	beq.n	80069bc <SIMCOM_DMA_IrqHandler+0x1a0>
 8006928:	4b58      	ldr	r3, [pc, #352]	; (8006a8c <SIMCOM_DMA_IrqHandler+0x270>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a5c      	ldr	r2, [pc, #368]	; (8006aa0 <SIMCOM_DMA_IrqHandler+0x284>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d042      	beq.n	80069b8 <SIMCOM_DMA_IrqHandler+0x19c>
 8006932:	4b56      	ldr	r3, [pc, #344]	; (8006a8c <SIMCOM_DMA_IrqHandler+0x270>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a5b      	ldr	r2, [pc, #364]	; (8006aa4 <SIMCOM_DMA_IrqHandler+0x288>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d03a      	beq.n	80069b2 <SIMCOM_DMA_IrqHandler+0x196>
 800693c:	4b53      	ldr	r3, [pc, #332]	; (8006a8c <SIMCOM_DMA_IrqHandler+0x270>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a59      	ldr	r2, [pc, #356]	; (8006aa8 <SIMCOM_DMA_IrqHandler+0x28c>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d032      	beq.n	80069ac <SIMCOM_DMA_IrqHandler+0x190>
 8006946:	4b51      	ldr	r3, [pc, #324]	; (8006a8c <SIMCOM_DMA_IrqHandler+0x270>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a58      	ldr	r2, [pc, #352]	; (8006aac <SIMCOM_DMA_IrqHandler+0x290>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d02a      	beq.n	80069a6 <SIMCOM_DMA_IrqHandler+0x18a>
 8006950:	4b4e      	ldr	r3, [pc, #312]	; (8006a8c <SIMCOM_DMA_IrqHandler+0x270>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a56      	ldr	r2, [pc, #344]	; (8006ab0 <SIMCOM_DMA_IrqHandler+0x294>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d022      	beq.n	80069a0 <SIMCOM_DMA_IrqHandler+0x184>
 800695a:	4b4c      	ldr	r3, [pc, #304]	; (8006a8c <SIMCOM_DMA_IrqHandler+0x270>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a55      	ldr	r2, [pc, #340]	; (8006ab4 <SIMCOM_DMA_IrqHandler+0x298>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d01a      	beq.n	800699a <SIMCOM_DMA_IrqHandler+0x17e>
 8006964:	4b49      	ldr	r3, [pc, #292]	; (8006a8c <SIMCOM_DMA_IrqHandler+0x270>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a53      	ldr	r2, [pc, #332]	; (8006ab8 <SIMCOM_DMA_IrqHandler+0x29c>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d012      	beq.n	8006994 <SIMCOM_DMA_IrqHandler+0x178>
 800696e:	4b47      	ldr	r3, [pc, #284]	; (8006a8c <SIMCOM_DMA_IrqHandler+0x270>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a52      	ldr	r2, [pc, #328]	; (8006abc <SIMCOM_DMA_IrqHandler+0x2a0>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d00a      	beq.n	800698e <SIMCOM_DMA_IrqHandler+0x172>
 8006978:	4b44      	ldr	r3, [pc, #272]	; (8006a8c <SIMCOM_DMA_IrqHandler+0x270>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a50      	ldr	r2, [pc, #320]	; (8006ac0 <SIMCOM_DMA_IrqHandler+0x2a4>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d102      	bne.n	8006988 <SIMCOM_DMA_IrqHandler+0x16c>
 8006982:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006986:	e01e      	b.n	80069c6 <SIMCOM_DMA_IrqHandler+0x1aa>
 8006988:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800698c:	e01b      	b.n	80069c6 <SIMCOM_DMA_IrqHandler+0x1aa>
 800698e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006992:	e018      	b.n	80069c6 <SIMCOM_DMA_IrqHandler+0x1aa>
 8006994:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006998:	e015      	b.n	80069c6 <SIMCOM_DMA_IrqHandler+0x1aa>
 800699a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800699e:	e012      	b.n	80069c6 <SIMCOM_DMA_IrqHandler+0x1aa>
 80069a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069a4:	e00f      	b.n	80069c6 <SIMCOM_DMA_IrqHandler+0x1aa>
 80069a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069aa:	e00c      	b.n	80069c6 <SIMCOM_DMA_IrqHandler+0x1aa>
 80069ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069b0:	e009      	b.n	80069c6 <SIMCOM_DMA_IrqHandler+0x1aa>
 80069b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069b6:	e006      	b.n	80069c6 <SIMCOM_DMA_IrqHandler+0x1aa>
 80069b8:	2310      	movs	r3, #16
 80069ba:	e004      	b.n	80069c6 <SIMCOM_DMA_IrqHandler+0x1aa>
 80069bc:	2310      	movs	r3, #16
 80069be:	e002      	b.n	80069c6 <SIMCOM_DMA_IrqHandler+0x1aa>
 80069c0:	2310      	movs	r3, #16
 80069c2:	e000      	b.n	80069c6 <SIMCOM_DMA_IrqHandler+0x1aa>
 80069c4:	2310      	movs	r3, #16
 80069c6:	4a3f      	ldr	r2, [pc, #252]	; (8006ac4 <SIMCOM_DMA_IrqHandler+0x2a8>)
 80069c8:	6093      	str	r3, [r2, #8]
 80069ca:	e0e9      	b.n	8006ba0 <SIMCOM_DMA_IrqHandler+0x384>
 80069cc:	4b2f      	ldr	r3, [pc, #188]	; (8006a8c <SIMCOM_DMA_IrqHandler+0x270>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	461a      	mov	r2, r3
 80069d2:	4b3e      	ldr	r3, [pc, #248]	; (8006acc <SIMCOM_DMA_IrqHandler+0x2b0>)
 80069d4:	429a      	cmp	r2, r3
 80069d6:	f240 8083 	bls.w	8006ae0 <SIMCOM_DMA_IrqHandler+0x2c4>
 80069da:	4b2c      	ldr	r3, [pc, #176]	; (8006a8c <SIMCOM_DMA_IrqHandler+0x270>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a2d      	ldr	r2, [pc, #180]	; (8006a94 <SIMCOM_DMA_IrqHandler+0x278>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d079      	beq.n	8006ad8 <SIMCOM_DMA_IrqHandler+0x2bc>
 80069e4:	4b29      	ldr	r3, [pc, #164]	; (8006a8c <SIMCOM_DMA_IrqHandler+0x270>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a2b      	ldr	r2, [pc, #172]	; (8006a98 <SIMCOM_DMA_IrqHandler+0x27c>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d072      	beq.n	8006ad4 <SIMCOM_DMA_IrqHandler+0x2b8>
 80069ee:	4b27      	ldr	r3, [pc, #156]	; (8006a8c <SIMCOM_DMA_IrqHandler+0x270>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a2a      	ldr	r2, [pc, #168]	; (8006a9c <SIMCOM_DMA_IrqHandler+0x280>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d06b      	beq.n	8006ad0 <SIMCOM_DMA_IrqHandler+0x2b4>
 80069f8:	4b24      	ldr	r3, [pc, #144]	; (8006a8c <SIMCOM_DMA_IrqHandler+0x270>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a28      	ldr	r2, [pc, #160]	; (8006aa0 <SIMCOM_DMA_IrqHandler+0x284>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d042      	beq.n	8006a88 <SIMCOM_DMA_IrqHandler+0x26c>
 8006a02:	4b22      	ldr	r3, [pc, #136]	; (8006a8c <SIMCOM_DMA_IrqHandler+0x270>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a27      	ldr	r2, [pc, #156]	; (8006aa4 <SIMCOM_DMA_IrqHandler+0x288>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d03a      	beq.n	8006a82 <SIMCOM_DMA_IrqHandler+0x266>
 8006a0c:	4b1f      	ldr	r3, [pc, #124]	; (8006a8c <SIMCOM_DMA_IrqHandler+0x270>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a25      	ldr	r2, [pc, #148]	; (8006aa8 <SIMCOM_DMA_IrqHandler+0x28c>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d032      	beq.n	8006a7c <SIMCOM_DMA_IrqHandler+0x260>
 8006a16:	4b1d      	ldr	r3, [pc, #116]	; (8006a8c <SIMCOM_DMA_IrqHandler+0x270>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a24      	ldr	r2, [pc, #144]	; (8006aac <SIMCOM_DMA_IrqHandler+0x290>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d02a      	beq.n	8006a76 <SIMCOM_DMA_IrqHandler+0x25a>
 8006a20:	4b1a      	ldr	r3, [pc, #104]	; (8006a8c <SIMCOM_DMA_IrqHandler+0x270>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a22      	ldr	r2, [pc, #136]	; (8006ab0 <SIMCOM_DMA_IrqHandler+0x294>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d022      	beq.n	8006a70 <SIMCOM_DMA_IrqHandler+0x254>
 8006a2a:	4b18      	ldr	r3, [pc, #96]	; (8006a8c <SIMCOM_DMA_IrqHandler+0x270>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a21      	ldr	r2, [pc, #132]	; (8006ab4 <SIMCOM_DMA_IrqHandler+0x298>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d01a      	beq.n	8006a6a <SIMCOM_DMA_IrqHandler+0x24e>
 8006a34:	4b15      	ldr	r3, [pc, #84]	; (8006a8c <SIMCOM_DMA_IrqHandler+0x270>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a1f      	ldr	r2, [pc, #124]	; (8006ab8 <SIMCOM_DMA_IrqHandler+0x29c>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d012      	beq.n	8006a64 <SIMCOM_DMA_IrqHandler+0x248>
 8006a3e:	4b13      	ldr	r3, [pc, #76]	; (8006a8c <SIMCOM_DMA_IrqHandler+0x270>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a1e      	ldr	r2, [pc, #120]	; (8006abc <SIMCOM_DMA_IrqHandler+0x2a0>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d00a      	beq.n	8006a5e <SIMCOM_DMA_IrqHandler+0x242>
 8006a48:	4b10      	ldr	r3, [pc, #64]	; (8006a8c <SIMCOM_DMA_IrqHandler+0x270>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a1c      	ldr	r2, [pc, #112]	; (8006ac0 <SIMCOM_DMA_IrqHandler+0x2a4>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d102      	bne.n	8006a58 <SIMCOM_DMA_IrqHandler+0x23c>
 8006a52:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006a56:	e040      	b.n	8006ada <SIMCOM_DMA_IrqHandler+0x2be>
 8006a58:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006a5c:	e03d      	b.n	8006ada <SIMCOM_DMA_IrqHandler+0x2be>
 8006a5e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006a62:	e03a      	b.n	8006ada <SIMCOM_DMA_IrqHandler+0x2be>
 8006a64:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006a68:	e037      	b.n	8006ada <SIMCOM_DMA_IrqHandler+0x2be>
 8006a6a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006a6e:	e034      	b.n	8006ada <SIMCOM_DMA_IrqHandler+0x2be>
 8006a70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a74:	e031      	b.n	8006ada <SIMCOM_DMA_IrqHandler+0x2be>
 8006a76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a7a:	e02e      	b.n	8006ada <SIMCOM_DMA_IrqHandler+0x2be>
 8006a7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a80:	e02b      	b.n	8006ada <SIMCOM_DMA_IrqHandler+0x2be>
 8006a82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a86:	e028      	b.n	8006ada <SIMCOM_DMA_IrqHandler+0x2be>
 8006a88:	2310      	movs	r3, #16
 8006a8a:	e026      	b.n	8006ada <SIMCOM_DMA_IrqHandler+0x2be>
 8006a8c:	2000030c 	.word	0x2000030c
 8006a90:	40026458 	.word	0x40026458
 8006a94:	40026010 	.word	0x40026010
 8006a98:	40026410 	.word	0x40026410
 8006a9c:	40026070 	.word	0x40026070
 8006aa0:	40026470 	.word	0x40026470
 8006aa4:	40026028 	.word	0x40026028
 8006aa8:	40026428 	.word	0x40026428
 8006aac:	40026088 	.word	0x40026088
 8006ab0:	40026488 	.word	0x40026488
 8006ab4:	40026040 	.word	0x40026040
 8006ab8:	40026440 	.word	0x40026440
 8006abc:	400260a0 	.word	0x400260a0
 8006ac0:	400264a0 	.word	0x400264a0
 8006ac4:	40026400 	.word	0x40026400
 8006ac8:	400260b8 	.word	0x400260b8
 8006acc:	40026058 	.word	0x40026058
 8006ad0:	2310      	movs	r3, #16
 8006ad2:	e002      	b.n	8006ada <SIMCOM_DMA_IrqHandler+0x2be>
 8006ad4:	2310      	movs	r3, #16
 8006ad6:	e000      	b.n	8006ada <SIMCOM_DMA_IrqHandler+0x2be>
 8006ad8:	2310      	movs	r3, #16
 8006ada:	4a9b      	ldr	r2, [pc, #620]	; (8006d48 <SIMCOM_DMA_IrqHandler+0x52c>)
 8006adc:	60d3      	str	r3, [r2, #12]
 8006ade:	e05f      	b.n	8006ba0 <SIMCOM_DMA_IrqHandler+0x384>
 8006ae0:	4b9a      	ldr	r3, [pc, #616]	; (8006d4c <SIMCOM_DMA_IrqHandler+0x530>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a9a      	ldr	r2, [pc, #616]	; (8006d50 <SIMCOM_DMA_IrqHandler+0x534>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d057      	beq.n	8006b9a <SIMCOM_DMA_IrqHandler+0x37e>
 8006aea:	4b98      	ldr	r3, [pc, #608]	; (8006d4c <SIMCOM_DMA_IrqHandler+0x530>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a99      	ldr	r2, [pc, #612]	; (8006d54 <SIMCOM_DMA_IrqHandler+0x538>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d050      	beq.n	8006b96 <SIMCOM_DMA_IrqHandler+0x37a>
 8006af4:	4b95      	ldr	r3, [pc, #596]	; (8006d4c <SIMCOM_DMA_IrqHandler+0x530>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a97      	ldr	r2, [pc, #604]	; (8006d58 <SIMCOM_DMA_IrqHandler+0x53c>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d049      	beq.n	8006b92 <SIMCOM_DMA_IrqHandler+0x376>
 8006afe:	4b93      	ldr	r3, [pc, #588]	; (8006d4c <SIMCOM_DMA_IrqHandler+0x530>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a96      	ldr	r2, [pc, #600]	; (8006d5c <SIMCOM_DMA_IrqHandler+0x540>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d042      	beq.n	8006b8e <SIMCOM_DMA_IrqHandler+0x372>
 8006b08:	4b90      	ldr	r3, [pc, #576]	; (8006d4c <SIMCOM_DMA_IrqHandler+0x530>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a94      	ldr	r2, [pc, #592]	; (8006d60 <SIMCOM_DMA_IrqHandler+0x544>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d03a      	beq.n	8006b88 <SIMCOM_DMA_IrqHandler+0x36c>
 8006b12:	4b8e      	ldr	r3, [pc, #568]	; (8006d4c <SIMCOM_DMA_IrqHandler+0x530>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a93      	ldr	r2, [pc, #588]	; (8006d64 <SIMCOM_DMA_IrqHandler+0x548>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d032      	beq.n	8006b82 <SIMCOM_DMA_IrqHandler+0x366>
 8006b1c:	4b8b      	ldr	r3, [pc, #556]	; (8006d4c <SIMCOM_DMA_IrqHandler+0x530>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a91      	ldr	r2, [pc, #580]	; (8006d68 <SIMCOM_DMA_IrqHandler+0x54c>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d02a      	beq.n	8006b7c <SIMCOM_DMA_IrqHandler+0x360>
 8006b26:	4b89      	ldr	r3, [pc, #548]	; (8006d4c <SIMCOM_DMA_IrqHandler+0x530>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a90      	ldr	r2, [pc, #576]	; (8006d6c <SIMCOM_DMA_IrqHandler+0x550>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d022      	beq.n	8006b76 <SIMCOM_DMA_IrqHandler+0x35a>
 8006b30:	4b86      	ldr	r3, [pc, #536]	; (8006d4c <SIMCOM_DMA_IrqHandler+0x530>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a8e      	ldr	r2, [pc, #568]	; (8006d70 <SIMCOM_DMA_IrqHandler+0x554>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d01a      	beq.n	8006b70 <SIMCOM_DMA_IrqHandler+0x354>
 8006b3a:	4b84      	ldr	r3, [pc, #528]	; (8006d4c <SIMCOM_DMA_IrqHandler+0x530>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a8d      	ldr	r2, [pc, #564]	; (8006d74 <SIMCOM_DMA_IrqHandler+0x558>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d012      	beq.n	8006b6a <SIMCOM_DMA_IrqHandler+0x34e>
 8006b44:	4b81      	ldr	r3, [pc, #516]	; (8006d4c <SIMCOM_DMA_IrqHandler+0x530>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a8b      	ldr	r2, [pc, #556]	; (8006d78 <SIMCOM_DMA_IrqHandler+0x55c>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d00a      	beq.n	8006b64 <SIMCOM_DMA_IrqHandler+0x348>
 8006b4e:	4b7f      	ldr	r3, [pc, #508]	; (8006d4c <SIMCOM_DMA_IrqHandler+0x530>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a8a      	ldr	r2, [pc, #552]	; (8006d7c <SIMCOM_DMA_IrqHandler+0x560>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d102      	bne.n	8006b5e <SIMCOM_DMA_IrqHandler+0x342>
 8006b58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006b5c:	e01e      	b.n	8006b9c <SIMCOM_DMA_IrqHandler+0x380>
 8006b5e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006b62:	e01b      	b.n	8006b9c <SIMCOM_DMA_IrqHandler+0x380>
 8006b64:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006b68:	e018      	b.n	8006b9c <SIMCOM_DMA_IrqHandler+0x380>
 8006b6a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006b6e:	e015      	b.n	8006b9c <SIMCOM_DMA_IrqHandler+0x380>
 8006b70:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006b74:	e012      	b.n	8006b9c <SIMCOM_DMA_IrqHandler+0x380>
 8006b76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b7a:	e00f      	b.n	8006b9c <SIMCOM_DMA_IrqHandler+0x380>
 8006b7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b80:	e00c      	b.n	8006b9c <SIMCOM_DMA_IrqHandler+0x380>
 8006b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b86:	e009      	b.n	8006b9c <SIMCOM_DMA_IrqHandler+0x380>
 8006b88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b8c:	e006      	b.n	8006b9c <SIMCOM_DMA_IrqHandler+0x380>
 8006b8e:	2310      	movs	r3, #16
 8006b90:	e004      	b.n	8006b9c <SIMCOM_DMA_IrqHandler+0x380>
 8006b92:	2310      	movs	r3, #16
 8006b94:	e002      	b.n	8006b9c <SIMCOM_DMA_IrqHandler+0x380>
 8006b96:	2310      	movs	r3, #16
 8006b98:	e000      	b.n	8006b9c <SIMCOM_DMA_IrqHandler+0x380>
 8006b9a:	2310      	movs	r3, #16
 8006b9c:	4a6a      	ldr	r2, [pc, #424]	; (8006d48 <SIMCOM_DMA_IrqHandler+0x52c>)
 8006b9e:	6093      	str	r3, [r2, #8]

        SIMCOM_Check_Buffer();
 8006ba0:	f000 ff58 	bl	8007a54 <SIMCOM_Check_Buffer>
        __HAL_DMA_CLEAR_FLAG(&hdma_usart1_rx, __HAL_DMA_GET_DME_FLAG_INDEX(&hdma_usart1_rx));

        /* Start DMA transfer */
        HAL_UART_Receive_DMA(&huart1, (uint8_t*) SIMCOM_DMA_RX, SIMCOM_DMA_RX_SZ);
    }
}
 8006ba4:	f000 bf0a 	b.w	80079bc <SIMCOM_DMA_IrqHandler+0x11a0>
    else if (__HAL_DMA_GET_IT_SOURCE(&hdma_usart1_rx, DMA_IT_TC)) {
 8006ba8:	4b68      	ldr	r3, [pc, #416]	; (8006d4c <SIMCOM_DMA_IrqHandler+0x530>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 0310 	and.w	r3, r3, #16
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	f000 81bd 	beq.w	8006f32 <SIMCOM_DMA_IrqHandler+0x716>
        __HAL_DMA_CLEAR_FLAG(&hdma_usart1_rx, __HAL_DMA_GET_TC_FLAG_INDEX(&hdma_usart1_rx));
 8006bb8:	4b64      	ldr	r3, [pc, #400]	; (8006d4c <SIMCOM_DMA_IrqHandler+0x530>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	4b70      	ldr	r3, [pc, #448]	; (8006d80 <SIMCOM_DMA_IrqHandler+0x564>)
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d960      	bls.n	8006c86 <SIMCOM_DMA_IrqHandler+0x46a>
 8006bc4:	4b61      	ldr	r3, [pc, #388]	; (8006d4c <SIMCOM_DMA_IrqHandler+0x530>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a61      	ldr	r2, [pc, #388]	; (8006d50 <SIMCOM_DMA_IrqHandler+0x534>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d057      	beq.n	8006c7e <SIMCOM_DMA_IrqHandler+0x462>
 8006bce:	4b5f      	ldr	r3, [pc, #380]	; (8006d4c <SIMCOM_DMA_IrqHandler+0x530>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a60      	ldr	r2, [pc, #384]	; (8006d54 <SIMCOM_DMA_IrqHandler+0x538>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d050      	beq.n	8006c7a <SIMCOM_DMA_IrqHandler+0x45e>
 8006bd8:	4b5c      	ldr	r3, [pc, #368]	; (8006d4c <SIMCOM_DMA_IrqHandler+0x530>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a5e      	ldr	r2, [pc, #376]	; (8006d58 <SIMCOM_DMA_IrqHandler+0x53c>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d049      	beq.n	8006c76 <SIMCOM_DMA_IrqHandler+0x45a>
 8006be2:	4b5a      	ldr	r3, [pc, #360]	; (8006d4c <SIMCOM_DMA_IrqHandler+0x530>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a5d      	ldr	r2, [pc, #372]	; (8006d5c <SIMCOM_DMA_IrqHandler+0x540>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d042      	beq.n	8006c72 <SIMCOM_DMA_IrqHandler+0x456>
 8006bec:	4b57      	ldr	r3, [pc, #348]	; (8006d4c <SIMCOM_DMA_IrqHandler+0x530>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a5b      	ldr	r2, [pc, #364]	; (8006d60 <SIMCOM_DMA_IrqHandler+0x544>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d03a      	beq.n	8006c6c <SIMCOM_DMA_IrqHandler+0x450>
 8006bf6:	4b55      	ldr	r3, [pc, #340]	; (8006d4c <SIMCOM_DMA_IrqHandler+0x530>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a5a      	ldr	r2, [pc, #360]	; (8006d64 <SIMCOM_DMA_IrqHandler+0x548>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d032      	beq.n	8006c66 <SIMCOM_DMA_IrqHandler+0x44a>
 8006c00:	4b52      	ldr	r3, [pc, #328]	; (8006d4c <SIMCOM_DMA_IrqHandler+0x530>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a58      	ldr	r2, [pc, #352]	; (8006d68 <SIMCOM_DMA_IrqHandler+0x54c>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d02a      	beq.n	8006c60 <SIMCOM_DMA_IrqHandler+0x444>
 8006c0a:	4b50      	ldr	r3, [pc, #320]	; (8006d4c <SIMCOM_DMA_IrqHandler+0x530>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a57      	ldr	r2, [pc, #348]	; (8006d6c <SIMCOM_DMA_IrqHandler+0x550>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d022      	beq.n	8006c5a <SIMCOM_DMA_IrqHandler+0x43e>
 8006c14:	4b4d      	ldr	r3, [pc, #308]	; (8006d4c <SIMCOM_DMA_IrqHandler+0x530>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a55      	ldr	r2, [pc, #340]	; (8006d70 <SIMCOM_DMA_IrqHandler+0x554>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d01a      	beq.n	8006c54 <SIMCOM_DMA_IrqHandler+0x438>
 8006c1e:	4b4b      	ldr	r3, [pc, #300]	; (8006d4c <SIMCOM_DMA_IrqHandler+0x530>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a54      	ldr	r2, [pc, #336]	; (8006d74 <SIMCOM_DMA_IrqHandler+0x558>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d012      	beq.n	8006c4e <SIMCOM_DMA_IrqHandler+0x432>
 8006c28:	4b48      	ldr	r3, [pc, #288]	; (8006d4c <SIMCOM_DMA_IrqHandler+0x530>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a52      	ldr	r2, [pc, #328]	; (8006d78 <SIMCOM_DMA_IrqHandler+0x55c>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d00a      	beq.n	8006c48 <SIMCOM_DMA_IrqHandler+0x42c>
 8006c32:	4b46      	ldr	r3, [pc, #280]	; (8006d4c <SIMCOM_DMA_IrqHandler+0x530>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a51      	ldr	r2, [pc, #324]	; (8006d7c <SIMCOM_DMA_IrqHandler+0x560>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d102      	bne.n	8006c42 <SIMCOM_DMA_IrqHandler+0x426>
 8006c3c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006c40:	e01e      	b.n	8006c80 <SIMCOM_DMA_IrqHandler+0x464>
 8006c42:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c46:	e01b      	b.n	8006c80 <SIMCOM_DMA_IrqHandler+0x464>
 8006c48:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006c4c:	e018      	b.n	8006c80 <SIMCOM_DMA_IrqHandler+0x464>
 8006c4e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006c52:	e015      	b.n	8006c80 <SIMCOM_DMA_IrqHandler+0x464>
 8006c54:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006c58:	e012      	b.n	8006c80 <SIMCOM_DMA_IrqHandler+0x464>
 8006c5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006c5e:	e00f      	b.n	8006c80 <SIMCOM_DMA_IrqHandler+0x464>
 8006c60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006c64:	e00c      	b.n	8006c80 <SIMCOM_DMA_IrqHandler+0x464>
 8006c66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006c6a:	e009      	b.n	8006c80 <SIMCOM_DMA_IrqHandler+0x464>
 8006c6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006c70:	e006      	b.n	8006c80 <SIMCOM_DMA_IrqHandler+0x464>
 8006c72:	2320      	movs	r3, #32
 8006c74:	e004      	b.n	8006c80 <SIMCOM_DMA_IrqHandler+0x464>
 8006c76:	2320      	movs	r3, #32
 8006c78:	e002      	b.n	8006c80 <SIMCOM_DMA_IrqHandler+0x464>
 8006c7a:	2320      	movs	r3, #32
 8006c7c:	e000      	b.n	8006c80 <SIMCOM_DMA_IrqHandler+0x464>
 8006c7e:	2320      	movs	r3, #32
 8006c80:	4a40      	ldr	r2, [pc, #256]	; (8006d84 <SIMCOM_DMA_IrqHandler+0x568>)
 8006c82:	60d3      	str	r3, [r2, #12]
 8006c84:	e151      	b.n	8006f2a <SIMCOM_DMA_IrqHandler+0x70e>
 8006c86:	4b31      	ldr	r3, [pc, #196]	; (8006d4c <SIMCOM_DMA_IrqHandler+0x530>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	4b3e      	ldr	r3, [pc, #248]	; (8006d88 <SIMCOM_DMA_IrqHandler+0x56c>)
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	f240 8084 	bls.w	8006d9c <SIMCOM_DMA_IrqHandler+0x580>
 8006c94:	4b2d      	ldr	r3, [pc, #180]	; (8006d4c <SIMCOM_DMA_IrqHandler+0x530>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a2d      	ldr	r2, [pc, #180]	; (8006d50 <SIMCOM_DMA_IrqHandler+0x534>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d07a      	beq.n	8006d94 <SIMCOM_DMA_IrqHandler+0x578>
 8006c9e:	4b2b      	ldr	r3, [pc, #172]	; (8006d4c <SIMCOM_DMA_IrqHandler+0x530>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a2c      	ldr	r2, [pc, #176]	; (8006d54 <SIMCOM_DMA_IrqHandler+0x538>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d073      	beq.n	8006d90 <SIMCOM_DMA_IrqHandler+0x574>
 8006ca8:	4b28      	ldr	r3, [pc, #160]	; (8006d4c <SIMCOM_DMA_IrqHandler+0x530>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a2a      	ldr	r2, [pc, #168]	; (8006d58 <SIMCOM_DMA_IrqHandler+0x53c>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d06c      	beq.n	8006d8c <SIMCOM_DMA_IrqHandler+0x570>
 8006cb2:	4b26      	ldr	r3, [pc, #152]	; (8006d4c <SIMCOM_DMA_IrqHandler+0x530>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a29      	ldr	r2, [pc, #164]	; (8006d5c <SIMCOM_DMA_IrqHandler+0x540>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d042      	beq.n	8006d42 <SIMCOM_DMA_IrqHandler+0x526>
 8006cbc:	4b23      	ldr	r3, [pc, #140]	; (8006d4c <SIMCOM_DMA_IrqHandler+0x530>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a27      	ldr	r2, [pc, #156]	; (8006d60 <SIMCOM_DMA_IrqHandler+0x544>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d03a      	beq.n	8006d3c <SIMCOM_DMA_IrqHandler+0x520>
 8006cc6:	4b21      	ldr	r3, [pc, #132]	; (8006d4c <SIMCOM_DMA_IrqHandler+0x530>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a26      	ldr	r2, [pc, #152]	; (8006d64 <SIMCOM_DMA_IrqHandler+0x548>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d032      	beq.n	8006d36 <SIMCOM_DMA_IrqHandler+0x51a>
 8006cd0:	4b1e      	ldr	r3, [pc, #120]	; (8006d4c <SIMCOM_DMA_IrqHandler+0x530>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a24      	ldr	r2, [pc, #144]	; (8006d68 <SIMCOM_DMA_IrqHandler+0x54c>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d02a      	beq.n	8006d30 <SIMCOM_DMA_IrqHandler+0x514>
 8006cda:	4b1c      	ldr	r3, [pc, #112]	; (8006d4c <SIMCOM_DMA_IrqHandler+0x530>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a23      	ldr	r2, [pc, #140]	; (8006d6c <SIMCOM_DMA_IrqHandler+0x550>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d022      	beq.n	8006d2a <SIMCOM_DMA_IrqHandler+0x50e>
 8006ce4:	4b19      	ldr	r3, [pc, #100]	; (8006d4c <SIMCOM_DMA_IrqHandler+0x530>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a21      	ldr	r2, [pc, #132]	; (8006d70 <SIMCOM_DMA_IrqHandler+0x554>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d01a      	beq.n	8006d24 <SIMCOM_DMA_IrqHandler+0x508>
 8006cee:	4b17      	ldr	r3, [pc, #92]	; (8006d4c <SIMCOM_DMA_IrqHandler+0x530>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a20      	ldr	r2, [pc, #128]	; (8006d74 <SIMCOM_DMA_IrqHandler+0x558>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d012      	beq.n	8006d1e <SIMCOM_DMA_IrqHandler+0x502>
 8006cf8:	4b14      	ldr	r3, [pc, #80]	; (8006d4c <SIMCOM_DMA_IrqHandler+0x530>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a1e      	ldr	r2, [pc, #120]	; (8006d78 <SIMCOM_DMA_IrqHandler+0x55c>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d00a      	beq.n	8006d18 <SIMCOM_DMA_IrqHandler+0x4fc>
 8006d02:	4b12      	ldr	r3, [pc, #72]	; (8006d4c <SIMCOM_DMA_IrqHandler+0x530>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a1d      	ldr	r2, [pc, #116]	; (8006d7c <SIMCOM_DMA_IrqHandler+0x560>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d102      	bne.n	8006d12 <SIMCOM_DMA_IrqHandler+0x4f6>
 8006d0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006d10:	e041      	b.n	8006d96 <SIMCOM_DMA_IrqHandler+0x57a>
 8006d12:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d16:	e03e      	b.n	8006d96 <SIMCOM_DMA_IrqHandler+0x57a>
 8006d18:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006d1c:	e03b      	b.n	8006d96 <SIMCOM_DMA_IrqHandler+0x57a>
 8006d1e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006d22:	e038      	b.n	8006d96 <SIMCOM_DMA_IrqHandler+0x57a>
 8006d24:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006d28:	e035      	b.n	8006d96 <SIMCOM_DMA_IrqHandler+0x57a>
 8006d2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006d2e:	e032      	b.n	8006d96 <SIMCOM_DMA_IrqHandler+0x57a>
 8006d30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006d34:	e02f      	b.n	8006d96 <SIMCOM_DMA_IrqHandler+0x57a>
 8006d36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006d3a:	e02c      	b.n	8006d96 <SIMCOM_DMA_IrqHandler+0x57a>
 8006d3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006d40:	e029      	b.n	8006d96 <SIMCOM_DMA_IrqHandler+0x57a>
 8006d42:	2320      	movs	r3, #32
 8006d44:	e027      	b.n	8006d96 <SIMCOM_DMA_IrqHandler+0x57a>
 8006d46:	bf00      	nop
 8006d48:	40026000 	.word	0x40026000
 8006d4c:	2000030c 	.word	0x2000030c
 8006d50:	40026010 	.word	0x40026010
 8006d54:	40026410 	.word	0x40026410
 8006d58:	40026070 	.word	0x40026070
 8006d5c:	40026470 	.word	0x40026470
 8006d60:	40026028 	.word	0x40026028
 8006d64:	40026428 	.word	0x40026428
 8006d68:	40026088 	.word	0x40026088
 8006d6c:	40026488 	.word	0x40026488
 8006d70:	40026040 	.word	0x40026040
 8006d74:	40026440 	.word	0x40026440
 8006d78:	400260a0 	.word	0x400260a0
 8006d7c:	400264a0 	.word	0x400264a0
 8006d80:	40026458 	.word	0x40026458
 8006d84:	40026400 	.word	0x40026400
 8006d88:	400260b8 	.word	0x400260b8
 8006d8c:	2320      	movs	r3, #32
 8006d8e:	e002      	b.n	8006d96 <SIMCOM_DMA_IrqHandler+0x57a>
 8006d90:	2320      	movs	r3, #32
 8006d92:	e000      	b.n	8006d96 <SIMCOM_DMA_IrqHandler+0x57a>
 8006d94:	2320      	movs	r3, #32
 8006d96:	4a9b      	ldr	r2, [pc, #620]	; (8007004 <SIMCOM_DMA_IrqHandler+0x7e8>)
 8006d98:	6093      	str	r3, [r2, #8]
 8006d9a:	e0c6      	b.n	8006f2a <SIMCOM_DMA_IrqHandler+0x70e>
 8006d9c:	4b9a      	ldr	r3, [pc, #616]	; (8007008 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	461a      	mov	r2, r3
 8006da2:	4b9a      	ldr	r3, [pc, #616]	; (800700c <SIMCOM_DMA_IrqHandler+0x7f0>)
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d960      	bls.n	8006e6a <SIMCOM_DMA_IrqHandler+0x64e>
 8006da8:	4b97      	ldr	r3, [pc, #604]	; (8007008 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a98      	ldr	r2, [pc, #608]	; (8007010 <SIMCOM_DMA_IrqHandler+0x7f4>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d057      	beq.n	8006e62 <SIMCOM_DMA_IrqHandler+0x646>
 8006db2:	4b95      	ldr	r3, [pc, #596]	; (8007008 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a97      	ldr	r2, [pc, #604]	; (8007014 <SIMCOM_DMA_IrqHandler+0x7f8>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d050      	beq.n	8006e5e <SIMCOM_DMA_IrqHandler+0x642>
 8006dbc:	4b92      	ldr	r3, [pc, #584]	; (8007008 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a95      	ldr	r2, [pc, #596]	; (8007018 <SIMCOM_DMA_IrqHandler+0x7fc>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d049      	beq.n	8006e5a <SIMCOM_DMA_IrqHandler+0x63e>
 8006dc6:	4b90      	ldr	r3, [pc, #576]	; (8007008 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a94      	ldr	r2, [pc, #592]	; (800701c <SIMCOM_DMA_IrqHandler+0x800>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d042      	beq.n	8006e56 <SIMCOM_DMA_IrqHandler+0x63a>
 8006dd0:	4b8d      	ldr	r3, [pc, #564]	; (8007008 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a92      	ldr	r2, [pc, #584]	; (8007020 <SIMCOM_DMA_IrqHandler+0x804>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d03a      	beq.n	8006e50 <SIMCOM_DMA_IrqHandler+0x634>
 8006dda:	4b8b      	ldr	r3, [pc, #556]	; (8007008 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a91      	ldr	r2, [pc, #580]	; (8007024 <SIMCOM_DMA_IrqHandler+0x808>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d032      	beq.n	8006e4a <SIMCOM_DMA_IrqHandler+0x62e>
 8006de4:	4b88      	ldr	r3, [pc, #544]	; (8007008 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a8f      	ldr	r2, [pc, #572]	; (8007028 <SIMCOM_DMA_IrqHandler+0x80c>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d02a      	beq.n	8006e44 <SIMCOM_DMA_IrqHandler+0x628>
 8006dee:	4b86      	ldr	r3, [pc, #536]	; (8007008 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a8e      	ldr	r2, [pc, #568]	; (800702c <SIMCOM_DMA_IrqHandler+0x810>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d022      	beq.n	8006e3e <SIMCOM_DMA_IrqHandler+0x622>
 8006df8:	4b83      	ldr	r3, [pc, #524]	; (8007008 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a8c      	ldr	r2, [pc, #560]	; (8007030 <SIMCOM_DMA_IrqHandler+0x814>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d01a      	beq.n	8006e38 <SIMCOM_DMA_IrqHandler+0x61c>
 8006e02:	4b81      	ldr	r3, [pc, #516]	; (8007008 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a8b      	ldr	r2, [pc, #556]	; (8007034 <SIMCOM_DMA_IrqHandler+0x818>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d012      	beq.n	8006e32 <SIMCOM_DMA_IrqHandler+0x616>
 8006e0c:	4b7e      	ldr	r3, [pc, #504]	; (8007008 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a89      	ldr	r2, [pc, #548]	; (8007038 <SIMCOM_DMA_IrqHandler+0x81c>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d00a      	beq.n	8006e2c <SIMCOM_DMA_IrqHandler+0x610>
 8006e16:	4b7c      	ldr	r3, [pc, #496]	; (8007008 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a88      	ldr	r2, [pc, #544]	; (800703c <SIMCOM_DMA_IrqHandler+0x820>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d102      	bne.n	8006e26 <SIMCOM_DMA_IrqHandler+0x60a>
 8006e20:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006e24:	e01e      	b.n	8006e64 <SIMCOM_DMA_IrqHandler+0x648>
 8006e26:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e2a:	e01b      	b.n	8006e64 <SIMCOM_DMA_IrqHandler+0x648>
 8006e2c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006e30:	e018      	b.n	8006e64 <SIMCOM_DMA_IrqHandler+0x648>
 8006e32:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006e36:	e015      	b.n	8006e64 <SIMCOM_DMA_IrqHandler+0x648>
 8006e38:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006e3c:	e012      	b.n	8006e64 <SIMCOM_DMA_IrqHandler+0x648>
 8006e3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e42:	e00f      	b.n	8006e64 <SIMCOM_DMA_IrqHandler+0x648>
 8006e44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e48:	e00c      	b.n	8006e64 <SIMCOM_DMA_IrqHandler+0x648>
 8006e4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e4e:	e009      	b.n	8006e64 <SIMCOM_DMA_IrqHandler+0x648>
 8006e50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e54:	e006      	b.n	8006e64 <SIMCOM_DMA_IrqHandler+0x648>
 8006e56:	2320      	movs	r3, #32
 8006e58:	e004      	b.n	8006e64 <SIMCOM_DMA_IrqHandler+0x648>
 8006e5a:	2320      	movs	r3, #32
 8006e5c:	e002      	b.n	8006e64 <SIMCOM_DMA_IrqHandler+0x648>
 8006e5e:	2320      	movs	r3, #32
 8006e60:	e000      	b.n	8006e64 <SIMCOM_DMA_IrqHandler+0x648>
 8006e62:	2320      	movs	r3, #32
 8006e64:	4a76      	ldr	r2, [pc, #472]	; (8007040 <SIMCOM_DMA_IrqHandler+0x824>)
 8006e66:	60d3      	str	r3, [r2, #12]
 8006e68:	e05f      	b.n	8006f2a <SIMCOM_DMA_IrqHandler+0x70e>
 8006e6a:	4b67      	ldr	r3, [pc, #412]	; (8007008 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a68      	ldr	r2, [pc, #416]	; (8007010 <SIMCOM_DMA_IrqHandler+0x7f4>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d057      	beq.n	8006f24 <SIMCOM_DMA_IrqHandler+0x708>
 8006e74:	4b64      	ldr	r3, [pc, #400]	; (8007008 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a66      	ldr	r2, [pc, #408]	; (8007014 <SIMCOM_DMA_IrqHandler+0x7f8>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d050      	beq.n	8006f20 <SIMCOM_DMA_IrqHandler+0x704>
 8006e7e:	4b62      	ldr	r3, [pc, #392]	; (8007008 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a65      	ldr	r2, [pc, #404]	; (8007018 <SIMCOM_DMA_IrqHandler+0x7fc>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d049      	beq.n	8006f1c <SIMCOM_DMA_IrqHandler+0x700>
 8006e88:	4b5f      	ldr	r3, [pc, #380]	; (8007008 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a63      	ldr	r2, [pc, #396]	; (800701c <SIMCOM_DMA_IrqHandler+0x800>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d042      	beq.n	8006f18 <SIMCOM_DMA_IrqHandler+0x6fc>
 8006e92:	4b5d      	ldr	r3, [pc, #372]	; (8007008 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a62      	ldr	r2, [pc, #392]	; (8007020 <SIMCOM_DMA_IrqHandler+0x804>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d03a      	beq.n	8006f12 <SIMCOM_DMA_IrqHandler+0x6f6>
 8006e9c:	4b5a      	ldr	r3, [pc, #360]	; (8007008 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a60      	ldr	r2, [pc, #384]	; (8007024 <SIMCOM_DMA_IrqHandler+0x808>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d032      	beq.n	8006f0c <SIMCOM_DMA_IrqHandler+0x6f0>
 8006ea6:	4b58      	ldr	r3, [pc, #352]	; (8007008 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a5f      	ldr	r2, [pc, #380]	; (8007028 <SIMCOM_DMA_IrqHandler+0x80c>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d02a      	beq.n	8006f06 <SIMCOM_DMA_IrqHandler+0x6ea>
 8006eb0:	4b55      	ldr	r3, [pc, #340]	; (8007008 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a5d      	ldr	r2, [pc, #372]	; (800702c <SIMCOM_DMA_IrqHandler+0x810>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d022      	beq.n	8006f00 <SIMCOM_DMA_IrqHandler+0x6e4>
 8006eba:	4b53      	ldr	r3, [pc, #332]	; (8007008 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a5c      	ldr	r2, [pc, #368]	; (8007030 <SIMCOM_DMA_IrqHandler+0x814>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d01a      	beq.n	8006efa <SIMCOM_DMA_IrqHandler+0x6de>
 8006ec4:	4b50      	ldr	r3, [pc, #320]	; (8007008 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a5a      	ldr	r2, [pc, #360]	; (8007034 <SIMCOM_DMA_IrqHandler+0x818>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d012      	beq.n	8006ef4 <SIMCOM_DMA_IrqHandler+0x6d8>
 8006ece:	4b4e      	ldr	r3, [pc, #312]	; (8007008 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a59      	ldr	r2, [pc, #356]	; (8007038 <SIMCOM_DMA_IrqHandler+0x81c>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d00a      	beq.n	8006eee <SIMCOM_DMA_IrqHandler+0x6d2>
 8006ed8:	4b4b      	ldr	r3, [pc, #300]	; (8007008 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a57      	ldr	r2, [pc, #348]	; (800703c <SIMCOM_DMA_IrqHandler+0x820>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d102      	bne.n	8006ee8 <SIMCOM_DMA_IrqHandler+0x6cc>
 8006ee2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006ee6:	e01e      	b.n	8006f26 <SIMCOM_DMA_IrqHandler+0x70a>
 8006ee8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006eec:	e01b      	b.n	8006f26 <SIMCOM_DMA_IrqHandler+0x70a>
 8006eee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006ef2:	e018      	b.n	8006f26 <SIMCOM_DMA_IrqHandler+0x70a>
 8006ef4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006ef8:	e015      	b.n	8006f26 <SIMCOM_DMA_IrqHandler+0x70a>
 8006efa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006efe:	e012      	b.n	8006f26 <SIMCOM_DMA_IrqHandler+0x70a>
 8006f00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f04:	e00f      	b.n	8006f26 <SIMCOM_DMA_IrqHandler+0x70a>
 8006f06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f0a:	e00c      	b.n	8006f26 <SIMCOM_DMA_IrqHandler+0x70a>
 8006f0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f10:	e009      	b.n	8006f26 <SIMCOM_DMA_IrqHandler+0x70a>
 8006f12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f16:	e006      	b.n	8006f26 <SIMCOM_DMA_IrqHandler+0x70a>
 8006f18:	2320      	movs	r3, #32
 8006f1a:	e004      	b.n	8006f26 <SIMCOM_DMA_IrqHandler+0x70a>
 8006f1c:	2320      	movs	r3, #32
 8006f1e:	e002      	b.n	8006f26 <SIMCOM_DMA_IrqHandler+0x70a>
 8006f20:	2320      	movs	r3, #32
 8006f22:	e000      	b.n	8006f26 <SIMCOM_DMA_IrqHandler+0x70a>
 8006f24:	2320      	movs	r3, #32
 8006f26:	4a46      	ldr	r2, [pc, #280]	; (8007040 <SIMCOM_DMA_IrqHandler+0x824>)
 8006f28:	6093      	str	r3, [r2, #8]
        SIMCOM_Check_Buffer();
 8006f2a:	f000 fd93 	bl	8007a54 <SIMCOM_Check_Buffer>
}
 8006f2e:	f000 bd45 	b.w	80079bc <SIMCOM_DMA_IrqHandler+0x11a0>
        __HAL_DMA_CLEAR_FLAG(&hdma_usart1_rx, __HAL_DMA_GET_TE_FLAG_INDEX(&hdma_usart1_rx));
 8006f32:	4b35      	ldr	r3, [pc, #212]	; (8007008 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	461a      	mov	r2, r3
 8006f38:	4b42      	ldr	r3, [pc, #264]	; (8007044 <SIMCOM_DMA_IrqHandler+0x828>)
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	f240 8084 	bls.w	8007048 <SIMCOM_DMA_IrqHandler+0x82c>
 8006f40:	4b31      	ldr	r3, [pc, #196]	; (8007008 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a32      	ldr	r2, [pc, #200]	; (8007010 <SIMCOM_DMA_IrqHandler+0x7f4>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d057      	beq.n	8006ffa <SIMCOM_DMA_IrqHandler+0x7de>
 8006f4a:	4b2f      	ldr	r3, [pc, #188]	; (8007008 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a31      	ldr	r2, [pc, #196]	; (8007014 <SIMCOM_DMA_IrqHandler+0x7f8>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d050      	beq.n	8006ff6 <SIMCOM_DMA_IrqHandler+0x7da>
 8006f54:	4b2c      	ldr	r3, [pc, #176]	; (8007008 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a2f      	ldr	r2, [pc, #188]	; (8007018 <SIMCOM_DMA_IrqHandler+0x7fc>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d049      	beq.n	8006ff2 <SIMCOM_DMA_IrqHandler+0x7d6>
 8006f5e:	4b2a      	ldr	r3, [pc, #168]	; (8007008 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a2e      	ldr	r2, [pc, #184]	; (800701c <SIMCOM_DMA_IrqHandler+0x800>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d042      	beq.n	8006fee <SIMCOM_DMA_IrqHandler+0x7d2>
 8006f68:	4b27      	ldr	r3, [pc, #156]	; (8007008 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a2c      	ldr	r2, [pc, #176]	; (8007020 <SIMCOM_DMA_IrqHandler+0x804>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d03a      	beq.n	8006fe8 <SIMCOM_DMA_IrqHandler+0x7cc>
 8006f72:	4b25      	ldr	r3, [pc, #148]	; (8007008 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a2b      	ldr	r2, [pc, #172]	; (8007024 <SIMCOM_DMA_IrqHandler+0x808>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d032      	beq.n	8006fe2 <SIMCOM_DMA_IrqHandler+0x7c6>
 8006f7c:	4b22      	ldr	r3, [pc, #136]	; (8007008 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a29      	ldr	r2, [pc, #164]	; (8007028 <SIMCOM_DMA_IrqHandler+0x80c>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d02a      	beq.n	8006fdc <SIMCOM_DMA_IrqHandler+0x7c0>
 8006f86:	4b20      	ldr	r3, [pc, #128]	; (8007008 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a28      	ldr	r2, [pc, #160]	; (800702c <SIMCOM_DMA_IrqHandler+0x810>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d022      	beq.n	8006fd6 <SIMCOM_DMA_IrqHandler+0x7ba>
 8006f90:	4b1d      	ldr	r3, [pc, #116]	; (8007008 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a26      	ldr	r2, [pc, #152]	; (8007030 <SIMCOM_DMA_IrqHandler+0x814>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d01a      	beq.n	8006fd0 <SIMCOM_DMA_IrqHandler+0x7b4>
 8006f9a:	4b1b      	ldr	r3, [pc, #108]	; (8007008 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a25      	ldr	r2, [pc, #148]	; (8007034 <SIMCOM_DMA_IrqHandler+0x818>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d012      	beq.n	8006fca <SIMCOM_DMA_IrqHandler+0x7ae>
 8006fa4:	4b18      	ldr	r3, [pc, #96]	; (8007008 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a23      	ldr	r2, [pc, #140]	; (8007038 <SIMCOM_DMA_IrqHandler+0x81c>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d00a      	beq.n	8006fc4 <SIMCOM_DMA_IrqHandler+0x7a8>
 8006fae:	4b16      	ldr	r3, [pc, #88]	; (8007008 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a22      	ldr	r2, [pc, #136]	; (800703c <SIMCOM_DMA_IrqHandler+0x820>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d102      	bne.n	8006fbe <SIMCOM_DMA_IrqHandler+0x7a2>
 8006fb8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006fbc:	e01e      	b.n	8006ffc <SIMCOM_DMA_IrqHandler+0x7e0>
 8006fbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006fc2:	e01b      	b.n	8006ffc <SIMCOM_DMA_IrqHandler+0x7e0>
 8006fc4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006fc8:	e018      	b.n	8006ffc <SIMCOM_DMA_IrqHandler+0x7e0>
 8006fca:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006fce:	e015      	b.n	8006ffc <SIMCOM_DMA_IrqHandler+0x7e0>
 8006fd0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006fd4:	e012      	b.n	8006ffc <SIMCOM_DMA_IrqHandler+0x7e0>
 8006fd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fda:	e00f      	b.n	8006ffc <SIMCOM_DMA_IrqHandler+0x7e0>
 8006fdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fe0:	e00c      	b.n	8006ffc <SIMCOM_DMA_IrqHandler+0x7e0>
 8006fe2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fe6:	e009      	b.n	8006ffc <SIMCOM_DMA_IrqHandler+0x7e0>
 8006fe8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fec:	e006      	b.n	8006ffc <SIMCOM_DMA_IrqHandler+0x7e0>
 8006fee:	2308      	movs	r3, #8
 8006ff0:	e004      	b.n	8006ffc <SIMCOM_DMA_IrqHandler+0x7e0>
 8006ff2:	2308      	movs	r3, #8
 8006ff4:	e002      	b.n	8006ffc <SIMCOM_DMA_IrqHandler+0x7e0>
 8006ff6:	2308      	movs	r3, #8
 8006ff8:	e000      	b.n	8006ffc <SIMCOM_DMA_IrqHandler+0x7e0>
 8006ffa:	2308      	movs	r3, #8
 8006ffc:	4a01      	ldr	r2, [pc, #4]	; (8007004 <SIMCOM_DMA_IrqHandler+0x7e8>)
 8006ffe:	60d3      	str	r3, [r2, #12]
 8007000:	e173      	b.n	80072ea <SIMCOM_DMA_IrqHandler+0xace>
 8007002:	bf00      	nop
 8007004:	40026400 	.word	0x40026400
 8007008:	2000030c 	.word	0x2000030c
 800700c:	40026058 	.word	0x40026058
 8007010:	40026010 	.word	0x40026010
 8007014:	40026410 	.word	0x40026410
 8007018:	40026070 	.word	0x40026070
 800701c:	40026470 	.word	0x40026470
 8007020:	40026028 	.word	0x40026028
 8007024:	40026428 	.word	0x40026428
 8007028:	40026088 	.word	0x40026088
 800702c:	40026488 	.word	0x40026488
 8007030:	40026040 	.word	0x40026040
 8007034:	40026440 	.word	0x40026440
 8007038:	400260a0 	.word	0x400260a0
 800703c:	400264a0 	.word	0x400264a0
 8007040:	40026000 	.word	0x40026000
 8007044:	40026458 	.word	0x40026458
 8007048:	4b95      	ldr	r3, [pc, #596]	; (80072a0 <SIMCOM_DMA_IrqHandler+0xa84>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	461a      	mov	r2, r3
 800704e:	4b95      	ldr	r3, [pc, #596]	; (80072a4 <SIMCOM_DMA_IrqHandler+0xa88>)
 8007050:	429a      	cmp	r2, r3
 8007052:	d960      	bls.n	8007116 <SIMCOM_DMA_IrqHandler+0x8fa>
 8007054:	4b92      	ldr	r3, [pc, #584]	; (80072a0 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a93      	ldr	r2, [pc, #588]	; (80072a8 <SIMCOM_DMA_IrqHandler+0xa8c>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d057      	beq.n	800710e <SIMCOM_DMA_IrqHandler+0x8f2>
 800705e:	4b90      	ldr	r3, [pc, #576]	; (80072a0 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a92      	ldr	r2, [pc, #584]	; (80072ac <SIMCOM_DMA_IrqHandler+0xa90>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d050      	beq.n	800710a <SIMCOM_DMA_IrqHandler+0x8ee>
 8007068:	4b8d      	ldr	r3, [pc, #564]	; (80072a0 <SIMCOM_DMA_IrqHandler+0xa84>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a90      	ldr	r2, [pc, #576]	; (80072b0 <SIMCOM_DMA_IrqHandler+0xa94>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d049      	beq.n	8007106 <SIMCOM_DMA_IrqHandler+0x8ea>
 8007072:	4b8b      	ldr	r3, [pc, #556]	; (80072a0 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a8f      	ldr	r2, [pc, #572]	; (80072b4 <SIMCOM_DMA_IrqHandler+0xa98>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d042      	beq.n	8007102 <SIMCOM_DMA_IrqHandler+0x8e6>
 800707c:	4b88      	ldr	r3, [pc, #544]	; (80072a0 <SIMCOM_DMA_IrqHandler+0xa84>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a8d      	ldr	r2, [pc, #564]	; (80072b8 <SIMCOM_DMA_IrqHandler+0xa9c>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d03a      	beq.n	80070fc <SIMCOM_DMA_IrqHandler+0x8e0>
 8007086:	4b86      	ldr	r3, [pc, #536]	; (80072a0 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a8c      	ldr	r2, [pc, #560]	; (80072bc <SIMCOM_DMA_IrqHandler+0xaa0>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d032      	beq.n	80070f6 <SIMCOM_DMA_IrqHandler+0x8da>
 8007090:	4b83      	ldr	r3, [pc, #524]	; (80072a0 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a8a      	ldr	r2, [pc, #552]	; (80072c0 <SIMCOM_DMA_IrqHandler+0xaa4>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d02a      	beq.n	80070f0 <SIMCOM_DMA_IrqHandler+0x8d4>
 800709a:	4b81      	ldr	r3, [pc, #516]	; (80072a0 <SIMCOM_DMA_IrqHandler+0xa84>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a89      	ldr	r2, [pc, #548]	; (80072c4 <SIMCOM_DMA_IrqHandler+0xaa8>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d022      	beq.n	80070ea <SIMCOM_DMA_IrqHandler+0x8ce>
 80070a4:	4b7e      	ldr	r3, [pc, #504]	; (80072a0 <SIMCOM_DMA_IrqHandler+0xa84>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a87      	ldr	r2, [pc, #540]	; (80072c8 <SIMCOM_DMA_IrqHandler+0xaac>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d01a      	beq.n	80070e4 <SIMCOM_DMA_IrqHandler+0x8c8>
 80070ae:	4b7c      	ldr	r3, [pc, #496]	; (80072a0 <SIMCOM_DMA_IrqHandler+0xa84>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a86      	ldr	r2, [pc, #536]	; (80072cc <SIMCOM_DMA_IrqHandler+0xab0>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d012      	beq.n	80070de <SIMCOM_DMA_IrqHandler+0x8c2>
 80070b8:	4b79      	ldr	r3, [pc, #484]	; (80072a0 <SIMCOM_DMA_IrqHandler+0xa84>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a84      	ldr	r2, [pc, #528]	; (80072d0 <SIMCOM_DMA_IrqHandler+0xab4>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d00a      	beq.n	80070d8 <SIMCOM_DMA_IrqHandler+0x8bc>
 80070c2:	4b77      	ldr	r3, [pc, #476]	; (80072a0 <SIMCOM_DMA_IrqHandler+0xa84>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a83      	ldr	r2, [pc, #524]	; (80072d4 <SIMCOM_DMA_IrqHandler+0xab8>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d102      	bne.n	80070d2 <SIMCOM_DMA_IrqHandler+0x8b6>
 80070cc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80070d0:	e01e      	b.n	8007110 <SIMCOM_DMA_IrqHandler+0x8f4>
 80070d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80070d6:	e01b      	b.n	8007110 <SIMCOM_DMA_IrqHandler+0x8f4>
 80070d8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80070dc:	e018      	b.n	8007110 <SIMCOM_DMA_IrqHandler+0x8f4>
 80070de:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80070e2:	e015      	b.n	8007110 <SIMCOM_DMA_IrqHandler+0x8f4>
 80070e4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80070e8:	e012      	b.n	8007110 <SIMCOM_DMA_IrqHandler+0x8f4>
 80070ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070ee:	e00f      	b.n	8007110 <SIMCOM_DMA_IrqHandler+0x8f4>
 80070f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070f4:	e00c      	b.n	8007110 <SIMCOM_DMA_IrqHandler+0x8f4>
 80070f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070fa:	e009      	b.n	8007110 <SIMCOM_DMA_IrqHandler+0x8f4>
 80070fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007100:	e006      	b.n	8007110 <SIMCOM_DMA_IrqHandler+0x8f4>
 8007102:	2308      	movs	r3, #8
 8007104:	e004      	b.n	8007110 <SIMCOM_DMA_IrqHandler+0x8f4>
 8007106:	2308      	movs	r3, #8
 8007108:	e002      	b.n	8007110 <SIMCOM_DMA_IrqHandler+0x8f4>
 800710a:	2308      	movs	r3, #8
 800710c:	e000      	b.n	8007110 <SIMCOM_DMA_IrqHandler+0x8f4>
 800710e:	2308      	movs	r3, #8
 8007110:	4a71      	ldr	r2, [pc, #452]	; (80072d8 <SIMCOM_DMA_IrqHandler+0xabc>)
 8007112:	6093      	str	r3, [r2, #8]
 8007114:	e0e9      	b.n	80072ea <SIMCOM_DMA_IrqHandler+0xace>
 8007116:	4b62      	ldr	r3, [pc, #392]	; (80072a0 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	461a      	mov	r2, r3
 800711c:	4b6f      	ldr	r3, [pc, #444]	; (80072dc <SIMCOM_DMA_IrqHandler+0xac0>)
 800711e:	429a      	cmp	r2, r3
 8007120:	d960      	bls.n	80071e4 <SIMCOM_DMA_IrqHandler+0x9c8>
 8007122:	4b5f      	ldr	r3, [pc, #380]	; (80072a0 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a60      	ldr	r2, [pc, #384]	; (80072a8 <SIMCOM_DMA_IrqHandler+0xa8c>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d057      	beq.n	80071dc <SIMCOM_DMA_IrqHandler+0x9c0>
 800712c:	4b5c      	ldr	r3, [pc, #368]	; (80072a0 <SIMCOM_DMA_IrqHandler+0xa84>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a5e      	ldr	r2, [pc, #376]	; (80072ac <SIMCOM_DMA_IrqHandler+0xa90>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d050      	beq.n	80071d8 <SIMCOM_DMA_IrqHandler+0x9bc>
 8007136:	4b5a      	ldr	r3, [pc, #360]	; (80072a0 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a5d      	ldr	r2, [pc, #372]	; (80072b0 <SIMCOM_DMA_IrqHandler+0xa94>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d049      	beq.n	80071d4 <SIMCOM_DMA_IrqHandler+0x9b8>
 8007140:	4b57      	ldr	r3, [pc, #348]	; (80072a0 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a5b      	ldr	r2, [pc, #364]	; (80072b4 <SIMCOM_DMA_IrqHandler+0xa98>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d042      	beq.n	80071d0 <SIMCOM_DMA_IrqHandler+0x9b4>
 800714a:	4b55      	ldr	r3, [pc, #340]	; (80072a0 <SIMCOM_DMA_IrqHandler+0xa84>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a5a      	ldr	r2, [pc, #360]	; (80072b8 <SIMCOM_DMA_IrqHandler+0xa9c>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d03a      	beq.n	80071ca <SIMCOM_DMA_IrqHandler+0x9ae>
 8007154:	4b52      	ldr	r3, [pc, #328]	; (80072a0 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a58      	ldr	r2, [pc, #352]	; (80072bc <SIMCOM_DMA_IrqHandler+0xaa0>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d032      	beq.n	80071c4 <SIMCOM_DMA_IrqHandler+0x9a8>
 800715e:	4b50      	ldr	r3, [pc, #320]	; (80072a0 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a57      	ldr	r2, [pc, #348]	; (80072c0 <SIMCOM_DMA_IrqHandler+0xaa4>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d02a      	beq.n	80071be <SIMCOM_DMA_IrqHandler+0x9a2>
 8007168:	4b4d      	ldr	r3, [pc, #308]	; (80072a0 <SIMCOM_DMA_IrqHandler+0xa84>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a55      	ldr	r2, [pc, #340]	; (80072c4 <SIMCOM_DMA_IrqHandler+0xaa8>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d022      	beq.n	80071b8 <SIMCOM_DMA_IrqHandler+0x99c>
 8007172:	4b4b      	ldr	r3, [pc, #300]	; (80072a0 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a54      	ldr	r2, [pc, #336]	; (80072c8 <SIMCOM_DMA_IrqHandler+0xaac>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d01a      	beq.n	80071b2 <SIMCOM_DMA_IrqHandler+0x996>
 800717c:	4b48      	ldr	r3, [pc, #288]	; (80072a0 <SIMCOM_DMA_IrqHandler+0xa84>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a52      	ldr	r2, [pc, #328]	; (80072cc <SIMCOM_DMA_IrqHandler+0xab0>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d012      	beq.n	80071ac <SIMCOM_DMA_IrqHandler+0x990>
 8007186:	4b46      	ldr	r3, [pc, #280]	; (80072a0 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a51      	ldr	r2, [pc, #324]	; (80072d0 <SIMCOM_DMA_IrqHandler+0xab4>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d00a      	beq.n	80071a6 <SIMCOM_DMA_IrqHandler+0x98a>
 8007190:	4b43      	ldr	r3, [pc, #268]	; (80072a0 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a4f      	ldr	r2, [pc, #316]	; (80072d4 <SIMCOM_DMA_IrqHandler+0xab8>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d102      	bne.n	80071a0 <SIMCOM_DMA_IrqHandler+0x984>
 800719a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800719e:	e01e      	b.n	80071de <SIMCOM_DMA_IrqHandler+0x9c2>
 80071a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80071a4:	e01b      	b.n	80071de <SIMCOM_DMA_IrqHandler+0x9c2>
 80071a6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80071aa:	e018      	b.n	80071de <SIMCOM_DMA_IrqHandler+0x9c2>
 80071ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80071b0:	e015      	b.n	80071de <SIMCOM_DMA_IrqHandler+0x9c2>
 80071b2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80071b6:	e012      	b.n	80071de <SIMCOM_DMA_IrqHandler+0x9c2>
 80071b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071bc:	e00f      	b.n	80071de <SIMCOM_DMA_IrqHandler+0x9c2>
 80071be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071c2:	e00c      	b.n	80071de <SIMCOM_DMA_IrqHandler+0x9c2>
 80071c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071c8:	e009      	b.n	80071de <SIMCOM_DMA_IrqHandler+0x9c2>
 80071ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071ce:	e006      	b.n	80071de <SIMCOM_DMA_IrqHandler+0x9c2>
 80071d0:	2308      	movs	r3, #8
 80071d2:	e004      	b.n	80071de <SIMCOM_DMA_IrqHandler+0x9c2>
 80071d4:	2308      	movs	r3, #8
 80071d6:	e002      	b.n	80071de <SIMCOM_DMA_IrqHandler+0x9c2>
 80071d8:	2308      	movs	r3, #8
 80071da:	e000      	b.n	80071de <SIMCOM_DMA_IrqHandler+0x9c2>
 80071dc:	2308      	movs	r3, #8
 80071de:	4a40      	ldr	r2, [pc, #256]	; (80072e0 <SIMCOM_DMA_IrqHandler+0xac4>)
 80071e0:	60d3      	str	r3, [r2, #12]
 80071e2:	e082      	b.n	80072ea <SIMCOM_DMA_IrqHandler+0xace>
 80071e4:	4b2e      	ldr	r3, [pc, #184]	; (80072a0 <SIMCOM_DMA_IrqHandler+0xa84>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a2f      	ldr	r2, [pc, #188]	; (80072a8 <SIMCOM_DMA_IrqHandler+0xa8c>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d07a      	beq.n	80072e4 <SIMCOM_DMA_IrqHandler+0xac8>
 80071ee:	4b2c      	ldr	r3, [pc, #176]	; (80072a0 <SIMCOM_DMA_IrqHandler+0xa84>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a2e      	ldr	r2, [pc, #184]	; (80072ac <SIMCOM_DMA_IrqHandler+0xa90>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d050      	beq.n	800729a <SIMCOM_DMA_IrqHandler+0xa7e>
 80071f8:	4b29      	ldr	r3, [pc, #164]	; (80072a0 <SIMCOM_DMA_IrqHandler+0xa84>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a2c      	ldr	r2, [pc, #176]	; (80072b0 <SIMCOM_DMA_IrqHandler+0xa94>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d049      	beq.n	8007296 <SIMCOM_DMA_IrqHandler+0xa7a>
 8007202:	4b27      	ldr	r3, [pc, #156]	; (80072a0 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a2b      	ldr	r2, [pc, #172]	; (80072b4 <SIMCOM_DMA_IrqHandler+0xa98>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d042      	beq.n	8007292 <SIMCOM_DMA_IrqHandler+0xa76>
 800720c:	4b24      	ldr	r3, [pc, #144]	; (80072a0 <SIMCOM_DMA_IrqHandler+0xa84>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a29      	ldr	r2, [pc, #164]	; (80072b8 <SIMCOM_DMA_IrqHandler+0xa9c>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d03a      	beq.n	800728c <SIMCOM_DMA_IrqHandler+0xa70>
 8007216:	4b22      	ldr	r3, [pc, #136]	; (80072a0 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a28      	ldr	r2, [pc, #160]	; (80072bc <SIMCOM_DMA_IrqHandler+0xaa0>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d032      	beq.n	8007286 <SIMCOM_DMA_IrqHandler+0xa6a>
 8007220:	4b1f      	ldr	r3, [pc, #124]	; (80072a0 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a26      	ldr	r2, [pc, #152]	; (80072c0 <SIMCOM_DMA_IrqHandler+0xaa4>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d02a      	beq.n	8007280 <SIMCOM_DMA_IrqHandler+0xa64>
 800722a:	4b1d      	ldr	r3, [pc, #116]	; (80072a0 <SIMCOM_DMA_IrqHandler+0xa84>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a25      	ldr	r2, [pc, #148]	; (80072c4 <SIMCOM_DMA_IrqHandler+0xaa8>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d022      	beq.n	800727a <SIMCOM_DMA_IrqHandler+0xa5e>
 8007234:	4b1a      	ldr	r3, [pc, #104]	; (80072a0 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a23      	ldr	r2, [pc, #140]	; (80072c8 <SIMCOM_DMA_IrqHandler+0xaac>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d01a      	beq.n	8007274 <SIMCOM_DMA_IrqHandler+0xa58>
 800723e:	4b18      	ldr	r3, [pc, #96]	; (80072a0 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a22      	ldr	r2, [pc, #136]	; (80072cc <SIMCOM_DMA_IrqHandler+0xab0>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d012      	beq.n	800726e <SIMCOM_DMA_IrqHandler+0xa52>
 8007248:	4b15      	ldr	r3, [pc, #84]	; (80072a0 <SIMCOM_DMA_IrqHandler+0xa84>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a20      	ldr	r2, [pc, #128]	; (80072d0 <SIMCOM_DMA_IrqHandler+0xab4>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d00a      	beq.n	8007268 <SIMCOM_DMA_IrqHandler+0xa4c>
 8007252:	4b13      	ldr	r3, [pc, #76]	; (80072a0 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a1f      	ldr	r2, [pc, #124]	; (80072d4 <SIMCOM_DMA_IrqHandler+0xab8>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d102      	bne.n	8007262 <SIMCOM_DMA_IrqHandler+0xa46>
 800725c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007260:	e041      	b.n	80072e6 <SIMCOM_DMA_IrqHandler+0xaca>
 8007262:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007266:	e03e      	b.n	80072e6 <SIMCOM_DMA_IrqHandler+0xaca>
 8007268:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800726c:	e03b      	b.n	80072e6 <SIMCOM_DMA_IrqHandler+0xaca>
 800726e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007272:	e038      	b.n	80072e6 <SIMCOM_DMA_IrqHandler+0xaca>
 8007274:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007278:	e035      	b.n	80072e6 <SIMCOM_DMA_IrqHandler+0xaca>
 800727a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800727e:	e032      	b.n	80072e6 <SIMCOM_DMA_IrqHandler+0xaca>
 8007280:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007284:	e02f      	b.n	80072e6 <SIMCOM_DMA_IrqHandler+0xaca>
 8007286:	f44f 7300 	mov.w	r3, #512	; 0x200
 800728a:	e02c      	b.n	80072e6 <SIMCOM_DMA_IrqHandler+0xaca>
 800728c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007290:	e029      	b.n	80072e6 <SIMCOM_DMA_IrqHandler+0xaca>
 8007292:	2308      	movs	r3, #8
 8007294:	e027      	b.n	80072e6 <SIMCOM_DMA_IrqHandler+0xaca>
 8007296:	2308      	movs	r3, #8
 8007298:	e025      	b.n	80072e6 <SIMCOM_DMA_IrqHandler+0xaca>
 800729a:	2308      	movs	r3, #8
 800729c:	e023      	b.n	80072e6 <SIMCOM_DMA_IrqHandler+0xaca>
 800729e:	bf00      	nop
 80072a0:	2000030c 	.word	0x2000030c
 80072a4:	400260b8 	.word	0x400260b8
 80072a8:	40026010 	.word	0x40026010
 80072ac:	40026410 	.word	0x40026410
 80072b0:	40026070 	.word	0x40026070
 80072b4:	40026470 	.word	0x40026470
 80072b8:	40026028 	.word	0x40026028
 80072bc:	40026428 	.word	0x40026428
 80072c0:	40026088 	.word	0x40026088
 80072c4:	40026488 	.word	0x40026488
 80072c8:	40026040 	.word	0x40026040
 80072cc:	40026440 	.word	0x40026440
 80072d0:	400260a0 	.word	0x400260a0
 80072d4:	400264a0 	.word	0x400264a0
 80072d8:	40026400 	.word	0x40026400
 80072dc:	40026058 	.word	0x40026058
 80072e0:	40026000 	.word	0x40026000
 80072e4:	2308      	movs	r3, #8
 80072e6:	4a96      	ldr	r2, [pc, #600]	; (8007540 <SIMCOM_DMA_IrqHandler+0xd24>)
 80072e8:	6093      	str	r3, [r2, #8]
        __HAL_DMA_CLEAR_FLAG(&hdma_usart1_rx, __HAL_DMA_GET_FE_FLAG_INDEX(&hdma_usart1_rx));
 80072ea:	4b96      	ldr	r3, [pc, #600]	; (8007544 <SIMCOM_DMA_IrqHandler+0xd28>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	461a      	mov	r2, r3
 80072f0:	4b95      	ldr	r3, [pc, #596]	; (8007548 <SIMCOM_DMA_IrqHandler+0xd2c>)
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d95c      	bls.n	80073b0 <SIMCOM_DMA_IrqHandler+0xb94>
 80072f6:	4b93      	ldr	r3, [pc, #588]	; (8007544 <SIMCOM_DMA_IrqHandler+0xd28>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a94      	ldr	r2, [pc, #592]	; (800754c <SIMCOM_DMA_IrqHandler+0xd30>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d053      	beq.n	80073a8 <SIMCOM_DMA_IrqHandler+0xb8c>
 8007300:	4b90      	ldr	r3, [pc, #576]	; (8007544 <SIMCOM_DMA_IrqHandler+0xd28>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a92      	ldr	r2, [pc, #584]	; (8007550 <SIMCOM_DMA_IrqHandler+0xd34>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d04c      	beq.n	80073a4 <SIMCOM_DMA_IrqHandler+0xb88>
 800730a:	4b8e      	ldr	r3, [pc, #568]	; (8007544 <SIMCOM_DMA_IrqHandler+0xd28>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a91      	ldr	r2, [pc, #580]	; (8007554 <SIMCOM_DMA_IrqHandler+0xd38>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d045      	beq.n	80073a0 <SIMCOM_DMA_IrqHandler+0xb84>
 8007314:	4b8b      	ldr	r3, [pc, #556]	; (8007544 <SIMCOM_DMA_IrqHandler+0xd28>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a8f      	ldr	r2, [pc, #572]	; (8007558 <SIMCOM_DMA_IrqHandler+0xd3c>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d03e      	beq.n	800739c <SIMCOM_DMA_IrqHandler+0xb80>
 800731e:	4b89      	ldr	r3, [pc, #548]	; (8007544 <SIMCOM_DMA_IrqHandler+0xd28>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a8e      	ldr	r2, [pc, #568]	; (800755c <SIMCOM_DMA_IrqHandler+0xd40>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d037      	beq.n	8007398 <SIMCOM_DMA_IrqHandler+0xb7c>
 8007328:	4b86      	ldr	r3, [pc, #536]	; (8007544 <SIMCOM_DMA_IrqHandler+0xd28>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a8c      	ldr	r2, [pc, #560]	; (8007560 <SIMCOM_DMA_IrqHandler+0xd44>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d030      	beq.n	8007394 <SIMCOM_DMA_IrqHandler+0xb78>
 8007332:	4b84      	ldr	r3, [pc, #528]	; (8007544 <SIMCOM_DMA_IrqHandler+0xd28>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a8b      	ldr	r2, [pc, #556]	; (8007564 <SIMCOM_DMA_IrqHandler+0xd48>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d029      	beq.n	8007390 <SIMCOM_DMA_IrqHandler+0xb74>
 800733c:	4b81      	ldr	r3, [pc, #516]	; (8007544 <SIMCOM_DMA_IrqHandler+0xd28>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a89      	ldr	r2, [pc, #548]	; (8007568 <SIMCOM_DMA_IrqHandler+0xd4c>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d022      	beq.n	800738c <SIMCOM_DMA_IrqHandler+0xb70>
 8007346:	4b7f      	ldr	r3, [pc, #508]	; (8007544 <SIMCOM_DMA_IrqHandler+0xd28>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a88      	ldr	r2, [pc, #544]	; (800756c <SIMCOM_DMA_IrqHandler+0xd50>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d01a      	beq.n	8007386 <SIMCOM_DMA_IrqHandler+0xb6a>
 8007350:	4b7c      	ldr	r3, [pc, #496]	; (8007544 <SIMCOM_DMA_IrqHandler+0xd28>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a86      	ldr	r2, [pc, #536]	; (8007570 <SIMCOM_DMA_IrqHandler+0xd54>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d012      	beq.n	8007380 <SIMCOM_DMA_IrqHandler+0xb64>
 800735a:	4b7a      	ldr	r3, [pc, #488]	; (8007544 <SIMCOM_DMA_IrqHandler+0xd28>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a85      	ldr	r2, [pc, #532]	; (8007574 <SIMCOM_DMA_IrqHandler+0xd58>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d00a      	beq.n	800737a <SIMCOM_DMA_IrqHandler+0xb5e>
 8007364:	4b77      	ldr	r3, [pc, #476]	; (8007544 <SIMCOM_DMA_IrqHandler+0xd28>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a83      	ldr	r2, [pc, #524]	; (8007578 <SIMCOM_DMA_IrqHandler+0xd5c>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d102      	bne.n	8007374 <SIMCOM_DMA_IrqHandler+0xb58>
 800736e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007372:	e01a      	b.n	80073aa <SIMCOM_DMA_IrqHandler+0xb8e>
 8007374:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007378:	e017      	b.n	80073aa <SIMCOM_DMA_IrqHandler+0xb8e>
 800737a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800737e:	e014      	b.n	80073aa <SIMCOM_DMA_IrqHandler+0xb8e>
 8007380:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007384:	e011      	b.n	80073aa <SIMCOM_DMA_IrqHandler+0xb8e>
 8007386:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800738a:	e00e      	b.n	80073aa <SIMCOM_DMA_IrqHandler+0xb8e>
 800738c:	2340      	movs	r3, #64	; 0x40
 800738e:	e00c      	b.n	80073aa <SIMCOM_DMA_IrqHandler+0xb8e>
 8007390:	2340      	movs	r3, #64	; 0x40
 8007392:	e00a      	b.n	80073aa <SIMCOM_DMA_IrqHandler+0xb8e>
 8007394:	2340      	movs	r3, #64	; 0x40
 8007396:	e008      	b.n	80073aa <SIMCOM_DMA_IrqHandler+0xb8e>
 8007398:	2340      	movs	r3, #64	; 0x40
 800739a:	e006      	b.n	80073aa <SIMCOM_DMA_IrqHandler+0xb8e>
 800739c:	2301      	movs	r3, #1
 800739e:	e004      	b.n	80073aa <SIMCOM_DMA_IrqHandler+0xb8e>
 80073a0:	2301      	movs	r3, #1
 80073a2:	e002      	b.n	80073aa <SIMCOM_DMA_IrqHandler+0xb8e>
 80073a4:	2301      	movs	r3, #1
 80073a6:	e000      	b.n	80073aa <SIMCOM_DMA_IrqHandler+0xb8e>
 80073a8:	2301      	movs	r3, #1
 80073aa:	4a74      	ldr	r2, [pc, #464]	; (800757c <SIMCOM_DMA_IrqHandler+0xd60>)
 80073ac:	60d3      	str	r3, [r2, #12]
 80073ae:	e147      	b.n	8007640 <SIMCOM_DMA_IrqHandler+0xe24>
 80073b0:	4b64      	ldr	r3, [pc, #400]	; (8007544 <SIMCOM_DMA_IrqHandler+0xd28>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	461a      	mov	r2, r3
 80073b6:	4b72      	ldr	r3, [pc, #456]	; (8007580 <SIMCOM_DMA_IrqHandler+0xd64>)
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d95c      	bls.n	8007476 <SIMCOM_DMA_IrqHandler+0xc5a>
 80073bc:	4b61      	ldr	r3, [pc, #388]	; (8007544 <SIMCOM_DMA_IrqHandler+0xd28>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a62      	ldr	r2, [pc, #392]	; (800754c <SIMCOM_DMA_IrqHandler+0xd30>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d053      	beq.n	800746e <SIMCOM_DMA_IrqHandler+0xc52>
 80073c6:	4b5f      	ldr	r3, [pc, #380]	; (8007544 <SIMCOM_DMA_IrqHandler+0xd28>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a61      	ldr	r2, [pc, #388]	; (8007550 <SIMCOM_DMA_IrqHandler+0xd34>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d04c      	beq.n	800746a <SIMCOM_DMA_IrqHandler+0xc4e>
 80073d0:	4b5c      	ldr	r3, [pc, #368]	; (8007544 <SIMCOM_DMA_IrqHandler+0xd28>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a5f      	ldr	r2, [pc, #380]	; (8007554 <SIMCOM_DMA_IrqHandler+0xd38>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d045      	beq.n	8007466 <SIMCOM_DMA_IrqHandler+0xc4a>
 80073da:	4b5a      	ldr	r3, [pc, #360]	; (8007544 <SIMCOM_DMA_IrqHandler+0xd28>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a5e      	ldr	r2, [pc, #376]	; (8007558 <SIMCOM_DMA_IrqHandler+0xd3c>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d03e      	beq.n	8007462 <SIMCOM_DMA_IrqHandler+0xc46>
 80073e4:	4b57      	ldr	r3, [pc, #348]	; (8007544 <SIMCOM_DMA_IrqHandler+0xd28>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a5c      	ldr	r2, [pc, #368]	; (800755c <SIMCOM_DMA_IrqHandler+0xd40>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d037      	beq.n	800745e <SIMCOM_DMA_IrqHandler+0xc42>
 80073ee:	4b55      	ldr	r3, [pc, #340]	; (8007544 <SIMCOM_DMA_IrqHandler+0xd28>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a5b      	ldr	r2, [pc, #364]	; (8007560 <SIMCOM_DMA_IrqHandler+0xd44>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d030      	beq.n	800745a <SIMCOM_DMA_IrqHandler+0xc3e>
 80073f8:	4b52      	ldr	r3, [pc, #328]	; (8007544 <SIMCOM_DMA_IrqHandler+0xd28>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a59      	ldr	r2, [pc, #356]	; (8007564 <SIMCOM_DMA_IrqHandler+0xd48>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d029      	beq.n	8007456 <SIMCOM_DMA_IrqHandler+0xc3a>
 8007402:	4b50      	ldr	r3, [pc, #320]	; (8007544 <SIMCOM_DMA_IrqHandler+0xd28>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a58      	ldr	r2, [pc, #352]	; (8007568 <SIMCOM_DMA_IrqHandler+0xd4c>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d022      	beq.n	8007452 <SIMCOM_DMA_IrqHandler+0xc36>
 800740c:	4b4d      	ldr	r3, [pc, #308]	; (8007544 <SIMCOM_DMA_IrqHandler+0xd28>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a56      	ldr	r2, [pc, #344]	; (800756c <SIMCOM_DMA_IrqHandler+0xd50>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d01a      	beq.n	800744c <SIMCOM_DMA_IrqHandler+0xc30>
 8007416:	4b4b      	ldr	r3, [pc, #300]	; (8007544 <SIMCOM_DMA_IrqHandler+0xd28>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a55      	ldr	r2, [pc, #340]	; (8007570 <SIMCOM_DMA_IrqHandler+0xd54>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d012      	beq.n	8007446 <SIMCOM_DMA_IrqHandler+0xc2a>
 8007420:	4b48      	ldr	r3, [pc, #288]	; (8007544 <SIMCOM_DMA_IrqHandler+0xd28>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a53      	ldr	r2, [pc, #332]	; (8007574 <SIMCOM_DMA_IrqHandler+0xd58>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d00a      	beq.n	8007440 <SIMCOM_DMA_IrqHandler+0xc24>
 800742a:	4b46      	ldr	r3, [pc, #280]	; (8007544 <SIMCOM_DMA_IrqHandler+0xd28>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a52      	ldr	r2, [pc, #328]	; (8007578 <SIMCOM_DMA_IrqHandler+0xd5c>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d102      	bne.n	800743a <SIMCOM_DMA_IrqHandler+0xc1e>
 8007434:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007438:	e01a      	b.n	8007470 <SIMCOM_DMA_IrqHandler+0xc54>
 800743a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800743e:	e017      	b.n	8007470 <SIMCOM_DMA_IrqHandler+0xc54>
 8007440:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007444:	e014      	b.n	8007470 <SIMCOM_DMA_IrqHandler+0xc54>
 8007446:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800744a:	e011      	b.n	8007470 <SIMCOM_DMA_IrqHandler+0xc54>
 800744c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007450:	e00e      	b.n	8007470 <SIMCOM_DMA_IrqHandler+0xc54>
 8007452:	2340      	movs	r3, #64	; 0x40
 8007454:	e00c      	b.n	8007470 <SIMCOM_DMA_IrqHandler+0xc54>
 8007456:	2340      	movs	r3, #64	; 0x40
 8007458:	e00a      	b.n	8007470 <SIMCOM_DMA_IrqHandler+0xc54>
 800745a:	2340      	movs	r3, #64	; 0x40
 800745c:	e008      	b.n	8007470 <SIMCOM_DMA_IrqHandler+0xc54>
 800745e:	2340      	movs	r3, #64	; 0x40
 8007460:	e006      	b.n	8007470 <SIMCOM_DMA_IrqHandler+0xc54>
 8007462:	2301      	movs	r3, #1
 8007464:	e004      	b.n	8007470 <SIMCOM_DMA_IrqHandler+0xc54>
 8007466:	2301      	movs	r3, #1
 8007468:	e002      	b.n	8007470 <SIMCOM_DMA_IrqHandler+0xc54>
 800746a:	2301      	movs	r3, #1
 800746c:	e000      	b.n	8007470 <SIMCOM_DMA_IrqHandler+0xc54>
 800746e:	2301      	movs	r3, #1
 8007470:	4a42      	ldr	r2, [pc, #264]	; (800757c <SIMCOM_DMA_IrqHandler+0xd60>)
 8007472:	6093      	str	r3, [r2, #8]
 8007474:	e0e4      	b.n	8007640 <SIMCOM_DMA_IrqHandler+0xe24>
 8007476:	4b33      	ldr	r3, [pc, #204]	; (8007544 <SIMCOM_DMA_IrqHandler+0xd28>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	461a      	mov	r2, r3
 800747c:	4b41      	ldr	r3, [pc, #260]	; (8007584 <SIMCOM_DMA_IrqHandler+0xd68>)
 800747e:	429a      	cmp	r2, r3
 8007480:	f240 8082 	bls.w	8007588 <SIMCOM_DMA_IrqHandler+0xd6c>
 8007484:	4b2f      	ldr	r3, [pc, #188]	; (8007544 <SIMCOM_DMA_IrqHandler+0xd28>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a30      	ldr	r2, [pc, #192]	; (800754c <SIMCOM_DMA_IrqHandler+0xd30>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d053      	beq.n	8007536 <SIMCOM_DMA_IrqHandler+0xd1a>
 800748e:	4b2d      	ldr	r3, [pc, #180]	; (8007544 <SIMCOM_DMA_IrqHandler+0xd28>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a2f      	ldr	r2, [pc, #188]	; (8007550 <SIMCOM_DMA_IrqHandler+0xd34>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d04c      	beq.n	8007532 <SIMCOM_DMA_IrqHandler+0xd16>
 8007498:	4b2a      	ldr	r3, [pc, #168]	; (8007544 <SIMCOM_DMA_IrqHandler+0xd28>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a2d      	ldr	r2, [pc, #180]	; (8007554 <SIMCOM_DMA_IrqHandler+0xd38>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d045      	beq.n	800752e <SIMCOM_DMA_IrqHandler+0xd12>
 80074a2:	4b28      	ldr	r3, [pc, #160]	; (8007544 <SIMCOM_DMA_IrqHandler+0xd28>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a2c      	ldr	r2, [pc, #176]	; (8007558 <SIMCOM_DMA_IrqHandler+0xd3c>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d03e      	beq.n	800752a <SIMCOM_DMA_IrqHandler+0xd0e>
 80074ac:	4b25      	ldr	r3, [pc, #148]	; (8007544 <SIMCOM_DMA_IrqHandler+0xd28>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a2a      	ldr	r2, [pc, #168]	; (800755c <SIMCOM_DMA_IrqHandler+0xd40>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d037      	beq.n	8007526 <SIMCOM_DMA_IrqHandler+0xd0a>
 80074b6:	4b23      	ldr	r3, [pc, #140]	; (8007544 <SIMCOM_DMA_IrqHandler+0xd28>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a29      	ldr	r2, [pc, #164]	; (8007560 <SIMCOM_DMA_IrqHandler+0xd44>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d030      	beq.n	8007522 <SIMCOM_DMA_IrqHandler+0xd06>
 80074c0:	4b20      	ldr	r3, [pc, #128]	; (8007544 <SIMCOM_DMA_IrqHandler+0xd28>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a27      	ldr	r2, [pc, #156]	; (8007564 <SIMCOM_DMA_IrqHandler+0xd48>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d029      	beq.n	800751e <SIMCOM_DMA_IrqHandler+0xd02>
 80074ca:	4b1e      	ldr	r3, [pc, #120]	; (8007544 <SIMCOM_DMA_IrqHandler+0xd28>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a26      	ldr	r2, [pc, #152]	; (8007568 <SIMCOM_DMA_IrqHandler+0xd4c>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d022      	beq.n	800751a <SIMCOM_DMA_IrqHandler+0xcfe>
 80074d4:	4b1b      	ldr	r3, [pc, #108]	; (8007544 <SIMCOM_DMA_IrqHandler+0xd28>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a24      	ldr	r2, [pc, #144]	; (800756c <SIMCOM_DMA_IrqHandler+0xd50>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d01a      	beq.n	8007514 <SIMCOM_DMA_IrqHandler+0xcf8>
 80074de:	4b19      	ldr	r3, [pc, #100]	; (8007544 <SIMCOM_DMA_IrqHandler+0xd28>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a23      	ldr	r2, [pc, #140]	; (8007570 <SIMCOM_DMA_IrqHandler+0xd54>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d012      	beq.n	800750e <SIMCOM_DMA_IrqHandler+0xcf2>
 80074e8:	4b16      	ldr	r3, [pc, #88]	; (8007544 <SIMCOM_DMA_IrqHandler+0xd28>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a21      	ldr	r2, [pc, #132]	; (8007574 <SIMCOM_DMA_IrqHandler+0xd58>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d00a      	beq.n	8007508 <SIMCOM_DMA_IrqHandler+0xcec>
 80074f2:	4b14      	ldr	r3, [pc, #80]	; (8007544 <SIMCOM_DMA_IrqHandler+0xd28>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a20      	ldr	r2, [pc, #128]	; (8007578 <SIMCOM_DMA_IrqHandler+0xd5c>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d102      	bne.n	8007502 <SIMCOM_DMA_IrqHandler+0xce6>
 80074fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007500:	e01a      	b.n	8007538 <SIMCOM_DMA_IrqHandler+0xd1c>
 8007502:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007506:	e017      	b.n	8007538 <SIMCOM_DMA_IrqHandler+0xd1c>
 8007508:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800750c:	e014      	b.n	8007538 <SIMCOM_DMA_IrqHandler+0xd1c>
 800750e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007512:	e011      	b.n	8007538 <SIMCOM_DMA_IrqHandler+0xd1c>
 8007514:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007518:	e00e      	b.n	8007538 <SIMCOM_DMA_IrqHandler+0xd1c>
 800751a:	2340      	movs	r3, #64	; 0x40
 800751c:	e00c      	b.n	8007538 <SIMCOM_DMA_IrqHandler+0xd1c>
 800751e:	2340      	movs	r3, #64	; 0x40
 8007520:	e00a      	b.n	8007538 <SIMCOM_DMA_IrqHandler+0xd1c>
 8007522:	2340      	movs	r3, #64	; 0x40
 8007524:	e008      	b.n	8007538 <SIMCOM_DMA_IrqHandler+0xd1c>
 8007526:	2340      	movs	r3, #64	; 0x40
 8007528:	e006      	b.n	8007538 <SIMCOM_DMA_IrqHandler+0xd1c>
 800752a:	2301      	movs	r3, #1
 800752c:	e004      	b.n	8007538 <SIMCOM_DMA_IrqHandler+0xd1c>
 800752e:	2301      	movs	r3, #1
 8007530:	e002      	b.n	8007538 <SIMCOM_DMA_IrqHandler+0xd1c>
 8007532:	2301      	movs	r3, #1
 8007534:	e000      	b.n	8007538 <SIMCOM_DMA_IrqHandler+0xd1c>
 8007536:	2301      	movs	r3, #1
 8007538:	4a01      	ldr	r2, [pc, #4]	; (8007540 <SIMCOM_DMA_IrqHandler+0xd24>)
 800753a:	60d3      	str	r3, [r2, #12]
 800753c:	e080      	b.n	8007640 <SIMCOM_DMA_IrqHandler+0xe24>
 800753e:	bf00      	nop
 8007540:	40026000 	.word	0x40026000
 8007544:	2000030c 	.word	0x2000030c
 8007548:	40026458 	.word	0x40026458
 800754c:	40026010 	.word	0x40026010
 8007550:	40026410 	.word	0x40026410
 8007554:	40026070 	.word	0x40026070
 8007558:	40026470 	.word	0x40026470
 800755c:	40026028 	.word	0x40026028
 8007560:	40026428 	.word	0x40026428
 8007564:	40026088 	.word	0x40026088
 8007568:	40026488 	.word	0x40026488
 800756c:	40026040 	.word	0x40026040
 8007570:	40026440 	.word	0x40026440
 8007574:	400260a0 	.word	0x400260a0
 8007578:	400264a0 	.word	0x400264a0
 800757c:	40026400 	.word	0x40026400
 8007580:	400260b8 	.word	0x400260b8
 8007584:	40026058 	.word	0x40026058
 8007588:	4b95      	ldr	r3, [pc, #596]	; (80077e0 <SIMCOM_DMA_IrqHandler+0xfc4>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a95      	ldr	r2, [pc, #596]	; (80077e4 <SIMCOM_DMA_IrqHandler+0xfc8>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d053      	beq.n	800763a <SIMCOM_DMA_IrqHandler+0xe1e>
 8007592:	4b93      	ldr	r3, [pc, #588]	; (80077e0 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a94      	ldr	r2, [pc, #592]	; (80077e8 <SIMCOM_DMA_IrqHandler+0xfcc>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d04c      	beq.n	8007636 <SIMCOM_DMA_IrqHandler+0xe1a>
 800759c:	4b90      	ldr	r3, [pc, #576]	; (80077e0 <SIMCOM_DMA_IrqHandler+0xfc4>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a92      	ldr	r2, [pc, #584]	; (80077ec <SIMCOM_DMA_IrqHandler+0xfd0>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d045      	beq.n	8007632 <SIMCOM_DMA_IrqHandler+0xe16>
 80075a6:	4b8e      	ldr	r3, [pc, #568]	; (80077e0 <SIMCOM_DMA_IrqHandler+0xfc4>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a91      	ldr	r2, [pc, #580]	; (80077f0 <SIMCOM_DMA_IrqHandler+0xfd4>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d03e      	beq.n	800762e <SIMCOM_DMA_IrqHandler+0xe12>
 80075b0:	4b8b      	ldr	r3, [pc, #556]	; (80077e0 <SIMCOM_DMA_IrqHandler+0xfc4>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a8f      	ldr	r2, [pc, #572]	; (80077f4 <SIMCOM_DMA_IrqHandler+0xfd8>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d037      	beq.n	800762a <SIMCOM_DMA_IrqHandler+0xe0e>
 80075ba:	4b89      	ldr	r3, [pc, #548]	; (80077e0 <SIMCOM_DMA_IrqHandler+0xfc4>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a8e      	ldr	r2, [pc, #568]	; (80077f8 <SIMCOM_DMA_IrqHandler+0xfdc>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d030      	beq.n	8007626 <SIMCOM_DMA_IrqHandler+0xe0a>
 80075c4:	4b86      	ldr	r3, [pc, #536]	; (80077e0 <SIMCOM_DMA_IrqHandler+0xfc4>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a8c      	ldr	r2, [pc, #560]	; (80077fc <SIMCOM_DMA_IrqHandler+0xfe0>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d029      	beq.n	8007622 <SIMCOM_DMA_IrqHandler+0xe06>
 80075ce:	4b84      	ldr	r3, [pc, #528]	; (80077e0 <SIMCOM_DMA_IrqHandler+0xfc4>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a8b      	ldr	r2, [pc, #556]	; (8007800 <SIMCOM_DMA_IrqHandler+0xfe4>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d022      	beq.n	800761e <SIMCOM_DMA_IrqHandler+0xe02>
 80075d8:	4b81      	ldr	r3, [pc, #516]	; (80077e0 <SIMCOM_DMA_IrqHandler+0xfc4>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a89      	ldr	r2, [pc, #548]	; (8007804 <SIMCOM_DMA_IrqHandler+0xfe8>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d01a      	beq.n	8007618 <SIMCOM_DMA_IrqHandler+0xdfc>
 80075e2:	4b7f      	ldr	r3, [pc, #508]	; (80077e0 <SIMCOM_DMA_IrqHandler+0xfc4>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a88      	ldr	r2, [pc, #544]	; (8007808 <SIMCOM_DMA_IrqHandler+0xfec>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d012      	beq.n	8007612 <SIMCOM_DMA_IrqHandler+0xdf6>
 80075ec:	4b7c      	ldr	r3, [pc, #496]	; (80077e0 <SIMCOM_DMA_IrqHandler+0xfc4>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a86      	ldr	r2, [pc, #536]	; (800780c <SIMCOM_DMA_IrqHandler+0xff0>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d00a      	beq.n	800760c <SIMCOM_DMA_IrqHandler+0xdf0>
 80075f6:	4b7a      	ldr	r3, [pc, #488]	; (80077e0 <SIMCOM_DMA_IrqHandler+0xfc4>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a85      	ldr	r2, [pc, #532]	; (8007810 <SIMCOM_DMA_IrqHandler+0xff4>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d102      	bne.n	8007606 <SIMCOM_DMA_IrqHandler+0xdea>
 8007600:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007604:	e01a      	b.n	800763c <SIMCOM_DMA_IrqHandler+0xe20>
 8007606:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800760a:	e017      	b.n	800763c <SIMCOM_DMA_IrqHandler+0xe20>
 800760c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007610:	e014      	b.n	800763c <SIMCOM_DMA_IrqHandler+0xe20>
 8007612:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007616:	e011      	b.n	800763c <SIMCOM_DMA_IrqHandler+0xe20>
 8007618:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800761c:	e00e      	b.n	800763c <SIMCOM_DMA_IrqHandler+0xe20>
 800761e:	2340      	movs	r3, #64	; 0x40
 8007620:	e00c      	b.n	800763c <SIMCOM_DMA_IrqHandler+0xe20>
 8007622:	2340      	movs	r3, #64	; 0x40
 8007624:	e00a      	b.n	800763c <SIMCOM_DMA_IrqHandler+0xe20>
 8007626:	2340      	movs	r3, #64	; 0x40
 8007628:	e008      	b.n	800763c <SIMCOM_DMA_IrqHandler+0xe20>
 800762a:	2340      	movs	r3, #64	; 0x40
 800762c:	e006      	b.n	800763c <SIMCOM_DMA_IrqHandler+0xe20>
 800762e:	2301      	movs	r3, #1
 8007630:	e004      	b.n	800763c <SIMCOM_DMA_IrqHandler+0xe20>
 8007632:	2301      	movs	r3, #1
 8007634:	e002      	b.n	800763c <SIMCOM_DMA_IrqHandler+0xe20>
 8007636:	2301      	movs	r3, #1
 8007638:	e000      	b.n	800763c <SIMCOM_DMA_IrqHandler+0xe20>
 800763a:	2301      	movs	r3, #1
 800763c:	4a75      	ldr	r2, [pc, #468]	; (8007814 <SIMCOM_DMA_IrqHandler+0xff8>)
 800763e:	6093      	str	r3, [r2, #8]
        __HAL_DMA_CLEAR_FLAG(&hdma_usart1_rx, __HAL_DMA_GET_DME_FLAG_INDEX(&hdma_usart1_rx));
 8007640:	4b67      	ldr	r3, [pc, #412]	; (80077e0 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	461a      	mov	r2, r3
 8007646:	4b74      	ldr	r3, [pc, #464]	; (8007818 <SIMCOM_DMA_IrqHandler+0xffc>)
 8007648:	429a      	cmp	r2, r3
 800764a:	d960      	bls.n	800770e <SIMCOM_DMA_IrqHandler+0xef2>
 800764c:	4b64      	ldr	r3, [pc, #400]	; (80077e0 <SIMCOM_DMA_IrqHandler+0xfc4>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a64      	ldr	r2, [pc, #400]	; (80077e4 <SIMCOM_DMA_IrqHandler+0xfc8>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d057      	beq.n	8007706 <SIMCOM_DMA_IrqHandler+0xeea>
 8007656:	4b62      	ldr	r3, [pc, #392]	; (80077e0 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a63      	ldr	r2, [pc, #396]	; (80077e8 <SIMCOM_DMA_IrqHandler+0xfcc>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d050      	beq.n	8007702 <SIMCOM_DMA_IrqHandler+0xee6>
 8007660:	4b5f      	ldr	r3, [pc, #380]	; (80077e0 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a61      	ldr	r2, [pc, #388]	; (80077ec <SIMCOM_DMA_IrqHandler+0xfd0>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d049      	beq.n	80076fe <SIMCOM_DMA_IrqHandler+0xee2>
 800766a:	4b5d      	ldr	r3, [pc, #372]	; (80077e0 <SIMCOM_DMA_IrqHandler+0xfc4>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a60      	ldr	r2, [pc, #384]	; (80077f0 <SIMCOM_DMA_IrqHandler+0xfd4>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d042      	beq.n	80076fa <SIMCOM_DMA_IrqHandler+0xede>
 8007674:	4b5a      	ldr	r3, [pc, #360]	; (80077e0 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a5e      	ldr	r2, [pc, #376]	; (80077f4 <SIMCOM_DMA_IrqHandler+0xfd8>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d03a      	beq.n	80076f4 <SIMCOM_DMA_IrqHandler+0xed8>
 800767e:	4b58      	ldr	r3, [pc, #352]	; (80077e0 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a5d      	ldr	r2, [pc, #372]	; (80077f8 <SIMCOM_DMA_IrqHandler+0xfdc>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d032      	beq.n	80076ee <SIMCOM_DMA_IrqHandler+0xed2>
 8007688:	4b55      	ldr	r3, [pc, #340]	; (80077e0 <SIMCOM_DMA_IrqHandler+0xfc4>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a5b      	ldr	r2, [pc, #364]	; (80077fc <SIMCOM_DMA_IrqHandler+0xfe0>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d02a      	beq.n	80076e8 <SIMCOM_DMA_IrqHandler+0xecc>
 8007692:	4b53      	ldr	r3, [pc, #332]	; (80077e0 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a5a      	ldr	r2, [pc, #360]	; (8007800 <SIMCOM_DMA_IrqHandler+0xfe4>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d022      	beq.n	80076e2 <SIMCOM_DMA_IrqHandler+0xec6>
 800769c:	4b50      	ldr	r3, [pc, #320]	; (80077e0 <SIMCOM_DMA_IrqHandler+0xfc4>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a58      	ldr	r2, [pc, #352]	; (8007804 <SIMCOM_DMA_IrqHandler+0xfe8>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d01a      	beq.n	80076dc <SIMCOM_DMA_IrqHandler+0xec0>
 80076a6:	4b4e      	ldr	r3, [pc, #312]	; (80077e0 <SIMCOM_DMA_IrqHandler+0xfc4>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a57      	ldr	r2, [pc, #348]	; (8007808 <SIMCOM_DMA_IrqHandler+0xfec>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d012      	beq.n	80076d6 <SIMCOM_DMA_IrqHandler+0xeba>
 80076b0:	4b4b      	ldr	r3, [pc, #300]	; (80077e0 <SIMCOM_DMA_IrqHandler+0xfc4>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a55      	ldr	r2, [pc, #340]	; (800780c <SIMCOM_DMA_IrqHandler+0xff0>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d00a      	beq.n	80076d0 <SIMCOM_DMA_IrqHandler+0xeb4>
 80076ba:	4b49      	ldr	r3, [pc, #292]	; (80077e0 <SIMCOM_DMA_IrqHandler+0xfc4>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a54      	ldr	r2, [pc, #336]	; (8007810 <SIMCOM_DMA_IrqHandler+0xff4>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d102      	bne.n	80076ca <SIMCOM_DMA_IrqHandler+0xeae>
 80076c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80076c8:	e01e      	b.n	8007708 <SIMCOM_DMA_IrqHandler+0xeec>
 80076ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80076ce:	e01b      	b.n	8007708 <SIMCOM_DMA_IrqHandler+0xeec>
 80076d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80076d4:	e018      	b.n	8007708 <SIMCOM_DMA_IrqHandler+0xeec>
 80076d6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80076da:	e015      	b.n	8007708 <SIMCOM_DMA_IrqHandler+0xeec>
 80076dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80076e0:	e012      	b.n	8007708 <SIMCOM_DMA_IrqHandler+0xeec>
 80076e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076e6:	e00f      	b.n	8007708 <SIMCOM_DMA_IrqHandler+0xeec>
 80076e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076ec:	e00c      	b.n	8007708 <SIMCOM_DMA_IrqHandler+0xeec>
 80076ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076f2:	e009      	b.n	8007708 <SIMCOM_DMA_IrqHandler+0xeec>
 80076f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076f8:	e006      	b.n	8007708 <SIMCOM_DMA_IrqHandler+0xeec>
 80076fa:	2304      	movs	r3, #4
 80076fc:	e004      	b.n	8007708 <SIMCOM_DMA_IrqHandler+0xeec>
 80076fe:	2304      	movs	r3, #4
 8007700:	e002      	b.n	8007708 <SIMCOM_DMA_IrqHandler+0xeec>
 8007702:	2304      	movs	r3, #4
 8007704:	e000      	b.n	8007708 <SIMCOM_DMA_IrqHandler+0xeec>
 8007706:	2304      	movs	r3, #4
 8007708:	4a44      	ldr	r2, [pc, #272]	; (800781c <SIMCOM_DMA_IrqHandler+0x1000>)
 800770a:	60d3      	str	r3, [r2, #12]
 800770c:	e151      	b.n	80079b2 <SIMCOM_DMA_IrqHandler+0x1196>
 800770e:	4b34      	ldr	r3, [pc, #208]	; (80077e0 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	461a      	mov	r2, r3
 8007714:	4b42      	ldr	r3, [pc, #264]	; (8007820 <SIMCOM_DMA_IrqHandler+0x1004>)
 8007716:	429a      	cmp	r2, r3
 8007718:	f240 8084 	bls.w	8007824 <SIMCOM_DMA_IrqHandler+0x1008>
 800771c:	4b30      	ldr	r3, [pc, #192]	; (80077e0 <SIMCOM_DMA_IrqHandler+0xfc4>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a30      	ldr	r2, [pc, #192]	; (80077e4 <SIMCOM_DMA_IrqHandler+0xfc8>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d057      	beq.n	80077d6 <SIMCOM_DMA_IrqHandler+0xfba>
 8007726:	4b2e      	ldr	r3, [pc, #184]	; (80077e0 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a2f      	ldr	r2, [pc, #188]	; (80077e8 <SIMCOM_DMA_IrqHandler+0xfcc>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d050      	beq.n	80077d2 <SIMCOM_DMA_IrqHandler+0xfb6>
 8007730:	4b2b      	ldr	r3, [pc, #172]	; (80077e0 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a2d      	ldr	r2, [pc, #180]	; (80077ec <SIMCOM_DMA_IrqHandler+0xfd0>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d049      	beq.n	80077ce <SIMCOM_DMA_IrqHandler+0xfb2>
 800773a:	4b29      	ldr	r3, [pc, #164]	; (80077e0 <SIMCOM_DMA_IrqHandler+0xfc4>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a2c      	ldr	r2, [pc, #176]	; (80077f0 <SIMCOM_DMA_IrqHandler+0xfd4>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d042      	beq.n	80077ca <SIMCOM_DMA_IrqHandler+0xfae>
 8007744:	4b26      	ldr	r3, [pc, #152]	; (80077e0 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a2a      	ldr	r2, [pc, #168]	; (80077f4 <SIMCOM_DMA_IrqHandler+0xfd8>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d03a      	beq.n	80077c4 <SIMCOM_DMA_IrqHandler+0xfa8>
 800774e:	4b24      	ldr	r3, [pc, #144]	; (80077e0 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a29      	ldr	r2, [pc, #164]	; (80077f8 <SIMCOM_DMA_IrqHandler+0xfdc>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d032      	beq.n	80077be <SIMCOM_DMA_IrqHandler+0xfa2>
 8007758:	4b21      	ldr	r3, [pc, #132]	; (80077e0 <SIMCOM_DMA_IrqHandler+0xfc4>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a27      	ldr	r2, [pc, #156]	; (80077fc <SIMCOM_DMA_IrqHandler+0xfe0>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d02a      	beq.n	80077b8 <SIMCOM_DMA_IrqHandler+0xf9c>
 8007762:	4b1f      	ldr	r3, [pc, #124]	; (80077e0 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a26      	ldr	r2, [pc, #152]	; (8007800 <SIMCOM_DMA_IrqHandler+0xfe4>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d022      	beq.n	80077b2 <SIMCOM_DMA_IrqHandler+0xf96>
 800776c:	4b1c      	ldr	r3, [pc, #112]	; (80077e0 <SIMCOM_DMA_IrqHandler+0xfc4>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a24      	ldr	r2, [pc, #144]	; (8007804 <SIMCOM_DMA_IrqHandler+0xfe8>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d01a      	beq.n	80077ac <SIMCOM_DMA_IrqHandler+0xf90>
 8007776:	4b1a      	ldr	r3, [pc, #104]	; (80077e0 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a23      	ldr	r2, [pc, #140]	; (8007808 <SIMCOM_DMA_IrqHandler+0xfec>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d012      	beq.n	80077a6 <SIMCOM_DMA_IrqHandler+0xf8a>
 8007780:	4b17      	ldr	r3, [pc, #92]	; (80077e0 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a21      	ldr	r2, [pc, #132]	; (800780c <SIMCOM_DMA_IrqHandler+0xff0>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d00a      	beq.n	80077a0 <SIMCOM_DMA_IrqHandler+0xf84>
 800778a:	4b15      	ldr	r3, [pc, #84]	; (80077e0 <SIMCOM_DMA_IrqHandler+0xfc4>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a20      	ldr	r2, [pc, #128]	; (8007810 <SIMCOM_DMA_IrqHandler+0xff4>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d102      	bne.n	800779a <SIMCOM_DMA_IrqHandler+0xf7e>
 8007794:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007798:	e01e      	b.n	80077d8 <SIMCOM_DMA_IrqHandler+0xfbc>
 800779a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800779e:	e01b      	b.n	80077d8 <SIMCOM_DMA_IrqHandler+0xfbc>
 80077a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80077a4:	e018      	b.n	80077d8 <SIMCOM_DMA_IrqHandler+0xfbc>
 80077a6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80077aa:	e015      	b.n	80077d8 <SIMCOM_DMA_IrqHandler+0xfbc>
 80077ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80077b0:	e012      	b.n	80077d8 <SIMCOM_DMA_IrqHandler+0xfbc>
 80077b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077b6:	e00f      	b.n	80077d8 <SIMCOM_DMA_IrqHandler+0xfbc>
 80077b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077bc:	e00c      	b.n	80077d8 <SIMCOM_DMA_IrqHandler+0xfbc>
 80077be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077c2:	e009      	b.n	80077d8 <SIMCOM_DMA_IrqHandler+0xfbc>
 80077c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077c8:	e006      	b.n	80077d8 <SIMCOM_DMA_IrqHandler+0xfbc>
 80077ca:	2304      	movs	r3, #4
 80077cc:	e004      	b.n	80077d8 <SIMCOM_DMA_IrqHandler+0xfbc>
 80077ce:	2304      	movs	r3, #4
 80077d0:	e002      	b.n	80077d8 <SIMCOM_DMA_IrqHandler+0xfbc>
 80077d2:	2304      	movs	r3, #4
 80077d4:	e000      	b.n	80077d8 <SIMCOM_DMA_IrqHandler+0xfbc>
 80077d6:	2304      	movs	r3, #4
 80077d8:	4a10      	ldr	r2, [pc, #64]	; (800781c <SIMCOM_DMA_IrqHandler+0x1000>)
 80077da:	6093      	str	r3, [r2, #8]
 80077dc:	e0e9      	b.n	80079b2 <SIMCOM_DMA_IrqHandler+0x1196>
 80077de:	bf00      	nop
 80077e0:	2000030c 	.word	0x2000030c
 80077e4:	40026010 	.word	0x40026010
 80077e8:	40026410 	.word	0x40026410
 80077ec:	40026070 	.word	0x40026070
 80077f0:	40026470 	.word	0x40026470
 80077f4:	40026028 	.word	0x40026028
 80077f8:	40026428 	.word	0x40026428
 80077fc:	40026088 	.word	0x40026088
 8007800:	40026488 	.word	0x40026488
 8007804:	40026040 	.word	0x40026040
 8007808:	40026440 	.word	0x40026440
 800780c:	400260a0 	.word	0x400260a0
 8007810:	400264a0 	.word	0x400264a0
 8007814:	40026000 	.word	0x40026000
 8007818:	40026458 	.word	0x40026458
 800781c:	40026400 	.word	0x40026400
 8007820:	400260b8 	.word	0x400260b8
 8007824:	4b66      	ldr	r3, [pc, #408]	; (80079c0 <SIMCOM_DMA_IrqHandler+0x11a4>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	461a      	mov	r2, r3
 800782a:	4b66      	ldr	r3, [pc, #408]	; (80079c4 <SIMCOM_DMA_IrqHandler+0x11a8>)
 800782c:	429a      	cmp	r2, r3
 800782e:	d960      	bls.n	80078f2 <SIMCOM_DMA_IrqHandler+0x10d6>
 8007830:	4b63      	ldr	r3, [pc, #396]	; (80079c0 <SIMCOM_DMA_IrqHandler+0x11a4>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a64      	ldr	r2, [pc, #400]	; (80079c8 <SIMCOM_DMA_IrqHandler+0x11ac>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d057      	beq.n	80078ea <SIMCOM_DMA_IrqHandler+0x10ce>
 800783a:	4b61      	ldr	r3, [pc, #388]	; (80079c0 <SIMCOM_DMA_IrqHandler+0x11a4>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a63      	ldr	r2, [pc, #396]	; (80079cc <SIMCOM_DMA_IrqHandler+0x11b0>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d050      	beq.n	80078e6 <SIMCOM_DMA_IrqHandler+0x10ca>
 8007844:	4b5e      	ldr	r3, [pc, #376]	; (80079c0 <SIMCOM_DMA_IrqHandler+0x11a4>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a61      	ldr	r2, [pc, #388]	; (80079d0 <SIMCOM_DMA_IrqHandler+0x11b4>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d049      	beq.n	80078e2 <SIMCOM_DMA_IrqHandler+0x10c6>
 800784e:	4b5c      	ldr	r3, [pc, #368]	; (80079c0 <SIMCOM_DMA_IrqHandler+0x11a4>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a60      	ldr	r2, [pc, #384]	; (80079d4 <SIMCOM_DMA_IrqHandler+0x11b8>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d042      	beq.n	80078de <SIMCOM_DMA_IrqHandler+0x10c2>
 8007858:	4b59      	ldr	r3, [pc, #356]	; (80079c0 <SIMCOM_DMA_IrqHandler+0x11a4>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a5e      	ldr	r2, [pc, #376]	; (80079d8 <SIMCOM_DMA_IrqHandler+0x11bc>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d03a      	beq.n	80078d8 <SIMCOM_DMA_IrqHandler+0x10bc>
 8007862:	4b57      	ldr	r3, [pc, #348]	; (80079c0 <SIMCOM_DMA_IrqHandler+0x11a4>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a5d      	ldr	r2, [pc, #372]	; (80079dc <SIMCOM_DMA_IrqHandler+0x11c0>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d032      	beq.n	80078d2 <SIMCOM_DMA_IrqHandler+0x10b6>
 800786c:	4b54      	ldr	r3, [pc, #336]	; (80079c0 <SIMCOM_DMA_IrqHandler+0x11a4>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a5b      	ldr	r2, [pc, #364]	; (80079e0 <SIMCOM_DMA_IrqHandler+0x11c4>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d02a      	beq.n	80078cc <SIMCOM_DMA_IrqHandler+0x10b0>
 8007876:	4b52      	ldr	r3, [pc, #328]	; (80079c0 <SIMCOM_DMA_IrqHandler+0x11a4>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a5a      	ldr	r2, [pc, #360]	; (80079e4 <SIMCOM_DMA_IrqHandler+0x11c8>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d022      	beq.n	80078c6 <SIMCOM_DMA_IrqHandler+0x10aa>
 8007880:	4b4f      	ldr	r3, [pc, #316]	; (80079c0 <SIMCOM_DMA_IrqHandler+0x11a4>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a58      	ldr	r2, [pc, #352]	; (80079e8 <SIMCOM_DMA_IrqHandler+0x11cc>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d01a      	beq.n	80078c0 <SIMCOM_DMA_IrqHandler+0x10a4>
 800788a:	4b4d      	ldr	r3, [pc, #308]	; (80079c0 <SIMCOM_DMA_IrqHandler+0x11a4>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a57      	ldr	r2, [pc, #348]	; (80079ec <SIMCOM_DMA_IrqHandler+0x11d0>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d012      	beq.n	80078ba <SIMCOM_DMA_IrqHandler+0x109e>
 8007894:	4b4a      	ldr	r3, [pc, #296]	; (80079c0 <SIMCOM_DMA_IrqHandler+0x11a4>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a55      	ldr	r2, [pc, #340]	; (80079f0 <SIMCOM_DMA_IrqHandler+0x11d4>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d00a      	beq.n	80078b4 <SIMCOM_DMA_IrqHandler+0x1098>
 800789e:	4b48      	ldr	r3, [pc, #288]	; (80079c0 <SIMCOM_DMA_IrqHandler+0x11a4>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a54      	ldr	r2, [pc, #336]	; (80079f4 <SIMCOM_DMA_IrqHandler+0x11d8>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d102      	bne.n	80078ae <SIMCOM_DMA_IrqHandler+0x1092>
 80078a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80078ac:	e01e      	b.n	80078ec <SIMCOM_DMA_IrqHandler+0x10d0>
 80078ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80078b2:	e01b      	b.n	80078ec <SIMCOM_DMA_IrqHandler+0x10d0>
 80078b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80078b8:	e018      	b.n	80078ec <SIMCOM_DMA_IrqHandler+0x10d0>
 80078ba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80078be:	e015      	b.n	80078ec <SIMCOM_DMA_IrqHandler+0x10d0>
 80078c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80078c4:	e012      	b.n	80078ec <SIMCOM_DMA_IrqHandler+0x10d0>
 80078c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078ca:	e00f      	b.n	80078ec <SIMCOM_DMA_IrqHandler+0x10d0>
 80078cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078d0:	e00c      	b.n	80078ec <SIMCOM_DMA_IrqHandler+0x10d0>
 80078d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078d6:	e009      	b.n	80078ec <SIMCOM_DMA_IrqHandler+0x10d0>
 80078d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078dc:	e006      	b.n	80078ec <SIMCOM_DMA_IrqHandler+0x10d0>
 80078de:	2304      	movs	r3, #4
 80078e0:	e004      	b.n	80078ec <SIMCOM_DMA_IrqHandler+0x10d0>
 80078e2:	2304      	movs	r3, #4
 80078e4:	e002      	b.n	80078ec <SIMCOM_DMA_IrqHandler+0x10d0>
 80078e6:	2304      	movs	r3, #4
 80078e8:	e000      	b.n	80078ec <SIMCOM_DMA_IrqHandler+0x10d0>
 80078ea:	2304      	movs	r3, #4
 80078ec:	4a42      	ldr	r2, [pc, #264]	; (80079f8 <SIMCOM_DMA_IrqHandler+0x11dc>)
 80078ee:	60d3      	str	r3, [r2, #12]
 80078f0:	e05f      	b.n	80079b2 <SIMCOM_DMA_IrqHandler+0x1196>
 80078f2:	4b33      	ldr	r3, [pc, #204]	; (80079c0 <SIMCOM_DMA_IrqHandler+0x11a4>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a34      	ldr	r2, [pc, #208]	; (80079c8 <SIMCOM_DMA_IrqHandler+0x11ac>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d057      	beq.n	80079ac <SIMCOM_DMA_IrqHandler+0x1190>
 80078fc:	4b30      	ldr	r3, [pc, #192]	; (80079c0 <SIMCOM_DMA_IrqHandler+0x11a4>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a32      	ldr	r2, [pc, #200]	; (80079cc <SIMCOM_DMA_IrqHandler+0x11b0>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d050      	beq.n	80079a8 <SIMCOM_DMA_IrqHandler+0x118c>
 8007906:	4b2e      	ldr	r3, [pc, #184]	; (80079c0 <SIMCOM_DMA_IrqHandler+0x11a4>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a31      	ldr	r2, [pc, #196]	; (80079d0 <SIMCOM_DMA_IrqHandler+0x11b4>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d049      	beq.n	80079a4 <SIMCOM_DMA_IrqHandler+0x1188>
 8007910:	4b2b      	ldr	r3, [pc, #172]	; (80079c0 <SIMCOM_DMA_IrqHandler+0x11a4>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a2f      	ldr	r2, [pc, #188]	; (80079d4 <SIMCOM_DMA_IrqHandler+0x11b8>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d042      	beq.n	80079a0 <SIMCOM_DMA_IrqHandler+0x1184>
 800791a:	4b29      	ldr	r3, [pc, #164]	; (80079c0 <SIMCOM_DMA_IrqHandler+0x11a4>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a2e      	ldr	r2, [pc, #184]	; (80079d8 <SIMCOM_DMA_IrqHandler+0x11bc>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d03a      	beq.n	800799a <SIMCOM_DMA_IrqHandler+0x117e>
 8007924:	4b26      	ldr	r3, [pc, #152]	; (80079c0 <SIMCOM_DMA_IrqHandler+0x11a4>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a2c      	ldr	r2, [pc, #176]	; (80079dc <SIMCOM_DMA_IrqHandler+0x11c0>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d032      	beq.n	8007994 <SIMCOM_DMA_IrqHandler+0x1178>
 800792e:	4b24      	ldr	r3, [pc, #144]	; (80079c0 <SIMCOM_DMA_IrqHandler+0x11a4>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a2b      	ldr	r2, [pc, #172]	; (80079e0 <SIMCOM_DMA_IrqHandler+0x11c4>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d02a      	beq.n	800798e <SIMCOM_DMA_IrqHandler+0x1172>
 8007938:	4b21      	ldr	r3, [pc, #132]	; (80079c0 <SIMCOM_DMA_IrqHandler+0x11a4>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a29      	ldr	r2, [pc, #164]	; (80079e4 <SIMCOM_DMA_IrqHandler+0x11c8>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d022      	beq.n	8007988 <SIMCOM_DMA_IrqHandler+0x116c>
 8007942:	4b1f      	ldr	r3, [pc, #124]	; (80079c0 <SIMCOM_DMA_IrqHandler+0x11a4>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a28      	ldr	r2, [pc, #160]	; (80079e8 <SIMCOM_DMA_IrqHandler+0x11cc>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d01a      	beq.n	8007982 <SIMCOM_DMA_IrqHandler+0x1166>
 800794c:	4b1c      	ldr	r3, [pc, #112]	; (80079c0 <SIMCOM_DMA_IrqHandler+0x11a4>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a26      	ldr	r2, [pc, #152]	; (80079ec <SIMCOM_DMA_IrqHandler+0x11d0>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d012      	beq.n	800797c <SIMCOM_DMA_IrqHandler+0x1160>
 8007956:	4b1a      	ldr	r3, [pc, #104]	; (80079c0 <SIMCOM_DMA_IrqHandler+0x11a4>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a25      	ldr	r2, [pc, #148]	; (80079f0 <SIMCOM_DMA_IrqHandler+0x11d4>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d00a      	beq.n	8007976 <SIMCOM_DMA_IrqHandler+0x115a>
 8007960:	4b17      	ldr	r3, [pc, #92]	; (80079c0 <SIMCOM_DMA_IrqHandler+0x11a4>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a23      	ldr	r2, [pc, #140]	; (80079f4 <SIMCOM_DMA_IrqHandler+0x11d8>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d102      	bne.n	8007970 <SIMCOM_DMA_IrqHandler+0x1154>
 800796a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800796e:	e01e      	b.n	80079ae <SIMCOM_DMA_IrqHandler+0x1192>
 8007970:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007974:	e01b      	b.n	80079ae <SIMCOM_DMA_IrqHandler+0x1192>
 8007976:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800797a:	e018      	b.n	80079ae <SIMCOM_DMA_IrqHandler+0x1192>
 800797c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007980:	e015      	b.n	80079ae <SIMCOM_DMA_IrqHandler+0x1192>
 8007982:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007986:	e012      	b.n	80079ae <SIMCOM_DMA_IrqHandler+0x1192>
 8007988:	f44f 7380 	mov.w	r3, #256	; 0x100
 800798c:	e00f      	b.n	80079ae <SIMCOM_DMA_IrqHandler+0x1192>
 800798e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007992:	e00c      	b.n	80079ae <SIMCOM_DMA_IrqHandler+0x1192>
 8007994:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007998:	e009      	b.n	80079ae <SIMCOM_DMA_IrqHandler+0x1192>
 800799a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800799e:	e006      	b.n	80079ae <SIMCOM_DMA_IrqHandler+0x1192>
 80079a0:	2304      	movs	r3, #4
 80079a2:	e004      	b.n	80079ae <SIMCOM_DMA_IrqHandler+0x1192>
 80079a4:	2304      	movs	r3, #4
 80079a6:	e002      	b.n	80079ae <SIMCOM_DMA_IrqHandler+0x1192>
 80079a8:	2304      	movs	r3, #4
 80079aa:	e000      	b.n	80079ae <SIMCOM_DMA_IrqHandler+0x1192>
 80079ac:	2304      	movs	r3, #4
 80079ae:	4a12      	ldr	r2, [pc, #72]	; (80079f8 <SIMCOM_DMA_IrqHandler+0x11dc>)
 80079b0:	6093      	str	r3, [r2, #8]
        HAL_UART_Receive_DMA(&huart1, (uint8_t*) SIMCOM_DMA_RX, SIMCOM_DMA_RX_SZ);
 80079b2:	2280      	movs	r2, #128	; 0x80
 80079b4:	4911      	ldr	r1, [pc, #68]	; (80079fc <SIMCOM_DMA_IrqHandler+0x11e0>)
 80079b6:	4812      	ldr	r0, [pc, #72]	; (8007a00 <SIMCOM_DMA_IrqHandler+0x11e4>)
 80079b8:	f7fd ffc4 	bl	8005944 <HAL_UART_Receive_DMA>
}
 80079bc:	bf00      	nop
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	2000030c 	.word	0x2000030c
 80079c4:	40026058 	.word	0x40026058
 80079c8:	40026010 	.word	0x40026010
 80079cc:	40026410 	.word	0x40026410
 80079d0:	40026070 	.word	0x40026070
 80079d4:	40026470 	.word	0x40026470
 80079d8:	40026028 	.word	0x40026028
 80079dc:	40026428 	.word	0x40026428
 80079e0:	40026088 	.word	0x40026088
 80079e4:	40026488 	.word	0x40026488
 80079e8:	40026040 	.word	0x40026040
 80079ec:	40026440 	.word	0x40026440
 80079f0:	400260a0 	.word	0x400260a0
 80079f4:	400264a0 	.word	0x400264a0
 80079f8:	40026000 	.word	0x40026000
 80079fc:	2000021c 	.word	0x2000021c
 8007a00:	2000036c 	.word	0x2000036c

08007a04 <SIMCOM_DMA_Init>:

void SIMCOM_DMA_Init(void) {
 8007a04:	b580      	push	{r7, lr}
 8007a06:	af00      	add	r7, sp, #0
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);        // enable idle line interrupt
 8007a08:	4b0f      	ldr	r3, [pc, #60]	; (8007a48 <SIMCOM_DMA_Init+0x44>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68da      	ldr	r2, [r3, #12]
 8007a0e:	4b0e      	ldr	r3, [pc, #56]	; (8007a48 <SIMCOM_DMA_Init+0x44>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f042 0210 	orr.w	r2, r2, #16
 8007a16:	60da      	str	r2, [r3, #12]
    __HAL_DMA_ENABLE_IT(&hdma_usart1_rx, DMA_IT_TC);    // enable DMA Tx cplt interrupt
 8007a18:	4b0c      	ldr	r3, [pc, #48]	; (8007a4c <SIMCOM_DMA_Init+0x48>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	4b0b      	ldr	r3, [pc, #44]	; (8007a4c <SIMCOM_DMA_Init+0x48>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f042 0210 	orr.w	r2, r2, #16
 8007a26:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE_IT(&hdma_usart1_rx, DMA_IT_HT);    // enable half complete interrupt
 8007a28:	4b08      	ldr	r3, [pc, #32]	; (8007a4c <SIMCOM_DMA_Init+0x48>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	4b07      	ldr	r3, [pc, #28]	; (8007a4c <SIMCOM_DMA_Init+0x48>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f042 0208 	orr.w	r2, r2, #8
 8007a36:	601a      	str	r2, [r3, #0]

    /* Start DMA transfer */
    HAL_UART_Receive_DMA(&huart1, (uint8_t*) SIMCOM_DMA_RX, SIMCOM_DMA_RX_SZ);
 8007a38:	2280      	movs	r2, #128	; 0x80
 8007a3a:	4905      	ldr	r1, [pc, #20]	; (8007a50 <SIMCOM_DMA_Init+0x4c>)
 8007a3c:	4802      	ldr	r0, [pc, #8]	; (8007a48 <SIMCOM_DMA_Init+0x44>)
 8007a3e:	f7fd ff81 	bl	8005944 <HAL_UART_Receive_DMA>
}
 8007a42:	bf00      	nop
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	2000036c 	.word	0x2000036c
 8007a4c:	2000030c 	.word	0x2000030c
 8007a50:	2000021c 	.word	0x2000021c

08007a54 <SIMCOM_Check_Buffer>:

static void SIMCOM_Check_Buffer(void) {
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
    static size_t old_pos;
    size_t pos;

    /* Calculate current position in buffer */
    pos = SIMCOM_DMA_RX_SZ - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 8007a5a:	4b1e      	ldr	r3, [pc, #120]	; (8007ad4 <SIMCOM_Check_Buffer+0x80>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8007a64:	607b      	str	r3, [r7, #4]
    if (pos != old_pos) { /* Check change in received data */
 8007a66:	4b1c      	ldr	r3, [pc, #112]	; (8007ad8 <SIMCOM_Check_Buffer+0x84>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d023      	beq.n	8007ab8 <SIMCOM_Check_Buffer+0x64>
        if (pos > old_pos) { /* Current position is over previous one */
 8007a70:	4b19      	ldr	r3, [pc, #100]	; (8007ad8 <SIMCOM_Check_Buffer+0x84>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d90b      	bls.n	8007a92 <SIMCOM_Check_Buffer+0x3e>
            /* We are in "linear" mode */
            /* Process data directly by subtracting "pointers" */
            SIMCOM_Fill_Buffer(&SIMCOM_DMA_RX[old_pos], pos - old_pos);
 8007a7a:	4b17      	ldr	r3, [pc, #92]	; (8007ad8 <SIMCOM_Check_Buffer+0x84>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a17      	ldr	r2, [pc, #92]	; (8007adc <SIMCOM_Check_Buffer+0x88>)
 8007a80:	1898      	adds	r0, r3, r2
 8007a82:	4b15      	ldr	r3, [pc, #84]	; (8007ad8 <SIMCOM_Check_Buffer+0x84>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	1ad3      	subs	r3, r2, r3
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	f000 f828 	bl	8007ae0 <SIMCOM_Fill_Buffer>
 8007a90:	e012      	b.n	8007ab8 <SIMCOM_Check_Buffer+0x64>
        } else {
            /* We are in "overflow" mode */
            /* First process data to the end of buffer */
            SIMCOM_Fill_Buffer(&SIMCOM_DMA_RX[old_pos], SIMCOM_DMA_RX_SZ - old_pos);
 8007a92:	4b11      	ldr	r3, [pc, #68]	; (8007ad8 <SIMCOM_Check_Buffer+0x84>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a11      	ldr	r2, [pc, #68]	; (8007adc <SIMCOM_Check_Buffer+0x88>)
 8007a98:	441a      	add	r2, r3
 8007a9a:	4b0f      	ldr	r3, [pc, #60]	; (8007ad8 <SIMCOM_Check_Buffer+0x84>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	4610      	mov	r0, r2
 8007aa6:	f000 f81b 	bl	8007ae0 <SIMCOM_Fill_Buffer>
            /* Check and continue with beginning of buffer */
            if (pos > 0) {
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d003      	beq.n	8007ab8 <SIMCOM_Check_Buffer+0x64>
                SIMCOM_Fill_Buffer(&SIMCOM_DMA_RX[0], pos);
 8007ab0:	6879      	ldr	r1, [r7, #4]
 8007ab2:	480a      	ldr	r0, [pc, #40]	; (8007adc <SIMCOM_Check_Buffer+0x88>)
 8007ab4:	f000 f814 	bl	8007ae0 <SIMCOM_Fill_Buffer>
            }
        }
    }
    old_pos = pos; /* Save current position as old */
 8007ab8:	4a07      	ldr	r2, [pc, #28]	; (8007ad8 <SIMCOM_Check_Buffer+0x84>)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6013      	str	r3, [r2, #0]

    /* Check and manually update if we reached end of buffer */
    if (old_pos == SIMCOM_DMA_RX_SZ) {
 8007abe:	4b06      	ldr	r3, [pc, #24]	; (8007ad8 <SIMCOM_Check_Buffer+0x84>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	2b80      	cmp	r3, #128	; 0x80
 8007ac4:	d102      	bne.n	8007acc <SIMCOM_Check_Buffer+0x78>
        old_pos = 0;
 8007ac6:	4b04      	ldr	r3, [pc, #16]	; (8007ad8 <SIMCOM_Check_Buffer+0x84>)
 8007ac8:	2200      	movs	r2, #0
 8007aca:	601a      	str	r2, [r3, #0]
    }
}
 8007acc:	bf00      	nop
 8007ace:	3708      	adds	r7, #8
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	2000030c 	.word	0x2000030c
 8007ad8:	200002a0 	.word	0x200002a0
 8007adc:	2000021c 	.word	0x2000021c

08007ae0 <SIMCOM_Fill_Buffer>:

static void SIMCOM_Fill_Buffer(const void *data, size_t len) {
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
    /* Write data to buffer */
    memcpy(&SIMCOM_UART_RX[simcom_write], data, len);
 8007aea:	4b09      	ldr	r3, [pc, #36]	; (8007b10 <SIMCOM_Fill_Buffer+0x30>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a09      	ldr	r2, [pc, #36]	; (8007b14 <SIMCOM_Fill_Buffer+0x34>)
 8007af0:	4413      	add	r3, r2
 8007af2:	683a      	ldr	r2, [r7, #0]
 8007af4:	6879      	ldr	r1, [r7, #4]
 8007af6:	4618      	mov	r0, r3
 8007af8:	f001 ffe7 	bl	8009aca <memcpy>
    simcom_write += len;
 8007afc:	4b04      	ldr	r3, [pc, #16]	; (8007b10 <SIMCOM_Fill_Buffer+0x30>)
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	4413      	add	r3, r2
 8007b04:	4a02      	ldr	r2, [pc, #8]	; (8007b10 <SIMCOM_Fill_Buffer+0x30>)
 8007b06:	6013      	str	r3, [r2, #0]
}
 8007b08:	bf00      	nop
 8007b0a:	3708      	adds	r7, #8
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	2000029c 	.word	0x2000029c
 8007b14:	200003d0 	.word	0x200003d0

08007b18 <SIMCOM_Reset_Buffer>:

void SIMCOM_Reset_Buffer(void) {
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	af00      	add	r7, sp, #0
    // clear rx buffer
    memset(SIMCOM_UART_RX, 0x00, simcom_write);
 8007b1c:	4b05      	ldr	r3, [pc, #20]	; (8007b34 <SIMCOM_Reset_Buffer+0x1c>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	461a      	mov	r2, r3
 8007b22:	2100      	movs	r1, #0
 8007b24:	4804      	ldr	r0, [pc, #16]	; (8007b38 <SIMCOM_Reset_Buffer+0x20>)
 8007b26:	f001 ffdb 	bl	8009ae0 <memset>
    simcom_write = 0;
 8007b2a:	4b02      	ldr	r3, [pc, #8]	; (8007b34 <SIMCOM_Reset_Buffer+0x1c>)
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	601a      	str	r2, [r3, #0]
}
 8007b30:	bf00      	nop
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	2000029c 	.word	0x2000029c
 8007b38:	200003d0 	.word	0x200003d0

08007b3c <SIMCOM_Transmit>:

uint8_t SIMCOM_Transmit(char *pData, uint16_t Size) {
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	460b      	mov	r3, r1
 8007b46:	807b      	strh	r3, [r7, #2]
    SIMCOM_Reset_Buffer();
 8007b48:	f7ff ffe6 	bl	8007b18 <SIMCOM_Reset_Buffer>

    return (HAL_UART_Transmit(&huart1, (uint8_t*) pData, Size, HAL_MAX_DELAY) == HAL_OK);
 8007b4c:	887a      	ldrh	r2, [r7, #2]
 8007b4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b52:	6879      	ldr	r1, [r7, #4]
 8007b54:	4806      	ldr	r0, [pc, #24]	; (8007b70 <SIMCOM_Transmit+0x34>)
 8007b56:	f7fd fe5c 	bl	8005812 <HAL_UART_Transmit>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	bf0c      	ite	eq
 8007b60:	2301      	moveq	r3, #1
 8007b62:	2300      	movne	r3, #0
 8007b64:	b2db      	uxtb	r3, r3
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3708      	adds	r7, #8
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
 8007b6e:	bf00      	nop
 8007b70:	2000036c 	.word	0x2000036c

08007b74 <AT_CommandEchoMode>:
static void AT_ParseText(const char *ptr, uint8_t *cnt, char *text, uint8_t size);
static int32_t AT_ParseNumber(const char *ptr, uint8_t *cnt);
//static float AT_ParseFloat(const char *ptr, uint8_t *cnt);

/* Public functions implementation --------------------------------------------*/
SIMCOM_RESULT AT_CommandEchoMode(uint8_t state) {
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	71fb      	strb	r3, [r7, #7]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	73fb      	strb	r3, [r7, #15]
    char cmd[6];

    Simcom_Lock();
 8007b82:	f001 faa8 	bl	80090d6 <Simcom_Lock>
    // Write
    sprintf(cmd, "ATE%d\r", state);
 8007b86:	79fa      	ldrb	r2, [r7, #7]
 8007b88:	f107 0308 	add.w	r3, r7, #8
 8007b8c:	490a      	ldr	r1, [pc, #40]	; (8007bb8 <AT_CommandEchoMode+0x44>)
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f001 ffae 	bl	8009af0 <siprintf>
    p = AT_CmdWrite(cmd, 500, NULL);
 8007b94:	f107 0308 	add.w	r3, r7, #8
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f000 fede 	bl	8008960 <AT_CmdWrite>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	73fb      	strb	r3, [r7, #15]
    Simcom_Unlock();
 8007ba8:	f001 fa9c 	bl	80090e4 <Simcom_Unlock>

    return p;
 8007bac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3710      	adds	r7, #16
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	0800a720 	.word	0x0800a720
 8007bbc:	00000000 	.word	0x00000000

08007bc0 <AT_SignalQualityReport>:

SIMCOM_RESULT AT_SignalQualityReport(at_csq_t *signal) {
 8007bc0:	b590      	push	{r4, r7, lr}
 8007bc2:	b087      	sub	sp, #28
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	75fb      	strb	r3, [r7, #23]
    uint8_t cnt, len = 0;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	75bb      	strb	r3, [r7, #22]
    char *str = NULL;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	60bb      	str	r3, [r7, #8]
    float dBm;

    Simcom_Lock();
 8007bd4:	f001 fa7f 	bl	80090d6 <Simcom_Lock>
    // Read
    p = AT_CmdRead("AT+CSQ\r", 500, "+CSQ: ", &str);
 8007bd8:	f107 0308 	add.w	r3, r7, #8
 8007bdc:	4a48      	ldr	r2, [pc, #288]	; (8007d00 <AT_SignalQualityReport+0x140>)
 8007bde:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8007be2:	4848      	ldr	r0, [pc, #288]	; (8007d04 <AT_SignalQualityReport+0x144>)
 8007be4:	f000 feda 	bl	800899c <AT_CmdRead>
 8007be8:	4603      	mov	r3, r0
 8007bea:	75fb      	strb	r3, [r7, #23]
    if (p > 0) {
 8007bec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	dd77      	ble.n	8007ce4 <AT_SignalQualityReport+0x124>
        signal->rssi = AT_ParseNumber(&str[len], &cnt);
 8007bf4:	68ba      	ldr	r2, [r7, #8]
 8007bf6:	7dbb      	ldrb	r3, [r7, #22]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	f107 020f 	add.w	r2, r7, #15
 8007bfe:	4611      	mov	r1, r2
 8007c00:	4618      	mov	r0, r3
 8007c02:	f000 ff4d 	bl	8008aa0 <AT_ParseNumber>
 8007c06:	4603      	mov	r3, r0
 8007c08:	b2da      	uxtb	r2, r3
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	701a      	strb	r2, [r3, #0]
        len += cnt + 1;
 8007c0e:	7bfa      	ldrb	r2, [r7, #15]
 8007c10:	7dbb      	ldrb	r3, [r7, #22]
 8007c12:	4413      	add	r3, r2
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	3301      	adds	r3, #1
 8007c18:	75bb      	strb	r3, [r7, #22]
        signal->ber = AT_ParseNumber(&str[len], NULL);
 8007c1a:	68ba      	ldr	r2, [r7, #8]
 8007c1c:	7dbb      	ldrb	r3, [r7, #22]
 8007c1e:	4413      	add	r3, r2
 8007c20:	2100      	movs	r1, #0
 8007c22:	4618      	mov	r0, r3
 8007c24:	f000 ff3c 	bl	8008aa0 <AT_ParseNumber>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	b2da      	uxtb	r2, r3
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	705a      	strb	r2, [r3, #1]

        // Formatting
        {
            // Handle not detectable value
            if (signal->rssi > 31) {
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	2b1f      	cmp	r3, #31
 8007c36:	d902      	bls.n	8007c3e <AT_SignalQualityReport+0x7e>
                signal->rssi = 0;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	701a      	strb	r2, [r3, #0]
            }

            // Scale RSSI to dBm
            dBm = (signal->rssi * 63.0 / 31.0) - 115.0;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	4618      	mov	r0, r3
 8007c44:	f7f8 fca6 	bl	8000594 <__aeabi_i2d>
 8007c48:	f04f 0200 	mov.w	r2, #0
 8007c4c:	4b2e      	ldr	r3, [pc, #184]	; (8007d08 <AT_SignalQualityReport+0x148>)
 8007c4e:	f7f8 fd0b 	bl	8000668 <__aeabi_dmul>
 8007c52:	4603      	mov	r3, r0
 8007c54:	460c      	mov	r4, r1
 8007c56:	4618      	mov	r0, r3
 8007c58:	4621      	mov	r1, r4
 8007c5a:	f04f 0200 	mov.w	r2, #0
 8007c5e:	4b2b      	ldr	r3, [pc, #172]	; (8007d0c <AT_SignalQualityReport+0x14c>)
 8007c60:	f7f8 fe2c 	bl	80008bc <__aeabi_ddiv>
 8007c64:	4603      	mov	r3, r0
 8007c66:	460c      	mov	r4, r1
 8007c68:	4618      	mov	r0, r3
 8007c6a:	4621      	mov	r1, r4
 8007c6c:	a322      	add	r3, pc, #136	; (adr r3, 8007cf8 <AT_SignalQualityReport+0x138>)
 8007c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c72:	f7f8 fb41 	bl	80002f8 <__aeabi_dsub>
 8007c76:	4603      	mov	r3, r0
 8007c78:	460c      	mov	r4, r1
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	4621      	mov	r1, r4
 8007c7e:	f7f8 ff25 	bl	8000acc <__aeabi_d2f>
 8007c82:	4603      	mov	r3, r0
 8007c84:	613b      	str	r3, [r7, #16]
            // Scale dBm to percentage
            signal->percent = (dBm + 115.0) * 100.0 / 63.0;
 8007c86:	6938      	ldr	r0, [r7, #16]
 8007c88:	f7f8 fc96 	bl	80005b8 <__aeabi_f2d>
 8007c8c:	a31a      	add	r3, pc, #104	; (adr r3, 8007cf8 <AT_SignalQualityReport+0x138>)
 8007c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c92:	f7f8 fb33 	bl	80002fc <__adddf3>
 8007c96:	4603      	mov	r3, r0
 8007c98:	460c      	mov	r4, r1
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	4621      	mov	r1, r4
 8007c9e:	f04f 0200 	mov.w	r2, #0
 8007ca2:	4b1b      	ldr	r3, [pc, #108]	; (8007d10 <AT_SignalQualityReport+0x150>)
 8007ca4:	f7f8 fce0 	bl	8000668 <__aeabi_dmul>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	460c      	mov	r4, r1
 8007cac:	4618      	mov	r0, r3
 8007cae:	4621      	mov	r1, r4
 8007cb0:	f04f 0200 	mov.w	r2, #0
 8007cb4:	4b14      	ldr	r3, [pc, #80]	; (8007d08 <AT_SignalQualityReport+0x148>)
 8007cb6:	f7f8 fe01 	bl	80008bc <__aeabi_ddiv>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	460c      	mov	r4, r1
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	4621      	mov	r1, r4
 8007cc2:	f7f8 fee3 	bl	8000a8c <__aeabi_d2uiz>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	b2da      	uxtb	r2, r3
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	709a      	strb	r2, [r3, #2]

            // debugging
            LOG_Str("\nSimcom:RSSI = ");
 8007cce:	4811      	ldr	r0, [pc, #68]	; (8007d14 <AT_SignalQualityReport+0x154>)
 8007cd0:	f001 f8c0 	bl	8008e54 <LOG_Str>
            LOG_Int(signal->percent);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	789b      	ldrb	r3, [r3, #2]
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f001 f843 	bl	8008d64 <LOG_Int>
            LOG_StrLn("%");
 8007cde:	480e      	ldr	r0, [pc, #56]	; (8007d18 <AT_SignalQualityReport+0x158>)
 8007ce0:	f001 f8d0 	bl	8008e84 <LOG_StrLn>
        }
    }
    Simcom_Unlock();
 8007ce4:	f001 f9fe 	bl	80090e4 <Simcom_Unlock>

    return p;
 8007ce8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	371c      	adds	r7, #28
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd90      	pop	{r4, r7, pc}
 8007cf4:	f3af 8000 	nop.w
 8007cf8:	00000000 	.word	0x00000000
 8007cfc:	405cc000 	.word	0x405cc000
 8007d00:	0800a728 	.word	0x0800a728
 8007d04:	0800a730 	.word	0x0800a730
 8007d08:	404f8000 	.word	0x404f8000
 8007d0c:	403f0000 	.word	0x403f0000
 8007d10:	40590000 	.word	0x40590000
 8007d14:	0800a738 	.word	0x0800a738
 8007d18:	0800a748 	.word	0x0800a748

08007d1c <AT_RadioAccessTechnology>:
    Simcom_Unlock();

    return p;
}

SIMCOM_RESULT AT_RadioAccessTechnology(AT_MODE mode, at_cnmp_t *param) {
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b08a      	sub	sp, #40	; 0x28
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	4603      	mov	r3, r0
 8007d24:	6039      	str	r1, [r7, #0]
 8007d26:	71fb      	strb	r3, [r7, #7]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t cnt, len = 0;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    char *str = NULL, cmd[14];
 8007d34:	2300      	movs	r3, #0
 8007d36:	623b      	str	r3, [r7, #32]

    // Copy by value
    at_cnmp_t tmp = *param;
 8007d38:	683a      	ldr	r2, [r7, #0]
 8007d3a:	f107 0308 	add.w	r3, r7, #8
 8007d3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007d42:	e883 0003 	stmia.w	r3, {r0, r1}

    Simcom_Lock();
 8007d46:	f001 f9c6 	bl	80090d6 <Simcom_Lock>
    // Read
    p = AT_CmdRead("AT+CNMP?\r", 500, "+CNMP: ", &str);
 8007d4a:	f107 0320 	add.w	r3, r7, #32
 8007d4e:	4a3a      	ldr	r2, [pc, #232]	; (8007e38 <AT_RadioAccessTechnology+0x11c>)
 8007d50:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8007d54:	4839      	ldr	r0, [pc, #228]	; (8007e3c <AT_RadioAccessTechnology+0x120>)
 8007d56:	f000 fe21 	bl	800899c <AT_CmdRead>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (p > 0) {
 8007d60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	dd5e      	ble.n	8007e26 <AT_RadioAccessTechnology+0x10a>
        param->mode = AT_ParseNumber(&str[len], &cnt);
 8007d68:	6a3a      	ldr	r2, [r7, #32]
 8007d6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007d6e:	4413      	add	r3, r2
 8007d70:	f107 0225 	add.w	r2, r7, #37	; 0x25
 8007d74:	4611      	mov	r1, r2
 8007d76:	4618      	mov	r0, r3
 8007d78:	f000 fe92 	bl	8008aa0 <AT_ParseNumber>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	461a      	mov	r2, r3
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	601a      	str	r2, [r3, #0]
        if (param->mode == CNMP_ACT_AUTO) {
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	d116      	bne.n	8007dba <AT_RadioAccessTechnology+0x9e>
            len += cnt + 1;
 8007d8c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8007d90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007d94:	4413      	add	r3, r2
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	3301      	adds	r3, #1
 8007d9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            param->preferred = AT_ParseNumber(&str[len], &cnt);
 8007d9e:	6a3a      	ldr	r2, [r7, #32]
 8007da0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007da4:	4413      	add	r3, r2
 8007da6:	f107 0225 	add.w	r2, r7, #37	; 0x25
 8007daa:	4611      	mov	r1, r2
 8007dac:	4618      	mov	r0, r3
 8007dae:	f000 fe77 	bl	8008aa0 <AT_ParseNumber>
 8007db2:	4603      	mov	r3, r0
 8007db4:	461a      	mov	r2, r3
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	605a      	str	r2, [r3, #4]
        }

        // Write
        if (mode == ATW) {
 8007dba:	79fb      	ldrb	r3, [r7, #7]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d12a      	bne.n	8007e16 <AT_RadioAccessTechnology+0xfa>
            if (memcmp(&tmp, param, sizeof(at_cnmp_t)) != 0) {
 8007dc0:	f107 0308 	add.w	r3, r7, #8
 8007dc4:	2208      	movs	r2, #8
 8007dc6:	6839      	ldr	r1, [r7, #0]
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f001 fe6f 	bl	8009aac <memcmp>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d028      	beq.n	8007e26 <AT_RadioAccessTechnology+0x10a>
                if (tmp.mode == CNMP_ACT_AUTO) {
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	d109      	bne.n	8007dee <AT_RadioAccessTechnology+0xd2>
                    sprintf(cmd, "AT+CNMP=%d%d\r", param->mode, param->preferred);
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	f107 0010 	add.w	r0, r7, #16
 8007de6:	4916      	ldr	r1, [pc, #88]	; (8007e40 <AT_RadioAccessTechnology+0x124>)
 8007de8:	f001 fe82 	bl	8009af0 <siprintf>
 8007dec:	e007      	b.n	8007dfe <AT_RadioAccessTechnology+0xe2>
                } else {
                    sprintf(cmd, "AT+CNMP=%d\r", param->mode);
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	f107 0310 	add.w	r3, r7, #16
 8007df6:	4913      	ldr	r1, [pc, #76]	; (8007e44 <AT_RadioAccessTechnology+0x128>)
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f001 fe79 	bl	8009af0 <siprintf>
                }

                p = AT_CmdWrite(cmd, 10000, NULL);
 8007dfe:	f107 0310 	add.w	r3, r7, #16
 8007e02:	2200      	movs	r2, #0
 8007e04:	f242 7110 	movw	r1, #10000	; 0x2710
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f000 fda9 	bl	8008960 <AT_CmdWrite>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007e14:	e007      	b.n	8007e26 <AT_RadioAccessTechnology+0x10a>
            }
        } else {
            *param = tmp;
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	461a      	mov	r2, r3
 8007e1a:	f107 0308 	add.w	r3, r7, #8
 8007e1e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007e22:	e882 0003 	stmia.w	r2, {r0, r1}
        }
    }
    Simcom_Unlock();
 8007e26:	f001 f95d 	bl	80090e4 <Simcom_Unlock>

    return p;
 8007e2a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3728      	adds	r7, #40	; 0x28
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	0800a81c 	.word	0x0800a81c
 8007e3c:	0800a824 	.word	0x0800a824
 8007e40:	0800a830 	.word	0x0800a830
 8007e44:	0800a840 	.word	0x0800a840

08007e48 <AT_NetworkAttachedStatus>:

SIMCOM_RESULT AT_NetworkAttachedStatus(AT_MODE mode, at_csact_t *param) {
 8007e48:	b590      	push	{r4, r7, lr}
 8007e4a:	b08d      	sub	sp, #52	; 0x34
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	4603      	mov	r3, r0
 8007e50:	6039      	str	r1, [r7, #0]
 8007e52:	71fb      	strb	r3, [r7, #7]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 8007e54:	2300      	movs	r3, #0
 8007e56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t cnt, len = 0;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    char *str = NULL, cmd[14];
 8007e60:	2300      	movs	r3, #0
 8007e62:	62bb      	str	r3, [r7, #40]	; 0x28

    // Copy by value
    at_csact_t tmp = *param;
 8007e64:	683a      	ldr	r2, [r7, #0]
 8007e66:	f107 030c 	add.w	r3, r7, #12
 8007e6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8007e6c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    Simcom_Lock();
 8007e70:	f001 f931 	bl	80090d6 <Simcom_Lock>
    // Read
    p = AT_CmdRead("AT+CSACT?\r", 500, "+CSACT: ", &str);
 8007e74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007e78:	4a46      	ldr	r2, [pc, #280]	; (8007f94 <AT_NetworkAttachedStatus+0x14c>)
 8007e7a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8007e7e:	4846      	ldr	r0, [pc, #280]	; (8007f98 <AT_NetworkAttachedStatus+0x150>)
 8007e80:	f000 fd8c 	bl	800899c <AT_CmdRead>
 8007e84:	4603      	mov	r3, r0
 8007e86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (p > 0) {
 8007e8a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	dd77      	ble.n	8007f82 <AT_NetworkAttachedStatus+0x13a>
        tmp.act = AT_ParseNumber(&str[len], &cnt);
 8007e92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e94:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007e98:	4413      	add	r3, r2
 8007e9a:	f107 022d 	add.w	r2, r7, #45	; 0x2d
 8007e9e:	4611      	mov	r1, r2
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f000 fdfd 	bl	8008aa0 <AT_ParseNumber>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	60fb      	str	r3, [r7, #12]
        len += cnt + 1;
 8007eaa:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8007eae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007eb2:	4413      	add	r3, r2
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        AT_ParseText(&str[len], &cnt, tmp.rac, sizeof(tmp.rac));
 8007ebc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ebe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007ec2:	18d0      	adds	r0, r2, r3
 8007ec4:	f107 030c 	add.w	r3, r7, #12
 8007ec8:	1d1a      	adds	r2, r3, #4
 8007eca:	f107 012d 	add.w	r1, r7, #45	; 0x2d
 8007ece:	2303      	movs	r3, #3
 8007ed0:	f000 fd9c 	bl	8008a0c <AT_ParseText>
        len += cnt + 1;
 8007ed4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8007ed8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007edc:	4413      	add	r3, r2
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        tmp.creg = AT_ParseNumber(&str[len], &cnt);
 8007ee6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ee8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007eec:	4413      	add	r3, r2
 8007eee:	f107 022d 	add.w	r2, r7, #45	; 0x2d
 8007ef2:	4611      	mov	r1, r2
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f000 fdd3 	bl	8008aa0 <AT_ParseNumber>
 8007efa:	4603      	mov	r3, r0
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	74fb      	strb	r3, [r7, #19]
        len += cnt + 1;
 8007f00:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8007f04:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007f08:	4413      	add	r3, r2
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        tmp.cgreg = AT_ParseNumber(&str[len], &cnt);
 8007f12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f14:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007f18:	4413      	add	r3, r2
 8007f1a:	f107 022d 	add.w	r2, r7, #45	; 0x2d
 8007f1e:	4611      	mov	r1, r2
 8007f20:	4618      	mov	r0, r3
 8007f22:	f000 fdbd 	bl	8008aa0 <AT_ParseNumber>
 8007f26:	4603      	mov	r3, r0
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	753b      	strb	r3, [r7, #20]

        // Write
        if (mode == ATW) {
 8007f2c:	79fb      	ldrb	r3, [r7, #7]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d11f      	bne.n	8007f72 <AT_NetworkAttachedStatus+0x12a>
            if (tmp.cgreg != param->creg || tmp.cgreg != param->cgreg) {
 8007f32:	7d3a      	ldrb	r2, [r7, #20]
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	79db      	ldrb	r3, [r3, #7]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d104      	bne.n	8007f46 <AT_NetworkAttachedStatus+0xfe>
 8007f3c:	7d3a      	ldrb	r2, [r7, #20]
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	7a1b      	ldrb	r3, [r3, #8]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d01d      	beq.n	8007f82 <AT_NetworkAttachedStatus+0x13a>
                sprintf(cmd, "AT+CSACT=%d,%d\r", param->creg, param->cgreg);
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	79db      	ldrb	r3, [r3, #7]
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	7a1b      	ldrb	r3, [r3, #8]
 8007f50:	f107 0018 	add.w	r0, r7, #24
 8007f54:	4911      	ldr	r1, [pc, #68]	; (8007f9c <AT_NetworkAttachedStatus+0x154>)
 8007f56:	f001 fdcb 	bl	8009af0 <siprintf>
                p = AT_CmdWrite(cmd, 500, NULL);
 8007f5a:	f107 0318 	add.w	r3, r7, #24
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8007f64:	4618      	mov	r0, r3
 8007f66:	f000 fcfb 	bl	8008960 <AT_CmdWrite>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007f70:	e007      	b.n	8007f82 <AT_NetworkAttachedStatus+0x13a>
            }
        } else {
            *param = tmp;
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	461c      	mov	r4, r3
 8007f76:	f107 030c 	add.w	r3, r7, #12
 8007f7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007f7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        }
    }
    Simcom_Unlock();
 8007f82:	f001 f8af 	bl	80090e4 <Simcom_Unlock>

    return p;
 8007f86:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3734      	adds	r7, #52	; 0x34
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd90      	pop	{r4, r7, pc}
 8007f92:	bf00      	nop
 8007f94:	0800a84c 	.word	0x0800a84c
 8007f98:	0800a858 	.word	0x0800a858
 8007f9c:	0800a864 	.word	0x0800a864

08007fa0 <AT_NetworkRegistration>:

SIMCOM_RESULT AT_NetworkRegistration(char command[20], AT_MODE mode, at_c_greg_t *param) {
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b090      	sub	sp, #64	; 0x40
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	460b      	mov	r3, r1
 8007faa:	607a      	str	r2, [r7, #4]
 8007fac:	72fb      	strb	r3, [r7, #11]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    uint8_t cnt, len = 0;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    char *str = NULL, cmd[14], res[15];
 8007fba:	2300      	movs	r3, #0
 8007fbc:	63bb      	str	r3, [r7, #56]	; 0x38

    // Copy by value
    at_c_greg_t tmp = *param;
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	f107 0310 	add.w	r3, r7, #16
 8007fc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007fc8:	e883 0003 	stmia.w	r3, {r0, r1}

    Simcom_Lock();
 8007fcc:	f001 f883 	bl	80090d6 <Simcom_Lock>
    // Read
    sprintf(cmd, "AT+%s?\r", command);
 8007fd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	4937      	ldr	r1, [pc, #220]	; (80080b4 <AT_NetworkRegistration+0x114>)
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f001 fd89 	bl	8009af0 <siprintf>
    sprintf(res, "+%s: ", command);
 8007fde:	f107 0318 	add.w	r3, r7, #24
 8007fe2:	68fa      	ldr	r2, [r7, #12]
 8007fe4:	4934      	ldr	r1, [pc, #208]	; (80080b8 <AT_NetworkRegistration+0x118>)
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f001 fd82 	bl	8009af0 <siprintf>
    p = AT_CmdRead(cmd, 500, res, &str);
 8007fec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007ff0:	f107 0218 	add.w	r2, r7, #24
 8007ff4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8007ff8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8007ffc:	f000 fcce 	bl	800899c <AT_CmdRead>
 8008000:	4603      	mov	r3, r0
 8008002:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (p > 0) {
 8008006:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800800a:	2b00      	cmp	r3, #0
 800800c:	dd49      	ble.n	80080a2 <AT_NetworkRegistration+0x102>
        tmp.mode = AT_ParseNumber(&str[len], &cnt);
 800800e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008010:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008014:	4413      	add	r3, r2
 8008016:	f107 023d 	add.w	r2, r7, #61	; 0x3d
 800801a:	4611      	mov	r1, r2
 800801c:	4618      	mov	r0, r3
 800801e:	f000 fd3f 	bl	8008aa0 <AT_ParseNumber>
 8008022:	4603      	mov	r3, r0
 8008024:	613b      	str	r3, [r7, #16]
        len += cnt + 1;
 8008026:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800802a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800802e:	4413      	add	r3, r2
 8008030:	b2db      	uxtb	r3, r3
 8008032:	3301      	adds	r3, #1
 8008034:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        tmp.stat = AT_ParseNumber(&str[len], &cnt);
 8008038:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800803a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800803e:	4413      	add	r3, r2
 8008040:	f107 023d 	add.w	r2, r7, #61	; 0x3d
 8008044:	4611      	mov	r1, r2
 8008046:	4618      	mov	r0, r3
 8008048:	f000 fd2a 	bl	8008aa0 <AT_ParseNumber>
 800804c:	4603      	mov	r3, r0
 800804e:	617b      	str	r3, [r7, #20]

        // Write
        if (mode == ATW) {
 8008050:	7afb      	ldrb	r3, [r7, #11]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d11d      	bne.n	8008092 <AT_NetworkRegistration+0xf2>
            if (memcmp(&tmp, param, sizeof(tmp)) != 0) {
 8008056:	f107 0310 	add.w	r3, r7, #16
 800805a:	2208      	movs	r2, #8
 800805c:	6879      	ldr	r1, [r7, #4]
 800805e:	4618      	mov	r0, r3
 8008060:	f001 fd24 	bl	8009aac <memcmp>
 8008064:	4603      	mov	r3, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d01b      	beq.n	80080a2 <AT_NetworkRegistration+0x102>
                sprintf(cmd, "AT+%s=%d\r", command, param->mode);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8008072:	68fa      	ldr	r2, [r7, #12]
 8008074:	4911      	ldr	r1, [pc, #68]	; (80080bc <AT_NetworkRegistration+0x11c>)
 8008076:	f001 fd3b 	bl	8009af0 <siprintf>
                p = AT_CmdWrite(cmd, 500, NULL);
 800807a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800807e:	2200      	movs	r2, #0
 8008080:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008084:	4618      	mov	r0, r3
 8008086:	f000 fc6b 	bl	8008960 <AT_CmdWrite>
 800808a:	4603      	mov	r3, r0
 800808c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008090:	e007      	b.n	80080a2 <AT_NetworkRegistration+0x102>
            }
        } else {
            *param = tmp;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	461a      	mov	r2, r3
 8008096:	f107 0310 	add.w	r3, r7, #16
 800809a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800809e:	e882 0003 	stmia.w	r2, {r0, r1}
        }
    }
    Simcom_Unlock();
 80080a2:	f001 f81f 	bl	80090e4 <Simcom_Unlock>

    return p;
 80080a6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3740      	adds	r7, #64	; 0x40
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	0800a874 	.word	0x0800a874
 80080b8:	0800a87c 	.word	0x0800a87c
 80080bc:	0800a884 	.word	0x0800a884

080080c0 <AT_ConfigureSlowClock>:

SIMCOM_RESULT AT_ConfigureSlowClock(AT_MODE mode, AT_CSCLK *state) {
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	4603      	mov	r3, r0
 80080c8:	6039      	str	r1, [r7, #0]
 80080ca:	71fb      	strb	r3, [r7, #7]
    return AT_SingleInteger("CSCLK", mode, (int32_t*) state, 0);
 80080cc:	79f9      	ldrb	r1, [r7, #7]
 80080ce:	2300      	movs	r3, #0
 80080d0:	683a      	ldr	r2, [r7, #0]
 80080d2:	4804      	ldr	r0, [pc, #16]	; (80080e4 <AT_ConfigureSlowClock+0x24>)
 80080d4:	f000 fbd4 	bl	8008880 <AT_SingleInteger>
 80080d8:	4603      	mov	r3, r0
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3708      	adds	r7, #8
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	0800a890 	.word	0x0800a890

080080e8 <AT_ReportMobileEquipmentError>:

SIMCOM_RESULT AT_ReportMobileEquipmentError(AT_MODE mode, AT_CMEE *state) {
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	4603      	mov	r3, r0
 80080f0:	6039      	str	r1, [r7, #0]
 80080f2:	71fb      	strb	r3, [r7, #7]
    return AT_SingleInteger("CMEE", mode, (int32_t*) state, 0);
 80080f4:	79f9      	ldrb	r1, [r7, #7]
 80080f6:	2300      	movs	r3, #0
 80080f8:	683a      	ldr	r2, [r7, #0]
 80080fa:	4804      	ldr	r0, [pc, #16]	; (800810c <AT_ReportMobileEquipmentError+0x24>)
 80080fc:	f000 fbc0 	bl	8008880 <AT_SingleInteger>
 8008100:	4603      	mov	r3, r0
}
 8008102:	4618      	mov	r0, r3
 8008104:	3708      	adds	r7, #8
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	0800a898 	.word	0x0800a898

08008110 <AT_FixedLocalRate>:

SIMCOM_RESULT AT_FixedLocalRate(AT_MODE mode, uint32_t *rate) {
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af00      	add	r7, sp, #0
 8008116:	4603      	mov	r3, r0
 8008118:	6039      	str	r1, [r7, #0]
 800811a:	71fb      	strb	r3, [r7, #7]
    return AT_SingleInteger("IPR", mode, (int32_t*) rate, 0);
 800811c:	79f9      	ldrb	r1, [r7, #7]
 800811e:	2300      	movs	r3, #0
 8008120:	683a      	ldr	r2, [r7, #0]
 8008122:	4804      	ldr	r0, [pc, #16]	; (8008134 <AT_FixedLocalRate+0x24>)
 8008124:	f000 fbac 	bl	8008880 <AT_SingleInteger>
 8008128:	4603      	mov	r3, r0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3708      	adds	r7, #8
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	0800a8a0 	.word	0x0800a8a0

08008138 <AT_FtpInitialize>:

SIMCOM_RESULT AT_EnableLocalTimestamp(AT_MODE mode, AT_BOOL *state) {
    return AT_SingleInteger("CLTS", mode, (int32_t*) state, 0);
}
#else
SIMCOM_RESULT AT_FtpInitialize(at_ftp_t *param) {
 8008138:	b580      	push	{r7, lr}
 800813a:	b086      	sub	sp, #24
 800813c:	af02      	add	r7, sp, #8
 800813e:	6078      	str	r0, [r7, #4]
    SIMCOM_RESULT p;

    Simcom_Lock();
 8008140:	f000 ffc9 	bl	80090d6 <Simcom_Lock>
    p = AT_SingleInteger("FTPCID", ATW, &param->id, 0);
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	2300      	movs	r3, #0
 8008148:	2100      	movs	r1, #0
 800814a:	482e      	ldr	r0, [pc, #184]	; (8008204 <AT_FtpInitialize+0xcc>)
 800814c:	f000 fb98 	bl	8008880 <AT_SingleInteger>
 8008150:	4603      	mov	r3, r0
 8008152:	73fb      	strb	r3, [r7, #15]

    // set server & credential
    if (p > 0) {
 8008154:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008158:	2b00      	cmp	r3, #0
 800815a:	dd0a      	ble.n	8008172 <AT_FtpInitialize+0x3a>
        p = AT_SingleString("FTPSERV", ATW, param->server, sizeof(param->server), 0);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	1d1a      	adds	r2, r3, #4
 8008160:	2300      	movs	r3, #0
 8008162:	9300      	str	r3, [sp, #0]
 8008164:	231e      	movs	r3, #30
 8008166:	2100      	movs	r1, #0
 8008168:	4827      	ldr	r0, [pc, #156]	; (8008208 <AT_FtpInitialize+0xd0>)
 800816a:	f000 fac7 	bl	80086fc <AT_SingleString>
 800816e:	4603      	mov	r3, r0
 8008170:	73fb      	strb	r3, [r7, #15]
    }
    if (p > 0) {
 8008172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008176:	2b00      	cmp	r3, #0
 8008178:	dd0b      	ble.n	8008192 <AT_FtpInitialize+0x5a>
        p = AT_SingleString("FTPUN", ATW, param->username, sizeof(param->username), 0);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8008180:	2300      	movs	r3, #0
 8008182:	9300      	str	r3, [sp, #0]
 8008184:	231e      	movs	r3, #30
 8008186:	2100      	movs	r1, #0
 8008188:	4820      	ldr	r0, [pc, #128]	; (800820c <AT_FtpInitialize+0xd4>)
 800818a:	f000 fab7 	bl	80086fc <AT_SingleString>
 800818e:	4603      	mov	r3, r0
 8008190:	73fb      	strb	r3, [r7, #15]
    }
    if (p > 0) {
 8008192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008196:	2b00      	cmp	r3, #0
 8008198:	dd0b      	ble.n	80081b2 <AT_FtpInitialize+0x7a>
        p = AT_SingleString("FTPPW", ATW, param->password, sizeof(param->password), 0);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80081a0:	2300      	movs	r3, #0
 80081a2:	9300      	str	r3, [sp, #0]
 80081a4:	2314      	movs	r3, #20
 80081a6:	2100      	movs	r1, #0
 80081a8:	4819      	ldr	r0, [pc, #100]	; (8008210 <AT_FtpInitialize+0xd8>)
 80081aa:	f000 faa7 	bl	80086fc <AT_SingleString>
 80081ae:	4603      	mov	r3, r0
 80081b0:	73fb      	strb	r3, [r7, #15]
    }
    // set path & file
    if (p > 0) {
 80081b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	dd0b      	ble.n	80081d2 <AT_FtpInitialize+0x9a>
        p = AT_SingleString("FTPGETPATH", ATW, param->path, sizeof(param->path), 0);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80081c0:	2300      	movs	r3, #0
 80081c2:	9300      	str	r3, [sp, #0]
 80081c4:	2314      	movs	r3, #20
 80081c6:	2100      	movs	r1, #0
 80081c8:	4812      	ldr	r0, [pc, #72]	; (8008214 <AT_FtpInitialize+0xdc>)
 80081ca:	f000 fa97 	bl	80086fc <AT_SingleString>
 80081ce:	4603      	mov	r3, r0
 80081d0:	73fb      	strb	r3, [r7, #15]
    }
    if (p > 0) {
 80081d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	dd0b      	ble.n	80081f2 <AT_FtpInitialize+0xba>
        p = AT_SingleString("FTPGETNAME", ATW, param->file, sizeof(param->file), 0);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80081e0:	2300      	movs	r3, #0
 80081e2:	9300      	str	r3, [sp, #0]
 80081e4:	2314      	movs	r3, #20
 80081e6:	2100      	movs	r1, #0
 80081e8:	480b      	ldr	r0, [pc, #44]	; (8008218 <AT_FtpInitialize+0xe0>)
 80081ea:	f000 fa87 	bl	80086fc <AT_SingleString>
 80081ee:	4603      	mov	r3, r0
 80081f0:	73fb      	strb	r3, [r7, #15]
    }

    Simcom_Unlock();
 80081f2:	f000 ff77 	bl	80090e4 <Simcom_Unlock>
    return p;
 80081f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	0800a8a4 	.word	0x0800a8a4
 8008208:	0800a8ac 	.word	0x0800a8ac
 800820c:	0800a8b4 	.word	0x0800a8b4
 8008210:	0800a8bc 	.word	0x0800a8bc
 8008214:	0800a8c4 	.word	0x0800a8c4
 8008218:	0800a8d0 	.word	0x0800a8d0

0800821c <AT_FtpFileSize>:

SIMCOM_RESULT AT_FtpFileSize(at_ftp_t *param) {
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 8008224:	2300      	movs	r3, #0
 8008226:	73fb      	strb	r3, [r7, #15]
    uint8_t cnt, len = 0;
 8008228:	2300      	movs	r3, #0
 800822a:	73bb      	strb	r3, [r7, #14]
    char *str = NULL;
 800822c:	2300      	movs	r3, #0
 800822e:	60bb      	str	r3, [r7, #8]

    Simcom_Lock();
 8008230:	f000 ff51 	bl	80090d6 <Simcom_Lock>
    // Read
    p = AT_CmdRead("AT+FTPSIZE\r", 90000, "+FTPSIZE: ", &str);
 8008234:	f107 0308 	add.w	r3, r7, #8
 8008238:	4a24      	ldr	r2, [pc, #144]	; (80082cc <AT_FtpFileSize+0xb0>)
 800823a:	4925      	ldr	r1, [pc, #148]	; (80082d0 <AT_FtpFileSize+0xb4>)
 800823c:	4825      	ldr	r0, [pc, #148]	; (80082d4 <AT_FtpFileSize+0xb8>)
 800823e:	f000 fbad 	bl	800899c <AT_CmdRead>
 8008242:	4603      	mov	r3, r0
 8008244:	73fb      	strb	r3, [r7, #15]
    if (p > 0) {
 8008246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800824a:	2b00      	cmp	r3, #0
 800824c:	dd35      	ble.n	80082ba <AT_FtpFileSize+0x9e>
        // parsing
        AT_ParseNumber(&str[len], &cnt);
 800824e:	68ba      	ldr	r2, [r7, #8]
 8008250:	7bbb      	ldrb	r3, [r7, #14]
 8008252:	4413      	add	r3, r2
 8008254:	f107 020d 	add.w	r2, r7, #13
 8008258:	4611      	mov	r1, r2
 800825a:	4618      	mov	r0, r3
 800825c:	f000 fc20 	bl	8008aa0 <AT_ParseNumber>
        len += cnt + 1;
 8008260:	7b7a      	ldrb	r2, [r7, #13]
 8008262:	7bbb      	ldrb	r3, [r7, #14]
 8008264:	4413      	add	r3, r2
 8008266:	b2db      	uxtb	r3, r3
 8008268:	3301      	adds	r3, #1
 800826a:	73bb      	strb	r3, [r7, #14]
        param->response = AT_ParseNumber(&str[len], &cnt);
 800826c:	68ba      	ldr	r2, [r7, #8]
 800826e:	7bbb      	ldrb	r3, [r7, #14]
 8008270:	4413      	add	r3, r2
 8008272:	f107 020d 	add.w	r2, r7, #13
 8008276:	4611      	mov	r1, r2
 8008278:	4618      	mov	r0, r3
 800827a:	f000 fc11 	bl	8008aa0 <AT_ParseNumber>
 800827e:	4603      	mov	r3, r0
 8008280:	461a      	mov	r2, r3
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        if (param->response == FTP_FINISH) {
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800828e:	2b00      	cmp	r3, #0
 8008290:	d113      	bne.n	80082ba <AT_FtpFileSize+0x9e>
            len += cnt + 1;
 8008292:	7b7a      	ldrb	r2, [r7, #13]
 8008294:	7bbb      	ldrb	r3, [r7, #14]
 8008296:	4413      	add	r3, r2
 8008298:	b2db      	uxtb	r3, r3
 800829a:	3301      	adds	r3, #1
 800829c:	73bb      	strb	r3, [r7, #14]
            param->size = AT_ParseNumber(&str[len], &cnt);
 800829e:	68ba      	ldr	r2, [r7, #8]
 80082a0:	7bbb      	ldrb	r3, [r7, #14]
 80082a2:	4413      	add	r3, r2
 80082a4:	f107 020d 	add.w	r2, r7, #13
 80082a8:	4611      	mov	r1, r2
 80082aa:	4618      	mov	r0, r3
 80082ac:	f000 fbf8 	bl	8008aa0 <AT_ParseNumber>
 80082b0:	4603      	mov	r3, r0
 80082b2:	461a      	mov	r2, r3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
    }
    Simcom_Unlock();
 80082ba:	f000 ff13 	bl	80090e4 <Simcom_Unlock>

    return p;
 80082be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3710      	adds	r7, #16
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	0800a8dc 	.word	0x0800a8dc
 80082d0:	00015f90 	.word	0x00015f90
 80082d4:	0800a8e8 	.word	0x0800a8e8

080082d8 <AT_FtpDownload>:

SIMCOM_RESULT AT_FtpDownload(at_ftpget_t *param) {
 80082d8:	b580      	push	{r7, lr}
 80082da:	b09c      	sub	sp, #112	; 0x70
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 80082e0:	2300      	movs	r3, #0
 80082e2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    uint32_t tick;
    uint8_t cnt, len = 0;
 80082e6:	2300      	movs	r3, #0
 80082e8:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
    char *ptr, *str = NULL, cmd[80];
 80082ec:	2300      	movs	r3, #0
 80082ee:	65fb      	str	r3, [r7, #92]	; 0x5c

    Simcom_Lock();
 80082f0:	f000 fef1 	bl	80090d6 <Simcom_Lock>
    // Open or Read
    if (param->mode == FTPGET_OPEN) {
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d108      	bne.n	800830e <AT_FtpDownload+0x36>
        sprintf(cmd, "AT+FTPGET=%d\r", param->mode);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	f107 030c 	add.w	r3, r7, #12
 8008304:	4946      	ldr	r1, [pc, #280]	; (8008420 <AT_FtpDownload+0x148>)
 8008306:	4618      	mov	r0, r3
 8008308:	f001 fbf2 	bl	8009af0 <siprintf>
 800830c:	e008      	b.n	8008320 <AT_FtpDownload+0x48>
    } else {
        sprintf(cmd, "AT+FTPGET=%d,%d\r", param->mode, param->reqlength);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	891b      	ldrh	r3, [r3, #8]
 8008316:	f107 000c 	add.w	r0, r7, #12
 800831a:	4942      	ldr	r1, [pc, #264]	; (8008424 <AT_FtpDownload+0x14c>)
 800831c:	f001 fbe8 	bl	8009af0 <siprintf>
    }

    p = AT_CmdRead(cmd, 90000, "+FTPGET: ", &str);
 8008320:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008324:	f107 000c 	add.w	r0, r7, #12
 8008328:	4a3f      	ldr	r2, [pc, #252]	; (8008428 <AT_FtpDownload+0x150>)
 800832a:	4940      	ldr	r1, [pc, #256]	; (800842c <AT_FtpDownload+0x154>)
 800832c:	f000 fb36 	bl	800899c <AT_CmdRead>
 8008330:	4603      	mov	r3, r0
 8008332:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

    if (p > 0) {
 8008336:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800833a:	2b00      	cmp	r3, #0
 800833c:	dd67      	ble.n	800840e <AT_FtpDownload+0x136>
        // parsing
        AT_ParseNumber(&str[len], &cnt);
 800833e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008340:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8008344:	4413      	add	r3, r2
 8008346:	f107 0263 	add.w	r2, r7, #99	; 0x63
 800834a:	4611      	mov	r1, r2
 800834c:	4618      	mov	r0, r3
 800834e:	f000 fba7 	bl	8008aa0 <AT_ParseNumber>
        len += cnt + 1;
 8008352:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 8008356:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800835a:	4413      	add	r3, r2
 800835c:	b2db      	uxtb	r3, r3
 800835e:	3301      	adds	r3, #1
 8008360:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
        if (param->mode == FTPGET_OPEN) {
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	2b01      	cmp	r3, #1
 800836a:	d10e      	bne.n	800838a <AT_FtpDownload+0xb2>
            param->response = AT_ParseNumber(&str[len], &cnt);
 800836c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800836e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8008372:	4413      	add	r3, r2
 8008374:	f107 0263 	add.w	r2, r7, #99	; 0x63
 8008378:	4611      	mov	r1, r2
 800837a:	4618      	mov	r0, r3
 800837c:	f000 fb90 	bl	8008aa0 <AT_ParseNumber>
 8008380:	4603      	mov	r3, r0
 8008382:	461a      	mov	r2, r3
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	605a      	str	r2, [r3, #4]
 8008388:	e041      	b.n	800840e <AT_FtpDownload+0x136>
        } else {
            param->cnflength = AT_ParseNumber(&str[len], &cnt);
 800838a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800838c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8008390:	4413      	add	r3, r2
 8008392:	f107 0263 	add.w	r2, r7, #99	; 0x63
 8008396:	4611      	mov	r1, r2
 8008398:	4618      	mov	r0, r3
 800839a:	f000 fb81 	bl	8008aa0 <AT_ParseNumber>
 800839e:	4603      	mov	r3, r0
 80083a0:	b29a      	uxth	r2, r3
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	815a      	strh	r2, [r3, #10]
            len += cnt + 2;
 80083a6:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 80083aa:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80083ae:	4413      	add	r3, r2
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	3302      	adds	r3, #2
 80083b4:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
            // start of file content
            param->ptr = &str[len];
 80083b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80083ba:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80083be:	441a      	add	r2, r3
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	60da      	str	r2, [r3, #12]
            // wait until data transferred
            ptr = &str[len + param->cnflength + 2];
 80083c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80083c6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80083ca:	6879      	ldr	r1, [r7, #4]
 80083cc:	8949      	ldrh	r1, [r1, #10]
 80083ce:	440b      	add	r3, r1
 80083d0:	3302      	adds	r3, #2
 80083d2:	4413      	add	r3, r2
 80083d4:	66bb      	str	r3, [r7, #104]	; 0x68

            tick = _GetTickMS();
 80083d6:	f001 fae9 	bl	80099ac <_GetTickMS>
 80083da:	6678      	str	r0, [r7, #100]	; 0x64
            while (strncmp(ptr, SIMCOM_RSP_OK, strlen(SIMCOM_RSP_OK)) != 0) {
 80083dc:	e00f      	b.n	80083fe <AT_FtpDownload+0x126>
                if (_GetTickMS() - tick > (5 * 1000)) {
 80083de:	f001 fae5 	bl	80099ac <_GetTickMS>
 80083e2:	4602      	mov	r2, r0
 80083e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083e6:	1ad3      	subs	r3, r2, r3
 80083e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d903      	bls.n	80083f8 <AT_FtpDownload+0x120>
                    p = SIM_RESULT_ERROR;
 80083f0:	2300      	movs	r3, #0
 80083f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                    break;
 80083f6:	e00a      	b.n	800840e <AT_FtpDownload+0x136>
                };
                _DelayMS(1);
 80083f8:	2001      	movs	r0, #1
 80083fa:	f001 facc 	bl	8009996 <_DelayMS>
            while (strncmp(ptr, SIMCOM_RSP_OK, strlen(SIMCOM_RSP_OK)) != 0) {
 80083fe:	2203      	movs	r2, #3
 8008400:	490b      	ldr	r1, [pc, #44]	; (8008430 <AT_FtpDownload+0x158>)
 8008402:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8008404:	f001 fb94 	bl	8009b30 <strncmp>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d1e7      	bne.n	80083de <AT_FtpDownload+0x106>
            };
        }
    }
    Simcom_Unlock();
 800840e:	f000 fe69 	bl	80090e4 <Simcom_Unlock>

    return p;
 8008412:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8008416:	4618      	mov	r0, r3
 8008418:	3770      	adds	r7, #112	; 0x70
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	0800a8f4 	.word	0x0800a8f4
 8008424:	0800a904 	.word	0x0800a904
 8008428:	0800a918 	.word	0x0800a918
 800842c:	00015f90 	.word	0x00015f90
 8008430:	0800a924 	.word	0x0800a924

08008434 <AT_FtpCurrentState>:

SIMCOM_RESULT AT_FtpCurrentState(AT_FTP_STATE *state) {
 8008434:	b580      	push	{r7, lr}
 8008436:	b082      	sub	sp, #8
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
    return AT_SingleInteger("FTPSTATE", ATR, (int32_t*) state, 1);
 800843c:	2301      	movs	r3, #1
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	2101      	movs	r1, #1
 8008442:	4804      	ldr	r0, [pc, #16]	; (8008454 <AT_FtpCurrentState+0x20>)
 8008444:	f000 fa1c 	bl	8008880 <AT_SingleInteger>
 8008448:	4603      	mov	r3, r0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3708      	adds	r7, #8
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	0800a928 	.word	0x0800a928

08008458 <AT_BearerSettings>:

SIMCOM_RESULT AT_BearerSettings(AT_MODE mode, at_sapbr_t *param) {
 8008458:	b590      	push	{r4, r7, lr}
 800845a:	b0ab      	sub	sp, #172	; 0xac
 800845c:	af00      	add	r7, sp, #0
 800845e:	4603      	mov	r3, r0
 8008460:	6039      	str	r1, [r7, #0]
 8008462:	71fb      	strb	r3, [r7, #7]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 8008464:	2300      	movs	r3, #0
 8008466:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    uint8_t cnt, len = 0;
 800846a:	2300      	movs	r3, #0
 800846c:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
    char *str = NULL, cmd[80];
 8008470:	2300      	movs	r3, #0
 8008472:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    // Copy by value
    at_sapbr_t tmp = *param;
 8008476:	683a      	ldr	r2, [r7, #0]
 8008478:	f107 030c 	add.w	r3, r7, #12
 800847c:	4611      	mov	r1, r2
 800847e:	2244      	movs	r2, #68	; 0x44
 8008480:	4618      	mov	r0, r3
 8008482:	f001 fb22 	bl	8009aca <memcpy>

    Simcom_Lock();
 8008486:	f000 fe26 	bl	80090d6 <Simcom_Lock>
    // Read
    sprintf(cmd, "AT+SAPBR=%d,1\r", SAPBR_BEARER_QUERY);
 800848a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800848e:	2202      	movs	r2, #2
 8008490:	4990      	ldr	r1, [pc, #576]	; (80086d4 <AT_BearerSettings+0x27c>)
 8008492:	4618      	mov	r0, r3
 8008494:	f001 fb2c 	bl	8009af0 <siprintf>
    p = AT_CmdRead(cmd, 500, "+SAPBR: ", &str);
 8008498:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800849c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80084a0:	4a8d      	ldr	r2, [pc, #564]	; (80086d8 <AT_BearerSettings+0x280>)
 80084a2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80084a6:	f000 fa79 	bl	800899c <AT_CmdRead>
 80084aa:	4603      	mov	r3, r0
 80084ac:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    if (p > 0) {
 80084b0:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	f340 8105 	ble.w	80086c4 <AT_BearerSettings+0x26c>
        tmp.cmd_type = AT_ParseNumber(&str[len], &cnt);
 80084ba:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80084be:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 80084c2:	4413      	add	r3, r2
 80084c4:	f107 02a5 	add.w	r2, r7, #165	; 0xa5
 80084c8:	4611      	mov	r1, r2
 80084ca:	4618      	mov	r0, r3
 80084cc:	f000 fae8 	bl	8008aa0 <AT_ParseNumber>
 80084d0:	4603      	mov	r3, r0
 80084d2:	60fb      	str	r3, [r7, #12]
        len += cnt + 1;
 80084d4:	f897 20a5 	ldrb.w	r2, [r7, #165]	; 0xa5
 80084d8:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 80084dc:	4413      	add	r3, r2
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	3301      	adds	r3, #1
 80084e2:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
        tmp.status = AT_ParseNumber(&str[len], &cnt);
 80084e6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80084ea:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 80084ee:	4413      	add	r3, r2
 80084f0:	f107 02a5 	add.w	r2, r7, #165	; 0xa5
 80084f4:	4611      	mov	r1, r2
 80084f6:	4618      	mov	r0, r3
 80084f8:	f000 fad2 	bl	8008aa0 <AT_ParseNumber>
 80084fc:	4603      	mov	r3, r0
 80084fe:	613b      	str	r3, [r7, #16]

        // Read parameters
        p = AT_CmdRead("AT+SAPBR=4,1\r", 500, "+SAPBR:", &str);
 8008500:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008504:	4a75      	ldr	r2, [pc, #468]	; (80086dc <AT_BearerSettings+0x284>)
 8008506:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800850a:	4875      	ldr	r0, [pc, #468]	; (80086e0 <AT_BearerSettings+0x288>)
 800850c:	f000 fa46 	bl	800899c <AT_CmdRead>
 8008510:	4603      	mov	r3, r0
 8008512:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        if (p > 0) {
 8008516:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800851a:	2b00      	cmp	r3, #0
 800851c:	dd38      	ble.n	8008590 <AT_BearerSettings+0x138>
            if (AT_FindInBuffer("APN: ", &str)) {
 800851e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008522:	4619      	mov	r1, r3
 8008524:	486f      	ldr	r0, [pc, #444]	; (80086e4 <AT_BearerSettings+0x28c>)
 8008526:	f000 f987 	bl	8008838 <AT_FindInBuffer>
 800852a:	4603      	mov	r3, r0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d009      	beq.n	8008544 <AT_BearerSettings+0xec>
                AT_ParseText(&str[0], NULL, tmp.con.apn, sizeof(tmp.con.apn));
 8008530:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8008534:	f107 030c 	add.w	r3, r7, #12
 8008538:	f103 0208 	add.w	r2, r3, #8
 800853c:	2314      	movs	r3, #20
 800853e:	2100      	movs	r1, #0
 8008540:	f000 fa64 	bl	8008a0c <AT_ParseText>
            }
            if (AT_FindInBuffer("USER: ", &str)) {
 8008544:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008548:	4619      	mov	r1, r3
 800854a:	4867      	ldr	r0, [pc, #412]	; (80086e8 <AT_BearerSettings+0x290>)
 800854c:	f000 f974 	bl	8008838 <AT_FindInBuffer>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d009      	beq.n	800856a <AT_BearerSettings+0x112>
                AT_ParseText(&str[0], NULL, tmp.con.username, sizeof(tmp.con.username));
 8008556:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800855a:	f107 030c 	add.w	r3, r7, #12
 800855e:	f103 021c 	add.w	r2, r3, #28
 8008562:	2314      	movs	r3, #20
 8008564:	2100      	movs	r1, #0
 8008566:	f000 fa51 	bl	8008a0c <AT_ParseText>
            }
            if (AT_FindInBuffer("PWD: ", &str)) {
 800856a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800856e:	4619      	mov	r1, r3
 8008570:	485e      	ldr	r0, [pc, #376]	; (80086ec <AT_BearerSettings+0x294>)
 8008572:	f000 f961 	bl	8008838 <AT_FindInBuffer>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d009      	beq.n	8008590 <AT_BearerSettings+0x138>
                AT_ParseText(&str[0], NULL, tmp.con.password, sizeof(tmp.con.password));
 800857c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8008580:	f107 030c 	add.w	r3, r7, #12
 8008584:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008588:	2314      	movs	r3, #20
 800858a:	2100      	movs	r1, #0
 800858c:	f000 fa3e 	bl	8008a0c <AT_ParseText>
            }
        }

        // Write
        if (mode == ATW) {
 8008590:	79fb      	ldrb	r3, [r7, #7]
 8008592:	2b00      	cmp	r3, #0
 8008594:	f040 808e 	bne.w	80086b4 <AT_BearerSettings+0x25c>
            if (memcmp(tmp.con.apn, param->con.apn, strlen(param->con.apn)) != 0) {
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	f103 0408 	add.w	r4, r3, #8
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	3308      	adds	r3, #8
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7f7 fe46 	bl	8000234 <strlen>
 80085a8:	4602      	mov	r2, r0
 80085aa:	f107 030c 	add.w	r3, r7, #12
 80085ae:	3308      	adds	r3, #8
 80085b0:	4621      	mov	r1, r4
 80085b2:	4618      	mov	r0, r3
 80085b4:	f001 fa7a 	bl	8009aac <memcmp>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d013      	beq.n	80085e6 <AT_BearerSettings+0x18e>
                sprintf(cmd, "AT+SAPBR=3,1,\"APN\",\"%s\"\r", param->con.apn);
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	f103 0208 	add.w	r2, r3, #8
 80085c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80085c8:	4949      	ldr	r1, [pc, #292]	; (80086f0 <AT_BearerSettings+0x298>)
 80085ca:	4618      	mov	r0, r3
 80085cc:	f001 fa90 	bl	8009af0 <siprintf>
                p = AT_CmdWrite(cmd, 500, NULL);
 80085d0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80085d4:	2200      	movs	r2, #0
 80085d6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80085da:	4618      	mov	r0, r3
 80085dc:	f000 f9c0 	bl	8008960 <AT_CmdWrite>
 80085e0:	4603      	mov	r3, r0
 80085e2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
            }
            if (memcmp(tmp.con.apn, param->con.username, strlen(param->con.username)) != 0) {
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	f103 041c 	add.w	r4, r3, #28
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	331c      	adds	r3, #28
 80085f0:	4618      	mov	r0, r3
 80085f2:	f7f7 fe1f 	bl	8000234 <strlen>
 80085f6:	4602      	mov	r2, r0
 80085f8:	f107 030c 	add.w	r3, r7, #12
 80085fc:	3308      	adds	r3, #8
 80085fe:	4621      	mov	r1, r4
 8008600:	4618      	mov	r0, r3
 8008602:	f001 fa53 	bl	8009aac <memcmp>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d013      	beq.n	8008634 <AT_BearerSettings+0x1dc>
                sprintf(cmd, "AT+SAPBR=3,1,\"USER\",\"%s\"\r", param->con.username);
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	f103 021c 	add.w	r2, r3, #28
 8008612:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008616:	4937      	ldr	r1, [pc, #220]	; (80086f4 <AT_BearerSettings+0x29c>)
 8008618:	4618      	mov	r0, r3
 800861a:	f001 fa69 	bl	8009af0 <siprintf>
                p = AT_CmdWrite(cmd, 500, NULL);
 800861e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008622:	2200      	movs	r2, #0
 8008624:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008628:	4618      	mov	r0, r3
 800862a:	f000 f999 	bl	8008960 <AT_CmdWrite>
 800862e:	4603      	mov	r3, r0
 8008630:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
            }
            if (memcmp(tmp.con.apn, param->con.password, strlen(param->con.password)) != 0) {
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	3330      	adds	r3, #48	; 0x30
 800863e:	4618      	mov	r0, r3
 8008640:	f7f7 fdf8 	bl	8000234 <strlen>
 8008644:	4602      	mov	r2, r0
 8008646:	f107 030c 	add.w	r3, r7, #12
 800864a:	3308      	adds	r3, #8
 800864c:	4621      	mov	r1, r4
 800864e:	4618      	mov	r0, r3
 8008650:	f001 fa2c 	bl	8009aac <memcmp>
 8008654:	4603      	mov	r3, r0
 8008656:	2b00      	cmp	r3, #0
 8008658:	d013      	beq.n	8008682 <AT_BearerSettings+0x22a>
                sprintf(cmd, "AT+SAPBR=3,1,\"PWD\",\"%s\"\r", param->con.password);
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008660:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008664:	4924      	ldr	r1, [pc, #144]	; (80086f8 <AT_BearerSettings+0x2a0>)
 8008666:	4618      	mov	r0, r3
 8008668:	f001 fa42 	bl	8009af0 <siprintf>
                p = AT_CmdWrite(cmd, 500, NULL);
 800866c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008670:	2200      	movs	r2, #0
 8008672:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008676:	4618      	mov	r0, r3
 8008678:	f000 f972 	bl	8008960 <AT_CmdWrite>
 800867c:	4603      	mov	r3, r0
 800867e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
            }

            // open or close
            if (tmp.status != param->status) {
 8008682:	693a      	ldr	r2, [r7, #16]
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	429a      	cmp	r2, r3
 800868a:	d01b      	beq.n	80086c4 <AT_BearerSettings+0x26c>
                sprintf(cmd, "AT+SAPBR=%d,1\r", param->cmd_type);
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008694:	490f      	ldr	r1, [pc, #60]	; (80086d4 <AT_BearerSettings+0x27c>)
 8008696:	4618      	mov	r0, r3
 8008698:	f001 fa2a 	bl	8009af0 <siprintf>
                p = AT_CmdWrite(cmd, 60000, NULL);
 800869c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80086a0:	2200      	movs	r2, #0
 80086a2:	f64e 2160 	movw	r1, #60000	; 0xea60
 80086a6:	4618      	mov	r0, r3
 80086a8:	f000 f95a 	bl	8008960 <AT_CmdWrite>
 80086ac:	4603      	mov	r3, r0
 80086ae:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80086b2:	e007      	b.n	80086c4 <AT_BearerSettings+0x26c>
            }
        } else {
            *param = tmp;
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	4618      	mov	r0, r3
 80086b8:	f107 030c 	add.w	r3, r7, #12
 80086bc:	2244      	movs	r2, #68	; 0x44
 80086be:	4619      	mov	r1, r3
 80086c0:	f001 fa03 	bl	8009aca <memcpy>
        }
    }
    Simcom_Unlock();
 80086c4:	f000 fd0e 	bl	80090e4 <Simcom_Unlock>

    return p;
 80086c8:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	37ac      	adds	r7, #172	; 0xac
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd90      	pop	{r4, r7, pc}
 80086d4:	0800a934 	.word	0x0800a934
 80086d8:	0800a944 	.word	0x0800a944
 80086dc:	0800a950 	.word	0x0800a950
 80086e0:	0800a958 	.word	0x0800a958
 80086e4:	0800a968 	.word	0x0800a968
 80086e8:	0800a970 	.word	0x0800a970
 80086ec:	0800a978 	.word	0x0800a978
 80086f0:	0800a980 	.word	0x0800a980
 80086f4:	0800a99c 	.word	0x0800a99c
 80086f8:	0800a9b8 	.word	0x0800a9b8

080086fc <AT_SingleString>:
#endif

/* Private functions implementation --------------------------------------------*/
#if (BOOTLOADER)
static SIMCOM_RESULT AT_SingleString(char command[20], AT_MODE mode, char *string, uint8_t size, uint8_t executor) {
 80086fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086fe:	b093      	sub	sp, #76	; 0x4c
 8008700:	af00      	add	r7, sp, #0
 8008702:	60f8      	str	r0, [r7, #12]
 8008704:	607a      	str	r2, [r7, #4]
 8008706:	461a      	mov	r2, r3
 8008708:	460b      	mov	r3, r1
 800870a:	72fb      	strb	r3, [r7, #11]
 800870c:	4613      	mov	r3, r2
 800870e:	72bb      	strb	r3, [r7, #10]
 8008710:	466b      	mov	r3, sp
 8008712:	461e      	mov	r6, r3
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 8008714:	2300      	movs	r3, #0
 8008716:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    char *str = NULL, cmd[20], res[20], tmp[size];
 800871a:	2300      	movs	r3, #0
 800871c:	63bb      	str	r3, [r7, #56]	; 0x38
 800871e:	7abd      	ldrb	r5, [r7, #10]
 8008720:	462b      	mov	r3, r5
 8008722:	3b01      	subs	r3, #1
 8008724:	643b      	str	r3, [r7, #64]	; 0x40
 8008726:	b2e9      	uxtb	r1, r5
 8008728:	f04f 0200 	mov.w	r2, #0
 800872c:	f04f 0300 	mov.w	r3, #0
 8008730:	f04f 0400 	mov.w	r4, #0
 8008734:	00d4      	lsls	r4, r2, #3
 8008736:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800873a:	00cb      	lsls	r3, r1, #3
 800873c:	b2e9      	uxtb	r1, r5
 800873e:	f04f 0200 	mov.w	r2, #0
 8008742:	f04f 0300 	mov.w	r3, #0
 8008746:	f04f 0400 	mov.w	r4, #0
 800874a:	00d4      	lsls	r4, r2, #3
 800874c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8008750:	00cb      	lsls	r3, r1, #3
 8008752:	462b      	mov	r3, r5
 8008754:	3307      	adds	r3, #7
 8008756:	08db      	lsrs	r3, r3, #3
 8008758:	00db      	lsls	r3, r3, #3
 800875a:	ebad 0d03 	sub.w	sp, sp, r3
 800875e:	466b      	mov	r3, sp
 8008760:	3300      	adds	r3, #0
 8008762:	63fb      	str	r3, [r7, #60]	; 0x3c

    // Copy by vale
    memcpy(tmp, string, size);
 8008764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008766:	7aba      	ldrb	r2, [r7, #10]
 8008768:	6879      	ldr	r1, [r7, #4]
 800876a:	4618      	mov	r0, r3
 800876c:	f001 f9ad 	bl	8009aca <memcpy>

    Simcom_Lock();
 8008770:	f000 fcb1 	bl	80090d6 <Simcom_Lock>
    // Read
    sprintf(cmd, "AT+%s%s", command, executor ? "\r" : "?\r");
 8008774:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8008778:	2b00      	cmp	r3, #0
 800877a:	d001      	beq.n	8008780 <AT_SingleString+0x84>
 800877c:	4b29      	ldr	r3, [pc, #164]	; (8008824 <AT_SingleString+0x128>)
 800877e:	e000      	b.n	8008782 <AT_SingleString+0x86>
 8008780:	4b29      	ldr	r3, [pc, #164]	; (8008828 <AT_SingleString+0x12c>)
 8008782:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008786:	68fa      	ldr	r2, [r7, #12]
 8008788:	4928      	ldr	r1, [pc, #160]	; (800882c <AT_SingleString+0x130>)
 800878a:	f001 f9b1 	bl	8009af0 <siprintf>
    sprintf(res, "+%s: ", command);
 800878e:	f107 0310 	add.w	r3, r7, #16
 8008792:	68fa      	ldr	r2, [r7, #12]
 8008794:	4926      	ldr	r1, [pc, #152]	; (8008830 <AT_SingleString+0x134>)
 8008796:	4618      	mov	r0, r3
 8008798:	f001 f9aa 	bl	8009af0 <siprintf>
    p = AT_CmdRead(cmd, 1000, res, &str);
 800879c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80087a0:	f107 0210 	add.w	r2, r7, #16
 80087a4:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80087a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80087ac:	f000 f8f6 	bl	800899c <AT_CmdRead>
 80087b0:	4603      	mov	r3, r0
 80087b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (p > 0) {
 80087b6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	dd29      	ble.n	8008812 <AT_SingleString+0x116>
        AT_ParseText(&str[0], NULL, tmp, sizeof(tmp));
 80087be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80087c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80087c2:	462b      	mov	r3, r5
 80087c4:	2100      	movs	r1, #0
 80087c6:	f000 f921 	bl	8008a0c <AT_ParseText>

        // Write
        if (mode == ATW) {
 80087ca:	7afb      	ldrb	r3, [r7, #11]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d11a      	bne.n	8008806 <AT_SingleString+0x10a>
            if (strcmp(tmp, string) != 0) {
 80087d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087d2:	6879      	ldr	r1, [r7, #4]
 80087d4:	4618      	mov	r0, r3
 80087d6:	f7f7 fd23 	bl	8000220 <strcmp>
 80087da:	4603      	mov	r3, r0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d018      	beq.n	8008812 <AT_SingleString+0x116>
                sprintf(cmd, "AT+%s=\"%s\"\r", command, string);
 80087e0:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	68fa      	ldr	r2, [r7, #12]
 80087e8:	4912      	ldr	r1, [pc, #72]	; (8008834 <AT_SingleString+0x138>)
 80087ea:	f001 f981 	bl	8009af0 <siprintf>
                p = AT_CmdWrite(cmd, 500, NULL);
 80087ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087f2:	2200      	movs	r2, #0
 80087f4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80087f8:	4618      	mov	r0, r3
 80087fa:	f000 f8b1 	bl	8008960 <AT_CmdWrite>
 80087fe:	4603      	mov	r3, r0
 8008800:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008804:	e005      	b.n	8008812 <AT_SingleString+0x116>
            }
        } else {
            memcpy(string, tmp, size);
 8008806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008808:	7aba      	ldrb	r2, [r7, #10]
 800880a:	4619      	mov	r1, r3
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f001 f95c 	bl	8009aca <memcpy>
        }
    }
    Simcom_Unlock();
 8008812:	f000 fc67 	bl	80090e4 <Simcom_Unlock>

    return p;
 8008816:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800881a:	46b5      	mov	sp, r6
}
 800881c:	4618      	mov	r0, r3
 800881e:	374c      	adds	r7, #76	; 0x4c
 8008820:	46bd      	mov	sp, r7
 8008822:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008824:	0800a9d4 	.word	0x0800a9d4
 8008828:	0800a9d8 	.word	0x0800a9d8
 800882c:	0800a9dc 	.word	0x0800a9dc
 8008830:	0800a87c 	.word	0x0800a87c
 8008834:	0800a9e4 	.word	0x0800a9e4

08008838 <AT_FindInBuffer>:

static uint8_t AT_FindInBuffer(char *prefix, char **str) {
 8008838:	b590      	push	{r4, r7, lr}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
    *str = Simcom_Response(prefix);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 fc56 	bl	80090f4 <Simcom_Response>
 8008848:	4602      	mov	r2, r0
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	601a      	str	r2, [r3, #0]

    if (*str != NULL) {
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d008      	beq.n	8008868 <AT_FindInBuffer+0x30>
        *str += strlen(prefix);
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	681c      	ldr	r4, [r3, #0]
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f7f7 fcea 	bl	8000234 <strlen>
 8008860:	4603      	mov	r3, r0
 8008862:	18e2      	adds	r2, r4, r3
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	601a      	str	r2, [r3, #0]
    }

    return *str != NULL;
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	2b00      	cmp	r3, #0
 800886e:	bf14      	ite	ne
 8008870:	2301      	movne	r3, #1
 8008872:	2300      	moveq	r3, #0
 8008874:	b2db      	uxtb	r3, r3
}
 8008876:	4618      	mov	r0, r3
 8008878:	370c      	adds	r7, #12
 800887a:	46bd      	mov	sp, r7
 800887c:	bd90      	pop	{r4, r7, pc}
	...

08008880 <AT_SingleInteger>:
#endif

static SIMCOM_RESULT AT_SingleInteger(char command[20], AT_MODE mode, int32_t *value, uint8_t executor) {
 8008880:	b580      	push	{r7, lr}
 8008882:	b092      	sub	sp, #72	; 0x48
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	607a      	str	r2, [r7, #4]
 800888a:	461a      	mov	r2, r3
 800888c:	460b      	mov	r3, r1
 800888e:	72fb      	strb	r3, [r7, #11]
 8008890:	4613      	mov	r3, r2
 8008892:	72bb      	strb	r3, [r7, #10]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 8008894:	2300      	movs	r3, #0
 8008896:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    char *str = NULL, cmd[20], res[20];
 800889a:	2300      	movs	r3, #0
 800889c:	63fb      	str	r3, [r7, #60]	; 0x3c

    // Copy by vale
    int32_t tmp = *value;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	643b      	str	r3, [r7, #64]	; 0x40

    Simcom_Lock();
 80088a4:	f000 fc17 	bl	80090d6 <Simcom_Lock>
    // Read
    sprintf(cmd, "AT+%s%s", command, executor ? "\r" : "?\r");
 80088a8:	7abb      	ldrb	r3, [r7, #10]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d001      	beq.n	80088b2 <AT_SingleInteger+0x32>
 80088ae:	4b27      	ldr	r3, [pc, #156]	; (800894c <AT_SingleInteger+0xcc>)
 80088b0:	e000      	b.n	80088b4 <AT_SingleInteger+0x34>
 80088b2:	4b27      	ldr	r3, [pc, #156]	; (8008950 <AT_SingleInteger+0xd0>)
 80088b4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80088b8:	68fa      	ldr	r2, [r7, #12]
 80088ba:	4926      	ldr	r1, [pc, #152]	; (8008954 <AT_SingleInteger+0xd4>)
 80088bc:	f001 f918 	bl	8009af0 <siprintf>
    sprintf(res, "+%s: ", command);
 80088c0:	f107 0314 	add.w	r3, r7, #20
 80088c4:	68fa      	ldr	r2, [r7, #12]
 80088c6:	4924      	ldr	r1, [pc, #144]	; (8008958 <AT_SingleInteger+0xd8>)
 80088c8:	4618      	mov	r0, r3
 80088ca:	f001 f911 	bl	8009af0 <siprintf>
    p = AT_CmdRead(cmd, 1000, res, &str);
 80088ce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80088d2:	f107 0214 	add.w	r2, r7, #20
 80088d6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80088da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80088de:	f000 f85d 	bl	800899c <AT_CmdRead>
 80088e2:	4603      	mov	r3, r0
 80088e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (p > 0) {
 80088e8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	dd24      	ble.n	800893a <AT_SingleInteger+0xba>
        tmp = AT_ParseNumber(&str[0], NULL);
 80088f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088f2:	2100      	movs	r1, #0
 80088f4:	4618      	mov	r0, r3
 80088f6:	f000 f8d3 	bl	8008aa0 <AT_ParseNumber>
 80088fa:	6438      	str	r0, [r7, #64]	; 0x40

        // Write
        if (mode == ATW) {
 80088fc:	7afb      	ldrb	r3, [r7, #11]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d118      	bne.n	8008934 <AT_SingleInteger+0xb4>
            if (tmp != *value) {
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008908:	429a      	cmp	r2, r3
 800890a:	d016      	beq.n	800893a <AT_SingleInteger+0xba>
                sprintf(cmd, "AT+%s=%d\r", command, (int) *value);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8008914:	68fa      	ldr	r2, [r7, #12]
 8008916:	4911      	ldr	r1, [pc, #68]	; (800895c <AT_SingleInteger+0xdc>)
 8008918:	f001 f8ea 	bl	8009af0 <siprintf>
                p = AT_CmdWrite(cmd, 500, NULL);
 800891c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008920:	2200      	movs	r2, #0
 8008922:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008926:	4618      	mov	r0, r3
 8008928:	f000 f81a 	bl	8008960 <AT_CmdWrite>
 800892c:	4603      	mov	r3, r0
 800892e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008932:	e002      	b.n	800893a <AT_SingleInteger+0xba>
            }
        } else {
            *value = tmp;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008938:	601a      	str	r2, [r3, #0]
        }
    }
    Simcom_Unlock();
 800893a:	f000 fbd3 	bl	80090e4 <Simcom_Unlock>

    return p;
 800893e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8008942:	4618      	mov	r0, r3
 8008944:	3748      	adds	r7, #72	; 0x48
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	0800a9d4 	.word	0x0800a9d4
 8008950:	0800a9d8 	.word	0x0800a9d8
 8008954:	0800a9dc 	.word	0x0800a9dc
 8008958:	0800a87c 	.word	0x0800a87c
 800895c:	0800a884 	.word	0x0800a884

08008960 <AT_CmdWrite>:

static SIMCOM_RESULT AT_CmdWrite(char *cmd, uint32_t ms, char *res) {
 8008960:	b580      	push	{r7, lr}
 8008962:	b086      	sub	sp, #24
 8008964:	af00      	add	r7, sp, #0
 8008966:	60f8      	str	r0, [r7, #12]
 8008968:	60b9      	str	r1, [r7, #8]
 800896a:	607a      	str	r2, [r7, #4]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 800896c:	2300      	movs	r3, #0
 800896e:	75fb      	strb	r3, [r7, #23]

    if (SIM.state >= SIM_STATE_READY) {
 8008970:	4b09      	ldr	r3, [pc, #36]	; (8008998 <AT_CmdWrite+0x38>)
 8008972:	f993 3000 	ldrsb.w	r3, [r3]
 8008976:	2b00      	cmp	r3, #0
 8008978:	db07      	blt.n	800898a <AT_CmdWrite+0x2a>
        p = Simcom_Command(cmd, res, ms, 0);
 800897a:	2300      	movs	r3, #0
 800897c:	68ba      	ldr	r2, [r7, #8]
 800897e:	6879      	ldr	r1, [r7, #4]
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f000 fe53 	bl	800962c <Simcom_Command>
 8008986:	4603      	mov	r3, r0
 8008988:	75fb      	strb	r3, [r7, #23]
    }

    return p;
 800898a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800898e:	4618      	mov	r0, r3
 8008990:	3718      	adds	r7, #24
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	20000010 	.word	0x20000010

0800899c <AT_CmdRead>:

static SIMCOM_RESULT AT_CmdRead(char *cmd, uint32_t ms, char *prefix, char **str) {
 800899c:	b590      	push	{r4, r7, lr}
 800899e:	b087      	sub	sp, #28
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	607a      	str	r2, [r7, #4]
 80089a8:	603b      	str	r3, [r7, #0]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 80089aa:	2300      	movs	r3, #0
 80089ac:	75fb      	strb	r3, [r7, #23]

    if (SIM.state >= SIM_STATE_READY) {
 80089ae:	4b16      	ldr	r3, [pc, #88]	; (8008a08 <AT_CmdRead+0x6c>)
 80089b0:	f993 3000 	ldrsb.w	r3, [r3]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	db20      	blt.n	80089fa <AT_CmdRead+0x5e>
        p = Simcom_Command(cmd, prefix, ms, 0);
 80089b8:	2300      	movs	r3, #0
 80089ba:	68ba      	ldr	r2, [r7, #8]
 80089bc:	6879      	ldr	r1, [r7, #4]
 80089be:	68f8      	ldr	r0, [r7, #12]
 80089c0:	f000 fe34 	bl	800962c <Simcom_Command>
 80089c4:	4603      	mov	r3, r0
 80089c6:	75fb      	strb	r3, [r7, #23]

        if (p > 0) {
 80089c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	dd14      	ble.n	80089fa <AT_CmdRead+0x5e>
            *str = Simcom_Response(prefix);
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f000 fb8f 	bl	80090f4 <Simcom_Response>
 80089d6:	4602      	mov	r2, r0
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	601a      	str	r2, [r3, #0]

            if (*str != NULL) {
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d00a      	beq.n	80089fa <AT_CmdRead+0x5e>
                *str += strlen(prefix);
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	681c      	ldr	r4, [r3, #0]
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f7f7 fc23 	bl	8000234 <strlen>
 80089ee:	4603      	mov	r3, r0
 80089f0:	18e2      	adds	r2, r4, r3
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	601a      	str	r2, [r3, #0]

                p = SIM_RESULT_OK;
 80089f6:	2301      	movs	r3, #1
 80089f8:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return p;
 80089fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	371c      	adds	r7, #28
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd90      	pop	{r4, r7, pc}
 8008a06:	bf00      	nop
 8008a08:	20000010 	.word	0x20000010

08008a0c <AT_ParseText>:

static void AT_ParseText(const char *ptr, uint8_t *cnt, char *text, uint8_t size) {
 8008a0c:	b480      	push	{r7}
 8008a0e:	b087      	sub	sp, #28
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	607a      	str	r2, [r7, #4]
 8008a18:	70fb      	strb	r3, [r7, #3]
    uint8_t i = 0;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	75fb      	strb	r3, [r7, #23]

    // check for double quote start
    if (*ptr == '"') {
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	2b22      	cmp	r3, #34	; 0x22
 8008a24:	d119      	bne.n	8008a5a <AT_ParseText+0x4e>
        ptr++;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	3301      	adds	r3, #1
 8008a2a:	60fb      	str	r3, [r7, #12]
        i++;
 8008a2c:	7dfb      	ldrb	r3, [r7, #23]
 8008a2e:	3301      	adds	r3, #1
 8008a30:	75fb      	strb	r3, [r7, #23]
    }
    // Parse text
    while (*ptr != '"' && *ptr != '\r' && *ptr != '\n') {
 8008a32:	e012      	b.n	8008a5a <AT_ParseText+0x4e>
        *text = *ptr;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	781a      	ldrb	r2, [r3, #0]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	701a      	strb	r2, [r3, #0]

        // increment
        text++;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	3301      	adds	r3, #1
 8008a40:	607b      	str	r3, [r7, #4]
        ptr++;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	3301      	adds	r3, #1
 8008a46:	60fb      	str	r3, [r7, #12]
        i++;
 8008a48:	7dfb      	ldrb	r3, [r7, #23]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	75fb      	strb	r3, [r7, #23]
        size--;
 8008a4e:	78fb      	ldrb	r3, [r7, #3]
 8008a50:	3b01      	subs	r3, #1
 8008a52:	70fb      	strb	r3, [r7, #3]

        // handle overflow
        if (size <= 1) {
 8008a54:	78fb      	ldrb	r3, [r7, #3]
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d90c      	bls.n	8008a74 <AT_ParseText+0x68>
    while (*ptr != '"' && *ptr != '\r' && *ptr != '\n') {
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	2b22      	cmp	r3, #34	; 0x22
 8008a60:	d009      	beq.n	8008a76 <AT_ParseText+0x6a>
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	781b      	ldrb	r3, [r3, #0]
 8008a66:	2b0d      	cmp	r3, #13
 8008a68:	d005      	beq.n	8008a76 <AT_ParseText+0x6a>
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	2b0a      	cmp	r3, #10
 8008a70:	d1e0      	bne.n	8008a34 <AT_ParseText+0x28>
 8008a72:	e000      	b.n	8008a76 <AT_ParseText+0x6a>
            break;
 8008a74:	bf00      	nop
        }
    }
    // end of parsing for : double-quote, tab, new-line
    *text = '\0';
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	701a      	strb	r2, [r3, #0]
    ptr++;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	60fb      	str	r3, [r7, #12]
    i++;
 8008a82:	7dfb      	ldrb	r3, [r7, #23]
 8008a84:	3301      	adds	r3, #1
 8008a86:	75fb      	strb	r3, [r7, #23]
    // Save number of characters used for number
    if (cnt != NULL) {
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d002      	beq.n	8008a94 <AT_ParseText+0x88>
        *cnt = i;
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	7dfa      	ldrb	r2, [r7, #23]
 8008a92:	701a      	strb	r2, [r3, #0]
    }
}
 8008a94:	bf00      	nop
 8008a96:	371c      	adds	r7, #28
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <AT_ParseNumber>:

static int32_t AT_ParseNumber(const char *ptr, uint8_t *cnt) {
 8008aa0:	b480      	push	{r7}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	73fb      	strb	r3, [r7, #15]
 8008aae:	2300      	movs	r3, #0
 8008ab0:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') { /* Check for minus character */
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	2b2d      	cmp	r3, #45	; 0x2d
 8008abc:	d119      	bne.n	8008af2 <AT_ParseNumber+0x52>
        minus = 1;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	607b      	str	r3, [r7, #4]
        i++;
 8008ac8:	7bbb      	ldrb	r3, [r7, #14]
 8008aca:	3301      	adds	r3, #1
 8008acc:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) { /* Parse number */
 8008ace:	e010      	b.n	8008af2 <AT_ParseNumber+0x52>
        sum = 10 * sum + CHARTONUM(*ptr);
 8008ad0:	68ba      	ldr	r2, [r7, #8]
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	4413      	add	r3, r2
 8008ad8:	005b      	lsls	r3, r3, #1
 8008ada:	461a      	mov	r2, r3
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	3b30      	subs	r3, #48	; 0x30
 8008ae2:	4413      	add	r3, r2
 8008ae4:	60bb      	str	r3, [r7, #8]
        ptr++;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	3301      	adds	r3, #1
 8008aea:	607b      	str	r3, [r7, #4]
        i++;
 8008aec:	7bbb      	ldrb	r3, [r7, #14]
 8008aee:	3301      	adds	r3, #1
 8008af0:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) { /* Parse number */
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	2b2f      	cmp	r3, #47	; 0x2f
 8008af8:	d903      	bls.n	8008b02 <AT_ParseNumber+0x62>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	2b39      	cmp	r3, #57	; 0x39
 8008b00:	d9e6      	bls.n	8008ad0 <AT_ParseNumber+0x30>
    }
    if (cnt != NULL) { /* Save number of characters used for number */
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d002      	beq.n	8008b0e <AT_ParseNumber+0x6e>
        *cnt = i;
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	7bba      	ldrb	r2, [r7, #14]
 8008b0c:	701a      	strb	r2, [r3, #0]
    }
    if (minus) { /* Minus detected */
 8008b0e:	7bfb      	ldrb	r3, [r7, #15]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d002      	beq.n	8008b1a <AT_ParseNumber+0x7a>
        return 0 - sum;
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	425b      	negs	r3, r3
 8008b18:	e000      	b.n	8008b1c <AT_ParseNumber+0x7c>
    }
    return sum; /* Return number */
 8008b1a:	68bb      	ldr	r3, [r7, #8]
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3714      	adds	r7, #20
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <CRC_Calculate8>:
/* Private functions declaration ----------------------------------------------*/
static void lock(void);
static void unlock(void);

/* Public functions implementation --------------------------------------------*/
uint32_t CRC_Calculate8(uint8_t *arr, uint32_t count, uint8_t swapped) {
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b08a      	sub	sp, #40	; 0x28
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	60f8      	str	r0, [r7, #12]
 8008b30:	60b9      	str	r1, [r7, #8]
 8008b32:	4613      	mov	r3, r2
 8008b34:	71fb      	strb	r3, [r7, #7]
    uint32_t cnt, result, value = 0;
 8008b36:	2300      	movs	r3, #0
 8008b38:	61fb      	str	r3, [r7, #28]
    uint8_t index = 0, remaining[4] = { 0 };
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008b40:	2300      	movs	r3, #0
 8008b42:	617b      	str	r3, [r7, #20]

    lock();
 8008b44:	f000 f85c 	bl	8008c00 <lock>

    /* Reset generator */
    __HAL_CRC_DR_RESET(&hcrc);
 8008b48:	4b2c      	ldr	r3, [pc, #176]	; (8008bfc <CRC_Calculate8+0xd4>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	689a      	ldr	r2, [r3, #8]
 8008b4e:	4b2b      	ldr	r3, [pc, #172]	; (8008bfc <CRC_Calculate8+0xd4>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f042 0201 	orr.w	r2, r2, #1
 8008b56:	609a      	str	r2, [r3, #8]

    /* Calculate number of 32-bit blocks */
    cnt = count >> 2;
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	089b      	lsrs	r3, r3, #2
 8008b5c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Calculate */
    while (cnt--) {
 8008b5e:	e011      	b.n	8008b84 <CRC_Calculate8+0x5c>
        value = *(uint32_t*) arr;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	61fb      	str	r3, [r7, #28]
        /* Set new value */
        hcrc.Instance->DR = swapped ? _ByteSwap32(value) : value;
 8008b66:	79fb      	ldrb	r3, [r7, #7]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d004      	beq.n	8008b76 <CRC_Calculate8+0x4e>
 8008b6c:	69f8      	ldr	r0, [r7, #28]
 8008b6e:	f000 ff50 	bl	8009a12 <_ByteSwap32>
 8008b72:	4603      	mov	r3, r0
 8008b74:	e000      	b.n	8008b78 <CRC_Calculate8+0x50>
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	4a20      	ldr	r2, [pc, #128]	; (8008bfc <CRC_Calculate8+0xd4>)
 8008b7a:	6812      	ldr	r2, [r2, #0]
 8008b7c:	6013      	str	r3, [r2, #0]

        /* Increase by 4 */
        arr += 4;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	3304      	adds	r3, #4
 8008b82:	60fb      	str	r3, [r7, #12]
    while (cnt--) {
 8008b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b86:	1e5a      	subs	r2, r3, #1
 8008b88:	627a      	str	r2, [r7, #36]	; 0x24
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d1e8      	bne.n	8008b60 <CRC_Calculate8+0x38>
    }

    /* Calculate remaining data as 8-bit */
    cnt = count % 4;
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	f003 0303 	and.w	r3, r3, #3
 8008b94:	627b      	str	r3, [r7, #36]	; 0x24

    if (cnt) {
 8008b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d024      	beq.n	8008be6 <CRC_Calculate8+0xbe>
        /* Calculate */
        while (cnt--) {
 8008b9c:	e00e      	b.n	8008bbc <CRC_Calculate8+0x94>
            remaining[index++] = *arr++;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	1c5a      	adds	r2, r3, #1
 8008ba2:	60fa      	str	r2, [r7, #12]
 8008ba4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8008ba8:	1c51      	adds	r1, r2, #1
 8008baa:	f887 1023 	strb.w	r1, [r7, #35]	; 0x23
 8008bae:	4611      	mov	r1, r2
 8008bb0:	781a      	ldrb	r2, [r3, #0]
 8008bb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008bb6:	440b      	add	r3, r1
 8008bb8:	f803 2c14 	strb.w	r2, [r3, #-20]
        while (cnt--) {
 8008bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bbe:	1e5a      	subs	r2, r3, #1
 8008bc0:	627a      	str	r2, [r7, #36]	; 0x24
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d1eb      	bne.n	8008b9e <CRC_Calculate8+0x76>
        }
        /* Set new value */
        value = *(uint32_t*) remaining;
 8008bc6:	f107 0314 	add.w	r3, r7, #20
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	61fb      	str	r3, [r7, #28]
        hcrc.Instance->DR = swapped ? _ByteSwap32(value) : value;
 8008bce:	79fb      	ldrb	r3, [r7, #7]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d004      	beq.n	8008bde <CRC_Calculate8+0xb6>
 8008bd4:	69f8      	ldr	r0, [r7, #28]
 8008bd6:	f000 ff1c 	bl	8009a12 <_ByteSwap32>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	e000      	b.n	8008be0 <CRC_Calculate8+0xb8>
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	4a06      	ldr	r2, [pc, #24]	; (8008bfc <CRC_Calculate8+0xd4>)
 8008be2:	6812      	ldr	r2, [r2, #0]
 8008be4:	6013      	str	r3, [r2, #0]
    }
    result = hcrc.Instance->DR;
 8008be6:	4b05      	ldr	r3, [pc, #20]	; (8008bfc <CRC_Calculate8+0xd4>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	61bb      	str	r3, [r7, #24]

    unlock();
 8008bee:	f000 f80e 	bl	8008c0e <unlock>
    /* Return data */
    return result;
 8008bf2:	69bb      	ldr	r3, [r7, #24]
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3728      	adds	r7, #40	; 0x28
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	200002b0 	.word	0x200002b0

08008c00 <lock>:

    return result;
}

/* Private functions implementation --------------------------------------------*/
static void lock(void) {
 8008c00:	b480      	push	{r7}
 8008c02:	af00      	add	r7, sp, #0
#if (!BOOTLOADER)
    osMutexAcquire(CrcMutexHandle, osWaitForever);
#endif
}
 8008c04:	bf00      	nop
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr

08008c0e <unlock>:

static void unlock(void) {
 8008c0e:	b480      	push	{r7}
 8008c10:	af00      	add	r7, sp, #0
#if (!BOOTLOADER)
    osMutexRelease(CrcMutexHandle);
#endif
}
 8008c12:	bf00      	nop
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <EEPROM24XX_SetDevice>:

/* Private variables ----------------------------------------------------------*/
static uint16_t DevAddress = EEPROM24_MAIN;

/* Public functions implementation ---------------------------------------------*/
void EEPROM24XX_SetDevice(EEPROM24_DEVICE Device) {
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	4603      	mov	r3, r0
 8008c24:	71fb      	strb	r3, [r7, #7]
    DevAddress = Device;
 8008c26:	79fb      	ldrb	r3, [r7, #7]
 8008c28:	b29a      	uxth	r2, r3
 8008c2a:	4b04      	ldr	r3, [pc, #16]	; (8008c3c <EEPROM24XX_SetDevice+0x20>)
 8008c2c:	801a      	strh	r2, [r3, #0]
}
 8008c2e:	bf00      	nop
 8008c30:	370c      	adds	r7, #12
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr
 8008c3a:	bf00      	nop
 8008c3c:	2000000a 	.word	0x2000000a

08008c40 <EEPROM24XX_IsConnected>:

uint8_t EEPROM24XX_IsConnected(void) {
 8008c40:	b580      	push	{r7, lr}
 8008c42:	af00      	add	r7, sp, #0
    return (HAL_I2C_IsDeviceReady(&hi2c2, DevAddress, 2, 1000) == HAL_OK);
 8008c44:	4b07      	ldr	r3, [pc, #28]	; (8008c64 <EEPROM24XX_IsConnected+0x24>)
 8008c46:	8819      	ldrh	r1, [r3, #0]
 8008c48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008c4c:	2202      	movs	r2, #2
 8008c4e:	4806      	ldr	r0, [pc, #24]	; (8008c68 <EEPROM24XX_IsConnected+0x28>)
 8008c50:	f7fb fb92 	bl	8004378 <HAL_I2C_IsDeviceReady>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	bf0c      	ite	eq
 8008c5a:	2301      	moveq	r3, #1
 8008c5c:	2300      	movne	r3, #0
 8008c5e:	b2db      	uxtb	r3, r3
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	2000000a 	.word	0x2000000a
 8008c68:	200002b8 	.word	0x200002b8

08008c6c <EEPROM24XX_Save>:

uint8_t EEPROM24XX_Save(uint16_t Address, void *data, size_t size_of_data) {
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b088      	sub	sp, #32
 8008c70:	af04      	add	r7, sp, #16
 8008c72:	4603      	mov	r3, r0
 8008c74:	60b9      	str	r1, [r7, #8]
 8008c76:	607a      	str	r2, [r7, #4]
 8008c78:	81fb      	strh	r3, [r7, #14]
    if (size_of_data > 32) {
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2b20      	cmp	r3, #32
 8008c7e:	d901      	bls.n	8008c84 <EEPROM24XX_Save+0x18>
        return 0;
 8008c80:	2300      	movs	r3, #0
 8008c82:	e017      	b.n	8008cb4 <EEPROM24XX_Save+0x48>
    }

    if (HAL_I2C_Mem_Write(&hi2c2, DevAddress, Address, I2C_MEMADD_SIZE_16BIT, (uint8_t*) data, size_of_data, 100) == HAL_OK) {
 8008c84:	4b0d      	ldr	r3, [pc, #52]	; (8008cbc <EEPROM24XX_Save+0x50>)
 8008c86:	8819      	ldrh	r1, [r3, #0]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	89f8      	ldrh	r0, [r7, #14]
 8008c8e:	2264      	movs	r2, #100	; 0x64
 8008c90:	9202      	str	r2, [sp, #8]
 8008c92:	9301      	str	r3, [sp, #4]
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	9300      	str	r3, [sp, #0]
 8008c98:	2310      	movs	r3, #16
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	4808      	ldr	r0, [pc, #32]	; (8008cc0 <EEPROM24XX_Save+0x54>)
 8008c9e:	f7fb f84b 	bl	8003d38 <HAL_I2C_Mem_Write>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d104      	bne.n	8008cb2 <EEPROM24XX_Save+0x46>
        _DelayMS(15);
 8008ca8:	200f      	movs	r0, #15
 8008caa:	f000 fe74 	bl	8009996 <_DelayMS>
        return 1;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	e000      	b.n	8008cb4 <EEPROM24XX_Save+0x48>
    }
    return 0;
 8008cb2:	2300      	movs	r3, #0

}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3710      	adds	r7, #16
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	2000000a 	.word	0x2000000a
 8008cc0:	200002b8 	.word	0x200002b8

08008cc4 <EEPROM24XX_Load>:

uint8_t EEPROM24XX_Load(uint16_t Address, void *data, size_t size_of_data) {
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b088      	sub	sp, #32
 8008cc8:	af04      	add	r7, sp, #16
 8008cca:	4603      	mov	r3, r0
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	607a      	str	r2, [r7, #4]
 8008cd0:	81fb      	strh	r3, [r7, #14]
    return (HAL_I2C_Mem_Read(&hi2c2, DevAddress, Address, I2C_MEMADD_SIZE_16BIT, (uint8_t*) data, size_of_data, 100) == HAL_OK);
 8008cd2:	4b0c      	ldr	r3, [pc, #48]	; (8008d04 <EEPROM24XX_Load+0x40>)
 8008cd4:	8819      	ldrh	r1, [r3, #0]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	89f8      	ldrh	r0, [r7, #14]
 8008cdc:	2264      	movs	r2, #100	; 0x64
 8008cde:	9202      	str	r2, [sp, #8]
 8008ce0:	9301      	str	r3, [sp, #4]
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	9300      	str	r3, [sp, #0]
 8008ce6:	2310      	movs	r3, #16
 8008ce8:	4602      	mov	r2, r0
 8008cea:	4807      	ldr	r0, [pc, #28]	; (8008d08 <EEPROM24XX_Load+0x44>)
 8008cec:	f7fb f91e 	bl	8003f2c <HAL_I2C_Mem_Read>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	bf0c      	ite	eq
 8008cf6:	2301      	moveq	r3, #1
 8008cf8:	2300      	movne	r3, #0
 8008cfa:	b2db      	uxtb	r3, r3
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3710      	adds	r7, #16
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}
 8008d04:	2000000a 	.word	0x2000000a
 8008d08:	200002b8 	.word	0x200002b8

08008d0c <LOG_Char>:
/* Private functions declarations ----------------------------------------------*/
static void lock(void);
static void unlock(void);

/* Public functions implementation ---------------------------------------------*/
void LOG_Char(char ch) {
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	4603      	mov	r3, r0
 8008d14:	71fb      	strb	r3, [r7, #7]
    uint32_t tick;

    tick = _GetTickMS();
 8008d16:	f000 fe49 	bl	80099ac <_GetTickMS>
 8008d1a:	60f8      	str	r0, [r7, #12]
    // wait if busy
    while (1) {
        if (ITM->PORT[0].u32 != 0 || _GetTickMS() - tick >= 10) {
 8008d1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d10a      	bne.n	8008d3c <LOG_Char+0x30>
 8008d26:	f000 fe41 	bl	80099ac <_GetTickMS>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	1ad3      	subs	r3, r2, r3
 8008d30:	2b09      	cmp	r3, #9
 8008d32:	d803      	bhi.n	8008d3c <LOG_Char+0x30>
            break;
        }
        _DelayMS(1);
 8008d34:	2001      	movs	r0, #1
 8008d36:	f000 fe2e 	bl	8009996 <_DelayMS>
        if (ITM->PORT[0].u32 != 0 || _GetTickMS() - tick >= 10) {
 8008d3a:	e7ef      	b.n	8008d1c <LOG_Char+0x10>
    }
    // send to ITM0
    ITM->PORT[0].u8 = (uint8_t) ch;
 8008d3c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008d40:	79fb      	ldrb	r3, [r7, #7]
 8008d42:	7013      	strb	r3, [r2, #0]
}
 8008d44:	bf00      	nop
 8008d46:	3710      	adds	r7, #16
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <LOG_Enter>:

void LOG_Enter(void) {
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	af00      	add	r7, sp, #0
    lock();
 8008d50:	f000 f902 	bl	8008f58 <lock>
    LOG_Char('\n');
 8008d54:	200a      	movs	r0, #10
 8008d56:	f7ff ffd9 	bl	8008d0c <LOG_Char>
    unlock();
 8008d5a:	f000 f904 	bl	8008f66 <unlock>
}
 8008d5e:	bf00      	nop
 8008d60:	bd80      	pop	{r7, pc}
	...

08008d64 <LOG_Int>:

void LOG_Int(int32_t num) {
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b086      	sub	sp, #24
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
    lock();
 8008d6c:	f000 f8f4 	bl	8008f58 <lock>

    char str[10]; // 10 chars max for INT32_MAX
    int i = 0;
 8008d70:	2300      	movs	r3, #0
 8008d72:	617b      	str	r3, [r7, #20]
    if (num < 0) {
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	da05      	bge.n	8008d86 <LOG_Int+0x22>
        LOG_Char('-');
 8008d7a:	202d      	movs	r0, #45	; 0x2d
 8008d7c:	f7ff ffc6 	bl	8008d0c <LOG_Char>
        num *= -1;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	425b      	negs	r3, r3
 8008d84:	607b      	str	r3, [r7, #4]
    }
    do
        str[i++] = num % 10 + '0';
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	4b1c      	ldr	r3, [pc, #112]	; (8008dfc <LOG_Int+0x98>)
 8008d8a:	fb83 1302 	smull	r1, r3, r3, r2
 8008d8e:	1099      	asrs	r1, r3, #2
 8008d90:	17d3      	asrs	r3, r2, #31
 8008d92:	1ac9      	subs	r1, r1, r3
 8008d94:	460b      	mov	r3, r1
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	440b      	add	r3, r1
 8008d9a:	005b      	lsls	r3, r3, #1
 8008d9c:	1ad1      	subs	r1, r2, r3
 8008d9e:	b2ca      	uxtb	r2, r1
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	1c59      	adds	r1, r3, #1
 8008da4:	6179      	str	r1, [r7, #20]
 8008da6:	3230      	adds	r2, #48	; 0x30
 8008da8:	b2d2      	uxtb	r2, r2
 8008daa:	f107 0118 	add.w	r1, r7, #24
 8008dae:	440b      	add	r3, r1
 8008db0:	f803 2c10 	strb.w	r2, [r3, #-16]
    while ((num /= 10) > 0);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	4a11      	ldr	r2, [pc, #68]	; (8008dfc <LOG_Int+0x98>)
 8008db8:	fb82 1203 	smull	r1, r2, r2, r3
 8008dbc:	1092      	asrs	r2, r2, #2
 8008dbe:	17db      	asrs	r3, r3, #31
 8008dc0:	1ad3      	subs	r3, r2, r3
 8008dc2:	607b      	str	r3, [r7, #4]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	dcdd      	bgt.n	8008d86 <LOG_Int+0x22>
    for (i--; i >= 0; i--)
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	3b01      	subs	r3, #1
 8008dce:	617b      	str	r3, [r7, #20]
 8008dd0:	e00a      	b.n	8008de8 <LOG_Int+0x84>
        LOG_Char(str[i]);
 8008dd2:	f107 0208 	add.w	r2, r7, #8
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	4413      	add	r3, r2
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f7ff ff95 	bl	8008d0c <LOG_Char>
    for (i--; i >= 0; i--)
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	3b01      	subs	r3, #1
 8008de6:	617b      	str	r3, [r7, #20]
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	daf1      	bge.n	8008dd2 <LOG_Int+0x6e>

    unlock();
 8008dee:	f000 f8ba 	bl	8008f66 <unlock>
}
 8008df2:	bf00      	nop
 8008df4:	3718      	adds	r7, #24
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
 8008dfa:	bf00      	nop
 8008dfc:	66666667 	.word	0x66666667

08008e00 <LOG_Hex32>:
    LOG_Char(HEX_CHARS[(num & 0x0f) % 0x10]);

    unlock();
}

void LOG_Hex32(uint32_t num) {
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
    lock();
 8008e08:	f000 f8a6 	bl	8008f58 <lock>

    uint8_t i;
    for (i = 28; i > 0; i -= 4)
 8008e0c:	231c      	movs	r3, #28
 8008e0e:	73fb      	strb	r3, [r7, #15]
 8008e10:	e00d      	b.n	8008e2e <LOG_Hex32+0x2e>
        LOG_Char(HEX_CHARS[(num >> i) % 0x10]);
 8008e12:	7bfb      	ldrb	r3, [r7, #15]
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	fa22 f303 	lsr.w	r3, r2, r3
 8008e1a:	f003 030f 	and.w	r3, r3, #15
 8008e1e:	4a0c      	ldr	r2, [pc, #48]	; (8008e50 <LOG_Hex32+0x50>)
 8008e20:	5cd3      	ldrb	r3, [r2, r3]
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7ff ff72 	bl	8008d0c <LOG_Char>
    for (i = 28; i > 0; i -= 4)
 8008e28:	7bfb      	ldrb	r3, [r7, #15]
 8008e2a:	3b04      	subs	r3, #4
 8008e2c:	73fb      	strb	r3, [r7, #15]
 8008e2e:	7bfb      	ldrb	r3, [r7, #15]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d1ee      	bne.n	8008e12 <LOG_Hex32+0x12>
    LOG_Char(HEX_CHARS[(num & 0x0f) % 0x10]);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f003 030f 	and.w	r3, r3, #15
 8008e3a:	4a05      	ldr	r2, [pc, #20]	; (8008e50 <LOG_Hex32+0x50>)
 8008e3c:	5cd3      	ldrb	r3, [r2, r3]
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7ff ff64 	bl	8008d0c <LOG_Char>

    unlock();
 8008e44:	f000 f88f 	bl	8008f66 <unlock>
}
 8008e48:	bf00      	nop
 8008e4a:	3710      	adds	r7, #16
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	0800a9f0 	.word	0x0800a9f0

08008e54 <LOG_Str>:

void LOG_Str(char *str) {
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
    lock();
 8008e5c:	f000 f87c 	bl	8008f58 <lock>

    while (*str != '\0')
 8008e60:	e006      	b.n	8008e70 <LOG_Str+0x1c>
        LOG_Char(*str++);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	1c5a      	adds	r2, r3, #1
 8008e66:	607a      	str	r2, [r7, #4]
 8008e68:	781b      	ldrb	r3, [r3, #0]
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f7ff ff4e 	bl	8008d0c <LOG_Char>
    while (*str != '\0')
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d1f4      	bne.n	8008e62 <LOG_Str+0xe>

    unlock();
 8008e78:	f000 f875 	bl	8008f66 <unlock>
}
 8008e7c:	bf00      	nop
 8008e7e:	3708      	adds	r7, #8
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <LOG_StrLn>:

void LOG_StrLn(char *str) {
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
    lock();
 8008e8c:	f000 f864 	bl	8008f58 <lock>

    while (*str != '\0') {
 8008e90:	e006      	b.n	8008ea0 <LOG_StrLn+0x1c>
        LOG_Char(*str++);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	1c5a      	adds	r2, r3, #1
 8008e96:	607a      	str	r2, [r7, #4]
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f7ff ff36 	bl	8008d0c <LOG_Char>
    while (*str != '\0') {
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d1f4      	bne.n	8008e92 <LOG_StrLn+0xe>
    }
    LOG_Char('\n');
 8008ea8:	200a      	movs	r0, #10
 8008eaa:	f7ff ff2f 	bl	8008d0c <LOG_Char>

    unlock();
 8008eae:	f000 f85a 	bl	8008f66 <unlock>
}
 8008eb2:	bf00      	nop
 8008eb4:	3708      	adds	r7, #8
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}

08008eba <LOG_Buf>:

void LOG_Buf(char *buf, uint16_t bufsize) {
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b084      	sub	sp, #16
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
 8008ec2:	460b      	mov	r3, r1
 8008ec4:	807b      	strh	r3, [r7, #2]
    lock();
 8008ec6:	f000 f847 	bl	8008f58 <lock>

    uint16_t i;
    for (i = 0; i < bufsize; i++)
 8008eca:	2300      	movs	r3, #0
 8008ecc:	81fb      	strh	r3, [r7, #14]
 8008ece:	e009      	b.n	8008ee4 <LOG_Buf+0x2a>
        LOG_Char(*buf++);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	1c5a      	adds	r2, r3, #1
 8008ed4:	607a      	str	r2, [r7, #4]
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7ff ff17 	bl	8008d0c <LOG_Char>
    for (i = 0; i < bufsize; i++)
 8008ede:	89fb      	ldrh	r3, [r7, #14]
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	81fb      	strh	r3, [r7, #14]
 8008ee4:	89fa      	ldrh	r2, [r7, #14]
 8008ee6:	887b      	ldrh	r3, [r7, #2]
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d3f1      	bcc.n	8008ed0 <LOG_Buf+0x16>

    unlock();
 8008eec:	f000 f83b 	bl	8008f66 <unlock>
}
 8008ef0:	bf00      	nop
 8008ef2:	3710      	adds	r7, #16
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <LOG_BufHex>:
    }

    unlock();
}

void LOG_BufHex(char *buf, uint16_t bufsize) {
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b084      	sub	sp, #16
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	460b      	mov	r3, r1
 8008f02:	807b      	strh	r3, [r7, #2]
    lock();
 8008f04:	f000 f828 	bl	8008f58 <lock>

    uint16_t i;
    char ch;
    for (i = 0; i < bufsize; i++) {
 8008f08:	2300      	movs	r3, #0
 8008f0a:	81fb      	strh	r3, [r7, #14]
 8008f0c:	e018      	b.n	8008f40 <LOG_BufHex+0x48>
        ch = *buf++;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	1c5a      	adds	r2, r3, #1
 8008f12:	607a      	str	r2, [r7, #4]
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	737b      	strb	r3, [r7, #13]
        LOG_Char(HEX_CHARS[(ch >> 4) % 0x10]);
 8008f18:	7b7b      	ldrb	r3, [r7, #13]
 8008f1a:	091b      	lsrs	r3, r3, #4
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	461a      	mov	r2, r3
 8008f20:	4b0c      	ldr	r3, [pc, #48]	; (8008f54 <LOG_BufHex+0x5c>)
 8008f22:	5c9b      	ldrb	r3, [r3, r2]
 8008f24:	4618      	mov	r0, r3
 8008f26:	f7ff fef1 	bl	8008d0c <LOG_Char>
        LOG_Char(HEX_CHARS[(ch & 0x0f) % 0x10]);
 8008f2a:	7b7b      	ldrb	r3, [r7, #13]
 8008f2c:	f003 030f 	and.w	r3, r3, #15
 8008f30:	4a08      	ldr	r2, [pc, #32]	; (8008f54 <LOG_BufHex+0x5c>)
 8008f32:	5cd3      	ldrb	r3, [r2, r3]
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7ff fee9 	bl	8008d0c <LOG_Char>
    for (i = 0; i < bufsize; i++) {
 8008f3a:	89fb      	ldrh	r3, [r7, #14]
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	81fb      	strh	r3, [r7, #14]
 8008f40:	89fa      	ldrh	r2, [r7, #14]
 8008f42:	887b      	ldrh	r3, [r7, #2]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d3e2      	bcc.n	8008f0e <LOG_BufHex+0x16>
    }

    unlock();
 8008f48:	f000 f80d 	bl	8008f66 <unlock>
}
 8008f4c:	bf00      	nop
 8008f4e:	3710      	adds	r7, #16
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}
 8008f54:	0800a9f0 	.word	0x0800a9f0

08008f58 <lock>:

    unlock();
}

/* Private functions implementations ----------------------------------------------*/
static void lock(void) {
 8008f58:	b480      	push	{r7}
 8008f5a:	af00      	add	r7, sp, #0
#if (!BOOTLOADER)
    osMutexAcquire(LogMutexHandle, osWaitForever);
#endif
}
 8008f5c:	bf00      	nop
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr

08008f66 <unlock>:

static void unlock(void) {
 8008f66:	b480      	push	{r7}
 8008f68:	af00      	add	r7, sp, #0
#if (!BOOTLOADER)
    osMutexRelease(LogMutexHandle);
#endif
}
 8008f6a:	bf00      	nop
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr

08008f74 <EEPROM_Init>:
static uint8_t EE_Command(uint16_t vaddr, EEPROM_COMMAND cmd, void *value, void *ptr, uint16_t size);
static void lock(void);
static void unlock(void);

/* Public functions implementation --------------------------------------------*/
uint8_t EEPROM_Init(void) {
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b082      	sub	sp, #8
 8008f78:	af00      	add	r7, sp, #0
    const uint8_t MAX_RETRY = 5;
 8008f7a:	2305      	movs	r3, #5
 8008f7c:	713b      	strb	r3, [r7, #4]
    const EEPROM24_DEVICE EEPROMS[2] = {
 8008f7e:	4b24      	ldr	r3, [pc, #144]	; (8009010 <EEPROM_Init+0x9c>)
 8008f80:	881b      	ldrh	r3, [r3, #0]
 8008f82:	803b      	strh	r3, [r7, #0]
            EEPROM24_MAIN,
            EEPROM24_BACKUP
    };
    uint8_t retry, ret = 0;
 8008f84:	2300      	movs	r3, #0
 8008f86:	71bb      	strb	r3, [r7, #6]

    lock();
 8008f88:	f000 f897 	bl	80090ba <lock>
    LOG_StrLn("EEPROM:Init");
 8008f8c:	4821      	ldr	r0, [pc, #132]	; (8009014 <EEPROM_Init+0xa0>)
 8008f8e:	f7ff ff79 	bl	8008e84 <LOG_StrLn>
    // check each eeprom
    for (uint8_t i = 0; i < 1; i++) {
 8008f92:	2300      	movs	r3, #0
 8008f94:	717b      	strb	r3, [r7, #5]
 8008f96:	e02a      	b.n	8008fee <EEPROM_Init+0x7a>
        if (!ret) {
 8008f98:	79bb      	ldrb	r3, [r7, #6]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d124      	bne.n	8008fe8 <EEPROM_Init+0x74>
            retry = MAX_RETRY;
 8008f9e:	793b      	ldrb	r3, [r7, #4]
 8008fa0:	71fb      	strb	r3, [r7, #7]
            EEPROM24XX_SetDevice(EEPROMS[i]);
 8008fa2:	797b      	ldrb	r3, [r7, #5]
 8008fa4:	f107 0208 	add.w	r2, r7, #8
 8008fa8:	4413      	add	r3, r2
 8008faa:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7ff fe34 	bl	8008c1c <EEPROM24XX_SetDevice>
            do {
                if (EEPROM24XX_IsConnected()) {
 8008fb4:	f7ff fe44 	bl	8008c40 <EEPROM24XX_IsConnected>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d00c      	beq.n	8008fd8 <EEPROM_Init+0x64>
                    LOG_Str("EEPROM:Device = ");
 8008fbe:	4816      	ldr	r0, [pc, #88]	; (8009018 <EEPROM_Init+0xa4>)
 8008fc0:	f7ff ff48 	bl	8008e54 <LOG_Str>
                    LOG_Int(i + 1);
 8008fc4:	797b      	ldrb	r3, [r7, #5]
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f7ff fecb 	bl	8008d64 <LOG_Int>
                    LOG_Enter();
 8008fce:	f7ff febd 	bl	8008d4c <LOG_Enter>

                    ret = 1;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	71bb      	strb	r3, [r7, #6]
                    break;
 8008fd6:	e007      	b.n	8008fe8 <EEPROM_Init+0x74>
                }
                _DelayMS(50);
 8008fd8:	2032      	movs	r0, #50	; 0x32
 8008fda:	f000 fcdc 	bl	8009996 <_DelayMS>
            } while (retry--);
 8008fde:	79fb      	ldrb	r3, [r7, #7]
 8008fe0:	1e5a      	subs	r2, r3, #1
 8008fe2:	71fa      	strb	r2, [r7, #7]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d1e5      	bne.n	8008fb4 <EEPROM_Init+0x40>
    for (uint8_t i = 0; i < 1; i++) {
 8008fe8:	797b      	ldrb	r3, [r7, #5]
 8008fea:	3301      	adds	r3, #1
 8008fec:	717b      	strb	r3, [r7, #5]
 8008fee:	797b      	ldrb	r3, [r7, #5]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d0d1      	beq.n	8008f98 <EEPROM_Init+0x24>
        }
    }

    // all failed
    if (!ret) {
 8008ff4:	79bb      	ldrb	r3, [r7, #6]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d102      	bne.n	8009000 <EEPROM_Init+0x8c>
        LOG_StrLn("EEPROM:Error");
 8008ffa:	4808      	ldr	r0, [pc, #32]	; (800901c <EEPROM_Init+0xa8>)
 8008ffc:	f7ff ff42 	bl	8008e84 <LOG_StrLn>
    }
    unlock();
 8009000:	f000 f862 	bl	80090c8 <unlock>

#if (!BOOTLOADER)
    // Load or Reset
    EEPROM_ResetOrLoad();
#endif
    return ret;
 8009004:	79bb      	ldrb	r3, [r7, #6]
}
 8009006:	4618      	mov	r0, r3
 8009008:	3708      	adds	r7, #8
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
 800900e:	bf00      	nop
 8009010:	0800aa34 	.word	0x0800aa34
 8009014:	0800aa04 	.word	0x0800aa04
 8009018:	0800aa10 	.word	0x0800aa10
 800901c:	0800aa24 	.word	0x0800aa24

08009020 <EEPROM_FlagDFU>:
    }

    return ret;
}
#else
uint8_t EEPROM_FlagDFU(EEPROM_COMMAND cmd, uint32_t value) {
 8009020:	b580      	push	{r7, lr}
 8009022:	b084      	sub	sp, #16
 8009024:	af02      	add	r7, sp, #8
 8009026:	4603      	mov	r3, r0
 8009028:	6039      	str	r1, [r7, #0]
 800902a:	71fb      	strb	r3, [r7, #7]
    return EE_Command(VADDR_DFU_FLAG, cmd, &value, &DFU_FLAG, sizeof(value));
 800902c:	463a      	mov	r2, r7
 800902e:	79f9      	ldrb	r1, [r7, #7]
 8009030:	2304      	movs	r3, #4
 8009032:	9300      	str	r3, [sp, #0]
 8009034:	4b04      	ldr	r3, [pc, #16]	; (8009048 <EEPROM_FlagDFU+0x28>)
 8009036:	2020      	movs	r0, #32
 8009038:	f000 f808 	bl	800904c <EE_Command>
 800903c:	4603      	mov	r3, r0
}
 800903e:	4618      	mov	r0, r3
 8009040:	3708      	adds	r7, #8
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
 8009046:	bf00      	nop
 8009048:	200002a4 	.word	0x200002a4

0800904c <EE_Command>:
#endif

/* Private functions implementation --------------------------------------------*/
static uint8_t EE_Command(uint16_t vaddr, EEPROM_COMMAND cmd, void *value, void *ptr, uint16_t size) {
 800904c:	b580      	push	{r7, lr}
 800904e:	b086      	sub	sp, #24
 8009050:	af00      	add	r7, sp, #0
 8009052:	60ba      	str	r2, [r7, #8]
 8009054:	607b      	str	r3, [r7, #4]
 8009056:	4603      	mov	r3, r0
 8009058:	81fb      	strh	r3, [r7, #14]
 800905a:	460b      	mov	r3, r1
 800905c:	737b      	strb	r3, [r7, #13]
    uint8_t ret = 0;
 800905e:	2300      	movs	r3, #0
 8009060:	75fb      	strb	r3, [r7, #23]

    lock();
 8009062:	f000 f82a 	bl	80090ba <lock>

    // check if new value is same with old value
    if (cmd == EE_CMD_W) {
 8009066:	7b7b      	ldrb	r3, [r7, #13]
 8009068:	2b01      	cmp	r3, #1
 800906a:	d10e      	bne.n	800908a <EE_Command+0x3e>
        // apply the value
        memcpy(ptr, value, size);
 800906c:	8c3b      	ldrh	r3, [r7, #32]
 800906e:	461a      	mov	r2, r3
 8009070:	68b9      	ldr	r1, [r7, #8]
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 fd29 	bl	8009aca <memcpy>
        // save the value
        ret = EEPROM24XX_Save(vaddr, value, size);
 8009078:	8c3a      	ldrh	r2, [r7, #32]
 800907a:	89fb      	ldrh	r3, [r7, #14]
 800907c:	68b9      	ldr	r1, [r7, #8]
 800907e:	4618      	mov	r0, r3
 8009080:	f7ff fdf4 	bl	8008c6c <EEPROM24XX_Save>
 8009084:	4603      	mov	r3, r0
 8009086:	75fb      	strb	r3, [r7, #23]
 8009088:	e010      	b.n	80090ac <EE_Command+0x60>
    } else {
        // load the value
        ret = EEPROM24XX_Load(vaddr, value, size);
 800908a:	8c3a      	ldrh	r2, [r7, #32]
 800908c:	89fb      	ldrh	r3, [r7, #14]
 800908e:	68b9      	ldr	r1, [r7, #8]
 8009090:	4618      	mov	r0, r3
 8009092:	f7ff fe17 	bl	8008cc4 <EEPROM24XX_Load>
 8009096:	4603      	mov	r3, r0
 8009098:	75fb      	strb	r3, [r7, #23]
        // apply the value
        if (ret) {
 800909a:	7dfb      	ldrb	r3, [r7, #23]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d005      	beq.n	80090ac <EE_Command+0x60>
            memcpy(ptr, value, size);
 80090a0:	8c3b      	ldrh	r3, [r7, #32]
 80090a2:	461a      	mov	r2, r3
 80090a4:	68b9      	ldr	r1, [r7, #8]
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 fd0f 	bl	8009aca <memcpy>
        }
    }

    unlock();
 80090ac:	f000 f80c 	bl	80090c8 <unlock>
    return ret;
 80090b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3718      	adds	r7, #24
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}

080090ba <lock>:

static void lock(void) {
 80090ba:	b480      	push	{r7}
 80090bc:	af00      	add	r7, sp, #0
#if (!BOOTLOADER)
    osMutexAcquire(EepromMutexHandle, osWaitForever);
#endif
}
 80090be:	bf00      	nop
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr

080090c8 <unlock>:

static void unlock(void) {
 80090c8:	b480      	push	{r7}
 80090ca:	af00      	add	r7, sp, #0
#if (!BOOTLOADER)
    osMutexRelease(EepromMutexHandle);
#endif
}
 80090cc:	bf00      	nop
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr

080090d6 <Simcom_Lock>:
static SIMCOM_RESULT Simcom_ProcessACK(header_t *header);
static uint8_t Simcom_CommandoIRQ(void);
#endif

/* Public functions implementation --------------------------------------------*/
void Simcom_Lock(void) {
 80090d6:	b480      	push	{r7}
 80090d8:	af00      	add	r7, sp, #0
#if (!BOOTLOADER)
    osMutexAcquire(SimcomRecMutexHandle, osWaitForever);
#endif
}
 80090da:	bf00      	nop
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <Simcom_Unlock>:

void Simcom_Unlock(void) {
 80090e4:	b480      	push	{r7}
 80090e6:	af00      	add	r7, sp, #0
#if (!BOOTLOADER)
    osMutexRelease(SimcomRecMutexHandle);
#endif
}
 80090e8:	bf00      	nop
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr
	...

080090f4 <Simcom_Response>:

char* Simcom_Response(char *str) {
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
    return strstr(SIMCOM_UART_RX, str);
 80090fc:	6879      	ldr	r1, [r7, #4]
 80090fe:	4804      	ldr	r0, [pc, #16]	; (8009110 <Simcom_Response+0x1c>)
 8009100:	f000 fd28 	bl	8009b54 <strstr>
 8009104:	4603      	mov	r3, r0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3708      	adds	r7, #8
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	200003d0 	.word	0x200003d0

08009114 <Simcom_SetState>:

uint8_t Simcom_SetState(SIMCOM_STATE state, uint32_t timeout) {
 8009114:	b580      	push	{r7, lr}
 8009116:	b096      	sub	sp, #88	; 0x58
 8009118:	af00      	add	r7, sp, #0
 800911a:	4603      	mov	r3, r0
 800911c:	6039      	str	r1, [r7, #0]
 800911e:	71fb      	strb	r3, [r7, #7]
    SIMCOM_STATE lastState = SIM_STATE_DOWN;
 8009120:	23ff      	movs	r3, #255	; 0xff
 8009122:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    uint32_t tick = _GetTickMS();
 8009126:	f000 fc41 	bl	80099ac <_GetTickMS>
 800912a:	6538      	str	r0, [r7, #80]	; 0x50
    static uint8_t init = 1;
    uint8_t depth = 3;
 800912c:	2303      	movs	r3, #3
 800912e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    SIMCOM_RESULT p;

    Simcom_Lock();
 8009132:	f7ff ffd0 	bl	80090d6 <Simcom_Lock>
    // Handle SIMCOM state properly
    while (SIM.state < state) {
 8009136:	e1d7      	b.n	80094e8 <Simcom_SetState+0x3d4>
        if (timeout) {
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d012      	beq.n	8009164 <Simcom_SetState+0x50>
            // Update tick
            if (p == SIM_RESULT_OK) {
 800913e:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8009142:	2b01      	cmp	r3, #1
 8009144:	d102      	bne.n	800914c <Simcom_SetState+0x38>
                tick = _GetTickMS();
 8009146:	f000 fc31 	bl	80099ac <_GetTickMS>
 800914a:	6538      	str	r0, [r7, #80]	; 0x50
            }
            // Handle timeout
            if ((_GetTickMS() - tick) > timeout) {
 800914c:	f000 fc2e 	bl	80099ac <_GetTickMS>
 8009150:	4602      	mov	r2, r0
 8009152:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009154:	1ad3      	subs	r3, r2, r3
 8009156:	683a      	ldr	r2, [r7, #0]
 8009158:	429a      	cmp	r2, r3
 800915a:	d203      	bcs.n	8009164 <Simcom_SetState+0x50>
                LOG_StrLn("Simcom:StateTimeout");
 800915c:	48bd      	ldr	r0, [pc, #756]	; (8009454 <Simcom_SetState+0x340>)
 800915e:	f7ff fe91 	bl	8008e84 <LOG_StrLn>
                break;
 8009162:	e1c9      	b.n	80094f8 <Simcom_SetState+0x3e4>
            }
        }
        // Handle locked-loop
        if (SIM.state < lastState) {
 8009164:	4bbc      	ldr	r3, [pc, #752]	; (8009458 <Simcom_SetState+0x344>)
 8009166:	f993 3000 	ldrsb.w	r3, [r3]
 800916a:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 800916e:	429a      	cmp	r2, r3
 8009170:	dd16      	ble.n	80091a0 <Simcom_SetState+0x8c>
            if (!--depth) {
 8009172:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009176:	3b01      	subs	r3, #1
 8009178:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800917c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009180:	2b00      	cmp	r3, #0
 8009182:	d103      	bne.n	800918c <Simcom_SetState+0x78>
                SIM.state = SIM_STATE_DOWN;
 8009184:	4bb4      	ldr	r3, [pc, #720]	; (8009458 <Simcom_SetState+0x344>)
 8009186:	22ff      	movs	r2, #255	; 0xff
 8009188:	701a      	strb	r2, [r3, #0]
                break;
 800918a:	e1b5      	b.n	80094f8 <Simcom_SetState+0x3e4>
            }
            LOG_Str("Simcom:LockedLoop = ");
 800918c:	48b3      	ldr	r0, [pc, #716]	; (800945c <Simcom_SetState+0x348>)
 800918e:	f7ff fe61 	bl	8008e54 <LOG_Str>
            LOG_Int(depth);
 8009192:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009196:	4618      	mov	r0, r3
 8009198:	f7ff fde4 	bl	8008d64 <LOG_Int>
            LOG_Enter();
 800919c:	f7ff fdd6 	bl	8008d4c <LOG_Enter>
        }
        // Handle signal
        if (SIM.state == SIM_STATE_DOWN) {
 80091a0:	4bad      	ldr	r3, [pc, #692]	; (8009458 <Simcom_SetState+0x344>)
 80091a2:	f993 3000 	ldrsb.w	r3, [r3]
 80091a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091aa:	d103      	bne.n	80091b4 <Simcom_SetState+0xa0>
            SIM.signal = 0;
 80091ac:	4baa      	ldr	r3, [pc, #680]	; (8009458 <Simcom_SetState+0x344>)
 80091ae:	2200      	movs	r2, #0
 80091b0:	741a      	strb	r2, [r3, #16]
 80091b2:	e00f      	b.n	80091d4 <Simcom_SetState+0xc0>
        } else {
            Simcom_IdleJob(NULL);
 80091b4:	2000      	movs	r0, #0
 80091b6:	f000 faa5 	bl	8009704 <Simcom_IdleJob>
            if (SIM.state >= SIM_STATE_GPRS_ON) {
 80091ba:	4ba7      	ldr	r3, [pc, #668]	; (8009458 <Simcom_SetState+0x344>)
 80091bc:	f993 3000 	ldrsb.w	r3, [r3]
 80091c0:	2b02      	cmp	r3, #2
 80091c2:	dd07      	ble.n	80091d4 <Simcom_SetState+0xc0>
                // Force to exit loop
                if (SIM.signal < 15) {
 80091c4:	4ba4      	ldr	r3, [pc, #656]	; (8009458 <Simcom_SetState+0x344>)
 80091c6:	7c1b      	ldrb	r3, [r3, #16]
 80091c8:	2b0e      	cmp	r3, #14
 80091ca:	d803      	bhi.n	80091d4 <Simcom_SetState+0xc0>
                    LOG_StrLn("Simcom:PoorSignal");
 80091cc:	48a4      	ldr	r0, [pc, #656]	; (8009460 <Simcom_SetState+0x34c>)
 80091ce:	f7ff fe59 	bl	8008e84 <LOG_StrLn>
                    break;
 80091d2:	e191      	b.n	80094f8 <Simcom_SetState+0x3e4>
                }
            }
        }

        // Set value
        p = SIM_RESULT_OK;
 80091d4:	2301      	movs	r3, #1
 80091d6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
        lastState = SIM.state;
 80091da:	4b9f      	ldr	r3, [pc, #636]	; (8009458 <Simcom_SetState+0x344>)
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        // Handle simcom states
        switch (SIM.state) {
 80091e2:	4b9d      	ldr	r3, [pc, #628]	; (8009458 <Simcom_SetState+0x344>)
 80091e4:	f993 3000 	ldrsb.w	r3, [r3]
 80091e8:	3301      	adds	r3, #1
 80091ea:	2b03      	cmp	r3, #3
 80091ec:	f200 817b 	bhi.w	80094e6 <Simcom_SetState+0x3d2>
 80091f0:	a201      	add	r2, pc, #4	; (adr r2, 80091f8 <Simcom_SetState+0xe4>)
 80091f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f6:	bf00      	nop
 80091f8:	08009209 	.word	0x08009209
 80091fc:	08009261 	.word	0x08009261
 8009200:	08009335 	.word	0x08009335
 8009204:	080093f7 	.word	0x080093f7
            case SIM_STATE_DOWN:
                // only executed at power up
                if (init) {
 8009208:	4b96      	ldr	r3, [pc, #600]	; (8009464 <Simcom_SetState+0x350>)
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d006      	beq.n	800921e <Simcom_SetState+0x10a>
                    init = 0;
 8009210:	4b94      	ldr	r3, [pc, #592]	; (8009464 <Simcom_SetState+0x350>)
 8009212:	2200      	movs	r2, #0
 8009214:	701a      	strb	r2, [r3, #0]
                    LOG_StrLn("Simcom:Init");
 8009216:	4894      	ldr	r0, [pc, #592]	; (8009468 <Simcom_SetState+0x354>)
 8009218:	f7ff fe34 	bl	8008e84 <LOG_StrLn>
 800921c:	e002      	b.n	8009224 <Simcom_SetState+0x110>
                } else {
                    LOG_StrLn("Simcom:Restarting...");
 800921e:	4893      	ldr	r0, [pc, #588]	; (800946c <Simcom_SetState+0x358>)
 8009220:	f7ff fe30 	bl	8008e84 <LOG_StrLn>
                }

                // power up the module
                p = Simcom_Power();
 8009224:	f000 fad6 	bl	80097d4 <Simcom_Power>
 8009228:	4603      	mov	r3, r0
 800922a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

                // upgrade simcom state
                if (p > 0) {
 800922e:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8009232:	2b00      	cmp	r3, #0
 8009234:	dd0c      	ble.n	8009250 <Simcom_SetState+0x13c>
                    SIM.state++;
 8009236:	4b88      	ldr	r3, [pc, #544]	; (8009458 <Simcom_SetState+0x344>)
 8009238:	f993 3000 	ldrsb.w	r3, [r3]
 800923c:	b2db      	uxtb	r3, r3
 800923e:	3301      	adds	r3, #1
 8009240:	b2db      	uxtb	r3, r3
 8009242:	b25a      	sxtb	r2, r3
 8009244:	4b84      	ldr	r3, [pc, #528]	; (8009458 <Simcom_SetState+0x344>)
 8009246:	701a      	strb	r2, [r3, #0]
                    LOG_StrLn("Simcom:ON");
 8009248:	4889      	ldr	r0, [pc, #548]	; (8009470 <Simcom_SetState+0x35c>)
 800924a:	f7ff fe1b 	bl	8008e84 <LOG_StrLn>
 800924e:	e002      	b.n	8009256 <Simcom_SetState+0x142>
                } else {
                    LOG_StrLn("Simcom:Error");
 8009250:	4888      	ldr	r0, [pc, #544]	; (8009474 <Simcom_SetState+0x360>)
 8009252:	f7ff fe17 	bl	8008e84 <LOG_StrLn>
                }

                _DelayMS(500);
 8009256:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800925a:	f000 fb9c 	bl	8009996 <_DelayMS>
                break;
 800925e:	e143      	b.n	80094e8 <Simcom_SetState+0x3d4>
            case SIM_STATE_READY:
                // =========== BASIC CONFIGURATION
                // disable command echo
                if (p > 0) {
 8009260:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8009264:	2b00      	cmp	r3, #0
 8009266:	dd05      	ble.n	8009274 <Simcom_SetState+0x160>
                    p = AT_CommandEchoMode(0);
 8009268:	2000      	movs	r0, #0
 800926a:	f7fe fc83 	bl	8007b74 <AT_CommandEchoMode>
 800926e:	4603      	mov	r3, r0
 8009270:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
                }
                // Set serial baud-rate
                if (p > 0) {
 8009274:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8009278:	2b00      	cmp	r3, #0
 800927a:	dd0a      	ble.n	8009292 <Simcom_SetState+0x17e>
                    uint32_t rate = 0;
 800927c:	2300      	movs	r3, #0
 800927e:	64bb      	str	r3, [r7, #72]	; 0x48
                    p = AT_FixedLocalRate(ATW, &rate);
 8009280:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009284:	4619      	mov	r1, r3
 8009286:	2000      	movs	r0, #0
 8009288:	f7fe ff42 	bl	8008110 <AT_FixedLocalRate>
 800928c:	4603      	mov	r3, r0
 800928e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
                }
                // Error report format: 0, 1(Numeric), 2(verbose)
                if (p > 0) {
 8009292:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8009296:	2b00      	cmp	r3, #0
 8009298:	dd0a      	ble.n	80092b0 <Simcom_SetState+0x19c>
                    AT_CMEE state = CMEE_VERBOSE;
 800929a:	2302      	movs	r3, #2
 800929c:	647b      	str	r3, [r7, #68]	; 0x44
                    p = AT_ReportMobileEquipmentError(ATW, &state);
 800929e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80092a2:	4619      	mov	r1, r3
 80092a4:	2000      	movs	r0, #0
 80092a6:	f7fe ff1f 	bl	80080e8 <AT_ReportMobileEquipmentError>
 80092aa:	4603      	mov	r3, r0
 80092ac:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
                }
                // Use pin DTR as sleep control
                if (p > 0) {
 80092b0:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	dd0a      	ble.n	80092ce <Simcom_SetState+0x1ba>
                    AT_CSCLK state = CSCLK_EN_DTR;
 80092b8:	2301      	movs	r3, #1
 80092ba:	643b      	str	r3, [r7, #64]	; 0x40
                    p = AT_ConfigureSlowClock(ATW, &state);
 80092bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80092c0:	4619      	mov	r1, r3
 80092c2:	2000      	movs	r0, #0
 80092c4:	f7fe fefc 	bl	80080c0 <AT_ConfigureSlowClock>
 80092c8:	4603      	mov	r3, r0
 80092ca:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
                    p = AT_ShowRemoteIp(ATW, &state);
                }
#endif
                // =========== NETWORK CONFIGURATION
                // Check SIM Card
                if (p > 0) {
 80092ce:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	dd09      	ble.n	80092ea <Simcom_SetState+0x1d6>
                    p = Simcom_Command("AT+CPIN?\r", "READY", 500, 0);
 80092d6:	2300      	movs	r3, #0
 80092d8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80092dc:	4966      	ldr	r1, [pc, #408]	; (8009478 <Simcom_SetState+0x364>)
 80092de:	4867      	ldr	r0, [pc, #412]	; (800947c <Simcom_SetState+0x368>)
 80092e0:	f000 f9a4 	bl	800962c <Simcom_Command>
 80092e4:	4603      	mov	r3, r0
 80092e6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
                }
                // Disable presentation of <AcT>&<rac> at CREG and CGREG
                if (p > 0) {
 80092ea:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	dd0e      	ble.n	8009310 <Simcom_SetState+0x1fc>
                    at_csact_t param = {
 80092f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80092f6:	2200      	movs	r2, #0
 80092f8:	601a      	str	r2, [r3, #0]
 80092fa:	605a      	str	r2, [r3, #4]
 80092fc:	609a      	str	r2, [r3, #8]
                            .creg = 0,
                            .cgreg = 0,
                    };
                    p = AT_NetworkAttachedStatus(ATW, &param);
 80092fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009302:	4619      	mov	r1, r3
 8009304:	2000      	movs	r0, #0
 8009306:	f7fe fd9f 	bl	8007e48 <AT_NetworkAttachedStatus>
 800930a:	4603      	mov	r3, r0
 800930c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
                }

                // upgrade simcom state
                if (p > 0) {
 8009310:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8009314:	2b00      	cmp	r3, #0
 8009316:	dd08      	ble.n	800932a <Simcom_SetState+0x216>
                    SIM.state++;
 8009318:	4b4f      	ldr	r3, [pc, #316]	; (8009458 <Simcom_SetState+0x344>)
 800931a:	f993 3000 	ldrsb.w	r3, [r3]
 800931e:	b2db      	uxtb	r3, r3
 8009320:	3301      	adds	r3, #1
 8009322:	b2db      	uxtb	r3, r3
 8009324:	b25a      	sxtb	r2, r3
 8009326:	4b4c      	ldr	r3, [pc, #304]	; (8009458 <Simcom_SetState+0x344>)
 8009328:	701a      	strb	r2, [r3, #0]
                }

                _DelayMS(500);
 800932a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800932e:	f000 fb32 	bl	8009996 <_DelayMS>
                break;
 8009332:	e0d9      	b.n	80094e8 <Simcom_SetState+0x3d4>
            case SIM_STATE_CONFIGURED:
                // =========== NETWORK ATTACH
                // Set signal Generation 2G(13)/3G(14)/AUTO(2)
                if (p > 0) {
 8009334:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8009338:	2b00      	cmp	r3, #0
 800933a:	dd0f      	ble.n	800935c <Simcom_SetState+0x248>
                    at_cnmp_t param = {
 800933c:	4a50      	ldr	r2, [pc, #320]	; (8009480 <Simcom_SetState+0x36c>)
 800933e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009342:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009346:	e883 0003 	stmia.w	r3, {r0, r1}
                            .mode = CNMP_ACT_AUTO,
                            .preferred = CNMP_ACT_P_UMTS
                    };
                    p = AT_RadioAccessTechnology(ATW, &param);
 800934a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800934e:	4619      	mov	r1, r3
 8009350:	2000      	movs	r0, #0
 8009352:	f7fe fce3 	bl	8007d1c <AT_RadioAccessTechnology>
 8009356:	4603      	mov	r3, r0
 8009358:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
                }
                // Network Registration Status
                if (p > 0) {
 800935c:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8009360:	2b00      	cmp	r3, #0
 8009362:	dd36      	ble.n	80093d2 <Simcom_SetState+0x2be>
                    at_c_greg_t read, param = {
 8009364:	2300      	movs	r3, #0
 8009366:	61fb      	str	r3, [r7, #28]
 8009368:	2301      	movs	r3, #1
 800936a:	623b      	str	r3, [r7, #32]
                            .mode = CREG_MODE_DISABLE,
                            .stat = CREG_STAT_REG_HOME
                    };
                    // wait until attached
                    do {
                        p = AT_NetworkRegistration("CREG", ATW, &param);
 800936c:	f107 031c 	add.w	r3, r7, #28
 8009370:	461a      	mov	r2, r3
 8009372:	2100      	movs	r1, #0
 8009374:	4843      	ldr	r0, [pc, #268]	; (8009484 <Simcom_SetState+0x370>)
 8009376:	f7fe fe13 	bl	8007fa0 <AT_NetworkRegistration>
 800937a:	4603      	mov	r3, r0
 800937c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
                        if (p > 0) {
 8009380:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8009384:	2b00      	cmp	r3, #0
 8009386:	dd09      	ble.n	800939c <Simcom_SetState+0x288>
                            p = AT_NetworkRegistration("CREG", ATR, &read);
 8009388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800938c:	461a      	mov	r2, r3
 800938e:	2101      	movs	r1, #1
 8009390:	483c      	ldr	r0, [pc, #240]	; (8009484 <Simcom_SetState+0x370>)
 8009392:	f7fe fe05 	bl	8007fa0 <AT_NetworkRegistration>
 8009396:	4603      	mov	r3, r0
 8009398:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
                        }

                        // Handle timeout
                        if (timeout && (_GetTickMS() - tick) > timeout) {
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d00b      	beq.n	80093ba <Simcom_SetState+0x2a6>
 80093a2:	f000 fb03 	bl	80099ac <_GetTickMS>
 80093a6:	4602      	mov	r2, r0
 80093a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093aa:	1ad3      	subs	r3, r2, r3
 80093ac:	683a      	ldr	r2, [r7, #0]
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d203      	bcs.n	80093ba <Simcom_SetState+0x2a6>
                            LOG_StrLn("Simcom:StateTimeout");
 80093b2:	4828      	ldr	r0, [pc, #160]	; (8009454 <Simcom_SetState+0x340>)
 80093b4:	f7ff fd66 	bl	8008e84 <LOG_StrLn>
                            break;
 80093b8:	e00b      	b.n	80093d2 <Simcom_SetState+0x2be>
                        }
                        _DelayMS(1000);
 80093ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80093be:	f000 faea 	bl	8009996 <_DelayMS>
                    } while (p && read.stat != param.stat);
 80093c2:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d003      	beq.n	80093d2 <Simcom_SetState+0x2be>
 80093ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093cc:	6a3b      	ldr	r3, [r7, #32]
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d1cc      	bne.n	800936c <Simcom_SetState+0x258>
                }

                // upgrade simcom state
                if (p > 0) {
 80093d2:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	dd08      	ble.n	80093ec <Simcom_SetState+0x2d8>
                    SIM.state++;
 80093da:	4b1f      	ldr	r3, [pc, #124]	; (8009458 <Simcom_SetState+0x344>)
 80093dc:	f993 3000 	ldrsb.w	r3, [r3]
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	3301      	adds	r3, #1
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	b25a      	sxtb	r2, r3
 80093e8:	4b1b      	ldr	r3, [pc, #108]	; (8009458 <Simcom_SetState+0x344>)
 80093ea:	701a      	strb	r2, [r3, #0]
                }

                _DelayMS(500);
 80093ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80093f0:	f000 fad1 	bl	8009996 <_DelayMS>
                break;
 80093f4:	e078      	b.n	80094e8 <Simcom_SetState+0x3d4>
            case SIM_STATE_NETWORK_ON:
                // =========== GPRS ATTACH
                // GPRS Registration Status
                if (p > 0) {
 80093f6:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	dd52      	ble.n	80094a4 <Simcom_SetState+0x390>
                    at_c_greg_t read, param = {
 80093fe:	2300      	movs	r3, #0
 8009400:	60fb      	str	r3, [r7, #12]
 8009402:	2301      	movs	r3, #1
 8009404:	613b      	str	r3, [r7, #16]
                            .mode = CREG_MODE_DISABLE,
                            .stat = CREG_STAT_REG_HOME
                    };
                    // wait until attached
                    do {
                        p = AT_NetworkRegistration("CGREG", ATW, &param);
 8009406:	f107 030c 	add.w	r3, r7, #12
 800940a:	461a      	mov	r2, r3
 800940c:	2100      	movs	r1, #0
 800940e:	481e      	ldr	r0, [pc, #120]	; (8009488 <Simcom_SetState+0x374>)
 8009410:	f7fe fdc6 	bl	8007fa0 <AT_NetworkRegistration>
 8009414:	4603      	mov	r3, r0
 8009416:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
                        if (p > 0) {
 800941a:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800941e:	2b00      	cmp	r3, #0
 8009420:	dd09      	ble.n	8009436 <Simcom_SetState+0x322>
                            p = AT_NetworkRegistration("CGREG", ATR, &read);
 8009422:	f107 0314 	add.w	r3, r7, #20
 8009426:	461a      	mov	r2, r3
 8009428:	2101      	movs	r1, #1
 800942a:	4817      	ldr	r0, [pc, #92]	; (8009488 <Simcom_SetState+0x374>)
 800942c:	f7fe fdb8 	bl	8007fa0 <AT_NetworkRegistration>
 8009430:	4603      	mov	r3, r0
 8009432:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
                        }

                        // Handle timeout
                        if (timeout && (_GetTickMS() - tick) > timeout) {
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d027      	beq.n	800948c <Simcom_SetState+0x378>
 800943c:	f000 fab6 	bl	80099ac <_GetTickMS>
 8009440:	4602      	mov	r2, r0
 8009442:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009444:	1ad3      	subs	r3, r2, r3
 8009446:	683a      	ldr	r2, [r7, #0]
 8009448:	429a      	cmp	r2, r3
 800944a:	d21f      	bcs.n	800948c <Simcom_SetState+0x378>
                            LOG_StrLn("Simcom:StateTimeout");
 800944c:	4801      	ldr	r0, [pc, #4]	; (8009454 <Simcom_SetState+0x340>)
 800944e:	f7ff fd19 	bl	8008e84 <LOG_StrLn>
                            break;
 8009452:	e027      	b.n	80094a4 <Simcom_SetState+0x390>
 8009454:	0800aa38 	.word	0x0800aa38
 8009458:	20000010 	.word	0x20000010
 800945c:	0800aa4c 	.word	0x0800aa4c
 8009460:	0800aa64 	.word	0x0800aa64
 8009464:	20000028 	.word	0x20000028
 8009468:	0800aa78 	.word	0x0800aa78
 800946c:	0800aa84 	.word	0x0800aa84
 8009470:	0800aa9c 	.word	0x0800aa9c
 8009474:	0800aaa8 	.word	0x0800aaa8
 8009478:	0800aab8 	.word	0x0800aab8
 800947c:	0800aac0 	.word	0x0800aac0
 8009480:	0800aadc 	.word	0x0800aadc
 8009484:	0800aacc 	.word	0x0800aacc
 8009488:	0800aad4 	.word	0x0800aad4
                        }
                        _DelayMS(1000);
 800948c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009490:	f000 fa81 	bl	8009996 <_DelayMS>
                    } while (p && read.stat != param.stat);
 8009494:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8009498:	2b00      	cmp	r3, #0
 800949a:	d003      	beq.n	80094a4 <Simcom_SetState+0x390>
 800949c:	69ba      	ldr	r2, [r7, #24]
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d1b0      	bne.n	8009406 <Simcom_SetState+0x2f2>
                }

                // upgrade simcom state
                if (p > 0) {
 80094a4:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	dd09      	ble.n	80094c0 <Simcom_SetState+0x3ac>
                    SIM.state++;
 80094ac:	4b1a      	ldr	r3, [pc, #104]	; (8009518 <Simcom_SetState+0x404>)
 80094ae:	f993 3000 	ldrsb.w	r3, [r3]
 80094b2:	b2db      	uxtb	r3, r3
 80094b4:	3301      	adds	r3, #1
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	b25a      	sxtb	r2, r3
 80094ba:	4b17      	ldr	r3, [pc, #92]	; (8009518 <Simcom_SetState+0x404>)
 80094bc:	701a      	strb	r2, [r3, #0]
 80094be:	e00d      	b.n	80094dc <Simcom_SetState+0x3c8>
                } else {
                    if (SIM.state == SIM_STATE_NETWORK_ON) {
 80094c0:	4b15      	ldr	r3, [pc, #84]	; (8009518 <Simcom_SetState+0x404>)
 80094c2:	f993 3000 	ldrsb.w	r3, [r3]
 80094c6:	2b02      	cmp	r3, #2
 80094c8:	d108      	bne.n	80094dc <Simcom_SetState+0x3c8>
                        SIM.state--;
 80094ca:	4b13      	ldr	r3, [pc, #76]	; (8009518 <Simcom_SetState+0x404>)
 80094cc:	f993 3000 	ldrsb.w	r3, [r3]
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	3b01      	subs	r3, #1
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	b25a      	sxtb	r2, r3
 80094d8:	4b0f      	ldr	r3, [pc, #60]	; (8009518 <Simcom_SetState+0x404>)
 80094da:	701a      	strb	r2, [r3, #0]
                    }
                }

                _DelayMS(500);
 80094dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80094e0:	f000 fa59 	bl	8009996 <_DelayMS>
                break;
 80094e4:	e000      	b.n	80094e8 <Simcom_SetState+0x3d4>
                }

                break;
#endif
            default:
                break;
 80094e6:	bf00      	nop
    while (SIM.state < state) {
 80094e8:	4b0b      	ldr	r3, [pc, #44]	; (8009518 <Simcom_SetState+0x404>)
 80094ea:	f993 3000 	ldrsb.w	r3, [r3]
 80094ee:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80094f2:	429a      	cmp	r2, r3
 80094f4:	f73f ae20 	bgt.w	8009138 <Simcom_SetState+0x24>
        }
    };
    Simcom_Unlock();
 80094f8:	f7ff fdf4 	bl	80090e4 <Simcom_Unlock>

    return (SIM.state >= state);
 80094fc:	4b06      	ldr	r3, [pc, #24]	; (8009518 <Simcom_SetState+0x404>)
 80094fe:	f993 3000 	ldrsb.w	r3, [r3]
 8009502:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8009506:	429a      	cmp	r2, r3
 8009508:	bfd4      	ite	le
 800950a:	2301      	movle	r3, #1
 800950c:	2300      	movgt	r3, #0
 800950e:	b2db      	uxtb	r3, r3
}
 8009510:	4618      	mov	r0, r3
 8009512:	3758      	adds	r7, #88	; 0x58
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}
 8009518:	20000010 	.word	0x20000010

0800951c <Simcom_FOTA>:

    Simcom_Unlock();
    return p;
}
#else
uint8_t Simcom_FOTA(uint32_t checksumBackup) {
 800951c:	b580      	push	{r7, lr}
 800951e:	b0ac      	sub	sp, #176	; 0xb0
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 8009524:	2300      	movs	r3, #0
 8009526:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    uint32_t checksum = 0, len = 0;
 800952a:	2300      	movs	r3, #0
 800952c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009530:	2300      	movs	r3, #0
 8009532:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    at_ftp_t ftp = {
 8009536:	f107 030c 	add.w	r3, r7, #12
 800953a:	2298      	movs	r2, #152	; 0x98
 800953c:	2100      	movs	r1, #0
 800953e:	4618      	mov	r0, r3
 8009540:	f000 face 	bl	8009ae0 <memset>
 8009544:	4a35      	ldr	r2, [pc, #212]	; (800961c <Simcom_FOTA+0x100>)
 8009546:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800954a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800954e:	6018      	str	r0, [r3, #0]
 8009550:	3304      	adds	r3, #4
 8009552:	8019      	strh	r1, [r3, #0]
 8009554:	f107 0366 	add.w	r3, r7, #102	; 0x66
 8009558:	2200      	movs	r2, #0
 800955a:	601a      	str	r2, [r3, #0]
 800955c:	605a      	str	r2, [r3, #4]
 800955e:	609a      	str	r2, [r3, #8]
 8009560:	819a      	strh	r2, [r3, #12]
 8009562:	4b2f      	ldr	r3, [pc, #188]	; (8009620 <Simcom_FOTA+0x104>)
 8009564:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009568:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800956c:	2200      	movs	r2, #0
 800956e:	601a      	str	r2, [r3, #0]
 8009570:	605a      	str	r2, [r3, #4]
 8009572:	609a      	str	r2, [r3, #8]
 8009574:	60da      	str	r2, [r3, #12]
            .path = "/vcu/",
            .version = "APP"
    };

    Simcom_Lock();
 8009576:	f7ff fdae 	bl	80090d6 <Simcom_Lock>
    // FOTA download, program & check
    if (Simcom_SetState(SIM_STATE_GPRS_ON, 60000)) {
 800957a:	f64e 2160 	movw	r1, #60000	; 0xea60
 800957e:	2003      	movs	r0, #3
 8009580:	f7ff fdc8 	bl	8009114 <Simcom_SetState>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d03a      	beq.n	8009600 <Simcom_FOTA+0xe4>
        // Initialize bearer for TCP based apps.
        p = FOTA_BearerInitialize();
 800958a:	f7f7 feb3 	bl	80012f4 <FOTA_BearerInitialize>
 800958e:	4603      	mov	r3, r0
 8009590:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

        // Get checksum of new firmware
        if (p > 0) {
 8009594:	f997 30af 	ldrsb.w	r3, [r7, #175]	; 0xaf
 8009598:	2b00      	cmp	r3, #0
 800959a:	dd0a      	ble.n	80095b2 <Simcom_FOTA+0x96>
            p = FOTA_GetChecksum(&ftp, &checksum);
 800959c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80095a0:	f107 030c 	add.w	r3, r7, #12
 80095a4:	4611      	mov	r1, r2
 80095a6:	4618      	mov	r0, r3
 80095a8:	f7f7 fed6 	bl	8001358 <FOTA_GetChecksum>
 80095ac:	4603      	mov	r3, r0
 80095ae:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
        }

        // Only download when image is different
        if (p > 0) {
 80095b2:	f997 30af 	ldrsb.w	r3, [r7, #175]	; 0xaf
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	dd22      	ble.n	8009600 <Simcom_FOTA+0xe4>
            if (checksumBackup == checksum) {
 80095ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d103      	bne.n	80095cc <Simcom_FOTA+0xb0>
                LOG_StrLn("FOTA:Cancelled => SameVersion");
 80095c4:	4817      	ldr	r0, [pc, #92]	; (8009624 <Simcom_FOTA+0x108>)
 80095c6:	f7ff fc5d 	bl	8008e84 <LOG_StrLn>
 80095ca:	e019      	b.n	8009600 <Simcom_FOTA+0xe4>
            } else {
                // Download & Program new firmware
                p = FOTA_DownloadAndInstall(&ftp, &len);
 80095cc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80095d0:	f107 030c 	add.w	r3, r7, #12
 80095d4:	4611      	mov	r1, r2
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7f7 ff58 	bl	800148c <FOTA_DownloadAndInstall>
 80095dc:	4603      	mov	r3, r0
 80095de:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

                // Buffer filled, compare the checksum
                if (p > 0) {
 80095e2:	f997 30af 	ldrsb.w	r3, [r7, #175]	; 0xaf
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	dd0a      	ble.n	8009600 <Simcom_FOTA+0xe4>
                    p = FOTA_CompareChecksum(checksum, len, APP_START_ADDR);
 80095ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80095ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80095f2:	4a0d      	ldr	r2, [pc, #52]	; (8009628 <Simcom_FOTA+0x10c>)
 80095f4:	4618      	mov	r0, r3
 80095f6:	f7f8 f853 	bl	80016a0 <FOTA_CompareChecksum>
 80095fa:	4603      	mov	r3, r0
 80095fc:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
                }
            }
        }
    }
    Simcom_Unlock();
 8009600:	f7ff fd70 	bl	80090e4 <Simcom_Unlock>

    return (p == SIM_RESULT_OK);
 8009604:	f997 30af 	ldrsb.w	r3, [r7, #175]	; 0xaf
 8009608:	2b01      	cmp	r3, #1
 800960a:	bf0c      	ite	eq
 800960c:	2301      	moveq	r3, #1
 800960e:	2300      	movne	r3, #0
 8009610:	b2db      	uxtb	r3, r3
}
 8009612:	4618      	mov	r0, r3
 8009614:	37b0      	adds	r7, #176	; 0xb0
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
 800961a:	bf00      	nop
 800961c:	0800ab04 	.word	0x0800ab04
 8009620:	00505041 	.word	0x00505041
 8009624:	0800aae4 	.word	0x0800aae4
 8009628:	08020000 	.word	0x08020000

0800962c <Simcom_Command>:
#endif

SIMCOM_RESULT Simcom_Command(char *data, char *res, uint32_t ms, uint16_t size) {
 800962c:	b580      	push	{r7, lr}
 800962e:	b086      	sub	sp, #24
 8009630:	af00      	add	r7, sp, #0
 8009632:	60f8      	str	r0, [r7, #12]
 8009634:	60b9      	str	r1, [r7, #8]
 8009636:	607a      	str	r2, [r7, #4]
 8009638:	807b      	strh	r3, [r7, #2]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 800963a:	2300      	movs	r3, #0
 800963c:	75fb      	strb	r3, [r7, #23]
    uint8_t upload = 1;
 800963e:	2301      	movs	r3, #1
 8009640:	75bb      	strb	r3, [r7, #22]

    // Handle default value
    if (res == NULL) {
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d101      	bne.n	800964c <Simcom_Command+0x20>
        res = SIMCOM_RSP_OK;
 8009648:	4b28      	ldr	r3, [pc, #160]	; (80096ec <Simcom_Command+0xc0>)
 800964a:	60bb      	str	r3, [r7, #8]
    }
    if (!size) {
 800964c:	887b      	ldrh	r3, [r7, #2]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d106      	bne.n	8009660 <Simcom_Command+0x34>
        upload = 0;
 8009652:	2300      	movs	r3, #0
 8009654:	75bb      	strb	r3, [r7, #22]
        size = strlen(data);
 8009656:	68f8      	ldr	r0, [r7, #12]
 8009658:	f7f6 fdec 	bl	8000234 <strlen>
 800965c:	4603      	mov	r3, r0
 800965e:	807b      	strh	r3, [r7, #2]
    }

    // only handle command if SIM_STATE_READY or BOOT_CMD
    if (SIM.state >= SIM_STATE_READY || (strcmp(data, SIMCOM_CMD_BOOT) == 0)) {
 8009660:	4b23      	ldr	r3, [pc, #140]	; (80096f0 <Simcom_Command+0xc4>)
 8009662:	f993 3000 	ldrsb.w	r3, [r3]
 8009666:	2b00      	cmp	r3, #0
 8009668:	da06      	bge.n	8009678 <Simcom_Command+0x4c>
 800966a:	4922      	ldr	r1, [pc, #136]	; (80096f4 <Simcom_Command+0xc8>)
 800966c:	68f8      	ldr	r0, [r7, #12]
 800966e:	f7f6 fdd7 	bl	8000220 <strcmp>
 8009672:	4603      	mov	r3, r0
 8009674:	2b00      	cmp	r3, #0
 8009676:	d133      	bne.n	80096e0 <Simcom_Command+0xb4>
        Simcom_Lock();
 8009678:	f7ff fd2d 	bl	80090d6 <Simcom_Lock>

        // Debug: print command
        if (SIMCOM_DEBUG) {
            if (!upload) {
 800967c:	7dbb      	ldrb	r3, [r7, #22]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d108      	bne.n	8009694 <Simcom_Command+0x68>
                LOG_Str("\n=> ");
 8009682:	481d      	ldr	r0, [pc, #116]	; (80096f8 <Simcom_Command+0xcc>)
 8009684:	f7ff fbe6 	bl	8008e54 <LOG_Str>
                LOG_Buf(data, size);
 8009688:	887b      	ldrh	r3, [r7, #2]
 800968a:	4619      	mov	r1, r3
 800968c:	68f8      	ldr	r0, [r7, #12]
 800968e:	f7ff fc14 	bl	8008eba <LOG_Buf>
 8009692:	e004      	b.n	800969e <Simcom_Command+0x72>
            } else {
                LOG_BufHex(data, size);
 8009694:	887b      	ldrh	r3, [r7, #2]
 8009696:	4619      	mov	r1, r3
 8009698:	68f8      	ldr	r0, [r7, #12]
 800969a:	f7ff fc2d 	bl	8008ef8 <LOG_BufHex>
            }
            LOG_Enter();
 800969e:	f7ff fb55 	bl	8008d4c <LOG_Enter>
        }

        // send command
        p = Simcom_Execute(data, size, ms, res);
 80096a2:	8879      	ldrh	r1, [r7, #2]
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	68f8      	ldr	r0, [r7, #12]
 80096aa:	f000 f8db 	bl	8009864 <Simcom_Execute>
 80096ae:	4603      	mov	r3, r0
 80096b0:	75fb      	strb	r3, [r7, #23]

        // Debug: print response
        if (SIMCOM_DEBUG) {
            char *FTPGET = "AT+FTPGET=2";
 80096b2:	4b12      	ldr	r3, [pc, #72]	; (80096fc <Simcom_Command+0xd0>)
 80096b4:	613b      	str	r3, [r7, #16]
            if (strncmp(data, FTPGET, strlen(FTPGET)) != 0) {
 80096b6:	6938      	ldr	r0, [r7, #16]
 80096b8:	f7f6 fdbc 	bl	8000234 <strlen>
 80096bc:	4603      	mov	r3, r0
 80096be:	461a      	mov	r2, r3
 80096c0:	6939      	ldr	r1, [r7, #16]
 80096c2:	68f8      	ldr	r0, [r7, #12]
 80096c4:	f000 fa34 	bl	8009b30 <strncmp>
 80096c8:	4603      	mov	r3, r0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d006      	beq.n	80096dc <Simcom_Command+0xb0>
                LOG_Buf(SIMCOM_UART_RX, sizeof(SIMCOM_UART_RX));
 80096ce:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80096d2:	480b      	ldr	r0, [pc, #44]	; (8009700 <Simcom_Command+0xd4>)
 80096d4:	f7ff fbf1 	bl	8008eba <LOG_Buf>
                LOG_Enter();
 80096d8:	f7ff fb38 	bl	8008d4c <LOG_Enter>
            }
        }

        Simcom_Unlock();
 80096dc:	f7ff fd02 	bl	80090e4 <Simcom_Unlock>
    }

    return p;
 80096e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3718      	adds	r7, #24
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}
 80096ec:	0800ab18 	.word	0x0800ab18
 80096f0:	20000010 	.word	0x20000010
 80096f4:	0800ab1c 	.word	0x0800ab1c
 80096f8:	0800ab20 	.word	0x0800ab20
 80096fc:	0800ab28 	.word	0x0800ab28
 8009700:	200003d0 	.word	0x200003d0

08009704 <Simcom_IdleJob>:

SIMCOM_RESULT Simcom_IdleJob(uint8_t *iteration) {
 8009704:	b580      	push	{r7, lr}
 8009706:	b084      	sub	sp, #16
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 800970c:	2300      	movs	r3, #0
 800970e:	73fb      	strb	r3, [r7, #15]
    at_csq_t signal;

    // debug
    if (iteration != NULL) {
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d00d      	beq.n	8009732 <Simcom_IdleJob+0x2e>
        LOG_Str("Simcom:Iteration = ");
 8009716:	4811      	ldr	r0, [pc, #68]	; (800975c <Simcom_IdleJob+0x58>)
 8009718:	f7ff fb9c 	bl	8008e54 <LOG_Str>
        LOG_Int((*iteration)++);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	781b      	ldrb	r3, [r3, #0]
 8009720:	1c5a      	adds	r2, r3, #1
 8009722:	b2d1      	uxtb	r1, r2
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	7011      	strb	r1, [r2, #0]
 8009728:	4618      	mov	r0, r3
 800972a:	f7ff fb1b 	bl	8008d64 <LOG_Int>
        LOG_Enter();
 800972e:	f7ff fb0d 	bl	8008d4c <LOG_Enter>
    }

    // other routines
    p = AT_SignalQualityReport(&signal);
 8009732:	f107 030c 	add.w	r3, r7, #12
 8009736:	4618      	mov	r0, r3
 8009738:	f7fe fa42 	bl	8007bc0 <AT_SignalQualityReport>
 800973c:	4603      	mov	r3, r0
 800973e:	73fb      	strb	r3, [r7, #15]
    if (p > 0) {
 8009740:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009744:	2b00      	cmp	r3, #0
 8009746:	dd02      	ble.n	800974e <Simcom_IdleJob+0x4a>
        SIM.signal = signal.percent;
 8009748:	7bba      	ldrb	r2, [r7, #14]
 800974a:	4b05      	ldr	r3, [pc, #20]	; (8009760 <Simcom_IdleJob+0x5c>)
 800974c:	741a      	strb	r2, [r3, #16]
    }
#if (!BOOTLOADER)
    p = AT_ConnectionStatusSingle(&(SIM.ip_status));
#endif
    return p;
 800974e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009752:	4618      	mov	r0, r3
 8009754:	3710      	adds	r7, #16
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
 800975a:	bf00      	nop
 800975c:	0800ab34 	.word	0x0800ab34
 8009760:	20000010 	.word	0x20000010

08009764 <Simcom_Ready>:
static uint8_t Simcom_CommandoIRQ(void) {
    return Simcom_Response(PREFIX_COMMAND) != NULL;
}
#endif

static SIMCOM_RESULT Simcom_Ready(void) {
 8009764:	b580      	push	{r7, lr}
 8009766:	b082      	sub	sp, #8
 8009768:	af00      	add	r7, sp, #0
    // save event
    VCU.SetEvent(EV_VCU_NETWORK_RESTART, 1);
#endif

    // wait until 1s response
    tick = _GetTickMS();
 800976a:	f000 f91f 	bl	80099ac <_GetTickMS>
 800976e:	6078      	str	r0, [r7, #4]
    while (SIM.state == SIM_STATE_DOWN) {
 8009770:	e016      	b.n	80097a0 <Simcom_Ready+0x3c>
        if (Simcom_Response(SIMCOM_RSP_READY)
 8009772:	4814      	ldr	r0, [pc, #80]	; (80097c4 <Simcom_Ready+0x60>)
 8009774:	f7ff fcbe 	bl	80090f4 <Simcom_Response>
 8009778:	4603      	mov	r3, r0
 800977a:	2b00      	cmp	r3, #0
 800977c:	d116      	bne.n	80097ac <Simcom_Ready+0x48>
                || Simcom_Response(SIMCOM_RSP_OK)
 800977e:	4812      	ldr	r0, [pc, #72]	; (80097c8 <Simcom_Ready+0x64>)
 8009780:	f7ff fcb8 	bl	80090f4 <Simcom_Response>
 8009784:	4603      	mov	r3, r0
 8009786:	2b00      	cmp	r3, #0
 8009788:	d110      	bne.n	80097ac <Simcom_Ready+0x48>
                || (_GetTickMS() - tick) >= NET_BOOT_TIMEOUT) {
 800978a:	f000 f90f 	bl	80099ac <_GetTickMS>
 800978e:	4602      	mov	r2, r0
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	1ad3      	subs	r3, r2, r3
 8009794:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8009798:	d208      	bcs.n	80097ac <Simcom_Ready+0x48>
            break;
        }
        _DelayMS(1);
 800979a:	2001      	movs	r0, #1
 800979c:	f000 f8fb 	bl	8009996 <_DelayMS>
    while (SIM.state == SIM_STATE_DOWN) {
 80097a0:	4b0a      	ldr	r3, [pc, #40]	; (80097cc <Simcom_Ready+0x68>)
 80097a2:	f993 3000 	ldrsb.w	r3, [r3]
 80097a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097aa:	d0e2      	beq.n	8009772 <Simcom_Ready+0xe>
    }

    // check
    return Simcom_Command(SIMCOM_CMD_BOOT, SIMCOM_RSP_READY, 1000, 0);
 80097ac:	2300      	movs	r3, #0
 80097ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80097b2:	4904      	ldr	r1, [pc, #16]	; (80097c4 <Simcom_Ready+0x60>)
 80097b4:	4806      	ldr	r0, [pc, #24]	; (80097d0 <Simcom_Ready+0x6c>)
 80097b6:	f7ff ff39 	bl	800962c <Simcom_Command>
 80097ba:	4603      	mov	r3, r0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3708      	adds	r7, #8
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	0800ab48 	.word	0x0800ab48
 80097c8:	0800ab18 	.word	0x0800ab18
 80097cc:	20000010 	.word	0x20000010
 80097d0:	0800ab1c 	.word	0x0800ab1c

080097d4 <Simcom_Power>:

static SIMCOM_RESULT Simcom_Power(void) {
 80097d4:	b580      	push	{r7, lr}
 80097d6:	af00      	add	r7, sp, #0
    LOG_StrLn("Simcom:Powered");
 80097d8:	4814      	ldr	r0, [pc, #80]	; (800982c <Simcom_Power+0x58>)
 80097da:	f7ff fb53 	bl	8008e84 <LOG_StrLn>
    // reset buffer
    SIMCOM_Reset_Buffer();
 80097de:	f7fe f99b 	bl	8007b18 <SIMCOM_Reset_Buffer>

    // power control
    HAL_GPIO_WritePin(INT_NET_PWR_GPIO_Port, INT_NET_PWR_Pin, 0);
 80097e2:	2200      	movs	r2, #0
 80097e4:	2101      	movs	r1, #1
 80097e6:	4812      	ldr	r0, [pc, #72]	; (8009830 <Simcom_Power+0x5c>)
 80097e8:	f7fa f93a 	bl	8003a60 <HAL_GPIO_WritePin>
    _DelayMS(100);
 80097ec:	2064      	movs	r0, #100	; 0x64
 80097ee:	f000 f8d2 	bl	8009996 <_DelayMS>
    HAL_GPIO_WritePin(INT_NET_PWR_GPIO_Port, INT_NET_PWR_Pin, 1);
 80097f2:	2201      	movs	r2, #1
 80097f4:	2101      	movs	r1, #1
 80097f6:	480e      	ldr	r0, [pc, #56]	; (8009830 <Simcom_Power+0x5c>)
 80097f8:	f7fa f932 	bl	8003a60 <HAL_GPIO_WritePin>
    _DelayMS(1000);
 80097fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009800:	f000 f8c9 	bl	8009996 <_DelayMS>

    // simcom reset pin
    HAL_GPIO_WritePin(INT_NET_RST_GPIO_Port, INT_NET_RST_Pin, 1);
 8009804:	2201      	movs	r2, #1
 8009806:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800980a:	480a      	ldr	r0, [pc, #40]	; (8009834 <Simcom_Power+0x60>)
 800980c:	f7fa f928 	bl	8003a60 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8009810:	2001      	movs	r0, #1
 8009812:	f7f8 fe29 	bl	8002468 <HAL_Delay>
    HAL_GPIO_WritePin(INT_NET_RST_GPIO_Port, INT_NET_RST_Pin, 0);
 8009816:	2200      	movs	r2, #0
 8009818:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800981c:	4805      	ldr	r0, [pc, #20]	; (8009834 <Simcom_Power+0x60>)
 800981e:	f7fa f91f 	bl	8003a60 <HAL_GPIO_WritePin>

    // wait response
    return Simcom_Ready();
 8009822:	f7ff ff9f 	bl	8009764 <Simcom_Ready>
 8009826:	4603      	mov	r3, r0
}
 8009828:	4618      	mov	r0, r3
 800982a:	bd80      	pop	{r7, pc}
 800982c:	0800ab4c 	.word	0x0800ab4c
 8009830:	40020800 	.word	0x40020800
 8009834:	40020400 	.word	0x40020400

08009838 <Simcom_Sleep>:

static void Simcom_Sleep(uint8_t state) {
 8009838:	b580      	push	{r7, lr}
 800983a:	b082      	sub	sp, #8
 800983c:	af00      	add	r7, sp, #0
 800983e:	4603      	mov	r3, r0
 8009840:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(INT_NET_DTR_GPIO_Port, INT_NET_DTR_Pin, state);
 8009842:	79fb      	ldrb	r3, [r7, #7]
 8009844:	461a      	mov	r2, r3
 8009846:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800984a:	4805      	ldr	r0, [pc, #20]	; (8009860 <Simcom_Sleep+0x28>)
 800984c:	f7fa f908 	bl	8003a60 <HAL_GPIO_WritePin>
    _DelayMS(50);
 8009850:	2032      	movs	r0, #50	; 0x32
 8009852:	f000 f8a0 	bl	8009996 <_DelayMS>
}
 8009856:	bf00      	nop
 8009858:	3708      	adds	r7, #8
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	40020400 	.word	0x40020400

08009864 <Simcom_Execute>:

static SIMCOM_RESULT Simcom_Execute(char *data, uint16_t size, uint32_t ms, char *res) {
 8009864:	b580      	push	{r7, lr}
 8009866:	b088      	sub	sp, #32
 8009868:	af00      	add	r7, sp, #0
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	607a      	str	r2, [r7, #4]
 800986e:	603b      	str	r3, [r7, #0]
 8009870:	460b      	mov	r3, r1
 8009872:	817b      	strh	r3, [r7, #10]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 8009874:	2300      	movs	r3, #0
 8009876:	77fb      	strb	r3, [r7, #31]
    uint32_t tick, timeout = 0;
 8009878:	2300      	movs	r3, #0
 800987a:	61bb      	str	r3, [r7, #24]

    Simcom_Lock();
 800987c:	f7ff fc2b 	bl	80090d6 <Simcom_Lock>
    // wake-up the SIMCOM
    Simcom_Sleep(0);
 8009880:	2000      	movs	r0, #0
 8009882:	f7ff ffd9 	bl	8009838 <Simcom_Sleep>

    // transmit to serial (low-level)
    Simcom_BeforeTransmitHook();
 8009886:	f000 f87f 	bl	8009988 <Simcom_BeforeTransmitHook>
    SIMCOM_Transmit(data, size);
 800988a:	897b      	ldrh	r3, [r7, #10]
 800988c:	4619      	mov	r1, r3
 800988e:	68f8      	ldr	r0, [r7, #12]
 8009890:	f7fe f954 	bl	8007b3c <SIMCOM_Transmit>

    // convert time to tick
    timeout = (ms + NET_EXTRA_TIME);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800989a:	61bb      	str	r3, [r7, #24]
    // set timeout guard
    tick = _GetTickMS();
 800989c:	f000 f886 	bl	80099ac <_GetTickMS>
 80098a0:	6178      	str	r0, [r7, #20]

    // wait response from SIMCOM
    while (1) {
        if (Simcom_Response(res)
 80098a2:	6838      	ldr	r0, [r7, #0]
 80098a4:	f7ff fc26 	bl	80090f4 <Simcom_Response>
 80098a8:	4603      	mov	r3, r0
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d113      	bne.n	80098d6 <Simcom_Execute+0x72>
                || Simcom_Response(SIMCOM_RSP_ERROR)
 80098ae:	482f      	ldr	r0, [pc, #188]	; (800996c <Simcom_Execute+0x108>)
 80098b0:	f7ff fc20 	bl	80090f4 <Simcom_Response>
 80098b4:	4603      	mov	r3, r0
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d10d      	bne.n	80098d6 <Simcom_Execute+0x72>
                || Simcom_Response(SIMCOM_RSP_READY)
 80098ba:	482d      	ldr	r0, [pc, #180]	; (8009970 <Simcom_Execute+0x10c>)
 80098bc:	f7ff fc1a 	bl	80090f4 <Simcom_Response>
 80098c0:	4603      	mov	r3, r0
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d107      	bne.n	80098d6 <Simcom_Execute+0x72>
                #if (!BOOTLOADER)
                || Simcom_CommandoIRQ()
                #endif
                || (_GetTickMS() - tick) >= timeout) {
 80098c6:	f000 f871 	bl	80099ac <_GetTickMS>
 80098ca:	4602      	mov	r2, r0
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	1ad3      	subs	r3, r2, r3
 80098d0:	69ba      	ldr	r2, [r7, #24]
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d83a      	bhi.n	800994c <Simcom_Execute+0xe8>

            // check response
            if (Simcom_Response(res)) {
 80098d6:	6838      	ldr	r0, [r7, #0]
 80098d8:	f7ff fc0c 	bl	80090f4 <Simcom_Response>
 80098dc:	4603      	mov	r3, r0
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d001      	beq.n	80098e6 <Simcom_Execute+0x82>
                p = SIM_RESULT_OK;
 80098e2:	2301      	movs	r3, #1
 80098e4:	77fb      	strb	r3, [r7, #31]
            }

            // Handle failure
            if (p != SIM_RESULT_OK) {
 80098e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d032      	beq.n	8009954 <Simcom_Execute+0xf0>
                // exception for no response
                if (strlen(SIMCOM_UART_RX) == 0) {
 80098ee:	4b21      	ldr	r3, [pc, #132]	; (8009974 <Simcom_Execute+0x110>)
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d108      	bne.n	8009908 <Simcom_Execute+0xa4>
                    p = SIM_RESULT_NO_RESPONSE;
 80098f6:	23fe      	movs	r3, #254	; 0xfe
 80098f8:	77fb      	strb	r3, [r7, #31]
                    SIM.state = SIM_STATE_DOWN;
 80098fa:	4b1f      	ldr	r3, [pc, #124]	; (8009978 <Simcom_Execute+0x114>)
 80098fc:	22ff      	movs	r2, #255	; 0xff
 80098fe:	701a      	strb	r2, [r3, #0]
                    LOG_StrLn("Simcom:NoResponse");
 8009900:	481e      	ldr	r0, [pc, #120]	; (800997c <Simcom_Execute+0x118>)
 8009902:	f7ff fabf 	bl	8008e84 <LOG_StrLn>
                    }
                }
            }

            // exit loop
            break;
 8009906:	e025      	b.n	8009954 <Simcom_Execute+0xf0>
                    if (Simcom_Response(SIMCOM_RSP_READY) && (SIM.state >= SIM_STATE_READY)) {
 8009908:	4819      	ldr	r0, [pc, #100]	; (8009970 <Simcom_Execute+0x10c>)
 800990a:	f7ff fbf3 	bl	80090f4 <Simcom_Response>
 800990e:	4603      	mov	r3, r0
 8009910:	2b00      	cmp	r3, #0
 8009912:	d00d      	beq.n	8009930 <Simcom_Execute+0xcc>
 8009914:	4b18      	ldr	r3, [pc, #96]	; (8009978 <Simcom_Execute+0x114>)
 8009916:	f993 3000 	ldrsb.w	r3, [r3]
 800991a:	2b00      	cmp	r3, #0
 800991c:	db08      	blt.n	8009930 <Simcom_Execute+0xcc>
                        LOG_StrLn("Simcom:Restarted");
 800991e:	4818      	ldr	r0, [pc, #96]	; (8009980 <Simcom_Execute+0x11c>)
 8009920:	f7ff fab0 	bl	8008e84 <LOG_StrLn>
                        p = SIM_RESULT_RESTARTED;
 8009924:	23fd      	movs	r3, #253	; 0xfd
 8009926:	77fb      	strb	r3, [r7, #31]
                        SIM.state = SIM_STATE_READY;
 8009928:	4b13      	ldr	r3, [pc, #76]	; (8009978 <Simcom_Execute+0x114>)
 800992a:	2200      	movs	r2, #0
 800992c:	701a      	strb	r2, [r3, #0]
            break;
 800992e:	e011      	b.n	8009954 <Simcom_Execute+0xf0>
                    else if ((_GetTickMS() - tick) >= timeout) {
 8009930:	f000 f83c 	bl	80099ac <_GetTickMS>
 8009934:	4602      	mov	r2, r0
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	1ad3      	subs	r3, r2, r3
 800993a:	69ba      	ldr	r2, [r7, #24]
 800993c:	429a      	cmp	r2, r3
 800993e:	d809      	bhi.n	8009954 <Simcom_Execute+0xf0>
                        LOG_StrLn("Simcom:Timeout");
 8009940:	4810      	ldr	r0, [pc, #64]	; (8009984 <Simcom_Execute+0x120>)
 8009942:	f7ff fa9f 	bl	8008e84 <LOG_StrLn>
                        p = SIM_RESULT_TIMEOUT;
 8009946:	23ff      	movs	r3, #255	; 0xff
 8009948:	77fb      	strb	r3, [r7, #31]
            break;
 800994a:	e003      	b.n	8009954 <Simcom_Execute+0xf0>
        }
        _DelayMS(10);
 800994c:	200a      	movs	r0, #10
 800994e:	f000 f822 	bl	8009996 <_DelayMS>
        if (Simcom_Response(res)
 8009952:	e7a6      	b.n	80098a2 <Simcom_Execute+0x3e>
            break;
 8009954:	bf00      	nop
    }

    // sleep the SIMCOM
    Simcom_Sleep(1);
 8009956:	2001      	movs	r0, #1
 8009958:	f7ff ff6e 	bl	8009838 <Simcom_Sleep>
    Simcom_Unlock();
 800995c:	f7ff fbc2 	bl	80090e4 <Simcom_Unlock>
    return p;
 8009960:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009964:	4618      	mov	r0, r3
 8009966:	3720      	adds	r7, #32
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}
 800996c:	0800ab5c 	.word	0x0800ab5c
 8009970:	0800ab48 	.word	0x0800ab48
 8009974:	200003d0 	.word	0x200003d0
 8009978:	20000010 	.word	0x20000010
 800997c:	0800ab64 	.word	0x0800ab64
 8009980:	0800ab78 	.word	0x0800ab78
 8009984:	0800ab8c 	.word	0x0800ab8c

08009988 <Simcom_BeforeTransmitHook>:

static void Simcom_BeforeTransmitHook(void) {
 8009988:	b480      	push	{r7}
 800998a:	af00      	add	r7, sp, #0
    //  LOG_StrLn("============ SIMCOM DEBUG ============");
    //  LOG_Buf(SIMCOM_UART_RX, strlen(SIMCOM_UART_RX));
    //  LOG_Enter();
    //  LOG_StrLn("======================================");

}
 800998c:	bf00      	nop
 800998e:	46bd      	mov	sp, r7
 8009990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009994:	4770      	bx	lr

08009996 <_DelayMS>:
extern vcu_t VCU;
extern sw_t SW;
#endif

/* Public functions implementation --------------------------------------------*/
void _DelayMS(uint32_t ms) {
 8009996:	b580      	push	{r7, lr}
 8009998:	b082      	sub	sp, #8
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
#if RTOS_ENABLE
    osDelay(ms);
#else
    HAL_Delay(ms);
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f7f8 fd62 	bl	8002468 <HAL_Delay>
#endif
}
 80099a4:	bf00      	nop
 80099a6:	3708      	adds	r7, #8
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <_GetTickMS>:

uint32_t _GetTickMS(void) {
 80099ac:	b580      	push	{r7, lr}
 80099ae:	af00      	add	r7, sp, #0
#if RTOS_ENABLE
    return osKernelGetTickCount();
#else
    return HAL_GetTick();
 80099b0:	f7f8 fd4e 	bl	8002450 <HAL_GetTick>
 80099b4:	4603      	mov	r3, r0
#endif
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	bd80      	pop	{r7, pc}
	...

080099bc <_LedWrite>:

uint8_t _LedRead(void) {
    return HAL_GPIO_ReadPin(SYS_LED_GPIO_Port, SYS_LED_Pin);
}

void _LedWrite(uint8_t state) {
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	4603      	mov	r3, r0
 80099c4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SYS_LED_GPIO_Port, SYS_LED_Pin, state);
 80099c6:	79fb      	ldrb	r3, [r7, #7]
 80099c8:	461a      	mov	r2, r3
 80099ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80099ce:	4803      	ldr	r0, [pc, #12]	; (80099dc <_LedWrite+0x20>)
 80099d0:	f7fa f846 	bl	8003a60 <HAL_GPIO_WritePin>
}
 80099d4:	bf00      	nop
 80099d6:	3708      	adds	r7, #8
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	40020c00 	.word	0x40020c00

080099e0 <_LedToggle>:

void _LedToggle(void) {
 80099e0:	b580      	push	{r7, lr}
 80099e2:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(SYS_LED_GPIO_Port, SYS_LED_Pin);
 80099e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80099e8:	4802      	ldr	r0, [pc, #8]	; (80099f4 <_LedToggle+0x14>)
 80099ea:	f7fa f852 	bl	8003a92 <HAL_GPIO_TogglePin>
}
 80099ee:	bf00      	nop
 80099f0:	bd80      	pop	{r7, pc}
 80099f2:	bf00      	nop
 80099f4:	40020c00 	.word	0x40020c00

080099f8 <_Error>:

void _Error(char msg[50]) {
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
#if RTOS_ENABLE
    if (osKernelGetState() == osKernelRunning) {
        LOG_StrLn(msg);
    }
#else
    LOG_StrLn(msg);
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f7ff fa3f 	bl	8008e84 <LOG_StrLn>
#endif

    // indicator error
    while (1) {
        _LedToggle();
 8009a06:	f7ff ffeb 	bl	80099e0 <_LedToggle>
        HAL_Delay(50);
 8009a0a:	2032      	movs	r0, #50	; 0x32
 8009a0c:	f7f8 fd2c 	bl	8002468 <HAL_Delay>
        _LedToggle();
 8009a10:	e7f9      	b.n	8009a06 <_Error+0xe>

08009a12 <_ByteSwap32>:
    }
}

uint32_t _ByteSwap32(uint32_t x) {
 8009a12:	b480      	push	{r7}
 8009a14:	b085      	sub	sp, #20
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	6078      	str	r0, [r7, #4]
    uint32_t y = (x >> 24) & 0xff;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	0e1b      	lsrs	r3, r3, #24
 8009a1e:	60fb      	str	r3, [r7, #12]
    y |= ((x >> 16) & 0xff) << 8;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	0c1b      	lsrs	r3, r3, #16
 8009a24:	021b      	lsls	r3, r3, #8
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	68fa      	ldr	r2, [r7, #12]
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	60fb      	str	r3, [r7, #12]
    y |= ((x >> 8) & 0xff) << 16;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	0a1b      	lsrs	r3, r3, #8
 8009a32:	041b      	lsls	r3, r3, #16
 8009a34:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009a38:	68fa      	ldr	r2, [r7, #12]
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	60fb      	str	r3, [r7, #12]
    y |= (x & 0xff) << 24;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	061b      	lsls	r3, r3, #24
 8009a42:	68fa      	ldr	r2, [r7, #12]
 8009a44:	4313      	orrs	r3, r2
 8009a46:	60fb      	str	r3, [r7, #12]

    return y;
 8009a48:	68fb      	ldr	r3, [r7, #12]
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3714      	adds	r7, #20
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr
	...

08009a58 <__errno>:
 8009a58:	4b01      	ldr	r3, [pc, #4]	; (8009a60 <__errno+0x8>)
 8009a5a:	6818      	ldr	r0, [r3, #0]
 8009a5c:	4770      	bx	lr
 8009a5e:	bf00      	nop
 8009a60:	2000002c 	.word	0x2000002c

08009a64 <__libc_init_array>:
 8009a64:	b570      	push	{r4, r5, r6, lr}
 8009a66:	4e0d      	ldr	r6, [pc, #52]	; (8009a9c <__libc_init_array+0x38>)
 8009a68:	4c0d      	ldr	r4, [pc, #52]	; (8009aa0 <__libc_init_array+0x3c>)
 8009a6a:	1ba4      	subs	r4, r4, r6
 8009a6c:	10a4      	asrs	r4, r4, #2
 8009a6e:	2500      	movs	r5, #0
 8009a70:	42a5      	cmp	r5, r4
 8009a72:	d109      	bne.n	8009a88 <__libc_init_array+0x24>
 8009a74:	4e0b      	ldr	r6, [pc, #44]	; (8009aa4 <__libc_init_array+0x40>)
 8009a76:	4c0c      	ldr	r4, [pc, #48]	; (8009aa8 <__libc_init_array+0x44>)
 8009a78:	f000 fd14 	bl	800a4a4 <_init>
 8009a7c:	1ba4      	subs	r4, r4, r6
 8009a7e:	10a4      	asrs	r4, r4, #2
 8009a80:	2500      	movs	r5, #0
 8009a82:	42a5      	cmp	r5, r4
 8009a84:	d105      	bne.n	8009a92 <__libc_init_array+0x2e>
 8009a86:	bd70      	pop	{r4, r5, r6, pc}
 8009a88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a8c:	4798      	blx	r3
 8009a8e:	3501      	adds	r5, #1
 8009a90:	e7ee      	b.n	8009a70 <__libc_init_array+0xc>
 8009a92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a96:	4798      	blx	r3
 8009a98:	3501      	adds	r5, #1
 8009a9a:	e7f2      	b.n	8009a82 <__libc_init_array+0x1e>
 8009a9c:	0800ad04 	.word	0x0800ad04
 8009aa0:	0800ad04 	.word	0x0800ad04
 8009aa4:	0800ad04 	.word	0x0800ad04
 8009aa8:	0800ad08 	.word	0x0800ad08

08009aac <memcmp>:
 8009aac:	b530      	push	{r4, r5, lr}
 8009aae:	2400      	movs	r4, #0
 8009ab0:	42a2      	cmp	r2, r4
 8009ab2:	d101      	bne.n	8009ab8 <memcmp+0xc>
 8009ab4:	2000      	movs	r0, #0
 8009ab6:	e007      	b.n	8009ac8 <memcmp+0x1c>
 8009ab8:	5d03      	ldrb	r3, [r0, r4]
 8009aba:	3401      	adds	r4, #1
 8009abc:	190d      	adds	r5, r1, r4
 8009abe:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8009ac2:	42ab      	cmp	r3, r5
 8009ac4:	d0f4      	beq.n	8009ab0 <memcmp+0x4>
 8009ac6:	1b58      	subs	r0, r3, r5
 8009ac8:	bd30      	pop	{r4, r5, pc}

08009aca <memcpy>:
 8009aca:	b510      	push	{r4, lr}
 8009acc:	1e43      	subs	r3, r0, #1
 8009ace:	440a      	add	r2, r1
 8009ad0:	4291      	cmp	r1, r2
 8009ad2:	d100      	bne.n	8009ad6 <memcpy+0xc>
 8009ad4:	bd10      	pop	{r4, pc}
 8009ad6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ada:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ade:	e7f7      	b.n	8009ad0 <memcpy+0x6>

08009ae0 <memset>:
 8009ae0:	4402      	add	r2, r0
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d100      	bne.n	8009aea <memset+0xa>
 8009ae8:	4770      	bx	lr
 8009aea:	f803 1b01 	strb.w	r1, [r3], #1
 8009aee:	e7f9      	b.n	8009ae4 <memset+0x4>

08009af0 <siprintf>:
 8009af0:	b40e      	push	{r1, r2, r3}
 8009af2:	b500      	push	{lr}
 8009af4:	b09c      	sub	sp, #112	; 0x70
 8009af6:	ab1d      	add	r3, sp, #116	; 0x74
 8009af8:	9002      	str	r0, [sp, #8]
 8009afa:	9006      	str	r0, [sp, #24]
 8009afc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009b00:	4809      	ldr	r0, [pc, #36]	; (8009b28 <siprintf+0x38>)
 8009b02:	9107      	str	r1, [sp, #28]
 8009b04:	9104      	str	r1, [sp, #16]
 8009b06:	4909      	ldr	r1, [pc, #36]	; (8009b2c <siprintf+0x3c>)
 8009b08:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b0c:	9105      	str	r1, [sp, #20]
 8009b0e:	6800      	ldr	r0, [r0, #0]
 8009b10:	9301      	str	r3, [sp, #4]
 8009b12:	a902      	add	r1, sp, #8
 8009b14:	f000 f938 	bl	8009d88 <_svfiprintf_r>
 8009b18:	9b02      	ldr	r3, [sp, #8]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	701a      	strb	r2, [r3, #0]
 8009b1e:	b01c      	add	sp, #112	; 0x70
 8009b20:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b24:	b003      	add	sp, #12
 8009b26:	4770      	bx	lr
 8009b28:	2000002c 	.word	0x2000002c
 8009b2c:	ffff0208 	.word	0xffff0208

08009b30 <strncmp>:
 8009b30:	b510      	push	{r4, lr}
 8009b32:	b16a      	cbz	r2, 8009b50 <strncmp+0x20>
 8009b34:	3901      	subs	r1, #1
 8009b36:	1884      	adds	r4, r0, r2
 8009b38:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009b3c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d103      	bne.n	8009b4c <strncmp+0x1c>
 8009b44:	42a0      	cmp	r0, r4
 8009b46:	d001      	beq.n	8009b4c <strncmp+0x1c>
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d1f5      	bne.n	8009b38 <strncmp+0x8>
 8009b4c:	1a98      	subs	r0, r3, r2
 8009b4e:	bd10      	pop	{r4, pc}
 8009b50:	4610      	mov	r0, r2
 8009b52:	e7fc      	b.n	8009b4e <strncmp+0x1e>

08009b54 <strstr>:
 8009b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b56:	7803      	ldrb	r3, [r0, #0]
 8009b58:	b17b      	cbz	r3, 8009b7a <strstr+0x26>
 8009b5a:	4604      	mov	r4, r0
 8009b5c:	7823      	ldrb	r3, [r4, #0]
 8009b5e:	4620      	mov	r0, r4
 8009b60:	1c66      	adds	r6, r4, #1
 8009b62:	b17b      	cbz	r3, 8009b84 <strstr+0x30>
 8009b64:	1e4a      	subs	r2, r1, #1
 8009b66:	1e63      	subs	r3, r4, #1
 8009b68:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8009b6c:	b14d      	cbz	r5, 8009b82 <strstr+0x2e>
 8009b6e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8009b72:	42af      	cmp	r7, r5
 8009b74:	4634      	mov	r4, r6
 8009b76:	d0f7      	beq.n	8009b68 <strstr+0x14>
 8009b78:	e7f0      	b.n	8009b5c <strstr+0x8>
 8009b7a:	780b      	ldrb	r3, [r1, #0]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	bf18      	it	ne
 8009b80:	2000      	movne	r0, #0
 8009b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b84:	4618      	mov	r0, r3
 8009b86:	e7fc      	b.n	8009b82 <strstr+0x2e>

08009b88 <_strtoul_l.isra.0>:
 8009b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b8c:	4680      	mov	r8, r0
 8009b8e:	4689      	mov	r9, r1
 8009b90:	4692      	mov	sl, r2
 8009b92:	461e      	mov	r6, r3
 8009b94:	460f      	mov	r7, r1
 8009b96:	463d      	mov	r5, r7
 8009b98:	9808      	ldr	r0, [sp, #32]
 8009b9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b9e:	f000 f883 	bl	8009ca8 <__locale_ctype_ptr_l>
 8009ba2:	4420      	add	r0, r4
 8009ba4:	7843      	ldrb	r3, [r0, #1]
 8009ba6:	f013 0308 	ands.w	r3, r3, #8
 8009baa:	d130      	bne.n	8009c0e <_strtoul_l.isra.0+0x86>
 8009bac:	2c2d      	cmp	r4, #45	; 0x2d
 8009bae:	d130      	bne.n	8009c12 <_strtoul_l.isra.0+0x8a>
 8009bb0:	787c      	ldrb	r4, [r7, #1]
 8009bb2:	1cbd      	adds	r5, r7, #2
 8009bb4:	2101      	movs	r1, #1
 8009bb6:	2e00      	cmp	r6, #0
 8009bb8:	d05c      	beq.n	8009c74 <_strtoul_l.isra.0+0xec>
 8009bba:	2e10      	cmp	r6, #16
 8009bbc:	d109      	bne.n	8009bd2 <_strtoul_l.isra.0+0x4a>
 8009bbe:	2c30      	cmp	r4, #48	; 0x30
 8009bc0:	d107      	bne.n	8009bd2 <_strtoul_l.isra.0+0x4a>
 8009bc2:	782b      	ldrb	r3, [r5, #0]
 8009bc4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009bc8:	2b58      	cmp	r3, #88	; 0x58
 8009bca:	d14e      	bne.n	8009c6a <_strtoul_l.isra.0+0xe2>
 8009bcc:	786c      	ldrb	r4, [r5, #1]
 8009bce:	2610      	movs	r6, #16
 8009bd0:	3502      	adds	r5, #2
 8009bd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	fbb2 f2f6 	udiv	r2, r2, r6
 8009bdc:	fb06 fc02 	mul.w	ip, r6, r2
 8009be0:	ea6f 0c0c 	mvn.w	ip, ip
 8009be4:	4618      	mov	r0, r3
 8009be6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009bea:	2f09      	cmp	r7, #9
 8009bec:	d817      	bhi.n	8009c1e <_strtoul_l.isra.0+0x96>
 8009bee:	463c      	mov	r4, r7
 8009bf0:	42a6      	cmp	r6, r4
 8009bf2:	dd23      	ble.n	8009c3c <_strtoul_l.isra.0+0xb4>
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	db1e      	blt.n	8009c36 <_strtoul_l.isra.0+0xae>
 8009bf8:	4282      	cmp	r2, r0
 8009bfa:	d31c      	bcc.n	8009c36 <_strtoul_l.isra.0+0xae>
 8009bfc:	d101      	bne.n	8009c02 <_strtoul_l.isra.0+0x7a>
 8009bfe:	45a4      	cmp	ip, r4
 8009c00:	db19      	blt.n	8009c36 <_strtoul_l.isra.0+0xae>
 8009c02:	fb00 4006 	mla	r0, r0, r6, r4
 8009c06:	2301      	movs	r3, #1
 8009c08:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c0c:	e7eb      	b.n	8009be6 <_strtoul_l.isra.0+0x5e>
 8009c0e:	462f      	mov	r7, r5
 8009c10:	e7c1      	b.n	8009b96 <_strtoul_l.isra.0+0xe>
 8009c12:	2c2b      	cmp	r4, #43	; 0x2b
 8009c14:	bf04      	itt	eq
 8009c16:	1cbd      	addeq	r5, r7, #2
 8009c18:	787c      	ldrbeq	r4, [r7, #1]
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	e7cb      	b.n	8009bb6 <_strtoul_l.isra.0+0x2e>
 8009c1e:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009c22:	2f19      	cmp	r7, #25
 8009c24:	d801      	bhi.n	8009c2a <_strtoul_l.isra.0+0xa2>
 8009c26:	3c37      	subs	r4, #55	; 0x37
 8009c28:	e7e2      	b.n	8009bf0 <_strtoul_l.isra.0+0x68>
 8009c2a:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009c2e:	2f19      	cmp	r7, #25
 8009c30:	d804      	bhi.n	8009c3c <_strtoul_l.isra.0+0xb4>
 8009c32:	3c57      	subs	r4, #87	; 0x57
 8009c34:	e7dc      	b.n	8009bf0 <_strtoul_l.isra.0+0x68>
 8009c36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c3a:	e7e5      	b.n	8009c08 <_strtoul_l.isra.0+0x80>
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	da09      	bge.n	8009c54 <_strtoul_l.isra.0+0xcc>
 8009c40:	2322      	movs	r3, #34	; 0x22
 8009c42:	f8c8 3000 	str.w	r3, [r8]
 8009c46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c4a:	f1ba 0f00 	cmp.w	sl, #0
 8009c4e:	d107      	bne.n	8009c60 <_strtoul_l.isra.0+0xd8>
 8009c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c54:	b101      	cbz	r1, 8009c58 <_strtoul_l.isra.0+0xd0>
 8009c56:	4240      	negs	r0, r0
 8009c58:	f1ba 0f00 	cmp.w	sl, #0
 8009c5c:	d0f8      	beq.n	8009c50 <_strtoul_l.isra.0+0xc8>
 8009c5e:	b10b      	cbz	r3, 8009c64 <_strtoul_l.isra.0+0xdc>
 8009c60:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8009c64:	f8ca 9000 	str.w	r9, [sl]
 8009c68:	e7f2      	b.n	8009c50 <_strtoul_l.isra.0+0xc8>
 8009c6a:	2430      	movs	r4, #48	; 0x30
 8009c6c:	2e00      	cmp	r6, #0
 8009c6e:	d1b0      	bne.n	8009bd2 <_strtoul_l.isra.0+0x4a>
 8009c70:	2608      	movs	r6, #8
 8009c72:	e7ae      	b.n	8009bd2 <_strtoul_l.isra.0+0x4a>
 8009c74:	2c30      	cmp	r4, #48	; 0x30
 8009c76:	d0a4      	beq.n	8009bc2 <_strtoul_l.isra.0+0x3a>
 8009c78:	260a      	movs	r6, #10
 8009c7a:	e7aa      	b.n	8009bd2 <_strtoul_l.isra.0+0x4a>

08009c7c <strtoul>:
 8009c7c:	4b08      	ldr	r3, [pc, #32]	; (8009ca0 <strtoul+0x24>)
 8009c7e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c80:	681c      	ldr	r4, [r3, #0]
 8009c82:	4d08      	ldr	r5, [pc, #32]	; (8009ca4 <strtoul+0x28>)
 8009c84:	6a23      	ldr	r3, [r4, #32]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	bf08      	it	eq
 8009c8a:	462b      	moveq	r3, r5
 8009c8c:	9300      	str	r3, [sp, #0]
 8009c8e:	4613      	mov	r3, r2
 8009c90:	460a      	mov	r2, r1
 8009c92:	4601      	mov	r1, r0
 8009c94:	4620      	mov	r0, r4
 8009c96:	f7ff ff77 	bl	8009b88 <_strtoul_l.isra.0>
 8009c9a:	b003      	add	sp, #12
 8009c9c:	bd30      	pop	{r4, r5, pc}
 8009c9e:	bf00      	nop
 8009ca0:	2000002c 	.word	0x2000002c
 8009ca4:	20000090 	.word	0x20000090

08009ca8 <__locale_ctype_ptr_l>:
 8009ca8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009cac:	4770      	bx	lr

08009cae <__ascii_mbtowc>:
 8009cae:	b082      	sub	sp, #8
 8009cb0:	b901      	cbnz	r1, 8009cb4 <__ascii_mbtowc+0x6>
 8009cb2:	a901      	add	r1, sp, #4
 8009cb4:	b142      	cbz	r2, 8009cc8 <__ascii_mbtowc+0x1a>
 8009cb6:	b14b      	cbz	r3, 8009ccc <__ascii_mbtowc+0x1e>
 8009cb8:	7813      	ldrb	r3, [r2, #0]
 8009cba:	600b      	str	r3, [r1, #0]
 8009cbc:	7812      	ldrb	r2, [r2, #0]
 8009cbe:	1c10      	adds	r0, r2, #0
 8009cc0:	bf18      	it	ne
 8009cc2:	2001      	movne	r0, #1
 8009cc4:	b002      	add	sp, #8
 8009cc6:	4770      	bx	lr
 8009cc8:	4610      	mov	r0, r2
 8009cca:	e7fb      	b.n	8009cc4 <__ascii_mbtowc+0x16>
 8009ccc:	f06f 0001 	mvn.w	r0, #1
 8009cd0:	e7f8      	b.n	8009cc4 <__ascii_mbtowc+0x16>

08009cd2 <__ssputs_r>:
 8009cd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cd6:	688e      	ldr	r6, [r1, #8]
 8009cd8:	429e      	cmp	r6, r3
 8009cda:	4682      	mov	sl, r0
 8009cdc:	460c      	mov	r4, r1
 8009cde:	4690      	mov	r8, r2
 8009ce0:	4699      	mov	r9, r3
 8009ce2:	d837      	bhi.n	8009d54 <__ssputs_r+0x82>
 8009ce4:	898a      	ldrh	r2, [r1, #12]
 8009ce6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009cea:	d031      	beq.n	8009d50 <__ssputs_r+0x7e>
 8009cec:	6825      	ldr	r5, [r4, #0]
 8009cee:	6909      	ldr	r1, [r1, #16]
 8009cf0:	1a6f      	subs	r7, r5, r1
 8009cf2:	6965      	ldr	r5, [r4, #20]
 8009cf4:	2302      	movs	r3, #2
 8009cf6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009cfa:	fb95 f5f3 	sdiv	r5, r5, r3
 8009cfe:	f109 0301 	add.w	r3, r9, #1
 8009d02:	443b      	add	r3, r7
 8009d04:	429d      	cmp	r5, r3
 8009d06:	bf38      	it	cc
 8009d08:	461d      	movcc	r5, r3
 8009d0a:	0553      	lsls	r3, r2, #21
 8009d0c:	d530      	bpl.n	8009d70 <__ssputs_r+0x9e>
 8009d0e:	4629      	mov	r1, r5
 8009d10:	f000 fb2e 	bl	800a370 <_malloc_r>
 8009d14:	4606      	mov	r6, r0
 8009d16:	b950      	cbnz	r0, 8009d2e <__ssputs_r+0x5c>
 8009d18:	230c      	movs	r3, #12
 8009d1a:	f8ca 3000 	str.w	r3, [sl]
 8009d1e:	89a3      	ldrh	r3, [r4, #12]
 8009d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d24:	81a3      	strh	r3, [r4, #12]
 8009d26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d2e:	463a      	mov	r2, r7
 8009d30:	6921      	ldr	r1, [r4, #16]
 8009d32:	f7ff feca 	bl	8009aca <memcpy>
 8009d36:	89a3      	ldrh	r3, [r4, #12]
 8009d38:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d40:	81a3      	strh	r3, [r4, #12]
 8009d42:	6126      	str	r6, [r4, #16]
 8009d44:	6165      	str	r5, [r4, #20]
 8009d46:	443e      	add	r6, r7
 8009d48:	1bed      	subs	r5, r5, r7
 8009d4a:	6026      	str	r6, [r4, #0]
 8009d4c:	60a5      	str	r5, [r4, #8]
 8009d4e:	464e      	mov	r6, r9
 8009d50:	454e      	cmp	r6, r9
 8009d52:	d900      	bls.n	8009d56 <__ssputs_r+0x84>
 8009d54:	464e      	mov	r6, r9
 8009d56:	4632      	mov	r2, r6
 8009d58:	4641      	mov	r1, r8
 8009d5a:	6820      	ldr	r0, [r4, #0]
 8009d5c:	f000 faa1 	bl	800a2a2 <memmove>
 8009d60:	68a3      	ldr	r3, [r4, #8]
 8009d62:	1b9b      	subs	r3, r3, r6
 8009d64:	60a3      	str	r3, [r4, #8]
 8009d66:	6823      	ldr	r3, [r4, #0]
 8009d68:	441e      	add	r6, r3
 8009d6a:	6026      	str	r6, [r4, #0]
 8009d6c:	2000      	movs	r0, #0
 8009d6e:	e7dc      	b.n	8009d2a <__ssputs_r+0x58>
 8009d70:	462a      	mov	r2, r5
 8009d72:	f000 fb57 	bl	800a424 <_realloc_r>
 8009d76:	4606      	mov	r6, r0
 8009d78:	2800      	cmp	r0, #0
 8009d7a:	d1e2      	bne.n	8009d42 <__ssputs_r+0x70>
 8009d7c:	6921      	ldr	r1, [r4, #16]
 8009d7e:	4650      	mov	r0, sl
 8009d80:	f000 faa8 	bl	800a2d4 <_free_r>
 8009d84:	e7c8      	b.n	8009d18 <__ssputs_r+0x46>
	...

08009d88 <_svfiprintf_r>:
 8009d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d8c:	461d      	mov	r5, r3
 8009d8e:	898b      	ldrh	r3, [r1, #12]
 8009d90:	061f      	lsls	r7, r3, #24
 8009d92:	b09d      	sub	sp, #116	; 0x74
 8009d94:	4680      	mov	r8, r0
 8009d96:	460c      	mov	r4, r1
 8009d98:	4616      	mov	r6, r2
 8009d9a:	d50f      	bpl.n	8009dbc <_svfiprintf_r+0x34>
 8009d9c:	690b      	ldr	r3, [r1, #16]
 8009d9e:	b96b      	cbnz	r3, 8009dbc <_svfiprintf_r+0x34>
 8009da0:	2140      	movs	r1, #64	; 0x40
 8009da2:	f000 fae5 	bl	800a370 <_malloc_r>
 8009da6:	6020      	str	r0, [r4, #0]
 8009da8:	6120      	str	r0, [r4, #16]
 8009daa:	b928      	cbnz	r0, 8009db8 <_svfiprintf_r+0x30>
 8009dac:	230c      	movs	r3, #12
 8009dae:	f8c8 3000 	str.w	r3, [r8]
 8009db2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009db6:	e0c8      	b.n	8009f4a <_svfiprintf_r+0x1c2>
 8009db8:	2340      	movs	r3, #64	; 0x40
 8009dba:	6163      	str	r3, [r4, #20]
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8009dc0:	2320      	movs	r3, #32
 8009dc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009dc6:	2330      	movs	r3, #48	; 0x30
 8009dc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009dcc:	9503      	str	r5, [sp, #12]
 8009dce:	f04f 0b01 	mov.w	fp, #1
 8009dd2:	4637      	mov	r7, r6
 8009dd4:	463d      	mov	r5, r7
 8009dd6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009dda:	b10b      	cbz	r3, 8009de0 <_svfiprintf_r+0x58>
 8009ddc:	2b25      	cmp	r3, #37	; 0x25
 8009dde:	d13e      	bne.n	8009e5e <_svfiprintf_r+0xd6>
 8009de0:	ebb7 0a06 	subs.w	sl, r7, r6
 8009de4:	d00b      	beq.n	8009dfe <_svfiprintf_r+0x76>
 8009de6:	4653      	mov	r3, sl
 8009de8:	4632      	mov	r2, r6
 8009dea:	4621      	mov	r1, r4
 8009dec:	4640      	mov	r0, r8
 8009dee:	f7ff ff70 	bl	8009cd2 <__ssputs_r>
 8009df2:	3001      	adds	r0, #1
 8009df4:	f000 80a4 	beq.w	8009f40 <_svfiprintf_r+0x1b8>
 8009df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dfa:	4453      	add	r3, sl
 8009dfc:	9309      	str	r3, [sp, #36]	; 0x24
 8009dfe:	783b      	ldrb	r3, [r7, #0]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	f000 809d 	beq.w	8009f40 <_svfiprintf_r+0x1b8>
 8009e06:	2300      	movs	r3, #0
 8009e08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e10:	9304      	str	r3, [sp, #16]
 8009e12:	9307      	str	r3, [sp, #28]
 8009e14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e18:	931a      	str	r3, [sp, #104]	; 0x68
 8009e1a:	462f      	mov	r7, r5
 8009e1c:	2205      	movs	r2, #5
 8009e1e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009e22:	4850      	ldr	r0, [pc, #320]	; (8009f64 <_svfiprintf_r+0x1dc>)
 8009e24:	f7f6 fa14 	bl	8000250 <memchr>
 8009e28:	9b04      	ldr	r3, [sp, #16]
 8009e2a:	b9d0      	cbnz	r0, 8009e62 <_svfiprintf_r+0xda>
 8009e2c:	06d9      	lsls	r1, r3, #27
 8009e2e:	bf44      	itt	mi
 8009e30:	2220      	movmi	r2, #32
 8009e32:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009e36:	071a      	lsls	r2, r3, #28
 8009e38:	bf44      	itt	mi
 8009e3a:	222b      	movmi	r2, #43	; 0x2b
 8009e3c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009e40:	782a      	ldrb	r2, [r5, #0]
 8009e42:	2a2a      	cmp	r2, #42	; 0x2a
 8009e44:	d015      	beq.n	8009e72 <_svfiprintf_r+0xea>
 8009e46:	9a07      	ldr	r2, [sp, #28]
 8009e48:	462f      	mov	r7, r5
 8009e4a:	2000      	movs	r0, #0
 8009e4c:	250a      	movs	r5, #10
 8009e4e:	4639      	mov	r1, r7
 8009e50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e54:	3b30      	subs	r3, #48	; 0x30
 8009e56:	2b09      	cmp	r3, #9
 8009e58:	d94d      	bls.n	8009ef6 <_svfiprintf_r+0x16e>
 8009e5a:	b1b8      	cbz	r0, 8009e8c <_svfiprintf_r+0x104>
 8009e5c:	e00f      	b.n	8009e7e <_svfiprintf_r+0xf6>
 8009e5e:	462f      	mov	r7, r5
 8009e60:	e7b8      	b.n	8009dd4 <_svfiprintf_r+0x4c>
 8009e62:	4a40      	ldr	r2, [pc, #256]	; (8009f64 <_svfiprintf_r+0x1dc>)
 8009e64:	1a80      	subs	r0, r0, r2
 8009e66:	fa0b f000 	lsl.w	r0, fp, r0
 8009e6a:	4318      	orrs	r0, r3
 8009e6c:	9004      	str	r0, [sp, #16]
 8009e6e:	463d      	mov	r5, r7
 8009e70:	e7d3      	b.n	8009e1a <_svfiprintf_r+0x92>
 8009e72:	9a03      	ldr	r2, [sp, #12]
 8009e74:	1d11      	adds	r1, r2, #4
 8009e76:	6812      	ldr	r2, [r2, #0]
 8009e78:	9103      	str	r1, [sp, #12]
 8009e7a:	2a00      	cmp	r2, #0
 8009e7c:	db01      	blt.n	8009e82 <_svfiprintf_r+0xfa>
 8009e7e:	9207      	str	r2, [sp, #28]
 8009e80:	e004      	b.n	8009e8c <_svfiprintf_r+0x104>
 8009e82:	4252      	negs	r2, r2
 8009e84:	f043 0302 	orr.w	r3, r3, #2
 8009e88:	9207      	str	r2, [sp, #28]
 8009e8a:	9304      	str	r3, [sp, #16]
 8009e8c:	783b      	ldrb	r3, [r7, #0]
 8009e8e:	2b2e      	cmp	r3, #46	; 0x2e
 8009e90:	d10c      	bne.n	8009eac <_svfiprintf_r+0x124>
 8009e92:	787b      	ldrb	r3, [r7, #1]
 8009e94:	2b2a      	cmp	r3, #42	; 0x2a
 8009e96:	d133      	bne.n	8009f00 <_svfiprintf_r+0x178>
 8009e98:	9b03      	ldr	r3, [sp, #12]
 8009e9a:	1d1a      	adds	r2, r3, #4
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	9203      	str	r2, [sp, #12]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	bfb8      	it	lt
 8009ea4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009ea8:	3702      	adds	r7, #2
 8009eaa:	9305      	str	r3, [sp, #20]
 8009eac:	4d2e      	ldr	r5, [pc, #184]	; (8009f68 <_svfiprintf_r+0x1e0>)
 8009eae:	7839      	ldrb	r1, [r7, #0]
 8009eb0:	2203      	movs	r2, #3
 8009eb2:	4628      	mov	r0, r5
 8009eb4:	f7f6 f9cc 	bl	8000250 <memchr>
 8009eb8:	b138      	cbz	r0, 8009eca <_svfiprintf_r+0x142>
 8009eba:	2340      	movs	r3, #64	; 0x40
 8009ebc:	1b40      	subs	r0, r0, r5
 8009ebe:	fa03 f000 	lsl.w	r0, r3, r0
 8009ec2:	9b04      	ldr	r3, [sp, #16]
 8009ec4:	4303      	orrs	r3, r0
 8009ec6:	3701      	adds	r7, #1
 8009ec8:	9304      	str	r3, [sp, #16]
 8009eca:	7839      	ldrb	r1, [r7, #0]
 8009ecc:	4827      	ldr	r0, [pc, #156]	; (8009f6c <_svfiprintf_r+0x1e4>)
 8009ece:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ed2:	2206      	movs	r2, #6
 8009ed4:	1c7e      	adds	r6, r7, #1
 8009ed6:	f7f6 f9bb 	bl	8000250 <memchr>
 8009eda:	2800      	cmp	r0, #0
 8009edc:	d038      	beq.n	8009f50 <_svfiprintf_r+0x1c8>
 8009ede:	4b24      	ldr	r3, [pc, #144]	; (8009f70 <_svfiprintf_r+0x1e8>)
 8009ee0:	bb13      	cbnz	r3, 8009f28 <_svfiprintf_r+0x1a0>
 8009ee2:	9b03      	ldr	r3, [sp, #12]
 8009ee4:	3307      	adds	r3, #7
 8009ee6:	f023 0307 	bic.w	r3, r3, #7
 8009eea:	3308      	adds	r3, #8
 8009eec:	9303      	str	r3, [sp, #12]
 8009eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ef0:	444b      	add	r3, r9
 8009ef2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ef4:	e76d      	b.n	8009dd2 <_svfiprintf_r+0x4a>
 8009ef6:	fb05 3202 	mla	r2, r5, r2, r3
 8009efa:	2001      	movs	r0, #1
 8009efc:	460f      	mov	r7, r1
 8009efe:	e7a6      	b.n	8009e4e <_svfiprintf_r+0xc6>
 8009f00:	2300      	movs	r3, #0
 8009f02:	3701      	adds	r7, #1
 8009f04:	9305      	str	r3, [sp, #20]
 8009f06:	4619      	mov	r1, r3
 8009f08:	250a      	movs	r5, #10
 8009f0a:	4638      	mov	r0, r7
 8009f0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f10:	3a30      	subs	r2, #48	; 0x30
 8009f12:	2a09      	cmp	r2, #9
 8009f14:	d903      	bls.n	8009f1e <_svfiprintf_r+0x196>
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d0c8      	beq.n	8009eac <_svfiprintf_r+0x124>
 8009f1a:	9105      	str	r1, [sp, #20]
 8009f1c:	e7c6      	b.n	8009eac <_svfiprintf_r+0x124>
 8009f1e:	fb05 2101 	mla	r1, r5, r1, r2
 8009f22:	2301      	movs	r3, #1
 8009f24:	4607      	mov	r7, r0
 8009f26:	e7f0      	b.n	8009f0a <_svfiprintf_r+0x182>
 8009f28:	ab03      	add	r3, sp, #12
 8009f2a:	9300      	str	r3, [sp, #0]
 8009f2c:	4622      	mov	r2, r4
 8009f2e:	4b11      	ldr	r3, [pc, #68]	; (8009f74 <_svfiprintf_r+0x1ec>)
 8009f30:	a904      	add	r1, sp, #16
 8009f32:	4640      	mov	r0, r8
 8009f34:	f3af 8000 	nop.w
 8009f38:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009f3c:	4681      	mov	r9, r0
 8009f3e:	d1d6      	bne.n	8009eee <_svfiprintf_r+0x166>
 8009f40:	89a3      	ldrh	r3, [r4, #12]
 8009f42:	065b      	lsls	r3, r3, #25
 8009f44:	f53f af35 	bmi.w	8009db2 <_svfiprintf_r+0x2a>
 8009f48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f4a:	b01d      	add	sp, #116	; 0x74
 8009f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f50:	ab03      	add	r3, sp, #12
 8009f52:	9300      	str	r3, [sp, #0]
 8009f54:	4622      	mov	r2, r4
 8009f56:	4b07      	ldr	r3, [pc, #28]	; (8009f74 <_svfiprintf_r+0x1ec>)
 8009f58:	a904      	add	r1, sp, #16
 8009f5a:	4640      	mov	r0, r8
 8009f5c:	f000 f882 	bl	800a064 <_printf_i>
 8009f60:	e7ea      	b.n	8009f38 <_svfiprintf_r+0x1b0>
 8009f62:	bf00      	nop
 8009f64:	0800abc6 	.word	0x0800abc6
 8009f68:	0800abcc 	.word	0x0800abcc
 8009f6c:	0800abd0 	.word	0x0800abd0
 8009f70:	00000000 	.word	0x00000000
 8009f74:	08009cd3 	.word	0x08009cd3

08009f78 <_printf_common>:
 8009f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f7c:	4691      	mov	r9, r2
 8009f7e:	461f      	mov	r7, r3
 8009f80:	688a      	ldr	r2, [r1, #8]
 8009f82:	690b      	ldr	r3, [r1, #16]
 8009f84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	bfb8      	it	lt
 8009f8c:	4613      	movlt	r3, r2
 8009f8e:	f8c9 3000 	str.w	r3, [r9]
 8009f92:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f96:	4606      	mov	r6, r0
 8009f98:	460c      	mov	r4, r1
 8009f9a:	b112      	cbz	r2, 8009fa2 <_printf_common+0x2a>
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	f8c9 3000 	str.w	r3, [r9]
 8009fa2:	6823      	ldr	r3, [r4, #0]
 8009fa4:	0699      	lsls	r1, r3, #26
 8009fa6:	bf42      	ittt	mi
 8009fa8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009fac:	3302      	addmi	r3, #2
 8009fae:	f8c9 3000 	strmi.w	r3, [r9]
 8009fb2:	6825      	ldr	r5, [r4, #0]
 8009fb4:	f015 0506 	ands.w	r5, r5, #6
 8009fb8:	d107      	bne.n	8009fca <_printf_common+0x52>
 8009fba:	f104 0a19 	add.w	sl, r4, #25
 8009fbe:	68e3      	ldr	r3, [r4, #12]
 8009fc0:	f8d9 2000 	ldr.w	r2, [r9]
 8009fc4:	1a9b      	subs	r3, r3, r2
 8009fc6:	42ab      	cmp	r3, r5
 8009fc8:	dc28      	bgt.n	800a01c <_printf_common+0xa4>
 8009fca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009fce:	6822      	ldr	r2, [r4, #0]
 8009fd0:	3300      	adds	r3, #0
 8009fd2:	bf18      	it	ne
 8009fd4:	2301      	movne	r3, #1
 8009fd6:	0692      	lsls	r2, r2, #26
 8009fd8:	d42d      	bmi.n	800a036 <_printf_common+0xbe>
 8009fda:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009fde:	4639      	mov	r1, r7
 8009fe0:	4630      	mov	r0, r6
 8009fe2:	47c0      	blx	r8
 8009fe4:	3001      	adds	r0, #1
 8009fe6:	d020      	beq.n	800a02a <_printf_common+0xb2>
 8009fe8:	6823      	ldr	r3, [r4, #0]
 8009fea:	68e5      	ldr	r5, [r4, #12]
 8009fec:	f8d9 2000 	ldr.w	r2, [r9]
 8009ff0:	f003 0306 	and.w	r3, r3, #6
 8009ff4:	2b04      	cmp	r3, #4
 8009ff6:	bf08      	it	eq
 8009ff8:	1aad      	subeq	r5, r5, r2
 8009ffa:	68a3      	ldr	r3, [r4, #8]
 8009ffc:	6922      	ldr	r2, [r4, #16]
 8009ffe:	bf0c      	ite	eq
 800a000:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a004:	2500      	movne	r5, #0
 800a006:	4293      	cmp	r3, r2
 800a008:	bfc4      	itt	gt
 800a00a:	1a9b      	subgt	r3, r3, r2
 800a00c:	18ed      	addgt	r5, r5, r3
 800a00e:	f04f 0900 	mov.w	r9, #0
 800a012:	341a      	adds	r4, #26
 800a014:	454d      	cmp	r5, r9
 800a016:	d11a      	bne.n	800a04e <_printf_common+0xd6>
 800a018:	2000      	movs	r0, #0
 800a01a:	e008      	b.n	800a02e <_printf_common+0xb6>
 800a01c:	2301      	movs	r3, #1
 800a01e:	4652      	mov	r2, sl
 800a020:	4639      	mov	r1, r7
 800a022:	4630      	mov	r0, r6
 800a024:	47c0      	blx	r8
 800a026:	3001      	adds	r0, #1
 800a028:	d103      	bne.n	800a032 <_printf_common+0xba>
 800a02a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a02e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a032:	3501      	adds	r5, #1
 800a034:	e7c3      	b.n	8009fbe <_printf_common+0x46>
 800a036:	18e1      	adds	r1, r4, r3
 800a038:	1c5a      	adds	r2, r3, #1
 800a03a:	2030      	movs	r0, #48	; 0x30
 800a03c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a040:	4422      	add	r2, r4
 800a042:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a046:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a04a:	3302      	adds	r3, #2
 800a04c:	e7c5      	b.n	8009fda <_printf_common+0x62>
 800a04e:	2301      	movs	r3, #1
 800a050:	4622      	mov	r2, r4
 800a052:	4639      	mov	r1, r7
 800a054:	4630      	mov	r0, r6
 800a056:	47c0      	blx	r8
 800a058:	3001      	adds	r0, #1
 800a05a:	d0e6      	beq.n	800a02a <_printf_common+0xb2>
 800a05c:	f109 0901 	add.w	r9, r9, #1
 800a060:	e7d8      	b.n	800a014 <_printf_common+0x9c>
	...

0800a064 <_printf_i>:
 800a064:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a068:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a06c:	460c      	mov	r4, r1
 800a06e:	7e09      	ldrb	r1, [r1, #24]
 800a070:	b085      	sub	sp, #20
 800a072:	296e      	cmp	r1, #110	; 0x6e
 800a074:	4617      	mov	r7, r2
 800a076:	4606      	mov	r6, r0
 800a078:	4698      	mov	r8, r3
 800a07a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a07c:	f000 80b3 	beq.w	800a1e6 <_printf_i+0x182>
 800a080:	d822      	bhi.n	800a0c8 <_printf_i+0x64>
 800a082:	2963      	cmp	r1, #99	; 0x63
 800a084:	d036      	beq.n	800a0f4 <_printf_i+0x90>
 800a086:	d80a      	bhi.n	800a09e <_printf_i+0x3a>
 800a088:	2900      	cmp	r1, #0
 800a08a:	f000 80b9 	beq.w	800a200 <_printf_i+0x19c>
 800a08e:	2958      	cmp	r1, #88	; 0x58
 800a090:	f000 8083 	beq.w	800a19a <_printf_i+0x136>
 800a094:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a098:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a09c:	e032      	b.n	800a104 <_printf_i+0xa0>
 800a09e:	2964      	cmp	r1, #100	; 0x64
 800a0a0:	d001      	beq.n	800a0a6 <_printf_i+0x42>
 800a0a2:	2969      	cmp	r1, #105	; 0x69
 800a0a4:	d1f6      	bne.n	800a094 <_printf_i+0x30>
 800a0a6:	6820      	ldr	r0, [r4, #0]
 800a0a8:	6813      	ldr	r3, [r2, #0]
 800a0aa:	0605      	lsls	r5, r0, #24
 800a0ac:	f103 0104 	add.w	r1, r3, #4
 800a0b0:	d52a      	bpl.n	800a108 <_printf_i+0xa4>
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	6011      	str	r1, [r2, #0]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	da03      	bge.n	800a0c2 <_printf_i+0x5e>
 800a0ba:	222d      	movs	r2, #45	; 0x2d
 800a0bc:	425b      	negs	r3, r3
 800a0be:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a0c2:	486f      	ldr	r0, [pc, #444]	; (800a280 <_printf_i+0x21c>)
 800a0c4:	220a      	movs	r2, #10
 800a0c6:	e039      	b.n	800a13c <_printf_i+0xd8>
 800a0c8:	2973      	cmp	r1, #115	; 0x73
 800a0ca:	f000 809d 	beq.w	800a208 <_printf_i+0x1a4>
 800a0ce:	d808      	bhi.n	800a0e2 <_printf_i+0x7e>
 800a0d0:	296f      	cmp	r1, #111	; 0x6f
 800a0d2:	d020      	beq.n	800a116 <_printf_i+0xb2>
 800a0d4:	2970      	cmp	r1, #112	; 0x70
 800a0d6:	d1dd      	bne.n	800a094 <_printf_i+0x30>
 800a0d8:	6823      	ldr	r3, [r4, #0]
 800a0da:	f043 0320 	orr.w	r3, r3, #32
 800a0de:	6023      	str	r3, [r4, #0]
 800a0e0:	e003      	b.n	800a0ea <_printf_i+0x86>
 800a0e2:	2975      	cmp	r1, #117	; 0x75
 800a0e4:	d017      	beq.n	800a116 <_printf_i+0xb2>
 800a0e6:	2978      	cmp	r1, #120	; 0x78
 800a0e8:	d1d4      	bne.n	800a094 <_printf_i+0x30>
 800a0ea:	2378      	movs	r3, #120	; 0x78
 800a0ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a0f0:	4864      	ldr	r0, [pc, #400]	; (800a284 <_printf_i+0x220>)
 800a0f2:	e055      	b.n	800a1a0 <_printf_i+0x13c>
 800a0f4:	6813      	ldr	r3, [r2, #0]
 800a0f6:	1d19      	adds	r1, r3, #4
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	6011      	str	r1, [r2, #0]
 800a0fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a100:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a104:	2301      	movs	r3, #1
 800a106:	e08c      	b.n	800a222 <_printf_i+0x1be>
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	6011      	str	r1, [r2, #0]
 800a10c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a110:	bf18      	it	ne
 800a112:	b21b      	sxthne	r3, r3
 800a114:	e7cf      	b.n	800a0b6 <_printf_i+0x52>
 800a116:	6813      	ldr	r3, [r2, #0]
 800a118:	6825      	ldr	r5, [r4, #0]
 800a11a:	1d18      	adds	r0, r3, #4
 800a11c:	6010      	str	r0, [r2, #0]
 800a11e:	0628      	lsls	r0, r5, #24
 800a120:	d501      	bpl.n	800a126 <_printf_i+0xc2>
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	e002      	b.n	800a12c <_printf_i+0xc8>
 800a126:	0668      	lsls	r0, r5, #25
 800a128:	d5fb      	bpl.n	800a122 <_printf_i+0xbe>
 800a12a:	881b      	ldrh	r3, [r3, #0]
 800a12c:	4854      	ldr	r0, [pc, #336]	; (800a280 <_printf_i+0x21c>)
 800a12e:	296f      	cmp	r1, #111	; 0x6f
 800a130:	bf14      	ite	ne
 800a132:	220a      	movne	r2, #10
 800a134:	2208      	moveq	r2, #8
 800a136:	2100      	movs	r1, #0
 800a138:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a13c:	6865      	ldr	r5, [r4, #4]
 800a13e:	60a5      	str	r5, [r4, #8]
 800a140:	2d00      	cmp	r5, #0
 800a142:	f2c0 8095 	blt.w	800a270 <_printf_i+0x20c>
 800a146:	6821      	ldr	r1, [r4, #0]
 800a148:	f021 0104 	bic.w	r1, r1, #4
 800a14c:	6021      	str	r1, [r4, #0]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d13d      	bne.n	800a1ce <_printf_i+0x16a>
 800a152:	2d00      	cmp	r5, #0
 800a154:	f040 808e 	bne.w	800a274 <_printf_i+0x210>
 800a158:	4665      	mov	r5, ip
 800a15a:	2a08      	cmp	r2, #8
 800a15c:	d10b      	bne.n	800a176 <_printf_i+0x112>
 800a15e:	6823      	ldr	r3, [r4, #0]
 800a160:	07db      	lsls	r3, r3, #31
 800a162:	d508      	bpl.n	800a176 <_printf_i+0x112>
 800a164:	6923      	ldr	r3, [r4, #16]
 800a166:	6862      	ldr	r2, [r4, #4]
 800a168:	429a      	cmp	r2, r3
 800a16a:	bfde      	ittt	le
 800a16c:	2330      	movle	r3, #48	; 0x30
 800a16e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a172:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a176:	ebac 0305 	sub.w	r3, ip, r5
 800a17a:	6123      	str	r3, [r4, #16]
 800a17c:	f8cd 8000 	str.w	r8, [sp]
 800a180:	463b      	mov	r3, r7
 800a182:	aa03      	add	r2, sp, #12
 800a184:	4621      	mov	r1, r4
 800a186:	4630      	mov	r0, r6
 800a188:	f7ff fef6 	bl	8009f78 <_printf_common>
 800a18c:	3001      	adds	r0, #1
 800a18e:	d14d      	bne.n	800a22c <_printf_i+0x1c8>
 800a190:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a194:	b005      	add	sp, #20
 800a196:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a19a:	4839      	ldr	r0, [pc, #228]	; (800a280 <_printf_i+0x21c>)
 800a19c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a1a0:	6813      	ldr	r3, [r2, #0]
 800a1a2:	6821      	ldr	r1, [r4, #0]
 800a1a4:	1d1d      	adds	r5, r3, #4
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	6015      	str	r5, [r2, #0]
 800a1aa:	060a      	lsls	r2, r1, #24
 800a1ac:	d50b      	bpl.n	800a1c6 <_printf_i+0x162>
 800a1ae:	07ca      	lsls	r2, r1, #31
 800a1b0:	bf44      	itt	mi
 800a1b2:	f041 0120 	orrmi.w	r1, r1, #32
 800a1b6:	6021      	strmi	r1, [r4, #0]
 800a1b8:	b91b      	cbnz	r3, 800a1c2 <_printf_i+0x15e>
 800a1ba:	6822      	ldr	r2, [r4, #0]
 800a1bc:	f022 0220 	bic.w	r2, r2, #32
 800a1c0:	6022      	str	r2, [r4, #0]
 800a1c2:	2210      	movs	r2, #16
 800a1c4:	e7b7      	b.n	800a136 <_printf_i+0xd2>
 800a1c6:	064d      	lsls	r5, r1, #25
 800a1c8:	bf48      	it	mi
 800a1ca:	b29b      	uxthmi	r3, r3
 800a1cc:	e7ef      	b.n	800a1ae <_printf_i+0x14a>
 800a1ce:	4665      	mov	r5, ip
 800a1d0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a1d4:	fb02 3311 	mls	r3, r2, r1, r3
 800a1d8:	5cc3      	ldrb	r3, [r0, r3]
 800a1da:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a1de:	460b      	mov	r3, r1
 800a1e0:	2900      	cmp	r1, #0
 800a1e2:	d1f5      	bne.n	800a1d0 <_printf_i+0x16c>
 800a1e4:	e7b9      	b.n	800a15a <_printf_i+0xf6>
 800a1e6:	6813      	ldr	r3, [r2, #0]
 800a1e8:	6825      	ldr	r5, [r4, #0]
 800a1ea:	6961      	ldr	r1, [r4, #20]
 800a1ec:	1d18      	adds	r0, r3, #4
 800a1ee:	6010      	str	r0, [r2, #0]
 800a1f0:	0628      	lsls	r0, r5, #24
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	d501      	bpl.n	800a1fa <_printf_i+0x196>
 800a1f6:	6019      	str	r1, [r3, #0]
 800a1f8:	e002      	b.n	800a200 <_printf_i+0x19c>
 800a1fa:	066a      	lsls	r2, r5, #25
 800a1fc:	d5fb      	bpl.n	800a1f6 <_printf_i+0x192>
 800a1fe:	8019      	strh	r1, [r3, #0]
 800a200:	2300      	movs	r3, #0
 800a202:	6123      	str	r3, [r4, #16]
 800a204:	4665      	mov	r5, ip
 800a206:	e7b9      	b.n	800a17c <_printf_i+0x118>
 800a208:	6813      	ldr	r3, [r2, #0]
 800a20a:	1d19      	adds	r1, r3, #4
 800a20c:	6011      	str	r1, [r2, #0]
 800a20e:	681d      	ldr	r5, [r3, #0]
 800a210:	6862      	ldr	r2, [r4, #4]
 800a212:	2100      	movs	r1, #0
 800a214:	4628      	mov	r0, r5
 800a216:	f7f6 f81b 	bl	8000250 <memchr>
 800a21a:	b108      	cbz	r0, 800a220 <_printf_i+0x1bc>
 800a21c:	1b40      	subs	r0, r0, r5
 800a21e:	6060      	str	r0, [r4, #4]
 800a220:	6863      	ldr	r3, [r4, #4]
 800a222:	6123      	str	r3, [r4, #16]
 800a224:	2300      	movs	r3, #0
 800a226:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a22a:	e7a7      	b.n	800a17c <_printf_i+0x118>
 800a22c:	6923      	ldr	r3, [r4, #16]
 800a22e:	462a      	mov	r2, r5
 800a230:	4639      	mov	r1, r7
 800a232:	4630      	mov	r0, r6
 800a234:	47c0      	blx	r8
 800a236:	3001      	adds	r0, #1
 800a238:	d0aa      	beq.n	800a190 <_printf_i+0x12c>
 800a23a:	6823      	ldr	r3, [r4, #0]
 800a23c:	079b      	lsls	r3, r3, #30
 800a23e:	d413      	bmi.n	800a268 <_printf_i+0x204>
 800a240:	68e0      	ldr	r0, [r4, #12]
 800a242:	9b03      	ldr	r3, [sp, #12]
 800a244:	4298      	cmp	r0, r3
 800a246:	bfb8      	it	lt
 800a248:	4618      	movlt	r0, r3
 800a24a:	e7a3      	b.n	800a194 <_printf_i+0x130>
 800a24c:	2301      	movs	r3, #1
 800a24e:	464a      	mov	r2, r9
 800a250:	4639      	mov	r1, r7
 800a252:	4630      	mov	r0, r6
 800a254:	47c0      	blx	r8
 800a256:	3001      	adds	r0, #1
 800a258:	d09a      	beq.n	800a190 <_printf_i+0x12c>
 800a25a:	3501      	adds	r5, #1
 800a25c:	68e3      	ldr	r3, [r4, #12]
 800a25e:	9a03      	ldr	r2, [sp, #12]
 800a260:	1a9b      	subs	r3, r3, r2
 800a262:	42ab      	cmp	r3, r5
 800a264:	dcf2      	bgt.n	800a24c <_printf_i+0x1e8>
 800a266:	e7eb      	b.n	800a240 <_printf_i+0x1dc>
 800a268:	2500      	movs	r5, #0
 800a26a:	f104 0919 	add.w	r9, r4, #25
 800a26e:	e7f5      	b.n	800a25c <_printf_i+0x1f8>
 800a270:	2b00      	cmp	r3, #0
 800a272:	d1ac      	bne.n	800a1ce <_printf_i+0x16a>
 800a274:	7803      	ldrb	r3, [r0, #0]
 800a276:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a27a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a27e:	e76c      	b.n	800a15a <_printf_i+0xf6>
 800a280:	0800abd7 	.word	0x0800abd7
 800a284:	0800abe8 	.word	0x0800abe8

0800a288 <__ascii_wctomb>:
 800a288:	b149      	cbz	r1, 800a29e <__ascii_wctomb+0x16>
 800a28a:	2aff      	cmp	r2, #255	; 0xff
 800a28c:	bf85      	ittet	hi
 800a28e:	238a      	movhi	r3, #138	; 0x8a
 800a290:	6003      	strhi	r3, [r0, #0]
 800a292:	700a      	strbls	r2, [r1, #0]
 800a294:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a298:	bf98      	it	ls
 800a29a:	2001      	movls	r0, #1
 800a29c:	4770      	bx	lr
 800a29e:	4608      	mov	r0, r1
 800a2a0:	4770      	bx	lr

0800a2a2 <memmove>:
 800a2a2:	4288      	cmp	r0, r1
 800a2a4:	b510      	push	{r4, lr}
 800a2a6:	eb01 0302 	add.w	r3, r1, r2
 800a2aa:	d807      	bhi.n	800a2bc <memmove+0x1a>
 800a2ac:	1e42      	subs	r2, r0, #1
 800a2ae:	4299      	cmp	r1, r3
 800a2b0:	d00a      	beq.n	800a2c8 <memmove+0x26>
 800a2b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2b6:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a2ba:	e7f8      	b.n	800a2ae <memmove+0xc>
 800a2bc:	4283      	cmp	r3, r0
 800a2be:	d9f5      	bls.n	800a2ac <memmove+0xa>
 800a2c0:	1881      	adds	r1, r0, r2
 800a2c2:	1ad2      	subs	r2, r2, r3
 800a2c4:	42d3      	cmn	r3, r2
 800a2c6:	d100      	bne.n	800a2ca <memmove+0x28>
 800a2c8:	bd10      	pop	{r4, pc}
 800a2ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2ce:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a2d2:	e7f7      	b.n	800a2c4 <memmove+0x22>

0800a2d4 <_free_r>:
 800a2d4:	b538      	push	{r3, r4, r5, lr}
 800a2d6:	4605      	mov	r5, r0
 800a2d8:	2900      	cmp	r1, #0
 800a2da:	d045      	beq.n	800a368 <_free_r+0x94>
 800a2dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2e0:	1f0c      	subs	r4, r1, #4
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	bfb8      	it	lt
 800a2e6:	18e4      	addlt	r4, r4, r3
 800a2e8:	f000 f8d2 	bl	800a490 <__malloc_lock>
 800a2ec:	4a1f      	ldr	r2, [pc, #124]	; (800a36c <_free_r+0x98>)
 800a2ee:	6813      	ldr	r3, [r2, #0]
 800a2f0:	4610      	mov	r0, r2
 800a2f2:	b933      	cbnz	r3, 800a302 <_free_r+0x2e>
 800a2f4:	6063      	str	r3, [r4, #4]
 800a2f6:	6014      	str	r4, [r2, #0]
 800a2f8:	4628      	mov	r0, r5
 800a2fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2fe:	f000 b8c8 	b.w	800a492 <__malloc_unlock>
 800a302:	42a3      	cmp	r3, r4
 800a304:	d90c      	bls.n	800a320 <_free_r+0x4c>
 800a306:	6821      	ldr	r1, [r4, #0]
 800a308:	1862      	adds	r2, r4, r1
 800a30a:	4293      	cmp	r3, r2
 800a30c:	bf04      	itt	eq
 800a30e:	681a      	ldreq	r2, [r3, #0]
 800a310:	685b      	ldreq	r3, [r3, #4]
 800a312:	6063      	str	r3, [r4, #4]
 800a314:	bf04      	itt	eq
 800a316:	1852      	addeq	r2, r2, r1
 800a318:	6022      	streq	r2, [r4, #0]
 800a31a:	6004      	str	r4, [r0, #0]
 800a31c:	e7ec      	b.n	800a2f8 <_free_r+0x24>
 800a31e:	4613      	mov	r3, r2
 800a320:	685a      	ldr	r2, [r3, #4]
 800a322:	b10a      	cbz	r2, 800a328 <_free_r+0x54>
 800a324:	42a2      	cmp	r2, r4
 800a326:	d9fa      	bls.n	800a31e <_free_r+0x4a>
 800a328:	6819      	ldr	r1, [r3, #0]
 800a32a:	1858      	adds	r0, r3, r1
 800a32c:	42a0      	cmp	r0, r4
 800a32e:	d10b      	bne.n	800a348 <_free_r+0x74>
 800a330:	6820      	ldr	r0, [r4, #0]
 800a332:	4401      	add	r1, r0
 800a334:	1858      	adds	r0, r3, r1
 800a336:	4282      	cmp	r2, r0
 800a338:	6019      	str	r1, [r3, #0]
 800a33a:	d1dd      	bne.n	800a2f8 <_free_r+0x24>
 800a33c:	6810      	ldr	r0, [r2, #0]
 800a33e:	6852      	ldr	r2, [r2, #4]
 800a340:	605a      	str	r2, [r3, #4]
 800a342:	4401      	add	r1, r0
 800a344:	6019      	str	r1, [r3, #0]
 800a346:	e7d7      	b.n	800a2f8 <_free_r+0x24>
 800a348:	d902      	bls.n	800a350 <_free_r+0x7c>
 800a34a:	230c      	movs	r3, #12
 800a34c:	602b      	str	r3, [r5, #0]
 800a34e:	e7d3      	b.n	800a2f8 <_free_r+0x24>
 800a350:	6820      	ldr	r0, [r4, #0]
 800a352:	1821      	adds	r1, r4, r0
 800a354:	428a      	cmp	r2, r1
 800a356:	bf04      	itt	eq
 800a358:	6811      	ldreq	r1, [r2, #0]
 800a35a:	6852      	ldreq	r2, [r2, #4]
 800a35c:	6062      	str	r2, [r4, #4]
 800a35e:	bf04      	itt	eq
 800a360:	1809      	addeq	r1, r1, r0
 800a362:	6021      	streq	r1, [r4, #0]
 800a364:	605c      	str	r4, [r3, #4]
 800a366:	e7c7      	b.n	800a2f8 <_free_r+0x24>
 800a368:	bd38      	pop	{r3, r4, r5, pc}
 800a36a:	bf00      	nop
 800a36c:	200002a8 	.word	0x200002a8

0800a370 <_malloc_r>:
 800a370:	b570      	push	{r4, r5, r6, lr}
 800a372:	1ccd      	adds	r5, r1, #3
 800a374:	f025 0503 	bic.w	r5, r5, #3
 800a378:	3508      	adds	r5, #8
 800a37a:	2d0c      	cmp	r5, #12
 800a37c:	bf38      	it	cc
 800a37e:	250c      	movcc	r5, #12
 800a380:	2d00      	cmp	r5, #0
 800a382:	4606      	mov	r6, r0
 800a384:	db01      	blt.n	800a38a <_malloc_r+0x1a>
 800a386:	42a9      	cmp	r1, r5
 800a388:	d903      	bls.n	800a392 <_malloc_r+0x22>
 800a38a:	230c      	movs	r3, #12
 800a38c:	6033      	str	r3, [r6, #0]
 800a38e:	2000      	movs	r0, #0
 800a390:	bd70      	pop	{r4, r5, r6, pc}
 800a392:	f000 f87d 	bl	800a490 <__malloc_lock>
 800a396:	4a21      	ldr	r2, [pc, #132]	; (800a41c <_malloc_r+0xac>)
 800a398:	6814      	ldr	r4, [r2, #0]
 800a39a:	4621      	mov	r1, r4
 800a39c:	b991      	cbnz	r1, 800a3c4 <_malloc_r+0x54>
 800a39e:	4c20      	ldr	r4, [pc, #128]	; (800a420 <_malloc_r+0xb0>)
 800a3a0:	6823      	ldr	r3, [r4, #0]
 800a3a2:	b91b      	cbnz	r3, 800a3ac <_malloc_r+0x3c>
 800a3a4:	4630      	mov	r0, r6
 800a3a6:	f000 f863 	bl	800a470 <_sbrk_r>
 800a3aa:	6020      	str	r0, [r4, #0]
 800a3ac:	4629      	mov	r1, r5
 800a3ae:	4630      	mov	r0, r6
 800a3b0:	f000 f85e 	bl	800a470 <_sbrk_r>
 800a3b4:	1c43      	adds	r3, r0, #1
 800a3b6:	d124      	bne.n	800a402 <_malloc_r+0x92>
 800a3b8:	230c      	movs	r3, #12
 800a3ba:	6033      	str	r3, [r6, #0]
 800a3bc:	4630      	mov	r0, r6
 800a3be:	f000 f868 	bl	800a492 <__malloc_unlock>
 800a3c2:	e7e4      	b.n	800a38e <_malloc_r+0x1e>
 800a3c4:	680b      	ldr	r3, [r1, #0]
 800a3c6:	1b5b      	subs	r3, r3, r5
 800a3c8:	d418      	bmi.n	800a3fc <_malloc_r+0x8c>
 800a3ca:	2b0b      	cmp	r3, #11
 800a3cc:	d90f      	bls.n	800a3ee <_malloc_r+0x7e>
 800a3ce:	600b      	str	r3, [r1, #0]
 800a3d0:	50cd      	str	r5, [r1, r3]
 800a3d2:	18cc      	adds	r4, r1, r3
 800a3d4:	4630      	mov	r0, r6
 800a3d6:	f000 f85c 	bl	800a492 <__malloc_unlock>
 800a3da:	f104 000b 	add.w	r0, r4, #11
 800a3de:	1d23      	adds	r3, r4, #4
 800a3e0:	f020 0007 	bic.w	r0, r0, #7
 800a3e4:	1ac3      	subs	r3, r0, r3
 800a3e6:	d0d3      	beq.n	800a390 <_malloc_r+0x20>
 800a3e8:	425a      	negs	r2, r3
 800a3ea:	50e2      	str	r2, [r4, r3]
 800a3ec:	e7d0      	b.n	800a390 <_malloc_r+0x20>
 800a3ee:	428c      	cmp	r4, r1
 800a3f0:	684b      	ldr	r3, [r1, #4]
 800a3f2:	bf16      	itet	ne
 800a3f4:	6063      	strne	r3, [r4, #4]
 800a3f6:	6013      	streq	r3, [r2, #0]
 800a3f8:	460c      	movne	r4, r1
 800a3fa:	e7eb      	b.n	800a3d4 <_malloc_r+0x64>
 800a3fc:	460c      	mov	r4, r1
 800a3fe:	6849      	ldr	r1, [r1, #4]
 800a400:	e7cc      	b.n	800a39c <_malloc_r+0x2c>
 800a402:	1cc4      	adds	r4, r0, #3
 800a404:	f024 0403 	bic.w	r4, r4, #3
 800a408:	42a0      	cmp	r0, r4
 800a40a:	d005      	beq.n	800a418 <_malloc_r+0xa8>
 800a40c:	1a21      	subs	r1, r4, r0
 800a40e:	4630      	mov	r0, r6
 800a410:	f000 f82e 	bl	800a470 <_sbrk_r>
 800a414:	3001      	adds	r0, #1
 800a416:	d0cf      	beq.n	800a3b8 <_malloc_r+0x48>
 800a418:	6025      	str	r5, [r4, #0]
 800a41a:	e7db      	b.n	800a3d4 <_malloc_r+0x64>
 800a41c:	200002a8 	.word	0x200002a8
 800a420:	200002ac 	.word	0x200002ac

0800a424 <_realloc_r>:
 800a424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a426:	4607      	mov	r7, r0
 800a428:	4614      	mov	r4, r2
 800a42a:	460e      	mov	r6, r1
 800a42c:	b921      	cbnz	r1, 800a438 <_realloc_r+0x14>
 800a42e:	4611      	mov	r1, r2
 800a430:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a434:	f7ff bf9c 	b.w	800a370 <_malloc_r>
 800a438:	b922      	cbnz	r2, 800a444 <_realloc_r+0x20>
 800a43a:	f7ff ff4b 	bl	800a2d4 <_free_r>
 800a43e:	4625      	mov	r5, r4
 800a440:	4628      	mov	r0, r5
 800a442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a444:	f000 f826 	bl	800a494 <_malloc_usable_size_r>
 800a448:	42a0      	cmp	r0, r4
 800a44a:	d20f      	bcs.n	800a46c <_realloc_r+0x48>
 800a44c:	4621      	mov	r1, r4
 800a44e:	4638      	mov	r0, r7
 800a450:	f7ff ff8e 	bl	800a370 <_malloc_r>
 800a454:	4605      	mov	r5, r0
 800a456:	2800      	cmp	r0, #0
 800a458:	d0f2      	beq.n	800a440 <_realloc_r+0x1c>
 800a45a:	4631      	mov	r1, r6
 800a45c:	4622      	mov	r2, r4
 800a45e:	f7ff fb34 	bl	8009aca <memcpy>
 800a462:	4631      	mov	r1, r6
 800a464:	4638      	mov	r0, r7
 800a466:	f7ff ff35 	bl	800a2d4 <_free_r>
 800a46a:	e7e9      	b.n	800a440 <_realloc_r+0x1c>
 800a46c:	4635      	mov	r5, r6
 800a46e:	e7e7      	b.n	800a440 <_realloc_r+0x1c>

0800a470 <_sbrk_r>:
 800a470:	b538      	push	{r3, r4, r5, lr}
 800a472:	4c06      	ldr	r4, [pc, #24]	; (800a48c <_sbrk_r+0x1c>)
 800a474:	2300      	movs	r3, #0
 800a476:	4605      	mov	r5, r0
 800a478:	4608      	mov	r0, r1
 800a47a:	6023      	str	r3, [r4, #0]
 800a47c:	f7f7 fee2 	bl	8002244 <_sbrk>
 800a480:	1c43      	adds	r3, r0, #1
 800a482:	d102      	bne.n	800a48a <_sbrk_r+0x1a>
 800a484:	6823      	ldr	r3, [r4, #0]
 800a486:	b103      	cbz	r3, 800a48a <_sbrk_r+0x1a>
 800a488:	602b      	str	r3, [r5, #0]
 800a48a:	bd38      	pop	{r3, r4, r5, pc}
 800a48c:	200009d0 	.word	0x200009d0

0800a490 <__malloc_lock>:
 800a490:	4770      	bx	lr

0800a492 <__malloc_unlock>:
 800a492:	4770      	bx	lr

0800a494 <_malloc_usable_size_r>:
 800a494:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a498:	1f18      	subs	r0, r3, #4
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	bfbc      	itt	lt
 800a49e:	580b      	ldrlt	r3, [r1, r0]
 800a4a0:	18c0      	addlt	r0, r0, r3
 800a4a2:	4770      	bx	lr

0800a4a4 <_init>:
 800a4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4a6:	bf00      	nop
 800a4a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4aa:	bc08      	pop	{r3}
 800a4ac:	469e      	mov	lr, r3
 800a4ae:	4770      	bx	lr

0800a4b0 <_fini>:
 800a4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4b2:	bf00      	nop
 800a4b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4b6:	bc08      	pop	{r3}
 800a4b8:	469e      	mov	lr, r3
 800a4ba:	4770      	bx	lr
